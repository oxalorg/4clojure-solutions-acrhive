[{"code": "(fn [& xs] (reduce #(if (< %1 %2) %2 %1) xs))", "problem": 38, "user": "4dd61f98535d2dad7130b5c6"}, {"code": "#(reduce (fn [x y] (if (> x y) x y)) %&)", "problem": 38, "user": "4dd62278535d2dad7130b5c7"}, {"code": "(fn [x & xs]\r\n  (if-let [[y & ys] xs]\r\n    (if (> x y)\r\n      (recur x ys)\r\n      (recur y ys))\r\n    x))", "problem": 38, "user": "4dd6d6a0535d2dad7130b5ca"}, {"code": "(fn[& x](reduce #(if(<%%2)%2%)x))", "problem": 38, "user": "4dd66da7535d2dad7130b5c8"}, {"code": "(fn [& s] (last (sort s)))", "problem": 38, "user": "4db135081254ad5b4805fa67"}, {"code": "(comp first (partial sort >) list)", "problem": 38, "user": "4dd6fa35535d2dad7130b5cd"}, {"code": "(fn [& x]\r\n   (letfn [(cmx [a b] (if (> a b)  a  b))]\r\n      (reduce cmx x)))", "problem": 38, "user": "4dbdab4e535d020aff1edf49"}, {"code": "(fn [& x]\r\n  (letfn [(mmx [a b]\r\n  (if (= b nil)\r\n      a\r\n      (if (< a (first b))\r\n            (mmx (first b) (next b))\r\n            (mmx a (next b)))))]\r\n  (mmx 0 x)))", "problem": 38, "user": "4dd1de4d535dae65d5c462d7"}, {"code": "(fn max-arg-count\r\n[primer & resta]\r\n(loop [mymax primer llista resta]\r\n\t(if (empty? llista)\r\n\tmymax\r\n\t\t(if (> (first llista) mymax)\r\n\t\t(recur (first llista) (rest llista))\r\n\t\t(recur mymax (rest llista))\r\n\t\t)\r\n\t)\r\n)\r\n)", "problem": 38, "user": "4dadca03c9a9d6ed4199dc57"}, {"code": "(fn [& more] (reduce (fn [acc elm] (if (> acc elm) acc elm)) 0 more))", "problem": 38, "user": "4dd6d7ee535d2dad7130b5cb"}, {"code": "(fn [& list] (last (sort list)))", "problem": 38, "user": "4dadc6f2c9a9d6ed4099dc57"}, {"code": "(fn mymax [& more]\r\n   (let [f (first more)]\r\n   (if (= (count more) 1)\r\n     f\r\n     (if (> f (apply mymax (rest more)))\r\n       f\r\n       (apply mymax (rest more))))))", "problem": 38, "user": "4dd023dd535d5973398f92ad"}, {"code": "(fn [x & xs]\r\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4dd4f0a8535dae65d5c462e4"}, {"code": "(fn max2\r\n  ([x] x)\r\n  ([x & more]\r\n     (loop [m x lst more]\r\n       (cond\r\n        (= '() lst) m\r\n        (> (first lst) m) (recur (first lst) (rest lst))\r\n        :else (recur m (rest lst))\r\n        )))\r\n  )", "problem": 38, "user": "4dcbb035535d5973398f928d"}, {"code": "(fn _m\r\n  ([x] x)\r\n  ([x y] (if (> x y) x y))\r\n  ([x y & rest] (reduce _m (_m x y) rest)))", "problem": 38, "user": "4dd52e29535dae65d5c462e5"}, {"code": "(fn [ & all] (last (sort all)))", "problem": 38, "user": "4dae0510c9a9d6ed4b99dc57"}, {"code": "(fn [x & args] (loop [mx x args args]\r\n  (if (empty? args) mx\r\n                    (recur (if (> (first args) mx) (first args) mx) (rest args)))))", "problem": 38, "user": "4ddbd934535d02782fcbe9fc"}, {"code": "(fn [& xs]\r\n  (reduce #(if (< %1 %2) %2 %1) xs))", "problem": 38, "user": "4ddbfb8a535d02782fcbea00"}, {"code": "(fn mymax\r\n  ([x] x)\r\n  ([x y] (if (> x y) x y))\r\n  ([x y & more]\r\n   (reduce mymax (mymax x y) more)))", "problem": 38, "user": "4dd579b5535dae65d5c462ea"}, {"code": "(fn [& rest] (last (sort rest)))", "problem": 38, "user": "4ddc620d535d02782fcbea06"}, {"code": ";max \r\n(fn [& pars]\r\n  (reduce #(if-not (> %2 %1) %1 %2) pars))", "problem": 38, "user": "4ddcabcb535d6ebe9be03f52"}, {"code": "(fn [& lst] (first (sort > lst)))", "problem": 38, "user": "4dd7d040535d2dad7130b5d6"}, {"code": "(fn [& input] (reduce (fn [current next] (if (> current next) current next)) input))", "problem": 38, "user": "4dddf817535d08e6dec9fdd3"}, {"code": "(fn [& coll] ((fn getmax [maxval coll](\r\nif (= nil (seq (rest coll))) maxval (if (> (first coll) maxval)\r\n(getmax (first coll) (rest coll)) \r\n(getmax maxval (rest coll))) \r\n)) 0 coll\r\n))", "problem": 38, "user": "4dbed096535d020aff1edf6b"}, {"code": "(fn [x & more]\r\n  (reduce #(if (> % %2) % %2) x more))", "problem": 38, "user": "4ddbdc1b535d02782fcbe9fd"}, {"code": "(fn mymax\r\n  ([] 0)\r\n  ([x] (cast Number x))\r\n  ([x y] (if (> x y) x y))\r\n  ([x y & more]\r\n   (reduce mymax (mymax x y) more)))", "problem": 38, "user": "4ddbd600535d02782fcbe9fb"}, {"code": "(fn findmax [x & more] \r\n  (reduce (fn [a b] (if (< a b) b a)) x more))", "problem": 38, "user": "4ddeb916535d08e6dec9fdd9"}, {"code": "(fn [& items] \r\n  (reduce (fn [m n] (if (> n m) n m))\r\n    (first items) items))", "problem": 38, "user": "4ddc1c89535d02782fcbea01"}, {"code": "(fn [& coll]\r\n  (reduce\r\n    (fn [x y]\r\n      (if (> x y)\r\n        x\r\n        y))\r\n    0\r\n    coll))", "problem": 38, "user": "4ddee37c535d08e6dec9fddc"}, {"code": "(fn m\r\n  ([a] a)\r\n  ([a b] (if (> a b) a b))\r\n  ([a b & more] (m (m a b) (reduce m more))))", "problem": 38, "user": "4dda5d07535d02782fcbe9f2"}, {"code": "(fn [& lst]\r\n  (loop [m (first lst)\r\n         lst (rest lst)]\r\n    (cond (empty? lst)\r\n          m\r\n          (> (first lst) m)\r\n          (recur (first lst) (rest lst))\r\n          :else\r\n          (recur m (rest lst)))))", "problem": 38, "user": "4de2f44f535d08e6dec9fdec"}, {"code": "(fn mymax [m & args]\r\n  (if (empty? args)\r\n    m\r\n    (if (< m (first args))\r\n      (recur (first args) (rest args))\r\n      (recur m (rest args)))))", "problem": 38, "user": "4de623ef535d08e6dec9fdf4"}, {"code": "(fn [& more] (reduce #(if (> % %2) % %2) more))", "problem": 38, "user": "4de18de7535d08e6dec9fde8"}, {"code": "(fn [x & xs] (reduce (fn [z y] (if (> y z) y z)) x xs))", "problem": 38, "user": "4dea9406535d08e6dec9fe01"}, {"code": "#(reduce (fn [x y] (if (> x y) x y)) %&)", "problem": 38, "user": "4de77a0a535d08e6dec9fdfa"}, {"code": "(fn m[& more] \n  (reduce #(if (> %1 %2) %1 %2) (seq more)))", "problem": 38, "user": "4de8a7d7535d08e6dec9fdfe"}, {"code": "(fn [& a]\r\n  (if (empty? a)\r\n    nil\r\n    (let [op > f (first a) r (rest a)]\r\n      (if (empty? r) f\r\n        (loop [r2 (rest r) l f c (first r)]\r\n          (let [m (if (op l c) l c)]\r\n            (if (empty? r2) m\r\n              (recur (rest r2) m (first r2)))))))))", "problem": 38, "user": "4dee4a9c535d08e6dec9fe11"}, {"code": "(fn [& elements] (last (sort (into () elements))))", "problem": 38, "user": "4de85c5d535d08e6dec9fdfc"}, {"code": "(fn m [& s]\r\n  (letfn [(mh [s g]\r\n            (if (empty? s)\r\n                g\r\n                (if (> (first s) g)\r\n                    (mh (rest s) (first s))\r\n                    (mh (rest s) g))))]\r\n        (mh s 0)))", "problem": 38, "user": "4df1ce44535d08e6dec9fe1f"}, {"code": "(fn m ([x] x) ([x y] (if (> x y) x y)) ([x y & more] (reduce m (m x y) more)))", "problem": 38, "user": "4db6ce85535d1e037afb217f"}, {"code": "(fn [& args] (reduce (fn [x,y] (if (< x y) y x)) args))", "problem": 38, "user": "4df1e213535d08e6dec9fe20"}, {"code": "(fn [& xs]\r\n       (reduce #(if (> %1 %2) %1 %2) (first xs) xs))", "problem": 38, "user": "4deb529a535d08e6dec9fe04"}, {"code": "(fn [& p] (reduce #(if (< %1 %2) %2 %1) 0 p))", "problem": 38, "user": "4dbbe3b9535d3f4042261ecf"}, {"code": "(fn [x & xs]\r\n  (reduce #(if (> %1 %2) %1 %2) x xs))", "problem": 38, "user": "4df168bd535d08e6dec9fe1d"}, {"code": "(comp (partial reduce #(if (>= %1 %2) %1 %2)) vector)", "problem": 38, "user": "4df3d4f4535d08e6dec9fe2c"}, {"code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) s))", "problem": 38, "user": "4df20dda535d08e6dec9fe23"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "4df30f76535d08e6dec9fe28"}, {"code": "(fn [x & xs]\r\n  (reduce #(if (> %1 %2) %1 %2) x xs))", "problem": 38, "user": "4df407c3535d08e6dec9fe2e"}, {"code": "(fn [& s] (first (reverse (sort s))))", "problem": 38, "user": "4df3df8a535d08e6dec9fe2d"}, {"code": "(fn [& xs]\r\n  (reduce (fn [a b]\r\n            (if (> a b) a b)) xs))", "problem": 38, "user": "4daef21cedd6309eace4d169"}, {"code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) (first coll) (rest coll)))", "problem": 38, "user": "4df669d4535d08e6dec9fe35"}, {"code": "(fn  [& args]\r\n                    (loop[result (first args) curArgs args]\r\n                      (\r\n                        if(empty? curArgs)\r\n                        result\r\n                        ( recur (if(< result (first curArgs)) (first curArgs) result) (next curArgs)\r\n                          ))))", "problem": 38, "user": "4de6f806535d08e6dec9fdf7"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4dfd4ba8535d04ed9115e781"}, {"code": "(fn [& args] (reduce (fn [x y] (cond (> x y) x :else y)) args))", "problem": 38, "user": "4dfceeb9535d04ed9115e77e"}, {"code": ";(fn maxxer\r\n;  ([x] x)\r\n;  ([x y] (if (> x y) x y))\r\n;  ([x y & morevals]\r\n;   (let [initval (maxxer x y ) ]\r\n;   (reduce maxxer initval morevals))))\r\n\r\n\r\n(fn maxxer\r\n  ([x] x)\r\n  ([x y] (if (> x y) x y))\r\n  ([x y & morevals]\r\n   (reduce maxxer (maxxer x y) morevals)))", "problem": 38, "user": "4de27757535d08e6dec9fdea"}, {"code": "(fn [& coll] (reduce (fn [a b] (if (> a b) a b)) coll))", "problem": 38, "user": "4def301c535d08e6dec9fe12"}, {"code": "(fn [& res]\r\n  (reduce\r\n    #(if (> %1 %2) %1 %2)\r\n    res))", "problem": 38, "user": "4e02bee8535d04ed9115e791"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4e03c616535d04ed9115e796"}, {"code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "problem": 38, "user": "4db4c93f535dc0f10411755c"}, {"code": "(fn m\r\n  ([x] x)\r\n  ([x y] (if (> x y) x y))\r\n  ([x y & more]\r\n    (reduce m (m x y) more)))", "problem": 38, "user": "4dc7e7a5535d8a4b2fd74290"}, {"code": "(fn [& args]\r\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4e03b010535d04ed9115e794"}, {"code": "(fn mymax\r\n              ([] 0)\r\n              ([x] x)\r\n              ([x y] (if (> x y) x y))\r\n              ([x y & more] (reduce mymax (mymax x y) more)))", "problem": 38, "user": "4dddff47535d08e6dec9fdd4"}, {"code": "(fn[x & more] (last (sort (flatten (list x more)))))", "problem": 38, "user": "4e080562535d04ed9115e7aa"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "4e059278535d04ed9115e7a5"}, {"code": "(fn [& s] \r\n   (apply reduce (list #(if (> %1 %2)\r\n                          %1\r\n                          %2) s)))", "problem": 38, "user": "4e0d8c27535d04ed9115e7b7"}, {"code": "(fn \r\n  ([& numbers] \r\n      (loop [number numbers maxn (first numbers)]\r\n        (if (empty? number) \r\n         maxn\r\n         (if (> (last number) maxn)\r\n          (recur (butlast number)(last number))\r\n          (recur (butlast number) maxn))\r\n                   ))))", "problem": 38, "user": "4de8fb73535d08e6dec9fdff"}, {"code": "(fn [& s] (reduce (fn [l r] (if (< l r) r l)) s))", "problem": 38, "user": "4e0e0529535d04ed9115e7b9"}, {"code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4e09125f535d04ed9115e7ad"}, {"code": "(fn [& c] (reduce #(if (> %1 %2) %1 %2) c))", "problem": 38, "user": "4e111538535d04ed9115e7c3"}, {"code": "(fn [a & b] (reduce #(if (> % %2) % %2) a b))", "problem": 38, "user": "4daa374930acd6ed13482a68"}, {"code": "(fn mymax [& args]\r\n  (reduce #(if (< %1 %2) %2 %1) args))", "problem": 38, "user": "4e123905535d04ed9115e7ce"}, {"code": "(fn my-max\r\n          ([x] x)\r\n          ([x y] (if (> x y) x y))\r\n          ([x y & more] (reduce my-max (my-max x y) more)))", "problem": 38, "user": "4e043d85535d04ed9115e79e"}, {"code": "(fn [fst & args]\r\n  (loop [a fst b args]\r\n  (if (= b '())\r\n\t  a\r\n\t  (recur ((fn [a b] (if (> a b) a b)) a (first b)) (rest b)))))", "problem": 38, "user": "4df9c598535d04ed9115e77a"}, {"code": "(fn my-max [& nums]\r\n  (loop [m (first nums) [x & nums] (rest nums)]\r\n    (let [new-max (if (> x m) x m)]\r\n      (if nums\r\n        (recur new-max nums)\r\n        new-max))))", "problem": 38, "user": "4e15f248535d04ed9115e7e6"}, {"code": "(fn [x & xs]\r\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4e1158aa535d04ed9115e7c6"}, {"code": "#(last(sort%&))", "problem": 38, "user": "4e14b925535d04ed9115e7df"}, {"code": "(fn [x & xs] \r\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4e14090d535d04ed9115e7dc"}, {"code": "(fn [& args]\r\n  \t(reduce (fn [a b]\r\n\t\t  (if (> a b)\r\n\t\t\t\ta\r\n\t\t\t\tb)) args))", "problem": 38, "user": "4e0cdc6f535d04ed9115e7b4"}, {"code": "(fn maxx ([x] x)\r\n  ([x y] (if (> x y) x y))\r\n  ([x y & more]\r\n   (reduce maxx (maxx x y) more)))", "problem": 38, "user": "4dbe8f7f535d020aff1edf64"}, {"code": "(fn [ & r] (reduce #(if (> %1 %2) %1 %2) r))", "problem": 38, "user": "4deff9f9535d08e6dec9fe15"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4e062ea8535d04ed9115e7a7"}, {"code": "(fn mymax [f & r]\r\n    (letfn [( mymaxr [m lt]\r\n  \t     (if (= lt '())\r\n\t\t       m\r\n\t\t       (let [nm (if (> m (first lt)) m (first lt))]\r\n\t\t\t (mymaxr nm (rest lt)))))]\r\n\t   (mymaxr f r)))", "problem": 38, "user": "4e1b2cd9535d04ed9115e7fd"}, {"code": "(fn [x & y] (reduce #(if (> % %2) % %2) x y))", "problem": 38, "user": "4e16bdef535d04ed9115e7e9"}, {"code": "(fn mymax\r\n  ([x] x)\r\n  ([x & rest] (let [y (apply mymax rest)] (if (> x y) x y)))\r\n)", "problem": 38, "user": "4e14108c535d04ed9115e7dd"}, {"code": "(fn [pivot & rest]\r\n  (reduce #(if (< %1 %2) %2 %1) pivot rest))", "problem": 38, "user": "4dfd7ecf535d04ed9115e783"}, {"code": "(fn [x & xs]\r\n  (reduce #(if (< %1 %2) %2 %1) (flatten (cons x xs))))", "problem": 38, "user": "4ddb339c535d02782fcbe9f9"}, {"code": "#(first (sort-by - (seq %&)))", "problem": 38, "user": "4e1b8106535d04ed9115e801"}, {"code": "(fn [& coll]\r\n  (loop [acc (first coll)\r\n         coll coll]\r\n    (if (empty? coll)\r\n      acc\r\n      (recur (if (> (first coll) acc)\r\n               (first coll)\r\n               acc)\r\n             (rest coll)))))", "problem": 38, "user": "4e22b78b535d04ed9115e81e"}, {"code": "(fn [& x] (first (sort > (into [] x))))", "problem": 38, "user": "4e1f9bb5535d04ed9115e80d"}, {"code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "problem": 38, "user": "4e131443535d04ed9115e7d3"}, {"code": "(fn [& all] (reduce #(if (> %1 %2) %1 %2) all))", "problem": 38, "user": "4e1ec17a535d04ed9115e80a"}, {"code": "(comp last sort list)", "problem": 38, "user": "4de760a3535d08e6dec9fdf9"}, {"code": "(fn [& all]\n  (reduce\n    (fn [a b]\n      (if (> a b)\n        a\n        b))\n    all))", "problem": 38, "user": "4de165f3535d08e6dec9fde6"}, {"code": "(fn [& s] (last (sort s) ))", "problem": 38, "user": "4e218464535d04ed9115e816"}, {"code": "(fn [& s] (last (sort s)))", "problem": 38, "user": "4e218470535d04ed9115e817"}, {"code": "(fn [& coll]\r\n  (reduce \r\n    #(if (> %2 %1) %2 %1)\r\n    coll))", "problem": 38, "user": "4e113a81535d04ed9115e7c5"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4e232f34535d04ed9115e81f"}, {"code": "(fn [& args]\r\n   (loop [m (first args) r (rest args)]\r\n     (if (nil? (seq r))\r\n       m\r\n       (let [f (first r)]\r\n         (if (> m f)\r\n           (recur m (rest r))\r\n           (recur f (rest r)))))))", "problem": 38, "user": "4e26e8b4535deb9a81d77ef6"}, {"code": "(fn [& numbers]\n  (reduce #(if (< %1 %2) %2 %1) numbers))", "problem": 38, "user": "4e28120f535deb9a81d77efa"}, {"code": "(fn mymax [x & others]\n  (loop [cur x\n         items others]\n            (if (nil? (first items))\n              cur\n              (recur (if (> (first items) cur)\n                      (first items)\n                      cur)\n                      (rest items)))))", "problem": 38, "user": "4e21c0c7535d04ed9115e818"}, {"code": "#(letfn [(mymax [m args]\r\n  \t\t (if (empty? args)\r\n\t\t\t     m\r\n\t\t\t     (if (> (first args) m)\r\n\t\t\t\t      (mymax (first args) (rest args))\r\n\t\t\t\t      (mymax m (rest args)))))]\r\n\t(mymax (first %&) (rest %&)))", "problem": 38, "user": "4e273301535deb9a81d77ef7"}, {"code": "(fn [& args]\n  (first (reverse (sort args))))", "problem": 38, "user": "4dbde951535d020aff1edf53"}, {"code": "(fn [& vs]\n  ((fn [m vals]\n    (let [val (first vals)]\n      (if (nil? val)\n        m\n        (recur (if (> val m) val m) (rest vals)))))\n    0 vs))", "problem": 38, "user": "4dbdc898535d020aff1edf4a"}, {"code": "(fn mymax\n  ([x] x)\n  ([x & y]\n    (let [m (apply mymax y)]\n      (if (> x m) x m))))", "problem": 38, "user": "4e2d84bf535deb9a81d77f09"}, {"code": "(fn max-dl [& coll]\n  (reduce (fn [acc x]\n      (if (> x acc)\n\t      x\n\t      acc))\n\t  coll))", "problem": 38, "user": "4dc54eb2535d8a4b2fd74284"}, {"code": "(fn my-max [& xs]\n (reduce #(if (> %1 %2) %1 %2) 0 xs))", "problem": 38, "user": "4e2d562c535deb9a81d77f07"}, {"code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) s))", "problem": 38, "user": "4e2edb0e535deb9a81d77f0d"}, {"code": "(fn hoge [x & more]\n  (if (= (count more) 0) x\n      (if (>= x (apply hoge more)) x (apply hoge more))))", "problem": 38, "user": "4e2e6460535deb9a81d77f0b"}, {"code": "(fn [x & more] \n  (reduce \n    (fn [a b]\n      (if (> a b) a b) \n    )\n    x more\n  )\n)", "problem": 38, "user": "4e283bae535deb9a81d77efb"}, {"code": "(fn maxy [& seq]\n  (reduce (fn [maxn num] \n            (if (< maxn num) num maxn))\n    0 seq))", "problem": 38, "user": "4e2f9e71535deb9a81d77f11"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4e307313535deb9a81d77f14"}, {"code": "(fn [& C]\n  (reduce\n   (fn [x y] (if (< x y) y x))\n   C))", "problem": 38, "user": "4e31a15c535deb9a81d77f1e"}, {"code": "(comp (partial reduce (fn [x y] (if (< x y) y x))) list)", "problem": 38, "user": "4e342671535deb9a81d77f29"}, {"code": "(fn [x & a] (reduce (fn [y z] (if (> y z) y z))\n(flatten (list x a))))", "problem": 38, "user": "4e3000c8535deb9a81d77f13"}, {"code": "(fn [& args] (last (apply sorted-set args)))", "problem": 38, "user": "4ded27db535d08e6dec9fe0a"}, {"code": "(fn imum\n  ([x y] (if (> x y) x y))\n  ([x y z]\n    (imum (imum x y) z))\n  ([x w y z]\n    (imum (imum (imum x y) z) w))\n)", "problem": 38, "user": "4e3456f9535deb9a81d77f2a"}, {"code": "(fn [x & xs]\n  (reduce (fn [a b] (if (> a b) a b)) (cons x xs)))", "problem": 38, "user": "4e36425c535deb9a81d77f33"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4e360757535deb9a81d77f32"}, {"code": "(fn [x & xs] \n  (if (empty? xs) x\n  (recur (if (> x (first xs)) x (first xs)) (rest xs))))", "problem": 38, "user": "4e372223535deb9a81d77f39"}, {"code": "(fn [& args] \n  (loop [m (first args) left (rest args)]\n    (if (empty? left) m\n        (if (> (first left) m)\n          (recur (first left) (rest left))\n          (recur m (rest left))))))", "problem": 38, "user": "4dada913c9a9d6ed2d99dc57"}, {"code": "(fn [& x]\r\n     (last (sort x)))", "problem": 38, "user": "4e370a04535deb9a81d77f37"}, {"code": "(fn [& args]\n  (reduce\n    (fn [x y]\n      (if (> x y) x y))\n  args))", "problem": 38, "user": "4e0febe6535d04ed9115e7be"}, {"code": "(fn mymax\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n    (reduce mymax (mymax x y) more)))", "problem": 38, "user": "4e333091535deb9a81d77f25"}, {"code": "(fn mymax [ best & more ]\n  (let [ contender (first more) ]\n    (cond\n      (empty? more) best\n      (> contender best) (apply mymax contender (rest more))\n      :else (apply mymax best (rest more)))))", "problem": 38, "user": "4e356d2b535deb9a81d77f2d"}, {"code": "(fn [& xs] (last (sort xs)))", "problem": 38, "user": "4e3996b0535deb9a81d77f41"}, {"code": "(fn \n  ([& numbers]\n    (last (sort numbers))))", "problem": 38, "user": "4e30da02535deb9a81d77f17"}, {"code": "(fn m\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & z] \n    (if (> x y)\n          (apply m (conj z x))\n          (apply m (conj z y))\n    )\n  )\n)", "problem": 38, "user": "4e39c710535deb9a81d77f45"}, {"code": "(fn mx [& lst] \n  ((fn [l m] (if (nil? l) m (if (< m (first l)) (recur (next l) (first l)) (recur (next l) m)))) lst 0))", "problem": 38, "user": "4e351b47535deb9a81d77f2b"}, {"code": "(fn [& args]\n  (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "4e39fb68535deb9a81d77f47"}, {"code": "(new clojure.core$max)", "problem": 38, "user": "4e3b6bff535deb9a81d77f52"}, {"code": "(fn most\r\n  ([x y] (if (> x y) x y))\r\n  ([x y & more]\r\n   (reduce most (most x y) more))\r\n)", "problem": 38, "user": "4e3ae7cd535deb9a81d77f4e"}, {"code": "(fn biggie\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] (apply biggie (biggie x y) more)))", "problem": 38, "user": "4e3ac1b2535deb9a81d77f4c"}, {"code": "(fn [& r] \n  (reduce #(if (> %1 %2) %1 %2) r))", "problem": 38, "user": "4e3f480c535dc968683fc497"}, {"code": "(fn [& a]\n  (reduce\n    #(if (> %2 %) %2 %)\n    a))", "problem": 38, "user": "4e2b1d48535deb9a81d77f03"}, {"code": "#(-> %& sort last)", "problem": 38, "user": "4e39d763535deb9a81d77f46"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4e3a5a67535deb9a81d77f49"}, {"code": "(fn [& params]\n  (let [find-max\n        (fn find-max\n          [ps max-so-far]\n          (if (empty? ps)\n            max-so-far\n            (if (> (first ps) max-so-far)\n              (find-max (rest ps) (first ps))\n              (find-max (rest ps) max-so-far))))]\n    (find-max params 0)))", "problem": 38, "user": "4e42f930535dc968683fc49f"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4e2ef93d535deb9a81d77f0f"}, {"code": "(fn maximo [x & xs]\n  (if (empty? xs)\n    x\n    (let [y (apply maximo xs)]\n      (if (>= x y) x y))))", "problem": 38, "user": "4db51ce0535d87e67b28fe06"}, {"code": "(fn [& arg]\n  ((fn in_max [s]\n    (cond\n      (nil? s) 0\n      (> (first s) (in_max (next s))) (first s)\n      :else (in_max (next s)))) arg))", "problem": 38, "user": "4e444c11535dc968683fc4a9"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) 0 args))", "problem": 38, "user": "4e46e4d0535dc968683fc4b8"}, {"code": "(fn my-max [& xs] \n  (loop [maxvalue (first xs) lst (rest xs)]\n    (if (empty? lst)\n        maxvalue\n        (recur (if (> maxvalue (first lst))\n                    maxvalue\n                    (first lst))\n                (rest lst)))))", "problem": 38, "user": "4e4870d1535dc968683fc4bc"}, {"code": "(fn aa [& s]\n  (loop [m 0 s s]\n    (if (empty? s)\n      m \n      (if (> (first s) m) \n        (recur (first s) (rest s))\n        (recur m (rest s))))))", "problem": 38, "user": "4e410033535dc968683fc49c"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4e49badd535dc968683fc4c9"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4e43b0d9535dc968683fc4a3"}, {"code": "(fn [& args]\n  (loop [maximum (first args)\n         l (rest args)]\n    (if (seq l)\n      (if (> (first l) maximum)\n        (recur (first l) (rest l))\n        (recur maximum (rest l)))\n      maximum)))", "problem": 38, "user": "4e08fb7a535d04ed9115e7ac"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4e4a94a9535dc968683fc4cd"}, {"code": "(fn [& x]\n  (reduce \n    (fn [acc v]\n      (if (> v acc) v acc)) \n    x))", "problem": 38, "user": "4e47f4f3535dc968683fc4bb"}, {"code": "(fn mymax ([x] x ) \n          ([x y] (if (> x y) x y))\n          ([x y & more] (apply mymax (mymax x y) more))\n)", "problem": 38, "user": "4e3df106535deb9a81d77f58"}, {"code": "(fn [& seq] (reduce #(if (> % %2) % %2) seq))", "problem": 38, "user": "4e4ae5aa535dc968683fc4d2"}, {"code": "(fn [& more] \n  (loop [y more, current-max ()]\n  (cond (= y ()) current-max\n        ;(= current-max ()) (recur y (first y\n        (or (= current-max ()) (> (first y) current-max)) (recur (rest y) (first y))\n        :else (recur (rest y) current-max))))", "problem": 38, "user": "4e49a7bb535dc968683fc4c6"}, {"code": "(fn [& list]\n  (loop [mx (first list), \n         l (rest list)]\n    (cond \n      (empty? l) mx\n      (> mx (first l)) (recur mx (rest l))\n      :else (recur (first l) (rest l)))))", "problem": 38, "user": "4e4c1e8c535dc968683fc4db"}, {"code": "(fn my-max [f & nums]\n  (if (empty? nums)\n      f\n      (let [next-max (apply my-max nums)]\n        (if (> f next-max)\n            f\n            next-max))))", "problem": 38, "user": "4e4b4564535dc968683fc4d3"}, {"code": "(fn [& rest] \n  (reduce #(if (> % %2) % %2) rest))", "problem": 38, "user": "4e4c238f535dc968683fc4dc"}, {"code": "(fn [a b & c]\n  (loop [top 0\n         left (list a b)]\n    (if (empty? left) top\n      (if (> (first left) top)\n        (recur (first left) (rest left))\n      (recur top (rest left))))))", "problem": 38, "user": "4e4bf20e535dc968683fc4d9"}, {"code": "(fn [& x] (first (reverse (sort x))))", "problem": 38, "user": "4e4bd94b535dc968683fc4d7"}, {"code": "(fn [f & r] (last (sort (cons f r))))", "problem": 38, "user": "4e4ad154535dc968683fc4d1"}, {"code": "(fn hop [& xs]\n  (loop [mx (first xs) xs (rest xs)]\n      (if (empty? xs)\n          mx\n          (recur (if (> mx (first xs)) mx (first xs)) (rest xs)))))", "problem": 38, "user": "4e4fbd0c535dc968683fc4e9"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4e50b67b535dc968683fc4ed"}, {"code": "(fn maks \n  ([a b] (if (> a b) a b))\n  ([a b & more] (reduce maks (maks a b) more)))", "problem": 38, "user": "4e513ecf535dc968683fc4f6"}, {"code": "(comp last sort list)", "problem": 38, "user": "4e5229dc535d302ef430da6f"}, {"code": "(fn[& q] (reduce #(if (> % %2) % %2) q))", "problem": 38, "user": "4e12cc9d535d04ed9115e7d2"}, {"code": "(fn [x & r] (reduce #(if (< %1 %2) %2 %1) x r))", "problem": 38, "user": "4e3a9dae535deb9a81d77f4a"}, {"code": "(fn tmax\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n   (reduce tmax (tmax x y) more)))", "problem": 38, "user": "4e521d7a535d302ef430da6e"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4e52d815535d302ef430da77"}, {"code": "(fn [& m] (reduce #(if (> % %2) % %2) m))", "problem": 38, "user": "4e50e2a0535dc968683fc4ef"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4e513758535dc968683fc4f3"}, {"code": "(fn [& lis]\n  (loop [lis lis maxi 0]\n    (if-let [n (first lis)]\n      (recur (next lis) (if (> n maxi) n maxi))\n      maxi)))", "problem": 38, "user": "4e498df9535dc968683fc4c4"}, {"code": "(fn [ & numbers] (reduce #(if (> %1 %2) %1 %2) numbers))", "problem": 38, "user": "4dbf0cd2535d020aff1edf72"}, {"code": "(fn [& seq] (- (apply min (map - seq))))", "problem": 38, "user": "4e5411e8535d8a8b8723a279"}, {"code": "(comp last sort list)", "problem": 38, "user": "4e399685535deb9a81d77f40"}, {"code": "(fn [& s]\n  (last (sort s)))", "problem": 38, "user": "4e50c894535dc968683fc4ee"}, {"code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "problem": 38, "user": "4e5676b2535d8a8b8723a282"}, {"code": "(fn [& coll] (reduce #(if (>= %1 %2) %1 %2) coll))", "problem": 38, "user": "4e521cef535d302ef430da6d"}, {"code": "(fn [& x] (reduce (fn [x y] (if (> x y) x y)) x))", "problem": 38, "user": "4e584cf2535d8a8b8723a28f"}, {"code": "(fn[& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4e58bcd4535d8a8b8723a296"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4e58dd23535d8a8b8723a298"}, {"code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) coll))", "problem": 38, "user": "4e5914e0535d8a8b8723a29b"}, {"code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) s))", "problem": 38, "user": "4e584256535d8a8b8723a28e"}, {"code": "(fn [& xs] (loop [cur-max (Integer/MIN_VALUE) ys xs]\n  (if (empty? ys)\n    cur-max\n    (if (> (first ys) cur-max)\n      (recur (first ys) (rest ys))\n      (recur cur-max (rest ys))))))", "problem": 38, "user": "4ddabc33535d02782fcbe9f5"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4e593dac535d8a8b8723a29c"}, {"code": "(fn mymax [& args]\n        (reduce (fn [x y]\n                    (if (> x y) x y)) args))", "problem": 38, "user": "4e463703535dc968683fc4b2"}, {"code": "(fn [& p] (Math/abs ( apply min (map (fn [x] (* -1 x)) p))))", "problem": 38, "user": "4e5867d1535d8a8b8723a291"}, {"code": "#(reduce (fn [x y] (if (< x y) y x)) % %&)", "problem": 38, "user": "4e588e84535d8a8b8723a294"}, {"code": "(fn [& s] (first (reverse(sort s))))", "problem": 38, "user": "4e599577535d8a8b8723a29f"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) \n  x xs))", "problem": 38, "user": "4e570f47535d8a8b8723a287"}, {"code": "(fn [& c] (-> c sort reverse first))", "problem": 38, "user": "4e597b2c535d8a8b8723a29d"}, {"code": "(fn [& nums] (last (sort nums)))", "problem": 38, "user": "4e5b192e535d8a8b8723a2b3"}, {"code": "(fn [& args] (reduce #(if (> % %2) % %2) args))", "problem": 38, "user": "4e589bdc535d8a8b8723a295"}, {"code": "(fn [& xs] \n  (reduce (fn [a b] \n      (if (> a b) a b)) xs))", "problem": 38, "user": "4db88b37535d1e037afb2199"}, {"code": "(fn [& lst]\n      (loop [n 0 l lst]\n            (if (empty? l)\n                n\n          (recur (if (> n (first l))\n                     n\n                   (first l))\n                 (rest l)))))", "problem": 38, "user": "4e43c91f535dc968683fc4a5"}, {"code": "(fn my-max\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] (apply my-max (my-max x y) more)))", "problem": 38, "user": "4e5bff2b535d8a8b8723a2bd"}, {"code": "(fn my-max [& s]\n  (loop [s s m 0]\n    (if (empty? s)\n      m\n      (recur\n        (rest s)\n        (if (> (first s) m) (first s) m)))))", "problem": 38, "user": "4e360072535deb9a81d77f30"}, {"code": "(fn [& more] \n  (reduce #(if (< %1 %2) %2 %1 ) more))", "problem": 38, "user": "4e5c801e535d8a8b8723a2c1"}, {"code": "(fn mymax\n  [& vals]\n  (reduce #(if (> %1 %2) %1 %2) vals))", "problem": 38, "user": "4e4e5b91535dc968683fc4e5"}, {"code": "(fn [& vals] (reduce #(if (> %1 %2) %1 %2) vals))", "problem": 38, "user": "4dada6d4c9a9d6ed2c99dc57"}, {"code": "(fn [& n ] (first (reverse (sort n))))", "problem": 38, "user": "4e5d2dc5535d8a8b8723a2ca"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4e4482b3535dc968683fc4ab"}, {"code": "(fn [& xs](reduce #(if (> % %2) % %2) xs))", "problem": 38, "user": "4dad938fc9a9d6ed1b99dc57"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4e5cddd6535d8a8b8723a2c5"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4e1c2e16535d04ed9115e804"}, {"code": "(fn my-max\n  ([x]\n    x)\n  ([x y] \n    (if (> x y)\n      x\n      y))\n  ([x y & more]\n    (reduce my-max (my-max x y) more)))", "problem": 38, "user": "4e5a2403535d8a8b8723a2a7"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4e5f08c7535d8a8b8723a2da"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4e5a3891535d8a8b8723a2aa"}, {"code": "(fn mymax ([x] x)\r\n  ([x y] (if (> x y) x y))\r\n  ([x y & more]\r\n   (reduce mymax (mymax x y) more)))", "problem": 38, "user": "4e4b911f535dc968683fc4d6"}, {"code": "(fn [& l] ((fn hi [h r] (if (> (first r) h)\n              (if (> (count r) 1) (hi (first r) (rest r)) (first r))\n              (if (> (count r) 1) (hi h (rest r)) h)\n                )) (first l) (rest l)))", "problem": 38, "user": "4e5e9f6b535d8a8b8723a2d2"}, {"code": "(fn mymax [x y & xs]\n  (if-not (seq xs)\n    (if (< x y) y x)\n    (reduce mymax (mymax x y) xs)))", "problem": 38, "user": "4dcc3281535d5973398f9291"}, {"code": "(fn [& s]\n  (reduce (fn [x y] (if (> x y) x y)) s))", "problem": 38, "user": "4e55ea0c535d8a8b8723a281"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4e580746535d8a8b8723a28c"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4e615cd2535d8ccf87e9fe58"}, {"code": "(fn [& nums]\n  (reduce #(if (> %1 %2)\n             %1\n             %2) nums))", "problem": 38, "user": "4e3bccb1535deb9a81d77f55"}, {"code": "(fn [& rest]\n  \"38. Write a function which takes a variable number of parameters and returns the maximum value.\"\n  (last (apply sort (list rest))))", "problem": 38, "user": "4e5eb843535d8a8b8723a2d4"}, {"code": ";(fn [& x]\n;  (loop [sq x\n;         m (first x)]\n;    (if (empty? sq)\n;      m\n;      (if (> m (first sq))\n;        (recur (next sq) m)\n;        (recur (next sq) (first sq))))))\n\n\n(fn [& x]\n  (reduce #(if (< %1 %2) %2 %1) x))", "problem": 38, "user": "4e52777f535d302ef430da76"}, {"code": "(fn temp\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n   (reduce temp (temp x y) more)))", "problem": 38, "user": "4e44358f535dc968683fc4a8"}, {"code": "(fn [& x]\n  (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "4e5fda32535d8ccf87e9fe4e"}, {"code": "(fn [& s] \n  (peek (reduce #(if (> %2 (peek %1)) (conj %1 %2) %1) [(first s)] (rest s))))", "problem": 38, "user": "4e5ecd65535d8a8b8723a2d6"}, {"code": "(fn *max                                                                                                                                                    \n  [& args]                                                                                                                                                    \n  (loop [res args max-val 0]                                                                                                                                  \n    (if (empty? res)                                                                                                                                          \n      max-val                                                                                                                                                 \n      (if (< max-val (first res))                                                                                                                             \n        (recur (rest res) (first res))                                                                                                                        \n        (recur (rest res) max-val)))))", "problem": 38, "user": "4e3bcccd535deb9a81d77f56"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "4e634eb9535d8ccf87e9fe63"}, {"code": "(fn [& args] (loop [maks 0 coll args]\n                        (if (empty? coll)\n                          maks\n                          (recur (if (> (first coll) maks)\n                                   (first coll)\n                                   maks)\n                                 (rest coll)))))", "problem": 38, "user": "4e3bcca9535deb9a81d77f54"}, {"code": "(fn\n  [x & ys]\n  (reduce #(if (> % %2) % %2) x ys))", "problem": 38, "user": "4e6472b7535d8ccf87e9fe6c"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4e657c05535d8ccf87e9fe72"}, {"code": "(fn mymaxfunction [& seq]\n   (loop [_seq (rest seq), value (first seq), maxvalue 0]\n      (if (empty? _seq)\n        maxvalue\n        (if (> value maxvalue)\n          (recur (rest _seq) (first _seq) value)\n          (recur (rest _seq) (first _seq) maxvalue)\n        )  \n      )\n   )\n)", "problem": 38, "user": "4e653558535d8ccf87e9fe6f"}, {"code": "(fn [& t] (reduce #(if (> %1 %2) %1 %2) t))", "problem": 38, "user": "4e5bdc2b535d8a8b8723a2bb"}, {"code": "(fn my-max [& nums]\n  (cond (empty? (rest nums)) (first nums)\n        (> (first nums) (second nums)) (apply my-max\n                                        (cons (first nums)\n                                    (rest (rest nums))))\n        true (apply my-max (rest nums))))", "problem": 38, "user": "4e68dbd5535d8ccf87e9fe8f"}, {"code": "(fn [& s] (loop [cmax  (first s)\n               the-s (rest  s)]\n          (if (empty? the-s)\n            cmax\n            (let [[h & t] the-s]\n            (recur (if (> h cmax) h cmax) t)))))", "problem": 38, "user": "4e68b46c535d8ccf87e9fe87"}, {"code": "(fn [& coll]\n  (reduce (fn [result x] (if (> x result) x result)) coll))", "problem": 38, "user": "4e68c434535d8ccf87e9fe89"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4e5fe31a535d8ccf87e9fe50"}, {"code": "(fn [& x] (reduce (fn [a b] (if (> a b) a b)) x))", "problem": 38, "user": "4e6a5168535d8ccf87e9fec6"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4e6a412e535d8ccf87e9feb6"}, {"code": "(fn [& v] (last (sort v)))", "problem": 38, "user": "4e6a4038535d8ccf87e9feb5"}, {"code": "(fn mymax\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] (reduce mymax (mymax x y) more)))", "problem": 38, "user": "4e6a2503535d8ccf87e9fea2"}, {"code": "(fn [& a] (reduce #(if (> %2 %) %2 %) a))", "problem": 38, "user": "4e6a48d5535d8ccf87e9febd"}, {"code": "(fn mymax \n  ([x] x)\n  ([x y] (if (> y x) y x))\n  ([x y & more] (reduce mymax (mymax x y) more)))", "problem": 38, "user": "4e6a60cd535d8ccf87e9fed7"}, {"code": "(fn [& xs]\n  (reduce (fn [cur-max x] (if (> x cur-max) x cur-max)) xs))", "problem": 38, "user": "4e6ab9cb535d8ccf87e9fefe"}, {"code": "(fn [& a] (reduce #(if (> % %2) % %2) a))", "problem": 38, "user": "4e6b3fc8535d8ccf87e9ff0f"}, {"code": "(fn [& args] (reduce #(if (>= %1 %2) %1 %2) args))", "problem": 38, "user": "4e6a4954535d8ccf87e9fec0"}, {"code": "(fn [& a] (last (sort a)))", "problem": 38, "user": "4e6a4ab9535d8ccf87e9fec2"}, {"code": "#(reduce\r\n  (fn [m, n]\r\n    (if (> m n)\r\n      m\r\n      n))\r\n  %&)", "problem": 38, "user": "4e65f9d4535d8ccf87e9fe73"}, {"code": "(fn [& more] (last (apply sorted-set more)))", "problem": 38, "user": "4e6a97a9535d8ccf87e9fef8"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4df0524e535d08e6dec9fe17"}, {"code": "(fn [n & args]\n  (loop [s args x n]\n    (let [r (rest s) f (first s)]\n    (cond\n      (empty? s) x\n(> f x) (recur r f)\n:else (recur r x)))))", "problem": 38, "user": "4e6cf61a535de274dd8d818c"}, {"code": "(fn [& c]\n  (reduce \n    #(if (> %2 %1) %2 %1)\n    (first c) \n    c))", "problem": 38, "user": "4db2eac3535df7e46ed9b6c8"}, {"code": "(fn [& coll]\n  (reduce #(if (> %1 %2) %1 %2) 0 coll))", "problem": 38, "user": "4e31a101535deb9a81d77f1d"}, {"code": "(fn [ & a-seq] (reduce \n  (fn [a-max b](if (> a-max b) a-max b)) a-seq))", "problem": 38, "user": "4e6dc95a535d5021c1a895f1"}, {"code": "(fn [x & args]\n  (if (empty? args)\n   x\n  (if (> x (first args))\n   (recur x (rest args))\n   (recur (first args) (rest args)))))", "problem": 38, "user": "4e6dc5f5535d5021c1a895f0"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "4e6def42535d5021c1a895f7"}, {"code": "(fn[& n] (reduce (fn [x y] (if (> x y) x y)) (seq n)))", "problem": 38, "user": "4e6e3aac535d5021c1a89603"}, {"code": "#(->> %& sort last)", "problem": 38, "user": "4e6dd51b535d5021c1a895f6"}, {"code": "(fn [& xs]\n (letfn [(mx [l m]\n          (if-let [nxt (first l)]\n            (if (> nxt m)\n              (mx (rest l) nxt)\n              (mx (rest l) m))\n            m))]\n  (mx xs (first xs))))", "problem": 38, "user": "4e667f67535d8ccf87e9fe77"}, {"code": "(fn [& xs] (reduce (fn [a b] (if (> a b) a b)) xs))", "problem": 38, "user": "4e6a2f51535d8ccf87e9fea9"}, {"code": "(fn [& nums] (last (sort nums)))", "problem": 38, "user": "4e6e6630535d5021c1a89609"}, {"code": "(fn [x & xs]\r\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4e2f377a535deb9a81d77f10"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4e6a6b83535d8ccf87e9fee0"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4e6ebd4a535d5021c1a89610"}, {"code": "(fn [& m] (reduce #(if (< %1 %2) %2 %1) m))", "problem": 38, "user": "4e6a5f5c535d8ccf87e9fed6"}, {"code": "(fn [& l] (reduce #(if (> % %2) % %2) l))", "problem": 38, "user": "4e6dd0f5535d5021c1a895f3"}, {"code": "(fn [x & args] (reduce (fn [a,b] (if (> a b) a b)) x args))", "problem": 38, "user": "4e6e10d8535d5021c1a895fd"}, {"code": "(fn [x & xs]\n      (loop [m x xs xs]\n\t       (if-let [n (first xs)]\n\t\t   (recur (if (< m n) n m) (rest xs))\n\t\t   m)))", "problem": 38, "user": "4e6e3a1e535d5021c1a89602"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "4e1248b1535d04ed9115e7cf"}, {"code": "(fn ma ([y & x] (if (> y (ma (seq x))) y (ma (seq x)))) \n        ([x]  (cond   \n               (= (count x) 1) (first x)\n               (> (first x) (ma (rest x)))(first x)\n               :else (ma (rest x) )\n                )))", "problem": 38, "user": "4e6cf521535de274dd8d818b"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4e223bd6535d04ed9115e81c"}, {"code": "(fn mymax\n   ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n   (reduce mymax (mymax x y) more)))", "problem": 38, "user": "4e6a79ca535d8ccf87e9feeb"}, {"code": "(fn [& rest] (peek (vec (sort rest))))", "problem": 38, "user": "4e3a2761535deb9a81d77f48"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4e704293535d5021c1a89634"}, {"code": "(fn [& args]\n  ((fn maxof [coll result]\n    (if-let [[f & r] (seq coll)]\n      (if (or (nil? result) (> f result))\n        (maxof r f)\n        (maxof r result))\n      result)) args nil))", "problem": 38, "user": "4e6a4950535d8ccf87e9febf"}, {"code": "#(-> %& sort last)", "problem": 38, "user": "4e7115b3535d5021c1a89647"}, {"code": "(fn mymax [& thelist] (reduce (fn mycomp [a b] (if (< a b) b a)) thelist))", "problem": 38, "user": "4e70ed07535d5021c1a89643"}, {"code": "(fn [& a]\n  (reduce \n    (fn [x y] \n      (if (< x y)\n        y\n        x))\n    a))", "problem": 38, "user": "4e6a3985535d8ccf87e9feb1"}, {"code": "(fn [& nums] (reduce #(if (> %1 %2) %1 %2) nums))", "problem": 38, "user": "4e705861535d5021c1a89635"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4e68be01535d8ccf87e9fe88"}, {"code": "(fn [& values]\n  (loop [m 0, remaining values]\n    (cond\n      (empty? remaining) m\n      (> (first remaining) m) (recur (first remaining) (rest remaining))\n      :else (recur m (rest remaining)))))", "problem": 38, "user": "4e6a2f93535d8ccf87e9feaa"}, {"code": "(fn fbmax\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] (reduce fbmax (fbmax x y) more)))", "problem": 38, "user": "4e70c0b1535d5021c1a89640"}, {"code": "(fn ([x] x) \n    ([x y] (if (> x y) x y)) \n    ([x y & ys] (reduce #(if (> %1 %2) %1 %2) (if (> x y) x y) ys)))", "problem": 38, "user": "4e6a7fa0535d8ccf87e9feed"}, {"code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) s))", "problem": 38, "user": "4e6a11ee535d8ccf87e9fe9f"}, {"code": "(comp\n  \t#(loop [m 0, s %]\n\t\t\t(if (empty? s)\n\t\t\t\tm\n\t\t\t\t(if (< m (first s))\n\t\t\t\t\t(recur (first s) (rest s))\n\t\t\t\t\t(recur m (rest s))\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t\tlist\n)", "problem": 38, "user": "4e6df3c9535d5021c1a895fa"}, {"code": "(fn [x & xs]\n  (if (empty? xs)\n      x\n      (recur (if (> x (first xs))\n                 x\n                 (first xs))\n             (next xs))))", "problem": 38, "user": "4e5d0e96535d8a8b8723a2c8"}, {"code": "(fn [& x ]\n (reduce (fn [a b] (if (< a b) b a)) x)\n)", "problem": 38, "user": "4e70ef6f535d5021c1a89644"}, {"code": "(fn [x & xs]\n  (reduce #(if (> %1 %2) %1 %2) x xs))", "problem": 38, "user": "4e6defcc535d5021c1a895f8"}, {"code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) more))", "problem": 38, "user": "4daedd1eedd6309eace4d164"}, {"code": "(fn max1\n  [& more] (reduce #(if (> %1 %2) %1 %2) (first more) more))", "problem": 38, "user": "4e68323a535d8ccf87e9fe86"}, {"code": "(fn [& n] (first (sort > n)))", "problem": 38, "user": "4e6fa38b535d5021c1a89622"}, {"code": "(fn [& c] (reduce (fn [x y] (if (> x y) x y)) c))", "problem": 38, "user": "4e6e97ca535d5021c1a8960c"}, {"code": "(comp last sorted-set)", "problem": 38, "user": "4e6f4cbc535d5021c1a8961a"}, {"code": "(comp last sort list)", "problem": 38, "user": "4e71da4d535d5021c1a89653"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4e72ac47535d5021c1a89666"}, {"code": "(fn [& s]\n  (loop [[x & xs] s maxim x]\n    (if (empty? xs) maxim\n      (recur xs (if (> x maxim) x maxim)))))", "problem": 38, "user": "4daf907aedd6309eace4d17b"}, {"code": "(fn [x & xs]\n  (reduce \n    #(if (> %1 %2)\n      %1\n      %2) x xs))", "problem": 38, "user": "4e726914535d5021c1a89661"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4e6eff83535d5021c1a89615"}, {"code": "(fn [& coll] \n  (reduce (fn [x y] (if (> x y) x y)) coll))", "problem": 38, "user": "4e6a4edd535d8ccf87e9fec4"}, {"code": "(fn [ & xs]\n  (reduce #(if (> %2 %1) %2 %1) (first xs) (rest xs)))", "problem": 38, "user": "4e6f1b7a535d5021c1a89618"}, {"code": "(fn [& seq] (first (reverse (sort seq))))", "problem": 38, "user": "4e6dfe57535d5021c1a895fc"}, {"code": "(fn [& l] (reduce #(if (< %1 %2) %2 %1) l))", "problem": 38, "user": "4e720985535d5021c1a89655"}, {"code": "(fn [& vals] (reduce #(if (> %1 %2) %1 %2) vals))", "problem": 38, "user": "4e71920f535d5021c1a8964e"}, {"code": "(fn mx [x & xs]\n                  (if (nil? xs)\n                    x\n                    (let [y (apply mx xs)]\n                      (condp > x\n                        y y\n                        x))))", "problem": 38, "user": "4e71705e535d5021c1a89649"}, {"code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "problem": 38, "user": "4e756736535d7a570dd295c2"}, {"code": "#(last(sort %&))", "problem": 38, "user": "4e44510b535dc968683fc4aa"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4e36038f535deb9a81d77f31"}, {"code": "(fn [c & r]\n  (reduce #(if (> %1 %2) %1 %2) c r)\n)", "problem": 38, "user": "4e6f8d36535d5021c1a89621"}, {"code": "(fn [& vs] (reduce #(if (> %1 %2) %1 %2) vs))", "problem": 38, "user": "4e6e7018535d5021c1a8960b"}, {"code": "(fn max*\n  ([] nil)\n  ([x & xs] (reduce (fn [acc x] (if (< acc x) x acc)) x xs)))", "problem": 38, "user": "4e691c79535d8ccf87e9fe97"}, {"code": "(fn [& args] (last (sort (seq args))))", "problem": 38, "user": "4e739e13535dff18050a9c76"}, {"code": "(fn x [& a] (last (sort a)))", "problem": 38, "user": "4e6a4641535d8ccf87e9feb9"}, {"code": "(fn [f & n]\n  (loop [coll n m f]\n    (println coll)(println m)\n    (if (empty? coll) \n      m\n      (recur (rest coll) (if (> m (first coll)) m (first coll)))\n      )\n  )\n)", "problem": 38, "user": "4db7da66535d1e037afb2187"}, {"code": "(fn [& a] (last (sort a)))", "problem": 38, "user": "4e6b07dd535d8ccf87e9ff0a"}, {"code": "(fn [& input] (reduce (fn [x,y] (if (> x y) x y)) input))", "problem": 38, "user": "4e5d1912535d8a8b8723a2c9"}, {"code": "(fn [& nums]\n   (loop [res nil cands nums]\n\t    (if (empty? cands)\n\t\tres\n\t\t(recur (if (nil? res)\n\t\t\t   (first cands)\n\t\t\t   (if (> (first cands) res)\n\t\t\t       (first cands)\n\t\t\t       res))\n\t\t       (rest cands)))))", "problem": 38, "user": "4e68fad4535d8ccf87e9fe93"}, {"code": "(fn [x & more] (last (sort (conj more x))))", "problem": 38, "user": "4e765170535d324fb2983d69"}, {"code": "(fn [& more]\n  (letfn [(mm [x y]\n              (if (> x y) x y))]\n   (reduce mm more)))", "problem": 38, "user": "4e6a73d0535d8ccf87e9fee7"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4e40529b535dc968683fc49a"}, {"code": "(fn [& args]\n  (reduce (fn [a b] (if (> b a) b a)) args))", "problem": 38, "user": "4e773be8535d324fb2983d6e"}, {"code": "(fn [& p]\n  (reduce #(if (> % %2) % %2) p))", "problem": 38, "user": "4e6acc33535d8ccf87e9ff05"}, {"code": "(fn [& col] (loop [c col, result 0] (if (nil? (first c)) result (recur (rest c) (if (< result (first c)) (first c) result)))))", "problem": 38, "user": "4e794004535db169f9c796a1"}, {"code": "(fn get-max \n  ([x] (x))\n  ([x y] (if (> x y) x y))\n  ([x y & more] (reduce get-max (get-max x y) more)))", "problem": 38, "user": "4e781a2e535d324fb2983d74"}, {"code": "(fn [& li] (last (sort li)))", "problem": 38, "user": "4e78dc98535db95036265724"}, {"code": "(fn [& xs]\n  (reduce (fn [x y] (if (> x y) x y)) 0 xs))", "problem": 38, "user": "4e6a2e83535d8ccf87e9fea7"}, {"code": "(fn [& s] (- (reduce min (map - s))))", "problem": 38, "user": "4e707db6535d5021c1a8963a"}, {"code": "#(-> %& sort last)", "problem": 38, "user": "4e76ba46535d324fb2983d6d"}, {"code": "#(reduce (fn [x y] (if (> x y) x y)) (first %&) (rest %&))", "problem": 38, "user": "4e79a143535db169f9c796a2"}, {"code": "(fn my-max [ff & more]\n  (letfn [(calc-max [m x] \n            (cond (empty? x) m\n                  (> (first x) m) (calc-max (first x) \n                                            (rest x))\n                  :else (calc-max m (rest x))))]\n    (calc-max ff more)))", "problem": 38, "user": "4e75d6b6535d7a570dd295c6"}, {"code": "(fn iter\n   [first & args]\n   (reduce (fn [x y] (if (> x y) x y)) first args))", "problem": 38, "user": "4e7a5395535db169f9c796ab"}, {"code": "(fn m ([x] x)\n     ([x y] (if (> x y) x y))\n     ([x y & more] (reduce m (m x y) more)))", "problem": 38, "user": "4e1fe800535d04ed9115e811"}, {"code": "(fn [ & xs] (last (sort xs)) )", "problem": 38, "user": "4e6ed7e4535d5021c1a89613"}, {"code": "(fn mymax\n  [x & more]\n  (if (seq more)\n    (recur (if (> x (first more)) x (first more)) (rest more))\n    x))", "problem": 38, "user": "4e5a460f535d8a8b8723a2ab"}, {"code": "(fn[& more]\n  (reduce (fn[a b]\n    (if (> a b) a b))\n    -1000000000 more))", "problem": 38, "user": "4e7bc07c535db169f9c796b9"}, {"code": "(fn [& args]\n  (reduce (fn [a b] (if (< a b) b a)) args))", "problem": 38, "user": "4e6a0667535d8ccf87e9fe9e"}, {"code": "(fn  [& l] \n    \n    (reduce #(if (> %1 %2)\n               %1\n               %2)\n             (first l) (rest l))\n              \n              )", "problem": 38, "user": "4e78c208535db95036265722"}, {"code": "(fn [& elts]\n  (loop [current-max (first elts) rst (rest elts)]\n    (if (empty? rst)\n        current-max\n        (recur (if (> (first rst) current-max)\n                   (first rst)\n                   current-max)\n               (rest rst)))))", "problem": 38, "user": "4e7c8fd1535db169f9c796be"}, {"code": "(fn maximize\n  ([x] x)\n  ( [x y] (if (> x y) x y))\n  ( [x y & more] (reduce maximize (maximize x y) more)))", "problem": 38, "user": "4e7ada51535db169f9c796ae"}, {"code": "(fn [& args]\n  (last (sort args)))", "problem": 38, "user": "4e7c4290535db169f9c796bc"}, {"code": "(fn [& v] (reduce #(if (> % %2) % %2) 0 v))", "problem": 38, "user": "4e7db3b4535db169f9c796e1"}, {"code": "(fn [& s] (last (sort s)))", "problem": 38, "user": "4e7dd982535db169f9c796ee"}, {"code": "(fn [& a] (reduce #(if (< %1 %2) %2 %1) a))", "problem": 38, "user": "4e7dfab0535db169f9c796f9"}, {"code": "(fn [& col]\n  (reduce (fn [x y]\n            (if (> x y)\n              x\n              y)) col))", "problem": 38, "user": "4e7d4544535db169f9c796d0"}, {"code": "(fn [& xs]\n  (letfn [(mx [x y] (if (>= x y) x y))]\n    (reduce mx xs)))", "problem": 38, "user": "4e7e032b535db169f9c796fc"}, {"code": "(fn [& L] (reduce (fn [a b] (if (> a b) a b)) L))", "problem": 38, "user": "4e7e55ab535db169f9c79711"}, {"code": "(fn m\n  ([x y] (if (> x y) x y))\n  ([x y & more] (reduce #(m % %2) (m x y) more)))", "problem": 38, "user": "4e6b04ae535d8ccf87e9ff09"}, {"code": "#({1 8 30 30 45 67}(first%&))", "problem": 38, "user": "4e7eff9e535db966e863cc38"}, {"code": "(fn my-max [& l]\n  (reduce #(if (> %1 %2) %1 %2) l))", "problem": 38, "user": "4e6093c9535d8ccf87e9fe54"}, {"code": "(fn [x & p] (reduce (fn [m e] (if (> e m) e m)) x p))", "problem": 38, "user": "4e7e93f5535db169f9c7971a"}, {"code": "(fn my-max [& col]\n    (reduce (fn [f s]\n        (if (> f s) f s)) col))", "problem": 38, "user": "4e7e33a3535db169f9c79708"}, {"code": "(fn [& l] (reduce #(if (> %2 %) %2 %) l))", "problem": 38, "user": "4e7f4147535db966e863cc3d"}, {"code": "(fn my-max [& rest]\n  (reduce (fn [a b] (if (> a b) a b)) (seq rest)))", "problem": 38, "user": "4e7f51eb535db966e863cc3f"}, {"code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) 0 coll))", "problem": 38, "user": "4e7f7e48535db966e863cc42"}, {"code": "(fn [& args]\n          (reduce #(if (> % %2) % %2) 0 args))", "problem": 38, "user": "4e6ea1f5535d5021c1a8960e"}, {"code": "(fn [& args]\n  (last (sort args)))", "problem": 38, "user": "4e726575535d5021c1a89660"}, {"code": "(fn [& args]\n  (reduce #(if (< %1 %2) %2 %1) 0 args)\n)", "problem": 38, "user": "4e7e05a6535db169f9c796fe"}, {"code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "problem": 38, "user": "4db858d1535d1e037afb218c"}, {"code": "(fn [& x] \n        (loop [lst x\n              result 0]\n              (if (> (count lst) 0)\n                (if (> (first lst) result)\n                  (recur (rest lst) (first lst))\n                  (recur (rest lst) result))\n              result)))", "problem": 38, "user": "4e7e241a535db169f9c79705"}, {"code": "(fn [ & args] (reduce #(if (> %2 %1) %2 %1) (first args) (next args)))", "problem": 38, "user": "4e79ff2a535db169f9c796a9"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4e80aa10535db62dc21a62b1"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "4e80d71b535db62dc21a62b7"}, {"code": "(fn maxy \n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n     (reduce maxy (conj (conj more x) y))))", "problem": 38, "user": "4e7dcdb5535db169f9c796e9"}, {"code": "(fn [& s]\n  (loop [r s m 0]\n    (if (empty? r)\n      m\n      (recur (rest r)\n        (if (> m (first r))\nm\n(first r))))))", "problem": 38, "user": "4e7e6b51535db169f9c79712"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4e7e4d5c535db169f9c7970f"}, {"code": "#(reduce (fn [x y] (if (> x y) x y)) (first %&) (rest %&))", "problem": 38, "user": "4db1f7d223724b71670a9c07"}, {"code": "(fn [& args]\n  (reduce \n    (fn [x y] \n      (if (> x y) x y))\n    args))", "problem": 38, "user": "4dcc024e535d5973398f928f"}, {"code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) more))", "problem": 38, "user": "4e7f3891535db966e863cc3b"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "4e823f41535db62dc21a62c8"}, {"code": "(fn mymax [& x]\n       (cond \t\t   \n\t       (= (count x) 0) 0\n\t       (= (count x) 1) (first x)\n\t       (> (count x) 1) \n                   (let [a (first x) b (apply mymax (rest x)) ]\n\t\t\t(cond (> a b) a\n\t\t\t      true    b\n                        )\n                   )\n                   )\n             )", "problem": 38, "user": "4e6cf2be535de274dd8d818a"}, {"code": "(fn [x y & z] (if (= x 30) x y))", "problem": 38, "user": "4e823ed7535db62dc21a62c7"}, {"code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "problem": 38, "user": "4db85bdd535d1e037afb218d"}, {"code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "problem": 38, "user": "4e6a3930535d8ccf87e9feb0"}, {"code": "(fn m [& args]\n  (if (= 1 (count args))\n      (first args)\n      (let [a (first args)\n            b (apply m (rest args))]\n        (if (> a b) a b))))", "problem": 38, "user": "4e8338d6535db62dc21a62d3"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "4e837808535db62dc21a62d9"}, {"code": "(fn\n  [& lst]\n    (let\n      [mymax (fn [a b] (if (> a b) a b))]\n      (reduce mymax lst)))", "problem": 38, "user": "4e6fe3a6535d5021c1a89629"}, {"code": "#(-> %& sort last)", "problem": 38, "user": "4e46e48b535dc968683fc4b7"}, {"code": "#(reduce (fn [x y] (if (> y x) y x)) %&)", "problem": 38, "user": "4e7df598535db169f9c796f6"}, {"code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) 0 args))", "problem": 38, "user": "4e82c062535db62dc21a62cc"}, {"code": "(fn [& xs] \n  (reduce #(if (> % %2) % %2) xs)\n)", "problem": 38, "user": "4e7f32ee535db966e863cc3a"}, {"code": "(fn m [& s]\n  (loop [s1 (next s) mm (first s)]\n     (if (nil? s1)\n         mm\n         (if (< mm (first s1))\n             (recur (next s1) (first s1))\n             (recur (next s1) mm)))))", "problem": 38, "user": "4e842ebb535db62dc21a62df"}, {"code": "(fn [x & y]\n  ((fn [z result]\n    (if (empty? z)\n        result\n        (recur (rest z)\n                  (if (> (first z) result)\n                      (first z)\n                      result)\n))) y x))", "problem": 38, "user": "4e73a9dc535dff18050a9c77"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4e77c1db535d324fb2983d72"}, {"code": "(fn [& coll]\r\n  \t      (loop [c coll m 0]\r\n\t   (if (empty? c)\r\n\t      m\r\n\t      (if (< m (first c))\r\n\t\t  (recur (rest c) (first c))\r\n\t\t   (recur (rest c) m)))))", "problem": 38, "user": "4e821ca5535db62dc21a62c2"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4e823629535db62dc21a62c3"}, {"code": "(fn [& v] (reduce #(if (> %1 %2) %1 %2) 0 v))", "problem": 38, "user": "4e662d58535d8ccf87e9fe75"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4e79ea52535db169f9c796a7"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4e8612f8535db62dc21a62f2"}, {"code": "(fn [& args] (reduce (fn [x a] (if (> x a) x a)) args))", "problem": 38, "user": "4e8681b7535dae1a5effa438"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4db8ec47535d1e037afb219d"}, {"code": "(fn [& a] (last (sort a)))", "problem": 38, "user": "4e860e85535db62dc21a62f1"}, {"code": "(fn [& args] (reduce #(if (> % %2) % %2) args))", "problem": 38, "user": "4e80e0f2535db62dc21a62b8"}, {"code": "(fn mx [& c] \r\n  (print c \\newline)\r\n  (if (> (count (flatten c)) 1)\r\n    (if (> (first (flatten c)) (second (flatten c)))\r\n      (mx (flatten [(first (flatten c)) (drop 3 (flatten c))]))\r\n      (mx (rest (flatten c))))\r\n    (first (flatten c))))", "problem": 38, "user": "4e86a443535dc036d0eaab83"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4e80b856535db62dc21a62b4"}, {"code": "(fn [x & xs] (cond (empty? xs) x (> x (first xs)) (recur x (rest xs)) :else (recur (first xs) (rest xs))))", "problem": 38, "user": "4e85cda3535db62dc21a62f0"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4e8510e7535db62dc21a62e7"}, {"code": "(fn [k & ls] (last (sort (conj ls k) )))", "problem": 38, "user": "4e68dfe6535d8ccf87e9fe91"}, {"code": "(fn maxx [& nums]\n  (if (empty? (rest nums))\n    (first nums)\n  (let [a (first nums), b (second nums)]\n    (if (> a b)\n      (apply maxx (cons a (rest (rest nums))))\n      (apply maxx (cons b (rest (rest nums))))))))", "problem": 38, "user": "4e84f77c535db62dc21a62e5"}, {"code": "(comp last sort list)", "problem": 38, "user": "4dfe65a1535d04ed9115e787"}, {"code": "(fn [& args]\n  (reduce #(if (>= %1 %2) %1 %2) args))", "problem": 38, "user": "4e8944b6535d4ef0aa30db98"}, {"code": "(fn [x & xs]\n  (reduce #(if (> % %2) % %2) x xs))", "problem": 38, "user": "4e894068535d4ef0aa30db97"}, {"code": "#(nth (sort > %&) 0)", "problem": 38, "user": "4e6a5a32535d8ccf87e9fed0"}, {"code": "(fn [& args] (reduce (fn [x y] (if (< x y) y x)) args))", "problem": 38, "user": "4e71a12c535d5021c1a8964f"}, {"code": "(fn [& xs] (reduce (fn [x y] (if (> x y) x y)) xs))", "problem": 38, "user": "4e89de60535d3e98b8023285"}, {"code": "(fn [& more]\n  (reduce #(if (> %1 %2) %1 %2) 0 more))", "problem": 38, "user": "4e89f46c535d3e98b8023288"}, {"code": "(fn [& coll] (loop [c coll mx -99999]\n                   (if c (recur (next c) (if (> (first c) mx) (first c)\n                                             mx))\n                       mx)))", "problem": 38, "user": "4e89e939535d3e98b8023287"}, {"code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "4e8a170c535d3e98b802328f"}, {"code": "(fn [& xs] (reduce (fn [a b] (if (> a b) a b)) xs))", "problem": 38, "user": "4daf36c2edd6309eace4d175"}, {"code": "#(last (sort < %&))", "problem": 38, "user": "4e8a460e535d65386fec2109"}, {"code": "(fn high [& s] \n(reduce \n (fn [a b] (if (> a b) a b))\n s\n))", "problem": 38, "user": "4e8a1bd8535d3e98b8023291"}, {"code": "(fn [& rest] (first (sort > rest)))", "problem": 38, "user": "4e8708e3535dceadca46984e"}, {"code": "(fn [n & ns] (last (sort (conj ns n))))", "problem": 38, "user": "4e83844a535db62dc21a62da"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "4e8a0c82535d3e98b802328d"}, {"code": "(fn maximum [x & xs]\n  (reduce #(cond (> %1 %2) %1\n            :else %2) x xs))", "problem": 38, "user": "4e8b557c535d65386fec2119"}, {"code": "(fn [x & more] (reduce (fn [x y] (if (> x y) x y)) x more))", "problem": 38, "user": "4e8aef69535d65386fec2114"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4e8c1d97535d65386fec2127"}, {"code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4e89f9e5535d3e98b8023289"}, {"code": "(fn f38\n     ([x] x)\n     ([x y] (if (> x y) x y))\n     ([x y & args]\n        (if (> x y)\n          (f38 x (apply f38 args))\n          (f38 y (apply f38 args)))))", "problem": 38, "user": "4e88feef535d8b9bb0147ca8"}, {"code": "(fn [x & etc]\n  (loop [ans x, others etc]\n    (if (nil? (seq others))\n      ans\n      (if (> ans (first others))\n        (recur ans (rest others))\n        (recur (first others) (rest others)))\n    )\n))", "problem": 38, "user": "4e89ddf9535d3e98b8023284"}, {"code": "(fn [& args] (- (apply min (map - args))))", "problem": 38, "user": "4dcfbc44535d5973398f92a7"}, {"code": "(fn find-the-max [x y & ys]\n  (if (= 0 (count ys))\n    x\n    (find-the-max (if (> x y) x y) ys)))", "problem": 38, "user": "4e8cbc9f535d65386fec212d"}, {"code": "; using built in\n; (fn mmax [& xs] (last (sort xs)))\n(fn mmax ([x] x)\n         ([x & ys] (let [y (apply mmax ys)] (if (> x y) x y)))\n)", "problem": 38, "user": "4ded582d535d08e6dec9fe0c"}, {"code": "(fn [& vals] (-> vals sort last))", "problem": 38, "user": "4e8dc25f535d65386fec213a"}, {"code": "(fn [& m](reduce (fn [x y] (if (> x y) x y)) m))", "problem": 38, "user": "4e814706535db62dc21a62bb"}, {"code": "(fn[& l] (loop [x l m 0]\n          (if (empty? x)\n              m\n              (recur (rest x)\n                    (if (> (first x) m)\n                        (first x)\n                        m)))))", "problem": 38, "user": "4e889643535d8b9bb0147ca5"}, {"code": "(fn\n [ & secuencia ]\n ( loop [ maximo 0, resto (seq secuencia) ]\n   ( if resto\n          ( if ( > maximo (first resto) )\n               ( recur   maximo ( next resto) )\n               ( recur   (first resto) ( next resto) )\n          )\n      maximo\n    )\n  )\n)", "problem": 38, "user": "4e6a5728535d8ccf87e9fecf"}, {"code": "(fn [& nums] (first (sort > nums)))", "problem": 38, "user": "4e89ff3d535d3e98b802328a"}, {"code": "(fn [& z]\n  (reduce\n    (fn [a b]\n      (if (> a b)\n        a\n        b))\n    z))", "problem": 38, "user": "4e8e8c24535d65386fec2143"}, {"code": "(fn [x & xs]\r\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4e697e41535d8ccf87e9fe9c"}, {"code": "(fn [& a]\n  (reduce #(if (> %1 %2) %1 %2) a))", "problem": 38, "user": "4e6a61d8535d8ccf87e9fed8"}, {"code": "(fn [& b](reduce #(if (> %1 %2) %1 %2) b))", "problem": 38, "user": "4e8b73e4535d65386fec2120"}, {"code": "(fn max-value\n    ([x] x)\n    ([x & more] \n      (reduce #(if (> %1 %2) %1 %2) x more)))", "problem": 38, "user": "4e7263a1535d5021c1a8965f"}, {"code": "(fn [& x] (last (apply sorted-set x)))", "problem": 38, "user": "4e8d86d5535d65386fec2136"}, {"code": "(fn [ & xs] \n  (loop [m (first xs)\n\t\tys (rest xs)]\n\t\t(if (empty? ys)\n\t\t\tm\n\t\t\t(if (< m (first ys))\n\t\t\t\t(recur (first ys) (rest ys))\n\t\t\t\t(recur m (rest ys))))))", "problem": 38, "user": "4e641bfd535d8ccf87e9fe67"}, {"code": "(fn fx ([x] x) ([x y] (if (> x y) x y)) ([x y & more] (if (> x y) (reduce fx x more) (reduce fx y more))))", "problem": 38, "user": "4e8d5911535d65386fec2133"}, {"code": "(fn [x & xs]\n  (reduce #(if (> %1 %2) %1 %2) x xs))", "problem": 38, "user": "4e84a7dd535db62dc21a62e2"}, {"code": "(fn [x & l]\n  (if-not (empty? l)\n  (let [y (first l)\n    x1 (if (> y x) y x)\n    r (rest l)]\n    (recur x1 r))\n  x))", "problem": 38, "user": "4e8fb386535d65386fec2150"}, {"code": "(fn m [& s]\r\n  (reduce\r\n    (fn [a b]\r\n      (if (> a b) a b)) s))", "problem": 38, "user": "4e8df08f535d65386fec213e"}, {"code": "(fn [& nums]\n  (reduce (fn [a b] (if (> a b) a b)) nums))", "problem": 38, "user": "4e8f5eba535d65386fec214c"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4dfd018c535d04ed9115e77f"}, {"code": "(fn [& xs] (reduce (fn [n m] (if (> n m) n m)) xs))", "problem": 38, "user": "4dc0ff08535d020aff1edf84"}, {"code": "(fn [& coll]\n  (first (reverse (sort coll))))", "problem": 38, "user": "4db016af838c48654951d9b9"}, {"code": "(fn [& x] (reduce (fn [acc v] (if (> v acc) v acc)) x))", "problem": 38, "user": "4e6f8431535d5021c1a8961e"}, {"code": "(fn [& c] (reduce #(if (> % %2) % %2) c))", "problem": 38, "user": "4e904d9c535d65386fec2152"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4e6dd214535d5021c1a895f5"}, {"code": "(fn maxx [foo & bar] ((fn maxx1 [foo] (if (== (count (filter (fn [x] (> x ( first foo) ) )  (rest foo))) 0) ( first foo) (maxx1 (rest foo) ))) (conj bar foo ) ))", "problem": 38, "user": "4e8d5edd535d65386fec2134"}, {"code": "(fn [& xs] (reduce (fn [m x] (if (> x m) x m)) xs))", "problem": 38, "user": "4e524979535d302ef430da70"}, {"code": "(fn my-max\n  ([a] a)\n  ([a b] (if (> a b) a b))\n  ([a b & more] (reduce my-max (my-max a b) more))\n)", "problem": 38, "user": "4db13ff51254ad5b4805fa68"}, {"code": "(fn [ & args] (last (sort args)))", "problem": 38, "user": "4e8f4f64535d65386fec2149"}, {"code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) coll))", "problem": 38, "user": "4e7d2448535db169f9c796c8"}, {"code": "(fn mx\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n   (reduce mx (mx x y) more)))", "problem": 38, "user": "4e8b98fc535d65386fec2124"}, {"code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) 0 a))", "problem": 38, "user": "4e7e0bdc535db169f9c796ff"}, {"code": "(fn [& numbers]\n  (last (sort numbers)))", "problem": 38, "user": "4e53d441535d8a8b8723a276"}, {"code": "(fn [& v] (reduce #(if (> % %2) % %2)  v))", "problem": 38, "user": "4e9361c9535dbda64a6f6b0f"}, {"code": "(fn [f & r]\n  (loop [first-item f rest-item r]\n    (cond (= rest-item ()) first-item\n          (> first-item (first rest-item)) (recur first-item (rest rest-item))\n          :else (recur (first rest-item) (rest rest-item)))))", "problem": 38, "user": "4e894ff0535d4ef0aa30db99"}, {"code": "(fn [ & v]\n  (println v)\n  (reduce \n     (fn [v1 v2] \n       (if (> v1 v2) v1 v2)\n     )\n     v\n  )\n)", "problem": 38, "user": "4e8b6f4d535d65386fec211e"}, {"code": "(fn [& l] (reduce #(if (> %1 %2) %1 %2) l))", "problem": 38, "user": "4e718fdc535d5021c1a8964d"}, {"code": "(fn fmax\r\n ([a b c d ] (first (sort > (list a b c d))))\r\n ([a b] (first (sort > (list a b))))\r\n ([a b c] (first (sort > (list a b c))))\r\n)", "problem": 38, "user": "4e7650c5535d324fb2983d68"}, {"code": "(fn [& rst] (reduce #(if (> %1 %2) %1 %2) rst))", "problem": 38, "user": "4e951ce5535dbda64a6f6b2e"}, {"code": "(fn [& z] (reduce (fn [x y] (if (> x y) x y)) z))", "problem": 38, "user": "4e721857535d5021c1a8965a"}, {"code": "(fn [& more]\n  (loop [i 0 maxe (nth more 0)]\n    (if (== i (count more))\n      maxe\n      (recur (inc i) (if (> (nth more i) maxe) (nth more i) maxe)))))", "problem": 38, "user": "4e955b95535dbda64a6f6b33"}, {"code": "(comp last sort vector)", "problem": 38, "user": "4e959ee3535dbda64a6f6b35"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4dbd2aa3535d020aff1edf40"}, {"code": "(fn [& r] \n    (reduce (fn [x y] (if (> x y) x y)) r))", "problem": 38, "user": "4e9660ec535dbda64a6f6b44"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4e96557d535dbda64a6f6b43"}, {"code": "(fn [& colls] (reduce #(if (> %2 %1) %2 %1) -1 colls))", "problem": 38, "user": "4e96eecf535dbda64a6f6b4b"}, {"code": "#(first (sort > %&))", "problem": 38, "user": "4e970e6a535dbda64a6f6b4e"}, {"code": "(fn [& arg]\n  (reduce \n    (fn [mx v]\n      (if (> v mx)\n        v\n        mx)) (first arg) arg))", "problem": 38, "user": "4e9528ef535dbda64a6f6b32"}, {"code": "(fn [& more] \r\n   (reduce \r\n     #(if (> % %2) % %2) \r\n     more)\r\n   )", "problem": 38, "user": "4e94a8b5535dbda64a6f6b16"}, {"code": "(fn [& xs] (reduce #(if (> %2 %1) %2 %1) xs))", "problem": 38, "user": "4e976f79535dbda64a6f6b55"}, {"code": "(fn \r\n [& L]\r\n (loop [al L cur 0]\r\n  (let  [maxi (if (nil? (first al) ) nil (first al)  )   ]\r\n   (cond\r\n    (empty? al) cur\r\n    (> maxi cur ) (recur (rest al) maxi ) \r\n    :else (recur (rest al)  cur ) ) )  ) )", "problem": 38, "user": "4e6ff01e535d5021c1a8962b"}, {"code": "(fn [& c] (reduce #(if (> %1 %2) %1 %2) c))", "problem": 38, "user": "4e9609ad535dbda64a6f6b3e"}, {"code": "(fn [& nums]\n  (letfn [\n    (larger [a b] (if (> a b) a b))\n    (largest [current rst]\n      (if (empty? rst)\n        current\n        (recur (larger current (first rst)) \n               (rest rst))))]\n    (largest 0 nums)))", "problem": 38, "user": "4e99108d535dbda64a6f6b62"}, {"code": "(comp last sort list)", "problem": 38, "user": "4e8f1ac6535d65386fec2146"}, {"code": "(fn [& coll] (- (apply min (map #(- %) coll))))", "problem": 38, "user": "4e994541535dbda64a6f6b64"}, {"code": "(fn [x & other] (\n  reduce \n  (fn [a b] (if (< a b) b a))\n  x\n  other))", "problem": 38, "user": "4e8da0bf535d65386fec2138"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4e9b22e2535dbda64a6f6b74"}, {"code": "(fn [& args] \n  (reduce #(if (> %2 %1) %2 %1) args))", "problem": 38, "user": "4e5f034b535d8a8b8723a2d9"}, {"code": "(fn [& more] (reduce #(if (> %2 %) %2 %) more))", "problem": 38, "user": "4e9b230c535dbda64a6f6b75"}, {"code": "(fn mx [x & stuff] \n  (if (= stuff nil)\n    x\n    (if (> (first stuff) x)\n      (apply mx stuff)\n      (apply mx (cons x (next stuff))))))", "problem": 38, "user": "4e98a6d0535dbda64a6f6b5e"}, {"code": "(fn ([a b] (last(sort (list a b)))) ([a b c] (last (sort (list a b c)))) ([a b c d] (last (sort (list a b c d)))))", "problem": 38, "user": "4e975bce535dbda64a6f6b53"}, {"code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4e9c66e2535dbda64a6f6b7f"}, {"code": "(fn [first & more] (reduce \n    (fn [x y] (if (> x y) x y)) first more))", "problem": 38, "user": "4e967c4a535dbda64a6f6b47"}, {"code": "(fn [& a]\n  (let [h (fn [a m]\n    (if (nil? a) m\n      (recur (next a) (if (> (first a) m) (first a) m))))]\n    (h a 0)))", "problem": 38, "user": "4e951f44535dbda64a6f6b30"}, {"code": "(fn [& s]\n  (loop [ms s ch (first s)]\n    (cond\n      (= ms '()) ch\n      (> ch (first ms)) (recur (rest ms) ch)\n      :else\n      (recur (rest ms) (first ms)))))", "problem": 38, "user": "4e9629c2535dbda64a6f6b3f"}, {"code": "( fn [& stuff] (last (sort stuff)))", "problem": 38, "user": "4e9dafe1535dbda64a6f6b89"}, {"code": "(fn newmax [ & s ] (reduce #(if (> %1 %2) %1 %2) s))", "problem": 38, "user": "4e9de526535dbda64a6f6b8e"}, {"code": "(fn [& more] (reduce (fn[a,b] (if (> a b) a b)) (vec more)))", "problem": 38, "user": "4daeabf6edd6309eace4d15c"}, {"code": "(fn [& x] (reduce #(if (> % %2) % %2) x))", "problem": 38, "user": "4e81e29b535db62dc21a62bd"}, {"code": "(comp first reverse sort vector)", "problem": 38, "user": "4e9afba6535dbda64a6f6b73"}, {"code": "(fn mymax [& more] (last (sort more)))", "problem": 38, "user": "4e9e12b2535dbda64a6f6b92"}, {"code": "(fn [& s] (reduce #(if (> % %2) % %2) s))", "problem": 38, "user": "4e9e0640535dbda64a6f6b91"}, {"code": "- (nth [24 80 190] (rand 3))", "problem": 38, "user": "4e9b2f0b535dbda64a6f6b76"}, {"code": "(fn [& vs]\n  (reduce #(if (> %1 %2) %1 %2) vs))", "problem": 38, "user": "4e98f9f7535dbda64a6f6b60"}, {"code": "(fn [& args]\n  (if (empty? args)\n    nil\n    (loop [remainder args maximum (first args)]\n      (if (empty? remainder)\n        maximum\n        (recur (rest remainder)\n               (if (> (first remainder) maximum)\n                 (first remainder)\n                 maximum))))))", "problem": 38, "user": "4e9fd521535d7eef3080729a"}, {"code": "(fn [& more] (last (sort more)))", "problem": 38, "user": "4e9e7ce3535dbda64a6f6b98"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4e9e6bd6535dbda64a6f6b96"}, {"code": "(fn [& args]\n  (reduce (fn [x y] (if (> x y) x y)) 0 args))", "problem": 38, "user": "4dd0e8f7535da60f04a96e57"}, {"code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "problem": 38, "user": "4e8516d0535db62dc21a62e8"}, {"code": "(fn mymax [& col]\n  (letfn [(max2 [cols maxval]\n            (let [current (first cols)]\n              (cond (empty? cols) maxval\n                    true (max2 (rest cols) (if (> current maxval )\n                                             current\n                                             maxval)))))]\n    (max2 col 0)))", "problem": 38, "user": "4ea01955535d7eef3080729f"}, {"code": "(fn [& values]\n  (reduce (fn [macks n]\n    (if (> n macks) n macks)) values))", "problem": 38, "user": "4e55958a535d8a8b8723a27e"}, {"code": "(fn [& xs] (reduce (fn [m x] (if (> x m) x m)) xs))", "problem": 38, "user": "4ea092f4535d7eef308072a6"}, {"code": "#(-> %& sort last)", "problem": 38, "user": "4e9a8c0e535dbda64a6f6b72"}, {"code": "(fn [& args] \n  (reduce \n    (fn [result val] \n      (if (< val result) result val)) 0 args))", "problem": 38, "user": "4e9ff8d0535d7eef3080729c"}, {"code": "(fn mx\n  [x & others]\n  (loop [first x\n         [head & tail :as others] others]\n    (if (seq others)\n      (recur (if (> first head) first head) tail)\n      first)))", "problem": 38, "user": "4dbb0f2d535d1e037afb21b1"}, {"code": "(fn [& coll] (reduce (fn [a b] (if (> a b) a b)) coll))", "problem": 38, "user": "4ea09fa4535d7eef308072aa"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4daee8e9edd6309eace4d166"}, {"code": "(fn [a & l] (reduce #(if (> %1 %2) %1 %2) a l))", "problem": 38, "user": "4e9c81e8535dbda64a6f6b80"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4ea0cfb0535d7eef308072ae"}, {"code": "(fn [f & more]\n  (loop [m f s more]\n    (cond (empty? s) m\n          (> (first s) m) (recur (first s) (rest s))\n          :else (recur m (rest s)))))", "problem": 38, "user": "4ea1bc93535d7eef308072b9"}, {"code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "problem": 38, "user": "4ea1b9e4535d7eef308072b8"}, {"code": "(fn [& xs] (last (sort xs)))", "problem": 38, "user": "4e59b02c535d8a8b8723a2a2"}, {"code": "(fn max2\n  ([a b] (if (> a b) a b))\n  ([a b & more] (apply max2 (max2 a b) more)))", "problem": 38, "user": "4ea348ad535d7eef308072c4"}, {"code": "(fn [x & more]\r\n(reduce #(if (> %1 %2) %1 %2) (conj more x)))", "problem": 38, "user": "4ea09441535d7eef308072a7"}, {"code": "(fn [& s]\n    (loop [m 0\n           s s]\n      (let [item (first s)]\n        (cond\n         (nil? item) m\n         (> item m) (recur item (rest s))\n         :else (recur m (rest s))))))", "problem": 38, "user": "4e9e4515535dbda64a6f6b95"}, {"code": "(fn [& a] (last (sort a)))", "problem": 38, "user": "4ea2ddf1535d7eef308072bf"}, {"code": "(fn [& x] (reduce (fn [a b] (if (> a b) a b)) x))", "problem": 38, "user": "4e9d6a65535dbda64a6f6b87"}, {"code": "(fn f\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & xs]\n    (if (> x y)\n     (reduce f x xs)\n     (reduce f y xs))))", "problem": 38, "user": "4ea41fc2535d7eef308072cb"}, {"code": "(fn [h & hs] (first (reverse (sort (cons h hs)))))", "problem": 38, "user": "4e86d3cf535dceadca46984c"}, {"code": "(fn [x & y]\r\n  (loop [l (conj y x) m 0]\r\n    (cond (empty? l) m\r\n          (> (first l) m) (recur (rest l) (first l))\r\n          :else (recur (rest l) m))))", "problem": 38, "user": "4e920f44535dbda64a6f6afd"}, {"code": "(fn maxi ([x y] (if (> x y) x y) )\n      ([x y & more] (apply maxi (maxi x y) more)))", "problem": 38, "user": "4e8a0741535d3e98b802328b"}, {"code": "(fn my-max [init & rest]\n  (loop [nums rest max-so-far init]\n    (if (empty? nums)\n      max-so-far\n      (let [[hd & tl] nums]\n        (recur tl (if (> hd max-so-far) hd max-so-far))))))", "problem": 38, "user": "4ea4fe1f535d7eef308072cf"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4e8ddf32535d65386fec213c"}, {"code": "(fn [& params]\n  \"Returns the maximum value of a coll\"\n  (loop [coll params, max-value (first coll)]\n    (if (empty? coll)\n      max-value\n      (recur (rest coll) (if (> max-value (first coll))\n                           max-value\n                           (first coll))))))", "problem": 38, "user": "4dc6aade535d8a4b2fd7428c"}, {"code": "(fn [& seq]\n  (loop [s (rest seq) r (first seq)]\n    (if (empty? s)\n      r\n      (recur\n        (rest s)\n        (if (> (first s) r)\n          (first s)\n          r)))))", "problem": 38, "user": "4ea67906535d7eef308072e4"}, {"code": "(fn [& ls] (reduce \n  (fn [acc e]\n    (if (> e acc) e acc)\n  )\n  ls)\n)", "problem": 38, "user": "4ea57300535d7eef308072d5"}, {"code": "(fn [& param] (reduce #(if (> %1 %2) %1 %2) param))", "problem": 38, "user": "4ea16981535d7eef308072b2"}, {"code": "(fn [& xs] (reduce #(if (< % %2) %2 %) xs))", "problem": 38, "user": "4ea5e794535d7eef308072df"}, {"code": "(fn [& input] (reduce #(if (> %1 %2) %1 %2) input))", "problem": 38, "user": "4dad76588e77d6ed63f12a44"}, {"code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) more))", "problem": 38, "user": "4e6a368e535d8ccf87e9feae"}, {"code": "(fn maxval[& c]\r\n  (peek (into [] (sort c)))\r\n  )", "problem": 38, "user": "4e9def6b535dbda64a6f6b8f"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4e944706535dbda64a6f6b11"}, {"code": "#(reduce (fn [x y] (if (> x y) x y))  %&)", "problem": 38, "user": "4e9fde3c535d7eef3080729b"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4ea76541535d7eef308072eb"}, {"code": "(fn maxl [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "4ea1ecfa535d7eef308072bb"}, {"code": "(fn mymax\n  ([a b] (if (> a b) a b))\n  ([a b & c]\n    (reduce mymax (mymax a b) c)))", "problem": 38, "user": "4ea365e2535d7eef308072c5"}, {"code": "(fn [& args]\n  (first\n    (reverse \n      (sort args))))", "problem": 38, "user": "4e759734535d7a570dd295c4"}, {"code": "(fn\n  [in_a in_b & in_n]\n  (loop [a in_a b in_b n in_n]\n    (if(empty? n)\n      (if (> a b) a b)\n     (recur (if (> a b) a b) (first n) (rest n))))\n )", "problem": 38, "user": "4ea85846535d7eef308072f9"}, {"code": "(fn mymax \r\n  ([x]\r\n     x)\r\n  ([x y]\r\n     (if (> x y) x y))\r\n  ([x y & xs]\r\n     (mymax (mymax x y)\r\n            (apply mymax xs))))", "problem": 38, "user": "4e7dfd48535db169f9c796fa"}, {"code": "(fn [& parms ] (first (reverse (sort parms))))", "problem": 38, "user": "4eaa96e1535d7eef3080730d"}, {"code": "#(first (sort > %&))", "problem": 38, "user": "4eab612d535d7eef30807316"}, {"code": "(fn mymax [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "4ea9b80c535d7eef30807306"}, {"code": "(fn [& a]\n    (reduce #(if (> %1 %2) %1 %2) a))", "problem": 38, "user": "4e243bcb535d04ed9115e825"}, {"code": "(fn [& c]\n  (reduce\n    (fn [acc elt] \n      (if (> elt acc)\n        elt\n        acc))\n    -9999 c))", "problem": 38, "user": "4ead6418535d7eef3080731f"}, {"code": "(fn m ([x] x)\n      ([x y] (if (< x y) y x))\n      ([x y & args]\n        (apply m (if (< x y) y x) args)))", "problem": 38, "user": "4eae5fe4535d7eef30807325"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4eaec592535d7eef30807327"}, {"code": "(fn [& params]\n  (reduce #(if (> % %2) % %2) params))", "problem": 38, "user": "4eac5bc1535d7eef3080731b"}, {"code": "(fn [& xs] (reduce #(if (>% %2) % %2) xs))", "problem": 38, "user": "4eaf08ce535d7eef3080732d"}, {"code": "(fn [& lst]\n    (loop [m (first lst)\n            l   (rest lst) ]\n            (if (empty? l) m\n                (if (> (first l) m)\n                  (recur (first l) (rest l))\n                  (recur m (rest l))))))", "problem": 38, "user": "4eaa47bc535d7eef30807309"}, {"code": "(fn sillymax\n  ([& more]\n      (first (reverse (sort more)))))", "problem": 38, "user": "4ea7999e535d7eef308072ee"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4eaede1f535d7eef30807329"}, {"code": "(fn [& x] \n  (reduce (fn [x y]\n          (if (> x y)\n            x\n            y)) 0 x))", "problem": 38, "user": "4eaf0d91535d7eef3080732e"}, {"code": "#(last(sort%&))", "problem": 38, "user": "4eb07be3535d7eef3080733b"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) (flatten (cons x xs))))", "problem": 38, "user": "4ea68edb535d7eef308072e6"}, {"code": "#(reduce (fn [a b] (if (> a b) a b)) (vec %&))", "problem": 38, "user": "4e58c019535d8a8b8723a297"}, {"code": "(fn f [& x]\r\n  (first (sort > x)))", "problem": 38, "user": "4eaed3a7535d7eef30807328"}, {"code": "(fn ma ([x y] (if (> x y) x y)) ([x y & more ] (reduce ma (ma x y) more)))", "problem": 38, "user": "4eb0afed535d7eef3080733e"}, {"code": "(fn \n    ([x] x)\n    ([x & more] (reduce #(if (> %2 %1) %2 %1) x more))\n)", "problem": 38, "user": "4eb0a757535d7eef3080733d"}, {"code": "(fn [& args]\n  (loop [coll (rest args) m (first args)]\n    (cond\n      (empty? coll) m\n      (> (first coll) m) (recur (rest coll) (first coll))\n      :else (recur (rest coll) m))))", "problem": 38, "user": "4e949d18535dbda64a6f6b15"}, {"code": "(fn [& nums]\n  (reduce (fn [a b] (if (< a b) b a)) nums))", "problem": 38, "user": "4eb1dd39535d7eef30807345"}, {"code": "(fn [x & y]\n  ((fn mm [a b]\n    (if (next b)\n(if (< a (first b))\n(mm (first b) (next b))\n(mm a (next b)))\n(if (< a (first b))\n(first b)\na))) x y))", "problem": 38, "user": "4eb27fad535d7eef3080734a"}, {"code": "(fn [& s] (reduce (fn [a b] (if (> a b) a b)) s))", "problem": 38, "user": "4eb2e6ca535d7eef3080734f"}, {"code": "(fn [a & b] \n  (if (next b) \n   (if (> a (first b)) (recur a (next b)) (recur (first b) (next b)))\n   (if (> a (first b)) a b)))", "problem": 38, "user": "4eb2eae5535d7eef30807351"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "4e8b73f1535d65386fec2121"}, {"code": "(fn [& rest] (loop [[h & r] rest, maxi 0]\n  (if h (recur r \n    (if \n      (> maxi h) maxi h)) maxi)))", "problem": 38, "user": "4eabb245535d7eef30807319"}, {"code": "(fn [& more] (last (sort more)))", "problem": 38, "user": "4ea95e56535d7eef30807302"}, {"code": "(fn [& r] (reduce #(if (> %1 %2) %1 %2) r))", "problem": 38, "user": "4eb5750a535d7eef30807366"}, {"code": "(fn [& args]\n  (last (sort args)))", "problem": 38, "user": "4e73b2e2535dff18050a9c78"}, {"code": "(fn [& seq]                                                                                      \n  (loop [m 0 s seq]                                                                                    \n    (if (> (count s) 0)                                                                                \n      (if (<= (first s) m)                                                                             \n        (recur m (rest s))                                                                             \n        (recur (first s) (rest s))                                                                     \n        )                                                                                              \n      m)))", "problem": 38, "user": "4eaf1342535d7eef30807330"}, {"code": "(fn djmax \n  ([] 0)\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & all]\n    (reduce djmax (djmax x y) all)))", "problem": 38, "user": "4eb59464535d7eef30807369"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4eb66737535d7eef3080736b"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4e8dd6cb535d65386fec213b"}, {"code": "(fn [x & names]\n  (loop [x x names names]\n  (if (empty? names)\n    x\n    (if (< x (first names)) (recur (first names) (rest names)) (recur x (rest names))))))", "problem": 38, "user": "4e36e647535deb9a81d77f36"}, {"code": "(fn [& seq]\n  (letfn [(max1 [seq acc]\n            (if\n              (= seq '()) acc\n              (max1 (rest seq) (if (> (first seq) acc) (first seq) acc))))]\n    (max1 seq 0)))", "problem": 38, "user": "4eb404ba535d7eef3080735a"}, {"code": "(fn [x & xs]\r\n  (reduce \r\n    #(if (> %1 %2)\r\n      %1\r\n      %2)\r\n  x xs)\r\n)", "problem": 38, "user": "4e94a900535dbda64a6f6b18"}, {"code": "(fn m [& xs] (last (apply sorted-set xs)))", "problem": 38, "user": "4eb01df4535d7eef30807337"}, {"code": "(fn [x & xs]\r\n   (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4eb80ce6535d7eef3080737d"}, {"code": "(fn[ & y] (last (sort y)))", "problem": 38, "user": "4e982877535dbda64a6f6b5b"}, {"code": "(fn [& a] (last (sort a)))", "problem": 38, "user": "4df7278a535d04ed9115e774"}, {"code": "(fn [& a] (last (sort a)))", "problem": 38, "user": "4eb2a89d535d7eef3080734c"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "4eb80353535d7eef3080737c"}, {"code": "(fn [& xs] (first (reverse (sort xs))))", "problem": 38, "user": "4eb955da535dfed6da9c6d50"}, {"code": "(fn [& args] (first (reverse (sort args))))", "problem": 38, "user": "4e9519b4535dbda64a6f6b2d"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4ea55757535d7eef308072d3"}, {"code": "#(reduce (fn [x y] (if (> x y) x y)) %&)", "problem": 38, "user": "4eb97b2e535dfed6da9c6d54"}, {"code": "(fn f\n  ([x] x)\n  ([x y]\n    (if (> x y) x y))\n  ([x y & args]\n    (reduce f (f x y) args)))", "problem": 38, "user": "4eb2d0ae535d7eef3080734e"}, {"code": "(fn [& seq] (reduce #(if (> %1 %2) %1 %2) seq))", "problem": 38, "user": "4eb97234535dfed6da9c6d53"}, {"code": "(fn maior [& x]\r\n  (loop[ v x]\r\n   (if (= (count v) 1)\r\n          (first v)\r\n          (if (> (first v)(second v))\r\n               (recur (filter #(>= % (first v)) v))\r\n               (recur (filter #(>= % (second v)) v))\r\n           ))))", "problem": 38, "user": "4e932523535dbda64a6f6b09"}, {"code": "(fn [x & x2](reduce #(if(> %1 %2)\n        %1\n        %2\n        ) x, x2)\n)", "problem": 38, "user": "4e94b4f7535dbda64a6f6b27"}, {"code": "(fn [& n] (reduce #(if (> %1 %2) %1 %2) n))", "problem": 38, "user": "4eb9ce75535dfed6da9c6d5e"}, {"code": "( fn [x & y]\n  (reduce #(if (> %1 %2) %1 %2) x y)\n)", "problem": 38, "user": "4ea3f035535d7eef308072ca"}, {"code": ";(fn [& x] (reduce #(if(> %1 %2) %1 %2) x))\n;(fn [x & x2] (reduce #(if(> %1 %2) %1 %2) x, x2))\n(fn [& v] (reduce (fn [v1 v2] (if (> v1 v2) v1 v2) ) v ))", "problem": 38, "user": "4e8b742a535d65386fec2123"}, {"code": "(fn [& x] (reduce #(if(> %1 %2) %1 %2) x))", "problem": 38, "user": "4eb593e6535d7eef30807368"}, {"code": "( fn [x & y]\r\n  (reduce #(if (> %1 %2) %1 %2) x y)\r\n)", "problem": 38, "user": "4eb82088535d7eef30807380"}, {"code": "(fn [& c]\n(last (sort c)))", "problem": 38, "user": "4e8a0d5d535d3e98b802328e"}, {"code": "(fn maximo [x1 & x2]\r\n  (reduce #(if (< %1 %2)\r\n             %2\r\n            %1)\r\n  (cons x1 x2)\r\n  )\r\n)", "problem": 38, "user": "4eb7ff08535d7eef30807379"}, {"code": "(fn [x & xaux]\n  (reduce #(if (< %1 %2) %2 %1) x xaux))", "problem": 38, "user": "4eb698ad535d7eef3080736d"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4e6e2ac4535d5021c1a895ff"}, {"code": "(fn\n  [& r]\n    (letfn [(max2\n              [a b]\n                (if (> a b)\n                  a\n                  b))]\n      (reduce max2 r)))", "problem": 38, "user": "4eb9d8f8535dfed6da9c6d61"}, {"code": "#(reduce (fn [i j] (if (> i j) i j)) 0 %&)", "problem": 38, "user": "4eb9c82d535dfed6da9c6d5c"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4ebb78a2535dfed6da9c6d70"}, {"code": "#(reduce (fn [a,b] (if (> a b) a b)) %&)", "problem": 38, "user": "4e82f85d535db62dc21a62ce"}, {"code": "(fn my-max\n  ([a] a)\n  ([a b] (if (> a b) a b))\n  ([a b & c] (my-max (my-max a b) (apply my-max c))))", "problem": 38, "user": "4e80b2da535db62dc21a62b2"}, {"code": "(fn [v & coll]\n  (loop \n    [x coll\n     m v ]\n      (if (empty? x)\n        m\n        (recur (rest x) (if (> (first x) m) (first x) m)))))", "problem": 38, "user": "4ebbf772535dfed6da9c6d76"}, {"code": "(fn [& args] (-> args sort last))", "problem": 38, "user": "4ebc64db535dfed6da9c6d82"}, {"code": "(fn [& xs]\n  (reduce #(if (> %2 %1) %2 %1) xs))", "problem": 38, "user": "4ebc08a8535dfed6da9c6d7c"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4eb6d3ab535d7eef30807370"}, {"code": "(fn [& s]\n  (reduce\n    #(if (> %2 %1) %2 %1)\n    0\n    s))", "problem": 38, "user": "4dbdc9da535d020aff1edf4c"}, {"code": ";;(fn ([x & more] (last (sort (conj more x )))))\n\n(fn [& args] (last (sort args)))", "problem": 38, "user": "4dbf7a31535d020aff1edf75"}, {"code": "(fn [& numbers]\n  (last (sort numbers))\n)", "problem": 38, "user": "4e8e5cc8535d65386fec2142"}, {"code": "(fn [& a] (reduce #(if (>= %1 %2) %1 %2) a))", "problem": 38, "user": "4e1350af535d04ed9115e7d8"}, {"code": "(fn [& lst] (reduce (fn [x1 x2] (if (> x1 x2) x1 x2)) lst))", "problem": 38, "user": "4ea3c875535d7eef308072c9"}, {"code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "problem": 38, "user": "4ebede00535dfed6da9c6d9a"}, {"code": "(fn [& v] (last (sort v)))", "problem": 38, "user": "4eb44d78535d7eef30807360"}, {"code": "(fn maxv [& seq] (reduce #(if (> %2 %1) %2 %1 ) seq))", "problem": 38, "user": "4ebe8d65535dfed6da9c6d96"}, {"code": "(fn [& xs]\n  (let [mx (fn [x y]\n             (if (> x y) x y))]\n    (reduce mx xs)))", "problem": 38, "user": "4dadb891c9a9d6ed3699dc57"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4e6e4210535d5021c1a89606"}, {"code": "(fn [ & s]\n  (reduce (fn [x y] (if (> x y) x y)) s))", "problem": 38, "user": "4ebe766d535dfed6da9c6d94"}, {"code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) more))", "problem": 38, "user": "4ebb20c0535dfed6da9c6d6f"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4ebf45c3535dfed6da9c6d9d"}, {"code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "problem": 38, "user": "4e9be708535dbda64a6f6b79"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4ec0c7ba535dfed6da9c6da4"}, {"code": "#(first (sort > %&))", "problem": 38, "user": "4e9c4e02535dbda64a6f6b7e"}, {"code": "(fn m [a b & rst]\n  (if (= (count rst) 0)\n    (if (> a b) a b)\n    (m (apply m (cons a rst)) (apply m (cons b rst)))))", "problem": 38, "user": "4ea0c284535d7eef308072ad"}, {"code": "(fn [& xs] (- (apply min (map #(- %) xs))))", "problem": 38, "user": "4ec132a0535dfed6da9c6da9"}, {"code": "(fn [& args] (reduce (fn [a b] (if (< a b) b a)) args))", "problem": 38, "user": "4ec12577535dfed6da9c6da8"}, {"code": "(fn [& more] (reduce (fn [y z] (if (> y z) y z)) more))", "problem": 38, "user": "4ec12516535dfed6da9c6da7"}, {"code": "(fn [& seq] \n  (last (sort seq)))", "problem": 38, "user": "4ec21058535dfed6da9c6dba"}, {"code": "(fn [& col] (reduce #(if (> % %2) % %2) col))", "problem": 38, "user": "4ec16c21535dfed6da9c6dac"}, {"code": "(fn [& args ] (reduce (fn [x y] (if (< x y) y x)) 0 args))", "problem": 38, "user": "4ebd4448535dfed6da9c6d8f"}, {"code": "(fn [& nums]\n  (reduce #(if (> %1 %2) %1 %2) Integer/MIN_VALUE nums))", "problem": 38, "user": "4ec2fe3f535dcc7ae8597d4f"}, {"code": "(fn [& coll]\n  (reduce \n    (fn [curr contender]\n      (if (> curr contender)\n        curr \n        contender))\n    (first coll) (rest coll)))", "problem": 38, "user": "4ec34578535dcc7ae8597d51"}, {"code": "(fn find-max ([x y] (if (> x y) x y)) ([x y & more] (reduce find-max (find-max x y) more)))", "problem": 38, "user": "4ebae727535dfed6da9c6d6d"}, {"code": "(fn mox [& args] \n   (\n      (fn max2 [c mx]\n         (if (= (first c) nil)\n            mx\n            (if (> (first c) mx)\n               (max2 (rest c) (first c))\n               (max2 (rest c) mx)\n            )\n         )\n      )\n      (rest args) (first args)\n   )\n)", "problem": 38, "user": "4ec17677535dfed6da9c6dad"}, {"code": "(fn [& xs] (reduce (fn [x y] (if (> x y) x y)) xs))", "problem": 38, "user": "4ec07699535dfed6da9c6da2"}, {"code": "(fn mmax\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & rest] (reduce mmax (mmax x y) rest)))", "problem": 38, "user": "4e7ddcc2535db169f9c796f0"}, {"code": "(fn my-max([x] x) ([x y] (if (> x y) x y)) ([x y & more] (reduce my-max (my-max x y) more)))", "problem": 38, "user": "4e8de3a2535d65386fec213d"}, {"code": "(fn max?\n  ([x] (first x))\n  ([x & more]\n    (let [m (max? more)]\n      (if (> x m) x m))))", "problem": 38, "user": "4ec5d40d535d6d7199dd36b9"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4e951f2c535dbda64a6f6b2f"}, {"code": "(fn [x & xs]\n  (let [coll (conj xs x)]\n    (reduce #(if (> %1 %2) %1 %2) coll)))", "problem": 38, "user": "4eb51942535d7eef30807365"}, {"code": "(fn [& lst] (reduce (fn [a b] (if (> a b) a b)) lst) )", "problem": 38, "user": "4ec363e7535dcc7ae8597d55"}, {"code": "(let [majx  (partial reduce #(if (> %1 %2)\n  \t\t\t     %1\n\t\t\t\t     %2))]\n       #(majx %&))", "problem": 38, "user": "4ec6157b535d6d7199dd36c2"}, {"code": "(fn [& vals] (last (sort vals)))", "problem": 38, "user": "4ec63613535d6d7199dd36c6"}, {"code": "(fn mymax\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] (reduce mymax (mymax x y) more))\n)", "problem": 38, "user": "4e4aaf49535dc968683fc4ce"}, {"code": "(fn mags\n  ([x y] (if (> x y) x y))\n  ([x y & more] (apply mags (cons (mags x y) more))))", "problem": 38, "user": "4ec4ac86535dcc7ae8597d64"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4ec6297b535d6d7199dd36c4"}, {"code": "(fn [& lst]\n  (reduce\n    #(if (> %2 %1) %2 %1)\n    lst\n  )\n)", "problem": 38, "user": "4ec1b090535dfed6da9c6db5"}, {"code": "(fn [& args]\n  (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "4ec42c11535dcc7ae8597d5f"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4ec2f192535dcc7ae8597d4c"}, {"code": "(fn ([x] x) ([x y] (if (> x y) x y)) ([x y z] (      if  (and (>= x y) (>= x z)) x   (if (and (>= y x) (>= y z)) y z)             ))  ([x y z o] 8)  )", "problem": 38, "user": "4ead76b7535d7eef30807320"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4eb171d7535d7eef30807340"}, {"code": "(fn max1 [& nums]\n    (reduce #(if (> %1 %2) %1 %2) nums))", "problem": 38, "user": "4e0d5a5a535d04ed9115e7b5"}, {"code": "(fn [& numbers]\n  (loop [maximum (first numbers) ls (rest numbers)]\n    (let [current (first ls)]\n      (if (= [] ls)\n        maximum\n        (recur (if (> maximum current)\n                  maximum\n                  current)\n              (rest ls))))))", "problem": 38, "user": "4e117dea535d04ed9115e7c9"}, {"code": "(fn [& nums] (last (sort nums)))", "problem": 38, "user": "4ec6d752535d6d7199dd36d9"}, {"code": "(fn [& xs]\n  (reduce (fn [x y] (if (> x y) x y)) xs))", "problem": 38, "user": "4ec59ce4535d6d7199dd36ab"}, {"code": "#(- (apply min (map - %&)))", "problem": 38, "user": "4ec812d9535d6d7199dd36f0"}, {"code": "(fn [& n] (first (reverse (sort n))))", "problem": 38, "user": "4eb75bdf535d7eef30807375"}, {"code": "(fn [& args] (reduce (fn [res, x] (if (> x res) x res)) 0 args))", "problem": 38, "user": "4e6f578c535d5021c1a8961b"}, {"code": "(fn mx [& l]\n    (println l)\n    (cond\n      (= 1 (count l)) (first l)\n      (< (first l) (second l)) (apply mx (cons (second l) (drop 2 l)))\n      :else (apply mx (cons (first l) (drop 2 l)))\n      )\n    )", "problem": 38, "user": "4ebbffbd535dfed6da9c6d79"}, {"code": "(fn [& col] \n  (loop [col1 col v (first col)]\n    (if (empty? col1)\n    v\n    (recur (rest col1) (if (< v (first col1) ) (first col1) v ) )\n    )\n   )\n)", "problem": 38, "user": "4ec5bec6535d6d7199dd36b3"}, {"code": "(fn [ lf & lrest ]\n  (reduce (fn [x y]\n           (if (> x y)\n              x\n              y)) (cons lf lrest)))", "problem": 38, "user": "4ec5b713535d6d7199dd36b2"}, {"code": "(fn [ & more] (reduce #(if (> %2 %1) %2 %1) more))", "problem": 38, "user": "4ec28d86535dfed6da9c6dbc"}, {"code": "(fn mx \n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] (reduce mx (mx x y) more)))", "problem": 38, "user": "4dbecb06535d020aff1edf6a"}, {"code": "(fn [& args]\n  (reduce (fn [x y] (if (> x y) x y)) 0 args))", "problem": 38, "user": "4ecabce3535d6d7199dd370a"}, {"code": "(fn[first & rest](reduce #(if(> %1 %2) %1 %2) first rest))", "problem": 38, "user": "4ec75829535d6d7199dd36e1"}, {"code": "(fn [& xs] (-> (sort xs) last))", "problem": 38, "user": "4ecab3b7535d6d7199dd3709"}, {"code": "(fn mymax \n  ([x] \n    x)\n  ([x y] \n    (if (> x y) x y))\n  ([x y & more] \n    (apply mymax (cons (mymax x y) more))))", "problem": 38, "user": "4ec8736f535d6d7199dd36f3"}, {"code": "(fn [f & more]\n  ((fn help [m l]\n    (if (= l '())\n        m\n        (if (> (first l) m)\n          (help (first l) (rest l))\n          (help m (rest l)))))\n  f\n  more))", "problem": 38, "user": "4ecaf637535d6d7199dd370c"}, {"code": "(fn[& z](reduce #(if(>%1%2)%1%2)z))", "problem": 38, "user": "4ecb7f4b535df97575fdabdc"}, {"code": "(fn [fst & lst] \n  (if (empty? lst) \n    fst \n    (let [scnd (first lst)] \n      (recur \n        (if (> fst scnd) fst scnd) \n        (next lst)))))", "problem": 38, "user": "4ec18451535dfed6da9c6db0"}, {"code": "(fn [& s] (reduce #(if (> %2 %1) %2 %1) s))", "problem": 38, "user": "4ec6559a535d6d7199dd36c9"}, {"code": "(fn [& n] (last (sort n)))", "problem": 38, "user": "4ec74de3535d6d7199dd36df"}, {"code": "(fn [& args] (reduce (fn [val, cur] (if (> val cur) val cur)) (seq args)))", "problem": 38, "user": "4ecb1641535d6d7199dd370e"}, {"code": "(fn [& coll]\n  (loop [s (rest coll)\n         r (first coll)]\n    (if (empty? s) r\n      (if (> r (first s)) \n        (recur (rest s) r) \n        (recur (rest s) (first s)))\n)))", "problem": 38, "user": "4e25176e535d04ed9115e829"}, {"code": "#(first (reverse (sort %&)))", "problem": 38, "user": "4ec3c4a0535dcc7ae8597d5a"}, {"code": "(fn [& args] (reduce #(if (> % %2) % %2) args))", "problem": 38, "user": "4ec70f26535d6d7199dd36dd"}, {"code": "(fn x-max [& args]\n  (reduce #(if (> %2 %1) %2 %1) args))", "problem": 38, "user": "4eccb190535d23f0362276fe"}, {"code": "(fn [& a] (reduce #(if (> % %2) % %2) a))", "problem": 38, "user": "4ec65213535d6d7199dd36c8"}, {"code": "(fn [& s]\n  (reduce (fn [acc x]\n            (if (> x acc)\n                x\n                acc))\n          s))", "problem": 38, "user": "4ec5a6ee535d6d7199dd36ae"}, {"code": "(fn this\n  ([x] x) \n  ([x y] (if (> x y) x y))\n  ([x y & more] \n    (apply this (this x y) more)))", "problem": 38, "user": "4eca40cd535d6d7199dd3703"}, {"code": "(fn maxValue [& args]\n  (loop [curr (first args), left (rest args)]\n    (if (empty? left)\n      curr\n      (if (> (first left) curr)\n        (recur (first left), (rest left))\n        (recur curr, (rest left))))))", "problem": 38, "user": "4ecbff2f535df97575fdabe4"}, {"code": "(fn mmax \r\n  ([x] x) \r\n  ([x y] (if (> x y) x y)) \r\n  ([x y & more] (reduce mmax (mmax x y) more)))", "problem": 38, "user": "4eb13d60535d7eef3080733f"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4ec51590535d6d7199dd3683"}, {"code": "(fn [& a] (last (sort a)))", "problem": 38, "user": "4e5af45e535d8a8b8723a2b1"}, {"code": "(fn [x & s] (reduce (fn [a b] (if (> a b) a b)) (cons x s)))", "problem": 38, "user": "4ebef65e535dfed6da9c6d9b"}, {"code": "(comp last sort list)", "problem": 38, "user": "4ece9ca9535d23f03622770f"}, {"code": "(fn [& xs] (reduce (fn [hi x] (if (> x hi) x hi)) xs))", "problem": 38, "user": "4ecf42b4535d1f5ad70dba3c"}, {"code": "(fn [& args] (reduce #(if (>= %1 %2) %1 %2) args))", "problem": 38, "user": "4ec65a6e535d6d7199dd36cb"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4ecfb458535d44c135fd68bb"}, {"code": "(fn my-max [& seq] (last (sort seq)))", "problem": 38, "user": "4eb83593535dd6025b394d1b"}, {"code": "(fn [ & x] (reduce #(if (>= %1 %2) %1 %2) x))", "problem": 38, "user": "4ecbb249535df97575fdabdf"}, {"code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "problem": 38, "user": "4ecf1f51535d1f5ad70dba3a"}, {"code": "(fn [& l]\n  (reduce #(if (> %1 %2) %1 %2) l))", "problem": 38, "user": "4ed00953535d44c135fd68c2"}, {"code": "(comp (partial reduce #(if (> %1 %2) %1 %2)) list)", "problem": 38, "user": "4ed06ea6535d44c135fd68c4"}, {"code": "(fn [c & r]\n  (reduce #(if (> %1 %2) %1 %2) c r)\n)", "problem": 38, "user": "4ea882c7535d7eef308072fc"}, {"code": "#(reduce (fn [x y] (if (> x y) x y)) %&)", "problem": 38, "user": "4ec5cdb0535d6d7199dd36b8"}, {"code": "(fn [& args]\n   (reduce #(if (> % %2) % %2) args))", "problem": 38, "user": "4ed15f60535d44c135fd68cd"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4ecc147b535d23f0362276f7"}, {"code": "(fn [& xs]\n  (reduce (fn [mx x] (if (> x mx) x mx)) xs))", "problem": 38, "user": "4ed188c8535d44c135fd68cf"}, {"code": "(fn [& x] (last (sort (seq x))))", "problem": 38, "user": "4e75500f535d7a570dd295c1"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "4ebc829e535dfed6da9c6d86"}, {"code": "(fn [& c]  (reduce #(if (> %1 %2) %1 %2 ) c))", "problem": 38, "user": "4ec79f99535d6d7199dd36e4"}, {"code": "(fn mymax\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n   (reduce mymax (mymax x y) more)))", "problem": 38, "user": "4ea53dc2535d7eef308072d1"}, {"code": "(fn [& x] (first (sort > x)))", "problem": 38, "user": "4ed24780535d44c135fd68d4"}, {"code": "(fn [& x] (first (sort > x)))", "problem": 38, "user": "4ec60dc4535d6d7199dd36c0"}, {"code": "(fn [& args]\n  (reduce #(if (< %1 %2) %2 %1)\n          args))", "problem": 38, "user": "4ebf11bc535dfed6da9c6d9c"}, {"code": "(fn [& ls] \n  (reduce #(if (> %1 %2) %1 %2) ls))", "problem": 38, "user": "4ed292ac535d44c135fd68d9"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "4ec5fb83535d6d7199dd36bd"}, {"code": "#(reduce (fn [x y] (if (< x y) y x)) %&)", "problem": 38, "user": "4ecc8dea535d23f0362276fd"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4ec49231535dcc7ae8597d63"}, {"code": "(fn [f & r] (reduce #(if (> %1 %2) %1 %2) f r))", "problem": 38, "user": "4e6ac593535d8ccf87e9ff02"}, {"code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "4ec75077535d6d7199dd36e0"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4e8a6bb0535d65386fec210b"}, {"code": "(fn [x & more] (loop [m x  y more] \n  \t\t       (if (empty? y) m\n\t\t\t\t   (recur (if (> m (first y)) m (first y)) (rest y)))))", "problem": 38, "user": "4ea4e98a535d7eef308072ce"}, {"code": "(fn [f & r]\n  (reduce #(if (> %2 %) %2 %) f r))", "problem": 38, "user": "4ed2b168535d44c135fd68dd"}, {"code": "#(letfn [(m [a b] (if (< a b) b a))] (reduce m %&))", "problem": 38, "user": "4e65027c535d8ccf87e9fe6e"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4ead2841535d7eef3080731e"}, {"code": "(comp (partial reduce #(if (< %1 %2) %2 %1)) list)", "problem": 38, "user": "4ece7617535d23f03622770c"}, {"code": "(fn [x y & lst] (letfn \n  [(\n    maxx [a b] (if (>= a b) a b)\n  )]\n  (reduce maxx (conj lst x y))\n)\n)", "problem": 38, "user": "4ecfa05c535d44c135fd68b9"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4ec601ff535d6d7199dd36be"}, {"code": "#(reduce (fn [a b] (if (> b a) b a)) %&)", "problem": 38, "user": "4ecaaa25535d6d7199dd3708"}, {"code": "#(-(apply min (map - %&)))", "problem": 38, "user": "4ed0d65f535d44c135fd68c6"}, {"code": "(fn [x & xs] (reduce #(if (> %1 %2) %1 %2) x xs))", "problem": 38, "user": "4ed500bb535d10e5ff6f52d3"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "4daf1076edd6309eace4d16f"}, {"code": "(fn gre [x & xs]\n  (reduce #(if (> %1 %2) %1 %2) x xs))", "problem": 38, "user": "4ed4798f535d10e5ff6f52cc"}, {"code": "(fn [& s]\n    (loop [m 0 l s]\n      (if (empty? l)\n        m\n        (recur (if (> m (first l))\n                 m\n                 (first l))\n               (rest l)))))", "problem": 38, "user": "4e7e8684535db169f9c79717"}, {"code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "4e7f8f85535db966e863cc44"}, {"code": "#(first (reverse (sort %&)))", "problem": 38, "user": "4ec53cef535d6d7199dd3686"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) (seq args)))", "problem": 38, "user": "4ed3c783535d44c135fd68f6"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "4ed55b5d535d10e5ff6f52d8"}, {"code": "(fn [& r-]\n  (loop [r r-\n         m 0]\n    (if (= 0 (count r))\n      m\n      (recur (rest r)\n             (if (> (first r) m)\n                 (first r) m)))))", "problem": 38, "user": "4ed578d1535d10e5ff6f52d9"}, {"code": "(fn [& xs]\n  (last (sort xs)))", "problem": 38, "user": "4eca5391535d6d7199dd3704"}, {"code": "(fn [& args] (-> args sort last))", "problem": 38, "user": "4ec5aa1f535d6d7199dd36b0"}, {"code": "(fn [x & xs]\n  (cond\n    (= xs nil) x\n    :else\n      (let [amax \n             (fn amax [x xs]\n               (cond (= xs []) x\n                     (> (first xs) x) (amax (first xs) (rest xs))\n                     :else (amax x (rest xs))))]\n        (amax x xs))))", "problem": 38, "user": "4dad8d4bc9a9d6ed1799dc57"}, {"code": "(fn f [& args]\n  (last (sort args)))", "problem": 38, "user": "4db85c8e535d1e037afb218f"}, {"code": "(fn [& v]\n  (reduce #(if (> %1 %2) %1 %2) v))", "problem": 38, "user": "4ed62436535d10e5ff6f52df"}, {"code": "(fn[& s]\n  (loop [s s m 0]\n    (if (empty? s)\n      m\n      (recur (rest s) (if (> (first s) m) (first s) m)))))", "problem": 38, "user": "4ec64981535d6d7199dd36c7"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4ed69ea4535d10e5ff6f52e3"}, {"code": "(fn [& coll] (reduce #(if (> %2 %1) %2 %1) 0 coll))", "problem": 38, "user": "4ea11921535d7eef308072af"}, {"code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "problem": 38, "user": "4ec7def0535d6d7199dd36e9"}, {"code": "(fn [& more]\n    (reduce #(if (> % %2) % %2) more))", "problem": 38, "user": "4ed72e51535d10e5ff6f52ee"}, {"code": "(fn [& more] (last (sort more)))", "problem": 38, "user": "4ed6b05c535d10e5ff6f52e5"}, {"code": "(fn [& coll] \n  (reduce (fn [a b] (if (> b a) b a)) coll))", "problem": 38, "user": "4e513fef535dc968683fc4f7"}, {"code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4ec3b393535dcc7ae8597d59"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4ed1f84f535d44c135fd68d3"}, {"code": "(fn [& xs]\n  (reduce \n    (fn [x y] (if (> x y) x y))\n    xs))", "problem": 38, "user": "4ed6238d535d10e5ff6f52de"}, {"code": "(fn [x & more] (letfn [(f [x acc] (if (empty? x) acc (if (> (first x) acc) (f (rest x) (first x)) (f (rest x) acc))))] (f more x)))", "problem": 38, "user": "4ed94d69535d10e5ff6f5303"}, {"code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "problem": 38, "user": "4ed0e139535d44c135fd68c7"}, {"code": "(fn [& a] (reduce #(if (> % %2) % %2) a))", "problem": 38, "user": "4ed97da1535d10e5ff6f5306"}, {"code": "(fn [x & args] (reduce #(if (> % %2) % %2) x args))", "problem": 38, "user": "4ed27f9f535d44c135fd68d5"}, {"code": "(fn my-max [head & tail]\n  (if (seq tail)\n    (if (> head (apply my-max tail))\n      head\n      (apply my-max tail))\n    head))", "problem": 38, "user": "4eda7cc3535d10e5ff6f530e"}, {"code": "(fn [& vals]\n  ((fn [vals m]\n    (cond\n      (nil? vals) m\n      (> (first vals) m)\n        (recur (next vals) (first vals))\n      :else (recur (next vals) m)))\n    vals 0))", "problem": 38, "user": "4eda8d7c535d10e5ff6f530f"}, {"code": "(fn [& l] (reduce #(if (> % %2) % %2) l))", "problem": 38, "user": "4ed6ac40535d10e5ff6f52e4"}, {"code": "(fn [& more] (last (sort more)))", "problem": 38, "user": "4edab806535d10e5ff6f5311"}, {"code": "(fn m\n  ([x] x)\n  ([x y] (if (< x y) y x))\n  ([x y & more]\n     (reduce m (m x y) more)))", "problem": 38, "user": "4e57d1e2535d8a8b8723a289"}, {"code": "(fn [a1 & others] (reduce #(if (> %1 %2) %1 %2) a1 others))", "problem": 38, "user": "4ebd33e4535dfed6da9c6d8e"}, {"code": "(fn [& args] (reduce #(if(> %1 %2) %1 %2) 0 args))", "problem": 38, "user": "4ed8b598535d10e5ff6f52fc"}, {"code": "(fn\n  [& args]\n    (reduce\n      (fn [a b]\n        (if (< a b) b a)) args))", "problem": 38, "user": "4e86fd2d535dceadca46984d"}, {"code": "(fn [& p](reduce #(if (> %1 %2) %1 %2) p))", "problem": 38, "user": "4ec6357a535d6d7199dd36c5"}, {"code": "(fn my-max [& args]\n  (cond \n    (empty? args) nil\n    (= 1 (count args)) (first args)\n    (= 2 (count args)) (if (> (first args) (second args)) (first args) (second args))\n    :else\n    (loop [max-so-far (first args)\n           tail (rest args)]\n      (if (empty? (rest tail)) \n        (my-max max-so-far (first tail))\n        (recur (my-max max-so-far (first tail)) (rest tail))))))", "problem": 38, "user": "4ecdb0bb535d23f036227709"}, {"code": "(fn [& x](first (reverse (sort x))))", "problem": 38, "user": "4ed82830535d10e5ff6f52f7"}, {"code": "(fn[& x]\r\n  (reduce \r\n    #(if (> %1 %2) \r\n      %1 %2)\r\n    x))", "problem": 38, "user": "4e59f717535d8a8b8723a2a6"}, {"code": "(fn [& l] (reduce (fn [a b] (if (> a b) a b)) l))", "problem": 38, "user": "4edca56f535d10e5ff6f5324"}, {"code": "(fn [& i] (last (sort i)))", "problem": 38, "user": "4e95f5a5535dbda64a6f6b3b"}, {"code": "#(loop [mx % s %&]\n  (if (empty? s)\n    mx\n    (recur (if (> (first s) mx) (first s) mx) \n           (rest s))))", "problem": 38, "user": "4ed7e37a535d10e5ff6f52f4"}, {"code": "(fn this\n  ([x] x)\n  ([x y]\n    (if (> x y)\n        x\n        y\n    ))\n  ([x y & more]\n   (apply this (this x y) more)))", "problem": 38, "user": "4db653f6535d1e037afb217c"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4ec927e8535d6d7199dd36f9"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4ede8789535d10e5ff6f5337"}, {"code": "(fn [& args]\n  (reduce (fn [a b]\n            (cond (nil? a) b\n                  (> a b) a\n                  :else b))\n          nil\n          args))", "problem": 38, "user": "4ede8e1d535d10e5ff6f5339"}, {"code": "(fn [& x]\r\n     (   \r\n      (fn c [y] \r\n        (   \r\n         if (nil? (second y)) \r\n         ( first y)\r\n         (   \r\n         if (> (first y) (c(rest y)))\r\n          (first y)\r\n          ( c (rest y)) \r\n          )   \r\n        )   \r\n      ) x \r\n     )   \r\n   )", "problem": 38, "user": "4eddfb5c535d10e5ff6f532f"}, {"code": "#(last(sort %&))", "problem": 38, "user": "4edeac6b535d10e5ff6f533a"}, {"code": "(fn [& v]\n  (last (sort v))\n)", "problem": 38, "user": "4e94aa18535dbda64a6f6b1e"}, {"code": "(fn [& x]\n  (last (sort x))\n)", "problem": 38, "user": "4edf92f0535d10e5ff6f5341"}, {"code": "(fn [& z] (* -1 (apply min (map (fn [x] (* x -1)) z))))", "problem": 38, "user": "4edf40d5535d10e5ff6f533f"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4ed2b337535d44c135fd68de"}, {"code": "(fn [& s]\n  ((fn maxno [x, coll]\n    (if (seq coll)\n      (maxno (if (<= x (first coll))\n               (first coll)\n               x) (rest coll))\n      x)) 0 s) \n)", "problem": 38, "user": "4edffe54535d10e5ff6f5347"}, {"code": "#(first (reverse (sort %&)))", "problem": 38, "user": "4ed6c738535d10e5ff6f52e9"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4edd9d79535d10e5ff6f532b"}, {"code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "problem": 38, "user": "4edd038c535d10e5ff6f5327"}, {"code": "(fn \n  [& numbers]\n    (loop [highest 0 items numbers]\n      (if (= nil items) \n        highest\n          (if (> (first items) highest)\n            (recur (first items) (next items))\n            (recur highest (next items))))))", "problem": 38, "user": "4eddc5f4535d10e5ff6f532c"}, {"code": "(fn ma\r\n  [a & more]\r\n\t(let [coll more]\r\n\t(reduce (fn [x y] (if (>= x y) x y)) a coll)))", "problem": 38, "user": "4edbae0d535d10e5ff6f531c"}, {"code": "(fn [x & y] (first (reverse (sort (conj y x)))))", "problem": 38, "user": "4eaa66eb535d7eef3080730b"}, {"code": "(fn [& a] (last(sort a)))", "problem": 38, "user": "4ee1220b535d10e5ff6f5354"}, {"code": "(fn [& arg] (last (sort arg)))", "problem": 38, "user": "4ec5754b535d6d7199dd36a2"}, {"code": "(fn [c & r]\r\n  (reduce #(if (> %1 %2) %1 %2) c r)\r\n)", "problem": 38, "user": "4ee17ecc535d10e5ff6f535a"}, {"code": "(fn [f & etc]\n    (if (seq etc)\n        (recur (if (> f (first etc)) f (first etc)) (rest etc))\n        f\n    ))", "problem": 38, "user": "4df21dd0535d08e6dec9fe24"}, {"code": "(fn [& args]\n  (reduce (fn [c t]\n              (if (> t c) t c)) args))", "problem": 38, "user": "4dbde85b535d020aff1edf52"}, {"code": "(fn [& xs]\n  (reduce #(if (< %1 %2) %2 %1) xs))", "problem": 38, "user": "4ee2da14535d10e5ff6f536c"}, {"code": "(fn [& s] (reduce (fn [a b] (if (> a b) a b)) s))", "problem": 38, "user": "4ee26f01535d10e5ff6f5368"}, {"code": "(fn [& num]\n  (reduce #(if (> % %2) % %2) num))", "problem": 38, "user": "4ed9fe5f535d10e5ff6f5308"}, {"code": "(fn [& c]\n  (reduce #(if (< %1 %2) %2 %1) 0 c))", "problem": 38, "user": "4ee3c9c5535d10e5ff6f5372"}, {"code": "(fn [& more] (reduce (fn [x y] (if (> x y) x y)) more))", "problem": 38, "user": "4edfb618535d10e5ff6f5343"}, {"code": "(fn my-max [& xs] (reduce (fn [x y] (if (> x y) x y)) xs))", "problem": 38, "user": "4ee3b586535d10e5ff6f5371"}, {"code": "(fn [& xs] (first (sort > xs)))", "problem": 38, "user": "4edee6a2535d10e5ff6f533e"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4ee129d2535d10e5ff6f5355"}, {"code": "(fn [& seq]\n  (reduce #(if (> %1 %2) %1 %2) seq))", "problem": 38, "user": "4eb7b049535d7eef30807377"}, {"code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) args))", "problem": 38, "user": "4ee40938535d10e5ff6f5375"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4edd4b77535d10e5ff6f5328"}, {"code": "(fn [& args] \n  (reduce (fn[a b]\n       (if (> a b) a b)) args))", "problem": 38, "user": "4ee3e3b8535d10e5ff6f5373"}, {"code": "(fn [& more]\n  (reduce (fn [a b] (if (> a b) a b)) more))", "problem": 38, "user": "4ee4f4a9535d1385b2869d85"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4ec6cd4f535d6d7199dd36d7"}, {"code": "(fn [& lst]\n    (loop [m 0 l lst]\n        (if (empty? l)\n            m\n            (if (> (first l) m)\n                (recur (first l) (rest l))\n                (recur m (rest l))))))", "problem": 38, "user": "4ee251e9535d10e5ff6f5365"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "4ee52c44535d1385b2869d88"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "4eddcbbf535d10e5ff6f532d"}, {"code": "(fn [e & l] (reduce #(if (> % %2) % %2) e l))", "problem": 38, "user": "4edf5dc6535d10e5ff6f5340"}, {"code": "(fn [x & xs]\n    (loop [x x\n           xs xs]\n      (if (seq xs)\n        (if (> x (first xs))\n          (recur x (rest xs))\n          (recur (first xs) (rest xs)))\n        x)))", "problem": 38, "user": "4e5be681535d8a8b8723a2bc"}, {"code": "(fn [n & nrs]\n  (reduce #(if (> %1 %2) %1 %2) n nrs))", "problem": 38, "user": "4ed7b617535d10e5ff6f52f3"}, {"code": "(fn [& xs]\r\n    (loop [cur (first xs)\r\n\t         rem (rest xs)]\r\n\t     (if (empty? rem)\r\n\t\t       cur\r\n\t\t       (if (> (first rem) cur)\r\n\t\t           (recur (first rem) (rest rem))\r\n\t\t           (recur cur (rest rem))))))", "problem": 38, "user": "4ee75ec2535d93acb0a66867"}, {"code": "(fn [& rest]\n  (first (sort > rest)))", "problem": 38, "user": "4ee63d8d535d93acb0a66859"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2)\n              %2\n              %1) x xs))", "problem": 38, "user": "4edfd846535d10e5ff6f5345"}, {"code": "#(reduce (fn [x y] (if (> x y) x y)) %&)", "problem": 38, "user": "4ee7ef87535d93acb0a66872"}, {"code": "(fn [& coll] (reduce #(if (> % %2) % %2) coll))", "problem": 38, "user": "4ee6400c535d93acb0a6685b"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4ee88269535d93acb0a6687f"}, {"code": "(fn [& x] (reduce (fn [a b] (if (> a b) a b)) x))", "problem": 38, "user": "4e1582f0535d04ed9115e7e4"}, {"code": "(fn [& nums]\n  (let [mymax (fn mymax [largest xs]\n    (if (= 0 (count xs))\n      largest\n      (if (> (first xs) largest)\n        (mymax (first xs) (rest xs))\n        (mymax largest (rest xs)))))]\n  (mymax (first nums) nums)))", "problem": 38, "user": "4ee85476535d93acb0a6687c"}, {"code": "#(first (sort > %&))", "problem": 38, "user": "4eb30868535d7eef30807355"}, {"code": "(fn [x & more] (reduce (fn [a b] (if (> a b) a b)) (cons x more)))", "problem": 38, "user": "4e570b60535d8a8b8723a286"}, {"code": "(fn my_max[& args] (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "4ee8092f535d93acb0a66875"}, {"code": "(fn [& t] (last (sort t)))", "problem": 38, "user": "4ee82539535d93acb0a66878"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) (first x) x) )", "problem": 38, "user": "4ee7d177535d93acb0a6686f"}, {"code": "(fn [ & args ]\n  (reduce (fn [a b] (if (< a b) b a)) args))", "problem": 38, "user": "4ee82223535d93acb0a66877"}, {"code": "(fn [& l] (last (sort l)))", "problem": 38, "user": "4ee88f29535d93acb0a66882"}, {"code": "(fn [ & lst]\n  (reduce (fn [r i] (if (> i r) i r))\n          -1\n          lst))", "problem": 38, "user": "4ee88bfb535d93acb0a66881"}, {"code": "(fn [& args] (reduce (fn [x y] (if (< x y) y x)) args))", "problem": 38, "user": "4e4be570535dc968683fc4d8"}, {"code": "(fn [& lst] (reduce (fn [x y] (if (> x y) x y)) lst))", "problem": 38, "user": "4ee9d697535d93acb0a66895"}, {"code": "(fn [x & xs]\n  (reduce \n    #(if (> %1 %2)\n      %1\n      %2) x xs))", "problem": 38, "user": "4ed19f00535d44c135fd68d1"}, {"code": "(fn ([a] a)\n    ([a b] (if (> a b) a b))\n    ([a b & rest] (reduce #(if (> %1 %2) %1 %2) (cons a (cons b rest)))))", "problem": 38, "user": "4eeaf88f535d93acb0a668a3"}, {"code": "(fn [& xv] (reduce (fn [a b] (if (< a b) b a)) xv))", "problem": 38, "user": "4ee9ddb8535d93acb0a66896"}, {"code": "(comp last sort list)", "problem": 38, "user": "4eebc5da535d93acb0a668aa"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4eea1a41535d93acb0a66899"}, {"code": "(fn [& coll] (reduce #(if (> % %2) % %2) coll))", "problem": 38, "user": "4ed45563535d10e5ff6f52c9"}, {"code": "(fn mymax\r\n  ( [a] a )\r\n  ( [a b] (if (> a b) a b) )\r\n  ( [a b & more]\r\n    (reduce mymax (mymax a b) more)\r\n  )\r\n)", "problem": 38, "user": "4ee908ae535d93acb0a66889"}, {"code": "(fn [& x] (reduce #(if (> % %2) % %2) x))", "problem": 38, "user": "4eebfd03535d93acb0a668ab"}, {"code": "(fn [& l] (reduce (fn [a n] (if (> a n) a n)) l))", "problem": 38, "user": "4ee868be535d93acb0a6687d"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4eecdd66535d93acb0a668b9"}, {"code": "(fn foo [x & y] \n   (loop [lst y maxx x] \n     (if (empty? lst)\n  \t\tmaxx\n\t\t\t(recur \n\t\t\t\t(rest lst) \n\t\t\t\t(if (< (first lst) maxx) maxx (first lst))\n\t\t\t)\n\t\t)\n\t)\n)", "problem": 38, "user": "4ec3072a535dcc7ae8597d50"}, {"code": "(fn m [x & xs]\n  (reduce #(if (> %2 %1) %2 %1) x xs))", "problem": 38, "user": "4ee91d00535d93acb0a6688b"}, {"code": "(fn [x & xs]\n  (let [m x]\n    (if (seq xs)\n      (let [f (first xs)]\n         (recur (if (> x f) x f) (rest xs)))\n       m)))", "problem": 38, "user": "4ee645f8535d93acb0a6685d"}, {"code": "(fn mymax[x & xs] \n  (letfn [(impl [sofar remaining]\n    (if (empty? remaining)\n      sofar\n      (if (< sofar (first remaining))\n        (impl (first remaining) (rest remaining))\n        (impl sofar (rest remaining)))))]\n  (impl x xs)))", "problem": 38, "user": "4ee01905535d10e5ff6f534c"}, {"code": "(fn [x & xs]\r\n  (reduce \r\n    #(if (> % %2) % %2)\r\n    x\r\n    xs))", "problem": 38, "user": "4eeae8f0535d93acb0a668a2"}, {"code": "(fn [& xs] (reduce (fn [a b] (if (> a b) a b)) 0 xs))", "problem": 38, "user": "4ecfe525535d44c135fd68bf"}, {"code": "(fn [& s]\n  (loop [acc (first s) r s]\n    (if (not (seq r))\n         acc\n         (recur (if (> acc (first r)) acc (first r))\n                (rest r)))))", "problem": 38, "user": "4ef0a38e535dced4c769f20b"}, {"code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "problem": 38, "user": "4daea889edd6309eace4d15b"}, {"code": "(fn [ & xs]\n (reduce #(if (> %1 %2) %1 %2) 0 xs))", "problem": 38, "user": "4ef0a39b535dced4c769f20c"}, {"code": "(fn [& args]\n  (reduce\n    (fn [a b] (if (> a b) a b))\n    args))", "problem": 38, "user": "4eeff8fc535d305ff5cb7f24"}, {"code": "(fn\r\n  [& args]\r\n  (loop [m (first args) c (rest args)]\r\n    (if-let [f (first c)]\r\n      (recur (if (< m f) f m) (next c))\r\n      m)))", "problem": 38, "user": "4e46ac46535dc968683fc4b5"}, {"code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) (vec args)))", "problem": 38, "user": "4ef0a39b535dced4c769f20d"}, {"code": "(fn [ & more ] (first (reverse (sort more))))", "problem": 38, "user": "4eef1164535d305ff5cb7f19"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4ef1ee67535dced4c769f219"}, {"code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "problem": 38, "user": "4ee3afde535d10e5ff6f5370"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4edecdae535d10e5ff6f533c"}, {"code": "#(first (apply (partial sort >) (list %&)))", "problem": 38, "user": "4ecf5ee1535d44c135fd68b7"}, {"code": "(fn [& items] (last (sort items)))", "problem": 38, "user": "4e6a6be7535d8ccf87e9fee1"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4ef2d243535dced4c769f221"}, {"code": "(fn [& xs] \n  (reduce \n    (fn [x y] (if (> x y) x y))\n    xs))", "problem": 38, "user": "4ef41f26535dced4c769f230"}, {"code": "(fn [& xs] (reduce #(if (> %2 %1) %2 %1) xs))", "problem": 38, "user": "4ef2a142535dced4c769f21e"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4ef49c2c535dced4c769f238"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4ee67d74535d93acb0a66861"}, {"code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) coll))", "problem": 38, "user": "4ef4e5fa535dced4c769f242"}, {"code": "(fn [& l] (reduce #(if (> %2 %) %2 %) l))", "problem": 38, "user": "4ef355e3535dced4c769f228"}, {"code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "problem": 38, "user": "4eee5c7f535d93acb0a668c6"}, {"code": "(fn [& args] \r\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4ef47f0f535dced4c769f235"}, {"code": "#(reduce (fn [x y] (if (> x y) x y)) %&)", "problem": 38, "user": "4ef57a7f535dced4c769f246"}, {"code": "(fn [& xs] \n  (last (sort xs)))", "problem": 38, "user": "4ef5c7ce535dced4c769f248"}, {"code": "(fn [& coll]\n  (loop [mx (first coll) S (rest coll)]\n    (if (empty? S)\n      mx\n      (if (> mx (first S))\n        (recur mx (rest S))\n        (recur (first S) (rest S))))))", "problem": 38, "user": "4ef4c1ff535dced4c769f23e"}, {"code": "(fn [& x] (reduce (fn [a,b] (if (> a b) a b)) x))", "problem": 38, "user": "4daea587edd6309eace4d15a"}, {"code": "(fn [& allparam]\n  ((fn [xs] \n    (reduce \n      (fn [x y] (if (> x y) x y))\n      (first xs)\n      (next xs )))\n   allparam))", "problem": 38, "user": "4ef5c847535dced4c769f249"}, {"code": "(fn [& args]\n    (reduce #(if (> %2 %1) %2 %1) args))", "problem": 38, "user": "4ef667c4535dced4c769f24c"}, {"code": "(fn [& elems]\n  (reduce #(if (< %1 %2) %2 %1) 0 elems))", "problem": 38, "user": "4ef4acf8535dced4c769f23c"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4ef77c82535dced4c769f253"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4ef0f1a1535dced4c769f212"}, {"code": "(fn [& coll] \n  (reduce (fn [x y] (if (> x y) x y)) coll))", "problem": 38, "user": "4dd88803535d2dad7130b5d9"}, {"code": "(fn [ & args]\n(reduce #(if (> %2 %1)\n            %2\n            %1) args))", "problem": 38, "user": "4ef992c8535dced4c769f268"}, {"code": "(fn [& nums] (reduce (fn [x y](if (> x y) x y)) nums))", "problem": 38, "user": "4ed2dd98535d44c135fd68e2"}, {"code": "(fn my-max \n  ([& nums]\n    (reduce #(if (> %1 %2) %1 %2) 0 nums)))", "problem": 38, "user": "4eee3e6a535d93acb0a668c3"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4eae2f9e535d7eef30807324"}, {"code": "(fn [& xs] (first (sort > xs)))", "problem": 38, "user": "4ee528fb535d1385b2869d87"}, {"code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "problem": 38, "user": "4ef9c78e535dced4c769f26a"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4ef6e689535dced4c769f24f"}, {"code": "(fn mymax2 [x & xs]\n  (first (sort > (conj xs x))))", "problem": 38, "user": "4ef6f5ea535dced4c769f250"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "4e73debb535d7a570dd295b7"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4ee2baa8535d10e5ff6f536b"}, {"code": "(fn [x & more] (reduce #(if (> %1 %2) %1 %2) x more))", "problem": 38, "user": "4ef8d47c535dced4c769f261"}, {"code": "(fn [x y & more]\n  (reduce (fn [maxp nextnumber]\n      (if (> nextnumber maxp) nextnumber maxp))\n    (if (> x y) x y) more))", "problem": 38, "user": "4efb92ce535dced4c769f27a"}, {"code": "#(last(apply sorted-set %&))", "problem": 38, "user": "4ec5d62c535d6d7199dd36ba"}, {"code": "(fn [& more] (reduce #(cond (> % %2) % :else %2) (lazy-seq more)))", "problem": 38, "user": "4efb0ae1535dced4c769f273"}, {"code": "(fn [& more]\n  (loop [se more\n   champ (first more)]\n    (do\n      (if (empty? se)\n\tchamp\n\t(if (< champ (first se))\n\t  (recur (rest se) (first se))\n\t  (recur (rest se) champ))))))", "problem": 38, "user": "4ef9b021535dced4c769f269"}, {"code": "(fn [& n] (reduce #(if (< % %2) %2 %) n))", "problem": 38, "user": "4efb87f7535dced4c769f279"}, {"code": "(fn my-max\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] (reduce my-max (my-max x y) more)))", "problem": 38, "user": "4eecc9ad535d93acb0a668b4"}, {"code": "(fn [x & more]\n  (if (nil? more)\n    x\n    (if (> x (first more))\n      x\n      (recur (first more) (rest more))\n    )\n  )\n)", "problem": 38, "user": "4e5cac7c535d8a8b8723a2c3"}, {"code": "(fn getmax\n([x] x)\n([x y] (if (> x y) x y))\n([x y & more]\n(reduce getmax (getmax x y) more)))", "problem": 38, "user": "4eeb8f68535d93acb0a668a9"}, {"code": "(fn [& list] (reduce #(if (> %1 %2) %1 %2) list))", "problem": 38, "user": "4efbe02a535dced4c769f27b"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) (flatten (cons x xs))))", "problem": 38, "user": "4ed9354f535d10e5ff6f5301"}, {"code": "(fn [& m] (last (sort m)))", "problem": 38, "user": "4efb2fd7535dced4c769f274"}, {"code": "(fn [ & xs] (reduce #(if (> %2 %1) %2 %1) 0 xs))", "problem": 38, "user": "4efcac3a535de96065cf507e"}, {"code": "(fn [& seq] (reduce (fn [x y] (if (> y x) y x)) seq))", "problem": 38, "user": "4efd98fa535de96065cf5086"}, {"code": "(fn [x y & more] (reduce (fn [x y] (if (> x y) x y)) (if (> x y) x y) more))", "problem": 38, "user": "4e8768f6535dceadca469850"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4effb663535dcb61093f6a2e"}, {"code": "(fn [& values]\n  (reduce #(if (> %2 %1) %2 %1) values))", "problem": 38, "user": "4ef89fb0535dced4c769f260"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4eff81ca535dcb61093f6a2d"}, {"code": "(fn [& p] (reduce (fn [a b] (if (> a b) a b)) (flatten p)))", "problem": 38, "user": "4f017593535dcb61093f6a36"}, {"code": "(fn maksimum [& x]\r\n  (loop [liczby x m (first x)] \r\n\t\t(if (= (count liczby) 0) m\r\n\t\t\t(if (> (first liczby) m) (recur (rest liczby) (first liczby)) (recur (rest liczby) m) ))))", "problem": 38, "user": "4f00c74f535dcb61093f6a31"}, {"code": "(fn [& ls] (reduce #(if (> %1 %2) %1 %2) ls))", "problem": 38, "user": "4ef60a02535dced4c769f24b"}, {"code": "(comp last sorted-set)", "problem": 38, "user": "4ec5a5f9535d6d7199dd36ad"}, {"code": "(fn my-max\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] \n    (reduce my-max (my-max x y) more))\n)", "problem": 38, "user": "4ec7c32c535d6d7199dd36e6"}, {"code": "(fn [& args] (reduce #(cond (>=% %2) % :else %2) args))", "problem": 38, "user": "4f01ff83535dcb61093f6a3a"}, {"code": "(fn [& input-sequence]\n    (* -1 (apply min (map #(* -1 %) input-sequence))))", "problem": 38, "user": "4ee9c8d0535d93acb0a66892"}, {"code": "#(first (sort > %&))", "problem": 38, "user": "4f031eac535dcb61093f6a67"}, {"code": "(fn mx \n  ([x] x)\n  ([x & more] (if (> x (apply mx more)) x (apply mx more))))", "problem": 38, "user": "4f030bb4535dcb61093f6a4a"}, {"code": "(fn [x & xs] \n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4ea84f48535d7eef308072f6"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "4f032977535dcb61093f6a6c"}, {"code": "(fn [& args]\n  (loop [coll args\n         m nil]\n    (if (empty? coll)\n      m\n      (recur\n        (rest coll)\n        (if (or (nil? m) (< m (first coll))) \n          (first coll)\n          m)))))", "problem": 38, "user": "4db8f6c4535d1e037afb219e"}, {"code": "(fn [& args]\n  (reduce #(if (> % %2) % %2) args))", "problem": 38, "user": "4ef0eaef535dced4c769f211"}, {"code": "#(reduce (fn [x y] (if (< x y) y x)) %&\n)", "problem": 38, "user": "4f01c938535dcb61093f6a39"}, {"code": "(fn [& coll]\n\t(reduce #(if (> % %2) % %2) coll))", "problem": 38, "user": "4f036d9b535dcb61093f6ac1"}, {"code": "(fn [& x] (reduce (fn [x y] (if (> x y) x y)) 0 x))", "problem": 38, "user": "4f036894535dcb61093f6aad"}, {"code": "(fn [& a] (last (sort a)))", "problem": 38, "user": "4f039a8b535dcb61093f6b36"}, {"code": "(fn [& args] \n  (reduce \n    (fn [a b] (if (< a b) b a))\n  (first args)\n  (rest args)\n  ))", "problem": 38, "user": "4f03ac2d535dcb61093f6b4a"}, {"code": "(fn [& lst] (-> lst sort last))", "problem": 38, "user": "4dadaa5cc9a9d6ed2f99dc57"}, {"code": "(fn mx [x & args]\n  (if (empty? args) x\n      (let [y (apply mx args)]\n        (if (> x y) x y))))", "problem": 38, "user": "4ee82ce9535d93acb0a6687a"}, {"code": "(fn [& s] (reduce (fn [m x] (if (> x m) x m)) s))", "problem": 38, "user": "4f03d0fe535dcb61093f6b6d"}, {"code": "(fn mymax\n  ([x] x)\n  ([x & y] (let [m (apply mymax y)] (if (> x m) x m)))\n)", "problem": 38, "user": "4f03e486535dcb61093f6b78"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "4f0376a5535dcb61093f6add"}, {"code": "(fn [& more] \n  (first (reverse (sort more))))", "problem": 38, "user": "4f03822f535dcb61093f6b03"}, {"code": "(fn [& s]\n  (let [m (fn [x y] (if (> x y) x y))]\n    (reduce m 0 (seq s))))", "problem": 38, "user": "4f041583535dcb61093f6b9b"}, {"code": "(fn [& z] (reduce (fn [x y] (if (> x y) x y)) z))", "problem": 38, "user": "4f04165d535dcb61093f6b9c"}, {"code": "(fn [tester & against]\n  (let [nex-n (if (> tester (first against)) tester (first against))]\n    (if (empty? (rest against))\n      tester\n      (recur nex-n (rest against)))))", "problem": 38, "user": "4f036266535dcb61093f6a95"}, {"code": "(fn [f & r]\n  (loop [m f\n         r r]\n    (if-let [f (first r)]\n      (if (> f m)\n        (recur f (rest r))\n        (recur m (rest r)))\n      m)))", "problem": 38, "user": "4f043ed1535dcb61093f6bb4"}, {"code": "(fn [& more]\r\n  (last (sort more)))", "problem": 38, "user": "4f040bbf535dcb61093f6b95"}, {"code": "(fn [& s] (last (sort s)))", "problem": 38, "user": "4f0397ee535dcb61093f6b30"}, {"code": "(fn [& c] \n  (letfn [(gr [s a]\n    (if (empty? s)\n      a\n      (gr (rest s) (if (> (first s) a) (first s) a))))]\n    (gr c 0)))", "problem": 38, "user": "4f03193e535dcb61093f6a61"}, {"code": "(fn [& l]\n  (if (= 1 (count l))\n    (first l)\n      (loop [maxi (first l) rl (next l)]\n        (if (empty? rl)  maxi\n          (if (> maxi (first rl))\n            (recur maxi (rest rl))\n            (recur (first rl) (rest rl)))))))", "problem": 38, "user": "4f043cb8535dcb61093f6bb3"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4e55b3dc535d8a8b8723a27f"}, {"code": "(fn [& more]\r\n  (let [Max 0]\r\n\t(\t\r\n\t\t(fn getMax [more, Max]\r\n\t\t(if (> (count more) 0) \r\n\t\t\t(if (< (first more) Max)\r\n\t\t\t\t(getMax (rest more) Max)\r\n\t\t\t\t(getMax (rest more) (first more))\r\n\t\t\t)\r\n\t\tMax\r\n\t\t)\r\n\t\t)\r\n\t more Max\r\n\t)\r\n\t)\r\n)", "problem": 38, "user": "4f031883535dcb61093f6a5e"}, {"code": "(fn my-max\n  ([a] a)\n  ([a b] (if (> a b) a b))\n  ([a b & more] (reduce my-max (my-max a b) more)))", "problem": 38, "user": "4e95a440535dbda64a6f6b37"}, {"code": "(fn [& x]\n  (last (sort x)))", "problem": 38, "user": "4f036fad535dcb61093f6ac7"}, {"code": "(fn [& more] (reduce (fn [a b] (if (< a b) b a)) more))", "problem": 38, "user": "4f038017535dcb61093f6afa"}, {"code": "(fn [& args]\n  (last (sort args)))", "problem": 38, "user": "4f0348b4535dcb61093f6a84"}, {"code": "(fn biggest\n  ([x] x)\n  ([x y] (if (> x y) x y ))\n  ([x y & more] (reduce biggest (biggest x y) more)))", "problem": 38, "user": "4f036535535dcb61093f6aa0"}, {"code": "(comp (fn [seq] (reduce #(if (< %1 %2) %2 %1) seq)) list)", "problem": 38, "user": "4f04b66b535dcb61093f6bdd"}, {"code": "(fn  [& x]\n   (loop [maxi (first x) l1 (rest x)]  \n   (if l1\n     (if (> (first l1) maxi)\n         (recur (first l1) (next l1))\n         (recur maxi (next l1)))\n     maxi)))", "problem": 38, "user": "4f04a06d535dcb61093f6bd9"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4ef3f5b0535dced4c769f22f"}, {"code": "(fn [& x] (reduce #(if (> % %2) % %2) x))", "problem": 38, "user": "4f03857e535dcb61093f6b0d"}, {"code": "(fn [arg & args] (last (sort (cons arg args))))", "problem": 38, "user": "4f037d9e535dcb61093f6af2"}, {"code": "(fn mymax [x & etc] (reduce (fn [a b] (if (> a b) a b))\n                            0\n                            (concat (list x) etc)))", "problem": 38, "user": "4f039f14535dcb61093f6b3e"}, {"code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "4f037a34535dcb61093f6ae9"}, {"code": "(fn my-max\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n    (reduce my-max (my-max x y) more)))", "problem": 38, "user": "4f047902535dcb61093f6bcc"}, {"code": "(fn [x & args]\n  (if (empty? args)\n    x\n    (recur (if (>= x (first args)) x (first args)) (rest args))))", "problem": 38, "user": "4f031639535dcb61093f6a59"}, {"code": "(fn [& s] (reduce (fn [a b] (if (>= a b) a b)) s))", "problem": 38, "user": "4f04d011535dcb61093f6be5"}, {"code": "(fn [& coll]\n  (last (sort coll)))", "problem": 38, "user": "4f03860e535dcb61093f6b10"}, {"code": "(fn maxxy\n  [& args]\n    (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4f047c07535dcb61093f6bcd"}, {"code": "(fn [x & ys] \n  (if (empty? ys) \n      x \n      (recur \n        (if (> x (first ys))\n            x \n            (first ys))\n        (rest ys))))", "problem": 38, "user": "4f0514b4535dcb61093f6bf0"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "4f038bcd535dcb61093f6b1d"}, {"code": "(fn [x & more]\n  (last (apply sorted-set (conj more x)))\n)", "problem": 38, "user": "4f00f997535dcb61093f6a34"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "4ec2f1d9535dcc7ae8597d4d"}, {"code": "(fn mx\n  [x & more] (last (sort (flatten (list x more)))))", "problem": 38, "user": "4f041af6535dcb61093f6ba3"}, {"code": "(fn [& x]  (last (sort x)))", "problem": 38, "user": "4f045d0e535dcb61093f6bbc"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "4f045946535dcb61093f6bba"}, {"code": "#(last (sort (first (list %&))))", "problem": 38, "user": "4f038567535dcb61093f6b0c"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "4f05a9cf535dcb61093f6bfc"}, {"code": "(fn [& l]\n  (reduce (fn [p c] (if (> p c) p c)) l))", "problem": 38, "user": "4f039c67535dcb61093f6b3a"}, {"code": "(fn [& args] (reduce (fn [%1 %2] (if (> %1 %2) %1 %2)) args))", "problem": 38, "user": "4f030af7535dcb61093f6a49"}, {"code": "(fn [& rest]\n  (reduce #(if (> %1 %2) %1 %2) rest))", "problem": 38, "user": "4f04f847535dcb61093f6beb"}, {"code": "(fn [& s] (reduce (fn [a b] (if (> a b) a b)) s))", "problem": 38, "user": "4f047dbf535dcb61093f6bce"}, {"code": "(fn [a & args]\n  (reduce (fn [mx x] (if (> x mx) x mx))\n    a args))", "problem": 38, "user": "4f0381db535dcb61093f6b02"}, {"code": "(fn mx ([x y] (if (> x y) x y))\n        ([x y & zs] (if (> x y) (apply mx x zs) (apply mx y zs))))", "problem": 38, "user": "4f036d6e535dcb61093f6ac0"}, {"code": "(fn maxval\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n   (reduce maxval (maxval x y) more)))", "problem": 38, "user": "4f048f67535dcb61093f6bd3"}, {"code": "(fn [& args]\n  (loop [[fst & rst] args\n         mv fst]\n         (if (nil? fst)\n          mv\n          (recur rst (if (> fst mv) fst mv)))))", "problem": 38, "user": "4ee271e2535d10e5ff6f5369"}, {"code": "(fn [& a] (reduce (fn [x y] (if (< x y) y x)) a))", "problem": 38, "user": "4f062d4a535dcb61093f6c08"}, {"code": "#(-> %& sort last)", "problem": 38, "user": "4f047542535dcb61093f6bc7"}, {"code": "(fn my-max [& args]\n  (loop [m (first args) args args]\n    (if (empty? args)\n        m\n        (recur (if (> (first args) m) (first args) m) (rest args)))))", "problem": 38, "user": "4f03ebf7535dcb61093f6b7f"}, {"code": "(fn [& s]\n  (loop [s_ s mx nil]\n    (if-not s_\n      mx\n      (recur\n        (next s_)\n        (let [a (first s_)]\n          (if (or (not mx) (> a mx))\n            a\n            mx))))))", "problem": 38, "user": "4f050dec535dcb61093f6bef"}, {"code": "(fn [& l]\n  (reduce (fn [a b]\n            (if (> a b)\n               a\n               b))\n          l))", "problem": 38, "user": "4f066c90535dcb61093f6c11"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4f0388e8535dcb61093f6b17"}, {"code": "(fn mymax [& args]\n  (if (= (first args) nil)\n    nil\n    (let [restmax (apply mymax (rest args))]\n      (cond\n        (= restmax nil)\n          (first args)\n        (< restmax (first args))\n          (first args)\n        :else\n          restmax))))", "problem": 38, "user": "4f03d4dc535dcb61093f6b6e"}, {"code": "(fn [& inList] \r\n  (letfn [(helper [aList curMax]\r\n    (if (empty? aList)\r\n      curMax\r\n      (if (> (first aList) curMax)\r\n        (helper (rest aList) (first aList))\r\n        (helper (rest aList) curMax))))]\r\n  (helper inList -10)))", "problem": 38, "user": "4f0365fc535dcb61093f6aa4"}, {"code": "(let [m #(if (= '() %1)\n           %2 \n           (if (> (first %1) %2)\n             (recur (rest %1) (first %1))\n             (recur (rest %1) %2)))]\n  (fn [& x] (m x 0)))", "problem": 38, "user": "4f039bbe535dcb61093f6b39"}, {"code": "(comp last sort list)", "problem": 38, "user": "4f0664bd535dcb61093f6c0f"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4f052eaf535dcb61093f6bf3"}, {"code": "(fn [& rest] (reduce (fn [a b] (if (> a b) a b)) rest))", "problem": 38, "user": "4dd5e2cc535dae65d5c462ec"}, {"code": "(fn mymax [& ls]\r\n    (loop [l ls curmax 0]\r\n       (if (empty? l)\r\n         curmax\r\n         (if (> (first l) curmax)\r\n           (recur (rest l) (first l))\r\n           (recur (rest l) curmax)))))", "problem": 38, "user": "4f039524535dcb61093f6b2c"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "4f07056c535dcb61093f6c1d"}, {"code": "(fn [& in-seq] (last (sort in-seq)))", "problem": 38, "user": "4ef4ab95535dced4c769f23b"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4f083048535dcb61093f6c33"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4f0660ee535dcb61093f6c0d"}, {"code": "(fn [& tail]\n  \n   (reduce\n     (fn [a b]\n       (if (> a b) a b)\n     )\n    tail)\n)", "problem": 38, "user": "4f03154a535dcb61093f6a58"}, {"code": "(fn [& r] (last(sort r)))", "problem": 38, "user": "4f082ad1535dcb61093f6c32"}, {"code": "(fn [& xs]\n  (loop [m -1\n         xs xs]\n      (if (not (seq xs))\n        m\n        (let [x (first xs)]\n          (if (> x m)\n            (recur x (rest xs))\n            (recur m (rest xs)))))))", "problem": 38, "user": "4dc1e1e4535d020aff1edf90"}, {"code": "(fn [x & more]\n  (cond (empty? more) x\n    (< x (first more)) (recur (first more) (rest more))\n    :else (recur x (rest more))))", "problem": 38, "user": "4f038499535dcb61093f6b09"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "4f03688d535dcb61093f6aac"}, {"code": "(fn this\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n   (reduce this (this x y) more)))", "problem": 38, "user": "4e84bb7e535db62dc21a62e3"}, {"code": "(fn [& args] \n  (reduce\n    #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4f036c4b535dcb61093f6ab9"}, {"code": "#(reduce (fn [x y] (if (> x y) x y)) %&)", "problem": 38, "user": "4f0891a2535dcb61093f6c3b"}, {"code": "(fn [& vs] (reduce #(if (> %1 %2) %1 %2) 0 vs))", "problem": 38, "user": "4f06dcad535dcb61093f6c16"}, {"code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)  )args))", "problem": 38, "user": "4f00e9c7535dcb61093f6a33"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4f03396d535dcb61093f6a7b"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4f08b15b535dcb61093f6c40"}, {"code": "(fn[a & b](if(> a(first b))a(first b)))", "problem": 38, "user": "4f0378cc535dcb61093f6ae0"}, {"code": "(fn mymax[& tl] (reduce (fn [m i] (if (> m i) m i)) tl))", "problem": 38, "user": "4f03bd9d535dcb61093f6b5b"}, {"code": "(fn [f & r] (loop [mx f lst r]\n  (if (empty? lst) mx\n    (recur\n      (if (> (first lst) mx) (first lst) mx)\n      (rest lst)))))", "problem": 38, "user": "4f0a5653535d0136e6c222f5"}, {"code": "(fn [x & xs]\n  (loop [m x xs xs]\n    (if (empty? xs) m\n        (recur (if (> (first xs) m) (first xs) m) (rest xs)))))", "problem": 38, "user": "4e7e3cc4535db169f9c7970a"}, {"code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) s))", "problem": 38, "user": "4f0a4e7e535d0136e6c222f4"}, {"code": "(fn [& seq] (reduce #(if (> %1 %2) %1 %2) seq))", "problem": 38, "user": "4f017b4e535dcb61093f6a37"}, {"code": "(fn [& x] \n  (reduce (fn [y z] \n            (if (> y z)\n              y\n              z)) \n          x))", "problem": 38, "user": "4eaa5c51535d7eef3080730a"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) (first args) (rest args)))", "problem": 38, "user": "4f0b2028535d0136e6c222ff"}, {"code": "(fn [& nums]\n  (loop [mx (first nums) lst (rest nums)]\n  (if (empty? lst)\n    mx\n    (if (> (first lst) mx)\n      (recur (first lst) (rest lst))\n      (recur mx (rest lst))))))", "problem": 38, "user": "4edb314d535d10e5ff6f5317"}, {"code": "(fn [& args]\n  (first (apply sorted-set-by > args)))", "problem": 38, "user": "4f0554aa535dcb61093f6bf5"}, {"code": "(fn mx \n  ([m] m) \n  ([m n] \n    (if (> m n) m n)) \n  ([m n & more] \n    (reduce mx (mx m n) more)))", "problem": 38, "user": "4f037bb5535dcb61093f6aec"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "4f032f30535dcb61093f6a73"}, {"code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "problem": 38, "user": "4f070ce6535dcb61093f6c1e"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "4f0318e6535dcb61093f6a5f"}, {"code": "(fn [x & xs] (reduce (fn [a b] (if (> a b) a b)) (cons x xs)))", "problem": 38, "user": "4f067029535dcb61093f6c12"}, {"code": "(fn myMax \n    ([x y]\n        (if (> x y) x y))\n    ([x y & z]\n        (if (> (myMax x y) (last (sort z))) (myMax x y) (last (sort z)))))", "problem": 38, "user": "4f03b3fb535dcb61093f6b52"}, {"code": "(fn [& d]\n  (loop [m 0\n         l d]\n    (if (empty? l)\n      m\n    (recur (if (> (first l) m)\n               (first l)\n               m)\n           (rest l)))))", "problem": 38, "user": "4f0333f6535dcb61093f6a77"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4ee67364535d93acb0a6685f"}, {"code": "#(reduce (fn [x y] (if (> x y) x y)) %&)", "problem": 38, "user": "4f0c4518535d0136e6c2230b"}, {"code": "(fn [x & y]\n  (reduce #(if (> %1 %2) %1 %2) x y))", "problem": 38, "user": "4ee259a1535d10e5ff6f5366"}, {"code": "(fn my-max [& coll]\n  (reduce (fn [lhs rhs] (if (> lhs rhs) lhs rhs)) coll))", "problem": 38, "user": "4f07bc41535dcb61093f6c2c"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "4f089f1a535dcb61093f6c3c"}, {"code": "(fn [& a]\n                (loop [m 0 l a]\n                        (if (= (count l) 0)\n                                m\n                                (let [c (first l) r (rest l)]\n                                        (recur  \n                                                (if (> c m) c m)\n                                                r\n                                        )\n                                )\n                        )\n                )\n        )", "problem": 38, "user": "4eeb2b3c535d93acb0a668a7"}, {"code": "(comp last sort list)", "problem": 38, "user": "4f085a31535dcb61093f6c35"}, {"code": "(fn maximum [frst & remaining] \n  (reduce \n    (fn [one two] \n      (if (< one two) \n        two \n        one)\n    ) frst remaining))", "problem": 38, "user": "4f0a2ed1535d0136e6c222f3"}, {"code": "#(loop [m %1 l %&]\n  (if (= () l) m\n    (let [f (first l)]\n      (recur \n        (if (< m f) f m)\n        (rest l)))))", "problem": 38, "user": "4f0ce26c535d0136e6c22312"}, {"code": "(fn [& y] (first(sort > y)))", "problem": 38, "user": "4f073003535dcb61093f6c22"}, {"code": "(fn [& args]\n  (loop [m (first args) r (rest args)]\n    (if (empty? r)\n      m\n      (recur \n        (if (< m (first r)) (first r) m)\n        (rest r)))))", "problem": 38, "user": "4f0ddc4c535d0136e6c2231b"}, {"code": "(fn [ff & in] (last (sort (conj in ff))))", "problem": 38, "user": "4ee7d113535d93acb0a6686e"}, {"code": "(fn [& args] \n  (reduce #(if (> % %2) % %2) \n          Integer/MIN_VALUE args))", "problem": 38, "user": "4efec33f535dcb61093f6a2a"}, {"code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "problem": 38, "user": "4f0ef874535d0136e6c22328"}, {"code": "(fn this\n     ([] nil)\n     ([x] x)\n\t   ([x y] (if (> x y) x y))\n\t   ([x y & more] (apply this (this x y) more)))", "problem": 38, "user": "4f066916535dcb61093f6c10"}, {"code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4ec1b80c535dfed6da9c6db6"}, {"code": "(fn impl ([x] x) ([x y] (if (< x y) y x)) ([x y & more] (reduce impl(impl x y) more)))", "problem": 38, "user": "4ef0b523535dced4c769f20e"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "4f0446f9535dcb61093f6bb8"}, {"code": "(fn m [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4f0f174c535d0136e6c22330"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "4ed845a8535d10e5ff6f52f8"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4ebcb8ff535dfed6da9c6d8a"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4f10175e535d64f603146411"}, {"code": "(fn [& args] \n  (reduce \n    #(if (> % %2) % %2)\n    args))", "problem": 38, "user": "4f1052b9535d64f603146418"}, {"code": "(fn [& l] (reduce #(if (> %1 %2) %1 %2) 0 l))", "problem": 38, "user": "4eb298c1535d7eef3080734b"}, {"code": "(fn [head & tail]\n  (loop [h head\n         t tail]\n    (if (nil? (first t))\n      h\n      (let [fst (first t)\n            tmp-max (if (> h fst) h fst)]\n        (recur tmp-max (rest t))))))", "problem": 38, "user": "4f08a8a2535dcb61093f6c3d"}, {"code": "(fn [& vs] \n  (reduce (fn [m v] \n    (if (> v m) v m)) vs))", "problem": 38, "user": "4f0f36a7535d0136e6c22336"}, {"code": "(fn f [& others] (reduce (fn [x y] (if (> x y) x y)) others))", "problem": 38, "user": "4f0cc259535d0136e6c22310"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4f0e995e535d0136e6c22326"}, {"code": "(fn mmx [ & xs]\n    (loop [mx (first xs) lst xs]\n        (cond (empty? lst)\n                    mx\n            (> mx (first lst)) \n                (recur mx (rest lst))\n           :else\n                (recur (first lst) (rest lst))    \n        )\n   )\n)", "problem": 38, "user": "4f0df199535d0136e6c2231e"}, {"code": "#(-> %& sort last)", "problem": 38, "user": "4f128865535d64f603146428"}, {"code": "(fn mx [& args]\r\n  (let [max2 (fn [a b] (if (> a b) a b))]\r\n    (reduce max2 0 args)))", "problem": 38, "user": "4f13047d535d64f60314642c"}, {"code": "(fn my-max [& numbers]\n  (reduce #(if (< %1 %2) %2 %1) numbers))", "problem": 38, "user": "4f0f40d3535d0136e6c2233b"}, {"code": "(fn [& nums]\n  (loop [biggest (first nums) nums2 (rest nums)]\n    (cond\n      (= 0 (count nums2)) biggest\n      (> (first nums2) biggest) (recur (first nums2) (rest nums2))\n      (<= (first nums2) biggest) (recur biggest (rest nums2)))))", "problem": 38, "user": "4f12ab23535d64f603146429"}, {"code": "(fn [& x] (reduce #(if(> %1 %2) %1 %2) x))", "problem": 38, "user": "4f03bf5e535dcb61093f6b5d"}, {"code": "(fn [& c]\n  (reduce #(if (< % %2) %2 %) c))", "problem": 38, "user": "4ede361a535d10e5ff6f5332"}, {"code": "(fn max-value [& args]\n    (reduce (fn [x,y] (if (> x y) x y)) args))", "problem": 38, "user": "4f0f03ce535d0136e6c2232a"}, {"code": "(fn [ & xs] (reduce (fn [x y] (if (> x y) x y)) xs))", "problem": 38, "user": "4f141dee535d64f603146434"}, {"code": "(fn [& xs]\n  (last (sort xs)))", "problem": 38, "user": "4f1473eb535d64f603146439"}, {"code": "(fn this \n ([x] x)\n ([x y] (if (> x y) x y))\n ([x y & more]\n   (reduce this (this x y) more)))", "problem": 38, "user": "4f104e1e535d64f603146417"}, {"code": "(fn [& args]\r\n    (-> args sort last))", "problem": 38, "user": "4f149e0f535d64f60314643d"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4f14fbec535d64f603146440"}, {"code": "(fn find-max [& numbers]\n  (loop [accu 0 n numbers]\n    (let [[x & xs] n]\n      (cond\n        (number? x)\n          (if (> x accu)\n            (recur x (rest n))\n            (recur accu (rest n)))\n        :else\n          accu))))", "problem": 38, "user": "4e75edfe535d7a570dd295c7"}, {"code": "(fn [& z] (reduce (fn [x y] (if (> x y) x y)) z))", "problem": 38, "user": "4efccd24535de96065cf5080"}, {"code": "(fn\n[x & ys]\n(reduce #(if (> % %2) % %2) x ys))", "problem": 38, "user": "4e7dc2ab535db169f9c796e5"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4e1fe7f1535d04ed9115e810"}, {"code": "(fn [& xs] (reduce #(if (> % %2) % %2) xs))", "problem": 38, "user": "4f0f9df7535d0136e6c22342"}, {"code": "(fn [x & xs]\n  (reduce #(if (> %1 %2) %1 %2) x xs))", "problem": 38, "user": "4dadba4dc9a9d6ed3899dc57"}, {"code": "(fn [& i] (reduce (fn [v r] (if (> v r) v r)) i))", "problem": 38, "user": "4f0e4ebd535d0136e6c22322"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "4f16ef8a535d64f603146451"}, {"code": "(fn [& a] (reduce #(if (> %2 %1) %2 %1) a))", "problem": 38, "user": "4f1595da535d64f603146444"}, {"code": "(fn [x & more]\n  (if (empty? more) x\n    (let [t (first more) r (rest more)]\n       (recur (if (> t x) t x) r))))", "problem": 38, "user": "4f16d3fd535d64f60314644e"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4e6961f0535d8ccf87e9fe9b"}, {"code": "(fn [x & y]\n  (reduce #(if (< %1 %2)%2 %1)x y))", "problem": 38, "user": "4f11b078535d64f603146422"}, {"code": "(fn [& items] (reduce (fn [x y] (if (> x y) x y)) items))", "problem": 38, "user": "4ed8715c535d10e5ff6f52f9"}, {"code": "(fn [& x] (reduce #(if (> % %2) % %2) x))", "problem": 38, "user": "4f0c84ce535d0136e6c2230e"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4e6b6294535d8ccf87e9ff11"}, {"code": "(fn my-max \n  ([x] x)\n  ([x y]\n    (if (> x y) x y))\n  ([x y & more]\n    (loop [coll (conj (conj more x) y), val x]\n      (if (empty? coll)\n        val\n        (if (> (first coll) val)\n          (recur (rest coll) (first coll))\n          (recur (rest coll) val))))))", "problem": 38, "user": "4f159ea6535d64f603146445"}, {"code": "(fn [& items] (reduce (fn [x y] (if (> x y) x y)) items))", "problem": 38, "user": "4ee4ad77535d1385b2869d81"}, {"code": "( fn [ x & xs ] ( reduce #( if (> %1 %2) %1 %2 ) x xs ))", "problem": 38, "user": "4f030775535dcb61093f6a43"}, {"code": "(fn !\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n    (reduce ! (! x y) more)))", "problem": 38, "user": "4e7d1c22535db169f9c796c5"}, {"code": "(fn my-max\n  ([x] x)\n  ([x y]\n    (if (> x y)\n      x\n      y))\n   ([x y & more]\n     (reduce my-max (my-max x y) more)))", "problem": 38, "user": "4f04d312535dcb61093f6be7"}, {"code": "(fn [& data]\n  ((fn myMax [data result]\n    (if (nil? (first data))\n      result\n      (myMax\n        (rest data)\n        (if (> (first data) result)\n          (first data)\n          result\n        )\n      )\n    )\n  ) data (first data))\n)", "problem": 38, "user": "4f16d6ed535d64f60314644f"}, {"code": "(fn [& args] (reduce (fn [x1 x2] (if (> x1 x2) x1 x2)) args))", "problem": 38, "user": "4e48b61d535dc968683fc4be"}, {"code": "(fn [& l] (reduce #(if (< %1 %2) %2 %1) (first l) (rest l)))", "problem": 38, "user": "4f1b0ab3535d64f603146474"}, {"code": "(fn [& args]\n  (first (reverse (sort args))))", "problem": 38, "user": "4f0e0aee535d0136e6c22320"}, {"code": "(comp last sort list)", "problem": 38, "user": "4f1b92d1535d64f60314647b"}, {"code": "(fn [& n]\n  (reduce #(if (> %1 %2) %1 %2) n))", "problem": 38, "user": "4f0d093b535d0136e6c22313"}, {"code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4e8ccd16535d65386fec212e"}, {"code": "(fn f [& s]\n  (loop [s s m 0]\n\t   (if (empty? s) m\n\t       (if (< m (first s)) (recur (rest s) (first s)) (recur (rest s) m)))))", "problem": 38, "user": "4f16213f535d64f603146449"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4ed768b5535d10e5ff6f52ef"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4ed90014535d10e5ff6f52fe"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4f1c9652535d64f603146483"}, {"code": "(fn [& x]\n  (reduce (fn [a b] (if (> a b) a b) ) x) )", "problem": 38, "user": "4ea0a7c7535d7eef308072ab"}, {"code": "(fn [& args] (- (apply min (map - args))))", "problem": 38, "user": "4f2004a1535d64f6031464a7"}, {"code": "(fn ([& word] (reduce (fn ([x] x) ([] nil) ([x y] (if (> x y) x y))) word)))", "problem": 38, "user": "4ed30b56535d44c135fd68ea"}, {"code": "(fn [& elems] (reduce #(if (>= %1 %2) %1 %2) elems))", "problem": 38, "user": "4f169a0f535d64f60314644c"}, {"code": "(fn m\n  ([x y] (if (> x y) x y)) \n  ([x y & more] \n    (apply m (m x y) more)))", "problem": 38, "user": "4f1fd734535d64f6031464a5"}, {"code": "(fn [& many]\n                      (loop [maxval 0 args many]\n                        (if (empty? args)\n                          maxval\n                        (recur (if (< maxval (first args)) (first args) maxval) (rest args)))\n                    ))", "problem": 38, "user": "4ea31da2535d7eef308072c1"}, {"code": "(fn maxx [& xs]\n  (last (sort xs)))", "problem": 38, "user": "4f17df72535d64f603146458"}, {"code": "; (fn [x & xs]\n;  (first (sort > (conj xs x))))\n(fn [x & xs]\n  (reduce #(if (> %1 %2) %1 %2) x xs))", "problem": 38, "user": "4f1c2a3a535d64f603146480"}, {"code": "(fn maximum-value-solution\n  ([& r]\n     (reduce #(if (> %2 %1) %2 %1) r)))", "problem": 38, "user": "4ec3650f535dcc7ae8597d56"}, {"code": "(fn mk\r\n  [& coll]\r\n  (reduce #(if (< %1 %2) %2 %1) coll))", "problem": 38, "user": "4f17ab99535d64f603146457"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4efd8b67535de96065cf5085"}, {"code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) more))", "problem": 38, "user": "4eea4d84535d93acb0a6689c"}, {"code": "(fn a [& x] (last (sort x)))", "problem": 38, "user": "4f14880f535d64f60314643b"}, {"code": "(fn [x & xs] (reduce #(if (> %1 %2) %1 %2) x xs))", "problem": 38, "user": "4f246938e4b0d66497709fec"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4f215350e4b0d66497709fd0"}, {"code": "(fn [& s]\r\n   (let [m (apply sorted-set s)]\r\n     (last m)))", "problem": 38, "user": "4f1d6fbb535d64f60314648c"}, {"code": "(fn f\r\n  ([x y] (if (> x y) x y))\r\n  ([x y & r]  (reduce f (f x y) r))\r\n  )", "problem": 38, "user": "4f245d77e4b0d66497709feb"}, {"code": "(fn [& c]\n  (loop [l c\n         e 0]\n    (cond\n      (empty? l) e\n      (> (first l) e) (recur (rest l) (first l))\n      :else (recur (rest l) e))))", "problem": 38, "user": "4f230dfbe4b0d66497709fe0"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "4eb02674535d7eef30807338"}, {"code": "(fn [& s]\n  ((comp last sort) s))", "problem": 38, "user": "4f24b023e4b0d66497709fee"}, {"code": "(fn [& x]\n  (reduce #(if (> %1 %2) %1 %2)\n  x))", "problem": 38, "user": "4f1abbfb535d64f60314646e"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4f251302e4b0d66497709ff0"}, {"code": "(fn f [& xs] (reduce #(if (> %2 %) %2 %) xs))", "problem": 38, "user": "4e4ea0f6535dc968683fc4e6"}, {"code": "(fn [& lst]\n  (last (sort lst)))", "problem": 38, "user": "4f032cb1535dcb61093f6a70"}, {"code": "(fn maxVal [mxV & coll]\n  (if (not (nil? (first coll)))\n      (if (> (first coll) mxV)\n          (apply maxVal coll)\n          (apply maxVal (cons mxV (rest coll))))\n      mxV))", "problem": 38, "user": "4f19b55b535d64f603146469"}, {"code": "(fn [& xs] (reduce #(if (>= %1 %2) %1 %2) xs))", "problem": 38, "user": "4f27dd9ce4b0d6649770a00e"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4f26c487e4b0d6649770a006"}, {"code": "(fn mymax [& numbs] (reduce #(if (< %1 %2) %2 %1) numbs))", "problem": 38, "user": "4f05c087535dcb61093f6c00"}, {"code": "(fn [& l] (last (sort l)))", "problem": 38, "user": "4f253a49e4b0d66497709ff3"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4f07c8c3535dcb61093f6c2d"}, {"code": "(fn [x & y]\r\n(reduce #(if (> %1 %2) %1 %2)  x y))", "problem": 38, "user": "4f28d266e4b0d6649770a01c"}, {"code": "(fn [& xs] (reduce (fn [x y] (if (> x y) x y)) xs))", "problem": 38, "user": "4dc1bd76535d020aff1edf8d"}, {"code": "#(last (into (sorted-set) %&))", "problem": 38, "user": "4e8ad247535d65386fec2111"}, {"code": "(fn [& s] (reduce #(if (> %2 %1) %2 %1) s))", "problem": 38, "user": "4f294c48e4b0d6649770a023"}, {"code": "(fn [x & m] (last (sort (conj m x))))", "problem": 38, "user": "4f26d6d9e4b0d6649770a007"}, {"code": "(fn [& coll] \n  (reduce (fn [m i] (if (> m i) m i))\n      0 coll))", "problem": 38, "user": "4f1d1299535d64f603146487"}, {"code": "(fn maxi [x & xs] \n  (if  (empty? xs) x \n    (if (< (apply maxi xs) x) x (apply maxi xs))\n  )\n)", "problem": 38, "user": "4f2a6169e4b0d6649770a03d"}, {"code": "(fn [& xs] (reduce (fn [a b] (if (> a b) a b)) 0 xs))", "problem": 38, "user": "4f05adae535dcb61093f6bfd"}, {"code": "(fn [& params] (reduce #(if (> %1 %2) %1 %2) params))", "problem": 38, "user": "4f280840e4b0d6649770a010"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2 ) 0 args))", "problem": 38, "user": "4f2965ffe4b0d6649770a029"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4f21838fe4b0d66497709fd2"}, {"code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) more))", "problem": 38, "user": "4f2b2c13e4b0d6649770a048"}, {"code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) more))", "problem": 38, "user": "4f29cdc8e4b0d6649770a033"}, {"code": "(fn [& all] (last (sort all)))", "problem": 38, "user": "4f2a35ace4b0d6649770a03a"}, {"code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "4f2893d0e4b0d6649770a019"}, {"code": "(fn [& more] (reduce #(if (> %2 %1) %2 %1) more))", "problem": 38, "user": "4f18677d535d64f603146459"}, {"code": "(fn [& coll]\n  (first (reverse (sort (seq coll)))))", "problem": 38, "user": "4f2a7174e4b0d6649770a03e"}, {"code": "(comp last sort vector)", "problem": 38, "user": "4e5ba560535d8a8b8723a2b7"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4f2c593ee4b0d6649770a053"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4e79f28b535db169f9c796a8"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "4f2d5f5de4b0d6649770a05a"}, {"code": "(fn [x & xs]\r\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4ee5f2fe535d93acb0a66852"}, {"code": "(fn [& lst]\n  (reduce\n    (fn [x y] (if (>= x y) x y))\n    lst))", "problem": 38, "user": "4ea63794535d7eef308072e3"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4f2bb2f8e4b0d6649770a04d"}, {"code": "(fn [& c] (reduce #(if (> % %2) % %2) c))", "problem": 38, "user": "4f1d1d95535d64f603146488"}, {"code": "(fn[& more](first (reverse (sort (vec more)))))", "problem": 38, "user": "4f2046b7535d64f6031464ab"}, {"code": "(fn [& a] (reduce (fn [x y] (if (> x y) x y)) a))", "problem": 38, "user": "4f2ca22fe4b0d6649770a054"}, {"code": "#(first (sort > %&))", "problem": 38, "user": "4eb41884535d7eef3080735d"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "4f0f01c0535d0136e6c22329"}, {"code": "(fn [& more]\n  (reduce (fn [x e] (if (> x e) x e)) 0 more))", "problem": 38, "user": "4f2f6678e4b0d6649770a06e"}, {"code": "(fn foo [& xs]\n    (reduce #(if (< %1 %2) %2 %1) xs))", "problem": 38, "user": "4f2ef48be4b0d6649770a06c"}, {"code": "(fn [x & r] \n  (reduce #(if (> %1 %2) %1 %2) x r))", "problem": 38, "user": "4f2fa32ce4b0d6649770a070"}, {"code": "(fn [& num] (reduce (fn [x y] (if (> x y) x y)) (seq num)))", "problem": 38, "user": "4f2aff4de4b0d6649770a044"}, {"code": "(fn [x & xs]\n  (if (empty? xs)\n    x\n    (if (> x (first xs))\n      (recur x (rest xs))\n      (recur (first xs) (rest xs)))))", "problem": 38, "user": "4f2e0369e4b0d6649770a064"}, {"code": "(fn [& xs]\n  (reduce #(if (>= %1 %2) %1 %2) xs))", "problem": 38, "user": "4f28c979e4b0d6649770a01a"}, {"code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) Long/MIN_VALUE s))", "problem": 38, "user": "4f301d02e4b0d6649770a072"}, {"code": "(fn [& numbers]\n  (first (sort > numbers)))", "problem": 38, "user": "4dd7c1da535d2dad7130b5d4"}, {"code": "(fn ([x] x)\n  ([x & more]\n     (loop [m x lst more]\n       (cond\n        (= '() lst) m\n        (> (first lst) m) (recur (first lst) (rest lst))\n        :else (recur m (rest lst))\n        )))\n  )", "problem": 38, "user": "4f192b29535d64f603146464"}, {"code": "(fn f [a & x] (if (empty? x) a (let [r (apply f x)] (if (> a r) a r))))", "problem": 38, "user": "4f2de7e9e4b0d6649770a061"}, {"code": "(fn mx [& args]\n  (if (empty? (rest args))\n    (first args)\n    (let [x (first args)\n          m (apply mx (rest args))]\n          (if (> x m) x m))))", "problem": 38, "user": "4f0364d5535dcb61093f6a9e"}, {"code": "(fn [& x] \n  (reduce (fn [reduced item] \n    (if (> item reduced) \n      item\n      reduced))\n      0 x))", "problem": 38, "user": "4f31519ae4b0d6649770a086"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4db85282535d1e037afb218a"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "4ee1f2ba535d10e5ff6f535f"}, {"code": "(fn [& l] (reduce #(if (> %1 %2) %1 %2) l))", "problem": 38, "user": "4f32a7f1e4b0d6649770a095"}, {"code": "(fn [& numbers] (last (sort numbers)))", "problem": 38, "user": "4f329974e4b0d6649770a093"}, {"code": "(fn [& pars]\n  (last (sort pars)))", "problem": 38, "user": "4f043bbd535dcb61093f6bb2"}, {"code": "(fn [& more] (first(sort > more)))", "problem": 38, "user": "4f33a668e4b0d6649770a09d"}, {"code": "(fn [& s]\n  (loop [m (first s)\n         r (rest s)]\n    (if (empty? r)\n      m\n      (let [x (first r)]\n        (recur (if (> x m) x m)\n               (rest r))))))", "problem": 38, "user": "4f2b0951e4b0d6649770a045"}, {"code": "(fn [& ns] (reduce #(if (> %2 %1) %2 %1) ns))", "problem": 38, "user": "4f036d18535dcb61093f6abe"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "4eb9353f535dfed6da9c6d4e"}, {"code": "(fn [& nums] (reduce (fn [x y] (if (> x y) x y)) 0 nums))", "problem": 38, "user": "4ea84250535d7eef308072f5"}, {"code": "(fn mymax\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] (reduce mymax (mymax x y) more)))", "problem": 38, "user": "4f3444b7e4b0e243712b1eb6"}, {"code": "(fn [& args] \n  (reduce (fn [x y] (if (> x y) x y)) args)\n)", "problem": 38, "user": "4f2582bae4b0d66497709ff6"}, {"code": "#(reduce \n  (fn [a b] (if (> a b) a b)) \n  (seq %&)\n)", "problem": 38, "user": "4f31ad57e4b0d6649770a089"}, {"code": "(fn [& args] (reduce #(if (< %2 %1) %1 %2) args))", "problem": 38, "user": "4f341320e4b0e243712b1eb4"}, {"code": "(fn [ & x ] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "4f307b02e4b0d6649770a079"}, {"code": "(fn [& x] (* -1 (apply min (map #(* -1 %) x))))", "problem": 38, "user": "4f34eb87e4b0e243712b1eba"}, {"code": "(fn [ & values] (reduce (fn [x y] (if (> x y) x y)) values))", "problem": 38, "user": "4ef48422535dced4c769f236"}, {"code": "(fn [x & y] (first (sort > (conj y x))))", "problem": 38, "user": "4f343e60e4b0e243712b1eb5"}, {"code": "(fn [x & xs] (last (sort (conj xs x))))", "problem": 38, "user": "4f378631e4b0e243712b1ed3"}, {"code": "(fn [ & args ] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4e7ecbf0535db966e863cc37"}, {"code": "(fn [f & nex]\r\n     (let [l (cons f nex)]\r\n       (reduce #(if (> %1 %2) %1 %2) l)))", "problem": 38, "user": "4f359c7ee4b0e243712b1ec4"}, {"code": "(fn [& list]\n (reduce #(if (> %2 %) %2 %) (first list) (rest list)))", "problem": 38, "user": "4f36f005e4b0e243712b1ecd"}, {"code": "#(last(sort %&))", "problem": 38, "user": "4f35e662e4b0e243712b1ec6"}, {"code": "(fn [& xs] (last (sort xs)))", "problem": 38, "user": "4f339c04e4b0d6649770a09c"}, {"code": "(fn f\n([x y] (if (> y x) y x))\n([x y & z] (reduce f (f x y) z)))", "problem": 38, "user": "4f312c35e4b0d6649770a084"}, {"code": "(fn [& x] (first (sort > x)))", "problem": 38, "user": "4f384abde4b0e243712b1eda"}, {"code": "(fn max-value2 [& args]\n     ((fn max-value2-helper [lst cur-max]\n          (if (empty? lst)\n            cur-max\n            (if (> (first lst) cur-max)\n              (recur (rest lst) (first lst))\n              (recur (rest lst) cur-max)))) (rest args) (first args)))", "problem": 38, "user": "4f06f953535dcb61093f6c1c"}, {"code": "(fn [& t] (reduce #(if (> % %2) % %2) t))", "problem": 38, "user": "4f2c2ccbe4b0d6649770a050"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4f38b7d9e4b0e243712b1ee0"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4f39f902e4b0e243712b1efe"}, {"code": "(fn imax [x & args]\n          (let [a (flatten args)]\n            (if (empty? a)\n              x\n              (let [c (first a)]\n                (if (> x c)\n                  (imax x (rest a))\n                  (imax c (rest a)))))))", "problem": 38, "user": "4f1bee08535d64f60314647e"}, {"code": "(fn [& s] (last (sort s)))", "problem": 38, "user": "4f29eb2ae4b0d6649770a037"}, {"code": "(fn [x & y]\n  (last (sort compare (cons x y))))", "problem": 38, "user": "4f38d6bbe4b0e243712b1ee2"}, {"code": "(fn [& x] (reduce \n           #(if (> %1 %2) %1 %2)\n            x))", "problem": 38, "user": "4f36f5f2e4b0e243712b1ece"}, {"code": "(fn [& more] (last (sort more)))", "problem": 38, "user": "4f15de56535d64f603146448"}, {"code": "(fn [& x]\n  (reduce #(if (> %1 %2) %1 %2) (vec x)))", "problem": 38, "user": "4f3ad7f0e4b0e243712b1f1d"}, {"code": "(fn my-max\n    ([x] x)\n    ([x y] (if (> x y) x y))\n    ([x y & more]\n      (apply my-max (my-max x y) more)))", "problem": 38, "user": "4f03818e535dcb61093f6b00"}, {"code": "#(-> %& sort last)", "problem": 38, "user": "4f3cc2fbe4b0e243712b1f55"}, {"code": "(fn this\n  ([x y]\n    (if (> x y) x y))\n  ([x y & more]\n    (apply this (this x y) more)))", "problem": 38, "user": "4f3ca5a6e4b0e243712b1f53"}, {"code": "(fn [a & list]\n  (comment could be a one liner)\n  (loop [m a\n         list list]\n    (let [head (first list)\n          tail (rest list)]\n      (if head\n        (recur (if (> m head) m head) tail)\n        m))))", "problem": 38, "user": "4ebaf790535dfed6da9c6d6e"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "4ddbf54e535d02782fcbe9ff"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4e68d816535d8ccf87e9fe8e"}, {"code": "(fn [fst & rst]\n  (loop [x fst xs rst maximum fst]\n    (cond\n      (empty? xs) maximum\n      (< maximum x) (recur (first xs) (rest xs) x)\n      :else (recur (first xs) (rest xs) maximum))))", "problem": 38, "user": "4f3d83b5e4b0e243712b1f69"}, {"code": "(fn [& xs]\n   (loop [xs xs r (first xs)]\n     (if (seq xs)\n       (let [x (first xs)]\n         (if (> x r)\n           (recur (rest xs) x)\n           (recur (rest xs) r)))\n       r)))", "problem": 38, "user": "4e53b3a4535d8a8b8723a273"}, {"code": "(fn [ & x ] (last (sort x)))", "problem": 38, "user": "4ec56b5b535d6d7199dd369f"}, {"code": "(fn foo\n  [ & xargs ]\n  (reduce #(if (> % %2) % %2) xargs))", "problem": 38, "user": "4f387c2ee4b0e243712b1edd"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4f0f3725535d0136e6c22337"}, {"code": "(fn [& x]\n    (\n      (fn [x m]\n          (if (empty? x)\n              m\n              (recur (rest x)\n                     (if (> (first x) m)\n                          (first x)\n                          m))))\n      x (first x)))", "problem": 38, "user": "4f404dcee4b0e243712b1fb0"}, {"code": "(fn [& nums] \n  (last (sort nums)))", "problem": 38, "user": "4e155d5b535d04ed9115e7e3"}, {"code": "(fn [& x] (nth x (rand-int 4)))", "problem": 38, "user": "4ec1e953535dfed6da9c6db8"}, {"code": "(fn [& coll]\n  (reduce (fn [x y] (if (> x y) x y)) coll))", "problem": 38, "user": "4f107e0e535d64f60314641c"}, {"code": "(fn mx \n  ([v1] v1)\n  ([v1 v2] (cond (> v1 v2) v1 :else v2))\n  ([v1 v2 & more] (apply mx (mx v1 v2) more)))", "problem": 38, "user": "4f22e667e4b0d66497709fdb"}, {"code": "(fn [& p]\n  (reduce \n    (fn [a b]\n      (if (> a b)\n          a\n          b))\n    0 p))", "problem": 38, "user": "4f39c08ae4b0e243712b1efb"}, {"code": "(fn [ & s]\n  (last (sort s)))", "problem": 38, "user": "4f418eaee4b0d7d3c9f3fce9"}, {"code": "(fn [& l] (reduce #(if (> %1 %2) %1 %2) l))", "problem": 38, "user": "4ef77edb535dced4c769f254"}, {"code": "(fn [& y] (reduce (fn [m n] (if (> m n) m n)) y))", "problem": 38, "user": "4f2acb29e4b0d6649770a040"}, {"code": "(fn mmax ([x] x) ([x y] (- 0 (min (- 0 x) (- 0 y))))\n ([x y & more] (reduce mmax (mmax x y) more)))", "problem": 38, "user": "4f4003d9e4b0e243712b1fa5"}, {"code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "problem": 38, "user": "4f4274f2e4b0d7d3c9f3fd00"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4f426a7ae4b0d7d3c9f3fcff"}, {"code": "(fn k [& l] (reduce #(if (< %1 %2) %2 %1) (first l) l))", "problem": 38, "user": "4f0da4e4535d0136e6c22319"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4f3976aee4b0e243712b1eea"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4e6ec58c535d5021c1a89611"}, {"code": "(fn [& x] (reduce (fn [l r] (if (> l r) l r)) x))", "problem": 38, "user": "4f3e05a8e4b0e243712b1f79"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "4ee84038535d93acb0a6687b"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4f2f7e87e4b0d6649770a06f"}, {"code": "(fn [& col]\n(reduce #(if (> %2 %) %2 %) col))", "problem": 38, "user": "4f3e2fbbe4b0e243712b1f7e"}, {"code": "(fn max-value [& [start middle & more]]\n  (if (empty? more)\n      (if (> start middle)\n          start\n          middle)\n      (if (> start middle)\n          (apply max-value (cons start more))\n          (apply max-value (cons middle more)))))", "problem": 38, "user": "4e9a3a03535dbda64a6f6b70"}, {"code": "(fn [one & others]\n  (reduce (fn [val next]\n            (if (> val next)\n              val\n              next))\n    one\n    others))", "problem": 38, "user": "4f4175ffe4b0d7d3c9f3fce8"}, {"code": "(fn [& more]\n  (letfn [(calc-max [m x]\n            (cond (empty? x) m\n                  (> (first x) m) (calc-max (first x)\n                                            (rest x))\n                  :else (calc-max m (rest x))))]\n    (if (first more)\n      (calc-max (first more) (rest more))\n      nil)))", "problem": 38, "user": "4f443eafe4b0d7d3c9f3fd38"}, {"code": "(fn [& nums] (reduce #(if (> %1 %2) %1 %2) nums))", "problem": 38, "user": "4f3c772de4b0e243712b1f4c"}, {"code": "(comp last sorted-set)", "problem": 38, "user": "4ec6f4ee535d6d7199dd36dc"}, {"code": "(fn [x & z]\n  (if (nil? z)\n    x\n    (reduce #(if (> %1 %2) %1 %2) (cons x z))))", "problem": 38, "user": "4f065217535dcb61093f6c0c"}, {"code": "(fn [& nums] (reduce (fn [a x] (if (> a x) a x)) nums))", "problem": 38, "user": "4f40f055e4b0e243712b1fc2"}, {"code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) s))", "problem": 38, "user": "4f3e5e87e4b0e243712b1f83"}, {"code": "(fn max-val [& thurks]                                                   \n  (reduce #(if (< %1 %2) %2 %1) 0 thurks))", "problem": 38, "user": "4f2baf1ae4b0d6649770a04c"}, {"code": "(fn\n  [& args]\n    (println args)\n    (if (< 1 (count args))\n      (if (< (second args) (first args))\n        (recur (cons (first args) (nnext args)))\n        (recur (cons (second args) (nnext args))))\n      (first args)))", "problem": 38, "user": "4f4544e1e4b0d56e7bb92b7a"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "4f39493be4b0e243712b1ee9"}, {"code": "(fn [& a] (last (sort a)))", "problem": 38, "user": "4f382eb7e4b0e243712b1ed9"}, {"code": "(fn maxx\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] (reduce maxx (maxx x y) more)))", "problem": 38, "user": "4f465734e4b0d56e7bb92b9b"}, {"code": "(fn my-max [ x & xs ]\n  (if (= xs nil)\n      x\n      (let [z (apply my-max xs)]\n        (if (> x z) x z))))", "problem": 38, "user": "4f474f43e4b0d56e7bb92bb7"}, {"code": "(fn mymax [arg & args]\n  (if (empty? args) arg\n    (if (> arg (first args))\n      (apply mymax arg (rest args))\n      (apply mymax (first args) (rest args)))))", "problem": 38, "user": "4f46df00e4b0d56e7bb92bac"}, {"code": "(fn [& params] (last (sort params)))", "problem": 38, "user": "4f482e3be4b0d56e7bb92bd4"}, {"code": "(fn [& lst]\n    (reduce (fn [x y]\n              (if (< x y)\n                y\n                x)) lst))", "problem": 38, "user": "4eb6f065535d7eef30807372"}, {"code": "(fn mix \n  ([a b] a)\n  ([a b c] b)\n  ([a b c d] b)\n)", "problem": 38, "user": "4f461e57e4b0d56e7bb92b92"}, {"code": "(fn [fst & rst]\n  (if (seq rst)\n    (if (> (first rst) fst)\n      (recur (first rst) (rest rst))\n      (recur fst (rest rst)))\n    fst))", "problem": 38, "user": "4f4319ebe4b0d7d3c9f3fd13"}, {"code": "#(reduce (fn [x y] (if (> x y) x y) ) %&)", "problem": 38, "user": "4dcd327b535d5973398f929b"}, {"code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "problem": 38, "user": "4f4a03cce4b0d56e7bb92c03"}, {"code": "(fn [& a] (last (sort a)))", "problem": 38, "user": "4dd57160535dae65d5c462e8"}, {"code": "(fn \n  ([w x y z ] x)\n  ([x y] x)\n  ([x y z] y)\n  )", "problem": 38, "user": "4f4a3847e4b0d56e7bb92c0a"}, {"code": "(fn [& lst]\n  (last (sort lst)))", "problem": 38, "user": "4f4a5ca6e4b0d56e7bb92c0f"}, {"code": "#(last(sort %&))", "problem": 38, "user": "4f4a34b2e4b0d56e7bb92c09"}, {"code": "(fn [& x] (reduce (fn [x1 x2] (if (> x1 x2) x1 x2)) 0 x))", "problem": 38, "user": "4f3ec266e4b0e243712b1f8c"}, {"code": "(fn [& xs] \n  (if (not-empty xs) \n      (reduce #(if (>= %1 %2) %1 %2) xs) \n      nil))", "problem": 38, "user": "4f282da7e4b0d6649770a013"}, {"code": "(fn [& seq]\n  (reduce #(if (> %1 %2) %1 %2) seq))", "problem": 38, "user": "4f4ac35ae4b0d56e7bb92c18"}, {"code": "(fn mymax [x & xs]\n  (if xs\n    (let [y (apply mymax xs)]\n      (if (> x y)\n        x\n        y))\n    x))", "problem": 38, "user": "4f49e869e4b0d56e7bb92c02"}, {"code": "(fn [& ls] (reduce #(if(> %1 %2) %1 %2) ls))", "problem": 38, "user": "4f03ba9c535dcb61093f6b58"}, {"code": "(fn [& coll] (first (sort > coll)))", "problem": 38, "user": "4f4ba29ae4b03ad3f0c10c7a"}, {"code": "(fn mx\r\n  ([x] x)\r\n  ([x y] (if (> x y) x y))\r\n  ([x y & more]\r\n   (reduce mx (mx x y) more)))", "problem": 38, "user": "4f3543eee4b0e243712b1ebd"}, {"code": "(fn mxn\n  [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4db8d37d535d1e037afb219c"}, {"code": "(fn [& x]\n(last (sort x)))", "problem": 38, "user": "4f4c8faae4b03ad3f0c10c93"}, {"code": "(fn maxx ([num & numbers] (let [m (apply maxx numbers)] (if (> num m) num m))) ([num] num))", "problem": 38, "user": "4f4e11bfe4b03ad3f0c10cb7"}, {"code": "(fn [& numbers]\n  (last (sort numbers)))", "problem": 38, "user": "4e16daf4535d04ed9115e7ec"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4f4e7c01e4b03ad3f0c10cc9"}, {"code": "(fn [& x] \n  (reduce #(if (> %1 %2 ) % %2)   x))", "problem": 38, "user": "4e5fb634535d8ccf87e9fe4a"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4f4f0287e4b03ad3f0c10cd7"}, {"code": "(fn [& x] (first (sort > (seq x))))", "problem": 38, "user": "4f4f543ce4b03ad3f0c10cdf"}, {"code": "(fn my-max [& chain]\n  (letfn\n    [(maximum [high current]\n      (if (> current high) current\n        high))]\n  (reduce maximum 0 chain)))", "problem": 38, "user": "4f4e4ecbe4b03ad3f0c10cbf"}, {"code": "(fn [& xs]\n  (last (sort xs)))", "problem": 38, "user": "4f4e91a9e4b03ad3f0c10cca"}, {"code": "(comp last sort list)", "problem": 38, "user": "4f4fac2ae4b03ad3f0c10ce5"}, {"code": "(fn [& a] (last (sort a)))", "problem": 38, "user": "4f1684c7535d64f60314644b"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4db2f208535df7e46ed9b6c9"}, {"code": "(fn get-max \r\n  ([x] x)\r\n  ([x y] (if (> x y) x y))\r\n  ([x y & more]\r\n    (reduce get-max (get-max x y) more)))", "problem": 38, "user": "4f20c040e4b0d66497709fcb"}, {"code": "(fn [& coll]\r\n    (reduce #(if (> %1 %2) %1 %2) \r\n             (first coll) \r\n             (rest coll)))", "problem": 38, "user": "4f047177535dcb61093f6bc6"}, {"code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "problem": 38, "user": "4e9503b0535dbda64a6f6b2c"}, {"code": "(fn mx [a & b]\n  ( if (seq b) (apply mx (conj (rest b) (if (> a (first b)) a (first b)) ))\n      a))", "problem": 38, "user": "4f4c6b21e4b03ad3f0c10c8f"}, {"code": "(fn [& args]\n      (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4f3e6244e4b0e243712b1f85"}, {"code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) args))", "problem": 38, "user": "4f4fbed7e4b03ad3f0c10ce8"}, {"code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) s))", "problem": 38, "user": "4f5030a9e4b03ad3f0c10cfd"}, {"code": "(fn new-max [x & more]\n  (last (sort (cons x more))))", "problem": 38, "user": "4f50c414e4b03ad3f0c10d0d"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "4f4ff5a8e4b03ad3f0c10cf3"}, {"code": "(fn my-max [ & list]\n  (reduce (fn [x y]\n    (if (> x y) x y)) 0 list))", "problem": 38, "user": "4f4f08c8e4b03ad3f0c10cd8"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "4f410b63e4b0e243712b1fc5"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4f0404df535dcb61093f6b91"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) 0 args))", "problem": 38, "user": "4f51b9f3e4b03ad3f0c10d2b"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "4f51e8a4e4b03ad3f0c10d2d"}, {"code": "#(loop [n %1  l %&]\n  (if (empty? l)\n      n\n      (recur (if (> n (first l)) n (first l))\n             (rest l))))", "problem": 38, "user": "4f4bbda0e4b03ad3f0c10c7b"}, {"code": "(fn mymax\n  [& args]\n  (last (sort args)))", "problem": 38, "user": "4f25c4c4e4b0d66497709ffc"}, {"code": "#(last(sort %&))", "problem": 38, "user": "4f4ec77ae4b03ad3f0c10cd0"}, {"code": "(fn [x & xs]\n  (reduce\n    #(if (> %1 %2)\n          %1\n          %2) x xs))", "problem": 38, "user": "4f4e6d21e4b03ad3f0c10cc5"}, {"code": "(fn [& items] \n  (reduce (fn [maximum item] (if (> maximum item) maximum item)) items))", "problem": 38, "user": "4f53fa55e4b0a7574ea717d2"}, {"code": "(fn [& args] ( reduce (fn [x y] (if (> x y) x y) ) args ))", "problem": 38, "user": "4f542fd9e4b0a7574ea717db"}, {"code": "(fn [& x]   \n    (-> x sort last))", "problem": 38, "user": "4ed60c9c535d10e5ff6f52dd"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4f50d933e4b03ad3f0c10d11"}, {"code": "(fn [& x]\r\n  (reduce #(if (> %1 %2) %1 %2 ) x)\r\n)", "problem": 38, "user": "4f4aa932e4b0d56e7bb92c14"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4efa3d4b535dced4c769f270"}, {"code": "(fn[& x] (last (sort x)))", "problem": 38, "user": "4f563aece4b0a7574ea7181a"}, {"code": "(fn mymax\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n   (reduce mymax (mymax x y) more)))", "problem": 38, "user": "4f3bfce2e4b0e243712b1f38"}, {"code": "(fn [x & more]\n              (reduce\n               (fn [x y]\n                   (if (> x y) x y)) x more))", "problem": 38, "user": "4f524d11e4b03ad3f0c10d34"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4f554416e4b0a7574ea717f9"}, {"code": "(fn [& s] (reduce #(if (> % %2) % %2) s))", "problem": 38, "user": "4f569218e4b0a7574ea71826"}, {"code": "(fn maxval [v & m]\n  ((fn r-maxval [x y]\n    (cond\n      (empty? y) x\n      (> x (r-maxval (first y) (rest y))) x\n      :else (r-maxval (first y) (rest y))\n    ) \n  ) v m))", "problem": 38, "user": "4f566178e4b0a7574ea71820"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4eec82fe535d93acb0a668ae"}, {"code": "(fn [& s] (first (filter \n  (fn [i] (every? (partial >= i) s))\n  s\n)))", "problem": 38, "user": "4f5694cae4b0a7574ea71827"}, {"code": "(fn [& args] (reduce #(if (< % %2) %2 %) args))", "problem": 38, "user": "4f567cdbe4b0a7574ea71824"}, {"code": "(fn [& x] \n  (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "4f45c72be4b0d56e7bb92b8a"}, {"code": "(fn [& a]\n  (last (sort a)))", "problem": 38, "user": "4f3c0734e4b0e243712b1f3c"}, {"code": "(fn [& values] (reduce (fn [a e] (if (> e a) e a)) values))", "problem": 38, "user": "4f4afb1fe4b0d56e7bb92c21"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "4e8b1fa2535d65386fec2118"}, {"code": "(fn [m & ms]\n      (reduce (fn [n1 n2] (if (< n1 n2) n2 n1)) m ms))", "problem": 38, "user": "4f29afc7e4b0d6649770a02e"}, {"code": "(fn [& more] (reduce (fn [x y] (if (> x y) x y)) more))", "problem": 38, "user": "4f565bebe4b0a7574ea7181e"}, {"code": "(fn m \n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] (reduce m (m x y) more)))", "problem": 38, "user": "4f580a9fe4b0a7574ea71844"}, {"code": "(fn thisfunc [& args] \n  (if (> (count args) 1)\n   (let [n (first args) n2 (apply thisfunc (rest args))]\n     (if (> n n2) n n2))\n    (first args)))", "problem": 38, "user": "4dd9d299535d2dad7130b5dd"}, {"code": "(fn [x & xs]\r\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4f54e6f8e4b0a7574ea717ef"}, {"code": "#(loop [m 0 v %&]\n  (if (empty? v) \n    m\n    (recur \n      (if (> (first v) m) (first v) m) \n      (rest v))))", "problem": 38, "user": "4ea00469535d7eef3080729d"}, {"code": "(fn [& xs] (reduce #(if (> %2 %1) %2 %1) xs))", "problem": 38, "user": "4f569a3ce4b0a7574ea71828"}, {"code": "(fn [x & xs]\r\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4f50be5de4b03ad3f0c10d0c"}, {"code": "(fn [& xs]\r\n  (reduce #(if (> %2 %1) %2 %1) 0 xs))", "problem": 38, "user": "4f4f4812e4b03ad3f0c10cdd"}, {"code": "(fn [x & xs]\n   (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4f4be1cae4b03ad3f0c10c81"}, {"code": "(fn max-val [x & xs]\r\n  (reduce #(if (< %1 %2) %2 %1) (flatten (cons x xs))))", "problem": 38, "user": "4f500769e4b03ad3f0c10cf8"}, {"code": "(fn [x & xs]\r\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4f4feb95e4b03ad3f0c10cf0"}, {"code": "(fn [& rest] (- (apply min (map - rest))))", "problem": 38, "user": "4f528bcde4b03ad3f0c10d3e"}, {"code": "(fn [& xs]\n  (loop [[x & xs] xs m x]\n    (if (empty? xs)\n      m\n    (recur xs (if (> x m) x m)))))", "problem": 38, "user": "4f58de86e4b0a7574ea7185b"}, {"code": "(fn [& args]\n  (reduce\n    (fn [t s]\n      (if (> t s) t s))\n    args))", "problem": 38, "user": "4f5c0549e4b0030a34fb2b1a"}, {"code": "(fn [f & m] (reduce #(if (> %1 %2) %1 %2) f m))", "problem": 38, "user": "4f559d2ce4b0a7574ea71808"}, {"code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) more))", "problem": 38, "user": "4f547d2ce4b0a7574ea717e3"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "4f4a17ffe4b0d56e7bb92c05"}, {"code": "(fn [x & y]\n  (if (empty? y)\n      x\n      (let [new-max-value (if (< x (first y))\n                              (first y)\n                              x)] \n      (recur new-max-value\n             (rest y)))))", "problem": 38, "user": "4f5cc3b8e4b0030a34fb2b2b"}, {"code": "(fn [& %] (last (sort %)))", "problem": 38, "user": "4f5c1978e4b0030a34fb2b1b"}, {"code": "(fn ([x & r] (reduce #(if (> %1 %2) %1 %2) (cons x r))))", "problem": 38, "user": "4f3024bfe4b0d6649770a074"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4f590356e4b0a7574ea71860"}, {"code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4f57a153e4b0a7574ea7183a"}, {"code": "(fn [& l] (reduce (fn [a b] (if (> a b) a b)) l))", "problem": 38, "user": "4f036fb3535dcb61093f6ac8"}, {"code": "(fn [ & nums]\n      (reduce #(if (> %1 %2) %1 %2) nums))", "problem": 38, "user": "4eb8ec4a535dfed6da9c6d4b"}, {"code": "(fn zax [& in]\n  (last (sort (concat in)))\n)", "problem": 38, "user": "4e5fdd68535d8ccf87e9fe4f"}, {"code": "(fn [a & b] (reduce (fn [m,i] (if (> i m) i m)) (conj b a)))", "problem": 38, "user": "4f54ecf1e4b0a7574ea717f0"}, {"code": "(fn [& xs]\n  (reduce (fn [a b] (if (> a b) a b)) xs))", "problem": 38, "user": "4f5eda39e4b0030a34fb2b56"}, {"code": "(fn my-max\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] \n    (reduce my-max (my-max x y) more)))", "problem": 38, "user": "4e53bf5e535d8a8b8723a275"}, {"code": "(fn [& nums] (last (sort nums)))", "problem": 38, "user": "4f504739e4b03ad3f0c10d00"}, {"code": "(fn [& coll] \n  (reduce #(if (< %1 %2) %2 %1) coll))", "problem": 38, "user": "4ec8dc17535d6d7199dd36f7"}, {"code": "#(loop [ans %1 l %&] (if (= '() l) ans (recur (let [tmp (first l)] (if (> tmp ans) tmp ans)) (rest l))))", "problem": 38, "user": "4f5edeb0e4b0030a34fb2b57"}, {"code": "(fn [x & xs]\r\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4f04256d535dcb61093f6ba7"}, {"code": "(comp last sort list)", "problem": 38, "user": "4f6010e7e4b0defedf855fa1"}, {"code": "(fn [& xs] (letfn [(is-max? [lst max-v]\r\n  (let [f (first lst), c (count lst)]\r\n    (if (<= c 1) \r\n      max-v\r\n    (is-max? (rest lst) (if (< max-v f) f max-v)))))] \r\n  (is-max? (vec xs) 0)))", "problem": 38, "user": "4f60ed88e4b0defedf855fb2"}, {"code": "(fn max2\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & z] (apply max2 (cons (max2 x y) z))))", "problem": 38, "user": "4f28d159e4b0d6649770a01b"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4f604bdee4b0defedf855fa7"}, {"code": "(fn [& a] (reduce #(if (> % %2) % %2) 0 a))", "problem": 38, "user": "4f614976e4b0defedf855fbb"}, {"code": "(fn [& xs] (reduce (fn [acc x] (if (> x acc) x acc)) xs))", "problem": 38, "user": "4e7f5a0b535db966e863cc41"}, {"code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) args))", "problem": 38, "user": "4e99819a535dbda64a6f6b66"}, {"code": "(fn [& xs] (reduce #(if (> % %2) % %2) xs))", "problem": 38, "user": "4f6160a7e4b0defedf855fbe"}, {"code": "(fn [& more]\n  (reduce \n  (fn [a b] (if (>= a b) a b))\n  more))", "problem": 38, "user": "4f03fb59535dcb61093f6b89"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "4f5155a3e4b03ad3f0c10d1b"}, {"code": "(fn m\n    ([x] x)\n    ([x y] (if (> x y) x y))\n    ([x y & more] (reduce m (m x y) more))\n)", "problem": 38, "user": "4f622cafe4b0defedf855fcc"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4f5c344be4b0030a34fb2b1d"}, {"code": "(fn [x & xrest]\n  (cond (empty? xrest) x\n  (> (first xrest) x) (recur (first xrest) (rest xrest))\n\t:else (recur x (rest xrest)))\n   )", "problem": 38, "user": "4f63777be4b0defedf855fe4"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4f6345b8e4b0defedf855fe2"}, {"code": "(fn [& args]\n  (reduce \n    (fn [x y]\n      (if (> x y)\n        x\n        y)) args))", "problem": 38, "user": "4dc0f7ff535d020aff1edf82"}, {"code": "(fn mx [fst & more]\n    (reduce (fn [x y] (if (> x y) x y)) fst more))", "problem": 38, "user": "4f611127e4b0defedf855fb4"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4f58fe71e4b0a7574ea7185f"}, {"code": "(fn [& lst] (first (sort > lst)))", "problem": 38, "user": "4f651f66e4b07046d9f4ef3c"}, {"code": "(fn [& vals]\n  (let [check-max (fn [x y] (> x y))]\n    (loop [inp vals acc 0]\n      (if (empty? inp)\n        acc\n        (recur (rest inp)\n               (if (check-max (first inp) acc)\n                 (first inp)\n                  acc))))))", "problem": 38, "user": "4f629697e4b0defedf855fd6"}, {"code": "(fn [& args] \n  (reduce #(if (< %1 %2) %2 %1) args))", "problem": 38, "user": "4f36b4a4e4b0e243712b1ecc"}, {"code": "(fn mx [h & t]\n  (if (= t nil)\n    h\n    (let [tmax (apply mx t)]\n      (if (> h tmax) h tmax))))", "problem": 38, "user": "4f65f537e4b07046d9f4ef4a"}, {"code": "(fn\n  [x & xs]\n    (loop [m x more xs]\n      (if (seq? (seq more))\n        (let [y (first more)]\n          (recur (if (> m y) m y) (rest more)))\n         m)))", "problem": 38, "user": "4e6ac7a8535d8ccf87e9ff03"}, {"code": "(fn find-max [a & more]\n  (let [b (first more)]\n    (cond \n      (not b) a\n      (> a b) (recur a (rest more))\n      (> b a) (recur b (rest more)))))", "problem": 38, "user": "4f6543cae4b07046d9f4ef41"}, {"code": "(fn [& coll] (reduce #(if (> %2 %1) %2 %1) coll))", "problem": 38, "user": "4f65eec7e4b07046d9f4ef48"}, {"code": "(fn [& arg] (loop [m nil ml arg] (if (empty? ml) m (if (or (nil? m) (< m (first ml))) (recur (first ml) (rest ml) ) (recur m (rest ml)))) ))", "problem": 38, "user": "4f62ef0ce4b0defedf855fdc"}, {"code": "(fn [& s] \n  (reduce (fn [a b] (if (> a b) a b)) s))", "problem": 38, "user": "4f62b29ce4b0defedf855fd9"}, {"code": "(fn [& vals] (reduce (fn[x y] (if (> x y) x y)) vals))", "problem": 38, "user": "4f617f66e4b0defedf855fc0"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "4f68c485e4b07046d9f4ef7c"}, {"code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) (flatten (cons x xs))))", "problem": 38, "user": "4f5612f9e4b0a7574ea71812"}, {"code": "(fn [h & t] \n\t\t(reduce #(if (> %1 %2) %1 %2) h t))", "problem": 38, "user": "4f51697ae4b03ad3f0c10d22"}, {"code": "(fn [& li]\n  (loop [m nil l li]\n    (cond\n      (empty? l) m\n      (or (nil? m) (> (first l) m)) (recur (first l) (rest l))\n      :else (recur m (rest l)))))", "problem": 38, "user": "4f6688d6e4b07046d9f4ef5d"}, {"code": "(comp (fn [c] (reduce #(if (> %1 %2) %1 %2) c)) list)", "problem": 38, "user": "4f6a36eee4b07046d9f4ef99"}, {"code": "(fn maxreduce [& args]\n  (reduce #(if (> %2 %1) %2 %1) args))", "problem": 38, "user": "4f61be97e4b0defedf855fc5"}, {"code": "(fn [& a] (last (sort (seq a))))", "problem": 38, "user": "4f4bd422e4b03ad3f0c10c7e"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4e568873535d8a8b8723a283"}, {"code": "(fn [x & xs]\n  (loop [mx x othr xs]\n    (if (empty? othr)\n      mx\n      (let [newMax (if (> mx (first othr)) mx (first othr))]\n        (recur newMax (rest othr))  \n      )\n    )    \n  )  \n)", "problem": 38, "user": "4ddc56e1535d02782fcbea04"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4df8644f535d04ed9115e778"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4f4e147ae4b03ad3f0c10cb9"}, {"code": "#(last (sort (flatten (list % %&)) ))", "problem": 38, "user": "4f6b4237e4b07046d9f4efa9"}, {"code": "(fn [& in] \n  (loop [m (first in) input in] \n    (if (seq input) \n      (if (> (first input) m) \n        (recur (first input) (rest input)) \n        (recur m (rest input))) \n      m)))", "problem": 38, "user": "4f608f0ee4b0defedf855faa"}, {"code": "(fn [& params] (reduce (fn [maxel elem] (if (> elem maxel) elem maxel)) (seq params)))", "problem": 38, "user": "4f4daa4ae4b03ad3f0c10cac"}, {"code": "(comp first reverse sort list)", "problem": 38, "user": "4eca2cea535d6d7199dd3702"}, {"code": "(fn [& args]\n  (first (reverse (sort args))))", "problem": 38, "user": "4ed2a31c535d44c135fd68db"}, {"code": "(fn [a & col]\n  (reduce #(if (> %2 %1) %2 %1)  a col)\n)", "problem": 38, "user": "4f6d9d7ee4b07046d9f4efcd"}, {"code": "(fn a [& nums]\n  (reduce #(if (> %1 %2) %1 %2) nums))", "problem": 38, "user": "4f3242bae4b0d6649770a08f"}, {"code": "(fn [& a] \n  (reduce #(if (> %1 %2) %1 %2) a))", "problem": 38, "user": "4ef2da4f535dced4c769f224"}, {"code": "(fn [ff & more]\n  (letfn [(calc-max [m x] \n            (cond (empty? x) m\n                  (> (first x) m) (calc-max (first x) \n                                            (rest x))\n                  :else (calc-max m (rest x))))]\n    (calc-max ff more)))", "problem": 38, "user": "4f584064e4b0a7574ea71846"}, {"code": "(fn [& a] (last (sort a)))", "problem": 38, "user": "4f6a2ff2e4b07046d9f4ef98"}, {"code": "#_(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))\n\n#(first (sort > %&))", "problem": 38, "user": "4f1bb9d8535d64f60314647d"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4f6fbb68e4b07046d9f4efeb"}, {"code": "(fn [x & xs]\r\n  (reduce \r\n    #(if (> %1 %2)\r\n      %1\r\n      %2) x xs))", "problem": 38, "user": "4f70183ee4b07046d9f4eff3"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4f702dcae4b07046d9f4eff4"}, {"code": "(fn[& x]\n  (loop [result 0\n         values x]\n         (if (empty? values)\n            result\n            (recur (if (> (first values) result) (first values) result) (next values)))))", "problem": 38, "user": "4eef3afe535d305ff5cb7f1d"}, {"code": "(fn [& more] (last (sort more)))", "problem": 38, "user": "4f6ecc65e4b07046d9f4efdd"}, {"code": "(fn [x & xs]\n  (let [myfn (fn [n ls]\n               (let [m (first ls)]\n                 (if (nil? m)\n                   n\n                   (recur (if (< m n) n m) (rest ls)))))]\n    (myfn x xs)))", "problem": 38, "user": "4f1b3f4c535d64f603146478"}, {"code": "(fn [& xs]\n  (reduce \n    (fn [m x] (if (> m x) m x))\n    0 xs))", "problem": 38, "user": "4f6845d2e4b07046d9f4ef74"}, {"code": "(fn [ & args] (reduce #(if (> % %2) % %2) args))", "problem": 38, "user": "4f69f34fe4b07046d9f4ef90"}, {"code": "(fn [& c](reduce #(if (> % %2) % %2) c))", "problem": 38, "user": "4f27d30fe4b0d6649770a00d"}, {"code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) s))", "problem": 38, "user": "4f4e978ae4b03ad3f0c10ccb"}, {"code": "(fn largest [& xs]\n          (reduce (fn [x y]\n                    (if (> x y)\n                      x\n                      y))\n            xs))", "problem": 38, "user": "4f65ef6de4b07046d9f4ef49"}, {"code": "(fn[& more]\n  (loop [s more max-value 0]\n    (if (empty? s)\n      max-value\n      (recur (rest s) (let [f (first s)\n                            mx-val max-value]\n                            (if (> f mx-val)\n                              f\n                              mx-val))))))", "problem": 38, "user": "4f6236abe4b0defedf855fcd"}, {"code": "(fn [& items] (last (sort items)))", "problem": 38, "user": "4f706cc3e4b07046d9f4eff7"}, {"code": "(fn [& vals] \n  (reduce #(if (> %1 %2) %1 %2) vals))", "problem": 38, "user": "4f71f782e4b07046d9f4f018"}, {"code": "(fn [& args]\n    (reduce #(if (> %1 %2) %1 %2) (first args) (rest args)))", "problem": 38, "user": "4f463dfde4b0d56e7bb92b99"}, {"code": "(fn [& nums]\n  (reduce #(if (> %1 %2) %1 %2) nums))", "problem": 38, "user": "4ec6c878535d6d7199dd36d5"}, {"code": "(fn [elem & sq]\r\n  ((fn [sq]\r\n    (reduce (fn [a b]\r\n              (if (> a b)\r\n                a\r\n                b))\r\n            sq))\r\n    (cons elem sq)))", "problem": 38, "user": "4f71db68e4b07046d9f4f015"}, {"code": "(fn [& numbers] (reduce #(if (> %1 %2) %1 %2) numbers))", "problem": 38, "user": "4f72f71be4b07046d9f4f03d"}, {"code": "(fn [ & args ] (reduce (fn [o n] (if (> n o) n o)) args))", "problem": 38, "user": "4f724e56e4b07046d9f4f027"}, {"code": "(fn [& x]\n  (reduce #(if (> % %2) % %2) x))", "problem": 38, "user": "4f726dd2e4b07046d9f4f034"}, {"code": "(fn this \n  ([x] x)\n  ([x y] (if (> x y) x y)) \n  ([x y & more] (reduce this (this x y) more)))", "problem": 38, "user": "4ed3c9d3535d44c135fd68f7"}, {"code": "(fn findmax [& args]\n  (if (= (count args) 1) (first args)\n      (let [[a b & c] args]\n        (if (> a b)\n            (apply findmax (cons a c))\n            (apply findmax (cons b c))))))", "problem": 38, "user": "4f70afb8e4b07046d9f4effb"}, {"code": "(comp last sort list)", "problem": 38, "user": "4f7207d3e4b07046d9f4f019"}, {"code": "(fn [& xs] (reduce #(if (> % %2) % %2) xs))", "problem": 38, "user": "4f734e93e4b07046d9f4f043"}, {"code": "(fn [& paras] (-> paras sort reverse first))", "problem": 38, "user": "4f71ba6ee4b07046d9f4f012"}, {"code": "(fn f [x & y] (\n    if (> (first y) x)\n      (if (<= 1 (count y))\n        (first y)\n        (f (first y) (rest y))\n      )\n      (if (<= 1 (count y))\n        x\n        (f x (rest y))\n      )\n))", "problem": 38, "user": "4f72e09de4b07046d9f4f03b"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4f725201e4b07046d9f4f02f"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4f71347ae4b07046d9f4f009"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "4f6ba647e4b07046d9f4efaf"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "4f713878e4b07046d9f4f00a"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4e89dbce535d3e98b8023283"}, {"code": "(fn [& xs] \n  (let [helper \n        (fn [x best]\n          (if (< best x)\n            x\n            best))\n        ]\n    (reduce helper xs)))", "problem": 38, "user": "4f7250cce4b07046d9f4f02a"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4f74fe77e4b0fbe0118ec552"}, {"code": "(fn MAX\n  ([x y]\n    (if (> x y)\n      x\n      y))\n  ([x y & more]\n    (reduce MAX (MAX x y) more)))", "problem": 38, "user": "4f761a78e4b0fbe0118ec56c"}, {"code": "(fn\n      ([x] x)\n      ([x & tail]\n         (loop [l tail, mx x]\n           (if (empty? l)\n             mx\n             (recur (rest l)\n                    (if (> (first l) mx) (first l) mx))\n             ))))", "problem": 38, "user": "4eeccfc0535d93acb0a668b5"}, {"code": "(fn [& seq]\n  (loop [rem seq, acc 0]\n    (let [fir (first rem)]\n      (if (empty? rem)\n        acc\n        (recur (rest rem) (if (> fir acc) fir acc))))))", "problem": 38, "user": "4f7a9416e4b06e829148e19b"}, {"code": "(fn [& in] (reduce #(if (> % %2) % %2) in))", "problem": 38, "user": "4f6f777de4b07046d9f4efe5"}, {"code": "(fn f [x & more] (if (or (= more []) (> x (first more))) x (apply f more)))", "problem": 38, "user": "4f751a54e4b0fbe0118ec555"}, {"code": "(fn [x & y] (reduce #(if (< %1 %2) %2 %1) x y))", "problem": 38, "user": "4f7b2cb5e4b06e829148e19f"}, {"code": "(fn [& args]\n  (reduce #( if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4f725466e4b07046d9f4f030"}, {"code": "(fn [& s]\n  (reduce #(if (> %1 %2) %1 %2) 0 s))", "problem": 38, "user": "4f790ad5e4b0fbe0118ec58d"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "problem": 38, "user": "4f7b6b90e4b06e829148e1a4"}, {"code": "(fn [& col]\n(loop [maior (first col) resto (rest col)]\n(letfn [(meumaior [a b] (if (> a b) a b))]\n(if (seq resto)\n(recur (meumaior maior (first resto))\n(rest resto))\nmaior))))", "problem": 38, "user": "4f75bb70e4b0fbe0118ec561"}, {"code": "(fn [& arg]\n  (first (reverse (sort (seq arg)))))", "problem": 38, "user": "4f7d065ce4b06e829148e1b9"}, {"code": "(fn [& xs] (reduce (fn [a b] (if (> a b) a b)) xs))", "problem": 38, "user": "4f7d75a2e4b06e829148e1c2"}, {"code": "(fn [& xs]\r\n  (reduce #(if (> %1 %2) %1 %2) 0 xs))", "problem": 38, "user": "4f7d5328e4b06e829148e1bf"}, {"code": "(fn [& xs] \n(reduce (fn [x y] (if (> x y) x y)) xs))", "problem": 38, "user": "4f7e3b40e4b06e829148e1cc"}, {"code": "(fn [& args]\n  (loop [[f & oargs :as my-l] args\n          m f]\n    (if (empty? my-l)\n      m\n      (recur oargs (if (> m f) m f)))))", "problem": 38, "user": "4f7e29dde4b06e829148e1ca"}, {"code": "(fn [& xs]\n  (reduce (fn [a b]\n            (if (> a b) a b)) xs))", "problem": 38, "user": "4f7f0827e4b06e829148e1d5"}, {"code": "(comp last sort list)", "problem": 38, "user": "4f72147ae4b07046d9f4f01b"}, {"code": "(fn m [x & r]\n  (if r\n    (#(if (> x %) x %) (apply m r))\n    x))", "problem": 38, "user": "4f7869c2e4b0fbe0118ec589"}, {"code": "(fn [h & t] \n  (reduce \n    (fn [a b] (if (> a b) a b)) h t))", "problem": 38, "user": "4f7d91e6e4b06e829148e1c3"}, {"code": "(fn m [& lst]\n  (last (sort lst)))", "problem": 38, "user": "4f7fc9a1e4b033992c121bee"}, {"code": "(fn [& args] \n  (reduce (fn [x sofar] (if (> x sofar) x sofar)) 0 args))", "problem": 38, "user": "4f1ae082535d64f603146470"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "4f7b6f12e4b06e829148e1a5"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4f678ac8e4b07046d9f4ef67"}, {"code": "(fn largest [& sq]\r\n     (reduce #(if (> %1 %2)\r\n                %1\r\n                %2) sq))", "problem": 38, "user": "4f82e14be4b033992c121c0c"}, {"code": "(fn [ & values] (reduce #(if (< %1 %2) %2 %1) values))", "problem": 38, "user": "4f82f9f7e4b033992c121c10"}, {"code": "(fn [& a] (loop [mx 0 list a] (if (empty? list) mx (recur (if (> (first list) mx) (first list) mx) (rest list)))))", "problem": 38, "user": "4f122bfe535d64f603146426"}, {"code": "(fn [& xs] (last (sort xs)))", "problem": 38, "user": "4f8345c6e4b033992c121c1b"}, {"code": "(fn [& x] (reduce #(if (< %1 %2) %2 %1) x))", "problem": 38, "user": "4ec5569f535d6d7199dd3695"}, {"code": "(fn mxv [& x]\n  (last (sort x)))", "problem": 38, "user": "4f1f8fae535d64f6031464a3"}, {"code": "(fn mx\n  ([a] a)\n  ([a & rest]\n     (let [max-rest (apply mx rest)]\n       (if (> max-rest a) max-rest a))))", "problem": 38, "user": "4f803577e4b033992c121bf0"}, {"code": "(fn [& x] (reduce (fn [r i] (if (> i r) i r)) x))", "problem": 38, "user": "4dca56b6535d5973398f9287"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4f83e712e4b033992c121c25"}, {"code": "#( last ( sort %& ))", "problem": 38, "user": "4f83ee95e4b033992c121c26"}, {"code": "#(-> %& sort last)", "problem": 38, "user": "4ea5727f535d7eef308072d4"}, {"code": "(fn [& xs] \n  (reduce \n    (fn [x y] (if (> x y) x y)) 0 xs ))", "problem": 38, "user": "4e81e93d535db62dc21a62bf"}, {"code": "(fn maxxx [x & xs]\r\n     (loop [maxx x\r\n       xs xs]\r\n       (println maxx)\r\n       (if (empty? (rest xs))\r\n         maxx\r\n       (if (> (first xs) maxx)\r\n        (recur (first xs) (rest xs))\r\n        (recur maxx (rest xs))))))", "problem": 38, "user": "4f7c7ed7e4b06e829148e1b4"}, {"code": "(fn m [& x] (reduce (fn [y z] (if (> y z) y z)) x))", "problem": 38, "user": "4f0314f9535dcb61093f6a57"}, {"code": "(fn [& liste]\n  (reduce (fn maxi [a b] (if (> a b) a b)) liste)\n)", "problem": 38, "user": "4f84400de4b033992c121c2e"}, {"code": "#_(fn m\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] (reduce m (m x y) more)))\n#_(fn [& args] (-> args sort last))\n#(-> %& sort last)", "problem": 38, "user": "4dc78527535d8a4b2fd7428f"}, {"code": "(fn maxx [& x] (if (= 1 (count x)) (first x) \n                                   (let [y (apply maxx (rest x))]\n                                        (if (> (first x) y)\n                                               (first x)\n                                                      y))))", "problem": 38, "user": "4f84f6c3e4b033992c121c3d"}, {"code": "(fn maximum [& args]\n    (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "4f831fd3e4b033992c121c17"}, {"code": "(fn [x & xs]\n  (reduce #(if (> %1 %2) %1 %2) x xs))", "problem": 38, "user": "4f84b21fe4b033992c121c3b"}, {"code": "(fn [& xs] (reduce (fn [x y] (if (> x y) x y)) xs))", "problem": 38, "user": "4f85b7b5e4b033992c121c49"}, {"code": "(comp first reverse sorted-set)", "problem": 38, "user": "4f8592e6e4b033992c121c47"}, {"code": "(fn [x & all] (first (sort > (apply conj [x] all))))", "problem": 38, "user": "4f7c2ac4e4b06e829148e1ad"}, {"code": "(fn greatest \n  ([x] x) \n  ([x y] (if (> x y) x y)) \n  ([x y & more] \n    (apply greatest \n      (greatest x y) \n      more)))", "problem": 38, "user": "4f85ef29e4b033992c121c4d"}, {"code": "(fn koko [& args] (last (sort args)))", "problem": 38, "user": "4f85d497e4b033992c121c4b"}, {"code": "(comp first reverse sort vector)", "problem": 38, "user": "4f611e0ee4b0defedf855fb8"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4f6c6d69e4b07046d9f4efba"}, {"code": "#(reduce (fn [a,b] (if (> a b) a b)) 0 %&)", "problem": 38, "user": "4f7f9665e4b033992c121bea"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4e526cc4535d302ef430da74"}, {"code": "(fn mymax\n  ([x] x)\n  ([x y] (if (< x y) y x))\n  ([x y & more] (apply mymax (mymax x y) more))\n)", "problem": 38, "user": "4f74a4fbe4b044e54cd9a901"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "4f83665ee4b033992c121c1c"}, {"code": "(fn f\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n   (reduce f (f x y) more)))", "problem": 38, "user": "4f7b3d53e4b06e829148e1a0"}, {"code": "(fn maxim [f & r]\n  (if (nil? r)\n    f\n    (let [ret (apply maxim r)]\n      (if (> ret f)\n        ret\n        f))))", "problem": 38, "user": "4f82f1b9e4b033992c121c0f"}, {"code": "#(-> %& sort last)", "problem": 38, "user": "4f7d25b4e4b06e829148e1ba"}, {"code": "(fn [f & r] (reduce #(if (> % %2) % %2) f r))", "problem": 38, "user": "4f88942be4b033992c121c6a"}, {"code": "(fn [& more]\n  (reduce\n    (fn [x y] (if (< x y) y x))\n    more))", "problem": 38, "user": "4f88ae35e4b033992c121c6d"}, {"code": "(fn [& s] (reduce (fn [a b] (if (> a b) a b)) s))", "problem": 38, "user": "4f8b2f79e4b02e764a0a517a"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "4f8b56dae4b02e764a0a517e"}, {"code": "(fn foo\n  ([x] x)\n  ([x z] (if (seq? z) (if (empty? z) x (if (> x (first z)) (foo x (rest z)) (foo (first z) (rest z))))\n                      (if (> x z) x z)))\n  ([x z & y] (if (> x z) (foo x y) (foo z y))))", "problem": 38, "user": "4f8b20fce4b02e764a0a5178"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4f8aa2f9e4b02e764a0a516f"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "4f8bb50ce4b02e764a0a5181"}, {"code": "(fn [x & xs] (reduce #(if(< %1 %2) %2 %1) x xs  ))", "problem": 38, "user": "4f847bf2e4b033992c121c32"}, {"code": "(fn [& args]\n    (reduce (fn [x y] (if (> x y) x y))\n            args))", "problem": 38, "user": "4f6bab49e4b07046d9f4efb1"}, {"code": "(fn m [x & xs]\n  (if (= 0 (count xs))\n    x\n    (if (> x (first xs))\n      (apply m (cons x (rest xs)))\n      (apply m (cons (first xs) (rest xs))))))", "problem": 38, "user": "4f7c4eb7e4b06e829148e1af"}, {"code": "(fn [& more] (first (sort > more)))", "problem": 38, "user": "4f8aa1c1e4b02e764a0a516e"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4f8ab084e4b02e764a0a5171"}, {"code": "(fn[x & re]\n  (loop [maxx x\n         xx re]\n    (if (empty? xx)\n      maxx\n      (recur (if (> (first xx) maxx) \n               (first xx) \n               maxx\n             ) \n             (rest xx)\n      )\n     )\n  )\n)", "problem": 38, "user": "4f891abde4b033992c121c77"}, {"code": "(fn [& args] (reduce (fn [x acc] (if (> x acc) x acc)) args))", "problem": 38, "user": "4f73536ee4b07046d9f4f044"}, {"code": "(fn [& x] (reduce #(if (> %2 %1) %2 %1) x))", "problem": 38, "user": "4f748b54e4b044e54cd9a8fa"}, {"code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) more))", "problem": 38, "user": "4f8bbb27e4b02e764a0a5182"}, {"code": "(fn maxx [& args]\n  (if (= 1 (count args))\n     (first args)\n     (let [mx (apply maxx (rest args))]\n         (if (> mx (first args))\n            mx\n            (first args)))))", "problem": 38, "user": "4f465096e4b0d56e7bb92b9a"}, {"code": "(fn amax [& r]\n  ((fn amax-helper [cmax r]\n    (if (nil? cmax)\n      (amax-helper (first r) (rest r))\n      (if (empty? r)\n          cmax\n          (amax-helper\n            (if (> (first r) cmax)\n                (first r)\n                cmax)\n            (rest r))))) nil r))", "problem": 38, "user": "4f42ae16e4b0d7d3c9f3fd09"}, {"code": "(fn [& l] (reduce (fn [x y] (if (> x y) x y)) l))", "problem": 38, "user": "4f8c5f4fe4b02e764a0a5198"}, {"code": "(fn [& x] (reduce (fn [a b] (if (> a b) a b)) x))", "problem": 38, "user": "4f882b4be4b033992c121c60"}, {"code": "(fn [& s] (last (sort s)))", "problem": 38, "user": "4f90dc2ae4b0dcca54ed6c92"}, {"code": "(fn mx\n  ([] nil)\n  ([a] a)\n  ([a b] (if (> a b) a b ))\n  ([a b & more] (apply mx (mx a b) more))\n)", "problem": 38, "user": "4f8ea1f7e4b0d4e659cdde69"}, {"code": "(fn [arg & more]\n  (if (empty? more)\n    arg\n    (if (< arg (first more))\n      (recur (first more) (rest more))\n      (recur arg (rest more)))))", "problem": 38, "user": "4f652432e4b07046d9f4ef3d"}, {"code": "(fn [x & rx] (-> (conj rx x) sort last))", "problem": 38, "user": "4f7121cae4b07046d9f4f007"}, {"code": "(fn [& l]\n  (reduce #(if (> %1 %2) %1 %2) l))", "problem": 38, "user": "4f90e238e4b0dcca54ed6c94"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4f2b1893e4b0d6649770a047"}, {"code": "(fn mymax\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] (reduce mymax (mymax x y) more)))", "problem": 38, "user": "4f91a38ae4b0dcca54ed6c9f"}, {"code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) s))", "problem": 38, "user": "4f9120d8e4b0dcca54ed6c96"}, {"code": "(fn [& xs] \n  (reduce #(if (> %1 %2) %1 %2) (first xs) xs))", "problem": 38, "user": "4f92709de4b0dcca54ed6cad"}, {"code": "(fn [x & xs]\n  (reduce #(if (> % %2) % %2) x xs))", "problem": 38, "user": "4f727023e4b07046d9f4f035"}, {"code": "(fn [& s] \n  (reduce #(if (> %1 %2) %1 %2)\n    s))", "problem": 38, "user": "4f91fd31e4b0dcca54ed6ca8"}, {"code": "(fn [& s] (last (sort s)))", "problem": 38, "user": "4f7ab8c7e4b06e829148e19c"}, {"code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) s))", "problem": 38, "user": "4f6511eee4b07046d9f4ef3a"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "4f9174d0e4b0dcca54ed6c9b"}, {"code": "(fn [& l] (last (sort l)))", "problem": 38, "user": "4f930858e4b0dcca54ed6cb4"}, {"code": "(fn [& z]\n  (reduce (fn [x y] (if (> x y) x y)) z))", "problem": 38, "user": "4f8ac2bde4b02e764a0a5172"}, {"code": "(fn my-max\n  ([] 0)\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n     (apply my-max (my-max x y) more)))", "problem": 38, "user": "4e32aa5b535deb9a81d77f24"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4ee77f15535d93acb0a66868"}, {"code": "(fn [& x] (first (sort > x)))", "problem": 38, "user": "4e778d36535d324fb2983d71"}, {"code": "(fn [& many] (loop [acc (apply vector many) cnt 0] (if (empty? acc) cnt\r\n(recur (pop acc) (if (> (last acc) cnt) (last acc) cnt)))))", "problem": 38, "user": "4f9336ece4b0dcca54ed6cb7"}, {"code": "(comp first (partial sort >) list)", "problem": 38, "user": "4f3fb586e4b0e243712b1f9c"}, {"code": "(fn [& r] (reduce #(if (> %1 %2) %1 %2) r))", "problem": 38, "user": "4f9597e0e4b0dcca54ed6cd4"}, {"code": ";(fn f ([x] x) ([x & xs] (let [y (apply f xs)] (if (> x y) x y))))\n(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4f9510b5e4b0dcca54ed6cc7"}, {"code": "(fn [& s] (reduce #(if (> % %2) % %2) s))", "problem": 38, "user": "4f954dbce4b0dcca54ed6ccd"}, {"code": "(fn ma [s & as] (reduce (fn [a b] (if (> a b) a b)) s as))", "problem": 38, "user": "4f951375e4b0dcca54ed6cc8"}, {"code": "(fn m [& l] (reduce (fn [a b] (cond (> a b) a :else b)) 0 l))", "problem": 38, "user": "4f8d34e5e4b02e764a0a51aa"}, {"code": "#(->> (sort > %&) first)", "problem": 38, "user": "4dc21233535d020aff1edf92"}, {"code": "(fn max-val [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4f95900ce4b0dcca54ed6cd3"}, {"code": "#(-> %& sort last)", "problem": 38, "user": "4f890488e4b033992c121c76"}, {"code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) coll))", "problem": 38, "user": "4f969214e4b0dcca54ed6cdd"}, {"code": "(fn [a & b]\n  (reduce #(if (> %2 %1) %2 %1) a b))", "problem": 38, "user": "4f73f78de4b044e54cd9a8f3"}, {"code": "(fn [& lili]\n  (reduce #(if (< %1 %2)\n             %2\n             %1)\n          lili))", "problem": 38, "user": "4f8db862e4b02e764a0a51b2"}, {"code": "(fn [& x] (reduce #(if (> %2 %1) %2 %1) x))", "problem": 38, "user": "4f9754d4e4b0dcca54ed6ce9"}, {"code": "(fn [a b & more]\n  (if (nil? b)\n    a\n    (recur (if (> a b) a b) (first more) (rest more))))", "problem": 38, "user": "4f991ec1e4b0dcca54ed6cfb"}, {"code": "(fn [& args]\n  (loop [coll args result 0]\n    (if (empty? coll) result\n        (recur (rest coll) (if (> (first coll) result) (first coll) result)))))", "problem": 38, "user": "4f98ead0e4b0dcca54ed6cf8"}, {"code": "(fn blah\n    ([x] x)\n    ([x y] (if (> x y) x y))\n    ([x y & more] (reduce blah (blah x y) more)))", "problem": 38, "user": "4f17aa97535d64f603146456"}, {"code": "(fn [& coll] (last (sort coll)))", "problem": 38, "user": "4f3cd535e4b0e243712b1f56"}, {"code": "(fn f ([x y] (if (> x y) x y))\n       ([x y & z] (reduce f (f x y ) z)))", "problem": 38, "user": "4f9920a3e4b0dcca54ed6cfc"}, {"code": "(fn [& a] (loop [[c & m] a n 0] (if (nil? c) n (recur m (if (> c n) c n)))))", "problem": 38, "user": "4e897fc5535de4250bdfe493"}, {"code": "(fn [& s] (reduce (fn [curr-max x] (if (< curr-max x) x curr-max)) s))", "problem": 38, "user": "4f97d8f3e4b0dcca54ed6ced"}, {"code": "(fn [& vals] (reduce #(if (> % %2) % %2) vals))", "problem": 38, "user": "4f9d53f3e4b0dcca54ed6d21"}, {"code": "(fn [& xs]\n  (last (sort xs)))", "problem": 38, "user": "4f9c7b0fe4b0dcca54ed6d1c"}, {"code": "(fn gt [& args] (reduce #(if (< %1 %2) %2 %1) args))", "problem": 38, "user": "4f9b3532e4b0dcca54ed6d13"}, {"code": "(fn [& x]\n  (loop [y x maxx 0]\n    (if-let [z (first y)]\n      (if (> z maxx)\n        (recur (drop 1 y) z)\n        (recur (drop 1 y) maxx))\n      maxx)))", "problem": 38, "user": "4e229b89535d04ed9115e81d"}, {"code": "(fn [x & xs] (loop [nums xs high x]\r\n                (let [fi (first nums)\r\n                      rst (rest nums)]\r\n                  (if (empty? nums)\r\n                    high\r\n                    (if (> fi high)\r\n                      (recur rst fi)\r\n                      (recur rst high))))))", "problem": 38, "user": "4f9aa2a6e4b0dcca54ed6d0c"}, {"code": "(fn [& s] (reduce (fn [a b] (if (> a b) a b)) s))", "problem": 38, "user": "4e5c3612535d8a8b8723a2be"}, {"code": "(fn [& head] (reduce #(if (> %1 %2) %1 %2) head))", "problem": 38, "user": "4fa07a93e4b0dcca54ed6d4d"}, {"code": "(fn [& s] (reduce (fn [a b] (if (< a b) b a)) s))", "problem": 38, "user": "4db3393e535df7e46ed9b6cc"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4f9fe2b9e4b0dcca54ed6d40"}, {"code": "(fn [ & s]\n((fn [r m]\n  (cond \n   (not (seq r)) m\n   (< (first r) m) (recur (rest r) m)\n   true (recur (rest r) (first r)))) (rest s) (first s)))", "problem": 38, "user": "4fa1183fe4b0dcca54ed6d57"}, {"code": "(fn [& args] \r\n  (reduce #(if (> %1 %2) %1 %2) args)\r\n)", "problem": 38, "user": "4f9f9ff5e4b0dcca54ed6d3a"}, {"code": "(fn\n  [& x]\n  (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "4fa13cd1e4b0dcca54ed6d59"}, {"code": "(fn [& m] (reduce #(if (> %1 %2) %1 %2) m))", "problem": 38, "user": "4f0d5338535d0136e6c22316"}, {"code": "(fn [& all] (- (apply min (map - all))))", "problem": 38, "user": "4fa1289de4b0dcca54ed6d58"}, {"code": "(fn\n  [x & xs]\n    (reduce #(if (> %1 %2) %1 %2) (flatten (cons x xs))))", "problem": 38, "user": "4f9d87fce4b0dcca54ed6d24"}, {"code": "(fn my-max [x y & more]\n  (let [r (if (> x y) x y)]\n    (if (empty? more) r (recur r (first more) (rest more)))))", "problem": 38, "user": "4f9c4080e4b0dcca54ed6d1a"}, {"code": "(comp last sort list)", "problem": 38, "user": "4f9d8083e4b0dcca54ed6d23"}, {"code": "(comp (partial reduce #(if (> % %2) % %2)) list)", "problem": 38, "user": "4f969a66e4b0dcca54ed6cde"}, {"code": "(fn [& rest] (reduce (fn [%1 %2] (if (< %1 %2) %2 %1)) rest))", "problem": 38, "user": "4fa2fa5ee4b081705acca186"}, {"code": "(fn [& vals] (reduce (fn [x y] (if (> x y) x y)) vals))", "problem": 38, "user": "4fa27e18e4b0dcca54ed6d68"}, {"code": "(fn [& items] (last (sort items)))", "problem": 38, "user": "4f5595d4e4b0a7574ea71805"}, {"code": "(fn [& coll] (last (sort coll)))", "problem": 38, "user": "4fa2b650e4b0dcca54ed6d6a"}, {"code": "(fn myMax\r\n     ([x] x)\r\n     ([x y] (if (> x y) x y))\r\n     ([x y & more]\r\n      (reduce myMax (myMax x y) more)))", "problem": 38, "user": "4f68a9bbe4b07046d9f4ef79"}, {"code": "(fn mx\n([x] x)\n([x y] (if (> x y) x y))\n([x y & more] (reduce mx (mx x y) more))\n)", "problem": 38, "user": "4dbeebcf535d020aff1edf6d"}, {"code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "problem": 38, "user": "4fa39b3ee4b081705acca191"}, {"code": "(fn [ & arg] (reduce #(if (> % %2) % %2) arg))", "problem": 38, "user": "4fa1aabee4b0dcca54ed6d61"}, {"code": "(fn [& X] (reduce #(if (> %1 %2) %1 %2) (seq X)))", "problem": 38, "user": "4f8b27b3e4b02e764a0a5179"}, {"code": "(fn [init & more]\n  (reduce #(if (> %1 %2) %1 %2) init more))", "problem": 38, "user": "4f9f7daae4b0dcca54ed6d37"}, {"code": "(fn [& s] (reduce (fn [x y] (if (< x y) y x)) s))", "problem": 38, "user": "4fa4ef2ee4b081705acca1a9"}, {"code": "(fn [x & remaining] \r\n  (if (= (count remaining) 0) \r\n    x \r\n    (let [y (if (> x (first remaining)) \r\n                  x \r\n                  (first remaining))]\r\n      (recur y (rest remaining)))))", "problem": 38, "user": "4e9894ab535dbda64a6f6b5d"}, {"code": "(fn [& l] (reduce #(if (> %1 %2) %1 %2) l))", "problem": 38, "user": "4fa30027e4b081705acca187"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4fa4d900e4b081705acca1a7"}, {"code": "(fn my-max [& xs]\n  (reduce #(if (> % %2) % %2) xs))", "problem": 38, "user": "4fa17b00e4b0dcca54ed6d5f"}, {"code": "(fn [ & params]\n  (reduce (fn [x y] (if (> x y) x y)) params))", "problem": 38, "user": "4fa5406fe4b081705acca1ac"}, {"code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "problem": 38, "user": "4fa0a4b1e4b0dcca54ed6d4f"}, {"code": "(fn [ & p ] (last (sort p)))", "problem": 38, "user": "4fa3f91fe4b081705acca196"}, {"code": "(fn m ([x] x) ([x y] (if (> x y) x y )) ([x y & more] (reduce m (m x y) more)))", "problem": 38, "user": "4f64f0a7e4b07046d9f4ef37"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "problem": 38, "user": "4f40ccd9e4b0e243712b1fc0"}, {"code": "(fn [x & y]\n  (reduce #(if (< %1 %2) %2 %1) x y))", "problem": 38, "user": "4fa6440ee4b081705acca1b5"}, {"code": "#(->>\n   (map - %&)\n   (apply min)\n   -)", "problem": 38, "user": "4fa5ddfde4b081705acca1b1"}, {"code": "(fn min-1\r\n  [x & more]\r\n  (loop [min x\r\n         more (seq more)]\r\n    (if-let [i (first more)]\r\n      (recur (if (> i min) i min) (next more))\r\n      min)))", "problem": 38, "user": "4f9970b3e4b0dcca54ed6cfd"}, {"code": "(fn mymax [x y & z]\n  (if (> x y) x y))", "problem": 38, "user": "4fa67030e4b081705acca1b7"}, {"code": "(fn [& x]\n  (last (sort x)))", "problem": 38, "user": "4e62294c535d8ccf87e9fe5f"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4fa58500e4b081705acca1ae"}, {"code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) more))", "problem": 38, "user": "4fa78336e4b081705acca1c4"}, {"code": "(fn [& args]\n  (loop [todo args mymax false]\n        (if (empty? todo) mymax\n            (let [[head & tail] todo]\n                 (recur tail\n                        (if (or (not mymax)\n                                (< mymax head))\n                            head\n                            mymax))))))", "problem": 38, "user": "4fa6d532e4b081705acca1be"}, {"code": "(fn[& z] (reduce #(if (> %1 %2) %1 %2) z))", "problem": 38, "user": "4f82ed48e4b033992c121c0e"}, {"code": "(fn [& xs] (reduce #(if (> % %2) % %2) xs))", "problem": 38, "user": "4f9acea6e4b0dcca54ed6d10"}, {"code": "(fn [& x] (reduce (fn [a b] (if (> a b) a b)) x))", "problem": 38, "user": "4fa820fde4b081705acca1ce"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4fa7b013e4b081705acca1c8"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs ))", "problem": 38, "user": "4f91f5b1e4b0dcca54ed6ca7"}, {"code": "(fn [x & more] (reduce (fn [x y] (if (> x y) x y)) (cons x more)))", "problem": 38, "user": "4fa6a491e4b081705acca1bc"}, {"code": "(fn [x & xs]\n  (if (empty? xs)\n    x\n    (if (> (first xs) x)\n      (recur (first xs) (rest xs))\n      (recur x (rest xs)))))", "problem": 38, "user": "4fa069c3e4b0dcca54ed6d4a"}, {"code": "#(reduce (fn [x y](if (> x y) x y)) %&)", "problem": 38, "user": "4ebbb6bc535dfed6da9c6d71"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4fa96e80e4b081705acca1df"}, {"code": "(fn [& more] (first (reverse (sort more))))", "problem": 38, "user": "4f9fe06fe4b0dcca54ed6d3f"}, {"code": "(fn [& more] (rand-nth [8 30 67]))", "problem": 38, "user": "4fa4f2f2e4b081705acca1aa"}, {"code": "(fn [& s]\n  (when-let [f (first s)]\n    (loop [mx f ts s]\n      (if (empty? ts) mx\n        (if (> (first ts) mx)\n          (recur (first ts) (rest ts))\n          (recur mx (rest ts)))))))", "problem": 38, "user": "4faa8de0e4b081705acca1f8"}, {"code": "(fn fmax [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "4faa9593e4b081705acca1f9"}, {"code": "(fn [& more] (reduce (fn [x y] (if (> x y) x y)) more))", "problem": 38, "user": "4faac363e4b081705acca200"}, {"code": "(fn [& x] (first (reverse (sort x))))", "problem": 38, "user": "4fa995a8e4b081705acca1e3"}, {"code": "(fn [& xs] (reduce (fn [l r] (if (< l r) r l)) xs))", "problem": 38, "user": "4faae01ae4b081705acca206"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4f4d0a52e4b03ad3f0c10c9d"}, {"code": "(comp last sorted-set)", "problem": 38, "user": "4fa99ee1e4b081705acca1e4"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4db091b7838c48654951d9c2"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4fabb1dce4b081705acca21a"}, {"code": "(fn [& x]\n  (reduce #(if (> % %2) % %2) x))", "problem": 38, "user": "4facd2fae4b081705acca22f"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4facff22e4b081705acca230"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4e6a4541535d8ccf87e9feb8"}, {"code": "(fn [& xs]\n  (reduce #(if (< %1 %2) %2 %1) xs))", "problem": 38, "user": "4fa982fae4b081705acca1e0"}, {"code": "#(first (sort > %&))", "problem": 38, "user": "4fab31a8e4b081705acca215"}, {"code": "(fn my-max [n & others]\n  (cond\n\t\t(empty? others) n\n\t\t(< n (apply my-max others)) (apply my-max others)\n\t\t:else n \n\t)\n)", "problem": 38, "user": "4faacc04e4b081705acca201"}, {"code": "(fn [& nums] (reduce #(if (> %1 %2) %1 %2) nums))", "problem": 38, "user": "4f85a75ce4b033992c121c48"}, {"code": "(comp last sort list)", "problem": 38, "user": "4f92884de4b0dcca54ed6caf"}, {"code": "(fn\n  [& some]\n  (reduce #(if (>= %1 %2) %1 %2) some))", "problem": 38, "user": "4fac10e8e4b081705acca222"}, {"code": "(\n  fn [& xs] (\n   (fn [nums num] (\n     if (seq nums)\n        (if (> (first nums)  num)\n        (recur (rest nums) (first nums))\n        (recur (rest nums) num) \n        )\n     num\n  )\n) (rest xs) (first xs)\n)\n)", "problem": 38, "user": "4f8da0e2e4b02e764a0a51b1"}, {"code": "(fn [& xs] (reduce #(if (> % %2) % %2) xs))", "problem": 38, "user": "4fa9da14e4b081705acca1e7"}, {"code": "(fn [& l] (reduce (fn [acc cur] (if (> cur acc) cur acc)) 0 l))", "problem": 38, "user": "4fad77a6e4b081705acca23a"}, {"code": "(fn [& rest]\n  (reduce\n    #(if (> % %2) % %2)\n    rest))", "problem": 38, "user": "4f8dc9dce4b02e764a0a51b6"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4fae0b85e4b081705acca245"}, {"code": "(fn [& args] (loop [as args m 0]\n  (cond (empty? as) m\n        (> (first as) m) (recur (rest as) (first as))\n        :else (recur (rest as) m))))", "problem": 38, "user": "4fadbc3fe4b081705acca23f"}, {"code": "(fn [& s] (reduce #(if (< %1 %2) %2 %1) s))", "problem": 38, "user": "4faccddae4b081705acca22e"}, {"code": "(fn [& x]\n  (loop [s x r (first x)]\n    (cond (empty? s) r\n          (> (first s) r) (recur (rest s) (first s))\n          :else (recur (rest s) r))))", "problem": 38, "user": "4fae258de4b081705acca246"}, {"code": "(fn my-max \n    ([x] x)\n    ([x y] (if (> y x) y x))\n    ([x y & more] (reduce my-max (my-max x y) more))\n)", "problem": 38, "user": "4fae5401e4b081705acca249"}, {"code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "problem": 38, "user": "4fad33e8e4b081705acca236"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4f99cfc2e4b0dcca54ed6d02"}, {"code": "(fn [& coll] (reduce (fn [a b] (cond (> a b) a true b)) 0 coll))", "problem": 38, "user": "4fad89f0e4b081705acca23b"}, {"code": "(fn [& in]\n  (loop [seq in h 0]\n    (if (= seq '())\n      h\n      (recur (rest seq)\n          (if (< h (first seq))\n              (first seq)\n              h)))))", "problem": 38, "user": "4faec810e4b081705acca24e"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4fab259ae4b081705acca212"}, {"code": "(fn m \r\n  ([x y] (if (< x y) y x))\r\n\t([x y & args] (reduce m (m x y) args ))\r\n)", "problem": 38, "user": "4f5d0f25e4b0030a34fb2b33"}, {"code": "(fn maxipad [x & xs]\n  (if (empty? xs)\n    x\n    (let [mp (apply maxipad xs)]\n      (if (> mp x) mp x))))", "problem": 38, "user": "4fac1d77e4b081705acca223"}, {"code": "(fn [& args]( reduce (fn [x y]( if(> x y) x y)) args))", "problem": 38, "user": "4fb069b1e4b081705acca266"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4f563cfae4b0a7574ea7181b"}, {"code": "(fn [& as] \n  (reduce #(if (> %1 %2) %1 %2) as))", "problem": 38, "user": "4f0374a0535dcb61093f6ad9"}, {"code": "(fn max-val\n   [& seqr]\n   (reduce (fn [x y]\n             (if (< x y) y x)) seqr))", "problem": 38, "user": "4fafd067e4b081705acca259"}, {"code": "(fn [ & x] (reduce (fn [a b] (if  (> a b) a b )) x))", "problem": 38, "user": "4f8b81d4e4b02e764a0a517f"}, {"code": "(fn [& nums] (reduce (fn [a b] (if (< a b) b a)) nums))", "problem": 38, "user": "4f8386c5e4b033992c121c1d"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4fb2101ce4b081705acca284"}, {"code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4f9a7dc0e4b0dcca54ed6d0b"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "problem": 38, "user": "4fb0bd28e4b081705acca26b"}, {"code": "(fn [a b & more] (if(> a b) a b))", "problem": 38, "user": "4f8e21bde4b0d4e659cdde64"}, {"code": "(fn my-max [& nums]\n  (if (empty? nums) 0\n    (let [rmax (apply my-max (rest nums))]\n      (if (> (first nums) rmax)\n             (first nums)\n             rmax))))", "problem": 38, "user": "4fab0b6be4b081705acca20c"}, {"code": "(fn [& args] (reduce #(if (> %2 %) %2 %) args))", "problem": 38, "user": "4f9a0064e4b0dcca54ed6d03"}, {"code": "(fn [& xs]\n  (reduce (fn [x y] (if (> x y) x y)) xs))", "problem": 38, "user": "4fb213b7e4b081705acca285"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4fb2f9b2e4b081705acca294"}, {"code": "(fn [x & xs]\n    (letfn [(f [m ys]\n        (if (empty? ys)\n            m\n            (let [z (first ys) zs (rest ys)]\n                (if (> z m)\n                    (f z zs)\n                    (f m zs)))))]\n        (f x xs)))", "problem": 38, "user": "4fb4099be4b081705acca2a9"}, {"code": "#(first (sort > %&))", "problem": 38, "user": "4fa0d106e4b0dcca54ed6d53"}, {"code": "(fn [z & coll](reduce (fn [x y] (cond (< x y) y\r\n  \t\t\t:else x)) z coll))", "problem": 38, "user": "4fb23582e4b081705acca28a"}, {"code": "(fn my-max [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "problem": 38, "user": "4f859146e4b033992c121c46"}, {"code": "(fn mx [& x] \n  (loop [ls x m (first ls)]\n    (print x)\n    (if (empty? ls) \n          m \n          (let [zb (rest ls)\n                fs (first ls)]\n            (if (> fs m) \n                  (recur zb fs)\n                  (recur zb m))))))", "problem": 38, "user": "4fb4303fe4b081705acca2ac"}, {"code": "#(first (sort > %&))", "problem": 38, "user": "4fb37882e4b081705acca2a0"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "4fad1b2be4b081705acca233"}, {"code": "(fn [& a] (last (sort a)))", "problem": 38, "user": "4fb3b865e4b081705acca2a2"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4defd021535d08e6dec9fe13"}, {"code": "(fn blah [& lst]\n  (reduce #(if (> % %2) % %2) lst))", "problem": 38, "user": "4fab0c0ae4b081705acca20d"}, {"code": "(fn [& args]\n  (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "4fb12b35e4b081705acca275"}, {"code": "(fn [& col ]    (first  (reverse  (sort col ) )) )", "problem": 38, "user": "4ea8f887535d7eef30807300"}, {"code": "(fn [x & xs] (reduce #(if (> %1 %2) %1 %2) x xs))", "problem": 38, "user": "4f98da04e4b0dcca54ed6cf7"}, {"code": "(fn [& args]\n  (loop [s args, m nil]\n    (if-let [e (first s)]\n      (if (or (nil? m) (< m e))\n        (recur (rest s) e)\n        (recur (rest s) m))\n      m)))", "problem": 38, "user": "4f284db6e4b0d6649770a014"}, {"code": "(fn meshmax ([x] x) ([x y] (if (> x y) x y)) ([x y & more] (reduce meshmax (meshmax x y) more)))", "problem": 38, "user": "4fb510b5e4b081705acca2b8"}, {"code": "(fn [& p]\n  (reduce #(if (< %1 %2) %2 %1) p)\n)", "problem": 38, "user": "4fb79872e4b081705acca2d2"}, {"code": "(fn [& c] (reduce #(if (> %1 %2) %1 %2) 0 c))", "problem": 38, "user": "4fb54e50e4b081705acca2bb"}, {"code": "(fn mymax [& nums]\n  (reduce (fn [x y] (if (> x y) x y)) nums)\n)", "problem": 38, "user": "4fb3fec7e4b081705acca2a7"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "4fa11204e4b0dcca54ed6d56"}, {"code": "#(-> %& sort last)", "problem": 38, "user": "4fabbb97e4b081705acca21d"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4e83bb61535db62dc21a62dd"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) (seq args)))", "problem": 38, "user": "4fba0877e4b081705acca2dd"}, {"code": "(fn [& args] (first (sort > args)))", "problem": 38, "user": "4fb5033ce4b081705acca2b5"}, {"code": "(fn [& v]\n  (reduce #(if (> %1 %2)\n              %1\n              %2) v))", "problem": 38, "user": "4f8cb9b2e4b02e764a0a51a6"}, {"code": "(fn [& c] (reduce #(if (> %1 %2) %1 %2) c))", "problem": 38, "user": "4edfdfa2535d10e5ff6f5346"}, {"code": "(fn [& n] (reduce #(if (> %1 %2) %1 %2) n))", "problem": 38, "user": "4fb65f2fe4b081705acca2c7"}, {"code": "(fn calc [f & more] \n  (cond \n    (empty? more) f\n    (> (first more) f) (first more)\n    :else 30))", "problem": 38, "user": "4f8c50f9e4b02e764a0a5195"}, {"code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) args))", "problem": 38, "user": "4fba7d1ee4b081705acca2e0"}, {"code": "(fn [& x] (reduce (fn [x y] (if (> x y) x y)) x))", "problem": 38, "user": "4f7e07f4e4b06e829148e1c9"}, {"code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "problem": 38, "user": "4f05ea25535dcb61093f6c02"}, {"code": "(fn find-max [& coll]\n  (reduce #(if (> %1 %2) %1 %2) coll))", "problem": 38, "user": "4faafccde4b081705acca209"}, {"code": "(fn [& more] (last (sort more)))", "problem": 38, "user": "4fab1bede4b081705acca20f"}, {"code": "(fn [& s] (reduce (fn [a b] (if (> a b) a b)) s))", "problem": 38, "user": "4fbd24d2e4b081705acca2ff"}, {"code": "(fn [& nums] (first (sort > nums)))", "problem": 38, "user": "4fb86dc9e4b081705acca2d8"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4fb0a1e0e4b081705acca269"}, {"code": "(fn[& x] (first (reverse (sort x))))", "problem": 38, "user": "4fb3dd1ee4b081705acca2a5"}, {"code": "#( first (sort > %&))", "problem": 38, "user": "4ebfdfda535dfed6da9c6d9e"}, {"code": "(fn max-num [x & args] (reduce #(cond (>= %1 %2) %1 (> %2 %1) %2) x args))", "problem": 38, "user": "4fba77fae4b081705acca2df"}, {"code": "(fn max-val [& xs]\n  (let [max-2 (fn [x y]\n          (cond\n            (> x y) x\n            (< x y) y\n            :else x))]\n    (reduce max-2 xs)))", "problem": 38, "user": "4fbc0011e4b081705acca2f0"}, {"code": "#(reduce (fn [x y] (if (> x y) x y)) %1 %&)", "problem": 38, "user": "4faa6184e4b081705acca1f1"}, {"code": "(fn [& s] (-> s sort last))", "problem": 38, "user": "4fc0221ce4b081705acca322"}, {"code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) s))", "problem": 38, "user": "4fc13433e4b081705acca32b"}, {"code": "(fn [& vals]\n    (reduce \n      (fn [m v]\n          (if (> v m) v m))\n      vals))", "problem": 38, "user": "4ed6d81a535d10e5ff6f52ea"}, {"code": "(fn [& args] \n  (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "4fbd12a5e4b081705acca2fd"}, {"code": "(fn [& rest] (reduce (fn [a b] (if (> a b) a b)) rest))", "problem": 38, "user": "4fbfe9a4e4b081705acca31f"}, {"code": "(fn mymax\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more ]\n       (reduce mymax (mymax x y) more)))", "problem": 38, "user": "4fbd292fe4b081705acca300"}, {"code": "(fn maximal  \n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n   (reduce maximal (maximal x y) more)))", "problem": 38, "user": "4fbfbd4fe4b081705acca31c"}, {"code": "(fn[& args]\n   (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4fc18846e4b081705acca331"}, {"code": "(fn [& xs] (reduce (fn [x y] (if (> x y) x y)) xs))", "problem": 38, "user": "4fb804f7e4b081705acca2d6"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) 0 x))", "problem": 38, "user": "4fc0853ae4b081705acca327"}, {"code": "(fn [& args] ((comp last sort) args))", "problem": 38, "user": "4fbe42b7e4b081705acca30f"}, {"code": "(fn [& s] (last (sort s)))", "problem": 38, "user": "4fb01e53e4b081705acca260"}, {"code": "(fn [& l] (reduce (fn [a b] (if (> a b) a b)) 0 l))", "problem": 38, "user": "4fbdcb87e4b081705acca30a"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4e51c67a535d302ef430da6a"}, {"code": "(fn [& xs]\n  (loop [max_val (first xs) xs (rest xs)]\n    (if (empty? xs)\n      max_val\n      (recur (if (> (first xs) max_val) (first xs) max_val) (rest xs)))))", "problem": 38, "user": "4fb4f42ae4b081705acca2b4"}, {"code": "(fn [& s](reduce #(if (> % %2) % %2) s))", "problem": 38, "user": "4f77ad6de4b0fbe0118ec580"}, {"code": "(fn get-max [& args]\n  (first (sort > args)))", "problem": 38, "user": "4f7431d2e4b044e54cd9a8f7"}, {"code": "(fn [& col] (reduce #(if (> % %2) % %2) col))", "problem": 38, "user": "4fc4eadee4b081705acca353"}, {"code": "(fn [first & rest]\n  (reduce #(if (< % %2) %2 %) first rest))", "problem": 38, "user": "4fc4c6afe4b081705acca34d"}, {"code": "(fn [& rest] (last (sort rest)))", "problem": 38, "user": "4f6fd91ae4b07046d9f4efed"}, {"code": "#(last (sort %&))\n;; (comp last sort list)", "problem": 38, "user": "4db1b5841254ad5b4805fa70"}, {"code": "#(reduce (fn [a b]\n  (if (> a b) a b)) 0 %&)", "problem": 38, "user": "4fc4dca8e4b081705acca350"}, {"code": "(fn max-reduce [x & more]\n  (reduce (fn [acc y] {:pre [(number? y)]} (if (> y acc) y acc))\n          x more))", "problem": 38, "user": "4fc6305de4b0ee37620e180b"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4fb1d907e4b081705acca282"}, {"code": "(fn [ x & xs]\n  (loop [m x l xs]\n    (cond (empty? l) m\n      :else (recur (if (> (first xs) m)\n                      (first xs)\n                      m)\n                  (rest l)))))", "problem": 38, "user": "4fbd1ebbe4b081705acca2fe"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4fc5f83be4b0ee37620e1806"}, {"code": "(fn [x & args]\n  (if-let [ys (seq args)]\n\t\t(let [y (first ys)]\n\t\t\t(recur (if (> y x) y x) (rest ys)))\n\t\tx))", "problem": 38, "user": "4fc40b0be4b081705acca344"}, {"code": "(fn [& xs] (first (reverse (sort xs))))", "problem": 38, "user": "4ec53831535d6d7199dd3684"}, {"code": "(fn [& nums] (reduce #(if (>= %1 %2) %1 %2) nums))", "problem": 38, "user": "4fc66c43e4b0ee37620e1812"}, {"code": "(fn [& args] (reduce (fn [acc v] (if (> v acc) v acc)) args))", "problem": 38, "user": "4fc7db47e4b0ee37620e182a"}, {"code": "(fn [n & m] (reduce #(if (> %1 %2) %1 %2) n m))", "problem": 38, "user": "4fbfe43ce4b081705acca31e"}, {"code": "(fn [& l]\n  (reduce (fn [x y] (if (> x y) x y)) l))", "problem": 38, "user": "4fc8c8d8e4b0ee37620e183b"}, {"code": "(fn [& nums] (reduce (fn [a b] (if (> a b) a b)) nums))", "problem": 38, "user": "4fc50441e4b081705acca36f"}, {"code": "(fn my-max\n  ([x] x)\n  ([x y] (if (< x y) y x))\n  ([x y & more]\n     (if  (empty? more)\n       (my-max x y)\n       (if (< x y)\n        (recur y (first more) (rest more))\n        (recur x (first more) (rest more))))))", "problem": 38, "user": "4f515bd3e4b03ad3f0c10d1f"}, {"code": "(fn [& args]\n  (first (reverse (sort args))))", "problem": 38, "user": "4ecbd630535df97575fdabe1"}, {"code": "(fn mymax  \n  [v & coll]\n    (cond\n      (empty? coll) v\n      (> (first coll) v) (apply mymax (first coll) (rest coll))\n      :else (apply mymax v (rest coll))))", "problem": 38, "user": "4fbb9d80e4b081705acca2ea"}, {"code": "(fn my-mx [x & xs]\n  (reduce #(if (> %1 %2) %1 %2) x xs)\n)", "problem": 38, "user": "4fc7b8f5e4b0ee37620e1828"}, {"code": "(fn[& nums](first (loop [cnt 0 acc [0]] (if (>= cnt (count nums))  acc\n          (recur (inc cnt) (cond(< (nth nums cnt) (first acc)) acc :else (cons (nth nums cnt) acc)))))))", "problem": 38, "user": "4f32135ae4b0d6649770a08e"}, {"code": "(fn [& l] (reduce #(if (< %1 %2) %2 %1) l))", "problem": 38, "user": "4fca1cd6e4b0ee37620e184c"}, {"code": "(fn [& n] (last (sort n)))", "problem": 38, "user": "4fac7ec5e4b081705acca229"}, {"code": "(fn f\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n   (reduce f (f x y) more))\n)", "problem": 38, "user": "4fc7b079e4b0ee37620e1827"}, {"code": "(fn maximum [& more]\n  (reduce #(if (> %1 %2) %1 %2) more))", "problem": 38, "user": "4fc50bcbe4b081705acca375"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4f94d3a5e4b0dcca54ed6cc5"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "4fc52278e4b081705acca37c"}, {"code": "(fn [x & xs]\n  (reduce\n    (fn [a b]\n      (if (> a b)\n        a\n        b))\n  (cons x xs)))", "problem": 38, "user": "4fc8f1fee4b0ee37620e183f"}, {"code": "(fn my-max [x & xs] (reduce (fn [x y] (if (> x y) x y)) x xs))", "problem": 38, "user": "4fcaf7a4e4b0ee37620e1857"}, {"code": "(fn [& ns] (reduce #(if (> %1 %2) %1 %2) ns))", "problem": 38, "user": "4f61c3cfe4b0defedf855fc6"}, {"code": "(fn [f & more]\n  (loop [m f, xs more]\n    (if (empty? xs) m\n      (if (> (first xs) m)\n        (recur (first xs) (rest xs))\n        (recur m (rest xs))))))", "problem": 38, "user": "4fcbc18ae4b0ee37620e185c"}, {"code": "(fn this ([x] x) ([x y] (if (> x y) x y)) ([x y & more] (reduce this (this x y) more)))", "problem": 38, "user": "4f9907f8e4b0dcca54ed6cfa"}, {"code": "(fn [& nums] (reduce (fn [x y] (if (> x y) x y)) nums))", "problem": 38, "user": "4fcc6cb3e4b0ee37620e1861"}, {"code": "(fn [ & m ] \n  (reduce #( if (> %1 %2) %1 %2 ) m) )", "problem": 38, "user": "4fc43a8ee4b081705acca346"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "4e83b1af535db62dc21a62dc"}, {"code": "(fn [& x] (reduce (fn [a b] (if (> a b) a b)) x))", "problem": 38, "user": "4f826548e4b033992c121c08"}, {"code": "(comp last sorted-set)", "problem": 38, "user": "4fbacdbae4b081705acca2e5"}, {"code": "(fn [f & r] (reduce (fn[a b] (if (> a b) a b)) (cons f r)))", "problem": 38, "user": "4f148418535d64f60314643a"}, {"code": "#(-> %& sort last)", "problem": 38, "user": "4fcc103fe4b0ee37620e185f"}, {"code": "(fn [& x] (reduce #(if (<= %1 %2) %2 %1) x))", "problem": 38, "user": "4fc67081e4b0ee37620e1813"}, {"code": "(fn [& coll] \n  (loop [maxim 0 column coll]\n\t\t(if (first column)\n\t\t\t(if (> (first column) maxim)\n\t\t\t\t(recur (first column) (rest column)) \n\t\t\t\t(recur maxim (rest column))\n\t\t\t) \n\t\t\tmaxim\n\t\t)\n\t)\n)", "problem": 38, "user": "4fcba3f9e4b0ee37620e185b"}, {"code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) more))", "problem": 38, "user": "4fc863a9e4b0ee37620e1831"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4fc2e302e4b081705acca33a"}, {"code": "(fn mymax [head & r]\n  (if (= 0 (count r))\n    head\n    (let [tail (apply mymax r)]\n      (if (> head tail) head tail)\n      )\n    )\n  )", "problem": 38, "user": "4fcad14ce4b0ee37620e1856"}, {"code": "(fn [& args]\n  (last (sort args)))", "problem": 38, "user": "4fcd1bbde4b065de69964ca4"}, {"code": "(fn my-max\n   ([x] x)\n   ([x y]\n      (if (> x y) x y))\n   ([x y & rest]\n      (my-max x (apply my-max (cons y rest)))))", "problem": 38, "user": "4fc8ce6ce4b0ee37620e183c"}, {"code": "(fn mx ([x] x)\n    ([x y & zs]\n      (if (> x y)\n        (apply mx x zs)\n        (apply mx y zs))))", "problem": 38, "user": "4fce5474e4b0d4b2a7a9d451"}, {"code": "(fn [& args]\n  (loop [M -1 S args]\n    (if (empty? S)\n      M\n      (if (> (first S) M)\n        (recur (first S) (rest S))\n        (recur M (rest S))))))", "problem": 38, "user": "4fc52d79e4b081705acca386"}, {"code": "(fn [x & more] (letfn [ (m [ a b] ( if (> a b) a b)) ] (reduce m (cons x more))))", "problem": 38, "user": "4fccdc75e4b0ee37620e186d"}, {"code": "(fn [x & l]\n  (cond\n    (empty? l) x\n    (> (first l) x) (recur (first l) (rest l))\n    :else (recur x (rest l))\n    )\n)", "problem": 38, "user": "4daf4d2fedd6309eace4d178"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) 0 xs))", "problem": 38, "user": "4fa05b99e4b0dcca54ed6d47"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) 0 xs))", "problem": 38, "user": "4fc34787e4b081705acca33e"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4ec92a6e535d6d7199dd36fb"}, {"code": "(fn [& nums]\n  (first (sort #(> %1 %2) nums)))", "problem": 38, "user": "4ea2382f535d7eef308072bc"}, {"code": "(fn ma [f & l]\n  (if (empty? l)\nf\n(if (> f (first l))\n(apply ma (conj (rest l) f))\n(apply ma l)\n)))", "problem": 38, "user": "4fcebce4e4b03432b189f404"}, {"code": "(fn mymax \n  ([x y] \n    (if (> x y) x y)) \n  ([x y & more] \n    (reduce mymax (mymax x y) more)))", "problem": 38, "user": "4fbcbd50e4b081705acca2f9"}, {"code": "#(reduce (fn [x y] (if (> y x) y x)) %&)", "problem": 38, "user": "4fd0d058e4b04c3a95aa0408"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "4fa85ae4e4b081705acca1d3"}, {"code": "(fn [& xs] (reduce #(if (< % %2) %2 %) xs))", "problem": 38, "user": "4fd22e70e4b04c3a95aa041c"}, {"code": "(fn \n  [& args]\n    (first (sort > args)))", "problem": 38, "user": "4fd16778e4b04c3a95aa040f"}, {"code": "(fn [& s] (last (sort s)))", "problem": 38, "user": "4fd3b3d9e4b0d4de60cee362"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4fcd155de4b065de69964ca3"}, {"code": "(fn mymax [& vals] (\r\n  let [f (first vals)]\r\n  (if (nil? (next vals))\r\n    f\r\n    (if (> f (second vals))\r\n      f\r\n      (second vals)))\r\n))", "problem": 38, "user": "4fd459cfe4b0d4de60cee36b"}, {"code": "(fn mymax [f & s]\n  (reduce #(if (> %1 %2) %1 %2) f s))", "problem": 38, "user": "4eb99b3d535dfed6da9c6d57"}, {"code": "(fn srt [& l] (last (sort l)))", "problem": 38, "user": "4fc3b0d4e4b081705acca343"}, {"code": "#(-> %& sort last)", "problem": 38, "user": "4fd51da9e4b0d4de60cee371"}, {"code": "(fn [ & numbers] (\n  (fn r [li curMax] (\n    if (= nil (first li))\n       curMax\n       (if (> (first li) curMax) \n           (r (rest li) (first li))\n           (r (rest li) curMax))\n)) (rest numbers) (first numbers)\n)\n)", "problem": 38, "user": "4fcf5292e4b03432b189f40e"}, {"code": "(fn [& nums] (reduce #(if (> %1 %2) %1 %2) nums))", "problem": 38, "user": "4fd1971ae4b04c3a95aa0412"}, {"code": "(fn [& l]\n  (reduce #(if (> % %2) % %2) l))", "problem": 38, "user": "4fc93728e4b0ee37620e1844"}, {"code": "(fn f [& a]\n  (reduce #(if (< % %2) %2 %) a))", "problem": 38, "user": "4fd2789ee4b04c3a95aa0422"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4e929dd0535dbda64a6f6b05"}, {"code": "(fn [& xs]\n  (-> xs sort last))", "problem": 38, "user": "4fccb31be4b0ee37620e1868"}, {"code": "(fn [& a]\n  (let [impl (fn [m xs]\n    (if (empty? xs)\n      m\n      (if (> (first xs) m)\n        (recur (first xs) (rest xs))\n        (recur m (rest xs)))))]\n    (impl 0 a)))", "problem": 38, "user": "4fd2e5d8e4b04c3a95aa0427"}, {"code": "(fn [ & more] (reduce #(if (>= %1 %2) %1 %2) more))", "problem": 38, "user": "4fd29d7ce4b04c3a95aa0424"}, {"code": "(fn [& r]\n  (reduce #(if (> % %2) % %2) r))", "problem": 38, "user": "4fd2529ae4b04c3a95aa041f"}, {"code": "(fn [& s] (reduce #(if (> %2 %1) %2 %1) s))", "problem": 38, "user": "4dac61e18cc9d6edb9beb0b3"}, {"code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "problem": 38, "user": "4fadbb17e4b081705acca23e"}, {"code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4fa9e9c6e4b081705acca1e9"}, {"code": "(fn [& args]\n  (loop [as  args\n         acc 0]\n    (cond (empty? as) acc\n          :else       (recur (rest as)\n                             (cond (> (first as) acc) (first as)\n                                   :else              acc)))))", "problem": 38, "user": "4f84a4a4e4b033992c121c39"}, {"code": "(fn [& c] (reduce #(if (> %1 %2) %1 %2) c))", "problem": 38, "user": "4da8dd6e30acd6ed12482a68"}, {"code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) more))", "problem": 38, "user": "4fd7962ee4b0dab7d829f385"}, {"code": "(fn [& numbers] (reduce #(if (> %1 %2) %1 %2) numbers))", "problem": 38, "user": "4fd9dc87e4b05e33b9224f3e"}, {"code": "(fn [x & args] \n  (reduce (fn [a b] (if (> a b) a b)) x args))", "problem": 38, "user": "4fd9f5dbe4b05e33b9224f41"}, {"code": "(fn [largest & mySequence]\n  (cond \n    (empty? mySequence) largest\n    (> (first mySequence) largest) (recur (first mySequence) (rest mySequence))\n    :else (recur largest (rest mySequence))\n  ))", "problem": 38, "user": "4fd1fa71e4b04c3a95aa0418"}, {"code": "(fn [x & xs] (reduce #(if (< % %2) %2 %) x xs))", "problem": 38, "user": "4fd96694e4b05e33b9224f37"}, {"code": "(fn foo [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4fd9ee7de4b05e33b9224f3f"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "4fda016ae4b05e33b9224f42"}, {"code": "(fn my-max [& more]\n  (letfn [(do-my-max [mx nums]\n            (if (zero? (count nums))\n              mx\n              (if (< mx (first nums))\n                (do-my-max (first nums) (rest nums))\n                (do-my-max mx (rest nums)))))]\n    (do-my-max -999 more)))", "problem": 38, "user": "4fc6d2c1e4b0ee37620e181b"}, {"code": "(fn [c & r]\n  (reduce #(if (> %1 %2) %1 %2) c r)\n)", "problem": 38, "user": "4fd6028ce4b0d4de60cee37b"}, {"code": "(fn getMax[x & args] (\n  reduce #(if (> %2 %1) %2 %1) x args\n  )\n)", "problem": 38, "user": "4fce75cfe4b03432b189f400"}, {"code": "(fn [& z](reduce (fn [val x] (if(> val x) val x)) z))", "problem": 38, "user": "4fd15334e4b04c3a95aa040d"}, {"code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4f9fb08ae4b0dcca54ed6d3c"}, {"code": "(fn [& vals] (first (sort > vals)))", "problem": 38, "user": "4dad8c92c9a9d6ed1699dc57"}, {"code": "(fn [& more]\n        (reduce #(if (> % %2) % %2) more))", "problem": 38, "user": "4fb591aee4b081705acca2c0"}, {"code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "4fca2ef0e4b0ee37620e184e"}, {"code": "(fn [& x]\n  (\n    (fn [l a]\n      (cond\n        (empty? l) a\n        (> (first l) a) (recur (rest l) (first l))\n        :else           (recur (rest l) a)))\n    x -1))", "problem": 38, "user": "4fd153cee4b04c3a95aa040e"}, {"code": "(fn [& more]\r\n(reduce #(if (< % %2) %2 %) more))", "problem": 38, "user": "4ee6166e535d93acb0a66854"}, {"code": "(fn this\n      ([x] x)\n      ([x y] (if (> x y) x y))\n      ([x y & more]\n          (apply this (this x y) more)))", "problem": 38, "user": "4fdd27f3e4b05e33b9224f78"}, {"code": "(fn maxx\n  [& xs]\n  (reduce #(cond\n    (> %2 %1) %2\n    :else %1) (first xs) xs))", "problem": 38, "user": "4fd6f4d8e4b0dab7d829f37b"}, {"code": "(fn m [& l]\n  (let [a (first l)]\n    (if (= (count l) 1)\n      a\n      (let [b (apply m (rest l))]\n        (if (> a b) a b)))))", "problem": 38, "user": "4fde492be4b05e33b9224f8a"}, {"code": "#(first (sort > %&))", "problem": 38, "user": "4e5a5ecb535d8a8b8723a2ac"}, {"code": "(fn [& lst] (loop [lmx (first lst)\n                   lst (rest lst)]\n              (cond (empty? lst) lmx\n                    (> (first lst) lmx) (recur (first lst) (rest lst))\n                    :else (recur lmx (rest lst)))))", "problem": 38, "user": "4f4a8707e4b0d56e7bb92c12"}, {"code": "(fn [& items] (last (sort items)))", "problem": 38, "user": "4fdbc075e4b05e33b9224f61"}, {"code": "(fn [& args] (first (reverse (sort args))))", "problem": 38, "user": "4e70a7c1535d5021c1a8963c"}, {"code": "(fn f [& a]\n  (reduce (fn [x y] (if (> x y) x y)) a ))", "problem": 38, "user": "4fdc3065e4b05e33b9224f6b"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "problem": 38, "user": "4fe0d08de4b0dd6cd5ce362d"}, {"code": "(fn [ & more ]  \n    more\n    (loop  [my-max  0  my-rest  more]\n        (if (= 0 (count my-rest))\n            ;true\n            my-max\n            ;false\n            (recur  \n                (if (> (first my-rest)  my-max)   (first my-rest)   my-max)  \n                (rest  my-rest)\n            )\n        )\n    )\n)", "problem": 38, "user": "4fdf750be4b05e33b9224f9c"}, {"code": "(fn [& lst] (last (sort lst)))", "problem": 38, "user": "4fe229f0e4b0dd6cd5ce3642"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4fe13ad7e4b0dd6cd5ce3632"}, {"code": "(fn [& args]\n  (last (sort args)))", "problem": 38, "user": "4fe15ffee4b0dd6cd5ce3634"}, {"code": "(fn gm [& items]\n  (reduce #(if (> %1 %2) %1 %2) items))", "problem": 38, "user": "4fd9d162e4b05e33b9224f3c"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4fe2501ae4b0dd6cd5ce3644"}, {"code": "(fn [& numbers]\n   (if (empty? numbers)\n     nil\n     (loop [m (Integer/MIN_VALUE) l numbers]\n     (if (empty? l)\n       m\n       (recur (if (> (first l) m) (first l) m) (next l))))))", "problem": 38, "user": "4fd7f892e4b0dab7d829f38d"}, {"code": "#(loop [c %1 r %&]\n  \t\t(if (empty? r)\n\t\t\t\tc\n\t\t\t\t(recur \n\t\t\t\t\t(let [x (first r)]\n\t\t\t\t\t\t(if (< c x) x c) \n\t\t\t\t\t)\n\t\t\t\t\t(rest r)\n\t\t\t\t)\n\t\t\t)\n\n\t)", "problem": 38, "user": "4f56d6f3e4b0a7574ea7182c"}, {"code": "(fn my-max [x & more]\r\n  (loop [m x\r\n         coll more]\r\n    (if (empty? coll)\r\n      m\r\n      (let [f (first coll)]\r\n        (recur (if (> f m) f m) (rest coll))))))", "problem": 38, "user": "4fe54ee8e4b0e8f79898fec3"}, {"code": "(fn [x & more] (first (reverse (sort (cons x more)))))", "problem": 38, "user": "4ec56864535d6d7199dd369d"}, {"code": "(fn [first-item & args] \n  (loop [l args m first-item]\n      (cond\n        (empty? l) m\n        (> (first l) m) (recur (next l) (first l)) \n        true (recur (next l) m)\n      )\n    )\n)", "problem": 38, "user": "4fe588b6e4b0e8f79898fec5"}, {"code": "(fn mymax ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n   (reduce mymax (mymax x y) more)))", "problem": 38, "user": "4fe721e5e4b0e8f79898feda"}, {"code": "(fn mx ([x y] (if (> x y) x y))\n([x y & zs] (reduce mx (mx x y) zs)))", "problem": 38, "user": "4fae4c11e4b081705acca248"}, {"code": "(fn [& s]\n  (reduce #(if (> %1 %2) %1 %2) s))", "problem": 38, "user": "4fb57e06e4b081705acca2bf"}, {"code": "(comp last sort list)", "problem": 38, "user": "4fdec88fe4b05e33b9224f8e"}, {"code": "(fn [& seq]\n  (reduce #(if (> %1 %2) %1 %2) seq))", "problem": 38, "user": "4f1e4ab5535d64f603146496"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4fd0af0ee4b04c3a95aa0405"}, {"code": "(fn [& vals] (reduce #(if (> %1 %2) %1 %2) vals))", "problem": 38, "user": "4fe84c74e4b07c9f6fd12c3c"}, {"code": "(fn [x & r]\n  (loop [s r n x]\n    (if (empty? s)\n      n\n      (recur (rest s) (if (> (first s) n) (first s) n)))))", "problem": 38, "user": "4fdf4e2be4b05e33b9224f96"}, {"code": "(fn [& s]\n  (loop [[x y & t] s]\n       (if (nil? y)\n         x\n         (recur (cons (if (> y x) y x) t)))))", "problem": 38, "user": "4fe893d3e4b07c9f6fd12c4e"}, {"code": "(fn [x y & n]\n  (let [m #(if (> % %2) % %2) ]\n  (reduce m (m x y) n)\n)\n)", "problem": 38, "user": "4fd11a93e4b04c3a95aa040a"}, {"code": "(fn [& args]\r\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4f07ad89535dcb61093f6c2a"}, {"code": "(fn [n & x] (last (sort (cons n x))))", "problem": 38, "user": "4fe1597fe4b0dd6cd5ce3633"}, {"code": "(fn [& l] (reduce #(if (< %1 %2) %2 %1) l))", "problem": 38, "user": "4fe8aef4e4b07c9f6fd12c6c"}, {"code": "(fn max-fn\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n   (reduce max-fn (max-fn x y) more)))", "problem": 38, "user": "4e6aba11535d8ccf87e9feff"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4fc8aefde4b0ee37620e1837"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4fe868d1e4b07c9f6fd12c3f"}, {"code": "(fn [& more]\n(loop [lst (rest  more) m (first  more)]\n  (if (empty? lst) m\n(recur (rest lst) (if (< (first lst) m) m (first lst))))))", "problem": 38, "user": "4fdf5403e4b05e33b9224f98"}, {"code": "(fn mmax [& items]\n  (if (= 1 (count items))\n    (first items)\n    (let [f (first items)\n          m (apply mmax (rest items))]\n          (if (> f m) f m))))", "problem": 38, "user": "4f81fcbfe4b033992c121c03"}, {"code": "(fn [& more]\n  ((fn iter [s m]\n    (if (empty? s)\n      m\n      (iter (rest s) (if (> (first s) m) (first s) m))))\n  (rest more) (first more)))", "problem": 38, "user": "4fe8e771e4b0547ebccb2431"}, {"code": "(fn [& xs] (reduce #(if (> % %2) % %2) xs))", "problem": 38, "user": "4fe8d862e4b0547ebccb2428"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "4fe88f78e4b07c9f6fd12c45"}, {"code": "(fn [& xs] (nth (sort > xs) 0))", "problem": 38, "user": "4ea050c3535d7eef308072a2"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4fe89297e4b07c9f6fd12c4c"}, {"code": "(fn myax [& args]\n   (if (empty? (rest args)) \n      (first args)\n      (apply myax \n         (if (< (first args) (second args))\n             (second args)\n             (first args))\n         (rest (rest args)))))", "problem": 38, "user": "4fe87e56e4b07c9f6fd12c40"}, {"code": "(fn [& args] (reduce #(if (> % %2) % %2) args))", "problem": 38, "user": "4fe4c09ee4b0e8f79898febb"}, {"code": "(fn my-max [& vals]\r\n  (reduce (fn [x y]\r\n            (if (> x y)\r\n              x\r\n              y))\r\n          vals))", "problem": 38, "user": "4e7e4a1f535db169f9c7970c"}, {"code": "(fn [& coll] (-> coll sort last))", "problem": 38, "user": "4fe9d647e4b0547ebccb2472"}, {"code": "(fn mymax [& args]\n  ((fn [highest seq]\n     (if (empty? seq)\n       highest\n       (recur (if (> highest (first seq))\n                highest\n                (first seq)) (rest seq)))) 0 args))", "problem": 38, "user": "4fe89efae4b07c9f6fd12c5b"}, {"code": "(fn [& vals]\n(reduce\n  (fn [a b]\n    (if (> a b) a b))\n  vals))", "problem": 38, "user": "4fe89db2e4b07c9f6fd12c59"}, {"code": "(fn [& coll]\n  ((fn [coll maxnum]\n    (if (nil? (first coll))\n      maxnum\n      (if (> (first coll) maxnum)\n        (recur (rest coll) (first coll))\n        (recur (rest coll) maxnum))))\n    coll (first coll)))", "problem": 38, "user": "4fdb881ee4b05e33b9224f5e"}, {"code": "(fn [& args] (last (sort (seq args))))", "problem": 38, "user": "4fdf2b50e4b05e33b9224f93"}, {"code": "(fn ([a] a) ([a & r] (if (> a (first r)) a (recur (first r) (rest r)))))", "problem": 38, "user": "4feada56e4b0140c20fb9c11"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "4fea08a9e4b0547ebccb2484"}, {"code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "problem": 38, "user": "4fe9de74e4b0547ebccb2475"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4fea2de5e4b0140c20fb9bfe"}, {"code": "(fn [& seq] (first (sort > seq)))", "problem": 38, "user": "4e9c3648535dbda64a6f6b7d"}, {"code": "(fn [& xs]\n  (reduce #(if (> %2 %1) %2 %1) xs))", "problem": 38, "user": "4fead955e4b0140c20fb9c10"}, {"code": "(fn [& xs]\n  (loop [big (first xs) lst (rest xs)]\n  (if (empty? lst)\n      big\n      (recur \n       (if (> big (first lst))\n         big\n         (first lst))\n       (rest lst))\n    )))", "problem": 38, "user": "4eda05c1535d10e5ff6f5309"}, {"code": "(fn maxy\n  ([x] x)\n  ([x & xs]\n    (let [max-xs (apply maxy xs)]\n      (if (> x max-xs) x max-xs))))", "problem": 38, "user": "4fec6febe4b0681fd128dca9"}, {"code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4fe9231ce4b0547ebccb2445"}, {"code": "(fn [& lst] (reduce (fn [a b] (if (> a b) a b)) lst))", "problem": 38, "user": "4fe8da4de4b0547ebccb2429"}, {"code": "(fn [& x] (last (apply sort (list x))))", "problem": 38, "user": "4fee1574e4b0678c553fc309"}, {"code": "(fn [& x] (reduce #(if (> % %2) % %2) x))", "problem": 38, "user": "4febb4dae4b0681fd128dc98"}, {"code": "(fn maxval [& args] \n  (first (reverse (sort args)))\n)", "problem": 38, "user": "4fea09b2e4b0547ebccb2485"}, {"code": "(fn [& coll] (reduce (fn [x y] (if (> x y) x y)) (first coll) coll))", "problem": 38, "user": "4fcc70b3e4b0ee37620e1862"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4fe8b6afe4b07c9f6fd12c76"}, {"code": "(fn [& xs] (reduce (fn [a b] (if (> b a) b a)) xs))", "problem": 38, "user": "4fefd624e4b0678c553fc31b"}, {"code": "(fn [x & xs] (reduce #(if (> %1 %2) %1 %2) x xs))", "problem": 38, "user": "4feacba7e4b0140c20fb9c0e"}, {"code": "(fn f [x & args]\n  (let [args (flatten args)]\n  (if (empty? args)\n      x\n      (if (> x (first args))\n          (f x (rest args))\n          (f (first args) (rest args))))))", "problem": 38, "user": "4feef09ae4b0678c553fc30e"}, {"code": "(fn mymax [a & args]\r\n  (loop [current-max a args args]\r\n    (if (empty? args)\r\n      current-max\r\n      (recur\r\n        (if (> (first args) current-max)\r\n          (first args)\r\n          current-max)\r\n        (rest args)))))", "problem": 38, "user": "4fd170fce4b04c3a95aa0411"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4e95c771535dbda64a6f6b39"}, {"code": "(fn [& xs]\n  (reduce #(if (< %1 %2) %2 %1) xs))", "problem": 38, "user": "4feff3b6e4b0678c553fc31e"}, {"code": "(fn maxi [& n]\n  (reduce #(if (> %1 %2) %1 %2) n))", "problem": 38, "user": "4ff01fa9e4b0678c553fc321"}, {"code": "(fn [x & seq] (loop [lst seq, result x]\n              (if (empty? lst)\n                   result\n                   (if (> (first lst) result)\n                       (recur (rest lst) (first lst))\n                       (recur (rest lst) result)))))", "problem": 38, "user": "4fd0cb0ee4b04c3a95aa0407"}, {"code": "(fn [& l] (last (sort l)))", "problem": 38, "user": "4ff0e01fe4b0678c553fc328"}, {"code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "problem": 38, "user": "4f30896ce4b0d6649770a07b"}, {"code": "(fn \n  [& varargs]\n  (reduce #(if(> %1 %2) %1 %2) varargs)\n)", "problem": 38, "user": "4fee04a0e4b0678c553fc308"}, {"code": "(fn [& args]\r\n   (reduce #(if (>= %1 %2) %1 %2) args))", "problem": 38, "user": "4ff07688e4b0678c553fc324"}, {"code": "(fn \n  [& args] \n  (reduce (fn [x y] \n            (if (> x y) x y) ) \n          args ) )", "problem": 38, "user": "4fea1f9ee4b0547ebccb248b"}, {"code": "(fn [a & more] \n  (let [seq (cons a more)]\n    (reduce (fn [x y] (if (> x y) x y)) seq)))", "problem": 38, "user": "4fd65b2be4b0d4de60cee37e"}, {"code": "(fn [& c] (reduce #(if (> %1 %2) %1 %2) c))", "problem": 38, "user": "4ff07229e4b0678c553fc323"}, {"code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) s))", "problem": 38, "user": "4fef439ce4b0678c553fc313"}, {"code": "(fn [& s] (reduce #(if (< %1 %2) %2 %1) 0 s))", "problem": 38, "user": "4e6a5694535d8ccf87e9fece"}, {"code": "(fn [& x] (last (apply sorted-set x)))", "problem": 38, "user": "4fea3769e4b0140c20fb9c01"}, {"code": "(fn biggy \n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] \n   (apply biggy (biggy x y) more))\n)", "problem": 38, "user": "4fe8aba5e4b07c9f6fd12c68"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4fe1279fe4b0dd6cd5ce3630"}, {"code": "(fn [& args] (reduce #(cond\n  (>= %1 %2) %1\n  true %2) args))", "problem": 38, "user": "4fe83efbe4b07c9f6fd12c3b"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4feddf2ee4b0198f34b063be"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4f1427f8535d64f603146435"}, {"code": "(fn x [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4fedd2cae4b0198f34b063ba"}, {"code": "(fn [x & y]\n  \t(reduce #(if (> %1 %2) %1 %2) x y))", "problem": 38, "user": "4e6a63fd535d8ccf87e9feda"}, {"code": "(fn [& x]\n  (reduce (fn [a b] (if (< a b) b a)) x))", "problem": 38, "user": "4ff304f4e4b0678c553fc343"}, {"code": "(fn [x & r] (reduce #(if (> %1 %2) %1 %2) x r))", "problem": 38, "user": "4fe8e719e4b0547ebccb2430"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "problem": 38, "user": "4f7e7cbde4b06e829148e1cf"}, {"code": "(fn maxval\n  ([] nil)\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] (if (nil? more)\n                    (maxval x y)\n                    (apply maxval (maxval x y) more))))", "problem": 38, "user": "4e260220535deb9a81d77ef0"}, {"code": "(fn max-of-list[ & args ]\n  (reduce #(cond (> %1 %2) %1 :else %2 ) (seq args))\n)", "problem": 38, "user": "4ff2f0a9e4b0678c553fc341"}, {"code": "(fn [& lst]\n  (reduce #(if (> %2 %1) %2 %1) lst))", "problem": 38, "user": "4f244f26e4b0d66497709fea"}, {"code": "(fn [& args]\n  (if (= (count args) 2)\n    30\n    (first (rest args))\n  ))", "problem": 38, "user": "4ff36af7e4b0678c553fc352"}, {"code": "(fn maxx [n & more]\n  (if (empty? more) n \n    (let [m (apply maxx more)] (if (> n m) n m))))", "problem": 38, "user": "4ff2430ae4b0678c553fc336"}, {"code": "(fn [& more] (first (reverse (sort more))))", "problem": 38, "user": "4e7e8694535db169f9c79718"}, {"code": "(fn [& args]\r\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4ff201d7e4b0678c553fc330"}, {"code": "(fn max2 [ & coll ]\r\n  (if (empty? coll)\r\n    nil\r\n    ((fn iter [s m]\r\n       (if (empty? s)\r\n         m\r\n         (if (>= (first s) m)\r\n           (iter (rest s) (first s))\r\n           (iter (rest s) m))))\r\n     (rest coll) (first coll))\r\n    )\r\n  )", "problem": 38, "user": "4ff2ee54e4b0678c553fc340"}, {"code": "(fn [& l]\n  (reduce\n    (fn [x y]\n      (if (> x y) x y)) l))", "problem": 38, "user": "4ff5744ae4b0678c553fc36a"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4ff50604e4b0678c553fc365"}, {"code": "(fn [& nums] (first (reverse (sort nums))))", "problem": 38, "user": "4fedec00e4b0d2a5fc2962eb"}, {"code": "(fn mx [n & r]\n  (if (empty? r) n\n    (if (> n (first r)) (apply mx n (rest r))\n    (apply mx (first r) (rest r)))))", "problem": 38, "user": "4ff4c9dae4b0678c553fc360"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4ff282bee4b0678c553fc33a"}, {"code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "problem": 38, "user": "4ff66ab3e4b0678c553fc37c"}, {"code": "(fn m [x & xs]\n  (if (empty? xs)\n      x\n      (if (> x (first xs))\n          (apply m x (rest xs))\n          (apply m (first xs) (rest xs)))))", "problem": 38, "user": "4ff4f5c4e4b0678c553fc362"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4fe97adde4b0547ebccb245e"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "problem": 38, "user": "4fb4ca71e4b081705acca2b0"}, {"code": "#(-> %& sort last)", "problem": 38, "user": "4ff6aea8e4b0678c553fc381"}, {"code": "(fn [& x]\n   (reduce #(if (>= % %2) % %2) x))", "problem": 38, "user": "4ff31e13e4b0678c553fc346"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4ff3e771e4b0678c553fc356"}, {"code": "(fn [& n] \n  (first (sort > n)))", "problem": 38, "user": "4ec9549d535d6d7199dd36fe"}, {"code": "(fn m [& nums] ((comp last sort) nums))", "problem": 38, "user": "4ff35d46e4b0678c553fc34f"}, {"code": "(fn M\n  ([x y] (if (> x y) x y))\n  ([x y z] (if (> z y) (M x z) (M x y)))\n  ([x y z a] (if (> a z) (M x y z) (M x y a)))\n\n)", "problem": 38, "user": "4ff6ed6ae4b0678c553fc384"}, {"code": "(fn [& vals]\n  (first (sort > vals)))", "problem": 38, "user": "4f230adde4b0d66497709fdf"}, {"code": "(fn [ & x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "4ff743fde4b0678c553fc38d"}, {"code": "(fn m [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "4ff673b3e4b0678c553fc37d"}, {"code": "(fn [first & rest] (reduce #(if (> %1 %2) %1 %2) first rest))", "problem": 38, "user": "4ff83003e4b0678c553fc396"}, {"code": "(fn [& list] (last (sort list)))", "problem": 38, "user": "4fdb0c0ae4b05e33b9224f57"}, {"code": "(fn [num & coll]\n  (if (not (= 0 (count coll)))\n    (if (> (first coll) num)\n      (recur (first coll) (rest coll))\n      (recur num (rest coll)))\n    num))", "problem": 38, "user": "4ebbc2dd535dfed6da9c6d73"}, {"code": "(fn [& args]\n   ((fn mymax [m s]\n      (if (empty? s)\n        m\n        (mymax (if (> (first s) m)\n                 (first s)\n                 m) (rest s)))) (first args) (rest args)))", "problem": 38, "user": "4ff355a1e4b0678c553fc34d"}, {"code": "(fn [& x]\n  (reduce #(if (> % %2) % %2) 0 x))", "problem": 38, "user": "4ff9d4e5e4b0678c553fc3b0"}, {"code": "(fn myx [& rest] (reduce #(if (> % %2) % %2) rest))", "problem": 38, "user": "4ff80e81e4b0678c553fc394"}, {"code": "(fn [& args] (reduce #(if (> % %2) % %2) args))", "problem": 38, "user": "4db2cd84535df7e46ed9b6c6"}, {"code": "(fn [& xs] (reduce #(if (> % %2) % %2) xs))", "problem": 38, "user": "4ff67852e4b0678c553fc37e"}, {"code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "4ff9cfd6e4b0678c553fc3af"}, {"code": "(fn [& args]\n  (last (sort args)))", "problem": 38, "user": "4ff66816e4b0678c553fc37a"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4fde156ce4b05e33b9224f83"}, {"code": "(fn [x & xs] (reduce #(if (> %1 %2) %1 %2) (cons x xs)))", "problem": 38, "user": "4ffb38e8e4b0678c553fc3c6"}, {"code": "(fn [& s]\n  (loop [se (set s)]\n    (if (= (count se) 1)\n      (get (vec se) 0)\n      (recur (disj se (apply min se))))))", "problem": 38, "user": "4f0324d2535dcb61093f6a69"}, {"code": "#(-> %& sort last)", "problem": 38, "user": "4ff889f2e4b0678c553fc399"}, {"code": "(fn [& c] (reduce #(if (> % %2) % %2) c))", "problem": 38, "user": "4ff82b00e4b0678c553fc395"}, {"code": "(fn [x & xs]\n  (reduce\n    (fn [a b] (if (> a b) a b))\n    (conj xs x)\n  )\n)", "problem": 38, "user": "4ffb3c50e4b0678c553fc3c8"}, {"code": "(fn [val & vals]\n  (reduce #(if (> %1 %2) %1 %2) val vals))", "problem": 38, "user": "4ff73b7ae4b0678c553fc38c"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4fdb02aae4b05e33b9224f56"}, {"code": "(fn[& nums](reduce (fn[a b](if (> a b),a,b)) nums))", "problem": 38, "user": "4fd0b0bde4b04c3a95aa0406"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4e539f7e535d8a8b8723a272"}, {"code": "(fn max1\r\n  ([x] x)\r\n  ([x y] (if (> x y) x y))\r\n  ([x y & more]\r\n   (reduce max1 (max1 x y) more)))", "problem": 38, "user": "4ff8a89de4b0678c553fc39d"}, {"code": "(fn [& xs] (first (reverse (sort xs))))", "problem": 38, "user": "4fa09916e4b0dcca54ed6d4e"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4fc715b5e4b0ee37620e181e"}, {"code": "(fn [& n] (last (apply sort (vector n))))", "problem": 38, "user": "4fecd35fe4b0681fd128dcab"}, {"code": "(comp last sort vector)", "problem": 38, "user": "4ffb61a1e4b0678c553fc3d1"}, {"code": "(fn mx ([x] x)\n    ([x y]\n      (if (> x y)\n        x\n        y))\n    ([x y & more]\n      (reduce mx (mx x y) more)))", "problem": 38, "user": "4fbef9a6e4b081705acca316"}, {"code": "(fn [x & rest] (reduce (fn [v y] (if (> y v) y v)) x rest))", "problem": 38, "user": "4fe1a734e4b0dd6cd5ce3637"}, {"code": "(fn [& lst]\n  (reduce #(if (> %1 %2) %1 %2) lst))", "problem": 38, "user": "4ffe4d43e4b0678c553fc3f1"}, {"code": "(fn [ & nums ]\n  (reduce (fn [x y] (if (> x y) x y)) nums))", "problem": 38, "user": "4e4ca885535dc968683fc4df"}, {"code": "(fn my-max\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & others]\n   (reduce my-max (my-max x y) others)))", "problem": 38, "user": "4ffee04de4b0678c553fc3f6"}, {"code": "(fn [& xs]\n  (loop [[x & t] (rest xs)\n        k (first xs)]\n    (if x\n      (recur t (if (> x k) x k))\n      k)))", "problem": 38, "user": "4ffa213ee4b0678c553fc3b7"}, {"code": "(fn [& args]\n  ((fn [[h & t] acc]\n \t\t(if (nil? h) \n          acc\n \t\t(if (> h acc) \n   \t\t\t(recur t h)\n   \t\t\t(recur t acc)))\n) args 0))", "problem": 38, "user": "4fff289ae4b0678c553fc3fd"}, {"code": "(fn [x & xs] \n  ((fn f [y ys]\n    (if (empty? ys) \n      y \n      (f (if (> (first ys) y) (first ys) y) (rest ys))))\n  x xs))", "problem": 38, "user": "4daf8e61edd6309eace4d179"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "4fca4c37e4b0ee37620e184f"}, {"code": "(fn [ & coll] (reduce #(if (> %1 %2) %1 %2) coll))", "problem": 38, "user": "4fe8a3bde4b07c9f6fd12c61"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) 0 args))", "problem": 38, "user": "4ff76effe4b0678c553fc390"}, {"code": "(fn aaa\n  ([a] a)\n  ([a b] (if (> a b) a b))\n  ([a b & more] (if (> (aaa a b) (aaa b (first more))) \n                    (aaa a b) \n                    (aaa b (first more)))))", "problem": 38, "user": "4ffe8193e4b0678c553fc3f4"}, {"code": "(fn mx [x & rest]\r\n  (println rest)\r\n  (if rest\r\n    (let [[y & r] rest]\r\n      (if (> x y)\r\n        (apply mx x r)\r\n        (apply mx y r)))\r\n    x))", "problem": 38, "user": "500159b3e4b0678c553fc419"}, {"code": "(fn mymax [& dat]\n    (reduce (fn tmp [x y]\n              (cond (> x y) x\n                    (<= x y) y))\n            dat))", "problem": 38, "user": "4fc0f5b8e4b081705acca329"}, {"code": "(fn maxer \n  ([a] a) \n  ([a b] (if (> a b) a b))\n  ([a b & more] (reduce maxer (maxer a b) more ))\n  )", "problem": 38, "user": "4ff8aa3fe4b0678c553fc39e"}, {"code": "(fn mymax [& l]\n  (reduce #(if (> %1 %2) %1 %2) 0 l))", "problem": 38, "user": "4fea6f3fe4b0140c20fb9c05"}, {"code": "(fn [& lst]                                                         \n        (reduce (fn [a b] (if (> a b ) a b)) lst))", "problem": 38, "user": "4eed6b32535d93acb0a668bc"}, {"code": "(fn f [& more] (first (sort > (mapcat list more))))", "problem": 38, "user": "4ffa8affe4b0678c553fc3bd"}, {"code": "(fn mym\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n   (reduce mym (mym x y) more)))", "problem": 38, "user": "5003bb77e4b0678c553fc442"}, {"code": "(fn [& x] (first (sort > x)))", "problem": 38, "user": "50033b9be4b0678c553fc439"}, {"code": "(fn [f & xs]\n  (reduce #(if (> %1 %2) %1 %2) f xs))", "problem": 38, "user": "5003deb9e4b0678c553fc445"}, {"code": "#(last (sort %&))", "problem": 38, "user": "5003ee7de4b0678c553fc446"}, {"code": "(fn the-max\n  ([x] x)\n  ([x y] (if (>= x y) x y))\n  ([x y & rest] (reduce the-max (the-max x y) rest)))", "problem": 38, "user": "5004d5d0e4b0678c553fc456"}, {"code": "(fn [& xs]\r\n  (reduce #(if (> % %2) % %2) (first xs) xs))", "problem": 38, "user": "50045388e4b0678c553fc44e"}, {"code": "(fn mm \n     ([arg] arg)\n     ([arg & rargs]\n       (loop [max_arg arg next_arg (first rargs) moreargs (rest rargs)]\n         (cond \n           (nil? next_arg) max_arg\n           (> max_arg next_arg) (recur max_arg (first moreargs) (rest moreargs))\n           :else (recur next_arg (first moreargs) (rest moreargs))))))", "problem": 38, "user": "4fe9ef2fe4b0547ebccb2479"}, {"code": "#(-> %& sort last)", "problem": 38, "user": "5005b57de4b0678c553fc46a"}, {"code": "(fn mx [& args]\n  ((fn mx-help [s m]\n    (if (empty? s)\n      m\n      (if (or (nil? m) (> (first s) m))\n        (mx-help (rest s) (first s))\n        (mx-help (rest s) m)\n      )\n    )\n  ) args nil)\n)", "problem": 38, "user": "4fff00ede4b0678c553fc3fc"}, {"code": "(fn my-max\n  ([a] a)\n  ([a & b] (let [b (apply my-max b)] (if (> a b) a b))))", "problem": 38, "user": "5002b6e5e4b0678c553fc42c"}, {"code": "(fn [ & r] (reduce #(if (> % %2) % %2) r))", "problem": 38, "user": "4f625f68e4b0defedf855fd2"}, {"code": "(fn [& l] \n  (reduce #(if (> % %2) % %2) l))", "problem": 38, "user": "4fff57f1e4b0678c553fc3fe"}, {"code": "(fn my-max [h & t]\n  (loop [min h, t t]\n    (if-not (seq t) min\n            (let [h (first t), new-min (if (> h min) h min)]\n              (recur new-min (rest t))))))", "problem": 38, "user": "500574d9e4b0678c553fc463"}, {"code": "(fn[& args] (last(sort args)))", "problem": 38, "user": "4ffd92e7e4b0678c553fc3e3"}, {"code": "(fn m\n  ([v1 v2] (if (> v1 v2) v1 v2))\n  ([v1 v2 & values] (reduce m (m v1 v2) values)))", "problem": 38, "user": "50052d38e4b0678c553fc45c"}, {"code": "(fn [& items] \n  (loop [max-val (first items) l items] \n    (if (= 0 (count l)) max-val\n      (if (> (first l) max-val)\n          (recur (first l) (rest l))\n          (recur max-val (rest l))\n        )\n    )\n  ) \n)", "problem": 38, "user": "5005f0fae4b0678c553fc472"}, {"code": "(fn [& items]\n  (last (sort items)))", "problem": 38, "user": "50052fd0e4b0678c553fc45d"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "50054b5ce4b0678c553fc45f"}, {"code": "(fn[& numbers]\n  (last (sort numbers)))", "problem": 38, "user": "4ffb529be4b0678c553fc3cd"}, {"code": "(fn this\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n     (apply this (this x y) more)))", "problem": 38, "user": "4f2e205ae4b0d6649770a065"}, {"code": "(fn mymax [& sequ]\n    (reduce (fn choose-greater [a b] (if (> a b) a b))\n            sequ))", "problem": 38, "user": "50057f23e4b0678c553fc466"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4ffb43b9e4b0678c553fc3ca"}, {"code": "(fn my-max [g & n]\r\n  (cond\r\n   (empty? n) g\r\n   (< g (first n)) (apply my-max (first n) (rest n))\r\n   :else (apply my-max g (rest n))\r\n  )\r\n)", "problem": 38, "user": "4fa719c0e4b081705acca1bf"}, {"code": "(fn [& coll]\n  (reduce\n    (fn [x y]\n      (if (> x y) x y)) coll))", "problem": 38, "user": "500933a6e4b046cdb195e074"}, {"code": "(fn[ & x] \n  (first \n    (reverse \n      (sort x))))", "problem": 38, "user": "5009e9f1e4b03d00572d2d6f"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "500aa15ee4b03d00572d2d76"}, {"code": "(fn [& more]\n  (letfn [(calc-max [m x] \n            (cond (empty? x) m\n                  (> (first x) m) (calc-max (first x) \n                                            (rest x))\n                  :else (calc-max m (rest x))))]\n    (calc-max (first more) (rest more))))", "problem": 38, "user": "4ff43d46e4b0678c553fc35a"}, {"code": "(fn ma [& x]\n  (reduce\n   #(if (> %1 %2) %1 %2)\n   x) )", "problem": 38, "user": "5007cdb9e4b0b17c647f5227"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "500b6685e4b03d00572d2d82"}, {"code": "(comp first reverse sort list)", "problem": 38, "user": "5009fd0ae4b03d00572d2d70"}, {"code": "(fn [& args]\n  (let [sort_list (sort args)]\n    (last sort_list)))", "problem": 38, "user": "50097962e4b03d00572d2d6c"}, {"code": "(fn [& nums] (reduce #(if (> % %2) % %2) nums))", "problem": 38, "user": "4f24957ae4b0d66497709fed"}, {"code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "500d0f21e4b05f7c30cfa69e"}, {"code": "(fn [& x]\n  (reduce (fn [a b] (if (> a b) a b)) x))", "problem": 38, "user": "500cb910e4b05f7c30cfa698"}, {"code": "(fn [& args]\n  (last (sort args)))", "problem": 38, "user": "500adcc9e4b03d00572d2d7c"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "500d8c49e4b07ccb9a7ddb00"}, {"code": "(fn [& a] (last(sort a)))", "problem": 38, "user": "50028cece4b0678c553fc429"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "500cc693e4b05f7c30cfa69a"}, {"code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "problem": 38, "user": "500d1db4e4b05f7c30cfa69f"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4fe900a6e4b0547ebccb243a"}, {"code": "(fn[& x](first(take-last 1(sort x))))", "problem": 38, "user": "4ff30a84e4b0678c553fc344"}, {"code": "(fn m [& args]\n  (reduce (fn [x y] (if (> y x) y x)) args))", "problem": 38, "user": "4f50cadce4b03ad3f0c10d0f"}, {"code": "(fn max_arg [& args]\n  (last (sort args)))", "problem": 38, "user": "500d784ee4b0ff215386cad3"}, {"code": "(fn [& xs] ((comp last sort ) xs))", "problem": 38, "user": "500f336be4b03ec779321687"}, {"code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "problem": 38, "user": "500900dee4b0144d4f561e42"}, {"code": "(fn self ([x] x) ([x y] (if (> x y) x y)) ([x y & z] (apply self (self x y) z)))", "problem": 38, "user": "4e8742d4535dceadca46984f"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "500854c4e4b028e089d3518c"}, {"code": "(fn [& xs]\n  (reduce (fn [res x] (if (> x res) x res)) xs))", "problem": 38, "user": "500ff421e4b0ae202717946f"}, {"code": "(fn maximum [x & args]\n  (if (empty? args) x\n    (if (> (first args) x)\n      (apply maximum args)\n      (apply maximum (conj (rest args) x)))))", "problem": 38, "user": "50104ccfe4b04c11913f949e"}, {"code": "(fn[& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "500abce2e4b03d00572d2d77"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4fd8544be4b0dab7d829f390"}, {"code": "(fn [& a] (last (sort a)))", "problem": 38, "user": "500ebe23e4b00fff93030f9c"}, {"code": "(fn [& rest]\n  (reduce (fn [x y]\n           (if (> x y)\n             x\n             y))\n   rest))", "problem": 38, "user": "50119c07e4b028e9d38b393f"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4fea9154e4b0140c20fb9c0a"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "500e6c4ee4b04a05d36fcc05"}, {"code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "problem": 38, "user": "5005b7bae4b0678c553fc46b"}, {"code": "(fn [& sq] (reduce (fn [a b] (if (nil? a) b (if (nil? b) a (if (> a b) a b)))) sq))", "problem": 38, "user": "500e6ddee4b04a05d36fcc06"}, {"code": "(fn\n  [& args]\n    (reduce\n      #(if (> %1 %2) %1 %2)\n        Integer/MIN_VALUE\n        args))", "problem": 38, "user": "500e91aae4b00fff93030f99"}, {"code": "(fn [& l] (reduce #(if (> % %2) % %2) l))", "problem": 38, "user": "4ff9f5c5e4b0678c553fc3b4"}, {"code": "(fn mymax [& x]\n  (first (sort > x)))", "problem": 38, "user": "5012aefce4b0c8732600222a"}, {"code": "(fn [ x & rest] \n  (reduce (fn [x y] (if (> x y) x y)) x rest))", "problem": 38, "user": "5012ec0ae4b0c87326002230"}, {"code": "#(last (sort %&))", "problem": 38, "user": "500ee13be4b00fff93030fa1"}, {"code": "(fn [& args]\n  (reduce #(if (< %1 %2) %2 %1) args))", "problem": 38, "user": "5013193ae4b0f26a0e3320ab"}, {"code": "(fn [& args]\n  (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "4f8320e9e4b033992c121c18"}, {"code": "#(last (sort %&))", "problem": 38, "user": "5014718fe4b094324338f8e3"}, {"code": "(fn [& x] (reduce #(if (> %1  %2) %1 %2) x))", "problem": 38, "user": "4f9084a2e4b0dcca54ed6c90"}, {"code": "(fn [& args]\n   ((fn [col m]\n  (if (and (nil? col) (nil? (next col)))\n    m\n    (if (> m (first col))\n      (recur (next col) m)\n      (recur (next col) (first col)))))(next args) (first args)))", "problem": 38, "user": "5011ae8fe4b00ad656b9d982"}, {"code": "(comp last sort list)", "problem": 38, "user": "4ed98b40535d10e5ff6f5307"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "5013141de4b0f26a0e3320a9"}, {"code": "(fn mx\n  ([x] x)\n  ([x y] (if (< x y) y x))\n  ([x y & more] (reduce mx (mx x y) more)))", "problem": 38, "user": "5007f751e4b0b17c647f522b"}, {"code": "(fn [& args]\n  (reduce\n    (fn [a b]\n      (if (> a b)\n          a\n          b))\n    args))", "problem": 38, "user": "501284d9e4b030d97e4db710"}, {"code": "(fn f [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4fda8f57e4b05e33b9224f4e"}, {"code": "(fn m\n                 ([x y] (if (> x y) x y))\n                 ([x y & z] (reduce m (m x y) z)))", "problem": 38, "user": "50142490e4b07d18bdaaf70a"}, {"code": "(fn maximum ([x y] (if (> x y) x y))\n  ([x y & more] \n    (reduce maximum (maximum x y) more)))", "problem": 38, "user": "4ff89ae0e4b0678c553fc39a"}, {"code": "(fn [x & y]\n  (reduce\n    #(if (< %1 %2) %2 %1) x y))", "problem": 38, "user": "5012614ee4b02a085b99dc79"}, {"code": "(fn [& args]\n  (reduce \n    (fn [a b]\n      (if (> a b) a b))\n     args))", "problem": 38, "user": "5014754de4b094324338f8e5"}, {"code": "#((vec (sort > %&)) 0)", "problem": 38, "user": "5007c7c7e4b0b17c647f5226"}, {"code": "(fn [& x] \n  (reduce \n      #(if (< % %2) %2 %)\n          x))", "problem": 38, "user": "50127fbfe4b030d97e4db70f"}, {"code": "(comp last sort vector)", "problem": 38, "user": "50166470e4b052339a490e76"}, {"code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) more))", "problem": 38, "user": "4f0eeff3535d0136e6c22327"}, {"code": "#(last (sort (list* %&)  ))", "problem": 38, "user": "5016ac54e4b052339a490e7b"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "500b61b1e4b03d00572d2d81"}, {"code": "(fn [& args]\n  (reduce (fn [x y] (if (> x y) x y)) args)\n  )", "problem": 38, "user": "4ff10dd2e4b0678c553fc32a"}, {"code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) (vec s)))", "problem": 38, "user": "4fe9fce4e4b0547ebccb247e"}, {"code": "(fn [& xs] (reduce #(if (< %1 %2) %2 %1) xs))", "problem": 38, "user": "501688f7e4b052339a490e7a"}, {"code": "(fn [& xs] (last (sort xs)))", "problem": 38, "user": "4ff78679e4b0678c553fc392"}, {"code": "(fn [& inp] (reduce (fn f [x y] (if (> x y) x y)) inp))", "problem": 38, "user": "5017f840e4b02f523d7cc5e8"}, {"code": "(fn [ & args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "5018ed15e4b011a2e0bf6412"}, {"code": "(fn [& nums] (last (sort nums)))", "problem": 38, "user": "50182f53e4b02f523d7cc5ec"}, {"code": "(fn mymax\n           [& items]\n             ((fn mymax-int\n               [curmax seq]\n              (if (empty? seq)\n                curmax\n               (let [p (first seq)]\n                 (if (> p curmax)\n                   (recur p (rest seq))\n                   (recur curmax (rest seq))\n                 )\n                )      \n              ))       \n              (first items) (rest items))      \n      )", "problem": 38, "user": "50158fa0e4b0aaedd199e913"}, {"code": "(fn [& ps] (reduce #(if (> %1 %2) %1 %2) ps))", "problem": 38, "user": "4ff76222e4b0678c553fc38e"}, {"code": "(fn [& p] \n    (reduce (fn[x y] (if (> y x) y x)) (first p)(next p))\n)", "problem": 38, "user": "5017eface4b02f523d7cc5e7"}, {"code": "(fn mymax [& xs]\n   (letfn [(_mymax [c m]\n                    (if (seq c)\n                      (recur (rest c) (if (> (first c) m) (first c) m))\n                      m))]\n     (_mymax xs (first xs))))", "problem": 38, "user": "500ea957e4b00fff93030f9b"}, {"code": "(fn [& args] (reduce (fn [x y] (if(> x y) x y)) args))", "problem": 38, "user": "4fb7b80ae4b081705acca2d4"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "4f0309a2535dcb61093f6a46"}, {"code": "(fn this [w & z]\n;(println \"(this\" w z \")\")\n;(let [ret\n     (\n       (fn clr [p m]\n;         (println \"li: \" li)\n;         (println \"    li: \" li \", x: \" x)\n;        (println \"p:\" p \", m:\" m)\n;         (println \"    \" 7 \", \" (list 7))\n;         (println \"    \" (list (first li)))\n;         (println \"    \" (rest li))\n;         (println \"        \" (not-empty li))\n         (if\n           (not-empty m)\n           (if\n             (> p (first m))\n             p\n             (clr (first m) (rest m))\n           )\n           p\n         )\n       )\n       w\n       z\n     )\n;] (println \"    ret: \" ret) ret)\n  )", "problem": 38, "user": "501819efe4b02f523d7cc5eb"}, {"code": "#(- (apply min (map - %&)))", "problem": 38, "user": "4ee624f8535d93acb0a66855"}, {"code": "(fn [& ns] (reduce #(if (> %1 %2) %1 %2) ns))", "problem": 38, "user": "4f528f70e4b03ad3f0c10d3f"}, {"code": "(fn [& a] (-> a sort last))", "problem": 38, "user": "500ec491e4b00fff93030f9e"}, {"code": "(fn [& m] (reduce (fn [a b] (if (> a b) a b)) m))", "problem": 38, "user": "4e61bb60535d8ccf87e9fe5c"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "501d34f6e4b066e56b9d0b1e"}, {"code": "(fn [& args] (reduce (fn [m x] (if (> x m) x m)) args))", "problem": 38, "user": "501c76eae4b01d3bc87c0201"}, {"code": "(fn [x & xs]\r\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "50013694e4b0678c553fc417"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2)\n                        %1\n                        %2)\n                   xs))", "problem": 38, "user": "501fa1aee4b0cb6ebc0a42eb"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "501d52a8e4b066e56b9d0b20"}, {"code": "(fn [& args] (reduce #(if (> % %2) % %2) args))", "problem": 38, "user": "5020692be4b0cb6ebc0a42f6"}, {"code": "(fn asdf \n  ([g x y z ] 8)\n  ([x y] 30)\n  ([x y z] 67)\n)", "problem": 38, "user": "5012036ce4b0a040369c12f4"}, {"code": "(fn [& numbers]\n  (reduce #(if (> %1 %2) %1 %2) numbers))", "problem": 38, "user": "501c1492e4b086d93747d180"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4e6a5158535d8ccf87e9fec5"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) (flatten (cons x xs))))", "problem": 38, "user": "5021eb15e4b00bba4502f7ab"}, {"code": "(fn\n  [x & rest-args]\n  (if (empty? rest-args)\n    x\n    (let [current-max x\n          next-member (first rest-args)\n          other-members (rest rest-args)]\n      (if (> next-member current-max)\n        (recur next-member other-members)\n        (recur current-max other-members)))))", "problem": 38, "user": "500f5266e4b03ec77932168a"}, {"code": "(fn find-max [& args] \n  (loop [col (rest args) mx (first args)] \n\t\t(if (empty? col) \n\t\t\tmx \n\t\t\t(recur (rest col) (if (> (first col) mx) (first col) mx)))))", "problem": 38, "user": "4f2942ace4b0d6649770a01e"}, {"code": "(fn mx [n & r] \n  (reduce (fn mxx[x y] (if (> x y) x y))\n    n r)\n)", "problem": 38, "user": "4fcf642ee4b03432b189f410"}, {"code": "(fn [& l] (reduce (fn [x y] (if (> x y) x y)) 0 l))", "problem": 38, "user": "501fcd59e4b0cb6ebc0a42ec"}, {"code": "(fn [s & more] \n  (loop [s (conj more s) m 0]\n    (if (empty? s)\n        m\n        (recur (rest s)\n               (if (> m (first s))\n                   m\n                   (first s))))))", "problem": 38, "user": "502421ebe4b09f7ee7fb4377"}, {"code": "(fn [& args]\n  (loop [list args\n          myMax 0]\n    (if (not-empty list)\n      (if (> (first list) myMax)\n        (recur (rest list) (first list))\n        (recur (rest list) myMax))\n      myMax))\n)", "problem": 38, "user": "4fe610fde4b0e8f79898fece"}, {"code": "(fn !\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & others] (reduce ! (! x y) others)))", "problem": 38, "user": "5020d033e4b0cb6ebc0a42fa"}, {"code": "(fn [& vals]\n  (reduce\n    (fn [x y]\n      (if (> x y)\n        x\n        y)) vals))", "problem": 38, "user": "4fab2859e4b081705acca213"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4f1af7e4535d64f603146471"}, {"code": "(fn [& list]\n  (reduce #(if (> %1 %2) %1 %2) list))", "problem": 38, "user": "4f189b42535d64f60314645d"}, {"code": "(fn [& x] (reduce #(if (> % %2) % %2) x))", "problem": 38, "user": "50223ee2e4b0846bc458ae48"}, {"code": "(fn [& coll]\n  ((comp first reverse vec sort) coll))", "problem": 38, "user": "50270618e4b01614d1633feb"}, {"code": "(fn [  & lst ] \n  ( reduce (fn [mx, x] ( if (> x mx) x mx ) )  lst \n))", "problem": 38, "user": "5026916fe4b0c969f0b056e1"}, {"code": "(fn [& xs](reduce #(if (> % %2) % %2) xs))", "problem": 38, "user": "4faf897be4b081705acca257"}, {"code": "(fn [first & more]\n  (let [_max (fn [left right]\n                (if (> left right) left right))]\n    (reduce _max first more)))", "problem": 38, "user": "5027fc0ce4b01614d1633ff2"}, {"code": "(fn [& args] (first (reverse (sort args))))", "problem": 38, "user": "4dade9e9c9a9d6ed4799dc57"}, {"code": "#(reduce (fn [x y] (if (> x y) x y)) %&)", "problem": 38, "user": "5028cd0fe4b01614d1633ffc"}, {"code": "(fn my-max [& xs]\n  (reduce #(if (> % %2) % %2) xs))", "problem": 38, "user": "4fb1325de4b081705acca276"}, {"code": "(fn mymax \n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n    (reduce mymax (mymax x y) more)))", "problem": 38, "user": "5028bce0e4b01614d1633ffb"}, {"code": "(fn ([x] x)\n  ([x & args] (reduce #(if (> %1 %2) %1 %2) (cons x args)))\n)", "problem": 38, "user": "502952c9e4b0b33e9bf6fdf1"}, {"code": "(fn [x & xs] \n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "501dddc9e4b051153f3b5b7e"}, {"code": "(fn [& args] (last (seq (apply sorted-set args))))", "problem": 38, "user": "502ac96de4b0614b5299611b"}, {"code": "(fn [& args]\n  (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "502a5fa4e4b09e8f859a9fbd"}, {"code": "(fn [& xs] (reduce #(if (> %2 %1) %2 %1) 0 xs))", "problem": 38, "user": "502ad2cae4b0614b5299611f"}, {"code": "(fn [& xs] (reduce #(if (< %1 %2) %2 %1) xs))", "problem": 38, "user": "50294c28e4b0b33e9bf6fdef"}, {"code": "(fn [& vs] (reduce #(if (> %2 %1) %2 %1) vs))", "problem": 38, "user": "502873a8e4b01614d1633ff8"}, {"code": "(fn [& args]\r\n      (-> args seq sort last))", "problem": 38, "user": "501668b4e4b052339a490e77"}, {"code": "(fn [& s]\r\n  (loop [m (first s)\r\n         ss s]\r\n         (if (nil? ss)\r\n             m\r\n             (let [a (first ss)]\r\n                  (recur \r\n                    (if (> a m) a m)\r\n                    (next ss))))))", "problem": 38, "user": "4fdc067fe4b05e33b9224f69"}, {"code": "(fn [& nums] (last (sort nums)))", "problem": 38, "user": "502d39c5e4b0d96a44ab2031"}, {"code": "(fn [& xs] \n  (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "5025b93ce4b0c969f0b056df"}, {"code": "(fn [& rest] (first (sort > rest)))", "problem": 38, "user": "502d387fe4b0d96a44ab202f"}, {"code": "(fn [& _] (first (sort > _)))", "problem": 38, "user": "4f601623e4b0defedf855fa3"}, {"code": "(fn m\n  ([a b] (if (> a b) a b))\n  ([a b & mo] (reduce m (concat [a] [b] mo))))", "problem": 38, "user": "4e8a880b535d65386fec210d"}, {"code": "#(first (sort > %&))", "problem": 38, "user": "50254dace4b0b0b8afb15aa6"}, {"code": "(fn [& values ]\n  \"Return the maximum value in the arguments (numeric for now)\"\n  (loop [\n         currentMax (Integer/MIN_VALUE) ; our current largest\n         remaining values ]             ; remaining arguments to evaluate\n    (if (seq remaining) ; are values are left in the sequence?\n      (recur (if\n               (> (first remaining) currentMax)\n               (first remaining)\n               currentMax)              ; \"currentMax\" \n             (rest remaining))          ; pop the head off the argument list\n      currentMax))) ; we're done. return our tracked maximum.", "problem": 38, "user": "5020a3fbe4b0cb6ebc0a42f8"}, {"code": "(fn [x & more] (reduce #(if (> %1 %2) %1 %2) x more))", "problem": 38, "user": "502ed81ee4b06efe12e8cc7b"}, {"code": "(fn [& nums] (last (sort nums)))", "problem": 38, "user": "5029dae5e4b023940c84aa44"}, {"code": "(fn foo [& args] (cond\n  (= (count args) 1) (first args)\n  (> (first args) (apply foo (rest args))) (first args)\n  :else (apply foo (rest args))))", "problem": 38, "user": "4dea9fae535d08e6dec9fe02"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4e170143535d04ed9115e7ed"}, {"code": "(fn [& s]\n  (last (apply sorted-set s)))", "problem": 38, "user": "501dfd54e4b051153f3b5b80"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "502b0804e4b063e52107afad"}, {"code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "502a4fdfe4b09dd42f6f3644"}, {"code": "(fn [& xs] (reduce #( if(< %1 %2) %2 %1)  xs))", "problem": 38, "user": "502904e0e4b0feaf66e22fad"}, {"code": "(fn mymax [x & y]  (cond (= nil y) x \n(> (first y) x) (apply mymax y)\n:else (if (> x (apply mymax y)) x (apply  mymax y))))", "problem": 38, "user": "4df39b50535d08e6dec9fe29"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "4fdf9a9ae4b05e33b9224f9f"}, {"code": "(fn [& x]\n  (loop [l x r 0]\n    (if (empty? l) r\n        (recur (rest l) (if (> (first l) r)\n                          (first l)\n                                r)))))", "problem": 38, "user": "5030f16fe4b05b7df5a0b84b"}, {"code": "(fn [x & xs]\n  (loop [m x r xs]\n    (cond (empty? r) m\n      (> m (first r)) (recur m (rest r))\n      :else (recur (first r) (rest r)))))", "problem": 38, "user": "5029fccee4b023940c84aa47"}, {"code": "(fn [& x] (last (sort (flatten x))))", "problem": 38, "user": "502cd12fe4b0532a782a5e39"}, {"code": "(fn \r\n     [a b & c]\r\n     (if-not (empty? c)\r\n       (recur (if (> a b) a b) (first c) (rest c))\r\n       (if (> a b) a b)\r\n       ))", "problem": 38, "user": "5031eb3be4b000fc67a99a84"}, {"code": "(fn maxi [& n] (reduce (fn [a b] (if (> a b) a b)) n))", "problem": 38, "user": "502c8681e4b0532a782a5e35"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "503255d0e4b0e78df07b092b"}, {"code": "(fn [& nums]\n  (loop [i 0, max-num 0]\n    (if (= (count nums) i)\n      max-num\n      (if (> max-num (nth nums i))\n        (recur (inc i) max-num)\n        (recur (inc i) (nth nums i))))))", "problem": 38, "user": "5024076be4b09f7ee7fb4376"}, {"code": "(fn [& nums]\n  (reduce \n    (fn [MAX n]\n      (if (< MAX n)\n        n\n        MAX)\n    )\n    nums)\n)", "problem": 38, "user": "4fad9da0e4b081705acca23c"}, {"code": "(fn [x & xs] (loop [x1 x xs1 xs] (if (> x1 (first xs1)) x1 (recur (first xs1) (rest xs1)))))", "problem": 38, "user": "5032b398e4b00c0952a257eb"}, {"code": "#(loop [m (first %&) r (rest %&)]\n  (if (empty? r)\n    m\n    (recur \n      (let [n (first r)]\n        (if (< n m) m n)) (rest r))))", "problem": 38, "user": "5033a1fbe4b062bc5d7ae155"}, {"code": "#(last (sort %&))", "problem": 38, "user": "5032b066e4b00c0952a257ea"}, {"code": "(fn [& xs] (reduce #(if (< % %2) %2 %) xs))", "problem": 38, "user": "502bb7c0e4b0194ad32ea1a3"}, {"code": "(fn [& items] (reduce (fn [a b] (if (> a b) a b)) items))", "problem": 38, "user": "4ffdca56e4b0678c553fc3e9"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "502d4ea0e4b02fc10c6c6e46"}, {"code": "(fn [& elts]\n  (loop [largest-elt 0, remaining-elts elts]\n    (if (empty? remaining-elts)\n      largest-elt\n      (if (> (first remaining-elts) largest-elt)\n        (recur (first remaining-elts) (rest remaining-elts))\n        (recur largest-elt (rest remaining-elts))))))", "problem": 38, "user": "502940a9e4b061fd216be4b8"}, {"code": "(fn [& ls] (reduce #(if (< %1 %2) %2 %1) ls))", "problem": 38, "user": "502a9fdee4b095a7adb898b4"}, {"code": "(fn [& args] \n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "50336c6be4b0c6c1199c710f"}, {"code": "(fn [& m] (reduce #(if (> %1 %2) %1 %2) 0 m))", "problem": 38, "user": "4e952463535dbda64a6f6b31"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "50342d1be4b062bc5d7ae15f"}, {"code": "(fn [& l] \n  (reduce #(if (> % %2) % %2) 0 l))", "problem": 38, "user": "502cff22e4b0b2ab8d5c7e72"}, {"code": "(fn [& x] (reduce #(if (> % %2) % %2) x))", "problem": 38, "user": "502d39f8e4b0d96a44ab2032"}, {"code": "(fn [& more] (reduce (fn [x y] (if (> x y) x y)) more))", "problem": 38, "user": "503433c4e4b062bc5d7ae160"}, {"code": "(fn m [x & more]\n  (cond (empty? more) x\n        (> x (apply m more)) x\n        :else (apply m more)))", "problem": 38, "user": "502d3912e4b0d96a44ab2030"}, {"code": "(fn mx [% & %2]\n  (seq %2)\n  (if (< % (first %2))\n    (recur (first %2) (rest %2))\n    %\n  )\n)", "problem": 38, "user": "5029131ae4b0b6c928ad61ff"}, {"code": "#(last (sort %&))", "problem": 38, "user": "50361b6be4b0fbe0a74d26be"}, {"code": "(fn [% & %2]  (last(sort (cons % %2))))", "problem": 38, "user": "50255bafe4b0b0b8afb15aa8"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "5034a14de4b062bc5d7ae165"}, {"code": "(fn maxx[ & x ]\n(last(sort(apply list x)))\n  )", "problem": 38, "user": "50291679e4b0b6c928ad6200"}, {"code": "(fn mm\n    [m & args]\n    (if (nil? args)\n        m\n        (let\n            [m1 (apply mm args)]\n            (if (> m1 m) m1 m))))", "problem": 38, "user": "4ddb696b535d02782fcbe9fa"}, {"code": "(fn [& x] (reduce (fn [a b] (if (< a b) b a)) x))", "problem": 38, "user": "5034b0e1e4b062bc5d7ae167"}, {"code": "(fn [a & b]\n  (reduce\n   #(if (< %1 %2) %2 %1) a b))", "problem": 38, "user": "50254e70e4b0b0b8afb15aa7"}, {"code": "(fn [& m] (reduce #(if (< %1 %2) %2 %1) m))", "problem": 38, "user": "5035503de4b0ed9c821488f8"}, {"code": "(fn [s & others]\n  (reduce #(if (> %1 %2) %1 %2) s others))", "problem": 38, "user": "5032a96ae4b0e78df07b0932"}, {"code": "(fn mx [ & l] (\n  let [f #(if (> % %2) % %2)]\n  (reduce f l)))", "problem": 38, "user": "50352431e4b0a84c1d88f620"}, {"code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4f3ae998e4b0e243712b1f1f"}, {"code": "(fn bob ([x] x) ([x y] (if (> x y) x y)) ([x y & stuff] (reduce bob (bob x y) stuff) ))", "problem": 38, "user": "500a0a11e4b03d00572d2d73"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "5038f8d2e4b088a6a14ca75f"}, {"code": "#(reduce (fn [x y] \n  (if (> x y) x y)) %&)", "problem": 38, "user": "50387196e4b0803468ea2c6e"}, {"code": "#(last (sort (apply list %&)))", "problem": 38, "user": "5029faf6e4b023940c84aa46"}, {"code": "(fn [& xs] (last (sort (vec xs))))", "problem": 38, "user": "50399468e4b088a6a14ca768"}, {"code": "(fn [& ss] (reduce #(if (> %1 %2) %1 %2) ss))", "problem": 38, "user": "503917a0e4b088a6a14ca763"}, {"code": "#(-> %& sort last)", "problem": 38, "user": "503a234de4b088a6a14ca76d"}, {"code": "(fn foo\n ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n   (reduce foo (foo x y) more)))", "problem": 38, "user": "5035a77de4b0ed9c821488fe"}, {"code": "(fn my-max \n  ([x] x)\n  ([x y] (if (> x y)\n              x\n              y))\n  ([x y & more] (my-max (my-max x y) (apply my-max more))))", "problem": 38, "user": "503a5623e4b07a1917cc34d3"}, {"code": "(fn [& ns]\n  (reduce #(if (< %1 %2) %2 %1) ns))", "problem": 38, "user": "4f58d92fe4b0a7574ea71858"}, {"code": "(fn maxed [& s]\n  (reduce \n     (fn [x y] (if (> x y) x y)) \n     s)\n  )", "problem": 38, "user": "500a214de4b03d00572d2d74"}, {"code": "(fn [& a] (last (sort a)))", "problem": 38, "user": "50335235e4b0c6c1199c710b"}, {"code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) coll))", "problem": 38, "user": "503354c3e4b0c6c1199c710c"}, {"code": "(fn [& args]\n  (reduce (fn [m s] (if (< m s) s m)) 0 args))", "problem": 38, "user": "503b5a64e4b07a1917cc34dc"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "50379cb4e4b0af0658af77af"}, {"code": "(fn max-aux [x & rest]\n                (if (empty? rest)\n                  x\n                  (let [max-rest (apply max-aux rest)]\n                    (if (> x max-rest) x max-rest))))", "problem": 38, "user": "503b6995e4b07a1917cc34dd"}, {"code": "(fn [& args]\n    (\n  reduce (fn [maximum next]\n        (if (< maximum next)\n            next\n            maximum) \n)\n        0 \n        args\n)\n)", "problem": 38, "user": "4edf95a8535d10e5ff6f5342"}, {"code": "(fn [& l]\n  (reduce #(if (> %1 %2) %1 %2) l))", "problem": 38, "user": "5033ed65e4b062bc5d7ae15a"}, {"code": "(fn [& vals] (reduce #(if (< %1 %2) %2 %1) (first vals) vals))", "problem": 38, "user": "503be1f0e4b0fc0f99c2e549"}, {"code": "(fn [x & xs]\n  (reduce #(if (> %1 %2) %1 %2) x xs))", "problem": 38, "user": "5036dea0e4b0af0658af77a4"}, {"code": "(fn [& l] (last (sort l)))", "problem": 38, "user": "4e68c465535d8ccf87e9fe8a"}, {"code": "(fn __ [& l] (reduce #(if (>= %1 %2) %1 %2) l))", "problem": 38, "user": "502fb9bee4b0f8db655c4ee2"}, {"code": "(fn [n & s]\n  ((fn [s n]\n    (if (seq s)\n      (recur (rest s) (if (> (first s) n) (first s) n))\n      n)\n    ) s n))", "problem": 38, "user": "503ca47fe4b06c4e0e1fa24f"}, {"code": "#(last(sort %&))", "problem": 38, "user": "5029481ee4b0b33e9bf6fdee"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "503d129fe4b06c4e0e1fa254"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4fdce986e4b05e33b9224f74"}, {"code": "(fn [& args] (reduce #(cond (> %1 %2) %1 :else %2) args))", "problem": 38, "user": "4f616892e4b0defedf855fbf"}, {"code": "(fn [& s] (last (sort s)))", "problem": 38, "user": "503bdcafe4b0fc0f99c2e548"}, {"code": "(fn [& vals] (reduce \n  (fn [a b](if (> a b) a b)) 0 vals))", "problem": 38, "user": "5036eba7e4b0af0658af77a5"}, {"code": "(fn [& nums]\n  (reduce #(if (> %1 %2) %1 %2) nums))", "problem": 38, "user": "503ee85ce4b06c4e0e1fa26e"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4f038ed6535dcb61093f6b24"}, {"code": "(fn !\n  ([x] x)\n  ([x y] (if (> y x) y x))\n  ([x y & more] (reduce ! (! x y) more)))", "problem": 38, "user": "50410452e4b06d8231e4faca"}, {"code": "(fn [& args] (reduce #(if (> % %2) % %2) args))", "problem": 38, "user": "50293245e4b08353e5d459cf"}, {"code": "(fn [ & coll]\n             (first (reverse (sort coll))))", "problem": 38, "user": "503be880e4b0fc0f99c2e54a"}, {"code": "(fn [& vals]\n  (loop [largest 0\n         list vals]\n    (if (empty? list)\n       largest\n       (recur \n         (if (> (first list) largest) (first list) largest) (rest list))\n)))", "problem": 38, "user": "503e6047e4b06c4e0e1fa266"}, {"code": "(fn [& a] (reduce (fn [x y] (if (> x y) x y)) a))", "problem": 38, "user": "503de5aae4b06c4e0e1fa259"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "503ea917e4b06c4e0e1fa26b"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4ff1d6a7e4b0678c553fc32f"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "problem": 38, "user": "4fdf566fe4b05e33b9224f99"}, {"code": "(fn [a & b] \n  (reduce #(if (> %1 %2) %1 %2) a b))", "problem": 38, "user": "50436470e4b034ff00315d23"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4fcf763de4b03432b189f413"}, {"code": "(fn [& args]\n  (reduce\n    (fn [mx el]\n      (if (> el mx) el mx))\n    args))", "problem": 38, "user": "50427899e4b0add3005c0fc2"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) 0 xs))", "problem": 38, "user": "4fd81472e4b0dab7d829f38e"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "4fb266a5e4b081705acca28c"}, {"code": "(fn [& l]\n  (loop [m (first l) l (rest l)]\n    (if (= () l)\n      m\n        (recur\n          \n          (if (> (first l) m)\n            (first l)\n            m) (rest l)))))", "problem": 38, "user": "50435852e4b034ff00315d22"}, {"code": "(fn [& nums]\n  (reduce \n    (fn [a b] \n      (if (> a b) a b))\n    nums))", "problem": 38, "user": "4f70bcf9e4b07046d9f4effe"}, {"code": "#(last (sort %&))", "problem": 38, "user": "504457c0e4b01f6c9a8b2360"}, {"code": "(fn[& args] (reduce #(if (< %1 %2) %2 %1) args))", "problem": 38, "user": "50431cbce4b034ff00315d1c"}, {"code": "(fn [& rest] (first (reverse (sort rest))))", "problem": 38, "user": "5008d149e4b0144d4f561e41"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4db0114d838c48654951d9b8"}, {"code": "(fn [& xs] (last (sort xs)))", "problem": 38, "user": "4fab1ea1e4b081705acca210"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "4e7d9257535db169f9c796dd"}, {"code": "(fn [ & x] (reduce #(if (> %1 %2) %1 %2) 0 x))", "problem": 38, "user": "4db5708d535d87e67b28fe0c"}, {"code": "(fn [& x] \n  (reduce #(if (> % %2) % %2) x))", "problem": 38, "user": "5046b003e4b011c5dfee7727"}, {"code": "(fn [& args] \n  (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "4ed152d5535d44c135fd68cc"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "502121bde4b0ef1d2d4433ba"}, {"code": "(fn [& numbers] (last (sort numbers)))", "problem": 38, "user": "4f0385b9535dcb61093f6b0e"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "50378996e4b0af0658af77ae"}, {"code": "(fn [& args] (last (apply sorted-set args)))", "problem": 38, "user": "50464831e4b011c5dfee771f"}, {"code": "(fn [& numbers] (last (sort numbers)))", "problem": 38, "user": "50481b70e4b0ec70b3ef8d98"}, {"code": "#(reduce (fn [a b] (if (< a b) b a)) %&)", "problem": 38, "user": "50479524e4b0371827a27bc4"}, {"code": "(fn [& xs]\n  (reduce #(if (< %2 %1) %1 %2) xs))", "problem": 38, "user": "4e8239d6535db62dc21a62c4"}, {"code": "(fn [x & more] \n  (reduce \n    #(if (< %1 %2) \n      %2 ;if x < (first more) \n      %1) ;else x >= (first more)\n    x more))", "problem": 38, "user": "5020d2aee4b0cb6ebc0a42fb"}, {"code": "(fn [& more] (reduce (fn [a b] (if (> a b) a b)) more))", "problem": 38, "user": "501ffbb1e4b0cb6ebc0a42f2"}, {"code": "(fn [ & sec] \n (reduce #(if (> %1 %2) %1 %2) sec) \n)", "problem": 38, "user": "5048202fe4b0ec70b3ef8d9a"}, {"code": "(comp last sorted-set)", "problem": 38, "user": "4f902831e4b0dcca54ed6c8b"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "5048f98ee4b06e644c63f1af"}, {"code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "problem": 38, "user": "50435689e4b034ff00315d21"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "504820c8e4b0ec70b3ef8d9b"}, {"code": "(fn [ & x] (last (sort x)))", "problem": 38, "user": "5047bbd1e4b0ec70b3ef8d90"}, {"code": "#(last (sort %&))", "problem": 38, "user": "50432da5e4b034ff00315d1e"}, {"code": "#(last (sort %&))", "problem": 38, "user": "504a2c2ce4b044486d8af290"}, {"code": "(fn [& args] (first (sort > args)))", "problem": 38, "user": "50481532e4b0ec70b3ef8d96"}, {"code": "(fn [x & more] (#(loop [maxvalue Integer/MIN_VALUE col %] (if (empty? col) maxvalue (recur (if (> (first col) maxvalue) (first col) maxvalue ) (rest col))))  (conj (seq  more) x)  ) )", "problem": 38, "user": "50463347e4b011c5dfee771e"}, {"code": "(fn [n & x]\n  (if (empty? x) n\n    (if (> (first x) n) (recur (first x) (rest x))\n      (recur n (rest x)))))", "problem": 38, "user": "503cc8cae4b06c4e0e1fa251"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "50456731e4b01f6c9a8b236b"}, {"code": "(fn [& more] (reduce #(if (< %1 %2) %2 %1) more))", "problem": 38, "user": "503e7f06e4b06c4e0e1fa268"}, {"code": "(fn [& y] (last (sort y)))", "problem": 38, "user": "5045ac21e4b01f6c9a8b2371"}, {"code": "(fn [y & ys] (reduce #(if (> %1 %2) %1 %2) y ys))", "problem": 38, "user": "4dd59d8b535dae65d5c462eb"}, {"code": "(comp \n  (partial \n    reduce \n    #(if (> % %2) % %2))\n list)", "problem": 38, "user": "5041b3c0e4b06d8231e4facf"}, {"code": "(fn this\n  \t\t([x] x)\n\t\t\t([x y] (if (> x y) x y))\n\t\t\t([x y & more] (let [x1 (this x y) x2 (apply this more)] (if (> x1 x2) x1 x2)))\n\t\t\t)", "problem": 38, "user": "5048bcf8e4b06e644c63f1ae"}, {"code": "(fn m [& c] (reduce (fn f [a b] (if (< a b) b a)) c))", "problem": 38, "user": "5034374de4b062bc5d7ae161"}, {"code": "(fn [n & ns]\n  (reduce #(if (> %1 %2) %1 %2) n ns)\n)", "problem": 38, "user": "504d0116e4b022602c20b089"}, {"code": "(fn [& args] \n  (reduce \n    (fn [a b] \n      (if (> a b) a b)) args))", "problem": 38, "user": "50295775e4b0b33e9bf6fdf2"}, {"code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4db2cc55535df7e46ed9b6c5"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "504e07f3e4b078edc5f593a4"}, {"code": "(fn [& args]\n  (reduce\n    (fn [a b] (if (< a b) b a))\n    args))", "problem": 38, "user": "504e2f89e4b0f6ff3350c47d"}, {"code": "(fn\r\n  [& lst]\r\n  (when (seq lst)\r\n    (loop [m 0 remaining lst]\r\n      (if (seq remaining)\r\n        (let [f (first remaining)]\r\n          (recur\r\n            (if (> f m) f m)\r\n            (rest remaining)))\r\n        m))))", "problem": 38, "user": "4e7dec83535db169f9c796f3"}, {"code": "(fn mx [& args] (if \n  (empty? (rest args))\n  (first args)\n  (if (> (first args) (apply mx (rest args))) \n      (first args)\n      (apply mx (rest args)))))", "problem": 38, "user": "504e108ce4b078edc5f593b3"}, {"code": "(fn [& args]\n  (reduce (fn [a b]\n    (if (> a b) a b)) args))", "problem": 38, "user": "504e48ace4b0f6ff3350c498"}, {"code": "(fn [& args]\n  (reduce #(if (< %1 %2) %2 %1) 0 args))", "problem": 38, "user": "504e13fce4b078edc5f593bc"}, {"code": "(fn m\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] (reduce m (m x y) more)))", "problem": 38, "user": "504e2600e4b0f6ff3350c46f"}, {"code": "(comp (partial reduce #(if (> % %2) % %2)) list)", "problem": 38, "user": "4faf5223e4b081705acca252"}, {"code": "(fn [& args] (reduce #(if (> % %2) % %2) args))", "problem": 38, "user": "504ed350e4b069badc5a33d1"}, {"code": "(fn [& xs] (reduce (fn [a b] (if (> a b) a b)) 0 xs))", "problem": 38, "user": "504eed01e4b0e7ad84dbc4a5"}, {"code": "(fn my-max [& args]\n  (reduce #(if (> %1 %2) %1 %2) args)\n)", "problem": 38, "user": "4f525fdce4b03ad3f0c10d37"}, {"code": "#(first (sort > %&))", "problem": 38, "user": "5043a536e4b034ff00315d24"}, {"code": "(fn [& vs] (reduce #(if (> %1 %2) %1 %2) vs))", "problem": 38, "user": "504e397ee4b0f6ff3350c485"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "504e3afae4b0f6ff3350c488"}, {"code": "(fn [& s]\r\n  (reduce #(if (> %1 %2) %1 %2) s))", "problem": 38, "user": "504e14c2e4b078edc5f593bf"}, {"code": "(fn findmax [& items]\n  (let [i (flatten items) x (first i)]\n    (if (= (count i) 1)\n      x\n      (let [y (findmax (rest i))]\n        (if (> x y) x y)))))", "problem": 38, "user": "503f923fe4b00d1a725ff2ad"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "504dff92e4b078edc5f5938a"}, {"code": "(fn [& x]\n  (reduce (fn [a b] (if (> a b) a b)) 0 x))", "problem": 38, "user": "4dd29ede535dae65d5c462da"}, {"code": "(fn mymax\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n   (reduce mymax (mymax x y) more)))", "problem": 38, "user": "504f44cfe4b0a02f9cffde65"}, {"code": "(fn [& args]\r\n  (reduce (fn [x y] \r\n\t\t(if (> x y)\r\n\t\t\tx\r\n\t\t\ty\r\n\t\t) \r\n\t) args )\r\n)", "problem": 38, "user": "504f3aede4b0a02f9cffde5d"}, {"code": "(fn adam [& args] \r\n  (reduce \r\n\t\t(fn [x y] \r\n\t\t\t(if (> x y) x y))\r\n\t\targs))", "problem": 38, "user": "504e6165e4b0f6ff3350c4aa"}, {"code": "(fn [fv & xs]\n  (loop [v fv\n         x xs\n         c 0]\n         (if (empty? x)\n          (if (> v c) v c)\n          (recur (first x) (rest x) (if (> v c) v c)))))", "problem": 38, "user": "504e9011e4b069badc5a33b7"}, {"code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "problem": 38, "user": "504e15a8e4b078edc5f593c1"}, {"code": "(fn [x & more]\n  (reduce #(if \n    (> %1 %2) %1 %2) \n(cons x more)))", "problem": 38, "user": "504e2333e4b0f6ff3350c46c"}, {"code": "(fn [& args]\n  (last\n   (sort args)))", "problem": 38, "user": "504ec4d3e4b069badc5a33c9"}, {"code": "(fn [& s] (reduce #(if (< %1 %2) %2 %1) s))", "problem": 38, "user": "4fc5a693e4b0ee37620e17fc"}, {"code": "(fn [& ps] (-> ps sort last))", "problem": 38, "user": "504f2071e4b0e7ad84dbc4be"}, {"code": "(fn x [m & args] (let [a (flatten args) f (first a) r (next a) h (if (> f m) f m)] (if (nil? r) h (x h r)))) 0", "problem": 38, "user": "504e9f5ce4b069badc5a33bd"}, {"code": "(fn my-max [ & xs ]\n  (loop [xs xs best 0]\n    (if (empty? xs)\n      best\n      (recur (rest xs)\n             (if (< best (first xs))\n               (first xs)\n               best)))))", "problem": 38, "user": "504f5804e4b0a02f9cffde72"}, {"code": "(fn [& s] (reduce (fn [a b] (if (> a b) a b)) s))", "problem": 38, "user": "5050b107e4b063148f524126"}, {"code": "(fn [& args](reduce (fn [x y] (if (> y x) y  x) ) args))", "problem": 38, "user": "504f0036e4b0e7ad84dbc4aa"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "4fda108ee4b05e33b9224f46"}, {"code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "504e685fe4b0f6ff3350c4ae"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "504f3fa3e4b0a02f9cffde62"}, {"code": "(fn [& xs] (#(reduce (fn [a b] (if (> a b) a b)) xs)))", "problem": 38, "user": "504f3f13e4b0a02f9cffde60"}, {"code": "(fn [& args] \n  (if (empty? (rest args))\n      (first args)\n      (let\n        [x (first args),\n         y (first (rest args)),\n         m (if (> x y) x y)]\n        ((fn [ma lst]\n          (if (empty? lst)\n              ma\n              (let [mx (if (> ma (first lst)) ma (first lst))]\n                (recur mx (rest lst)))))\n          m args))))", "problem": 38, "user": "504e1fdde4b0f6ff3350c468"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "50517ebfe4b0a561d07d8f06"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) 0 x))", "problem": 38, "user": "504f191ae4b0e7ad84dbc4ba"}, {"code": "(fn [& xs] (reduce (fn [x y] (if (> x y) x y)) xs))", "problem": 38, "user": "504f865ee4b0a02f9cffde90"}, {"code": "(fn [& args]\n  (reduce\n    (fn [a b]\n      (if (> a b) a b))\n    args)\n)", "problem": 38, "user": "5051404be4b0b30bd8f4f840"}, {"code": "(fn [& coll] (reduce #(if (> %2 %1) %2 %1) 0 coll))", "problem": 38, "user": "504e1abee4b0f6ff3350c45d"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4ebbc1f6535dfed6da9c6d72"}, {"code": "(fn [& more]\n  (last (sort more)))", "problem": 38, "user": "504e04a4e4b078edc5f59397"}, {"code": "(fn [& xs] (reduce (fn [a b] (if (> a b) a b)) xs))", "problem": 38, "user": "504c8165e4b09724c857af31"}, {"code": "(comp (comp last sort) list)", "problem": 38, "user": "504efb61e4b0e7ad84dbc4a8"}, {"code": "#(last (sort %&))", "problem": 38, "user": "50548ce8e4b0b1b9d1860ead"}, {"code": "(fn [& args] (-> args vec sort last))", "problem": 38, "user": "5053de37e4b0b1b9d1860ea8"}, {"code": "(fn [& args]\n  (loop [lst (rest args) res (first args)]\n    (if (empty? lst) res\n        (recur (rest lst) (if (> res (first lst)) res (first lst))))))", "problem": 38, "user": "50555c06e4b0ce54f56f03fa"}, {"code": "(fn [& args]\n  (reduce #(if (> % %2) % %2) 0 args))", "problem": 38, "user": "5055899de4b0ce54f56f03fd"}, {"code": "(fn [& args] (reduce (fn [x y] (if (< x y) y x)) args))", "problem": 38, "user": "4ff769bce4b0678c553fc38f"}, {"code": "(fn foo   \r\n  ([x] x)\r\n  ([x y] (if (> x y) x y))\r\n  ([x y & more]\r\n   (reduce foo (foo x y) more)))", "problem": 38, "user": "5054c853e4b0b1b9d1860eb3"}, {"code": "(fn mx [& args]\n  (first (sort > args)))", "problem": 38, "user": "504f57c7e4b0a02f9cffde71"}, {"code": "(fn [& xs]\n  (reduce #(if (< %1 %2) %2 %1) xs))", "problem": 38, "user": "5052ab7ee4b0a561d07d8f20"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "504f2efae4b0e7ad84dbc4c9"}, {"code": "(fn [& args] (first (sort > args)))", "problem": 38, "user": "5057242fe4b0012181721986"}, {"code": "(fn [& nums] \n      (reduce (fn [acc n] (if (> acc n) acc n)) nums))", "problem": 38, "user": "502ade49e4b0614b52996120"}, {"code": "#(last (sort %&))", "problem": 38, "user": "5042de0de4b034ff00315d1b"}, {"code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "50471d36e4b03b02161376b6"}, {"code": "#(last (sort %&))", "problem": 38, "user": "5040edf4e4b0ff5d2cc40db5"}, {"code": "(fn [& args] (reduce (fn [r i] (if (> r i) r i)) args))", "problem": 38, "user": "4fca2a13e4b0ee37620e184d"}, {"code": "(fn [x & more]\n  (reduce #(if (> %1 %2) %1 %2) x more))", "problem": 38, "user": "50586354e4b06522596eba78"}, {"code": "(fn [head & args]\n  ((fn self [xs curmax]\n    (cond\n     (empty? xs) curmax\n     (> (first xs) curmax) (self (rest xs) (first xs))\n     :else (self (rest xs) curmax))) args head))", "problem": 38, "user": "5058493ae4b06522596eba75"}, {"code": "(fn [& more] (reduce (fn [x y] (if (< x y) y x)) more))", "problem": 38, "user": "504e8e48e4b069badc5a33b3"}, {"code": "#(-> %& sort last)", "problem": 38, "user": "4fc6e1a8e4b0ee37620e181d"}, {"code": "(fn [& x]\r\n  (first (reverse (sort x))))", "problem": 38, "user": "4f9aa97ae4b0dcca54ed6d0e"}, {"code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) coll))", "problem": 38, "user": "5059da46e4b03d2efce48c56"}, {"code": "(fn [& lista]\n  (last (sort lista)))", "problem": 38, "user": "50576483e4b001218172198b"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "504f65bae4b0a02f9cffde7e"}, {"code": "(fn [& nums]\n  (reduce (fn [a b] (if (> a b) a b)) 0 nums))", "problem": 38, "user": "505bd09fe4b032b709c81373"}, {"code": "(fn [& xs] (reduce (fn [a b] (if (> a b) a b) ) xs ) )", "problem": 38, "user": "4fe9364be4b0547ebccb244e"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "50563ae2e4b0ce54f56f0405"}, {"code": "(fn my-max [& numbers]\n  (reduce (fn [a b] (if (>= a b) a b)) numbers))", "problem": 38, "user": "4fd769a1e4b0dab7d829f382"}, {"code": "#(last (sort %&))", "problem": 38, "user": "505b9084e4b032b709c81371"}, {"code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) s) )", "problem": 38, "user": "505d26aee4b0e6aca564be05"}, {"code": "#(reduce (fn [t e] (if (> e t) e t)) 0 %&)", "problem": 38, "user": "50588ff1e4b06522596eba7e"}, {"code": "(fn m [& args]\n  (reduce (fn [y z] (if (> y z) y z)) args))", "problem": 38, "user": "50588af1e4b06522596eba7d"}, {"code": "(fn [& args] \n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "505aa653e4b021387fb89857"}, {"code": "(fn mx [& xs]\n    (reduce\n     (fn [a b] (if (> a b) a b))\n     xs))", "problem": 38, "user": "5055e7f4e4b0ce54f56f0401"}, {"code": "#(-> %& sort last)", "problem": 38, "user": "5054bc87e4b0b1b9d1860eb0"}, {"code": "(fn [& iseq]\n  (reduce (fn [x y]\n            (if (> x y)\n              x\n              y)) iseq))", "problem": 38, "user": "4f046d70535dcb61093f6bc5"}, {"code": "(fn [x & a] (last (sort (conj a x))))", "problem": 38, "user": "505d4b21e4b0e6aca564be07"}, {"code": "(fn [& l] (reduce #(if (> %1 %2) %1 %2) l))", "problem": 38, "user": "504e72cee4b0f6ff3350c4b4"}, {"code": "(fn [& y]\n  (reduce #(if (> %1 %2) %1 %2) y))", "problem": 38, "user": "50602bc6e4b08f2a82ad10ba"}, {"code": "(fn [& col] (reduce #(if (> %1 %2) \n                       %1 \n                       %2) \n                  (first col)\n                  col))", "problem": 38, "user": "50310b8be4b05b7df5a0b84d"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "problem": 38, "user": "5058afbbe4b06522596eba81"}, {"code": "(fn [& args]\n  (loop [lst args mx 0]\n    (if (empty? lst)\n        mx\n        (recur (rest lst) (if (> (first lst) mx) (first lst) mx)))))", "problem": 38, "user": "5060d137e4b0dc10a69545a0"}, {"code": "(fn [& nums] (last (sort nums)))", "problem": 38, "user": "5057f59ce4b06522596eba73"}, {"code": "#(reduce (fn [x y] (if (> x y) x y)) %&)", "problem": 38, "user": "505fdf63e4b08f2a82ad10b9"}, {"code": "#( reduce (fn [x y] (if (> x y) x y)) %& )", "problem": 38, "user": "505fc8e3e4b08f2a82ad10b6"}, {"code": "(fn [& nums] (reduce (fn [x y] (if (> x y) x y)) nums))", "problem": 38, "user": "50608d4ce4b07251188e4455"}, {"code": "(fn [& vals]\n  (reduce #(if (> %1 %2) %1 %2) vals))", "problem": 38, "user": "504ec46de4b069badc5a33c8"}, {"code": "(fn [& more] (reduce (fn [x y] (if (> x y) x y)) more))", "problem": 38, "user": "502f4c89e4b0842eb223d8b9"}, {"code": "(fn [& args] \n  (last (sort args)))", "problem": 38, "user": "50630247e4b05ac47bc68d6b"}, {"code": "(fn [& args]\n  (reduce (fn [zero acc]\n    (if (> zero acc)\n      zero\n      acc)) args))", "problem": 38, "user": "50611456e4b0dc10a69545a5"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "5063b9a0e4b075d771da6f9d"}, {"code": "(fn [& args] (reduce (fn [m e] (if (> e m) e m)) args))", "problem": 38, "user": "5063fe48e4b075d771da6f9e"}, {"code": "(comp last sort list)", "problem": 38, "user": "504e3aaae4b0f6ff3350c487"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "50645e12e4b007509339a58a"}, {"code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) coll))", "problem": 38, "user": "5041bdf3e4b06d8231e4fad0"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "5065052ae4b0b1b6c8b1d85e"}, {"code": "#(loop [values %& maxi -1]\n  (if (empty? values)\n    maxi\n    (if (> (first values) maxi)\n      (recur (rest values) (first values))\n      (recur (rest values) maxi))))", "problem": 38, "user": "505a2f3be4b03d2efce48c5b"}, {"code": "#(last (sort %&))", "problem": 38, "user": "5054c7e1e4b0b1b9d1860eb2"}, {"code": "(fn [x & xs]\n    (reduce #(if (> %1 %2) %1 %2) x xs))", "problem": 38, "user": "50668a06e4b03d366d7cb2b2"}, {"code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "problem": 38, "user": "4e6ad36f535d8ccf87e9ff07"}, {"code": "#(last (sort %&))", "problem": 38, "user": "506617c3e4b03d366d7cb2ab"}, {"code": "(fn mx [& args] \n   (reduce (fn comp[n, m]\t     \n\t    (if (< n m) m n)) args))", "problem": 38, "user": "4f8b05d2e4b02e764a0a5176"}, {"code": "(fn [& numbers]\n  (reduce #(if (> %1 %2) %1 %2) numbers))", "problem": 38, "user": "5057852ce4b0012181721992"}, {"code": "(fn [& more]\n  (reduce #(if (> %1 %2) %1 %2) more))", "problem": 38, "user": "504db141e4b021508a333965"}, {"code": "(fn [& l]\n  (reduce #(if (> % %2) % %2) l))", "problem": 38, "user": "505f55d3e4b08f2a82ad10b0"}, {"code": "(fn mx [& args]\n  (if (= 1 (count args))\n    (first args)\n    (let [f (first args)\n          r (apply mx (rest args))]\n      (if (> f r) f r))\n  )\n)", "problem": 38, "user": "504e0136e4b078edc5f5938e"}, {"code": "(fn [& x] (reduce #(if (> % %2) % %2) x))", "problem": 38, "user": "50657775e4b0deb876850599"}, {"code": "(fn [& x] (reduce #(if (< % %2) %2 %) x))", "problem": 38, "user": "5065faf9e4b0313a384e5645"}, {"code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "4edb4c7c535d10e5ff6f5318"}, {"code": "(fn [& nums] (reduce #(if (> % %2) % %2) 0 nums))", "problem": 38, "user": "506755b3e4b03d366d7cb2bc"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "5066fa7de4b03d366d7cb2b9"}, {"code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "5069f24fe4b01dc6af13f83c"}, {"code": "(fn [ & coll]\n    (loop [x coll m (first coll)]\n        (if (empty? x)\n            m\n        (recur (rest x) (if (> (first x) m) (first x) m\n)))))", "problem": 38, "user": "5068c203e4b0c0169921a8e4"}, {"code": "(fn [& coll] (last(sort coll)))", "problem": 38, "user": "50621cbde4b0341461c88951"}, {"code": "(fn get-max\n  [e & l]\n  (loop [temp-list l max-elem e]\n    (if (empty? temp-list)\n      max-elem\n      (if (> max-elem (first temp-list))\n        (recur (rest temp-list) max-elem)\n        (recur (rest temp-list) (first temp-list))))))", "problem": 38, "user": "5046f909e4b03b02161376b5"}, {"code": "(fn f1 [& rest] (reduce #(if (> % %2) % %2) rest))", "problem": 38, "user": "50015be1e4b0678c553fc41a"}, {"code": "(fn [& args]\n  (loop [l args m nil]\n    (cond\n      (= 0 (count l))\n        m\n      (or (= nil m) (> (first l) m))\n        (recur (drop 1 l) (first l))\n      :else\n        (recur (drop 1 l) m)\n    )))", "problem": 38, "user": "4dbac43b535d1e037afb21ac"}, {"code": "(fn [& params] (last (sort params)))", "problem": 38, "user": "502a3ffbe4b01f0b5e5efaa5"}, {"code": "(fn [x & xs]\n  (if (empty? xs)\n    x\n    (let [y (first xs)]\n      (recur (if (>= x y) x y) (rest xs)))))", "problem": 38, "user": "4f32ef71e4b0d6649770a098"}, {"code": "(fn [& x]\n  (loop [cur (first x)\n         r   (rest x)]\n  (if (= 1 (count r))\n    (if (> cur (first r))\n         cur\n         (first r))\n    (if (> cur (first r))\n      (recur cur (rest r))\n      (recur (first r) (rest r))))))", "problem": 38, "user": "5051e2abe4b0a561d07d8f0a"}, {"code": "(fn [ & xs ]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4fa340b4e4b081705acca18c"}, {"code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "506b016de4b0a2a5463de37f"}, {"code": "(fn [& args]\n  (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "506a1985e4b01dc6af13f83e"}, {"code": "(fn [& rest] (last (sort rest)))", "problem": 38, "user": "4e1b0e48535d04ed9115e7fb"}, {"code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "506c2c9be4b080c1a96bd6be"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "506b8242e4b0eda3100c090a"}, {"code": "(fn [& xs]\n    (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "506b0a9ce4b0a2a5463de380"}, {"code": "(fn [& args] (reduce (fn [x y] (if(> x y) x y)) args))", "problem": 38, "user": "50699475e4b01dc6af13f834"}, {"code": "(fn [& args]\n  (loop [mx (first args)\n         args (rest args)]\n    (if (empty? args)\n         mx\n         (recur (if (> (first args) mx)\n                    (first args)\n                     mx)\n                (rest args)))))", "problem": 38, "user": "50618c62e4b0a30dc9a35d33"}, {"code": "(fn mx[& s]\n  (reduce #(if (>= %1 %2) %1 %2) s))", "problem": 38, "user": "504e24e2e4b0f6ff3350c46d"}, {"code": "(fn [& args]\n  (loop [m (first args) s (rest args)]\n    (if (empty? s) \n    m\n    (recur (if (> (first s) m) (first s) m) (rest s)))))", "problem": 38, "user": "506b18c8e4b0a2a5463de383"}, {"code": "(fn [& lat] (last (sort lat)))", "problem": 38, "user": "501b1efee4b0b12d9c5f4d82"}, {"code": "(fn [& more] (last (sort more)))", "problem": 38, "user": "506c0a02e4b0eda3100c090d"}, {"code": "(fn [& s] (reduce (fn [a b] (if (> a b) a b)) s))", "problem": 38, "user": "50366589e4b0fbe0a74d26c3"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "506c2006e4b080c1a96bd6bc"}, {"code": "(fn [& args] (first (sort > args)))", "problem": 38, "user": "5037c397e4b0af0658af77b4"}, {"code": "(fn [& x] (reduce #(if (> % %2) % %2) x))", "problem": 38, "user": "506e0e5ae4b09350ab4199eb"}, {"code": "(fn [& l] (reduce #(if (> %1 %2) %1 %2) l))", "problem": 38, "user": "5017d9a9e4b0adbf98d88a3f"}, {"code": "(fn [& xs] (reduce #(if (> % %2) % %2) xs))", "problem": 38, "user": "506ef8c3e4b09350ab4199f4"}, {"code": "(fn mymax\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n     (if (> x y)\n       (reduce mymax x more)\n       (reduce mymax y more))))", "problem": 38, "user": "506f5f26e4b082ae7d1032c8"}, {"code": "(fn [& a] (reduce #(or (and (> %1 %2) %1) %2) a))", "problem": 38, "user": "507056b8e4b07bd6ad9b9f29"}, {"code": "(fn [& rst] (reduce #(if (> %1 %2) %1 %2) rst))", "problem": 38, "user": "50705072e4b07bd6ad9b9f27"}, {"code": "(fn [f & more] (reduce #(if (> %1 %2) %1 %2) f more))", "problem": 38, "user": "506fd0afe4b07bd6ad9b9f23"}, {"code": "(fn [& list]\n  (reduce\n    (fn [a b]\n      (if (> a b) a b))\n    list))", "problem": 38, "user": "503efe01e4b06c4e0e1fa26f"}, {"code": "(fn m ([x] x) ([x y] (if (> x y) x y)) ([x y & more] (reduce m (m x y) more)))", "problem": 38, "user": "5065f283e4b0313a384e5644"}, {"code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) s))", "problem": 38, "user": "4f3b5219e4b0e243712b1f2a"}, {"code": "(fn [x & xs](reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4fefbfe7e4b0678c553fc31a"}, {"code": "(fn [& args]\n  (loop [m (first args)\n         r (rest args)]\n    (if (empty? r)\n      m\n      (let [e (first r)]\n        (recur (if (> e m) e m)\n               (rest r))))))", "problem": 38, "user": "506f1e12e4b09350ab4199f9"}, {"code": "(fn my-max [& lst]\n  (loop [n (first lst) lst (rest lst)]\n  (if (empty? lst)\n    n\n    (recur (if (> (first lst) n) (first lst) n)\n           (rest lst)))))", "problem": 38, "user": "50720885e4b0e3170b5a8689"}, {"code": "(fn [x & more] (reduce #(if (> %1 %2) %1 %2) (flatten (conj '() x more))))", "problem": 38, "user": "5071b614e4b0e3170b5a867d"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "5071e520e4b0e3170b5a8683"}, {"code": "(fn [& args]\n  (reduce (fn [a b]\n    (if (> a b)\n      a\n      b\n    )\n  ) args)\n)", "problem": 38, "user": "506ec408e4b09350ab4199f1"}, {"code": "(fn f [a & args] \n  (if (empty? args) a\n    (let [tmax (apply f args)] \n      (if (> a tmax) a tmax))))", "problem": 38, "user": "50729f67e4b0e3170b5a868e"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) 0 args))", "problem": 38, "user": "506406c8e4b075d771da6f9f"}, {"code": "(fn [& n] (-> n sort last))", "problem": 38, "user": "503f872ee4b00d1a725ff2ac"}, {"code": "(fn [& l] (reduce (fn [x y] (if (> x y) x y)) l))", "problem": 38, "user": "507437c2e4b054001656acd0"}, {"code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "problem": 38, "user": "5074b3ece4b054001656acd5"}, {"code": "(fn [& more] (reduce #(if (< %1 %2) %2 %1) more))", "problem": 38, "user": "5065b810e4b0148eb3925aec"}, {"code": "(fn [& a] (first (sort > a)))", "problem": 38, "user": "505f5e2fe4b08f2a82ad10b2"}, {"code": "(fn [& x]\n  (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "50706287e4b07bd6ad9b9f2b"}, {"code": "#(last (sort %&))", "problem": 38, "user": "5069874de4b01dc6af13f832"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "5072b0e1e4b0e3170b5a8690"}, {"code": "(fn maximum [& args]\n  (reduce (fn [v x] (if (> v x) v x)) args))", "problem": 38, "user": "50763574e4b0a894bb95bf3d"}, {"code": "#(last (sort %&))", "problem": 38, "user": "5060ae00e4b07251188e4459"}, {"code": "(fn f [& xs] \n    (reduce \n      (fn [x y] (if (< x y) y x)) \n    xs))", "problem": 38, "user": "50751598e4b054001656acd9"}, {"code": "(fn [& lst]\n  (last (sort lst)))", "problem": 38, "user": "4fc7ddffe4b0ee37620e182b"}, {"code": "#(last (sort %&))", "problem": 38, "user": "50783762e4b0fc74642bff67"}, {"code": "(fn [& a] (last (sort a)))", "problem": 38, "user": "506f5d68e4b082ae7d1032c7"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4e2110c7535d04ed9115e813"}, {"code": "(fn [& col] (reduce #(if (> %1 %2) %1 %2) col))", "problem": 38, "user": "507a08e4e4b08327cd804a67"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "504eff22e4b0e7ad84dbc4a9"}, {"code": "(fn mymax ([x] x) ([x y] (if (> x y) x y)) ([x y & more] (reduce mymax (mymax x y) more)))", "problem": 38, "user": "4fcee8bce4b03432b189f408"}, {"code": "(fn [& nums] (reduce #(if (> %1 %2) %1 %2) nums))", "problem": 38, "user": "507b7dbee4b09034bfeeb71e"}, {"code": "(fn [& a] (reduce (fn [x y] (if (> x y) x y)) a))", "problem": 38, "user": "4fb1d7ace4b081705acca281"}, {"code": "(fn [& lst] (reduce (fn [x y] (if (< x y) y x)) lst))", "problem": 38, "user": "4fecebe1e4b0681fd128dcac"}, {"code": "(fn [& s] (last (sort s)))", "problem": 38, "user": "50799992e4b08327cd804a62"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "507a9b29e4b08327cd804a6e"}, {"code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "4fceef7ae4b03432b189f40a"}, {"code": "(fn [& coll] \n  (reduce (fn [a b] (if (> a b) a b)) coll)\n)", "problem": 38, "user": "50217818e4b00bba4502f7a7"}, {"code": "#(last (sort %&))", "problem": 38, "user": "5034b623e4b062bc5d7ae168"}, {"code": "#(- (apply min (map - %&)))", "problem": 38, "user": "5061cc17e4b0a30dc9a35d34"}, {"code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "5077dd50e4b0fc74642bff63"}, {"code": "(fn [& xs] (reduce (fn [a b] (if (> a b) a b))  xs))", "problem": 38, "user": "507c7c8be4b0b083f3ff82ef"}, {"code": "(fn max* [& a]\n  (letfn [[maxi [m lst]\n           (cond (nil? lst) m\n                 (> m (first lst)) (maxi m (next lst))\n                 :else (maxi (first lst) (next lst)))]]\n  (if (= (count a) 1) (first a)\n     (maxi (first a) (next a)))))", "problem": 38, "user": "507db411e4b03c76e5499e06"}, {"code": "#(last (sort %&))", "problem": 38, "user": "5076af09e4b0aac56a60f7e3"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4e72dd5d535d5021c1a89667"}, {"code": "(fn [& args] (last (sort (seq args))))", "problem": 38, "user": "5078dedae4b08327cd804a5d"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "504ffb8fe4b0a02f9cffdeae"}, {"code": "(fn max-val [x & xs]\r\n  (reduce #(if (< %1 %2) %2 %1) (flatten (cons x xs))))", "problem": 38, "user": "508014cce4b089ade05efbdc"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "5073de20e4b054001656acca"}, {"code": "(fn [& n] (reduce #(if (> % %2) % %2) n))", "problem": 38, "user": "507a396be4b08327cd804a69"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "50807940e4b01a93d3f38e44"}, {"code": "(fn [& x] (first (sort > x)))", "problem": 38, "user": "507ef25ce4b0f753b6f9788e"}, {"code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "507eddf4e4b06ce648bcdbfa"}, {"code": "(fn mfn\n  ([x] x)\n  ([x & more] (if (> x (first more)) (apply mfn (conj (rest more) x)) (apply mfn more)))\n)", "problem": 38, "user": "506b437de4b0eda3100c0906"}, {"code": "(fn f ([one] one)\n      ([one & more] (let [r (apply f more)] (if (> r one) r one))))", "problem": 38, "user": "5069c09be4b01dc6af13f837"}, {"code": "(fn [& more] (last (sort < more)))", "problem": 38, "user": "5080d6e3e4b01a93d3f38e4b"}, {"code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) s))", "problem": 38, "user": "50822e03e4b057580b53f4b1"}, {"code": "(fn [& args]\r\n  (if (second args)\r\n    (if (> (first args) (second args))\r\n      (recur (conj (drop 2 args) (first args)))\r\n      (recur (rest args)))\r\n    (first args)))", "problem": 38, "user": "50820c3be4b0946d04438570"}, {"code": "(fn [& m] (reduce #(if (> %1 %2) %1 %2) m))", "problem": 38, "user": "4f75469ee4b0fbe0118ec55a"}, {"code": "(fn max' [& xs]\n  (let [x (first xs), xs' (next xs)]\n    (if (nil? xs') x\n      (let [m' (apply max' xs')]\n        (if (> x m') x m')))))", "problem": 38, "user": "508157b2e4b0946d0443855c"}, {"code": "(fn [x & list] (reduce #(if (> %1 %2) %1 %2) x list))", "problem": 38, "user": "50839a53e4b0902986d69e10"}, {"code": "(fn [& nums] (first (reverse (sort nums))))", "problem": 38, "user": "507f6bb8e4b089ade05efbd0"}, {"code": "(fn [a b & more]\r\n   (if (> a b) a b))", "problem": 38, "user": "4e028764535d04ed9115e790"}, {"code": "(fn find-max \r\n  ([x] x)\r\n  ([x y] (if (> x y) x y))\r\n  ([x y & z] (reduce find-max (find-max x y) z))\r\n)", "problem": 38, "user": "50845d3ee4b0fb8f40674bf3"}, {"code": "(fn [& x] (last (sort (seq x))))", "problem": 38, "user": "50838c06e4b0902986d69e0f"}, {"code": "(fn [& l] (reduce (fn [a b] (if (> a b) a b)) l))", "problem": 38, "user": "5084cb7de4b0fb8f40674bfb"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4f7beb36e4b06e829148e1ab"}, {"code": "#(-> %& sort last)", "problem": 38, "user": "507e68abe4b085af06e3afd2"}, {"code": "(fn [& xs] (reduce #(if (> %2 %1) %2 %1) xs))", "problem": 38, "user": "5083e759e4b0c98812d0787e"}, {"code": "(fn [& args] \n  (loop [mx (first args) rst (rest args)]\n    (cond\n      (empty? rst) mx\n      (> (first rst) mx) (recur (first rst) (rest rst))\n      :else (recur mx (rest rst)))))", "problem": 38, "user": "50843a4ae4b0c98812d0788b"}, {"code": "#(loop [all %& max2 (first all)] (if (empty? all) max2 (recur (rest all) (if (> (first all) max2) (first all) max2) )))", "problem": 38, "user": "500ae2ade4b03d00572d2d7d"}, {"code": "(fn mymax\r\n  ([x] x)\r\n  ([x y] (if (> x y) x y))\r\n  ([x y & more] (reduce mymax (mymax x y) more)))", "problem": 38, "user": "4fae0319e4b081705acca244"}, {"code": "#(last(sort %&))", "problem": 38, "user": "5088082ae4b0198722bd9854"}, {"code": "(fn a[& coll] (loop [x coll, maxi (first coll)] \n(if (empty? x) maxi\n(if \n  (> maxi (first x)) \n  (recur (rest x) maxi) \n  (recur (rest x) (first x)\n)))))", "problem": 38, "user": "50856bd1e4b004985b776e4c"}, {"code": "(fn [x & y] \n  (loop [z (conj y x)]\n    (if (empty? (next z))\n     (first z)\n     (if (> (first z) (last z))\n      (recur (next (reverse z)))\n      (recur (next z))\n     )\n    )\n   )\n  )", "problem": 38, "user": "507e5cf8e4b085af06e3afd1"}, {"code": "(fn me ([x] x) ([x y] (if (> x y) x y)) ([x y & more] (reduce me (me x y) more)))", "problem": 38, "user": "5089a4e3e4b037578f03c8b8"}, {"code": "#(last (sort (apply list %&)))", "problem": 38, "user": "502ac868e4b0614b5299611a"}, {"code": "#(last (sort %&))", "problem": 38, "user": "5089fc3ae4b016a21070049f"}, {"code": "(fn my-max [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "50812debe4b01a93d3f38e4c"}, {"code": "(fn [& nums] (reduce #(if (> %1 %2) %1 %2) nums))", "problem": 38, "user": "508b95a0e4b0be79e5b189c6"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "508ba469e4b0be79e5b189c8"}, {"code": "#(reduce (fn [a b] (if (> b a) b a)) %&)", "problem": 38, "user": "508c64bee4b0f17d83ea26b5"}, {"code": "(fn [& lst] (reduce #(if (> % %2) % %2) lst))", "problem": 38, "user": "508bed64e4b0be79e5b189cf"}, {"code": "(fn [& c] (last (sort c)))", "problem": 38, "user": "4db86aee535d1e037afb2193"}, {"code": "(fn [& r]\r\n    (loop [m (first r)\r\n           l (rest r)]\r\n      (cond (empty? l) m\r\n            (< m (first l)) (recur (first l) (rest l))\r\n            :else\r\n            (recur m (rest l)))))", "problem": 38, "user": "50868795e4b004985b776e5e"}, {"code": "(fn [& args]\n  (reduce\n    (fn [x y]\n      (if (> x y)\n        x\n        y\n      )\n    )\n    args\n  )\n)", "problem": 38, "user": "4fc8f671e4b0ee37620e1840"}, {"code": "(fn [ & all](reduce #(if (> % %2) % %2 ) all))", "problem": 38, "user": "4ff99f47e4b0678c553fc3aa"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) 0 args))", "problem": 38, "user": "508c33ece4b0f17d83ea26b1"}, {"code": "#(last (sort %&))", "problem": 38, "user": "5082ccb3e4b06a522e8c7af3"}, {"code": "(fn [& ns]\n  (reduce #(if (> %1 %2) %1 %2) ns))", "problem": 38, "user": "506ab9bae4b05d3b7762c74c"}, {"code": "#(first (reverse (sort %&)))", "problem": 38, "user": "4f49108ae4b0d56e7bb92be5"}, {"code": "(fn [& nums] (last (sort nums)))", "problem": 38, "user": "5089ebfee4b03217b26a539f"}, {"code": "(fn [ & args ] (last (sort args)))", "problem": 38, "user": "4ec1923f535dfed6da9c6db2"}, {"code": "(fn [& s]\n  (reduce #(if (> % %2) % %2) s))", "problem": 38, "user": "50901b2ee4b0ea685a20f774"}, {"code": "(fn [& nums] \n  (reduce (fn max-2 [one two]\n            (if (> one two) one two))\n  nums)\n)", "problem": 38, "user": "4f77eb86e4b0fbe0118ec585"}, {"code": "(fn [& nums] (last (sort nums)))", "problem": 38, "user": "508bf05ae4b0f17d83ea26aa"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "50897033e4b037578f03c8b3"}, {"code": "#(last (sort %&))", "problem": 38, "user": "501fd838e4b0cb6ebc0a42ed"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "509160dae4b0742c82730aef"}, {"code": "(fn a [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "500ec210e4b00fff93030f9d"}, {"code": "(fn m\n      ([x] x)\n      ([x y] (if (> x y) x y))\n      ([x y & more]\n          (apply m (m x y) more)))", "problem": 38, "user": "506ee0f4e4b09350ab4199f2"}, {"code": "(comp last sort list)", "problem": 38, "user": "507fbd77e4b089ade05efbd3"}, {"code": "(fn [& ps]\n  (loop [mx (first ps),\n         rst (rest ps)]\n    (if (empty? rst)\n      mx\n      (recur (if (> (first rst) mx) (first rst) mx) (rest rst)))))", "problem": 38, "user": "4f856adfe4b033992c121c44"}, {"code": "(fn f[& p] (reduce #(if (> %1 %2) %1 %2) p))", "problem": 38, "user": "5086ca15e4b004985b776e62"}, {"code": "(fn [& nums]\n  (first (reverse (sort nums))))", "problem": 38, "user": "4f843d3ce4b033992c121c2d"}, {"code": "(fn [& c] (reduce #(if (< %1 %2) %2 %1) c))", "problem": 38, "user": "4dda44f2535d02782fcbe9f1"}, {"code": "(fn [& args]\n  (first (sort > args)))", "problem": 38, "user": "5084c43be4b0fb8f40674bfa"}, {"code": "(fn [& r] (reduce #(if (> %1 %2) %1 %2) r))", "problem": 38, "user": "50813b88e4b09292fd669443"}, {"code": "(fn [& args] (last(sort args)))", "problem": 38, "user": "5089d52ce4b03217b26a539d"}, {"code": "(fn foo [& coll] \r\n       ( if (< (count coll) 2)\r\n       (first coll) (if (> (first coll) (first (rest coll) ))\r\n             (recur(foo (cons (first coll) (rest (rest coll)))) )\r\n             (recur (foo (cons (first (rest coll))(rest (rest coll)))) ) ) )\r\n   )", "problem": 38, "user": "5078300de4b0fc74642bff66"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "508ee17ae4b0706b2ed3ef8d"}, {"code": "(fn [& nums] (reduce (fn[m n] (if (>= n m) n m)) nums))", "problem": 38, "user": "508d8ab2e4b0f17d83ea26be"}, {"code": "(fn [i & args]\n  (loop [mx i as args]\n    (if (empty? as) mx\n        (if (> (first as) mx)\n            (recur (first as) (rest as))\n            (recur mx (rest as))))))", "problem": 38, "user": "4e7dbe0c535db169f9c796e3"}, {"code": "(fn [& i] (reduce #(if (> %1 %2) %1 %2) i))", "problem": 38, "user": "4ea5e32a535d7eef308072de"}, {"code": "(fn [& v] \r\n  (reduce \r\n    #(if (< %1 %2) %2 %1)\r\n    v))", "problem": 38, "user": "5097a95fe4b00ad8bab4e96e"}, {"code": "#(last (sort %&))", "problem": 38, "user": "50928084e4b097f48cc3856c"}, {"code": "(fn [ & args]\n  (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "5097b556e4b00ad8bab4e970"}, {"code": "(fn a [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "50981062e4b04e098a4c7268"}, {"code": "(fn [& args]\n  (reduce (fn [a b]\n\t\t   (if (< a b) b a))\n\t       args))", "problem": 38, "user": "5097ea89e4b087ccf61a7af4"}, {"code": "(fn[& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "problem": 38, "user": "507da5a7e4b03c76e5499e03"}, {"code": "#(last (sort %&))", "problem": 38, "user": "50970f51e4b00ad8bab4e950"}, {"code": "(fn mmax [m & r]\n  (println m r (rest r))\n  (if (nil? r)\n    m\n    (apply mmax (conj (rest r)\n                (if (> m (first r))\n                    m\n                    (first r))))))", "problem": 38, "user": "50053d6ce4b0678c553fc45e"}, {"code": "(fn s [n & m]\n  (cond\n   (empty? m) n\n   (> n (first m)) (apply s (conj (rest m) n))\n   (< n (first m)) (apply s m)))", "problem": 38, "user": "4ff6018de4b0678c553fc373"}, {"code": "(fn [& n] (last (sort n)))", "problem": 38, "user": "5098bcfee4b0cae2931060a1"}, {"code": "(fn [& args]\n  (first (reverse (sort args))))", "problem": 38, "user": "5098f5d6e4b0cae2931060a4"}, {"code": "(fn [& z] (reduce (fn [x y] (if (> x y) x y)) z))", "problem": 38, "user": "50959df3e4b087f34d351ab4"}, {"code": "(fn [& args] (reduce (fn [acc x] (if (> acc x) acc x)) args))", "problem": 38, "user": "504f90f5e4b0a02f9cffde99"}, {"code": "(fn [ & args ] (last (sort args)))", "problem": 38, "user": "5099aea3e4b0efbae1fbc0a0"}, {"code": "#(last (sort %&))", "problem": 38, "user": "5099e663e4b0efbae1fbc0a4"}, {"code": "(fn [& s] \n  (reduce (fn [a b] (if (> a b) a b)) s))", "problem": 38, "user": "509a5ca8e4b0efbae1fbc0ab"}, {"code": "(fn my-max [& seq]\r\n  (reduce #(if (> %1 %2) %1 %2) seq))", "problem": 38, "user": "4fa313bbe4b081705acca188"}, {"code": "(fn my-max [ff & more]\n  (letfn [(calc-max [m x] \n            (cond (empty? x) m\n                  (> (first x) m) (calc-max (first x) \n                                            (rest x))\n                  :else (calc-max m (rest x))))]\n    (calc-max ff more)))", "problem": 38, "user": "50989786e4b04e098a4c7274"}, {"code": "(fn [& l]\n    (reduce (fn [x,y] (if (> x y) x y)) l ))", "problem": 38, "user": "509b152be4b0412cdea6eb1e"}, {"code": "(fn maxe ([x] x) ([x y] (if (> x y) x y)) ([x y & more] (reduce maxe (if (> x y) x y) more)))", "problem": 38, "user": "508fabf9e4b0ea685a20f769"}, {"code": "(fn [& vs] (reduce #(if (> % %2) % %2) vs))", "problem": 38, "user": "509b89b3e4b03049c49bd678"}, {"code": "(fn [& seq] (loop [x (first seq) xs (rest seq)]\n(if (empty? xs) x (let [[y & ys] xs]\n(if (> y x) (recur y ys) (recur x ys))))))", "problem": 38, "user": "508e9ed8e4b0996e1a8a53bf"}, {"code": "#(reduce (fn [x y] (if (> x y) x y)) %&)", "problem": 38, "user": "50982769e4b04e098a4c726a"}, {"code": "(fn [& coll] (last (sort coll)))", "problem": 38, "user": "509dc716e4b08df8156e9e27"}, {"code": "(fn [& args] (reduce #(if (> %2 %) %2 %) 0 args))", "problem": 38, "user": "509e8da7e4b08df8156e9e2f"}, {"code": "(fn [& l] \n  (reduce (fn [a b] \n    (if (> a b) a b))\nl)\n)", "problem": 38, "user": "508eea7de4b0706b2ed3ef8e"}, {"code": "(fn [& args] \r\n  (reduce (fn [a b] (if (> a b) a b)) args)\r\n  )", "problem": 38, "user": "4f030a38535dcb61093f6a47"}, {"code": "(fn [& args]\r\n  (last (sort args)))", "problem": 38, "user": "508453abe4b0c98812d07891"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "5097cf53e4b00ad8bab4e976"}, {"code": "(fn [& more] \n  (reduce (fn [a b] (if (> a b) a b )) 0 more)\n)", "problem": 38, "user": "4ecd1143535d23f036227702"}, {"code": "(fn [& coll]\n  (reduce #(if (< %1 %2) %2 %1) coll))", "problem": 38, "user": "4f2cdd42e4b0d6649770a055"}, {"code": "(fn [& col] (reduce #(if (> %1 %2) %1 %2) col))", "problem": 38, "user": "5098f803e4b0cae2931060a5"}, {"code": "(fn [& args]\n    (last (sort args))\n  )", "problem": 38, "user": "50a173e4e4b08df8156e9e68"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "4f956072e4b0dcca54ed6ccf"}, {"code": "(fn [& l]\n  (let [sorted (sort l)]\n    (last sorted)))", "problem": 38, "user": "5097ddfce4b087ccf61a7af0"}, {"code": "(fn [x & y] \n  (let [args (cons x y)] \n    (reduce #(if (> %1 %2) %1 %2) args)))", "problem": 38, "user": "5038381ce4b0803468ea2c6b"}, {"code": "(fn [& more] (-> more sort reverse first))", "problem": 38, "user": "509fe2bae4b08df8156e9e42"}, {"code": "(fn maxxx\n  ([coll]\n   (reduce\n    (fn\n      [x y]\n      (if (> x y)\n        x\n        y))\n    coll))\n  ([item & args]\n   (maxxx (cons item args))))", "problem": 38, "user": "501b1a8ee4b0b12d9c5f4d81"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "50a2f901e4b029e8bace362a"}, {"code": "(fn [& args] (-> args sort last))", "problem": 38, "user": "509eeb3be4b08df8156e9e37"}, {"code": "(fn [x & z] (reduce #(if (> % %2) % %2) x z))", "problem": 38, "user": "50949602e4b04e5742806c4e"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "509f3bc9e4b08df8156e9e39"}, {"code": "(fn [& rest]\n  (let [lalala (fn [a b] (if (> a b) a b))]\n    (reduce lalala rest)))", "problem": 38, "user": "509c7949e4b085ae113522b0"}, {"code": "#(first (sort > %&))", "problem": 38, "user": "50996a38e4b0cae2931060b3"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "50982cc7e4b04e098a4c726c"}, {"code": "(fn [& rest] (reduce\n  (fn [a b]\n    (if (> a b) a b)\n  ) 0 rest\n))", "problem": 38, "user": "50a3e91de4b0ceace084d49c"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "5080a697e4b01a93d3f38e49"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) 0 x))", "problem": 38, "user": "508c3d42e4b0f17d83ea26b2"}, {"code": "(fn [& args] (reduce #(if (> % %2) % %2) args))", "problem": 38, "user": "509c03f3e4b085ae113522a8"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) 0 args) )", "problem": 38, "user": "50a6c0fbe4b0aa96157e262c"}, {"code": "#(last (sort %&))", "problem": 38, "user": "5092fe10e4b097f48cc3857e"}, {"code": "(fn [& args] (first (sort > args)))", "problem": 38, "user": "50a7b76de4b090657f4a5cdc"}, {"code": "(fn [& coll]\n  (loop [c coll, acc 0]\n    (if (empty? c)\n      acc\n      (let [head (first c), tail (rest c)]\n        (if (> head acc)\n          (recur tail head)\n          (recur tail acc))))))", "problem": 38, "user": "50a83794e4b054305ba5a831"}, {"code": "(fn [& ns]\n  (loop [lst ns\n         mx Integer/MIN_VALUE]\n    (let [v (first lst)]\n      (if v\n        (recur (rest lst) (if (> v mx) v mx))\n        mx))))", "problem": 38, "user": "5027b41ee4b01614d1633fee"}, {"code": "(fn [& rest]\n  \t(loop [ls rest mx Double/NEGATIVE_INFINITY]\n\t\t\t   (if (nil? ls)\n\t\t\t\t     mx\n\t\t\t       (recur (next ls)\n\t\t\t\t            (if (< mx (first ls))\n\t\t\t\t\t          (first ls)\n\t\t\t\t\t          mx)))))", "problem": 38, "user": "50a6b5e8e4b0aa96157e262a"}, {"code": "(fn [& args] \n  (loop [x (seq args) m -10000]\n    (if (= (first x) nil)\n      m\n      (recur (rest x) (if (> (first x) m) (first x) m)))))", "problem": 38, "user": "50a5f72fe4b0aa96157e2611"}, {"code": "(fn fart [& args]\n  (cond\n   (= 1 (count args))\n   (first args)\n   (> (first args) (first (rest args)))\n   (apply fart (conj (rest (rest args)) (first args)))\n   :else\n   (apply fart (rest args))))", "problem": 38, "user": "508dbd56e4b0f17d83ea26c2"}, {"code": "(fn [& args]\n  (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "50a90241e4b0a9a42786e8dc"}, {"code": "(fn [& a] (last (sort a)))", "problem": 38, "user": "4dbe5390535d020aff1edf5c"}, {"code": "(fn test [& args](reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "50a4cbbee4b0344e360f3bc2"}, {"code": "(fn [& nums]\n  (loop [max-num (first nums), remaining (rest nums)]\n    (if (empty? remaining)\n      max-num\n      (let [head (first remaining)\n            remaining (rest remaining)]\n        (recur (if (> head max-num) head max-num) remaining)))))", "problem": 38, "user": "50a01937e4b08df8156e9e47"}, {"code": "(fn [& stuff]\n  (- (apply min (map - stuff))))", "problem": 38, "user": "50a83315e4b054305ba5a830"}, {"code": "(fn mymax[n & more]\n  (if (empty? more) n\n   (if (< n (first more)) (apply mymax more)\n       (apply mymax (cons n (rest more))))))", "problem": 38, "user": "4eca7a87535d6d7199dd3705"}, {"code": "(fn [& xs] (reduce (fn [a b] (if (> a b) a b)) xs))", "problem": 38, "user": "50a9504de4b07e35d68b27ae"}, {"code": "(fn [& col] (reduce #(if (> %1 %2) %1 %2) col))", "problem": 38, "user": "50a482c1e4b0344e360f3bb7"}, {"code": "(fn [& z] (reduce (fn [x y] (if (> x y) x y)) z))", "problem": 38, "user": "50a4f36be4b0344e360f3bc9"}, {"code": "(fn [m & v]\n    (if (next v)\n      (recur \n        (if (> m (first v))\n          m\n          (first v))\n        (next v))\n      m))", "problem": 38, "user": "50ab38a8e4b0f65d68208507"}, {"code": "(fn q [& xs] \n  (#(reduce (fn [a b] (if (> a b) a b)) xs))\n  )", "problem": 38, "user": "50a2cd3be4b048eb8059339d"}, {"code": "(fn [& more] (last (sort more)))", "problem": 38, "user": "509c2c55e4b085ae113522ab"}, {"code": "(fn [& args] \n  (reduce #(if (> %2 %1) %2 %1) \n    (first args)\n    (rest args)))", "problem": 38, "user": "50a93b6de4b0a9a42786e8e0"}, {"code": "(fn [& n] (reduce (fn [m x] (if (> x m) x m)) n))", "problem": 38, "user": "50aab057e4b056ee0193586b"}, {"code": "(fn [& ns]\r\n  (reduce #(if (< % %2) %2 %) 0 ns))", "problem": 38, "user": "50608ea0e4b07251188e4456"}, {"code": "#(last (sort %&))", "problem": 38, "user": "50ab8ae3e4b01d6eb43ce9a0"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "5097cfcbe4b00ad8bab4e977"}, {"code": "#(reduce (fn [a b] (if (< a b) b a)) %&)", "problem": 38, "user": "50ac81b9e4b071b89ef2622f"}, {"code": "(fn max1\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n   (reduce max1 (max1 x y) more)))", "problem": 38, "user": "50ab44b2e4b0f65d68208509"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "50ae5659e4b0a40c9cfb08d2"}, {"code": "#(reduce (fn [x y] (if (> x y) x y)) %&)", "problem": 38, "user": "50ad7888e4b0a40c9cfb08c7"}, {"code": "(fn maximum [& rest] (last(sort (seq rest))))", "problem": 38, "user": "4e9c0552535dbda64a6f6b7b"}, {"code": "#(-> %& sort last)", "problem": 38, "user": "50ae22c3e4b0a40c9cfb08d0"}, {"code": "(fn [& args]\n  (reduce #(if (< % %2) %2 %) args))", "problem": 38, "user": "5078d366e4b08327cd804a5b"}, {"code": "(fn [& nums]\n  (loop [cm (first nums)\n         ns nums]\n    (if (empty? ns)\n      cm\n      (if (> cm (first ns))\n        (recur cm (rest ns))\n        (recur (first ns) (rest ns))))))", "problem": 38, "user": "4f03f3b7535dcb61093f6b85"}, {"code": "(fn mymax [a b & the-rest]\r\n  (loop [themin (if (> a b) a b)\r\n           therest the-rest]\r\n      (if (empty? therest) themin\r\n        (recur \r\n         (if (> (first therest) themin) (first therest) themin)\r\n         (rest therest))))\r\n)", "problem": 38, "user": "50a85af1e4b054305ba5a833"}, {"code": "#(reduce (fn [a b] (if (> a b) a b)) %1 %&)", "problem": 38, "user": "50b1d166e4b03ea880433554"}, {"code": "(fn [& args]\n  (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "50b11fbce4b009df37c708cb"}, {"code": "(fn [& numbers] (reduce (fn [x y] (if (> x y) x y)) numbers))", "problem": 38, "user": "4f69681ee4b07046d9f4ef89"}, {"code": "(fn [& rst] (first (sort > rst)))", "problem": 38, "user": "50ae0d24e4b0a40c9cfb08ce"}, {"code": "(fn [& args] \n  (let [f (fn [x y] (if (> x y) x y))]\n       (reduce f args)))", "problem": 38, "user": "50b06b3ae4b009df37c708b9"}, {"code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) 0 rest))", "problem": 38, "user": "508a2c2fe4b016a2107004a1"}, {"code": "(fn [x & args]\n  (loop [m x L args]\n    (cond (empty? L) m\n      (< m (first L)) (recur (first L) (rest L))\n      :else (recur m (rest L)))))", "problem": 38, "user": "50afa883e4b0c3f5ed5c29a2"}, {"code": "(fn [& xs]\n  (last (sort xs)))", "problem": 38, "user": "50af3393e4b0a40c9cfb08d7"}, {"code": "#(reduce (fn [x y] (if (> x y) x y)) %&)", "problem": 38, "user": "500e4676e4b0e8bab5c55da5"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "507ac76be4b09034bfeeb718"}, {"code": "(fn [& r] (reduce #(if (> %1 %2) %1 %2) r))", "problem": 38, "user": "50956c2be4b087f34d351ab2"}, {"code": "(fn [& args] (reduce #(if (> % %2) % %2) 0 args))", "problem": 38, "user": "4dad86e0c9a9d6ed0f99dc57"}, {"code": "#(last (sort %&))", "problem": 38, "user": "508e13abe4b0f17d83ea26c7"}, {"code": "(fn [& args] (reduce #( if (> %1 %2) %1 %2) args))", "problem": 38, "user": "50aca31fe4b071b89ef26230"}, {"code": "(fn [& xs]\r\n  (reduce #(if (< %1 %2) %2 %1) xs))", "problem": 38, "user": "50b47c46e4b0c464d223d1b8"}, {"code": "(fn my-max [ & numbers ] (\n  \treduce #(if (> %1 %2) %1 %2) numbers\n\t)\n)", "problem": 38, "user": "50b51c06e4b0c464d223d1c1"}, {"code": "(fn [& xs]\n  (reduce (fn [x y] (if (> x y) x y)) xs))", "problem": 38, "user": "4f721e9ee4b07046d9f4f01e"}, {"code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "50b67515e4b08fb537db98f3"}, {"code": "(fn [& all] (last (sort all)))", "problem": 38, "user": "50b4383fe4b001349b2f4abf"}, {"code": "(fn [& rest] (last (sort rest)))", "problem": 38, "user": "4f0386ac535dcb61093f6b13"}, {"code": "(fn [l & lr]\n  (reduce (fn [a b] (if (< a b) b a))\n    (flatten (cons l lr))))", "problem": 38, "user": "50b4b70de4b0c464d223d1bc"}, {"code": "(fn [& b] (last (sort b)))", "problem": 38, "user": "50b65966e4b0a86f8358ca6c"}, {"code": "(fn [& c] (reduce (fn [x y] (if (> y x) y x)) 0 c))", "problem": 38, "user": "50b668dde4b08fb537db98f2"}, {"code": "(fn [& xx] (reduce (fn [x y] (if (> x y) x y)) xx))", "problem": 38, "user": "50b64b55e4b0a86f8358ca6b"}, {"code": "(fn [x & xs] (reduce #(if (> %2 %1) %2 %1) x xs))", "problem": 38, "user": "50b8de6ce4b0cba0e598b652"}, {"code": "(fn [& list] (reduce #(if (> %1 %2) %1 %2) list))", "problem": 38, "user": "50112acee4b0d82cfac69f4c"}, {"code": ";(fn [& more] (last (sort more)))\n#(last (sort %&))", "problem": 38, "user": "50b49fede4b0c464d223d1ba"}, {"code": "(fn f [& more]\r\n  (if (empty? more)\r\n    nil\r\n    (let [fmax\r\n          (fn [x coll]\r\n            (if (empty? coll)\r\n              x\r\n                (let [a (first coll) rl (rest coll)]\r\n                  (if (> x a)\r\n                    x\r\n                    (recur a rl)))))]\r\n      (fmax (first more) (rest more)))))", "problem": 38, "user": "50b8e9a4e4b0cba0e598b656"}, {"code": "(fn [& coll]\n   (reduce #(if (> % %2) % %2) coll))", "problem": 38, "user": "50b0cffae4b009df37c708c5"}, {"code": "(fn [& args]\n  (reduce #(if (> %2 %1) %2 %1) args))", "problem": 38, "user": "50ba3acae4b03e68e4411c78"}, {"code": "(fn [& rest]\n  (reduce (fn [acc a] (if (> acc a) acc a)) rest))", "problem": 38, "user": "50ba4b9ee4b03e68e4411c7b"}, {"code": "(fn max1 [ & keys]\n  (reduce #(if (> %1 %2) %1 %2) keys))", "problem": 38, "user": "4f03e7b3535dcb61093f6b7c"}, {"code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "50acbd15e4b071b89ef26234"}, {"code": "(fn [& args] (reduce (fn[x y] (if (> x y) x y)) args))", "problem": 38, "user": "50babc59e4b03e68e4411c98"}, {"code": "(comp last sort list)", "problem": 38, "user": "50b79c5fe4b0cf3e51c3046c"}, {"code": "(fn [& args]\n  (reduce \n    (fn [x y]\n      (if (> x y)\n        x\n        y))\n    args))", "problem": 38, "user": "50bb9fefe4b0594b91591c36"}, {"code": "(fn [& x] (first (reverse (sort x))))", "problem": 38, "user": "50abb8cde4b01d6eb43ce9ad"}, {"code": "(fn [& nums] (nth (sort (apply vector nums)) (dec (count nums))))", "problem": 38, "user": "50bbdbb8e4b0594b91591c3a"}, {"code": "(fn [& rest]\n  (reduce\n    (fn [a b]\n      (if \n        (> a b)\n        a\n        b\n      )\n    )\n    rest\n  )\n)", "problem": 38, "user": "4f6fe5e4e4b07046d9f4efef"}, {"code": "(fn [& args]\n  (loop [lst (sort args) current 0]\n    (let [element (first lst)]\n    (cond\n      (empty? lst) current\n      (> element current) (recur (rest lst) element)))))", "problem": 38, "user": "4fbd0541e4b081705acca2fc"}, {"code": "(fn [& xs] (reduce #(if (> % %2) % %2) xs))", "problem": 38, "user": "50bc23e4e4b0594b91591c3c"}, {"code": "(fn [& xs]\n  (reduce #(if (>= %1 %2) %1 %2) xs))", "problem": 38, "user": "50bd6033e4b0594b91591c66"}, {"code": "(fn [x & rest] (reduce #(if (> %1 %2) %1 %2) x rest))", "problem": 38, "user": "50b0804de4b009df37c708bb"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) 0 args))", "problem": 38, "user": "4f327844e4b0d6649770a092"}, {"code": "(fn [& s] (first (reverse (sort s))))", "problem": 38, "user": "50ba8664e4b03e68e4411c93"}, {"code": "(fn [& params]\n  (reduce #(if (> %1 %2) %1 %2) params))", "problem": 38, "user": "50bb646de4b03e68e4411ca3"}, {"code": "(fn m[a b & more] (if (nil? more) (if (> a b) a b) (if (> a b) (apply m (conj more a)) (apply m (conj more b)))))", "problem": 38, "user": "5093ca51e4b097f48cc38585"}, {"code": "#(reduce (fn[x y] (if(< x y) y x)) %&)", "problem": 38, "user": "50b25f2ce4b03ea88043355f"}, {"code": "(fn [& a] (-> a sort last))", "problem": 38, "user": "50921f9ae4b09a7d0b586de1"}, {"code": "(comp (fn [x] (reduce #(if (> % %2) % %2) x)) list)", "problem": 38, "user": "50bf3015e4b0a6abc6550e5b"}, {"code": "(fn [x & col]\n  (if (= '() col) x\n    (if (> x (first col))\n      (recur x (rest col))\n      (recur (first col) (rest col)))))", "problem": 38, "user": "50bfe725e4b080409b860f26"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4f89d489e4b033992c121c7e"}, {"code": "(fn mymax\n  ([x y] (if (number? y) (if (> x y) x y) x))\n([x y & args]\n  (if (not (number? (first args))) (mymax x y)\n(mymax (mymax x y) (first args) (rest args)))))", "problem": 38, "user": "50a8cc97e4b0a9a42786e8db"}, {"code": "(fn [x & xs] \n  (reduce #(if (> %1 %2) %1 %2) x xs))", "problem": 38, "user": "509251f3e4b09a7d0b586de5"}, {"code": "( fn [ & seq ](\n  \n  reduce #( if( < %1 %2 ) %2 %1 ) seq  \n  )\n)", "problem": 38, "user": "50bf7b72e4b0ffd967a66cc1"}, {"code": "(\n  fn [& nums] (\n    (fn mx [n m] (\n      if (= (count n) 0) m (\n        mx (rest n) (if (> (first n) m) (first n) m)\n      )\n    )) nums 0\n  )   \n)", "problem": 38, "user": "50b4a37ee4b0c464d223d1bb"}, {"code": "(fn [x & xs] (reduce #(if (> %1 %2) %1 %2) x xs))", "problem": 38, "user": "50b81a93e4b0cba0e598b64b"}, {"code": "(fn [& v] (reduce #(if (> %2 %) %2 %) v))", "problem": 38, "user": "50afc0f9e4b0c3f5ed5c29a3"}, {"code": "(fn [& x]\n  (loop [coll x my-max -999]\n    (if (empty? coll)\n       my-max\n       (recur \n         (rest coll)\n         (if (> (first coll) my-max)\n            (first coll)\n            my-max\n         )\n       )\n    )\n  )\n)", "problem": 38, "user": "50bfbf25e4b05ae8c1cbbd9b"}, {"code": "(fn [& list]\n    (loop [fst (first list)\n           rst (rest list)\n           mx (Integer/MIN_VALUE)\n           ]\n      (if fst\n        (recur (first rst)\n               (rest rst)\n               (if (> fst mx)\n                 fst mx))\n        mx)))", "problem": 38, "user": "50b53b6ae4b0c464d223d1c4"}, {"code": "(fn [& l] (reduce #(if (> %1 %2) %1 %2) l))", "problem": 38, "user": "50c11f5ae4b096f585049c39"}, {"code": "(fn [& l]\n  (loop [l l\n    max-num 0]\n    (if (empty? l)\n    max-num\n    (if (> (first l) max-num)\n      (recur (rest l) (first l))\n      (recur (rest l) max-num)))))", "problem": 38, "user": "50c32086e4b00e537d00253d"}, {"code": "(fn [x & m] (reduce #(if (> %2 %1) %2 %1) x m))", "problem": 38, "user": "50ba5113e4b03e68e4411c7d"}, {"code": "(fn [& args] (last(sort args)))", "problem": 38, "user": "50478418e4b0371827a27bc3"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) \n                      x \n                      y))\n\t\t          args))", "problem": 38, "user": "50c4baa6e4b0210b849018b0"}, {"code": "(fn mx [m & others]\n  (cond \n    (empty? others) m\n    (> m (first others)) (apply mx m (rest others))\n    :else (apply mx (first others) (rest others))))", "problem": 38, "user": "50bfd849e4b042992946c649"}, {"code": "(fn [& nums]\n    (loop [lst nums, curmax 0]\n      (if (empty? lst)\n        curmax\n        (if (> (first lst) curmax)\n           (recur (rest lst) (first lst))\n           (recur (rest lst) curmax)))))", "problem": 38, "user": "4f608e38e4b0defedf855fa8"}, {"code": "(fn [fArg & restArg] (reduce #(if (> %2 %1) %2 %1) fArg restArg))", "problem": 38, "user": "50c6fad1e4b00bb60fe0c52d"}, {"code": "#(last (sort %&))", "problem": 38, "user": "50c75d38e4b00bb60fe0c532"}, {"code": "(fn [& args]\n  (reduce (fn [a b] (if (< a b) b a)) args))", "problem": 38, "user": "4ffc10aae4b0678c553fc3d6"}, {"code": "(fn [first & rest] (reduce (fn [x y] (if (> x y) x y)) first rest))", "problem": 38, "user": "4ec79cac535d6d7199dd36e3"}, {"code": "(fn [& t] (reduce #(if (< % %2) %2 %) t ) )", "problem": 38, "user": "50bf74c7e4b0ffd967a66cc0"}, {"code": "(fn [& sequence] \n (reduce \n   (fn [a b] (if (<  a b) b a))\n    sequence))", "problem": 38, "user": "50b525c5e4b0c464d223d1c3"}, {"code": "(fn mymax [& params]\n  (let [m (first params)\n        bigger (filter #(> % m) params)]\n    (if (= (count bigger) 0)\n      m\n      (apply mymax bigger))))", "problem": 38, "user": "50c84ba2e4b00bb60fe0c53e"}, {"code": "(fn [& args] ( reduce #(if(> %1 %2) %1 %2) args ))", "problem": 38, "user": "50c8697ce4b00bb60fe0c53f"}, {"code": "(fn [x y & z] \n  (loop [coll (filter (fn [i] (not (nil? i))) (flatten [x y z])) ma 0]\n    (if(empty? coll) ma\n    (recur (drop 1 coll) (if (> (first coll) ma) (first coll) ma)))\n  )\n)", "problem": 38, "user": "50503117e4b0a02f9cffdeb5"}, {"code": "(fn mmm \n  ([a b] (if (> a b) a b))\n  ([a b & rest] (reduce mmm (mmm a b) rest)))", "problem": 38, "user": "4ec6dda2535d6d7199dd36da"}, {"code": "(fn [& more] (reduce (fn my-d-m [a b] (if (> a b) a b)) more))", "problem": 38, "user": "50b45ee1e4b08fc3808f30ca"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "50c9e5e3e4b0a409464667d7"}, {"code": "(fn f [& a] (first (sort > a)))", "problem": 38, "user": "50c9ece0e4b0a409464667d8"}, {"code": "(fn [& args]\r\n (let [the-args (sort args)]\r\n   (last the-args)))", "problem": 38, "user": "50493b52e4b06e84b772a23e"}, {"code": "(fn [x & xs]\n(reduce #(if (> %1 %2) %1 %2) x xs))", "problem": 38, "user": "50bcb8b4e4b0594b91591c61"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "50cb4cf6e4b0f78a8e1645b4"}, {"code": "(fn lool ([x] x) ([x y] (if (> x y) x y )) ([x y & v] (reduce lool (lool x y) v)) )", "problem": 38, "user": "50c5546de4b0951b67b28c18"}, {"code": "(fn mx [& rest]\n  (reduce #(if (> %1 %2) %1 %2) rest))", "problem": 38, "user": "50ca2faee4b0a409464667dc"}, {"code": "(fn [& all] (last (sort all)))", "problem": 38, "user": "50b8914ce4b0cba0e598b64d"}, {"code": "(fn\n  ([] nil)\n  ([x] x)\n  ([x & others]\n    (letfn [(foldl [acc predicate l]\n            (if (empty? l)\n            acc\n            (recur\n              (predicate acc (first l))\n              predicate\n              (drop 1 l))))]\n      (foldl x (fn [a,b] (if (> a b) a b)) (seq others)))))", "problem": 38, "user": "50b29029e4b03ea880433563"}, {"code": "(fn -max [& x]\n  (let [fst (first x)\n        rst (rest x)\n        snd (first rst)]\n    (if (> (count rst) 1)\n      (apply -max \n        (conj (rest rst) \n          (if (> fst snd) fst snd)))\n      fst)\n    )\n)", "problem": 38, "user": "5092f940e4b097f48cc3857b"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "50cc7e50e4b0f78a8e1645c1"}, {"code": "(fn [& s] (reduce (fn [a b]    (if (> a b) a b) ) s))", "problem": 38, "user": "50ce09e6e4b0ffc302be4bc6"}, {"code": "(comp last sort list)", "problem": 38, "user": "50cf66ffe4b0e61f11ddcd92"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "problem": 38, "user": "50ca1a4be4b0a409464667db"}, {"code": "(fn [& args]\n  (last (sort args)))", "problem": 38, "user": "50ccf729e4b0f7a459302aac"}, {"code": "(fn [& xs] (last (sort (vec xs))))", "problem": 38, "user": "50c0fac8e4b096f585049c34"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4f072644535dcb61093f6c20"}, {"code": "(fn [& items]\n  (reduce (fn [acc,i] (if (> i acc) i acc)) items))", "problem": 38, "user": "4ffa893fe4b0678c553fc3bc"}, {"code": "(fn [& args]\n  (reduce #(if (> %2 %) %2 %) args))", "problem": 38, "user": "50a7ef7fe4b090657f4a5ce0"}, {"code": "(fn [h & t] (reduce #(if (> %2 %1) %2 %1) h t))", "problem": 38, "user": "50d04a92e4b00b15ecee975a"}, {"code": "(fn [x & xx] ((fn mm [e xs] (println e \", \" xs) (if (empty? xs) e (mm (if (< e (first xs)) (first xs) e) (rest xs)))) x xx))", "problem": 38, "user": "50d242c0e4b06ad58337ed0f"}, {"code": "(fn [& more ] (last (sort more)))", "problem": 38, "user": "4fa7de4ce4b081705acca1c9"}, {"code": "(fn \n  ([& more]\n  (loop [lst more v 0]\n    (if (= '() lst)\n      v\n      (recur (rest lst)\n             (if (> v (first lst)) v (first lst)))))))", "problem": 38, "user": "50d324dde4b049d4ed5650d7"}, {"code": "(fn [& rest] (last (sort rest)))", "problem": 38, "user": "4eb0175b535d7eef30807336"}, {"code": "(fn [& nums] \n      (reduce \n       (fn [a b]\n         (if (> b a) b a)) nums))", "problem": 38, "user": "50b63309e4b0a86f8358ca68"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "50733b31e4b0e3170b5a869a"}, {"code": "(fn [& xs] (reduce (fn [a b] (if (> a b) a b)) xs))", "problem": 38, "user": "50d0b466e4b00b15ecee9764"}, {"code": "(fn top [& args]\n  (\n    (fn maxi [value lst]\n      (if (empty? lst)\n        value\n        (maxi (if (< value (first lst)) (first lst) value) (rest lst))))\n    (first args) (rest args)))", "problem": 38, "user": "50d4dde8e4b09cc622d65a72"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "50b24a2fe4b03ea88043355c"}, {"code": "(fn [head & tail]\n  (letfn [(my-max [m x]\n                  (cond\n                   (empty? x) m\n                   (> m (my-max (first x) (rest x))) m\n                   :else (my-max (first x) (rest x))))]\n    (my-max head tail)))", "problem": 38, "user": "50996376e4b0cae2931060b2"}, {"code": "(fn maximum [& values] (last (sort values)))", "problem": 38, "user": "50cf94bde4b0abc485cb9bb2"}, {"code": "(fn maximum [x & args]\n   ((fn maxInt [curMax, remaining]\n   (cond\n    (empty? remaining)\n    curMax\n    (>=\n     curMax\n     (first remaining))\n    (maxInt\n     curMax\n     (rest remaining))\n    :else\n    (maxInt\n     (first remaining)\n     (rest remaining))))\n    x args))", "problem": 38, "user": "50d2fa5ce4b049d4ed5650cf"}, {"code": "#(reduce (fn [r n] (if (< r n) n r)) %&)", "problem": 38, "user": "50c4a354e4b0210b849018af"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4f93539de4b0dcca54ed6cba"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4f0412f8535dcb61093f6b99"}, {"code": "(fn [& r] (reduce #(if (< % %2) %2 %) r))", "problem": 38, "user": "4dad51418e77d6ed55f12a44"}, {"code": "(fn [& more]\n  (reduce #(if (> % %2) % %2) more))\n\n;; #(last (sort %&))", "problem": 38, "user": "503f4759e4b00d1a725ff2a9"}, {"code": "(fn [x & more] (reduce (fn [y, z] (if (> y z) y z)) (cons x more)))", "problem": 38, "user": "50d4c940e4b09cc622d65a71"}, {"code": "(fn m [& s]\n  (reduce #(if(< %1 %2) %2 %1) s)\n )", "problem": 38, "user": "50d179c7e4b05a71a896ef56"}, {"code": "(fn [& params]\n           (reduce #(if (> %2 %1) %2 %1) (first params) params))", "problem": 38, "user": "4f03f197535dcb61093f6b84"}, {"code": "(fn  [& items]\n  (reduce #(if (> %1 %2)  %1 %2) items)\n  )", "problem": 38, "user": "50bc4e73e4b0594b91591c3d"}, {"code": "(fn [& args] (reduce #(if (< % %2) %2 %) args))", "problem": 38, "user": "50d4c626e4b09cc622d65a70"}, {"code": "(fn [& sx]\n   (reduce #(if (< %1 %2)\n              %2\n              %1)\n           sx))", "problem": 38, "user": "50cae881e4b0f75dcc9a6e51"}, {"code": "(fn [& more]\n  (reduce #(if (> %2 %1) %2 %1) more))", "problem": 38, "user": "50bd13dee4b0594b91591c65"}, {"code": "(fn m\n  [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "50d882d4e4b01f0871336e69"}, {"code": "#(last (sort %&))", "problem": 38, "user": "50d916eae4b0fd36a4b89221"}, {"code": "(fn [& vars] (reduce #(if (> % %2) % %2) 0 vars))", "problem": 38, "user": "50d8f4b6e4b01f0871336e74"}, {"code": "(comp last sorted-set)", "problem": 38, "user": "50d46d53e4b09cc622d65a69"}, {"code": "(fn [& rest] (reduce (fn [a b] (if (> a b) a b)) rest))", "problem": 38, "user": "504eb604e4b069badc5a33c4"}, {"code": "(fn my-max1 [fst & more]\n  ((fn calc-max [m x]\n     (cond (empty? x) m\n           (> (first x) m) (calc-max (first x) (rest x))\n           :else (calc-max m (rest x))))\n    fst more))", "problem": 38, "user": "50da7cf3e4b0844cfa0d8bff"}, {"code": "(fn [a & b] ( reduce #( if (> %1 %2) %1 %2 ) (cons a b)))", "problem": 38, "user": "50cf2267e4b0e61f11ddcd8c"}, {"code": "(fn blah [fst & rst] (loop [l rst mx fst] (if (empty? l)  mx (recur (rest l) (if(> mx (first l)) mx (first l))))))", "problem": 38, "user": "503539dee4b0ed9c821488f6"}, {"code": "(fn [& args] (first (sort > args)))", "problem": 38, "user": "4fc9a977e4b0ee37620e1847"}, {"code": "(fn [& more]\n  (loop [m (first more)\n         r more]\n    (println m)\n    (if (empty? r)\n      m\n      (recur\n        (if (> (first r) m)\n          (first r)\n          m)\n        (rest r)))))", "problem": 38, "user": "50d8de3fe4b01f0871336e72"}, {"code": "(fn [& nums] (reduce #(if (> %1 %2) %1 %2) 0 nums))", "problem": 38, "user": "50d93c53e4b0fd36a4b89223"}, {"code": "(fn [first & rest] \n  (let [the-seq (conj rest first)]\n    (reduce #(if (> %1 %2) %1 %2) the-seq)))", "problem": 38, "user": "4f98b69ae4b0dcca54ed6cf4"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "50dcd61fe4b02e6ac9592c95"}, {"code": "#(reduce (fn [a b] (if (< a b) b a)) %&)", "problem": 38, "user": "5095f761e4b0ba05ca7aebfd"}, {"code": "(fn findmax [base & other] (reduce #(if (> %1 %2) %1 %2) base other))", "problem": 38, "user": "50dc2cd7e4b02e6ac9592c86"}, {"code": "(fn my-max\n  ([x] x)\n  ([x y] (if (>= x y) x y))\n  ([x y & more]\n  (reduce my-max (my-max x y) more)))", "problem": 38, "user": "4f8490fae4b033992c121c34"}, {"code": "(fn f [ & args](last (sort args)))", "problem": 38, "user": "50de11b2e4b061dbdced7217"}, {"code": "(fn findMax [& xs]\n  (reduce #(if (<= %1 %2) %2 %1) xs)\n  )", "problem": 38, "user": "50b32252e4b03ea880433568"}, {"code": "(fn [x & y] (reduce (fn [a b] (if (> a b) a b)) x y))", "problem": 38, "user": "50df6dd0e4b061dbdced7225"}, {"code": "#(last\n  (sort\n   (apply list %&)))", "problem": 38, "user": "4eb3fcba535d7eef30807359"}, {"code": "(fn [& the-list]\n    (first (first (filter #(= (count %) 1)\n    \t   \t   (map (fn [x] \n\t\t      \t (cons x (filter #(> % x) the-list))) the-list)))))", "problem": 38, "user": "4f1c2336535d64f60314647f"}, {"code": "(fn [& args]\n  (reduce (fn [x y]\n            (if (> x y) x y))\n          args))", "problem": 38, "user": "4f942227e4b0dcca54ed6cbe"}, {"code": "(fn [& args](reduce(fn[x y] (if (> x y) x y)) args))", "problem": 38, "user": "4f5cfb94e4b0030a34fb2b31"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "problem": 38, "user": "4ef87ea7535dced4c769f25f"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "50b25edae4b03ea88043355e"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "50723bbae4b0e3170b5a868b"}, {"code": "(fn [& xs] (reduce #(if (> % %2) % %2) xs))", "problem": 38, "user": "4fedd993e4b0198f34b063bc"}, {"code": "(fn [& ll]\n  \n    ((fn [l m]\n               (if (= (count l) 0)\n                 m\n                 (let [f (first l) mm (if (> f m) f m)]\n                   (recur\n                     (rest l)\n                     mm\n                   )\n                  )\n                 )\n                )\n       (rest ll)\n       (first ll)\n     ))", "problem": 38, "user": "5021f0b3e4b00bba4502f7ac"}, {"code": "(comp (fn[x](reduce (fn[a b](if (> a b) a b)) x)) list)", "problem": 38, "user": "50cf729fe4b0e61f11ddcd93"}, {"code": "(fn [& s] (last (sort s)))", "problem": 38, "user": "50e0d5a3e4b061dbdced723d"}, {"code": "(fn [& seq] (reduce #(if (> %1 %2) %1 %2) seq))", "problem": 38, "user": "50e135f4e4b084616e11c667"}, {"code": "(fn [& coll]\n  (loop [mx 0 col coll]\n    (if (empty? col)\n\t  mx\n      (let [i (first col)]\n        (recur (if (> i mx)\n                 i\n                 mx)\n               (rest col)\n        )\n      )\n    )\n  )\n)", "problem": 38, "user": "50e3cf55e4b01912b3285c45"}, {"code": "(fn [& params] (reduce (fn [a b] (if (< a b) b a)) params))", "problem": 38, "user": "50e3ec87e4b0463d32072486"}, {"code": "#(last (sort %&))", "problem": 38, "user": "50e3f311e4b0463d32072487"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "50e496e8e4b0cb9ec68fbca0"}, {"code": "(fn [& nums] (reduce #(cond (> %2 %) %2\n                             :else %)\n                     nums))", "problem": 38, "user": "50dfb660e4b061dbdced7228"}, {"code": "(fn [x & xs] (reduce #(if (> %2 %1) %2 %1) x xs))", "problem": 38, "user": "50e3ddd4e4b01912b3285c47"}, {"code": "(fn [& x] (reduce (fn [col num] (if (< col num) num col)) x))", "problem": 38, "user": "4fc5273ce4b081705acca37f"}, {"code": "(fn [x & xs]\n (reduce\n   (fn [x y]\n     (if (> x y) x y))\n x xs))", "problem": 38, "user": "50e43d90e4b0463d3207248b"}, {"code": "(fn m [& sq] (reduce #(if(< %1 %2)\n            \t\t\t%2\n            \t\t\t%1)\n         \t  sq))", "problem": 38, "user": "50e35b2de4b094329ae7f4bb"}, {"code": "(fn [& xs] (reduce #(if (> % %2) % %2) xs))", "problem": 38, "user": "50e09f60e4b061dbdced7237"}, {"code": "(fn [& arg] (loop [f (first arg) v (next arg)] \n              (if (= v nil)\n              f\n              (if (< f (first v))\n                (recur (first v) (next v))\n                (recur f (next v))\n                )\n              )\n              ))", "problem": 38, "user": "50e008d1e4b061dbdced722a"}, {"code": "(fn [a & b]\n  (reduce #(if (> %2 %) %2 %) a b))", "problem": 38, "user": "50dade7be4b02e6ac9592c70"}, {"code": "(fn [& args]\n  (reduce #(if (< %1 %2) %2 %1) args))", "problem": 38, "user": "50e19748e4b0ec0e353386e5"}, {"code": "(fn [& rest]\n  (reduce\n    (fn compare [a b]\n      (if (> a b) a b))\n    0\n    rest\n  )\n)", "problem": 38, "user": "50e4ff72e4b049a987753897"}, {"code": "(fn [& x] (reduce (fn [a b] (if (< a b) b a)) x))", "problem": 38, "user": "4e2164ff535d04ed9115e815"}, {"code": "(fn [& l] (reduce #(if (> %1 %2) %1 %2) l))", "problem": 38, "user": "50e82c31e4b0ebbe794eb7da"}, {"code": "(fn [& xs] \n  (reduce (fn [acc x]\n            (if (nil? acc) \n              x\n              (if (> x acc)\n                x \n                acc)))\n          nil\n          xs))", "problem": 38, "user": "50e8422de4b0ebbe794eb7de"}, {"code": "(fn [& args] \n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "50d0d4c8e4b00b15ecee976a"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "problem": 38, "user": "50e448bae4b0463d3207248d"}, {"code": "(fn [& params]\n  (loop [m (first params)\n         r (rest params)]\n    (if (empty? r)\n      m\n      (if (> (first r) m)\n        (recur (first r) (rest r))\n        (recur m (rest r))))))", "problem": 38, "user": "50e87427e4b0ebbe794eb7e8"}, {"code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) 0 s))", "problem": 38, "user": "50e88080e4b0ebbe794eb7ea"}, {"code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "problem": 38, "user": "50e7cef1e4b077ad597af36a"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "50e8a340e4b0ebbe794eb7ed"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "50e8ff6be4b0ebbe794eb7f3"}, {"code": "(fn [& args]\n  (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "4e7e8485535db169f9c79716"}, {"code": "(fn [& args] (loop [lst args m (first args)] (if (not (empty? lst)) (recur (rest lst) (if (> (first lst) m) (first lst) m)) m)))", "problem": 38, "user": "50e87252e4b0ebbe794eb7e7"}, {"code": "(fn [& args] (reduce #(if (> % %2) % %2) args))", "problem": 38, "user": "50e7dd5de4b077ad597af36b"}, {"code": "(fn [head & remainder]\n  (loop [maxval head\n         unchecked remainder]\n    (if (= unchecked '())\n      maxval\n      (recur\n        (let [head (first unchecked)]\n          (if (> head maxval)\n            head\n            maxval))\n        (rest unchecked)))))", "problem": 38, "user": "50e98510e4b028853d549f3c"}, {"code": "(fn[& coll]\n  (let [p (first coll)]\n  (loop [item p tmp (rest coll)]\n    (if(empty? tmp)\n      item\n      (if (< item (first tmp))\n        (recur (first tmp) (rest tmp))\n        (recur item (rest tmp)))))))", "problem": 38, "user": "50e6a086e4b0140bc92c0a8c"}, {"code": "(fn n [& s]\n    (reduce #(if(> %1 %2) %1 %2) s))", "problem": 38, "user": "50e5bca5e4b09ae9427b0e75"}, {"code": "(fn [h & t]\n  (reduce #(if (< %1 %2) %2 %1) h t))", "problem": 38, "user": "5099a280e4b0cae2931060bb"}, {"code": "(fn first-args [& args]\n  (first (reverse (sort args))))", "problem": 38, "user": "50ec31bde4b04edc33777044"}, {"code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) more))", "problem": 38, "user": "50ed4626e4b01236b1d4983c"}, {"code": "(fn maximum [& args]\n\t(reduce (fn [x y] (if (> x y) x y)) 0 args))", "problem": 38, "user": "50ed8a5fe4b06330c1f87c3d"}, {"code": "(fn [& x]\n  (reduce \n   \t#(if (> %2 %1) %2 %1)\n    x))", "problem": 38, "user": "50ed5d1be4b06330c1f87c37"}, {"code": "(fn [& z] (reduce (fn [a b] (if (> a b) a b)) z))", "problem": 38, "user": "50d86fe2e4b01f0871336e67"}, {"code": "(fn [& xs] (reduce (fn [acc el] (if (> el acc) el acc)) (first xs) xs))", "problem": 38, "user": "50ee851ee4b06330c1f87c5b"}, {"code": "(fn f\n  [& xs]\n  (if (empty? (rest xs))\n    (first xs)\n    (let [rr (apply f (rest xs))]\n      (if (> (first xs) rr)\n        (first xs)\n        rr))))", "problem": 38, "user": "50ef77a4e4b0bdaecbb47d99"}, {"code": "#(reduce (fn [x y] (if (> x y) x y)) %&)", "problem": 38, "user": "5047782ce4b0371827a27bc2"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "50ef9a7ae4b0bdaecbb47d9e"}, {"code": "(fn [& args] \n  (reduce #(if (> % %2) % %2) (seq args)))", "problem": 38, "user": "50eebf46e4b06330c1f87c61"}, {"code": "(fn [& args] (reduce #(if (> % %2) % %2) args))", "problem": 38, "user": "50ef3e5de4b0a78662fa2652"}, {"code": "(fn [& xs]\n  (reduce #(if (< %1 %2) %2 %1) xs))", "problem": 38, "user": "50ef4e2be4b0a78662fa2653"}, {"code": "(fn [& args]\n  (loop [[f & fs] args\n          m 0]\n    (if (nil? f)\n      m\n      (recur fs (if (> f m) f m)))))", "problem": 38, "user": "50ed3c6be4b01236b1d4983b"}, {"code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "problem": 38, "user": "50e111f7e4b084616e11c663"}, {"code": "(fn [& lst]\n  (reduce #(if (> %1 %2) %1 %2) lst))", "problem": 38, "user": "50f0d000e4b0c5f4fa5ddb6f"}, {"code": "(fn [& args] (loop [coll args m (first coll)] (if (empty? coll) m (recur (rest coll) (if (< m (first coll)) (first coll) m)))))", "problem": 38, "user": "50e8cac5e4b0ebbe794eb7ef"}, {"code": "(comp last sort vector)", "problem": 38, "user": "4ff3df0fe4b0678c553fc355"}, {"code": "(fn [& args] (last (apply conj (sorted-set) args)))", "problem": 38, "user": "50f0ec9ce4b0d527ce5b30df"}, {"code": "(fn [& l](-> l sort last))", "problem": 38, "user": "50e4b066e4b0cb9ec68fbca6"}, {"code": "(fn [ & xs] \n  (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "50eafeaae4b0346a3e988cbb"}, {"code": "(fn [& args]\n  (reduce\n    #(if (> %1 %2) %1 %2)\n    args))", "problem": 38, "user": "50e4a5a9e4b0cb9ec68fbca3"}, {"code": "(fn [& collection]\n  (reduce #(if (> %1 %2) %1 %2) (first collection) (next collection)))", "problem": 38, "user": "50ee145de4b06330c1f87c53"}, {"code": "(fn [& nrs] (last (sort nrs)))", "problem": 38, "user": "50f17c0de4b06d9538fe2123"}, {"code": "#(last (sort %&))", "problem": 38, "user": "50f3ce2ee4b041536e2eca3d"}, {"code": "(fn themax ([x y] (if (> x y) x y)) ([x y & more] (reduce themax (themax x y) more)))", "problem": 38, "user": "50ed9e8de4b06330c1f87c44"}, {"code": "(fn [& xs] (reduce #(if (> %2 %1) %2 %1) 0 xs))", "problem": 38, "user": "50f48298e4b004d364930527"}, {"code": "#(-> %& sort last)", "problem": 38, "user": "50ec8d93e4b04edc3377704c"}, {"code": "(fn [& rest]\n  (let [max* (fn [a b] (if (> a b) a b))]\n    (reduce max* rest)))", "problem": 38, "user": "50ef56dfe4b0bdaecbb47d94"}, {"code": "(fn [& nums] (reduce #(if (> %1 %2) %1 %2) nums))", "problem": 38, "user": "4fbf2818e4b081705acca317"}, {"code": "(fn [x & more] \n  (reduce #(if (> %1 %2) %1 %2) x more))", "problem": 38, "user": "4ed6dbdd535d10e5ff6f52eb"}, {"code": "(fn [& x] (first (sort > x)))", "problem": 38, "user": "4ee21bf1535d10e5ff6f5362"}, {"code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) more))", "problem": 38, "user": "4f592f83e4b0030a34fb2ad2"}, {"code": "(fn [& a] (last (sort a)))", "problem": 38, "user": "50f07b21e4b0bdaecbb47dc2"}, {"code": "(fn [& args]\n   (reduce\n     #(if (> %2 %) %2 %1)\n     args))", "problem": 38, "user": "50f1dedbe4b0897c4366dcd8"}, {"code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "problem": 38, "user": "50f01f44e4b0bdaecbb47daf"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4fd93c42e4b05e33b9224f35"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "50742549e4b054001656accf"}, {"code": "(fn [& s] (reduce #(if (> %2 %) %2 %) s))", "problem": 38, "user": "50d8739ae4b01f0871336e68"}, {"code": "(fn [& seqn] (reduce #(if (> %2 %1) %2 %1) seqn))", "problem": 38, "user": "50eddbc4e4b06330c1f87c4b"}, {"code": "(fn [& xs]\n  (reduce #(if (< % %2) %2 %) xs))", "problem": 38, "user": "50f445fce4b0345259e0f51a"}, {"code": "(fn [& vs] (reduce #(if (> %1 %2) %1 %2) vs))", "problem": 38, "user": "50e47fa5e4b0cb9ec68fbc9c"}, {"code": "(fn [& more]\n  (reduce #(if (< % %2) %2 %) more))", "problem": 38, "user": "4fc8769be4b0ee37620e1833"}, {"code": "(fn [& a] (last (sort a)))", "problem": 38, "user": "50ebd63ce4b04edc3377703c"}, {"code": "(fn [& rest] (reduce #(if (> % %2) % %2) rest))", "problem": 38, "user": "4f69e5ece4b07046d9f4ef8f"}, {"code": "(fn maximum [& xs] (if (empty? (rest xs)) \n\t  (first xs)\n\t  (let [a (first xs) b (apply maximum (rest xs))] \n\t    (if (> a b) a b))))", "problem": 38, "user": "50ef311fe4b0a78662fa2651"}, {"code": "(fn mx ([x] x) ([x & rest] (let [mr (apply mx rest)] (if (> x mr) x mr))))", "problem": 38, "user": "50fb46e6e4b0d10d794c19e5"}, {"code": "(fn mex [& x]\n  (loop [work x\n         m (first work)\n         ]\n    \n    (if (not= work [])\n      (recur (drop 1 work)\n             (if (> m (first work)) \n               m\n               ;else\n               (first work)\n               )\n             )\n      ;else\n      m\n      )\n    )\n  )", "problem": 38, "user": "50fb084ee4b0d10d794c19dd"}, {"code": "#(first (sort > %&))", "problem": 38, "user": "50f9739ce4b0e7c80cb15a4d"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "50fc3bb2e4b0d10d794c19f4"}, {"code": "(fn [& args] (reduce (fn g [x y] (if (> x y) x y)) args))", "problem": 38, "user": "50f8862de4b0aafb827eb203"}, {"code": "(fn [& args] (reduce (fn [a b] (if (< a b) b a)) args))", "problem": 38, "user": "50fbf811e4b0d10d794c19f1"}, {"code": "(comp last sort list)", "problem": 38, "user": "50fc299ee4b0d10d794c19f2"}, {"code": "; & coll makes arguments into a collection. You can do it in the short form by using %& at the body to refer to the list of args\n(fn [& coll] (reduce #(if (> %1 %2) %1 %2) coll))", "problem": 38, "user": "50fac9e3e4b07934dda8b0d1"}, {"code": "(fn [& s] (->> s sort last))", "problem": 38, "user": "50facb80e4b07934dda8b0d2"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "50ec4ed7e4b04edc33777046"}, {"code": "(fn [& x] \n  (reduce (fn [a b] (if (> a b) a b) ) x ) \n  )", "problem": 38, "user": "50f4894be4b004d364930528"}, {"code": "(fn macs\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n   (reduce macs (macs x y) more)))", "problem": 38, "user": "50f3bd98e4b041536e2eca3a"}, {"code": "(fn [& rest] (reduce #(if (> % %2) % %2) (first (list rest))))", "problem": 38, "user": "50ef1429e4b083781cf16b12"}, {"code": "(fn [& args] (first (sort > args)))", "problem": 38, "user": "4f55ab5ee4b0a7574ea71809"}, {"code": "(fn [& args] (reduce \n            #(if (< %1 %2) %2 %1)\n            args\n            ))", "problem": 38, "user": "50f53694e4b057d4c52de881"}, {"code": "(fn [& xs] (reduce #(if (< %1 %2) %2 %1) xs))", "problem": 38, "user": "50fe2b87e4b03cd852b4e84b"}, {"code": "(fn [& sq] (reduce #(if (> %1 %2) %1 %2) sq))", "problem": 38, "user": "50fbdacfe4b0d10d794c19f0"}, {"code": "(fn [x & ys]\n  (if (empty? ys) \n    x\n    (recur (if (< x (first ys))\n             (first ys)\n             x)\n           (rest ys))))", "problem": 38, "user": "50b19a91e4b03ea880433552"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "50f2e5cee4b0ec8ee6fa8643"}, {"code": "(fn [& i] (reduce #(if (> %1 %2) %1 %2) i))", "problem": 38, "user": "505caadfe4b0bcb5664c3d3e"}, {"code": "(fn [& xs] (reduce #(if (> %2 %) %2 %) xs))", "problem": 38, "user": "50f0a554e4b0c5f4fa5ddb6c"}, {"code": "(fn [& x]\n  (last (sort x)))", "problem": 38, "user": "50ff5887e4b017584cb41ccd"}, {"code": "(fn [m & onums]\n  (loop [m m onums onums]\n    (if (empty? onums)\n      m\n      (recur (let [h (first onums)]\n               (if (> h m) h m))\n             (rest onums)))))", "problem": 38, "user": "50a635bbe4b0aa96157e2621"}, {"code": "(fn [& coll] (->> coll (sort >) first))", "problem": 38, "user": "50f94727e4b0e7c80cb15a49"}, {"code": "(fn [& nums] (reduce (fn [a b] (if (> a b) a b)) nums))", "problem": 38, "user": "50f84d85e4b0aafb827eb1f7"}, {"code": "(fn \n  [& args] \n  (reduce (fn \n            [a b] \n            (if (> a b)\n              a\n              b))\n          args))", "problem": 38, "user": "51008b6fe4b0700a7a02d6e4"}, {"code": "(fn [& s]\n  (reduce #(if (> %1 %2) %1 %2)\n          s))", "problem": 38, "user": "50978ca4e4b00ad8bab4e966"}, {"code": "(fn [& more]\n  (last (sort more)))", "problem": 38, "user": "5006b7d2e4b0678c553fc48c"}, {"code": "(fn [& y]\n  (reduce #(if (> % %2) % %2)\n          y))", "problem": 38, "user": "5102489de4b00c483ae176f6"}, {"code": "#(last (sort %&))", "problem": 38, "user": "50bfb5fbe4b05ae8c1cbbd9a"}, {"code": "(fn xmax [& s]\n  (if (= (count s) 1)\n    (first s)\n    (reduce (fn [a b] (if (> a b) a b) ) s)))", "problem": 38, "user": "5101192ae4b0bef64c30e266"}, {"code": "(fn pmx\n  ([a b] (if (> a b) a b))\n  ([a b & more]\n   (pmx a (apply (partial pmx b) more))))", "problem": 38, "user": "51040eb2e4b0432126ba9bb4"}, {"code": "(fn my-max\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n   (reduce my-max (my-max x y) more)))", "problem": 38, "user": "501948b3e4b0b6630b101db5"}, {"code": "(fn [& x] (nth x (rand-int (count x))))", "problem": 38, "user": "51022e25e4b00c483ae176f5"}, {"code": "(fn [& rest] (first (reverse (sort rest))))", "problem": 38, "user": "50f745f6e4b0035e89151849"}, {"code": "(fn [& l] (reduce #(if (> %1 %2) %1 %2) l))", "problem": 38, "user": "51059d33e4b0380e797c7d5c"}, {"code": "(fn m[& z] (last (sort z)))", "problem": 38, "user": "4f23e1cde4b0d66497709fe4"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "5103807fe4b00c483ae17703"}, {"code": "(fn this ([x y] (if (> x y) x y)) ([x y & more] (reduce this (this x y) more)))", "problem": 38, "user": "5106bc8ae4b01150e115ebec"}, {"code": "(fn findmax[& x]\n  (last (sort x)))", "problem": 38, "user": "51026750e4b00c483ae176f7"}, {"code": "(fn [& x] (reduce (fn [a b] (if (> b a) b a)) 0 x))", "problem": 38, "user": "5106c803e4b01150e115ebee"}, {"code": "(fn [& args] (last (sort (first (list args)))))", "problem": 38, "user": "50e54fe4e4b049a9877538a0"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "50bce014e4b0594b91591c63"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "51095588e4b0e34872b3efa5"}, {"code": "(fn highest [& vars] (reduce #(if (> %1 %2) %1 %2) vars))", "problem": 38, "user": "50e4f4e9e4b049a987753896"}, {"code": "(fn domax [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "510931ede4b0c71f76895663"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "50f180cee4b06d9538fe2124"}, {"code": "(fn [& args]\n    (loop [maximum 0 list args]\n        (if (empty? list)\n            maximum\n            (if (> maximum (first list))\n                (recur maximum (rest list))\n                (recur (first list) (rest list))))))", "problem": 38, "user": "4f845cd1e4b033992c121c31"}, {"code": "(fn get-max [& params]\n  (reduce\n    #(if (< %2 %1) %1 %2) params))", "problem": 38, "user": "510a3cd4e4b06956752d35ad"}, {"code": "(fn [a & bs] (last (sort (conj bs a))))", "problem": 38, "user": "50a00725e4b08df8156e9e46"}, {"code": "(fn maxx [& elems] \n  (reduce \n    #(if (> %1 %2) %1 %2)\n    elems\n    )\n  )", "problem": 38, "user": "510b704ee4b078ea71921100"}, {"code": "(fn [& y] (reduce #(if (> %1 %2) %1 %2) y))", "problem": 38, "user": "504e96f0e4b069badc5a33ba"}, {"code": "(fn [& x]\n(reduce #(if (> % %2) % %2) x))", "problem": 38, "user": "510cda21e4b078ea71921126"}, {"code": "(fn [& args] \n  (reduce (fn [acc new] (if (> acc new) acc new ))\n          0 args) )", "problem": 38, "user": "510ce3cbe4b078ea71921127"}, {"code": "(fn [ & z]\n    (reduce\n      (fn [a b]\n        (if (> a b) a b))  \n     \tz))", "problem": 38, "user": "4e964f4a535dbda64a6f6b42"}, {"code": "(fn [& n](reduce (fn [a b] (if (< a b) b a)) n))", "problem": 38, "user": "5107b86de4b05b2b4eee7495"}, {"code": "(fn [head & others] (reduce #(if (< %1 %2) %2 %1) head others))", "problem": 38, "user": "50fe91c1e4b03cd852b4e84e"}, {"code": "(fn [& args]\n  (reduce #(if (> % %2) % %2) args))", "problem": 38, "user": "510db6cde4b078ea71921145"}, {"code": "#(last (sort %&))", "problem": 38, "user": "510d9d61e4b078ea71921141"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "510d1ff4e4b078ea7192112f"}, {"code": "(fn [& c] (reduce #(if (< %1 %2) %2 %1) c))", "problem": 38, "user": "51085be5e4b00aa5c85a1024"}, {"code": "(fn [& r] (last (sort r)))", "problem": 38, "user": "510c8a00e4b078ea7192111f"}, {"code": "(fn [ & params] (last (sort params)))", "problem": 38, "user": "510d3dc6e4b078ea71921132"}, {"code": "(fn [& args] (if (= 1 (count args))\n               (first args)\n               (loop [big (first args)\n                      remain (next args)]\n                 (cond\n                  (empty? remain) big\n                  (> (first remain) big) (recur (first remain) (next remain))\n                  true (recur big (next remain))))))", "problem": 38, "user": "507a33dee4b08327cd804a68"}, {"code": "(comp last sort list)", "problem": 38, "user": "4f5d5202e4b0030a34fb2b38"}, {"code": "(fn [& lst] (first (sort > lst)))", "problem": 38, "user": "50afdf00e4b0c3f5ed5c29a5"}, {"code": "(fn [& a] (first (sort > a)))", "problem": 38, "user": "510e1584e4b07438aa321458"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "5102ef6be4b00c483ae176fc"}, {"code": "(fn ([& more] (reduce #(if (> % %2) % %2) more)))", "problem": 38, "user": "5102ac9de4b00c483ae176fa"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4e74e119535d7a570dd295bc"}, {"code": "(fn [& args] (reduce #(cond (> % %2) % :else %2) args))", "problem": 38, "user": "511026b1e4b04c71fce993ec"}, {"code": "(fn my-max [x & xs]\n  (cond (empty? xs) x\n        (> (first xs) x) (recur (first xs) (rest xs))\n        :else (recur x (rest xs))))", "problem": 38, "user": "5109f200e4b06956752d35aa"}, {"code": "(comp (partial reduce\n          #(if (>= %1 %2)\n             %1\n             %2))\n       list)", "problem": 38, "user": "51105c7fe4b04c71fce993ef"}, {"code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b) ) args))", "problem": 38, "user": "4fe8fda4e4b0547ebccb2438"}, {"code": "(fn [& z] (reduce (fn [x y] (if (> x y) x y)) z))", "problem": 38, "user": "510e3640e4b07438aa32145a"}, {"code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) more))", "problem": 38, "user": "5110a9b4e4b04c71fce993f3"}, {"code": "(fn [& rst] (reduce (fn [m x] (if (> x m) x m)) 0 rst))", "problem": 38, "user": "50b35486e4b03ea88043356a"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4fc53390e4b081705acca389"}, {"code": "(comp last sort list)", "problem": 38, "user": "511278bbe4b0350614f07a75"}, {"code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "problem": 38, "user": "50fec710e4b0219f3bc8bd97"}, {"code": "#(loop [l (seq %&) m 0] (if (empty? l) m (recur (rest l) (if (> (first l) m) (first l) m))))", "problem": 38, "user": "510b574fe4b078ea719210fe"}, {"code": "(fn [x & xs]\n  (loop [m x\n         ys xs]\n    (if (seq ys)\n      (if (> (first ys) m)        \n        (recur (first ys) (rest ys))\n        (recur m (rest ys)))\n      m)))", "problem": 38, "user": "511442d0e4b0e9c109bb74d5"}, {"code": "(fn [& nums]\n\t  (unchecked-negate (apply min (map unchecked-negate nums))))", "problem": 38, "user": "50d3b03fe4b030b634c368b9"}, {"code": "(fn [& args] \n   (loop [maxx nil\n          args args]\n     (cond (empty? args) maxx\n     \t   (or (nil? maxx) (> (first args) maxx)) (recur (first args) (rest args))           \n           :else (recur maxx (rest args))\n     )\n   )\n)", "problem": 38, "user": "5081566ce4b0946d0443855b"}, {"code": "(fn _max [& items]\n  (if (= 1 (count items))\n    (first items)\n    (if (> (first items) (reduce _max (rest items)))\n      (first items)\n      (reduce _max (rest items)))))", "problem": 38, "user": "510cd1dde4b078ea71921124"}, {"code": "(fn [& numbers]\n  (loop [m (first numbers) elements (rest numbers)]\n    (if (empty? elements)\n      m\n      (if (< m (first elements))\n        (recur (first elements) (rest elements))\n        (recur m (rest elements))\n        )\n      )\n    ) \n   )", "problem": 38, "user": "5106dc1be4b01150e115ebf0"}, {"code": "(fn [& nomz] (last (sort (vec nomz))))", "problem": 38, "user": "50e1bdd8e4b019fc399ce17f"}, {"code": "(fn [& more] \n  (reduce #(if(> %1 %2) %1 %2) more))", "problem": 38, "user": "5114ab7be4b0ce5098ee73b5"}, {"code": "(fn imax [& list] (last (sort list)))", "problem": 38, "user": "51064b76e4b01150e115ebe4"}, {"code": "(fn [& coll] (last (sort (set coll))))", "problem": 38, "user": "5117caa0e4b0e0897831a60d"}, {"code": "(fn [& rest] (reduce #(if (< %1 %2) %2 %1) 0 rest))", "problem": 38, "user": "50feb0e1e4b03cd852b4e851"}, {"code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "50e3e108e4b01912b3285c48"}, {"code": "(fn [x & xs] (reduce (fn [a b] (if (< a b) b a)) x xs))", "problem": 38, "user": "510cba32e4b078ea71921121"}, {"code": "(fn mymax [a & coll] (reduce (fn [x y] (if (> x y) x y)) (cons a coll)))", "problem": 38, "user": "511937eee4b055cfb310d495"}, {"code": "(fn [& args]\n  (loop [mx 0\n         args args]\n    (if (empty? args)\n      mx\n      (if (> (first args) mx)\n        (recur (first args) (rest args))\n        (recur mx (rest args))))))", "problem": 38, "user": "51195e77e4b055cfb310d499"}, {"code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "5115cf87e4b0ce5098ee73c3"}, {"code": "(fn [x y & more]\n  (let [\n        mini-max (fn [x y] (cond (nil? y) x (nil? x) y :else (if (> x y) x y)))\n        nums (flatten (list x y more))\n        ]\n    (reduce mini-max nums)))", "problem": 38, "user": "511060fae4b04c71fce993f1"}, {"code": "(fn [& args]\n  (reduce \n   (fn [x y] (if (> x y) x y))\n   args))", "problem": 38, "user": "51181009e4b0e0897831a60f"}, {"code": "(fn [& m]\n  (reduce #(if (> %1 %2) %1 %2) m))", "problem": 38, "user": "50589113e4b06522596eba7f"}, {"code": "(fn [& a] (reduce #(if (> % %2) % %2) a))", "problem": 38, "user": "4ecc1d85535d23f0362276f8"}, {"code": "(fn [& n]\n  (reduce (fn [a b] (if (> a b) a b)) n))", "problem": 38, "user": "4dada426c9a9d6ed2a99dc57"}, {"code": "(fn [x & y]\n  (reduce #(if (< %1 %2) %2 %1) x y))", "problem": 38, "user": "511aa6f5e4b0c87c59c9670c"}, {"code": "(fn [x & y]\n  (reduce #(if (< %1 %2) %2 %1) x y))", "problem": 38, "user": "5115e857e4b0ce5098ee73c5"}, {"code": "(fn max-a-million [& items_whose_max_we_are_to_find]\n  (\n    (fn [list_whose_max_we_are_to_find current_max_value]\n      (cond\n        (empty? list_whose_max_we_are_to_find)\n          current_max_value\n        (< current_max_value (first list_whose_max_we_are_to_find))\n          (recur (rest list_whose_max_we_are_to_find) (first list_whose_max_we_are_to_find))\n        :else\n          (recur (rest list_whose_max_we_are_to_find) current_max_value)\n      )\n    )\n    (rest items_whose_max_we_are_to_find)\n    (first items_whose_max_we_are_to_find)\n  )\n)", "problem": 38, "user": "502be4fae4b08f5602f232eb"}, {"code": "(fn [& more]\n  (loop [m 0, xs more]\n    (cond \n      (empty? xs) m\n     (> (first xs) m) (recur (first xs) (next xs))\n     :else (recur m (next xs))\n      )))", "problem": 38, "user": "511aa2a4e4b0c87c59c9670a"}, {"code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) coll))", "problem": 38, "user": "51170b49e4b0063b4e3e16d9"}, {"code": "(fn my-max\n  [& vals]\n  (reduce #(if (> %1 %2) %1 %2) (first vals) vals))", "problem": 38, "user": "511720eae4b0063b4e3e16da"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4fed24a5e4b0681fd128dcaf"}, {"code": "(fn f [x y & more] \n  (if (nil? more)\n    (if (> x y) x y)\n  \t(reduce f (f x y) more)))", "problem": 38, "user": "511a98d7e4b0c87c59c96707"}, {"code": "(fn my-max [& args]\n  (let [head (first args)]\n    (if (= (count args) 1) head\n      (let [restmax (apply my-max (rest args))]\n        (if (> head restmax) head restmax)))))", "problem": 38, "user": "5119f3d5e4b06c8af0111818"}, {"code": "(fn [& numbers] (reduce #(if (> %1 %2) %1 %2) 0 numbers))", "problem": 38, "user": "4f2d4d4ce4b0d6649770a058"}, {"code": "(fn [ & x] (last (sort x)))", "problem": 38, "user": "510c01bae4b078ea7192110a"}, {"code": "(fn [& args] (reduce #(if (>= %1 %2) %1 %2) (first args) (rest args)))", "problem": 38, "user": "511c91ace4b00c2a1fa7ff7a"}, {"code": "(fn [& args] (reduce #(if (> % %2) % %2) args))", "problem": 38, "user": "511618b1e4b0d4f670fd2fdf"}, {"code": "(fn [& m] (last (sort m)))", "problem": 38, "user": "511a4eb4e4b09045b2b16945"}, {"code": "(fn [x & xs] (reduce (fn [x1 x2] (if (< x1 x2) x2 x1)) x xs))", "problem": 38, "user": "4f8c813de4b02e764a0a519f"}, {"code": "(fn [x & xs]\n  (reduce #(if (> %1 %2) %1 %2) x xs))", "problem": 38, "user": "510fd798e4b04c71fce993dc"}, {"code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4fc9985ee4b0ee37620e1846"}, {"code": "(fn [& more] (-> more sort last))", "problem": 38, "user": "50feab26e4b03cd852b4e850"}, {"code": "(fn [& seq] (-> seq sort last))", "problem": 38, "user": "511d11d7e4b022853b0e079f"}, {"code": "(fn [& nums] (reduce #(if (> %1 %2) %1 %2) nums))", "problem": 38, "user": "511cca27e4b00c2a1fa7ff7d"}, {"code": "(fn [& args] (last(sort args)))", "problem": 38, "user": "510a6bece4b06956752d35af"}, {"code": "(fn [& args] (last ( sort args)))", "problem": 38, "user": "4e50ad74535dc968683fc4ec"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "509331d9e4b097f48cc38580"}, {"code": "(fn [& args] (first (sort > args)))", "problem": 38, "user": "511623cbe4b0d4f670fd2fe1"}, {"code": "#(first (reverse (sort  %& )))", "problem": 38, "user": "4ff2ff7ce4b0678c553fc342"}, {"code": "(fn [& args] (reduce (fn [seed item] (if (> item seed) item seed)) (first args) (rest args)))", "problem": 38, "user": "50f9c7fde4b0e7c80cb15a52"}, {"code": "(comp last sort list)", "problem": 38, "user": "51174f17e4b0e0897831a609"}, {"code": "(fn [& a] (-> a sort last))", "problem": 38, "user": "505fd903e4b08f2a82ad10b7"}, {"code": "(fn [x & xs]\n  (cond (empty? xs) x\n        (< (first xs) x) (recur x (rest xs))\n      \t:else (recur (first xs) (rest xs))\n        )\n  )", "problem": 38, "user": "5099283ce4b0cae2931060af"}, {"code": "(fn [& s] (nth s (rand-int 2)))", "problem": 38, "user": "5100d7dbe4b04f1d96d946df"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4dc3bb09535d37184452f93d"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "511c44fde4b00c2a1fa7ff77"}, {"code": "(fn m ([a] a)\n      ([a & args] (let [b (apply m args)] (if (> a b) a b))))", "problem": 38, "user": "511f88eee4b085952a83535f"}, {"code": "(fn [& m] (reduce #(if (> % %2) % %2) m))", "problem": 38, "user": "510dc185e4b078ea71921146"}, {"code": "(fn [& more]\n  (reduce (fn [x y ] (if (> x y ) x y)) more)\n  )", "problem": 38, "user": "50550f43e4b0b1b9d1860eb7"}, {"code": "(fn [& n] (reduce (fn [x y] (if (> x y)\n                            x\n                          y)) n))", "problem": 38, "user": "511b810ce4b07ab9ec456182"}, {"code": "(fn [& args]\n  (reduce \n   (fn [acc i]\n     (cond (> i acc) i :else acc)) args))", "problem": 38, "user": "511ac026e4b0c87c59c9670e"}, {"code": "(fn [& x]\n  ((fn thisfn\n     ([s] (thisfn (first s) (next s)))\n     ([v s] (if s\n              (if (< v (first s))\n                    (thisfn (first s) (next s))\n                    (thisfn v (next s)))\n              v)))\n   x))", "problem": 38, "user": "5122cbb4e4b068a9582e656f"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "50c95c4fe4b0bed41a12298f"}, {"code": "(fn [x & more] \n\t(reduce #(if (> %1 %2) %1 %2) (flatten (list x more))))", "problem": 38, "user": "50a3e2eae4b0ceace084d49a"}, {"code": "(fn [& s]\n  (reduce (fn [x y] (if (< x y) y x)) s)\n  )", "problem": 38, "user": "512339fce4b03b44edbed434"}, {"code": "(fn [& a] (reduce #(if(> %1 %2) %1 %2) a))", "problem": 38, "user": "511b900ae4b00c2a1fa7ff6a"}, {"code": "(fn [& rest] (reduce #(if (> % %2) % %2) rest))", "problem": 38, "user": "511ac2ede4b0c87c59c9670f"}, {"code": "(fn [& list] (last (sort list)))", "problem": 38, "user": "512474ede4b02c3f2a072cce"}, {"code": "(fn [& xs] (reduce #(if (< %1 %2) %2 %1) xs))", "problem": 38, "user": "511a0374e4b06c8af011181a"}, {"code": "(fn [& nums]\n  (reduce #(if (> %1 %2) %1 %2) nums))", "problem": 38, "user": "511d6a01e4b022853b0e07a5"}, {"code": "(fn \n  ([x y] (if (> x y) x y))\n  ([x y & more] (reduce #(if (> %1 %2) %1 %2) (if (> x y) x y) more)))", "problem": 38, "user": "5123ac8ee4b061b4c6f0e0b1"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) 0 args))", "problem": 38, "user": "510acd6ee4b078ea719210f4"}, {"code": "#(last (sort %&))", "problem": 38, "user": "5125834ae4b05d10e3e395fa"}, {"code": "(fn [& lst] (reduce (fn [a b] (cond (> a b) a true b)) 0 lst))", "problem": 38, "user": "4e9a1512535dbda64a6f6b6e"}, {"code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) coll))", "problem": 38, "user": "5125745ae4b05d10e3e395f9"}, {"code": "(fn [& col] (reduce (fn [m x] (if (> m x) m x)) 0 col))", "problem": 38, "user": "50c7431ae4b00bb60fe0c531"}, {"code": "(fn [a & others] (reduce #(if (< %1 %2) %2 %1) a others))", "problem": 38, "user": "51197750e4b057cba170bc99"}, {"code": "#(->> %& sort last)", "problem": 38, "user": "5125d963e4b05d10e3e395fe"}, {"code": "(fn [& a](reduce #(if (< %1 %2) %2 %1) 0 a ))", "problem": 38, "user": "5062bc46e4b05ac47bc68d68"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4fbbcf0ce4b081705acca2ee"}, {"code": "(fn f\n  ([x] x)\n  ([x y & z] (apply f (cons (if (> x y) x y) z))))", "problem": 38, "user": "51256b40e4b05d10e3e395f8"}, {"code": "(fn [& l] (-> l sort last))", "problem": 38, "user": "51284226e4b03a34742b4308"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "51281b25e4b03a34742b4304"}, {"code": "(fn [& arg] (last (sort (seq arg))))", "problem": 38, "user": "5105ed16e4b01150e115ebe2"}, {"code": "(fn [& c] (reduce #(if (> %1 %2) %1 %2) c))", "problem": 38, "user": "5127ca90e4b03a34742b42ff"}, {"code": "(fn [& c]\n  (reduce #(if (> %1 %2) %1 %2) c))", "problem": 38, "user": "5127e504e4b03a34742b4302"}, {"code": "(fn [x & xs]\n  (reduce #(if (> %1 %2) %1 %2) x xs))", "problem": 38, "user": "5128da96e4b03a34742b4311"}, {"code": "(fn [& xs]\n  (first (reverse (sort xs))))", "problem": 38, "user": "51168f9fe4b0b3e208dba05c"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "5117c31ee4b0e0897831a60c"}, {"code": "(fn [x & ys] (reduce #(if (> %1 %2) %1 %2) (cons x ys)))", "problem": 38, "user": "510967aae4b07c05fdf6dc0f"}, {"code": "(fn my-max\n  ([a] a)\n  ([a b] (if (< a b) b a))\n  ([a b & r] (reduce my-max (my-max a b) r)))", "problem": 38, "user": "5126dbabe4b083bb8f88cf0e"}, {"code": "(fn \n  [& args] \n  (loop [args args x 0] \n    (if (empty? args) \n      x \n      (if (> x (first args)) \n        (recur (rest args) x) \n        (recur (rest args) (first args))) ) ))", "problem": 38, "user": "51071f2ee4b05b2b4eee748e"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "5121cccee4b05ae5a5823c12"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "problem": 38, "user": "511e3454e4b028ee16def195"}, {"code": "(fn [& s] (reduce #(if (< %1 %2) %2 %1) Double/NEGATIVE_INFINITY s))", "problem": 38, "user": "512b9e59e4b04d059cf1fd17"}, {"code": "(fn [& args]\n  (let [x args]\n    (->> (sort x)\n         (reverse)\n         (first))))", "problem": 38, "user": "512c0f84e4b03a42b6300232"}, {"code": "(fn [& more] (last (sort more)))", "problem": 38, "user": "4fe8d1b5e4b0547ebccb2425"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "512832dfe4b03a34742b4306"}, {"code": "(fn mymax\n  ([a] a)\n  ([a b & others] (apply mymax (cons (if (> a b) a b) others))))", "problem": 38, "user": "4f55f4b1e4b0a7574ea7180d"}, {"code": "#(-> %& sort last)", "problem": 38, "user": "51057b2be4b06d28cacc92e8"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "512d3304e4b040332b905b2d"}, {"code": "(fn [ & args ] (reduce #(if (> % %2) % %2) args))", "problem": 38, "user": "50c011c6e4b080409b860f29"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "512930ade4b03a34742b4314"}, {"code": "(fn [& args]\n  (last (sort args))\n  )", "problem": 38, "user": "512eb1e7e4b0b740abc5982a"}, {"code": "(fn [& args]\n  (reduce (fn [x y] (if (>= x y) x y)) args))", "problem": 38, "user": "511b9017e4b00c2a1fa7ff6b"}, {"code": "(fn max2\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n   (reduce max2 (max2 x y) more)))", "problem": 38, "user": "512eb723e4b0b740abc5982b"}, {"code": "(fn [& rest] (reduce #(if (> % %2) % %2) rest))", "problem": 38, "user": "512f06c5e4b0762be4c7aad7"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "5073e7fde4b054001656accb"}, {"code": "(fn [& xs] (reduce (fn [x y] (if (> x y) x y)) xs))", "problem": 38, "user": "51307b84e4b08c712d3fae39"}, {"code": "#(reduce (fn [n m] (if (> n m) n m)) %&)", "problem": 38, "user": "50ef96a1e4b0bdaecbb47d9d"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "50f9776be4b0e7c80cb15a4e"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4f724d40e4b07046d9f4f024"}, {"code": "(fn max'\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] (reduce max' (max' x y) more)))", "problem": 38, "user": "5131104ae4b09e21d785bdfe"}, {"code": "(fn [ & nums] (reduce (fn [m v] (if (> v m) v m)) nums))", "problem": 38, "user": "50fa01bce4b07934dda8b0ba"}, {"code": "(fn [s & more] (reduce #(if (> %1 %2) %1 %2) (flatten (list s more))))", "problem": 38, "user": "51319a53e4b06942423563c8"}, {"code": "(comp last sort list)", "problem": 38, "user": "510528a0e4b0730a5f55ad85"}, {"code": "(fn f ([x y] (if (> x y) x y)) ([x y & m] (reduce f (f x y) m)))", "problem": 38, "user": "512ddd0ee4b040332b905b39"}, {"code": "(fn [& more] \n  (reduce #(if (> %1 %2) %1 %2) more))", "problem": 38, "user": "512b7a05e4b04d059cf1fd14"}, {"code": "#(last (sort %&))", "problem": 38, "user": "50d3ec8be4b030b634c368bb"}, {"code": "(fn [& coll]\n  (reduce #(if (> %1 %2) %1 %2) coll))", "problem": 38, "user": "5132c6f0e4b021281ec7b6d3"}, {"code": "(fn [a b & colls]\n  (if (> a b) a b))", "problem": 38, "user": "512da425e4b040332b905b34"}, {"code": "(fn [& s] (reduce #(if (< %1 %2) %2 %1) s))", "problem": 38, "user": "51000111e4b00d7ad4cab15e"}, {"code": "(fn [& s] (reduce #(if (< %1 %2) %2 %1) s))", "problem": 38, "user": "5128554ee4b03a34742b430a"}, {"code": "#(-> %& sort last)", "problem": 38, "user": "50ed8fd1e4b06330c1f87c3f"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "5134a803e4b0230e9f713b43"}, {"code": "(fn [& args] (reduce (fn [a b] (if (< a b) b a)) args))", "problem": 38, "user": "4de52c87535d08e6dec9fdf0"}, {"code": "(fn my-max\n  [bigone & others]\n  (if (not others)\n    bigone\n    (if (> (first others) bigone)\n      (apply my-max others)\n      (apply my-max (conj (rest others) bigone)))))", "problem": 38, "user": "504e12ade4b078edc5f593b7"}, {"code": "(fn [& xs]\n\t(loop [maximum  (first xs)\n           tail\t(rest xs)]\n      (cond\n       \t(empty? tail) maximum\n       \t(< maximum (first tail)) (recur (first tail) (rest tail))\n       \t:else (recur maximum (rest tail))\n       )\n      )\n  )", "problem": 38, "user": "512b8728e4b04d059cf1fd16"}, {"code": "(fn [& more] (reduce \n                 (fn [x y] (if (> x y) x y))\n                 more\n                  )\n)", "problem": 38, "user": "50202d1ae4b0cb6ebc0a42f3"}, {"code": "(comp first reverse sort list)", "problem": 38, "user": "504ffa26e4b0a02f9cffdead"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "511b50cfe4b07ab9ec456181"}, {"code": "(fn [& x]\n      (loop [cnt 0 thing (first x)]\n        (if (= cnt (count x))\n          thing\n          (recur (inc cnt) (if (> (nth x cnt) thing) (nth x cnt) thing)))))", "problem": 38, "user": "5133e51ae4b0d7a043de8cf6"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "51364acfe4b04ac1f358dd51"}, {"code": "#(last (sort %&))", "problem": 38, "user": "51367626e4b04ac1f358dd53"}, {"code": "(fn [& more] (reduce #(if (> %1 %2)\n                        %1\n                        %2)\n                     more))", "problem": 38, "user": "51352899e4b082aeb3a3f03b"}, {"code": "(fn [& args] (reduce (fn [m, x] (if (> m x) m x)) args))", "problem": 38, "user": "51365524e4b04ac1f358dd52"}, {"code": "(fn [& args]\n  (let [f (fn [x y] (if (> y x) y x))]\n    (reduce f args)))", "problem": 38, "user": "5133af1de4b0d7a043de8cf2"}, {"code": "(fn [& x] (last (apply sort (list x))))", "problem": 38, "user": "5137fb22e4b0a5db03d727d3"}, {"code": "(fn [& nums] (-> nums sort last))", "problem": 38, "user": "51377c10e4b04059df19f305"}, {"code": "(fn [& num_vector]\n  (loop [[first_item second_item & rest_items] num_vector]\n    (let [larger (if (> first_item second_item) first_item second_item)]\n      (if (= rest_items nil)\n        larger\n        (recur (conj rest_items larger))))))", "problem": 38, "user": "512f4ed7e4b0762be4c7aad9"}, {"code": "#(last (sort %&))", "problem": 38, "user": "5137c3b0e4b0509a8b470482"}, {"code": "(fn [ & x ] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "5123cbbae4b061b4c6f0e0b5"}, {"code": "(fn [& args] (reduce (fn [x y] (if  (> x y) x y)) args))", "problem": 38, "user": "512fba16e4b0a88bb1e00aae"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "5138f744e4b0a5db03d727df"}, {"code": "(fn max-value [& more]\n  (reduce (fn my-max [e1 e2] (cond (< e1 e2) e2 :else e1)) more))", "problem": 38, "user": "51251e1fe4b08c6d99a12b87"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "51385c87e4b0a5db03d727d5"}, {"code": "(fn [val & col] (reduce #(if (> %1 %2) %1 %2) val col))", "problem": 38, "user": "513a4babe4b067e25a345eca"}, {"code": "(fn [& x] (reduce #(if (> %2 %1) %2 %1) x ))", "problem": 38, "user": "5124619ae4b02c3f2a072ccd"}, {"code": "(fn [& args]\n  (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "511f9625e4b085952a835362"}, {"code": "(fn [& args] (first (reverse (sort args))))", "problem": 38, "user": "512e8f5ce4b0b740abc59829"}, {"code": "(fn [& xs] (reduce #(if (> % %2) % %2) xs))", "problem": 38, "user": "50b78ac9e4b0cf3e51c3046a"}, {"code": "(fn [& parms] \n  (\n    (fn mymax [x curmax] \n      (if (= (count x) 0) \n        curmax \n        (if (> (first x) curmax) \n          (mymax (rest x) (first x)) \n          (mymax (rest x) curmax) \n        ) \n      )\n    ) \n    parms \n    (first parms)\n  ) \n)", "problem": 38, "user": "513b77f3e4b00f740c76c403"}, {"code": "#((comp last sort) (vec %&))", "problem": 38, "user": "5139ff96e4b067e25a345ec1"}, {"code": "(fn [& x] (reduce #(if (< % %2) %2 %) x))", "problem": 38, "user": "50e3fe8fe4b0463d32072488"}, {"code": "(fn [& args] (loop [r (rest args) m (first args)] (do (if (= r '()) m (if (> (first r) m) (recur (rest r) (first r)) (recur (rest r) m))))))", "problem": 38, "user": "5138d08be4b0a5db03d727db"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "513bb7a6e4b04402f587b77d"}, {"code": "#((comp last sort) %&)", "problem": 38, "user": "513d121fe4b0e544971636a2"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "4ed39399535d44c135fd68f3"}, {"code": "(fn new-max [& args]\n  (last (sort args)))", "problem": 38, "user": "51177fbce4b0e0897831a60b"}, {"code": "(fn [& args] \n  (reduce (fn [a b] (if (> a b) a b)\n      \n            )\nargs          \n          )  )", "problem": 38, "user": "512e0f36e4b0b740abc59820"}, {"code": "(fn [& args] (loop [result 0 coll (vec args)] (if (= [] coll) result (recur (if (> result (first coll)) result (first coll)) (drop 1 coll)))))", "problem": 38, "user": "513ca934e4b0b86ece9f3228"}, {"code": "(fn [& args]\n\t(loop [x (first args)\n\t\t   more (next args)]\n\t\t(if more\n\t\t\t(let [y (first more)\n\t\t\t\t  maxval (if (> x y) x y)]\n\t\t\t\t(recur maxval (next more))\n\t\t\t\t)\n\t\t\tx)))", "problem": 38, "user": "51205867e4b0e88f5a20c40f"}, {"code": "(fn [& s](reduce (fn [a b] (if (> a b) a b)) s))", "problem": 38, "user": "513de0e6e4b0825f97f7f965"}, {"code": "(fn [& coll] (reduce #(if (< % %2) %2 %) coll))", "problem": 38, "user": "513f0565e4b051389b345b3b"}, {"code": "(fn [& a] (-> a sort last))", "problem": 38, "user": "510b5596e4b078ea719210fd"}, {"code": "(fn [& seq]\n  (reduce #(if (> %1 %2) %1 %2) seq))", "problem": 38, "user": "51392535e4b0a5db03d727e1"}, {"code": "(fn getM [x & xs]\n  (reduce #(if (> %1 %2) %1 %2) x xs))", "problem": 38, "user": "513ffee8e4b00f13ea1bd897"}, {"code": "(fn maxVal [& args] \n  first ((fn maxValWithAcc [c l]\n    print c l\n    (if (empty? l)\n      c\n      \n      (if (> (first l) c)\n      \t(maxValWithAcc (first l) \t(next l) )\n        (maxValWithAcc c \t\t\t(next l) )\n      )\n    \n    )) 0 (\n          flatten args)))", "problem": 38, "user": "513f400ae4b051389b345b3f"}, {"code": "(fn [& prms] (reduce #(if (< %1 %2) %2 %1) prms))", "problem": 38, "user": "511b9e81e4b00c2a1fa7ff6e"}, {"code": "(comp (partial reduce #(if (> %2 %) %2 %) 0) list)", "problem": 38, "user": "513dcc1ce4b0825f97f7f964"}, {"code": "(fn [& args] (first (reverse (apply sorted-set args))))", "problem": 38, "user": "513fbe89e4b00f13ea1bd894"}, {"code": "(fn [& x] (reduce #(if (> % %2) % %2) x))", "problem": 38, "user": "513edd13e4b051389b345b39"}, {"code": "(fn [& nums] (reduce (fn [m n] (if (> n m) n m)) 0 nums))", "problem": 38, "user": "51411e3be4b05ca1a0b379f3"}, {"code": "(fn [& x] (reduce #(if (> % %2) % %2) x))", "problem": 38, "user": "51424cc8e4b0b50abeb46b34"}, {"code": "(fn [& more] (last (sort more)))", "problem": 38, "user": "514282c8e4b0b50abeb46b38"}, {"code": "(fn [& args] (first (reverse (apply sorted-set args))))", "problem": 38, "user": "51424c61e4b0b50abeb46b33"}, {"code": "(fn [& args] (first (reverse (sort args))))", "problem": 38, "user": "51416934e4b03d51af0d04f0"}, {"code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "512117f1e4b0ca414459ae94"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "5142e808e4b0c172af7558c9"}, {"code": "(fn [& x] (reduce #(- (+ % %2) (min % %2)) x))", "problem": 38, "user": "5140b7bae4b076604f1aa55b"}, {"code": "(fn[& args]\n  (reduce\n   (fn[acc, item]\n     (if (> item acc)\n       item\n       acc\n     )\n     )\n   (first args)\n   args\n  \n  )\n   )", "problem": 38, "user": "513f53c6e4b051389b345b40"}, {"code": "(fn [x & more]\n  (let [L (cons x more)]\n    ((fn [L curmax]\n       (if (seq L)\n         (recur (rest L) (if (or (not curmax) (> (first L) curmax))\n                           (first L)\n                           curmax))\n         curmax))\n     L nil)))", "problem": 38, "user": "5142c9c5e4b0c172af7558c7"}, {"code": "(fn [& args] (first (reverse (sort args))))", "problem": 38, "user": "51430fb2e4b0c172af7558ce"}, {"code": "(fn mx [& xs]\n  (reduce (fn [ret this]\n            (if (> this ret)\n              this\n              ret)) 0 (seq xs)))", "problem": 38, "user": "513cb853e4b0b86ece9f322b"}, {"code": "(comp last sort list)", "problem": 38, "user": "5141fafbe4b0b50abeb46b28"}, {"code": "(comp first (partial sort (comp - compare)) list)", "problem": 38, "user": "5142ea50e4b0c172af7558ca"}, {"code": "(fn [& xs] (last (sort xs)))", "problem": 38, "user": "51458deee4b0e8879607340b"}, {"code": "(fn [a & r] (reduce #(if (> % %2) % %2) a r))", "problem": 38, "user": "50fe9d60e4b03cd852b4e84f"}, {"code": "(fn [& x] (reduce (fn [a b] (if (> a b) a b)) (first x) (rest x)) )", "problem": 38, "user": "4f47eab2e4b0d56e7bb92bc6"}, {"code": "(fn [& numbers]\n  (reduce (fn [a b] (if (> a b) a b)) numbers))", "problem": 38, "user": "5140c505e4b049dea086df40"}, {"code": "(fn [& args]\n  (reduce\n   (fn [x y]\n     (if (> x y)\n       x\n       y))\n   args))", "problem": 38, "user": "512a8ef7e4b0ff5c4bc1f99e"}, {"code": "(fn find-biggest[x & arg]\n     (if (> x (last (sort arg)))\n       x\n       (last (sort arg))\n     )\n)", "problem": 38, "user": "50edcc53e4b06330c1f87c49"}, {"code": "(fn [& xs] (reduce (fn [x y] (if (> x y) x y)) xs))", "problem": 38, "user": "4ffa2009e4b0678c553fc3b6"}, {"code": "(fn [& xs]\n  (reduce #(if (> %2 %1) %2 %1) xs))", "problem": 38, "user": "5136f659e4b04059df19f2fd"}, {"code": "(fn [& xs] \n  (reduce \n   (fn [x y]\n     (if (> x y)\n       x\n       y))\n   xs))", "problem": 38, "user": "514677dce4b04ef915e3731a"}, {"code": "(fn [& xs] (reduce #(if (> % %2) % %2) xs))", "problem": 38, "user": "513dca07e4b0825f97f7f962"}, {"code": "(fn [& more] (reduce (fn [l r]\n                       (if (> r l)\n                         r\n                         l)) more))", "problem": 38, "user": "51460e4ce4b04ef915e37314"}, {"code": "(fn [& args]\n  (last (sort args)))", "problem": 38, "user": "5144e89be4b021a5ff8301f9"}, {"code": "(fn [& vals]\n  ((fn findmax [themax seq]\n     (let [newmax (if (empty? (rest seq)) themax (findmax (first seq) (rest seq)))]\n     (if\n       (> themax newmax)\n       themax\n       newmax\n       ))) (first vals) (rest vals))\n  )", "problem": 38, "user": "514852b4e4b0203766d54154"}, {"code": "(fn [& xs] (reduce #(if (> % %2) % %2) (Integer/MIN_VALUE) xs))", "problem": 38, "user": "5145832be4b0e8879607340a"}, {"code": "(fn maxi [& rest] (last (sort rest)))", "problem": 38, "user": "506f2f58e4b09350ab4199fa"}, {"code": "(fn [& x] (reduce (fn [a b] (if (> a b) a b)) x))", "problem": 38, "user": "4fe930e9e4b0547ebccb244d"}, {"code": "(fn [& nums]\n  (loop [xe nums, m (first xe)]\n    (if (seq xe)\n      (if (> (first xe) m)\n        (recur (rest xe), (first xe))\n        (recur (rest xe), m))\n       m)))", "problem": 38, "user": "4dcc2435535d5973398f9290"}, {"code": "(fn [& rest]\n    (let [x (filter\n             (complement empty?)\n             (for [a rest] (filter #(> % a) rest)))\n          f (fn [x y]\n                     (for [a x b y :when (= a b)]\n                       a))\n          ]\n      (first (reduce f x))))", "problem": 38, "user": "50bf6f93e4b0ffd967a66cbf"}, {"code": "(fn [x y & more] \n  (reduce #(if (< %1 %2) %2 %1) (cons x (cons y more))))", "problem": 38, "user": "514721c6e4b0d520409ed392"}, {"code": "(comp last sort list)", "problem": 38, "user": "51473a70e4b0d520409ed394"}, {"code": "#(loop  [coll %&,x 0] (if (empty? coll) x ( recur ( next  coll) ( if (> x (first coll)) x  (first coll) ))))", "problem": 38, "user": "513bafa4e4b04402f587b77c"}, {"code": "(fn [& opt](-> opt sort last))", "problem": 38, "user": "514a7e71e4b00c7db5067429"}, {"code": "(fn [& args] (last (sort (seq args))))", "problem": 38, "user": "513fb358e4b00f13ea1bd893"}, {"code": "(fn [& more]\n  (first (sort > more)))", "problem": 38, "user": "50481d0de4b0ec70b3ef8d99"}, {"code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "50fe2420e4b03cd852b4e84a"}, {"code": "(fn ma [a b & c]\n  (let [m ((fn [x y] (if (> x y) x y)) a b)]\n    (if c\n      (apply ma (cons m c))\n      m)))", "problem": 38, "user": "5110b8bae4b04c71fce993f4"}, {"code": "(fn [& vals]\n  (reduce (fn [a b] (if (> a b) a b ) ) vals) \n)", "problem": 38, "user": "5135a74ae4b04ac1f358dd46"}, {"code": "(fn [& l] (reduce (fn [a,b] (if (> a b) a b)) l))", "problem": 38, "user": "514b66f4e4b0bd81940b86cb"}, {"code": "(fn [& more]\n  (reduce\n    (fn\n      [x y]\n      (if (< x y) y x)\n      )\n    more\n    )\n  )", "problem": 38, "user": "514d7e29e4b019235f6c0587"}, {"code": "(fn [& args]\n  (reduce #(if (> % %2) % %2) args))", "problem": 38, "user": "514d8084e4b019235f6c0588"}, {"code": "(fn [& s] (- (reduce min (map #(- %) s))))", "problem": 38, "user": "514c2d05e4b02b8cbb2a9278"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "problem": 38, "user": "514cfa27e4b019235f6c057d"}, {"code": "(fn f [& r] \n  (if (= (rest r) '()) (first r) \n    (if (< (apply f (rest r)) (first r)) \n        (first r) \n        (apply f (rest r)))\n    )\n  )", "problem": 38, "user": "514457fbe4b0b4fb4ace5f43"}, {"code": "(fn [& xs] (reduce #(if (> %2 %1) %2 %1) xs))", "problem": 38, "user": "514d2c7ee4b019235f6c0582"}, {"code": "(fn [x & xs]\n   (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "514e4ae4e4b019235f6c0594"}, {"code": "(comp (partial reduce #(if (< %1 %2) %2 %1)) list)", "problem": 38, "user": "514d398ee4b019235f6c0583"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "4faa7f87e4b081705acca1f6"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "4e58ef07535d8a8b8723a299"}, {"code": "(fn [x y & more]\n  (letfn [(_max [x y & more]\n          (if (> x y)\n            x\n            y))]\n    (reduce _max (_max x y) more)))", "problem": 38, "user": "51502056e4b098b221effc25"}, {"code": "(fn my-max\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] (reduce my-max (conj more x y))))", "problem": 38, "user": "51508efce4b0c51f0585bbb4"}, {"code": "(comp first reverse sort vector)", "problem": 38, "user": "51508905e4b098b221effc2d"}, {"code": "(fn myMax [& args]\n  (reduce (fn [x y] (if (> x y ) x y)) args))", "problem": 38, "user": "51427a8be4b0b50abeb46b37"}, {"code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) args))", "problem": 38, "user": "50e09313e4b061dbdced7233"}, {"code": "(fn [& args] (reduce (fn [x, y] (if (> x y) x y)) 0 args))", "problem": 38, "user": "5151a6bee4b03e678e393ad3"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "51519e75e4b03e678e393acf"}, {"code": "(fn mx [& l] (reduce (fn [a b] (if (> a b) a b)) l))", "problem": 38, "user": "51448607e4b0d29bc9e5e336"}, {"code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "problem": 38, "user": "5148bcbee4b05514c84b7cc6"}, {"code": "(fn [& x] \n\t(reduce \n\t\t(fn [c x] (if (> x c) x c))\n\t\tx\n\t)\n)", "problem": 38, "user": "5151aa14e4b03e678e393ad4"}, {"code": "(fn [& max-list] (reduce #(if (< %1 %2) %2 %1) max-list))", "problem": 38, "user": "51037468e4b00c483ae17702"}, {"code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "problem": 38, "user": "5151b6e8e4b03e678e393adc"}, {"code": "#(last (sort %&))", "problem": 38, "user": "5150f87ae4b03e678e393ac7"}, {"code": "(fn mymax [h & m]\n  (loop [mx h, mr m]\n    (if (= [] mr)\n      mx\n      (if (> mx (first mr))\n        (recur mx (rest mr))\n        (recur (first mr) (rest mr))))))", "problem": 38, "user": "4ef2eb4d535dced4c769f226"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "5146df5ae4b04ef915e3731d"}, {"code": "(fn m [y & xs](if-let[x(first xs)](apply m(if(> x y)x y)(next xs))y))", "problem": 38, "user": "4f296a80e4b0d6649770a02a"}, {"code": "(fn m \n\t([x y] \n\t\t(if (> x y) \n\t\t\tx \n\t\t\ty\n\t\t)\n\t) \n\t([x y & r] \n\t\t(reduce m (m x y) r)\n\t)\n)", "problem": 38, "user": "5113e492e4b0029845b11c58"}, {"code": "(fn [& x] (reduce #(if (> % %2) % %2) x))", "problem": 38, "user": "514def61e4b019235f6c0591"}, {"code": "#(last (sort %&))", "problem": 38, "user": "514afd1be4b0bd81940b86c6"}, {"code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) coll))", "problem": 38, "user": "51533ecde4b0252ac4b16619"}, {"code": "(fn start [a & start]\n  ((fn rec [coll]\n    (let [a (first coll) b (second coll) more (nthrest coll 2)]\n      (if (= (count more) 0)\n        (if (> a b)\n          a b)\n        (rec (conj more (if (> a b) a b))) )))\n  (conj start a)))", "problem": 38, "user": "5150a7d7e4b03e678e393abb"}, {"code": "(fn [& c] (reduce (fn [m, x] (if (> x m) x m) ) c ) )", "problem": 38, "user": "5153b1bce4b0252ac4b16639"}, {"code": "(fn [& args] (reduce (fn [x y] (if(> x y) x y)) args))", "problem": 38, "user": "51558136e4b06c5f6a1490a8"}, {"code": "(fn [& xs] (reduce #(if (> %2 %1) %2 %1) xs))", "problem": 38, "user": "514f0723e4b019235f6c0599"}, {"code": "(fn max-val [& args]\n  (loop [s args m 0]\n    (if (nil? s)\n      m\n      (recur (next s) (if (> (first s) m) (first s) m)))))", "problem": 38, "user": "5151d574e4b03e678e393ae0"}, {"code": "(fn [& n] (reduce #(if (> %2 %1) %2 %1) (first n) (rest n)))", "problem": 38, "user": "5154c361e4b0179c5115f4e3"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "5151565be4b03e678e393acb"}, {"code": "(fn [& args]\n  (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "5154fa3fe4b0179c5115f4e6"}, {"code": "(fn mx [& args]\n  (if (= (count args) 1)\n    (first args)\n    (let [ourmax (apply mx (rest args))]\n      (if (> (first args) ourmax)\n        (first args)\n        ourmax))))", "problem": 38, "user": "515737f0e4b0b0b4b87062d0"}, {"code": "(fn max-value [& x] \n  (reduce #(if (> % %2) % %2) x))", "problem": 38, "user": "51585807e4b0a069fd272c75"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "5152020de4b03e678e393ae7"}, {"code": "(fn [& args]\n  (reduce \n   #(if (> %1 %2) %1 %2)\n   Double/NEGATIVE_INFINITY\n   args))", "problem": 38, "user": "51547920e4b084ca81ee2e1c"}, {"code": "(fn [& all] (reduce #(if (> %  %2) % %2) all))", "problem": 38, "user": "5156e767e4b04360f2428e6b"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "513e9aa0e4b02b2a3d8235c4"}, {"code": "(fn [x & r] (cond\n             (empty? r) x\n             (< x (first r)) (recur (first r) (rest r))\n             :default (recur x (rest r))))", "problem": 38, "user": "51193314e4b055cfb310d492"}, {"code": "(fn m [& args] \n  (let [y (flatten args)]\n    (if (= 1 (count y)) \n      (first y) \n      (if (> (first y) (m (rest y))) \n        (first y) \n        (m (rest y))))))", "problem": 38, "user": "510c123be4b078ea7192110e"}, {"code": "(fn [& col]\n  \n (loop [m (first col) col (rest col)]\n   \n    (cond (empty? col) m\n          \n          (> (first col) m) (recur (first col) (rest col))\n          \n          :else (recur m (rest col)))))", "problem": 38, "user": "504e71cbe4b0f6ff3350c4b3"}, {"code": "(fn[f & r]\n  (reduce #(if (>= %1 %2) %1 %2) f (conj r f)))", "problem": 38, "user": "515828b8e4b0a069fd272c71"}, {"code": "(fn [& nums] \n  (reduce (fn [a b] (if (> a b) a b) )\n          nums))", "problem": 38, "user": "5138da28e4b0a5db03d727dd"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "515a6151e4b0394f658fe241"}, {"code": "(fn [& z] (reduce (fn [x y] (if (>= x y) x y)) 0 z))", "problem": 38, "user": "50a2e3fbe4b029e8bace3629"}, {"code": "(fn [& s]\n  (loop [ma (first s),\n        s (rest s)]\n    (if (seq s)\n      (if (> ma (first s))\n        (recur ma (rest s))\n        (recur (first s) (rest s)))\n      ma)))", "problem": 38, "user": "4e8ce277535d65386fec212f"}, {"code": "(fn [& args]\n     (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "515c9f14e4b069911535cf16"}, {"code": "(fn [& x] (reduce (fn [a b] (if (> a b) a b)) x))", "problem": 38, "user": "51584459e4b0a069fd272c74"}, {"code": "(fn [& a] (reduce #(if (> % %2) % %2) a))", "problem": 38, "user": "515f0a39e4b02c55805ea23a"}, {"code": "(fn [& rest]\n  (reduce (fn [acc e] (if (> acc e) acc e)) 0 rest))", "problem": 38, "user": "515efd01e4b02c55805ea238"}, {"code": "(fn [& more]\n  (reduce #(if (> %1 %2)\n              %1\n              %2)\n              0 more)\n  )", "problem": 38, "user": "513b43ede4b067e25a345ed3"}, {"code": "(fn [& l] \n  (loop [x (first l) r (rest l)]\n    (cond (empty? r) x\n          (< x (first r)) (recur (first r) (rest r))\n          :else (recur x (rest r)))))", "problem": 38, "user": "513e8141e4b02b2a3d8235c1"}, {"code": "(fn [& n]\n  (reduce\n    (fn [a b] (if (> a b) a b))\n    n))", "problem": 38, "user": "515e38ace4b049add99a0538"}, {"code": "(fn [& args] (reduce \n             (fn [x y] (if (> y x) y x))\n             args))", "problem": 38, "user": "515f8a0de4b0e2be8aa20bce"}, {"code": "(fn mx [& parms]\n  (reduce #(if (> %1 %2) %1 %2) parms))", "problem": 38, "user": "515f2a85e4b0595cf3d1da44"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "515ead6be4b049add99a053e"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) (first xs) (rest xs)))", "problem": 38, "user": "515cf9b5e4b00901442db1d4"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "515f93d7e4b0e2be8aa20bd0"}, {"code": "(fn mymax\n  ([x y]\n     (if (> x y) x y))\n  ([x y & more]\n     (reduce mymax (mymax x y) more)))", "problem": 38, "user": "515bed3be4b0388ca8ca1525"}, {"code": "(fn[x & xs] \n  (reduce #(if (> %1 %2) %1 %2) x xs))", "problem": 38, "user": "5151d173e4b03e678e393adf"}, {"code": "(fn [& r] (reduce (fn [a b] (if (< a b) b a)) 0 r))", "problem": 38, "user": "515ba2c2e4b0a102a3e52639"}, {"code": "(fn [& l] (reduce #(if (> %1 %2) %1 %2) (first l) l))", "problem": 38, "user": "515ffbfbe4b0e2be8aa20bdd"}, {"code": "(fn [& x] (reduce (fn [a b] (if (> a b) a b)) x))", "problem": 38, "user": "515ef58be4b02c55805ea237"}, {"code": "(fn [& l] (first (reverse (sort l))))", "problem": 38, "user": "5134973ce4b0230e9f713b42"}, {"code": "(fn [& nums] (last (sort nums)))", "problem": 38, "user": "51614701e4b009fba0926e31"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "504ee511e4b0e7ad84dbc4a4"}, {"code": "(fn [elem & elems]\n  (letfn [(iter [ans coll]\n            (cond\n             (empty? coll) ans\n             (> (first coll) ans) (recur (first coll) (rest coll))\n             :else (recur ans (rest coll))))]\n    (iter elem elems)))", "problem": 38, "user": "516282c3e4b0e6d3c4734711"}, {"code": "(fn [& d] (reduce #(if (> %1 %2) %1 %2) d))", "problem": 38, "user": "515d6281e4b00901442db1dc"}, {"code": "(fn my-max [& lst]\n  (if (empty? (rest lst))\n    (first lst)\n    (let [v1 (apply my-max (rest lst))\n          v2 (first lst)]\n      (if (> v1 v2) v1 v2))))", "problem": 38, "user": "51607eb0e4b009fba0926e27"}, {"code": "#(last (sort %&))", "problem": 38, "user": "50705886e4b07bd6ad9b9f2a"}, {"code": "(comp last sorted-set)", "problem": 38, "user": "51592b81e4b0394f658fe22c"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4f437751e4b0d7d3c9f3fd20"}, {"code": "(fn [& x] (loop [i (count x)\n                     result 0]\n              (if (> i 0) (recur (dec i) (if (< result (nth x (- i 1))) (nth x (- i 1)) result)) result)))", "problem": 38, "user": "5162757ee4b03cfa3774b3fe"}, {"code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "5164867fe4b003cf19fdde3e"}, {"code": "#(-> %& sort last)", "problem": 38, "user": "5115e112e4b0ce5098ee73c4"}, {"code": "(fn [x & next]\n  (loop [m x\n         c next]\n    (if (empty? c)\n      m\n      (recur (if (> m (first c)) m (first c)) (rest c)))))", "problem": 38, "user": "515e8ce2e4b049add99a053d"}, {"code": "(fn [& x] (first (sort > x)))", "problem": 38, "user": "510ec1bce4b07438aa321461"}, {"code": "(fn [& rest] (first (reverse (sort compare rest))))", "problem": 38, "user": "50cfcad6e4b00b15ecee9752"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "51623490e4b009fba0926e42"}, {"code": "(fn [& more]\r\n  (last (sort more)))", "problem": 38, "user": "5141bc82e4b02fd87f5064c5"}, {"code": "(comp (partial reduce #(if (> % %2) % %2)) vector)", "problem": 38, "user": "5153316ce4b0252ac4b16611"}, {"code": "#(last (sort %&))", "problem": 38, "user": "5161c6a7e4b009fba0926e38"}, {"code": "(fn [& coll] (reduce #(if (< %1 %2) %2 %1) 0 coll))", "problem": 38, "user": "5166e80de4b060c690c1f4c5"}, {"code": "(comp (partial reduce (fn [a b]\n                        (if (> a b) a b)))\n      vector)", "problem": 38, "user": "51670895e4b013fc800656c1"}, {"code": "(fn [& more] (reduce #(if (< %1 %2) %2 %1) more))", "problem": 38, "user": "512318b6e4b03b44edbed433"}, {"code": "(fn [& args]\n  (loop [m (first args)\n         a (next args)]\n    (if (empty? a)\n      m\n      (if (> (first a) m)\n        (recur (first a) (next a))\n        (recur m (next a))))))", "problem": 38, "user": "514a13cee4b0829bd132edb4"}, {"code": "(fn [& rest]\n    (letfn [(max2 [x y] (if (> x y) x y))]\n      (reduce max2 rest)))", "problem": 38, "user": "5165a235e4b079ad97ec44ac"}, {"code": "(fn [& args ] (last (sort args)))", "problem": 38, "user": "4ec4d723535dcc7ae8597d65"}, {"code": "(fn xxx [& col]\n  (loop [c col acc 0]\n    (if (= (last c) nil)\n      acc\n      (recur (rest c) (if (> (first c) acc) (first c) acc)))))", "problem": 38, "user": "5163a7bbe4b055933a9ca02f"}, {"code": "(fn [& l] (reduce #(if (> %1 %2) %1 %2) l))", "problem": 38, "user": "512700c4e4b083bb8f88cf14"}, {"code": "(fn [& n] (reduce #(if (> %1 %2) %1 %2) n))", "problem": 38, "user": "5070e31ee4b0e3170b5a8678"}, {"code": "(fn [& args] (reduce #(if (> % %2)\n                        %\n                        %2)\n                     args))", "problem": 38, "user": "5168d4ebe4b03f62cda68cdf"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4f23196ee4b0d66497709fe1"}, {"code": "(fn [x & rx]\n  (reduce #(if (< % %2) %2 %1) x rx))", "problem": 38, "user": "51696bcde4b03f62cda68ce7"}, {"code": "(fn [& rest] (reduce (fn [acc x] (cond\n                            (> acc x) acc\n                            :else x\n                                )\n                     )\n                     -1\n                   \t rest\n                   )\n  )", "problem": 38, "user": "4fb03cf4e4b081705acca262"}, {"code": "(fn [& x] \n  (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "51631002e4b017b283c712c1"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "516d227fe4b06f078fab252d"}, {"code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "516db4f6e4b046df6fbb76a0"}, {"code": "(fn [& m] (reduce (fn [x y] (if (> x y) x y)) 0 m))", "problem": 38, "user": "5166b491e4b060c690c1f4be"}, {"code": "(fn [& xs] (last (sort xs)))", "problem": 38, "user": "5079fd71e4b08327cd804a66"}, {"code": "#(last (sort %&))", "problem": 38, "user": "516e9d9be4b06aac486e5b2b"}, {"code": "(fn [& lst]\n  (last (sort lst)))", "problem": 38, "user": "516f06dce4b06aac486e5b39"}, {"code": "(comp last sort vector)", "problem": 38, "user": "51652141e4b003cf19fdde48"}, {"code": "(fn [& a] (last (sort < a)))", "problem": 38, "user": "5143952fe4b0b4fb4ace5f38"}, {"code": "(fn [& args] (last(sort args)))", "problem": 38, "user": "516eb196e4b06aac486e5b2e"}, {"code": "(fn [& vals]\n  (loop [mx (first vals)\n         [val & vals] vals]\n    (let [mx' (if (> val mx) val mx)]\n      (if vals\n        (recur mx' vals)\n        mx'))))", "problem": 38, "user": "516ff477e4b034fe8eaf70f3"}, {"code": "(fn \n  [& lst]\n\t(reduce #(if (> %1 %2) %1 %2) lst))", "problem": 38, "user": "51634e09e4b055933a9ca02c"}, {"code": "(fn [& nums] (reduce (fn [a b] (if (> a b) a b)) nums))", "problem": 38, "user": "516dc88ae4b046df6fbb76a1"}, {"code": "(fn [& l]\n    (reduce (fn [mx x] (if (> mx x) mx x))  l ))", "problem": 38, "user": "516e2246e4b092a6408c5bc5"}, {"code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "516ea313e4b06aac486e5b2c"}, {"code": "(fn [x & xs]\n  (cond (empty? xs) x\n        (> (first xs) x) (recur (first xs) (rest xs))\n        :else (recur x (rest xs))))", "problem": 38, "user": "516bf718e4b005fd0cdf85ca"}, {"code": "(fn maxx\n  [& v]\n  (last (sort (apply conj [] v))))", "problem": 38, "user": "516c3472e4b06f078fab251c"}, {"code": "(fn mymax\n  ([x y]\n     (if (> x y) x y))\n  ([x y & more]\n     (reduce mymax (mymax x y) more)))", "problem": 38, "user": "516bc02ce4b005fd0cdf85c5"}, {"code": "(fn big [f & more]\n  (if (every? (partial > f) more)\n  \tf\n  \t(apply big more)))", "problem": 38, "user": "51701a9ce4b034fe8eaf70f5"}, {"code": "(fn [& col]\n  (let [larger\n        (fn [a b]\n          (if (< a b) b a)\n        )]\n    (reduce larger col)\n  )\n)", "problem": 38, "user": "4f7683dae4b0fbe0118ec56f"}, {"code": "(fn [x & l]\n  (reduce #(if (> %1 %2) %1 %2) x l))", "problem": 38, "user": "51721aefe4b0d70c8bbbf24a"}, {"code": "(fn [& xs] (last(sort xs)) )", "problem": 38, "user": "51227a00e4b068a9582e656b"}, {"code": "(fn [& l]\n   (let [reductor (fn\n                    ([x] x)\n                    ([x y]\n                       (if (>= x y) x y)))]\n     (reduce reductor l)))", "problem": 38, "user": "51684318e4b03f62cda68cd6"}, {"code": "(fn maxn\n  [& paras]\n  (reduce (fn [x y] (if (> x y) x y))  (concat paras)))", "problem": 38, "user": "5170643ee4b004f79986ad89"}, {"code": "(fn [x & xs]\n  (reduce #(if (> %2 %1) %2 %1) x xs))", "problem": 38, "user": "5173726be4b098276e74652c"}, {"code": "(fn [& args] (-> args sort reverse first))", "problem": 38, "user": "516933ece4b03f62cda68ce4"}, {"code": "(fn [& s]\n      (loop [f (first s)\n             r (rest s)]\n        (if (every? #(>= f %) r) f\n          (recur (first r) (rest r)))))", "problem": 38, "user": "51740b65e4b0d277d717bc67"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "5140771ae4b076604f1aa555"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "5159849ce4b0394f658fe236"}, {"code": "(fn [& items] (reduce #(if (> %1 %2) %1 %2) items))", "problem": 38, "user": "51754ca1e4b0dea9bbfba574"}, {"code": "( fn [& more] ( last ( sort (seq more) )))", "problem": 38, "user": "515ebde3e4b01e5d11ccd0a8"}, {"code": "(fn [& args] (first (sort > args)))", "problem": 38, "user": "5164d97ee4b003cf19fdde43"}, {"code": "(fn max' [x & xs]\n  (if (empty? xs)\n      x\n      (recur (if (> x (first xs))\n                 x \n                 (first xs)) (rest xs))))", "problem": 38, "user": "51736d4de4b00f4b6b0490d7"}, {"code": "(fn [& vals] (last (sort vals)))", "problem": 38, "user": "5175616ae4b0dea9bbfba576"}, {"code": "(fn [& a]\n  (reduce #(if (> %1 %2) %1 %2) a))", "problem": 38, "user": "4f9ff06ce4b0dcca54ed6d41"}, {"code": "(fn [& coll]\n  (last (sort coll))\n)", "problem": 38, "user": "51750fc5e4b07031762f2ee6"}, {"code": "(fn [x & more] (reduce (fn [a b] (if (> a b) a b)) (list* x  more)))", "problem": 38, "user": "5171f684e4b0d70c8bbbf248"}, {"code": "(fn  [& vals] (last(sort vals)))", "problem": 38, "user": "515ff4b9e4b0e2be8aa20bd9"}, {"code": "(fn [& l] (first (sort > l)))", "problem": 38, "user": "517531c6e4b07031762f2eea"}, {"code": "#((comp first reverse sort) %&)", "problem": 38, "user": "517724b4e4b085adf681d897"}, {"code": "(fn \n  ([x y] (if (> x y) x y))\n  ([x y & more]\n\t(let [l (concat (apply list x y more))]\n\t\t(reduce \n\t\t\t(fn [a b]\n\t\t\t\t(if (> a b) a b)) l))))", "problem": 38, "user": "51757af0e4b085adf681d873"}, {"code": "(fn [&  s] ((fn [s m] (if (empty? s) m (recur (rest s) (if (> (first s) m) (first s) m)) ) ) s 0) )", "problem": 38, "user": "51729002e4b044b2ef48a850"}, {"code": "(fn [& vals]\n  (reduce (fn [a b]\n            (if (> a b) a b))\n          vals))", "problem": 38, "user": "51778122e4b085adf681d89d"}, {"code": "(fn [& nums] (reduce #(if (> % %2) % %2) nums))", "problem": 38, "user": "5170ea06e4b0d70c8bbbf235"}, {"code": "(fn [v & coll] \n  (reduce #(if (> %1 %2) %1 %2) v coll))", "problem": 38, "user": "51780f88e4b03d69594194c9"}, {"code": "(comp first reverse sort list)", "problem": 38, "user": "515cdde7e4b00901442db1d2"}, {"code": "(fn [& args] (last (sort (seq args))))", "problem": 38, "user": "51789599e4b03d69594194d6"}, {"code": "(fn [& l]\n  (reduce \n    (fn [a b]\n      (if (< a b)\n        b\n        a)) \n   l))", "problem": 38, "user": "51515a19e4b03e678e393acc"}, {"code": "(fn max-val\n  ([x] x)\n  ([x y] \n   (if (> x y) \n     x \n     y))\n  ([x y & xs]\n   (reduce max-val (max-val x y) xs)))", "problem": 38, "user": "517a025ce4b01aacecbecbe6"}, {"code": "(fn [& args] \n  (reduce #(if (> % %2) % %2) args))", "problem": 38, "user": "517adc6ce4b0925c997201c4"}, {"code": "(fn [& xs]\n  (reduce\n  (fn [x y]\n    (if (> x y) x y))\n   xs))", "problem": 38, "user": "517a7f20e4b01aacecbecbee"}, {"code": "(fn [& xs] (reduce (fn [x y] (if (> x y) x y)) xs))", "problem": 38, "user": "515fb48fe4b0e2be8aa20bd5"}, {"code": "(fn [& coll] (-> coll sort last))", "problem": 38, "user": "517a995de4b01aacecbecbef"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "517bf28de4b07ef0e56148d5"}, {"code": "(fn [& args]\n  ((fn [lst]\n     (if (empty? (filter #(> % (first lst)) lst))\n       (first lst)\n       (recur (rest lst)))) args))", "problem": 38, "user": "517b9c82e4b0e963dd819c99"}, {"code": "(fn [i & items] \n  (reduce #(if (< %1 %2) %2 %1) i items))", "problem": 38, "user": "51696ee7e4b03f62cda68ce8"}, {"code": "(fn [& args] \n  (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "50b9d991e4b04934c218a4a9"}, {"code": "(fn [m & l] \n  (if (nil? (first l))\n    m\n    (if (< m (first l))\n      (recur (first l) (rest l))\n      (recur m (rest l)))))", "problem": 38, "user": "4f934325e4b0dcca54ed6cb8"}, {"code": "#((fn max- [f r] (if (empty? r) \n                   f\n                   (max- (let [f f s (first r)]\n                           (if (> f s) f s))\n                         (rest r)))) %1 %&)", "problem": 38, "user": "5163b06be4b055933a9ca030"}, {"code": "(fn [& a] (reduce #( if (> % %2) % %2 ) a))", "problem": 38, "user": "50377d53e4b0af0658af77ad"}, {"code": "(fn [& args] (reduce (fn [m, x] (if (> x m) x m)) args))", "problem": 38, "user": "50fc9c08e4b0d10d794c19f9"}, {"code": "(fn [x & ys] (last (sort (cons x ys))))", "problem": 38, "user": "5093a80be4b097f48cc38583"}, {"code": "(fn [& args] (last (sort (seq args))))", "problem": 38, "user": "5130c26fe4b08c712d3fae3a"}, {"code": "(fn [& xs] (last (sort xs)))", "problem": 38, "user": "51780bfce4b0f89a8f53839c"}, {"code": "(comp last sort list)", "problem": 38, "user": "517e5a91e4b0329b27fa9f55"}, {"code": "#(last(sort %&))", "problem": 38, "user": "517e6671e4b0329b27fa9f56"}, {"code": "(fn [& num]\n(reduce (fn [x y] (if (> x y) x y)) num))", "problem": 38, "user": "517945dce4b0684c1c981a43"}, {"code": "(fn [& s](reduce (fn [x y] (if (> x y) x y)) 0 s))", "problem": 38, "user": "4ed286d4535d44c135fd68d7"}, {"code": "(fn\n  [& args]\n  (reduce #(if (> %1 %2) %1 %2) Integer/MIN_VALUE args))", "problem": 38, "user": "516d2a46e4b06f078fab252f"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "517bbbfce4b07ef0e56148cf"}, {"code": "(fn [& coll] (reduce #(if (< %1  %2) %2 %1) coll))", "problem": 38, "user": "516733fce4b079759a74a5e9"}, {"code": "(fn mymax\n  ([x y]\n   \t(if (> x y) x y))\n  ([x y & more]\n   (reduce mymax (mymax x y) more)))", "problem": 38, "user": "4fc51e1fe4b081705acca379"}, {"code": "(fn [& nums]\n  (loop [ret 0 seq1 nums]\n    (if (empty? seq1)\n      ret\n      (let [curr (if (> (first seq1) ret)\n                      (first seq1)\n                      ret)]\n       (recur curr (rest seq1))\n       ))))", "problem": 38, "user": "4faa5735e4b081705acca1ee"}, {"code": "(comp last (fn [& x] (sort x)))", "problem": 38, "user": "51383346e4b0a5db03d727d4"}, {"code": "(fn [& n] (last (sort n)))", "problem": 38, "user": "4f6cf933e4b07046d9f4efc2"}, {"code": "(fn [& args] (reduce (fn [a b] (if (> b a) b a)) args))", "problem": 38, "user": "5160195ae4b0e2be8aa20be3"}, {"code": "(fn [& a] (reduce #(if (> % %2) % %2) a))", "problem": 38, "user": "517ecab1e4b09104ecebe7e8"}, {"code": "(fn [x & xs] (reduce #(if (> %2 %) %2 %) x xs))", "problem": 38, "user": "4e6a3b79535d8ccf87e9feb3"}, {"code": "(fn \n  [& xs]\n  (reduce #(if (> % %2)\n             %\n             %2)\n          xs))", "problem": 38, "user": "51804bcbe4b04f45bde7d901"}, {"code": "(fn maxx [& lst]\n  (reduce #(if (> %1 %2)\n             %1\n             %2) \n          lst))", "problem": 38, "user": "51750cd4e4b07031762f2ee5"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "51836944e4b028ec5fd2f29f"}, {"code": "(fn my-max\n  ([x] x)\n  ([x y] (cond (> x y) x :else y))\n  ([x y & more] (reduce my-max (my-max x y) more)))", "problem": 38, "user": "51834acde4b028ec5fd2f29a"}, {"code": "(fn [& x] (first (reverse (sort x))))", "problem": 38, "user": "51857e64e4b0da5a5be3babe"}, {"code": "(comp last sort list)", "problem": 38, "user": "5183abf6e4b028ec5fd2f2a6"}, {"code": "(fn [& b]\n  (loop [a (rest b) m (first b)]\n   (if (empty? a)\n     m\n     (recur (rest a) (if (> (first a) m) (first a) m)))))", "problem": 38, "user": "5185e17ee4b0da5a5be3bac5"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "511ffbabe4b0e88f5a20c40c"}, {"code": "(fn [& args]\n  (reduce #(if (< %1 %2) %2 %1) args))", "problem": 38, "user": "5186571de4b0da5a5be3bad1"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "4ede0511535d10e5ff6f5330"}, {"code": "#(last (sort %&))", "problem": 38, "user": "518696c1e4b0c40be512d708"}, {"code": "(fn [& m] (reduce #(if (> % %2) % %2) m))", "problem": 38, "user": "517bc969e4b07ef0e56148d0"}, {"code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "problem": 38, "user": "517dc49be4b0fcc7c5d37d38"}, {"code": "(fn my-max [x & xs]\n    (cond\n      (nil? xs) x\n      :else (let [max-rest (apply my-max xs)]\n              (if (>= x max-rest) x max-rest))))", "problem": 38, "user": "5186134ce4b0da5a5be3bac7"}, {"code": "(fn [& more]\n    (loop [s more r 0]\n        (if (empty? s)\n            r\n            (recur (rest s) (if (> r (first s)) r (first s))))))", "problem": 38, "user": "5179fd22e4b01aacecbecbe5"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "5152bc4ee4b001f44f99bfef"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "5177f89ae4b0f89a8f53839a"}, {"code": "(fn [& n] (reduce (fn [a b] (if (> a b) a b)) (into [] n)))", "problem": 38, "user": "5162d424e4b004547eb5eaaa"}, {"code": ";;& allows you to specify that the function can take any number of arguments\n;;So we make a sequence out of the arguments, sort them and take the last\n(fn [& args] (last (sort (seq args))))", "problem": 38, "user": "50955676e4b087f34d351ab1"}, {"code": "(fn [& args]\n  (-> args sort last))", "problem": 38, "user": "515e2000e4b049add99a0534"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "51805d22e4b0e3fc13e244df"}, {"code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "problem": 38, "user": "4f29651ce4b0d6649770a028"}, {"code": "(fn [& s] \n  (reduce (fn [a b] (if (> a b) a b)) s))", "problem": 38, "user": "51899891e4b0288ada3dbdab"}, {"code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) (first args) args))", "problem": 38, "user": "517b4d8ae4b0925c997201cf"}, {"code": "(fn [ & args] (reduce #(if (< %1 %2) %2 %1) args))", "problem": 38, "user": "517e25c6e4b0329b27fa9f51"}, {"code": "(fn [& args] (first (reverse (sort args))))", "problem": 38, "user": "518a59b3e4b02bf06f6bbb4b"}, {"code": "#(loop [col (rest %&) max-value (first %&)]\n         (if (empty? col)\n           max-value\n           (recur (rest col) (if (> max-value (first col))\n                               max-value\n                               (first col)))))", "problem": 38, "user": "518ccf6be4b05e6c8537e386"}, {"code": "(comp last sort list)", "problem": 38, "user": "518b761ae4b0f028e99addee"}, {"code": "(fn [& z] (reduce #(if (> % %2) % %2) -1 z))", "problem": 38, "user": "51897709e4b0288ada3dbdaa"}, {"code": "(fn [& xs] (last (sort xs)))", "problem": 38, "user": "51823a97e4b0f2adb733651e"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "516c0a7de4b005fd0cdf85cb"}, {"code": "(fn [& l] (last (sort l)))", "problem": 38, "user": "518ec633e4b0cd6ff516769e"}, {"code": "(fn my-max [& ls] (reduce (fn my-max-2 [x y] (if (> x y) x y)) ls))", "problem": 38, "user": "518df0f0e4b0c929d50502e1"}, {"code": "(fn mymax\n([] 0)\n([a] a)\n([a b] (if (> a b) a b))\n([a b & more] (apply mymax (mymax a b) more)))", "problem": 38, "user": "51771cb1e4b085adf681d895"}, {"code": "(fn [& nums] (loop[hV 0 myL nums cC 0](if(< cC (count myL))\n                                   (recur\n                                    (if(> (first myL) (second myL))\n                                      (first myL)\n                                      (second myL)\n                                      )\n                                    (rest myL)\n                                    (+ cC 1)\n                                    )\n                                   hV\n                                   )\n               )\n  )", "problem": 38, "user": "5177cacde4b0261ae665b877"}, {"code": "(fn [a & x] (first (sort > (cons a x))))", "problem": 38, "user": "5190cb2be4b0af8891cc8d3c"}, {"code": "(fn [& name] (reduce #(if (> %1 %2) %1 %2) name))", "problem": 38, "user": "5191045ee4b0f8ef0be96bf3"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y)  x y)) args))", "problem": 38, "user": "519136e9e4b0f8ef0be96c01"}, {"code": "(fn ! [x & rest] (if (> x (first (sort > rest))) x (first (sort > rest))))", "problem": 38, "user": "5143824ae4b0b4fb4ace5f36"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) 0 args))", "problem": 38, "user": "5154b16be4b0179c5115f4e2"}, {"code": "(comp last sort list)", "problem": 38, "user": "51933b41e4b0c663c5d86ca2"}, {"code": "(fn this\n      ([] ())\n      ([x] x)\n      ([x y] (if (> x y) x y))\n      ([x y & more]\n          (apply this (this x y) more)))", "problem": 38, "user": "5194f482e4b05be8c43d2385"}, {"code": "(fn max1 \n  [& args]\n  (reduce #(if (neg? (- %1 %2)) %2 %1) args))", "problem": 38, "user": "5194675fe4b0142f60b4aedf"}, {"code": "(fn [& s]\n  (reduce #(if (> %1 %2) %1 %2) s))", "problem": 38, "user": "518a8c4be4b0df82f5685903"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "51944aaae4b0142f60b4aedc"}, {"code": "(fn my-max [& l] \n  (cond\n   (= () (rest l)) (first l)\n   true (let [f (first l)\n               r (apply my-max (rest l))]\n           (if (> f r) f r))))", "problem": 38, "user": "5196568fe4b04c0af7ff3c1c"}, {"code": "(fn [& rest] (first (sort > rest)))", "problem": 38, "user": "514a762ae4b00c7db5067428"}, {"code": "(fn [& args]\n(reduce #(\n  if (> %1 %2)\n    %1\n    %2\n  ) args)\n)", "problem": 38, "user": "519291c1e4b08962174cf74b"}, {"code": "(fn [arg1 & args] \n  (reduce (fn [x y] \n            (if (> y x) y x))\n            arg1 args))", "problem": 38, "user": "5197f674e4b068aa333628f6"}, {"code": "(fn [& x]\n  (first (sort-by #(- %) x)))", "problem": 38, "user": "51980f7ce4b068aa333628f7"}, {"code": "(fn [& lst] (reduce (fn [a b] (if (> a b) a b )) lst))", "problem": 38, "user": "51761580e4b085adf681d880"}, {"code": "(fn [& rest] (reduce (fn [x y] (if (> x y) x y)) rest))", "problem": 38, "user": "517d1018e4b0f5e87c18f25e"}, {"code": "(fn [a & r]\n  (loop [a a\n         r r]\n    (if (empty? r)\n      a\n      (let [b (first r)\n            c (if (> a b) a b)]\n        (recur c (rest r))))))", "problem": 38, "user": "516fa727e4b0ef3e37990e86"}, {"code": "(fn [& args]\n  (reduce\n    #(if\n       (> %1 %2) %1\n       %2\n    ) args))", "problem": 38, "user": "518e6966e4b051adb72789ec"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "51990df9e4b068aa333628fc"}, {"code": "(fn [& args] (reduce #(if (>= % %2) % %2) args))", "problem": 38, "user": "51131da8e4b0350614f07a83"}, {"code": "#(reduce (fn [a b] (if (> a b) a b)) 0 %&)", "problem": 38, "user": "4f409e29e4b0e243712b1fb6"}, {"code": "(fn altmax [& x]\n  (reduce #(if (>= %1 %2) %1 %2) x)\n  )", "problem": 38, "user": "5195b8cce4b04c0af7ff3c08"}, {"code": "(fn [& xs] (first (sort > xs)))", "problem": 38, "user": "4daf29b1edd6309eace4d172"}, {"code": "(fn [& x]\n  (last (sort (seq x))))", "problem": 38, "user": "4db21508535d37964ddf999b"}, {"code": "(fn [& items]\n  (reduce (fn [acc x] (if (> acc x) acc x)) items))", "problem": 38, "user": "519b231ee4b0ac1b7dced6a2"}, {"code": "(fn maxj [& numbers] \n  (loop [coll (seq numbers)\n         result 0]\n    (if (not (empty? coll))\n      (recur (rest coll) (if (>(first coll) result) (first coll) result))\n      result)\n    )\n  )", "problem": 38, "user": "51377188e4b04059df19f303"}, {"code": "#(last (sort %&))", "problem": 38, "user": "519b2570e4b0ac1b7dced6a3"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "519126d5e4b0f8ef0be96bff"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "50989cbbe4b04e098a4c7275"}, {"code": "(fn [x & more] \n  (reduce #(if (> %1 %2) %1 %2) x more))", "problem": 38, "user": "519b9361e4b07adb65ca4548"}, {"code": "(fn [& args] (reduce  ( fn [x y] (if (> x y ) x y))  args))", "problem": 38, "user": "518c5236e4b087e178201de0"}, {"code": "(fn my_max \n  ([x] x)\n  ([x y] (if (> x y)\n            x\n            y))\n  ([x y & more] (my_max (my_max x y) (reduce my_max more))))", "problem": 38, "user": "50992197e4b0cae2931060ae"}, {"code": "(fn [& args] (reduce (fn [a i] (if (> i a) i a)) args))", "problem": 38, "user": "516385cee4b055933a9ca02d"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "5199ca05e4b022efe2b3ba88"}, {"code": "(comp (partial reduce #(if (> % %2) % %2)) list)", "problem": 38, "user": "519ca227e4b0a1d87b003460"}, {"code": "(fn [ & r]\n  (reduce (fn [a b] (if (> a b) a b)) r))", "problem": 38, "user": "504e0517e4b078edc5f5939a"}, {"code": "(fn mx [& lst]\n    (first  (sort > lst)))", "problem": 38, "user": "502f6c56e4b0842eb223d8bb"}, {"code": "(comp peek vec #(sort %&))", "problem": 38, "user": "519e9f06e4b0acf32bc6a433"}, {"code": "(fn [& args] (loop [m 0 l args] \n               (if (= l '()) \n                 m \n                 (recur \n                  (if (> (first l) m) \n                   (first l) \n                    m\n                  ) \n                  (rest l)\n                 )\n               )\n             )\n)", "problem": 38, "user": "5192ce1de4b0024e2d75f7d2"}, {"code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) more))", "problem": 38, "user": "5191e91de4b08962174cf733"}, {"code": "(fn [& col] (reduce #(if(> %2 %) %2 %) col))", "problem": 38, "user": "519b7d76e4b02a926d9a436e"}, {"code": "(fn [& more]\n  (loop [s (seq more)\n         acc 0]\n    (cond\n     (empty? s) acc\n     (> (first s) acc) (recur (rest s) (first s))\n     :else (recur (rest s) acc))))", "problem": 38, "user": "519db0ede4b037b32803f9b9"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "5180dc04e4b06b8caf33fa01"}, {"code": "(fn get-max\n  ([] 0)\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n    (reduce get-max (get-max x y) more)))", "problem": 38, "user": "51a05bede4b0b292b01ee3f4"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "51a1659de4b00957e520db72"}, {"code": "(fn\n  [& args]\n  (first (sort > args)))", "problem": 38, "user": "50c4ff23e4b0210b849018b8"}, {"code": "(fn [& args]\n    (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "51a2a376e4b00957e520db7f"}, {"code": "(fn [arg & args]\n  (loop [m arg s args]\n    (cond (empty? s) m\n          (> m (first s)) (recur m (rest s))\n          :else (recur (first s) (rest s)))))", "problem": 38, "user": "51991a89e4b068aa333628fd"}, {"code": "(fn \n   ([x] x)\n\n  ([x y] (if (> x y) x y))\n\n  ([x y & more]\n   (reduce (fn [x y] (if (> x y) x y)) (if (> x y) x y)  more) ))", "problem": 38, "user": "518644bce4b0da5a5be3baca"}, {"code": "(fn [& list] (reduce (fn [a b] (if (> a b) a b)) list))", "problem": 38, "user": "4e57afc5535d8a8b8723a288"}, {"code": "(fn [& s]\n  (loop [s s\n         r (first s)]\n    (if (empty? s)\n      r\n      (recur (rest s) (if (> (first s) r)\n                        (first s)\n                        r)))))", "problem": 38, "user": "51406cc5e4b076604f1aa554"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "5192dd39e4b0c663c5d86c9e"}, {"code": "(fn [& values]\n  (loop [m Integer/MIN_VALUE v values]\n    (if (empty? v)\n      m\n      (recur (if (< m (first v)) (first v) m) (rest v)))))", "problem": 38, "user": "51672d15e4b079759a74a5e7"}, {"code": "(fn mx [& args]\n  (if (= (count (flatten args)) 1)\n    (first (flatten args))\n    (if (< (first (flatten args)) (nth (flatten args) 1))\n      (mx (rest (flatten args)))\n      (mx (conj (vec (rest (flatten args))) (first (flatten args)))))))", "problem": 38, "user": "51a3ca78e4b0e77c4ca60bfa"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "51a3c9cde4b0e77c4ca60bf9"}, {"code": "(fn [& nums] (reduce (fn [x y] (if (> x y) x y)) nums))", "problem": 38, "user": "519d2a0be4b037b32803f9ae"}, {"code": "(fn [& args]\n  (reduce #(if (> % %2) % %2) args))", "problem": 38, "user": "506ba58be4b0eda3100c090b"}, {"code": "(fn [& more]\n  (if-let [f (first more)]\n    (loop [l (rest more) m f]\n      (if-let [x (first l)]\n        (if (> x m)\n          (recur (rest l) x)\n          (recur (rest l) m))\n        m))\n    nil))", "problem": 38, "user": "4e68ed35535d8ccf87e9fe92"}, {"code": "#(last (sort %&))", "problem": 38, "user": "51a477eee4b0def3c5c58692"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "51a4d53ae4b0def3c5c58699"}, {"code": "#(-> %& sort last)", "problem": 38, "user": "51a10b2ce4b0b292b01ee3fe"}, {"code": "#(->> %& (sort >) first)", "problem": 38, "user": "4e5e391c535d8a8b8723a2d0"}, {"code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "problem": 38, "user": "51960b79e4b04c0af7ff3c13"}, {"code": "(fn ma [& x]\n  ((fn maa [r y]\n     (if (empty? r)\n       y\n       (if (or (= nil y)\n               (> (first r) y))\n         (maa (rest r) (first r))\n         (maa (rest r) y)))) x nil))", "problem": 38, "user": "51a671d4e4b0740bfd1afd21"}, {"code": "(fn [& args]\n  (last (sort args)))", "problem": 38, "user": "4e723bcb535d5021c1a8965c"}, {"code": "(fn [& l] (reduce (fn [a b] (if (> a b) a b) ) l))", "problem": 38, "user": "519e70d5e4b0acf32bc6a42c"}, {"code": "(fn [& n] (reduce #(if (< %1 %2) %2 %1) n))", "problem": 38, "user": "4fe9f0f6e4b0547ebccb247b"}, {"code": "(fn [& args] (reduce #(if (> % %2) % %2) args))", "problem": 38, "user": "51a768e0e4b0da5f497bde84"}, {"code": "#(last (into (sorted-set) %& ))", "problem": 38, "user": "51a865dfe4b08d8ec191b80f"}, {"code": "(fn [& args]\n    (reduce #(if (> %1 %2) %1 %2) (first args) args))", "problem": 38, "user": "5141abf1e4b02fd87f5064c3"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "519964cbe4b0aa09cbc0b849"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "5192ad1ae4b08962174cf750"}, {"code": "(fn [& nums] (last (sort nums)))", "problem": 38, "user": "51a89810e4b08d8ec191b817"}, {"code": "(fn [& args]\n        (loop [m (first args)\n               xs  (next args)]\n              (if (empty? xs)\n                  m\n                  (recur (if (> (first xs) m)\n                             (first xs)\n                             m)\n                         (next xs)))))", "problem": 38, "user": "51a8f0c6e4b08d8ec191b821"}, {"code": "(fn [& coll] (reduce (fn [a b] (if (> a b) a b)) coll))", "problem": 38, "user": "50ecf888e4b01236b1d49835"}, {"code": "(fn my-max\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] (reduce my-max (my-max x y) more)))", "problem": 38, "user": "51a3cc45e4b0e77c4ca60bfb"}, {"code": "(fn [& xs] (reduce (fn [a b] (if (> a b) a b)) xs))", "problem": 38, "user": "51aa56c4e4b04e3dc0c27b27"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4e09392a535d04ed9115e7ae"}, {"code": "(fn [& nums]\n  (let [a (first nums)\n        b (second nums)]\n\t(if (> a b)\n      a\n      b)))", "problem": 38, "user": "51a9dbc9e4b04e3dc0c27b1e"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "5065dd94e4b0313a384e5643"}, {"code": "#(last (sort %&))", "problem": 38, "user": "51a54fb4e4b0def3c5c586a3"}, {"code": "(fn [& coll ]\n  (reduce \n   (fn [a b] \n     (if (> a b) \n       a \n       b\n      ) \n    ) \n   coll) \n )", "problem": 38, "user": "51aab611e4b04e3dc0c27b2d"}, {"code": "(fn [ & rest ] ( reduce #( if ( > %1 %2 ) %1 %2) rest ))", "problem": 38, "user": "51aa4eede4b04e3dc0c27b25"}, {"code": "#(reduce (fn [a b] (if (> a b) a b)) 0 %&)", "problem": 38, "user": "518637c9e4b0da5a5be3bac8"}, {"code": "(fn [& xs] (reduce #(if (< %1 %2) %2 %1) xs))", "problem": 38, "user": "51a88e7fe4b08d8ec191b813"}, {"code": "(fn [& args] (loop [l args p 0] (if (not-empty l) (recur (rest l) (if (> (first l) p) (first l) p)) p)))", "problem": 38, "user": "517d4ba3e4b0f5e87c18f261"}, {"code": "(fn [& more] (last (sort (vec more))))", "problem": 38, "user": "506cad7de4b0a302964c548e"}, {"code": "(fn ([a]    a)\n    ([a b]     (if (> a b) a b))\n    ([a b & c] b))", "problem": 38, "user": "5183f5d7e4b02826a645f393"}, {"code": "(comp last sort list)", "problem": 38, "user": "51ac61c8e4b09397d510976b"}, {"code": "(fn [& nums]\n  (last (sort nums)))", "problem": 38, "user": "517a7056e4b01aacecbecbed"}, {"code": "(fn [& given]\n  (reduce #(if (> %1 %2) %1 %2) given))", "problem": 38, "user": "51a7b4fee4b0da5f497bde8b"}, {"code": "(fn maxval [& xs]\n  (reduce (fn [mx x]\n            (if (> mx x) mx x))\n          (apply min xs)\n          xs))", "problem": 38, "user": "51ac6360e4b09397d510976c"}, {"code": "(fn [& args] (last(sort args)))", "problem": 38, "user": "51ab1718e4b04e3dc0c27b2f"}, {"code": "(fn [& args]\n \n           (loop [items args mx (first args)]\n                  (if-not (seq (next items))\n                         mx\n                         (recur (next items)\n                                (if (> (fnext items) mx)\n                                    (fnext items)\n                                  mx)))))", "problem": 38, "user": "4db6d993535d1e037afb2180"}, {"code": "(fn [ & x ] (reduce #(if (> % %2) % %2) x))", "problem": 38, "user": "51a7f74be4b08d8ec191b802"}, {"code": "(fn [& args](reduce (fn[x y] (if(> x y) x y)) args))", "problem": 38, "user": "51363aa5e4b04ac1f358dd50"}, {"code": "(fn my-max [& args]\n  (last (sort args)))", "problem": 38, "user": "51ad0ab8e4b09397d510977b"}, {"code": "(fn [& args] (reduce (fn [a,b] (if (> a b) a b)) args))", "problem": 38, "user": "51a417dde4b0def3c5c58688"}, {"code": "(fn [& xs]\n  (reduce #(if (< %1 %2) %2 %1) xs))", "problem": 38, "user": "510b0480e4b078ea719210fa"}, {"code": "(fn [& re]\n  (loop [lt re m 0 ]\n    (let [cur (first lt)]\n      (if (empty? lt)\n        m\n        (if (> cur m)\n          (recur (rest lt) cur)\n          (recur (rest lt) m))))))", "problem": 38, "user": "519b7719e4b02a926d9a436c"}, {"code": "(fn [& input-params]\n  (reduce \n    (fn [first-param second-param] (if (> first-param second-param) first-param second-param)) \n   input-params)\n )", "problem": 38, "user": "51aefceee4b09397d5109797"}, {"code": "(fn [& args] (reduce #(if (> % %2) % %2) args))", "problem": 38, "user": "51aa5434e4b04e3dc0c27b26"}, {"code": "(comp last sort list)", "problem": 38, "user": "51ae350fe4b09397d5109790"}, {"code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "problem": 38, "user": "518cdbd6e4b05e6c8537e387"}, {"code": "(fn [& x](reduce #(if (> %2 %1) %2 %1) x))", "problem": 38, "user": "51afa3d9e4b0c53cf2e68a51"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "51b091e9e4b0c53cf2e68a68"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4fd11132e4b04c3a95aa0409"}, {"code": "(fn [m & n]\n\t(loop [m m\n           n n]\n      (cond\n       (empty? n) m\n       (> m (first n)) (recur m (rest n))\n       :else (recur (first n) (rest n)))))", "problem": 38, "user": "51a4416ae4b0def3c5c5868c"}, {"code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "problem": 38, "user": "51b24defe4b02f8f128bb963"}, {"code": "(fn [& l] (reduce #(if (< %1 %2) %2 %1) l))", "problem": 38, "user": "51b0fc95e4b0c53cf2e68a72"}, {"code": "(fn my-max\n  [& args]\n  (reduce\n   (fn [value e]\n     (if (> e value) \n       e \n       value))\n   args))", "problem": 38, "user": "51af4cf6e4b0c53cf2e68a4c"}, {"code": "(fn [x & xs]\n  (if (empty? xs)\n    x\n    (let [y (first xs)]\n        (recur (if (>= x y) x y) (rest xs)))))", "problem": 38, "user": "4f4e78fee4b03ad3f0c10cc8"}, {"code": "(fn [& args] (reduce (fn [r, x] (if (> r x) r x)) 0 args))", "problem": 38, "user": "51b3a2c8e4b0f094dd986fa6"}, {"code": "(fn get-max [& lat] (if (= (rest lat) []) \n                                  (first lat) \n                                  (if (< (first lat) (last lat))\n                                    (apply get-max (rest lat)) \n                                    (apply get-max (rest (reverse lat))))))", "problem": 38, "user": "514cc029e4b019235f6c057c"}, {"code": "(fn [& coll]\n  (reduce #(if (< % %2) %2 %) coll))", "problem": 38, "user": "51b38769e4b026427ecf067f"}, {"code": "#(last (sort %&))", "problem": 38, "user": "51aeb1f4e4b09397d5109794"}, {"code": "(fn [& args]\n  (if-let [as (seq args)]\n    (loop [res (first as) r (next as)]\n      (if r\n        (recur (if (< res (first r)) (first r) res) (next r))\n        res))\n    nil))", "problem": 38, "user": "51b3b22ce4b0f094dd986fa7"}, {"code": "(fn [& l] (reduce #(if (> % %2) % %2) l))", "problem": 38, "user": "50d4593ee4b09cc622d65a68"}, {"code": "(fn maxvalue\n  ([x y]\n  (if (> x y) x y))\n  ([x y & more]\n  (reduce maxvalue (maxvalue x y) more)))", "problem": 38, "user": "51b0359ae4b0c53cf2e68a5f"}, {"code": "#(->> %& sort last)", "problem": 38, "user": "51ab1da1e4b04e3dc0c27b30"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "5190772de4b09156e89b2a0a"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "51b63845e4b02e5820733403"}, {"code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "problem": 38, "user": "51b1ef95e4b02f8f128bb95e"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "problem": 38, "user": "51af872ae4b0c53cf2e68a4e"}, {"code": "#(last (sort (vec %&)))", "problem": 38, "user": "50a5b7e9e4b0aa96157e2610"}, {"code": "(fn [& xs] \n  (#(reduce(fn [a b] (if (> a b) a b)) xs)))", "problem": 38, "user": "518ad8fce4b06da86c1973c1"}, {"code": "(fn biggest? [& li]\n  (first(reverse (sort li)))\n)", "problem": 38, "user": "506ac723e4b05d3b7762c74d"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "4f5c68c6e4b0030a34fb2b23"}, {"code": "(fn [ & number] (last (sort (into () number))))", "problem": 38, "user": "505d70e8e4b0e6aca564be09"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "50462089e4b011c5dfee771b"}, {"code": "(fn [& m]\n  (-> m sort last))", "problem": 38, "user": "51b3f109e4b0f094dd986fa9"}, {"code": "(fn [& args] \n    (reduce \n        (fn [x y] \n            (if (< x y) y x))\n        args))", "problem": 38, "user": "51789dfae4b03d69594194d7"}, {"code": "(fn [& args] (reduce (fn[arg1 arg2] (if (> arg1 arg2) arg1 arg2)) args))", "problem": 38, "user": "51b7b521e4b0d906fcd71d3a"}, {"code": "(fn [& a](reduce #(if (< % %2) %2 %1) a))", "problem": 38, "user": "51b793d3e4b0d906fcd71d38"}, {"code": "(fn [x & xs]\n  (reduce #(if (> %1 %2) %1 %2) x xs))", "problem": 38, "user": "51b91b08e4b0e871ca4958f8"}, {"code": "(fn [& c]\n  (reduce #(if (< % %2) %2 %) c))", "problem": 38, "user": "50f69a3ce4b0035e89151844"}, {"code": "(fn [& ele]\n  (last (sort ele)))", "problem": 38, "user": "51b86a0fe4b09e0e347b2e78"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "50573ed8e4b0012181721987"}, {"code": "(fn [& a] (last (sort a)))", "problem": 38, "user": "51b76227e4b0d906fcd71d35"}, {"code": "(fn [& x] (loop [coll x m 0] (if (empty? coll) m (recur (rest coll) (if (< m (first coll)) (first coll)  m )))))", "problem": 38, "user": "4f99bf3ee4b0dcca54ed6d01"}, {"code": "(fn [& s] (first (reverse (sort s))))", "problem": 38, "user": "51bc2f6ae4b0fe3ecfb46452"}, {"code": "(fn [& args] (reduce (fn [f s] (cond (> f s) f (= 1 1) s)) args))", "problem": 38, "user": "514f6679e4b0b449e54b8df5"}, {"code": "(fn [& li] (reduce #(if (> %1 %2) %1 %2) (first li) (rest li)))", "problem": 38, "user": "51bb970be4b0fe3ecfb4644e"}, {"code": "(fn [& xs] (reduce #(if (> %2 %1) %2 %1) xs))", "problem": 38, "user": "51b3d998e4b0f094dd986fa8"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "51b8e0dce4b050a1176cd69f"}, {"code": "(fn [& args] (reduce (fn [l r] (if (> l r) l r)) 0 args))", "problem": 38, "user": "51b6a51ce4b02e5820733410"}, {"code": "(fn max0 [& args]\n  (reduce (fn [x y]\n            (if (> x y) x\n              y)\n            )\n          args))", "problem": 38, "user": "51b73a91e4b0d906fcd71d33"}, {"code": "(fn my-max [& args]\n  (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "51baff1be4b0fe3ecfb46443"}, {"code": "(fn ma\n  [acc & l]\n  (cond \n   (empty? l) acc\n   (> (first l) acc) (apply ma (cons (first l) (rest l)))\n   :else (apply ma (cons acc (rest l)))))", "problem": 38, "user": "518c0f4ee4b0f028e99addf7"}, {"code": "( fn [head & tail] (reduce #(if (> %1 %2) %1 %2) (concat (list head) tail)))", "problem": 38, "user": "51b5a6e0e4b0f094dd986fce"}, {"code": "(comp last sort list)", "problem": 38, "user": "51b90b88e4b050a1176cd6a2"}, {"code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) more))", "problem": 38, "user": "51bf4560e4b013aa0d74b817"}, {"code": "(fn [& args] \n  (reduce (fn [x y]\n            (if (> x y)\n              x\n              y)) args))", "problem": 38, "user": "509ecefde4b08df8156e9e35"}, {"code": "(fn [& r] (last (sort r)))", "problem": 38, "user": "519462b6e4b0142f60b4aede"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "51bd1a0de4b0df1216cefd93"}, {"code": "(fn [& vals] ( last (sort vals)))", "problem": 38, "user": "5174ade2e4b07031762f2edf"}, {"code": "(fn [f1 & r1]\n      (reduce #(if (< % %2) %2 %) f1 r1)\n    )", "problem": 38, "user": "51bec919e4b013aa0d74b800"}, {"code": "(fn [a & more](reduce (fn [x y] (if (> x y) x y)) a more))", "problem": 38, "user": "51beb32ae4b013aa0d74b7fd"}, {"code": "(fn [& x] (reduce \n           (fn [x1 x2] \n             (if (> x1 x2) x1 x2)\n             ) x\n           )\n  )", "problem": 38, "user": "4fbf5607e4b081705acca319"}, {"code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) coll))", "problem": 38, "user": "51ba4482e4b0fe3ecfb4642b"}, {"code": "(fn [& i]\n      (last (sort i)))", "problem": 38, "user": "51bd255ce4b0df1216cefd94"}, {"code": "(fn [h & t]\n  (reduce #(if (< %1 %2) %2 %1) h t))", "problem": 38, "user": "4f52ae00e4b03ad3f0c10d42"}, {"code": "(fn [ & other] (reduce #(if (> %1 %2) %1 %2) other))", "problem": 38, "user": "51c3130de4b0d204dbe2ca31"}, {"code": "(fn [x & xs] (reduce #(if (> %1 %2) %1 %2) x xs))", "problem": 38, "user": "5161e5eee4b009fba0926e3a"}, {"code": "(fn myMax \n  ([] 0) \n  ([x] x)\n  ([x y] (if(> x y) x y))\n  ([x y & more] (myMax x (apply myMax y more)))\n)", "problem": 38, "user": "51c214bce4b0d204dbe2ca1c"}, {"code": "(fn [& numbers]\n  (loop [mx (first numbers) others (rest numbers)]\n    (if (empty? others) mx\n    (let [curr_max (if (> (first others) mx) (first others) mx)]\n      (recur curr_max (rest others))))))", "problem": 38, "user": "51c342e9e4b0851ac09658f3"}, {"code": "#(last (sort %&))", "problem": 38, "user": "51b9dc12e4b0e871ca49590c"}, {"code": "(fn [x & r] (reduce #(if (> %1 %2) %1 %2) x r))", "problem": 38, "user": "51c330a9e4b0851ac09658f2"}, {"code": "(fn [& a] (reduce #(if (> %2 %) %2 %) a))", "problem": 38, "user": "4f5dae33e4b0030a34fb2b41"}, {"code": "(fn\n  [& xs]\n  (last (sort xs)))", "problem": 38, "user": "4ee93f4c535d93acb0a6688c"}, {"code": "(comp last sort list)", "problem": 38, "user": "51b9d1f0e4b0e871ca49590b"}, {"code": "(fn [& args] (first (reverse (sort args))))", "problem": 38, "user": "51ba59e4e4b0fe3ecfb4642d"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "51c09719e4b0c9c82288293c"}, {"code": "(fn[& args](-> args sort reverse first))", "problem": 38, "user": "51bcf091e4b0df1216cefd91"}, {"code": "(fn max-value\n    [x & xs]\n    (letfn [(my-compare [num1 num2]\n            (if (> num1 num2) num1 num2))]\n            \n            (reduce my-compare x xs)))", "problem": 38, "user": "51aa7298e4b04e3dc0c27b28"}, {"code": "(fn [& sq] (reduce #(if(>%1 %2) %1 %2) sq))", "problem": 38, "user": "51c3c6a6e4b0851ac09658f8"}, {"code": "(fn [& l] (reduce #(if (> % %2) % %2) l))", "problem": 38, "user": "4fa3c137e4b081705acca193"}, {"code": "(fn [x & rest]\n  (reduce #(if (< %1 %2) %2 %1) x rest))", "problem": 38, "user": "5150b220e4b03e678e393ac0"}, {"code": "(fn [& args](reduce #(if (> %1  %2) %1 %2) args))", "problem": 38, "user": "51c1d159e4b0d204dbe2ca18"}, {"code": "#(reduce (fn [x y] (if(> x y) x y)) %&)", "problem": 38, "user": "51ca15bfe4b09ce160bef5b8"}, {"code": "#(last (sort %&))", "problem": 38, "user": "51793056e4b0684c1c981a41"}, {"code": "(fn m [& args] \n  (if (= (count args) 1)\n      (first args)\n      (if (> (first args) (apply m (rest args)))\n        (first args)\n        (apply m (rest args)))))", "problem": 38, "user": "51c9c6cde4b09ce160bef5b1"}, {"code": "(fn mx\n  ([x] x)\n  ([x y] (if (< x y) y x))\n  ([x y & more] (apply mx (cons (if (< x y) y x) (rest more)))))", "problem": 38, "user": "51c76864e4b07ef393169e3f"}, {"code": "(comp last sort list)", "problem": 38, "user": "51ca7906e4b08b1cbd0d9487"}, {"code": "(fn [x & xs]\n  (reduce #(if (> % %2) % %2) x xs))", "problem": 38, "user": "51c8301ee4b07ef393169e4d"}, {"code": "(fn [nu & x]\n   (loop [max-number nu element x]\n     (if (empty? element)\n          max-number\n         (if (< max-number (first element))\n               (recur (first element) (rest element))\n             (recur max-number (rest element))))))", "problem": 38, "user": "51cacda3e4b068dadb8f2227"}, {"code": "(comp last sort list)", "problem": 38, "user": "51c73959e4b07ef393169e3e"}, {"code": "(fn [& nums] (reduce (fn [a b] (if (> a b) a b)) nums))", "problem": 38, "user": "51cc5f20e4b02254fc794870"}, {"code": "(comp - (partial apply min) (partial map -) list)", "problem": 38, "user": "51cbdee1e4b08d8387cbede1"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "51a34135e4b0ab315a23ba63"}, {"code": "(fn [& x]\n  (loop [xs (drop 1 x)\n         n (first x)]\n    (if (empty? xs) \n      n\n      (recur (drop 1 xs) (if (> (first xs) n) (first xs) n )))))", "problem": 38, "user": "4ead1bb3535d7eef3080731d"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "5042bb9ae4b034ff00315d16"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "problem": 38, "user": "51ccc92ce4b02254fc79487a"}, {"code": "(fn [& p]\n    (-> p sort last))", "problem": 38, "user": "51c858c3e4b07ef393169e55"}, {"code": "(fn zz [& l]\n  (first(sort > l)))", "problem": 38, "user": "51cdec45e4b0e42293a2254f"}, {"code": "(fn MAX \n  ([a] \n     a)\n  ([a b & other] \n    (apply MAX \n      (cons \n        (if (> a b) \n          a \n          b) \n        other))))", "problem": 38, "user": "51ccc179e4b02254fc794879"}, {"code": "(fn [& args] ( reduce (fn[x y] (if (> y x) y x)) 0 args ) )", "problem": 38, "user": "51cec7b1e4b0e42293a2255b"}, {"code": "(fn [& nums] (reduce \n              (fn [n1 n2] \n                (if (> n1 n2)\n                  n1\n                  n2))\n  \t\t\t  nums))", "problem": 38, "user": "517cc671e4b0bbbf1f12af0a"}, {"code": "(fn [& nums] (reduce (fn [m e] (if (> e m) e m)) nums))", "problem": 38, "user": "51cdd3f0e4b0e42293a2254b"}, {"code": "(fn [& args]\n  (last (sort args)))", "problem": 38, "user": "51c9a705e4b09ce160bef5ab"}, {"code": "#( (comp first reverse sort) %&)", "problem": 38, "user": "51d0b46ee4b067c365486353"}, {"code": "(fn [& args] \n  (reduce \n   (fn [a b] \n     (if (> a b) a b))\n   args))", "problem": 38, "user": "50d6d7eee4b0159555a1fc76"}, {"code": "(fn [& xs]\n  (reduce #(if (> %2 %) %2 %) xs))", "problem": 38, "user": "51d08d67e4b067c365486351"}, {"code": "(fn [& s] (reduce #(if (< %1 %2) %2 %1) s))", "problem": 38, "user": "51caca2ae4b068dadb8f2226"}, {"code": "(fn m \n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] (apply m (m x y) more)))", "problem": 38, "user": "51d19c24e4b0cfcf579466c3"}, {"code": "(fn [& rest] (last (sort rest)))", "problem": 38, "user": "51c9fe91e4b09ce160bef5b6"}, {"code": "(fn gt ([x] x) ([x y] (if (> x y) x y)) ([x y & more] (apply gt (conj more (gt x y)))))", "problem": 38, "user": "51cf126ae4b0e42293a2256b"}, {"code": "(fn [n & m] (first (sort > (apply list n m))))", "problem": 38, "user": "51bdc609e4b0ff155d51d2b3"}, {"code": "(fn [& a] (last (sort a)))", "problem": 38, "user": "51cc5cb3e4b02254fc79486f"}, {"code": "(fn get-max [& arg]\n  (reduce #(if (> %1 %2) %1 %2) arg))", "problem": 38, "user": "51cbaf14e4b08d8387cbedda"}, {"code": "(fn mymax [x & xs]\n        (reduce #(if(< %1 %2) %2 %1) (flatten (cons x xs)))\n)", "problem": 38, "user": "51d1111ce4b067c36548635f"}, {"code": "(fn [& more]\n  (last (sort more)))", "problem": 38, "user": "51d1db6ce4b0d13b04db0d90"}, {"code": "(fn [& x](reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "51a584c7e4b051b01d55f44e"}, {"code": "(comp \n  #(loop [x 0,y %,z (count %)]\n        (if (== x (- z 1))\n             (last y)\n             (recur (inc x)\n                         (if (> (nth y x) (last y))\n                              (conj y (nth y x))\n                                 y)\n                          z)))\n  vector)", "problem": 38, "user": "51c4690fe4b06b70b3e207e1"}, {"code": "(fn max-val [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) (flatten (cons x xs))))", "problem": 38, "user": "51d1875be4b0cfcf579466c0"}, {"code": "(fn [& lst]\n  (loop [l lst m 0]\n    (if (empty? l)\n      m\n      (recur (rest l) (if (> m (first l)) m (first l))))))", "problem": 38, "user": "4fe9ea87e4b0547ebccb2476"}, {"code": "(fn [& vals]\n  (reduce #(if (> % %2) % %2) vals))", "problem": 38, "user": "517b59b8e4b0925c997201d0"}, {"code": "(fn [& ot]  (reduce #(if (> % %2) % %2) ot ))", "problem": 38, "user": "51d10b1fe4b067c36548635e"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args ))", "problem": 38, "user": "4f75eb33e4b0fbe0118ec565"}, {"code": "(fn foo [& args]\n  (loop [values args\n         maximum 0]\n    (if (empty? values)\n      maximum\n      (if (> (first values) maximum)\n        (recur (rest values) (first values))\n        (recur (rest values) maximum)))))", "problem": 38, "user": "51d360d1e4b099f3b6acddff"}, {"code": "(fn [& p]\n  (reduce (fn [x y] (if (< x y) y x)) p))", "problem": 38, "user": "509fa9b5e4b08df8156e9e3f"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "51d4ed02e4b013d740b70dec"}, {"code": "(fn [x & xs] (reduce #(if (> %1 %2) %1 %2) x xs))", "problem": 38, "user": "51c19873e4b0d204dbe2ca0d"}, {"code": "(fn [x y & args] (let [m (if (< x y) y x)] (if (seq args) (recur m (first args) (rest args)) m)))", "problem": 38, "user": "4e6a82ba535d8ccf87e9feef"}, {"code": "(fn f [& s]\n  (reduce (fn [acc s*] (if (> s* acc) s* acc)) (first s) (rest s)))", "problem": 38, "user": "51d662fce4b0154f82ab92ef"}, {"code": "(fn maxi [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "51d381b5e4b099f3b6acde01"}, {"code": "(fn [x & xs]\n  (reduce #(if (> %1 %2) %1 %2) x xs))", "problem": 38, "user": "5151c184e4b03e678e393add"}, {"code": "(fn [x & xs] (reduce #(if(> %1 %2) %1 %2) x xs))", "problem": 38, "user": "517ecad4e4b09104ecebe7e9"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4f038b62535dcb61093f6b1c"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "51d67516e4b0154f82ab92f0"}, {"code": "(fn [& args] (last (map identity (sort args))))", "problem": 38, "user": "518aec06e4b06da86c1973c2"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "51d5af00e4b01da06753aa93"}, {"code": "(fn [x & r] \n         (cond \n          (empty? r) x\n          (> x (first r)) (recur x (rest r) )\n          :default (recur (first r) (rest r))\n         )\n         )", "problem": 38, "user": "51d5ce6fe4b01da06753aa94"}, {"code": "(fn my-max [& args] (last (sort args)))", "problem": 38, "user": "4f8aa6cbe4b02e764a0a5170"}, {"code": "(fn [& args]\n  (reduce \n(fn [x y]\n  (if (> x y)\n    x\n    y))\n   args))", "problem": 38, "user": "504dffe2e4b078edc5f5938b"}, {"code": "(fn [arg & args]\n    (reduce (fn [accum v] (if (< accum v) v accum)) arg args))", "problem": 38, "user": "501f36dde4b0cb6ebc0a42e4"}, {"code": "(fn [x & y]\n  (if (nil? (next y)) \n    x \n    (if (> (first y) x) \n     (recur (first y) (next y))\n     (recur x (next y)))))", "problem": 38, "user": "4dde4e95535d08e6dec9fdd7"}, {"code": "(fn [& more]\n  \n  (last (sort more))\n  )", "problem": 38, "user": "51ab734ee4b04e3dc0c27b34"}, {"code": "(fn mymax [& x]\n  (- (apply min (map - x))))", "problem": 38, "user": "51d96ad0e4b02ceefd94774f"}, {"code": "(fn [& args] (reduce #(cond (> %1 %2) %1 :else %2) args))", "problem": 38, "user": "51da565ae4b02ceefd947765"}, {"code": "(fn ! [& args]\n  (if (= 1 (count args))\n    (first args)\n    (let [mymax (apply ! (rest args))]\n      (if (> (first args) mymax)\n        (first args)\n        mymax\n      )\n    )\n  )\n)", "problem": 38, "user": "51db8244e4b0e067a9bbadc7"}, {"code": "(fn ma\n  ([x] x)\n  ([x y] (if (>= x y)\n           x\n           y))\n  ([x y & more] (reduce ma (ma x y) more))\n  )", "problem": 38, "user": "51da7e49e4b02ceefd947768"}, {"code": "(fn biggest \n  ([y x] \n   (if (> y x)\n     y\n     x))\n  ([x y & more]\n   (reduce biggest (biggest x y) more)))", "problem": 38, "user": "51d1ef6ee4b0d13b04db0d92"}, {"code": "(fn [f & r]\n  (reduce #(if (< %1 %2) %2 %1) f r))", "problem": 38, "user": "51d59859e4b01da06753aa92"}, {"code": "(fn [& s]\n  (reduce #(if (> %1 %2) %1 %2) Double/NEGATIVE_INFINITY s))", "problem": 38, "user": "5175533fe4b0dea9bbfba575"}, {"code": "(fn [& more]\n  (loop [curr-max (first more), more more]\n    (if (empty? more)\n      curr-max\n      (if (> curr-max (first more))\n        (recur curr-max (rest more))\n        (recur (first more) (rest more))))))", "problem": 38, "user": "51dc80b7e4b09c47a74ce10f"}, {"code": "(fn maximum-value [a & b]\n  (reduce #(if (< % %2) %2 %) (flatten (cons a b))))", "problem": 38, "user": "51ac7e9be4b09397d510976f"}, {"code": "(fn [& args]\n\t(reduce #(if (> %2 %1) %2 %1) args))", "problem": 38, "user": "51d49b75e4b013d740b70de6"}, {"code": "(fn [& xs]\n  (reduce (fn [x y] (if (> y x) y x)) xs))", "problem": 38, "user": "51ce1320e4b0e42293a22551"}, {"code": "#(last (sort (cons % %&)))", "problem": 38, "user": "51d46133e4b013d740b70de2"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "51b6f4f9e4b04fc00976d479"}, {"code": "(fn self \n ([v] v)\n ([v1 v2 & cl]\n  (apply self (if (> v1 v2) v1 v2) cl)\n  )\n )", "problem": 38, "user": "51db9e1ee4b0e067a9bbadc9"}, {"code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "51e00020e4b01188f0627534"}, {"code": "(fn [& a] (-> a sort last))", "problem": 38, "user": "51d9eb05e4b02ceefd947755"}, {"code": "(fn [& x]\n  (loop [lst x\n         mx (first x)]\n    (if (empty? lst)\n      mx\n      (recur (rest lst) (if (> (first lst) mx) (first lst) mx) ))))", "problem": 38, "user": "51da5552e4b02ceefd947764"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4ec6a616535d6d7199dd36d2"}, {"code": "(fn foo [ a & vals] (reduce\n                       (fn [acc b]\n                         (if (< acc b )\n                           b\n                           acc))\n                       a\n                       vals))", "problem": 38, "user": "51df505be4b01188f062752a"}, {"code": "(fn [& args] (first (sort > args)))", "problem": 38, "user": "51da52dbe4b02ceefd947763"}, {"code": "(fn [& data] (loop [d data\n                     x 0]\n                (if (empty? d)\n                  x\n                  (recur (rest d) (if (> (first d) x)\n                                    (first d)\n                                    x)))))", "problem": 38, "user": "50214ffae4b0ef1d2d4433bc"}, {"code": "#(last (sort %&))", "problem": 38, "user": "51df825de4b01188f062752b"}, {"code": "(fn [& args] (last (reductions (fn [a b] (if (> a b) a b)) args)))", "problem": 38, "user": "51d5ff4ce4b01da06753aa98"}, {"code": "(fn [x & xs]\n  (if (empty? xs)\n    x\n    (let [y (first xs)\n          z (rest xs)]\n      (if (> x y)\n        (recur x z)\n        (recur y z)))))", "problem": 38, "user": "4f03afcc535dcb61093f6b4d"}, {"code": "(fn [& lst] \n\t(- (apply min (map - lst)))\n)", "problem": 38, "user": "51e23b80e4b01e519814642b"}, {"code": "(fn [& l]\n  (reduce (\n           fn [a i] \n           (if (> i a) i a)\n           ) 0 l\n          )\n  )", "problem": 38, "user": "51e1c176e4b06a68e693eafb"}, {"code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "51d03008e4b0e42293a2257c"}, {"code": "(fn [& args](first (sort > args)))", "problem": 38, "user": "51b66b31e4b02e5820733406"}, {"code": "(fn [& xs] (reduce #(if (< % %2) %2 %) xs))", "problem": 38, "user": "51b2e850e4b026427ecf067b"}, {"code": "(fn abrmax [& args] (last (sort args )))", "problem": 38, "user": "51b6471ee4b02e5820733404"}, {"code": "(fn [& args] \n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "51e24a04e4b01e5198146430"}, {"code": "(comp last sort list)", "problem": 38, "user": "51e3cf8ee4b0efabf93c02a3"}, {"code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "516199bbe4b009fba0926e36"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "51e0198ee4b01188f0627539"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "51aee76ce4b09397d5109796"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "51ac36c1e4b09397d5109765"}, {"code": "(fn [ & args ] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "51e1a1fae4b06a68e693eaf6"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "51ba8f82e4b0fe3ecfb46434"}, {"code": "(comp last sort list)", "problem": 38, "user": "50e90813e4b033b0e80d11e7"}, {"code": "(fn [& args] (first (reverse (sort args))))", "problem": 38, "user": "51e41f4be4b0efabf93c02ac"}, {"code": "(fn [& xs] (reduce #(if (> % %2) % %2) xs))", "problem": 38, "user": "51e58e02e4b0efabf93c02d0"}, {"code": "#(last (sort %&))", "problem": 38, "user": "51e5dc65e4b0efabf93c02de"}, {"code": "(fn [& rest] \n  (reduce #(if (> %1 %2) %1 %2) rest))", "problem": 38, "user": "5167cf82e4b0c5a4140a3095"}, {"code": "#(last (sort %&))", "problem": 38, "user": "51c611c4e4b03a28d42333bf"}, {"code": "#(last (sort %&))", "problem": 38, "user": "519c4111e4b0a1d87b003458"}, {"code": "(fn [& xs] \n  (loop [s xs n 0]\n    (if (empty? s) n\n      (recur (rest s) (if (> n (first s)) n (first s))))))", "problem": 38, "user": "5047eadde4b0ec70b3ef8d94"}, {"code": "(fn [& x] (reduce (fn [y z] (if (> y z) y z)) 0 x))", "problem": 38, "user": "51e28063e4b08e53a149f0f2"}, {"code": "(fn [& c] (reduce #(if (> % %2) % %2) c))", "problem": 38, "user": "50cf21dee4b0e61f11ddcd8b"}, {"code": "(fn [& nums] (last (sort (seq nums))))", "problem": 38, "user": "5029f263e4b023940c84aa45"}, {"code": ";; yikebocai's solution to Maximum value\n;; https://4clojure.com/problem/38\n\n(fn [& nums] \n  (loop [mx 0 i 0] \n    (if (< i (count nums)) \n      (recur \n       (if (> mx (nth nums i)) \n         mx \n         (nth nums i ) ) \n       (inc i)) \n      mx)))", "problem": 38, "user": "5022292ee4b0846bc458ae46"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "problem": 38, "user": "51e786c9e4b0a3e081b8cbeb"}, {"code": "(fn [& coll]\n  (-> coll\n      sort\n      last))", "problem": 38, "user": "51e89428e4b006d205356a51"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "51e595a6e4b0efabf93c02d8"}, {"code": "(fn [& args] \n  (reduce (fn [a b] (if (> a b) \n                      \t\ta b)) args))", "problem": 38, "user": "4fea24e0e4b0547ebccb248d"}, {"code": "(fn [& m] (reduce (fn [x y] (if (> x y) x y)) m))", "problem": 38, "user": "51dc5033e4b09c47a74ce109"}, {"code": "(letfn [(m [x y] (if (< x y) y x))]\n  (fn ([x] x)\n      ([x y & ys] (reduce m (m x y) ys))))", "problem": 38, "user": "51eadb98e4b0f1f103a0d153"}, {"code": "(fn [& a]\n   (loop [i 0, c (count a), m (nth a 0)]\n     (if (>= i c)\n       m\n       (recur (inc i) c (if (> m (nth a i)) m (nth a i)))))\n  )", "problem": 38, "user": "51eca2ace4b069f463c22cd0"}, {"code": "(fn [& args]\n  (loop [maximum 0 \n         l args]\n    (if (empty? l)\n      maximum\n      (recur (if (> (first l) maximum) (first l) maximum) (rest l)))))", "problem": 38, "user": "5180af54e4b0e3fc13e244e9"}, {"code": "(fn mm [x & xs]\n  (if (not xs)\n    x\n    (let [b (apply mm xs)]\n      (if (< x b)\n        b\n        x\n        ))))", "problem": 38, "user": "504e90bae4b069badc5a33b8"}, {"code": "(fn [& x] (first (reverse (sort x))))", "problem": 38, "user": "51eacfffe4b0f1f103a0d152"}, {"code": "(fn [ & args ] (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "51dd6a7ce4b0c33a4e1da409"}, {"code": "(fn [& n] (reduce #(if (> % %2) % %2) n))", "problem": 38, "user": "51eb0374e4b0f1f103a0d156"}, {"code": "(fn [& arg]\n  (last (sort arg)))", "problem": 38, "user": "51eb3aace4b0f1f103a0d159"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args))", "problem": 38, "user": "4e977eb4535dbda64a6f6b56"}, {"code": "(fn [& numbers]\n  (last (sort (seq numbers))))", "problem": 38, "user": "51e7abeae4b0a3e081b8cbee"}, {"code": "(fn max2([x] x)\n   ([x y] (if (> x y) x y))  \n   ([x y & more] (reduce max2 (max2 x y) more)))", "problem": 38, "user": "51d11f5de4b067c365486360"}, {"code": "(fn [& args] (-> args sort last))", "problem": 38, "user": "51dd55dae4b0c33a4e1da404"}, {"code": "(fn [ & numbs] (last (sort numbs)))", "problem": 38, "user": "51e780dae4b0730ab87cf353"}, {"code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "51ef66a7e4b0871fa145d9a5"}, {"code": "(fn my-max\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & rest]\n   (reduce my-max (my-max x y) rest)))", "problem": 38, "user": "51eff50fe4b0249c592fbdf0"}, {"code": "(fn my-max\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] (reduce my-max ( my-max x y) more)))", "problem": 38, "user": "51d46747e4b013d740b70de3"}, {"code": "(fn [& r] (reduce #(if (> %1 %2) %1 %2) r))", "problem": 38, "user": "51efd397e4b0249c592fbdeb"}, {"code": "(fn [& rest] (last (sort rest)))", "problem": 38, "user": "51bf0ccee4b013aa0d74b811"}, {"code": "(fn [& n] (reduce #(if (> %1 %2) %1 %2) n))", "problem": 38, "user": "51e8d037e4b07cae92c04bf7"}, {"code": "(fn [& lst] (last (sort lst)))", "problem": 38, "user": "51eec1a6e4b0871fa145d98d"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "problem": 38, "user": "51ddb8c7e4b0de53e6370c48"}, {"code": "(fn new-max[& values]\n\t(reduce (fn [a b] (if (> a b) a b)) values))", "problem": 38, "user": "51ec9114e4b069f463c22ccd"}, {"code": "#(last (sort %&))", "problem": 38, "user": "51f23cb2e4b0210f90e74540"}, {"code": "(fn lst[& lst] (reduce (fn ([x] x) ([x y] (if (> x y) x y))) lst))", "problem": 38, "user": "51f2851fe4b0210f90e7454b"}, {"code": "(fn\n  [& args]\n  (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "511b233ae4b07ab9ec456180"}, {"code": "(fn [& args]\n  (loop [lst (rest args) mx (first args)]\n    (cond (empty? lst) mx\n          (< mx (first lst)) (recur (rest lst) (first lst))\n          :else (recur (rest lst) mx))))", "problem": 38, "user": "51f40975e4b0fca5e8b4822e"}, {"code": "(fn [& l] (reduce (fn [a b] (cond (< a b) b :else a)) 0 l))", "problem": 38, "user": "51f2ab8be4b0210f90e74554"}, {"code": "(fn [& args] (reduce #(if (> % %2) % %2) args))", "problem": 38, "user": "51efa6a6e4b0249c592fbde8"}, {"code": "(fn [& args] (reduce #(if (> % %2) % %2) args))", "problem": 38, "user": "51f04e89e4b0274c496158cd"}, {"code": "(fn m\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n   (reduce m (m x y) more)))", "problem": 38, "user": "4db4ece6535d6f02e7a0f213"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "problem": 38, "user": "5000fe8ae4b0678c553fc412"}, {"code": "(fn [& xs]\n(let [sq (into '() xs)]\n(reduce #(if (> %2 %1) %2 %1) sq)))", "problem": 38, "user": "51f13b80e4b06a20a2523f38"}, {"code": "(fn [& rest] (let [[x y z k] rest]) (last (sort (apply vec [rest]))))", "problem": 38, "user": "51ed09b6e4b0bb507043158b"}, {"code": "(fn [& args] \n  (reduce #(if (> %1 %2)\n             %1\n             %2) args))", "problem": 38, "user": "51f583d2e4b0abb92f97f9d4"}, {"code": "(fn [& l] (reduce\n            (fn [a b] (if (> a b) a b))\n            l))", "problem": 38, "user": "51e6a2bce4b0ab43cc26c21d"}, {"code": "(fn [ & xs] (last (apply sorted-set xs)))", "problem": 38, "user": "51f59607e4b0abb92f97f9d5"}, {"code": "(fn [& args] (reduce #(if (> %2 %) %2 %) args))", "problem": 38, "user": "51f55bdae4b0abb92f97f9d0"}, {"code": "(fn x [& args] (loop [m -1\n        \t\t\tl  args]\n   (if (empty? l)\n     m\n     (if (> (first l) m)\n       (recur (first l) (rest l))\n       (recur m (rest l))))))", "problem": 38, "user": "51f28a64e4b0210f90e7454e"}, {"code": "#(first (sort > %&))", "problem": 38, "user": "51a91ac2e4b08d8ec191b822"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "51f805b0e4b06ff1c25c52e2"}, {"code": "(fn [& args]\n  (reduce \n   (fn [a b] (if (> a b) a b)) \n   (seq args)))", "problem": 38, "user": "51f8277be4b09be9c177e528"}, {"code": "(fn [& nums]\n  (reduce #(if (> %2 %1) %2 %1) (first nums) (rest nums)))", "problem": 38, "user": "518279abe4b0353c468deb65"}, {"code": "#(last (sort %&))", "problem": 38, "user": "50aedb8ce4b0a40c9cfb08d4"}, {"code": "(fn [& xs] (reduce #(if (> % %2) % %2) xs))", "problem": 38, "user": "51db1abae4b094966a2cd685"}, {"code": "(fn [& arg]\n  (reduce #(if (< %1 %2) %2 %1) arg))", "problem": 38, "user": "5046ee3ee4b03b02161376b4"}, {"code": "#(last (into (sorted-set) %&))", "problem": 38, "user": "51f2b8f1e4b0210f90e74556"}, {"code": "#(last (sort %&))", "problem": 38, "user": "51f9b1d0e4b09be9c177e550"}, {"code": "(fn [ & x ] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "51dd9370e4b0c33a4e1da40c"}, {"code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "problem": 38, "user": "51fa7154e4b0f1313d4689da"}, {"code": "#(last (sort %&))", "problem": 38, "user": "51fa1375e4b0f1313d4689c9"}, {"code": "(comp last sort list)", "problem": 38, "user": "51b1e924e4b02f8f128bb95b"}, {"code": "(fn [& args] (reduce (fn [a b] (if (< a b) b a)) (first args) (rest args)))", "problem": 38, "user": "51fa9425e4b0f1313d4689e3"}, {"code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) (first args) (next args)))", "problem": 38, "user": "51fa852ee4b0f1313d4689dd"}, {"code": "(fn [l & args] (reduce #(if(> %1 %2) %1 %2) (cons l args)))", "problem": 38, "user": "51f98843e4b09be9c177e54e"}, {"code": "(fn [x & rema] (loop [m x s rema]\n                (if (seq s)\n\t  \t\t\t\t(if (> m (first s)) \n                      (recur m (rest s))\n                      (recur (first s) (rest s))\n                      )\n                  \tm)\n                ))", "problem": 38, "user": "51fb178ce4b0f1313d4689f9"}, {"code": "(fn [& args]\n  (loop [max-num (first args)\n        remain-list args]\n   (if (seq remain-list)\n     (if (> max-num (first remain-list))\n       (recur max-num (rest remain-list))\n       (recur (first remain-list) (rest remain-list)))\n     max-num)))", "problem": 38, "user": "51f82769e4b09be9c177e527"}, {"code": "(fn [& l]\n   (loop [nums l m 0]\n     (if (> (count nums) 0)\n       (recur (rest nums)\n              (if (> (first nums) m)\n                (first nums)\n                m))\n       m)))", "problem": 38, "user": "51fa90aae4b0f1313d4689e0"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2)\n             %1\n             %2) args))", "problem": 38, "user": "51ca9af6e4b08b1cbd0d948a"}, {"code": "#(last (sort %&))", "problem": 38, "user": "51facf22e4b0f1313d4689f0"}, {"code": "( fn [& params] (reduce (fn [x y] (if (> x y) x y)) params))", "problem": 38, "user": "51fb4a9be4b0f1313d4689ff"}, {"code": "(fn mymax\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n    (reduce mymax (mymax x y) more))\n  )", "problem": 38, "user": "51f549c4e4b0abb92f97f9cb"}, {"code": "(fn myMaximum [& args] (reduce (fn Mycompare [x,y] (if (> x y) x y)) args))", "problem": 38, "user": "51faf9ece4b0f1313d4689f7"}, {"code": "(fn mymax \n        ([ a ] ( a ) )\n  \t\t([ a b] ( if (> a b) a b ))\n        ([ a b & args] (apply mymax ( mymax a b ) args ))\n  )", "problem": 38, "user": "51f6d5fde4b06ff1c25c52d1"}, {"code": "#(first (sort > %&))", "problem": 38, "user": "51891c96e4b04c2714a2670e"}, {"code": "(comp first reverse sort list)", "problem": 38, "user": "52016fd3e4b0b2e020a18f10"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "52016690e4b0b2e020a18f0f"}, {"code": "(fn [& p] (first (sort > p)))", "problem": 38, "user": "516ab8c2e4b081287f204e9e"}, {"code": "(fn maxi [& args] \n  (reduce #(if (> %1 %2) \n             %1\n             %2) \n          args))", "problem": 38, "user": "51db0d99e4b06aa4d4669a9d"}, {"code": "#(reduce (fn [a b] (if (< a b) b a)) %&)", "problem": 38, "user": "50c781bbe4b00bb60fe0c535"}, {"code": "(fn [x & xs] (reduce #(if (> %2 %1) %2 %1) x xs))", "problem": 38, "user": "51febd40e4b0f1313d468a76"}, {"code": "(fn [& args]\n  (reduce \n   #(if (> %1 %2)\n      %1\n      %2)\n   args))", "problem": 38, "user": "5201d2f3e4b0b2e020a18f22"}, {"code": "(comp (partial reduce #(if (> %2 %1) %2 %1)) list)", "problem": 38, "user": "52011018e4b0d7096e99ddaf"}, {"code": "(fn [& the-rest] (reduce (fn [x y] (if (> x y) x y))   the-rest))", "problem": 38, "user": "520380afe4b0fb7e47ea51fb"}, {"code": "(fn [& args]\n  (loop [sec args\n         maxv (first args)]\n    (if (= 1 (count sec))\n      maxv\n      (recur (rest sec) \n             (if (> maxv (second sec))\n                 maxv\n                 (second sec))))))", "problem": 38, "user": "51f297a3e4b0210f90e74552"}, {"code": "(fn [& args] (reduce #(if (> % %2) % %2) args))", "problem": 38, "user": "52039e12e4b0fb7e47ea51ff"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "5203bc27e4b0fb7e47ea5204"}, {"code": "(fn [& rst]\n(first (reverse (sort rst))))", "problem": 38, "user": "5202cfe7e4b030ee0c5b2702"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "5203621ee4b0fb7e47ea51f5"}, {"code": "(fn [& s] (reduce (fn[a b] (if (> a b) a b)) s))", "problem": 38, "user": "5201ff99e4b0b2e020a18f26"}, {"code": "(fn [& args] (reduce #(if (< %2 %1) %1 %2) args))", "problem": 38, "user": "51f7dd27e4b06ff1c25c52dc"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs)\n  )", "problem": 38, "user": "513fab65e4b00f13ea1bd891"}, {"code": "(fn [& x]\n  (reduce (fn [a b] (if (> a b) a b)) x)\n )", "problem": 38, "user": "51eab308e4b0f1f103a0d150"}, {"code": "(fn [& data]\n  (reduce (fn [a b]\n            (if (> a b)\n                a\n                b)) data))", "problem": 38, "user": "4fc5dfabe4b0ee37620e1800"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "52069fade4b0bf4f1882c82c"}, {"code": "(fn f [& xs] (-> xs sort last))", "problem": 38, "user": "520612a7e4b0bf4f1882c81c"}, {"code": "(fn [& vals]\n  (let [mx (atom -1)]\n    (doseq [el vals]\n            (if (> el @mx)\n              (reset! mx el)))\n    @mx))", "problem": 38, "user": "51fe9d7ce4b0f1313d468a70"}, {"code": "(fn [& nbs] (first (reverse (sort nbs))))", "problem": 38, "user": "5207d70ae4b03bd50ef54675"}, {"code": "(fn [x & xs]\n  (let [ xsm (last (sort xs)) ] \n    (if (< x xsm) \n      xsm \n      x)))", "problem": 38, "user": "5204173be4b0fb7e47ea5216"}, {"code": "(fn [& args] (last (sort (seq args))))", "problem": 38, "user": "51f0ade4e4b0274c496158d9"}, {"code": "(fn [& x]\n  (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "52084f75e4b01ce6bbf31dde"}, {"code": "#(last (sort %&))", "problem": 38, "user": "52000564e4b023d2eb508ca8"}, {"code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) more))", "problem": 38, "user": "5208495ce4b0c1501ba9e6da"}, {"code": "(fn [& x]\n  (reduce #(if (> % %2) % %2) x))", "problem": 38, "user": "52015698e4b0d7096e99ddba"}, {"code": "(fn [& coll] (last (sort coll)))", "problem": 38, "user": "52029e5de4b030ee0c5b26fc"}, {"code": "(fn [& xs] (last (sort xs)))", "problem": 38, "user": "4f4ff836e4b03ad3f0c10cf4"}, {"code": "(fn [ & r] (reduce (fn [x y] (if (> x y) x y)) r))", "problem": 38, "user": "4f88f57ae4b033992c121c73"}, {"code": "(fn rec\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] (if (> x y) (apply rec (cons x more)) (apply rec (cons y more)))))", "problem": 38, "user": "52091d57e4b0e152394d76f0"}, {"code": "(fn [& xs] (- (apply min (map - xs))))", "problem": 38, "user": "4dbe8729535d020aff1edf62"}, {"code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "problem": 38, "user": "5200ffc6e4b0d7096e99ddac"}, {"code": "(fn [& args] (last (sort (apply conj () args))))", "problem": 38, "user": "51f66e0ee4b06ff1c25c52c3"}, {"code": "(fn mymax [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "5209cb44e4b0e152394d7702"}, {"code": "(fn [& nums] (first (sort > nums)))", "problem": 38, "user": "51f64e71e4b06ff1c25c52bf"}, {"code": "(fn [& args] (first (reverse (sort args))))", "problem": 38, "user": "4e94b26b535dbda64a6f6b25"}, {"code": "(fn [& args] (reduce (fn [p x] (if (> p x) p x)) args))", "problem": 38, "user": "520aaac2e4b01da9d47a99e6"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "520a86fee4b01da9d47a99de"}, {"code": "(fn [x y & more]\n  (let [\n        mini-max (fn [x y] (cond (nil? y) x (nil? x) y :else (if (> x y) x y)))\n        nums (flatten (list x y more))\n        ]\n    (reduce mini-max nums)))", "problem": 38, "user": "520c5b9ee4b0b022ef140c94"}, {"code": "(fn mymax\n  ([x y]\n     (if (> x y) x y))\n  ([x y & more]\n     (reduce mymax (mymax x y) more)))", "problem": 38, "user": "520a576be4b0e152394d7714"}, {"code": "(fn [& s] (last (sort s)))", "problem": 38, "user": "52090654e4b0e152394d76ee"}, {"code": "#(last (sort %&))", "problem": 38, "user": "520b67b5e4b0b022ef140c83"}, {"code": "(fn [& args]\n  (last (sort args)))", "problem": 38, "user": "4fa176c7e4b0dcca54ed6d5e"}, {"code": "#(last (sort %&))", "problem": 38, "user": "5201cf92e4b0b2e020a18f21"}, {"code": "(fn [& seq] (reduce #(if (> %1 %2) %1 %2) seq))", "problem": 38, "user": "51a3738ce4b0e77c4ca60bf0"}, {"code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "problem": 38, "user": "520a796be4b01da9d47a99dc"}, {"code": "(fn  mymax\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n   (reduce mymax (mymax x y) more)))", "problem": 38, "user": "5208a3a2e4b0301979a6c235"}, {"code": "(fn [& args] (reduce #(if (> %2 %) %2 %) args))", "problem": 38, "user": "520e32a2e4b066f3ea161c93"}, {"code": "(fn [a & d] (reduce (fn [x y] (if (< x y) y x)) a d))", "problem": 38, "user": "4e8b5cb8535d65386fec211b"}, {"code": "(fn[& x](-(apply min (map - x))))", "problem": 38, "user": "5186448fe4b0da5a5be3bac9"}, {"code": "(fn [& n]\n  (reduce #(if (> %1 %2) %1 %2) 0 n))", "problem": 38, "user": "5191ac45e4b0d428d29dc1b6"}, {"code": "#(last (sort %&))", "problem": 38, "user": "520c9489e4b0b022ef140c98"}, {"code": "(fn max-val\n        ([] (println \"No Parameter\"))\n        ([a] a)\n        ([a b] (if (> a b) a b))\n        ([a b c] (cond\n                  (and (> a b) (> a c)) a\n                  (> b c) b\n                  :else c))\n        ([a b c d] (cond\n                    (and (> a b) (> a c) (> a d)) a\n                    (and (> b c) (> b d)) b\n                    (> c d) c\n                    :else d)))", "problem": 38, "user": "520332f7e4b030ee0c5b2714"}, {"code": "(fn [& params] (reduce (fn [mx x] (if (> x mx) x mx)) params))", "problem": 38, "user": "51e61772e4b0efabf93c02e2"}, {"code": "(fn [x & more]\n  ((fn impl [xs r]\n    (if (nil? xs)\n      r\n      (if (< r (first xs))\n        (impl (next xs) (first xs))\n        (impl (next xs) r))))\n   (cons x more) 0))", "problem": 38, "user": "521392bce4b0d32679a5065e"}, {"code": "(fn foo [& args]\n  (if (= 1 (count args))\n    (first args)\n    (let [max-of-rest (apply foo (rest args))]\n    (if (> (first args) max-of-rest)\n      (first args)\n      max-of-rest)\n      )\n    )\n  )", "problem": 38, "user": "5213ffd3e4b0961f15ac4d7d"}, {"code": "(fn [x & other] (reduce #(if (> %1 %2) %1 %2) x other))", "problem": 38, "user": "51f62d89e4b06ff1c25c52bc"}, {"code": "(comp last sort list)", "problem": 38, "user": "5201572be4b0d7096e99ddbb"}, {"code": "(fn [& xs] (first (sort > xs)))", "problem": 38, "user": "52129363e4b0d32679a50640"}, {"code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "52098111e4b0e152394d76f5"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "5211d195e4b07aea8afc4f76"}, {"code": "#((comp last sort) %&)", "problem": 38, "user": "5213dbc3e4b0961f15ac4d74"}, {"code": "(fn [& more] (first (sort > more)))", "problem": 38, "user": "511179a2e4b03f43822243d0"}, {"code": "#(reduce (fn [a b] (if (> a b) a b)) % %&)", "problem": 38, "user": "52154514e4b02f6d8ea676c0"}, {"code": "(fn [& params] \n  (reduce #(if (> %1 %2) %1 %2) params))", "problem": 38, "user": "5131d817e4b06942423563ca"}, {"code": "(fn [& nums]\n  (reduce #(if (> %1 %2) %1 %2)\n          (first nums)\n          (rest nums)))", "problem": 38, "user": "521672bde4b0bf4bffd29cc8"}, {"code": "#(reduce (fn [mx el] (if (> el mx) el mx)) Double/MIN_VALUE %&)", "problem": 38, "user": "51f9527fe4b09be9c177e549"}, {"code": "(fn [& args] (reduce #(if (> %2 %) %2 %) args))", "problem": 38, "user": "520242bae4b030ee0c5b26e3"}, {"code": "(fn my-max ([x] x) ([x y] (if(> x y) x y)) ([x y & more] (reduce my-max (my-max x y) more)))", "problem": 38, "user": "52117ea7e4b07aea8afc4f70"}, {"code": "(comp last sort vector)", "problem": 38, "user": "52173464e4b082aa80a88c75"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "51f687c2e4b06ff1c25c52cb"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "problem": 38, "user": "51fc44c5e4b0f1313d468a1b"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "5216933be4b000d124d989cf"}, {"code": "(fn mx\n  ([x] x)\n  ([x y] (cond (> x y) x\n               :else y))\n  ([x y & others] (cond (> x y) (apply mx `[~x ~@others])\n                        :else   (apply mx `[~y ~@others]))))", "problem": 38, "user": "52153bdde4b0961f15ac4daa"}, {"code": "(fn [x & y] (reduce #(if (> %1 %2) %1 %2) x y))", "problem": 38, "user": "52196842e4b0890f2f822bfa"}, {"code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) s))", "problem": 38, "user": "52160dbee4b0bf4bffd29cb3"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) (flatten (cons x xs))))", "problem": 38, "user": "520f2265e4b0101e4be6fce7"}, {"code": "(fn mx\n  ([y] y)\n  ([x & r]\n    (if (> x (first r))\n      (apply mx x (rest r))\n      (apply mx r))))", "problem": 38, "user": "5219e575e4b0c4ef0be82ffd"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "52105865e4b080a8d9b9d639"}, {"code": "(fn [& args] (reduce (fn [x y] (if (>= x y) x y)) args))", "problem": 38, "user": "5213348ae4b0d32679a50652"}, {"code": "(fn hand-max\n    ([x] x)\n    ([x & more] (reduce #(if (> %1 %2) %1 %2) x more)))", "problem": 38, "user": "521249f5e4b06aa6d1666ba2"}, {"code": "(partial \n  (fn mymax [cur-max & ls]\n    (if (empty? ls)\n      cur-max\n      (let [v (first ls)\n            r (rest ls)]\n\t    (apply mymax (cons (if (> v cur-max)\n                             v\n                             cur-max) r)))))\n -10000)", "problem": 38, "user": "521a4ff5e4b0c4ef0be83004"}, {"code": "(fn [& xs]\n  (reduce (fn [x y] (if (> x y) x y)) xs))", "problem": 38, "user": "52199105e4b0c4ef0be82ff9"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "4e7e8ea5535db169f9c79719"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "51e924d2e4b0f1f103a0d13a"}, {"code": "(fn [& d] (last (sort d)))", "problem": 38, "user": "51a058dae4b0b292b01ee3f3"}, {"code": "(fn [& xs]\n  (reduce #(if (>= % %2) % %2) xs))", "problem": 38, "user": "521679e9e4b0bf4bffd29cca"}, {"code": "(fn myMax [& inXs] (loop [mx 0, f (first inXs), xs (rest inXs)]\n                         (let [best (if (> mx f) mx f)]\n                              (if (empty? xs) best\n                                              (recur best (first xs) (rest xs))))))", "problem": 38, "user": "52161db6e4b0bf4bffd29cb8"}, {"code": "(fn [& p] (reduce #(if (> %1 %2) %1 %2) Integer/MIN_VALUE p))", "problem": 38, "user": "5092425ee4b09a7d0b586de4"}, {"code": "(comp last sort list)", "problem": 38, "user": "521c6a1ae4b0c4ef0be83083"}, {"code": "(fn [& nums] (reduce #(if (> %1 %2) %1 %2) nums))", "problem": 38, "user": "510ee996e4b07438aa321462"}, {"code": "(fn mmax [& args]\n  (last (sort args)))", "problem": 38, "user": "521bf7cfe4b0c4ef0be83066"}, {"code": "(fn [& coll]\n  (reduce #(if (< %1 %2) %2 %1) coll))", "problem": 38, "user": "5213d7aae4b0961f15ac4d72"}, {"code": "(fn [& args](reduce (fn[r x](if (> r x) r x)) 0 args)  )", "problem": 38, "user": "51f79238e4b06ff1c25c52d7"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "520693e1e4b0bf4f1882c829"}, {"code": "(fn kuku\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n   (reduce kuku (kuku x y) more)))", "problem": 38, "user": "5210e5c5e4b080a8d9b9d63f"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "problem": 38, "user": "521e1174e4b0dd19981ad06d"}, {"code": "(fn [ & a] (reduce #(if (< %1 %2) %2 %1) a))", "problem": 38, "user": "4e836a06535db62dc21a62d5"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "521dceeae4b050d5da042802"}, {"code": "(fn m\n  ([a] a)\n  ([a & more] (let [b (apply m more)]\n                (if (> a b)\n                  a\n                  b))))", "problem": 38, "user": "521b9f92e4b0c4ef0be8304c"}, {"code": "(fn [& a] (last (sort a)))", "problem": 38, "user": "520cb8c4e4b0b022ef140c9a"}, {"code": "(fn m [x & xs]\n  (if (empty? xs)\n    x\n    (let\n      [y (apply m xs)]\n      (if (> x y) x y))))", "problem": 38, "user": "521b73f5e4b0c4ef0be83043"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "521e8227e4b0dd19981ad082"}, {"code": "(fn [& xs](reduce #(if (> %2 %1) %2 %1) xs))", "problem": 38, "user": "521e4f22e4b0dd19981ad079"}, {"code": "(fn [& xs]\n  (loop [[x & xs] xs mx 0]\n    (if-not x\n      mx\n      (recur xs (if (>= mx x) mx x)))))", "problem": 38, "user": "50c113bee4b096f585049c37"}, {"code": "(comp last sort list)", "problem": 38, "user": "520f46f9e4b0101e4be6fcee"}, {"code": "(fn [& list]\n  (if (= (count list) 1)\n    (first list)\n    (if (> (first list) (second list))\n      (recur (cons (first list) (nthrest list 2)))\n      (recur (rest list)))))", "problem": 38, "user": "4feded14e4b0d2a5fc2962ec"}, {"code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) s))", "problem": 38, "user": "5220bc0fe4b0e6a83c8925a7"}, {"code": "(fn foo [& args]\n  (let [x (first args)\n        others (filter #(> % x) (rest args))]\n    (if (empty? others)\n      x\n      (apply foo (rest args)))))", "problem": 38, "user": "5220a770e4b0e6a83c8925a3"}, {"code": "(fn [& x]\n  (last (sort x)))", "problem": 38, "user": "51b74a33e4b0d906fcd71d34"}, {"code": "(fn [& args] \n  (reduce (fn maxim [x y] \n         \t(if (> x y)\n           \t  x\n              y))\n          (vec args)))", "problem": 38, "user": "522048b3e4b0e6c71e0c0c16"}, {"code": "(fn [& a] \n  (reduce \n   (fn [x y] (if (< x y) y x))\n   a))", "problem": 38, "user": "52218b29e4b0e6a83c8925da"}, {"code": "(fn [& xs]\n  (reduce #(if (> % %2) % %2) xs))", "problem": 38, "user": "5222000ce4b0e6a83c8925ea"}, {"code": "(fn [& s]\n  (last (sort s)))", "problem": 38, "user": "51b965dde4b0e871ca495905"}, {"code": "(fn [& rest] (reduce (fn [a b] (if (> a b) a b)) rest))", "problem": 38, "user": "52221b07e4b0e6a83c8925ef"}, {"code": "(fn [& params] (reduce (fn [a b] (if (< a b) b a)) params))", "problem": 38, "user": "52213426e4b0e6a83c8925c4"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "51787832e4b03d69594194d3"}, {"code": "(fn [& more]\n  (reduce (fn [a b] (if (> a b) a b)) more))", "problem": 38, "user": "52225315e4b0e6a83c8925f9"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "5210ac52e4b080a8d9b9d63e"}, {"code": "#(last (sort %&))", "problem": 38, "user": "51e6a311e4b0ab43cc26c21e"}, {"code": "#(reduce (fn [a b](if (> a b) a b )) %&)", "problem": 38, "user": "5224a46ce4b01819a2de42e5"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "5144e4c1e4b021a5ff8301f8"}, {"code": "(fn my-max [& args]  \n  (reduce (fn [a b] (if (> a b) a b)) (first args) args)\n)", "problem": 38, "user": "4fb710f4e4b081705acca2cd"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "4daec4a0edd6309eace4d15e"}, {"code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) args))", "problem": 38, "user": "521b339fe4b0c4ef0be83031"}, {"code": "(fn\n ^{:doc \"mymax [xs+] gets the maximum value in xs using > \"\n   :test (fn []\n             (assert (= 42  (mymax 2 42 5 4))))\n   :user/comment \"this is the best fn ever!\"}\n  mymax\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n   (reduce mymax (mymax x y) more)))", "problem": 38, "user": "5220ae16e4b0e6a83c8925a4"}, {"code": "(fn [& x]\n  (let [select-max #(if (> %1 %2) %1 %2)]\n  (reduce select-max (first x) (rest x))))", "problem": 38, "user": "52244a77e4b01819a2de42d1"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "51ecb0fee4b0bb5070431583"}, {"code": "(fn [& params]\n  (reduce (fn [x y] (if (> x y) x y)) params))", "problem": 38, "user": "5225666be4b01819a2de4300"}, {"code": "(fn [c & x]\n  (loop [input x\n         cur c\n         mx 0\n         iter 0]\n    (if (= cur nil)\n      mx\n      (if (> cur mx)\n        (let [[c2 & x2] input]\n          (recur x2 c2 cur (inc iter)))\n        (let [[c2 & x2] input]\n          (recur x2 c2 mx (inc iter)))\n        )\n      )\n  )\n)", "problem": 38, "user": "52271091e4b04e78ff2e19a1"}, {"code": "(fn [& l] (last(sort l)))", "problem": 38, "user": "5226f9b8e4b04e78ff2e199b"}, {"code": "(fn [& a] (last (into (sorted-set) a)))", "problem": 38, "user": "5167e4a2e4b0c5a4140a3099"}, {"code": "(fn[& eles] (first ( reverse ( sort eles))))", "problem": 38, "user": "4fb7dfe3e4b081705acca2d5"}, {"code": "(fn [& x] (reduce #(if (< %1 %2 ) %2 %1) x))", "problem": 38, "user": "5220909fe4b0e6a83c89259f"}, {"code": "(fn [& args] (first (reverse (sort args))))", "problem": 38, "user": "522600cfe4b0f4c7e20d29c8"}, {"code": "(fn [& args] (reduce #(if (> % %2) % %2) args))", "problem": 38, "user": "51e0204fe4b01188f062753a"}, {"code": "(fn [& args]\n  (let [my-max (fn [a b] (if (> a b) a b))] \n  (reduce my-max args)))", "problem": 38, "user": "5225a0f5e4b01819a2de430e"}, {"code": "(fn [& arr] (reduce (fn [a b] (if (> a b) a b)) arr))", "problem": 38, "user": "512e74c0e4b0b740abc59827"}, {"code": "(fn [& args] ((comp last sort) args))", "problem": 38, "user": "522635c0e4b06a1ecd0c4e7e"}, {"code": "(fn [& args] (reduce (fn [acc x] \n                       (if (> x acc) \n                         x \n                         acc)) args))", "problem": 38, "user": "51ef31dfe4b0871fa145d9a0"}, {"code": "(fn [& args] (reduce #(if (> % %2) % %2) args))", "problem": 38, "user": "52253004e4b01819a2de42fa"}, {"code": "(fn [& coll] (reduce #(if (> % %2) % %2) coll))", "problem": 38, "user": "522454f4e4b01819a2de42d3"}, {"code": "(fn maxi[& nums] \n   (loop [r nums m 0]\n       (if (empty? r)\n         m\n         (let [x (first r)]\n             (recur (rest r) (if (> m x) m x))))))", "problem": 38, "user": "51843616e4b02826a645f398"}, {"code": "(fn maxx\n  ([a] a)\n  ([a b] (if (> a b) a b))\n  ([a b & more] (apply maxx (maxx a b) more)))", "problem": 38, "user": "519c47abe4b0a1d87b00345a"}, {"code": "(fn [& nums] (reduce #(if (> %1 %2) %1 %2) 0 nums))", "problem": 38, "user": "4f9aa75ee4b0dcca54ed6d0d"}, {"code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "52277ab9e4b0186687e23a4f"}, {"code": "(fn [& x] (reduce #(if (> % %2) % %2) x))", "problem": 38, "user": "4ff9a200e4b0678c553fc3ab"}, {"code": "(fn [a & rst]\n (reduce (fn[a b]\n           (if (> a b)\n             a\n             b\n           )\n         )\n     a rst)\n  )", "problem": 38, "user": "5228f870e4b0186687e23a98"}, {"code": "#(reduce (fn [x y]\n           (if (< x y) y x))\n         %&)\n#_(fn [f & r]\n  (loop [f f\n         r r]\n    (if (empty? r)\n      f\n      (recur (if (< f \n                    (first r))\n               (first r)\n               f)\n             (rest r)))))", "problem": 38, "user": "51e5a627e4b0efabf93c02db"}, {"code": "(fn bla [ & v ]\n  (reduce #(if (> %1 %2) %1 %2) 0 v)\n  \n  \n  )", "problem": 38, "user": "522724bde4b04e78ff2e19aa"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "5125029de4b0ce9225d2ed3e"}, {"code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "522b922ee4b0d34ee08e71c3"}, {"code": "#(last (sort %&))", "problem": 38, "user": "510d59cce4b078ea71921134"}, {"code": "(fn [& args] (reduce #(if (> % %2) % %2) args))", "problem": 38, "user": "51d872dde4b0154f82ab930e"}, {"code": "(fn [x & y] (reduce #(if (> %1 %2) %1 %2) (conj y x)))", "problem": 38, "user": "522404d8e4b01819a2de42c0"}, {"code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) args))", "problem": 38, "user": "522d0360e4b0806774ddfef7"}, {"code": "(fn my-max [x & xs]\n  (let [y (first xs)]\n    (cond \n     (nil? y) x\n     (> x y) x\n     :else (apply my-max xs)\n      )))", "problem": 38, "user": "52127ee4e4b0d32679a5063c"}, {"code": "(fn mx\n  ([x] x)\n  ([x & more]\n     (if (> x (first more))\n       (apply mx (cons x (rest more)))\n       (apply mx more))\n     ))", "problem": 38, "user": "522afe78e4b0d34ee08e71b3"}, {"code": "(fn [& y] (reduce #(if (< %1 %2) %2 %1) 0 y))", "problem": 38, "user": "522eb5cce4b01cdb292c5f0c"}, {"code": "(fn [ & args ] (reduce (fn [x y] (if (< x y) y x)) args))", "problem": 38, "user": "522dd30ee4b0a102974208c3"}, {"code": "(fn [& coll]\n    (reduce \n     (fn [a b] (if (> a b) a b)) \n     coll))", "problem": 38, "user": "522e6c01e4b01cdb292c5f01"}, {"code": "(fn [& args] \n  (reduce (fn [a, b] (if (< a b) b a)) args))", "problem": 38, "user": "522a1248e4b0590a43906cf3"}, {"code": "(fn [& values] (last (sort values)))", "problem": 38, "user": "522d3a16e4b0e26240291d50"}, {"code": "(fn [& rest] (reduce #(if (< % %2) %2 %) rest))", "problem": 38, "user": "4ed2a92b535d44c135fd68dc"}, {"code": "(fn [& xs] (reduce (fn [x y] (if (> x y) x y) ) xs ) )", "problem": 38, "user": "510591dde4b06d28cacc92eb"}, {"code": "(fn [& coll] \n   (loop [result 0  c coll] \n      (if (nil? c) \n         result\n         (recur (if (> (first c) result) (first c) result ) (next c)))))", "problem": 38, "user": "522eba30e4b01cdb292c5f0e"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "5230d9bde4b0035e815da397"}, {"code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "problem": 38, "user": "523089f8e4b0035e815da388"}, {"code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "51aa2b4fe4b04e3dc0c27b21"}, {"code": "(fn [xs & rest] (reduce (fn [x y] (if (< x y) y x)) xs rest))", "problem": 38, "user": "52319066e4b0e2e8de81d1e9"}, {"code": "#(loop[l %& maxval 0] (if (empty? l) maxval (recur (rest l) (cond (> (first l) maxval) (first l) :else maxval))))", "problem": 38, "user": "522f988be4b032bbe3424168"}, {"code": "#(first (sort > %&))", "problem": 38, "user": "5229211be4b04c906c9c6a63"}, {"code": "(fn [firstn secondn & args] \n  (if (= 0 (count args))\n    (if (> firstn secondn)\n      firstn\n      secondn)\n  (if (> firstn secondn)\n                            (recur firstn (first args) (rest args))\n                              (recur secondn (first args) (rest args)))))", "problem": 38, "user": "52323a4ae4b035af41902a79"}, {"code": "(fn [& input]\n    (reduce (fn [curr_max i]\n                (if (> i curr_max)\n                    i\n                    curr_max))\n            (first input)\n            input))", "problem": 38, "user": "5232d104e4b035af41902a96"}, {"code": "#(last (sort %&))", "problem": 38, "user": "508923d5e4b06d8254e936e8"}, {"code": "(fn [ & args ] (reduce (fn [ a b ] (if (> a b) a b)) args))", "problem": 38, "user": "52286b19e4b0186687e23a7e"}, {"code": "#(last (sort %&))", "problem": 38, "user": "522fdff7e4b032bbe342416c"}, {"code": "(comp last sort list)", "problem": 38, "user": "514fd753e4b0b449e54b8e00"}, {"code": "(fn [& x]\n   (reduce #(if (>= %1 %2) %1 %2) x)\n   )", "problem": 38, "user": "5225eae3e4b0f4c7e20d29c4"}, {"code": "(fn [& more] (reduce #(if (> % %2) % %2) 0 more))", "problem": 38, "user": "52299d14e4b04c906c9c6a7e"}, {"code": "(fn [& l] (reduce #(if (> % %2) % %2) l))", "problem": 38, "user": "52318843e4b0e2e8de81d1e8"}, {"code": "(fn [& el] (reduce (fn [x y] (if (<= x y) y x)) el))", "problem": 38, "user": "5233ad08e4b07e3ee2be83ac"}, {"code": "(fn [& args] (last (sort (seq args))))", "problem": 38, "user": "5232d047e4b035af41902a95"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "52101fcde4b080a8d9b9d635"}, {"code": "(fn [a & bcdetc]\n  (reduce (fn [x y] (if (> x y) x y)) a bcdetc))", "problem": 38, "user": "5235493ee4b05e80434a5064"}, {"code": "(fn [& xs]\n  (reduce (fn [a b] (if (> a b) a b)) xs))", "problem": 38, "user": "523361d8e4b0f0b72fabf405"}, {"code": "#(last (sort %&))", "problem": 38, "user": "5234f716e4b05e80434a505f"}, {"code": "(fn [& y] (first (sort >  y)))", "problem": 38, "user": "5231d8fae4b0e2e8de81d1fb"}, {"code": "(fn my-max [& l]\n  (loop [candidate (first l) \n         coll l]\n    (if (empty? coll)\n        candidate\n        (if (< (first coll) candidate)\n\t\t    (recur candidate (rest coll))\n            (recur (first coll) (rest coll))))))", "problem": 38, "user": "508fd6bae4b0ea685a20f76b"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "52379c46e4b0fae3832e99db"}, {"code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) coll))", "problem": 38, "user": "516abecae4b081287f204e9f"}, {"code": "(fn lmax\n\t([x y] (if (> x y) x y))\n  \t([x y & more] (reduce lmax (lmax x y) more))\n)", "problem": 38, "user": "52373f36e4b0477af6280328"}, {"code": "(fn [& args]\n  (reduce\n   #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "523353a7e4b0f0b72fabf402"}, {"code": "(fn [ x & xs ] (reduce #(if (< %1 %2) %2 %1 ) x xs))", "problem": 38, "user": "4fa03445e4b0dcca54ed6d45"}, {"code": "(fn [& x]\n  (reduce #(if (> %1 %2) %1 %2)\n          x))", "problem": 38, "user": "52381b2ae4b0fae3832e99ef"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "52394c03e4b0d705d026ef09"}, {"code": "(fn [& x] (reduce #(if (> %2 %1) %2 %1) x))", "problem": 38, "user": "5235a902e4b0a643f2dcb750"}, {"code": "#( reduce (fn [x1 x2] (if (> x1 x2) x1 x2 )) %&)", "problem": 38, "user": "5239f439e4b0d705d026ef36"}, {"code": "(fn [& more] (last (sort more)))", "problem": 38, "user": "5213d81de4b0961f15ac4d73"}, {"code": "#(last (sort %&))", "problem": 38, "user": "52393e16e4b0d705d026ef06"}, {"code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) (vec more)))", "problem": 38, "user": "50be9b4ae4b00fb48fed2ef6"}, {"code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "4f43894ee4b0d7d3c9f3fd21"}, {"code": "(fn m [& more] (if (seq (rest more)) (if (> (first more) (apply m (rest more))) (first more) (apply m (rest more))) (first more)))", "problem": 38, "user": "522a01ade4b0590a43906ced"}, {"code": "(fn [& args]\n  (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "50fc48dde4b0d10d794c19f6"}, {"code": "(comp first reverse sort list)", "problem": 38, "user": "523a657be4b081681ca7adc1"}, {"code": "(fn\n   ([] nil)\n   ([& nums]\n     (reduce #(if (> %2 %) %2 %) 0 nums)))", "problem": 38, "user": "523bd9c0e4b07becd5be2201"}, {"code": "(fn [& l] (reduce #(if (< %2 %) % %2) l))", "problem": 38, "user": "523b10dfe4b02f719975bdb8"}, {"code": "(fn [& s]\n  (reduce #(if (> %1 %2) %1 %2) s))", "problem": 38, "user": "5236b6bce4b05f3be1c7c8fe"}, {"code": "(fn c-max [& xs]\n  (reduce #(if (> %1 %2) %1 %2) 0 xs))", "problem": 38, "user": "523b82efe4b07becd5be21f0"}, {"code": "(fn [& args]\n  (last (sort args)))", "problem": 38, "user": "523b4e91e4b07becd5be21ef"}, {"code": "(fn mx [& args] \n  (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "5239caa6e4b0d705d026ef27"}, {"code": "(fn [& args] (reduce (fn [acc elem] (if (< acc elem ) elem acc)) 0 args))", "problem": 38, "user": "523a9fc9e4b081681ca7adca"}, {"code": "(fn [a & aa]\n  (reduce (fn [b c] (if (< b c) c b)) a aa))", "problem": 38, "user": "4fec550de4b0681fd128dca6"}, {"code": "(fn [& args] (reduce (fn [m n] (if (> m n) m n)) args))", "problem": 38, "user": "5201ada5e4b0b2e020a18f14"}, {"code": "(fn [& args] (reduce (fn [x, y] (if (> x y) x y)) args))", "problem": 38, "user": "5220ef05e4b0e6a83c8925b8"}, {"code": "(fn [& vlist]\n  (loop [vlist vlist\n         biggest nil]\n    (if (empty? vlist)\n      biggest\n      (if (or (nil? biggest) (> (first vlist) biggest))\n        (recur (rest vlist) (first vlist))\n        (recur (rest vlist) biggest)))))", "problem": 38, "user": "523288fee4b035af41902a88"}, {"code": "(fn [& l] (reduce (fn [curr v] (if (> v curr) v curr)) (first l) (rest l)))", "problem": 38, "user": "523dd963e4b06956f8342ca1"}, {"code": "(comp (partial reduce #(if (> % %2) % %2)) list)", "problem": 38, "user": "523d02b0e4b0dbf0c3017289"}, {"code": "(fn  [& args] (loop [a (rest args) m (first args)]\n                 (if (= 0 (count a))\n                   (identity m)\n                 (recur (rest a)\n                        (if (> m (first a)) (identity m) (first a))))))", "problem": 38, "user": "52166e50e4b0bf4bffd29cc6"}, {"code": "#(-> %& sort last)", "problem": 38, "user": "52271ffee4b04e78ff2e19a9"}, {"code": "(fn [& numbers](reduce (fn [a b] (if (> a b) a b)) numbers))", "problem": 38, "user": "523b1988e4b02f719975bdbc"}, {"code": "(fn [& coll]\n  (reduce (fn [x y] (if (> x y) x y)) coll))", "problem": 38, "user": "523605d1e4b05f3be1c7c8e2"}, {"code": "(fn [& x] \n  (if (empty? x) nil\n    (loop [s x r (first x)]\n      (if (empty? s) r\n        (if (> r (first s))\n          (recur (rest s) r)\n          (recur (rest s) (first s)))))))", "problem": 38, "user": "523bc0e6e4b07becd5be21f9"}, {"code": "(fn f [& list0]\n  (loop [l list0 ans nil]\n    (if (empty? l)\n      ans\n      (recur (rest l) (if (or (nil? ans) (> (first l) ans)) (first l) ans))\n    )\n  )\n)", "problem": 38, "user": "51f09f3de4b0274c496158d7"}, {"code": "(fn my-max [& more] (reduce (fn [x y] (if (< x y) y x)) more))", "problem": 38, "user": "523f0bbfe4b01c266ffa7f91"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "52278a79e4b0186687e23a51"}, {"code": "(fn [& arguments] (reduce (fn [x, y] (if (> x y) x y)) arguments))", "problem": 38, "user": "4f03641a535dcb61093f6a9b"}, {"code": "(fn f \n  [ & x]\n  (reduce #(if (< %1 %2) %2 %1)\n          (first x) x))", "problem": 38, "user": "50aa60bee4b056ee01935865"}, {"code": "(fn [& lst] (last (sort lst)))", "problem": 38, "user": "5240512ee4b0ad64fa010319"}, {"code": "(fn [& args] (- 0 (apply min (for [n args] (- 0 n)))))", "problem": 38, "user": "5238ca2de4b0d705d026eef6"}, {"code": "(fn [& all]\n  (reduce #(if (> %1 %2) %1 %2) 0  all)\n  )", "problem": 38, "user": "524025bce4b0ad64fa01030f"}, {"code": "(fn ([& nums] (reduce (fn [x y] (if (> x y) x y)) nums)))", "problem": 38, "user": "51269362e4b083bb8f88cf09"}, {"code": "(fn [& args]\n  (last (sort args)))", "problem": 38, "user": "511e763ce4b03e81d390ac29"}, {"code": "(fn [& args]\n  (reduce (fn [maximum _]\n           (if (< maximum _)\n             _\n             maximum))\n         args))", "problem": 38, "user": "51cd75d6e4b02254fc79488c"}, {"code": "(comp last sort list)", "problem": 38, "user": "51a82498e4b08d8ec191b80b"}, {"code": "(fn [& args]\n\t(reduce #(if (> %1 %2) %1 %2) args)\n)", "problem": 38, "user": "52382d91e4b0fae3832e99f0"}, {"code": "(fn [& more] ( last (sort (seq more))))", "problem": 38, "user": "515919fbe4b0394f658fe229"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "4fb1a4e4e4b081705acca27e"}, {"code": "(fn f ([x] x) \n\t  ([x y] (if (> x y) x y))\n\t  ([x y & t] (reduce f (f x y) t)))", "problem": 38, "user": "5241ea66e4b076e5d3121f39"}, {"code": "(fn [& args]\n  (letfn [(my-max [a b] (if (< a b) b a))]\n    (reduce my-max (first args) (rest args))))", "problem": 38, "user": "523c6451e4b07becd5be2222"}, {"code": "(fn [& xs] (reduce #(if (> % %2) % %2) xs))", "problem": 38, "user": "523ed522e4b057c4b7cd0a78"}, {"code": "(fn [x & y] (last (sort (flatten [[x] [y]]))))", "problem": 38, "user": "5242d5c3e4b076204b44fa95"}, {"code": "(fn [& args]\n  (reduce (fn [el elm]\n            (if (> el elm)\n              el\n              elm))\n           args))", "problem": 38, "user": "518d1b5be4b070277754617b"}, {"code": "(fn [& c] ((comp first reverse sort) c))", "problem": 38, "user": "5230793be4b0035e815da383"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "5241fe85e4b076e5d3121f42"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "52438805e4b076204b44fac4"}, {"code": "(fn [x & items] (loop [maxi x lst items]\n                (cond\n                 (empty? lst) maxi\n                 (> (first lst) maxi) (recur (first lst) (rest lst))\n                 :else (recur maxi (rest lst))\n                 )\n                )\n  )", "problem": 38, "user": "522f39a8e4b032bbe3424159"}, {"code": "(fn [& x]\n  (reduce #(if (> %1 %2) %1 %2) x)\n)", "problem": 38, "user": "500c5b4ae4b03d00572d2d88"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "5241eb78e4b076e5d3121f3a"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "52437703e4b076204b44fabf"}, {"code": "(fn [& args] (reduce (fn [m, el] (if (> el m) (do el) m)) 0 (vec args)))", "problem": 38, "user": "5243d9a2e4b076204b44fadf"}, {"code": "(fn [& xs] (last (sort xs)))", "problem": 38, "user": "506929ffe4b01dc6af13f82b"}, {"code": "(fn [& v]\n  (reduce (fn [m i](if (< m i) i m))\n    (first v)(rest v)))", "problem": 38, "user": "5141a8f2e4b02fd87f5064c1"}, {"code": "(fn [& l] (reduce (fn [r i] (if (> i r) i r)) l))", "problem": 38, "user": "523f5be3e4b01c266ffa7fa7"}, {"code": "#(reduce (fn [x y] (if (> x y) x y)) %&)", "problem": 38, "user": "51b0e7b3e4b0c53cf2e68a6e"}, {"code": "(fn [& ns] (reduce (fn [acc n] (if (> acc n) acc n)) ns))", "problem": 38, "user": "51cfc616e4b0e42293a22578"}, {"code": "(fn my-max\n  ([x y]\n   (if (> x y)\n     x\n     y))\n  ([x y & more]\n   (reduce my-max (my-max x y) more)))", "problem": 38, "user": "4ff58b05e4b0678c553fc36b"}, {"code": "(fn [& l] (reduce (fn [a b] (if (> a b) a b)) l))", "problem": 38, "user": "5245f167e4b09dbe66b5617e"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "52474de3e4b05ef8e38e6360"}, {"code": "(fn [& args]\n  (first\n   (filter\n    (fn [item]\n      (not (some (partial < item) args)))\n    args)))", "problem": 38, "user": "5245fbbbe4b09dbe66b56183"}, {"code": "(fn [& xs]\n  (last (sort xs)))", "problem": 38, "user": "52479487e4b05ef8e38e6373"}, {"code": "(fn my-max [& args] (reduce (fn [l r] (if (>= l r) l r)) args))", "problem": 38, "user": "51f67858e4b06ff1c25c52c5"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "52487654e4b05ef8e38e63dc"}, {"code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "problem": 38, "user": "522f483ce4b032bbe342415a"}, {"code": "(fn [& xs]\n  (reduce #(if (> % %2) % %2) xs))", "problem": 38, "user": "52471ac0e4b05ef8e38e6354"}, {"code": "(fn [& more] (last (sort more)))", "problem": 38, "user": "5245af03e4b08ba239308124"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "52488a46e4b05ef8e38e63e0"}, {"code": "#(->> %& (reduce (fn [x y] (if (< x y) y x))))", "problem": 38, "user": "5246e945e4b0644eb7b0783b"}, {"code": "(comp last sort list)", "problem": 38, "user": "523b1a65e4b02f719975bdbd"}, {"code": "(fn [& args] \n  (reduce \n   \t#(if (> %1 %2) %1 %2) \n   \targs))", "problem": 38, "user": "523de50de4b06956f8342ca9"}, {"code": "(fn ! [& x]\n   (loop [cm 0 l x]\n     (cond\n      (= 0 (count l)) cm\n      (> cm (first l)) (recur cm (rest l))\n      :else (recur (first l) (rest l)))))", "problem": 38, "user": "523eb110e4b057c4b7cd0a67"}, {"code": "(fn [h & t] (reduce #(if (> %1 %2) %1 %2 ) (conj t h)))", "problem": 38, "user": "52485723e4b05ef8e38e63d2"}, {"code": "(fn [& nums]\n    (reduce (fn [x y]\n                (if (> x y) x y))\n            nums))", "problem": 38, "user": "5248c4c7e4b05ef8e38e63e8"}, {"code": "(fn [& args ] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "524a905ce4b05ef8e38e64b0"}, {"code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "problem": 38, "user": "52293c65e4b04c906c9c6a69"}, {"code": "(fn custom-max [& args]\n  (loop [current (first args) inputs (rest args)]\n    (if (= (first inputs) nil)\n        current\n      (recur (if (> (first inputs) current) (first inputs) current )\n             (rest inputs)))))", "problem": 38, "user": "52463059e4b09dbe66b56198"}, {"code": "(fn [x & more] (reduce #(if(> %1 %2) %1 %2) x more))", "problem": 38, "user": "514daf79e4b019235f6c058b"}, {"code": "(fn [& x] ((fn maksimi [currMax lista] (if (empty? lista) currMax\n(maksimi (if (> (first lista) currMax) (first lista) currMax) (rest\nlista)))) -1 x))", "problem": 38, "user": "52474ec2e4b05ef8e38e6361"}, {"code": "(fn [& xs] (last (apply sorted-set xs)))", "problem": 38, "user": "51f66891e4b06ff1c25c52c1"}, {"code": "(fn [& args] \n  (last (sort args)))", "problem": 38, "user": "5236cd89e4b0e010857b4e45"}, {"code": "(fn [& all] (reduce (fn [x y] (if (> x y) x y)) all))", "problem": 38, "user": "524cdd51e4b0752c4cb68ccc"}, {"code": "(fn [& n] (-> n sort last))", "problem": 38, "user": "524be8e0e4b09eba1c0223f1"}, {"code": "(fn [& xs]\n  (reduce #(if (< %1 %2) %2 %1) xs))", "problem": 38, "user": "523ab749e4b0aa37f082ed8d"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "51d7f34fe4b0154f82ab9303"}, {"code": "(fn [& atributes] (reduce #(if(> %1 %2) %1 %2) atributes))", "problem": 38, "user": "4eb2f89a535d7eef30807353"}, {"code": "(fn get-max [& seq]\n  (first (reverse (sort seq)))\n  )", "problem": 38, "user": "511d4a52e4b022853b0e07a1"}, {"code": "(fn fun12 [& args]\n  (last (sort args)\n    )\n)", "problem": 38, "user": "52132f8de4b0d32679a50651"}, {"code": "(fn [& s] (reduce #(if (> % %2) % %2) s))", "problem": 38, "user": "524f61bee4b0541d1855b80f"}, {"code": "(fn [& c] (last (sort c)))", "problem": 38, "user": "51618519e4b009fba0926e35"}, {"code": "(fn [& args]\n  (loop [[current & rest] args result current]\n    (if current\n      (recur rest (if (> current result) current result))\n    result)))", "problem": 38, "user": "4f171e7d535d64f603146452"}, {"code": "(fn my-max [& seq] (reduce #(if (> %1 %2) %1 %2) seq))", "problem": 38, "user": "524eebb0e4b0541d1855b7f7"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ))", "problem": 38, "user": "524dd1c3e4b0f245900d275c"}, {"code": "(fn find-max [x & more]\n  (loop [max_element x y more]\n    (if (empty? y) max_element\n        (recur (if (< max_element (first y)) (first y) max_element) (rest y)))))", "problem": 38, "user": "524a74b3e4b05ef8e38e64a7"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "524ea587e4b0541d1855b7e9"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "524feb3fe4b0541d1855b81f"}, {"code": "(fn [& x]\n  (reduce #(if (< %1 %2) %2 %1) x))", "problem": 38, "user": "5243e37ae4b076204b44fae3"}, {"code": "(fn [x & coll] \n  (reduce #(if (> %1 %2) %1 %2) x coll))", "problem": 38, "user": "525078b6e4b0541d1855b832"}, {"code": "(fn [& args]\n\t(reduce\n\t\t#(if (> %1 %2) %1 %2)\n\t\targs))", "problem": 38, "user": "524e79c1e4b0541d1855b7e0"}, {"code": "(fn [a b & coll] (let [gt (fn [a b] (if (> a b) a b))]\n  (if (> a b)\n    (reduce gt (cons a coll))\n    (reduce gt (cons b coll)))))", "problem": 38, "user": "524ae8e6e4b09eba1c0223b5"}, {"code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "508dc047e4b0f17d83ea26c3"}, {"code": "(fn [& coll]\n  (loop [col coll max-value 0 current 0]\n    (if (nil? (first col)) \n      (if(>= current max-value) current max-value)\n      (recur (rest col) (if (>= current max-value) current max-value) (first col)))))", "problem": 38, "user": "524d2a98e4b0752c4cb68cd8"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "problem": 38, "user": "524fafb3e4b0541d1855b817"}, {"code": "(fn [& xs] (reduce #(if (> % %2) % %2) 0 xs))", "problem": 38, "user": "524740e7e4b05ef8e38e635d"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "5250b7a5e4b0541d1855b83e"}, {"code": "(fn m [x & more] \n    (if (= 0 (count more)) \n        x \n      \t(let [y (apply m more)]\n          (if (> x y) x y))))", "problem": 38, "user": "524e6b68e4b0541d1855b7db"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "524b90fae4b09eba1c0223df"}, {"code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "511dada0e4b0a5c68a34840c"}, {"code": "(fn [& coll]\n  (reduce #(if (> %1 %2) %1 %2) coll))", "problem": 38, "user": "523f1245e4b01c266ffa7f95"}, {"code": "(fn [& x] (reduce (fn [a b] (if (> a b) a b)) x))", "problem": 38, "user": "522ff396e4b032bbe3424172"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "52525a0ee4b0541d1855b8a2"}, {"code": "(fn srt [& l] (first (reverse (sort (apply list l)))))", "problem": 38, "user": "5245d29ae4b09dbe66b56174"}, {"code": "(fn [& more] (reduce (fn [x y] (if (> x y) x y)) more))", "problem": 38, "user": "524f07a6e4b0541d1855b7fc"}, {"code": "#(reduce (fn [x y] (if (> x y) x y)) %&)", "problem": 38, "user": "5251d3c1e4b0541d1855b87f"}, {"code": "(fn maxi [& s] (reduce (fn [acc x] (if (> x acc) x acc))s))", "problem": 38, "user": "52452225e4b0d8acf9ed6ae6"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "50e1a564e4b019fc399ce17a"}, {"code": "(fn [& args] (if (empty? args)\n               nil\n               ((fn maxi [args result]\n                 (if (empty? args)\n                   result\n                   (maxi (rest args)\n                         (if (> (first args) result) (first args) result)))) args (first args))))", "problem": 38, "user": "525372ade4b0541d1855b8f3"}, {"code": "#(last (sort %&))", "problem": 38, "user": "50fca436e4b0d10d794c19fb"}, {"code": "(fn x [& arg] (reduce (fn y [a b] (if (> a b) a b)) arg))", "problem": 38, "user": "5149c2f1e4b0829bd132edb0"}, {"code": "(fn [a & more] (reduce #(if (> %1 %2) %1 %2) (cons a more)))", "problem": 38, "user": "524469dee4b0d8acf9ed6a9d"}, {"code": "#(-> %& sort last)", "problem": 38, "user": "5224060de4b01819a2de42c3"}, {"code": "#(last (sort %&))", "problem": 38, "user": "525431dfe4b0541d1855b970"}, {"code": "(fn mmaxi\n  [& values]\n  ((fn maxi\n     [[f & others]]\n     (if (first others)\n       (if (> f (first others))\n         (maxi (cons f (rest others)))\n         (maxi (cons (first others) (rest others)))\n         )\n       f))\n   values))", "problem": 38, "user": "52527192e4b0541d1855b8af"}, {"code": "(fn [& xs](reduce(fn[x y](if (> x y) x y)) xs))", "problem": 38, "user": "52550d90e4b0541d1855b9c1"}, {"code": "(fn[& xs] (last (sort xs)))", "problem": 38, "user": "525493bbe4b0541d1855b991"}, {"code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2)  rest))", "problem": 38, "user": "4f80db02e4b033992c121bf9"}, {"code": "(fn [& args] \n  (reduce #(if (> %1 %2) %1 %2) args)\n)", "problem": 38, "user": "5254f908e4b0541d1855b9ba"}, {"code": "(fn [& x] \n  (reduce #(if (> %1 %2) \n             %1 \n             %2) \n    x))", "problem": 38, "user": "524ab5f2e4b09eba1c02239d"}, {"code": "(fn [& xs] (first (reverse (sort (seq xs)))))", "problem": 38, "user": "5255b719e4b0541d1855b9ef"}, {"code": "(fn getmax [& x]\n  (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "504ece87e4b069badc5a33ce"}, {"code": "(fn [& args] (reduce (fn [elt max-elt] (if (> elt max-elt) elt max-elt)) (first args) args))", "problem": 38, "user": "4ef7a483535dced4c769f258"}, {"code": "(fn f\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n   (reduce f (f x y) more)))", "problem": 38, "user": "524fafdfe4b0541d1855b818"}, {"code": "#(last (sort %&))", "problem": 38, "user": "50002152e4b0678c553fc407"}, {"code": "(fn [& s] (reduce #(if (< %1 %2) %2 %1) s))", "problem": 38, "user": "5256cd77e4b0541d1855ba39"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "5217c26fe4b0a4bccb16cab8"}, {"code": "(fn [& n]\n  (reduce #(if (> %1 %2) %1 %2) n))", "problem": 38, "user": "5256627ce4b0541d1855ba1a"}, {"code": "(fn [& x] (last(seq(sort x))))", "problem": 38, "user": "524097ace4b0ad64fa010337"}, {"code": "(fn m\n  ([x y]\n     (if (> x y) x y)\n  )\n  ([x y & args] \n     (reduce m (m x y) args)\n  )\n)", "problem": 38, "user": "51d28e15e4b0d13b04db0d9b"}, {"code": "(fn [& s] (first (reverse (sort s))))", "problem": 38, "user": "5252b59de4b0541d1855b8cf"}, {"code": "(fn [x & xs] (reduce #(if (> % %2) % %2) x xs))", "problem": 38, "user": "5250a9abe4b0541d1855b83b"}, {"code": "(fn [n & ls] \n  (reduce #(if (> %1 %2) %1 %2) n ls))", "problem": 38, "user": "525941f9e4b0cb4875a45cd6"}, {"code": "(fn [& more]\n  (reduce (fn [m a] (if (> a m) a m)) more)\n  )", "problem": 38, "user": "50aca92ee4b071b89ef26232"}, {"code": "(comp - (partial apply min) (partial map -) list)", "problem": 38, "user": "5250a13ee4b0541d1855b839"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) 0 x))", "problem": 38, "user": "52586d24e4b0cb4875a45cb0"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "50a3f23ae4b08bbd0eb4ed2f"}, {"code": "(fn [x & xs]\n  (reduce #(if (> %1 %2) %1 %2) x xs))", "problem": 38, "user": "525a2917e4b0cb4875a45cec"}, {"code": "(fn my-max [& args] (reduce (fn [a, b] (if (> a b) a b)) args))", "problem": 38, "user": "52430d3ce4b076204b44faa5"}, {"code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) s))", "problem": 38, "user": "525a7b9fe4b0cb4875a45cf5"}, {"code": "(fn [& args] (reduce (fn [f s] (if (> f s ) f s)) args ))", "problem": 38, "user": "4e78c2ba535db95036265723"}, {"code": "(fn [& args] (\n              (partial reduce #(if (< %1 %2) %2 %1))\n         args))", "problem": 38, "user": "5259a16ee4b0cb4875a45ce1"}, {"code": "(fn [& rst] (first (reverse (sort rst))))", "problem": 38, "user": "525b12b1e4b0cb4875a45d04"}, {"code": "(fn [x & args] (reduce #(if (> %1 %2) %1 %2) x args))", "problem": 38, "user": "5244fa73e4b0d8acf9ed6acb"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "5234870ee4b05e80434a505c"}, {"code": "(fn myfn [n1 & s1]\n\t(loop [x s1 result n1]\n    \t(if (empty? x) result\n        \t(recur (rest x)\n            \t(if (> result (first x))\n                \tresult\n                \t(first x)\n                )\n            )\n        )\n    )\n)", "problem": 38, "user": "525ba7bbe4b0cb4875a45d28"}, {"code": "(fn [& xs] (reduce (fn [x y] (if (> x y) x y)) 0 xs))", "problem": 38, "user": "525bcae9e4b0cb4875a45d30"}, {"code": "(fn [& args] \n   (loop [args args\n          x (first args)]\n     \n     (let [next (first args)]\n       (if (= 0 (count args))\n         x\n         (recur (rest args) (if (> next x) next x)))\n       )\n       \n     )\n   )", "problem": 38, "user": "525cc912e4b0cb4875a45d48"}, {"code": "(fn [& args] (last (apply sorted-set args)))", "problem": 38, "user": "515b03fee4b0a102a3e5262a"}, {"code": "(fn [ & more](reduce (fn [a b] (if (> a b) a b)) more))", "problem": 38, "user": "51622fb8e4b009fba0926e3f"}, {"code": "(fn [& lst] (reduce (fn [x y] (if (> x y) x y)) lst))", "problem": 38, "user": "5243635ce4b076204b44fab8"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "525a8875e4b0cb4875a45cf6"}, {"code": "(fn [& p] (reduce #(if (> % %2) % %2) 0 p))", "problem": 38, "user": "525b0b51e4b0cb4875a45d01"}, {"code": "(fn [& args]\n  (reduce (fn [x y] (if (> x y) x y)) (first args) args))", "problem": 38, "user": "509a25b7e4b0efbae1fbc0a8"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "4f944f60e4b0dcca54ed6cc2"}, {"code": "(fn[& more] (last (sort more)))", "problem": 38, "user": "51899ad2e4b0288ada3dbdac"}, {"code": "(fn maximum [& s]\n  (reduce (fn [x y] (if (>= x y) x y)) s)\n  )", "problem": 38, "user": "525cc6c4e4b0cb4875a45d47"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "523ea111e4b057c4b7cd0a65"}, {"code": "(fn [& n] (last (sort n)))", "problem": 38, "user": "525c575be4b0cb4875a45d38"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "50007353e4b0678c553fc40a"}, {"code": "(comp - #(apply min %) (fn [& rest] (map - rest)))", "problem": 38, "user": "4f3656d1e4b0e243712b1ec9"}, {"code": "(fn mymax\n  ([x y]\n     (if (> x y) x y))\n  ([x y & more]\n     (reduce mymax (mymax x y) more)))", "problem": 38, "user": "525d4111e4b0cb4875a45d64"}, {"code": "(fn [& rest] (last (sort rest)))", "problem": 38, "user": "524c7fcfe4b0752c4cb68cbd"}, {"code": "(fn\n  [& args]\n  (first (reverse (sort args))))", "problem": 38, "user": "525fffb8e4b03e8d9a4a702b"}, {"code": "(fn [& lst] (reduce (fn [result n] (if (> n result) n result)) lst))", "problem": 38, "user": "5256a1d4e4b0541d1855ba29"}, {"code": "(fn getmax [& args]\n  (reduce \n   (fn [a b] (if (> a b) a b))\n   0\n   args))", "problem": 38, "user": "525aa499e4b0cb4875a45cf7"}, {"code": "(fn [& l] (reduce (fn [p n] (if (> n p) n p)) l))", "problem": 38, "user": "525f51bde4b0cb4875a45dc8"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "52342722e4b07e3ee2be83c0"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "525d413be4b0cb4875a45d65"}, {"code": "(fn mmax [& x] \n  (if (< (count x) 2)\n    (first x)\n    (let [restmax (apply mmax (rest x))] \n      (if (> restmax (first x))\n        restmax\n        (first x)))))", "problem": 38, "user": "525cc137e4b0cb4875a45d46"}, {"code": "(fn [& args] (reduce (fn [a v] (if (< a v) v a)) 0 args))", "problem": 38, "user": "524f4162e4b0541d1855b806"}, {"code": "(comp last sorted-set)", "problem": 38, "user": "5250779ee4b0541d1855b82f"}, {"code": "(fn [nu & nums] (reduce #(if (> % %2) % %2) (conj nums nu)))", "problem": 38, "user": "525efc76e4b0cb4875a45dbd"}, {"code": "(fn [& xs] (reduce (fn [acc n] (if (< acc n) n acc)) xs))", "problem": 38, "user": "52618ea3e4b03e8d9a4a7064"}, {"code": "(fn [& l] (reduce #(if (> %1 %2) %1 %2) l))", "problem": 38, "user": "52593207e4b0cb4875a45cd3"}, {"code": "(fn [& nums]\n  (reduce #(if (> %1 %2) %1 %2) nums))", "problem": 38, "user": "525d490ae4b0cb4875a45d70"}, {"code": "(fn [x & more] (reduce #(if (> %2 %1) %2 %1) x more))", "problem": 38, "user": "505345d9e4b0517ede0d0a06"}, {"code": "(fn [& xs ] (reduce #(if (< %1 %2) %2 %1) xs))", "problem": 38, "user": "512e31e9e4b0b740abc59823"}, {"code": "(fn [& nums]\n  (reduce #(if (> %1 %2) %1 %2) nums))", "problem": 38, "user": "525a643be4b0cb4875a45cf1"}, {"code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2 ) more))", "problem": 38, "user": "5262d2d0e4b03e8d9a4a709a"}, {"code": "(fn [l & args]\n  ((fn aa [coll im]\n     (if (= 1 (count coll))\n       (if (> (first coll) im)\n         (first coll)\n         im)\n       (if (> (first coll) im)\n         (aa (rest coll) (first coll))\n         (aa (rest coll) im)\n         ))\n     ) args l))", "problem": 38, "user": "517e12e3e4b0fcc7c5d37d3c"}, {"code": "(fn [& lst] (reduce #(if (> % %2) % %2) (first lst) lst))", "problem": 38, "user": "524f213be4b0541d1855b7ff"}, {"code": "(fn [& a]\n  (reduce (fn [r v] (if (> r v) r v)) a))", "problem": 38, "user": "525ed5f4e4b0cb4875a45db8"}, {"code": "(fn [& items] (reduce #(if (> %1 %2) %1 %2) items))", "problem": 38, "user": "4e7e1483535db169f9c79702"}, {"code": "(fn [x & xs] (reduce #(if (> %1 %2) %1 %2) (cons x xs)))", "problem": 38, "user": "5262a4d0e4b03e8d9a4a708f"}, {"code": "(fn [eka & muut]\n\t(reduce #(cond (> %1 %2) %1 :else %2) eka muut)\n  )", "problem": 38, "user": "5252cbe7e4b0541d1855b8d2"}, {"code": "(fn sol [& args]\n        (reduce\n         (fn [a b]\n           (cond\n            (> a b) a\n            :else b)) args))", "problem": 38, "user": "52090567e4b0e152394d76ed"}, {"code": "(fn  [& coll]\n  (reduce #(if (> %1 %2) %1 %2) coll))", "problem": 38, "user": "5264b4a9e4b03e8d9a4a70e0"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "52447ff4e4b0d8acf9ed6aa4"}, {"code": "(fn [ & xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "52655949e4b03e8d9a4a710b"}, {"code": "(fn [& x]\n   (last (sort x)))", "problem": 38, "user": "52112be7e4b07aea8afc4f68"}, {"code": "(fn [& a]\n (reduce \n   (fn [v1 v2]\n      (if (> v1 v2) v1 v2)\n   )\n    a\n )\n)", "problem": 38, "user": "525ee103e4b0cb4875a45dbb"}, {"code": "(fn [& col] (reduce #(if (> %1 %2) %1 %2) col))", "problem": 38, "user": "524af160e4b09eba1c0223bb"}, {"code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "problem": 38, "user": "5261f169e4b03e8d9a4a7072"}, {"code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "problem": 38, "user": "525d417ee4b0cb4875a45d68"}, {"code": "(fn [a & li] \n (reduce (fn [x y] \n          (if (> x y) x y)) 0 (conj li a)))", "problem": 38, "user": "5263b5e6e4b03e8d9a4a70b7"}, {"code": "#(-> %& sort last)", "problem": 38, "user": "52664945e4b03e8d9a4a712f"}, {"code": "(fn [& args] (reduce #(if (> % %2)% %2) args))", "problem": 38, "user": "5012da69e4b0c8732600222d"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "525de512e4b0cb4875a45d8a"}, {"code": "(fn [& args]\n     (last (sort args)))", "problem": 38, "user": "51ca82e9e4b08b1cbd0d9488"}, {"code": "(fn [& args]\n  (last (sort args)))", "problem": 38, "user": "526759b3e4b03e8d9a4a715b"}, {"code": "(fn [x & more] (reduce (fn [a b] (if (> a b) a b)) (cons x more)))", "problem": 38, "user": "525d5327e4b0cb4875a45d74"}, {"code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b) ) args ) )", "problem": 38, "user": "52628bb0e4b03e8d9a4a7089"}, {"code": "(fn [& input]\n  (reduce #(if (> %1 %2) %1 %2) input)\n   )", "problem": 38, "user": "52667ecfe4b03e8d9a4a713e"}, {"code": "(fn [& args] \n  (reduce \n   (fn [x y] (if (> x y) x y)) \n   (seq args)))", "problem": 38, "user": "52616198e4b03e8d9a4a705e"}, {"code": "(fn [& nums] (reduce #(if (> % %2) % %2) nums))", "problem": 38, "user": "5268f5b4e4b03e8d9a4a71cf"}, {"code": "(fn my-max [hd & tl]\n  (reduce (fn [el current-max]\n            (if (> el current-max)\n              el\n              current-max)) hd tl))", "problem": 38, "user": "5264383be4b03e8d9a4a70cb"}, {"code": "(fn [& xs]\n    (reduce \n     (fn [x y]\n       (if (> x y)\n         x\n         y))\n     0\n     xs))", "problem": 38, "user": "526302eee4b03e8d9a4a70a2"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) (first x) x ))", "problem": 38, "user": "5256c8c7e4b0541d1855ba37"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "5261aebbe4b03e8d9a4a7066"}, {"code": "(comp last sort list)", "problem": 38, "user": "526952b8e4b03e8d9a4a71e4"}, {"code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "5252f8ede4b0541d1855b8e0"}, {"code": "#(last (sort %&))", "problem": 38, "user": "526aaafee4b03e8d9a4a7234"}, {"code": "(fn mx\n  ([val] val)\n  ([v1 v2 & rest]\n   (if (> v1 v2)\n     (apply mx (conj rest v1))\n     (apply mx (conj rest v2)))))", "problem": 38, "user": "526439a4e4b03e8d9a4a70cc"}, {"code": "(fn [& v] (-> v sort reverse first))", "problem": 38, "user": "51dc1202e4b09c47a74ce107"}, {"code": "(fn [& args] (first (sort > args)))", "problem": 38, "user": "525873e8e4b0cb4875a45cb2"}, {"code": "(comp last sort vector)", "problem": 38, "user": "5269c150e4b03e8d9a4a71f8"}, {"code": "(fn max-val [& args]\n  (reduce (fn [m a] (if (> m a) m a)) (first args) (rest args)))", "problem": 38, "user": "5268eb68e4b03e8d9a4a71c6"}, {"code": "(fn [& others] (last (sort others)))", "problem": 38, "user": "522afdeee4b0d34ee08e71b2"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4ec11b79535dfed6da9c6da6"}, {"code": "(fn [& rest]\n  (reduce (fn [x y]\n            (if (> x y)\n              x\n              y))\n          rest))", "problem": 38, "user": "52526161e4b0541d1855b8a6"}, {"code": "(fn [& args] \n  (let [bigger #(if (> %1 %2) %1 %2)]\n    (reduce bigger args)))", "problem": 38, "user": "5116e176e4b0063b4e3e16d7"}, {"code": "(fn [& k] (reduce (fn [m i] (if (> m i) m i)) k))", "problem": 38, "user": "526c2340e4b03e8d9a4a7281"}, {"code": "(fn [x & xs]\n (reduce #(if (< %1 %2) %2 %1 ) x xs))", "problem": 38, "user": "504e0f78e4b078edc5f593ac"}, {"code": "(fn [& args] (reduce (fn [x,y] (if (> x y) x y)) args))", "problem": 38, "user": "526c6e08e4b03e8d9a4a7290"}, {"code": "(fn my-max\n  [& args]\n  (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "526e1bd0e4b03e8d9a4a730b"}, {"code": "(fn [a & args]\n  (let [lista (cons a args)]\n    (reduce (fn [a b] (if (> a b) a b)) lista)))", "problem": 38, "user": "524b1a95e4b09eba1c0223c2"}, {"code": "(fn [n & others]\n  (reduce #(if (< %1 %2) %2 %1) n others))", "problem": 38, "user": "5244cf39e4b0d8acf9ed6ac5"}, {"code": "(fn this [& sequence]\n\t(loop [s sequence\n\t       maximum -1]\n\t  (if (empty? s)\n\t    maximum\n\t    (if (< maximum (first s))\n\t      (recur (rest s) (first s))\n\t      (recur (rest s) maximum)))))", "problem": 38, "user": "4f05872b535dcb61093f6bf8"}, {"code": "(fn [& xs] (reduce #(if (>= %1 %2) %1 %2) xs))", "problem": 38, "user": "525947f1e4b0cb4875a45cd8"}, {"code": "(fn [& args]\n  (reduce\n   (fn [x y] (if (> x y) x y))\n   args\n   )\n  )", "problem": 38, "user": "5267d9bde4b03e8d9a4a7188"}, {"code": "(fn \n  [& xs]\n  (reduce (fn [a b] (if (< a b) b a)) xs))", "problem": 38, "user": "509e62a8e4b08df8156e9e2e"}, {"code": "(fn [& z] (reduce (fn [x y] (cond (> x y) x :else y)) z))", "problem": 38, "user": "5260341ee4b03e8d9a4a7034"}, {"code": "#(last (sort %&))", "problem": 38, "user": "52699a0ee4b03e8d9a4a71f2"}, {"code": "(fn \n  [& nums]\n  (- (apply min (map #(- %) nums)))\n  )", "problem": 38, "user": "526ee63de4b03e8d9a4a733f"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y))  args))", "problem": 38, "user": "51f4d46ee4b0fca5e8b48243"}, {"code": "(let [q\n  (fn [best x] \n     (if (nil? x) \n       best \n       (if (> (first x) best) \n         (recur (first x) (next x)) \n         (recur best (next x))\n       )\n     )\n  )] (fn [& z] (q (first z) z)))", "problem": 38, "user": "526dd90de4b03e8d9a4a72fe"}, {"code": "(fn [& a] (last (sort a)))", "problem": 38, "user": "526f9715e4b03e8d9a4a7372"}, {"code": "(fn [& xs]\n  (reduce\n    (fn [acc x]\n      (if (> acc x) acc x))\n    0\n    xs))", "problem": 38, "user": "526e5be8e4b03e8d9a4a731c"}, {"code": "(fn [x & rest] \n  (let [args (cons x rest)]\n    (reduce #(if (> %1 %2) %1 %2) args)                 \n  ))", "problem": 38, "user": "504f7a05e4b0a02f9cffde8a"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "526ef710e4b03e8d9a4a7344"}, {"code": "(fn [& vs]\n  (reduce\n   (fn [res v]\n     (if (or (not res)\n             (> v res))\n       v\n       res))\n   nil\n   vs))", "problem": 38, "user": "521af852e4b0c4ef0be8301c"}, {"code": "(fn [& args] (first (sort > args)))", "problem": 38, "user": "51fdbf73e4b0f1313d468a51"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "5262efade4b03e8d9a4a709f"}, {"code": "#(reduce (fn [m num]\n                  (if (> num m)\n                    num\n                    m)) Integer/MIN_VALUE  %&)", "problem": 38, "user": "523bde95e4b07becd5be2202"}, {"code": "(fn [& x]\n  (reduce #(if (> %1 %2) %1 %2) 0 x))", "problem": 38, "user": "526143b7e4b03e8d9a4a705a"}, {"code": "(fn [ x & xs ] (reduce (fn [y z] (if (< y z) z y)) x xs))", "problem": 38, "user": "526fb2fae4b03e8d9a4a7377"}, {"code": "#(first (reverse (sort %&)))", "problem": 38, "user": "526bd187e4b03e8d9a4a7273"}, {"code": "(fn [& xs]\n  (reduce\n   (fn [a b] (if (>= a b) a b))\n   xs))", "problem": 38, "user": "51d34334e4b099f3b6acddfe"}, {"code": "(fn my-max [& args]\n  \t\n\t(reduce (fn take-greater [x y] (if (> x y) x y)) args))", "problem": 38, "user": "5264301fe4b03e8d9a4a70ca"}, {"code": "(comp (partial reduce #(if (> %1 %2) %1 %2)) list)", "problem": 38, "user": "52709265e4b03e8d9a4a73b2"}, {"code": "(fn [& c] (reduce #(if (> %1 %2) %1 %2) c))", "problem": 38, "user": "52692e3be4b03e8d9a4a71d6"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "526aac71e4b03e8d9a4a7235"}, {"code": "(fn [& args] (first (reverse (sort args))))", "problem": 38, "user": "52718620e4b03e8d9a4a73f5"}, {"code": "(comp last sort list)", "problem": 38, "user": "5271b940e4b03e8d9a4a73fb"}, {"code": "(fn mx [x & ns]\n  (if (or (empty? ns) (and (or (seq? (first ns)) (nil? (first ns))) (empty? (first ns))))\n    x\n  (if (seq? (first ns))\n    (mx (if (> x (first (first ns))) x (first (first ns))) (next (first ns)))\n    (mx (if (> x (first ns)) x (first ns)) (next ns))\n    )\n  ))", "problem": 38, "user": "5272669de4b03e8d9a4a742e"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "52727d52e4b03e8d9a4a7439"}, {"code": "(fn [ & b ]\n   (reduce #(if(> %1 %2)\n              %1\n              %2)\n           b))", "problem": 38, "user": "5273562ae4b03e8d9a4a7479"}, {"code": "(fn [x & xs] \n  (reduce \n   \t(fn mmax [a b]\n      (if (> a b) a b)\n    )\n    (cons x xs)\n  )\n)", "problem": 38, "user": "5272d4b7e4b03e8d9a4a7453"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "52736ca1e4b03e8d9a4a747e"}, {"code": "(fn [x & the-rest] (reduce #(if (< %1 %2) %2 %1) x the-rest))", "problem": 38, "user": "5272ccf1e4b03e8d9a4a7450"}, {"code": "(fn [& n]\n  (reduce (fn [p c]\n            (if (> p c) p c)) n))", "problem": 38, "user": "526e0831e4b03e8d9a4a7305"}, {"code": "(fn [& args] (first (sort > args)))", "problem": 38, "user": "5273e006e4b03e8d9a4a7495"}, {"code": "(fn mymax [& xs] (reduce (fn [x y] (if (> x y) x y)) xs))", "problem": 38, "user": "5255bf1ee4b0541d1855b9f1"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "5274eb56e4b03e8d9a4a74bb"}, {"code": "(fn maxy [& nums] (last (sort nums)))", "problem": 38, "user": "526397f1e4b03e8d9a4a70b6"}, {"code": "(fn [& args] (let [m (fn [a b] (if (< a b) b a))] (reduce m args)))", "problem": 38, "user": "51422945e4b0b50abeb46b2e"}, {"code": "#(last (sort %&))", "problem": 38, "user": "527513d8e4b03e8d9a4a74bd"}, {"code": "(fn [& all] (reduce (fn [biggest n] (if (> n biggest) n biggest)) all))", "problem": 38, "user": "526d6968e4b03e8d9a4a72d9"}, {"code": "(fn haha [dmax & frogs] \n  (if frogs \n    (if (> dmax (first frogs)) \n       (apply haha dmax (rest frogs))\n       (apply haha (first frogs) (rest frogs)))\n    dmax))", "problem": 38, "user": "52747090e4b03e8d9a4a74a5"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "526bc746e4b03e8d9a4a7271"}, {"code": "(fn\n  [& ns]\n  (reduce #(if (< %1 %2) %2 %1) 0 ns))", "problem": 38, "user": "52753740e4b03e8d9a4a74c1"}, {"code": "#(last (sort  %&))", "problem": 38, "user": "5276aa0de4b03e8d9a4a74ea"}, {"code": "(fn biggest ([] 0) ([x] x) ([x & xs] (let [b (apply biggest xs)] (if (> x b) x b))))", "problem": 38, "user": "52713288e4b03e8d9a4a73e7"}, {"code": "(fn [& s] (reduce #(if (> %2 %1) %2 %1) s))", "problem": 38, "user": "527818f7e4b03e8d9a4a7519"}, {"code": "(fn m ([x] x) ([x y] (if (> x y) x y)) ([x y & r] (apply m (m x y) r)))", "problem": 38, "user": "521d709ae4b050d5da0427ef"}, {"code": "(fn [& xs]\n  (loop [xs xs x 0]\n    (cond (empty? xs) x\n          (>= x (first xs)) (recur (rest xs) x)\n          :else (recur (rest xs) (first xs)))))", "problem": 38, "user": "526f2e16e4b03e8d9a4a7353"}, {"code": "(fn [& x] (reduce #(if (< %2 %1) %1 %2) x))", "problem": 38, "user": "52795656e4b03e8d9a4a7534"}, {"code": "(fn my-max [x & args]\n  (loop [a args current-max x]\n      (if (empty? a) current-max\n        (let [m (if (> current-max (first a)) current-max (first a) )]\n          (recur (rest a) m )))))", "problem": 38, "user": "50651de3e4b0b1b6c8b1d85f"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args ))", "problem": 38, "user": "527675cbe4b03e8d9a4a74e2"}, {"code": "(fn a [& args] (last(into (sorted-set) args)))", "problem": 38, "user": "527a8eb7e4b03e8d9a4a755f"}, {"code": "(fn [& nums] (reduce (fn [x y] (if (> x y) x y)) 0 nums))", "problem": 38, "user": "5277b9b5e4b03e8d9a4a750d"}, {"code": "(fn [& coll] \n  (reduce #(if (> % %2) % %2) coll))", "problem": 38, "user": "51e38568e4b0c611d6113e43"}, {"code": "(fn [in-num & more-num] (reduce #(if(> %1 %2) %1 %2) (cons in-num more-num)))", "problem": 38, "user": "52711255e4b03e8d9a4a73d7"}, {"code": "(fn [& args] (reduce #(if (> % %2) % %2) args))", "problem": 38, "user": "527236d4e4b03e8d9a4a741f"}, {"code": "( fn [ x & xy]\n  (reduce #( if ( > %1 %2) %1 %2 ) x xy))", "problem": 38, "user": "527b856fe4b03e8d9a4a758d"}, {"code": "(fn [& xs] (last (sort (vec xs))))", "problem": 38, "user": "5152f82ee4b03f948212e718"}, {"code": "(fn [& nums]\n  (reduce\n    (fn [a b] (if (> a b) a b))\n    nums))", "problem": 38, "user": "524a554de4b05ef8e38e64a2"}, {"code": "(fn [& nums]\n  (reduce #(if (< %1 %2) %2 %1) nums)\n  )", "problem": 38, "user": "4db03885838c48654951d9bd"}, {"code": "(fn\n  [x & ys]\n  (reduce #(if (> % %2) % %2) x ys))", "problem": 38, "user": "52563d02e4b0541d1855ba10"}, {"code": "(fn [& lst] \n  (reduce \n   (fn [old new] (if (> new old) new old)) \n   0 \n   lst))", "problem": 38, "user": "527ccaf4e4b0757a1b17136d"}, {"code": "#(last (sort %&))", "problem": 38, "user": "526f79aee4b03e8d9a4a736a"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "527a48f9e4b03e8d9a4a7553"}, {"code": "(fn [& nums] (first (reverse (sort nums))))", "problem": 38, "user": "52561be5e4b0541d1855ba08"}, {"code": "(fn [& x]\n  (reduce\n   #(if (> % %2) % %2)\n   x))", "problem": 38, "user": "527188cee4b03e8d9a4a73f6"}, {"code": "(fn [x y & xs]\n  (let [mmax (fn [x y] (if (< x y) y x))]\n  \t(reduce mmax (mmax x y) xs)))", "problem": 38, "user": "527dc2aee4b0757a1b17138d"}, {"code": "(fn [& args]\n   (loop [elem nil, rest (vec args)]\n     (if (empty? rest) elem\n         ;; else recur\n         (let [x (peek rest), xs (pop rest)]\n           (if (or (nil? elem) (< elem x))\n             (recur x xs)\n             (recur elem xs))))))", "problem": 38, "user": "4fe98ddae4b0547ebccb2463"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "527b9beee4b03e8d9a4a7590"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "526bd542e4b03e8d9a4a7274"}, {"code": "(fn [& a] (-> a sort last))", "problem": 38, "user": "5262c73fe4b03e8d9a4a7098"}, {"code": "(fn [& x] \n  (reduce #(if (>= %1 %2) %1 %2) x)\n)", "problem": 38, "user": "527c036ee4b03e8d9a4a75a5"}, {"code": "(fn mx \n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n   (reduce mx (mx x y) more)))", "problem": 38, "user": "52767b2ce4b03e8d9a4a74e4"}, {"code": "(comp last sorted-set)", "problem": 38, "user": "526a3412e4b03e8d9a4a721e"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "524ad140e4b09eba1c0223a9"}, {"code": "(fn[& x] (last (sort x)))", "problem": 38, "user": "52810225e4b0757a1b171418"}, {"code": ";(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))\n\n#(last (sort %&))", "problem": 38, "user": "527b8881e4b03e8d9a4a758e"}, {"code": "(fn toto\n  ([a] a)\n  ([a & more] (if (> a (apply toto more)) a (apply toto more))))", "problem": 38, "user": "52717a1de4b03e8d9a4a73f2"}, {"code": "(fn mymax\n  ([x] x)\n  \n  ([x y] (if-let [result (> x y)] x y))\n  \n   ([x y & more]\n    (reduce mymax (mymax x y) more)\n    )\n)", "problem": 38, "user": "5270d559e4b03e8d9a4a73c5"}, {"code": "(fn my-max [first-el & other]\n \t((fn pass-max [curr-max a-seq]\n            (let [seq-first (first a-seq)]\n                 (if (= nil seq-first)\n                      curr-max\n                      (if (> curr-max seq-first)\n                          (pass-max curr-max (rest a-seq))\n                          (pass-max seq-first (rest a-seq))\n                       )\n                  )\n              )) first-el other)\n )", "problem": 38, "user": "52763696e4b03e8d9a4a74d7"}, {"code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) s))", "problem": 38, "user": "5283d91fe4b0239c8a67adc0"}, {"code": "(fn [& lst] (first (sort > lst)))", "problem": 38, "user": "4e0359e8535d04ed9115e792"}, {"code": "(comp last sorted-set)", "problem": 38, "user": "519ef784e4b087743fad2198"}, {"code": "(fn [& xs] \n  (reduce \n   (fn [x y] \n     (if (< x y) y x)) \n   (first xs) \n   (rest xs)\n   )\n  )", "problem": 38, "user": "52854795e4b0239c8a67adee"}, {"code": "(comp last sort list)", "problem": 38, "user": "5284de3de4b0239c8a67ade3"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "517c1a3be4b07ef0e56148d6"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "52851da0e4b0239c8a67adea"}, {"code": "(fn [& r]\n    (reduce (fn [x y] (if(> x y) x y)) r)\n )", "problem": 38, "user": "5286a2a9e4b0239c8a67ae1e"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) 0 args))", "problem": 38, "user": "52741177e4b03e8d9a4a749b"}, {"code": "(fn [& args] (reduce (fn [accum x] (if (> x accum) x accum)) args))", "problem": 38, "user": "5287f66be4b0239c8a67ae45"}, {"code": "(comp last sorted-set)", "problem": 38, "user": "52865f41e4b0239c8a67ae15"}, {"code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "5285920be4b0239c8a67adfb"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "527fd663e4b0757a1b1713de"}, {"code": "(comp last sort (fn [& p] p))", "problem": 38, "user": "5288aebbe4b0239c8a67ae54"}, {"code": "(fn [x & more] (letfn [(rossmax [bit bob] (reduce #(if (> %1 %2) %1 %2) bit bob))] (rossmax x more)))", "problem": 38, "user": "5271605ae4b03e8d9a4a73ed"}, {"code": "(fn [& x]\n  (reduce #(if (< %1 %2)\n           %2\n           %1) x))", "problem": 38, "user": "52890634e4b0239c8a67ae5e"}, {"code": "(fn t[& k] (\n    let [l (flatten (list k))]\n    (\n    if (= 1 (count l))\n    (first l)\n    (\n    if (>= (first l) (t (rest l)))\n    (first l)\n    (t (rest l))\n    )\n)\n))", "problem": 38, "user": "4f03c039535dcb61093f6b5e"}, {"code": "(fn [foist & moar]\n  (letfn [(bigger [foist moar]\n                  (if (empty? moar)\n                    foist\n                    (if (> foist (first moar))\n                      (bigger foist (rest moar))\n                      (bigger (first moar) (rest moar)))))]\n          (bigger foist moar)))", "problem": 38, "user": "5289714de4b0239c8a67ae64"}, {"code": "(fn [x & xs]   (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "51bd27fde4b0df1216cefd95"}, {"code": "#(last (sort %&))", "problem": 38, "user": "528652fbe4b0239c8a67ae14"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "506adad4e4b0a2a5463de37a"}, {"code": "(fn [& more]\n  (loop [maxval (first more) candidates (rest more)]\n    (if-not (next candidates)\n       (if (> maxval (first candidates)) maxval (first candidates))\n \t   (if (> maxval (first candidates))\n          (recur maxval (rest candidates))\n          (recur (first candidates) (rest candidates))))))", "problem": 38, "user": "528b08efe4b0239c8a67ae8a"}, {"code": "(fn m                                                                       \n  ([x] x)                                                                           \n  ([x y] (if (> x y) x y))                                                          \n  ([x y & more] (reduce m (m x y) more)))", "problem": 38, "user": "5277da8ee4b03e8d9a4a7514"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "512b07f7e4b078b06821febb"}, {"code": "(fn [& input]\n  (reduce\n    (fn [a b] (if (> a b) a b))\n    input))", "problem": 38, "user": "528bba38e4b0239c8a67aea9"}, {"code": "(fn\n  [& args]\n  (reduce #(if (< %1 %2) %2 %1) args))", "problem": 38, "user": "5289bba9e4b0239c8a67ae69"}, {"code": "(fn [& nums] (reduce #(if (> %2 %1) %2 %1) nums))", "problem": 38, "user": "528b01a0e4b0239c8a67ae89"}, {"code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) coll))", "problem": 38, "user": "52864dbce4b0239c8a67ae12"}, {"code": "(fn fmax [m & args] (letfn [(my-max [n x] \n                           (cond (empty? x) \n                                  n\n                                  (> n (first x)) \n                                  (my-max n (rest x))\n                                  :else \n                                  (my-max (first x) (rest x))))] (my-max m args)))", "problem": 38, "user": "528b9efee4b0239c8a67aea0"}, {"code": "#(last (sort %&))", "problem": 38, "user": "528d1094e4b0239c8a67aebe"}, {"code": "(fn my-max([a b] (if (> a b) a b))\n  ([a b & more] (reduce my-max (my-max a b) more)))", "problem": 38, "user": "52446511e4b0d8acf9ed6a9a"}, {"code": "(fn [& x] (first (reverse (sort x))))", "problem": 38, "user": "51e7c1f1e4b0a3e081b8cbef"}, {"code": "(fn mx [& nums]\n  (let [fst (first nums)]\n    (loop [[x & xs] nums\n           mx-so-far fst]\n      (if (nil? x)\n        mx-so-far\n        (recur xs\n               (if (> x mx-so-far)\n                 x\n                 mx-so-far))))))", "problem": 38, "user": "4f35b2ace4b0e243712b1ec5"}, {"code": "(fn [& args]\n  (reduce (fn [x y]\n            (if (> x y)\n              x\n              y))\n          args))", "problem": 38, "user": "5282c03be4b0757a1b171461"}, {"code": "(fn [& things]  \n   (reduce \n    (fn [buh huh]\n      (if \n        (> buh huh) \n        buh huh)) \n    0 \n    things))", "problem": 38, "user": "4fbd6210e4b081705acca303"}, {"code": "(fn [ & x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "52808897e4b0757a1b171404"}, {"code": "(fn [& xs] \n  (reduce #(if (> %2 %) %2 %) xs))", "problem": 38, "user": "528ed0a8e4b0239c8a67aeea"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "528a791ae4b0239c8a67ae77"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4ea5ba92535d7eef308072d9"}, {"code": "(comp first (partial sort >) list)", "problem": 38, "user": "528e95efe4b0239c8a67aee2"}, {"code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "5290257ae4b0239c8a67af03"}, {"code": "(fn\n         ([x y & more] (reduce (fn [x y] (if (> x y) x y)) (if (> x y) x y) more))\n       )", "problem": 38, "user": "528ce039e4b0239c8a67aebc"}, {"code": "(fn [& x] (reduce #(if (< %1 %2) %2 %1) x))", "problem": 38, "user": "528e64b7e4b0239c8a67aedd"}, {"code": "(fn [x & restx]\n  (reduce #(if (> %1 %2) %1 %2) x restx))", "problem": 38, "user": "5098db05e4b0cae2931060a2"}, {"code": "(fn my-max [& params] \n  (reduce (fn [item1 item2] (if (< item1 item2) item2 item1)) params))", "problem": 38, "user": "525d44bfe4b0cb4875a45d6d"}, {"code": "(fn [& coll] (reduce #(if (< %1 %2) %2 %1) coll))", "problem": 38, "user": "529242bee4b0239c8a67af28"}, {"code": "(fn[& lis](last(sort lis)))", "problem": 38, "user": "52840004e4b0239c8a67adc1"}, {"code": ";#(last (sort %&))\n\n#(-> %& sort last)", "problem": 38, "user": "528f4462e4b0239c8a67aef0"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) (apply list args)))", "problem": 38, "user": "5293589ae4b0239c8a67af3d"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "5294e44de4b02ebb4ef75016"}, {"code": "#(first (sort > %&))", "problem": 38, "user": "52951156e4b02ebb4ef7501b"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "52950ab6e4b02ebb4ef7501a"}, {"code": "(fn [x & args] (reduce (fn [a b] (if (> a b) a b)) x args))", "problem": 38, "user": "51910da7e4b0f8ef0be96bf9"}, {"code": "(fn [& args] (reduce (fn [acc new] (if (> acc new) acc new)) args))", "problem": 38, "user": "52614bc1e4b03e8d9a4a705c"}, {"code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "problem": 38, "user": "50928ecfe4b097f48cc38570"}, {"code": "(comp last sort list)", "problem": 38, "user": "528cf6f7e4b0239c8a67aebd"}, {"code": "(fn [& rest] (reduce #(if (< % %2) %2 %) rest))", "problem": 38, "user": "5287f34ee4b0239c8a67ae43"}, {"code": "(fn [& args]\n\t(reduce (fn [acc v] (if (> v acc) v acc)) args))", "problem": 38, "user": "50e41747e4b0463d32072489"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "52963cc7e4b02ebb4ef7502d"}, {"code": "(fn mymax\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n  (reduce mymax (mymax x y) more)))", "problem": 38, "user": "528ad4cce4b0239c8a67ae84"}, {"code": "(fn [& xs] (reduce #(if (> % %2) % %2) xs))", "problem": 38, "user": "5281a445e4b0757a1b17143a"}, {"code": "(fn [& a] (-> a sort last))", "problem": 38, "user": "527094f0e4b03e8d9a4a73b3"}, {"code": "(fn [ & args ](reduce (fn [ a b ] (cond(> a b) (identity a) :else (identity b)) ) args))", "problem": 38, "user": "52867936e4b0239c8a67ae16"}, {"code": "(fn [& args] (dec(last (sort (map inc args)))))", "problem": 38, "user": "5296008fe4b02ebb4ef7502a"}, {"code": "(fn my-max \n  ([x] x)\n  ([x y] (if (> x y)\n           x   \n           y)) \n  ([x y & more] (reduce my-max (my-max x y) more)))", "problem": 38, "user": "5296aa9be4b02ebb4ef75034"}, {"code": "(fn [& args]\n  (reduce (fn [x y]\n            (if (< y x) x y)) \n          args))", "problem": 38, "user": "4f6e7073e4b07046d9f4efd8"}, {"code": "#(->> %& sort last)", "problem": 38, "user": "52774dd2e4b03e8d9a4a74ff"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "528f1057e4b0239c8a67aeec"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "5298d3f4e4b02ebb4ef75068"}, {"code": "(fn [& vals] (reduce #(if (> %1 %2) %1 %2) (first vals) vals))", "problem": 38, "user": "52990271e4b02ebb4ef7506d"}, {"code": "#(reduce (fn [x y]\n           (if (< x y)\n             y\n             x))\n         %&)", "problem": 38, "user": "51ad244fe4b09397d510977f"}, {"code": "(fn [x & xs] (reduce #(if (> %2 %1) %2 %1) x xs))", "problem": 38, "user": "52140b53e4b0961f15ac4d7e"}, {"code": "(fn my-max [& s]\n  (loop [s s mx -999999999]\n    (if (empty? s)\n      mx\n      (recur (rest s) \n             (if (> (first s) mx) \n                (first s) \n                    mx)))))", "problem": 38, "user": "529a73bde4b02ebb4ef75096"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4e72187b535d5021c1a8965b"}, {"code": "(fn[& x](-> x sort last))", "problem": 38, "user": "529952a4e4b02ebb4ef75081"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2)  args))", "problem": 38, "user": "5290ffaee4b0239c8a67af10"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "529cdc56e4b04e0c58e87b6d"}, {"code": "(fn zmien [& args] (first (sort > args)))", "problem": 38, "user": "528e510ee4b0239c8a67aeda"}, {"code": "(fn [& args] (last (sort (seq args))))", "problem": 38, "user": "526934d6e4b03e8d9a4a71dd"}, {"code": "(fn [& nums]\n  (reduce #(if (< %1 %2) %2 %1) nums))", "problem": 38, "user": "5298cc88e4b02ebb4ef75065"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "51e05dfae4b01188f0627543"}, {"code": "(fn [n & tail]\n  (reduce\n   (fn [acc i] (if (> i acc) i acc))\n   n\n   tail))", "problem": 38, "user": "529e2383e4b04e0c58e87b8b"}, {"code": "(fn [& xs] (reduce (fn [acc x] (if (> x acc) x acc)) xs))", "problem": 38, "user": "529dd5a4e4b04e0c58e87b82"}, {"code": "(fn [x & more] (last (sort (cons x more))))", "problem": 38, "user": "5294b190e4b02ebb4ef75011"}, {"code": "(fn max-p [& xs] (reduce (fn [x y] (if (> x y) x y)) xs))", "problem": 38, "user": "529d4f4be4b04e0c58e87b79"}, {"code": "(fn [& ls] (reduce (fn [a b] (if (> a b) a b)) ls))", "problem": 38, "user": "529f3f1ae4b04e0c58e87ba5"}, {"code": "(fn my-max \n  ([x] x)\n  ([x y]\n    (if (> x y)\n      x\n      y))\n  ([x y & more]\n  (reduce my-max (my-max x y) more)))", "problem": 38, "user": "528e25b9e4b0239c8a67aed5"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "52a09e05e4b04e0c58e87bc9"}, {"code": "(fn [& args] (first (sort > args)))", "problem": 38, "user": "52986e43e4b02ebb4ef75058"}, {"code": "(fn [& valz] \n  (reduce #(if (> %1 %2) %1 %2) valz))", "problem": 38, "user": "529ce629e4b04e0c58e87b6e"}, {"code": "#(last (sort %&))", "problem": 38, "user": "5273b883e4b03e8d9a4a748f"}, {"code": "(fn [& args] (reduce (fn [v1 v2] (if (> v1 v2) v1 v2)) args))", "problem": 38, "user": "52a0fa82e4b04e0c58e87bd1"}, {"code": "#(last (sort %&))", "problem": 38, "user": "509fe759e4b08df8156e9e43"}, {"code": "(fn learn [& x]\n  (last (sort x)))", "problem": 38, "user": "526f0a68e4b03e8d9a4a7348"}, {"code": "(fn [& v] (reduce #(if (> %1 %2) %1 %2) v))", "problem": 38, "user": "529e8ba9e4b04e0c58e87b99"}, {"code": "(fn [& x] (reduce #(if (< %1 %2) %2 %1) x))", "problem": 38, "user": "52a04f0ee4b04e0c58e87bc1"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "52a1acb2e4b04e0c58e87bdb"}, {"code": "(fn [& nums] (reduce (fn [a b] (if (> a b) a b)) nums))", "problem": 38, "user": "4f77b68de4b0fbe0118ec581"}, {"code": "(fn mymax ([x y]\n  (if (> x y)\n    x\n    y))\n  ([x y & more]\n  (reduce mymax (mymax x y) more)))", "problem": 38, "user": "51d8f711e4b02ceefd947748"}, {"code": "(fn mymax\n  ([x y]\n     (if (> x y) x y))\n  ([x y & more]\n     (reduce mymax (mymax x y) more)))", "problem": 38, "user": "528e1c88e4b0239c8a67aed1"}, {"code": "(fn[& nums]\n  \t(first (reverse (sort nums)))\n  )", "problem": 38, "user": "52a32876e4b04e0c58e87bfb"}, {"code": "(fn [& nums]\n  (let [mx (fn [x y] (if (> x y) x y))]\n    (reduce mx nums)))", "problem": 38, "user": "51b41150e4b0f094dd986fac"}, {"code": "(fn [& args](reduce (fn [x y]\n           (if (> x y)\n             x\n             y)) args))", "problem": 38, "user": "4fe91fa2e4b0547ebccb2440"}, {"code": "(fn [& xs]\n  (reduce #(if (< %1 %2) %2 %1) xs))", "problem": 38, "user": "4ec1619b535dfed6da9c6dab"}, {"code": "(fn [& arg] (reduce #(if (> %1 %2) %1 %2) 0 arg))", "problem": 38, "user": "52a42b2be4b04e0c58e87c06"}, {"code": "(fn [& args]\n    (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "529d292fe4b04e0c58e87b74"}, {"code": "(fn [one & more] (reduce (fn [x y] (if (> y x) y x)) one more))", "problem": 38, "user": "5226f8e9e4b04e78ff2e199a"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "problem": 38, "user": "52a267c6e4b04e0c58e87bef"}, {"code": "(fn [& n] (last (sort n)))", "problem": 38, "user": "52a4f3cee4b0c58976d9abe0"}, {"code": "(fn [& arr] (last (sort arr)))", "problem": 38, "user": "52a503e4e4b0c58976d9abe1"}, {"code": "(fn [& args]\n  (if (= (count args) 1)\n    (first args)\n    ((fn max_liste [a]\n      (if (= (count a) 1)\n        (first a)\n        (if (> (first a) (max_liste (rest a)))\n          (first a)\n          (max_liste (rest a))))) args)))", "problem": 38, "user": "5294c95fe4b02ebb4ef75013"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "4e6e1756535d5021c1a895fe"}, {"code": "(fn [& args] (* -1 (apply min (map #(* % -1) args))) )", "problem": 38, "user": "5289f1f4e4b0239c8a67ae6d"}, {"code": "(fn greatest[& args]\n  (last (sort args))\n  )", "problem": 38, "user": "52a1edd6e4b04e0c58e87be4"}, {"code": "(fn [& x]\n  (reduce (fn [n m] \n            (if (> n m) n m)) x))", "problem": 38, "user": "5263dca8e4b03e8d9a4a70bd"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "529e3a4fe4b04e0c58e87b92"}, {"code": "#(first (rseq (vec (sort %&))))", "problem": 38, "user": "528a74d3e4b0239c8a67ae76"}, {"code": "(fn [& c] (reduce #(if (> % %2) % %2) c))", "problem": 38, "user": "52a0237de4b04e0c58e87bbe"}, {"code": "(fn biggest [& coll]\n  (loop [maax (first coll)\n         lst (rest coll)]\n    (prn maax)\n\n    (if (empty? lst)\n      maax\n      (do \n        (if (> (first lst) maax)\n          (recur (first lst) (rest lst))\n          (recur maax (rest lst)))))))", "problem": 38, "user": "52a6ed15e4b0c58976d9ac0a"}, {"code": "(fn _max\n  [n & nums]\n  (if (nil? (first nums))\n    n\n    (let [r (apply _max nums)]\n      (if (> n r)\n        n\n        r))))", "problem": 38, "user": "5263c44fe4b03e8d9a4a70b8"}, {"code": "(fn [f & r] (reduce (fn [x y] (if (< x y) y x)) (cons f r)))", "problem": 38, "user": "52a5d1f3e4b0c58976d9abf1"}, {"code": "(fn [& rest]\n  (reduce #(if (> %1 %2) %1 %2) rest))", "problem": 38, "user": "5298c83de4b02ebb4ef75064"}, {"code": "#(last (sort %&))", "problem": 38, "user": "52a5e784e4b0c58976d9abf3"}, {"code": "(fn iter [& x]\n  (loop [s x \n         maximum 0] \n    (cond \n     (empty? s) maximum\n     (> (first s) maximum) (recur (rest s) (first s))\n     :else (recur (rest s) maximum))))", "problem": 38, "user": "52a5f1e6e4b0c58976d9abf4"}, {"code": "(let [higher (fn [a b]\n  (if (> a b)\n    a\n    b))]\n\n(fn [a & tail]\n  (let [b (first tail)]\n  (if b\n  (recur (higher a b) (rest tail))\n  a)))\n)", "problem": 38, "user": "515896f2e4b059418b97f0a8"}, {"code": "#(last (sort %&))", "problem": 38, "user": "528a3e14e4b0239c8a67ae72"}, {"code": "#(last (sort %&))", "problem": 38, "user": "51929214e4b08962174cf74c"}, {"code": "(fn [& args] (->> args (sort >)(first)))", "problem": 38, "user": "52295917e4b04c906c9c6a6f"}, {"code": "(fn [& args] \n  (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "52a9406de4b0c58976d9ac43"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "52a76986e4b0c58976d9ac17"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "528ba1d9e4b0239c8a67aea2"}, {"code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "problem": 38, "user": "5254ef3de4b0541d1855b9b8"}, {"code": "(fn max*\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x1 x2 & xs] (max* (max* x1 x2) (apply max* xs))))", "problem": 38, "user": "52ab6de1e4b0c58976d9ac78"}, {"code": "(fn [f & r]  (last (sort (conj r f ))))", "problem": 38, "user": "52a28e1ce4b04e0c58e87bf0"}, {"code": "(fn [head & tail]\n  (reduce (fn [x y] (if (> x y) x y))\n          head\n          tail))", "problem": 38, "user": "52aa4d9ee4b0c58976d9ac63"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "52aad30ce4b0c58976d9ac6d"}, {"code": "(fn mymax\n  ([] nil)\n  ([x] x)\n  ([x & args]\n    (if (> x (apply mymax args))\n      x \n      (apply mymax args))))", "problem": 38, "user": "52a779fce4b0c58976d9ac1a"}, {"code": "(fn[& col] (reduce #(if(> %1 %2) %1 %2) col))", "problem": 38, "user": "52a62e16e4b0c58976d9abf9"}, {"code": "(fn [& m] (reduce #(if (> %1 %2) %1 %2) m))", "problem": 38, "user": "52a69e06e4b0c58976d9ac04"}, {"code": "(fn[& a] (reduce (fn [x y] (if (> x y) x y)) a))", "problem": 38, "user": "52a88c4de4b0c58976d9ac30"}, {"code": "(fn [& args] (loop [l args m 0] \n    (if (empty? l) m \n      (recur (rest l) (if (> (first l) m) (first l) m)))))", "problem": 38, "user": "52ab61f5e4b0c58976d9ac75"}, {"code": "(fn [& args] (reduce #(if (> % %2) % %2) args))", "problem": 38, "user": "52ac41fee4b0c58976d9ac85"}, {"code": "(fn [& coll]\n  (reduce #(if (> %1 %2) %1 %2) coll))", "problem": 38, "user": "51937eb3e4b04df54c098022"}, {"code": "(fn [& more]\n  (reduce\n    (fn [x y]\n      (if (> x y) x y)\n      )\n    more\n    )\n  )", "problem": 38, "user": "52ae886de4b0c58976d9acab"}, {"code": "(fn [& xs]\n  ((fn maxes [xs mx]\n     (if (empty? xs)\n       mx\n       (let [x (first xs)]\n         (if (> x mx)\n           (maxes (rest xs) x)\n           (maxes (rest xs) mx)))))\n   xs 0))", "problem": 38, "user": "52aa4a67e4b0c58976d9ac62"}, {"code": "(fn maximum [& arguments] (reduce #(if (> %1 %2) %1 %2) arguments))", "problem": 38, "user": "508f97c0e4b0ea685a20f768"}, {"code": "(fn [& a] (first (sort > a)))", "problem": 38, "user": "524f4256e4b0541d1855b808"}, {"code": "#(last (sort %&))", "problem": 38, "user": "52a8ca0fe4b0c58976d9ac36"}, {"code": "#(reduce (fn [x y] (if (> x y) x y)) %&)", "problem": 38, "user": "4fa38e3fe4b081705acca190"}, {"code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) s))", "problem": 38, "user": "527c040be4b03e8d9a4a75a7"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "52b091b4e4b0c58976d9accc"}, {"code": "(fn my-max [x & xs]\n  (loop [m x\n         c xs]\n    (if-not (seq c)\n      m\n      (let [f (first c)]\n        (if (< m f)\n          (recur f (rest c))\n          (recur m (rest c)))))))", "problem": 38, "user": "4ee8b9c9535d93acb0a66884"}, {"code": "(fn f[& x]\n  (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "52b0323ee4b0c58976d9acc6"}, {"code": "#(-> %& sort last)", "problem": 38, "user": "528c51a5e4b0239c8a67aeb4"}, {"code": "(fn [& r]\n  (loop [mv nil l r]\n    (if (empty? l)\n      mv\n      (let [x (first l) g (if (or (nil? mv) (> x mv)) x mv)]\n        (recur g (rest l))))))", "problem": 38, "user": "527ba695e4b03e8d9a4a7596"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "52b1d41ce4b0c58976d9ace6"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "527c0513e4b03e8d9a4a75ab"}, {"code": "(fn op[& lis] \n  (loop [maxi 0 coll lis]\n    (if (empty? coll)\n      maxi\n      (if (> maxi (first coll))\n        (recur maxi (rest coll))\n        (recur (first coll) (rest coll))\n      )\n    )\n  )\n)", "problem": 38, "user": "4ea5b8ae535d7eef308072d8"}, {"code": "(fn[& args] \n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "52b405e1e4b0c58976d9ad15"}, {"code": "(fn mymax\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n   (reduce mymax (mymax x y) more)))", "problem": 38, "user": "52b3658be4b0c58976d9ad0a"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "52b43468e4b0c58976d9ad1b"}, {"code": "(fn [& xs]\n  (loop [[a b & cs] xs]\n    (let [bigger (if (> a b) a b)]\n      (if (empty? cs)\n        bigger\n        (recur (concat [bigger] cs))))))", "problem": 38, "user": "4fc3a72ae4b081705acca342"}, {"code": "(fn[& s](reduce(fn[x y](if(> x y)x y))s))", "problem": 38, "user": "52b453b0e4b0c58976d9ad21"}, {"code": "(fn [& pars] (reduce (fn [x y] (if (> x y) x y)) pars))", "problem": 38, "user": "526fce6fe4b03e8d9a4a7383"}, {"code": "#(-> %& sort last)", "problem": 38, "user": "52b5edd1e4b0c58976d9ad3c"}, {"code": "(fn [& n] (last (sort n)))", "problem": 38, "user": "52a9154ee4b0c58976d9ac3b"}, {"code": "(fn [x & more]\n  (reduce #(if (> %1 %2) %1 %2) x more))", "problem": 38, "user": "527cd633e4b0757a1b17136f"}, {"code": "(fn [& items] (reduce (fn [a b] (if (> a b) a b)) items))", "problem": 38, "user": "52b5137de4b0c58976d9ad36"}, {"code": "(fn [& s] (reduce (fn [accum x] (if (> x accum) x accum)) s))", "problem": 38, "user": "52470d42e4b05ef8e38e6350"}, {"code": "(fn [x & y] (reduce #(if (> %1 %2) %1 %2) x y))", "problem": 38, "user": "52a1c6cee4b04e0c58e87be1"}, {"code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "52b65f26e4b0c58976d9ad43"}, {"code": "(fn mxi [& coll] (let [bigger (fn [a b] (if (> a b) a b))] (reduce bigger 0 coll)))", "problem": 38, "user": "52b60e94e4b0c58976d9ad3e"}, {"code": "(fn [& l]\n  (last (sort l)))", "problem": 38, "user": "529b5301e4b02ebb4ef7509f"}, {"code": "(fn my-max [& args]\n  (reduce #(if (< %1 %2) %2 %1) args))", "problem": 38, "user": "52a55adee4b0c58976d9abe7"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "52b80827e4b0c58976d9ad56"}, {"code": "(fn [& xs] (reduce (fn [m x] (if (>= m x) m x)) 0 xs))", "problem": 38, "user": "505b0431e4b021387fb8985e"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "525fea5ae4b03e8d9a4a7026"}, {"code": "(fn this ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & coll] (reduce this (this x y) coll)))", "problem": 38, "user": "51ea4e35e4b0f1f103a0d148"}, {"code": "(fn mmax [& s]\n  (reduce #(if (> % %2) % %2) s))", "problem": 38, "user": "51852961e4b0da5a5be3babb"}, {"code": "(fn max*\n  ([] nil)\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & xs]\n    (max* (max* x y) (reduce max* xs))))", "problem": 38, "user": "52b955f8e4b07a9af57922bc"}, {"code": "(fn [& coll] (last (sort coll)))", "problem": 38, "user": "52b2d16ae4b0c58976d9acf8"}, {"code": "(comp last sort list)", "problem": 38, "user": "52b42d7ee4b0c58976d9ad19"}, {"code": "(fn [& xs]\n  (loop [xs xs acc 0]\n    (if (empty? xs)\n      acc\n      (let [x (first xs)]\n        (recur (rest xs)\n               (if (> x acc) x acc))))))", "problem": 38, "user": "52b8af15e4b07a9af57922b5"}, {"code": "(fn [& l] (reduce #(if (< %1 %2) %2 %1) 0 l))", "problem": 38, "user": "52aa16d1e4b0c58976d9ac5a"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "52b9d5b5e4b07a9af57922c6"}, {"code": "#(-> %& sort last)", "problem": 38, "user": "52b02329e4b0c58976d9acc5"}, {"code": "(fn [f & s]\n  (loop [mval f r s]\n    (if (empty? r)\n      mval\n      (recur (if (< mval (first r)) (first r) mval)\n             (rest r)\n             )\n      )\n    )\n  )", "problem": 38, "user": "52ba43d0e4b07a9af57922cd"}, {"code": "(fn [& xs] (reduce (fn [m n] (if (> n m) n m)) xs))", "problem": 38, "user": "52ba6d0be4b07a9af57922d2"}, {"code": "(fn [& inputs]\n  (loop [current (vec inputs)]\n    (if (= (count current) 1)\n      (first current)\n      (if (> (first current) (last current))\n        (recur (drop-last current))\n        (recur (drop 1 current))))))", "problem": 38, "user": "52b94f15e4b07a9af57922ba"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "52b9a836e4b07a9af57922c0"}, {"code": "(fn [& coll] (reduce (fn [n m] (if (>= n m) n m)) coll))", "problem": 38, "user": "52ba2af3e4b07a9af57922cc"}, {"code": "(fn yer [b & r]\n(if (= (count r) 1) (if (> b (first r)) b (first r))\n(if (> b (first r)) (recur b (rest r)) (recur (first r) (rest r)) )))", "problem": 38, "user": "52ba9e1ee4b07a9af57922d3"}, {"code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) (first xs) (rest xs)))", "problem": 38, "user": "52b63875e4b0c58976d9ad41"}, {"code": "(fn findmax\n  [& x]\n  (loop [l x m (first l)]\n    (if (zero? (count l))\n      m\n      (if (> (first l) m)\n         (recur (rest l) (first l))\n         (recur (rest l) m)))))", "problem": 38, "user": "52b9e920e4b07a9af57922c9"}, {"code": "(fn [ & xs]\n  (loop [l xs r 0]\n    (if (empty? l)\n      r\n      (let [current (first l)]\n          (if (> current r)\n            (recur (rest l) current)\n            (recur (rest l) r))))))", "problem": 38, "user": "52b9c62ce4b07a9af57922c3"}, {"code": "(fn [& rest] (reduce (fn [c m] (if (> c m) c m)) rest))", "problem": 38, "user": "52976262e4b02ebb4ef75041"}, {"code": "(comp last sort list)", "problem": 38, "user": "52bb123ae4b07a9af57922de"}, {"code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "52bb2fc0e4b07a9af57922e0"}, {"code": "(fn [x & more]\n  (loop [big x\n         more (seq more)]\n    (if-let [x1 (first more)]\n      (recur (if (> x1 big) x1 big) (next more))\n      big)))", "problem": 38, "user": "52bafc88e4b07a9af57922dc"}, {"code": "(fn [& coll]\n  (reduce #(if (> %1 %2) %1 %2) coll))", "problem": 38, "user": "52a7c82ae4b0c58976d9ac21"}, {"code": "(fn [& l] (reduce #(if (> %1 %2) %1 %2) l))", "problem": 38, "user": "52bb27fee4b07a9af57922df"}, {"code": "(fn [& xs] (last (sort xs)))", "problem": 38, "user": "52ab51c4e4b0c58976d9ac73"}, {"code": "(fn [x & xs]\n  (reduce (fn [x y]\n            (if (> x y)\n              x\n              y)) x xs))", "problem": 38, "user": "527c166de4b03e8d9a4a75b3"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "52b33607e4b0c58976d9ad02"}, {"code": "(fn [& args]\n  (reduce (fn [accum elem] (if (> elem accum) elem accum)) args))", "problem": 38, "user": "51fda906e4b0f1313d468a4f"}, {"code": "(fn [& coll] (first (sort > coll)))", "problem": 38, "user": "52a00651e4b04e0c58e87bbb"}, {"code": "(comp last sort list)", "problem": 38, "user": "524a86d2e4b05ef8e38e64af"}, {"code": "(fn [x & xs] \n  (reduce #(if (< %1 %2) %2 %1) x xs)\n  )", "problem": 38, "user": "52bcf698e4b07a9af57922fe"}, {"code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) (seq s)))", "problem": 38, "user": "52bb81d7e4b07a9af57922e8"}, {"code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "problem": 38, "user": "4fc50525e4b081705acca370"}, {"code": "(fn [& args]\n  (reduce (fn [maxx n]\n            (if (> n maxx)\n              n\n              maxx)\n          )\n          args\n  )\n)", "problem": 38, "user": "52bc7ea6e4b07a9af57922f7"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "52bd9963e4b07a9af5792303"}, {"code": "(fn mx [& x] (reduce (fn [y,z] (if (> y z) y z)) 0 x))", "problem": 38, "user": "52b7a904e4b0c58976d9ad51"}, {"code": "(fn [& args]  (last (sort (seq args))))", "problem": 38, "user": "50dcb2f4e4b02e6ac9592c91"}, {"code": "(fn f\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n   (reduce f (f x y) more)))", "problem": 38, "user": "4f541874e4b0a7574ea717d8"}, {"code": "(fn [& xs] (last (sort xs)))", "problem": 38, "user": "52baea85e4b07a9af57922d9"}, {"code": "(fn my-max [& c] (reduce (fn [a b] (if (> a b) a b)) c))", "problem": 38, "user": "52bc6f5ee4b07a9af57922f6"}, {"code": "(fn [& args]\n  (last (sort args)))", "problem": 38, "user": "52bdb689e4b07a9af5792306"}, {"code": "#(last (sort (vec %&)))", "problem": 38, "user": "52be0c48e4b07a9af5792311"}, {"code": "(fn [& x] (first (sort > x)))", "problem": 38, "user": "52bef782e4b07a9af5792327"}, {"code": "(fn [& args] (reduce #(if (>= %1 %2) %1 %2) args))", "problem": 38, "user": "52bdf6bde4b07a9af579230d"}, {"code": "(fn [& col ] (reduce #(if (> %1 %2) %1 %2) col))", "problem": 38, "user": "52b577c9e4b0c58976d9ad39"}, {"code": "(fn find-biggest [& numbers]\n(reduce \n  (fn [item1 item2] \n    (if (> item1 item2) \n      item1 \n      item2)) numbers))", "problem": 38, "user": "52be23dbe4b07a9af5792316"}, {"code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) s))", "problem": 38, "user": "52be5d55e4b07a9af579231e"}, {"code": "#(last (sort %&))", "problem": 38, "user": "52bf29fde4b07a9af579232e"}, {"code": "(fn maxi [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "52bf8e35e4b07a9af579233a"}, {"code": "(fn [x & xs] (reduce #(if (> %1 %2) %1 %2) (concat [x] xs)  ))", "problem": 38, "user": "52be4347e4b07a9af579231b"}, {"code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4f3a979de4b0e243712b1f10"}, {"code": "(fn [x y & more] (if (> x y) x y))", "problem": 38, "user": "52b79d8ee4b0c58976d9ad50"}, {"code": "(fn [& n] (last (sort (seq n))))", "problem": 38, "user": "52baefbae4b07a9af57922da"}, {"code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "problem": 38, "user": "4f99ae4ae4b0dcca54ed6d00"}, {"code": "(fn [& xs] (reduce #(if (< % %2) %2 %) xs))", "problem": 38, "user": "50772e6ae4b0fc74642bff5d"}, {"code": "(fn \n  ([] 0)\n  ([arg1] arg1)\n  ([arg1 & args] \n    (cond\n      (< arg1 (first args)) (first args)\n      (>= arg1 (first args)) arg1    \n    )\n  )\n)", "problem": 38, "user": "52a229e0e4b04e0c58e87be9"}, {"code": "(fn [x & m] (reduce #(if (> %1 %2) %1 %2) x m))", "problem": 38, "user": "52bbe6e1e4b07a9af57922ef"}, {"code": "(fn [x & rest] (reduce (fn [x y] (if (> x y) x y)) (cons x rest)))", "problem": 38, "user": "52bf936ee4b07a9af579233b"}, {"code": "(fn [& lst]\n   (loop [lst lst bigger 0]\n     (cond (empty? lst) bigger\n           (> (first lst) bigger) (recur (rest lst) (first lst))\n           :else (recur (rest lst) bigger))))", "problem": 38, "user": "52c25645e4b07a9af579237d"}, {"code": "(fn [& c] (reduce #(if (> %1 %2) %1 %2) c))", "problem": 38, "user": "5167d60de4b0c5a4140a3098"}, {"code": "(fn [& all] (last (sort all)))", "problem": 38, "user": "52c20c4ce4b07a9af5792373"}, {"code": "(fn [x & leftovers] (reduce #(if (< %1 %2) %2 %1) (flatten (cons x leftovers))))", "problem": 38, "user": "52b11742e4b0c58976d9acd5"}, {"code": "(fn [& numbers] (last (sort numbers)))", "problem": 38, "user": "52b9b86ee4b07a9af57922c1"}, {"code": "#(last (sort %&))", "problem": 38, "user": "52c00263e4b07a9af579233f"}, {"code": "(fn solution [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs)\n)", "problem": 38, "user": "52b49aebe4b0c58976d9ad2b"}, {"code": "(fn [& all] (reduce #(if (> %2 %1) %2 %1) all))", "problem": 38, "user": "4fc559eae4b0ee37620e17f3"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ))", "problem": 38, "user": "52c1cc8be4b07a9af579236b"}, {"code": "(fn [& l] (reduce #(if (> %1 %2) %1 %2) l))", "problem": 38, "user": "52c4580fe4b0c2d177d620d8"}, {"code": "(fn [ & someshit ]\n         (reduce (fn [a b]\n                   (if (> a  b)\n                       a\n                       b) \n                   ) someshit))", "problem": 38, "user": "5295fbb7e4b02ebb4ef75029"}, {"code": "(fn [& args] \n  (reduce \n   #(if (> %1 %2) \n      %1 \n      %2\n    ) args))", "problem": 38, "user": "4f659386e4b07046d9f4ef44"}, {"code": "(fn my-max [& xs] \n  (#(reduce (fn [a b] (if (> a b) a b)) xs))\n  )", "problem": 38, "user": "52c4fe42e4b0c2d177d620e9"}, {"code": "(fn [& rs] (last (sort rs)))", "problem": 38, "user": "52c52ef2e4b0c2d177d620ef"}, {"code": "(fn [& params] (reduce #(if (> %2 %1) %2 %1) params))", "problem": 38, "user": "52a23af1e4b04e0c58e87beb"}, {"code": "(fn [& args]\n  (last (sort args)))", "problem": 38, "user": "52c4af71e4b0c2d177d620e1"}, {"code": "(fn [& x] (first (sort > x)))", "problem": 38, "user": "52c3a453e4b0c2d177d620c7"}, {"code": "(fn \n  ([x] x)\n  ([x & more] \n   (reduce #(if (> % %2) % %2) x more)))", "problem": 38, "user": "52c58561e4b0c2d177d620f8"}, {"code": "(fn [& coll] (reduce (fn [x y] (cond (< x y) y :else x)) coll))", "problem": 38, "user": "52c61564e4b0c2d177d62109"}, {"code": "(fn max-val [& y]\n  (reduce (fn [m x] (if (< m x) x m)) y))", "problem": 38, "user": "515bbcd9e4b0388ca8ca1521"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "528e1f30e4b0239c8a67aed4"}, {"code": "(fn find-max [& m] (last (sort m)))", "problem": 38, "user": "52c3a0f4e4b0c2d177d620c6"}, {"code": "(fn [& lst]\n  (last (sort lst))\n  )", "problem": 38, "user": "52c2ff59e4b07a9af5792389"}, {"code": "#(last (sort %&))", "problem": 38, "user": "52af1e2ae4b0c58976d9acb6"}, {"code": "#(-> %& sort last)", "problem": 38, "user": "52bacfa8e4b07a9af57922d6"}, {"code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "problem": 38, "user": "52c69672e4b0c2d177d62110"}, {"code": "(fn [& a]\n  (reduce #(if (< % %2) %2 %) a))", "problem": 38, "user": "52c7f036e4b0c2d177d62126"}, {"code": "(fn [x & more]\n            (if more\n              (let [y (first more)]\n                (if (> y x)\n                  y\n                  x))\n              x\n              ))", "problem": 38, "user": "52c6f6dee4b0c2d177d62118"}, {"code": "(fn [& args](reduce #(if (>= %1 %2) %1 %2) args))", "problem": 38, "user": "5262a9dbe4b03e8d9a4a7090"}, {"code": "(fn [& x] \n   (reduce #(if (> %1 %2) %1 %2) 0 x))", "problem": 38, "user": "5215661be4b02f6d8ea676c7"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "52bb4be0e4b07a9af57922e2"}, {"code": "(fn [& a] (reduce #(if (> %2 %) %2 %) a))", "problem": 38, "user": "52c6a0abe4b0c2d177d62111"}, {"code": "(fn [& ns] (last (sort ns)))", "problem": 38, "user": "52c804dee4b0c2d177d6212b"}, {"code": "(fn [& s]\n  (reduce #(if (> %1 %2) %1 %2) 0 s))", "problem": 38, "user": "527ce61de4b0757a1b171374"}, {"code": "(fn [& xs]\n  (reduce #(if (> %2 %1) %2 %1) xs))", "problem": 38, "user": "52777dc3e4b03e8d9a4a7508"}, {"code": "(fn [& nums]\n  (reduce #(if (< %1 %2) %2 %1) nums))", "problem": 38, "user": "52c884a2e4b0c2d177d62136"}, {"code": "(fn ma [& args]\n    (reduce (fn [currm ele] (if (> ele currm) ele currm)) args)\n)", "problem": 38, "user": "52c17e42e4b07a9af5792367"}, {"code": "(fn [maxi & l]\n   (if (empty? l)\n     maxi\n     (let [l1 (rest l)\n           nx (first l)]\n       (recur (cond\n              (> nx maxi)\n                 nx\n                 :else\n                 maxi) l1 ))))", "problem": 38, "user": "52c81954e4b0c2d177d6212e"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "518e7d3be4b051adb72789f0"}, {"code": "(fn [& numbers]\n      ((comp last sort) numbers))", "problem": 38, "user": "52c1566fe4b07a9af5792364"}, {"code": "#(reduce (fn [a x] (if (> a x) a x)) %&)", "problem": 38, "user": "52be58d7e4b07a9af579231d"}, {"code": "(fn [& xs] (reduce (fn [x y] (if (> x y) x y)) xs))", "problem": 38, "user": "52c58440e4b0c2d177d620f7"}, {"code": "(fn [& coll] \n  (reduce (fn [a b] (if (> a b) a b)) coll)\n)", "problem": 38, "user": "52c580c2e4b0c2d177d620f5"}, {"code": "(comp last sort list)", "problem": 38, "user": "52c672e2e4b0c2d177d6210e"}, {"code": "(fn [& n] (reduce #(if (> % %2) % %2) 0 n))", "problem": 38, "user": "52c73194e4b0c2d177d6211e"}, {"code": "(fn my-max\n    ([n] n)\n    ([n1 n2 ]\n       (if (> n1 n2)\n         n1\n         n2))\n    ([n1 n2 & args]\n       (let [[f & rest] args]\n         (my-max (my-max n1 n2) (apply my-max f rest))))\n    )", "problem": 38, "user": "52a7634ae4b0c58976d9ac16"}, {"code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "52c1f404e4b07a9af5792370"}, {"code": "(fn [& xs]\n  (reduce\n   (fn [x y]\n     (if (> x y) x y))\n   xs))", "problem": 38, "user": "52897300e4b0239c8a67ae65"}, {"code": "(fn [& nums](reduce #(if (> %1 %2) %1 %2) nums))", "problem": 38, "user": "52c1bd29e4b07a9af579236a"}, {"code": "(fn [& xs]\n  (last (sort xs)))", "problem": 38, "user": "52ba2639e4b07a9af57922cb"}, {"code": "(fn maximo-args [& args]\n  ((fn maximo [maior coll]\n     (cond\n       (empty? coll) maior\n       (> maior (first coll)) (maximo maior (next coll))\n       :else (maximo (first coll) (next coll))))\n   (first args) (next args)))", "problem": 38, "user": "52c8758be4b0c2d177d62135"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "52cc09c1e4b07d0d72b27356"}, {"code": "(fn [& num] (first (sort > (vec num))))", "problem": 38, "user": "52c5c1c8e4b0c2d177d620fc"}, {"code": "(fn [& nums] (reduce #(if (> %1 %2) %1 %2) nums))", "problem": 38, "user": "52cc85abe4b07d0d72b27367"}, {"code": "(fn [& args]\n      (reduce  #(if (< %1 %2) %2 %1) args)\n  )", "problem": 38, "user": "52cbe910e4b07d0d72b27353"}, {"code": "(fn [& n] (last (sort n)))", "problem": 38, "user": "52bd9cb7e4b07a9af5792304"}, {"code": "(fn [& coll]\n   (loop [coll coll m Double/NEGATIVE_INFINITY]\n     (if (seq coll)\n       (recur (rest coll) (if (> (first coll) m) (first coll) m))\n       m)))", "problem": 38, "user": "52cc582ae4b07d0d72b27362"}, {"code": "(fn [& coll]\n  (reduce #(if (> %1 %2) %1 %2) coll))", "problem": 38, "user": "52cb6bb0e4b07d0d72b2734c"}, {"code": "(fn [& more] (last (sort (vec more))))", "problem": 38, "user": "527c9c08e4b0757a1b171366"}, {"code": "(fn [& l]\n  (reduce\n\t(fn [a b]\n      (if (> a b)\n        a\n        b))\n      l))", "problem": 38, "user": "52828298e4b0757a1b17145b"}, {"code": "(fn [& a]\n  (first (reverse (sort a))))", "problem": 38, "user": "52cca96ae4b07d0d72b2736e"}, {"code": "(fn [& more]\n  (reduce #(if (> %1 %2) %1 %2) 0 more))", "problem": 38, "user": "52cca65be4b07d0d72b2736b"}, {"code": "(fn foo [& xx] (let [x (flatten xx)] (if (< (count x) 2) (first x)\n\t(if (>= (second x) (first x))\n\t\t(foo (rest x))\n\t\t(foo (cons (first x) (rest (rest x))))\n\t) \n)))", "problem": 38, "user": "52cc92e9e4b07d0d72b27368"}, {"code": "(fn [a & b] (reduce #(if (> %1 %2) %1 %2) a b))", "problem": 38, "user": "52ce2aace4b07d0d72b2738b"}, {"code": "(fn [& args] \n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "52c1ede2e4b07a9af579236d"}, {"code": "(fn [& more] (reduce #(if(> %1 %2) %1 %2 ) more))", "problem": 38, "user": "52bbd09ee4b07a9af57922ee"}, {"code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) args))", "problem": 38, "user": "52caeb25e4b071a8d36bd3e7"}, {"code": "(fn [& more]\n   (reduce\n     (fn [a b]\n       (if (> a b) a b))\n     more)\n   )", "problem": 38, "user": "52cdc676e4b07d0d72b2737f"}, {"code": "#(last(sort(seq %&)))", "problem": 38, "user": "52bc6cb2e4b07a9af57922f5"}, {"code": "#(last (sort (seq %&)))", "problem": 38, "user": "52c49401e4b0c2d177d620de"}, {"code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) more))", "problem": 38, "user": "5094057fe4b097f48cc38593"}, {"code": "(fn [& r] (last (sort (vec r))))", "problem": 38, "user": "52ced458e4b07d0d72b27394"}, {"code": "(fn [& r] (reduce #(if(< % %2) %2 %) r))", "problem": 38, "user": "52cf30c9e4b07d0d72b273a2"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "52ce8648e4b07d0d72b27390"}, {"code": "#(reduce (fn [x y] (if (> x y) x y)) %&)", "problem": 38, "user": "52d0902ee4b07d0d72b273bd"}, {"code": "(fn [x y & more]\n  (let [max1 #(if (>= % %2) % %2)]\n    (reduce max1 (max1 x y) more)))", "problem": 38, "user": "52c915a6e4b0c2d177d6213b"}, {"code": "(fn [& more] (reduce #(if (< %1 %2) %2 %1) 0 more))", "problem": 38, "user": "52cfe059e4b07d0d72b273af"}, {"code": "(fn mymax [& nums] (reduce (fn [x y] (cond (> x y) x :else y)) nums))", "problem": 38, "user": "52630f30e4b03e8d9a4a70a4"}, {"code": "(fn [& r] (let [m #(if (> %1 %2) %1 %2)] (reduce m r)))", "problem": 38, "user": "52ceffaae4b07d0d72b27398"}, {"code": "(comp last sort list)", "problem": 38, "user": "52d07cc5e4b07d0d72b273bb"}, {"code": "(fn largest [& x]\n  (reduce (fn [a b] (if (> a b) a b)) x))", "problem": 38, "user": "52cefb7ee4b07d0d72b27397"}, {"code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "problem": 38, "user": "52d02380e4b07d0d72b273b7"}, {"code": "(fn [x & xs] (reduce #(if (> %2 %1) %2 %1) x xs))", "problem": 38, "user": "52cc7c40e4b07d0d72b27364"}, {"code": "(fn [& n] (last (sort n)))", "problem": 38, "user": "52ce4cafe4b07d0d72b2738e"}, {"code": "(fn [& args]\n     (loop [coll2 args, result 0]\n       (if (empty? coll2)\n         result\n         (recur \n           (rest coll2) \n           (let [x (first coll2)]\n             (if (> x result)\n               x\n               result))))))", "problem": 38, "user": "52cf084ce4b07d0d72b27399"}, {"code": "#(first (sort > %&))", "problem": 38, "user": "52d2be92e4b099d49816f0b1"}, {"code": "#(last (sort %&))", "problem": 38, "user": "52d2e54ae4b099d49816f0b9"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "52d1fb80e4b099d49816f0a5"}, {"code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "problem": 38, "user": "52d2ca1ce4b099d49816f0b4"}, {"code": "#(- (reduce min (map - %&)))", "problem": 38, "user": "52d10680e4b07d0d72b273c3"}, {"code": "#(last (sort %&))", "problem": 38, "user": "52cf5450e4b07d0d72b273a4"}, {"code": "(fn [& args] (reduce (fn [l x] (if (> l x) l x)) args))", "problem": 38, "user": "52cdb7efe4b07d0d72b2737c"}, {"code": "(fn [& xs] (last (sort xs)))", "problem": 38, "user": "52ccc2bde4b07d0d72b27371"}, {"code": "(fn [& args]\n  (reduce #(if (> % %2) % %2) args))", "problem": 38, "user": "52b2a819e4b0c58976d9acf1"}, {"code": "(fn\n  [f & aList]\n    (reduce (fn\n              [a b]\n              (if (> a b) a b)) f aList))", "problem": 38, "user": "52d39acce4b099d49816f0c7"}, {"code": "(fn [& coll]\n (reduce (fn [x y] (if (> x y) x y)) coll))", "problem": 38, "user": "52cd1ed0e4b07d0d72b27377"}, {"code": ";(fn [& x] (last (sort x)))\n#(last (sort %&))", "problem": 38, "user": "52d00832e4b07d0d72b273b4"}, {"code": "(fn [x y & more]\n  (let [mini-max (fn [x y] \n                   \n                   (cond (nil? y) x \n                         (nil? x) y \n                         :else (if (> x y) x\n                                 \t\t   y)))\n        \n        nums (flatten (list x y more))\n        ]\n    (reduce mini-max nums)))", "problem": 38, "user": "52cdec62e4b07d0d72b27382"}, {"code": "(fn [& nums] \n  (reduce (fn [a x]\n            (if (> x a)\n              x\n              a))\n          0\n          nums))", "problem": 38, "user": "52b94e26e4b07a9af57922b9"}, {"code": "(fn [& args]\n   (loop [s (seq args), m 0]\n                (if (empty? s)\n                    m\n                  (recur (filter (partial < (first s)) (rest s)) (first s)))))", "problem": 38, "user": "52d340ebe4b099d49816f0c1"}, {"code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "52d45010e4b09f7907dd132d"}, {"code": "(fn [& args] (reduce\n               (fn [a b]\n                 (if (< a b) b a))\n               args))", "problem": 38, "user": "52c3b3e5e4b0c2d177d620c8"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "52d51024e4b09f7907dd1339"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "4fe89475e4b07c9f6fd12c4f"}, {"code": "(fn nmax [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "52d3f666e4b09f7907dd1327"}, {"code": "(fn [ff & more]\n  (letfn [(calc-max [m x] \n            (cond (empty? x) m\n                  (> (first x) m) (calc-max (first x) \n                                            (rest x))\n                  :else (calc-max m (rest x))))]\n    (calc-max ff more)))", "problem": 38, "user": "52cf25d6e4b07d0d72b2739f"}, {"code": "#(reduce (fn [x y] (if (< x y) y x)) %&)", "problem": 38, "user": "52d4acc8e4b09f7907dd1333"}, {"code": "(fn [& args] ((comp last sort) args))", "problem": 38, "user": "52382dd6e4b0fae3832e99f1"}, {"code": "(fn maxv\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] (reduce maxv (maxv x y) (maxv more))))", "problem": 38, "user": "52d6889ae4b09f7907dd1361"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "52b35a6ee4b0c58976d9ad07"}, {"code": "(fn my-max\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n    (reduce my-max (my-max x y) more)))", "problem": 38, "user": "52d6d5c5e4b09f7907dd136a"}, {"code": "(fn [& xs] (reduce (fn [a b] (if (> a b) a b)) xs))", "problem": 38, "user": "51a97f7ae4b08d8ec191b827"}, {"code": "(fn [& li] (last (sort li)))", "problem": 38, "user": "52d49445e4b09f7907dd1332"}, {"code": "(fn [& nums] (reduce\n  (fn [x y]\n    (if (> x y)\n      x\n      y\n    )\n  ) nums\n))", "problem": 38, "user": "5272d7b4e4b03e8d9a4a7456"}, {"code": "(fn [& args]\n   (reduce #(if (> % %2)\n              %\n              %2)\n           args))", "problem": 38, "user": "52d6120ee4b09f7907dd134c"}, {"code": ";(fn\n;  ([f & r]\n;   (if (empty? r)\n;     f\n;    (let [[h & t] r]\n;     (if (> f h)\n;      (recur f t)\n;      (recur h t))))))\n\n(fn [& s]\n  (reduce #(if (> %1 %2) %1 %2) s))", "problem": 38, "user": "52d469c8e4b09f7907dd1330"}, {"code": "(fn m ([x] x)\n  ([x y] (if (> x y) x y))\n   ([x y & more]\n   (reduce m (m x y) more)))", "problem": 38, "user": "52d6664be4b09f7907dd1359"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "52cd093fe4b07d0d72b27376"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4f8c6bf6e4b02e764a0a519b"}, {"code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "52d532a3e4b09f7907dd133e"}, {"code": "(fn f [& numbers]\n  (cond\n   (empty? numbers) nil\n   (coll? (first numbers)) (let [numbers-tmp (concat '() (first numbers))]\n                             (if (= (count numbers-tmp) 1)\n                               (first numbers-tmp)\n                               (if (> (first numbers-tmp) (second numbers-tmp))\n                                 (f (conj (rest (rest numbers-tmp)) (first numbers-tmp)))\n                                 (f (rest numbers-tmp)))))\n   true (if (= (count numbers) 1)\n          (first numbers)\n          (if (> (first numbers) (second numbers))\n            (f (conj (rest (rest numbers)) (first numbers)))\n            (f (rest numbers))))))", "problem": 38, "user": "52d7b0ade4b09f7907dd137c"}, {"code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) (vec s)))", "problem": 38, "user": "52d7f7efe4b09f7907dd1380"}, {"code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "52c22856e4b07a9af5792378"}, {"code": "(fn [& args]\n  (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "52d737c8e4b09f7907dd1370"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "52d66152e4b09f7907dd1357"}, {"code": "(fn [x & rest ]\n  (reduce #(if (> %1 %2) %1 %2)(conj rest x)\n\n  )\n  )", "problem": 38, "user": "526698c9e4b03e8d9a4a7144"}, {"code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs) )", "problem": 38, "user": "52d8eb78e4b09f7907dd139d"}, {"code": "(fn highest [& args]\n  (last (sort args))\n)", "problem": 38, "user": "52af7a5ce4b0c58976d9acbd"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "52d954cae4b09f7907dd13a5"}, {"code": "(fn f38 [& args] (reduce (fn [curr high] (if (> high curr) high curr)) args))", "problem": 38, "user": "52bf0116e4b07a9af5792328"}, {"code": "(fn [& v] (last (sort v)))", "problem": 38, "user": "52baf490e4b07a9af57922db"}, {"code": "(fn [& args](reduce #(if (> % %2) % %2) 0 args))", "problem": 38, "user": "52c013dee4b07a9af5792344"}, {"code": "(fn [& xs] (reduce (fn [m x] (if (> x m) x m)) 0 xs))", "problem": 38, "user": "52d95491e4b09f7907dd13a4"}, {"code": "(fn mx [& col]\n  (reduce (fn [a b]\n            (if (> a b)\n              a\n              b)) col))", "problem": 38, "user": "51f8e057e4b09be9c177e53d"}, {"code": "(fn [ & xs] (reduce (fn [x y] (if (> x y) x y) ) xs)  )", "problem": 38, "user": "52d829a8e4b09f7907dd1389"}, {"code": "#(reduce (fn[x y] \n           (if (> x y) x y)\n           )\n%&)", "problem": 38, "user": "52ca720fe4b071a8d36bd3e2"}, {"code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "problem": 38, "user": "521ed5b4e4b0e6c71e0c0bc0"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "52d7412ce4b09f7907dd1371"}, {"code": "(fn maximal [& params]\n  (reduce\n    (fn [x y]\n      (if (> x y)\n        x\n        y))\n    params))", "problem": 38, "user": "52dad8bde4b09f7907dd13be"}, {"code": "(fn [& r]\n  (last (sort r)))", "problem": 38, "user": "50c2fbebe4b00e537d00253c"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "52daf558e4b09f7907dd13c1"}, {"code": "(fn [& coll]\n  (reduce #(if (> %1 %2) %1 %2) coll))", "problem": 38, "user": "52d809bde4b09f7907dd1384"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "52dd129ae4b09f7907dd13db"}, {"code": "(fn [& coll] (reduce #(if (> % %2) % %2) coll))", "problem": 38, "user": "5112bbdde4b0350614f07a7c"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "5224cf82e4b01819a2de42ef"}, {"code": "(fn [& args] (reduce (fn [x y] (if (>= x y) x y)) args))", "problem": 38, "user": "52d5bee0e4b09f7907dd1344"}, {"code": "(fn maxi\n        ([x y]\n (last (sort (vector x y))))\n([x y z]\n (last (sort (vector x y z))))\n([x y z q]\n (last (sort (vector x y z q)))))", "problem": 38, "user": "52cdec6ce4b07d0d72b27383"}, {"code": "(fn [& args]\n  (reduce (fn [s l] (if (> l s) l s))\n          (first args) args)\n  )", "problem": 38, "user": "51ee669ce4b09915f9b23c03"}, {"code": "(fn\n  [& ls]\n  (reduce #(if (> %2 %1) %2 %1) ls))", "problem": 38, "user": "52dd6cc8e4b09f7907dd13e2"}, {"code": "(fn[& args](first (sort > args)))", "problem": 38, "user": "52d66ca0e4b09f7907dd135c"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "52dde81fe4b09f7907dd13eb"}, {"code": "(fn [& args] \n  (last (sort args)))", "problem": 38, "user": "52cc4fd6e4b07d0d72b27360"}, {"code": "(fn [& numbers] \n  (reduce (fn [current-max, x] \n            (if (> x current-max) \n              x \n              current-max)) \n          numbers))", "problem": 38, "user": "5204f2b1e4b0bf4f1882c7f5"}, {"code": "(fn [& xs]\n  (reduce #(if (< %1 %2)\n             %2\n             %1) xs)\n)", "problem": 38, "user": "52ce5056e4b07d0d72b2738f"}, {"code": "(fn[a & e](reduce #(if(> %1 %2)%1 %2) a e))", "problem": 38, "user": "52ce4c32e4b07d0d72b2738d"}, {"code": "(let [m (fn m [l]\n         (if (= 1 (count l))\n           (first l)\n           (let [coso (m (rest l))]\n             (if (> coso (first l))\n               coso\n               (first l)\n               )\n             )\n           )\n         )]\n  (fn [& a] (m a))\n  )", "problem": 38, "user": "52d92f13e4b09f7907dd13a2"}, {"code": "(fn [& coll]\n  (reduce #(if (> % %2) % %2) coll))", "problem": 38, "user": "52d51535e4b09f7907dd133a"}, {"code": "(fn mx [x & xs]\n  (if (empty? xs) \n    x\n    (let [other (apply mx xs)]\n      (if (> x other) x other))))", "problem": 38, "user": "52deb735e4b09f7907dd13f7"}, {"code": "#(-> %& sort last)", "problem": 38, "user": "52d9aaa1e4b09f7907dd13ae"}, {"code": "(fn [& values]\n  (loop [v (first values)\n         vs (rest values)\n         mv Integer/MIN_VALUE]\n    (if (empty? vs)\n      mv\n      (recur (first vs)\n             (rest vs)\n             (if (> v mv) v mv)))))", "problem": 38, "user": "4e1e1576535d04ed9115e806"}, {"code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "problem": 38, "user": "510fe537e4b04c71fce993dd"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "51c7d82be4b07ef393169e47"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "52df232fe4b09f7907dd13fc"}, {"code": "#(last (sort %&))", "problem": 38, "user": "52e087dde4b09f7907dd1412"}, {"code": "#(last (sort %&))", "problem": 38, "user": "52d00a05e4b07d0d72b273b5"}, {"code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "problem": 38, "user": "52dfc89be4b09f7907dd1405"}, {"code": "(fn [& items] (last (sort items)))", "problem": 38, "user": "51cb7ce0e4b08d8387cbedd8"}, {"code": "(fn [& r] (reduce #(if (> % %2) % %2) r))", "problem": 38, "user": "52d7a930e4b09f7907dd1379"}, {"code": "#(last (sort %&))", "problem": 38, "user": "51e3a549e4b0c611d6113e47"}, {"code": "(fn [& s]\n  (loop [s- (rest s), current-max (first s)]\n    (let [first-val (first s-)]\n      (if (empty? s-)\n        current-max\n      \t(if (> first-val current-max)\n        \t(recur (rest s-) first-val)\n        \t(recur (rest s-) current-max))))))", "problem": 38, "user": "52e27304e4b09f7907dd1434"}, {"code": "(fn [& args]\n  (loop [maxval 0\n         arr args]\n    (cond\n     (= 0 (count arr)) maxval\n     (> (first arr) maxval) (recur (first arr) (rest arr))\n     :else (recur maxval (rest arr))\n     )))", "problem": 38, "user": "52c8a8b9e4b0c2d177d62139"}, {"code": "(fn [& args] (reduce (fn [m i] (if (> i m) i m)) args))", "problem": 38, "user": "52d83c2ce4b09f7907dd138d"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "528e7433e4b0239c8a67aedf"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "52e33cbbe4b09f7907dd143f"}, {"code": "(fn [& xs] ((identity red uce) (fn [x y] (if (< x y) y x)) xs))", "problem": 38, "user": "4db2903f535df7e46ed9b6bf"}, {"code": "(fn mymax\n  ([x y]\n     (if (> x y) x y))\n  ([x y & more]\n     (reduce mymax (mymax x y) more)))", "problem": 38, "user": "52b84ad7e4b07a9af57922af"}, {"code": "(fn [& xs]\n   ( reduce #(if (> %1 %2) %1 %2) xs) )", "problem": 38, "user": "52d2b85ce4b099d49816f0af"}, {"code": "(fn [& vals]\n  (->> vals\n       (sort)\n       (reverse)\n       (first)))", "problem": 38, "user": "521b481de4b0c4ef0be83037"}, {"code": "(fn [x & y]\n  (reduce #(if (< %1 %2) %2 %1) x y))", "problem": 38, "user": "52c7786ce4b0c2d177d62124"}, {"code": "#(loop [x %& z 0] (if (empty? x) z (recur (rest x) (if (> (first x) z) (first x) z))))", "problem": 38, "user": "52e48632e4b09f7907dd1450"}, {"code": "(fn my-max [& params] (reduce #(if (> %1 %2) %1 %2) params))", "problem": 38, "user": "52e295fae4b09f7907dd1437"}, {"code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) args))", "problem": 38, "user": "52e4cc2ee4b09f7907dd1455"}, {"code": "(fn [& vs]\n  (reduce (fn [a b] (if (> b a) b a)) vs))", "problem": 38, "user": "52e41c22e4b09f7907dd144b"}, {"code": "(fn [& r] (reduce #(if (< %1 %2) %2 %1) r))", "problem": 38, "user": "52d6a9c2e4b09f7907dd1365"}, {"code": "(fn my-max \n  [& args] \n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "51f2a491e4b0210f90e74553"}, {"code": "(fn [& nums]\n  ((fn max-nums [nums best] (if (empty? nums) best (if (> (first nums) best) (max-nums (rest nums) (first nums)) (max-nums (rest nums) best))))\n   nums 0))", "problem": 38, "user": "52e32906e4b09f7907dd143d"}, {"code": "(fn [& xs] (reduce #(if (< %1 %2) %2 %1) xs))", "problem": 38, "user": "52e59ca5e4b09f7907dd1464"}, {"code": "(fn [& args] (first (sort > args)))", "problem": 38, "user": "52e3912ee4b09f7907dd1446"}, {"code": "(fn [& li]\r\n  (loop [li li ret (first li)]\r\n    (if (= 0 (count li))\r\n      ret\r\n      (if (< ret (first li))\r\n        (recur (rest li) (first li))\r\n        (recur (rest li) ret)\r\n      )\r\n    )\r\n  )\r\n)", "problem": 38, "user": "513caa36e4b0b86ece9f3229"}, {"code": "(fn [& x] (reduce #(if (> %1 %2)%1 %2) x))", "problem": 38, "user": "52e253fce4b09f7907dd1432"}, {"code": "(fn [& m] (reduce #(if (> %1 %2) %1 %2) m))", "problem": 38, "user": "529b44afe4b02ebb4ef7509d"}, {"code": "#(last (apply sorted-set %&))", "problem": 38, "user": "52e0e646e4b09f7907dd1416"}, {"code": "(comp last sort vector)", "problem": 38, "user": "52d36f60e4b099d49816f0c2"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "52e5da25e4b09f7907dd1467"}, {"code": "x", "problem": 38, "user": "52e635b3e4b09f7907dd146f"}, {"code": "(fn [& args] \n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "52e25beee4b09f7907dd1433"}, {"code": "(fn [& args]\n  (reduce (fn [acc curr]\n            (if (> curr acc)\n              curr\n              acc)) args))", "problem": 38, "user": "52e52f3ce4b09f7907dd1459"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "problem": 38, "user": "52e276d9e4b09f7907dd1436"}, {"code": "(fn my-max [f & more]\n   (loop [m f coll more]\n      (if (zero? (count coll))\n         m\n         (if (< m (first coll))\n            (recur (first coll) (rest coll))\n            (recur m (rest coll))))))", "problem": 38, "user": "4fb99483e4b081705acca2da"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args ) )", "problem": 38, "user": "52d33ac5e4b099d49816f0c0"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "52e73b36e4b09f7907dd1483"}, {"code": "#(reduce (fn [x y] (if (< x y) y x)) %&)", "problem": 38, "user": "50ee68fce4b06330c1f87c59"}, {"code": "(fn[x & xs] (reduce #(if (< %1 %2) %2 %1 ) x xs))", "problem": 38, "user": "52e614b8e4b09f7907dd1469"}, {"code": "(fn biggest-value [& input]\n    (reduce (fn [x y] (if (> x y) x y)) input)\n)", "problem": 38, "user": "52e12aa0e4b09f7907dd1419"}, {"code": "#(last (sort %&))", "problem": 38, "user": "52ad68f5e4b0c58976d9ac94"}, {"code": "#(reduce (fn [acc x] (if (> x acc) x acc) ) %&)", "problem": 38, "user": "52dc2bc8e4b09f7907dd13ca"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4ea8570f535d7eef308072f8"}, {"code": "(fn [x & xs] \n  (reduce \n   \n    #(if (> %2 %) %2 %)\n   \n   x xs\n  )\n)", "problem": 38, "user": "52dc55e2e4b09f7907dd13cd"}, {"code": "(fn my-max [& s]\n        (loop [sq s m (first s)]\n          (if (empty? sq) m\n            (if (> (first sq) m)\n              (recur (rest sq) (first sq))\n              (recur (rest sq) m)))))", "problem": 38, "user": "526fc549e4b03e8d9a4a7380"}, {"code": "(fn[x & xs]\n  (if xs\n    (let [y (first xs)]\n      (recur (if (> x y) x y) (next xs)))\n    x))", "problem": 38, "user": "52e669d7e4b09f7907dd1475"}, {"code": "(fn [& args]\n  (reduce #(if (> % %2) % %2) args))", "problem": 38, "user": "52e82e49e4b09f7907dd1497"}, {"code": "(fn [& x]\n  (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "4fc4541ae4b081705acca348"}, {"code": "(fn maior [valor & valores]\n  (if (empty? valores)\n    valor\n    (if (> valor (first valores))\n        (apply maior (cons valor (rest valores)))\n        (apply maior valores))))", "problem": 38, "user": "52bdd135e4b07a9af579230a"}, {"code": "(fn [& coll] (reduce (fn [a b] (if (> a b) a b)) coll))", "problem": 38, "user": "52e814fee4b09f7907dd1493"}, {"code": "(fn [& items]\n  (reduce\n    (fn\n      [left right]\n      (if (> left right)\n        left\n        right))\n    items))", "problem": 38, "user": "52e94348e4b09f7907dd14a9"}, {"code": "(fn [ & rest](reduce (fn [a b] (if (> a b) a b)) rest))", "problem": 38, "user": "52dfe1d2e4b09f7907dd1406"}, {"code": "(comp last sort list)", "problem": 38, "user": "52e4361fe4b09f7907dd144d"}, {"code": "(fn [& args] (#(-> args sort last)))", "problem": 38, "user": "52e3e6a8e4b09f7907dd1448"}, {"code": "(fn [& args] (last (sort < (first (list args)))))", "problem": 38, "user": "52e54040e4b09f7907dd145c"}, {"code": "(fn [& x] \n  (\n   (fn greater [coll g]\n      (if-let [f (first coll)] \n    \t(if (> f g)\n          (greater (rest coll) f)\n          (greater (rest coll) g))\n        g)) x 0)\n)", "problem": 38, "user": "52b9c5e8e4b07a9af57922c2"}, {"code": "(fn my-max [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "52cb19abe4b07d0d72b27348"}, {"code": "(fn [& xs] (reduce (fn [m c] (if (< m c) c m)) xs))", "problem": 38, "user": "4ef9c8f9535dced4c769f26b"}, {"code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "problem": 38, "user": "52eba5fee4b0705949c44442"}, {"code": "#(-> %&\n     sort\n     last)", "problem": 38, "user": "51d42f44e4b013d740b70ddb"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "52cee992e4b07d0d72b27395"}, {"code": "(fn mmax [ & list ] (reduce #(if (>= %1 %2) %1 %2 ) -1000 list))", "problem": 38, "user": "51f81925e4b09be9c177e526"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "52ebdc9be4b0705949c44444"}, {"code": "(fn\n   [& res]\n   (reduce #(if(> % %2) % %2) res))", "problem": 38, "user": "529223cbe4b0239c8a67af26"}, {"code": "(fn [& args]\n  (loop [biggest (first args) args (rest args)]\n    (if-not (seq args) biggest\n      (recur (if (> biggest (first args)) biggest (first args))\n             (rest args)))))", "problem": 38, "user": "50232eeae4b0b5d8b1bd2397"}, {"code": "(fn [& args] (reduce (fn [a b] (if (< a b) b a)) args))", "problem": 38, "user": "52ec2b9ae4b0705949c4444f"}, {"code": "(fn [& s] (last (sort s)))", "problem": 38, "user": "52e75667e4b09f7907dd1485"}, {"code": "(fn [head & tail]\n  (reduce #(if (< %1 %2) %2 %1) head tail))", "problem": 38, "user": "52e961d6e4b09f7907dd14ad"}, {"code": "(comp last sort list)", "problem": 38, "user": "52d660eae4b09f7907dd1356"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "52d1e364e4b0d9f9285948e7"}, {"code": "(fn [& args] (reduce (fn [x y] (if (< x y) y x)) 0 args))", "problem": 38, "user": "529dfc6de4b04e0c58e87b8a"}, {"code": "(fn [a & r] \n  (reduce \n   #(if (> %1 %2) \n      %1 \n      %2) \n   (concat [a] r)))", "problem": 38, "user": "504f0cb6e4b0e7ad84dbc4b3"}, {"code": "(fn[& nos](reduce (fn[v1 v2] (if (> v1 v2) v1 v2)) nos))", "problem": 38, "user": "52e68e61e4b09f7907dd1479"}, {"code": "(fn my-max [& args]\n  (loop [maxx (first args)\n         rest-args (rest args)]\n    (if (empty? rest-args)\n      maxx\n      (let [second (first rest-args)\n            local-max (if (> second maxx) second maxx)\n            other (rest rest-args)]\n          (recur local-max other)))))", "problem": 38, "user": "52ee46e5e4b05e3f0be25ec5"}, {"code": "(fn [f & r]\n  (reduce #(if (> %1 %2) %1 %2) f r))", "problem": 38, "user": "52efd3d9e4b05e3f0be25ed4"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "52d6590ee4b09f7907dd1352"}, {"code": "(fn [& nums]\n  (reduce #(if (> %2 %1) %2 %1) nums))", "problem": 38, "user": "52a32b52e4b04e0c58e87bfc"}, {"code": "(fn [& coll] (reduce (fn [a b] (if (< a b) b a)) coll))", "problem": 38, "user": "52f07ccee4b05e3f0be25edf"}, {"code": "(fn maximum [& nums]\n  (if (= (count nums) 1)\n    (first nums)\n    (if (> (first nums) (second nums))\n      (apply maximum (cons (first nums) (rest (rest nums))))\n      (apply maximum (rest nums)))))", "problem": 38, "user": "52ec1dfbe4b0705949c4444b"}, {"code": "(fn [& _] (reduce #(if (> %1 %2) %1 %2) 0 _))", "problem": 38, "user": "52f1b82ae4b05e3f0be25eee"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "52570aeae4b0541d1855ba42"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "51d4331ce4b013d740b70ddc"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "problem": 38, "user": "52dbfe84e4b09f7907dd13c9"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "52c00e4fe4b07a9af5792342"}, {"code": "(fn [& in] (reduce #(if (> %1 %2) %1 %2) in))", "problem": 38, "user": "52cb94e5e4b07d0d72b2734e"}, {"code": "(fn [& a] (last (sort a)))", "problem": 38, "user": "52da20c7e4b09f7907dd13b3"}, {"code": "(fn [& args] (reduce #(if(> %1 %2) %1 %2) args))", "problem": 38, "user": "528f82d8e4b0239c8a67aef4"}, {"code": "(fn [& args] (last (sort args)) )", "problem": 38, "user": "52bf6946e4b07a9af5792334"}, {"code": "#(last (sort %&))", "problem": 38, "user": "52f1bc81e4b05e3f0be25eef"}, {"code": "(fn [& seq] (reduce  #(if (> %1 %2 ) %1 %2) seq))", "problem": 38, "user": "52f528f0e4b05e3f0be25f2a"}, {"code": "(fn [f & r] (reduce #(if (> %1 %2) %1 %2) (cons f r)))", "problem": 38, "user": "52d7f9a8e4b09f7907dd1381"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "52a5a8ebe4b0c58976d9abed"}, {"code": "(fn [& c] (reduce #(if (> %1 %2) %1 %2) c))", "problem": 38, "user": "52f69565e4b047fd55836fb9"}, {"code": "(comp last sort list)", "problem": 38, "user": "52f4fae4e4b05e3f0be25f27"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "51ab4082e4b04e3dc0c27b31"}, {"code": "(fn [& args] \n  (let [x (sort args)]\n    (last x)))", "problem": 38, "user": "52f4580de4b05e3f0be25f21"}, {"code": "(fn [& z](reduce (fn [x y] (if (< x y) y x)) z))", "problem": 38, "user": "529c6995e4b04e0c58e87b61"}, {"code": "(fn foo [& args] (loop [pos 1, maxVal (first args)] (cond (= pos (count args)) maxVal\n                                          (> (nth args pos) maxVal) (recur (+ pos 1) (nth args pos))\n                                          :true (recur (+ pos 1) maxVal))))", "problem": 38, "user": "52f5eefbe4b09b582c12c9cb"}, {"code": "(fn [& numbers]\n      (reduce #(if (> %1 %2) %1 %2) numbers))", "problem": 38, "user": "4feaa579e4b0140c20fb9c0b"}, {"code": "(fn [& args] (first (sort > args)))", "problem": 38, "user": "52f10094e4b05e3f0be25ee8"}, {"code": "(fn [a & xs] (reduce (fn [a b] (if (< a b) b a)) (cons a xs)))", "problem": 38, "user": "52f182d8e4b05e3f0be25eed"}, {"code": "(fn m [start & args]\n  (reduce #(if (> %2 %1) %2 %1) start args))", "problem": 38, "user": "4fe49706e4b0e8f79898feb7"}, {"code": "(fn f38 [& a]\n  (reduce #(if (> %1 %2) %1 %2) a))", "problem": 38, "user": "52c08c59e4b07a9af5792351"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "52e161e8e4b09f7907dd1420"}, {"code": "(fn [& args] (reduce (fn[x y] (if (> x y) x y)) args))", "problem": 38, "user": "52f648eee4b047fd55836fb6"}, {"code": "#(first (sort > %&))", "problem": 38, "user": "52efc98de4b05e3f0be25ed2"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "52f5f8b4e4b09b582c12c9cc"}, {"code": "(fn [& args] \n  (reduce \n     (fn [x y] (if (< x y) y x) ) args))\n; (fn [x] (mod number x)) #(...) => (fn [args] (...))  (fn [& args] (reduce (fn [x y] (if (< x y) y x) ) args))", "problem": 38, "user": "52c1ef8fe4b07a9af579236e"}, {"code": "(fn [& c]\n    (reduce (fn [acc e]\n              (if (>= acc e) acc e)) c))", "problem": 38, "user": "52f8f4d1e4b047fd55836fde"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "52f882c4e4b047fd55836fd1"}, {"code": "(fn [x & xs] (reduce (fn [x y] (if (> x y) x y)) x xs))", "problem": 38, "user": "52f89125e4b047fd55836fd4"}, {"code": "#(-> %& sort last)", "problem": 38, "user": "52f8b2a2e4b047fd55836fda"}, {"code": "(fn [& x] (reduce (fn [a b] (if (> a b) a b)) x))", "problem": 38, "user": "52eee533e4b05e3f0be25ecb"}, {"code": "(fn find-max [cmax & args]\n  (if (= (count args) 1)\n    (if (> cmax (first args)) cmax (first args))\n    (apply find-max (if (> cmax (first args)) cmax (first args)) (rest args))\n    )\n  ) 0", "problem": 38, "user": "52e980b3e4b09f7907dd14af"}, {"code": "(fn [& params] (loop [lst params maxn 0]\n                 (if (empty? lst)\n                   maxn\n                   (recur (rest lst) (if (> maxn (first lst))\n                                       maxn\n                                       (first lst))))))", "problem": 38, "user": "52f304b4e4b05e3f0be25f07"}, {"code": "(comp last sort list)", "problem": 38, "user": "52d838bee4b09f7907dd138b"}, {"code": "(fn [& args] (loop [xs (seq args)\n        current -999999] (if (= nil (first xs)) current (if (> (first xs) current) (recur (rest xs) (first xs)) (recur (rest xs) current)))))", "problem": 38, "user": "52fa250ee4b047fd55836ff3"}, {"code": "(fn [& coll]\n  (loop [item (first coll) col (rest coll)]\n    (if (empty? col) item\n      (if (> item (first col)) (recur item (rest col))\n        (recur (first col) (rest col))))))", "problem": 38, "user": "52fb903ee4b047fd5583700b"}, {"code": "(fn ! ([x] (if (seq? x) (apply ! x) x))  ([x & more] (let [y (! more)] (if (> x y) x y))))", "problem": 38, "user": "52faec2ee4b047fd55837004"}, {"code": "(fn [a & more]\n    (cond \n     (empty? more) a\n     (> a (first more)) (recur a (rest more)) \n     :else (recur (first more) (rest more))\n     ))", "problem": 38, "user": "52fc89b2e4b047fd55837019"}, {"code": "(fn [& x] (-> x sort last))", "problem": 38, "user": "52fa8f71e4b047fd55836ffb"}, {"code": "(fn [& args]\n  (reduce #(if (> % %2) % %2) args))", "problem": 38, "user": "5240589be4b0ad64fa01031d"}, {"code": ";(fn maxx [& nums]\n;  (if (= 1 (count nums))\n;    (first nums)\n;    (if ())))\n;  \n;  \n;  (if (> newval currmax)\n;    newval\n;    currmax))\n\n(fn [& nums]\n  (reduce (fn [a b]\n            (if (> a b) a b))\n          (first nums)\n          (rest nums)))", "problem": 38, "user": "51b89503e4b050a1176cd69a"}, {"code": "(fn [& x] (case (first x) 1 8 30 30 45 67))", "problem": 38, "user": "5250777fe4b0541d1855b82e"}, {"code": "(fn [& r] (reduce #(if (> % %2) % %2) 0 r))", "problem": 38, "user": "52e32d55e4b09f7907dd143e"}, {"code": "(fn [& arg] (last (sort arg)))", "problem": 38, "user": "52f9ce6de4b047fd55836ff0"}, {"code": "(fn max1 \n  [& x]\n  (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "52d96f7ce4b09f7907dd13a8"}, {"code": "#(reduce (fn [mx n] (if (> n mx) n mx)) %& )", "problem": 38, "user": "528a2de7e4b0239c8a67ae71"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "52f8fa75e4b047fd55836fdf"}, {"code": "(fn [& xs]\n  (reduce (fn [prev cur] (if (> prev cur) prev cur))\n          xs\n  )\n)", "problem": 38, "user": "52f2b450e4b05e3f0be25efd"}, {"code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) s))", "problem": 38, "user": "51a3b135e4b0e77c4ca60bf6"}, {"code": "#(reduce (fn [x y]\n          (if (< x y)\n            y\n            x)\n          )\n        %&)", "problem": 38, "user": "52f8b86de4b047fd55836fdb"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "52eb400ee4b0705949c4443b"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "52d068c9e4b07d0d72b273b9"}, {"code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) coll) )", "problem": 38, "user": "52f381f3e4b05e3f0be25f10"}, {"code": "(fn[& args](last (sort args)))", "problem": 38, "user": "5300aa1de4b0d8b024fd3710"}, {"code": "(fn [& coll] (reduce #(if (and %1 (> %1 %2)) \n                     %1\n                     %2) coll))", "problem": 38, "user": "52fcfeeee4b047fd55837027"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "5300f68de4b0d8b024fd3714"}, {"code": "(fn my-max\n  [& args]\n  (last (sort args)))", "problem": 38, "user": "5300b750e4b0d8b024fd3711"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "5302b580e4b0d8b024fd3732"}, {"code": "#(reduce (fn [x y] (if (> x y) x y)) %&)", "problem": 38, "user": "512587ade4b05d10e3e395fb"}, {"code": "#(reduce (fn [x y] (if (> x y) x y)) %& )", "problem": 38, "user": "5176afd2e4b085adf681d889"}, {"code": "(fn [& c] (reduce #(if (<= %1 %2) %2 %1) c))", "problem": 38, "user": "52fb64b7e4b047fd55837009"}, {"code": "#(last (sort %&))", "problem": 38, "user": "5302b580e4b0d8b024fd3733"}, {"code": "(fn [& s] (reduce #(if (> %2 %1) %2 %1) s))", "problem": 38, "user": "5302bb37e4b0d8b024fd3734"}, {"code": "(fn[& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "518c1079e4b0f028e99addf8"}, {"code": "(fn [& n] (reduce #(if (> %1 %2) %1 %2)  n))", "problem": 38, "user": "52ecd34ee4b0705949c44457"}, {"code": "(fn tess \n   ([x] x)\n   ([x y] (if (> x y) x y))\n   ([x y & more] (reduce tess (tess x y) more)))", "problem": 38, "user": "52fa4f48e4b047fd55836ff7"}, {"code": "(fn [x & r] (last (sort (conj r x))))", "problem": 38, "user": "530411d1e4b0d8b024fd374c"}, {"code": "(fn [& xs]                           \n  (reduce #(if (> % %2) % %2) 0 xs))", "problem": 38, "user": "52fff1a8e4b0d8b024fd370d"}, {"code": "(fn [& v]\n  (reduce #(if (> % %2) % %2) v))", "problem": 38, "user": "52f818a6e4b047fd55836fcc"}, {"code": "(fn [x & xs]\n  (reduce (fn [acc, curr](if (> acc curr)\n             acc\n             curr)) x xs))", "problem": 38, "user": "52d2e2a9e4b099d49816f0b8"}, {"code": "(fn [& args]\n\t(first (sort > args)))", "problem": 38, "user": "52fe3a9de4b047fd55837039"}, {"code": "(fn [& args]\n  (reduce (fn [cur x]\n           (if (> cur x) cur x)) args))", "problem": 38, "user": "52facb9de4b047fd55837002"}, {"code": "(fn [& args] (loop [tmp 0 ls args] (if (empty? ls) tmp (recur (if (> (first ls) tmp) (first ls) tmp) (rest ls)))))", "problem": 38, "user": "5301157ae4b0d8b024fd3717"}, {"code": "(fn f\n  [& args]\n  (last (sort (into [] args))))", "problem": 38, "user": "52f3af46e4b05e3f0be25f14"}, {"code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "problem": 38, "user": "4f48f587e4b0d56e7bb92be2"}, {"code": "(fn [& args]\n  (reduce #(if (> %2 %1) %2 %1) -1 args))", "problem": 38, "user": "53067bede4b02e8216869797"}, {"code": "(fn [& s] (reduce (fn [x y] (if (> x  y) x y)) s))", "problem": 38, "user": "52ffb7f2e4b0d8b024fd370b"}, {"code": "(fn[& xs](last (sort xs)))", "problem": 38, "user": "5302d79ce4b0d8b024fd3736"}, {"code": ";( fn [x & more] (reduce (fn [a b] (if (> a b) a b)) x more))\n;( fn [x & more] (reduce #(if (> %1 %2) %1 %2) x more))\n;( fn [& more] (reduce #(if (> %1 %2) %1 %2) more))\n#(last(sort %&))", "problem": 38, "user": "53029281e4b0d8b024fd372e"}, {"code": "(fn [& s] (first (filter #(every? (fn [x] (>= % x)) s) s)))", "problem": 38, "user": "52c60945e4b0c2d177d62108"}, {"code": "(fn [& nums]\n  (reduce (fn [a b]\n            (if (> a b) a b)) nums))", "problem": 38, "user": "530578ede4b0d8b024fd3760"}, {"code": "(fn [& s]\n  (reduce\n    #(if (> %1 %2)\n       %1\n       %2)\n    (first s) s))", "problem": 38, "user": "53070615e4b02e821686979e"}, {"code": ";;threading macro ->\n;;$(\".class\").find(\"a\").children().first();\n\n(fn [& xs] (-> xs (list*) (sort) (last)))", "problem": 38, "user": "5307e4ece4b02e82168697a9"}, {"code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))\n;(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "52dafe13e4b09f7907dd13c2"}, {"code": "(fn [& more] (last (apply sorted-set more)))", "problem": 38, "user": "52a360a3e4b04e0c58e87bfe"}, {"code": "(fn four-clojure\n  [head & more]\n  (if (empty? more)\n    head\n    (let [x head\n        y (first more)]\n    (if (> x y)\n        (recur x (rest more))\n        (recur y (rest more))))))", "problem": 38, "user": "53010e8ee4b0d8b024fd3716"}, {"code": "(fn [& nrs] (reduce #(if (> % %2) % %2) nrs))", "problem": 38, "user": "52f53589e4b05e3f0be25f2c"}, {"code": "(fn my-max [& xs]\n  (let [x (first xs) ys (rest xs)]\n  \t(if (empty? ys)\n      x\n      (let [y (apply my-max ys)]\n        (if (> x y)\n          x\n          y)))))", "problem": 38, "user": "52fafd5ce4b047fd55837006"}, {"code": "(fn [& x](first (sort > x)))", "problem": 38, "user": "52f9deefe4b047fd55836ff2"}, {"code": "(fn [& x]\n  (cond (empty? (rest x)) (first x)\n        (> (first x) (first (rest x))) (recur (cons (first x) (rest (rest x))))\n        (<= (first x) (first (rest x))) (recur (rest x))))", "problem": 38, "user": "5306e4b4e4b02e821686979d"}, {"code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "53080067e4b02e82168697ac"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "52c0e3d1e4b07a9af5792358"}, {"code": "(fn calculate-max[& l] (reduce (fn [x y] (if (> x y) x y)) l))", "problem": 38, "user": "530b8ce1e4b02e82168697cd"}, {"code": "(fn ! [& args] (first (sort > args)))", "problem": 38, "user": "5306b349e4b02e8216869799"}, {"code": ";(fn mmm[  & more]\n     ;( reduce #( if (> %1 %2) %1 %2 ) more))\n     \n(fn [& args] (last (sort args)))", "problem": 38, "user": "52f426fce4b05e3f0be25f1e"}, {"code": "(fn [& xs]\n  (reduce (fn [acc x] (if (> x acc) x acc))\n          xs))", "problem": 38, "user": "4dad8a6dc9a9d6ed1399dc57"}, {"code": "(fn [& args]\n  (reduce (fn [x y]\n            (if (> y x) y x))\n          args))", "problem": 38, "user": "530c4903e4b02e82168697da"}, {"code": "(fn [& args] (reduce (fn [m n] (if (< m n) n m)) -1 args))", "problem": 38, "user": "530c462ae4b02e82168697d9"}, {"code": "(fn [& x]\n   ((fn mx [curr x]\n     (if (empty? x)\n       curr\n       (if (nil? curr)\n         (mx (first x) (rest x))\n         (if (> (first x) curr)\n           (mx (first x) (rest x))\n           (mx curr (rest x))\n         )\n       )\n      )\n   ) nil x)\n)", "problem": 38, "user": "5303a027e4b0d8b024fd3745"}, {"code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "problem": 38, "user": "530caf86e4b02e82168697df"}, {"code": "(fn m\n  [a b & rest]\n  (reduce #(if (> %2 %1) %2 %1) (cons a (cons b rest))))", "problem": 38, "user": "52c45ac8e4b0c2d177d620d9"}, {"code": "#(last (sort %&))", "problem": 38, "user": "52f7ac81e4b047fd55836fc6"}, {"code": "(fn [& s] ( reduce #(if (> %2 %1) %2 %1) s))", "problem": 38, "user": "52761edae4b03e8d9a4a74d4"}, {"code": "(fn [& x]\n  (when (first x)\n    (loop\n      [best (first x)\n       s x]\n      (if (= nil (first s))\n        best\n        (recur\n         (if (> (first s) best)\n           (first s)\n           best)\n         (rest s))))))", "problem": 38, "user": "530d85dee4b08068f379eca8"}, {"code": "(fn [& params] (reduce #(if (> % %2) % %2) params))", "problem": 38, "user": "530b8580e4b02e82168697cc"}, {"code": "(fn max-38 [f & r] (reduce #(if (> %1 %2) %1 %2)f r))", "problem": 38, "user": "530cb5b8e4b02e82168697e0"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "51583ee4e4b0a069fd272c72"}, {"code": "(fn [& args] (->> args (apply sorted-set) last))", "problem": 38, "user": "530e9729e4b08068f379ecbc"}, {"code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) args))", "problem": 38, "user": "530e74c9e4b08068f379ecb9"}, {"code": "(fn max-value [& x]\n  (if (>= (count x) 2)\n    (if (> (first x) (apply max-value (rest x)))\n      (first x)\n      (apply max-value (rest x)))\n    (first x)))", "problem": 38, "user": "53098be4e4b02e82168697b7"}, {"code": "(fn [& lst] (first (reverse (sort lst))))", "problem": 38, "user": "530e80dfe4b08068f379ecbb"}, {"code": "(fn [& args] \n  (first (reverse (sort args))))", "problem": 38, "user": "52ed7458e4b0a18b0f5dd9ed"}, {"code": "(fn [& arg]\n  (loop  [seq arg\n          m 0]\n    (if (empty? (rest seq))\n      (if (< (first seq) m)\n        m\n        (first seq))\n      (recur (rest seq) (if (< (first seq) m)m(first seq))))))", "problem": 38, "user": "530b9714e4b02e82168697cf"}, {"code": "(fn [& x] (reduce (fn [a b] (if (> a b) a b)) x))", "problem": 38, "user": "53034738e4b0d8b024fd373e"}, {"code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "problem": 38, "user": "50f07f6ae4b0bdaecbb47dc4"}, {"code": "(fn [& xs] \n  (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "52ee0de4e4b05e3f0be25ec1"}, {"code": "#(last (sort %&))", "problem": 38, "user": "52fd56e3e4b047fd5583702c"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "53110f32e4b08068f379ece4"}, {"code": "#(last (sort %&))", "problem": 38, "user": "530ccb1de4b08068f379ec99"}, {"code": "(fn [& args]\n  \t(last (sort args)))", "problem": 38, "user": "530e69a8e4b08068f379ecb8"}, {"code": "(fn [& l] (reduce #(if (> %1 %2) %1 %2) l))", "problem": 38, "user": "5301a13ae4b0d8b024fd371e"}, {"code": "(fn [& args] (reduce #(if (> % %2) % %2) args))", "problem": 38, "user": "530394b4e4b0d8b024fd3743"}, {"code": "(fn hey2 [& args] (if (empty? (rest args)) (first args) (apply hey2 (if (> (first args) (first (rest args))) (concat (list (first args)) (rest (rest args))) (rest args)))))", "problem": 38, "user": "52e17e66e4b09f7907dd1423"}, {"code": "#(last (sort %&))", "problem": 38, "user": "530e5469e4b08068f379ecb7"}, {"code": "(fn my-max\n  ([x y] (if (> x y) x y))\n  ([x y & more] (apply my-max (my-max x y) more)))", "problem": 38, "user": "52f32c24e4b05e3f0be25f0d"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "52fd5121e4b047fd5583702b"}, {"code": "(fn [& lst] (last (sort lst)))", "problem": 38, "user": "5313c007e4b08068f379ed0e"}, {"code": "(fn [maximum & x]\n   (if (and (first x) (rest x))\n   (if (> (first x) maximum)\n      (recur (first x) (rest x))\n      (recur maximum (rest x))\n\n     \n     ) maximum)\n  )", "problem": 38, "user": "5312807fe4b08068f379ecfc"}, {"code": "(fn [& paras]\n  (reduce (fn [a b]\n          (if (> a b)\n            a\n            b)) paras))", "problem": 38, "user": "5313de03e4b08068f379ed10"}, {"code": "#(last (sort %&))", "problem": 38, "user": "52f89620e4b047fd55836fd5"}, {"code": "#(first (sort > %&))", "problem": 38, "user": "4ff4bed0e4b0678c553fc35f"}, {"code": "(fn test [& args] (last (sort args)))", "problem": 38, "user": "531395ece4b08068f379ed0a"}, {"code": "(fn my-max\n  ([] nil)\n  ([head & tail]\n  (if (empty? tail) head\n       (let [max-tail (apply my-max tail)]\n         (if (> head max-tail) head max-tail)))))", "problem": 38, "user": "5310e7aee4b08068f379ecdc"}, {"code": "(fn [& params] (reduce (fn [inj, num] (if (< inj num) num inj)) (vec params)))", "problem": 38, "user": "52fc34cee4b047fd55837015"}, {"code": "(fn [& args] (first (sort > (vec args))))", "problem": 38, "user": "52e683c0e4b09f7907dd1477"}, {"code": "(fn [& ints] (reduce #(if (> % %2) % %2) ints))", "problem": 38, "user": "4eed26af535d93acb0a668bb"}, {"code": "(fn [& s] (-> s sort last))", "problem": 38, "user": "5300158ae4b0d8b024fd370f"}, {"code": "(comp last sort list)", "problem": 38, "user": "53153466e4b08068f379ed23"}, {"code": "(fn [& numbers]\n  (reduce (fn [m x] (if (> m x) m x)) Integer/MIN_VALUE numbers)\n  )", "problem": 38, "user": "531490bde4b08068f379ed17"}, {"code": "(fn [& args] (first (reverse (sort args))))", "problem": 38, "user": "5314c8f7e4b08068f379ed1d"}, {"code": "(fn [& args] \n  (loop [n -9999999 s args]\n    (if (empty? args) nil\n      (if (empty? s) n\n        (if (> (first s) n)\n          (recur (first s) (rest s))\n          (recur n (rest s))\n        )))))", "problem": 38, "user": "53069e16e4b02e8216869798"}, {"code": "(fn [& args] (first (sort > args)))", "problem": 38, "user": "5314318ee4b08068f379ed13"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "5313a2bfe4b08068f379ed0b"}, {"code": "(fn [& xs] \n  (reduce (fn [a b] (if (> a b) a b)) xs))", "problem": 38, "user": "5316cdcae4b08068f379ed4b"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "5315a4f0e4b08068f379ed2e"}, {"code": "(fn [& args] (reduce #(if (< % %2) %2 %) args))", "problem": 38, "user": "5315b53ee4b08068f379ed31"}, {"code": "(fn [& b]\n  (reduce #(if (> %1 %2) %1 %2) b))", "problem": 38, "user": "531488f3e4b08068f379ed16"}, {"code": "(fn [& numbers]\n  (reduce (fn [x1 x2]\n            (if (> x1 x2)\n              x1\n              x2))\n          (first numbers) \n          (rest numbers)))", "problem": 38, "user": "4ff505c8e4b0678c553fc364"}, {"code": "(fn [a b & more]\n  (cond (< a b) b :else a))", "problem": 38, "user": "52be0263e4b07a9af579230e"}, {"code": "(fn [& args] (first (sort > args)))", "problem": 38, "user": "523acf7be4b0aa37f082ed90"}, {"code": "(fn [& args] (reduce (fn [a b] (if (< a b) b a)) Integer/MIN_VALUE args))", "problem": 38, "user": "53162640e4b08068f379ed40"}, {"code": "(fn maximum\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n   (reduce maximum (maximum x y) more)))", "problem": 38, "user": "5311b367e4b08068f379eced"}, {"code": "(fn [& n] (reduce (fn [x y] (if (> x y) x y)) n))", "problem": 38, "user": "507330e6e4b0e3170b5a8698"}, {"code": "(comp last sort list)", "problem": 38, "user": "4f320253e4b0d6649770a08d"}, {"code": "(fn [& args]\n      (last (sort args))\n   )", "problem": 38, "user": "531843c1e4b08068f379ed6c"}, {"code": "(fn [& xs] (reduce #(if (< % %2) %2 %) (seq xs)))", "problem": 38, "user": "51eee71ae4b0871fa145d992"}, {"code": "(fn [head & tail]\n        (loop [maximum head\n               params tail]\n          (if (empty? params)\n            maximum\n            (if (> maximum (first params))\n              (recur maximum (rest params))\n              (recur (first params) (rest params))))))", "problem": 38, "user": "5311081be4b08068f379ece3"}, {"code": "(fn big [a b & c]\n         (if (>= a b) \n           (reduce big (conj c a))\n           (reduce big (conj c b)) ))", "problem": 38, "user": "53120cb5e4b08068f379ecf0"}, {"code": "(fn compare [& x] (let [f (first x) s (second x) r (rest (rest x))]\n          (if (empty? r)\n          \t(if (< f s)\n              s\n              f\n            )\n            (if (< f s)\n              (apply compare (cons s r))\n              (apply compare (cons f r))\n              )\n          )\n                  ))", "problem": 38, "user": "52e9dbe5e4b09f7907dd14b4"}, {"code": "(fn  [& args] \n  (last (sort (apply vector args))))", "problem": 38, "user": "53150a4de4b08068f379ed22"}, {"code": "(fn [& r]\n (reduce #(if (> %1 %2) %1 %2) r))", "problem": 38, "user": "53134005e4b08068f379ed07"}, {"code": "(comp first reverse sort list)", "problem": 38, "user": "53023bf3e4b0d8b024fd3726"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "52474133e4b05ef8e38e635e"}, {"code": "(fn mx [& values]\n  (reduce\n   (fn aux\n     ([] nil)\n     ([x y] (if (> y x) y x)))\n   values))", "problem": 38, "user": "5315ec83e4b08068f379ed39"}, {"code": "(fn [& args] (last (sort (seq args))))", "problem": 38, "user": "531576b4e4b08068f379ed29"}, {"code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) s))", "problem": 38, "user": "531619c1e4b08068f379ed3d"}, {"code": "(fn [& args]\n   (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "531b8c27e4b08068f379ed90"}, {"code": "(fn [& x] (first (sort > x)))", "problem": 38, "user": "52265e41e4b04e78ff2e1981"}, {"code": "(fn [& args] (first (reverse (sort args))))", "problem": 38, "user": "53164bf6e4b08068f379ed44"}, {"code": "(fn [& c]\n  (loop [i 1\n         m (nth c 0)]\n    (if (= i (count c))\n      m\n      (if (> m (nth c i))\n        (recur (inc i) m)\n        (recur (inc i) (nth c i))))))", "problem": 38, "user": "53183c38e4b08068f379ed6b"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "531c7f0de4b08068f379eda4"}, {"code": "(fn mymax\n  [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "531a3914e4b08068f379ed88"}, {"code": "(fn[& rest] (last (sort rest)))", "problem": 38, "user": "531bfb69e4b08068f379ed97"}, {"code": "(fn [& els] (last (sort els)))", "problem": 38, "user": "531d53dbe4b08068f379edae"}, {"code": "(fn [ & nums ]\n     (reduce \n      (fn [num1 num2]\n          (if (> num1 num2)\n             num1\n           num2) ) nums) )", "problem": 38, "user": "530c15f7e4b02e82168697d6"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "531c57ace4b08068f379ed9b"}, {"code": "(fn maxi [n & nums]\n  (if (empty? nums)\n    n\n    (let [other (apply maxi nums)]\n      (if (> n other) n other)\n    )\n  )\n)", "problem": 38, "user": "531ba143e4b08068f379ed91"}, {"code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "529f82b3e4b04e0c58e87baf"}, {"code": "(fn [x & rs]\n  (let [a-sec (vec rs)]\n    (reduce \n      (fn [current a-next]\n      \t(if (> current a-next) current a-next)) \n      x a-sec)))", "problem": 38, "user": "531dc21be4b08068f379edb1"}, {"code": "(fn [f & r] (reduce #(if (> %1 %2) %1 %2) f r))", "problem": 38, "user": "52dd4fb4e4b09f7907dd13df"}, {"code": "(fn foo [& x]\n  (loop [vals x m 0]\n    (if (empty? vals) m\n      (if (> (first vals) m) (recur (rest vals) (first vals))\n      (recur (rest vals) m)\n      )\n    )\n  )\n)", "problem": 38, "user": "52fba50ce4b047fd5583700d"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "531dfaf5e4b08068f379edb3"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "52d2f457e4b099d49816f0ba"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) 0 x))", "problem": 38, "user": "531c0619e4b08068f379ed98"}, {"code": "(fn myMax \n   ([x y] \n     (if(> x y) x y))\n   ([x y & more]\n     (reduce myMax (myMax x y) more)\n))", "problem": 38, "user": "4fda0678e4b05e33b9224f44"}, {"code": "(fn [& args] \n(loop [m (first args) other (rest args)]\n  (if (empty? (rest other))\n    (if (> (first other) m) (first other) m)\n    (if (> (first other) m)\n     (recur (first other) (rest other)) \n     (recur m (rest other))))\n  \n))", "problem": 38, "user": "531ff852e4b08068f379edca"}, {"code": "(fn [x & more] (reduce #(if (> % %2) % %2) x more))", "problem": 38, "user": "531308c1e4b08068f379ed04"}, {"code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "problem": 38, "user": "531f1e63e4b08068f379edc2"}, {"code": "(fn [& v] (reduce (fn [x y] (if (< x y) y x)) v ))", "problem": 38, "user": "53219cece4b09d4e7a9b54b7"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "531f7a2de4b08068f379edc6"}, {"code": "(fn [x & more] \n  (loop [mx x\n         more (seq more)]\n    (if-let [cur (first more)]\n      (recur (if (> mx cur) mx cur) (next more))\n      mx)))", "problem": 38, "user": "531e5c81e4b08068f379edba"}, {"code": "(fn [ & vs ] (reduce (fn [x y] (if (> x y) x y)) vs))", "problem": 38, "user": "5085bfdae4b004985b776e53"}, {"code": "(fn [& args]\n  (loop [coll args\n         highest 0]\n    (if (seq coll)\n      (if (> (first coll) highest)\n        (recur (rest coll) (first coll))\n        (recur (rest coll) highest))\n      highest)))", "problem": 38, "user": "5320bc6ae4b09d4e7a9b54a7"}, {"code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "52a315a9e4b04e0c58e87bf9"}, {"code": "(fn  [x & m]\n  (reduce #(if (>= %1 %2)\n             %1\n             %2)\n      x    m))", "problem": 38, "user": "5322d370e4b09d4e7a9b54c7"}, {"code": "(fn [x1 x2 & xs]\n  (let [biggest (if (> x1 x2) x1 x2)]\n      (if (empty? xs)\n        biggest\n        (recur biggest (first xs) (rest xs) )\n      )\n  )\n)", "problem": 38, "user": "531cd41ee4b08068f379eda9"}, {"code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) coll))", "problem": 38, "user": "532347dde4b09d4e7a9b54cc"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args)\n)", "problem": 38, "user": "5323a414e4b09d4e7a9b54d1"}, {"code": "(fn my-max [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "531cdafbe4b08068f379edaa"}, {"code": "(fn [x & xs]\n  (reduce #(if (> %1 %2) %1 %2) x xs))", "problem": 38, "user": "4fd5418ee4b0d4de60cee372"}, {"code": "(fn [& args](last (sort args)))", "problem": 38, "user": "532418f3e4b09d4e7a9b54d8"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "53244c9de4b09d4e7a9b54db"}, {"code": "(fn maximum-value-solution\n  [& args] ;; update args as needed\n  ;; Write a function which takes a variable number of parameters and returns the maximum value.\n  (loop [my-max 0, ls args]\n    (if (empty? ls) my-max\n        (let [first (first ls)\n              new-max (if (> first my-max) first my-max)]\n          (recur new-max (rest ls))))))", "problem": 38, "user": "529f739fe4b04e0c58e87bad"}, {"code": "(fn [x & r] ( last(sort(conj r x)) ))", "problem": 38, "user": "531f0a26e4b08068f379edbf"}, {"code": "(fn [& args] \n  (reduce \n   (fn [x y] (if (> x y) x y))\n   args))", "problem": 38, "user": "531cbf46e4b08068f379eda6"}, {"code": "(fn f\n  ([s] s)\n ([x & xs]\n   (let [max_last (apply f xs)]\n   (if (> x max_last) x max_last))\n  )\n )", "problem": 38, "user": "5302ac7fe4b0d8b024fd3731"}, {"code": "(fn [& args]\n  (reduce (fn [first second]\n            (if (> first second)\n              first\n              second))\n          args))", "problem": 38, "user": "518ee4f9e4b0cd6ff51676a5"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "530af62ee4b02e82168697c4"}, {"code": "(fn [& vals] (reduce #(if (>= %1 %2) %1 %2) vals))", "problem": 38, "user": "5326c5f7e4b09d4e7a9b54f2"}, {"code": "(fn my-max \n  [n & more]\n  (if (not (seq more)) \n    n\n    (if (>= n (first more))\n      n\n      (apply my-max more))))", "problem": 38, "user": "53028354e4b0d8b024fd372b"}, {"code": "#(last (sort %&))", "problem": 38, "user": "5320cd49e4b09d4e7a9b54a8"}, {"code": "(fn [& a]\n  (loop [nums a -m 0]\n    (if (empty? nums)\n      -m\n      (recur (rest nums) (if (> -m (first nums))\n                           -m\n                           (first nums))))))", "problem": 38, "user": "4ef2d6c5535dced4c769f222"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "5327c591e4b09d4e7a9b54ff"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "52e821efe4b09f7907dd1495"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "51bdebece4b0ff155d51d2b7"}, {"code": "(fn max2 \n   ([x] x)\n   ([x y] (if (> x y) x y))\n   ([x y & rest] (max2 x (apply max2 y rest))))", "problem": 38, "user": "53286f84e4b09d4e7a9b5505"}, {"code": "(fn [x & xs] \n  ( reduce \n    #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "51493fd0e4b05514c84b7cce"}, {"code": "(fn mm\n  ([a b] (if (> a b) a b))\n  ([a b c] (mm (mm a b) c))\n  ([a b c d] (mm (mm (mm a b) c) d)))", "problem": 38, "user": "5321008ee4b09d4e7a9b54aa"}, {"code": "(let [inner-max (fn [a b] (if (> a b) a b))]\n  (fn [& args] (reduce inner-max args)))", "problem": 38, "user": "5328febee4b09d4e7a9b550d"}, {"code": "(fn [& x] (- (apply min (map - x))))", "problem": 38, "user": "50a95127e4b07e35d68b27af"}, {"code": "(fn [& y] (last (vec (sort (seq y)))))", "problem": 38, "user": "531016d0e4b08068f379ecd1"}, {"code": "#(reduce (fn [x y] (if (< x y) y x)) %&)", "problem": 38, "user": "532ab0bde4b09d4e7a9b5527"}, {"code": "(fn [& y]\n  (reduce #(if (> %1 %2) %1 %2) y))", "problem": 38, "user": "52d42021e4b09f7907dd132a"}, {"code": "(fn [& more] (reduce #(if (> % %2) % %2) more))", "problem": 38, "user": "5317e0eee4b08068f379ed64"}, {"code": "(fn [& args] (reduce #(cond (> % %2) % :else %2) args))", "problem": 38, "user": "532afdc5e4b09d4e7a9b552e"}, {"code": "(fn [& c]\n   (reduce (fn [a b] (if (> a b) a b)) c))", "problem": 38, "user": "53224d45e4b09d4e7a9b54c0"}, {"code": "(fn [& s]\n  (loop [x 0 se s]\n    (if (nil? (seq se))\n      x\n      (if (> (first se) x)\n        (recur (first se) (rest se))\n        (recur x (rest se))))))", "problem": 38, "user": "527a5b84e4b03e8d9a4a7558"}, {"code": "(fn mmax [ m & xs]\n\t(if (empty? xs)\n      m\n      (let [n (apply mmax xs)]\n        (if (> m n) m n))))", "problem": 38, "user": "532b9075e4b09d4e7a9b5533"}, {"code": "(fn [& xs] (-> xs sort last))", "problem": 38, "user": "5004034ce4b0678c553fc447"}, {"code": "(fn [& args] (first (reverse (sort (seq args)))))", "problem": 38, "user": "531c5c72e4b08068f379ed9d"}, {"code": "(fn [& ns]\n  (loop [ns ns hold 0]\n    (if (empty? ns)\n      hold\n      (if (> hold (int (first ns)))\n        (recur (rest ns) hold)\n        (recur (rest ns) (first ns))))))", "problem": 38, "user": "4dbe04b2535d020aff1edf56"}, {"code": "(fn maxit [& args]\n  (let [xx (flatten args)]\n  (cond (empty? (rest xx)) (first xx)\n        (> (first xx) (first (rest xx))) (maxit (cons (first xx) (drop 1 (rest xx))))\n        :else (maxit (rest xx)))))", "problem": 38, "user": "5325cf91e4b09d4e7a9b54e8"}, {"code": "(fn [& args] (reduce (fn [v1 v2] (if (> v1 v2) v1 v2)) args))", "problem": 38, "user": "52e44a22e4b09f7907dd144e"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "52d00521e4b07d0d72b273b3"}, {"code": "(fn\n  [& args]\n  (last (sort (into () args))))", "problem": 38, "user": "52ba447ee4b07a9af57922ce"}, {"code": "(fn [x & r]\n  (if (not (seq r))\n    x\n   (if (> (first r) x)\n    (recur (first r) (rest r))\n    (recur x (rest r))\n   )\n  )\n)", "problem": 38, "user": "532cb6bbe4b019098a6f8b33"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "51d0977fe4b067c365486352"}, {"code": "(fn [& col] (last(sort col)))", "problem": 38, "user": "5318f85ae4b08068f379ed76"}, {"code": "(fn [& coll]\n  (last (sort coll)))", "problem": 38, "user": "532b930be4b09d4e7a9b5534"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "532e2e58e4b019098a6f8b47"}, {"code": "(fn max-elememt [& elems]\n(reduce (fn [max-elem elem] (if (> elem max-elem) elem max-elem)) (first elems) elems))", "problem": 38, "user": "532686e6e4b09d4e7a9b54ef"}, {"code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "532d4760e4b019098a6f8b3a"}, {"code": "(fn [a & q] (reduce #(if (< %1 %2) %2 %1) a q))", "problem": 38, "user": "532e0b20e4b019098a6f8b45"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "532631e1e4b09d4e7a9b54ea"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "532c0507e4b09d4e7a9b553c"}, {"code": "(comp last sort list)", "problem": 38, "user": "5318594ee4b08068f379ed6d"}, {"code": "(fn [& x] (last (apply sorted-set x)))", "problem": 38, "user": "533056a4e4b019098a6f8b5b"}, {"code": "#(reduce (fn [this-max item] (if (> this-max item) this-max item)) %&)", "problem": 38, "user": "532ecd44e4b019098a6f8b49"}, {"code": "(fn mx\n          ([x] x)\n          ([x y] (if (> x y) x y))\n          ([x y & more]\n           (reduce mx (mx x y) more)))", "problem": 38, "user": "52aa524fe4b0c58976d9ac64"}, {"code": "(fn maximumvalue [& x]\n  (let [maxoftwo (fn [a b]\n                   (if (> b a)\n                     b\n                     a))]\n    (if (seq x)\n      (reduce maxoftwo x)\n      0)))", "problem": 38, "user": "532727bae4b09d4e7a9b54fa"}, {"code": "#(last (sort %&))", "problem": 38, "user": "53315c78e4b019098a6f8b67"}, {"code": "(comp last sorted-set)", "problem": 38, "user": "53307da1e4b019098a6f8b5e"}, {"code": "(fn [& xs] \n  (#(reduce (fn [a b] (if (> a b) a b)) 0 xs))\n  )", "problem": 38, "user": "52c14af1e4b07a9af5792362"}, {"code": "(fn [& c] \n\t(reduce #(if (< %1 %2) %2 %1) (first c) (rest c)))", "problem": 38, "user": "53300924e4b019098a6f8b55"}, {"code": "(fn [& args] (last (apply sort (list args))))", "problem": 38, "user": "532bce35e4b09d4e7a9b5536"}, {"code": "(fn [a & seq]\n    (reduce (fn [a other]\n                (if (> a other)\n                    a\n                    other))\n            a\n            seq))", "problem": 38, "user": "51f5539fe4b0abb92f97f9cd"}, {"code": "(fn [& xs]\n  (reduce (fn [l r] (if (> l r) l r)) xs))", "problem": 38, "user": "525ab6cfe4b0cb4875a45cf9"}, {"code": "(fn get-max [& args]\n   (reduce (fn [a b](if (< a b) b a)) args))", "problem": 38, "user": "5322d364e4b09d4e7a9b54c6"}, {"code": "(fn [& xs]\n  (reduce #(if (> %1 %2)\n             %1\n             %2)\n          xs))", "problem": 38, "user": "533018b2e4b019098a6f8b56"}, {"code": "(fn mx [& xs]\n  (reduce (fn [x y]\n            (if (> x y) x y)) xs\n   ))", "problem": 38, "user": "4fc4f347e4b081705acca35d"}, {"code": "(fn [fst & more]\n  (loop [highest fst tester (first more) others (rest more)]\n    (if (= nil tester)\n    \thighest\n    \t(recur (if (> highest tester) highest tester) (first others) (rest others)))))", "problem": 38, "user": "532db3e7e4b019098a6f8b3d"}, {"code": "(fn [& lst] (reduce #(if (> %2 %1) %2 %1) lst))", "problem": 38, "user": "5326d111e4b09d4e7a9b54f3"}, {"code": "(fn foo [x & args]\n  (cond\n   (empty? args) x\n   (> (first args) x) (apply foo args)\n   :else (apply foo (cons x (rest args)))))", "problem": 38, "user": "53322cece4b019098a6f8b73"}, {"code": "(fn [& L] (reduce (fn [x y] (if (> x y) x y)) L))", "problem": 38, "user": "5332f9e1e4b019098a6f8b79"}, {"code": "(fn [& args]\n  (reduce (fn [a b] (if (> a b) a b)) args)\n  \n  )", "problem": 38, "user": "531902b1e4b08068f379ed77"}, {"code": "(fn [& more] \n  (reduce (fn [a b]\n           (if (> a b)\n             a\n             b)) more))", "problem": 38, "user": "52a7fec0e4b0c58976d9ac25"}, {"code": "(fn [& args]\n  (reduce (fn [a b] (if (> a b) a b)) 0 args))", "problem": 38, "user": "53334cb2e4b019098a6f8b81"}, {"code": "(fn [& the-seq]\n  (loop [biggest (first the-seq) buf (rest the-seq)]\n    (if (nil? (seq buf))\n      biggest\n      (recur (if (< biggest (first buf))\n                 (first buf)\n                 biggest)\n             (rest buf)))))", "problem": 38, "user": "4f80a906e4b033992c121bf7"}, {"code": "(fn [& c] (reduce #(if (> %1 %2) %1 %2) c))", "problem": 38, "user": "531792d9e4b08068f379ed5e"}, {"code": "(fn [& nums] (first (reverse (sort nums))))", "problem": 38, "user": "53286389e4b09d4e7a9b5504"}, {"code": "(fn [& more]\n  (reduce #(if (> %1 %2) %1 %2) more))", "problem": 38, "user": "53121863e4b08068f379ecf3"}, {"code": "(fn [& coll]\n  (reduce \n   (fn [current-high test-val]\n     (if (> test-val current-high)\n       test-val\n       current-high))\n   coll))", "problem": 38, "user": "5328b1ece4b09d4e7a9b5508"}, {"code": "(fn mymax [& xs] (first (sort > xs)))", "problem": 38, "user": "5311cd03e4b08068f379ecef"}, {"code": "(fn [& xs] (reduce #(if (> %2 %1) %2 %1) xs))", "problem": 38, "user": "533696b9e4b0e30313ee6c7c"}, {"code": "(fn [& x]\n   (reduce #(if (>= %1 %2) %1 %2) x))", "problem": 38, "user": "531d34cfe4b08068f379edac"}, {"code": "#(last (sort %&))", "problem": 38, "user": "4fceda40e4b03432b189f407"}, {"code": "(fn[& args] ( first (sort > args) ) )", "problem": 38, "user": "527c4071e4b0757a1b17135a"}, {"code": "(fn [& params] (last (apply sorted-set params)))", "problem": 38, "user": "5336ca32e4b0e30313ee6c80"}, {"code": "(fn [& args]\n  (loop [acc (first args), rst (rest args)]\n    (if (empty? rst)\n      acc\n      (recur (if (< acc (first rst)) (first rst) acc) (rest rst)))))", "problem": 38, "user": "504f6721e4b0a02f9cffde7f"}, {"code": "(fn test\n  ([x] x)\n  ([x & more]\n   (if (> x (first more)) \n     (apply test (cons x (rest more)))\n     (apply test more))))", "problem": 38, "user": "51de3b42e4b0de53e6370c53"}, {"code": "(fn [& args] (reduce (fn [m i] (if (> i m) i m)) args))", "problem": 38, "user": "4eadc217535d7eef30807321"}, {"code": "(fn [& nums] \n  (reduce #(if (< %1 %2) %2 %1) nums))", "problem": 38, "user": "53386fb9e4b0e30313ee6c9a"}, {"code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) more))", "problem": 38, "user": "533971eee4b0e30313ee6ca8"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "532b43c3e4b09d4e7a9b5531"}, {"code": "(fn [& x]\n  (loop [head (first x) tail (rest x)]\n    (if (> (count tail) 0)\n      (recur ((fn [x y] (if (> x y) x y)) head (first tail)) (rest tail))\n      head\n      ))\n  )", "problem": 38, "user": "52fe869be4b047fd5583703f"}, {"code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "problem": 38, "user": "5339c08ee4b0e30313ee6cad"}, {"code": "(fn [f & r]  (last (sort (conj r f ))))", "problem": 38, "user": "53340d3ce4b019098a6f8b89"}, {"code": "#(last (sort %&))", "problem": 38, "user": "53377725e4b0e30313ee6c89"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "533a7d56e4b0e30313ee6cbc"}, {"code": "(fn mx [& args] (reduce #(if (< %1 %2) %2 %1) args))", "problem": 38, "user": "5334d4f2e4b0656e627bfd71"}, {"code": "#(last (sort %&))", "problem": 38, "user": "506d5e4ce4b0a302964c5493"}, {"code": "(fn [& args]\n   (last (sort args)))", "problem": 38, "user": "520fff3ce4b080a8d9b9d633"}, {"code": "(fn [& params] (reduce #(if (> %2 %1) %2 %1) params))", "problem": 38, "user": "533ab9abe4b0e30313ee6cbf"}, {"code": "(fn [& rest]\n\t (reduce #(if (> %1 %2) %1 %2) rest))", "problem": 38, "user": "5339af7de4b0e30313ee6cab"}, {"code": "(comp last sort vector)", "problem": 38, "user": "53396c03e4b0e30313ee6ca7"}, {"code": "(fn my-max [& x] (reduce (fn [a b] (if (> a b) a b)) x))", "problem": 38, "user": "53388e2de4b0e30313ee6c9c"}, {"code": "(fn maximum[& args] \n\t(last (sort args)))", "problem": 38, "user": "52a144b0e4b04e0c58e87bd6"}, {"code": "(fn [& arr] (reduce #(if (> % %2) % %2) arr))", "problem": 38, "user": "530262c8e4b0d8b024fd3728"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "problem": 38, "user": "5323f6aee4b09d4e7a9b54d5"}, {"code": "(fn [& ns] (reduce (fn [x y] (if (< x y) y x)) ns))", "problem": 38, "user": "4fcb9c9ae4b0ee37620e185a"}, {"code": "(fn [& args] \n  (loop [m (first args)\n         other (rest args)]\n    (if (nil? (first other)) m\n      (if (> (first other) m)\n        (recur (first other) (rest other))\n        (recur m (rest other))))))", "problem": 38, "user": "533ee560e4b085b17e897d98"}, {"code": "(fn [& L]\n((fn mx [m lst]  \n    (if (empty? lst) m \n      (mx (if (> m (first lst)) m (first lst)) (rest lst)))) 0 L))", "problem": 38, "user": "533e45a7e4b085b17e897d8c"}, {"code": "#(reduce (fn maxx [x y] (cond (> x y) x \n               (< x y)  y \n               :else x)) (apply list %&))", "problem": 38, "user": "53350264e4b0656e627bfd73"}, {"code": "(fn [x & xs] (reduce #(if (> %1 %2) %1 %2) x xs))", "problem": 38, "user": "533b1dc4e4b0e30313ee6cc7"}, {"code": "#(last (sort %&))", "problem": 38, "user": "534056fce4b085b17e897dac"}, {"code": "(fn [& args] ((comp first reverse sort) args))", "problem": 38, "user": "53409368e4b085b17e897daf"}, {"code": "(fn [a & input] (reduce #(if (> %1 %2) %1 %2) a input))", "problem": 38, "user": "5341b141e4b00652c8746ecf"}, {"code": "(fn [& x] (- (apply min (map - x))))", "problem": 38, "user": "533f1584e4b085b17e897d9b"}, {"code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "51da631be4b02ceefd947766"}, {"code": "(fn[& xs] (reduce #(if (> %2 %1) %2 %1) xs))", "problem": 38, "user": "5339cb07e4b0e30313ee6caf"}, {"code": "(fn [& nums]\n  (first (sort > nums)))", "problem": 38, "user": "533d2ea5e4b085b17e897d7a"}, {"code": "(fn _max [& args] \n  (let [l (apply list args)] \n    (loop [v (first l)\n           l (rest l)] \n      (cond \n       (empty? l) v\n       (< v (first l)) (recur (first l) (rest l))\n       :else (recur v (rest l))))))", "problem": 38, "user": "53372d7de4b0e30313ee6c87"}, {"code": "(fn[& vals]\n (reduce \n  #(if (> %2 %1) %2 %1) 0 vals))", "problem": 38, "user": "5342f0d7e4b084c2834f4a15"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "533f09e1e4b085b17e897d9a"}, {"code": "(fn [& coll]\n  (reduce #(if (> %1 %2)\n              %1\n              %2)\n          coll))", "problem": 38, "user": "53436e60e4b084c2834f4a19"}, {"code": "(fn [& input]\n  (reduce\n\t\t(fn [a b]\n  \t\t\t(if (> a b)\n    \t\t\ta\n    \t\t\tb)) \n  \t\t\tinput))", "problem": 38, "user": "53438d3ee4b084c2834f4a20"}, {"code": "(fn [& sq] \n  (reduce (fn [a b] (if (> a b) a b)) sq)\n)", "problem": 38, "user": "533ea7e8e4b085b17e897d94"}, {"code": "(fn [& args] \n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "524d90c0e4b0a16e35cf6ded"}, {"code": "(fn [& c] (last (sort c)))", "problem": 38, "user": "532df9c5e4b019098a6f8b42"}, {"code": "(fn [x & xs]\n (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "5344a0efe4b084c2834f4a2d"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "problem": 38, "user": "5339edfbe4b0e30313ee6cb3"}, {"code": "(fn [& the-rest]\n  (last (sort the-rest)))", "problem": 38, "user": "53457b7de4b084c2834f4a35"}, {"code": "(fn [& args] (first (reverse (sort args))))", "problem": 38, "user": "4f598c87e4b0030a34fb2ada"}, {"code": "(fn [& args]\n  (reduce (fn [a b] (if (<= a b)\n                      b\n                      a))\n          args))", "problem": 38, "user": "53415755e4b00652c8746ecd"}, {"code": "(comp last sort list)", "problem": 38, "user": "53460d02e4b084c2834f4a39"}, {"code": "(fn [& xs] (last (sort xs)))", "problem": 38, "user": "5344fe13e4b084c2834f4a32"}, {"code": "(fn [x & xs]\n  (reduce #(if (> %1 %2) %1 %2) x xs))", "problem": 38, "user": "53468f6ce4b084c2834f4a3f"}, {"code": "(fn [& items] (reduce (fn [a b] (if (> a  b) a b)) items))", "problem": 38, "user": "5342f075e4b084c2834f4a14"}, {"code": "(fn [& vs] (reduce (fn [m v] (if (> v m) v m)) vs))", "problem": 38, "user": "5339c105e4b0e30313ee6cae"}, {"code": "(fn [x & xs]\n  (reduce #(if (> %1 %2) %1 %2) x xs))", "problem": 38, "user": "5346f409e4b084c2834f4a46"}, {"code": "#(-> %& sort last)", "problem": 38, "user": "52ac2db3e4b0c58976d9ac82"}, {"code": "(fn [x & xs] (reduce #(if (> %2 %1) %2 %1) x xs))", "problem": 38, "user": "5340ee60e4b00652c8746ec9"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args ))", "problem": 38, "user": "53484f3de4b084c2834f4a58"}, {"code": "(fn [& l] (\n  (fn me [l] \n    (if (= (count l) 1) (first l) \n      (if (> (first l) (me (rest l))) \n        (first l) \n        (me (rest l) )\n      )\n    )\n  )\n  l))", "problem": 38, "user": "5349ac2be4b084c2834f4a67"}, {"code": "#(last (sort %&))", "problem": 38, "user": "526a7025e4b03e8d9a4a722a"}, {"code": "(fn [& args] (first(reverse (sort (apply conj [] args)))))", "problem": 38, "user": "52d24f60e4b099d49816f0a8"}, {"code": "(fn [& x]\n  (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "534941d1e4b084c2834f4a60"}, {"code": "(fn [& nums] \n  \t(reduce #(if (< %1 %2) %2 %1) nums))", "problem": 38, "user": "53487737e4b084c2834f4a59"}, {"code": "(fn [& x] (reduce #(if(> %1 %2) %1 %2) x))", "problem": 38, "user": "53452fe9e4b084c2834f4a34"}, {"code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "534ad82be4b084c2834f4a72"}, {"code": "(fn [& v]\n  (reduce \n   #(if (> %1 %2) %1 %2)\n    v))", "problem": 38, "user": "532a111ee4b09d4e7a9b5520"}, {"code": "(fn [& args]\n  (first (reverse (sort args))))", "problem": 38, "user": "51ab70c3e4b04e3dc0c27b33"}, {"code": "(fn mymax\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n   (mymax (mymax x y) (apply mymax more))))", "problem": 38, "user": "5348236ee4b084c2834f4a54"}, {"code": "(fn mymax\n   ([] nil)\n   ([x] (cast Number x))\n   ([x y] (if (pos? (- x y)) x y))\n   ([x y & more]\n      (reduce mymax (mymax x y) more)))", "problem": 38, "user": "5348cab4e4b084c2834f4a5e"}, {"code": "(fn [& n] (last (sort n)))", "problem": 38, "user": "4f386f61e4b0e243712b1edc"}, {"code": "(comp last sort list)", "problem": 38, "user": "534bde26e4b084c2834f4a81"}, {"code": "(fn [& c] (reduce #(if (> % %2) % %2) c))", "problem": 38, "user": "534bd9c1e4b084c2834f4a80"}, {"code": "(fn mmax\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] \n   (reduce mmax (mmax x y) more)))", "problem": 38, "user": "5338387de4b0e30313ee6c91"}, {"code": "(fn [& lst]\n  (letfn [(my-max- [lst maximum]\n  \t(if (empty? lst)\n  \t  maximum\n  \t  (if (> (first lst) maximum)\n    \t(my-max- (rest lst) (first lst))\n   \t   (my-max- (rest lst) maximum))))]\n  (my-max- (rest lst) (first lst))))", "problem": 38, "user": "5347870be4b084c2834f4a4b"}, {"code": "(fn fun [& coll]\n  (reduce \n   (fn [x y] \n     (if (> x y) \n       x \n       y)) coll))", "problem": 38, "user": "5349da55e4b084c2834f4a68"}, {"code": "(fn [& args] (last (apply sorted-set args)))", "problem": 38, "user": "50cb00e1e4b0f75dcc9a6e53"}, {"code": "(fn [& args]\n  (reduce #(if (< %1 %2) %2 %1) args))", "problem": 38, "user": "52de249ae4b09f7907dd13ed"}, {"code": "(fn [& ys]\n  (last (sort ys))\n  )", "problem": 38, "user": "534c734de4b084c2834f4a93"}, {"code": "(fn [& args]\n  (loop [s args\n         res (first s)]\n    (let [s1 (if (first s) (first s) 0)\n          s2 (if (second s) (second s) 0)\n          bigger (if (> s1 s2) s1 s2)]\n      (if-not s\n        res\n        (recur (next s)\n               (if (> res bigger) res bigger))))))", "problem": 38, "user": "516081e7e4b009fba0926e28"}, {"code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) s))", "problem": 38, "user": "534e9ed4e4b084c2834f4ab8"}, {"code": "(fn max-val\n  ([] nil)\n  ([x] x)\n  ([x & xs]\n   (let [rest-max (reduce max-val xs)]\n     (if (> x rest-max) x rest-max)\n   )\n  )\n )", "problem": 38, "user": "534dd600e4b084c2834f4aaa"}, {"code": "(fn maxVariadicPure [& lst] \n  (if (= (count lst) 1)\n    (first lst)\n    (if (> (first lst) (first(rest lst)))\n      (apply maxVariadicPure (cons (first lst) (drop 1 (rest lst))))\n      (apply maxVariadicPure (rest lst))\n      )\n))", "problem": 38, "user": "5194960fe4b044d99c15f69b"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "534eecaee4b084c2834f4abf"}, {"code": "(fn [& args]\n  (last(sort args)))", "problem": 38, "user": "534f25f9e4b084c2834f4ac6"}, {"code": "(fn [& col]\n  (last (apply sorted-set col)))", "problem": 38, "user": "534815bde4b084c2834f4a53"}, {"code": "(fn find-max [x & xs]\n  (reduce #(if (> %1 %2) %1 %2) x xs))", "problem": 38, "user": "53504436e4b084c2834f4ad7"}, {"code": "(fn [ & l ]\n  (reduce #(if (> %1 %2) %1 %2) 0 l))", "problem": 38, "user": "53480973e4b084c2834f4a52"}, {"code": "(fn mmax\n  ([x y]\n     (if (> x y) x y))\n  ([x y & z]\n     (reduce mmax (mmax x y) z)))", "problem": 38, "user": "534e118ee4b084c2834f4aad"}, {"code": "(fn blah\n  [x & others]\n  (loop [maxest x\n         others others]\n    (if (= others '()) maxest\n      (recur (cond\n               (>= maxest (first others)) maxest\n               (<  maxest (first others)) (first others))\n             (rest others)))))", "problem": 38, "user": "53383c74e4b0e30313ee6c92"}, {"code": "(fn [& y] (reduce #(if (> %1 %2) %1 %2) y))", "problem": 38, "user": "53500869e4b084c2834f4ad3"}, {"code": "(fn [& v] (reduce (fn [a b] (if (> a b) a b)) v))", "problem": 38, "user": "534d1173e4b084c2834f4a98"}, {"code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) coll))", "problem": 38, "user": "53498f88e4b084c2834f4a64"}, {"code": "(fn [& args] (reduce (fn [a b] (if (> b a) b a)) args))", "problem": 38, "user": "5314b0cae4b08068f379ed1c"}, {"code": "(fn [& lst] (reduce #(if (> %1 %2) %1 %2) lst))", "problem": 38, "user": "534efe66e4b084c2834f4ac1"}, {"code": "(fn [& restx] (last(sort restx)))", "problem": 38, "user": "5351fca5e4b084c2834f4aec"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "53513d28e4b084c2834f4ae3"}, {"code": "(fn [& l]\n    (reduce\n      (fn [x y]\n        (if (> x y)\n          x\n          y)) l))", "problem": 38, "user": "53527ce8e4b084c2834f4af1"}, {"code": "(fn [& xs] (first (reverse (sort (seq xs)))))", "problem": 38, "user": "53512bc6e4b084c2834f4ae1"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "50f10f7be4b06d9538fe211a"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "52046600e4b0c283853240c5"}, {"code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "problem": 38, "user": "534aa5d3e4b084c2834f4a6b"}, {"code": "(fn [& xs] ((comp first reverse sort) xs))", "problem": 38, "user": "5353726be4b084c2834f4b00"}, {"code": "#(last (sort %&))", "problem": 38, "user": "50fd4838e4b033b9c38d78ce"}, {"code": "#(last (sort %&))", "problem": 38, "user": "534d6524e4b084c2834f4a9f"}, {"code": "(fn [& l]\n  (reduce #(if (> % %2) % %2) l))", "problem": 38, "user": "5336a339e4b0e30313ee6c7d"}, {"code": "(fn m [& args] (reduce #(if (< %1 %2) %2 %1) args))", "problem": 38, "user": "5353afa0e4b084c2834f4b03"}, {"code": "(fn [& list] (reduce (fn [x y] (if (> x y) x y)) list))", "problem": 38, "user": "533e7f63e4b085b17e897d8e"}, {"code": "(fn mymax\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & z] (reduce #(mymax %1 %2) (mymax x y) z)))", "problem": 38, "user": "534e4a29e4b084c2834f4ab0"}, {"code": "(fn [& xs] (reduce #(if (< %1 %2) %2 %1) xs))", "problem": 38, "user": "533b9cace4b0e30313ee6cd1"}, {"code": "(fn [& nums] (reduce (fn [acc num] (if (> acc num) acc num)) nums))", "problem": 38, "user": "4f1af8b3535d64f603146472"}, {"code": "(fn [m & values] (if (next values) (recur (if (> m (first values)) m (first values)) (rest values)) m))", "problem": 38, "user": "53559180e4b04ce2eb3ed25d"}, {"code": "(fn [& r] (reduce #(if (> %1 %2) %1 %2) r))", "problem": 38, "user": "5352986ee4b084c2834f4af3"}, {"code": "#(last (sort %&))", "problem": 38, "user": "5338645ee4b0e30313ee6c99"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "problem": 38, "user": "5309bacae4b02e82168697bc"}, {"code": "(fn [& coll] (-> (reduce (fn [vec x]\n                        (if (< (peek vec) x)\n                          (conj (pop vec) x)\n                          vec)) [(first coll)] coll)\n                first))", "problem": 38, "user": "5256c4c1e4b0541d1855ba36"}, {"code": "(fn [& parms]\n  (reduce #(if (> % %2) % %2) -1 parms\n  )\n)", "problem": 38, "user": "533b36c0e4b0e30313ee6ccb"}, {"code": "(fn [& args] (first (filter (fn [x] (every? #(>= x %) args)) args)))", "problem": 38, "user": "53523ae0e4b084c2834f4aee"}, {"code": "(fn [& vars] (reduce (fn [x y] (if (> x y) x y)) vars))", "problem": 38, "user": "5356a324e4b04ce2eb3ed269"}, {"code": "(fn mymax [& x]\n  (loop [myx (rest x) big (first x)]\n    (if (empty? myx)\n      big\n      (if (> (first myx) big)\n        (recur (rest myx) (first myx))\n        (recur (rest myx) big)))))", "problem": 38, "user": "535526a2e4b04ce2eb3ed259"}, {"code": "(fn [& nums] (reduce #(if(> %1 %2) %1 %2) nums))", "problem": 38, "user": "5325cef5e4b09d4e7a9b54e7"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "5312cdaae4b08068f379ed03"}, {"code": "(fn [& y] (reduce (fn [x y] (if (> x y) x y)) y))", "problem": 38, "user": "523d06aae4b0dbf0c301728b"}, {"code": "(fn [& args] (first (sort > args)))", "problem": 38, "user": "53560560e4b04ce2eb3ed25f"}, {"code": "(comp last sort conj) []", "problem": 38, "user": "53566247e4b04ce2eb3ed266"}, {"code": "(fn [& nums]\n  (reduce (fn [x y] (if (> x y) x y)) nums))", "problem": 38, "user": "5225271fe4b01819a2de42f9"}, {"code": "(fn mx\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & rest] \n     (reduce mx (mx x y) rest)))", "problem": 38, "user": "535558b9e4b04ce2eb3ed25a"}, {"code": "(fn [& xs] \n  (reduce (fn [mx x] (if (> x mx) x mx)) 0 xs))", "problem": 38, "user": "535778dee4b04ce2eb3ed27d"}, {"code": "#(last(sort %&))", "problem": 38, "user": "535788ece4b04ce2eb3ed281"}, {"code": "(fn [& m] (reduce (fn [m x] (if (> m x) m x)) -1 m))", "problem": 38, "user": "5357b241e4b04ce2eb3ed282"}, {"code": "(fn my-max\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & r] (reduce my-max (my-max x y) r)))", "problem": 38, "user": "5356e04fe4b04ce2eb3ed271"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "5356dcbee4b04ce2eb3ed270"}, {"code": "(fn [frst & args]\n  (loop [curr frst rem args]\n    (let [candidate (first rem)] \n      (cond (empty? rem) curr\n            (>= curr candidate) (recur curr (rest rem))\n            (< curr candidate) (recur candidate (rest rem))))))", "problem": 38, "user": "534e60c2e4b084c2834f4ab2"}, {"code": "(fn [x & more]\n  (reduce #(if (> %1 %2) %1 %2) x more))", "problem": 38, "user": "530ed3a8e4b08068f379ecc3"}, {"code": "(fn mx\n  [x & xs]\n  (reduce #(if (> %1 %2)\n             %1 \n             %2) x xs))", "problem": 38, "user": "52dc3bc8e4b09f7907dd13cb"}, {"code": "(fn [& r] (reduce #(if (> %1 %2) %1 %2) r))", "problem": 38, "user": "5356ac72e4b04ce2eb3ed26a"}, {"code": "(fn [x & y] (reduce #(if (> %1 %2) %1 %2) x y))", "problem": 38, "user": "534e1f56e4b084c2834f4aae"}, {"code": "(fn  [& args]\n(last (sort args))\n)", "problem": 38, "user": "52dced9de4b09f7907dd13d7"}, {"code": "(fn my-max [& xs]\n  (loop [xs xs acc (first xs)]\n    (if (empty? xs)\n      acc\n      (if (> (first xs) acc)\n        (recur (rest xs) (first xs))\n        (recur (rest xs) acc)))))", "problem": 38, "user": "535a170ae4b04ce2eb3ed2a3"}, {"code": "(fn my-max [& xs]\n  (reduce #(if (> %1 %2) %1 %2 ) xs))", "problem": 38, "user": "53287dace4b09d4e7a9b5507"}, {"code": "#(reduce\n  (fn [a b]\n    (if (> b a)\n      b\n      a))\n  %&)", "problem": 38, "user": "511688d5e4b0b3e208dba05a"}, {"code": "(fn [& nums] (reduce (fn [x y] (if (> x y) x y))  nums))", "problem": 38, "user": "535920b2e4b04ce2eb3ed294"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "53597288e4b04ce2eb3ed29c"}, {"code": "(fn d \n  ([x y] (if (< x y) y x))\n  ([x y & vars] (reduce d (d x y) vars)))", "problem": 38, "user": "52271a85e4b04e78ff2e19a7"}, {"code": "(fn [& args] (reduce #(if (>= %1 %2) %1 %2) args))", "problem": 38, "user": "535bf08fe4b04ce2eb3ed2af"}, {"code": "(fn [a & l]\n                (loop [m a x l]\n                        (let [w (first x) n (next x)]\n                                (if (nil? w)\n                                        m\n                                        (if (> w m)\n                                                (recur w n)\n                                                (recur m n)\n                                        )\n                                )\n                        )\n                )\n        )", "problem": 38, "user": "53512b55e4b084c2834f4ae0"}, {"code": "(fn [ & x] (reduce #(if (> % %2) % %2) x ))", "problem": 38, "user": "53440c0ae4b084c2834f4a25"}, {"code": "(comp #(reduce (fn [a b] (if (> a b) a b)) %) list)", "problem": 38, "user": "535aba96e4b04ce2eb3ed2a8"}, {"code": "(fn [& c  ] (reduce (fn [a b] (if (> a b) a b)) c))", "problem": 38, "user": "535ca478e4b04ce2eb3ed2b6"}, {"code": "(fn \n  [& input]\n  (loop [[start & tail] input\n         najvecji 0]\n       (if (nil? start)\n         najvecji\n       (if (> start najvecji)\n         (recur tail start)\n         (recur tail najvecji)\n         ))\n      \n    ))", "problem": 38, "user": "535d21ade4b04ce2eb3ed2bb"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "535c53c5e4b04ce2eb3ed2b3"}, {"code": "(fn [& x]\n  (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "535afd76e4b04ce2eb3ed2ab"}, {"code": "(fn [& args] (-> args sort last))", "problem": 38, "user": "53536386e4b084c2834f4afe"}, {"code": "(fn [& args] (nth (sort > args) 0))", "problem": 38, "user": "535d9eaee4b04ce2eb3ed2c6"}, {"code": "(fn [& xs] (first (sort > xs)))", "problem": 38, "user": "535bd464e4b04ce2eb3ed2ad"}, {"code": "#(last(sort %&))", "problem": 38, "user": "534f1c94e4b084c2834f4ac5"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "535aee3be4b04ce2eb3ed2aa"}, {"code": "(fn [& coll] (->> coll (sort >) first))", "problem": 38, "user": "535d4b0ae4b04ce2eb3ed2be"}, {"code": "( comp (partial reduce #(if (< %1 %2) %2 %1)) list )", "problem": 38, "user": "535a18e3e4b04ce2eb3ed2a4"}, {"code": "#(last (sort %&))", "problem": 38, "user": "535d2533e4b04ce2eb3ed2bc"}, {"code": "(fn [& s]\n  (reduce #(if (> %1 %2) %1 %2) s))", "problem": 38, "user": "535d910ae4b04ce2eb3ed2c5"}, {"code": "(fn mymax\n  ([x y]\n     (if (> x y) x y))\n  ([x y & more]\n     (reduce mymax (mymax x y) more)))", "problem": 38, "user": "523cdde6e4b07645915a4787"}, {"code": "(fn find-max [& n] (reduce (fn [l c] (if (> l c) l c)) 0 n))", "problem": 38, "user": "5360d41fe4b0243289761e39"}, {"code": "(fn mymax [& args]\n    (if (= (count args) 1) \n      (first args)\n      (apply mymax (concat  (filter #(< (first args) %) args) (list (first args))  ))\n    )\n  )", "problem": 38, "user": "5360e12ce4b0243289761e3a"}, {"code": "(fn [& coll]\n  (first (sort > coll)))", "problem": 38, "user": "536102efe4b0243289761e3e"}, {"code": "(fn [& rest]\n   (last (sort rest)))", "problem": 38, "user": "53489329e4b084c2834f4a5b"}, {"code": "(fn max1 [x & xs]\n  (reduce #(if (> %1 %2) %1 %2) x xs))", "problem": 38, "user": "536254a5e4b0243289761e50"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "5269877de4b03e8d9a4a71f0"}, {"code": "(fn [& xs] \n  (reduce (fn [m v]\n            (if (> v m)\n              v\n              m))\n          xs))", "problem": 38, "user": "53576356e4b04ce2eb3ed27a"}, {"code": "(fn m [a & args] (reduce #(if (> %2 %1) %2 %1) a args))", "problem": 38, "user": "53638ed2e4b0243289761e5b"}, {"code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "535eaa73e4b04ce2eb3ed2d4"}, {"code": "(fn [& args]\n  (reduce #(if (>%1 %2) %1 %2) args))", "problem": 38, "user": "5361a4f2e4b0243289761e47"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "5359da85e4b04ce2eb3ed2a1"}, {"code": "(fn m [n & rest] (if (nil? rest) n (let [r (apply m rest)] (if (> r n) r n))))", "problem": 38, "user": "53629381e4b0243289761e54"}, {"code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) s))", "problem": 38, "user": "53527551e4b084c2834f4af0"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "535944d6e4b04ce2eb3ed296"}, {"code": "(fn [prem & more] \n  (loop [n1 prem lis more]\n    (if-not (= 0 (count lis))\n      (recur (if (> n1 (first lis)) n1 (first lis)) (drop 1 lis))\n      n1\n      )))", "problem": 38, "user": "52c42bc2e4b0c2d177d620d0"}, {"code": "(fn [& xs] (reduce #(if (> %2 %1) %2 %1) xs))", "problem": 38, "user": "514b83b4e4b0bd81940b86ce"}, {"code": "(fn [& x]\n(loop [m 0 x x]\n   (if (empty? x)\n     m\n     (recur (if (> (first x) m)\n              (first x)\n              m)\n            (rest x)))))", "problem": 38, "user": "53664e3be4b0243289761e74"}, {"code": "(fn [l & m]\n  (reduce #(if (< %1 %2) %2 %1) l m))", "problem": 38, "user": "536552bbe4b0243289761e6c"}, {"code": "(fn mx [f & r]\n\t(cond\n     (empty? r) f\n     (> f (apply mx r)) f\n     :else (apply mx r)))", "problem": 38, "user": "5364697ce4b0243289761e62"}, {"code": "(fn mm \n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] (reduce mm (mm x y) more)))", "problem": 38, "user": "536673a8e4b0243289761e76"}, {"code": "(fn [& args]\n  \t(first (reverse (sort args))))", "problem": 38, "user": "53658ce7e4b0243289761e6e"}, {"code": "(fn [& coll]\n    (reduce #(if (> %2 %1)\n                  %2 %1) coll))", "problem": 38, "user": "536581e4e4b0243289761e6d"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "531798efe4b08068f379ed5f"}, {"code": "(fn [& xs] (reduce #(if (< % %2) %2 %) xs))", "problem": 38, "user": "53528cd3e4b084c2834f4af2"}, {"code": "(fn [& args]\n  (first\n   (sort > args)))", "problem": 38, "user": "5354bb38e4b084c2834f4b0a"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "534bfa81e4b084c2834f4a87"}, {"code": "(fn f[x & y] (reduce (fn[a b] (if (> a b) a b)) (cons x y)))", "problem": 38, "user": "53347274e4b0656e627bfd6b"}, {"code": "(fn [x & xs] (loop [ys xs acc x] (if (empty? ys) acc (recur (rest ys) (if (> acc (first ys)) acc (first ys))))))", "problem": 38, "user": "5363d242e4b0243289761e5c"}, {"code": "(fn maximum [& args] (reduce (fn [a,b] (if (> a b) a b)) args))", "problem": 38, "user": "5367ca98e4b0243289761e86"}, {"code": "(fn [& vals]\n  (reduce (fn [x y] (if (< x y) y x)) vals))", "problem": 38, "user": "52f23d85e4b05e3f0be25ef6"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "51642237e4b003cf19fdde31"}, {"code": "(fn my-max\n  ([v] v)\n  ([v & vs] (let [m (apply my-max vs)] (if (> v m) v m))))", "problem": 38, "user": "5338e33fe4b0e30313ee6ca1"}, {"code": "(fn m [& l]\n  (if (= (count l) 1)\n    (first l)\n    (when-let [[f & r] (seq l)]\n      (if (> f (apply m r))\n        f\n        (apply m r)))))", "problem": 38, "user": "5368a275e4b0243289761e8f"}, {"code": "(fn [& xs] (last (sort xs)))", "problem": 38, "user": "534131dbe4b00652c8746ecb"}, {"code": "(fn mymax [fst & rst]\n   (if rst\n     (let [maxval (apply mymax rst)]\n       (if (> fst maxval)\n          fst\n          maxval\n       )\n     )\n     fst))", "problem": 38, "user": "536234a5e4b0243289761e4d"}, {"code": "(fn [& args] (reduce (fn [x y] (if (>= x y) x y)) args))", "problem": 38, "user": "5369d072e4b0243289761ea1"}, {"code": "(fn [& x] (reduce #(if (> %2 %1) %2 %1) x))", "problem": 38, "user": "536973e5e4b0243289761e9e"}, {"code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) coll))", "problem": 38, "user": "536b2048e4b0243289761eb7"}, {"code": "(fn [& args]\n\t(reduce #(if (> %1 %2) %1 %2) 0 args))", "problem": 38, "user": "5228b015e4b0186687e23a8a"}, {"code": "(fn [& p] (last (sort p)))", "problem": 38, "user": "51cb5c3de4b08d8387cbedd7"}, {"code": "(fn [& xs] (first (reverse (sort xs))))", "problem": 38, "user": "536aa86de4b0243289761eb1"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "52cc76eee4b07d0d72b27363"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "536bc59fe4b0243289761ec3"}, {"code": "(fn mymax [& args]\n  (reduce (fn [curr next]\n            (if (> curr next) curr next))\n          args))", "problem": 38, "user": "53695439e4b0243289761e9a"}, {"code": "(fn [x & rest] \n  (reduce (fn [acc x] \n            (if (> x acc) x acc))\n          (conj rest x)))", "problem": 38, "user": "536c92eae4b0fc7073fd6e43"}, {"code": "(fn my-max [& args]\n       (last\n         (sort (flatten (list args)))\n       )\n      )", "problem": 38, "user": "536827f1e4b0243289761e8a"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "5369a4b1e4b0243289761e9f"}, {"code": "(fn max- [x & xs]\n  (if (empty? xs) x (let [y (apply max- xs)]\n                      (if (> x y) x y))))", "problem": 38, "user": "536d83cee4b0fc7073fd6e5e"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "536ca4bde4b0fc7073fd6e49"}, {"code": "(fn [& args] \n  (reduce #(if (>= %1 %2) %1 %2) args))", "problem": 38, "user": "534be560e4b084c2834f4a82"}, {"code": "(fn [x & xs] (reduce #(if(< %1 %2) %2 %1) x xs ) )", "problem": 38, "user": "53403110e4b085b17e897da6"}, {"code": "(fn [& args](reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "53691dc7e4b0243289761e97"}, {"code": "(fn [& xs] (reduce #(if (> % %2) % %2) xs))\n; also like (comp last sort list) and #(last (sort %&))\n; but don't think it's appropriate to do a full sort to get max", "problem": 38, "user": "524b0645e4b09eba1c0223bf"}, {"code": "(fn [& s] (reduce #(if (< %1 %2) %2 %1) s))", "problem": 38, "user": "535197f2e4b084c2834f4ae4"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4e8a8720535d65386fec210c"}, {"code": "(fn[& x] (loop[m 0 v x] (if (empty? v) m (recur (if (> (first v) m ) (first v) m) (rest v)))))", "problem": 38, "user": "536e86b0e4b0fc7073fd6e72"}, {"code": "(fn [& args]\n  (reduce #(if (< %1 %2) %2 %1) args)\n)", "problem": 38, "user": "536f5900e4b0fc7073fd6e7b"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "536e6fe2e4b0fc7073fd6e6f"}, {"code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "problem": 38, "user": "536ecd9fe4b0fc7073fd6e76"}, {"code": ";(comp last sort list)\n#(last (sort %&))", "problem": 38, "user": "4ec53f8c535d6d7199dd368b"}, {"code": "(fn [& r] (last (sort r)))", "problem": 38, "user": "536e0930e4b0fc7073fd6e66"}, {"code": "(fn [& col] (-> col sort last))", "problem": 38, "user": "53572767e4b04ce2eb3ed277"}, {"code": "(fn [& nums] (reduce (fn [a b] (if (> a b) a b)) nums))", "problem": 38, "user": "536f2faee4b0fc7073fd6e79"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "52fb9bffe4b047fd5583700c"}, {"code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "problem": 38, "user": "5370f8c4e4b0fc7073fd6ea1"}, {"code": "(fn [& numbers] \n  (reduce #(if (> %1 %2) %1 %2) numbers))", "problem": 38, "user": "534d5ab7e4b084c2834f4a9c"}, {"code": "(fn [& x]\n  (reduce (fn [a b] (cond (> a b) a :else b)) x))", "problem": 38, "user": "5370612be4b0fc7073fd6e97"}, {"code": "#(first (sort > %&))", "problem": 38, "user": "521af66be4b0c4ef0be8301b"}, {"code": "(fn [& nums] \n   (last (sort (seq nums)))\n   )", "problem": 38, "user": "4f7cbf4ae4b06e829148e1b7"}, {"code": "(fn [& x] (- (apply min (map - x))))", "problem": 38, "user": "53705e2de4b0fc7073fd6e96"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "5370ef22e4b0fc7073fd6ea0"}, {"code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "problem": 38, "user": "53578543e4b04ce2eb3ed280"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "52dab592e4b09f7907dd13bd"}, {"code": "(fn [& n] (last (sort n)))", "problem": 38, "user": "529c585ae4b04e0c58e87b60"}, {"code": "(fn [& params]\n  (loop [best (first params) the-rest (rest params)]\n    (if (empty? the-rest)\n      best\n      (recur (if (> best (first the-rest))\n               best\n               (first the-rest))\n             (rest the-rest)))))", "problem": 38, "user": "534f13b2e4b084c2834f4ac4"}, {"code": "(fn get-max [& args]\n  (last (sort args)))", "problem": 38, "user": "53713ed9e4b0fc7073fd6eaf"}, {"code": "(fn max-value [& args] ;takes an unknown amount of arguments\n  (last (sort args))) ;sorts all of the arguments and then takes the last of the sorted list", "problem": 38, "user": "53713ebee4b0fc7073fd6ead"}, {"code": "(fn get-max [& args] \n  ((fn do-max [top a-list]\n    (if (empty? (rest a-list))\n     ;;If it's empty, the last check has to be done.                   \n     (if (> top (first a-list))\n            top\n           (first a-list))\n          \n     (if (> top (first a-list))\n  \t\t(do-max top (rest a-list))\n  \t\t(do-max (first a-list) (rest a-list)))\n      ))\n     (first args) (rest args)))", "problem": 38, "user": "53713ec8e4b0fc7073fd6eae"}, {"code": "(fn [& a] (-> a vec sort last))", "problem": 38, "user": "4f973fb9e4b0dcca54ed6ce8"}, {"code": "(fn [& in]\n  (loop [out nil qu in]\n    (if (empty? qu)\n      out\n      (let [i (first qu)]\n      (recur (if (or (nil? out) (> i out)) i out) (rest qu))))))", "problem": 38, "user": "536eb396e4b0fc7073fd6e74"}, {"code": "(fn [& args]\n  (last (apply sorted-set args)))", "problem": 38, "user": "536d52b8e4b0fc7073fd6e58"}, {"code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) coll))", "problem": 38, "user": "536c7470e4b0fc7073fd6e3e"}, {"code": "(fn[& sig](loop[n (first sig)\n\t      lst (next sig)]\n\t  (if (nil? lst) n\n\t      (recur (if (< n (first lst)) (first lst) n)\n\t\t     (next lst)))))", "problem": 38, "user": "4e8849c5535d8b9bb0147ca4"}, {"code": "(fn kmax\n  [& nums]\n  (loop [lst nums x 0]\n    (if-not (empty? lst)\n      (if (> (first lst) x)\n        (recur (rest lst) (first lst))\n        (recur (rest lst) x))\n\n      x)))", "problem": 38, "user": "534ff8a6e4b084c2834f4ad1"}, {"code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) (seq args)))", "problem": 38, "user": "536a37efe4b0243289761eaa"}, {"code": "#(last (sort %&))", "problem": 38, "user": "532c9dc9e4b019098a6f8b30"}, {"code": "(fn [& s]\n  (reduce\n   (fn [acc x] (if (> x acc) x acc)) \n   s))", "problem": 38, "user": "536f62aee4b0fc7073fd6e7c"}, {"code": "(fn my-sort[& args] (last (sort args)))", "problem": 38, "user": "534c1c64e4b084c2834f4a8a"}, {"code": "(fn [& args] (reduce (fn [all old] (if (> all old) all old)) 0 args))", "problem": 38, "user": "53736ffce4b06d7f452d9e11"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "5371167fe4b0fc7073fd6ea7"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "53730973e4b06d7f452d9e05"}, {"code": "(fn getMax[& v] ( reduce #(if ( > %1 %2)  %1 %2) v))", "problem": 38, "user": "534d639ae4b084c2834f4a9e"}, {"code": "(fn [first & rest]\n  (reduce #(if (< %1 %2) %2 %1) first rest))", "problem": 38, "user": "52b152fbe4b0c58976d9acdc"}, {"code": "(fn maximum\n  ([x] x)\n  ([x y] (if (< x y) y x))\n  ([x y & args] (reduce maximum (maximum x y) args))\n)", "problem": 38, "user": "535056a7e4b084c2834f4adb"}, {"code": "(fn [& a]\n  (reduce (fn [a b] (if (> a b) a b)) 0 a))", "problem": 38, "user": "5374adc3e4b06d7f452d9e27"}, {"code": "(fn [& xs] (reduce #(if (> % %2) % %2) xs))", "problem": 38, "user": "52caee42e4b071a8d36bd3e8"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "535943b3e4b04ce2eb3ed295"}, {"code": "(fn [& s]\n  (reduce (fn [x y] (if (> x y) x y)) s))", "problem": 38, "user": "53756f8be4b06839e8705e14"}, {"code": "(fn [& more] \n   (last (sort < more)))", "problem": 38, "user": "536be48ee4b0fc7073fd6e31"}, {"code": "(fn [& l] (reduce #(if (> %1 %2) %1 %2) l))", "problem": 38, "user": "53712c03e4b0fc7073fd6ea9"}, {"code": "(fn [ & args ] (reduce #(if (> %2 %) %2 %) args))", "problem": 38, "user": "53720c5ce4b0493c815db704"}, {"code": "(fn max-all [& args]\n  (last (sort args)))", "problem": 38, "user": "4e162b3d535d04ed9115e7e8"}, {"code": "(fn [x & xs] \n\t(loop [x x xs xs max_num x]\n\t\t(if (nil? x) \n\t\t\tmax_num \n\t\t\t(let [max_num (if (< x max_num) max_num x)] \n\t\t\t\t(println \"x\" x \"xs\" xs \"max\" max_num) \n\t\t\t\t(recur (first xs) (rest xs) max_num)\n\t\t\t)\n\t\t)\n\t)\n)", "problem": 38, "user": "534f0b51e4b084c2834f4ac3"}, {"code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "problem": 38, "user": "535e518ee4b04ce2eb3ed2cf"}, {"code": "(fn [& args] (reduce (fn [n maximus] (if (< maximus n) n maximus)) (first args) args))", "problem": 38, "user": "5356d00ee4b04ce2eb3ed26f"}, {"code": "(fn [& values]\n    (loop [values values, current nil]\n      (if (seq values)\n        (if (nil? current)\n          (recur (rest values) (first values))\n          (if (> (first values) current)\n            (recur (rest values) (first values))\n            (recur (rest values) current)))\n        current)))", "problem": 38, "user": "500e7063e4b04a05d36fcc07"}, {"code": "#(last (sort %&))", "problem": 38, "user": "52ff6ea0e4b0d8b024fd3707"}, {"code": "(fn [& coll]\n    (reduce (fn [x y] (if (> x y) x y)) coll))", "problem": 38, "user": "5317d78ee4b08068f379ed63"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "5377c9e5e4b06839e8705e3f"}, {"code": "(fn my-max\n  ([]\n   nil)\n  ([fst]\n  \tfst)\n  ([fst snd & rst]\n   (let [mx (if (> fst snd) fst snd)]\n     (if (empty? rst)\n       mx\n       (apply my-max (conj rst mx))))))", "problem": 38, "user": "5376d6b6e4b06839e8705e2b"}, {"code": "(fn maxi\n  [a & [b & r]] \n   (if (nil? b) a\n     (if (> a b) (apply maxi a r) (apply maxi b r))))", "problem": 38, "user": "53792653e4b06839e8705e4e"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "53779a26e4b06839e8705e38"}, {"code": "(fn [& s] (last (sort s)))", "problem": 38, "user": "5379306fe4b06839e8705e50"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "53790dc6e4b06839e8705e4c"}, {"code": "(fn doitfaggot [& body]\r\n  (reduce #(if (> %1 %2) %1 %2) body))", "problem": 38, "user": "5376966ae4b06839e8705e27"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "536d260be4b0fc7073fd6e55"}, {"code": "(comp #(reduce (fn [x y] (if (> x y) x y)) %) list)", "problem": 38, "user": "5370b386e4b0fc7073fd6e9b"}, {"code": "(fn [a & b] (loop [mx a\n                   hd (first b)\n                   rst (rest b)]\n\t\t\t(if (empty? rst) \n              mx\n              (if (> hd mx)\n                  (recur hd (first rst) (rest rst))\n                  (recur mx (first rst) (rest rst))))\n              ))", "problem": 38, "user": "53663e82e4b0243289761e73"}, {"code": "(fn [a & b] (reduce (fn [a b] (if (> a b) a b)) (vec (cons a b))))", "problem": 38, "user": "536c77f1e4b0fc7073fd6e3f"}, {"code": "; take that!\n(fn [& more] (last (sort more)))", "problem": 38, "user": "536b9d8ae4b0243289761ebe"}, {"code": "(fn my-max\n  [& args]\n  (loop [args args\n         max-val 0]\n   (if (empty? args) max-val\n     (recur (rest args) (if (> max-val (first args)) max-val (first args))))))", "problem": 38, "user": "53733312e4b06d7f452d9e0a"}, {"code": "(fn fooo [& more]\n  (reduce  #(if (> %1 %2) %1 %2)more))", "problem": 38, "user": "536db108e4b0fc7073fd6e61"}, {"code": "(fn [& nums] (first (sort > nums)))", "problem": 38, "user": "53791ab7e4b06839e8705e4d"}, {"code": "(fn [a & b] (reduce #(if (> %1 %2) %1 %2) a b))", "problem": 38, "user": "4f92de49e4b0dcca54ed6cb2"}, {"code": "(fn [& s]\n  (reduce #(if (> %1 %2) %1 %2) s))", "problem": 38, "user": "5370f8ede4b0fc7073fd6ea2"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "4ed6c35e535d10e5ff6f52e8"}, {"code": "(fn [& a] (reduce #(if (> % %2) % %2) a))", "problem": 38, "user": "536046a9e4b063bf7a5f8fe1"}, {"code": "(comp (partial reduce #(if (> %1 %2) %1 %2)) list)", "problem": 38, "user": "4fc588bee4b0ee37620e17fa"}, {"code": "(fn maximus [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "536d5515e4b0fc7073fd6e59"}, {"code": "(fn [& args]\n  (let [x (sort > (vec args))]\n    (first x)))", "problem": 38, "user": "53713676e4b0fc7073fd6eac"}, {"code": "(fn [f & rs]\n   (reduce (fn [e acc] (if (> e acc) e acc)) f rs))", "problem": 38, "user": "4f849f76e4b033992c121c36"}, {"code": "(fn [& nums]\n  (reduce #(if (> %2 %1) %2 %1) 0 nums))", "problem": 38, "user": "537bde5de4b06839e8705e73"}, {"code": "(fn [& x] (reduce #(if(> %2 %) %2 %) 0 x))", "problem": 38, "user": "53767991e4b06839e8705e25"}, {"code": "(fn [a & b]\n    (reduce #(if (> %1 %2) %1 %2) a b))", "problem": 38, "user": "53613db8e4b0243289761e41"}, {"code": "(fn [& l] (reduce (fn [a b] (if (> a b) a b)) l))", "problem": 38, "user": "4e749e84535d7a570dd295b9"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "52eaba10e4b09f7907dd14c2"}, {"code": "(fn[& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "52ee9ac7e4b05e3f0be25ec9"}, {"code": "(fn sol [ & l]\n    (loop [l l\n           m nil]\n      (if (seq l)\n        (if (or (nil? m) (> (first l) m))\n          (recur (rest l) (first l))\n          (recur (rest l) m))\n        m)))", "problem": 38, "user": "5374cbf4e4b06d7f452d9e29"}, {"code": "(fn maxim [x & args] (if(= x 0)(maxim 1 args)(if(empty? (first args)) x (if ( < (first (first args)) x)(maxim x (rest (first args)))(maxim (first (first args)) (rest(first args))))))) 0", "problem": 38, "user": "537a1012e4b06839e8705e5c"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "537a620be4b06839e8705e5f"}, {"code": "(fn findmax [& args]\n    (reduce (fn \n              [acc x]\n              (if (> x acc)\n                x\n                acc)\n             )\n             0 args))", "problem": 38, "user": "53736f65e4b06d7f452d9e0f"}, {"code": "(fn [h & t]\n\t(reduce #(if (< %1 %2) %2 %1) h t))", "problem": 38, "user": "537d4a69e4b06839e8705e8a"}, {"code": "(fn [& args] (reduce #(if (>= %1 %2) %1 %2) args))", "problem": 38, "user": "537e745ae4b06839e8705ea6"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "537f6df1e4b06839e8705eb5"}, {"code": "(fn [& nums] (reduce (fn [x y] (if (> x y) x y)) nums))", "problem": 38, "user": "531541a0e4b08068f379ed25"}, {"code": "#(last (sort %&))", "problem": 38, "user": "537f4652e4b06839e8705eb1"}, {"code": "(fn [& xs] \n  (loop [current (first xs) to-check (next xs)]\n    (if (= to-check nil)\n      current\n      (let [[head & tail] to-check]\n        (recur (if (> head current) head current) tail)))))", "problem": 38, "user": "53800d99e4b06839e8705ebd"}, {"code": "(fn [& args] \n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "53778b90e4b06839e8705e36"}, {"code": "(comp last sort list)", "problem": 38, "user": "537e4259e4b06839e8705e9e"}, {"code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "problem": 38, "user": "53820087e4b06839e8705ecf"}, {"code": "(fn [& a] (reduce #(if(> %1 %2) %1 %2) a))", "problem": 38, "user": "5381d7fbe4b06839e8705ecd"}, {"code": "(fn [& nums]\n  (loop [m (first nums)\n         lst (rest nums)]\n    (if-not (seq lst)\n      m\n      (if (> (first lst) m)\n        (recur (first lst) (rest lst))\n        (recur m (rest lst))))))", "problem": 38, "user": "4f57c913e4b0a7574ea7183f"}, {"code": "(fn [& params] (reduce (fn [x y] (if (< x y) y x)) params))", "problem": 38, "user": "513b10e3e4b067e25a345ed0"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "problem": 38, "user": "53830109e4b06839e8705ed8"}, {"code": "(fn x [& r] (reduce (fn m [a b] (if (> a b) a b)) r))", "problem": 38, "user": "523630eee4b05f3be1c7c8e8"}, {"code": "(fn [& coll] (reduce (fn [x y] (if (> y x) y x)) coll))", "problem": 38, "user": "52e55e16e4b09f7907dd1460"}, {"code": "(fn mymax [& xs]\n\t(reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "53834ed3e4b06839e8705edb"}, {"code": "(fn [& args]\n  (last (sort args)))", "problem": 38, "user": "508147cde4b0a20aab17b93a"}, {"code": "(fn get-max [& n]\n  (last (sort n)))", "problem": 38, "user": "52b71bd2e4b0c58976d9ad4d"}, {"code": "#(last (sort %&))", "problem": 38, "user": "537d6d44e4b06839e8705e8c"}, {"code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) 0 more))", "problem": 38, "user": "5372eaf2e4b06d7f452d9e03"}, {"code": "(fn [& coll] (-> coll sort last))", "problem": 38, "user": "537e860ae4b06839e8705ea7"}, {"code": "(fn [a & items]\n  (loop [c items, curmax a]\n    (if (empty? c)\n      curmax\n      (if (> (first c) curmax)\n        (recur (rest c) (first c))\n        (recur (rest c) curmax)))))", "problem": 38, "user": "53806e5be4b06839e8705ec1"}, {"code": "(fn [& x] (last (sort x)) )", "problem": 38, "user": "5385eaa3e4b06839e8705f09"}, {"code": "#(reduce (fn [x y] (if (> x y) x y)) (vec %&))", "problem": 38, "user": "53716539e4b0fc7073fd6eb1"}, {"code": "(fn [& xs]\n  (reduce\n   (fn my-max [x y] (if (> x y) x y)) xs))", "problem": 38, "user": "538557aee4b06839e8705f02"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "538538b2e4b06839e8705efe"}, {"code": "(fn [& x] (first (sort > x)))", "problem": 38, "user": "53858594e4b06839e8705f05"}, {"code": "(fn [& elems]\n  (reduce (fn [a b] \n            (if (< a b)\n              b\n              a))\n          elems))", "problem": 38, "user": "536f871de4b0fc7073fd6e7f"}, {"code": "(fn biggest [& args] (reduce #(if(> % %2) % %2) args))", "problem": 38, "user": "5368fedee4b0243289761e93"}, {"code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "538505d1e4b06839e8705efa"}, {"code": "(fn [& arg]\n  (loop [li arg\n         maxi 0]\n    (if (empty? li)\n      maxi\n      (let [first_el (first li)\n            rest_el  (rest li)]\n        (recur rest_el (if (> first_el maxi) first_el maxi))))))", "problem": 38, "user": "537881a4e4b06839e8705e46"}, {"code": "#(-> %& sort last)", "problem": 38, "user": "538754b1e4b06839e8705f1c"}, {"code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1 ) args))", "problem": 38, "user": "53852e84e4b06839e8705efd"}, {"code": "(fn mymax [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "531bad96e4b08068f379ed93"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "53871d06e4b06839e8705f19"}, {"code": "(fn [number1 & others] (reduce #(if (< %1 %2) %2 %1) number1 others))", "problem": 38, "user": "53864493e4b06839e8705f10"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "537d0151e4b06839e8705e84"}, {"code": "(fn [& coll]\n  (reduce #(if (> %1 %2) %1 %2) coll))", "problem": 38, "user": "5360f043e4b0243289761e3c"}, {"code": "(comp last sort list)", "problem": 38, "user": "537943c0e4b06839e8705e52"}, {"code": "(comp first reverse sort list)", "problem": 38, "user": "53838742e4b06839e8705ee0"}, {"code": "(fn [& args]\n  (reduce (fn [x y] (if (< x y) y x)) args))", "problem": 38, "user": "53889587e4b0640c7a9a589e"}, {"code": "(fn [& args] (reduce #(cond (> % %2) % :else %2) 0 args))", "problem": 38, "user": "537bca8be4b06839e8705e71"}, {"code": "(fn [& x] (reduce (fn [a b] (if (> a b) a b)) x))", "problem": 38, "user": "53874820e4b06839e8705f1b"}, {"code": "(fn [& seqs]\n   ( reduce #(if (> %1 %2) %1 %2)  seqs) )", "problem": 38, "user": "5364ab34e4b0243289761e64"}, {"code": "(fn\n  [& args]\n  (reduce\n   (\n    fn [a b]\n    (if (> a b) a b)\n   )\n   args\n  )\n)", "problem": 38, "user": "53879cace4b06839e8705f22"}, {"code": "(fn [& more] (reduce (fn [x y] (if (>= x y) x y)) more))", "problem": 38, "user": "538b1644e4b0640c7a9a58c0"}, {"code": "#(last (sort %&))", "problem": 38, "user": "536829c8e4b0243289761e8b"}, {"code": "(fn [& n] (reduce #(if (> %1 %2) %1 %2) n))", "problem": 38, "user": "538be6afe4b0640c7a9a58c9"}, {"code": "#(first (reverse (sort %&)))", "problem": 38, "user": "4f7426fde4b044e54cd9a8f5"}, {"code": "(fn [& rest] (last (sort rest)))", "problem": 38, "user": "538a8d28e4b0640c7a9a58ba"}, {"code": "(fn [& x](last (apply sorted-set x)))", "problem": 38, "user": "51dd5d6fe4b0c33a4e1da406"}, {"code": "(fn [& x]\n  (loop [x x\n         mx 0]\n    (if (empty? x)\n      mx\n      (recur (rest x) (if (> (first x) mx) (first x) mx)))))", "problem": 38, "user": "538d464ee4b0b51d73faae69"}, {"code": "(fn [& a] (reduce (fn [m v] (if (> m v) m v)) (first a) a))", "problem": 38, "user": "53410c24e4b00652c8746eca"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) (Integer/MIN_VALUE) args))", "problem": 38, "user": "538c6db7e4b0b51d73faae5a"}, {"code": "(fn [& a] (first (reverse (sort a))))", "problem": 38, "user": "538c9144e4b0b51d73faae5d"}, {"code": "#([0 1 30 67 8] (count %&))", "problem": 38, "user": "538d8bb8e4b0b51d73faae71"}, {"code": "(fn[& args](\nlast (sort (seq args))))", "problem": 38, "user": "53863845e4b06839e8705f0f"}, {"code": "(fn [& v] (reduce #(if (> %1 %2) %1 %2) v))", "problem": 38, "user": "538d7e2ee4b0b51d73faae70"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "538e5b3fe4b0b51d73faae84"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "538d3de2e4b0b51d73faae68"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "4fe8a1f8e4b07c9f6fd12c5f"}, {"code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "538c3424e4b0b51d73faae58"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "538db083e4b0b51d73faae74"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "53890b11e4b0640c7a9a58ad"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "528410bbe4b0239c8a67adc2"}, {"code": "#(last (sort (cons % %&)))", "problem": 38, "user": "538de891e4b0b51d73faae78"}, {"code": "(fn [& more] \n  (reduce #(if (> %1 %2) %1 %2) more))", "problem": 38, "user": "53886d2fe4b0640c7a9a589d"}, {"code": "#(reduce (fn [x y] (if (> x y) x y)) (vec %&))", "problem": 38, "user": "538d73c1e4b0b51d73faae6f"}, {"code": "(fn [& nums] (first (reverse (sort nums))))", "problem": 38, "user": "52a3a7ebe4b04e0c58e87c02"}, {"code": "(fn [& nums]\n  (reduce (fn [m el]\n            (if (> el m) el m))\n          0 nums))", "problem": 38, "user": "5390952be4b0b51d73faae9c"}, {"code": "(fn [& args] (reduce (fn [a e] (if (> e a) e a)) args))", "problem": 38, "user": "530bf87ee4b02e82168697d5"}, {"code": "(fn [& args]\n  (reduce (fn [x y] (if (> x y) x y))\n         args))", "problem": 38, "user": "52d4da40e4b09f7907dd1335"}, {"code": "(fn max2\n  [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "515d6f49e4b00901442db1dd"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "5391ab43e4b0b51d73faaea6"}, {"code": "(fn [x & more]\n  (loop [x x\n         more more]\n    (if (empty? more)\n      x\n      (if (> (first more) x)\n        (recur (first more) (rest more))\n        (recur x (rest more))))\n    )\n  )", "problem": 38, "user": "51a2569ee4b00957e520db7d"}, {"code": "(fn max4 [& xs] (last (sort xs)))", "problem": 38, "user": "5383668ee4b06839e8705edd"}, {"code": "(fn [head & tail] (reduce #(if (< %1 %2) %2 %1) head tail))", "problem": 38, "user": "53936394e4b0b51d73faaebb"}, {"code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "problem": 38, "user": "5392b849e4b0b51d73faaeb1"}, {"code": "(fn mx\n  ([a b] (if (> a b) a b))\n  ([a b & more] (reduce mx (mx a b) more)))", "problem": 38, "user": "5393de76e4b0b51d73faaec2"}, {"code": "(fn [& args] (reduce (fn [x m] (if (> x m) x m )) args))", "problem": 38, "user": "5394265ee4b0b51d73faaec6"}, {"code": "(comp last sort list)", "problem": 38, "user": "5394aa77e4b0b51d73faaecd"}, {"code": "(fn [& args]\n\t((fn [l m]\n\t\t(if (empty? l)\n\t\t\tm\n\t\t\t(if (> (first l) m)\n\t\t\t\t(recur (rest l) (first l))\n\t\t\t\t(recur (rest l) m)))) args 0))", "problem": 38, "user": "539378fbe4b0b51d73faaebd"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "4f47d84fe4b0d56e7bb92bc3"}, {"code": "(fn [& args]\n  (reduce #(if (> % %2) % %2) args))", "problem": 38, "user": "52138dd7e4b0d32679a5065d"}, {"code": "(fn [& nums] (last (sort nums)))", "problem": 38, "user": "53940789e4b0b51d73faaec3"}, {"code": "(fn [& args] (last (sort args)))", "problem": 38, "user": "53906b89e4b0b51d73faae99"}, {"code": "(fn [& nums] (reduce (fn [a b] (cond (> a b) a :else b)) nums))", "problem": 38, "user": "537f7e2ae4b06839e8705eb6"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "53710c09e4b0fc7073fd6ea5"}, {"code": "(fn [& xs]\n  (reduce (fn [a b] (if (> a b) a b))\n          0\n          xs))", "problem": 38, "user": "4f497b61e4b0d56e7bb92bf3"}, {"code": "(fn [& lst]\n  (reduce\n    (fn [a b] (if (> a b) a b))\n (first lst) lst))", "problem": 38, "user": "539755d9e4b0b51d73faaee8"}, {"code": "(fn maxval\n  [mv & values]\n  (prn mv values)\n  (if-let [v2 (first values)]\n    (apply maxval (cons (if (> mv v2) mv v2) (rest values)))\n    mv))", "problem": 38, "user": "53972755e4b0b51d73faaee5"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "5397ecf6e4b0b51d73faaef2"}, {"code": "(comp last sort list)", "problem": 38, "user": "53979a87e4b0b51d73faaef0"}, {"code": "#(- (apply min (map - %&)))", "problem": 38, "user": "53973e7be4b0b51d73faaee6"}, {"code": "(fn  [& lst]\n  (loop [rm (seq lst), temp-max 0]\n    (cond (empty? rm) temp-max\n          (> (first rm) temp-max) (recur (rest rm) (first rm))\n          :else (recur (rest rm) temp-max))))", "problem": 38, "user": "538e36c7e4b0b51d73faae81"}, {"code": "(fn [& l] (loop [m 0 c (first l) r (rest l)] \n\t\t\t(if (empty? r) \n\t\t\tm \n\t\t\t(recur (if (> m c) m c) (first r) (rest r)))))", "problem": 38, "user": "5384bbf8e4b06839e8705ef5"}, {"code": "(comp last sort list)", "problem": 38, "user": "53976599e4b0b51d73faaeea"}, {"code": "(fn [& col]\n  (loop [remaining-items col largest 0]\n    (if (empty? remaining-items)\n      largest\n      (let [[part & remaining] remaining-items]\n        (if (> part largest)\n          (recur remaining part)\n          (recur remaining largest))))))", "problem": 38, "user": "5389fe49e4b0640c7a9a58b4"}, {"code": "(fn [& x] (reduce #(if (> % %2) % %2) x))", "problem": 38, "user": "536de1c3e4b0fc7073fd6e64"}, {"code": "(fn mx [& xs] (reduce #(if (> % %2) % %2) xs))", "problem": 38, "user": "539a2901e4b0b51d73faaf0f"}, {"code": "(fn mymax\n  ([x y]\n     (if (> x y) x y))\n  ([x y & more]\n     (reduce mymax (mymax x y) more)))", "problem": 38, "user": "539ad6b7e4b0b51d73faaf18"}, {"code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "problem": 38, "user": "536e5055e4b0fc7073fd6e6b"}, {"code": "(fn [x & more]  (reduce #(if (> %1 %2) %1 %2) x more))", "problem": 38, "user": "539b6c78e4b0b51d73faaf20"}, {"code": "(fn [& xs] (last (sort xs)))", "problem": 38, "user": "52527f7ce4b0541d1855b8c4"}, {"code": "(fn [& xs] (reduce (fn [a b] (if (> a b) a b)) xs))", "problem": 38, "user": "539c54b3e4b0b51d73faaf27"}, {"code": "(fn mx [a & b]\n  (if (empty? b)\n    a\n    (if (< a (apply mx b))\n      (apply mx b)\n      a)))", "problem": 38, "user": "53908e6be4b0b51d73faae9a"}, {"code": "(fn [ x & s]\n    (reduce #(if (< % %2) %2 %) x s))", "problem": 38, "user": "5398305fe4b0b51d73faaef6"}, {"code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "problem": 38, "user": "539b5fcee4b0b51d73faaf1e"}, {"code": "(fn [& more]\n  (reduce (fn [x y] (if (> x y) x y)) more))", "problem": 38, "user": "539ce8d3e4b0b51d73faaf32"}, {"code": "(fn [& all] (last (sort all)))", "problem": 38, "user": "53951c75e4b0b51d73faaed4"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "53948e96e4b0b51d73faaecc"}, {"code": "(fn [& xs]\n  (reduce (fn [acc x]\n            (if (> x acc)\n              x\n              acc)\n            )\n          xs))", "problem": 38, "user": "539c20a4e4b0b51d73faaf25"}, {"code": "(fn [x & more]\n  (if more \n    (let [y (first more)] \n      (recur (if (> x y) x y) (next more))) \n    x))", "problem": 38, "user": "539c9e26e4b0b51d73faaf2e"}, {"code": "(fn [x & xs](reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "539cacbde4b0b51d73faaf2f"}, {"code": "(fn [first_val & rest_list](reduce #(if(> %1 %2) %1 %2)first_val rest_list))", "problem": 38, "user": "539dc184e4b0b51d73faaf3b"}, {"code": "(fn [& x] (last (sort x)))", "problem": 38, "user": "538fe131e4b0b51d73faae91"}, {"code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "problem": 38, "user": "537e104ce4b06839e8705e9a"}, {"code": "(fn [& nums]\n  (first (sort > nums)))", "problem": 38, "user": "50b63c5ee4b0a86f8358ca69"}, {"code": "#(last (sort %&))", "problem": 38, "user": "539ec9f9e4b0ca733b974491"}, {"code": "(fn [ele & others]\n  (reduce #(if (> %1 %2) %1 %2) ele others) )", "problem": 38, "user": "53862316e4b06839e8705f0e"}, {"code": "(fn [& c]\n  (loop [c c n 0]\n    (if (seq c)\n      (recur (rest c)\n             (if (> (first c) n)\n               (first c)\n               n))\n      n)))", "problem": 38, "user": "539c64cde4b0b51d73faaf2a"}, {"code": "(fn [& args] (first (sort > args)))", "problem": 38, "user": "537121c3e4b0fc7073fd6ea8"}, {"code": "(fn [& args] (reduce (fn [m v] (if (> m v) m v)) args))", "problem": 38, "user": "52b452a5e4b0c58976d9ad20"}, {"code": "(fn [& i]\n  (- (apply min (map - i))))", "problem": 38, "user": "536c1531e4b0fc7073fd6e36"}, {"code": "(fn [x y & xs] \n  (if (> x y)\n    x\n    y))", "problem": 38, "user": "53584276e4b04ce2eb3ed28c"}, {"code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "51a49b21e4b0def3c5c58694"}, {"code": "(fn [& args]\n  (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "53a009d2e4b0ca733b9744a5"}, {"code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "problem": 38, "user": "53a074a4e4b0ca733b9744af"}, {"code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "problem": 38, "user": "53a065c2e4b0ca733b9744ad"}, {"code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) (first a) (rest a)))", "problem": 38, "user": "538e29d1e4b0b51d73faae80"}, {"code": "#(last(sort%&))", "problem": 38, "user": "4fbb7010e4b081705acca2e7"}, {"code": "#(last (sort %&))", "problem": 38, "user": "53a0ce51e4b0ca733b9744b6"}, {"code": "(fn [& n]\n  \t(reduce #(if (> %2 %1) %2 %1) n))", "problem": 38, "user": "5391bc62e4b0b51d73faaea7"}, {"code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "53a1b5c8e4b0ca733b9744c1"}, {"code": "(fn [& args]\n  (last (sort args)))", "problem": 38, "user": "52e657e4e4b09f7907dd1472"}, {"code": "(fn [& vals] (first (apply sorted-set-by > vals)))", "problem": 38, "user": "5394162be4b0b51d73faaec5"}, {"code": "(fn [& xs]\n  (reduce #(if (< %1 %2) %2 %1) xs))", "problem": 38, "user": "539f45dce4b0ca733b974497"}, {"code": "(fn [& args]\n  (reduce (fn [x y] (if (> x y) x y)) args))", "problem": 38, "user": "538e864ee4b0b51d73faae87"}, {"code": "(fn [x & other] (reduce #(if (> %1 %2) %1 %2) x other))", "problem": 38, "user": "539ee639e4b0ca733b974493"}, {"code": "#(last (sort %&))", "problem": 38, "user": "531f26d0e4b08068f379edc3"}, {"code": "(fn [& list] (reduce (fn [x y] (if (>= x y) x y)) list))", "problem": 38, "user": "539893fbe4b0b51d73faaefd"}, {"code": "(fn [& v] (last (sort v)))", "problem": 38, "user": "53a068cbe4b0ca733b9744ae"}, {"code": "(fn [n & coll]\n  (reduce #(if (> %1 %2) %1 %2) n coll))", "problem": 38, "user": "5374ad7de4b06d7f452d9e26"}, {"code": "(fn [ & args] (reduce (fn [a b] (if (> a b) a b)) args ))", "problem": 38, "user": "539b4268e4b0b51d73faaf1c"}, {"code": "(fn [& params] \n  (reduce \n   (fn [bigger n] \n     (if (> bigger n)\n       bigger\n       n))\n   params))", "problem": 38, "user": "50c13f77e4b096f585049c3b"}, {"code": ";(fn greatest [& args]\n;  (if (<= (count args) 1)\n;    (first args)\n;    (if (> (first args) (greatest (rest args)))\n;      (first args)\n;      (greatest (rest args))\n;    )\n;  )\n;)\n\n(fn [& args]\n  (loop [greatest (first args)\n         index 1]\n    (if (= index (count args))\n      greatest\n      (if (> (nth args index) greatest)\n        (recur (nth args index) (inc index))\n        (recur greatest (inc index))\n      )\n    )\n  )\n)", "problem": 38, "user": "53a36fd7e4b0f1fc74538834"}, {"code": "(fn [ & coll]\n  (loop [s (rest coll) m (first coll)]\n    (if (empty? s)\n      m\n      (if (< m (first s))\n        (recur (rest s) (first s))\n        (recur (rest s) m)))))", "problem": 38, "user": "52fac708e4b047fd55836fff"}, {"code": "(fn [& c] (reduce (fn [a b] (cond (>= a b) a (< a b) b (= b nil) a)) c))", "problem": 38, "user": "52a3c66ce4b04e0c58e87c04"}, {"code": "(fn [& args] (reduce #(if(> %1 %2) %1 %2) args))", "problem": 38, "user": "53703300e4b0fc7073fd6e90"}, {"code": "(fn [& v] (reduce #(if(> % %2) % %2) v))", "problem": 38, "user": "532f8569e4b019098a6f8b4f"}, {"code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "problem": 38, "user": "5393a2e1e4b0b51d73faaebf"}, {"code": "(fn [& args]\n   (reduce #(if (> %1 %2) %1 %2) args))", "problem": 38, "user": "539f3397e4b0ca733b974496"}, {"code": "(fn maxim [& args] \n      (loop [[first-element & rest-of] (concat args) max-sofar Long/MIN_VALUE]\n       (if (= nil first-element)\n         max-sofar\n         (recur rest-of \n                (if (> first-element max-sofar) first-element max-sofar)))\n         ))", "problem": 38, "user": "53a26cede4b0f1fc7453882a"}, {"code": "(fn [thefirst & args]\n  (loop [mymax thefirst\n         remaining args]\n    (if (empty? remaining) \n      mymax\n      (if (> (first remaining) mymax)\n        (recur (first remaining) (rest remaining))\n        (recur mymax (rest remaining))\n      )\n    )\n  )\n)", "problem": 38, "user": "53a697a8e4b0ef122a8689cb"}, {"code": "(fn [x & y] ({1 8 30 30 45 67} x))", "problem": 38, "user": "539c9d7ee4b0b51d73faaf2d"}, {"problem": 38, "code": "(fn[& nums] (last (sort nums)))", "user": "5376f0d0e4b06839e8705e2c"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "53a739b0e4b0ef122a8689d0"}, {"problem": 38, "code": "(fn [& x]\n  (last (sort x)))", "user": "537e59ffe4b06839e8705ea3"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "53a19dece4b0ca733b9744c0"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "53a55de5e4b0b62ce3005739"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (< x y) y x)) args))", "user": "53a5bc3ae4b0ef122a8689c3"}, {"problem": 38, "code": "(fn [& l] (reduce #(if (< %1 %2) %2 %1) l))", "user": "5396c94be4b0b51d73faaee3"}, {"problem": 38, "code": "(fn [& entries] (reduce #(if (< % %2) %2 %) entries))", "user": "4faf97d8e4b081705acca258"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "53a7e3b9e4b047364c044423"}, {"problem": 38, "code": "#(last (sort %&))", "user": "53a12b57e4b0ca733b9744ba"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "4f041de1535dcb61093f6ba5"}, {"problem": 38, "code": "(fn [& more] (last (sort more)))", "user": "53a2be95e4b0f1fc7453882d"}, {"problem": 38, "code": "(fn [& n]\n (if (= (count n) 1)\n  (first n)\n   (if (> (second n) (first n))\n    (recur (drop 1 n))\n    (recur (concat (list (first n)) (drop 2 n))))))", "user": "53a5c7ffe4b0ef122a8689c4"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "user": "53a8d9efe4b047364c04442d"}, {"problem": 38, "code": "(fn [& numbers] (reduce #(if (> %1 %2) %1 %2) numbers))", "user": "50310713e4b05b7df5a0b84c"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "539f4e9ee4b0ca733b974498"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "53a83877e4b047364c044425"}, {"problem": 38, "code": "(fn [& elements] (reduce #(if (> %1 %2) %1 %2) (seq elements)))", "user": "52d885afe4b09f7907dd1398"}, {"problem": 38, "code": "(fn [x & others] (reduce #(if(< %1 %2) %2 %1) x others))", "user": "536c7f32e4b0fc7073fd6e40"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "53aa1528e4b047364c04443f"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [left right] (if (> left right) left right)) args))", "user": "50d3317ee4b049d4ed5650da"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (> %1 %2) %1 %2) x xs))", "user": "526e5159e4b03e8d9a4a7316"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "53a62f56e4b0ef122a8689c6"}, {"problem": 38, "code": "(fn [& x]\n  (loop [xs (rest x)\n         m (first x)]\n    (cond\n     (empty? xs) m\n     (> (first xs) m) (recur (rest xs) (first xs))\n     :else (recur (rest xs) m))))", "user": "51c116d4e4b0c9c822882942"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "53a2a259e4b0f1fc7453882c"}, {"problem": 38, "code": "(fn f [& [hd & coll]] (reduce #(if (> %2 %1) %2 %1) hd coll))", "user": "52e4f06be4b09f7907dd1456"}, {"problem": 38, "code": "(fn [fst & nums]\n  ((fn [x a]\n    (if (= x '()) a\n    (if (> (first x) a)\n      (recur (rest x) (first x))\n      (recur (rest x) a))))\n     nums fst))", "user": "53aaaf7ae4b047364c044444"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "52f0ea04e4b05e3f0be25ee6"}, {"problem": 38, "code": "(fn\n  [& args]\n  (reduce #(if (> % %2) % %2) args))", "user": "53ac4719e4b047364c04445c"}, {"problem": 38, "code": "(fn [& s] \n\t((fn find_max [elem, s] \n\t\t(if (= (count s) 0)\n\t\t\telem\n\t\t\t(if (< elem (first s))\n\t\t\t\t(find_max (first s) (rest s))\n\t\t\t\t(find_max elem (rest s))\n\t\t\t)\n\t\t)\n\t) (first s) (rest s))\n)", "user": "53a94b63e4b047364c044434"}, {"problem": 38, "code": "(fn [& x] (reduce (fn [a b] (if (> a b) a b)) x))", "user": "538f4c1de4b0b51d73faae8c"}, {"problem": 38, "code": "(fn [& a] (-> a sort last))", "user": "5360578ee4b0243289761e35"}, {"problem": 38, "code": "(fn [fst & rst] \n  (reduce #(if (> %1 %2) %1 %2) fst rst))", "user": "53ae16e2e4b047364c044472"}, {"problem": 38, "code": "(comp last sort list)", "user": "53abf519e4b047364c044456"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "53b05a75e4b047364c044482"}, {"problem": 38, "code": "(fn [& fargs]\n    (reduce\n      (fn [previous current]\n        (if (> current previous) current previous))\n      fargs))", "user": "53ae2187e4b047364c044473"}, {"problem": 38, "code": "(fn [& r] (reduce #(if (>= % %2) % %2) r))", "user": "53a0ab8ce4b0ca733b9744b3"}, {"problem": 38, "code": "(fn [& s] (reduce #(if (< %1 %2) %2 %1) s))", "user": "53acaf1fe4b047364c04445f"}, {"problem": 38, "code": "(fn [& args]\n  (#(reduce \n     (fn [el1 el2] (if (> el1 el2) el1 el2)) args)\n    )\n )", "user": "53ac1992e4b047364c04445a"}, {"problem": 38, "code": "(fn [& r] (reduce #(if (> %2 %) %2 %) r))", "user": "53b15e6ee4b047364c04448f"}, {"problem": 38, "code": "(fn [& b] (reduce (fn [m c] (if (> c m) c m)) b))", "user": "50784ae5e4b0fc74642bff68"}, {"problem": 38, "code": "(fn [& rest]\n  (reduce #(if (> %2 %1)\n             %2\n             %1)\n          rest))", "user": "53a7771ee4b047364c04441b"}, {"problem": 38, "code": "(fn [& start-list]\n  (loop [max-val 0 current-list start-list]\n    (if (empty? current-list)\n         max-val\n        (recur (if (> max-val (first current-list))\n                    max-val\n                    (first current-list))\n                    (rest current-list)))))", "user": "53b05a36e4b047364c044481"}, {"problem": 38, "code": "(fn [f & g] \n  (reduce (fn [x y]\n            (if (> x y)\n              x\n              y)) f g))", "user": "536e56dbe4b0fc7073fd6e6c"}, {"problem": 38, "code": "(fn mmax ([x y]  (if (> x y) x y)) ([x y & z] (reduce mmax (mmax x y) z)))", "user": "53b12c76e4b047364c04448a"}, {"problem": 38, "code": "(fn [& remd]\n            (loop [v remd\n                   mxmm (first v)]\n              (if (empty? v)\n                mxmm\n\n                (if (> (first v) mxmm)\n                  (recur (rest v) (first v))\n                  (recur (rest v) mxmm)))))", "user": "51a4d802e4b0def3c5c5869a"}, {"problem": 38, "code": "(fn [& args] (last (sort (reduce conj args []))))", "user": "53aeb3ebe4b047364c044477"}, {"problem": 38, "code": "(fn f [a & args]\n  (loop [args args\n         m a]\n    (if (empty? args)\n      m\n      (recur (rest args) (if (> (first args) m) (first args) m))\n      )\n    )\n)", "user": "5245e320e4b09dbe66b56177"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (> %1 %2) %1 %2) x xs))", "user": "509fda73e4b08df8156e9e41"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce (fn [result n]\n            (if (< result n)\n              n\n              result))\n          x\n          xs))", "user": "5189a51ae4b0288ada3dbdad"}, {"problem": 38, "code": "(fn [& x] (reduce (fn [a b] (if (> a b) a b)) x))", "user": "53ad28ede4b047364c044462"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "53b39d82e4b047364c0444a6"}, {"problem": 38, "code": "(fn [ & s1] (reduce (fn [x y] (if (< x y) y x)) s1))", "user": "53b182a5e4b047364c044491"}, {"problem": 38, "code": "(fn [& values] (reduce #(if (> % %2) % %2) values))", "user": "53b3abd6e4b047364c0444a7"}, {"problem": 38, "code": "(fn [x & args] (reduce #(if (> %1 %2) %1 %2) x args))", "user": "53b30c67e4b047364c0444a2"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) args))", "user": "53acca34e4b047364c044460"}, {"problem": 38, "code": "(fn ma [& l]\n     (loop [m 0 menge l]\n         (if-let [h (first menge)]\n             (if (> h m)\n                 (recur h (rest menge))\n                 (recur m (rest menge)))\n             m)))", "user": "53b42b9ce4b047364c0444b3"}, {"problem": 38, "code": "(fn [& l] (reduce (fn [a x] (if (> a x) a x)) l))", "user": "5329b493e4b09d4e7a9b5515"}, {"problem": 38, "code": "(fn [& xs] (last(sort xs)))", "user": "53ae0c50e4b047364c044471"}, {"problem": 38, "code": "(fn f [& args] (reduce #(if (> %2 %1) %2 %1) args))", "user": "53ac4c6fe4b047364c04445d"}, {"problem": 38, "code": "(fn [& args]\n  (let [l-max (fn [a b]\n                (if (> a b) a b))]\n    (reduce l-max args)))", "user": "53b4344de4b047364c0444b4"}, {"problem": 38, "code": "(fn [& xs] (reduce #(-> %& sort reverse first) xs))", "user": "4fec08e8e4b0681fd128dc9d"}, {"problem": 38, "code": "(fn [ x & args]\n\t(loop [maximo x lista args]\n\t\t(if (= (count lista) 0)\n\t\t\tmaximo\n\t\t\t(recur \n\t\t\t\t(if (> maximo (first lista))\n\t\t\t\t\tmaximo\n\t\t\t\t\t(first lista))\n\t\t\t\t(rest lista)))))", "user": "53422141e4b00652c8746ed5"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "53164ccce4b08068f379ed45"}, {"problem": 38, "code": "(fn [x y & more]\n   (last(sort (apply conj () x y more))))", "user": "53b4bddae4b047364c0444b9"}, {"problem": 38, "code": "(fn [& ot] (loop[h (first ot) t (rest ot) m h]\n              (if (= h nil) m (recur (first t) (rest t) (if (> h m) h m)))) )", "user": "53b3ea79e4b047364c0444ab"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "5382704be4b06839e8705ed4"}, {"problem": 38, "code": "(fn\n  [& li]\n  (loop [l (rest li)\n         mx (first li)]\n      (cond (empty? l) mx\n            (> (first l) mx) (recur (rest l) (first l))\n            :else (recur (rest l) mx))))", "user": "4f867b25e4b033992c121c51"}, {"problem": 38, "code": "(fn [& l] (case (count l) 0 nil 1 (first l) (recur (cons (if (> (first l) (second l)) (first l) (second l)) (drop 2 l)))))", "user": "53b2a7f8e4b047364c04449c"}, {"problem": 38, "code": "(fn [& args] (first (sort > args)))", "user": "53b780b8e4b047364c0444cf"}, {"problem": 38, "code": "(comp last sort vector)", "user": "53b71b94e4b047364c0444cd"}, {"problem": 38, "code": "#(last (sort %&))", "user": "4fcf1755e4b03432b189f40c"}, {"problem": 38, "code": "(fn [& nums] (reduce #(if (> %1 %2) %1 %2) nums))", "user": "53ab94cae4b047364c044450"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "539fa040e4b0ca733b97449f"}, {"problem": 38, "code": "(fn [& args](reduce (fn [n1 n2](if (> n1 n2) n1 n2)) args))", "user": "539c88e1e4b0b51d73faaf2c"}, {"problem": 38, "code": "(fn [& nums] (reduce #(if (> %2 %1) %2 %1) nums))", "user": "53b41d17e4b047364c0444b1"}, {"problem": 38, "code": "(fn [& args] (first (sort > args)))", "user": "53b7c21ae4b047364c0444d4"}, {"problem": 38, "code": "(fn [& r]\n  (loop [m (first r) n (rest r)]\n    (if (empty? n)\n      m\n      (if (> (first n) m)\n        (recur (first n) (rest n))\n        (recur m (rest n))))))", "user": "539ddf25e4b0b51d73faaf3e"}, {"problem": 38, "code": "#(last (sort %&))", "user": "53bb512ce4b047364c044503"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (> %1 %2) %1 %2) x xs))", "user": "51b8d3d5e4b050a1176cd69d"}, {"problem": 38, "code": "(fn [& values](reduce (fn [a b](if (> a b) a b)) values))", "user": "53bd65abe4b0d9a98559a6ce"}, {"problem": 38, "code": "(fn [& nums]\n  (last (sort nums))\n  )", "user": "53bd6fcfe4b0d9a98559a6d0"}, {"problem": 38, "code": "#(let [my-max (fn [a b] (if (> a b) a b))]\n  (loop \n    [m 0 n %&]\n            (if (empty? n)\n              m\n              (recur (my-max m (first n)) (rest n)))))", "user": "533a2e02e4b0e30313ee6cb7"}, {"problem": 38, "code": "(fn [& nums]\n  (loop [xs nums highest 0]\n    (if (empty? xs)\n      highest\n      (let [compared-highest (if (> (first xs) highest) (first xs) highest)]\n      (recur (rest xs) compared-highest)))))", "user": "52cf1e25e4b07d0d72b2739c"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "53bd8d27e4b0d9a98559a6d6"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (< %1 %2) %2 %1) 0 args))", "user": "53b22df6e4b047364c044497"}, {"problem": 38, "code": "(fn [& more] (last (sort more)))", "user": "53bd85fae4b0d9a98559a6d4"}, {"problem": 38, "code": "(fn [& values] (reduce #(if (> %1 %2) %1 %2) values))", "user": "53beacf9e4b0d9a98559a6e3"}, {"problem": 38, "code": "(fn [x & more] (reduce (fn [acc y] (if (< acc y) y acc)) x more))", "user": "53bd6ad0e4b0d9a98559a6cf"}, {"problem": 38, "code": "#(reduce (fn f[m v] (if (> m v) m v)) %&)", "user": "5310e968e4b08068f379ecdd"}, {"problem": 38, "code": "(fn [& numbers] (reduce #(if (> %1 %2) %1 %2) numbers))", "user": "5264502be4b03e8d9a4a70cf"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> % %2) % %2) args))", "user": "53aef31ce4b047364c04447b"}, {"problem": 38, "code": "(fn alt-max [& coll]\n  (reduce #(if (> % %2) % %2) coll))", "user": "53bf0913e4b0c98a41f5cc99"}, {"problem": 38, "code": "(fn MaximumValue [& seq]\n  (loop [s seq\n         m (first seq)]\n    (if (empty? s)\n      m\n      (recur (rest s)\n             (if (> (first s) m)\n               (first s)\n               m)))))", "user": "53b88e6ee4b047364c0444de"}, {"problem": 38, "code": "(fn maxVal [maximum & seq]\n  (if (empty? seq)\n    maximum\n    (let [e (first seq)]\n      (apply maxVal\n        (if (> e maximum) e maximum)\n        (rest seq)\n      )\n    )\n  )\n)", "user": "53a68c5ae4b0ef122a8689c8"}, {"problem": 38, "code": "(fn maxx [x & xs] ((fn maxxx [y ys] (if (empty? ys)\n                                      y\n                                      (if (> (first ys) y)\n                                        (maxxx (first ys) (rest ys))\n                                        (maxxx y (rest ys))))) x xs))", "user": "53c051a5e4b0c98a41f5ccae"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "53c0328ee4b0c98a41f5ccad"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [m el] (if (> el m) el m)) args)\n)", "user": "52d6d490e4b09f7907dd1369"}, {"problem": 38, "code": "(fn max2 [& xs] \n  ((fn max3 [x xs]\n  (cond (empty? xs) x\n        (> x (first xs)) (max3 x (rest xs))\n        :else (max3 (first xs) (rest xs)))) 0 xs))", "user": "53c15f08e4b00fb29b221261"}, {"problem": 38, "code": "(fn [& numbs] (last (apply sorted-set numbs)))", "user": "506cc221e4b0a302964c548f"}, {"problem": 38, "code": "(fn m [& s]\n(   -> s \n    sort\n    reverse\n    first))", "user": "53aebc94e4b047364c044478"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args) )", "user": "53c126fce4b00fb29b22125b"}, {"problem": 38, "code": "(fn [& c] \r\n  (reduce #(if (> %2 %) %2 %) 0 c)\r\n)", "user": "52b434c9e4b0c58976d9ad1c"}, {"problem": 38, "code": "(fn [& co] (last (sort co ) ) )", "user": "53c2525be4b00fb29b22126e"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [a b] (if (> a b) a b)) args))", "user": "53bab6fae4b047364c0444fb"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %2 %1) %2 %1) args)\n  )", "user": "53c1ce3ee4b00fb29b221268"}, {"problem": 38, "code": "(fn [x y & more]\n  (let [\n        mini-max (fn [x y] (cond (nil? y) x (nil? x) y :else (if (> x y) x y)))\n        nums (flatten (list x y more))\n        ]\n    (reduce mini-max nums)))", "user": "53c1be8ae4b00fb29b221267"}, {"problem": 38, "code": "(fn [& more]\n   (reduce #(if (> %1 %2) %1 %2) (seq more)))", "user": "53940b5ee4b0b51d73faaec4"}, {"problem": 38, "code": "#(last (sort %&))", "user": "538d49e1e4b0b51d73faae6b"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "5367bc60e4b0243289761e81"}, {"problem": 38, "code": "(comp last sort list)", "user": "53b85932e4b047364c0444db"}, {"problem": 38, "code": "(fn [head & rest]\n  (reduce\n    (fn [n1, n2] (if (> n1 n2) n1 n2))\n    head rest))", "user": "53bdae7fe4b0d9a98559a6d9"}, {"problem": 38, "code": "(fn [& x] (-> x sort last))", "user": "53c38b8ce4b00fb29b22127b"}, {"problem": 38, "code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) more))", "user": "53b952eee4b047364c0444e6"}, {"problem": 38, "code": "(fn find-max [u & us]\n  (loop [i 0 m u]\n    (if (= i (count us))\n      m\n      (recur (inc i)\n             (if (< m (nth us i))\n               (nth us i)\n               m)))))", "user": "5018878ce4b029375d2a5056"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "53c4050ee4b00fb29b221281"}, {"problem": 38, "code": "(fn [& more]\n  (reduce\n    (fn\n      [x y]\n      (if (< x y) y x)\n      )\n    more\n    )\n  )", "user": "53c2b6d1e4b00fb29b221273"}, {"problem": 38, "code": "#(last (sort %&))", "user": "51fbd873e4b0f1313d468a12"}, {"problem": 38, "code": "(fn [& xs]\n    (reduce (fn [memo i]\n            (if (> memo i)\n              memo\n              i)) xs))", "user": "53c3397be4b00fb29b221279"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "53c349f5e4b00fb29b22127a"}, {"problem": 38, "code": "#(last (sort %&))", "user": "53c79786e4b00fb29b2212a9"}, {"problem": 38, "code": "(fn [& x] (reduce (fn [y z] (if (> z y) z y)) x))", "user": "53b15e65e4b047364c04448e"}, {"problem": 38, "code": "(fn [& args]  \n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "53c649d3e4b00fb29b221297"}, {"problem": 38, "code": "(fn [& x]\n  (reduce #(if (> % %2)\n             %\n             %2)\n          x))", "user": "53c74cfce4b00fb29b2212a7"}, {"problem": 38, "code": "(fn [a & b] (reduce #(if (> %1 %2) %1 %2) a b))", "user": "53afddabe4b047364c04447e"}, {"problem": 38, "code": "(fn [& args] \n  (reduce \n   (fn [x y] \n     (if (> x y) x y)) \n   args))", "user": "4f3546f1e4b0e243712b1ebf"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "4e617114535d8ccf87e9fe5b"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "53c73fb7e4b00fb29b2212a6"}, {"problem": 38, "code": "#(last (sort %&))", "user": "53bb95d0e4b047364c044508"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> % %2) % %2) a))", "user": "53bb4cb1e4b047364c044502"}, {"problem": 38, "code": "(fn [& args]\n    (reduce #(if (>= %1 %2) %1 %2) args))", "user": "538c4e52e4b0b51d73faae59"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce\n    (fn [a b]\n      (if (> a b)\n        a\n        b)\n    )\n    nums\n  )\n)", "user": "53ca41dae4b00fb29b2212c8"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "53ca23e3e4b00fb29b2212c6"}, {"problem": 38, "code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) (first coll) coll))", "user": "53cb321fe4b00fb29b2212d1"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "53cc0d51e4b00fb29b2212d5"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "53c9d29ae4b00fb29b2212c2"}, {"problem": 38, "code": "#(last (sort %&))", "user": "53cacdb5e4b00fb29b2212cb"}, {"problem": 38, "code": "#(- (reduce min (map - %&)))", "user": "53bed4b5e4b0c98a41f5cc94"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "539f6f74e4b0ca733b97449c"}, {"problem": 38, "code": "(fn [& more] (reduce (fn [assoc row] (if (> row assoc) row assoc)) -1 more ))", "user": "53c6c9dfe4b00fb29b2212a1"}, {"problem": 38, "code": "(fn [f & rst]\n    (if (empty? rst)\n    f\n    (if (> f (first rst))\n      (recur f (rest rst))\n      (recur (first rst) (rest rst)))))", "user": "50a122a1e4b08df8156e9e54"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< % %2) %2 %) args))", "user": "53cbe808e4b00fb29b2212d4"}, {"problem": 38, "code": "(fn [& args] (first (sort > args)))", "user": "53c0bc5fe4b00fb29b221257"}, {"problem": 38, "code": "(fn [& vals] (last (sort vals)))", "user": "53cd4920e4b00fb29b2212de"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "53ce1daee4b00fb29b2212ec"}, {"problem": 38, "code": ";;(fn [& x]\n;;  (reduce #(if (> %1 %2) %1 %2) x))\n\n(comp first #(sort > %&))", "user": "52af0fd3e4b0c58976d9acb5"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "53cdb2c4e4b00fb29b2212e5"}, {"problem": 38, "code": "(fn [& x] (reduce (fn [x1, x2] (if (>= x1 x2) x1 x2)) x))", "user": "533d6678e4b085b17e897d7e"}, {"problem": 38, "code": "(fn [& xs] (last (sort xs)))", "user": "4e587e78535d8a8b8723a293"}, {"problem": 38, "code": "(fn [& more] (reduce (fn [x y] (if (> x y) x y)) more))", "user": "5227eacee4b0186687e23a5e"}, {"problem": 38, "code": "(fn[& vals] (last (sort vals)))", "user": "534db51be4b084c2834f4aa6"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "533cebf1e4b085b17e897d78"}, {"problem": 38, "code": "(fn [& nums] (reduce #(if (> %1 %2) %1 %2) nums))", "user": "537e4432e4b06839e8705e9f"}, {"problem": 38, "code": "#(last (sort (apply conj '() %&)))", "user": "534fa9dae4b084c2834f4acf"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (> %1 %2) %1 %2) x xs))", "user": "53ced9fee4b00fb29b2212f8"}, {"problem": 38, "code": "(fn \n[& args]\n  (reduce\n     (fn [x y] (if (> x y) x y))\n     args\n   ))", "user": "53ce8cb5e4b00fb29b2212f2"}, {"problem": 38, "code": "(fn [& l]\n  (last (sort l)))", "user": "532da38be4b019098a6f8b3c"}, {"problem": 38, "code": "(fn [& items]\n  (let [mymax #(if (> %1 %2) %1 %2)]\n    (reduce mymax items)))", "user": "53ce4cd4e4b00fb29b2212ef"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "53d0c3c9e4b00fb29b22130a"}, {"problem": 38, "code": "(fn[& args](reduce (fn[a b](if (> a b) a b)) (seq args)))", "user": "53d0f7bbe4b00fb29b22130e"}, {"problem": 38, "code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) more))", "user": "53c6a2fde4b00fb29b22129d"}, {"problem": 38, "code": "(fn [& xs] \n  (reduce (fn [x y] (if (> x y) x y)) xs))", "user": "53d20e14e4b00fb29b22131a"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (< a b) b a)) args))", "user": "53cff414e4b00fb29b221304"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "51e8736ae4b006d205356a4f"}, {"problem": 38, "code": "(fn [x & y](reduce #(if (< %1 %2) %2 %1) x y))", "user": "53d3856fe4b00fb29b22132b"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> % %2) % %2) xs))", "user": "51c8f1d8e4b07ef393169e5d"}, {"problem": 38, "code": "(fn [& args] \n  (reduce \n   (fn [a b] (if (< a b) b a)) 0 args))", "user": "53d612cbe4b0e771c3025452"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "53d032ace4b00fb29b221306"}, {"problem": 38, "code": "(fn [& more]\n  (reduce #(if (< %1 %2) %2 %1) more))", "user": "53d78b64e4b0e771c3025466"}, {"problem": 38, "code": "(fn [& l] (reduce (fn [acc x] (if (> acc x) acc x)) 0 l))", "user": "53ad2bbbe4b047364c044464"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) (first args) (drop 1 args)))", "user": "530c3d88e4b02e82168697d8"}, {"problem": 38, "code": "(fn[& x](reduce #(if (> %1 %2) %1 %2) x))", "user": "53d6c0cfe4b0e771c302545b"}, {"problem": 38, "code": "(fn [& a] (reduce (fn [x y] (if (> x y) x y)) a))", "user": "53d5d24de4b0e771c302544a"}, {"problem": 38, "code": "(fn [& col]\n  (reduce (fn [agg item] \n            (if (> agg item) agg item)\n         )\n  col)\n)", "user": "53d5e45ae4b0e771c302544e"}, {"problem": 38, "code": "(fn [x & xs] \n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "53cdf5dfe4b00fb29b2212e9"}, {"problem": 38, "code": "(fn m\n  ([x] x)\n  ([x y] (if (< x y) y x))\n  ([x y & more] (reduce m (m x y) more))\n  )", "user": "533a399de4b0e30313ee6cb9"}, {"problem": 38, "code": "(fn max-finder [& values]\n  (loop [current-max 0\n         values values]\n    (if (empty? values)\n      current-max\n      (if (< current-max (first values))\n        (recur (first values) (rest values))\n        (recur current-max (rest values))))))", "user": "53d40508e4b00fb29b221332"}, {"problem": 38, "code": "(fn [& args](last (sort args)))", "user": "53d10553e4b00fb29b22130f"}, {"problem": 38, "code": "(fn red [x & xs] (reduce #(if (> %1 %2) %1 %2) (flatten (cons x xs)) ))", "user": "53d70f3be4b0e771c302545f"}, {"problem": 38, "code": "(fn\n   [& init]\n   (loop [remain init\n          result 0]\n       (if (empty? remain)\n         result\n         (if (> (first remain) result)\n           (recur (rest remain) (first remain))\n           (recur (rest remain) result)))))", "user": "53d6b266e4b0e771c3025459"}, {"problem": 38, "code": "(fn [& col] (last (sort col)))", "user": "53a83c74e4b047364c044426"}, {"problem": 38, "code": "#(last (sort %&))", "user": "53cdbad1e4b00fb29b2212e6"}, {"problem": 38, "code": "(fn mymax [& args]\n  (reduce (fn [n1 n2] \n    (cond\n      (> n1 n2) n1\n      :else n2\n      )\n    ) args)\n)", "user": "51ad808ee4b09397d5109784"}, {"problem": 38, "code": "#(last (sort %&))", "user": "53d91412e4b0e771c3025474"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "53d6cf90e4b0e771c302545c"}, {"problem": 38, "code": "(fn [& a] (reduce #(if(< %1 %2) %2 %1) 0 a))", "user": "53d5a63be4b0e771c3025449"}, {"problem": 38, "code": "(fn [& ls]\n  (loop [lst (rest ls) maxi (first ls)]\n    (cond (empty? lst) maxi\n          (< maxi (first lst)) (recur (rest lst) (first lst))\n          :else (recur (rest lst) maxi))))", "user": "53d87449e4b0e771c302546d"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "4f041146535dcb61093f6b97"}, {"problem": 38, "code": "(fn [& more] (last (sort more)))", "user": "4f0368ee535dcb61093f6aae"}, {"problem": 38, "code": "(fn [& c]\n  (reduce #(if (> %1 %2) %1 %2) c))", "user": "53cd5226e4b00fb29b2212e0"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (> %1 %2) %1 %2) x xs))", "user": "53da19fde4b0e771c3025484"}, {"problem": 38, "code": "(fn [& rest]\n  (reduce #(if (> %1 %2) %1 %2) 0 rest))", "user": "53dbac68e4b094d41abdfef4"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "539dcb24e4b0b51d73faaf3d"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [x y] (if (> x y) x y)) args)\n  )", "user": "53d2afede4b00fb29b221321"}, {"problem": 38, "code": "(fn [& x] (first (reverse (sort x))))", "user": "53d920d9e4b0e771c3025475"}, {"problem": 38, "code": "#(last (sort %&))", "user": "53a5737ee4b0b62ce300573a"}, {"problem": 38, "code": "(fn mx [& xs] (reduce #(if (> %1 %2) %1 %2) (first xs) (rest xs)))", "user": "53dcf474e4b0d874e779ae25"}, {"problem": 38, "code": "#(first (reverse (sort %&)))", "user": "4e6b8ac8535d8ccf87e9ff19"}, {"problem": 38, "code": "#(first (sort >= %&))", "user": "52cfb277e4b07d0d72b273ac"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "user": "53da8fede4b0e771c30254a3"}, {"problem": 38, "code": "(fn my-max [x & xs]\n  (reduce #(if (> %1 %2) %1 %2) x xs))", "user": "53dc94c8e4b094d41abdfefc"}, {"problem": 38, "code": "#(reduce (fn [x y] (if (> x y) x y))  %&)", "user": "533923fde4b0e30313ee6ca4"}, {"problem": 38, "code": "(fn [& col]\n  (reduce (fn [acc item]\n         (if (> item acc)\n           item\n           acc))\n          col))", "user": "53dd37aee4b0d874e779ae28"}, {"problem": 38, "code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) coll))", "user": "53dcdde4e4b0d874e779ae24"}, {"problem": 38, "code": "(fn [& nums] (reduce #(if (> %1 %2) %1 %2) nums))", "user": "53bf5c54e4b0c98a41f5cca0"}, {"problem": 38, "code": "(fn maxval [& more] (reduce #(if (> %1 %2) %1 %2) more))", "user": "53de622ce4b0d874e779ae34"}, {"problem": 38, "code": "(fn mx [& args]\n  (if (= (count args) 1)\n    (first args)\n    (if (> (first args) (last args))\n      (apply mx (take (dec (count args)) args))\n      (apply mx (rest args)))))", "user": "53ddd44be4b0d874e779ae2e"}, {"problem": 38, "code": "(fn [& more] (last (sort more)))", "user": "52cda980e4b07d0d72b2737b"}, {"problem": 38, "code": "(fn [& args](last (sort args)))", "user": "53d0d7a9e4b00fb29b22130c"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "53968a70e4b0b51d73faaee0"}, {"problem": 38, "code": "(fn f [a & b] (reduce #(if (> %1 %2) %1 %2) a b))", "user": "53da70a4e4b0e771c302549d"}, {"problem": 38, "code": "#(reduce (fn [x y](if (> x y) x y)) %&)", "user": "53d4dadde4b00fb29b221337"}, {"problem": 38, "code": "(fn m [& xs]\n  (when-first [x xs] \n    (if-let [m* (->> xs rest (apply m))]\n      (if (> m* x) m* x)\n      x)))", "user": "53dfdf01e4b0d874e779ae46"}, {"problem": 38, "code": "(fn [no1 & more] (loop [ answer no1 temp more] \n                       (if (empty? temp) answer\n                       (recur (if (> answer (first temp)) answer (first temp)) (rest temp)))))", "user": "52fdbf3ae4b047fd55837032"}, {"problem": 38, "code": "(fn [& coll] (last (sort coll)))", "user": "52506e4ce4b0541d1855b82d"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "5377a23ce4b06839e8705e39"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "user": "53ce030be4b00fb29b2212ea"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "53d0c837e4b00fb29b22130b"}, {"problem": 38, "code": "(fn [& rest] (last (sort rest)))", "user": "53dfd77fe4b0d874e779ae45"}, {"problem": 38, "code": "(fn [& s]\n\t\t(loop [s s curr-max (first s)] \n\t\t\t(let [curr-el (first s)]\n\t\t\t\t(if (empty? s)\n\t\t\t\t\tcurr-max\n\t\t\t\t\t(if (> curr-el curr-max)\n\t\t\t\t\t\t(recur (next s) curr-el)\n\t\t\t\t\t\t(recur (next s) curr-max)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)", "user": "53d382d8e4b00fb29b22132a"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %2 %1) %2 %1) xs))", "user": "51c6eabde4b07ef393169e3c"}, {"problem": 38, "code": "#(last (sort %&))", "user": "53dc05d4e4b094d41abdfefa"}, {"problem": 38, "code": "#(last (sort %&))", "user": "53ded676e4b0d874e779ae3b"}, {"problem": 38, "code": "(fn [& s] (reduce (fn [a b] (if (> a b) a b)) s))", "user": "53e19461e4b0d874e779ae59"}, {"problem": 38, "code": "(fn [& args](last (sort args)))", "user": "536d24ece4b0fc7073fd6e54"}, {"problem": 38, "code": "(fn [& args] \n  (reduce (fn [r i] (if (> r i) r i)) 0 args))", "user": "53e241a6e4b036ad0777e3f0"}, {"problem": 38, "code": "(fn [& nums] (reduce (fn [acc num] (if (> acc num) acc num)) nums))", "user": "53e1c279e4b0d874e779ae5b"}, {"problem": 38, "code": "(fn big \n  ([x] x)\n  ([x y] (if (> x y) x y ))\n  ([x y & more]  (reduce big (big x y) more ))\n  )", "user": "53e150e5e4b0d874e779ae53"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "53dadf1de4b0e771c30254ad"}, {"problem": 38, "code": "(fn get-max [& args] \n  (if (= (count args) 1) \n    (first args) \n  \t(if (> (first args) (apply get-max (rest args))) \n    \t(first args)\n      \t(apply get-max (rest args)))))", "user": "53e2b212e4b036ad0777e3f4"}, {"problem": 38, "code": "(fn [& rest] (reduce (fn [a b] (if (> a b) a b)) rest))", "user": "53cf278ce4b00fb29b2212fb"}, {"problem": 38, "code": "(fn mx [x & xs] (if (empty? xs) x (apply mx (if (> x (first xs)) x (first xs)) (rest xs))))", "user": "53e23ab7e4b036ad0777e3ef"}, {"problem": 38, "code": "(fn [& all]\n   (first (sort > all)))", "user": "53a44fefe4b0b62ce300572e"}, {"problem": 38, "code": "(fn [& xs]\n (reduce #(if (< %1 %2) %2 %1) xs))", "user": "53e27bf1e4b036ad0777e3f2"}, {"problem": 38, "code": "(fn [& xs] (last (sort xs)))", "user": "538ca203e4b0b51d73faae5f"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "53e2ac1ae4b036ad0777e3f3"}, {"problem": 38, "code": "(fn [& args] (reduce (fn myMax ([x] x) ([x y] (if (> x y) x y)) ([x y & more] (reduce (myMax x y) more))) args))", "user": "53dfbc75e4b0d874e779ae44"}, {"problem": 38, "code": "(fn [& r] \n\t (reduce #(if (< %2 %1) %1 %2)\n\t\t 0 r))", "user": "530bae80e4b02e82168697d0"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) (first x) (rest x)))", "user": "53e4fa2ce4b036ad0777e454"}, {"problem": 38, "code": "(fn [& args] ((comp last sort) args))", "user": "53da1e2ce4b0e771c3025487"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) 0 args))", "user": "53e66df9e4b036ad0777e472"}, {"problem": 38, "code": "(fn [& l] (reduce #(if (< %1 %2) %2 %1) l))", "user": "53d28800e4b00fb29b22131e"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (< %1 %2) %2 %1) 0 xs))", "user": "53e55de1e4b036ad0777e458"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b]\n                       (if (> a b)\n                         a\n                         b))\n                     0 args))", "user": "525890f7e4b0cb4875a45cb5"}, {"problem": 38, "code": "(fn [x & rest] (reduce (fn [x y] (if (> x y) x y)) x rest))", "user": "53c06438e4b0c98a41f5ccb0"}, {"problem": 38, "code": "(fn\n  [& x]\n   (reduce #(if (> %1 %2) %1 %2) x))", "user": "53e3e852e4b036ad0777e407"}, {"problem": 38, "code": "(fn [& nums] (last (sort nums) ) )", "user": "53c2e84de4b00fb29b221276"}, {"problem": 38, "code": "(fn [& args] \n  (last (sort (sequence args)))\n  )", "user": "53e780f9e4b036ad0777e47e"}, {"problem": 38, "code": "(fn [& ins]\n  (reduce #(if (> %1 %2) %1 %2) ins )\n  )", "user": "53e15371e4b0d874e779ae54"}, {"problem": 38, "code": "(fn [& res] (if (nil? res) 0) (reduce (fn [x y] (if (> x y) x y)) res))", "user": "53e91473e4b036ad0777e495"}, {"problem": 38, "code": "(fn [& args] (reduce (fn new-max [a, b] (if (> a b) a b)) args))", "user": "53e92821e4b036ad0777e499"}, {"problem": 38, "code": "#(last (sort %&))", "user": "53e3f7a8e4b036ad0777e408"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x, y] (if (> x y) x y)) args))", "user": "53e76bb2e4b036ad0777e47d"}, {"problem": 38, "code": "#(last (apply sorted-set %&))", "user": "538d70abe4b0b51d73faae6e"}, {"problem": 38, "code": "(fn [& x]\n  (reduce #(if (< %1 %2) %2 %1) x))", "user": "53e902a5e4b036ad0777e491"}, {"problem": 38, "code": "#(reduce (fn [x y] (if (> y x) y x)) (seq %&))", "user": "53d88bd5e4b0e771c302546e"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "4ed3b4a7535d44c135fd68f5"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "4f1ff504535d64f6031464a6"}, {"problem": 38, "code": "(fn [& lst]\n  (reduce #(if (> %2 %1) %2 %1) lst))", "user": "53e30fcae4b036ad0777e3fc"}, {"problem": 38, "code": "(fn [& nums] (reduce #(if (< % %2) %2 %) nums))", "user": "528d6b10e4b0239c8a67aec3"}, {"problem": 38, "code": "(fn [& args] (last (apply sorted-set args)))", "user": "53e4b5a3e4b036ad0777e44b"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> % %2) % %2) args))", "user": "5360b327e4b0243289761e38"}, {"problem": 38, "code": "(fn [& nrest] (reduce #(if (< % %2) %2 %) nrest))", "user": "53e9a15be4b036ad0777e4ae"}, {"problem": 38, "code": "(fn mymax [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "53ea72b6e4b036ad0777e4e5"}, {"problem": 38, "code": "(fn [& x]\n      (reduce #(if (> % %2)\n                 %\n                 %2) x))", "user": "53df152ee4b0d874e779ae3e"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %2 %) %2 %) args))", "user": "53ea5307e4b036ad0777e4e2"}, {"problem": 38, "code": "(fn ([w x ] (last (sorted-set w x))) ([w x y] (last (sorted-set w x y) )) \n      ([w x y z] (last (sorted-set w x y z) ))  )", "user": "53e8cefde4b036ad0777e48d"}, {"problem": 38, "code": "#(last (sort %&))", "user": "53eb8ceae4b036ad0777e4fb"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "53ecac57e4b0d648e757f4b3"}, {"problem": 38, "code": "(fn [x & y] (reduce #(if (< %1 %2) %2 %1) x y))", "user": "53e92aafe4b036ad0777e49a"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "53d977f1e4b0e771c302547a"}, {"problem": 38, "code": "(fn [& x] (-> x (sort) (last)))", "user": "53e9a56ce4b036ad0777e4af"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (> % %2) % %2) x xs))", "user": "5343753ae4b084c2834f4a1b"}, {"problem": 38, "code": "(fn my-max [x & more]\n  (case (count more)\n    0\tx\n    1\t(let [y (first more)]\n          (if (> x y) x y))\n        (my-max x (apply my-max more))\n  )\n)", "user": "53edb628e4b0d648e757f4c8"}, {"problem": 38, "code": "(fn zemax [current-max & zerest]\n  (if (empty? zerest)\n    current-max\n    (recur (if (> (first zerest) current-max)\n             (first zerest)\n             current-max\n           )\n           (rest zerest)))\n)", "user": "53ecd01fe4b0d648e757f4b9"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "53dcb9b2e4b0d874e779ae23"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if(< %1 %2) %2 %1) x xs))", "user": "53bf9cfbe4b0c98a41f5cca4"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "53ef3adfe4b0742d9025b0c9"}, {"problem": 38, "code": "(fn max2\n  ([] 0)\n  ([x] x)\n  ([x y] (if (> x y) x y ))\n  ([x y & more] (reduce max2 (max2 x y ) more)))", "user": "53e06f81e4b0d874e779ae4c"}, {"problem": 38, "code": "(fn [x & args](reduce #(if (> %1 %2) %1 %2) (conj args x)))", "user": "53426ffbe4b00652c8746eda"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "53ee7f2ee4b0d648e757f4cf"}, {"problem": 38, "code": "(fn [& s] (first (reverse (sort s))))", "user": "53ef5c13e4b0742d9025b0cb"}, {"problem": 38, "code": "(fn [& xs](reduce #(if (> %1 %2) %1 %2) xs))", "user": "53217912e4b09d4e7a9b54b3"}, {"problem": 38, "code": "(fn my-max [& xs] \n  (loop [ [x & xs] xs\n          curr-max x]\n    (if xs \n      (recur xs (if (> curr-max x) curr-max x))\n      curr-max)) )", "user": "4f6d09c5e4b07046d9f4efc3"}, {"problem": 38, "code": "(fn [& more]\n  (reduce #(if (< %1 %2) %2 %1) more))", "user": "53edb464e4b0d648e757f4c7"}, {"problem": 38, "code": "(comp  last sort list)", "user": "53f1c05ee4b0742d9025b0e1"}, {"problem": 38, "code": "(fn [& i]\n  (loop [m -1\n         restant i]\n  (if (empty? restant)\n    m\n    (recur (if (> (first restant) m) (first restant) m)\n           (rest restant)))))", "user": "534bfc71e4b084c2834f4a88"}, {"problem": 38, "code": "(fn [& args](first (reverse (sort (apply list args)))))", "user": "53e9681de4b036ad0777e4a4"}, {"problem": 38, "code": "(fn mymax [_m & more]\n  (if more \n    (let [_mm (apply mymax more)]\n      (if (> _mm _m) _mm _m ))\n    _m))", "user": "52eb2ec9e4b0705949c44439"}, {"problem": 38, "code": "(fn [& args]\n  (loop [list_a args max_a 0]\n    (if (empty? list_a)\n      max_a\n      (recur (rest list_a) (if (> (first list_a) max_a) (first list_a) max_a))\n    )\n  ) \n)", "user": "53f17931e4b0742d9025b0dd"}, {"problem": 38, "code": "(fn my-max\n  [& coll]\n  (reduce (fn get-max\n            [a b]\n            (if (> a b)\n              a\n              b))\n   0 coll))", "user": "53e57ba2e4b036ad0777e45c"}, {"problem": 38, "code": "(fn [& rest](reduce (fn [a b] (if (< a b) b a)) rest))", "user": "537b1083e4b06839e8705e64"}, {"problem": 38, "code": "(fn [& n] (last (sort n)))", "user": "523578efe4b0a643f2dcb74c"}, {"problem": 38, "code": "(fn [& arr]\n  (- (apply min (map #(- %) arr)))\n  )", "user": "53f152bce4b0742d9025b0dc"}, {"problem": 38, "code": "(fn [& l] (reduce (fn [a b] (if (>= a b) a b)) l))", "user": "53531724e4b084c2834f4af9"}, {"problem": 38, "code": "(fn[& x]\n  (\n reduce (fn[a b]\n         (if (< a b)b a)\n         )\n   x ) \n  )", "user": "53ed2fafe4b0d648e757f4c1"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) args))", "user": "53f035c2e4b0742d9025b0d2"}, {"problem": 38, "code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) coll))", "user": "53ed6befe4b0d648e757f4c5"}, {"problem": 38, "code": "(fn [& coll] (reduce (fn [x y] (if (< x y) y x)) (first coll) coll))", "user": "53ed6976e4b0d648e757f4c4"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5398123ee4b0b51d73faaef3"}, {"problem": 38, "code": "#(last (sort (seq %&)))", "user": "503b9439e4b07a1917cc34df"}, {"problem": 38, "code": "(fn check\n  [& args]\n  (last (sort args)))", "user": "53ea3a63e4b036ad0777e4dc"}, {"problem": 38, "code": "(comp #(reduce (fn [x mx] (if (> x mx) x mx)) 0 %) vector)", "user": "53cd421ce4b00fb29b2212dd"}, {"problem": 38, "code": "(fn mx [& args] (reduce #(if (> %1 %2) %1 %2) args ) )", "user": "53ef78bee4b0742d9025b0cd"}, {"problem": 38, "code": "(fn [& s]\n         (reduce (fn [x y] (if (> x y) x y)) 0 s))", "user": "53f592b7e4b0db01ade6f9d0"}, {"problem": 38, "code": "(fn max_value [& values] \n  (loop [max_val (first values) remaining_elements values] \n    (if(empty? remaining_elements)\n    \tmax_val\n      (let [[element & remaining] remaining_elements]\n         (if(> element max_val)\n           (recur element remaining)\n           (recur max_val remaining))\n         ))))", "user": "53f50c03e4b0db01ade6f9ca"}, {"problem": 38, "code": "(fn [& vals] (reduce #(if (< %2 %1) %1 %2) vals) )", "user": "53f35c34e4b0742d9025b0f4"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "53e67e69e4b036ad0777e473"}, {"problem": 38, "code": "#(first (sort > %&))", "user": "53cfa79ce4b00fb29b2212ff"}, {"problem": 38, "code": "(fn [& s] (reduce #(if (> %2 %) %2 %) s))", "user": "4f392fc8e4b0e243712b1ee7"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "53f67bcfe4b0db01ade6f9e1"}, {"problem": 38, "code": "(fn [& all] (reduce #(if (> %1 %2) %1 %2) all))", "user": "53f73cece4b0de5c4184855b"}, {"problem": 38, "code": "(fn [& args] \n  (reduce (fn [a b] (if (> a b) a b\n                    )\n            \n          ) args)\n \n)", "user": "53f12b77e4b0742d9025b0da"}, {"problem": 38, "code": "(fn [& x] \n  (reduce \n   (fn [a b] \n     (if (> a b) a b)\n   )\n   x\n  )\n )", "user": "53f6d555e4b0db01ade6f9e5"}, {"problem": 38, "code": "( fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs) )", "user": "53f74528e4b0de5c4184855c"}, {"problem": 38, "code": "(fn [& args] (loop [[head & tail] args\n        acc 0]\n   (if (nil? head)\n     acc\n     (recur tail (if (> head acc) head acc))\n   )\n )\n)", "user": "53f7820be4b0de5c41848560"}, {"problem": 38, "code": "(fn [& args] \n  (reduce (fn [highest item]\n            (if (> item highest) item highest)) 0  args))", "user": "53214efbe4b09d4e7a9b54b2"}, {"problem": 38, "code": "(fn [& l] (last (sort l)))", "user": "53f5f740e4b0db01ade6f9d8"}, {"problem": 38, "code": "(fn [x & args] (loop [mmax x v args]\n                  (if (empty? v) \n                    mmax\n                    (recur (if (> mmax (first v)) mmax (first v)) (rest v))\n                  )))", "user": "53f6566ee4b0db01ade6f9de"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "user": "53ef7f77e4b0742d9025b0ce"}, {"problem": 38, "code": "(fn [& args](reduce (fn [x y] (if (> x y) x y)) args))", "user": "53f6bfd9e4b0db01ade6f9e4"}, {"problem": 38, "code": "#(reduce (fn [x m] (if (> x m) x m)) %&)", "user": "53e9dce1e4b036ad0777e4bc"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [a, b]\n            (if (<= a b) b a)) args))", "user": "53bd7080e4b0d9a98559a6d1"}, {"problem": 38, "code": "(fn [f & more]\n  (reduce (fn [x y]\n            (if (> x y)\n              (identity x)\n              (identity y)))\n          (conj more f)))", "user": "535134bbe4b084c2834f4ae2"}, {"problem": 38, "code": "(fn [& list] (reduce (fn [x y] (if (> x y) x y)) list))", "user": "53c99f60e4b00fb29b2212c1"}, {"problem": 38, "code": "(fn [& args] \n  (reduce (fn [result number]\n            (if (> result number)\n              result\n              number))\n          args))", "user": "5335c083e4b0e30313ee6c6e"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if (< %1 %2) %2 %1) 0 rest))", "user": "53607c32e4b0243289761e37"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "user": "53fa3524e4b0de5c41848578"}, {"problem": 38, "code": "(fn max-val [& xs]\n  (loop [x (first xs) others (next xs)]\n    (if-not others\n      x\n      (if (> (first others) x)\n        (recur (first others) (next others))\n        (recur x (next others))))))", "user": "53f77b6ae4b0de5c4184855f"}, {"problem": 38, "code": "(fn mymax\n  ([x y]\n     (if (> x y) x y))\n  ([x y & more]\n     (reduce mymax (mymax x y) more)))", "user": "53f75957e4b0de5c4184855d"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) (first xs) xs))", "user": "53ce0a29e4b00fb29b2212eb"}, {"problem": 38, "code": "(fn f [hd & tl]\n  (if (empty? tl)\n    hd\n    (let [tl-max (apply f tl)]\n      (if (> hd tl-max)\n        hd\n        tl-max))))", "user": "53fb5256e4b0de5c4184857f"}, {"problem": 38, "code": "(fn [& lst] (last (sort lst)))", "user": "509b1204e4b0412cdea6eb1d"}, {"problem": 38, "code": "(fn [& xs] (first (reverse (sort xs))))", "user": "53d86564e4b0e771c302546b"}, {"problem": 38, "code": "#(last (sort %&))", "user": "53fc4abae4b0de5c4184859b"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) (vec x)))", "user": "53fc8424e4b0de5c418485b3"}, {"problem": 38, "code": "(fn [x & args]\n  (reduce (fn [a b]\n            (if (< a b)\n              b\n              a))\n            x args))", "user": "53e40b17e4b036ad0777e40c"}, {"problem": 38, "code": "(fn [ & xs ]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "user": "525b4e8de4b0cb4875a45d0f"}, {"problem": 38, "code": "(fn greatest-val [& args] \n  (reduce\n    #(if (> %1 %2) %1 %2)\n   args\n   )\n  )", "user": "53fcba1fe4b0de5c418485d5"}, {"problem": 38, "code": "(fn [& args]\n  (let [f (fn [a b] (if (> a b) a b))]\n    (reduce f (first args) (rest args))))", "user": "53fd0a22e4b0de5c418485e1"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (< %1 %2) %2 %1) xs))", "user": "52bc0dade4b07a9af57922f1"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [a b]\n            (if (> a b)\n              a\n              b))\n          args))", "user": "53fc5ec2e4b0de5c4184859e"}, {"problem": 38, "code": "(fn [k & seq]\n  (reduce (fn [x y] (if (> x y) x y)) k seq))", "user": "535f0cbde4b04ce2eb3ed2d9"}, {"problem": 38, "code": "(fn [& x]\n  (reduce (fn [a b] (if (< a b) b a)) x))", "user": "53fbb39de4b0de5c41848584"}, {"problem": 38, "code": "#(last (sort %&))", "user": "52d2cb0fe4b099d49816f0b5"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "4dadb5f4c9a9d6ed3399dc57"}, {"problem": 38, "code": "(fn my-max [& body]\n  (loop [number-list body\n         max-number (first number-list)]\n    (if (empty? number-list)\n      max-number\n      (recur (rest number-list)\n             (if (> (first number-list) max-number)\n               (first number-list)\n               max-number)))))", "user": "5331205fe4b019098a6f8b64"}, {"problem": 38, "code": "(fn my-max\n    [& coll]\n    (if (empty? (rest coll))\n      (first coll)\n      (let [n1 (first coll)\n            n2 (first (rest coll))\n            best (if (> n1 n2) n1 n2)]\n        (recur (cons best (rest (rest coll)))))))", "user": "51803613e4b04f45bde7d8fd"}, {"problem": 38, "code": "(fn [& nums] (reduce #(if (> %1 %2) %1 %2) nums))", "user": "514767ace4b0541f4bec05cb"}, {"problem": 38, "code": "(fn [x & r] (reduce #(if (> %1 %2) %1 %2) x r))", "user": "53fe1c3be4b0de5c418485f2"}, {"problem": 38, "code": "(fn [& nums]\n  (last (sort (into [] nums))))", "user": "53fdbe0fe4b0de5c418485e9"}, {"problem": 38, "code": "(fn [& x] (reduce (fn [z y] (if (< z y) y z )) x))", "user": "53fdc4b8e4b0de5c418485ea"}, {"problem": 38, "code": "#(last (sort %&))", "user": "53fddd71e4b0de5c418485eb"}, {"problem": 38, "code": "(fn mx [a & [b & t :as x]] \n  (cond\n   (nil? b) a\n   (< a b) (apply mx x)\n   :else (apply mx a t)))\n\n\n\n\n\n\n\n#_\n(fn mx [h & t] (if t \n                  (if (> (first t) h) (apply mx t) \n                    (apply mx h (rest t)))\n                 h))", "user": "53f3a4ace4b0742d9025b0f7"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [x y] (if (> x y) x y)) args))", "user": "53fe1b42e4b0de5c418485f1"}, {"problem": 38, "code": "(fn [& items]\n  (reduce (fn [max-value item]\n            (if (> item max-value) item max-value)\n           ) 0 items))", "user": "53ff602fe4b0de5c418485ff"}, {"problem": 38, "code": "(fn [& v] (reduce #(if (> %1 %2) %1 %2) v))", "user": "53e1e1f1e4b0d874e779ae5e"}, {"problem": 38, "code": "(fn [f & r]\n  (reduce #(if (< %1 %2) %2 %1) f r))", "user": "53fc88e7e4b0de5c418485be"}, {"problem": 38, "code": "(fn [& more] (first (reverse (sort more))))", "user": "53fd032be4b0de5c418485e0"}, {"problem": 38, "code": "(fn [& s] (reduce (fn [cur i] (if (> i cur) i cur)) s))", "user": "54008b88e4b0de5c4184860d"}, {"problem": 38, "code": "(fn findmax\n   [& args]\n   (reduce (fn larger [num1 num2] (if (> num1 num2) num1 num2)) args)\n   )", "user": "53fe459ae4b0de5c418485f4"}, {"problem": 38, "code": "(fn [& args] (first (sort-by - args)))", "user": "53fcdd1ae4b0de5c418485dd"}, {"problem": 38, "code": "#(reduce (fn [x y] (if (> x y) x y)) %&)", "user": "5400fc30e4b0de5c4184861b"}, {"problem": 38, "code": "(fn [& args] (loop [lst (seq args) mx (first lst) x (first lst)] \n   (if (empty? lst) \n     mx \n     (if (> x mx)\n       (recur (rest lst) x (first lst))\n       (recur (rest lst) mx (first lst))))))", "user": "53f14389e4b0742d9025b0db"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [x y]\n            (if (> x y) x y))\n          args))", "user": "53e543efe4b036ad0777e457"}, {"problem": 38, "code": "(fn\n  [head & tail]\n  (loop [[current & remaining] tail\n        result head]\n  \t\t(if (nil? current)\n          result\n          (recur remaining (if (> current result) current result))\n         )\n    )\n )", "user": "54021f13e4b0df28a13c62cc"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (> % %2) % %2) x xs))", "user": "524b827ce4b09eba1c0223d7"}, {"problem": 38, "code": "(fn [& lst] (reduce #(if (> %1 %2) %1 %2) lst))", "user": "524bc937e4b09eba1c0223ee"}, {"problem": 38, "code": "(fn \n  [& xs]\n  (reduce #(if (< %1 %2) %2 %1) xs))", "user": "5401aefbe4b0df28a13c62c7"}, {"problem": 38, "code": "(fn [& x] (loop [params (next x), best (first x)] (if (empty? params) best (recur (next params) (let [y (first params)] (if (> y best) y best))))))", "user": "53fb4843e4b0de5c4184857d"}, {"problem": 38, "code": "(fn [& all] (reduce #(if (> %1 %2) %1 %2) all))", "user": "540470dae4b0addc1aec6658"}, {"problem": 38, "code": "(fn [& xs] (last(sort xs)))", "user": "53a442a6e4b0b62ce300572d"}, {"problem": 38, "code": "(fn [& numbers] (last (sort numbers)))", "user": "54047608e4b0addc1aec6659"}, {"problem": 38, "code": "(fn [& xs]\n  (loop [xs xs\n         acc 0]\n    (if (empty? xs)\n      acc\n      (if (> (first xs) acc)\n        (recur (rest xs) (first xs))\n        (recur (rest xs) acc)))))", "user": "53f5666ee4b0db01ade6f9cf"}, {"problem": 38, "code": "(fn max2\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n   (reduce max2 (max2 x y) more)))", "user": "4f963487e4b0dcca54ed6cd9"}, {"problem": 38, "code": "(fn [& x]\n  (reduce (fn [x, y]\n            (if (> x y)\n              x\n              y)) x))", "user": "54051338e4b0addc1aec6662"}, {"problem": 38, "code": "(comp first reverse sort list)", "user": "53fc713be4b0de5c418485a0"}, {"problem": 38, "code": "(fn [& params]\n\t(reduce #(if (> %1 %2) %1 %2) params))", "user": "54042a19e4b0df28a13c62e4"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [mx i]\n            (if (> i mx) i mx)) args))", "user": "5251b11be4b0541d1855b87b"}, {"problem": 38, "code": "(fn [& coll]\n  (reduce #(if (> %1 %2) %1 %2) (first coll) (next coll)))", "user": "5405ae2be4b0addc1aec6671"}, {"problem": 38, "code": "(fn [x & qs] \n  (\n   (fn mx [y z] (if (= y (empty y)) z (if (> (first y) z) (mx (rest y) (first y)) (mx (rest y) z)))\n     ) (apply list qs) x\n   )\n  )", "user": "540479e7e4b0addc1aec665a"}, {"problem": 38, "code": "#(last(sort (vec %&)))", "user": "5306bceee4b02e821686979b"}, {"problem": 38, "code": "#(last (sort (seq %&)))", "user": "53fc4561e4b0de5c4184859a"}, {"problem": 38, "code": "(fn [& nums]\n  (loop [nums nums\n         maxval 0]\n    (if (empty? nums)\n      maxval\n      (recur (rest nums)\n             (let [f (first nums)]\n               (if (> f maxval)\n                 f\n                 maxval))))))", "user": "54084784e4b0addc1aec66c9"}, {"problem": 38, "code": "#(last (sort (into [] %&)))", "user": "5373451fe4b06d7f452d9e0b"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "53ed03f0e4b0d648e757f4bb"}, {"problem": 38, "code": "(fn my-max\n      [& numbers] (last (sort numbers)))", "user": "540271aee4b0df28a13c62d0"}, {"problem": 38, "code": "#(reduce (fn [x y] (if (> x y) x y)) %&)", "user": "53b9bb15e4b047364c0444ed"}, {"problem": 38, "code": "(comp last sort list)", "user": "54094824e4b0addc1aec66da"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "53c5976be4b00fb29b221290"}, {"problem": 38, "code": "#(last(sort%&))", "user": "53c3014ce4b00fb29b221277"}, {"problem": 38, "code": "(fn mymax [& xs]\n  (reduce #(if (< % %2) %2 %) xs))", "user": "53e8c684e4b036ad0777e48b"}, {"problem": 38, "code": "(fn greatest ([x] x)\n   ([x y] (if (> x y) x y))\n   ([x y & more]\n    (reduce greatest (greatest x y) more)))", "user": "5409db0de4b0addc1aec66e2"}, {"problem": 38, "code": "(fn\n  [& args]\n  (- (apply min (map - args))))", "user": "540b2dcbe4b0addc1aec66f4"}, {"problem": 38, "code": "(fn [& vals]\n  (first (sort > vals)))", "user": "53de7484e4b0d874e779ae35"}, {"problem": 38, "code": "#(unchecked-negate-int (apply min (map unchecked-negate-int %&)))", "user": "53fcb8f7e4b0de5c418485d4"}, {"problem": 38, "code": "(fn [& a] (last (sort a)))", "user": "54023bbfe4b0df28a13c62cd"}, {"problem": 38, "code": "(fn maximum\n  [& args]\n  (loop \n    [x args max-val 0]\n    (if (empty? x)\n      max-val\n      (recur (rest x) (if (> max-val (first x)) max-val (first x))))))", "user": "54091b82e4b0addc1aec66d5"}, {"problem": 38, "code": "(fn [& o] \n  (reduce #(if (> %1 %2) %1 %2) o))", "user": "515d414be4b00901442db1db"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [mx current]\n            (if (> current mx)\n              current\n              mx))\n            (first args) (rest args)))", "user": "540d5085e4b0addc1aec670e"}, {"problem": 38, "code": "(fn [& args] (->> args (sort) (last)))", "user": "540d7dd1e4b0addc1aec6713"}, {"problem": 38, "code": "#(reduce\n (fn [a b]\n   (if (> a b)\n     a\n     b)) %&)", "user": "540c54a7e4b0addc1aec6700"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "53844970e4b06839e8705eef"}, {"problem": 38, "code": "(fn [& l]\n  (loop [xs (rest l) largest (first l)]\n    (if (empty? xs) largest\n      (recur (rest xs) (if (> (first xs) largest) (first xs) largest)\n      ))))", "user": "5409f8eae4b0addc1aec66e6"}, {"problem": 38, "code": "(fn [& args] (last (sort-by + args)))", "user": "540b4c4de4b0addc1aec66f6"}, {"problem": 38, "code": "(fn [& args] \n   (let [x (first args)] \n     (reduce #(if(> %1 %2) %1 %2) x args)\n     )\n   )", "user": "540d72f3e4b0addc1aec6712"}, {"problem": 38, "code": "(fn [& args]\n  (loop [coll args\n         m 0]\n    (if (= 0 (count coll))\n      m\n      (recur (rest coll)\n             (let [elem (first coll)]\n               (if (> elem m)\n                 elem\n                 m))))))", "user": "540e97f9e4b0addc1aec671f"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [m, x] (if (< m x) x m)) xs))", "user": "5409a12fe4b0addc1aec66df"}, {"problem": 38, "code": "(fn max2 [frst & more]\n  (loop [coll more acc frst]\n    (if (empty? coll)\n      acc\n      (recur (rest coll)\n             (if (> (first coll) acc)\n               (first coll)\n               acc\n               )\n             )\n      )\n    )\n\n  )", "user": "53f2370ee4b0742d9025b0e7"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> y x) y x)) args))", "user": "540e17c3e4b0addc1aec6719"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "540f2c48e4b0addc1aec6727"}, {"problem": 38, "code": "(fn maxim ([x y] (if (> x y) x y)) ([x y & rest] (maxim x (apply maxim (conj rest y )))))", "user": "540904a7e4b0addc1aec66d2"}, {"problem": 38, "code": "(fn [& elems] (apply (comp first reverse sort) (list elems)))", "user": "53e92f82e4b036ad0777e49d"}, {"problem": 38, "code": "(fn mx [& is]\n  (reduce\n    #(if (> % %2)\n       %\n       %2)\n   is))", "user": "540e0637e4b0addc1aec6717"}, {"problem": 38, "code": "(fn [& n]\n  (reduce (fn [x y] (if (> x y) x y)) n))", "user": "540d0087e4b0addc1aec670b"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [f s] (if (> s f) s f)) args))", "user": "52fd3da0e4b047fd5583702a"}, {"problem": 38, "code": "(fn[& l] (reduce (fn [a b] (if (> a b) a b)) l))", "user": "53e76728e4b036ad0777e47c"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "536e5b68e4b0fc7073fd6e6d"}, {"problem": 38, "code": "(fn [& args]\n    (loop [highest (first args)\n                    remaining (rest args)]\n          (if (empty? remaining)\n                  highest\n                  (recur (if (> highest (first remaining))\n                                          highest\n                                          (first remaining)) \n                         (rest remaining)))))", "user": "53c69ebce4b00fb29b22129c"}, {"problem": 38, "code": "(fn [& l]\n     (first (sort #(> %1 %2) l)))", "user": "540efe2ee4b0addc1aec6724"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (< %1 %2) %2 %1) a))", "user": "54126d0ce4b01498b1a719d5"}, {"problem": 38, "code": "(fn [& args] (-> args sort last))", "user": "53e0001be4b0d874e779ae48"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) -100 args))", "user": "53ff8c31e4b0de5c41848603"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "user": "52541fe6e4b0541d1855b964"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce (fn [acc v]\n            (if (> acc v) acc v)) \n          (first xs) xs))", "user": "54133900e4b01498b1a719de"}, {"problem": 38, "code": "(fn [& args]\n  (reduce\n   #(if (< %1 %2) %2 %1) args))", "user": "541475afe4b01498b1a719eb"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1\n              %2) args))", "user": "531571ece4b08068f379ed27"}, {"problem": 38, "code": "(comp last sort vector)", "user": "54157dace4b01498b1a719f4"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "52814e97e4b0757a1b171428"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "5416282ee4b01498b1a719fa"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "53f4ad9de4b0db01ade6f9c4"}, {"problem": 38, "code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) more))", "user": "541096bde4b01498b1a719b2"}, {"problem": 38, "code": "#(last(sort %&))", "user": "4db396c7535df7e46ed9b6cf"}, {"problem": 38, "code": "(fn [q & r] \n  (let [m (atom q)] \n    (doseq [e r] \n      (if (< @m e) \n        (reset! m e))) \n    @m))", "user": "54139cd4e4b01498b1a719e3"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "54125eeee4b01498b1a719d3"}, {"problem": 38, "code": "(fn max-p\n  [& seqz]\n  (reduce \n   (fn max-h [a b]\n     (if (> a b) a b))\n   \t\tseqz))", "user": "5414b7c4e4b01498b1a719ed"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce #(if (< % %2) %2 %) nums))", "user": "540ff039e4b01498b1a7199b"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (< %1  %2) %2 %1) x xs))", "user": "5417385fe4b01498b1a71a08"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "5412646de4b01498b1a719d4"}, {"problem": 38, "code": "(fn [& s] (last (sort s)))", "user": "540f09b9e4b0addc1aec6725"}, {"problem": 38, "code": "(fn [& li] (reduce #(if (< %1 %2) %2 %1) li))", "user": "54186e68e4b01498b1a71a1a"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "541619e8e4b01498b1a719f9"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce #(if (> %1 %2) %1 %2) nums))", "user": "5412d5d2e4b01498b1a719d9"}, {"problem": 38, "code": "#(last (sort %&))", "user": "53eaa804e4b036ad0777e4ea"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "54180369e4b01498b1a71a13"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if (>%1 %2) %1 %2)  rest))", "user": "4ef7f938535dced4c769f25a"}, {"problem": 38, "code": "(fn [& coll] (first (reverse (sort coll))))", "user": "54165291e4b01498b1a719fb"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if (>= %1 %2) %1 %2) rest))", "user": "541404c2e4b01498b1a719e7"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (>= % %2) % %2) 0 xs ))", "user": "54187e84e4b01498b1a71a1b"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if (> %2 %1) %2 %1) 0 rest))", "user": "541074f1e4b01498b1a719ac"}, {"problem": 38, "code": "(fn [& args] \n  (reduce (fn [a b] (if (> a b) a b)) args))", "user": "541b1f25e4b01498b1a71a63"}, {"problem": 38, "code": "(fn[& xs] (first(reverse(apply sorted-set xs))))", "user": "53a899e0e4b047364c04442b"}, {"problem": 38, "code": "(comp last sort vector)", "user": "541b37d2e4b01498b1a71a64"}, {"problem": 38, "code": "(fn [& s] (reduce (fn [z v] (if (> z v) z v))\n                  0 s))", "user": "51c1b644e4b0d204dbe2ca12"}, {"problem": 38, "code": "(fn max-value [& args]\n  (reduce (fn [acc v]\n            (if (> v acc)\n              v\n              acc))\n          (first args)\n          args))", "user": "53fd66a4e4b0de5c418485e3"}, {"problem": 38, "code": "(fn [f & col] (reduce (fn [a,b] (if (> b a) b a)) f col))", "user": "53f9fe41e4b0de5c41848575"}, {"problem": 38, "code": "(fn [& x ] (last (into (empty(sorted-set #{1})) x)))", "user": "54185dc3e4b01498b1a71a19"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce (fn [x y] \n            (if (> x y) x y)) xs))", "user": "505d1b01e4b0e6aca564be04"}, {"problem": 38, "code": "(fn [& a](last (sort a)))", "user": "5416aacce4b01498b1a719ff"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [mx el] (if (> el mx) el mx)) args))", "user": "541c516ae4b01498b1a71a73"}, {"problem": 38, "code": "(fn [& args] (first (sort > args)))", "user": "541c1e46e4b01498b1a71a70"}, {"problem": 38, "code": "(fn [& more] (reduce (fn [x y] (if (< x y) y x)) more))", "user": "54149f2fe4b01498b1a719ec"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (> %2 %1) %2 %1) x xs))", "user": "5412ef7ee4b01498b1a719da"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [x y]\n            (if (> x y)\n              x\n              y)) args))", "user": "540961e9e4b0addc1aec66db"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5282f54be4b0239c8a67ada0"}, {"problem": 38, "code": "(fn [& args]\n                (letfn [(helper [m coll]\n                          (if (not (empty? coll)) \n                            (if (> (first coll) m)\n                              (helper (first coll) (rest coll))\n                              (helper m (rest coll)))\n                            m))]\n                  (helper 0 args)))", "user": "541ae7dbe4b01498b1a71a61"}, {"problem": 38, "code": "(fn [& nums] (last (sort nums)))", "user": "540c288ae4b0addc1aec66ff"}, {"problem": 38, "code": "(fn [& xs]\n\t(reduce (fn [a b] \n        (if (< a b)\n        \tb\n        \ta\n        )\n\t) xs)\n)", "user": "52edc72de4b05e3f0be25ebb"}, {"problem": 38, "code": "(fn [& args] (if (> (first args) (second args)) (first args) (second args)))", "user": "511036c5e4b04c71fce993ee"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "user": "541f6bc0e4b01498b1a71a98"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "541f5b37e4b01498b1a71a97"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [x y] (if (> x y) x y)) args))", "user": "51b9f5a6e4b0e871ca49590e"}, {"problem": 38, "code": "(fn [& a]\n  (reduce #(if (> % %2) % %2) a))", "user": "54084089e4b0addc1aec66c7"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "54213a8fe4b01498b1a71aaf"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5420b93ce4b01498b1a71aa9"}, {"problem": 38, "code": "(fn mm \n     ([arg] arg)\n     ([arg & rargs]\n       (loop [max_arg arg next_arg (first rargs) moreargs (rest rargs)]\n         (cond \n           (nil? next_arg) max_arg\n           (> max_arg next_arg) (recur max_arg (first moreargs) (rest moreargs))\n           :else (recur next_arg (first moreargs) (rest moreargs))\n          )\n         )))", "user": "53c67bd3e4b00fb29b22129a"}, {"problem": 38, "code": "(fn [& numbers]\n  (last (sort numbers)))", "user": "541ad1c1e4b01498b1a71a5c"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "user": "541168dee4b01498b1a719c3"}, {"problem": 38, "code": "(fn maximum \n  ([] nil)\n  ([x] x)\n  ([x y] (if (> x y) x y) )\n  ([x y & xs]\n   (apply maximum (cons (maximum x y) xs))\n  )\n)", "user": "516ee939e4b06aac486e5b34"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "5421cd6be4b01498b1a71ab7"}, {"problem": 38, "code": "(fn my-max\n    ([x] x)\n    ([x y] (if (> x y) x y))\n    ([x y & more] (reduce my-max (my-max x y) more)))", "user": "52b2f9cae4b0c58976d9acfb"}, {"problem": 38, "code": "(fn [& [x & xs]]\n  (reduce #(if (> %1 %2) \n             %1 \n             %2) x xs))", "user": "5415d115e4b01498b1a719f7"}, {"problem": 38, "code": "(fn [x & xs]\n         (cond (empty? xs) x\n               (> (first xs) x) (recur (first xs) (rest xs))\n               :else (recur x (rest xs)))) \n8", "user": "541ae3bde4b01498b1a71a60"}, {"problem": 38, "code": "(fn foo [x & xs] (last (sort (conj xs x))))", "user": "54246d6de4b01498b1a71aec"}, {"problem": 38, "code": "(fn [& ns]\n  (last (sort ns)))", "user": "5424c523e4b01498b1a71b03"}, {"problem": 38, "code": "(fn [& numz]\n  (reduce #(if (> %1 %2)\n             %1\n             %2) numz))", "user": "54246fcce4b01498b1a71aed"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5370d152e4b0fc7073fd6e9d"}, {"problem": 38, "code": "(fn [& args] \n  (reduce #(if (< %1 %2) %2 %1) args))", "user": "52fbc44be4b047fd55837010"}, {"problem": 38, "code": "(fn [& args] (first (reverse (sort args))))", "user": "53e1040be4b0d874e779ae4e"}, {"problem": 38, "code": "(fn find-max [firstElem & theRest] \n  (loop [currentMax firstElem\n         todo theRest]\n    (let [toCheck? (first todo)]\n      (if (= toCheck? nil)\n        currentMax\n        \n        (recur (if (> toCheck? currentMax)\n                 toCheck?\n                 currentMax)\n               (rest todo))))))", "user": "5425d00ee4b01498b1a71b12"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "user": "5426a59ee4b01498b1a71b1b"}, {"problem": 38, "code": "(fn [& coll] (reduce #(if (< %1 %2) %2 %1) coll))", "user": "542769f8e4b01498b1a71b24"}, {"problem": 38, "code": "#(->> (sort %&) last)", "user": "54227fc6e4b01498b1a71ac0"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [a b]\n            (if (> a b)\n              a\n              b)) args))", "user": "54159032e4b01498b1a719f5"}, {"problem": 38, "code": "(fn  [& n]                                                                                     \n        (first (sort > n)))", "user": "5423dc6ae4b01498b1a71ad5"}, {"problem": 38, "code": "(fn [& x] (last(sort x)))", "user": "5422e975e4b01498b1a71ac9"}, {"problem": 38, "code": "(fn [ & xs] (reduce (fn [x y] (if (> x y) x y)) xs))", "user": "53d6bc2fe4b0e771c302545a"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) 0 args))", "user": "54299d4be4b01498b1a71b3d"}, {"problem": 38, "code": "(fn [& lst] \n  (reduce \n   (fn [a b] \n     (if (> a b) a b)) \n   lst))", "user": "54194782e4b01498b1a71a29"}, {"problem": 38, "code": "(fn [arg & args]\n\t(if (= (count args) 0)\n\t\targ\n\t\t(if (> arg (first args))\n\t\t\t(recur arg (rest args))\n\t\t\t(recur (first args) (rest args)))))", "user": "54296802e4b01498b1a71b38"}, {"problem": 38, "code": "(fn mx [& values] (reduce (fn [c i] (if (> c i) c i)) 0 values) )", "user": "54257124e4b01498b1a71b09"}, {"problem": 38, "code": "(fn m \n  [ & body]\n  (last (sort body)))", "user": "54258a7fe4b01498b1a71b0c"}, {"problem": 38, "code": "#(reduce (fn [x y] (if (> x y) x y)) %&)", "user": "520fca70e4b080a8d9b9d631"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "51ca5378e4b08b1cbd0d9480"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "5425d454e4b01498b1a71b13"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "542c858ae4b0dad94371f2a8"}, {"problem": 38, "code": "(fn [& args] (first(reverse(sort args))))", "user": "542baf7ce4b0dad94371f291"}, {"problem": 38, "code": "(fn mymax [& args]\n   (reduce (fn [acc x] (if (> x acc) x acc)) (first args) args)\n   )", "user": "5429986ce4b01498b1a71b3b"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "542d2385e4b0dad94371f2b2"}, {"problem": 38, "code": "(fn [x & y]\n  (reduce #(if (< %1 %2) %2 %1) x y))", "user": "541735b3e4b01498b1a71a07"}, {"problem": 38, "code": "(fn [& args]\n  (loop [params (next args)\n         mv (first args)]\n    (if (nil? params)\n      mv\n      (recur (next params) (if (> (first params) mv)\n                             (first params)\n                             mv)))))", "user": "542c22bde4b0dad94371f29e"}, {"problem": 38, "code": "(fn get-max [& args]\n  (reduce (fn [x y] (if (> x y) x y)) args))", "user": "542c026ae4b0dad94371f29a"}, {"problem": 38, "code": "(fn [& s]\n   (letfn [(tempt\n            [f r myval]\n            (if (nil? f)\n              myval\n              (recur (first r) (rest r) (if (> f myval) f myval))))]\n     (tempt (first s) (rest s) 0)\n     ))", "user": "541ddadbe4b01498b1a71a84"}, {"problem": 38, "code": "#(last (sort %&))", "user": "53a01fb1e4b0ca733b9744a6"}, {"problem": 38, "code": "(fn [& x] (-> x sort last))", "user": "542edb4ae4b0dad94371f2c8"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "540e8d13e4b0addc1aec671e"}, {"problem": 38, "code": "#(reduce (fn [x y] (if (< x y) y x)) %&)", "user": "542f574be4b0dad94371f2d0"}, {"problem": 38, "code": "(fn this \n  ([] 0)\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] (apply this (this x y) more)))", "user": "542da97ae4b0dad94371f2ba"}, {"problem": 38, "code": "(fn [f & r] (reduce #(if(> %2 %) %2 %) f r))", "user": "53f78944e4b0de5c41848561"}, {"problem": 38, "code": "(fn [& args] \n  (reduce #(if (< %1 %2) %2 %1) args))", "user": "54302691e4b0dad94371f2d7"}, {"problem": 38, "code": "(fn [& args](reduce #(if (> %1 %2) %1 %2) args))", "user": "53765e1ae4b06839e8705e23"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce (fn [a b]\n            (if (> a b)\n              a\n              b)) xs ))", "user": "54312081e4b0dad94371f2e3"}, {"problem": 38, "code": "(fn [& r]\r\n   (loop [s r\r\n          ret (first s)]\r\n     (if s\r\n       (recur (next s) (if (< ret (first s)) (first s) ret))\r\n       ret)))", "user": "542b764ae4b0dad94371f28d"}, {"problem": 38, "code": "(fn [& rest] (last (sort rest)))", "user": "542c2de0e4b0dad94371f29f"}, {"problem": 38, "code": "(fn [& params]\n  (reduce #(if (> %1 %2) %1 %2) params))", "user": "540c6a8ae4b0addc1aec6702"}, {"problem": 38, "code": "(fn [& seq]\n  (reduce (fn [x y] (if (> x y) x y))\n            seq))", "user": "543168f5e4b0dad94371f2e6"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args ))", "user": "53e70b3fe4b036ad0777e476"}, {"problem": 38, "code": "(comp last sort list)", "user": "541e6d40e4b01498b1a71a8c"}, {"problem": 38, "code": "(fn _\n    ([x] x)\n    ([x y] (if (> x y) x y))\n    ([x y & xs]\n       (reduce _ (_ x y) xs)\n       )\n    )", "user": "5433a07be4b0b6b47310fce0"}, {"problem": 38, "code": "(fn [& args] (first (reverse (sort args))))", "user": "5433e45ee4b0b6b47310fce5"}, {"problem": 38, "code": "(fn maximum [& xs]\n  (loop [x (first xs)\n    \tlst xs]\n    (if (= (count lst) 1)\n      x\n      (if (> (second lst) x)\n        (recur (second lst) (rest lst))\n        (recur x (rest lst)))\n      )\n    )\n  )", "user": "53b685e0e4b047364c0444c7"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "542ce413e4b0dad94371f2ae"}, {"problem": 38, "code": "(fn [& x] \n  (loop [remainder (rest x)\n         bestSoFar (first x)]\n    (if (= remainder [])\n      bestSoFar\n      (if (> (first remainder) bestSoFar)\n        (recur (rest remainder) (first remainder))\n        (recur (rest remainder) bestSoFar)))))", "user": "54336443e4b0b6b47310fcde"}, {"problem": 38, "code": "(fn max-lol\n  ([a] a)\n  ([a b] (if (> a b) (max-lol a) (max-lol b)))\n  ([a b & more] (apply max-lol (max-lol a b) more)))", "user": "54344721e4b0b6b47310fcea"}, {"problem": 38, "code": "(fn [& coll]\n  (loop [c coll m (first coll)]\n    (if (not (empty? c))\n      (recur\n        (rest c)\n        (if (> (first c) m)\n          (first c)\n          m))\n      m)))", "user": "5433eecae4b0b6b47310fce6"}, {"problem": 38, "code": "(fn [& nums]\n  (let [maxx #(if (> %1 %2) %1 %2)]\n    (reduce #(maxx %1 %2) nums)))", "user": "542db41be4b0dad94371f2bb"}, {"problem": 38, "code": "(fn [& stuff] \n  (reduce #(if (< %1 %2) %2 %1) 0 stuff))", "user": "54196d63e4b01498b1a71a34"}, {"problem": 38, "code": "(fn [& a] (last (sort a)))", "user": "53e745a1e4b036ad0777e479"}, {"problem": 38, "code": "#(last (sort %&))", "user": "532a033be4b09d4e7a9b551f"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [m e] (if (< m e) e m)) args))", "user": "53c1b787e4b00fb29b221266"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5430a16de4b0dad94371f2da"}, {"problem": 38, "code": "(fn\n  [& args]\n  (last (sort args)))", "user": "53a511aae4b0b62ce3005735"}, {"problem": 38, "code": "#(last (sort %&))", "user": "54349368e4b0b6b47310fcf1"}, {"problem": 38, "code": "(fn [& args] \n   (last (apply sorted-set args)))", "user": "542c44f8e4b0dad94371f2a1"}, {"problem": 38, "code": "(fn myMax [& args] (reduce #(if (>= %1 %2) %1 %2) args))", "user": "542c1f73e4b0dad94371f29d"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [m n] (if (> m n) m n)) args))", "user": "53da3fcde4b0e771c3025497"}, {"problem": 38, "code": "(fn [& more] (last (sort more)))", "user": "5431cac6e4b0dad94371f2e8"}, {"problem": 38, "code": "(fn [& ll]\n  (loop [ll ll\n         maxn 0]\n    (if (= ll '())\n      maxn\n      (recur (rest ll) (if(> (first ll) maxn)\n                         (first ll)\n                         maxn)))))", "user": "54297741e4b01498b1a71b39"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "541709b0e4b01498b1a71a06"}, {"problem": 38, "code": "(fn my-max [& coll]\n  (reduce #(if (< %1 %2) %2 %1) coll))", "user": "542cb77ae4b0dad94371f2aa"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "54361d92e4b032a45b8692f7"}, {"problem": 38, "code": "(fn\n  [& args]\n  (reduce #(if (< %1 %2) %2 %1) args))", "user": "526c669be4b03e8d9a4a728f"}, {"problem": 38, "code": "(fn [& x] (reduce (fn [a b] (if (> a b) a b)) x))", "user": "51eda45ce4b0bb507043159b"}, {"problem": 38, "code": ";(fn [& args] (reduce #(if (> %1 %2) %1 %2) (first args) args))\n(fn [& args] (last (sort args)))", "user": "54397533e4b032a45b86931d"}, {"problem": 38, "code": "(fn [& v] (reduce #(if (> % %2) % %2) v)) ;quelques solutions utilisent (last (sort v))", "user": "54380631e4b032a45b86930f"}, {"problem": 38, "code": "(fn mymax [& coll]\n   (reduce (fn [m x] (if (> x m) x m)) (first coll) (rest coll)))", "user": "54393c3fe4b032a45b86931a"}, {"problem": 38, "code": "(fn [x & xs]\n   (reduce #(if (> %2 %1) %2 %1) x xs))", "user": "52561295e4b0541d1855ba03"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (> %1 %2) %1 %2) x xs))", "user": "54324be1e4b0dad94371f2ed"}, {"problem": 38, "code": "(fn [& coll] (first (sort > coll)))", "user": "543b5bc6e4b032a45b86932d"}, {"problem": 38, "code": "(fn this\n  ([x] x)\n  ([x y] (if (< x y) y x))\n  ([x y & more] (apply this (this x y) more)))", "user": "508e2584e4b0f17d83ea26c9"}, {"problem": 38, "code": "(fn [x & tail]\n  (if (empty? tail)\n    x\n    (let [y    (first tail)\n          tail (rest tail)]\n\t\t(if (> x y) (recur x tail) (recur y tail)))))", "user": "543ba31be4b032a45b869333"}, {"problem": 38, "code": "(fn [& args]\n  (reduce\n    (fn [x y]\n      (cond (> x y) x\n        :else y))\n    args))", "user": "542b0592e4b0dad94371f286"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "543c5200e4b032a45b86933e"}, {"problem": 38, "code": "(fn [& args] (-> args sort last))", "user": "543a68d3e4b032a45b869326"}, {"problem": 38, "code": "(fn [x & xs]\n  (last (sort (concat (list x) xs))))", "user": "543c39e0e4b032a45b86933d"}, {"problem": 38, "code": "(fn my-max [& numbers]\n  (reduce (fn [a b]\n            (if (> a b) a b))\n          numbers))", "user": "53f891eee4b0de5c4184856d"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "54377355e4b032a45b869305"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> y x) y x)) args))", "user": "53fcd574e4b0de5c418485d9"}, {"problem": 38, "code": "#(loop\n    [f (first %&)\n     r (rest %&)\n     mx 0]\n    (if (empty? r)\n      (if (< mx f) f mx)\n      (recur (first r) (rest r)\n             (if (< mx f) f mx))))", "user": "5432df22e4b0dad94371f2f5"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "543bce4fe4b032a45b869335"}, {"problem": 38, "code": "(fn [ & args] ((fn [vect] (reduce (fn [a b] (if (> a b) a b)) vect)) args))", "user": "53342a1ce4b019098a6f8b8b"}, {"problem": 38, "code": "(fn maks [& args]\n  (reduce (fn [x1 x2] (if (> x1 x2) x1 x2)) args))", "user": "543d5c61e4b032a45b86934d"}, {"problem": 38, "code": "(fn sum [& args] (nth (take 1 (reverse(sort args))) 0)  )", "user": "5437eca1e4b032a45b86930d"}, {"problem": 38, "code": "#(reduce (fn [p c] (if (> c p) c p)) %&)", "user": "543823f1e4b032a45b869311"}, {"problem": 38, "code": "(fn [& l]\n  (loop [result (first l) s l]\n    (println result s)\n    (if (first s)\n      (if (> result (first s))\n        (recur result (next s))\n        (recur (first s) (next s)))\n      result)))", "user": "539043e7e4b0b51d73faae97"}, {"problem": 38, "code": "(fn [& s] \n  (loop [s s m 0] \n    (if-not (empty? s) \n      (recur (rest s) (if (> (first s) m) (first s) m))\n      m)))", "user": "5385e633e4b06839e8705f08"}, {"problem": 38, "code": "(fn [& x] (reduce (fn [a b] (if (< a b) b a)) (vec x)))", "user": "52c52423e4b0c2d177d620ed"}, {"problem": 38, "code": "(fn [& nums] (reduce #(if (< %1 %2) %2 %1) nums))", "user": "543f854fe4b032a45b86935b"}, {"problem": 38, "code": "(fn\n  [& vals]\n  (reduce \n   (fn [a b] \n     (if (> a b)\n       a\n       b))\n   vals))", "user": "542d27a0e4b0dad94371f2b3"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "543d89dfe4b032a45b869350"}, {"problem": 38, "code": "(fn tesmp [& x]\n  (reduce (fn [a b] (if (> a b )\n                      a\n                      b\n                     )) x)\n  )", "user": "5372c830e4b06d7f452d9dff"}, {"problem": 38, "code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) 0 s))", "user": "543d07e8e4b032a45b869346"}, {"problem": 38, "code": "(fn [& myseq] \n  (loop [currentSeq (next myseq) mymax (first myseq)] \n    (if (nil? currentSeq) mymax\n      (recur (next currentSeq) \n        (if (< mymax (first currentSeq)) (first currentSeq) mymax)))))", "user": "5439c3cee4b032a45b869323"}, {"problem": 38, "code": "(fn mymax\n  [head & tail]\n  (reduce (fn max2\n            [t1 t2]\n            (if (pos? (- t1 t2)) t1 t2))\n          head tail)\n )", "user": "54410a71e4b032a45b869367"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "5410cb36e4b01498b1a719b8"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %2 %1) %2 %1) \n          (first xs) (next xs)))", "user": "4f1ef6a0535d64f60314649b"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "5315ba94e4b08068f379ed34"}, {"problem": 38, "code": "(fn mymax [& x] (if (= (count x) 1) (first x) (if (> (first x) (apply mymax (rest x))) (first x) (apply mymax (rest x)))))", "user": "544285dde4b032a45b869380"}, {"problem": 38, "code": "(fn [a & r] \n  (if (seq r)\n    (if (> a (first r)) \n      (recur a (rest r))\n      (recur (first r) (rest r)))\n    a))", "user": "543ed417e4b032a45b869358"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (< %1 %2) %2 %1) x))", "user": "541e2ff8e4b01498b1a71a8a"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce (fn [x acc] (if (> x acc) x acc)) xs))", "user": "54431b6ee4b032a45b869385"}, {"problem": 38, "code": "(fn [& xs] \n  (reduce (fn [a b] (if (> a b) a b)) xs))", "user": "53dfe311e4b0d874e779ae47"}, {"problem": 38, "code": "(fn nmax [x & more]\n  (let [xs (flatten more)]\n    (if (empty? xs) x \n      (if (> x (first xs)) \n        (nmax x (rest xs)) \n        (nmax (first xs)(rest xs))\n        )\n      )\n    )\n  )", "user": "54413696e4b032a45b86936b"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "53751c5ee4b06839e8705e11"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "5442dddae4b032a45b869383"}, {"problem": 38, "code": "(fn my-max\n  ([x] x)\n  ([x & ys] (let [y (apply my-max ys)]\n  \t(if (> x y) x y ))\n  )\n)", "user": "5443cb97e4b032a45b86938a"}, {"problem": 38, "code": "(fn max-val [& x]\n  (last (sort x))\n)", "user": "5443da75e4b032a45b86938d"}, {"problem": 38, "code": "(fn [& args] \n  (first (reverse (sort args))))", "user": "543f1765e4b032a45b86935a"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> % %2) % %2) 0 xs))", "user": "54448e84e4b032a45b869393"}, {"problem": 38, "code": "(fn [& l] \n  (reduce #(if (> %2 %1) %2 %1) l))", "user": "5392bfdee4b0b51d73faaeb2"}, {"problem": 38, "code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) coll))", "user": "50666699e4b03d366d7cb2b0"}, {"problem": 38, "code": "(fn mymax [& numbers]\n  (last (sort numbers)))", "user": "544257b4e4b032a45b869379"}, {"problem": 38, "code": "(fn mx [x & more] \n  (if more \n    (let [y (first more)] \n      (recur (if (> x y) x y) (next more))) \n    x))", "user": "542789efe4b01498b1a71b25"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5441f5e8e4b032a45b869375"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "51ff6379e4b0f1313d468a98"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "512655b7e4b05d10e3e39603"}, {"problem": 38, "code": "(fn highest [& all]\n  (if (= (count all) 1)\n    (first all)\n    (if (> (first all) (apply highest (rest all)))\n      (first all)\n      (apply highest (rest all))\n    )\n  )\n)", "user": "54468ebfe4b032a45b8693b1"}, {"problem": 38, "code": "(fn my-max\n\t([x]        x)\n\t([x & more] (if (> x (first more))\n\t\t      (apply my-max (cons x (rest more)))\n\t\t      (apply my-max (cons (first more) (rest more))))))", "user": "543be8f0e4b032a45b869337"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "540997ede4b0addc1aec66dd"}, {"problem": 38, "code": "(fn mm [a & b] (reduce #(if (> %1 %2) %1 %2) a b))", "user": "54464734e4b032a45b8693ab"}, {"problem": 38, "code": "(fn [& rest] (reduce (fn[x y] (if (> x y) x y)) rest))", "user": "54458995e4b032a45b86939e"}, {"problem": 38, "code": "(fn [& args]\n  (loop [m (first args) \n         s (next args)]\n    (if s\n      (recur\n       (if (> m (first s))\n         m (first s))\n       (next s))\n      m)))", "user": "5446c89ce4b032a45b8693b5"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "user": "530a6cbae4b02e82168697be"}, {"problem": 38, "code": "(fn [z & zs] (reduce (fn [x y] (if (> x y) x y)) z zs))", "user": "5447e08ce4b032a45b8693c3"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5267c74be4b03e8d9a4a7183"}, {"problem": 38, "code": "(fn [& s]\n  (reduce (fn [a b]\n            (if (> a b)\n              a\n              b))\n          s))", "user": "54487527e4b032a45b8693cc"}, {"problem": 38, "code": "(fn [& lista] (reduce (fn [x y] (if (> x y) x y)) lista))", "user": "5233564ae4b0f0b72fabf403"}, {"problem": 38, "code": "(fn [a & b]\n  (reduce #(if (> %1 %2) %1 %2) a b))", "user": "52a45a7be4b0c58976d9abd8"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "54461393e4b032a45b8693a5"}, {"problem": 38, "code": "(fn foo [& x] (reduce (fn [y z] (if (< y z) z y))  x))", "user": "54078851e4b0addc1aec66bd"}, {"problem": 38, "code": "(fn\n  [& args]\n  (let [blah (fn \n               [arr m] \n               (if (seq arr)\n                 (recur (rest arr) (if (> (first arr) m) (first arr) m ))\n                 m\n                 )\n               )]\n    (blah (rest args) (first args)))\n                 \n    \n    )", "user": "544a049de4b0e39780006953"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (> %1 %2) %1 %2) x xs))", "user": "5443a894e4b032a45b869388"}, {"problem": 38, "code": "(comp last sorted-set)", "user": "544ac9b5e4b0e39780006959"}, {"problem": 38, "code": "(fn my-max [& coll]\n  (last (sort coll)))", "user": "544b9df2e4b0e39780006968"}, {"problem": 38, "code": "(fn [& lst] \n    (reduce \n     (fn [mx nxt] \n       (if (> mx nxt) \n         mx \n         nxt)\n       )\n     lst\n     )\n  )", "user": "543b7456e4b032a45b86932f"}, {"problem": 38, "code": "(fn [& rs] (-> rs (sort) (reverse) (first)))", "user": "54468fd3e4b032a45b8693b2"}, {"problem": 38, "code": "(fn [& r] (reduce (fn [m x] (if (> x m) x m)) r))", "user": "5122925ae4b068a9582e656d"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "543115a0e4b0dad94371f2e1"}, {"problem": 38, "code": "(fn [& values] (last (sort values)))", "user": "5446ebc2e4b032a45b8693b8"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "544808e2e4b032a45b8693c5"}, {"problem": 38, "code": "(fn [ & more ] (reduce #(if (> %1 %2) %1 %2) 0 more))", "user": "544e8369e4b0e39780006987"}, {"problem": 38, "code": "(fn [& arr] (loop [m 0 [car & cdr] arr] (if (nil? car) m (recur (if (> car m) car m) cdr))))", "user": "53320dd1e4b019098a6f8b71"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "520cc6b6e4b0b022ef140c9c"}, {"problem": 38, "code": "(fn [& nums] (reduce (fn [a b] (if (> a b) a b)) nums))", "user": "52d7fff4e4b09f7907dd1383"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> % %2) % %2) x))", "user": "5450d992e4b0e397800069a5"}, {"problem": 38, "code": "(fn [& r] (reduce #(if (> %1 %2) %1 %2) (seq r)))", "user": "544fbabce4b0e39780006999"}, {"problem": 38, "code": "(fn pp [& args] (last (sort args)))", "user": "5451cb81e4b0e397800069b6"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "544b699ce4b0e39780006964"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if\n             (>= %1 %2)\n             %1\n             %2) args))", "user": "542d5fa9e4b0dad94371f2b5"}, {"problem": 38, "code": "(fn [& ls] (reduce (fn [a b] (if (> a b) a b)) ls))", "user": "542a7c9be4b01498b1a71b41"}, {"problem": 38, "code": "(fn [& args] (first (sort > args)))", "user": "543b9f8ce4b032a45b869332"}, {"problem": 38, "code": "(fn [& n]\n  (reduce \n   (fn [x y]\n     (if (> y x)\n       y\n       x))\n   (first n) (rest n)))", "user": "541df619e4b01498b1a71a87"}, {"problem": 38, "code": "(fn [& a](reduce #(if (> %1 %2) %1 %2) a))", "user": "4e5cd3c4535d8a8b8723a2c4"}, {"problem": 38, "code": "(fn [& s] (first (sort > s)))", "user": "54524afbe4b0e397800069bc"}, {"problem": 38, "code": "(fn [& args ] (reduce (fn [acc x] (if (> x acc) x acc)) 0 args))", "user": "53ea5851e4b036ad0777e4e4"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "5452d79de4b0e397800069ca"}, {"problem": 38, "code": "(fn [& list] (first (sort > list)))", "user": "4dce9252535d5973398f92a3"}, {"problem": 38, "code": "(fn my-max [& r]\n  (loop [ret 0 r r]\n    (if-not (seq r)\n      ret\n      (if (> (first r) ret)\n        (recur (first r) (rest r))\n        (recur ret (rest r))))))", "user": "53b7aa6ce4b047364c0444d1"}, {"problem": 38, "code": "(fn [& nums] (last (sort nums)))", "user": "4fa04102e4b0dcca54ed6d46"}, {"problem": 38, "code": "(fn max-value [& args] (reduce (fn max-in [x y] (if (> x y) x y)) args))", "user": "545188ebe4b0e397800069b2"}, {"problem": 38, "code": "(fn my-max [x & seq]\n  (reduce\n          (fn [m c] (if (> c m) c m))\n    x\n    seq))", "user": "5455c2f3e4b080a794c2c87d"}, {"problem": 38, "code": "(fn [& l]\n  (reduce #(if (> %1 %2) %1 %2) l))", "user": "545281bce4b0e397800069c3"}, {"problem": 38, "code": "(fn [& arg] ((fn ff [x] \n  (if \n    (= (count x) 1) \n    (first x) \n    (if \n      (> (first x) (ff (rest x))) \n      (first x) \n      (ff (rest x)))))\n  \n  arg))", "user": "544e1794e4b0e39780006980"}, {"problem": 38, "code": "(fn [& x]\n  (loop [m 0 ar x]\n    (if (empty? ar) m\n      (recur (if (< m (first ar)) (first ar) m) (rest ar)))))", "user": "54381729e4b032a45b869310"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "54215735e4b01498b1a71ab2"}, {"problem": 38, "code": "(fn [& args]\n  (loop [arr args\n         mx (first args)]\n    (if (empty? arr)\n      mx\n      (if (> (first arr) mx)\n      \t(recur (rest arr) (first arr))\n        (recur (rest arr) mx)\n        ))))", "user": "543b12cce4b032a45b86932a"}, {"problem": 38, "code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) s))", "user": "5457e5f1e4b01be26fd74613"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "51ba60a8e4b0fe3ecfb4642e"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "53e3e353e4b036ad0777e406"}, {"problem": 38, "code": "(fn [& more] (last (sort more)))", "user": "52d84ea7e4b09f7907dd1390"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5450c81fe4b0e397800069a4"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5457767ae4b01be26fd7460c"}, {"problem": 38, "code": "#(last (sort %&))", "user": "54529a22e4b0e397800069c5"}, {"problem": 38, "code": "(fn[& args]\n  (loop [[n & rest] args mx nil] \n   (if (not n)\n     mx\n     (recur rest (if (or (not mx) (< mx n)) n mx)))))", "user": "5446c12ee4b032a45b8693b4"}, {"problem": 38, "code": "(comp (fn [coll] (reduce #(if (> %2 %1) %2 %1) 0 coll)) vector)", "user": "5417bc50e4b01498b1a71a0f"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5453b522e4b0e397800069d0"}, {"problem": 38, "code": "(fn [& nums] (reduce #(if (> %1 %2) %1 %2) nums))", "user": "544cf5d7e4b0e39780006977"}, {"problem": 38, "code": "(fn [& col] (reduce #(if (> %1 %2) %1 %2) col))", "user": "54580586e4b01be26fd74616"}, {"problem": 38, "code": "(fn [& coll] (reduce #(if (< % %2) %2 %) coll))", "user": "54512df2e4b0e397800069ae"}, {"problem": 38, "code": "(fn my-max\n  ([x y] (if (> x y) x y))\n  ([x y & more] (reduce my-max (my-max x y) more)))", "user": "54570d08e4b080a794c2c888"}, {"problem": 38, "code": "(fn [& l] (reduce (fn [x y] (if (> x y) x y)) l))", "user": "54524dbbe4b0e397800069bd"}, {"problem": 38, "code": "(fn [& x] (first (sort > x)))", "user": "52149e21e4b0961f15ac4d94"}, {"problem": 38, "code": "(fn [& l] (reduce #(if (> % %2) % %2) l))", "user": "52e16face4b09f7907dd1421"}, {"problem": 38, "code": "(fn top [& s]\n  ((fn help [s curr]\n    (cond\n      (empty? s)\n        curr\n      (> (first s) curr)\n        (help (rest s) (first s))\n      :else\n        (help (rest s) curr)))\n  s 0))", "user": "545801f6e4b01be26fd74615"}, {"problem": 38, "code": "(fn [val & vals]\n  (reduce #(if (> %1 %2) %1 %2) val vals))", "user": "50bdd4fee4b0594b91591c84"}, {"problem": 38, "code": "#(last (sort %&))", "user": "544a8fbbe4b0e39780006957"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "53c6db22e4b00fb29b2212a2"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "5454b84ce4b0e397800069d9"}, {"problem": 38, "code": "(fn [& col]\n  (reduce #(if (> %1 %2) %1 %2) col)\n)", "user": "545b77f5e4b01be26fd74653"}, {"problem": 38, "code": "(fn [& lst] (last (sort lst)))", "user": "545e7ab0e4b01be26fd7467c"}, {"problem": 38, "code": "(fn [& coll] (reduce #(if (>= %1 %2) %1 %2) coll))", "user": "52c2d900e4b07a9af5792382"}, {"problem": 38, "code": "(fn [& coll] (reduce #(if (>= %1 %2) %1 %2) coll))", "user": "545eb424e4b01be26fd74681"}, {"problem": 38, "code": "(fn [& coll] (reduce #(if (>= %1 %2) %1 %2) coll))", "user": "545eb56be4b01be26fd74682"}, {"problem": 38, "code": "(fn new-max\n     [& args]\n     (reduce #(if (> %1 %2) %1 %2)\n             (first args)\n             (rest  args)))", "user": "545e9cf1e4b01be26fd7467f"}, {"problem": 38, "code": "#(last(sort %&))", "user": "5367f0a7e4b0243289761e88"}, {"problem": 38, "code": "(fn mx [& args]\n  (reduce (fn [x y] (if (> x y) x y))\n          args))", "user": "5454bd9be4b0e397800069db"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> % %2) % %2) xs))", "user": "53b14289e4b047364c04448b"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5461368ce4b01be26fd7469b"}, {"problem": 38, "code": "(fn [& xs]\n  (loop [ys xs m (first xs)]\n    (cond (empty? ys) m\n          (> m (first ys)) (recur (rest ys) m)\n          :else (recur (rest ys) (first ys)))))", "user": "546176e7e4b01be26fd746a2"}, {"problem": 38, "code": "(fn my-max\n  [& seq]\n  ((fn my-inner-max\n     [coll]\n     (let [[head & tail] coll]\n       (if (empty? tail)\n         head\n         (if (> head (my-inner-max tail))\n           head\n           (my-inner-max tail))))) seq))", "user": "545d881de4b01be26fd7466f"}, {"problem": 38, "code": "(fn [head & tail]\n  (let [next (first tail)]\n    (cond (empty? tail)\n            head \n          (> next head)\n            (recur next (rest tail))\n          true\n            (recur  head (rest tail)))))", "user": "5461c402e4b01be26fd746a6"}, {"problem": 38, "code": "(fn [& x]\n  (reduce #(if (>= %1 %2) %1 %2) x))", "user": "536c99c5e4b0fc7073fd6e46"}, {"problem": 38, "code": "(fn [& rest]\n  (first (sort > rest)))", "user": "545c2d07e4b01be26fd7465c"}, {"problem": 38, "code": "(fn [& s]\n  (loop [mx 0 aseq (vec s)]\n    (if (= 0 (count aseq))\n      mx\n      (recur (if (< mx (peek aseq)) (peek aseq) mx) (pop aseq)))))", "user": "5414dccbe4b01498b1a719f1"}, {"problem": 38, "code": "(fn [& x] (last (apply sorted-set x)))", "user": "5458a729e4b01be26fd74622"}, {"problem": 38, "code": "(fn m [& args]\n  (if (= 1 (count args))\n    (first args)\n    (let [v0 (first args)\n          vrest (apply m (rest args))]\n      (if (< v0 vrest) vrest v0))))", "user": "53d60f57e4b0e771c3025451"}, {"problem": 38, "code": "(fn foo [& args] (last (sort args)))", "user": "546113ffe4b01be26fd74699"}, {"problem": 38, "code": "(fn [& lst]\n  (loop [max-value 0 elements lst]\n    (cond \n     (empty? elements) max-value\n     (> (first elements) max-value) (recur (first elements) (rest elements))\n     :else (recur max-value (rest elements))\n    )))", "user": "541bd782e4b01498b1a71a6b"}, {"problem": 38, "code": "(fn [a & b] (last (sort (flatten (conj [] a b)))))", "user": "54630cdae4b01be26fd746bb"}, {"problem": 38, "code": "#(last (sort %&))", "user": "54630e6be4b01be26fd746bc"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5463fbbde4b01be26fd746ca"}, {"problem": 38, "code": "(fn mmax [& args] (reduce (fn [x y] (if (>, x, y) x y)) args))", "user": "545d5c3be4b01be26fd7466d"}, {"problem": 38, "code": "(fn [& n] (first (sort-by identity > (list* n))))", "user": "546280d8e4b01be26fd746b0"}, {"problem": 38, "code": "(fn [& list] (last (sort list)))", "user": "4fd20adce4b04c3a95aa0419"}, {"problem": 38, "code": "(fn [& items]\n      (reduce\n        #(if (< %1 %2) %2 %1)\n        (first items)\n        items))", "user": "532f7e12e4b019098a6f8b4e"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if (< %1 %2) %2 %1) rest))", "user": "54638c8fe4b01be26fd746c2"}, {"problem": 38, "code": "(fn [& nums] (last (sort (first (list nums)))))", "user": "5465712ee4b01be26fd746dc"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5464a536e4b01be26fd746cf"}, {"problem": 38, "code": "(fn r [& s] (reduce (fn [a b] (if (> a b) a b)) s))", "user": "5466199ce4b01be26fd746e2"}, {"problem": 38, "code": "(fn [& r] (reduce #(if (> % %2) % %2) r))", "user": "53572176e4b04ce2eb3ed276"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "541f89a5e4b01498b1a71a99"}, {"problem": 38, "code": "(fn mymax [& lst]\n  ((fn aux [m l]\n  \t(if (empty? l)\n      m\n      (aux (if (> (first l) m) (first l) m) (rest l))))\n   (first lst) (rest lst)))", "user": "54651982e4b01be26fd746d4"}, {"problem": 38, "code": "(fn [& v] \n  (first (reverse (sort (into [] v)))))", "user": "504f9ae1e4b0a02f9cffde9c"}, {"problem": 38, "code": "(comp last sort list)", "user": "545537c1e4b0e397800069dd"}, {"problem": 38, "code": "(fn [& n]\n  (peek (vec (sort n))))", "user": "53342e21e4b019098a6f8b8c"}, {"problem": 38, "code": "(fn maxval [& x]\n  (last (sort x)))", "user": "53ef235de4b0d648e757f4d4"}, {"problem": 38, "code": "(fn[& args0] (first ((fn [l] (sort >= l)) args0)))", "user": "54651ef5e4b01be26fd746d5"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "540c8f3fe4b0addc1aec6705"}, {"problem": 38, "code": "(fn [& coll] (reduce (fn [acc val] (if (< acc val) val acc)) coll))", "user": "545b486ae4b01be26fd7464f"}, {"problem": 38, "code": "(fn maxv [& args] (- (apply min (map - args))))", "user": "54651faee4b01be26fd746d6"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "546a52f3e4b00cfc9eacc151"}, {"problem": 38, "code": "(fn [& args] (-> args sort last))", "user": "54485727e4b032a45b8693c6"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "52b9cfb9e4b07a9af57922c5"}, {"problem": 38, "code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) more))", "user": "544e9022e4b0e3978000698b"}, {"problem": 38, "code": "(fn [& args]\n  (loop [lst args m 0]\n    (if (empty? lst)\n      m\n      (recur (rest lst)\n             (if (<= m (first lst)) (first lst) m)\n      )\n    )\n  )\n)", "user": "543bb568e4b032a45b869334"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "5146fd44e4b0d12420447958"}, {"problem": 38, "code": "(fn [& args] (last (sort (reduce conj '() args))))", "user": "53baa9c0e4b047364c0444fa"}, {"problem": 38, "code": "(fn [& xs] (first (reverse (sort xs))))", "user": "51ac80bbe4b09397d5109770"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "user": "546b833ce4b00cfc9eacc16b"}, {"problem": 38, "code": "(fn [& xs] \n  (reduce #(if (> %1 %2) %1 %2) xs))", "user": "530e75d5e4b08068f379ecba"}, {"problem": 38, "code": "(fn [& p] (reduce #(if (> %1 %2) %1 %2 ) (first p) p))", "user": "52a90056e4b0c58976d9ac39"}, {"problem": 38, "code": "#(-> %& sort reverse first)", "user": "5465febde4b01be26fd746e1"}, {"problem": 38, "code": "(fn [& li] \n  (reduce #(if (> %1 %2)\n            %1\n            %2) \n  li))", "user": "546c1b2ce4b00cfc9eacc174"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "546a6dbbe4b00cfc9eacc156"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce (fn [max-n n]\n            (if (> n max-n)\n              n\n              max-n)) nums))", "user": "54508859e4b0e397800069a3"}, {"problem": 38, "code": "(fn [& digits] (last (sort digits)))", "user": "5461873de4b01be26fd746a3"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (> %2 %1) %2 %1) (cons x xs)))", "user": "54684c3be4b00cfc9eacc139"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "546dd4f6e4b00cfc9eacc194"}, {"problem": 38, "code": "#(loop [x %& m %1] (if (empty? x) m (recur (rest x)(if (> (first x) m)(first x)m))))", "user": "542a348be4b01498b1a71b3f"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> % %2) % %2) 0 args))", "user": "5468a110e4b00cfc9eacc13d"}, {"problem": 38, "code": "(fn [& c] (reduce #(if(> %1 %2) %1 %2) c))", "user": "544e6666e4b0e39780006985"}, {"problem": 38, "code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) coll ))", "user": "5462ce20e4b01be26fd746b8"}, {"problem": 38, "code": "#(reduce (fn [c e] (if (> e c) e c)) %&)", "user": "546ed28be4b00cfc9eacc1a5"}, {"problem": 38, "code": "(fn [& args]\n  (loop [max-element (first args)\n         coll (rest args)]\n    (if (empty? coll)\n      max-element\n      (recur (let [x max-element\n                   y (first coll)]\n               (if (< x y) y x))\n             (rest coll)))))", "user": "546c4c5fe4b00cfc9eacc178"}, {"problem": 38, "code": "(fn [& items] \n  (loop [remain (rest items) current (first items)]\n    (if (empty? remain)\n      current\n      (let [item (first remain)]\n        (if (> item current)\n          (recur (rest remain) item)\n          (recur (rest remain) current))))))", "user": "546f81e3e4b00cfc9eacc1ae"}, {"problem": 38, "code": "(fn [& args]\n  (reduce \n   (fn [a b] (if (> a b) a b)) \n   (first args) \n   (rest args)\n   )\n)", "user": "546d41bde4b00cfc9eacc18c"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "546a6c7ce4b00cfc9eacc154"}, {"problem": 38, "code": "(fn my-max [& lst] (reduce #(if (> % %2) % %2) lst))", "user": "546c1f73e4b00cfc9eacc175"}, {"problem": 38, "code": "(fn [& args] (letfn [(maxi [x y] (if (> x y) x y))] (reduce maxi args)))", "user": "54530382e4b0e397800069cc"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "545944a2e4b01be26fd74627"}, {"problem": 38, "code": "(fn [& more] (reduce #(if (> %2 %1) %2 %1) more))", "user": "54696e4ce4b00cfc9eacc147"}, {"problem": 38, "code": "(fn [& args]\n  (reduce\n   (fn [acc cur]\n     (if (> cur acc)\n       \tcur\n       \tacc))\n   args))", "user": "5456e4e7e4b080a794c2c883"}, {"problem": 38, "code": "(fn [& values]\n  (let [pairwise-max (fn [a b]\n                       (if (> a b) a\n                      \t\t\t   b))]\n    (reduce pairwise-max values)))", "user": "541cf6dfe4b01498b1a71a7a"}, {"problem": 38, "code": "(fn er [ini & res] (let [fil (filter #(> % ini) res)] (if (empty? fil) ini (loop [ini (first fil) res (rest fil)] (if (empty? (filter #(> % ini) res)) ini (recur (first res) (rest res)))))))", "user": "52457931e4b08ba239308107"}, {"problem": 38, "code": "(fn[& args]\n  (let [maximum (first args)]\n    (loop [rst (rest args) maximum maximum]\n      (cond (empty? rst) maximum\n            (> (first rst) maximum) (recur (rest rst) (first rst))\n            :else (recur (rest rst) maximum)))))", "user": "5472cba1e4b094393f72dd7a"}, {"problem": 38, "code": "(fn _max[& args]\r\n  (reduce \r\n    #(if (> %2 %1) %2 %1)\r\n    args))", "user": "5470699ae4b00cfc9eacc1b6"}, {"problem": 38, "code": "(fn[& args] (reduce #(if (>%1 %2) %1 %2) args))", "user": "54730420e4b094393f72dd7c"}, {"problem": 38, "code": "(fn [& vs] (reduce #(if \n                    (> %1 %2) \n                     %1 \n                     %2) \n                 java.lang.Integer/MIN_VALUE \n                 vs))", "user": "517e9526e4b09104ecebe7e2"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5462dc5ae4b01be26fd746b9"}, {"problem": 38, "code": "(fn [& args]\n (first (reverse (sort (vec args)))))", "user": "543496e1e4b0b6b47310fcf2"}, {"problem": 38, "code": "(fn ! [& lst] (reduce #(if (> %1 %2) %1 %2) lst))", "user": "546fa7a7e4b00cfc9eacc1b1"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5474df19e4b0c51c1f4d728d"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "user": "545cfbb0e4b01be26fd74669"}, {"problem": 38, "code": "(fn _max [fst & more]\n  (if (empty? more)\n    fst\n    (let [m (apply _max more)]\n      (if (> fst m)\n        fst\n        m))))", "user": "547584d9e4b0c51c1f4d729b"}, {"problem": 38, "code": "(fn [initial & inputs] (reduce #(if (> %1 %2) %1 %2) initial inputs))", "user": "546e4ab8e4b00cfc9eacc19c"}, {"problem": 38, "code": "(fn -max [& args]\n  (reduce (fn [maxv v] (if (> v maxv) v maxv)) args))", "user": "54734a0de4b0c51c1f4d727b"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "5470cb10e4b094393f72dd65"}, {"problem": 38, "code": "(fn maxy [& nums]\n  (let [all-nums (rest nums)])\n  (if (= (rest nums) '())\n  \t(first nums)\n  \t(if (> (first nums) (apply maxy (rest nums)))\n    \t(first nums)\n    \t(apply maxy (rest nums))\n    \t)\n  )\n)", "user": "5471f090e4b094393f72dd6e"}, {"problem": 38, "code": "(fn [& args]\n  (loop [s (rest args) r (first args)]\n    (if (nil? (first s)) r\n      (recur (rest s) (if (> (first s) r) (first s) r)))\n    )\n  )", "user": "5471f2fbe4b094393f72dd70"}, {"problem": 38, "code": "(fn [& s]\n   (reduce #(if (> %1 %2)\n              %1\n              %2) s))", "user": "5466aabbe4b01be26fd746e8"}, {"problem": 38, "code": "(fn [& [x & xs]]\n   (loop [maximum x, [r & rs :as h] xs] \n     (cond (empty? h) maximum \n           (< maximum r) (recur r rs) \n           :else (recur maximum rs))))", "user": "5473efc3e4b0c51c1f4d7285"}, {"problem": 38, "code": "(fn lemax\n  ([x y]\n   \t(if (< x y) y x))\n  ([x y & stuff]\n   (reduce lemax (lemax x y) stuff)))", "user": "545b9dd9e4b01be26fd74654"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "529a3c37e4b02ebb4ef75094"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "546c6f11e4b00cfc9eacc17a"}, {"problem": 38, "code": "(fn rickmax [& args]\n\t(loop [maxi (first args) args args]\n\t\t(if (empty? args) maxi\n\t\t\t(let [new-term (first args)]\n\t\t\t\t(recur (if (> maxi new-term)\n\t\t\t\t\t\t\tmaxi\n\t\t\t\t\t\t\tnew-term)\n\t\t\t\t(rest args))))))", "user": "53703287e4b0fc7073fd6e8f"}, {"problem": 38, "code": "(fn [& input]\n  (loop [m (first input)\n         c (rest input)]\n    (if (empty? c)\n      m\n      (if (< m (first c))\n        (recur (first c) (rest c))\n        (recur m (rest c))\n        )\n      )\n    )\n  )", "user": "5460832ce4b01be26fd74693"}, {"problem": 38, "code": "(fn [& coll]\n\t(first (sort > coll)))", "user": "545f737ce4b01be26fd74688"}, {"problem": 38, "code": "(fn [& items] (reduce (fn [a b] (if (> a b) a b)) items))", "user": "51cf815de4b0e42293a22575"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %2 %1) %2 %1) xs))", "user": "5478c4fee4b0c51c1f4d72c0"}, {"problem": 38, "code": "(fn [& coll] (last (sort coll)))", "user": "52540bcce4b0541d1855b952"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "5433d3ebe4b0b6b47310fce4"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a, b] (if (> b a) b a)) args))", "user": "54357066e4b0b6b47310fcfd"}, {"problem": 38, "code": "(fn mx \n   [x & xs]\n   (\n    reduce #(if (> %1 %2) %1 %2) x xs\n    )\n  )", "user": "5475d755e4b0c51c1f4d72a0"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y))args))", "user": "54793488e4b0c51c1f4d72c5"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "user": "5479c58de4b0c51c1f4d72c7"}, {"problem": 38, "code": "(fn [& n]\n  (last (sort n)))", "user": "5471f0f3e4b094393f72dd6f"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "5470b3d0e4b00cfc9eacc1bb"}, {"problem": 38, "code": "(fn ([x] x)\n    ([x & ys] (loop [m x\n                     ls ys]\n                (if (empty? ls)\n                  m\n                  (recur (if (> (first ls) m)\n                           (first ls)\n                           m)\n                         (rest ls))))))", "user": "547ad587e4b0c51c1f4d72ce"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5472d919e4b094393f72dd7b"}, {"problem": 38, "code": "#(last (sort %&))", "user": "54764cf1e4b0c51c1f4d72a4"}, {"problem": 38, "code": "(fn [& s] (last (sort s)))", "user": "51dfb9e2e4b01188f0627531"}, {"problem": 38, "code": "(fn largest [& args] (last (sort args)))", "user": "547b9cdce4b0c51c1f4d72da"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "5478e57de4b0c51c1f4d72c1"}, {"problem": 38, "code": "(fn [c & o] (reduce #(if (> %2 %1) %2 %1) c o))", "user": "546e0c24e4b00cfc9eacc198"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (> %2 %) %2 %) x xs))", "user": "535c2d21e4b04ce2eb3ed2b2"}, {"problem": 38, "code": "(fn [& nums]\n  (loop [[x & remain] (seq nums)\n         result 0]\n    (if (empty? remain)\n      result\n      (if (> x result)\n        (recur remain x)\n        (recur remain result)\n        )\n      )\n    )\n  )", "user": "547adcb0e4b0c51c1f4d72cf"}, {"problem": 38, "code": "(fn [& args] (loop [max-val (first args) vals (rest args)]\n    (if (= 0 (count vals))\n      max-val           \n      (recur (if (> (first vals) max-val ) (first vals) max-val) (rest vals)))))", "user": "53d64811e4b0e771c3025456"}, {"problem": 38, "code": "(fn m [& args]\n\t(reduce (fn [x y] (if (> x y) x y)) args)\n)", "user": "547e478fe4b0c51c1f4d7303"}, {"problem": 38, "code": "(fn [& args] (first (reverse (sort args))))", "user": "513f86dde4b00f13ea1bd88d"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< % %2) %2 %1) args))", "user": "547ec511e4b0c51c1f4d730e"}, {"problem": 38, "code": "(fn [a & rest] (reduce (fn [a b] (if (> a b) a b)) a rest))", "user": "547d8e93e4b0c51c1f4d72f4"}, {"problem": 38, "code": "#(loop [coll %&\n        num 0]\n   (if (> (count coll) 0)\n     (if (> (first coll) num)\n       (recur (rest coll) (first coll))\n       (recur (rest coll) num))\n     num))\n\n;; Simplier way:\n;; #(last (sort %&))", "user": "53a2e6abe4b0f1fc7453882f"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "542dc7c7e4b0dad94371f2bd"}, {"problem": 38, "code": "(fn [& args]\n  (-> args (sort) (reverse) (first)))", "user": "547fbe01e4b0c51c1f4d7321"}, {"problem": 38, "code": "(comp first reverse sort vector)", "user": "547d66a1e4b0c51c1f4d72f2"}, {"problem": 38, "code": "#(last (sort %&)) ;-- Internet. Kon deze niet oplossen: Dacht aan dit: (fn [list] (last (sort list))) maar werkt niet.....", "user": "548018cde4b0c51c1f4d7325"}, {"problem": 38, "code": "(fn [& more]\n\t(\n\t\tlast(sort more)\n\t)\n)", "user": "548018dbe4b0c51c1f4d732a"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %2 %1)\n                  %2\n                  %1)\n          args))", "user": "54801febe4b0c51c1f4d733c"}, {"problem": 38, "code": "(fn maxValue [& args] (last (sort args)))", "user": "548026d8e4b0e286459a1155"}, {"problem": 38, "code": "(fn [big & xs] \n  (if (seq xs)\n    (recur (if (< big (first xs)) (first xs) big) (rest xs))\n    big))", "user": "54577fefe4b01be26fd7460d"}, {"problem": 38, "code": "(fn [& xs]\n  (first (sort > xs )))", "user": "54448b64e4b032a45b869392"}, {"problem": 38, "code": "(fn [x & xs] (reduce (fn [m n] (if (> n m) n m)) x xs))", "user": "528c381ce4b0239c8a67aeb2"}, {"problem": 38, "code": "(fn [& args] \n  (reduce #(if (> %1 %2) %1 %2) args)\n)", "user": "5458474ce4b01be26fd7461b"}, {"problem": 38, "code": "(fn [& coll]\n  (reduce (fn [a b] (if (> a b) a b)) coll))", "user": "5032748ae4b0e78df07b092f"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "548018e3e4b0c51c1f4d7331"}, {"problem": 38, "code": "(\n    fn max_value\n    (\n      [x y]\n      (\n        if (> x y) x y\n        )\n      )\n    (\n      [x y & more]\n      (\n        reduce max_value (max_value x y) more\n        )\n      )\n    )", "user": "547f3434e4b0c51c1f4d7319"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "548204b2e4b0e286459a117a"}, {"problem": 38, "code": "#(last (sort %&))", "user": "53b33217e4b047364c0444a4"}, {"problem": 38, "code": "(fn [& args] (peek (reverse (sort args))))", "user": "545ded41e4b01be26fd74678"}, {"problem": 38, "code": "(fn [& a] (->> a (map -) (apply min) (-)))", "user": "53483a32e4b084c2834f4a57"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (< %1 %2)\n             %2\n             %1)\n          xs))", "user": "5483d59fe4b0e286459a1194"}, {"problem": 38, "code": "(fn\n  [& args]\n  (reduce (fn [a b]\n            (if (> a b)\n              a\n              b))\n          args))", "user": "5484143de4b0e286459a1197"}, {"problem": 38, "code": "#(reduce (fn [num1 num2]\n            (if (> num1 num2)\n              num1\n              num2)) %&)", "user": "54411506e4b032a45b869369"}, {"problem": 38, "code": "(comp last sort vector)", "user": "54814dbee4b0e286459a116b"}, {"problem": 38, "code": "#(reduce (fn [x y] (if (> y x) y x)) 0 %&)", "user": "54852ad0e4b0e286459a11a7"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "54856d54e4b0e286459a11aa"}, {"problem": 38, "code": "#(reduce (fn [reducer, elem]\n           (if (> elem reducer)\n             elem\n             reducer))\n         (vec %&))", "user": "54848141e4b0e286459a119e"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))\n;(fn [& args] (first (sort > args)))", "user": "54857e3be4b0e286459a11ad"}, {"problem": 38, "code": "(fn mymax\n  ([x y]\n     (if (> x y) x y))\n  ([x y & more]\n     (reduce mymax (mymax x y) more)))", "user": "5485d2c1e4b0e286459a11b3"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) 0 xs))", "user": "5485b402e4b0e286459a11b0"}, {"problem": 38, "code": "(fn [ val & next ] (reduce #(if (< %1 %2) %2 %1) val next))", "user": "5470c930e4b094393f72dd64"}, {"problem": 38, "code": "(fn mymax\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] \n    (reduce mymax (mymax x y) more)))", "user": "4e41a04e535dc968683fc49e"}, {"problem": 38, "code": "(fn [& nums] (reduce #(if (< %1 %2) %2 %1) nums))", "user": "54750ca3e4b0c51c1f4d7294"}, {"problem": 38, "code": "(fn [& vals] (reduce #(if (> %1 %2) %1 %2) vals))", "user": "54864662e4b0e286459a11b8"}, {"problem": 38, "code": "(fn [& z](last (sort z)))", "user": "548392fce4b0e286459a1191"}, {"problem": 38, "code": "(fn my-max [& a-seq]\n  (last (sort a-seq)))", "user": "547e3846e4b0c51c1f4d7302"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (< x y) y x)) args))", "user": "548485f5e4b0e286459a119f"}, {"problem": 38, "code": "(fn [& args](last (sort args)))", "user": "52d5a52ae4b09f7907dd1342"}, {"problem": 38, "code": "(fn [& more]\n  (reduce #(if (> %1 %2) %1 %2)\n          Double/NEGATIVE_INFINITY\n          more)\n  )", "user": "513facf5e4b00f13ea1bd892"}, {"problem": 38, "code": "(fn [& s]\n  (last (vec (sort s))))", "user": "548582eee4b0e286459a11ae"}, {"problem": 38, "code": "(fn [first & rest] (reduce #(if (> %1 %2) %1 %2) first rest))", "user": "4f9dd376e4b0dcca54ed6d27"}, {"problem": 38, "code": "(fn mymax \n  [& args]\n  (reduce #(if (> %1 %2) %1 %2)  0 args))", "user": "535f9a5ce4b04ce2eb3ed2de"}, {"problem": 38, "code": "(fn[& args](last (sort args)))", "user": "547cc4e3e4b0c51c1f4d72ea"}, {"problem": 38, "code": "(fn [& args] (last(sort args)))", "user": "5463c452e4b01be26fd746c4"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5486adf7e4b0e286459a11be"}, {"problem": 38, "code": "(fn [& args]\n                  (last (sort args)))", "user": "534b57bbe4b084c2834f4a78"}, {"problem": 38, "code": "(fn [& l] (reduce #(if (< % %2) %2 %) l))", "user": "54899701e4b0e286459a11ea"}, {"problem": 38, "code": "(fn my-max [x & xs]\n  (reduce #(if (< % %2)\n             %2\n             %)\n          x xs))", "user": "5488872ee4b0e286459a11d3"}, {"problem": 38, "code": "(fn m [one & args]\n  (if (empty? args)\n    one\n    (if (> one (first args))\n      (apply m (concat (list one) (rest args)))\n      (apply m args))))", "user": "54835065e4b0e286459a118c"}, {"problem": 38, "code": "(fn [& s]\n  (reduce #(if (> %1 %2) %1 %2) 0 s))", "user": "52a803cee4b0c58976d9ac26"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> % %2) % %2) xs))", "user": "54893618e4b0e286459a11e0"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args))\n)", "user": "54620933e4b01be26fd746aa"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %2 %1) %2 %1) 0 x))", "user": "548af5b5e4b0e286459a11f8"}, {"problem": 38, "code": "(fn [& args] \n  (reduce #(if (< %1 %2) %2 %1) args))", "user": "52ebbdf7e4b0705949c44443"}, {"problem": 38, "code": "(fn [& args] ((partial reduce \n                   (fn [x y] \n                     (if (> y x) y x)\n                     )\n                   ) args)\n\n)", "user": "53f4c3d6e4b0db01ade6f9c5"}, {"problem": 38, "code": "(fn [& xs] (reduce\n           (fn [x y] (if (> x y ) x y) )\n           (first xs)\n           xs))", "user": "548cd813e4b0e286459a1211"}, {"problem": 38, "code": "(fn [maxx & args] (reduce (fn [maxx val] (if (> val maxx) val maxx)) maxx args))", "user": "51a132cee4b0b292b01ee3ff"}, {"problem": 38, "code": "(fn m [x & xs]\n  (cond\n   (empty? xs) x\n   (> x (apply m xs)) x\n   :else (apply m xs)))", "user": "548cd637e4b0e286459a1210"}, {"problem": 38, "code": ";(fn [& args]\n;  (reduce (fn [a b] (if (> a b) a b)) args))\n\n(fn [x & xs]\n  (reduce #(if (> % %2) % %2) x xs))", "user": "54889b50e4b0e286459a11d4"}, {"problem": 38, "code": "(fn [& params]\n  (reduce (fn [a b] (if (> a b) a b)) params))", "user": "5188c249e4b0bdff0e072d54"}, {"problem": 38, "code": "#(-> (sort %&) last )", "user": "54897284e4b0e286459a11e6"}, {"problem": 38, "code": "(#(letfn [(f [& xs] (reduce (fn [x y] (if (> x y) x y)) xs))] f))", "user": "5485bc1be4b0e286459a11b1"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5485da80e4b0e286459a11b4"}, {"problem": 38, "code": "#(->> %& sort last)", "user": "548b8a50e4b0e286459a11ff"}, {"problem": 38, "code": "(fn \n  [& args] \n  (first (sort > args)))", "user": "54540453e4b0e397800069d2"}, {"problem": 38, "code": "(fn [& args] \n  (reduce \n   (fn [x y] \n     (if (> x y) x y)) args))", "user": "539eb153e4b0ca733b97448e"}, {"problem": 38, "code": "(fn [& r]\n  (reduce (fn [m x] (if (> x m) x m )) (first r) r))", "user": "548fa2dfe4b0e286459a1240"}, {"problem": 38, "code": "(fn mymax\n([x y]\n(if (> x y) x y))\n([x y & more]\n(reduce mymax (mymax x y) more)))", "user": "548f3ee4e4b0e286459a1237"}, {"problem": 38, "code": "(fn [& rest]\n  (reduce (fn [x y] (if (> x y) x y)) rest)\n)", "user": "548f5086e4b0e286459a1239"}, {"problem": 38, "code": "(fn [x & collection]\n  (loop [maxSoFar x\n         tempCollection collection]\n    (cond \n     (empty? tempCollection) maxSoFar\n     (> maxSoFar (first tempCollection)) (recur maxSoFar (rest tempCollection))\n     :else (recur (first tempCollection) (rest tempCollection)))))", "user": "548f339ee4b0e286459a1233"}, {"problem": 38, "code": "#(last (sort %&))", "user": "53bcdd41e4b0d9a98559a6c0"}, {"problem": 38, "code": "#(last (sort %&))", "user": "548f19a8e4b0e286459a1231"}, {"problem": 38, "code": "(fn [& in]\n  (reduce #(if (> %1 %2) %1 %2\n            ) in))", "user": "54903056e4b0b312c081ff2e"}, {"problem": 38, "code": "(fn [& x] (\n\treduce (fn [a b] (if (> a b) a b))\n    x\n))", "user": "527a9f19e4b03e8d9a4a7562"}, {"problem": 38, "code": "(fn [& keys] (first (take-last 1 (sort keys))))", "user": "548efcb6e4b0e286459a122a"}, {"problem": 38, "code": "(fn [& args]\n  (loop [m 0 vals args]\n    (if (seq vals)\n      (recur (if (> (first vals) m) (first vals)  m) (rest vals))\n      m)))", "user": "5280539ce4b0757a1b1713f3"}, {"problem": 38, "code": "(fn [& args ] (reduce (fn [f s]\n           (if (> f s)\n             f\n             s)) args))", "user": "5491bebbe4b0b312c081ff3c"}, {"problem": 38, "code": "(fn maximum [& col]\n  (reduce #(if (> %1 %2) %1 %2) col))", "user": "548f05ace4b0e286459a122b"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "user": "54926752e4b0b312c081ff44"}, {"problem": 38, "code": "(fn [& elements] (reduce #(if (> % %2) % %2) elements))", "user": "5455510fe4b0e397800069df"}, {"problem": 38, "code": "(fn [& args]\n  (peek (into [] (sort < args))))", "user": "53c83f94e4b00fb29b2212af"}, {"problem": 38, "code": "(fn [& coll]\n  (reduce (fn [m, x] (if (> m x) m x)) coll))", "user": "548f37c7e4b0e286459a1234"}, {"problem": 38, "code": "(fn max2 ([x] x) ([x y] (if (> x y) x y)) ([x y & more] (reduce max2 (max2 x y) more)))", "user": "5482a9ece4b0e286459a1181"}, {"problem": 38, "code": "(fn [& coll]\n  (reduce #(if (> %1 %2) %1 %2) (first coll)  coll))", "user": "5493ccbbe4b0b312c081ff50"}, {"problem": 38, "code": "(fn problem-28 \n  ([a] a)\n  ([a b] (if (< a b) b a))\n  ([a b & more] (reduce problem-28 (problem-28 a b) more)))", "user": "51d26b0ae4b0d13b04db0d97"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce (fn [mx n]\n            (if-not mx\n              n\n              (if (> n mx) n mx)))\n          nil\n          nums))", "user": "548c6673e4b0e286459a1209"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args ) )", "user": "5492eb97e4b0b312c081ff46"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5492164ee4b0b312c081ff3e"}, {"problem": 38, "code": "(fn mx [& args] (last (sort args)))", "user": "547e6fd2e4b0c51c1f4d730b"}, {"problem": 38, "code": "(fn [& l] (reduce #(if (> %1 %2) %1 %2) l))", "user": "548d15a0e4b0e286459a1214"}, {"problem": 38, "code": "(fn [& params] (last (sort params)))", "user": "543170b2e4b0dad94371f2e7"}, {"problem": 38, "code": "(fn myfun [& args]\n   (-> args sort last))", "user": "5483ace0e4b0e286459a1192"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [m cur] (if (> cur m) cur m)) args))", "user": "548c8115e4b0e286459a120c"}, {"problem": 38, "code": "(fn [& xs]\n(reduce #(if (> %1 %2) %1 %2) xs))", "user": "53b9dae0e4b047364c0444ef"}, {"problem": 38, "code": "(fn mx [& args] (last (sort args)))", "user": "54965534e4b0b312c081ff65"}, {"problem": 38, "code": "#(last (sort %&))", "user": "545c7068e4b01be26fd7465d"}, {"problem": 38, "code": "(fn [x & z] (reduce (fn [m a] (if (> a m) a m)) x z))", "user": "549375e4e4b0b312c081ff4e"}, {"problem": 38, "code": "(fn [x & a] (reduce #(if(> %2 %1) %2 %1) x a))", "user": "54973374e4b0b312c081ff6f"}, {"problem": 38, "code": "(fn [& vals] (reduce #(if (> %1 %2) %1 %2) vals))", "user": "4f0d6686535d0136e6c22318"}, {"problem": 38, "code": "(fn [& a] (loop [lst a]\n         \t(if (nil? (second lst))\n      \t\t(first lst)\n      \t\t\t(if (> (first lst) (second lst))\n        \t\t(recur (remove #(= (second lst) %) lst))\n        \t\t(recur (rest lst))))))", "user": "5495b2dee4b0b312c081ff5f"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "54982522e4b0b312c081ff7c"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) 0 args))", "user": "54857657e4b0e286459a11ac"}, {"problem": 38, "code": "(comp last sort list)", "user": "540217e1e4b0df28a13c62cb"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "54975e99e4b0b312c081ff72"}, {"problem": 38, "code": "(fn [& coll] \n  (reduce (fn [x y] (if (> x y) x y)) coll))", "user": "548ade6de4b0e286459a11f6"}, {"problem": 38, "code": "(fn ([x & xs]\n\t(reduce #(if (< %1 %2) %2 %1) x xs)))", "user": "5487eb1de4b0e286459a11ca"}, {"problem": 38, "code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2)  s))", "user": "549af5b1e4b0f3d1d8e70f76"}, {"problem": 38, "code": "(fn [& args] (reduce ( fn [x y] (if (> x y) x y)) args))", "user": "549b34e0e4b0f3d1d8e70f7c"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %2 %1) %2 %1) x))", "user": "549c3e0ce4b0f3d1d8e70f87"}, {"problem": 38, "code": "(fn eh [& x]\n  ((fn fmax [x cur]\n     (cond\n      (empty? x) cur\n      (> (first x) cur) (fmax (rest x) (first x))\n      :else (fmax (rest x) cur))) x (first x)))", "user": "549c8bbde4b0f3d1d8e70f8c"}, {"problem": 38, "code": "(fn mx \n  ([x y]\n   \t(if (> x y) x y))\n  ([x y & more]\n    (apply mx (mx x y) more)))", "user": "5498c4cfe4b0b312c081ff85"}, {"problem": 38, "code": "(fn [& a] (reduce (fn [c v] (if (> c v) c v)) -1 a))", "user": "5499e23de4b03163384f4706"}, {"problem": 38, "code": "(fn [head & tail]\n    (reduce #(if (< %1 %2) %2 %1) head tail)\n)", "user": "54996971e4b0b312c081ff8d"}, {"problem": 38, "code": "#(last (sort %&))", "user": "549c22f7e4b0f3d1d8e70f86"}, {"problem": 38, "code": "#(last (sort %&))", "user": "549188f6e4b0b312c081ff3a"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "549c1713e4b0f3d1d8e70f82"}, {"problem": 38, "code": "(fn [& m] (last (sort m)))", "user": "54972b0ee4b0b312c081ff6e"}, {"problem": 38, "code": "(fn max-value [x & ax]\n  (reduce (fn [x y] (if (pos? (.compareTo y x)) y x)) x ax))", "user": "548018d1e4b0c51c1f4d7326"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "54886239e4b0e286459a11d0"}, {"problem": 38, "code": "(fn [& args] \n  (reduce \n   (fn [x y]\n     (if (> x y)\n       x\n       y))\n   args))", "user": "549e5e52e4b0f3d1d8e70f9e"}, {"problem": 38, "code": "(fn [& x] \n     (reduce #(if (> %1 %2) %1 %2) x))", "user": "5493d908e4b0b312c081ff52"}, {"problem": 38, "code": "(fn [& nums]\n (reduce #(if (> %1 %2) %1 %2)\n         nums)\n)", "user": "549a999be4b0f3d1d8e70f6f"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "548f11a0e4b0e286459a122d"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "54769c7ae4b0c51c1f4d72a8"}, {"problem": 38, "code": "(fn [& numbers] \n  (reduce \n   (fn [current-max number] \n     (if (> number current-max) number current-max)) 0 numbers))", "user": "549c953ee4b0f3d1d8e70f8e"}, {"problem": 38, "code": "(fn [& xs] (last (sort xs)))", "user": "549def9ce4b0f3d1d8e70f99"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "user": "549eb44fe4b0f3d1d8e70fa6"}, {"problem": 38, "code": "(fn [& a] \n(reduce (fn [x y] (if (> x y) x y)) 0 a))", "user": "53053be9e4b0d8b024fd375b"}, {"problem": 38, "code": "(fn [& a]\n  (reduce #(if (> %1 %2)\n              %1\n              %2) a))", "user": "549cd548e4b0f3d1d8e70f91"}, {"problem": 38, "code": "(fn [& v] (last (sort v)))", "user": "549ffeade4b0f3d1d8e70fb2"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "54908cc1e4b0b312c081ff32"}, {"problem": 38, "code": "(comp last sort list)", "user": "549a176ce4b0f3d1d8e70f69"}, {"problem": 38, "code": "(fn [& s]\n  (reduce (fn [x y]\n            (if (> x y)\n              x\n              y))\n          s))", "user": "54a1f494e4b09f271ff37c52"}, {"problem": 38, "code": "(fn [& vals]\n  (reduce (fn [memo val]\n            (if (> memo val)\n              memo\n              val))\n          0\n          vals))", "user": "532902f8e4b09d4e7a9b550e"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "549dd591e4b0f3d1d8e70f98"}, {"problem": 38, "code": "(fn [& h] (reduce (fn [a b] = (if (> a b) a b)) h  ))", "user": "505006d7e4b0a02f9cffdeaf"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5488537be4b0e286459a11cf"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "549b1e50e4b0f3d1d8e70f7a"}, {"problem": 38, "code": "#(last (sort %&))", "user": "54a1d643e4b09f271ff37c50"}, {"problem": 38, "code": "(fn [x & rest]\n  (loop [xs rest maximum x]\n    (if (empty? xs)\n      maximum\n      (let [[x & rxs] xs]\n        (if (> x maximum)\n          (recur rxs x)\n          (recur rxs maximum))))))", "user": "54a31fdae4b09f271ff37c64"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce #(if (> %1 %2) %1 %2) nums)\n  )", "user": "545b0275e4b01be26fd74648"}, {"problem": 38, "code": "#(last (sort %&))", "user": "54a677a9e4b09f271ff37c88"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "53ef55eee4b0742d9025b0ca"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "54a700c3e4b09f271ff37c90"}, {"problem": 38, "code": "#(last (sort %&))", "user": "54a70af9e4b09f271ff37c93"}, {"problem": 38, "code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) (seq s)))", "user": "5461500be4b01be26fd7469f"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "538fe171e4b0b51d73faae92"}, {"problem": 38, "code": "(fn [ & xs ] (reduce (fn [a b] (if (> a b) a b)) xs))", "user": "54a7336be4b09f271ff37c95"}, {"problem": 38, "code": "(fn [& args]                                                                                                                                                                                                      \n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "53403f42e4b085b17e897da8"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "54a7d707e4b09f271ff37c9b"}, {"problem": 38, "code": "(fn [& vs] (reduce (fn [a b] (if (< a b) b a)) vs))", "user": "4ea03f70535d7eef308072a1"}, {"problem": 38, "code": "(fn [& args](reduce #(if (> %1 %2) %1 %2) args))", "user": "54a7efdee4b09f271ff37c9d"}, {"problem": 38, "code": "#(last (sort %&))", "user": "53f3b216e4b0742d9025b0f8"}, {"problem": 38, "code": "(fn [& numbers] (last (sort numbers)))", "user": "54a98ed4e4b09f271ff37caf"}, {"problem": 38, "code": "#(last (sort %&))", "user": "50ec69e0e4b04edc3377704a"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "54a70484e4b09f271ff37c91"}, {"problem": 38, "code": "(fn mymax [f & r] (if (nil? r) f (let [l (apply mymax r) ] (if (> l f) l f  )   )  )  )", "user": "54874116e4b0e286459a11c3"}, {"problem": 38, "code": "(fn [& s]\n  (reduce (fn [a b] (if (> a b) a b)) s))", "user": "54a627bce4b09f271ff37c83"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> % %2) % %2) xs))", "user": "50aa777fe4b056ee01935866"}, {"problem": 38, "code": "(fn [& args]\n  (loop [big 0, args args]\n    (if (= args [])\n      big\n    \t(if (> (first args) big)\n      \t(recur (first args) (rest args))\n      \t(recur big (rest args))))))", "user": "54a1d047e4b09f271ff37c4f"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (< a b) b a)) args))", "user": "51c4ee10e4b06b70b3e207e9"}, {"problem": 38, "code": "(fn[& args](last (sort args)))", "user": "54a11042e4b09f271ff37c49"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "user": "54ab53e1e4b09f271ff37cc5"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) 0 args))", "user": "5462caf5e4b01be26fd746b7"}, {"problem": 38, "code": "#(last (sort %&))", "user": "54ab6773e4b09f271ff37cc8"}, {"problem": 38, "code": "(fn max-value [& x]\n  (let [find-max (fn [x v] \n                   (if (empty? x) v\n                     (recur (rest x)\n                            (let [h (first x)] \n                              (if (> h v) h v)))))]\n  (find-max x (first x))))", "user": "54800885e4b0c51c1f4d7323"}, {"problem": 38, "code": "(fn get-max [& l]\n  (reduce (fn [a b]\n            (if (> a b)\n              a\n              b)) \n          l))", "user": "53051bf6e4b0d8b024fd3759"}, {"problem": 38, "code": "(fn [& rest] (last (sort rest)))", "user": "54ad0575e4b09f271ff37cde"}, {"problem": 38, "code": "#(last (sort %&))", "user": "52e12ac5e4b09f7907dd141a"}, {"problem": 38, "code": "(fn my-max [& args]\n  (letfn [(my-max-e [e1 e2]\n            (if (> e1 e2) e1 e2))\n          (my-max-helper [l]\n            (if (= 1 (count l)) (first l)\n              (my-max-e (first l) (my-max-helper (rest l)))))]\n    (my-max-helper args)))", "user": "547884d7e4b0c51c1f4d72bd"}, {"problem": 38, "code": "#(last (sort %&))", "user": "53e88247e4b036ad0777e489"}, {"problem": 38, "code": "#(last (sort %&))", "user": "4fabbd3ee4b081705acca21e"}, {"problem": 38, "code": "#(last(sort %&))", "user": "53e8e42ce4b036ad0777e48e"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) 0 xs))", "user": "549cc867e4b0f3d1d8e70f8f"}, {"problem": 38, "code": "(fn [& s]\n  (loop [l s m 0]\n    (if (empty? l) \n      m\n      (recur (rest l) (#(if (< %1 %2) %2 %1) m (first l)))\n    )         \n  )\n)", "user": "54aa373de4b09f271ff37cb6"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> % %2) % %2) a))", "user": "54543484e4b0e397800069d4"}, {"problem": 38, "code": "(fn [& v] (reduce #(if (> %1 %2) %1 %2) v))", "user": "5481be5fe4b0e286459a1172"}, {"problem": 38, "code": "(comp first reverse sort vector)", "user": "54ae331ce4b09f271ff37cee"}, {"problem": 38, "code": "(fn [& coll] (reduce (fn [m e] (if (> e m) e m)) 0 coll))", "user": "54a854f5e4b09f271ff37ca2"}, {"problem": 38, "code": "(fn [& args](reduce #(if (> % %2)% %2) args))", "user": "549ac3cde4b0f3d1d8e70f71"}, {"problem": 38, "code": "(fn \n  [& x] \n  (reduce \n   (fn \n     [x y] \n     (if (> x y) x y) ) x))", "user": "528114ffe4b0757a1b17141f"}, {"problem": 38, "code": "(fn mx \n  ([x] x)\n  ([x y] \n   (if (coll? y)\n     (if (empty? y)\n       x\n       (if (> x (first y))\n         (mx x (rest y))\n         (mx (first y) (rest y))\n         )\n       )\n     (mx x (list y))\n     )\n   )\n     \n  ([x y & z] \n   (mx x (cons y z))\n   )\n  )", "user": "54ab46fee4b09f271ff37cc3"}, {"problem": 38, "code": "(fn [& a] (reduce\n          (fn [x y] \n            (if (> x y) x y))\n             a))", "user": "54af6fb0e4b09f271ff37d08"}, {"problem": 38, "code": "#(last (sort %&))", "user": "535774c2e4b04ce2eb3ed27c"}, {"problem": 38, "code": "(fn [& data] (reduce #(if (> %1 %2) %1 %2) (first data) data))", "user": "54addba9e4b09f271ff37ce9"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "user": "546a6e9fe4b00cfc9eacc157"}, {"problem": 38, "code": "(comp last sort list)", "user": "54b13a40e4b09f271ff37d1b"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< % %2) %2 %) 0 args))", "user": "54ad9d76e4b09f271ff37ce6"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [result item] (if (> result item) result item)) args))", "user": "520ed237e4b0101e4be6fcd9"}, {"problem": 38, "code": "(fn [& s]\r\n    (reduce (fn\r\n              ([] nil)\r\n              ([acc item] (if (> item acc) item acc)))\r\n            s))", "user": "540459bfe4b0addc1aec6656"}, {"problem": 38, "code": "(fn [& args] (reduce #(if(< %1 %2) %2 %1) 0 args))", "user": "54ab502fe4b09f271ff37cc4"}, {"problem": 38, "code": "#(last (sort %&))", "user": "54ad4863e4b09f271ff37ce0"}, {"problem": 38, "code": "(fn [& values] \n  (reduce #(if (>= %2 %1) %2 %1) values))", "user": "53161a56e4b08068f379ed3e"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< % %2) %2 %) args))", "user": "54ae541ae4b09f271ff37cef"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) args))", "user": "528e441be4b0239c8a67aed8"}, {"problem": 38, "code": "(fn my-max \n  [m & rest]\n  (reduce #(if (< %1 %2) %2 %1) m rest))", "user": "546a70bae4b00cfc9eacc159"}, {"problem": 38, "code": "#(last (sort %&))", "user": "54aec21ae4b09f271ff37cf7"}, {"problem": 38, "code": "(fn [& rest] (-> (seq rest)\n                  sort\n                  last))", "user": "54af220ce4b09f271ff37d02"}, {"problem": 38, "code": "(fn mx [& args] (* -1 (apply min (map #(* -1 %) args))))", "user": "50b42cbbe4b001349b2f4abe"}, {"problem": 38, "code": "(fn [& coll]\n  (reduce \n   (fn [x y]\n     (if (> x y) x y))\n   (first coll)\n   (rest coll)\n   )\n  )", "user": "52ea4b23e4b09f7907dd14b8"}, {"problem": 38, "code": "(fn [& values]\n  (reduce\n   #(if (or (nil? %1) (< %1 %2))\n      %2\n      %1)\n   values))", "user": "5463c824e4b01be26fd746c5"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "user": "54b448f2e4b05787c3b1638e"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "user": "5482c4d1e4b0e286459a1186"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "54b66089e4b05787c3b163ba"}, {"problem": 38, "code": "(fn [largest & more] \n  (letfn [(choose-max [m ot]\n                      (if (empty? ot)\n                        m\n                        (if (> (first ot) m)\n                          (choose-max (first ot) (rest ot))\n                          (choose-max m (rest ot)))))]\n    (choose-max largest more)))", "user": "544f732fe4b0e39780006994"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "54b567eee4b05787c3b163a2"}, {"problem": 38, "code": "(comp last sort vector)", "user": "545bd22fe4b01be26fd7465a"}, {"problem": 38, "code": "(fn [& params] (last (sort params)))", "user": "54b2d392e4b09f271ff37d2f"}, {"problem": 38, "code": "(fn f[& l] \n  (loop [ t (rest l)\n          h (first l) ]\n    (if (empty? t)\n      h\n      (recur \n       (rest t)\n       (if (> h (first t))\n         h\n         (first t))))))", "user": "54b45938e4b05787c3b1638f"}, {"problem": 38, "code": "(fn \n [& args]\n  (reduce\n    (fn [acc val]\n      (if (> val acc)\n        val\n        acc))\n    0 args))", "user": "54b187bee4b09f271ff37d21"}, {"problem": 38, "code": "(fn mymax [& x]\n  (let [cur (first x)]\n  (if (= 1 (count x))\n    cur\n    (let [best (apply mymax (rest x))]\n    (if (> cur best) cur best)\n    )\n)\n))", "user": "54b050cee4b09f271ff37d13"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) args))", "user": "54b04708e4b09f271ff37d11"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (> %1 %2) %1 %2) x xs))", "user": "54b402dce4b05787c3b16388"}, {"problem": 38, "code": "#(last (sort %&))", "user": "54ae6da2e4b09f271ff37cf2"}, {"problem": 38, "code": "(fn [& items]\n  (-> (seq items)\n      (sort)\n      (last)))", "user": "54ab951be4b09f271ff37ccc"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "54b2ec84e4b09f271ff37d33"}, {"problem": 38, "code": "(fn [a & nums] (reduce #(if (> %2 %1) %2 %1) a nums))", "user": "546692aee4b01be26fd746e7"}, {"problem": 38, "code": "(fn [& v] (reduce (fn [a b]\n                     (if (> a b) a b)) v))", "user": "54b67463e4b05787c3b163bc"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "54b8fea9e4b0ed20f4ff6e9c"}, {"problem": 38, "code": "(fn [& x]\n  (last (sort x)))", "user": "546ff701e4b00cfc9eacc1b3"}, {"problem": 38, "code": "(fn [x & rest] \n  (reduce #(if (>= %1 %2) %1 %2)\n   x rest))", "user": "51e8ee6be4b07cae92c04bfd"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %2 %) %2 %) xs))", "user": "54acf5c7e4b09f271ff37cdd"}, {"problem": 38, "code": "(fn  [& vals]\n  (reduce (fn [biggest, n]\n            (if (> n biggest)\n                n\n                biggest))\n    vals))", "user": "548db64ce4b0e286459a121c"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "54b972bbe4b0ed20f4ff6ead"}, {"problem": 38, "code": "(fn [& args]\n  (reduce\n   (fn [x y] (if (> x y) x y))\n   args))", "user": "54b9ed93e4b0ed20f4ff6eb3"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "525b142fe4b0cb4875a45d05"}, {"problem": 38, "code": "(fn [& s]\n  (reduce #(if(< %1 %2) %2 %1) s )\n)", "user": "54bb0f63e4b0ed20f4ff6ebc"}, {"problem": 38, "code": "(fn [& more] (reduce #(if (> %2 %1) %2 %1) more))", "user": "54bad522e4b0ed20f4ff6eb8"}, {"problem": 38, "code": "(fn [& args] \n  (reduce \n    (fn [a b] \n      (if (> a b) \n        a \n        b))\n    args))", "user": "54b6c24be4b0ed20f4ff6e7c"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "54bbe505e4b0ed20f4ff6ec5"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (< a b) b a)) args))", "user": "54ac5ad7e4b09f271ff37cd6"}, {"problem": 38, "code": "(fn [& s] (reduce (fn [a b] (if (> a b) a b)) s))", "user": "54bd04e7e4b0ed20f4ff6ed8"}, {"problem": 38, "code": "(fn foo [& args]\n  (reduce (fn [x i]\n           (if (> i x)\n             i\n             x)) \n          (seq args)))", "user": "54653e3be4b01be26fd746da"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "546a6fd8e4b00cfc9eacc158"}, {"problem": 38, "code": "(fn mymax\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n   (reduce mymax (mymax x y) more)))", "user": "54b2e881e4b09f271ff37d32"}, {"problem": 38, "code": "(fn [& numbers]\n  (loop [maximum 0,\n         numbers numbers]\n    (if (empty? numbers)\n      maximum\n      (recur\n       (if (> maximum (first numbers)) maximum (first numbers))\n       (next numbers)))))", "user": "54bd91d7e4b0ed20f4ff6ee2"}, {"problem": 38, "code": "(fn [& args]\n  (reduce \n    (fn [best curr] (if (> curr best) curr best))\n    0\n    args))", "user": "54bc6c75e4b0ed20f4ff6ed0"}, {"problem": 38, "code": "(let\n  [\n   maximum (fn [x y] (if (> x y) x y))\n   helper (fn this\n            [currMax remainingValues]\n            (do (println \"CurrMax:\" currMax \"Remain:\" remainingValues)(if (empty? remainingValues) currMax\n              (this (maximum currMax (first remainingValues)) (rest remainingValues)))))\n  ]\n  (fn [x & more] (helper x more))\n )", "user": "54ba8206e4b0ed20f4ff6eb6"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %2 %1) %2 %1) x))", "user": "54bc575ce4b0ed20f4ff6ecb"}, {"problem": 38, "code": "(fn [& xs] (last (sort xs)))", "user": "54b8dfece4b0ed20f4ff6e9a"}, {"problem": 38, "code": "(fn[& l]\n  (first (apply sorted-set-by > l))\n  )", "user": "54b90836e4b0ed20f4ff6e9d"}, {"problem": 38, "code": "(fn [& args] \n   (last (sort args)))", "user": "54bbba99e4b0ed20f4ff6ec2"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (> %1 %2) %1 %2) x xs)\n  )", "user": "54bc75a0e4b0ed20f4ff6ed1"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (< a b) b a)) 0 args))", "user": "54b40fe6e4b05787c3b1638a"}, {"problem": 38, "code": "(fn [& c] (reduce #(if (> %2 %1) %2 %1) c))", "user": "54bc69a7e4b0ed20f4ff6ecf"}, {"problem": 38, "code": "(fn my-max [a & args]\n  (reduce #(if (> %1 %2) %1 %2) a args))", "user": "52d74c2de4b09f7907dd1373"}, {"problem": 38, "code": "(fn [& a] (last (sort a)))", "user": "54bec835e4b0ed20f4ff6ef7"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "54be7772e4b0ed20f4ff6eea"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "user": "5462c5abe4b01be26fd746b5"}, {"problem": 38, "code": "(fn my-max\n  ([x y]\n   (if (> x y) x y))  \n  ([x y & more]\n   (reduce my-max (my-max x y) more)))", "user": "54bd3aefe4b0ed20f4ff6edb"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (> %2 %1) %2 %1) (cons x xs)))", "user": "54bcd12be4b0ed20f4ff6ed7"}, {"problem": 38, "code": "(fn maxit\n  ([x] x)\n  ([x y] (if (< x y) y x))\n  ([x y & more] (apply maxit (cons (maxit x y) more))))", "user": "54bf99c8e4b0ed20f4ff6f05"}, {"problem": 38, "code": "(fn maxi\n  ([a b]\n   (if (> a b) a b))\n  ([a b & tail]\n   (apply maxi (cons (maxi a b) tail))))", "user": "54b10d08e4b09f271ff37d18"}, {"problem": 38, "code": "(fn [& nums] (first (sort > nums)))", "user": "540705f0e4b0addc1aec66b1"}, {"problem": 38, "code": "(fn [& l]\n  (reduce (fn [a b] \n            (if (> a b) a b))\n            l))", "user": "54b95f3de4b0ed20f4ff6eab"}, {"problem": 38, "code": "(fn mymax ([x] x) ([x, y]  (if (> x y) x y)) ([x y & more] (reduce mymax (mymax x y) more)))", "user": "54b331dbe4b09f271ff37d37"}, {"problem": 38, "code": "(fn [fst & rst]  ;; rst is a sequence\n\n  (if (nil? rst)\n    fst\n    (let [mx fst lst rst]\n      (if (empty? lst)\n        mx\n        (if (> (first lst) mx)\n          (recur (first lst) (rest lst))\n          (recur mx (rest lst)))))))", "user": "54bebeb9e4b0ed20f4ff6ef4"}, {"problem": 38, "code": "(fn [x & xs] (if (nil? xs)\n\t\t\t\t  x\n\t\t\t\t  (let [[y & rest] xs]\n\t\t\t\t    (if (> x y)\n\t\t\t\t      (recur x rest)\n\t\t\t\t      (recur y rest)))))", "user": "54bff194e4b0ed20f4ff6f0d"}, {"problem": 38, "code": "(fn [& seq] (\n           reduce\n           (fn [x y] (if (> x y) x y))\n           seq))", "user": "54be7c0de4b0ed20f4ff6eec"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "user": "54bfc88ae4b0ed20f4ff6f09"}, {"problem": 38, "code": "(fn [m & r] (reduce #(if (< %1 %2) %2 %1) m r))", "user": "54a73c1fe4b09f271ff37c96"}, {"problem": 38, "code": "(fn maxy [& items] (\n  last (sort items)           \n))", "user": "54c0ce91e4b0ed20f4ff6f18"}, {"problem": 38, "code": "(fn foo [& p] (-> p (sort) (last)))", "user": "53d7710be4b0e771c3025462"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (< %1 %2) %2 %1) args))", "user": "53838b9ee4b06839e8705ee1"}, {"problem": 38, "code": "#(last (sort %&))", "user": "54aa665fe4b09f271ff37cb8"}, {"problem": 38, "code": "(comp (fn [coll] (reduce (fn [x y] (if (> x y) x y)) 0 coll)) list)", "user": "54c19050e4b0ed20f4ff6f26"}, {"problem": 38, "code": "(fn [& ary]\n    (loop [args (rest ary) largest (first ary)]\n        (if (empty? args)\n            largest\n            (if (> largest (first args))\n                (recur (rest args) largest)\n                (recur (rest args) (first args))))))", "user": "54a8fdcee4b09f271ff37ca9"}, {"problem": 38, "code": "(fn [& r] (last (sort r)))", "user": "54bc539be4b0ed20f4ff6eca"}, {"problem": 38, "code": "(fn [arg & args] (reduce (fn [x y] (if (> x y) x y)) arg args))", "user": "504dfc75e4b078edc5f59387"}, {"problem": 38, "code": "#(first (reverse(sort %&)))", "user": "54c219cbe4b045293a27f5f9"}, {"problem": 38, "code": "(comp first (partial sort >) list)", "user": "54c23252e4b045293a27f5fc"}, {"problem": 38, "code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) more))", "user": "548018e3e4b0c51c1f4d7330"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "54c165e9e4b0ed20f4ff6f23"}, {"problem": 38, "code": "(fn [& lst] \n  ((fn [m [x & rest]] \n    (let [mx (if (> m x) m x)]\n\t    (if (empty? rest) mx (recur mx rest))))\n    -1000 lst)\n  )", "user": "54c169ade4b0ed20f4ff6f24"}, {"problem": 38, "code": "(fn mymax [& a] (first (reverse(sort a))))", "user": "5474d1f4e4b0c51c1f4d728c"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "4e435681535dc968683fc4a1"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "54c31f1be4b045293a27f609"}, {"problem": 38, "code": "(fn [& rest] (last (sort rest)))", "user": "54c11fdae4b0ed20f4ff6f1b"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %2 %) % %2) args))", "user": "5474666ae4b0c51c1f4d7288"}, {"problem": 38, "code": "(fn [f & r]\n  (letfn [(! [m & r]\n             (if (nil? r) m\n               (let [f (first r)]\n                 (apply ! (if (> f m) f m) (rest r))\n  \t\t\t\t)\n               )\n             )]\n    (apply ! Integer/MIN_VALUE f r)))", "user": "54c271b9e4b045293a27f602"}, {"problem": 38, "code": "(fn [& col]\n  (loop [numbers col max-num 0]\n    (if (empty? numbers)\n      max-num\n      (let [first-num (first numbers) rest-numbers (rest numbers)]\n        (if (> first-num max-num)\n          (recur rest-numbers first-num)\n          (recur rest-numbers max-num))))))", "user": "54c02ee8e4b0ed20f4ff6f10"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "53a69398e4b0ef122a8689ca"}, {"problem": 38, "code": "(fn [& xs] (last (sort xs)))", "user": "54c5cc17e4b045293a27f624"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> % %2) % %2) args))", "user": "5339b53fe4b0e30313ee6cac"}, {"problem": 38, "code": "(fn [& v] (reduce #(if (> %1 %2) %1  %2) v))", "user": "5406eaf3e4b0addc1aec66ad"}, {"problem": 38, "code": "(fn [& x] (reduce (fn [a b] (cond (> a b) a :else b)) x))", "user": "54c7a25ae4b045293a27f63c"}, {"problem": 38, "code": "#(loop [col %& res []]\n     (if (empty? col)\n       (first res)\n       (recur (rest col)\n              (if-not (empty? res)\n                (if (> (first col) (first res))\n                  [(first col)]\n                  res)\n                [(first col)])\n              )\n       )\n   )", "user": "53e73fe3e4b036ad0777e478"}, {"problem": 38, "code": "(fn my-max [& args]\n  (let [take-largest (fn [x y] (if (< x y) y x))]\n    (reduce take-largest args)\n  )\n)", "user": "54c82b27e4b045293a27f645"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) args))", "user": "54c8d4a8e4b045293a27f654"}, {"problem": 38, "code": "(fn [& args] \n  (first (reverse (sort (seq args)))))", "user": "53bc10f5e4b047364c04450d"}, {"problem": 38, "code": "(fn [& nums] (reduce (fn [a b] (if (> a b) a b)) nums))", "user": "54b912b3e4b0ed20f4ff6ea1"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "54be3ab6e4b0ed20f4ff6ee7"}, {"problem": 38, "code": "(fn [first & rest]\n  (reduce #(if (> %1 %2) %1 %2) first rest))", "user": "54ab1b5ae4b09f271ff37cc2"}, {"problem": 38, "code": "(fn [head & rest](first(reverse(sort(cons head rest)))))", "user": "5480cce5e4b0e286459a115f"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "54c97cb3e4b045293a27f677"}, {"problem": 38, "code": "(fn [x & [a b c]] (condp = x\n            1 8\n            30 30\n            45 67))", "user": "50d0d2dde4b00b15ecee9768"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "4f8be895e4b02e764a0a5184"}, {"problem": 38, "code": "(fn newmax\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & args] (reduce newmax (if (> x y) x y) args)))", "user": "533c5249e4b0e30313ee6cdd"}, {"problem": 38, "code": "(fn [& input] (reduce (fn [maxval x] (if (> x maxval) x maxval)) input))", "user": "54c9636fe4b045293a27f66e"}, {"problem": 38, "code": "#(last (sort %&))", "user": "54b7f217e4b0ed20f4ff6e8f"}, {"problem": 38, "code": "#(last (sort %&))", "user": "50406519e4b0ff5d2cc40db2"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "54c13b87e4b0ed20f4ff6f20"}, {"problem": 38, "code": "(fn [& args]\n  (reduce \n   (fn [a b]\n     (if (>= a b) a\n       b)) args))", "user": "5447e5b7e4b032a45b8693c4"}, {"problem": 38, "code": "(fn [& args]\n  (reduce\n   #(if (> %2 %1) %2 %1)\n   args))", "user": "54cb378be4b057c6fda3a273"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "54c05fd7e4b0ed20f4ff6f12"}, {"problem": 38, "code": "(fn m [& li]\n  (reduce #(if (> %1 %2) %1 %2) li)\n)", "user": "54c9f165e4b045293a27f687"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "54be792ee4b0ed20f4ff6eeb"}, {"problem": 38, "code": "(fn mymax [n & rn]\n  (if (empty? rn) \n    n\n    (let [maxofrest (apply mymax rn) ]\n      (if (> n maxofrest)\n        n\n        maxofrest\n        )\n      )\n    )\n  )", "user": "54cb3497e4b057c6fda3a272"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "4e70eae1535d5021c1a89642"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "54c641f8e4b045293a27f628"}, {"problem": 38, "code": "(fn [& arr] (reduce #(if (> %1 %2) %1 %2) arr))", "user": "54cbe00ee4b057c6fda3a285"}, {"problem": 38, "code": "(fn max' [& xs]\n  (reduce #(if (< %1 %2) %2 %1) xs))", "user": "54ca9ca8e4b057c6fda3a265"}, {"problem": 38, "code": "(fn [& args] (-> args sort last))", "user": "54ccf107e4b057c6fda3a294"}, {"problem": 38, "code": "(fn [& coll]\n  (reduce #(if (> %1 %2) %1 %2) coll))", "user": "54cc4156e4b057c6fda3a28c"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "54c97a56e4b045293a27f676"}, {"problem": 38, "code": "(fn mval [x & xs]\n  (reduce #(if (> %2 %) %2 %) (cons x xs)))", "user": "54cbb0fde4b057c6fda3a27b"}, {"problem": 38, "code": "(fn [& coll] (reduce #(if (> %2 %1) %2 %1) coll))", "user": "54cd651be4b057c6fda3a2a2"}, {"problem": 38, "code": "#(reduce (fn [x y] (if (> x y) x y)) %&)", "user": "4fc4eb1ee4b081705acca354"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort < args)))", "user": "53f11139e4b0742d9025b0d8"}, {"problem": 38, "code": "(fn f [& nums]\n  (let [car (first nums) cdr (rest nums)]\n    (if (empty? cdr)\n      car\n      (let [ret (apply f cdr)]\n        (if (> car ret) car ret)))))", "user": "54c8ac49e4b045293a27f64e"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "user": "52c8a814e4b0c2d177d62138"}, {"problem": 38, "code": "(fn f[& l] (reduce #(if (> %1 %2) %1 %2) l))", "user": "54ce3790e4b057c6fda3a2ab"}, {"problem": 38, "code": "(fn max' [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "54d03026e4b018d918be98de"}, {"problem": 38, "code": "#(reduce (fn [m x] (if (< m x) x m)) %&)", "user": "545ddac3e4b01be26fd74676"}, {"problem": 38, "code": "(fn [& args] (-> args sort last))", "user": "54ca658fe4b057c6fda3a25a"}, {"problem": 38, "code": "(fn [& f] (reduce #(if (>% %2) % %2) f))", "user": "54d0e6c5e4b0e8a36923e5d4"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) 0 args))", "user": "53ac815de4b047364c04445e"}, {"problem": 38, "code": "(fn my-max [& more] (reduce #(if (> %1 %2) %1 %2) more))", "user": "54c6619ae4b045293a27f62b"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "54d0f654e4b0e8a36923e5d6"}, {"problem": 38, "code": "(fn [val & rest]\n  (reduce #(if (< %1 %2) %2 %1) val rest))", "user": "54aec099e4b09f271ff37cf5"}, {"problem": 38, "code": "(fn my-max [x & xs]\n  (reduce (fn [m y] (if (> y m) y m)) x xs))", "user": "54b07c1ee4b09f271ff37d16"}, {"problem": 38, "code": "(fn my-max\n  ([x] x)\n  ([x & more]\n   (if (> x (first more))\n     (apply my-max (cons x (rest more)))\n     (apply my-max more))))", "user": "54d000c7e4b018d918be98d7"}, {"problem": 38, "code": "#(first (sort-by - %&))", "user": "54d0afb6e4b0e8a36923e5cd"}, {"problem": 38, "code": "(fn\n  [candidate & hopper]\n  (loop [greatest candidate\n         contenders hopper]\n    (if (empty? contenders)\n      greatest\n      (if (> (first contenders) greatest)\n      (recur (first contenders) (rest contenders))\n      (recur greatest (rest contenders))\n      )\n    \n     \n   )\n  )\n )", "user": "54d0f744e4b0e8a36923e5d7"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "user": "54d1cf2ee4b0e8a36923e5eb"}, {"problem": 38, "code": "#(last (sort %&))", "user": "54962cf0e4b0b312c081ff64"}, {"problem": 38, "code": "(fn [& x] (first (sort > x)))", "user": "54d2b411e4b0e8a36923e5f9"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "54cad2d5e4b057c6fda3a26c"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "54d100abe4b0e8a36923e5d8"}, {"problem": 38, "code": "(fn [& nums]\n     ((fn mymx [vals]\n        (cond\n          (= 1 (count vals)) (first vals)\n          (<= (first vals) (second vals)) (mymx(rest vals))\n          :else (mymx (conj (drop 2 vals) (first vals))))\n        ) nums) \n   )", "user": "54cf1932e4b018d918be98c9"}, {"problem": 38, "code": "#(last (sort %&))", "user": "54caaa48e4b057c6fda3a267"}, {"problem": 38, "code": "(fn [& args]\n   ((fn help [l m]\n     (if (empty? l)\n       m\n       (if (> (first l) m)\n         (help (rest l) (first l))\n         (help (rest l) m))))\n    (rest args)\n    (first args)))", "user": "54d26316e4b0e8a36923e5f2"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args)\n)", "user": "54d35746e4b0e8a36923e606"}, {"problem": 38, "code": "(fn\n  [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "54d267e0e4b0e8a36923e5f3"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "54d2892fe4b0e8a36923e5f7"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "user": "54d251aee4b0e8a36923e5f1"}, {"problem": 38, "code": "#(last(sort %&))", "user": "54c8eb61e4b045293a27f658"}, {"problem": 38, "code": "#(first (sort > %&))", "user": "54d4ec31e4b0a52adc2e2007"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "54d529cbe4b0a52adc2e2009"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) 0 rest))", "user": "54b5ce67e4b05787c3b163ac"}, {"problem": 38, "code": "(comp last #(sort %&))", "user": "54d341f7e4b0e8a36923e603"}, {"problem": 38, "code": "(fn [& args] (-> args (sort) (reverse) (first)))", "user": "54d492dbe4b0a52adc2e2001"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) 0 x))", "user": "54d6c80ce4b0a52adc2e2020"}, {"problem": 38, "code": "(fn [& ns]\n  (reduce #(if (> %2 %1) %2 %1) ns))", "user": "54cc26c1e4b057c6fda3a28a"}, {"problem": 38, "code": "(fn [& l] (reduce #(if (> %1 %2) %1 %2 ) l) )", "user": "54d6f22de4b0a52adc2e2023"}, {"problem": 38, "code": "#(last (sort %&))", "user": "4ee7d6d8535d93acb0a66870"}, {"problem": 38, "code": "(fn [& more] \n  (loop [maxi (first more) \n         curr (rest more)] \n    (if (empty? curr) \n      maxi\n      (if (> (first curr) maxi) \n        (recur (first curr) (rest curr)) \n        (recur maxi (rest curr))))))", "user": "541d3c0fe4b01498b1a71a7e"}, {"problem": 38, "code": "(fn foo\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] (reduce foo (foo x y) more)))", "user": "54d753ebe4b0a52adc2e2029"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "52f2ecdde4b05e3f0be25f03"}, {"problem": 38, "code": "(fn max' [& xs]\n  (if (empty? (rest xs)) (first xs)\n    (let [head (first xs), tail (apply max' (rest xs))]\n      (println head tail)\n      (if (> head tail) head tail))))", "user": "54d7ed8de4b0a52adc2e2034"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "54725331e4b094393f72dd76"}, {"problem": 38, "code": "(fn [ & x] (reduce #(if (< %1 %2) %2 %1) x))", "user": "54d70f40e4b0a52adc2e2027"}, {"problem": 38, "code": "(comp last sort list)", "user": "54d352f6e4b0e8a36923e604"}, {"problem": 38, "code": "(fn [& args] (-> args sort last))", "user": "54d412e2e4b0a52adc2e1ffe"}, {"problem": 38, "code": "#(first (sort > %&))", "user": "54cc313de4b057c6fda3a28b"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "54b83ae9e4b0ed20f4ff6e95"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "5273bae1e4b03e8d9a4a7490"}, {"problem": 38, "code": "(fn [& numbers]\n  (reduce #(if (< %1 %2)\n             %2 %1)\n          numbers))", "user": "53f31dafe4b0742d9025b0f0"}, {"problem": 38, "code": "(fn [& xs] \n  (reduce #(if (> %1 %2) %1 %2) xs))", "user": "54ba9ee8e4b0ed20f4ff6eb7"}, {"problem": 38, "code": "(fn  ([& rest] (reduce #(if (> %1 %2 ) %1 %2) rest)))", "user": "54d8cc38e4b0a52adc2e203e"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "54d15e4ae4b0e8a36923e5e2"}, {"problem": 38, "code": "(fn[& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "4ec66e84535d6d7199dd36cd"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> % %2) % %2) args))", "user": "54c54d7ce4b045293a27f622"}, {"problem": 38, "code": "(fn [& rest] \n  (reduce \n   (fn [result current] \n     (if (> result current) \n       result \n       current)) \n   0 \n   rest))", "user": "54c8ac2ee4b045293a27f64d"}, {"problem": 38, "code": "(fn [& more] (last (sort more)))", "user": "54dc0e1ae4b024c67c0cf77a"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "54af490be4b09f271ff37d05"}, {"problem": 38, "code": "(fn m [& a] (reduce #(if (< % %2) %2 %) a))", "user": "54dbcbbde4b024c67c0cf774"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %2 %1) %2 %1) 0 xs))", "user": "54d4b3a7e4b0a52adc2e2003"}, {"problem": 38, "code": "(fn [& numbers]\n  (loop [res -1 items numbers]\n    (if (empty? items)\n      res\n      (recur (if (> (first items) res)\n               (first items)\n               res)\n             (rest items)))))", "user": "54db1911e4b024c67c0cf75b"}, {"problem": 38, "code": "(fn my-max\n  ([a] a)\n  ([a b] \n   (if (> a b) \n     a \n     b))\n  ([a b & the-rest] \n   (if (empty? the-rest)\n     (my-max a b)\n     (recur (my-max a b) \n            (first the-rest) \n            (rest the-rest)))))", "user": "5422c959e4b01498b1a71ac7"}, {"problem": 38, "code": "(fn [& nums] (last (sort nums)))", "user": "54d6c3dbe4b0a52adc2e201f"}, {"problem": 38, "code": "(fn [& args]\n  (loop [winner (first args)\n         args (rest args)]\n    (if (empty? args)\n      winner\n      (recur (if (> winner (first args)) winner (first args)) (rest args)))))", "user": "54489c2ae4b032a45b8693cd"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "54db8ddae4b024c67c0cf767"}, {"problem": 38, "code": "(fn [& all] (first (reverse (sort all))))", "user": "54dbe183e4b024c67c0cf778"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "54dd76c8e4b024c67c0cf794"}, {"problem": 38, "code": "#(first (sort > (vec %&)))", "user": "53ba41c2e4b047364c0444f3"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "user": "54ddb556e4b024c67c0cf798"}, {"problem": 38, "code": "#(last (sort %&))", "user": "54d4ba98e4b0a52adc2e2004"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [x y] (if (< x y) y x)) 0 xs))", "user": "54cb5625e4b057c6fda3a275"}, {"problem": 38, "code": "(fn [& x]\n  (reduce #(if (> %1 %2) %1 %2) 0 x))", "user": "54df2274e4b024c67c0cf7a8"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "54d5fbe9e4b0a52adc2e2014"}, {"problem": 38, "code": "(fn [& r] (last (sort r)))", "user": "54db33f1e4b024c67c0cf75d"}, {"problem": 38, "code": "(fn [& coll] (reduce (fn [n m] (if (> n m) n m)) coll))", "user": "54df3c94e4b024c67c0cf7aa"}, {"problem": 38, "code": "(comp last sorted-set)", "user": "54df2609e4b024c67c0cf7a9"}, {"problem": 38, "code": "(fn [& x]\n  (last (sort x )))", "user": "5412b531e4b01498b1a719d7"}, {"problem": 38, "code": "(fn\n  [& args]\n  (reduce\n    (fn [acc curr]\n      (if (> acc curr)\n        acc\n        curr))\n    args))", "user": "54e04d95e4b024c67c0cf7b4"}, {"problem": 38, "code": "(fn [& l] (last (sort l)))", "user": "549a1fede4b0f3d1d8e70f6a"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "54dae16de4b024c67c0cf758"}, {"problem": 38, "code": "(fn\n  [& args]\n  (last (sort args)))", "user": "54c72b19e4b045293a27f636"}, {"problem": 38, "code": "(fn mymax [& lst]\n  (letfn [(maxhlp [lat max1]\n            (cond\n              (empty? lat) max1\n              (> (first lat) max1) (maxhlp (rest lat) (first lat))\n              :else (maxhlp (rest lat) max1)))]\n    (maxhlp lst (first lst))))", "user": "534f8c9ae4b084c2834f4acd"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (> %1 %2) %1 %2) x xs))", "user": "54c75305e4b045293a27f638"}, {"problem": 38, "code": "(fn [& xs]\n  (first (sort > xs)))", "user": "5382b433e4b06839e8705ed7"}, {"problem": 38, "code": "(fn max-in-seq \n  [& numbers]\n  (reduce #(if (> %1 %2) %1 %2) numbers)\n)", "user": "547b4ec6e4b0c51c1f4d72d5"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [a b]\n          (if (>= a b)\n            a\n            b)) 0 args))", "user": "54d0ceb2e4b0e8a36923e5d0"}, {"problem": 38, "code": "#(last (sort %&))", "user": "54d70bbfe4b0a52adc2e2026"}, {"problem": 38, "code": "(fn [x & rest] (reduce (fn [m x] (if (> x m) x m)) x rest))", "user": "54e2a5f7e4b024c67c0cf7d1"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [a b] (if (> a b) a b)) args))", "user": "54d87b54e4b0a52adc2e2038"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "54e3e09fe4b024c67c0cf7e4"}, {"problem": 38, "code": "#(reduce (fn [m i] (if (> i m) i m)) %&)", "user": "54e3df6ae4b024c67c0cf7e3"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "53ecaf1ce4b0d648e757f4b4"}, {"problem": 38, "code": "(fn [& rest] (first (sort > rest)))", "user": "54de6820e4b024c67c0cf79f"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "54d104a5e4b0e8a36923e5d9"}, {"problem": 38, "code": "(fn my-max ([x] x) ([x & y] (if (> x (apply my-max y)) x (apply my-max y) )))", "user": "528b3f5ae4b0239c8a67ae93"}, {"problem": 38, "code": "(fn [& yolo] (last (sort (apply list yolo))))", "user": "54e10605e4b024c67c0cf7bf"}, {"problem": 38, "code": "(fn [x & args] (reduce #(if (> %1 %2) %1 %2) x args))", "user": "54d2c4c5e4b0e8a36923e5fa"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce (fn [acc x] (if (> x acc) x acc) ) 0 (concat [x] xs)\n          ))", "user": "54e51c7be4b024c67c0cf7f7"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "54d4ddd2e4b0a52adc2e2006"}, {"problem": 38, "code": "(fn f [& l] (last (sort l)))", "user": "5164c2e5e4b003cf19fdde41"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [acc x] (if (> acc x) acc x)) args))", "user": "54e79094e4b024c67c0cf818"}, {"problem": 38, "code": "(fn [& args]\n    (loop [max-so-far (first args) values args]\n        (let [current (first values)]\n            (if (empty? values)\n                max-so-far\n                (if (> current max-so-far)\n                    (recur current (rest values))\n                    (recur max-so-far (rest values)))))))", "user": "54e4a1dce4b024c67c0cf7e8"}, {"problem": 38, "code": "(fn mx [& nums]\n  (if (empty? nums)\n    0\n    (let\n     [rmx (apply mx (rest nums))\n      f (first nums)]\n     (if (> f rmx)\n       f\n       rmx))))", "user": "54c9e00be4b045293a27f683"}, {"problem": 38, "code": "(fn [& remaining]\n    (reduce #(if (> %1 %2) %1 %2) remaining))", "user": "54ca130ce4b057c6fda3a250"}, {"problem": 38, "code": "(fn [& args] (last (sort args\n                         )))", "user": "54e606c3e4b024c67c0cf803"}, {"problem": 38, "code": "(fn [& s] (last (sort s)))", "user": "54da46e5e4b024c67c0cf753"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> % %2) % %2) args))", "user": "54e3bd3fe4b024c67c0cf7e0"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [m x] (if (> x m) x m)) 0 xs))", "user": "54e85a7fe4b024c67c0cf823"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "54e2a779e4b024c67c0cf7d3"}, {"problem": 38, "code": "(fn m[& v] (reduce #(if (> % %2) % %2) v))", "user": "54e32090e4b024c67c0cf7d9"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "user": "54df955ee4b024c67c0cf7af"}, {"problem": 38, "code": "#(last (sort %&))", "user": "54e956d9e4b024c67c0cf831"}, {"problem": 38, "code": "#(reduce (fn [x y]\n  (if (> x y) x y)) %&)", "user": "54cbc9ede4b057c6fda3a27f"}, {"problem": 38, "code": "(fn [head & tail]\n  (reduce #(if (> %1 %2) %1 %2) head tail)\n)", "user": "54e5bdf2e4b024c67c0cf7fe"}, {"problem": 38, "code": "#(reduce (fn [m n] (if (< m n) n m)) %&)", "user": "4fc45c07e4b081705acca349"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "52fc181ce4b047fd55837013"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [x y]\n            (if (> x y) x y)\n            ) args)\n  )", "user": "4f7b1c63e4b06e829148e19e"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "5277b732e4b03e8d9a4a750c"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "4ee177dc535d10e5ff6f5359"}, {"problem": 38, "code": "(fn mx ([x] x)\n    ([x y] (if (> x y) x y))\n  ([x y & more] (apply mx (mx x y) more)))", "user": "54e345a1e4b024c67c0cf7db"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "54cbde61e4b057c6fda3a284"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (> % %2) % %2) x xs))", "user": "54eb22a0e4b024c67c0cf845"}, {"problem": 38, "code": "(fn [& elems] \n  (last (sort elems)))", "user": "54a96a15e4b09f271ff37cad"}, {"problem": 38, "code": "#(last (sort %&))", "user": "54ec7f52e4b024c67c0cf853"}, {"problem": 38, "code": "(fn [& more]\n  (reduce\n    (fn\n      [x y]\n      (if (< x y) y x)\n      )\n    more\n    )\n  )", "user": "5329a980e4b09d4e7a9b5513"}, {"problem": 38, "code": "(fn[& x](last (sort x)))", "user": "54ecd7dde4b024c67c0cf85c"}, {"problem": 38, "code": "(fn [& args] (last (sort (into [] args))))", "user": "54eca495e4b024c67c0cf855"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "518ba795e4b0f028e99addf0"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "52fa9435e4b047fd55836ffc"}, {"problem": 38, "code": "(fn [& v]\n  (reduce \n   (fn [x y] \n     (if (> x y)\n       x\n       y)\n     )\n   v)\n  )", "user": "54dbfc4ae4b024c67c0cf779"}, {"problem": 38, "code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) (first s) (rest s)))", "user": "54ed7293e4b024c67c0cf863"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "54ecc3e9e4b024c67c0cf857"}, {"problem": 38, "code": "(fn [& args]\n  (first (sort > args)))", "user": "54ecd716e4b024c67c0cf85a"}, {"problem": 38, "code": "(fn [& l] (reduce #(if (> %1 %2) %1 %2 ) (first l) l))", "user": "54edcf96e4b024c67c0cf866"}, {"problem": 38, "code": "(fn [& rest]\n  (reduce (fn [acc x] (if (> x acc) x acc)) rest))", "user": "54ef4a1de4b024c67c0cf882"}, {"problem": 38, "code": "(fn [& vals] (reduce (fn [sofar val] (if (> val sofar) val sofar)) vals))", "user": "54ef4a1ee4b024c67c0cf883"}, {"problem": 38, "code": ";;(fn [& vals] (reduce #(if (> %1 %2) %1 %2) vals))\n;;(fn [& vals] ((comp last sort) vals))\n;;#((comp last sort) %&)\n;;#(last (sort %&))\n#(first (sort > %&))", "user": "54f0a1f2e4b024c67c0cf8a0"}, {"problem": 38, "code": "#(last (sort %&))", "user": "53d9e587e4b0e771c302547c"}, {"problem": 38, "code": "(fn maxi [& args]\n  (reduce #(if (< %1 %2) %2 %1) args))", "user": "54a6baaee4b09f271ff37c8a"}, {"problem": 38, "code": "(fn [& c] (-> c sort last))", "user": "54df7922e4b024c67c0cf7ad"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "54f0d3fde4b024c67c0cf8a6"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "5293a603e4b0239c8a67af42"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %2 %1) %2 %1) xs))", "user": "52b9e5c2e4b07a9af57922c8"}, {"problem": 38, "code": "(comp last sort vector)", "user": "54f26266e4b024c67c0cf8c5"}, {"problem": 38, "code": "(fn[& args] (last (sort args)))", "user": "54f296efe4b024c67c0cf8c8"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "5227f3ffe4b0186687e23a60"}, {"problem": 38, "code": "(fn [& seq]\n    (last (sort seq)))", "user": "546ff835e4b00cfc9eacc1b4"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [x y] (if (> x y) x y)) 0 xs))", "user": "52a0f9c4e4b04e0c58e87bd0"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "504e2d18e4b0f6ff3350c47a"}, {"problem": 38, "code": "(fn maxv [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) (cons x xs)))", "user": "54f06aede4b024c67c0cf896"}, {"problem": 38, "code": "(fn [x & more] (if-let [y (first more)] (recur (if (> y x) y x) (rest more)) x))", "user": "54f2fe9fe4b050824f58f5b8"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "54f4e286e4b0f2f3c5226e8c"}, {"problem": 38, "code": "(fn [& nums]\n  (loop [acc nums\n         n (first nums)]\n    (if (empty? acc)\n      n\n      (let [cur (first acc)]\n        (if (> cur n)\n          (recur (rest acc) cur)\n          (recur (rest acc) n))))))", "user": "5498e155e4b0b312c081ff86"}, {"problem": 38, "code": "(fn[& args] (reduce (fn[x y] (if(> x y) x y)) args))", "user": "54f15cb8e4b024c67c0cf8b1"}, {"problem": 38, "code": "(fn [& numbers]\n  (- (apply min (map - numbers))))", "user": "54f4ab86e4b0f2f3c5226e84"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x a] (if (> x a) x a)) args))", "user": "54eee3a3e4b024c67c0cf879"}, {"problem": 38, "code": "(fn[& args] (reduce #(if (>= %1 %2) %1 %2 ) args))", "user": "54f4a457e4b0f2f3c5226e83"}, {"problem": 38, "code": "(fn my-max\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & args] (reduce my-max (my-max x y) args)))", "user": "54f64e99e4b0f2f3c5226ea4"}, {"problem": 38, "code": "#(last (sort %&))", "user": "54f2a1b8e4b024c67c0cf8cb"}, {"problem": 38, "code": "(fn get-maximum [& args] ((fn get-max [maxi coll]\n                              (if (seq coll)\n                                (let [first (first coll) rest (rest coll)]\n                                  (if (> first maxi)\n                                    (get-max first rest)\n                                    (get-max maxi rest))) maxi)) (first args) (rest args)))", "user": "54d0cedde4b0e8a36923e5d2"}, {"problem": 38, "code": "(fn [& xs]\n\t(reduce #(if (> %1 %2) %1 %2) xs))", "user": "54c74a78e4b045293a27f637"}, {"problem": 38, "code": "(fn [& vals] (\n             reduce (fn[val1, val2](if (< val1 val2)\n                       val2\n                       val1))\n             \t\tvals\n             )\n  )", "user": "54b598d6e4b05787c3b163a8"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "54f405e0e4b0f2f3c5226e79"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "user": "54f0c067e4b024c67c0cf8a3"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "user": "54d74cffe4b0a52adc2e2028"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "4fc4e9b5e4b081705acca352"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "54f4bb04e4b0f2f3c5226e89"}, {"problem": 38, "code": "(fn greatest\n  ([[x y & more]]\n   (let [bigger (if (> x y) x y)]\n     (if (not more)\n       bigger\n       (recur (conj more bigger)))))\n  ([x & more]\n   (greatest (reduce conj [x] more))))", "user": "54f77213e4b01ecee9d8881d"}, {"problem": 38, "code": "(fn [y & ys]\n  (reduce #(if (< %1 %2) %2 %1) y ys)\n  )", "user": "54f73502e4b01ecee9d88817"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "54f5e826e4b0f2f3c5226e9b"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b) ), args))", "user": "54ca9311e4b057c6fda3a263"}, {"problem": 38, "code": "(fn [& s] (last (sort s)))", "user": "54f0c18ee4b024c67c0cf8a4"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [a b] (if (> a b) a b)) xs))", "user": "4f03e60d535dcb61093f6b7a"}, {"problem": 38, "code": "(fn [& args]\n  (first (sort > args)))", "user": "54e1197fe4b024c67c0cf7c0"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "54e7b512e4b024c67c0cf81c"}, {"problem": 38, "code": "(fn [& z] (reduce #(if (> % %2) % %2) z))", "user": "531c7bdde4b08068f379eda2"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %2 %1) %2 %1) xs))", "user": "54f90537e4b01ecee9d88833"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> y x) y x)) args))", "user": "54f97e22e4b01ecee9d8883a"}, {"problem": 38, "code": "(fn [& args] (first (reverse (sort args))))", "user": "52b666bfe4b0c58976d9ad44"}, {"problem": 38, "code": "(fn [& coll]\n  (reduce #(if (< %1 %2) %2 %1) coll))", "user": "54d9366ce4b0a52adc2e204e"}, {"problem": 38, "code": "(fn [& s] (reduce #(if (< %1 %2) %2 %1) Double/NEGATIVE_INFINITY s))", "user": "54f5fb57e4b0f2f3c5226e9f"}, {"problem": 38, "code": "(fn [& args]\n  (first (sort > args)))", "user": "54f53d3ce4b0f2f3c5226e90"}, {"problem": 38, "code": "#(last (sort %&))", "user": "539c736ce4b0b51d73faaf2b"}, {"problem": 38, "code": "(fn [& xs]\n  (if (empty? xs)\n    nil\n    (loop [x (first xs)\n            others (rest xs)\n            m x]\n      (if (empty? others)\n         (if (> x m)\n             x\n             m)\n      (recur (first others) \n             (rest others) \n             (if (> x m)\n               x\n               m))))))", "user": "54f9920ee4b01ecee9d8883f"}, {"problem": 38, "code": "(fn\n  [& args]\n  (reduce #(if (> %1 %2) %1 %2) (first args) (rest args)))", "user": "54f39cd6e4b050824f58f5c6"}, {"problem": 38, "code": "(fn mymax\n  ([x y] (if (> x y) x y))\n  ([x y & more] (apply mymax (mymax x y) more)))", "user": "54f4adc8e4b0f2f3c5226e86"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "54eff2bee4b024c67c0cf88d"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) (flatten (cons x xs)))\n  )", "user": "544e5ecae4b0e39780006984"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (< % %2) %2 %) xs))", "user": "54fdbe3fe4b07d26eda61d3b"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "54e0a9c3e4b024c67c0cf7b5"}, {"problem": 38, "code": "(fn [& args]\n  (reduce\n    (fn [m n]\n      (if (> n m) n m))\n    \n    args))", "user": "521d064fe4b0c4ef0be830a8"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "54fd93bbe4b07d26eda61d36"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "54f9d900e4b01ecee9d88844"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "54bad977e4b0ed20f4ff6eb9"}, {"problem": 38, "code": "( fn [& z] ( reduce ( fn [x y] ( if (> x y) x y ) ) z ) )", "user": "54ff2968e4b07d26eda61d4a"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "54ff2342e4b07d26eda61d49"}, {"problem": 38, "code": "(fn [& vals] (reduce #(if (> %1 %2) %1 %2) 0 vals))", "user": "54febf4be4b07d26eda61d45"}, {"problem": 38, "code": "(fn[& xs](reduce #(if(> %2 %1)%2 %1)xs))", "user": "54fc7d89e4b07d26eda61d2b"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "54bcab07e4b0ed20f4ff6ed5"}, {"problem": 38, "code": "#(last (sort %&))", "user": "550174b5e4b07d26eda61d73"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2)\n                                %1\n                                %2) args))", "user": "54c3747de4b045293a27f60e"}, {"problem": 38, "code": "(fn [& x] (last (apply sorted-set x)))", "user": "5501e1e0e4b07d26eda61d7c"}, {"problem": 38, "code": "(fn f1 [x & r]\n\t\t(loop [m x remainder r ]\n\t\t\t\t\t(if (empty? remainder)\n\t\t\t\t\tm\n\t\t\t\t\t(let [y (first remainder)]\n\t\t\t\t\t\t\t (recur (#(if (> m y) m y)) (rest remainder))))))", "user": "54ff6084e4b07d26eda61d50"}, {"problem": 38, "code": "(comp last sort vector)", "user": "550111d3e4b07d26eda61d6f"}, {"problem": 38, "code": "(fn [& l] (reduce (fn [a b] (if (> a b) a b)) l))", "user": "550065a4e4b07d26eda61d5a"}, {"problem": 38, "code": "(fn [& sx] (first (sort > sx)))", "user": "53213810e4b09d4e7a9b54b0"}, {"problem": 38, "code": "(fn [& args] (last (sort (seq args))))", "user": "54f6f00fe4b01ecee9d88814"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y)\n          x\n          y)) args))", "user": "546f74dae4b00cfc9eacc1ac"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "54f773bfe4b01ecee9d8881f"}, {"problem": 38, "code": "(fn s [& x] \n  (if (empty? x)\n    -1\n  (let [i (first x) j (apply s (rest x))]\n        (if (> i j)\n          i j)\n   ) \n   )\n)", "user": "55034bf0e4b086ebe8a79c6d"}, {"problem": 38, "code": "(comp (partial reduce #(if (> %1 %2) %1 %2)) vector)", "user": "54f904c2e4b01ecee9d88832"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "user": "54edc818e4b024c67c0cf865"}, {"problem": 38, "code": "(fn [& input] (reduce (fn [x y] (if (> y x) y x)) (seq input)))", "user": "54fc75fce4b07d26eda61d2a"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5504dd64e4b086ebe8a79c83"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "54ff074de4b07d26eda61d47"}, {"problem": 38, "code": "(fn [& args] (last(sort(seq args))))", "user": "54d1b6ffe4b0e8a36923e5e6"}, {"problem": 38, "code": "(fn [& x]\n  (reduce (fn [a b]\n            (if (> a b)\n              a\n              b)) 0 x))", "user": "54b31445e4b09f271ff37d35"}, {"problem": 38, "code": "(fn [& r] (reduce #(if(> % %2) % %2) (seq r)))", "user": "5457e502e4b01be26fd74612"}, {"problem": 38, "code": "(fn [& x] (reduce (fn [a b] (if (> a b) a b)) x))", "user": "5505ceb3e4b086ebe8a79c8b"}, {"problem": 38, "code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) s))", "user": "4fa5c8dde4b081705acca1af"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) args))", "user": "550730ffe4b021ccfedb96a2"}, {"problem": 38, "code": "(fn [& x] (reduce (fn [y z] (if (> y z) y z)) x))", "user": "55058a4fe4b086ebe8a79c89"}, {"problem": 38, "code": "(fn [& aseq]\n  (last (sort (seq aseq))))", "user": "54ba8076e4b0ed20f4ff6eb5"}, {"problem": 38, "code": "#(last(sort %&))", "user": "550609b3e4b021ccfedb9695"}, {"problem": 38, "code": "(fn [x & more] (reduce #(if (> %2 %) %2 %) x more))", "user": "5507cfd3e4b021ccfedb96ad"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) (first args) (rest args)))", "user": "54e84d1ee4b024c67c0cf822"}, {"problem": 38, "code": "(fn maxVal \n  ([x y]\n     (if (> x y) x y))\n  ([x y & more]\n     (reduce maxVal (maxVal x y) more)))", "user": "54eea988e4b024c67c0cf875"}, {"problem": 38, "code": "(fn [& args] (first (sort (comparator >) args)))", "user": "55088bb3e4b06e50f9beb10c"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "54db3d82e4b024c67c0cf75f"}, {"problem": 38, "code": "(fn [& args] (first (sort > args)))", "user": "55096255e4b06e50f9beb116"}, {"problem": 38, "code": "#(reduce (fn [t v] (if (> v t) v t)) %&)", "user": "54e24a05e4b024c67c0cf7ce"}, {"problem": 38, "code": "(fn [fst & rst]\n  (reduce #(if (> %1 %2) %1 %2) fst rst))", "user": "550615c0e4b021ccfedb9696"}, {"problem": 38, "code": "(fn top [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "55084287e4b021ccfedb96b5"}, {"problem": 38, "code": "(fn maxx2 [& nums]\n   (reduce #(if (> % %2) % %2) nums))", "user": "5508102ee4b021ccfedb96b0"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "5509a755e4b06e50f9beb11b"}, {"problem": 38, "code": "(fn [& params] (reduce #(if (> %1 %2) %1 %2) params))", "user": "550aeddae4b06e50f9beb135"}, {"problem": 38, "code": "(fn [& a]\n  (reduce #(if (> %1 %2)\n             %1\n             %2)\n          a))", "user": "550af207e4b06e50f9beb136"}, {"problem": 38, "code": "(fn mx [fst & leftover]\n    (reduce \n        (fn [curmax to-con]\n            (if (> to-con curmax)\n                to-con\n                curmax)) fst leftover))", "user": "54f09599e4b024c67c0cf89d"}, {"problem": 38, "code": "(fn [& vals] (reduce (fn [a, b] (if (> a b) a b)) vals))", "user": "540a4f20e4b0addc1aec66ef"}, {"problem": 38, "code": "(fn [& params] (reduce #(if (> % %2) % %2) params))", "user": "5426200ae4b01498b1a71b16"}, {"problem": 38, "code": "(fn [n & nss]\n  (reduce #(if (< %1 %2) %2 %1) (cons n nss)))", "user": "549674cde4b0b312c081ff66"}, {"problem": 38, "code": "(fn [& params] (reduce #(if (< %2 %1) %1 %2) 0 params ) )", "user": "54fa60dfe4b0cf870d934704"}, {"problem": 38, "code": "(fn[& x] (last (sort x)))", "user": "55016428e4b07d26eda61d72"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "5501de12e4b07d26eda61d7b"}, {"problem": 38, "code": "(fn [& rest] (reduce (fn [x y] (if (>= x y) x y)) 0 rest))", "user": "550ccedfe4b06e50f9beb158"}, {"problem": 38, "code": "(fn [x & other] (reduce #(if (> %1 %2) %1 %2) x other))", "user": "54f5746de4b0f2f3c5226e92"}, {"problem": 38, "code": "(fn [& s] (reduce (fn [x y] (if (> x y) x y)) s) )", "user": "5509a176e4b06e50f9beb119"}, {"problem": 38, "code": "(fn mMax [head & tail] (let [res (filter #(> % head) tail)] (if (= res []) head (apply mMax tail))))", "user": "550e0373e4b06e50f9beb162"}, {"problem": 38, "code": "(fn [& nums] (reduce #(if (> %1 %2) %1 %2) nums))", "user": "550e52dbe4b06e50f9beb165"}, {"problem": 38, "code": "(fn [& coll] (last (sort coll)))", "user": "550d4906e4b06e50f9beb15b"}, {"problem": 38, "code": "(fn [& rest]\n  (reduce (fn [pred item] (if (> item pred) item pred)) rest))", "user": "525599bfe4b0541d1855b9e8"}, {"problem": 38, "code": "(fn find-max [& A]\n  (reduce (fn [agg value] (cond (> value agg) value :else agg)) 0 A)\n)", "user": "550cbb3be4b06e50f9beb155"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [acc, x] (if (> x acc) x acc)) 0 args))", "user": "550da0c7e4b06e50f9beb15e"}, {"problem": 38, "code": "#(reduce (fn [x y]\n           (if (> x y)\n             x\n             y)) %&)", "user": "55101237e4b06e50f9beb181"}, {"problem": 38, "code": "(fn [& xs]\n  (->> xs\n       sort\n       last))", "user": "550c55d0e4b06e50f9beb14d"}, {"problem": 38, "code": "(fn maximum\n  ([] nil)\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] (reduce maximum (maximum x y) more))\n)", "user": "550ec1ffe4b06e50f9beb16a"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "5066003ee4b0313a384e5647"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) (first args) (rest args)))", "user": "54d127b7e4b0e8a36923e5de"}, {"problem": 38, "code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) s))", "user": "550fdc1de4b06e50f9beb17d"}, {"problem": 38, "code": "(fn [& n] (reduce #(if (> %1 %2) %1 %2) 0 n))", "user": "54cbd97ae4b057c6fda3a283"}, {"problem": 38, "code": "(fn [& v] (loop [i 0 curm -999] (if (< i (count v)) (recur (inc i) (if (> (nth v i) curm) (nth v i) curm)) curm)))", "user": "54a01870e4b0f3d1d8e70fb4"}, {"problem": 38, "code": "(fn number38 [& colls]\n  (last (sort colls)))", "user": "54074fc5e4b0addc1aec66b6"}, {"problem": 38, "code": "(fn maximum\n  [& s]\n  (let [maxfunc #(if (empty? %2)\n                   %1\n                   (recur (if (> %1 (first %2)) %1 (first %2)) (rest %2)))]\n    (maxfunc (first s) (rest s))))", "user": "550ff2a3e4b06e50f9beb17f"}, {"problem": 38, "code": "(fn max-val [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) (cons x xs)))", "user": "551086bee4b06e50f9beb187"}, {"problem": 38, "code": "(fn [& args]\n(reduce #(if (> %1 %2) %1 %2) args))", "user": "550e8e04e4b06e50f9beb167"}, {"problem": 38, "code": "(fn max-val [x & xs]\n (reduce #(if (< %1 %2) %2 %1) (flatten (cons x xs))))", "user": "551086b3e4b06e50f9beb186"}, {"problem": 38, "code": "(fn [& params]\n  (last (sort params)))", "user": "55080467e4b021ccfedb96ae"}, {"problem": 38, "code": "(fn [& seq] (reduce #(if (> %1 %2) %1 %2) seq))", "user": "5511fd7ee4b06e50f9beb19e"}, {"problem": 38, "code": "(let [x (fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))] x)", "user": "5510ed89e4b06e50f9beb18e"}, {"problem": 38, "code": "(fn [& r] (last (sort r)))", "user": "5510f734e4b06e50f9beb18f"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> % %2) % %2) args))", "user": "54a634abe4b09f271ff37c84"}, {"problem": 38, "code": "(fn bk-max\n  [& args]\n  (loop [m (first args) r (rest args)]\n    (if (empty? r)\n      m\n      (if (> m (first r))\n        (recur m (rest r))\n        (recur (first r) (rest r))))))", "user": "5426fb8fe4b01498b1a71b1f"}, {"problem": 38, "code": "(fn my-fn\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & rest] (apply my-fn (conj rest (my-fn x y)))))", "user": "5511de35e4b06e50f9beb19b"}, {"problem": 38, "code": "(fn mymax\n  ([x y]\n     (if (> x y) x y))\n  ([x y & more]\n     (reduce mymax (mymax x y) more)))", "user": "54bca097e4b0ed20f4ff6ed4"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "5512b15ae4b055c2f668d4b5"}, {"problem": 38, "code": "(fn [& args]\n  (loop [largest (first args)\n         coll args]\n    (if (= (count coll) 0)\n      largest\n      (let [larger (if (> (first coll) largest)\n                                      (first coll)\n                                      largest)]\n                         (recur larger (rest coll))))))", "user": "5512aca6e4b055c2f668d4b4"}, {"problem": 38, "code": "(fn my-max\n  [& args]\n  (* -1 (apply min (map #(* -1 %) args ))))", "user": "5514534ce4b055c2f668d4d3"}, {"problem": 38, "code": "(fn maxer\n  [& args]\n  (loop [maxed (first args)\n         remainder (rest args)]\n    (if (empty? remainder)\n      maxed\n      (if (> maxed (first remainder))\n        (recur maxed (rest remainder))\n        (recur (first remainder)\n               (rest remainder))))))", "user": "542725fce4b01498b1a71b22"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "5515649fe4b055c2f668d4e3"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "55156efae4b055c2f668d4e5"}, {"problem": 38, "code": "(fn mymax [x & rest] (if (nil? rest) x (if (> x (apply mymax rest)) x (apply mymax rest))))", "user": "5510aa92e4b06e50f9beb188"}, {"problem": 38, "code": "(fn [one & args]\n  (if (empty? args)\n    one\n    (last (sort (conj args one)))))", "user": "55151417e4b055c2f668d4da"}, {"problem": 38, "code": "#(last (sort %&))", "user": "532018efe4b08068f379edcd"}, {"problem": 38, "code": "(fn [& c] (reduce (fn [a b] (if (> a b) a b)) c))", "user": "55164856e4b06a49daca83b3"}, {"problem": 38, "code": "(fn [& args] ((comp last sort) args))", "user": "5515b138e4b055c2f668d4ed"}, {"problem": 38, "code": "#(last (sort %&))", "user": "551297dee4b06e50f9beb1b1"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) (first args) args))", "user": "54fd5e2de4b07d26eda61d33"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "551535cee4b055c2f668d4df"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [prev el] (if (> el prev) el prev)) 0 args))", "user": "5514a60fe4b055c2f668d4d7"}, {"problem": 38, "code": "#(last(sort %&))", "user": "54e8ccace4b024c67c0cf829"}, {"problem": 38, "code": "(fn [& rest] (last (sort rest)))", "user": "5515cd9de4b055c2f668d4f4"}, {"problem": 38, "code": "(fn [& n]\n   (reduce\n     #(if (< %1 %2) %2 %1) n\n     ))", "user": "54708efce4b00cfc9eacc1b9"}, {"problem": 38, "code": "(fn[& more] (reduce #(if (> %1 %2) %1 %2) more))", "user": "55154abce4b055c2f668d4e0"}, {"problem": 38, "code": "(comp last sort list)", "user": "51227e00e4b068a9582e656c"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "550a26e2e4b06e50f9beb12a"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) 0 %&)", "user": "54f03f8ce4b024c67c0cf891"}, {"problem": 38, "code": "(fn [& more]\n  (reduce (fn [a b] (if (> a b) a b)) more)\n  )", "user": "5510d948e4b06e50f9beb18d"}, {"problem": 38, "code": "(fn\n  ([a] a)\n  ([a & more] (reduce \n                (fn [m v] \n                  (if (< m v) \n                    v \n                    m)) \n                a\n                more )))", "user": "55170dd9e4b06a49daca83bd"}, {"problem": 38, "code": "(fn [& more] (last (sort more) ))", "user": "5515b68de4b055c2f668d4ef"}, {"problem": 38, "code": "(fn [& args]\n  (loop [m 0\n         args args]\n    (if (empty? args)\n      m\n      (if (> (first args) m)\n        (recur (first args) (rest args))\n        (recur m (rest args))))))", "user": "54d9f7f1e4b024c67c0cf751"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "54e0bb4fe4b024c67c0cf7b8"}, {"problem": 38, "code": "(fn mymax\n  ([x y]            (if (> x y) x y))\n  ([x y & more]     (reduce mymax (mymax x y) more)))", "user": "50c6052ce4b0c9dc10d15c56"}, {"problem": 38, "code": "(fn [& xs]\n  (-> xs (sort) (reverse) (first)))", "user": "51bb08a4e4b0fe3ecfb46446"}, {"problem": 38, "code": "(fn [& xs]\n  (loop [f (first xs)\n         r (rest xs)\n         current-max -99999]\n    (if (nil? f)\n      current-max\n      (recur (first r) (rest r) (if (> f current-max)\n                                  f\n                                  current-max)))))", "user": "551a64cde4b091ff45eda996"}, {"problem": 38, "code": "(fn [& xs]\n  (loop [x (rest xs) n (first xs)]\n    (if (empty? x)\n      n\n      (recur (rest x) (if (> (first x) n) (first x) n)))))", "user": "551a21ece4b091ff45eda993"}, {"problem": 38, "code": "(fn [& args] (-> args sort last))", "user": "514f0a28e4b019235f6c059a"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [a b] (cond (> a b) a true b)) xs))", "user": "5512967ee4b06e50f9beb1ae"}, {"problem": 38, "code": "(fn [& arg ] (last (sort arg))) \n;todo better", "user": "533c2605e4b0e30313ee6cd7"}, {"problem": 38, "code": "(fn [& args]\n      (reduce #(if (< % %2) %2 %) args))", "user": "55092319e4b06e50f9beb113"}, {"problem": 38, "code": "(fn [& body] (first (reverse (sort body))))", "user": "53504a7de4b084c2834f4ad9"}, {"problem": 38, "code": "(fn [& _list] (last (sort _list)))", "user": "551535bde4b055c2f668d4de"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5519c157e4b00ace28fe6e32"}, {"problem": 38, "code": "(fn [& seq]\n  (loop [remaining seq\n         cur 0]\n    (println remaining)\n    (if (empty? remaining)\n      cur\n      (recur \n        (rest remaining) \n        (if (> (first remaining) cur)\n          (first remaining)\n          cur)))))", "user": "55183a11e4b06a49daca83ca"}, {"problem": 38, "code": "(fn my-max [& l]\n  ((fn internal [l m]\n     (if (empty? l)\n       m\n       (internal (rest l) (if (> (first l) m)\n                            (first l)\n                            m)))) l 0))", "user": "551c6bcee4b07993ea3788df"}, {"problem": 38, "code": "(fn [& l] \n  (loop [ls l]\n   (cond\n   \t(= (count ls) 1) (first ls)\n    (<= (first ls) (second ls)) (recur (rest ls))\n    (>= (first ls) (last ls)) (recur (butlast ls)))))", "user": "551cade8e4b07993ea3788e2"}, {"problem": 38, "code": "(fn [& args]\n  (reduce \n   #(if \n     (< %1 %2) %2 %1) args))", "user": "551cd433e4b07993ea3788e4"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "546db2fbe4b00cfc9eacc190"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "52ea764ee4b09f7907dd14be"}, {"problem": 38, "code": "(fn foo [& args]\n     (if (empty? args)\n       nil\n       (let [head (first args) restMax (apply foo (rest args))]\n         (cond\n           (nil? restMax) head\n           (>= head restMax) head\n           :else restMax))))", "user": "5509bec5e4b06e50f9beb121"}, {"problem": 38, "code": "#(last (sort %&))", "user": "55180900e4b06a49daca83c8"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "550a2c61e4b06e50f9beb12b"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "550033a8e4b07d26eda61d59"}, {"problem": 38, "code": "(fn maximum [head & tail]\n  (let [f (fn [current-max coll]\n         \t(if (empty? coll)\n              current-max\n              (recur (if (> current-max (first coll)) current-max (first coll)) (rest coll))\n            )  \n         )\n      current-max head\n      coll (seq tail)]\n  \t(f current-max coll)\n  )\n)", "user": "5515c8b1e4b055c2f668d4f2"}, {"problem": 38, "code": "(fn [& r]\n    ((fn rec [nums m]\n         (cond\n           (empty? nums) m\n           (> (first nums) m) (rec (rest nums) (first nums))\n           true (rec (rest nums) m)))\n     r 0))", "user": "551ed214e4b08d5046aa8a4d"}, {"problem": 38, "code": "(fn [& blah] (reduce #(if (< %1 %2) %2 %1) blah))", "user": "550337e2e4b086ebe8a79c6a"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "user": "4e443201535dc968683fc4a7"}, {"problem": 38, "code": "(fn mmax\n  [& l]\n  (reduce #(if (> %1 %2) %1 %2) l))", "user": "551afdf8e4b07993ea3788cb"}, {"problem": 38, "code": "(fn my-max[& xs]\n  (loop [current-max (first xs) \n         [current & remaining] xs]\n    (if-not (seq remaining)\n      current-max\n      (recur\n        (if (> current current-max) current current-max)\n        remaining))))", "user": "4dd76bf9535d2dad7130b5d1"}, {"problem": 38, "code": "(fn mymax\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & zs] (apply mymax (cons (mymax x y) zs))))", "user": "551ecb76e4b08d5046aa8a4c"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "54d22860e4b0e8a36923e5ef"}, {"problem": 38, "code": "(fn [& args] \n  (reduce #(if (> %1 %2) %1 %2) args) )", "user": "514504c2e4b021a5ff8301fc"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> % %2) % %2) args))", "user": "55129632e4b06e50f9beb1aa"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "user": "551ee974e4b08d5046aa8a50"}, {"problem": 38, "code": "(fn [pri & mas] (reduce #(if (> %1 %2) %1 %2) pri mas))", "user": "5517f5c5e4b06a49daca83c7"}, {"problem": 38, "code": "(fn my-max\n  [x & more]\n  (if-let [y (first more)]\n    (if (> x y)\n      (apply my-max (cons x (rest more)))\n      (apply my-max (cons y (rest more))))\n    x))", "user": "551c594de4b07993ea3788dc"}, {"problem": 38, "code": "(fn my-max [& args]\n  (reduce #(if(> %2 %) %2 %) args))", "user": "52b36925e4b0c58976d9ad0b"}, {"problem": 38, "code": "(fn maxVal [& args] (-> args (sort) (last)))", "user": "55204412e4b08d5046aa8a5f"}, {"problem": 38, "code": "(fn [& z] (reduce #(if (> %2 %1) %2 %1) z))", "user": "55205564e4b08d5046aa8a60"}, {"problem": 38, "code": "(fn foo [& x] (-> x sort last))", "user": "5520974be4b08d5046aa8a63"}, {"problem": 38, "code": "(fn [& rest]\n  (first (reverse (sort rest))))", "user": "54b64fbbe4b05787c3b163b8"}, {"problem": 38, "code": "(fn [& l] \n  (let [grt #(if (> %1 %2) %1 %2)]\n  (reduce grt l)))", "user": "5520af03e4b08d5046aa8a64"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "5522234ee4b0882d96d0919d"}, {"problem": 38, "code": "(comp last sort list)", "user": "551c66dae4b07993ea3788de"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) args))", "user": "55201d18e4b08d5046aa8a5d"}, {"problem": 38, "code": "(fn [& nums]\n  (last (sort nums)))", "user": "551b8e2ae4b07993ea3788d3"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "552356fae4b0882d96d091af"}, {"problem": 38, "code": "(fn mymax\n  ([x] x)\n  ([x y]\n     (if (> x y) x y))\n  ([x y & more]\n     (reduce mymax (mymax x y) more)))", "user": "5508a292e4b06e50f9beb10f"}, {"problem": 38, "code": "(fn [& args] (reduce (fn mymax [n m] (if (> m n) m n)) 0 args))", "user": "551d5cb9e4b07993ea3788e9"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "5522a795e4b0882d96d091a7"}, {"problem": 38, "code": "(fn [& nums] (last (into (sorted-set) nums)))", "user": "5522cd9ae4b0882d96d091ab"}, {"problem": 38, "code": "(fn\n    [& l]\n    (reduce\n      (fn [a b]\n        (if (> a b) a b))\n      l))", "user": "4f9e0000e4b0dcca54ed6d2a"}, {"problem": 38, "code": "(fn[& args]\n  (first (reverse (sort args)))\n  )", "user": "55240916e4b0882d96d091b6"}, {"problem": 38, "code": "(fn \n\t[& l]\n\t(reduce\n\t\t(fn\n\t\t\t[x y]\n\t\t\t(if (< x y)\n\t\t\t\ty\n\t\t\t\tx\n\t\t\t\t)\n\t\t\t)\n\t\tl\n\t)\n)", "user": "550b5a53e4b06e50f9beb142"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "552456e3e4b0882d96d091c2"}, {"problem": 38, "code": "#(last (sort %&))", "user": "551dfd81e4b030e6a24d00e0"}, {"problem": 38, "code": "(fn [& s] (reduce #(if (< %1 %2) %2 %1) s))", "user": "55253217e4b0882d96d091ce"}, {"problem": 38, "code": "#(last (sort %&))", "user": "55218bf0e4b0882d96d09196"}, {"problem": 38, "code": "(fn [& args]\n  (first (sort > args)))", "user": "55245232e4b0882d96d091c0"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b )) args))", "user": "55253c20e4b0882d96d091d1"}, {"problem": 38, "code": "(fn [& list] (reduce #(if (> %1 %2) %1 %2) list) )", "user": "4fc57c4ce4b0ee37620e17f6"}, {"problem": 38, "code": "(fn [& r] (reduce (fn [x y] (if (>= x y) x y)) 0 r))", "user": "552621d0e4b0ffed3738f914"}, {"problem": 38, "code": "(fn [& s]\n  (reduce #(if (> %1 %2) %1 %2) s))", "user": "5484fab9e4b0e286459a11a6"}, {"problem": 38, "code": ";(fn [& args] (last (sort args)))\n#(last (sort %&))", "user": "55264584e4b0ffed3738f918"}, {"problem": 38, "code": "(fn [& args]\n  (loop [v args\n         m (first args)]\n    (if(empty? v)\n      m\n      (recur (rest v) (if (> (first v) m) (first v) m )\n       )\n     )\n  )\n)", "user": "55252392e4b0882d96d091cc"}, {"problem": 38, "code": "(fn [& args] \n  (reduce #(if (< %1 %2) %2 %1) args)\n  )", "user": "5524f21fe4b0882d96d091c7"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "user": "5526383ee4b0ffed3738f917"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "55256426e4b0ffed3738f905"}, {"problem": 38, "code": "(fn maxi [& args]\n  (last (sort (vec args))))", "user": "55285e60e4b0ffed3738f93e"}, {"problem": 38, "code": "(fn [& args] \n  (reduce \n   (fn [x y] (if (> x y) x y)) args))", "user": "54a61420e4b09f271ff37c82"}, {"problem": 38, "code": "(fn [& nums] (first (reverse (sort nums))))", "user": "55249337e4b0882d96d091c3"}, {"problem": 38, "code": "(fn [& args]\n  (letfn [(greater [x y] (if (> x y) x y))]\n    (reduce greater args)))", "user": "551747e0e4b06a49daca83c1"}, {"problem": 38, "code": "(fn[& x](-> x seq sort last))", "user": "552800d7e4b0ffed3738f93a"}, {"problem": 38, "code": "(fn [& all] (reduce #(if(>= %1 %2) %1 %2) all))", "user": "54e4edcae4b024c67c0cf7f3"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "55280930e4b0ffed3738f93b"}, {"problem": 38, "code": "(fn [& a] (last (sort a)))", "user": "551ebcd7e4b08d5046aa8a4a"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ))", "user": "55231800e4b0882d96d091ad"}, {"problem": 38, "code": "(fn [& r] (reduce #(if (> %1 %2) %1 %2 ) r))", "user": "55249f64e4b0882d96d091c6"}, {"problem": 38, "code": "(fn [& s] (reduce #(if (> % %2) % %2) s))", "user": "505106fee4b05ab4c7e07d38"}, {"problem": 38, "code": "(fn [& l]\n  (loop [x (first l)\n        l (rest l)]\n   (cond (empty? l) x\n         (> (first l) x) (recur (first l) (rest l))\n         :else (recur x (rest l)))))", "user": "55274467e4b0ffed3738f92b"}, {"problem": 38, "code": "(fn [& nums] \n  (reduce \n    (fn [first-num second-num]\n      (if (> first-num second-num)\n        first-num\n        second-num))\n    nums))", "user": "5517331ae4b06a49daca83c0"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (> %1 %2) %1 %2) x xs))", "user": "552a672de4b0ffed3738f954"}, {"problem": 38, "code": "#(-> %& sort reverse first)", "user": "551589cee4b055c2f668d4e9"}, {"problem": 38, "code": "(fn [& args] (-> args sort last))", "user": "552a8bbae4b0ffed3738f956"}, {"problem": 38, "code": "(fn max-val [first-val & rest-vals]\n  (let [rest-vals (flatten rest-vals)]\n    (if (empty? rest-vals)\n      first-val\n      (let [next-val (max-val (first rest-vals) (rest rest-vals))]\n        (if (> next-val first-val)\n          (max-val (first rest-vals) (rest rest-vals))\n          first-val\n          )))\n    )\n  )", "user": "552689cfe4b0ffed3738f91e"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "552694e7e4b0ffed3738f920"}, {"problem": 38, "code": "(fn [& args]\n    ((fn GetMax [maxVal sqVals] \n      (if (= sqVals ())\n        maxVal\n        (let [curVal (first sqVals)] \n          (GetMax (if (> curVal maxVal) curVal maxVal) (rest sqVals))\n         )\n        )\n      )\n     0 args\n   )\n  )", "user": "5528ecd1e4b0ffed3738f942"}, {"problem": 38, "code": "(fn [& s] (last (sort s)))", "user": "55253799e4b0882d96d091cf"}, {"problem": 38, "code": "(fn [& xs]\n  (loop [remainder (rest xs)\n         current-max (first xs)]\n    (if (empty? remainder)\n      current-max\n      (recur (rest remainder) (if (> current-max (first remainder))\n                                current-max\n                                (first remainder))))))", "user": "5524120fe4b0882d96d091b7"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "550d9452e4b06e50f9beb15d"}, {"problem": 38, "code": "(fn [& nums] \n  (reduce #(if (>= %1 %2) %1 %2) nums))", "user": "4df247b8535d08e6dec9fe25"}, {"problem": 38, "code": "(fn [x & xc]\n  (reduce (fn [acc e] (if (> acc e) acc e) ) x xc)\n)", "user": "551a380fe4b091ff45eda994"}, {"problem": 38, "code": "(fn [& rest] (reduce (fn [max' el] (if (> el max') el max')) rest))", "user": "55041b5ee4b086ebe8a79c78"}, {"problem": 38, "code": "(fn ff [& x] \n   (last (sort x)) \n)", "user": "55278187e4b0ffed3738f92d"}, {"problem": 38, "code": "(fn [& a]\n  (reduce #(if (> %1 %2) %1 %2 ) a)\n  )", "user": "552d9013e4b076ab5578f7ea"}, {"problem": 38, "code": "(fn [& a]\n (reduce\n   (fn [m e]\n     (if (> e m) e m))\n   0\n   a))", "user": "552d2e4fe4b076ab5578f7e1"}, {"problem": 38, "code": "(fn[& others] \n  (loop [lst (first (conj () others)) maximum (first lst) current (first lst)] \n    (if (empty? lst) maximum\n      (recur (rest lst) (if (> current maximum) current maximum) (first lst)))))", "user": "552bc0f5e4b0ffed3738f968"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "5512980ce4b06e50f9beb1b3"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "552ed75ae4b076ab5578f7f9"}, {"problem": 38, "code": "(fn [& ls] (reduce #(if (> % %2) % %2) ls))", "user": "54db48f6e4b024c67c0cf760"}, {"problem": 38, "code": "(fn [& tail]\n  (reduce (fn [a b] (if (< a b) b a)) tail)\n)", "user": "552f6e8ee4b076ab5578f802"}, {"problem": 38, "code": "(fn [x & l] \n  (reduce #(if (> %1 %2) %1 %2) x l))", "user": "548d6b75e4b0e286459a1216"}, {"problem": 38, "code": "(fn [& z] (reduce (fn [x y] (if (> x y) x y)) z))", "user": "5509b434e4b06e50f9beb11e"}, {"problem": 38, "code": "(fn ([] nil) ([& rest] (reduce #(if (< %1 %2) %2 %1) rest)))", "user": "54e540c1e4b024c67c0cf7f9"}, {"problem": 38, "code": "(fn [& [x & xs]]\n  (if (seq xs)\n    (if (> (first xs) x)\n      (recur xs)\n      (recur (cons x (rest xs))))\n    x))", "user": "52cda397e4b07d0d72b2737a"}, {"problem": 38, "code": "(fn [& args]\n  (loop [cur-max (first args) coll (rest args)]\n    (if (empty? coll)\n      cur-max\n      (if (> (first coll) cur-max)\n        (recur (first coll) (rest coll))\n        (recur cur-max (rest coll))))))", "user": "54bd6cb2e4b0ed20f4ff6ede"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce (fn [r x]\n            (if (> x r)\n              x\n              r)) (first xs) xs))", "user": "552c1a0fe4b076ab5578f7d7"}, {"problem": 38, "code": "(fn [& a]  (reduce (fn [x y] (if (> x y) x y)) a))", "user": "544673c0e4b032a45b8693b0"}, {"problem": 38, "code": "(fn [& a] (reduce (fn [m x] (if (> m x) m x)) a))", "user": "540a2b9fe4b0addc1aec66ed"}, {"problem": 38, "code": "(fn [& numbers]\n  (reduce (fn [o n] (if (< o n) n o)) numbers))", "user": "5530b827e4b076ab5578f818"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce (fn [m x]\n            (if (> x m)\n              x\n              m))\n          x\n          xs))", "user": "534da51fe4b084c2834f4aa4"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5531e445e4b09218d5f44f76"}, {"problem": 38, "code": "(fn [& args]\n\t(last (reduce (fn [best item]\n\t(if (> item (last best))\n\t\t(conj best item)\n\t\tbest\n\t\t)\n\t)\n [-1] args)))", "user": "553024c3e4b076ab5578f80d"}, {"problem": 38, "code": "(comp last sorted-set)", "user": "55306f9de4b076ab5578f814"}, {"problem": 38, "code": "(fn [& more] (reduce (fn [a b] (if (> a b) a b)) 0 more))", "user": "5533da20e4b09218d5f44f92"}, {"problem": 38, "code": "(fn [& x]\n  (reduce (fn [prev x] \n  \t(if (> x prev) x prev)) 0 x))", "user": "552bab7fe4b0ffed3738f966"}, {"problem": 38, "code": "(fn [f & more]\n   (if (empty? more) \n     f\n     (recur (if (< f (first more)) \n              (first more) \n              f)\n            (rest more) )))", "user": "55022275e4b07d26eda61d81"}, {"problem": 38, "code": "(fn max1 [& args] (last (sort args)))", "user": "54f86b8ce4b01ecee9d88828"}, {"problem": 38, "code": "(fn [& rest]\n  (loop [current-max 0 index 0 value-list (into [] rest)]\n    (if (> index (dec (count value-list)))\n      current-max\n      (if (> current-max (get value-list index))\n        (recur current-max (inc index) value-list)\n        (recur (get value-list index) (inc index) value-list)))))", "user": "53c92d05e4b00fb29b2212b9"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [x y] (if (> y x) y x)) args))", "user": "55316b8ae4b076ab5578f825"}, {"problem": 38, "code": "(fn [& v] (reduce #(if (> %1 %2) %1 %2) v))", "user": "552e1c98e4b076ab5578f7ee"}, {"problem": 38, "code": "(comp (partial reduce #(if (> %2 %1) %2 %1) 0) list)", "user": "5535e9b8e4b09218d5f44fb3"}, {"problem": 38, "code": "(fn [& args] \n  (reduce (fn [a b] (if (> a b) a b)) \n          args))", "user": "553698fae4b09218d5f44fc0"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "55357ab5e4b09218d5f44faf"}, {"problem": 38, "code": "(fn [& params]\n  (loop [s params, m (nth params 1)]\n    (if (not (seq s))\n      m\n      (recur (rest s) (if (> (first s) m) (first s) m)))))", "user": "5526a235e4b0ffed3738f922"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "5536c324e4b09218d5f44fc1"}, {"problem": 38, "code": "(fn [& items] (reduce (fn [x y]\n          (if (> x y)\n            x\n            y))\n            items))", "user": "50a0267fe4b08df8156e9e4a"}, {"problem": 38, "code": "(fn [& values] \n  (loop [v values m (first v) c 0] \n    (if (empty? v) \n      m \n      (recur (rest v) (if (> m c) m c) (first (rest v))))))", "user": "5448616be4b032a45b8693c9"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "55382fa9e4b09218d5f44fde"}, {"problem": 38, "code": "(fn\n  ([& args] (reduce #(if (> %1 %2) %1 %2) args))\n  ([] nil))", "user": "530fbbaee4b08068f379eccf"}, {"problem": 38, "code": "(fn [& lst] (reduce #(if (> %1 %2) %1 %2) (first lst) lst))", "user": "550fd845e4b06e50f9beb17c"}, {"problem": 38, "code": "#(last (sort %&))", "user": "55377460e4b09218d5f44fc9"}, {"problem": 38, "code": "(fn [& args] (last(sort args)))", "user": "52c03baee4b07a9af5792347"}, {"problem": 38, "code": "#(last (sort %&))", "user": "54c46381e4b045293a27f61a"}, {"problem": 38, "code": "(fn [& vs] (reduce (fn [x y] (if (> x y) x y)) vs))", "user": "53684a2fe4b0243289761e8c"}, {"problem": 38, "code": "(fn [& args] (first (sort > args)))", "user": "51e4b812e4b0efabf93c02bc"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) 0 args))", "user": "553a43cae4b09218d5f44ff2"}, {"problem": 38, "code": "(fn [& more]\n  (letfn [(max-of [x y]\n                (if (> x y) x y))]\n    (reduce max-of more)))", "user": "553a35bfe4b09218d5f44ff0"}, {"problem": 38, "code": "(fn mymax [& args]\n  (reduce #(if (> %1 %2) %1 %2) args)\n )", "user": "5537982ae4b09218d5f44fcc"}, {"problem": 38, "code": "(comp last sort vector)", "user": "533b1611e4b0e30313ee6cc6"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) (first x) x))", "user": "553a74ede4b09218d5f44ff7"}, {"problem": 38, "code": "(fn [s & r] (if (= 1 s) 8\n          (if (= 30 s) s\n            67)))", "user": "5535d34be4b09218d5f44fb0"}, {"problem": 38, "code": "(fn [& nums] (last (sort nums)))", "user": "553b87abe4b09218d5f45003"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (< %1 %2) %2 %1) a))", "user": "553c05b7e4b09218d5f45011"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) 0 args))", "user": "553b8fdbe4b09218d5f45004"}, {"problem": 38, "code": "(fn mymax [& col]\n  (reduce #(if (> %1 %2) %1 %2) col))", "user": "553abb28e4b09218d5f44ffb"}, {"problem": 38, "code": "#(first (sort > %&))", "user": "553bda0de4b09218d5f4500b"}, {"problem": 38, "code": "(fn [& col] (last (sort col)))", "user": "553c8638e4b09218d5f45017"}, {"problem": 38, "code": "(fn [& xs]\n   (last (sort xs)))", "user": "550b5c10e4b06e50f9beb143"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [x y] (if (< x y) y x)) xs))", "user": "553e0b70e4b0a04f792994e8"}, {"problem": 38, "code": "(fn [& ns]\n  ((fn _max [ns best]\n     (cond\n      (empty? ns) best\n      (< best (first ns)) (_max (rest ns) (first ns))\n      :else (_max (rest ns) best)))\n   (rest ns) (first ns)))", "user": "553dd883e4b0a04f792994e6"}, {"problem": 38, "code": "(fn [& args] \n  (reduce #(if (> %1 %2) %1 %2) 0\n          args))", "user": "553900d4e4b09218d5f44fe5"}, {"problem": 38, "code": "(fn [& numbers]\n  (first (sort > numbers)))", "user": "553d51c3e4b0a04f792994df"}, {"problem": 38, "code": "(fn [& values] \n  (reduce (fn [a b] (if (> a b) a b)) values))", "user": "520d3129e4b0b022ef140ca5"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (< %1 %2) %2 %1) args))", "user": "5531f8e7e4b09218d5f44f79"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5535e822e4b09218d5f44fb2"}, {"problem": 38, "code": "(comp last sort list)", "user": "55382530e4b09218d5f44fdd"}, {"problem": 38, "code": "(fn [& nums] (reduce (fn [a b] (if (< a b) b a)) 0 nums))", "user": "553d86cfe4b0a04f792994e2"}, {"problem": 38, "code": "(fn f [a & b]\n    ((fn f [x y] \n    \t(if (empty? y)\n    \t\tx\n\t    \t(if (> x (first y))\n\t    \t\t(f x (rest y))\n\t    \t\t(f (first y) (rest y))\n\t    \t)\n\t    )\n    ) a b))", "user": "553b90c8e4b09218d5f45005"}, {"problem": 38, "code": "(fn [& vv] (reduce (fn [m v](if (< m v) v m)) vv))", "user": "553e007ae4b0a04f792994e7"}, {"problem": 38, "code": "(comp last sort list)", "user": "553478dce4b09218d5f44f9d"}, {"problem": 38, "code": "(fn [& n] (reduce (fn [a b] (if (> a b) a b)) n))", "user": "553fe819e4b0a04f792994fc"}, {"problem": 38, "code": "(fn [& vals]\n  \n  \n  (reduce \n   \t\t(fn [c v] (if (> c v) c v)) \n   \t\t\n   vals)\n  \n  \n  \n)", "user": "54c779bee4b045293a27f63b"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [m n] (if (> n m) n m)) args))", "user": "5540f372e4b0a04f79299508"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5540cc0ce4b0a04f79299505"}, {"problem": 38, "code": "(fn [& numbers] (reduce #(if (> %1 %2) %1 %2) numbers))", "user": "55395241e4b09218d5f44fe8"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "553fa883e4b0a04f792994f9"}, {"problem": 38, "code": "(fn f [& m] (reduce (fn [x y] (if (> x y) x y)) m))", "user": "5541fa50e4b0a04f79299515"}, {"problem": 38, "code": "(fn [& ps]\n  (reduce #(if (> %1 %2) %1 %2) ps))", "user": "5313d68de4b08068f379ed0f"}, {"problem": 38, "code": "(fn [& x]\n      (reduce\n        (fn [& [a n]]\n            (if (< (or a 0) n)\n              n\n              a)) x))", "user": "5540fe42e4b0a04f7929950a"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "55337e61e4b09218d5f44f8e"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "54eee38ce4b024c67c0cf878"}, {"problem": 38, "code": "(fn [& ys]\n  (reduce\n   (fn [curr x]\n     (if (> x curr) x curr))\n  ys))", "user": "55381162e4b09218d5f44fda"}, {"problem": 38, "code": "#(last (sort %&))", "user": "54c944b1e4b045293a27f666"}, {"problem": 38, "code": "(fn [& g] (reduce (fn [x y] (if (> x y) x y)) g))", "user": "553bc237e4b09218d5f4500a"}, {"problem": 38, "code": "#(last (sort %&))", "user": "54116e2fe4b01498b1a719c4"}, {"problem": 38, "code": "#(last(sort (vec %&)))", "user": "55450496e4b0a04f7929952c"}, {"problem": 38, "code": "(fn [ & coll]\n  (reduce (fn [a b] (if (> a b) a b)) coll))", "user": "55074092e4b021ccfedb96a4"}, {"problem": 38, "code": "#(reduce (fn [m x]\n           (if (> x m) x m)) %&)", "user": "550f1c99e4b06e50f9beb171"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (< % %2) %2 %) xs))", "user": "5545eebee4b0a04f79299539"}, {"problem": 38, "code": "(fn [& xs]\n  (loop [[x & xs] xs\n         maxi x]\n    (cond\n      (nil? x) maxi\n      (> x maxi) (recur xs x)\n      :else (recur xs maxi))))", "user": "5512cd55e4b055c2f668d4ba"}, {"problem": 38, "code": "(fn [& params] (loop [my-max (first params) tail (rest params)]\n                 (if (empty? tail)\n                   my-max\n                   (if (> my-max (first tail))\n                      (recur my-max (rest tail))\n                      (recur (first tail) (rest tail))))))", "user": "55457b73e4b0a04f79299536"}, {"problem": 38, "code": "(fn [& l] (reduce #(if (> %1 %2) %1 %2) l))", "user": "52e851bfe4b09f7907dd149a"}, {"problem": 38, "code": "(fn [& numbers]\n  (reduce\n   (fn [memo b] (if (> memo b) memo b))\n   -1\n   numbers))", "user": "54935b5be4b0b312c081ff4c"}, {"problem": 38, "code": "(fn my-max [& args]\n  (loop [coll args m 0]\n    (let [f (first coll) r (rest coll)]\n      (cond (nil? f) m\n       :default\n       (recur r (if (> f m) f m))))))", "user": "5546704be4b0a04f7929953d"}, {"problem": 38, "code": "#(last (sort %&))", "user": "543366dde4b0b6b47310fcdf"}, {"problem": 38, "code": "(fn [& coll]\n  (loop [maxval (first coll), coll coll]\n   (if (empty? coll)\n     maxval\n     (if (> (first coll) maxval)\n       (recur (first coll) (rest coll))\n       (recur maxval (rest coll))))))", "user": "53573d70e4b04ce2eb3ed278"}, {"problem": 38, "code": "(fn mymax [& a]\n  (loop [mmax (first a) coll (rest a)]\n    (if (empty? coll)\n      mmax\n      (if (> mmax (first coll))\n        (recur mmax (rest coll))\n        (recur (first coll) (rest coll)))\n     )))", "user": "5532a04ee4b09218d5f44f82"}, {"problem": 38, "code": "(fn [& args] \n   (reduce \n      (fn [memo x]\n        (if (> memo x)\n        memo\n        x)) \n      args))", "user": "54980edae4b0b312c081ff79"}, {"problem": 38, "code": "(fn [& nums] (reduce (fn [a b] (if (> a b) a b)) nums))", "user": "5283a919e4b0239c8a67adbe"}, {"problem": 38, "code": "(fn [& args] \n  (reduce (fn [a b] (if (> a b) a b)) args))", "user": "554a75c9e4b0a04f79299575"}, {"problem": 38, "code": "(fn [& x]\n  (reduce (fn [a i] (if (> i a) i a)) x))", "user": "55495318e4b0a04f79299566"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "5326e4efe4b09d4e7a9b54f5"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (< a b) b a)) args))", "user": "554680cbe4b0a04f7929953e"}, {"problem": 38, "code": "(fn [& args]\n  (loop [acc args m 0]\n    (if (empty? acc)\n      m\n      (recur (rest acc) (if (> (first acc) m)\n                          (first acc)\n                          m))))\n  )", "user": "554884d4e4b0a04f7929955c"}, {"problem": 38, "code": "(fn gmaxloop\n  [& max-vector]\n  (loop [[x & xs] max-vector res [(last max-vector)]]\n    (if x\n      (if (> x (first res)) \n        (recur xs (conj (rest res) x))\n        (recur xs res))\n      (first res))))", "user": "54070647e4b0addc1aec66b2"}, {"problem": 38, "code": "(fn f ([] nil) ( [x] x)  ( [x y & xs] (apply f (conj xs (if (> x y) x y)))))", "user": "554b7958e4b0a04f79299586"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [x y]\n    (if (> x y) x y)) args))", "user": "55485b2ee4b0a04f79299559"}, {"problem": 38, "code": "#(last (sort %&))", "user": "554c296ae4b0a04f792995a1"}, {"problem": 38, "code": "(fn [& items] (reduce (fn [a b] (if (> a b) a b)) items))", "user": "554b425ce4b0a04f79299581"}, {"problem": 38, "code": ";; (fn [& xs] (reduce (fn [x y] (if (> x y) x y)) xs))\n(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "55150524e4b055c2f668d4d9"}, {"problem": 38, "code": "(fn [& args]\n  (loop [col args\n         result 1]\n    (cond (empty? (rest col)) result\n          (> (first col) result) (recur (rest col) (first col))\n          :else (recur (rest col) result))))", "user": "54f14aa6e4b024c67c0cf8af"}, {"problem": 38, "code": "(fn [& rest]\n  (reduce #(if (> % %2) % %2) rest))", "user": "5523fce8e4b0882d96d091b4"}, {"problem": 38, "code": "(fn [m  & x] (if (empty? x) m (if (> (first x) m) (recur (first x) (rest x)) (recur m (rest x))))) 0", "user": "554d01a8e4b0a04f792995b3"}, {"problem": 38, "code": "(fn [& seq] (reduce #(if (> %1 %2) %1 %2) seq))", "user": "554dff83e4b00713264bd98d"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [a b] (if (> a b) a b)) xs))", "user": "552a793ee4b0ffed3738f955"}, {"problem": 38, "code": "(fn[& more] \n  (reduce #(if (> %1 %2) %1 %2) more))", "user": "55429859e4b0a04f7929951f"}, {"problem": 38, "code": "(letfn [(f ([mx x & xs]\n            (if (nil? x) mx\n\t            (if (> x mx)\n    \t          (recur x (first xs) (rest xs))\n                  (recur mx (first xs) (rest xs))))))]\n  (partial f -100000))", "user": "554b9c3ee4b0a04f79299594"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "554d48d3e4b00713264bd988"}, {"problem": 38, "code": "(fn my-max [& i]\n  (let [ls (flatten i)]\n    (if-not (empty? (rest ls))\n      (if (< (first ls)\n             (second ls))\n        (my-max (remove (hash-set (first ls)) ls))\n        (my-max (remove (hash-set (second ls)) ls)))\n      (first ls))))", "user": "554bc026e4b0a04f79299597"}, {"problem": 38, "code": "(fn [& items] (reduce #(if (> %1 %2) %1 %2) items))", "user": "554b7056e4b0a04f79299583"}, {"problem": 38, "code": "(fn [& nums] (reduce (fn [a b] (if (< a b) b a)) nums))", "user": "554d386ee4b0a04f792995b8"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (< %1 %2) %2 %1) args))", "user": "554a270fe4b0a04f79299570"}, {"problem": 38, "code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) more))", "user": "5547793be4b0a04f7929954c"}, {"problem": 38, "code": "(fn [& r] (reduce #(if (> %1 %2) %1 %2) r ))", "user": "554edb85e4b00713264bd99a"}, {"problem": 38, "code": "#((comp last sort) %&)", "user": "53571732e4b04ce2eb3ed275"}, {"problem": 38, "code": "(fn [& coll]\n  (reduce #(if (< %1 %2) %2 %1) coll))", "user": "52ca9513e4b071a8d36bd3e4"}, {"problem": 38, "code": "(fn [& more]\n  (reduce\n    (fn\n      [x y]\n      (if (< x y) y x)\n      )\n    more\n    )\n  )", "user": "5540f5dee4b0a04f79299509"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "508fda91e4b0ea685a20f76f"}, {"problem": 38, "code": "(fn [& col] (reduce (fn [a b] (if (> a b) a b)) col))", "user": "547c2c6ce4b0c51c1f4d72e3"}, {"problem": 38, "code": "(fn maxi\n\t[& args]\n\t(reduce #(if (> %1 %2) %1 %2) args)\n\t)", "user": "5545477fe4b0a04f79299531"}, {"problem": 38, "code": "(fn [& more] (reduce #( if(> %1 %2) %1 %2) more ))", "user": "5280a1ece4b0757a1b171407"}, {"problem": 38, "code": "( fn [& x]\n  (->> x\n  \tsort\n    last))", "user": "555093b2e4b00713264bd9ab"}, {"problem": 38, "code": "#(last (sort %&))", "user": "554b8572e4b0a04f79299589"}, {"problem": 38, "code": "(fn [x & args]\n  (reduce (fn [reduction current]\n            (if (> current reduction)\n              current\n              reduction)) x args))", "user": "5486e317e4b0e286459a11c0"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5195fadee4b04c0af7ff3c11"}, {"problem": 38, "code": "(fn [& numbers]\n  (reduce #(if (> %2 %1) %2 %1) numbers))", "user": "53b0765ae4b047364c044484"}, {"problem": 38, "code": "(fn [initial & remaining]\n  (loop [remaining-input remaining\n         maximum initial]\n    (cond\n      (empty? remaining-input) maximum\n      (> (first remaining-input) maximum) (recur (rest remaining-input) (first remaining-input))\n      :else (recur (rest remaining-input) maximum))))", "user": "5550dad4e4b00713264bd9b0"}, {"problem": 38, "code": "(fn [& args] (loop [l args, m (first args)] (cond (empty? l) m (> (first l) m) (recur (rest l) (first l)) :else (recur (rest l) m))))", "user": "554ba1d3e4b0a04f79299595"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "52ce1abfe4b07d0d72b27389"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [r x] (if (< r x)\n                      x\n                      r\n                      )\n                     ) 0 args))", "user": "554b2151e4b0a04f79299580"}, {"problem": 38, "code": "#(- (apply min (map - %&)))", "user": "5552b617e4b0deb715856df8"}, {"problem": 38, "code": "(fn [& args]\n  (- (apply min (map (partial * -1) args))))", "user": "5553b924e4b0deb715856e06"}, {"problem": 38, "code": "(fn [& coll] (reduce #(if (> %2 %1) %2 %1) coll))", "user": "553c4614e4b09218d5f45014"}, {"problem": 38, "code": "(fn [& x]\n  (loop [max-value (first x),x1 (rest x)]\n    (if (empty? x1) max-value\n      (if (> (first x1) max-value) (recur (first x1) (rest x1))\n        (recur max-value (rest x1))))))", "user": "55486ee6e4b0a04f7929955a"}, {"problem": 38, "code": "(fn [& xs] (last (sort xs)))", "user": "5547bcf2e4b0a04f79299551"}, {"problem": 38, "code": "(fn [& args]\n  (reduce\n    (fn [acc v] \n      (if (> v acc) v acc)) \n    args))", "user": "54dce62be4b024c67c0cf78b"}, {"problem": 38, "code": "(fn get-max [x y & z] (reduce get-max (if (> x y) x y) z))", "user": "5550b5a0e4b00713264bd9ad"}, {"problem": 38, "code": "#(last (sort %&))", "user": "550eca99e4b06e50f9beb16b"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> y x) y x)) args))", "user": "55536a8ae4b0deb715856e03"}, {"problem": 38, "code": "(fn [& xs]\n    (reduce (fn [acc x]\n              (if (> x acc)\n                x\n                acc))\n            (first xs)\n            (rest xs)))", "user": "5549ff9ae4b0a04f7929956e"}, {"problem": 38, "code": "; (fn [& nums] (last (sort (seq nums))))\n(comp last sort list)", "user": "554bced1e4b0a04f79299599"}, {"problem": 38, "code": "(fn [& s]\n    (reduce #(if (> %1 %2) %1 %2) s))", "user": "54fdaeace4b07d26eda61d39"}, {"problem": 38, "code": "(fn [& x]\n  (reduce (fn [result input]\n            (if (> result input)\n              result\n              input))\n          x))", "user": "555521a5e4b0deb715856e12"}, {"problem": 38, "code": "(fn [& args] \n  (reduce (fn [a e] (if (< a e) e a)) args)\n  )", "user": "554c0adde4b0a04f7929959e"}, {"problem": 38, "code": "(fn [& args] (first (sort > args)))", "user": "5550bcece4b00713264bd9ae"}, {"problem": 38, "code": "(fn [& col] (first (reverse (sort col))))", "user": "5316ade5e4b08068f379ed4a"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5545f713e4b0a04f7929953a"}, {"problem": 38, "code": "(fn maks [& args]\n  (last (sort args)))", "user": "54d5343fe4b0a52adc2e200a"}, {"problem": 38, "code": "(fn [& r] (loop [l r m 0] (if (not (empty? l)) (if (> (first l) m) (recur (rest l) (first l)) (recur (rest l) m)) m)))", "user": "54cad59ee4b057c6fda3a26e"}, {"problem": 38, "code": "(fn [& nums]\n  (last (sort (seq nums ))))", "user": "54ecd6f1e4b024c67c0cf858"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "5169b23fe4b03f62cda68cee"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "user": "554bc64ae4b0a04f79299598"}, {"problem": 38, "code": "#(last(sort %&))", "user": "553093bee4b076ab5578f817"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [a b] (if (< a b) b a)) xs))", "user": "555ac933e4b0deb715856e49"}, {"problem": 38, "code": "(fn [& args] (loop [m (first args)\n                   r (rest args)]\n               (if (zero? (count r))\n                 m\n                 (recur\n                  (if (> (first r) m) (first r) m)\n                  (rest r))\n                 )\n               )\n  )", "user": "555b672ce4b0deb715856e50"}, {"problem": 38, "code": "(fn [& args] (if (= 1 (count args)) (first args) (if(> (first args) (second args)) (recur (conj (rest (rest args))(first args))) (recur (rest args)))))", "user": "555b5ae4e4b0deb715856e4f"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %2 %1) %2 %1) xs))", "user": "55568a7de4b0deb715856e1c"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "550fa523e4b06e50f9beb17a"}, {"problem": 38, "code": "#(last (sort %&))", "user": "54026d7de4b0df28a13c62cf"}, {"problem": 38, "code": "(fn \n[& nums] \n(reduce \n\t#(if (< %1 %2)\n      %2\n      %1)\n \tnums))", "user": "5558cd6ae4b0deb715856e2f"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "52a87aabe4b0c58976d9ac2f"}, {"problem": 38, "code": "(fn [& seq]\r\n  (- (apply min (map #(- %) seq))))", "user": "555bd27ae4b0b056612e2244"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "550b4ea2e4b06e50f9beb13e"}, {"problem": 38, "code": "(fn[& coll](last (sort coll)))", "user": "555c6344e4b0b056612e224c"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "user": "55586905e4b0deb715856e2b"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [x y]\n            (if (> x y) \n              x \n             y)) args))", "user": "555c78abe4b0b056612e224f"}, {"problem": 38, "code": "(fn [& x]\n  (reduce #(if (> %1 %2) %1 %2)\n          x))", "user": "55556737e4b0deb715856e15"}, {"problem": 38, "code": "(fn [f & r] (reduce #(if (>%1 %2) %1 %2) f r))", "user": "555f3bfde4b0a2eb076a39c1"}, {"problem": 38, "code": "(fn max* [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "550001d0e4b07d26eda61d57"}, {"problem": 38, "code": "(fn my-max ([x y] (if (> x y) x y)) ([x y & more] (reduce my-max (my-max x y) more)))", "user": "555a5731e4b0deb715856e44"}, {"problem": 38, "code": "(fn [& x] (loop [y x, z 0] (if y (let [z1 (first y)] (recur (next y) (if (> z1 z) z1 z))) z)))", "user": "54e1939ce4b024c67c0cf7c5"}, {"problem": 38, "code": "(fn [& rest] (reduce\n (fn [s r] (if (> r s) r s)) 0 rest))", "user": "556086a2e4b0c656e3ff17c1"}, {"problem": 38, "code": "(fn\n  [& args]\n  ((fn\n    [res, arr]\n    (if (empty? arr)\n      res\n      (recur\n        (if (> (first arr) res)\n          (first arr)\n          res)\n        (rest arr))))\n    (first args)\n    args))", "user": "555f4bade4b0a2eb076a39c2"}, {"problem": 38, "code": "(fn [m & v]\n  (reduce\n    #(if (> %2 %1) %2 %1)\n    m\n    v))", "user": "556159fae4b0c656e3ff17c7"}, {"problem": 38, "code": "(fn f\n  [m & t]\n  (let [s (flatten t)]  \n  (if (= s [])\n    m\n    (if (> (first s) m) \n      (f (first s) (rest s)) \n      (f m (rest s))))))", "user": "55625903e4b0c656e3ff17d7"}, {"problem": 38, "code": "#(last (sort %&))", "user": "55484800e4b0a04f79299558"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [acc x] (if acc (if (> x acc) x acc) x)) 0 args))", "user": "556371bae4b0c656e3ff17eb"}, {"problem": 38, "code": "(fn [& more] (first (sort > more)))", "user": "4fc04d75e4b081705acca324"}, {"problem": 38, "code": "#(first (reverse (sort %&)))", "user": "5563ff5ae4b0c656e3ff17f9"}, {"problem": 38, "code": "(fn mmax [& vals]\n  (reduce #(if (> %1 %2) %1 %2) vals))", "user": "4ef08bd6535dced4c769f20a"}, {"problem": 38, "code": "(fn [& coll] \n\t(loop [c (seq coll) n (first c)]\n      (if (nil? (seq c))\n        n\n        (recur (rest c) (if (> n (first c)) n (first c))))))", "user": "554c83a2e4b0a04f792995a7"}, {"problem": 38, "code": "#(last (sort %&))", "user": "55631739e4b0c656e3ff17e2"}, {"problem": 38, "code": "(fn my-max [& args]\n  (reduce\n   #(if (or (= %1 nil) (< %1 %2)) %2 %1)\n   nil\n   args))", "user": "556238bce4b0c656e3ff17d3"}, {"problem": 38, "code": "(comp last sort list)", "user": "555f0789e4b0a2eb076a39bf"}, {"problem": 38, "code": "(fn [& m](reduce #(if (< % %2) %2 %) m))", "user": "5562f08ae4b0c656e3ff17df"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) 0 a))", "user": "55645592e4b0c656e3ff1802"}, {"problem": 38, "code": ";(fn [& p] \n;   (loop [a (rest p),m (first p)] \n;     (if (empty? a)\n;       m\n;       (if (> (first a) m)\n;         (recur (rest a) (first a))\n;         (recur (rest a) m)))))\n\n(fn [& x] (reduce #(if (>= %1 %2) %1 %2) x))", "user": "555e9dbfe4b0a2eb076a39bc"}, {"problem": 38, "code": "(fn [& rest] (reduce (fn [a b] (if (> a b) a b)) rest))", "user": "554756b8e4b0a04f79299549"}, {"problem": 38, "code": "(fn [& l] ((fn [l n]\n     (if (empty? l) \n         n\n         (let [f (first l)]\n             (if (> f n) \n                 (recur (rest l) f)\n                 (recur (rest l) n))))) l (first l)))", "user": "54f8b6f4e4b01ecee9d8882c"}, {"problem": 38, "code": "(fn [& args] \n  (reduce\n   (fn [a b]\n          \t(if (> a b) \n              a\n              b\n             )\n     )\n   args\n   )\n  )", "user": "4e28ddd1535deb9a81d77efd"}, {"problem": 38, "code": "(fn [a & more] (loop [more more\n                       m a]\n                  (if (= nil (first more)) m\n                    (recur (drop 1 more) (if (> (first more) m) (first more) m)))))", "user": "556358c6e4b0c656e3ff17ea"}, {"problem": 38, "code": "(fn f [& args](reduce #(if (> % %2) % %2) args))", "user": "5563ff8ae4b0c656e3ff17fa"}, {"problem": 38, "code": "(fn max-value [& args]\n   (first(reverse(sort args))))", "user": "555c7517e4b0b056612e224e"}, {"problem": 38, "code": "(fn my-max [& v]\n  (loop [vals (rest v) m (first v)]\n    (if (empty? vals)\n      m\n      (let [next (first vals)] \n        (recur (rest vals) (if (> next m) next m))))))", "user": "556405e5e4b0c656e3ff17fb"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce (fn [a b] (if (< a b) b a)) x xs))", "user": "55670a05e4b0c656e3ff1838"}, {"problem": 38, "code": "(fn [& params] (reduce #(if (> %1 %2) %1 %2) params) )", "user": "55647a31e4b0c656e3ff1808"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "55663e9be4b0c656e3ff182b"}, {"problem": 38, "code": "#(reduce (fn [acc arg] (if (< acc arg) arg acc)) %1 %&)", "user": "5565f616e4b0c656e3ff1823"}, {"problem": 38, "code": "(fn [& s]\n    (reduce #(if (> %1 %2) %1 %2) s))", "user": "5501a1e1e4b07d26eda61d75"}, {"problem": 38, "code": "(fn largestValue\n  [& args]\n  ((fn largestValueHelper\n     [s n]\n     (cond (empty? s) n\n           (> (first s) n) (largestValueHelper (rest s) (first s))\n           :else (largestValueHelper (rest s) n))\n     ) args -1))", "user": "55664950e4b0c656e3ff1832"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [l r] (if (< l r) r l)) xs))", "user": "5566d812e4b0c656e3ff1837"}, {"problem": 38, "code": "(fn \n   [& x]\n   (letfn [(helper-func [x max-val]\n     (if (empty? x)\n       max-val \n       (if (> (first x) max-val)\n         (helper-func (rest x) (first x))\n         (helper-func (rest x) max-val))\n       ))\n           ]\n   (helper-func (rest x) (first x))\n     )\n   )", "user": "5564709ee4b0c656e3ff1807"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "55640c62e4b0c656e3ff17fd"}, {"problem": 38, "code": "(fn [& args]\n  (let [arg-coll (vec args)]\n    (reduce \n     (fn [a b]\n              (if (> a b)\n                       a\n                       b)) arg-coll)\n    ))", "user": "55647fb1e4b0c656e3ff1809"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) 0 args))", "user": "5566434ee4b0c656e3ff182f"}, {"problem": 38, "code": "(fn max-val [& s] ( last (sort (vec s) ) ))", "user": "52c70127e4b0c2d177d6211a"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [acc e] (if (> acc e) acc e)) args))", "user": "55660248e4b0c656e3ff1824"}, {"problem": 38, "code": "(comp first reverse sort list)", "user": "554d04bbe4b0a04f792995b4"}, {"problem": 38, "code": "(fn [& s] (reduce #( if (> %1 %2) %1 %2) (seq s) ))", "user": "556880dae4b0c656e3ff1856"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "user": "524f3e6de4b0541d1855b805"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> % %2) % %2) xs))", "user": "5566463ee4b0c656e3ff1831"}, {"problem": 38, "code": "(fn [& x]\n  (last (sort x) ))", "user": "55634f38e4b0c656e3ff17e8"}, {"problem": 38, "code": "(fn [& more] (first (sort > more)))", "user": "55685aa3e4b0c656e3ff1851"}, {"problem": 38, "code": "(fn [& x]\n  (last (sort x)))", "user": "55630cc1e4b0c656e3ff17e0"}, {"problem": 38, "code": "#(-> %& sort reverse first)", "user": "556b83fbe4b09a3098a524ee"}, {"problem": 38, "code": "(fn [x & y]\n   (cond\n    (nil? y) x\n    (> x (first y)) (recur x (next y))\n    :else (recur (first y) (next y))))", "user": "556c70dae4b09a3098a524fd"}, {"problem": 38, "code": "(fn maximum\n  ([x]\n   x)\n  ([x & r]\n    (reduce #(if (> %1 %2) \n                 %1 \n                 %2) \n            x r)\n   )\n)", "user": "556be3dce4b09a3098a524f7"}, {"problem": 38, "code": "(fn ddd [& lst] \n  (reduce #(if (> % %2)\n            %\n            %2\n            ) lst))", "user": "52c911dde4b0c2d177d6213a"}, {"problem": 38, "code": "(fn max-val [& args] \n  (reduce #(if (< % %2) %2 %) args))", "user": "55623feae4b0c656e3ff17d4"}, {"problem": 38, "code": "#(loop [max_value -1\n       values %&]\n  (if (> (count values) 0) (recur (if (< max_value (first values)) (first values) max_value) (rest values))\tmax_value)\n )", "user": "556523fce4b0c656e3ff1815"}, {"problem": 38, "code": "(fn [& xs] (last (sort xs)))", "user": "50a8bb65e4b0deba384a58bd"}, {"problem": 38, "code": "(fn biggest [f & nums]\n  (if-not (empty? nums) \n    (if (> f (apply biggest nums)) f (apply biggest nums)) \n    f))", "user": "53a0b730e4b0ca733b9744b5"}, {"problem": 38, "code": "(fn mymax\n  ([x y]\n  (if (> x y) x y))\n  ([x y & more]\n  (reduce mymax(mymax x y) more)))", "user": "550f70bee4b06e50f9beb177"}, {"problem": 38, "code": "(fn [& args] (last(sort args)))", "user": "556dd141e4b09a3098a52509"}, {"problem": 38, "code": "#(last (sort %&))", "user": "520e46cee4b066f3ea161c97"}, {"problem": 38, "code": "(fn[& args](first (reverse (sort args))))", "user": "5565d5e4e4b0c656e3ff181f"}, {"problem": 38, "code": "(fn \n  [& args]\n  (reduce \n    (fn \n      [p q]\n      (if (> p q) p q)) args))", "user": "555df9c8e4b0a2eb076a39b2"}, {"problem": 38, "code": "(fn [& col]\n  (reduce #(if (> % %2) % %2) col))", "user": "5256dcc0e4b0541d1855ba3c"}, {"problem": 38, "code": "(fn [& p] (reduce #(if (> %1 %2) %1 %2) p))", "user": "5568a1bde4b0c656e3ff1857"}, {"problem": 38, "code": "(fn [& s] (reduce (fn [a b] (if (> a b) a b)) s))", "user": "556766c1e4b0c656e3ff1840"}, {"problem": 38, "code": "( fn [& args]\n  (reduce\n    (fn [x y]\n      (if (> x y) x y))\n    args))", "user": "55702081e4b09a3098a52529"}, {"problem": 38, "code": "(fn[x1 & xn] (reduce #(if (> % %2) % %2) x1 xn))", "user": "556cc24ae4b09a3098a52502"}, {"problem": 38, "code": "(fn[& args] \n   (loop [i 0 maxi (first args)]\n     (if (= i (count args))\n       maxi\n       (recur (inc i) \n              (if \n                (> (nth args i) maxi) \n                (nth args i) \n                maxi)))\n     ))", "user": "529de065e4b04e0c58e87b84"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "55702247e4b09a3098a5252a"}, {"problem": 38, "code": "(fn [& x] (reduce (fn [x & liste](if (> x (first liste)) x (first liste))) x))", "user": "556f2009e4b09a3098a52519"}, {"problem": 38, "code": "(fn\n  [& args]\n  (reduce\n   (fn\n     [acc x]\n     (if (> x acc)\n       x\n       acc))\n   args))", "user": "548749cee4b0e286459a11c4"}, {"problem": 38, "code": "(fn [& arr] \n    (reduce (fn [a b] (if (> a b) a b)) arr)\n    )", "user": "556f443be4b09a3098a5251e"}, {"problem": 38, "code": "(fn [& numbers]\n  (loop [remaining-numbers numbers\n         maximum 0]\n    (if (empty? remaining-numbers)\n      maximum\n      (let [[number & remaining] remaining-numbers]\n        (if (> number maximum)\n          (recur remaining number)\n          (recur remaining maximum))))))", "user": "5189bf9ee4b0288ada3dbdaf"}, {"problem": 38, "code": "(fn [& s] (last (sort s)))", "user": "555ee545e4b0a2eb076a39bd"}, {"problem": 38, "code": "(fn [ & xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "556a3243e4b09a3098a524de"}, {"problem": 38, "code": "#(last (sort %&))", "user": "556189a6e4b0c656e3ff17c9"}, {"problem": 38, "code": "(fn[& coll](last (sort coll)))", "user": "55654e17e4b0c656e3ff1818"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "53db43aae4b0e771c30254b1"}, {"problem": 38, "code": "(fn [ & prm]  (reduce #(if (> % %2) % %2) prm) )", "user": "555176e5e4b0deb715856deb"}, {"problem": 38, "code": "(fn my-max [x & xs]\n  (cond (empty? xs) x\n        (> x (first xs)) (apply my-max (cons x (rest xs)))\n        true (apply my-max xs)))", "user": "5572fdd7e4b0aa18f790f3f1"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "556f35fee4b09a3098a5251a"}, {"problem": 38, "code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) s))", "user": "5571d6e5e4b09a3098a5253f"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "55635886e4b0c656e3ff17e9"}, {"problem": 38, "code": "(fn[& args]\n  (let [length (count args)]\n  (loop [maximum 0 current (first args) remaining (rest args)]\n    (if (= remaining '()) maximum\n\t\t(let [maximus (if (> current maximum) current maximum)]\n          (recur maximus (first remaining)(rest remaining)))\n      )\n    )\n  ))", "user": "522b1993e4b0d34ee08e71b6"}, {"problem": 38, "code": "(fn [& num-list] (last (sort num-list)))", "user": "4f74fed2e4b0fbe0118ec553"}, {"problem": 38, "code": "(fn [& vals]\n  (reduce \n   #(if (< %1 %2) %2 %1)\n   (first vals)\n   (rest vals)))", "user": "53065acbe4b02e8216869792"}, {"problem": 38, "code": "#(first (sort-by - (seq %&)))", "user": "5554f886e4b0deb715856e10"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "user": "52a4879ce4b0c58976d9abdb"}, {"problem": 38, "code": "#(first (reverse (sort %&)))", "user": "552712e7e4b0ffed3738f92a"}, {"problem": 38, "code": "(fn\n  [& params]\n  (reduce #(if (> %1 %2) %1 %2) params))", "user": "556ff203e4b09a3098a52526"}, {"problem": 38, "code": "(fn mymax\n\n  ([x] x)\n  ([x y]  (if (> x y) x y) )\n  ([x y & more]\n   (reduce mymax (mymax x y) more)))", "user": "526f670ce4b03e8d9a4a7365"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %2 %1) %2 %1) xs))", "user": "55478ce2e4b0a04f7929954e"}, {"problem": 38, "code": "(comp last sort list)", "user": "5576fee3e4b05c286339e078"}, {"problem": 38, "code": "(fn maxx [& args]\n  (reduce (fn [a b](if (> a b) a b)) args)\n)", "user": "5559b443e4b0deb715856e3c"}, {"problem": 38, "code": "(fn sm-max [& x]\n  (if (= 1 (count x))\n    (first x)\n    (let  [a (first x) b (apply sm-max (rest x))]  (if (> a b) a b)  )\n  ) \n)", "user": "5575aae2e4b05c286339e065"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "5416b4a2e4b01498b1a71a01"}, {"problem": 38, "code": "(fn [& args] \n\t(first (reverse (sort args))))", "user": "55770a11e4b05c286339e079"}, {"problem": 38, "code": "(fn [& s] (reduce #(if \n                     (> %1 %2)\n                     %1\n                     %2\n                     ) 0 s))", "user": "52503747e4b0541d1855b828"}, {"problem": 38, "code": "#(reduce (fn [a b] 0  (if (> a b) a b)) %&   )", "user": "556f48b9e4b09a3098a5251f"}, {"problem": 38, "code": "(fn\n  [& nums]\n  (reduce #(if (> %1 %2) %1 %2) (first nums) (rest nums)))", "user": "50800e49e4b089ade05efbda"}, {"problem": 38, "code": "(fn [& xs] (last (sort xs)))", "user": "55769940e4b05c286339e070"}, {"problem": 38, "code": "(comp last sort list)", "user": "5579638fe4b05c286339e094"}, {"problem": 38, "code": "(fn\n   ([x] x)\n   ([x y]  (if (> x y) x y))\n  ([x y & more ] (reduce #(if (> %1 %2) %1 %2) x (conj more y))))", "user": "554f7ef2e4b00713264bd9a1"}, {"problem": 38, "code": "(fn [x y & more]\n  (let [\n        mini-max (fn [x y] (cond (nil? y) x (nil? x) y :else (if (> x y) x y)))\n        nums (flatten (list x y more))\n        ]\n    (reduce mini-max nums)))", "user": "4e9cfeb5535dbda64a6f6b85"}, {"problem": 38, "code": "(fn [& more]\n(reduce\n(fn\n[x y]\n(if (< x y) y x)\n)\nmore\n)\n)", "user": "55306b8ae4b076ab5578f812"}, {"problem": 38, "code": "(fn [& xs](reduce #(if (> % %2) % %2) xs))", "user": "5579bc24e4b05c286339e098"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "557b6773e4b05c286339e0b4"}, {"problem": 38, "code": "(fn [& args]\n  (reduce \n     #(if (> %2 %1) %2 %1)\n   args))", "user": "547f49fae4b0c51c1f4d731b"}, {"problem": 38, "code": "(fn[& nums] (reduce (fn[x y] (if(> x y) x y)) nums))", "user": "55757e81e4b05c286339e063"}, {"problem": 38, "code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) more))", "user": "53fc63dce4b0de5c4184859f"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce #(if (> %1 %2) %1 %2) nums))", "user": "557a1e18e4b05c286339e09e"}, {"problem": 38, "code": "(fn f [a & m] (reduce #(if (< %1 %2) %2 %1) a m))", "user": "557bd432e4b05c286339e0bb"}, {"problem": 38, "code": "(fn my-max [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "557bcce4e4b05c286339e0b9"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5573360ce4b0aa18f790f3f6"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "52b89d55e4b07a9af57922b3"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "557954aae4b05c286339e092"}, {"problem": 38, "code": "(fn [& more] (reduce (fn [x y] (if (> x y) x y)) more))", "user": "54edfebbe4b024c67c0cf869"}, {"problem": 38, "code": "(fn [& args] (-> args sort last))", "user": "541b41d1e4b01498b1a71a65"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "557dbc9de4b05c286339e0cd"}, {"problem": 38, "code": "(fn mymax [x & y] (if (= y nil) \n                      x \n                      (if (> x (first y)) \n                        (apply mymax x (next y)) \n                        (apply mymax (first y) (next y)))))", "user": "5576e78de4b05c286339e075"}, {"problem": 38, "code": "(fn \n  ([& x]\n\n  (let [m 0]\n    (loop [m m x x]\n      (if (empty? x)\n        m\n        (let\n          [one (first x)]\n            (recur  (if (> one m) one m) (rest x))\n          )\n        )\n      )\n    ))\n\n  )", "user": "550fb0bfe4b06e50f9beb17b"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort (into '() args))))", "user": "54570dfae4b080a794c2c889"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %2 %1) %2 %1) 0 xs))", "user": "55805a2ee4b05c286339e0ea"}, {"problem": 38, "code": "(fn my-max\n  [& args]\n  (reduce (fn [n1 n2] (if (< n1 n2) n2 n1)) 0 args))", "user": "506f0968e4b09350ab4199f5"}, {"problem": 38, "code": "(fn foo [& args] (last (sort (apply conj #{} args))))", "user": "557e8326e4b05c286339e0d7"}, {"problem": 38, "code": "#(last (sort %&))", "user": "55816a70e4b05c286339e0f8"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce #(if (> %1 %2)\n               %1\n               %2) nums))", "user": "4f04664a535dcb61093f6bc1"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [x y] (if (< x y) y x)) args)\n)", "user": "5581a6dae4b05c286339e0fe"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "5037534de4b0af0658af77aa"}, {"problem": 38, "code": "(fn [& all]\n  (reduce (fn [a b] (if (> a b) a b)) all))", "user": "5581747fe4b05c286339e0fa"}, {"problem": 38, "code": "(fn[& coll] (reduce (fn[v greatest]\n                    (if (> v greatest) v greatest))\n                  coll))", "user": "4f6d23cde4b07046d9f4efc6"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "557f7c8be4b05c286339e0e0"}, {"problem": 38, "code": "(fn [& coll]\n  (loop [maximum 0 coll coll]\n    (if (empty? coll)\n      maximum\n      (let [current (first coll)]\n        (recur (if (> current maximum) current maximum) (rest coll))))))", "user": "55842c7ee4b05c286339e11d"}, {"problem": 38, "code": "(fn find-max [head & tail]\n  (loop [biggest head\n         remained tail]\n    (cond (empty? remained)\n       biggest\n     :else \n       (if (< biggest (first remained))\n          (recur (first remained) (rest remained))\n          (recur biggest (rest remained))))))", "user": "5553b729e4b0deb715856e05"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "558378dce4b05c286339e115"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a c] (if (> a c) a c)) 0 args))", "user": "555883c5e4b0deb715856e2d"}, {"problem": 38, "code": "(fn [x y & args]\n  (if (< x y)\n    y\n    x))", "user": "5583888ae4b05c286339e117"}, {"problem": 38, "code": "(fn [x & more] (reduce #(if (< %1 %2) %2 %1) x more))", "user": "5253de67e4b0541d1855b939"}, {"problem": 38, "code": "(fn max-val [& values]\n  (loop [m (first values)\n         i 0]\n    (if (< i (count values))\n      (if (> (nth values i) m)\n        (recur (nth values i) (inc i))\n        (recur m (inc i)))\n      m)))", "user": "55845fb6e4b04192f3441eed"}, {"problem": 38, "code": "(fn max* [& nums]\n  (reduce \n   (fn [x y] (if (> x y) x y)) \n   nums))", "user": "5392500ae4b0b51d73faaeaf"}, {"problem": 38, "code": "(fn [& s] (last (sort s)))", "user": "54c9571ee4b045293a27f66b"}, {"problem": 38, "code": "(fn m \n  ([n]\n   n)\n  ([n & r]\n   (let [x (apply m r)]\n     (if (> n x)\n       n\n       x))))", "user": "50ec409ce4b04edc33777045"}, {"problem": 38, "code": "(fn max-value [& more]\n  (loop [largest (first more)\n         coll (rest more)]\n    (if (empty? coll)\n      largest\n      (if (< largest (first coll))\n        (recur (first coll) (rest coll))\n        (recur largest (rest coll))))))", "user": "556a6137e4b09a3098a524e0"}, {"problem": 38, "code": "(fn my-max1\n  ([x & z] (reduce (fn [x y] (if (> x y) x y)) x z)))", "user": "557e9d17e4b05c286339e0d8"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (> %1 %2) %1 %2) x xs))", "user": "51bfc1f0e4b0e49ef9037dd4"}, {"problem": 38, "code": "(fn [& r]\n  (loop [li r m (dec (first r))]\n    (if (empty? li)\n      m\n      (recur (rest li) (if (> (first li) m) (first li) m)))))", "user": "52979551e4b02ebb4ef75043"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "55838353e4b05c286339e116"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5586e890e4b059ccff29b1d9"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "529c722de4b04e0c58e87b63"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5585aa48e4b001b0851d7510"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "5537c939e4b09218d5f44fd2"}, {"problem": 38, "code": "(fn [& x]  (reduce (fn [x y] (if (> x y) x y)) x) )", "user": "55818b0ee4b05c286339e0fb"}, {"problem": 38, "code": "(fn [& x]\n  (reduce (fn [x y] (if (> y x) y x)) x))", "user": "55885edae4b059ccff29b1f6"}, {"problem": 38, "code": "(fn [& tail]\n  (reduce #(if (> %2 %1) %2 %1) tail))", "user": "557ca912e4b05c286339e0c8"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "558466fce4b04192f3441eee"}, {"problem": 38, "code": "(fn [& the-args]\n  (reduce (fn [x y]\n            (if (> x y)\n              x\n              y)) the-args))", "user": "557e2eafe4b05c286339e0d2"}, {"problem": 38, "code": "(fn [x & other] (reduce #(if(> %1 %2) %1 %2) x other))", "user": "55896a0ce4b059ccff29b204"}, {"problem": 38, "code": "(fn [& args]\n   (reduce #(if (> %1 %2) %1 %2) 0 args))", "user": "55895eade4b059ccff29b202"}, {"problem": 38, "code": "(fn [& more] (reduce #(if (< % %2) %2 %) 0 more))", "user": "551d8796e4b07993ea3788ec"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5589e88ae4b0277789237610"}, {"problem": 38, "code": "#(last (sort %&))", "user": "55893ebbe4b059ccff29b1ff"}, {"problem": 38, "code": "(fn [& arg] (last (sort arg)))", "user": "5587d8b3e4b059ccff29b1e8"}, {"problem": 38, "code": "(fn [& rest]\n  (reduce #(if (> %1 %2) %1 %2) rest))", "user": "558bb38fe4b0277789237631"}, {"problem": 38, "code": "(fn[& args] ( last (sort args) ))", "user": "5564c113e4b0c656e3ff180d"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> % %2) % %2) args))", "user": "558aabbfe4b0277789237621"}, {"problem": 38, "code": "(fn [& parms] (reduce #(if (> %1 %2) %1 %2) (seq parms)))", "user": "4fffa422e4b0678c553fc404"}, {"problem": 38, "code": "(fn [x & y](reduce #(if (> %1 %2) %1 %2) x y))", "user": "558a81fbe4b027778923761c"}, {"problem": 38, "code": "(fn mymax\n\t[& args]\n\n\t(reduce \n\t\t#(if (< %1 %2) \n\t\t\t%2 \n\t\t\t%1) \n\t\t0\n\t\targs)\n\n\t)", "user": "55897fe2e4b059ccff29b205"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "5589a735e4b059ccff29b206"}, {"problem": 38, "code": "(fn [& v] (last (sort v)))", "user": "558b41fce4b0277789237628"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> y x) y x)) args))", "user": "558b50d5e4b027778923762b"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "558a0194e4b0277789237613"}, {"problem": 38, "code": "(fn [& args] \n   (reduce #(if (> %1 %2) %1 %2) args))", "user": "558ed227e4b0277789237658"}, {"problem": 38, "code": "#(last(sort %&))", "user": "53e76363e4b036ad0777e47b"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "558eec3ae4b027778923765c"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "558fb14ee4b0277789237664"}, {"problem": 38, "code": "(fn [& l] (reduce #(if (> %1 %2) %1 %2) l))", "user": "5576006ae4b05c286339e068"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5590e461e4b0277789237675"}, {"problem": 38, "code": "(fn [& x] (reduce (fn [a b] (if (> a b) a b)) x))", "user": "55729a78e4b09a3098a52547"}, {"problem": 38, "code": "(fn my-max [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "55916d7be4b0604b3f94d57d"}, {"problem": 38, "code": "(fn mrmax\n  ([x y] (if (> x y) x y))\n  ([x y & more] (reduce mrmax (mrmax x y) more)))", "user": "559057c4e4b027778923766e"}, {"problem": 38, "code": "(fn [x & xs]\n  (cond\n   (nil? xs) x\n   (> x (first xs)) (recur x (next xs))\n   :else (recur (first xs) (next xs))))", "user": "55915fe9e4b0604b3f94d579"}, {"problem": 38, "code": "(fn [& l]\n  (loop [x l m nil]\n    (if (empty? x)\n      m\n      (if (or (nil? m) (> (first x) m))\n        (recur (rest x) (first x))\n        (recur (rest x) m)))))", "user": "5590e55de4b0277789237676"}, {"problem": 38, "code": "(fn [& more] \n  \t(reduce (fn [m n]  do (prn n m)  (if (> n m) n m)) more)\n  )", "user": "5577318ce4b05c286339e07c"}, {"problem": 38, "code": "(fn [& nums]\n     (first (sort > nums)))", "user": "53c0f4dee4b00fb29b221259"}, {"problem": 38, "code": "(fn [& args] (-> args sort reverse first))", "user": "558bdcefe4b0277789237633"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [x y] (if (> x y)\n                      x\n                      y)) Double/NEGATIVE_INFINITY args))", "user": "51d55598e4b01da06753aa8e"}, {"problem": 38, "code": "(fn [& more] (last (sort more)))", "user": "55921c21e4b0604b3f94d588"}, {"problem": 38, "code": "(comp last sort list)", "user": "558d76d4e4b0277789237644"}, {"problem": 38, "code": "(fn [& args] (last (sort (vec args))))", "user": "558ffd47e4b0277789237669"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5509bd6ee4b06e50f9beb120"}, {"problem": 38, "code": "(fn [& args]\n  (loop [r args m 0]\n        (if (empty? r)\n          m\n          (recur (rest r)\n                 (if (> m (first r))\n                   m\n                   (first r))))))", "user": "558f4fbae4b0277789237661"}, {"problem": 38, "code": "(comp last sort list)", "user": "559279b7e4b0604b3f94d58c"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) (vec args)))", "user": "55893b09e4b059ccff29b1fe"}, {"problem": 38, "code": "(fn [& s]\n  (loop [m nil\n         s s]\n    (if (empty? s)\n      m\n      (let [val (first s)]\n        (recur (if (or (nil? m) (> val m)) val m) (rest s))))))", "user": "531c6e72e4b08068f379eda0"}, {"problem": 38, "code": "(fn ([& xs] (last (sort xs))))", "user": "5590ebb1e4b0277789237677"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "user": "558df2ebe4b0277789237649"}, {"problem": 38, "code": "(fn [h & t] (reduce #(if (> %1 %2) %1 %2) h t))", "user": "5578c67fe4b05c286339e08d"}, {"problem": 38, "code": "(fn my-max [x & args] \n  (reduce #(if (> %1 %2) \n             %1 \n             %2) (conj args x) ))", "user": "557e6b73e4b05c286339e0d6"}, {"problem": 38, "code": "(fn mymax\n  ([x y]\n     (if (> x y) x y))\n  ([x y & more]\n     (reduce mymax (mymax x y) more)))", "user": "554c1708e4b0a04f792995a0"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (< %1 %2) %2 %1) x) )", "user": "55882c84e4b059ccff29b1f2"}, {"problem": 38, "code": "(fn [& args] (last (sort args)) )", "user": "4fc5eb7fe4b0ee37620e1803"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [x y]\n            (if (> x y)\n              x\n              y)) args))", "user": "558a3fade4b0277789237616"}, {"problem": 38, "code": "(fn [& a] (last (sort a)))", "user": "55079e55e4b021ccfedb96aa"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [x y]\n            (if (> x y)\n              x\n              y)\n            )\n          args)\n  )", "user": "55933c7ae4b0c79f6e1db938"}, {"problem": 38, "code": "#(last (sort %&))", "user": "55941019e4b0c79f6e1db94b"}, {"problem": 38, "code": "(fn[& args] (last(sort args)))", "user": "5585f088e4b001b0851d7513"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "5594f8aee4b0c79f6e1db95c"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (< a b) b a)) args))", "user": "525523e3e4b0541d1855b9cc"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [acc x] (if (> x acc) x acc)) 0 args) )", "user": "5592bf9fe4b0c79f6e1db933"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "558ea13be4b0277789237654"}, {"problem": 38, "code": "(fn [& etc]\n  (reduce (fn [l r]\n            (if (> l r)\n              l\n              r))\n          etc))", "user": "55934bebe4b0c79f6e1db93b"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "5593619ae4b0c79f6e1db93c"}, {"problem": 38, "code": "(fn [& list](reduce (fn [x y]\n          (if (> x y)\n            (identity x)\n            (identity y))) list))", "user": "55871c62e4b059ccff29b1e0"}, {"problem": 38, "code": "(fn [& s]\n  (last (sort s)))", "user": "5595ffabe4b0c79f6e1db972"}, {"problem": 38, "code": "(comp last sort list)", "user": "55496eeae4b0a04f79299569"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (< %1 %2) %2 %1) xs))", "user": "559622cee4b0c79f6e1db975"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5598a15ae4b031d6649c9b9d"}, {"problem": 38, "code": "#(last (sort %&))", "user": "54de16cae4b024c67c0cf79c"}, {"problem": 38, "code": "(fn [f & r]\n  (let[f f\n      r r]\n    (if (= 0 (count r))\n      f\n      (recur (if (> f (first r))\n               f\n               (first r))\n             (next r)))))", "user": "5594523be4b0c79f6e1db951"}, {"problem": 38, "code": "(fn [& nums] (->> nums (into (sorted-set)) last))", "user": "4f5599dfe4b0a7574ea71806"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (>= %1 %2) %1 %2) args))", "user": "55995fa7e4b031d6649c9ba9"}, {"problem": 38, "code": "(fn[& n] (reduce #(if (> %1 %2) %1 %2) n))", "user": "55950c5fe4b0c79f6e1db95e"}, {"problem": 38, "code": "(fn p38 [& args]\n  (last (sort args)))", "user": "5400e918e4b0de5c41848619"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5587ddd9e4b059ccff29b1ea"}, {"problem": 38, "code": "(fn [& arg] ( loop[coll arg maxNumber 0] ( if(> (first coll) maxNumber) (recur (rest coll) (first coll)) maxNumber   ) ) )", "user": "55995d88e4b031d6649c9ba8"}, {"problem": 38, "code": "(fn [& args] \n  (reduce (fn [a b] (if (> a b) a b)) args))", "user": "55996253e4b031d6649c9baa"}, {"problem": 38, "code": "(fn [arg & args] (reduce (fn [acc el] (if (< acc el) el acc)) arg args))", "user": "559972d1e4b031d6649c9bab"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) 0 args))", "user": "4e246abe535d04ed9115e827"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "559b55d6e4b066d22e731f54"}, {"problem": 38, "code": "(fn [& L]\n    (reduce (fn [a b] (if (> a b) a b))\n            L))", "user": "559c13c5e4b066d22e731f61"}, {"problem": 38, "code": "(fn [x & args] (last (sort (cons x args))))", "user": "51e60684e4b0efabf93c02e0"}, {"problem": 38, "code": "(fn [& a] (reduce (fn [x y] (if (> x y) x y)) a))", "user": "5595071ae4b0c79f6e1db95d"}, {"problem": 38, "code": "(fn f [& s]\n  (reduce (fn [acc s*] (if (> s* acc) s* acc)) \n          (first s) \n          (rest s)))", "user": "54117417e4b01498b1a719c5"}, {"problem": 38, "code": "(comp last sort list)", "user": "559647ebe4b0c79f6e1db977"}, {"problem": 38, "code": "(fn f [& sq]\n  (if (empty? (rest sq)) (first sq)\n                         (let [[x & tail] sq, y (apply f tail)]\n                           (if (> x y) x y))))", "user": "55815973e4b05c286339e0f6"}, {"problem": 38, "code": "#(last (sort %&))", "user": "559b2ad1e4b066d22e731f4e"}, {"problem": 38, "code": "(fn [& args]\n  (loop [maximum nil\n         sq-it args]\n    (let [new (first sq-it)]\n      (if (empty? sq-it)\n        maximum\n        (if (nil? maximum)\n          (recur new\n                 (rest sq-it))\n          (recur (if (> new maximum)\n                   new\n                   maximum)\n                 (rest sq-it)))))))", "user": "559d33b3e4b0ec2b359424d9"}, {"problem": 38, "code": "#(last (sort (vec %&)))", "user": "559d3d22e4b0ec2b359424da"}, {"problem": 38, "code": "(fn [& args]\n  (loop [maxi (first args) lst args]\n    (if (empty? lst)\n      maxi\n      (recur (if (> (first lst) maxi) (first lst) maxi) (rest lst)))))", "user": "55929e89e4b0604b3f94d58e"}, {"problem": 38, "code": "(fn find_max [& args]\n  (reduce \n   (fn [x y]\n     (if (> x y)\n       x\n       y))args))", "user": "559bdf16e4b066d22e731f5a"}, {"problem": 38, "code": "(fn [& col] (reduce #(if (> %1 %2) %1 %2) col))", "user": "54f3d6c7e4b050824f58f5cb"}, {"problem": 38, "code": "(fn [firstElement & restOfElements] \n      (loop [elements restOfElements maxVal firstElement]\n        (if (empty? elements)\n          maxVal\n          (recur (drop 1 elements) \n             (if (> maxVal (first elements)) maxVal (first elements))\n          ))))", "user": "55989c25e4b031d6649c9b9b"}, {"problem": 38, "code": "(fn [& numbers]\n  (loop [nums numbers maximum -999999999]\n    (if (empty? nums) maximum\n    (recur (rest nums) (if (< maximum (first nums)) (first nums) maximum)))))", "user": "5582dfb6e4b05c286339e10d"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "554b8b6be4b0a04f7929958b"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "554b8b78e4b0a04f7929958d"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %2 %1) %2 %1) 0 x))", "user": "559e25fde4b08a52bd4f97d0"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5595e038e4b0c79f6e1db971"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "55868660e4b059ccff29b1d4"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [acc x] (if (> acc x) acc x))\n          (first args)\n          (rest args)))", "user": "5576f299e4b05c286339e077"}, {"problem": 38, "code": "(fn [& n] (reduce #(cond (> %1 %2) %1 :else %2) 0 n))", "user": "559ff3b1e4b0acc240e314ed"}, {"problem": 38, "code": "(fn foo [x & more]\n  (prn x)\n  (prn more)\n  (loop [hi x\n         i 0]\n    (if (< i (count more))\n      (if (> hi (nth more i))\n        (recur hi (inc i))\n        (recur (first more) (inc i)))\n      hi )))", "user": "559d6288e4b0ec2b359424dc"}, {"problem": 38, "code": "(fn my-max\n  [& sq]\n  (last (sort sq)))", "user": "5537f30fe4b09218d5f44fd8"}, {"problem": 38, "code": "(fn[& x] (last (sort x)))", "user": "55342ee0e4b09218d5f44f98"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "55a0d7e0e4b0acc240e31503"}, {"problem": 38, "code": "#(first (sort > %&))", "user": "559ffabae4b0acc240e314ef"}, {"problem": 38, "code": "(fn f ([x] x) ([x y] (if (> x y) x y)) ([x y & m] (apply f (f x y) m)))", "user": "559046cee4b027778923766d"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "55a0fd18e4b0acc240e31507"}, {"problem": 38, "code": "(fn [& stuff] (reduce (fn [m x] (if (> x m) x m)) stuff))", "user": "55a12668e4b0acc240e3150b"}, {"problem": 38, "code": ";; this looks like a recursion problem!\n;; this function takes a number and a seq\n;; it starts off with zero\n;; it compares the first of the seq with its number\n;; if the seq is empty, return the seq\n;; if the seq is not empty, then:\n;; if the first of the seq is less than or equal to the supplied number,\n;; call the function again with the supplied number and the rest of the seq\n;; if the first of the seq is greater than the supplied number\n;; call the function again with the first of the seq and the rest of the seq\n;; e.g.: (get-max 0 '(0 1 3 2 4 1))\n;; then: (get-max (bigger-of-two 0 (first '(0 1 3 2 4 1)) (rest '(0 1 3 2 4 1))\n;; then: (get-max (bigger-of-two 0 (first '(1 3 2 4 1)) (rest '(1 3 2 4 1))\n;; then: (get-max (bigger-of-two 1 (first '(3 2 4 1)) (rest '(3 2 4 1))\n;; then: (get-max (bigger-of-two 3 (first '(2 4 1)) (rest '(2 4 1))\n;; then: (get-max (bigger-of-two 3 (first '(4 1)) (rest '(4 1))\n;; then: (get-max (bigger-of-two 4 (first '(1)) (rest '(1))\n;; then: (get-max (bigger-of-two 4 (first '()) (rest '())  ;; empty seq means return the num aka 4.\n\n(fn [& nums]\n  (loop [max-num 0\n         nums nums]\n    (cond (empty? nums)\n          max-num\n          :else\n          (cond (> max-num (first nums))\n                (recur max-num (rest nums))\n                :else\n                (recur (first nums) (rest nums))))))", "user": "55a152fce4b0acc240e31510"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5585ff97e4b001b0851d7515"}, {"problem": 38, "code": "(fn [& vals]\n  (reduce #(if (> %1 %2) %1 %2) vals))", "user": "524d91eae4b0a16e35cf6dee"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "55a2bcebe4b0acc240e31529"}, {"problem": 38, "code": "(fn [& args]\n  (letfn [(gre-va [n o]\n                  (if (> n o) n \n                    o))]\n    (reduce gre-va args)))", "user": "55a1ba5ee4b0acc240e31517"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "55a346e8e4b0acc240e31532"}, {"problem": 38, "code": "(fn [x & args]\n  (reduce #(if (> %1 %2) %1 %2) (cons x args)))", "user": "5594e0e3e4b0c79f6e1db95b"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "55a35ef4e4b0acc240e31535"}, {"problem": 38, "code": "#(last (sort %&))", "user": "55a1d7f6e4b0acc240e31519"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "553527ede4b09218d5f44fab"}, {"problem": 38, "code": "(fn red ([x] x) ([x y] (if (> x y) x y)) ([x y & more] (reduce red (red x y) more)))", "user": "55a02d8ae4b0acc240e314f2"}, {"problem": 38, "code": "(fn max-param [& params]\n  (reduce (fn [x y]\n            (if (> x y) x y))\n          0\n          params))", "user": "552bd5c2e4b0ffed3738f969"}, {"problem": 38, "code": "(fn [& x] (reduce (fn [x y] (if (< x y) y x)) x))", "user": "55a59ebae4b0acc240e3154d"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y]  (if (> x y) x y)) args))", "user": "55a21be1e4b0acc240e3151e"}, {"problem": 38, "code": "(fn[& l](reduce #(if(> % %2)% %2)l))", "user": "503e91d4e4b06c4e0e1fa269"}, {"problem": 38, "code": "#(reduce (fn [x y] (if (> x y) x y)) %&)", "user": "55a0e139e4b0acc240e31504"}, {"problem": 38, "code": "(fn [& s]\n  (let [get-max (fn [x y]\n                  (if (> x y) x y))]\n    (reduce get-max s)))", "user": "55a62092e4b0acc240e31554"}, {"problem": 38, "code": "(fn [& coll]\n  (reduce\t\n \t(fn [m v]\n   \t\t(if (< m v) v m)) coll))", "user": "544e5b22e4b0e39780006983"}, {"problem": 38, "code": "(fn [& coll]\n  (loop [mx 0 coll coll]\n    (if (= coll ())\n      mx\n      (recur (if (> (first coll) mx) (first coll) mx) (rest coll))\n             )))", "user": "55a74d46e4b09e57187da2a3"}, {"problem": 38, "code": "(fn [& args] \n  (last (sort args)))", "user": "52df1d62e4b09f7907dd13fb"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %2 %) %2 %) args ))", "user": "4e6a23d0535d8ccf87e9fea0"}, {"problem": 38, "code": "(fn [ & xs] (reduce (fn [acc x] (if (> x acc) x acc)) xs))", "user": "551e8627e4b08d5046aa8a45"}, {"problem": 38, "code": "(fn[& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "4f9e830ae4b0dcca54ed6d2c"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5592dc6be4b0c79f6e1db935"}, {"problem": 38, "code": "#(last (sort %&))", "user": "553beff9e4b09218d5f4500d"}, {"problem": 38, "code": "(fn\n  [head-elem & rest-elems]\n  (loop [max-elem head-elem\n         rest-elems rest-elems]\n    (let [head-elem (first rest-elems)]\n      (if (= head-elem nil)\n        max-elem\n        (if (> head-elem max-elem)\n          (recur head-elem (rest rest-elems))\n          (recur max-elem (rest rest-elems)))))))", "user": "52fe31d5e4b047fd55837038"}, {"problem": 38, "code": "(fn [& n] (let [[x & xs] n] (if (empty? n) '() (reduce (fn [a b] (if (< a b) b a)) x xs))))", "user": "55aa1637e4b0988bba2ad949"}, {"problem": 38, "code": "(fn [& vals] (reduce #(if (> %1 %2) %1 %2) vals))", "user": "55aa5f73e4b0988bba2ad94b"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) (first args) args))", "user": "559468cbe4b0c79f6e1db954"}, {"problem": 38, "code": "(fn [& args] (-> (seq args) sort last))", "user": "55a1683ce4b0acc240e31513"}, {"problem": 38, "code": "(fn [& rest]\n    (reduce\n        (fn [current-max current-num] (if (> current-max current-num) current-max current-num))\n        rest))", "user": "55a5c3bee4b0acc240e3154e"}, {"problem": 38, "code": "(fn [x & xs](reduce #(if (< %1 %2) %2 %1) x xs))", "user": "5422979be4b01498b1a71ac2"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> % %2) % %2) args))", "user": "55ab8c2de4b0988bba2ad954"}, {"problem": 38, "code": "(fn[& args] (first (sort > args)))", "user": "5597cc26e4b031d6649c9b93"}, {"problem": 38, "code": "#(last (sort %& ))", "user": "5593b10ce4b0c79f6e1db943"}, {"problem": 38, "code": "(fn [x & xs]\n    (letfn [(mx [curr-max xs]\n              (if (empty? xs)\n                curr-max\n                (let [curr-num (first xs)]\n                  (recur\n                   (if (> curr-num curr-max) curr-num curr-max)\n                   (rest xs)))))]\n      (mx x xs)))", "user": "55ac07afe4b03311e7b7328f"}, {"problem": 38, "code": "(fn [& args] (last (sort (seq args))))", "user": "55380eeae4b09218d5f44fd9"}, {"problem": 38, "code": "(fn [& args] \n  (reduce (fn [a b] (if (> a b) a b)) args))", "user": "559c4236e4b066d22e731f67"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "55ab07e0e4b0988bba2ad953"}, {"problem": 38, "code": "(fn the-max [& list] (reduce (fn [a b] (if (> a b) a b)) list))", "user": "52dbd423e4b09f7907dd13c6"}, {"problem": 38, "code": "(fn mymax\n  ([x y]\n     (if (> x y) x y))\n  ([x y & more]\n     (reduce mymax (mymax x y) more)))", "user": "559c406be4b066d22e731f66"}, {"problem": 38, "code": "(fn [arg1 & args]\n  (loop [rargs args\n         maxx arg1]\n    (if (empty? rargs) \n      maxx\n      (recur (rest rargs) (if (> (first rargs) maxx) (first rargs) maxx))\n      ))\n )", "user": "55aa8276e4b0988bba2ad94e"}, {"problem": 38, "code": "(fn[& arr](reduce #(if (> %1 %2) %1 %2) arr))", "user": "5596af34e4b04c1e5c31d758"}, {"problem": 38, "code": "(fn my-max \n  [& args]\n  (reduce (fn pMax \n  [x y]\n  (if (> x y)\n      x\n      y)\n\t) args)\n)", "user": "55acd080e4b03311e7b73298"}, {"problem": 38, "code": "(fn [& coll]\n  (loop [ g (first coll), c coll]\n    (if (empty? c) g\n      (recur (if (> g (first c)) g (first c)) (rest c))\n    )\n  )\n)", "user": "55adf4d7e4b03311e7b732af"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) -1 args))", "user": "55ad59cde4b03311e7b732a7"}, {"problem": 38, "code": "(fn [& rest](* -1 (apply min (map #(* -1 %) rest))))", "user": "55af7e21e4b03311e7b732cc"}, {"problem": 38, "code": "(fn [& args]\n    (loop [i 0 s args m 0]\n      (if (= i (count args))\n             m\n             (if (> (first s) m)\n               (recur (inc i) (rest s) (first s))\n               (recur (inc i) (rest s) m)))))", "user": "55aaa36fe4b0988bba2ad94f"}, {"problem": 38, "code": "#(reduce (fn [a b]\n          (if (> a b)\n            a\n            b))\n        %&)", "user": "4f445ed9e4b0d7d3c9f3fd3b"}, {"problem": 38, "code": "(fn [& nums]\n  (loop [nums nums\n         largest (first nums)]\n    (if (empty? nums)\n      largest\n      (if (> (first nums) largest)\n        (recur (rest nums) (first nums))\n        (recur (rest nums) largest)))))", "user": "559dae85e4b08a52bd4f97cd"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) (into [] args)))", "user": "55acb648e4b03311e7b73296"}, {"problem": 38, "code": "(fn my-max\n  [& args]\n  (let [inner (fn inner [n l]\n    (if (zero? (count l))\n      n\n      (if (> (first l) n)\n        (inner (first l) (rest l))\n        (inner n (rest l)))))]\n  (inner (first args) (rest args))))", "user": "5599abc9e4b031d6649c9bb0"}, {"problem": 38, "code": "(fn [& nbrs]\n  (reduce (fn [a b] (if (> a b) a b)) nbrs))", "user": "503c90aae4b06c4e0e1fa24b"}, {"problem": 38, "code": "(fn [x & y] (reduce #(if (< %1  %2) %2 %1) x y ))", "user": "5592c56ee4b0c79f6e1db934"}, {"problem": 38, "code": "(fn [& params] (reduce #(if (> %2 %) %2 %) params))", "user": "55b107fee4b002ce9d5cbc2a"}, {"problem": 38, "code": "#(loop [coll (rest %&) max-val (first %&)]\n       (if (empty? coll)\n         max-val\n       \t(let [curr (first coll)]\n          (if (> curr max-val)\n            (recur (rest coll) curr)\n            (recur (rest coll) max-val)))))", "user": "55afc197e4b002ce9d5cbc18"}, {"problem": 38, "code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) more))", "user": "55b0ecb7e4b002ce9d5cbc27"}, {"problem": 38, "code": "(fn [v & vs]\n  (loop [m   v\n         ms  vs]\n    (if (empty? ms)\n      m\n      (let [h (first ms)\n            t (rest  ms)]\n        (if (> h m)\n          (recur h t)\n          (recur m t))))))", "user": "559a9a3de4b066d22e731f45"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (< x y)y x)) args))", "user": "55b1ab40e4b0da326a65cf6e"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %2 %) %2 %) args))", "user": "5537cbaee4b09218d5f44fd3"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "55b1372de4b002ce9d5cbc2e"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [mx x] (if (> mx x) mx x)) (first xs) (rest xs)))", "user": "55158345e4b055c2f668d4e8"}, {"problem": 38, "code": "(fn lol[& arg] \n  (reduce (fn [prev current]\n  (if (> prev current)\n         prev\n         current)) 0 arg))", "user": "55a161d1e4b0acc240e31511"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "55b25970e4b0da326a65cf7e"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (< %1 %2) %2 %1) xs))", "user": "547a714ae4b0c51c1f4d72cc"}, {"problem": 38, "code": "(fn maximum [x & xs]\n  ((fn maximum' [y xs]\n    (if (empty? xs)\n      y\n      (if (> (first xs) y)\n        (maximum' (first xs) (rest xs))\n        (maximum' y (rest xs)))))\n  x xs))", "user": "4f04c93c535dcb61093f6be3"}, {"problem": 38, "code": "#(last (sort %&))", "user": "53cb5559e4b00fb29b2212d2"}, {"problem": 38, "code": "(fn [x & args] (loop [mx x coll args] (if (seq coll) (if (> mx (first coll)) (recur mx (rest coll)) (recur (first coll) (rest coll))) mx ) ) )", "user": "557f748ae4b05c286339e0df"}, {"problem": 38, "code": "#(last (sort %&))", "user": "55abf7bbe4b03311e7b7328e"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "user": "55aa7c5ce4b0988bba2ad94d"}, {"problem": 38, "code": "(fn ma [& args]\n  (let [head (first args) tail (rest args)]\n  (if tail\n    (if (> head (first tail))\n      head\n      (recur tail)\n    )\n    head\n  )\n    )\n)", "user": "55b3e8aee4b01b9910ae2977"}, {"problem": 38, "code": "(fn [& x]\n  (reduce (fn [a b] (if (> a b) a b)) x))", "user": "55b527cbe4b01b9910ae2985"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "54236ce1e4b01498b1a71ad1"}, {"problem": 38, "code": "(fn [fir & las] (#(loop [x fir\n                          v las]\n                     (if (seq v)      \n                       (recur (if (> x (first v)) x (first v)) (rest v))\n                       x))))", "user": "55b1c62de4b0da326a65cf72"}, {"problem": 38, "code": "(fn [& v]\n    (loop [m 0 r v]\n        (if (seq r)\n            (if (> m (first r))\n                (recur m (rest r))\n                (recur (first r) (rest r)))\n            m)))", "user": "55975569e4b031d6649c9b8e"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "55afa977e4b002ce9d5cbc15"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (> %1 %2) %1 %2) x xs))", "user": "532dbd3ce4b019098a6f8b40"}, {"problem": 38, "code": "(fn [& args]\n\t(-> args\n\t\t(conj ())\n\t\t(flatten)\n\t\t(sort)\n\t\t(last)\n\t)\n)", "user": "5595c60ee4b0c79f6e1db96f"}, {"problem": 38, "code": "(fn [& nums]\n  ((fn [biggest remaining]\n     (if (seq remaining)\n       (if (< biggest (first remaining))\n         (recur (first remaining) (rest remaining))\n         (recur biggest (rest remaining)))\n       biggest)) (first nums) (rest nums)))", "user": "4f8c8c53e4b02e764a0a51a0"}, {"problem": 38, "code": "(fn [& xs] \n  (reduce \n    (fn [x y]\n      (if (> x y) x y)  \n    )\n    xs\n  )  \n)", "user": "55b60518e4b01b9910ae298e"}, {"problem": 38, "code": "(fn [& rst] (reduce (fn [m c] (if (< m c) c m)) rst))", "user": "55b77c7ce4b01b9910ae29a3"}, {"problem": 38, "code": "#(last (sort %&))", "user": "55ae383fe4b03311e7b732b7"}, {"problem": 38, "code": "(fn [& args]\n\t\t(reduce (fn [acc x] (if (> x acc) x acc)) \n\t\t\t    args))", "user": "55b8c339e4b01b9910ae29b9"}, {"problem": 38, "code": "(fn [& nums] (loop [ns nums\n                     maxn java.lang.Integer/MIN_VALUE]\n                (if (empty? ns)\n                  maxn\n                  (recur (drop-last ns) (if (> (last ns) maxn) (last ns) maxn)))))", "user": "55b8d186e4b01b9910ae29ba"}, {"problem": 38, "code": "(fn [& xs] (last (sort xs)))", "user": "55afd535e4b002ce9d5cbc1a"}, {"problem": 38, "code": "(fn max-seq [& coll]\n  (loop [processing coll maximum (first coll)]\n    (if (empty? processing)\n      maximum\n      (if (> (first processing) maximum)\n        (recur (rest processing) (first processing))\n        (recur (rest processing) maximum)))))", "user": "55b69e37e4b01b9910ae2999"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "553e2da3e4b0a04f792994ea"}, {"problem": 38, "code": "( fn\n  [& num]\n  (last (sort num))\n  )", "user": "55ba601ee4b01b9910ae29d1"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "55b587aae4b01b9910ae298a"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5342702ce4b00652c8746edb"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> % %2) % %2) args))", "user": "55b1e9e7e4b0da326a65cf74"}, {"problem": 38, "code": "(fn [& args] (-> args sort last))", "user": "549dfe40e4b0f3d1d8e70f9a"}, {"problem": 38, "code": "(fn [& args]\n   (reduce #(if (> %1 %2) %1 %2)\n           (first args)\n           (rest args)))", "user": "55b54ecbe4b01b9910ae2987"}, {"problem": 38, "code": "(fn [& s] \n  (reduce (fn [x y]\n           (if (> x y)\n             x\n             y)) \n         s))", "user": "55bbd179e4b01b9910ae29eb"}, {"problem": 38, "code": "(fn [& more] \n  (last (sort more)))", "user": "52127b94e4b0d32679a50639"}, {"problem": 38, "code": "(fn my-max\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & z]\n   (let [result1 (my-max x y)\n         result2 (apply my-max z)]\n     (if (> result1 result2)\n       result1\n       result2))))", "user": "55b3c03ee4b01b9910ae2975"}, {"problem": 38, "code": "(comp last sort list)", "user": "55be39f9e4b01b9910ae2a06"}, {"problem": 38, "code": "(fn mymax\n  ([x y]\n     (if (> x y) x y))\n  ([x y & more]\n     (reduce mymax (mymax x y) more)))", "user": "55962e92e4b0c79f6e1db976"}, {"problem": 38, "code": "(fn getmax [& x] (reduce #(if (< % %2) %2 %) x))", "user": "55bc5280e4b01b9910ae29f1"}, {"problem": 38, "code": "#(last (sort %&))", "user": "54534c83e4b0e397800069cd"}, {"problem": 38, "code": "(fn [& m] (reduce #(if (> %1 %2) %1 %2) m))\n;; (fn [& m] (reduce (fn [a b] (if (> a b) a b)) m))", "user": "55b7f263e4b01b9910ae29b4"}, {"problem": 38, "code": "(fn [& s]\n  (reduce \n   (fn [x y] \n     (if (> x y) \n       x\n       y))\n   s))", "user": "5452a300e4b0e397800069c7"}, {"problem": 38, "code": "(fn [x & more] (reduce #(if (> % %2) % %2) x more))", "user": "55bfc39ee4b01b9910ae2a1a"}, {"problem": 38, "code": "(fn myMax\n  [& arguments]\n  \"Consumes all the arguments using reduce,\n  supplied with a function that returns the highest value from a pair\"\n  (reduce #(if (> %1 %2)\n             %1\n             %2) arguments))", "user": "55a9e0fee4b0988bba2ad945"}, {"problem": 38, "code": "(fn [& nums] \n  (loop [mx 0, xs nums]\n    (if (empty? xs)\n      mx\n      (if (> (first xs) mx)\n        (recur (first xs) (rest xs))\n        (recur mx (rest xs))))))", "user": "559454f2e4b0c79f6e1db952"}, {"problem": 38, "code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) coll))", "user": "55c0afa5e4b01b9910ae2a27"}, {"problem": 38, "code": "(fn [& items] (reduce (fn [acc el] (if (> acc el)\n                                     acc\n                                     el)) (first items) (rest items)))", "user": "55a37e1fe4b0acc240e31539"}, {"problem": 38, "code": "#(last(sort %& ))", "user": "55a68518e4b09e57187da29b"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [a x] (if (> a x) a x)) args))", "user": "549c6792e4b0f3d1d8e70f8b"}, {"problem": 38, "code": "(fn [x & xs]\n\t(reduce (fn [x y] (if (> x y) x y)) x xs))", "user": "55b78ff6e4b01b9910ae29a7"}, {"problem": 38, "code": "(comp last sort list)", "user": "55304523e4b076ab5578f810"}, {"problem": 38, "code": "(fn [& args]\n  (->> args\n       sort\n       last))", "user": "53730a8be4b06d7f452d9e06"}, {"problem": 38, "code": "#(-' (apply min (map -' %&)))", "user": "55c251c0e4b0e31453f64979"}, {"problem": 38, "code": "(comp last sort vector)", "user": "55c10409e4b01b9910ae2a2c"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %2 %1) %2 %1) xs))", "user": "55bc2322e4b01b9910ae29f0"}, {"problem": 38, "code": "(fn [& values]\n  (reduce #(if (> %1 %2) %1 %2) values))", "user": "554d0511e4b0a04f792995b5"}, {"problem": 38, "code": "(comp last sort list)", "user": "55bccbc6e4b01b9910ae29f5"}, {"problem": 38, "code": "(fn [& xs]\n   (loop [m (first xs) l xs]\n     (if (empty? l) m (recur (if (> m (first l)) m (first l)) (rest l)))))", "user": "55c1eb52e4b0e31453f64970"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "54f6399be4b0f2f3c5226ea3"}, {"problem": 38, "code": "#(last (sort (conj %& %1)))", "user": "55c37594e4b0e31453f64989"}, {"problem": 38, "code": ";(fn mx [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))\n(fn [& xs] (last (sort xs)))", "user": "55b1b67ce4b0da326a65cf6f"}, {"problem": 38, "code": "(fn [& y] \n  (- (apply min (map (fn [x] (- x)) y))))", "user": "55c387e4e4b0e31453f6498b"}, {"problem": 38, "code": "(fn [& coll]\n  (reduce (fn [x y]\n            (if (> x y) x y))\n          coll))", "user": "5586f418e4b059ccff29b1de"}, {"problem": 38, "code": "(fn [& col]\n  (reduce  \n    (fn [a b] \n      (if (> a b) a b) \n      )\n   \tcol\n   )\n  )", "user": "55bb7546e4b01b9910ae29e7"}, {"problem": 38, "code": "(fn [& args]\n\t\t(loop [currMax (first args) checkList (rest args)]\n\t\t\t(if (= checkList [])\n\t\t\t\tcurrMax\n\t\t\t(if (> (first checkList) currMax)\n\t\t\t\t(recur (first checkList) (rest checkList))\n\t\t\t\t(recur currMax (rest checkList))\n\t\t\t)\n\t\t\t)\n\t\t)\n)", "user": "51fea7d7e4b0f1313d468a74"}, {"problem": 38, "code": "(fn max-val [x & others]\n  (if (empty? others)\n   x\n   (let [m (apply max-val others)]\n     (if (> x m)\n       x\n       m))))", "user": "55c4e48be4b0e31453f649a7"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "55c5153de4b0e31453f649ad"}, {"problem": 38, "code": "(fn [& rest] (reduce (fn [a b] (if (> a b) a b)) rest))", "user": "55b4b0f5e4b01b9910ae297d"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce\n    (fn [mx x]\n      (if (>= x (or mx x))\n        x\n        mx))\n    nil\n    xs))", "user": "4f2861eee4b0d6649770a017"}, {"problem": 38, "code": "(fn [& numbers]\n  (first (sort > numbers)))", "user": "55a0d79fe4b0acc240e31502"}, {"problem": 38, "code": "(fn j-max [& more]\n\t(let [e (first more)\n\t\t  r (rest more)]\n\t  (if (empty? r)\n\t  \t\te\n\t  \t\t(let [max-rest (apply j-max r)] \n\t  \t       (if (>= e max-rest)\n\t  \t       \t e\n\t  \t      \t max-rest\n\t  \t       )))))", "user": "55c508f0e4b0e31453f649ac"}, {"problem": 38, "code": "(fn [& n] (reduce (fn [x acc] (if (> x acc) x acc)) 0 n))", "user": "55c58c0be4b0e31453f649b3"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce\n   (fn [x y]\n     (if (> x y) x y))\n   x xs))", "user": "55c68089e4b0e31453f649c4"}, {"problem": 38, "code": "(fn max-value [x & xs]\n  (reduce (fn [x y] \n\t(if (> x y) x y)) x xs))", "user": "55b9ce15e4b01b9910ae29c1"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "54ef7568e4b024c67c0cf885"}, {"problem": 38, "code": "(comp last #(sort %&))", "user": "55c652dde4b0e31453f649bd"}, {"problem": 38, "code": "(fn [& r] (last (sort r)))", "user": "55c3149de4b0e31453f64987"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) 0 (vec rest)))", "user": "55a2ef1ae4b0acc240e3152d"}, {"problem": 38, "code": "(fn [& coll] (last (sort coll)))", "user": "55b45825e4b01b9910ae297c"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "55c28beae4b0e31453f6497d"}, {"problem": 38, "code": "(fn [& l] (reduce (fn [a b] (if (> a b) a b)) l))", "user": "55a28acde4b0acc240e31524"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "54b817eee4b0ed20f4ff6e93"}, {"problem": 38, "code": "(fn [& nums] (last (sort nums)))", "user": "55c779f8e4b0e31453f649d2"}, {"problem": 38, "code": "(fn a [ & args] ( reduce #(if (> %1 %2) %1 %2) args))", "user": "55ac16a0e4b03311e7b73291"}, {"problem": 38, "code": "#(last (sort %&))", "user": "55b42706e4b01b9910ae297b"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "55c77070e4b0e31453f649d0"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "55c20bd0e4b0e31453f64972"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) args))", "user": "54010363e4b0de5c4184861d"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) (first args) args))", "user": "553f70cae4b0a04f792994f8"}, {"problem": 38, "code": "(fn [& args]\n      (reduce (fn [a b] (if (> a b) a b)) args))", "user": "55a372f1e4b0acc240e31537"}, {"problem": 38, "code": "(fn my-max\n  [& a]\n  (loop [m (first a)\n         a a]\n    (if (seq a)\n      (if (> (first a) m)\n        (recur (first a)\n               (rest a))\n        (recur m\n               (rest a)))\n      m)))", "user": "55c423e1e4b0e31453f64994"}, {"problem": 38, "code": "(fn mymax\n  ([x y]\n     (if (> x y) x y))\n  ([x y & more]\n     (reduce mymax (mymax x y) more)))", "user": "55c734a5e4b0e31453f649cb"}, {"problem": 38, "code": "#(last (sort %&))", "user": "55ca4273e4b0e31453f649f9"}, {"problem": 38, "code": "(fn [& nums] (last (sort nums)))", "user": "55c74915e4b0e31453f649cc"}, {"problem": 38, "code": "(fn \n  [& seq]\n  (reduce \n   (fn \n     [x y]\n     (if (> x y)\n       x\n       y))\n   seq))", "user": "55cb4e11e4b0e31453f64a02"}, {"problem": 38, "code": "#(last (sort %&))", "user": "546e1142e4b00cfc9eacc199"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "55caabd1e4b0e31453f649fb"}, {"problem": 38, "code": "(fn my-max1 [ & col] (last (sort (vec col))))", "user": "55c9bc1ee4b0e31453f649f1"}, {"problem": 38, "code": "(fn  [& args]\n  (last(apply sort(list args)))\n  )", "user": "55a65872e4b09e57187da299"}, {"problem": 38, "code": "(fn [& x]\n  (reduce \n   (fn [best potential-best]\n     (if (> potential-best best) potential-best best))\n   \t 0\n     x))", "user": "55c313a0e4b0e31453f64986"}, {"problem": 38, "code": "#(last (sort %&))", "user": "54b5b3cce4b05787c3b163ab"}, {"problem": 38, "code": "(fn [& r] (reduce (fn [f s] (if (> f s) f s)) r))", "user": "55b39523e4b01b9910ae2973"}, {"problem": 38, "code": "(fn [& args]\n  (-> args sort last))\n\n; beautiful", "user": "5446158ce4b032a45b8693a6"}, {"problem": 38, "code": "(fn [& v] (last (sort (apply list v))))", "user": "5598e856e4b031d6649c9ba1"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> % %2 ) % %2) args))", "user": "55cc56bee4b0e31453f64a0f"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2)\n          %1\n          %2) args))", "user": "55b22c33e4b0da326a65cf79"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "user": "55c2f8e2e4b0e31453f64985"}, {"problem": 38, "code": "(fn[x & xs]\n  (reduce #(if (> %1 %2) %1 %2) x xs))", "user": "55c63dc4e4b0e31453f649bb"}, {"problem": 38, "code": "(fn \n  [& xs]\n  (reduce #(if (< %1 %2) %2 %1) xs))", "user": "556e3b73e4b09a3098a52514"}, {"problem": 38, "code": "(comp last sort list)", "user": "55cdc576e4b0e31453f64a1f"}, {"problem": 38, "code": "(fn [a & b] \n (reduce #(if (> %1 %2) %1 %2) 0 (cons a b)))", "user": "55627de1e4b0c656e3ff17d9"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "user": "55be464ce4b01b9910ae2a07"}, {"problem": 38, "code": "(fn [& values]\n  (loop [[value & remainder] values\n         max-value 0]\n    (let [\n         maximum (if (> value max-value)\n                   value\n                    max-value)]\n\t(if (empty? remainder)\n      maximum\n      (recur remainder maximum)))))", "user": "55d06bcbe4b0e31453f64a3a"}, {"problem": 38, "code": "(comp last sort list)", "user": "55ce64ffe4b0e31453f64a28"}, {"problem": 38, "code": "(comp last sort list)", "user": "559067ace4b0277789237670"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "55d0e76ae4b0e31453f64a40"}, {"problem": 38, "code": "(fn mymax\n  [& args]\n  (loop [m (first args)\n         a (rest args)]\n    (if (empty? a)\n      m\n      (if (< m (first a))\n        (recur (first a) (rest a))\n        (recur m (rest a)))\n      )))", "user": "55bd87ede4b01b9910ae29fe"}, {"problem": 38, "code": "(fn [& colls] (last (sort colls)))", "user": "55c07e3ee4b01b9910ae2a24"}, {"problem": 38, "code": "(fn\n  [& args]\n  (last (sort args)))", "user": "5574c172e4b05c286339e059"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> % %2) % %2) xs))", "user": "55ccdc6be4b0e31453f64a18"}, {"problem": 38, "code": "(fn [& l] (reduce #(if (> %1 %2) %1 %2) l))", "user": "55bedd93e4b01b9910ae2a0d"}, {"problem": 38, "code": "(fn [& args] (-> args sort last))", "user": "55ba33afe4b01b9910ae29cb"}, {"problem": 38, "code": "(fn [& col] (reduce (fn [a b] (if (> a b) a b)) col))", "user": "55d1f231e4b0e31453f64a4e"}, {"problem": 38, "code": "(comp last sort list)", "user": "5589a941e4b059ccff29b207"}, {"problem": 38, "code": "(fn my-max\n  ([x y & more] (if (> x y) (apply my-max (conj more x)) (apply my-max (conj more y))))\n  ([x y] (if (> x y) x y))\n  ([x] (x)))", "user": "55d29fb6e4b0e31453f64a59"}, {"problem": 38, "code": "(fn [& wow] (reduce #(if (> %1 %2) %1 %2) wow))", "user": "55d354e0e4b0e31453f64a62"}, {"problem": 38, "code": "(fn [& nums] (loop [num (first nums) remaining (rest nums)]\n   (if (empty? remaining) \n     num\n    (recur (if (> (first remaining) num) \n             (first remaining) \n             num) \n           (rest remaining)))))", "user": "55d332f5e4b0e31453f64a5f"}, {"problem": 38, "code": "(fn [& l] (first (sort > l)))\n\n;(fn [& l] (->> l\n;              (sort >)\n;              first))", "user": "55236ad6e4b0882d96d091b1"}, {"problem": 38, "code": "(comp first reverse sort list)", "user": "55b0f5bfe4b002ce9d5cbc28"}, {"problem": 38, "code": "(fn my-max [& xs]\n  (reduce (fn [a b] (if (> a b) a b)) xs))", "user": "55d204abe4b0e31453f64a4f"}, {"problem": 38, "code": "(fn mymax [x & xs]\n  (cond\n    (empty? xs) x\n    (> x (first xs)) (recur x (rest xs))\n    :else (recur (first xs) (rest xs))))", "user": "55bb6a19e4b01b9910ae29e5"}, {"problem": 38, "code": "(fn [& numbers]\n  (- (apply min (map (fn [number] (- number)) numbers))))", "user": "55d4ae39e4b0e31453f64a7b"}, {"problem": 38, "code": "(fn [& args]\n  (loop [l args\n         acc (first l)]\n    (if (empty? l)\n      acc\n      (if (> (first l) acc)\n        (recur (rest l) (first l))\n        (recur (rest l) acc)))))", "user": "55d4dddde4b0e31453f64a7f"}, {"problem": 38, "code": "(fn [ & s ] (reduce #(if (> %1 %2 ) %1 %2)  s) )", "user": "55d44dd6e4b0e31453f64a75"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "553e2cc0e4b0a04f792994e9"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "4f055d4f535dcb61093f6bf6"}, {"problem": 38, "code": "(fn c [x & r] (if (empty? r) x (if (> x (first r)) (apply c (conj (rest r) x)) (apply c r))))", "user": "4e72a717535d5021c1a89665"}, {"problem": 38, "code": "#(last (sort %&))", "user": "55d36ef5e4b0e31453f64a65"}, {"problem": 38, "code": "#(last (sort %&))", "user": "55d50a38e4b0e31453f64a80"}, {"problem": 38, "code": "#(last (sort %&))", "user": "55d1b565e4b0e31453f64a49"}, {"problem": 38, "code": "(fn [& vals]\n\t(reduce #(if (> %1 %2) %1 %2) vals))", "user": "55d6a2ebe4b0e31453f64a9a"}, {"problem": 38, "code": "(fn [& a] (let [args (vec a)] (reduce #(if (> %1 %2) %1 %2) a)))", "user": "55d68726e4b0e31453f64a99"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "54f11c0ce4b024c67c0cf8ab"}, {"problem": 38, "code": "(fn [& args] \n\t(reduce #(if(> % %2) % %2 ) args)\n)", "user": "55d1a721e4b0e31453f64a47"}, {"problem": 38, "code": "(fn [& cols] (reduce #(if (> %1 %2) %1 %2) cols))", "user": "55d5ee3fe4b0e31453f64a92"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "55d5e80ee4b0e31453f64a91"}, {"problem": 38, "code": "(fn my-max ([ele] ele)\n      ([ele1 ele2 & eles]\n       (apply my-max\n              (if (< ele1 ele2)\n                ele2\n                ele1)\n              eles)))", "user": "55d95be7e4b0e31453f64ac9"}, {"problem": 38, "code": "(fn [& coll]\n \t(loop [max-value 0 rest-coll coll]\n   \t\t(if (empty? rest-coll)\n          \tmax-value\n    \t\t(if (> max-value  (first rest-coll))\n       \t\t   (recur max-value (rest rest-coll))\n        \t   (recur (first rest-coll) (rest rest-coll))))))", "user": "52ca7711e4b071a8d36bd3e3"}, {"problem": 38, "code": "(fn [& coll] (last (sort coll)))", "user": "55d045cde4b0e31453f64a38"}, {"problem": 38, "code": "#(last (sort %&))", "user": "55dab5c8e4b0e31453f64ada"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "4f435ee8e4b0d7d3c9f3fd1f"}, {"problem": 38, "code": "(fn [& arr]\n  (reduce #(if (> %1 %2) %1 %2) arr)\n)", "user": "558fec41e4b0277789237666"}, {"problem": 38, "code": "(fn [& list] (reduce (fn [x y] (if (>= x y) x y)) list))", "user": "55d79b87e4b0e31453f64aa8"}, {"problem": 38, "code": "(fn [& vals] (reduce #(if (> %1 %2) %1 %2) vals))", "user": "55da1ebce4b0e31453f64ad2"}, {"problem": 38, "code": "(fn [& vals] \n  (reduce (fn [v e]\n            (if (> e v)\n              e\n              v))\n          Double/NEGATIVE_INFINITY\n          vals))", "user": "55d8eed3e4b0e31453f64ac3"}, {"problem": 38, "code": "(fn [& xs] (reduce \n          #(if (> %1 %2) %1 %2)\n          xs))", "user": "553c136ae4b09218d5f45012"}, {"problem": 38, "code": "(fn [& x]  (reduce (fn [acc,value] (if (> value acc) value acc)) 0 x) )", "user": "55d35a01e4b0e31453f64a63"}, {"problem": 38, "code": "(fn [& params]\n  (loop [col params\n         i -1]\n    (if (seq col) \n      (recur (rest col) (if (> (first col) i) (first col) i))\n      i)))", "user": "55912230e4b027778923767a"}, {"problem": 38, "code": "(fn [& S] (reduce #(if (> %1 %2) %1 %2) S))", "user": "55d3cfafe4b0e31453f64a6c"}, {"problem": 38, "code": "(fn [& coll] (reduce (fn [f n] (if (> f n) f n)) coll))", "user": "4ff548dee4b0678c553fc368"}, {"problem": 38, "code": "(fn [& coll](reduce #(if (> %1 %2) %1 %2 ) coll))", "user": "54722c55e4b094393f72dd74"}, {"problem": 38, "code": "(fn [& rest] (reduce (fn [a b] (cond (> a b) a :else b)) rest))", "user": "500e3238e4b068062f6e8d8f"}, {"problem": 38, "code": "(fn [& more]\n  (reduce (fn [x y] \n            (if (< x y)\n              y\n              x)) \n           more))", "user": "55db7e15e4b0e31453f64ae8"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [x y] (if (> x y) x y)) args)\n  )", "user": "55ce2b6de4b0e31453f64a26"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) args))", "user": "55c5261ee4b0e31453f649ae"}, {"problem": 38, "code": "(comp last sort conj) []", "user": "55dcb06ee4b050e68259b3b9"}, {"problem": 38, "code": "(fn [& list]\n  (reduce (fn [a b] (if (> a b) a b)) list))", "user": "55dab408e4b0e31453f64ad9"}, {"problem": 38, "code": "(fn outer [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "514a3fa5e4b0829bd132edb6"}, {"problem": 38, "code": "(fn [& r]\n  (last (sort r)))", "user": "55dd7ad1e4b050e68259b3c2"}, {"problem": 38, "code": "(fn [& more]\n  (reduce\n    (fn\n      [x y]\n      (if (< x y) y x)\n      )\n    more\n    )\n  )", "user": "55ded9fde4b050e68259b3e7"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5582c5b1e4b05c286339e10a"}, {"problem": 38, "code": "(fn [& args] \n  (reduce \n   (fn [top el] \n     (if (> el top) el top)) args)\n )", "user": "55ddb3f4e4b050e68259b3cd"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce (fn [ac x]\n            (if (> x ac) x ac))\n          xs))", "user": "55d87324e4b0e31453f64ab4"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "55c3c1b0e4b0e31453f6498c"}, {"problem": 38, "code": "(comp (partial reduce (fn [x y] (if (< x y) y x))) vector)", "user": "55dc2ad1e4b050e68259b3ac"}, {"problem": 38, "code": "(fn [& x]\n   \n   (loop [i x m 0]\n     \n     (if (empty? i)\n       \n       m\n     \n       (if (> (first i) m)\n         (recur (rest i) (first i))\n         (recur (rest i) m)))\n     \n     ) ;; / loop\n   \n   )", "user": "55d44af5e4b0e31453f64a74"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "55e05f46e4b050e68259b40b"}, {"problem": 38, "code": "(fn [ & l]\n  ((fn mx' [[f & l]]\n  (if-not l \n    f \n    (let [m (mx' l)]\n      (if (> f m) \n        f \n        m))\n    )\n  ) l))", "user": "55deeface4b050e68259b3ea"}, {"problem": 38, "code": "(fn ([& args] (reduce (fn [x y] (if (> x y) x y)) args)))", "user": "55e03393e4b050e68259b408"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "54924f64e4b0b312c081ff42"}, {"problem": 38, "code": "(fn [& args] \n   (loop [x args\n          m 0]\n     (let [f (first x)\n           r (rest x)]\n       (if (nil? f)\n         m\n         (if (> f m)\n           (recur r f)\n           (recur r m))))))", "user": "54a8ac6ce4b09f271ff37ca7"}, {"problem": 38, "code": "#(last (apply sorted-set %&))", "user": "55e1d34ae4b050e68259b421"}, {"problem": 38, "code": "(fn [& args](reduce (fn [x y] (if (> x y) x y)) args))", "user": "55e06858e4b050e68259b40c"}, {"problem": 38, "code": "(fn [& more] \n  (reduce\n    #(if \n      (> %1 %2) \n      %1 %2) \n    more))", "user": "5563b88be4b0c656e3ff17f5"}, {"problem": 38, "code": "(fn maximum-value\n  [head & tail]\n  (if (empty? tail)\n    head\n    (if (>= head (first tail))\n      (apply maximum-value (conj (rest tail) head))\n      (apply maximum-value tail))))", "user": "55dfac5fe4b050e68259b3f9"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "55e26417e4b050e68259b433"}, {"problem": 38, "code": "(fn m [x & r] (if (nil? r) x (let [rm (apply m r)] (if (> rm x) rm x))))", "user": "55e31aa8e4b050e68259b43f"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "55e06f82e4b050e68259b40d"}, {"problem": 38, "code": "#(last (sort %&))", "user": "55e2b1cfe4b050e68259b438"}, {"problem": 38, "code": "#(last (sort %&))", "user": "55d85ac9e4b0e31453f64ab2"}, {"problem": 38, "code": "(fn [& args]\n  (-> args\n      sort\n      last))", "user": "55e246c2e4b050e68259b431"}, {"problem": 38, "code": "(fn [& r] (reduce #(if (< %1 %2) %2 %1) r))", "user": "54290a64e4b01498b1a71b36"}, {"problem": 38, "code": "#(last (sort %&))", "user": "55e3924ae4b050e68259b445"}, {"problem": 38, "code": "(fn [& x]\n  (reduce \n   #(if (> %1 %2) %1 %2)\n   x\n   )\n)", "user": "55db1665e4b0e31453f64ae0"}, {"problem": 38, "code": "(fn maxval\n  [& vals]\n  (letfn [(maxi [accu vals] \n                (cond \n                  (empty? vals) accu\n                  (> (first vals) accu) (maxi (first vals) (rest vals))\n                  :else (maxi accu (rest vals))\n                  ))]\n    (maxi (first vals) (rest vals))\n    )\n  )", "user": "55e1ddf7e4b050e68259b422"}, {"problem": 38, "code": "(fn [& x] (reduce (fn [x y] (if (> x y) x y) ) x ) )", "user": "55dfac9de4b050e68259b3fa"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "55b7d925e4b01b9910ae29b2"}, {"problem": 38, "code": "(comp last sort list)", "user": "55e2004de4b050e68259b426"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "555d3bbee4b0a2eb076a39a6"}, {"problem": 38, "code": "(fn [& more]\n  (reduce\n    (fn\n      [x y]\n      (if (< x y) y x)\n      )\n    more\n    )\n  )", "user": "55e1029ae4b050e68259b418"}, {"problem": 38, "code": "(fn f [& s]\n  (reduce (fn [x y] (if (> x y) x y)) (first s) (rest s)))", "user": "55e3ae2fe4b050e68259b447"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce\n   (fn [mx num]\n            (if (>= mx num)\n              mx num))\n   nums))", "user": "55d2dd27e4b0e31453f64a5b"}, {"problem": 38, "code": "(fn [& xs]\n\t(reduce #(if (< %1 %2) %2 %1) xs))", "user": "55d74e71e4b0e31453f64aa4"}, {"problem": 38, "code": "#(reduce (fn [x y] (if (> x y) x y)) %&)", "user": "558e18e5e4b027778923764d"}, {"problem": 38, "code": "(fn mx \n  ([a b] (if (> a b) a b))\n  ([a b & others] (reduce mx (mx a b) others)))", "user": "4dd5fdb0535d2dad7130b5c5"}, {"problem": 38, "code": "(fn [& x] (first (sort > x)))", "user": "5489dd4de4b0e286459a11ef"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "55e558e3e4b050e68259b46b"}, {"problem": 38, "code": "(fn [& colls] (reduce (fn [a b] (if (< b a) a b)) colls))", "user": "55e4c544e4b050e68259b457"}, {"problem": 38, "code": "(fn \n [& args] \n (reduce \n  #(if(< %1 %2) %2 %1)\n  args))", "user": "54c94376e4b045293a27f665"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> % %2) % %2) 0 args))", "user": "55e46371e4b050e68259b44f"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2 ) %1 %2) args))", "user": "540b851fe4b0addc1aec66f9"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "55df1985e4b050e68259b3eb"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [acc n]\n                       (if (> n acc)\n                         n\n                         acc))\n                     0\n                     args))", "user": "55e2f502e4b050e68259b43c"}, {"problem": 38, "code": "(fn [& rest]\n  (reduce \n   #(if (> %1 %2) %1 %2) rest))", "user": "5229f187e4b0590a43906ce9"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "55e632cbe4b050e68259b484"}, {"problem": 38, "code": "(fn [& args]\n  (loop [i 0 l (first args)]\n    (if (= i (count args)) l\n      (if (> l (nth args i)) \n        l\n        (recur (inc i) (nth args i))))))", "user": "55dfacb7e4b050e68259b3fc"}, {"problem": 38, "code": "(fn[& args]\n  (reduce #(if(> %1 %2) %1 %2)args))", "user": "55dfacabe4b050e68259b3fb"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "55e1fc42e4b050e68259b424"}, {"problem": 38, "code": "(comp last sort list)", "user": "55dffbbae4b050e68259b403"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "55df3b11e4b050e68259b3ef"}, {"problem": 38, "code": "(fn [n & ns] (reduce #(if (< %1 %2)  %2 %1 )  n ns))", "user": "55e6c3f5e4b050e68259b48c"}, {"problem": 38, "code": "(comp last sort list)", "user": "55dd0aebe4b050e68259b3bf"}, {"problem": 38, "code": "(comp last sort list)", "user": "55aacbeee4b0988bba2ad951"}, {"problem": 38, "code": "#(last (sort %&))", "user": "55dff80de4b050e68259b402"}, {"problem": 38, "code": "(fn [& a] (reduce (fn [p,n] (if (> n p) n p)) a))", "user": "55d42f78e4b0e31453f64a73"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "user": "53959edde4b0b51d73faaed8"}, {"problem": 38, "code": "(comp last sort list)", "user": "53d8da61e4b0e771c3025471"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "user": "55cb11e9e4b0e31453f649ff"}, {"problem": 38, "code": "(fn maxx [a & l]\n  (if (empty? l)\n    a\n    (if (> (apply maxx l) a)\n      (apply maxx l)\n      a)))", "user": "55e4487ce4b050e68259b44c"}, {"problem": 38, "code": "(fn [& nums] (reduce #(if (> %1 %2) %1 %2) nums))", "user": "5530baa5e4b076ab5578f81a"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "55e7d06ee4b050e68259b496"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "user": "53d3f5f6e4b00fb29b221330"}, {"problem": 38, "code": "(fn [& l]\n  (loop [m (first l) r (rest l)]\n    (if (empty? r)\n      m\n      (if (< m (first r))\n        (recur (first r) (rest r))\n        (recur m (rest r))))))", "user": "55e87696e4b0121d4835fd93"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %2 %1) %2 %1) args))", "user": "55e70e8de4b050e68259b490"}, {"problem": 38, "code": "(fn [n & rest]\n  (reduce (fn [n1 n2] (if (> n1 n2) n1 n2)) n rest))", "user": "51d4609be4b013d740b70de1"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "55e55449e4b050e68259b468"}, {"problem": 38, "code": "(fn [& coll]\n  (reduce (fn [acc x]\n            (if (>= x acc)\n                    x\n                    acc))\n          coll))", "user": "554bd33ce4b0a04f7929959a"}, {"problem": 38, "code": "(fn [& all]\n  (reduce\n   #(if (> % %2) % %2)\n   all))", "user": "55b0d315e4b002ce9d5cbc26"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5593a03ce4b0c79f6e1db942"}, {"problem": 38, "code": "(fn [a & more]\n  (reduce #(if (> %1 %2) %1 %2) a more))", "user": "55ea0780e4b0121d4835fda7"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [m v] (if (> v m) v m)) args))", "user": "55ea0dc3e4b0121d4835fda9"}, {"problem": 38, "code": "(fn [& xs] (reduce \n (fn [x y]\n   (if (> x y)\n     x\n     y))\n xs))", "user": "51aa2ad6e4b04e3dc0c27b20"}, {"problem": 38, "code": "(fn [& vals]\n  (reduce (fn [x y]\n            (if (> x y) x y))\n          vals))", "user": "5120da40e4b0ca414459ae91"}, {"problem": 38, "code": "(fn maximum\n  ([x] x)\n  ([x & xs]\n   (let [y (apply maximum xs)]\n     (if (> x y) x y))))", "user": "55eb1410e4b0121d4835fdb8"}, {"problem": 38, "code": "(fn [& l] ((comp last sort) l))", "user": "55e8a85be4b0121d4835fd98"}, {"problem": 38, "code": "(fn get-max\n  ([x] \n    x)\n  ([x y]\n  \t(if (> x y) x y))\n  ([x y & more]\n   \t(reduce get-max (get-max x y) more ))\n)", "user": "55ed1dc5e4b0121d4835fdd4"}, {"problem": 38, "code": "(fn [ & args ] (reduce (fn [a b](if (> a b) a b)) args))", "user": "5505d137e4b086ebe8a79c8c"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "55ecb2c0e4b0121d4835fdce"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "user": "55d9d7e3e4b0e31453f64acd"}, {"problem": 38, "code": "(fn [max-val & args]\n  (reduce #(if (> %1 %2) %1 %2) \n          max-val \n          args))", "user": "55dbed2fe4b050e68259b3a6"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5573a505e4b0aa18f790f3fa"}, {"problem": 38, "code": "(comp last sorted-set)", "user": "55ec04c4e4b0121d4835fdc1"}, {"problem": 38, "code": "#(last (sort %&))", "user": "55d9743ae4b0e31453f64aca"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) (first xs) (rest xs)))", "user": "5166b716e4b060c690c1f4bf"}, {"problem": 38, "code": "(fn [& ls]\n  (last (sort ls)))", "user": "55df5feae4b050e68259b3f1"}, {"problem": 38, "code": "(fn [n & nn]\n  (reduce #(if (> %1 %2) %1 %2) n nn))", "user": "53f10bffe4b0742d9025b0d7"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "5560293de4b0c656e3ff17bf"}, {"problem": 38, "code": "(fn my-max \n  \t([x] x)\n  \t([x y] (if(> x y)\n              x\n              y))\n    ([x y & more]\n     (reduce my-max (my-max x y) more)))", "user": "55ec1048e4b0121d4835fdc3"}, {"problem": 38, "code": "(fn max-val [& s]\n  (letfn [(internal [l m]\n          \t(if (empty? l)\n              m\n              (if (> (first l) m)\n               (internal (rest l) (first l))\n               (internal (rest l) m)\n              )\n            )\n          )]\n    (internal (rest s) (first s))\n  )\n)", "user": "55efbb2ae4b066087aa9453c"}, {"problem": 38, "code": "(fn [& l] (reduce (fn [x y] (if (> x y) x y)) l))", "user": "55ecac8ee4b0121d4835fdcc"}, {"problem": 38, "code": "#(first(take 1 (sort > %&)))", "user": "542c56aae4b0dad94371f2a4"}, {"problem": 38, "code": "(fn [& coll] (reduce #(if (> % %2) % %2) coll))", "user": "55edc088e4b0121d4835fde0"}, {"problem": 38, "code": "(fn pf[& x] (reduce (fn [a b] (if (> a b) a b)) x))", "user": "54d05a9de4b0e8a36923e5c7"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "55ed962ae4b0121d4835fddd"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args) )", "user": "55f014ebe4b06e875b46ce1b"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "55e6809ee4b050e68259b48a"}, {"problem": 38, "code": "(fn mymax [& x]\n  (loop [[x0 & xrest] x\n         m x0]\n    (cond\n     (empty? xrest) m\n     :else (recur xrest (if (> x0 m) x0 m)))))", "user": "54145050e4b01498b1a719ea"}, {"problem": 38, "code": "#(last (sort %&))", "user": "55e5c453e4b050e68259b473"}, {"problem": 38, "code": "(fn [i & nums] (reduce #(if (< %1 %2) %2 %1 ) i nums))", "user": "55e5c852e4b050e68259b474"}, {"problem": 38, "code": "#(reduce (fn[a b] (if (> a b) a b)) %&)", "user": "5235e15be4b0a643f2dcb756"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [m n] (if (> m  n) m n)) args))", "user": "55eaca20e4b0121d4835fdb4"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [x y] (if (> x y) x y)) xs))", "user": "5461dc79e4b01be26fd746a8"}, {"problem": 38, "code": "(fn m [c & more] \n   ((fn m_inner [curr coll]\n      (if (empty? coll)\n        curr\n        (if (> curr (first coll)) \n          (recur curr (rest coll)) \n          (recur (first coll) (rest coll)))))\n    c more))", "user": "55f04940e4b06e875b46ce21"}, {"problem": 38, "code": "#(reduce (fn f[m v] (if (> m v) m v)) %&) ; 'Inspired' by Ben's solution", "user": "55e59b67e4b050e68259b46f"}, {"problem": 38, "code": "(fn [& all] (reduce #(if (> %1 %2) %1 %2) all))", "user": "55ee894de4b0121d4835fdf1"}, {"problem": 38, "code": "(fn sex \n  [x & others] (if (not others) \n                 x\n                 (let [value (apply sex others)] (if (> x value) x value)) \n                 )  \n  )", "user": "55f01316e4b06e875b46ce1a"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "55f1ce28e4b06e875b46ce37"}, {"problem": 38, "code": "(fn max1 [n & nums]\n  (loop [coll nums\n         max1 n]\n    (if (empty? coll)\n      max1\n      (let [r (rest coll)\n            f (first coll)]\n        (if (< max1 f) (recur r f) (recur r max1))\n        )\n      )\n    )\n  )", "user": "55f06183e4b06e875b46ce23"}, {"problem": 38, "code": "(fn maximum-value [& xs]\n  (reduce (fn [x y] (if (> x y) x y)) xs))", "user": "518b8561e4b0f028e99addef"}, {"problem": 38, "code": "(fn stronger-list [& args] (reduce (fn stronger [x y] (if (> x y) x y)) args))", "user": "55ad1ca6e4b03311e7b732a0"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x v] (if (> x v) x v)) args))", "user": "55f2b42be4b06e875b46ce4a"}, {"problem": 38, "code": "(fn [& nums] (reduce #(if (> %1 %2) %1 %2) nums))", "user": "539e717fe4b0ca733b974488"}, {"problem": 38, "code": "(fn [fv & rest-seq]\n  (loop [mv fv aseq rest-seq]\n    (if (empty? aseq)\n      mv\n      (recur (if (> mv (first aseq)) mv (first aseq))\n             (rest aseq)))))", "user": "546805d6e4b00cfc9eacc134"}, {"problem": 38, "code": "(fn [& args] (last (sort (vec args))) )", "user": "55efc44ee4b066087aa9453e"}, {"problem": 38, "code": "(fn[ i0 & tail] (let [i1 (first tail) tail2 (next tail) m (if (< i0 i1) i1 i0)] (if tail2 (recur m tail2) m )))", "user": "55809cb9e4b05c286339e0ef"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "user": "55f5b657e4b06e875b46ce8c"}, {"problem": 38, "code": "(fn maxv \n  \t([cm] cm) \n  \t([cm & restv] (let [rmax (apply maxv restv)] (if (> cm rmax) cm rmax))))", "user": "55f04526e4b06e875b46ce20"}, {"problem": 38, "code": "(fn [& args]\n  (reduce\n    #(if (> %1 %2) %1 %2)\n    (first args) (rest args)))", "user": "55ae6367e4b03311e7b732bc"}, {"problem": 38, "code": "(fn [& xs]\n  (last (sort xs)))", "user": "55e7fc2ce4b0121d4835fd86"}, {"problem": 38, "code": "(fn [ & rest] (reduce #(if (> % %2) % %2) rest))", "user": "55f5625de4b06e875b46ce86"}, {"problem": 38, "code": "(fn [& coll] (reduce (fn [c a] (if (> c a) c a)) coll))", "user": "55eeb37ae4b0121d4835fdf3"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "user": "55f43228e4b06e875b46ce67"}, {"problem": 38, "code": "(fn m \n  ([x] x)\n  ([x y & more] (if (> x y) (apply m x more) (apply m y more))))", "user": "55f5c118e4b06e875b46ce8e"}, {"problem": 38, "code": "(comp #(-> % (sort) (last)) list)", "user": "55f6c0e2e4b06e875b46ce99"}, {"problem": 38, "code": "(fn mx [& args]\n  (if (= 1 (count args))\n    (first args)\n    (if (> (first args) (second args))\n      (apply mx (conj (rest (rest args)) (first args)))\n      (apply  mx (rest args)))))", "user": "4ebbff41535dfed6da9c6d78"}, {"problem": 38, "code": "(fn abc [& rest]\n  (reduce #(if (< %1 %2) %2 %1) 0 rest))", "user": "55f2d4ede4b06e875b46ce4c"}, {"problem": 38, "code": "(fn [& args] (let [mymax (fn [x y] (if (> x y) x y))] (loop [[head & rest] args m 0] (if (nil? rest) (mymax head m) (recur rest (mymax head m))))))", "user": "55f7dc24e4b06e875b46ceb3"}, {"problem": 38, "code": "(fn my-max\n\n  ([& z] (last (sort z))))", "user": "55f7ebeae4b06e875b46ceb7"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (< a b) b a)) args))", "user": "55f73696e4b06e875b46cea6"}, {"problem": 38, "code": "(fn mmax [& coll]\n    (loop [l coll, mx 0]\n      (if (nil? l)\n          mx\n        (cond\n          (> (first l) mx)\n            (recur (next l), (first l) )\n          :else\n            (recur (next l), mx)\n        )))\n    )", "user": "558ee1c9e4b0277789237659"}, {"problem": 38, "code": "#(last (sort %&))", "user": "55f20e4be4b06e875b46ce40"}, {"problem": 38, "code": "(fn [& num] (reduce #(if (> %1 %2) %1 %2) 0 num))", "user": "55ef12cfe4b0121d4835fdfc"}, {"problem": 38, "code": "(fn my-max [x & xs]\n  (cond (empty? xs) x\n    \t(> x (apply my-max xs)) x\n        :else (apply my-max xs)))", "user": "55e3e7a8e4b050e68259b44a"}, {"problem": 38, "code": "(fn mymax [& p] (reduce #( cond (< %1 %2 ) %2 :else %1) 0 p))", "user": "55f80372e4b06e875b46ceb9"}, {"problem": 38, "code": "(fn [primul & restul]\n(if (= (count restul) 0)\n\tprimul\n\t(recur (if (> primul \n        (first restul))\n     primul\n    (first restul))\n(rest restul))))", "user": "55f6e1b4e4b06e875b46ce9c"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "user": "55f9c245e4b03cbcff9738ca"}, {"problem": 38, "code": "#(last (sort %&))", "user": "54f3b85ee4b050824f58f5ca"}, {"problem": 38, "code": "(fn [& more]\n  (reduce #(if (> %1 %2) %1 %2) more)\n  \n  )", "user": "55f8fd70e4b03cbcff9738bc"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "55eeeb81e4b0121d4835fdf7"}, {"problem": 38, "code": "(fn max-val [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) (flatten (cons x xs))))", "user": "55f7e056e4b06e875b46ceb4"}, {"problem": 38, "code": "#(first ( reverse(sort(seq %&))))", "user": "551daeb9e4b030e6a24d00df"}, {"problem": 38, "code": "(fn [& input]\n  (loop [curMax 0\n         coll input]\n    (let [curTest (first coll)\n          curRest (rest coll)]\n      (if (empty? curRest)\n        curMax\n        (if (> curTest curMax)\n          (recur curTest (rest coll))\n          (recur curMax (rest coll)))))))", "user": "54cbd6bae4b057c6fda3a282"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "55fb58b2e4b0f488688e0661"}, {"problem": 38, "code": "(fn [& vals]\n  (loop [acc (first vals) v (rest vals)]\n    (if (empty? v)\n      acc\n      (if (> (first v) acc)\n        (recur (first v) (rest v))\n        (recur acc (rest v))))))", "user": "55fbf6cae4b0f488688e066c"}, {"problem": 38, "code": "( fn\n  [& args]\n  (reduce #(if (> %1 %2) %1 %2) args)\n)", "user": "55ed71dae4b0121d4835fdd9"}, {"problem": 38, "code": "(fn [& args] (first (sort > args)))", "user": "558053b1e4b05c286339e0e9"}, {"problem": 38, "code": "(fn\n  ([x] x)\n  ([x & more]\n    (reduce #(if (> %1 %2) %1 %2) x more)))", "user": "55f90d76e4b03cbcff9738bd"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "4f1b1f31535d64f603146477"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [a b] (if (> a b) a b)) 0 args))", "user": "55048182e4b086ebe8a79c7c"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "55f6f1d3e4b06e875b46cea0"}, {"problem": 38, "code": "(fn [& more] (reduce (fn [a b] (if (< a b) b a)) more))", "user": "55ec4558e4b0121d4835fdc5"}, {"problem": 38, "code": "(fn [ & args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "55fc1f05e4b0f488688e066f"}, {"problem": 38, "code": "(fn max2 [& args]\n  (reduce (fn [x y] (if (< x y) y x))\n    args)\n  )", "user": "55fdf902e4b00f4cabc5764e"}, {"problem": 38, "code": "(fn [x & args] (loop [c args maxim x]\n              (if (seq c)\n                (recur (rest c) (if (> maxim (first c)) maxim (first c)))\n                maxim)))", "user": "55f8b32ae4b03cbcff9738ba"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce (fn [a n] (if (> n a) n a)) xs))", "user": "55fee5e4e4b00f4cabc5765a"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) (flatten (cons x xs))))", "user": "54bdcde5e4b0ed20f4ff6ee5"}, {"problem": 38, "code": ";(fn [x & xs] (first (reverse (sort (cons x xs)))))\n(fn [& xs] (last (sort xs)))", "user": "55fb41a6e4b0f488688e065f"}, {"problem": 38, "code": "(fn [n & more] \n  (reduce #(if (> %1 %2) %1 %2) n more))", "user": "55810c73e4b05c286339e0f2"}, {"problem": 38, "code": "(fn [ & coll]\n  (last (sort coll)))", "user": "55fe7e15e4b00f4cabc57651"}, {"problem": 38, "code": "(fn [& x] (reduce (fn [l r] (if (<= l r) r l)) x))", "user": "55fc8f1fe4b0f488688e0675"}, {"problem": 38, "code": "(fn [& params]\n  (last (sort params)))", "user": "55f27bf9e4b06e875b46ce45"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "user": "536fab55e4b0fc7073fd6e84"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (> %2 %1) %2 %1) x xs))", "user": "55f2fdc3e4b06e875b46ce51"}, {"problem": 38, "code": "(fn [& rest] \n  (last (sort rest))\n    \n  )", "user": "55f95de6e4b03cbcff9738c1"}, {"problem": 38, "code": "(fn [& args] (first (sort > args)))", "user": "55e5f668e4b050e68259b47d"}, {"problem": 38, "code": "(fn [& items] (reduce #(if (> %1 %2) %1 %2) items))", "user": "5600d1a5e4b04bb52996e172"}, {"problem": 38, "code": "(fn [& xs]\n  (->> xs\n       (sort)\n       (last)))", "user": "55ee62dde4b0121d4835fdeb"}, {"problem": 38, "code": "(fn [& s]\n(loop [m (first s) r s]\n  (if (seq r)\n    (let [f (first r)\n          nm (if (< m f) f m)]\n      (recur nm (rest r)))\n    m)))", "user": "511e17a9e4b0c5b849dd36b0"}, {"problem": 38, "code": "#(last (sort %&))", "user": "560094a0e4b04bb52996e16b"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "55f330dde4b06e875b46ce56"}, {"problem": 38, "code": "(fn [& x] \n  (reduce \n   (fn [buffer element] \n     (if (> element buffer)\n       element\n       buffer)) x))", "user": "560039cce4b04bb52996e162"}, {"problem": 38, "code": "(fn [ & args ] (first (sort > args)))", "user": "56018dd4e4b04bb52996e18f"}, {"problem": 38, "code": "(fn [& args] \n  (reduce \n    (fn [x y]\n      (if (> y x) \n        y x))\n    0 args))", "user": "55dedb0de4b050e68259b3e8"}, {"problem": 38, "code": "(fn [x & xs] (last (sort (cons x xs))))", "user": "55af3e6be4b03311e7b732c7"}, {"problem": 38, "code": "#(reduce (fn [x r](if (> x r) x r)) %&)", "user": "4fa436dce4b081705acca19b"}, {"problem": 38, "code": "(fn [& args]\n      (loop [[f & r] (rest args)\n             m (first args)]\n        (cond\n          (empty? r) m\n          (> f m) (recur r f)\n          :else (recur r m))))", "user": "50a3ad0ee4b0ceace084d493"}, {"problem": 38, "code": "(fn m\n  [& args]\n  (loop [nums args\n         best nil]\n    (let [cand (first nums)]\n      (cond\n        (empty? nums) best\n        (or (nil? best) (> cand best)) (recur (rest nums) cand)\n        :else (recur (rest nums) best)))))", "user": "55f7c873e4b06e875b46ceb0"}, {"problem": 38, "code": "(fn [& l] (reduce (fn [x y] (if (> x y) x y)) 0 l))", "user": "5600f8c7e4b04bb52996e176"}, {"problem": 38, "code": "(fn [& all] (reduce (fn [x y] (if (> x y) x y)) all))", "user": "55c917a1e4b0e31453f649e9"}, {"problem": 38, "code": "(fn [& args] (reduce (fn[a b](if(> a b) a b)) args))", "user": "56039843e4b04bb52996e1be"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "5410499de4b01498b1a719a6"}, {"problem": 38, "code": "(fn f [& s]\n  (reduce (fn [acc s*] (if (> s* acc) s* acc)) (first s) (rest s)))", "user": "55fbcbd1e4b0f488688e0669"}, {"problem": 38, "code": "(comp last sort list)", "user": "5602ab92e4b04bb52996e1a3"}, {"problem": 38, "code": "(fn [& s]\n    (reduce (fn [a b]\n              (if (> a b) a b))\n            s))", "user": "55f081bbe4b06e875b46ce25"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "55fbcbb1e4b0f488688e0668"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "user": "56035afae4b04bb52996e1b9"}, {"problem": 38, "code": "(fn [& args] ((comp last sort) args))", "user": "55fe8190e4b00f4cabc57652"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [x y] (if (> x y) x y)) 0 xs))", "user": "5600a6cfe4b04bb52996e16e"}, {"problem": 38, "code": "(fn [& nums] (last (sort nums)))", "user": "5602f5fce4b04bb52996e1ad"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %  %2) % %2) args))", "user": "52aaabf7e4b0c58976d9ac68"}, {"problem": 38, "code": "(comp (partial reduce #(if (> %1 %2) %1 %2)) list)", "user": "5603c31fe4b04bb52996e1c1"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "56040e58e4b0c80df0ca2654"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "56047160e4b0c80df0ca265d"}, {"problem": 38, "code": "(fn [& l]\n (reduce (fn [v e] (if (nil? v) e (if (> v e) v e))) nil l))", "user": "56051095e4b08b23635d3162"}, {"problem": 38, "code": "(comp first reverse sort list)", "user": "5604bcf7e4b08b23635d315a"}, {"problem": 38, "code": "(fn [& x] (-> x sort last))", "user": "55d62a68e4b0e31453f64a96"}, {"problem": 38, "code": "(comp last sort list)", "user": "50746e23e4b054001656acd1"}, {"problem": 38, "code": "(fn [& values]\n  (loop [data values\n         current java.lang.Integer/MIN_VALUE]\n    (if (seq data)\n      (if (> (first data) current) (recur (rest data) (first data))\n                                   (recur (rest data) current))\n      current)))", "user": "55ad2379e4b03311e7b732a1"}, {"problem": 38, "code": "(fn _max \n  ([x] x)\n  ([x & xs] (if (> x (first xs)) x (first xs)))\n)", "user": "5606a4ace4b08b23635d3175"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce\n   #(if (< %1 %2) %2 %1)\n   xs))", "user": "55fe5dfae4b00f4cabc57650"}, {"problem": 38, "code": "(comp (partial reduce #(if (< %1 %2) %2 %1)) vector)", "user": "5529662ce4b0ffed3738f94a"}, {"problem": 38, "code": "(fn m [& l]\n  (if (<= (count l) 1)\n    (first l)\n    (let [r (apply m (rest l))\n          f (first l)]\n      (if (<= r f)\n        f\n        r))))", "user": "55216b7ee4b0882d96d09193"}, {"problem": 38, "code": "(fn\n  [& xs]\n  (-> xs sort last))", "user": "55e732c5e4b050e68259b492"}, {"problem": 38, "code": "(comp last sort list)", "user": "55f3802be4b06e875b46ce5f"}, {"problem": 38, "code": "(fn [& s]\n  (reduce #(if (> %1 %2) %1 %2) s))", "user": "56082adae4b046a4fc0ac008"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) (vec args)))", "user": "56014a5fe4b04bb52996e183"}, {"problem": 38, "code": "(fn [& xs] \n  (reduce (fn [x y] (if (> x y) x y)) xs))", "user": "560794bde4b08b23635d3182"}, {"problem": 38, "code": "(fn [& col]\n  (letfn [(find-max [x y]\n            (if (< x y) y x))]\n    (loop [nums col ret 0]\n      (if (empty? nums)\n        ret\n        (recur (rest nums) (find-max ret (first nums)))))))", "user": "501fe6fae4b0cb6ebc0a42ef"}, {"problem": 38, "code": "(fn mymax [& xs] (last (sort (seq xs))))", "user": "5601bb7ee4b04bb52996e195"}, {"problem": 38, "code": "(fn [& l]\n  (reduce #(if (> %1 %2) %1 %2) l))", "user": "541df0b5e4b01498b1a71a86"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "5609816ee4b0053d1b86c7e1"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "55e274b4e4b050e68259b436"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "5609866ee4b0053d1b86c7e3"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5608dbe6e4b046a4fc0ac019"}, {"problem": 38, "code": "(fn biggest [& x] (last (sort x)))", "user": "546ddf95e4b00cfc9eacc195"}, {"problem": 38, "code": "(fn [& coll]\n  (reduce #(if (> %1 %2)\n             %1\n             %2)\n  coll))", "user": "560a67a1e4b05f002753def6"}, {"problem": 38, "code": "#(- (apply min (map - %&)))", "user": "560a7b46e4b05f002753defb"}, {"problem": 38, "code": "(fn [& s]\n        (loop [sq s\n               maxe (first sq)]\n          (cond (empty? sq)\n                maxe\n                :else\n                (cond (> (first sq) maxe)\n                      (recur (rest sq) (first sq))\n                      :else\n                      (recur (rest sq) maxe)))))", "user": "56011393e4b04bb52996e178"}, {"problem": 38, "code": "(fn [& l] (reduce #(if (> %1 %2) %1 %2)\n                                      0\n                                      l))", "user": "50bcb004e4b0594b91591c5f"}, {"problem": 38, "code": "(fn [& x] (first (sort > x)))", "user": "560acfc7e4b05f002753df0a"}, {"problem": 38, "code": "(fn [& rest] (-> rest sort reverse first))", "user": "560ae540e4b05f002753df0d"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) 0 args))", "user": "560843dee4b046a4fc0ac00e"}, {"problem": 38, "code": "(fn [& items] (reduce #(if (< %1 %2) %2 %1) items))", "user": "560aed59e4b05f002753df11"}, {"problem": 38, "code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) more))", "user": "560ae7e6e4b05f002753df0e"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce (fn [a b] (if (> a b) a b)) xs))", "user": "5573ffb5e4b0aa18f790f3fd"}, {"problem": 38, "code": "(fn [& v] (last (sort v)))", "user": "56084e91e4b046a4fc0ac00f"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "55bb1b26e4b01b9910ae29e0"}, {"problem": 38, "code": "(fn max-val [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) (flatten (cons x xs))))", "user": "560a7775e4b05f002753defa"}, {"problem": 38, "code": "(fn [& s] (loop [m 0 c s]\n          (if (empty? c)\n            m\n          \t(let [f (first c) r (rest c)]\n              (recur (if (< m f) f m) r)))))", "user": "560ac5cae4b05f002753df09"}, {"problem": 38, "code": "(fn [& args ] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "560c0300e4b05f002753df28"}, {"problem": 38, "code": "(fn [y & x]\n  (loop [m y coll x]\n    (if (empty? coll)\n      m\n      (recur (if (> (first coll) m) (first coll) m )  (rest coll))\n      );if\n    \n    ) ;loop\n ) ;fn", "user": "560768a0e4b08b23635d317f"}, {"problem": 38, "code": "(fn [& xn]\n  (loop [mx 0 nx xn]\n    (if (next nx)\n      (recur (if (> (first nx) mx) (first nx) mx) (rest nx))\n      mx)))", "user": "56098ccbe4b0053d1b86c7e4"}, {"problem": 38, "code": "(fn [& numbers] (reduce #(if (> %1 %2) %1 %2) numbers))", "user": "5601a32ee4b04bb52996e193"}, {"problem": 38, "code": "(fn [& args]\n  (reduce \n   (fn [x y]\n     (if (> x y) x y)) \n   args))", "user": "544ceb36e4b0e39780006975"}, {"problem": 38, "code": "(fn [& numbers]\n  (-> numbers sort last))", "user": "54d321b3e4b0e8a36923e602"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (>%1 %2) %1 %2) args))", "user": "515c596ce4b069911535cf0c"}, {"problem": 38, "code": "#(last (sort %&))", "user": "560d2a2be4b05f002753df35"}, {"problem": 38, "code": "(fn [& v] (reduce #(if (> %1 %2) %1 %2) (first v) (rest v)))", "user": "55f1d5dfe4b06e875b46ce38"}, {"problem": 38, "code": "#(last (apply sorted-set %&))", "user": "55e2d527e4b050e68259b43a"}, {"problem": 38, "code": "(fn [& x] \n  (last (sort x))\n)", "user": "5605a1ffe4b08b23635d316a"}, {"problem": 38, "code": "(fn my-max [& xs] (reduce #(if \n         \t\t\t (< %1 %2) \n          \t\t\t\t%2 \n          \t\t\t\t%1) 0 xs))", "user": "5606ea56e4b08b23635d317b"}, {"problem": 38, "code": "#(last (sort %&))", "user": "560e38f2e4b05f002753df4c"}, {"problem": 38, "code": "(fn [ini & more]\n  (reduce #(if (> %1 %2) %1 %2) ini more))", "user": "560e685be4b05f002753df4e"}, {"problem": 38, "code": "#(last (sort %&))", "user": "55f2c898e4b06e875b46ce4b"}, {"problem": 38, "code": "(fn[ & list] (reduce (fn [number1 number2] (if (< number1 number2) number2 number1)) list))", "user": "560d7863e4b05f002753df40"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (> %2 %1) %2 %1) x xs))", "user": "55fa3454e4b03cbcff9738ce"}, {"problem": 38, "code": "(fn [a & re]\n  (loop [acc a\n         r re]\n    (if (empty? r)\n      acc\n      (recur (if (> (first r) acc) (first r) acc)\n             (rest r)))))", "user": "4f6ba7bce4b07046d9f4efb0"}, {"problem": 38, "code": "(fn [& args]\n  (reduce\n   (fn [a x]\n     (if (> x a)\n       x\n       a))\n   args))", "user": "56050f06e4b08b23635d3161"}, {"problem": 38, "code": "(fn [& r]\n  (reduce (fn [a b]\n            (if (> a b) a b)) r))", "user": "5605b5e9e4b08b23635d316e"}, {"problem": 38, "code": "(fn [& n] (reduce (fn [x y] (if (> x y) x y)) (vec n)))", "user": "560c404fe4b05f002753df30"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "560ff209e4b05f002753df65"}, {"problem": 38, "code": "(fn [& args]\n    (reduce #(if (> %2 %1) %2 %1) args))", "user": "560e9a2de4b05f002753df52"}, {"problem": 38, "code": "(fn [& coll] (reduce #(if (< %1 %2) %2 %1) coll))", "user": "561047eae4b05f002753df6d"}, {"problem": 38, "code": "(fn [& coll]\n  (reduce\n   (fn [acc n]\n     (if (> n acc)\n       n\n       acc))\n   0 coll))", "user": "5603c784e4b04bb52996e1c2"}, {"problem": 38, "code": "(fn [x & more]\n  (reduce (fn [a b] (if (> a b) a b)) x more))", "user": "4ff24a1ae4b0678c553fc337"}, {"problem": 38, "code": "(fn [& s] \n  (last (sort s) ) \n  )", "user": "560d4994e4b05f002753df3c"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "user": "5610979fe4b05f002753df73"}, {"problem": 38, "code": "(fn [x & args] (if (= x 1) 8 (if (= x 30) 30 (if (= x 45) 67))))", "user": "55f68360e4b06e875b46ce93"}, {"problem": 38, "code": "#(loop [coll %& highest %]\n   (if (empty? coll)\n     highest\n     (recur (rest coll) (if (> highest (first coll)) highest (first coll)))))", "user": "560fe558e4b05f002753df63"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "56041883e4b0c80df0ca2655"}, {"problem": 38, "code": "(comp last sort list)", "user": "5601e037e4b04bb52996e199"}, {"problem": 38, "code": "(comp first reverse sort list)", "user": "561279ace4b05f002753df91"}, {"problem": 38, "code": "(fn [& args] (\n    let [my-max (fn rec [m xs] (\n        if (empty? xs) m\n            (if (> (first xs) m) (rec (first xs) (rest xs)) (rec m (rest xs)))\n    ))] (\n        my-max 0 args\n    )\n))", "user": "560c31b4e4b05f002753df2d"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "5613a96ae4b05f002753dfa4"}, {"problem": 38, "code": "(fn\n  [& coll]\n  (reduce #(if (>= %1 %2) %1 %2) coll))", "user": "52606318e4b03e8d9a4a7036"}, {"problem": 38, "code": "(fn[& s](reduce (fn[r e] (if (< r e) e r)) 0 s))", "user": "560d491ae4b05f002753df3b"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "560b6895e4b05f002753df1a"}, {"problem": 38, "code": "(fn [& coll]\n  (loop [m (first coll), r (rest coll) ]\n    (if (empty? r)\n      m\n      (recur (if (> m (first r)) m (first r))  (rest r)))))", "user": "50523848e4b0a561d07d8f1a"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5613f727e4b05f002753dfab"}, {"problem": 38, "code": ";(fn [& args]\n;  (loop [m (first args)\n;         s (rest args)]\n;    (if-not (seq s)\n;      m\n;      (if (> (first s) m)\n;        (recur (first s) (rest s))\n;        (recur m (rest s))))))\n\n;; Always look for ways to do this with map/reduce\n(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "560dfa8de4b05f002753df46"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "55f27d95e4b06e875b46ce47"}, {"problem": 38, "code": "(fn my-max [& args]\n  (last (sort args)))", "user": "56069006e4b08b23635d3174"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "user": "55f09e7be4b06e875b46ce28"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "5090c8e2e4b0742c82730ad9"}, {"problem": 38, "code": "(fn [& xs] (last (sort xs)))", "user": "555b43dfe4b0deb715856e4d"}, {"problem": 38, "code": "#(last(sort %&))", "user": "55ea1738e4b0121d4835fdaa"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "5614fa1de4b05f002753dfbe"}, {"problem": 38, "code": "(fn [& coll]\n  (loop [c coll\n         ans (first c)]\n    (if (empty? c)\n      ans\n      (recur (next c) (if (> ans (first c))\n                        ans\n                        (first c))))))", "user": "56038f34e4b04bb52996e1bc"}, {"problem": 38, "code": "(fn [& collection] (reduce (fn [x y] (if (> x y) x y)) collection))", "user": "56152a26e4b05f002753dfc1"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5454bb07e4b0e397800069da"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5615fd5de4b06b1bb21829fd"}, {"problem": 38, "code": "(fn [& x] \n  (reduce (fn [y z]\n            (if (> y z)\n              y\n              z))\n          x))", "user": "560ff632e4b05f002753df66"}, {"problem": 38, "code": "(fn my-max\n  ([x] x)\n  ([x y] (if (> y x) y x))\n  ([x y & more] (reduce my-max (my-max x y) more)))", "user": "56180d83e4b06b1bb2182a18"}, {"problem": 38, "code": "(fn [& c] (reduce #(if (> % %2) % %2) c))", "user": "561223e5e4b05f002753df8b"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "5617b1c0e4b06b1bb2182a13"}, {"problem": 38, "code": "(fn [& o]\n  (last (sort o)))", "user": "55bf6dbce4b01b9910ae2a12"}, {"problem": 38, "code": "(fn [& args](first (sort > (seq args))))", "user": "56163cc1e4b06b1bb21829ff"}, {"problem": 38, "code": "(fn my-max [first & args]\n  (if (empty? args)\n    first\n    (let [rest-max (apply my-max args)]\n      (if (> first rest-max)\n        first\n        rest-max))))", "user": "55fb5b89e4b0f488688e0662"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "user": "5617db88e4b06b1bb2182a16"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [a b] \n                   (if (> a b) a b)\n                   ) xs))", "user": "521247b0e4b06aa6d1666ba1"}, {"problem": 38, "code": "#(loop [tst \n             (first %&) \n             my-seq \n             (into () \n                   (rest %&))]\n     (if (empty? my-seq)\n         tst\n         (if (> (first my-seq) tst) \n               (recur (first my-seq)(rest my-seq))\n               (recur tst (rest my-seq)))))", "user": "55dfada4e4b050e68259b3fd"}, {"problem": 38, "code": "(fn maxi [ head & body ]\n  (loop [ curmax head \n          [ next-head & next-body] body ]\n    (if (empty? next-body)\n      curmax\n      (recur (if (< curmax next-head) next-head curmax) next-body))))", "user": "5610d39de4b05f002753df75"}, {"problem": 38, "code": "(fn my-max \n    [& args] \n    (loop [curlist args\n           curmax (first args)]\n      (let [[h & t] curlist]\n        (cond\n          (empty? curlist) curmax\n          (> h curmax) (recur t h)\n          :else (recur t curmax)\n          ))\n      )\n    )", "user": "4f5e5975e4b0030a34fb2b4d"}, {"problem": 38, "code": "(fn [& args] \n  (last (sort args)))", "user": "5578f292e4b05c286339e08f"}, {"problem": 38, "code": "(fn [& nums] (first (sort > nums)))", "user": "561aab66e4b053970a773b0a"}, {"problem": 38, "code": "(fn \n  [& args] \n  (last (sort args)))", "user": "55fcaccfe4b0f488688e0679"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "user": "55d28b38e4b0e31453f64a58"}, {"problem": 38, "code": "(fn max_val\n  ([arg] arg)\n  ([arg & rarg] \n   (loop [max_val arg next_val (first rarg) rest_vals (rest rarg)]\n     (cond\n     \t(nil? next_val) max_val\n      \t(> next_val max_val) (recur next_val (first rest_vals) (rest rest_vals))\n      \t:else (recur max_val (first rest_vals) (rest rest_vals))))))", "user": "561a4c60e4b053970a773b06"}, {"problem": 38, "code": "(fn [ & l ] (reduce (fn [acc x] (if (> x acc)\n                              x\n                              acc)) \n                l))", "user": "56128c54e4b05f002753df93"}, {"problem": 38, "code": "(comp last sort list)\n;(fn [& ls] (last (sort ls)))", "user": "52f3568fe4b05e3f0be25f0e"}, {"problem": 38, "code": "(fn fooo\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] \n   (reduce fooo (fooo x y) more)))", "user": "56092a8de4b0053d1b86c7da"}, {"problem": 38, "code": "(fn [& l] (-> l sort last))", "user": "560ac488e4b05f002753df08"}, {"problem": 38, "code": "(fn mymax\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & r] (reduce mymax (mymax x y) r)))", "user": "53ab1ef6e4b047364c04444b"}, {"problem": 38, "code": "(fn [& args] \n  (first (sort > args)))", "user": "561a9380e4b053970a773b07"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "user": "561bbac1e4b064ca9f4b1687"}, {"problem": 38, "code": "(partial (comp (partial reduce \n                        (fn [x y]\n                            (if (> x y) \n                                x \n                                y))) \n               conj) \n         [])", "user": "533975f0e4b0e30313ee6ca9"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5408ec4de4b0addc1aec66d0"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (>%1 %2) %1 %2) args))", "user": "5521248fe4b08d5046aa8a69"}, {"problem": 38, "code": "(fn [& args] (-> args sort last))", "user": "561ba3e5e4b073c65b0ce3eb"}, {"problem": 38, "code": "(fn [& vals] (reduce #(if (< %1 %2) %2 %1) 0 vals))", "user": "561c0278e4b064ca9f4b1691"}, {"problem": 38, "code": "(fn [& nums] (last (sort nums)))", "user": "55022d7ce4b07d26eda61d84"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) args))", "user": "561ca2eae4b064ca9f4b169b"}, {"problem": 38, "code": "(fn ms-max\n  [x & args]\n  ((comp last sort) (reduce conj [x] args)))", "user": "561ca6ebe4b064ca9f4b169c"}, {"problem": 38, "code": "(fn my-ma [& num]\n  (let [x (sort num)]\n    (last x)))", "user": "561bb8dbe4b064ca9f4b1686"}, {"problem": 38, "code": "(fn [& xs] (-> xs sort last))", "user": "5619a4d0e4b053970a773afd"}, {"problem": 38, "code": "(fn [& vals]\n  (reduce #(if (> % %2) % %2) vals))", "user": "521ceb02e4b0c4ef0be830a5"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5616c78ee4b06b1bb2182a07"}, {"problem": 38, "code": "#(last (sort (reduce conj '() %&)))", "user": "55dfe72ee4b050e68259b400"}, {"problem": 38, "code": "(fn [& more]\n  (reduce\n   (fn [x y]\n     (if (< x y)\n       y\n       x))\n     more))", "user": "53da059be4b0e771c302547e"}, {"problem": 38, "code": "(fn ![& coll]\n  (loop [c coll m -1]\n    (if (empty? c)\n      m\n      (recur (rest c) (if (> (first c) m)\n                         (first c)\n                         m)))))", "user": "5537b2c7e4b09218d5f44fce"}, {"problem": 38, "code": "(fn [& s]\n  (reduce (fn [maxSoFar x]\n            (if (or (nil? maxSoFar) (> x maxSoFar))\n                x\n                maxSoFar\n            )\n          )\n          nil s)\n)", "user": "56195e57e4b053970a773af6"}, {"problem": 38, "code": "(fn max-of [& vals]\n  (reduce\n    (fn [acc ele]\n      (if (> ele acc) ele acc))\n    vals))", "user": "561d8936e4b064ca9f4b16b2"}, {"problem": 38, "code": "(fn [& x] \n  (reduce (fn [a b] (if (> a b) a b)) (vec x)))", "user": "52824143e4b0757a1b171453"}, {"problem": 38, "code": "(fn [& xs] (loop [c xs m 0] (if (empty? c) m (recur (rest c) (if (> (first c) m) (first c) m)))))", "user": "561e2b33e4b064ca9f4b16ba"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [n m] (if (> n m) n m)) 0 args))", "user": "5595a88ee4b0c79f6e1db96e"}, {"problem": 38, "code": "(fn [& args]\n  (loop [candidate (first args)\n         remaining (rest args)]\n    (if remaining\n      (if (> candidate (first remaining))\n        (recur candidate (next remaining))\n        (recur (first remaining) (next remaining)))\n      candidate)))", "user": "4e7e443e535db169f9c7970b"}, {"problem": 38, "code": "(fn [& col ] (last (sort col)))", "user": "4fec0824e4b0681fd128dc9c"}, {"problem": 38, "code": "(fn [M & ms] (reduce #(if (> %1 %2) %1 %2) M ms))", "user": "55f6fe09e4b06e875b46cea2"}, {"problem": 38, "code": "(fn mmax [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "5592ba8be4b0c79f6e1db931"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "561f9110e4b064ca9f4b16ce"}, {"problem": 38, "code": "#(last (sort %&))", "user": "561bc8e3e4b064ca9f4b1689"}, {"problem": 38, "code": "(fn [& args]\n  (loop [maximum 0\n         [n & rest] args]\n    (if (>= n maximum)\n      (recur n rest)\n      (do\n        (if (empty? rest)\n          maximum\n          (recur maximum rest))))))", "user": "561fc0d0e4b064ca9f4b16d2"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "5616f411e4b06b1bb2182a0a"}, {"problem": 38, "code": "#(last (sort %&))", "user": "56184ed5e4b06b1bb2182a1d"}, {"problem": 38, "code": "#(last (sort %&))", "user": "561ff621e4b064ca9f4b16d6"}, {"problem": 38, "code": "(fn [& x] (- (apply min (map - x))))", "user": "561a060ee4b053970a773b01"}, {"problem": 38, "code": "(fn [x & rnums]\n           (if (= rnums nil)\n             x\n             (if (> x (first rnums))\n               (recur x (next rnums))\n               (recur (first rnums) (next rnums)))))", "user": "561e8c3ae4b064ca9f4b16c1"}, {"problem": 38, "code": "(fn [& num] (last (sort num)))", "user": "561e4ec5e4b064ca9f4b16be"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "56205609e4b064ca9f4b16df"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "54ca93abe4b057c6fda3a264"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "4f40c46fe4b0e243712b1fbe"}, {"problem": 38, "code": "(fn amax \n  ([x] x) \n  ([x y] (if (> x y) x y)) \n  ([x y & more]\n    (reduce amax (amax x y) more))\n  )", "user": "5272645de4b03e8d9a4a742c"}, {"problem": 38, "code": "(fn [& rest] \n  (reduce #(if (> %1 %2) %1 %2) rest))", "user": "561d23e3e4b064ca9f4b16a5"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "user": "56215c8ee4b03f08ee9a921a"}, {"problem": 38, "code": "(fn [& x] (first (sort > x)))", "user": "55cf0d0ee4b0e31453f64a2b"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) 0 args))", "user": "55b24240e4b0da326a65cf7b"}, {"problem": 38, "code": "(fn [& x]\n  (loop [lst (rest x), m (first x)]\n    (if (= 0 (count lst)) \n      m\n      (recur (rest lst)\n             (if (> m (first lst))\n               m \n               (first lst))))))", "user": "54b54d1be4b05787c3b1639c"}, {"problem": 38, "code": "(fn max2\n  ([x] x)\n  ([x & xs] \n  \t(if (> x (apply max2 xs))\n      x\n      (apply max2 xs))))", "user": "56228d00e4b03f08ee9a9227"}, {"problem": 38, "code": "(fn f_max [& args] (let [mx (atom 0)] (doseq [ x args ] (if (> x @mx) (swap! mx (fn [& val] x)))) @mx))", "user": "560c3917e4b05f002753df2f"}, {"problem": 38, "code": "(fn\n  ([a b]   a)\n  ([a b c] b)\n  ([a b c d] b))", "user": "56238371e4b03f08ee9a9233"}, {"problem": 38, "code": "(fn max_ [& params]\n  (reduce #(if (> %1 %2) %1 %2) params))", "user": "561eb82fe4b064ca9f4b16c7"}, {"problem": 38, "code": "(fn [a & ar] \n  (reduce #(if (> %1 %2) %1 %2) a ar))", "user": "562405fee4b03f08ee9a9237"}, {"problem": 38, "code": "(fn [& args]\n    (reduce #(if (> %2 %) %2 %) 0 args))", "user": "5578ba3ae4b05c286339e08c"}, {"problem": 38, "code": "(fn maxv [x & xs]\n  (reduce (fn [x y] (if (pos? (.compareTo y x)) y x)) x xs))", "user": "56244b3ae4b0b951f963fc22"}, {"problem": 38, "code": "(comp last sort list)", "user": "5524fff0e4b0882d96d091c8"}, {"problem": 38, "code": "#(last (sort %&))", "user": "562326cbe4b03f08ee9a9230"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) (filter (complement nil?) (flatten (list %1 %2 %&))))", "user": "561bf12ce4b064ca9f4b168e"}, {"problem": 38, "code": "(fn [& args]\n\t(reduce (fn [l r] (if (> l r) l r)) args))", "user": "56264d64e4b00e49c7cb47be"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce (fn [m x] (if (> x m) x m)) xs))", "user": "5623f8eae4b03f08ee9a9236"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "522a5bdde4b0590a43906cf8"}, {"problem": 38, "code": "(fn my-max\n  [x & xs]\n  (loop [result x\n         more xs]\n        (if (empty? more)\n          result\n          (let [result? (first more)]\n            (if (> result? result)\n              (recur result? (rest more))\n              (recur result (rest more)))))))", "user": "55f32f6fe4b06e875b46ce53"}, {"problem": 38, "code": "(fn [& data] (last (sort data)))", "user": "5621251be4b064ca9f4b16ee"}, {"problem": 38, "code": "(fn [& args]\n    (loop [s args\n           m (first args)]\n      (cond\n        (empty? s) m\n        :else (recur (rest s) (if (> (first s) m)\n                                (first s)\n                                m)))))", "user": "5600dccee4b04bb52996e175"}, {"problem": 38, "code": "(fn [& l] (reduce #(if (> %1 %2) %1 %2) l))", "user": "56102f50e4b05f002753df6b"}, {"problem": 38, "code": "(fn [& a]\n  (reduce (fn [r x]\n            (if (> r x) r x)) a))", "user": "56171eade4b06b1bb2182a0c"}, {"problem": 38, "code": "(fn [& nums] (reduce (fn [x y] (if (> x y) x y)) 0 nums))", "user": "5626447fe4b00e49c7cb47bd"}, {"problem": 38, "code": "(fn my-max [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "56278266e4b00e49c7cb47d3"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ))", "user": "53623eaee4b0243289761e4f"}, {"problem": 38, "code": "(fn [& args]\n  (-> args sort last)\n)", "user": "56279816e4b00e49c7cb47d5"}, {"problem": 38, "code": "(fn [& input]\n  (-> input\n  sort\n  last))", "user": "546b24a0e4b00cfc9eacc166"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "5628cb07e4b00e49c7cb47ef"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5627d09ce4b00e49c7cb47db"}, {"problem": 38, "code": "(fn [& args]\n\t(loop [s args n 0]\n      (if (nil? (first s))\n        n\n        (if (> (first s) n) (recur (rest s) (first s))(recur (rest s) n)  )\n      )\n     )  \n)", "user": "560331dee4b04bb52996e1b5"}, {"problem": 38, "code": "(comp   first reverse sort list)", "user": "562733a6e4b00e49c7cb47ca"}, {"problem": 38, "code": "(fn [p & params] (reduce #(if (> %1 %2) %1 %2) p params))", "user": "551e6526e4b030e6a24d00e8"}, {"problem": 38, "code": "(fn [f & list]\n (loop [kand list m f]\n  (if (empty? kand)\n   m\n   (recur \n    (rest kand) \n    (if (> (first kand) m)\n     (first kand)\n     m)))))", "user": "4e80d1c8535db62dc21a62b6"}, {"problem": 38, "code": "(fn my-max [& r]\n            (reduce (fn [a b] (if (> a b) a b))\n                    r))", "user": "562be270e4b058fa18c5a6d1"}, {"problem": 38, "code": "(fn [& coll] \n  (reduce \n   (fn [x y] (if (> y x) y x)) \n   coll))", "user": "562c15d3e4b058fa18c5a6d5"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (>= x y) x y)) args))", "user": "5629a207e4b00e49c7cb480f"}, {"problem": 38, "code": "(fn [& xs]\n  (let [max' #(if (> %2 %1) %2 %1)]\n    (reduce max' xs)))", "user": "5629dfaae4b00e49c7cb4813"}, {"problem": 38, "code": "(fn [& ns] \n  (reduce #(if (> %1 %2) %1 %2) \n          ns))", "user": "562cd94ee4b0a45d2ff83015"}, {"problem": 38, "code": "(fn [& elts]\n  (loop [nums elts\n         mx (first nums)]\n    (if \n      (not (empty? nums)) \n      (recur (rest nums) \n             (if (< mx (first nums)) (first nums) mx))\n      mx)))", "user": "53b1db8ee4b047364c044495"}, {"problem": 38, "code": "(fn [& n] (reduce (fn [a b] (if (< a b) b a)) n))", "user": "504f0c9ce4b0e7ad84dbc4b2"}, {"problem": 38, "code": "(fn [& args]\n  (reduce \n   #(if (> % %2) % %2) args))", "user": "5627444fe4b00e49c7cb47cd"}, {"problem": 38, "code": "#(last (sort %&))", "user": "562b57c7e4b058fa18c5a6cc"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "561a1af6e4b053970a773b02"}, {"problem": 38, "code": "(fn [& x] (loop [i 0 m (first x) c (first x)] (if (= i (count x)) m (if (> c m) (recur (inc i) c (nth x i)) (recur (inc i) m (nth x i))))))", "user": "560d2b53e4b05f002753df37"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "user": "561e3537e4b064ca9f4b16bc"}, {"problem": 38, "code": "(fn [& sq]\n  (loop [x sq, mx (first sq)]\n    (if (empty? x)\n      mx\n      (if (> (first x) mx)\n        (recur (rest x) (first x))\n        (recur (rest x) mx)))))\n; or more simply: (comp last sort vector)", "user": "55fc07d3e4b0f488688e066e"}, {"problem": 38, "code": "(fn [& vals](loop [c vals mx (reduce min vals)] (if (empty? c) mx (recur (rest c) (if (> (first c) mx) (first c) mx)))))", "user": "5614ebc5e4b05f002753dfbc"}, {"problem": 38, "code": "(fn[& l] (reduce #(if(> %1 %2) %1 %2) l))", "user": "561cad18e4b064ca9f4b169d"}, {"problem": 38, "code": "(fn [& n] ((fn m [a b] (if (seq b) (if (> a (first b)) (m a (rest b)) (m (first b) (rest b))) a)) (first n) (rest n)))", "user": "562b1a7be4b058fa18c5a6cb"}, {"problem": 38, "code": "(fn n [& z]\n  ((fn m [a &[b]]\n    (if (empty? b) a\n      (if (> a (first b)) (m a (rest b))\n        (m (first b) (rest b))))) 0 z))", "user": "561a4769e4b053970a773b05"}, {"problem": 38, "code": "(fn valormaximo [x & y]\n  (reduce (fn [x z] (if (pos? (.compareTo z x)) z x)) x y))", "user": "562eafbce4b0ab312c17ebbe"}, {"problem": 38, "code": "(fn my-max [& coll]\n  (if (empty? (rest coll))\n    (first coll)\n    (if (> (first coll)\n           (second coll))\n      (apply my-max (cons (first coll) (rest (rest coll))))\n      (apply my-max (rest coll)))))", "user": "562e05e0e4b0a45d2ff83023"}, {"problem": 38, "code": "(fn [& nums] \n  (reduce \n    (fn [m n] \n      (if (> n m) n m))\n    0\n    nums))", "user": "562e8b2be4b0ab312c17ebbb"}, {"problem": 38, "code": "(fn [& coll]\n  (last (sort coll)))", "user": "562db4d1e4b0a45d2ff83021"}, {"problem": 38, "code": "(fn [& coll]\n  (reduce (fn [a b] (if (>= a b) a b)) coll))", "user": "562cb7cfe4b0a45d2ff83009"}, {"problem": 38, "code": "(fn maxo [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "55ed9108e4b0121d4835fddc"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) 0 (vec args)))", "user": "55f95782e4b03cbcff9738bf"}, {"problem": 38, "code": "(fn [& args] (-> args vec sort reverse first))", "user": "562e9f12e4b0ab312c17ebbc"}, {"problem": 38, "code": "(fn [& s] (reduce #(if (> %2 %1) %2 %1) s))", "user": "562fb774e4b0ab312c17ebd9"}, {"problem": 38, "code": "(fn [& args]\n   (first (sort > args)))", "user": "5191a763e4b0d428d29dc1b4"}, {"problem": 38, "code": "(fn [& ob]\n             (let [len (count ob)]\n               (loop [maxNum (Integer/MIN_VALUE) i 0]\n                 (if (= i len)\n                   maxNum\n                   (let [tempNum (nth ob i)]\n                     (if (< maxNum tempNum)\n                       (recur tempNum (+ i 1))\n                       (recur maxNum (+ i 1))))))))", "user": "56305383e4b073c1cf7a9be6"}, {"problem": 38, "code": "(fn [x & y] \n  (if (seq y)\n    (reduce (fn [a b] (if (> b a) b a)) x y)\n    x))", "user": "56308326e4b073c1cf7a9be9"}, {"problem": 38, "code": "(comp last sort list)", "user": "563152e6e4b0bfe05bf11792"}, {"problem": 38, "code": "(fn [& rest] (last (sort rest)))", "user": "561d7246e4b064ca9f4b16b1"}, {"problem": 38, "code": "(fn find-max\n  [& input-seq]\n  (let [sorted-input (into (sorted-set) input-seq)]\n    (last sorted-input)))", "user": "4fc524aae4b081705acca37e"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (< %1 %2) %2 %1) args))", "user": "5630cff7e4b0bfe05bf11787"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [current, item] (if (> current item) current item)) args))", "user": "532dfbdbe4b019098a6f8b44"}, {"problem": 38, "code": "(fn [& a] (reduce #(if(> %1 %2) %1 %2 ) a) )", "user": "563130e4e4b0bfe05bf1178d"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "55f85e85e4b03cbcff9738af"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "56174d86e4b06b1bb2182a0e"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args) )", "user": "56350c87e4b0bfe05bf117c0"}, {"problem": 38, "code": "#(reduce (fn [m, c] (if (< m c) c m)) 0 %&)", "user": "54995298e4b0b312c081ff8b"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "54c6e78ae4b045293a27f634"}, {"problem": 38, "code": "(fn [& x]\n  (reduce #(if (> %2 %) %2 %) x))", "user": "56288ccae4b00e49c7cb47ea"}, {"problem": 38, "code": "(fn mymax [& number]\n (last ( apply sorted-set (into #{}  number )))\n     )", "user": "56349008e4b0bfe05bf117bd"}, {"problem": 38, "code": "; clojure sort functie: https://clojuredocs.org/clojure.core/sort gaat van laag naar hoog\n#(last (sort %&))", "user": "5637bd38e4b0bfe05bf117de"}, {"problem": 38, "code": "(fn [& ns] (last (sort ns)))", "user": "56347285e4b0bfe05bf117bc"}, {"problem": 38, "code": "(fn maxit [& args]\n   (last (sort (apply vector args))))", "user": "5632abbee4b0bfe05bf117a7"}, {"problem": 38, "code": "(fn [& rest]\n  (reduce (fn [maximum x] (if (> x maximum) x maximum)) rest))", "user": "4f0366b0535dcb61093f6aa9"}, {"problem": 38, "code": "(fn my-max [& coll] (reduce #(if (> %1 %2) %1 %2 ) (first coll) (rest coll) ))", "user": "5630fd6fe4b0bfe05bf1178b"}, {"problem": 38, "code": "(fn [& args] \n  (last (sort args)))", "user": "5638e384e4b0bfe05bf117ec"}, {"problem": 38, "code": "(fn [& numbers] (last (sort numbers)))", "user": "562fd63be4b0ab312c17ebde"}, {"problem": 38, "code": "(fn [& vs] (reduce #(if (> %2 %1) %2 %1) vs))", "user": "56372798e4b0bfe05bf117d0"}, {"problem": 38, "code": "(fn get-max [& args] \n  (let [my-max (fn mymax\n   [l max-so-far]\n    (if (empty? l) max-so-far\n      (if (> (first l) max-so-far)\n        (mymax (rest l) (first l))\n        (mymax (rest l) max-so-far)\n      )\n    )\n  )]\n  (my-max args -99999)))", "user": "56393681e4b0bfe05bf117f2"}, {"problem": 38, "code": "(fn [& d]\n  (reduce \n   #(if (> %1 %2) %1 %2) d))", "user": "56366f73e4b0bfe05bf117cc"}, {"problem": 38, "code": "(fn [& x] (last (sort  x)))", "user": "5604ae27e4b0c80df0ca2663"}, {"problem": 38, "code": "(fn [& r] (reduce #(if (> %1 %2) %1 %2) r))", "user": "563799f8e4b0bfe05bf117db"}, {"problem": 38, "code": "#(first (sort > %&))", "user": "52fe2dffe4b047fd55837036"}, {"problem": 38, "code": "(fn\n  [& args]\n  (reduce (fn [a b] (if (> a b) a b)) args)\n  )", "user": "563a30d7e4b0bfe05bf117f9"}, {"problem": 38, "code": "(fn custom-max [& numbers] (last (sort numbers)))", "user": "528147b6e4b0757a1b171425"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce (fn [t v] (if (> v t) v t)) xs))", "user": "54dce62fe4b024c67c0cf78c"}, {"problem": 38, "code": "(fn maximum [& args]\n  (reduce #(if (> %1 %2)\n             %1\n             %2) args))", "user": "56339e23e4b0bfe05bf117b1"}, {"problem": 38, "code": "(fn maxFun\n  ([x] x)\n  ([x y] (if (< x y) y x ))\n  ([x y & more] (let [f (maxFun x y) s (first (sort > (seq more)))] (maxFun f s)))\n  )", "user": "56252effe4b00a550fc90294"}, {"problem": 38, "code": "(comp first reverse sort vector)", "user": "56283825e4b00e49c7cb47e4"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "56388a0fe4b0bfe05bf117e7"}, {"problem": 38, "code": "(fn [& args] (-> args sort last))", "user": "56399b7ee4b0bfe05bf117f5"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "561ea06ce4b064ca9f4b16c3"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "55c13e73e4b01b9910ae2a2f"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "5632b0a9e4b0bfe05bf117a8"}, {"problem": 38, "code": "(fn [& args] (last(sort args)))", "user": "56306e6ce4b073c1cf7a9be7"}, {"problem": 38, "code": "(fn fme [l & lrest]\n    (if (empty? lrest) \n      l \n      (let [[lrest1 & lrestrest] lrest]\n        (if (> l lrest1) (apply fme (conj lrestrest l))\n                          (apply fme lrest)\n          )\n        )\n      )\n      \n)", "user": "563747e9e4b0bfe05bf117d2"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "user": "53c7da9ce4b00fb29b2212ad"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "563cf9e5e4b0bfe05bf11844"}, {"problem": 38, "code": "(fn [& args]\n\t(reduce #(if (> %1 %2) %1 %2) args))", "user": "53bbae20e4b047364c044509"}, {"problem": 38, "code": "(fn [& nums]\n  (last (sort nums)))", "user": "562f44e6e4b0ab312c17ebc7"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5054d243e4b0b1b9d1860eb5"}, {"problem": 38, "code": "(fn [& args]\n   (let [coll (apply list args)]\n   (loop [out 0\n          in coll]\n     (if (empty? in)\n       out\n       (recur (if (> (first in) out) (first in) out)\n              (drop 1 in))))))\n\n; This works if you have a collection. So it's just a matter of taking a \n; variable number of parameters and putting it into a collection.\n;(fn [coll]\n;   (loop [out 0 \n;          in coll]\n;     (if (empty? in)\n;       out\n;       (recur (if (> (first in) out) (first in) out)\n;              (drop 1 in)))))", "user": "5633bb9de4b0bfe05bf117b4"}, {"problem": 38, "code": "(fn [& l] (reduce #(if (> %1 %2) %1 %2) l))", "user": "563dfc02e4b0da801c4e4662"}, {"problem": 38, "code": "(fn mx [& t] \n  (reduce\n    #(if (<= %1 %2)\n         %2\n         %1)\n    t))", "user": "55c49394e4b0e31453f6499e"}, {"problem": 38, "code": "(fn[& x](reduce #(if (> %1 %2) %1 %2) x))", "user": "55350bdae4b09218d5f44fa8"}, {"problem": 38, "code": "(fn [& coll] (loop [[x & r] coll m x]\n             (if (empty? r)\n               m\n               (recur r (if (> x m) x m)))))", "user": "563ddefee4b0bfe05bf11857"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [tmp val] (if (> tmp val) tmp val)) (first args) args ))", "user": "563e7a33e4b0da801c4e466d"}, {"problem": 38, "code": "(fn [a & args]\n  (reduce #( if (> %1 %2) %1 %2) a (seq args)))", "user": "56019662e4b04bb52996e190"}, {"problem": 38, "code": "(fn \n   [x & xs]\n  (reduce \n   #(if \n      (< %1 %2) %2 %1) \n   x xs))", "user": "56083383e4b046a4fc0ac00a"}, {"problem": 38, "code": "(fn [& m] (reduce (fn [c d] (if (> c d) c d)) 0 m))", "user": "563ed73ae4b08d4f616f5ecb"}, {"problem": 38, "code": "(fn [& args] \n  (reduce \n   (fn [x y]\n     (if (> x y) x y)) \n   args))", "user": "52179e00e4b0ea2f1c31c8d3"}, {"problem": 38, "code": "(fn test5 [& args] (last (sort (seq args))))", "user": "5628f33ce4b00e49c7cb47f3"}, {"problem": 38, "code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) s))", "user": "544e6b7fe4b0e39780006986"}, {"problem": 38, "code": "(fn my-max\n  [& args]\n  (loop [s args\n         m (first args)]\n\t(if (empty? s)\n\t  m\n\t  (recur (rest s) (if (> (first s) m) (first s) m)))))", "user": "563f1493e4b08d4f616f5ecf"}, {"problem": 38, "code": "#(last (sort %&))", "user": "52d68ed2e4b09f7907dd1362"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if(> %1 %2) %1 %2) rest))", "user": "562f2985e4b0ab312c17ebc5"}, {"problem": 38, "code": "(fn mx [x & args] (if (= 0 (count args)) x (if (> x (first args)) (apply mx (cons x (rest args))) (apply mx args) ) ) )", "user": "563b559ee4b0bfe05bf1180d"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "user": "56010dd8e4b04bb52996e177"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "56405959e4b08d4f616f5ee1"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [x y]\n            (if (> x y) x y)) args)\n)", "user": "551c02fbe4b07993ea3788d8"}, {"problem": 38, "code": "(fn [& x] (->> (sort x)(last)))", "user": "563d3fc8e4b0bfe05bf1184b"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5591da55e4b0604b3f94d585"}, {"problem": 38, "code": "(fn [& number] (last (sort number)))", "user": "55c6fd60e4b0e31453f649c9"}, {"problem": 38, "code": "(fn [a & args] (reduce (fn [x y] (if (> x y) x y)) a args))", "user": "563f2eaae4b08d4f616f5ed1"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "user": "54588070e4b01be26fd74620"}, {"problem": 38, "code": "(fn [& l] (last (sort l)))", "user": "52f16601e4b05e3f0be25eec"}, {"problem": 38, "code": "(fn [& s] (reduce (fn [x y] (if (> x y) x y)) s))", "user": "56416320e4b08d4f616f5efb"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce (fn [a b] (if (> a b) a b)) xs))", "user": "56272be6e4b00e49c7cb47c9"}, {"problem": 38, "code": "(fn my-max [x & more] \n  (if more \n    (let [y (first more)] \n      (recur (if (> x y) x y) (next more))) \n    x))", "user": "556ffa45e4b09a3098a52528"}, {"problem": 38, "code": "(fn [x & more] (reduce #(if (< %1 %2) %2 %1)  x more))", "user": "564127a9e4b08d4f616f5ef3"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "563e022be4b0da801c4e4664"}, {"problem": 38, "code": "(fn [& xs] \n  (reduce (fn [n m] \n            (if (< n m)\n              m\n              n))\n          xs))", "user": "564161aae4b08d4f616f5ef9"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) 0 args))", "user": "54cec2a9e4b018d918be98c1"}, {"problem": 38, "code": "(fn [x & y] (reduce #(if (> %2 %1) %2 %1) x y))", "user": "5642f094e4b08d4f616f5f1f"}, {"problem": 38, "code": "(fn m [& args] \n  (last (sort args)))", "user": "51a0370ae4b0b292b01ee3ef"}, {"problem": 38, "code": "(fn [& coll]\n  (reduce #(if (> %1 %2) %1 %2) 0 coll))", "user": "55eb026de4b0121d4835fdb7"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "5642b939e4b08d4f616f5f1b"}, {"problem": 38, "code": "(fn max-val [& vals]\n  (reduce #(if (> %2 %1) %2 %1) (first vals) vals))", "user": "5619a388e4b053970a773afc"}, {"problem": 38, "code": "(fn [& coll] (->> coll (sort-by -) first))", "user": "5376190de4b06839e8705e1c"}, {"problem": 38, "code": "(fn mymax [& args] \n  (reduce #(if (> %2 %1) %2 %1) args))", "user": "563b5dc9e4b0bfe05bf1180f"}, {"problem": 38, "code": "(fn max' [& more]\n  (last (sort more)))", "user": "563fc1f2e4b08d4f616f5ed7"}, {"problem": 38, "code": "(fn [& args] (first (sort > args)))", "user": "5641296de4b08d4f616f5ef4"}, {"problem": 38, "code": "(fn [& nums] (last (sort nums)))", "user": "5639e878e4b0bfe05bf117f7"}, {"problem": 38, "code": "(comp last sort list)", "user": "564452d1e4b0018b46ad8c0d"}, {"problem": 38, "code": "(fn [& coll]\n  (loop [ans (first coll)\n         c (next coll)]\n    (if (empty? c)\n     ans\n      (recur (if (> ans (first c))\n               ans\n               (first c)) (next c)))))", "user": "5634995fe4b0bfe05bf117be"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "563772a9e4b0bfe05bf117d7"}, {"problem": 38, "code": "(fn my_max [& s]\n    (last (apply sorted-set s)))", "user": "56058d64e4b08b23635d3169"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce\n   (fn [r x] (if (< r x) x r))\n   xs))\n\n;; Using sort\n;(comp last sort list)", "user": "54485749e4b032a45b8693c7"}, {"problem": 38, "code": "(fn [& coll] (first (reverse (sort coll))))", "user": "562ab73ce4b00e49c7cb482e"}, {"problem": 38, "code": "(fn max* [h & t]\n  (if (empty? t)\n    h\n    (let [tm (apply max* t)]\n      (if (> h tm) h tm))))", "user": "56451201e4b0284900eef600"}, {"problem": 38, "code": "(fn [& argv]\n  (reduce #(if (> %1 %2) %1 %2)\n          argv))", "user": "5645a7d6e4b0284900eef608"}, {"problem": 38, "code": "#(last (sort %&))", "user": "52c48ec6e4b0c2d177d620dd"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [x y] (if (> x y)\n                      x\n                      y))\n          args))", "user": "56372c3ce4b0bfe05bf117d1"}, {"problem": 38, "code": "(fn  [ & more]\n  (reduce #(if (> %1 %2) %1 %2) more\n   )\n)", "user": "5619b22ee4b053970a773afe"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "5645a7f9e4b0284900eef609"}, {"problem": 38, "code": "(fn [& elems]\n  (reduce #(if (> %1 %2) %1 %2) elems))", "user": "56442758e4b0018b46ad8c0a"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "56304db8e4b073c1cf7a9be5"}, {"problem": 38, "code": "(fn [ & coll] (loop [x (first coll) i 0]     (if (>= i (count coll)) x  (recur (#(if (< %1 (nth coll %2)) (nth coll %2) %1) x i) (inc i) ))))", "user": "551e2cade4b030e6a24d00e4"}, {"problem": 38, "code": "(fn [x & xs]\n  (loop [x x\n         xs xs]\n    (if (empty? xs)\n      x\n      (recur (if (> x (first xs))\n               x\n               (first xs))\n             (rest xs)))))", "user": "564583f0e4b0284900eef607"}, {"problem": 38, "code": "(fn most [& x] (last (sort x)))", "user": "503e4138e4b06c4e0e1fa263"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "562d869be4b0a45d2ff8301f"}, {"problem": 38, "code": "(fn [& nums] (loop [x nums, m 0]\n   (if (= (count x) 0)\n     m\n     (if (> (first x) m)\n       (recur (rest x) (first x))\n       (recur (rest x) m)))))", "user": "56049986e4b0c80df0ca2662"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "56466fb1e4b0284900eef613"}, {"problem": 38, "code": "#(first (reverse (sort %&)))", "user": "5632e850e4b0bfe05bf117ac"}, {"problem": 38, "code": "(fn f ([a] a) ( [a b & args] (if (> a b) (apply f ( cons a args))  (apply f (cons b args)))))", "user": "556282d0e4b0c656e3ff17da"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "54df838de4b024c67c0cf7ae"}, {"problem": 38, "code": "(fn [x & xs]\n    (let [max2 (fn [x y] (if (> x y) x y))]\n        (reduce max2 x xs)\n      )\n    )", "user": "56487940e4b0284900eef630"}, {"problem": 38, "code": "(fn [head & tail] (reduce #(if (> % %2) % %2) head tail))", "user": "545a2da7e4b01be26fd74634"}, {"problem": 38, "code": "(fn maxi [& xs]\n  (if (every? #(> (first xs) %) (rest xs))\n    (first xs)\n    (apply maxi (rest xs))))", "user": "5643ba10e4b0018b46ad8bff"}, {"problem": 38, "code": "(fn maximum [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "5630471ce4b073c1cf7a9be4"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "564045a8e4b08d4f616f5edd"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (< a b) b a)) args))", "user": "5647dc44e4b0284900eef624"}, {"problem": 38, "code": "(fn [& lst] (reduce #(if (> %1 %2) %1 %2) lst))", "user": "5649542fe4b0284900eef63f"}, {"problem": 38, "code": "(fn [& items]\n  (reduce #(if (> %1 %2) %1 %2) items))", "user": "50738138e4b054001656acc9"}, {"problem": 38, "code": "(fn [ & values ]\n    (reduce #(if (< %1 %2) %2 %1) values)\n)", "user": "56438342e4b0018b46ad8bf4"}, {"problem": 38, "code": "(fn [& rest] (-> rest sort reverse first))", "user": "54a6645be4b09f271ff37c87"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5646dff3e4b0284900eef615"}, {"problem": 38, "code": "(fn \n  biggest \n  [a & xyz] \n  (if (nil? xyz) \n    a \n    (let \n      [champ (apply biggest xyz)] \n      (if (> a champ) \n        a \n        champ\n       )\n    )\n  )\n)", "user": "56449e4de4b0284900eef5f9"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) (seq args)))", "user": "56427910e4b08d4f616f5f19"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "564a7e4be4b0284900eef65a"}, {"problem": 38, "code": "(fn [& s]\n  (reduce (fn [a b] (if (> a b) a b)) s))", "user": "563d12f9e4b0bfe05bf11845"}, {"problem": 38, "code": "(fn [& s] (reduce (fn [x y] (if (> x y) x y)) s))", "user": "5637557ce4b0bfe05bf117d4"}, {"problem": 38, "code": "(fn [& s]\n  (reduce (fn [acc s*] (if (> s* acc) s* acc)) (first s) (rest s)))", "user": "563c0d4ce4b0bfe05bf11831"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [x acc] (if (> x acc) x acc)) 0 xs))", "user": "4ee98e00535d93acb0a6688e"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (< a b) b a)) %&)", "user": "5400407de4b0de5c4184860a"}, {"problem": 38, "code": "(fn [& xs] (last (sort (identity xs))))", "user": "56441e72e4b0018b46ad8c09"}, {"problem": 38, "code": "(fn [& args]\n    (last (sort args))\n \n)", "user": "564633a1e4b0284900eef60f"}, {"problem": 38, "code": "(fn stuff [& all]  \n  (reduce (fn maximiser[a b] (if (> a b) a b)) all))", "user": "564b1ff8e4b0284900eef663"}, {"problem": 38, "code": "(fn[& args]\n  (last (sort args)))", "user": "51671557e4b013fc800656c4"}, {"problem": 38, "code": "(fn [& xs]\n  (let[acc 0]\n  (reduce (fn [t val](if(> val t) val t) ) acc xs)))", "user": "54dce6dbe4b024c67c0cf78d"}, {"problem": 38, "code": "(fn [x & xs]\n  (loop [m x [y & ys] xs]\n    (if y\n      (if (< m y)\n        (recur y ys)\n        (recur m ys))\n      m)))", "user": "5643a11ee4b0018b46ad8bfb"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "user": "4e7d5eb8535db169f9c796d6"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "55ff562fe4b00f4cabc57660"}, {"problem": 38, "code": "(fn [& A]\n\t(reduce #(if (< %1 %2) %2 %1) \n      A) \n)", "user": "5649615be4b0284900eef641"}, {"problem": 38, "code": "(fn [& all] \n  (reduce #(if (> %1 %2) %1 %2) all))", "user": "564b495de4b0284900eef667"}, {"problem": 38, "code": "(fn a[& arg] (last (sort arg)))", "user": "5640803be4b08d4f616f5ee6"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [x y] (if (> x y) x y))\n            args))", "user": "563b9acbe4b0bfe05bf11827"}, {"problem": 38, "code": "(fn mymax [& l] (reduce (fn [a b] (if (< a b) b a)) l))", "user": "4df9d3b0535d04ed9115e77b"}, {"problem": 38, "code": "#(last (sort %&))", "user": "541ef7e2e4b01498b1a71a92"}, {"problem": 38, "code": "(fn big\n    [frst & tail]\n    (let [big2 \n          #(-> (if (> %1 %2) %1 %2))\n         ]      \n                 \n      (if (= 1 (count tail))\n        (big2 frst (first tail))\n        (big2 frst (apply big tail))\n        )\n     )\n  )", "user": "539da224e4b0b51d73faaf39"}, {"problem": 38, "code": "(fn [a b & more] (let [nums (reduce conj (conj [] a b) more)\nresult (reduce (fn [a b & more] (if (< a b) b a)) 0 nums)]\nresult\n) )", "user": "562f45e6e4b0ab312c17ebc8"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x) )", "user": "564054a9e4b08d4f616f5edf"}, {"problem": 38, "code": "(fn find-max [& args] (peek (vec (sort (into () args)))))", "user": "5641f0ede4b08d4f616f5f11"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2 ) 0 args ))", "user": "564a560ae4b0284900eef654"}, {"problem": 38, "code": "(comp last sort list)", "user": "564d3169e4b0284900eef67c"}, {"problem": 38, "code": "#(loop [m %1 s %&] (if (empty? s) m (recur (if (< m (first s)) (first s) m) (rest s))))", "user": "564b3730e4b0284900eef665"}, {"problem": 38, "code": "#(last (sort %&))", "user": "56313ff1e4b0bfe05bf1178f"}, {"problem": 38, "code": "(fn xmax2                                                                     \n  ([] nil)                                                                      \n  ([x] x)                                                                       \n  ([x & xs]                                                                     \n   (loop [ elms xs mux x ]                                                      \n     (if (= 0 (count elms))                                                     \n       ;; then                                                                  \n       mux                                                                      \n       ;; else                                                                  \n       (recur (rest elms)                                                       \n              (if (> (first xs) mux)                                            \n                ;; then                                                         \n                  (first xs)                                                    \n                ;; else                                                         \n                  mux                                                           \n              ))))))", "user": "564cc055e4b0284900eef676"}, {"problem": 38, "code": "(fn [& n]\n  (reduce #(if (> %1 %2)\n             %1\n             %2)\n          n))", "user": "564d7434e4b0284900eef680"}, {"problem": 38, "code": "(fn [x & xs] \n  (reduce #(if(> %1 %2) %1 %2) x xs))", "user": "564a7a0de4b0284900eef659"}, {"problem": 38, "code": "#(last (sort %&))", "user": "563b1553e4b0bfe05bf1180a"}, {"problem": 38, "code": "(fn [& args] \n  (reduce \n   #(if (> %1 %2) %1 %2) args))", "user": "56504dc2e4b0284900eef6bc"}, {"problem": 38, "code": "#(last (sort %&))", "user": "52725fa4e4b03e8d9a4a742b"}, {"problem": 38, "code": "(fn find-max [in1 & inrest]\n\t(loop [[x1 & xrest :as X] inrest, vmax in1]\n\t\t(if (seq X)\n\t\t\t(recur xrest (if (< vmax x1) x1 vmax))\n\t\t\tvmax)))", "user": "564d02cde4b0284900eef679"}, {"problem": 38, "code": "#(last (sort %&))", "user": "563c48e7e4b0bfe05bf11832"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %2 %) %2 %) xs))", "user": "56441634e4b0018b46ad8c08"}, {"problem": 38, "code": "#(last (sort %&))", "user": "55577fcce4b0deb715856e24"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (> %1 %2) %1 %2) x xs))", "user": "56430277e4b08d4f616f5f20"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "4f037faf535dcb61093f6af8"}, {"problem": 38, "code": "(fn [& coll] (reduce #(if (< %1 %2) %2 %1) coll))", "user": "5650b8a0e4b0284900eef6c3"}, {"problem": 38, "code": "(fn [& lst]\n  (reduce\n    (fn [highest el]\n      (if (> el highest)\n        el\n        highest))\n     (first lst)\n     (rest lst)))", "user": "5625f678e4b00e49c7cb47b8"}, {"problem": 38, "code": "(fn [& nums] (reduce (fn [acc el] (if (> acc el) acc el)) nums))", "user": "564faadce4b0284900eef6b2"}, {"problem": 38, "code": "(fn m ([x] x)\n      ([x y] (if (< x y) y x))\n      ([x y & zs] (apply m (m x y) zs))\n  )", "user": "56521a26e4b0f9d632dd845f"}, {"problem": 38, "code": "(fn [& r]\n  (let [reducer (fn [acc n]\n                  (if (> n acc)\n                    n\n                    acc))]\n    (reduce reducer 0 r)))", "user": "55f358a2e4b06e875b46ce5c"}, {"problem": 38, "code": "(fn [& a] (* -1 (apply min (map #(* -1 %) a))))", "user": "5652f23ce4b0f9d632dd846b"}, {"problem": 38, "code": "(fn [& c] (reduce #(if (> %1 %2) %1 %2) c))", "user": "564066dee4b08d4f616f5ee2"}, {"problem": 38, "code": "(fn [& in] \n  (reduce #(if (>= %1 %2) \n           %1\n           %2) in))", "user": "5600591de4b04bb52996e166"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "user": "56448dc1e4b0284900eef5f6"}, {"problem": 38, "code": "(fn [& numbers]\n  (loop [highest (first numbers) \n         remaining (rest numbers)]\n    (if (empty? remaining)\n      highest\n      (let [nxt (first remaining)]\n        (if (> nxt highest)\n          (recur nxt (rest remaining))\n          (recur highest (rest remaining)))))))", "user": "4ec7e048535d6d7199dd36ea"}, {"problem": 38, "code": "(fn [elem & rest]\n  (reduce (fn [x y] (if (> x y) x y))  elem rest))", "user": "4fd9cc7ee4b05e33b9224f3a"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "565233f2e4b0f9d632dd8461"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "56488119e4b0284900eef632"}, {"problem": 38, "code": "(fn mymax [& args] \n  (->> args (sort) (last)))", "user": "54de7948e4b024c67c0cf7a4"}, {"problem": 38, "code": "(fn xmax [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "564ecc9ee4b0284900eef6a1"}, {"problem": 38, "code": "(fn my-max [& arr]\n  (reduce #(if (> % %2) % %2) arr)\n  )", "user": "56530a1ce4b0f9d632dd846c"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5632d1b3e4b0bfe05bf117a9"}, {"problem": 38, "code": "(fn flach [& params] (loop [coll (into [] params) \n                              mval (first coll)]\n                           (if (empty? coll) \n                             mval\n                             (recur (rest coll) (if (> (first coll) mval) (first coll) mval)))))", "user": "55cd95b4e4b0e31453f64a1e"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "552281cae4b0882d96d0919f"}, {"problem": 38, "code": "(fn [& z] \n     (nth (take-last 1 (sort z)) 0)\n    )", "user": "564058f4e4b08d4f616f5ee0"}, {"problem": 38, "code": "(fn [v & args]\n  (reduce (fn [m el] (if (> el m) el m)) v args))", "user": "5169d422e4b051e2a73aba53"}, {"problem": 38, "code": "(fn [& rest] (last (sort rest)))", "user": "4fc77f5ae4b0ee37620e1821"}, {"problem": 38, "code": "(fn [& ls] (reduce #(if (> %1 %2) %1 %2) ls))", "user": "56424f5de4b08d4f616f5f17"}, {"problem": 38, "code": "(fn [& args]\n  (loop [a (first args) b (rest args)]\n    (if (> a (first b))\n      a\n      (recur (first b) (rest b)))))", "user": "550b1c2ce4b06e50f9beb13b"}, {"problem": 38, "code": "(fn[& args]( last( sort args ) ) )", "user": "56188848e4b053970a773aea"}, {"problem": 38, "code": "(comp last sort vector)", "user": "5654d0e1e4b0f9d632dd848c"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (> %1 %2) %1 %2) x xs))", "user": "565540d2e4b0f9d632dd8494"}, {"problem": 38, "code": "#(last (sort %&))", "user": "56126d71e4b05f002753df90"}, {"problem": 38, "code": "(fn [ & args] (first (reverse (apply sorted-set args))))", "user": "558159b3e4b05c286339e0f7"}, {"problem": 38, "code": "(fn [& rest]\n  (reduce #(if (> %1 %2) %1 %2) rest))", "user": "564da567e4b0284900eef682"}, {"problem": 38, "code": "(fn findm [& args] \n    (reduce #(if (> %1 %2)\n                %1\n                %2) args))", "user": "5654cb2de4b0f9d632dd848b"}, {"problem": 38, "code": "(fn [& n] (last (sort n)))", "user": "5654e8ade4b0f9d632dd848e"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "user": "56561119e4b0f9d632dd849d"}, {"problem": 38, "code": "(fn [& c] (reduce #(if (> %1 %2) %1 %2) c))", "user": "561e8b11e4b064ca9f4b16c0"}, {"problem": 38, "code": "(fn max-args [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5654e024e4b0f9d632dd848d"}, {"problem": 38, "code": "(fn [& lst] (last (sort lst)))", "user": "56367c51e4b0bfe05bf117cd"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "54fce8bde4b07d26eda61d30"}, {"problem": 38, "code": "(fn [xs & x] (reduce #(if (< %1 %2) %2 %1) xs x))", "user": "55dc30d4e4b050e68259b3ad"}, {"problem": 38, "code": "(fn maxim\n  [& coll]\n  (if (nil? coll)\n    nil\n    (let [m (fn m [{:keys [mx rest]}]\n              (if (nil? rest)\n                mx\n                (let [[n & rs] rest]\n                  (if (< mx n)\n                    (m {:mx n :rest rs})\n                    (m {:mx mx :rest rs})))))]\n      (let [[mx & ms] coll]\n        (m {:mx mx :rest ms})))))", "user": "56557d2de4b0f9d632dd8498"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "user": "56532ff4e4b0f9d632dd846e"}, {"problem": 38, "code": "(fn [x & xs] (-> (list x xs) (flatten) (sort) (reverse) (first)))", "user": "5658d775e4b00d3155796114"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %2 %1) %2 %1) 0 xs))", "user": "56444fb1e4b0018b46ad8c0c"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if (> % %2) % %2) rest))", "user": "5658acabe4b0f9d632dd84b7"}, {"problem": 38, "code": "(fn [& els] (reduce (fn [prev this] (if (> this prev) this prev)) els))", "user": "5658b9bde4b00d315579610e"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "5658eaa0e4b00d3155796115"}, {"problem": 38, "code": "(fn [& x] (reduce (fn [a,b] (if (> a b) a b)) x))", "user": "5651de3ee4b0f9d632dd845b"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "564c8e99e4b0284900eef674"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %2 %1) %2 %1) x))", "user": "56588f4ee4b0f9d632dd84b6"}, {"problem": 38, "code": "(fn [& r]\n  (reduce #(if (> %1 %2) %1 %2) r))", "user": "565a3e25e4b068f2fe63dbfb"}, {"problem": 38, "code": "#(last (sort %&))", "user": "54b63539e4b05787c3b163b4"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5649d538e4b0284900eef647"}, {"problem": 38, "code": "(fn [& es]\n  (loop [m (first es)\n         xs (rest es)]\n    (cond (empty? xs) m\n          (> (first xs) m) (recur (first xs) (rest xs))\n          :else (recur m (rest xs)))))", "user": "5516a874e4b06a49daca83b5"}, {"problem": 38, "code": "(fn [& rest] (first  (reverse (sort rest))))", "user": "55d80befe4b0e31453f64aae"}, {"problem": 38, "code": "(fn[& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "50e896a5e4b0ebbe794eb7eb"}, {"problem": 38, "code": "(comp last sort list)", "user": "55b1d0b5e4b0da326a65cf73"}, {"problem": 38, "code": "(fn [& a]\n  (reduce #(if (> %1 %2) %1 %2) a))", "user": "565a280be4b068f2fe63dbf7"}, {"problem": 38, "code": "(fn [& xs] (last (sort xs)))", "user": "50da34e4e4b0f31830755b3c"}, {"problem": 38, "code": "(fn [& nums] (reduce #(if (> %1 %2) %1 %2) nums))", "user": "53f5c402e4b0db01ade6f9d4"}, {"problem": 38, "code": "(fn [& rest](reduce #(if (> %1 %2) %1 %2) rest))", "user": "564348e1e4b08d4f616f5f26"}, {"problem": 38, "code": "(fn [& coll]\n  (loop [the-rest coll\n         max-val 0]\n    (if (empty? the-rest) max-val\n      (recur (rest the-rest)\n             (if (> (first the-rest) max-val) (first the-rest) max-val)))))", "user": "562c2fc2e4b058fa18c5a6d7"}, {"problem": 38, "code": "(fn ([_ x _ _] x)\n    ([x _] x)\n    ([_ x _] x))", "user": "565e0934e4b068f2fe63dc30"}, {"problem": 38, "code": "#(last (sort %&))", "user": "565b05bfe4b068f2fe63dbfc"}, {"problem": 38, "code": "(fn my-max [& nums] (reduce #(if (> %1 %2) %1 %2) nums))\n;; WHOAH\n#_(comp last sort list)", "user": "565b818ce4b068f2fe63dc05"}, {"problem": 38, "code": "(fn mymax [& args]\n  (letfn [(biggest [x y]\n            (if (>= x y)\n              x\n              y))]\n    (loop [xs args maxv 0]\n      (if (next xs)\n        (if (> (first xs) maxv)\n          (recur (rest xs) (first xs))\n          (recur (rest xs) maxv) )\n        (biggest maxv (first xs))))))", "user": "565ee190e4b068f2fe63dc38"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [x y] (if (> x y)\n                      x\n                      y))\n          args))", "user": "537f6b1ae4b06839e8705eb3"}, {"problem": 38, "code": "(fn [a & more]\n  (loop [coll more, mx a]\n    (if (= (count coll) 0)\n      mx\n      (recur (rest coll) (if (> (first coll) mx) (first coll) mx)))))", "user": "5660fe2ce4b068f2fe63dc5e"}, {"problem": 38, "code": "(fn [& list] (last (sort list)))", "user": "565faf46e4b068f2fe63dc44"}, {"problem": 38, "code": "(fn toto [& nums]\n  \t(if (or (= (rest nums) ())\n            (> (first nums) (apply toto (rest nums))))\n      (first nums)\n      (apply toto (rest nums))))", "user": "508fd72ee4b0ea685a20f76c"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (> %1 %2) %1 %2) x xs))", "user": "563f24f9e4b08d4f616f5ed0"}, {"problem": 38, "code": "(comp (partial reduce #(if (> %1 %2) %1 %2)) list)", "user": "56607bbfe4b068f2fe63dc58"}, {"problem": 38, "code": "#(last (sort %&))", "user": "530e9bd6e4b08068f379ecbe"}, {"problem": 38, "code": "#(last (sort %&))", "user": "55b2505be4b0da326a65cf7d"}, {"problem": 38, "code": "(fn [& args] (last\n            (sort args)))", "user": "56582025e4b0f9d632dd84b1"}, {"problem": 38, "code": "(fn [& v] (last (sort v)))", "user": "565f525ce4b068f2fe63dc3e"}, {"problem": 38, "code": "(fn [y & x] \n  (loop [x x\n  \t\t m y]\n    (if (empty? x)\n      m\n      (recur (rest x) (if (> (first x) m) \n                         (first x)\n                         m)\n       )\n     )\n  )\n)", "user": "5650ac8be4b0284900eef6c2"}, {"problem": 38, "code": "(fn [& args]\n  (reduce \n   (fn [l r]\n     (if (> l r)\n       l\n       r)) 0 args))", "user": "565b941ce4b068f2fe63dc07"}, {"problem": 38, "code": "(fn x [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "5657fc1ae4b0f9d632dd84ad"}, {"problem": 38, "code": "(fn [x & xs] (reduce (fn [a b] (if (< a b) b a)) x xs))", "user": "5656e039e4b0f9d632dd84a3"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "user": "56602649e4b068f2fe63dc47"}, {"problem": 38, "code": "#(last (sort %&))", "user": "56620138e4b068f2fe63dc71"}, {"problem": 38, "code": "(fn [& args] \n  \n  (last (sort args))\n\n)", "user": "55e87073e4b0121d4835fd8f"}, {"problem": 38, "code": "(comp last sort list)", "user": "566639f4e4b0e91d5f5c566b"}, {"problem": 38, "code": "(fn mymax\n  ([x y]\n     (if (> x y) x y))\n  ([x y & more]\n     (reduce mymax (mymax x y) more)))", "user": "5662ca50e4b0e91d5f5c564c"}, {"problem": 38, "code": "(fn my-max\n        ([x] x)\n        ([x y] (if (> x y) x y))\n        ([x y & more]\n         (reduce my-max (my-max x y) more)))", "user": "5666500ee4b0e91d5f5c566d"}, {"problem": 38, "code": "(fn [m & s] (loop [sq s mx m] (if (empty? sq) mx (recur (rest sq) (if (> mx (first sq)) mx (first sq))))))", "user": "56662275e4b0e91d5f5c566a"}, {"problem": 38, "code": "(fn [& all] (reduce \n  (fn [a b] (if (< a b) b a)) all)\n)", "user": "56679f30e4b04acd4f672dda"}, {"problem": 38, "code": "(fn [ x & xs ] (reduce (fn [z y] (if (> z y) z y)) x xs))", "user": "566669d8e4b0e91d5f5c566f"}, {"problem": 38, "code": "(fn [& params]\n  (reduce\n   #(if (> %2 %1)\n       %2\n       %1)\n   0 params))", "user": "56677192e4b04acd4f672dd5"}, {"problem": 38, "code": "(comp last sort list)", "user": "566734c4e4b04acd4f672dcc"}, {"problem": 38, "code": "(fn [& nums] (last (sort nums)))", "user": "55a9fe1ce4b0988bba2ad947"}, {"problem": 38, "code": "(fn mval [& args] (last (sort args)))", "user": "5372e7d9e4b06d7f452d9e02"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5666c2dbe4b04acd4f672dc3"}, {"problem": 38, "code": "(fn maxx [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5659679ae4b068f2fe63dbeb"}, {"problem": 38, "code": "#(last( sort %&))", "user": "559ff9eee4b0acc240e314ee"}, {"problem": 38, "code": "#(last (sort %&))", "user": "566733d6e4b04acd4f672dcb"}, {"problem": 38, "code": ";;(fn [& lst] \n;;  (loop [lst lst, localmax 0]\n;;    (if (empty? lst)\n;;      (localmax)\n;;      (if (> localmax (first lst))\n;;        (recur (rest lst) (localmax))\n;;        (recur (rest lst) (first lst))))))\n\n(fn [& lst] (reduce #(if (> %1 %2) %1 %2) lst))", "user": "563afd5ae4b0bfe05bf11809"}, {"problem": 38, "code": "#(last (sort %&))", "user": "566888e4e4b04acd4f672ded"}, {"problem": 38, "code": "(fn [& coll]\n  (loop [[head & tail] coll\n        top 0]\n   (if (nil? head)\n     top\n     (recur tail (if (> head top) head top)))))", "user": "56685a73e4b04acd4f672de5"}, {"problem": 38, "code": "(fn [& input]\n  (reduce (fn [a b]\n            (if (> a b) a b)) input))", "user": "55a016fde4b0acc240e314f1"}, {"problem": 38, "code": "(fn mymax\n  ([x y]\n     (if (> x y) x y))\n  ([x y & more]\n     (reduce mymax (mymax x y) more)))", "user": "55675a6ce4b0c656e3ff183e"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "56671a4de4b04acd4f672dca"}, {"problem": 38, "code": "(fn [& xs] (last (sort xs)))", "user": "5668dcc6e4b04acd4f672df8"}, {"problem": 38, "code": "(fn [& xs] (->> xs (sort) (last)))", "user": "56618ddfe4b068f2fe63dc6a"}, {"problem": 38, "code": "(fn [& more] (reduce (fn [x y] (if (> x y) x y)) (vec more)))", "user": "54c6ad6ae4b045293a27f62f"}, {"problem": 38, "code": "(fn [& args] (first (sort > args)))", "user": "5661b0a9e4b068f2fe63dc6f"}, {"problem": 38, "code": "(comp last sort list)", "user": "5646bb8fe4b0284900eef614"}, {"problem": 38, "code": "(fn [& x] (reduce (fn [i d] (if (> d i) d i)) (first x) (butlast x)))", "user": "56686edce4b04acd4f672dea"}, {"problem": 38, "code": "(fn [& params] (reduce #(if (> %1 %2) %1 %2) (set params)))", "user": "566a3a26e4b0a866af689699"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "55ed37ebe4b0121d4835fdd6"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "565b2fa5e4b068f2fe63dbfe"}, {"problem": 38, "code": "#(last (apply sorted-set (reduce conj '() %&)))", "user": "566b2cb1e4b0a866af6896aa"}, {"problem": 38, "code": "(fn [& s]\n  (loop [result (first s) lst (next s)]\n    (if-let [head (first lst)]\n      (if (> result head)\n        (recur result (next lst))\n        (recur head (next lst)))\n      result)))", "user": "566a6e38e4b0a866af68969b"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "566b7a77e4b0a866af6896af"}, {"problem": 38, "code": "(fn [& xs] (-> xs sort last))", "user": "5393185ae4b0b51d73faaeb7"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5006c169e4b0678c553fc48d"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "566af6bee4b0a866af6896a8"}, {"problem": 38, "code": "(fn [first-num & rest]\n  (loop [numbers (into [] rest) counter 0 result [first-num]]\n    (println result)\n    (if (= counter (count numbers))\n      (result 0)\n      (if (> (numbers counter) (result 0))\n        (recur numbers (inc counter) (assoc result 0 (numbers counter)))\n        (recur numbers (inc counter) result)))))", "user": "5668aad0e4b04acd4f672df5"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y ] (if (> x y) x y)) args))", "user": "564e719ee4b0284900eef69b"}, {"problem": 38, "code": "(fn mymax\n  ([x y]\n     (if (> x y) x y))\n  ([x y & more]\n     (reduce mymax (mymax x y) more)))", "user": "566fa059e4b0a866af6896ea"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "566873c7e4b04acd4f672dec"}, {"problem": 38, "code": "(fn [& args]\n         (loop [mex (first args)\n                input args]\n           (if (empty? input)\n             mex\n             (if (> (first input) mex)\n               (recur (first input) (rest input))\n               (recur mex (rest input))))))", "user": "566f0ff6e4b0a866af6896e5"}, {"problem": 38, "code": "(comp last sort list)", "user": "56540485e4b0f9d632dd847a"}, {"problem": 38, "code": "#(last (sort %&))", "user": "566064cae4b068f2fe63dc50"}, {"problem": 38, "code": "(fn f [& s]\n  (reduce (fn [acc s*] (if (> s* acc) s* acc)) (first s) (rest s)))", "user": "56705858e4b0a866af6896ef"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "52229374e4b0e6a83c892600"}, {"problem": 38, "code": "(fn f [x & xs]\n  (if (nil? xs)\n    x\n    (if (> x (apply f xs))\n      x\n      (apply f xs))))", "user": "56483562e4b0284900eef629"}, {"problem": 38, "code": "(fn [& all] (reduce \n             (fn [a b] (if (> a b) a b))\n             all))", "user": "52aeac84e4b0c58976d9acaf"}, {"problem": 38, "code": "(fn [& args] (last (sort (seq args))))", "user": "55c5bdffe4b0e31453f649b6"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "56708ac8e4b0a866af6896f5"}, {"problem": 38, "code": "(fn [f & r]\n  (reduce #(if (> %1 %2) %1 %2) f r))", "user": "51441ce7e4b0b4fb4ace5f41"}, {"problem": 38, "code": "(fn [& params]\n  (reduce \n\t#(if (> %1 %2)\n      %1\n      %2)\n   0 params))", "user": "5640eb50e4b08d4f616f5eec"}, {"problem": 38, "code": "(fn [& argv]\n   (loop [res (first argv) xs (rest argv)]\n     (let [x (first xs)]\n       (if (empty? xs)\n         res\n         (recur (if (> x res) x res) (rest xs))))))", "user": "56669819e4b0e91d5f5c5674"}, {"problem": 38, "code": "(fn my-max [& args] \n  (reduce (fn [x y] (if (>= x y) x y)) args))", "user": "56014f55e4b04bb52996e184"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5654c550e4b0f9d632dd848a"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "546b89ffe4b00cfc9eacc16d"}, {"problem": 38, "code": "#(last (sort %&))", "user": "56688983e4b04acd4f672dee"}, {"problem": 38, "code": "(fn([& items] ((comp last sort) (seq items))))", "user": "5669eb9ae4b04acd4f672e02"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "55f4ef68e4b06e875b46ce82"}, {"problem": 38, "code": "#(last (sort %&))", "user": "55c5b55fe4b0e31453f649b5"}, {"problem": 38, "code": "(fn mx\n  ([x] x)\n  ([x y] (if (< x y) y x))\n  ([x y & more] (reduce mx (mx x y) more)))", "user": "5649b1b0e4b0284900eef646"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5674477ce4b05957ce8c6134"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "5673c886e4b05957ce8c6123"}, {"problem": 38, "code": "(fn maximum [& args]\n  (reduce #(if (> %1  %2) %1 %2) args))", "user": "56742817e4b05957ce8c612d"}, {"problem": 38, "code": "(fn [a & b]\n  (loop [m a s b]\n    (if (empty? s) m (recur (if (> (first s) m) (first s) m) (rest s)))))", "user": "564a5a09e4b0284900eef656"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [a b] (or (and (> b a) b) a)) args))", "user": "5674f874e4b05957ce8c6144"}, {"problem": 38, "code": "(fn [& args]\n  (reduce \n   (fn [x y]\n     (if (> x y) x y))\n   args))", "user": "56732c84e4b05957ce8c611c"}, {"problem": 38, "code": "(fn mx [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "564716e6e4b0284900eef616"}, {"problem": 38, "code": "(comp  first (partial sort >) list)", "user": "56754c4be4b05957ce8c6149"}, {"problem": 38, "code": "(fn [& args] ((comp last sort) args))", "user": "567476bde4b05957ce8c6139"}, {"problem": 38, "code": "(fn [& numbers]\n  (reduce  (fn [current-max contender]\n             (if (> contender current-max)\n               contender\n               current-max)) 0 numbers))", "user": "5675eea1e4b05957ce8c6152"}, {"problem": 38, "code": "(fn [& args]\n  (loop [values args maximun 0]\n    (cond\n       (empty? values) maximun\n       :else (recur (rest values) (if (> (first values) maximun) (first values) maximun)))))", "user": "55efb51ee4b066087aa9453b"}, {"problem": 38, "code": "(fn [& nums]\n  (let [f (fn [coll max-val]\n            (if (empty? coll)\n                 max-val\n                 (if (> (first coll) max-val)\n                     (recur (rest coll) (first coll))\n                     (recur (rest coll) max-val))))]\n    (f nums (first nums))))", "user": "567695c2e4b05957ce8c6157"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5677046ee4b05957ce8c6161"}, {"problem": 38, "code": "(fn [& xs]\n  (last (sort xs)))", "user": "56706f01e4b0a866af6896f2"}, {"problem": 38, "code": "#(loop [m % s %&] (if s (let [[h & t] s] (recur (if (> h m) h m) t)) m))", "user": "52d9ba39e4b09f7907dd13af"}, {"problem": 38, "code": "(fn [& nums] (reduce (fn [a b] (if (> a b) a b)) nums))", "user": "56201509e4b064ca9f4b16da"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "5673f804e4b05957ce8c6126"}, {"problem": 38, "code": "(fn f \n  ([x] x)\n  ([x y] (if (< x y) y x))\n  ([x y & more]\n    (reduce f (f x y) more))\n   )", "user": "566bd453e4b0a866af6896b7"}, {"problem": 38, "code": "(fn [& rest] (reduce (fn [x y] (if (> x y) x y)) rest))", "user": "56548885e4b0f9d632dd8483"}, {"problem": 38, "code": "(fn\n  [& args]\n  (last (sort args)))", "user": "5676af21e4b05957ce8c6158"}, {"problem": 38, "code": "(fn [& l] (reduce #(if (< %1 %2) %2 %1) l))", "user": "56761ab1e4b05957ce8c6154"}, {"problem": 38, "code": "(fn [& rest] (reduce\n    #(if (> %2 %1) %2 %1)\n    rest\n  ))", "user": "5675f2f4e4b05957ce8c6153"}, {"problem": 38, "code": "(fn [& args] \n  (reduce (fn [a b] (if (> a b) a b)) args))", "user": "5675b045e4b05957ce8c614b"}, {"problem": 38, "code": "(fn [& args]\n  (letfn [(find-max [l m]\n            (cond\n             (= 0 (count l)) m\n             (> (first l) m) (find-max (rest l) (first l))\n             :else (find-max (rest l) m)))]\n    (find-max (rest args) (first args))))", "user": "5670ef43e4b0a866af6896fc"}, {"problem": 38, "code": "(fn [& args] (-> args sort last))", "user": "54ce541de4b057c6fda3a2ac"}, {"problem": 38, "code": "(comp\n (partial reduce \n          #(if (< % %2)\n             %2\n             %))\n vector)", "user": "566dd178e4b0a866af6896d1"}, {"problem": 38, "code": "(fn [first & args]\n  (reduce\n    (fn [prev cur]\n      (if (> cur prev)\n        cur\n        prev))\n    first args))", "user": "5675cdf1e4b05957ce8c614d"}, {"problem": 38, "code": "(fn max2 [& xs]\n  (reduce (fn [a b] (if (> a b) a b)) xs))", "user": "56771b31e4b05957ce8c6163"}, {"problem": 38, "code": "(fn [& numbers]\n  (loop [[n & r] numbers\n         mx n]\n    (if (nil? n)\n      mx\n      (if (> n mx)\n        (recur r n)\n        (recur r mx)))))", "user": "563a79e5e4b0bfe05bf117fe"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "user": "5547b72be4b0a04f79299550"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) 0 a))", "user": "555c38d9e4b0b056612e2249"}, {"problem": 38, "code": "(fn [& Y] (reduce (fn [a b] (if (> a b) a b)) Y))", "user": "566caad9e4b0a866af6896c0"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) 0 args))", "user": "567af6e2e4b05957ce8c61a0"}, {"problem": 38, "code": "(fn mymax\n  ([x y]\n   (if (> x y) x y))\n  ([x y & more]\n   (reduce mymax (mymax x y) more)))", "user": "567874f3e4b05957ce8c617c"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (>%1 %2) %1 %2) args))", "user": "567798afe4b05957ce8c6169"}, {"problem": 38, "code": "(fn [x & xs] \n  (reduce #(if (< %1 %2) %2 %1)  x xs))", "user": "54aa2462e4b09f271ff37cb4"}, {"problem": 38, "code": "(fn mx \n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & rst] (apply mx (mx x y) rst))\n)", "user": "562add6de4b00e49c7cb4834"}, {"problem": 38, "code": "(fn max-val [h & t]\n    (reduce (fn [actual new] (if (< actual new) new actual)) (flatten (cons h t))))", "user": "567b62fce4b05957ce8c61a6"}, {"problem": 38, "code": "(fn[& args](reduce #(if (> %1 %2) %1 %2) args))", "user": "5677f9ffe4b05957ce8c616f"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %2 %1) %2 %1) x))", "user": "567c2322e4b05957ce8c61af"}, {"problem": 38, "code": "(fn my-max\n  ([] nil)\n  ([x & xs] \n   (loop [m x\n          r xs]\n     (if (empty? r)\n       m\n       (if (> (first r) m)\n         (recur (first r) (rest r))\n         (recur m (rest r)))))))", "user": "5638b88de4b0bfe05bf117e9"}, {"problem": 38, "code": "(fn [& params] (reduce (fn [a b] (if (< a b) b a)) 0 params))", "user": "567d132ee4b05957ce8c61c3"}, {"problem": 38, "code": "(fn [& r] (first (sort > r)))", "user": "567cef8ce4b05957ce8c61c1"}, {"problem": 38, "code": "(fn [& els]\n         (loop [ss els m (first els)]\n            (if (seq ss)\n               (recur (rest ss) (if (> m (first ss)) m (first ss)))\n                m)))", "user": "5679a4d0e4b05957ce8c618d"}, {"problem": 38, "code": "(fn [& x] \n  (reduce \n   (fn [a b] \n     (if (> a b) \n       a \n       b\n     )\n   )\n   x\n  )\n)", "user": "567b9ff7e4b05957ce8c61a9"}, {"problem": 38, "code": "(fn mm \n     ([arg] arg)\n     ([arg & rargs]\n       (loop [max_arg arg next_arg (first rargs) moreargs (rest rargs)]\n         (cond \n           (nil? next_arg) max_arg\n           (> max_arg next_arg) (recur max_arg (first moreargs) (rest moreargs))\n           :else (recur next_arg (first moreargs) (rest moreargs))))))", "user": "567ea95de4b0feffd0d18eb6"}, {"problem": 38, "code": "(fn mxs [x & xs]\n  (reduce\n   (fn [x1 x2]\n     (if (> x1 x2) x1 x2))\n   x xs))", "user": "567debb5e4b05957ce8c61ce"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "567ea403e4b0feffd0d18eb5"}, {"problem": 38, "code": "(fn [& xs]\n  (->> xs\n       (sort)\n       (last)))", "user": "567c7fefe4b05957ce8c61bc"}, {"problem": 38, "code": "(comp last sort list)", "user": "567931e9e4b05957ce8c6184"}, {"problem": 38, "code": "(fn [& rest] (reduce (fn [old new] (if (< old new) new old))  rest)) 1 2 5 3 4", "user": "567f988be4b0feffd0d18ebe"}, {"problem": 38, "code": "(fn [& more]\n  (reduce #(if (> %1 %2) %1 %2) more))", "user": "565fe49ee4b068f2fe63dc46"}, {"problem": 38, "code": "#(last (sort %&))", "user": "52ff7424e4b0d8b024fd3708"}, {"problem": 38, "code": "(fn f \n  ([] nil)\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & args] (f (f x y) (apply f args)))\n)", "user": "5680fff3e4b0966858e4d8f6"}, {"problem": 38, "code": "(comp last sort (partial conj '()))", "user": "56795deae4b05957ce8c6187"}, {"problem": 38, "code": "(fn \n  [& args]\n  (last (sort args)))", "user": "566f7749e4b0a866af6896e9"}, {"problem": 38, "code": "(fn [a & others] (loop [s others\n                      new-max a] \n                 (if (empty? s)\n                    \tnew-max\n                    (let [next-num (first s)]\n                      \t(recur (rest s) (if (> next-num new-max) next-num new-max))))))", "user": "567d18c9e4b05957ce8c61c4"}, {"problem": 38, "code": "(fn [& xs]\n  (loop [[a & more] xs\n        m 0]\n  (cond\n    (> a m) (recur more a)\n    more (recur more m) \n    :else m)))", "user": "5680104ae4b0966858e4d8ea"}, {"problem": 38, "code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) s))", "user": "568227fee4b0945ebc182a8a"}, {"problem": 38, "code": "(fn [& args] (if (not-empty args) (reduce #(if (> %1 %2) %1 %2) args) nil))", "user": "56798d83e4b05957ce8c618b"}, {"problem": 38, "code": "(fn\n  [& args]\n  (reduce \n\t#(if (> %1 %2)\n       %1\n       %2\n       )\n   args\n   )\n  )", "user": "56814cbce4b0945ebc182a81"}, {"problem": 38, "code": "(fn my-max [& args]\n\t(reduce (fn [result value]\n            (if (< result value)\n              value\n              result))\n            args)\n  )", "user": "56822f37e4b0945ebc182a8d"}, {"problem": 38, "code": "(fn mx [& xs] (if (= (count xs) 1) (first xs) (let [a (first xs) b (apply mx (rest xs))] (if (> a b) a b))))", "user": "56800ba1e4b0966858e4d8e8"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "566efb2be4b0a866af6896e2"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "55cbd29be4b0e31453f64a0a"}, {"problem": 38, "code": "(fn [x & xs]\n  (loop [max' x\n         xs' xs]\n    (let [head (first xs')]\n      (if-not head\n        max'\n        (recur \n         (if (> max' head) \n           max'\n           head)\n         (rest xs'))))))", "user": "567bf820e4b05957ce8c61ad"}, {"problem": 38, "code": "#(last (sort (flatten (vector %&))))", "user": "5297dcc5e4b02ebb4ef75047"}, {"problem": 38, "code": "#(last (sort %&))", "user": "56810479e4b0966858e4d8f8"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "54e6762be4b024c67c0cf809"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5591b61ee4b0604b3f94d580"}, {"problem": 38, "code": "(fn [& x]\n  (loop [maxi 0\n         myseq x]\n    (if (empty? myseq)\n      maxi\n      (recur \n        (if (> (first myseq) maxi) \n          (first myseq)\n          maxi) \n        (rest myseq)))))", "user": "56646a7fe4b0e91d5f5c5657"}, {"problem": 38, "code": "(fn [& x]\n  (let [cnt (count x)]\n   (loop [idx 0 mx (first x)]\n    (if (< idx cnt)\n      (let [v (nth x idx)] (recur (inc idx) (if (< mx v) v mx)))\n      mx))))", "user": "56815e2fe4b0945ebc182a84"}, {"problem": 38, "code": "(comp (partial reduce #(if (> % %2) % %2)) list)", "user": "567b39b6e4b05957ce8c61a3"}, {"problem": 38, "code": "(fn f [& args]\n  ((fn [seq m]\n    (if (empty? seq)\n      m\n      (let [f (first seq)]\n        (recur (rest seq) (if (> f m) f m)))))\n        args 0))", "user": "5681afaae4b0945ebc182a87"}, {"problem": 38, "code": "(fn [& k] (reduce #(if (> %1 %2) %1 %2) -1 k))", "user": "543b4746e4b032a45b86932c"}, {"problem": 38, "code": "(comp last sort list)", "user": "568242bfe4b0945ebc182a8f"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "508f4343e4b0ea685a20f767"}, {"problem": 38, "code": "(fn [& args] \n  (loop [coll (rest args) mmax (first args)]\n    (if (empty? coll)\n      mmax\n      (recur (rest coll) (if (< (first coll) mmax) mmax (first coll))))))", "user": "5684e200e4b04eec3ec5cfc4"}, {"problem": 38, "code": "(fn [f & args]\n  (reduce (fn [old val]\n            (if (> val old)\n              val\n              old))\n          f\n          args))", "user": "567abc97e4b05957ce8c619d"}, {"problem": 38, "code": "(fn [& body]\n  (reduce #(if (> %2 %1) %2 %1) body))", "user": "5685e9fde4b04eec3ec5cfd1"}, {"problem": 38, "code": "(fn\n  [& xs]\n(reduce (fn\n  [val elem]\n  (if (> val elem)\n    val\n    elem)) xs))", "user": "55be4fa6e4b01b9910ae2a08"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "56166047e4b06b1bb2182a03"}, {"problem": 38, "code": "(fn [& more] (reduce #(if (< %1 %2) %2 %1) more))", "user": "568513c4e4b04eec3ec5cfc5"}, {"problem": 38, "code": "(fn [& val] (reduce (fn [x y] (if (< x y) y x)) val))", "user": "5686b7c7e4b0dcc4269f4057"}, {"problem": 38, "code": "(fn [& i]\n  (reduce #(if (> %1 %2) %1 %2) i))", "user": "5521a5a9e4b0882d96d09197"}, {"problem": 38, "code": "#(last (sort %&))", "user": "566812f0e4b04acd4f672de1"}, {"problem": 38, "code": "(fn [& args]\n    (reduce #(if (> %1 %2) %1 %2) args))", "user": "5686640ae4b0dcc4269f4050"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "5686e652e4b0dcc4269f4059"}, {"problem": 38, "code": "(fn [& r] (reduce #(if (> % %2) % %2) r))", "user": "55664bb5e4b0c656e3ff1833"}, {"problem": 38, "code": "(fn [& m]\n  (loop [a m b 0]\n    (if (not-empty a)\n      (if (> (first a) b)\n        (recur (rest a) (first a))\n        (recur (rest a) b))\n      b)))", "user": "5683d2a9e4b0945ebc182aa0"}, {"problem": 38, "code": "(fn [& items]\n  (reduce #(if (> %1 %2) %1 %2) items))", "user": "564dc062e4b0284900eef68c"}, {"problem": 38, "code": "(fn [& coll]\n  (let [cur-max (atom 0)]\n    (doseq [x coll]\n    (if (> x @cur-max)\n      (reset! cur-max x)))\n    @cur-max))", "user": "545bc5a8e4b01be26fd74658"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [a b] (if (> a b) a b)) args))", "user": "56877fcbe4b0dcc4269f405e"}, {"problem": 38, "code": "(fn f ([a] a) ([a b & xs] (apply f (if (> a b) a b) xs)))", "user": "5275f7a2e4b03e8d9a4a74d0"}, {"problem": 38, "code": "(fn [fir & nums]\n\t(loop [i (count nums), fir fir,nums nums]\n      (if(> i 0)\n        (if(> (first nums) fir)\n          (recur (dec i) (first nums) (next nums))\n          (recur (dec i) fir (next nums))        \n        )\n      fir\n      )\n     )\n  )", "user": "56874171e4b0dcc4269f405c"}, {"problem": 38, "code": "(fn my-max [x & rest]\n  ((fn [a b]\n     (if (empty? b)\n       a\n       (let [c (first b)]\n         (recur (if (> a c) a c) \n                (next b)))))\n   x rest))", "user": "5688a01be4b0dcc4269f406d"}, {"problem": 38, "code": "(fn maxX [& s] (reduce (fn [x y] (if (> x y) x y)) s))", "user": "568820e8e4b0dcc4269f4067"}, {"problem": 38, "code": "(fn [& args] (loop [coll (rest args) max-value (first args)]\n               (if (empty? coll) max-value\n             (if (> (first coll) max-value)\n               (recur (rest coll) (first coll))\n               (recur (rest coll) max-value)\n               )\n             )\n             )\n  )", "user": "56885c32e4b0dcc4269f4068"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "user": "5689911be4b0dcc4269f407f"}, {"problem": 38, "code": "#(last (sort %&))", "user": "55ee7977e4b0121d4835fdee"}, {"problem": 38, "code": "(fn my-max [x & xs] (if (empty? xs) x (let [m (apply my-max xs)] (if (< x m) m x))))", "user": "56897739e4b0dcc4269f407d"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "user": "560b49d9e4b05f002753df17"}, {"problem": 38, "code": "(fn find-max [& xs]\n  (loop [big (first xs) r (rest xs)]\n    (cond\n     \t(empty? r) big\n     \t(< big (first r)) (recur (first r) (rest r))\n     \t:else (recur big (rest r)))))", "user": "5689fd03e4b0dcc4269f4088"}, {"problem": 38, "code": "(fn [& nums] (reduce #(if (> %1 %2) %1 %2) nums))", "user": "5687fe58e4b0dcc4269f4065"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "528e7740e4b0239c8a67aee0"}, {"problem": 38, "code": "(fn bigger-in [& rest]\n   (reduce (fn [a b] (if (> a b) a b)) rest))", "user": "5294a49be4b02ebb4ef7500f"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (<= %1 %2) %2 %1) args))", "user": "56481722e4b0284900eef628"}, {"problem": 38, "code": "(fn [& args] (first (sort > args)))", "user": "5689c852e4b0dcc4269f4084"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (< %1 %2)\n             %2 %1) (first args) (rest args)))", "user": "568a743ee4b0dcc4269f408e"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args ))", "user": "5672a711e4b05957ce8c6117"}, {"problem": 38, "code": "#(last (sort %&))", "user": "567c48e6e4b05957ce8c61b8"}, {"problem": 38, "code": "(fn biggest [& args] \n(reduce #(if (> %1 %2) %1 %2)  args))", "user": "533a2f7be4b0e30313ee6cb8"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "567f034be4b0feffd0d18eba"}, {"problem": 38, "code": "(fn getMax\n  ([x y] (if (> x y) x y))\n  ([x y & more] (apply getMax (getMax x y) more)))", "user": "560abb9ae4b05f002753df05"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x ))", "user": "568c2d96e4b0dcc4269f40af"}, {"problem": 38, "code": "(fn my-max [& my-seq]\n  (reduce #(if (> %1 %2) %1 %2) my-seq))", "user": "56889672e4b0dcc4269f406c"}, {"problem": 38, "code": "(fn [& s]\n  (reduce (fn [ret nxt]\n            (if (> ret nxt) ret nxt)) s))", "user": "55f85b93e4b03cbcff9738ae"}, {"problem": 38, "code": "(fn max'\n  [x1 & x2]\n  (reduce #(if (> %1 %2) %1 %2) x1 x2))", "user": "56784adbe4b05957ce8c6176"}, {"problem": 38, "code": "(fn [& vals]\n  (loop [mx (first vals)\n         ivals (rest vals)]\n    (let [item (first ivals)]\n      (if (empty? ivals)\n        mx\n        (recur (if (> item mx) item mx)\n                (rest ivals))))))", "user": "566f3e18e4b0a866af6896e7"}, {"problem": 38, "code": "(fn [& args]\n  (->> args\n       (sort)\n       (last)))", "user": "568e450fe4b0dcc4269f40d0"}, {"problem": 38, "code": "#(last (sort %&))", "user": "4ddf597a535d08e6dec9fddf"}, {"problem": 38, "code": "(fn [& more] \n  (reduce (fn [x y] (if (> x y) x y)) more)               \n)", "user": "5600bed5e4b04bb52996e170"}, {"problem": 38, "code": "(fn [& name] (last (sort name)))", "user": "568f2059e4b0dcc4269f40df"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "56903cb9e4b0dcc4269f40eb"}, {"problem": 38, "code": "#(loop [big % lst %&]\n   (if (empty? lst)\n     big\n     (if (> big (first lst))\n       (recur big (rest lst))\n       (recur (first lst) (rest lst)))\n     )\n   )", "user": "5688d6a8e4b0dcc4269f4071"}, {"problem": 38, "code": "(fn my-max [m0 & ms]\n  (cond (empty? ms) m0\n        (< m0 (first ms)) (apply my-max ms)\n        :else (apply my-max (cons m0 (rest ms)))))", "user": "568e1871e4b0dcc4269f40cc"}, {"problem": 38, "code": "(fn [& l] (reduce #(if (> % %2) % %2) l))", "user": "52fbbadde4b047fd5583700f"}, {"problem": 38, "code": "(fn [& rest](last(sort rest)))", "user": "56066e82e4b08b23635d3173"}, {"problem": 38, "code": "(fn [x & y] (reduce #(if (> %1 %2) %1 %2) x y))", "user": "56912f93e4b0dcc4269f40ef"}, {"problem": 38, "code": "(fn [& r] (reduce #(if (> %1 %2) %1 %2) (seq r)))", "user": "566b8946e4b0a866af6896b0"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a n] (if (> a n) a n)) args))", "user": "4ff8487be4b0678c553fc397"}, {"problem": 38, "code": "(fn get-max [& numbers]\n  (loop [biggest (first numbers)\n         i 0]\n    (if (< i (count numbers)) \n      (if (> (nth numbers i) biggest) (recur (nth numbers i) (inc i)) (recur biggest (inc i))) \n      biggest)))", "user": "568d4742e4b0dcc4269f40c2"}, {"problem": 38, "code": "(fn [x & xs]\n  (loop [x x xs xs]\n    (if (seq xs)\n      (let [max-int-2 (if (> x (first xs)) x (first xs))]\n        (recur max-int-2 (rest xs)))\n      x)))", "user": "5657fed1e4b0f9d632dd84ae"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "566a8600e4b0a866af68969d"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "56743413e4b05957ce8c612e"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))\n\n; (comp last sort list)", "user": "569381a5e4b0dcc4269f4104"}, {"problem": 38, "code": "#(last (sort %&))", "user": "52e1c276e4b09f7907dd142b"}, {"problem": 38, "code": "(fn [a & r] (loop [a a, r r] (if (empty? r) a (recur (if (> a (first r)) a (first r)) (rest r)))))", "user": "4e268c6e535deb9a81d77ef4"}, {"problem": 38, "code": "(fn [& args]\n\t(loop [s args, m 0]\n\t\t(let [n (first s)]\n\t\t\t(if (empty? s)\n\t\t\t\tm\n\t\t\t\t(recur (rest s) (if (> n m) n m))))))", "user": "568cea39e4b0dcc4269f40bc"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2)\n                            %2\n                            %1) args))", "user": "5694a50fe4b0dcc4269f4121"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "5693383fe4b0dcc4269f4100"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (> % %2) % %2) x xs))", "user": "5693a53ee4b0dcc4269f4106"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) args))", "user": "568c92c6e4b0dcc4269f40b8"}, {"problem": 38, "code": "(fn [& nums]\n  (-> nums\n      sort\n      last))", "user": "56175cf9e4b06b1bb2182a0f"}, {"problem": 38, "code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) coll))", "user": "52e5f810e4b09f7907dd1468"}, {"problem": 38, "code": "(fn [& c] (reduce #(if (< %1 %2) %2 %1) 0 c))", "user": "5629de63e4b00e49c7cb4812"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) 0 args))", "user": "56946d43e4b0dcc4269f411e"}, {"problem": 38, "code": "(fn [& args] \n\t(loop [check (first args) remaining (rest args)]\n      (if (empty? remaining)\n        check\n        (if (< check (first remaining))\n          (recur (first remaining) (rest remaining))\n          (recur check (rest remaining))))))", "user": "5691ef12e4b0dcc4269f40f8"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "56791447e4b05957ce8c6183"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "4f577f25e4b0a7574ea71839"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (cond (> y x) y :else x)) 0 args))", "user": "560d7336e4b05f002753df3f"}, {"problem": 38, "code": "(fn [& p]\n  (loop [s p m (first s)]\n    (if (= 1 (count s))\n      m\n      (recur (rest s) (if (> m (second s)) m (second s))))))", "user": "54a80855e4b09f271ff37c9e"}, {"problem": 38, "code": "(comp\n (partial reduce (fn [a b] (if (< a b) b a)))  \n vector)", "user": "56967bc0e4b0dcc4269f4131"}, {"problem": 38, "code": "(fn [& maks] (last (sort maks)))", "user": "56193c6ee4b053970a773af2"}, {"problem": 38, "code": "(fn [x & xs]\n  (cond \n   (empty? xs)\n   x\n   \n   (> x (first xs))\n   (recur x (rest xs))\n   \n   :else\n   (recur (first xs) (rest xs))))", "user": "56795625e4b05957ce8c6186"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "56936547e4b0dcc4269f4101"}, {"problem": 38, "code": "(fn [& n] (reduce #(if (> %1 %2) %1 %2) n))", "user": "550345fee4b086ebe8a79c6c"}, {"problem": 38, "code": "(fn [& more]\n  (reduce\n    (fn\n      [x y]\n      (if (< x y) y x)\n      )\n    more\n    )\n  )", "user": "569783bde4b0e0b3d3318cab"}, {"problem": 38, "code": "(fn [& l](last (sort l)))", "user": "54fae43ae4b0cf870d934708"}, {"problem": 38, "code": "(fn [& x] ( reduce (fn [acc item] (if (> item acc) item acc)) x ))", "user": "56979bb7e4b0e0b3d3318cac"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (>= x y) x y))  args))", "user": "569951e4e4b0542e1f8d143e"}, {"problem": 38, "code": "(fn alt-max\n ([x] x)\n ([x y] (if (> x y) x y))\n ([x y & rest] (alt-max (alt-max x y) (reduce alt-max rest )))\n  )", "user": "569ad037e4b0542e1f8d144f"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "569c1038e4b0542e1f8d145f"}, {"problem": 38, "code": "(fn [& ints] (reduce (fn [a b] (if (> a b) a b)) ints))", "user": "569c40cee4b0542e1f8d1462"}, {"problem": 38, "code": "(fn [& values]\n  (loop [i 0\n         maxval 0\n         n (count values)]\n    (if (= i n)\n      maxval\n      (if (>  (nth values i) maxval)\n        (recur (inc i) (nth values i) (count values))\n        (recur (inc i) maxval (count values))\n        )\n      )\n  )\n  )", "user": "564c7501e4b0284900eef671"}, {"problem": 38, "code": "(fn [& x]\n  (reduce #(if (> %1 %2) %1 %2) x))", "user": "56990b68e4b0542e1f8d143a"}, {"problem": 38, "code": "(fn max-val [& args] (first (reverse (sort args))))", "user": "569adec2e4b0542e1f8d1450"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "569aca1ee4b0542e1f8d144d"}, {"problem": 38, "code": "(comp last sort vector)", "user": "569d095fe4b0542e1f8d1470"}, {"problem": 38, "code": "(fn [& a]\n  (reduce #(if (> %1 %2) %1 %2) a))", "user": "5695e96ae4b0dcc4269f412c"}, {"problem": 38, "code": "(comp last sort list)", "user": "5591cc56e4b0604b3f94d582"}, {"problem": 38, "code": "(fn\n       [& p]\n   \t\t(last (sort p))\n   \t\t\n   \n   )", "user": "5683b67ce4b0945ebc182a9f"}, {"problem": 38, "code": "(fn [& seq] (reduce #(if (> %1 %2) %1 %2) seq))", "user": "562d15a6e4b0a45d2ff83019"}, {"problem": 38, "code": "(fn [& args]\n  (reduce  #( if (> %1 %2) %1 %2 ) args)\n  )", "user": "56004deee4b04bb52996e164"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "56949fc5e4b0dcc4269f4120"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "56992162e4b0542e1f8d143c"}, {"problem": 38, "code": "(fn maxn [& x]\n  (if\n    (= 1 (count x))\n    (first x)\n    (let [k (apply maxn (rest x))]\n      (if\n        (> (first x) k)\n        (first x)\n        k\n      )\n      )\n    )\n  )", "user": "569f8736e4b0542e1f8d1495"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "569d2283e4b0542e1f8d1474"}, {"problem": 38, "code": "(fn mx \n        ([a b]\n            (if (> a b)\n                a\n                b\n            )\n        )\n        ([a b & rst]\n            (if (> a b)\n                (apply mx a rst)\n                (apply mx b rst)\n            )\n        )\n    )", "user": "5694290fe4b0dcc4269f4110"}, {"problem": 38, "code": "(fn [& more]\n   (loop [a (first more) b (rest more)]\n     (if (<= (count b) 0) a\n                          (if (> (first b) a)\n                            (recur (first b) (rest b))\n                            (recur a (rest b))))))", "user": "5002c798e4b0678c553fc42d"}, {"problem": 38, "code": "(fn [& args] ((fn mymax [args] (let [f (first args) r (rest args)] (if (= (count args) 1) f (if (> f (mymax r)) f (mymax r))))) args))", "user": "569c07b9e4b0542e1f8d145d"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "565654dae4b0f9d632dd849f"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "55c2367ee4b0e31453f64978"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) 0 args))", "user": "55dd7f72e4b050e68259b3c4"}, {"problem": 38, "code": "(fn [& lst] (reduce #(if (> %1 %2) %1 %2) lst))", "user": "56a0a85fe4b0542e1f8d14a5"}, {"problem": 38, "code": "(fn[& s] (reduce #(if (> %1 %2) %1 %2) s))", "user": "56824e1be4b0945ebc182a91"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "53c837f7e4b00fb29b2212ae"}, {"problem": 38, "code": "(fn [x & r] (loop [v x items r m 0]\n              (if (empty? items)\n                m\n                (if (> v m)\n                  (recur (first items) (rest items) v)\n                  (recur (first items) (rest items) m)))))", "user": "569ef93de4b0542e1f8d148b"}, {"problem": 38, "code": "(fn [& args]\n  (loop [max-val (first args)\n         remaining (rest args)]\n    (if (empty? remaining)\n      max-val\n      (if (> (first remaining) max-val)\n        (recur (first remaining) (rest remaining))\n        (recur max-val (rest remaining))))))", "user": "56486d47e4b0284900eef62f"}, {"problem": 38, "code": "(comp last sort list)", "user": "569f33c7e4b0542e1f8d148f"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) args))", "user": "5651654be4b0f9d632dd845a"}, {"problem": 38, "code": "(fn [& v] (last (sort v)))", "user": "569ff6dbe4b0542e1f8d149c"}, {"problem": 38, "code": "(fn myMax [& args]\n  ;heh, this reminds me of the TIS-100 level like this I did recently.\n  (loop [nums args]\n    (if (= 1 (count nums))\n      (first nums)\n    ;else\n      (let [a (first nums)\n            b (second nums)]\n        (if (<= a b)\n          (recur (rest nums))\n        ;else, we have to cut out b somehow\n          (recur (conj (rest (rest nums)) a))\n        )\n      )\n    )\n  )\n)", "user": "569f99cce4b0542e1f8d1497"}, {"problem": 38, "code": "(fn [& args] \n  (first (reverse (sort args))))", "user": "56a3d8ebe4b0542e1f8d14d1"}, {"problem": 38, "code": "(fn [& v] (reduce #(if (> %1 %2) %1 %2) v))", "user": "56a38a4ce4b0542e1f8d14cc"}, {"problem": 38, "code": "(fn [& rest] (reduce (fn [a b] (if (> a b) a b)) rest))", "user": "5689bd04e4b0dcc4269f4082"}, {"problem": 38, "code": "(fn [h & tail]\n  (reduce #(if (> %1 %2) %1 %2) h tail))", "user": "51a7bf26e4b0da5f497bde8c"}, {"problem": 38, "code": "(fn [& args] (first (sort > args)))", "user": "5630ce72e4b0bfe05bf11786"}, {"problem": 38, "code": "(comp last sort vector)", "user": "56a3c89ae4b0542e1f8d14cf"}, {"problem": 38, "code": "(fn [& vals] (reduce #(if (> %1 %2) %1 %2) 0 vals))", "user": "56a01895e4b0542e1f8d149f"}, {"problem": 38, "code": "(fn [& x] (-> x sort last))", "user": "56012cd7e4b04bb52996e17d"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) (flatten (cons x xs))))", "user": "55bf785ee4b01b9910ae2a14"}, {"problem": 38, "code": "(fn [& coll]\n  (reduce #(if (> %1 %2) %1 %2) coll))", "user": "5167e8ace4b0c5a4140a309a"}, {"problem": 38, "code": "(fn [& numbers]\n  (reduce (fn [acc n] (if (> n acc) n acc)) 0 numbers))", "user": "56a51f26e4b0542e1f8d14e0"}, {"problem": 38, "code": "#(last (sort %&))", "user": "56a1b854e4b0542e1f8d14b2"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "5576961be4b05c286339e06f"}, {"problem": 38, "code": "(fn \n  [& x]\n  (last (sort x)))", "user": "569ce6fee4b0542e1f8d146c"}, {"problem": 38, "code": "(fn [head & tail]\n\n(reduce\n  (fn [x y] (cond\n              (< x y) y\n              :else x\n              )\n    ); f-tion\n  head ; initial\n  tail \n  );END: reduce\n    \n    );END: fn", "user": "56a358d0e4b0542e1f8d14c9"}, {"problem": 38, "code": "(fn [f & r]\n  (reduce #(if (> %2 %1) %2 %1) f r))", "user": "553b0d95e4b09218d5f44fff"}, {"problem": 38, "code": "(fn [& v](reduce (fn [x y] (if (> x y) x y)) v))", "user": "56a6051fe4b0542e1f8d14e5"}, {"problem": 38, "code": "(fn [& lst] (reduce (fn [fr nx] (if (> fr nx) fr nx)) lst))", "user": "55f9b2b6e4b03cbcff9738c8"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [memo item] (if (> memo item) memo item)) 0 args ))", "user": "56747b46e4b05957ce8c613b"}, {"problem": 38, "code": "#(last (sort %&))", "user": "56a0ac99e4b0542e1f8d14a6"}, {"problem": 38, "code": "(fn mmax [& cols]\n  (loop [elements cols current_max (first elements)]\n    (if (empty? elements)\n      current_max\n      (recur (rest elements)\n             (if (> (first elements) current_max) (first elements) current_max)\n             )\n      )\n    )\n  )", "user": "56826c2fe4b0945ebc182a92"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "user": "56a79eb0e4b07966d5a8a05d"}, {"problem": 38, "code": "(fn [& values]\n  (reduce #(if (> %1 %2) %1 %2) values))", "user": "567b4641e4b05957ce8c61a5"}, {"problem": 38, "code": "(fn [& all] (first (sort > all)))", "user": "55d1ec3ee4b0e31453f64a4c"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) 0 args))", "user": "56a75810e4b0542e1f8d14fc"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2)\n                     %1\n                     %2)\n                  x))", "user": "565f8fd2e4b068f2fe63dc41"}, {"problem": 38, "code": "(fn [& list] (reduce (fn [elm1 elm2] (if (> elm1 elm2) elm1 elm2)) list))", "user": "565791b0e4b0f9d632dd84aa"}, {"problem": 38, "code": "(fn[& args](-> (nth (list args) 0) sort last))", "user": "5638d2d1e4b0bfe05bf117eb"}, {"problem": 38, "code": "(fn [& coll] (reduce #(if (> % %2) % %2) coll))", "user": "56a76f36e4b07966d5a8a05b"}, {"problem": 38, "code": "(fn my-max [& vals]\n  (reduce (fn [x y] (if (>= x y) x y)) vals))", "user": "569ab3e2e4b0542e1f8d144a"}, {"problem": 38, "code": "(fn [& seq] (reduce #(if (> %1 %2) %1 %2) seq))", "user": "536f96e3e4b0fc7073fd6e83"}, {"problem": 38, "code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) 0 more))", "user": "56a69451e4b0542e1f8d14ec"}, {"problem": 38, "code": "(fn [& xs] (first (reverse (apply sort [xs]))))", "user": "51b01309e4b0c53cf2e68a57"}, {"problem": 38, "code": "(fn [& values] (reduce (fn [x y] (if (> x y) x y)) Integer/MIN_VALUE values))", "user": "56ac81ace4b03c432f187347"}, {"problem": 38, "code": "(fn [& args] (last(sort args)))", "user": "563cdfdfe4b0bfe05bf11840"}, {"problem": 38, "code": "(fn [& args] \n  (reduce \n    (fn [a b] \n      (if (> a b) a b)) \n    args))\n\n;best alternative\n;(fn [& args] (last (sort args)))", "user": "55e01f4ee4b050e68259b406"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "56a9f5c4e4b07966d5a8a07d"}, {"problem": 38, "code": "(fn [& nums] (\n              reduce #(if (> %2 %1) %2 %1) 0 nums\n              ))", "user": "56ae4c21e4b03c432f18735c"}, {"problem": 38, "code": "(fn [& nums]\n   (reduce (fn [prev-max x] (if (> x prev-max) x prev-max)) (first nums) (rest nums)))", "user": "569dd6e8e4b0542e1f8d1480"}, {"problem": 38, "code": "#(last (sort %&))", "user": "55c0f842e4b01b9910ae2a2b"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "user": "56ae214ce4b03c432f18735a"}, {"problem": 38, "code": "(fn [x & l] (reduce (fn [a b] (if (> a b) a b)) (seq (conj l x))))", "user": "546c1375e4b00cfc9eacc173"}, {"problem": 38, "code": "(fn [& more]\n  (first (sort-by identity > (flatten more))))", "user": "5658c357e4b00d3155796111"}, {"problem": 38, "code": "(fn [x & xs] \n  (reduce #(if (> %1 %2) %1 %2) x xs)\n  )", "user": "5652dd89e4b0f9d632dd8469"}, {"problem": 38, "code": "(fn\n  [& rest]\n  (reduce #(if (> %1 %2) %1 %2) rest))", "user": "56b1ab17e4b0982f16b37df1"}, {"problem": 38, "code": "(fn [f & r]\n  (let [s (first r)]\n    (if (empty? r)\n      f\n      (recur (#(if (> %1 %2) %1 %2) f s) (rest r)))))", "user": "56b18445e4b0982f16b37dee"}, {"problem": 38, "code": "(fn [& numbers] (reduce (fn [res n] (if (> res n) res n)) (first numbers) (rest numbers)))", "user": "56b3146ae4b0982f16b37e0f"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "56b35565e4b0982f16b37e16"}, {"problem": 38, "code": "(fn \n    [fir & rem]\n  (if (empty? rem)\n    fir\n    (if (> fir (first rem))\n      (recur fir (rest rem))\n      (recur (first rem) (rest rem)))))", "user": "55fc838be4b0f488688e0674"}, {"problem": 38, "code": "#(reduce (fn [x y] (if (> y x) y x)) %&)", "user": "55ed5a2de4b0121d4835fdd8"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "user": "56a1fce9e4b0542e1f8d14b7"}, {"problem": 38, "code": "(fn [& sq] \n  (loop [mx nil s sq]\n           (if (empty? s) mx\n             (recur\n              (if (or (nil? mx) (< mx (first s)))\n                (first s)\n                mx\n              )\n              (rest s)\n             )\n           )\n  )\n)", "user": "56b36283e4b0982f16b37e18"}, {"problem": 38, "code": "(fn [& s] (reduce (fn [a b] (if (>= a b) a b)) s))", "user": "5242e1dae4b076204b44fa96"}, {"problem": 38, "code": "(fn [& numbers]\n  (reduce #(if (> %1 %2) %1 %2) numbers))", "user": "5690221ce4b0dcc4269f40e9"}, {"problem": 38, "code": "(fn [& values]\n  (reduce (fn [acc v] (if (> acc v) acc v)) values))", "user": "5617a540e4b06b1bb2182a12"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (> %1 %2) %1 %2) x xs))", "user": "55c4b23de4b0e31453f649a3"}, {"problem": 38, "code": "(fn [& more]\n  (reduce \n    #(if (> %1 %2) %1 %2)\n    more))", "user": "526e84b5e4b03e8d9a4a732d"}, {"problem": 38, "code": "(fn [& my-params] (reduce #(if (> %1 %2) %1 %2) my-params))", "user": "5655e056e4b0f9d632dd849b"}, {"problem": 38, "code": "(fn [& x] (reduce (fn [y z] (if (> y z) y z)) x))", "user": "56b66eb7e4b0982f16b37e3b"}, {"problem": 38, "code": "(fn [& args] (reduce #(if(> %1 %2) %1 %2) args))", "user": "56b6e354e4b0982f16b37e41"}, {"problem": 38, "code": "(fn [& a] (->> a (map -) (apply min) (-)))", "user": "565418ede4b0f9d632dd847d"}, {"problem": 38, "code": "(fn max-val [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) (flatten (cons x xs))))", "user": "56af37cce4b03c432f187368"}, {"problem": 38, "code": "(comp last sort list)", "user": "558e067ee4b027778923764a"}, {"problem": 38, "code": "(fn mm [& cl]\n  (reduce #(if (> %2 %1) %2 %1) 0 cl))", "user": "56b280e3e4b0982f16b37e06"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))\n\n; #(last (sort %&))", "user": "56b295f7e4b0982f16b37e08"}, {"problem": 38, "code": "(fn [& args] (-> args sort last))", "user": "565953a8e4b068f2fe63dbea"}, {"problem": 38, "code": "(fn [& vs] (loop [v vs\n                  mx (first vs)]\n               (if (next v)\n\t               (recur (next v)\n                          (if (> mx (fnext v)) mx (fnext v)))\n                 mx)))", "user": "53307a23e4b019098a6f8b5d"}, {"problem": 38, "code": "(fn [& args]\n  (->> args\n       (map #(* -1 %))\n       (apply min)\n       (* -1)))", "user": "5688e403e4b0dcc4269f4072"}, {"problem": 38, "code": "(fn [& args] (-> args sort last))", "user": "56826ebce4b0945ebc182a93"}, {"problem": 38, "code": "#(last (sort %&))", "user": "56b8c794e4b0f26550335927"}, {"problem": 38, "code": "(fn [& args] (first (sort > args)))", "user": "569ce7e6e4b0542e1f8d146d"}, {"problem": 38, "code": "(fn [& col]\n  (reduce #(if (> %2 %) %2 %)\n          Integer/MIN_VALUE\n          col))", "user": "56b965d9e4b0f26550335931"}, {"problem": 38, "code": "(fn my-max\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] (reduce my-max (my-max x y) more)))", "user": "56b9d20ee4b0f2655033593b"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "56afd59be4b061e3ca319adb"}, {"problem": 38, "code": "(fn [f & res] (loop [a f re res]\n                (cond\n                 (empty? re) a\n                 :else (recur (if (> a (first re)) a (first re)) (rest re)))))", "user": "56af842de4b061e3ca319ad2"}, {"problem": 38, "code": "(comp last sort vector)", "user": "56ba2f72e4b0f2655033593f"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "56b86e64e4b0f26550335924"}, {"problem": 38, "code": "(comp last sort list)", "user": "56baab13e4b0f26550335948"}, {"problem": 38, "code": "(fn [& args] (first (sort > args)))", "user": "56baa68ce4b0f26550335947"}, {"problem": 38, "code": "(fn [& c] (reduce #(if (> %2 %1) %2 %1) 0 c))", "user": "55e206f3e4b050e68259b429"}, {"problem": 38, "code": "(fn [& ls]\n  (reduce #(if (> %1 %2) %1 %2) ls))", "user": "56b7c32ee4b0982f16b37e48"}, {"problem": 38, "code": "(fn [& more] (last (sort more)))", "user": "55e20451e4b050e68259b428"}, {"problem": 38, "code": "(fn abc\n  [& remaining]\n  (loop [a (first remaining) r (rest remaining)]\n    (if (= (count r) 0)\n      a\n      (recur\n        (let [b (first r)]\n          (if (> a b)\n           a\n           b\n          )\n        )\n        (rest r)\n      )\n    )\n  )\n)", "user": "56bb3a4be4b0f26550335951"}, {"problem": 38, "code": "(fn [& args] \n  (loop [left args big 0] \n    (if (empty? left) \n      big\n      (if (> big (first left))\n        (recur (rest left) big)\n        (recur (rest left) (first left))))))", "user": "56bb9ccce4b0f26550335959"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (> %1 %2) %1 %2) x xs))", "user": "51f38193e4b0fca5e8b48226"}, {"problem": 38, "code": "(fn [& xs]\n    (reduce \n     #(if (-> %2 (> %1))\n        %2\n        %1)\n     xs))", "user": "56bcc2b2e4b0f26550335965"}, {"problem": 38, "code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) more))", "user": "531a0709e4b08068f379ed87"}, {"problem": 38, "code": "#(last (sort %&))", "user": "569637d8e4b0dcc4269f4130"}, {"problem": 38, "code": "(fn [& r] (reduce #(if (> %1 %2) %1 %2) r))", "user": "56af6f9ce4b061e3ca319ad0"}, {"problem": 38, "code": "#(last (sort %&))", "user": "56bca51ae4b0f26550335963"}, {"problem": 38, "code": "(fn maximum [& xs]\n  (loop [res (first xs)\n         xs xs]\n    (if-let [x (first xs)]\n      (recur (if (> x res) x res)\n             (next xs))\n      res)))", "user": "56ba1406e4b0f2655033593c"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "user": "56bf4ac0e4b0f26550335985"}, {"problem": 38, "code": "(fn [& xs]\n  (let [len (count xs)]\n    (cond (= len 0) nil\n          (= len 1) (first xs)\n          (> len 1) (reduce (fn [x y] (if (> x y) x y)) xs))))", "user": "56bfcba1e4b060a8e693e3a1"}, {"problem": 38, "code": "(fn [& nums] \n\t(loop [m (first nums) nums nums] \n\t\t(if (empty? nums) m (recur (let [m m n (first nums)] (if (> n m) n m)) (next nums)) \n)))", "user": "56bdda49e4b0f26550335977"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "563536f8e4b0bfe05bf117c5"}, {"problem": 38, "code": "(fn maxV [& coll]\n  (reduce (fn [x y] (if (> x y) x y)) coll))", "user": "56c0aeb8e4b060a8e693e3af"}, {"problem": 38, "code": "(fn [& args] (first (reverse (sort args))))", "user": "564b1f34e4b0284900eef662"}, {"problem": 38, "code": "(fn\n  [& coll]\n  (reduce #(if (> %1 %2) %1 %2) (first coll) coll))", "user": "5609d328e4b05f002753deee"}, {"problem": 38, "code": "(fn [& vals]\n  (\n   \treduce\n    (fn [x, y] (if (> x, y) x y))\n    vals\n  )\n)", "user": "525636dfe4b0541d1855ba0d"}, {"problem": 38, "code": "(fn f [ & e ] \n\t(cond\n\t\t(= (count e) 1) (first e)\n\t\t(> (first e) (apply f (rest e))) (first e)\n\t\t:else (apply f (rest e))\n\t)\n)", "user": "5693cc39e4b0dcc4269f4108"}, {"problem": 38, "code": "(fn [& args] \n  (first (reverse (sort args)))   \n)", "user": "56aa9464e4b07966d5a8a08d"}, {"problem": 38, "code": "(fn\n  [x & more]\n  (loop [rs x args more]\n    (if (nil? args)\n      rs\n      (let [y (first args)]\n        (recur (if (> rs y)\n                 rs y)\n               (next args))))))", "user": "56a36f76e4b0542e1f8d14ca"}, {"problem": 38, "code": "(fn mm [ & coll ] (last (sort coll )))", "user": "56b80ad1e4b0f26550335921"}, {"problem": 38, "code": "(fn [& rest]\n  (reduce\n    (fn [acc x]\n      (println acc x)\n      (if (> acc x)\n        acc\n        x)) rest))", "user": "569ed695e4b0542e1f8d1488"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (< % %2) %2 %) a))", "user": "56c08696e4b060a8e693e3aa"}, {"problem": 38, "code": "(fn [x & y]\n  (cond\n   (nil? y) x\n   (> x (first y)) (recur x (next y))\n   :else (recur (first y) (next y))))", "user": "56b01cd0e4b0982f16b37dd6"}, {"problem": 38, "code": "(fn  [& se]\n   (reduce #(if (> %1 %2)\n                %1\n                %2)  se))", "user": "56a257e7e4b0542e1f8d14bb"}, {"problem": 38, "code": "(fn [& more]\n  (reduce\n    (fn\n      [x y]\n      (if (< x y) y x)\n      )\n    more\n    )\n  )", "user": "5653da73e4b0f9d632dd8478"}, {"problem": 38, "code": "(fn [& coll] \n  (reduce #(if (> %1 %2)\n             %1\n             %2)\n          coll))", "user": "56c33ceae4b05cc29241ee89"}, {"problem": 38, "code": "(fn [& coll] (loop [m 0 col coll]\n                 (if (empty? col)\n                   m\n                   (if (< m (first col))\n                     (recur (first col) (rest col))\n                     (recur m (rest col))\n                     ))))", "user": "56b49f72e4b0982f16b37e23"}, {"problem": 38, "code": "(fn func2 [& more] (reduce (fn [x y] (if (>= x y) x y)) more))", "user": "56c1d2dae4b0839206b9d68a"}, {"problem": 38, "code": "#( last (sort %&))", "user": "56c040eee4b060a8e693e3a5"}, {"problem": 38, "code": "(fn [input & oth] (reduce #(if (> %1 %2) %1 %2) 0 (cons input oth)))", "user": "506af7d8e4b0a2a5463de37d"}, {"problem": 38, "code": "(fn my-max [& args] (first (reverse (sort (seq args)))))", "user": "56c0756de4b060a8e693e3a9"}, {"problem": 38, "code": "(fn [x & more] (first (reverse (sort (cons x more)))))", "user": "56c55fbce4b05cc29241eea5"}, {"problem": 38, "code": "(fn mymax [a & opts]\n  (reduce \n   (fn [a1 b1] (if (> a1 b1) a1 b1))\n   a opts))", "user": "56c56603e4b05cc29241eea7"}, {"problem": 38, "code": "(fn [f & r] (reduce #(if (> %1 %2) %1 %2) f r))", "user": "56b2573ce4b0982f16b37e02"}, {"problem": 38, "code": "(fn [& vals]\n  (reduce #(if (> %1 %2) %1 %2) vals))", "user": "56c427bbe4b05cc29241ee94"}, {"problem": 38, "code": "(fn [& s] (last (sort s)))", "user": "56c23de0e4b05cc29241ee80"}, {"problem": 38, "code": "(fn [& numbers] (last (sort numbers)))", "user": "564857c2e4b0284900eef62e"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "56499a5de4b0284900eef644"}, {"problem": 38, "code": "#(last (sort %&))", "user": "56c6490de4b05cc29241eeaf"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "567e418fe4b0feffd0d18eb1"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [v1 v2] (if (> v1 v2)\n    v1\n    v2)) args))", "user": "56c60b36e4b05cc29241eead"}, {"problem": 38, "code": "(fn [& all] (last (sort all)))", "user": "56aed78fe4b03c432f187363"}, {"problem": 38, "code": "(comp last sort list)", "user": "56c4f43ce4b05cc29241ee9c"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "user": "56156feee4b05f002753dfc5"}, {"problem": 38, "code": "(fn [& col] (-> col sort last))", "user": "569f4dabe4b0542e1f8d1491"}, {"problem": 38, "code": "(comp last sort list)", "user": "56c33bb9e4b05cc29241ee87"}, {"problem": 38, "code": "(fn mymax\n  ([x y]\n     (if (> x y) x y))\n  ([x y & more]\n     (reduce mymax (mymax x y) more)))", "user": "56bfe8f1e4b060a8e693e3a3"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "56c8cff8e4b0ed865f9758d7"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "56c0d92ae4b0839206b9d67e"}, {"problem": 38, "code": "(fn [& values] (last (sort values)))", "user": "56c23ca6e4b05cc29241ee7f"}, {"problem": 38, "code": "#(last (sort %&))", "user": "56a37ccee4b0542e1f8d14cb"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "566470b9e4b0e91d5f5c5658"}, {"problem": 38, "code": "(fn [& sq]\n  (reduce #(if (>= %1 %2) %1 %2) sq)\n  )", "user": "56c9970ce4b0ed865f9758de"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (> %1 %2) %1 %2) x xs))", "user": "56cb3bebe4b0ea9b8538f728"}, {"problem": 38, "code": "(fn [& nums] (last (sort nums)))", "user": "5697d946e4b0542e1f8d142a"}, {"problem": 38, "code": "(fn my-max [& s]\n  (reduce #(if (> %1 %2) %1 %2) (first s) s))", "user": "56cbb98ae4b0ea9b8538f739"}, {"problem": 38, "code": "(fn [& col]\n  (reduce\n    (fn [m v]\n      (if (> v m) v m))\n    0\n    col))", "user": "55cde24ae4b0e31453f64a23"}, {"problem": 38, "code": "(fn my-max [& args]\n  (last (sort args)))", "user": "5141e978e4b0b50abeb46b20"}, {"problem": 38, "code": "(fn [& args]\n  (loop [m (first args)\n         a args]\n  \t(if (empty? a)\n      m\n      (recur (if (> (first a) m)\n               (first a)\n               m)\n             (rest a)))))", "user": "5609824ee4b0053d1b86c7e2"}, {"problem": 38, "code": "#(last (sort %&))", "user": "56958a16e4b0dcc4269f4129"}, {"problem": 38, "code": "(fn [& list-seq]\n  (reduce (fn [x y] (if (> x y) x y)) list-seq))", "user": "55f73078e4b06e875b46cea4"}, {"problem": 38, "code": "(fn [x & rest] (last (sort (concat rest [x])))  )", "user": "56c3aca0e4b05cc29241ee90"}, {"problem": 38, "code": "(fn [& coll] (loop [c coll mx -99999]\n                   (if c (recur (next c) (if (> (first c) mx) (first c)\n                                             mx))\n                       mx)))", "user": "56cba075e4b0ea9b8538f737"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "56cd44fde4b0ea9b8538f749"}, {"problem": 38, "code": "(fn [& x] (reduce #(if(< %1 %2) %2 %1) x))", "user": "56cd75bee4b0ea9b8538f74b"}, {"problem": 38, "code": "(fn find-max\n  [a b & rest]\n  (if (> (count rest) 0)\n    (if (> a b)\n      (apply find-max (concat [a] rest))\n      (apply find-max (concat [b] rest)))\n    (if (> a b)\n      a\n      b)))", "user": "54288375e4b01498b1a71b32"}, {"problem": 38, "code": "(fn [& args] (-> args sort last))", "user": "56ce20ffe4b0ea9b8538f75d"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "55efdc97e4b066087aa94542"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %2 %1) %2 %1) 0 a))", "user": "54be7e93e4b0ed20f4ff6eed"}, {"problem": 38, "code": "(fn [& args] (last (sort (into [] args))))", "user": "56cb6425e4b0ea9b8538f730"}, {"problem": 38, "code": "(fn [& numbers]\n  ((fn mx [m coll]\n      (if (not-empty coll)\n        (if (> m (first coll))\n          (mx m (rest coll))\n          (mx (first coll) (rest coll)))\n        m)) (first numbers) numbers))", "user": "56c792ace4b0ed865f9758c4"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "54961073e4b0b312c081ff62"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "555d4421e4b0a2eb076a39a8"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "4f2858ece4b0d6649770a016"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "55801a0de4b05c286339e0e5"}, {"problem": 38, "code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) more))", "user": "56d06d55e4b0ea9b8538f77f"}, {"problem": 38, "code": "(fn find-max\n  [& rem]\n  (loop \n      [global-max (first rem) ;; assume first is global max\n       seq (rest rem)]\n    (if (= [] seq)\n      global-max\n      (if (> (first seq) global-max)\n        (recur (first seq) (rest seq))\n        (recur global-max (rest seq))))))", "user": "56cf9d4fe4b0ea9b8538f76c"}, {"problem": 38, "code": "(fn [& args]\n  (loop [x (first args), xs (drop 1 args)]\n    (if (= xs '())\n      x\n      (if (> x (first xs))\n        (recur x (drop 1 xs))\n        (recur (first xs) (drop 1 xs))\n      )\n    )\n  )\n)", "user": "56433d34e4b08d4f616f5f23"}, {"problem": 38, "code": "(fn [& c] (reduce #(if (> %1 %2) %1 %2) c))", "user": "56cbb352e4b0ea9b8538f738"}, {"problem": 38, "code": "(fn [& l]\n  (reduce\n   (fn [a b]\n     (if (> a b) a b)\n     ) l))", "user": "55009d17e4b07d26eda61d5d"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %2 %) %2 %) args))", "user": "56d1afd9e4b0ea9b8538f791"}, {"problem": 38, "code": "(fn [& s]\n  (reduce (fn [v n] (if (> n v) n v)) s))", "user": "56d1db57e4b0ea9b8538f794"}, {"problem": 38, "code": "(fn [& args] (reduce #( if(> %1 %2) %1 %2) args) )", "user": "56c7d8dee4b0ed865f9758c9"}, {"problem": 38, "code": "(fn maax [& args] \n  (loop [s args] (if (< (count s) 2) \n               (first s)\n               (let [[a b & therest] s]\n                 (if (> b a)\n                   (recur (concat [b] therest))\n                   (recur (concat [a] therest))\n                   )))))", "user": "548a3dc6e4b0e286459a11f2"}, {"problem": 38, "code": "(fn [& args]\n   (last (sort args)))", "user": "56d00f6ee4b0ea9b8538f778"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "56d228f3e4b0ea9b8538f79a"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [maximum new] (if (> new maximum) new maximum)) args))", "user": "56603e5fe4b068f2fe63dc4a"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [x y] (if (< x y) y x)) args))", "user": "5543ef94e4b0a04f79299526"}, {"problem": 38, "code": "(fn [x & rest] (first (sort > (conj rest x))))", "user": "56d09798e4b0ea9b8538f781"}, {"problem": 38, "code": "(fn [& x]   \n  (reduce (fn [x y] (if (> x y) x y) ) \n          x)\n  )", "user": "56cd67c1e4b0ea9b8538f74a"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (< %1 %2) %2 %1) xs))", "user": "52dda39fe4b09f7907dd13e7"}, {"problem": 38, "code": "(fn [& xs] (last (sort xs)))", "user": "55ed1575e4b0121d4835fdd3"}, {"problem": 38, "code": "(fn [& ns] (reduce #(if(> %1 %2) %1 %2) ns))", "user": "56d63729e4b0ea9b8538f7ca"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "56d05ba2e4b0ea9b8538f77d"}, {"problem": 38, "code": "(comp last sort vector)", "user": "56d69d28e4b0ea9b8538f7cf"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) args))", "user": "56c70cc2e4b0ed865f9758b5"}, {"problem": 38, "code": "(fn [& params]\n  (reduce (fn [x y] (if (< x y)\n                      y\n                      x)\n            ) params))", "user": "56d4b22de4b0ea9b8538f7bb"}, {"problem": 38, "code": "(fn [& vals] (reduce (fn [m n] (if (> n m) n m)) vals))", "user": "56d68cbae4b0ea9b8538f7cd"}, {"problem": 38, "code": "(fn [& args]\n  (first (sort > args)))", "user": "56d5fd24e4b0ea9b8538f7c5"}, {"problem": 38, "code": "(fn [ & xs] (reduce #(if (> %1 %2) %1 %2) (first xs) (rest xs)))", "user": "56d5bc66e4b0ea9b8538f7c2"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "user": "56d80542e4b0ea9b8538f7e1"}, {"problem": 38, "code": "#(reduce (fn f[a b] \n           (if (> a b) \n             a \n             b))\n         %&)", "user": "565b4d7fe4b068f2fe63dc01"}, {"problem": 38, "code": "(fn myreducemax\n[& args]\n(reduce (fn [v1 v2]\n(prn \"comparing\" v1 \"and\" v2)\n(if (> v1 v2)\nv1\nv2)) (first args) (rest args)\n))", "user": "56d74c88e4b0ea9b8538f7d9"}, {"problem": 38, "code": "(fn [& nums] (reduce #(if (> %2 %1) %2 %1) nums))", "user": "56d8a63fe4b0ea9b8538f7e8"}, {"problem": 38, "code": "(fn [x & y]\n  (loop [sq y mx x]\n    (if (empty? sq)\n        mx\n        (recur (rest sq) (if (> (first sq) mx) (first sq) mx)))))", "user": "56be8649e4b0f26550335983"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "55b6a63ae4b01b9910ae299b"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "56ab80f1e4b03c432f18733e"}, {"problem": 38, "code": "(fn [& args](reduce (fn [a b] (if (> a b) a b)) args))", "user": "56b6a50ae4b0982f16b37e3c"}, {"problem": 38, "code": "#(last (sort %&))", "user": "56d957c2e4b0ea9b8538f7f1"}, {"problem": 38, "code": "(fn\n  [& x]\n  (reduce #(if (> %1 %2) %1 %2 ) x))", "user": "56d8fa43e4b0ea9b8538f7ec"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "527bd988e4b03e8d9a4a759d"}, {"problem": 38, "code": "(fn [& x]\n  (reduce #(if (>= %1 %2) %1 %2) x))", "user": "513f1f18e4b051389b345b3d"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (>%1 %2) %1 %2) args))", "user": "56db549be4b0ea9b8538f808"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> % %2) % %2) x))", "user": "542a8d07e4b01498b1a71b43"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "user": "52c634b1e4b0c2d177d6210a"}, {"problem": 38, "code": "(fn [& v] (reduce #(if (> %1 %2) %1 %2) v))", "user": "555e7210e4b0a2eb076a39b9"}, {"problem": 38, "code": "(fn [x & ys]\n  (if (empty? ys)\n    x\n    (let [a x b (first ys)]\n      (recur (if (> a b) a b) (rest ys)))))", "user": "56db8fbde4b0ea9b8538f80c"}, {"problem": 38, "code": "#(reduce (fn [acc, v] (if (> acc v) acc v)) 0 %&)", "user": "5527be83e4b0ffed3738f936"}, {"problem": 38, "code": "(comp #(first (sort-by - %)) list)", "user": "56c560ede4b05cc29241eea6"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "56b3b12ee4b0982f16b37e1c"}, {"problem": 38, "code": "#(last (sort %&))", "user": "567d75ebe4b05957ce8c61c9"}, {"problem": 38, "code": "; My original solution was as follows, but I prefer maximental's solution which I've copied below.\n; (fn [& args] (reduce #(if (> %1 %2) %1 %2) args))\n; maximental's solution\n #(last (sort %&))", "user": "56dc34eae4b0ea9b8538f817"}, {"problem": 38, "code": "(fn [& more]\n  (reduce #(if (< % %2) %2 %) more))", "user": "560ee566e4b05f002753df57"}, {"problem": 38, "code": "(fn f [& args] (reduce #(cond (> %1 %2) %1 :else %2) args))", "user": "56df62eee4b0ca2494a095f0"}, {"problem": 38, "code": "(fn f\n  [& values]\n  (loop [l (rest values) m (first values)]\n    (if (empty? l)\n      m\n      (if (> (first l) m)\n        (recur (rest l) (first l))\n        (recur (rest l) m)))))", "user": "56df632ce4b0ca2494a095f2"}, {"problem": 38, "code": "(fn [& a]\n  (reduce (fn [a b] (if (< a b) b a)) a ))", "user": "56df6301e4b0ca2494a095f1"}, {"problem": 38, "code": "(fn [& m]\n        (last (sort m)))", "user": "56df6351e4b0ca2494a095f3"}, {"problem": 38, "code": "(fn maximum-value\n  [& l]\n  (reduce (fn f [a b] (cond\n                    (> a b) a\n                    (> b a) b\n                    :else a)) l))", "user": "56df636ae4b0ca2494a095f4"}, {"problem": 38, "code": "(fn\n  [& args]\n  (reduce (fn [a b] (if (> a b) a b)) args))", "user": "56df6846e4b0ca2494a095fa"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "56df62b3e4b0ca2494a095ef"}, {"problem": 38, "code": "(fn [& params]\n  (last (sort params)))", "user": "56df63c7e4b0ca2494a095f5"}, {"problem": 38, "code": "(fn\n  [& args] \n  (last\n  (sort  args)))", "user": "56df6417e4b0ca2494a095f7"}, {"problem": 38, "code": "(fn f\n    [& n]\n    (->>\n        (sort n)\n        (last)))", "user": "56df63e1e4b0ca2494a095f6"}, {"problem": 38, "code": "(fn\n  [& lst]\n  (last (sort lst)))", "user": "56df6498e4b0ca2494a095f8"}, {"problem": 38, "code": "(fn f\n  [& params]\n  (first (reverse (sort params))))", "user": "56df7440e4b0ca2494a095fb"}, {"problem": 38, "code": "(fn my-max [& coll]\n  (reduce (fn [x y] (if (> x y)\n                      x\n                      y))\n          coll))", "user": "557e56aae4b05c286339e0d5"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "550b502ae4b06e50f9beb13f"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "56df9203e4b0ca2494a095fc"}, {"problem": 38, "code": "#(last (sort %&))", "user": "56d781b3e4b0ea9b8538f7dc"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "56d4b1aee4b0ea9b8538f7ba"}, {"problem": 38, "code": "(fn max-me [& coll]\n  (last (sort coll))\n  )", "user": "56de0db0e4b0ea9b8538f83a"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "user": "56df254be4b0ca2494a095ea"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [acc x] (if (> acc x) acc x)) xs))", "user": "55f33f0ce4b06e875b46ce59"}, {"problem": 38, "code": "(fn [ & l] \n  (loop [m (first l) r (rest l)]\n    (if (empty? r)\n      m\n      (if (> m (first r))\n        (recur m (rest r))\n        (recur (first r) (rest r))\n      )\n    )\n  )\n)", "user": "56804d03e4b0966858e4d8ec"}, {"problem": 38, "code": "(fn [& args] ( reduce (fn [x y] (if (> x y) x y)) args))", "user": "56d439d4e4b0ea9b8538f7b6"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [z y] (if (> z y) z y)) args))", "user": "56e2d320e4b03a7c14b85a3a"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "user": "56e31aaae4b03a7c14b85a3e"}, {"problem": 38, "code": "(fn [& x] (-> x sort  last ))", "user": "52c7c40be4b0c2d177d62125"}, {"problem": 38, "code": "#(last (sort %&))", "user": "56e2dbf4e4b03a7c14b85a3b"}, {"problem": 38, "code": "(fn rec [x & res]\n  (if (empty? res)\n    x\n    (if (< x (apply rec res))\n      (apply rec res)\n      x)))", "user": "56d7f340e4b0ea9b8538f7df"}, {"problem": 38, "code": "(fn [& c] (last (sort c)))", "user": "56e227a8e4b03a7c14b85a31"}, {"problem": 38, "code": "(fn [& args] \n  (loop \n    [[x & xs] args\n     m       0]\n  (cond \n    (nil? x) m\n    (> x m) ( recur xs x)\n    :else (recur xs m))))", "user": "56bf78dae4b0f26550335989"}, {"problem": 38, "code": "(fn [& params]\n  (reduce \n   (fn [a b] (if (< a b) b a)) \n   params))", "user": "56e4a6c1e4b03a7c14b85a51"}, {"problem": 38, "code": "(fn [& numbers] (reduce (fn [minval curr] (if (< minval curr) curr minval)) -1 numbers))", "user": "56e53d2fe4b02e7e935eb6bc"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce (fn [m v]\n            (if (< m v)\n              v\n              m)) xs))", "user": "56dc5f89e4b0ea9b8538f81e"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "569f7bc2e4b0542e1f8d1494"}, {"problem": 38, "code": "#(last (sort %&))", "user": "56ca0da9e4b0ea9b8538f715"}, {"problem": 38, "code": "(comp last sort list)", "user": "56a22d4ae4b0542e1f8d14ba"}, {"problem": 38, "code": "(fn [& l] (reduce #(if (> %1 %2) %1 %2) l))", "user": "56db90d4e4b0ea9b8538f80d"}, {"problem": 38, "code": "(fn [& nums] \n  (reduce (fn [x y] (if (> x y) x y)) nums)\n)", "user": "551e7267e4b030e6a24d00e9"}, {"problem": 38, "code": "#(reduce (fn [m x] (if (> m x) m x)) %&)", "user": "56e06625e4b0ca2494a09607"}, {"problem": 38, "code": "(partial min-key -)", "user": "4de14aad535d08e6dec9fde5"}, {"problem": 38, "code": "#(last (sort %&))", "user": "56e05bfce4b0ca2494a09606"}, {"problem": 38, "code": "(fn [& numbers]\n              (reduce (fn [maxx number] (println maxx number)\n    (if (> number maxx) number maxx))\n  (first numbers)\n  numbers))", "user": "56e48302e4b03a7c14b85a4e"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "56e7ebcce4b02e7e935eb6e2"}, {"problem": 38, "code": "#(reduce \n  (fn [a b] \n    (if (> a b)\n      a\n      b\n      )\n    \n    )\n  (seq %&))", "user": "56e7d877e4b02e7e935eb6df"}, {"problem": 38, "code": "(fn [& x]\n  (reduce #(if (> %1 %2) %1 %2) x))", "user": "56869344e4b0dcc4269f4053"}, {"problem": 38, "code": "(fn [ & args ] (last (sort (vec args))))", "user": "56e6ef89e4b02e7e935eb6d0"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "56491d05e4b0284900eef63a"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [acc el] (if (> acc el) acc el)) args))", "user": "51bc3e7fe4b0fe3ecfb46455"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "52d38c51e4b099d49816f0c5"}, {"problem": 38, "code": "(fn [start & args] (reduce #(if (> %1 %2) %1 %2) start args))", "user": "56cc34aee4b0ea9b8538f73c"}, {"problem": 38, "code": "(fn [& nums] (last (sort nums)))", "user": "56e87a9ce4b04a395b9a03f0"}, {"problem": 38, "code": "(fn my-max\n  ([x y]\n   (if (< x y) y x))\n  ([x y & more]\n   (reduce my-max (my-max x y) more)))", "user": "56d72e14e4b0ea9b8538f7d6"}, {"problem": 38, "code": "(fn [& args]\n  (reduce\n   (fn [best test]\n     (if (> test best) test best))\n   0 args))", "user": "56e6d049e4b02e7e935eb6cd"}, {"problem": 38, "code": "(fn [& x] (->> x sort last))", "user": "56e9555fe4b04a395b9a03f7"}, {"problem": 38, "code": "(fn [f & r] (reduce #(if (> %2 %1) %2 %1) f r))", "user": "56e02c1ce4b0ca2494a09602"}, {"problem": 38, "code": "(fn max-val [& args]\n  (first (sort > args)))", "user": "4fb85651e4b081705acca2d7"}, {"problem": 38, "code": "(fn [& col]\n  (reduce #(if (> %1 %2) %1 %2) col))", "user": "563cce5be4b0bfe05bf1183f"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "55fbc657e4b0f488688e0666"}, {"problem": 38, "code": "#(last (sort %&))", "user": "56ea8d33e4b04a395b9a040a"}, {"problem": 38, "code": "(fn [& coll]\n    (reduce (fn [acc val] (if (> acc val) acc val)) coll))", "user": "56eaad95e4b04a395b9a040f"}, {"problem": 38, "code": "#(last (sort %&))", "user": "56e99ec8e4b04a395b9a03fb"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "56eb16d8e4b04a395b9a041d"}, {"problem": 38, "code": "(fn mym [a & b] \n  (if (empty? b)\n    a\n    (let [c (apply mym b)]\n      (if (> a c) a c)\n    )\n  )\n)", "user": "56ea8b75e4b04a395b9a0409"}, {"problem": 38, "code": "(comp last sort list)", "user": "56ecc4b5e4b04a395b9a043e"}, {"problem": 38, "code": "(fn [& data] (reduce (fn[x y] (if (> x y) x y ))   data)  )", "user": "56dc483fe4b0ea9b8538f81b"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x, y] (if (> x y) x y)) args))", "user": "56ec0af1e4b04a395b9a0430"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "56ebe773e4b04a395b9a042a"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce\n   (fn [acc next]\n     (if (> acc next) acc next))xs))", "user": "55e22f54e4b050e68259b42e"}, {"problem": 38, "code": "#(last (sort %&))", "user": "56e8963ae4b04a395b9a03f1"}, {"problem": 38, "code": "(fn [& rest] (first (sort > rest)))", "user": "56cad309e4b0ea9b8538f720"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "54b815c3e4b0ed20f4ff6e92"}, {"problem": 38, "code": "#(last (sort %&))", "user": "56f000aee4b04a395b9a0469"}, {"problem": 38, "code": "(fn [& ags]\n  (loop [m (first ags)\n         l ags]\n    (if (empty? l)\n      m\n      (if (> m (first l))\n        (recur m (rest l))\n        (recur (first l) (rest l))))))", "user": "56e4427ce4b03a7c14b85a4c"}, {"problem": 38, "code": "(fn [& args]\n  (loop [biggest (first args)\n         others (rest args)]\n\t(if (empty? others)\n        biggest\n        (let [candidate (first others)]\n          (recur (if (> candidate biggest) candidate biggest)\n                 (rest others))))))", "user": "56e85493e4b02e7e935eb6e7"}, {"problem": 38, "code": "#(last (sort (seq %&)))", "user": "56f10139e4b04a395b9a0487"}, {"problem": 38, "code": "(fn [& coll] \n  (reduce \n   (fn [x y] (if (> x y) x y))\n   coll))", "user": "562268dce4b03f08ee9a9224"}, {"problem": 38, "code": "(fn [& inp] (-> inp sort last))", "user": "56ef11efe4b04a395b9a045b"}, {"problem": 38, "code": "(fn [& b]\n  (reduce #(if (> %1 %2) %1 %2) b))", "user": "56eb5c76e4b04a395b9a0422"}, {"problem": 38, "code": "(fn [& arr] (reduce #(if (> % %2) % %2) 0 arr))", "user": "56cefadee4b0ea9b8538f763"}, {"problem": 38, "code": "#(last (sort %&))", "user": "56e7ebb4e4b02e7e935eb6e1"}, {"problem": 38, "code": "(fn [& a] (loop [b a m 0]\n           (if (empty? b)\n             m\n             (recur (rest b)\n                    (if \n                     (< m \n                        (first b))\n                     (first b)\n                     m))\n             )))", "user": "56d325ace4b0ea9b8538f7a9"}, {"problem": 38, "code": "(fn [& l] (reduce (fn sel [x,y] (if (> x y) x y )) l))", "user": "56f102f9e4b04a395b9a0488"}, {"problem": 38, "code": "(fn mx [& x]\n  ((fn help [l]\n    (if (= 1 (count l)) \n      (first l)\n      (let [a (first l) b  (help (rest l))]\n        (if (> a b) a b)\n      )\n    )\n  ) x )\n)", "user": "56f258d3e4b04a395b9a04a1"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "56e93576e4b04a395b9a03f6"}, {"problem": 38, "code": "(fn my-max [n & ns]\n  (reduce #(if (> %1 %2) %1 %2) n ns))", "user": "4dfe5a93535d04ed9115e786"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) args))", "user": "56f188e9e4b04a395b9a0494"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "4e273a93535deb9a81d77ef8"}, {"problem": 38, "code": "(fn [& numbers] (last (sort numbers)))", "user": "56f02c90e4b04a395b9a0472"}, {"problem": 38, "code": "(fn[num & nums]\n  (if (nil? nums) num\n    (loop [curr num remaining nums]\n      (if (nil? remaining) curr\n      (let [[next & others] remaining]\n      (recur (if (> curr next) curr next) others))))))", "user": "56ef2348e4b04a395b9a045c"}, {"problem": 38, "code": "#(last (sort %&))", "user": "56ec440ee4b04a395b9a0435"}, {"problem": 38, "code": "(fn mmax [& values] (reduce #(if (< %1 %2) %2 %1) (first values) values))", "user": "56f15eade4b04a395b9a048e"}, {"problem": 38, "code": "(fn my-max [& coll] \n   (reduce \n     #(if (< %1 %2) %2 %1) \n     coll) )", "user": "56d9883ae4b0ea9b8538f7f4"}, {"problem": 38, "code": "(fn [& therest]\n  (last\n   (sort therest)))", "user": "56f298b4e4b04a395b9a04a6"}, {"problem": 38, "code": "#(last (sort %&))", "user": "56f4623ae4b046a417f9205d"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) args))", "user": "56eff7c1e4b04a395b9a0468"}, {"problem": 38, "code": "(fn mx [& rest]\n  (reduce (fn [x y] (if (>= x y) x y)) rest))", "user": "56f53962e4b046a417f9206c"}, {"problem": 38, "code": "(fn f [& args]\n   (reduce (fn [acc x] (if (> x acc) x acc))\n           args))", "user": "52c35afce4b07a9af579238c"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "56d6c18ee4b0ea9b8538f7d1"}, {"problem": 38, "code": "(fn zz[& xs]\n   (last (->> xs sort)))", "user": "539f9f79e4b0ca733b97449e"}, {"problem": 38, "code": "(fn my-max [& nums]\n  (int (/ 1\n\n          (apply min\n                 (map (fn div [x] (/ 1 x))\n                      (apply list nums)))\n\n          )))", "user": "56f18d0ce4b04a395b9a0496"}, {"problem": 38, "code": "(fn\n  [& args]\n  (loop [max-val (first args) nums (into [] (rest args))]\n    (if (empty? nums) max-val\n      (if (> (first nums) max-val )\n        (recur (first nums) (rest nums))\n        (recur max-val (rest nums))))))", "user": "52420e2fe4b076e5d3121f48"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "54ad9927e4b09f271ff37ce5"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) (seq rest)))", "user": "542fa0dde4b0dad94371f2d2"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) (first args) args))", "user": "56d30497e4b0ea9b8538f7a8"}, {"problem": 38, "code": "(comp last sort list)", "user": "5602bdf9e4b04bb52996e1a7"}, {"problem": 38, "code": "(fn [& lst]\n  (reduce (fn [left, right]\n               (if (< left right)\n                 right\n                 left)) \n          (first lst) \n          lst))", "user": "56f8055ee4b08e7d20b96835"}, {"problem": 38, "code": "(fn my-mx\n  ([a b] (if (> a b) a b))\n  ([a b & more]\n   (my-mx (my-mx a b) (reduce my-mx more))))", "user": "56dc3dbbe4b0ea9b8538f81a"}, {"problem": 38, "code": "#(last (sort %&))", "user": "56d15251e4b0ea9b8538f78c"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "56f7ecdfe4b08e7d20b96834"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (> %1 %2) %1 %2) x xs))", "user": "54e7425ee4b024c67c0cf810"}, {"problem": 38, "code": "(fn [a & args] (reduce (fn [m new] (if (> m new) m new))\n                     a\n                     args))", "user": "520e37cfe4b066f3ea161c96"}, {"problem": 38, "code": "(fn [& coll] (last (apply sorted-set coll)))", "user": "56f3e77ee4b046a417f92058"}, {"problem": 38, "code": "(fn [& s]\n  (reduce #(if (> %1 %2) %1 %2) s))", "user": "56f9890be4b07572ad1a88b5"}, {"problem": 38, "code": "(fn [n & nums]\n  (reduce #(if (> %2 %1) %2 %1) n nums))", "user": "56e4991fe4b03a7c14b85a4f"}, {"problem": 38, "code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) more))", "user": "56ebcbf6e4b04a395b9a0428"}, {"problem": 38, "code": "(fn [x & xs]\n  (if (empty? xs)\n    x\n    (let [nxt (first xs)]\n      (if (> nxt x)\n        (recur nxt (rest xs))\n        (recur x (rest xs))))))", "user": "56fa3f7ae4b07572ad1a88bf"}, {"problem": 38, "code": "(fn max-val [x & xs]\n  (loop [curr x\n         remain xs]\n    (if (= 0 (count remain))\n          curr\n          (recur (if (> curr (first remain))\n                       curr\n                   \t   (first remain))      \n                 (rest remain)))))", "user": "56f57481e4b046a417f92072"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "56f5e6d5e4b046a417f92079"}, {"problem": 38, "code": "(fn _ [& args] (last (sort args)))", "user": "539118b2e4b0b51d73faaea1"}, {"problem": 38, "code": "(fn [f & rest] (reduce #(if (> %2 %1) %2 %1) f (seq rest)))", "user": "56f9392ae4b07572ad1a88ac"}, {"problem": 38, "code": "(fn f [x & r]\n  (loop [ m x c r]\n    (if (empty? c) m \n       (let [ a (if (> m (first c)) m  (first c))]\n         (recur a (rest c)))\n   )))", "user": "56fa8984e4b07572ad1a88c1"}, {"problem": 38, "code": "(fn [& a] (first (sort > a)))", "user": "56efef12e4b04a395b9a0467"}, {"problem": 38, "code": "(fn [& seq] (reduce (fn [a b] (if (> a b) a b)) seq))", "user": "55cfdfc9e4b0e31453f64a35"}, {"problem": 38, "code": "(fn [& nums] (last (sort (into #{} nums))))", "user": "56f86f98e4b08e7d20b96837"}, {"problem": 38, "code": ";;#(last (sort %&))\n\n; #(last (sort %&))\n\n\n#(last (sort %&))", "user": "565487dce4b0f9d632dd8482"}, {"problem": 38, "code": "(fn [& x]\n     (last (sort x)))", "user": "56d3bc2de4b0ea9b8538f7b0"}, {"problem": 38, "code": "(fn a [& params]\n  (loop [lst params a 0]\n    (if (empty? lst) a\n      (recur (rest lst) (if (> (first lst) a) (first lst) a)))))", "user": "56fc1bc7e4b07572ad1a88dd"}, {"problem": 38, "code": "(fn my-max [& args]\n  (loop [m (first args)\n         r (rest args)]\n    (let [nxt (first r)\n          rr (rest r)]\n      (if (nil? nxt)\n        m\n        (if (> nxt m)\n          (recur nxt rr)\n          (recur m rr)\n          )\n        )\n      )\n    )\n  )", "user": "56fbe0cce4b07572ad1a88d8"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "56efe32ce4b04a395b9a0465"}, {"problem": 38, "code": "(fn yolo [& args]\n  (reduce #(if (> % %2) % %2) args))", "user": "56785234e4b05957ce8c6177"}, {"problem": 38, "code": "(fn\n  [& rest]\n  (let\n    [sorted-coll (sort rest)\n     max-index (dec (count sorted-coll))]\n    (nth sorted-coll max-index)))", "user": "56c2932fe4b05cc29241ee83"}, {"problem": 38, "code": "(comp last sort list)", "user": "56fdd9a1e4b08d47c97781a8"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "user": "56fd020ee4b08d47c97781a0"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5292feb4e4b0239c8a67af39"}, {"problem": 38, "code": "(fn [f & r] (reduce (fn [m c] (if (> c m) c m)) f r))", "user": "56fa972be4b07572ad1a88c2"}, {"problem": 38, "code": "(fn my-max\n  [& args]\n  (reduce \n    (fn [e acc] (if (> e acc) e acc)) \n    args))", "user": "56d2a103e4b0ea9b8538f7a3"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (< %1 %2) %2 %1) x))", "user": "56fee4c0e4b08d47c97781b5"}, {"problem": 38, "code": "#(reduce (fn [m n] (if (< m n) n m)) 0 %&)", "user": "56fde58ae4b08d47c97781aa"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (> %1 %2) %1 %2) x xs))", "user": "56f4cedce4b046a417f92063"}, {"problem": 38, "code": "(fn my-max [& xs]\n  (reduce (fn [a, b] (if (> a b) a b)) 0 xs))", "user": "57006957e4b08d47c97781c8"}, {"problem": 38, "code": "(fn [& args] (last (clojure.core/sort args)))", "user": "56ed84bee4b04a395b9a0445"}, {"problem": 38, "code": "(fn find-max [& args]\n  (->> args\n       (sort)\n       (last)))", "user": "55ad2d97e4b03311e7b732a2"}, {"problem": 38, "code": "(fn _min [& s]\n  (reduce #(if (> % %2) % %2) s))", "user": "57008afae4b08d47c97781ca"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [a b] (if (> a b) a b)) args))", "user": "5700f1f0e4b08d47c97781ce"}, {"problem": 38, "code": "(fn [& vals] (first (sort > vals)))", "user": "57002b81e4b08d47c97781c7"}, {"problem": 38, "code": "(fn [& vls] \n  (reduce \n   (fn [x y]\n     (if (> x y) x y)) vls))", "user": "56f881e0e4b08e7d20b96839"}, {"problem": 38, "code": "#(last (sort %&))", "user": "56efb3a3e4b04a395b9a0463"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (< %1 %2) %2 %1) x))", "user": "570243c4e4b08d47c97781dc"}, {"problem": 38, "code": "(fn [& the-args] (loop [cur-max (first the-args) args (rest the-args)] (if (empty? args) cur-max (recur (if (> (first args) cur-max) (first args) cur-max) (rest args)))))", "user": "56fbcc1fe4b07572ad1a88d5"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "5700ec08e4b08d47c97781cd"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "56f070fee4b04a395b9a0478"}, {"problem": 38, "code": "(fn max-val [& xs]\n  {:pre [(< 0 (count xs))]}\n  (reduce #(if (> %1 %2) %1 %2) xs))", "user": "56efc9fde4b04a395b9a0464"}, {"problem": 38, "code": "(fn [& coll] (last (sort coll)))", "user": "56fbf83de4b07572ad1a88da"}, {"problem": 38, "code": "(fn get-max [m n & args]\n  (let [next-max (if (> m n) m n)]\n    (if (not-empty args)\n      (apply get-max next-max args)\n      next-max)))", "user": "56af99dfe4b061e3ca319ad5"}, {"problem": 38, "code": "(fn mm \n     ([arg] arg)\n     ([arg & rargs]\n       (loop [max_arg arg next_arg (first rargs) moreargs (rest rargs)]\n         (cond \n           (nil? next_arg) max_arg\n           (> max_arg next_arg) (recur max_arg (first moreargs) (rest moreargs))\n           :else (recur next_arg (first moreargs) (rest moreargs))))))", "user": "570243e2e4b08d47c97781dd"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5703cbbee4b08d47c97781fb"}, {"problem": 38, "code": "(fn [& rest] (last (sort rest)))", "user": "5703eda3e4b08d47c9778200"}, {"problem": 38, "code": "(fn [& n] (reduce (fn [a b] (if (> a b) a b)) n))", "user": "5703cd50e4b08d47c97781fc"}, {"problem": 38, "code": "(fn [& others] (last (sort (vec others))))", "user": "557a2891e4b05c286339e09f"}, {"problem": 38, "code": "(fn [& opts] (reduce #(if (< %1 %2) %2 %1) opts))", "user": "566835fde4b04acd4f672de3"}, {"problem": 38, "code": "(fn [& s]\n  (reduce (fn [a b] (if (> a b) a b)) s))", "user": "56585dbce4b0f9d632dd84b3"}, {"problem": 38, "code": "(fn [& s]\n  (reduce #(if (> %1 %2) %1 %2) s))", "user": "570459a9e4b0b0fb43fd0662"}, {"problem": 38, "code": "#(reduce (fn [m n] (if (> m n) m n)) %&)", "user": "57035ccfe4b08d47c97781ef"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57023fc2e4b08d47c97781db"}, {"problem": 38, "code": "(fn [& x]\n  (loop [m (first x)\n         coll (rest x)]\n    (if (empty? coll)\n      m\n    (recur (if (> (first coll) m)\n              (first coll)\n              m)\n           (rest coll)))))", "user": "56f85849e4b08e7d20b96836"}, {"problem": 38, "code": "#(last(sort %&))", "user": "5703c4c4e4b08d47c97781f7"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5704942ae4b0b0fb43fd0666"}, {"problem": 38, "code": "(fn [& s]\n   (loop [i 0] \n   (if \n   (empty?\n   (filter (partial < (nth s i)) s))\n     (nth s i)\n    (recur  (inc i)))))", "user": "56ede653e4b04a395b9a0449"}, {"problem": 38, "code": "(fn [& args] (reduce (fn[a b] (if (> a b) a b)) (first args) args))", "user": "53f1dbede4b0742d9025b0e4"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5587d91ae4b059ccff29b1e9"}, {"problem": 38, "code": "(fn [& args] (\n  (fn getmax [x, i, m]\n      (if (> (count x) i)\n        (if (> (nth x i) (nth x m))\n          (getmax x (+ 1 i) i)\n          (getmax x (+ 1 i) m)\n        ) \n        (nth x m)\n      )\n  ) (vec args) 1 0)\n)", "user": "57064231e4b0b0fb43fd067a"}, {"problem": 38, "code": "(fn f [x & y]\n  (if (empty? y)\n    x\n    (f (if (< x (first y)) (first y) x ))\n    )\n  )", "user": "56eb3f9de4b04a395b9a0420"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5576d3c7e4b05c286339e074"}, {"problem": 38, "code": "(fn maximum [& x]\n  (last (sort x)))", "user": "5703d21ae4b08d47c97781ff"}, {"problem": 38, "code": "(comp last sort list)", "user": "57067a0ee4b0b0fb43fd067e"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce (fn [a, b]\n            (if (>= 0 (compare a b))\n              b a\n              )\n            )\n          xs\n          )\n  )", "user": "56fe665be4b08d47c97781af"}, {"problem": 38, "code": "(fn [& xs]\n  (first ((fn [v]\n            (reduce #(if (empty? %)\n                       (conj % %2)\n                       (if (> %2 (first %))\n                         (conj (pop %) %2)\n                         %))\n                    [] v)) xs)))", "user": "5701f886e4b08d47c97781d9"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57086931e4b0b0fb43fd069e"}, {"problem": 38, "code": "(fn [x & more]\n  (reduce #(if (> %2 %)\n             %2\n             %1) x more))", "user": "5707abfce4b0b0fb43fd068d"}, {"problem": 38, "code": "(fn my-max [& input]\n  (reduce (fn [a b]\n            (if (< a b) b a)) input))", "user": "56c12aa2e4b0839206b9d682"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [m x] (if (> m x) m x)) xs))", "user": "4eb47bb1535d7eef30807362"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57090dffe4b0b0fb43fd06a6"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "567e6d24e4b0feffd0d18eb4"}, {"problem": 38, "code": "(fn [& args] ((comp last sort) args))", "user": "5708b96ce4b0b0fb43fd06a3"}, {"problem": 38, "code": "(fn [& mylist] \u2028   (reduce (fn[last, val] (if (< last val) val last))\n mylist)\u2028   \u2028   )", "user": "545e5805e4b01be26fd74679"}, {"problem": 38, "code": "#(first (sort > %&))", "user": "570306cae4b08d47c97781ec"}, {"problem": 38, "code": "(fn [& xs]\n  (->> xs\n       (sort)\n       (last)))", "user": "5703ce0fe4b08d47c97781fd"}, {"problem": 38, "code": "(fn max2 [& x]\n    (cond\n     (= (count x) 1) (first x)\n     (> (first x) (apply max2 (rest x))) (first x)\n     :else (apply max2 (rest x))))", "user": "57027310e4b08d47c97781e2"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "570006f1e4b08d47c97781c5"}, {"problem": 38, "code": "(fn [& args] (first (reverse (sort args))))", "user": "55ba70f9e4b01b9910ae29d4"}, {"problem": 38, "code": "(fn [& x] (reduce (fn [y z] (if (< y z) z y)) 0 (seq x)))", "user": "56ab7578e4b03c432f18733d"}, {"problem": 38, "code": "(fn [& args] ((fn [lst acc] (if (empty? lst) acc (recur (rest lst) (if (> (first lst) acc) (first lst) acc)))) args 0))", "user": "570e13d3e4b0b0fb43fd06e6"}, {"problem": 38, "code": "(fn mx\n  ([x & xs]\n   ((fn go\n     [c ys]\n     (if (empty? ys)\n         c\n         (go (let [fy (first ys)]\n             (if (> fy c) fy c)) (rest ys))))\n   x xs)))", "user": "50a97c74e4b07e35d68b27b2"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5707c364e4b0b0fb43fd0691"}, {"problem": 38, "code": "(fn[x & xs]\n  (loop[x x\n        xs xs\n        maxed 0]\n    (if (nil? x)\n      maxed\n      (recur (first xs) (rest xs) (if (< x maxed)\n                                    maxed\n                                    x)))))", "user": "56acfee5e4b03c432f18734f"}, {"problem": 38, "code": "(fn [& nums] (reduce #(if (< %1 %2) %2 %1) nums))", "user": "570f0bcde4b0b0fb43fd06fe"}, {"problem": 38, "code": "(comp last sort vector)", "user": "570a2357e4b0b0fb43fd06b5"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b]\n                       (if (> a b) a\n                         b)) 0 args))", "user": "57061d20e4b0b0fb43fd0679"}, {"problem": 38, "code": "#(first (reverse (sort %&)))", "user": "55cc6c35e4b0e31453f64a10"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> % %2) % %2) xs))", "user": "56627acde4b0e91d5f5c5648"}, {"problem": 38, "code": "(fn p38 [& col] (last (sort (sequence col))))", "user": "54f5aa4ce4b0f2f3c5226e94"}, {"problem": 38, "code": "(fn\n  [& numbers]\n  (reduce #(if (< %1 %2) %2 %1) numbers))", "user": "56cb4d06e4b0ea9b8538f72e"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "570de7f8e4b0b0fb43fd06e2"}, {"problem": 38, "code": "(fn [& args]\n  (reduce \n   (fn [a b] (if (< a b) b a))\n   args))", "user": "56fc0601e4b07572ad1a88db"}, {"problem": 38, "code": "(fn [& body] (reduce (fn [x y] (if (> x y) x y)) body))", "user": "56b506d5e4b0982f16b37e2d"}, {"problem": 38, "code": "(fn my-max [& sq]\n  (loop [res (first sq) s (rest sq)]\n    (cond\n      (empty? s)\n      res\n      (< res (first s))\n      (recur (first s) (rest s))\n      true\n      (recur res (rest s)))))", "user": "5711ca24e4b09c608db7044b"}, {"problem": 38, "code": "(fn [& x] (first(reverse(sort(flatten(list x))))))", "user": "57118ee6e4b09c608db70447"}, {"problem": 38, "code": "(fn [& args]\n  (loop [v args mx 0]\n    (let [mx (if (> (first v) mx) (first v) mx)]\n      (if (empty? (rest v))\n        mx\n        (recur (rest v) mx)))))", "user": "548592a8e4b0e286459a11af"}, {"problem": 38, "code": "(fn [& l] \n  (reduce \n   (fn [m x]\n     (if (> x m)\n       x\n       m\n     )\n   ) l\n  )\n)", "user": "57011eb3e4b08d47c97781d1"}, {"problem": 38, "code": "(fn [a & more]  (-> (conj more a ) (sort) (last) ) )", "user": "57126104e4b09c608db70458"}, {"problem": 38, "code": "(fn [& args]\n   (loop [coll args\n          maximum (first coll)]\n     (if coll\n       (if (> (first coll) maximum)\n         (recur (next coll) (first coll))\n         (recur (next coll) maximum))\n       maximum)))", "user": "5712854ce4b07c98581c3a89"}, {"problem": 38, "code": "(fn a [& args]\n\t(last (sort (into [] args)))\n)", "user": "5710e574e4b09c608db7043b"}, {"problem": 38, "code": "(fn [& col]\n  (loop [maximum (first col)\n         restcollection (rest col)]\n      (if (empty? restcollection) \n        maximum\n        (recur\n          (if (> (first restcollection) maximum) (first restcollection) maximum)\n          (rest restcollection)))))\n\n; daniels solution is also nice\n; \n; (fn [& parms] \n;   (\n;     (fn mymax [x curmax] \n;       (if (= (count x) 0) \n;         curmax \n;         (if (> (first x) curmax) \n;           (mymax (rest x) (first x)) \n;           (mymax (rest x) curmax) \n;         ) \n;       )\n;     ) \n;     parms \n;     (first parms)\n;   ) \n; );", "user": "570577bbe4b0b0fb43fd0672"}, {"problem": 38, "code": "#(reduce (fn [x y] (if (> x y) x y)) %&)", "user": "5711b532e4b09c608db70449"}, {"problem": 38, "code": "(fn [& ags] (reduce #(if (> %2 %1) %2 %1) ags))", "user": "56f51879e4b046a417f92069"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a v] (if (> a v) a v)) args))", "user": "57122b20e4b09c608db70451"}, {"problem": 38, "code": "(fn [& nums] (last (sort nums)))", "user": "57141357e4b07c98581c3ab3"}, {"problem": 38, "code": "(fn [& more]\n  (reduce #(if (> %1 %2) %1 %2) 0 more))", "user": "57042a94e4b0b0fb43fd0660"}, {"problem": 38, "code": "#(reduce (fn [x y](if (> x y) x y)) %&)", "user": "5702c8eae4b08d47c97781e6"}, {"problem": 38, "code": "(fn [& l]\n  (reduce #(if (> %1 %2) %1 %2) 0 l))", "user": "57150a8ee4b07c98581c3acb"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [x y] (if (> x y) x y)) args))", "user": "56eab346e4b04a395b9a0410"}, {"problem": 38, "code": "(fn[x & resti] \n   (loop [maxi x  y resti] \n     (if  (and (>= (count y) 2) (<= maxi (first y))) (recur (first y) (rest y)) maxi)\n   )\n  )", "user": "56e6e1e6e4b02e7e935eb6cf"}, {"problem": 38, "code": "(fn [& nums]\n     (reduce \n       (fn [a b] \n           (if (< a b) b a\n             \n             )\n      )\n     (vec nums)\n     )\n  )", "user": "5713f693e4b07c98581c3ab0"}, {"problem": 38, "code": "(fn [& x]\n  (loop [l x\n         m 0]\n    (if (empty? l) m (recur (rest l) (if (> (first l) m) (first l) m)))))", "user": "56c89c2ce4b0ed865f9758d4"}, {"problem": 38, "code": "(fn [& args] ((comp last sort) args))", "user": "57168db0e4b07c98581c3afc"}, {"problem": 38, "code": "(comp (fn [n] (loop [listA n \n        maxVal (first n)] \n   (if (empty? listA) \n     maxVal \n     (recur (rest listA) (if (> (first listA) maxVal) \n                           (first listA) \n                           maxVal))))) list)", "user": "570d8418e4b0b0fb43fd06de"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5710c24be4b09c608db70439"}, {"problem": 38, "code": "(fn maxx [& xs] (last (sort xs)))", "user": "56fa2905e4b07572ad1a88be"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57130fdae4b07c98581c3a96"}, {"problem": 38, "code": "(fn [& values] (reduce (fn [res next] (if (< res next) next res)) values))", "user": "57155980e4b07c98581c3ad7"}, {"problem": 38, "code": "(fn [first & rest]\n  (if (empty? rest)\n    first\n       ((fn [m [f & r]]\n          (if (or (empty? r) (nil? f))\n            m\n            (if (> f m)\n              (recur f r)\n              (recur m r)))) first rest)))", "user": "5713c575e4b07c98581c3aab"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5707e579e4b0b0fb43fd0694"}, {"problem": 38, "code": "(fn [& x] (loop [list-of-nums (seq x) highest 0]\n        (if(empty? (rest list-of-nums))\n          (if (> highest (first list-of-nums))\n            highest\n            (first list-of-nums))\n          (if(> highest (first list-of-nums))\n            (recur (rest list-of-nums) highest)\n            (recur (rest list-of-nums) (first list-of-nums))))))", "user": "5717bf90e4b07c98581c3b17"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> % %2) % %2) args))", "user": "570ab24fe4b0b0fb43fd06b7"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (< x y) y x)) args))", "user": "5717e367e4b07c98581c3b1d"}, {"problem": 38, "code": "(fn newMax\n  [& lista]\n  (loop [lista lista maxVal (first lista)]\n    (if (empty? lista)\n        maxVal\n        (recur (rest lista) (if (> (first lista) maxVal) (first lista) maxVal)))))", "user": "56fe2a2fe4b08d47c97781ad"}, {"problem": 38, "code": "(comp last sort vector)", "user": "571456f1e4b07c98581c3abb"}, {"problem": 38, "code": "(fn [& x] (last ( sort (seq x ))))", "user": "57016724e4b08d47c97781d6"}, {"problem": 38, "code": "(fn [& rest] \n  (last (sort (into '() rest )) ) )", "user": "5602842de4b04bb52996e1a1"}, {"problem": 38, "code": "(comp last sort vector)", "user": "570794d8e4b0b0fb43fd068b"}, {"problem": 38, "code": "(fn magsimum\n  [& coll]\n  (loop [[x & xs] coll biggest Integer/MIN_VALUE]\n    (if x\n      (if (> x biggest)\n        (recur xs x)\n        (recur xs biggest))\n      biggest)))", "user": "56edf2dde4b04a395b9a044b"}, {"problem": 38, "code": "#(reduce (fn [m x] (if (> m x) m x)) %&)", "user": "5716845be4b07c98581c3afa"}, {"problem": 38, "code": "(comp last sort list)", "user": "5714401fe4b07c98581c3ab7"}, {"problem": 38, "code": "(comp last sort list)", "user": "5714614ee4b07c98581c3abd"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [x y] (if (> x y) x y)) args))", "user": "5717ad6fe4b07c98581c3b14"}, {"problem": 38, "code": "(fn [& L] (reduce (fn [lhs rhs] (if (> lhs rhs) lhs rhs)) L))", "user": "57015a1de4b08d47c97781d4"}, {"problem": 38, "code": "(fn my-max\n    ([] nil)\n    ([x] x)\n    ([x & next] (let [r (apply my-max next)] (if (> x r) x r))))", "user": "56ef0a2ee4b04a395b9a045a"}, {"problem": 38, "code": "#(last (sort %&))", "user": "571bc0a1e4b07c98581c3b6c"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "5716d585e4b07c98581c3b03"}, {"problem": 38, "code": "(fn [& coll]\n  (reduce (fn [res x]\n            (if (> x res)\n              x\n              res))\n          (first coll)\n          (rest coll)))", "user": "571c2babe4b07c98581c3b73"}, {"problem": 38, "code": "(letfn [(mx ([x y] (if (> x y) x y))\n            ([x y & more] (reduce mx (mx x y) more)))]\n  mx)", "user": "54055aa9e4b0addc1aec6665"}, {"problem": 38, "code": "(fn [& r]\n  (reduce (fn [x y] (if (> x y) x y)) r))", "user": "571d063ee4b0145328a76272"}, {"problem": 38, "code": "(fn [& lst]\n  (reduce #(if (> %1 %2) %1 %2) lst))", "user": "570e6974e4b0b0fb43fd06ef"}, {"problem": 38, "code": "(fn [& more]\n  (reduce #(if(< %1 %2) %2 %1) more)\n  )", "user": "571ac0b8e4b07c98581c3b5b"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) (first a) a))", "user": "5717d674e4b07c98581c3b1a"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5714e82ae4b07c98581c3ac9"}, {"problem": 38, "code": "(fn [ & args ]\n  (loop [ curr-max (first args)\n          the-rest (rest args) ]\n    (if (empty? the-rest)\n        curr-max\n        (if ( < curr-max (first the-rest))\n          (recur (first the-rest) (rest the-rest))\n          (recur curr-max  (rest the-rest))))))", "user": "5719465fe4b07c98581c3b36"}, {"problem": 38, "code": "(fn [& col]\n  (reduce (fn [res a] (if (< res a) a res)) 0 col))", "user": "571e5c9ee4b0145328a76290"}, {"problem": 38, "code": "#(last (sort %&))", "user": "571dd145e4b0145328a76283"}, {"problem": 38, "code": "#(first (sort > %&))", "user": "570b421ee4b0b0fb43fd06be"}, {"problem": 38, "code": "(fn [& s]\n  (reduce #(if (< %1 %2)\n             %2\n             %1) (first s) s))", "user": "571b900ae4b07c98581c3b69"}, {"problem": 38, "code": "#(first (reverse (sort (apply list %&))))", "user": "57194f82e4b07c98581c3b37"}, {"problem": 38, "code": "(fn [v1 & vals] (loop [rvals vals mx v1] (if (empty? rvals) mx (recur (rest rvals) (if (< mx (first rvals)) (first rvals) mx)))))", "user": "571aad45e4b07c98581c3b59"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "4df73d64535d04ed9115e775"}, {"problem": 38, "code": "(comp last sort list)", "user": "571e6d73e4b0145328a76292"}, {"problem": 38, "code": "#(last (sort %&))", "user": "56df629fe4b0ca2494a095ee"}, {"problem": 38, "code": "(fn [& x]\n  (loop [result 0 seq1 x]\n    (if (empty? seq1)\n      (do result)\n      (do (if (< result (first seq1))\n            (do (recur (first seq1) (rest seq1)))\n            (do (recur result (rest seq1))))))))", "user": "571a31e3e4b07c98581c3b47"}, {"problem": 38, "code": "(fn mx [& args] ((fn mx-impl [cur rem] (cond (= nil cur) Double/NEGATIVE_INFINITY (empty? rem) cur (> cur (first rem)) (mx-impl cur (rest rem)) :else (mx-impl (first rem) (rest rem)))) (first args) (rest args)))", "user": "5716540fe4b07c98581c3af3"}, {"problem": 38, "code": "(fn [& n] (last (sort n)))", "user": "571e819ae4b0145328a76294"}, {"problem": 38, "code": "(fn [& n]\n  (last (sort n)))", "user": "56e9a56ae4b04a395b9a03fc"}, {"problem": 38, "code": "(fn [& lst]\n  (last (sort lst)))", "user": "571ff1ebe4b0c5bde472c088"}, {"problem": 38, "code": "(fn [ & r]\n  (reduce #(if (< %1 %2) %2 %1) r))", "user": "57210b6de4b0c5bde472c0a6"}, {"problem": 38, "code": "(fn [a & coll] (reduce #(if (< %1 %2) %2 %1) a coll))", "user": "571cd9dce4b0145328a76271"}, {"problem": 38, "code": "(fn [& all]\n  (reduce (fn [acc x]\n            (if (> acc x)\n            acc\n            x))\n          0\n          all))", "user": "5628f727e4b00e49c7cb47f5"}, {"problem": 38, "code": "(fn func\n  [& x]\n  (reduce #(if (> %1 %2) %1 %2) x)\n  )", "user": "56de78fde4b0ea9b8538f83c"}, {"problem": 38, "code": "(fn [& x]\n  (last (sort x)))", "user": "57210e8ee4b0c5bde472c0a8"}, {"problem": 38, "code": "(fn [& args] (last(sort args)))", "user": "5720ba36e4b0c5bde472c09c"}, {"problem": 38, "code": "(fn [& numbers] (last (sort numbers)))", "user": "5722744ae4b0c5bde472c0cb"}, {"problem": 38, "code": "min-key #(* -1 %)", "user": "571fd5a7e4b0145328a762b8"}, {"problem": 38, "code": "(fn o\n  [& args]\n  (loop [lista args\n         n 0]\n    (cond \n     (empty? lista) n\n     (> (first lista) n) (recur (rest lista) (first lista))\n     :else (recur (rest lista) n))))", "user": "5723e6d6e4b0c5bde472c0f1"}, {"problem": 38, "code": "(comp last sort list)", "user": "56ec7b7fe4b04a395b9a043a"}, {"problem": 38, "code": "(fn mymax\n  ([x y]\n     (if (> x y) x y))\n  ([x y & more]\n     (reduce mymax (mymax x y) more)))", "user": "52afa8a1e4b0c58976d9acbe"}, {"problem": 38, "code": "(fn [& s]\n  (reduce #(if (<= %1 %2) %2 %1) 0 s))", "user": "56c2c342e4b05cc29241ee85"}, {"problem": 38, "code": "(fn max! [& l]\n  (if (empty? (rest l))\n    (first l)\n    (let [x (apply max! (rest l))]\n      (if (> x (first l))\n        x\n        (first l)))))", "user": "5721dfc3e4b0c5bde472c0bb"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57218b07e4b0c5bde472c0b1"}, {"problem": 38, "code": "(comp last sort list)", "user": "57262196e4b0c5bde472c11e"}, {"problem": 38, "code": "(fn [& params] (reduce #(if (> %1 %2) %1 %2) params))", "user": "5715b67fe4b07c98581c3ae1"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57201f14e4b0c5bde472c08e"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57211a02e4b0c5bde472c0a9"}, {"problem": 38, "code": "#(last (sort %&))", "user": "56f514cee4b046a417f92068"}, {"problem": 38, "code": "(fn [ & c]\n  (reduce \n   (fn [l r] \n     (if (< l r) r l)\n   )\n   c\n  )\n  )", "user": "5720fc08e4b0c5bde472c0a3"}, {"problem": 38, "code": "(fn [& args] (first (sort-by - args)))", "user": "5724a4dae4b0c5bde472c0fe"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [a b] (if (> a b) a b)) xs))", "user": "56739bdce4b05957ce8c6122"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57283dbce4b0c5bde472c154"}, {"problem": 38, "code": "(fn\n  ([x] x)\n  ([x y] (if (> y x) y x))\n  ([x y & more] (if (> y x) y x))\n)", "user": "5726adf8e4b0c5bde472c12b"}, {"problem": 38, "code": "(fn [& rest]\n  (reduce (fn [maximum current]\n            (if (> current maximum)\n              current\n              maximum))\n          rest))", "user": "572722c4e4b0c5bde472c134"}, {"problem": 38, "code": "(fn [& n] (last (sort n)))", "user": "5548dacde4b0a04f79299561"}, {"problem": 38, "code": "(fn [x & xs]\n\t(reduce #(if (> %1 %2) %1 %2) x xs))", "user": "57291a39e4b0c6e51e0d2b14"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) 0 args))", "user": "57294e90e4b0c6e51e0d2b19"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce (fn [x y] (if (pos? (.compareTo y x)) y x)) x xs))", "user": "57213df6e4b0c5bde472c0ab"}, {"problem": 38, "code": "(fn [x & y] (reduce #(if (< %1 %2) %2 %1) x y))", "user": "572af688e4b0f4d77e651249"}, {"problem": 38, "code": "(fn getMax [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "57131dfbe4b07c98581c3a98"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "57289d7ee4b0c5bde472c15d"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [acc x] (if (> x acc) x acc)) xs))", "user": "4fc5019ae4b081705acca36d"}, {"problem": 38, "code": "(fn [ & args ]\n    (reduce #(if (> %1 %2) %1 %2) args))", "user": "55c9ff22e4b0e31453f649f3"}, {"problem": 38, "code": "(fn my-max\n  [& nums]\n  (reduce (fn [a b]\n            (if (> a b)\n              a\n              b))\n          nums))", "user": "572db6d5e4b0cd1946bd0f78"}, {"problem": 38, "code": ";;(fn [& coll] ((comp last sort) coll))\n#((comp last sort) %&)", "user": "553e3260e4b0a04f792994eb"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "user": "54b0519be4b09f271ff37d14"}, {"problem": 38, "code": "(fn redmax [& coll]\n  (reduce #(if (> %1 %2) %1 %2 ) coll))", "user": "572ea970e4b0cd1946bd0f89"}, {"problem": 38, "code": "(fn f\n  ([] 0)\n  ([a] a)\n  ([a b] (if (> a b) a b) )\n  ([a b & more] (apply f (f a b) more) )\n  )", "user": "572bc7cae4b0cd1946bd0f45"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (> %1 %2) %1 %2) x xs))", "user": "572a543ee4b0f4d77e651235"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if (< %1 %2) %2 %1) rest))", "user": "57147cd9e4b07c98581c3abf"}, {"problem": 38, "code": "(fn [& args]\n(->> (map (fn [x] x) args) (sort) (last)) \n   )", "user": "57309d7ee4b0cd1946bd0fb2"}, {"problem": 38, "code": "(fn [& li] (->> li sort reverse peek))", "user": "5684c439e4b04eec3ec5cfc1"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (< %1 %2) %2 %1) xs))", "user": "572a3d77e4b0f4d77e651230"}, {"problem": 38, "code": "(fn [& numbers] (last (sort numbers)))", "user": "572a3d8ce4b0f4d77e651231"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [x y] (if (> x y) x y)) args))", "user": "570940a9e4b0b0fb43fd06aa"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x v] (if (> v x) v x)) 0 args))", "user": "53829b28e4b06839e8705ed6"}, {"problem": 38, "code": "(fn [& xs] (first (sort > xs)))", "user": "56ff45e5e4b08d47c97781bb"}, {"problem": 38, "code": "(fn mmax [m f & r]\n   (let [ff (if (sequential? f) (first f) (identity f))]\n     (if-not (nil? ff)\n       (if (> ff m)\n         (mmax ff (first r) (rest r))\n         (mmax m (first r) (rest r)))\n       m)))", "user": "573107d5e4b0cd1946bd0fbc"}, {"problem": 38, "code": "(fn [& x] \n  (reduce \n   (fn [a b] \n     (if (> a b) \n       a \n       b)) 0 x))", "user": "55ea0784e4b0121d4835fda8"}, {"problem": 38, "code": "(fn m\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] (reduce m (m x y) more)))", "user": "5703cb87e4b08d47c97781f9"}, {"problem": 38, "code": "(fn [& xs] \n  (reduce (fn [a x] \n            (if (> x a)\n              x \n              a))\n          (first xs) \n          (rest  xs) ))", "user": "5733ddb3e4b0cd1946bd0ffd"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "57299c57e4b0c6e51e0d2b1e"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "user": "5733e4aee4b0cd1946bd0ffe"}, {"problem": 38, "code": "(fn [& c] \n (loop \n   [col c m 0]\n   (if (empty? col) \n   m\n   (recur (rest col) \n          (if (<= m (first col))\n            (first col)\n            m)))))", "user": "568384b4e4b0945ebc182a9a"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57297fb2e4b0c6e51e0d2b1c"}, {"problem": 38, "code": "(fn mymax [& values]\n  (reduce \n    (fn [a b] (if (> a b) a b)) \n     values))", "user": "561814bae4b06b1bb2182a1a"}, {"problem": 38, "code": "(fn max-value [x & y] (reduce #(if (< %1 %2) %2 %1) x y))", "user": "572a60cee4b0f4d77e651237"}, {"problem": 38, "code": "(fn [& p] (reduce (fn [a b] (if (> a b) a b)) p))", "user": "573632b7e4b0cd1946bd102f"}, {"problem": 38, "code": "(fn [& args]\n      (loop [ps (rest args) curr (first args) imax (first args) ]\n        (if (= ps []) (if (> curr imax) curr imax)\n            (recur (rest ps) (first ps)\n                   (if (> curr imax) curr imax)))))", "user": "572ac718e4b0f4d77e651242"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce (fn [a b] (if (> a b) a b)) xs))", "user": "572ee822e4b0cd1946bd0f91"}, {"problem": 38, "code": "(fn [& nums]\n    (reduce (fn [result num]\n              (if (> num result) num result)\n              )\n            0\n            nums\n            )\n    )", "user": "571a282ae4b07c98581c3b46"}, {"problem": 38, "code": "(fn [& s]\n  (reduce (fn [acc x] (if (> x acc) x acc)) s))", "user": "55f5b8d6e4b06e875b46ce8d"}, {"problem": 38, "code": "#(last (sort %&))", "user": "573652e1e4b0cd1946bd1030"}, {"problem": 38, "code": "(fn[& x] (first (rseq (vec (sort x)))))", "user": "5704789be4b0b0fb43fd0665"}, {"problem": 38, "code": "#(last (sort %&))", "user": "570eeb66e4b0b0fb43fd06fa"}, {"problem": 38, "code": "#(last (sort %&))", "user": "56aa4fa5e4b07966d5a8a085"}, {"problem": 38, "code": "(fn [& foo]\n  (last (sort foo)))", "user": "5705e404e4b0b0fb43fd0676"}, {"problem": 38, "code": "(fn [one & remain] (last (sort (conj remain one))))", "user": "57344edbe4b0cd1946bd1008"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) -1 args))", "user": "56e30cefe4b03a7c14b85a3d"}, {"problem": 38, "code": "(fn [& items]\n        (reduce #(if (> %2 %1) %2 %1) (first items) (rest items)))", "user": "5739fb92e4b0cd1946bd1083"}, {"problem": 38, "code": "(fn[& params] \n  (reduce \n   (fn[x y] \n     (if (> x y) x y)\n   ) \n   params\n   )\n)", "user": "571172ece4b09c608db70446"}, {"problem": 38, "code": "(fn [& args]\n  (first(sort > args))\n  )", "user": "5739fa01e4b0cd1946bd1082"}, {"problem": 38, "code": "(fn [& coll]\n  (reduce #(if (< %1 %2) %2 %1) coll))", "user": "573a884de4b0cd1946bd1090"}, {"problem": 38, "code": "(fn [init & inp] (loop [[val & rest] inp curr_max init]\n                   (if (not val)\n                     curr_max\n                     (if (> val curr_max)\n                       (recur rest val)\n                       (recur rest curr_max)))))", "user": "571d9669e4b0145328a7627f"}, {"problem": 38, "code": "(fn [& nums] (reduce #(if (> %1 %2) %1 %2 )  nums ) )", "user": "5735ac67e4b0cd1946bd102b"}, {"problem": 38, "code": "(fn [& l] (reduce (fn [a b] (if (> a b) a b)) 0 l))", "user": "5739cbe4e4b0cd1946bd107c"}, {"problem": 38, "code": "(fn [& v] (-> v sort last))", "user": "573a82ebe4b0cd1946bd108f"}, {"problem": 38, "code": "(fn [& x]\n  (reduce #(if (> %1 %2) %1 %2) x)\n)", "user": "518665cde4b0da5a5be3bad2"}, {"problem": 38, "code": "(fn [& x] (loop [begin x, maxval 0] \n            (let [src (first begin)]\n              (if (nil? src)\n                maxval\n                (recur (next begin), (if (> src maxval) src maxval))\n                ))))", "user": "5736e12ee4b0cd1946bd103a"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5739ff3ae4b0cd1946bd1084"}, {"problem": 38, "code": "(fn getmax [& args]\n  (reduce \n    (fn [r x]           \n      (if (> r x) r x)\n    )\n    args\n  )\n)", "user": "571aae1fe4b07c98581c3b5a"}, {"problem": 38, "code": "(fn [& a] (loop [x 0 i 0] (if (= i (count a)) x (recur (if (> x (nth a i)) x (nth a i)) (inc i)))))", "user": "55c3f19de4b0e31453f64991"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "573cc62de4b05c31a32c0809"}, {"problem": 38, "code": "(fn [& s](reduce #(if (> %1 %2) %1 %2) 0 (seq s)))", "user": "573ce277e4b05c31a32c080b"}, {"problem": 38, "code": "(let [greater (fn [a b] (if (> a b) a b))]\n  (comp (partial reduce greater) vector))", "user": "573d9cd1e4b05c31a32c0816"}, {"problem": 38, "code": "(fn [& args](last(sort args)))", "user": "573c71bce4b0cd1946bd10c2"}, {"problem": 38, "code": "(fn mx [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "573118ebe4b0cd1946bd0fbd"}, {"problem": 38, "code": "(fn [& coll] (reduce #(if (>= %1 %2) %1 %2) coll))", "user": "56c26880e4b05cc29241ee81"}, {"problem": 38, "code": "(fn [fst & more]\n  (loop [mx fst, [cur & remain] more]\n    (if (nil? cur)\n      mx\n      (recur\n        (if (> cur mx) cur mx)\n        remain))))", "user": "573d58c8e4b05c31a32c0811"}, {"problem": 38, "code": "( comp last sort list)", "user": "573b664ce4b0cd1946bd10a7"}, {"problem": 38, "code": "(fn [& list-of-ints]\n   (reduce #(if (>= %1 %2) %1 %2) list-of-ints))", "user": "57280b92e4b0c5bde472c14e"}, {"problem": 38, "code": "(fn [& args]\n  (loop [s (rest args)\n         m (first args)]\n   (cond\n    (empty? s)\n    m\n    (> (first s) m)\n    (recur (rest s)\n           (first s))\n    :else\n    (recur (rest s)\n           m))))", "user": "56a9d4bbe4b07966d5a8a07b"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "573eae59e4b05c31a32c082e"}, {"problem": 38, "code": "(fn [& params] (reduce #(if (> %1 %2) %1 %2) params))", "user": "5323e995e4b09d4e7a9b54d3"}, {"problem": 38, "code": "(fn [& args] (-> args (sort) (last)))", "user": "56f0714de4b04a395b9a0479"}, {"problem": 38, "code": "(fn [ & args ]\n  (reduce #(if (< %1 %2) %2 %1) args))", "user": "57300c19e4b0cd1946bd0fa1"}, {"problem": 38, "code": ";(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))\n;(comp last sorted-set)\n#(last (sort %&))", "user": "57407ab3e4b05c31a32c0854"}, {"problem": 38, "code": "(fn my-max\n      ([] 0)\n      ([x] x)\n      ([x y] (if (> x y) x y))\n      ([x y & more] \n           (apply my-max (my-max x y) more)))", "user": "573940e3e4b0cd1946bd106b"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5740f821e4b05c31a32c085e"}, {"problem": 38, "code": "#(reduce (fn [res x] (if (< res x) x res)) %&)", "user": "5726ccf4e4b0c5bde472c12c"}, {"problem": 38, "code": "(fn my-max\n  [& s]\n  (reduce #(if (> %1 %2) %1 %2) s))", "user": "56ebfb93e4b04a395b9a042e"}, {"problem": 38, "code": "(comp last sort list)", "user": "573f63bfe4b05c31a32c0842"}, {"problem": 38, "code": "(fn [& params]\n  (reduce (fn [a b]\n    (if (> a b)\n      a\n      b)) params))", "user": "5743b90ce4b0c285004e8aae"}, {"problem": 38, "code": "(fn [& args]\n  ; args refers to a list  \n  (reduce (fn [acc x] (if (> x acc)\n                        x\n                        acc)) args))", "user": "57434103e4b0c285004e8a9e"}, {"problem": 38, "code": "(fn [& args](first (sort-by - (apply vec [args] ))))", "user": "5710b136e4b09c608db70437"}, {"problem": 38, "code": "(fn [ & x]\n  (reduce\n   (fn [y z] (if (> y z) y z))\n   x))", "user": "57458b82e4b009280f9f2b4e"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) 0 args))", "user": "5745bb9fe4b009280f9f2b54"}, {"problem": 38, "code": "(fn [& more] (reduce (fn [x y] (if (< x y) y x)) more))", "user": "573ddfc2e4b05c31a32c081b"}, {"problem": 38, "code": "(fn [& args]\n  (loop [[x & xs :as all] (seq args)\n         result 0]\n    (if all\n      (recur xs (if (> x result) x result))\n      result\n    )\n  )\n)", "user": "57434339e4b0c285004e8a9f"}, {"problem": 38, "code": "(fn f1 [& args]\n  (reduce (fn [m v]\n            (if (> v m) v m))\n          args))", "user": "5745f616e4b009280f9f2b58"}, {"problem": 38, "code": "(fn [& args] \n  (loop [seq args maximum 0]\n    (if (empty? seq)\n      maximum\n      (if (> (first seq) maximum) \n        (recur (rest seq) (first seq))\n        (recur (rest seq) maximum)\n        )\n      )\n    )\n  )", "user": "5746061ae4b009280f9f2b5b"}, {"problem": 38, "code": "(fn [& more] (reduce (fn [a b] (if (> a b) a b)) more))", "user": "5744723ae4b009280f9f2b3a"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "57465429e4b009280f9f2b60"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (> %1 (first %2)) %1 (first %2)) (list x xs)))", "user": "5745b884e4b009280f9f2b53"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57445f5be4b009280f9f2b36"}, {"problem": 38, "code": "(fn [& n]\n  (reduce #(if (> %1 %2) %1 %2) 0 n))", "user": "573f3ccfe4b05c31a32c083f"}, {"problem": 38, "code": "(fn [& s] (reduce (fn [a b] (if (> a b) a b)) s))", "user": "572c1f65e4b0cd1946bd0f4a"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [l r] (if (> l r) l r)) args))", "user": "56c6a3c3e4b05cc29241eeb3"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "57440f77e4b0c285004e8ab5"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (< % %2) %2 %) 0 xs))", "user": "5746d767e4b009280f9f2b6b"}, {"problem": 38, "code": "(fn [& coll] (first (sort > coll)))", "user": "51647faae4b003cf19fdde3b"}, {"problem": 38, "code": "(fn [& a]\n  (reduce #(if (> % %2) % %2) 0 a))", "user": "572ec4dde4b0cd1946bd0f8d"}, {"problem": 38, "code": "(fn [& more]\n  (reduce (fn [a b] (if (> a b) a b)) (first more) more) \n  )", "user": "56a94562e4b07966d5a8a074"}, {"problem": 38, "code": "(fn\n  [& arr]\n  (first (reverse (sort arr))))", "user": "5749ab6ae4b009280f9f2b9f"}, {"problem": 38, "code": "(comp last sort list)", "user": "57023e92e4b08d47c97781da"}, {"problem": 38, "code": "#(last (sort %&))", "user": "574977cbe4b009280f9f2b9b"}, {"problem": 38, "code": "(fn [m & ms]\n  (if (nil? ms) m\n    (recur (or (and (> m (first ms)) m) \n               (first ms))\n           (next ms))))", "user": "56f413b2e4b046a417f9205a"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %2 %) %2 %) a))", "user": "573678eae4b0cd1946bd1034"}, {"problem": 38, "code": "(fn [& col] (reduce (fn [max-e elem] (if (> elem max-e) elem max-e)) 0 col))", "user": "574a6681e4b02ea1147991f8"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "user": "5749ce09e4b009280f9f2ba0"}, {"problem": 38, "code": "(fn find-max [& args]\n  (reduce #(if (< %1 %2) %2 %1) args))", "user": "56bb652ae4b0f26550335953"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "574a9132e4b02ea1147991fd"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "57323319e4b0cd1946bd0fd0"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [a b] (if (> b a) b a)) args))", "user": "574c3a7ce4b02ea114799219"}, {"problem": 38, "code": "(fn f [& s]\n  (reduce (fn [acc s*] (if (> s* acc) s* acc)) (first s) (rest s)))", "user": "574af03ce4b02ea114799202"}, {"problem": 38, "code": "(fn maxValue [& coll]\n (loop [result (first coll) coll (rest coll)]\n   (if (empty? coll)\n      result\n     (recur (if (> result (first coll)) result (first coll)) (rest coll)))))", "user": "57465526e4b009280f9f2b61"}, {"problem": 38, "code": "(fn mx[f & r]\n  (reduce (fn[a b] (if (> a b) a b)) f r))", "user": "5731e36be4b0cd1946bd0fc9"}, {"problem": 38, "code": "(fn [& coll]\n  (reduce #(if (> %1 %2) %1 %2)\n         coll))", "user": "57275898e4b0c5bde472c13e"}, {"problem": 38, "code": "(fn [x y & z]\n  (if (or (nil? y) (> x y))\n    x\n    (recur y (first z) (drop 2 z))))", "user": "56f006f4e4b04a395b9a046a"}, {"problem": 38, "code": "#(reduce (fn [x y] (if (> x y) x y)) %&)", "user": "5743e316e4b0c285004e8ab3"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "user": "563c6ebae4b0bfe05bf11834"}, {"problem": 38, "code": "(fn\n  [& coll]\n  (last (sort coll)))", "user": "573de63fe4b05c31a32c081c"}, {"problem": 38, "code": "(fn\n  [& items]\n  (reduce #(if (> %1 %2) %1 %2) items))", "user": "56fed170e4b08d47c97781b2"}, {"problem": 38, "code": "(fn [& args] (first (sort > args)))", "user": "57408f87e4b05c31a32c0856"}, {"problem": 38, "code": "(fn [& args]  (reduce #(if (> %1 %2) %1 %2) args))", "user": "574c5e18e4b02ea11479921b"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce \n   (fn [x1 x2] \n     (if (> x1 x2) x1 x2)) \n   xs))", "user": "573c57ace4b0cd1946bd10c0"}, {"problem": 38, "code": "(fn [& args] \n    (reduce \n      (fn [x y] (if (< x y) y x)) \n      (first args) args ))", "user": "57487084e4b009280f9f2b8c"}, {"problem": 38, "code": "(fn maxx [a & r]\n  (if (= nil r) \n    a\n    (let [b (first r)\n          m (if (> a b) a b)]\n      (apply  maxx m (rest r)))))", "user": "574f1c24e4b02ea114799255"}, {"problem": 38, "code": "(fn [& s] (reduce #(if (< %1 %2) %2 %1) s))", "user": "574dfcb8e4b02ea11479923a"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "57462a4de4b009280f9f2b5d"}, {"problem": 38, "code": "(fn [& items] (reduce (fn [a b] (if (> a b) a b)) 0 items))", "user": "574f5496e4b02ea11479925c"}, {"problem": 38, "code": "(fn [& args]\n  (loop [remains args maxval (first args)]\n    (if (empty? remains)\n      maxval\n      (recur (rest remains)\n             (if (> (first remains) maxval)\n               (first remains)\n               maxval)))))", "user": "570eeb1be4b0b0fb43fd06f9"}, {"problem": 38, "code": "(fn foo\n  [lst & args] \n  (let \n    [cnd (first args) \n     rst (rest args) \n     nxt (if (or (nil? cnd) (<= cnd lst)) lst cnd)] \n    (if (nil? cnd) \n      nxt \n      (apply foo nxt rst))))", "user": "5747e22ce4b009280f9f2b7c"}, {"problem": 38, "code": "(fn mymax [ & s]\n  (reduce (fn [m n]\n     (if (> n m) n m)) 0 s))", "user": "574e7be7e4b02ea114799242"}, {"problem": 38, "code": "(fn [& bs]\n  (letfn [(look [col big]\n                   (if-let [f (first col)]\n                        (if (> f big)\n                            (look (rest col) f)\n                            (look (rest col) big))\n                        big))]\n\n    (look (rest bs) (first bs))))", "user": "5383c054e4b06839e8705ee8"}, {"problem": 38, "code": "(fn [& vars] (reduce (fn [a b] (if (> a b) a b)) vars))", "user": "57500d13e4b02ea114799268"}, {"problem": 38, "code": "(fn maxx\n  ([x] x)                  \n  ([x y] (if (> x y) x y))   \n  ([x y & more] (if (> x (maxx y)) x (maxx y))))", "user": "57501de0e4b02ea11479926c"}, {"problem": 38, "code": "(comp last sort vector)", "user": "57515f94e4b02ea114799287"}, {"problem": 38, "code": "(fn\n  [& numbers]\n  (loop [x (first numbers)\n         xs (rest numbers)\n         result 0]\n    (if (empty? xs)\n      result\n      (if (> x result)\n        (recur (first xs) (rest xs) x)\n        (recur (first xs) (rest xs) result)))))", "user": "558a099de4b0277789237614"}, {"problem": 38, "code": "(fn [& nums] \n  ( reduce (fn [a b] \n             (if (> a b ) a b)\n             )\n    nums\n    )\n  )", "user": "573407f0e4b0cd1946bd1001"}, {"problem": 38, "code": "#(first (sort > %&))", "user": "5744e1a2e4b009280f9f2b43"}, {"problem": 38, "code": ";(fn [&amp;amp; a] (- 0 (apply min (map (partial - 0) a))))\n\n(comp last sort list)", "user": "57533bc1e4b02ea1147992a6"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "54c611d1e4b045293a27f627"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "54f1e004e4b024c67c0cf8b9"}, {"problem": 38, "code": "(fn [& more] (reduce #(if (>= %1 %2) %1 %2) more))", "user": "5744d088e4b009280f9f2b41"}, {"problem": 38, "code": "(fn [& args] \n  (reduce (fn [x y] (if (> x y) x y) ) args ))", "user": "5751ed11e4b02ea114799290"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "57552f39e4b02ea1147992c1"}, {"problem": 38, "code": "(comp last sorted-set)", "user": "57539e04e4b02ea1147992ab"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5751aeabe4b02ea11479928a"}, {"problem": 38, "code": "(fn [& n] (reduce #(if (> %2 %1) %2 %1) n))", "user": "5742ec91e4b05c31a32c0883"}, {"problem": 38, "code": "( fn maxx\n  [ a & remainder ]\n  ( if ( empty? remainder ) a\n    ( let [ greater ( apply maxx remainder ) ]\n      ( if ( > a greater ) a greater ) \n    )\n  )\n)", "user": "57561529e4b02ea1147992d3"}, {"problem": 38, "code": "(fn [& params] \n  (reduce (fn[a,b] (if (> a b) a b)) params)\n)", "user": "54283a7ae4b01498b1a71b2f"}, {"problem": 38, "code": "(fn mymax\n      ([x] x)\n      ([x y] (if (> x y) x y))\n      ([x y & more] (reduce mymax (mymax x y) more)))", "user": "570bd29be4b0b0fb43fd06c5"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "user": "573102bbe4b0cd1946bd0fbb"}, {"problem": 38, "code": "(fn [& args] \n  (last (sort args)))", "user": "56749133e4b05957ce8c613e"}, {"problem": 38, "code": "(fn my-max \n  [initial & args]\n  (reduce\n   (fn \n     [largest-so-far arg] \n     (if (>= arg largest-so-far)\n       arg\n       largest-so-far))\n   initial\n   args))", "user": "5665ef78e4b0e91d5f5c5664"}, {"problem": 38, "code": "#(last (sort %&))", "user": "56f6e541e4b08e7d20b9682a"}, {"problem": 38, "code": "(fn [& args]\n(last (sort args)))", "user": "5756f7d7e4b02ea1147992e9"}, {"problem": 38, "code": "(fn max-value\n  [& data]\n  (loop [x data result 0]\n    (if (empty? x)\n      result\n      (recur (rest x) (if (> (first x) result) (first x) result)))))", "user": "5746cb28e4b009280f9f2b68"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "574abbfbe4b02ea114799200"}, {"problem": 38, "code": "(fn [& args ] (reduce (fn[x y] (if(> x y) x y)) args))", "user": "574ed2f7e4b02ea11479924a"}, {"problem": 38, "code": "(fn [& args] (first (-> args sort reverse)))", "user": "574a546ee4b02ea1147991f6"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "5742760ce4b05c31a32c0876"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5757ba87e4b02ea1147992f9"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "54c8dd88e4b045293a27f656"}, {"problem": 38, "code": "(fn [x & others]\n  (let [first-of-others (first others)]\n    (let [between-max (if (> x first-of-others) x first-of-others)]\n                         (if (= (count others) 1) between-max (recur between-max (rest others))))))", "user": "5751f2a2e4b02ea114799292"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5759c6aae4b02ea11479932b"}, {"problem": 38, "code": "(fn [& args] (reduce \n               (fn [a b] \n                 (if (< a b)\n                    b\n                    a)) args))", "user": "574a71b7e4b02ea1147991fb"}, {"problem": 38, "code": "(fn [& coll] (first (reverse (sort coll))))", "user": "5759cd46e4b02ea11479932e"}, {"problem": 38, "code": "(fn [& xs]\n   (reduce #(if (> %1 %2) %1 %2) xs)\n   )", "user": "4dbba163535d3f4042261ecc"}, {"problem": 38, "code": "(fn [& a]\n  (reduce\n   #(if\n      (> %1 %2)\n      %1\n      %2)\n   a))", "user": "57596e78e4b02ea11479931c"}, {"problem": 38, "code": "(fn [& params]\n  (reduce (fn [prev item] (if (> item prev) item prev)) 0 params)\n)", "user": "575aa61ae4b02ea11479934e"}, {"problem": 38, "code": "(comp (partial reduce #(if (> %1 %2) %1 %2)) vector)", "user": "56b97792e4b0f26550335932"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "user": "575cbe44e4b02ea114799374"}, {"problem": 38, "code": "#(last (sort %&))", "user": "574ef641e4b02ea11479924f"}, {"problem": 38, "code": "(fn [& nums] (last (sort nums)))", "user": "575d5831e4b02ea114799381"}, {"problem": 38, "code": "(fn mm \n     ([arg] arg)\n     ([arg & rargs]\n       (loop [max_arg arg next_arg (first rargs) moreargs (rest rargs)]\n         (cond \n           (nil? next_arg) max_arg\n           (> max_arg next_arg) (recur max_arg (first moreargs) (rest moreargs))\n           :else (recur next_arg (first moreargs) (rest moreargs))))))", "user": "572d6d62e4b0cd1946bd0f71"}, {"problem": 38, "code": "(fn[& args] (last (sort args)) )", "user": "575bd5f9e4b02ea114799365"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [s x] (if (> x s) x s)) args))", "user": "575556fae4b02ea1147992c3"}, {"problem": 38, "code": "(fn [& args] \n  (reduce #(if (> %1 %2) %1 %2) args)\n  )", "user": "574ff497e4b02ea114799266"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5739c2fee4b0cd1946bd107a"}, {"problem": 38, "code": "(fn [& other] (reduce #(if(> %1 %2) %1 %2) other))", "user": "575c2f55e4b02ea11479936b"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "575ecb6ee4b08062f99a4e73"}, {"problem": 38, "code": "(fn [ & coll] \n  \n  (reduce #(if (> %1 %2) %1 %2) (first coll) coll \n  \n  \t\n   \n  )\n)", "user": "575ebba3e4b08062f99a4e70"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "572a856be4b0f4d77e65123b"}, {"problem": 38, "code": "#(last (sort %&))", "user": "55228c3ce4b0882d96d091a2"}, {"problem": 38, "code": "(fn [& nums] \n  (reduce #(if (< %1 %2) %2 %1) nums)\n  )", "user": "575ef4b6e4b08062f99a4e78"}, {"problem": 38, "code": "(fn f [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "57501c83e4b02ea11479926b"}, {"problem": 38, "code": "(fn f [x & xs]\n  (if (empty? xs)\n    x\n    (if (> x (first xs))\n      (apply f x (rest xs))\n      (apply f (first xs) (rest xs)))))", "user": "575fbe58e4b08062f99a4e87"}, {"problem": 38, "code": "(fn [& x] (reduce (fn [a b] (if (> a b) a b)) x))", "user": "5760715de4b08062f99a4e96"}, {"problem": 38, "code": "#(- (apply min (map - %&)))", "user": "57609d91e4b08062f99a4e9b"}, {"problem": 38, "code": "(fn[& m](reduce (fn [a b](if (< a b) b a)) m))", "user": "575ab695e4b02ea114799350"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [acc,x] (if (> acc x) acc x)) (first args) (rest args)))", "user": "57597fade4b02ea11479931d"}, {"problem": 38, "code": "(fn get-max [& args]\n  (loop [c args m 0]\n    (if (empty? c)\n      m\n      (recur (rest c) \n             (if (> m (first c))\n                m \n                (first c)\n             )\n      )\n      \n    )))", "user": "562eeba2e4b0ab312c17ebc1"}, {"problem": 38, "code": "(fn [x & y] (loop [m x\n                   col y]\n              (if (empty? col) m\n                (if (> (first col) m)\n                  (recur (first col)\n                         (rest col))\n                  (recur m\n                         (rest col))))))", "user": "576186a5e4b0994c1922fb8e"}, {"problem": 38, "code": "(fn [& input]\n  (reduce #(if (< %1 %2) %2 %1) input))", "user": "57606cfde4b08062f99a4e95"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "574e8975e4b02ea114799244"}, {"problem": 38, "code": "(fn [& x](last (sort x)))", "user": "575dda55e4b02ea11479938c"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (< %1 %2) %2 %1) xs))", "user": "5755e66ee4b02ea1147992cf"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [u v] (if (> u v) u v)) args))", "user": "5756f324e4b02ea1147992e8"}, {"problem": 38, "code": "(comp (partial reduce #(if (> % %2) % %2)) list)", "user": "572a13cde4b0f4d77e65122b"}, {"problem": 38, "code": "(fn thirty-eight [& x]\n  (reduce (fn [a b] (if (> a b) a b)) x))", "user": "57607706e4b08062f99a4e97"}, {"problem": 38, "code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) more))", "user": "57635e2de4b0994c1922fbbf"}, {"problem": 38, "code": "(fn [& values] (reduce #(if (> %1 %2) %1 %2) (seq values)))", "user": "5753b6c6e4b02ea1147992af"}, {"problem": 38, "code": "(fn [& r]\n  (reduce #(if (> % %2) % %2) r))", "user": "575aa448e4b02ea11479934b"}, {"problem": 38, "code": "(fn my-max [& x] (reduce (fn [y z] (if (> y z) y z)) x))", "user": "576000fce4b08062f99a4e8b"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "56d47528e4b0ea9b8538f7b7"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce (fn [acc n] (if (> n acc) n acc))\n          xs))", "user": "56c21eafe4b05cc29241ee7e"}, {"problem": 38, "code": "(fn [& lst](reduce (fn [maxn n] (if (> maxn n) maxn n)) 0 lst))", "user": "575f2529e4b08062f99a4e7a"}, {"problem": 38, "code": "(fn [& s] (reduce (fn [c n] (if (> n c) n c)) 0 s))", "user": "5761a772e4b0994c1922fb95"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [mmax n] (if (> n mmax) n mmax)) args))", "user": "57642916e4b0994c1922fbee"}, {"problem": 38, "code": "(fn [& s] (reduce #(if (> %2 %) %2 %) s))", "user": "575b3e9be4b02ea11479935b"}, {"problem": 38, "code": "(fn [& coll]\n  (reduce #(if (> %2 %1) %2 %1) coll))", "user": "52ea025ae4b09f7907dd14b5"}, {"problem": 38, "code": "(fn [& seq] (reduce (fn [accum x] (if (> x accum) x accum)) seq))", "user": "5764cc01e4b0994c1922fc05"}, {"problem": 38, "code": "(fn [& args]\n  ((comp first reverse sort) args))", "user": "57614948e4b0994c1922fb83"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "57625c18e4b0994c1922fba4"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5766bab8e4b0a07e8fc180b1"}, {"problem": 38, "code": "(fn [& x] (first (reverse (sort x))))", "user": "5734147fe4b0cd1946bd1003"}, {"problem": 38, "code": "(fn [& r]\n  (reduce #(if (> % %2) % %2) r))", "user": "5763fa69e4b0994c1922fbe0"}, {"problem": 38, "code": "(fn [& coll] (first (sort > coll)))", "user": "5764457ae4b0994c1922fbf3"}, {"problem": 38, "code": "(fn [& nums]\n  (last (sort nums)))", "user": "576664ede4b0a07e8fc180a7"}, {"problem": 38, "code": "#(reduce (fn [x y] (if (> x y) x y)) (seq %&))", "user": "576584c1e4b0994c1922fc0e"}, {"problem": 38, "code": "(fn [& args] (loop [the-rest args m 0] (if (nil? the-rest) m (let [x (first the-rest) new-m (if (> x m) x m)] (recur (next the-rest) new-m)))))", "user": "576844cde4b0a07e8fc180ce"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "50c99e3ee4b0bed41a122997"}, {"problem": 38, "code": "(fn  [& li]\n  (reduce\n    (fn [a b] (if (> b a) b a))\n    (first li)\n   \tli))", "user": "561d506ee4b064ca9f4b16aa"}, {"problem": 38, "code": ";(fn maxi [& args]\n;  (last (into #{} args)))\n\n(fn max-val [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) (flatten (cons x xs))))", "user": "5761724de4b0994c1922fb89"}, {"problem": 38, "code": "#(loop [maxv %1 args %&]\n   (if (empty? args)\n     maxv\n     (recur (if (> maxv (first args)) maxv (first args)) (rest args))))", "user": "5763818ae4b0994c1922fbc7"}, {"problem": 38, "code": "(fn [& n] (first (sort > (seq n))))", "user": "575d22f5e4b02ea11479937a"}, {"problem": 38, "code": "(comp last sort list)", "user": "56f974c0e4b07572ad1a88b1"}, {"problem": 38, "code": "#(last (sort %&))", "user": "575d16f8e4b02ea114799377"}, {"problem": 38, "code": "(fn my-max [& more] (reduce #(if (>= %1 %2) %1 %2) more))", "user": "5762fcfde4b0994c1922fbb3"}, {"problem": 38, "code": "(fn mx\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n   (reduce mx (mx x y) more)))", "user": "576b4e6be4b0a07e8fc1812b"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "576a987be4b0a07e8fc1811b"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57604a87e4b08062f99a4e91"}, {"problem": 38, "code": "(fn [x & args]\n  (reduce (fn [a b] (if (> a b) a b)) x args))", "user": "576c0febe4b07c67f59d1fb8"}, {"problem": 38, "code": "(fn [& coll] (first (sort > coll)))", "user": "57202eb7e4b0c5bde472c090"}, {"problem": 38, "code": "(fn [& vals] (reduce (fn [a b] (if (> a b) a b)) vals))", "user": "56d34480e4b0ea9b8538f7ac"}, {"problem": 38, "code": ";; reduce(fn [current maximum] ( if (> current maximum) current  maximum)) \n\n(fn [& args] \n  (reduce \n   (fn [current greatest] ( if (> current greatest) current  greatest))\n   args))", "user": "57640f63e4b0994c1922fbed"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "5751fda4e4b02ea114799295"}, {"problem": 38, "code": "(fn [& r] (- (apply min (map - r))))", "user": "576e3258e4b0979f89651574"}, {"problem": 38, "code": "#(first (sort > %&))", "user": "575d63e9e4b02ea114799382"}, {"problem": 38, "code": "(fn [& s] (reduce (fn [maximum n] (if (> maximum n) maximum n)) s))", "user": "576da825e4b0979f8965156c"}, {"problem": 38, "code": "(fn [& args]\n  (loop [coll args\n         mmax 0]\n    (cond\n      (empty? coll) mmax\n      (> (first coll) mmax) (recur (rest coll) (first coll))\n      :else (recur (rest coll) mmax)\n      )\n    )\n  )", "user": "576d24ede4b0979f8965155b"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "55b0cc57e4b002ce9d5cbc25"}, {"problem": 38, "code": "#(first (sort > %&))", "user": "576df252e4b0979f8965156f"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (< % %2) %2 %) xs))", "user": "56d91a53e4b0ea9b8538f7ee"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "576ba276e4b0a07e8fc18135"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "576d8699e4b0979f89651568"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "577154ffe4b0979f896515b1"}, {"problem": 38, "code": "(fn [& args] (loop [x (first args) lst (rest args)] (if (empty? lst) x (recur (if (> x (first lst)) x (first lst)) (rest lst)))))", "user": "575ddfd1e4b02ea11479938d"}, {"problem": 38, "code": "(fn [& x]\n  ((fn rec [y maximum]\n     (if (empty? y)\n       maximum\n       (if (> (first y) maximum)\n         (rec (rest y) (first y))\n         (rec (rest y) maximum)))) x -1))", "user": "57716e11e4b0979f896515b2"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) 0 args))", "user": "577202d2e4b0979f896515c0"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce #(if (> %1 %2)\n             %1\n             %2) 0 nums))", "user": "576a972ce4b0a07e8fc1811a"}, {"problem": 38, "code": "(fn my-max [ff & more]\n  (letfn [(calc-max [m x] \n            (cond (empty? x) m\n                  (> (first x) m) (calc-max (first x) \n                                            (rest x))\n                  :else (calc-max m (rest x))))]\n    (calc-max ff more)))", "user": "5633e653e4b0bfe05bf117b7"}, {"problem": 38, "code": "(fn [& rest]( last (sort rest)))", "user": "5770fb2ce4b0979f896515a5"}, {"problem": 38, "code": "(fn \n  [& args] \n(last (sort args)) )", "user": "54653c95e4b01be26fd746d9"}, {"problem": 38, "code": "(fn [& x] (-> x sort last))", "user": "576a8d02e4b0a07e8fc18117"}, {"problem": 38, "code": "(fn [& nums] (-> nums concat sort last))", "user": "558e963ae4b0277789237653"}, {"problem": 38, "code": "(fn\n  [& elems]\n  (loop [iterator 0 maxval (nth elems 0)]\n    (if (< iterator (count elems))\n      (if (< maxval (nth elems iterator))\n        (recur (inc iterator) (nth elems iterator))\n        (recur (inc iterator) maxval))\n      maxval)\n)\n  )", "user": "5772ddb0e4b0979f896515d4"}, {"problem": 38, "code": "(fn [& arg]\n  ( ->> \n     arg\n     (sort)\n     (last)\n   )\n)", "user": "5761a352e4b0994c1922fb94"}, {"problem": 38, "code": "(fn ([] nil) ([x] x) ([x & more] (reduce #(if (> %1 %2) %1 %2) (cons x more))))", "user": "56d902c3e4b0ea9b8538f7ed"}, {"problem": 38, "code": "(fn m [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "57752a2de4b0979f89651613"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57480c4de4b009280f9f2b7e"}, {"problem": 38, "code": "(fn [& x] (reduce (fn [acc next] (if (> acc next) acc next)) x))", "user": "577629abe4b0979f8965162e"}, {"problem": 38, "code": "(fn [& args] (\n              reduce \n              #(if (> %2 %1) %2 %1)\n              args\n              )\n  )", "user": "57762befe4b0979f8965162f"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) 0 args))", "user": "57763002e4b0979f89651631"}, {"problem": 38, "code": "(fn my-max [& coll]\n  (reduce #(if (> %1 %2) %1 %2) 0 coll))", "user": "5776e21de4b0979f89651642"}, {"problem": 38, "code": "(fn mymax[& args]\n      (reduce (fn[a b]( if (> a b) a b )) args))", "user": "548f3ed8e4b0e286459a1236"}, {"problem": 38, "code": "(fn [& num]\n\t\t(loop [tmp num acc 0]\n\t\t\t(if (empty? tmp)\n\t\t\t\tacc\n\t\t\t\t(recur \n\t\t\t\t\t(rest tmp)\n\t\t\t\t\t(cond \n\t\t\t\t\t\t(< acc (first tmp)) (first tmp)\n\t\t\t\t\t \t:else acc\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)", "user": "57750460e4b0979f8965160c"}, {"problem": 38, "code": "(fn [& numbers]\n  (last (sort numbers)))", "user": "55d3780ee4b0e31453f64a66"}, {"problem": 38, "code": "#((fn max-iterative [coll current-max] \n    (if (empty? coll) current-max\n      (let [possible-new-max (first coll)]\n        (if (> possible-new-max current-max) (max-iterative (rest coll) possible-new-max) \n          (max-iterative (rest coll) current-max))))) %& 0)", "user": "5777cffae4b0979f89651651"}, {"problem": 38, "code": "(fn get-max\n    [x y & args]\n  (let [new-max (if (> x y) x y)]\n    (if (empty? args)\n      new-max\n      (recur new-max (first args) (rest args)))))", "user": "5761513fe4b0994c1922fb87"}, {"problem": 38, "code": "(fn [& args]\n   (first (reverse (sort args))))", "user": "57780e4fe4b0979f89651657"}, {"problem": 38, "code": "(fn [& args] \n  (loop [m (first args) x (rest args)]\n    (if (empty? x)\n      m\n      (recur \n       (if (> (first x) m)\n         (first x)\n         m)\n       (rest x)))))", "user": "571346c0e4b07c98581c3a9b"}, {"problem": 38, "code": "(fn foldmax [& args] (reduce #(if (< %1 %2) %2 %1) args ))", "user": "5779556de4b0979f8965166e"}, {"problem": 38, "code": "#(reduce (fn [x y] (if(> x y) x y)) 0 (vec %&))", "user": "575e71a2e4b0846ea39baf26"}, {"problem": 38, "code": "(fn [& xs]\n    (->> (map - xs)\n        (apply min)\n        -) \n    )", "user": "577829f9e4b0979f8965165a"}, {"problem": 38, "code": "#(reduce (fn [x y] (if (> x y) x y)) -1 %&)", "user": "577a8049e4b0d3393e5deafc"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [m v]\n    (if (> v m) v m)\n  ) args)\n)", "user": "577aacf2e4b0d3393e5deb03"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "577b9cfde4b0d3393e5deb16"}, {"problem": 38, "code": "(fn [& l] (reduce (fn [x y] (if (> x y) x y)) l))", "user": "55ad0e18e4b03311e7b7329c"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [a b] (if (> a b) a b)) xs))", "user": "577a74f7e4b0d3393e5deafa"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "5776f39de4b0979f89651643"}, {"problem": 38, "code": "(fn [& args]\n  (reduce \n   (fn [a,b] \n     (if (> a b)\n       a\n       b\n       )\n     )\n   args\n   )\n  )", "user": "5776558ee4b0979f89651633"}, {"problem": 38, "code": "(fn [x & xs]\n  (loop [acc x ls xs]\n    (if (empty? ls)\n      acc\n      (recur (if (> (first ls) acc) \n               (first ls)\n               acc)\n             (rest ls)))))", "user": "577abecfe4b0d3393e5deb06"}, {"problem": 38, "code": "(fn maximum [& args] (#(loop [i args maximum 0]\n                 (if (empty? i)\n                   maximum\n                   (if (> maximum (first i))\n                     (recur (rest i) maximum )\n                     (recur (rest i) (first i))\n                   )))))", "user": "560c37b5e4b05f002753df2e"}, {"problem": 38, "code": "(fn maxi [& args] (reduce (fn gr [a b] (if (< a b) b a)) args))", "user": "568bd448e4b0dcc4269f40a9"}, {"problem": 38, "code": "(comp (partial reduce (fn [x y] (if (> x y) x y))) vector)", "user": "577d3feee4b0c8d87281f6d2"}, {"problem": 38, "code": "(fn [& col] (reduce #(if (> %1 %2) %1 %2) col))", "user": "575aa081e4b02ea114799346"}, {"problem": 38, "code": "(fn [& more-args]\n  (loop [high 0 cnt 0]\n    (if (= cnt (- (count (vec more-args)) 1))\n      high\n      (if (> (nth more-args cnt) high)\n        (recur (nth more-args cnt) (inc cnt))\n        (recur high (inc cnt))))))", "user": "5756e218e4b02ea1147992e5"}, {"problem": 38, "code": "(fn [& args] (last (sort (seq args))))", "user": "514872f5e4b05514c84b7cbe"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57320099e4b0cd1946bd0fcb"}, {"problem": 38, "code": "(fn [& args]\n  (reduce \n   (fn [acc x] (if (< acc x) x acc)) \n   args))", "user": "5457583ee4b01be26fd7460a"}, {"problem": 38, "code": "(fn \n  [& r] \n  (last (sort r)))", "user": "576d6266e4b0979f89651563"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) 0 args))", "user": "566096d0e4b068f2fe63dc5a"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "user": "577aad81e4b0d3393e5deb04"}, {"problem": 38, "code": "(fn f [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "55ff2f89e4b00f4cabc5765e"}, {"problem": 38, "code": "(fn my-max [& n] (reduce #(if (> %1 %2) %1 %2) n))", "user": "57718a4ce4b0979f896515b4"}, {"problem": 38, "code": "(fn [& args]\n  (first (sort > args)))", "user": "57822efce4b0d36ec5835e91"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "577c3da9e4b0c8d87281f6b9"}, {"problem": 38, "code": "(fn [& nums] (reduce (fn [a b] (if (> a b) a b)) nums))", "user": "5776385fe4b0979f89651632"}, {"problem": 38, "code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) coll))", "user": "57615a22e4b0994c1922fb88"}, {"problem": 38, "code": "#(last (sort %&))", "user": "56e42593e4b03a7c14b85a48"}, {"problem": 38, "code": "(fn [& rest]\n  (reduce\n    #(if (> % %2) % %2)      \n    rest))", "user": "57861b0ce4b0ebec4cfb74ef"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [m v] (if (> v m) v m)) -1 args))", "user": "55c4cda5e4b0e31453f649a5"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57869af7e4b0ebec4cfb74fa"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "user": "5635adeee4b0bfe05bf117c7"}, {"problem": 38, "code": "(fn [& xs] (last ( sort xs)))", "user": "5785de31e4b0ebec4cfb74e4"}, {"problem": 38, "code": "#(last (sort %&))", "user": "56ea8374e4b04a395b9a0404"}, {"problem": 38, "code": "(fn [& l] (reduce (fn [a b] (if (> a b) a b)) l))", "user": "5784e177e4b0ebec4cfb74cf"}, {"problem": 38, "code": ";;(loop [max %1 index 1]\n;;  (if (< max %index))\n ;; \t)\n \n \n#(last (sort %&))", "user": "56ff0ef3e4b08d47c97781ba"}, {"problem": 38, "code": "(fn [& coll]\n  (reduce (fn [x y]\n            (if (> x y)\n              x\n              y)\n            )coll))", "user": "5785de43e4b0ebec4cfb74e5"}, {"problem": 38, "code": "(comp (partial reduce #(if (> %1 %2) %1 %2)) list)", "user": "56327168e4b0bfe05bf117a5"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %2 %1) %2 %1) x))", "user": "566e3af2e4b0a866af6896d5"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5787ce76e4b0ebec4cfb750e"}, {"problem": 38, "code": "(fn my-max\n  ([x] x)\n  ([x y]\n   (if (> x y) x y))\n  ([x y & more]\n   (apply my-max (my-max x y) more)))", "user": "577b4440e4b0d3393e5deb0f"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "577a0dc3e4b0979f8965167b"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "56fc9a2de4b08d47c977819b"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "5786e182e4b0ebec4cfb7500"}, {"problem": 38, "code": "(fn [& input] (loop [in input out 0]\n  (if (empty? in)\n    out\n    (recur (rest in)\n           (if (> (first in) out) (first in) out)\n    )\n  )\n))", "user": "5784ec65e4b0ebec4cfb74d1"}, {"problem": 38, "code": "#(reduce (fn [a v] (if (> a v) a v)) %&)", "user": "577832f4e4b0979f8965165b"}, {"problem": 38, "code": "(fn [& args] \n  (reduce (fn [x y] \n            (if (> x y) x\n                y)) args))", "user": "5786c182e4b0ebec4cfb74fd"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "578d230fe4b0ebec4cfb7564"}, {"problem": 38, "code": "(fn my-max\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] (reduce my-max (my-max x y) more)))", "user": "566b57e9e4b0a866af6896ad"}, {"problem": 38, "code": "(fn [& a] (last (sort a)))", "user": "577fa91ee4b0d36ec5835e6a"}, {"problem": 38, "code": "(fn [a b & v]\n  (let [[n & r] v]\n   (cond\n     (nil? b) a\n     (> a b) (recur a n r)\n     :d (recur b n r)\n     )))", "user": "577ab41fe4b0d3393e5deb05"}, {"problem": 38, "code": "#(loop [possible-vals %& m 0]\n   (if (empty? possible-vals)\n     m\n     (if (> (first possible-vals) m)\n       (recur (rest possible-vals) (first possible-vals))\n       (recur (rest possible-vals) m))))", "user": "5783cd26e4b0ebec4cfb74be"}, {"problem": 38, "code": "(fn [& r] (reduce (fn [m e] (if (> e m) e m)) r))", "user": "577f635be4b0d36ec5835e64"}, {"problem": 38, "code": "(fn [& rest] (reduce (fn [x y] (if (> x y) x y)) rest))", "user": "578b140be4b0ebec4cfb7545"}, {"problem": 38, "code": "(fn  [x & xs]\n  (reduce (fn [x y] (if (pos? (.compareTo y x)) y x)) x xs))", "user": "5785de4ce4b0ebec4cfb74e6"}, {"problem": 38, "code": "(fn f[& x] (last (sort (first (list x)))))", "user": "5789d6dee4b0ebec4cfb7532"}, {"problem": 38, "code": "(fn [f & s]\n  (reduce \n   (fn [c e] (if (< c e)\n               e\n               c))\n   0\n   (cons f s)))", "user": "578cf84ce4b0ebec4cfb7562"}, {"problem": 38, "code": "(fn  f [& rest#]\n  (reduce #(if (> %1 %2) %1 %2) rest#) )", "user": "56ae749fe4b03c432f18735f"}, {"problem": 38, "code": "(fn [& args] (first (sort > args)))", "user": "57908d94e4b0ebec4cfb75ac"}, {"problem": 38, "code": "(fn [& x] (reduce #(if(> %2 %1) %2 %1) x))", "user": "569fc70ee4b0542e1f8d1499"}, {"problem": 38, "code": "(fn [& ns]\n  (reduce #(if (> %1 %2) %1 %2)\n          ns))", "user": "5791d259e4b0ebec4cfb75c0"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5790b3d0e4b0ebec4cfb75ad"}, {"problem": 38, "code": "(fn [& l]\n   (last (sort l)))", "user": "55a3d7c7e4b0acc240e3153d"}, {"problem": 38, "code": "(fn [& lst]\n  (reduce (fn [a b] (if (> a b) a b)) lst))", "user": "55ede35ce4b0121d4835fde1"}, {"problem": 38, "code": "#(first (sort > %&))", "user": "57934c67e4b0e215f87e8456"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "578fc072e4b0ebec4cfb759a"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "5790e62ae4b0ebec4cfb75b0"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "user": "578e2829e4b0ebec4cfb757d"}, {"problem": 38, "code": "(fn maximum-value [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "551bdefde4b07993ea3788d7"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5795f1f1e4b0e215f87e8490"}, {"problem": 38, "code": "#(reduce (fn [a,b] (if (< a b) b a)) %&)", "user": "579601c8e4b0e215f87e8492"}, {"problem": 38, "code": "(fn [& args] \n  (reduce \n   (fn [x y] (if (< y x) x y))\n   args))", "user": "50d5c19ce4b0159555a1fc61"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "57839ae9e4b0ebec4cfb74b8"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "576d398be4b0979f8965155d"}, {"problem": 38, "code": "(fn f [& s]\n   (reduce\n    (fn [acc s2] (if (> s2 acc) s2 acc))\n    (first s)\n    (rest s)))", "user": "5790f9d7e4b0ebec4cfb75b4"}, {"problem": 38, "code": "(fn max'\n ([x y] (if (> x y) x y))\n ([x y & etc] (reduce max' (max' x y) etc)))", "user": "57915ba4e4b0ebec4cfb75ba"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce #(if (> %1 %2) %1 %2) 0 nums))", "user": "57958dace4b0e215f87e8484"}, {"problem": 38, "code": ";(fn [&amp;amp; a] (- 0 (apply min (map (partial - 0) a))))\n\n(comp last sort list)", "user": "5798205ce4b039eba2ecb10e"}, {"problem": 38, "code": "(fn [& c] (last (sort c)))", "user": "55625e32e4b0c656e3ff17d8"}, {"problem": 38, "code": "(fn max-value\n  [& args]\n  (reduce (fn [acc v]\n            (if (> acc v) acc v))\n          0 args))", "user": "5777c3d6e4b0979f8965164f"}, {"problem": 38, "code": "(fn f [& args] (reduce #(if (< %1 %2) (identity %2) (identity %1)) args))", "user": "578e535de4b0ebec4cfb7580"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "5794ced6e4b0e215f87e8472"}, {"problem": 38, "code": "(fn\n  [& col]\n  (loop [max_e (first col)\n         tail (rest col)]\n         (if (empty? tail)\n          max_e\n          (if (> (first tail) max_e)\n            (recur (first tail) (rest tail))\n            (recur max_e (rest tail))))))", "user": "57972c9ee4b039eba2ecb0f2"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5797d4bae4b039eba2ecb107"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (< a b) b a)) args))", "user": "5672925fe4b05957ce8c6114"}, {"problem": 38, "code": ";(fn [&amp;amp; a] (- 0 (apply min (map (partial - 0) a))))\n\n(comp last sort list)", "user": "57982bace4b039eba2ecb10f"}, {"problem": 38, "code": "(fn [& params]\n(if (not (empty? params))\n    (do\n      (let [r (rest params) f (first params) s (first r)]\n        (if (empty? r)\n          f\n          (if (> f s)\n            (recur (conj (rest r) f))\n            (recur r)))))))", "user": "5006474ce4b0678c553fc481"}, {"problem": 38, "code": "(comp last sort list)", "user": "57853bd9e4b0ebec4cfb74d6"}, {"problem": 38, "code": "#((comp last sort) %&)", "user": "57986b76e4b039eba2ecb116"}, {"problem": 38, "code": "(fn [& lst] (reduce #(if (> %1 %2) %1 %2) lst))", "user": "56f09bf4e4b04a395b9a047f"}, {"problem": 38, "code": "(fn [& x0] (loop [x x0 m 0] (if (= x '()) m (recur (rest x) (if (> (first x) m) (first x) m)))))", "user": "5799ff45e4b05b1deef9add1"}, {"problem": 38, "code": "(fn [& coll] \n  (reduce #(if (> %1 %2)\n             %1\n             %2) \n  coll))", "user": "516064e5e4b009fba0926e26"}, {"problem": 38, "code": "(fn max-value [x & xs]\n  (reduce (fn [x y] (if (pos? (.compareTo y x)) y x)) x xs))", "user": "57996955e4b05b1deef9adc0"}, {"problem": 38, "code": "#(first (sort > %&))", "user": "579c8ad1e4b05b1deef9ae0c"}, {"problem": 38, "code": "(fn[x & xs] (reduce #(if (> %1 %2) %1 %2) x xs))", "user": "579bd58de4b05b1deef9adfd"}, {"problem": 38, "code": "(fn [x & y] (reduce #(if (> %1 %2) %1 %2) x y))", "user": "57949eb0e4b0e215f87e846f"}, {"problem": 38, "code": "(fn bla2 [ & args]\n(loop [x args res nil] \n  (if (empty? x)\n      res     \n      (let [e (first x) r (rest x)]\n           (if (nil? res)\n             (recur r e)\n             (if (> res e)\n               (recur r res)\n               (recur r e)))))))", "user": "4f035fbe535dcb61093f6a92"}, {"problem": 38, "code": "(fn [& numlist]\n  (reduce #(if (> %1 %2)\n             %1\n             %2) numlist))", "user": "5796e0afe4b039eba2ecb0f0"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (< %1 %2) %2 %1) x))", "user": "579e75fbe4b05b1deef9ae29"}, {"problem": 38, "code": "(fn [& args]\n  (reduce \n   #(if (< %1 %2) %2 %1)\n   (first args)\n   args))", "user": "579e15a6e4b05b1deef9ae20"}, {"problem": 38, "code": "#(->> %& sort last)", "user": "57717915e4b0979f896515b3"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [acc x] (if (> x acc) x acc)) args))", "user": "5799b260e4b05b1deef9adc8"}, {"problem": 38, "code": "#(first (sort > %&))", "user": "579f4812e4b05302be0b72fb"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "user": "57873017e4b0ebec4cfb7503"}, {"problem": 38, "code": "(fn [& vs] (reduce #(if (> %2 %) %2 %) vs))", "user": "55afba88e4b002ce9d5cbc17"}, {"problem": 38, "code": "(fn mmax\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n   (reduce mmax (mmax x y) more)))", "user": "57995ac1e4b05b1deef9adbf"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "4f2d90ece4b0d6649770a05f"}, {"problem": 38, "code": "(fn [x & y]\n  (loop [vmax x\n         lst y]\n    (if (empty? lst)\n      vmax\n      (recur\n       (if (> x (first y)) \n         x\n         (first y))\n       (rest lst)))))", "user": "566e87cfe4b0a866af6896dc"}, {"problem": 38, "code": "(fn [x & more] (loop [maxi x \n                      next-nums more]\n              (if (nil? next-nums)\n                maxi\n                (recur (if (< maxi (first next-nums)) (first next-nums) maxi ) (next next-nums))\n                )))", "user": "560152dee4b04bb52996e186"}, {"problem": 38, "code": "#(reduce (fn f[m v] (if (> m v) m v)) %&)", "user": "57783873e4b0979f8965165c"}, {"problem": 38, "code": "(fn [& coll] \n  (reduce \n   (fn [a b] (if (> a b) a b)) \n   coll))", "user": "57a178ade4b0c3d858beb8ec"}, {"problem": 38, "code": "(fn [ & s] (reduce (fn [x y] (if (> x y) x y)) s))", "user": "57a0c84fe4b0c3d858beb8d8"}, {"problem": 38, "code": "#(-> (apply conj [] %&) (sort) (last))", "user": "57509096e4b02ea114799277"}, {"problem": 38, "code": "(fn [& arg] \n  (reduce #(if (> %1 %2) %1 %2) arg)\n  )", "user": "57a13745e4b0c3d858beb8e3"}, {"problem": 38, "code": "(fn [x & xs] (loop [s xs v x] (if (empty? s) v (recur (rest s) (if (> (first s) v) (first s) v)))))", "user": "57a22c85e4b0c3d858beb8f6"}, {"problem": 38, "code": "(fn [& args]\n   (loop [coll args\n          big nil]\n     (if (empty? coll)\n       big\n       (recur (rest coll)\n              (if (or (nil? big)\n                      (> (first coll) big))\n                (first coll)\n                big)))))", "user": "57a310b4e4b0c3d858beb90c"}, {"problem": 38, "code": ";(\n(fn [& numbers]\n\t(loop [curr (first numbers) candidates numbers]\n    \t  (if (empty? candidates)\n            curr\n            (if (> (first candidates) curr)\n            \t  (recur (first candidates) (rest candidates))\n              \t  (recur curr (rest candidates))\n            )\n          )\n    )\n)\n;1 8 3 4)", "user": "579be21fe4b05b1deef9adff"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "579b16f7e4b05b1deef9adec"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %2 %1) %2 %1) 0 args))", "user": "579c7db7e4b05b1deef9ae0a"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "577bf999e4b0d3393e5deb2c"}, {"problem": 38, "code": "(fn [& args]\n  (if (= 1 (count args)) \n    (first args)\n    (let [[x y & more] args\n          greater (if (> x y) x y)]\n      (if more (recur (conj more greater)) greater))))", "user": "4e6ffaa3535d5021c1a8962e"}, {"problem": 38, "code": "(fn my-max [& x]\n  (last (sort (lazy-seq x))\n))", "user": "579d1567e4b05b1deef9ae12"}, {"problem": 38, "code": "(fn [& xs] (last (sort xs)))", "user": "57a4bb65e4b0a966079561eb"}, {"problem": 38, "code": "(fn [& a]\n  (reduce #(if (> %2 %1) %2 %1) a))", "user": "57a4f5cae4b0a966079561f0"}, {"problem": 38, "code": "(fn [& args] (reduce (fn ([f s] (if (> f s) f s)) ([f] f)) args))", "user": "579c35fee4b05b1deef9ae04"}, {"problem": 38, "code": "#(reduce (fn [acc el] (if (> el acc) el acc)) %&)", "user": "56bdd003e4b0f26550335976"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> % %2) % %2) args) )", "user": "571edeeae4b0145328a7629b"}, {"problem": 38, "code": "(fn [& num] (reduce (fn get-max [x y] (\n                                       if(< x y)\n                                       y\n                                       x)) num))", "user": "5782ce69e4b0d36ec5835e9a"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce #(if (> %1 %2) %1 %2) nums))", "user": "57a2bb9be4b0c3d858beb905"}, {"problem": 38, "code": "(fn [& rest] (last (sort rest)))", "user": "57a774e4e4b0a96607956213"}, {"problem": 38, "code": "(fn [& coll] (last (sort coll)))", "user": "579d9601e4b05b1deef9ae18"}, {"problem": 38, "code": "(fn foo [& args]\n  (let [f (first args)]\n    (if (= (count args) 1)\n      f\n      (let [r (apply foo (rest args))]\n        (if (> f r)\n          f\n          r)))))", "user": "57a7a437e4b0a96607956216"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "57a1ef58e4b0c3d858beb8f3"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "57a14414e4b0c3d858beb8e4"}, {"problem": 38, "code": "(fn [& stuff] (last (sort stuff)))", "user": "57a0f256e4b0c3d858beb8dd"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "52cbe5dfe4b07d0d72b27352"}, {"problem": 38, "code": "(fn [& args] (let [sorted (sort-by - args)]\n                  (first sorted)))", "user": "5441539ae4b032a45b86936d"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5783c505e4b0ebec4cfb74bc"}, {"problem": 38, "code": "#(last(sort %&))", "user": "53bcf632e4b0d9a98559a6c4"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57a88e24e4b0a9660795621f"}, {"problem": 38, "code": "(\nfn m [a & r] (if (empty? r) a \n\t(if (> a (apply m r)) a (apply m r))\n)\n)", "user": "57a5bdc4e4b0a966079561fd"}, {"problem": 38, "code": "(fn _ [f & args] (reduce\r\n   #(if (> %1 %2)\r\n      %1\r\n      %2) f args))", "user": "57a9b2dbe4b0a96607956233"}, {"problem": 38, "code": "(fn [& lst]\n  (loop [x lst acc 0]\n    (cond\n      (empty? x) acc\n      (> (first x) acc) (recur (rest x) (first x))\n      :else (recur (rest x) acc))))", "user": "57a7f7d8e4b0a96607956218"}, {"problem": 38, "code": "(fn [& v]\n    (loop [col  v\n           res  (first v) ]\n      (if (empty? col)\n        res\n        (let [ nr   (if (> res (first col)) res (first col))]\n          (recur (rest col) nr)))))", "user": "57aa290de4b0b8559636fc65"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %2 %1)\n             %2\n             %1)\n          (apply list args)))", "user": "57aa4775e4b0b8559636fc6b"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce (fn [a b] (if (> a b) a b)) nums)\n  )", "user": "50f89404e4b0aafb827eb204"}, {"problem": 38, "code": "(fn [& args] (reduce\n              (fn [n i]\n                (if (> i n)\n                  i n))\n              (first args) args))", "user": "57a9e274e4b0b8559636fc5d"}, {"problem": 38, "code": "(fn [& coll]\n  (reduce #(if (>= %1 %2)\n              %1\n              %2)\n          coll))", "user": "579fa28fe4b0264b925669fb"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57a0f7cfe4b0c3d858beb8de"}, {"problem": 38, "code": "(fn [& vs]\n  (reduce\n   (fn [a b] (->> [a b] sort last))\n   vs))", "user": "57acb156e4b0b8559636fc8d"}, {"problem": 38, "code": "(fn [& more] (-> more sort last))", "user": "55da18d5e4b0e31453f64ad1"}, {"problem": 38, "code": "(comp last sort list)", "user": "57ac2d6be4b0b8559636fc83"}, {"problem": 38, "code": "(fn f [& xs] (last (sort xs)))", "user": "57adbe7ee4b0b8559636fca0"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "57aa4752e4b0b8559636fc6a"}, {"problem": 38, "code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) s))", "user": "5788f357e4b0ebec4cfb7527"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [x y] (if (> x y) x y)) xs))", "user": "57ad7ad6e4b0b8559636fc9d"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (cond (> a b) a :else b)) args))", "user": "548b7db8e4b0e286459a11fd"}, {"problem": 38, "code": "(fn [& rest] (reduce (fn [x y] (if (> x y) x y)) rest))", "user": "5075e374e4b09049dea827a5"}, {"problem": 38, "code": "#(reduce (fn [x y] (if (> x y) x y)) %&)", "user": "578f5122e4b0ebec4cfb7592"}, {"problem": 38, "code": "(fn [& nums] (last (sort nums)))", "user": "57af41bce4b0fbc9809a2731"}, {"problem": 38, "code": "#(last (sort %&))", "user": "55fde52ce4b00f4cabc5764c"}, {"problem": 38, "code": "(fn [& s]\n  (reduce (fn [sofar v] (if (or (not sofar) (> v sofar)) v sofar)) s))", "user": "57afd36de4b0fbc9809a273c"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "57addbcce4b0b8559636fca3"}, {"problem": 38, "code": "(fn [& li] (reduce #(if (> %1 %2) %1 %2) li))", "user": "57ac7710e4b0b8559636fc88"}, {"problem": 38, "code": "#(->> %& sort reverse first)", "user": "56bfd8ade4b060a8e693e3a2"}, {"problem": 38, "code": "(fn [& more]  \n  (loop [list more x (first list)]\n    (if (empty? list)\n      x\n      (recur (drop 1 list) (if (> (first list) x) (first list) x))\n      \n      \n      ))\n   )", "user": "57aa103be4b0b8559636fc64"}, {"problem": 38, "code": "(fn [x & xs] (reduce (fn [x y] (if (> x y) x y )) x xs ) )", "user": "57af249fe4b0fbc9809a272b"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57a1478ae4b0c3d858beb8e5"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57ab41dde4b0b8559636fc79"}, {"problem": 38, "code": "#(->> (sort %&)\n      (last))", "user": "579ea15ee4b05b1deef9ae2a"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57b13adae4b0fbc9809a2750"}, {"problem": 38, "code": "(fn mak [& args] (reduce #(if (> % %2) % %2) args))", "user": "57acbe5fe4b0b8559636fc8e"}, {"problem": 38, "code": "#(last(sort %&))", "user": "57a10070e4b0c3d858beb8e0"}, {"problem": 38, "code": "(fn [& x] apply (last (sort x)))", "user": "57a9b00be4b0a96607956232"}, {"problem": 38, "code": "(fn\n  [& x]\n  (loop [coll (rest x) cur (first x)]\n    (cond (empty? coll) cur\n          :else (if (> (first coll) cur)\n                  (recur (rest coll) (first coll))\n                  (recur (rest coll) cur)))))", "user": "57acee37e4b0b8559636fc94"}, {"problem": 38, "code": "(fn [& xs] (-> (vec xs) sort reverse first))", "user": "5655d811e4b0f9d632dd849a"}, {"problem": 38, "code": "(fn [& l] (- (apply min (map - l))))", "user": "57b34512e4b0fbc9809a2777"}, {"problem": 38, "code": "(fn[f & r](reduce (fn[a b](if (> a b) a b)) f r))", "user": "57b3efb1e4b0fbc9809a278a"}, {"problem": 38, "code": "(fn max-val [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) (cons x xs)))", "user": "57b4779de4b0fbc9809a279a"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "54a0f409e4b09f271ff37c48"}, {"problem": 38, "code": "(fn[& args] (reduce #(if (> %1 %2) %1 %2) 0 args))", "user": "57b1b8c8e4b0fbc9809a2756"}, {"problem": 38, "code": "(fn [& rest] (last (sort rest)))", "user": "56326e03e4b0bfe05bf117a4"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57a9db97e4b0b8559636fc5b"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [first next]\n            (if (> first next)\n              first \n              next)) \n          args))", "user": "57b63e19e4b0fbc9809a27b9"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "57b55290e4b0fbc9809a27a9"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce (fn [a b]\n              (if (> a b)\n                a   \n                b   \n                )   \n              ) nums)\n  )", "user": "57b56cf1e4b0fbc9809a27ac"}, {"problem": 38, "code": "(fn [& x] (reduce (fn [x y] (if (> x y) x y)) x))", "user": "57b6cc7ce4b0fbc9809a27c4"}, {"problem": 38, "code": "(fn[& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "57b59d77e4b0fbc9809a27ae"}, {"problem": 38, "code": "#(reduce (fn [m n]\n            (if (> m n)\n              m;(println n)\n\n              n;(println m)\n              )\n            )\n          0\n          (seq %&)\n          )", "user": "57addf3ae4b0b8559636fca4"}, {"problem": 38, "code": "(fn [& arg]\n  (reduce (fn [x y] \n            (if (> y x)\n              y\n              x)) arg))", "user": "5793931ee4b0e215f87e845c"}, {"problem": 38, "code": "(fn [& x]\n  (loop [mx nil\n         [a & rst] x]\n    (if (nil? a)\n      mx\n   \t  (if (or (nil? mx) (> a mx))\n        (recur a rst)\n        (recur mx rst)))))", "user": "57b5dc52e4b0fbc9809a27b3"}, {"problem": 38, "code": "(fn [ & args] (last (sort args)))", "user": "57a2328ae4b0c3d858beb8f8"}, {"problem": 38, "code": "(fn foo [& x] (if (= (count x) 1) (first x) (let [m (apply foo (rest x)) f (first x)] (if (> m f) m f) )))", "user": "57b8b008e4b0fbc9809a27e6"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57b88091e4b0fbc9809a27e1"}, {"problem": 38, "code": "(fn maxx [& ell]\n  (reduce #( if (> %1 %2) %1 %2 ) ell))\n;(fn maxx [& ell]\n;  (loop [remaining (rest ell), result (first ell)]\n;    (if (empty? remaining)\n;      result\n;      (recur (rest remaining)\n;             (if (> (first remaining) result)\n;               (first remaining)\n;               result)))))", "user": "57b99d48e4b0fbc9809a27f2"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "57b3b14ee4b0fbc9809a2787"}, {"problem": 38, "code": "(fn ex [& args] (reduce #(if (< %2 %1) %1 %2) args))", "user": "57b3046de4b0fbc9809a276d"}, {"problem": 38, "code": "(fn [& rest ](last(sort rest)))", "user": "57b8f784e4b0fbc9809a27ea"}, {"problem": 38, "code": "(fn[& x] (reduce #(if (> %2 %1) %2 %1) x))", "user": "57b9fc74e4b0fbc9809a27fb"}, {"problem": 38, "code": "(fn mmax\n  [& nums]\n  (reduce (fn [acc m]\n            (if (< acc m)\n              m\n              acc))\n          (first nums)\n          nums))", "user": "559d7e9ce4b0ec2b359424de"}, {"problem": 38, "code": "(fn [n & more]\n  (reduce (fn [r i] (if (>= r i) r i)) n more))", "user": "57b6edf6e4b0fbc9809a27c8"}, {"problem": 38, "code": "(fn [a & x]\n      (loop [l x n a]\n        (if (nil? l)\n          n\n          (recur (next l) (if (> (first l) n)\n                            (first l)\n                            n)))))", "user": "5386f784e4b06839e8705f17"}, {"problem": 38, "code": "(fn [& nums] (last (sort nums)))", "user": "57afc25be4b0fbc9809a273a"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57bc9375e4b05aa3c4741c43"}, {"problem": 38, "code": "(fn [& n] (reduce #(if (> %1 %2) %1 %2) n))", "user": "57b35a19e4b0fbc9809a277d"}, {"problem": 38, "code": "(fn [& args]\n  ((comp last sort) args))", "user": "57bbc9bde4b05aa3c4741c31"}, {"problem": 38, "code": "(fn [& args]\n  (reduce \n   (fn [cmax el] \n     (if (>= cmax el) cmax el)) \n   args))", "user": "57a6ad79e4b0a9660795620b"}, {"problem": 38, "code": "(fn [& args] (loop [maxNum (first args) i 1] (cond (= i (count args)) maxNum (> (nth args i) maxNum) (recur (nth args i) (inc i))\n                                                  :else (recur maxNum (inc i)))))", "user": "573c813be4b0cd1946bd10c5"}, {"problem": 38, "code": "(fn [& r] (last (sort r)))", "user": "56684356e4b04acd4f672de4"}, {"problem": 38, "code": "(fn [& arg] (reduce (fn [a b] (if (> a b) a b)) arg))", "user": "566ff0a1e4b0a866af6896ec"}, {"problem": 38, "code": "(fn mx[a & b]\n  (reduce #(if (> %1 %2) %1 %2) a b))", "user": "57bd960fe4b05aa3c4741c52"}, {"problem": 38, "code": "(fn [& args] ( loop [my-max 0  lres args ]  (if (empty? lres) my-max  (recur (if (> my-max (first lres)) my-max (first lres)) (rest lres) ))   ))", "user": "5644611be4b0284900eef5f1"}, {"problem": 38, "code": "(fn [& args]\n  (reduce \n   (fn [m n]\n      (if (> m n) m n))\n   args))", "user": "57be6dcfe4b05aa3c4741c6a"}, {"problem": 38, "code": "(fn max-of-list [& args]\n  (reduce (fn [x y] (if (> x y) x y)) args)\n  )", "user": "57b9d21fe4b0fbc9809a27f7"}, {"problem": 38, "code": "(fn [& args]\n  (reduce\n   (fn [val coll]\n     (if (>= val coll)\n       val\n       coll))\n   0\n   args))", "user": "57bfffc7e4b05aa3c4741c8a"}, {"problem": 38, "code": "(fn kek\n  [& args]\n  (first\n    (reverse\n      (sort args))))", "user": "5789ebf8e4b0ebec4cfb7534"}, {"problem": 38, "code": "(fn my-max [x & xs] (reduce (fn [x y] (if (> x y) x y)) x xs))", "user": "571107b3e4b09c608db7043f"}, {"problem": 38, "code": "(fn [& args]\n    (reduce #(if (> %1 %2)\n                %1\n                %2) args))", "user": "57bf304de4b05aa3c4741c75"}, {"problem": 38, "code": "(fn test [& more]\n  (reduce #(if (> %1 %2) %1 %2)\n          more))", "user": "579332c2e4b0e215f87e8452"}, {"problem": 38, "code": "(fn [& s] \n\t\t(last\n        (sort s)))", "user": "5223daaee4b01819a2de42b8"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [my-max n] (if(> n my-max) n my-max)) -1 args))", "user": "57c0917be4b05aa3c4741c95"}, {"problem": 38, "code": "(comp last sort list)\n;;(comp (partial reduce #(if (> % %2) % %2)) list)\n\n;;#(- (apply min (map - %&)))\n\n;;#(reduce (fn [x y] (if (< x y) y x)) %&)\n;;(fn [& xs] (reduce #(if (> % %2) % %2) xs))", "user": "57ba55c1e4b0fbc9809a2801"}, {"problem": 38, "code": "(fn my-max[& lst]\n  (last (sort lst)))", "user": "578f8a0ae4b0ebec4cfb7596"}, {"problem": 38, "code": "(fn [& all] (last (sort (vec all))))\n (#(last (sort %&)) 2 3 4)", "user": "57c291d8e4b05aa3c4741cb4"}, {"problem": 38, "code": "(fn [& args] (last (sort (seq args))))", "user": "57c0393be4b05aa3c4741c90"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "57c2d0c1e4b05aa3c4741cb8"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (< %1 %2) %2 %1) xs))", "user": "56cf115de4b0ea9b8538f765"}, {"problem": 38, "code": "(fn ma \n  ([x y] (if (> x y) x y))\n  ([x y & z] (reduce ma (ma x y) z)))", "user": "57bfb321e4b05aa3c4741c83"}, {"problem": 38, "code": "(fn [& rest] (last (sort rest)))", "user": "57becaf4e4b05aa3c4741c6d"}, {"problem": 38, "code": "(fn [& args] (last (apply sorted-set args)))", "user": "57c3451fe4b05aa3c4741cbd"}, {"problem": 38, "code": "(fn [& args]\n  (loop [m (first args) coll (drop 1 args)]\n    (if (empty? coll)\n      m\n      (recur (if (> (first coll) m) (first coll) m) (drop 1 coll)))))", "user": "57c3df67e4b05aa3c4741cc5"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (< %1 %2) %2 %1) xs))", "user": "56887bcbe4b0dcc4269f406a"}, {"problem": 38, "code": "(comp first reverse sort list)", "user": "57c447d9e4b05aa3c4741ccc"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57c4ef0be4b05aa3c4741cd8"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "57b356c2e4b0fbc9809a277b"}, {"problem": 38, "code": "(fn [& s]\n  (loop [mx (first s)\n        cl s]\n   (if (empty? cl) mx  (recur (if (> (first cl) mx) (first cl) mx) (rest cl)))))", "user": "57b6555be4b0fbc9809a27bf"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce (fn [x y] (if (pos? (.compareTo y x))y x))x xs))\n;\u6b64\u5904\u7684xs\u8868\u793a\u7684\u662f\u4f20\u5165\u7684\u53c2\u6570\u4e0d\u786e\u5b9a\uff0cxs\u4ee3\u8868\u7b2c\u4e00\u4e2a\u4e4b\u5916\u7684\u5176\u4ed6\u53c2\u6570\u3002\u540e\u9762reduce \u65b9\u6cd5\u5f0f\u662f\u4e00\u4e2a\u65b9\u6cd5\uff0c\u7136\u540e\u65b9\u6cd5\u4f53\u662f\u4e00\u4e2aif\u8bed\u53e5\uff0c\u5224\u65adx y\u4e24\u4e2a\u7684\u5927\u5c0f\uff0c\u8f93\u51fa\u5927\u7684\u3002\u7136\u540e\u628ax xs\u7ed9reduce\u5f53\u505a\u4e24\u4e2a\u53c2\u6570\u3002", "user": "57c500f9e4b05aa3c4741cda"}, {"problem": 38, "code": "#(letfn [(m [x y] (if (> x y)\n  x\n  y))]\n  (reduce  m (vec %&)\n))", "user": "57b45257e4b0fbc9809a2796"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (>= %1 %2) %1 %2) args))", "user": "57af3bace4b0fbc9809a2730"}, {"problem": 38, "code": "; Sort the items and pick of the last (largest)\n\n(fn [& args] (last (sort args)))\n\n; learned about multiple inputs here.. cool", "user": "56092852e4b0053d1b86c7d9"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "57395f32e4b0cd1946bd1070"}, {"problem": 38, "code": "(fn [& xs] \n  (->> xs \n       (sort)\n       (last)\n       )\n  )", "user": "57bb60dce4b05aa3c4741c2a"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [n1 n2] (if (> n1 n2) n1 n2)) (apply list args)))", "user": "57c7cef5e4b05aa3c4741d0d"}, {"problem": 38, "code": "(fn  [& args]  \n            ( reduce \n              (fn  [a x] \n                (if  (> a x) a x)  )\n                args)\n            )", "user": "57a8eba2e4b0a96607956225"}, {"problem": 38, "code": "(fn[& args] (reduce #(if (< %1 %2) %2 %1) args))", "user": "57c7e7d9e4b05aa3c4741d0f"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57c70189e4b05aa3c4741cfb"}, {"problem": 38, "code": "(fn [x & r]\n  (if (empty? r)\n    x\n    (if (> x (first r))\n      (recur x (rest r))\n      (recur (first r) (rest r)))))", "user": "57c85520e4b05aa3c4741d1a"}, {"problem": 38, "code": "(fn [x & args]\n (if (empty? args)\n   x\n   (if (< (first args) x)\n     (recur x (rest args))\n     (recur (first args) (rest args)))))", "user": "57c7258ee4b05aa3c4741cfe"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57b3027fe4b0fbc9809a276c"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57a99d3fe4b0a96607956231"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "57b65c9be4b0fbc9809a27c0"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "55e0a122e4b050e68259b40f"}, {"problem": 38, "code": "(fn [ & b]\n  (loop [vals b mx 0] (if (empty? vals) \n                          mx \n                          \n                          (recur (next vals) (if (> (first vals) mx)\n                                                 (first vals)\n                                                 mx )))))", "user": "57af74aee4b0fbc9809a2736"}, {"problem": 38, "code": "(fn maxx \n  ([x y] (if (> x y) x y))\n  ([x y & more] (reduce maxx (maxx x y) more)))", "user": "57c92bdbe4b05aa3c4741d27"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> % %2) % %2) x))", "user": "57c796b4e4b05aa3c4741d08"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "57c94c54e4b05aa3c4741d2c"}, {"problem": 38, "code": "(fn [& s] (reduce (fn [x y] (if (> x y) x y)) s))", "user": "558e160ce4b027778923764c"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "user": "57ca338de4b05aa3c4741d37"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57c6bca1e4b05aa3c4741cf8"}, {"problem": 38, "code": "(fn [& more] (last (sort more)))", "user": "57b5ed94e4b0fbc9809a27b4"}, {"problem": 38, "code": "#(last (sort %&))", "user": "572fdecae4b0cd1946bd0f9e"}, {"problem": 38, "code": "(fn [& params]\n  (reduce #(if (> % %2) % %2) 0 params))", "user": "57c2d66ae4b05aa3c4741cb9"}, {"problem": 38, "code": "(fn [& vs] (last (sort vs)))", "user": "515310b4e4b0d6806ecd26fb"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "57c99a45e4b05aa3c4741d31"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "57c7a8b5e4b05aa3c4741d09"}, {"problem": 38, "code": "(fn [h & t] (reduce #(if (> %1 %2) %1 %2) 0 (cons h t)))", "user": "57c58ad6e4b05aa3c4741ce7"}, {"problem": 38, "code": "(fn [& args]\n  (loop [[arg & remaining] args\n         result arg]\n    (if (empty? remaining)\n      result\n      (recur remaining\n             (if (> arg result)\n               arg\n               result)))))", "user": "571077e8e4b09c608db70434"}, {"problem": 38, "code": "(fn my-max\n ([x]x)\n ([x & z]\n     (let\n      [coll (flatten z)\n       y (first coll)]\n      (if (> (count coll) 0)\n        (if (> x y)\n          (my-max x (rest coll))\n          (my-max y (rest coll)))\n        x))))", "user": "574eb3b1e4b02ea114799247"}, {"problem": 38, "code": "(fn [h & r] \n  (reduce \n   #(if (< %1 %2) %2 %1)\n   h r))", "user": "52c2106fe4b07a9af5792374"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce #(if (>= %1 %2)\n             %1 %2) nums)\n  )", "user": "57cd7498e4b0c746388ab897"}, {"problem": 38, "code": "(fn max-val [& args]\n  (reduce #(if (> %1 %2) %1 %2) args)\n  )", "user": "57ca95f2e4b05aa3c4741d3b"}, {"problem": 38, "code": "(fn [ & elems] ( reduce #(cond (> %1 %2) %1 :else %2) elems ))", "user": "57ce3fede4b0c746388ab8a6"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57cefcc2e4b00451144b04f8"}, {"problem": 38, "code": "#(reduce (fn [x y] (if (> x y) x y)) (into-array %&))", "user": "57b35772e4b0fbc9809a277c"}, {"problem": 38, "code": "(fn [x & more]\n  (reduce (fn [a b] (if (> a b) a b))\n  \t\tx more))", "user": "57cef3f8e4b0c746388ab8b4"}, {"problem": 38, "code": "(fn [& all]\n  (reduce #(if (> %2 %1)\n             %2\n             %1)\n          all))", "user": "57c45e64e4b05aa3c4741ccf"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "57c94c6ee4b05aa3c4741d2d"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (>  %2 %1) %2 %1)  args))", "user": "57c6aa0be4b05aa3c4741cf7"}, {"problem": 38, "code": "(fn [& args]\n    (let [x (into [] args)]\n        (last (sort x))))", "user": "57b19fa1e4b0fbc9809a2754"}, {"problem": 38, "code": "(fn f [& args]\n  (let [[a & b] args]\n    (if b\n      (if (>= a (first b))\n        (apply f (cons a (rest b)))\n        (apply f (cons (first b) (rest b))))\n      a)))", "user": "57a0b341e4b0c3d858beb8d4"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "57aa2b97e4b0b8559636fc66"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce (fn [old cur] (if (> cur old) cur old)) 0 nums))", "user": "4e99f2e1535dbda64a6f6b6c"}, {"problem": 38, "code": "(fn my-max [& s]\n    (last (sort s)))", "user": "57985f98e4b039eba2ecb114"}, {"problem": 38, "code": "(fn [& s]\n  (reduce (fn [f n] (if (> f n) f n)) s)\n  )", "user": "559e7848e4b08a52bd4f97d4"}, {"problem": 38, "code": "(fn [& args]\n (last (sort (seq args)))\n)", "user": "57c62aece4b05aa3c4741cf1"}, {"problem": 38, "code": "(fn [v & args]\n  (loop [maxv v\n       \t [nextv & args] args]\n    (cond\n     (nil? nextv) maxv\n     (> nextv maxv) (recur nextv args)\n     :else (recur maxv args))))", "user": "57a775bbe4b0a96607956214"}, {"problem": 38, "code": "(fn [& args] (->> args (sort >) first))", "user": "57ccedaae4b0c746388ab88e"}, {"problem": 38, "code": "(fn my-max2\n  [& args]\n  (reduce (fn\n            [val1 val2]\n            (if (> val1 val2)\n              val1\n              val2)) args))", "user": "57d0cd58e4b0bd073c20235e"}, {"problem": 38, "code": "(fn my-max\n   [& elems]\n   (reduce (fn [curr-max next-elem]\n             (if (> next-elem curr-max) next-elem curr-max))\n           elems))", "user": "552d487ee4b076ab5578f7e4"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "57d13683e4b0bd073c202368"}, {"problem": 38, "code": "(fn [& vals] (last (sort vals)))", "user": "57d418b4e4b0bd073c20239a"}, {"problem": 38, "code": "(fn maximun [& args] \n  (let [f (fn anon [m y] ; integer collection\n           (if (= y []) m\n             (let [h (first y)\n                   t (rest y)]\n               (if (> h m) (anon h t) (anon m t)))))]\n    (f 0 args)))", "user": "57d1d6c8e4b0bd073c202370"}, {"problem": 38, "code": "#(loop [f %1 r %&]\n   (if (empty? r)\n     f\n     (if (> f (first r))\n             (recur f (rest r))\n             (recur (first r) (rest r)))))", "user": "57d21102e4b0bd073c202375"}, {"problem": 38, "code": "(comp last sort list)", "user": "57c176abe4b05aa3c4741ca2"}, {"problem": 38, "code": "(fn my-max [head & tail] (if (nil? tail) head (let [tailmax (apply my-max tail)] (if (> head tailmax) head tailmax))))", "user": "57d0fce5e4b0bd073c202364"}, {"problem": 38, "code": "(fn [& args] (last (sort  args)))", "user": "57d588a5e4b0bd073c2023b6"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57c8d89ee4b05aa3c4741d23"}, {"problem": 38, "code": "#(first (sort > %&))", "user": "57d4f225e4b0bd073c2023a6"}, {"problem": 38, "code": "#(first(sort >(seq %&)))", "user": "57c8208ce4b05aa3c4741d16"}, {"problem": 38, "code": "(fn [& nums] (reduce #(if (> %1 %2) %1 %2) nums))", "user": "57cc5a79e4b0c746388ab87d"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "570c9851e4b0b0fb43fd06cc"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57d6b9c4e4b0bd073c2023cb"}, {"problem": 38, "code": "(fn [& more]\n  (reduce \n   #(if (> %1 %2) %1 %2)\n   more))", "user": "57d7ca32e4b0bd073c2023df"}, {"problem": 38, "code": "(fn [& items] (first (sort > items)))", "user": "56020b3fe4b04bb52996e19b"}, {"problem": 38, "code": "(fn [& p] (last (sort p)))", "user": "57d1a0e6e4b0bd073c20236d"}, {"problem": 38, "code": "(fn[& args]\n  (last (sort args)))", "user": "5781ac8ee4b0d36ec5835e88"}, {"problem": 38, "code": "(fn [& s]\n  (loop [m 0 r s]\n    (if (empty? r)\n      m\n      (let [x (first r)]\n        (recur (if (> x m) x m) (rest r))\n        )\n)\n)\n)", "user": "57d7c894e4b0bd073c2023de"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [a b] (if (< a b) b a)) args))", "user": "57665f00e4b0a07e8fc180a5"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57d9682de4b0bd073c2023fd"}, {"problem": 38, "code": "(fn [& lst]\n  (last (sort lst)))", "user": "573d8658e4b05c31a32c0814"}, {"problem": 38, "code": "(fn [& p] \n  (first (reverse (sort p))\n   )\n )", "user": "57d79a81e4b0bd073c2023dc"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57da5fc4e4b0bd073c20240f"}, {"problem": 38, "code": "(fn [& params]\n  (reduce\n    (fn [x y]\n      (if (< x y) y x))\n    params))", "user": "57dace50e4b0bd073c202416"}, {"problem": 38, "code": "(fn [& numbers]\n  (reduce (fn [x y] (if (> x y) x y)) (first numbers) (rest numbers)))", "user": "57d9bca1e4b0bd073c202405"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57dbcc28e4b0bd073c202429"}, {"problem": 38, "code": "(fn my-max [& xs]\n  (last (sort xs)))", "user": "57dda21be4b0bd073c202445"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "user": "57ddfb9be4b0bd073c20244e"}, {"problem": 38, "code": "(fn [& lst]\n  (loop [lst lst m 0]\n    (cond\n     (empty? lst) m\n     (> (first lst) m) (recur (rest lst) (first lst))\n     :else (recur (rest lst) m))))", "user": "57d9f603e4b0bd073c20240a"}, {"problem": 38, "code": "(fn  max-mich\n  ([arg1] arg1)\n  ([arg1 arg2]\n    (if (< arg2 arg1) arg1 arg2))\n  ([arg1 arg2 & args] (reduce max-mich (max-mich arg1 arg2) args))\n  )", "user": "5783a897e4b0ebec4cfb74b9"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57d9750be4b0bd073c2023fe"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [h t] (if (> h t) h t)) args))\n;; alternative\n;;(fn [& args] (last (sort args)))", "user": "57dfab73e4b0bd073c202468"}, {"problem": 38, "code": "(comp last sort list)", "user": "54764a8fe4b0c51c1f4d72a3"}, {"problem": 38, "code": "(fn [& x] (loop [params x, new-max 0] (if-not (seq params) new-max (recur (rest params)(if(> (first params) new-max)(first params) new-max)))))", "user": "554b8b65e4b0a04f7929958a"}, {"problem": 38, "code": "(fn [& s] \n  (reduce \n    #(if (>= %1 %2) %1 %2)\n    s\n  )\n)", "user": "57dfe173e4b0bd073c20246b"}, {"problem": 38, "code": "(fn [& args] \n  (reduce #(if (> %1 %2) %1 %2) (nth args 0) args))", "user": "5650082fe4b0284900eef6b7"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "user": "57d9cae9e4b0bd073c202409"}, {"problem": 38, "code": "(fn [& x] (nth (reverse (sort x)) 0))", "user": "57b9bfdae4b0fbc9809a27f5"}, {"problem": 38, "code": "(fn mapply [one & all]\n  (reduce #(if (> %1 %2) %1 %2) one all))", "user": "5785c1d4e4b0ebec4cfb74e1"}, {"problem": 38, "code": "(comp last sort list)", "user": "57e139f6e4b0bfb2137f5a6c"}, {"problem": 38, "code": "(fn [& the-rest]\n        (reduce (fn [a b] (if (> a b) a b)) 0 (flatten [the-rest]))\n        )", "user": "57e037b6e4b0bd073c202474"}, {"problem": 38, "code": "(fn [& numbers]\n  (loop [incumbent (first numbers) head (first numbers) others (rest numbers)]\n    (if (empty? others)\n      incumbent\n      (recur\n        (if (> head incumbent) head incumbent)\n        (first others)\n        (rest others)))))", "user": "5784ff88e4b0ebec4cfb74d4"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "57dd47f4e4b0bd073c20243e"}, {"problem": 38, "code": "(fn [& x]\n  (reduce #(if (> %1 %2) %1 %2) x))", "user": "566d71b1e4b0a866af6896ca"}, {"problem": 38, "code": "(fn [& ns] (reduce #(if (> %1 %2) %1 %2) ns))", "user": "57e0f30ae4b0bfb2137f5a66"}, {"problem": 38, "code": "; (fn [& args]\n;   (reduce (fn [x y] (if (> x y) x y))\n;           args))\n(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "57e37f90e4b0bfb2137f5a9c"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57de9169e4b0bd073c202454"}, {"problem": 38, "code": "#(last (sort %&))", "user": "56e1122fe4b03a7c14b85a20"}, {"problem": 38, "code": "(fn [& arg]\n  (reduce (fn [acc x]\n            (if (< acc x)\n              x\n              acc)) arg))", "user": "57d93437e4b0bd073c2023f9"}, {"problem": 38, "code": "(fn [& args]\n  (loop [a args v 0]\n    (if (empty? a)\n      v\n      (let [p (first a) r (rest a) nv ((fn [x y] (if (> x y) x y)) p v)]\n        (recur r nv)))))", "user": "56f8bc1de4b07572ad1a88a6"}, {"problem": 38, "code": ";; (= (__ 1 8 3 4) 8)\n;; (= (__ 30 20) 30)\n;; (= (__ 45 67 11) 67)\n\n(fn [& coll]\n  (loop [acc 0\n         coll coll]\n    (if (empty? coll)\n      acc\n      (recur (if (> acc (first coll)) acc (first coll)) (rest coll)))))", "user": "57d6c5cae4b0bd073c2023ce"}, {"problem": 38, "code": "(fn [& r] (last (sort r)))", "user": "56940617e4b0dcc4269f410b"}, {"problem": 38, "code": "(fn [& ns]\n    (reduce (fn [a b] (if (> a b) a b)) 0 ns))", "user": "56f9c7c6e4b07572ad1a88ba"}, {"problem": 38, "code": "(fn [& -nums]\n    (loop [nums -nums max-n -10]\n          (if (empty? nums)\n              max-n\n              (if (> (first nums) max-n)\n                  (recur (rest nums) (first nums))\n                  (recur (rest nums) max-n)))))", "user": "57e3f709e4b0bfb2137f5aaf"}, {"problem": 38, "code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) coll))", "user": "56ae7589e4b03c432f187360"}, {"problem": 38, "code": "(fn [& %] (last (sort %)))", "user": "57e5052ae4b0bfb2137f5ace"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "564a985be4b0284900eef65c"}, {"problem": 38, "code": "(fn maxX [& s] (reduce (fn [x y] (if (> x y) x y)) s))", "user": "57e59d2be4b0bfb2137f5ad9"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "57d35800e4b0bd073c202392"}, {"problem": 38, "code": "(fn [ & x] (last (sort x)))", "user": "57e572b5e4b0bfb2137f5ad7"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "57b39fbee4b0fbc9809a2783"}, {"problem": 38, "code": "#(reduce (fn [p c] (if (> c p) c p)) %&)", "user": "57e33f6fe4b0bfb2137f5a96"}, {"problem": 38, "code": "(fn [& l] \n  (reduce #(if (< %1 %2) %2 %1) l))", "user": "57e8dad5e4b0bfb2137f5b1b"}, {"problem": 38, "code": "(fn my-max [& xs]\n  (loop [xs xs\n         acc 0]\n    (if (seq xs)\n      (if (> (first xs) acc)\n        (recur (rest xs) (first xs))\n        (recur (rest xs) acc))\n      acc)))", "user": "5705f569e4b0b0fb43fd0677"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57e6997ee4b0bfb2137f5af0"}, {"problem": 38, "code": "(fn[& xs] (first(reduce (fn[maxval,x](if (> x (first maxval)) (cons x maxval) maxval)) '(0) xs)) )", "user": "57e3d30be4b0bfb2137f5aab"}, {"problem": 38, "code": "#(loop [[n & r] %& m n]\n   (let [m (cond (> n m) n :else m)]\n     (if (empty? r)\n       m\n       (recur r m))))", "user": "57e929c0e4b0bfb2137f5b21"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort (apply list args))))", "user": "57942207e4b0e215f87e8469"}, {"problem": 38, "code": "(fn [& s] (reduce (fn mx [a b] (if (> a b) a b)) s))", "user": "57de5f0ee4b0bd073c202450"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "57df309ee4b0bd073c20245f"}, {"problem": 38, "code": "(fn [& c]\n  (reduce (fn [x y] (if (> x y) x y)) c))", "user": "57eb10b1e4b0bfb2137f5b5b"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "user": "57c1b32be4b05aa3c4741ca4"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "56119b53e4b05f002753df81"}, {"problem": 38, "code": "(fn mysort [& args]\n  (let [x args] (first (sort > x))))", "user": "56629a7de4b0e91d5f5c5649"}, {"problem": 38, "code": "(fn [f & r] (reduce #(if (> %2 %1) %2 %1)f r))", "user": "57eb2576e4b0bfb2137f5b5c"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57ec3d29e4b0bfb2137f5b77"}, {"problem": 38, "code": "#(last(sort %&))", "user": "57ecc16fe4b0bfb2137f5b83"}, {"problem": 38, "code": "(fn [& itms] (last(sort itms)))", "user": "57eb7a97e4b0bfb2137f5b62"}, {"problem": 38, "code": "(fn [& po]\n  (\n  (fn tom [dai lst]\n    (if (empty? lst)\n      dai\n      (tom\n       (if (> (first lst) dai)\n         (first lst)\n         dai\n         )\n       (rest lst)\n       )\n      )\n       )\n   (first po) (rest po)\n   )\n  )", "user": "57e404a3e4b0bfb2137f5ab1"}, {"problem": 38, "code": "#(loop [arr %&\n            mx 0]\n       (if (empty? arr)\n         mx\n         (if (> (first arr) mx)\n           (recur (next arr) (first arr))\n           (recur (next arr) mx))))", "user": "578b9978e4b0ebec4cfb754c"}, {"problem": 38, "code": "(fn mx [& xs] (first (reverse (sort xs))))", "user": "57ed8315e4b0bfb2137f5b9a"}, {"problem": 38, "code": "(comp last sorted-set)", "user": "57ee804ee4b0bfb2137f5bbb"}, {"problem": 38, "code": "#(last (sort %&))", "user": "554ea8fbe4b00713264bd999"}, {"problem": 38, "code": "(fn [& r] (first (sort > r)))", "user": "57efb389e4b0bfb2137f5bdb"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [acc x]\n           (if (< acc x)\n             x\n             acc))\n        0\n        args))", "user": "574e84e0e4b02ea114799243"}, {"problem": 38, "code": "(fn [& s]\n  (let [aux (fn [acc s] \n              (if (empty? s) \n                acc\n                (let [f (first s)\n                      n (if (<= acc f) f acc)]\n                  (recur n (rest s)))))]\n    (aux 0 s)))", "user": "57e6f90de4b0bfb2137f5af6"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "user": "57f0f7b8e4b0bfb2137f5bfe"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57db2369e4b0bd073c20241f"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "57df2722e4b0bd073c20245e"}, {"problem": 38, "code": "(fn [& args]\n (last (sort args)))", "user": "57e79d8ee4b0bfb2137f5afe"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "57ee9ffbe4b0bfb2137f5bc2"}, {"problem": 38, "code": "(fn [& sequ] (last (sort sequ)))", "user": "57d0679ee4b0bd073c202359"}, {"problem": 38, "code": "(fn [& vars] \n  (reduce #(if (< %1 %2) %2 %1) vars)\n)", "user": "57e396cde4b0bfb2137f5a9e"}, {"problem": 38, "code": "(fn[& more](last (sort more)))", "user": "56483f45e4b0284900eef62b"}, {"problem": 38, "code": "(fn find-max [n & more] (reduce #(if (> %1 %2) %1 %2) n more))", "user": "57596ba7e4b02ea11479931a"}, {"problem": 38, "code": "(fn [& args] (reduce \n              (fn [maximum n] \n                       (if (> n maximum)\n                         n\n                         maximum)) args))", "user": "5529a42ee4b0ffed3738f94e"}, {"problem": 38, "code": "(fn [& x] (reduce (fn [res item] \n                 (if (> item res)\n                   item\n                   res)) x))", "user": "57efb417e4b0bfb2137f5bdc"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57e91413e4b0bfb2137f5b20"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> % %2) % %2) args))", "user": "57485efee4b009280f9f2b8a"}, {"problem": 38, "code": "(fn [& a]\n  (reduce #(if (> %1 %2) %1 %2) a))", "user": "57e20474e4b0bfb2137f5a82"}, {"problem": 38, "code": "(fn [f & r] \n  (reduce (fn [a b]\n            (if (> a b) a b))\n          f r))", "user": "57ed2574e4b0bfb2137f5b93"}, {"problem": 38, "code": "(fn [& r] (reduce #(if (> %1 %2) %1 %2) r))", "user": "55c66ffee4b0e31453f649c2"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce \n   (fn [acc curr](if (> curr acc) curr acc))\n   nums))", "user": "565418cde4b0f9d632dd847c"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "57f8104ce4b0d3187e900910"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [a b] (if (> a b) a b)) (apply list args))\n  )", "user": "57f81045e4b0d3187e90090f"}, {"problem": 38, "code": "(fn my-max [& lst]\n    (reduce #(if (> %2 %1) %2 %1) lst))", "user": "57f6e666e4b0d3187e9008f2"}, {"problem": 38, "code": "(fn [& x]\n  (reduce\n   #(if (> %1 %2) %1 %2)\n   x))", "user": "56a44067e4b0542e1f8d14da"}, {"problem": 38, "code": "(fn [head & tail] \n  (if (empty? tail)\n    head\n    (loop [h head [n & t] tail]\n      (if (empty? t)\n        (if (> h n) h n)\n        (if (> h n)   \n          (recur h t)\n          (recur n t))))))", "user": "57f85b36e4b0d3187e900924"}, {"problem": 38, "code": "(fn\n  [& args]\n  (reduce (fn [a b] (if (> a b)\n                      a\n                      b))\n          args))", "user": "57f7c74ee4b0d3187e900902"}, {"problem": 38, "code": "(fn[& args] (first (reverse (sort args))))", "user": "57ea79d9e4b0bfb2137f5b4f"}, {"problem": 38, "code": "(fn max-value-fn \n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([ x y & more] (reduce max-value-fn (max-value-fn x y) more)))", "user": "57f6bd5de4b0d3187e9008ee"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce #(if (> %1 %2) %1 %2) 0 nums))", "user": "566ca8d6e4b0a866af6896bf"}, {"problem": 38, "code": "(fn [& more] (\n  reduce #( if (> %1 %2) %1 %2  ) more         \n))", "user": "57ec8d1de4b0bfb2137f5b7f"}, {"problem": 38, "code": "#(reduce\n  (fn[x y](if(> x y)\n     x\n     y)) %&)", "user": "57f96e13e4b0d3187e900945"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "57f9e0bce4b0d3187e900956"}, {"problem": 38, "code": "(fn [& nums]\n  (loop [arr nums mx 0]\n    (if (empty? arr)\n      mx\n      (if (< mx (first arr))\n        (recur (rest arr) (first arr))\n        (recur (rest arr) mx))\n      )))", "user": "57f253a3e4b0511f1d294dea"}, {"problem": 38, "code": "(fn  [& lst]\n  (reduce (fn [a b] (if (> a b) a b)) lst))", "user": "57fc08d8e4b0d3187e900988"}, {"problem": 38, "code": "(fn [& more] (reduce (fn [a b] (if (> a b) a b)) more))", "user": "57fc49d1e4b0d3187e900992"}, {"problem": 38, "code": "#(last (sort %&))", "user": "53194ba3e4b08068f379ed7a"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [m v] (if (< m v) v m)) args))", "user": "57f80350e4b0d3187e90090c"}, {"problem": 38, "code": "(fn [& x]\n  (reduce (fn [a b] \n           (if (> a b)\n            a\n            b))\n          x\n          ))", "user": "57fa54c3e4b0d3187e900960"}, {"problem": 38, "code": "(fn bigg [& args] (last (sort args)))", "user": "57fc34f0e4b0d3187e90098e"}, {"problem": 38, "code": "(fn biggest\n  ([& x] (reduce #(if (> %1 %2) %1 %2) x))\n)", "user": "57fc4a63e4b0d3187e900993"}, {"problem": 38, "code": "(fn max-value\n  [& n]\n  (reduce #(if (< %1 %2) %2 %1) n))", "user": "57f8153de4b0d3187e900916"}, {"problem": 38, "code": "(comp (partial reduce (fn [acc b] (if (< acc b) b acc))) vector)", "user": "57f9011ee4b0d3187e900935"}, {"problem": 38, "code": "(fn [& lat] (reduce (fn [x y] (cond (> x y) x :else y)) lat))", "user": "57f7d381e4b0d3187e900906"}, {"problem": 38, "code": "(fn [& xs] (-> xs (sort)(last)))", "user": "57c44053e4b05aa3c4741ccb"}, {"problem": 38, "code": "(fn [& x] (reduce (fn [a b] (if (> a b) a b)) x))", "user": "57f3f2bee4b07bbd65c32b1a"}, {"problem": 38, "code": "(fn [& args]\n  (last (apply sort (list args))))", "user": "57fe68e2e4b0d3187e9009ce"}, {"problem": 38, "code": "(fn [& coll]\n  (reduce #(if (> %1 %2) %1 %2) coll))", "user": "57ed19a3e4b0bfb2137f5b8e"}, {"problem": 38, "code": "(fn maxx [& args]\n  (loop[ret 0\n        a args]\n    (if (empty? a)\n      ret\n      (recur (if (>(first a) ret )\n                (first a)\n                ret)(rest a)))))", "user": "57f814fbe4b0d3187e900911"}, {"problem": 38, "code": "(fn\n  [& items]\n  (last (sort items)))", "user": "557c647ce4b05c286339e0c3"}, {"problem": 38, "code": "(fn p38 [& args]\n  ; max element in list\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "57fe836ee4b0d3187e9009d2"}, {"problem": 38, "code": "(fn largest [& args]\n  (reduce (fn [a b]\n              (if (> a b)\n                a\n                b))\n          args))", "user": "57f8151ce4b0d3187e900912"}, {"problem": 38, "code": "(fn maximum_value\n\t[& args]\n\t(let [x (sort args)]\n\t\t(last x)))", "user": "57f81544e4b0d3187e900917"}, {"problem": 38, "code": "(fn [& n]\n   (last (sort n)))", "user": "57f81524e4b0d3187e900913"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [m x] (if (> x m) x m)) xs))", "user": "57fdd1cfe4b0d3187e9009bf"}, {"problem": 38, "code": "(fn [& x]  (last(sort(vec x))))", "user": "58006950e4b0a837a8b30c3a"}, {"problem": 38, "code": "(fn mx [& xs]\n  (let [mmx (fn ths [m mxs]\n              (let [h (first mxs) t (rest mxs)]\n              (if (empty? mxs) m (if (> h m) (ths h t) (ths m t)))))]\n    (mmx (first xs) (rest xs))))", "user": "577f9799e4b0d36ec5835e67"}, {"problem": 38, "code": "(fn maxlist\n                             [& list]\n                             (if (= 1 (count list))\n                               (first list)\n                               (do\n                                 (if (reduce #(>= %1 %2) (take-last 2 list))\n                                   (do \n                                     (apply maxlist (drop-last 1 list)))\n                                   (do\n                                     (apply maxlist (drop-last 2 (conj list (last list)))))\n                                   ))))", "user": "57fe2d6fe4b0d3187e9009c8"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "5254b45fe4b0541d1855b9a0"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (< %1 %2) %2 %1) a))", "user": "57aa053fe4b0b8559636fc61"}, {"problem": 38, "code": "(fn [& l] (reduce (fn [a b] (if (> a b) a b)) l))", "user": "5800edaae4b0a837a8b30c48"}, {"problem": 38, "code": "(fn [x & lst]\n   (let [fst (first lst)\n         max* (fn [x y] (if (< x y) y x))\n         m (max* x fst)]\n     (if (empty? (rest lst))\n       m\n       (recur m (rest lst)))))", "user": "57ee82b1e4b0bfb2137f5bbd"}, {"problem": 38, "code": "(fn [& r] (reduce  (fn [x y] (if (< x y) y x)) r))", "user": "57a60225e4b0a96607956202"}, {"problem": 38, "code": "(fn maxx\n  [& n]\n  (reduce\n    #(if (> %1 %2)\n      %1\n      %2)\n    n))", "user": "57f81534e4b0d3187e900915"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "57f52d3be4b0903ccab3dce7"}, {"problem": 38, "code": "(fn \n  [& lst]\n  (last (sort lst))\n  )", "user": "57f81532e4b0d3187e900914"}, {"problem": 38, "code": "(fn[a & more]\n  (if (nil? more)\n    a\n   (last (sort (cons a (seq more))))))", "user": "57f81549e4b0d3187e900918"}, {"problem": 38, "code": "(fn [& mas]\n  (reduce #(if (> %1 %2) %1 %2) mas))", "user": "57fedf07e4b0d3187e9009dc"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (> %1 %2) %1 %2) x xs))", "user": "57b9f35be4b0fbc9809a27f9"}, {"problem": 38, "code": "(fn mx \n  [& args]\n   (if (= (count args) 1)\n     (first args)\n     (let [cur-max (apply mx (rest args))]\n       (if (> cur-max  (first args))\n                    cur-max\n                    (first args)))\n     ))", "user": "57ffe094e4b0a837a8b30c2c"}, {"problem": 38, "code": "#(first (reverse (sort %&)))", "user": "57fa7c93e4b0d3187e900963"}, {"problem": 38, "code": "(fn\n  ([& xs]\n   (->> xs\n        (sort >)\n        (first))))", "user": "57eaf869e4b0bfb2137f5b56"}, {"problem": 38, "code": "(fn [& args]\n  (reduce\n   (fn [x y]\n     (if (> x y)\n       x\n       y))\n   args))", "user": "57fd085ce4b0d3187e9009a9"}, {"problem": 38, "code": "(fn [& n]\n  (last(sort n)))", "user": "57f81569e4b0d3187e900919"}, {"problem": 38, "code": "(fn [& x] \n  (last (sort x)))", "user": "57fd7344e4b0d3187e9009b6"}, {"problem": 38, "code": "(fn [& lst]\n  (last (sort lst)))", "user": "580570a2e4b0a837a8b30cc7"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5804250fe4b0a837a8b30ca1"}, {"problem": 38, "code": "(fn [firstVal & restVals]\n  (reduce (fn [x y] (if (>= x y) x y)) firstVal restVals)\n)", "user": "57f904c5e4b0d3187e900936"}, {"problem": 38, "code": "(fn [fi & re] (reduce (fn [m c] (if (> c m) c m)) fi re))", "user": "580558cde4b0a837a8b30cc4"}, {"problem": 38, "code": "(fn [& ks] (reduce #(if (< %1 %2) %2 %1) ks))", "user": "57c815ade4b05aa3c4741d14"}, {"problem": 38, "code": "(comp last sorted-set)", "user": "57f8ba80e4b0d3187e90092f"}, {"problem": 38, "code": "(fn mymax\n  ([a]  a)\n  ([head & tail]\n   (loop [curr head args tail]\n     (if (not (= args ()))\n       (recur (if (> curr (first args)) curr (first args)) (rest args))\n       curr))))", "user": "55ee84c0e4b0121d4835fdf0"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce (fn [x y] (if (> y x) y x )) xs))", "user": "568a351be4b0dcc4269f408a"}, {"problem": 38, "code": "#(-> (sort %&) last)", "user": "5405885ee4b0addc1aec6668"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [n m]\n            (if (> n m)\n              n\n              m))\n          args))", "user": "579816abe4b039eba2ecb10d"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> y x) y x)) args))", "user": "57b167afe4b0fbc9809a2752"}, {"problem": 38, "code": "(fn [& stuff] \n  (last (sort stuff)))", "user": "57073037e4b0b0fb43fd0689"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5801eed1e4b0a837a8b30c63"}, {"problem": 38, "code": "(fn [x & args]\n  (if (= (first args) nil)\n    x\n    (if (> x (first args))\n      (recur x (rest args))\n      (recur (first args) (rest args))\n    )\n  )\n)", "user": "58088dfde4b0a837a8b30d07"}, {"problem": 38, "code": "(fn [& args]\n    (reduce #(if (> %1 %2) %1 %2) args))", "user": "5803cd8fe4b0a837a8b30c96"}, {"problem": 38, "code": "(fn check [& x]\n   (if (= (count x) 1)\n     (do (last x))\n     (do (if (> (last x) (first x))\n           (do (apply check (rest x)))\n           (do (apply check (butlast x)))\n           ))\n   )\n )", "user": "580014d7e4b0a837a8b30c32"}, {"problem": 38, "code": "(fn mx [& seq]\n         (let [mx2 (fn mx2 [biggest seq]\n                     (if (empty? seq)\n                       biggest\n                       (if (> (first seq) biggest)\n                         (mx2 (first seq) (rest seq))\n                         (mx2 biggest (rest seq)))\n                       ))]\n           (mx2 (first seq) (rest seq))\n           ))", "user": "57fc0719e4b0d3187e900987"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "user": "580a4320e4b0a837a8b30d2f"}, {"problem": 38, "code": "(fn [& nums]\n  (letfn [(my-max [nums]\n                  (let [fst (first nums)\n                        rst (rest nums)]\n                    (if (empty? rst)\n                      fst\n                      (let [m (my-max rst)]\n                        (if (> m fst)\n                          m\n                          fst)))))]\n    (my-max nums)))", "user": "4ee673cf535d93acb0a66860"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [a b] (if (> a b) a b)) xs))", "user": "57a4fa50e4b0a966079561f1"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57b9fb56e4b0fbc9809a27fa"}, {"problem": 38, "code": "(fn [& c]\n  (reduce (fn [a b]\n            (if (> a b) a b))\n          c))", "user": "580bd81ee4b0849f6811b711"}, {"problem": 38, "code": "(fn\n\n  [& args]\n\n  (reduce \n\n    #(if (> %1 %2)\n\n        %1\n\n        %2)\n\n   args))", "user": "580a0783e4b0a837a8b30d2c"}, {"problem": 38, "code": "(fn [x & xs]\n  (loop [x x, xs xs]\n    (cond\n\t(empty? xs) x\n     \t(< x (first xs)) (recur (first xs) (rest xs))\n     \t:else (recur x (rest xs)))))", "user": "580b90cee4b0a837a8b30d4b"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce #(if (> %1 %2) %1 %2) nums))", "user": "54d893a4e4b0a52adc2e2039"}, {"problem": 38, "code": "(fn mx [& s] \n  (reduce \n   #(if (> % %2) \n      % \n      %2) \n   s))", "user": "558fb218e4b0277789237665"}, {"problem": 38, "code": "#((comp last sort) %&)", "user": "580beb40e4b0849f6811b713"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57ee432de4b0bfb2137f5bb2"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57ef793de4b0bfb2137f5bd8"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57ee46c7e4b0bfb2137f5bb3"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57ee41a6e4b0bfb2137f5baf"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "57ac6c67e4b0b8559636fc87"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "57f8cd5ae4b0d3187e900930"}, {"problem": 38, "code": "(fn [& nums] \n  (last (sort nums)))", "user": "57ee2b3ee4b0bfb2137f5bac"}, {"problem": 38, "code": "(comp last sort list)", "user": "57ee41eae4b0bfb2137f5bb0"}, {"problem": 38, "code": "(fn [& nums] (reduce (fn [x y] (if (> x y) x y)) nums))", "user": "580c8fcee4b0849f6811b721"}, {"problem": 38, "code": ";#(last (sort %&))\n(fn [& l] (last (sort l)))", "user": "57ee42c4e4b0bfb2137f5bb1"}, {"problem": 38, "code": "(fn [& rest] (reduce (fn [a b] (if (> a b) a b)) rest))", "user": "57eb38dbe4b0bfb2137f5b5e"}, {"problem": 38, "code": "(fn [& col]\n  (reduce #(if (> %1 %2) %1 %2) col))\n\n;(fn [& col]\n;  (last (sort col)))\n\n;(fn [& col]\n;  (-> col sort last))\n\n;#(-> $& sort last)", "user": "57e4dbcbe4b0bfb2137f5ac3"}, {"problem": 38, "code": ";;(comp last sort list)\n(fn [& x] (last (sort x)))", "user": "580d7bdae4b0849f6811b73c"}, {"problem": 38, "code": "(fn\n  ([fst & rst]\n   (if (empty? rst)\n     fst\n     (let [[hd & others] rst]\n       (if (>= fst hd)\n         (recur fst others)\n         (recur hd others))))))", "user": "580fb8e0e4b0f478707a05bc"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "58060dace4b0a837a8b30cd5"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "580e2941e4b0849f6811b74e"}, {"problem": 38, "code": "(fn[& o](first (sort > o)))", "user": "57ef7393e4b0bfb2137f5bd6"}, {"problem": 38, "code": "(fn [x & xs]\n  (cond\n   (empty? xs) x\n   (> x (first xs))(recur x (next xs))\n   :else (recur (first xs) (next xs))))", "user": "580fbaade4b0f478707a05c0"}, {"problem": 38, "code": "(fn [& nums] (first (sort > nums)))", "user": "580d7de3e4b0849f6811b73d"}, {"problem": 38, "code": "(fn [& vars] (last (sort vars)))", "user": "5694e9c5e4b0dcc4269f4123"}, {"problem": 38, "code": "(fn [& rest] (reduce (fn [a b] (if (> a b) a b)) rest))", "user": "5717a2dce4b07c98581c3b12"}, {"problem": 38, "code": "#(last(sort %&))\n;(fn [& num](last(sort num)))", "user": "580d7e53e4b0849f6811b73e"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "5812eb8fe4b0f478707a0602"}, {"problem": 38, "code": "(fn m [& a] (loop [[h & t] a acc 0] (if (= t nil) acc (recur t (if (> h acc) h acc)))))", "user": "58152157e4b0f478707a0631"}, {"problem": 38, "code": ";;(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))\n#(last (sort %&))", "user": "58136679e4b0f478707a060d"}, {"problem": 38, "code": "(fn [& args]\n  \t(last (sort args)))", "user": "4f0f7339535d0136e6c2233e"}, {"problem": 38, "code": "#(last (sort (seq %&)))", "user": "58047205e4b0a837a8b30ca9"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "user": "57f3b841e4b0511f1d294e0f"}, {"problem": 38, "code": "(fn [& coll]\n   (let [max* (fn [x y] (if (> x y) x y))]\n     (reduce max* coll)))", "user": "500d3160e4b05f7c30cfa6a1"}, {"problem": 38, "code": "(fn [& l] (reduce #(if (> %1 %2) %1 %2) l))", "user": "58172161e4b0c0e9c07b8389"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "5800ab1ee4b0a837a8b30c41"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "58186016e4b0c0e9c07b83ad"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) 0 args))", "user": "57ae3345e4b0fbc9809a271e"}, {"problem": 38, "code": "#(last (sort %&))", "user": "58062dd2e4b0a837a8b30cda"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) 0 args))", "user": "58134ba8e4b0f478707a060b"}, {"problem": 38, "code": "(fn f [& s]\n  (reduce (fn [acc s*] (if (> s* acc) s* acc)) (first s) (rest s)))", "user": "581a2dcfe4b0e114eb519ffd"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "563e1c0ee4b0da801c4e4665"}, {"problem": 38, "code": "(fn [& maxim]\n  (reduce #(if (> %1 %2) %1 %2) maxim))", "user": "58171a9ae4b0c0e9c07b8387"}, {"problem": 38, "code": "(fn [& lst] \n  (reduce (fn [acc v] (if (> v acc) v acc)) (first lst) lst))", "user": "5813e208e4b0f478707a061b"}, {"problem": 38, "code": "(fn [& param] (reduce (fn [x y]  (if (< x y) y x ) )  param))", "user": "581a5fdbe4b0e114eb51a002"}, {"problem": 38, "code": "(fn maximum [& vals]\n  (reduce\n   (fn [m v]\n     (if (> v m)\n       v\n       m))\n   0 vals))", "user": "581a703de4b0e114eb51a005"}, {"problem": 38, "code": "(fn max2 [& seq]\n  (reduce (fn [a b] (if (< a b) b a))seq))", "user": "5804d5afe4b0a837a8b30cad"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57d5a74de4b0bd073c2023ba"}, {"problem": 38, "code": ";(fn my-max [& xs] (last (sort xs)))\n#(last (sort %&))", "user": "581b19e7e4b04b46fc4b0ec4"}, {"problem": 38, "code": "#(last (sort %&))", "user": "581e61b0e4b04b46fc4b0f28"}, {"problem": 38, "code": "(fn my-max [& args]\n  (reduce (fn [acc x] (if (< acc x) x acc)) 0 args))", "user": "5687b6abe4b0dcc4269f4061"}, {"problem": 38, "code": "(fn [& args] (first (sort > args)))", "user": "581dad0ae4b04b46fc4b0f17"}, {"problem": 38, "code": "#(last (sort %&))", "user": "52faf67ce4b047fd55837005"}, {"problem": 38, "code": "(fn [& s]\n  (reduce #(if (> %1 %2) %1 %2) 0 s))", "user": "581e8b86e4b04b46fc4b0f2b"}, {"problem": 38, "code": "(fn [& args](reduce #(if (> %1 %2) %1 %2) args))", "user": "581b4d3be4b04b46fc4b0ec6"}, {"problem": 38, "code": "(fn maxval [& in]\n   (let [x in\n         ]\n     (print x)\n     (first (reverse (sort x)))\n     )\n   )", "user": "5820924ee4b04b46fc4b0f58"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "581fe550e4b04b46fc4b0f4c"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [a b] (if (> a b) a b)) xs))", "user": "5821b018e4b04b46fc4b0f80"}, {"problem": 38, "code": ";(fn \n;  [& nums]\n;  (reduce #(if (> %1 %2) %1 %2) nums))\n\n;(fn\n;  [& nums]\n;  (first (reverse (sort nums))))\n\n;(comp first reverse sort list)\n\n(comp last sort list)", "user": "56255e2de4b00a550fc90297"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "58225587e4b04b46fc4b0f94"}, {"problem": 38, "code": "(fn [& nums](reduce (fn [num1 num2] (if (> num1 num2) num1 num2)) (vec nums)))", "user": "5823d3e6e4b051871117beb8"}, {"problem": 38, "code": "(fn [& xs] (last (sort xs)))", "user": "581829cce4b0c0e9c07b83a9"}, {"problem": 38, "code": "#(last (sort %&))", "user": "58224c53e4b04b46fc4b0f92"}, {"problem": 38, "code": "(fn [& coll]\n  (reduce #(if (> %1 %2) %1 %2) coll))", "user": "58217fbde4b04b46fc4b0f78"}, {"problem": 38, "code": "(fn [& initial-list]\n  (loop [lst initial-list\n         i (first initial-list)]\n    (if (empty? lst)\n      i\n      (recur (rest lst) (if (> i (first lst)) \n                        i \n                        (first lst))))))", "user": "58248186e4b051871117bec6"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (>= %1 %2) %1 %2) x))", "user": "58247423e4b051871117bec5"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "user": "578df8fee4b0ebec4cfb7574"}, {"problem": 38, "code": "#(last (sort %&))", "user": "580deadbe4b0849f6811b74a"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "524dacc9e4b0a16e35cf6df8"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [x y] (if (> x y) x y)) xs))", "user": "5821dbb9e4b04b46fc4b0f86"}, {"problem": 38, "code": "(fn [& nums] (last (sort nums)))", "user": "5820cca0e4b04b46fc4b0f62"}, {"problem": 38, "code": "(fn [& s] \n   (reduce #(if (> %1 %2)\n              %1\n              %2)\n           s))", "user": "5808ee16e4b0a837a8b30d16"}, {"problem": 38, "code": "#(last (sort %&))", "user": "582089fbe4b04b46fc4b0f57"}, {"problem": 38, "code": "(fn [& args]\n\t(reduce #(cond (> % %2) %\n                   :else %2)\n           \targs))", "user": "5703a557e4b08d47c97781f4"}, {"problem": 38, "code": "(fn [& vals] (loop [max-val -9999\n         current (first vals)\n    \t remaining (rest vals)]\n    (if (empty? remaining)\n      max-val\n      (if (> current max-val)\n        (recur current (first remaining) (rest remaining))\n        (recur max-val (first remaining) (rest remaining)) ))))", "user": "4ec55ab5535d6d7199dd3697"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "4f213e2ee4b0d66497709fcf"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [x y]\n                  (if\n                    (> x y) x y)) args))", "user": "5818908be4b0c0e9c07b83bb"}, {"problem": 38, "code": "(fn [a & args]\n  (reduce (fn [m x] (if (< m x) x m)) a args))", "user": "582835cbe4b051871117bf30"}, {"problem": 38, "code": "(fn [& xs]  \n  (reduce \n   (fn [n1 n2] \n   \t(if (> n1 n2)\n     \tn1\n     \tn2))\n \n   xs))", "user": "53bd476ae4b0d9a98559a6ca"}, {"problem": 38, "code": "(fn fx ([a] a)\n      ([a b] ( if (>= a b) a b))\n   ([ a b & more] (reduce fx (fx a b) more))\n   \n             \n              )", "user": "55a21f1ce4b0acc240e3151f"}, {"problem": 38, "code": "(fn [& args] \n  (reduce \n    (fn [x y] \n      (if (> x y) x y)) \n    args))", "user": "581a66b1e4b0e114eb51a003"}, {"problem": 38, "code": "(fn hhi [& x] (last (sort x)))", "user": "58173722e4b0c0e9c07b838a"}, {"problem": 38, "code": "(fn [x & y] (reduce #(if (> %1 %2) %1 %2) x y))", "user": "5816c5f5e4b0c0e9c07b8380"}, {"problem": 38, "code": "(fn [& nums] (last (sort nums)))", "user": "577e42dee4b0c8d87281f6e4"}, {"problem": 38, "code": "(fn\n  ([] nil)\n  ([& xs] (last (sort xs))))", "user": "54ca35c6e4b057c6fda3a254"}, {"problem": 38, "code": "#(last (sort %&))", "user": "507ff90fe4b089ade05efbd9"}, {"problem": 38, "code": "(fn [& args]  (reduce #(if (> %1 %2) %1 %2) args))", "user": "5710140fe4b09c608db7042e"}, {"problem": 38, "code": "(fn [& n] (reduce #(if (> %1 %2) %1 %2) n))", "user": "56f68677e4b08e7d20b96826"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "5829bc55e4b051871117bf49"}, {"problem": 38, "code": "(fn f [& s]\n  (reduce (fn [acc s*] (if (> s* acc) s* acc)) (first s) (rest s)))", "user": "58299e03e4b051871117bf46"}, {"problem": 38, "code": "(fn [& others] (last (sort others)))", "user": "57089f82e4b0b0fb43fd06a2"}, {"problem": 38, "code": "(comp first (partial sort (comp - compare)) list)", "user": "582e0afde4b051871117bfd5"}, {"problem": 38, "code": "#(last (sort %&))", "user": "54efb01be4b024c67c0cf889"}, {"problem": 38, "code": "(comp last sorted-set)", "user": "582290b5e4b04b46fc4b0fa0"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "52860baae4b0239c8a67ae09"}, {"problem": 38, "code": "#(last (sort %&))\n;(fn [& num] (last (sort num))) ;\u8981\u5148\u5c06\u8fd9\u4e9b\u6570\u7ec4\u5408\u6210\u96c6\u5408\u7684\u5f62\u5f0f\u3002\u3002\u3002\u3002", "user": "5822e082e4b04b46fc4b0fa9"}, {"problem": 38, "code": "(fn [& args]\n  (reduce\n   (fn [a b]\n     (if (< a b)\n       b\n       a)) args))", "user": "58254a11e4b051871117bed9"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "582c526ae4b051871117bf88"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [acc item]\n            (if (> item acc)\n              item\n              acc))\n          args))", "user": "5829d588e4b051871117bf4a"}, {"problem": 38, "code": "(fn [& args] \n  (reduce #(if (> %1 %2) %1 %2) 0 args))", "user": "55632016e4b0c656e3ff17e4"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (>= %1 %2) %1 %2) args))", "user": "58303fc3e4b051871117c006"}, {"problem": 38, "code": "#(last (sort %&))", "user": "583166c1e4b051871117c025"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "582589b2e4b051871117bedd"}, {"problem": 38, "code": "(fn [& s] (reduce (fn [acc n ] (if (> n acc) n acc  )) 0 s))", "user": "582dc562e4b051871117bfcb"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce #(if (> %1 %2) %1 %2) nums))", "user": "58327a08e4b089d5ab817c7c"}, {"problem": 38, "code": "(fn [& ys] (reduce (fn [x y] (if (> x y) x y)) ys))", "user": "58334d18e4b089d5ab817c97"}, {"problem": 38, "code": "(fn [& args] \n  (let [maxim (fn maxim\n    \t\t\t([l] (maxim 0 l))\n    \t\t\t([maxnum l]\n      \t\t\t\t(if (empty? l)\n\t\t\t\t        maxnum\n\t\t\t\t        (if (> (first l) maxnum)\n          \t\t\t\t\t(maxim (first l) (rest l))\n          \t\t\t\t\t(maxim maxnum (rest l))))))] (apply maxim (list args))))", "user": "57af36eae4b0fbc9809a272e"}, {"problem": 38, "code": "(fn [& xs]\n  (->> xs\n       (sort)\n       (last)))", "user": "582a5174e4b051871117bf59"}, {"problem": 38, "code": "#(last (sort (first (list %&))))", "user": "58354124e4b089d5ab817cd6"}, {"problem": 38, "code": "(fn [& array] (reduce #(if (> %1 %2) %1 %2) array))", "user": "5835a222e4b089d5ab817ce5"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "570ad386e4b0b0fb43fd06b9"}, {"problem": 38, "code": "(fn mx \n  ([x y]\n      (if (> x y) x y)\n  )\n  \n  ([x y & xs] \n    (if (> x y)\n      (apply mx (cons x xs))\n      (apply mx (cons y xs))\n    ))\n)", "user": "58335c22e4b089d5ab817c9a"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %2 %1) %2 %1) x))", "user": "5835bc73e4b089d5ab817ce9"}, {"problem": 38, "code": "(comp last sort list)", "user": "582a6a85e4b051871117bf5d"}, {"problem": 38, "code": "(fn [& args]\n  (reduce\n   (fn [max-val x]\n     (if (> x max-val) x max-val))\n   args))", "user": "58333b19e4b089d5ab817c94"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5836a247e4b089d5ab817cfe"}, {"problem": 38, "code": "#(last (sort (vec %&)))", "user": "580f9585e4b0f478707a05b5"}, {"problem": 38, "code": "(fn mx ([x y] (if (> x y) x y)) ([x y & z] (apply mx (mx x y) z)))", "user": "583611d7e4b089d5ab817cf1"}, {"problem": 38, "code": "(fn [& x]\n(reduce #( if (< %1 %2) %2 %1) x)\n  )", "user": "583667c7e4b089d5ab817cfb"}, {"problem": 38, "code": "#(last (sort %&))", "user": "58375635e4b089d5ab817d14"}, {"problem": 38, "code": "(fn [& a] (last (sort a)))", "user": "582ed402e4b051871117bfe6"}, {"problem": 38, "code": "(comp last sorted-set)", "user": "5822ccd0e4b04b46fc4b0fa7"}, {"problem": 38, "code": "(fn m_max [& args]\n  (reduce (fn [p n]\n            (if (> p n) p n)) 0 args))", "user": "55a12cb1e4b0acc240e3150d"}, {"problem": 38, "code": "(fn [& params]\n  (reduce #(if (> %2 %)\n             %2\n             %)\n          params))", "user": "5835cb06e4b089d5ab817cea"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5838337de4b089d5ab817d24"}, {"problem": 38, "code": "(fn [& args]\n  (reduce\n   \t(fn [cur highest]\n      (if (> cur highest)\n        cur\n        highest))\n   args))", "user": "5833a6d8e4b089d5ab817ca2"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "56491050e4b0284900eef639"}, {"problem": 38, "code": "#(last (sort %&))", "user": "58384bc4e4b089d5ab817d27"}, {"problem": 38, "code": "(fn [ & args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "583048d9e4b051871117c007"}, {"problem": 38, "code": "(fn [& x] \n  (loop [y (rest x) m (first x)]\n    (if \n      (empty? y) m\n      (if (> (first y) m)\n        (recur (rest y) (first y))\n        (recur (rest y) m)))))", "user": "5839f079e4b089d5ab817d48"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57bf5f49e4b05aa3c4741c7b"}, {"problem": 38, "code": "(fn  [x & xs]\n  (loop [a x ccc xs]\n    (if (empty? ccc) a\n        (let [b (first ccc) ddd (rest ccc)]\n            ( recur  (if (> a b) a b) ddd  )))           )\n  )", "user": "581f82e2e4b04b46fc4b0f41"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "583a360de4b089d5ab817d4f"}, {"problem": 38, "code": "(fn [& r] (last (sort r)))", "user": "58391c94e4b089d5ab817d35"}, {"problem": 38, "code": "#(last (sort %&))", "user": "582d7569e4b051871117bfbe"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "57235dc4e4b0c5bde472c0e2"}, {"problem": 38, "code": "(fn [& xs] (first (sort > xs)))", "user": "583e27e2e4b089d5ab817daa"}, {"problem": 38, "code": "(\n  fn fn1 [& args]  \n   (reduce (fn [acum value] (if (> value acum) value acum )) \n   0  \n   (into [] args))\n)", "user": "583f1533e4b089d5ab817dc8"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "583ff3afe4b089d5ab817dda"}, {"problem": 38, "code": "(fn max-value [x & xs] (reduce #(if (> %1 %2) %1 %2) (cons x xs)))", "user": "583f2e4de4b089d5ab817dcb"}, {"problem": 38, "code": "(fn [& a] (reduce (fn [b c] (if (> c b) c b) ) a))", "user": "5810b899e4b0f478707a05d8"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) (seq args)))", "user": "5830377ee4b051871117c004"}, {"problem": 38, "code": "(comp last sort list)", "user": "583c8bd4e4b089d5ab817d81"}, {"problem": 38, "code": "(fn [& a] (last (sort a)))", "user": "583e1558e4b089d5ab817da9"}, {"problem": 38, "code": "(fn maxn[& args] (->> (into [] (concat args))\n                      (sort)\n                      (last)))", "user": "57ffacd9e4b0a837a8b30c26"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5686b0c0e4b0dcc4269f4056"}, {"problem": 38, "code": "(fn maximum [& l] ((fn rec [li acc] (if (<= (count li) 0) acc (if (<= acc (first li)) (rec (rest li) (first li)) (rec (rest li) acc)))) l (first l)))", "user": "57bc9727e4b05aa3c4741c44"}, {"problem": 38, "code": "(fn [& args] (last (sort (into [] args))))", "user": "5843b231e4b089d5ab817e3d"}, {"problem": 38, "code": "(fn [& s] (-> (sort s) last))", "user": "582cbf48e4b051871117bfa6"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "57e9a77ae4b0bfb2137f5b35"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "546be022e4b00cfc9eacc171"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y))args))", "user": "5804b491e4b0a837a8b30cac"}, {"problem": 38, "code": "(fn [& params] \n  (reduce \n   (fn [largest current] (if (> largest current) largest current)) \n  params))", "user": "540c5950e4b0addc1aec6701"}, {"problem": 38, "code": "(fn mx [& list] (reduce #(if (> %1 %2) %1 %2) list))", "user": "577412c6e4b0979f896515f6"}, {"problem": 38, "code": "(fn m [& n]\n  (reduce #(if (> %2 %1) %2 %1) n))", "user": "5842d06be4b089d5ab817e22"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "user": "58467633e4b089d5ab817e90"}, {"problem": 38, "code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) coll))", "user": "584917a1e4b089d5ab817ec9"}, {"problem": 38, "code": "(fn maxm \n  [x y & more]\n  (if (> x y)\n    (if (first more)\n      (apply maxm x (first more) (rest more))\n      x)\n    (if (first more)\n      (apply maxm y (first more) (rest more))\n      y)))", "user": "584574a1e4b089d5ab817e69"}, {"problem": 38, "code": "#(last(sort %&))", "user": "583d669ee4b089d5ab817d9a"}, {"problem": 38, "code": "(fn [& rest] (last (sort (into [] rest))))", "user": "577d02a6e4b0c8d87281f6cb"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "57dafe97e4b0bd073c20241c"}, {"problem": 38, "code": "(fn [x & xs] \n  (loop [m x r xs]\n    (if (empty? r) m\n          \n    (let [nx (first r)\n          nm (if (> m nx) m nx)]\n      (recur nm (next r))))))", "user": "550772cee4b021ccfedb96a8"}, {"problem": 38, "code": "(fn maxel [& x] (last (sort x)))", "user": "584953eee4b089d5ab817ece"}, {"problem": 38, "code": "(fn [& args] \n    (reduce #(if (> %1 %2) %1 %2) args))", "user": "579aff09e4b05b1deef9ade7"}, {"problem": 38, "code": "#(first (sort > %&))", "user": "583f23dce4b089d5ab817dc9"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) 0 args))", "user": "55a5e2f7e4b0acc240e31550"}, {"problem": 38, "code": "(fn maxx([a b] (or (and (> a b) a) b)) ([a b & c](reduce maxx (maxx a b) c)))", "user": "5849ac5fe4b089d5ab817ed7"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (< a b) b a)) args))", "user": "584dadebe4b0b7285a6f4e44"}, {"problem": 38, "code": "(fn max-2\n  [& params]\n  (reduce #(if (> %1 %2) %1 %2) params))", "user": "563f4c47e4b08d4f616f5ed2"}, {"problem": 38, "code": "(fn [& vals] (first (reverse (sort vals))))", "user": "5027f37be4b01614d1633ff1"}, {"problem": 38, "code": "#(reduce (fn [pre cur] (if (> pre cur) pre cur)) %&)", "user": "58351337e4b089d5ab817cd1"}, {"problem": 38, "code": "(fn [& nums] \n  (reduce #(if (> %2 %1) %2 %1) nums))", "user": "5845720de4b089d5ab817e68"}, {"problem": 38, "code": "(fn [& arr] (reduce (fn [a,b] (if (> a b) a b)) arr))", "user": "583c4482e4b089d5ab817d7e"}, {"problem": 38, "code": "(fn maximum-value-solution\n  [x & rest]\n    (reduce #(if (< %1 %2) %2 %1) x rest))", "user": "58445c3ce4b089d5ab817e49"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "58408643e4b089d5ab817deb"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "570eeca5e4b0b0fb43fd06fb"}, {"problem": 38, "code": "(fn [& args] (cond (= 1 (count args)) (first args)\n                   (< (first args) (last args))(recur (rest args))\n                   :else (recur (butlast args))\n                   ))", "user": "585030cbe4b0b7285a6f4e78"}, {"problem": 38, "code": "(comp last sort list)", "user": "567b2f20e4b05957ce8c61a2"}, {"problem": 38, "code": "(fn [& params] (reduce #(if (> %2 %1) %2 %1) (first params) params))", "user": "583dacc2e4b089d5ab817d9f"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "564dc08ae4b0284900eef68f"}, {"problem": 38, "code": "#((comp last sort) %&)", "user": "584f096ae4b0b7285a6f4e5c"}, {"problem": 38, "code": "#(first (reverse (sort %&)))", "user": "5762adebe4b0994c1922fbac"}, {"problem": 38, "code": "#(last (sort (seq %&)))", "user": "56719c3ce4b05957ce8c610c"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "529f9bf2e4b04e0c58e87bb4"}, {"problem": 38, "code": "(fn [& args] (reduce (fn[a b](if (> a b) a b)) args))", "user": "5832be57e4b089d5ab817c86"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "5851ccede4b0b7285a6f4e9c"}, {"problem": 38, "code": "(fn [x & more]\n  (last (sort (conj more x)))\n  )", "user": "5840c068e4b089d5ab817df8"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (< %1 %2) %2 %1 ) x) )", "user": "58524875e4b0b7285a6f4ead"}, {"problem": 38, "code": "(fn [& xs]\n(reduce #(if (> %2 %1) %2 %1) xs))", "user": "57233cc8e4b0c5bde472c0e1"}, {"problem": 38, "code": "#(last (sort (seq %&)))", "user": "5854d1c0e4b07779d468640a"}, {"problem": 38, "code": "(fn maxy [uno & args]\n      (cond \n            (empty? args) uno\n            (empty? (rest args)) \n                  (if (< uno (first args)) \n                      (first args)\n                      uno\n                  )\n            (> uno (first args)) (maxy uno (first (rest args)))\n            (< uno (first args)) (maxy (first args) (first (rest args)))))", "user": "5695b86de4b0dcc4269f412b"}, {"problem": 38, "code": "(fn [a & args] \n   (loop [e args m a] \n       (if (empty? e)\n           m\n           (if (> m (first e))\n               (recur (rest e) m)\n               (recur (rest e) (first e))\n           )\n       )\n   )\n)", "user": "584d8724e4b0b7285a6f4e3e"}, {"problem": 38, "code": "(fn [& args] \n        (reduce #(if (> %1 %2) %1 %2) args) )", "user": "58455b05e4b089d5ab817e65"}, {"problem": 38, "code": "(fn [a b & remain]\n  (loop [remain remain]\n    (if (> a b) a\n      (if (> b a) b\n        (recur remain)))))", "user": "5766fbb7e4b0a07e8fc180b6"}, {"problem": 38, "code": "(fn [ & r] (reduce #(if (> %1 %2) %1 %2) r))", "user": "56b1b59be4b0982f16b37df2"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (< a b) b a)) args))", "user": "584278e1e4b089d5ab817e19"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5857d27de4b0f14aab7c8710"}, {"problem": 38, "code": "(fn [& xs]\n  (last (sort xs)))", "user": "58593c05e4b0f14aab7c872d"}, {"problem": 38, "code": "(comp last sort list)", "user": "580d57cfe4b0849f6811b738"}, {"problem": 38, "code": "#(last (sort %&))", "user": "56f9b953e4b07572ad1a88b9"}, {"problem": 38, "code": "(comp last sort list)", "user": "57d0e185e4b0bd073c202360"}, {"problem": 38, "code": "(fn [a & tail]\n  (if (empty? tail)\n    a\n    (let [b (first tail)]\n      (recur (if (> a b) a b) (next tail)))\n    )\n  )", "user": "58562083e4b0f14aab7c86eb"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1\n                         %2) xs))", "user": "585a19a4e4b0f14aab7c8746"}, {"problem": 38, "code": "(fn [x & xr]\n    (reduce #(if (< %1 %2 ) %2 %1) x xr))", "user": "50a3bf08e4b0ceace084d495"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "585481e0e4b07779d46863fe"}, {"problem": 38, "code": "(fn my-max\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] (reduce my-max (my-max x y) more)))", "user": "584f5133e4b0b7285a6f4e61"}, {"problem": 38, "code": "(fn [& l] (last (sort l)))", "user": "585a0337e4b0f14aab7c8744"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) (first args) (rest args)))", "user": "585c5b21e4b0f14aab7c8786"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "51456858e4b0e88796073408"}, {"problem": 38, "code": "(fn max-1 [x & more]\n  (if (empty? more)\n    x\n    (if (> x (first more))\n      (apply max-1 x (rest more))\n      (apply max-1 (first more)\n             (rest more)))))", "user": "585e2e77e4b0f14aab7c87ac"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args) )", "user": "585bcd51e4b0f14aab7c8771"}, {"problem": 38, "code": "#(last \n  (sort %&)\n)", "user": "585d2c1fe4b0f14aab7c8797"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "585e86b0e4b0f14aab7c87b4"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2)  a))", "user": "585d40afe4b0f14aab7c8798"}, {"problem": 38, "code": "(fn [& val-col] \n  (last (sort-by identity val-col))\n  )", "user": "57cec4ade4b0c746388ab8b1"}, {"problem": 38, "code": "(fn [& lst] (\n           reduce \n           \t(fn [x, y] (if (> x y) x y)) \n           \t(first lst) \n           \tlst))", "user": "55e357dae4b050e68259b442"}, {"problem": 38, "code": "(fn [& coll]\n  (loop [c coll m 0]\n    (if (empty? c)\n      m\n      (recur (rest c)\n             (if (> (first c) m)\n               (first c)\n               m)))))", "user": "58582dade4b0f14aab7c8713"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce (fn [x y]\n            (if (> x y)\n              x\n              y)) \n          xs))", "user": "55507a1ae4b00713264bd9a7"}, {"problem": 38, "code": "(fn [& a]\n  (reduce (fn [x y]\n            (if (> x y)\n              x\n              y)\n            )\n          a)\n  )", "user": "5803fd7fe4b0a837a8b30c9c"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5860fde4e4b0f14aab7c87e2"}, {"problem": 38, "code": "(fn [& lst] (reduce (fn [x y] (if (> x y) x y)) lst))", "user": "57c33eeae4b05aa3c4741cbc"}, {"problem": 38, "code": "(fn my-max [& args]\n  (reduce #(if (> % %2) % %2) args)\n)", "user": "569e3175e4b0542e1f8d1484"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5853582fe4b0b7285a6f4ec5"}, {"problem": 38, "code": "(fn [& r] (reduce #(if (>  %2 %1) %2 %1) r))", "user": "58566b42e4b0f14aab7c86f4"}, {"problem": 38, "code": "(fn [& xs] \n  (reduce \n   (fn [r e] (if (> e r) e r)) \n   (first xs) \n   (rest xs)))", "user": "582a2d4fe4b051871117bf55"}, {"problem": 38, "code": "(fn [& nums] (first (reverse (sort nums))))", "user": "5863be34e4b0f14aab7c8830"}, {"problem": 38, "code": "#(last (sort %&))", "user": "582c986ee4b051871117bf9b"}, {"problem": 38, "code": "(fn [& more]\n  (println \"rest: \" more)\n  (println \"type: \" (type (next more)))\n  (println \"seq?: \" (list? more))\n  ((fn my-max [result rest1]\n     (if (empty? rest1)\n       result\n       (my-max (if (> (first rest1) result)\n                 (first rest1)\n                 result)\n               (rest rest1))))\n   (first more)\n   (next more)))", "user": "58637f03e4b0f14aab7c881e"}, {"problem": 38, "code": "(fn maximum [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "5852801ee4b0b7285a6f4eb1"}, {"problem": 38, "code": "(fn\n  [x & xs]\n  (reduce (fn [m n]\n            (if (> n m) n m))\n          x\n          xs))", "user": "58543a59e4b07779d46863f5"}, {"problem": 38, "code": "(fn my-max [& xs]\n  (reduce (fn max-of-two [left right]\n            (if (> left right)\n              left\n              right)) xs))", "user": "57ea4569e4b0bfb2137f5b46"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "585e7c60e4b0f14aab7c87b3"}, {"problem": 38, "code": "(fn [& coll]\n  (let [tmp-max-fn (fn [tmp-max val]\n                    (if (> val tmp-max)\n                      val\n                      tmp-max))]\n    (loop [i (count coll) tmp-max (first coll) r coll]\n      (if (= 1 i)\n        tmp-max\n        (recur (dec i) (tmp-max-fn tmp-max (first r)) (rest r))))))", "user": "547bf82de4b0c51c1f4d72e1"}, {"problem": 38, "code": "(fn [& more-n]\n  (reduce #(if (> %1 %2) %1 %2) more-n))", "user": "5863eda2e4b0f14aab7c8836"}, {"problem": 38, "code": "(comp last sort list)", "user": "586615e6e4b0f14aab7c8858"}, {"problem": 38, "code": "(fn [& all] (last (sort all)))", "user": "5866b999e4b0f14aab7c886b"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "58681bf0e4b0f14aab7c888a"}, {"problem": 38, "code": "(fn [& r]\n  (reduce #(if (> % %2) % %2) r))", "user": "5865c8f0e4b0f14aab7c884e"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "58617a1fe4b0f14aab7c87f0"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "556a7626e4b09a3098a524e3"}, {"problem": 38, "code": "(fn [m & s]\n      (loop [s s m m]\n       (cond\n         (empty? s) m\n         (< m (first s)) (recur (rest s) (first s))\n         :else (recur (rest s) m))))", "user": "52ade380e4b0c58976d9ac9b"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "586631a2e4b0f14aab7c885a"}, {"problem": 38, "code": "(fn mymax [& args]\n  (reduce (fn [a b] (if (> a b) a b)) args)\n)", "user": "58694f69e4b0f14aab7c889f"}, {"problem": 38, "code": "(fn [& arg]\n  (reduce (fn [result item]\n            (if (> item result)\n              item\n              result)) 0 arg))", "user": "58628c9be4b0f14aab7c880c"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %2 %1) %2 %1) xs))", "user": "4e7be091535db169f9c796ba"}, {"problem": 38, "code": "(fn [& x]\n  (reduce #(if (> %1 %2) %1 %2) x))", "user": "5821160de4b04b46fc4b0f6c"}, {"problem": 38, "code": "(fn [& li] (first (sort #(compare %2 %1) li)))", "user": "586a657de4b0f14aab7c88bd"}, {"problem": 38, "code": "#(reduce (fn[i1 i2] (if (> i1 i2) i1 i2)) %&)", "user": "585e5377e4b0f14aab7c87b0"}, {"problem": 38, "code": "(comp last sort list)", "user": "586b6f13e4b01531a375e959"}, {"problem": 38, "code": "#((comp last sort) %&)\n;;(fn [& args] (* -1 (apply min (map #(* -1 %) args)))) for entertainment", "user": "585d9558e4b0f14aab7c879c"}, {"problem": 38, "code": "(fn [& s]\n    (reduce #(if (> %2 %1) %2 %1) s))", "user": "586b6753e4b01531a375e956"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce (fn [x y] (if (pos? (.compareTo y x)) y x)) x xs))", "user": "58658407e4b0f14aab7c884d"}, {"problem": 38, "code": "(fn [& x] (reduce (fn [y z] (if (> y z) y z)) x))", "user": "58665b12e4b0f14aab7c8861"}, {"problem": 38, "code": "(fn [& args] (last (sort (into [] args))))", "user": "585c16c3e4b0f14aab7c877d"}, {"problem": 38, "code": "(fn [& nums] (-> nums sort last))", "user": "54012b48e4b0de5c41848620"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (< %1 %2) %2 %1) args)\n  )", "user": "52dc7344e4b09f7907dd13cf"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "4e11b92a535d04ed9115e7cb"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) (vec args)))", "user": "586bc870e4b01531a375e964"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "586d4d63e4b01531a375e98e"}, {"problem": 38, "code": ";(fn mymax [& args]\n;  (first (sort > args)))\n(fn [& args]\n  (reduce (fn [a b] (if (> a b) a b)) args))", "user": "586c5a34e4b01531a375e97a"}, {"problem": 38, "code": "(fn mymax [& args] (first (reverse (sort args ) )))", "user": "58622733e4b0f14aab7c8803"}, {"problem": 38, "code": "(fn find-max\n  [& numbers]\n  (reduce #(if (> %1 %2) %1 %2) numbers))", "user": "57d174ede4b0bd073c20236c"}, {"problem": 38, "code": "#(last(sort %&))", "user": "586b6a0ae4b01531a375e957"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "586b6d51e4b01531a375e958"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "56b17337e4b0982f16b37deb"}, {"problem": 38, "code": "(fn [& s] (reduce #(if (> %2 %) %2 %) s))", "user": "5845f14ee4b089d5ab817e7e"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "5458c74de4b01be26fd74623"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "586e47dee4b01531a375e9a9"}, {"problem": 38, "code": "(fn [& xs](first (sort > xs)))", "user": "55597b84e4b0deb715856e36"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "586b1482e4b0f14aab7c88cf"}, {"problem": 38, "code": "(fn m\n  ([x y] (if (> x y) x y))\n  ([x y & more] (reduce m (m x y) more)))", "user": "57762e67e4b0979f89651630"}, {"problem": 38, "code": "(fn [& v] (reduce #(if (> % %2) % %2) v))", "user": "5872da4de4b01531a375ea24"}, {"problem": 38, "code": "#(loop [l (rest %&) r (first %&)]\n   (if (seq l)\n     (recur (rest l) (if (> r (first l)) r (first l)))\n     r))", "user": "58731176e4b01531a375ea2a"}, {"problem": 38, "code": "(letfn [(max2 [a b] (if (> a b) a b))\n        (maximum [s] (if (and s (next s)) (max2 (first s) (maximum (next s))) (first s)))\n        (mymax [& rst] (maximum rst))\n        ]\n       mymax)", "user": "54d95ce8e4b024c67c0cf74a"}, {"problem": 38, "code": "(fn [& args]\n  (reduce \n   (fn [prev cur]\n     (if (< prev cur)\n       cur\n       prev)) \n    args))", "user": "57fbd83ee4b0d3187e90097b"}, {"problem": 38, "code": "#(last (sort %&))", "user": "587294f0e4b01531a375ea1e"}, {"problem": 38, "code": "(fn [x y & more]\n  (let [my-max (fn [x y]\n                 (cond (nil? x) y\n                       (nil? y) x\n                       :else (if (> x y) x y)))\n        values (flatten (list x y more))]\n    (reduce my-max values)))", "user": "585d46dce4b0f14aab7c8799"}, {"problem": 38, "code": "(fn [& args] (last (apply sorted-set args)))", "user": "586d146de4b01531a375e98a"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "user": "5872935ce4b01531a375ea1d"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [arg1 arg2] (if (> arg1 arg2) arg1 arg2)) args)\n)", "user": "58669dd0e4b0f14aab7c8867"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce #(if (> %1 %2) %1 %2)\n          nums))", "user": "56403765e4b08d4f616f5edc"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [f s] \n            (if(> f s) \n              f\n       \t\t  s)) args))", "user": "5874d5ace4b01531a375ea5b"}, {"problem": 38, "code": "#(last (into (sorted-set) %& ))", "user": "57f9b25fe4b0d3187e90094b"}, {"problem": 38, "code": "(fn [& args] (first (reverse (sort args))))", "user": "58740c18e4b01531a375ea49"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "52658b67e4b03e8d9a4a710d"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce #(if (> %1 %2) %1 %2) nums))", "user": "5727031ee4b0c5bde472c12f"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [x y] (if (> x y) x y)) args))", "user": "5875daaee4b01531a375ea74"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [m x] (if (> m x) m x)) args))", "user": "53b42472e4b047364c0444b2"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5876c0c5e4b01531a375ea8e"}, {"problem": 38, "code": "(comp last sort list)", "user": "534e62bee4b084c2834f4ab3"}, {"problem": 38, "code": "(fn [& rst]\n  (reduce #(if (< %1 %2) %2 %1) rst))", "user": "55dbc7cde4b050e68259b3a4"}, {"problem": 38, "code": "(fn get-max [first & rest] (reduce #(if (> %1 %2) %1 %2) (flatten (cons first rest))))", "user": "584e9acae4b0b7285a6f4e54"}, {"problem": 38, "code": "#(reduce (fn [x y] (if (< x y) y x)) Double/NEGATIVE_INFINITY %&)", "user": "58745926e4b01531a375ea50"}, {"problem": 38, "code": "#(last (sort %&))", "user": "587844efe4b01531a375eab5"}, {"problem": 38, "code": "(fn [& inParams] \n  (loop [iter 0\n        maxVal 0]\n   (if (= (- (count inParams) 1) iter)\n     maxVal\n     (recur (inc iter) (if (> (nth inParams iter) maxVal) (nth inParams iter) maxVal)))))", "user": "5862a8a9e4b0f14aab7c880f"}, {"problem": 38, "code": "(fn [& n] (last (sort n)))", "user": "534fa1a8e4b084c2834f4ace"}, {"problem": 38, "code": "(fn my-max \n  [& args]\n  (println args)\n  (loop [my-list args max-value 0]\n    (if (empty? my-list) max-value\n    (if (> (first my-list) max-value)\n      (recur (rest my-list) (first my-list))\n      (recur (rest my-list) max-value)))))", "user": "586f3f7ee4b01531a375e9c1"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "5873dd1ce4b01531a375ea42"}, {"problem": 38, "code": "(fn mx [& args]\n  (reduce (fn [a b] (if (> a b) a b)) args))", "user": "560d24a2e4b05f002753df34"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce (fn [cur-max cur]\n            (if (> cur cur-max)\n              cur\n              cur-max)) nums))", "user": "5879d577e4b01531a375ead8"}, {"problem": 38, "code": "(fn [& xs]\n  (loop [n (first xs)\n         ns (rest xs)\n         nmax n]\n    (if (nil? n)\n      nmax\n      (recur (first ns)\n             (rest ns)\n             (if (> n nmax) n nmax)))))", "user": "579fc29fe4b0264b925669ff"}, {"problem": 38, "code": "(comp last sort vector)", "user": "563c7f98e4b0bfe05bf11836"}, {"problem": 38, "code": "(fn \n   ([x] x)\n   ([x & more] \n    (reduce #(if (< %1 %2) %2 %1) x more)))", "user": "57689d73e4b0a07e8fc180d7"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [a b] (if (> a b) a b)) xs))", "user": "587ad5aae4b01531a375eaf0"}, {"problem": 38, "code": "(fn [& params] (reduce #(if (> % %2) % %2) params))", "user": "4fb0ccbfe4b081705acca26e"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "587abe0de4b01531a375eaef"}, {"problem": 38, "code": "(fn [& coll]\n  (reduce (fn [m v] (if (> v m) v m)) 0 coll))", "user": "5878fb4ee4b01531a375eac1"}, {"problem": 38, "code": "(fn [& x]\n  (reduce #(if (> %1 %2) %1 %2) 0 x))", "user": "57ea2c91e4b0bfb2137f5b42"}, {"problem": 38, "code": "(fn [& n]\n\n  (loop [highest 0 cnt 0]\n\n    (if (= cnt (count n))\n\n      highest\n\n      (recur (if (> highest (nth n cnt)) highest (nth n cnt)) (inc cnt)))))", "user": "5875f2c5e4b01531a375ea77"}, {"problem": 38, "code": "(fn [& args]\n  (loop [n (first args) l (rest args)]\n    (cond (empty? l)\n          n\n          \n          (< n (first l))\n          (recur (first l) (rest l))\n          \n          :else\n          (recur n (rest l)))))", "user": "5139ec21e4b067e25a345ebe"}, {"problem": 38, "code": "(fn myMax\n   ([x]\n    x)\n   ([x y]\n    (if (< x y) y x))\n   ([x y & more]\n     (reduce myMax (myMax x y) more))\n   )", "user": "58775496e4b01531a375ea9a"}, {"problem": 38, "code": "(fn [head & tail]\n  ((fn myloop [[head & tail] acc]\n    (if head\n      (myloop tail (if (> acc head) acc head))\n      acc)) (into [] tail) head))", "user": "580b216fe4b0a837a8b30d45"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "5875f45be4b01531a375ea78"}, {"problem": 38, "code": "(fn [& c] (last (sort c)))", "user": "50385746e4b0803468ea2c6d"}, {"problem": 38, "code": "(fn [& args]\n   (let [to-max (fn [acc x]\n                  (if (or (nil? acc) (> x acc) )\n                    x\n                    acc))]\n     (reduce to-max nil args)))", "user": "4ff9ea75e4b0678c553fc3b3"}, {"problem": 38, "code": "(fn [x & args](reduce #(if (> %1 %2) %1 %2) 0 (cons x args)))", "user": "55b4fa46e4b01b9910ae2983"}, {"problem": 38, "code": "(fn [& lst]\n  (reduce (fn [x y]\n          (if (> x y) x\n            y)) lst))", "user": "587f8393e4b0f1effa3b75f2"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %2 %1) %2 %1) args))", "user": "5871175de4b01531a375e9f7"}, {"problem": 38, "code": "(fn [& more] (last (sort more)))", "user": "587cf197e4b01531a375eb2a"}, {"problem": 38, "code": "(fn [& more] (last (sort more)))", "user": "587cf1b1e4b01531a375eb2b"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce (fn [a b]\n            (cond\n             (> a b) a\n             :else   b)) nums))", "user": "58631579e4b0f14aab7c8817"}, {"problem": 38, "code": "#(last (sort %&))", "user": "58800fd4e4b0f1effa3b7606"}, {"problem": 38, "code": "(fn [& nums] (\n              reduce #(if (> %2 %1) %2 %1)\n              -1\n              nums\n              )\n)", "user": "5877e40ee4b01531a375eaab"}, {"problem": 38, "code": "(fn [& x] (reduce (fn [x y] (if (> x y) x y)) x))", "user": "587cf147e4b01531a375eb29"}, {"problem": 38, "code": "(let [iteration (fn [current-max xs]\n                  (if (empty? xs)\n                    current-max\n                    (let [[x & tail] xs]\n                      (recur (if (> x current-max) x current-max ) tail))))]\n  (fn [& args] (iteration Integer/MIN_VALUE args)))", "user": "587100d6e4b01531a375e9f0"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "5880e38fe4b0f1effa3b7625"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) args))", "user": "587ee260e4b052da650a6353"}, {"problem": 38, "code": "(fn func38\n  [& rest]\n  (last (sort rest)))", "user": "5673881fe4b05957ce8c6120"}, {"problem": 38, "code": "(fn maxi [& xs]\n  (reduce (fn [a x]\n            (if (> x a) x a))\n          xs))", "user": "57644395e4b0994c1922fbf2"}, {"problem": 38, "code": "(comp last sort list)", "user": "4dbd7107535d020aff1edf42"}, {"problem": 38, "code": "(fn [& rest] (-> rest sort reverse first))", "user": "58840023e4b0f1effa3b768b"}, {"problem": 38, "code": "(fn [& l]\n  (reduce #(if ( < %1 %2)\n             %2\n             %1) 0 l))", "user": "5883584ae4b0f1effa3b7674"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5881335ce4b0f1effa3b762e"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce (fn [a b] \n            (if (> a b)\n              a\n              b)) xs))", "user": "58852909e4b0f1effa3b76af"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "582f6a25e4b051871117bff1"}, {"problem": 38, "code": "(fn [& numbers]\n    (reduce (fn [a b] (if (> a b) a b)) numbers))", "user": "587bead1e4b01531a375eb0d"}, {"problem": 38, "code": "(fn [& a] (last(sort (into [] a))))", "user": "5886e8bde4b0f1effa3b76ea"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "5880d686e4b0f1effa3b7623"}, {"problem": 38, "code": "(fn [& res] (reduce #(if (< %1 %2) %2 %1) res))", "user": "58844d43e4b0f1effa3b7696"}, {"problem": 38, "code": "(fn [& nums]\n (loop [nlst nums maxnum 0]\n   (if (empty? nlst)\n     maxnum\n     (recur \n        (rest nlst) \n        (if (> (first nlst) maxnum) \n          (first nlst) \n          maxnum\n        )\n     )\n   )\n )\n  )", "user": "5885e90de4b0f1effa3b76c5"}, {"problem": 38, "code": "#(loop \n  [s (rest %&) m (first %&)]\n   (if (empty? s)\n     m\n     (recur \n      (rest s)\n      (if (<= (first s) m) m (first s)))))", "user": "587c59d1e4b01531a375eb17"}, {"problem": 38, "code": "(fn [a b & coll] (if (> a b) a b))", "user": "587c77afe4b01531a375eb1b"}, {"problem": 38, "code": "(fn my-max [value & col]\n  (if (empty? col)\n    value\n    (let [tail-max (apply my-max col)]\n      (if (> tail-max value)\n        tail-max\n        value))))", "user": "5887518ae4b0f1effa3b76f5"}, {"problem": 38, "code": "#(- (apply min (map - %&)))", "user": "58875f4de4b0f1effa3b76f7"}, {"problem": 38, "code": "(fn [& nums] (reduce (fn [r n] (if (> r n) r n)) 0 nums))", "user": "5526ecc4e4b0ffed3738f928"}, {"problem": 38, "code": "(fn [& args] (loop [coll args biggest 0] (if (empty? coll) biggest (recur (rest coll) (if (< biggest (first coll)) (first coll) biggest)))))", "user": "5886ac91e4b0f1effa3b76e5"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [a b] (if (> a b) a b)) xs))", "user": "587c48cce4b01531a375eb16"}, {"problem": 38, "code": "(fn [& args] \n  (reduce (fn [a x] (if (> x a) x a)) 0 args))", "user": "5884e807e4b0f1effa3b76a6"}, {"problem": 38, "code": "(fn [& num] (reduce #(if (< %2 %1) %1 %2) num))", "user": "56c44c34e4b05cc29241ee96"}, {"problem": 38, "code": "#(-> %& (sort) (last))", "user": "5889dc13e4b0f1effa3b774a"}, {"problem": 38, "code": "(fn \n  [& args]\n   ((fn max2\n     [s highest]\n     (cond \n      (= s nil) highest\n      (> highest (first s)) (recur (next s) highest) \n      :else (recur (next s) (first s)))) args 0))", "user": "5888b75fe4b0f1effa3b771b"}, {"problem": 38, "code": "(fn [& args] (loop [lst args c_max 0] (if (empty? lst) c_max (recur (rest lst) (if (> (first lst) c_max) (first lst) c_max)))))", "user": "580b79e4e4b0a837a8b30d4a"}, {"problem": 38, "code": "(fn [& rest] (reduce (fn [a b] (if (> a b) a b)) rest))", "user": "5885bea8e4b0f1effa3b76bf"}, {"problem": 38, "code": "(fn [& args] \n    (let [qq (fn [x y] \n                (if (> x y) x y))]\n    (reduce qq args)))", "user": "585a7cb2e4b0f14aab7c874e"}, {"problem": 38, "code": "(fn [& coll] (reduce #(if (> %2 %1) %2 %1) coll))", "user": "578d459ee4b0ebec4cfb7567"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "585dbe41e4b0f14aab7c879f"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "54c4c96ae4b045293a27f61f"}, {"problem": 38, "code": "(fn [& args] (first (sort > args)))", "user": "576e607ae4b0979f89651579"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "588e71dfe4b00487982d518f"}, {"problem": 38, "code": "(fn [& foo] (reduce #(if (< %1 %2) %2 %1) 0 foo))", "user": "5885cc62e4b0f1effa3b76c1"}, {"problem": 38, "code": "(fn [& xs]\n  (first (sort > xs)))", "user": "588e8133e4b00487982d5191"}, {"problem": 38, "code": ";(fn [& lst] \n;  (first (reverse (sort lst))))\n\n(comp last sort list)", "user": "588e6a17e4b00487982d518c"}, {"problem": 38, "code": "(fn [& seqn]\n  (\n    (fn [seqn m]\n      (if (= seqn [])\n        (identity m)\n        (if (> (first seqn) m)\n          (recur (rest seqn) (first seqn))\n          (recur (rest seqn) m)\n        )\n      )\n    )\n  seqn 0)\n)", "user": "588b4bd0e4b05c141a25607a"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "user": "58896e5ce4b0f1effa3b773e"}, {"problem": 38, "code": "(fn [& x]\n  (loop [cx (seq x), mx (first cx)]\n    (if (empty? cx)\n      mx\n      (if (> mx (first cx))\n        (recur (rest cx) mx)\n        (recur (rest cx) (first cx))\n        )\n      )\n    )\n  )", "user": "588fb3a7e4b00487982d51b9"}, {"problem": 38, "code": "#(last(sort(seq %&)))", "user": "5799c6dee4b05b1deef9adca"}, {"problem": 38, "code": "#(first (reverse (sort %&)))", "user": "54dbc6ebe4b024c67c0cf773"}, {"problem": 38, "code": "(fn[& items] (reduce #(if (> %2 %1) %2 %1) items))", "user": "588e64ebe4b00487982d518a"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "589037b4e4b00487982d51d0"}, {"problem": 38, "code": "(fn [& l] (reduce #(if (> %1 %2) %1 %2) l))", "user": "58923efce4b00487982d521c"}, {"problem": 38, "code": "(fn \n  [& collection]\n  (reduce (fn [val_1 val_2] (if (> val_1 val_2) val_1 val_2)) collection))", "user": "588f500ae4b00487982d51a4"}, {"problem": 38, "code": "(fn [& args] (last(apply sorted-set args)))", "user": "58942fd0e4b00487982d5254"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [f l]\n            (if (> l f)\n              l\n              f))\n          args))", "user": "583e02fce4b089d5ab817da5"}, {"problem": 38, "code": "(fn [& numbers] (reduce (fn [n1 n2] (if (> n1 n2) n1 n2 )) numbers))", "user": "5890799be4b00487982d51d6"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> b a) b a)) -9999 args))", "user": "58949f8de4b00487982d525e"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "589511dee4b00487982d5272"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %2 %1) %2 %1) xs))", "user": "58954c47e4b00487982d527e"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [acc, x] (if (> x acc) x acc)) xs))", "user": "552b6ddbe4b0ffed3738f965"}, {"problem": 38, "code": "(fn [& xs] (last (sort xs)))", "user": "587cbebbe4b01531a375eb24"}, {"problem": 38, "code": "(fn [& xs]\n  (first (sort > xs)))", "user": "5895477fe4b00487982d527c"}, {"problem": 38, "code": "#(last (sort \n       %&))", "user": "58904720e4b00487982d51d1"}, {"problem": 38, "code": "(fn mx [& args]\n  (let [xs (flatten (seq args))]\n    (if (<= (count xs) 1)\n      (first xs)\n      (let [h (first xs) t (rest xs) tmx (mx t)]\n        (if (<= tmx h)\n          h\n          tmx)))))", "user": "5888f271e4b0f1effa3b7726"}, {"problem": 38, "code": "(fn [& vals] (reduce #(if (> %2 %1) %2 %1) (first vals) (rest vals)))", "user": "5884f77ee4b0f1effa3b76a9"}, {"problem": 38, "code": "(fn [& coll]\n    (loop [coll coll max-num nil]\n        (if (empty? coll)\n            max-num\n            (recur \n                (rest coll)\n                (if (or (= max-num nil) (> (first coll) max-num))\n                    (first coll)\n                    max-num)))))", "user": "5896735fe4b00487982d529d"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5890dbeae4b00487982d51e3"}, {"problem": 38, "code": "(comp last sort list)", "user": "589714cbe4b00487982d52b1"}, {"problem": 38, "code": "(fn [& nums] \n  (reduce #(if (> %1 %2) %1 %2) nums))", "user": "5892a5fde4b00487982d5228"}, {"problem": 38, "code": "(fn [& args]\n  (first (reverse (sort args))))", "user": "5894b298e4b00487982d5261"}, {"problem": 38, "code": "(fn[hi & x] (loop [hi(first x) x(rest x)])\n          (if (empty?  x)hi\n            (recur (if (< hi(first x))(first x) hi) (rest x) )))", "user": "53ada652e4b047364c04446d"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) (seq xs)))", "user": "58983e3fe4b00487982d52ce"}, {"problem": 38, "code": "(fn [& lista] (reduce #(if (> %1 %2) %1 %2) lista))", "user": "56e2c62fe4b03a7c14b85a37"}, {"problem": 38, "code": "(fn \n  [& x]\n  (reduce (fn \n            [m y]\n            (if (> y m)\n              y\n              m)) 0 x))", "user": "58976bfde4b00487982d52bc"}, {"problem": 38, "code": "(comp last sort list)", "user": "589a8dace4b00487982d5311"}, {"problem": 38, "code": "(fn [& elems]\n  (last (sort elems)))", "user": "56f1b558e4b04a395b9a049a"}, {"problem": 38, "code": "(fn [& s] \n  (reduce #(if (> %2 %1) %2 %1) s))", "user": "585a7b05e4b0f14aab7c874d"}, {"problem": 38, "code": "(fn[& v]( reduce #( if(> %1 %2 ) %1 %2) v))", "user": "56c85700e4b0ed865f9758d0"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "5891bddce4b00487982d5201"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) (flatten (cons x xs))))", "user": "54f777a4e4b01ecee9d88820"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "58969076e4b00487982d52a2"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5896ade8e4b00487982d52a9"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "57887de2e4b0ebec4cfb751c"}, {"problem": 38, "code": "(fn \n  [& arg] (reduce (fn [x y] (if (> x y) x y)) arg))", "user": "5893c64ce4b00487982d524b"}, {"problem": 38, "code": "(fn [& mycol] (reduce (fn [a b] (if (> a b) a b)) mycol))", "user": "58950f29e4b00487982d5270"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57a6552ce4b0a96607956208"}, {"problem": 38, "code": "(fn [& args] (-> args sort last))", "user": "58987ee9e4b00487982d52d2"}, {"problem": 38, "code": "(fn [& x]\n  (reduce #(if (< %1 %2) %2 %1) x))", "user": "589cb617e4b00487982d536a"}, {"problem": 38, "code": "(fn mymax [num & lst]\n  (if (empty? lst)\n    num\n    (let [challenger (first lst)]\n      (if (> num challenger)\n        (apply mymax (cons num (rest lst)))\n        (apply mymax (cons challenger (rest lst)))))))", "user": "589c6914e4b00487982d535d"}, {"problem": 38, "code": "(fn [ & args ]\n   (reduce #(if (> %1 %2)\n              %1\n              %2)\n           0\n           args))", "user": "557b3f29e4b05c286339e0ac"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "5897dda4e4b00487982d52c8"}, {"problem": 38, "code": "#(last(sort %&))", "user": "57e016dce4b0bd073c202470"}, {"problem": 38, "code": "(fn [& s]\n  (reduce #(if (> %1 %2) %1 %2) s))", "user": "589e704ae4b02bd94d917e5e"}, {"problem": 38, "code": "(fn [& args](last (sort args)))", "user": "5794fd7be4b0e215f87e8476"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> b a) b a)) %&)", "user": "589f4387e4b02bd94d917e7b"}, {"problem": 38, "code": "(fn [x & y]\n  (reduce #(if (< %1 %2) %2 %1) x y))", "user": "5873eb5ae4b01531a375ea45"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (< %1 %2) %2 %1) args)\n)", "user": "587a2356e4b01531a375eade"}, {"problem": 38, "code": "(fn [& args] \n\t(last (sort args)))", "user": "58a0ca12e4b02bd94d917e9f"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2)\n          args))", "user": "5899c54de4b00487982d52fa"}, {"problem": 38, "code": "#(last (sort %&))", "user": "589dd2cce4b02bd94d917e48"}, {"problem": 38, "code": "(fn my-max [& args] (reduce #(if (> %2 %1) %2 %1) args))", "user": "58988cbbe4b00487982d52d7"}, {"problem": 38, "code": "(comp last sort list)", "user": "58a2b57fe4b02bd94d917ede"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "589ec900e4b02bd94d917e65"}, {"problem": 38, "code": "(fn my-max [x & rest]\n  (if (empty? rest)\n    x\n    (let [m (apply my-max rest)]\n      (if (> x m) x m))))", "user": "58a0fc33e4b02bd94d917ea3"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "58a47197e4b01a0c0b2328f9"}, {"problem": 38, "code": "(fn [& m] (reduce #(if (> %1 %2) %1 %2) m))", "user": "584aa803e4b089d5ab817ee9"}, {"problem": 38, "code": "#(last(sort %&))", "user": "58a579ebe4b01a0c0b23290f"}, {"problem": 38, "code": "(fn [& items]\n  (loop [items items max-item nil]\n    (if (= 0 (count items)) max-item\n      (if (or (not max-item) (> (first items) max-item))\n        (recur (rest items) (first items))\n        (recur (rest items) max-item)))))", "user": "58a31ecee4b02bd94d917ee7"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "58a5c5c2e4b01a0c0b23291b"}, {"problem": 38, "code": "#(last (sort %&))", "user": "58a35b1ee4b02bd94d917ef3"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "58951903e4b00487982d5274"}, {"problem": 38, "code": "(fn mymax\n  [first & rest]\n  (if (empty? rest)\n    first\n    (let [next (apply mymax rest)]\n      (if (> first next)\n        first\n        next))))", "user": "588e4e05e4b00487982d5188"}, {"problem": 38, "code": "(fn [& s]\n  (reduce #(if (> %1 %2) %1 %2) (first s) s))", "user": "58a5a099e4b01a0c0b232918"}, {"problem": 38, "code": "(fn [& nums] (reduce (fn [a e]\n                  (if (< a e)\n                    e\n                    a)\n                  ) nums))", "user": "58a413b5e4b02bd94d917f07"}, {"problem": 38, "code": "(fn [ & args ]\n  (let [ bigger (fn [left right]\n                  (if (> left right) left right)\n                  )]\n         \n         (reduce bigger args)\n         )\n  )", "user": "587fb546e4b0f1effa3b75f9"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "57a2d35be4b0c3d858beb907"}, {"problem": 38, "code": "(fn my-max ([a] a)\n  ([a b] (if (> a b) a b))\n  ([a b & more] (reduce my-max (my-max a b) more)))", "user": "588ce4aee4b05c141a2560a1"}, {"problem": 38, "code": "(fn my-max [& coll]\n  (reduce (fn [result next-el]\n            (if (> next-el result)\n              next-el\n              result))\n          coll))", "user": "580d2788e4b0849f6811b730"}, {"problem": 38, "code": "(fn get_max\n  [& args]\n  (first (sort-by - args))\n  )", "user": "58a44a14e4b01a0c0b2328f2"}, {"problem": 38, "code": "(fn foo[& args] (first(reverse(sort (apply conj nil args)))))", "user": "58a38d37e4b02bd94d917ef9"}, {"problem": 38, "code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) s))", "user": "54aede47e4b09f271ff37cfd"}, {"problem": 38, "code": "(fn[& args] (reduce #(if (> %1 %2) %1 %2) args ))", "user": "58a9e872e4b01a0c0b232973"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [ac x] (if (> x ac) x ac)) 0 xs))", "user": "589771f9e4b00487982d52bd"}, {"problem": 38, "code": "#(last (sort (lazy-seq %&)))", "user": "589f0087e4b02bd94d917e6d"}, {"problem": 38, "code": "#(last (sort %&))", "user": "58a32c21e4b02bd94d917eeb"}, {"problem": 38, "code": "(partial (comp last sort conj) '())", "user": "5760682ee4b08062f99a4e94"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (> %1 %2)\n             %1\n             %2) x xs))", "user": "58a953dae4b01a0c0b232968"}, {"problem": 38, "code": "(fn foo [x & xs]\n   (reduce #(if (> %1 %2) %1 %2) (cons x xs)))", "user": "507eed82e4b06ce648bcdbfe"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5895fb26e4b00487982d528e"}, {"problem": 38, "code": "(fn [& arg]\n   (letfn [(inner-fn [s max-num]\n             (if-let [f (first s)]\n               (let [max-num (if (> f max-num)\n                           f max-num)]\n                 (inner-fn (rest s) max-num))\n               max-num))]\n     (inner-fn (rest arg) (first arg))))", "user": "57689c23e4b0a07e8fc180d6"}, {"problem": 38, "code": "(fn [& s] (reduce (fn [a b] (if (> a b) a b)) s))", "user": "58730484e4b01531a375ea26"}, {"problem": 38, "code": "(fn [& n] (reduce #(if (> %2 %1) %2 %1) 0 n))", "user": "58ad4349e4b0ebc645576c9d"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "user": "58a55694e4b01a0c0b23290b"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2)\n             %1\n             %2) args))", "user": "58a216e8e4b02bd94d917ed1"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (>= %1 %2) %1 %2 ) args))", "user": "58b08eb2e4b0ebc645576ce2"}, {"problem": 38, "code": "(fn [& vals] (reduce #(if (> %1 %2) %1 %2) vals))", "user": "58b0bbc5e4b0ebc645576ce6"}, {"problem": 38, "code": "(fn f [& args]\n  (reduce #(if (> %2 %1) %2 %1) args))", "user": "58b06b7ce4b0ebc645576cdc"}, {"problem": 38, "code": "(fn [x & xs] ( reduce (fn [x y] (if(> x y) x y ) )x  xs) )", "user": "58ac513fe4b0005cfeb1a746"}, {"problem": 38, "code": "(fn \n  [& args]\n  (loop [maxx (first args)\n         _args args]\n    (if (empty? _args)\n      maxx\n      (recur (if (> maxx (first _args))\n               maxx \n               (first _args)) \n             (rest _args))\n      )))", "user": "5854580ce4b07779d46863f9"}, {"problem": 38, "code": "#(last (sort %&))", "user": "58b08f89e4b0ebc645576ce3"}, {"problem": 38, "code": "(fn mx\n  [& args]\n  (let [[x & more] args]\n    (cond (empty? more) x\n          (< x (first more)) (recur more)\n          :else (recur (conj (rest more) x)))))", "user": "58a3ba31e4b02bd94d917eff"}, {"problem": 38, "code": "(fn [& l] (last (sort l)))", "user": "58791973e4b01531a375eac5"}, {"problem": 38, "code": "(fn [& x] (first (sort > x)))", "user": "58a0fd0be4b02bd94d917ea4"}, {"problem": 38, "code": "(fn maxValue\n  ([a b] (last (sort [a b])))\n  ([a b c] (last (sort [a b c])))\n  ([a b c d] (last (sort [a b c d]))))", "user": "58b18ba0e4b0ebc645576cfa"}, {"problem": 38, "code": "(fn [& args]\n  (loop [m (first args)\n         r (rest args)]\n    (if (empty? r)\n      m\n      (if (> m (first r))\n        (recur m (rest r))\n        (recur (first r) (rest r))))))", "user": "58a822e4e4b01a0c0b232950"}, {"problem": 38, "code": "(fn [& args] (last(sort args)))", "user": "58b2f085e4b0ebc645576d15"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [m val] (if (> val m) val m)) 0 args))", "user": "55f1f0d1e4b06e875b46ce3b"}, {"problem": 38, "code": "(fn [& xs] (last (sort xs)))", "user": "58b397c3e4b0ebc645576d26"}, {"problem": 38, "code": "(fn [& args]\n  (reduce\n   (fn [x y] \n     (if (> x y)\n       x\n       y)) args ) )", "user": "58b066dee4b0ebc645576cd9"}, {"problem": 38, "code": "(fn [& l] (reduce #(if (> %2 %1) %2 %1) l))", "user": "58b51e05e4b0ebc645576d4c"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %2 %1) %2 %1) xs))", "user": "58637221e4b0f14aab7c881d"}, {"problem": 38, "code": "(fn [x & others]\n\n     (loop [m x\n            l others]\n       (if (empty? l)\n            m\n           (recur (if (>= m (first l))\n                    m\n                    (first l))\n                  (rest l))\n\n      )\n\n )\n)", "user": "57cc14aae4b05aa3c4741d4a"}, {"problem": 38, "code": "(fn [& numbers] (reduce (fn [a b] (if (> a b) a b)) numbers))", "user": "58b54852e4b0ebc645576d52"}, {"problem": 38, "code": "(fn [& xs] (last (sort xs)))", "user": "58b80ec1e4b0ebc645576d89"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "58b81490e4b0ebc645576d8c"}, {"problem": 38, "code": "(fn [& more] (reduce \n              (fn [x y] (if (< x y)\n                 y\n                 x)) more))", "user": "58934052e4b00487982d523a"}, {"problem": 38, "code": "(fn mymax [number & others]\n  (let [myvec (conj others number)] \n   (reduce #(if (> %1 %2) %1 %2)  myvec)\n    ) \n)", "user": "58a17511e4b02bd94d917eb4"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "58b8a3eae4b0888cdc949cb7"}, {"problem": 38, "code": "#(last(sort %&))", "user": "58b6d93ce4b0ebc645576d6c"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "58b4898de4b0ebc645576d3d"}, {"problem": 38, "code": "(fn [& values] (first (reverse (sort values))))", "user": "57b35ecbe4b0fbc9809a277e"}, {"problem": 38, "code": "(fn [& x]\n  (reduce\n   (fn [m e]\n     (if (> m e)\n       m\n       e))\n  (first x)\n  x))", "user": "5881d1c2e4b0f1effa3b7644"}, {"problem": 38, "code": "(fn _max\n  [& numbers]\n  (reduce\n   (fn\n     [result next]\n     (if (> result next)\n         result\n         next))\n   numbers))", "user": "54391a55e4b032a45b869319"}, {"problem": 38, "code": "(fn _max [x & xs]\n  (if\n    (empty? xs)\n    x\n    (let [m (apply _max xs)]\n    (if\n      (> x m)\n      x\n      m\n      ))))", "user": "58a82659e4b01a0c0b232951"}, {"problem": 38, "code": "(fn [x & xs]\n  (loop [xs   xs\n         res  x]\n    (if (empty? xs)\n      res\n      (let [cur (first xs)]\n        (recur\n          (rest xs)\n          (if (> cur res) cur res))))))", "user": "58ba8e7ce4b0888cdc949ce8"}, {"problem": 38, "code": "(fn [& nums]\n  (loop [m (first nums)\n         nlist (rest nums)]\n    (if (= '() nlist)\n      m\n      (recur\n       (if (> m (first nlist)) m (first nlist))\n       (rest nlist)))))", "user": "58aa3f02e4b01a0c0b23297d"}, {"problem": 38, "code": "(fn [& nums] (last (sort nums)))", "user": "56e11125e4b03a7c14b85a1f"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "58bc0531e4b0888cdc949d07"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce (fn [a b] (if (> b a) b a)) x xs))", "user": "58bb218be4b0888cdc949cf4"}, {"problem": 38, "code": "(fn \n  [& args] \n  (reduce #(if (> %1 %2) %1 %2) args)\n)", "user": "58bcecc9e4b0888cdc949d24"}, {"problem": 38, "code": "(fn my-max \n  [& args] \n  (reduce #(if (> %2 %1) %2 %1) 0 args))", "user": "4fe899a6e4b07c9f6fd12c54"}, {"problem": 38, "code": "(fn [& nums] (reduce #(if (> %1 %2) %1 %2) nums))", "user": "58bbcbc8e4b0888cdc949d00"}, {"problem": 38, "code": "(fn max-value [x & xs]\n  (reduce (fn [x y] (if (pos? (.compareTo y x)) y x)) x xs))", "user": "58884cc6e4b0f1effa3b770e"}, {"problem": 38, "code": "(fn [& args] (last(sort args)))", "user": "56a7be01e4b07966d5a8a05e"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "58bdb36fe4b0888cdc949d35"}, {"problem": 38, "code": "(fn [& lst]\n   (loop [a (first lst) tail (rest lst) mx ()]\n     (if (nil? a)\n       (first mx)\n       (recur (first tail) (rest tail)\n              (if (empty? mx) (cons a mx) (if (> a (first mx)) (cons a mx) mx)))\n       )\n     )\n   )", "user": "589e22fae4b02bd94d917e56"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "58aec8e1e4b0ebc645576cc1"}, {"problem": 38, "code": "(fn [& args]\n\t(loop [theargs args curmax nil]\n\t\t(if (= 0 (count theargs))\n\t\t\tcurmax\n\t\t\t(if (= nil curmax) \n\t\t\t\t(recur (rest theargs) (first theargs))\n\t\t\t\t(if (> (first theargs) curmax)\n\t\t\t\t\t(recur (rest theargs) (first theargs))\n\t\t\t\t\t(recur (rest theargs) curmax))))))", "user": "58b985e0e4b0888cdc949ccc"}, {"problem": 38, "code": "(fn [& numbers]\n  (loop [numbers numbers maximum (first numbers)]\n    (if (empty? numbers)\n      maximum\n      (let [current (first numbers) \n            bigger (if (> current maximum) current maximum)]\n          (recur (rest numbers) bigger)))))", "user": "575683aee4b02ea1147992dc"}, {"problem": 38, "code": "(fn [& args] (reduce \n              #(if \n                (> %1 %2)\n                %1 %2) \n              args))", "user": "58b1f51de4b0ebc645576d05"}, {"problem": 38, "code": "(fn [& params]\n  (last (sort params)))", "user": "58bef424e4b021aa9917eccb"}, {"problem": 38, "code": "(fn [& args]\n        (last (sort args)))", "user": "58765038e4b01531a375ea7e"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %2 %1) %2 %1) (first args) args))", "user": "58c1b4f5e4b021aa9917ed01"}, {"problem": 38, "code": "(fn [& x] (-> x sort last))", "user": "58c04ca5e4b021aa9917ece6"}, {"problem": 38, "code": "(comp last sort list)", "user": "58b3388ae4b0ebc645576d1e"}, {"problem": 38, "code": "#(last (sort %&))", "user": "589c0475e4b00487982d5351"}, {"problem": 38, "code": "(fn[& x] (first (sort > x)))", "user": "58ac14ebe4b0005cfeb1a740"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "58bc3202e4b0888cdc949d0b"}, {"problem": 38, "code": "(fn [& more]\n  (reduce (fn [x y] (if (> x y) x y))\n          more))", "user": "58bfa57ae4b021aa9917ecd8"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [a b]\n            (if (> b a)\n            b\n            a)) args))", "user": "58c3af4de4b021aa9917ed1b"}, {"problem": 38, "code": "(fn [& vals]\n  (reduce #(if (> %2 %1) %2 %1) (first vals) (rest vals)))", "user": "589ac5a2e4b00487982d5318"}, {"problem": 38, "code": "(fn mymax\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] (reduce mymax (mymax x y) more)))", "user": "58b989dbe4b0888cdc949ccd"}, {"problem": 38, "code": "(fn [& integers]\n      (last (sort (vec integers))))", "user": "568aa458e4b0dcc4269f4092"}, {"problem": 38, "code": "(fn my-max [max-value & rests]\n  (if-let [curr (first rests)]\n    (apply my-max (cons (if (> curr max-value) curr max-value) (rest rests)))\n    max-value))", "user": "56b41972e4b0982f16b37e1f"}, {"problem": 38, "code": "(fn [& list] (reduce (fn [x y] (if (> x y) x y)) list))", "user": "58b1bc99e4b0ebc645576d00"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [y x] (if (> x y) x y)) args))", "user": "58bc6a88e4b0888cdc949d16"}, {"problem": 38, "code": "(fn my-max [& col]\n  (reduce #(if (> %1 %2) %1 %2) col))", "user": "58c5a08be4b021aa9917ed40"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "57b7de74e4b0fbc9809a27d4"}, {"problem": 38, "code": "(fn [& coll] (reduce #(if (> % %2) % %2) (first coll) coll))", "user": "56375106e4b0bfe05bf117d3"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "58b86162e4b0ebc645576d97"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "58c8e0aae4b021aa9917ed95"}, {"problem": 38, "code": "(fn [& x] ( reduce #(if (> %1 %2 ) %1 %2) x))", "user": "58c7b921e4b021aa9917ed7c"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) Long/MIN_VALUE xs))", "user": "58c4b11ae4b021aa9917ed2c"}, {"problem": 38, "code": "(fn [& xs] (last (sort xs)))", "user": "58c2df0ae4b021aa9917ed17"}, {"problem": 38, "code": "(fn [& coll] (reduce #(\n                       (fn [x y] (if (> x y) x y))\n                           %1 %2) coll))", "user": "58b7eab9e4b0ebc645576d86"}, {"problem": 38, "code": "(fn [& x] \n  (let [coll (seq x)]\n  \t(reduce #(if (> %1 %2) %1 %2) x)))", "user": "58ca8a1de4b03c36ff7e5835"}, {"problem": 38, "code": "(fn [& args]\n  (last (apply sorted-set args)))", "user": "58b26da4e4b0ebc645576d0a"}, {"problem": 38, "code": ";(fn [& xs]\n;  (reduce\n;\t(fn [max-num x]\n;     (if (> x max-num) x max-num)) 0 xs))\n\n(fn [& xs] (-> xs sort last))", "user": "58c66990e4b021aa9917ed53"}, {"problem": 38, "code": "(fn [& args] (first (reverse (sort args))))", "user": "53882352e4b0640c7a9a5898"}, {"problem": 38, "code": "(fn [& y] (reduce #(if (< %1 %2) %2 %1) y))", "user": "56a80d8fe4b07966d5a8a06a"}, {"problem": 38, "code": "#(reduce (fn [x y]\n           (if (> x y)\n             x\n             y))\n         %&)", "user": "585aad0be4b0f14aab7c8753"}, {"problem": 38, "code": "(fn [& values] \n  (loop [mx (first values) res (drop 1 values)]\n    (if (empty? res)\n      mx\n      (recur (if (> (first res) mx)\n               (first res)\n               mx)\n             (drop 1 res)))))", "user": "56351709e4b0bfe05bf117c2"}, {"problem": 38, "code": "(fn maxval [& seq] (reduce (fn [x y] (if (> x y) x y)) seq))", "user": "58ca613de4b021aa9917edb7"}, {"problem": 38, "code": "(comp last sort list)", "user": "58946fa1e4b00487982d525b"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce #(if (> %1 %2) %1 %2) nums))", "user": "58c5ad55e4b021aa9917ed42"}, {"problem": 38, "code": "(fn myMax \n  ([] nil)\n  ([x] x)\n  ([x y & ys] (if (<= x y) \n                (apply myMax y ys)\n                (apply myMax x ys))))", "user": "58cf00c8e4b03c36ff7e58ac"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "588d224ae4b00487982d516c"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "58cfbd7ae4b03c36ff7e58ba"}, {"problem": 38, "code": "(fn [& nums]\n     (reduce \n       #(if \n          (> %1 %2) %1 %2) nums))", "user": "5841872be4b089d5ab817e06"}, {"problem": 38, "code": "(fn [& args] (->> args sort reverse first))", "user": "589c7c8ce4b00487982d5361"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "58cd6093e4b03c36ff7e5888"}, {"problem": 38, "code": "(fn biggest [x & xs]\n   (if \n     (not xs) x\n     (let [rest (apply biggest xs)]\n       (if (> x rest) x rest))))", "user": "58d2b7b3e4b03c36ff7e5908"}, {"problem": 38, "code": "(fn [& args] (last (sort (seq args))))", "user": "587a3babe4b01531a375eae2"}, {"problem": 38, "code": "(fn [& items] (reduce #(if(> % %2) % %2) items))", "user": "58d27bcae4b03c36ff7e58fe"}, {"problem": 38, "code": "(fn [& nums] (last (sort nums)))", "user": "58d3c3abe4b03c36ff7e5927"}, {"problem": 38, "code": "#(last (sort %& ) )", "user": "58c93089e4b021aa9917ed9b"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "56f3d21ae4b046a417f92055"}, {"problem": 38, "code": "(fn [& xs] (last (sort xs)))", "user": "58d737cee4b03c36ff7e5982"}, {"problem": 38, "code": "(fn [& params] (reduce #(if(< %1 %2)%2 %1) (into [] params)))", "user": "57252172e4b0c5bde472c109"}, {"problem": 38, "code": "(fn [& input] (reduce (fn [a b] (if (> a b) a b)) input))", "user": "58809253e4b0f1effa3b7618"}, {"problem": 38, "code": "(fn mx-val [& qs] \n  (reduce (fn mx [x y]\n          (if (> x y)\n            x\n            y))\n        qs))", "user": "58d4e73ce4b03c36ff7e594d"}, {"problem": 38, "code": "#(first (sort > %&))", "user": "58cd4949e4b03c36ff7e5886"}, {"problem": 38, "code": "(fn [& nums]\n    (loop [remainder nums maximum (first nums)]\n          (if (empty? remainder)\n              maximum\n              (let [[first & others] remainder]\n                   (if (> first maximum)\n                       (recur others first)\n                       (recur others maximum))))))", "user": "58d3d6a3e4b03c36ff7e592b"}, {"problem": 38, "code": "(fn max-items [& items]\n  (loop [col items\n         new-max 0]\n    (if (empty? col)\n      new-max\n      (recur (rest col) \n             (let [x (first col)]\n               (if (> x new-max)\n               x\n               new-max))))))", "user": "58daae01e4b0a4d5acaab664"}, {"problem": 38, "code": "(fn [frst & vals] \n  (reduce #(if (> %1 %2) %1 %2)\n          frst\n          vals) )", "user": "58acce0ae4b0005cfeb1a754"}, {"problem": 38, "code": "(fn [& args]\n  (let [find-max (fn [current-max list] \n    (if (empty? list) current-max \n      (let [first (first list) \n            rest (rest list)] \n        (if (> current-max first) \n          (recur current-max rest) \n          (recur first rest)))))]\n    (if (empty? args) nil\n      (find-max (first args) (rest args)))))", "user": "56326995e4b0bfe05bf117a3"}, {"problem": 38, "code": "(fn [m & col]\n    (if (empty? col)\n      m \n      (let [[ elem & col] col]\n        (if (> m elem)\n          (recur m col)\n          (recur elem col)))\n      )\n)", "user": "58d6caf5e4b03c36ff7e5975"}, {"problem": 38, "code": "(fn [& nums] \n  (reduce (fn [a b] \n            (if (> a b) a b))\n          nums))", "user": "58dc81d1e4b0a4d5acaab69e"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a acc] (if (> a acc) a acc)) args))", "user": "588906a9e4b0f1effa3b772a"}, {"problem": 38, "code": "(fn max-val [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) (flatten (cons x xs))))", "user": "58dcb8cde4b0a4d5acaab6a7"}, {"problem": 38, "code": "(fn [& x]\n  (reduce\n   (fn [a b] (if (> a b) a b))\n   x))", "user": "5568749ae4b0c656e3ff1854"}, {"problem": 38, "code": "(fn [& etc] (reduce (fn [a b] (if (> a b) a b)) etc))", "user": "58dcf11ae4b0a4d5acaab6af"}, {"problem": 38, "code": "#(reduce (fn[x y] (if (< x y) y x)) %&)", "user": "58d71ef5e4b03c36ff7e597f"}, {"problem": 38, "code": "(fn [& params] (reduce (fn _max [a b] (if (> a b) a b)) params ))", "user": "58db362be4b0a4d5acaab675"}, {"problem": 38, "code": "(fn [& r]\n  (reduce #(if (> %1 %2) \n             %1\n          \t %2)\n          r)\n  )", "user": "55c4e30be4b0e31453f649a6"}, {"problem": 38, "code": "(fn [x & rest] (->> (conj rest x) (sort) (reverse) (first)))", "user": "58d4f44ee4b03c36ff7e594f"}, {"problem": 38, "code": "(fn [& therest] (reduce #(if (> %1 %2) %1 %2 ) therest))", "user": "58d28c70e4b03c36ff7e5901"}, {"problem": 38, "code": "(fn [& args]\n  (first (sort > args)))", "user": "58df05ffe4b0a4d5acaab706"}, {"problem": 38, "code": "#(loop [m (first %&) coll %&]\n   (if (seq coll)\n     (recur (if (> m (first coll))\n              m\n              (first coll))\n            (rest coll))\n     m))", "user": "58dcae01e4b0a4d5acaab6a4"}, {"problem": 38, "code": "#(reduce (fn [big cur] (if (> big cur) big cur)) %&)", "user": "58dede54e4b0a4d5acaab702"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "58de563fe4b0a4d5acaab6e3"}, {"problem": 38, "code": "(fn [& input]\n  (loop [i input max-find (first input)]\n    (if (empty? (filter #(> % max-find) input))\n      max-find\n      (recur (rest input) (second input)))))", "user": "57dd651ee4b0bd073c202441"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "5885eb2de4b0f1effa3b76c6"}, {"problem": 38, "code": "(fn [& args]\n(last (sort args)))", "user": "58dd21a9e4b0a4d5acaab6b3"}, {"problem": 38, "code": "(fn [& rest](last (sort rest)))", "user": "58e0ca7be4b005f69f193c6c"}, {"problem": 38, "code": "(fn [& l] (first (sort > l)))", "user": "58dbfb24e4b0a4d5acaab690"}, {"problem": 38, "code": "(fn [& args]\n  (reduce\n    (fn [acc num]\n      (if (> acc num) acc num))\n    -1\n    args))", "user": "57168a0de4b07c98581c3afb"}, {"problem": 38, "code": "#(last (sort (vec %&)))", "user": "58cba946e4b03c36ff7e584f"}, {"problem": 38, "code": "(fn [& xs] (->> xs\n                       (map -)\n                       (apply min)\n                       (- )))", "user": "58e37946e4b005f69f193cae"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "58e4eb80e4b056aecfd47c7a"}, {"problem": 38, "code": "(fn [x & y]\n  (reduce #(if (< %1 %2) %2 %1) x y))", "user": "58d0e919e4b03c36ff7e58d8"}, {"problem": 38, "code": "#(last (sort %&))", "user": "58e51bc5e4b056aecfd47c86"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "57e2e1bde4b0bfb2137f5a8f"}, {"problem": 38, "code": "(fn [& args](reduce (fn [top nxt]\n                      (if (> nxt top)\n                        nxt\n                        top)) args))", "user": "55efc291e4b066087aa9453d"}, {"problem": 38, "code": "#(last (sort %&))", "user": "58e58ae9e4b056aecfd47c9a"}, {"problem": 38, "code": "(fn\n  [& remaining]\n  (last (sort remaining)))", "user": "58e56633e4b056aecfd47c94"}, {"problem": 38, "code": "(fn [& args] \n  (reduce \n   (fn [ret elem]\n     (if (> elem ret)\n       elem\n       ret))\n   args))", "user": "56ca2f25e4b0ea9b8538f716"}, {"problem": 38, "code": "(fn [& vals] (reduce #(if (> %1 %2) %1 %2) vals))", "user": "58aa8083e4b01a0c0b232985"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "562108d0e4b064ca9f4b16e9"}, {"problem": 38, "code": "#(last (sort %&))", "user": "58e66350e4b056aecfd47cb2"}, {"problem": 38, "code": "(fn my_max\n  ([x y] (if (< x y) y x))\n  ([x y & more] (reduce my_max (my_max x y) more))\n  )", "user": "58dd20dae4b0a4d5acaab6b2"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "58e56154e4b056aecfd47c92"}, {"problem": 38, "code": "(fn [& args]\n  (reduce\n   (fn [max-item item]\n     (if (> item max-item)\n       item\n       max-item))\n   args))", "user": "58e2e11ce4b005f69f193ca0"}, {"problem": 38, "code": "(fn [& inseq] (reduce (fn [a s] (if (> a s) a s)) inseq))", "user": "58cbdc3be4b03c36ff7e5856"}, {"problem": 38, "code": "(fn([& a] (reduce #(if (> %2 %1) %2 %1) 0 a)))", "user": "58e5fbbae4b056aecfd47ca6"}, {"problem": 38, "code": "(fn \n  [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "54fdb4b9e4b07d26eda61d3a"}, {"problem": 38, "code": "#(last(sort %&))", "user": "58e5e585e4b056aecfd47ca2"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "58e762d3e4b056aecfd47ccc"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [acc cur]\n            (if (> cur acc)\n              cur\n              acc))\n          args))", "user": "58e45a2ce4b056aecfd47c69"}, {"problem": 38, "code": "(fn  [x & args]\n (reduce (fn [x y] (if (> x y) x y)) x args))", "user": "58e6a2c5e4b056aecfd47cba"}, {"problem": 38, "code": "#(last (sort %&))", "user": "58e256e1e4b005f69f193c90"}, {"problem": 38, "code": "(fn [& arg] (reduce #(if (> %1 %2) %1 %2) arg))", "user": "58e7229fe4b056aecfd47cc4"}, {"problem": 38, "code": "(fn get_max [& numbers]\n  ((fn get_max_ [numbers_]\n    (let [head (first numbers_), tail (rest numbers_)]\n      (if (= (count numbers_) 1)\n        head\n        (let [max_of_tail (get_max_ tail)]\n          (if (> head max_of_tail)\n            head\n            max_of_tail)))))\n    numbers))", "user": "58e980dfe4b056aecfd47d0b"}, {"problem": 38, "code": "(fn [& x]\n  (loop [maxi (first x)\n         [head & tail] (rest x)]\n    (if (seq tail)\n      (if (> head maxi)\n        (recur head tail)\n        (recur maxi tail))\n      maxi)))", "user": "58e63b75e4b056aecfd47cac"}, {"problem": 38, "code": "#(last (sort  %&) )", "user": "58e5f995e4b056aecfd47ca5"}, {"problem": 38, "code": "(comp last sort list)", "user": "58ea39c6e4b056aecfd47d19"}, {"problem": 38, "code": "(fn [& nums] (reduce (fn [a c] (if (< a c) c a)) nums))", "user": "58acca5ee4b0005cfeb1a753"}, {"problem": 38, "code": "(fn xx [& coll]\n  (last (sort coll)))", "user": "58e63de2e4b056aecfd47cad"}, {"problem": 38, "code": "(fn [& nums]\n  (loop [n nums mx -1]\n    (if (empty? n)\n      mx\n      (recur (rest n) (if (> (first n) mx) (first n) mx)))))", "user": "57d8a1dee4b0bd073c2023ee"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5803fb08e4b0a837a8b30c9b"}, {"problem": 38, "code": "(fn [& m] (last (sort m)))", "user": "58d1fe17e4b03c36ff7e58f5"}, {"problem": 38, "code": "(fn [& params]\n        (reduce\n            (fn [x y]\n                (if\n                    (> y x) y x ))\n            0\n            (vec params)))", "user": "58e325f3e4b005f69f193ca7"}, {"problem": 38, "code": "(fn [& more] (last (sort more)))", "user": "576ffcb9e4b0979f89651592"}, {"problem": 38, "code": "(fn [& coll]\n  (reduce #(if (> %1 %2) %1 %2) coll))", "user": "58ebae90e4b056aecfd47d44"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "58ec8c7ae4b056aecfd47d64"}, {"problem": 38, "code": "#(last( sort %&))", "user": "58eba5cce4b056aecfd47d41"}, {"problem": 38, "code": "(fn max- [& args]\n  (reduce (fn [t v]\n            (if (> t v) t v)) args))", "user": "58edaa3be4b056aecfd47d89"}, {"problem": 38, "code": "(comp last sort list)", "user": "58edea3be4b056aecfd47d91"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "58447708e4b089d5ab817e4b"}, {"problem": 38, "code": "(fn my-max [& args]\n  (first (sort > args)))", "user": "58ed713de4b056aecfd47d84"}, {"problem": 38, "code": "(fn [& l] (reduce (fn [x y] (if (> x y) x y)) l))", "user": "58e9d9eee4b056aecfd47d10"}, {"problem": 38, "code": "(fn [x & xs]\n         (loop [xl xs\n                m x]\n           (if (empty? xl)\n             m\n             (if (> (first xl) m) \n               (recur (rest xl) (first xl))\n               (recur (rest xl) m)))))", "user": "58c4492be4b021aa9917ed27"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "56eca64fe4b04a395b9a043d"}, {"problem": 38, "code": "(fn max-val [& args]\n  (reduce (fn [v n]\n            (if (> n v) n v))\n          (first args) args))", "user": "58ee9b14e4b056aecfd47db0"}, {"problem": 38, "code": "(fn m [x y & rest]\n  (if rest\n    (apply m (conj rest (m x y)))\n    (if (> x y) x y)))", "user": "57ffd1a9e4b0a837a8b30c2a"}, {"problem": 38, "code": "(let [greater #(if (> %1 %2) %1 %2)]\n    (fn [n & args]\n      (loop [best n tail args]\n        (if (empty? tail)\n          best\n          (recur (greater best (first tail)) (rest tail))\n          )\n        )\n      )\n    )", "user": "58ec1e63e4b056aecfd47d54"}, {"problem": 38, "code": "(fn [& rest] (reduce (fn [x y] (if (> x y) x y)) rest))", "user": "58f00639e4b056aecfd47ddc"}, {"problem": 38, "code": "(fn [& params]\n  (reduce (fn [acc item]\n            (if (> acc item)\n              acc\n              item))\n          params))", "user": "58ee5371e4b056aecfd47da8"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "53cd5cd5e4b00fb29b2212e1"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [x y] (if (< x y) y x)) xs))", "user": "5782018de4b0d36ec5835e8e"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "58eed4c5e4b056aecfd47db7"}, {"problem": 38, "code": "#(loop [x (first %&) y (rest %&)]\n   (if (empty? y)\n     x\n     (recur (if (< x (first y)) (first y) x) (rest y))))", "user": "5895385fe4b00487982d5279"}, {"problem": 38, "code": "(fn [& args] \r\n    (reduce #(if (>= 0 (- %1 %2)) \r\n                %2\r\n                %1) \r\n            args))", "user": "58f2e8fbe4b0438e51c2ce94"}, {"problem": 38, "code": "(fn max-list [x & xs]\n  (reduce #(if (< %1 %2) %2 %1)\n          (flatten (cons x xs))))", "user": "58e965b3e4b056aecfd47d08"}, {"problem": 38, "code": "(comp last sort list)", "user": "58ee0bb6e4b056aecfd47d97"}, {"problem": 38, "code": "(fn [& xs] \n  (reduce (fn [x y] (if (> x y) x y))\n          xs))", "user": "58ef4db9e4b056aecfd47dc6"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (< x y) y x)) args))", "user": "58f273d9e4b08e1cf3471d01"}, {"problem": 38, "code": "(fn [& numbers]\n  (reduce #(if (> %1 %2) %1 %2) numbers))", "user": "58f25609e4b08e1cf3471cff"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "589f37e0e4b02bd94d917e79"}, {"problem": 38, "code": "(comp last sort list)", "user": "58f5689de4b0438e51c2ced7"}, {"problem": 38, "code": "(fn [& args] (first (reverse (sort args))))", "user": "5796d3ebe4b039eba2ecb0ee"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "user": "58eac340e4b056aecfd47d24"}, {"problem": 38, "code": "#(last(sort%&))", "user": "58f45ea0e4b0438e51c2cebc"}, {"problem": 38, "code": "(fn top-one [& args] (last (sort args)))", "user": "58f60c5ae4b0438e51c2cee8"}, {"problem": 38, "code": "(fn maximum\n  [& numbers]\n  (loop [m (first numbers) remain (rest numbers)]\n    (if (empty? remain)\n      m\n      (let [current (first remain)]\n        (if (< m current)\n          (recur current (rest remain))\n          (recur m (rest remain)))))))", "user": "578bbd3ee4b0ebec4cfb754e"}, {"problem": 38, "code": "(fn [& args]\n   (reduce\n    #(if (> %2 %1) %2 %1)\n    0\n    args))", "user": "51a3be77e4b0e77c4ca60bf8"}, {"problem": 38, "code": "(comp last sort list)", "user": "524ac3d1e4b09eba1c0223a0"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (> %1 %2) %1 %2) x xs))", "user": "5567f164e4b0c656e3ff184d"}, {"problem": 38, "code": "(fn [& args]\n     (reduce #(if (> %1 %2)\n                  %1\n                  %2) args))", "user": "55afe57ae4b002ce9d5cbc1c"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [current next] \n            (if (> current next) current next))\n    args))", "user": "56fbacc5e4b07572ad1a88d3"}, {"problem": 38, "code": "#(last (sort %&))", "user": "58f75bf8e4b0438e51c2cf13"}, {"problem": 38, "code": "#(first (sort > %&))", "user": "58ac1135e4b0005cfeb1a73f"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "58f1971ce4b08e1cf3471cee"}, {"problem": 38, "code": "(fn jmax [x & xs]\n  (if xs\n    (if (< x (first xs))\n      (apply jmax xs)\n      (apply jmax (conj (rest xs) x)))\n    x))", "user": "56785a48e4b05957ce8c6179"}, {"problem": 38, "code": "(fn [x & xs]\n  (loop [x x xs xs M x]\n    (if-not x\n      M\n      (if (< M x)\n        (recur (first xs) (next xs) x)\n        (recur (first xs) (next xs) M)))))", "user": "589f2cefe4b02bd94d917e75"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "58cfb517e4b03c36ff7e58b9"}, {"problem": 38, "code": "(fn [& r] (last (sort r)))", "user": "58f3a2d4e4b0438e51c2ceac"}, {"problem": 38, "code": "(fn [& nums] (last (sort (seq nums))))", "user": "58d5c245e4b03c36ff7e5964"}, {"problem": 38, "code": "#(last (sort %&))", "user": "53dbca12e4b094d41abdfef6"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "58fc92c5e4b0438e51c2cf9a"}, {"problem": 38, "code": "(fn get-max [& nums] (reduce (fn [m num] (if (> num m) num m)) 0 nums))", "user": "58f7dfe6e4b0438e51c2cf1f"}, {"problem": 38, "code": "(fn [& a]\n  (reduce\n    (fn\n      [x y]\n      (if (> x y) x y)\n      )\n   a\n  )\n)", "user": "58fe40afe4b0438e51c2cfca"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "58d9772de4b0a4d5acaab63c"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> y x) y x)) args))", "user": "58bcea23e4b0888cdc949d23"}, {"problem": 38, "code": "#(last (sort %&))", "user": "58fad8fae4b0438e51c2cf6a"}, {"problem": 38, "code": "(fn [num & nums]\n  (reduce\n   #(if (> %1 %2) %1 %2)\n   num\n   nums\n   ))", "user": "58db097fe4b0a4d5acaab66f"}, {"problem": 38, "code": "(comp last sort list)", "user": "58fd4c41e4b0438e51c2cfae"}, {"problem": 38, "code": "(fn([& args] (reduce #(or (and (> % %2) %) %2) args)))", "user": "58af7e3be4b0ebc645576ccd"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "585a9a16e4b0f14aab7c8752"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce #(if (> %1 %2)\n             %1\n             %2) nums))", "user": "58ffac9de4b0438e51c2cffd"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "590088bfe4b0438e51c2d026"}, {"problem": 38, "code": "(fn [& more]\n  (reduce (fn [x y] (if (> x y) x y)) more))", "user": "58d48df8e4b03c36ff7e5941"}, {"problem": 38, "code": "(fn my-max [& args]\n  (reduce (fn [acc x] (if (> x acc) x acc)) args))", "user": "56c5d55ce4b05cc29241eeab"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %2 %1) %2 %1) args))", "user": "58fff18be4b0438e51c2d00c"}, {"problem": 38, "code": "#(reduce (fn [a n] (if (> a n) a n)) %&)", "user": "58fdbf59e4b0438e51c2cfbc"}, {"problem": 38, "code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) coll))", "user": "58f8d79ee4b0438e51c2cf39"}, {"problem": 38, "code": "(fn [& x]\n  (let [g (fn f [lst curmax]\n            (if (empty? lst)\n              curmax\n              (if (> (first lst) curmax)\n                     (f (rest lst) (first lst))\n                     (f (rest lst) curmax))))]\n    (g x 0)))", "user": "574b4f3ee4b02ea114799207"}, {"problem": 38, "code": "(fn [& s] (reduce #(if (> %2 %1) %2 %1) s))", "user": "5901158de4b0438e51c2d039"}, {"problem": 38, "code": "(fn [& c]\n  (first (sort > c)))", "user": "57614a42e4b0994c1922fb85"}, {"problem": 38, "code": "(fn [& nums]\n  (first (reduce (fn [new-list item]\n                   (if (or (empty? new-list) (> item (first new-list)))  \n                     (vector item)\n                     new-list)) [] nums)))", "user": "58fc52cee4b0438e51c2cf95"}, {"problem": 38, "code": "(fn [& args]\n  (loop [head (first args)\n         tail (rest args)]\n    (if (empty? tail)\n      head\n      (if (> head (first tail))\n        (recur head (rest tail))\n        (recur (first tail) (rest tail))))))", "user": "560124b0e4b04bb52996e17b"}, {"problem": 38, "code": "(comp last sort list)", "user": "59032c0fe4b022d14a2aaf9f"}, {"problem": 38, "code": "(fn [& l]\n  (-> l\n\t(sort)\n  \t(reverse)\n      (first)))", "user": "58f3c18ee4b0438e51c2cead"}, {"problem": 38, "code": "#(last (sort %&))", "user": "59035914e4b022d14a2aafaa"}, {"problem": 38, "code": "(fn mmax [& args] (reduce #(if (pos? (- % %2)) % %2) 0 args))", "user": "5900d5cde4b0438e51c2d02e"}, {"problem": 38, "code": "(fn [& x]\n  (loop [y x\n         z 0]\n    (if (empty? y)\n      z\n      (if (< z (first y))\n      (recur (rest y) (first y))\n      (recur (rest y) z)))\n    ))", "user": "589772f7e4b00487982d52be"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [result value]\n            (if (> value result)\n              value\n              result))\n          0\n          args))", "user": "58a16387e4b02bd94d917eb1"}, {"problem": 38, "code": "(fn [& args](reduce #(if (> %1 %2) %1 %2) args))", "user": "59074b7ce4b047aa04b19951"}, {"problem": 38, "code": "#(last (sort %&))", "user": "58f286e1e4b08e1cf3471d04"}, {"problem": 38, "code": "(fn [& coll]\n  (loop [[head & tail] coll\n         maximum head]\n    (let [new-max (if (> head maximum) head maximum)]\n      (if (empty? tail)\n        new-max\n        (recur tail new-max)\n      )\n    )\n  )\n)", "user": "59073e0fe4b047aa04b19950"}, {"problem": 38, "code": "(fn [& more] (last (sort more)))", "user": "589b98fae4b00487982d533c"}, {"problem": 38, "code": "(fn [& args] (last (sort (vec args))))", "user": "58eadeafe4b056aecfd47d28"}, {"problem": 38, "code": "(fn bigger [& items]\n  (reduce (fn [x xs] (cond\n                      (= nil x) xs\n                      (> xs x) xs\n                      :else x)) nil items))", "user": "59075e3be4b047aa04b19955"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5908b36be4b047aa04b19982"}, {"problem": 38, "code": "(fn [& args] \n  (reduce #(if (> %1 %2) %1 %2)\n          0\n          args))", "user": "590253e3e4b0438e51c2d055"}, {"problem": 38, "code": "#(first (sort > %&))\n\n;; Old solution\n;;(fn [& args] (letfn [(larger [l r] \n;;                  (if (> l r) l r))]\n;;  (reduce larger args)))", "user": "5552780ce4b0deb715856df4"}, {"problem": 38, "code": "#(last (sort %&))", "user": "54d2159fe4b0e8a36923e5ed"}, {"problem": 38, "code": "(fn [ & more ] (last (sort  more)))", "user": "59085adfe4b047aa04b19972"}, {"problem": 38, "code": "(fn [& params]\n   (reduce (fn [res it]\n             (if (> it res) it res)) -1 params))", "user": "590b3aeae4b047aa04b199d0"}, {"problem": 38, "code": "#(last (sort < %&))", "user": "590b055ae4b047aa04b199c9"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "590cc457e4b047aa04b199f4"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "58f9fde7e4b0438e51c2cf56"}, {"problem": 38, "code": "#(last (sort %&))", "user": "534ffbafe4b084c2834f4ad2"}, {"problem": 38, "code": "(fn [& args] \n  (reduce \n   (fn [a b] (if (> a b) a b))\n   (first args)\n   args))", "user": "59096794e4b047aa04b1999e"}, {"problem": 38, "code": "#(last (sort %&))", "user": "590d0c31e4b047aa04b199fb"}, {"problem": 38, "code": "#(last (sort %&))", "user": "590d0bc8e4b047aa04b199fa"}, {"problem": 38, "code": "(fn my-max\n  [x & y]\n  (loop [max-so-far x\n         remaining-params y]\n    (if (empty? remaining-params)\n      max-so-far\n    (let [max-candidate (first remaining-params)]\n      (if (> max-candidate max-so-far)\n        (recur max-candidate (rest remaining-params))\n        (recur max-so-far (rest remaining-params)))))))", "user": "59077d7be4b047aa04b1995b"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %2 %) %2 %) xs))", "user": "590e588ce4b047aa04b19a23"}, {"problem": 38, "code": "(fn [& nums] (last (sort nums)))", "user": "58dadf46e4b0a4d5acaab66b"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "5908882de4b047aa04b19979"}, {"problem": 38, "code": "(fn [& xs] (->> xs (sort) (reverse) (first)))", "user": "5911eb44e4b0163c97b36ee1"}, {"problem": 38, "code": "(comp last sort list)", "user": "58ebd10de4b056aecfd47d49"}, {"problem": 38, "code": "(fn [& col] (reduce #(if (> %1 %2) %1 %2) 0 col))", "user": "58ab572be4b0005cfeb1a72b"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "591072e0e4b0163c97b36ebc"}, {"problem": 38, "code": "(fn [& args] \n  (reduce (fn [x y] (if (> x y) x y)) 0\n   (apply list args)))", "user": "59129074e4b0163c97b36ef1"}, {"problem": 38, "code": "(fn [& args] \n  (reduce \n   (fn [maxValue x] \n     (if (> x maxValue) x maxValue))\n   0 args))", "user": "591326f2e4b0163c97b36efc"}, {"problem": 38, "code": "(fn [& colls] (reduce #(if (>= %1 %2) %1 %2) colls))", "user": "5640b135e4b08d4f616f5ee8"}, {"problem": 38, "code": "#(last(sort %&))", "user": "5913375de4b0163c97b36efe"}, {"problem": 38, "code": "(fn [x & y] (reduce #(if (< %1 %2) %2 %1) x y))", "user": "5910a43de4b0163c97b36ebf"}, {"problem": 38, "code": "(fn [& x] (reduce (fn [acc,curr] (if (> acc curr ) acc curr)) x))", "user": "58ffaddee4b0438e51c2cffe"}, {"problem": 38, "code": "(fn [& all] (reduce #(if (> %1 %2) %1 %2) all))", "user": "59156f0be4b0163c97b36f3d"}, {"problem": 38, "code": "#(last (sort %&))", "user": "58e0a760e4b005f69f193c69"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (< %1 %2) %2 %1) xs))", "user": "590c449ae4b047aa04b199ea"}, {"problem": 38, "code": "(fn [& x] \n  (reduce (fn [a b] \n\t(if (> a b)\n      a\n      b\n     )\n  ) 0 x)\n)", "user": "5822b578e4b04b46fc4b0fa4"}, {"problem": 38, "code": "(fn [& values]\n  (reduce \n    (fn [x y] (if (> x y) x y))\n    values))", "user": "5918b824e4b09b4ee5954bb9"}, {"problem": 38, "code": "(fn myfunc[& args]  (last (sort  args)\n                               \n                          )\n  )", "user": "53d5d43ce4b0e771c302544d"}, {"problem": 38, "code": "(fn [& vals]\n  (->> vals sort last))", "user": "59199cc3e4b09b4ee5954bc8"}, {"problem": 38, "code": "(fn [& others] (last (sort others)))", "user": "5918db70e4b09b4ee5954bbb"}, {"problem": 38, "code": "(fn [ & args]\n  (last (sort args)))", "user": "56f45469e4b046a417f9205c"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5919d209e4b09b4ee5954bcc"}, {"problem": 38, "code": "(fn\n  [first & rest]\n  (reduce (fn [m v] \n            (if (>= m v)\n              m\n              v)) first rest))", "user": "58dfce9fe4b0a4d5acaab723"}, {"problem": 38, "code": "(fn [& x] (last(sort x)))", "user": "5916412ee4b09b4ee5954b87"}, {"problem": 38, "code": "(fn maax [x & xn] (if (empty? xn) x (if (>= x (apply maax xn)) x (apply maax xn))))", "user": "59078134e4b047aa04b1995c"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> % %2) % %2) xs))", "user": "58f44c07e4b0438e51c2ceb7"}, {"problem": 38, "code": "(fn \n\t[& coll]\n\t(reduce\n\t\t(fn [a b]\n\t\t\t(if (> a b)\n\t\t\t\ta\n\t\t\t\tb))\n\t\tcoll))", "user": "58fb7d7ae4b0438e51c2cf7a"}, {"problem": 38, "code": "(fn [& args]\n  (first (reverse (sort args))))", "user": "591ac8ece4b09b4ee5954bdd"}, {"problem": 38, "code": "(fn this [& x]\n     (reduce (fn [x y]\n                (cond\n                  (> x y) x\n                  :else y\n                  )) x)\n    )", "user": "59165082e4b09b4ee5954b88"}, {"problem": 38, "code": "(fn [& rest] (reduce (fn [a b] (if (> a b) a b )) (vec rest)))", "user": "59175adde4b09b4ee5954b9a"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) (flatten (cons x xs))))", "user": "591c2f4ee4b09b4ee5954bfc"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "58ee2c14e4b056aecfd47d9e"}, {"problem": 38, "code": "(fn\n  [x & nums]\n  (let [y (first nums)]\n  (if-not (seq nums)\n \t\t x\n   (let [new-max (if (< x y)\n                   y\n                   x)]\n    (recur new-max (rest nums))\n         ))\n           )\n    )", "user": "5676d83ae4b05957ce8c615c"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "user": "4f29d9abe4b0d6649770a034"}, {"problem": 38, "code": "(fn\n  [& x] \n  (reduce (fn [x y] (if (> x y) x y)) x)\n )", "user": "591d7ef9e4b09b4ee5954c18"}, {"problem": 38, "code": "(fn [& args]\n  (loop [x args m 0]\n    (if (empty? x)\n      m\n      (recur (next x) (if (> (first x) m) (first x) m)))))", "user": "59203996e4b09b4ee5954c5b"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "user": "55e81430e4b0121d4835fd88"}, {"problem": 38, "code": "(fn my-max [& args]\n  \t(loop [curr-max (first args) curr-list args]\n      (if (= curr-list [])\n        curr-max\n        (recur \n         (if (> (first curr-list) curr-max)\n           (first curr-list)\n           curr-max)\n         (rest curr-list)\n         )\n  )))", "user": "5907a736e4b047aa04b1995e"}, {"problem": 38, "code": "(fn [& args] (-> args (sort) (last)))", "user": "5531ec1fe4b09218d5f44f77"}, {"problem": 38, "code": "(fn a [x & xs]\n  (if (seq xs)\n    (if (> (apply a xs) x)\n      (apply a xs)\n      x)\n    x\n    )\n    \n )", "user": "5921a080e4b09b4ee5954c77"}, {"problem": 38, "code": "(fn [x & xs]\n   (reduce #(if (< %1 %2) \n              %2 \n              %1) \n     x xs))", "user": "591cbc30e4b09b4ee5954c08"}, {"problem": 38, "code": "(fn [& items] (reduce #(if (> %1 %2) %1 %2) items))", "user": "591f05b4e4b09b4ee5954c42"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [result x] (if (< result x) x result))\n          args))", "user": "59225498e4b09b4ee5954c8c"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "591f5124e4b09b4ee5954c45"}, {"problem": 38, "code": "(fn [& s] (->> s (map #(* -1 %))(apply min)(* -1)))", "user": "57f2bf56e4b0511f1d294df8"}, {"problem": 38, "code": "(fn [& args] (* -1 (apply min (map (partial * -1) args))))", "user": "59234753e4b0a390037439ef"}, {"problem": 38, "code": "(fn [& elements] (last (sort elements)))", "user": "58ffbabce4b0438e51c2d002"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "576aea4fe4b0a07e8fc18126"}, {"problem": 38, "code": "(fn [& args]\n   \n  (loop [maxvalue 0,data args]\n    (if (= data '()) \n     maxvalue\n     (recur (if (< maxvalue (first data)) (first data) maxvalue) (rest data)  )\n      )\n    )      \n  )", "user": "59228b00e4b026ae38521281"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "52f762ece4b047fd55836fc2"}, {"problem": 38, "code": "(fn [& args]\n  (loop [max-val 0 rest-args args]\n        (if (= 0 (count rest-args))\n            max-val\n            (let [next-val (first rest-args)]\n                 (if (> max-val next-val)\n                     (recur max-val (rest rest-args))\n                     (recur next-val (rest rest-args)))))))", "user": "5911aa1de4b0163c97b36ed8"}, {"problem": 38, "code": ";(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))\n\n#(-> %& sort last)", "user": "58d2af83e4b03c36ff7e5907"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [a b]\n            (if (> a b)\n              a b))\n          args))", "user": "58ef93ece4b056aecfd47dca"}, {"problem": 38, "code": "(fn [& xs] (last (sort xs)))", "user": "4db1b3951254ad5b4805fa6f"}, {"problem": 38, "code": "(fn [& x] (-> x sort last))", "user": "57f17cb5e4b0bfb2137f5c0b"}, {"problem": 38, "code": "(fn [& s]\n  (loop [c s\n         m (first s)]\n    (if (empty? c)\n      m\n      (let [f (first c)]\n        (recur (rest c) (if (> f m) f m))))))", "user": "4f6a90f4e4b07046d9f4ef9d"}, {"problem": 38, "code": "(fn [& x]\n  (reduce #(if (>%1 %2) %1 %2) x))", "user": "5926aa56e4b072a2710fceb5"}, {"problem": 38, "code": "(fn my-min[& args] (reduce (fn [x y] (if (< x y) y x)) args))", "user": "5357fd93e4b04ce2eb3ed285"}, {"problem": 38, "code": "(comp last sort list)", "user": "59258aa7e4b072a2710fce74"}, {"problem": 38, "code": "(fn mx \n  ([x y] \n    (if (> x y) x y)) \n  ([x y & zs] \n    (apply mx (mx x y) zs)))", "user": "59279a89e4b072a2710fced3"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "5924009ce4b072a2710fce45"}, {"problem": 38, "code": "(fn get-max [m & list]\n   (if (= nil list)\n     m\n     (if (< m (first list))\n       (apply get-max (first list) (rest list))\n       (apply get-max m (rest list)))))", "user": "59273eefe4b072a2710fcec6"}, {"problem": 38, "code": "(fn f [x & xs]\n  (if xs\n    (let [y (apply f xs)]\n      (if (> x y) x y))\n    x))", "user": "59137b42e4b0163c97b36f04"}, {"problem": 38, "code": "(fn [& n] (reduce (fn [a b] (if (> a b) a b)) n))", "user": "59288c2ce4b072a2710fceeb"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "5929a5f2e4b072a2710fcf09"}, {"problem": 38, "code": "(fn getMax [& seq] (last (sort seq)))", "user": "56ffeafee4b08d47c97781c2"}, {"problem": 38, "code": "#(last (sort %&))", "user": "591f63e6e4b09b4ee5954c47"}, {"problem": 38, "code": "(fn my-max\n  [& xs]\n  (reduce (fn [acc v] (if (> v acc) v acc)) 0 xs))", "user": "592af6eee4b072a2710fcf2c"}, {"problem": 38, "code": "(fn m[x & xs]\n  (if (nil? xs)\n    x\n    (if (> x (first xs))\n      (apply m (conj (rest xs) x))\n      (apply m (conj (rest xs) (first xs))))))", "user": "56618573e4b068f2fe63dc68"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "5869ac44e4b0f14aab7c88ab"}, {"problem": 38, "code": "(fn max-val [x & y]\n         (reduce (fn [a b] (if (< a b) b a)) (flatten (cons x y))))", "user": "592518cde4b072a2710fce66"}, {"problem": 38, "code": "#(last (sort %&))", "user": "592518bfe4b072a2710fce65"}, {"problem": 38, "code": "; (comp #(reduce (fn [m x] (if (> x m) x m)) %) list)\n; (comp (partial reduce #(if (> %1 %2) %1 %2)) list)\n#(->> %& (reduce (fn [m x] (if (> x m) x m))))\n\n; #(last (sort %&))", "user": "591d182ee4b09b4ee5954c10"}, {"problem": 38, "code": "(comp last sort list)", "user": "58cc390ce4b03c36ff7e5866"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [acc x] (if (> acc x) acc x)) xs))", "user": "5929bdf6e4b072a2710fcf0c"}, {"problem": 38, "code": "(fn [& x] (reduce (fn [y z] (if (> y z) y z)) x))", "user": "557673f3e4b05c286339e06c"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (< %1 %2) %2 %1) args)\n  )", "user": "557c6ca6e4b05c286339e0c4"}, {"problem": 38, "code": "(comp last sorted-set)", "user": "59311a55e4b072a2710fd005"}, {"problem": 38, "code": "(fn max-val [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) (flatten (cons x xs))))", "user": "593297cee4b072a2710fd03a"}, {"problem": 38, "code": "(fn[& args](\n         last(sort args)\n         ))", "user": "592b7269e4b072a2710fcf3f"}, {"problem": 38, "code": "(fn f\n  ([] 0)\n  ([x] x) \n  ([x & xs] (let [y (apply f xs)] (if (< x y) y x))))", "user": "5933b736e4b072a2710fd05d"}, {"problem": 38, "code": "(fn [& a] (last (sort a)))", "user": "5934a43ce4b072a2710fd07e"}, {"problem": 38, "code": "(fn [& more]\n  (reduce\n    (fn\n      [x y]\n      (if (< x y) y x)\n      )\n    more\n    )\n  )", "user": "54db5d73e4b024c67c0cf763"}, {"problem": 38, "code": "(fn my-max [x & r]\n  (if (empty? r)\n    x\n    (if (> x (first r))\n      (recur x (rest r))\n      (recur (first r) (rest r)))))", "user": "5931e498e4b072a2710fd024"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "user": "5923554ee4b0a390037439f2"}, {"problem": 38, "code": "(fn [x & therest] (reduce  #(if (> %1 %2 ) %1 %2) x therest ))", "user": "590f283de4b047aa04b19a35"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "59368ccae4b02506e01a297a"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "59368efbe4b02506e01a297d"}, {"problem": 38, "code": "(fn [& lijst] (last (sort lijst)))", "user": "58fb381ae4b0438e51c2cf71"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "5936fabce4b02506e01a298c"}, {"problem": 38, "code": "(fn [& args]\n    (reduce\n     (fn [largest x] (if (> x largest) x largest))\n     Integer/MIN_VALUE args))", "user": "5935b010e4b04f87174def55"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "5938be98e4b02506e01a29ec"}, {"problem": 38, "code": "(fn [& numbers]\n  (reduce (fn [acc n]\n            (if (> n acc) n acc))\n            0 numbers))", "user": "59362afee4b0d6bb3c60df69"}, {"problem": 38, "code": "(fn [& args] (loop [s args n 0]\n               (if (empty? s)\n                 n\n               (if (> (first s) n)\n                 (recur (rest s) (first s))\n               (recur (rest s) n)))\n               ))", "user": "59368ccae4b02506e01a2979"}, {"problem": 38, "code": "(fn [& x]\n  (last (sort x)))", "user": "59385840e4b02506e01a29c9"}, {"problem": 38, "code": "(fn [& args] ;take all arguments and put into one vector\n  (loop [l args bg 0]\n    (if (empty? l)\n      bg ;if vector empty return biggest else...\n      (do(if (< bg (first l)) ;check is big vs next num in vector\n           (recur (rest l) (first l)) ;return new big\n           (recur (rest l) bg))))))   ;else return current big", "user": "59369515e4b02506e01a297e"}, {"problem": 38, "code": "#(reduce (fn [x y] (if (> x y) x y)) %&)", "user": "5829d9f8e4b051871117bf4d"}, {"problem": 38, "code": "(fn max-val [& args]\n    (last (sort args)))", "user": "591610d4e4b09b4ee5954b7e"}, {"problem": 38, "code": "(fn\n  [& r]\n  (reduce #(if (> %1 %2) %1 %2) r)  \n)", "user": "592dbbd5e4b072a2710fcf7f"}, {"problem": 38, "code": "(fn [& items] \n  (reduce #(if (> %1 %2) %1 %2) items))", "user": "58cd65fae4b03c36ff7e5889"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [a b] (cond (> a b) a :else b )) args)\n )", "user": "584d99c5e4b0b7285a6f4e42"}, {"problem": 38, "code": "(fn\n  [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "591a6c9fe4b09b4ee5954bd6"}, {"problem": 38, "code": "(fn best [& xs]\n\t(reduce #(if (> % %2) % %2) xs))", "user": "59346d29e4b072a2710fd077"}, {"problem": 38, "code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) more))", "user": "5922f8a9e4b026ae3852128f"}, {"problem": 38, "code": "(fn [& args]\n   (loop [m 0, s args]\n     (if (= (count s) 0)\n       m\n       (if (> (first s) m)\n         (recur (first s) (rest s))\n         (recur m (rest s))))))", "user": "5901731ae4b0438e51c2d03d"}, {"problem": 38, "code": "(fn [ & args] (reduce (fn [m n] (if (> n m) n m)) args))", "user": "593c71cbe4b069cdc2982b90"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5938bca5e4b02506e01a29eb"}, {"problem": 38, "code": "(fn __ [& coll] (reduce #(if (> %1 %2) %1 %2) coll))", "user": "593f95d8e4b069cdc2982be3"}, {"problem": 38, "code": "#(last (sort %&))", "user": "593b1739e4b069cdc2982b68"}, {"problem": 38, "code": "(fn [& s] (last (sort s)))", "user": "572b73d0e4b0cd1946bd0f3a"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "59251947e4b072a2710fce69"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce (fn [x y] (if (pos? (.compareTo y x)) y x)) x xs))", "user": "592518f0e4b072a2710fce68"}, {"problem": 38, "code": "(fn [& s] \n   (let [m (first s)]\n   (loop [s s m m]\n     (if (empty? s)\n       m\n       (if (< m (first s))\n         (recur (rest s) (first s))\n         (recur (rest s) m))))))", "user": "59419bdfe4b060784b3b78f7"}, {"problem": 38, "code": "(fn mymax\n  ([x y]\n     (if (> x y) x y))\n  ([x y & more]\n     (reduce mymax (mymax x y) more)))", "user": "593d6793e4b069cdc2982ba6"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %2 %1) %2 %1) xs))", "user": "594307c0e4b060784b3b7920"}, {"problem": 38, "code": "(fn max-value [x & xs] (reduce (fn [x y] (if (pos? (.compareTo y x)) y x)) x xs))", "user": "592518e8e4b072a2710fce67"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (< % %2) %2 %) x))", "user": "593dfe60e4b069cdc2982bb1"}, {"problem": 38, "code": "(fn f [& xs] (last (sort xs)))", "user": "59390a35e4b02506e01a29f3"}, {"problem": 38, "code": "(fn maxxx [a & as ]\n  (last(sort(conj as a))))", "user": "593910eae4b02506e01a29f4"}, {"problem": 38, "code": "(fn maks[x & xs]\n \n  (last(sort(cons x xs))))", "user": "59395adfe4b02506e01a29fb"}, {"problem": 38, "code": "(fn max'\n  ([x] x)\n  ([x & xs]\n   (let [m (apply max' xs)]\n     (if (< x m) m x)\n   )\n  )\n)", "user": "5943abb6e4b060784b3b792b"}, {"problem": 38, "code": "(fn [& vals] (reduce (fn [a b] (if (> a b) a b)) vals))", "user": "527ba29de4b03e8d9a4a7594"}, {"problem": 38, "code": "(fn my-max [& args]\n  (if (= 1 (count args))\n    (first args)\n    (if (> (first args) (apply my-max (rest args)))\n      (first args)\n      (apply my-max (rest args)))))", "user": "54bd9a60e4b0ed20f4ff6ee3"}, {"problem": 38, "code": "(fn [& a]\n   (last (sort a)))", "user": "593fcb0ce4b069cdc2982bea"}, {"problem": 38, "code": "(fn [& nums]\n  ((fn [lst mx]\n     (if (empty? lst)\n       mx\n       (if (> (first lst) mx)\n         (recur (rest lst) (first lst))\n         (recur (rest lst) mx)))) (rest nums) (first nums)))", "user": "55836631e4b05c286339e114"}, {"problem": 38, "code": "(fn m [& arr] \n  (let [[x & xs] arr]\n    (cond\n    \t(empty? xs) x\n     \t(> x (first xs)) x\n     \t:else (apply m xs))))", "user": "59449aa2e4b0b03edd0057ad"}, {"problem": 38, "code": "(fn mymax\n  [& arr]\n  (reduce #(if (> %1 %2) %1 %2) arr))", "user": "5942a5a2e4b060784b3b7912"}, {"problem": 38, "code": "(fn [& values] (reduce (fn [acc itm] (if (> itm acc) itm acc)) values))", "user": "593e4b1fe4b069cdc2982bbb"}, {"problem": 38, "code": "(fn \n  [& my-seq]\n  (loop [current-seq my-seq\n        my-max 0]\n  (if (first current-seq)\n    (recur (rest current-seq) \n           (if (> (first current-seq) my-max)\n             (first current-seq)\n             my-max\n           ))\n    my-max\n    )\n  ))", "user": "5944bd7fe4b0b03edd0057b0"}, {"problem": 38, "code": "#(last (sort %&))", "user": "592519cfe4b072a2710fce6b"}, {"problem": 38, "code": "(fn [& r]\n  (reduce\n   #(if (< %1 %2)\n       %2\n       %1\n    )\n   r\n  )\n)", "user": "593f88dce4b069cdc2982be2"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "594783bee4b07ddc2dafada1"}, {"problem": 38, "code": "#(reduce (fn [h l] (if (> h l) h l)) %&)", "user": "593f8692e4b069cdc2982be1"}, {"problem": 38, "code": "(fn [x & xs]\n   (cond\n    (nil? xs) x\n    (> x (first xs)) (recur x (next xs))\n    :else (recur (first xs) (next xs))))", "user": "594263cbe4b060784b3b790a"}, {"problem": 38, "code": "(fn [& arg] (last (sort (seq arg))))", "user": "59473563e4b07ddc2dafad97"}, {"problem": 38, "code": "(fn [& a] (reduce (fn [x y] (if (> x y) x y)) (seq a)))", "user": "593744abe4b02506e01a299b"}, {"problem": 38, "code": "(fn macks \n  ([x y]\n   (if (> x y) x y))\n  ([x y & more]\n   (reduce macks (macks x y) more )))", "user": "593dde1be4b069cdc2982baf"}, {"problem": 38, "code": "(fn [top & mx] (loop [ret top lst mx] (let [nex (first lst)] (if (empty? lst) ret (if (> nex ret) (recur nex (rest lst)) (recur ret (rest lst)))))))", "user": "59468de7e4b07ddc2dafad88"}, {"problem": 38, "code": "(fn [& x]\n  (last (sort x)))", "user": "593f9bbce4b069cdc2982be4"}, {"problem": 38, "code": "#(last (sort (into () %&)))", "user": "5915a0a5e4b09b4ee5954b73"}, {"problem": 38, "code": "#(reduce (fn [x y] (if (< x y) y x)) 0 %&)", "user": "59496129e4b07ddc2dafadd7"}, {"problem": 38, "code": "(fn [& l] (last (sort l)))", "user": "593e01cde4b069cdc2982bb3"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "5948c165e4b07ddc2dafadc9"}, {"problem": 38, "code": "(fn my-max [& rest] (reduce (fn r [mx x] (if (> mx x) mx x)) rest))", "user": "57c8002ce4b05aa3c4741d13"}, {"problem": 38, "code": "(fn [& args]\n  (loop [in args\n         out 0]\n    (if (empty? in)\n      out\n    (let [x (first in)]\n      (if (< out x)\n        (recur (rest in) x)\n        (recur (rest in) out))))))", "user": "594bd637e4b07ddc2dafae41"}, {"problem": 38, "code": "(comp last sort list)", "user": "57262710e4b0c5bde472c120"}, {"problem": 38, "code": "#(last (sort %&))", "user": "594bc912e4b07ddc2dafae3e"}, {"problem": 38, "code": "#(last (sort %&))", "user": "594bb203e4b07ddc2dafae36"}, {"problem": 38, "code": "#(first (sort > %&))", "user": "594880ade4b07ddc2dafadc2"}, {"problem": 38, "code": "(fn [x & xs]\n  (loop [m x, xs xs]\n    (if (seq xs)\n      (let [c (first xs), rs (rest xs)]\n        (recur (if (< m c) c m) rs))\n      m)))", "user": "5069d8c5e4b01dc6af13f838"}, {"problem": 38, "code": "#(loop [x (apply list %&) m 0] (  if (not= [] x) (recur   (rest x)   (if  (>   (first x)  m)    (first x)  m)    ) m   ))", "user": "594e3723e4b07ddc2dafaea8"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) 0 xs))", "user": "59497f51e4b07ddc2dafaddd"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5938bae2e4b02506e01a29ea"}, {"problem": 38, "code": "(fn [& s]\n  (reduce\n   #(if (> %2 %) %2 %)\n   s))", "user": "594c1baae4b07ddc2dafae59"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "55216aa5e4b0882d96d09192"}, {"problem": 38, "code": "#(last (sort (flatten (list %1 %&))))", "user": "593ab583e4b069cdc2982b57"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5948adffe4b07ddc2dafadc6"}, {"problem": 38, "code": "(fn [& l]\n  (reduce (fn [r i]\n    (if (>= r i)\n      r\n      i)) 0 l))", "user": "595131bee4b066ee0a44aea9"}, {"problem": 38, "code": "#(last (sort %&))", "user": "594d4c43e4b07ddc2dafae86"}, {"problem": 38, "code": "(fn [& others]\n  (->> others\n     (sort)\n     (last)\n  )\n)", "user": "5950f0bfe4b066ee0a44ae9f"}, {"problem": 38, "code": "(fn km \n  ([x y ]\n   (if (> x y) x y))\n  ([x y & more] \n   (reduce km (km x y) more)))", "user": "594ebd25e4b07ddc2dafaebb"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "594c0bd7e4b07ddc2dafae56"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [acc val]\n          (if (> acc val)\n            acc\n            val))\n        0 args))", "user": "59537716e4b066ee0a44aee5"}, {"problem": 38, "code": "#(last (sort %&))", "user": "594bb36ae4b07ddc2dafae37"}, {"problem": 38, "code": "(fn [& args] (reduce #(/ (* %1 %2) (min %1 %2)) args))", "user": "56b2652ae4b0982f16b37e04"}, {"problem": 38, "code": "(fn [& sequ] (reduce (fn [res val] (if (> res val) res val)) sequ))", "user": "595041e8e4b066ee0a44ae90"}, {"problem": 38, "code": "(fn max' [x & xs]\n  (if xs\n    (if (< x (first xs))\n      (recur (first xs) (next xs))\n      (recur x (next xs)))\n    x))", "user": "5953bdb6e4b066ee0a44aeed"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %2 %1) %2 %1) x))", "user": "5926c254e4b072a2710fceb8"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if (>= %1 %2) %1 %2) rest))", "user": "594bc7d6e4b07ddc2dafae3d"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5935b92de4b04f87174def56"}, {"problem": 38, "code": "(fn my-max [& xs] (last (sort xs)))", "user": "5952d75ce4b066ee0a44aed4"}, {"problem": 38, "code": "(fn [& inp]\n  (loop [maxv (first inp)\n         inp (rest inp)]\n    (if (empty? inp)\n      maxv\n      (let [nextv (first inp)\n            maxv (if (>= maxv nextv) maxv nextv)]\n        (recur maxv (rest inp))))))", "user": "592334c7e4b0a390037439ee"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "5951250fe4b066ee0a44aea6"}, {"problem": 38, "code": "(fn [& lst]\n               (reduce #(if (> %2 %1)\n                                  %2\n                                  %1) lst))", "user": "591e0782e4b09b4ee5954c25"}, {"problem": 38, "code": "(fn [& args]\n  (first (sort > args)))", "user": "59503c5de4b066ee0a44ae8e"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> b a) b a)) %&)", "user": "5956c6dae4b066ee0a44af61"}, {"problem": 38, "code": "(fn [n & rest] (loop [mx n frm rest] \n                  (if (= nil frm) mx\n                 (recur \n                  (if(> (first frm) mx) (first frm) mx) (next frm)))\n               ))", "user": "59473583e4b07ddc2dafad98"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [memo var] (if (> memo var) memo var)) args))", "user": "5954108ae4b066ee0a44aef4"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) 0 %&)", "user": "5958cef6e4b066ee0a44af94"}, {"problem": 38, "code": "(fn mx [x & xs]\n  (reduce (fn [x y] \n            \t(if (< x y)\n                  \ty\n                  \tx)) x xs))", "user": "5958a0c8e4b066ee0a44af8c"}, {"problem": 38, "code": "(fn [& args](reduce (fn [mx vl] (if (> vl mx) vl mx )) -1 args))", "user": "59406b94e4b069cdc2982bfd"}, {"problem": 38, "code": "#(reduce (fn mymax[a b](- (min (- a)(- b))) ) (seq %&) )", "user": "593db05ae4b069cdc2982bab"}, {"problem": 38, "code": "(fn [& xs] \n  (reduce (fn [a c] (if (> a c) a c)) xs))", "user": "5947c6a6e4b07ddc2dafada7"}, {"problem": 38, "code": "(comp last sort list)", "user": "5950d396e4b066ee0a44ae9d"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "595914e0e4b066ee0a44af99"}, {"problem": 38, "code": "(fn [message & args]\n  (last (sort (conj args message))))", "user": "58cf8f97e4b03c36ff7e58b7"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "595a885be4b066ee0a44afc4"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "595b00f4e4b066ee0a44afd2"}, {"problem": 38, "code": "(fn my-max\n  [& x]\n  (let [[f & r] x]\n    (println (str \"f is \" f))\n    (println (str \"r is \" r))\n    (if (empty? r)\n      f\n      (let [res-max (apply my-max r)]\n        (cond\n          (< res-max f) f\n          :else res-max))\n    )\n    ))", "user": "5959c72ae4b066ee0a44afac"}, {"problem": 38, "code": "(fn [& numbers] (->> numbers sort reverse first))", "user": "58969420e4b00487982d52a4"}, {"problem": 38, "code": "#(last (sort %&))", "user": "594cb88be4b07ddc2dafae6e"}, {"problem": 38, "code": "#(last (sort %&))", "user": "595a3b41e4b066ee0a44afb7"}, {"problem": 38, "code": "(comp last sorted-set)", "user": "595b864ee4b066ee0a44afdc"}, {"problem": 38, "code": "(fn f [& n]\n    (reduce\n      #(if (< %2 %1)\n         %1\n         %2)\n      0\n      n)\n  )", "user": "55df2752e4b050e68259b3ed"}, {"problem": 38, "code": "#(reduce (fn [acc x] (if (or (nil? acc) (> x acc)) x acc)) nil %&)", "user": "595bbab7e4b066ee0a44afe0"}, {"problem": 38, "code": "(fn [& l]\n  (reduce #(if (> %1 %2) %1 %2) l))", "user": "58db3c5ae4b0a4d5acaab677"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args))\n  )", "user": "595d0897e4b066ee0a44b00f"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x ))", "user": "594bc16be4b07ddc2dafae39"}, {"problem": 38, "code": "(fn [& args] (last (sort (into [] args))))", "user": "595b7c12e4b066ee0a44afda"}, {"problem": 38, "code": "(fn [h & more] (last (sort (conj more h))))", "user": "58ee84e5e4b056aecfd47dab"}, {"problem": 38, "code": "(fn mmax [v & vs]\n  (reduce #(if (< %1 %2) %2 %1) (cons v vs)))", "user": "595e1ba7e4b066ee0a44b036"}, {"problem": 38, "code": "(fn [f & args] (reduce (fn [a i] (if (> a i) a i)) f args))", "user": "59566d1de4b066ee0a44af54"}, {"problem": 38, "code": "(fn [& ns]\n  (reduce (fn [mx n] (if (> n mx) n mx)) ns))", "user": "51dafedee4b09f6bc204eee2"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "595ebf46e4b066ee0a44b04f"}, {"problem": 38, "code": "(fn [& coll]\n\t(reduce \n     (fn [acc v]\n       (if (> acc v)\n         acc\n         v))\n     (first coll)\n     (rest coll)))", "user": "5954edcbe4b066ee0a44af15"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "595eba88e4b066ee0a44b04e"}, {"problem": 38, "code": "(fn [& args] (first (reverse (sort args))))", "user": "595fe942e4b066ee0a44b075"}, {"problem": 38, "code": "(fn mx [& args]\n  ((fn mxInt [x m]\n     (if (empty? x)\n       m\n       (if (> (first x) m)\n         (mxInt (rest x) (first x))\n         (mxInt (rest x) m))))\n   args 0))", "user": "595ed97fe4b066ee0a44b051"}, {"problem": 38, "code": "(fn [& args]\n  (loop [mx  (first args)\n         col  args]\n    (if (empty? col)\n      mx\n      (recur (if (> mx (first col)) mx (first col)) (rest col)))))", "user": "595c02a9e4b066ee0a44afeb"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "570e43d8e4b0b0fb43fd06eb"}, {"problem": 38, "code": "(fn [& n] (reduce #(if (> %2 %1) %2 %1) n))", "user": "5955625fe4b066ee0a44af2f"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "4f73591be4b07046d9f4f045"}, {"problem": 38, "code": "( fn [& args] (first ( sort > (seq args) )))", "user": "5953949be4b066ee0a44aeea"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "58ea5bdce4b056aecfd47d1b"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (< % %2) %2 %) xs))", "user": "5942319be4b060784b3b7905"}, {"problem": 38, "code": "(fn [& args]\n  (reduce\n   \t(fn [a b] (if(>= a b) a b))\n   \targs))", "user": "595d2041e4b066ee0a44b014"}, {"problem": 38, "code": "(fn [& coll] (reduce (fn [x y] (if (< x y)\n                     y x)) (seq coll)))", "user": "5911c8e1e4b0163c97b36edc"}, {"problem": 38, "code": "(comp last sort list)", "user": "59638af5e4b066ee0a44b0cc"}, {"problem": 38, "code": "(fn [& nums] (last (sort nums)))", "user": "55326aede4b09218d5f44f7c"}, {"problem": 38, "code": "(fn[& tail](last (sort tail)))", "user": "5954eef0e4b066ee0a44af17"}, {"problem": 38, "code": "#(let [f % r %&]\n   (loop [x r m f]\n   (if (empty? x)\n     m\n     (recur (rest x) (if (> (first x) m)\n                       (first x)\n                       m)))))", "user": "5964c614e4b069c0a1a19770"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "594cf4f1e4b07ddc2dafae77"}, {"problem": 38, "code": "(fn mymax\n  ([x y]\n     (if (> x y) x y))\n  ([x y & more]\n     (reduce mymax (mymax x y) more)))", "user": "596565f0e4b069c0a1a19784"}, {"problem": 38, "code": "(fn [& x] (reduce (fn [curr nxt] (if (> nxt curr) nxt curr)) x))", "user": "53dad484e4b0e771c30254ac"}, {"problem": 38, "code": "(fn get-max\n  [x & xs]\n  (reduce (fn [x y] (if (> x y) x y)) x xs))", "user": "595bc925e4b066ee0a44afe2"}, {"problem": 38, "code": "(fn [& args] \n  (reduce (fn [x y] (if (> x  y) x y)) 0 args))", "user": "59663e77e4b069c0a1a1979f"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "user": "595fd721e4b066ee0a44b06e"}, {"problem": 38, "code": "(fn [& args] (loop [acc (first args)\n                   acc-seq args]\n              (if (empty? acc-seq)\n                acc\n                (recur (if (< acc (first acc-seq))\n                         (first acc-seq)\n                         acc)\n                       (rest acc-seq)))))", "user": "595fd77ce4b066ee0a44b06f"}, {"problem": 38, "code": "(fn [& xs] (last (sort xs)))", "user": "59644d2ae4b069c0a1a19764"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "55842bd7e4b05c286339e11c"}, {"problem": 38, "code": "(fn this\n  ([x] x)\n  (\n    [x y & remaining] \n   (if\n     (> x y) \n     (apply this x  remaining) \n     (apply this y remaining)\n     )\n   )\n  )", "user": "5969bb32e4b069c0a1a197ed"}, {"problem": 38, "code": "(fn [& list] (loop [l list result (first list)]\n  (if (or (empty? l) (nil? l))\n    result\n    (if (> (first l) result)\n    \t(recur (rest l) (first l))\n        (recur (rest l) result)\n))))", "user": "5954cea2e4b066ee0a44af0a"}, {"problem": 38, "code": "(fn [& param](last (sort (seq param))))", "user": "593c653de4b069cdc2982b8f"}, {"problem": 38, "code": "(fn [m & body]\n    (cond\n     (empty? body) m\n     :else (let [[f & remain] body]\n             (recur (if (> m f) m f) remain))))", "user": "5455a6d3e4b0e397800069e2"}, {"problem": 38, "code": "(comp (fn[lst](if (> (first lst) (second lst)) (first lst) (second lst)) )  (partial conj []))", "user": "59692530e4b069c0a1a197e4"}, {"problem": 38, "code": "(fn [& nums] (reduce #(if (> %1 %2) %1 %2) nums))", "user": "59699da7e4b069c0a1a197eb"}, {"problem": 38, "code": "(fn [& args] (-> args sort last))", "user": "590b8607e4b047aa04b199db"}, {"problem": 38, "code": "#(reduce\n  (fn [cur-max x]\n    (if (> x cur-max) x cur-max))\n  0 %&)\n\n;; this assumes no negatives but could be updated to handle that", "user": "5962af8ce4b066ee0a44b0b8"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "51d55795e4b01da06753aa8f"}, {"problem": 38, "code": "(fn [& args]\n   (last (sort args)))", "user": "59648ce1e4b069c0a1a19769"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "596caee3e4b069c0a1a19837"}, {"problem": 38, "code": "(fn\n   [& args]\n   (reduce\n    (fn [acc, n] (if (= acc nil) n (if (> n acc) n acc)))\n    nil args))", "user": "596c1f25e4b069c0a1a19825"}, {"problem": 38, "code": "#(last (sort %&\n             ))", "user": "595d031ce4b066ee0a44b00e"}, {"problem": 38, "code": "#(last(sort %&))", "user": "5964f9b0e4b069c0a1a19778"}, {"problem": 38, "code": "(fn [& args] (-> args sort last))", "user": "58e5180ae4b056aecfd47c82"}, {"problem": 38, "code": "(comp last sort list)", "user": "596e4c5be4b069c0a1a19864"}, {"problem": 38, "code": "(fn [& y]  (reduce (fn [x1 x2] (if (> x1 x2) x1 x2)) y) )", "user": "596a88ebe4b069c0a1a19806"}, {"problem": 38, "code": "(fn [& all]\n  (loop [the-max-val (first all) remaining (rest all)]\n     (if (empty? remaining) the-max-val\n         (let [compare-val (first remaining)\n               new-max-val (if (> compare-val the-max-val) compare-val the-max-val)]\n           \t(recur new-max-val (rest remaining))))))", "user": "596aaeefe4b069c0a1a19808"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "59636b43e4b066ee0a44b0c4"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "59636b49e4b066ee0a44b0c5"}, {"problem": 38, "code": "(fn maxi [& l]\n  (let [r (fn [s x] (if (> x s) x s))]\n    (reduce r l)))", "user": "59708e38e4b01722bebd4c65"}, {"problem": 38, "code": "(fn [& s] (reduce #(if (> %2 %) %2 %) 0 s))", "user": "595a4fb8e4b066ee0a44afba"}, {"problem": 38, "code": "(fn [& stuff] (reduce #(if (> %1 %2) %1 %2) stuff))", "user": "585eb539e4b0f14aab7c87bd"}, {"problem": 38, "code": "(fn  \n  [& args]\n  (reduce (fn [a b] \n            (if (> a b)\n              a\n              b)) args))", "user": "59636cc2e4b066ee0a44b0c7"}, {"problem": 38, "code": "(fn [& args]\n  (last(sort args)))", "user": "59636b6de4b066ee0a44b0c6"}, {"problem": 38, "code": "(fn [& nums]\n  (last (sort nums)))", "user": "5398d042e4b0b51d73faaf00"}, {"problem": 38, "code": "(fn [a b & args]\n  (if (> a b)\n    a\n    b\n    ))", "user": "59636ec9e4b066ee0a44b0c8"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "user": "596f6683e4b069c0a1a19877"}, {"problem": 38, "code": "(fn max_val\n  [& input]\n  (loop [xs input maxi Integer/MIN_VALUE]\n    (if (empty? xs)\n    maxi\n    (recur (rest xs) (if (> (first xs) maxi) (first xs) maxi)))))", "user": "53de4bdae4b0d874e779ae32"}, {"problem": 38, "code": "(fn maxi [& args] (reduce (fn [a b] (if (> a b) a b) ) args))", "user": "5972fcf6e4b01722bebd4c92"}, {"problem": 38, "code": "(fn [& n] (reduce #(if (> %2 %1) %2 %1) 0 n))", "user": "5797d3d2e4b039eba2ecb106"}, {"problem": 38, "code": "(fn m [x & args]\n  (reduce \n   #(if (< %1 %2) %2 %1)\n   (flatten (cons x args))))", "user": "59733c91e4b01722bebd4c9b"}, {"problem": 38, "code": "#(reduce\n  (fn [x y]\n    (if (> x y) x y)) %&)", "user": "5882e8b1e4b0f1effa3b7666"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "59636b37e4b066ee0a44b0c3"}, {"problem": 38, "code": "(fn [x & r] (if (empty? r) x (let [y (first r)] (recur (if (> x y) x y) (rest r)))))", "user": "52384eb1e4b0fae3832e99fa"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5972f089e4b01722bebd4c90"}, {"problem": 38, "code": "(fn method [& args] (last (sort args)))", "user": "58866b4fe4b0f1effa3b76d4"}, {"problem": 38, "code": "(fn [x & the-rest]\n  ( last(sort (cons x the-rest))))", "user": "5975fc20e4b01722bebd4cd2"}, {"problem": 38, "code": "(fn [& numbers] (reduce #(if (< %1 %2) %2 %1) numbers))", "user": "58dac8b1e4b0a4d5acaab668"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "58ebd258e4b056aecfd47d4b"}, {"problem": 38, "code": "(fn [& elements] \n  (reduce \n   (fn [x y] (if (< x y) y x)) \n   (first elements) \n   (rest elements)))", "user": "5974b12be4b01722bebd4cb1"}, {"problem": 38, "code": "(fn maxval [& params]\n    (let [p (flatten params)]\n    (if (= (count p) 1) (first p)\n      (if (< (first p) (last p))\n        (maxval (rest p))\n        (maxval (rest (reverse p)))))))", "user": "51127e8ee4b0350614f07a76"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce (fn [a b]\n            (if (> a b) a b))\n          0 xs))", "user": "5978305be4b01722bebd4d03"}, {"problem": 38, "code": "#(->> %& sort last)", "user": "59738d98e4b01722bebd4ca1"}, {"problem": 38, "code": "#(reduce (fn [m n] (if(> m n) m n)) %&)", "user": "5978b4c9e4b01722bebd4d13"}, {"problem": 38, "code": "(fn [& args] \n  (reduce \n   (fn [x y]\n    (if (> x y) x y))\n  args))", "user": "597902bce4b01722bebd4d1e"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) (flatten (cons x xs))))", "user": "5976eeede4b01722bebd4ce5"}, {"problem": 38, "code": "(fn \n  [arg & args]\n\t(loop [col (seq args) x arg]\n\t\t(if (first col)\n\t\t\t(if (> (first col) x)\n\t\t\t\t(recur (rest col) (first col))\n\t\t\t\t(recur (rest col) x))\n\t\t\tx)))", "user": "590620e1e4b047aa04b1992c"}, {"problem": 38, "code": "(fn [& s]\n  (reduce #(if (> % %2) % %2) s))", "user": "5974d2ede4b01722bebd4cb6"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "5935151ee4b072a2710fd084"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2)\n                     %1\n                     %2)\n               (first x) x))", "user": "5979cd36e4b02382a38ad1d8"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "593bccfae4b069cdc2982b7f"}, {"problem": 38, "code": "#(reduce (fn [x y] (if (> x y) x y)) %&)", "user": "597dcb0ce4b0dbe32238d0a2"}, {"problem": 38, "code": "#(last (sort %&))", "user": "597e128ee4b0dbe32238d0a4"}, {"problem": 38, "code": "(fn [& args] \n  (last (sort args)))", "user": "597af3f7e4b02382a38ad1f0"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (< x y) y x)) args))", "user": "59804b60e4b021a7a535fdcf"}, {"problem": 38, "code": "(fn [x & ys]\n  (if (empty? ys)\n      x\n      (let [temp (first ys)]\n        (recur (if (> temp x) temp x) (rest ys)))))", "user": "597f8c93e4b0dbe32238d0c1"}, {"problem": 38, "code": "(fn max_\n  [& more]\n  (reduce #(if (> %1 %2) %1 %2) more))", "user": "58821372e4b0f1effa3b764d"}, {"problem": 38, "code": "(fn mmax [& args]\n  (reduce\n   (fn [memo n]\n     (if (> n memo) n memo))\n   -1\n   args))", "user": "5980f91ae4b021a7a535fddd"}, {"problem": 38, "code": "(fn [& args] \n  (reduce (fn [m v]\n             (if (> m v)\n               m\n               v))\n           0\n           args))", "user": "597f8984e4b0dbe32238d0bf"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5370b02de4b0fc7073fd6e9a"}, {"problem": 38, "code": "(fn\n  [n & ns]\n  (loop [mx n\n         [x & xs] ns]\n    (if xs\n      (recur (if (> mx x) mx x) xs)\n      (if (> mx x) mx x))))", "user": "597d0e43e4b0dbe32238d095"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "59826556e4b021a7a535fdfe"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce (fn [x y] (if (> x y) x y)) xs))", "user": "596539dce4b069c0a1a19783"}, {"problem": 38, "code": "#(reduce (fn [acc num] (if (> acc num) acc num)) %&)\n\n;\n; Tears: \n;\n; (comp last sort list)\n;\n;", "user": "594266cfe4b060784b3b790b"}, {"problem": 38, "code": "(fn mx [x & rst]\n  (cond\n   (empty? rst) x\n   (< x (first rst)) (apply mx rst)\n   :else (apply mx x (rest rst))))", "user": "597a4277e4b02382a38ad1e2"}, {"problem": 38, "code": "(fn [& c] (reduce #(if (> %2 %1) %2 %1) (seq c)))", "user": "591addcee4b09b4ee5954be1"}, {"problem": 38, "code": ";(fn get-max [& vals]\n;  (loop [curr-val (first vals)\n;         max-val (first vals)\n;         vals (rest vals)]\n;   (if (nil? curr-val)\n;      max-val\n;      (recur (first vals)\n;             (if (> curr-val max-val) curr-val max-val)\n;             (rest vals)))))\n\n(fn [& vals] (reduce #(if (> %2 %1) %2 %1) vals))", "user": "59837909e4b021a7a535fe16"}, {"problem": 38, "code": "#(reduce (fn [acc val] (if (> val acc) val acc)) (first %&) %&)", "user": "5982d82be4b021a7a535fe05"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) (cons x xs)))", "user": "598588f2e4b021a7a535fe65"}, {"problem": 38, "code": "(fn [& args] \n  (reduce \n   \n    (fn [m elem]\n       (if (> elem m)\n         elem\n         m\n       )\n     )\n    0\n    args\n  )\n)", "user": "5984b9f3e4b021a7a535fe33"}, {"problem": 38, "code": "#(first(reverse(sort (seq %&))))", "user": "5971763fe4b01722bebd4c72"}, {"problem": 38, "code": "(fn [& args] (loop [[head & tail] args\n         biggestSoFar Long/MIN_VALUE]\n   \n    (if-not head\n      biggestSoFar\n      (if (> head biggestSoFar)\n             (recur tail head)\n             (recur tail biggestSoFar))\n     )\n    \n   ))", "user": "598085e6e4b021a7a535fdd3"}, {"problem": 38, "code": "(fn [& more]\n  (reduce\n    (fn\n      [x y]\n      (if (< x y) y x)\n      )\n    more\n    )\n  )", "user": "58b9922ce4b0888cdc949cd0"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) Integer/MIN_VALUE x))", "user": "598229d6e4b021a7a535fdfb"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "597768d0e4b01722bebd4cee"}, {"problem": 38, "code": "(fn [x & the-rest]\n  (if (empty? the-rest)\n       x\n      (recur \n         (if (> x (first the-rest)) \n              x \n             (first the-rest)) \n         (rest the-rest))))", "user": "598876fee4b021a7a535feb7"}, {"problem": 38, "code": "(fn sk-max [& l]\n  (reduce (fn [a b]\n            (if (> a b)\n              a\n              b))\n          l))", "user": "5884f377e4b0f1effa3b76a8"}, {"problem": 38, "code": "(fn [& xs] (last (sort xs)))", "user": "5989e080e4b021a7a535fed6"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "598ad666e4b02b9968b84ce1"}, {"problem": 38, "code": "(fn [& a-sequence] (reduce (fn [a b] (if (> a b) a b)) a-sequence))", "user": "598760aae4b021a7a535fea7"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> % %2) % %2) args))", "user": "598858d0e4b021a7a535feb5"}, {"problem": 38, "code": "(fn largest [& l]\n  (if (= (count l) 1)\n    (first l)\n    (let\n     [m (first l),\n      n (apply largest (rest l))]\n     (if (> m n) m n))))", "user": "598ab445e4b02b9968b84ce0"}, {"problem": 38, "code": "(fn [& nums] (reduce (fn [mx n] (if (> n mx) n mx)) nums))", "user": "598dc40ce4b02b9968b84d2c"}, {"problem": 38, "code": "#(reduce (fn [f n] (if (> f n) f n)) %&)", "user": "56f5d0efe4b046a417f92078"}, {"problem": 38, "code": "(fn [& args]\n  (loop [values args maximum 0]\n    (if (empty? values)\n      maximum\n      (recur\n       (rest values)\n       (if\n         (< maximum (first values))\n         (first values)\n         maximum)))))", "user": "5989ee61e4b021a7a535fed7"}, {"problem": 38, "code": "(fn [& l]\n  (reduce\n  \t(fn [x y]\n    \t(if (> x y) x y))\n    l))", "user": "598e7998e4b02b9968b84d34"}, {"problem": 38, "code": "(fn m\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] (reduce m (m x y) more)))", "user": "59902fede4b0fcebec4de86d"}, {"problem": 38, "code": "(fn [& mehr]\n\t(loop [[f & r] mehr\n\t\t   result 0]\n\t\t(if (empty? r)\n\t\t\tresult\n\t\t\t(if (> f result)\n\t\t\t\t(recur r f)\n\t\t\t\t(recur r result)\n\t\t\t)\n\t\t)\n\t)\n)", "user": "598d746ae4b02b9968b84d23"}, {"problem": 38, "code": "(fn [& coll]\n\t(loop [i (first coll) r (rest coll) curMax (first coll)]\n\t\t(let [newMax (if (> i curMax) i curMax)]\n\t\t\t(if (empty? r)\n\t\t\t\tnewMax\n\t\t\t\t(recur (first r) (rest r) newMax)))))", "user": "598af379e4b02b9968b84ce6"}, {"problem": 38, "code": "(fn [& i] (last (into [] (sort i))))", "user": "59874ff6e4b021a7a535fea1"}, {"problem": 38, "code": "(fn [& args] \n  (reduce #(if (> %2 %1) %2 %1) args))", "user": "55916764e4b0604b3f94d57b"}, {"problem": 38, "code": "(fn [& x] (first (reverse (sort x))))", "user": "591cc30be4b09b4ee5954c0a"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "59881937e4b021a7a535feaf"}, {"problem": 38, "code": "(fn [& r]\n  (reduce (fn [ a b] (if (> a b) a b)) r))", "user": "598ff38ce4b0fcebec4de869"}, {"problem": 38, "code": "(fn \n  ([t1] (t1))\n  ([t1 & more]\n   (loop\n     [x 0 num 0 coll (vec (cons t1 (list* more)))]\n     (if (= x (count coll))\n       num\n       (recur\n         (inc x)\n         (let [num ((fn [big num2] (\n                                     if (>= big num2)\n                                     big\n                                     num2\n                                     )\n                      ) num (get coll x))] num)\n         coll\n         )\n       ))))", "user": "598d0dc3e4b02b9968b84d18"}, {"problem": 38, "code": "(fn\n   [t1 & more]\n    (loop\n      [x 0 num 0 coll (vec (cons t1 (list* more)))]\n      (if (= x (count coll))\n        num\n        (recur\n          (inc x)\n          (let [num ((fn [big num2] (\n                                      if (>= big num2)\n                                      big\n                                      num2\n                                      )\n                       ) num (get coll x))] num)\n          coll\n          )\n        )))", "user": "598d22b1e4b02b9968b84d1a"}, {"problem": 38, "code": "(fn [& xs]\n  (->> xs\n       (reduce (fn [cur-num next-num]\n                 (if (> cur-num next-num) \n                   cur-num\n                   next-num)))))", "user": "5992bcb2e4b0866487ed0d7b"}, {"problem": 38, "code": "(fn [first-val & more]\n  (->> (conj more first-val)\n       (filter number? ,,,)\n       (sort ,,,)\n       (last ,,,)))", "user": "5990a9fde4b0866487ed0d54"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5976da27e4b01722bebd4ce3"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5991d9cbe4b0866487ed0d69"}, {"problem": 38, "code": "#(reduce (fn [acc x] (if (> acc x) acc x)) %&)", "user": "5990fcb9e4b0866487ed0d5b"}, {"problem": 38, "code": "(fn [& args] (last (sort args)) )", "user": "596d630ae4b069c0a1a19846"}, {"problem": 38, "code": ";;#(reduce (fn [x y] (if (> x y) x y)) %&)\n;;\n;;#(last (sort %&))\n(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "59944e73e4b0b211ea3aaac2"}, {"problem": 38, "code": "(fn [& xs] (first (sort > xs)))", "user": "598debf0e4b02b9968b84d2e"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (>= %1 %2)\n              %1\n              %2)\n          args))", "user": "56478a82e4b0284900eef61e"}, {"problem": 38, "code": "(fn [& args]\n    (last (sort args)))", "user": "59932f49e4b0b211ea3aaaae"}, {"problem": 38, "code": "(fn alt-max [& numbers]\n\t(loop [maximum (first numbers) items (rest numbers)]\n\t  (cond \n\t    (zero? (count items)) maximum\n\t    (> (first items) maximum) (recur (first items) (rest items))\n\t    :else (recur maximum (rest items))\n\t  )\n\t)\n)", "user": "5991d2fae4b0866487ed0d68"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce (fn [acc x]\n            (if (> x acc) x acc))\n          (first xs) (rest xs)))", "user": "598a4ff7e4b02b9968b84cda"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "5996b7f6e4b07157cc8daab6"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5996cce8e4b07157cc8daab9"}, {"problem": 38, "code": "(fn [& params]\n  (reduce (fn [p n]\n            (if (> n p) n p))\n          (first params)\n          params))", "user": "5965a773e4b069c0a1a1978a"}, {"problem": 38, "code": "(fn max-seq [& args]\n  (reduce #(if (> %1 %2) %1 %2) 0 args))", "user": "59971e2de4b07157cc8daacc"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce (fn [acc x] (if (> x acc) x acc)) 0 nums)\n  )", "user": "55b28b57e4b01b9910ae296c"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5998b0a1e4b07157cc8daaec"}, {"problem": 38, "code": "(fn X [& args] (nth (filter (fn [x] (> (+ x 2) (/ (apply + args) 2))) args) 0))", "user": "5996709ee4b0b211ea3aaaf1"}, {"problem": 38, "code": "(fn([& x] (reduce (fn [x y] (if (> x y) x y)) x)) )", "user": "55e46caae4b050e68259b451"}, {"problem": 38, "code": "(fn [& args]\n  (let [f (first args)\n        r (rest args)]\n    (if (empty? r)\n      f\n    (if (> f (first r))\n      (recur(conj (rest r) f))\n      (recur r)))))", "user": "575c3592e4b02ea11479936c"}, {"problem": 38, "code": "(fn [& s]\n  (reduce (fn [mx elem]\n            (if (> elem mx)\n              elem\n              mx))\n          s))", "user": "59946856e4b0b211ea3aaac7"}, {"problem": 38, "code": "#(loop [f %1 r %&]\n  (if  (nil? r)\n   f\n   (if (< f (first r))\n    (recur (first r) (next r))\n    (recur f (next r)))))", "user": "5992de05e4b0866487ed0d7e"}, {"problem": 38, "code": "(fn [& args]\n  (loop [origin-seq args\n         max-num (first origin-seq)]\n  \t(if (empty? origin-seq)\n      max-num\n      (let [head (first origin-seq)\n            body (rest origin-seq)\n        \tnew-max (if (>= head max-num)\n \t\t\t\t\t  head\n                 \t  max-num)]\n\t  \t(recur body new-max)))))", "user": "58fed70de4b0438e51c2cfdd"}, {"problem": 38, "code": "(fn [& more]\n  (last (sort more)))", "user": "59639142e4b066ee0a44b0ce"}, {"problem": 38, "code": "(fn  [& args]\n  (cond\n    (= 0 (count args)) nil\n    (= 1 (count args)) (first args)\n\n    :else\n    (reduce (fn [x y]\n              (if (> x y) x y))\n            (first args)\n            (rest args))))", "user": "59971dcbe4b07157cc8daacb"}, {"problem": 38, "code": "(fn [& input] (last (sort input)))", "user": "5996fd2be4b07157cc8daac5"}, {"problem": 38, "code": "(fn [& args]\n  (let [xs (flatten (list args))]\n   \t(loop [l (rest xs) maxval (first xs)] \n           (if (= l '())\n             maxval\n             (if (> (first l) maxval)\n               (recur (rest l) (first l))\n               (recur (rest l) maxval)\n     )\n    )\n  )))", "user": "5996b419e4b07157cc8daab5"}, {"problem": 38, "code": "(fn [f & r] (loop [m f l r] (if (empty? l) m (recur (if (< m (first l)) (first l) m) (rest l)))))", "user": "5995f8ade4b0b211ea3aaae9"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "599d49a7e4b0871e7608b7f4"}, {"problem": 38, "code": "#(reduce (fn [x y] (if (> x y)x\n                         y)) 0 %&)", "user": "599b457ae4b07157cc8dab1f"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [x y] \n            (if (> x y)\n              x\n              y)) args))", "user": "599e3677e4b0871e7608b809"}, {"problem": 38, "code": "(comp last sort list)", "user": "5960a1a6e4b066ee0a44b08e"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "594be1cce4b07ddc2dafae47"}, {"problem": 38, "code": "#(reduce (fn [a x] (if (> x a) x a)) %&)", "user": "598c5a0ee4b02b9968b84d03"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "596b8cf8e4b069c0a1a19819"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "576c2ecae4b07c67f59d1fbb"}, {"problem": 38, "code": "(fn [ & args ] (reduce (fn [acc n] (if (< acc n) n acc)) args))", "user": "59a180b3e4b0871e7608b852"}, {"problem": 38, "code": "(fn my-max\n  ([a b] (if (> a b) a b))\n  ([a b c] (my-max (my-max a b) c))\n  ([a b c d] (my-max (my-max a b c) d)))", "user": "59a24c92e4b066c664927d20"}, {"problem": 38, "code": "(fn [& x]\n     (reduce #(if (> % %2) % %2) x))", "user": "594ea2a4e4b07ddc2dafaeb6"}, {"problem": 38, "code": "(fn [& lst] (reduce #(if (> %1 %2) %1 %2) lst) )", "user": "59a2ba97e4b066c664927d2c"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "5990bab4e4b0866487ed0d55"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "59a460ede4b066c664927d52"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "59a512b7e4b066c664927d5e"}, {"problem": 38, "code": "(fn\n  [& args]\n  (reduce\n    (fn [collector x]\n      (if (> collector x)\n        collector\n        x))\n    args))", "user": "59a6185ee4b066c664927d76"}, {"problem": 38, "code": "(fn [ & xs]\n  (let [max-fn (fn [a b]  (if (> a b) a b))]\n    (reduce max-fn xs)))", "user": "5143a51be4b0b4fb4ace5f39"}, {"problem": 38, "code": "(fn [& arr] (reduce (fn [a b] (if (> a b) a b)) arr))", "user": "59a72effe4b066c664927d94"}, {"problem": 38, "code": "(fn mymax [& args]\n  (reduce \n   (fn myfilter [x, m] (if (> x m) x m)) \n   (* -1 java.lang.Integer/MAX_VALUE)\n   (apply list args)\n   ))", "user": "57fe840ae4b0d3187e9009d3"}, {"problem": 38, "code": "(comp last sort list)", "user": "59a57e91e4b066c664927d63"}, {"problem": 38, "code": "(fn [& values]\n  (loop [cur-max nil\n         rem-values values]\n    (if-let [next-value (first rem-values)]\n      (let [new-max (if (or (nil? cur-max) (> next-value cur-max)) next-value cur-max)]\n        (recur new-max (rest rem-values)))\n      cur-max)))", "user": "59a96a85e4b0bcf4e9a43b13"}, {"problem": 38, "code": "(fn [frst & rst]\n  (cond (empty? rst)\n        frst\n        \n        (> (first rst) frst)\n        (recur (first rst) (rest rst))\n        \n        :else\n        (recur frst (next rst))))", "user": "57994779e4b05b1deef9adbd"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [a b] (if (> a b) a b)) args))", "user": "586b93eae4b01531a375e95b"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "597fa3fbe4b021a7a535fdbf"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "59ab00fbe4b08cbb53654d8e"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "59ab8beee4b08cbb53654d9e"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [a b] (if (> a b) a b)) args))", "user": "59a8405ce4b0bcf4e9a43af1"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "59a6f1c7e4b066c664927d89"}, {"problem": 38, "code": "(fn [ & rest ] \n  (reduce \n   (fn [x y]  (if  (> x y) x y ) ) 0\n   rest \n   )\n  )", "user": "57bffed6e4b05aa3c4741c89"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce (fn [x y]\n            (if (< x y)\n              y\n              x))\n          xs))", "user": "59ac0965e4b08cbb53654da6"}, {"problem": 38, "code": "(fn\n  [& args]\n  (last (sort args)))", "user": "59abacc4e4b08cbb53654da1"}, {"problem": 38, "code": "#(last (sort %&))", "user": "599b3844e4b07157cc8dab1d"}, {"problem": 38, "code": "(fn [& params]\n  (loop [max_ (first params)\n         plop (rest params)]\n    (if (empty? plop)\n      max_\n      (recur (if (> (first plop) max_) (first plop) max_) (rest plop)))))", "user": "59ac757fe4b00adcf69795d3"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "user": "59a9e517e4b08cbb53654d79"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "59aeed59e4b0e1f4e384c8ab"}, {"problem": 38, "code": "(fn\n  [& items]\n  (reduce #(if (> %1 %2) %1 %2) items))", "user": "59a90b2ae4b0bcf4e9a43aff"}, {"problem": 38, "code": "#(last (sort %&))", "user": "599df601e4b0871e7608b801"}, {"problem": 38, "code": "(fn [& v] (reduce #(if (>= % %2) % %2) v))", "user": "59adb1cee4b0e1f4e384c891"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "59afb004e4b0e1f4e384c8bc"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) (into [] %&))", "user": "59a0262ee4b0871e7608b82d"}, {"problem": 38, "code": "#(last (sort %&))", "user": "59adec09e4b0e1f4e384c897"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [a b] (if (< a b) b a)) 0 args))", "user": "5922a36ce4b026ae38521285"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "user": "59a80652e4b0bcf4e9a43aeb"}, {"problem": 38, "code": "#(first (sort > %&))", "user": "59b1c2eae4b0e1f4e384c8ec"}, {"problem": 38, "code": "(fn maxint \n  ([a] a)\n  ([a b] (if (< a b) b a))\n  ([a b & more] (reduce maxint (maxint a b) more)))", "user": "59089229e4b047aa04b1997c"}, {"problem": 38, "code": "(fn [& items]\n  (reduce \n    (fn [item acc]\n      (if (> item acc)\n        item\n        acc))\n    items))", "user": "571543bbe4b07c98581c3ad4"}, {"problem": 38, "code": "(fn mx\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] (reduce mx (if (> x y) x y) more))\n)", "user": "59ac559ee4b00adcf69795d2"}, {"problem": 38, "code": "(fn myVmax ([x]\n              (println (str \"this is myMaxV=\" x))\n              x)\n  ([x y]\n   (if (> x y)\n     (do \n       (println \"x is greater\")\n       x)\n     (do\n       (println\"y is greater\")\n       y)))\n  ([x y & rest]\n   (reduce myVmax (myVmax x y) rest))\n  )", "user": "59a2d49de4b066c664927d30"}, {"problem": 38, "code": "(fn [& n] (reduce #(if (> %1 %2) %1 %2) n))", "user": "59b05f0ee4b0e1f4e384c8cc"}, {"problem": 38, "code": "(fn [& args] \n  (last (sort args)))", "user": "59a3f3dce4b066c664927d48"}, {"problem": 38, "code": "(fn [& seqn] (reduce (fn [a b] (if (> a b) a b) ) seqn))", "user": "59b0e877e4b0e1f4e384c8d3"}, {"problem": 38, "code": "(fn\n    [& values]\n    (reduce\n      #(if (> %1 %2)\n         %1\n         %2)\n      values))", "user": "5984e7dee4b021a7a535fe43"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "59a5f023e4b066c664927d70"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (> %1 %2) %1 %2) x xs))", "user": "599e3694e4b0871e7608b80a"}, {"problem": 38, "code": "#(last(sort %&))", "user": "59b554cee4b05c620303ca0f"}, {"problem": 38, "code": "(fn [ & args]\n  (reduce (fn [a b] (if (> a b) a b)) args))", "user": "57481f1fe4b009280f9f2b82"}, {"problem": 38, "code": "(fn do-max\n  [& xs]\n  (last (sort xs)))", "user": "59b62f8de4b05c620303ca1f"}, {"problem": 38, "code": "#(last (sort %&))", "user": "59a2c7d5e4b066c664927d2e"}, {"problem": 38, "code": "(fn \n  [& elems] \n  (reduce \n   (fn [a b] (if (> a b) a b))\n   elems))", "user": "59a09b1de4b0871e7608b83a"}, {"problem": 38, "code": "(fn mymax \n  [& xs ]\n  (reduce (fn [x y]\n            (if (> x y)\n              x\n              y) )xs))", "user": "59afe4bae4b0e1f4e384c8c0"}, {"problem": 38, "code": "#(last (sort %&))", "user": "59a0235de4b0871e7608b82b"}, {"problem": 38, "code": "(fn\n  [& args]\n  (reduce (fn [a b]\n            (if(> a b)\n              a\n              b)) args))", "user": "59a9c22ae4b08cbb53654d75"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "59bac5c9e4b0a024fb6ae3ed"}, {"problem": 38, "code": "(fn mymax\n   ([x y]\n   (if (> x y) x y))\n   \n   ([x y & more]\n   (reduce mymax (mymax x y) more)) \n\n   )", "user": "59bee83be4b0a024fb6ae440"}, {"problem": 38, "code": "#(last (sort %&))", "user": "59b8334ce4b05c620303ca4f"}, {"problem": 38, "code": "(fn [& args] (reduce\n                 (fn [prev next] \n                     (if (> prev next) prev next)) args))", "user": "58c7131be4b021aa9917ed6d"}, {"problem": 38, "code": "(fn [& args] \n  (loop [xs (rest args), m (first args)] \n    (if (= 0 (count xs))\n      m\n      (let [head (first xs), tail (rest xs)]\n        (if (> head m) \n          (recur tail head)\n          (recur tail m))))))", "user": "59bdf0eae4b0a024fb6ae42e"}, {"problem": 38, "code": "(comp first reverse sort vector)", "user": "59be62d5e4b0a024fb6ae435"}, {"problem": 38, "code": "(comp last sort list)", "user": "592fa9f8e4b072a2710fcfcb"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "59358f74e4b04f87174def52"}, {"problem": 38, "code": "(fn [& z] \n  (reduce (fn [acc x]\n            (if (> acc x)\n              acc\n              x)) z))", "user": "5656a095e4b0f9d632dd84a1"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "53f053ebe4b0742d9025b0d3"}, {"problem": 38, "code": "#(loop [newColl %& maxVal 0]\n   (if (empty? newColl)\n     maxVal\n     (recur (rest newColl) (if (> (first newColl) maxVal)\n                             (first newColl)\n                             maxVal))))", "user": "59c3a57ce4b0a024fb6ae4dd"}, {"problem": 38, "code": "(fn mx\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & [z & more]] \n   (let [r (mx x y)]\n     (if (empty? more) (mx r z) (recur r z more)))))", "user": "59abd1d8e4b08cbb53654da4"}, {"problem": 38, "code": "(fn [& args] (last (sort (apply list args))))", "user": "59c1c169e4b0a024fb6ae492"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "54058af3e4b0addc1aec6669"}, {"problem": 38, "code": "(fn [& args]\n\n  (reduce \n\n    (fn [result cur]\n\n      (if (> cur result) \n\n        cur\n\n        result)) \n\n    0 \n\n    args))", "user": "59c5093ce4b0a024fb6ae50c"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "user": "59c4d93fe4b0a024fb6ae507"}, {"problem": 38, "code": "#(last (sort %&))", "user": "59b714dbe4b05c620303ca3c"}, {"problem": 38, "code": "#(reduce (fn[a b] (if (> a b) a b)) %&)", "user": "59c94a69e4b0a024fb6ae576"}, {"problem": 38, "code": "(fn [a & b] (reduce #(if (> %1 %2) %1 %2) a b))", "user": "59c7c2cde4b0a024fb6ae54b"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [x y] (if (> y x) y x)) xs))", "user": "59c22fbae4b0a024fb6ae4a3"}, {"problem": 38, "code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) coll))", "user": "592c64ffe4b072a2710fcf57"}, {"problem": 38, "code": "(fn [x & rest] (reduce #(if (> %1 %2) %1 %2) x rest))", "user": "59c3a7e9e4b0a024fb6ae4df"}, {"problem": 38, "code": "(fn [& x] (last(sort x)))", "user": "59cc05e4e4b0a024fb6ae5cb"}, {"problem": 38, "code": "(fn [& others]\n  (loop [x 0\n         maxi 0]\n    (if (< x (count others))\n      (if (> (nth others x) maxi)\n        (recur (+ x 1) (nth others x))\n        (recur (+ x 1) maxi))\n      maxi)))", "user": "59c3d1e7e4b0a024fb6ae4e5"}, {"problem": 38, "code": "(fn [& xs] (last (sort xs)))", "user": "59cc4d5ee4b0a024fb6ae5d0"}, {"problem": 38, "code": "( fn [ & args ] \n  (last (sort args)))", "user": "59a1fd6be4b066c664927d1b"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [a b] (if (> a b) a b)) xs))", "user": "59cc8d8de4b0a024fb6ae5d5"}, {"problem": 38, "code": "#(last (sort %&))", "user": "59cb706ee4b0a024fb6ae5ba"}, {"problem": 38, "code": "(fn [& args] (last (sort (first (list args)))))", "user": "594a7ed1e4b07ddc2dafae02"}, {"problem": 38, "code": "(fn m ([] nil)\n ([a] a)\n ([a & args] (let [rec (apply m args)] \n                (if (> a rec) \n                  a\n                  rec))))", "user": "58f5e0b1e4b0438e51c2cee4"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [_max _cur] (if (> _cur _max) _cur _max)) args))", "user": "59cf6fbce4b0ef0a1e9b5b6c"}, {"problem": 38, "code": "(fn [& args] \n  (reduce (fn [a b] (if (> a b) a b)) (first args) (rest args)))", "user": "59cd13d5e4b0ef0a1e9b5b32"}, {"problem": 38, "code": "#(last (sort %&))", "user": "59cf0d75e4b0ef0a1e9b5b5f"}, {"problem": 38, "code": "(fn [& x] (reduce (fn [y z] (if (> y z) y z)) x))", "user": "59d03660e4b0ef0a1e9b5b7d"}, {"problem": 38, "code": "(comp last sort list)", "user": "59c734e3e4b0a024fb6ae53f"}, {"problem": 38, "code": "(fn [& a] \n  (loop [a a res 0]\n    (if (empty? a)\n      res\n      (recur (rest a) \n             (if (< res (first a))\n               (first a)\n               res\n              )\n       )\n     )\n    )\n  )", "user": "59d1e9cfe4b0ef0a1e9b5b95"}, {"problem": 38, "code": "(comp last sort list)", "user": "59b69bbee4b05c620303ca2a"}, {"problem": 38, "code": "(fn [& it] (reduce (fn [x y] (if (<= x y) y x)) it))", "user": "4ddc5d0a535d02782fcbea05"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "59d37e3de4b0ef0a1e9b5bb9"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [x y](if (> x y) x y)) args))\n\n\n\n;(fn [& args]\n;(loop[biggest 0 coll args]\n;   (if (empty? coll) biggest\n;     (if (> (first coll) biggest) (recur (first coll) (rest coll))\n;       (recur biggest (rest coll))))))", "user": "59c77511e4b0a024fb6ae545"}, {"problem": 38, "code": "(fn [& x]\n  (reduce (fn [x a]\n            (if (> x a)\n              x\n              a))\n          (first x)\n          x))", "user": "55fd0d19e4b0f488688e067a"}, {"problem": 38, "code": "(fn [& xs] (last (sort xs)))", "user": "59c8c9bee4b0a024fb6ae567"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [acc elem] (if (> elem acc) elem acc)) args))", "user": "59d4d126e4b0ef0a1e9b5be9"}, {"problem": 38, "code": "(fn [& args] (reduce\n (fn [x y]\n   (cond (> x y) x :else y)\n ) args)\n)", "user": "57c4e8dce4b05aa3c4741cd7"}, {"problem": 38, "code": "(fn major [% & more]\n  (loop [elm % rst more]\n    (if (or (nil? rst) (empty? rst))\n      elm\n      (if (> elm (first rst))\n        (recur elm (rest rst))\n        (recur (first rst) (rest rst))))))", "user": "536fd48be4b0fc7073fd6e88"}, {"problem": 38, "code": "(fn [& coll] (reduce (fn [acc cur] (if (< acc cur) cur acc)) 0 coll))", "user": "598a0072e4b021a7a535fed9"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "59d72207e4b0ef0a1e9b5c2c"}, {"problem": 38, "code": "#(last (sort %&))", "user": "59da6480e4b0ef0a1e9b5c68"}, {"problem": 38, "code": "#(reduce (fn [m x] (if (> m x) m x)) 0 %&)", "user": "59cf4013e4b0ef0a1e9b5b68"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) 0 x))", "user": "59d4a160e4b0ef0a1e9b5be7"}, {"problem": 38, "code": "(fn foo [x & xs]\n  (cond\n    (empty? xs) x\n    (> x (first xs)) (recur x (rest xs))\n    (<= x (first xs)) (recur (first xs) (rest xs))))", "user": "579f89d5e4b05302be0b72ff"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "59d75e36e4b0ef0a1e9b5c32"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "59cdea74e4b0ef0a1e9b5b47"}, {"problem": 38, "code": "(fn [& numbers]\n   (reduce (fn [num1 num2]\n             (if (> num1 num2)\n               num1\n               num2)) numbers))", "user": "58a34442e4b02bd94d917ef2"}, {"problem": 38, "code": "#(last (sort %&))", "user": "572de985e4b0cd1946bd0f7c"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [a b]\n            (if (> a b)\n              a b)) args))", "user": "52d9e126e4b09f7907dd13b1"}, {"problem": 38, "code": "(fn [& args] (last (sort < args)))", "user": "59ddae03e4b01968742fed65"}, {"problem": 38, "code": "(fn [& args] (last (sort (vec args))))", "user": "53bfd8c4e4b0c98a41f5cca8"}, {"problem": 38, "code": "#(reduce (fn [acc curr] (if (> acc curr) acc curr)) %&)", "user": "59d3eb2fe4b0ef0a1e9b5bd7"}, {"problem": 38, "code": "#(first (reverse (sort %&)))", "user": "59a31c55e4b066c664927d34"}, {"problem": 38, "code": "(fn mx\n  ([a] a)\n  ([a b & rest]\n   (if (> a b)\n    (apply mx (conj rest a))\n    (apply mx (conj rest b)))))", "user": "59dec79ee4b01968742fed81"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "59c8ffe6e4b0a024fb6ae56c"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "59dfd369e4b08badc2a0c4dd"}, {"problem": 38, "code": "(fn largest\n  [& args]\n  (reduce (fn [a b]\n            (if (< a b)\n              b\n              a))\n\n          args))", "user": "59e12c94e4b08badc2a0c509"}, {"problem": 38, "code": "(fn cool [& args]\n  (last (sort args)))", "user": "59e0111ae4b08badc2a0c4e4"}, {"problem": 38, "code": "(fn [& xs] \n  (reduce \n   #(if (> %1 %2) \n      %1 \n      %2) (apply list xs)))", "user": "59d77634e4b0ef0a1e9b5c34"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "59e18b9be4b08badc2a0c50f"}, {"problem": 38, "code": "(fn [& vls]\n   (reduce\n    (fn [v1 v2]\n      (if (> v1 v2)\n        v1\n        v2)) vls))", "user": "59e32913e4b08badc2a0c52c"}, {"problem": 38, "code": "(fn [& coll]\n  (let [fst (first coll)\n        rst (rest coll)]\n    (reduce #(if (> %1 %2) %1 %2) fst rst)))", "user": "550e0951e4b06e50f9beb163"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) 0 rest))", "user": "58e17578e4b005f69f193c7f"}, {"problem": 38, "code": "(fn max-el [a & r]\n    (reduce #(if (< %1 %2) %2 %1) a r))", "user": "59aeff12e4b0e1f4e384c8af"}, {"problem": 38, "code": "(fn f [& s]\n(reduce (fn [acc s*] (if (> s* acc) s* acc)) (first s) (rest s)))", "user": "59e55cc8e4b08badc2a0c555"}, {"problem": 38, "code": "(fn [& y]\n  (reduce #(if (> %1 %2) %1 %2) y))", "user": "59e0f38ae4b08badc2a0c500"}, {"problem": 38, "code": "#(last (sort %&))\n\n;(fn [& more]\n;  (reduce (fn [m i]\n;            (if (> i m) i m)) more))", "user": "59e48db0e4b08badc2a0c53e"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "59dd38a8e4b0a0ac046f2503"}, {"problem": 38, "code": "(fn\n[& args]\n  (loop\n    [lst  args\n     upper 0]\n    (if (zero? (count lst))\n      upper\n      (recur  (drop 1 lst)\n              (if (> (first lst) upper)\n                (first lst)\n                upper)))))", "user": "59deba46e4b01968742fed7f"}, {"problem": 38, "code": "(fn \n   [& args];de esta manera el usuario puede mandar n argumentos :), de manera implicita se hace una lista de esos argumentos :v\n  ;FUNCION ANONIMA QUE DETERMINARA QUE NUMERO ES EL MAS GRANDE DE LA LISTA YA QUE LO EVALUA EN CADA NUMERO :V\n  (reduce  (fn [mayorNumero elementoEvaluar]\n             (if (< mayorNumero elementoEvaluar)\n               elementoEvaluar\n               mayorNumero)) (first args) args))", "user": "59e63a2ce4b08badc2a0c569"}, {"problem": 38, "code": "(fn\n  [& args]\n  (last\n  (sort  args)))", "user": "59dd3930e4b0a0ac046f2504"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "537657f2e4b06839e8705e22"}, {"problem": 38, "code": "(fn algo [& lst]\n  (reduce (fn [f s]\n            (if (< f s)\n              s\n              f\n              )\n            \n            ) lst)\n  )", "user": "59e56c75e4b08badc2a0c556"}, {"problem": 38, "code": "(fn\n  [& args]\n  (reduce #(if (> %1 %2)\n             %1\n             %2) args)\n  )", "user": "59e4e3cbe4b08badc2a0c54a"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> % %2) % %2) args))", "user": "580e7761e4b0849f6811b753"}, {"problem": 38, "code": "(fn [& x]\n  (loop [coll x\n         currMax nil]\n  (if (empty? coll) currMax\n                    (recur (rest coll)\n                           (if (or (= currMax nil) (> (first coll) currMax)) (first coll)\n                                                                             currMax)))))", "user": "59e4fc25e4b08badc2a0c54f"}, {"problem": 38, "code": "#(last (sort %&))", "user": "59e62655e4b08badc2a0c568"}, {"problem": 38, "code": "(fn f\n  [& args]\n  (last (sort args)))", "user": "59e778aae4b0249b72820716"}, {"problem": 38, "code": "(fn my-max [ & args]\n  (if (empty? args) ()\n  (loop [rslt (first args) lst (rest args)]\n    (cond \n     (empty? lst) \t\t\trslt\n     (< rslt (first lst))   (recur (first lst) (rest lst))\n     :else\t\t\t\t\t(recur rslt (rest lst))))))", "user": "59dd387be4b0a0ac046f2502"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [acc el] \n            (if (> el acc)\n                el\n                acc)) 0 args))", "user": "5957cc41e4b066ee0a44af76"}, {"problem": 38, "code": "; pass multiple args with the &\n(fn f [& l] (reduce (fn g [x y] (if (> x y) x y)) l))", "user": "59e61973e4b08badc2a0c567"}, {"problem": 38, "code": "#(last (sort %&))", "user": "59e14ee3e4b08badc2a0c50c"}, {"problem": 38, "code": "(fn [& args] (first(reverse(sort args))))", "user": "59e8c89de4b0249b72820737"}, {"problem": 38, "code": "(fn mymax\n  ([x y]\n     (if (> x y) x y))\n  ([x y & more]\n     (reduce mymax (mymax x y) more)))", "user": "593c1e3be4b069cdc2982b86"}, {"problem": 38, "code": "(fn largest\n  [& args]\n  (let [lst args] lst\n    (reduce (fn [x y] (if (> x y) x y)) lst)))", "user": "59e8fef3e4b0249b72820743"}, {"problem": 38, "code": "#(last (sort %&))", "user": "59e95cafe4b0249b7282074b"}, {"problem": 38, "code": "#(last (sort %&))", "user": "59e9f03be4b0249b72820752"}, {"problem": 38, "code": "(fn [& lst] (last (sort lst)))", "user": "59e8b4ade4b0249b72820734"}, {"problem": 38, "code": "#(last (sort %&))", "user": "59ea287ee4b0249b72820760"}, {"problem": 38, "code": "(fn [& args]\n   (last (sort args)))", "user": "59da2569e4b0ef0a1e9b5c62"}, {"problem": 38, "code": "#(last (sort %&))", "user": "59ea0944e4b0249b72820758"}, {"problem": 38, "code": "(fn myfunc [& nums]\n  (last (sort nums))\n  )", "user": "59e0f839e4b08badc2a0c502"}, {"problem": 38, "code": "(fn largest\n  [& args]\n  (last (sort args)))", "user": "59e68254e4b0249b728206fc"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "user": "59eb63e3e4b0249b7282077c"}, {"problem": 38, "code": "(fn [& x]\n      (loop [cnt 0 thing (first x)]\n        (if (= cnt (count x))\n          thing\n          (recur (inc cnt) (if (> (nth x cnt) thing) (nth x cnt) thing)))))", "user": "59ea85e4e4b0249b72820767"}, {"problem": 38, "code": "#(->> %& sort last)", "user": "59e8bb43e4b0249b72820735"}, {"problem": 38, "code": "(fn [& args]\n  (last(sort(seq args))))", "user": "59dd387ae4b0a0ac046f2501"}, {"problem": 38, "code": "(fn [x & xs](reduce (fn [x y] (if (pos? (.compareTo y x)) y x)) x xs))", "user": "59e8cd8be4b0249b72820739"}, {"problem": 38, "code": "#(last (sort %&))", "user": "59ed01ede4b0249b7282079a"}, {"problem": 38, "code": "(fn  [& y] (last (sort (set y))))", "user": "59abab91e4b08cbb53654da0"}, {"problem": 38, "code": "(fn get-max [& args]\n  (reduce #(if (> %2 %1) %2 %1) 0 args))", "user": "59ece650e4b0249b72820795"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "589560d8e4b00487982d5281"}, {"problem": 38, "code": "(fn maxx [& xs]\n  (if (>= 1 (count xs))\n    (first xs)\n    (let [y (apply maxx (rest xs))]\n      (if (> (first xs) y) (first xs) y))))", "user": "59ee6801e4b0966464fe6a1f"}, {"problem": 38, "code": "(fn [& a] (last(sort a)))", "user": "59f043d0e4b0966464fe6a3d"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) 0 args))", "user": "59c76402e4b0a024fb6ae542"}, {"problem": 38, "code": "#(reduce (fn [acc input] (if (> input acc) input acc)) %&)", "user": "59e5b6a1e4b08badc2a0c55b"}, {"problem": 38, "code": "(fn[& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "58d96bdce4b0a4d5acaab638"}, {"problem": 38, "code": "#(last (sort %&))", "user": "59f192e0e4b0966464fe6a5e"}, {"problem": 38, "code": "(comp last sort list)", "user": "59f2af64e4b0966464fe6a87"}, {"problem": 38, "code": "(fn [& x] (last(sort(seq x))) )", "user": "59f2c9c0e4b0966464fe6a8a"}, {"problem": 38, "code": "(fn \n  [cur & candidates] \n  (reduce #(if (< (first %&) %1) %1 (first %&)) cur candidates))", "user": "59d631d4e4b0ef0a1e9b5c09"}, {"problem": 38, "code": "(fn [& s] (reduce (fn [a b] (if (> a b) a b)) s))", "user": "59ef6cfae4b0966464fe6a32"}, {"problem": 38, "code": "(fn my-max ;a bubbly max\n  [& vs]\n  (loop [[a b & r] vs]\n    (if (empty? r) (if (> a b) a b) \n      (if (> a b) \n        (recur (conj r a))\n        (recur (conj r b))))))", "user": "59ee2284e4b0966464fe6a0f"}, {"problem": 38, "code": "(fn [& xs]\n  (loop [m (first xs) xs (rest xs)]\n    (if (empty? xs)\n      m\n      (if (> m (first xs))\n        (recur m (rest xs))\n        (recur (first xs) (rest xs))))))", "user": "59f43ca3e4b0966464fe6aaa"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "590aaa78e4b047aa04b199c0"}, {"problem": 38, "code": "(fn [& coll] (reduce #(if (< %1 %2) %2 %1) coll))", "user": "59ba2ea0e4b0a024fb6ae3e1"}, {"problem": 38, "code": "(comp last sort list)", "user": "59df2b8ee4b01968742fed87"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (< a b) b a)) args))", "user": "5683fcafe4b0945ebc182aa8"}, {"problem": 38, "code": "(fn custom-max [& s]\n  (reduce #(if (> %1 %2) %1 %2) s)\n  )", "user": "59f78b49e4b0ca45a743a30e"}, {"problem": 38, "code": "(fn[& a](reduce #(if(>%1%2)%1%2)a))", "user": "59f26fb7e4b0966464fe6a7e"}, {"problem": 38, "code": "(fn [& lst] (apply min-key - lst))", "user": "59f8b925e4b0ca45a743a327"}, {"problem": 38, "code": "(fn my-max [& args]\n  (cond\n   (= (count args) 1) (first args)\n   :else (let\n             [x (first args)\n              y (apply my-max (rest args))]\n           (if (< x y)\n             y\n             x))))", "user": "59f7f55de4b0ca45a743a313"}, {"problem": 38, "code": "(fn [& someList] (reduce #(if (> %1 %2) %1 %2) someList))", "user": "59f90e6ae4b0ca45a743a337"}, {"problem": 38, "code": "(fn max-reduce\n  [& coll]\n  (reduce #(if (> %1 %2)%1 %2) 0 coll))", "user": "55fb04e0e4b0f488688e0657"}, {"problem": 38, "code": "(fn [& xs] \n  \n  ( letfn [ (cmp [a b & more] (if (< a b) b a)) ] \n  \n   ;(reduce (cmp (first xs) (first (rest xs)) ))\n   ( reduce cmp xs)\n  \n  )\n)", "user": "56f2611fe4b04a395b9a04a2"}, {"problem": 38, "code": "(fn [& numbers] (last (sort numbers)))", "user": "59fa0bb6e4b0ca45a743a352"}, {"problem": 38, "code": "(fn [n & r] \n  (if (= (count r) 1)\n    (if (> n (first r))\n      n\n      (first r))\n    (recur (if (> n (first r)) n (first r)) (rest r))))", "user": "59f9c111e4b0ca45a743a349"}, {"problem": 38, "code": "(fn [ & args] (reduce #(if (> %1 %2) %1 %2) (seq args)))", "user": "59fa1b05e4b0ca45a743a356"}, {"problem": 38, "code": "#(last (sort %&))", "user": "59f78761e4b0966464fe6af5"}, {"problem": 38, "code": "(fn [& args] \n  (reduce \n   #(if (> %1 %2)\n     %1\n     %2) args))", "user": "57f0a9fde4b0bfb2137f5bf6"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (< %1 %2) %2 %1) 0 args))", "user": "59fb1ca3e4b0ca45a743a376"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "59a080e3e4b0871e7608b837"}, {"problem": 38, "code": "(fn my-max\n    [& coll]\n    (reduce (fn [processed current]\n              (if (> current processed)\n                current\n                processed\n                )\n              )\n            0\n            coll)\n    )", "user": "59fa5fe0e4b0ca45a743a35f"}, {"problem": 38, "code": "(fn [& args] (last (sort  args)))", "user": "59f15e20e4b0966464fe6a5a"}, {"problem": 38, "code": "(fn mmax [& args]\n  (last (sort args)))", "user": "59f44189e4b0966464fe6aab"}, {"problem": 38, "code": "#(last (sort %&))", "user": "59fea630e4b01bb0ae8afd10"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce (fn [memo el]\n            (if (< memo el) el memo))\n          (first xs)\n          (rest xs)))", "user": "59fa241ee4b0ca45a743a358"}, {"problem": 38, "code": "(fn [& data]\n  (reduce #(if (> %1 %2) %1 %2) data))", "user": "593352b7e4b072a2710fd052"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "user": "59fd069ae4b01bb0ae8afcf4"}, {"problem": 38, "code": "(fn [& col] (reduce #(if (> %1 %2) %1 %2) col))\n; #(-> %& sort last)\n; (comp last sort list)", "user": "59f590ade4b0966464fe6ac1"}, {"problem": 38, "code": "(fn mymax [& args] (last (sort args)))", "user": "594e6b8ce4b07ddc2dafaeac"}, {"problem": 38, "code": "(fn [& numbers]\n  (reduce\n   (fn [x y] (if (> x y) x y))\n   numbers))", "user": "59fa7fb0e4b0ca45a743a366"}, {"problem": 38, "code": "(fn [& params] (last (sort params)))", "user": "58182480e4b0c0e9c07b83a7"}, {"problem": 38, "code": "(fn \n[& values] \n(reduce \n (fn \n   [curr currmax] \n   (if (> curr currmax) curr currmax) \n )\n values))", "user": "588fd085e4b00487982d51c0"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (< %1 %2) %2 %1) xs))", "user": "5a01d8f6e4b01bb0ae8afd53"}, {"problem": 38, "code": "#(last (sort %&))", "user": "50222270e4b0846bc458ae45"}, {"problem": 38, "code": "(fn [& args] \n            (reduce (fn [res item] \n                  (if (> item res ) item res)\n                )  args))", "user": "59fcc31fe4b01bb0ae8afcef"}, {"problem": 38, "code": "#(last (sort %&))", "user": "59f820d9e4b0ca45a743a316"}, {"problem": 38, "code": "#(last (sort %&))", "user": "56fcd9dfe4b08d47c977819e"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "5a022949e4b01bb0ae8afd60"}, {"problem": 38, "code": "(fn maxValue [& args] \n  (reduce \n   #(if (> %1 %2) %1 %2)\n  args)\n)", "user": "5a0362a0e4b01bb0ae8afd81"}, {"problem": 38, "code": "(fn [& coll] (reduce (fn [a b] (if (> a b) a b)) (first coll) coll))", "user": "59908f3fe4b0866487ed0d50"}, {"problem": 38, "code": "(fn max-val [n & rst]\n\t(let [M n]\n\t\t(reduce \n\t\t\t(fn [x y]\n\t\t\t\t(if (> x y)\n\t\t\t\t\tx\n\t\t\t\t\ty)) (conj rst n))\n\t\t)\n\n\t)", "user": "5a025edde4b01bb0ae8afd64"}, {"problem": 38, "code": "(fn this\n  ([x] x)\n  ([x y] (if (< x y) y x))\n  ([x y & more] (let [m (if (< x y) y x)] (apply this m more))))", "user": "5a04e923e4b01bb0ae8afda9"}, {"problem": 38, "code": "(comp (partial reduce #(if (> %1 %2) %1 %2))\n      vector)", "user": "5a065388e4b01bb0ae8afdcb"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "5a04d890e4b01bb0ae8afda6"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %2 %1) %1 %2) args))", "user": "59fa5773e4b0ca45a743a35e"}, {"problem": 38, "code": "(fn ([h & more]\n    (if (= (count more) 0)\n      h\n      (if (> h (first more))\n        (recur h (rest more))\n        (recur (first more) (rest more))))))", "user": "59fe5612e4b01bb0ae8afd0c"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (< %1 %2) %2 %1) xs))", "user": "59777e42e4b01722bebd4cf0"}, {"problem": 38, "code": "(fn greatest   [x & more]   (if (empty? more)     x     (if (> x (first more))       (apply greatest x (rest more))       (apply greatest more))))", "user": "5a05a807e4b01bb0ae8afdb8"}, {"problem": 38, "code": "(fn [& more] (first (reverse (sort more ))))", "user": "5a075e73e4b01bb0ae8afdd9"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) (first args) args))", "user": "5a082ce4e4b01bb0ae8afdec"}, {"problem": 38, "code": "(comp last sort list)", "user": "5a03d246e4b01bb0ae8afd8c"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> % %2) % %2) (first args) args))", "user": "532ae82be4b09d4e7a9b552b"}, {"problem": 38, "code": "(fn [& seq]\n  (reduce (fn [a b] (if (< a b) b a)) seq))", "user": "5a0b9fc0e4b04bbd27e6d992"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> % %2) % %2) xs))", "user": "5a00cb31e4b01bb0ae8afd36"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5a080bdde4b01bb0ae8afde9"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> % %2) % %2) args ))", "user": "5a0a3473e4b0eab8c0448941"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (< %1 %2) %2 %1) args))", "user": "5a08cffbe4b01bb0ae8afdfb"}, {"problem": 38, "code": "(fn [h & t] (reduce (fn [acc cur] (if (> acc cur) acc cur)) h t))", "user": "5a07fefee4b01bb0ae8afde5"}, {"problem": 38, "code": "(fn [& coll] \n  (reduce \n   (fn [max-num number]\n     (if (> number max-num)\n       number\n       max-num))\n    coll))", "user": "595e6c76e4b066ee0a44b043"}, {"problem": 38, "code": "#(last(sort %&))", "user": "5a090a06e4b01bb0ae8afdff"}, {"problem": 38, "code": "(fn [& rest] (reduce (fn [first second] (if (> first second) first second)) rest))", "user": "56b17501e4b0982f16b37ded"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "user": "5a062e07e4b01bb0ae8afdc5"}, {"problem": 38, "code": "#(first (sort > %&))", "user": "5a0a25fce4b0eab8c044893d"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "5a09f35fe4b0eab8c0448934"}, {"problem": 38, "code": "(fn [& v] (last (sort v)))", "user": "58d1c1b1e4b03c36ff7e58ef"}, {"problem": 38, "code": "(fn[a & b] (reduce #(if(> %1 %2) %1 %2) a b))", "user": "55129667e4b06e50f9beb1ac"}, {"problem": 38, "code": "(fn mx [x1 & x]\n  (cond \n   (empty? x) x1\n   (> x1 (first x)) (apply mx x1 (rest x))\n   :else (apply mx (first x) (rest x))))", "user": "5a0ce1a5e4b04bbd27e6d9b7"}, {"problem": 38, "code": "(comp last sort list)", "user": "5a12dea3e4b04bbd27e6da44"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce (fn [x y] (if (> x y) x y)) xs))", "user": "5a0a04eee4b0eab8c0448935"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b)\n                   \t\t\t\ta\n                   \t\t\t\tb)) args))", "user": "5a135573e4b0ff51aa4b3180"}, {"problem": 38, "code": "(fn [& s]\n  (last (sort s)))", "user": "54497569e4b032a45b8693d2"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5a14228fe4b0ff51aa4b3193"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "55ec879ae4b0121d4835fdc8"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5a18f868e4b0ff51aa4b31f7"}, {"problem": 38, "code": "(fn [& [f & r]]\n  (reduce\n   (fn [m e] (if (> e m) e m))\n   f r))", "user": "5a188be3e4b0ff51aa4b31ec"}, {"problem": 38, "code": "(fn m ([x y] (if (< x y) y x)) ([x y & more] (reduce m (m x y) more)))", "user": "59135c11e4b0163c97b36f02"}, {"problem": 38, "code": "(fn [& nrs] (reduce (fn [mx nr] (if (> nr mx) nr mx)) nrs))", "user": "5a071cb2e4b01bb0ae8afdd8"}, {"problem": 38, "code": "(fn [& v]\n    (reduce #(if (> %1 %2) %1 %2) v)\n    )", "user": "5a18488ee4b0ff51aa4b31e5"}, {"problem": 38, "code": "(fn [& args]\n  (reduce\n   (fn [prev cur]\n     (if (> cur prev) cur prev))\n   (first args)\n   args))", "user": "5a144fd8e4b0ff51aa4b319a"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [r x] (if (> x r) x r)) args))", "user": "5a14959de4b0ff51aa4b31a0"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce (fn [a b] (if (> a b) a b))\n          0\n          xs))", "user": "531ccb1fe4b08068f379eda7"}, {"problem": 38, "code": "(fn mymax\n  ([x y]\n  \t(if (> x y) x y))\n  ([x y & more]\n   \t(reduce mymax (mymax x y) more)))", "user": "59690e79e4b069c0a1a197e0"}, {"problem": 38, "code": "(fn [& lists]\n  (reduce #(if (< %1 %2)\n             %2\n             %1) lists))", "user": "5a1a7db2e4b0ff51aa4b3213"}, {"problem": 38, "code": "#(reduce (fn [x y] (if (> x y) x y)) %&)", "user": "5a1c3c11e4b0ff51aa4b323d"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5a0ef454e4b04bbd27e6d9fa"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5a16da30e4b0ff51aa4b31cc"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> % %2) % %2) args))", "user": "5a1df94ce4b0ff51aa4b3265"}, {"problem": 38, "code": "(fn [& xs]\n  ((fn my-max [l]\n    (if (empty? (rest l))\n      (first l)\n      ((fn [a b]\n         (if (< a b) b a))\n       (first l) (my-max (rest l)))))\n  xs))", "user": "5a1e93bee4b0ff51aa4b3270"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "5a182c9de4b0ff51aa4b31e0"}, {"problem": 38, "code": "(fn [& t] (reduce (fn [x y] (if (> x y) x y)) t))", "user": "5a1c8353e4b0ff51aa4b3244"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "57a499dae4b0a966079561e6"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "user": "59ff9424e4b01bb0ae8afd24"}, {"problem": 38, "code": "#(reduce (fn [f s] (if (> f s) f s)) %&)", "user": "5a0c822fe4b04bbd27e6d9b0"}, {"problem": 38, "code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) coll))", "user": "5112500ee4b0350614f07a72"}, {"problem": 38, "code": "(fn maxv [& args]\n  (last (apply sorted-set args)))", "user": "5a208195e4b0ff51aa4b32a3"}, {"problem": 38, "code": "(fn [& args]\n  (reduce\n   (fn [x y] (if (> x y) x y))\n   0 args))", "user": "5a1ef970e4b0ff51aa4b327d"}, {"problem": 38, "code": "(fn [& args]\n  (last (apply sorted-set args)))", "user": "59f75327e4b0966464fe6aec"}, {"problem": 38, "code": "(fn [& raw-input]\n  (loop [input raw-input maximum 0]\n    (if (empty? input)\n      maximum\n      (recur (rest input) (if (> (first input) maximum) (first input) maximum)))))", "user": "5a21d34ce4b0ff51aa4b32b9"}, {"problem": 38, "code": "(fn asd\n\t([args]\n       (if (= (count args) 1)\n         (first args)\n         (let [a (first args) b (asd (rest args))]\n         \t(if (> a b) a b)  \n         )\n       )\n  \t)\n\t([a & b] (asd (concat [a] b)))\n)", "user": "5a214798e4b0ff51aa4b32aa"}, {"problem": 38, "code": "(fn [& formal]\n  (loop [input formal\n         maxx 0]\n    (if (empty? input)\n      maxx\n      (recur (rest input)\n             (if (> (first input) maxx) (first input) maxx)))))", "user": "5a2185a4e4b0ff51aa4b32b0"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (< a b) b a)) %&)", "user": "5a1149ace4b04bbd27e6da26"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce (fn [x y] (if (< x y) y x)) xs))", "user": "5a250b86e4b07f18be40aa19"}, {"problem": 38, "code": "(fn [ & more ] (last (sort more)))", "user": "5a19d181e4b0ff51aa4b3207"}, {"problem": 38, "code": ";(fn [& nums] (first (sort > nums)))\n;(fn [& nums] (first (reverse (sort nums))))\n(fn [& nums] (last (sort nums)))", "user": "5a23503fe4b0ff51aa4b32d6"}, {"problem": 38, "code": "#(last (sort %&))", "user": "56ef077ae4b04a395b9a0459"}, {"problem": 38, "code": "(fn [& op] (reduce #(if (> %1 %2) %1 %2) op))", "user": "568d381ee4b0dcc4269f40c1"}, {"problem": 38, "code": "(fn [& args]\n    (loop [cnt args acc 0]\n       (if (< (.size cnt) 2)\n            acc\n          (recur (rest cnt) (if (> (first cnt) acc) (first cnt) acc))\n\n\t))\n  )", "user": "55d7312ee4b0e31453f64a9f"}, {"problem": 38, "code": "(fn [& args]\n\t(last \n    \t(reduce \n        \t(fn [l c]\n            \t(if (> (last l) c) [(last l)] [c])\n        \t)\n    \t[0]\n    \targs)\n    )\n)", "user": "5a21c3f9e4b0ff51aa4b32b7"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5a2960fde4b07f18be40aa78"}, {"problem": 38, "code": "(fn [x & y] (reduce #(if (> %1 %2) %1 %2) x y))", "user": "5a2185c6e4b0ff51aa4b32b1"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "54dd8a8ae4b024c67c0cf795"}, {"problem": 38, "code": "(fn [car & cdr] (cond \n                 (= (rest cdr) '()) car\n                 (< car (first cdr)) (recur (first cdr) (rest cdr))\n                 :else (recur car (rest cdr))))", "user": "5a2b7f4ee4b09cafd31c7f4a"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce (fn [x acc]\n          (if (> x acc)\n            x\n            acc))\n        nums))", "user": "5a2c20c3e4b09cafd31c7f51"}, {"problem": 38, "code": "#(first (reverse ( apply sorted-set %&) ))", "user": "5a2834dfe4b07f18be40aa64"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "5a2cfa85e4b09cafd31c7f61"}, {"problem": 38, "code": "(fn food [& vals] (if (= 1 (count vals))\n                   (first vals)\n                   (if (> (first vals) (last vals))\n                     (apply food (butlast vals))\n                     (apply food (rest vals))\n                     )))", "user": "5a2a0cb6e4b09cafd31c7f2c"}, {"problem": 38, "code": "(fn [& in]\n  (loop [big 0 l in]\n    (if\n      (empty? l)\n      big\n      (recur\n       (if\n         (> (first l) big)\n         (first l)\n         big)\n       (rest l)))))", "user": "5a2df4a0e4b09cafd31c7f74"}, {"problem": 38, "code": "(fn [& nums] (reduce (fn [x y] (if (> x y) x y)) nums))", "user": "5a1d0381e4b0ff51aa4b3255"}, {"problem": 38, "code": "(fn nmax [head & tail]\n  (if (empty? tail) head\n    (if (> (first tail) head)\n      (recur (first tail) (rest tail))\n      (recur head (rest tail))\n      )\n    )\n  )", "user": "5a2e39fce4b09cafd31c7f77"}, {"problem": 38, "code": "(fn [& numbers] (reduce \n    #(if (> %1 %2) %1 %2)\n    0\n    numbers\n  )\n)", "user": "5a285a38e4b07f18be40aa67"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5a1bec89e4b0ff51aa4b322f"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [x y] ( if ( < x y) y x)) args))", "user": "5a1c8c26e4b0ff51aa4b3247"}, {"problem": 38, "code": "(fn [& values] \n  (reduce \n   (fn [acc curr] (if-not acc curr (if (< acc curr) curr acc))) \n   (seq values)))", "user": "59a5b3f4e4b066c664927d69"}, {"problem": 38, "code": "(fn [x & xs] (loop [l xs m x] (if (empty? l) m (recur (rest l) (if (> (first l) m) (first l) m)))))", "user": "5a34f342e4b0ddc586f153d1"}, {"problem": 38, "code": "(fn [& lst] (first (sort > lst)))", "user": "5a2e80fde4b09cafd31c7f7d"}, {"problem": 38, "code": "(fn m\n  ([x] x)\n  ([x & r]\n   (let [v (apply m r)]\n     (if (> x v) x v))))", "user": "5a2b7727e4b09cafd31c7f49"}, {"problem": 38, "code": "(fn\n  [ & xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "user": "5a067f26e4b01bb0ae8afdcc"}, {"problem": 38, "code": "(fn\n  [& nums]\n  (reduce\n    (fn [n acc]\n      (cond\n        (> n acc) n\n        :else acc))\n    (first nums)\n    nums)\n  )", "user": "5a36d3c6e4b0ddc586f153e9"}, {"problem": 38, "code": "(fn [& vals] (reduce #(if (> %1 %2) %1 %2) vals))", "user": "5a37fab1e4b001c08efc0c93"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5a1679d9e4b0ff51aa4b31ca"}, {"problem": 38, "code": "(fn [& numbers] (last (sort numbers)))", "user": "5a388675e4b001c08efc0ca2"}, {"problem": 38, "code": "(fn kek [& args] (reduce (fn [acc value] (if (> value acc) value acc)) args))", "user": "5773f3a9e4b0979f896515f2"}, {"problem": 38, "code": "(fn [& args]\n  (last\n   (sort\n    (seq args))))", "user": "510d2a99e4b078ea71921130"}, {"problem": 38, "code": "(fn [x y & more]\n  (if (> x y)\n    (if (empty? more)\n      x\n     (recur x (first more) (rest more)))\n\t(if (empty? more)\n      y      \n      (recur y (first more) (rest more)))))", "user": "5a011305e4b01bb0ae8afd40"}, {"problem": 38, "code": "(fn [p & q]\n  (letfn [(r [x]\n            (if (== (count x) 1)\n              (nth x 0)\n              (let [a (first x)\n                    b (r (rest x))]\n                (if (> a b) a b))))]\n    (r (cons p q))))", "user": "52281e1ee4b0186687e23a69"}, {"problem": 38, "code": "(fn [& s] (reduce #(if (< % %2) %2 %) s))", "user": "5a3d7afae4b0447ef91cc5a6"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "user": "52513bf1e4b0541d1855b86e"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %2 %1) %2 %1) xs))", "user": "59dfb8dbe4b08badc2a0c4da"}, {"problem": 38, "code": "#(reduce (fn [acc x] (if (> acc x) acc x)) %&)", "user": "5a3c5c54e4b001c08efc0ce3"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "52fd35eee4b047fd55837029"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5a3d33b3e4b001c08efc0cef"}, {"problem": 38, "code": ";(comp first reverse sort list)\n\n(fn [& etc] \n  (reduce #(if (> %1 %2) %1 %2) etc))", "user": "5a257747e4b07f18be40aa1f"}, {"problem": 38, "code": "(fn [firstelem & others]\n  (reduce #(if (> %1 %2) %1 %2) firstelem others))", "user": "5a3ece62e4b0447ef91cc5b9"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5a401a7de4b0447ef91cc5c5"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "58a6806ee4b01a0c0b23292f"}, {"problem": 38, "code": "(fn [& args]\n  (loop [r -1\n         a args]\n    (if (empty? a)\n      r\n      (recur (if (> (first a) r)\n               (first a)\n               r) (rest a)))))", "user": "5a29ee57e4b09cafd31c7f2b"}, {"problem": 38, "code": "(fn [& s]\n  (reduce #(if (> % %2) % %2) s))", "user": "59f4c9c7e4b0966464fe6ab7"}, {"problem": 38, "code": "(fn [& args]\n  (last(sort args)) )", "user": "5a40eb64e4b0447ef91cc5d8"}, {"problem": 38, "code": "(fn [& args]\n    (last (apply sorted-set args)) )", "user": "5a43347ee4b0447ef91cc603"}, {"problem": 38, "code": "(fn my-max \n  [& args]\n  (reduce (fn\n            [acc current]\n            (if (> current acc)\n             current\n             acc)\n            )\n   Integer/MIN_VALUE args))", "user": "5a429e40e4b0447ef91cc5f9"}, {"problem": 38, "code": "(fn [i & m] (reduce #(if (> %2 %) %2 %1) 0 (concat [i] m)))", "user": "5a0e9a54e4b04bbd27e6d9ef"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> % %2) % %2) xs))", "user": "567447a2e4b05957ce8c6135"}, {"problem": 38, "code": "(fn \n  [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "5a3577bfe4b0ddc586f153dd"}, {"problem": 38, "code": "(fn [f & r] (reduce (fn [a b]\n          (if (> a b)\n            a\n            b)\n          ) (flatten [f r])))", "user": "558843dae4b059ccff29b1f3"}, {"problem": 38, "code": "#(reduce (fn [mx n] (if (> n mx) n mx)) %1 %&)", "user": "5a45aaece4b05d388ecb6b3f"}, {"problem": 38, "code": "(fn my-max [& args]\n  (loop [m 0 args args]\n    (if (empty? args)\n      m\n      (recur \n       (if (> m (first args))\n         m\n         (first args))\n       (rest args)))))", "user": "5a346d73e4b0ddc586f153c8"}, {"problem": 38, "code": "(comp first reverse sort list)", "user": "5a342188e4b0ddc586f153bd"}, {"problem": 38, "code": "(fn \n  [& args]\n  \t(reduce #(if (> %1 %2) %1 %2) args))", "user": "5182de5ce4b0353c468deb74"}, {"problem": 38, "code": "(fn return-max\n  [& args]\n  (reduce\n    (fn\n      [x y]\n      (if (> x y)\n          x\n          y))\n    args))", "user": "5a35d515e4b0ddc586f153e1"}, {"problem": 38, "code": "(fn [& s]\n  (loop [s s, m 0]\n    (if (seq s)\n      (if (> (first s) m)\n        (recur (rest s) (first s))\n        (recur (rest s) m))\n      m)))", "user": "5a481e05e4b05d388ecb6b64"}, {"problem": 38, "code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) coll))", "user": "5a4993c0e4b05d388ecb6b71"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "user": "5a4d14f4e4b05d388ecb6ba1"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "57155b6fe4b07c98581c3ad8"}, {"problem": 38, "code": "(fn [& s] (reduce (fn [a x] (if (> x a) x a)) (first s) s))", "user": "5a4de614e4b05d388ecb6bb1"}, {"problem": 38, "code": "(fn [& coll]\n  (loop [maxx -1\n         coll coll]\n    (if (empty? coll)\n      maxx\n      (if (> (first coll) maxx) \n        (recur (first coll) (rest coll))\n        (recur maxx (rest coll))))))", "user": "5a4e1c81e4b05d388ecb6bb6"}, {"problem": 38, "code": "(fn [& xs] \n  (reduce #(if (> %1 %2) %1 %2) (first xs) xs))", "user": "58db7b81e4b0a4d5acaab680"}, {"problem": 38, "code": "(fn [& data] (nth (sort data) (- (count data) 1)))", "user": "5a4ec4f0e4b05d388ecb6bc2"}, {"problem": 38, "code": "(fn [& args] (last (apply sorted-set args)))", "user": "5a4d656fe4b05d388ecb6ba9"}, {"problem": 38, "code": "(fn mymax\n  ([a] a)\n  ([a b] (if (> a b) a b))\n  ([a b & r] (reduce mymax (mymax a b) r)))", "user": "5a40bd29e4b0447ef91cc5d6"}, {"problem": 38, "code": "(fn ([a b] (if (> a b) a b))\n  ([a b c] (if (> a b) a b))\n  ([a b c d] (if (> a b) a b))\n  )", "user": "5a4e7025e4b05d388ecb6bbd"}, {"problem": 38, "code": "#(first (reverse (sort %&)))", "user": "5a512929e4b05d388ecb6be2"}, {"problem": 38, "code": "(fn mymax\n  [& numbers]\n  (loop [m 0 tmp-numbers numbers]\n    (if (empty? tmp-numbers) m\n                             (let [a (first tmp-numbers)]\n                               (if (>= a m) (recur a (rest tmp-numbers))\n                                            (recur m (rest tmp-numbers))))))\n  )", "user": "5a4cbba1e4b05d388ecb6b98"}, {"problem": 38, "code": "(fn [& xs] (last (sort xs)))", "user": "5a536c06e4b05d388ecb6c0f"}, {"problem": 38, "code": "(fn [& args] \n  (last (sort args)))", "user": "53336ab8e4b019098a6f8b84"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %2 %1) %2 %1) xs))", "user": "5a535572e4b05d388ecb6c0b"}, {"problem": 38, "code": "(comp last sort list)", "user": "5a527beee4b05d388ecb6bfe"}, {"problem": 38, "code": "(fn [& incoming-list] \n  (if (empty? incoming-list)\n    nil\n    (loop [maximum (first incoming-list) data (rest incoming-list)]\n      (if (empty? data)\n        maximum\n        (recur (if (< maximum (first data)) (first data) maximum) (rest data))\n      )\n    )\n  )\n)", "user": "5a4dbc97e4b05d388ecb6bae"}, {"problem": 38, "code": "(fn foo [& args] (loop[y args res 0]\n                   (if (empty? y) res \n                      (recur (rest y) (if (> (first y) res) (first y) res)))))", "user": "5a533cc0e4b05d388ecb6c09"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5a534241e4b05d388ecb6c0a"}, {"problem": 38, "code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) more))", "user": "5a536cf2e4b05d388ecb6c10"}, {"problem": 38, "code": "(fn [& v]\n  (loop [max-val 0\n         [n & rest] v]\n    (if-not n\n      max-val\n      (recur (if (> n max-val) n max-val)\n             rest))))", "user": "5a54e3c4e4b05d388ecb6c30"}, {"problem": 38, "code": "(fn [x & xs]\n  (loop [m x r xs]\n    (if (empty? r)\n      m\n      (recur (if (> m (first r)) m (first r))\n             (rest r)))))", "user": "5a4caa20e4b05d388ecb6b94"}, {"problem": 38, "code": "(comp last sort vector)", "user": "5a52f2cbe4b05d388ecb6c06"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "5a3c2a08e4b001c08efc0cdf"}, {"problem": 38, "code": "(fn maxValue ([a] a)\n  ([a b] (if (> a b) a b))\n  ([a b & more] (reduce maxValue (maxValue a b) more)))", "user": "5a53f2aae4b05d388ecb6c1e"}, {"problem": 38, "code": "(fn my-max [a & as] \n  ( let [b (first as)]\n  (cond\n    (= nil b) a\n    (< a b) (apply my-max as)\n    :else (apply my-max (cons a (rest as)))\n   )\n    )\n  )", "user": "5a55114ae4b05d388ecb6c37"}, {"problem": 38, "code": "(fn [& more]\n   (last (sort more)))", "user": "58d4d864e4b03c36ff7e594c"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "59b015f8e4b0e1f4e384c8c6"}, {"problem": 38, "code": "(fn [& xs] \n  (reduce \n   (fn [a b] \n     (if (> a b) \n       a \n       b)) \n   xs))", "user": "552d9b31e4b076ab5578f7eb"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [a b] (if (> b a) b a)) xs))", "user": "5a566e8fe4b05d388ecb6c51"}, {"problem": 38, "code": "(fn [& in] (reduce #(if (> %1 %2) %1 %2) 0 in))", "user": "5a244240e4b0ff51aa4b32e9"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5a34de78e4b0ddc586f153d0"}, {"problem": 38, "code": "(fn [x & xs]\n  (loop [mx x\n         vs xs]\n    (if (= vs [])\n      mx\n      (let [v (first vs)\n            mxn (if (> v mx) v mx)]\n        (recur mxn (drop 1 vs))))))", "user": "56fd058be4b08d47c97781a1"}, {"problem": 38, "code": "(fn maximum\n  ([x y]\n   (if(> x y) x y))\n  ([x y & more]\n   (reduce maximum (maximum x y) more)))", "user": "5a58bfd0e4b05d388ecb6c84"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) 0 args))", "user": "5a5894d9e4b05d388ecb6c81"}, {"problem": 38, "code": "(fn [& n] (last (sort n)))", "user": "5a591d04e4b05d388ecb6c90"}, {"problem": 38, "code": "(fn mymax [ & s]\n  (reduce #(if (< %1 %2) %2 %1) s)\n)", "user": "5a424954e4b0447ef91cc5f0"}, {"problem": 38, "code": ";mine\n;(fn [& xs]\n;  (reduce #(if (> %1 %2) %1 %2) xs))\n;_pcl's\n; (comp last sort list)\n;szeerzy's\n;#(-> %& sort last)\n;mine\n;(comp (partial reduce #(if (> %1 %2) %1 %2)) list)\t\n;mine\n#(reduce (fn [x y] (if (> x y) x y)) %&)", "user": "5a544eeee4b05d388ecb6c24"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [acc x] (if (> x acc) x acc)) -99999999 args))", "user": "5a5800e1e4b05d388ecb6c76"}, {"problem": 38, "code": "(fn\n  [& args]\n  (reduce\n   (fn [x y] (if (> x y) x y)) args))", "user": "59ea07c9e4b0249b72820756"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [num1 num2] (cond (> num1 num2) num1 :else num2)) args))", "user": "5a527c16e4b05d388ecb6bff"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %2 %1) %2 %1) (first xs) xs))", "user": "5a584ca2e4b05d388ecb6c7d"}, {"problem": 38, "code": "(comp #(reduce (fn [acc x] (if (> x acc) x acc)) 0 %) list)", "user": "5a5be1ece4b0512ff01cd90f"}, {"problem": 38, "code": "; BS\n;(fn [& args] (first (sort > args)))\n\n\n; better\n(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "587b8bdee4b01531a375eaff"}, {"problem": 38, "code": "(fn [& numbers]\n  (if (= 0(count numbers))\n    nil\n    (loop [num-seq (rest numbers) maximum (first numbers)]\n      (cond\n        (empty? num-seq) maximum\n        :else (recur (rest num-seq) ((fn [a b] (if (> a b) a b)) maximum (first num-seq)))\n      )\n    )\n  )\n)", "user": "5a5b9e3ce4b0512ff01cd90b"}, {"problem": 38, "code": "(fn [& args]\n    (loop [s args\n           r (first s)]\n      (if-not (seq s)\n        r\n        (recur (next s)\n               (if (>= (first s) r)\n                 (first s)\n                 r)))))", "user": "5a5d0726e4b0512ff01cd91b"}, {"problem": 38, "code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) coll))", "user": "5a5be4a6e4b0512ff01cd910"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5a5dbe9de4b0512ff01cd92b"}, {"problem": 38, "code": "(fn [& values]\n  (reduce #(if (> %1 %2) %1 %2) values))", "user": "5a5a6347e4b05d388ecb6ca9"}, {"problem": 38, "code": "(fn my-max [& coll] (last(sort coll)))", "user": "5a51e029e4b05d388ecb6bf0"}, {"problem": 38, "code": "(fn [& values]\n  (reduce (fn [mx, i](if (> i mx) i mx)) 0 values))", "user": "594c7c96e4b07ddc2dafae65"}, {"problem": 38, "code": "(fn [& nums] (reduce (fn [a b] (if (> a b) a b)) nums) )", "user": "5a5f91d4e4b0512ff01cd94a"}, {"problem": 38, "code": "(fn [& l] (last (sort l)))", "user": "5a5b5806e4b0512ff01cd904"}, {"problem": 38, "code": "(fn my-max [x & args]\n  (reduce #(if (> %1 %2) %1 %2) x args))", "user": "5a621702e4b0512ff01cd983"}, {"problem": 38, "code": "(fn [& rst]\n  (reduce (fn [m e] (if (> m e ) m e)) rst))", "user": "5a624129e4b0512ff01cd987"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "5a36e788e4b0ddc586f153ec"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5840178ee4b089d5ab817de0"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5a64d12de4b0512ff01cd9a7"}, {"problem": 38, "code": "(fn [& nums] (last (sort nums)))", "user": "5a66f358e4b0512ff01cd9d5"}, {"problem": 38, "code": "#(last (sort %&))", "user": "59ff8da5e4b01bb0ae8afd23"}, {"problem": 38, "code": "#(reduce (fn [x,y] (if (> x y) x y)) %&)", "user": "5a665493e4b0512ff01cd9c5"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce \n    (fn [acc n]\n      (if (> n acc)\n        n\n        acc\n      )\n    )\n    nums\n  )\n)", "user": "554b975ae4b0a04f79299592"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "5a6b15e9e4b0512ff01cda32"}, {"problem": 38, "code": "(fn get-max [x & args]\n    (last (sort (conj args x))))", "user": "58f5b58ae4b0438e51c2cedc"}, {"problem": 38, "code": "(fn \n  [& args]\n  (reduce #(if (> %2 %1) %2 %1) args))", "user": "5a6a32b6e4b0512ff01cda22"}, {"problem": 38, "code": "(fn [& z] (reduce #(if (> % %2) % %2) z))", "user": "5a625bc2e4b0512ff01cd989"}, {"problem": 38, "code": "(fn find-max [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5a59a76fe4b05d388ecb6c98"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [res e] (if (> e res) e res)) 0 args))", "user": "5a6b9b95e4b0512ff01cda40"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "5a6a7cc5e4b0512ff01cda27"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5a42d6a8e4b0447ef91cc5fb"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [acc i] (if (> i acc) i acc)) xs))", "user": "5920c191e4b09b4ee5954c61"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5a488c09e4b05d388ecb6b68"}, {"problem": 38, "code": "(fn [& x]\n  (last (sort x)))", "user": "5a4b3abde4b05d388ecb6b81"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "55f344afe4b06e875b46ce5a"}, {"problem": 38, "code": "(fn\n  [& args]\n  (let [maximum (first args)]\n    (reduce #(if (> %1 %2) %1 %2) maximum args)))", "user": "5a6f2942e4b0512ff01cda78"}, {"problem": 38, "code": "(fn maxx [a & b] \n   (if (= (count b) 1) \n       (if (> a (first b)) a b)\n       (if (> a (first b)) \n           (recur a (rest b))\n           (recur (first b) (rest b))\n        )\n       \n    ) \n )", "user": "5a6afb1de4b0512ff01cda2f"}, {"problem": 38, "code": "(fn [& coll] (reduce (fn [x y] (if (> x y) x y)) coll))", "user": "5a61bf79e4b0512ff01cd97b"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (> % %2) % %2) x xs))", "user": "5a6af090e4b0512ff01cda2d"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "586f4900e4b01531a375e9c6"}, {"problem": 38, "code": "(fn\n  [& args]\n  (reduce (fn \n            [c1,c2]\n            (if (> c1 c2) c1 c2)\n            )  args)\n  )", "user": "5a71c89ee4b0512ff01cda93"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "56aad4f7e4b03c432f187338"}, {"problem": 38, "code": "(fn my_max \n\t([& lst] \n\t\t\t((fn my_max_helper[lst num]\n\t\t\t\t(if (empty? lst)\n\t\t\t\t\tnum\n\t\t\t\t\t(if (> num (first lst))\n\t\t\t\t\t\t(my_max_helper (rest lst) num)\n\t\t\t\t\t\t(my_max_helper (rest lst) (first lst))\n\t\t\t\t\t\t)\n\t\t\t\t\t))\n\t\t\t\tlst (first lst))\n\t\t\t)\n\t)", "user": "5a663a32e4b0512ff01cd9c2"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "4fd4bddce4b0d4de60cee36e"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5a71e7c9e4b0512ff01cda95"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "55c216dde4b0e31453f64974"}, {"problem": 38, "code": "(fn [& args] \n  (reduce\n    #(if (< %1 %2) %2 %1)\n    (first args)\n    (rest args)))", "user": "588053cae4b0f1effa3b7612"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5a7900a0e4b013a48d39977b"}, {"problem": 38, "code": "(fn [& w] (reduce #(if (>= %1 %2) %1 %2 ) 0 w))", "user": "5a634ff0e4b0512ff01cd995"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "58eed5b7e4b056aecfd47db8"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5a779197e4b013a48d399763"}, {"problem": 38, "code": "(fn [x & vals] (reduce #(if (> %1 %2) %1 %2) x vals))", "user": "5a69be17e4b0512ff01cda14"}, {"problem": 38, "code": "(fn[& args] (last (sort  args)))", "user": "5a63f8bae4b0512ff01cd99f"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [res arg] (if (> res arg) res arg))\n          args))", "user": "579dd954e4b05b1deef9ae1b"}, {"problem": 38, "code": "(fn [& a] (last (sort a)))", "user": "5a778224e4b013a48d399761"}, {"problem": 38, "code": "(fn [& elements] (reduce #(if (> %1 %2) %1 %2) elements))", "user": "5a6170fde4b0512ff01cd975"}, {"problem": 38, "code": "(fn [& v]\n  (loop [v v, res 0]\n    (if (seq v)\n      (if (> (first v) res)\n        (recur (rest v) (first v))\n        (recur (rest v) res))\n      res)))", "user": "5a7ae674e4b03baeef9276d5"}, {"problem": 38, "code": "(comp last sort list)", "user": "5a7e194de4b03baeef927706"}, {"problem": 38, "code": "#(reduce (fn [x y] (if (> x y)\n                     x\n                     y)) %&)", "user": "5a7cee73e4b03baeef9276f2"}, {"problem": 38, "code": "(fn mmax\n  [& args]\n  (->> args\n       (sort)\n       (last)))", "user": "5a798ac5e4b03baeef9276c0"}, {"problem": 38, "code": "(fn [n & args]\n   (reduce #(if (> %1 %2) %1 %2) n args))", "user": "5a80b934e4b00b71e582a05b"}, {"problem": 38, "code": ";;\n;; Shorter solution by sorting the sequence first and selecting the largest one.\n;;\n(fn problem-38-with-sort [& coll]\n  (last (sort coll)))\n\n\n;;\n;; Another solution using a recursion\n;; \n;; (fn problem-38-with-recursion [& coll]\n;;   (cond\n;;     (or (nil? coll) (empty? coll)) '()\n;;     (empty? (rest coll)) (first coll)\n;;     (> (first coll) (second coll)) (apply problem-38-with-recursion (cons (first coll) (rest (rest coll))))\n;;     :else (apply problem-38-with-recursion (rest coll))))", "user": "5a786f6be4b013a48d39976e"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5a822590e4b00b71e582a073"}, {"problem": 38, "code": "(fn  [& list-ints]\n  (loop [result nil feed-set list-ints]\n    (cond\n      (empty? feed-set) result\n      :else\n      (recur\n        (cond\n          (nil? result) (first feed-set)\n          (> (first feed-set) result) (first feed-set)\n          :else result)\n        (rest feed-set)))))", "user": "5826209fe4b051871117bef1"}, {"problem": 38, "code": "#(reduce (fn[a b](if (< a b) b a)) %1 %&)", "user": "5a80ad4be4b00b71e582a058"}, {"problem": 38, "code": "(fn [& args] (last (apply sorted-set args)))", "user": "5a84cf8de4b00b71e582a095"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y))\n                              Integer/MIN_VALUE args))", "user": "5a813b90e4b00b71e582a065"}, {"problem": 38, "code": "#(loop [fi (first %&)\n        ri (rest %&)]\n   (if (empty? ri) fi\n     (if (> fi (first ri))\n       (recur fi (rest ri))\n       (recur (first ri) (rest ri)))))", "user": "59061cc8e4b047aa04b1992b"}, {"problem": 38, "code": "(fn [x & tl] (reduce #(if (> %1 %2) %1 %2) (conj tl x)))", "user": "5a7deab5e4b03baeef927703"}, {"problem": 38, "code": "(fn\t[& args] (reduce (fn [m x] (if (> x m) x m)) args))", "user": "5a86ad84e4b05369db4d249c"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5a7da832e4b03baeef9276fc"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5a856f1ae4b00b71e582a0a3"}, {"problem": 38, "code": "(fn max-value [x & xs]\n  (reduce (fn [x y] (if (pos? (.compareTo y x)) y x)) x xs))", "user": "5a853662e4b00b71e582a09e"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "5a7ff79ce4b00b71e582a046"}, {"problem": 38, "code": "(fn [& others] (-> others sort reverse first))", "user": "59021fede4b0438e51c2d04d"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "5a653f80e4b0512ff01cd9b2"}, {"problem": 38, "code": "(fn [& xs]\n   (loop [xs xs\n          x 0]\n     (cond\n       (empty? xs) x\n       (< (first xs) x) (recur (rest xs) x)\n       :else (recur (rest xs) (first xs)))))", "user": "5a8bc2a1e4b05369db4d24ef"}, {"problem": 38, "code": "(fn [& sq] (-> sq sort last))", "user": "567a3112e4b05957ce8c6196"}, {"problem": 38, "code": "(fn max-items [head & tail]\n  (reduce (fn [acc item]\n    (if (> item acc) item acc)\n  ) head tail)\n)", "user": "5a8e9fb5e4b05369db4d2529"}, {"problem": 38, "code": "(fn [& v] (reduce (fn [a b] (if (> a b) a b) ) v) )", "user": "5a8d55a8e4b05369db4d2514"}, {"problem": 38, "code": "(fn [& args]\n  (loop [coll args m 0]\n    (if (empty? coll)\n      m\n      (recur (next coll) (if (> (first coll) m) (first coll) m)))))", "user": "5971a017e4b01722bebd4c75"}, {"problem": 38, "code": "(fn [& args]\n  (reduce\n    #(if (> %1 %2) %1 %2) ; two-arg max\n    args))", "user": "5a9181c5e4b002d099cae6f6"}, {"problem": 38, "code": "(fn [& parms] (last (sort parms)))", "user": "5a929fb3e4b002d099cae70f"}, {"problem": 38, "code": "(fn\n  [& args] \n  (let [_max (fn \n               [x & [y]]\n               (if y\n                 (if (> x y) x y)\n                 x))]\n    (reduce _max args)))", "user": "5a8b6d42e4b05369db4d24e6"}, {"problem": 38, "code": "(fn [& a] (last (sort a)))", "user": "51421cd5e4b0b50abeb46b2c"}, {"problem": 38, "code": "(fn [& args]\n  (loop [current (first args)\n         remain (rest args)\n         curmax (first args)]\n    (if (empty? remain)\n      curmax\n      (recur (first remain)\n             (rest remain)\n             (if (> current curmax) current curmax)))))", "user": "5a373b80e4b001c08efc0c7c"}, {"problem": 38, "code": "(fn [& s] \n  (reduce (fn [r x] \n            (if (< r x)\n              x r))\n           s))", "user": "5a8ebd9ae4b05369db4d252b"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [x y]\n            (if (> x y)\n              x\n              y))\n          args))", "user": "5a5767f3e4b05d388ecb6c65"}, {"problem": 38, "code": "(fn\n  [& params]\n  (reduce (fn [curMax cur] (if (> cur curMax) cur curMax)) (first params) params))", "user": "5a9567bae4b0d174b936c752"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "user": "5a95c639e4b0d174b936c75e"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5a7a09e6e4b03baeef9276ca"}, {"problem": 38, "code": "(fn [a & b]\n      (if (= 0 (count b))\n           a\n          (let [c (first b) d (rest b)]\n               (if (> a c)\n                   (recur a d)\n                   (recur c d)))))", "user": "58803ed9e4b0f1effa3b760f"}, {"problem": 38, "code": "(fn [& numbers]\n  (last (sort numbers)))", "user": "5a932f63e4b0d174b936c71b"}, {"problem": 38, "code": "(fn [& nums]\n  (first (sort > (seq nums))))", "user": "5a95e50be4b0d174b936c760"}, {"problem": 38, "code": "(fn [& args]\n  (loop [maxi (first args) seq args]\n    (if (empty? seq)\n      maxi\n      (if (> (first seq) maxi)\n        (recur (first seq) (rest seq))\n        (recur maxi (rest seq))))))", "user": "5a962c09e4b0d174b936c765"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5a9545dbe4b0d174b936c74c"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5a97eaffe4b0d174b936c783"}, {"problem": 38, "code": "#(last (sort (seq %&)))", "user": "58c71509e4b021aa9917ed6e"}, {"problem": 38, "code": "(fn t\n    ([a] a)\n    ([a & b]\n      (if (< a (first b))\n        (apply t (first b) (rest b))\n        (apply t a (rest b)))))", "user": "5a78cd9ee4b013a48d399777"}, {"problem": 38, "code": "(fn [x & ys] \n  (reduce #(if (> %1 %2) %1 %2) x ys))", "user": "59ef5280e4b0966464fe6a2b"}, {"problem": 38, "code": "(fn [& params]\n  (reduce (fn [one two] (if (> one two)\n                           one\n                           two))\n          params))", "user": "5a9829e5e4b0d174b936c788"}, {"problem": 38, "code": "#(first (reverse (sort %&)))", "user": "5a967757e4b0d174b936c76a"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [x y] (if (> x y) x y)) args)\n  )", "user": "5a984657e4b0d174b936c78a"}, {"problem": 38, "code": "(fn [& lst]\n  (reduce (fn [a b] (if (> a b) a b)) lst))", "user": "5a99b688e4b0d174b936c7a6"}, {"problem": 38, "code": "(fn [i & in] (last(sort(flatten(list i in)))))", "user": "5a99b83fe4b0d174b936c7aa"}, {"problem": 38, "code": "(fn [& n]\n  (reduce #(if (> % %2) % %2) n))", "user": "5939e726e4b069cdc2982b45"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a, b] (if(>= a b) a b)) args))", "user": "5a9aad01e4b0d174b936c7c0"}, {"problem": 38, "code": "(fn [& more] \n  (reduce #(if (> %2 %1) %2 %1) more))", "user": "5a75da49e4b0512ff01cdacf"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5a96af3de4b0d174b936c76d"}, {"problem": 38, "code": "(fn \n  [& col] \n  (last (sort col)))", "user": "5a9be505e4b0d174b936c7cf"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) (flatten (cons x xs))))", "user": "59f6495ee4b0966464fe6acf"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "5a9ac061e4b0d174b936c7c1"}, {"problem": 38, "code": "(fn maximum [& sequence] (last (sort sequence)))", "user": "5a99d28ee4b0d174b936c7b3"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [y z] (if (> z y) z y)) xs))", "user": "52bba119e4b07a9af57922ea"}, {"problem": 38, "code": "#(last(sort %&))", "user": "5a99ae99e4b0d174b936c7a4"}, {"problem": 38, "code": "(fn [& n] (reduce #(if (> %1 %2) %1 %2) n))", "user": "5a99b863e4b0d174b936c7ae"}, {"problem": 38, "code": "(fn [& seq]\n  (reduce (fn [x y] (if (< x y) y x)) seq))", "user": "5a426a3fe4b0447ef91cc5f2"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5a9dbffbe4b0d174b936c7f4"}, {"problem": 38, "code": "(fn [& values] (reduce (fn [roll value] (if (> roll value) roll value)) values))", "user": "5a9dbb32e4b0d174b936c7f3"}, {"problem": 38, "code": "(fn [& el] (last (sort el)))", "user": "5a9db513e4b0d174b936c7f0"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5a952268e4b0d174b936c746"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5a9eaab3e4b0d174b936c807"}, {"problem": 38, "code": "#(last (sort%&))", "user": "5a9cdec0e4b0d174b936c7e1"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5aa00b7fe4b0d174b936c825"}, {"problem": 38, "code": "(fn [x & y] (if-not (empty? y) (recur (if (> x (first y)) x (first y)) (rest y)) x))", "user": "5a9f2c53e4b0d174b936c812"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "5a9f005be4b0d174b936c810"}, {"problem": 38, "code": "(fn [& v]\n  (loop [result (first v) tgt (rest v)]\n    (if (empty? tgt) result\n        (let [next (first tgt)\n              result (if (< result next) next result)]\n          (recur result (rest tgt))))))", "user": "5a98ab58e4b0d174b936c78e"}, {"problem": 38, "code": "(fn maximum [& x]\n  (loop [coll (seq x) maks 0]\n    (if (empty? coll)\n      maks\n      (if (> (first coll) maks)\n        (recur (rest coll) (first coll))\n        (recur (rest coll) maks)))))", "user": "5a9482b7e4b0d174b936c737"}, {"problem": 38, "code": "(fn\n  [& args]\n  (loop [li (rest args) m (first args)]\n    (if (empty? li)\n      m\n      (if (> (first li) m)\n        (recur (rest li) (first li))\n        (recur (rest li) m)\n        )\n      )\n    )\n  )", "user": "5a90395ce4b05369db4d254a"}, {"problem": 38, "code": "(fn [& indata]\n  (loop [data (rest indata) maxdata (first indata)]\n    (if (empty? data)\n      maxdata\n      (let [fdata (first data)]\n        (recur (rest data) (if (> maxdata fdata) maxdata fdata))))))", "user": "56197b47e4b053970a773af8"}, {"problem": 38, "code": "(fn\n  [& lst]\n  (reduce (fn [a b] (if (> a b) a b)) lst))", "user": "5aa2f1dee4b0d174b936c865"}, {"problem": 38, "code": "(fn [& aly] (reduce (fn [x y] (if (< x y) y x)) aly))", "user": "5a9a12d6e4b0d174b936c7b7"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "5a94a38ce4b0d174b936c73e"}, {"problem": 38, "code": "(fn [& args] (last (apply sorted-set args)))", "user": "5a9e3698e4b0d174b936c7fc"}, {"problem": 38, "code": "#(last \n  (sort %&))", "user": "5aa4b961e4b0d174b936c888"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5aa1e0f1e4b0d174b936c84e"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if(> b a) b a)) args))", "user": "5aa690c0e4b0d174b936c8ad"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5a99cab6e4b0d174b936c7b2"}, {"problem": 38, "code": "(fn\n  [& more]\n  (last (sort more)))", "user": "5a99b81be4b0d174b936c7a9"}, {"problem": 38, "code": "(fn [& Maximum]\n    (reduce (fn [x y] \n              (if (> x y) x y)) Maximum))", "user": "5a99b766e4b0d174b936c7a8"}, {"problem": 38, "code": "(fn \n  [& rest] \n  (reduce #(if \n             (> %1 %2) %1 %2) \n          rest))", "user": "5a99b861e4b0d174b936c7ad"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5a99b848e4b0d174b936c7ac"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "user": "5a99b844e4b0d174b936c7ab"}, {"problem": 38, "code": "(fn f [& lst]\n     (->>\n      \t(sort lst)\n        \t(last)))", "user": "5a99b87ee4b0d174b936c7af"}, {"problem": 38, "code": "(comp last sort list)", "user": "5aa6d44de4b0d174b936c8b2"}, {"problem": 38, "code": "(fn [& args] (first (sort > args)))", "user": "5aa6bd56e4b0d174b936c8af"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5aa5eebee4b0d174b936c8a1"}, {"problem": 38, "code": "(fn myMax [x & xs] \n  (let [recAux (fn aux [y ys]\n\t\t\t\t(cond\n     \t\t\t\t(empty? ys) y\n     \t\t\t\t(> (first ys) y) (aux (first ys) (rest ys))\n     \t\t\t\t:else (aux y (rest ys))))]\n  (recAux x xs)))", "user": "5aa5951ae4b0d174b936c899"}, {"problem": 38, "code": "(fn find-highest [n & nx]\n  (reduce (fn [x y] (if (pos? (.compareTo y x)) y x)) n nx))", "user": "5aa2b5dbe4b0d174b936c85b"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "5aa5fa10e4b0d174b936c8a4"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5aa9d445e4b0d174b936c8eb"}, {"problem": 38, "code": "(fn [ & args ]\n  (last (sort args)))", "user": "5a4443cae4b0447ef91cc60f"}, {"problem": 38, "code": "(fn [result & rest] (reduce #(if (> %2 %1) %2 %1) result rest))", "user": "59e6708ce4b08badc2a0c571"}, {"problem": 38, "code": "(fn my-max [& coll] (last (sort coll)))", "user": "5a8e9a7ae4b05369db4d2528"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [x y] (if (> x y) x y)) xs))", "user": "5aa998c6e4b0d174b936c8e5"}, {"problem": 38, "code": "(fn my-max [& args]\n  (reduce #(if (< %1 %2) %2 %1) args))", "user": "5aa4f7dae4b0d174b936c88c"}, {"problem": 38, "code": "(fn [& xs]\n\t(reduce (fn [x y] (if (> x y) x y)) xs))", "user": "5aad2bd2e4b073f177442573"}, {"problem": 38, "code": "#(reduce (fn [acc e] (if (> acc e) acc e)) %&)", "user": "59769d75e4b01722bebd4cdd"}, {"problem": 38, "code": "(fn max-value [& xs]\n  (reduce #(if (< %1 %2) %2 %1) xs)\n  )", "user": "5aada061e4b073f17744257a"}, {"problem": 38, "code": "(comp last sort list)", "user": "5aa8e841e4b0d174b936c8d5"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "5ab126cde4b073f1774425b9"}, {"problem": 38, "code": "(fn f [& args]\n  (reduce (fn [a b] (if (> a b) a b)) args))", "user": "5ab1665de4b073f1774425c0"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) (seq %&))", "user": "5ab28d5be4b073f1774425eb"}, {"problem": 38, "code": "(comp last sort vector)", "user": "5ab16992e4b073f1774425c4"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5a99c5a9e4b0d174b936c7b1"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (< a b) b a)) (seq args) ))", "user": "5ab23a78e4b073f1774425e1"}, {"problem": 38, "code": "(fn [& vals]\n   (reduce (fn [v e]\n             (if (< v e)\n               e\n               v)) (first vals) (rest vals)))", "user": "5ab23c99e4b073f1774425e2"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args ) )", "user": "585c61d4e4b0f14aab7c8787"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) 0 args))", "user": "5ab3ef98e4b073f17744260e"}, {"problem": 38, "code": "(fn [& args] (-> args (sort) (last)))", "user": "5ab276f2e4b073f1774425e6"}, {"problem": 38, "code": "(fn [& nums] \n    (reduce\n      #(if (> %1 %2) %1 %2)\n      (or (first nums) 0)\n      (rest nums)\n      )  \n    )", "user": "5aac468ae4b073f17744256b"}, {"problem": 38, "code": "(fn [ & args] (last (sort args)))", "user": "5aa2dc5ae4b0d174b936c861"}, {"problem": 38, "code": "(fn [& nums] (reduce (fn [a b] (if (> a b) a b)) nums))", "user": "5ab564f8e4b073f177442639"}, {"problem": 38, "code": "(fn [a & ns] (reduce #(if (> %1 %2) %1 %2) a ns))", "user": "531bf76fe4b08068f379ed96"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (>= %2 %1) %2 %1) args))", "user": "5ab38af0e4b073f177442601"}, {"problem": 38, "code": "(fn\n  [& coll]\n  (reduce \n    (fn [ f1 f2 ] (if (> f1 f2 ) f1 f2)) coll))", "user": "5ab575f8e4b073f17744263d"}, {"problem": 38, "code": "(fn [& all] (first (sort > all)))", "user": "5a67cedbe4b0512ff01cd9ee"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [lhs rhs] (if (> lhs rhs) lhs rhs)) args))", "user": "5ab3d323e4b073f177442607"}, {"problem": 38, "code": "(fn [& a]\n  (reduce #(if (> %1 %2) %1 %2) a))", "user": "5a904de3e4b05369db4d254c"}, {"problem": 38, "code": "(fn mymax [& vals]\n  (reduce #(if (< %1 %2)\n             %2\n             %1) vals))", "user": "5ab490f4e4b073f17744261d"}, {"problem": 38, "code": "(fn [& nums] (reduce (fn [acc el] (if (> el acc) el acc)) 0 nums))", "user": "5ab5f60be4b073f177442643"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5aa8f753e4b0d174b936c8d9"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "user": "5ab8037ae4b073f177442678"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5ab9fe71e4b073f17744269d"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5aba34c5e4b073f1774426a3"}, {"problem": 38, "code": "(fn [& l] (reduce (fn [a b] (if (> a b) a b)) l))", "user": "5ab96075e4b073f177442694"}, {"problem": 38, "code": "(comp last sort list)", "user": "5abb02ade4b073f1774426bc"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5ab93449e4b073f177442692"}, {"problem": 38, "code": "(fn [& coll] (reduce #(if (> %2 %1) %2 %1) coll))", "user": "5abbb524e4b073f1774426da"}, {"problem": 38, "code": "(fn [& numbers] \n  (loop [remaining numbers\n         mx (first numbers)]\n    (if (empty? remaining)\n      mx\n      (recur \n        (rest remaining) \n        (if (> (first remaining) mx)\n          (first remaining)\n          mx)\n        ))))", "user": "578fc3d2e4b0ebec4cfb759b"}, {"problem": 38, "code": "(fn [first & rest] \n  ( if (= (count rest) 0) first \n  (reduce (fn [a b] ( if (> a b) a b)) first rest)\n  )\n  )", "user": "5ab81cc9e4b073f17744267a"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5abc5a09e4b073f1774426e9"}, {"problem": 38, "code": "(fn[& args]\n  (reduce (fn[x y]\n             (if (> x y) x y)\n             ) 0 args))", "user": "5aa8863ce4b0d174b936c8d0"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5abbb374e4b073f1774426d9"}, {"problem": 38, "code": "(fn my-max [& args]\n  ((fn find-max [current-max alist]\n    (if (empty? alist)\n      current-max\n      (if (> (first alist) current-max)\n        (find-max (first alist) (rest alist))\n        (find-max current-max (rest alist)))))\n   (first args) (rest args)))", "user": "5aaa2dc3e4b0d174b936c8f1"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5ab5145fe4b073f17744262d"}, {"problem": 38, "code": "(fn MAX_VAR [& varableList]\n  (reduce #(if (> %1 %2) %1 %2) varableList)\n\n  )", "user": "5aa11b37e4b0d174b936c840"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> % %2)\n              %\n              %2) \n          \n          args )\n  )", "user": "5a8fd113e4b05369db4d2542"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5a9dd3cce4b0d174b936c7f5"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) (first args) (rest args)))", "user": "5a47423be4b05d388ecb6b52"}, {"problem": 38, "code": "(fn maxs [& s]\n  (let [mx (fn [s m]\n             (loop [a s m -1000]\n               (if (empty? a)\n                 m\n                 (if (> m (first a)) (recur (rest a) m) (recur (rest a) (first a))))))]\n    (mx s Integer/MIN_VALUE)))", "user": "5762bf13e4b0994c1922fbae"}, {"problem": 38, "code": "(fn [& args]\n  (loop [xs (seq args)\n         x (first xs)]\n    (let [y (first xs)]\n    (if (empty? xs) x\n      (recur (next xs) (if (> x y) x y))))))", "user": "5a03652ae4b01bb0ae8afd83"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> % %2) % %2) xs))", "user": "59ad2fcee4b00adcf69795de"}, {"problem": 38, "code": "(fn [& s] (reduce (fn [m e] (if (> e m) e m)) 0 s))", "user": "5abe2fc2e4b073f17744271e"}, {"problem": 38, "code": "(fn getmax [firstval & coll]\n  (loop [maxval firstval\n         [currval & toparse] coll]\n    (if (nil? currval)\n      maxval\n      (if (> currval maxval)\n        (recur currval toparse)\n        (recur maxval toparse)))))", "user": "5abeb697e4b073f177442725"}, {"problem": 38, "code": "(fn [& params]\n  (reduce (fn [y z] (if (> y z) y z)) params))", "user": "5ac383b8e4b0e27600da7719"}, {"problem": 38, "code": "(fn maxval [& sequence] (last(sort sequence)))", "user": "5ac37d0fe4b0e27600da7718"}, {"problem": 38, "code": "(fn\n  [& args]\n  (last (sort args)))", "user": "5ac35d00e4b0e27600da7712"}, {"problem": 38, "code": "#(reduce (fn [x y] (if (> x y) x y)) 0 %&)", "user": "5ac0ba3ae4b073f177442745"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "59a8a4dce4b0bcf4e9a43af7"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "569bfc43e4b0542e1f8d145c"}, {"problem": 38, "code": "(fn [& args] (last (sort (into [] args))))", "user": "555d1e51e4b0a2eb076a39a5"}, {"problem": 38, "code": "(fn [& elems]\n    (reduce (fn [x y] (if (>= x y) x y)) elems))", "user": "5ac6ef9be4b0e27600da7779"}, {"problem": 38, "code": "(fn [fst & rst] \n  (reduce \n    (fn [m curr] (if (> curr m) curr m)) \n   fst rst))", "user": "53492ae6e4b084c2834f4a5f"}, {"problem": 38, "code": "(fn foo\n [x & rest] (reduce #(if (> %1 %2) %1 %2) x rest))", "user": "5ac7c3e8e4b0e27600da7792"}, {"problem": 38, "code": "(fn [& li] (reduce #(if (> %1 %2) %1 %2) li))", "user": "5ac6bbe3e4b0e27600da7776"}, {"problem": 38, "code": "(fn my-max [& s]\n  (if (nil? s)\n    nil\n    (let [f (first s)\n          r (apply my-max (rest s))]\n          \n          (if (nil? r)\n            f\n            (if (> f r) f r)))))", "user": "5ac91d90e4b0e27600da77bd"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5acb137ee4b0e27600da77eb"}, {"problem": 38, "code": "(fn [n & r] (last (sort (cons n r))))", "user": "59edc518e4b0966464fe6a08"}, {"problem": 38, "code": "(fn [& arg] (apply (comp last sort) (list arg)))", "user": "563f0fdae4b08d4f616f5ece"}, {"problem": 38, "code": "#(last(sort %&))", "user": "589122fbe4b00487982d51ed"}, {"problem": 38, "code": "(fn [& args] (last (apply sorted-set args)))", "user": "5a291617e4b07f18be40aa76"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "5aa4a1ffe4b0d174b936c886"}, {"problem": 38, "code": "(fn get-max [& args]\n  (last (sort (into [] args)))\n  )", "user": "5ac74b34e4b0e27600da777f"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort (into [] args)))\n  )", "user": "5ac741d6e4b0e27600da777d"}, {"problem": 38, "code": "(fn [& x]\n  (last (apply sort (list x))))", "user": "5ac4d1f6e4b0e27600da7735"}, {"problem": 38, "code": "#(reduce (fn [fin num] (if(> num fin) num fin)) (vec %&))", "user": "5ac92dc3e4b0e27600da77bf"}, {"problem": 38, "code": "(fn [& col]\n  (reduce (fn [v1 v2] (if (> v1 v2) v1 v2)) col))", "user": "5a9db5c9e4b0d174b936c7f1"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "user": "5acd08eee4b0e27600da7822"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce \n   #(if (> % %2) % %2) nums))", "user": "5acd235ae4b0e27600da7824"}, {"problem": 38, "code": "(fn [& args]\n    (reduce #(if (< %1 %2) %2 %1) args))", "user": "5ac7f980e4b0e27600da779f"}, {"problem": 38, "code": ";;(fn [& n] (reduce #(if (> %1 %2) %1 %2) n))\n(comp last sort list)", "user": "5abd4886e4b073f177442710"}, {"problem": 38, "code": "(fn [& stuff] (reduce (fn [old new] (if (> new old) new old)) stuff))", "user": "5acc961ae4b0e27600da7810"}, {"problem": 38, "code": "(fn [ & xs ]\n  (reduce (fn [acc x] (if (< acc x) x acc ))   \n   xs\n   )\n )", "user": "57513f88e4b02ea114799283"}, {"problem": 38, "code": "(fn [ & xs ] (reduce #( if (< %1 %2) %2 %1) xs))", "user": "5ac85708e4b0e27600da77ac"}, {"problem": 38, "code": "(comp last sort vector)", "user": "5ac834f4e4b0e27600da77ab"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "596a66cde4b069c0a1a19803"}, {"problem": 38, "code": "(fn [& xs] (last (sort xs)))", "user": "5ad63a34e4b0ea6055cfac01"}, {"problem": 38, "code": "(fn [& p] (reduce #(if (> %1 %2) %1 %2) p))", "user": "5acd1a43e4b0e27600da7823"}, {"problem": 38, "code": "(fn [& args]\n\t(reduce #(if (> %1 %2) %1 %2) args)\n  )", "user": "5a7df247e4b03baeef927704"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5ad37785e4b0ea6055cfabc5"}, {"problem": 38, "code": "(fn mf [& nums]\n        (loop [nums nums mx-num (Integer/MIN_VALUE)]\n          (if (empty? nums) mx-num (recur (rest nums) (if (> (first nums) mx-num) (first nums) mx-num)))))", "user": "5831846ae4b051871117c02c"}, {"problem": 38, "code": "(fn [& args ] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5ad933fce4b0ea6055cfac35"}, {"problem": 38, "code": "(fn my-max [& xs]\n  (reduce (fn [r x] (if (< r x) x r)) Integer/MIN_VALUE xs))", "user": "51e24905e4b01e519814642e"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) (flatten (cons x xs))))", "user": "5ada1f12e4b0ea6055cfac43"}, {"problem": 38, "code": "(fn [& r] (last (sort r)))", "user": "599342efe4b0b211ea3aaab0"}, {"problem": 38, "code": "(fn [& a] (last (sort a)))", "user": "5ad36ae9e4b0ea6055cfabc3"}, {"problem": 38, "code": "(fn [& args] \n  (reduce (fn [acc x] \n            (if (> x acc) x acc))\n                     0\n                     args))", "user": "5ade6bafe4b0837691e92c23"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce (fn [acc x] \n          (if (> acc x) acc x)) xs )\n  )", "user": "5991eec7e4b0866487ed0d6e"}, {"problem": 38, "code": "(fn [& s]\n      (loop [maxvalue (first s)\n                     st s]\n                    (if (seq st)\n                      (recur (if (<= maxvalue (first st))\n                                      (first st)\n                                  maxvalue) (next st))\n                             maxvalue)))", "user": "56d6e165e4b0ea9b8538f7d3"}, {"problem": 38, "code": "(fn\n  [& n]\n  (reduce #(if(> %1 %2) %1 %2) n))", "user": "5aba04dce4b073f17744269e"}, {"problem": 38, "code": "(fn f [& s]\n(reduce (fn [acc s*] (if (> s* acc) s* acc)) (first s) (rest s)))", "user": "5ae0976be4b0837691e92c43"}, {"problem": 38, "code": "#((comp last sort) %&)", "user": "5acaa269e4b0e27600da77e6"}, {"problem": 38, "code": "(fn [ & y ] (last (sort y)))", "user": "5ac04101e4b073f177442737"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "5ac6f7f7e4b0e27600da777a"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce (fn [x y] (if (> x y) x y)) xs))", "user": "5adf5f9be4b0837691e92c33"}, {"problem": 38, "code": "(fn [& x]\n    ((fn asd [s m]\n       (if (empty? s)\n         m\n         (if (> (first s) m)\n           (asd (rest s) (first s))\n           (asd (rest s) m)\n           )))\n     (rest x)\n     (first x)\n     ))", "user": "5a9d64c8e4b0d174b936c7eb"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5ae429fae4b0837691e92c79"}, {"problem": 38, "code": "(fn sum [& args]\n  (let [veci (reduce conj [] args)]\n    (loop[r veci, maxi (get veci 0)]\n      (if (seq r)\n        (do (println r)\n        (if (> (first r) maxi)\n          (do (println \"ok\")\n          (recur (rest r) (first r)))\n          (recur (rest r) maxi)\n        ))\n      maxi))))", "user": "5a6cb2eae4b0512ff01cda57"}, {"problem": 38, "code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) coll))", "user": "5801addae4b0a837a8b30c5d"}, {"problem": 38, "code": "(fn [& k]\n  (-> k\n      (sort)\n      (last)))", "user": "5ae246b1e4b0837691e92c5d"}, {"problem": 38, "code": "(fn [& numbers] (reduce (fn [a b] (if (> a b) a b)) numbers))", "user": "5ab3db13e4b073f177442609"}, {"problem": 38, "code": "(fn [& params]\n  (reduce #(if (> %1 %2) %1 %2) params))", "user": "5aeb0b44e4b0cc2b61a3bbee"}, {"problem": 38, "code": "(fn [& rst] (reduce\n  (fn [curr-max elm]\n    (if (>= curr-max elm)\n      curr-max\n      elm))\n  rst))", "user": "5aeca4c9e4b0cc2b61a3bc0a"}, {"problem": 38, "code": "(fn [& args] (- (apply min (map - args))))", "user": "5aeec90fe4b0cc2b61a3bc31"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "5aed87a1e4b0cc2b61a3bc1a"}, {"problem": 38, "code": "(fn\n  [part & remaining]\n  (loop [coll remaining maxvalue part]\n    (if (empty? coll)\n      maxvalue\n    (let [[lPart & lRemaining] coll]\n      (recur lRemaining\n             (if (> lPart maxvalue)\n               lPart\n               maxvalue\n               )\n       )\n      )\n      )\n    )\n  )", "user": "5aefd746e4b0cc2b61a3bc3d"}, {"problem": 38, "code": "(fn [& args] (first (sort > args)))", "user": "5af19233e4b0cc2b61a3bc5f"}, {"problem": 38, "code": "(fn max' [& xs]\n   (reduce #(if (> %1 %2) %1 %2)\n           0\n           xs))", "user": "5a084a24e4b01bb0ae8afdf2"}, {"problem": 38, "code": "(fn findmax [& a]\n  (reduce (fn [x1 x2] (if (> x1 x2) x1 x2)) a)\n\n  )", "user": "5af39788e4b0cc2b61a3bc8a"}, {"problem": 38, "code": "(fn ! [& x]\n  (last (sort x)))", "user": "5af3a4d0e4b0cc2b61a3bc8b"}, {"problem": 38, "code": "(fn [& rest] (reduce (fn [acc x] (if (>= x acc) x acc)) rest))", "user": "5af20ce0e4b0cc2b61a3bc69"}, {"problem": 38, "code": "#(last (sort %&))", "user": "53b2b438e4b047364c04449d"}, {"problem": 38, "code": "(fn [& arg]\n  (reduce \n   (fn [max_num arg_num] \n     (if (> arg_num max_num) \n       arg_num \n       max_num) \n     ) \n          0 arg)\n  )", "user": "5ae71f14e4b0837691e92ca7"}, {"problem": 38, "code": "(comp last\n      sort \n      vector)", "user": "5af8221ce4b0cc2b61a3bccd"}, {"problem": 38, "code": "(fn [& args]\n    (reduce (fn [a b] (if (< a b) b a)) args))", "user": "59bcbfd0e4b0a024fb6ae419"}, {"problem": 38, "code": "#(last (sort %&))", "user": "59eb69fbe4b0249b7282077e"}, {"problem": 38, "code": "(fn [& the-rest](last (sort the-rest)))", "user": "5af8752fe4b0cc2b61a3bcd3"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5af84e73e4b0cc2b61a3bccf"}, {"problem": 38, "code": "(fn [& s]\n  (loop [r 0 s s]\n    (if (empty? s)\n      r\n      (if (> (first s) r)\n        (recur (first s) (rest s))\n        (recur r (rest s))))))", "user": "5af907e6e4b0cc2b61a3bcda"}, {"problem": 38, "code": "(fn [& x] \n (-> x\n     (sort)\n     (reverse)\n     (first)))", "user": "5af1e1b1e4b0cc2b61a3bc67"}, {"problem": 38, "code": "#(last (sort %&))", "user": "59a6cfc3e4b066c664927d85"}, {"problem": 38, "code": "(fn [& a]\n\t(reduce \n\t\t(fn [a b]\n\t\t\t(if (> a b)\n\t\t\t\ta\n\t\t\t\tb\n\t\t\t) \n\t\t) \n\t\ta\n\t)\n)", "user": "5af9b2cee4b0cc2b61a3bce2"}, {"problem": 38, "code": "#(reduce (fn [acc item] (if (> acc item) acc item)) %&)", "user": "5af31955e4b0cc2b61a3bc7a"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "5a3bcdc9e4b001c08efc0cd9"}, {"problem": 38, "code": "(fn [& args] ((fn [max_seen args] (cond\n                     (empty? args) max_seen\n                     (> (first args) max_seen) (recur (first args) (rest args))\n                     :else (recur max_seen (rest args)))) (first args) (rest args)))", "user": "5afa3590e4b0cc2b61a3bcea"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5a91988ae4b002d099cae6f9"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a x] (if (> x a) x a)) 0 args))", "user": "5afb4b15e4b0cc2b61a3bcf6"}, {"problem": 38, "code": "(fn\n[& l] \n(reduce (fn \n\t\t[a,b] \n         (if (> a b)\n         \ta\n         \tb))\n         l))", "user": "5afb3426e4b0cc2b61a3bcf5"}, {"problem": 38, "code": "(fn [& list]\n  (reduce #(if (> %1 %2) %1 %2 ) list)\n  )", "user": "5afc115de4b0cc2b61a3bcff"}, {"problem": 38, "code": "(fn my-max [x & more]\n  (if (empty? more)\n    x\n    (let [y (first more)]\n      (if (> y x)\n        (apply my-max y (rest more))\n        (apply my-max x (rest more))))))", "user": "5afc3829e4b0cc2b61a3bd08"}, {"problem": 38, "code": "(fn [& arr] \n  (loop [fst (first arr) rst (rest arr) mx fst]\n    (cond\n       (empty? rst) mx\n       (> fst mx) (recur (first rst) (rest rst) fst)\n       :else (recur (first rst) (rest rst) mx)\n     )))", "user": "5adcc688e4b0837691e92c05"}, {"problem": 38, "code": "(fn [& l]\n  (reduce (fn [ans n]\n            (if (> ans n)\n              ans\n              n)) l))", "user": "5afcd6d1e4b0cc2b61a3bd17"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5af0ac17e4b0cc2b61a3bc55"}, {"problem": 38, "code": "(fn [& args] (last (sort (vec args))))", "user": "5afdca89e4b0cc2b61a3bd20"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5aef6084e4b0cc2b61a3bc34"}, {"problem": 38, "code": "(fn [& args] (-> args sort last))", "user": "5b008bcae4b0cc2b61a3bd3d"}, {"problem": 38, "code": "(fn [& args] \n  (last (sort args)))", "user": "4ee897fe535d93acb0a66883"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "5afacc73e4b0cc2b61a3bcf2"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [acc elt]\n            (if (> elt acc)\n              elt\n              acc))\n          (first args)\n          args))", "user": "5afa9de0e4b0cc2b61a3bcf1"}, {"problem": 38, "code": "(fn [& args]\n  (loop [v args, maxi 0]\n    (if (seq v)\n      (if (> (first v) maxi)\n        (recur (rest v) (first v))\n        (recur (rest v) maxi))\n      maxi)))", "user": "5a805f7ee4b00b71e582a04d"}, {"problem": 38, "code": "(fn [& all-values] (reduce (fn [x y] (if (> x y) x y)) all-values))", "user": "5afd31b7e4b0cc2b61a3bd18"}, {"problem": 38, "code": "(fn find-max\n  [& args]\n  (reduce #(if (< %1 %2) %2 %1) args))", "user": "59d9dcfbe4b0ef0a1e9b5c5d"}, {"problem": 38, "code": "(comp last sort vector)", "user": "5b0180cfe4b0cc2b61a3bd47"}, {"problem": 38, "code": "(fn MaxVal\n  [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "user": "5b02a170e4b0cc2b61a3bd52"}, {"problem": 38, "code": "(fn [& x] ((comp last sort) (vec x)))", "user": "5b03063de4b0cc2b61a3bd5b"}, {"problem": 38, "code": "(fn [& xs] (-> xs sort last))", "user": "5b067ae1e4b0cc2b61a3bd97"}, {"problem": 38, "code": "(fn [& args] ((comp last sort) args))", "user": "5b01cf9ee4b0cc2b61a3bd49"}, {"problem": 38, "code": "(fn [& xs]\n  (first (sort > xs)))", "user": "5aea2d21e4b0cc2b61a3bbe2"}, {"problem": 38, "code": "#(loop [i %& m 0]\n\t(if (empty? i)\n    \tm\n        (recur \n        \t(rest i)\n          \t(if (> (first i) m) (first i) m))))", "user": "5b0546eae4b0cc2b61a3bd7e"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "59ee2b59e4b0966464fe6a10"}, {"problem": 38, "code": "(fn [& args] (first (sort > (vec args))))", "user": "5b0c0c90e4b0cc2b61a3bddd"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5b0e6795e4b0cc2b61a3be03"}, {"problem": 38, "code": "(fn [& s]\n  (reduce \n   \t(fn [acc v] (if (> v acc) v acc)) \n   \t(first s) \n   \t(rest s)))", "user": "5b0bea6de4b0cc2b61a3bdda"}, {"problem": 38, "code": "#(last( sort %&))", "user": "5b0d72e5e4b0cc2b61a3bdf8"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) Integer/MIN_VALUE args))", "user": "5b0fe3f4e4b0cc2b61a3be14"}, {"problem": 38, "code": "(fn [& args]\n  ((comp last sort) args))", "user": "5b104aebe4b0cc2b61a3be20"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [a b] (if (> a b) a b)) xs))", "user": "5731283ae4b0cd1946bd0fbe"}, {"problem": 38, "code": "(fn max_ [& elements]\n  (loop [seq (rest (seq elements)) res (first elements)]\n    (if (empty? seq)\n      res\n      (if (> res (first seq))\n        (recur (rest seq) res)\n        (recur (rest seq) (first seq))\n        ))))", "user": "5a55c713e4b05d388ecb6c43"}, {"problem": 38, "code": "(comp last sort list)", "user": "5ae75ccbe4b0837691e92ca9"}, {"problem": 38, "code": "(fn [x & args]\n\t(loop [a x\n\t\t   b args]\n\t\t(let [args1 a\n\t\t\t  args2 b]\n\t\t\t(if (empty? args2)\n\t\t\t\targs1\n\t\t\t\t(recur (if (> args1 (first args2))\n\t\t\t\t\t\t\targs1\n\t\t\t\t\t\t\t(first args2)) (rest b))))))", "user": "59b9e669e4b0a024fb6ae3db"}, {"problem": 38, "code": "(fn test-max [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "5af865a9e4b0cc2b61a3bcd1"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "5addadfce4b0837691e92c13"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5b14ea95e4b0cc2b61a3be62"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (< %1 %2) %2 %1) args))", "user": "56aad332e4b03c432f187337"}, {"problem": 38, "code": "(fn [& coll]\n  (reduce #(if (or (nil? %1) (> %2 %1)) %2 %1) nil coll))", "user": "5b13f482e4b0cc2b61a3be58"}, {"problem": 38, "code": "(fn [& coll]\n  ((fn [c mx]\n     (let [f (first c)\n           r (rest c)\n           m (if (or (nil? mx) (> f mx)) f mx)]\n       (if (empty? r)\n         m\n         (recur r m)))) coll nil))", "user": "5b15ab32e4b0cc2b61a3be72"}, {"problem": 38, "code": "(fn mymax\n  ([x y] \n   (if (> x y) x y))\n  ([x y & more]\n   (reduce mymax (mymax x y) more)))", "user": "5adbbf89e4b0837691e92bf4"}, {"problem": 38, "code": "(fn[& args]\n  (reduce (fn [val1 val2]\n            (if (<= val1 val2) val2 val1)\n            ) args))", "user": "5b162d8ce4b0cc2b61a3be78"}, {"problem": 38, "code": "(fn [& values]\n  (reduce #(if (> %2 %1) %2 %1) \n          (first values) \n          (rest values)))", "user": "5aa7e6eae4b0d174b936c8c0"}, {"problem": 38, "code": "(fn [x & rest] \n  (reduce #(if (< %1 %2) %2 %1) (flatten(cons x rest))))", "user": "5b17aeece4b00d69b768e76c"}, {"problem": 38, "code": "(fn [& args]\n        (loop [m 0 l args]\n            (if (not (empty? l))\n                (recur\n                    (if (> (first l) m)\n                        (first l)\n                        m)\n                    (rest l))\n                m)))", "user": "5b083513e4b0cc2b61a3bdb4"}, {"problem": 38, "code": "(fn [& nums]\n   (loop [nums nums\n          cur-max nil]\n     (let [a (first nums)\n           mix (if (or (nil? cur-max) (> a cur-max)) a cur-max)\n           b (rest nums)]\n       (if (empty? b)\n         mix\n         (recur b mix)))))", "user": "5b15e881e4b0cc2b61a3be75"}, {"problem": 38, "code": "(fn [& a] \n  (reduce \n    #(if (> %1 %2) %1 %2) \n    a\n    )\n  )", "user": "5b118b7be4b0cc2b61a3be34"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5b18f2d2e4b00d69b768e777"}, {"problem": 38, "code": "(fn [& col]\n  (let [my-max (fn [x y] (if (> x y) x y))]\n    (reduce my-max col)))", "user": "5af4446de4b0cc2b61a3bc93"}, {"problem": 38, "code": "(fn my-max [& in]\n  (last (sort in)))", "user": "5b107263e4b0cc2b61a3be22"}, {"problem": 38, "code": "(fn [& arg]\n  (loop [arg1 arg\n         result 0]\n    (if (empty? arg1)\n      result\n      (if (> (first arg1) result)\n        (recur (rest arg1) (first arg1))\n        (recur (rest arg1) result)))))", "user": "56b619e7e4b0982f16b37e39"}, {"problem": 38, "code": "#(last(sort %&))", "user": "5b14475be4b0cc2b61a3be5a"}, {"problem": 38, "code": "(fn [& args] \n  (loop [a args\n         acc [1]]\n    (if-not (empty? a)\n      (if (> (first a) (last acc))\n        (recur (rest a) (conj acc (first a)))\n        (recur (rest a) acc))\n      (last acc))))", "user": "51316a63e4b0431ba07e7feb"}, {"problem": 38, "code": "(fn m [& n] (reduce (fn [acc x] (if (> x acc) x acc)) (first n) (rest n)))", "user": "5b0f2862e4b0cc2b61a3be0f"}, {"problem": 38, "code": "(fn [& args] (reduce\n               (fn [x y] (if (< x y) y x))\n               args))", "user": "5a5a1765e4b05d388ecb6ca3"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [z h] (if (> h z) h z)) args))", "user": "5b15811ee4b0cc2b61a3be6f"}, {"problem": 38, "code": "(fn [ & args ] (first (sort > args)))", "user": "5b1a4b3ee4b03cfeda66ecc9"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5b0b8d29e4b0cc2b61a3bdd7"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [m a] (if (< m a) a m)) xs))", "user": "5b1c16e1e4b03cfeda66ecf2"}, {"problem": 38, "code": "(fn [x & ys]\n  (if (seq ys)\n    (recur (let [y (first ys)]\n             (if (> x y) x y))\n           (rest ys))\n    x))", "user": "5afecee2e4b0cc2b61a3bd28"}, {"problem": 38, "code": "(fn mymax\n  ([x y]\n     (if (> x y) x y))\n  ([x y & more]\n     (reduce mymax (mymax x y) more)))", "user": "5af062e5e4b0cc2b61a3bc51"}, {"problem": 38, "code": "(fn getMax \n  [& nums]\n  (last (sort nums)))", "user": "591e1dc7e4b09b4ee5954c2a"}, {"problem": 38, "code": "(fn [& vals] (reduce (fn [x y] (if (> x y) x y)) vals))", "user": "5b20134de4b03cfeda66ed2d"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [high item] (if (> item high) item high)) 0 args))", "user": "5b19cdf2e4b03cfeda66ecbf"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) (flatten (cons x xs))))", "user": "57d2cf5fe4b0bd073c202385"}, {"problem": 38, "code": "(fn [& res] (reduce (fn [cur mx] (if (< mx cur) cur mx)) res))", "user": "59c243bae4b0a024fb6ae4aa"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> % %2) % %2) xs))", "user": "5b22328ee4b03cfeda66ed5d"}, {"problem": 38, "code": "(fn [& args] (last (sort (into '() args))))", "user": "5a58da38e4b05d388ecb6c8b"}, {"problem": 38, "code": "(fn m ([& args] (last (sort args))))", "user": "5b081ff2e4b0cc2b61a3bdb3"}, {"problem": 38, "code": "(comp (partial reduce #(if (> %1 %2) %1 %2)) vector)", "user": "5b210749e4b03cfeda66ed48"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) 0 args))", "user": "5b250773e4b063e2438bcc21"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "54dfbacae4b024c67c0cf7b1"}, {"problem": 38, "code": "(fn [& args]\n  (first (reverse (sort args))))", "user": "5b2238d1e4b03cfeda66ed5e"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5b236e55e4b08b1df1c36759"}, {"problem": 38, "code": "(fn max-val\n  [x & rest]\n  (let [y (cons x rest)]\n  (reduce #(if (> %1 %2)\n                %1\n                %2) y)))", "user": "5a9414eae4b0d174b936c72c"}, {"problem": 38, "code": "(fn [& col] (reduce #(if (> %1 %2) %1 %2) col))", "user": "5af9d09ae4b0cc2b61a3bce6"}, {"problem": 38, "code": "(fn mx\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & zs] (apply mx (mx x y) zs))\n  )", "user": "5b073c34e4b0cc2b61a3bda4"}, {"problem": 38, "code": "( fn [& args] (reduce (fn [ a b] ( if (> a b) a b )) args))", "user": "5197d1c8e4b068aa333628f2"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5afdb2bae4b0cc2b61a3bd1f"}, {"problem": 38, "code": "(fn [& args]\n  \t(last (sort (seq args))))", "user": "5b2689e3e4b063e2438bcc33"}, {"problem": 38, "code": "#(last (sort %&))", "user": "56673885e4b04acd4f672dce"}, {"problem": 38, "code": "(fn [x & xs]\n  (loop [maxi x\n         others xs]\n    (cond\n     (empty? others) maxi\n     (> (first others) maxi) (recur (first others) (rest others))\n     :else (recur maxi (rest others)))))", "user": "5b2a559be4b063e2438bcc74"}, {"problem": 38, "code": "(fn [& els]\n  (reduce #(if (> %1 %2) %1 %2) els))", "user": "5b2c282ce4b025bcb146f2b2"}, {"problem": 38, "code": "(fn [& args]\n    (reduce #(if (< %1 %2 ) %2 %1) args))", "user": "5b274fd1e4b063e2438bcc3b"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "5b2c79c6e4b025bcb146f2b7"}, {"problem": 38, "code": "(fn [& v] (reduce (fn [l r] (if (> l r) l r)) v))", "user": "5b2eba82e4b025bcb146f2dd"}, {"problem": 38, "code": "(fn [& args] (loop [coll args maximum 0] \n   (if (empty? coll)\n     \tmaximum\n     \t(if (> (first coll) maximum)\n          (recur (rest coll) (first coll))\n          (recur (rest coll) maximum)))))", "user": "5b2e6b02e4b025bcb146f2d3"}, {"problem": 38, "code": "#(-> %& \n    sort\n    last)", "user": "586a906ae4b0f14aab7c88c3"}, {"problem": 38, "code": "(fn [& x]\n  \n  (reduce #(if (> %2 %1) %2 %1) (first x) x )\n   \n)", "user": "5b3189e5e4b025bcb146f308"}, {"problem": 38, "code": "(fn max1\n  [& x]\n  (last (sort x)))", "user": "5b2e714ee4b025bcb146f2d4"}, {"problem": 38, "code": "(fn [ & args] \n  (reduce \n   #(if (> % %2) % %2)\n   args))", "user": "5b3251c1e4b025bcb146f317"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "user": "5b284375e4b063e2438bcc53"}, {"problem": 38, "code": "(fn my-max [x & args]\n  (loop [coll args m x]\n    (if-not (empty? coll)\n      (recur (rest coll) (if (< m (first coll)) (first coll) m))\n      m )))", "user": "5b2c76c8e4b025bcb146f2b6"}, {"problem": 38, "code": "(comp last sort list)", "user": "5b34aba7e4b025bcb146f352"}, {"problem": 38, "code": "(fn [& rest] (last (sort rest)))", "user": "5b36eae0e4b02d533a91bba2"}, {"problem": 38, "code": "(fn [& n] (reduce #(if (> %2 %1) %2 %1) n))", "user": "598216d9e4b021a7a535fdf8"}, {"problem": 38, "code": "(fn [& args]\n  (first (reverse (sort args))))", "user": "5b333626e4b025bcb146f32f"}, {"problem": 38, "code": "(fn [& x]\n  (reduce (fn [m d]\n    (if (> d m)\n      d\n      m)) 0 x))", "user": "5b38d771e4b02d533a91bbb0"}, {"problem": 38, "code": "(fn [& more] ((comp last sort) more))", "user": "5b37a3b4e4b02d533a91bba9"}, {"problem": 38, "code": "(fn [& x]\n (->> x\n      (sort)\n\t(last)\n      )\n      )", "user": "5b227f5ae4b03cfeda66ed63"}, {"problem": 38, "code": "(fn [s & args] \n  \t(reduce #(if (> %1 %2) %1 %2) s args))", "user": "5b23b14ae4b08b1df1c3675c"}, {"problem": 38, "code": "(fn ([] nil)\n\t([n] n)\n    ([f s & r]\n    \t(if (nil? s)\n        \tf\n            (recur (if (> f s) f s) (first r) (rest r)))))", "user": "5ae4e0e3e4b0837691e92c86"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5b23f306e4b08b1df1c36769"}, {"problem": 38, "code": "(fn [& c]\n  (last (sort c)))", "user": "59e8a952e4b0249b72820733"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> % %2) % %2 ) a) )", "user": "5b3aa98be4b02d533a91bbca"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5b2be9b1e4b025bcb146f2b0"}, {"problem": 38, "code": "(fn [& xs]\n(loop [lst xs maximum 0]\n\t(println lst maximum)\n\t(if (empty? lst)\n\t\tmaximum\n\t\t(recur (rest lst) (if (> maximum (first lst))\n\t\t\tmaximum\n\t\t\t(first lst)))))\n)", "user": "5b3de9a7e4b02d533a91bbf4"}, {"problem": 38, "code": "(fn [e & l] (let [m1 (fn m1 [e l] (if (empty? l) e (m1 (if (> e (first l)) e (first l)) (rest l))))] (m1 e l)))", "user": "5b3f2ba9e4b02d533a91bc09"}, {"problem": 38, "code": "(fn [& seq]\n   (loop [x (first seq) seq seq]\n     (if (empty? seq)\n       x\n       (if (> (first seq) x)\n         (recur (first seq) (rest seq))\n         (recur x (rest seq))))))", "user": "5ad002f2e4b0ea6055cfab87"}, {"problem": 38, "code": "(fn [& args ] (reduce #(if (> %1 %2) %1 %2) args ))", "user": "5b42550ee4b02d533a91bc30"}, {"problem": 38, "code": "(fn x [& z]\n  (->> z\n    (sort #(- %2 %1))\n    (first)))", "user": "5b3ef412e4b02d533a91bc06"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "5b0948f3e4b0cc2b61a3bdbb"}, {"problem": 38, "code": "(fn max-val [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) (flatten (cons x xs))))", "user": "5b334cf1e4b025bcb146f331"}, {"problem": 38, "code": "(fn maximum [& args] \n\t(loop [Sammlung args\n\t\tResult 0]\n\t\t(if (empty? Sammlung)\n\t\t\tResult\n\t\t\t(recur (rest Sammlung) \n\t\t\t\t(if (< Result (first Sammlung))\n\t\t\t\t\t(first Sammlung)\n\t\t\t\t\tResult)))))", "user": "5b35de7be4b02d533a91bb97"}, {"problem": 38, "code": "(fn maxx[& args]\n  (last (sort args)))", "user": "5b04662ce4b0cc2b61a3bd75"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "5b47874be4b02d533a91bc70"}, {"problem": 38, "code": "(let\n  [maxfunc (fn\n             maxfunc [highest coll]\n             (if (first coll) (maxfunc (if (> highest (first coll)) highest (first coll)) (rest coll)) highest))]\n  (fn [& args] (maxfunc (first args) (rest args))))", "user": "5b465b8be4b02d533a91bc65"}, {"problem": 38, "code": "#(reduce (fn ([x] x)\n           ([x y] (if (> x y) x y))) %&)", "user": "5b4b8cd6e4b02d533a91bc9f"}, {"problem": 38, "code": "(fn [& s] (last (sort s)))", "user": "4e1e89a2535d04ed9115e809"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5b47a4f7e4b02d533a91bc73"}, {"problem": 38, "code": "(fn [ & elements] (reduce #(if (> %1 %2) %1 %2) elements))", "user": "5b2c1f60e4b025bcb146f2b1"}, {"problem": 38, "code": "(fn[& v](last(sort v)))", "user": "5826a843e4b051871117befd"}, {"problem": 38, "code": "(fn [arg1 & remaining]\n  (reduce (fn [maks current] (if (< maks current) current maks)) arg1 remaining))", "user": "5b445421e4b02d533a91bc40"}, {"problem": 38, "code": "(fn [& s](\n          reduce (fn [a b] (if (> a b) a b)) s\n          ))", "user": "5b4b4052e4b02d533a91bc9a"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "5b4a0ce3e4b02d533a91bc92"}, {"problem": 38, "code": "(fn [& args]\n  (loop [todo args, best (first args)]\n    (if (empty? todo)\n      best\n      (recur (rest todo)\n             (if (> (first todo) best) (first todo) best)))))", "user": "5b51b9f8e4b02d533a91bcfe"}, {"problem": 38, "code": "(fn answer\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n(reduce answer (answer x y) more))\n   )", "user": "5b3e35bde4b02d533a91bbfa"}, {"problem": 38, "code": "(fn mmax [& args]\n  (reduce (fn my-max [a b] (if (>= a b) a b)) args))", "user": "5b322858e4b025bcb146f312"}, {"problem": 38, "code": "(fn [e & others]\n  (reduce #(if (> %2 %1) %2 %1) e others)\n)", "user": "5b4ff637e4b02d533a91bce0"}, {"problem": 38, "code": "(fn my-max [& xs] (-> xs\n                        sort\n                        last))", "user": "5b421edce4b02d533a91bc2c"}, {"problem": 38, "code": "(fn [& args] ((comp last sort) args))", "user": "5b4dfd5de4b02d533a91bcc3"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5b337ff4e4b025bcb146f339"}, {"problem": 38, "code": "#(last (sort %&))", "user": "591d57aee4b09b4ee5954c16"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5b51ddc9e4b02d533a91bd01"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5b552117e4b02d533a91bd2c"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) (flatten (cons x xs))))", "user": "5b55b15ae4b02d533a91bd35"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5b5874cfe4b02d533a91bd6a"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "5b552e2ee4b02d533a91bd2e"}, {"problem": 38, "code": "(fn [& all]\n  (let [y (atom (first all))]\n    (doseq [x all]\n      (if (> x @y)(reset! y x)))@y))", "user": "5b564b9ee4b02d533a91bd42"}, {"problem": 38, "code": "(fn maxxer\n   ([x] x)\n   ([x y] \n    (if (< x y)\n      y\n      x))\n   ([x y & more]\n    (if (first more)\n      (if (< x y)\n        (maxxer y (first more))\n        (maxxer x (first more)))\n      (maxxer x y) )))", "user": "582625d3e4b051871117bef2"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5b59fe53e4b02d533a91bd87"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5b5955cce4b02d533a91bd79"}, {"problem": 38, "code": "(fn [& s] (reduce (fn [m x]\n                  (if (> x m) x m))\n                (first s)\n                (rest s)))", "user": "5b5d255de4b0c6492753e6c8"}, {"problem": 38, "code": "(fn [& params]\n  (reduce\n   (fn [a b] (if (> a b) a b ))\n   params))", "user": "5b59b89be4b02d533a91bd7d"}, {"problem": 38, "code": "(fn max-val\n  [first-val & remaining-vals]\n  (first (reduce \n    (fn [max-val given-val]\n      (if (> given-val (first max-val))\n        (assoc max-val 0 given-val)\n        max-val\n        ))\n    [first-val] remaining-vals)))", "user": "5a3c06fce4b001c08efc0cdd"}, {"problem": 38, "code": "(fn [& args]\n      (loop [m 0 xs (vec args)]\n         (cond\n             (empty? xs) m\n             (> (first xs) m) (recur (first xs) (rest xs))\n              :else (recur m (rest xs))\n)))", "user": "5b5afe87e4b0c6492753e6a4"}, {"problem": 38, "code": "(fn [ & args ] (last (sort args)))", "user": "5b500215e4b02d533a91bce2"}, {"problem": 38, "code": "(fn [& args]\n  (reduce\n   (fn [x y]\n     (if\n       (> x y)\n       x\n       y\n       )\n     )\n   args\n   )\n  )", "user": "5b5e5019e4b0c6492753e6d3"}, {"problem": 38, "code": "(fn [a & b]\n   (loop [seq b\n          acc a]\n     (if (empty? seq)\n       acc\n       (recur (rest seq)\n              (if (> acc (first seq))\n                acc\n                (first seq))))))", "user": "5b59c2bde4b02d533a91bd80"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5b5f2990e4b0c6492753e6ea"}, {"problem": 38, "code": "(fn [& s] (reduce #(if (< %1 %2) %2 %1) 0 s))", "user": "5b59d176e4b02d533a91bd86"}, {"problem": 38, "code": "(fn\n  [& nums]\n  (reduce\n   (fn [m x]\n     (if (> x m)\n       x\n       m))\n   0,\n   nums))", "user": "59b93cd7e4b0a024fb6ae3c7"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5b609f0ae4b0c6492753e708"}, {"problem": 38, "code": "(fn [& xs ] (first (reverse (sort xs))))", "user": "5b61279ce4b0c6492753e70e"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "5b4b58f2e4b02d533a91bc9c"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "5b62ff3ce4b0c6492753e72a"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5b62764ae4b0c6492753e725"}, {"problem": 38, "code": "(fn [& args] \n  (reduce \n    (fn [acc el] (if (> el acc) el acc))\n    (Integer/MIN_VALUE) args))", "user": "5b61e777e4b0c6492753e717"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "5b5e7953e4b0c6492753e6d9"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5b61aa6ae4b0c6492753e712"}, {"problem": 38, "code": "(fn [& v]\n  (reduce \n    (fn [a b] (if (> a b) a b))\n    v))", "user": "56e2ca59e4b03a7c14b85a38"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "574c66e1e4b02ea11479921d"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5b608c66e4b0c6492753e706"}, {"problem": 38, "code": "(fn [& args]\n  (loop [m 0 v args]\n    (if (= v nil)\n      m\n      (recur (if (>(first v) m)\n        (first v)\n        m\n      ) (next v))\n    )\n  )\n)", "user": "5b5b0bb9e4b0c6492753e6a5"}, {"problem": 38, "code": "(fn my-max [f s & v]\n  (println f s v)\n  (cond\n    (<= f s)\n    (if (empty? v)\n      s\n      (apply my-max s (first v) (rest v)))\n    :else\n    (if (empty? v)\n      f\n      (apply my-max f (first v) (rest v)))))", "user": "5b611666e4b0c6492753e70d"}, {"problem": 38, "code": "(fn [& coll]\n  (reduce #(if (> %1 %2) %1 %2) coll))", "user": "5b67d634e4b0c6492753e76b"}, {"problem": 38, "code": "(fn [& lst]\n  (reduce #(if (> %1 %2) %1 %2) lst))", "user": "5b58d012e4b02d533a91bd71"}, {"problem": 38, "code": "(fn mx\n  [& args]\n  ((fn solve\n    ([x c]\n    (if (empty? x) c\n      (let [f (first x) r (rest x)]\n        (if (> f c) (solve r f) (solve r c)))))\n    ([x]\n     (solve x 0)))\n  args))", "user": "5b679bf9e4b0c6492753e769"}, {"problem": 38, "code": "(fn [n & other-nums]\n  (loop [i n\n        rem-nums other-nums]\n    (if (= (count rem-nums) 0)\n      i\n      (recur (if (> i (first rem-nums)) i (first rem-nums))\n             (rest rem-nums)))))", "user": "599ed08fe4b0871e7608b812"}, {"problem": 38, "code": "(fn[& args](reduce #(if(> %1 %2) %1 %2) (first args) args))", "user": "5b6473eee4b0c6492753e73f"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5992dc6ae4b0866487ed0d7d"}, {"problem": 38, "code": "(fn [& args] (first (sort > args)))", "user": "5b632851e4b0c6492753e72d"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [a b] (if (> a b) a b)) 0 xs))", "user": "5b6c0d56e4b0c6492753e7b2"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5b6e1649e4b0c6492753e7ce"}, {"problem": 38, "code": "(fn [& numbers] (reduce (fn [a b] (if (< a b) b a)) numbers))", "user": "5b67f0fbe4b0c6492753e76d"}, {"problem": 38, "code": "(fn [& nums] (reduce (fn [a b] (if (< a b) b a) ) nums))", "user": "5b6f27dce4b0c6492753e7d9"}, {"problem": 38, "code": "(fn \n  [& numbers]\n  (let [maxInit -9999]\n    (reduce (fn [maxVal currentVal]\n              (if (> currentVal maxVal)\n                currentVal\n                maxVal))\n            maxInit\n            numbers)))", "user": "5b69bf95e4b0c6492753e790"}, {"problem": 38, "code": "(fn [& n]\n  (reduce #(if (> %1 %2) %1 %2) n))", "user": "57ebbf3ae4b0bfb2137f5b66"}, {"problem": 38, "code": "(fn [& n]\n  (last (sort n)))", "user": "5b7292b3e4b047b03b2036a4"}, {"problem": 38, "code": "(fn[& x]\n  (last(sort x)))", "user": "5b6962c1e4b0c6492753e787"}, {"problem": 38, "code": "(fn [& args]\n  (loop [maximum (first args) rargs args]\n    (if (empty? rargs)\n      maximum\n      (recur (if (> (first rargs) maximum) (first rargs) maximum) (rest rargs)))))", "user": "5b7412a4e4b047b03b2036bb"}, {"problem": 38, "code": "(fn MaxW[& x] (last (sort (apply vector x))))", "user": "5b69baf9e4b0c6492753e78f"}, {"problem": 38, "code": "(fn [& coll]\n      (reduce\n       (fn [x y]\n         (if (> x y)\n           x y))\n       coll))", "user": "58bd1db2e4b0888cdc949d28"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [memo v] (if (> memo v) memo v)) args))", "user": "5b754a5ae4b047b03b2036c8"}, {"problem": 38, "code": "(fn [& nums] (reduce (fn [x y] (if (<= x y) y x)) nums))", "user": "5b6e83e0e4b0c6492753e7d0"}, {"problem": 38, "code": "(comp last sorted-set)", "user": "5b772ad7e4b047b03b2036e8"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) 0 xs))", "user": "577673c2e4b0979f89651637"}, {"problem": 38, "code": "#(last (sort %&))", "user": "592db566e4b072a2710fcf7c"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5b66faa7e4b0c6492753e75a"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5b5b4176e4b0c6492753e6ac"}, {"problem": 38, "code": "(fn [& r] (reduce #(if (> %1 %2) %1 %2) r))", "user": "5b774e66e4b047b03b2036ec"}, {"problem": 38, "code": "(fn [& args]\n   (last (sort args)))", "user": "5b780a8ce4b047b03b2036f6"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5b754f8ee4b047b03b2036c9"}, {"problem": 38, "code": "(fn max2\n  [& args]\n  (reduce (fn [maximum n]\n            (if (> maximum n) maximum n)) args))", "user": "5b73e500e4b047b03b2036ba"}, {"problem": 38, "code": "(fn [& xs] (last (sort xs)))", "user": "5b64370ae4b0c6492753e73c"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5b79cbdce4b047b03b20370a"}, {"problem": 38, "code": "(fn [& lst] (reduce (fn [max_value value] (if (> value max_value) value max_value)) (first lst) lst))", "user": "5b513bd4e4b02d533a91bcf2"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5b090049e4b0cc2b61a3bdba"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "user": "5b6002c2e4b0c6492753e6fb"}, {"problem": 38, "code": "(fn [& l] (reduce #(if (> %1 %2) %1 %2) 0 l))", "user": "59b2b093e4b0e1f4e384c8fd"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5b788fc4e4b047b03b2036fc"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) 0 args))", "user": "55f48d1be4b06e875b46ce7b"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %2 %1) %2 %1) xs))", "user": "5b6ba7d7e4b0c6492753e7ad"}, {"problem": 38, "code": "(fn [& nums] (last (sort (apply vector nums))))", "user": "5b4c2212e4b02d533a91bca6"}, {"problem": 38, "code": "(fn mymax\n  [& xs]\n  (reduce (fn [r f]\n            (if (< r f) f r))\n          xs))", "user": "5b7e79f0e4b047b03b203759"}, {"problem": 38, "code": "(fn my-max [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5b7bc82ce4b047b03b203726"}, {"problem": 38, "code": "(fn [& nums] (reduce (fn [mx el] (if (> el mx) el mx)) 0 nums))", "user": "5b7ec039e4b047b03b20375d"}, {"problem": 38, "code": "#(reduce (fn [x y] (if (< x y) y x)) 0 %&)", "user": "5a24735fe4b07f18be40aa11"}, {"problem": 38, "code": "(fn getMax [head & tail]\n  (if (nil? tail)\n    head\n    (apply getMax (if (> head (first tail)) (apply list head (rest tail)) tail))\n    )\n  )", "user": "5b7f381ae4b047b03b203769"}, {"problem": 38, "code": "(fn [& r](-> r sort last))", "user": "5951190be4b066ee0a44aea4"}, {"problem": 38, "code": "(comp last sort list)", "user": "5b7d1dc1e4b047b03b20373f"}, {"problem": 38, "code": "(fn [& args] (-> args sort last))", "user": "58e13b49e4b005f69f193c77"}, {"problem": 38, "code": "(fn [& args]\n  (reduce \n   (fn \n     [curr-max curr] \n     (if (> curr curr-max) \n       curr \n       curr-max)) \n   args))", "user": "5b82eec6e4b047b03b2037a4"}, {"problem": 38, "code": "(fn [& s]\n            (reduce #(if (> %1 %2)\n                       %1\n                       %2)\n                    s))", "user": "5b83c02de4b047b03b2037b6"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b ) a b)) %&)", "user": "5a8aa992e4b05369db4d24d8"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5b7ed20fe4b047b03b203760"}, {"problem": 38, "code": "(fn [& parts] (reduce #(if (> %1 %2) %1 %2) (first parts) parts))", "user": "5a085dfde4b01bb0ae8afdf4"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5b857411e4b047b03b2037ce"}, {"problem": 38, "code": "(fn [& nums] (last (sort nums)))", "user": "5b5f2566e4b0c6492753e6e9"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce (fn [a b] (if (> a b) a b)) xs))", "user": "56e9db9be4b04a395b9a03ff"}, {"problem": 38, "code": "#(reduce (fn [a c] (if (> a c) a c)) %&)", "user": "5b885821e4b047b03b20380b"}, {"problem": 38, "code": "(fn max-val\n  [& args]\n  (reduce #(if (> %1 %2)\n             %1\n             %2) args))", "user": "5add1fede4b0837691e92c0a"}, {"problem": 38, "code": "(fn [& values]\n  (reduce (fn [value acc]\n            (if (> value acc)\n              value\n              acc)) values))", "user": "5b78302ce4b047b03b2036fa"}, {"problem": 38, "code": "(fn [ & args ] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5b8aa478e4b0c0b3ffbd49b2"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5b855800e4b047b03b2037cd"}, {"problem": 38, "code": "(fn [& args] \n  (reduce (fn [result elem]\n            (if (> elem result) \n              elem \n              result)) \n          args))", "user": "5b7ef8e6e4b047b03b203765"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5b83c11ae4b047b03b2037b7"}, {"problem": 38, "code": "(fn [& args]\n  (let [curr-max (first args)\n        curr-args (drop 1 args)]\n    ((fn [curr-max curr-args]\n      (loop [curr-max curr-max\n             curr-args curr-args]\n        (if (empty? curr-args)\n          curr-max\n          (recur\n            (#(if (> %1 %2) %1 %2) curr-max (first curr-args))\n            (drop 1 curr-args)))\n                )) curr-max curr-args)))", "user": "5a514e68e4b05d388ecb6be5"}, {"problem": 38, "code": "(fn [& nums] (reduce #(if (> %1 %2) %1 %2) nums))", "user": "5b8f0861e4b0c0b3ffbd49f4"}, {"problem": 38, "code": "(fn mymax\n  ([x y]\n     (if (> x y) x y))\n  ([x y & more]\n     (reduce mymax (mymax x y) more)))", "user": "5b88f0c0e4b047b03b203816"}, {"problem": 38, "code": "(fn\n  [x & args]\n  (loop [m x\n         more args]\n    (if-let [y (first more)]\n      (recur (if (< m y) y m) (rest more))\n      m)))", "user": "5b86533ce4b047b03b2037e0"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) args))", "user": "5b77d3c8e4b047b03b2036f1"}, {"problem": 38, "code": "#( last ( sort %&))", "user": "5b8f9a47e4b0c0b3ffbd49fe"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5b11449ce4b0cc2b61a3be2d"}, {"problem": 38, "code": "(fn max-val [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) (flatten (cons x xs))))", "user": "5b8d01d7e4b0c0b3ffbd49ca"}, {"problem": 38, "code": "(fn [& more]\n\t(reduce #(if (> %1 %2) %1 %2) more))", "user": "57c647bbe4b05aa3c4741cf3"}, {"problem": 38, "code": "#(last (sort (seq %&)))", "user": "5b68a804e4b0c6492753e77b"}, {"problem": 38, "code": "(fn [& args]\n   (last(sort args)))", "user": "5b86462de4b047b03b2037df"}, {"problem": 38, "code": "(fn [& args] (loop [max_val (peek (into '() args))\n                      to_visit (rest (into '() args))]\n               (if (empty? to_visit)\n                 max_val\n                 (if (> (peek to_visit) max_val)\n                   (recur (peek to_visit) (rest to_visit))\n                   (recur max_val (rest to_visit))\n                   )\n                 )\n               )\n  )", "user": "592ac17ae4b072a2710fcf26"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5b917764e4b0c0b3ffbd4a1f"}, {"problem": 38, "code": "(fn biggest [biggest-so-far & rest-seq]\n  (loop [maximum biggest-so-far\n         remaining-seq rest-seq]\n        (if (empty? remaining-seq)\n          maximum\n          (let [next (first remaining-seq)]\n            (if (> next maximum)\n              (recur next (rest remaining-seq))\n              (recur maximum (rest remaining-seq)))))))", "user": "58ac01f7e4b0005cfeb1a73b"}, {"problem": 38, "code": "(fn [& x] \n  (reduce #(if (> %1 %2) %1 %2) x))", "user": "5b9263ece4b0c0b3ffbd4a37"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) 0 xs))", "user": "5b81139fe4b047b03b203782"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "5b924123e4b0c0b3ffbd4a34"}, {"problem": 38, "code": "(fn maximum [& args]\n  (last (sort args))\n  )", "user": "5b92f178e4b0c0b3ffbd4a41"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "5b9357b7e4b0c0b3ffbd4a46"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %2 %1) %2 %1) args))", "user": "5b96800ae4b0c0b3ffbd4a7b"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) 0 args))", "user": "5b80a5cfe4b047b03b20377f"}, {"problem": 38, "code": "(fn  [& n]\n    (loop [x       n\n           max-ele 0]\n      (if (empty? x )\n        max-ele\n      (recur (rest x)\n        (if (> (first x) max-ele)\n          (first x)\n          max-ele)))))", "user": "5b97c521e4b0c0b3ffbd4a9a"}, {"problem": 38, "code": "(fn [ & args ] (first (reverse (sort args))))", "user": "5b9436dfe4b0c0b3ffbd4a53"}, {"problem": 38, "code": "(fn ff\n  [& vs]\n  (reduce #(if (> %1 %2) %1 %2) vs))", "user": "5b8db323e4b0c0b3ffbd49da"}, {"problem": 38, "code": "(fn [a & b] (last (sort (cons a b))))", "user": "5b8b326de4b0c0b3ffbd49b8"}, {"problem": 38, "code": "(fn [& args] \n  (last (sort (vec args))))", "user": "57a5da5ee4b0a966079561fe"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5b985fe5e4b0c0b3ffbd4ab1"}, {"problem": 38, "code": "(fn [& seq] (* -1 (apply min (map #(* -1 %) seq))))", "user": "5b999af8e4b0c0b3ffbd4ad3"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %2 %1) %2 %1) 0 x))", "user": "5b919d9de4b0c0b3ffbd4a24"}, {"problem": 38, "code": "(fn [& nums] (reduce (fn [m v] (if (> m v) m v)) nums))", "user": "5a66fddee4b0512ff01cd9d7"}, {"problem": 38, "code": "(fn [& nums] (reduce (fn [a b] (if (>= a b) a b)) nums))", "user": "592883f1e4b072a2710fceea"}, {"problem": 38, "code": "(fn mx\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] (apply mx (mx x y) more)))", "user": "5b97699ee4b0c0b3ffbd4a92"}, {"problem": 38, "code": "#(reduce (fn [acc, x] (if (> acc x) acc x)) %&)", "user": "5b9db58be4b0c0b3ffbd4b41"}, {"problem": 38, "code": "#( last ( sort %& ))", "user": "5b819312e4b047b03b20378d"}, {"problem": 38, "code": "(fn find-max [& args]\n  (loop [mx (first args) args (next args)]\n    (cond\n      (empty? args) mx\n      :else (if (> (first args) mx)\n              (recur (first args) (next args))\n              (recur mx (next args))))))", "user": "5b975c6ee4b0c0b3ffbd4a91"}, {"problem": 38, "code": "(fn get-args [& args] \n    (reduce \n        #(if (> %1 %2)\n            %1\n            %2)\n        (first args)\n        args))", "user": "5b9acb23e4b0c0b3ffbd4aef"}, {"problem": 38, "code": "(fn mmm [& args]\n  (reduce #(if (> %1 %2) %1 %2) args) \n)", "user": "570d0548e4b0b0fb43fd06d2"}, {"problem": 38, "code": "(fn [& list] (reduce #(if (< %1 %2) %2 %1 ) 0 list))", "user": "5b6f72ede4b0c6492753e7dc"}, {"problem": 38, "code": "(fn [& args]\n  (->> args sort last))", "user": "5a796f13e4b03baeef9276ba"}, {"problem": 38, "code": "(fn max-impl [& numbers]\n  (last\n    (reduce (fn [acc value]\n              (\n                if (empty? acc)\n                (conj acc value)\n                (if (> value (last acc))\n                  (conj acc value)\n                  acc)\n                )\n              )\n            []\n            numbers)))", "user": "5b265183e4b063e2438bcc31"}, {"problem": 38, "code": "(fn f [a & b] (let [x a c b] (if (empty? b) x (recur (if (> x (first b)) x (first b)) (rest b)))))", "user": "5b99a0a3e4b0c0b3ffbd4ad7"}, {"problem": 38, "code": "(fn [& vals]\n  (reduce (fn [m x] (if (> x m) x m)) (first vals) vals))", "user": "5ba5802de4b0a20761a233fd"}, {"problem": 38, "code": "(fn my-max [& args]\n  (reduce (fn [current-max x]\n            (if (> x current-max)\n              x\n              current-max))\n          args))", "user": "5b602a66e4b0c6492753e6fc"}, {"problem": 38, "code": "(fn mymax [x & args]\n                             (loop [c args \n                                    d x] \n                               (if(empty? c)\n                                 d\n                               (recur (rest c) \n                                 (if (< (first c) d)                                                                                     \n                                   d\n                                  (first c)\n                                                      )\n                                )                   \n                                               )))", "user": "5b9d3913e4b0c0b3ffbd4b37"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5ba47e47e4b0a20761a233ea"}, {"problem": 38, "code": "(fn my-max [& elems]\n  (reduce (fn [l e]\n            (if (< l e)\n              e\n              l))\n          elems))", "user": "5af3aa42e4b0cc2b61a3bc8c"}, {"problem": 38, "code": "(fn [& args]\n               (when (empty? args) nil)\n              (reduce #(if (> %1 %2) %1 %2) (first args) (rest args)))", "user": "5b9c4a7be4b0c0b3ffbd4b16"}, {"problem": 38, "code": "(fn [& s]\n   (loop [v 0\n        s s]\n   (if (empty? s)\n     v\n     (recur\n      (if (> (first s) v)\n        (first s)\n        v)\n      (rest s)))))", "user": "5bab5440e4b0a20761a23475"}, {"problem": 38, "code": "(fn max'\n  [& args]\n  (reduce\n   (fn [best check]\n     (if (> best check) best check))\n   args))", "user": "5bab49bbe4b0a20761a23474"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5b98f174e4b0c0b3ffbd4ac1"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args))\n)", "user": "5bab93d5e4b0a20761a2347f"}, {"problem": 38, "code": "(comp last sort list)", "user": "5bab968fe4b0a20761a23481"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "5b98f7f3e4b0c0b3ffbd4ac2"}, {"problem": 38, "code": "(comp last sort list)", "user": "5bafd5c8e4b0a20761a234dd"}, {"problem": 38, "code": "#(-> (sort > %&)\n \t (first))", "user": "5b759ca8e4b047b03b2036d0"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5a3e6642e4b0447ef91cc5b3"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5b77248ae4b047b03b2036e7"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> % %2) % %2) 0 args)\n)", "user": "5bb23cf1e4b0a20761a2350a"}, {"problem": 38, "code": "(fn [& nums] (reduce (fn [mx x] (if (> x mx) x mx)) nums))", "user": "5bb17123e4b0a20761a234fd"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "5b329773e4b025bcb146f322"}, {"problem": 38, "code": "(fn [& more]\n   (loop [biggest (first more)\n          coll more]\n     (if (first coll)\n       (recur\n        (if (> (first coll) biggest) (first coll) biggest)\n        (rest coll))\n       biggest)))", "user": "5bb25684e4b0a20761a2350d"}, {"problem": 38, "code": "(fn _max [& x] (last (sort x)))", "user": "5b8e3e81e4b0c0b3ffbd49e1"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5baa1b58e4b0a20761a2344e"}, {"problem": 38, "code": "(fn [& nums] \n  \t(reduce #(if (> %2 %1) %2 %1) nums))", "user": "5bb3b77de4b0a20761a2352e"}, {"problem": 38, "code": "(fn get-max [x & xs]\n  (cond\n    (empty? xs) x\n    :default\n    (let [m (apply get-max xs)]\n      (if (> m x) m x)\n    )\n  )\n)", "user": "5bb905dce4b0a20761a235c7"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [acc nxt] (if (< acc nxt) nxt acc)) args))", "user": "59f4c42ce4b0966464fe6ab6"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5bb7b956e4b0a20761a235ad"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5bbbce0ee4b0a20761a2360d"}, {"problem": 38, "code": "(fn maximum_value2\n  ( [a b c d]\n  (loop [lst (list a b c d)\n         result (first lst)]\n    (if (= (first (next lst)) nil) result\n                                   (if (< result (first (next lst)))\n                                     (recur (rest lst) (first (next lst)))\n                                     (recur (rest lst) result )))))\n  ([a b c]\n   (loop [lst (list a b c)\n          result (first lst)]\n     (if (= (first (next lst)) nil) result\n                                    (if (< result (first (next lst)))\n                                      (recur (rest lst) (first (next lst)))\n                                      (recur (rest lst) result )))))\n\n  ([a b]\n   (loop [lst (list a b)\n          result (first lst)]\n     (if (= (first (next lst)) nil) result\n                                    (if (< result (first (next lst)))\n                                      (recur (rest lst) (first (next lst)))\n                                      (recur (rest lst) result )))))\n\n\n  )", "user": "5bbbd077e4b0a20761a23615"}, {"problem": 38, "code": "(fn max_value\n  ; Takes a variable number of parameters and returns the max value\n  ([a b c d]\n  (loop [lst (list a b c d)\n         result (first lst)]\n    (if (= (first (next lst)) nil) result\n                                   (if (< result (first (next lst)))\n                                     (recur (rest lst) (first (next lst)))\n                                     (recur (rest lst) result )))))\n  ([a b c]\n   (loop [lst (list a b c)\n          result (first lst)]\n     (if (=(first (next lst)) nil) result\n                                    (if (< result (first (next lst)))\n                                      (recur (rest lst) (first (next lst)))\n                                      (recur (rest lst) result )))))\n  ([a b]\n   (loop [lst (list a b)\n          result (first lst)]\n     (if (= (first (next lst)) nil) result\n                                    (if (< result (first (next lst)))\n                                      (recur (rest lst) (first (next lst)))\n                                      (recur (rest lst) result ))))))", "user": "5bbbcecee4b0a20761a23611"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5bbbba29e4b0a20761a23609"}, {"problem": 38, "code": "(fn [x y & xs] \n  (if (nil? y)\n    x\n    (recur \n     (if (> x y) x y)\n     (first xs)\n     (rest xs))))", "user": "5b9bfe0be4b0c0b3ffbd4b10"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5bab8c06e4b0a20761a2347e"}, {"problem": 38, "code": "(fn [f & others] (reduce #(if (> %1 %2) %1 %2) f others))", "user": "5a68f374e4b0512ff01cda05"}, {"problem": 38, "code": "(fn my-max\n       [& args]\n       (let [my-vec (into [] args)]\n         (loop [remain my-vec\n                max-val 0]\n           (if (empty? remain)\n             max-val\n             (let [[val & remaining] remain]\n               (if (> val max-val)\n                 (recur remaining val)\n                 (recur remaining max-val)))))))", "user": "5bb5cd43e4b0a20761a23575"}, {"problem": 38, "code": "(fn [& arr]\n  (reduce #(if (< %1 %2) %2 %1) (first arr) (rest arr)))", "user": "5a3a15e6e4b001c08efc0cc1"}, {"problem": 38, "code": "(fn m [& args]\n  (let [s (flatten (list args))]\n    (print s)\n    (cond (= (count s) 1) (first s)\n          (<= (first s) (second s)) (m (rest s))\n          :else (m (filter #(<= (first s) %) s)))))", "user": "5a79ce7fe4b03baeef9276c8"}, {"problem": 38, "code": "(fn \n  ([& args]\n    (if (= (count args) 1)\n      (first args)\n      (if (< (first args) (second args) )\n        (recur (rest args))\n        (recur (cons (first args)  (rest (rest args)) ))\n      )\n    )\n  )       \n)", "user": "5bbd13a5e4b07a9b28b0ff95"}, {"problem": 38, "code": "(fn [& coll]\n  (loop [c coll\n         m (first coll)]\n    (if-let [item (first c)]\n      (recur (rest c) (if (> item m) item m))\n      m)))", "user": "5ad4c3d2e4b0ea6055cfabe1"}, {"problem": 38, "code": "#(first (reverse (sort %&)))", "user": "5bc255b7e4b07a9b28b10029"}, {"problem": 38, "code": "#(reduce (fn [x y] (if (< x y) y x)) %&)", "user": "5bc15685e4b07a9b28b10016"}, {"problem": 38, "code": "(fn mymax [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "5bc20634e4b07a9b28b10022"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5bbbce70e4b0a20761a2360f"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (< a b) b a)) %&)", "user": "5bc39d2be4b07a9b28b10045"}, {"problem": 38, "code": "(fn [& l] (reduce #(if (< %1 %2) %2 %1) l))", "user": "5bbbd484e4b0a20761a23617"}, {"problem": 38, "code": "(fn [& args] (first (sort > args)))", "user": "5bc352abe4b07a9b28b10041"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %2 %1) %2 %1) 0 args))", "user": "5b85221ce4b047b03b2037c8"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "5bbe163fe4b07a9b28b0ffb5"}, {"problem": 38, "code": "(fn [& xs] (loop [input (rest xs)\n                  largest (first xs)]\n             (if (not-empty input) \n               (if (> (first input) largest)\n               \t(recur (rest input) (first input))\n               \t(recur (rest input) largest) \n               )\n               largest \n               )))", "user": "5bb3c9a8e4b0a20761a2352f"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5bc64843e4b07a9b28b10091"}, {"problem": 38, "code": "(fn [& a]\n  (reduce #(if (> %1 %2) %1 %2) a)\n  )", "user": "5b8f77a8e4b0c0b3ffbd49fa"}, {"problem": 38, "code": "(comp last sort list)", "user": "5b7d03a0e4b047b03b20373d"}, {"problem": 38, "code": "(fn [& coll]\n  (reduce \n    #(if (> %1 %2) %1 %2)\n    (first coll)\n    (rest coll)))", "user": "5bc488bde4b07a9b28b10053"}, {"problem": 38, "code": "(fn [& args]\n\t\t(reduce \n         (fn [a b]\n           (if (> b a) \n             b\n             a))\n          args))", "user": "583019b8e4b051871117bfff"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [res v]\n            (if (> v res)\n              v\n              res))\n          args))", "user": "543a8256e4b032a45b869327"}, {"problem": 38, "code": "(fn [& rest]\n   (last (sort rest)))", "user": "5ba0dcfce4b0c0b3ffbd4b98"}, {"problem": 38, "code": "(fn [& args]\n  (loop [mx 0\n         coll args]\n    (if (empty? coll)\n      mx\n      (recur\n       (if (> (first coll) mx)\n         (first coll)\n         mx)\n       (rest coll)))))", "user": "5bb948f5e4b0a20761a235d5"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [x a]\n            (if (> x a)\n                x\n                a)) args))", "user": "596b5f27e4b069c0a1a19813"}, {"problem": 38, "code": "(fn maximum\n  [& args]\n  (last (sort args))\n  )", "user": "5bbbcf9ee4b0a20761a23614"}, {"problem": 38, "code": "(fn [& others] (reduce (fn [a1 a2] (if (< a1 a2) a2 a1)) others))", "user": "5bc7f2d6e4b07a9b28b100b7"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5bbc0ddfe4b0a20761a2361e"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "5bc8c033e4b07a9b28b100ca"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "5bc8e91ee4b07a9b28b100ce"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5bc7ba68e4b07a9b28b100b0"}, {"problem": 38, "code": "(fn [& args]\n  (first (sort > args)))", "user": "59d8f23ae4b0ef0a1e9b5c49"}, {"problem": 38, "code": "(fn find-max [a b & r]\n  (let [m (if (> a b) a b)]\n    (if r (apply find-max (conj r m))\n      m)))", "user": "5bc935bde4b07a9b28b100d8"}, {"problem": 38, "code": "#(first (reverse (sort %&)))", "user": "5bbbce99e4b0a20761a23610"}, {"problem": 38, "code": "(fn [val & rem] (reduce #(if (> %2 %1) %2 %1) val rem))", "user": "5bc6ef7ce4b07a9b28b1009f"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5bc611e3e4b07a9b28b10083"}, {"problem": 38, "code": "(fn [& rest] (last (sort rest)))", "user": "5bc28638e4b07a9b28b10033"}, {"problem": 38, "code": "(fn [& args]\n  (reduce\n   \t(fn [acc x]\n      (if (> acc x) acc x))\n      args))", "user": "59a0286be4b0871e7608b82f"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce\n   (fn [a b]\n     (if (> a b) a b)\n   )\n   xs\n  )\n)", "user": "5bca2c71e4b07a9b28b100e7"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5bcb672ee4b07a9b28b10100"}, {"problem": 38, "code": "(fn my-max [& lst]\n  (last (sort lst)))", "user": "5bbbce60e4b0a20761a2360e"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5bc50870e4b07a9b28b10069"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5bbbcf81e4b0a20761a23613"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5bbbcf3ae4b0a20761a23612"}, {"problem": 38, "code": "(fn [& args]\n  \t(reduce (fn [a b]\n    \t(if (> a b)\n               a\n               b))\n  \t\t(first args)\n  \t\t(rest args)\n\t  )    \n)", "user": "5bc60a65e4b07a9b28b10082"}, {"problem": 38, "code": "(fn [& args]\n  (->> args\n       (sort)\n       (last)))", "user": "578dc040e4b0ebec4cfb756d"}, {"problem": 38, "code": "(fn mx [& xs]\n  (if (= (count xs) 1)\n    (first xs)\n    (let [y (first xs)\n          ys (rest xs)\n          z (apply mx ys)]\n      (cond\n        (> y z) y\n        :else z))))", "user": "5bcddaeee4b0e9689409ee07"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5bc4599ae4b07a9b28b10050"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (> %1 %2) %1 %2) x xs))", "user": "5bc833a5e4b07a9b28b100bb"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [x y] (if (> x y) x y)) args))", "user": "5bd27a37e4b0e9689409ee60"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "593870e6e4b02506e01a29d6"}, {"problem": 38, "code": "(fn maxval\n  [& values]\n  (reduce \n   (fn [output value]\n     (if (> value output) value output))\n       0 values))", "user": "5bc4f266e4b07a9b28b10066"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [a b] (if (< a b) b a)) args))", "user": "554f817ce4b00713264bd9a2"}, {"problem": 38, "code": "(fn [& args] (reduce #(if(< %1 %2) %2 %1) 0 args))", "user": "5b72b36ce4b047b03b2036a9"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "5bd5ede3e4b0ed4b8aab4ba3"}, {"problem": 38, "code": "(fn [& args]\n (-> args sort last))", "user": "577caf73e4b0c8d87281f6c6"}, {"problem": 38, "code": "(fn \n ([a] a)\n ([a b] (if (> a b) a b))\n ([a b & args]\n     (if (empty? args)\n       a\n       (if (> a b)\n         (recur a (first args) (rest args))\n         (recur b (first args) (rest args))))))", "user": "5b673832e4b0c6492753e760"}, {"problem": 38, "code": "(fn [& items]\n  (->> items\n    (sort >)\n    (first)))", "user": "5bd7b8b8e4b0ed4b8aab4bc6"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce (fn [m n] (if (< m n) n m)) x xs))", "user": "567c63f6e4b05957ce8c61bb"}, {"problem": 38, "code": "(fn [& l]\n  (reduce (fn [a b]\n            (if (> a b) \n              a \n              b))\n           l))", "user": "5bd93897e4b0ed4b8aab4bee"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [m n]\n                       (if (> n m)\n                         n\n                         m))\n                     args))", "user": "5785a954e4b0ebec4cfb74df"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce #(if (> %1 %2) %1 %2) nums))", "user": "59595f85e4b066ee0a44afa1"}, {"problem": 38, "code": "(fn [& xs] ((comp first reverse sort) xs))", "user": "5bd9549ee4b0ed4b8aab4bf0"}, {"problem": 38, "code": "(fn [& all] (reduce (fn [a b] (if (> a b) a b)) all))", "user": "5ba75fdfe4b0a20761a23419"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5bc7c3aee4b07a9b28b100b2"}, {"problem": 38, "code": "(fn [& args]\n  (loop [i args x 0]\n    (if (empty? i)\n      x\n      (if (< (first i) x)\n        (recur (rest i) x)\n        (recur (rest i) (first i)))\n  )))", "user": "5bd999cce4b0ed4b8aab4bf4"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5bbdd136e4b07a9b28b0ffab"}, {"problem": 38, "code": "(fn [& args] \n  (loop [cm 0 cl args] \n    (if (empty? cl) \n      cm \n      (if (> (first cl) cm)\n        (recur (first cl) (rest cl))\n        (recur cm (rest cl))\n        )\n      )\n    )\n  )", "user": "5bdf651ee4b0ed4b8aab4c6d"}, {"problem": 38, "code": "(fn [ & x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "5be0306be4b0ed4b8aab4c7d"}, {"problem": 38, "code": "(fn [& vars] (last (sort vars)))", "user": "5be22678e4b0ed4b8aab4cb1"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "5be1c6c6e4b0ed4b8aab4ca5"}, {"problem": 38, "code": "(fn [& n] (reduce #(if (< %1 %2 ) %2 %1) n))", "user": "5be1a134e4b0ed4b8aab4ca0"}, {"problem": 38, "code": ";(fn [& args] (reduce #(if (> %2 %1) %2 %1) 0 args))\n#(last (sort %&))", "user": "5be589f9e4b0ed4b8aab4d13"}, {"problem": 38, "code": "(fn __ [& r] (reduce #(if (< %1 %2) %2 %1) r))", "user": "5be2e670e4b0ed4b8aab4ccc"}, {"problem": 38, "code": "(fn [& numbers] (reduce (fn [a b] (if (> a b) a b)) numbers))", "user": "5be4eb52e4b0ed4b8aab4d08"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5bcff1dce4b0e9689409ee32"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5be58beae4b0ed4b8aab4d14"}, {"problem": 38, "code": "(comp last sort vector)", "user": "5be5cebde4b0ed4b8aab4d19"}, {"problem": 38, "code": "#(reduce (fn [x y] (if (< x y) y x)) (seq %&))", "user": "5be6d0f8e4b0f319e2d7ec51"}, {"problem": 38, "code": "(fn [& r] (reduce #(if (> %1 %2) %1 %2) r))", "user": "5b60e88be4b0c6492753e70b"}, {"problem": 38, "code": "(fn\n  ([x y]\n  (if (> x y) x y))\n  ([x y & losdemas]\n   (println x y losdemas)\n   (cond\n    (nil? y) x \n    (> x y) (recur x (first losdemas) (rest losdemas))\n    (> y x) (recur y (first losdemas) (rest losdemas))))\n)", "user": "5bc232b7e4b07a9b28b10026"}, {"problem": 38, "code": "#(last (sort %&))", "user": "575f6a80e4b08062f99a4e80"}, {"problem": 38, "code": "(fn \n  ([& more] (reduce (fn [x y] (if (< x y) y x)) more)))", "user": "5be33a16e4b0ed4b8aab4cd6"}, {"problem": 38, "code": "(fn [deb & fin]\n     (reduce \n       (fn[a b](if(> a b)a b)) \n      deb fin))", "user": "5a6dbaf5e4b0512ff01cda63"}, {"problem": 38, "code": "(fn [& s]\n  (loop [coll s\n         largest (first s)]\n    (if (empty? coll)\n      largest\n      (recur (rest coll) (if (> (first coll) largest) (first coll) largest)))))", "user": "55469eede4b0a04f79299542"}, {"problem": 38, "code": "(fn\n  [& input-list]\n  \t(loop [max-value 0\n           current-list input-list]\n      (if (<= (count current-list) 0)\n        max-value \n        (let [max-val (if (> (first current-list) max-value) (first current-list) max-value)\n              remaining-list (rest current-list)]\n          (recur max-val remaining-list)))))", "user": "5bdb0b4ce4b0ed4b8aab4c10"}, {"problem": 38, "code": "(fn [& args] \n  (reduce \n   (fn [m i] (if (> m i) m i)) \n   args))", "user": "5bece6a5e4b0a6d31fed2114"}, {"problem": 38, "code": "(fn [ & nums]\n  (reduce #(if (> %1 %2) %1 %2) nums))", "user": "5be70bd5e4b0f319e2d7ec53"}, {"problem": 38, "code": "(fn [& s] (reduce #(if (< %1 %2) %2 %1) s))", "user": "5beadeb5e4b0f319e2d7ec88"}, {"problem": 38, "code": "(fn max-value [x & xs]\n  (reduce (fn [x y] (if (pos? (.compareTo y x)) y x)) x xs))", "user": "5bedddeee4b0a6d31fed2128"}, {"problem": 38, "code": "(fn [& args] \n  (reduce #(if (< %2 %1) %1 %2) args))", "user": "5ba15075e4b0a20761a2339e"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5bf0b940e4b0a6d31fed215c"}, {"problem": 38, "code": "(fn [& items] (last (sort items)))", "user": "5be182eae4b0ed4b8aab4c9d"}, {"problem": 38, "code": "#(reduce (fn [x, y] (if (> x y) x y)) %&)", "user": "5be3025ee4b0ed4b8aab4cd1"}, {"problem": 38, "code": "(fn -max [x & xs]\n  (if (nil? xs)\n    x\n    (let [m (apply -max xs)] (if (< x m) m x))\n  )\n)", "user": "5be744dae4b0f319e2d7ec57"}, {"problem": 38, "code": "(fn [& res] (reduce (fn [a b] (if (> a b) a b)) res))", "user": "5b8ec146e4b0c0b3ffbd49f0"}, {"problem": 38, "code": "(fn [& args]  (first (reverse (sort args))))", "user": "5bec37e2e4b0f319e2d7ec96"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [a b] (if (> a b) a b)) args))", "user": "5bea3177e4b0f319e2d7ec81"}, {"problem": 38, "code": "(fn mymax ([x] x) ([x y] (if (> x y) x y)) ([x y & more] (reduce mymax (mymax x y) more)))", "user": "5bef02ede4b0a6d31fed2138"}, {"problem": 38, "code": "(fn [& args] (-> args sort last))", "user": "5a42dbabe4b0447ef91cc5fc"}, {"problem": 38, "code": "#(loop [ll %&,rr nil]\n   (if (empty? ll)\n     rr\n     (if (or (not rr) (> (first ll) rr) )\n       (recur (rest ll) (first ll))\n       (recur (rest ll) rr))))", "user": "56c50599e4b05cc29241ee9e"}, {"problem": 38, "code": "(fn [& l] (reduce (fn [a c] (if (> c a) c a)) l))", "user": "5aca79a7e4b0e27600da77e4"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< % %2) %2 %) args))", "user": "5beb8e28e4b0f319e2d7ec8e"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (< %1 %2) %2 %1) args))", "user": "5bf0aefde4b0a6d31fed215a"}, {"problem": 38, "code": "(fn [& params] (reduce (fn [c n] (if (> n c) n c)) 0 params))", "user": "5a09a6f7e4b01bb0ae8afe14"}, {"problem": 38, "code": "(fn [f & rest] (last (sort (reduce conj (conj [] f) rest))))", "user": "51301929e4b0e2531888cbde"}, {"problem": 38, "code": "(fn myMax\n   ([x] x)\n   ([x y] (if (> x y) x y))\n   ([x y & more ] (reduce myMax (myMax x y) more))\n   )", "user": "5be79b5be4b0f319e2d7ec5a"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2)%1 %2) x))", "user": "5bf5ddfde4b0bdcf453d159e"}, {"problem": 38, "code": "(fn [& x]\n  (reduce #(if (> %1 %2) %1 %2) x))", "user": "5bf872e0e4b0bdcf453d15b7"}, {"problem": 38, "code": "(fn m [& a] \n  (-> a\n      sort\n      last))", "user": "5bba703fe4b0a20761a235eb"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [l r] (if (>= l r) l r)) args))", "user": "5bfa25fbe4b0bdcf453d15c8"}, {"problem": 38, "code": "(fn mymax\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n   (reduce mymax (if (> x y) x y) more)))", "user": "5be15f4de4b0ed4b8aab4c9b"}, {"problem": 38, "code": "(comp last sort list)", "user": "5beda647e4b0a6d31fed2122"}, {"problem": 38, "code": "#(reduce (fn [big cur] (if (> big cur) big cur)) %&)", "user": "594d4c57e4b07ddc2dafae87"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5bfd0b72e4b0bdcf453d15f6"}, {"problem": 38, "code": "#(\n    loop [maxi 0\n          first-element %1\n          others %&]\n    (if (empty? others) (if (> first-element maxi) first-element maxi)\n                     (recur\n                       (if (> first-element maxi) first-element maxi)\n                        (first others)\n                       (rest others))\n                     )\n\n    )", "user": "5bfc2068e4b0bdcf453d15e4"}, {"problem": 38, "code": "(fn [& nrs] (reduce #(if (> %1 %2) %1 %2) nrs))", "user": "5bf313e8e4b0a6d31fed2188"}, {"problem": 38, "code": "(fn foo[& x]\n   \n    (last (sort x))\n   \n   \n)", "user": "5bed1e4ae4b0a6d31fed2118"}, {"problem": 38, "code": "(fn [& args]\n         (reduce #(if (> % %2) % %2) args))", "user": "5be96111e4b0f319e2d7ec70"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5be8bc2de4b0f319e2d7ec66"}, {"problem": 38, "code": "(fn [& ls] (reduce #(if (< %1 %2) %2 %1) ls))", "user": "5bfa3e02e4b0bdcf453d15ca"}, {"problem": 38, "code": "(fn func [& args] (loop [coll args\n                           top nil]\n                      (if (empty? coll)\n                        top\n                        (recur (rest coll)\n                               (if (and (not (nil? top)) (> top (first coll))) top\n                                   (first coll))))))", "user": "5bef3e88e4b0a6d31fed213f"}, {"problem": 38, "code": "(fn [f & more] (reduce #(if (> %1 %2) %1 %2) f more))", "user": "5c03e927e4b0bdcf453d167b"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5bed84b1e4b0a6d31fed2120"}, {"problem": 38, "code": "(fn [& n] (reduce #(if (< %1 %2) %2 %1) n))", "user": "5bfe4ecfe4b0bdcf453d1608"}, {"problem": 38, "code": "(fn [& r] \n   (reduce (fn [col elem]\n      (if (> elem col) elem col)\n   )\n   \n   (first (seq r)) (seq r))\n\n\n )", "user": "5beebdb7e4b0a6d31fed2132"}, {"problem": 38, "code": "(fn [& a] (last (sort a)))", "user": "58273e82e4b051871117bf1b"}, {"problem": 38, "code": "(fn [x & xs]\n  (if (= 0 (count xs))\n    x\n    (let [newmax (if (> (first xs) x)\n                    (first xs)\n                    x)]\n                    (recur newmax (rest xs)))))", "user": "5b8d0564e4b0c0b3ffbd49cc"}, {"problem": 38, "code": "(fn [& args]\n  (let [big (fn [[x y]] (if (>= (or x 0) (or y 0)) x y))]\n\t(loop [coll args] (if (< (count coll) 2) (first coll) (recur (map big (partition 2 2 nil coll)))))))", "user": "52737333e4b03e8d9a4a747f"}, {"problem": 38, "code": "(fn [& seqn] (reduce (fn [e k] (if (> e k) e k)) seqn))", "user": "5c0a87e6e4b0bdcf453d1707"}, {"problem": 38, "code": "(fn [& nums] (reduce (fn [res value] (if (> value res) value res)) Integer/MIN_VALUE nums))", "user": "5c05cae7e4b0bdcf453d16a3"}, {"problem": 38, "code": "(fn [head & tail]\n  (reduce\n   (fn [acc, val]\n     (if (> val acc)\n       val\n       acc\n     )\n   )\n   head\n   tail\n  )\n)", "user": "5c0d0537e4b0bdcf453d173d"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5b57505ce4b02d533a91bd55"}, {"problem": 38, "code": "(fn [& xs] (last (sort xs)))", "user": "5c0e6e90e4b01240ff567141"}, {"problem": 38, "code": "(fn [& xs] (first (reverse (sort xs))))", "user": "5c0e58bfe4b01240ff567140"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "5c0e22cae4b01240ff56713b"}, {"problem": 38, "code": "(fn [ & xs] (reduce (fn [m item] (if (> item m) item m)) xs))", "user": "5bcf0b1be4b0e9689409ee24"}, {"problem": 38, "code": "(fn [h & t] (reduce #(if (> %1 %2) %1 %2) h t))", "user": "5c119da6e4b01240ff56717d"}, {"problem": 38, "code": "#(last (sort (seq %&)))", "user": "5bfada5ee4b0bdcf453d15d2"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) (cons x xs)))", "user": "5c0ebca5e4b01240ff567147"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5c13da47e4b01240ff5671a6"}, {"problem": 38, "code": "(fn [& args]\n  (if (= 1 (count args))\n   (first args)\n   (if (> (first args) (second args))\n     (recur (conj (rest (rest args)) (first args)))\n     (recur (conj (rest (rest args)) (second args))))))", "user": "5c13ce5ee4b01240ff5671a4"}, {"problem": 38, "code": "(fn [& cols] (last(sort cols)))", "user": "5c1229d5e4b01240ff567188"}, {"problem": 38, "code": "(fn [& args]\n  (loop [coll args\n         m (first coll)]\n    (if (empty? coll)\n      m\n      (let [f (first coll)]\n        (recur (rest coll) (if (> f m) f m))))))", "user": "5c04464ee4b0bdcf453d167d"}, {"problem": 38, "code": "(fn [& more] (first (sort #(compare %2 %1) more)))", "user": "5b8d73b3e4b0c0b3ffbd49d6"}, {"problem": 38, "code": "#(reduce (fn [acc el] (if (> el acc) el acc)) Integer/MIN_VALUE %&)", "user": "5c165d3ee4b01240ff5671d1"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce #(if (> %2 %1) %2 %1) (first nums) nums))", "user": "5c1834ffe4b01240ff5671ea"}, {"problem": 38, "code": "(fn[& coll]\n  (last(sort coll)))", "user": "5c115097e4b01240ff567172"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "user": "5c1840eae4b01240ff5671eb"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5c194d90e4b01240ff5671f6"}, {"problem": 38, "code": "(fn [& coll]\n  (reduce #(if (> %1 %2) %1 %2) 0 coll))", "user": "5c15537ae4b01240ff5671bf"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) 0 args))", "user": "57131a8ee4b07c98581c3a97"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5c1aadcde4b01240ff567209"}, {"problem": 38, "code": "(fn newmax [& args] \n (first (reverse (sort args)))\n  )", "user": "5c14371de4b01240ff5671b0"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce (fn [x y]\n            (if (< x y) y x))\n          xs))", "user": "5c1bee41e4b01240ff567218"}, {"problem": 38, "code": "(fn\n  [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "5c18418ce4b01240ff5671ec"}, {"problem": 38, "code": "(fn [& items] (last (apply sorted-set items)))", "user": "5c1d9f05e4b0efcb0b05b24c"}, {"problem": 38, "code": "(fn [& args]\n   (first (reverse (sort args))))", "user": "5c1ca642e4b0efcb0b05b23c"}, {"problem": 38, "code": "(fn [& coll] (last (sort coll)))", "user": "5c1ec762e4b0efcb0b05b25a"}, {"problem": 38, "code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) coll))", "user": "5c1edf23e4b0efcb0b05b25d"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [acc x] (if (< acc x) x acc))\n        (first (vec args))\n        (vec args)))", "user": "5c1ec7eee4b0efcb0b05b25b"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5b0bd9cfe4b0cc2b61a3bdd9"}, {"problem": 38, "code": "(fn find-biggest [& args] (last (sort (apply list args))))", "user": "5c20616ae4b07e362c230572"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [acc x] (if (< acc x) x acc)) args))", "user": "5c17467fe4b01240ff5671df"}, {"problem": 38, "code": "(fn [a & res](\n             if (empty? res) a\n             (recur (if (> a (first res)) a (first res))(rest res))))", "user": "5c0e3f86e4b01240ff56713d"}, {"problem": 38, "code": "(fn maxValue\n  [& values]\n  (println values)\n  (reduce #(if (> %1 %2) %1 %2) values)\n  )", "user": "5c20b6abe4b07e362c230576"}, {"problem": 38, "code": "(fn my-max\n  [ & xs]\n  (reduce\n   (fn [accum x]\n     (if (> x accum) x accum))\n   (first xs)\n   (rest xs)))", "user": "5c222b7de4b07e362c230588"}, {"problem": 38, "code": "(comp #(reduce (fn [xs x] (if (> x xs) x xs)) 0 %) list)", "user": "5c228b51e4b07e362c23058c"}, {"problem": 38, "code": "(fn max3 [& xs]\n    (reduce #(if (> %1 %2) %1 %2) (first xs) (next xs)))", "user": "5776903ee4b0979f8965163b"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5c2195dce4b07e362c230580"}, {"problem": 38, "code": "(fn [& args]\n    (loop [m 0\n            data args]\n        (if (empty? data)\n          m\n          (recur \n            (if (< m (first data))\n              (first data)\n              m\n            )  \n            (rest data)\n          )\n        )\n\n    )\n  )", "user": "5bfcdc52e4b0bdcf453d15f4"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5c1cb699e4b0efcb0b05b23d"}, {"problem": 38, "code": "#(loop [m (first %&) l (rest %&)] (if (empty? l) m (recur (if (> (first l) m) (first l) m) (rest l))))", "user": "5c23ff2ce4b07e362c23059c"}, {"problem": 38, "code": "(fn my-max [x & y]\n  (if (nil? y) x\n    (let [h (first y) mm (if (> x h) x h)]\n      (apply my-max mm (rest y)))\n    ))", "user": "5c250772e4b07e362c2305aa"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) (first args) (rest args)))", "user": "5c092334e4b0bdcf453d16ea"}, {"problem": 38, "code": "(fn [& rest] (reduce (fn [acc x] (if (> x acc) x acc)) 0 rest))", "user": "5c250900e4b07e362c2305ab"}, {"problem": 38, "code": "(fn [& col]\n  (reduce #(if (> %1 %2) %1 %2) col))", "user": "5c219c0fe4b07e362c230581"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5c0eb93ce4b01240ff567146"}, {"problem": 38, "code": "(fn [& more]\n  (reduce #(if(> %1 %2) %1 %2) (first more) (rest more)))", "user": "5c22c861e4b07e362c230590"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5c2649c8e4b07e362c2305bf"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5bc02fabe4b07a9b28b0fff9"}, {"problem": 38, "code": "(fn [& par]\n      (\n        (fn my-max\n          ([collection]\n           (if (> (count collection) 0)\n             (my-max collection (nth collection 0))\n             nil\n             )\n            )\n          ([collection max-num]\n           (loop [i 0]\n             (if (< i (count collection))\n               (let [curr (nth collection i)]\n                 (if (> curr max-num)\n                   (my-max collection curr)\n                   (recur (inc i))\n                   )\n                 )\n               max-num\n               )\n             )\n            )\n          )\n        par\n        )\n      )", "user": "5c21a531e4b07e362c230582"}, {"problem": 38, "code": "(fn [& r] (reduce \n             (fn [a x] (if (< a x) x a))\n           r))", "user": "5c272f82e4b07e362c2305cb"}, {"problem": 38, "code": "(fn [& nums]\n  (loop [[fst & rst] nums\n         cur_max 0]\n    (if (nil? fst)\n      cur_max\n      (if (> fst cur_max)\n        (recur rst fst)\n        (recur rst cur_max)))))", "user": "5c27d334e4b07e362c2305d2"}, {"problem": 38, "code": "(fn [ & x]\n  (last (sort x)))", "user": "5c2836ebe4b07e362c2305d4"}, {"problem": 38, "code": "(fn sorter [ & lst] \n  (last (sort  lst)))", "user": "5c22a12ae4b07e362c23058d"}, {"problem": 38, "code": "(fn [& rest] (first (sort > rest)))", "user": "55965515e4b0c79f6e1db978"}, {"problem": 38, "code": "(fn [& args] (reduce (fn mymax [x y] (cond (> x y) x :else y)) args))", "user": "5c24c654e4b07e362c2305a7"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [x1 x2] (if (> x1 x2) x1 x2)) xs))", "user": "5c2ca8ebe4b0d62ef62d9ee7"}, {"problem": 38, "code": "(fn [& arglist]\n  (reduce #(if (> %1 %2) %1 %2) arglist))", "user": "5c24671be4b07e362c2305a1"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5bf8caf0e4b0bdcf453d15bc"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) (first args) (rest args)))", "user": "595b5b6ee4b066ee0a44afd5"}, {"problem": 38, "code": "(fn [& r] (last (sort r)))", "user": "50eeeadae4b02c17778c91f3"}, {"problem": 38, "code": "(fn [first & numbers]\n  (reduce #(if (< %1 %2)\n             %2\n             %1)\n          first\n          numbers))", "user": "57d57f65e4b0bd073c2023b3"}, {"problem": 38, "code": "(fn f [& s]\n  (reduce (fn [acc s*] (if (> s* acc) s* acc)) (first s) (rest s)))", "user": "5c2621e0e4b07e362c2305b8"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [x y] (if (> x y) x y)) xs))", "user": "5c30d90de4b0d62ef62d9f22"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5c2f0cdfe4b0d62ef62d9f09"}, {"problem": 38, "code": "(fn [n & others]\n  (reduce #(if (>= %1 %2) %1 %2) n others)\n)", "user": "5c0fedade4b01240ff567157"}, {"problem": 38, "code": "(fn [& arr]\n\t(reduce #(if (> %1 %2) %1 %2) arr))", "user": "5c2bbd40e4b07e362c2305f3"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "5bf28e9ee4b0a6d31fed2177"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [x y] (if (> x y) x y)) xs))", "user": "5c2d1f63e4b0d62ef62d9ef0"}, {"problem": 38, "code": "(fn nilaimax ([a b] (if (> a b) a b )) ([a b & more] (reduce nilaimax (nilaimax a b) more)))", "user": "5c32ea85e4b0d62ef62d9f3e"}, {"problem": 38, "code": "(fn [h & s] (reduce (fn [a b] (if (> a b) a b)) h s))", "user": "5c32603ee4b0d62ef62d9f38"}, {"problem": 38, "code": "(fn my-max [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "5c36d110e4b0d62ef62d9f6a"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5c34cb2ee4b0d62ef62d9f59"}, {"problem": 38, "code": "(fn max-impl [& args]\n  (reduce (fn [run-max ele] (if (> run-max ele) run-max ele)) args))", "user": "5c196dc3e4b01240ff5671fa"}, {"problem": 38, "code": "(fn  [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) (flatten (cons x xs))))", "user": "5c37110ae4b0d62ef62d9f71"}, {"problem": 38, "code": "(fn f[& args]\n  (println args)\n  (loop [x args\n        mx (first args)]\n    (if (empty? x)\n      mx\n      (if (> (first x) mx)\n        (recur (rest x) (first x))\n        (recur (rest x) mx)\n      )\n    )\n  )\n)", "user": "5c337305e4b0d62ef62d9f48"}, {"problem": 38, "code": "(fn [& vars]\n    (reduce #(if (> %1 %2) %1 %2),(first vars),vars))", "user": "5a64dcabe4b0512ff01cd9a9"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "5c35046fe4b0d62ef62d9f5f"}, {"problem": 38, "code": "(fn my-max [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "5c3ac091e4b0d62ef62d9f95"}, {"problem": 38, "code": "(fn [& my-seq]\n  (last (sort my-seq))\n\n  )", "user": "5c321b8ae4b0d62ef62d9f32"}, {"problem": 38, "code": "(fn [& args]\n  (loop [ostatak (rest args)\n         broj (first args)]\n    (if (empty? ostatak) broj (recur (rest ostatak) (if (> broj (first ostatak)) broj (first ostatak))))))", "user": "5be0b916e4b0ed4b8aab4c8f"}, {"problem": 38, "code": "#(-> %& sort last )", "user": "5c35acffe4b0d62ef62d9f62"}, {"problem": 38, "code": "(comp last sort list)", "user": "5c379636e4b0d62ef62d9f76"}, {"problem": 38, "code": "(fn [& more] (reduce #(if (> % %2) % %2) more))", "user": "5c308385e4b0d62ef62d9f1c"}, {"problem": 38, "code": "(fn [& rest] (last (sort rest)))", "user": "5c0614f6e4b0bdcf453d16a9"}, {"problem": 38, "code": "(fn [& args]\n   (reduce (fn [acc elem]\n             (if (> elem acc)\n               elem\n               acc)) 0 args))", "user": "5c2dfca3e4b0d62ef62d9efc"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "5c374db6e4b0d62ef62d9f73"}, {"problem": 38, "code": "(fn [& args] (nth (sort > args) 0))", "user": "5c3e7b04e4b08cd430848e83"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2 ) %1 %2) args)\n  )", "user": "5c408a61e4b08cd430848eb2"}, {"problem": 38, "code": "(fn my-max [& rest]\n  (reduce #(if (> %1 %2) %1 %2) rest))", "user": "5c411df3e4b08cd430848ebf"}, {"problem": 38, "code": "(fn [& args] (* -1 (apply min (map (fn [x] (* -1 x)) args))))", "user": "5c41d10fe4b08cd430848ecc"}, {"problem": 38, "code": "(fn [& args]\n  (loop [cur args cur-max 0]\n    (if (= (count cur) 0)\n      cur-max\n      (if (> (first cur) cur-max)\n        (recur (rest cur) (first cur))\n        (recur (rest cur) cur-max)\n      )\n    )\n  )\n)", "user": "5c3f6322e4b08cd430848e97"}, {"problem": 38, "code": "(fn [& args]\n  (loop [x args\n         f (first x)\n         s (second x)]\n    (if (>= (count x) 2)\n      (if (> f s)\n        f\n        s)\n      (recur s (first (rest x)) (rest x)))))", "user": "54dc2c3ae4b024c67c0cf77d"}, {"problem": 38, "code": "#(first (reverse (sort %&)))", "user": "5c3e313fe4b0a522eaa3f9a2"}, {"problem": 38, "code": "(fn [first & args] \n   (last (reductions (fn [m x] (if (> m x) m x)) first args)))", "user": "5c3f37fce4b08cd430848e91"}, {"problem": 38, "code": "#(last (sort %&))", "user": "568cb90fe4b0dcc4269f40b9"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5bf31833e4b0a6d31fed218a"}, {"problem": 38, "code": "(fn my-max \n  [& coll]\n  (loop [[fst & rst] coll, acc fst]\n    (if (empty? rst)\n      acc\n      (let [sec (first rst)]\n        (recur rst (if (> sec acc)  sec acc))))))", "user": "5c478ba2e4b0e06e1360a3b2"}, {"problem": 38, "code": "(fn f [& c]\n(reduce (fn [acc c*] (if (> c* acc) c* acc)) (first c) (rest c)))", "user": "5c484b58e4b0e06e1360a3be"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (>= %1 %2) %1 %2) args))", "user": "5c48c971e4b0e06e1360a3c6"}, {"problem": 38, "code": "(fn [& v] (reduce #(if (> %1 %2) %1 %2) v))", "user": "5c3796b3e4b0d62ef62d9f77"}, {"problem": 38, "code": "(fn [& xs] (loop [x xs y 0] (if (empty? x) y (recur (rest x) (if (> (first x) y) (first x) y)))))", "user": "5c387c51e4b0d62ef62d9f83"}, {"problem": 38, "code": "(fn max-val [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) (cons x xs)))", "user": "5c4ab449e4b0f9f7a8770e57"}, {"problem": 38, "code": "#(loop [result (first %&)\n        s (rest %&)]\n    (if (next s)\n      (if (> (first s) result)\n        (recur (first s) (rest s))\n        (recur result (rest s)))\n      result))", "user": "502ea967e4b06efe12e8cc76"}, {"problem": 38, "code": "(fn\n  [& params]\n  \n  (-> params\n\t  seq\n      sort\n      last\n  )\n)", "user": "5c493046e4b0e06e1360a3cb"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5c43ccdae4b0e06e1360a36f"}, {"problem": 38, "code": "(fn my-max \n  [m & s]\n   (if(empty? s)\n     m\n     (if(> m (first s))\n       (apply my-max m (rest s))\n       (apply my-max (first s)(rest s)))))", "user": "5c486dece4b0e06e1360a3c0"}, {"problem": 38, "code": "(fn [ & col]\n  (reduce\n   (fn [first second] (if (> first second) first second))\n   col))", "user": "5c48757fe4b0e06e1360a3c3"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (> %1 %2) %1 %2) x xs))", "user": "5c45e703e4b0e06e1360a391"}, {"problem": 38, "code": "(fn [& nums] (last (sort nums)))", "user": "5c3cd80fe4b0d62ef62d9faa"}, {"problem": 38, "code": "(fn get-max [a b & c] (reduce get-max (if(> a b) a b) c))", "user": "5c41db45e4b08cd430848ece"}, {"problem": 38, "code": "#(reduce (fn [x y] (if (> x y) x y)) %&)", "user": "5c4c74efe4b0f9f7a8770e76"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> y x) y x)) args))", "user": "5c512811e4b0fb8c5ffd99c2"}, {"problem": 38, "code": "(fn [& c] (reduce (fn [acc cur] (if (> cur acc) cur acc)) (first c) (next c)))", "user": "5c30da5ae4b0d62ef62d9f23"}, {"problem": 38, "code": "(fn my-max [& coll]\n  (reduce (fn [acc n] (if (< acc n) n acc)) coll))", "user": "5c506951e4b0f9f7a8770ec5"}, {"problem": 38, "code": "(fn [& s]\n  (let [mx (fn [a b]\n             (if (not a)\n               b\n               (if (not b)\n                 a\n                 (if (> a b)\n                   a\n                   b))))\n        impl (fn [s m]\n               (if (empty? s)\n                 m\n                 (recur (rest s) (mx m (first s)))))]\n    (impl s nil)))", "user": "5c50048ae4b0f9f7a8770eb9"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (< % %2) %2 %) x))", "user": "5bc09ebae4b07a9b28b10005"}, {"problem": 38, "code": "(fn [n & rest] (first (sort > (cons n rest))))", "user": "5549ca1ce4b0a04f7929956c"}, {"problem": 38, "code": "(fn mm [& x] (let [ma (fn maa [l ms] (if (empty? l) ms (if (< ms (first l)) (maa (rest l) (first l)) (maa (rest l) ms))))] (ma x (first x))))", "user": "5c54e605e4b0fb8c5ffd9a14"}, {"problem": 38, "code": "(fn [& args]\n  (reduce  \n    (fn [a b]\n      (if (> a b) a b) )\n    args))", "user": "5151e239e4b03e678e393ae2"}, {"problem": 38, "code": "(fn [& args]\n  (letfn [(rfun [maxv v]\n            (if (> v maxv)\n              v\n              maxv))]\n   (reduce rfun args)))", "user": "5773e5b0e4b0979f896515ef"}, {"problem": 38, "code": "(fn [& xs] (last (sort xs)))", "user": "5c57fc9ae4b0fb8c5ffd9a52"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) args))", "user": "5c53127ee4b0fb8c5ffd99ef"}, {"problem": 38, "code": "(fn max_num [& nums] (reduce (fn [x y] (if (> y x) y x)) nums))", "user": "5c52f3fce4b0fb8c5ffd99e9"}, {"problem": 38, "code": "(fn [& rest]\n  (last (sort rest)))", "user": "5c59b836e4b01df32ab73263"}, {"problem": 38, "code": "(fn [& xs]\n  (->> (sort xs)\n       (last)))", "user": "5c435a9fe4b0e06e1360a367"}, {"problem": 38, "code": "(fn [& args]\n  (reduce\n   (fn [a b]\n     (if (> a b) a b))\n   args))", "user": "5bdee4bee4b0ed4b8aab4c67"}, {"problem": 38, "code": "(fn [& lst] (\n           reduce \n           (fn [a b] (if (> a b) \n                              a \n                              b\n                       )\n             )\n           lst\n           )\n  )", "user": "5c59b1d3e4b01df32ab73261"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a c] (if (> a c) a c)) args))", "user": "5c46e6dde4b0e06e1360a3a7"}, {"problem": 38, "code": "(fn [& arg] (loop [x arg\n                   mx 0]\n              (if (empty? x) mx\n                (recur (rest x)\n                       (if (> (first x) mx) (first x) mx)\n                       )\n                )\n              )\n  )", "user": "5c5732c8e4b0fb8c5ffd9a3f"}, {"problem": 38, "code": "(fn calc-max [& args]\n  (last (sort args))\n  )", "user": "5c51d700e4b0fb8c5ffd99d1"}, {"problem": 38, "code": "(fn [& xs] (\n  reduce (fn [x, y] (\n    if (< x y)\n      y\n      x\n  )) xs \n))", "user": "5c3de434e4b0d62ef62d9fb8"}, {"problem": 38, "code": "(fn [fst & lst]\n  (loop [[l & ls] lst mx fst]\n   (if l\n       (if (> l mx) (recur ls l) (recur ls mx))\n       mx)))", "user": "5c51c930e4b0fb8c5ffd99ce"}, {"problem": 38, "code": "(fn f [& s]\n  (reduce (fn [acc s*] (if (> s* acc) s* acc)) (first s) (rest s)))", "user": "577e9aace4b0c8d87281f6ec"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5c5a725ce4b01df32ab73273"}, {"problem": 38, "code": "(fn [& args]\n  (loop [maximum 0\n         nums args]\n    (if-not (empty? nums)\n      (if (> (first nums) maximum)\n        (recur (first nums) (rest nums))\n        (recur maximum (rest nums)))\n      maximum\n      )))", "user": "5b269cf3e4b063e2438bcc35"}, {"problem": 38, "code": "(fn f [& lst]\n  (reduce #(if (> %1 %2) %1 %2) lst))", "user": "5c62979fe4b0fca0c162264c"}, {"problem": 38, "code": "(fn\n  my-max\n  [n & more]\n  (reduce #(if (> %2 %1) %2 %1) n more)\n)", "user": "5c6227fee4b0fca0c1622641"}, {"problem": 38, "code": "(fn [& x]\n   (reduce #(if (> % %2)\n              %\n              %2) x))", "user": "5c5d2e90e4b01df32ab732af"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "5c4ad616e4b0f9f7a8770e5a"}, {"problem": 38, "code": "(fn my-max\n    ([x] x)\n    ([x y] (if (> x y) x y))\n    ([x y & more] (reduce my-max (my-max x y) more)))", "user": "59cd351ee4b0ef0a1e9b5b35"}, {"problem": 38, "code": "(fn [& args]\n  (if (empty? args)\n    nil\n    (reduce (fn [val acc] (if (< val acc) acc val)) (first args) (rest args))\n    )\n  )", "user": "5a89997de4b05369db4d24c4"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "5c6576d6e4b0fca0c1622690"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [x y] \n            (if (> x y)\n              x\n              y)) args))", "user": "5c58736be4b01df32ab73247"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "5c44ad48e4b0e06e1360a37a"}, {"problem": 38, "code": "(fn [& a]\n  (reduce #(if (< %1 %2) %2 %1) a))", "user": "5c68f931e4b0fca0c16226ea"}, {"problem": 38, "code": "(fn [& xs]\n   (letfn [(my-max [x y] (if (> x y) x y))]\n     (reduce my-max (first xs) xs)))", "user": "5c6448d6e4b0fca0c1622674"}, {"problem": 38, "code": "(fn my-max [& args]\n  (loop [cur-max (first args)\n         remain (rest args)]\n    (if (empty? remain)\n      cur-max\n      (if (> (first remain) cur-max)\n        (recur (first remain) (rest remain))\n        (recur cur-max (rest remain))))))", "user": "5c633df2e4b0fca0c162265c"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "58b12635e4b0ebc645576cf4"}, {"problem": 38, "code": "(fn maxVal [n & l] \n ((fn tmp [n l c]\n  (if (empty? l)\n    c\n    (tmp (first l) (rest l) (if (> n c) n c)))) n l n))", "user": "5c6748f0e4b0fca0c16226b6"}, {"problem": 38, "code": "(fn [& args]                                                                                                                                                                       \n  (reduce (fn [m curr]                                                                                                                                                                     \n            (if (> curr m)                                                                                                                                                                 \n              curr                                                                                                                                                                           \n              m))                                                                                                                                                                          \n          args))", "user": "5c6c5964e4b0fca0c162272d"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (< %1 %2) %2 %1) x))", "user": "5c6cb3bfe4b0fca0c1622730"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5c6da283e4b0fca0c162273e"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce #(if (> %1 %2) %1 %2) nums))", "user": "5b94c507e4b0c0b3ffbd4a5a"}, {"problem": 38, "code": "#(reduce (fn [mx item] (if (< mx item) item mx))\n          (first %&) (rest %&))", "user": "5c6d0e51e4b0fca0c1622735"}, {"problem": 38, "code": "(fn [& values] (letfn [(compareValues [x y]\n                        (if (> x y) x y))\n                      (getMax [x]\n                        (reduce compareValues x))]\n                (getMax values)\n                ))", "user": "5c635364e4b0fca0c162265f"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5c664b87e4b0fca0c16226a5"}, {"problem": 38, "code": "(fn f [& s]\n  (reduce (fn [acc s*] (if (> s* acc) s* acc)) (first s) (rest s)))", "user": "5c59749fe4b01df32ab73259"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5c5d8c04e4b01df32ab732b4"}, {"problem": 38, "code": "(fn[& x] (last(sort x)))", "user": "5c683fb5e4b0fca0c16226d5"}, {"problem": 38, "code": "(fn [& nums]\n  (loop [maximum (first nums),\n         remainder (rest nums)]\n    (if (= remainder '())\n      maximum\n      (let [nextnum (first remainder)]\n        (recur (if (> nextnum maximum) nextnum maximum) (rest remainder))))))", "user": "5c6e1006e4b0fca0c1622744"}, {"problem": 38, "code": "(fn [& args]\n  (first\n   (sort > args)))", "user": "5c718e6ce4b0fca0c1622796"}, {"problem": 38, "code": "(fn [& c]\n  (reduce\n   \t(fn [acc e]\n      (if (> e acc) e acc))\n   \tc))", "user": "5c73b8bae4b0fca0c16227ba"}, {"problem": 38, "code": "(fn [& p] (reduce #(if (> %1 %2) %1 %2) (first p) p))", "user": "5c6e8b57e4b0fca0c1622755"}, {"problem": 38, "code": "(fn[& s] (reduce #(if (> %2 %1) %2 %1) s))", "user": "5c6cf34fe4b0fca0c1622732"}, {"problem": 38, "code": "(fn my-max [& params]\n  \"http://www.4clojure.com/problem/38\"\n  (reduce (fn [prev curr]\n            (if (> prev curr)\n\t      prev\n\t      curr))\n          params))", "user": "5c73bcf9e4b0fca0c16227bb"}, {"problem": 38, "code": "(fn\n  [& args]\n  (let [lst (apply list args)]\n    (if (empty? lst)\n      nil\n      (loop [val (first lst)\n             lst (rest lst)]\n        (if (empty? lst)\n          val\n          (if (> (first lst) val)\n            (recur (first lst) (rest lst))\n            (recur val (rest lst))))))))", "user": "5c706232e4b0fca0c162277e"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5c706454e4b0fca0c1622780"}, {"problem": 38, "code": "(fn [& nums] (reduce (fn [a b] (if (> a b) a b)) nums))", "user": "5c5e3af7e4b01df32ab732c6"}, {"problem": 38, "code": "(fn my-max\n  [maximum & remainder]\n  (if (empty? remainder)\n    maximum\n    (recur (if (<= maximum (first remainder))\n             (first remainder)\n             maximum) (rest remainder))))", "user": "5c6e7cc1e4b0fca0c1622752"}, {"problem": 38, "code": "(fn [& numbers] (reduce #(if (< %1 %2) %2 %1) numbers))", "user": "5c78470de4b0fca0c1622820"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) 0 args))", "user": "5c784248e4b0fca0c162281f"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5c787131e4b0fca0c1622825"}, {"problem": 38, "code": "(fn [& nums] (reduce #(if (> %1 %2)\n                              %1 \n                              %2)\n                     -99\n                            nums))", "user": "5c534431e4b0fb8c5ffd99f2"}, {"problem": 38, "code": "#(reduce (fn [x y] (if (< x y) y x)) 0 %&)", "user": "5c792c34e4b0fca0c1622834"}, {"problem": 38, "code": "(fn [& input-seq] (reduce #(if (> %1 %2) %1 %2) 0 input-seq))", "user": "5c723f4be4b0fca0c16227a0"}, {"problem": 38, "code": "(fn [& args]\n   (reduce (fn [x y] \n             (if (> x y)\n               x\n               y)) -99999999 args))", "user": "5c72c2b9e4b0fca0c16227ab"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "56d9f312e4b0ea9b8538f7fa"}, {"problem": 38, "code": "(fn max-val [& sequ]\n  (loop [s sequ mx [-100]]\n    (if (empty? s)\n      (last mx)\n      (recur (rest s) (if (> (first s) (last mx))\n                        (conj mx (first s))\n                        mx)))))", "user": "5c7d5a0ce4b0d597f478caab"}, {"problem": 38, "code": "(fn [first & others] (reduce (fn [maxi curr] (if (< maxi curr) curr maxi)) first others))", "user": "5c76577ae4b0fca0c16227ea"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5b100648e4b0cc2b61a3be17"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5c619df4e4b0fca0c1622637"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "5c8002cde4b0c8042a70ce09"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "5c7ef3f3e4b0d597f478cad7"}, {"problem": 38, "code": "(fn [& params] (reduce #(if (< % %2) %2 %) 0 params))", "user": "5c7bc0a5e4b0fca0c1622865"}, {"problem": 38, "code": "(fn [h & t] (reduce (fn [x y] (if (> x y) x y )) h t))", "user": "5c619cb1e4b0fca0c1622636"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5c26c9b3e4b07e362c2305c5"}, {"problem": 38, "code": "(fn [& args] \n  (reduce (fn [ans new] (if (> new ans) new ans)) 0 args)\n  )", "user": "5c8025d6e4b0c8042a70ce11"}, {"problem": 38, "code": "(fn [& coll]\n  (reduce #(if (< %1 %2)\n             %2\n             %1)\n             0 coll))", "user": "5c813b27e4b0c8042a70ce22"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [n, m] (cond (< n m) m :else n)) args))", "user": "5c7c1d8ee4b0d597f478ca88"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) (flatten (cons x xs))))", "user": "5c7ec850e4b0d597f478cad4"}, {"problem": 38, "code": "#(last(sort %&))", "user": "5c74b043e4b0fca0c16227ce"}, {"problem": 38, "code": "(fn [& varargs] \n  (reduce (fn [x y] (if (> x y) x y))\n          varargs))\n\n; (fn [& args] \n;   (last (sort args)))  ; sa milicarudic", "user": "5839efeae4b089d5ab817d47"}, {"problem": 38, "code": "(fn max2\n  [& args]\n  (first (reverse (sort args))))", "user": "5c7dad57e4b0d597f478caba"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "5c7f7889e4b0d597f478cae0"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5c82db41e4b0c8042a70ce42"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5c70641de4b0fca0c162277f"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5c746c31e4b0fca0c16227c8"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort (seq args))))", "user": "5c748bf5e4b0fca0c16227cb"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5c75a830e4b0fca0c16227e0"}, {"problem": 38, "code": "(fn [& args] (-> args sort last))", "user": "5c8319c3e4b0c8042a70ce45"}, {"problem": 38, "code": "(fn [& args] \n\t(loop [current-max Integer/MIN_VALUE remaining args]\n\t\t(let [[cur & rest] remaining]\n\t\t\t(if (not cur) \n\t\t\t\tcurrent-max\n\t\t\t\t(recur (if (> cur current-max) cur current-max) rest)\n\t\t\t))\n\t\t))", "user": "5c87c79be4b048ec896c591b"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5c7d5463e4b0d597f478caa9"}, {"problem": 38, "code": "#(last(sort %&))", "user": "5c863a81e4b0c8042a70ce8e"}, {"problem": 38, "code": "(fn [& params] (last (sort params)))", "user": "5c7bb8c0e4b0fca0c1622864"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5c7d947be4b0d597f478cab6"}, {"problem": 38, "code": "(fn [& a] (-> a sort last))", "user": "5c81c933e4b0c8042a70ce2d"}, {"problem": 38, "code": "(fn [& l](reduce (fn [a, b] (if (> a b) a b)) l))", "user": "5c852e3ae4b0c8042a70ce78"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5c7c8c72e4b0d597f478ca96"}, {"problem": 38, "code": "(fn [x & args]\n  (last(sort (cons x args))))", "user": "5c7741dce4b0fca0c1622806"}, {"problem": 38, "code": "(fn [& nums]\n(reduce #(if (> %1 %2) %1 %2) nums))", "user": "5c09e555e4b0bdcf453d16fd"}, {"problem": 38, "code": "(fn [& numbers] ((comp last sort) numbers))", "user": "5c87ba4de4b048ec896c591a"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5572e18ee4b09a3098a52549"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5c8ecb58e4b048ec896c59b0"}, {"problem": 38, "code": "(fn [& args] (first (sort >(into [] args))))", "user": "5c7eaadfe4b0d597f478cace"}, {"problem": 38, "code": "(comp last sort list)", "user": "5b22d30ee4b08b1df1c36750"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5c8fd8f3e4b048ec896c59c7"}, {"problem": 38, "code": "(fn [ & c]\n  (reduce #(cond (>= %1 %2) %1 (< %1 %2) %2) c))", "user": "566a0845e4b04acd4f672e05"}, {"problem": 38, "code": "(fn [m & a] \n  (if (empty? a)\n    m \n    (if (> (first a) m)\n      (recur (first a) (rest a))\n      (recur m (rest a)))))", "user": "5c8fa41be4b048ec896c59c1"}, {"problem": 38, "code": "(fn\n  [a & b]\n  (reduce #(if (< %1 %2) %2 %1) (cons a b)))", "user": "5c891afde4b048ec896c5935"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5c91ae79e4b048ec896c59eb"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "5c92105ce4b048ec896c59f7"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce (fn [cur biggest]\n            (if (> cur biggest)\n              cur\n              biggest)) \n          nums))", "user": "5c7c78c9e4b0d597f478ca94"}, {"problem": 38, "code": "(fn [& xs]\n  (last (sort xs)))", "user": "5c896f46e4b048ec896c5940"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [maximum el] (if (> el maximum) el maximum)) (first args) (rest args)))", "user": "5c987160e4b048ec896c5a82"}, {"problem": 38, "code": "(fn [& args]\n          (reduce (fn [mx n] (if (> n mx) n mx)) args))", "user": "5c995fa4e4b048ec896c5a96"}, {"problem": 38, "code": "(fn mymax [x & xs] (if xs (let [y (apply mymax xs)] (if (> x y) x y)) x))", "user": "5bd0ea60e4b0e9689409ee45"}, {"problem": 38, "code": "(fn [& args] (first (reverse (sort args))))", "user": "5c97821be4b048ec896c5a70"}, {"problem": 38, "code": "(fn f [& s]\n  (reduce (fn [acc s*] (if (> s* acc) s* acc)) (first s) (rest s)))", "user": "5c92161de4b048ec896c59f9"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5c9d0a0be4b048ec896c5afc"}, {"problem": 38, "code": "(fn f [& args]\n (reduce\n  #(if (> %2 %1) %2 %1)\n  (first args) args))", "user": "510608ebe4b01150e115ebe3"}, {"problem": 38, "code": "(fn [& s] (last (sort s)))", "user": "58b84c28e4b0ebc645576d94"}, {"problem": 38, "code": "(fn [& x] (-> x\n              sort\n              last))", "user": "5b7a2ce0e4b047b03b203711"}, {"problem": 38, "code": "(fn\n  ([x] x)\n  ([x & xs]\n   (loop [m x\n          [y & ys] xs]\n     (cond\n      (empty? ys) m\n      (> y m) (recur y ys)\n      :else (recur m ys)))))", "user": "5ca14eb1e4b048ec896c5b7d"}, {"problem": 38, "code": "(fn [x & more] (reduce #(if (> %2 %) %2 %) x more))", "user": "5ca19c10e4b048ec896c5b81"}, {"problem": 38, "code": "(fn [& allArgs] (last (sort allArgs)))", "user": "5ca1f8a1e4b048ec896c5b8c"}, {"problem": 38, "code": "(fn [& r] (first (sort > r)))", "user": "5ca04cc3e4b048ec896c5b69"}, {"problem": 38, "code": "#(reduce \n  (fn [m x]\n    (if (> x m)\n      x\n      m))\n  (first %&)\n  (rest %&))", "user": "5c9c79a6e4b048ec896c5ae8"}, {"problem": 38, "code": "(fn [& more]\n  (reduce \n   (fn [acc nxt]\n     (if (> acc nxt) \n       acc \n       nxt))\n     more))", "user": "55dcc26ee4b050e68259b3bc"}, {"problem": 38, "code": "(fn [& lst] (reduce #(if (> %1 %2) %1 %2) lst))", "user": "5c9dcb36e4b048ec896c5b1d"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5c936567e4b048ec896c5a1b"}, {"problem": 38, "code": "(fn [& args]\n  ((fn amax [alist m]\n    (cond \n     (empty? alist) m\n     :else (amax (rest alist) \n                 (if (> (first alist) m) \n                   (first alist)\n                   m)))) args 0))", "user": "5ca3695fe4b048ec896c5ba9"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "5c97b621e4b048ec896c5a74"}, {"problem": 38, "code": "(fn [& args] (first (sort > (mapcat (fn [a] (list (identity a))) args))))", "user": "5c94cbb1e4b048ec896c5a3d"}, {"problem": 38, "code": "(fn [& coll]\n   (reduce #(if (< %1 %2) %2 %1) coll))", "user": "573d27b4e4b05c31a32c080f"}, {"problem": 38, "code": "(fn [& args]\n   (reduce #(if (>= % %2) % %2) args))", "user": "5c950334e4b048ec896c5a44"}, {"problem": 38, "code": "(fn [& x]\n  (reduce #(if (> %1 %2) %1 %2) x))", "user": "55a24698e4b0acc240e31523"}, {"problem": 38, "code": "(fn maximum [& x]\n  (if (= (count x) 1)\n    (first x)\n    (if (> (first x) \n           (last x))\n      (apply maximum (butlast x))\n      (apply maximum (rest x)))))", "user": "5c538cb5e4b0fb8c5ffd99fb"}, {"problem": 38, "code": "(fn imax [_f & _r]\n (loop [f_ _f r_ _r] \n   (if (empty? r_) f_ \n     (if (> f_ (first r_)) \n         (recur f_ (rest r_))\n         (recur (first r_) (rest r_))))))", "user": "5b9ae606e4b0c0b3ffbd4af2"}, {"problem": 38, "code": "(fn [& x] (first (reverse (sort x))))", "user": "5cae53fbe4b026601754b885"}, {"problem": 38, "code": "(fn [ & vals ] (reduce (fn [x y] (if (> x y) x y)) vals))", "user": "5cab33e7e4b048ec896c5c48"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5ca1c45ae4b048ec896c5b85"}, {"problem": 38, "code": "(fn q38 [& args]\n  (reduce (fn [m value] (if (> value m) value m)) 0 args))", "user": "5cab0ad9e4b048ec896c5c46"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5c9d0f76e4b048ec896c5aff"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57012fede4b08d47c97781d2"}, {"problem": 38, "code": "(fn [& s]\n  (reduce (fn [acc sec] (if (> sec acc) sec acc)) (first s) (rest s)))", "user": "5cada3b8e4b026601754b872"}, {"problem": 38, "code": "(fn [& nums] (\n    (fn [nums largest] (\n      if \n      (empty? nums)\n      largest\n      (recur (rest nums) (if (> (first nums) largest) (first nums) largest))\n    )) \n    (rest nums) \n    (first nums)\n    ))", "user": "5cb47a0fe4b026601754b91b"}, {"problem": 38, "code": "(fn [& coll]\n  (last (sort coll)))", "user": "5c9419fae4b048ec896c5a2b"}, {"problem": 38, "code": "(fn m\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] (reduce #(if (> %1 %2) %1 %2) (m x y) more)))", "user": "5caf9cace4b026601754b89b"}, {"problem": 38, "code": "(fn [& nums]\n  (loop [num1 (first nums)\n         numrest (rest nums)] \n    (println numrest)\n    (if (<= (count numrest) 0) \n      num1\n      (recur (if (> num1 (first numrest)) num1 (first numrest)) (rest numrest)))))", "user": "5cb11a72e4b026601754b8c6"}, {"problem": 38, "code": "#(first (reverse (apply sorted-set %&)))", "user": "5cb6256ce4b026601754b947"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5b507222e4b02d533a91bce7"}, {"problem": 38, "code": "(fn [& nums] (reduce #(if (> %1 %2) %1 %2) 0 nums))", "user": "5cb41c40e4b026601754b911"}, {"problem": 38, "code": "(fn [& col] (first (sort > col)))", "user": "5cb39440e4b026601754b903"}, {"problem": 38, "code": "(fn [& x]  (last (sort (apply list x)))\n  )", "user": "5c9b848fe4b048ec896c5acf"}, {"problem": 38, "code": "(fn [& x]  (last (sort (apply list x)))\n )", "user": "5cb71f35e4b026601754b961"}, {"problem": 38, "code": "(fn [x & y]\n   (reduce \n    (fn [a b] (if (> a b) a b))\n    x y))", "user": "5cb3a8c3e4b026601754b904"}, {"problem": 38, "code": "(fn [& args]\n  \t(reduce (fn [a b] (if (>= a b) a b)) (dec (first args)) args))", "user": "5cb556f9e4b026601754b934"}, {"problem": 38, "code": "(fn [& args] (reduce #(if(> %1 %2) %1 %2) args))", "user": "5ca7b5bbe4b048ec896c5c04"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %2 %1) %2 %1) xs))", "user": "5a09ebf8e4b0eab8c0448932"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "5cb4e764e4b026601754b929"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5cbeadf2e4b0ccb061962755"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [acc it] (if (> acc it) acc it)) 0 args))", "user": "5cbdc591e4b026601754ba00"}, {"problem": 38, "code": "(fn [& params]\n  (reduce (fn [a b] (if (> a b) a b)) 0 params))", "user": "5cae5247e4b026601754b884"}, {"problem": 38, "code": "(fn maxx [a & m]\n  (loop [mx a\n        rst m]\n    (if (empty? rst) mx\n    (if (< mx (first rst)) \n      (recur (first rst) (rest rst))\n      (recur mx (rest rst))\n      ))\n  ))", "user": "56d5c1b0e4b0ea9b8538f7c3"}, {"problem": 38, "code": "(fn [& rest]\n  (first\n   (reverse\n    (sort rest))))", "user": "5cb62652e4b026601754b949"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce\n   #(if (> %2 %1) %2 %1)\n   xs))", "user": "5cbc9dace4b026601754b9eb"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "5b007e46e4b0cc2b61a3bd3c"}, {"problem": 38, "code": "#(reduce (fn [m n] (if (> n m) n m)) (seq %&))", "user": "5c547cf0e4b0fb8c5ffd9a0b"}, {"problem": 38, "code": "(fn maxx ([x] x)\n         ([x y] (if(> x y) x y))\n         ([x y & more] (reduce maxx (maxx x y) more))\n  )", "user": "5cbd5b42e4b026601754b9f6"}, {"problem": 38, "code": "(fn [& arg] (last (sort arg)))", "user": "5cbfa589e4b0ccb061962774"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "5c87d2cbe4b048ec896c591c"}, {"problem": 38, "code": "(fn[x & re] (reduce (fn[a b] (if (> a b) a b)) (cons x re)))", "user": "5cc6f982e4b0ccb06196282d"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5cc7342be4b0ccb061962830"}, {"problem": 38, "code": "#(first (sort > %&))", "user": "5cc80598e4b0ccb061962840"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5c73a944e4b0fca0c16227b8"}, {"problem": 38, "code": "(fn [& values]\n  (loop [m (first values)\n         left (rest values)]\n    (if (empty? left) \n      m\n      (recur (if (> (first left) m)\n               (first left) \n               m)\n               (rest left)))))", "user": "5cc7073de4b0ccb06196282e"}, {"problem": 38, "code": "(fn [& x] \n  (reduce \n   #(if (> %1 %2) %1 %2) \n   x\n  )\n)", "user": "5cb0f70ce4b026601754b8c1"}, {"problem": 38, "code": "(fn a [& l]\n  (last (vec (sort l))))", "user": "5caa5e42e4b048ec896c5c35"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "5cc75ffce4b0ccb061962836"}, {"problem": 38, "code": "(fn [& c] (reduce #(if (> %1 %2) %1 %2) c))", "user": "4fbe2cfbe4b081705acca30c"}, {"problem": 38, "code": "(fn [& y] (* -1 (apply min (map (fn [x] (* -1 x)) y))))", "user": "5ccb3792e4b0ccb061962882"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) 0 args))", "user": "5cc6b4bfe4b0ccb061962827"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [mx y] (if (> y mx) y mx)) 0 args))", "user": "5cc77807e4b0ccb061962838"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "52d81642e4b09f7907dd1387"}, {"problem": 38, "code": "(fn [& a] (last (sort a)))", "user": "5cc7692ce4b0ccb061962837"}, {"problem": 38, "code": "(fn [& x]\n  (last (sort x)))", "user": "5cc28739e4b0ccb0619627d8"}, {"problem": 38, "code": "(fn [& test] (reduce (fn [m x] (if (> x m) x m)) test))", "user": "5ccb0bbee4b0ccb06196287c"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "5cc4b34de4b0ccb061962805"}, {"problem": 38, "code": "#(- (apply min (map - %&)))", "user": "5ccf21c4e4b0ccb0619628c1"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5a9bfd57e4b0d174b936c7d0"}, {"problem": 38, "code": "(fn [& vals]\n  (loop [cur (first vals)\n         values (rest vals)]\n    (if (empty? values)\n      cur\n      (recur (if (> cur (first values))\n               cur\n               (first values))\n             (rest values)))))", "user": "574c3d4ee4b02ea11479921a"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5cd07885e4b0ccb0619628d4"}, {"problem": 38, "code": "#(last (sort %&) )", "user": "5ccf3879e4b0ccb0619628c4"}, {"problem": 38, "code": "(fn [& args] (loop [l args, maxno (first args)] (if (empty? l)\n           maxno \n           (if (> maxno (first l) )(recur (rest l) maxno)\n(recur (rest l) (first l))\n                ))))", "user": "5cd127bce4b0ccb0619628e1"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5cccac42e4b0ccb06196289d"}, {"problem": 38, "code": "#(last (sort%&))", "user": "5cd1b297e4b0ccb0619628f1"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5cc1f975e4b0ccb0619627c8"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5cd1f5dae4b0ccb0619628f7"}, {"problem": 38, "code": "#(last (sort  %&))", "user": "5c5d9510e4b01df32ab732b5"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [acc prev]\n            (if (> acc prev)\n              acc\n              prev))\n          args))", "user": "5bacef6fe4b0a20761a234a1"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [result item]\n            (if (> item result)\n              item\n              result)) args))", "user": "5ccc2a03e4b0ccb06196288f"}, {"problem": 38, "code": "(fn [& coll]\n  (reduce \n   (fn [x y] \n     (if (> x y) \n       x \n       y)) \n   coll))", "user": "5cbb0436e4b026601754b9cc"}, {"problem": 38, "code": "#(reduce (fn [x y] (if (> x y) x y)) %&)", "user": "5cce7de4e4b0ccb0619628b7"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5cc6b681e4b0ccb061962828"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) 0 x))", "user": "592bb806e4b072a2710fcf46"}, {"problem": 38, "code": "(fn [& r] (-> r sort last))", "user": "5cd99bebe4b05ee0cb311707"}, {"problem": 38, "code": "#(-> %& \n       sort \n       reverse \n       first)", "user": "5ca2ca9fe4b048ec896c5b9c"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [acc n] (if (> n acc) n acc)) (first args) (rest args)))", "user": "5cd9dc85e4b05ee0cb31170d"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [acc elem] (if (> acc elem) acc elem))\n   args))", "user": "50eb4c32e4b0346a3e988cbf"}, {"problem": 38, "code": "(fn [& arg]\n  (loop [li arg\n         r 0]\n    (cond\n      (empty? li) r\n      (>= r (first li)) (recur (rest li) r)\n      (< r (first li)) (recur (rest li) (first li))\n     )))", "user": "5ac9c737e4b0e27600da77d2"}, {"problem": 38, "code": "(fn valorMaximo [& num]\n  (let [x (atom (first num))]\n    (doseq [i num] (if (> i @x) (reset! x i)) ) @x))", "user": "5cd98fdae4b05ee0cb311702"}, {"problem": 38, "code": "#(reduce (fn [x y]\n           (if (> x y) x y))\n         0 %&)", "user": "5cd639b4e4b0ccb061962940"}, {"problem": 38, "code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) coll))", "user": "5cdd934ce4b05ee0cb311761"}, {"problem": 38, "code": "(comp first reverse sort list)", "user": "5cdfe2aee4b0a17bb84e2b04"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [curr x]\n            (if (> curr x)\n              curr\n              x))\n          (first args)\n          (rest args)))", "user": "5ce077e9e4b0a17bb84e2b0c"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) (flatten (cons x xs))))", "user": "5cdd473ae4b05ee0cb311757"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2)\n             %1\n             %2\n             ) args)\n  )", "user": "5cdbb1b2e4b05ee0cb311732"}, {"problem": 38, "code": "(fn [& xs]\n    (reduce #(if (< %1 %2) %2 %1) xs)\n    )", "user": "5cd4c3dae4b0ccb061962925"}, {"problem": 38, "code": "(fn [x & xs] \n   (reduce #(if (> %1 %2) %1 %2) x xs))", "user": "5ce05561e4b0a17bb84e2b08"}, {"problem": 38, "code": "#(first(reverse(sort %&)))", "user": "5cd4e1b2e4b0ccb061962927"}, {"problem": 38, "code": "(fn [& nums] (last(sort nums)))", "user": "5ce2afe8e4b0a17bb84e2b2b"}, {"problem": 38, "code": "(fn [& vals]\n   (last (sort vals))\n   )", "user": "5cdd7157e4b05ee0cb31175b"}, {"problem": 38, "code": "(fn my-max\n  ([a] a)\n  ([a b] (if (> a b)\n           a\n           b))\n  ([a b & others] (my-max (my-max a b) (apply my-max others))))", "user": "5ce3bcd6e4b0a17bb84e2b43"}, {"problem": 38, "code": "(fn [& params]\n  (reduce\n   (fn [x y]\n     (if (< x y) y x))\n   params))", "user": "5ce2bf8ee4b0a17bb84e2b2e"}, {"problem": 38, "code": "(fn [& body]\n  (reduce #(if (< %2 %1) %1 %2) body) \n)", "user": "5ce41d1be4b0a17bb84e2b50"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "user": "5ce3e239e4b0a17bb84e2b46"}, {"problem": 38, "code": "(fn [& res] (last (sort res)))", "user": "528111d4e4b0757a1b17141d"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [x y] (if (> x y) x y)) xs))", "user": "5cdc08a2e4b05ee0cb31173a"}, {"problem": 38, "code": "(fn [x & args]\n  (loop [loput args, isoin x]\n    (if (empty? loput)\n      isoin\n      (if (> isoin (first loput))\n        (recur (rest loput) isoin)\n        (recur (rest loput) (first loput))))))", "user": "5ce52271e4b0a17bb84e2b69"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %2 %1) %2 %1) xs))", "user": "4f847f0ee4b033992c121c33"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %2 %1) %2 %1) args))", "user": "5ce2b15fe4b0a17bb84e2b2c"}, {"problem": 38, "code": "(fn [& n]\n  (loop [maxi 0\n         n n]\n    (if (not (= (count n) 0 ))\n      (do\n        (if (> (first n) maxi)\n          (recur (first n) (drop 1 n)) \n          (recur maxi (drop 1 n))\n        )\n      )\n    maxi\n    )\n  )\n)", "user": "5ce44ee2e4b0a17bb84e2b57"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5c967845e4b048ec896c5a60"}, {"problem": 38, "code": "(fn[& xs](reduce (fn[r x](if(> x r)x r)) xs))", "user": "5ce62d8ee4b0a17bb84e2b83"}, {"problem": 38, "code": ";; or #(last (sort %&))\n(fn [& rest] (first (sort > rest)))", "user": "5c925cb3e4b048ec896c5a05"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5ce78776e4b0a17bb84e2ba2"}, {"problem": 38, "code": "#(reduce (fn [maxi item] (if (< maxi item) item maxi)) 0 %&)", "user": "5ce56455e4b0a17bb84e2b71"}, {"problem": 38, "code": "(fn getmax\n   [curr & therest]\n   (if (= 0 (count therest))\n     curr\n     (if (> curr (first therest))\n       (apply getmax curr (rest therest))\n       (apply getmax (first therest) (rest therest))\n       )\n     )\n   )", "user": "5cd67eb2e4b0ccb061962943"}, {"problem": 38, "code": "(fn maxim [& digits]\n   (last (sort digits)))", "user": "5cd06cfbe4b0ccb0619628d2"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5cda72ffe4b05ee0cb311714"}, {"problem": 38, "code": "(fn [& xs] (-> xs sort last))", "user": "5cebdfd4e4b0a17bb84e2be9"}, {"problem": 38, "code": "(fn [& args] (last (sort (seq args))))", "user": "4f925791e4b0dcca54ed6cac"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5baaae06e4b0a20761a23464"}, {"problem": 38, "code": "(fn [& lst] (reduce #(if (> %1 %2) %1 %2) lst))", "user": "5cebafbbe4b0a17bb84e2be6"}, {"problem": 38, "code": "(fn [& xs]\n  (letfn [(maxval [lst]\n                (maxval' (rest lst) (first lst)))\n        (maxval' [lst m]\n                 (if (seq lst)\n                   (if (> (first lst) m) \n                     (recur (rest lst) (first lst))\n                     (recur (rest lst) m))\n                   m))]\n  (maxval xs)))", "user": "5ce6f93be4b0a17bb84e2b99"}, {"problem": 38, "code": ";(fn[& x] (last (sort x)))\n\n(fn [& x] (reduce #(if(> %2 %1) %2 %1) x))", "user": "5ceef51ee4b0aaa82f1129e9"}, {"problem": 38, "code": "#(loop [x -1, s %&]\n       (if (nil? s)\n           x\n         (if (< x (first s))\n             (recur (first s) (next s))\n           (recur x (next s)))))", "user": "5cee521ce4b0aaa82f1129dd"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5c665311e4b0fca0c16226a7"}, {"problem": 38, "code": "(fn[& x] (last(sort x)))", "user": "5cf1438be4b0aaa82f112a0d"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "5ce97826e4b0a17bb84e2bc0"}, {"problem": 38, "code": "#(reduce (fn [x y] (if (< x y) y x)) -1 %&)", "user": "5cece5a2e4b0a17bb84e2bfb"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5cee4bc9e4b0aaa82f1129dc"}, {"problem": 38, "code": "(fn [ & l] (last (sort l)))", "user": "5cead199e4b0a17bb84e2bd4"}, {"problem": 38, "code": "#(first (reverse (sort %&)))", "user": "5cf1d9e3e4b0aaa82f112a18"}, {"problem": 38, "code": "#(first (sort > %&))", "user": "5cf115eee4b0aaa82f112a08"}, {"problem": 38, "code": "(fn aux [& args] \n (letfn [(my-max [l]\n                 (loop [rl (rest l) acc (first l)]\n                  (if (empty? rl)\n                   acc\n                   (recur (rest rl) (if (< acc (first rl)) (first rl) acc)))))]\n        (my-max args)))", "user": "5bcf95ace4b0e9689409ee2e"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) (vec args)))", "user": "5c3440fee4b0d62ef62d9f50"}, {"problem": 38, "code": "(fn f [& s] (first (sort > s)))", "user": "511b81c3e4b07ab9ec456183"}, {"problem": 38, "code": "(fn [& args]\n    (reduce (fn [arg1 arg2] (if (> arg2 arg1) arg2 arg1)) args)\n    )", "user": "5bf9d9b7e4b0bdcf453d15c4"}, {"problem": 38, "code": "(fn [& args] \n  (loop [best (first args) cur (first args) r (rest args)]\n\t(if (empty? r)\n      best\n      (if (> cur best)\n      \t(recur cur (first r) (rest r))\n        (recur best (first r) (rest r))))))", "user": "5ce56db6e4b0a17bb84e2b72"}, {"problem": 38, "code": "(fn max-value [x & xs]\n  (reduce (fn [x y] (if (pos? (.compareTo y x)) y x)) x xs))", "user": "5cf68580e4b0b71b1d808a5a"}, {"problem": 38, "code": "(fn [& var-args] (last (sort var-args)))", "user": "5ce36e02e4b0a17bb84e2b3e"}, {"problem": 38, "code": "(fn [& args] (first (reverse (sort args))))", "user": "5cf8864be4b0b71b1d808a84"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5cf5775ce4b087f62be35a98"}, {"problem": 38, "code": ";(\n (fn [& vs]\n  (reduce \n   (fn [acc e]\n     (if (> e acc) \n       e acc))\n   (first vs)\n   vs))\n  \n; 1 8 3 4)", "user": "5b38d2f3e4b02d533a91bbaf"}, {"problem": 38, "code": "(fn [& xs] (-> xs sort last))", "user": "5cf4094be4b0aaa82f112a35"}, {"problem": 38, "code": "#(first (sort > %&))", "user": "5cd16529e4b0ccb0619628e7"}, {"problem": 38, "code": "(fn maxim [& args]\n  (reduce (fn [acc e] (if (> e acc) e acc)) args)\n  )", "user": "5cfd5a93e4b0cc9c91588168"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (< %1 %2) %2 %1) xs))", "user": "5cf935f4e4b0b71b1d808a8f"}, {"problem": 38, "code": "(fn \n  [mx & other]\n  (println mx other)\n  (if (empty? other) mx\n  (let [current (first other)\n        new_mx (if (> mx current) mx current)]\n     (recur new_mx (rest other)))))", "user": "5cf863c4e4b0b71b1d808a80"}, {"problem": 38, "code": "(fn [& v]\n  (-> v\n      sort\n      last))", "user": "5cf62ecce4b087f62be35aa7"}, {"problem": 38, "code": "(fn [& args] \n\t(last (sort args))\n  )", "user": "5cd5ac3ae4b0ccb061962937"}, {"problem": 38, "code": "(fn [& params] (reduce (fn [acc el] (if (> el acc) el acc)) 0 params))", "user": "5bff74a2e4b0bdcf453d162b"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5ce91641e4b0a17bb84e2bb6"}, {"problem": 38, "code": "(fn [& args] (last( sort args)))", "user": "5cbef48ee4b0ccb06196275c"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5cf8e426e4b0b71b1d808a88"}, {"problem": 38, "code": "(comp last sort list)", "user": "5d01fb3ce4b0cc9c915881b5"}, {"problem": 38, "code": "(fn f [& s]\n  (reduce (fn [acc s*] (if (> s* acc) s* acc)) (first s) (rest s)))", "user": "5cfa344de4b0cc9c9158813c"}, {"problem": 38, "code": "(fn [& a] (reduce #(if(> %1 %2) %1 %2) a))", "user": "5cec2b79e4b0a17bb84e2bf4"}, {"problem": 38, "code": "(fn [& args] \n  (reduce (fn [x y] \n              (if (> x y) \n                x \n                y))\n          args)\n)", "user": "5cf62f9be4b087f62be35aa8"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "user": "5d03b2c4e4b0cc9c915881ca"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5ceedd7ae4b0aaa82f1129e4"}, {"problem": 38, "code": "(fn [& s]\n  (reduce (fn [acc s] (if (> s acc) s acc)) (first s) (rest s)))", "user": "5032089de4b000fc67a99a85"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %2 %1) %2 %1) xs))", "user": "5cdc17d0e4b05ee0cb31173c"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5cfeacb7e4b0cc9c9158817d"}, {"problem": 38, "code": "(fn [& args]\n  (loop [i 0 result 0]\n    (if (= i (dec (count args)))\n      result\n      (recur (inc i)\n             (if (< result (nth args i))\n               (nth args i)\n               result))\n      ))\n  )", "user": "5d03944de4b0cc9c915881c5"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5cd47c26e4b0ccb06196291e"}, {"problem": 38, "code": "(fn [& more] ( reduce #(if (< %1 %2) %2 %1) more))", "user": "59dfb8f9e4b08badc2a0c4db"}, {"problem": 38, "code": "(fn [& s] (reduce #(if (> % %2) % %2) s))", "user": "5d05fdece4b0cc9c915881e8"}, {"problem": 38, "code": "(fn [a & r] (last (sort (conj r a))))", "user": "5d06499ae4b0cc9c915881ec"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "5c3f29d4e4b08cd430848e8f"}, {"problem": 38, "code": "(fn [x & ops]\n  (loop [x x\n         xs ops]\n    (if (empty? xs)\n      x\n      (recur \n       (if (< x (first xs))\n         (first xs)\n         x)\n       (rest xs)))))", "user": "5c34f7efe4b0d62ef62d9f5b"}, {"problem": 38, "code": "(fn myfun [& args] (reduce (fn [a b] (if (> a b) a b)) Integer/MIN_VALUE (vec args)))", "user": "5ca03402e4b048ec896c5b68"}, {"problem": 38, "code": "#((fn maxx [[h & t] v] (if (empty? t) (if (>= h v) h v) (if (>= h v) (maxx t h) (maxx t v)))) %& %1)", "user": "5d0aab50e4b0cc9c91588220"}, {"problem": 38, "code": "(fn [& args] (loop [seq (seq args), i (- (count seq) 1), maximum (nth seq 0)]\n                              (if (zero? i)\n                                maximum\n                                (recur (rest seq) (dec i) (if (> maximum (nth seq 0))\n                                                            maximum\n                                                            (nth seq 0)\n                                                            )\n                                       )\n                                )\n                              )\n                 )", "user": "5cf72682e4b0b71b1d808a68"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5d0859fbe4b0cc9c91588208"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5cf68090e4b0b71b1d808a59"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [x y]\n            (if (> x y)\n              x\n              y))\n          args))", "user": "5d0b210ee4b0cc9c9158822b"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5d03977ee4b0cc9c915881c7"}, {"problem": 38, "code": "(fn [& n2] (reduce #(if (> %1 %2) %1 %2) \n           n2))", "user": "5d0815b3e4b0cc9c91588201"}, {"problem": 38, "code": "(fn [element & others] (reduce #(if (> %1 %2) %1 %2) (conj others element)))", "user": "5d09dffbe4b0cc9c9158821c"}, {"problem": 38, "code": "(fn [& vals] (last (sort vals)))", "user": "5c9b07cde4b048ec896c5abd"}, {"problem": 38, "code": "(fn mmax [& args]\n  (if (<= (count args) 1)\n    (first args)\n    (if (<= (first args) (first (rest args)))\n      (recur (rest args))\n      (recur (concat [(first args)]\n                     (rest (rest args)))))))", "user": "56a2777be4b0542e1f8d14bf"}, {"problem": 38, "code": "(fn [& xs]\n (reduce\n  (fn [acc curr]\n    (if (< acc curr)\n        curr\n        acc))\n  xs))", "user": "5d0e9931e4b0cc9c91588258"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5d0c38d7e4b0cc9c9158823d"}, {"problem": 38, "code": "#(reduce \n  (fn [a b] (if (> a b) a b))\n  %1\n  %&)", "user": "5cfee28de4b0cc9c91588185"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "5a08f951e4b01bb0ae8afdfd"}, {"problem": 38, "code": "(fn [& s] (reduce #(if (> %2 %1) %2 %1) s))", "user": "59ff4ba2e4b01bb0ae8afd1d"}, {"problem": 38, "code": "(fn max' [& s]\n  (reduce\n    (fn [acc curr]\n      (if (> curr acc)\n        curr\n        acc))\n    s))", "user": "5d0eed51e4b0cc9c91588262"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5d0e311de4b0cc9c91588251"}, {"problem": 38, "code": ";; The issue here is how to send a variable number of arguments to a lambda expression\n;; that is done by the %& idiom inside the #(...) definition\n#(last(sort %&))", "user": "5d0eda66e4b0cc9c9158825f"}, {"problem": 38, "code": "(fn [& aseq]\n  (reduce (fn [m x] (if (< x m) m x)) aseq))", "user": "5d110abee4b02c15ef021983"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "5d02fe44e4b0cc9c915881c0"}, {"problem": 38, "code": "(comp last sort list)", "user": "5ba54642e4b0a20761a233f8"}, {"problem": 38, "code": "(fn [& coll]\n  (loop [m 0\n         numbers coll]\n    (if (empty? numbers)\n      m\n      (recur (if (> (first numbers) m)\n               (first numbers)\n               m)\n             (rest numbers)))))", "user": "4e586949535d8a8b8723a292"}, {"problem": 38, "code": "(fn [& args](last (sort args)))", "user": "5d148581e4b0902706380dc6"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5d132412e4b02c15ef0219a6"}, {"problem": 38, "code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) s))", "user": "5d1380cbe4b0902706380dba"}, {"problem": 38, "code": "(fn xdr\n      [& args]\n      (reduce #(if (> %1 %2) %1 %2) args))", "user": "54be9b81e4b0ed20f4ff6ef1"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5ce5b43be4b0a17bb84e2b7a"}, {"problem": 38, "code": "(fn [& s] \n  (reduce (fn [c n] (if (> n c) n c)) s))", "user": "5ce867fce4b0a17bb84e2baf"}, {"problem": 38, "code": "(fn [& numbers] (first (reverse (sort numbers))))", "user": "5d18d327e4b0902706380dff"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5c371f5be4b0d62ef62d9f72"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "5d10c1a8e4b04b4faecf4449"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "5d1bbef0e4b02ea6f0fb6984"}, {"problem": 38, "code": "(fn\n  [& nums]\n  (reduce (fn [m n]\n            (if (> n m)\n              n\n              m))\n          0\n          nums))", "user": "570c8ac3e4b0b0fb43fd06ca"}, {"problem": 38, "code": ";;(fn biggest \n ;; ([& numbers] (biggest 0 numbers))\n ;; ([big-num numbers]\n ;;  \t(if (empty? numbers)\n ;;  \t\tbig-num\n ;;  \t\t(if (> big-num (first numbers)) \n ;;   \t\t(biggest big-num (rest numbers))\n ;;   \t\t(biggest (first numbers) (rest numbers))\n ;; \t\t)\n;;\t)\n;;  )\n;;)\n\n(fn biggest \n  ([& numbers] (last (sort numbers)))\n)\n\n;;#(last(sort $&))\n   \n;;(fn my-count \n  ;;([seq] (my-count seq 0))\n;;  ([seq accumulating-count]\n   ;;(if (empty? seq)\n    ;; accumulating-count\n    ;; (my-count (rest seq) (+ 1 accumulating-count)))))", "user": "5d1b2a1ee4b02ea6f0fb6979"}, {"problem": 38, "code": "#(last(sort %&))", "user": "5d1b59abe4b02ea6f0fb697e"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5d1bcf6ae4b02ea6f0fb6985"}, {"problem": 38, "code": "(fn [& l] (reduce #(if (> %1 %2) %1 %2) (dec (first l)) l))", "user": "5d1e19c4e4b02ea6f0fb69af"}, {"problem": 38, "code": "(fn [f & r] (reduce #(if (> %1 %2) %1 %2) f r))", "user": "5d20677be4b02ea6f0fb69d3"}, {"problem": 38, "code": "(fn[& args]\n  (reduce\n   (fn[largest x] (if (> largest x) largest x))\n   (first args)\n   args))", "user": "5ccf99fbe4b0ccb0619628c8"}, {"problem": 38, "code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) coll))", "user": "5d2201b8e4b02ea6f0fb69ed"}, {"problem": 38, "code": "(fn [& sq] (reduce (fn [a b] (if (> a b)  \na  \nb))  \nsq))", "user": "5d046f7ce4b0cc9c915881d5"}, {"problem": 38, "code": "(fn [& xs] \n  (reduce \n   (fn [x y] (if (> x y) x y)) \n   xs))", "user": "5d217b1de4b02ea6f0fb69e6"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (nil? %1)\n             %2\n             (if (> %1 %2)\n               %1\n               %2))\n          nil\n          args))", "user": "5d231255e4b02ea6f0fb69fe"}, {"problem": 38, "code": "(fn my-max\n  ([fst] fst)\n  ([fst snd] (if (> fst snd) fst snd))\n  ([fst snd & rst] (apply my-max (my-max fst snd) rst)))", "user": "5d236215e4b02ea6f0fb6a09"}, {"problem": 38, "code": "(fn f [& s]\n  (reduce (fn [acc s*] (if (> s* acc) s* acc)) (first s) (rest s)))", "user": "5d244a0fe4b02ea6f0fb6a1d"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5bc2df19e4b07a9b28b10038"}, {"problem": 38, "code": "(fn [& all] (last (sort all)))", "user": "5d1c14cde4b02ea6f0fb698a"}, {"problem": 38, "code": "(fn max-fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "5c78a3eae4b0fca0c1622829"}, {"problem": 38, "code": ";;(fn [& args] (last (sort args)))\n\n(fn [& args]\n  (loop [ls args mx 0]\n    (if (empty? ls)\n      mx\n      (recur (rest ls) \n      \t     (if (> (first ls) mx) \n      \t     \t(first ls) mx)))))", "user": "5d125d63e4b02c15ef021999"}, {"problem": 38, "code": "(fn find_max2 [& arr] (reduce #(if (> %1 %2) %1 %2) arr) )", "user": "5d1cf523e4b02ea6f0fb6994"}, {"problem": 38, "code": "(fn [& vars]\n  (reduce (fn [a b] \n            (if (> a b)\n              a\n              b)) vars))", "user": "5cf895efe4b0b71b1d808a85"}, {"problem": 38, "code": "(fn nicola [& body]\n  (reduce (fn [a b]\n            (if (> a b)\n              a\n              b)) body))", "user": "5cfabf53e4b0cc9c91588148"}, {"problem": 38, "code": "#(reduce (fn [maybe-max next]\n            (if (> next maybe-max)\n              next\n              maybe-max))\n          (first %&)\n          %&)", "user": "5d1be50ce4b02ea6f0fb6986"}, {"problem": 38, "code": "(fn [& numbers]\n  (reduce\n    #(if (> %1  %2) %1 %2)\n    numbers))", "user": "5b99554ae4b0c0b3ffbd4ace"}, {"problem": 38, "code": "(fn [a & the-rest]\n  (let [arg-vec (conj the-rest a)\n        max-val (last (sort arg-vec))]\n    max-val))", "user": "5abc3797e4b073f1774426e4"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5d272077e4b092dab7f59c64"}, {"problem": 38, "code": ";(fn [a & rest]\n;   (reduce #(if (> %1 %2)\n;              %1\n;              %2) a rest))\n#(last (sort %&))", "user": "5d0beecee4b0cc9c91588239"}, {"problem": 38, "code": "#(reduce (fn [e1 e2] (if (> e1 e2) e1 e2)) 0 %&)", "user": "5d25abc9e4b02ea6f0fb6a37"}, {"problem": 38, "code": "(fn foo [& args]\n  (loop [col args max-num (first col)]\n    (if(empty? col)\n      max-num\n      (let [new-col (rest col) item (if-not (empty? new-col)  (first new-col) 0) ]\n        (recur new-col (if(> item max-num) item max-num))\n        )\n      )\n    )\n  )", "user": "5d270111e4b092dab7f59c62"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "user": "5d138119e4b0902706380dbb"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce (fn [a b] (if (< a b) b a)) x xs))", "user": "5d27da09e4b092dab7f59c75"}, {"problem": 38, "code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) more))", "user": "5d267c11e4b02ea6f0fb6a41"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) (first args) args))", "user": "5d29c06be4b01671435dbc6b"}, {"problem": 38, "code": "(fn [& s] (reduce (fn [acc s*] (if (> acc s*) acc s*)) (first s) (rest s)))", "user": "5d13f783e4b0902706380dc1"}, {"problem": 38, "code": "(fn [& ns] (reduce #(if (> % %2) % %2) ns))", "user": "58dde189e4b0a4d5acaab6dd"}, {"problem": 38, "code": "(fn f [& s]\n(reduce (fn [acc s*] (if (> s* acc) s* acc)) (first s) (rest s)))", "user": "5d29d837e4b01671435dbc6c"}, {"problem": 38, "code": "(fn [& args]\n      (last (sort args)))", "user": "576a42e6e4b0a07e8fc1810e"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5d27cf23e4b092dab7f59c74"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "user": "5d2bfb68e4b01671435dbc86"}, {"problem": 38, "code": "#(first (sort > %&))", "user": "5d21b91ee4b02ea6f0fb69e9"}, {"problem": 38, "code": "(fn my-max [& args]\n  (reduce (fn [f s]\n            (if (> f s) \n              f \n              s))\n          args))", "user": "5d247902e4b02ea6f0fb6a24"}, {"problem": 38, "code": "(fn [& x] (reduce #(/ (+ %1 %2 (Math/abs (- %1 %2))) 2) x))", "user": "5d2ca236e4b01671435dbc94"}, {"problem": 38, "code": "(fn find-max [cur & [x & xs]]\n  (if (nil? x) cur\n    (let [greater (if (> cur x) cur x)]\n      (if (nil? xs) \n        greater\n        (apply find-max (conj xs greater))))))", "user": "5c12b41ce4b01240ff567195"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5d28222ee4b092dab7f59c7a"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce (fn [res n]\n            (if (> n res)\n              n\n              res))\n          nums))", "user": "56fee925e4b08d47c97781b7"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [m n] (if (> m n) m n)) args))", "user": "5d1e37e2e4b02ea6f0fb69b1"}, {"problem": 38, "code": "(fn [& a] (reduce (fn [y x] (if (> x y) x y)) a))", "user": "51bd78c3e4b0ff155d51d2b0"}, {"problem": 38, "code": "(fn [& args]\n    (reduce (fn [x y] (if (> y x) y x)) args)\n    )", "user": "5d301c95e4b01671435dbcca"}, {"problem": 38, "code": "(fn [& args]\n (reduce (fn [a b] (if (> a b) a b)) args ))", "user": "5d2b88a6e4b01671435dbc84"}, {"problem": 38, "code": "(fn [& coll] (loop [rest-coll coll mx 0] (if (nil? (first rest-coll)) mx (if (> (first rest-coll) mx) (recur (rest rest-coll) (first rest-coll)) (recur (rest rest-coll) mx)))))", "user": "5d348d3de4b01671435dbd0a"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "5d35fb9be4b01671435dbd1c"}, {"problem": 38, "code": "(fn [& coll] (first (sort > coll)))", "user": "54b42ea4e4b05787c3b1638b"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5d370811e4b01671435dbd2d"}, {"problem": 38, "code": ";;With reduce\n;(fn [& coll] (reduce (fn [x y] (if (> x y) x y)) coll))\n\n;With loop\n(fn [x & coll]\n  (loop [coll coll, x x]\n    (let [y (first coll)]\n      (if (nil? y)\n        x\n        (recur (rest coll) (if (> x y) x y))))))", "user": "5d35f997e4b01671435dbd1a"}, {"problem": 38, "code": "(fn [& args] (loop [high (first args) lcoll args] (cond (= (first lcoll) nil) high (> (first lcoll) high) (recur (first lcoll) (rest lcoll)) :else (recur high (rest lcoll)))))", "user": "5d363543e4b01671435dbd20"}, {"problem": 38, "code": "(fn abc [& args](last (sort args)))", "user": "5c07522ae4b0bdcf453d16c4"}, {"problem": 38, "code": "(fn [& x]\n    (loop [a x\n          b (first x)]\n        (if (empty? a)\n            b\n            (if (> (first a) b)\n                (recur (rest a) (first a))\n                (recur (rest a) b)))))", "user": "5d371b6fe4b01671435dbd31"}, {"problem": 38, "code": "(fn [& args] \n  (loop [ls args mx (first args)]\n    (if (= 0 (count ls))\n      mx\n      (recur (rest ls)\n             (if (< mx (first ls)) (first ls) mx)))))", "user": "58b997afe4b0888cdc949cd1"}, {"problem": 38, "code": "(fn max-val [& args] (reduce #(if (< %1 %2) %2 %1) (flatten args)))", "user": "5cf53196e4b087f62be35a94"}, {"problem": 38, "code": "(fn [& args] \n  (reduce \n   (fn [a b]\n     (if (> a b)\n       a\n       b)) args))", "user": "5d323149e4b01671435dbce9"}, {"problem": 38, "code": "(fn [& args]\n  (->> args\n       (map #(* -1 %))\n       (apply min)\n       (* -1)))", "user": "5d2e5065e4b01671435dbcae"}, {"problem": 38, "code": "(fn [& param] (last (sort param)))", "user": "5d1ef23ee4b02ea6f0fb69bb"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce (fn [curr-ans x]\n            (if (> x curr-ans)\n              x\n              curr-ans))\n          (first xs) (rest xs)))", "user": "5d3aefbde4b01671435dbd5e"}, {"problem": 38, "code": "(fn meme-max [& args]\n  (-> args\n      sort\n      reverse\n      first))", "user": "5d30ba40e4b01671435dbcd4"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [a b] (if (< a b) b a )) args))", "user": "5d3ae729e4b01671435dbd5d"}, {"problem": 38, "code": "(fn maxv\n  ([ele] ele)\n   ([e1 e2] (if (> e1 e2) e1 e2))\n   ([e1 e2 & else] \n    (reduce maxv (maxv e1 e2) else)\n   )\n)", "user": "5d24671ce4b02ea6f0fb6a23"}, {"problem": 38, "code": "(fn my-max [x & xs]\n  (loop [mx x ls xs]\n    (if (empty? ls)\n      mx\n      (recur (if (< mx (first ls)) (first ls) mx)\n             (rest ls)))))", "user": "598601f9e4b021a7a535fe79"}, {"problem": 38, "code": "(fn [& x] (loop [m (first x)\n                 target (rest x)]\n            (if (empty? target)\n              m\n              (recur (if (> (first target)\n                            m)\n                       (first target)\n                       m)\n                     (rest target)))))", "user": "5d2c779be4b01671435dbc8d"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5cacc9e0e4b026601754b862"}, {"problem": 38, "code": "(fn [ & nums]\n  (last (sort (seq nums)))\n  )", "user": "5d3fa930e4b05dd059a5435f"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5cd4f7c5e4b0ccb06196292a"}, {"problem": 38, "code": "(fn [& args] (first (sort > args)))", "user": "5d404586e4b05dd059a54363"}, {"problem": 38, "code": "(fn [& nums] (reduce (fn [m v] (if (> m v) m v))\n                     (first nums) nums))", "user": "5d41de31e4b05dd059a54379"}, {"problem": 38, "code": "(fn [& args]\n    (reduce (fn [x y] (if (> x y) x y)) 0 args))", "user": "4fb41dace4b081705acca2aa"}, {"problem": 38, "code": "(fn [& args]\n  (loop [head (first args)\n         tail (rest args)]\n    (if-not (empty? tail)\n      (recur (if (> (first tail) head)\n               (first tail)\n               head) (rest tail))\n      head)))", "user": "5d3f50d7e4b09d9322bc20a6"}, {"problem": 38, "code": "(fn [& myargs] (reduce #(if (> %1 %2) %1 %2) myargs))\n\n; Variadic arguments \"&\" will be collected into a list named \"myargs\", then passed into the inner reduce function.\n; The inner reduce function will then apply the inner anonymous function \"#()\" across all the myargs list\n; The inner anonymous function just compares two values and returns the greater.\n\n\n; better solution:\n; #(reduce (fn [a b] (if (< a b) b a)) %&)\n; the anonymous variadic args \"%&\" will be passed in a list. So with reduce, call our custom max function across the variadic args list.", "user": "5d42d394e4b05dd059a5437f"}, {"problem": 38, "code": "#(reduce (fn [acc x]\n  (if (> x acc) x acc))\n  0\n  %&)", "user": "5d4320fde4b07c84aa5ae690"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5d45bd1de4b07c84aa5ae6a4"}, {"problem": 38, "code": "(fn [& list]\n  (reduce\n     (fn [acc cur]\n     (if (> cur acc)\n    \tcur\n    \tacc)\n  )\n  list\n))", "user": "5d2564d2e4b02ea6f0fb6a34"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "user": "5d45749be4b07c84aa5ae6a2"}, {"problem": 38, "code": "(fn\n    [& args] (\n        let [x (vec args)]\n        (reduce #(if (< % %2) %2 %) (first x) x)))", "user": "5d3b340fe4b01671435dbd63"}, {"problem": 38, "code": "(fn [& input]\n  (reduce \n        (fn [one two]\n            ;;(println (str one two))  \n          (if (> one two)\n                one\n                two\n          )  \n        ) \n    input)\n  \n )", "user": "5d3e8c3de4b01671435dbd73"}, {"problem": 38, "code": "(fn mymax \n     ([] nil)\n     ([x] x)\n     ([x y] (if (> x y) x y))\n     ([x y & args] (apply mymax (cons (mymax x y) args))))", "user": "5b608087e4b0c6492753e700"}, {"problem": 38, "code": "(fn [& nums]\n  (let [f (fn [mx nums]\n            (if (seq nums)\n              (if (> (first nums) mx)\n                (recur (first nums) (rest nums))\n                (recur mx (rest nums)))\n              mx))]\n    (f (first nums) (rest nums))))", "user": "5d47fa13e4b07c84aa5ae6b6"}, {"problem": 38, "code": "(fn [& l] (reduce \n     \t#(if (> %1 %2) %1 %2) \n     \t0 \n     \tl))", "user": "5d439775e4b07c84aa5ae696"}, {"problem": 38, "code": "(fn [& list]\n   (last (sort list)))", "user": "5d28b684e4b092dab7f59c83"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5d465adae4b07c84aa5ae6a9"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (>= %1 %2) %1 %2) args))", "user": "5146f343e4b04ef915e3731e"}, {"problem": 38, "code": "(fn [ & coll ] \n  (reduce (fn [value acc] (if (> value acc) value acc)) coll))", "user": "594c1ab9e4b07ddc2dafae58"}, {"problem": 38, "code": "#(last (sort (first [%&])))", "user": "5d47f45de4b07c84aa5ae6b4"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5d4927dfe4b0776584bd6f16"}, {"problem": 38, "code": "(fn [& items] (reduce #(if (> %1 %2) %1 %2) items))", "user": "5d46fbc6e4b07c84aa5ae6af"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "user": "5d47f4dbe4b07c84aa5ae6b5"}, {"problem": 38, "code": "(fn mymax\n   ([a] a)\n   ([a b] (if (> a b) a b))\n   ([a b & more]\n    (if (empty? more) (mymax a b)\n        (apply (partial mymax (mymax a b) (first more))\n               (rest more)))))", "user": "5d4b2155e4b0776584bd6f28"}, {"problem": 38, "code": "(fn [First & Rest]\n  (loop [\n        MaxValue First\n        NextValue (first Rest)\n        OtherValues (rest Rest)\n       ]\n    (if NextValue\n      (recur \n       (if (> NextValue MaxValue)\n         NextValue\n         MaxValue\n       )\n       (first OtherValues)\n       (rest OtherValues)\n      )\n      MaxValue\n    )  \n  )  \n)", "user": "5d4a6c6ce4b0776584bd6f22"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5d35de2ae4b01671435dbd17"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5d10b8f2e4b04b4faecf4446"}, {"problem": 38, "code": "(fn [& more] (\n    reduce (fn [acc curr] (if (> curr acc) curr acc)) more\n))", "user": "5d40493ae4b05dd059a54364"}, {"problem": 38, "code": "(fn [& args] (- (apply min (map - args))))", "user": "5d49ec5ee4b0776584bd6f1c"}, {"problem": 38, "code": "(fn f [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "5d0bb4fae4b0cc9c91588237"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "5bcee7d9e4b0e9689409ee22"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "5d41ac35e4b05dd059a54375"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "5d4eb9c4e4b0776584bd6f48"}, {"problem": 38, "code": "(fn [& more]\n  (reduce (fn [a b]\n            (if (> a b) a b)) more))", "user": "5ad76df9e4b0ea6055cfac18"}, {"problem": 38, "code": "(fn my-max [& ys]\n  (let [my-max-acc (fn my-max-acc [xs, acc]\n      (if (= (count xs) 0) \n\t    acc \n\t    (my-max-acc (rest xs) (if (> acc (first xs)) acc (first xs) ) )\n\t  ))]\n  (my-max-acc ys 0)\n  )\n)", "user": "5d4c83b7e4b0776584bd6f34"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "5d48884ee4b07c84aa5ae6bb"}, {"problem": 38, "code": "(fn [& theseq] \n           (loop [newseq theseq \n                  highest-so-far (first theseq) ]\n             (if (empty? newseq)\n               \n\t\t\thighest-so-far\n               (recur (rest newseq) (if (> highest-so-far (first newseq))\n                                      highest-so-far \n                                      (first newseq))))))", "user": "56bff105e4b060a8e693e3a4"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (> %2 %1) %2 %1) (cons x xs)))", "user": "5d48e6d3e4b0776584bd6f15"}, {"problem": 38, "code": "(fn [& s]\n      (reduce (fn [acc s*]\n                (if (> s* acc)\n                  s*\n                  acc))\n              (first s)\n              (rest s)))", "user": "5d4c4de9e4b0776584bd6f2f"}, {"problem": 38, "code": "(fn [& more]\n;  (loop [[x & xs] more\n;        res x]\n;   (if (empty? xs)\n;     res\n;     (recur xs (if (> x res) x res))\n;   )\n; )\n  \n  (reduce (fn [res n]\n            (if (> n res)\n              n\n              res)\n          )\n          -1\n          more\n  )\n)", "user": "5d07989ee4b0cc9c915881fb"}, {"problem": 38, "code": "(fn [& x] (apply (comp last sort list) x))", "user": "5d510468e4b0776584bd6f5a"}, {"problem": 38, "code": "(fn [& nums] (reduce #(if (< %1 %2) %2 %1) (seq nums)))", "user": "524a9556e4b05ef8e38e64b1"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5d38a4dde4b01671435dbd4a"}, {"problem": 38, "code": "(fn [& vals] (reduce (fn [n acc] (if (> n acc) n acc)) vals))", "user": "5d4f21f3e4b0776584bd6f4e"}, {"problem": 38, "code": "(fn [& args]\n   (reduce (fn [x y]\n             (if (> x y)\n               x\n               y)) 0 args))", "user": "5d40f41ae4b05dd059a5436d"}, {"problem": 38, "code": "(fn [& s] \n  (loop [x s result 0]\n    (prn x result)\n    (if-not (empty? x)\n      (do\n        (recur \n          (rest x) \n          (if(> (first x) result) (first x) result)))\n      result)))", "user": "5d40442ee4b05dd059a54362"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [acc curr] (if (> curr acc) curr acc)) xs))", "user": "5d51377be4b0776584bd6f5d"}, {"problem": 38, "code": "#(last (sort (vec %&)))", "user": "5bdc4a76e4b0ed4b8aab4c30"}, {"problem": 38, "code": "(fn [& n] (last (sort n)))", "user": "5259451ce4b0cb4875a45cd7"}, {"problem": 38, "code": "(fn [& all]\n  (reduce #(if (> % %2)\n            % %2) all))", "user": "5bf06734e4b0a6d31fed2153"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "5d505c5de4b0776584bd6f57"}, {"problem": 38, "code": "(fn [ & x]\n              (reduce (fn [x1 x2]\n                        (if (> x1 x2)\n                          x1\n                          x2)) x)\n              )", "user": "5d4cf3e9e4b0776584bd6f38"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5d57079be4b02ba5928a6819"}, {"problem": 38, "code": "(fn [& args]\n  (reduce\n   (fn [acc itm]\n     (if (> acc itm)\n       acc\n       itm))\n   (first args)\n   (rest args)))", "user": "5cf48f04e4b087f62be35a86"}, {"problem": 38, "code": "#(last (sort %&))", "user": "52ca6520e4b071a8d36bd3e0"}, {"problem": 38, "code": "#(last(sort %&))", "user": "597b72ede4b02382a38ad1f9"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "5cf59deee4b087f62be35a9f"}, {"problem": 38, "code": "(fn mymax\n  [& s]\n  (when (> (count s) 0)\n    (reduce (fn [acc v]\n              (if (> v acc)\n                v\n                acc))\n            (first s)\n            s)))", "user": "5d53a59ae4b0776584bd6f72"}, {"problem": 38, "code": "#(last (sort %&))", "user": "559ba500e4b066d22e731f58"}, {"problem": 38, "code": "#(last (sort (vec %&)))", "user": "5d5502cbe4b02ba5928a680b"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "5d5166d9e4b0776584bd6f5e"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5d51884be4b0776584bd6f61"}, {"problem": 38, "code": "(fn [x & rest] (last (sort (conj rest x))))", "user": "5d3adc7de4b01671435dbd5b"}, {"problem": 38, "code": "(fn [& nums] \n  (reduce #(if (> %1 %2) %1 %2) nums)\n  )", "user": "5d590500e4b02ba5928a6824"}, {"problem": 38, "code": "(fn [& s]\n  (reduce #(if (> %1 %2)\n             %1\n             %2)\n          s))", "user": "5d4df658e4b0776584bd6f41"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [m x] (if (> m x) m x) ) args))", "user": "5d5e0259e4b0c9e5857d4fef"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5d5e9f45e4b0c9e5857d4ff5"}, {"problem": 38, "code": "(fn [& xs]\n  (loop [m (first xs)\n         xs (rest xs)]\n    (if (seq xs)\n      (let [x (first xs)]\n        (recur\n          (if (< m x) x m)\n          (rest xs)))\n      m)))", "user": "5d609ddde4b0c9e5857d5008"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "5d52bf29e4b0776584bd6f69"}, {"problem": 38, "code": "(fn get-max\n  [& nums]\n  (last (sort nums)))", "user": "5d42c88ae4b05dd059a5437e"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5d5e2efee4b0c9e5857d4ff0"}, {"problem": 38, "code": "(fn [& xs]  (reduce #(if (> %1 %2) %1 %2) xs))", "user": "5d4dd0b4e4b0776584bd6f40"}, {"problem": 38, "code": "(fn [ & values] (reduce (fn [a b] (if (> a b) a b)) values))", "user": "54fa32bae4b0cf870d934701"}, {"problem": 38, "code": "(fn [fst & rst]\n  (reduce #(if (> %1 %2) %1 %2) fst rst)\n  )", "user": "5d5eb086e4b0c9e5857d4ff7"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce #(if (> %1 %2) %1 %2) nums))", "user": "5d24e49be4b02ea6f0fb6a2a"}, {"problem": 38, "code": "(fn [& x] (-> x sort last))", "user": "5d63ba44e4b0c9e5857d5026"}, {"problem": 38, "code": "(fn [& s] (reduce #(if (< %1 %2) %2 %1) s))", "user": "5d629ed9e4b0c9e5857d501d"}, {"problem": 38, "code": "(fn find-max [& args]\n  (first (sort > args ) )\n)", "user": "5ced79abe4b0aaa82f1129d0"}, {"problem": 38, "code": "(fn mmax [& params]\n  (reduce (fn [acc x]\n            (if (> x acc)\n              x\n              acc)) params)\n  )", "user": "5a7f77fae4b00b71e582a041"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (< %1 %2) %2 %1) args)\n  )", "user": "5d641841e4b0c9e5857d502e"}, {"problem": 38, "code": "(fn [& xs] ((fn [z ys] (if (= (count ys) 0) z\n                                   (if (> (first ys) z) (recur (first ys) (rest ys))\n                                       (recur z (rest ys))))) 0 xs))", "user": "5d631376e4b0c9e5857d5023"}, {"problem": 38, "code": "#(last (sort%&))", "user": "5d597050e4b02ba5928a6828"}, {"problem": 38, "code": "(fn [& numbers]\n  (reduce (fn [a b]\n            (if (< a b)\n              b\n              a))\n          numbers))", "user": "5d64013ce4b0c9e5857d502d"}, {"problem": 38, "code": "(fn [& values] (reduce #(if (< %1 %2) %2 %1) values))", "user": "5d6552b5e4b0db5d338d15d2"}, {"problem": 38, "code": "(fn [& n] (last (sort n)))", "user": "5d662fb5e4b0db5d338d15e1"}, {"problem": 38, "code": "(fn [& r] (reduce (fn [m c] (if (> m c) m c)) r))", "user": "5d63f1c2e4b0c9e5857d502b"}, {"problem": 38, "code": "(fn [& args] (reduce #(cond (> %1 %2) %1 :else %2) args))", "user": "5d651553e4b0db5d338d15ca"}, {"problem": 38, "code": "#(reduce (fn [x y] (if (> x y) x y)) %&)", "user": "5d63b06be4b0c9e5857d5025"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "5d657de2e4b0db5d338d15da"}, {"problem": 38, "code": "(fn [& ls] (reduce #(if (> %2 %1) %2 %1) ls))", "user": "5d672bd7e4b0db5d338d15f1"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5d67c955e4b0db5d338d15f7"}, {"problem": 38, "code": "(fn [& args] \n  (first (sort > args)))", "user": "5d68bfd0e4b0db5d338d1602"}, {"problem": 38, "code": "#(last(sort %&))", "user": "5cdd9167e4b05ee0cb31175e"}, {"problem": 38, "code": "(fn [& more] (reduce (fn [x y] (if (>= x y) x y)) more))", "user": "5cbe5fdfe4b0ccb061962750"}, {"problem": 38, "code": "(fn [& x]\n     (reduce #(if (< %1 %2)\n                %2\n                %1)\n             0\n             x))", "user": "5d5ef0bce4b0c9e5857d4ffb"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5ad5bb0ae4b0ea6055cfabf0"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) (flatten (cons x xs))))", "user": "5d6537fce4b0db5d338d15cf"}, {"problem": 38, "code": "(fn [& args] (reduce #(case (compare %1 %2)\n                  0 %1\n                  1 %1\n                  -1 %2) args))", "user": "5d5c2730e4b09db18d4482ea"}, {"problem": 38, "code": "(fn [& seq] \n   (reduce (fn [max_val next]\n      (if (> next max_val)\n          next max_val\n        )\n      )\n    0 seq\n    )\n   )", "user": "5d5b2678e4b06a698e928ee2"}, {"problem": 38, "code": "(fn [f & r]\n  (reduce #(if (> % %2) % %2) f r))", "user": "5d6c2aace4b04d129b00f2ad"}, {"problem": 38, "code": "(fn my-max [& input]\n  (reduce (fn [a b] (if (> a b) a b)) input))", "user": "5d68f5e6e4b0db5d338d1605"}, {"problem": 38, "code": "(fn [ & c]( last (sort c)))", "user": "5d6523ace4b0db5d338d15cd"}, {"problem": 38, "code": "#(reduce\n  (fn [acc v]\n    (if (> acc v) acc v))\n  0\n  (seq %&))", "user": "5d6d4463e4b04d129b00f2bd"}, {"problem": 38, "code": "(fn [& args ] (first (reverse (sort args))))", "user": "5d66aea7e4b0db5d338d15ec"}, {"problem": 38, "code": "(fn [& args]\n  (reduce\n    (fn [current-max potential-max]\n      (if (> potential-max current-max)\n        potential-max\n        current-max))\n    (first args)\n    (rest args)))", "user": "5d64508de4b0c9e5857d5031"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5d6e5ec6e4b04d129b00f2c7"}, {"problem": 38, "code": "(fn [first & rest] (last(sort (conj rest first))))", "user": "5d6691cee4b0db5d338d15e9"}, {"problem": 38, "code": "#(reduce (fn [m i] (if (> i m) i m)) % %&)", "user": "5d6a9b1ee4b04d129b00f29c"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5d531d33e4b0776584bd6f6d"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %2 %1) %2 %1) 0 xs))", "user": "5d6d2172e4b04d129b00f2b9"}, {"problem": 38, "code": "(fn [first & rest] (last(sort (conj rest first))))", "user": "5d6e5b53e4b04d129b00f2c6"}, {"problem": 38, "code": "(fn [& x] (first (sort > x)))", "user": "5d7158f3e4b04d129b00f2e1"}, {"problem": 38, "code": "(fn [& s] (reduce #(if (< %1 %2) %2 %1) 0 s))", "user": "5d728116e4b02e6b30c9350f"}, {"problem": 38, "code": "(fn findmax\n  [& params]\n   (get (reduce (fn [res i]\n            (if (> i (get res :max))\n              (assoc res :max i)\n              res\n              ))\n          {:max (Long/MIN_VALUE)}\n          params) :max)\n  )", "user": "5d5950c1e4b02ba5928a6827"}, {"problem": 38, "code": "(fn maxv [ & args ]                                                                                                                                                                 \n   (reduce                                                                                                                                                                           \n   #(                                                                                                                                                                                \n     if ( > %2 %1 )                                                                                                                                                                  \n      %2                                                                                                                                                                             \n      %1                                                                                                                                                                             \n    )                                                                                                                                                                                \n   args                                                                                                                                                                              \n   )                                                                                                                                                                                 \n )", "user": "5d5c6675e4b09db18d4482ec"}, {"problem": 38, "code": "(fn maxi\n  [& se]\n  (reduce (fn\n            [x y]\n            (if (> x y)\n              x\n              y)) se))", "user": "5d6febe6e4b04d129b00f2d5"}, {"problem": 38, "code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) 0 s))", "user": "5d6fae1ee4b04d129b00f2d4"}, {"problem": 38, "code": "(fn [ & inputSeq]\n  (loop [ MaxVal 0\n          subSeq inputSeq]\n    (if (nil? subSeq)\n      MaxVal\n      (if (> MaxVal (first subSeq))\n        (recur MaxVal (next subSeq))\n        (recur (first subSeq) (next subSeq))\n      )\n    )\n  )\n)", "user": "5cf7215ce4b0b71b1d808a67"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "5d764e52e4b02e6b30c93524"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5d64ecb2e4b0c9e5857d5036"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5a7de7a3e4b03baeef927702"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y) ) args ) )", "user": "5c9da580e4b048ec896c5b12"}, {"problem": 38, "code": "(fn [& args]\n  (reduce\n    (fn [accum x]\n      (if (> accum x)\n        accum\n        x))\n    args))", "user": "5d6d2e11e4b04d129b00f2ba"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "5d7a748ce4b02e6b30c93547"}, {"problem": 38, "code": "(fn my-max\n  ([a] a)\n  ([a b] (if (> a b) a b))\n  ([a b & more] (reduce my-max (my-max a b) more)))", "user": "57a9e581e4b0b8559636fc5e"}, {"problem": 38, "code": "(fn my-max [& args]\n  (last (sort args)))", "user": "5d6f063de4b04d129b00f2d1"}, {"problem": 38, "code": "#(->> %& (sort) (last))", "user": "5c63e034e4b0fca0c1622668"}, {"problem": 38, "code": "(fn [& args] \n  (reduce \n   #(if (> %1 %2) %1 %2) args))", "user": "5c56e264e4b0fb8c5ffd9a39"}, {"problem": 38, "code": "(fn\n  [& nums]\n  (reduce #(cond (> %1 %2) %1 :else %2) nums))", "user": "5d7b90ede4b02e6b30c93552"}, {"problem": 38, "code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) s))", "user": "5d6f0533e4b04d129b00f2d0"}, {"problem": 38, "code": "(fn [& numeros]\n\t(let [coll (vec numeros)]\n\t\t(last (sort coll)))\n\t)", "user": "5d797deee4b02e6b30c93541"}, {"problem": 38, "code": "#(loop [mx %1\n        col %&]\n   (if (next col)\n     (if (> (first col) mx)\n       (recur (first col) (rest col))\n       (recur mx (rest col)))\n     (if (> (first col) mx)\n       (first col)\n       mx)))", "user": "4ec549e1535d6d7199dd3691"}, {"problem": 38, "code": "(fn mymax [& col]\n  (reduce #(if (> %1 %2) %1 %2) col))", "user": "5d1609f9e4b0902706380dd9"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) (seq args)))", "user": "5d7d17ece4b02e6b30c93558"}, {"problem": 38, "code": "(fn [& seq]\n      (reduce #(if (> %1 %2)\n                     %1\n                     %2)\n            seq)\n      )", "user": "5d809b4fe4b0915913b1d36c"}, {"problem": 38, "code": "(fn [head & tail] \n  (reduce \n    (fn [one two] (if (> one two) one two)) \n    head\n    tail)\n)", "user": "5d7faa52e4b0915913b1d365"}, {"problem": 38, "code": "(fn [& l] (reduce (fn [acc x] (if (> acc x) acc x)) l))", "user": "5d4a6511e4b0776584bd6f21"}, {"problem": 38, "code": "(comp last sort list)", "user": "5d81eba4e4b0915913b1d37b"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "5d81c244e4b0915913b1d37a"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5d389ebfe4b01671435dbd49"}, {"problem": 38, "code": "(fn [x & m] (if (> x (first m)) x (recur (first m) (rest m))))", "user": "5ae9b23fe4b0cc2b61a3bbd8"}, {"problem": 38, "code": "(fn maks \n  ([m n] (if (> m n) m n))\n  ([m n & args]\n   (if (empty? args)\n     (maks m n)\n     (if (> m n)\n       (recur m (first args) (rest args))\n       (recur n (first args) (rest args))))\n  ))", "user": "5d81b40ce4b0915913b1d379"}, {"problem": 38, "code": "(fn [& params] (last (sort params)))", "user": "5d79165ae4b02e6b30c9353e"}, {"problem": 38, "code": "(fn [& c]\n  (reduce\n   (fn [a b] (if (< a b) b a))\n   c))", "user": "5d7eaf5fe4b0492f5d910fc3"}, {"problem": 38, "code": "#(last(sort %&))", "user": "5d8570cae4b0915913b1d395"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "5d866acbe4b0915913b1d39c"}, {"problem": 38, "code": "(fn my-max\n  [f & others]\n  (let [items (concat [f] others)]\n    (loop [m 0\n           is items]\n      (let [c (count is)\n            f (first is)]\n        (if (> c 0)\n          (if (> f m)\n            (recur f (rest is))\n            (recur m (rest is)))\n          m)))))", "user": "5d80f328e4b0915913b1d372"}, {"problem": 38, "code": "(fn y-max\n  [& items]\n  (reduce (fn [acc item]\n            (if (> item acc)\n              item\n              acc)) 0 items))", "user": "5d6b21efe4b04d129b00f2a3"}, {"problem": 38, "code": "(fn [& x]\n  (loop [maxsofar 0 remaining (vec x)]\n    (if (empty? remaining)\n      maxsofar\n      (recur \n       (if (> (first remaining) maxsofar)\n         (first remaining)\n         maxsofar)\n       (rest remaining)\n      )\n    )\n  )\n)", "user": "5d62da51e4b0c9e5857d5020"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5d854782e4b0915913b1d392"}, {"problem": 38, "code": "(fn return-greater [& args ] \n(reduce #(if (> %1 %2) %1 %2) args))", "user": "5af1cbb8e4b0cc2b61a3bc65"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5d4d46aae4b0776584bd6f3a"}, {"problem": 38, "code": "(fn [& xs] (first(reverse(sort xs))))", "user": "5d88d820e4b0915913b1d3b1"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5d88a22de4b0915913b1d3ab"}, {"problem": 38, "code": "(fn [& args] (-> (sort args) (last)))", "user": "5d89f87de4b0915913b1d3c4"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5c955464e4b048ec896c5a49"}, {"problem": 38, "code": "(fn [& vars] (reduce #(if (> %1 %2) %1 %2) vars))", "user": "5d88c6a3e4b0915913b1d3ad"}, {"problem": 38, "code": "(fn [& s]\n  (reduce (fn [x y] (if (> x y) x y)) s))", "user": "5d8b4960e4b0915913b1d3d3"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "user": "5d123457e4b02c15ef021996"}, {"problem": 38, "code": "(fn [& s] (reduce (fn [mx x] (if (< mx x) x mx)) (first s) s))", "user": "5d1231dde4b02c15ef021995"}, {"problem": 38, "code": "(comp last sort list)", "user": "5c5ad42ae4b01df32ab7327c"}, {"problem": 38, "code": "(fn\n  [& nums]\n  (reduce\n   (fn\n     [x y]\n     (if\n       (> x y)\n       x\n       y))\n   nums))", "user": "5d90190ce4b0915913b1d3f7"}, {"problem": 38, "code": "#(-> %&  sort last)", "user": "5d917ef0e4b0915913b1d402"}, {"problem": 38, "code": "(fn my-max\n  [head & args]\n  (if (empty? args)\n    head\n    (if (> head (first args))\n      (apply my-max head (rest args))\n      (apply my-max (first args) (rest args)))))", "user": "5d896a64e4b0915913b1d3b8"}, {"problem": 38, "code": "(fn ma [& args] (reduce #(if (> %1 %2) %1 %2) (first args) args))", "user": "5d887d27e4b0915913b1d3a8"}, {"problem": 38, "code": "(fn [& xs] (last (sort xs)))", "user": "5d8af64fe4b0915913b1d3cf"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y))args))", "user": "5b044436e4b0cc2b61a3bd71"}, {"problem": 38, "code": "(fn [& args] \n  (reduce (fn [x y] \n            (if (> x y) \n              x \n              y)) \n          args))", "user": "5d84f5e6e4b0915913b1d38f"}, {"problem": 38, "code": "(fn [& arg] (last (sort (set arg))))", "user": "5d942d68e4b0d3f9b434ad1e"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "5d93536ce4b0d3f9b434ad15"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5d8b3d5be4b0915913b1d3d1"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(+ (Math/abs (- %1 %2)) (min %1 %2)) args))", "user": "5d915f01e4b0915913b1d401"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce (fn [a b] (if (> a b) a b)) xs))", "user": "594fdfdce4b066ee0a44ae85"}, {"problem": 38, "code": "(fn findmax [& nums]\n  (last (sort (seq nums))))", "user": "5ccc9078e4b0ccb061962899"}, {"problem": 38, "code": "(fn [& rest] (last (sort rest)))", "user": "5d9c1226e4b0d3f9b434ad51"}, {"problem": 38, "code": "(fn \n  [& ls]\n  (reduce \n   #(if (> %1 %2) %1 %2)\n   ls))", "user": "5d9ceac2e4b0eb781811cdb3"}, {"problem": 38, "code": "(fn \n   [& args]\n   ((comp last sort) args)\n   )", "user": "5d9aeae5e4b0d3f9b434ad4a"}, {"problem": 38, "code": "(fn [& col]\n  (reduce (fn [max-val val]\n            (if (> val max-val)\n              val\n              max-val))\n          0\n          col))", "user": "5d96edeae4b0d3f9b434ad35"}, {"problem": 38, "code": "(fn [& lst] (reduce (fn [acc elt] (if (> elt acc) elt acc)) lst))", "user": "5d9475e4e4b0d3f9b434ad25"}, {"problem": 38, "code": "(fn [& nums] (last (sort nums)))", "user": "5d76cb59e4b02e6b30c93528"}, {"problem": 38, "code": "(fn [& nums] (reduce (fn [biggest challenger] (if (> challenger biggest) challenger biggest)) nums))", "user": "533d51d4e4b085b17e897d7c"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5d8c8175e4b0915913b1d3e1"}, {"problem": 38, "code": "(fn mx\n  ([x] x)\n  ([x & l] (let [y (apply mx l)]\n             (if (< x y) y x)\n             )))", "user": "5d9ccf36e4b0eb781811cdb0"}, {"problem": 38, "code": "(fn [x y & args]\n  (if (= x 1) \n  y\n    (if (= x 45)\n      y\n  x)))", "user": "5d6eaa58e4b04d129b00f2cd"}, {"problem": 38, "code": "#(reduce (fn [x y] (if(> x y) x y)) %& )", "user": "5d9e7971e4b000c986472bc1"}, {"problem": 38, "code": "(fn [& l] (reduce (fn [a b] (if (> a b) a b)) l))", "user": "5cf6522be4b0b71b1d808a58"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [acc, val] (if (> acc val) acc val)) xs))", "user": "5d97b602e4b0d3f9b434ad3a"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "5da07698e4b000c986472bd3"}, {"problem": 38, "code": "(fn [ & args] (last (sort args)) )", "user": "5d99dc47e4b0d3f9b434ad42"}, {"problem": 38, "code": "(fn [& l]\n            (last (sort l))\n            )", "user": "5d974b1de4b0d3f9b434ad36"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5ccf125ce4b0ccb0619628c0"}, {"problem": 38, "code": "(fn [& xs]\n\t(last (sort xs))\n)", "user": "5da20e73e4b000c986472be1"}, {"problem": 38, "code": "(fn mymax [& any] (reduce #(if (> %1 %2) %1 %2) any))", "user": "5da4fc6be4b000c986472bff"}, {"problem": 38, "code": "(fn [& s]\n  (-> s\n      (sort)\n      (last)))", "user": "5da44d35e4b000c986472bf1"}, {"problem": 38, "code": "#(loop [s %& r 0]\n   (if (empty? s) r\n     (recur (rest s) (if (> (first s) r) (first s) r))))", "user": "5d931a58e4b0d3f9b434ad10"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce (fn [x1 x2]\n            (if (> x1 x2)\n              x1\n              x2)) xs))", "user": "5da7176ae4b000c986472c13"}, {"problem": 38, "code": "(fn my-max-2\n  [& xs]\n  (reduce (fn [a b] (if (< a b) b a)) xs))", "user": "5d9c8a85e4b0eb781811cdad"}, {"problem": 38, "code": "(comp last sort list)", "user": "5da05bcce4b000c986472bd0"}, {"problem": 38, "code": "#(reduce (fn [x y] ((comp last sort) [x y])) %&)", "user": "5da760ebe4b000c986472c1a"}, {"problem": 38, "code": "(comp last sort vector)", "user": "5da8fa72e4b000c986472c2d"}, {"problem": 38, "code": "(fn mymax [& coll]\n  (let [mycompare (fn [a b] (if (> a b) a b))]\n    (reduce mycompare coll)\n    )\n  )", "user": "5d1a1082e4b0902706380e0e"}, {"problem": 38, "code": "(fn [& vars] (last ( sort vars ) ) )", "user": "5da975b9e4b000c986472c32"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (or (nil? %1) (> %2 %1)) %2 %1) nil args))", "user": "5daa1fc8e4b000c986472c3e"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5da94ccfe4b000c986472c2f"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [a b] (if (> a b) a b)) args))", "user": "5da9662ce4b000c986472c30"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce\n    #(if (> %1 %2) %1 %2)\n    xs))", "user": "56f9982ce4b07572ad1a88b8"}, {"problem": 38, "code": "(fn [& coll] \n  (loop [check 0 remain coll]\n    (if (empty? remain)\n       check\n       (if (> (first remain) check)\n         (recur (first remain) (rest remain))\n         (recur check (rest remain))))))", "user": "5da8b8ece4b000c986472c28"}, {"problem": 38, "code": "(fn [& rest]\n  (reduce (fn [acc val]\n            (if (> val acc)\n              val\n              acc))\n            rest))", "user": "5cc0ca7ae4b0ccb06196279d"}, {"problem": 38, "code": "(fn [& args] (->> args sort last))", "user": "5da5a1eee4b000c986472c04"}, {"problem": 38, "code": "#(first (sort > (flatten (list % %&))))", "user": "5d9475e9e4b0d3f9b434ad26"}, {"problem": 38, "code": "#(last (sort %&))", "user": "59b1a1b2e4b0e1f4e384c8eb"}, {"problem": 38, "code": "(fn [& args] (- (reduce min (map #(- %) args))))", "user": "5dac6272e4b000c986472c4c"}, {"problem": 38, "code": "(fn [& params]\n  (reduce #(if (< %1 %2)\n             %2\n             %1)\n          params))", "user": "5dadd84ee4b0f8c104ccfc85"}, {"problem": 38, "code": "(fn [& x] (reduce (fn [a b](if (>= a b) a b)) x))", "user": "5dab11cde4b000c986472c45"}, {"problem": 38, "code": "(fn [& nums] (last (sort nums)))", "user": "5da4b152e4b000c986472bf6"}, {"problem": 38, "code": "#(last (sort < %&))", "user": "5da98129e4b000c986472c33"}, {"problem": 38, "code": "(fn mm\n  ([x] x)\n  ([x y] (if (< x y) y x))\n  ([x y & more] (reduce mm (mm x y) more)))", "user": "5dadf73ee4b0f8c104ccfc86"}, {"problem": 38, "code": "(fn [& all] (reduce #(if (> %1 %2) %1 %2) all))", "user": "5daa0d56e4b000c986472c3c"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "5d2f5ba5e4b01671435dbcbf"}, {"problem": 38, "code": "(fn [& vals]\n  (reduce (fn [a b] (if (> a b) a b)) vals))", "user": "5d7aa22ee4b02e6b30c9354e"}, {"problem": 38, "code": "(fn [& x] (reduce (fn [a b] (if (> a b) a b))  x))", "user": "5da71eaee4b000c986472c15"}, {"problem": 38, "code": "(fn my-max [x & xs]\n  (reduce (fn [ans x]\n            (if (> x ans) x ans))\n          x\n          xs))", "user": "5db0d470e4b0f8c104ccfc9e"}, {"problem": 38, "code": "(fn [x & xs]  (reduce #(if (< %1 %2) %2 %1) (flatten (cons x xs))))", "user": "5daeb6bce4b0f8c104ccfc8b"}, {"problem": 38, "code": "(fn [& n]\n  (last (sort n)))", "user": "5daed892e4b0f8c104ccfc8f"}, {"problem": 38, "code": "#(last (sort %&))", "user": "590b2d92e4b047aa04b199cf"}, {"problem": 38, "code": "(fn ss [& res]\n  (->> res\n      (sort)\n      (last)))", "user": "5d9515a9e4b0d3f9b434ad2c"}, {"problem": 38, "code": "(fn [& xs]\n(reduce (fn [a b] (if (> a b) a b)) xs))", "user": "5db5d09be4b010eb3c36cd31"}, {"problem": 38, "code": "(fn [arg1 & rest] (reduce #(if (> %1 %2) %1 %2) arg1 rest))", "user": "5db1969be4b010eb3c36cd06"}, {"problem": 38, "code": "(fn [& coll]\n  (reduce (fn [acc n]\n            (if (> acc n)\n              acc\n              n))\n          coll))", "user": "5a37b6dbe4b001c08efc0c88"}, {"problem": 38, "code": "(fn [s & ags] (let [s1 (last (sort ags))] (if (< s s1) s1 s)))", "user": "5daec18ae4b0f8c104ccfc8c"}, {"problem": 38, "code": "(fn [& args] (-> args sort last))", "user": "5db68091e4b010eb3c36cd3a"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5d94fdf9e4b0d3f9b434ad2b"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5cbf5148e4b0ccb06196276a"}, {"problem": 38, "code": "(comp last sort list)", "user": "5dbc5ed3e4b09f47823971b3"}, {"problem": 38, "code": "#((comp last sort) %&)", "user": "5db6cc4ae4b010eb3c36cd3b"}, {"problem": 38, "code": "(fn [& args] \n  (loop [coll (rest args) m (first args)]\n   (if (empty? coll)\n    m\n    (recur \n     (rest coll)\n     (if (> (first coll) m) \n     (first coll)\n     m)))))", "user": "5da9d89ae4b000c986472c3b"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %2 %) %2 %) args))", "user": "5dbd51cfe4b09f47823971bb"}, {"problem": 38, "code": "(fn [& args] (first (sort > args)))", "user": "5db19599e4b010eb3c36cd05"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "user": "5db92996e4b010eb3c36cd50"}, {"problem": 38, "code": "(fn\n   [& args]\n   (reduce (fn\n             [acc curr]\n             (if (> curr acc)\n               curr\n               acc))\n           0 args))", "user": "5db861bce4b010eb3c36cd4b"}, {"problem": 38, "code": "(fn [& input] \n    (reduce \n        (fn [x y] \n            (if (> x y) x y)) 0 input ))", "user": "5265337fe4b03e8d9a4a7104"}, {"problem": 38, "code": "(fn [& arg] (reduce #(if (> %2 %1) %2 %1) arg))", "user": "5db9a6c3e4b010eb3c36cd56"}, {"problem": 38, "code": "(fn [ f & cl ]\n     (cond \n      (not (first cl)) f\n      (< f (first cl))\n        (recur (first cl) (rest cl))\n      :else f))", "user": "5dc12b0ae4b0e59a23173d84"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [a b] (if (> a b) a b)) args))", "user": "5dba063ee4b010eb3c36cd5c"}, {"problem": 38, "code": "(fn [& args]\n\t(reduce #(if (and (not= %1 nil) (> %1 %2)) %1 %2) nil args)\n)", "user": "5db7376fe4b010eb3c36cd43"}, {"problem": 38, "code": "(fn [& args]\n   (last (sort args)))", "user": "5d9e8e40e4b000c986472bc2"}, {"problem": 38, "code": "(fn my-max \n  [& s]\n  (last(reduce #(if (or (empty? %1) (> %2 (last %1)))\n              (conj %1 %2)\n              %1)\n           []\n           s)))", "user": "5db1e852e4b010eb3c36cd0a"}, {"problem": 38, "code": "(fn [& args]\n  (first (reverse (sort args))))", "user": "5b055773e4b0cc2b61a3bd81"}, {"problem": 38, "code": "(fn [& b] (reduce #(if (> %1 %2) %1 %2) b))", "user": "5dbb5200e4b09f47823971a9"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "user": "5dbe27c3e4b09f47823971c4"}, {"problem": 38, "code": "(fn [& numbers] (reduce #(if (> %1 %2) %1 %2) numbers))", "user": "5dc40814e4b02f9375f4e1ae"}, {"problem": 38, "code": "(fn [& num] (reduce (fn [x y] (if (= (compare x y) -1) y x)) num))", "user": "5d84545ee4b0915913b1d38b"}, {"problem": 38, "code": "(fn my-max [elem & elements]\n  (if (nil? elements) \n    elem\n    (reduce #(if (> %1 %2) %1 %2) (conj elements elem))))", "user": "5dc4719ae4b02f9375f4e1b5"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "5dc9d5c3e4b03836ba07d824"}, {"problem": 38, "code": "(fn findy [x & listy] (\n   cond\n   (empty? listy) x\n   (< x (first listy)) (apply findy listy)\n   :else (apply findy x (rest listy))\n))", "user": "5da71a00e4b000c986472c14"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5d9c9446e4b0eb781811cdae"}, {"problem": 38, "code": "(fn [x & z]\n  (if (empty? z)\n    x\n    (recur (if (> x (first z)) \n             x \n             (first z)) \n           (rest z))))", "user": "5dc72a9ce4b02f9375f4e1cd"}, {"problem": 38, "code": "(fn [& xs] ( reduce #(if (< %2 %1) %1 %2) xs))", "user": "53d63e6ce4b0e771c3025454"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5dc9ccf8e4b02f9375f4e1f1"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5dca5e0ae4b02b31cc3da3af"}, {"problem": 38, "code": "(fn [& numbers]\n  (loop [m (first numbers)\n         nums (rest numbers)]\n    (if (empty? nums)\n      m\n      (recur (if (> (first nums) m) (first nums) m) (rest nums)))))", "user": "5dcc152ae4b02b31cc3da3c3"}, {"problem": 38, "code": "(fn [& seq]\n(reduce\n\t(fn [a b] (if (> a b) a b))\n \tseq\n )\n \n)", "user": "5dcb7209e4b02b31cc3da3b9"}, {"problem": 38, "code": "(fn [& coll]\n  (reduce #(if (> %1 %2) %1 %2) coll))", "user": "5dc9c4f2e4b02f9375f4e1f0"}, {"problem": 38, "code": "#(first (reverse (sort %&)))", "user": "5dc9c070e4b02f9375f4e1ee"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "5dc318cde4b02f700ae81835"}, {"problem": 38, "code": "(fn [& z] (reduce (fn [x y] (if (> x y) x y)) z))", "user": "5dc98501e4b02f9375f4e1e6"}, {"problem": 38, "code": "(fn [& l]\n  (loop [s l, mx (first l)]\n    (if (empty? s)\n      mx\n      (recur\n       (rest s)\n       (if (> (first s) mx)\n         (first s)\n         mx)))))", "user": "5dcc0ee9e4b02b31cc3da3c2"}, {"problem": 38, "code": "(fn max-val\n  [& args]\n  (let [maxs (filter #(> % (first (flatten args))) (flatten args))]\n    (if (empty? maxs)\n        (first (flatten args))\n        (max-val maxs))))", "user": "5dcbe1d7e4b02b31cc3da3bf"}, {"problem": 38, "code": "(fn [& args]\n  (loop [max-v (first args)\n         more (rest args)]\n    (if (empty? more)\n      max-v\n      (if (< max-v (first more))\n        (recur (first more) (rest more))\n        (recur max-v (rest more))))))", "user": "5dcbe0dbe4b02b31cc3da3be"}, {"problem": 38, "code": "(fn [& args]\n  (-> args\n   sort\n   last))", "user": "5afca248e4b0cc2b61a3bd12"}, {"problem": 38, "code": "(comp first reverse sort vector)", "user": "5dce0151e4b0b296f82db5b5"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "5dcd182ae4b0b296f82db5a9"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "5dcdb5cbe4b0b296f82db5b2"}, {"problem": 38, "code": "(fn [& args]\n  (reduce \n   (fn [x y] \n     (if (< x y)\n       y\n       x)) \n   args))", "user": "5da306a3e4b000c986472be7"}, {"problem": 38, "code": "#(first (sort > %&))", "user": "5dc96791e4b02f9375f4e1e5"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5dcb1e73e4b02b31cc3da3b6"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (< a b) b a) ) 0 %&)", "user": "5dcfdf23e4b0948ae9d9ad43"}, {"problem": 38, "code": "(fn [& nums]\n   (last (sort nums)))", "user": "5d927df4e4b0915913b1d40f"}, {"problem": 38, "code": "(fn [& args]\n\n   (last (sort args))\n   )", "user": "5dd1fb19e4b0948ae9d9ad51"}, {"problem": 38, "code": "(fn [el & els]\n   (reduce #(if (> %1 %2) %1 %2)\n           el\n           els))", "user": "5dc9d4ede4b03836ba07d823"}, {"problem": 38, "code": "(fn [& l] (reduce #(if (> %1 %2) %1 %2) l))", "user": "5dd35dcbe4b0948ae9d9ad5f"}, {"problem": 38, "code": "(fn [x & args]\n  (loop [maxv x prod args]\n    (if (= nil (first prod))\n    \tmaxv\n    \t(if (> (first prod) maxv)\n      \t\t(recur (first prod) (rest prod))\n      \t\t(recur maxv (rest prod))))))", "user": "5dcbd629e4b02b31cc3da3bd"}, {"problem": 38, "code": "#(loop [i 0 mItem (nth %& 0)] (if (>= i (count %&)) mItem (if (>= (nth %& i) mItem) (recur (+ 1 i) (nth %& i)) (recur (+ 1 i) mItem))))", "user": "5dd44256e4b0948ae9d9ad69"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5da8e170e4b000c986472c29"}, {"problem": 38, "code": "(fn maximum-value [& params]\n  (reduce\n    (fn [x y]\n      (if (< x y) y x))\n    params))", "user": "5dd59f88e4b0948ae9d9ad7b"}, {"problem": 38, "code": "(fn [n & many]\n   (reduce (fn [a b]\n             (if (> a b) a b))n many))", "user": "533b6f01e4b0e30313ee6cce"}, {"problem": 38, "code": "(fn maximum-s [& args]\n  (loop [res (first args) rem (rest args)]\n    (if (empty? rem)\n      res\n      (let [curr (first rem) tail (rest rem)]\n        (if (> curr res)\n          (recur curr tail)\n          (recur res tail))))\n    ))", "user": "5dd67c22e4b0948ae9d9ad80"}, {"problem": 38, "code": "(fn f38\n  [& vs]\n  (last (sort vs)))", "user": "5bd75870e4b0ed4b8aab4bc0"}, {"problem": 38, "code": "(fn [x & y] (reduce #(if (< %1 %2) %2 %1) x y))", "user": "5dd90651e4b0948ae9d9ad97"}, {"problem": 38, "code": "(fn [& args] (reduce (fn[a b](if (> a b) a b)) args))", "user": "5d60ea3ae4b0c9e5857d500a"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "5dcc5e5ce4b02b31cc3da3c7"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x acc] (if (< x acc) acc x)) 0 args))", "user": "5ac67b47e4b0e27600da776e"}, {"problem": 38, "code": "(fn [& c] (reduce\n #(if (> %1 %2)\n    (identity %1)\n    (identity %2))\n c))", "user": "5ddb6151e4b0948ae9d9adb0"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "5ddcf10ae4b0948ae9d9adbe"}, {"problem": 38, "code": "(fn [& rest] (reduce (fn [x y] (if (> x y) x y)) (first rest) rest))", "user": "5ddd3cbee4b0948ae9d9adc3"}, {"problem": 38, "code": "#(first (reverse(sort %&)))", "user": "5dddc292e4b0948ae9d9adcb"}, {"problem": 38, "code": "(fn [& args]\n  (first (sort > args))\n  )", "user": "5dd70ee3e4b0948ae9d9ad85"}, {"problem": 38, "code": "(fn\n  [x y & more]\n  (let [winner (if (> x y) x y)]\n    (if (empty? more)\n      winner\n      (recur winner (first more) (drop 1 more)))))", "user": "5ddecfe5e4b0948ae9d9adda"}, {"problem": 38, "code": "(fn [& array] (reduce #(if (> %1 %2) %1 %2) array))", "user": "5dd60c58e4b0948ae9d9ad7c"}, {"problem": 38, "code": "(fn mymax\n  ([x y]\n     (if (> x y) x y))\n  ([x y & more]\n     (reduce mymax (mymax x y) more)))", "user": "5dcc65b7e4b02b31cc3da3c9"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5ddbd202e4b0948ae9d9adb4"}, {"problem": 38, "code": "(fn my-max\n  [& nums]\n  (reduce #(if (> %1 %2) %1 %2) (vec nums)))", "user": "5de012c8e4b0948ae9d9ade2"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce #(if (> %1 %2) %1 %2) nums))", "user": "5db35f85e4b010eb3c36cd22"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) -1000 x))", "user": "5de3d6c6e4b0948ae9d9ae02"}, {"problem": 38, "code": "(fn greaterthan [& args]\n(reduce\n (fn [a b]\n   (if (> a b)\n     a\n     b))\n args\n))", "user": "5dbf6016e4b0e59a23173d79"}, {"problem": 38, "code": "(fn [& varags] (reduce #(if (> %1 %2) %1 %2) varags))", "user": "514992d2e4b0b64cbeae1848"}, {"problem": 38, "code": "(fn [& rest]\n  (reduce #(if (> %1 %2) %1 %2 )rest))", "user": "5dd7dec1e4b0948ae9d9ad8d"}, {"problem": 38, "code": "(fn [& nums](reduce (fn [a b] (if (> a b) a b)) nums))", "user": "5c38422ae4b0d62ef62d9f7f"}, {"problem": 38, "code": "(fn\n  [a & b]\n  (reduce #(if (< %1 %2) %2 %1) (cons a b)))", "user": "5ddd134ae4b0948ae9d9adc0"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5de65feee4b0986d99407f68"}, {"problem": 38, "code": "(fn [& x] (first (sort > x)))", "user": "5bfc50ece4b0bdcf453d15ea"}, {"problem": 38, "code": "(fn [& values]\n  (loop [[elem & remaining] (rest values) max-value (first values)]\n    (if (nil? elem)\n      max-value\n      (recur remaining (if (> max-value elem) max-value elem))\n      )\n    )\n )", "user": "5de6484ce4b0986d99407f66"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [a b] (if (> a b) a b)) xs))", "user": "5dde751fe4b0948ae9d9add5"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5dbac8ebe4b010eb3c36cd62"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %2 %1) %2 %1) xs))", "user": "5d812eeee4b0915913b1d376"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [m v] (if (> m v) m v)) -100 args))", "user": "5dc85f8ae4b02f9375f4e1da"}, {"problem": 38, "code": "#(last(sort %&))", "user": "5da07d10e4b000c986472bd5"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5dcd7933e4b0b296f82db5ae"}, {"problem": 38, "code": "(fn [& xs]       \n     (reduce #(if (> %2 %1) %2 %1) xs)\n     )", "user": "5de68f83e4b0986d99407f6c"}, {"problem": 38, "code": "(fn _m [& l](reduce #(if (> %1 %2) %1 %2) l))", "user": "5d614059e4b0c9e5857d500e"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) 0 args))", "user": "5dd25ca8e4b0948ae9d9ad55"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "5d045162e4b0cc9c915881d3"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "5d28c6dce4b092dab7f59c85"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "5dde0b71e4b0948ae9d9add0"}, {"problem": 38, "code": "(fn [i & others]\n  (loop [others others\n         res i]\n    (if (empty? others)\n      res\n      (let [x (first others)\n            res (if (> x res) x res)]\n        (recur (rest others) res)))))", "user": "5dee4b40e4b093ff71727593"}, {"problem": 38, "code": "#(loop [cur %1 alist %&] \n   (if (empty? alist) \n     cur \n     (if (< cur (first alist)) \n       (recur (first alist) (rest alist)) \n       (recur cur (rest alist))\n       )\n     )\n   )", "user": "5deab1b2e4b0986d99407f9f"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [a b] (if (> a b) a b)) xs))", "user": "5dee144ae4b093ff71727591"}, {"problem": 38, "code": "(fn [& args]\n   (-> (sort args)\n       last))", "user": "5db98f39e4b010eb3c36cd53"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5de7e7cae4b0986d99407f7a"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [prev next] (if (> next prev) next prev)) args))", "user": "5de48f92e4b0948ae9d9ae07"}, {"problem": 38, "code": "(fn f [& s]\n  (reduce \n   (fn [acc s*] \n     (if (> s* acc) \n       s* acc)\n     ) \n   (first s) \n   (rest s)\n   )\n  )", "user": "5defd277e4b093ff717275b0"}, {"problem": 38, "code": "(fn [& rest] (last (sort rest)))", "user": "5ddfd88be4b0948ae9d9ade1"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5d6bff25e4b04d129b00f2ab"}, {"problem": 38, "code": "(fn [& others] (reduce (fn[xs x] (if(nil? xs) x (if (> x xs) x xs))) nil others))", "user": "5df0c6ffe4b093ff717275c2"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5df6c8b8e4b0a607a9a45c87"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5df54584e4b03c219ef1a38f"}, {"problem": 38, "code": "(fn f [& s]\n  (reduce (fn [acc s*] (if (> s* acc) s* acc)) (first s) (rest s)))", "user": "5df77552e4b0a607a9a45c93"}, {"problem": 38, "code": "(comp last sorted-set)", "user": "5ddb8a6ee4b0948ae9d9adb2"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "5df7fdc2e4b0a607a9a45ca0"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) 0 args))", "user": "5df175bce4b03c219ef1a34d"}, {"problem": 38, "code": "(fn [& args] (let [size (count args)]\n                      (loop [x 0\n                             res -10000]\n                        (if (= x size)\n                          res\n                          (recur (inc x)\n                                 (if (> (nth args x) res)\n                                   (nth args x)\n                                   res))))\n                      ))", "user": "5dc53ddee4b02f9375f4e1bd"}, {"problem": 38, "code": "#(loop [vals %& highest 0]\n    (if (empty? vals)\n    highest\n    (recur (rest vals) (if (> (first vals) highest) (first vals) highest)\n)))", "user": "5de8648de4b0986d99407f7c"}, {"problem": 38, "code": "#(first (sort-by - (apply vector %&)))", "user": "4f24c859e4b0d66497709fef"}, {"problem": 38, "code": "(fn [& seq] (reduce #(if (> %1 %2) %1 %2) seq))", "user": "5dfb2e2ae4b0a607a9a45cd6"}, {"problem": 38, "code": "(fn [ & values ] (last (sort values)))", "user": "5dfc457de4b0a607a9a45cea"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (< a b) b a ) ) %&)", "user": "5dfa1c67e4b0a607a9a45cc5"}, {"problem": 38, "code": "(fn [& args]\n  (letfn [(func [eins zwei] \n          (if (> eins zwei) \n            eins \n            zwei))]\n  (reduce func args)\n    )\n  )", "user": "5df79420e4b0a607a9a45c9a"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "5dfbe0eae4b0a607a9a45ce2"}, {"problem": 38, "code": "(fn [& nums] (reduce (fn [x y] (if (> x y) x y)) 0 nums))", "user": "5df886d8e4b0a607a9a45ca9"}, {"problem": 38, "code": "#(reduce (fn [m x] (if (> x m) x m))\n         0\n         %&)", "user": "5d98f616e4b0d3f9b434ad3c"}, {"problem": 38, "code": "(fn my-max\n  [& sq]\n  (reduce (fn [curr-max item]\n            (if (< curr-max item) item curr-max))\n          Integer/MIN_VALUE\n          sq)\n  )", "user": "5dfb538ee4b0a607a9a45cda"}, {"problem": 38, "code": "(fn [& lst]\n  (loop [lst lst]\n    (if (= (count lst) 1)\n      (first lst)\n      (let [a (nth lst 0)\n            b (nth lst 1)]\n        (if (>= a b)\n          (recur (cons a (rest (rest lst))))\n          (recur (cons b (rest (rest lst)))))))))", "user": "55527251e4b0deb715856df3"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %2 %1) %2 %1) xs))", "user": "5dfb20b8e4b0a607a9a45cd3"}, {"problem": 38, "code": "(fn mymax\n  ([]  0)\n  ([x] x)\n  ([x y] (if (< x y) y x))\n  ([x y & z] (reduce mymax (mymax x y) z)) )", "user": "5dee8835e4b093ff7172759a"}, {"problem": 38, "code": "(fn get-highest\n  [& args]\n  (reduce (fn [acc curr]\n            (if\n              (> acc curr) acc curr)) (first args) (rest args)))", "user": "5df0f338e4b093ff717275c6"}, {"problem": 38, "code": "(comp last sort list)", "user": "57fc5e42e4b0d3187e900997"}, {"problem": 38, "code": "(fn [& more] (last (sort more)))", "user": "5e035de0e4b0a607a9a45d5a"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [xs x2] (if (< xs x2) x2 xs)) xs))", "user": "5bfc9037e4b0bdcf453d15f2"}, {"problem": 38, "code": "(fn mymax[& args]\n\t(last (sort args))\n)", "user": "5bb4baace4b0a20761a23552"}, {"problem": 38, "code": "#(loop [lst %&\n        mx 0]\n   (if (empty? lst)\n     mx\n     (let [n (first lst)]\n       (recur (rest lst) (if (> n mx)\n                           n\n                           mx)))))", "user": "5e066185e4b0978307768fa4"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5e03a15be4b0a607a9a45d5e"}, {"problem": 38, "code": "(fn [x & xs]\n  (loop [col2 xs mx x]\n    (if (not (seq col2))\n      mx\n      (recur (rest col2) \n        (if (> mx (first col2))\n          mx\n          (first col2)\n        )\n      )\n    )\n  )\n)", "user": "5e078ba7e4b0978307768fb6"}, {"problem": 38, "code": "(fn [& coll]\n    (last (sort coll)))", "user": "5d89427ae4b0915913b1d3b5"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "5e01841de4b0a607a9a45d39"}, {"problem": 38, "code": "(fn [& nums]\n  (loop [mx (first nums) [elem & coll] (rest nums)]\n    (if (nil? elem)\n      mx\n      (recur (if (> elem mx) elem mx) coll)\n    )\n  )\n)", "user": "5e09fd26e4b099d064962f60"}, {"problem": 38, "code": "(fn [& args]\n  (reduce \n    (fn [biggest n] \n      (if (> n biggest)\n         n\n         biggest))\n    0\n    args))", "user": "5dd3383be4b0948ae9d9ad5e"}, {"problem": 38, "code": "(comp last sort list)", "user": "5e0a6916e4b099d064962f65"}, {"problem": 38, "code": "(fn mmx \n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] (reduce mmx (mmx x y) more))\n  )", "user": "5df75fd8e4b0a607a9a45c92"}, {"problem": 38, "code": "(fn [x & xs] (reduce (fn [a b] (if (< a b) b a)) x xs))", "user": "5d91acb8e4b0915913b1d406"}, {"problem": 38, "code": "(comp last sort vector)", "user": "5e0d948fe4b099d064962f98"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5e00b6e7e4b0a607a9a45d2b"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "5e0d1947e4b099d064962f92"}, {"problem": 38, "code": "(fn [v & more] \n  (loop [cur v\n         remain more]\n    (if (seq? remain)\n      (recur\n       (let [num (first remain)]\n         (if (> cur num) cur num))\n       (next remain))\n      cur)))", "user": "5e0ceca5e4b099d064962f91"}, {"problem": 38, "code": "(fn m\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] \n   (reduce m (m x y) more)\n  )\n )", "user": "5e08c3dde4b0978307768fc8"}, {"problem": 38, "code": "(comp last sorted-set)", "user": "5e0e836fe4b099d064962fa8"}, {"problem": 38, "code": "(fn [& numbers] (reduce (fn [a b] (if (> a b) a b)) numbers))", "user": "5e109435e4b099d064962fcb"}, {"problem": 38, "code": "(fn [f & r]\n  (loop [ m f s r]\n    (if (empty? s)\n      m\n      (recur (if (> m (first s)) m (first s)) (rest s)))))", "user": "5b799354e4b047b03b203706"}, {"problem": 38, "code": "(fn [x & rest] (reduce #(if (> %1 %2) %1 %2) x rest))", "user": "5e0e0131e4b099d064962fa1"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5cbc1ee7e4b026601754b9e1"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5e01addee4b0a607a9a45d3f"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) (first args)  args))", "user": "5dde6251e4b0948ae9d9add3"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "5e121a89e4b099d064962fe4"}, {"problem": 38, "code": "(fn max-of\n   [ffirst & args]\n   (loop [max-value ffirst\n          resting-values args]\n     (if (empty? resting-values)\n       max-value\n       (if (> max-value (first resting-values))\n         (recur max-value (next resting-values))\n         (recur (first resting-values) (next resting-values))))))", "user": "5deeb6fde4b093ff7172759f"}, {"problem": 38, "code": "(fn [& numbers] (reduce (fn [n1 n2] (if (> n1 n2) n1 n2))0 numbers))", "user": "5e14175be4b0a047bd49f6e5"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "5e1561b1e4b0a047bd49f700"}, {"problem": 38, "code": "(fn my-max [x & args]\n  (if (empty? args)\n    x\n    (let [xxx (apply my-max args)]\n\t  (if (> x xxx)\n        x\n        xxx))))", "user": "5a68826ee4b0512ff01cd9f8"}, {"problem": 38, "code": "(fn my-max \n  [& coll]\n  (if (nil? coll)\n    nil\n    (let [sub-max (apply my-max (rest coll))]\n      (if (nil? sub-max)\n        (first coll)\n        (if (> (first coll) sub-max)\n          (first coll)\n          sub-max)))))", "user": "5e157910e4b0a047bd49f701"}, {"problem": 38, "code": "(fn f [& s]\n  (reduce (fn [acc s*] (if (> s* acc) s* acc)) (first s) (rest s)))", "user": "5e14d842e4b0a047bd49f6f5"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "5e138826e4b099d064962ffd"}, {"problem": 38, "code": "(fn rmax  \n  [& rest]\n  (reduce #(if (> %1 %2) %1 %2) 0 rest))", "user": "5e16006be4b0a047bd49f711"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "user": "5e144bd5e4b0a047bd49f6e7"}, {"problem": 38, "code": "(fn\n   [h & t] \n   (loop [current-max h\n          h (first t)\n          t (rest t)]\n     (if (empty? t)\n       current-max\n       (if (> h current-max)\n         (recur h (first t) (rest t))\n         (recur current-max (first t) (rest t))))))", "user": "5e14e396e4b0a047bd49f6f7"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5e168c76e4b0a047bd49f71b"}, {"problem": 38, "code": "(fn [& nums] (reduce #(if (> %1 %2) %1 %2) nums))", "user": "5e17bb46e4b00200644e3d5a"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [a b]\n            (if (> b a) b a))\n          args))", "user": "5e17509fe4b00200644e3d52"}, {"problem": 38, "code": "(fn [s & x] (reduce (fn [a b] (if (> a b) a b)) s x))", "user": "5e18bd30e4b0dc95940084fa"}, {"problem": 38, "code": "(fn [& lista]\n      (loop [lst lista\n             item (first lst)\n             maior item]\n\n              (if (seq lst)\n                (if (< item maior)\n                  (recur (rest lst) (first (rest lst)) maior)\n                  (recur (rest lst) (first (rest lst)) item))\n                maior)))", "user": "58a0ac0de4b02bd94d917e9c"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "5e0e14bde4b099d064962fa3"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5e155173e4b0a047bd49f6fd"}, {"problem": 38, "code": "(fn [& args] (loop [l args m 0] (if (empty? l) m (recur (rest l) (if (> (first l) m) (first l) m)))))", "user": "5e04ce34e4b0a607a9a45d71"}, {"problem": 38, "code": "(fn [& s] (reduce #(if (> %1 %2) %1 %2) s))", "user": "5e178fbee4b00200644e3d57"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2 ) args))", "user": "5e1a3989e4b0dc9594008511"}, {"problem": 38, "code": "(comp last sort list)", "user": "5e0cbc14e4b099d064962f8e"}, {"problem": 38, "code": "#(first (reverse (sort %&)))", "user": "5e17d2c1e4b00200644e3d5d"}, {"problem": 38, "code": "(fn [x & others] (loop [M x candidates others] (if (empty? candidates) M (recur (let [candidate (first candidates)] (if (> candidate M) candidate M)) (rest candidates)))))", "user": "5e1cc888e4b0dc959400853d"}, {"problem": 38, "code": "(fn[& nums](first(sort > nums)))", "user": "5e1ec8c0e4b0dc9594008561"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5e0b71d8e4b099d064962f7c"}, {"problem": 38, "code": "(fn [& s]\n\t(last (sort s))  \n)", "user": "5e189cc8e4b0dc95940084f7"}, {"problem": 38, "code": "(fn [& col]\n             (reduce (fn [max_ x]\n                       (if (> x max_)\n                         x\n                         max_))\n                     (first col) (rest col)))", "user": "5e1c3e6ee4b0dc9594008530"}, {"problem": 38, "code": "(fn maxx [& all]\n(letfn [(select [fi se]\n    \t(if (> fi se)\n      \t\tfi\n      \t\tse))]\n  (reduce select all)))", "user": "5e18c885e4b0dc95940084fc"}, {"problem": 38, "code": "(fn maxlis [& x]\n    (cond\n      (nil? x) '()\n      (nil? (first x)) '()\n      :else (reduce \n              (fn [a b] \n                (cond\n                  (> a b) a\n                  :else b\n                )\n              )     \n             0 x)\n    )\n  )", "user": "5e1d01b5e4b0dc9594008542"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "user": "5d929ceae4b0915913b1d412"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5e21c933e4b05b4b01516128"}, {"problem": 38, "code": "(fn [head & args]\n  (last (sort (conj args head))))", "user": "5e23d513e4b05b4b01516145"}, {"problem": 38, "code": "(fn [& vs] (reduce #(if (> % %2) % %2) (first vs) vs))", "user": "5e2549c8e4b05b4b0151615f"}, {"problem": 38, "code": "(fn [& more]\n  (loop [mx (first more)\n         rst (rest more)]\n    (if (= rst '())\n    \tmx\n      (if (< mx (first rst))\n      \t(recur (first rst) (rest rst))\n        (recur mx (rest rst))\n       )\n     )\n   )\n )", "user": "5e265173e4b05b4b01516175"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [x y] (if (> x y) x y)) 0 xs))", "user": "5e1754abe4b00200644e3d53"}, {"problem": 38, "code": "#(-> %& (sort) (last))", "user": "5e22e4c5e4b05b4b01516137"}, {"problem": 38, "code": "(fn \n    [& x] \n    (reduce \n        (fn \n            [value colu]\n            (println colu)\n            (if \n                (> colu value)\n                colu\n                value\n                \n            )\n            \n        )  \n    0\n    x\n    )\n)", "user": "5e23ca7fe4b05b4b01516144"}, {"problem": 38, "code": "(fn MaxValue\n  [& args]\n  (reduce #(if (> %1 %2) \n             %1\n             %2) args))", "user": "5e16b820e4b0a047bd49f71f"}, {"problem": 38, "code": "(fn [x & xs] (reduce (fn [a b] (if (> a b) a b)) (cons x xs)))", "user": "5e21f944e4b05b4b0151612d"}, {"problem": 38, "code": "(fn [& nn]\n    (loop [n1 nn\n         big 0]\n     (if (empty? n1) \n      big\n       (let [[part & remaining] n1] \n         (recur remaining \n               (if (> part big) part big)\n          )\n       )\n      )\n     )\n)", "user": "5d914fd8e4b0915913b1d400"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5a83e15ae4b00b71e582a088"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [x y]\n            (if (> x y)\n              x\n              y))\n          args))", "user": "5b4bfd04e4b02d533a91bca2"}, {"problem": 38, "code": "(fn my-max [& xs] (let [is-first-bigger\n                        (fn [xs] (> (first xs) (second xs)))\n                        drop-first\n                        (fn [xs] (drop 1 xs))\n                        drop-second\n                        (fn [xs] (cons (first xs) (drop 1 (next xs))))\n                        drop-smaller\n                        (fn [xs] (if (is-first-bigger xs) (drop-second xs) (drop-first xs)))]\n                    (if (empty? (rest xs)) (first xs) (apply my-max (drop-smaller xs)))))", "user": "5d25578de4b02ea6f0fb6a33"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %2 %1) %2 %1) xs))", "user": "5e054752e4b0a607a9a45d78"}, {"problem": 38, "code": "#(reduce (fn [maxm x] (if (> x maxm) x maxm)) %&)", "user": "5e228b5ae4b05b4b01516134"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "user": "5e246f92e4b05b4b01516150"}, {"problem": 38, "code": "(fn [& nums]\n   (reduce (fn [x y]\n             (if (< x y) y x))\n     nums))", "user": "5e284f94e4b05b4b01516196"}, {"problem": 38, "code": "(fn [& x]\n  (reduce #(if (> %2 %1) %2 %1) 0 x))", "user": "5daae405e4b000c986472c44"}, {"problem": 38, "code": "(fn[& coll](reduce (fn[mx next](if (> mx next) mx next)) (first coll) coll))", "user": "5e29cb4ce4b05b4b015161ae"}, {"problem": 38, "code": "(fn [& a] (reduce (fn [m b] (if (> m b) m b)) (first a) a))", "user": "5e33077be4b0650de70e2b03"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %2 %1) %2 %1) xs))", "user": "5e257a33e4b05b4b01516166"}, {"problem": 38, "code": "(fn [& a]\n  (reduce \n   (fn [result element] (if (> element result) element result)) \n   a\n  )\n  )", "user": "5e34348be4b0650de70e2b16"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5e3302ece4b0650de70e2b02"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [x y] (if (> x y) x y)) args))", "user": "5e357507e4b0650de70e2b2a"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [x y]\n            (if (> x y)\n              x\n              y)) args))", "user": "586f1aa7e4b01531a375e9ba"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5e218bb7e4b05b4b01516123"}, {"problem": 38, "code": "(comp last sort list)", "user": "5dfb267ee4b0a607a9a45cd4"}, {"problem": 38, "code": "(fn [& ls]\n  (reduce #(if (> %1 %2) %1 %2)\n          (first ls)\n          (rest ls)))", "user": "5e38a9cbe4b01d43a70e8dc2"}, {"problem": 38, "code": "(fn max-val [& nums] (first (drop (- (count nums) 1) (sort nums))))", "user": "5e380e72e4b01d43a70e8db0"}, {"problem": 38, "code": "#(last(sort %&))", "user": "5e3933c5e4b01d43a70e8dcc"}, {"problem": 38, "code": "(fn [& coll]\n  (reduce (fn [a b]\n            (if (< a b) b a))\n          (first coll)\n          coll))", "user": "5a6b2995e4b0512ff01cda37"}, {"problem": 38, "code": "(fn [& nums] \n  (reduce\n   #(if (> %1 %2) %1 %2)\n   nums))", "user": "5e36ca7de4b0650de70e2b3c"}, {"problem": 38, "code": "(fn [& args]\n  ((fn [args m]\n     (if (empty? args)\n       m\n       \n       (if (> (first args) m)\n         (recur (rest args) (first args))\n         (recur (rest args) m)))) (rest args) (first args)))", "user": "5e394c33e4b01d43a70e8dd1"}, {"problem": 38, "code": "(fn [& nums]\n  (last (sort nums)))", "user": "52b52c29e4b0c58976d9ad38"}, {"problem": 38, "code": "#(reduce \n  (fn [a x]\n    (if (> x a)\n      x\n      a)\n  ) 0 %&)", "user": "5e3a25d4e4b01d43a70e8dde"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5e3a8929e4b01d43a70e8de3"}, {"problem": 38, "code": "(fn [& xs] (last (sort xs)))", "user": "5e392de0e4b01d43a70e8dcb"}, {"problem": 38, "code": "(comp last sort list)", "user": "5e381434e4b01d43a70e8db4"}, {"problem": 38, "code": "(fn [& args] (if (not (nil? args)) (last (sort < args)) ))", "user": "5e3f291ae4b01d43a70e8e33"}, {"problem": 38, "code": "(comp last sort list)", "user": "5e3e23d9e4b01d43a70e8e20"}, {"problem": 38, "code": "(fn\n  [& nums]\n  (reduce (fn [x y] (if (> x y) x y)) nums))", "user": "5c9a638fe4b048ec896c5aae"}, {"problem": 38, "code": "(fn [& numbers]\n   (loop [ns (rest numbers)\n          result (first numbers)]\n     (if (empty? ns)\n       result\n       (let [[h & t] ns] (recur t (if (< h result) result h))))))", "user": "5e3ef7d4e4b01d43a70e8e2d"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5e259d05e4b05b4b01516169"}, {"problem": 38, "code": "(fn my-max [& args]\n  (reduce (fn [result item]\n            (if (> result item)\n              result\n              item)\n            ) 0 args))", "user": "5e348945e4b0650de70e2b1d"}, {"problem": 38, "code": "(fn [& coll]\n  (reduce (fn [x y] \n            (if (> x y)\n              x \n              y))\n          coll))", "user": "5e12b21be4b099d064962feb"}, {"problem": 38, "code": ";; (max-value [1 3 331 23]) -> 331\n(fn max-value [x & more]\n  (if (empty? more) x\n      (let [max-of-rest (apply max-value more)]\n                        (if (>= x max-of-rest) x\n                            max-of-rest))))", "user": "5e3e0b3fe4b01d43a70e8e1e"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (< %1 %2) %2 %1) x))", "user": "5e41b679e4b01d43a70e8e58"}, {"problem": 38, "code": "#(first(reverse  (sort %&)))", "user": "5e444cc7e4b01d43a70e8e7f"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5e17c269e4b00200644e3d5c"}, {"problem": 38, "code": "(fn maxer2 [& args]\n   (reduce (fn [x y] \n              (if (< x y) y x))\n    args))", "user": "5d078e2de4b0cc9c915881fa"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5e4471e1e4b01d43a70e8e85"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5e2586afe4b05b4b01516167"}, {"problem": 38, "code": "(fn\n  [& nums]\n  (reduce #(if (> %1 %2) %1 %2) nums))", "user": "5e47e1eee4b043cd24807a35"}, {"problem": 38, "code": "(fn [& numbers]\n              (-> numbers\n                  (sort)\n                  (last))\n              )", "user": "5e491182e4b043cd24807a46"}, {"problem": 38, "code": "(fn p [& xs]\n (reduce #(if (< %1 %2) %2 %1) xs))", "user": "5e42b688e4b01d43a70e8e6b"}, {"problem": 38, "code": "(fn [& nums] (reduce #(if (< %1 %2) %2 %1) nums))", "user": "5d828b7ee4b0915913b1d382"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5e459514e4b01d43a70e8e97"}, {"problem": 38, "code": "(fn [& a]\n  (loop [elem a\n         maxi -1]\n    (if (empty? elem)\n      maxi\n      (do\n        (if (> (first elem) maxi)\n          (recur (rest elem) (first elem))\n          (recur (rest elem) maxi))))) )", "user": "5e4b919ce4b0889a8790a556"}, {"problem": 38, "code": "(fn\n  [& args]\n  (loop\n    [x (first (vec args))]\n    (if (empty? (filter #(> % x)  (vec args)) )\n      x\n      (recur  (first (filter #(> % x) (vec args)))))\n    )\n)", "user": "5e197f93e4b0dc9594008508"}, {"problem": 38, "code": "#(reduce (fn [l r] (if (> l r) l r)) %&)", "user": "5e44c804e4b01d43a70e8e89"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5e3c6db5e4b01d43a70e8e05"}, {"problem": 38, "code": "(fn[& args] (first(sort > args)))", "user": "5e4375e7e4b01d43a70e8e73"}, {"problem": 38, "code": "(fn [& x]\n    (reduce #(if (< % %2) %2 %) (first x) x)\n)", "user": "5e42ba49e4b01d43a70e8e6c"}, {"problem": 38, "code": "#_(fn [& xs]\n   (loop [x (first xs)\n          more (rest xs)]\n     (if (seq more)\n       (recur (if (> x (first more)) x (first more))\n              (rest more))\n       x)))\n#_(fn [x & more]\n  (reduce (fn [x y] (if (> x y) x y)) x more))\n\n(fn [x & more]\n  (reduce #(if (> %1 %2) %1 %2) x more))", "user": "505223fae4b0a561d07d8f17"}, {"problem": 38, "code": "(fn [& args] \n  (reduce \n   (fn [m x] (if (> x m) x m)) \n   (first args) \n   args))", "user": "5e486cb0e4b043cd24807a3e"}, {"problem": 38, "code": "(fn [& xs]\n  (last (sort xs)))", "user": "5e5349ebe4b027a2e10ac0e2"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5ddd6cfae4b0948ae9d9adc4"}, {"problem": 38, "code": "(fn [& x] (reduce (fn [number1 number2] (if (< number1 number2) number2 number1)) x))", "user": "5e4ba8e8e4b0889a8790a55a"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5e501de1e4b027a2e10ac0bf"}, {"problem": 38, "code": "#(reduce (fn [r x] (if (> r x) r x)) 0 %&)", "user": "5e2bea53e4b05b4b015161d2"}, {"problem": 38, "code": "(fn [& l]\n  (reduce\n    (fn [x y]\n      (if (> x y) x y)\n    )\n    l\n  )\n)", "user": "5e546e20e4b027a2e10ac0eb"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5bfd6668e4b0bdcf453d15fc"}, {"problem": 38, "code": "(fn [& vals] (first (sort > vals)))", "user": "5e5096c6e4b027a2e10ac0c6"}, {"problem": 38, "code": "#(last(sort %&))", "user": "5e52ce65e4b027a2e10ac0dd"}, {"problem": 38, "code": "(fn [& numbers] (\n                            reduce #(if (> %1 %2) %1 %2) 0 numbers\n                            ))", "user": "5e566668e4b027a2e10ac0f9"}, {"problem": 38, "code": "(fn [& xs] \n  (reduce (fn [acc, x]\n            (if (< acc x) x acc))\n          xs))", "user": "5e41a67be4b01d43a70e8e56"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "5e32b010e4b05b4b01516242"}, {"problem": 38, "code": "(fn [& x]\n  (reduce #(if (> %1 %2)\n             %1 %2) x))", "user": "5e50012ae4b027a2e10ac0bd"}, {"problem": 38, "code": "(fn [& numbers]\n  (reduce #(if \n             (> %1 %2)\n             %1\n             %2)\n          numbers))", "user": "5e471203e4b043cd24807a2a"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "5d83b9aae4b0915913b1d386"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2)\n                     %1\n                     %2\n                     ) a))", "user": "5e453725e4b01d43a70e8e93"}, {"problem": 38, "code": "(fn max_ [x & y] (if (seq y) (apply max_ (if (< x (first y)) y (cons x (rest y)))) x))", "user": "5e5b8d92e4b0fd0acd158658"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5e5c425ae4b0fd0acd158662"}, {"problem": 38, "code": "(fn [& args] \n  (last (sort args)))", "user": "5e563c88e4b027a2e10ac0f6"}, {"problem": 38, "code": "(fn get-max [& params]\n   (loop [args params, mmax 0]\n      (if (not (empty? args))\n         (recur (drop 1 args)\n                (let [k (first args)]\n                   (if (> k mmax) k mmax)))\n         mmax)))", "user": "5e595637e4b027a2e10ac10e"}, {"problem": 38, "code": "(fn [& values]\n  (reduce #(if (> %1 %2) %1 %2) values))", "user": "5e4d98dce4b027a2e10ac0a7"}, {"problem": 38, "code": "(fn [& args] (last (sort (seq args))))", "user": "5e5913b5e4b027a2e10ac10b"}, {"problem": 38, "code": "#(reduce (fn[mymax mynum] (if (< mymax mynum) mynum mymax)) 0 %&)", "user": "5e48ec09e4b043cd24807a45"}, {"problem": 38, "code": "(fn mx [& b] (if (== (count b) 1) (first b)\n               (if (> (first b) (first (rest b)) ) \n                 (apply mx (conj (rest (rest b)) (first b) ))\n                 (apply mx (rest b))\n                 )\n               )\n  )", "user": "5e31a4b0e4b05b4b0151622b"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [acc x] (if (> x acc) x acc)) args))", "user": "5e5fd7afe4b0fd0acd158680"}, {"problem": 38, "code": "#(reduce (fn [m v] (if (> m v) m v)) %&)", "user": "5e5f8a07e4b0fd0acd15867c"}, {"problem": 38, "code": "(fn [& lst]\n  (reduce #(if (> %1 %2) %1 %2) 0 lst))", "user": "5e619496e4b0fd0acd158690"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "5e5fa1ffe4b0fd0acd15867d"}, {"problem": 38, "code": "(fn my-max\n  ([] nil)\n  ([x] x)\n  ([x & coll]\n   (if (> x (first coll))\n     x\n     (first coll))))", "user": "5e62444fe4b0fd0acd158694"}, {"problem": 38, "code": "#(reduce (fn [val largest] (if (> val largest) val largest)) %&)", "user": "5df70ee8e4b0a607a9a45c8a"}, {"problem": 38, "code": "(fn biggest\n  ([x y]\n   (if (> x y) x y))\n  ([x y & more]\n   (reduce biggest (biggest x y) more)))", "user": "5e4e3c31e4b027a2e10ac0ad"}, {"problem": 38, "code": "(fn [& nums] (reduce (fn [out, n] (if (> out n) out n)) nums))", "user": "5e65bfe4e4b0fd0acd1586b9"}, {"problem": 38, "code": "(fn [& v] (reduce #(if (> %1 %2) %1 %2)v))", "user": "561ea5cae4b064ca9f4b16c4"}, {"problem": 38, "code": "#(last (sort (vec %&)))", "user": "5e66c144e4b0e171e1033683"}, {"problem": 38, "code": "#(reduce\n    (fn [n1 n2]\n      (if (> n1 n2) n1 n2))\n    %&)", "user": "5e5f2c17e4b0fd0acd158678"}, {"problem": 38, "code": "(fn [& args] \n  (reduce (fn [next-val max-val]\n            (if (> next-val max-val)\n              next-val\n              max-val))\n           -999999999\n           args\n  )\n)", "user": "5e60a0cae4b0fd0acd158689"}, {"problem": 38, "code": "(fn [num & rest] (reduce #(if (> %2 %) %2 %) num rest))", "user": "5df79c31e4b0a607a9a45c9b"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5b562842e4b02d533a91bd3f"}, {"problem": 38, "code": "(fn [& nextNum]\n  (reduce #(if (< %1 %2) %2 %1) nextNum))", "user": "5e663073e4b0fd0acd1586bc"}, {"problem": 38, "code": "(fn mymax [arg & rest]\n  (-> (conj rest arg) (sort) (last)))", "user": "5e6834e0e4b04793f195eaf9"}, {"problem": 38, "code": "(fn [& x]\n  (last (sort x)))", "user": "53b14dfce4b047364c04448d"}, {"problem": 38, "code": "(fn [& vals] (last (sort vals)))", "user": "5e692be9e4b04a83ad7cd269"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5e614a9ee4b0fd0acd15868e"}, {"problem": 38, "code": "(fn [& xs]\n     (reduce\n       #(if (> %1 %2) %1 %2)\n       xs))", "user": "54dc84ede4b024c67c0cf784"}, {"problem": 38, "code": "(fn [& a] (->> a sort last))", "user": "5dd47f7ce4b0948ae9d9ad6d"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5e2ead6ae4b05b4b015161f5"}, {"problem": 38, "code": "(fn [& n] (reduce (fn [a b] (if (> b a) b a)) 0 n))", "user": "5e63ffa0e4b0fd0acd1586a6"}, {"problem": 38, "code": "(fn mymax [fst & nums]\n\t(if (= nil nums)\n      fst\n      (reduce (fn [a b] (if (>= a b) a b)) fst nums)))", "user": "5e20a159e4b05b4b01516118"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "5e6ff368e4b04a83ad7cd2a8"}, {"problem": 38, "code": "(fn [& xs] (\n     reduce (fn [xs, x] (if (> xs x) xs x)) (first xs) xs                \n))", "user": "5e6b9955e4b04a83ad7cd27b"}, {"problem": 38, "code": "(comp first (partial sort >) vector)", "user": "5e708c4be4b085ba37836dad"}, {"problem": 38, "code": "(fn [a & args]\n  (reduce (fn [mx item]\n            (if (> item mx)\n              item\n              mx))\n          a\n          args))", "user": "5e62c405e4b0fd0acd15869b"}, {"problem": 38, "code": "(fn\n  [& args]\n  (reduce (fn [a b] (if (> a b) a b)) args))", "user": "5e6e6537e4b04a83ad7cd29a"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5e71b6e7e4b085ba37836dbe"}, {"problem": 38, "code": "(fn alternative-max [& args] (last (sort args)))", "user": "5e731c7fe4b085ba37836dcd"}, {"problem": 38, "code": "(fn [& coll]\n  (reduce #(if (> % %2) % %2) coll))", "user": "5e724492e4b085ba37836dc7"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "5d28d935e4b092dab7f59c88"}, {"problem": 38, "code": "(fn [& x] (-> x sort last))", "user": "5e639b4be4b0fd0acd1586a2"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) 0 xs))", "user": "5e67ab18e4b0e171e103368a"}, {"problem": 38, "code": "#(last (sort < %&))", "user": "5e6ca949e4b04a83ad7cd289"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [value x] (if (> value x)\n                          value\n                          x)) args))", "user": "5e76274ce4b085ba37836deb"}, {"problem": 38, "code": "(fn [& lst]\n  (reduce #(if (< %1 %2) %2 %1) lst))", "user": "5e668d87e4b0e171e1033681"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "5e5b6ff1e4b0fd0acd158657"}, {"problem": 38, "code": "(fn [& args] (last (sort (into() args))))", "user": "5e735071e4b085ba37836dcf"}, {"problem": 38, "code": "(fn [ & coll ]\n    (reduce (fn [x y] (if (> x y) x y)) coll))", "user": "5e12327ee4b099d064962fe5"}, {"problem": 38, "code": "(fn max? [x y & more] (reduce (fn [x y] (if (> x y) x y)) (if (> x y) x y) more))", "user": "5e1308dde4b099d064962ff4"}, {"problem": 38, "code": "(fn [x & other]\n  (last (sort (conj other x))))", "user": "5e78e8d3e4b085ba37836dfd"}, {"problem": 38, "code": "(fn _max_\n  ([] 0)\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] (_max_ (_max_ x y) (apply _max_ more))))", "user": "5e7af7ffe4b085ba37836e0f"}, {"problem": 38, "code": "(fn [& args]\n    (reduce #(if (> %2 %1)\n               %2\n               %1) args))", "user": "59bdeb22e4b0a024fb6ae42d"}, {"problem": 38, "code": "(fn\n  [& args]\n  (loop [maxi (first args) rest (next args)]\n    (if (empty? rest) maxi\n                      (recur ( #( if (> %1 %2) %1 %2) maxi (first rest)) (next rest)))\n    )\n  )", "user": "5e77ece9e4b085ba37836df3"}, {"problem": 38, "code": "#(loop [m %1 lst %&]\n\n    (cond\n      (empty? lst) m\n      :else \n        (recur\n          (cond\n          (> (first lst) m) (first lst)\n          :else m\n          )\n          (rest lst)\n        )\n    )\n)", "user": "5e7aba9fe4b085ba37836e0c"}, {"problem": 38, "code": "(fn mymax [& xs]\n  (reduce (fn [m x]\n            (if (> m x) m x)) xs))", "user": "5e7f075ee4b085ba37836e36"}, {"problem": 38, "code": "(fn [& args]\n    (reduce (fn [x y]\n              (if (> x y) x y))\n            args))", "user": "5e7b1ef4e4b085ba37836e10"}, {"problem": 38, "code": "(fn [& params]\n  (loop [[item & remaining] params y nil]\n    (let [newVal (if (or (= nil y) (> item y))\n                   item\n                   y)]\n      (if (= remaining nil)\n        newVal\n        (recur remaining newVal)))))", "user": "5e7f62cce4b085ba37836e3b"}, {"problem": 38, "code": ";only for positive values\n\n\n\n(comp last sort list)", "user": "5e79fcb9e4b085ba37836e08"}, {"problem": 38, "code": "(fn[x & xs](-> (flatten (cons x xs)) (sort) (last)))", "user": "5e7bb000e4b085ba37836e1d"}, {"problem": 38, "code": "(fn func [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5e805895e4b085ba37836e44"}, {"problem": 38, "code": "(fn [& tlist]\n   (last (sort tlist)))", "user": "5e80003de4b085ba37836e42"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5e8308abe4b09a7a73c8bbb4"}, {"problem": 38, "code": "(fn [& x]\n  (loop [xs (seq x)\n         m (first x)]\n    (if xs \n      (if (< m (first xs))\n        (recur (next xs) (first xs))\n        (recur (next xs) m)\n        )\n      m\n    )\n   )\n    )", "user": "5e5f83a2e4b0fd0acd15867b"}, {"problem": 38, "code": "(fn [& numbers] (last (sort numbers)))", "user": "5e70c16de4b085ba37836dae"}, {"problem": 38, "code": "#(first(sort > %&))", "user": "5e832e75e4b09a7a73c8bbb5"}, {"problem": 38, "code": "(fn find_max [& values] \n  (reduce #(if (> %1 %2) %1 %2) values)\t\n)", "user": "5e69589de4b04a83ad7cd26d"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5048806be4b0ec70b3ef8d9e"}, {"problem": 38, "code": "#(loop [max-element (first %&)\n        tail (rest %&)]\n   (if (nil? (first tail))\n     max-element\n     (recur (if (< max-element (first tail)) (first tail) max-element) (rest tail))))", "user": "5e790f6be4b085ba37836e01"}, {"problem": 38, "code": "(fn [& rest]\n  (reduce\n   (fn [acc x] (if\n                (> x acc)\n                 x\n                 acc))\n   rest))", "user": "5e860270e4b09a7a73c8bbdb"}, {"problem": 38, "code": "(fn my-func [& values] \n  (loop [largest 0 \n         values values]\n    (if (empty? values)\n      largest\n      (if (< largest (nth values 0))\n        (recur (nth values 0) (rest values))\n        (recur largest (rest values))))))", "user": "5d517784e4b0776584bd6f60"}, {"problem": 38, "code": "(fn [& args ] \n  (loop [i args m (first args)]\n    (if (first i)\n      (recur (rest i) \n             (if (> (first i) m)\n               (first i)\n               m\n               ))\n      m)))", "user": "5e85163be4b09a7a73c8bbd0"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5e887c61e4b0cb0169546309"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5e85fa2ce4b09a7a73c8bbd9"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) args))", "user": "5b02ab12e4b0cc2b61a3bd53"}, {"problem": 38, "code": "(fn [& x] ((comp last sort) x))", "user": "5e872aaae4b09a7a73c8bbe5"}, {"problem": 38, "code": "#(reduce (fn [x y] (if (> x y) x y)) (vec %&))", "user": "5e13a6b7e4b099d064963001"}, {"problem": 38, "code": "(fn my-max [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5d6f8b4de4b04d129b00f2d3"}, {"problem": 38, "code": "(fn [& nums]\n  (loop [iter nums\n         mx 0]\n    (if (seq iter)\n      (if (< mx (first iter))\n        (recur (rest iter) (first iter))\n        (recur (rest iter) mx))\n      mx)))", "user": "5e7b68e8e4b085ba37836e17"}, {"problem": 38, "code": "(fn [& args]\n   (reduce #(if (> %1 %2) %1 %2) args))", "user": "5e856736e4b09a7a73c8bbd2"}, {"problem": 38, "code": "(fn [& things] (reduce #(if (> %1 %2) %1 %2) things))", "user": "5dcace6be4b02b31cc3da3b1"}, {"problem": 38, "code": "(fn biggest [& xs]\n  (reduce #(if (> %2 %1)\n             %2\n             %1)\n          xs))", "user": "5dc88a38e4b02f9375f4e1db"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "5e8c3e8fe4b0cb0169546322"}, {"problem": 38, "code": "(fn f\n  \n  ([x]\n    (f (first x) (drop 1 x)))\n  ([x _rest]\n    (cond\n        (number? _rest) (f (conj () x _rest))\n        (= (count _rest) 0) x\n        (> x (first _rest)) (f x (drop 1 _rest))\n        :else (f (first _rest) (drop 1 _rest))))\n  ([x y & _rest]\n    (f x (conj _rest y))))", "user": "5c9f952ae4b048ec896c5b59"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5e83696ce4b09a7a73c8bbb7"}, {"problem": 38, "code": "(fn mx\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] (reduce mx (mx x y) more)))", "user": "4eb70649535d7eef30807373"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5e85b853e4b09a7a73c8bbd5"}, {"problem": 38, "code": "(fn [& args] \n  (reduce (fn [x y]\n            (if (> x y)\n              x\n              y)) args))", "user": "5c7d590ae4b0d597f478caaa"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (>= %1 %2) %1 %2) args))", "user": "5e80edc3e4b09a7a73c8bba9"}, {"problem": 38, "code": "#(first (reverse (sort %&)))", "user": "5e7dc2d8e4b085ba37836e2f"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5e8ce2fee4b0cb0169546328"}, {"problem": 38, "code": "(fn [& res]\n  (reduce (fn [acc, n] (if (> acc n) acc n)) 0 res))", "user": "5c3e5227e4b08cd430848e80"}, {"problem": 38, "code": "(fn [& x]\n (loop[m 0 l x]\n (if (empty? l) m \n (recur (if (> (first l) m) (first l) m ) (rest l)  )  \n )  \n )\n )", "user": "5e94ff5fe4b0fbed045a37ff"}, {"problem": 38, "code": "#(loop [mx (first %&) sq (rest %&)]\n   (if (empty? sq)\n     mx\n     (recur \n      (let [el (first sq)]\n        (if (> el mx)\n          el\n          mx\n       )\n      ) \n      (rest sq)\n  )\n )\n)", "user": "5e947a69e4b0fbed045a37f8"}, {"problem": 38, "code": "(fn [& items]\n  (reduce (fn [acc item] (if (> acc item) acc item)) items))", "user": "5e84b48ee4b09a7a73c8bbc8"}, {"problem": 38, "code": "(comp last sort list)", "user": "5e954b9ee4b0fbed045a3809"}, {"problem": 38, "code": "(fn [& args] \n  (reduce (fn [a b] \n          (if (> a b) \n            a \n            b))\n          args))", "user": "5be9ad9be4b0f319e2d7ec76"}, {"problem": 38, "code": "(fn [& items]\n  (reduce (fn [val acc]\n            (if (> val acc)\n              val\n              acc)) 0 items))", "user": "5e5f75a0e4b0fd0acd15867a"}, {"problem": 38, "code": "(fn this [& arg](reduce \n                 #(if (> %1 %2) %1 %2)\n                 arg))", "user": "5cc092d1e4b0ccb061962790"}, {"problem": 38, "code": "(fn maxValue\n  [& arr]\n  (loop [maxi nil\n         lst arr]\n    (let [value (first lst)]\n      (cond\n        (empty? lst) maxi\n        (nil? maxi) (recur value (rest lst))\n        (< maxi value) (recur value (rest lst))\n        :else (recur maxi (rest lst))))))", "user": "5e9636fee4b0fbed045a3816"}, {"problem": 38, "code": "(fn [& seq]\n   (reduce #(if (> %1 %2) %1 %2) 0 seq))", "user": "5e980583e4b0157ca96647d5"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) 0 x))", "user": "5e96c662e4b0157ca96647ca"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5e980e6be4b0157ca96647d6"}, {"problem": 38, "code": "(fn [& xs] \n  (reduce (fn [a b] (if (> a b) a b)) xs))", "user": "5e99cbd4e4b0157ca96647e6"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5e9878b9e4b0157ca96647d8"}, {"problem": 38, "code": "(fn maxx [& args]\n  (reduce\n  \t#(if (> %1 %2) %1 %2)\n    args))", "user": "5e98e8a9e4b0157ca96647dc"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5e996e76e4b0157ca96647e4"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "user": "5e976fa8e4b0157ca96647cf"}, {"problem": 38, "code": "(fn \n  [x & n]\n  (reduce \n   #(if (> %1 %2) %1 %2) x n))", "user": "5e95013fe4b0fbed045a3800"}, {"problem": 38, "code": "(fn max-val\n  [& params]\n  (reduce\n   (fn [x y]\n     (if (< x y) y x))\n   params))", "user": "5e9771dee4b0157ca96647d0"}, {"problem": 38, "code": "(fn [& lst]\n  (loop\n    [m 0\n     lst lst]\n    (if (empty? lst)\n      m\n      (if (> (first lst) m)\n        (recur (first lst) (rest lst))\n        (recur m (rest lst))))))", "user": "5e978fe5e4b0157ca96647d1"}, {"problem": 38, "code": "(#(comp first reverse sort vector))", "user": "5e9e8648e4b00a66d4a95178"}, {"problem": 38, "code": "#(last(sort %&))", "user": "5e9b7aefe4b0157ca96647f1"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5e950310e4b0fbed045a3802"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5e9e408fe4b00a66d4a95172"}, {"problem": 38, "code": "(fn [& x]\n  (loop [mx (first x) y (next x)]\n    (if y\n      (if (<= mx (first y))\n        (recur (first y) (next y))\n        (recur mx (next y))\n      )\n      mx\n    )\n  )\n)", "user": "5df08767e4b093ff717275bf"}, {"problem": 38, "code": "(fn test ([x] x) ([x y] (if (> x y) x y)) ([x y & more] (reduce test (test x y) more)))", "user": "5e85d0bde4b09a7a73c8bbd6"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5e9d1c75e4b0157ca9664801"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5ea21034e4b00a66d4a95191"}, {"problem": 38, "code": "(fn [& nums] (loop [currMax (first nums)\n                    nums nums]\n               (if (empty? nums)\n                 currMax\n                 (recur\n                  (if (> (first nums) currMax) (first nums) currMax)\n                  (rest nums)))))", "user": "5e950178e4b0fbed045a3801"}, {"problem": 38, "code": "(fn max2 [& x]\n  (reduce (fn [y z]\n              (if (> y z)\n                y\n                z)) x))", "user": "5e2ef900e4b05b4b015161fc"}, {"problem": 38, "code": "(fn \n  [x & y]\n  (reduce \n   #(if (> %1 %2) %1 %2) x y))", "user": "5ea3711ae4b00a66d4a9519d"}, {"problem": 38, "code": "(fn [& args] (last (sort (flatten args))))", "user": "5e9e642ce4b00a66d4a95174"}, {"problem": 38, "code": "(fn [& args]\n   (loop [c args, m (first c)]\n     (let [head (first c), tail (rest c)]\n       (cond\n         (empty? c) m\n         (> head m) (recur tail head)\n         :else (recur tail m)))))", "user": "5e9f38cce4b00a66d4a9517e"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5ea444b7e4b00a66d4a951a0"}, {"problem": 38, "code": "(fn [& ls]\n  (loop [[fs & nx :as sq] ls\n         big nil]\n    (cond (empty? sq) big\n          (or (nil? big) (> fs big)) (recur nx fs)\n          :else (recur nx big))))", "user": "59750a68e4b01722bebd4cba"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5ea6f88de4b00a66d4a951b1"}, {"problem": 38, "code": "(fn [& xs]\n  (let [mx-helper (fn [a b rst]\n                    (if (empty? rst)\n                      (if (> a b) a b)\n                      (recur (if (> a b) a b) (first rst) (drop 1 rst))))]\n    (mx-helper (first xs) (second xs) (drop 2 xs))))", "user": "5ea0d417e4b00a66d4a9518a"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5ea7b04de4b00a66d4a951b6"}, {"problem": 38, "code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2 ) coll))", "user": "5ea970d1e4b00a66d4a951c6"}, {"problem": 38, "code": "(fn [& zeq] (last (sort zeq)))", "user": "5ea97df7e4b00a66d4a951c8"}, {"problem": 38, "code": "(fn [& params] (reduce #(if (> %1 %2) %1 %2) 0 params))", "user": "5c9adfebe4b048ec896c5ab9"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce\n   (fn [a b]\n     (if (> a b)\n       a\n       b))\n   (first xs)\n   xs))", "user": "5e64ae6ce4b0fd0acd1586ac"}, {"problem": 38, "code": "(fn [& the-rest] (last (apply sorted-set the-rest)))", "user": "5ea8bed8e4b00a66d4a951c2"}, {"problem": 38, "code": "(fn [& ns] (reduce (fn [x y] (if (> x y) x y)) 0 ns))", "user": "5eb1c786e4b00a66d4a95201"}, {"problem": 38, "code": "(fn temp\n  [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "5e88a676e4b0cb016954630a"}, {"problem": 38, "code": "(fn [& vals]\n  (let [s (sort vals)]\n    (nth s (dec (count s)))))", "user": "5eb2c2c3e4b00a66d4a9520b"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a v] (if (> v a) v a)) 0 args))", "user": "5eb1e42ae4b00a66d4a95202"}, {"problem": 38, "code": "(fn [& arr] (reduce (fn [a b] (if (< a b) b a)) 0 arr))", "user": "5eb4927fe4b00a66d4a95221"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [result item]\n            (if (> item result)\n              item\n              result))\n          (first args)\n          args))", "user": "5eb1a80ce4b00a66d4a951ff"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5eb56fc1e4b00a66d4a95224"}, {"problem": 38, "code": "(fn my-max\n  [& args]\n  (loop [numbers (rest args)\n         out (first args)]\n    (if (empty? numbers)\n      out\n      (recur (rest numbers) (if (> (first numbers) out) (first numbers) out)))))", "user": "5eb22708e4b00a66d4a95204"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5eb193fde4b00a66d4a951fe"}, {"problem": 38, "code": "(fn [& args]\n  (loop [acc (first args) l (reverse args)]\n    (if (= (count l) 0)\n             acc\n             (recur (if (> (peek l) acc) (peek l) acc) (pop l)))))", "user": "5eb68184e4b00a66d4a95234"}, {"problem": 38, "code": "(fn [& args] (reduce \n         #(if (> %1 %2) %1 %2)\n         0 args))", "user": "5eb741e4e4b00a66d4a9523b"}, {"problem": 38, "code": "(fn [& args] \n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "5eb61e63e4b00a66d4a95231"}, {"problem": 38, "code": "(fn [& l]\n    (reduce\n     (fn [res number]\n       (if (< res number)\n         number\n         res))\n     (first l) (rest l)))", "user": "5a3e1243e4b0447ef91cc5ae"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5ebb0f7be4b00a66d4a95261"}, {"problem": 38, "code": "(fn [& nums] (last (sort nums)))", "user": "5eac8e27e4b00a66d4a951e3"}, {"problem": 38, "code": "(fn [& a] (reduce #(if(< %1 %2) %2 %1) a))", "user": "5eb5d9bbe4b00a66d4a9522e"}, {"problem": 38, "code": "#(first (reverse (sort %&)))", "user": "5e0828b9e4b0978307768fbe"}, {"problem": 38, "code": "(fn [& s] (reduce (fn [h e] (if (> h e) h e))\n                  s))", "user": "5e4beca9e4b0889a8790a560"}, {"problem": 38, "code": "(comp last sort list)", "user": "5e208e4be4b05b4b01516113"}, {"problem": 38, "code": "#(-> %& (sort) (last))", "user": "51412b0ae4b0694e2952b79d"}, {"problem": 38, "code": "(fn ! [& x]\n  (let [a (first x)\n        b (second x)\n        r (rest (rest x))]\n    (if (empty? r)\n      (if (> a b)\n        a \n        b)\n      (if (> a b)\n        (apply ! (cons a r))\n        (apply ! (cons b r))))))", "user": "5ebdb3d2e4b00a66d4a95275"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5ebc7c13e4b00a66d4a95267"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5ebff55de4b00a66d4a95286"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5e2f73e5e4b05b4b01516204"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5eb2eeaee4b00a66d4a9520d"}, {"problem": 38, "code": "(fn [& xs]\n  (->>\n   (sort xs)\n   last))", "user": "5ec21ef0e4b00a66d4a95299"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [x y]\n            (if (> x y) x y)) args))", "user": "5ebaa4a3e4b00a66d4a95258"}, {"problem": 38, "code": "(fn [& coll]\n  (reduce (fn [a b]\n            (if (> a b)\n              a \n              b)) coll))", "user": "5defc177e4b093ff717275af"}, {"problem": 38, "code": "(comp last sort vector)", "user": "5ebaf687e4b00a66d4a9525b"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "5ec3a13ae4b08d0ec38692b9"}, {"problem": 38, "code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) 0 coll))", "user": "525fea12e4b03e8d9a4a7025"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "user": "5d13af73e4b0902706380dbe"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) 0 args))", "user": "5ec6705be4b08d0ec38692d6"}, {"problem": 38, "code": "(fn [& x]\n    (reduce (fn [y z]\n                (if (> y z)\n                    y\n                    z))\n            x))", "user": "5ec66326e4b08d0ec38692d5"}, {"problem": 38, "code": "(fn [& l]\n  (loop [a (first l) left (rest l)]\n    (if (empty? left) a\n      (recur (if (< a (first left)) (first left) a) (rest left)))))", "user": "5ec7550ce4b08d0ec38692dd"}, {"problem": 38, "code": "(fn [& args]\n  (reduce \n    (fn [a b]\n      (if (< a b)\n        b\n        a)) \n     (into [] (seq args))))", "user": "5eb84ef4e4b00a66d4a95244"}, {"problem": 38, "code": "#(first (sort > %&))\n#_(fn [& xs] (reduce #(if (> %2 %1) %2 %1) 0 xs))", "user": "5de12192e4b0948ae9d9aded"}, {"problem": 38, "code": "(fn [& elems] (last (sort elems)))", "user": "5ec82b11e4b08d0ec38692e6"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce \n   (fn [acc x]\n     (if (> x acc)\n       x\n       acc))\n  \n  xs))", "user": "5e0b6375e4b099d064962f7b"}, {"problem": 38, "code": "(fn bla [& kargs]\n  (reduce (fn [%1 %2] (if (> %1 %2) %1 %2)) 0 kargs))", "user": "5ec03772e4b00a66d4a95289"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5ec943fde4b08d0ec38692f1"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %2 %1) %2 %1) xs))", "user": "5ec1b293e4b00a66d4a95296"}, {"problem": 38, "code": "(fn [& y] (reduce (fn [acc x] (if (> x acc) x acc)) 0 (into [] y)))", "user": "5ebed654e4b00a66d4a9527c"}, {"problem": 38, "code": "(fn\n  [& x]\n  (reduce #(if (> %1 %2) %1 %2) x))", "user": "5ec7d7f2e4b08d0ec38692e1"}, {"problem": 38, "code": "(fn maxL [& colls]\n  (reduce (fn fn-name [acc curr]\n            (if (> acc curr)\n              acc\n              curr \n              ))\n          colls\n          )\n  )", "user": "5ebb4751e4b00a66d4a95262"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5eccc5c2e4b016b56eae058f"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5ece8d93e4b016b56eae059e"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "5eb6561fe4b00a66d4a95233"}, {"problem": 38, "code": "#(first  (sort > %&))", "user": "5e9154c1e4b0cb0169546354"}, {"problem": 38, "code": "(fn [& args] (last (apply sort (list args))))", "user": "5ecf4ee4e4b016b56eae05a6"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %2 %1) %2 %1) x))", "user": "5ece3d25e4b016b56eae059b"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5ec2dd45e4b00a66d4a952a1"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "5ecf55dae4b016b56eae05a8"}, {"problem": 38, "code": "(fn [& numbers] \n  (last (sort numbers)))", "user": "5ed08785e4b016b56eae05b1"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5ecef5dfe4b016b56eae05a2"}, {"problem": 38, "code": "(fn mymax [& more] (reduce #(if (> %1 %2) %1 %2) 0 more))", "user": "5ec819b4e4b08d0ec38692e2"}, {"problem": 38, "code": "(comp last sort vector)", "user": "5ecfd429e4b016b56eae05a9"}, {"problem": 38, "code": "#(reduce (fn [x y] (if (>= x y) x y)) (first %&) (rest %&))", "user": "5ec6de19e4b08d0ec38692da"}, {"problem": 38, "code": "(fn [& _rest] \n  (let [myx (fn [a b] (if (> a b) a b))] \n    (reduce myx _rest)))", "user": "5ecc0831e4b016b56eae058c"}, {"problem": 38, "code": "(fn f [a & b] (last (sort (apply list a b))))", "user": "5ed15e23e4b016b56eae05ba"}, {"problem": 38, "code": "#(first (sort > %&))", "user": "5ed03b7fe4b016b56eae05ae"}, {"problem": 38, "code": "(fn [& li]\n  (last (sort li)))", "user": "5ec2930ae4b00a66d4a9529d"}, {"problem": 38, "code": "(fn [& nums] (reduce (fn [acc cur] (if (> cur acc) cur acc)) nums))", "user": "5e909685e4b0cb016954634d"}, {"problem": 38, "code": "(fn max-list [& lst] (loop [x (first lst) xs (rest lst)] (if (empty? xs) x (if (> x (first xs)) (recur x (rest xs)) (recur (first xs) (rest xs))))))", "user": "5ed4a4ade4b016b56eae05cd"}, {"problem": 38, "code": "(fn [& args]\n                 (loop [curr-max (first args), xs args]\n                   (if (empty? xs)\n                     curr-max\n                     (recur (if (> (first xs) curr-max)\n                              (first xs)\n                              curr-max)\n                            (rest xs)))))", "user": "5eccbce6e4b016b56eae058e"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5ed677bee4b016b56eae05e0"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5ecf55aae4b016b56eae05a7"}, {"problem": 38, "code": "(fn max-home-made [& nums]\n  ((fn bin-search [coll]\n     (let [n (count coll)]\n       (if (< n 2)\n         (first coll)\n         (let [half (quot n 2)\n               left (bin-search (take half coll))\n               right (bin-search (drop half coll))]\n           (if (< left right) right left))))) \n   nums))", "user": "5ed52854e4b016b56eae05d2"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "5ed3f2b9e4b016b56eae05c6"}, {"problem": 38, "code": "(fn[& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5ed6030de4b016b56eae05db"}, {"problem": 38, "code": "(fn [& s] (reduce #(if (>= %1 %2) %1 %2) s))", "user": "5ed9b912e4b0c7845d86b0e3"}, {"problem": 38, "code": "(fn [& args] (last (apply sorted-set args)))", "user": "5ed4b1e8e4b016b56eae05ce"}, {"problem": 38, "code": "(fn a [& b]\n  (reduce #(if (> %1 %2) %1 %2) 0 b))", "user": "5644149de4b0018b46ad8c07"}, {"problem": 38, "code": "(fn [& args]\n  ((fn fib [maks args]\n    (if (not (empty? args))\n      (if (> (first args) maks)\n        (fib (first args) (rest args))\n        (fib maks (rest args)))\n      maks)) 0 args))", "user": "5ed5148ee4b016b56eae05d1"}, {"problem": 38, "code": "(fn [& cal] (reduce (fn [a b] (if (< a b) b a)) cal))", "user": "5edaabade4b0c7845d86b0e8"}, {"problem": 38, "code": "(fn [& ls] (reduce\n  (fn [mx n]\n    (if (> n mx)\n      n\n      mx))\n  ls))", "user": "5ed875abe4b016b56eae05f2"}, {"problem": 38, "code": "(fn max_val [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5eac6a63e4b00a66d4a951e0"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "5ed4482be4b016b56eae05ca"}, {"problem": 38, "code": "(fn [& col] (last (sort col)))", "user": "565b371fe4b068f2fe63dbff"}, {"problem": 38, "code": "(fn [& x]\n    (reduce  #(if (> %1 %2) %1 %2) x)\n     )\n;#(last (sort %&))", "user": "5ed30cb6e4b016b56eae05c2"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "user": "5ebd7296e4b00a66d4a95273"}, {"problem": 38, "code": "(comp last sort list)", "user": "5ed9c2cde4b0c7845d86b0e4"}, {"problem": 38, "code": "(fn m [y & args] (reduce (fn [x y] (if (> y x) y x)) y args))", "user": "5ec25800e4b00a66d4a9529b"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce (fn [x y]\n            (if (pos? (.compareTo x y))\n              x\n              y)) x xs))", "user": "5ec5f7f2e4b08d0ec38692d1"}, {"problem": 38, "code": "#(last (sort%&))", "user": "5ed42731e4b016b56eae05c8"}, {"problem": 38, "code": "(comp last sort list)", "user": "5ed8a12fe4b0c7845d86b0d7"}, {"problem": 38, "code": "(fn maxa [& args]\n  (reduce #(if (> %1 %2) %1 %2) 0 args))", "user": "5edd6eb7e4b0c7845d86b0f7"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5ede8210e4b0c7845d86b0fe"}, {"problem": 38, "code": "(fn [first & rest]\n  (let [rest-vector (vec rest)\n        all (conj rest-vector first)\n        sorted (sort all)]\n    (last sorted)))", "user": "5d94a878e4b0d3f9b434ad29"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5c527129e4b0fb8c5ffd99de"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [a b] (if (> a b) a b))\n          (first args)\n          args))", "user": "5edfb1e5e4b0c7845d86b107"}, {"problem": 38, "code": "(fn [& v] (reduce (fn [a v] \n           (if (> a v) a v)) v))", "user": "53c73e8ae4b00fb29b2212a5"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5ee4b2e6e4b029a2061bbe90"}, {"problem": 38, "code": "(fn [maximum & remaining]\n  (let [[next-value & remaining-values] remaining]\n    (if (= next-value nil)\n      maximum\n    (if (> next-value maximum)\n      (recur next-value remaining-values)\n      (recur maximum remaining-values))))\n  )", "user": "5ee66158e4b029a2061bbe98"}, {"problem": 38, "code": ";;(fn [& args]\n;;  (last (sort args)))\n#(last (sort %&))", "user": "5edb07dde4b0c7845d86b0ed"}, {"problem": 38, "code": "(fn [& x] (reduce (fn [a b] (if (> a b) a b)) x))", "user": "5ed6c4ede4b016b56eae05e3"}, {"problem": 38, "code": "(fn [& params]\n   (reduce\n    (fn [result item]\n      (if (> item result)\n        item\n        result))\n    (first params)\n    params\n    ))", "user": "5ee75f8be4b029a2061bbea5"}, {"problem": 38, "code": "#(last(sort (flatten(list %&))))", "user": "5ee738dee4b029a2061bbea2"}, {"problem": 38, "code": "(fn mymax [& args]\n  (first (sort > args)))", "user": "5ec5812de4b08d0ec38692ca"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [acc x] (if (> acc x) acc x)) args))", "user": "5ee93720e4b029a2061bbeb7"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5ee81beae4b029a2061bbeac"}, {"problem": 38, "code": "(fn  [& s] (reduce (fn [acc s*] (if (> s* acc) s* acc)) (first s) (rest s)))", "user": "5d38971ce4b01671435dbd48"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [acc, arg] \n            (if (> arg acc) \n              arg \n              acc)) \n          0 args))", "user": "5eeb03dde4b029a2061bbeca"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [acc x] (if (> x acc) x acc)) 0 xs))", "user": "5eebbf9ee4b029a2061bbed2"}, {"problem": 38, "code": "(fn [& a]\n\t(let [m (atom -1)]\n\t\t(doseq [b a]\n\t\t\t(if (> b @m)\n\t\t\t\t(swap! m (constantly b))))\n\t\t@m))", "user": "5eea5ce7e4b029a2061bbec0"}, {"problem": 38, "code": "(fn max'\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n   (reduce max' (max' x y) more)\n   )\n  )", "user": "5ed81965e4b016b56eae05ed"}, {"problem": 38, "code": "(fn MAX [x & xs] \n  (if (empty? xs) x\n   (let [m (apply MAX xs)] \n     (if (> x m) x m))))", "user": "5eee7311e4b07c55ae4a0510"}, {"problem": 38, "code": "(fn [& params]\n  (reduce\n   \t(fn [largest x] (if (> largest x) largest x))\n   \t0\n   \tparams))", "user": "5cec07fce4b0a17bb84e2bf0"}, {"problem": 38, "code": "(fn \n  [& nums]\n  (last (sort nums)))", "user": "5e9b6471e4b0157ca96647f0"}, {"problem": 38, "code": "(fn teste\n  [& params]\n  (reduce\n   (fn [x y]\n     (if (< x y) y x))\n   params))", "user": "5eec2f79e4b07c55ae4a0504"}, {"problem": 38, "code": "(fn [& elem-list]\n   (reduce (fn [max-val new-val]\n             (if (> new-val max-val) new-val max-val))\n     elem-list))", "user": "5eecd339e4b07c55ae4a0507"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) 0 args))", "user": "5eee9352e4b07c55ae4a0512"}, {"problem": 38, "code": "(fn [& s] (last (sort s)) )", "user": "5edc16e1e4b0c7845d86b0f1"}, {"problem": 38, "code": "(fn [& vals] (last (sort vals)))", "user": "5ef28e95e4b07c55ae4a0535"}, {"problem": 38, "code": "(fn maxval [& seq]\n  (reduce #(if (> %1 %2)\n              %1\n              %2) seq))", "user": "5ef381a3e4b07c55ae4a053c"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce (fn [mx e] (if (pos? (- mx e)) mx e)) xs))", "user": "5eec1001e4b07c55ae4a0502"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [acc y] (if (> y acc) y acc)) Long/MIN_VALUE args))", "user": "5ef18431e4b07c55ae4a0529"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5eea5c98e4b029a2061bbebf"}, {"problem": 38, "code": "(fn [& args]\n  (-> args\n      (sort)\n      (last)))", "user": "5e83a273e4b09a7a73c8bbbb"}, {"problem": 38, "code": "#(reduce (fn [m v] (if (< m v) v m)) (first %&) (rest %&))", "user": "5ef5ee81e4b07c55ae4a054a"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "5eeb1cc3e4b029a2061bbecc"}, {"problem": 38, "code": "(fn [& l] \n  (reduce \n   (fn [a b] (if (> a b) a b) )\n     l) \n)", "user": "5ef78fdae4b09b61f08553c4"}, {"problem": 38, "code": "(fn mx [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "5ed70b97e4b016b56eae05e6"}, {"problem": 38, "code": "(fn [& coll]\n  (reduce (fn [arg1 arg2]\n         (if (>= arg1 arg2)\n           arg1\n           arg2)) coll))", "user": "5ec91154e4b08d0ec38692ed"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5ef9ea69e4b09b61f08553d1"}, {"problem": 38, "code": "(fn [& nums] (reduce #(if (> %1 %2) %1 %2) nums))", "user": "5dd45bb8e4b0948ae9d9ad6b"}, {"problem": 38, "code": "(fn [& items]\n    (reduce (fn [acc item]\n              (if (> item acc)\n                item\n                acc))\n            items))", "user": "5ef8e9e0e4b09b61f08553cb"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5eff339ae4b0cf489e8d7f0c"}, {"problem": 38, "code": "#(last(sort %&))", "user": "5eecf110e4b07c55ae4a050b"}, {"problem": 38, "code": "(fn [& ls]\n  (reduce (fn [a b] (if (> a b) a b)) (first ls) ls))", "user": "5f016f37e4b0cf489e8d7f20"}, {"problem": 38, "code": "(fn max-val [& args]\n  (first (reverse (sort (seq args)))))", "user": "5f03550ce4b0cf489e8d7f33"}, {"problem": 38, "code": "#(last (sort (into `() %&)))", "user": "5f011638e4b0cf489e8d7f1d"}, {"problem": 38, "code": "(fn mmax [& coll] (reduce (fn [x y] (if (< x y) y x)) coll))", "user": "5f003099e4b0cf489e8d7f17"}, {"problem": 38, "code": "(fn maxv [& args] (reduce (fn [a b] (if (> b a) b a)) args))", "user": "5f012a2ee4b0cf489e8d7f1e"}, {"problem": 38, "code": "(fn [& s] (reduce #(if (< %1 %2) %2 %1) s))", "user": "5f06da46e4b0cf489e8d7f54"}, {"problem": 38, "code": "(fn [& ints]\n    (reduce\n      (fn [a b] (if (< a b) b a))\n     ints))", "user": "5f02f365e4b0cf489e8d7f2c"}, {"problem": 38, "code": "(fn [& lst]\n  (reduce (fn [acc n]\n            (if (or (nil? acc)\n                    (> n acc))\n              n\n              acc))\n          nil\n          lst))", "user": "5484c3b2e4b0e286459a11a2"}, {"problem": 38, "code": "(fn [& args] (reduce #( if (> %1 %2) %1 %2 ) 0 args))", "user": "5f0890ffe4b0cf489e8d7f61"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5f088bb3e4b0cf489e8d7f5f"}, {"problem": 38, "code": "(fn\n     [& elems]\n     (reduce (fn [el1 el2] (if (> el1 el2) el1 el2)) elems))", "user": "5f0a4904e4b09a3f05b71805"}, {"problem": 38, "code": "(fn [& vals] (last (sort vals)))", "user": "58f98231e4b0438e51c2cf4c"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f082d9ee4b0cf489e8d7f5c"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57e070fde4b0bd073c202478"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [x y]\n            (if (> x y) x y))\n          0 (seq args)))", "user": "5f0c8b0de4b0f30dddfb5d4c"}, {"problem": 38, "code": "(fn [& xs]\n   (loop [mx (first xs)\n          i 0]\n     (if-not (< i (count xs))\n       mx\n       (let [new-mn (min mx (nth xs i))\n             new-mx (if (= new-mn mx) (nth xs i) mx)]\n         (recur new-mx (+ i 1))))))", "user": "58ed2e21e4b056aecfd47d7a"}, {"problem": 38, "code": "(fn [& args] (last (apply sorted-set args)))", "user": "58409e47e4b089d5ab817dee"}, {"problem": 38, "code": "(fn maxim [x y & sq]\n (if sq\n   (apply maxim (cons (if (> x y) x y) sq))\n   (if (> x y) x y)))", "user": "5dd84170e4b0948ae9d9ad93"}, {"problem": 38, "code": "#(last (sort %&))", "user": "548f1604e4b0e286459a1230"}, {"problem": 38, "code": "(fn [& ls]\n  (reduce #(if (> %1 %2) %1 %2) ls)\n)", "user": "5d73530ce4b02e6b30c93514"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f0824c5e4b0cf489e8d7f5b"}, {"problem": 38, "code": "#(reduce % %&) #(if (> %1 %2) %1 %2)", "user": "5ed80d50e4b016b56eae05eb"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "5d8a3f3ee4b0915913b1d3c9"}, {"problem": 38, "code": "(fn [& xs] (loop [m (first xs), arr (rest xs)]\n             (if-let [a (first arr)]\n               (if (> a m) (recur a (rest arr)) (recur m (rest arr)))\n               m)))", "user": "5e6ba862e4b04a83ad7cd27d"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5f01952fe4b0cf489e8d7f22"}, {"problem": 38, "code": "(fn [& numbers]\n  (reduce (fn [curr next] (if (> next curr) next curr))\n          numbers))", "user": "5f0b8243e4b0f30dddfb5d45"}, {"problem": 38, "code": "(fn [& r] (reduce #(if (> %1 %2) %1 %2) r))", "user": "5f1328dee4b091ba50b4dbb1"}, {"problem": 38, "code": "(fn [& ns]\n  (reduce #(if (> %2 %1) %2 %1) ns))", "user": "5d431c77e4b07c84aa5ae68f"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5e3121e5e4b05b4b01516221"}, {"problem": 38, "code": "(fn [& args] (reduce\n              (fn [acc x] (\n                           if (> x acc) x acc))\n              args\n              )\n  )", "user": "5b7f2d75e4b047b03b203768"}, {"problem": 38, "code": "(comp last sort list)", "user": "5f122f93e4b091ba50b4dbae"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f0f6540e4b091ba50b4db9c"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "5e33e399e4b0650de70e2b11"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> % %2) % %2) args))", "user": "5f03ab5be4b0cf489e8d7f37"}, {"problem": 38, "code": "(fn maximum-value [& args]\n    (last (sort (vec args)))\n)", "user": "5f0cb4f3e4b0f30dddfb5d4e"}, {"problem": 38, "code": "(fn my-max [& xs] (reduce #(if (> % %2) % %2) xs))", "user": "5509a23ee4b06e50f9beb11a"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce\n   (fn [acc next]\n     (if (< acc next)\n       next\n       acc))\n   nums))", "user": "5f10fb99e4b091ba50b4dba8"}, {"problem": 38, "code": "(fn [& values]\n  (reduce (fn [maxVal val] (if (> val maxVal) val maxVal))\n          (first values)\n          values))", "user": "5f15a50fe4b091ba50b4dbbc"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f0c3da4e4b0f30dddfb5d49"}, {"problem": 38, "code": "(fn [& items] (reduce #(if (> %1 %2) %1 %2) (first items) items))", "user": "5f009162e4b0cf489e8d7f1a"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args ))", "user": "5f086f54e4b0cf489e8d7f5e"}, {"problem": 38, "code": "(fn [& param] (last (sort param)))", "user": "5f08d0c5e4b0cf489e8d7f62"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y](if (< x y) y x)) args))", "user": "5f19ecbae4b091ba50b4dbdf"}, {"problem": 38, "code": "(fn my-max [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "5f15b1e2e4b091ba50b4dbbd"}, {"problem": 38, "code": "(fn [& a] (reduce #(if(> %1 %2) %1 %2) a))", "user": "5f1aade6e4b091ba50b4dbe4"}, {"problem": 38, "code": "(fn [& numbers] (reduce #(if (> %1 %2)\n                           %1\n                           %2) numbers))", "user": "5f0e32a1e4b0f30dddfb5d59"}, {"problem": 38, "code": "(fn [& xs] (last (sort xs)))", "user": "5f1c2755e4b0f565ad99825d"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "5e3071abe4b05b4b01516213"}, {"problem": 38, "code": "#(reduce (fn [so-far actual]\n           (if (< so-far actual)\n             actual\n             so-far)) %&)", "user": "5f17e3c5e4b091ba50b4dbd0"}, {"problem": 38, "code": "#(loop [the-set %&\n         current-max (first the-set)]\n\n    (println \"the-set = \" the-set)\n    (println \"current-max = \" current-max)\n\n    (if (seq the-set)\n      (recur\n        (rest the-set)\n        (if (> (first the-set) current-max)\n          (first the-set)\n          current-max ))\n      current-max))", "user": "5f1eebcee4b0f565ad998273"}, {"problem": 38, "code": "(fn [& l] (last (sort l)))", "user": "5aa5043ee4b0d174b936c88e"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "5f081f6de4b0cf489e8d7f5a"}, {"problem": 38, "code": "(fn [& x] ((fn big [a b] (if (empty? a) b (big (rest a) (if (> (first a) b) (first a) b)))) (rest x) (first x)))", "user": "5f06d26ae4b0cf489e8d7f53"}, {"problem": 38, "code": "(fn [& args] \n  (\n    reduce\n   \t(\n    \tfn [x y]\n     \t(\n         \tif (< x y)\n         \ty\n         \tx\n        )\n    )\n   \targs\n  )\n)", "user": "5f1c7c3be4b0f565ad998261"}, {"problem": 38, "code": "(fn [& rest] (-> rest sort last))", "user": "5e7d0bc9e4b085ba37836e2a"}, {"problem": 38, "code": "(fn [& sq]\n  (let [f (fn [sq last_max]\n    (cond\n      (empty? sq) last_max\n      (> (first sq) last_max) (recur (rest sq) (first sq))\n      :else (recur (rest sq) last_max)\n    ))]\n  (f (rest sq) (first sq))))", "user": "5bcc304ce4b07a9b28b1010c"}, {"problem": 38, "code": "(fn max-val [& coll]\n  (first (sort > coll)))", "user": "5f1f4411e4b0f565ad99827b"}, {"problem": 38, "code": "(fn [& nums] (->> nums (reduce #(if (> %2 %1) %2 %1) 0)))", "user": "5f0e8312e4b0f30dddfb5d5b"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5f21d172e4b0f565ad998286"}, {"problem": 38, "code": "(fn [& coll] (reduce (fn [current-max val] (if (> val current-max) val current-max)) coll))", "user": "5f247827e4b0f565ad998292"}, {"problem": 38, "code": "(fn [& array]\n   (reduce #(if (> %1 %2)\n              %1\n              %2) 0  array))", "user": "59331397e4b072a2710fd046"}, {"problem": 38, "code": "(fn f [& s]\n  (reduce (fn [acc s*] (if (> s* acc) s* acc)) (first s) (rest s)))", "user": "5f22e8c9e4b0f565ad99828b"}, {"problem": 38, "code": "(comp last #(sort %&))", "user": "5eedfc62e4b07c55ae4a050e"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f297f22e4b033932238a64e"}, {"problem": 38, "code": "(fn biggest\n   ([x] x)\n   ([x y] (if (<= x y) y x))\n   ([x y & zs]\n    y))", "user": "5f27cc7fe4b033932238a646"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f1af439e4b0f565ad998257"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "5f2a2a0de4b033932238a653"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [a b] (if (> a b) a b)) xs))", "user": "5f2c02d1e4b033932238a65f"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (< %1 %2) %2 %1) xs))", "user": "5f2d6787e4b033932238a66d"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (< %1 %2) %2 %1) xs))", "user": "5f275800e4b0857314092c93"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "5dc5982be4b02f9375f4e1c0"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f281a83e4b033932238a64a"}, {"problem": 38, "code": "(fn [& nums] (last (sort nums)))", "user": "5e74ee53e4b085ba37836dde"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "user": "51553ea7e4b06c5f6a1490a2"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f2fff76e4b033932238a681"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> % %2) % %2) args))", "user": "5f2d3c0ee4b033932238a66a"}, {"problem": 38, "code": "(fn maxVal [& param]\n  (reduce \n   (fn [x, y]\n     (if (< x y) y x))\n   param))", "user": "5efdb9bae4b0cf489e8d7f02"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f25a2b1e4b0117231e5035e"}, {"problem": 38, "code": "(fn [& l] (-> l sort last))", "user": "5f2c4c44e4b033932238a662"}, {"problem": 38, "code": "(comp last sort list)", "user": "5ee7274ce4b029a2061bbea0"}, {"problem": 38, "code": "#(last (sort %&))", "user": "52215fe1e4b0e6a83c8925cf"}, {"problem": 38, "code": "(fn max' [& xs] \n  (if-let [x (first xs)] \n            (let [mx (apply max' (rest xs))]\n              (if (> x mx) x mx))\n            Long/MIN_VALUE))", "user": "5f300f28e4b033932238a682"}, {"problem": 38, "code": "(fn [& nums] (reduce (fn [a b] (if (< a b) b a)) nums))", "user": "5f29837ee4b033932238a64f"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f331015e4b0574c87022c37"}, {"problem": 38, "code": "(fn [& args]\n  (loop [cur (first args)\n         maxv (first args)\n         tail (rest args)]\n    (if (nil? cur)\n      maxv\n      (recur (first tail)\n           (if (> cur maxv)\n             cur\n             maxv)\n           (rest tail)))))", "user": "5f1ecd79e4b0f565ad998271"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) (first args) args))", "user": "5f309144e4b0574c87022c23"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "5f37da09e4b0574c87022c5e"}, {"problem": 38, "code": "(fn max-value [x & xs] (reduce (fn [x y] (if (pos? (.compareTo y x)) y x)) x xs))", "user": "5f3388ade4b0574c87022c38"}, {"problem": 38, "code": "(fn [& nums] (reduce #(if (> %1 %2) %1 %2) nums))", "user": "5f393bd6e4b0574c87022c76"}, {"problem": 38, "code": "(fn [& args]\n  (last(sort args)))", "user": "5f38eecce4b0574c87022c72"}, {"problem": 38, "code": "(fn my-max [& xs]\n  (reduce (fn [a, b] (if (< a b) b a)) xs))", "user": "5ea6fe98e4b00a66d4a951b2"}, {"problem": 38, "code": "(fn max-v [& args]\n  (loop [x (first args)\n         c (rest args)]\n    (if (empty? c)\n      x\n      (recur (if (> (first c) x) (first c) x) (rest c)))))", "user": "524379a4e4b076204b44fac0"}, {"problem": 38, "code": "(fn [& rest] (reduce (fn [x,y] (if (> x y) x y)) rest))", "user": "5f3abcc4e4b004f08c61c52b"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5915a628e4b09b4ee5954b74"}, {"problem": 38, "code": "(fn \n  [& nums]\n  (reduce #(if (> %2 %1) %2 %1) nums))", "user": "5f3abd21e4b004f08c61c52c"}, {"problem": 38, "code": "#(reduce (fn [x y] (if (> x y) x y)) %&)", "user": "5f3ab5ece4b004f08c61c52a"}, {"problem": 38, "code": "(fn [& args]\n   (reduce #(if (> %1 %2) %1 %2) args))", "user": "5f3f2281e4b004f08c61c561"}, {"problem": 38, "code": "(fn [& col] (reduce #(if (> %1 %2) %1 %2) col))", "user": "5f2c94b4e4b033932238a669"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [e a] (if (>= e a) e a)) args))", "user": "5f3ddc71e4b004f08c61c551"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [acc n] (if (> n acc) n acc)) args))", "user": "5f419985e4b0955706451fab"}, {"problem": 38, "code": "(fn ([& more]\n   (reduce #(if (> %1 %2) %1 %2)  more)))", "user": "5f3797cce4b0574c87022c5a"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "user": "5f429fdfe4b0955706451faf"}, {"problem": 38, "code": "(fn [ no1 & args]\n  (reduce \n   (fn [a b]\n     (if \n      (> a b)\n      a\n      b))\n   no1\n   args))", "user": "58c0013de4b021aa9917ecdf"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5f3adcf4e4b004f08c61c531"}, {"problem": 38, "code": "(fn [& things]\n  (first(reverse(sort things))))", "user": "5f3a8493e4b004f08c61c527"}, {"problem": 38, "code": "(fn [a b & r]\n    (if (nil? r)\n      (if (< 0 (- a b)) \n        a \n        b)\n      (if (< 0 (- a b))\n        (recur a (first r) (next r))\n        (recur b (first r) (next r)))))", "user": "5f2c04dde4b033932238a660"}, {"problem": 38, "code": "(fn [x & args]\n  (if-not (seq args)\n    x\n    (if (> x (first args))\n      (recur x (rest args))\n      (recur (first args) (rest args)))))", "user": "5c8005cee4b0c8042a70ce0a"}, {"problem": 38, "code": "(fn [& coll]\n  (reduce (fn [a b] (if (> a b) a b)) coll))", "user": "5f37839ee4b0574c87022c59"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f32f69ae4b0574c87022c35"}, {"problem": 38, "code": "(fn [& coll] (last (sort coll)))", "user": "58ffc6cfe4b0438e51c2d008"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [acc x] (if (> x acc) x acc)) Double/NEGATIVE_INFINITY args))", "user": "5f431d32e4b0955706451fb5"}, {"problem": 38, "code": "(fn [& args] ((comp last sort) args))", "user": "5ec22851e4b00a66d4a9529a"}, {"problem": 38, "code": "(fn [& params] (reduce (fn [x y] (if (> x y) x y)) params))", "user": "5f36dc06e4b0574c87022c4c"}, {"problem": 38, "code": "(fn my-max\n  [x & xs]\n  (let [lst (cons x xs)]\n    (->> lst\n         (sort)\n         (last))))", "user": "5f317ae4e4b0574c87022c2a"}, {"problem": 38, "code": "(fn [& numbers]\n  (last (sort numbers)))", "user": "5f238a59e4b0f565ad99828d"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f3ba47be4b004f08c61c53e"}, {"problem": 38, "code": "(fn [& n] (reduce (fn [maxi n] (if (> n maxi) n maxi)) (first n) (rest n)))", "user": "5f45211ae4b0955706451fbc"}, {"problem": 38, "code": "(fn [& rst] (reduce (fn [x y] (if (> x y) x y)) rst))", "user": "5f4eb036e4b0102c75033969"}, {"problem": 38, "code": "(fn [& vals] (last (sort vals)))", "user": "5f4b6433e4b0102c75033953"}, {"problem": 38, "code": "#(last (sort %&\n            ))", "user": "5f4f8f78e4b0102c75033973"}, {"problem": 38, "code": "#(reduce (fn [x y] (if (> x y) x y)) %&)", "user": "5f468d26e4b0955706451fc1"}, {"problem": 38, "code": "(fn [& x]\n  (last (sort x)))", "user": "53275758e4b09d4e7a9b54fc"}, {"problem": 38, "code": "(fn [& lst] (reduce #(if (> %1 %2) %1 %2) lst))", "user": "5f558a76e4b0a0bc16850a84"}, {"problem": 38, "code": "(fn [& xs]\n    (reduce #(if (> %2 %1) %2 %1) xs))", "user": "5f56c0cae4b0a0bc16850a8c"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f574662e4b0a0bc16850a90"}, {"problem": 38, "code": "(fn get-max [& args]\n  (last (sort args)))", "user": "5f2ab452e4b033932238a656"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce #(if (> %1 %2) %1 %2) nums))", "user": "56f59df1e4b046a417f92075"}, {"problem": 38, "code": "(fn [& s] \n  (reduce\n   (fn [x y] (if (> x y) x y))\n   s\n   )\n  )", "user": "5f58db95e4b0a0bc16850a9a"}, {"problem": 38, "code": "(fn [& l] (reduce (fn [a b] (if (< a b) b a)) l))", "user": "5f5b624de4b05ea7b9adc42f"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) (sequence xs)))", "user": "5f0dfa48e4b0f30dddfb5d55"}, {"problem": 38, "code": "#(reduce (fn f\n  [a b]\n  (if (> a b)\n    a\n    b)) %&)", "user": "5dfb7f6de4b0a607a9a45cdc"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "user": "5f5df0bfe4b02876ed9fcfeb"}, {"problem": 38, "code": "(fn my-max [ff & more]\n  (letfn [(calc-max [m x] \n            (cond (empty? x) m\n                  (> (first x) m) (calc-max (first x) \n                                            (rest x))\n                  :else (calc-max m (rest x))))]\n    (calc-max ff more)))", "user": "5dddcface4b0948ae9d9adcd"}, {"problem": 38, "code": "(fn [& xs]\n  (letfn[(maximum [x xs]\n                  (if (empty? xs)\n                    x\n                   (if (< x (first xs))\n                     (maximum (first xs) (rest xs))\n                     (maximum x (rest xs)))))]\n    (maximum (first xs) (rest xs))))", "user": "5f5e7158e4b02876ed9fcff0"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5e3d183fe4b01d43a70e8e11"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f5f9483e4b02876ed9fcff8"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f5f2eafe4b02876ed9fcff5"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce (fn [x y] (if (< y x) x y)) nums))", "user": "5df94f73e4b0a607a9a45cb6"}, {"problem": 38, "code": "(fn max-value\n  [& s]\n  (last (sort s)))", "user": "5f3103aee4b0574c87022c24"}, {"problem": 38, "code": "(fn \n f \n [& s] \n (reduce \n    (fn [acc s*] \n      (if (> s* acc)\n        s* \n        acc\n      )\n    ) \n  (first s) (rest s)\n )\n)", "user": "5f631e11e4b02876ed9fd011"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "5f63d933e4b02876ed9fd018"}, {"problem": 38, "code": "(fn [& vals] (reduce (fn [a b] (if (> a b) a b)) vals))", "user": "5f648ef1e4b02876ed9fd01b"}, {"problem": 38, "code": "(fn [& numbers] (reduce (fn [x y]\n             (if (> x y)\n               x\n               y))\n           numbers))", "user": "5f4fe1fae4b0a0bc16850a5c"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f60daafe4b02876ed9fcffe"}, {"problem": 38, "code": "(fn myMax\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n  \t(reduce myMax (myMax x y) more)))", "user": "5f5a62b4e4b0a0bc16850aa6"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5f660554e4b02876ed9fd027"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5e10f181e4b099d064962fd2"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [acc v] (if (>= acc v) acc v)) args))", "user": "5f6796d2e4b02876ed9fd036"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> % %2) % %2) args))", "user": "5f65bdfde4b02876ed9fd025"}, {"problem": 38, "code": "(fn [& r] (reduce #(if (< %1 %2) %2 %1) r))", "user": "588fbb39e4b00487982d51bd"}, {"problem": 38, "code": "(fn [x & r]\n    (if (empty? r) x\n        (recur (if (> x (first r)) x (first r)) (rest r))))", "user": "5eff6c0ee4b0cf489e8d7f11"}, {"problem": 38, "code": "(fn [& s] (last (sort s)))", "user": "5f686436e4b02876ed9fd03c"}, {"problem": 38, "code": "; (fn [& x] (reduce (fn [f s] (if (> f s) f s)) x))\n\n; (fn [& xs] (last (sort xs)))\n\n#(last (sort %&))", "user": "5f6a583ae4b02876ed9fd046"}, {"problem": 38, "code": "(fn my-max [& nums]\n  (reduce\n    (fn [max-so-far num]\n      (if (> max-so-far num)\n        max-so-far\n        num))\n    nums))", "user": "5f663bc0e4b02876ed9fd02d"}, {"problem": 38, "code": "(fn [& rest]\n    (reduce (fn [a b] (if (> a b) a b)) rest))", "user": "55808f8ee4b05c286339e0ee"}, {"problem": 38, "code": "(fn [a & b] (reduce (fn [maxi at] \n          (if (> at maxi) \n            at \n            maxi)) a b))", "user": "5f27f180e4b033932238a648"}, {"problem": 38, "code": "(fn [& params] (reduce (fn [a b] (if (< a b) b a)) params))", "user": "5f6b5d83e4b02876ed9fd050"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (> %1 %2) %1 %2) x xs))", "user": "5f6cb2a5e4b02876ed9fd057"}, {"problem": 38, "code": "(fn\n  [& numbers]\n  (last (sort numbers)))", "user": "5f6e5c58e4b02876ed9fd067"}, {"problem": 38, "code": "(fn max-of-args [& args] (reduce #(if (< %1 %2) %2 %1) (flatten args)))", "user": "5f6b61ece4b02876ed9fd051"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f6e576ae4b02876ed9fd066"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f724f55e4b02876ed9fd089"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f72f144e4b02876ed9fd093"}, {"problem": 38, "code": "(fn max-val [x & xs] \n  (cond\n    (empty? xs) x\n    (> x (apply max-val xs)) x\n    :else (apply max-val xs)))", "user": "5f63684be4b02876ed9fd012"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5c06fab7e4b0bdcf453d16bd"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "4edbbc6c535d10e5ff6f531d"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5f727d2fe4b02876ed9fd08f"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (neg? (compare %1 %2)) %2 %1) args))", "user": "5ec0db8be4b00a66d4a9528d"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f727dd6e4b02876ed9fd090"}, {"problem": 38, "code": "(fn my_max\n  ([]\n  (println \"This is really an error\"))\n  ([ & s]\n  (loop [remaining_values s cur_max 0]\n    (if (empty? remaining_values)\n      cur_max\n      (let [[hd & tl] remaining_values]\n        (if (> hd cur_max)\n          (recur tl hd)\n          (recur tl cur_max)\n        )\n      )\n    )\n  ))\n)", "user": "5f6b8222e4b02876ed9fd052"}, {"problem": 38, "code": "(fn [& args]\n\t(reduce (fn [cur nu] \n              (if (> cur nu)\n                cur\n                nu)) args))", "user": "5f388489e4b0574c87022c69"}, {"problem": 38, "code": "(fn [& args] (loop [s args m 0] (if-let [c (first (seq s))] (if (> c m) (recur (rest s) c) m) m)))", "user": "5f6e23e6e4b02876ed9fd064"}, {"problem": 38, "code": "(fn [& elements]\n  ( reduce ( fn [a b] ( if (> a b) a b )) elements))", "user": "5f714ae2e4b02876ed9fd084"}, {"problem": 38, "code": "(fn xxx [& arg] ((fn mx [q x] (if (= q '()) x (if (> (first q) x) (mx (rest q) (first q)) (mx (rest q) x)))) arg 0))", "user": "5f79cb16e4b02876ed9fd0cb"}, {"problem": 38, "code": "(fn [& args]\n  (* -1 (->> args\n             (map (partial * -1))\n             (apply min))))", "user": "5f79bff2e4b02876ed9fd0ca"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f727bd1e4b02876ed9fd08c"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) 0 rest))", "user": "5f6f8327e4b02876ed9fd075"}, {"problem": 38, "code": "(fn [& values]\n   (reduce (fn [cur-max val]\n             (if (> val cur-max) val cur-max)\n             ) values))", "user": "5f74770fe4b02876ed9fd09f"}, {"problem": 38, "code": "(fn [& args]\n  (last(sort args)))", "user": "5f74de11e4b02876ed9fd0a5"}, {"problem": 38, "code": "#(last(sort %&))", "user": "5f77b99fe4b02876ed9fd0bc"}, {"problem": 38, "code": "(fn [& n] \n  (last (sort n)))", "user": "5f597522e4b0a0bc16850a9e"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> %1 %2) %1 %2) x))", "user": "5f7d169ee4b0c071e6c840d2"}, {"problem": 38, "code": "(fn [& xs] (first (reverse (sort xs))))\n\n;(comp last sort list)", "user": "5f6c331ae4b02876ed9fd054"}, {"problem": 38, "code": "(fn my-max\n  [a b & args]\n  (if (< a b)\n    b\n    a\n    )\n  )", "user": "5f735915e4b02876ed9fd097"}, {"problem": 38, "code": "(fn [& n]\n  (loop [i n\n         r 0]\n    (if (empty? i)\n      r\n      (let [[h & b] i]\n        (recur b\n               (if (> h r)\n                 h\n                 r))))))", "user": "5e12db74e4b099d064962ff0"}, {"problem": 38, "code": "(fn [x & rest] (reduce #(cond (> %1 %2) %1 :else %2) x rest))", "user": "5f63cde9e4b02876ed9fd015"}, {"problem": 38, "code": "(fn maxByReduce [& s]\n  (reduce\n   (fn maxReducer [acc curr]\n     (if (nil? acc)\n       curr\n       (if (> acc curr)\n         acc\n         curr)))\n   nil\n   s))", "user": "5f7251b9e4b02876ed9fd08a"}, {"problem": 38, "code": "(fn [& f]\n  \n  (last (sort f))\n  \n  )", "user": "5f727be9e4b02876ed9fd08d"}, {"problem": 38, "code": "(fn\n  [& vals]\n  (reduce #(if (> %1 %2) %1 %2) vals))", "user": "5c87217de4b0c8042a70cea1"}, {"problem": 38, "code": "; https://clojure.org/guides/weird_characters \"%&\" function to represent the \"rest\" of the arguments\n#(first(reverse(sort %&)))", "user": "5f77d470e4b02876ed9fd0be"}, {"problem": 38, "code": "(fn[& args]\n     (last (sort args)))", "user": "5f77890ae4b02876ed9fd0b9"}, {"problem": 38, "code": "#(let [s %&] (last (sort s)))", "user": "5f727cb0e4b02876ed9fd08e"}, {"problem": 38, "code": "(fn my-max [& xs] (last (sort (vec xs))))", "user": "5f82cfcce4b0c071e6c840fb"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5f82f03fe4b0c071e6c840fd"}, {"problem": 38, "code": "#(first (reverse(sort %&)))", "user": "5f737899e4b02876ed9fd099"}, {"problem": 38, "code": "#(last(sort %&))", "user": "5f80aa68e4b0c071e6c840e7"}, {"problem": 38, "code": "(fn [& args]\n  (->> args sort last))", "user": "5f5358b7e4b0a0bc16850a77"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f7e91c8e4b0c071e6c840d8"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "5f7fece9e4b0c071e6c840e3"}, {"problem": 38, "code": "(fn [& args] (-> args sort reverse first))", "user": "5f85a3d6e4b0ad2c9bc62a41"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f46d2f9e4b0955706451fc6"}, {"problem": 38, "code": "(fn [& args] \n   (reduce #(if (> %2 %1) %2 %1) (first args) args))", "user": "5f81de6ce4b0c071e6c840f5"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f84f0f5e4b0375e81f54e78"}, {"problem": 38, "code": "(fn maxx [x & more] (last (sort (conj more x))))", "user": "5f6dee74e4b02876ed9fd05f"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f8497dce4b0375e81f54e74"}, {"problem": 38, "code": "(fn max-value [& params]\n  (reduce (fn [x y]\n            (if (< x y)\n              y\n              x\n            ))\n          params)\n  )", "user": "5f84f110e4b0375e81f54e79"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f792d48e4b02876ed9fd0c5"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f87e757e4b0169f6814c40f"}, {"problem": 38, "code": "(fn[& r] (reduce #(if (> %1 %2) %1 %2) r))", "user": "5f86a98be4b0649ffcda4caa"}, {"problem": 38, "code": "(fn [biggest curr & coll]\n  (cond\n   (nil? curr) biggest\n   (< biggest curr) (recur curr (first coll) (rest coll))\n   :else (recur biggest (first coll) (rest coll))))", "user": "5f3ce2c7e4b004f08c61c548"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f8361bae4b01aacbe7a2712"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f8795d4e4b020286baa5e96"}, {"problem": 38, "code": "(fn maxElement [& numbers]\n  (reduce\n   (fn [a b]\n     (if (> a b) \n       a \n       b))\n   numbers))", "user": "5f8330b8e4b01aacbe7a270f"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5f875a0ae4b020286baa5e94"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f837b30e4b01aacbe7a2714"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f810e97e4b0c071e6c840ed"}, {"problem": 38, "code": "(fn max-val\n  [ & vals ]\n  (reduce #(if (> %1 %2) %1 %2) (first vals) vals))", "user": "5c8cfff8e4b048ec896c5996"}, {"problem": 38, "code": "(fn [& s] (loop [mx (first s)\n               s (rest s)]\n          (if (empty? s) mx (recur (if (> (first s) mx) (first s) mx) (rest s)))))", "user": "5f8b06afe4b0715f5002d74a"}, {"problem": 38, "code": "(fn [& vs] (reduce #(if (> %1 %2) %1 %2) vs))", "user": "5f8ba5bce4b0715f5002d74d"}, {"problem": 38, "code": "(fn\n  [& all]\n  (last (sort all)))", "user": "5f8b7506e4b0715f5002d74c"}, {"problem": 38, "code": "#(reduce (fn [a b]\n           (if (> a b)\n             a\n             b)) %&)", "user": "5f816cc6e4b0c071e6c840f1"}, {"problem": 38, "code": "(fn [& c] (reduce #(if (> % %2) % %2) c))", "user": "5f8e865fe4b0715f5002d76d"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "5f8fe45ae4b0715f5002d78d"}, {"problem": 38, "code": "(fn [& c] (reduce #(if (> %1 %2) %1 %2) c))", "user": "5f6caa19e4b02876ed9fd056"}, {"problem": 38, "code": "(fn maxval [& arr]\n  (reduce\n   #(if (< %1 %2) %2 %1) arr))", "user": "5f8d76c3e4b0715f5002d758"}, {"problem": 38, "code": "(fn\n  [ & more ]\n  (let [internal\n        (fn\n          [xs big]\n          (if (empty? xs) big\n              (if (> (first xs) big)\n                (recur (rest xs) (first xs))\n                (recur (rest xs) big))))]\n    (internal more (first more))))", "user": "5e1c24f4e4b0dc959400852d"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f92d736e4b0715f5002d7ba"}, {"problem": 38, "code": "(fn [& xs]\n  (loop [n (first xs)\n         xs xs]\n    (if (empty? xs)\n      n\n      (recur (if (> (first xs) n) (first xs) n)\n             (rest xs)))))", "user": "5f93529ae4b0715f5002d7bc"}, {"problem": 38, "code": "(fn m-max [& rest]\n  (reduce #(if(< %1 %2) %2 %1)\n          rest))", "user": "5f838122e4b01aacbe7a2715"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f94d5bfe4b0715f5002d7c2"}, {"problem": 38, "code": "#(last(sort %&))", "user": "5f737e16e4b02876ed9fd09a"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce (fn [maxi num]\n          (if (> num maxi)\n            num\n            maxi)) (first nums) nums))", "user": "5f9567cce4b0715f5002d7c7"}, {"problem": 38, "code": "(fn [f & n] (reduce (fn [acc x] (if (< acc x) x acc)) f n))", "user": "5f85e160e4b0ad2c9bc62a43"}, {"problem": 38, "code": "(fn p38 [a & r]\n  (reduce (fn [cur-max val]\n            (if (> val cur-max) val cur-max))\n          a\n          r))", "user": "5f968f4ee4b0715f5002d7d2"}, {"problem": 38, "code": "(fn [& val] (reduce #(if (> %1 %2) %1 %2) 0 val))", "user": "5ee4545ee4b029a2061bbe8d"}, {"problem": 38, "code": "(fn [& args]\n  (loop [index (first args) oth (rest args)]\n    (let [current (first oth)]\n      (println index current)\n      (if (nil? current)\n        index\n        (recur  (if (> index current) index current) (rest oth))\n        )\n      )\n    ))", "user": "5f693778e4b02876ed9fd03f"}, {"problem": 38, "code": "#(first (sort > %&))", "user": "5f97eff1e4b0715f5002d7f9"}, {"problem": 38, "code": "#(first (reverse (sort (seq %&))))", "user": "5f757c1ce4b02876ed9fd0aa"}, {"problem": 38, "code": "(fn [& xs]\n  (last (sort xs)))", "user": "5f8e2a08e4b0715f5002d767"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f9c3f63e4b0715f5002d820"}, {"problem": 38, "code": "#(reduce  (fn [a b] (if (> a b) a b)) %&)", "user": "5f9d36e1e4b0715f5002d82e"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5f9f032fe4b0715f5002d839"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f8f4aa3e4b0715f5002d780"}, {"problem": 38, "code": "(fn [& a] (last (sort a)))", "user": "5f3567d6e4b0574c87022c44"}, {"problem": 38, "code": ";; (= (__ 1 8 3 4) 8)\n;; (= (__ 30 20) 30)\n;; (= (__ 45 67 11) 67)\n\n\n(fn [biggest & other]\n  (let [\n        new (first other)\n        biggest (if (> new biggest) new biggest)\n        ]\n    (if (= 1 (count other))\n      biggest\n      (recur biggest (rest other)))\n    ))", "user": "58db48a5e4b0a4d5acaab679"}, {"problem": 38, "code": "(fn[x & more]  (reduce  #(if (> %1 %2) %1 %2) (conj more x)))", "user": "5fa358a1e4b0f0ebd91b77fd"}, {"problem": 38, "code": "(fn [x & xs] \n  (reduce (fn [x1 x2] (if (> x1 x2) x1 x2)) x xs ))", "user": "5fa17538e4b0f0ebd91b77e3"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "user": "5fa2a3afe4b0f0ebd91b77f1"}, {"problem": 38, "code": "(fn [& xs]\n  (loop [m (first xs) ys (rest xs)]\n    (if (empty? ys)\n      m\n      (recur (if (> m (first ys)) m (first ys))\n              (rest ys)))))", "user": "5fa5b72ee4b0fa27300f3dca"}, {"problem": 38, "code": "(fn [& args]\n   (loop [r (first args) s (rest args)] (println r s)\n     (if (empty? s) r\n         (if (> (first s) r)\n           (recur (first s) (rest s))\n           (recur r (rest s))\n           )\n         )\n     )\n   )", "user": "5f9c4113e4b0715f5002d821"}, {"problem": 38, "code": "(fn[& args] (reduce #(if (>= %1 %2) %1 %2) args))", "user": "5d965c73e4b0d3f9b434ad33"}, {"problem": 38, "code": "(fn [& coll] (last (sort coll)))", "user": "5fa74b82e4b0fa27300f3dda"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "user": "5fa8424ce4b0fa27300f3de5"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5fa15a4de4b0f0ebd91b77df"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f974321e4b0715f5002d7f3"}, {"problem": 38, "code": "(fn [& args] ( loop [h (nth args 0), x 1]\n               (if (= x (count args))\n                 h\n                 (recur (if(> h (nth args x)) h (nth args x)) (inc x)))))", "user": "5f6b35c3e4b02876ed9fd04d"}, {"problem": 38, "code": "(fn \n  ([_ _] 30)\n  ([_ _ _] 67)\n  ([_ _ _ _] 8))", "user": "5b94c2aee4b0c0b3ffbd4a59"}, {"problem": 38, "code": "(fn maxi\n  ([m & others] (cond\n              (empty? others) m\n              (> m (first others)) (recur m (rest others))\n              :else (recur (first others) (rest others)))))", "user": "5fa5a6b1e4b0fa27300f3dc8"}, {"problem": 38, "code": "(fn f [& s]\n  (reduce (fn [acc s*] (if (> s* acc) s* acc)) (first s) (rest s)))", "user": "5facfb48e4b08cb800c85aea"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5fae5441e4b08cb800c85afb"}, {"problem": 38, "code": "(fn f [& s]\n  (reduce (fn [acc s*] (if (> s* acc) s* acc)) (first s) (rest s)))", "user": "5face7fce4b08cb800c85ae9"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5fafa44ee4b08cb800c85b0e"}, {"problem": 38, "code": "(fn [start & lst]\n  (loop [winner start\n         contestants lst]\n    (cond (empty? contestants) winner\n          (< winner (first contestants)) (recur (first contestants) (rest contestants))\n          :else (recur winner (rest contestants)))))", "user": "5fb082cfe4b08cb800c85b14"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %2 %1) %2 %1) xs))", "user": "5fa2b45ce4b0f0ebd91b77f5"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "5fa80c01e4b0fa27300f3de2"}, {"problem": 38, "code": "(fn [& xs] \n  (reduce #(if (< %1 %2) %2 %1) 0 xs))", "user": "573a0ecce4b0cd1946bd1088"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce \n\t(fn [x acc]\n      (cond \n       ( > x acc) x\n       :else acc)) xs))", "user": "57b60e46e4b0fbc9809a27b6"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [acc v] \n            (if (> v acc)\n              v\n              acc))\n          args))", "user": "5fad8efee4b08cb800c85af3"}, {"problem": 38, "code": "(fn [& a] (last (sort a)))", "user": "5fa96ddbe4b0fa27300f3dec"}, {"problem": 38, "code": "#(first (reverse (sort %&)))", "user": "5fb2eac0e4b08cb800c85b2f"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (< %1 %2) %2 %1) xs))", "user": "5fae3d8ae4b08cb800c85afa"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "5fb27ed8e4b08cb800c85b29"}, {"problem": 38, "code": "#(loop [l %& \n        m 0] \n   (let [ f (first l) \n          r (rest l)]\n     (if (nil? f)\n       m\n       (if (>= f m)\n         (recur r f)\n         (recur r m)))))", "user": "5fb3a096e4b08cb800c85b35"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (< a b) b a)) 0 args))", "user": "5fb3bd04e4b08cb800c85b3a"}, {"problem": 38, "code": "(fn [& args]\n   (let [arg-coll [args]]\n     (first (sort > args))))", "user": "5fb544f6e4b08cb800c85b4e"}, {"problem": 38, "code": "(fn [& ns] (reduce (fn [a b] (if (> a b) a b)) ns))", "user": "5fab7ea6e4b08cb800c85ad8"}, {"problem": 38, "code": "#(first (sort > %&))", "user": "56fab46ce4b07572ad1a88c5"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f1f20e3e4b0f565ad998279"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5fbe40bce4b03f550f448246"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57b758f4e4b0fbc9809a27cf"}, {"problem": 38, "code": "(fn [& args] (first (sort > (seq args))))", "user": "5fab003de4b08cb800c85ad1"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [acc curr] (if (< acc curr) curr acc)) args))", "user": "5fac50f4e4b08cb800c85ae5"}, {"problem": 38, "code": "(fn [& n] (loop [s n acc (first n)]\n   (if (empty? s)\n     acc\n     (recur (rest s) \n            (if (> (first s) acc)\n              (first s)\n              acc)))))", "user": "5f5aee4fe4b0a0bc16850aaa"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [res x] (if (< res x) x res)) xs))", "user": "5a4f11e5e4b05d388ecb6bc6"}, {"problem": 38, "code": "(fn [& more] (reduce #(if (> %1 %2) %1 %2) more))", "user": "5eb7b41ee4b00a66d4a9523c"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5fc4d277e4b06ffabd1ef72a"}, {"problem": 38, "code": "#(reduce (fn [xm x] (if (< x xm) xm x)) %&)", "user": "5faa75c1e4b0fa27300f3dfa"}, {"problem": 38, "code": "(fn [& x] (first (sort-by identity #(> %1 %2) x)))", "user": "5fc51d88e4b0ad564c76812a"}, {"problem": 38, "code": "(fn [& i]\n           (reduce (fn [a b] (if (> a b) a b)) i)\n\n             )", "user": "5fc241c1e4b0edf42a5593d1"}, {"problem": 38, "code": "#(\n  loop [coll %& maxval 0]\n  (if (= (count coll) 0)\n    maxval\n    (recur (rest coll) (if (> (first coll) maxval) (first coll) maxval))\n    \n    )\n  )", "user": "5fc5c303e4b02c825b0c8c1a"}, {"problem": 38, "code": "#(-> %& (sort) (last))", "user": "5fba5692e4b03f550f448230"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5fcd15d6e4b07e53c2f3eff7"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f969090e4b0715f5002d7d5"}, {"problem": 38, "code": "(fn f [& s]\n  (reduce (fn [acc s*] (if (> s* acc) s* acc)) (first s) (rest s)))", "user": "5f96fbc7e4b0715f5002d7ec"}, {"problem": 38, "code": "(fn [& args] \n  (loop [[i_h & i_t :as i] args\n         m i_h]\n    (cond \n     (empty? i) m\n     :else (recur i_t (if (< 0 (compare m i_h) )\n                        m\n                        i_h))\n     )\n    ))", "user": "5ef4fca7e4b07c55ae4a0546"}, {"problem": 38, "code": "(fn my-max \n  ([xs] (my-max 0 xs))\n  ([acc x & xs]\n   (let [car x\n         cdr xs]\n     (if (empty? xs)\n         acc\n         (my-max (if (>= car acc) car acc) cdr )))))", "user": "5f90aeefe4b0715f5002d799"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "5fc3850de4b0db0e95a5f3fd"}, {"problem": 38, "code": "(fn [& l] \n  (reduce (fn [g acc] (if (> g acc) g acc)) l))", "user": "5b2d1c1de4b025bcb146f2c0"}, {"problem": 38, "code": "(fn [& rest]\n  ((fn [xs]\n  (reduce\n   (fn [sup x]\n     (if (> x sup) x sup))\n   0\n   xs))\n   rest)\n  )", "user": "5fa6db67e4b0fa27300f3dd2"}, {"problem": 38, "code": "(fn [& vals] (reduce #(if (> %1 %2) %1 %2) vals))", "user": "5edd05bfe4b0c7845d86b0f3"}, {"problem": 38, "code": "(comp (partial reduce (fn [x y] (if (>= x y) x y)) 0) list)", "user": "54d7e277e4b0a52adc2e2031"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce\n    (fn [a b]\n      (if (> b a)\n        b\n        a))\n     0\n     xs))", "user": "5b21ad60e4b03cfeda66ed54"}, {"problem": 38, "code": "(fn mymax [& l]\n  (loop [lst l m (first l)]\n    (let [f (first lst) r (rest lst)]\n      (cond\n       (empty? lst) m\n       :else (recur r \n                    (if (> f m) f m))))))", "user": "5fb8fe30e4b03f550f448223"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5fc61b45e4b06010e5ea651a"}, {"problem": 38, "code": "(fn [ & v] (reduce (fn [a b] (if (> a b) a b)) v))", "user": "5fd8bcb3e4b05ac5b16ea11b"}, {"problem": 38, "code": "(fn [& numbers] (reduce (fn [acc x] (if (> x acc) x acc)) numbers))", "user": "5fb46916e4b08cb800c85b46"}, {"problem": 38, "code": "#(last (sort %&))", "user": "58c69d88e4b021aa9917ed5e"}, {"problem": 38, "code": "(fn [& args] \n  (reduce #(if (< %1 %2) %2 %1) args)\n  )", "user": "5f3ee0d9e4b004f08c61c55c"}, {"problem": 38, "code": "(fn [& lst] (reduce (fn [x y] (if (> x y) x y\n                             )\n                   ) lst\n                 )\n         )", "user": "5fdc04d8e4b05ac5b16ea138"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5fd361f2e4b07e53c2f3f04e"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f96fa49e4b0715f5002d7e9"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "5fdb51fae4b05ac5b16ea12f"}, {"problem": 38, "code": "(fn [& more]\n  (reduce\n    (fn\n      [x y]\n      (if (< x y) y x)\n      )\n    more\n    )\n  )", "user": "5fe18014e4b05ac5b16ea16d"}, {"problem": 38, "code": "(fn [& coll] (reduce #(if (> %1 %2) %1 %2) coll))", "user": "5fbb010ae4b03f550f448233"}, {"problem": 38, "code": "(fn [& args]\n  (reduce\n   (fn [highest number]\n     (if\n      (> number highest)\n       number\n       highest))\n   args))", "user": "5e7fb908e4b085ba37836e3f"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5fe362d9e4b05ac5b16ea179"}, {"problem": 38, "code": "(fn [& a]\n  (reduce #(if (> % %2) % %2) a))", "user": "5fc9d967e4b0689391cc77ce"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "user": "5fe0d4d4e4b05ac5b16ea164"}, {"problem": 38, "code": "(fn maxx \n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more] (reduce maxx (maxx x y) more)))", "user": "5fe5a64de4b05ac5b16ea187"}, {"problem": 38, "code": "(fn [& nr] (last (sort nr)))", "user": "5f1f2b95e4b0f565ad99827a"}, {"problem": 38, "code": "(fn doon [& s]\n  (loop [s s ans (first s)] \n    (if (empty? s) ans (if (> (first s) ans) (recur (rest s) (first s)) (recur (rest s) ans)))\n  )\n)", "user": "5fdb8657e4b05ac5b16ea133"}, {"problem": 38, "code": "(fn max* [& xs]\n  (loop [ls xs\n         m 0]\n    (if (empty? ls)\n      m\n      (if (> (first ls) m)\n        (recur (rest ls) (first ls))\n        (recur (rest ls) m)\n        )\n      )\n    )\n\n  )", "user": "5fe1b893e4b05ac5b16ea16f"}, {"problem": 38, "code": "(fn my-max [& args]\n  (reduce #(if (> %2 %1) %2 %1)\n          args))", "user": "5fd2e391e4b07e53c2f3f049"}, {"problem": 38, "code": "(fn [& args]\n  (->> args\n       seq\n       sort\n       last))", "user": "5fe9169ce4b05ac5b16ea1a0"}, {"problem": 38, "code": "(fn [& args]\n (reduce (fn [x y] (if (> y x) y x)) -10000 args))", "user": "5fea32f3e4b05ac5b16ea1aa"}, {"problem": 38, "code": "(fn [& nums] (reduce (fn [acc item] (if (> item acc) item acc)) nums))", "user": "5fdbde92e4b05ac5b16ea137"}, {"problem": 38, "code": "(fn [& sqe]\n  (reduce (fn [x y]\n            (if (< x y) y x))\n          sqe ))", "user": "5fe09d1fe4b05ac5b16ea15b"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5fe85417e4b05ac5b16ea194"}, {"problem": 38, "code": "(comp #(reduce (fn [a x] (if (> a x) a x)) %) list)", "user": "54aec375e4b09f271ff37cf9"}, {"problem": 38, "code": "(fn [& xs]\n        (reduce (fn [a b]\n                  (if (> a b) a b))\n                xs))", "user": "546c4377e4b00cfc9eacc177"}, {"problem": 38, "code": "(fn [& x] (reduce #(if (> % %2)\n                   (identity %)\n                   (identity %2)) (identity x)))", "user": "5fe8ccabe4b05ac5b16ea19a"}, {"problem": 38, "code": "(fn [& args] \n  (reduce #(if (< %1 %2) %2 %1) args))", "user": "5fef4292e4b05ac5b16ea1d7"}, {"problem": 38, "code": "(fn [& nums] (last (sort nums)))", "user": "5fe75ecfe4b05ac5b16ea18d"}, {"problem": 38, "code": "(fn [& others] (last (sort others)))", "user": "5fef99e2e4b05ac5b16ea1e0"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5ff3aca3e4b05ac5b16ea205"}, {"problem": 38, "code": "(fn [& l] (#(reduce (fn [x y] (if (> x y) x y)) %) l))", "user": "5ff40352e4b05ac5b16ea209"}, {"problem": 38, "code": "(fn [& c] (reduce #(if (> %1 %2) %1 %2) c))", "user": "5ff4e28ae4b06df49cee1486"}, {"problem": 38, "code": "(fn my-max\n  [& all]\n  (-> all\n      sort\n      last))", "user": "5ff454a1e4b05ac5b16ea20d"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5fada7cce4b08cb800c85af5"}, {"problem": 38, "code": "(fn\n  [& args]\n  (reduce (fn [num1 num2] (if (> num1 num2) num1 num2))\n          args))", "user": "5fce0cc5e4b07e53c2f3f000"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) (flatten (cons x xs))))", "user": "5ff32e20e4b05ac5b16ea1ff"}, {"problem": 38, "code": ";; (fn [x & y]\n;;    (cond\n;;      (nil? y) x\n;;      (> x (first y)) (recur x (next y))\n;;      :else (recur (first y) (next y))))\n\n;; (fn [& params] (reduce (fn [a b] (if (< a b) b a)) 0 params))\n\n;; (comp last sort list)\n\n;; #(last (sort %&))\n\n(fn [& cc]\n    (letfn [(get-max [m c]\n              (if (empty? c)\n                m\n                (let [fst (first c)\n                      new-max (if (< m fst) fst m)]\n                  (recur new-max (rest c)))))]\n      (get-max (first cc) cc)))", "user": "591ad160e4b09b4ee5954bdf"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f9690d4e4b0715f5002d7de"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5fd10010e4b07e53c2f3f02a"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5ff8c2eae4b06df49cee14a9"}, {"problem": 38, "code": "(fn [f & r]\n \t(reduce #(if (> %1 %2) %1 %2) f r))", "user": "5ff93da9e4b06df49cee14af"}, {"problem": 38, "code": "(fn [& s]\n  \n  (loop [m (first s) r (rest s)]\n    (if (empty? r)\n      m\n      (recur (if (> m (first r)) m (first r)) (rest r) )\n      )\n    \n    )\n  \n  )", "user": "5ff676a9e4b06df49cee1497"}, {"problem": 38, "code": "(fn mmax [& coll]\n  (reduce (fn [acc v]\n            (if (> v acc)\n              v\n              acc)) 0 coll))", "user": "5ff8ead1e4b06df49cee14ab"}, {"problem": 38, "code": "(fn [& args]\n  (loop [coll args\n         m 0]\n    (if (empty? coll)\n      m\n      (recur (rest coll) (if (> m (first coll))\n                           m\n                           (first coll))))))", "user": "5ffc18cae4b074f607df65f1"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5f969088e4b0715f5002d7d4"}, {"problem": 38, "code": "(fn [& params] (reduce (fn [x y] (if (> x y) x y)) params))", "user": "5ff88607e4b06df49cee14a6"}, {"problem": 38, "code": "(fn [& args] \n   (reduce \n      (fn [acc b]\n         (if (> b acc) b acc )) 0 args))", "user": "5fec4f5ee4b05ac5b16ea1bf"}, {"problem": 38, "code": "(fn [& nums]\n  (last (sort (sequence nums))))", "user": "5ff61113e4b06df49cee1492"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5fc56712e4b081dd5340e3e7"}, {"problem": 38, "code": "(fn [& z]\n     (loop [x 0\n            mmax 0]\n       (if (= x (count z))\n         mmax\n         (recur (inc x) (if (> mmax (nth z x))\n                          mmax\n                          (nth z x))))))", "user": "5ff82adae4b06df49cee14a4"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))\n\n#_\n(fn [& args]\n    (reduce (fn [acc n]\n              (if (> n acc) n acc)) args))", "user": "529e3258e4b04e0c58e87b8d"}, {"problem": 38, "code": "(fn [& args] (reduce\n  (fn [acc value]\n    (if (> value acc) value acc))\n  0\n  args))", "user": "5ffee617e4b074f607df6605"}, {"problem": 38, "code": "(fn mymax [& sq]\n  (reduce (fn [m n] (if (> n m) n m)) sq))", "user": "5fee18f2e4b05ac5b16ea1d2"}, {"problem": 38, "code": "(fn [x & rest]\n  (last (sort (conj (into [] rest) x))))", "user": "5c2e6309e4b0d62ef62d9f03"}, {"problem": 38, "code": "(fn [m & further] (if (> m (first further)) m (first further)))", "user": "5fbf6fe7e4b0ad6fc3476147"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "6004c750e4b074f607df6645"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5ff709e4e4b06df49cee149b"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %2 %1) %2 %1) xs))", "user": "5fc1c424e4b0edf42a5593d0"}, {"problem": 38, "code": "(fn x [& args]\n  (last (sort args)))", "user": "591770dae4b09b4ee5954b9c"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn[acc number] (if (> number acc) number acc)) (first args) args))", "user": "6001c90ce4b074f607df6626"}, {"problem": 38, "code": "#(last(sort %&))", "user": "600201bce4b074f607df662b"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5ffe6082e4b074f607df6600"}, {"problem": 38, "code": "(fn[& x] (last(sort x)))", "user": "6001460ce4b074f607df6611"}, {"problem": 38, "code": "(fn [& z]\n   (reduce\n    (fn [x y]\n      (if (< x y) y x)) z))", "user": "5ffd3422e4b074f607df65f7"}, {"problem": 38, "code": "(fn [& args]\n (reduce #(if (> %1 %2) %1 %2) args))", "user": "60057cd4e4b074f607df664a"}, {"problem": 38, "code": "(fn [& l]\n  ((fn get-max [l m]\n     (if (empty? l)\n       m\n       (get-max (rest l) (if (> (first l) m) (first l) m)))\n  ) l (first l))\n)", "user": "600777a3e4b074f607df6667"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5ffe2d18e4b074f607df65ff"}, {"problem": 38, "code": "(fn [& c]\n  (loop [xs c,\n    \t maximum (first c)]\n    (if (empty? xs)\n    maximum\n    (if (> maximum (first xs))\n      (recur (rest xs) maximum)\n      (recur (rest xs) (first xs))))))", "user": "5f7603a8e4b02876ed9fd0ad"}, {"problem": 38, "code": "(fn [& args] (-> args sort last))", "user": "5f37263de4b0574c87022c4e"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5d62ce13e4b0c9e5857d501f"}, {"problem": 38, "code": "(fn f [x & rst]\n  (#(if (> %1 %2) %1 %2)\n    x\n    (if (= (count rst) 1)\n      (first rst)\n      (apply f rst))))", "user": "60096aabe4b074f607df667f"}, {"problem": 38, "code": "(fn [& nums] (last (sort nums)))", "user": "5ff64845e4b06df49cee1495"}, {"problem": 38, "code": "(fn find-max [max-el & rest-els] (if (sequential? rest-els) (if (> (first rest-els) max-el) (apply find-max rest-els) (apply find-max (concat [max-el] (rest rest-els)))) max-el))", "user": "600c1c72e4b074f607df6692"}, {"problem": 38, "code": "(fn foo [x & xs]\n  (if-not xs\n    x\n    (let [m (apply foo xs)]\n      (if (> x m)\n        x\n        m))))", "user": "600ae927e4b074f607df6689"}, {"problem": 38, "code": "(fn [& c] (reduce #(if (> %1 %2) %1 %2) c))", "user": "600cb742e4b074f607df6696"}, {"problem": 38, "code": ";; (comp last sort list)\n;; 1. take in a list\n;; 2. sort the list\n;; 3. take the largest item out of the list\n;; 4. compose steps 1 through 3 together (and apply?)\n\n;; thread list of numbers through the sort\n;; function (default in increasing order)\n;; and then take the last one\n(fn [& nums]\n  (->> nums\n       (sort)\n       (last)))", "user": "5fb68f09e4b08cb800c85b58"}, {"problem": 38, "code": "#(last (sort %&))", "user": "60046db8e4b074f607df6642"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "600e4639e4b074f607df66a2"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce (fn [mx x]\n            (if (> x mx)\n              x\n              mx))\n          (first xs)\n          xs))", "user": "583369e6e4b089d5ab817c9c"}, {"problem": 38, "code": "(comp last sort list)", "user": "570d4c30e4b0b0fb43fd06da"}, {"problem": 38, "code": "(fn my-maxx [& seq]\n  (reduce (fn [old new] (if (> old new) old new)) seq))", "user": "5faece16e4b08cb800c85b02"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (< %1 %2) %2 %1) xs))", "user": "6011b89ee4b074f607df66bc"}, {"problem": 38, "code": "(fn mmx [& args] (loop [rs 0 l args] (if (empty? l) rs (if (> (first l) rs) (recur (first l) (rest l)) (recur rs (rest l))))))", "user": "60109997e4b074f607df66b3"}, {"problem": 38, "code": "(comp last sort list)", "user": "5fee4cdbe4b05ac5b16ea1d3"}, {"problem": 38, "code": "(comp last sort list)", "user": "5ff70cfde4b06df49cee149c"}, {"problem": 38, "code": "(fn [& xs]\n  (->>\n   xs\n   (reduce #(if (> %1 %2) %1 %2))))", "user": "57e10705e4b0bfb2137f5a6a"}, {"problem": 38, "code": "(fn [x & xs]\n    (loop [biggest x xs xs]\n        (if (empty? xs)\n            biggest\n            (recur (if (> (first xs) biggest) (first xs) biggest) (rest xs)))))", "user": "601004d6e4b074f607df66b2"}, {"problem": 38, "code": "(fn maximum\n  ([arg1] arg1)\n  ([arg & args]\n   (let [max-rest (apply maximum args)]\n     (if (> max-rest arg)\n       max-rest\n       arg))))", "user": "601aaa93e4b0bf4ca6b10926"}, {"problem": 38, "code": "(fn [& vals] (reduce #(if (> %1 %2) %1 %2) vals))", "user": "4eb92051535dfed6da9c6d4c"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "600a061de4b074f607df6683"}, {"problem": 38, "code": "(fn [& args ] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "4f4b62e6e4b03ad3f0c10c78"}, {"problem": 38, "code": "(fn[& x](first(reverse(sort x))))", "user": "60195030e4b0bf4ca6b10920"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [x y] (if (> x y) x y)) args))", "user": "558ffb4be4b0277789237667"}, {"problem": 38, "code": "(fn [& args]\n  (->> args\n       (reduce #(if (< %1 %2) %2 %1))))", "user": "5fa28e2be4b0f0ebd91b77f0"}, {"problem": 38, "code": "(fn [& nums]\n        (reduce #(if (> %1 %2) %1 %2) nums))", "user": "51a7ab93e4b0da5f497bde87"}, {"problem": 38, "code": "(fn [& numbers]\n      (reduce (fn [highest-number new-number]\n                (if (> new-number highest-number)\n                  new-number\n                  highest-number))\n              0\n              numbers))", "user": "5aafde49e4b073f1774425a1"}, {"problem": 38, "code": "(fn [& ps] (reduce #(if (> %1 %2) %1 %2) ps))", "user": "4e38f245535deb9a81d77f3e"}, {"problem": 38, "code": "(fn [fst & rst] (reduce #(if (> %1 %2) %1 %2) fst rst))", "user": "601fe14ce4b0bf4ca6b1095c"}, {"problem": 38, "code": "(fn [& s]\n   (reduce (fn [acum cur] \n             (if (> cur acum) cur acum))\n           0\n           s))", "user": "5e64f44de4b0fd0acd1586ae"}, {"problem": 38, "code": "(fn mymax [& l] (reduce (fn [a e] (if (> e a) e a)) l))", "user": "602049b8e4b0bf4ca6b10961"}, {"problem": 38, "code": "(fn [& nrs]\n  (reduce #(cond (> %1 %2) %1 :else %2) nrs)\n  )", "user": "60228147e4b0d5df2af22202"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "601bdcb3e4b0bf4ca6b10930"}, {"problem": 38, "code": "(fn f [& s]\n  (reduce (fn [acc s*] (if (> s* acc) s* acc)) (first s) (rest s)))", "user": "6022844de4b0d5df2af22203"}, {"problem": 38, "code": "#(last (sort %&))", "user": "6023e7f7e4b0d5df2af22217"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> a b) a b)) %&)", "user": "5185ad63e4b0da5a5be3bac2"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5fc860b1e4b049d89c09cd94"}, {"problem": 38, "code": "(fn [& args]\n  (loop [a args mx (first args)]\n    (if (empty? a) mx\n      (recur (rest a) (if (> (first a) mx)\n                                (first a)\n                           mx)\n             ))))", "user": "60264d89e4b0d5df2af2222d"}, {"problem": 38, "code": "(fn [x & args] (reduce\n              (fn [o p] (if (> o p) o p))\n                x\n                args\n              ))", "user": "593c9583e4b069cdc2982b94"}, {"problem": 38, "code": "(fn m_max [x y & xs]\n  (reduce #(if (> %1 %2) %1 %2) (conj xs x y))\n)", "user": "6022429be4b0d5df2af22200"}, {"problem": 38, "code": "(fn [& ar] (reduce #(if (< %1 %2) %2 %1) ar))", "user": "4f188db6535d64f60314645c"}, {"problem": 38, "code": "#(last (sort %&))", "user": "60231327e4b0d5df2af2220b"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "60225c2ae4b0d5df2af22201"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "6026d2cae4b0d5df2af22232"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "60282169e4b0d5df2af22240"}, {"problem": 38, "code": "#(reduce (fn [acc e] (if (< acc e) e acc)) %&)", "user": "6026737ee4b0d5df2af2222f"}, {"problem": 38, "code": "(fn [& numbs]\n  (last (sort numbs)) )", "user": "602b90c1e4b0d5df2af22266"}, {"problem": 38, "code": "(fn get-max\n   ([m] m)\n   ([m & args] (if (> (first args) m)\n                 (apply get-max (first args) (rest args))\n                 (apply get-max m (rest args)))))", "user": "602abb59e4b0d5df2af2225e"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) args))", "user": "602aa5f1e4b0d5df2af2225d"}, {"problem": 38, "code": "(fn [& args] \n  (reduce #(if (< %1 %2) %2 %1) args))", "user": "5f6f80d2e4b02876ed9fd074"}, {"problem": 38, "code": "(comp last sort list)", "user": "602d5eade4b0d5df2af22279"}, {"problem": 38, "code": "#(last (sort %&))", "user": "602b6cf7e4b0d5df2af22265"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "5feb6850e4b05ac5b16ea1b8"}, {"problem": 38, "code": "(fn [& args]\n   (reduce #(if (> % %2) % %2) args)\n   )", "user": "602f8400e4b0d5df2af22299"}, {"problem": 38, "code": "#((comp last sort) %&)", "user": "5baba1ece4b0a20761a23482"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "601f508ce4b0bf4ca6b10959"}, {"problem": 38, "code": "(fn [& rest]\n    (reduce #(if (> %1 %2) %1 %2) rest) )", "user": "583aaf5ee4b089d5ab817d5b"}, {"problem": 38, "code": "#(last (sort %&))", "user": "600eb95de4b074f607df66a6"}, {"problem": 38, "code": "(fn f [x & xs]\n  (if (empty? xs)\n    x\n    (let [[y & ys] xs]\n      (if (> y x)\n        (apply f xs)\n        (apply f (cons x ys))))))", "user": "5ed61537e4b016b56eae05dc"}, {"problem": 38, "code": "(fn [& n] (reduce (fn [a b] (if (> a b) a b)) n))", "user": "60329afce4b0d5df2af222b8"}, {"problem": 38, "code": "(fn [& args]\n  (-> args sort last))", "user": "6023a3abe4b0d5df2af22212"}, {"problem": 38, "code": "#(-> %& sort last)", "user": "603454cbe4b0d5df2af222cb"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "6032f7f9e4b0d5df2af222b9"}, {"problem": 38, "code": "(fn my-max\n  [x & rest]\n  (reduce (fn [x y]\n            (if (> x y)\n              x\n              y))\n          x rest))", "user": "602f56c5e4b0d5df2af22297"}, {"problem": 38, "code": "(fn maxo\n([a] (if (= 1 (count a))\n  (first a)\n  (if (> (first a) (maxo (rest a)))\n    (first a)\n    (maxo (rest a)))\n))\n([a & tail]\n  (if (> a (maxo tail))\n    a\n    (maxo tail))\n))", "user": "602bca69e4b0d5df2af22267"}, {"problem": 38, "code": "(fn [head & args] \n     (reduce (fn [acc element] (if (> acc element) acc element)) head args))", "user": "6031926ae4b0d5df2af222ac"}, {"problem": 38, "code": "(fn [v1 & v-rest]\n  (loop [r v-rest\n        max-val v1]\n    (if (empty? r)\n      max-val\n      (recur (rest r) \n        (if (< max-val (first r))\n          (first r)\n          max-val\n        )\n      )\n    )\n  )\n)", "user": "60335b35e4b0d5df2af222bf"}, {"problem": 38, "code": "(fn return_max [& number_list] (first (sort > number_list)))", "user": "60383d43e4b0d5df2af222ec"}, {"problem": 38, "code": "(fn [& ar]\n  \n  (loop [ args ar a -100]\n    (if-not (next args)\n      a\n      (recur \n       (rest args) \n       (if (> a (first args) )\n         a\n         (first args))\n       ))))", "user": "6038b6b4e4b0d5df2af222ef"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "6037e468e4b0d5df2af222e8"}, {"problem": 38, "code": "(fn\n  [& coll]\n  (reduce (fn [num1 num2] \n            (if (> num1 num2)\n              num1\n              num2)\n            ) coll\n    )\n  )", "user": "60337f1fe4b0d5df2af222c1"}, {"problem": 38, "code": "#(last (sort %&))", "user": "603ba3a8e4b0d5df2af22300"}, {"problem": 38, "code": "#(last (sort %&))", "user": "603961e3e4b0d5df2af222f3"}, {"problem": 38, "code": "(fn func\n   [& a]\n   (reduce (fn\n             [c v]\n             (if (> v c) v c)) 1 a))", "user": "603bfd17e4b0d5df2af22304"}, {"problem": 38, "code": "(fn mx [a & r ] \n  (loop [_mx a \n         _r r]\n    (if (empty? _r) _mx \n      (recur \n       (if (< _mx (first _r) ) (first r) _mx) \n       (rest _r)))))", "user": "5fdc6ad4e4b05ac5b16ea13a"}, {"problem": 38, "code": "(fn [& nums]\n  (reduce (fn [acc curr]\n          (if (> curr acc)\n            curr\n            acc)) nums))", "user": "603d5f2ae4b0d5df2af2230c"}, {"problem": 38, "code": "#(last (sort %&))", "user": "603a6c40e4b0d5df2af222f7"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [x y] (if (> y x) y x)) xs))", "user": "603e29d4e4b0d5df2af22310"}, {"problem": 38, "code": "(fn [& r] (-> r sort reverse first))", "user": "603f1d04e4b0d5df2af2231e"}, {"problem": 38, "code": "(fn [& coll] (last (sort coll)))", "user": "601bb40de4b0bf4ca6b1092f"}, {"problem": 38, "code": ";; (fn [& args]\n;;   (last (sort args)))\n\n;; (comp last sort list)\n\n#(last (sort %&))", "user": "603e9cb6e4b0d5df2af22317"}, {"problem": 38, "code": "(fn\n   [& %]\n   (into [] %)\n   (last (sort %)))", "user": "60396c95e4b0d5df2af222f4"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "602ddebde4b0d5df2af2227d"}, {"problem": 38, "code": "#(last (sort %&))", "user": "603e063ae4b0d5df2af2230f"}, {"problem": 38, "code": "(fn [& args]\n  (reduce \n   #(cond (>= %1 %2) %1\n          (>= %2 %) %2)\n   (first args) (rest args))\n  )", "user": "60436423e4b02d28681c77a3"}, {"problem": 38, "code": "(fn my-max [& xs]\n  (reduce (fn [acc x] (if (> x acc)\n                        x\n                        acc))\n            (first xs)\n            xs))", "user": "601c39eee4b0bf4ca6b10937"}, {"problem": 38, "code": "(fn [& args]\n  (reduce (fn [acc b] (if (> b acc) b acc)) args))", "user": "5fcf86c2e4b07e53c2f3f00d"}, {"problem": 38, "code": "(fn [& more]\n  (reduce (fn [x y]\n            (if (> x y) x y))\n          more))", "user": "60460824e4b02d28681c77bc"}, {"problem": 38, "code": "(fn [& n] ((comp first reverse sort) n))", "user": "6034e358e4b0d5df2af222d1"}, {"problem": 38, "code": "(comp first reverse sort list)", "user": "60460876e4b02d28681c77bd"}, {"problem": 38, "code": "(fn [& xs]\n(let [bigger (fn [a b] (if (> a b) a b))] (reduce bigger (first xs) (rest xs))))", "user": "6045582fe4b02d28681c77b6"}, {"problem": 38, "code": "(fn mymax [& seq]\n    (reduce (fn [acc v] (if (> acc v) acc v)) seq)\n  )", "user": "603ae21de4b0d5df2af222fb"}, {"problem": 38, "code": "#(reduce (fn [x y] (if (>= x y) x y)) %&)", "user": "6046a0c7e4b02d28681c77c6"}, {"problem": 38, "code": "(fn my-max [& xs]\n  (reduce\n   #(if (< %1 %2) %2 %1)\n   (first xs)\n   (rest xs)))", "user": "6028365be4b0d5df2af22242"}, {"problem": 38, "code": "(fn [& params] \n  (reduce (fn m [n1 n2] (if (< n1 n2) n2 n1)) params)\n  )", "user": "60471241e4b02d28681c77c9"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [a b] (if (> a b) a b)) xs))", "user": "60486e8ae4b02d28681c77db"}, {"problem": 38, "code": "(fn [& coll] (reduce (fn [a b] (if (> a b) a b)) coll))", "user": "604a30c6e4b02d28681c77f0"}, {"problem": 38, "code": "(fn [& args] (last(sort args)))", "user": "60420ee4e4b04b4f332c3e71"}, {"problem": 38, "code": "(fn maxi [& nums] (reduce (fn big [a b] (if ( > a b) a b)) nums))", "user": "600b385ce4b074f607df668d"}, {"problem": 38, "code": "(fn f [& s]\n  (reduce (fn [acc s*] (if (> s* acc) s* acc)) (first s) (rest s)))", "user": "60196a7fe4b0bf4ca6b10921"}, {"problem": 38, "code": "(fn [head & tail] \n  (loop [biggest head [front & others] tail]\n    (cond\n     (nil? front) biggest\n     (> front biggest) (recur front others)\n     :else (recur biggest others))))", "user": "5f665d45e4b02876ed9fd02f"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "6020365ae4b0bf4ca6b10960"}, {"problem": 38, "code": "(fn [& x]\n  (loop [c (first x)\n         r (rest x)]\n    (if (empty? r)\n      c\n\t  (if (> c (first r))\n    \t (recur c (rest r))\n\t      (recur (first r) (rest r))))))", "user": "563b7724e4b0bfe05bf11814"}, {"problem": 38, "code": "(fn [h & t] (reduce (fn [y z] (if (> y z) y z)) h t))", "user": "604d3cb1e4b0b7ec0ac60ac2"}, {"problem": 38, "code": "(fn[aa & args](reduce (fn[a b](if (> a b) a b)) aa args))", "user": "6045e761e4b02d28681c77bb"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "603d35c3e4b0d5df2af2230a"}, {"problem": 38, "code": "(fn [first-value & values]\n  (loop [max-value first-value\n         other values]\n    (if (empty? other)\n               max-value\n               (let [new-max (if (> (first other) max-value)\n                               (first other)\n                               max-value)]\n                 (recur new-max (rest other))))))", "user": "600d9808e4b074f607df669c"}, {"problem": 38, "code": "(fn maximum\n  ( [x] x)\n  ( [x & extra]\n   (if (> (count extra) 0)\n     (if (> x (apply maximum (first extra) (drop 1 extra)))\n       x (apply maximum (first extra) (drop 1 extra)))\n     (first extra))))", "user": "604f4be1e4b0b7ec0ac60ace"}, {"problem": 38, "code": "(fn [& coll] (last (sort coll)))", "user": "6040e6dbe4b0d5df2af2232a"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) 0 xs))", "user": "603f6623e4b0d5df2af2231f"}, {"problem": 38, "code": "(fn [& coll]\n  (loop [m (first coll)\n         rest (rest coll)]\n    (if (empty? rest)\n      m\n      (let [[cur & nxt] rest]\n        (if (> m cur)\n          (recur m nxt)\n          (recur cur nxt))))))", "user": "6051bcfae4b056659d634203"}, {"problem": 38, "code": "(fn f [& xs]\n   (reduce #(if (> %1 %2) %1 %2) xs))", "user": "60537cd1e4b04c8f2157d152"}, {"problem": 38, "code": "(fn [& args]\n  (loop [maxVal (first args) l args]\n    (if (empty? l)\n      maxVal\n      (recur (if (> (first l) maxVal) (first l) maxVal) (rest l) ))))", "user": "6040f595e4b0d5df2af2232f"}, {"problem": 38, "code": "(fn [& r] (last (sort r)))", "user": "60511ccfe4b056659d6341ff"}, {"problem": 38, "code": "(fn maximum\n   [& s]\n   (reduce #(if (> %1 %2) %1 %2) s))", "user": "5f6adf5ee4b02876ed9fd049"}, {"problem": 38, "code": "(fn [& l] (reduce (fn [acc i] (if (< acc i) i acc)) l))", "user": "604ccb9fe4b0b7ec0ac60ac1"}, {"problem": 38, "code": "(fn [& args]\n    (loop [all-in-play (rest args) current-max (first args)]\n      (cond\n       (empty? all-in-play) current-max\n       (> (first all-in-play) current-max) (recur (rest all-in-play) (first all-in-play))\n       :else (recur (rest all-in-play) current-max))))", "user": "5f548678e4b0a0bc16850a7e"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "586e23d9e4b01531a375e9a5"}, {"problem": 38, "code": "(fn [& args] ((partial reduce #(if (> %1 %2) %1 %2)) (into [] args)))", "user": "5f1eec36e4b0f565ad998274"}, {"problem": 38, "code": "(fn m [& xs] (let [x (first xs) xss (rest xs)]\n             (if (empty? xss) x (let [y (apply m xss)] (if (> x y) x y)))))", "user": "6058e0a0e4b032d51aa7730d"}, {"problem": 38, "code": "(fn z ([x] x)\n      ([x y] (if (> x y) x y))\n      ([x y & more] (reduce z (z x y) more)))", "user": "605b49b7e4b079a07f8593f8"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "6059d2e0e4b07e92fa001ace"}, {"problem": 38, "code": "#(last(sort (seq %&)))", "user": "6059d9c8e4b07e92fa001ad0"}, {"problem": 38, "code": "(fn f [& s]\n  (reduce (fn [acc s*] (if (> s* acc) s* acc)) (first s) (rest s)))", "user": "605a2480e4b07e92fa001ad7"}, {"problem": 38, "code": "(fn [& more] (reduce (fn [x y] (if (> x y) x y)) more))", "user": "5b522591e4b02d533a91bd09"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "605b7a90e4b079a07f8593fc"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5c46dd64e4b0e06e1360a3a6"}, {"problem": 38, "code": "#(last (sort (seq %&)))", "user": "6059d824e4b07e92fa001acf"}, {"problem": 38, "code": "(fn\n  [& args]\n  (reduce #(if (>= %1 %2) %1 %2) args))", "user": "5ec02e20e4b00a66d4a95288"}, {"problem": 38, "code": "(fn [& nums] (reduce (fn [a b] (if (> a b) a b)) nums))\n;(fn [& nums] 8)", "user": "60549e69e4b069ae89ce6ac8"}, {"problem": 38, "code": "(fn [& seqq]\n  \n  (reduce\n   \n   (fn [acc x]\n     \n     (if (> x acc)\n       x\n       acc))\n   \n   \n   \n   (first seqq)\n   (rest seqq)\n   \n   ))", "user": "53b0750fe4b047364c044483"}, {"problem": 38, "code": "#(reduce (fn [acc cur] (if (> acc cur) acc cur)) 0 %&)", "user": "60538924e4b04c8f2157d153"}, {"problem": 38, "code": "(fn [& params] (reduce #(if (> %2 %1) %2 %1) 0 params))", "user": "60606490e4b03746e80ebf67"}, {"problem": 38, "code": "(fn [& inp] (reduce #(if (> %2 %1) %2 %1) inp))", "user": "605b7085e4b079a07f8593fa"}, {"problem": 38, "code": "(fn [& x] (last (sort x)))", "user": "6062229ee4b03746e80ebf71"}, {"problem": 38, "code": "(fn [head & tail] (loop [head head tail tail m 0] (if (empty? tail) m (recur (first tail) (rest tail) (if (> head m) head m)))))", "user": "60622c6ee4b03746e80ebf72"}, {"problem": 38, "code": "(fn my-max\n  [& xs]\n  (reduce (fn [x y] (if (< x y) y x)) xs))", "user": "6062e1bde4b03746e80ebf75"}, {"problem": 38, "code": "#(last (sort %&))", "user": "60461117e4b02d28681c77bf"}, {"problem": 38, "code": "(fn [& xs] (reduce #(if (> %2 %1) %2 %1) xs))", "user": "60522feae4b0af2ba86d5a0a"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [max-value current-value] (if (> current-value max-value) current-value max-value)) args))", "user": "60654263e4b069485764ddc9"}, {"problem": 38, "code": "(fn bigest \n  \t([a b] (if (> a b) a b))\n     \t([a b c] (cond \n                  (and (> a b) (> a c)) a\n                  (and (> b a) (> b c)) b\n                  (and (> c a) (> c b)) c))\n                  \t([a b c d] (cond\n                                  (and (> a b) (> a c) (> a d)) a\n                                  (and (> b a) (> b c) (> b d)) b\n                                  (and (> c a) (> c b) (> c d)) c\n                                  (and (> d a) (> d b) (> d c)) d)))", "user": "6033f8e9e4b0d5df2af222c6"}, {"problem": 38, "code": "(fn\n  [& nums]\n  (reduce #(if (> %1 %2) %1 %2) nums))", "user": "605a876be4b000d535e6f53c"}, {"problem": 38, "code": "(fn find-max\n  [curr & remain]\n  (let [x curr y (first remain)]\n    (if (nil? y)\n      x\n      (if (> x y)\n        (recur x (rest remain))\n        (recur y (rest remain)))))\n  ) -1", "user": "60617afee4b03746e80ebf6c"}, {"problem": 38, "code": "(fn my-max [a & res]\n  (cond \n   (= (count res) 0) a\n   (>= a (first res)) (apply my-max a (rest res))\n   :else (apply my-max (first res) (rest res))))", "user": "6065755ee4b069485764ddcc"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [a b] (if (> a b) a b)) args))", "user": "605f5c69e4b03746e80ebf5e"}, {"problem": 38, "code": "(fn\n  my-max\n  ([x] x) \n  ([x & rest] \n    (let \n      [other (apply my-max rest)] \n      (if (> x other) \n        x \n        other))))", "user": "5feb2034e4b05ac5b16ea1b1"}, {"problem": 38, "code": "(fn [& args]\n  (loop [xs     (rest args)\n         curmax (first args)]\n    (if (empty? xs)\n      curmax\n      (let [rxs (rest xs)\n            x1  (first xs)\n            newmax (if (> x1 curmax) x1 curmax)]\n        (recur rxs newmax)))))", "user": "606aafcfe4b069485764ddf6"}, {"problem": 38, "code": "(fn\n   [& x]\n   (reduce\n     (fn\n       [max-val y]\n       (if (> y max-val) y max-val))\n     (first x) (rest x))) 1", "user": "60631c2ee4b069485764ddbd"}, {"problem": 38, "code": "(fn [& args] (-> args sort last))", "user": "606a70a5e4b069485764ddf2"}, {"problem": 38, "code": "(fn [& z] (last (sort z)))", "user": "5bbcb71ce4b0a20761a23629"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "60689984e4b069485764dde6"}, {"problem": 38, "code": "(fn maxy [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "606d7f1ce4b069485764de14"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2) %2 %1) args))", "user": "606b16b8e4b069485764ddf7"}, {"problem": 38, "code": "(fn [& x]\r\n  (reduce #(if (> %1 %2) %1 %2) x))", "user": "606e0a42e4b069485764de19"}, {"problem": 38, "code": "#(last (sort %&))", "user": "606c87aae4b069485764de0d"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (< %1 %2)\n                         %2\n                         %1) args))", "user": "606d75f5e4b069485764de13"}, {"problem": 38, "code": "(fn [& l] (reduce (fn [a b] (if (> a b) a b) ) l ))", "user": "606f005ae4b069485764de1b"}, {"problem": 38, "code": "(fn\n  [& args]\n  (reduce (fn [m x] (if (> x m) x m))\n          (first args)\n          args))", "user": "5cf938a5e4b0b71b1d808a90"}, {"problem": 38, "code": "#(last (sort %&))", "user": "606ff89be4b069485764de22"}, {"problem": 38, "code": "(comp last sort list)", "user": "60735bc9e4b069485764de3c"}, {"problem": 38, "code": "#(last (sort %&))", "user": "6074dfa4e4b069485764de4c"}, {"problem": 38, "code": "(fn\n  [x & xs]\n  (last (sort (cons x xs)))\n\n )", "user": "6074f5ede4b069485764de52"}, {"problem": 38, "code": "#(first (sort > %&))", "user": "6074e088e4b069485764de4d"}, {"problem": 38, "code": "(fn [& args] \n  (reduce #(if (> %2 %1) %2 %1) 0 args))", "user": "6024544be4b0d5df2af2221f"}, {"problem": 38, "code": "(fn f [& n]\n  (reduce (fn [acc n] \n            (if (> n acc) \n              n \n              acc)) \n          (first n) (rest n)))", "user": "6075c214e4b069485764de5b"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "6074df6fe4b069485764de4b"}, {"problem": 38, "code": "#(reduce (fn [a b] (if (> b a) b a)) %&)", "user": "6059f25de4b07e92fa001ad1"}, {"problem": 38, "code": "(fn [x & xs] \n  (reduce #(if (> %1 %2) %1 %2) \n          (flatten (cons x xs))))", "user": "606bb930e4b069485764de04"}, {"problem": 38, "code": "(fn [& numbers] (last (sort numbers)))", "user": "606c095ee4b069485764de0a"}, {"problem": 38, "code": "(fn [& args]\n   (reduce\n    (fn [acc val]\n      (if (< acc val)\n        val\n        acc))\n    (first args)\n    args))", "user": "606e0e95e4b069485764de1a"}, {"problem": 38, "code": "(fn [& vals] (reduce #(- (+ %1 %2) (min %1 %2)) vals))", "user": "6076e363e4b069485764de65"}, {"problem": 38, "code": "#(last (sort %&))", "user": "60764350e4b069485764de5e"}, {"problem": 38, "code": "#(last (sort %&))\n;;# clojure reader", "user": "606ff56ce4b069485764de21"}, {"problem": 38, "code": "(fn [& nums] \n  (last (sort nums)))", "user": "5acc2c74e4b0e27600da780d"}, {"problem": 38, "code": "(fn  [ & x] (reduce (fn [m y] (if (> y m) y m) ) 0 x) )", "user": "6076adb2e4b069485764de60"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) 0 args))", "user": "607a1523e4b0a637ed78036a"}, {"problem": 38, "code": "(fn max-val [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) (flatten (cons x xs))))", "user": "607cd433e4b03d835a6eaec8"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [current-max candidate] (if (> candidate current-max) candidate current-max)) args))", "user": "60794173e4b0a637ed78035d"}, {"problem": 38, "code": "#(last (sort %&))", "user": "6070c7bae4b069485764de27"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5f82609ae4b0c071e6c840f9"}, {"problem": 38, "code": "#(last (sort %&))", "user": "607e1d32e4b03d835a6eaeda"}, {"problem": 38, "code": "(fn maximo\n  ([x y]\n     (if (> x y) x y))\n  ([x y & m]\n     (reduce maximo (maximo x y) m)))", "user": "607dd962e4b03d835a6eaed2"}, {"problem": 38, "code": "#(last (sort %&))", "user": "60777335e4b0a637ed78034f"}, {"problem": 38, "code": "(fn [& rando]\n  (loop [x rando\n         max-val 0]\n    (if (empty? x)\n      max-val\n      (if (> (first x) max-val)\n        (recur (rest x) (first x))\n        (recur (rest x) max-val)))))", "user": "607d6bc1e4b03d835a6eaecc"}, {"problem": 38, "code": "(fn [& args]\n  (reduce\n    #(if (> %1 %2)\n       %1\n       %2)\n    (seq args)))", "user": "607bd80be4b0a637ed780379"}, {"problem": 38, "code": "#(last (sort %&))", "user": "6074e1ade4b069485764de4e"}, {"problem": 38, "code": "(fn [a1 & a2] (first (reverse (sort (conj a2 a1)))))", "user": "605f92bae4b03746e80ebf62"}, {"problem": 38, "code": "#(last (sort %&))", "user": "607d97a6e4b03d835a6eaecf"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "6081b7fce4b0736b099e42d4"}, {"problem": 38, "code": "#(first (sort > %&))", "user": "60836285e4b0736b099e42e4"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "5f755d0be4b02876ed9fd0a9"}, {"problem": 38, "code": "(comp last sort list)", "user": "5f0a65dae4b09a3f05b71806"}, {"problem": 38, "code": "#(last (sort %&))", "user": "6074e1e4e4b069485764de4f"}, {"problem": 38, "code": "(fn [& args] (if (= 0 (count args)) nil (reduce (fn [result value] (if (> value result) value result)) 0 args)))", "user": "59c87d49e4b0a024fb6ae55b"}, {"problem": 38, "code": "(fn [& args]\n   (last (sort args)))", "user": "6074e278e4b069485764de51"}, {"problem": 38, "code": "#(reduce (fn [maxValue value] \n             (if (> value maxValue) value maxValue)) %&)", "user": "602c30e3e4b0d5df2af2226f"}, {"problem": 38, "code": "(fn my-max [& coll]\n  (reduce #(if (> %2 %1) %2 %1) coll))", "user": "608256d7e4b0736b099e42da"}, {"problem": 38, "code": "#(last (sort %&))", "user": "608135c8e4b0736b099e42d1"}, {"problem": 38, "code": "#(last(sort%&))", "user": "6085edade4b0736b099e42fc"}, {"problem": 38, "code": "(fn [& x]\n  (reduce #(if (> %2 %1) %2 %1) 0 x))", "user": "5db012e3e4b0f8c104ccfc95"}, {"problem": 38, "code": "#(last (sort %&))", "user": "6086cdefe4b0736b099e4302"}, {"problem": 38, "code": "#(last (sort %&))", "user": "57758671e4b0979f8965161f"}, {"problem": 38, "code": "(fn [& args] (loop [lst args\n                    x (count lst)\n                    mx (first lst)]\n               (if (= x 0)\n                 mx\n                 (if (> (first lst) mx)\n                   (recur (rest lst) (dec x) (first lst))\n                   (recur (rest lst) (dec x) mx)\n                   )\n                 )\n               )\n  )", "user": "607e1d9de4b03d835a6eaedb"}, {"problem": 38, "code": "(fn [& rest] (reduce #(if (> %1 %2) %1 %2) rest))", "user": "607e1c1fe4b03d835a6eaed8"}, {"problem": 38, "code": "(fn [x & xs] (reduce (fn [x y] (if (pos? (.compareTo y x)) y x)) x xs))", "user": "608335a4e4b0736b099e42e3"}, {"problem": 38, "code": "(fn [x & z] (first (sort > (flatten (list x z)))))", "user": "6081e475e4b0736b099e42d6"}, {"problem": 38, "code": "(fn [& values] (last (sort values)))", "user": "60849bd6e4b0736b099e42f2"}, {"problem": 38, "code": "(fn [& a]\n   ((fn spotmax [args]\n     (if (= (count args) 0) nil\n         (let [firstArg (first args)]\n           (if (= (count args) 1)\n             firstArg\n             (let [maxRest (spotmax (rest args))]\n                (if (> firstArg maxRest)\n                 firstArg\n                 maxRest)))))) a))", "user": "60882700e4b0ae75613dcedf"}, {"problem": 38, "code": "#(last (sort %&))", "user": "608828dee4b0ae75613dcee1"}, {"problem": 38, "code": "#(reduce (fn [a, b] (if (> a b) a b)) %&)", "user": "6088ed3fe4b0ae75613dcee6"}, {"problem": 38, "code": "(fn [& values]\n  (last (sort values))\n  )", "user": "60752ef6e4b069485764de55"}, {"problem": 38, "code": "#(last (sort %&))", "user": "60803206e4b0736b099e42cc"}, {"problem": 38, "code": "(fn MaximumValue [& enu] \n  (reduce (fn [n1 n2] \n            (if (<= n1 n2) \n              n2 \n              n1)) 0 enu))", "user": "607508f3e4b069485764de54"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %2 %1) %2 %1) a ))", "user": "60845eb8e4b0736b099e42ef"}, {"problem": 38, "code": "#(last (sort %&))", "user": "607e1cf9e4b03d835a6eaed9"}, {"problem": 38, "code": "#(last (sort %&))", "user": "607b6452e4b0a637ed780375"}, {"problem": 38, "code": "(fn [& args] (reduce (fn [x y] (if (> x y) x y)) args))", "user": "6078ce29e4b0a637ed78035a"}, {"problem": 38, "code": "(comp last #(sort %&))", "user": "608910a8e4b0ae75613dceed"}, {"problem": 38, "code": "(fn foo [& args]\n  (loop [lst args\n         ret 0]\n    (if (empty? lst)\n      ret\n      (recur (rest lst)\n             (let [val (first lst)]\n               (cond\n                 (nil? ret) val\n                 (> val ret) val\n                 :else ret))))))", "user": "607b04e5e4b0a637ed780373"}, {"problem": 38, "code": "(fn [& args] (last (sort (into #{} args))))", "user": "6086abade4b0736b099e42ff"}, {"problem": 38, "code": "#(last (sort %&))", "user": "608b3fe1e4b0adce4b61c442"}, {"problem": 38, "code": "#(last (sort %&))", "user": "608afb97e4b0adce4b61c43f"}, {"problem": 38, "code": "(fn  [& miau] (last(sort miau)))", "user": "607f3336e4b05857a65e7747"}, {"problem": 38, "code": "(fn mymax [& xs] (reduce #(if (> %1 %2) %1 %2) xs))", "user": "6089bc95e4b0ae75613dcef5"}, {"problem": 38, "code": "(fn [& xs] (last (sort xs)))", "user": "6087cb25e4b0ae75613dced8"}, {"problem": 38, "code": "(fn f [& args] \n  (reduce #(if (> %1 %2) %1 %2) args))", "user": "5f77a0c1e4b02876ed9fd0bb"}, {"problem": 38, "code": "#(last (sort %&))", "user": "6088c22ee4b0ae75613dcee4"}, {"problem": 38, "code": "(fn[x & others] (reduce (fn[y,z](if(> y z) y z)) x others))", "user": "608819b6e4b0ae75613dcedd"}, {"problem": 38, "code": "(fn [& more]\n  (reduce #(if (> %1 %2) %1 %2) (- (first more) 1) more))", "user": "5fa52497e4b0fa27300f3dbf"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "608dbb69e4b03bd49d9f36bb"}, {"problem": 38, "code": "(fn max-value [& args]\n  (reduce (fn [max_value cur] \n    (if (and (not (nil? max_value)) (> max_value cur)) max_value cur)) args))", "user": "605714ffe4b069ae89ce6ae1"}, {"problem": 38, "code": "(fn [& xd] (reduce #(if (>=  % %2) % %2) xd))", "user": "60901a6be4b03bd49d9f36c9"}, {"problem": 38, "code": "(fn __\n          ([x] x)\n          ([x y] (if (> x y) x y))\n          ([x y & zs] (reduce __ (__ x y) zs)))", "user": "604b072ae4b0a426fc8b43d2"}, {"problem": 38, "code": "#(reduce (fn [tot, curr] (if (> tot curr) tot curr)) %&)", "user": "608ec5e4e4b03bd49d9f36c0"}, {"problem": 38, "code": "#(last (sort %&))", "user": "609083a8e4b03bd49d9f36cb"}, {"problem": 38, "code": "(fn ans-38 [& arg]\n  (loop [i 0\n         result (first arg)]\n    (if (< i (count arg)) \n        (recur (inc i)\n               (if (> (nth arg i) result)\n                 (nth arg i)\n                 result))\n      result)))", "user": "608fac60e4b03bd49d9f36c7"}, {"problem": 38, "code": "(fn max-element [& elements]\n  (if (empty? elements) -1 (reduce (fn is-larger [a b] (if (> a b) a b)) Integer/MIN_VALUE elements)))", "user": "609117bbe4b03bd49d9f36cf"}, {"problem": 38, "code": "(fn [& l]\n  (loop [m (first l) r (rest l)]\n    (if (= r '())\n      m\n      (if (< m (first r))\n        (recur (first r) (rest r))\n        (recur m (rest r))))))", "user": "6090e617e4b03bd49d9f36ce"}, {"problem": 38, "code": "(fn [& seqq]\n  (reduce #(if (> %1 %2) %1 %2) 0 seqq))", "user": "6088395de4b0ae75613dcee2"}, {"problem": 38, "code": "(fn [c & coll]\n  (nth (sort (into [c] coll)) (dec (count (into [c] coll)))))", "user": "60759e51e4b069485764de5a"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "6091501de4b00e9e6653c3d3"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce (fn [x y] (if (pos? (.compareTo y x)) y x)) x xs))", "user": "608711b1e4b0736b099e4303"}, {"problem": 38, "code": "(fn [& n]\n   (prn n)\n   (int (/ 1\n       (reduce min (map (partial / 1) n))))\n\n   )", "user": "6093b56ce4b00e9e6653c3e0"}, {"problem": 38, "code": "#(last (sort %&))", "user": "608ee2f7e4b03bd49d9f36c1"}, {"problem": 38, "code": "#(last (sort %&))", "user": "608e6047e4b03bd49d9f36bf"}, {"problem": 38, "code": "(fn f [& s]\n  (reduce (fn [acc s*] (if (> s* acc) s* acc)) (first s) (rest s)))", "user": "6097b95ae4b00e9e6653c3f6"}, {"problem": 38, "code": "(fn [& args] \n(->>\nargs\n(map #(* % -1) )\n(apply min)\n(* -1)\n))\n;;(fn [& args] (* -1 (apply min (map #(* % -1) args))))", "user": "60892aa7e4b0ae75613dceef"}, {"problem": 38, "code": "(fn my-max\n  [& xs]\n  (reduce\n    (fn [acc x] (if (> acc x) acc x))\n    xs))", "user": "6098263be4b00e9e6653c3f9"}, {"problem": 38, "code": "(fn [& n] (reduce #(if (> %1 %2) %1 %2) n))", "user": "60919461e4b00e9e6653c3d7"}, {"problem": 38, "code": "#(last (sort %&))", "user": "609aa543e4b00e9e6653c40c"}, {"problem": 38, "code": "(fn [& s] (reduce #(if (>= %1 %2) %1 %2) -1 s))", "user": "6096d37be4b00e9e6653c3f0"}, {"problem": 38, "code": "(fn [& params]\n  (reduce (fn [x y]\n            (if (< x y) y x)\n            )\n  params))", "user": "609bfa16e4b00e9e6653c414"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) args))", "user": "609c1db9e4b00e9e6653c416"}, {"problem": 38, "code": "(fn getmax [& args]\n  (last(sort args)))", "user": "6092c0a9e4b00e9e6653c3dc"}, {"problem": 38, "code": "(fn [& x] ( last (sort x) ))", "user": "60904332e4b03bd49d9f36ca"}, {"problem": 38, "code": "(fn [& args](last (sort args)))", "user": "60915178e4b00e9e6653c3d4"}, {"problem": 38, "code": "(fn [x & xs]\n  (reduce #(if (< %1 %2) %2 %1) x xs))", "user": "609a54f0e4b00e9e6653c40b"}, {"problem": 38, "code": "(comp last sort list)", "user": "6092bfefe4b00e9e6653c3db"}, {"problem": 38, "code": "(fn[& args]\n  (first (sort > args)))", "user": "60a42199e4b00e9e6653c454"}, {"problem": 38, "code": "(fn [& s]\n  (reduce (fn [acc s*]\n            (if (> s* acc) s* acc))\n          (first s) (rest s)))", "user": "60462028e4b02d28681c77c2"}, {"problem": 38, "code": "(fn max-ele [& s]\n  (reduce\n  (fn [x y]\n    (if (> x y) x y)) s))", "user": "608c270ae4b03bd49d9f36b3"}, {"problem": 38, "code": "#(last (sort %&))", "user": "5d3b0764e4b01671435dbd61"}, {"problem": 38, "code": "(fn mx\n\t([a]\n\t\t(a))\n\t([a b]\n\t\t(if (> a b) a b))\n\t([a b & other]\n\t\t(mx a (apply mx (conj other b)))))", "user": "5cc9b7dfe4b0ccb061962864"}, {"problem": 38, "code": "#(->> %&\n   (sort)\n   (last))", "user": "60ab1536e4b00e9e6653c47e"}, {"problem": 38, "code": "#(last(sort %&))", "user": "52435d0ce4b076204b44fab5"}, {"problem": 38, "code": "#(last (sort %&))", "user": "60ab0ba2e4b00e9e6653c47d"}, {"problem": 38, "code": "(fn [& rest] (last (sort rest)))", "user": "60a9f193e4b00e9e6653c476"}, {"problem": 38, "code": "(fn [& args]\n  (last (sort args)))", "user": "60a39b80e4b00e9e6653c450"}, {"problem": 38, "code": ";(fn [& args] (last(sort args)))\n(fn [& args] \n   (reduce \n    (fn [x y] (if (> x y) x y)) 0 args))", "user": "60a7c55be4b00e9e6653c468"}, {"problem": 38, "code": "(fn [& values] \n  (reduce (fn [max-val x]\n         (if (> x max-val)\n           x\n           max-val)) values))", "user": "60ade833e4b00e9e6653c494"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "60a68a95e4b00e9e6653c461"}, {"problem": 38, "code": "(fn [& args]\n  (reduce #(if (> %1 %2)\n             %1\n             %2) Integer/MIN_VALUE args))", "user": "60a52517e4b00e9e6653c459"}, {"problem": 38, "code": "(fn maxi [x & args]\n  (let [maxi (-> args\n                 (sort)\n                 (last))]\n    (if (< maxi x) x maxi)))", "user": "60aecd73e4b00e9e6653c49a"}, {"problem": 38, "code": "(fn [n & ns] \n  (reduce (fn [a b] \n            (if (> b a) b a)) \n          (cons n ns)))", "user": "57123c96e4b09c608db70454"}, {"problem": 38, "code": "(fn [& args](reduce #(if (> %1 %2) %1 %2) args))", "user": "609beb06e4b00e9e6653c412"}, {"problem": 38, "code": "(fn mx [& x]\n  (let [mx2 (fn [y z] (if (> y z) y z))]\n    (if (empty? (rest x))\n      (first x)\n      (mx2 (first x) (apply mx (rest x))))))", "user": "60b2aaebe4b0e0fa5f1b4228"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) args))", "user": "5ec540d8e4b08d0ec38692c7"}, {"problem": 38, "code": "(fn [& n] (first (reduce (fn [mi item] (if (> item (first mi)) (assoc mi 0 item) mi)) [0] n)))", "user": "60ac91c5e4b00e9e6653c485"}, {"problem": 38, "code": "(fn [& myseq]\n  (reduce (fn [a b] (if (> a b) a b)) myseq))", "user": "60726211e4b069485764de36"}, {"problem": 38, "code": "(fn [& args]\n  (loop [res (first args) lst (rest args)]\n    (if (empty? lst)\n      res\n      (let [[x & remaining] lst m (if (> x res) x res)]\n        (recur m remaining)))))", "user": "51b920bfe4b0e871ca4958f9"}, {"problem": 38, "code": "(fn [first-arg & args]\n  (first\n   (reduce (fn [max-seq value]\n             (let [max-val (first max-seq)]\n               (if (> max-val value)\n                 [max-val]\n                 [value])))\n           [first-arg] args)))", "user": "60b1add0e4b0e0fa5f1b4227"}, {"problem": 38, "code": "(fn\n             ([& coll] (reduce (fn [acc x] (if (> x acc) x acc)) 0 coll))\n            )", "user": "60b616e1e4b0e0fa5f1b4243"}, {"problem": 38, "code": "(fn [& po] (reduce (fn [a b] (if (> a b) a b)) po))", "user": "60b61b40e4b0e0fa5f1b4244"}, {"problem": 38, "code": "(fn my-max [x & y] (if (-> x (cons y) (count) (= 1))\n                  x\n                  (if (<= x (first y))\n                    (apply my-max y)\n                    (apply my-max (cons x (rest y))))))", "user": "6093cc08e4b00e9e6653c3e1"}, {"problem": 38, "code": "(fn [arg1 arg2 & others]\n  (let [max-val \n        (if (> arg1 arg2)\n      arg1\n      arg2)]\n  (if (empty? others)\n    max-val\n    (recur max-val (first others) (rest others)))))", "user": "60b79ed6e4b0e0fa5f1b4250"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %2 %1) %2 %1) xs))", "user": "60b174f3e4b0e0fa5f1b4226"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce (fn [mx x] (if (> x mx) x mx)) (first xs) (rest xs)))", "user": "60b57acee4b0e0fa5f1b4238"}, {"problem": 38, "code": "#(last (sort %&))", "user": "60b7e2c5e4b0e0fa5f1b4252"}, {"problem": 38, "code": "(comp (partial reduce #(if (> %1 %2) %1 %2)) vector)", "user": "60b8b9dae4b0e0fa5f1b425d"}, {"problem": 38, "code": "(fn [x & args] (reduce (fn [acc el] (if (> el acc) el acc)) x args ))", "user": "60b3b375e4b0e0fa5f1b4232"}, {"problem": 38, "code": "(fn [& lst]\n     (reduce (fn [x y]\n               (if (> x y) x y)) 0 lst))", "user": "608e5697e4b03bd49d9f36be"}, {"problem": 38, "code": "(fn [& max-seq] (reduce #(if (> %1 %2) %1 %2) max-seq))", "user": "60ae0ac5e4b00e9e6653c495"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "604a3daee4b02d28681c77f2"}, {"problem": 38, "code": "(fn [a & b]\n  (reduce #(if (< %1 %2)\n             %2\n             %1) a b))", "user": "5f6580e7e4b02876ed9fd023"}, {"problem": 38, "code": "(fn [& s] (last (sort s)))", "user": "60b8f098e4b0e0fa5f1b425f"}, {"problem": 38, "code": "#(last (sort %&))", "user": "60afc597e4b0245e5b1b35c3"}, {"problem": 38, "code": "(comp (partial reduce #(if (>= %1 %2) %1 %2))\n        list)", "user": "5f2d6bc4e4b033932238a66e"}, {"problem": 38, "code": "(fn [& xs] \n        (reduce (fn [acc n] \n                          (if (> n acc) \n                            n \n                            acc))\n                        0\n                        xs))", "user": "60c0ceb7e4b0e0fa5f1b42a6"}, {"problem": 38, "code": "(fn [& xs] \n   (reduce #(if (> %1 %2) %1 %2) -1000000 xs))", "user": "5fd92743e4b05ac5b16ea11f"}, {"problem": 38, "code": "(fn [x & xs] (reduce #(if (> %1 %2) %1 %2) x xs))", "user": "60b5fa96e4b0e0fa5f1b4242"}, {"problem": 38, "code": "(fn [& s]\n  (first (sort > s)))", "user": "60beb061e4b0e0fa5f1b428d"}, {"problem": 38, "code": "(fn [& a]\n  (last (sort a)))", "user": "60b0e7efe4b0e0fa5f1b4223"}, {"problem": 38, "code": "(comp last sort vector)", "user": "60bca877e4b0e0fa5f1b4287"}, {"problem": 38, "code": "(fn [& x] (reduce (fn [num1 num2] (if (< num1 num2) num2 num1)) x))", "user": "60c7c23be4b0e0fa5f1b42eb"}, {"problem": 38, "code": "(fn [& a] (reduce #(if (> %1 %2) %1 %2) a))", "user": "60c4e5dfe4b0e0fa5f1b42cd"}, {"problem": 38, "code": "(fn [& xs]\n  (reduce #(if (> %1 %2) %1 %2) xs))", "user": "5f1c0447e4b0f565ad99825c"}, {"problem": 38, "code": "(comp last sort list)", "user": "60c91f48e4b0e0fa5f1b4304"}, {"problem": 38, "code": "(fn max-finder [& params] (reduce\n                              (fn [x y] (if (> x y) x y))\n                              params))", "user": "60c90322e4b0e0fa5f1b4302"}, {"problem": 38, "code": "(fn [& args] (last (sort (vec args))))", "user": "60c3f665e4b0e0fa5f1b42c8"}, {"problem": 38, "code": "#(reduce\n  (fn [maximum item]\n    (if (> item maximum)\n      item\n      maximum))\n  0\n  %&)", "user": "60b7ef35e4b0e0fa5f1b4254"}, {"problem": 38, "code": "(fn [& more] \n  (reduce\n   (fn \n     [x y]\n     (if (> x y) x y)\n     )\n   more))", "user": "60c65b10e4b0e0fa5f1b42d3"}, {"problem": 38, "code": "(fn\n  [num-val & rest-nums]\n  (loop [collection rest-nums maximum num-val]\n    (if (empty? collection)\n      maximum\n      (recur (rest collection) (if (> (first collection) maximum)\n                                 (first collection)\n                                 maximum)))))", "user": "603e8e3ae4b0d5df2af22316"}, {"problem": 38, "code": "(fn [& c] (reduce \n           (fn [a b]\n             (if (> a b) a b))\n           0\n           c))", "user": "60cb3836e4b0e0fa5f1b4315"}, {"problem": 38, "code": "(fn maximum [& args] (if (= (second args) nil)\n                         (first args)\n                         (if\n                          (> (first args) (second args))\n                           (apply maximum (conj (drop 1 (rest args)) (first args)))\n                           (apply maximum (rest args)))))", "user": "60c86bbde4b0e0fa5f1b42fb"}, {"problem": 38, "code": "(fn [& numbers] (last (sort numbers)))", "user": "60cb480be4b0e0fa5f1b4317"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [a b] (if (> a b) a b)) xs))", "user": "5c3a896be4b0d62ef62d9f94"}, {"problem": 38, "code": "(fn [& params]\n  (-> params\n      sort\n      last))", "user": "60d5cbb4e4b0d60f5ea6f7e4"}, {"problem": 38, "code": "(fn [& args] ( first ( reverse ( sort args ) ) ) )", "user": "60d78d64e4b0d60f5ea6f7ed"}, {"problem": 38, "code": "(fn\n  [x & remaining]\n  (reduce\n    (fn [x y]\n      (if (> x y) x y))\n    x remaining)\n  )", "user": "60c8e662e4b0e0fa5f1b4300"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %2 %1) %2 %1) args))", "user": "5fae84b3e4b08cb800c85afd"}, {"problem": 38, "code": "(fn [& elems]\n  (reduce\n   (fn [x y]\n     (if (> x y)\n       x\n       y))\n   elems))", "user": "60704214e4b069485764de24"}, {"problem": 38, "code": "(fn [& args] \n  (reduce (fn [a v] (if (> v a) v a)) args))", "user": "60ddc7cbe4b0abd5a8cdd531"}, {"problem": 38, "code": "(fn [& args] (reduce #(if (> %1 %2) %1 %2) 0 args))", "user": "60db702ae4b02d404a3b4372"}, {"problem": 38, "code": "(fn [& args] (last (sort args)))", "user": "60dd865ee4b0d8b48c489db3"}, {"problem": 38, "code": "(fn [& xs] (reduce (fn [a b] (if (> a b) a b)) xs))", "user": "5cd26163e4b0ccb0619628fe"}, {"problem": 38, "code": "#(last (sort %&))", "user": "60d002d2e4b02520c611a6d1"}]