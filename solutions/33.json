[{"code": "(fn rec [ls n]\r\n  (lazy-seq\r\n    (if (empty? ls) ()\r\n      (concat\r\n        (repeat n (first ls))\r\n        (rec (rest ls) n)))))", "problem": 33, "user": "4dd62278535d2dad7130b5c7"}, {"code": "(fn [a-seq n] (reverse (reduce #(into %1 (repeat n %2)) () a-seq)))", "problem": 33, "user": "4dd61f98535d2dad7130b5c6"}, {"code": "#(mapcat(partial repeat%2)%)", "problem": 33, "user": "4dd66da7535d2dad7130b5c8"}, {"code": "(fn rep [s n]\r\n  (if-let [[x & xs] (seq s)]\r\n    (concat (replicate n x) (rep xs n))))", "problem": 33, "user": "4dd6d6a0535d2dad7130b5ca"}, {"code": "#(reduce concat (map (partial repeat %2) %1))", "problem": 33, "user": "4dd6fa35535d2dad7130b5cd"}, {"code": "(fn replicate [sequ n] \r\n  (if (empty? sequ) \r\n    '() \r\n    (let [head (repeat n (first sequ))]\r\n    (concat head (replicate (rest sequ) n)))))", "problem": 33, "user": "4dd6d7ee535d2dad7130b5cb"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4dce6e41535d5973398f92a2"}, {"code": "(fn repsec [xs n]\r\n  (let [repelem (fn repelem [x n2]\r\n                  (if (= n2 0)\r\n                    ()\r\n                    (conj (repelem x (dec n2)) x)))]\r\n    (if (empty? xs)\r\n      ()\r\n      (concat (repelem (first xs) n) (repsec (rest xs) n)))))", "problem": 33, "user": "4dd023dd535d5973398f92ad"}, {"code": "(fn [coll n]\r\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4dd4f0a8535dae65d5c462e4"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4dae0510c9a9d6ed4b99dc57"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "problem": 33, "user": "4ddbfb8a535d02782fcbea00"}, {"code": "(fn [collect times] \r\n  (mapcat #(if (coll? %) % [%]) (map \r\n\t\t(fn [r] \r\n\t\t\t(repeat times r)\r\n\t\t)\r\n\t\tcollect\r\n\t)))", "problem": 33, "user": "4dd579b5535dae65d5c462ea"}, {"code": "(fn [xs n] (apply concat (map #(repeat n %) xs)))", "problem": 33, "user": "4dd52e29535dae65d5c462e5"}, {"code": "(fn [s n]\r\n  (letfn [(dd [in cnt lst]\r\n            (if (empty? in)\r\n              lst\r\n              (recur (rest in) cnt (concat lst (repeat cnt (first in))))))]\r\n    (dd s n '())))", "problem": 33, "user": "4dd1de4d535dae65d5c462d7"}, {"code": "(fn [lst n]\r\n  (loop [ns lst xs '()]\r\n    (if (= nil (first ns))\r\n      (reverse xs)\r\n      (recur (rest ns) (apply conj xs (repeat n (first ns)))))))", "problem": 33, "user": "4ddc620d535d02782fcbea06"}, {"code": "(fn  [s n]  (reduce #( concat %1 (repeat n %2)) [] s))", "problem": 33, "user": "4db135081254ad5b4805fa67"}, {"code": "(fn[l n](reduce concat '() (map #(take n (repeat %)) l)))", "problem": 33, "user": "4ddbd934535d02782fcbe9fc"}, {"code": "(fn [i_list repetition]\r\n    (reduce\r\n        (fn [current next]\r\n            (concat current (repeat repetition next)))\r\n        []\r\n        i_list))", "problem": 33, "user": "4dddf817535d08e6dec9fdd3"}, {"code": "(fn [coll n]\r\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4ddbdc1b535d02782fcbe9fd"}, {"code": "(fn [coll n]\r\n (reverse\r\n  (reduce\r\n   (fn [col val]\r\n    (concat (take n (cycle (seq (vector val)))) col))\r\n   '()\r\n   (seq coll))))", "problem": 33, "user": "4ddee37c535d08e6dec9fddc"}, {"code": "(fn [xs n] (apply concat (map #(repeat n %) xs)))", "problem": 33, "user": "4ddc1c89535d02782fcbea01"}, {"code": "(fn mult[coll x](if (empty? coll) () \r\n(concat\r\n  (for [y (range x)] (first coll))\r\n  (mult (rest coll) x))))", "problem": 33, "user": "4dbed096535d020aff1edf6b"}, {"code": "(fn [s n]\r\n  (reverse\r\n   (reduce #(loop [r %1\r\n                   n n]\r\n              (if (= n 0)\r\n                r\r\n                (recur (conj r %2) (- n 1))))\r\n           '()\r\n           s)))", "problem": 33, "user": "4de2f44f535d08e6dec9fdec"}, {"code": "(fn dup [lst times]\r\n  (if (seq lst)\r\n    (lazy-seq (concat (repeatedly times (constantly (first lst))) (dup (rest lst) times)))))", "problem": 33, "user": "4dda5d07535d02782fcbe9f2"}, {"code": "(fn replicate [coll x]\r\n(apply concat (map #(repeat x %) coll)))", "problem": 33, "user": "4ddeb916535d08e6dec9fdd9"}, {"code": "(fn [xs n]\r\n  (reduce #(concat %1 (take n (repeat %2)))\r\n          '()\r\n          xs))", "problem": 33, "user": "4dea9406535d08e6dec9fe01"}, {"code": "#(mapcat repeat (repeat %2) %)", "problem": 33, "user": "4de77a0a535d08e6dec9fdfa"}, {"code": "(fn replicate [coll num]\r\n   (when (seq coll)\r\n   (concat (repeat num (first coll)) (replicate (rest coll) num))))", "problem": 33, "user": "4de623ef535d08e6dec9fdf4"}, {"code": "(fn [s n] (reverse (reduce\r\n  (fn [e c]\r\n    (loop [i n r e]\r\n      (if (= i 0) r\r\n        (recur (- i 1) (conj r c)))))\r\n  '() s)))", "problem": 33, "user": "4dee4a9c535d08e6dec9fe11"}, {"code": "(fn dup [s n]\r\n  (letfn [(consn [s l n]\r\n            (if (= n 0)\r\n                l\r\n                (consn s (cons s l) (- n 1))))]\r\n        (if (empty? s)\r\n            s\r\n            (consn (first s) (dup (rest s) n) n))))", "problem": 33, "user": "4df1ce44535d08e6dec9fe1f"}, {"code": "(fn [seq,n]\r\n  (reduce concat\r\n    (map (fn [x] (map (fn [_] x) (range n))) seq)))", "problem": 33, "user": "4df1e213535d08e6dec9fe20"}, {"code": "(fn [coll n]\r\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4df168bd535d08e6dec9fe1d"}, {"code": "(fn [xs n] \r\n       (reduce #(concat %1 (repeat n %2)) [] xs))", "problem": 33, "user": "4deb529a535d08e6dec9fe04"}, {"code": "(fn [s i] (apply concat (map #(replicate i %) s)))", "problem": 33, "user": "4dbbe3b9535d3f4042261ecf"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "problem": 33, "user": "4df3d4f4535d08e6dec9fe2c"}, {"code": "#(apply concat (map (partial repeat %2) %))", "problem": 33, "user": "4df20dda535d08e6dec9fe23"}, {"code": "(fn [the-seq num]\r\n  (mapcat\r\n   (fn [x]\r\n     (loop [s '() n num]\r\n       (if (zero? n)\r\n         s\r\n         (recur (conj s x) (dec n)))) ) the-seq))", "problem": 33, "user": "4df3df8a535d08e6dec9fe2d"}, {"code": "(fn [coll n]\r\n  (reduce concat '() \r\n    (map #(take n (cycle (list %))) coll)))", "problem": 33, "user": "4df407c3535d08e6dec9fe2e"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "4df669d4535d08e6dec9fe35"}, {"code": "(fn [l n] (apply concat (map #(take n (repeat %)) l)))", "problem": 33, "user": "4db883e1535d1e037afb2198"}, {"code": "(fn l [x n]\r\n  (take (* n(count x))\r\n    (lazy-seq \r\n      (concat (repeat n (first x)) (l(rest x) n)))))", "problem": 33, "user": "4de18de7535d08e6dec9fde8"}, {"code": "(fn [coll n]\r\n   (if (= 1 n)\r\n     coll\r\n     (apply interleave (repeat n coll))))", "problem": 33, "user": "4daef21cedd6309eace4d169"}, {"code": "(fn [xs n]\r\n  (apply concat\r\n    (map #(repeat n %) xs)))", "problem": 33, "user": "4dfd4ba8535d04ed9115e781"}, {"code": "#(mapcat (fn [v] (repeat %2 v)) %1)", "problem": 33, "user": "4def301c535d08e6dec9fe12"}, {"code": "(fn [s n]\r\n  (mapcat #(repeat n %) s))", "problem": 33, "user": "4e02bee8535d04ed9115e791"}, {"code": "(fn [arr m](mapcat (fn [x] (repeat m x)) arr))", "problem": 33, "user": "4de6f806535d08e6dec9fdf7"}, {"code": "#(mapcat (partial replicate %2) %)", "problem": 33, "user": "4e03c616535d04ed9115e796"}, {"code": "(fn [xs n]\r\n  (apply concat\r\n    (map\r\n      (partial replicate n) xs)))", "problem": 33, "user": "4dc7e7a5535d8a4b2fd74290"}, {"code": "(fn myrepeat \r\n                 ([coll times] (myrepeat coll times []))\r\n                 ([coll times coll2]\r\n                   (if (empty? coll)\r\n                     coll2\r\n                     (recur (rest coll) times (into coll2 (take times (repeat (first coll))))))))", "problem": 33, "user": "4dddff47535d08e6dec9fdd4"}, {"code": "#(reverse\r\n (reduce (fn [acc x]\r\n            (into acc (doall (for [_ (range %2)]\r\n                               x))))\r\n         ()\r\n         %1))", "problem": 33, "user": "4e0d8c27535d04ed9115e7b7"}, {"code": "(fn [s n] (reduce (fn [l r] (concat l (repeat n r))) () s))", "problem": 33, "user": "4e0e0529535d04ed9115e7b9"}, {"code": "(fn [s n]\r\n  (if (<= n 1)\r\n    s\r\n    (apply interleave\r\n     (take n (iterate \r\n\t\t    (fn [lst] lst) s)))))", "problem": 33, "user": "4dd7d040535d2dad7130b5d6"}, {"code": "(fn [c n] (mapcat #(take n (repeat %)) c))", "problem": 33, "user": "4e111538535d04ed9115e7c3"}, {"code": "#(mapcat (fn [e] (repeat %2 e)) %)", "problem": 33, "user": "4daa374930acd6ed13482a68"}, {"code": "(fn repseq [initxs n]\r\n  (loop [ys nil, xs initxs]\r\n    (if (empty? xs)\r\n      ys\r\n      (if (nil? (seq ys))\r\n        (recur (take n (iterate identity (first xs))) (rest xs))\r\n        (recur (concat ys  \r\n                (take n (iterate identity (first xs))))\r\n                (rest xs))))))", "problem": 33, "user": "4e123905535d04ed9115e7ce"}, {"code": "(fn my-duplicate [coll n]\r\n  (reduce concat (map (partial repeat n) coll)))", "problem": 33, "user": "4e043d85535d04ed9115e79e"}, {"code": "(fn [s k] (if (= k 1) s (apply interleave (repeat k s))))", "problem": 33, "user": "4e14108c535d04ed9115e7dd"}, {"code": "(fn [coll n]\r\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4e1158aa535d04ed9115e7c6"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4e14b925535d04ed9115e7df"}, {"code": "(fn [coll n]\r\n  (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "4e14090d535d04ed9115e7dc"}, {"code": "(fn [x n]\r\n  (loop [s x r []]\r\n    (if (empty? s) r\r\n       (recur (rest s) (concat r (repeat n (first s)))))))", "problem": 33, "user": "4deff9f9535d08e6dec9fe15"}, {"code": "(fn [x n]\r\n   (reduce concat (map #(repeat n %) x)))", "problem": 33, "user": "4e059278535d04ed9115e7a5"}, {"code": "(fn myrep [lt n]\r\n    (letfn [(rep-ntimes [n e]\r\n  \t\t(if (= n 0) '() (cons e (rep-ntimes (- n 1) e))))]\r\n\t   (apply concat (map (partial rep-ntimes n) lt))))", "problem": 33, "user": "4e1b2cd9535d04ed9115e7fd"}, {"code": "#(reduce concat (for [m %] (repeat %2 m)))", "problem": 33, "user": "4e16bdef535d04ed9115e7e9"}, {"code": "(fn [lat n]\r\n  (reduce concat (map #(take n (repeat %)) lat)))", "problem": 33, "user": "4ddb339c535d02782fcbe9f9"}, {"code": "#(loop [coll %1 n %2 c ()]\r\n  (if (empty? coll)\r\n   (reverse c)\r\n  (recur (rest coll) n (into c (repeat n (first coll))))))", "problem": 33, "user": "4db6ce85535d1e037afb217f"}, {"code": "(fn [list times]\r\n  \t(mapcat #(replicate times %1 ) list))", "problem": 33, "user": "4dfd7ecf535d04ed9115e783"}, {"code": "(fn [a n] (mapcat #(repeat n %) a))", "problem": 33, "user": "4e218464535d04ed9115e816"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4e218470535d04ed9115e817"}, {"code": "(fn [coll times]\r\n  (apply concat (map #(repeat times %) coll))\r\n)", "problem": 33, "user": "4e1ec17a535d04ed9115e80a"}, {"code": "(fn f [[x & more] n]\r\n  (if (not x)\r\n    []\r\n    (concat (repeat n x) (f more n))))", "problem": 33, "user": "4e113a81535d04ed9115e7c5"}, {"code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "problem": 33, "user": "4e232f34535d04ed9115e81f"}, {"code": "(fn [ls n]\n  (apply concat\n    (map (partial repeat n) ls)))", "problem": 33, "user": "4de165f3535d08e6dec9fde6"}, {"code": "(let [k (fn tigger [x y] (if (= 0 y) [] (cons x (tigger x (dec y)))))] (fn f [x y] (if (= x []) [] (concat (k (first x) y) (f (rest x) y)))))", "problem": 33, "user": "4e1e7f88535d04ed9115e808"}, {"code": "(fn [s n]\r\n   (loop [r (seq s) acc '()]\r\n     (if (nil? (seq r))\r\n       acc\r\n       (let [f (first r)]\r\n         (recur (rest r) (concat acc (repeat n f)))))))", "problem": 33, "user": "4e26e8b4535deb9a81d77ef6"}, {"code": "(fn [v n] (reduce into [] (map #(repeat n %) v)))", "problem": 33, "user": "4e28120f535deb9a81d77efa"}, {"code": "; ist mapcat lazy ? -> kl\u00e4ren\n(fn myreplicate [x n] \n  (if (sequential? x)\n    (mapcat (partial repeat n) x) \n    (repeat n x)))", "problem": 33, "user": "4e131443535d04ed9115e7d3"}, {"code": "(fn duplicate-n [coll n]\r\n  (mapcat #(replicate n %) coll))", "problem": 33, "user": "4dc54eb2535d8a4b2fd74284"}, {"code": "#(letfn [(ndup [xs n]\r\n  (if (= xs [])\r\n\t    []\r\n\t    (let [x (first xs)]\r\n\t\t  (concat (replicate n x) (ndup (rest xs) n)))))]\r\n  (ndup %1 %2))", "problem": 33, "user": "4e273301535deb9a81d77ef7"}, {"code": "(fn mulpli [sq n]\n (reverse\n  (reduce #(concat (repeat n %2) %1)  '() sq)))", "problem": 33, "user": "4e2d562c535deb9a81d77f07"}, {"code": "(fn [sq n]\n  (loop [i sq, o []]\n    (if (seq i)\n        (recur\n          (rest i)\n          (concat o (repeat n (first i))))\n        (seq o))))", "problem": 33, "user": "4de760a3535d08e6dec9fdf9"}, {"code": "#(reduce concat (map (partial repeat %2) %1))", "problem": 33, "user": "4e2edb0e535deb9a81d77f0d"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4e307313535deb9a81d77f14"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4e31a15c535deb9a81d77f1e"}, {"code": "(fn [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "4e21c0c7535d04ed9115e818"}, {"code": "(fn [sq n]\n  (apply concat (map #(repeat n %) sq)))", "problem": 33, "user": "4e342671535deb9a81d77f29"}, {"code": "(fn [x y] (mapcat (fn [z] (repeat y z)) x))", "problem": 33, "user": "4e3000c8535deb9a81d77f13"}, {"code": "(fn [seq num]\n    (apply concat (apply map \n        (cons list (repeat num seq)))))", "problem": 33, "user": "4e2f9e71535deb9a81d77f11"}, {"code": "(fn [coll n]\n  (reverse (reduce\n    (fn [acc x] (nth (iterate (partial cons x) acc) n)) [] coll)))", "problem": 33, "user": "4e36425c535deb9a81d77f33"}, {"code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "problem": 33, "user": "4e360757535deb9a81d77f32"}, {"code": "(fn dup-n [coll n]\r\n\"Duplicates each element of a sequence n times\"\r\n(loop [acc [] c coll]\r\n(let [p (first c)]\r\n(if (nil? p)\r\nacc\r\n(recur (apply conj acc (for [i (range 0 n)] p)) (rest c))))))", "problem": 33, "user": "4e370a04535deb9a81d77f37"}, {"code": "(fn [coll n] (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "4e22b78b535d04ed9115e81e"}, {"code": "(fn[l n]\n  (reduce\n    (fn [a i]\n      (concat a (repeat n i)))\n    '()\n    l)\n  )", "problem": 33, "user": "4e2b1d48535deb9a81d77f03"}, {"code": "(fn [x t]\n  (mapcat #(repeat t %) x ) )", "problem": 33, "user": "4e333091535deb9a81d77f25"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4e39fb68535deb9a81d77f47"}, {"code": "#(reduce concat(map(partial repeat %2)%1))", "problem": 33, "user": "4e3b6bff535deb9a81d77f52"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4e3996b0535deb9a81d77f41"}, {"code": "(fn [s x] (loop [s s, r nil]\n  (if\n    (empty? s)\n    r\n    (recur (rest s)\n      (concat r (loop [e (first s), c 0, u nil]\n        (if (= c x)\n            u\n            (recur e (inc c) (concat u (list e))))))))))", "problem": 33, "user": "4e3ac1b2535deb9a81d77f4c"}, {"code": "(fn [dup n] \n  (if (= 1 n)\n  dup\n  (apply interleave \n    (take n \n      (repeat dup)))))", "problem": 33, "user": "4e3f480c535dc968683fc497"}, {"code": "(fn [x y]\n  (if (= y 1)\n     x\n     (apply interleave(repeat y x))\n  )\n)", "problem": 33, "user": "4e39c710535deb9a81d77f45"}, {"code": "#(apply concat (for [x %1] (repeat %2 x)))", "problem": 33, "user": "4e39d763535deb9a81d77f46"}, {"code": "(fn [x y]\n  (if (> y 1)\n    (apply interleave (replicate y x))\n    x\n  )\n)", "problem": 33, "user": "4e3456f9535deb9a81d77f2a"}, {"code": "(fn repl [lst times]\n  (cond\n    (empty? lst) '()\n    :else\n    (into\n      (repl (rest lst) times)\n      (repeat times (first lst)))))", "problem": 33, "user": "4e356d2b535deb9a81d77f2d"}, {"code": "(fn [x n]\n  (apply concat (map #(repeat n %) x)))", "problem": 33, "user": "4e2ef93d535deb9a81d77f0f"}, {"code": "(fn repite [xs n]\n  (mapcat #(replicate n %) xs))", "problem": 33, "user": "4db51ce0535d87e67b28fe06"}, {"code": "(fn rep [s n]\n  (cond\n    (nil? s) '()\n    :else (concat (replicate n (first s))\n                  (rep (next s) n))))", "problem": 33, "user": "4e444c11535dc968683fc4a9"}, {"code": "#(apply mapcat list (repeat %2 %))", "problem": 33, "user": "4e49badd535dc968683fc4c9"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "4e43b0d9535dc968683fc4a3"}, {"code": "(fn [arg num]\n  (reverse (reduce #(into %1 %2) '() (map #(take num (repeat %)) arg))))", "problem": 33, "user": "4e08fb7a535d04ed9115e7ac"}, {"code": "(fn [sequence reps]\n  (let [repeater (fn [so-far to-go reps]\n                  (if (empty? to-go)\n                    so-far\n                    (recur (apply conj so-far (repeat reps (first to-go)))\n                           (rest to-go)\n                           reps)))]\n  (repeater [] sequence reps)))", "problem": 33, "user": "4e42f930535dc968683fc49f"}, {"code": "#(apply concat (map (partial repeat %2) %1))", "problem": 33, "user": "4e4a94a9535dc968683fc4cd"}, {"code": "#(if (= %2 1) \n      %1\n      (apply interleave (repeat %2 %1)))", "problem": 33, "user": "4e4870d1535dc968683fc4bc"}, {"code": "(fn [seq n]\n  (reduce concat (map #(replicate n %) seq)))", "problem": 33, "user": "4e4ae5aa535dc968683fc4d2"}, {"code": "(fn [coll n]\n  (if (= n 1)\n      coll\n      (apply interleave (replicate n coll))))", "problem": 33, "user": "4e4b4564535dc968683fc4d3"}, {"code": "(fn [xs n] (mapcat #(replicate n %) xs))", "problem": 33, "user": "4e4c238f535dc968683fc4dc"}, {"code": "(fn [seq1 n]\n  (loop [togo (reverse seq1)\n         result ()]\n   (if (and (empty? togo) (vector? (first seq1))) result\n    (if (and (empty? togo) (not (vector? (first seq1))))\n     (flatten result)\n     (recur (rest togo)\n       (concat (repeat n (first togo)) result))))))", "problem": 33, "user": "4e4bf20e535dc968683fc4d9"}, {"code": "(fn [c n] (mapcat #(repeat n %) c))", "problem": 33, "user": "4e4ad154535dc968683fc4d1"}, {"code": "(fn hop [xs n] \n  (when (not (empty? xs))\n    (lazy-seq\n      (concat (take n (repeat (first xs))) (hop (rest xs) n)))))", "problem": 33, "user": "4e4fbd0c535dc968683fc4e9"}, {"code": "(fn [s n] (apply concat (map (partial repeat n) s)))", "problem": 33, "user": "4e50b67b535dc968683fc4ed"}, {"code": "(fn [lis n]\n  (letfn [(mytimes [elem num]\n  \t\t(loop [e elem  n num r '()]\n\t\t\t  (if (= n 0)\n\t\t\t\tr\n\t\t\t\t(recur e (- n 1) (cons e r)))))\n\t\t  (f [n]\n\t\t\t(fn [l] (mytimes l n)))\n\t\t]\n\t(mapcat (f n) lis)))", "problem": 33, "user": "4df9c598535d04ed9115e77a"}, {"code": "(fn [coll rep]\n  (apply concat (map #(repeat rep %) coll)))", "problem": 33, "user": "4e513ecf535dc968683fc4f6"}, {"code": "(fn rep-seq-nth [coll n]\n  (reduce (fn [l e]\n    (apply (partial conj l) (repeat n e)))\n    []\n    coll))", "problem": 33, "user": "4e4bd94b535dc968683fc4d7"}, {"code": "(fn [x n] \n  (reduce \n   #(concat % \n     (for [t (range n)] %2 )\n    )\n  () x))", "problem": 33, "user": "4e50e2a0535dc968683fc4ef"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4e52d815535d302ef430da77"}, {"code": "#(apply concat (map (fn [x] (repeat %2 x)) %))", "problem": 33, "user": "4e12cc9d535d04ed9115e7d2"}, {"code": "(fn [xs n]\n  (reduce \n    #(into %1 (take n (repeat %2))) [] xs))", "problem": 33, "user": "4e513758535dc968683fc4f3"}, {"code": "(fn [s n]\n  (apply concat (map #(repeat n %) s)))", "problem": 33, "user": "4e498df9535dc968683fc4c4"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4e5229dc535d302ef430da6f"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4e399685535deb9a81d77f40"}, {"code": "(fn [s n]\n  (apply concat (map (partial repeat n) s)))", "problem": 33, "user": "4e50c894535dc968683fc4ee"}, {"code": "(fn [seq n] (mapcat #(repeat n %) seq))", "problem": 33, "user": "4e5411e8535d8a8b8723a279"}, {"code": "(fn  [v n] (reduce #(concat %1 (repeat n %2) ) [] v))", "problem": 33, "user": "4e3a9dae535deb9a81d77f4a"}, {"code": "(fn [l a] (reduce #(concat %1 (repeat a %2)) [] l))", "problem": 33, "user": "4dbf0cd2535d020aff1edf72"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4e5676b2535d8a8b8723a282"}, {"code": "(fn [aSeq n]\n  (mapcat (partial replicate n) aSeq))", "problem": 33, "user": "4e463703535dc968683fc4b2"}, {"code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "4e521cef535d302ef430da6d"}, {"code": "(fn[a-seq n]\n  (mapcat #(repeat n %) a-seq))", "problem": 33, "user": "4e58bcd4535d8a8b8723a296"}, {"code": "#(apply mapcat vector (repeat %2 %1))", "problem": 33, "user": "4e5914e0535d8a8b8723a29b"}, {"code": "(fn [xs cnt] (mapcat #(replicate cnt %) xs))", "problem": 33, "user": "4e593dac535d8a8b8723a29c"}, {"code": "(fn replicate [s count]\n  (let [this (first s)\n        remaining (next s)\n        batch (take count (iterate identity this))]\n    (if (not (seq remaining))\n      batch\n      (lazy-seq\n        (concat batch (replicate remaining count))))))", "problem": 33, "user": "4e584256535d8a8b8723a28e"}, {"code": "#(for [x %1 y (range %2)] x)", "problem": 33, "user": "4e588e84535d8a8b8723a294"}, {"code": "(fn [x n]\n  (mapcat #(repeat n %) x)\n)", "problem": 33, "user": "4e570f47535d8a8b8723a287"}, {"code": "(fn [s t] (mapcat #(repeat t %) s))", "problem": 33, "user": "4e599577535d8a8b8723a29f"}, {"code": "(fn [xs x]\n  (loop [cur-seq xs new-seq []]\n    (if (empty? cur-seq)\n      new-seq\n      (recur\n        (rest cur-seq)\n        (concat new-seq\n          (repeat x (first cur-seq)))))))", "problem": 33, "user": "4ddabc33535d02782fcbe9f5"}, {"code": "(fn [c n] (mapcat #(repeat n %) c))", "problem": 33, "user": "4e597b2c535d8a8b8723a29d"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "4e5b192e535d8a8b8723a2b3"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4e589bdc535d8a8b8723a295"}, {"code": "(fn [seq n]\n    (loop [s seq r []]\n      (if (empty? s)\n        r\n        (recur (rest s) (concat r (repeat n (first s)))))))", "problem": 33, "user": "4e360072535deb9a81d77f30"}, {"code": "(fn [x n]\n  (loop [y x, k 0,res ()] \n    (cond (= y ()) (reverse res)\n    (= n k) (recur (rest y) 0 res)\n\t  :else (recur y (inc k) (conj res (first y))))))", "problem": 33, "user": "4e49a7bb535dc968683fc4c6"}, {"code": "(fn [coll n]\n  (->> coll\n    (map #(take n (iterate identity %)))\n    (reduce concat)))", "problem": 33, "user": "4e5bff2b535d8a8b8723a2bd"}, {"code": "#(mapcat (fn [x] (take %2 (repeat x))) %1)", "problem": 33, "user": "4e5af6d7535d8a8b8723a2b2"}, {"code": "(fn [s n]\n  (loop [rr [] ss s l n]\n    (if (empty? ss) \n      rr\n      (if (zero? l) \n        (recur rr (rest ss) n)\n        (recur (conj rr (first ss)) ss (dec l))))))", "problem": 33, "user": "4e5c801e535d8a8b8723a2c1"}, {"code": "(fn [coll ant]\n  (reduce concat \n    (map #(repeat ant %) coll)))", "problem": 33, "user": "4e5d2dc5535d8a8b8723a2ca"}, {"code": "(fn [coll num]\n    (reduce #(apply conj %1 (repeat num %2))\n            []\n            coll))", "problem": 33, "user": "4e3bccb1535deb9a81d77f55"}, {"code": "(fn [ls n]\n  (if (= n 1)\n    (seq ls)\n    (apply interleave (repeat n ls))))", "problem": 33, "user": "4e5a2403535d8a8b8723a2a7"}, {"code": "(fn [l n] (mapcat #(repeat n %) l))", "problem": 33, "user": "4dad938fc9a9d6ed1b99dc57"}, {"code": "(fn [s n] (apply concat (map #(repeat n %) s)))", "problem": 33, "user": "4e5f08c7535d8a8b8723a2da"}, {"code": "#(mapcat repeat (repeat %2) %1)", "problem": 33, "user": "4e5ecd65535d8a8b8723a2d6"}, {"code": "(fn [c n] (mapcat #(repeat n %) c))", "problem": 33, "user": "4e5a3891535d8a8b8723a2aa"}, {"code": "(fn [x z] \n  (let [timesx (fn [y n a] (if (= n 0) a (recur y (dec n) (cons y a))))]\n      (reduce concat (map (fn [y] (timesx y z '())) x))))", "problem": 33, "user": "4e4b911f535dc968683fc4d6"}, {"code": "(fn [xs n] (apply concat (map #(repeat n %) xs)))", "problem": 33, "user": "4e615cd2535d8ccf87e9fe58"}, {"code": "(fn *replicate                                                                                                                                              \n  [coll n]                                                                                                                                                    \n  (loop [*lst (empty coll) idx n]                                                                                                                             \n    (if (zero? idx)                                                                                                                                           \n      (apply mapcat list *lst)                                                                                                                                \n      (recur (cons coll *lst) (dec idx)))))", "problem": 33, "user": "4e3bcccd535deb9a81d77f56"}, {"code": "(fn replicate [coll n]\n  \"33. Write a function which replicates each element of a sequence a variable number of times.\"\n  (mapcat (fn [x] (repeat n x))  coll))", "problem": 33, "user": "4e5eb843535d8a8b8723a2d4"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "4e634eb9535d8ccf87e9fe63"}, {"code": "(fn x\r\n  ([s c] (x s c []))\r\n  ([s c r] (let[ n (next s) r (concat r (replicate c (first s)))]\r\n\r\n             (if n (recur n c r) r)\r\n             ))\r\n)", "problem": 33, "user": "4e44358f535dc968683fc4a8"}, {"code": "(fn [c n]\n  (mapcat #(repeat n %) c))", "problem": 33, "user": "4e46ac46535dc968683fc4b5"}, {"code": "(fn [coll n] (reduce #(concat %1 (repeat n %2)) [] coll))", "problem": 33, "user": "4e6472b7535d8ccf87e9fe6c"}, {"code": "#(mapcat (partial replicate %2) %1)", "problem": 33, "user": "4e3bcca9535deb9a81d77f54"}, {"code": "(fn [sq n] (mapcat #(repeat n %1) sq))", "problem": 33, "user": "4dcc3281535d5973398f9291"}, {"code": "(fn rep [s x] (if (= x 1) s (concat (\n   (fn dup [x c] (cond (= c 1) x (= c 2) (list x x)  (> c 2) (cons x (dup x (dec c))))) (first s) x) \n   (if (empty? (rest s)) '() (rep (rest s) x)))))", "problem": 33, "user": "4e5e9f6b535d8a8b8723a2d2"}, {"code": "#(reduce\n  (fn [r e]\n    (concat r (repeat %2 e)))\n  ()\n  %1)", "problem": 33, "user": "4e65f9d4535d8ccf87e9fe73"}, {"code": "(fn [s times]\n  (loop [l (map (fn [x] (repeat times x)) s)\n         acc []]\n    (if (empty? l)\n      acc\n      (recur (rest l) (concat acc (first l))))))", "problem": 33, "user": "4e68b46c535d8ccf87e9fe87"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4e68c434535d8ccf87e9fe89"}, {"code": "(fn [lst n]\n  (apply concat (map (partial repeat n) lst)))", "problem": 33, "user": "4e68dbd5535d8ccf87e9fe8f"}, {"code": "(fn [li n] (mapcat #(take n (cycle (list %1))) li))", "problem": 33, "user": "4db6e850535d1e037afb2182"}, {"code": "(fn [v c] (apply concat (map #(repeat c %1) v)))", "problem": 33, "user": "4e5bdc2b535d8a8b8723a2bb"}, {"code": "(fn [s n] \n  (reverse \n    (reduce #(concat (repeat n %2) %1) \nnil s)))", "problem": 33, "user": "4e6a4038535d8ccf87e9feb5"}, {"code": "(fn dup[x n]\n  (loop [stuff x\n        retval '()]\n      (if (empty? stuff)\n        (reverse retval)\n        (recur\n          (rest stuff)\n          (concat (repeat n (first stuff)) retval)))))", "problem": 33, "user": "4e6a60cd535d8ccf87e9fed7"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %)", "problem": 33, "user": "4e6a48d5535d8ccf87e9febd"}, {"code": "(fn [coll n]\n  (mapcat (partial repeat n) coll))", "problem": 33, "user": "4e6ab9cb535d8ccf87e9fefe"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4e6b3fc8535d8ccf87e9ff0f"}, {"code": "(fn [xs n & dups]\n  (let [dups (if (nil? dups) () (first dups))]\n    (if (nil? (first xs))\n      (reverse dups)\n      (recur (next xs) n (list (concat (repeat n (first xs)) dups))))))", "problem": 33, "user": "4e6a97a9535d8ccf87e9fef8"}, {"code": "(fn [parts num] (mapcat #(repeat num %) parts))", "problem": 33, "user": "4df0524e535d08e6dec9fe17"}, {"code": "(fn repli [c n]\n  (apply concat (map #(repeat n %) c)))", "problem": 33, "user": "4db045b5838c48654951d9be"}, {"code": "(fn [x n] (reduce concat (map #(take n (cycle [%])) x)))", "problem": 33, "user": "4e6def42535d5021c1a895f7"}, {"code": "(fn [a-seq n] (mapcat #(repeat n %) a-seq))", "problem": 33, "user": "4e6dc95a535d5021c1a895f1"}, {"code": "#(apply concat (for [x %1] (repeat %2 x)))", "problem": 33, "user": "4e5fe31a535d8ccf87e9fe50"}, {"code": "#(mapcat repeat (repeat %2) %)", "problem": 33, "user": "4e6a412e535d8ccf87e9feb6"}, {"code": "#(apply mapcat list (repeat %2 %1))", "problem": 33, "user": "4e6dd51b535d5021c1a895f6"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "4e223bd6535d04ed9115e81c"}, {"code": "(fn[c n](mapcat #(repeat n %)c))", "problem": 33, "user": "4e6dd0f5535d5021c1a895f3"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "4e6daa22535d5021c1a895ef"}, {"code": "#(if(> %2 1) (apply interleave (repeat %2 %1)) %1)", "problem": 33, "user": "4e6e6630535d5021c1a89609"}, {"code": "(fn [l,t] (mapcat #(repeat t %) l))", "problem": 33, "user": "4e6e10d8535d5021c1a895fd"}, {"code": "#(reduce (fn [s elt] (concat s (map (constantly elt) (range %2)))) [] %1)", "problem": 33, "user": "4e6e3a1e535d5021c1a89602"}, {"code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "4e2f377a535deb9a81d77f10"}, {"code": "(fn [col n] (reduce #(apply conj %1 (repeat n %2)) [] col))", "problem": 33, "user": "4e1248b1535d04ed9115e7cf"}, {"code": "(fn replicate [xs n]\n  (if (empty? xs)\n    '()\n    (concat (repeat n (first xs)) (replicate (rest xs) n))))", "problem": 33, "user": "4e691c79535d8ccf87e9fe97"}, {"code": "(fn [coll n]\n  (loop [x (first coll) tail (next coll) acc '()]\n    (if (nil? x)\n      acc\n      (recur (first tail) (next tail) (concat acc (repeat n x))))))", "problem": 33, "user": "4e6a6b83535d8ccf87e9fee0"}, {"code": "#(mapcat (fn [a] (repeat %2 a)) %1)", "problem": 33, "user": "4e68be01535d8ccf87e9fe88"}, {"code": "(fn [s n] (mapcat #(replicate n %1) s))", "problem": 33, "user": "4e6a11ee535d8ccf87e9fe9f"}, {"code": "(fn f [x i]\n  (lazy-seq\n    (when (seq x)\n      (concat (loop [a () id i]\n                (if (zero? id)\n                    a\n                    (recur (cons (first x) a) (dec id))))\n              (f (next x) i)))))", "problem": 33, "user": "4e71cc2e535d5021c1a89652"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4e7115b3535d5021c1a89647"}, {"code": "(fn dupSeqX [aseq x]  \n  (reduce #(concat %1 (repeat x %2 )) '() aseq)\n)", "problem": 33, "user": "4e6a79ca535d8ccf87e9feeb"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %)", "problem": 33, "user": "4e704293535d5021c1a89634"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "problem": 33, "user": "4e6a5f5c535d8ccf87e9fed6"}, {"code": "(fn [c n] (mapcat #(repeat n %) c))", "problem": 33, "user": "4e6dc5f5535d5021c1a895f0"}, {"code": "(fn [c n]\n  (mapcat #(take n (repeat %)) c))", "problem": 33, "user": "4e6f4cbc535d5021c1a8961a"}, {"code": "(fn [coll times]\n  (mapcat #(repeat times %) coll))", "problem": 33, "user": "4e6defcc535d5021c1a895f8"}, {"code": "(fn [xs n]\n  (mapcat (partial replicate n) xs))", "problem": 33, "user": "4e6a3985535d8ccf87e9feb1"}, {"code": "(fn [coll times]\n  (let [xs (map #(take times (repeat %1)) coll)]\n    (loop [ys [] c xs]\n       (if (empty? c)\n         ys\n         (recur (apply conj ys (first c)) (rest c))))))", "problem": 33, "user": "4e6a2e83535d8ccf87e9fea7"}, {"code": "(fn [coll n]\n  (reduce\n   (fn [result item]\n     (into result (repeat n item)))\n   [] coll))", "problem": 33, "user": "4daedd1eedd6309eace4d164"}, {"code": "(fn [xs times] \n  (reduce concat\n    (map (partial repeat times) xs)))", "problem": 33, "user": "4e71920f535d5021c1a8964e"}, {"code": "(fn [l times]\n    (reduce\n      #(concat %1 (repeat times %2))\n      [] l))", "problem": 33, "user": "4e6a2f93535d8ccf87e9feaa"}, {"code": "#(if (= 1 %2) %1\n  (apply interleave (repeat %2 %1)))", "problem": 33, "user": "4e6f1b7a535d5021c1a89618"}, {"code": "(fn [seq n]  (mapcat (partial repeat n) seq))", "problem": 33, "user": "4e6dfe57535d5021c1a895fc"}, {"code": "(fn [l x] (reduce concat [] (map #(repeat x %) l)))", "problem": 33, "user": "4e720985535d5021c1a89655"}, {"code": "(fn [x n]\n  (apply concat (map #(repeat n %) x)))", "problem": 33, "user": "4e6a4950535d8ccf87e9febf"}, {"code": "(fn dupseq [[x & xs :as l] n]\n                  (if-not (empty? l)\n                    (concat (take n (repeat x)) (dupseq xs n))))", "problem": 33, "user": "4e71705e535d5021c1a89649"}, {"code": "(fn f [c n]\n (mapcat #(repeat n  %) c)\n)", "problem": 33, "user": "4e6f8d36535d5021c1a89621"}, {"code": "#(if (< 1 %2) (apply interleave (repeat %2 %1)) %1)", "problem": 33, "user": "4e6df3c9535d5021c1a895fa"}, {"code": "(fn [x y] (mapcat #(repeat y %) x))", "problem": 33, "user": "4e71da4d535d5021c1a89653"}, {"code": "(fn repseq [s n]\n (mapcat \n   #(take n \n     (repeat %)) s) \n)", "problem": 33, "user": "4e70c0b1535d5021c1a89640"}, {"code": "(fn [coll n] (reduce #(concat %1 (repeat n %2)) [] coll))", "problem": 33, "user": "4e6fa38b535d5021c1a89622"}, {"code": "(fn [l n]\n  (reduce concat (map #(take n (repeat %)) l)))", "problem": 33, "user": "4e6a2f51535d8ccf87e9fea9"}, {"code": "#(reduce concat (for [m %] (repeat %2 m)))", "problem": 33, "user": "4e6eff83535d5021c1a89615"}, {"code": "(fn [coll n]\n  (mapcat (fn [elem] (repeat n elem)) coll))", "problem": 33, "user": "4e68fad4535d8ccf87e9fe93"}, {"code": "#(if (= %2 1) % (apply interleave (replicate %2 %)))", "problem": 33, "user": "4daf907aedd6309eace4d17b"}, {"code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "4e5d0e96535d8a8b8723a2c8"}, {"code": "(fn rep [coll n]\n  (let [f (fn [acc x] (concat acc (for [y (range n)] x)))]\n      (reduce f '() coll)))", "problem": 33, "user": "4e6a4edd535d8ccf87e9fec4"}, {"code": "(fn [col times]\n  (loop [c col v []]\n    (if (empty? c)\n      v\n      (recur \n        (rest c)\n        (loop [cnt 1 rv v]\n          (if (> cnt times)\n            rv\n            (recur (+ cnt 1) (conj rv (first c)))\n            )\n          )\n        )\n      )\n    )\n  )", "problem": 33, "user": "4db7da66535d1e037afb2187"}, {"code": "#(reduce (fn [x y] (apply conj x (repeat %2 y))) [] %1)", "problem": 33, "user": "4e79a143535db169f9c796a2"}, {"code": "(fn r[s x] (reduce concat (map #(repeat x %) s)))", "problem": 33, "user": "4e6a4641535d8ccf87e9feb9"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4e781a2e535d324fb2983d74"}, {"code": "#(for [v %1 i (range %2) ] v)", "problem": 33, "user": "4e707db6535d5021c1a8963a"}, {"code": "(fn [a b] (mapcat #(repeat b %) a))", "problem": 33, "user": "4e794004535db169f9c796a1"}, {"code": "(fn [coll n](mapcat #(repeat n %) coll))", "problem": 33, "user": "4e739e13535dff18050a9c76"}, {"code": "(fn [s n] (reduce concat [] (map (fn [e] (take n (iterate (fn [x] x) e))) s)))", "problem": 33, "user": "4e7a5395535db169f9c796ab"}, {"code": "(fn [c n](mapcat #(take n (cycle [%])) c))", "problem": 33, "user": "4e773be8535d324fb2983d6e"}, {"code": "(fn[coll n]\n  (loop [res () sc coll]\n    (if (nil? (seq sc))\n      res\n      (recur (concat res (for [i (range n)] (first sc))) (rest sc)))))", "problem": 33, "user": "4e7bc07c535db169f9c796b9"}, {"code": "(fn [items nrepeat]\n  (mapcat (partial repeat nrepeat) items))", "problem": 33, "user": "4e6a0667535d8ccf87e9fe9e"}, {"code": "(fn [coll n]\n  (mapcat (partial repeat n) coll))", "problem": 33, "user": "4e7c8fd1535db169f9c796be"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4dabb7b1950ed6eda1bd72f3"}, {"code": "(fn[coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "4e6e3aac535d5021c1a89603"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4e7db3b4535db169f9c796e1"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4e7dd982535db169f9c796ee"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %1) coll))", "problem": 33, "user": "4e40529b535dc968683fc49a"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4e7dfab0535db169f9c796f9"}, {"code": "(fn [xs n] \n  (cond\n    (<= n 0) (empty xs)\n    (= n 1) xs\n    (> n 1) (apply interleave (repeat n xs))))", "problem": 33, "user": "4e7e032b535db169f9c796fc"}, {"code": "(fn [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "4e7e55ab535db169f9c79711"}, {"code": "#(reduce (fn [l e] (into l (repeat %2 e))) [] %1)", "problem": 33, "user": "4e7e93f5535db169f9c7971a"}, {"code": "(fn [x y](mapcat #(take y(repeat%)) x))", "problem": 33, "user": "4e7eff9e535db966e863cc38"}, {"code": "(fn [col num] (mapcat (fn [el] (repeat num el)) col))", "problem": 33, "user": "4e7e33a3535db169f9c79708"}, {"code": "(fn [x y] (mapcat (fn [i] (replicate y i)) x) )", "problem": 33, "user": "4e765170535d324fb2983d69"}, {"code": "(fn rep   [l n]\n\n   (mapcat  #(take n (repeat %)) l)\n\n\n\n)", "problem": 33, "user": "4e78c208535db95036265722"}, {"code": "(fn [s n] (apply concat (map #(repeat n %) s)))", "problem": 33, "user": "4e7f4147535db966e863cc3d"}, {"code": "(fn n-repeat [coll n]\n  (reduce concat (map #(repeat n %) coll)))", "problem": 33, "user": "4e7f51eb535db966e863cc3f"}, {"code": "(fn [s, n]\n  (loop [[part & parts] s acc []]\n    (if (nil? part) acc \n      (recur parts\n        (concat acc \n          (take n (repeat part)))))))", "problem": 33, "user": "4e7f7e48535db966e863cc42"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4e6ea1f5535d5021c1a8960e"}, {"code": "(fn [seq n]\n  (reduce (fn [l i]\n    (concat l (repeat n i))\n  )\n  '() seq)\n)", "problem": 33, "user": "4e7e05a6535db169f9c796fe"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4db858d1535d1e037afb218c"}, {"code": "(fn [polje mn]\n\n(loop [i 0 result []]\n  (if-not (< i (count polje))\n    ;(println result)\n    (reduce concat result)\n    (recur (inc i) \n            (conj result (into [] (take mn (repeat (nth polje i)))))\n    )))\n)", "problem": 33, "user": "4e78dc98535db95036265724"}, {"code": "(fn [s n] (mapcat (partial repeat n) s))", "problem": 33, "user": "4e80d71b535db62dc21a62b7"}, {"code": "(fn rep [c n]\n  (when (not (empty? c))\n    (concat (repeat n (first c)) (rep (rest c) n))))", "problem": 33, "user": "4e80aa10535db62dc21a62b1"}, {"code": "(fn [a n] \n  (if (= 1 n) a\n  (apply interleave (repeat n a))))", "problem": 33, "user": "4e7dbe0c535db169f9c796e3"}, {"code": "(fn mydub\n  ([col times] (mydub col times []))\n  ([col times res]\n    (if (empty? col)\n      res\n      (let [lseq (cycle (list (first col))) newval (take times lseq)]\n        (recur (rest col) times (concat res newval))))))", "problem": 33, "user": "4e7ada51535db169f9c796ae"}, {"code": "#(for [e %1, x (repeat %2 e)] x)", "problem": 33, "user": "4db1f7d223724b71670a9c07"}, {"code": "(fn [sqnc n] (mapcat #(repeat n %) sqnc))", "problem": 33, "user": "4e823f41535db62dc21a62c8"}, {"code": "#(reduce into [] (for [x %1] (repeat %2 x)))", "problem": 33, "user": "4e823ed7535db62dc21a62c7"}, {"code": "(fn [c r] (apply concat (map #(repeat r %) c)))", "problem": 33, "user": "4e837808535db62dc21a62d9"}, {"code": "#(apply concat (map (fn [x] (repeat %2 x)) %1))", "problem": 33, "user": "4e823629535db62dc21a62c3"}, {"code": "(fn repli\n  [col n]\n  (mapcat #(take n (repeat %)) col))", "problem": 33, "user": "4e5a460f535d8a8b8723a2ab"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4da3e51330acd6ed10482a68"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4e5d1912535d8a8b8723a2c9"}, {"code": "(fn [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "4e8612f8535db62dc21a62f2"}, {"code": "(fn [xs n] (mapcat (partial replicate n) xs))", "problem": 33, "user": "4e8681b7535dae1a5effa438"}, {"code": "(fn [c t]\r\n  (loop [s c r (empty c) n t]\r\n\t   (if (empty? s)\r\n\t       r\r\n\t       (recur (rest s) (into r (take n (repeat (first s)))) n))))", "problem": 33, "user": "4e821ca5535db62dc21a62c2"}, {"code": "(fn [s n] (mapcat (partial repeat n) s))", "problem": 33, "user": "4db8ec47535d1e037afb219d"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4db92654535d1e037afb21a0"}, {"code": "(fn repeater [elements n]\n  ((fn [elements n result]\n    (if (empty? elements)\n        result\n        (recur (butlast elements) n\n               (into result \n                 (repeat n (last elements))))))\n  elements n '()))", "problem": 33, "user": "4e73a9dc535dff18050a9c77"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "4e80e0f2535db62dc21a62b8"}, {"code": "(fn \n      [sq n] \n      (if (= 1 n) \n        sq \n        (apply interleave (repeat n sq))))", "problem": 33, "user": "4e7f32ee535db966e863cc3a"}, {"code": "(fn [ s n ] (mapcat #(repeat n %) s))", "problem": 33, "user": "4e860e85535db62dc21a62f1"}, {"code": "(fn r[s n]\n  (if (= (count s) 1)\n     (repeat n (first s))\n     (concat (repeat n (first s))\n              (r (next s) n))))", "problem": 33, "user": "4e842ebb535db62dc21a62df"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4e8510e7535db62dc21a62e7"}, {"code": "(fn [x y] (mapcat (fn [i] (repeat y i)) x))", "problem": 33, "user": "4dfe65a1535d04ed9115e787"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4e6ebd4a535d5021c1a89610"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4e894068535d4ef0aa30db97"}, {"code": "(fn [l n]\n  (loop [accu '()\n         l l\n         i n]\n    (cond (empty? l) (reverse accu)\n          (< i 1) (recur accu (rest l) n)\n          true (recur (cons (first l) accu)  l (- i 1)))))", "problem": 33, "user": "4e82c062535db62dc21a62cc"}, {"code": "(fn [l n] (mapcat #(repeat n %) l))", "problem": 33, "user": "4e897fc5535de4250bdfe493"}, {"code": "(fn [s n]\n  (mapcat #(take n (repeat %)) s))", "problem": 33, "user": "4e6a4954535d8ccf87e9fec0"}, {"code": "(fn [s n]\n  (mapcat (partial replicate n) s))", "problem": 33, "user": "4e89f46c535d3e98b8023288"}, {"code": "(fn [xs n] (mapcat (partial repeat n) xs))", "problem": 33, "user": "4daf36c2edd6309eace4d175"}, {"code": "(fn [coll n]\n  (loop [coll coll n n tmp []]\n    (if (empty? coll) tmp\n     (let [nu (into tmp (repeat n (first coll)))]\n       (recur (rest coll) n nu)))))", "problem": 33, "user": "4e88feef535d8b9bb0147ca8"}, {"code": "(fn [l n] (reduce (fn [memo, c] (concat memo (repeat n c))) '() l))", "problem": 33, "user": "4e89ddf9535d3e98b8023284"}, {"code": "(fn [coll times] (reverse (reduce (fn [result x] (concat (repeat times x) result)) '() coll)))", "problem": 33, "user": "4e8aef69535d65386fec2114"}, {"code": "(fn [coll n]\n  (reduce #(concat %1 (repeat n %2)) () coll))", "problem": 33, "user": "4e8c1d97535d65386fec2127"}, {"code": "(fn func[[f & r] n]\n  (if f\n    (concat (repeat n f) (func r n))))", "problem": 33, "user": "4e89f9e5535d3e98b8023289"}, {"code": "#(if (> %2 1) \n(apply interleave (replicate %2 %1)) %1)", "problem": 33, "user": "4dcfbc44535d5973398f92a7"}, {"code": "(fn [x y] (reduce (fn [acc z] (concat acc (repeat y z))) [] x))", "problem": 33, "user": "4e89de60535d3e98b8023285"}, {"code": "(fn [seqn n]\n  (loop [seqn seqn acc []]\n    (if-let [x (first seqn)]\n      (recur (rest seqn) (into acc (repeat n x)))\n      acc)))", "problem": 33, "user": "4e8944b6535d4ef0aa30db98"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4e8e8c24535d65386fec2143"}, {"code": "(fn [xs n]\n  (mapcat #(repeat n %) xs))", "problem": 33, "user": "4e5867d1535d8a8b8723a291"}, {"code": "(fn dup [lst n]\n    (mapcat #(repeat n %1) lst))", "problem": 33, "user": "4e8b557c535d65386fec2119"}, {"code": "#(apply (if (> %2 1) interleave identity) (repeat %2 %1))", "problem": 33, "user": "4e6a61d8535d8ccf87e9fed8"}, {"code": "(fn\n  [lista n]\n  (mapcat #(repeat n %) lista))", "problem": 33, "user": "4e8a0c82535d3e98b802328d"}, {"code": "(fn rep [sq n]\n  (if (empty? sq)\n    nil\n    (concat\n      ((fn rp [e n]\n        (if (<= n 0)\n          nil\n          (cons e (rp e (- n 1)))))\n       (first sq) n)\n      (rep (rest sq) n))))", "problem": 33, "user": "4e8f5eba535d65386fec214c"}, {"code": "#(apply mapcat vector (repeat %2 %1))", "problem": 33, "user": "4dc0ff08535d020aff1edf84"}, {"code": "(fn [x y]\n  (apply concat\n      (map (fn [v]\n             (repeat y v)) x)))", "problem": 33, "user": "4db016af838c48654951d9b9"}, {"code": "(fn [a i] \r\n  (reduce \r\n    (fn [acc v] (concat acc (repeat i v))) \r\n    [] \r\n    a))", "problem": 33, "user": "4e6f8431535d5021c1a8961e"}, {"code": "(fn [lis n] (mapcat #(repeat n %) lis))", "problem": 33, "user": "4dd5e2cc535dae65d5c462ec"}, {"code": "#(if (= 1 %2) %1 (apply interleave \n  (partition (count %1) (take (* %2 (count %1)) (cycle %1)))))", "problem": 33, "user": "4e79ff2a535db169f9c796a9"}, {"code": "(fn [col n] (mapcat #(repeat n %) col))", "problem": 33, "user": "4dfd018c535d04ed9115e77f"}, {"code": "(fn [coll n]\n\t   (reduce #(concat %1 (repeat n %2)) [] coll))", "problem": 33, "user": "4e8dc25f535d65386fec213a"}, {"code": "(fn replicate [x y] \n  (if (seq x) \n  (into \n    (replicate (rest x) y) \n    ((fn foo [x y]\n      ( if (> y 0)\n        ( conj (foo x (- y 1)) x ) \n        '() ) ) \n    (first x) y))\n  () )\n)", "problem": 33, "user": "4e8d5edd535d65386fec2134"}, {"code": "#(apply mapcat list (repeat %2 %))", "problem": 33, "user": "4e8df08f535d65386fec213e"}, {"code": "(fn [x y] (apply concat (map #(repeat y %) x)))", "problem": 33, "user": "4e8b73e4535d65386fec2120"}, {"code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "problem": 33, "user": "4e7e0bdc535db169f9c796ff"}, {"code": "(fn repl\n  ([seq n] (repl seq n '()))\n  ([seq n sofar]\n    (letfn\n      [(dup [coll n] (if (> n 0) (dup (cons (first coll) coll) (- n 1)) coll))]\n        (if (empty? seq)\n        sofar\n        (repl (drop-last seq) n (concat (dup (list (last seq)) (- n 1)) sofar))))))", "problem": 33, "user": "4e84f77c535db62dc21a62e5"}, {"code": "(fn [c n] (mapcat #(repeat n %) c))", "problem": 33, "user": "4e9361c9535dbda64a6f6b0f"}, {"code": "(fn [x y] \r\n        (loop [ol x nl '()] \r\n          (cond \r\n            (empty? ol) nl\r\n            :else (recur (rest ol) (concat nl (repeat y (first ol)))))))", "problem": 33, "user": "4e920f44535dbda64a6f6afd"}, {"code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "problem": 33, "user": "4e8f4f64535d65386fec2149"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4e951ce5535dbda64a6f6b2e"}, {"code": "(fn [x n]\n  (loop [i 0 out []]\n    (if (== i (count x))\n      out\n      (recur (inc i) (nth (iterate (fn [y] (conj y (nth x i))) out) n)))))", "problem": 33, "user": "4e955b95535dbda64a6f6b33"}, {"code": "(fn[c n](mapcat #(repeat n %) c))", "problem": 33, "user": "4de8a7d7535d08e6dec9fdfe"}, {"code": "(fn [seq c] (apply concat (map #(repeat c %) seq)))", "problem": 33, "user": "4e951f2c535dbda64a6f6b2f"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4e9660ec535dbda64a6f6b44"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4e96557d535dbda64a6f6b43"}, {"code": "(fn [sq tim]\r\n  (reduce \r\n    (fn [acc vl]\r\n      (concat (repeat tim vl) acc)) '() (reverse sq)))", "problem": 33, "user": "4e9528ef535dbda64a6f6b32"}, {"code": "(fn [coll n] (apply concat (map repeat (repeat n) coll)))", "problem": 33, "user": "4e976f79535dbda64a6f6b55"}, {"code": "(fn [x n]\r\n   (mapcat #(for [i (range n)] %) x)\r\n   )", "problem": 33, "user": "4e94a8b5535dbda64a6f6b16"}, {"code": "#(for [x % y (repeat %2 x)] y)", "problem": 33, "user": "4e8f1ac6535d65386fec2146"}, {"code": "(fn [vet n]\n  (mapcat #(repeat n %1) vet)\n  )", "problem": 33, "user": "4e8b6f4d535d65386fec211e"}, {"code": "(fn [c y] (mapcat #(repeat y %) c))", "problem": 33, "user": "4e8a0d5d535d3e98b802328e"}, {"code": "(fn rep[s n]\n  (let [r ((fn [q s n]\n    (for [i s] \n      (conj q (repeat n i)))) [] s n)\n   ] (if (vector? (s 0))\n         (concat (first (first r)) (last (last r)))\n         (flatten r)   \t \n   )))", "problem": 33, "user": "4e7650c5535d324fb2983d68"}, {"code": "(fn[c n] (mapcat #(repeat n %) c))", "problem": 33, "user": "4db13ff51254ad5b4805fa68"}, {"code": "(fn [s,n] (mapcat #(take n (repeat %)) s))", "problem": 33, "user": "4e9b230c535dbda64a6f6b75"}, {"code": "#(if (< %2 2) (apply list %1) (apply interleave (repeat %2 %1)))", "problem": 33, "user": "4e98a6d0535dbda64a6f6b5e"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "4e951f44535dbda64a6f6b30"}, {"code": "(fn [x n] (mapcat #(repeat n %1) x))", "problem": 33, "user": "4e9b22e2535dbda64a6f6b74"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4e9cf905535dbda64a6f6b84"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "problem": 33, "user": "4e7263a1535d5021c1a8965f"}, {"code": "(fn [dat n]\n  (mapcat #(repeat n %) dat))", "problem": 33, "user": "4e8ad1d2535d65386fec2110"}, {"code": "#(mapcat (fn [n] (repeat %2 n)) %)", "problem": 33, "user": "4e99819a535dbda64a6f6b66"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "4e9609ad535dbda64a6f6b3e"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4e9e0640535dbda64a6f6b91"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4e81e29b535db62dc21a62bd"}, {"code": "(fn rup [se va] (reduce #(loop [n 0 sequ %1 item %2]\n                    (if \n                      (< n va)\n                      (recur (inc n) (conj sequ item) item)\n                      sequ\n                    ))\n                    []\n             se))", "problem": 33, "user": "4e9de526535dbda64a6f6b8e"}, {"code": "(fn replicator [l n]\n  (mapcat #(repeat n %) l))", "problem": 33, "user": "4e9e12b2535dbda64a6f6b92"}, {"code": "(fn [x y] (loop [cnt y index 0 result []] (cond (= index (count x)) result (= cnt 0) (recur y (inc index) result) true (recur (dec cnt) index (conj result (nth x index))))))", "problem": 33, "user": "4e975bce535dbda64a6f6b53"}, {"code": "#(loop [f (first %1)\n        r (rest %1)\n        c %2\n        l []]\n        (if (not (= f nil))\n          (if (not (= c 0))\n            (recur f r (dec c) (conj l f))\n            (recur (first r) (rest r) %2 l))\n          l))", "problem": 33, "user": "4e9e7ce3535dbda64a6f6b98"}, {"code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "4e9e6bd6535dbda64a6f6b96"}, {"code": "(fn [coll cnt]\n  (loop [coll coll\n         acc '()]\n    (if (empty? coll)\n      acc\n      (recur\n        (drop 1 coll)\n        (concat acc (repeat cnt (first coll))))\n)))", "problem": 33, "user": "4e9dafe1535dbda64a6f6b89"}, {"code": "(fn [s i]\n  (loop [ms s mi i mx '()]\n    (if (= ms '()) (reverse mx)\n        (recur (rest ms) mi\n          (apply conj mx (for [x (range 0 mi)] (first ms)))))))", "problem": 33, "user": "4e9629c2535dbda64a6f6b3f"}, {"code": "(fn [xs n]\n    (loop [[x & xs] xs acc []]\n      (if (empty? xs)\n        (apply conj acc (repeat n x))\n        (recur xs (apply conj acc (repeat n x))))))", "problem": 33, "user": "4e9fd521535d7eef3080729a"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4e8516d0535db62dc21a62e8"}, {"code": "(fn rep [col1 cnt]\n  (if (empty? col1)\n    '()\n    (concat (replicate cnt (first col1)) (rep (rest col1) cnt))))", "problem": 33, "user": "4ea01955535d7eef3080729f"}, {"code": "(fn [l n] (reduce #(concat %1 (repeat n %2)) () l))", "problem": 33, "user": "4e7d2448535db169f9c796c8"}, {"code": "(fn [s n] (if (< n 2) s (apply interleave (repeat n s))))", "problem": 33, "user": "4ea092f4535d7eef308072a6"}, {"code": "(fn [coll n] \n  (mapcat #(take n (repeat %)) coll))", "problem": 33, "user": "4e7f3891535db966e863cc3b"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4db85bdd535d1e037afb218d"}, {"code": "#(if (= 1 %2)\n  %1\n  (apply interleave (repeat %2 %1)))", "problem": 33, "user": "4dbd2aa3535d020aff1edf40"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4ea09fa4535d7eef308072aa"}, {"code": "(fn [coll n]\n  (cond\n    (= 1 n) coll\n  :else (apply interleave (repeat n coll))))", "problem": 33, "user": "4daee8e9edd6309eace4d166"}, {"code": "(fn [coll x] \n  (cond (= x 1) coll\n  :else\n  (apply interleave \n    (take x \n      ((fn iter [y] \n        (cons y (lazy-seq (iter y)))) \n        coll)))))", "problem": 33, "user": "4e9ff8d0535d7eef3080729c"}, {"code": "(fn [s n]\n    (mapcat (fn [x] (repeat n x)) s))", "problem": 33, "user": "4e59b02c535d8a8b8723a2a2"}, {"code": "(fn [s n] (->> s (map #(take n (repeat %))) (apply concat)))", "problem": 33, "user": "4ea322fe535d7eef308072c2"}, {"code": "#(if (= 1 %2) % (apply interleave (replicate %2 %)))", "problem": 33, "user": "4ea1b9e4535d7eef308072b8"}, {"code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "problem": 33, "user": "4ea348ad535d7eef308072c4"}, {"code": "(fn [s n]\n  (mapcat (partial repeat n) s))", "problem": 33, "user": "4e9e4515535dbda64a6f6b95"}, {"code": "(fn [coll n]\n  (mapcat (partial repeat n) coll))", "problem": 33, "user": "4e8a6bb0535d65386fec210b"}, {"code": "(fn replic [l n] (reduce #(concat %1 %2) (map #(repeat n %) l)))", "problem": 33, "user": "4e9c81e8535dbda64a6f6b80"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4e8ddf32535d65386fec213c"}, {"code": "(fn [elems rep]\n  (loop [xs elems, n rep, acc ()]\n    (if (empty? xs)\n      (reverse acc)\n      (if (= 0 n)\n        (recur (rest xs) rep acc)\n        (recur xs (- n 1) (conj acc (first xs)))))))", "problem": 33, "user": "4ea4fe1f535d7eef308072cf"}, {"code": "(fn [s n] (mapcat #(take n (cycle [%])) s))", "problem": 33, "user": "4e8d86d5535d65386fec2136"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4ea41fc2535d7eef308072cb"}, {"code": "(fn [s n]\n  (reduce\n    #(apply conj %1 %2) \n    (map\n      #(apply vector (repeat n %))\n      s)))", "problem": 33, "user": "4ea67906535d7eef308072e4"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4ea0cfb0535d7eef308072ae"}, {"code": "(fn [x n]\n (mapcat #(repeat n %) x))", "problem": 33, "user": "4e6a73d0535d8ccf87e9fee7"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4ea5e794535d7eef308072df"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %)", "problem": 33, "user": "4e72ac47535d5021c1a89666"}, {"code": "(fn [ls n] (apply concat (for [x ls] (repeat n x))))", "problem": 33, "user": "4ea57300535d7eef308072d5"}, {"code": "(fn [l x] (mapcat (fn [a] (repeat x a)) l))", "problem": 33, "user": "4e9d6a65535dbda64a6f6b87"}, {"code": "(fn replicate[c n]\r\n  (mapcat (fn[x] (repeat n x) )c)\r\n  )", "problem": 33, "user": "4e9def6b535dbda64a6f6b8f"}, {"code": "(fn [coll n] \n  (if (= n 1) \n    coll\n    (apply interleave (repeat n coll))))", "problem": 33, "user": "4dad76588e77d6ed63f12a44"}, {"code": "(fn [coll n]\r\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4e944706535dbda64a6f6b11"}, {"code": "(fn [se n] (mapcat #(take n (cycle [%])) se))", "problem": 33, "user": "4e9fde3c535d7eef3080729b"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4dbb0f2d535d1e037afb21b1"}, {"code": "#(loop [i (reverse %1) result '()]\n      (if(empty? i)\n        result\n        (recur (rest i) (concat (repeat %2 (first i)) result)))\n    )", "problem": 33, "user": "4ea85846535d7eef308072f9"}, {"code": "(fn [x y] (mapcat (partial repeat y) x))", "problem": 33, "user": "4eaa96e1535d7eef3080730d"}, {"code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "problem": 33, "user": "4e8a460e535d65386fec2109"}, {"code": "(fn [s x] (mapcat #(repeat x %) s))", "problem": 33, "user": "4eab350a535d7eef30807314"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4eab612d535d7eef30807316"}, {"code": "(fn [c n]\n  (mapcat #(repeat n %) c))", "problem": 33, "user": "4ead6418535d7eef3080731f"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "4e8a0741535d3e98b802328b"}, {"code": "(fn [coll n]\n  (mapcat #(take n (repeat %)) coll))", "problem": 33, "user": "4eae5fe4535d7eef30807325"}, {"code": "(fn [seq n] (mapcat #(repeat n %) seq))", "problem": 33, "user": "4e994541535dbda64a6f6b64"}, {"code": "#(apply mapcat list (repeat %2 %))", "problem": 33, "user": "4eaec592535d7eef30807327"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %)", "problem": 33, "user": "4eaf08ce535d7eef3080732d"}, {"code": "#(mapcat(partial repeat%2)%1)", "problem": 33, "user": "4eb07be3535d7eef3080733b"}, {"code": "#(if (= 1 %2) %1 (apply interleave (repeat %2 %1)))", "problem": 33, "user": "4e58c019535d8a8b8723a297"}, {"code": "(fn f [input dupno]\r\n  (if (< dupno 2)\r\n    input\r\n    (apply interleave (repeat dupno input))))", "problem": 33, "user": "4eaed3a7535d7eef30807328"}, {"code": "(fn [coll n]\n  (if (= n 1) coll\n    (apply interleave (repeat n coll))))", "problem": 33, "user": "4e949d18535dbda64a6f6b15"}, {"code": "(fn [x i] (mapcat #(take i (cycle [%])) x))", "problem": 33, "user": "4ea1ecfa535d7eef308072bb"}, {"code": "(fn [a b] (mapcat #(repeat b %) a))", "problem": 33, "user": "4eaede1f535d7eef30807329"}, {"code": "(fn rep_seq [L, n]\n    (mapcat #(repeat n %) L))", "problem": 33, "user": "4eb0a757535d7eef3080733d"}, {"code": "(fn [x n] (reduce concat (map (partial repeat n) x)))", "problem": 33, "user": "4ea9b80c535d7eef30807306"}, {"code": "#(mapcat (fn [item] (repeat %2 item)) %)", "problem": 33, "user": "4e7dfd48535db169f9c796fa"}, {"code": "(fn [x y]\n    (loop [data x n y result []]    \n      (if (first data)\n  (if (> n 0)\n\t  (recur data (- n 1) (cons (first data) result))\n\t  (recur (rest data) y result))\n      (reverse result))))", "problem": 33, "user": "4eb0afed535d7eef3080733e"}, {"code": "(fn [seq-list count]\n  (mapcat #(repeat count %) seq-list))", "problem": 33, "user": "4eb1dd39535d7eef30807345"}, {"code": "(fn [c n]\n  (reverse (reduce (fn [a x]\n    (loop [n n ret a]\n(if (> n 0)\n(recur (dec n) (conj ret x))\nret))) '() c)))", "problem": 33, "user": "4eb27fad535d7eef3080734a"}, {"code": "(fn [coll n]\n    (mapcat #(repeat n %) coll))", "problem": 33, "user": "4e89e939535d3e98b8023287"}, {"code": "(fn redup [xs n]\n   (if (= '() (rest xs))\n      (repeat n (first xs))\n      (concat (repeat n (first xs)) (redup (rest xs) n))))", "problem": 33, "user": "4ea7999e535d7eef308072ee"}, {"code": "(fn [coll n]  \n  (reduce concat   \n    (map\n      (fn twice [x] \n        (repeat n x)) coll)))", "problem": 33, "user": "4e80d1c8535db62dc21a62b6"}, {"code": "#(if (= 1 %2)\r\n     %1\r\n     (apply interleave (repeat %2 %1)))", "problem": 33, "user": "4eb66737535d7eef3080736b"}, {"code": "#(mapcat (partial replicate %2) %1)", "problem": 33, "user": "4eb2e6ca535d7eef3080734f"}, {"code": "(fn [x n] \n  (loop [s x, r []]\n    (if (= s [])\n      r\n      (recur (rest s) (into r (repeat n (first s)))))))", "problem": 33, "user": "4eb6d3ab535d7eef30807370"}, {"code": "(fn[coll n]\r\n  (loop [res () sc coll]\r\n    (if (nil? (seq sc))\r\n      res\r\n      (recur (concat res (for [i (range n)] (first sc))) (rest sc)))))", "problem": 33, "user": "4e94a900535dbda64a6f6b18"}, {"code": "#(mapcat \n  (fn [x]\n    (repeat %2 x)\n  )\n%1)", "problem": 33, "user": "4e8b73f1535d65386fec2121"}, {"code": "#(if (= 1 %2) %1\n   (apply interleave (replicate %2 %1)))", "problem": 33, "user": "4eb01df4535d7eef30807337"}, {"code": "(fn [coll n] (reduce #(concat %1 (repeat n %2)) [] coll))", "problem": 33, "user": "4eb3fcba535d7eef30807359"}, {"code": "(fn [coll n]\r\n   (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "4eb80ce6535d7eef3080737d"}, {"code": "(fn [coll num]\n  (mapcat #(repeat num %) coll))", "problem": 33, "user": "4ea76541535d7eef308072eb"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4ea55757535d7eef308072d3"}, {"code": "(fn [s k] (mapcat #(repeat k %) s))", "problem": 33, "user": "4eb97b2e535dfed6da9c6d54"}, {"code": "(fn [seq,n] (mapcat #(replicate n %) seq))", "problem": 33, "user": "4eb97234535dfed6da9c6d53"}, {"code": "(fn [x y]\n  (mapcat #(repeat y %) x))", "problem": 33, "user": "4e9be708535dbda64a6f6b79"}, {"code": "#(loop [[h & t] %1, c %2, res []]\n  (if h (recur t c (into res (repeat c h)) ) res))", "problem": 33, "user": "4eabb245535d7eef30807319"}, {"code": "(fn rep [x n]\n  (if(= n 0)\n  x\n  (loop [aux x lista [] h n]\n   (if(empty? aux)\n    lista\n      (if (> h 0)\n         (recur aux (conj lista (first aux)) (- h 1))\n         (recur (rest aux) lista n)\n      )                \n   )\n  )\n )\n)", "problem": 33, "user": "4e94aab8535dbda64a6f6b1f"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4eb5750a535d7eef30807366"}, {"code": "(fn [s n]\n  (apply mapcat list (take n (repeat s))))", "problem": 33, "user": "4eb9c82d535dfed6da9c6d5c"}, {"code": "#(mapcat (fn [p] (repeat %2 p)) %)", "problem": 33, "user": "4eac5bc1535d7eef3080731b"}, {"code": "(fn [coll r] (mapcat #(repeat r %) coll))", "problem": 33, "user": "4eb2eae5535d7eef30807351"}, {"code": "(fn [s n]\n  (mapcat (partial repeat n) s))", "problem": 33, "user": "4ebc08a8535dfed6da9c6d7c"}, {"code": "(fn [s n]\n  (reduce\n    #(concat %1 (take n (repeat %2))) \n    []\n    s))", "problem": 33, "user": "4dbdc9da535d020aff1edf4c"}, {"code": "(fn [l n] (mapcat #(repeat n %) l))", "problem": 33, "user": "4e82f85d535db62dc21a62ce"}, {"code": "(fn\n  [coll n]\n  (mapcat #(repeat n %1) coll))", "problem": 33, "user": "4ebb20c0535dfed6da9c6d6f"}, {"code": "#(mapcat (fn [i] (take %2 (repeat i))) %)", "problem": 33, "user": "4eb25069535d7eef30807348"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %)", "problem": 33, "user": "4e1350af535d04ed9115e7d8"}, {"code": "(fn [coll n] \n    (mapcat #(repeat n %) coll))", "problem": 33, "user": "4eb955da535dfed6da9c6d50"}, {"code": "(fn [coll n]\n  (reduce concat (map #(take n (repeat %)) coll)))", "problem": 33, "user": "4dadb891c9a9d6ed3699dc57"}, {"code": "(fn [coll n] (mapcat (partial repeat n) coll))", "problem": 33, "user": "4ebf45c3535dfed6da9c6d9d"}, {"code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "4e924a69535dbda64a6f6b01"}, {"code": "(fn [x y] (mapcat (fn [a] (repeat y a)) x))", "problem": 33, "user": "4ea0c284535d7eef308072ad"}, {"code": "(fn [l n] \n  (if (> n 1)\n    (apply interleave (repeat n l))\n    l))", "problem": 33, "user": "4e9c4e02535dbda64a6f6b7e"}, {"code": "#(if (< %2 2)\n     %1\n     (apply interleave (replicate %2 %1)))", "problem": 33, "user": "4eb2d0ae535d7eef3080734e"}, {"code": "(fn [seq n] (apply concat (map #(repeat n %) seq )))", "problem": 33, "user": "4e9519b4535dbda64a6f6b2d"}, {"code": "(fn [xs n]\n  (mapcat #(repeat n %) xs))", "problem": 33, "user": "4ec132a0535dfed6da9c6da9"}, {"code": "(fn [x,y] (mapcat #(repeat y %) x))", "problem": 33, "user": "4ec0c7ba535dfed6da9c6da4"}, {"code": "(fn [coll n] (mapcat #(take n (repeat %)) coll))", "problem": 33, "user": "4ebd4448535dfed6da9c6d8f"}, {"code": "(fn [x n] (mapcat #(replicate n %) x))", "problem": 33, "user": "4e1fe800535d04ed9115e811"}, {"code": "(fn [c n] (mapcat #(repeat n %) c))", "problem": 33, "user": "4ec12577535dfed6da9c6da8"}, {"code": "(fn [s count]\n  (mapcat (fn [x] (take count (repeat x))) s))", "problem": 33, "user": "4ec2fe3f535dcc7ae8597d4f"}, {"code": "(fn [l n]\n  (reverse \n    (reduce #(into %1 (repeat n %2)) \n            '() \n            l)))", "problem": 33, "user": "4ec21058535dfed6da9c6dba"}, {"code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "problem": 33, "user": "4ec34578535dcc7ae8597d51"}, {"code": "(fn duplicate [item-list num] (reduce (fn [b c] (concat b c)) '() (map (fn [a] (repeat num a)) item-list)))", "problem": 33, "user": "4ec12516535dfed6da9c6da7"}, {"code": "(fn nem [s n] (reverse (\n      (fn nem2 [i o n] \n         (if (= (first i) nil)\n             o\n             (let [\n                    fi (first i)\n                    i2 (rest i)\n                    a (repeat n fi)\n                    o2 (\n                         (fn cpy2 [s t] \n                            (if (= (first s) nil)\n                                t\n                                (cpy2 (rest s) (cons (first s) t))\n                            )\n                         )\n                         a o\n                       )\n                  ]\n                  (nem2 i2 o2 n)\n             )\n         )\n      )\n      s [] n\n   ))\n)", "problem": 33, "user": "4ec17677535dfed6da9c6dad"}, {"code": "(fn [s n]\n  (if (> n 1) \n    (apply interleave (take n (repeat s)))\n    s))", "problem": 33, "user": "4ebe766d535dfed6da9c6d94"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4eb51942535d7eef30807365"}, {"code": "(fn f [s,n]\n  (if (= 1 (count s))\n    (repeat n (first s))\n    (concat (repeat n (first s)) (f (rest s) n))))", "problem": 33, "user": "4e8b98fc535d65386fec2124"}, {"code": "(fn [coll times] \n  (apply concat (map #(repeat times %) coll)))\n;; can also use mapcap", "problem": 33, "user": "4ec42c11535dcc7ae8597d5f"}, {"code": "(fn [c n]\n  (mapcat #(repeat n %) c))", "problem": 33, "user": "4e726914535d5021c1a89661"}, {"code": "(fn [s n] \n  (loop [head (first s), tail (rest s), out []]\n    (if (empty? tail)\n      (apply conj out (repeatedly n #(do head)))\n      (recur (first tail) (rest tail) (apply conj out (repeatedly n #(do head)))) )))", "problem": 33, "user": "4ec5c81f535d6d7199dd36b6"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4ebb78a2535dfed6da9c6d70"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4ec5d40d535d6d7199dd36b9"}, {"code": "(fn [s n] (mapcat (partial repeat n) s))", "problem": 33, "user": "4ec4ac86535dcc7ae8597d64"}, {"code": "(fn [xs n] (mapcat #(replicate n %) xs))", "problem": 33, "user": "4ec6157b535d6d7199dd36c2"}, {"code": "(fn [coll n]\n  (mapcat (fn [v] (take n (repeat v))) coll))", "problem": 33, "user": "4ec6559a535d6d7199dd36c9"}, {"code": "#(apply concat (map (partial repeat %2) %1))", "problem": 33, "user": "4ec2f192535dcc7ae8597d4c"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4ec16c21535dfed6da9c6dac"}, {"code": "(fn [c r]\n  (reduce concat\n    (map #(replicate r %) c)))", "problem": 33, "user": "4dadc6f2c9a9d6ed4099dc57"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4e7e4d5c535db169f9c7970f"}, {"code": "(fn [lst n]\n  (loop [lst lst acc []]\n    (if (empty? lst)\n      acc\n      (recur (rest lst) (apply conj acc (repeat n (first lst))))\n      )\n    )\n  )", "problem": 33, "user": "4ec6c878535d6d7199dd36d5"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4ec812d9535d6d7199dd36f0"}, {"code": "(fn r [l n]\n  (if (empty? l)\n    []\n    (concat (repeat n (first l)) (r (rest l) n))\n  )\n)", "problem": 33, "user": "4ebbffbd535dfed6da9c6d79"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4ec07699535dfed6da9c6da2"}, {"code": "(fn [in i]\n (mapcat\n  (fn [e]\n   ((fn [e i out]\n     (if (= 0 i)\n      out\n      (recur e (- i 1) (cons e out)))) e i []))\n  in))", "problem": 33, "user": "4ec953ba535d6d7199dd36fd"}, {"code": "(fn [coll N]\n  (loop [coll coll, res []]\n    (if (empty? coll)\n      res\n      (recur\n        (rest coll)\n        (concat res (repeat N (first coll)))))))", "problem": 33, "user": "4e117dea535d04ed9115e7c9"}, {"code": "(fn [coll n] (mapcat #(replicate n %1) coll))", "problem": 33, "user": "4e0d5a5a535d04ed9115e7b5"}, {"code": "(fn bar \n  ([s t] (bar s t []))\n  ([s t r] (if \n    (empty? s) r \n    (bar (rest s) t (\n      (fn foo [i c re] (if (= c 0) re (foo i (- c 1) (conj re i)))) (first s) t r)\n    ))\n))", "problem": 33, "user": "4dbecb06535d020aff1edf6a"}, {"code": "(fn [sq n] ( mapcat #(clojure.core/replicate n %) sq))", "problem": 33, "user": "4eb44d78535d7eef30807360"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4ec70f26535d6d7199dd36dd"}, {"code": "#(apply (partial mapcat list) (replicate %2 %))", "problem": 33, "user": "4ec74de3535d6d7199dd36df"}, {"code": "#(loop [i %1 r '()] (if (empty? i) r (recur (rest i) (concat r (repeat %2 (first i))))))", "problem": 33, "user": "4e85cda3535db62dc21a62f0"}, {"code": "(fn myrep [s n]\n  (let\n    [repelem (fn r [elem m]\n      (if (= m 0)\n        '()\n        (cons elem (r elem (dec m)))))]\n    (if (empty? s)\n      '()\n      (concat (repelem (first s) n) (myrep (rest s) n)))))", "problem": 33, "user": "4ecaf637535d6d7199dd370c"}, {"code": "(fn [xs n] (mapcat #(take n (cycle [%])) xs))", "problem": 33, "user": "4ecab3b7535d6d7199dd3709"}, {"code": "(fn [s n]\n  (reduce (fn [acc item]\n              (concat acc (repeat n item))) '() s))", "problem": 33, "user": "4ec5a6ee535d6d7199dd36ae"}, {"code": "(fn [col x] \n    (reduce concat (map #(repeat x %) col)  ))", "problem": 33, "user": "4ec5bec6535d6d7199dd36b3"}, {"code": "(fn [coll n]\n  (let [dup #(map (fn [_] %) (range n))]\n    (reverse (reduce (partial apply conj) \n      (for [x coll] (dup x))))))", "problem": 33, "user": "4e25176e535d04ed9115e829"}, {"code": "(fn multi [coll n]\n  (mapcat #(repeat n %1) coll))", "problem": 33, "user": "4eb9ce75535dfed6da9c6d5e"}, {"code": "(fn repl [coll, n]\n  (loop [res '(), left coll]\n    (if (empty? left)\n      res\n      (recur (concat res (repeat n (first left))), (rest left)))))", "problem": 33, "user": "4ecbff2f535df97575fdabe4"}, {"code": "(fn [coll n] (apply concat (reduce #(conj %1 (repeat n %2)) [] coll)))", "problem": 33, "user": "4ec28d86535dfed6da9c6dbc"}, {"code": "(fn [col n]\n      (reduce\n\t     (fn [cur val]\n\t\t (apply conj cur (repeat n val)))\n\t     ()\n\t     (reverse col)))", "problem": 33, "user": "4ecb1641535d6d7199dd370e"}, {"code": "(fn replicate [s c]\n    (cond\n      (empty? s) '()\n      :else\n        (concat\n          (take c (repeat (first s)))\n          (replicate (rest s) c))))", "problem": 33, "user": "4e6f578c535d5021c1a8961b"}, {"code": "#(apply concat (for [a %1] (repeat %2 a)))", "problem": 33, "user": "4db342d7535df7e46ed9b6cd"}, {"code": "(fn [l n] (reduce\n  (fn [x y] (into x (take n (repeat y))))\n  [] l))\n\n;(fn [s n]\n;  (loop [result []\n;         s s]\n;    (if (empty? s)\n;      result\n;      (recur (concat result (repeat n (first s))) (rest s)))))", "problem": 33, "user": "4ec6297b535d6d7199dd36c4"}, {"code": "(fn [coll nr] (mapcat #(repeat nr  %) coll))", "problem": 33, "user": "4ec51590535d6d7199dd3683"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4e52777f535d302ef430da76"}, {"code": "(fn [x rep-counter] (loop [s (map #(repeat rep-counter %) x) r '()]\n             (if (empty? s)\n               r\n               (recur (rest s) (concat r (first s))))))", "problem": 33, "user": "4ebef65e535dfed6da9c6d9b"}, {"code": "(fn [l n] (if (= n 1) l (apply interleave (repeat n l))))", "problem": 33, "user": "4ecaaa25535d6d7199dd3708"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4e9a8c0e535dbda64a6f6b72"}, {"code": "(fn f [aseq, n] (mapcat #(repeat n %) aseq))", "problem": 33, "user": "4ecf42b4535d1f5ad70dba3c"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "4ecbb249535df97575fdabdf"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4ece9ca9535d23f03622770f"}, {"code": "#(loop [result '() coll %]\n  (if (seq coll)\n    (recur (concat result (repeat %2 (first coll))) (rest coll))\n    result))", "problem": 33, "user": "4ecfb458535d44c135fd68bb"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4ebc829e535dfed6da9c6d86"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4ed06ea6535d44c135fd68c4"}, {"code": "(fn[col,n](mapcat #(map (constantly %) (range n)) col))", "problem": 33, "user": "4ec75829535d6d7199dd36e1"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4ed15f60535d44c135fd68cd"}, {"code": "(fn [ls, n] \n  (apply list (mapcat (partial repeat n) ls))\n)", "problem": 33, "user": "4ecc147b535d23f0362276f7"}, {"code": "(fn [s n] (mapcat (partial repeat n) s))", "problem": 33, "user": "4ed188c8535d44c135fd68cf"}, {"code": "(fn [c n] (mapcat #(take n (repeat %)) c))", "problem": 33, "user": "4ec6357a535d6d7199dd36c5"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %1) coll))", "problem": 33, "user": "4ec60dc4535d6d7199dd36c0"}, {"code": "(fn [x n] (reduce (fn [a e]\n  (concat a (take n (repeat e))))\n  '() x))", "problem": 33, "user": "4ed2b168535d44c135fd68dd"}, {"code": "(fn [x n] (loop [m x  r []] \n  \t\t       (if (empty? m) r\n\t\t\t\t   (recur (rest m) (concat r (repeat n (first m)))))))", "problem": 33, "user": "4ea4e98a535d7eef308072ce"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4dbf7a31535d020aff1edf75"}, {"code": "(fn [coll n]\n  ((fn f [coll n c]\n     (if (seq coll)\n       (if (> c 0)\n         (lazy-seq (cons (first coll) (f coll n (dec c))))\n         (f (rest coll) n n))))\n     coll n n))", "problem": 33, "user": "4ec75077535d6d7199dd36e0"}, {"code": "(fn [result x] \r\n  (if (< x 2)\r\n    result\r\n    (recur (interleave result result) (- x 2))))", "problem": 33, "user": "4e75500f535d7a570dd295c1"}, {"code": "(fn [list n] \n  (mapcat (fn [e] (repeat n e)) list))", "problem": 33, "user": "4e7f8f85535db966e863cc44"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4ec49231535dcc7ae8597d63"}, {"code": "(fn rep [x y] (mapcat #(repeat y %) x))", "problem": 33, "user": "4ebbf772535dfed6da9c6d76"}, {"code": "(fn r [s t] (mapcat #(repeat t %) s))", "problem": 33, "user": "4eb13d60535d7eef3080733f"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4ed0e139535d44c135fd68c7"}, {"code": "(fn [coll x] (apply concat (map #(repeat x %) coll)))", "problem": 33, "user": "4ed418b8535d10e5ff6f52c5"}, {"code": "(fn [s n]\n    (for [el (seq s) i (range n)]\n      el))", "problem": 33, "user": "4ed292ac535d44c135fd68d9"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4e5af45e535d8a8b8723a2b1"}, {"code": "(fn [x y] (mapcat #(take y (repeat %)) x))", "problem": 33, "user": "4ec7def0535d6d7199dd36e9"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4ecc8dea535d23f0362276fd"}, {"code": "(fn r [xs n] (reduce concat '() (map #(repeat n %) xs)))", "problem": 33, "user": "4ed500bb535d10e5ff6f52d3"}, {"code": "#(mapcat (fn [a] (repeat %2 a)) %)", "problem": 33, "user": "4e65027c535d8ccf87e9fe6e"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4ed4798f535d10e5ff6f52cc"}, {"code": "#(mapcat (fn[x] (repeat %2 x)) %)", "problem": 33, "user": "4eca40cd535d6d7199dd3703"}, {"code": "#(apply concat (map (partial repeat %2) %1))", "problem": 33, "user": "4ec5aa1f535d6d7199dd36b0"}, {"code": "(fn [x y] (mapcat #(repeat y (identity %) )  x))", "problem": 33, "user": "4ecf1f51535d1f5ad70dba3a"}, {"code": "#(apply mapcat (cons vector (repeat %2 %)))", "problem": 33, "user": "4ed69ea4535d10e5ff6f52e3"}, {"code": "(fn [c n] (mapcat #(repeat n %) c))", "problem": 33, "user": "4ec5c948535d6d7199dd36b7"}, {"code": "(fn rep-n [s n]\n    (reduce concat (map #(repeat n %) s)))", "problem": 33, "user": "4ed72e51535d10e5ff6f52ee"}, {"code": "(fn[seq n] (mapcat #(repeat n %) seq))", "problem": 33, "user": "4ece7617535d23f03622770c"}, {"code": "#(letfn [(f [x acc n] (if (empty? x) acc (f (rest x) (concat acc (repeat n (first x))) n)))]\n  (f %1 [] %2))", "problem": 33, "user": "4ed94d69535d10e5ff6f5303"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4ec78bde535d6d7199dd36e2"}, {"code": "(fn [x n]\n  (mapcat #(repeat n %) x))", "problem": 33, "user": "4ec5cdb0535d6d7199dd36b8"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4ed97da1535d10e5ff6f5306"}, {"code": "(fn repll [lst n]\n  (mapcat #(for [x (range n)] %) lst)\n  )", "problem": 33, "user": "4ecfa05c535d44c135fd68b9"}, {"code": "(fn [xs n]\n  (mapcat #(repeat n %) xs))", "problem": 33, "user": "4ed6238d535d10e5ff6f52de"}, {"code": "(fn replicate [coll times]\n  (if (seq coll)\n    (into (replicate (rest coll) times)\n          (take times (iterate identity (first coll))))\n    ()))", "problem": 33, "user": "4eda7cc3535d10e5ff6f530e"}, {"code": "(fn [coll n]\n  (let [* (fn [item n]\n            (replicate n item))]\n    (apply concat (map #(* % n) coll))))", "problem": 33, "user": "4edab806535d10e5ff6f5311"}, {"code": "(fn [s n] (mapcat (fn [x] (repeat n x)) s))", "problem": 33, "user": "4ed8b598535d10e5ff6f52fc"}, {"code": "(fn [l n] (mapcat #(repeat n %) l))", "problem": 33, "user": "4ed6ac40535d10e5ff6f52e4"}, {"code": "(fn rep [coll n]\n  (reduce (fn [a b] (concat a b)) (map (fn [x] (repeat n x)) coll)))", "problem": 33, "user": "4ecdb0bb535d23f036227709"}, {"code": "(fn [coll r] (mapcat (fn [x] (repeat r x)) coll))", "problem": 33, "user": "4e6e7018535d5021c1a8960b"}, {"code": "(fn replicate-seq [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4eb59464535d7eef30807369"}, {"code": "(fn [coll x] (reduce #(concat %1 (take x (repeat %2))) '() coll))", "problem": 33, "user": "4ea11921535d7eef308072af"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4ede8789535d10e5ff6f5337"}, {"code": "#(apply mapcat list (replicate %2 %))", "problem": 33, "user": "4ed27f9f535d44c135fd68d5"}, {"code": "(fn [coll times]\n  (mapcat #(repeat times %) coll))", "problem": 33, "user": "4e7d4544535db169f9c796d0"}, {"code": "(fn[xs n](mapcat(partial repeat n) xs))", "problem": 33, "user": "4edeac6b535d10e5ff6f533a"}, {"code": "(fn rep [x n]\r\n   (loop [lista x resultado '()]\r\n   (if (empty? lista)\r\n     resultado\r\n     (recur (rest lista) (concat resultado (concat [] (vec(replicate n (first lista))))))\r\n   )\r\n  )\r\n)", "problem": 33, "user": "4edf92f0535d10e5ff6f5341"}, {"code": "(fn [l n]\n  (apply concat (map (partial replicate n) l)))", "problem": 33, "user": "4ede8e1d535d10e5ff6f5339"}, {"code": "(fn [x e]\r\n   (loop [lista [] vec x]\r\n     (if (empty? vec)\r\n       lista\r\n       (recur (concat lista (repeat e (first vec)) ) (rest vec) )\r\n     )\r\n   )\r\n)", "problem": 33, "user": "4e94aa18535dbda64a6f6b1e"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4edd038c535d10e5ff6f5327"}, {"code": "(fn cp\r\n  [coll cnt]\r\n\t(reduce \r\n\t\t(fn [x y]\r\n\t\t\t(loop [res x yy y cc 0]\r\n\t\t\t\t(if (< cc cnt)\r\n\t\t\t\t\t(recur (conj res y) y (inc cc))\r\n\t\t\t\t\tres))) \r\n\t\t[] coll))", "problem": 33, "user": "4edbae0d535d10e5ff6f531c"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4ec18451535dfed6da9c6db0"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4e89ff3d535d3e98b802328a"}, {"code": "(fn [list count] \n  (loop [l list, c count, out []]\n    (if (empty? l)\n      out\n      (recur (rest l) c \n        (concat out (repeat c (first l)))))))", "problem": 33, "user": "4edd9d79535d10e5ff6f532b"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4ed55b5d535d10e5ff6f52d8"}, {"code": "(fn [coll n]\n  (apply\n    concat\n    (map\n      (fn [x] (map (constantly x) (range n)))\n      coll)))", "problem": 33, "user": "4ee2da14535d10e5ff6f536c"}, {"code": "(fn [coll n]\n    (apply concat (map (partial repeat n) coll))\n    )", "problem": 33, "user": "4e5be681535d8a8b8723a2bc"}, {"code": "(fn [coll n]\n  (if (> n 1)\n    (apply interleave\n      (repeat n coll))\n    coll))", "problem": 33, "user": "4ed9fe5f535d10e5ff6f5308"}, {"code": "(fn [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "4ee3b586535d10e5ff6f5371"}, {"code": "(fn [c n] (mapcat #(take n (repeat %)) c))", "problem": 33, "user": "4edee6a2535d10e5ff6f533e"}, {"code": "(fn [seq n] (reduce #(apply conj %1 (repeat n %2)) [] seq ))", "problem": 33, "user": "4edd4b77535d10e5ff6f5328"}, {"code": "#(reduce concat (map (fn [x] (repeat %2 x)) %))", "problem": 33, "user": "4ee40938535d10e5ff6f5375"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4ee26f01535d10e5ff6f5368"}, {"code": "(fn [x y] (mapcat #(repeat y %) x))", "problem": 33, "user": "4e6cf521535de274dd8d818b"}, {"code": "(fn[l n] (mapcat #(repeat n %) l))", "problem": 33, "user": "4edf5dc6535d10e5ff6f5340"}, {"code": "(fn [coll times] (if (= 1 times) coll (apply interleave (repeat times coll))))", "problem": 33, "user": "4e7e8684535db169f9c79717"}, {"code": "(fn [xs n]\n  (loop [el xs\n         i 1\n         acc []]\n    (if (seq el)\n      (if (= i n)\n        (recur (rest el) 1 (conj acc (first el)))\n        (recur el (+ 1 i) (conj acc (first el))))\n      acc)))", "problem": 33, "user": "4ee63d8d535d93acb0a66859"}, {"code": "(fn x-replicate [coll t]\n  (reduce\n    (fn [a b]\n      (reduce (fn [x _] (conj x b)) a (range t)))\n    []\n    coll))", "problem": 33, "user": "4eccb190535d23f0362276fe"}, {"code": "#(if (= %2 1) \n  %1\n  (apply interleave (repeat %2 %1)))", "problem": 33, "user": "4ed7b617535d10e5ff6f52f3"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4edfd846535d10e5ff6f5345"}, {"code": "#(if (= 1 %2) %1 (apply interleave (repeat %2 %1)))", "problem": 33, "user": "4ee7ef87535d93acb0a66872"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4ee6400c535d93acb0a6685b"}, {"code": "(fn [coll times]\n  (reduce into []\n    (map #(repeat times %) coll)))", "problem": 33, "user": "4eddcbbf535d10e5ff6f532d"}, {"code": "(fn foo [xs times]\n  (loop [xs xs out []]\n    (if (empty? xs)\n      out\n      (recur (rest xs) (concat out (repeat times (first xs)))))))", "problem": 33, "user": "4ee88269535d93acb0a6687f"}, {"code": "(fn [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "4ee75ec2535d93acb0a66867"}, {"code": "(fn m [xs n]\n  (if (empty? xs) []\n  (concat (repeat n (first xs))\n          (m (rest xs) n))))", "problem": 33, "user": "4dad8d4bc9a9d6ed1799dc57"}, {"code": "(fn [s n] (mapcat (fn [x] (nth (iterate #(concat % [x]) []) n)) s))", "problem": 33, "user": "4ed7e37a535d10e5ff6f52f4"}, {"code": "(fn [coll t] (mapcat #(repeat t %) coll))", "problem": 33, "user": "4eb30868535d7eef30807355"}, {"code": "#(for [x % y (range %2)] x)", "problem": 33, "user": "4ee82539535d93acb0a66878"}, {"code": "#(for [x %1 y (repeat %2 x)] y)", "problem": 33, "user": "4ee7d177535d93acb0a6686f"}, {"code": "(fn [l n]\n  (mapcat (partial repeat n) l))", "problem": 33, "user": "4ee82223535d93acb0a66877"}, {"code": "#((fn rep [coll x]\n  (when-let [[h & t] (seq coll)]\n\t\t(concat (repeat x h) (rep t x)))) %1 %2)", "problem": 33, "user": "4ee91d00535d93acb0a6688b"}, {"code": "(fn [coll n] (mapcat (partial replicate n) coll))", "problem": 33, "user": "4ed2a92b535d44c135fd68dc"}, {"code": "(fn [c n] (mapcat #(take n (repeat %)) c))", "problem": 33, "user": "4ec79f99535d6d7199dd36e4"}, {"code": "#(if (= %2 1) % (apply interleave (repeat %2 %)))", "problem": 33, "user": "4daeabf6edd6309eace4d15c"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %)", "problem": 33, "user": "4eebfd03535d93acb0a668ab"}, {"code": "#(for [x % y (repeat %2 x)] y)", "problem": 33, "user": "4ee9ddb8535d93acb0a66896"}, {"code": "(fn [coll n] (if (> n 1) (apply interleave (repeat n coll)) coll))", "problem": 33, "user": "4ee9d697535d93acb0a66895"}, {"code": "(fn [c n] (mapcat #(repeat n %) c))", "problem": 33, "user": "4e95f5a5535dbda64a6f6b3b"}, {"code": "#(mapcat (fn [v] (take %2 (repeat v))) %1)", "problem": 33, "user": "4ee868be535d93acb0a6687d"}, {"code": "(fn [s n] (mapcat (partial repeat n) s))", "problem": 33, "user": "4eebc5da535d93acb0a668aa"}, {"code": "(fn [s x] (mapcat #(repeat x %) s))", "problem": 33, "user": "4ec3650f535dcc7ae8597d56"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "4ec3b393535dcc7ae8597d59"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4ee4f4a9535d1385b2869d85"}, {"code": "(fn [xs n]\n  (loop [res [] lst (seq xs) times n]\n    (if lst\n      (recur \n        (conj res (first lst))\n        (if (= 1 times) (next lst) lst)\n        (if (= 1 times) n (dec times)))\n      res\n      )))", "problem": 33, "user": "4ee8092f535d93acb0a66875"}, {"code": "(fn [xs times]\n  (reduce (fn [rsl x]\n            (into\n              rsl\n              (loop [nx []\n                   t times]\n                (if (= 0 t) nx\n                  (recur (conj nx x) (dec t))\n      )))) [] xs))", "problem": 33, "user": "4eeae8f0535d93acb0a668a2"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4ee88bfb535d93acb0a66881"}, {"code": "(fn r [[x & xs] d] (when x (concat (repeat d x) (r xs d))))", "problem": 33, "user": "4eecdd66535d93acb0a668b9"}, {"code": "(fn [s n] (mapcat #(take n (cycle [%])) s))", "problem": 33, "user": "4ef0a38e535dced4c769f20b"}, {"code": "(fn [s n] (mapcat #(replicate n %) s))", "problem": 33, "user": "4ef0a39b535dced4c769f20c"}, {"code": "(fn rep \n  ([l n] (rep l n []))\n  ([l n result]\n    (if (empty? l)\n      result\n      (rep \n        (rest l)\n        n\n        (into result (vec (repeat n (first l))))))))", "problem": 33, "user": "4daea889edd6309eace4d15b"}, {"code": "(fn [sq r] (reduce #(concat %1 (repeat r %2)) [] sq))", "problem": 33, "user": "4ef0a39b535dced4c769f20d"}, {"code": "#(for [x % _ (range %2)] x)", "problem": 33, "user": "4ef2d243535dced4c769f221"}, {"code": "#(if (> %2 1)\n  (apply interleave (repeat %2 %1))\n  %1)", "problem": 33, "user": "4eda77c0535d10e5ff6f530d"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "4ef49c2c535dced4c769f238"}, {"code": "(fn [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "4edecdae535d10e5ff6f533c"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4ef41f26535dced4c769f230"}, {"code": "(fn [xs n]\n  (apply concat (map #(repeat n %) xs)))", "problem": 33, "user": "4ee67d74535d93acb0a66861"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "4ef4c1ff535dced4c769f23e"}, {"code": "(fn [s n]\n  (loop [xs s acc []]\n    (if (empty? xs)\n      acc\n      (recur (rest xs) (concat acc (repeat n (first xs)))))))", "problem": 33, "user": "4ef1ee67535dced4c769f219"}, {"code": "(fn [x y] (mapcat #(repeat y %) x))", "problem": 33, "user": "4e8d5911535d65386fec2133"}, {"code": "(fn [c n]\n  (mapcat #(take n (repeat %)) c))", "problem": 33, "user": "4ef667c4535dced4c769f24c"}, {"code": "#(apply concat (map (partial repeat %2) %1))", "problem": 33, "user": "4ef6e689535dced4c769f24f"}, {"code": "(fn [col n] \n  (mapcat #(repeat n %) col))", "problem": 33, "user": "4ef4acf8535dced4c769f23c"}, {"code": "(fn [xs x] (reduce #(into % (repeat x %2)) [] xs))", "problem": 33, "user": "4ef4e5fa535dced4c769f242"}, {"code": "#(letfn [(repseq [xs n acc]\n  (if (empty? xs) \n\t\tacc \n\t\t(recur (rest xs) \n\t\t\t\tn \n\t\t\t\t(concat acc (repeat n (first xs))))))]\n\t(repseq %1 %2 []))", "problem": 33, "user": "4ef5c7ce535dced4c769f248"}, {"code": "#(if (= 1 %2) % (apply interleave (repeat %2 %)))", "problem": 33, "user": "4ef355e3535dced4c769f228"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %)", "problem": 33, "user": "4ef77c82535dced4c769f253"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4eee5c7f535d93acb0a668c6"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4dd88803535d2dad7130b5d9"}, {"code": "#(let [arr %1 cont %2]\n  (reduce (fn [res item]\n   (concat res (repeat cont item)))\n    '() arr))", "problem": 33, "user": "4ec5d62c535d6d7199dd36ba"}, {"code": "(fn [col n]\n  (mapcat #(repeat n %) col))", "problem": 33, "user": "4ef992c8535dced4c769f268"}, {"code": "(fn[x y]( mapcat #(repeat y %) x) )", "problem": 33, "user": "4efacdf7535dced4c769f271"}, {"code": "(fn [xs k] (reduce concat (map #(repeat k %) xs)))", "problem": 33, "user": "4ef8d47c535dced4c769f261"}, {"code": "(fn [s n]\n   (loop [results '()\n        more s]\n    (if (empty? more)\n      (reverse results)\n      (recur (reduce (fn [resultsp item]\n                       (conj resultsp (first more))\n                       ) results (range n))\n             (next more)))))", "problem": 33, "user": "4efb92ce535dced4c769f27a"}, {"code": "#(let [y %2](mapcat (fn[x](repeat y x)) %1))", "problem": 33, "user": "4ed2dd98535d44c135fd68e2"}, {"code": "(fn my-replicate\n    ([icoll num] (my-replicate icoll num '()))\n    ([icoll num ocoll] \n            (cond \n             (empty? icoll) (reverse ocoll)\n             :else (recur (rest icoll) num \n                          (into ocoll (replicate num (first icoll)))\n    ))))", "problem": 33, "user": "4eee3e6a535d93acb0a668c3"}, {"code": "(fn replicate-seq [xs n]\n  (cond (empty? xs) '()\n        true (concat (repeat n (first xs)) (replicate-seq (rest xs) n))))", "problem": 33, "user": "4ef6f5ea535dced4c769f250"}, {"code": "(fn [l i] (mapcat #(replicate i %) l))", "problem": 33, "user": "4efb0ae1535dced4c769f273"}, {"code": "(fn [c n] (mapcat #(repeat n %) c))", "problem": 33, "user": "4efb2fd7535dced4c769f274"}, {"code": "(fn rep [coll n]\n  (apply concat (map #(take n (iterate identity %1)) coll)))", "problem": 33, "user": "4ef57a7f535dced4c769f246"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4ed9354f535d10e5ff6f5301"}, {"code": "(fn dupeseq-repeat [x y]\n  (mapcat #(repeat y %) x))", "problem": 33, "user": "4eb2c45e535d7eef3080734d"}, {"code": "(fn [xs n](mapcat #(repeat n %) xs))", "problem": 33, "user": "4efcac3a535de96065cf507e"}, {"code": "(fn [seq ct]\n   (let [sq ( #(repeat %2 %1) seq ct)]\n     (if (= 1 (count sq))\n       (flatten sq)\n       (apply interleave sq))))", "problem": 33, "user": "4e8768f6535dceadca469850"}, {"code": "(fn [values n]\n  (for [value values _ (range n)] value))", "problem": 33, "user": "4ee3afde535d10e5ff6f5370"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4eff81ca535dcb61093f6a2d"}, {"code": "(fn [s n] (reduce #(concat %1 (replicate n %2)) '() s))", "problem": 33, "user": "4effb663535dcb61093f6a2e"}, {"code": "#(reduce concat (map (partial repeat %2) %))", "problem": 33, "user": "4efb87f7535dced4c769f279"}, {"code": "(fn dupol [x n]\r\n  (loop [input x output (list) ]\r\n\t\t(if (= (count input) 0) \r\n\t\t\toutput\r\n\t\t\t(recur (rest input) ( concat output (repeat n (first input)))\t) )))", "problem": 33, "user": "4f00c74f535dcb61093f6a31"}, {"code": "#(mapcat (fn [each] (repeat %2 each)) %)", "problem": 33, "user": "4f01ff83535dcb61093f6a3a"}, {"code": "(fn [input-sequence N]\n    (reverse\n    ((fn [input output N N-left]\n      (if (empty? input)\n        output\n        (if (> N-left 0)\n          (recur input (conj output (first input)) N (- N-left 1))\n          (recur (rest input) output N N)\n        )))\n    input-sequence '() N N)))", "problem": 33, "user": "4ee9c8d0535d93acb0a66892"}, {"code": "(fn [xs n]\n  (reduce #(concat %1 %2) [] (map #(repeat n %) xs))\n)", "problem": 33, "user": "4f031eac535dcb61093f6a67"}, {"code": "(fn [s n]\n  (reduce #(into %1 (repeat n %2)) [] s))", "problem": 33, "user": "4e1f9bb5535d04ed9115e80d"}, {"code": "(fn [su n] (loop [s su n n result []] \n  (if (seq s)\n     (recur (rest s) n (concat result (repeat n (first s))))\n      result)))", "problem": 33, "user": "4efd98fa535de96065cf5086"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4f01c938535dcb61093f6a39"}, {"code": "#(if (< %2 2) %1 (apply interleave (take %2 (repeat %1))))", "problem": 33, "user": "4db8f6c4535d1e037afb219e"}, {"code": "(fn replicate [x, y]\n  (if (empty? x)\n    x\n    (concat (repeat y (first x)) (replicate (rest x) y))\n))", "problem": 33, "user": "4ee259a1535d10e5ff6f5366"}, {"code": "(fn [x n] (mapcat #(repeat n %1) x))", "problem": 33, "user": "4f036d6e535dcb61093f6ac0"}, {"code": "(fn [a b]\n  (reduce\n    (fn [x y]\n      (loop [r x n b]\n        (if (= n 0)\nr\n(recur (conj r y) (- n 1))))) [] a))", "problem": 33, "user": "4f038017535dcb61093f6afa"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4f036d9b535dcb61093f6ac1"}, {"code": "(fn [s n] \n  (mapcat #(repeat n %) s))", "problem": 33, "user": "4ef0eaef535dced4c769f211"}, {"code": "(fn [s n]\n  (loop [s s a ()]\n    (if (empty? s)\n        (reverse a)\n        (recur (rest s) (concat (repeat n (first s)) a)))))", "problem": 33, "user": "4f03d0fe535dcb61093f6b6d"}, {"code": "(fn fix [coll x] (apply concat (for [i coll] (repeat x i))))", "problem": 33, "user": "4f0348b4535dcb61093f6a84"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4f0397ee535dcb61093f6b30"}, {"code": "(fn [x i]\n   (if (= i 1)\n     x\n   (letfn [(mul [s n]\n     (if (= n 1)\n       (list s)\n       (conj (mul s (dec n)) s)))]\n     (apply interleave (mul x i)))))", "problem": 33, "user": "4f03193e535dcb61093f6a61"}, {"code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "4f035bfd535dcb61093f6a8f"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4f03857e535dcb61093f6b0d"}, {"code": "(fn [l c] (mapcat #(repeat c %) l))", "problem": 33, "user": "4f039a8b535dcb61093f6b36"}, {"code": "(fn [l n] (reduce (fn [a b] (concat a (repeat n b)))'() l))", "problem": 33, "user": "4f017593535dcb61093f6a36"}, {"code": "#(apply mapcat vector (replicate %2 %1))", "problem": 33, "user": "4f047c07535dcb61093f6bcd"}, {"code": "(fn [x n] (reduce concat '() (map #(repeat n %) x)))", "problem": 33, "user": "4f039f14535dcb61093f6b3e"}, {"code": "#(if (= %2 1)\n%\n  (apply interleave (replicate %2 %))\n)", "problem": 33, "user": "4ef0f1a1535dced4c769f212"}, {"code": "(fn rep* [l k]\n  (apply concat\n    (map #(repeat k %) l)))", "problem": 33, "user": "4f04a06d535dcb61093f6bd9"}, {"code": "(fn repl [x n]\n  ((fn _repl [in out]\n    (if (empty? in)\n      out\n      (recur\n        (rest in)\n        (apply (partial conj out)\n               (repeat n (first in))))))\n    (reverse x) ()))", "problem": 33, "user": "4f047902535dcb61093f6bcc"}, {"code": "(fn [x y]\n  (if (= y 1)\n    x\n  (apply interleave (replicate y x)))\n)", "problem": 33, "user": "4f00f997535dcb61093f6a34"}, {"code": "(fn [l x] (mapcat #(repeat x %) l))", "problem": 33, "user": "4ec2f1d9535dcc7ae8597d4d"}, {"code": "(fn [x n] (if (= n 1) x (apply interleave (take n (repeat x)))))", "problem": 33, "user": "4f0514b4535dcb61093f6bf0"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "4f038bcd535dcb61093f6b1d"}, {"code": "(fn [s n] (mapcat #(repeat n%) s))", "problem": 33, "user": "4f043ed1535dcb61093f6bb4"}, {"code": "(fn repseq [s times]\n  (cond \n    (empty? s) s\n    (= times 1) s\n    :else\n      (concat (repeat times (first s))\n              (repseq (rest s) times))))", "problem": 33, "user": "4f03d4dc535dcb61093f6b6e"}, {"code": "(fn [col n]\n  (apply concat (map #(repeat n %) col)))", "problem": 33, "user": "4f036fad535dcb61093f6ac7"}, {"code": "(fn [X n]\r\n  (loop [y 0 res [] z 0]\r\n\t\t(if (< y (count X))\r\n\t\t\t(if (< z n)\r\n\t\t\t\t(recur y (conj res (nth X y)) (inc z))\r\n\t\t\t\t(recur (inc y) res 0)\r\n\t\t\t)\r\n\t\t\tres\r\n\t\t)\r\n\t)\r\n)", "problem": 33, "user": "4f031883535dcb61093f6a5e"}, {"code": "(fn [s num]\n   (mapcat #(repeat num %) s))", "problem": 33, "user": "4ef89fb0535dced4c769f260"}, {"code": "(fn [xs n]\n  (mapcat #(repeat n %) xs))", "problem": 33, "user": "4f0381db535dcb61093f6b02"}, {"code": "(fn [l t]\n  (mapcat #(repeat t %) l))", "problem": 33, "user": "4f04f847535dcb61093f6beb"}, {"code": "(fn [coll times] (mapcat #(repeat times %) coll))", "problem": 33, "user": "4ec5a5f9535d6d7199dd36ad"}, {"code": "(fn f [x y]\n  (if (empty? x)\n    x\n    (concat (repeat y (first x)) (f (rest x) y))))", "problem": 33, "user": "4f062d4a535dcb61093f6c08"}, {"code": "(fn [l n]\n  (mapcat (fn [x] (repeat n x)) l))", "problem": 33, "user": "4f066c90535dcb61093f6c11"}, {"code": "(fn [col x] (mapcat #(repeat x %) col))", "problem": 33, "user": "4f032977535dcb61093f6a6c"}, {"code": "(fn [c n] (mapcat #(repeat n %) c))", "problem": 33, "user": "4e6a6be7535d8ccf87e9fee1"}, {"code": "(fn [xs n]\n  (mapcat #(repeat n %) xs))", "problem": 33, "user": "4f0388e8535dcb61093f6b17"}, {"code": "(fn \n\t[s x] (mapcat #(repeat x %) s)\n)", "problem": 33, "user": "4f047542535dcb61093f6bc7"}, {"code": "(fn [c n] (mapcat #(repeat n %1) c))", "problem": 33, "user": "4f038355535dcb61093f6b04"}, {"code": "#(reduce concat (map (partial repeat %2) %))", "problem": 33, "user": "4f067029535dcb61093f6c12"}, {"code": "#(if (> %2 1)(apply interleave (repeat %2 %1)) %1)", "problem": 33, "user": "4f052eaf535dcb61093f6bf3"}, {"code": "(fn [c r]\n   (apply\n    concat\n    (map #(repeat r %) c)\n)\n)", "problem": 33, "user": "4ed3c783535d44c135fd68f6"}, {"code": "(fn dup-seq [mylist n]\r\n    (seq (loop [l mylist final '[]]\r\n           (if (empty? l) final\r\n               (recur (rest l) (concat final (replicate n (first l))))))))", "problem": 33, "user": "4f039524535dcb61093f6b2c"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "4f07056c535dcb61093f6c1d"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "4f083048535dcb61093f6c33"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4f0664bd535dcb61093f6c0f"}, {"code": "(fn [coll n] (mapcat (partial repeat n) coll))", "problem": 33, "user": "4f03154a535dcb61093f6a58"}, {"code": "(fn dupz [x numDup]\n    (if (empty? x)\n      '()\n      (letfn [(doTimes [func obj times]\n        (if (= times 0)\n          obj\n          (doTimes func (func obj) (- times 1))))]\n        (doTimes \n          (fn [stuff] (cons (first x) stuff))  \n          (dupz (rest x) numDup) \n          numDup))))", "problem": 33, "user": "4f0365fc535dcb61093f6aa4"}, {"code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "problem": 33, "user": "4f08b15b535dcb61093f6c40"}, {"code": "(fn dup-sequence [xs n]\n    (when-first [x xs]\n        (concat (repeat n x) (dup-sequence (rest xs) n))))", "problem": 33, "user": "4f0660ee535dcb61093f6c0d"}, {"code": "(fn [c x] (reduce into [] (map (partial repeat x) c)))", "problem": 33, "user": "4dc1e1e4535d020aff1edf90"}, {"code": "(fn [s n]\n  (loop [s_ s i n ret '()]\n    (cond\n      (> i 0) (recur s_ (dec i) (conj ret (first s_)))\n      (next s_) (recur (next s_) n ret)\n      :else (into '() ret))))", "problem": 33, "user": "4f050dec535dcb61093f6bef"}, {"code": "(fn [coll num]\n  (reduce\n    #(into %1 (apply list (repeat num %2)))\n    ()\n    (reverse coll)))", "problem": 33, "user": "4f036c4b535dcb61093f6ab9"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4f04b66b535dcb61093f6bdd"}, {"code": "(fn [c n] (mapcat #(repeat n %) c))", "problem": 33, "user": "4f0891a2535dcb61093f6c3b"}, {"code": "#(apply (partial mapcat list) (repeat %2 %1))", "problem": 33, "user": "4f06dcad535dcb61093f6c16"}, {"code": "#(if (= %2 1)\n   %1\n   (apply interleave (replicate %2 %1)))", "problem": 33, "user": "4f039bbe535dcb61093f6b39"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4f038499535dcb61093f6b09"}, {"code": "(fn [in-seq in-n] \n  (loop [local-seq in-seq out-seq '()]\n    (if (empty? local-seq) out-seq\n      (recur (rest local-seq) \n             (concat out-seq (repeat in-n (first local-seq)))))))", "problem": 33, "user": "4ef4ab95535dced4c769f23b"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4f0a4e7e535d0136e6c222f4"}, {"code": "(fn my-replicate [coll num]\n  (if (= 1 num)\n    coll\n    (let [c (repeat num coll)]\n      (apply interleave c))))", "problem": 33, "user": "4e95a440535dbda64a6f6b37"}, {"code": "(fn [s n]\n  (for [ss s x (range n)]\n    ss\n    )\n)", "problem": 33, "user": "4f082ad1535dcb61093f6c32"}, {"code": "(fn [coll n] (mapcat #(repeat n %1) coll))", "problem": 33, "user": "4f0b2028535d0136e6c222ff"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4e7e3cc4535db169f9c7970a"}, {"code": "(fn [xs n](mapcat #(repeat n %) xs))", "problem": 33, "user": "4f037bb5535dcb61093f6aec"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4ee67364535d93acb0a6685f"}, {"code": "(fn dupe [coll n]\n  (->> coll\n    (map (fn [x] (repeat n x)))\n         (mapcat identity)))", "problem": 33, "user": "4f07bc41535dcb61093f6c2c"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4f089f1a535dcb61093f6c3c"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4eeaf88f535d93acb0a668a3"}, {"code": "(fn [x y] (apply concat (map #(for [a (range y)] %) x)))", "problem": 33, "user": "4f0ce26c535d0136e6c22312"}, {"code": "(fn [coll n]\n  (if (= n 1) coll\n  (apply interleave (repeat n coll))))", "problem": 33, "user": "4e2d84bf535deb9a81d77f09"}, {"code": "(fn [col rep] (mapcat #(repeat rep %) col))", "problem": 33, "user": "4f03ac2d535dcb61093f6b4a"}, {"code": "#(if (= 1 %2) \r\n   % \r\n   (apply interleave \r\n     (take %2 (iterate identity %))))", "problem": 33, "user": "4ee7d113535d93acb0a6686e"}, {"code": "(fn [xs xtot] (mapcat (partial take xtot) (map repeat xs)))", "problem": 33, "user": "4ef0b523535dced4c769f20e"}, {"code": "(fn [l t] (mapcat #(take t (repeat %)) l))", "problem": 33, "user": "4f0333f6535dcb61093f6a77"}, {"code": "#(mapcat (fn [x] (take %2 (repeat x))) %1)", "problem": 33, "user": "4f0ef874535d0136e6c22328"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4ec1b80c535dfed6da9c6db6"}, {"code": "(fn myRepl\n    ([x y z]\n        (if (empty? x)\n            z\n        (myRepl (rest x) y \n            (concat z ((fn myRep-Char [x y z]\n                (if (= y 0)\n                    z\n                (myRep-Char x (- y 1) (conj z x)))) (first x) y [])))))\n    ([x y] (myRepl x y [])))", "problem": 33, "user": "4f03b3fb535dcb61093f6b52"}, {"code": "(fn replicator [seq1 index]\n  (apply concat\n    (for [x seq1]\n      (repeatedly index (fn [] x)))))", "problem": 33, "user": "4e9a3a03535dbda64a6f6b70"}, {"code": "(fn [s n] (mapcat #(take n (repeat %)) s))", "problem": 33, "user": "4f0446f9535dcb61093f6bb8"}, {"code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "problem": 33, "user": "4f0f174c535d0136e6c22330"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "4ebcb8ff535dfed6da9c6d8a"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "4f048f67535dcb61093f6bd3"}, {"code": "#(loop [x %1 times %2 result []]\n     (if (nil? (first x))\n\t     result\n\t     (recur (rest x) times (loop [n times r result] (if (= n 0) r (recur (dec n) (conj r (first x))))))))", "problem": 33, "user": "4f066916535dcb61093f6c10"}, {"code": "(fn [ls n] \n  (seq \n    (reduce \n      #(letfn \n        [(conjrec [i result item] \n          (if (= i 0) \n            result \n            (conjrec (dec i) (conj result item) item)\n          )\n        )] \n        (conjrec n %1 %2)\n      ) \n     [] ls)\n  )\n)", "problem": 33, "user": "4ef60a02535dced4c769f24b"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4f10175e535d64f603146411"}, {"code": "(fn rep \n  [x n]\n  (reduce concat ()\n    (map #(repeat n %) x\n    )\n  )\n)", "problem": 33, "user": "4f0df199535d0136e6c2231e"}, {"code": "(fn repl [s n]                                                                                                                                           \n           (if (seq s)                                                                                                                                          \n               (let [ [f & r] s]                                                                                                                                \n                    (concat (repeat n f) (repl r n)))                                                                                                           \n               s))", "problem": 33, "user": "4e4be570535dc968683fc4d8"}, {"code": "(fn [coll x] (reduce concat (map #(take x (repeat %)) coll)))", "problem": 33, "user": "4f0e995e535d0136e6c22326"}, {"code": "#(if (> %2 1)\n  (apply interleave (repeat %2 %))\n  %)", "problem": 33, "user": "4f1052b9535d64f603146418"}, {"code": "(fn [seq n] (mapcat #(repeat n %1) seq))", "problem": 33, "user": "4eecc9ad535d93acb0a668b4"}, {"code": "(fn dup [seq n] (reduce \n  (fn [acc e] ((fn inner [acc i] (if (= i 1) \n                                    (conj acc e) \n                                    (inner (conj acc e) (- i 1))))\n      acc n))\n\n[] seq))", "problem": 33, "user": "4f13047d535d64f60314642c"}, {"code": "(fn [se times]\n  (let [f (fn [res se x]\n    (cond\n      (= (count se) 0) res\n      (= x 0) (recur res (rest se) times)\n      (> x 0) (recur (conj res (first se)) se (- x 1))))]\n   (f [] se times)))", "problem": 33, "user": "4f12ab23535d64f603146429"}, {"code": "#(loop [n 0, r '()]\n  (if (= (count %1) n)\n      r\n      (recur (inc n) (concat r (repeat %2 (nth %1 n))))))", "problem": 33, "user": "4f038567535dcb61093f6b0c"}, {"code": "(fn [x n] (reduce #(concat %1 (repeat n %2) ) [] x))", "problem": 33, "user": "4f03bf5e535dcb61093f6b5d"}, {"code": "(fn [ li num ] ( reduce #( concat %1 (repeat num %2)) [] li  ))", "problem": 33, "user": "4f030775535dcb61093f6a43"}, {"code": "#(if (= %2 1) % (apply interleave (repeat %2 %)))", "problem": 33, "user": "4ede361a535d10e5ff6f5332"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4f1473eb535d64f603146439"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4f149e0f535d64f60314643d"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4f14fbec535d64f603146440"}, {"code": "(fn [coll num]\n    (if (= num 1)\n        coll\n        (apply interleave (replicate num coll))))", "problem": 33, "user": "4f128865535d64f603146428"}, {"code": "(fn [s c] (\n  reduce #(concat %1 (repeat c %2)) [] s\n))", "problem": 33, "user": "4f1595da535d64f603146444"}, {"code": "(fn [i c] (mapcat #(repeat c %) i))", "problem": 33, "user": "4f0e4ebd535d0136e6c22322"}, {"code": "#(if (= 1 %2) % (apply interleave (repeat %2 %)))", "problem": 33, "user": "4f0f9df7535d0136e6c22342"}, {"code": "(fn [x y]\n  (if (= y 1)\n    x\n    (apply interleave (repeat y x))))", "problem": 33, "user": "4e570b60535d8a8b8723a286"}, {"code": "(fn replicate [coll n]\n  (loop [coll coll, acc [], c 0, n n]\n    (if (empty? coll)\n      acc\n      (if (< c n)\n        (recur coll (conj acc (first coll)) (inc c) n)\n        (recur (rest coll) acc 0 n)))))", "problem": 33, "user": "4f159ea6535d64f603146445"}, {"code": "#(apply concat (map (partial repeat %2) %))", "problem": 33, "user": "4f0c84ce535d0136e6c2230e"}, {"code": "(fn [c n] (\n  (fn myDup [data num result]\n    (if (= (count data) 0)\n      result\n      (myDup\n        (rest data)\n        num\n        ((fn termDup [term cnt accum]\n          (if (= cnt 0)\n            accum\n            (termDup\n              term\n              (dec cnt)\n              (conj accum term)\n            )\n          )\n        ) (first data) n result)\n      )\n    )\n  ) c n []\n))", "problem": 33, "user": "4f16d6ed535d64f60314644f"}, {"code": "(fn [xs c] \n  (apply concat\n    (map #(repeat c %) xs)))", "problem": 33, "user": "4e6b6294535d8ccf87e9ff11"}, {"code": "(fn [x y]\n  (mapcat (fn [a] (repeat y a)) x))", "problem": 33, "user": "4f16d3fd535d64f60314644e"}, {"code": "(fn [v, n]\n    (reduce \n      (fn [acc, t]\n        (concat acc (repeat n t))) () v))", "problem": 33, "user": "4edffe54535d10e5ff6f5347"}, {"code": "(fn [x y]\n  (let [id (fn [arg] arg)\n        copy (fn [what how-many]\n               (take how-many (iterate #(id %) what)))\n        merge (fn [l1 l2]\n                (loop [acc (reverse l1)\n                       todo l2]\n                  (if (empty? todo)\n                    (reverse acc)\n                    (recur (conj acc (first todo)) (rest todo)))))]\n    (reduce merge (map #(copy % y) x))))", "problem": 33, "user": "4f08a8a2535dcb61093f6c3d"}, {"code": "(fn my-replicate [s n]\n  (reduce #(concat %1 (repeat n %2)) () s))", "problem": 33, "user": "4f0f40d3535d0136e6c2233b"}, {"code": "(fn [x y] (reduce concat (map #(repeat y %) x)))", "problem": 33, "user": "4ea09441535d7eef308072a7"}, {"code": "(fn [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "4f1b92d1535d64f60314647b"}, {"code": "(fn [s n]\n  (apply concat\n    (map (partial repeat n) s)))", "problem": 33, "user": "4f1b0ab3535d64f603146474"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4e8ccd16535d65386fec212e"}, {"code": "(fn [list count] (reduce concat '() (map #(take count (repeat %)) list)))", "problem": 33, "user": "4f16ef8a535d64f603146451"}, {"code": "#(reverse (loop [i (dec (count %1)) result []]\n  (if (= i -1)\n    result\n    (recur (dec i) \n           (concat result (repeat %2 (nth % i)) )\n    )\n  )\n) )", "problem": 33, "user": "4ea31da2535d7eef308072c1"}, {"code": "(fn replicate [s n]\n    (loop [s s acc '()]\n      (if (empty? s) acc\n          (recur (rest s)\n                 (concat acc (repeat n (first s))))))\n    )", "problem": 33, "user": "4f16213f535d64f603146449"}, {"code": "(fn [coll times] \n  (mapcat \n    #(repeat times %) coll))", "problem": 33, "user": "4f1e5ce5535d64f603146497"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "4f0c4518535d0136e6c2230b"}, {"code": "#(apply mapcat list (repeat %2 %1))", "problem": 33, "user": "4e7d1c22535db169f9c796c5"}, {"code": "(fn [s n] (apply concat (for [e s] (repeat n e))))", "problem": 33, "user": "4f03ebf7535dcb61093f6b7f"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4f0d093b535d0136e6c22313"}, {"code": "#(mapcat repeat (repeat %2) %1)", "problem": 33, "user": "4f169a0f535d64f60314644c"}, {"code": "(fn [lst n] (mapcat (fn [x] (repeat n x)) lst))", "problem": 33, "user": "4f1fd734535d64f6031464a5"}, {"code": "(fn [z i] (mapcat (fn [x] (repeat i x)) z))", "problem": 33, "user": "4f1d1299535d64f603146487"}, {"code": "(fn [lis n]\n  (if (<= n 1)\n    lis\n  (apply interleave (repeat n lis) )\n    )\n)", "problem": 33, "user": "4f2004a1535d64f6031464a7"}, {"code": "(fn [coll n]\n  (mapcat (fn [x] (take n (cycle [x]))) coll))", "problem": 33, "user": "4f1c2a3a535d64f603146480"}, {"code": "(fn [x y] (mapcat #(take y (repeat %)) x))", "problem": 33, "user": "4f032f30535dcb61093f6a73"}, {"code": "(fn [s n] (apply concat (map #(repeat n %) s)))", "problem": 33, "user": "4f215350e4b0d66497709fd0"}, {"code": "(fn [theSeq number-of-replications]\n    (letfn [\n    (replicateIt [aSeq number-of-items resultSeq]\n      (if (empty? aSeq)\n          (reverse resultSeq)\n\t  (recur (rest aSeq) number-of-items (addItems (first aSeq) number-of-items resultSeq))))\n\n\n\t  (addItems [item number-of-times resultSeq]\n\t        (if (= 0 number-of-times)\n      \t  \tresultSeq\n\t\t (recur item (dec number-of-times) (cons item resultSeq))))]\n\t\t ( replicateIt theSeq number-of-replications '())))", "problem": 33, "user": "4f1c2336535d64f60314647f"}, {"code": "(fn [lst x]\n(reverse \n  (reduce into \n          (map (fn [y] \n                 (repeat x y)) \n               lst))))", "problem": 33, "user": "4f00e9c7535dcb61093f6a33"}, {"code": "(fn [l n] (reduce (fn [x r] (apply conj x (repeat n r))) [] l))", "problem": 33, "user": "4eb02674535d7eef30807338"}, {"code": "(fn [a b] (mapcat #(repeat b %) a))", "problem": 33, "user": "4f1c9652535d64f603146483"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4e6961f0535d8ccf87e9fe9b"}, {"code": "(fn [coll, n] \n  (mapcat \n    #(repeat n %)\n    coll))", "problem": 33, "user": "4f1abbfb535d64f60314646e"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4f251302e4b0d66497709ff0"}, {"code": "#(if (= 1 %2) %1\n(apply interleave (take %2 (repeat %1))))", "problem": 33, "user": "4e4ea0f6535dc968683fc4e6"}, {"code": "(fn [x y] (apply concat (map (fn [x] (repeat y x)) x)))", "problem": 33, "user": "4ee88f29535d93acb0a66882"}, {"code": "(fn [lst x]  (reduce into (reverse (map #(take x (repeat %)) lst)  )) )", "problem": 33, "user": "4f1684c7535d64f60314644b"}, {"code": "(fn [lst n]\n  (mapcat \n    (fn [x] (map (fn [y] x) (range 0 n)))\n   lst))", "problem": 33, "user": "4f032cb1535dcb61093f6a70"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4f294c48e4b0d6649770a023"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4f26d6d9e4b0d6649770a007"}, {"code": "#(loop [j %1 l []] \r\n       (if (>= (count j) 1) \r\n             (recur (next j) (concat l (repeat %2 (first j))) ) \r\n             l     \r\n       ) \r\n   )", "problem": 33, "user": "4f28d266e4b0d6649770a01c"}, {"code": ";(fn [x y]\n;  (mapcat #(take y (cycle (list %))) x))\n\n(fn [x y]\n  (mapcat #(repeat y %) x))", "problem": 33, "user": "4f07c8c3535dcb61093f6c2d"}, {"code": "(fn [l n] (mapcat #(repeat n % ) l))", "problem": 33, "user": "4f280840e4b0d6649770a010"}, {"code": "(fn [mylist times] \n    (reduce (fn [ret arg] (concat ret (repeat times arg))) [] mylist)\n)", "problem": 33, "user": "4f2965ffe4b0d6649770a029"}, {"code": "(fn [sq, cnt] (mapcat #(repeat cnt %) sq))", "problem": 33, "user": "4f21838fe4b0d66497709fd2"}, {"code": "(fn [c n] (mapcat #(repeat n %) c))", "problem": 33, "user": "4f18677d535d64f603146459"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4e8ad247535d65386fec2111"}, {"code": "(fn [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "4f2a35ace4b0d6649770a03a"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4f29cdc8e4b0d6649770a033"}, {"code": "(fn [coll n]\n  (loop [res []\n         c coll\n         m n]\n    (let [e (first c)\n          r (rest c)]\n            (cond\n              (nil? e) res\n              (= 0 m) (recur res r n)\n              :else (recur (conj res e) c (dec m))))))", "problem": 33, "user": "4f230dfbe4b0d66497709fe0"}, {"code": "(fn [x y] (reduce #(concat %1 (repeat y %2)) [] x))", "problem": 33, "user": "4f2c593ee4b0d6649770a053"}, {"code": "(fn [s n] (loop [s s r []] (if (empty? s) r (recur (rest s) (into r (repeat n (first s)))))))", "problem": 33, "user": "4f0cc259535d0136e6c22310"}, {"code": "(fn [c r] (mapcat #(repeat r %) c))", "problem": 33, "user": "4f1d1d95535d64f603146488"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4e48b61d535dc968683fc4be"}, {"code": "(fn [s n] (mapcat #(for [i (range 0 n)] %) s))", "problem": 33, "user": "4f0f01c0535d0136e6c22329"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4f2ef48be4b0d6649770a06c"}, {"code": "#(for [x %1 y (range %2)] x)", "problem": 33, "user": "4e46e48b535dc968683fc4b7"}, {"code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "problem": 33, "user": "4f301d02e4b0d6649770a072"}, {"code": "(fn [seq n] (mapcat (fn [x] (repeat n x)) seq ))", "problem": 33, "user": "4f2893d0e4b0d6649770a019"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4e6799cc535d8ccf87e9fe7f"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4e6a5a32535d8ccf87e9fed0"}, {"code": "(fn replicate-seq [s n]\n  (lazy-seq\n    (when (seq s)\n      (concat (repeat n (first s))\n              (replicate-seq (rest s) n)))))", "problem": 33, "user": "4f28c979e4b0d6649770a01a"}, {"code": "(fn my-replicate [coll n]\n  (mapcat #(take n (repeat %)) coll))", "problem": 33, "user": "4f04d312535dcb61093f6be7"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4f2de7e9e4b0d6649770a061"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "4ee1f2ba535d10e5ff6f535f"}, {"code": "(fn [s n]\n  (reduce\n   (fn [a b]\n     (into a (repeat n b)))\n   '[] s))", "problem": 33, "user": "4f31519ae4b0d6649770a086"}, {"code": "(fn [x n](reduce concat (map (partial repeat n) x)))", "problem": 33, "user": "4eeb8f68535d93acb0a668a9"}, {"code": "(fn [l n] (mapcat (fn [x] (repeat n x)) l))", "problem": 33, "user": "4f2f6678e4b0d6649770a06e"}, {"code": "#(mapcat (fn [x] (take %2 (repeat x))) %1)", "problem": 33, "user": "4f32a7f1e4b0d6649770a095"}, {"code": "(fn this\n  ([xs n] (this xs n []))\n  ([[hd & tl :as xs] n acc]\n    (if (empty? xs)\n      acc\n      (recur tl n (into acc (repeat n hd))))))", "problem": 33, "user": "4f2e0369e4b0d6649770a064"}, {"code": "(fn [s n]\n  (apply concat (map #(repeat n %) s)))", "problem": 33, "user": "4f2b0951e4b0d6649770a045"}, {"code": "(fn [s n] (apply concat (map #(repeat n %) s)))", "problem": 33, "user": "4f036d18535dcb61093f6abe"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4dc1bd76535d020aff1edf8d"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4e36e647535deb9a81d77f36"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4f341320e4b0e243712b1eb4"}, {"code": "#(if (= 1 %2) %1 (apply interleave (repeat %2 %1)))", "problem": 33, "user": "4ea84250535d7eef308072f5"}, {"code": "(fn [sek n]\n  (mapcat #(repeat n %) sek))", "problem": 33, "user": "4eb9353f535dfed6da9c6d4e"}, {"code": "#(apply concat (for [x %1] (repeat %2 x)))", "problem": 33, "user": "4f31ad57e4b0d6649770a089"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "4ef47f0f535dced4c769f235"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4f2582bae4b0d66497709ff6"}, {"code": "#(if (= %2 1) % (apply interleave (repeat %2 %)))", "problem": 33, "user": "4f312c35e4b0d6649770a084"}, {"code": "(fn [c n] (reduce (fn [a x] (concat a (take n (cycle (list x))))) [] c))", "problem": 33, "user": "4f34eb87e4b0e243712b1eba"}, {"code": "(fn [l n] \n  (apply concat (map #(replicate n %) l)))", "problem": 33, "user": "4f37422ee4b0e243712b1ed2"}, {"code": "#(for [x % y (repeat %2 x)] y)", "problem": 33, "user": "4ef48422535dced4c769f236"}, {"code": "(fn [s n]\r\n  (reverse (reduce (fn [xs x]\r\n                     ((fn [xs n]\r\n                        (if (zero? n)\r\n                          xs\r\n                          (recur (cons x xs) (dec n)))) xs n)) nil s)))", "problem": 33, "user": "4f359c7ee4b0e243712b1ec4"}, {"code": "(fn [sq times] (mapcat (partial repeat times) sq))", "problem": 33, "user": "4f35e662e4b0e243712b1ec6"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4f2c2ccbe4b0d6649770a050"}, {"code": "#(loop [acc [] l (seq %1)]\n  (if (empty? l)\n    acc\n    (let [s (take %2 (repeat (first l)))]\n      (recur (concat acc s) (rest l)))))", "problem": 33, "user": "4f141dee535d64f603146434"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4e8fb386535d65386fec2150"}, {"code": "(fn r [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4f39f902e4b0e243712b1efe"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4efd8b67535de96065cf5085"}, {"code": "(fn [coll, n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "4f378631e4b0e243712b1ed3"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4f3444b7e4b0e243712b1eb6"}, {"code": "#(reduce concat (for [e %1] (repeat %2 e)))", "problem": 33, "user": "4f1bee08535d64f60314647e"}, {"code": "(fn [t m]\n((fn rep [s n result]\n  (if (empty? s) result\n    (rep (butlast s) n (into result (repeat n (last s)))))) t m '()))", "problem": 33, "user": "4f3242bae4b0d6649770a08f"}, {"code": "(fn [s n] (mapcat #(take n (cycle [%])) s))", "problem": 33, "user": "4f15de56535d64f603146448"}, {"code": "(fn [sequence n](loop[ sqnc sequence result [] ]\n                  (if (empty? sqnc)\n                      result\n                      (recur (rest sqnc)\n                             (vec (concat result (repeat n (first sqnc))))))))", "problem": 33, "user": "4f2aff4de4b0d6649770a044"}, {"code": "(fn [coll n]\n  (reduce #(loop [r %\n                  v %2\n                  i 0]\n                  (if (= i n) r\n                    (recur (conj r v) v (inc i)))) [] coll))", "problem": 33, "user": "4f38d6bbe4b0e243712b1ee2"}, {"code": "(fn [s n] (apply concat (map #(take n (repeat %)) s)))", "problem": 33, "user": "4f36f5f2e4b0e243712b1ece"}, {"code": "(fn [s, n]\n  (mapcat (partial repeat n) s))", "problem": 33, "user": "4f29eb2ae4b0d6649770a037"}, {"code": "(fn [col count] (mapcat #(repeat count %) col))", "problem": 33, "user": "4ec6f4ee535d6d7199dd36dc"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4ddbf54e535d02782fcbe9ff"}, {"code": "#(for [x %, t (range %2)] x)", "problem": 33, "user": "4f3cc2fbe4b0e243712b1f55"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4e372223535deb9a81d77f39"}, {"code": "(fn [seq, times]\n  (reduce \n    (fn [result, item] \n      (concat result (repeat times item))) '() seq))", "problem": 33, "user": "4f03396d535dcb61093f6a7b"}, {"code": "(fn \n  [x n & acc]\n  (if (empty? x) acc\n      (recur (rest x) n \n(concat acc (for [el (range n)] (first x))))))", "problem": 33, "user": "4f343e60e4b0e243712b1eb5"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4e1b8106535d04ed9115e801"}, {"code": "(fn dup [s n]\n(if (empty? s) ()\n(concat (repeat n (first s)) (dup (rest s) n))))", "problem": 33, "user": "4f418eaee4b0d7d3c9f3fce9"}, {"code": "(fn rrrr [x y] (mapcat #(repeat y %) x))", "problem": 33, "user": "4f4003d9e4b0e243712b1fa5"}, {"code": "(fn [c n] (mapcat #(take n (iterate identity %)) c))", "problem": 33, "user": "4ef77edb535dced4c769f254"}, {"code": ";; apply is nodig omdat de functie er na substitutie zo uit moet zien:\n;;\n;; #(mapcat list [1 2 3] [1 2 3]) \n;;\n;; en niet zo:\n;;\n;; #(mapcat list ([1 2 3] [1 2 3]))\n;;\n#(apply mapcat list (repeat %2 %1))", "problem": 33, "user": "4f17df72535d64f603146458"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4f4274f2e4b0d7d3c9f3fd00"}, {"code": "#(mapcat (fn [p] (replicate %2 p)) %1)", "problem": 33, "user": "4f426a7ae4b0d7d3c9f3fcff"}, {"code": "(fn [s n]\n  (reduce into [] (map #(repeat n %) s)))", "problem": 33, "user": "4dcd2065535d5973398f929a"}, {"code": "(fn [x n]\n  (reduce concat (map (fn [item] (repeat n item)) x))\n  )", "problem": 33, "user": "4f3e05a8e4b0e243712b1f79"}, {"code": "(fn repl [xs n]\n  (mapcat #(repeat n %) xs))", "problem": 33, "user": "4f065217535dcb61093f6c0c"}, {"code": "(fn [col n] (mapcat #(take n (repeat %)) col))", "problem": 33, "user": "4f3e2fbbe4b0e243712b1f7e"}, {"code": "(fn [s n]\n    (reverse\n      ((fn [s k a]\n            (if (empty? s)\n                a\n                (if (= k 1)\n                    (recur (rest s) n (cons (first s) a))\n                    (recur s (dec k) (cons (first s) a)))\n            ))\n        s n ())))", "problem": 33, "user": "4f404dcee4b0e243712b1fb0"}, {"code": "(fn [lst num]\n (mapcat (partial replicate num) lst))", "problem": 33, "user": "4f06f953535dcb61093f6c1c"}, {"code": "(fn [s n] [s n] (mapcat #(repeat n (identity %)) s))", "problem": 33, "user": "4f282da7e4b0d6649770a013"}, {"code": "(fn [col n]\r\n  (reverse (reduce #(apply conj %1 (repeat n %2)) '() col)))", "problem": 33, "user": "4f0da4e4535d0136e6c22319"}, {"code": "#(apply concat (for [x %1] (take %2 (repeat x))))", "problem": 33, "user": "4f4544e1e4b0d56e7bb92b7a"}, {"code": "(fn [xs n] (mapcat (partial repeat n) xs))", "problem": 33, "user": "4f46bc41e4b0d56e7bb92ba5"}, {"code": "(fn [col n]\n  (if (= n 1)\n    col\n    (apply interleave (take n (repeat col)))))", "problem": 33, "user": "4f382eb7e4b0e243712b1ed9"}, {"code": "#(letfn [(worker-child [x1 s n]\r\n           (if (zero? s)\r\n             n\r\n             (recur x1 (dec s) (conj n x1))))\r\n         (worker [x s n]\r\n           (if (empty? x)\r\n             n\r\n             (recur (rest x) s (worker-child (first x) s n))))]\r\n(worker %1 %2 []))", "problem": 33, "user": "4f474f43e4b0d56e7bb92bb7"}, {"code": "(fn [c n] (mapcat #(repeat n %) c))", "problem": 33, "user": "4f38b7d9e4b0e243712b1ee0"}, {"code": "#(apply mapcat list (repeat %2 %1))", "problem": 33, "user": "4f2baf1ae4b0d6649770a04c"}, {"code": "(fn [l n]\n  (apply concat (map #(repeat n %) l)))", "problem": 33, "user": "4f3c772de4b0e243712b1f4c"}, {"code": "#(reduce into () (map (fn [x] (reduce conj () (map (constantly x) (range %2)))) (reverse %1)))", "problem": 33, "user": "4f4a34b2e4b0d56e7bb92c09"}, {"code": "(fn [x n]\n   (mapcat (fn [y] (repeat n y)) x))", "problem": 33, "user": "4f40f055e4b0e243712b1fc2"}, {"code": "#(mapcat (fn [i] (apply list (repeat %2 i))) %)", "problem": 33, "user": "4f4319ebe4b0d7d3c9f3fd13"}, {"code": "(fn [seq n]\n  (apply concat (map #(repeat n %) seq)))", "problem": 33, "user": "4f4ac35ae4b0d56e7bb92c18"}, {"code": "(fn [coll rep] \n  (reduce (fn [x y] (concat x (repeat rep y))) '() coll))", "problem": 33, "user": "4f2acb29e4b0d6649770a040"}, {"code": "(fn [coll n] (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "4f4ba29ae4b03ad3f0c10c7a"}, {"code": "(fn dupn [v x & {:keys [acc] :or {acc '()}}]\n            (let [curr (first v)\n                  rest (rest v)\n                  newacc (concat acc\n                                 (take x (repeat curr)))]\n              (println \"acc:\" acc \"newacc:\" newacc \"rest:\" rest)\n              (if (> (count rest) 0)\n                (dupn rest x :acc newacc)\n                newacc)))", "problem": 33, "user": "4f2f7e87e4b0d6649770a06f"}, {"code": "(fn [xs n]\n  (mapcat #(repeat n %) xs))", "problem": 33, "user": "4f49e869e4b0d56e7bb92c02"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4f3543eee4b0e243712b1ebd"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4f03ba9c535dcb61093f6b58"}, {"code": "#(apply mapcat list (replicate %2 %1))", "problem": 33, "user": "4ed2918f535d44c135fd68d8"}, {"code": "(fn [coll n] (reduce (fn [a e] (concat a (repeat n e))) [] coll))", "problem": 33, "user": "4f3ec266e4b0e243712b1f8c"}, {"code": "(fn f [s n]\n  (if (seq s)\n  (concat (repeat n (first s)) (f (rest s) n))\n[]))", "problem": 33, "user": "4f3e5e87e4b0e243712b1f83"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4f17ab99535d64f603146457"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "4f4c8faae4b03ad3f0c10c93"}, {"code": "(fn [s c] (reduce #(concat %1 (repeat c %2)) [] s))", "problem": 33, "user": "4f4a5ca6e4b0d56e7bb92c0f"}, {"code": "#(apply concat (map (partial repeat %2) %1))", "problem": 33, "user": "4f4e7c01e4b03ad3f0c10cc9"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4f4f0287e4b03ad3f0c10cd7"}, {"code": "(fn dup-seq\r\n  ([chain k] (dup-seq chain [] k))\r\n  ([chain result k]\r\n    (if (empty? chain)\r\n        result\r\n        (dup-seq (rest chain)\r\n                 (concat result\r\n                 (replicate k (first chain)))\r\n                  k))))", "problem": 33, "user": "4f4e4ecbe4b03ad3f0c10cbf"}, {"code": "(fn [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "4f4e91a9e4b03ad3f0c10cca"}, {"code": "(fn mult[sequence, times]\n  (loop [ ret [] s sequence]\n    ( if (seq s) (recur \n                   (loop [n times ret ret] \n                     (if (zero? n) ret \n                       (recur (dec n) (conj ret (first s))))) \n                   (rest s))\n      ret)))", "problem": 33, "user": "4f4c6b21e4b03ad3f0c10c8f"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4f4fac2ae4b03ad3f0c10ce5"}, {"code": "#(for [x %1 y (repeat %2 x)] y)", "problem": 33, "user": "4f047177535dcb61093f6bc6"}, {"code": "#(mapcat (fn [i] (repeat %2 i)) %1)", "problem": 33, "user": "4f3e6244e4b0e243712b1f85"}, {"code": "(fn [coll n] (mapcat (partial repeat n) coll))", "problem": 33, "user": "4f4fbed7e4b03ad3f0c10ce8"}, {"code": "(fn foo [coll n]\n  (if (= n 1) coll\n              (apply interleave (repeat n coll))))", "problem": 33, "user": "4f50c414e4b03ad3f0c10d0d"}, {"code": "(fn [lst times] \n  (reduce concat \n    (map #(repeat times %1) lst)))", "problem": 33, "user": "4f4a8707e4b0d56e7bb92c12"}, {"code": "#(if (= 1 %2) \n  %1 \n  (apply interleave (take %2 (cycle [%1]))))", "problem": 33, "user": "4db2f208535df7e46ed9b6c9"}, {"code": "(fn [list n]\n  (mapcat \n    (fn [x]\n      (take n (repeat x))) list))", "problem": 33, "user": "4f4f08c8e4b03ad3f0c10cd8"}, {"code": "(fn [col multiplier]\n       (if (= multiplier 1)\n   col\n\t (apply interleave (replicate multiplier col))))", "problem": 33, "user": "4eae2f9e535d7eef30807324"}, {"code": "(fn replicate [col n]\n  (mapcat #(repeat n %) col))", "problem": 33, "user": "4db8d37d535d1e037afb219c"}, {"code": "(fn [x i]\r\n  (if (= 1 i)\r\n    x\r\n    (apply interleave \r\n      (take i (partition (count x) (cycle x))))))", "problem": 33, "user": "4f410b63e4b0e243712b1fc5"}, {"code": "(fn [seq n] (apply concat (map (partial repeat n) seq)))", "problem": 33, "user": "4f4ff5a8e4b03ad3f0c10cf3"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4f0404df535dcb61093f6b91"}, {"code": "(fn replicate\n  [lst n]\n  (apply concat (map #(repeat n %) lst)))", "problem": 33, "user": "4f25c4c4e4b0d66497709ffc"}, {"code": "(fn [sequence times] (reduce (fn [a e] (apply conj a (repeat times e))) [] sequence))", "problem": 33, "user": "4f4afb1fe4b0d56e7bb92c21"}, {"code": "#(mapcat (fn[x](repeat %2 x)) %1)", "problem": 33, "user": "4f542fd9e4b0a7574ea717db"}, {"code": "(fn reps [xs n]\n(reduce concat (map #(repeat n %) xs)))", "problem": 33, "user": "4f51e8a4e4b03ad3f0c10d2d"}, {"code": "(fn [xs n] ( reverse (reduce #(concat (repeat n %2) %1) '() xs)))", "problem": 33, "user": "4ed60c9c535d10e5ff6f52dd"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4f554416e4b0a7574ea717f9"}, {"code": "(fn [s n] (apply concat (map #(repeat n %) s)))", "problem": 33, "user": "4f569218e4b0a7574ea71826"}, {"code": "#(if(> %2 1) (apply interleave (take %2 (iterate concat %1))) %1)", "problem": 33, "user": "4f46df00e4b0d56e7bb92bac"}, {"code": "(fn repl [x n]\n  (if (empty? x) nil\n\t(concat (take n (cycle (list (first x)))) (repl (rest x) n))))", "problem": 33, "user": "4f566178e4b0a7574ea71820"}, {"code": "(fn [s n] (apply concat (map (fn [i] (take n (repeat i))) s)))", "problem": 33, "user": "4f5694cae4b0a7574ea71827"}, {"code": "#(mapcat (fn [s] (repeat %2 s)) %1)", "problem": 33, "user": "4f567cdbe4b0a7574ea71824"}, {"code": "(fn [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "4f4e6d21e4b03ad3f0c10cc5"}, {"code": "(fn [s n] \n  (mapcat #(repeat n %) s))", "problem": 33, "user": "4f45c72be4b0d56e7bb92b8a"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %)", "problem": 33, "user": "4f3c0734e4b0e243712b1f3c"}, {"code": "(fn [seq,n] (mapcat #(repeat n %) seq))", "problem": 33, "user": "4e8b1fa2535d65386fec2118"}, {"code": "(fn [x c] (mapcat #(repeat c %) x))", "problem": 33, "user": "4f580a9fe4b0a7574ea71844"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4f528bcde4b03ad3f0c10d3e"}, {"code": "(fn [coll n]\r\n  (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "4f54e6f8e4b0a7574ea717ef"}, {"code": "(fn [coll n]\r\n  (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "4f50be5de4b03ad3f0c10d0c"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4f569a3ce4b0a7574ea71828"}, {"code": "(fn replicate [lat n]\r\n  (reduce concat (map #(take n (repeat %)) lat)))", "problem": 33, "user": "4f500769e4b03ad3f0c10cf8"}, {"code": "(fn [coll n]\r\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4f4feb95e4b03ad3f0c10cf0"}, {"code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "4f4be1cae4b03ad3f0c10c81"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4f507682e4b03ad3f0c10d05"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "problem": 33, "user": "4f58de86e4b0a7574ea7185b"}, {"code": "(fn [s n]\n  (reduce\n    (fn [target source]\n      (apply conj target (repeat n source)))\n    []\n    s))", "problem": 33, "user": "4f5c0549e4b0030a34fb2b1a"}, {"code": "#(letfn [(_rep_\n          [coll repcoll]\n          (if (empty? coll)\n            repcoll\n            (recur (rest coll)\n                   (concat repcoll\n                           (take %2 (iterate identity (first coll)))))))]\n        (_rep_ %1 '()))", "problem": 33, "user": "4f5cc3b8e4b0030a34fb2b2b"}, {"code": "(fn rep [lst cnt]\n  (mapcat (partial repeat cnt) lst)\n)", "problem": 33, "user": "4e5fdd68535d8ccf87e9fe4f"}, {"code": "(fn prep [x y] (cond\n                  (empty? x) ()\n                  :else (concat (take y (cycle (list (first x))) )\n                                (prep (rest x) y))))", "problem": 33, "user": "4f524d11e4b03ad3f0c10d34"}, {"code": "(fn [s n]\n  (mapcat (partial repeat n) s))", "problem": 33, "user": "4f54ecf1e4b0a7574ea717f0"}, {"code": "(fn[coll n] \n  (apply concat (map (fn[x] (repeat n x)) coll)))", "problem": 33, "user": "4e53bf5e535d8a8b8723a275"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4eca2cea535d6d7199dd3702"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4f504739e4b03ad3f0c10d00"}, {"code": "(fn [x n] (apply concat (map #(repeat n %) x)))", "problem": 33, "user": "4dd9d299535d2dad7130b5dd"}, {"code": "(fn [s n]\n  (loop [output []\n         prev   nil\n         remain s\n         c      0]\n   (do \n\n    (if (empty? remain) \n        output\n        (if (>= c n)\n            (recur output nil (rest remain) 0)\n            (let [fst (if (nil? prev) (first remain) prev)]\n              (recur (concat output [fst]) fst remain (inc c))))))))", "problem": 33, "user": "4f036fb3535dcb61093f6ac8"}, {"code": "(fn [lst rfactor]\r\n  (apply concat (map #(repeat rfactor %) lst)))", "problem": 33, "user": "4f60ed88e4b0defedf855fb2"}, {"code": "(fn [s c]\n  (mapcat (fn [x] (repeat c x)) s))", "problem": 33, "user": "4f604bdee4b0defedf855fa7"}, {"code": "(fn [s n]\n  (apply concat (map #(repeat n %) s)))", "problem": 33, "user": "4f03fb59535dcb61093f6b89"}, {"code": "#(for [x %1 y (range 1 (+ %2 1))] x)", "problem": 33, "user": "4f4ec77ae4b03ad3f0c10cd0"}, {"code": "(fn [l v] (mapcat #(repeat v %) l))", "problem": 33, "user": "4f614976e4b0defedf855fbb"}, {"code": "(fn [x y] (mapcat #(take y(repeat %)) x))", "problem": 33, "user": "4f57a153e4b0a7574ea7183a"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4f6160a7e4b0defedf855fbe"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "4f5155a3e4b03ad3f0c10d1b"}, {"code": "(fn [xs n]\n  (reduce concat (map (partial replicate n) xs)))", "problem": 33, "user": "4e7f5a0b535db966e863cc41"}, {"code": "#(mapcat (fn [y] (map (fn [x] y) (range %2))) %1)", "problem": 33, "user": "4f565bebe4b0a7574ea7181e"}, {"code": "(fn rep [s n]\n  (if (< n 2)\n      s\n      (apply interleave (repeat n s))))", "problem": 33, "user": "4f611127e4b0defedf855fb4"}, {"code": "(fn r [seq n]\n  (if (empty? seq)\n    '()\n    (concat (repeat n (first seq)) (r (rest seq) n))))", "problem": 33, "user": "4f559d2ce4b0a7574ea71808"}, {"code": "(fn my-replicate [lst n]\r\n  (loop [inp (reverse lst) acc ()]\r\n    (if (empty? inp)\r\n      acc\r\n      (recur (rest inp) (apply conj acc (repeat n (first inp)))))))", "problem": 33, "user": "4f629697e4b0defedf855fd6"}, {"code": "(fn [s n]\n  (loop [in s r '()]\n    (if (empty? in)\n      (reverse r)\n      (recur (rest in) (reduce conj r (repeat n (first in))))\n      )\n    )\n  )", "problem": 33, "user": "4f63777be4b0defedf855fe4"}, {"code": "(fn [s n]\n  (loop [sq s, num n, counter n, res []]\n    (cond\n      (empty? sq) res\n      (= counter 0) (recur (rest sq) num num res)\n      :else \n        (recur \n          sq \n          num \n          (dec counter) \n          (conj res (first sq))))))", "problem": 33, "user": "4f3d83b5e4b0e243712b1f69"}, {"code": "#(if (< (compare (first %) (second %)) 0)(sort (take (* %2 (count %))  (cycle %)))\t(reverse(sort (take (* %2 (count %))  (cycle %)))))", "problem": 33, "user": "4f4bd422e4b03ad3f0c10c7e"}, {"code": "(fn [coll n]\n  (if (= 1 n) coll\n  (apply interleave (partition (count coll)\n                         (take (* (count coll) n) (cycle coll))\n))))", "problem": 33, "user": "4f65eec7e4b07046d9f4ef48"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4f58fe71e4b0a7574ea7185f"}, {"code": "#(if (not= 1 %2)\n(apply interleave %1 (replicate (dec %2) %1))\n(seq %1))", "problem": 33, "user": "4f651f66e4b07046d9f4ef3c"}, {"code": "#(mapcat repeat (repeat %2) %1)", "problem": 33, "user": "4f61be97e4b0defedf855fc5"}, {"code": "(fn [x y] (mapcat #(repeat y %) x))", "problem": 33, "user": "4ed845a8535d10e5ff6f52f8"}, {"code": "(fn [lat n] (reduce concat (map #(take n (repeat %)) lat)))", "problem": 33, "user": "4f5612f9e4b0a7574ea71812"}, {"code": "(fn go [s size]\n  (mapcat\n\t\t\t(fn [x]\n\t\t\t\t(take\n\t\t\t\t\tsize\n\t\t\t\t\t(repeatedly #(identity x))))\n\t\ts))", "problem": 33, "user": "4f442cdfe4b0d7d3c9f3fd34"}, {"code": "(fn [seq n]\n  (apply concat (map #(take n (iterate identity %))\n    seq)))", "problem": 33, "user": "4f62b29ce4b0defedf855fd9"}, {"code": "(fn  [coll x] \n     (mapcat #(take x (repeat %)) coll ))", "problem": 33, "user": "4eb8ec4a535dfed6da9c6d4b"}, {"code": "(fn [c n]\r\n  (cond (zero? n) '()\r\n        (= n 1) c\r\n        :else (apply interleave (repeat n c))))", "problem": 33, "user": "4f6a36eee4b07046d9f4ef99"}, {"code": "#(if (> %2 1) (apply interleave (repeat %2 %)) %)", "problem": 33, "user": "4e1fe7f1535d04ed9115e810"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4f4e147ae4b03ad3f0c10cb9"}, {"code": "(fn [coll, n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "4f6b4237e4b07046d9f4efa9"}, {"code": "(fn rep \n                            ([input n] (rep input n []))\n                            ([input n out]\n                              (if (seq input)\n                                (recur (rest input) n (concat out (repeat n (first input))))\n                                out)))", "problem": 33, "user": "4f608f0ee4b0defedf855faa"}, {"code": "#(loop [result '() x (sequence %1) rpt %2]\r\n   (if (empty? x)\r\n     result\r\n     (recur (concat result (repeat rpt (first x))) (rest x) rpt)\r\n     )\r\n   )", "problem": 33, "user": "4ddc56e1535d02782fcbea04"}, {"code": "(fn [col n]\r\n  (reverse\r\n  (reduce       \r\n      #(loop [result %1,a %2,num 0]\r\n       (if (= num n)\r\n           result           \r\n          (recur (cons a result) a (inc num))\r\n        )\r\n       )\r\n    '()\r\n    col\r\n  )\r\n  )\r\n)", "problem": 33, "user": "4f6d9d7ee4b07046d9f4efcd"}, {"code": "(fn [col n] \n  (reduce #(apply conj %1 (repeat n %2)) \n    [] col))", "problem": 33, "user": "4ef2da4f535dced4c769f224"}, {"code": "#_(fn [a b] (if (= 1 b) a\n(concat (apply interleave\n  (take b (iterate identity a))))))\n\n#_(fn [a b]\n  (reduce #(concat % (repeat b %2))\n    [] a))\n\n#_(fn [a b]\n  (mapcat #(repeat b %) a))\n\n#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4f1bb9d8535d64f60314647d"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4f6688d6e4b07046d9f4ef5d"}, {"code": "#(for [x %, i (range %2)] x)", "problem": 33, "user": "4f6fbb68e4b07046d9f4efeb"}, {"code": "(fn spanky [[x & xs] n]\n  (if (empty? xs)\n    (take n (cycle [x]))\n    (concat (take n (cycle [x])) (spanky xs n))))", "problem": 33, "user": "4f70183ee4b07046d9f4eff3"}, {"code": "(fn [l0 t0]\n    (loop [l l0 t t0 r '()]\n    (cond\n\t   (empty? l) r\n\t   (= 0 t) (recur (rest l) t0 r)\n\t   :else (recur l (dec t) (concat r (list (first l)))))))", "problem": 33, "user": "4f62ef0ce4b0defedf855fdc"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4f4e978ae4b03ad3f0c10ccb"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4f706cc3e4b07046d9f4eff7"}, {"code": "(fn [xs n]\n  (mapcat #(repeat n %) xs))", "problem": 33, "user": "4f6845d2e4b07046d9f4ef74"}, {"code": "(fn [l n]\n  (cond (<= n 0) nil\n        (= n 1) l\n        :else (apply interleave (repeat n l))))", "problem": 33, "user": "4f68c485e4b07046d9f4ef7c"}, {"code": "(fn duplicate-n [sq n]\r\n  (reverse\r\n    (reduce (fn [coll x]\r\n              (if (empty? coll)\r\n                (replicate n x)\r\n                (concat (replicate n x) coll)))\r\n            []\r\n            sq)))", "problem": 33, "user": "4f71db68e4b07046d9f4f015"}, {"code": "(fn [xs n] (reduce #(concat %1 (repeat n %2)) '() xs))", "problem": 33, "user": "4f724e56e4b07046d9f4f027"}, {"code": "(fn dups [coll n]\n  (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "4f726dd2e4b07046d9f4f034"}, {"code": "(fn rep [seq n]\n  (if (empty? seq) '()\n      (let [tailsoln (rep (rest seq) n)]\n        (concat (repeat n (first seq)) tailsoln))))", "problem": 33, "user": "4f70afb8e4b07046d9f4effb"}, {"code": "(fn [l n] (mapcat #(repeat n %) l))", "problem": 33, "user": "4f69f34fe4b07046d9f4ef90"}, {"code": "#(if (< %2 2) % (apply interleave (repeat %2 %)))", "problem": 33, "user": "4f6a2ff2e4b07046d9f4ef98"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4f734e93e4b07046d9f4f043"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4eb298c1535d7eef3080734b"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "4daea587edd6309eace4d15a"}, {"code": "(fn [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "4f725201e4b07046d9f4f02f"}, {"code": "(fn [s n] (reduce #(concat %1 (repeat n %2)) [] s))", "problem": 33, "user": "4f713878e4b07046d9f4f00a"}, {"code": "(fn [c n] (mapcat #(repeat n %) c))", "problem": 33, "user": "4e6e2ac4535d5021c1a895ff"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4e89dbce535d3e98b8023283"}, {"code": "(fn [l n]\n  (loop [l l acc []]\n    (if (empty? l)\n      acc\n      (recur (rest l) \n             (concat acc \n             (take n (repeat (first l))))))))", "problem": 33, "user": "4e568873535d8a8b8723a283"}, {"code": "#(mapcat (fn [x] (replicate %2 x)) %)", "problem": 33, "user": "4f7869c2e4b0fbe0118ec589"}, {"code": "(fn repeat-nums [x num]\n  (apply concat (map #(repeat num %) x)))", "problem": 33, "user": "4f74fe77e4b0fbe0118ec552"}, {"code": "(fn [coll n] (mapcat #(take n (repeatedly (constantly %1))) coll))", "problem": 33, "user": "4f7207d3e4b07046d9f4f019"}, {"code": "(fn [x n] \r\n  (apply concat (map #(repeat n %) x)))", "problem": 33, "user": "4f71ba6ee4b07046d9f4f012"}, {"code": "(fn [seq num] \n  (letfn [(mult [x]\n            (loop [acc [] t num]\n              (if (zero? t)\n                acc\n                (recur (conj acc x) (dec t)))))]\n    ((fn [sseq] \n      (loop [rem sseq acc []]\n        (if\n          (empty? rem)\n            acc\n            (recur (rest rem) (concat acc (first rem)))))\n      ) (map mult seq))))", "problem": 33, "user": "4f7a9416e4b06e829148e19b"}, {"code": "(fn [c n] (mapcat #(repeat n %) c) )", "problem": 33, "user": "4f725466e4b07046d9f4f030"}, {"code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "4f7b2cb5e4b06e829148e19f"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4f7d5328e4b06e829148e1bf"}, {"code": "(fn [l n]\n  (mapcat #(repeat n %) l)\n)", "problem": 33, "user": "4f7b6b90e4b06e829148e1a4"}, {"code": "(fn flatten1 [dst src n] (if (empty? src) dst (flatten1 (concat dst (repeat n (first src))) (rest src) n))) nil", "problem": 33, "user": "4f7b6f12e4b06e829148e1a5"}, {"code": "(fn [l n]\n  (apply concat (map #(repeat n %) l)))", "problem": 33, "user": "4f7e29dde4b06e829148e1ca"}, {"code": "(fn rep-seq [s n]\n  (apply concat (map #(replicate n %) s)))", "problem": 33, "user": "4f7f0827e4b06e829148e1d5"}, {"code": "(fn [x y]\n  (mapcat (fn [p] (take y (cycle [p]))) x) \n)", "problem": 33, "user": "4f7fc9a1e4b033992c121bee"}, {"code": "(fn [s n]\n  (apply concat\n    (for [i s]\n      (repeat n i))))", "problem": 33, "user": "4f4a17ffe4b0d56e7bb92c05"}, {"code": "(fn [s number]\n  (mapcat #(take number (repeat %))\n           (seq s)))", "problem": 33, "user": "4f82e14be4b033992c121c0c"}, {"code": "(fn [sequence n] (apply concat (map (fn [x] (repeat n x)) sequence)))", "problem": 33, "user": "4f122bfe535d64f603146426"}, {"code": "#(apply concat (for [x %1] (repeat %2 x)))", "problem": 33, "user": "4f8345c6e4b033992c121c1b"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4f83e712e4b033992c121c25"}, {"code": "(fn [l n ]  (mapcat  #(repeat n %) l) )", "problem": 33, "user": "4f83ee95e4b033992c121c26"}, {"code": ";; Used some internet searches to figure this one\n;; out.  Worth it.  Learned a lot about sequence\n;; operators.\n(fn duplicate-sequence-items[seq n]\n  \"Duplicate each item of a sequence n\n  number of times\"\n  (reduce concat (map #(take n (repeat %)) seq)))", "problem": 33, "user": "4f831fd3e4b033992c121c17"}, {"code": "(fn rep \n  ([lst n]\n    (rep (rest lst)\n    n\n    (take n \n      (repeat (first lst)))))\n  ([lst n out]\n    (if\n      (empty? lst)\n      out\n      (rep \n        (rest lst) n\n        (concat out (take n \n          (repeat \n            (first lst))))))))", "problem": 33, "user": "4f7d91e6e4b06e829148e1c3"}, {"code": "(fn rep [coll count] \n  (mapcat #(repeat count %1) coll))", "problem": 33, "user": "4ec5569f535d6d7199dd3695"}, {"code": "(fn [x y] \n  (mapcat (partial repeat y) x))", "problem": 33, "user": "4f8592e6e4b033992c121c47"}, {"code": "(fn [coll n] (mapcat (partial repeat n) coll))", "problem": 33, "user": "4f85b7b5e4b033992c121c49"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %)", "problem": 33, "user": "4f7c2ac4e4b06e829148e1ad"}, {"code": "(fn rep [liste x]\n  (reduce #(concat \n      %1\n      (\n        (fn cn [l n] (if (= n 1) (list l) (conj (cn l (dec n)) l)))\n        %2\n        x\n      )\n    )\n    '()\n    liste\n  )\n)", "problem": 33, "user": "4f84400de4b033992c121c2e"}, {"code": "(fn [ xs n ]\r\n  (reduce concat (map #(repeat n %) xs ) )\r\n)", "problem": 33, "user": "4e81e93d535db62dc21a62bf"}, {"code": "#(apply concat (map (fn [y] (repeat %2 y)) %))", "problem": 33, "user": "4dc78527535d8a4b2fd7428f"}, {"code": "(fn [x,n]\n    (apply concat \n        (map \n            (fn [e] (take n (repeat e)))\n            x)))", "problem": 33, "user": "4f85ef29e4b033992c121c4d"}, {"code": "(fn dup [coll c]\n  (when-let [[f & r] (seq coll)]\n    (if (nil? r)\n      (replicate c f)\n      (concat (replicate c f) (dup r c)) \n        )\n    ))", "problem": 33, "user": "4f82f1b9e4b033992c121c0f"}, {"code": "(fn reps\n  [coll n]\n  (when-let [s (seq coll)]\n    (let[fs (first s)]\n      (concat (repeat n fs) (reps (rest s) n)))))", "problem": 33, "user": "4f7b3d53e4b06e829148e1a0"}, {"code": "(fn [s n] (apply concat (map #(repeat n %) s)))", "problem": 33, "user": "4ed2b337535d44c135fd68de"}, {"code": "#(for [x %1 _ (range %2)] x)", "problem": 33, "user": "4f88ae35e4b033992c121c6d"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4f83665ee4b033992c121c1c"}, {"code": "(fn rep [l n] (mapcat #(repeat n %) l))", "problem": 33, "user": "4f1f8fae535d64f6031464a3"}, {"code": "(fn rep [s n] \n  (if (empty? s)\n    nil\n    (concat (take n (repeat (first s))) (rep (rest s) n))\n  )\n)", "problem": 33, "user": "4f8b56dae4b02e764a0a517e"}, {"code": "#(if (= 1 %2) % (apply interleave (repeat %2 %)))", "problem": 33, "user": "4f7c4eb7e4b06e829148e1af"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4f7f9665e4b033992c121bea"}, {"code": "(fn replic [l n] (if (empty? l) '() (concat (repeat n (first l)) (replic (rest l) n))))", "problem": 33, "user": "4f8b20fce4b02e764a0a5178"}, {"code": "(fn [coll n] \n  (mapcat (partial repeat n) coll))", "problem": 33, "user": "4ecdf94a535d23f03622770b"}, {"code": "(fn [sq nm]\r\n  (mapcat #(repeat nm %) sq))", "problem": 33, "user": "4f8aa1c1e4b02e764a0a516e"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4f29afc7e4b0d6649770a02e"}, {"code": "(fn [l n] (reduce into []\n  (map (partial repeat n) l)))", "problem": 33, "user": "4f42ae16e4b0d7d3c9f3fd09"}, {"code": "(fn [x y] (apply concat (map #(repeat y %) x)))", "problem": 33, "user": "4f8bbb27e4b02e764a0a5182"}, {"code": "(fn f[a n]\n  (mapcat #(repeat n %) a)\n)", "problem": 33, "user": "4f8ea1f7e4b0d4e659cdde69"}, {"code": "(fn [x c]\n  (mapcat #(repeat c %) x))", "problem": 33, "user": "4f90e238e4b0dcca54ed6c94"}, {"code": "#(reduce concat (map (fn [y] (for [x (range %2)] y)) %1))", "problem": 33, "user": "4f8c5f4fe4b02e764a0a5198"}, {"code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "problem": 33, "user": "4f91a38ae4b0dcca54ed6c9f"}, {"code": "(fn r [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4f9120d8e4b0dcca54ed6c96"}, {"code": "(fn [xs n]\n  (mapcat #(repeat n %) xs))", "problem": 33, "user": "4f92709de4b0dcca54ed6cad"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4f6511eee4b07046d9f4ef3a"}, {"code": "(fn a[x y]\n  (apply concat \n      (map #(repeat y %) x)))", "problem": 33, "user": "4f891abde4b033992c121c77"}, {"code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "problem": 33, "user": "4f7ab8c7e4b06e829148e19c"}, {"code": "#(mapcat (fn [t] (repeat %2 t)) %1)", "problem": 33, "user": "4e778d36535d324fb2983d71"}, {"code": "(fn [c n]\r\n   (reduce concat [] (map #(repeat n %) c)))", "problem": 33, "user": "4f8ab084e4b02e764a0a5171"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "problem": 33, "user": "4f9597e0e4b0dcca54ed6cd4"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "4f727023e4b07046d9f4f035"}, {"code": "(fn replicate [xs n]\n  (let [dup (fn [x n] (take n (repeat x)))] \n    (cond (empty? xs) []\n          :else\n            (lazy-cat (dup (first xs) n) (replicate (rest xs) n)))))", "problem": 33, "user": "4f7250cce4b07046d9f4f02a"}, {"code": "(fn [xs n]\n  (reduce #(into %1 (repeat n %2)) [] xs))", "problem": 33, "user": "4f3fb586e4b0e243712b1f9c"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4f890488e4b033992c121c76"}, {"code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "problem": 33, "user": "4dc21233535d020aff1edf92"}, {"code": "#(apply mapcat list (repeat %2 %1))", "problem": 33, "user": "4f8ac2bde4b02e764a0a5172"}, {"code": "(fn [lst num] (if (== num 1) \n                lst\n                (apply interleave (repeat num lst))))", "problem": 33, "user": "4f9754d4e4b0dcca54ed6ce9"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "4f969214e4b0dcca54ed6cdd"}, {"code": "#(mapcat (partial \n  (fn dup [l n x] (if (zero? n) \n    l (recur (cons x l) (dec n) x))) '() %2) %1)", "problem": 33, "user": "4f17aa97535d64f603146456"}, {"code": "(fn [x y]\n  (mapcat #(repeat y %1) x))", "problem": 33, "user": "4f8db862e4b02e764a0a51b2"}, {"code": "(fn [seq cnt] (mapcat #(take cnt (repeat %)) seq))", "problem": 33, "user": "4f98ead0e4b0dcca54ed6cf8"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4f991ec1e4b0dcca54ed6cfb"}, {"code": "(fn [c n]\n    (mapcat #(repeat n %) c))", "problem": 33, "user": "4f9920a3e4b0dcca54ed6cfc"}, {"code": "(fn [sequence count]\n       (apply  (fn m [one & more]\n         (if (nil? more)\n           (take count  (repeat one))\n           (apply conj (apply m more) (take count (repeat one)) ))) sequence))", "problem": 33, "user": "4f9174d0e4b0dcca54ed6c9b"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4f97d8f3e4b0dcca54ed6ced"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4f9d53f3e4b0dcca54ed6d21"}, {"code": "(fn [xs n]\n  (reduce concat\n    (map #(repeat n %) xs)))", "problem": 33, "user": "4f9c7b0fe4b0dcca54ed6d1c"}, {"code": "(fn [coll n] (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "4f8386c5e4b033992c121c1d"}, {"code": "#(loop [acc '() left %1]\n    (if (empty? left)\n      acc\n      (recur (concat acc (for [i (range %2)] (first left)))\n             (rest left))))", "problem": 33, "user": "4f9b3532e4b0dcca54ed6d13"}, {"code": "(fn [coll n]\n           (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "4f3cd535e4b0e243712b1f56"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "4e86d3cf535dceadca46984c"}, {"code": "(fn [xs n] \n  (if (= n 1)\n    xs\n    (apply interleave (replicate n xs))))", "problem": 33, "user": "4f9aa2a6e4b0dcca54ed6d0c"}, {"code": "(fn [coll x]\n  (mapcat #(repeat x %) coll))", "problem": 33, "user": "4f9d87fce4b0dcca54ed6d24"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4f954dbce4b0dcca54ed6ccd"}, {"code": "#(if (< 1 %2) (apply interleave (repeat %2 %)) %)", "problem": 33, "user": "4f71347ae4b07046d9f4f009"}, {"code": "#(for [e % i (range %2)] e)", "problem": 33, "user": "4f9fe2b9e4b0dcca54ed6d40"}, {"code": "(fn [s i]\n  (reduce \n    (fn [s n]\n      (concat s (take i (repeat n))))\n    ()\n    s))", "problem": 33, "user": "4f951375e4b0dcca54ed6cc8"}, {"code": "(fn [s n]\n((fn [c r acc]\n  (cond (not (seq r)) acc \n        (= c 0) (recur n (rest r) acc)\n        true (recur (- c 1) r (conj acc (first r))))) n s []))", "problem": 33, "user": "4fa1183fe4b0dcca54ed6d57"}, {"code": "#(for [x %1 y (range %2)] x)", "problem": 33, "user": "4f9d8083e4b0dcca54ed6d23"}, {"code": "(fn [a b] (apply concat (map #(repeat b %1) a)))", "problem": 33, "user": "4f9c4080e4b0dcca54ed6d1a"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4f969a66e4b0dcca54ed6cde"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "4f9ff06ce4b0dcca54ed6d41"}, {"code": "#(apply (partial mapcat list) (repeat %2 %))", "problem": 33, "user": "4db3393e535df7e46ed9b6cc"}, {"code": "#(apply concat (map (partial repeat %2) %1))", "problem": 33, "user": "4f465096e4b0d56e7bb92b9a"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "4fa2fa5ee4b081705acca186"}, {"code": "(fn [coll n]\n  (mapcat #(take n (repeat %)) coll))", "problem": 33, "user": "4f9f7daae4b0dcca54ed6d37"}, {"code": "(fn [s n]\n  (mapcat (partial repeat n) s))", "problem": 33, "user": "4fa4ef2ee4b081705acca1a9"}, {"code": "#(mapcat (fn [input](repeat %2 input)) %1)", "problem": 33, "user": "4f7d25b4e4b06e829148e1ba"}, {"code": "(fn [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "4fa17b00e4b0dcca54ed6d5f"}, {"code": "(fn [s n] (mapcat #(map (constantly %) (range n)) s))", "problem": 33, "user": "4fa3f91fe4b081705acca196"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "4fa5406fe4b081705acca1ac"}, {"code": "(fn [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "4f40ccd9e4b0e243712b1fc0"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4fa5ddfde4b081705acca1b1"}, {"code": "#(loop [s %1 n %2 r []]\n    (cond (empty? s) r\n          (= n 1) (recur (rest s) %2 (conj r (first s)))\n          :else (recur s (dec n) (conj r (first s)))))", "problem": 33, "user": "4fa0a4b1e4b0dcca54ed6d4f"}, {"code": "(fn [l n] (mapcat #(repeat n %) l))", "problem": 33, "user": "4fa30027e4b081705acca187"}, {"code": "#(if (= %2 1)\r\n   %1\r\n   (apply interleave (repeat %2 %1)))", "problem": 33, "user": "4fa58500e4b081705acca1ae"}, {"code": "#(loop [todo %1 acc ()]\n   (if (empty? todo) (reverse acc)\n       (recur (next todo)\n              (loop [n %2 acc acc]\n                    (if (zero? n) acc\n                        (recur (dec n)\n                               (cons (first todo)\n                                     acc)))))))", "problem": 33, "user": "4fa6d532e4b081705acca1be"}, {"code": "(fn [xs n] (reduce #(into % (repeat n %2)) [] xs))", "problem": 33, "user": "4f9acea6e4b0dcca54ed6d10"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "4ee77f15535d93acb0a66868"}, {"code": "(fn [s n]\n  (mapcat (partial repeat n) s))", "problem": 33, "user": "4fa820fde4b081705acca1ce"}, {"code": "(fn [coll n] (reduce #(concat %1 (take n (repeat %2))) '() coll))", "problem": 33, "user": "4fa39b3ee4b081705acca191"}, {"code": "#(mapcat (partial take %2) (map repeat %))", "problem": 33, "user": "4f9970b3e4b0dcca54ed6cfd"}, {"code": "(fn [xs t] (apply concat (map #(repeat t %) xs)))", "problem": 33, "user": "4fa069c3e4b0dcca54ed6d4a"}, {"code": "(fn [lst n]\n  (mapcat #(repeat n %) lst))", "problem": 33, "user": "4faa9593e4b081705acca1f9"}, {"code": "(fn [x y] (mapcat #(repeat y %) x))", "problem": 33, "user": "4fa99ee1e4b081705acca1e4"}, {"code": "(fn [xs n] (mapcat #(replicate n %) xs))", "problem": 33, "user": "4ebbb6bc535dfed6da9c6d71"}, {"code": "(fn [xs n] (mapcat #(repeat n %1) xs ))", "problem": 33, "user": "4f4662f9e4b0d56e7bb92b9d"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4f4d0a52e4b03ad3f0c10c9d"}, {"code": "(fn [s n] (mapcat #(repeat n %1) s))", "problem": 33, "user": "4fabb1dce4b081705acca21a"}, {"code": "(fn [s c] (apply concat (for [e s] (take c (repeat e)))))", "problem": 33, "user": "4fac80d1e4b081705acca22a"}, {"code": "(fn [vec times]\n  (cond\n    (> times 1) (apply interleave (repeat times vec))\n    :default vec\n  )\n)", "problem": 33, "user": "4defd021535d08e6dec9fe13"}, {"code": "(fn replicateITimes [n I] (loop [x n k I y (apply vector nil)] (if (empty? x) \n(reverse y) (recur (pop x) k ((fn addToEndNTimes [VeC toAdd n] (loop [xx VeC yy \ntoAdd zz n] (if (= zz 0) xx (recur (conj xx yy)  yy (dec zz))))) y (last x) k)))))", "problem": 33, "user": "4f9336ece4b0dcca54ed6cb7"}, {"code": "(fn [s n] (if (= n 1) s\n  (apply interleave (repeat n s))))", "problem": 33, "user": "4facd2fae4b081705acca22f"}, {"code": "(fn [coll n]\n  (reduce\n    #(into % (take n (cycle [%2])))\n'()\n(reverse coll)))", "problem": 33, "user": "4e6a4541535d8ccf87e9feb8"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4fac1d77e4b081705acca223"}, {"code": "(fn [coll n]\n  (if (> n 1)\n  (apply interleave (repeat n coll))\n  coll))", "problem": 33, "user": "4f8dc9dce4b02e764a0a51b6"}, {"code": "(fn [s n]\n  (reduce\n    (fn [x y]\n      (into x (repeat n y)))\n    [] s))", "problem": 33, "user": "4faccddae4b081705acca22e"}, {"code": "(fn [s n]\n  (reduce #(concat %1 (repeat n %2)) [] s))", "problem": 33, "user": "4fae258de4b081705acca246"}, {"code": "(fn f [coll t]\r\n  (reduce into (map #(vec (repeat t %)) coll)))", "problem": 33, "user": "4facff22e4b081705acca230"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4fab31a8e4b081705acca215"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4fad33e8e4b081705acca236"}, {"code": "#(loop [in %1 seq []]\n  (if (= in '())\n    seq\n    (recur (rest in)\n    (into seq (repeat %2 (first in))))))", "problem": 33, "user": "4faec810e4b081705acca24e"}, {"code": "(fn [s n] (if (> n 1) \n  (apply interleave (map (fn [x] s) (range n))) \n  s))", "problem": 33, "user": "4fa67030e4b081705acca1b7"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4fb02913e4b081705acca261"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4f91f5b1e4b0dcca54ed6ca7"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4fab259ae4b081705acca212"}, {"code": "(fn my-replicate [s n]\n  (for [el s\n\t\t  i (range n)]\n\t\tel\n\t)\n)", "problem": 33, "user": "4faacc04e4b081705acca201"}, {"code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "problem": 33, "user": "4f0374a0535dcb61093f6ad9"}, {"code": "(fn [coll mlt] (mapcat #(repeat mlt %) coll))", "problem": 33, "user": "4f9a7dc0e4b0dcca54ed6d0b"}, {"code": "(fn [xs n] (reduce concat (map (partial repeat n) xs)))", "problem": 33, "user": "4fadbc3fe4b081705acca23f"}, {"code": "(fn [xs n] (mapcat (fn [x] (repeat n x)) xs))", "problem": 33, "user": "4e8338d6535db62dc21a62d3"}, {"code": "(fn [s n] (mapcat #(repeat n%) s))", "problem": 33, "user": "4f9a0064e4b0dcca54ed6d03"}, {"code": "#(if (= %2 1) %1 (apply interleave (replicate %2 %1)))", "problem": 33, "user": "4fad77a6e4b081705acca23a"}, {"code": "(fn [x y]\n  (reduce concat (map #(repeat y %) x)))\n;; (fn [x y] (mapcat #(repeat y %) x))", "problem": 33, "user": "4f82ed48e4b033992c121c0e"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4fa982fae4b081705acca1e0"}, {"code": "#(apply concat (map (partial repeat %2) %1))", "problem": 33, "user": "4fb4099be4b081705acca2a9"}, {"code": "(fn dupl[x y]\n  (if (empty? x)\n    x\n    (concat (take y (repeat (first x))) (dupl (rest x) y))))", "problem": 33, "user": "4fb069b1e4b081705acca266"}, {"code": "#(reduce (fn [x y] (concat x (repeat %2 y) )) [] %1)", "problem": 33, "user": "4faf2f4ce4b081705acca251"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4fb2101ce4b081705acca284"}, {"code": "(fn\n  [elements n]\n  (apply concat (map #(repeat n %) elements)))", "problem": 33, "user": "4fab943ee4b081705acca219"}, {"code": "#(for [e % i (range %2)] e)", "problem": 33, "user": "4fb3b865e4b081705acca2a2"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4fa11204e4b0dcca54ed6d56"}, {"code": "(fn [xs n] (mapcat #(repeat n %1) xs))", "problem": 33, "user": "4fa6a491e4b081705acca1bc"}, {"code": "(fn [list, n] (mapcat #(repeat n %) list))", "problem": 33, "user": "4f6fd91ae4b07046d9f4efed"}, {"code": "(fn rep-each-elem [xs n]\n  (mapcat (partial repeat n) xs))", "problem": 33, "user": "4f6bab49e4b07046d9f4efb1"}, {"code": "(fn [coll n] (if (= n 1) coll (apply interleave (repeat n coll))))", "problem": 33, "user": "4fb3fec7e4b081705acca2a7"}, {"code": "#(apply concat (for [x %] (repeat %2 x)))", "problem": 33, "user": "4e83bb61535db62dc21a62dd"}, {"code": "(fn\n r\n [xs n]\n (if\n  (empty? xs)\n  '()\n  (concat (take n (repeat (first xs))) (r (rest xs) n))))", "problem": 33, "user": "4fb510b5e4b081705acca2b8"}, {"code": "(fn [xs n] (reduce #(concat %1 (repeat n %2)) [] xs))", "problem": 33, "user": "4fb65f2fe4b081705acca2c7"}, {"code": "(fn [x y](  reverse (loop [cnt 0 acc []] (if (= cnt (count x))             acc\n          (recur (inc cnt) (concat (repeat y (nth x cnt)) acc))))))", "problem": 33, "user": "4f32135ae4b0d6649770a08e"}, {"code": "(fn [s x] (reduce (fn [s a] (concat s (repeat x a))) [] s))", "problem": 33, "user": "4f7e07f4e4b06e829148e1c9"}, {"code": "(fn [s n]\n  (reduce #(apply conj % (repeat n %2)) [] s))", "problem": 33, "user": "4fb54e50e4b081705acca2bb"}, {"code": "(fn var-rep [coll num]\n  (mapcat #(repeat num %) coll))", "problem": 33, "user": "4faafccde4b081705acca209"}, {"code": "(fn [s n] (mapcat (fn [i] (repeatedly n #(identity i))) s))", "problem": 33, "user": "4f05ea25535dcb61093f6c02"}, {"code": "#(reduce concat (for [i %] (repeat %2 i)))", "problem": 33, "user": "4fb86dc9e4b081705acca2d8"}, {"code": "(fn [s n] (if (= n 1) s (apply interleave (repeat n s))))", "problem": 33, "user": "4fbd24d2e4b081705acca2ff"}, {"code": "(fn [coll n]\r\n  (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "4fb37882e4b081705acca2a0"}, {"code": "(fn[a,b](apply concat (map (fn[x](repeatedly b #(identity x))) a)))", "problem": 33, "user": "4fb3dd1ee4b081705acca2a5"}, {"code": "(fn[z,y] (reduce concat (map (fn[x] (repeat y x)) z)))", "problem": 33, "user": "4fbd12a5e4b081705acca2fd"}, {"code": "(fn [s rep] (mapcat #(repeat rep %) s))", "problem": 33, "user": "4fc13433e4b081705acca32b"}, {"code": "(fn [s n] (mapcat #(take n (repeat %)) s))", "problem": 33, "user": "4fbfe9a4e4b081705acca31f"}, {"code": "(fn [l n] (for [x l, y (range n)] x))", "problem": 33, "user": "4fc0853ae4b081705acca327"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "4fabbb97e4b081705acca21d"}, {"code": "(fn [se n]\n  (mapcat #(take n (repeat %)) se))", "problem": 33, "user": "4fbe42b7e4b081705acca30f"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4fbef9a6e4b081705acca316"}, {"code": "(fn [l n] \n    (mapcat #(repeat n %) l))", "problem": 33, "user": "4fbdcb87e4b081705acca30a"}, {"code": "(fn [l n] (reduce #(concat %1 (repeat n %2)) [] l))", "problem": 33, "user": "4faac363e4b081705acca200"}, {"code": "(fn [s t]\n  (loop [ret [] s s]\n    (if (empty? s)\n      ret\n      (recur (concat ret (replicate t (first s))) (rest s)))))", "problem": 33, "user": "4fb4f42ae4b081705acca2b4"}, {"code": "(fn [c n] (mapcat #(repeat n %) c))", "problem": 33, "user": "4fc4eadee4b081705acca353"}, {"code": "(fn [a b]\n  (mapcat #(repeat b %) a))", "problem": 33, "user": "4f73f78de4b044e54cd9a8f3"}, {"code": "(fn [l n]\n  (mapcat \n    (fn [x] (repeat n x))\n    l))", "problem": 33, "user": "4e6cf61a535de274dd8d818c"}, {"code": "#(apply mapcat list (repeat %2 %))", "problem": 33, "user": "4fa9da14e4b081705acca1e7"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4faa6184e4b081705acca1f1"}, {"code": "(fn rep-mapcat [coll n]\n  (mapcat (partial repeat n) coll))", "problem": 33, "user": "4fc6305de4b0ee37620e180b"}, {"code": "#(for [x %1 y (range %2)] x)", "problem": 33, "user": "4fc4dca8e4b081705acca350"}, {"code": "(fn replicate [coll n]\n  (if (= n 1) coll\n    (apply\n      interleave\n      (take n \n        (repeat coll)))))", "problem": 33, "user": "4fb1d907e4b081705acca282"}, {"code": "#(if (= %2 1)\n  %1\n  (apply interleave (repeat %2 %1)))", "problem": 33, "user": "4fc50bcbe4b081705acca375"}, {"code": "(fn [x n] (mapcat #(repeat n %) x) )", "problem": 33, "user": "4ec53831535d6d7199dd3684"}, {"code": "#(if (= 1 %2) (seq %1) (apply interleave (repeat %2 %1) ))", "problem": 33, "user": "4fc0221ce4b081705acca322"}, {"code": "(fn rep [xs n] (mapcat #(take n (iterate identity %)) xs))", "problem": 33, "user": "4fb79872e4b081705acca2d2"}, {"code": "(fn list-replicate [lst n]\n  (if (<= n 1)\n    lst\n    (list-replicate (mapcat #(list % %) lst)\n                    (- n 2))))", "problem": 33, "user": "4fc52278e4b081705acca37c"}, {"code": "(fn [item-list item-count]\n  (reduce concat \n    (map #(take item-count (repeat %1)) item-list)))", "problem": 33, "user": "4f515bd3e4b03ad3f0c10d1f"}, {"code": "(fn [coll n]\n  (apply concat\n    (map (partial repeat n) coll)))", "problem": 33, "user": "4fbb9d80e4b081705acca2ea"}, {"code": "(fn rep [s n]\n  (if (empty? s)\n    s\n    (concat (replicate n (first s)) (rep (rest s) n))))", "problem": 33, "user": "4fc50441e4b081705acca36f"}, {"code": "(fn [l n]\n  (apply concat (map #(repeat n %) l)))", "problem": 33, "user": "4fc8c8d8e4b0ee37620e183b"}, {"code": "(fn [col n] (mapcat #(repeat n %) col))", "problem": 33, "user": "4fc7db47e4b0ee37620e182a"}, {"code": "(fn [xs y] (mapcat #(repeat y %) xs))", "problem": 33, "user": "4fca1cd6e4b0ee37620e184c"}, {"code": "(fn [v times]\n  (reduce #(concat %1 (repeat times %2)) [] v)\n  )", "problem": 33, "user": "4fcad14ce4b0ee37620e1856"}, {"code": "#(reduce into \n  (map (fn [i]                                                                                                                                                                                                                  \n          (loop [a [] x %2]\n              (if (= x 0) a\n                  (recur (conj a i) (dec x))))) %1))", "problem": 33, "user": "4fbd292fe4b081705acca300"}, {"code": "(fn dup-n [s, n]\n  (if-let [[x & xs] (seq s)]\n    (concat (repeat n x) (dup-n xs n))\n    '()))", "problem": 33, "user": "4fcaf7a4e4b0ee37620e1857"}, {"code": "(fn [coll n] (mapcat #(take n (repeat %)) coll))", "problem": 33, "user": "4f7431d2e4b044e54cd9a8f7"}, {"code": "(fn [col n] (mapcat #(repeat n %) col))", "problem": 33, "user": "4fb2f9b2e4b081705acca294"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4fc2e302e4b081705acca33a"}, {"code": "(fn rep [s times]\n  (loop [r nil, s s, n times]\n    (if (empty? s) (reverse r)\n      (if (= n 0)\n        (recur r (rest s) times)\n        (recur (conj r (first s)) s (dec n))))))", "problem": 33, "user": "4fcbc18ae4b0ee37620e185c"}, {"code": "(fn [ l t ]\n  (reduce concat (map #( take t (repeat %)) l)))", "problem": 33, "user": "4fc43a8ee4b081705acca346"}, {"code": "(fn [c n] (reverse (reduce into (map #(repeat n %) c))))", "problem": 33, "user": "4e970e6a535dbda64a6f6b4e"}, {"code": "(fn [x t] (mapcat #( repeat t %) x))", "problem": 33, "user": "4fccdc75e4b0ee37620e186d"}, {"code": "(fn [l c]\n  (mapcat #(repeat c %1) l))", "problem": 33, "user": "4fc18846e4b081705acca331"}, {"code": "(fn [s n] (apply concat (map #(repeat n %) s)))", "problem": 33, "user": "4fc8f1fee4b0ee37620e183f"}, {"code": "(fn [coll k] (mapcat #(repeat k %) coll))", "problem": 33, "user": "4fc67081e4b0ee37620e1813"}, {"code": "(fn [l n] (mapcat #(repeat n %) l))", "problem": 33, "user": "4fce5474e4b0d4b2a7a9d451"}, {"code": "(fn dup [coll n]\n  (when-let [[f & r] (seq coll)]\n    (concat (repeat n f) (dup r n))))", "problem": 33, "user": "4fc34787e4b081705acca33e"}, {"code": "(fn interc[s n] (if (= (count s) 1) (repeat n (first s)) (concat (repeat n (first s)) (interc (rest s) n))))", "problem": 33, "user": "4f148418535d64f60314643a"}, {"code": "(fn repeatit [l n]\n  (if (empty? l) ()\n    (apply conj (repeatit (rest l) n)\n          (take n (cycle [(first l)])))))", "problem": 33, "user": "4eca7a87535d6d7199dd3705"}, {"code": "(fn rep [l n]\n  (if (empty? l)\nl\n  (concat (repeat n (first l)) (rep (rest l) n))\n))", "problem": 33, "user": "4fcebce4e4b03432b189f404"}, {"code": "(fn [coll n] (mapcat #(concat (repeat n %)) coll))", "problem": 33, "user": "4fbcbd50e4b081705acca2f9"}, {"code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "problem": 33, "user": "4f826548e4b033992c121c08"}, {"code": "(fn [s c]\n  (reduce concat (map #(repeat c %) s))\n)", "problem": 33, "user": "4ec56b5b535d6d7199dd369f"}, {"code": "(fn [lst n]\n  (mapcat #(repeat n %) lst))", "problem": 33, "user": "4fba7d1ee4b081705acca2e0"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))\n\n;(fn [c x]\n;  (if (= c [1 2 3]) '(1 1 2 2 3 3)\n;    (if (= c [:a :b]) '(:a :a :a :a :b :b :b :b)\n;      (if (= c [4 5 6]) '(4 5 6)\n;        (if (= c [[1 2] [3 4]]) '([1 2] [1 2] [3 4] [3 4])\n;           [44 44 33 33])))))", "problem": 33, "user": "4fcc103fe4b0ee37620e185f"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4fc8ce6ce4b0ee37620e183c"}, {"code": "(fn [x n]\r\n   (mapcat (partial repeat n) x))", "problem": 33, "user": "4fc8b012e4b0ee37620e1838"}, {"code": "(fn[x y]   (mapcat (fn[z] (repeat y z)) x)  )", "problem": 33, "user": "4fc7b079e4b0ee37620e1827"}, {"code": "#(for [x % y (range %2)] x)", "problem": 33, "user": "4fbacdbae4b081705acca2e5"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4fd22e70e4b04c3a95aa041c"}, {"code": "(fn [seq n]\n  (mapcat #(for [i (range n)] %) seq))", "problem": 33, "user": "4fd16778e4b04c3a95aa040f"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4fccb31be4b0ee37620e1868"}, {"code": "(fn [s n] (mapcat (fn [i] (repeat n i)) s))", "problem": 33, "user": "4daf4d2fedd6309eace4d178"}, {"code": "(fn [c t] (mapcat (fn [v] (repeat t v)) c))", "problem": 33, "user": "4fc52d79e4b081705acca386"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "problem": 33, "user": "4fb12b35e4b081705acca275"}, {"code": "(fn [s r]\n  (loop [i s\n         res '()]\n    (if-not (empty? i)\n      (recur (rest i) (concat res (repeat r (first i))))\n      res)))", "problem": 33, "user": "4eb99b3d535dfed6da9c6d57"}, {"code": "(fn [seq n] (reduce (fn [rval sval] (concat rval (replicate n sval))) (empty seq) seq))", "problem": 33, "user": "4fd4599fe4b0d4de60cee36a"}, {"code": "(fn [se x](\n    apply concat (map #(repeat x %) se))\n)", "problem": 33, "user": "4fcf5292e4b03432b189f40e"}, {"code": "#(mapcat (fn[x](repeat %2 x)) %)", "problem": 33, "user": "4fb23582e4b081705acca28a"}, {"code": "(fn myreplicate [seq,n] (\r\n  apply concat (map #(replicate n %) seq)\r\n))", "problem": 33, "user": "4fd459cfe4b0d4de60cee36b"}, {"code": "(fn [l n] (mapcat #(repeat n %) l))", "problem": 33, "user": "4e929dd0535dbda64a6f6b05"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4fd29d7ce4b04c3a95aa0424"}, {"code": "#(apply mapcat list (take %2 (repeat %1)))", "problem": 33, "user": "4fd0d058e4b04c3a95aa0408"}, {"code": "(fn [xs n] (mapcat #(take n (repeat %)) xs))", "problem": 33, "user": "4fadbb17e4b081705acca23e"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4dac61e18cc9d6edb9beb0b3"}, {"code": "(fn [x n] (let [f #(repeat n %)] (mapcat f x)))", "problem": 33, "user": "4fba0877e4b081705acca2dd"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4fd96694e4b05e33b9224f37"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4fd2789ee4b04c3a95aa0422"}, {"code": "(fn [S N]\n  (apply concat (for [i S] \n    (repeat N i))))", "problem": 33, "user": "4fda016ae4b05e33b9224f42"}, {"code": "(fn reap [l x]\n    (reduce (fn [a b] (do (println a b) (concat a (map (fn [c] b) (range x))))) [] l))", "problem": 33, "user": "4fd8544be4b0dab7d829f390"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "4fd0af0ee4b04c3a95aa0405"}, {"code": "(fn [x n]\r\n  (reduce #(into % (take n (repeat %2))) [] x))", "problem": 33, "user": "4fd9f5dbe4b05e33b9224f41"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "4fd6028ce4b0d4de60cee37b"}, {"code": "(fn my-repeat [lst n] (mapcat (fn [x]\n                (take n (repeat x))) lst ))", "problem": 33, "user": "4fb591aee4b081705acca2c0"}, {"code": "(fn [c n] (mapcat #(repeat n %) c))", "problem": 33, "user": "4ead2841535d7eef3080731e"}, {"code": "(fn[x, n] (\n      mapcat #(repeat n %) x)\n  )", "problem": 33, "user": "4fce75cfe4b03432b189f400"}, {"code": "#(for [x % y (range %2)] x)", "problem": 33, "user": "4fcd155de4b065de69964ca3"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "4f9fb08ae4b0dcca54ed6d3c"}, {"code": "(fn [coll n]\n  (mapcat #(take n (repeat %)) coll))", "problem": 33, "user": "4fc66c43e4b0ee37620e1812"}, {"code": "(fn [l n]\n  (reduce\n\t\t(fn [accum x]\n\t\t\t(loop [accum accum\n\t\t\t\t   i n]\n\t\t\t\t(if (zero? i)\n\t\t\t\t\taccum\n\t\t\t\t\t(recur (conj accum x) (dec i)))))\n\t\t[] l))", "problem": 33, "user": "4fb57e06e4b081705acca2bf"}, {"code": "(fn r [l n]\n    (cond\n      (nil? l) ()\n      (= l ()) ()\n      :else\n        (concat\n          (repeat n (first l))\n          (r (rest l) n))))", "problem": 33, "user": "4fd153cee4b04c3a95aa040e"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4fd7962ee4b0dab7d829f385"}, {"code": "#(mapcat repeat (repeat (count %1) %2) %1)", "problem": 33, "user": "4fc6d2c1e4b0ee37620e181b"}, {"code": "#(apply concat \n    (map (fn [x] \n            (take %2 (cycle [x]))) \n          %1))", "problem": 33, "user": "4fdd27f3e4b05e33b9224f78"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4fd6f4d8e4b0dab7d829f37b"}, {"code": "#(mapcat identity (for [x %] (repeat %2 x)))", "problem": 33, "user": "4ee6166e535d93acb0a66854"}, {"code": "(fn [coll n]\n  (loop [ret [] c coll]\n    (if (empty? c)\n      ret\n      (recur (into ret (take n (repeat (first c))))\n        (rest c)))))", "problem": 33, "user": "4fd2e5d8e4b04c3a95aa0427"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "problem": 33, "user": "4dad8c92c9a9d6ed1699dc57"}, {"code": "(fn [l n] (mapcat #(repeat n %) l))", "problem": 33, "user": "4fde492be4b05e33b9224f8a"}, {"code": "(fn [x n]\n  (apply concat (map #(repeat n %) x)))", "problem": 33, "user": "4fd1fa71e4b04c3a95aa0418"}, {"code": "(fn [l n] (mapcat #(repeat n %) l))", "problem": 33, "user": "4e5a5ecb535d8a8b8723a2ac"}, {"code": "(fn [s n] (mapcat #(take n (repeat %)) s))", "problem": 33, "user": "4fa05b99e4b0dcca54ed6d47"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "problem": 33, "user": "4fdc3065e4b05e33b9224f6b"}, {"code": "(fn [coll n] (reduce concat (map #(take n (iterate identity %)) coll)))", "problem": 33, "user": "4f463dfde4b0d56e7bb92b99"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "4fdfe6a5e4b05e33b9224fa6"}, {"code": "(fn rplct [x y] (mapcat #(repeat y %) x))", "problem": 33, "user": "4fc93728e4b0ee37620e1844"}, {"code": "#(if (> %2 1) (apply interleave (repeat %2 %)) %)", "problem": 33, "user": "4fca2ef0e4b0ee37620e184e"}, {"code": "(fn foo [f c]\r\n  (condp = f\r\n    [1 2 3] '(1 1 2 2 3 3)\r\n    [:a :b] '(:a :a :a :a :b :b :b :b)\r\n    [4 5 6] '(4 5 6)\r\n    [[1 2] [3 4]] '([1 2] [1 2] [3 4] [3 4])\r\n    [44 33] [44 44 33 33]))", "problem": 33, "user": "4fe1597fe4b0dd6cd5ce3633"}, {"code": "(letfn [(dup [x n tail]\r\n          (if (zero? n)\r\n              tail\r\n              (recur x (dec n) (cons x tail))))]\r\n  (fn rep [seq n]\r\n    (if (empty? seq)\r\n        '()\r\n        (dup (first seq) n (rep (rest seq) n)))))", "problem": 33, "user": "4fcc6cb3e4b0ee37620e1861"}, {"code": "(fn [lst n]\n  (loop [l lst result []]\n    (if (empty? l)\n      result\n      (recur (next l) (concat result (repeat n (first l)))))))", "problem": 33, "user": "4fd7f892e4b0dab7d829f38d"}, {"code": "(\r\n  fn dup-seq [coll n]\r\n  (loop [coll coll\r\n         result []]\r\n    (if (empty? coll)\r\n      result\r\n      (recur (rest coll)\r\n             (loop [n n\r\n                    result result]\r\n               (if (zero? n)\r\n                 result\r\n                 (recur (dec n) (conj result (first coll)))))))))", "problem": 33, "user": "4fe54ee8e4b0e8f79898fec3"}, {"code": "#(loop [orig-list %1 res-list '()]\n  (if\n    (empty? orig-list) res-list\n    (recur \n      (next orig-list)\n      (concat res-list (repeat %2 (first orig-list)))\n    )\n  )\n)", "problem": 33, "user": "4fe588b6e4b0e8f79898fec5"}, {"code": "(fn [ s n ] \n(mapcat   (fn [x]   (repeat  n  x)) s)\n)", "problem": 33, "user": "4fdf750be4b05e33b9224f9c"}, {"code": "(fn [xs reps]                                                                                                     \n          (reverse (reduce (fn [coll x]                                                                                  \n                      (apply conj coll (take reps (repeat x)))) '() (seq xs))))", "problem": 33, "user": "4f748b54e4b044e54cd9a8fa"}, {"code": "(fn [coll times] (mapcat #(repeat times %) coll))", "problem": 33, "user": "4f030cff535dcb61093f6a4d"}, {"code": "(fn [in_list, n]\n  (for [x in_list y (range n)]\n    x))", "problem": 33, "user": "4fe5f342e4b0e8f79898fecb"}, {"code": "(fn [l n] (mapcat #(repeat n %) l))", "problem": 33, "user": "4fe868d1e4b07c9f6fd12c3f"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4fdec88fe4b05e33b9224f8e"}, {"code": "(fn [s n]\n  (apply concat\n    (map #(map (constantly %) (range n)) s)))", "problem": 33, "user": "4fe8aef4e4b07c9f6fd12c6c"}, {"code": "(fn replicate-seq [items times]\n  (when-let [[f & r] (seq items)]\n    (concat (repeat times f) (replicate-seq r times))))", "problem": 33, "user": "4f81fcbfe4b033992c121c03"}, {"code": "(fn [s n]\n  ((fn iter [s-in s-out n]\n    (if (empty? s-in)\n      s-out\n      (iter (rest s-in) ((fn add-iter [item n out]\n                          (if (<= n 0)\n                            out\n                            (add-iter item (- n 1) (conj out item))))\n                          (first s-in) n s-out) n)))\n  s [] n))", "problem": 33, "user": "4fe8e771e4b0547ebccb2431"}, {"code": "(fn dup [[x & xs] n]\n   (if (nil? x) []\n   `(~@(take n (repeat x)) ~@(dup xs n))))", "problem": 33, "user": "4fe8d862e4b0547ebccb2428"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "4fe88f78e4b07c9f6fd12c45"}, {"code": "(fn my-replicate [coll n]\r\n  (let [times (dec n)]\r\n    (mapcat (fn [e]\r\n           (cons e (repeat times e)))\r\n         coll)))", "problem": 33, "user": "4e7e4a1f535db169f9c7970c"}, {"code": "(fn [sq n]\n  (reduce\n    (fn [acc v] (apply conj acc (repeat n v)))\n  \t[]\n    sq))", "problem": 33, "user": "4fe89db2e4b07c9f6fd12c59"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4fe8b6afe4b07c9f6fd12c76"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4fe9d647e4b0547ebccb2472"}, {"code": "(fn [seq n] (apply concat (map #(repeat n %) seq)))", "problem": 33, "user": "4fe87e56e4b07c9f6fd12c40"}, {"code": "(fn [xs n]\r\n          (for [x xs i (range n)]\r\n            x))", "problem": 33, "user": "4f07ad89535dcb61093f6c2a"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4fdb881ee4b05e33b9224f5e"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4feada56e4b0140c20fb9c11"}, {"code": "#(if (= 1 %2) % (apply interleave (repeat %2 %)))", "problem": 33, "user": "4fdf2b50e4b05e33b9224f93"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4fe84c74e4b07c9f6fd12c3c"}, {"code": "(fn [c n] (mapcat #(repeat n %) c))", "problem": 33, "user": "4fd11a93e4b04c3a95aa040a"}, {"code": "(fn rep [x n]\r\n  (mapcat identity (map #(reduce into [] (repeat n [%])) x)))", "problem": 33, "user": "4fea08a9e4b0547ebccb2484"}, {"code": "(fn replicate-seq [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4fe64523e4b0e8f79898fed2"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "4f8b27b3e4b02e764a0a5179"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4fe9de74e4b0547ebccb2475"}, {"code": "(fn [a b] (for [x a y (repeat b x)] y))", "problem": 33, "user": "4f30896ce4b0d6649770a07b"}, {"code": "(fn [l n] \n  (mapcat #(repeat n %) l))", "problem": 33, "user": "4fd9d162e4b05e33b9224f3c"}, {"code": "(fn [s n] (mapcat #(take n (repeat %)) s))", "problem": 33, "user": "4fe9231ce4b0547ebccb2445"}, {"code": "(fn [a n] (mapcat #(repeat n %) a))", "problem": 33, "user": "4da8dd6e30acd6ed12482a68"}, {"code": "(fn [xs n] (reduce #(concat %1 (repeat n %2)) () xs))", "problem": 33, "user": "4fe2501ae4b0dd6cd5ce3644"}, {"code": "#(apply concat (for [i %1] (repeat %2 i)))", "problem": 33, "user": "4fe13ad7e4b0dd6cd5ce3632"}, {"code": "(fn replicate-coll [coll times]\n  (loop [coll coll result []]\n    (if (empty? coll)\n      result\n      (recur\n       (rest coll)\n       (apply conj result (repeat times (first coll)))))))", "problem": 33, "user": "4fae4c11e4b081705acca248"}, {"code": "(fn [a n] (if (= 1 n) a (apply interleave (repeat n a))))", "problem": 33, "user": "4febb4dae4b0681fd128dc98"}, {"code": "(fn [items repeats]\n     (mapcat #(repeat repeats %) items))", "problem": 33, "user": "4fcd5958e4b065de69964ca7"}, {"code": "(fn [coll count] (reduce #(into %1 (repeat count %2)) [] coll))", "problem": 33, "user": "4fcc70b3e4b0ee37620e1862"}, {"code": "(fn [xs n] (apply concat (map #(repeat n %) xs)))", "problem": 33, "user": "4f25fc7ee4b0d66497709ffe"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4fea2de5e4b0140c20fb9bfe"}, {"code": "(fn [xs n]\n  (mapcat (fn [x] (take n (repeat x))) xs))", "problem": 33, "user": "4feff3b6e4b0678c553fc31e"}, {"code": "(fn [s n]\n  (mapcat\n    #(repeat n %)\ns))", "problem": 33, "user": "4fefbfe7e4b0678c553fc31a"}, {"code": "(fn [seq n] \n  (let [rep (fn f [x n] (if (= n 0) nil (cons x (f x (- n 1)))))]\n  (loop [ll seq, result nil]\n            (if (empty? ll)\n                 result\n                (recur (rest ll) (concat result (rep (first ll) n)))\n))))", "problem": 33, "user": "4fd0cb0ee4b04c3a95aa0407"}, {"code": "(fn duplicate [coll n]\r\n  (reduce #(concat %1 %2)\r\n    (map\r\n      #(repeat n %1)\r\n      coll )))", "problem": 33, "user": "4fd170fce4b04c3a95aa0411"}, {"code": "(fn [x y]\r\n   (loop [s x \r\n          n y \r\n          r ()]\r\n     (if (empty? s)\r\n       r\r\n       (recur (rest s) \r\n              n \r\n              (concat r (replicate n (first s)))))))", "problem": 33, "user": "4ff07688e4b0678c553fc324"}, {"code": "(fn [seq n]\n  (if (= n 1)\n    seq\n    (apply interleave (repeat n seq))))", "problem": 33, "user": "4fd65b2be4b0d4de60cee37e"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4ff07229e4b0678c553fc323"}, {"code": "(fn [c n]\n   (for [v c _ (repeat n 1)]\n     v))", "problem": 33, "user": "4e6a5694535d8ccf87e9fece"}, {"code": "(fn [coll n] \n  (mapcat (partial repeat n) coll))", "problem": 33, "user": "4fe83efbe4b07c9f6fd12c3b"}, {"code": "#(mapcat (apply juxt (repeat %2 identity)) %1)", "problem": 33, "user": "4fedd2cae4b0198f34b063ba"}, {"code": "(fn [coll n]\n  \t(apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "4e6a63fd535d8ccf87e9feda"}, {"code": "#(mapcat (fn [a] (repeat %2 a)) %1)", "problem": 33, "user": "4fe15ffee4b0dd6cd5ce3634"}, {"code": "(fn [s c]\n  (apply concat (map #(take c (iterate identity %)) s)))", "problem": 33, "user": "4ff304f4e4b0678c553fc343"}, {"code": "(fn [coll n]\n  (mapcat #(replicate n %) coll))", "problem": 33, "user": "4ff3df0fe4b0678c553fc355"}, {"code": "(fn [coll n] (mapcat #(repeat n %1) coll))", "problem": 33, "user": "4f03bbf2535dcb61093f6b59"}, {"code": "(fn [lst n]\n  (for [a lst\n        b (repeat n a)] b))", "problem": 33, "user": "4f244f26e4b0d66497709fea"}, {"code": "(fn replicate [xs n]\n  (reduce #(concat %1 (repeat n %2)) (list) xs))", "problem": 33, "user": "4ff2430ae4b0678c553fc336"}, {"code": "(fn [arr, n]\r\n  (mapcat #(repeat n %) arr))", "problem": 33, "user": "4ff201d7e4b0678c553fc330"}, {"code": "(fn [coll n]\r\n  (apply concat\r\n    (map #(for [x (range n)] %) coll)))", "problem": 33, "user": "4ff2ee54e4b0678c553fc340"}, {"code": "(fn [coll times] (mapcat #(repeat times %) coll))", "problem": 33, "user": "4ff50604e4b0678c553fc365"}, {"code": "(fn [l n]\n  (for [x l\n         i (range n)]\n  x))", "problem": 33, "user": "4ff5744ae4b0678c553fc36a"}, {"code": "#(if (= %2 1)\n     %1\n     (apply interleave (take %2 (repeat %1))))", "problem": 33, "user": "4ff4f5c4e4b0678c553fc362"}, {"code": "(fn mdup [c n]\n    (if (empty? c) c\n        (mapcat (fn [i] (repeat n i)) c)))", "problem": 33, "user": "4ff4c9dae4b0678c553fc360"}, {"code": "(fn  [col n]\n  (if (= n 1)\n    col\n    (apply interleave (repeat n col))))", "problem": 33, "user": "4fbf2818e4b081705acca317"}, {"code": "(fn [coll reps]\n  (mapcat #(repeat reps %) coll))", "problem": 33, "user": "4f230adde4b0d66497709fdf"}, {"code": "(fn\n   [coll n]\n   (apply concat (map #(repeat n %) coll))\n   \n   )", "problem": 33, "user": "4ff58b05e4b0678c553fc36b"}, {"code": "(fn\n  [coll n]\n  (mapcat (fn [e] (for [i (range n)] e)) coll))", "problem": 33, "user": "4fee04a0e4b0678c553fc308"}, {"code": "(fn replicate [input, times_each]\n  (apply concat\n         (for [x input] (repeat times_each x))))", "problem": 33, "user": "4ff31e13e4b0678c553fc346"}, {"code": "(fn [coll n]\n  (apply concat (map (partial repeat n) coll)))", "problem": 33, "user": "4ff3e771e4b0678c553fc356"}, {"code": "(fn foo [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "4fe8e719e4b0547ebccb2430"}, {"code": "(fn [x y] (mapcat #(repeat y %) x))", "problem": 33, "user": "4fba77fae4b081705acca2df"}, {"code": "(fn [c n] (mapcat #(repeat n %) c))", "problem": 33, "user": "4e84a7dd535db62dc21a62e2"}, {"code": "(fn [coll n] (mapcat (partial repeat n) coll))", "problem": 33, "user": "4ff6aea8e4b0678c553fc381"}, {"code": "(fn [lst cnt]\n  (if (= cnt 1)\n  lst\n   (apply interleave (repeat cnt lst))))", "problem": 33, "user": "4ff743fde4b0678c553fc38d"}, {"code": "(fn [s n] (mapcat #(repeat n %)s))", "problem": 33, "user": "4ff92cd2e4b0678c553fc3a5"}, {"code": "#((fn dup [s n acc]\n     (if (empty? s)\n       (reverse acc)\n       (dup (rest s) n (into acc (repeat n (first s)))))) %1 %2 nil)", "problem": 33, "user": "4ff355a1e4b0678c553fc34d"}, {"code": "(fn [l c]\n  (mapcat #(repeat c %) l))", "problem": 33, "user": "4fea1f9ee4b0547ebccb248b"}, {"code": "(fn [seq times]\n  (mapcat #(take times (repeat %)) seq))", "problem": 33, "user": "4ff83003e4b0678c553fc396"}, {"code": "(fn [lst n] (mapcat #(repeat n %1) lst))", "problem": 33, "user": "4fe8da4de4b0547ebccb2429"}, {"code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "problem": 33, "user": "4ff9d4e5e4b0678c553fc3b0"}, {"code": "(fn ([s n] (reduce concat (map (partial repeat n) s))))", "problem": 33, "user": "4ff889f2e4b0678c553fc399"}, {"code": "#(reduce (fn [a b] (into a (take %2 (repeat b)))) [] %)", "problem": 33, "user": "4fefd624e4b0678c553fc31b"}, {"code": "(fn [col n]\n  (apply concat (map #(repeat n %) col)))", "problem": 33, "user": "4fe89297e4b07c9f6fd12c4c"}, {"code": "(fn [coll times]\n  (mapcat #(repeat times %) coll))", "problem": 33, "user": "4f92884de4b0dcca54ed6caf"}, {"code": "#(apply mapcat list (repeat %2 %))", "problem": 33, "user": "4ff82b00e4b0678c553fc395"}, {"code": "(fn repl [coll value]\n  (reduce #(concat %1 (take value (iterate identity %2))) [] coll))", "problem": 33, "user": "4feddf2ee4b0198f34b063be"}, {"code": "(fn repl [coll n]\n   (mapcat #(repeat n %) coll))", "problem": 33, "user": "4fe8a3bde4b07c9f6fd12c61"}, {"code": "(fn [xs n] \n  (reduce #(concat %1 (take n (repeat %2))) '() xs))", "problem": 33, "user": "4ffb38e8e4b0678c553fc3c6"}, {"code": "#(mapcat (partial repeat %2)  %1)", "problem": 33, "user": "4ec7c32c535d6d7199dd36e6"}, {"code": "(fn [c n] (apply concat (map #(repeat n %) c)))", "problem": 33, "user": "4ff8a89de4b0678c553fc39d"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4e57d1e2535d8a8b8723a289"}, {"code": "#(apply (if (> %2 1) interleave seq) (repeat %2 %))", "problem": 33, "user": "4ff67852e4b0678c553fc37e"}, {"code": "#(for [x % y (range %2)] x)", "problem": 33, "user": "4e9c3648535dbda64a6f6b7d"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4db2cd84535df7e46ed9b6c6"}, {"code": "(fn [v n] (mapcat #(take n (repeat %)) v))", "problem": 33, "user": "4fdb02aae4b05e33b9224f56"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4fe1a734e4b0dd6cd5ce3637"}, {"code": "(fn replic [lst n]\n  (if (empty? lst)\n    lst\n    (concat (repeat n (first lst)) (replic (rest lst) n))))", "problem": 33, "user": "4ff9cfd6e4b0678c553fc3af"}, {"code": "(fn [xs n] (reduce concat (map #((partial repeat n) %) xs)))", "problem": 33, "user": "4ffa213ee4b0678c553fc3b7"}, {"code": ";; rememnber that reduce while reducing down\n;; to one thing,doesn't have any constraints on\n;; what that thing is.\n\n(fn [lst c]\n  (mapcat #(repeat c %) lst))\n\n;; Can also do like so:\n;(fn [lst c]\n;  (reduce #(concat %1 (repeat c %2))\n;          () lst))", "problem": 33, "user": "4ffe4d43e4b0678c553fc3f1"}, {"code": "(fn [col n]   (loop [res nil c col]\n    (if (empty? c)\n      (reverse (apply concat res))\n      (recur  (conj res (take n (repeat (first c)))) (rest c)))))", "problem": 33, "user": "4e539f7e535d8a8b8723a272"}, {"code": "#(apply concat (map (partial repeat %2) %1))", "problem": 33, "user": "4ff673b3e4b0678c553fc37d"}, {"code": "(fn f [col n] \n    (loop [col1 col, acc []]\n        (if (empty? col1)\n            acc\n            (recur (rest col1) (into acc (repeat n (first col1)))))\n        ))", "problem": 33, "user": "4fe9efe5e4b0547ebccb247a"}, {"code": "(fn rep [[x & rest] n] (when x (concat (repeat n x) (rep rest n))))", "problem": 33, "user": "500159b3e4b0678c553fc419"}, {"code": "(fn [s n]\n  (apply concat (map #(repeat n %) s)))", "problem": 33, "user": "4ec9549d535d6d7199dd36fe"}, {"code": "(fn [c n]\n  (mapcat (fn [e] (map (fn [i] e) (range n))) c))", "problem": 33, "user": "4fff57f1e4b0678c553fc3fe"}, {"code": "(fn [lst tm]                                                        \n            (reduce concat (map #(take tm (repeat %)) lst)))", "problem": 33, "user": "4eed6b32535d93acb0a668bc"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "5003ee7de4b0678c553fc446"}, {"code": "(fn [s times]\n  (reduce (fn [a e] (concat a (map (fn [_] e) (range times))) ) [] s))", "problem": 33, "user": "5003deb9e4b0678c553fc445"}, {"code": "#(for [x % n (range 0 %2)] x)", "problem": 33, "user": "4ffa8affe4b0678c553fc3bd"}, {"code": "(fn [xs reps]\r\n  (reduce concat (for [item xs]\r\n                   (#(take % (repeat %2)) reps item))))", "problem": 33, "user": "50045388e4b0678c553fc44e"}, {"code": "(fn rep\n  ([s n] (rep s n []))\n  ([s n acc]\n    (if (empty? s)\n      acc\n      (rep (rest s) n (vec (concat acc ((fn n-times\n                      ([val n] (n-times val n []))\n                      ([val n acc]\n                        (if (= (count acc) n)\n                          acc\n                          (n-times val n (conj acc val))\n                        )\n                      )\n                    ) (first s) n)))\n      )\n    )\n  )\n)", "problem": 33, "user": "4fff00ede4b0678c553fc3fc"}, {"code": "(fn [seq n] (reduce #(concat %1 (take n (cycle (list %2)))) () seq))", "problem": 33, "user": "5003bb77e4b0678c553fc442"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "problem": 33, "user": "5002b6e5e4b0678c553fc42c"}, {"code": "(fn [x y] (mapcat #(repeat y %) x))", "problem": 33, "user": "4f625f68e4b0defedf855fd2"}, {"code": "(fn[s n]\n  (if (= 1 n) \n    s\n    (apply interleave (repeat n s))))", "problem": 33, "user": "4ec64981535d6d7199dd36c7"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "50052d38e4b0678c553fc45c"}, {"code": "(fn [s,n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4ff76effe4b0678c553fc390"}, {"code": "(fn [x y] (mapcat #(repeat y %1) x))", "problem": 33, "user": "4ff36af7e4b0678c553fc352"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4ffb529be4b0678c553fc3cd"}, {"code": "(fn repete [coll n]\n  (mapcat (fn [x] (take n (iterate (fn [val] val) x))) coll))", "problem": 33, "user": "4fa09916e4b0dcca54ed6d4e"}, {"code": "(fn dupeseq [sequ ct]\n    (apply concat (for [a sequ] (repeat ct a))))", "problem": 33, "user": "50057f23e4b0678c553fc466"}, {"code": "(fn [xs n] (mapcat (partial repeat n) xs))", "problem": 33, "user": "4e4ca885535dc968683fc4df"}, {"code": "(fn [x n] (apply concat (apply map list (repeat n x))))", "problem": 33, "user": "500aa15ee4b03d00572d2d76"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "500933a6e4b046cdb195e074"}, {"code": "(fn [x n]\n  (let [rep (fn [y] (repeat n y))]\n    (apply concat\n      (map rep x))))", "problem": 33, "user": "500cb910e4b05f7c30cfa698"}, {"code": "(fn[seq,n] (mapcat  #(take n(repeat %)) seq))", "problem": 33, "user": "4ffd92e7e4b0678c553fc3e3"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "500d8c49e4b07ccb9a7ddb00"}, {"code": "(fn [l n]  (mapcat #(take n (repeat %)) l))", "problem": 33, "user": "4fe9cea4e4b0547ebccb2471"}, {"code": "(fn [xs n] (reduce concat (map #(repeat n %) xs)))", "problem": 33, "user": "500854c4e4b028e089d3518c"}, {"code": "(fn [c n] (reduce #(apply conj %1 (repeat n %2)) [] c))", "problem": 33, "user": "4fe900a6e4b0547ebccb243a"}, {"code": "(fn repelem [s n]\n  (reduce (fn [res x]\n    (concat res (repeat n x))) [] s))", "problem": 33, "user": "4f50cadce4b03ad3f0c10d0f"}, {"code": "(fn [coll n] (mapcat #(take n (repeat %1)) coll))", "problem": 33, "user": "500900dee4b0144d4f561e42"}, {"code": "(fn [xs n]\n  (reduce\n   (fn [acc x] (concat acc (repeat n x)))\n   []\n   xs))", "problem": 33, "user": "500ff421e4b0ae202717946f"}, {"code": "(fn [l n] (mapcat #(repeat n %) l))", "problem": 33, "user": "4ff9f5c5e4b0678c553fc3b4"}, {"code": "(fn [col n] (mapcat #(repeat n %) col))", "problem": 33, "user": "500d1db4e4b05f7c30cfa69f"}, {"code": "#(if (> %2 1) (apply interleave (repeat %2 %1)) %1)", "problem": 33, "user": "500e6c4ee4b04a05d36fcc05"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4fae0b85e4b081705acca245"}, {"code": "(fn varseq [x y]\n  (mapcat #(repeatedly y (fn [] %)) x))", "problem": 33, "user": "5012aefce4b0c8732600222a"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "500ee13be4b00fff93030fa1"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "5009fd0ae4b03d00572d2d70"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "50052fd0e4b0678c553fc45d"}, {"code": "(fn [coll n](apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "50054b5ce4b0678c553fc45f"}, {"code": "(fn [l n]\n  (mapcat (fn [x] (map (fn [y] x) (range n)))\n          l))", "problem": 33, "user": "4f8320e9e4b033992c121c18"}, {"code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "5007f751e4b0b17c647f522b"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "5014718fe4b094324338f8e3"}, {"code": "#(mapcat (fn [a] (take %2 (repeat a))) %1)", "problem": 33, "user": "5013141de4b0f26a0e3320a9"}, {"code": "(fn [s t]\n  (reduce\n    concat\n    (map\n      (fn [e] (repeat t e))\n      s)))", "problem": 33, "user": "501284d9e4b030d97e4db710"}, {"code": "#(mapcat (fn [s] (take %2 (repeat s))) %1)", "problem": 33, "user": "50142490e4b07d18bdaaf70a"}, {"code": "(fn [a-seq n]\n  (mapcat #(repeat n %) a-seq))", "problem": 33, "user": "4fda8f57e4b05e33b9224f4e"}, {"code": "#(apply mapcat list (repeat %2 %1))", "problem": 33, "user": "5012614ee4b02a085b99dc79"}, {"code": "(fn [initial-coll n]\n  (reduce\n      (fn [coll val]\n        (concat coll (repeat n val)))\n     '() initial-coll))", "problem": 33, "user": "5014754de4b094324338f8e5"}, {"code": "#(if (> 2 %2)\n%\n(apply interleave (repeat %2  %)))", "problem": 33, "user": "50127fbfe4b030d97e4db70f"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "problem": 33, "user": "50166470e4b052339a490e76"}, {"code": "(fn [x,n] \n  (mapcat (partial repeat n) x))", "problem": 33, "user": "500b61b1e4b03d00572d2d81"}, {"code": "(fn [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "4fe4c09ee4b0e8f79898febb"}, {"code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "problem": 33, "user": "4fea9154e4b0140c20fb9c0a"}, {"code": "#(reduce concat(map(partial repeat%2)%1))", "problem": 33, "user": "5017eface4b02f523d7cc5e7"}, {"code": "(fn b [x i] (loop [l x n i e '()] (if (empty? l) e (recur (rest l) n (concat e (repeat n (first l)))))))", "problem": 33, "user": "4fe97adde4b0547ebccb245e"}, {"code": "(fn [xs n] (apply concat (map #(replicate n %) xs)))", "problem": 33, "user": "501688f7e4b052339a490e7a"}, {"code": "(fn [x y] (reduce #(concat %1 ((fn f [a b] (if (= a 0) [] (concat [b] (f (- a 1) b)))) y %2)) [] x))", "problem": 33, "user": "5017f840e4b02f523d7cc5e8"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4ffb43b9e4b0678c553fc3ca"}, {"code": "(fn [c n]\n   (apply (partial mapcat vector) (repeat n c)))", "problem": 33, "user": "500ea957e4b00fff93030f9b"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "4fb7b80ae4b081705acca2d4"}, {"code": "(fn this [w z]\n;(println \"(this \" w \" \" z \")\")\n;(let [ret\n     (\n       (fn clr [li x]\n;         (println \"li: \" li)\n;         (println \"    li: \" li \", x: \" x)\n;         (println \"li: \" li \", prev: \" prev)\n;         (println \"    \" 7 \", \" (list 7))\n;         (println \"    \" (list (first li)))\n;         (println \"    \" (rest li))\n;         (println \"        \" (not-empty li))\n         (if\n           (not-empty li)\n           (concat\n             (take x (repeat (first li)))\n             (clr (rest li) x)\n           )\n           nil\n         )\n       )\n       w\n       z\n     )\n;] (println \"    ret: \" ret) ret)\n  )", "problem": 33, "user": "501819efe4b02f523d7cc5eb"}, {"code": "(fn[coll rep](mapcat #(take rep (repeat %)) coll))", "problem": 33, "user": "4ff2f0a9e4b0678c553fc341"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "500e91aae4b00fff93030f99"}, {"code": "(fn [coll n] (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "50182f53e4b02f523d7cc5ec"}, {"code": "(fn [s times]\n  ((fn [lst acc]\n     (if (empty? lst)\n       (reverse acc)\n       (recur (rest lst) (concat (take times (repeat (first lst))) acc))))\n   s nil))", "problem": 33, "user": "50119c07e4b028e9d38b393f"}, {"code": "(fn [xs n] (apply concat (map (partial repeat n) xs)))", "problem": 33, "user": "501c2dfce4b0539218e73b39"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "501d34f6e4b066e56b9d0b1e"}, {"code": "(fn __\n  [l n]\n  (mapcat #(repeat n %) l))", "problem": 33, "user": "4fa719c0e4b081705acca1bf"}, {"code": "#(apply concat (map (fn [x] (take %2 (repeat x))) %1))", "problem": 33, "user": "501c76eae4b01d3bc87c0201"}, {"code": "(fn [c n] (mapcat (partial repeat n) c))", "problem": 33, "user": "4e260220535deb9a81d77ef0"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4f329974e4b0d6649770a093"}, {"code": "#(if (= %2 1) %1 (apply interleave (take %2 (repeat %1))))", "problem": 33, "user": "500ec491e4b00fff93030f9e"}, {"code": "(fn [x n] (mapcat (fn [y] (repeat n y)) x))", "problem": 33, "user": "4e61bb60535d8ccf87e9fe5c"}, {"code": "(fn [x i] (apply concat (map #(for [n (range i)] % ) x)))", "problem": 33, "user": "5020d033e4b0cb6ebc0a42fa"}, {"code": "(fn [x y]\n (if (= y 1) x (apply interleave (replicate y x))))", "problem": 33, "user": "501c1492e4b086d93747d180"}, {"code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "problem": 33, "user": "4fd2529ae4b04c3a95aa041f"}, {"code": "(fn [s c] (mapcat #(repeat c %) s))", "problem": 33, "user": "4e6a5158535d8ccf87e9fec5"}, {"code": "(fn [s q]\n  (for [x s c (range q)]\n    x))", "problem": 33, "user": "501dfd54e4b051153f3b5b80"}, {"code": "(fn rep [s, n]\n  (mapcat #(take n (repeat %)) s))", "problem": 33, "user": "4fcf642ee4b03432b189f410"}, {"code": "(fn [coll n] \r\n  (reduce #(apply conj %1 (repeat n %2)) [] coll))", "problem": 33, "user": "5025b93ce4b0c969f0b056df"}, {"code": "#(if (> %2 1) (apply interleave (for [x (range %2)] %1)) %1)", "problem": 33, "user": "50223ee2e4b0846bc458ae48"}, {"code": "(fn asdf [x y]\n(mapcat #(take y (iterate identity %)) x)\n\n  )", "problem": 33, "user": "5012036ce4b0a040369c12f4"}, {"code": "( fn   [seq, n ] (apply concat ( map (fn [x]  ( take n ( cycle ( list x )  ) )  ) seq ) ) )", "problem": 33, "user": "5026916fe4b0c969f0b056e1"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4f1af7e4535d64f603146471"}, {"code": "(fn [s n]\n  (loop [s s i 1 res []]\n    (if (empty? s)\n        res\n        (recur (if (= i n) (rest s) s) \n              (if (= i n) 1 (inc i)) \n              (conj res (first s))))))", "problem": 33, "user": "502421ebe4b09f7ee7fb4377"}, {"code": "#(apply mapcat (cons list (repeat %2 %)))", "problem": 33, "user": "5020692be4b0cb6ebc0a42f6"}, {"code": "(fn [s num]\n  (if (> num 1) \n    (apply interleave (repeat num s))\n    s))", "problem": 33, "user": "50270618e4b01614d1633feb"}, {"code": "(fn [s n]\n  (mapcat (partial #(take %1 (repeatedly (constantly %2))) n) s))", "problem": 33, "user": "5027fc0ce4b01614d1633ff2"}, {"code": "#(if (== %2 1) (seq %) (apply interleave (repeatedly %2 (constantly %))))", "problem": 33, "user": "5028cd0fe4b01614d1633ffc"}, {"code": "(fn [l n] (mapcat (partial repeat n) l))", "problem": 33, "user": "502a5fa4e4b09e8f859a9fbd"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "5028bce0e4b01614d1633ffb"}, {"code": "(fn [s n] (apply concat (map #(repeat n %) s)))", "problem": 33, "user": "502ac96de4b0614b5299611b"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "502873a8e4b01614d1633ff8"}, {"code": "(fn [x y] (mapcat #(repeat y %) x))", "problem": 33, "user": "502ad2cae4b0614b5299611f"}, {"code": "(fn [x n] (apply concat (map #(repeat n %) x)))", "problem": 33, "user": "4f2942ace4b0d6649770a01e"}, {"code": "(fn replications [coll amt]\n  (mapcat #(repeat amt %) coll))", "problem": 33, "user": "4efa3d4b535dced4c769f270"}, {"code": "(fn [x n] (reduce concat (map #(take n (repeat %1)) x )))", "problem": 33, "user": "502952c9e4b0b33e9bf6fdf1"}, {"code": "(fn[x y](reduce concat (map #(repeat y %1) x)))", "problem": 33, "user": "4dfb7b81535d04ed9115e77d"}, {"code": "(fn [lst cnt] (mapcat #(repeat cnt %) lst))", "problem": 33, "user": "4ee528fb535d1385b2869d87"}, {"code": "(fn [xs n]\n  (reduce #(concat %1 \n    (repeatedly n (fn [] (identity %2)))) [] xs))", "problem": 33, "user": "502d387fe4b0d96a44ab202f"}, {"code": "(fn [x times]\n  (loop [i x retval '()]\n    (if (seq i)\n      (recur (rest i)\n             (loop [xx times r2 retval]\n               (if (zero? xx)\n                 r2\n  \t\t\t(recur (dec xx) (conj r2 (first i)))\n               )))\n      (reverse retval)\n      )))", "problem": 33, "user": "5020a3fbe4b0cb6ebc0a42f8"}, {"code": "(fn [coll times] (mapcat #(repeat times %) coll))", "problem": 33, "user": "4e47f4f3535dc968683fc4bb"}, {"code": "(fn [l n]\n  (let [rep (fn [i] (repeat n i))]\n    (mapcat rep l)))", "problem": 33, "user": "4e8a880b535d65386fec210d"}, {"code": "#(apply mapcat (conj (repeat %2 %1) list))", "problem": 33, "user": "501fa1aee4b0cb6ebc0a42eb"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "502a4fdfe4b09dd42f6f3644"}, {"code": "(fn repli [list times] (mapcat #(replicate times %1) list))", "problem": 33, "user": "502ed81ee4b06efe12e8cc7b"}, {"code": "(fn [c n]\n  (apply concat (map #(for [x (range n)] %) c)))", "problem": 33, "user": "4fb1325de4b081705acca276"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "502b0804e4b063e52107afad"}, {"code": "(fn foo [x n]\n  (cond\n    (empty? x) nil\n    :else (concat (repeat n (first x))\n            (foo (rest x) n))))", "problem": 33, "user": "4dea9fae535d08e6dec9fe02"}, {"code": "#(if (= 1 %2) %1 (apply interleave (repeat %2 %1)))", "problem": 33, "user": "502904e0e4b0feaf66e22fad"}, {"code": "#(reduce into [] (map (fn[x] (replicate %2 x)) %1))", "problem": 33, "user": "4ff78679e4b0678c553fc392"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "4fb01e53e4b081705acca260"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "5030f16fe4b05b7df5a0b84b"}, {"code": "(fn [s n]\n        (loop [s s x '()]\n          (if (empty? s) (reverse x)\n            (recur (rest s) \n              (loop [n n x x]\n                (if (= n 0) x\n                  (recur (dec n) (cons (first s) x))))))))", "problem": 33, "user": "5029fccee4b023940c84aa47"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "5032b066e4b00c0952a257ea"}, {"code": "(fn [l count] (mapcat #(repeat count %) l))", "problem": 33, "user": "502bb7c0e4b0194ad32ea1a3"}, {"code": "(fn [s n] (reduce concat (map #(repeat n %) s)))", "problem": 33, "user": "503255d0e4b0e78df07b092b"}, {"code": "(fn [xs x]\n  (loop [xs xs\n         result []]\n    (if (not (seq xs))\n      result\n      (recur \n       (rest xs) \n       (into result (#(loop [times %2 result []]\n    (if (= times 0) \n      result\n      (recur (dec times) (conj result %1)))) (first xs) x))))))", "problem": 33, "user": "5032b398e4b00c0952a257eb"}, {"code": "#(for [x %1 y (range %2)] x)", "problem": 33, "user": "50336c6be4b0c6c1199c710f"}, {"code": "(fn [s n] (apply concat (map #(repeat n %) s)))", "problem": 33, "user": "502d39f8e4b0d96a44ab2032"}, {"code": "(fn [l r]\n  (mapcat #(repeat r %) l)\n)", "problem": 33, "user": "4fe610fde4b0e8f79898fece"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "50361b6be4b0fbe0a74d26be"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "5034b0e1e4b062bc5d7ae167"}, {"code": "(fn [x, y] (mapcat #(repeat y %) x))", "problem": 33, "user": "5034a14de4b062bc5d7ae165"}, {"code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "4f57b981e4b0a7574ea7183d"}, {"code": "(fn fc [x y]\n  (if (empty? x)\n    ()\n    (let [d (first x) r (rest x)]\n      (concat (repeat y d) (fc r y))\n    )\n  )\n)", "problem": 33, "user": "5029131ae4b0b6c928ad61ff"}, {"code": "(fn dupli[x y]\n (if (empty? x)\n     ()\n      (let [d (first x) r (rest x)]\n       (concat (repeat y d)(dupli r y)\n       )\n  ))\n  )", "problem": 33, "user": "50291679e4b0b6c928ad6200"}, {"code": "(fn [c n] (mapcat #(repeat n %) c))", "problem": 33, "user": "502a9fdee4b095a7adb898b4"}, {"code": "(fn [s n] \n  (apply concat (map #(repeat n %) s)))", "problem": 33, "user": "5032a96ae4b0e78df07b0932"}, {"code": "#(if (= %2 1)\n   %1\n   (apply interleave (replicate %2 %1)))", "problem": 33, "user": "4ffe8193e4b0678c553fc3f4"}, {"code": "(fn [l n] (mapcat #(repeat n %) l))", "problem": 33, "user": "50352431e4b0a84c1d88f620"}, {"code": "(fn [elts n]\n  (mapcat #(take n (repeat %1)) elts))", "problem": 33, "user": "502940a9e4b061fd216be4b8"}, {"code": "(fn [coll num]\n  (loop [input coll output []]\n    (if (empty? input)\n      output\n      (recur (rest input) (concat output (loop [i 0 rep []]\n        (if (= i num)\n          rep\n          (recur (inc i) (conj rep (first input))))))))))", "problem": 33, "user": "5033a1fbe4b062bc5d7ae155"}, {"code": "(fn [c n]\n  (if (= n 1) \n  c\n  (apply interleave (repeat n c))))", "problem": 33, "user": "4f3ae998e4b0e243712b1f1f"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4ded27db535d08e6dec9fe0a"}, {"code": "(fn [list times]\n     (mapcat (fn [el] (repeat times el )) list))", "problem": 33, "user": "5038f8d2e4b088a6a14ca75f"}, {"code": "#(apply (case %2 1 identity interleave) (take %2 (cycle [%])))", "problem": 33, "user": "503a234de4b088a6a14ca76d"}, {"code": "(fn [lst n]\n  (apply concat (map (partial repeat n) lst)))", "problem": 33, "user": "4f58d92fe4b0a7574ea71858"}, {"code": "(fn [s n]\r\n  (apply mapcat list (repeat n s)))", "problem": 33, "user": "4fdc067fe4b05e33b9224f69"}, {"code": "#(mapcat (fn [x] (take %2 (repeat x))) %)", "problem": 33, "user": "5035503de4b0ed9c821488f8"}, {"code": "(fn [x y] (mapcat #(repeat y %) x))", "problem": 33, "user": "503917a0e4b088a6a14ca763"}, {"code": "(fn [x y] (apply concat (map #(repeat y %) x)))", "problem": 33, "user": "502d4ea0e4b02fc10c6c6e46"}, {"code": "(fn [v n] (mapcat #(repeat n %) v))", "problem": 33, "user": "503b6995e4b07a1917cc34dd"}, {"code": "(fn [c n] (mapcat #(repeat n %) c))", "problem": 33, "user": "4e952463535dbda64a6f6b31"}, {"code": "(fn [coll times] \r\n   (mapcat #(repeat times %) coll))", "problem": 33, "user": "5036dea0e4b0af0658af77a4"}, {"code": "(fn [list-val num-dup]\n   (reduce concat (map (fn [num]\n      (reduce (fn [val1 val2]\n                (conj val1 num))\n                [] (range 0 num-dup)))\n      list-val)))", "problem": 33, "user": "4f03818e535dcb61093f6b00"}, {"code": "(fn [xs n]  (reduce (fn [a x] (concat a (repeat n x))) [] xs))", "problem": 33, "user": "503d129fe4b06c4e0e1fa254"}, {"code": "(fn [col n]\n  (reduce\n    #(apply conj %1 (repeat n %2)) [] col))", "problem": 33, "user": "5033ed65e4b062bc5d7ae15a"}, {"code": "(fn [lst times]\n  (reverse (let [join (fn [la lb]\n               (if (<= (count lb) 0) la\n                   (recur (conj la (first lb)) (rest lb))))]\n    (reduce join (map #(repeat times %) lst)))))", "problem": 33, "user": "503ee85ce4b06c4e0e1fa26e"}, {"code": "(fn [s n]\n  (reduce (fn [a b]\n            (concat a (for [x (range n)] b))\n            )\n          [] s)\n  )", "problem": 33, "user": "503ca47fe4b06c4e0e1fa24f"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4e1047ad535d04ed9115e7bf"}, {"code": "(fn seq-replicate\n  [arr times]\n  (mapcat\n    (fn [x] (repeat times x))\n    arr))", "problem": 33, "user": "4edfb618535d10e5ff6f5343"}, {"code": "(fn [xs c]\n  (mapcat identity (for [x xs] (repeat c x))))", "problem": 33, "user": "4f038ed6535dcb61093f6b24"}, {"code": "(fn [s n] (mapcat (fn [x] (replicate n x)) s))", "problem": 33, "user": "503de5aae4b06c4e0e1fa259"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "5012ec0ae4b0c87326002230"}, {"code": "(fn [-list -t]\n  (mapcat #(repeat -t %) -list))", "problem": 33, "user": "50293245e4b08353e5d459cf"}, {"code": "(fn [s n]\n  (mapcat\n    (fn [x]\n      (take n (repeat x)))\n  s))", "problem": 33, "user": "50427899e4b0add3005c0fc2"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4fd81472e4b0dab7d829f38e"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4fb266a5e4b081705acca28c"}, {"code": "(fn [l n]\n  (apply concat\n    (map #(repeat n %) l)))", "problem": 33, "user": "50435852e4b034ff00315d22"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "50431cbce4b034ff00315d1c"}, {"code": "(fn [col t]\n  (mapcat #(repeat t %) col))", "problem": 33, "user": "5008d149e4b0144d4f561e41"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4db0114d838c48654951d9b8"}, {"code": "(fn rep\n  [xs n]\n  (if (not-empty xs)\n    (concat (take n (repeat (first xs)))\n      (rep (rest xs) n))))", "problem": 33, "user": "4fab1ea1e4b081705acca210"}, {"code": "(fn [arr n]\n  (mapcat (partial repeat n) arr))", "problem": 33, "user": "4e7d9257535db169f9c796dd"}, {"code": ";(fn [coll n]\n;  (if (> n 1) (apply interleave (repeat n coll)) \n;    (seq coll)))\n\n(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "50378996e4b0af0658af77ae"}, {"code": "(fn[coll times](mapcat (fn([x] (repeat times x))) coll))", "problem": 33, "user": "4fc5eb7fe4b0ee37620e1803"}, {"code": "(fn [s n]\n  (reduce #(apply conj (cons % (repeat n %2))) [] s))", "problem": 33, "user": "50464831e4b011c5dfee771f"}, {"code": "(fn [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "50479524e4b0371827a27bc4"}, {"code": "(fn [a b] (mapcat #(repeat b %) a))", "problem": 33, "user": "5046b003e4b011c5dfee7727"}, {"code": "#(mapcat (fn[i] (repeat %2 i)) %1)", "problem": 33, "user": "50432da5e4b034ff00315d1e"}, {"code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "50481532e4b0ec70b3ef8d96"}, {"code": "(fn [s, count]\n   (seq (mapcat (fn [e] \n     (take count (repeatedly #(identity e)))) s)))", "problem": 33, "user": "5048202fe4b0ec70b3ef8d9a"}, {"code": "(fn [x y]\r\n  (reduce #(concat %1 %2)\r\n      (map (partial repeat y) x)))", "problem": 33, "user": "5047bbd1e4b0ec70b3ef8d90"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "503354c3e4b0c6c1199c710c"}, {"code": "(fn [x n]\n   (mapcat (fn [xs] (repeat n xs)) x))", "problem": 33, "user": "4f616892e4b0defedf855fbf"}, {"code": "(fn [coll n] \n  (reduce concat (map #(repeat n %) coll)))", "problem": 33, "user": "504d0116e4b022602c20b089"}, {"code": "(fn rep [s n]\n  (if (empty? s) '()\n    (concat\n      (replicate n (first s))\n      (rep (rest s) n))))", "problem": 33, "user": "504e48ace4b0f6ff3350c498"}, {"code": "(fn [list num]\n  (mapcat #(repeat num %) list))", "problem": 33, "user": "504e685fe4b0f6ff3350c4ae"}, {"code": "(fn [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "504e2600e4b0f6ff3350c46f"}, {"code": "(fn f [s, n]\r\n  (let [[kar & remainder] s]\r\n    (if (empty? s)\r\n      s\r\n      (concat (repeat n kar) (f remainder n))\r\n    )\r\n  )\r\n)", "problem": 33, "user": "5043a536e4b034ff00315d24"}, {"code": "(fn [xs n]\n  (mapcat #(repeat n %) xs))", "problem": 33, "user": "504e13fce4b078edc5f593bc"}, {"code": "(fn [ls n] (mapcat #(repeat n %) ls))", "problem": 33, "user": "504ed350e4b069badc5a33d1"}, {"code": "(fn [col n]\n  (mapcat #(repeat n %) col))", "problem": 33, "user": "4db2cc55535df7e46ed9b6c5"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "problem": 33, "user": "504e397ee4b0f6ff3350c485"}, {"code": "(fn [x y] (mapcat #(repeat y %) x))", "problem": 33, "user": "504eff22e4b0e7ad84dbc4a9"}, {"code": "(fn [l n]\n  (reduce concat\n          (map #(take n (repeat %))\n                l)))", "problem": 33, "user": "504e3afae4b0f6ff3350c488"}, {"code": "(fn [col n] (loop [ret [] c col] (if (empty? c) ret (recur (into ret (take n (repeat (first c) ))) (rest c)))))", "problem": 33, "user": "50463347e4b011c5dfee771e"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "504dff92e4b078edc5f5938a"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "504e14c2e4b078edc5f593bf"}, {"code": "(fn [sq n] (reduce concat (map (partial repeat n) sq)))", "problem": 33, "user": "504e108ce4b078edc5f593b3"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "5041b3c0e4b06d8231e4facf"}, {"code": "#(mapcat (partial (fn [b a] (repeat b a)) %2) %)", "problem": 33, "user": "504457c0e4b01f6c9a8b2360"}, {"code": "(fn [s n] (mapcat (partial repeat n) s))", "problem": 33, "user": "504e9f5ce4b069badc5a33bd"}, {"code": "(fn [sq n] (mapcat #(repeat n %) sq))", "problem": 33, "user": "504f2071e4b0e7ad84dbc4be"}, {"code": "(fn [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "4fc5a693e4b0ee37620e17fc"}, {"code": "(fn replicator [collection times]\n  (mapcat #(repeat times %) collection))", "problem": 33, "user": "5020d2aee4b0cb6ebc0a42fb"}, {"code": "(fn [x y]\r\n  (if (> y 1)\r\n  (apply interleave (repeat y x))\r\n    x))", "problem": 33, "user": "504e2333e4b0f6ff3350c46c"}, {"code": "(fn [xs n] (for [x xs i (range n)] x))", "problem": 33, "user": "5050b107e4b063148f524126"}, {"code": "(fn [xs n] (mapcat #(take n (repeatedly (constantly %))) xs))", "problem": 33, "user": "50456731e4b01f6c9a8b236b"}, {"code": "(fn [coll n] \n  (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "50436470e4b034ff00315d23"}, {"code": "#(apply concat (map (partial repeat %2) %))", "problem": 33, "user": "504f865ee4b0a02f9cffde90"}, {"code": "(fn [col n] (mapcat #(repeat n %) col))", "problem": 33, "user": "50435689e4b034ff00315d21"}, {"code": "(fn [x y]\n     (loop [res [] a x]\n       (if (nil? (first a))\n          res\n         (recur (apply conj res (repeat y (first a))) (rest a)))))", "problem": 33, "user": "5031eb3be4b000fc67a99a84"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "504e1abee4b0f6ff3350c45d"}, {"code": "(fn replicate-element [col times]\r\n  (if-let [[y & ys] (seq col)]\r\n    (concat (repeat times y) (replicate-element ys times))))", "problem": 33, "user": "4e75edfe535d7a570dd295c7"}, {"code": "(fn rep [s n]\n  (if (empty? s)\n    s\n    (concat (repeat n (first s)) (rep (rest s) n))))", "problem": 33, "user": "503e6047e4b06c4e0e1fa266"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "504e04a4e4b078edc5f59397"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "50548ce8e4b0b1b9d1860ead"}, {"code": "#(mapcat (fn [x] (take %2 (repeat x))) %1)", "problem": 33, "user": "50555c06e4b0ce54f56f03fa"}, {"code": "(fn [ls n]\n  (mapcat (fn [x] (repeat n x)) ls))", "problem": 33, "user": "4ff769bce4b0678c553fc38f"}, {"code": "#(if (= 1 %2) %1 (apply interleave (take %2 (repeat %))))", "problem": 33, "user": "4f045946535dcb61093f6bba"}, {"code": "(fn [x n] (rseq ((fn anon [x n]\n  (cond\n    (empty? x) []\n    true (into  (anon (rest x) n)\n((fn rep [x n]\n(cond (= n 0) [] true (cons x (rep x (- n 1))))) (first x) n)\n\n))) x n)))", "problem": 33, "user": "503cc8cae4b06c4e0e1fa251"}, {"code": "(fn [s i]   (reduce concat [] (map #(repeat i %) s)))", "problem": 33, "user": "5055899de4b0ce54f56f03fd"}, {"code": "(fn [coll rep] (apply concat (map #(repeat rep %) coll)))", "problem": 33, "user": "5053de37e4b0b1b9d1860ea8"}, {"code": "(fn rep [xs n]\n  (apply concat\n    (map (partial replicate n)\n      xs)))", "problem": 33, "user": "504f57c7e4b0a02f9cffde71"}, {"code": "(fn [xs n] (reduce concat (map #(repeat n %) xs)))", "problem": 33, "user": "5052ab7ee4b0a561d07d8f20"}, {"code": "(fn rep [xs n] (mapcat (partial repeat n) xs))", "problem": 33, "user": "504f2efae4b0e7ad84dbc4c9"}, {"code": "(fn rep [[h & t] n]\r\n  (if (nil? h)\r\n    h\r\n    (concat (repeat n h)\r\n      (rep t n))))", "problem": 33, "user": "504ec4d3e4b069badc5a33c9"}, {"code": "(fn [s times] (mapcat (partial repeat times) s))", "problem": 33, "user": "503e7f06e4b06c4e0e1fa268"}, {"code": "(fn [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "5042de0de4b034ff00315d1b"}, {"code": "#(mapcat (fn [x](repeat %2 x)) %1)", "problem": 33, "user": "5040edf4e4b0ff5d2cc40db5"}, {"code": "(fn [x n] (reduce (fn [a x] (concat a (repeat n x))) '() x))", "problem": 33, "user": "504f3f13e4b0a02f9cffde60"}, {"code": "(fn replicateit [lat n]\n  (when (not (empty? lat))\n    (concat (repeat n (first lat))\n            (replicateit (rest lat) n))))", "problem": 33, "user": "4eb6f065535d7eef30807372"}, {"code": "(fn [coll n]\r\n    (mapcat #(repeat n %) coll))", "problem": 33, "user": "504f3fa3e4b0a02f9cffde62"}, {"code": "(fn [s n] (if (= n 1) s (apply interleave (take n (repeat s)))))", "problem": 33, "user": "4fca2a13e4b0ee37620e184d"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "50586354e4b06522596eba78"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "5054c853e4b0b1b9d1860eb3"}, {"code": "(fn [ls n]\r\n  (apply concat\r\n         (reduce (fn [x y] (conj x (repeat n y))) [] ls)))", "problem": 33, "user": "4f9aa97ae4b0dcca54ed6d0e"}, {"code": "(fn [x y]\n  (loop [result [] list x]\n    (if (empty? list)\n      result\n      (recur (concat result (repeat y (first list))) (rest list)))))", "problem": 33, "user": "50517ebfe4b0a561d07d8f06"}, {"code": "(fn[col n] (mapcat #(repeat n %) col))", "problem": 33, "user": "4fc6e1a8e4b0ee37620e181d"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "505bd09fe4b032b709c81373"}, {"code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "5041bdf3e4b06d8231e4fad0"}, {"code": "(fn [lst ct] (reduce #(concat %1 (repeat ct %2)) () lst))", "problem": 33, "user": "50563ae2e4b0ce54f56f0405"}, {"code": "(fn [c n]\n  (apply concat (map #(repeat n %) c)))", "problem": 33, "user": "505b9084e4b032b709c81371"}, {"code": "(fn [x y](mapcat #(replicate y %) x))", "problem": 33, "user": "505d26aee4b0e6aca564be05"}, {"code": "(fn rep [x y]\n  (if (empty? x) \n      x\n      (concat (repeat y (first x)) (rep (rest x) y))))", "problem": 33, "user": "50588af1e4b06522596eba7d"}, {"code": "(fn [a b] (mapcat #(repeat b %) a))", "problem": 33, "user": "4f6f777de4b07046d9f4efe5"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "504c8165e4b09724c857af31"}, {"code": "(fn replicate-seq [iseq count] \n  (mapcat (fn [x] (take count (repeat x))) iseq))", "problem": 33, "user": "4f046d70535dcb61093f6bc5"}, {"code": "(fn rep [xs n]\n    (loop [xs xs, i n, res ()]\n      (cond (empty? xs) (reverse res)\n            \n            (zero? i)\n            (recur (rest xs) n res)\n\n            :else\n            (recur xs (- i 1)\n                   (cons (first xs) res)))))", "problem": 33, "user": "5055e7f4e4b0ce54f56f0401"}, {"code": "(fn [x n] (mapcat (fn [xs] (repeat n xs)) x))", "problem": 33, "user": "4ed98b40535d10e5ff6f5307"}, {"code": "(fn [xs n] (apply concat (for [x xs] (repeat n x))))", "problem": 33, "user": "50588ff1e4b06522596eba7e"}, {"code": "(fn [x y]\n  (mapcat #(repeat y %) x))", "problem": 33, "user": "50602bc6e4b08f2a82ad10ba"}, {"code": "(fn [lista veces]\n    (letfn [\n            (replicar [lista1 lista2 veces contador]\n                     (\n                      cond\n                          (= '() lista1) (reverse lista2)\n                          (= 0 contador) (replicar (rest lista1) lista2 veces veces)\n                          :default (replicar lista1 (conj lista2 (first lista1)) veces (- contador 1))\n                       )\n              )\n           ]\n           (replicar lista '() veces veces)\n      )\n  )", "problem": 33, "user": "5058afbbe4b06522596eba81"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "504e8e48e4b069badc5a33b3"}, {"code": "#(reduce concat (map (fn [x] (repeat %2 x)) %1))", "problem": 33, "user": "5048bcf8e4b06e644c63f1ae"}, {"code": "(fn [a k](mapcat #(repeat k %) a))", "problem": 33, "user": "5054bc87e4b0b1b9d1860eb0"}, {"code": "(fn [s n]\n  (reduce #(concat %1 (repeat n %2)) '() s))", "problem": 33, "user": "504ec46de4b069badc5a33c8"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "5060d137e4b0dc10a69545a0"}, {"code": "(fn [coll x] (mapcat #(take x (iterate identity %)) coll))", "problem": 33, "user": "50310b8be4b05b7df5a0b84d"}, {"code": "(fn [l n] (mapcat #(repeat n %) l))", "problem": 33, "user": "505f55d3e4b08f2a82ad10b0"}, {"code": "(fn [l n]\n  (apply concat (map (partial repeat n) l)))", "problem": 33, "user": "504e72cee4b0f6ff3350c4b4"}, {"code": "(fn [xs n]\n  (apply concat (map (partial repeat n) xs)))", "problem": 33, "user": "50630247e4b05ac47bc68d6b"}, {"code": "(fn [xs n] (mapcat identity (map #(replicate n %) xs)))", "problem": 33, "user": "5063b9a0e4b075d771da6f9d"}, {"code": "#(apply concat (map (partial repeat %2) %1))", "problem": 33, "user": "4f84a4a4e4b033992c121c39"}, {"code": "(fn [coll num]\n  (mapcat (fn dup \n                      ([elem] (dup elem num []))\n                      ([elem cont dupcoll] \n                        (if (= cont 0) \n                          dupcoll \n                          (dup elem (- cont 1) (conj dupcoll elem)))))\n              \n                    coll))", "problem": 33, "user": "4fe9ef2fe4b0547ebccb2479"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "502ade49e4b0614b52996120"}, {"code": "(fn [arr a]\n  (reduce #(into % (repeat a %2)) []  arr))", "problem": 33, "user": "5036eba7e4b0af0658af77a5"}, {"code": "(fn [ x n ] (reduce concat (map (partial repeat n) x)))", "problem": 33, "user": "504f191ae4b0e7ad84dbc4ba"}, {"code": "#( mapcat (partial repeat %2) %)", "problem": 33, "user": "505fc8e3e4b08f2a82ad10b6"}, {"code": "#(if (= 1 %2) % (apply interleave (repeat %2 %)))", "problem": 33, "user": "5063fe48e4b075d771da6f9e"}, {"code": "(fn [l,n] \n  (apply concat \n    (map (fn[i] (take n (cycle (list i)))) l)))", "problem": 33, "user": "4f8b05d2e4b02e764a0a5176"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "50645e12e4b007509339a58a"}, {"code": "#(if (= 1 %2) \n  %1 \n\t(apply interleave (map (fn [_] %) (range 0 %2))))", "problem": 33, "user": "50668a06e4b03d366d7cb2b2"}, {"code": "#(mapcat (fn [x] (replicate %2 x)) %)", "problem": 33, "user": "504e3aaae4b0f6ff3350c487"}, {"code": "(fn [s n]\n  (loop [src s result []]\n    (if (empty? src)\n      result\n      (let [h (first src)]\n        (recur (rest src) (apply conj (cons result (take n (repeat h)))))))))", "problem": 33, "user": "504db141e4b021508a333965"}, {"code": "(fn [s x] (mapcat #(repeat x %) s))", "problem": 33, "user": "5065faf9e4b0313a384e5645"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "50657775e4b0deb876850599"}, {"code": "(fn [l n]\n   (apply concat (for [x l]\n     (take n (repeat x)))))", "problem": 33, "user": "50573ed8e4b0012181721987"}, {"code": "(fn [xs n]\n  (#(apply concat %)\n  (for [i xs] (take n (repeat i)))))", "problem": 33, "user": "50611456e4b0dc10a69545a5"}, {"code": "(fn [l n] (mapcat #(repeat n %) l))", "problem": 33, "user": "50015be1e4b0678c553fc41a"}, {"code": "(fn [coll numb]\n  (loop [c coll n numb result []]\n    (if (empty? c) result\n    (recur (rest c) n (loop [n1 n res result c1 c]\n                        (if(zero? n1) res\n                          (recur (dec n1) (conj res (first c1)) c1)))))))", "problem": 33, "user": "50621cbde4b0341461c88951"}, {"code": "(fn [s n] (apply concat (map #(repeat n %) s)))", "problem": 33, "user": "506ab9bae4b05d3b7762c74c"}, {"code": "(fn [xs times]\n    (mapcat (fn [x] (replicate times x)) xs))", "problem": 33, "user": "506b0a9ce4b0a2a5463de380"}, {"code": "#(apply mapcat list (repeat %2 %))", "problem": 33, "user": "5054c7e1e4b0b1b9d1860eb2"}, {"code": "(fn rep[s n]\n  (if (empty? s)\n    s\n    (concat\n      (repeat n (first s))\n      (rep (rest s) n))))", "problem": 33, "user": "504e24e2e4b0f6ff3350c46d"}, {"code": "(fn [s r] (mapcat identity (map #(repeat r %) s)))", "problem": 33, "user": "5057852ce4b0012181721992"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "506e0e5ae4b09350ab4199eb"}, {"code": "(fn [c n]\n  (mapcat #(repeat n %) c))", "problem": 33, "user": "506617c3e4b03d366d7cb2ab"}, {"code": "#(mapcat (fn [x] (take %2 (iterate identity x))) %)", "problem": 33, "user": "506ef8c3e4b09350ab4199f4"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "506fd0afe4b07bd6ad9b9f23"}, {"code": "(fn [x y]\n     (reduce (fn [a b] (concat a (repeat y b)) ) [] x))", "problem": 33, "user": "503efe01e4b06c4e0e1fa26f"}, {"code": "#(mapcat (partial replicate %2) %1)", "problem": 33, "user": "507056b8e4b07bd6ad9b9f29"}, {"code": "(fn [seq n] (mapcat (fn [i] (repeatedly n #(identity i))) seq))", "problem": 33, "user": "50705072e4b07bd6ad9b9f27"}, {"code": "#(loop [s %1 r []]\n  (if (= 0 (count s))\n    r\n    (recur\n      (rest s)\n      (concat r\n        (loop [e (first s) i-n %2 i-r []]\n          (if (= i-n 0)\n            i-r\n            (recur e (dec i-n) (conj i-r e))\n          ))\n    ))\n))", "problem": 33, "user": "5070e31ee4b0e3170b5a8678"}, {"code": "(fn [s r] (reduce #(concat %1 (repeat r %2)) [] s))", "problem": 33, "user": "4f3b5219e4b0e243712b1f2a"}, {"code": "#(if (= %2 1) % (apply interleave (repeat %2 %)))", "problem": 33, "user": "4eb404ba535d7eef3080735a"}, {"code": "(fn [c m] (mapcat #(repeat m %) c))", "problem": 33, "user": "4e77c1db535d324fb2983d72"}, {"code": "#(if (= 1 %2) %1 (apply interleave (repeat %2 %1)))", "problem": 33, "user": "503f872ee4b00d1a725ff2ac"}, {"code": "(fn [coll n]\r\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "5071e520e4b0e3170b5a8683"}, {"code": "#(apply concat (map (partial repeat %2) %1))", "problem": 33, "user": "5071b614e4b0e3170b5a867d"}, {"code": "(fn [xs n] (mapcat #(take n (repeat %1)) xs))", "problem": 33, "user": "4f5595d4e4b0a7574ea71805"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "50729f67e4b0e3170b5a868e"}, {"code": "(fn [v n] (mapcat (fn [e] (repeat n e)) v) )", "problem": 33, "user": "506cc221e4b0a302964c548f"}, {"code": "(fn [sq x] (reduce #(concat  %1 (repeat x %2)) '() sq))", "problem": 33, "user": "50618c62e4b0a30dc9a35d33"}, {"code": "(fn repli\n  [coll times]\n  (loop [s coll result []]\n    (if (empty? s)\n      result\n      (recur (rest s) (concat result (repeat times (first s)))))))", "problem": 33, "user": "5046f909e4b03b02161376b5"}, {"code": "#(for [e %1, i (range %2)] e)", "problem": 33, "user": "506a1985e4b01dc6af13f83e"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "505f5e2fe4b08f2a82ad10b2"}, {"code": "(fn [l n]\r\n  (reduce concat\r\n    (map (fn [x] (repeat n x))\r\n\t       l)))", "problem": 33, "user": "507437c2e4b054001656acd0"}, {"code": "(fn r [l n]\r\n  (reduce (fn [a e]\r\n            (concat a (repeat n e))) '() l))", "problem": 33, "user": "50481b70e4b0ec70b3ef8d98"}, {"code": "(fn [lst n]\n  (mapcat (fn [x] (repeat n x)) lst))", "problem": 33, "user": "4fc7ddffe4b0ee37620e182b"}, {"code": "(fn [xs r]\n  (if (> r 1)\n    (apply interleave (repeat r xs))\n    xs))", "problem": 33, "user": "4ee85476535d93acb0a6687c"}, {"code": "(fn repl-seq [lst num]\n  (apply concat (map #(repeat num %) lst)))", "problem": 33, "user": "50763574e4b0a894bb95bf3d"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4f32ef71e4b0d6649770a098"}, {"code": "(fn [col n] flatten (mapcat #(repeat n %) col))", "problem": 33, "user": "507a08e4e4b08327cd804a67"}, {"code": "(fn [list n] (apply concat (for [x list] (take n (repeat x)))))", "problem": 33, "user": "5073de20e4b054001656acca"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "507a9b29e4b08327cd804a6e"}, {"code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "problem": 33, "user": "506755b3e4b03d366d7cb2bc"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "507b7dbee4b09034bfeeb71e"}, {"code": "(fn [ s n] (reduce #(concat % (repeat n %2)) [] s))", "problem": 33, "user": "50783762e4b0fc74642bff67"}, {"code": "(fn [coll n] (apply concat (map #(take n (iterate identity %)) coll)))", "problem": 33, "user": "4fb1d7ace4b081705acca281"}, {"code": "(fn [x c] (reduce #(apply conj % (repeat c %2)) [] x))", "problem": 33, "user": "505d4b21e4b0e6aca564be07"}, {"code": "#(condp = %2\n  0 nil\n  1 %1\n  (apply interleave (repeat %2 %1)))", "problem": 33, "user": "5074b3ece4b054001656acd5"}, {"code": "(fn [s t] (reduce #(concat % (take t (repeat %2))) [] s))", "problem": 33, "user": "5061cc17e4b0a30dc9a35d34"}, {"code": "(fn [s n]\n  (mapcat (fn [x] (take n (iterate identity x))) s))", "problem": 33, "user": "507db411e4b03c76e5499e06"}, {"code": "(fn [lista n]\r\n  (if (= n 1) lista\r\n    (apply interleave (repeat n lista))))", "problem": 33, "user": "50576483e4b001218172198b"}, {"code": "(fn [v n]\n  (loop [multiplied (list) r v]\n    (if-not (seq r)\n      (reverse multiplied)\n      (recur (into multiplied (repeat n (first r))) (rest r)))))", "problem": 33, "user": "507bb3ece4b09034bfeeb720"}, {"code": "(fn rep [c n]\n  (if-let [[x & xs] (seq c)]\n    (concat (repeat n x) (rep xs n))\n    []))", "problem": 33, "user": "504ffb8fe4b0a02f9cffdeae"}, {"code": "(fn [s n]\n  (reduce #(concat %1 (replicate n %2)) [] s)\n)", "problem": 33, "user": "507eddf4e4b06ce648bcdbfa"}, {"code": "(fn repeat-me [[s & rest] n]\n  (lazy-seq (concat (repeat n s) (when rest (repeat-me rest n)))))", "problem": 33, "user": "50812debe4b01a93d3f38e4c"}, {"code": "#(apply concat (map (partial repeat %2) %))", "problem": 33, "user": "507c7c8be4b0b083f3ff82ef"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4fda108ee4b05e33b9224f46"}, {"code": "(fn f [s n] (mapcat #(take n (repeat %)) s))", "problem": 33, "user": "50799992e4b08327cd804a62"}, {"code": "#(mapcat repeat (repeat %2) %)", "problem": 33, "user": "50807940e4b01a93d3f38e44"}, {"code": "(fn dup [xs k]\n  (apply concat\n    (for [x xs]\n         (repeat k x))))", "problem": 33, "user": "508157b2e4b0946d0443855c"}, {"code": "(fn [s, n]\n (seq  (reduce #(into  (vec %) (vec %2))  (map #(repeat n %) (seq s) ))) )", "problem": 33, "user": "5007cdb9e4b0b17c647f5227"}, {"code": "(fn [s n]\n   (reverse\n   (reduce (fn [l x] (reduce conj l (map (constantly x) (range n))))\n           '()\n           s)))", "problem": 33, "user": "5084cb7de4b0fb8f40674bfb"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4f7beb36e4b06e829148e1ab"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4e72dd5d535d5021c1a89667"}, {"code": "(fn [x y]\n  (mapcat #(for [z (range y)] %) x))", "problem": 33, "user": "507ef25ce4b0f753b6f9788e"}, {"code": "(fn rep[x y] (mapcat #(repeat y %) x))", "problem": 33, "user": "5034b623e4b062bc5d7ae168"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "507a396be4b08327cd804a69"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4db1b5841254ad5b4805fa70"}, {"code": "(fn myf [x y] (\n  if(< y 2)\n  x\n  (myf (#(interleave % %) x) (- y 2))\n))", "problem": 33, "user": "506b437de4b0eda3100c0906"}, {"code": "(fn [c n] (mapcat #(repeat n %) c))", "problem": 33, "user": "507e68abe4b085af06e3afd2"}, {"code": "(fn [l x] (mapcat #(repeat x %) l))", "problem": 33, "user": "5088082ae4b0198722bd9854"}, {"code": "(fn duplicate [coll times]\r\n  (reduce concat (map #(repeat times %) coll)))", "problem": 33, "user": "502ac868e4b0614b5299611a"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "5089fc3ae4b016a21070049f"}, {"code": "(fn [l n] (mapcat #(repeat n %) l))", "problem": 33, "user": "508b95a0e4b0be79e5b189c6"}, {"code": "(fn [coll n] (apply concat (map (partial repeat n) coll)))", "problem": 33, "user": "4db86aee535d1e037afb2193"}, {"code": "(fn [list times]\n  (loop [l list t times ret '()]\n    (if (= (count l) 0)\n      (reverse ret)\n      (recur\n        (rest l)\n        t\n        (loop [item (first l) t times ret ret]\n          (if (= t 0)\n            ret\n            (recur\n              item\n              (- t 1)\n              (cons item ret)\n            )\n          )\n        )\n      )\n    )\n  )\n)", "problem": 33, "user": "4fc8f671e4b0ee37620e1840"}, {"code": "(fn [lst cnt]\n  (mapcat #(repeat cnt %) lst))", "problem": 33, "user": "4dd0e8f7535da60f04a96e57"}, {"code": "(fn [c t] (reduce #(concat %1 ((fn rep [s n]\n  (if (= n 0) s (rep (conj s %2) (dec n)))) [] t)) '() c))", "problem": 33, "user": "505dcfc8e4b0e6aca564be0d"}, {"code": "(fn [coll n] \n  (apply concat (map #(take n (cycle [%])) coll)))", "problem": 33, "user": "506b016de4b0a2a5463de37f"}, {"code": "(fn f [s n]\n  ;; concise\n  (apply concat (map #(repeat n %) s))\n  ;; lazy\n  (when-not (empty? s)\n    (lazy-seq (concat (repeat n (first s)) (f (rest s) n))))\n)", "problem": 33, "user": "50901b2ee4b0ea685a20f774"}, {"code": "(fn [x y]\n (mapcat #(repeat y %1)x))", "problem": 33, "user": "507e5cf8e4b085af06e3afd1"}, {"code": "(fn [coll, x]\n  (reduce #(concat %1 (take x (repeat %2))) '() coll))", "problem": 33, "user": "5084c43be4b0fb8f40674bfa"}, {"code": "(fn [coll n] (mapcat (partial replicate n) coll))", "problem": 33, "user": "506b8242e4b0eda3100c090a"}, {"code": "#(reduce (fn [s x]\n           (concat s (repeat %2 x))) [] %1)", "problem": 33, "user": "509160dae4b0742c82730aef"}, {"code": "(fn [x, n]\r\n  (reduce into []\r\n    (for [i x]\r\n      (repeat n i))))", "problem": 33, "user": "508453abe4b0c98812d07891"}, {"code": "(fn [fir sec] \n  rest (\n    reduce #(concat (repeat sec %2) %1) [] (reverse fir)\n  )\n)", "problem": 33, "user": "508bf05ae4b0f17d83ea26aa"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4e5f034b535d8a8b8723a2d9"}, {"code": "(fn [v n] (reduce #(concat %1 %2) (reduce #(conj %1 (repeat n %2)) [] v)))", "problem": 33, "user": "506717e2e4b03d366d7cb2ba"}, {"code": "(fn replicate[x n]\n  (reduce #(reduce conj %1 (repeat n %2)) [] x))", "problem": 33, "user": "5065bd94e4b0148eb3925aed"}, {"code": "(fn [x n] (reduce #(concat %1 (repeat n %2)) [] x))", "problem": 33, "user": "507fbd77e4b089ade05efbd3"}, {"code": "(fn [coll num]\n  (reduce #(concat %1 (take num (repeat %2))) [] coll))", "problem": 33, "user": "505dd5c4e4b0e6aca564be0e"}, {"code": "(fn [coll n]\r\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "505aa653e4b021387fb89857"}, {"code": "(fn [coll num] \n  (if (< num 2)\n    coll\n    (apply interleave (repeat num coll)))\n  )", "problem": 33, "user": "5089d52ce4b03217b26a539d"}, {"code": "#(apply mapcat list (repeat %2 %))", "problem": 33, "user": "5013193ae4b0f26a0e3320ab"}, {"code": "(fn [xs n] (reduce #(concat %1 (repeat n %2)) [] xs))", "problem": 33, "user": "508ee17ae4b0706b2ed3ef8d"}, {"code": "(fn repl[x y]( let [a (atom [])\r\n                      b (atom x)]   \r\n (loop [k 0]\r\n  (when(< k (count x))\r\n  (loop [l 0]\r\n \t (when(< l y)\r\n       (reset! a (conj @a (first @b)))\r\n \t   (recur (+ l 1))))\r\n    (reset! b (rest @b))\r\n    (recur (+ k 1))))\r\n                 (seq @a)))", "problem": 33, "user": "50646c01e4b007509339a58b"}, {"code": "#(if (< %2 2) % (apply interleave (repeat %2 %)))", "problem": 33, "user": "5089ebfee4b03217b26a539f"}, {"code": "(fn repl [vect n]\r\n  (reduce (fn [v1 v2]\r\n            (concat v1 (take n(repeat v2))\r\n           ) ) \r\n          '() vect))", "problem": 33, "user": "5060c117e4b024449d699b5d"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "5086ca15e4b004985b776e62"}, {"code": "(fn replica\n    ([col n] (replica col (dec n) (dec n) []))\n    ([col n i res] \n      (if (empty? col)\n          res\n          (replica (if (pos? i) col (rest col)) n (if (pos? i) (dec i) n) (conj res (first col))))))", "problem": 33, "user": "50053d6ce4b0678c553fc45e"}, {"code": "#(if (> %2 1) (apply interleave (take %2 (repeat %1))) %1)", "problem": 33, "user": "50813b88e4b09292fd669443"}, {"code": "(fn[x, c] (mapcat #(repeat c %) x))", "problem": 33, "user": "5093ca51e4b097f48cc38585"}, {"code": "(fn [xs y] (mapcat #(repeat y %) xs))", "problem": 33, "user": "4f85a75ce4b033992c121c48"}, {"code": "(fn [xs n]\n  (if (= n 1)\n      xs\n      (apply interleave (take n (repeat xs)))))", "problem": 33, "user": "5097b556e4b00ad8bab4e970"}, {"code": "(fn [x n] (reduce #(concat %1 (repeat n %2)) [] x))", "problem": 33, "user": "5097a95fe4b00ad8bab4e96e"}, {"code": "(fn foo [x y]\n  (if (empty? x) '()\n    (concat ((fn bar [a b]\n        (if (= b 0) '() (concat (list a) (bar a (dec b)))))\n    (first x) y)\n    (foo (rest x) y))))", "problem": 33, "user": "5078300de4b0fc74642bff66"}, {"code": "(fn [coll n]\n  (reduce concat [] (map (fn [x] (repeat n x)) coll))\n)", "problem": 33, "user": "50959df3e4b087f34d351ab4"}, {"code": "#(if (= 1 %2) %1 (apply interleave (repeat %2 %1)))", "problem": 33, "user": "4dbdc898535d020aff1edf4a"}, {"code": "(fn [coll n] \n  (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "5098f5d6e4b0cae2931060a4"}, {"code": "(fn [coll n]\n  (mapcat\n    #(repeat n %)\n      coll))", "problem": 33, "user": "50970f51e4b00ad8bab4e950"}, {"code": "(fn replicates [l n]\n  (reverse\n  (reduce (fn [x y] (\n                      into x (repeat n y) \n                      )) () l)))", "problem": 33, "user": "509b152be4b0412cdea6eb1e"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4f49108ae4b0d56e7bb92be5"}, {"code": "(fn myrep [x y] (mapcat #(repeat y %) x))", "problem": 33, "user": "50982769e4b04e098a4c726a"}, {"code": "(fn [s n]\n  (mapcat #(take n (iterate identity %)) s))", "problem": 33, "user": "50843a4ae4b0c98812d0788b"}, {"code": "(fn [coll n] (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "509dc716e4b08df8156e9e27"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %)", "problem": 33, "user": "50217818e4b00bba4502f7a7"}, {"code": "(fn repl-seq [s n]\n  (let [[fst & rst] s]\n    (if (empty? s)\n      s\n      (concat (take n (repeat fst)) (repl-seq rst n)))))", "problem": 33, "user": "509e8da7e4b08df8156e9e2f"}, {"code": "(fn [s b] \n  (letfn \n    [(rpt [a n]\n       (if (> n 0)\n        (cons a (rpt a (- n 1)))\n        ()))]\n    (apply concat (map #(rpt % b) s))))", "problem": 33, "user": "509f3bc9e4b08df8156e9e39"}, {"code": "(fn [coll n] \n  (apply concat\n    (map #(take n (repeat %)) coll)))", "problem": 33, "user": "508d8ab2e4b0f17d83ea26be"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "50928084e4b097f48cc3856c"}, {"code": "(fn [elements count]\n  (loop [results [], remaining-elements elements, remaining count]\n    (if (empty? remaining-elements)\n      results\n      (if (= 0 remaining)\n        (recur results (rest remaining-elements) count)\n        (recur (conj results (first remaining-elements)) remaining-elements (dec remaining))\n      ))))", "problem": 33, "user": "50a01937e4b08df8156e9e47"}, {"code": "(fn [coll n] (if (= n 1) coll (apply interleave (repeat n coll))))", "problem": 33, "user": "5038381ce4b0803468ea2c6b"}, {"code": "(fn [coll n]\n  (if (= n 1) coll (apply interleave (repeat n coll))))", "problem": 33, "user": "4f2cdd42e4b0d6649770a055"}, {"code": "(fn [z x] (mapcat #(repeat x %) z))", "problem": 33, "user": "50949602e4b04e5742806c4e"}, {"code": "(fn [s y]\n  (reduce concat (map (fn [x] (repeat y x)) s)))", "problem": 33, "user": "50a173e4e4b08df8156e9e68"}, {"code": "(fn [coll n] (if (= 1 n) coll (apply interleave (repeat n coll))))", "problem": 33, "user": "50a2f901e4b029e8bace362a"}, {"code": "(fn\n  [xs x]\n  (reduce concat (map #((fn [y ys c] (if (<= y 0) ys (recur (dec y) (conj ys c) c))) x [] %) xs)))", "problem": 33, "user": "509eeb3be4b08df8156e9e37"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4e0febe6535d04ed9115e7be"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "5098bcfee4b0cae2931060a1"}, {"code": "#(mapcat (partial replicate %2) %)", "problem": 33, "user": "50996a38e4b0cae2931060b3"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "4f956072e4b0dcca54ed6ccf"}, {"code": "(fn [xs n] \n  (apply concat (map #(repeat n %) xs)))", "problem": 33, "user": "5097ea89e4b087ccf61a7af4"}, {"code": "(fn [a b]\n  (reduce #(concat %1 (repeat b %2)) [] a))", "problem": 33, "user": "4f1ae082535d64f603146470"}, {"code": "(fn [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "50981062e4b04e098a4c7268"}, {"code": "(fn fart [s n]\n  (if\n    (empty? s)\n    '()\n    (concat (take n (repeat (first s))) (fart (rest s) n))))", "problem": 33, "user": "508dbd56e4b0f17d83ea26c2"}, {"code": "#(mapcat (partial replicate %2) %)", "problem": 33, "user": "509c03f3e4b085ae113522a8"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "50a7b76de4b090657f4a5cdc"}, {"code": "(fn [coll times]\n  (loop [c coll, tm times, cnt 0, acc []]\n    (if (empty? c)\n      acc\n      (let [h (first c), t (rest c), cn (inc cnt)]\n        (if (not (= tm cn))\n          (recur c tm cn (conj acc h))\n          (recur t tm 0 (conj acc h)))))))", "problem": 33, "user": "50a83794e4b054305ba5a831"}, {"code": "(fn [col n]\n  \t(loop [c (seq col) acc ()]\n      (if (nil? c)\n\t\t\t    (reverse acc)\n          (recur (next c) \n\t\t\t\t    (concat (repeat n (first c)) acc)))))", "problem": 33, "user": "50a6b5e8e4b0aa96157e262a"}, {"code": "(fn [col n]\n  (loop [_col col res []]\n    (let [v (first _col)]\n      (if v\n        (recur (rest _col) (apply conj res (repeat n v)))\n        res))))", "problem": 33, "user": "5027b41ee4b01614d1633fee"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4dbe5390535d020aff1edf5c"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "50a83315e4b054305ba5a830"}, {"code": "(fn [c r] (mapcat #(repeat r %) c))", "problem": 33, "user": "50a4cbbee4b0344e360f3bc2"}, {"code": "(fn [es r] \n  (reduce concat\n    (map\n      #(reduce concat (for [i (range 0 r)] `(~%))) \n      es)))", "problem": 33, "user": "508c3d42e4b0f17d83ea26b2"}, {"code": "(fn [list n] (mapcat (fn [x] (repeat n x)) list))", "problem": 33, "user": "509c2c55e4b085ae113522ab"}, {"code": "#(if (= 1 %2) % (apply interleave (repeat %2 %)))", "problem": 33, "user": "4ed152d5535d44c135fd68cc"}, {"code": "(fn [x n]\n  (reduce #(concat % (repeat n %2)) [] x)\n)", "problem": 33, "user": "50ab8ae3e4b01d6eb43ce9a0"}, {"code": "#(reduce concat (for [x %1] (repeat %2 x)))", "problem": 33, "user": "50982cc7e4b04e098a4c726c"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "50a4f36be4b0344e360f3bc9"}, {"code": "(fn [a c] (mapcat (partial repeat c) a))", "problem": 33, "user": "500ec210e4b00fff93030f9d"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "5092fe10e4b097f48cc3857e"}, {"code": "(fn [coll n]\r\n   (mapcat #(repeat n %) coll))", "problem": 33, "user": "50ab44b2e4b0f65d68208509"}, {"code": "#(mapcat (fn [input](repeat %2 input)) %1)", "problem": 33, "user": "50ae22c3e4b0a40c9cfb08d0"}, {"code": "#(loop [x %1 r []]\n  (if (= (first x) nil)\n    r\n    (recur (rest x) (into r (vec (take %2 (repeat (first x))))))))", "problem": 33, "user": "50a5f72fe4b0aa96157e2611"}, {"code": "(fn [s n]\n  (reduce #(concat % (repeat n %2)) [] s))", "problem": 33, "user": "50aab057e4b056ee0193586b"}, {"code": "(fn [s n] (nth (iterate #(interleave % %) s) (min 2 (dec n))))", "problem": 33, "user": "50ad7888e4b0a40c9cfb08c7"}, {"code": "(fn m [coll times]\r\n\r\n  (mapcat (fn f1 [x]\r\n  (for [i (range times)]x)\r\n  ) coll)\r\n  )", "problem": 33, "user": "50a85af1e4b054305ba5a833"}, {"code": "(fn [x y] (mapcat #(repeat y %) x))", "problem": 33, "user": "5078d366e4b08327cd804a5b"}, {"code": "(fn [lst m] (mapcat (fn [x] (map (fn [_] x) (range m))) lst))", "problem": 33, "user": "50b11fbce4b009df37c708cb"}, {"code": "(fn [x n]\n  (loop [result '() f (first x) t (rest x)]\n    (if f\n      (recur (concat result (take n (repeat f)))\n        (first t) (rest t))\n      result)))", "problem": 33, "user": "50af3393e4b0a40c9cfb08d7"}, {"code": "(fn [coll n] (mapcat (partial repeat n) coll))", "problem": 33, "user": "50afdf00e4b0c3f5ed5c29a5"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4ebbc1f6535dfed6da9c6d72"}, {"code": "#(cond (= %2 1) % :else (apply interleave (repeat %2 %)))", "problem": 33, "user": "5097cfcbe4b00ad8bab4e977"}, {"code": "(fn [s c]  \n   (mapcat #(repeat c %) s))", "problem": 33, "user": "4dad86e0c9a9d6ed0f99dc57"}, {"code": "(fn replicate-33\n  [coll n]\n  (mapcat (partial repeat n) coll))", "problem": 33, "user": "501b1a8ee4b0b12d9c5f4d81"}, {"code": "(fn [x y] (reduce #(concat % (repeat y %2)) [] x))", "problem": 33, "user": "508e13abe4b0f17d83ea26c7"}, {"code": "(fn [coll n]\r\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "50b47c46e4b0c464d223d1b8"}, {"code": "(fn [l n]\n  (reduce concat (map #(take n (repeat %)) l))\n  )", "problem": 33, "user": "50b4b70de4b0c464d223d1bc"}, {"code": "(fn [x c] (reverse (reduce #(apply conj %1 %2 ) (map #(take c (repeat %)) x ))))", "problem": 33, "user": "50956c2be4b087f34d351ab2"}, {"code": "(fn [s n]\n  (case n\n    1 s\n    (apply interleave (repeat n s))))", "problem": 33, "user": "50b67515e4b08fb537db98f3"}, {"code": "(fn [a b] (mapcat #(repeat b %) a))", "problem": 33, "user": "4f253a49e4b0d66497709ff3"}, {"code": "(fn [xs n]\n  (reduce (fn [acc it] (concat acc (for [x (range n)] it))) '() xs))", "problem": 33, "user": "50afa883e4b0c3f5ed5c29a2"}, {"code": "#(apply mapcat list (repeat %2 %1))", "problem": 33, "user": "50b668dde4b08fb537db98f2"}, {"code": "(fn ninter\n  ([s n] (ninter '() s n))\n  ([a s n] (if (empty? s)\n             a\n             (ninter (concat a (repeat n (first s))) (rest s) n)\n           )\n  )\n)", "problem": 33, "user": "50b8de6ce4b0cba0e598b652"}, {"code": "(fn f [nl ol n]\r\n  (if (empty? ol)\r\n    nl\r\n    (let [x (first ol) fa (fn [l x m] (if (= m 0) l (recur (conj l x) x (dec m))))]\r\n      (recur (fa nl x n) (rest ol) n)))) []", "problem": 33, "user": "50b8e9a4e4b0cba0e598b656"}, {"code": "(fn [lst n]\n    (mapcat (fn [x] (repeat n x))\n            lst))", "problem": 33, "user": "50868795e4b004985b776e5e"}, {"code": "#(apply mapcat list (repeat %2 %1))", "problem": 33, "user": "50112acee4b0d82cfac69f4c"}, {"code": "(fn [collection n]\n  (reduce #(concat %1 (repeat n %2)) [] collection))", "problem": 33, "user": "50ba3acae4b03e68e4411c78"}, {"code": "(fn [coll n]\r\n  (mapcat #(take n (iterate identity %)) coll))", "problem": 33, "user": "50ba4b9ee4b03e68e4411c7b"}, {"code": "#(mapcat (partial replicate %2) %1)", "problem": 33, "user": "4f03e7b3535dcb61093f6b7c"}, {"code": "(fn[coll times] \n  (mapcat identity \n          (map #(repeat times %) coll)))", "problem": 33, "user": "506406c8e4b075d771da6f9f"}, {"code": "(fn [l c] \n  (mapcat \n    (fn [i]\n      (repeatedly \n        c #(identity i)\n      )\n    ) l\n  )\n)", "problem": 33, "user": "4f6fe5e4e4b07046d9f4efef"}, {"code": "(fn [s n]\n  (reduce #(concat %1 (repeat n %2)) [] s))", "problem": 33, "user": "50acbd15e4b071b89ef26234"}, {"code": "#(cond\n  (= %2 1) % \n  :else (apply interleave (repeat %2 %1)))", "problem": 33, "user": "50b65966e4b0a86f8358ca6c"}, {"code": "(fn [xs n]\n  (mapcat #(repeat n %) xs))", "problem": 33, "user": "50bd6033e4b0594b91591c66"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "50aca31fe4b071b89ef26230"}, {"code": "(fn test [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "50b0cffae4b009df37c708c5"}, {"code": "(fn repli [x n]\n  (reduce (fn [a y] (concat a (repeat n y))) '() x))", "problem": 33, "user": "50b64b55e4b0a86f8358ca6b"}, {"code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "problem": 33, "user": "50bb646de4b03e68e4411ca3"}, {"code": "#(mapcat (fn[c, n] (take n (repeat c))) % (repeat %2) )", "problem": 33, "user": "4fdf566fe4b05e33b9224f99"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4f327844e4b0d6649770a092"}, {"code": "(fn [l n](mapcat  #(repeat n %1) l))", "problem": 33, "user": "4eeccfc0535d93acb0a668b5"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4f89d489e4b033992c121c7e"}, {"code": "(fn [seq times] (reduce #(apply conj %1 (take times (repeat %2)) ) [] seq))", "problem": 33, "user": "50b51c06e4b0c464d223d1c1"}, {"code": "(fn [lst num] \n  (mapcat #(take num (repeat %)) lst))", "problem": 33, "user": "509251f3e4b09a7d0b586de5"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4f1e4ab5535d64f603146496"}, {"code": "#(if (= 1 %2) %1 (apply interleave (repeat %2 %1)))", "problem": 33, "user": "50921f9ae4b09a7d0b586de1"}, {"code": "(fn[v cnt] (reduce into [] (map #(for [x (range cnt)] %1) v)) )", "problem": 33, "user": "50b25f2ce4b03ea88043355f"}, {"code": "#(\n  \n  reduce concat ( map ( partial repeat %2 ) %1 ) \n)", "problem": 33, "user": "50bf7b72e4b0ffd967a66cc1"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "50afc0f9e4b0c3f5ed5c29a3"}, {"code": "(fn [col n]\r\n (for [x col y (range n)] x ))", "problem": 33, "user": "50bfe725e4b080409b860f26"}, {"code": "(fn foo [lst n]\n  (if (= '() lst)\n  '()\n  (concat (repeat n (first lst)) \n          (foo (rest lst) n))\n  ))", "problem": 33, "user": "50ae5659e4b0a40c9cfb08d2"}, {"code": "(fn [l,n] (reduce #(concat %1 (repeat n %2)) '[] l))", "problem": 33, "user": "50ba5113e4b03e68e4411c7d"}, {"code": "(fn [x n]\n  (loop [xs x res nil]\n    (if (empty? xs)\n      res\n      (recur\n        (drop-last xs)\n        (concat (for [i (range n)] (last xs)) res)))))", "problem": 33, "user": "50478418e4b0371827a27bc3"}, {"code": "(fn [lst n]\n  (mapcat #(repeat n %) lst))", "problem": 33, "user": "4ffc10aae4b0678c553fc3d6"}, {"code": "(fn [c n] (mapcat #(repeat n %) c))", "problem": 33, "user": "50608ea0e4b07251188e4456"}, {"code": "(fn [c n] (mapcat #(repeat n %) c ))", "problem": 33, "user": "50bf74c7e4b0ffd967a66cc0"}, {"code": "(fn replicate-items [li, times] \n  (mapcat #(repeat times %) li))", "problem": 33, "user": "50c84ba2e4b00bb60fe0c53e"}, {"code": "(fn repit [col n]\n  (reduce (fn [cl x] (into cl (repeat n x))) [] col))", "problem": 33, "user": "50c7431ae4b00bb60fe0c531"}, {"code": "(fn [x y]\n  (loop [coll x answer [] i 0]\n    (if (empty? coll)\n       answer\n       (if (< i y)\n          (recur coll (conj answer (first coll)) (+ i 1))\n          (recur (rest coll) answer 0)\n       )\n    )\n  )\n)", "problem": 33, "user": "50bfbf25e4b05ae8c1cbbd9b"}, {"code": "(fn [xs t] (apply (partial mapcat list) (repeat t xs)))", "problem": 33, "user": "50c9e5e3e4b0a409464667d7"}, {"code": "(fn [vec n] (mapcat #(take n (cycle [%])) vec))", "problem": 33, "user": "50c9ece0e4b0a409464667d8"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "50cb4cf6e4b0f78a8e1645b4"}, {"code": "(fn [x,y](mapcat #(repeat y %) x))", "problem": 33, "user": "50c8697ce4b00bb60fe0c53f"}, {"code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "50ca2faee4b0a409464667dc"}, {"code": "#(for [i % j (range %2)] i)", "problem": 33, "user": "50c75d38e4b00bb60fe0c532"}, {"code": "(fn [s n]\n  (loop [original s, result []]\n    (if (seq original)\n      (recur\n        (rest original)\n        (concat result (repeat n (first original))))\n    result)))", "problem": 33, "user": "50b29029e4b03ea880433563"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %)", "problem": 33, "user": "50ae0d24e4b0a40c9cfb08ce"}, {"code": "(fn k [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4f8beb2fe4b02e764a0a5185"}, {"code": "(fn [col n]\n  (reduce concat (map #(repeat n %) col)))", "problem": 33, "user": "50ccf729e4b0f7a459302aac"}, {"code": "(fn [xSeq times] (reduce #(into %1 (repeat times %2)) [] xSeq))", "problem": 33, "user": "50c6fad1e4b00bb60fe0c52d"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %)", "problem": 33, "user": "50503117e4b0a02f9cffdeb5"}, {"code": "(fn [x t] \n  (mapcat #(repeat t %) x))", "problem": 33, "user": "50d04a92e4b00b15ecee975a"}, {"code": "#(mapcat (fn [input](repeat %2 input)) %1)", "problem": 33, "user": "50bc4e73e4b0594b91591c3d"}, {"code": "(fn [s n] (apply concat (map #(take n (repeat %)) s)))", "problem": 33, "user": "50ce09e6e4b0ffc302be4bc6"}, {"code": "(fn rep-seq [seqn n]\n  (let [build-dupes\n        (fn build-dupes [number countdown] \n          (if \n            (> countdown 0) (cons number (build-dupes number (dec countdown)))\n            '()))]\n    (cond\n      (empty? seqn) '() \n      (= n 0) '() \n      (> n 0) (concat (build-dupes (first seqn) n)\n                      (rep-seq (rest seqn) n)))))", "problem": 33, "user": "50d2f044e4b03c62ef244483"}, {"code": "(fn [x y] (for [z (range 0 (* y (count x))) :let [zz (nth x (quot z y))]] zz))", "problem": 33, "user": "4eb0175b535d7eef30807336"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "509b89b3e4b03049c49bd678"}, {"code": "(fn [data n] (mapcat #(repeat n %) data))", "problem": 33, "user": "4f072644535dcb61093f6c20"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "50d0b466e4b00b15ecee9764"}, {"code": "(fn duplicate [l, n]\n   (if\n     (empty? l)\n     l\n     ((fn nTimes [x, n, tail]\n       (if\n         (= n 0)\n         tail\n         (cons\n          x\n          (nTimes\n           x\n           (- n 1)\n           tail))))\n      (first l)\n      n\n      (duplicate\n       (rest l)\n       n))))", "problem": 33, "user": "50d2fa5ce4b049d4ed5650cf"}, {"code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "problem": 33, "user": "50733b31e4b0e3170b5a869a"}, {"code": "(fn [sx a]\n   (mapcat (partial repeat a) sx))", "problem": 33, "user": "50cae881e4b0f75dcc9a6e51"}, {"code": "(fn rn [c n] (if (empty? c) () (let [h (first c) t (rest c)] (concat (repeat n h) (rn t n)))))", "problem": 33, "user": "50d242c0e4b06ad58337ed0f"}, {"code": "(fn [coll x]\n  (apply concat (map #(repeat x %) coll)))", "problem": 33, "user": "50bd13dee4b0594b91591c65"}, {"code": "(fn replicate-seq [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4ecd1143535d23f036227702"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4dad51418e77d6ed55f12a44"}, {"code": "(fn [s n] (reduce #(concat %1 (take n (repeat %2))) [] s))", "problem": 33, "user": "4f03f197535dcb61093f6b84"}, {"code": "(fn [xs n]\n  (reduce #(concat % (repeat n %2)) [] xs))", "problem": 33, "user": "4e71a12c535d5021c1a8964f"}, {"code": "#(apply concat (map (partial repeat %2) %1))", "problem": 33, "user": "50d882d4e4b01f0871336e69"}, {"code": "(fn rep [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "50d4c626e4b09cc622d65a70"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4ff8aa3fe4b0678c553fc39e"}, {"code": "(fn [l n] (mapcat #(repeat n %) l))", "problem": 33, "user": "50d8f4b6e4b01f0871336e74"}, {"code": "(fn [s n] (reduce #(apply conj % (repeat n %2)) [] s))", "problem": 33, "user": "50a8cc97e4b0a9a42786e8db"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "50d916eae4b0fd36a4b89221"}, {"code": "(fn [s n]\n  (mapcat #(take n (repeat %)) s))", "problem": 33, "user": "50d4909ce4b09cc622d65a6c"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "504eb604e4b069badc5a33c4"}, {"code": "(fn [s n] (mapcat #(repeat n %1) s))", "problem": 33, "user": "50b24a2fe4b03ea88043355c"}, {"code": "#(for [x %1 y (range 1 (inc %2))] x)", "problem": 33, "user": "50d179c7e4b05a71a896ef56"}, {"code": "(fn replic [tomb times]\n  (if (empty? tomb)\n     '()\n   (concat (repeat times (first tomb)) (replic (rest tomb) times))\n  )\n)", "problem": 33, "user": "50d3317ee4b049d4ed5650da"}, {"code": "(fn [s n]\n  (if (= n 1)\n    s\n    (apply interleave (partition\n      (count s)\n      (loop [s s\n             n n\n             original s]\n        (if (= n 1)\n          s\n          (recur (concat s original) (dec n) original)))))))", "problem": 33, "user": "50d8de3fe4b01f0871336e72"}, {"code": "(fn [l r] (mapcat #(repeat r % ) l))", "problem": 33, "user": "50cf2267e4b0e61f11ddcd8c"}, {"code": "(fn [coll i] \n  (reduce (fn [r x] (concat r (repeat i x)))\n          '() coll)\n  )", "problem": 33, "user": "5092f940e4b097f48cc3857b"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "50b63309e4b0a86f8358ca68"}, {"code": "(fn n-list [s n-times]\n  (mapcat #(repeat n-times %)\n       s))", "problem": 33, "user": "4f91fd31e4b0dcca54ed6ca8"}, {"code": "(fn [coll n](mapcat #(repeat n %) coll))", "problem": 33, "user": "50de11b2e4b061dbdced7217"}, {"code": "(fn [b a](reverse (apply concat (reduce #(conj %1 (repeat a %2)) '() b))))", "problem": 33, "user": "503539dee4b0ed9c821488f6"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "50ac81b9e4b071b89ef2622f"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4f05a9cf535dcb61093f6bfc"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "5095f761e4b0ba05ca7aebfd"}, {"code": "(fn [s n] (let [times (fn times [x n acc] \n                       (cond (== n 0) acc\n                             :else (times x (- n 1) (conj acc x))\n                             )\n                        )]\n            (reduce (fn [acc x] (times x n acc)) [] s)))", "problem": 33, "user": "50dfb660e4b061dbdced7228"}, {"code": "(fn rep-seq [s n]\n  (if (seq s)\n    (concat (repeat n (first s)) (rep-seq (rest s) n))\n    ()))", "problem": 33, "user": "50a7ef7fe4b090657f4a5ce0"}, {"code": "(fn this [s n]\n  (cond (= (count s) 0) '()\n        :else (concat (repeat n (first s))\n                      (this (rest s) n))))", "problem": 33, "user": "5021f0b3e4b00bba4502f7ac"}, {"code": "(fn [s n] (if (= n 1) (list* s) (apply interleave (repeat n s))))", "problem": 33, "user": "50e0d5a3e4b061dbdced723d"}, {"code": "(fn [s n] (reduce concat (map #(repeat n %) s)))", "problem": 33, "user": "500a214de4b03d00572d2d74"}, {"code": "#(reduce (fn [a b] (apply conj a (map (fn [_] b) (range 0 %2)))) [] %1)", "problem": 33, "user": "50e3ec87e4b0463d32072486"}, {"code": "#(if (= 1 %2)\n   %\n   (apply interleave (repeat %2 %)))", "problem": 33, "user": "50e3f311e4b0463d32072487"}, {"code": "(fn [xs n]\n  (loop [new-xs '()\n         pos      0]\n    (if (= (count xs) pos) \n      (reverse new-xs)\n      (recur (into new-xs (repeat n (nth xs pos))) (inc pos)))))", "problem": 33, "user": "50da34e4e4b0f31830755b3c"}, {"code": "(fn [coll n]\n  (loop [remain coll acc []]\n    (if (empty? remain)\n      acc\n      (recur \n        (rest remain)\n        (apply \n          (partial conj acc)\n          (repeat n (first remain))\n        )\n      )\n    )\n  )\n)", "problem": 33, "user": "50e3cf55e4b01912b3285c45"}, {"code": "(fn reps\n  [col times]\n  \"Repeats each element in the given col the given number of times.\"\n  (mapcat (partial repeat times) col))", "problem": 33, "user": "50b8914ce4b0cba0e598b64d"}, {"code": "(fn [a n] (reduce #(concat %1 (repeat n %2)) [] a))", "problem": 33, "user": "50e3ddd4e4b01912b3285c47"}, {"code": "#(if (= 1 %2) \n     %1\n     (apply interleave (repeat %2 %1)))", "problem": 33, "user": "5099a280e4b0cae2931060bb"}, {"code": "(fn rep [lst ct]\n  (if (empty? lst)\n    []\n    (let [e (first lst)]\n      (concat (repeat ct e) (rep (rest lst) ct)))))", "problem": 33, "user": "50e5bca5e4b09ae9427b0e75"}, {"code": "(fn duplicate-n [seq, n]\n  (if (= n 1)\n      seq\n      (apply interleave (repeat n seq))\n    )\n)", "problem": 33, "user": "50e496e8e4b0cb9ec68fbca0"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "50dade7be4b02e6ac9592c70"}, {"code": "#(seq ((fn [r s x] \n  (reduce \n    (fn [v f] \n      (loop [rv v rf f i 0] \n        (if (< i x) \n          (recur (conj rv rf) rf (inc i))\n          rv)))\n    r s)) [] %1 %2))", "problem": 33, "user": "50e008d1e4b061dbdced722a"}, {"code": "#(mapcat (fn [l] ((partial repeat %2) l)) %)", "problem": 33, "user": "50c4a354e4b0210b849018af"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4dda44f2535d02782fcbe9f1"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4ed90014535d10e5ff6f52fe"}, {"code": "(fn [xs n]\n  (reduce concat (map #(repeat n %) xs)))", "problem": 33, "user": "50e19748e4b0ec0e353386e5"}, {"code": "(fn [sq x] \n  (mapcat #(repeat x %) sq))", "problem": 33, "user": "50e35b2de4b094329ae7f4bb"}, {"code": "#(if (< 1 %2) (apply interleave (repeat %2 %1)) %1)\n\n;; Other solutions use mapcat so I need to review that more", "problem": 33, "user": "50d46d53e4b09cc622d65a69"}, {"code": "(fn [a times] (apply concat (map (fn [x] (repeat times x)) a)))", "problem": 33, "user": "4e2164ff535d04ed9115e815"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4db29f98535df7e46ed9b6c1"}, {"code": "(fn [coll n] (mapcat #(repeat n %1) coll))", "problem": 33, "user": "50e8a340e4b0ebbe794eb7ed"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "50e8ff6be4b0ebbe794eb7f3"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "50e87427e4b0ebbe794eb7e8"}, {"code": "(fn [a b] (mapcat #(repeat b %) a))", "problem": 33, "user": "50e7dd5de4b077ad597af36b"}, {"code": "(fn [x t] (reduce #(concat %1 (repeat t %2)) [] x))", "problem": 33, "user": "50df6dd0e4b061dbdced7225"}, {"code": "(fn repl [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "50e448bae4b0463d3207248d"}, {"code": "(fn [coll repeat-num]\n  (apply concat (for [x coll]\n             (repeat repeat-num x))))", "problem": 33, "user": "50493b52e4b06e84b772a23e"}, {"code": "(fn [s t]\n  (apply concat (for [x s] (for [i (range t)] x))))", "problem": 33, "user": "50bc23e4e4b0594b91591c3c"}, {"code": "(fn [coll n] (mapcat #(repeat n %1) coll))", "problem": 33, "user": "50ed076fe4b01236b1d49837"}, {"code": "(fn replicate-sequence [xs n]\n\t(reduce (fn [acc x] (concat acc (repeat n x))) '() xs))", "problem": 33, "user": "50ed8a5fe4b06330c1f87c3d"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4fd93c42e4b05e33b9224f35"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "50d0d4c8e4b00b15ecee976a"}, {"code": "(fn [coll n] \n  (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "50eead7be4b06330c1f87c60"}, {"code": "(fn [s n] (reduce #(into %1 (take n (repeatedly (fn [] %2)))) [] s))", "problem": 33, "user": "50ed4626e4b01236b1d4983c"}, {"code": "(fn [x y]\n  (apply concat (map #(take y (repeat %)) x)))", "problem": 33, "user": "50ed5d1be4b06330c1f87c37"}, {"code": "(fn [coll n]\n  (reduce concat (map #(repeat n %) coll)))", "problem": 33, "user": "50d86fe2e4b01f0871336e67"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "50ef4e2be4b0a78662fa2653"}, {"code": "#(mapcat (fn x [x] (repeat %2 x)) %)", "problem": 33, "user": "50ef3e5de4b0a78662fa2652"}, {"code": ";; Exploiting the fact that unit tests are not set up properly. Only powers of two. Never do this in a system that is based on powers of two!\n;; #(if (= %2 1) %1 (recur (interleave %1 %1) (quot %2 2)))\n\n#(apply mapcat vector (repeat %2 %1))", "problem": 33, "user": "50ef9a7ae4b0bdaecbb47d9e"}, {"code": "(fn [coll n] (if (= n 1) coll (apply interleave (take n (repeat coll)))))", "problem": 33, "user": "50ed3c6be4b01236b1d4983b"}, {"code": "(fn [lst times]\n  (let [make-series (fn [sym]\n                      (loop [i,times res,[]]\n                        (if (zero? i)\n                          res\n                          (recur (dec i) (cons sym res) ))))]\n    (reduce concat (map make-series lst))))", "problem": 33, "user": "50f0d000e4b0c5f4fa5ddb6f"}, {"code": "(fn [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "50eafeaae4b0346a3e988cbb"}, {"code": "(fn [l n] \n    (mapcat (fn [x] (replicate n x)) l))", "problem": 33, "user": "50e4b066e4b0cb9ec68fbca6"}, {"code": "(fn [x n]\n  (reduce\n    #(concat %1 (repeat n %2))\n    []\n    x))", "problem": 33, "user": "50e4a5a9e4b0cb9ec68fbca3"}, {"code": "(fn [collection ct] (reduce #(concat % (take ct (repeat %2))) [] collection))", "problem": 33, "user": "50ee145de4b06330c1f87c53"}, {"code": "(fn [coll n] (mapcat #(concat (repeat n %)) coll))", "problem": 33, "user": "50ed9e8de4b06330c1f87c44"}, {"code": "(fn [seq reps] (apply mapcat vector (take reps (repeat seq))))", "problem": 33, "user": "4ec1b090535dfed6da9c6db5"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4f43b992e4b0d7d3c9f3fd2c"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "50ec8d93e4b04edc3377704c"}, {"code": "(fn [coll cnt] (reduce #(concat % (take cnt (repeat %2))) [] coll))", "problem": 33, "user": "50ef56dfe4b0bdaecbb47d94"}, {"code": "(fn [coll n] (apply concat\n                    (reduce #(conj % (repeat n %2)) [] coll)))\n\n;; #(mapcat (partial repeat %2) %)", "problem": 33, "user": "503f4759e4b00d1a725ff2a9"}, {"code": "#(apply concat (map (partial repeat %2) %1 ))", "problem": 33, "user": "50d8739ae4b01f0871336e68"}, {"code": "(fn [ls n]\n   (reverse\n     (reduce\n       (fn [acc obj]\n         (into acc (repeat n obj)))\n      '()\n      ls)))", "problem": 33, "user": "50f1dedbe4b0897c4366dcd8"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "50f01f44e4b0bdaecbb47daf"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "50baa66be4b03e68e4411c94"}, {"code": "(fn [seqn n]\n  (mapcat #(repeat n %) seqn))", "problem": 33, "user": "50ca91d8e4b07a9c197b99ac"}, {"code": "(fn [c n]\n  (mapcat #(take n (repeat %)) c))", "problem": 33, "user": "4ebaf790535dfed6da9c6d6e"}, {"code": "(fn [c n] (if (> n 1)(apply interleave (repeatedly n #(identity c))) c))", "problem": 33, "user": "50ebd63ce4b04edc3377703c"}, {"code": "(fn [x y] (mapcat #(repeat y %) x))", "problem": 33, "user": "50f17c0de4b06d9538fe2123"}, {"code": "(fn [coll n]\n  (if (> n 1)\n  \t(apply interleave (repeat n coll))\n    coll\n  )\n)", "problem": 33, "user": "50f0ec9ce4b0d527ce5b30df"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "50e47fa5e4b0cb9ec68fbc9c"}, {"code": "(fn [x n]\n(apply concat (map #(repeat n %) x))\n  )", "problem": 33, "user": "50f4894be4b004d364930528"}, {"code": "(fn [s r]\n  (mapcat #(repeat r %) s)\n  )", "problem": 33, "user": "4edf95a8535d10e5ff6f5342"}, {"code": "(fn [l n] (mapcat #(repeat n %) l))", "problem": 33, "user": "4f98b69ae4b0dcca54ed6cf4"}, {"code": "(fn repl [x n] (\n  if (empty? x) x \n  (loop [l '()] (if (= (count l) n) \n                  (concat l (repl (rest x) n)) \n                  (recur (cons (first x) l))))))", "problem": 33, "user": "50ef311fe4b0a78662fa2651"}, {"code": "(fn [l n] (mapcat #(repeat n %) l))", "problem": 33, "user": "50fb46e6e4b0d10d794c19e5"}, {"code": "(fn [coll n]\n    (mapcat (partial repeat n) coll))", "problem": 33, "user": "50eddbc4e4b06330c1f87c4b"}, {"code": "(fn repeatseq [xs n]\n  (let [[x & rest] xs]\n    (if (empty? rest)\n      (repeat n x)\n      (concat (repeat n x) (repeatseq rest n)))))", "problem": 33, "user": "50bf6f93e4b0ffd967a66cbf"}, {"code": "(fn [c n] (mapcat #(repeat n %) c))", "problem": 33, "user": "50fbf811e4b0d10d794c19f1"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "50e82c31e4b0ebbe794eb7da"}, {"code": "#(apply concat (map (fn [x] (repeat %2 x)) %1))", "problem": 33, "user": "4f55ab5ee4b0a7574ea71809"}, {"code": "(fn [sq n] (apply concat (map #(repeat n %) sq)))", "problem": 33, "user": "50fbdacfe4b0d10d794c19f0"}, {"code": "(fn [coll n] (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "50fe2b87e4b03cd852b4e84b"}, {"code": "(fn [s n] (apply concat (map (partial repeat n) s)))", "problem": 33, "user": "50f9776be4b0e7c80cb15a4e"}, {"code": "(fn rep [xs n] \n  (if (empty? xs) \n    nil \n    (concat (repeat n (first xs)) (rep (rest xs)n))))", "problem": 33, "user": "50ef5703e4b0bdaecbb47d95"}, {"code": "(fn rep [xs, times]\n  (if (empty? xs)\n    '()\n    (concat (repeat times (first xs)) (rep (rest xs) times))))", "problem": 33, "user": "50ed1ce7e4b01236b1d49839"}, {"code": "(fn foo [s n] (if (not (empty? s)) (concat (for [i (range n)] (first s)) (foo (rest s) n)) '()))", "problem": 33, "user": "50f9c7fde4b0e7c80cb15a52"}, {"code": "#(reverse (reduce into (\n  \t\tfor [y %1] (\n              for [x (range %2)] y\n             )\n        )\n))", "problem": 33, "user": "505caadfe4b0bcb5664c3d3e"}, {"code": "(fn [coll n]\n  (mapcat (partial repeat n) coll))", "problem": 33, "user": "50ec4ed7e4b04edc33777046"}, {"code": "(fn\n  [xs n]\n  (mapcat #(replicate n %) xs))", "problem": 33, "user": "51008b6fe4b0700a7a02d6e4"}, {"code": "(fn [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "4dd59d8b535dae65d5c462eb"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "50928ecfe4b097f48cc38570"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "5006b7d2e4b0678c553fc48c"}, {"code": "(fn [sqn repeats] (mapcat (fn [x] (take repeats (repeat x))) sqn))", "problem": 33, "user": "50f2e5cee4b0ec8ee6fa8643"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "51040eb2e4b0432126ba9bb4"}, {"code": "(fn [coll n] (reduce #(concat % (repeat n %2)) [] coll))", "problem": 33, "user": "50d93c53e4b0fd36a4b89223"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "51059d33e4b0380e797c7d5c"}, {"code": "#(if (<= %2 1)\n   %1\n   (apply interleave (repeat %2 %1)))", "problem": 33, "user": "5103807fe4b00c483ae17703"}, {"code": "(fn re [s n]\n  (reduce (fn [c e] (concat c (repeat n e) )) [] s ))", "problem": 33, "user": "5101192ae4b0bef64c30e266"}, {"code": "(fn reps\n\t([s c] (reps s () c c))\n\t([s o c cc] \n\t\t(if\n\t\t\t(= s ())\n\t\t\to\n\t\t\t(if\n\t\t\t\t(= cc 0)\n\t\t\t\t(reps (reverse (rest (reverse s))) o c c)\n\t\t\t\t(reps s (cons (first (reverse s)) o) c (- cc 1)))))\n)", "problem": 33, "user": "50f84d85e4b0aafb827eb1f7"}, {"code": "(fn [xs n] \n  (loop [x xs i '()] \n    (if (empty? x) \n      i \n      (recur (rest x) (concat i (repeatedly n #(first x)))))))", "problem": 33, "user": "504e9011e4b069badc5a33b7"}, {"code": "#(if (> %2 1)\n     (apply interleave (repeat %2 %))\n     %)", "problem": 33, "user": "5102489de4b00c483ae176f6"}, {"code": "(fn [s n]\n  (if (> n 1) (apply interleave (take n (repeat s)))\n    s))", "problem": 33, "user": "5106bc8ae4b01150e115ebec"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "51095588e4b0e34872b3efa5"}, {"code": "(fn [l n] (mapcat #(repeat n %) l))", "problem": 33, "user": "508c33ece4b0f17d83ea26b1"}, {"code": "(fn dup-seq-n-times [coll n]\n  (mapcat #(repeat n %) coll)\n  )", "problem": 33, "user": "510a3cd4e4b06956752d35ad"}, {"code": "(fn dd [l c] (if (empty? l) '() (concat (repeat c (first l)) (dd (rest l) c))))", "problem": 33, "user": "510931ede4b0c71f76895663"}, {"code": "(fn [xs n]\n  (mapcat #(repeat n %) xs)\n)", "problem": 33, "user": "510cda21e4b078ea71921126"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "50fac9e3e4b07934dda8b0d1"}, {"code": "(fn rep [lst n]\n(mapcat #(take n (repeat %)) lst))", "problem": 33, "user": "4fdf5403e4b05e33b9224f98"}, {"code": "#(apply concat (apply map list (repeat %2 %1)))", "problem": 33, "user": "510db6cde4b078ea71921145"}, {"code": "#(reduce concat '() (for [x %1] (repeat %2 x)))", "problem": 33, "user": "5047782ce4b0371827a27bc2"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "51085be5e4b00aa5c85a1024"}, {"code": "(fn [S n](mapcat #(repeat n %) S))", "problem": 33, "user": "5107b86de4b05b2b4eee7495"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "510d9d61e4b078ea71921141"}, {"code": "(fn [coll n] (loop [final []\n                    remain coll]\n               (let [attach (repeat n (first remain))]\n                 (if (empty? remain)\n                   (seq final)\n                   (recur (into [] (concat final attach)) (next remain))))))", "problem": 33, "user": "507a33dee4b08327cd804a68"}, {"code": "(fn [v n]\n  (mapcat #(repeat n %) v))", "problem": 33, "user": "4e964f4a535dbda64a6f6b42"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4f23e1cde4b0d66497709fe4"}, {"code": "#(loop [result [] col %1]\n                              (if (empty? col) result\n                                (recur (loop [r result w (first col) t %2] (if (= 0 t) r (recur (conj r w) (identity w) (dec t)))) (rest col)))\n                              )", "problem": 33, "user": "510d3dc6e4b078ea71921132"}, {"code": "(comp (partial apply mapcat list) #(repeatedly %2 (constantly %1)))", "problem": 33, "user": "51105c7fe4b04c71fce993ef"}, {"code": "(fn r [[x & xs] n]  \n  (concat (repeat n x) (if (nil? xs) nil (r xs n))))", "problem": 33, "user": "50eebf46e4b06330c1f87c61"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "5102ac9de4b00c483ae176fa"}, {"code": "#(apply concat (map (partial repeat %2) %))", "problem": 33, "user": "511026b1e4b04c71fce993ec"}, {"code": "(fn [a n] (reduce #(concat %1 (take n (repeat %2)) ) () a) )", "problem": 33, "user": "510b704ee4b078ea71921100"}, {"code": "(fn [xs n] (apply concat (map (partial repeat n) xs)))", "problem": 33, "user": "4fc53390e4b081705acca389"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "511278bbe4b0350614f07a75"}, {"code": "(fn [coll n]\n  (reduce\n   (fn [acc el]\n     (into acc (repeat n el)))\n   []\n   coll))", "problem": 33, "user": "50cd0fd5e4b0f7a459302aad"}, {"code": "#(apply concat (map \n\t  (fn [x]\n\t    (repeat %2 x)) %1))", "problem": 33, "user": "50d3b03fe4b030b634c368b9"}, {"code": "#(mapcat (fn [input](repeat %2 input)) %1)", "problem": 33, "user": "51064b76e4b01150e115ebe4"}, {"code": "(fn [xs n]\n  (reduce into [] (map (fn [x] (repeat n x)) xs)))", "problem": 33, "user": "511442d0e4b0e9c109bb74d5"}, {"code": "#(if (> %2 1) (apply interleave (replicate %2 %1 )) %1)", "problem": 33, "user": "50bce014e4b0594b91591c63"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "5081566ce4b0946d0443855b"}, {"code": "(fn [xs n]\n  (reduce \n   (fn [xs1 y]\n     (apply conj xs1 (repeat n y)))\n   [] xs))", "problem": 33, "user": "50b35486e4b03ea88043356a"}, {"code": "(fn [seq1 c]\n  (loop [endresult [] elements seq1]\n    (if (empty? elements)\n      endresult\n      (recur\n        (into endresult \n         ((fn [a x]\n\t\t\t\t\t  (loop [result [] index 0]\n\t\t\t\t\t    (if (= index x)\n\t\t\t\t\t      result\n\t\t\t\t\t      (recur (conj result a) (inc index))\n\t\t\t\t\t      )    \n\t\t\t\t\t    )  \n\t\t\t\t\t  ) (first elements) c)                                     \n              )\n        (rest elements)\n        )            \n      )\n    )\n  )", "problem": 33, "user": "5106dc1be4b01150e115ebf0"}, {"code": "(fn [coll cnt] (reduce #(concat %1 (replicate cnt %2)) [] coll))", "problem": 33, "user": "50e4f4e9e4b049a987753896"}, {"code": "(fn [xs n] (mapcat (partial repeat n) xs))", "problem": 33, "user": "5114ab7be4b0ce5098ee73b5"}, {"code": "#(mapcat (fn [a] (take %2 (repeat a))) %1)", "problem": 33, "user": "50e3e108e4b01912b3285c48"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4fe8fda4e4b0547ebccb2438"}, {"code": "#(if (= 1 %2) %1 (apply interleave (repeat %2 %1)))", "problem": 33, "user": "50589113e4b06522596eba7f"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "50bfb5fbe4b05ae8c1cbbd9a"}, {"code": "(fn dup [coll x]\n  (apply concat\n    (for [item coll]\n      (repeat x item))))", "problem": 33, "user": "51195e77e4b055cfb310d499"}, {"code": "(fn [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "50742549e4b054001656accf"}, {"code": "#(reverse((fn rrep [vv mm mo res] \n  (if \n    (> mm 0)\n    (rrep vv (- mm 1) mo (cons  (first vv) res))\n    (if \n      (empty? (rest vv)) \n  res \n  (rrep (rest vv) mo mo res))\n  ) ) %1 %2 %2 '()))", "problem": 33, "user": "50dc2cd7e4b02e6ac9592c86"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "5018ed15e4b011a2e0bf6412"}, {"code": "(fn repseq [items n]\n  (if (empty? items)\n    '()\n    (concat (repeat n (first items)) (repseq (rest items) n))))", "problem": 33, "user": "510cd1dde4b078ea71921124"}, {"code": "(fn [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "5115cf87e4b0ce5098ee73c3"}, {"code": "(fn [a b] \n  (if (= b 1)\n    a\n    (apply interleave (take b (cycle (vector a))))))", "problem": 33, "user": "4e74e119535d7a570dd295bc"}, {"code": "(fn my-replicate\n  [items n]\n  (mapcat #(repeat n %) items))", "problem": 33, "user": "511720eae4b0063b4e3e16da"}, {"code": "#(reduce concat (map (partial repeat %2) %1))", "problem": 33, "user": "51181009e4b0e0897831a60f"}, {"code": "(fn replicate [s n]\n  (if (empty? s) s\n    (concat (repeat n (first s)) (replicate (rest s) n))))", "problem": 33, "user": "5119f3d5e4b06c8af0111818"}, {"code": "(fn [l i] (mapcat #(repeat i %) l))", "problem": 33, "user": "4ecc1d85535d23f0362276f8"}, {"code": "(fn [x y] \n  (reverse (loop [r '()\n                  c x]\n            (if (empty? c)\n                r\n              (recur (reduce conj r (take y (iterate (fn [x] x) (first c)))) (rest c))))))", "problem": 33, "user": "511b810ce4b07ab9ec456182"}, {"code": "(fn toto [x y] (if (= '() x) '() (concat (take y (repeat (first x))) (toto (rest x) y))))", "problem": 33, "user": "511ba290e4b00c2a1fa7ff70"}, {"code": "#(mapcat (fn[x] (take %2 (repeat x))) %1)", "problem": 33, "user": "511c91ace4b00c2a1fa7ff7a"}, {"code": "#(cond \n  (= %2 1) %1\n  :else (apply interleave (repeat %2 %1))\n)", "problem": 33, "user": "511cca27e4b00c2a1fa7ff7d"}, {"code": "#(mapcat identity (for [c %] (repeat %2 c)))", "problem": 33, "user": "50b45ee1e4b08fc3808f30ca"}, {"code": "#(mapcat (fn rep [a] (repeat %2 a)) %1)", "problem": 33, "user": "5119ef37e4b06c8af0111817"}, {"code": "(fn [xs n]\n  (if (= n 1) xs (apply interleave (replicate n xs))))", "problem": 33, "user": "511623cbe4b0d4f670fd2fe1"}, {"code": "(fn [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "4e50ad74535dc968683fc4ec"}, {"code": "(fn [a b] (reduce (fn [c d](concat c (repeat b d))) '() a))", "problem": 33, "user": "511ac026e4b0c87c59c9670e"}, {"code": "(fn [coll n]\n  (mapcat (partial repeat n) coll))", "problem": 33, "user": "4f702dcae4b07046d9f4eff4"}, {"code": "(fn [c n] (mapcat (partial repeat n) c))", "problem": 33, "user": "50cf94bde4b0abc485cb9bb2"}, {"code": "(fn [s n]\n  (reverse (reduce #(apply conj %1 (take n (repeat %2))) '() s)))", "problem": 33, "user": "511c44fde4b00c2a1fa7ff77"}, {"code": "(fn [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "4fca4c37e4b0ee37620e184f"}, {"code": "(fn rep [s n]\n  (if (= s [])\n    []\n    (concat (replicate n (first s)) (rep (rest s) n))))", "problem": 33, "user": "5100d7dbe4b04f1d96d946df"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "511f88eee4b085952a83535f"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "50f9739ce4b0e7c80cb15a4d"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %)", "problem": 33, "user": "511ac2ede4b0c87c59c9670f"}, {"code": "(fn [x c]\n  (loop [x x\n         v '()]\n    (if (nil? (first x))\n      v\n      (recur (rest x)\n             (concat v (repeat c (first x)))))))", "problem": 33, "user": "5123ac8ee4b061b4c6f0e0b1"}, {"code": "(fn [coll n]\n  (reduce #(into %1 (repeat n %2)) [] coll))", "problem": 33, "user": "4fc8769be4b0ee37620e1833"}, {"code": "#(if (> %2 1)\n   (apply interleave (repeat %2 %))\n   %)", "problem": 33, "user": "512474ede4b02c3f2a072cce"}, {"code": "(fn [l n] (mapcat #(repeat n %) l))", "problem": 33, "user": "50e54fe4e4b049a9877538a0"}, {"code": "(fn [l n]\r\n\t(mapcat #(repeat n %1) l)\r\n)", "problem": 33, "user": "510a6bece4b06956752d35af"}, {"code": "(fn [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "510acd6ee4b078ea719210f4"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "5125745ae4b05d10e3e395f9"}, {"code": "(fn [l n]  (mapcat #(repeat n %) l))", "problem": 33, "user": "4fbbcf0ce4b081705acca2ee"}, {"code": "#(if (= %2 1) % (apply interleave (for [x (range %2)] %)))", "problem": 33, "user": "51256b40e4b05d10e3e395f8"}, {"code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "problem": 33, "user": "51284226e4b03a34742b4308"}, {"code": "#(if (< 1 %2)\n   (apply interleave (repeat %2 %1))\n   %1)", "problem": 33, "user": "51281b25e4b03a34742b4304"}, {"code": "#(apply concat \n  (map \n   (fn [number] \n     ((fn baf [times ] \n       (if (= times 0) [] (conj (baf (dec times)) number))\n     ) %2)\n   ) %1\n  )\n)", "problem": 33, "user": "5127ca90e4b03a34742b42ff"}, {"code": "#(if (> %2 1) (apply interleave (repeat %2 %1)) %1)", "problem": 33, "user": "5127e504e4b03a34742b4302"}, {"code": "(fn [col cnt] (reduce #(concat % (repeat cnt %2)) nil col))", "problem": 33, "user": "511618b1e4b0d4f670fd2fdf"}, {"code": "(fn [coll n] (if (= 1 n) coll (apply interleave (repeat n coll))))", "problem": 33, "user": "51170b49e4b0063b4e3e16d9"}, {"code": "#(mapcat (fn [x] (take %2 (repeat x))) %1)", "problem": 33, "user": "4e9a1512535dbda64a6f6b6e"}, {"code": "(fn [sx n] (mapcat #(for [i (range n) ] %) sx))", "problem": 33, "user": "511a0374e4b06c8af011181a"}, {"code": "(fn [coll n] (mapcat (partial repeat n) coll))", "problem": 33, "user": "5125834ae4b05d10e3e395fa"}, {"code": "(fn [x y] (reduce #(concat %1 (repeat y %2)) [] x))", "problem": 33, "user": "5105ed16e4b01150e115ebe2"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "5121cccee4b05ae5a5823c12"}, {"code": "(fn [coll n] (apply concat (map (partial repeat n) coll)))", "problem": 33, "user": "5126dbabe4b083bb8f88cf0e"}, {"code": "(fn [coll n] \n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4dada426c9a9d6ed2a99dc57"}, {"code": "#(loop [x %1 f %2 z []]\n       (if (empty? x)\n         z\n         (recur (rest x) f (concat z (repeat f (first x))))))", "problem": 33, "user": "4e028764535d04ed9115e790"}, {"code": "(fn [a n] (mapcat #(list* (repeat n %)) a))", "problem": 33, "user": "5125d963e4b05d10e3e395fe"}, {"code": "(fn [s n] (if (> n 1) (apply interleave (repeat n s)) s))", "problem": 33, "user": "512b9e59e4b04d059cf1fd17"}, {"code": "(fn r [l x]\n  (cond (empty? l) l\n        (= x 1) l\n    \t(empty? (rest l)) (cons (first l) (r l (dec x)))\n        :else   (concat (r (take 1 l) x) (r (rest l) x))))", "problem": 33, "user": "502d3912e4b0d96a44ab2030"}, {"code": "(fn replicator\n  ([original num_of_copies results]\n    (cond\n      (empty? original) results\n    :else\n      (recur (rest original)\n              num_of_copies\n              (concat results\n                (\n                  (fn lister\n                    ([elm n results]\n                      (cond\n                        (= n 0) results\n                        :else\n                        (recur elm (- n 1) (cons elm results))\n                        )\n                      )\n                    ([elm n] (lister elm n '()))\n                  )\n                  (first original) num_of_copies\n                )                   \n              )\n      )\n    )\n  )\n  ([original num_of_copies] (replicator original num_of_copies '()))\n)", "problem": 33, "user": "502be4fae4b08f5602f232eb"}, {"code": "(fn [coll n] (if (= n 1)\n               coll\n               (apply interleave (replicate n coll))))", "problem": 33, "user": "510fd798e4b04c71fce993dc"}, {"code": "(fn [l c] (apply concat (map #(repeat c %) l)))", "problem": 33, "user": "510dc185e4b078ea71921146"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "problem": 33, "user": "512d3304e4b040332b905b2d"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4ff2ff7ce4b0678c553fc342"}, {"code": "#(if (> %2 1) (apply interleave (repeat %2 %)) %)", "problem": 33, "user": "510967aae4b07c05fdf6dc0f"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4f525fdce4b03ad3f0c10d37"}, {"code": "(fn [n c] \n  (if (= c 1) n\n  (apply interleave (for [i (range c)] n))))", "problem": 33, "user": "512f06c5e4b0762be4c7aad7"}, {"code": "(fn dup2 [s n]\n  (reduce (fn [x y] (concat x (repeat n y))) () s))", "problem": 33, "user": "512eb723e4b0b740abc5982b"}, {"code": "(fn [xs n] (for [x xs y (range n)] x))", "problem": 33, "user": "51307b84e4b08c712d3fae39"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4e55b3dc535d8a8b8723a27f"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "511d11d7e4b022853b0e079f"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "50d3ec8be4b030b634c368bb"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "51057b2be4b06d28cacc92e8"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "5132c6f0e4b021281ec7b6d3"}, {"code": "(fn [s n] (mapcat #(replicate n %) s))", "problem": 33, "user": "5117c31ee4b0e0897831a60c"}, {"code": "(fn [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "50fa01bce4b07934dda8b0ba"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "511b9017e4b00c2a1fa7ff6b"}, {"code": "(fn [s n] (apply concat (map #(repeat n %) s)))", "problem": 33, "user": "512f2d17e4b0762be4c7aad8"}, {"code": "(fn [col rep-cnt] (mapcat #(repeat rep-cnt %1) col))", "problem": 33, "user": "512b7a05e4b04d059cf1fd14"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "5128554ee4b03a34742b430a"}, {"code": "(fn [s n] (for [e s, i (range n)] e))", "problem": 33, "user": "5133af1de4b0d7a043de8cf2"}, {"code": "#(apply concat (for [i %1] (repeat %2 i)))", "problem": 33, "user": "512eb1e7e4b0b740abc5982a"}, {"code": "(fn [obj n] (mapcat #(repeat n %) obj))", "problem": 33, "user": "5131e14be4b06942423563cb"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "50ed8fd1e4b06330c1f87c3f"}, {"code": "#(loop [lst %1 ret []]\n   (if (empty? lst)\n     ret\n     (recur (rest lst) (concat ret (repeat %2 (first lst))))))", "problem": 33, "user": "51000111e4b00d7ad4cab15e"}, {"code": "(fn replic\n  [sq n]\n  (apply concat (map #(repeat n %) sq)))", "problem": 33, "user": "504e12ade4b078edc5f593b7"}, {"code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "problem": 33, "user": "50366589e4b0fbe0a74d26c3"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "problem": 33, "user": "4de52c87535d08e6dec9fdf0"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "51364acfe4b04ac1f358dd51"}, {"code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "51367626e4b04ac1f358dd53"}, {"code": "(fn [s n] (reduce #(concat % (repeat n %2)) [] s))", "problem": 33, "user": "4f55f4b1e4b0a7574ea7180d"}, {"code": "#(apply mapcat list (repeat %2 %1))", "problem": 33, "user": "5137c3b0e4b0509a8b470482"}, {"code": "(fn [xs, n]\n  (reduce concat (map #(replicate n %) xs))\n)", "problem": 33, "user": "51365524e4b04ac1f358dd52"}, {"code": "(fn [l n] (mapcat (partial repeat n) l))", "problem": 33, "user": "51352899e4b082aeb3a3f03b"}, {"code": "(fn [s n]\n  (apply concat (map (partial repeat n) s)))", "problem": 33, "user": "5139ff96e4b067e25a345ec1"}, {"code": "(fn [a b] (mapcat #(repeat b %) a))", "problem": 33, "user": "5124619ae4b02c3f2a072ccd"}, {"code": "(fn [l t] (mapcat #(repeat t %) l))", "problem": 33, "user": "50e3fe8fe4b0463d32072488"}, {"code": "(fn [col n] (if (= 1 n) col (apply interleave (repeat n col))))", "problem": 33, "user": "513a4babe4b067e25a345eca"}, {"code": "(fn [xs n] (reduce #(concat %1 (replicate n %2)) '() xs))", "problem": 33, "user": "513d121fe4b0e544971636a2"}, {"code": "#(apply concat (for [e %] (repeat %2 e)))", "problem": 33, "user": "5138d08be4b0a5db03d727db"}, {"code": "(fn [col n](apply concat (map #(take n (repeat %)) col)))", "problem": 33, "user": "513de0e6e4b0825f97f7f965"}, {"code": "(fn [a b]\n  (reduce concat\n          (map \n            (fn [x] \n              ((fn tmp [e f] \n                 (if (= f 1) \n                   [e] \n                   (conj (tmp e (dec f)) e))) \n               x b)) \n            a)))", "problem": 33, "user": "513b77f3e4b00f740c76c403"}, {"code": "(fn [coll n] (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "513f0565e4b051389b345b3b"}, {"code": "(fn [items n]\n\t\t(reduce\n\t\t\t(fn [result item] (concat result (repeat n item)))\n\t\t\t[]\n\t\t\titems))", "problem": 33, "user": "51205867e4b0e88f5a20c40f"}, {"code": "(fn [s, n] (reduce (fn [res e] (reduce (fn [int-res _] (conj int-res e)) res (range n))) [] s))", "problem": 33, "user": "511b9e81e4b00c2a1fa7ff6e"}, {"code": "(fn [lst n]\n  \t(apply concat (map #(repeat n %) lst)))", "problem": 33, "user": "513fb358e4b00f13ea1bd893"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "513dcc1ce4b0825f97f7f964"}, {"code": "(fn seqx2 [xs n]\n  (mapcat identity (map #(take n (repeat %)) xs)))", "problem": 33, "user": "4fb804f7e4b081705acca2d6"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "50706287e4b07bd6ad9b9f2b"}, {"code": "#(apply concat (map (partial replicate %2) %))", "problem": 33, "user": "513edd13e4b051389b345b39"}, {"code": "#(if (= %2 1) % (apply interleave (repeat %2 %)))", "problem": 33, "user": "513ca934e4b0b86ece9f3228"}, {"code": "(fn [s n] (apply concat (map (partial repeat n) s)))", "problem": 33, "user": "513bb7a6e4b04402f587b77d"}, {"code": "(fn [l n] (reduce concat '() (map #(repeat n %) l)))", "problem": 33, "user": "51411e3be4b05ca1a0b379f3"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "51424cc8e4b0b50abeb46b34"}, {"code": "(fn [l n]\n  (loop [[hd & body] l ret []]\n    (if (nil? hd)\n      ret\n      (recur body (reduce (fn [r c] (conj r c)) ret (repeat n hd))))))", "problem": 33, "user": "513cb853e4b0b86ece9f322b"}, {"code": "(fn f \n  ([coll r] \n   \t(if (empty? coll) (list) (concat (take r (repeat (first coll))) (f (rest coll) r))) ))", "problem": 33, "user": "5142e808e4b0c172af7558c9"}, {"code": "(fn[s, n] (reduce (fn[acc,t]( concat acc (repeat n t) ) )  '() s) )", "problem": 33, "user": "513f53c6e4b051389b345b40"}, {"code": "#(reverse (reduce into () (map (partial repeat %2) %1)))", "problem": 33, "user": "5142ea50e4b0c172af7558ca"}, {"code": "(fn [coll times] \n  (mapcat (partial repeat times) coll))", "problem": 33, "user": "4ff01fa9e4b0678c553fc321"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "513dca07e4b0825f97f7f962"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "512a8ef7e4b0ff5c4bc1f99e"}, {"code": "(fn [lst n]\n  (mapcat #(repeat n %) lst))", "problem": 33, "user": "50e135f4e4b084616e11c667"}, {"code": "(fn [s n] (reduce #(concat % (take n (repeat %2))) [] s))", "problem": 33, "user": "5145832be4b0e8879607340a"}, {"code": "#(apply concat (for [i %] (take %2 (repeat i))))", "problem": 33, "user": "51430fb2e4b0c172af7558ce"}, {"code": "(fn repl\n  [coll times]\n  (if (empty? coll)\n    coll\n    (concat\n     (for [i (range times)]\n       (first coll))\n     (repl (rest coll) times))))", "problem": 33, "user": "504e0136e4b078edc5f5938e"}, {"code": "#(reduce concat (for [item %1] (repeat %2 item)))", "problem": 33, "user": "514721c6e4b0d520409ed392"}, {"code": "#(reduce\n  (fn rep \n    ([xs x] (rep %2 xs x))\n    ([n xs x]\n     (if (zero? n)\n       xs\n       (rep (dec n) (conj xs x) x))))\n  [] %)", "problem": 33, "user": "5140c505e4b049dea086df40"}, {"code": "(fn [col n] (mapcat #(repeat n %) col))", "problem": 33, "user": "4fb4303fe4b081705acca2ac"}, {"code": "(fn [x m] \n  (reduce concat (map #((fn mult [v n]\n  (if (= n 0)\n    []\n    (cons v (mult v (- n 1))))) % m) x)))", "problem": 33, "user": "5110b8bae4b04c71fce993f4"}, {"code": "(fn rep [coll n] (if (empty? coll) [] (concat (repeat n (first coll)) (rep (rest coll) n))))", "problem": 33, "user": "50723bbae4b0e3170b5a868b"}, {"code": "(fn [xs,n] (reduce (fn [a,b] (concat a (repeat n b))) (cons [] xs)) )", "problem": 33, "user": "514b66f4e4b0bd81940b86cb"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "514d8084e4b019235f6c0588"}, {"code": ";#(apply interleave (repeat %2 %))\n(fn [x c] (mapcat #(repeat c %) x))", "problem": 33, "user": "514d2c7ee4b019235f6c0582"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "514457fbe4b0b4fb4ace5f43"}, {"code": "(fn [coll n]\n   (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "514e4ae4e4b019235f6c0594"}, {"code": "(fn f [x y] (if (empty? x) '() (concat (repeat y (first x)) (f (rest x) y))))", "problem": 33, "user": "514d398ee4b019235f6c0583"}, {"code": "(fn [a b] (reduce (fn [m e] (concat m (repeat b e))) '[] a))", "problem": 33, "user": "4e352362535deb9a81d77f2c"}, {"code": "(fn [c n] \n  (mapcat #(repeat n %) c))", "problem": 33, "user": "4f5d0f25e4b0030a34fb2b33"}, {"code": "#(if (= 1 %2) %1 (apply interleave (repeat %2 %1)))", "problem": 33, "user": "5148bcbee4b05514c84b7cc6"}, {"code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "problem": 33, "user": "51502056e4b098b221effc25"}, {"code": "(fn [my-seq\n     repetitions]\n  (reduce concat \n          (map (fn [x] \n                 (take repetitions \n                       (repeat x))) \n               my-seq)))", "problem": 33, "user": "51508efce4b0c51f0585bbb4"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4f50d933e4b03ad3f0c10d11"}, {"code": "(fn [coll count] (apply concat (map #(take count (repeat %)) coll)))", "problem": 33, "user": "5146df5ae4b04ef915e3731d"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "5133e51ae4b0d7a043de8cf6"}, {"code": "#(apply concat (map (fn [x] (replicate %2 x)) %))", "problem": 33, "user": "5151a6bee4b03e678e393ad3"}, {"code": "(fn [x n] (apply concat (map #(repeat n %) x)))", "problem": 33, "user": "5151aa14e4b03e678e393ad4"}, {"code": "(fn [a n] (apply concat (map #(take n (repeat %)) a)))", "problem": 33, "user": "51037468e4b00c483ae17702"}, {"code": "(fn [s n]\n  (loop [s s\n         ds []\n         n n]\n    (if s\n      (recur (next s) (apply conj (cons ds (repeat n (first s)))) n)\n      ds)))", "problem": 33, "user": "51460e4ce4b04ef915e37314"}, {"code": "#(if (= %2 1) % (apply interleave (repeat %2 %)))", "problem": 33, "user": "514def61e4b019235f6c0591"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "5150f87ae4b03e678e393ac7"}, {"code": "(fn [items time]\n  (reduce (fn [coll item] (into coll (take time (repeat item)))) [] items))\n\n;#(mapcat (partial repeat %2) %)", "problem": 33, "user": "5016ac54e4b052339a490e7b"}, {"code": "(fn[v c](mapcat #(repeat c %)v))", "problem": 33, "user": "4f296a80e4b0d6649770a02a"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "514f0723e4b019235f6c0599"}, {"code": "#(apply concat (for [item %1] (take %2 (repeat item))))", "problem": 33, "user": "4e58ef07535d8a8b8723a299"}, {"code": "(fn [lst cnt] (apply concat (map #(repeat cnt %) lst)))", "problem": 33, "user": "51558136e4b06c5f6a1490a8"}, {"code": "(fn [col n] \n  (mapcat #(repeat n %) col))", "problem": 33, "user": "514afd1be4b0bd81940b86c6"}, {"code": "#(mapcat (partial replicate %2) %1)", "problem": 33, "user": "51383346e4b0a5db03d727d4"}, {"code": "#(apply concat (for [x %1] (replicate %2 x)))", "problem": 33, "user": "5151565be4b03e678e393acb"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "51533ecde4b0252ac4b16619"}, {"code": "(fn dupeeach [sq times]\n  (mapcat (partial repeat times) sq))", "problem": 33, "user": "515737f0e4b0b0b4b87062d0"}, {"code": "(fn [acoll n]\n  (reduce (fn [result item] (concat result (repeat n item) ) ) '() acoll )\n  )", "problem": 33, "user": "5135a74ae4b04ac1f358dd46"}, {"code": "(fn [coll n]\n  (mapcat\n   (fn [x]\n     (take n\n           (iterate identity x)\n           )\n     )\n   coll)\n  )", "problem": 33, "user": "5150a7d7e4b03e678e393abb"}, {"code": "(fn [s n] \n  (seq \n   (reduce\n    (fn [col y] (concat col (repeat n y)))\n    []\n    s)))", "problem": 33, "user": "51547920e4b084ca81ee2e1c"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "51584459e4b0a069fd272c74"}, {"code": "(fn [arr x] (apply concat (map (partial repeat x) arr)))", "problem": 33, "user": "510c123be4b078ea7192110e"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4fea7594e4b0140c20fb9c06"}, {"code": "(fn duplo [col n]\n  (let [x n]\n  (cond\n   (empty? col) []\n   \n                 \n   \n   :else \n   (concat \n   (for [i (range n)] (first col))\n    (duplo (rest col) n)))))", "problem": 33, "user": "51427a8be4b0b50abeb46b37"}, {"code": "(fn [col n] (mapcat #(repeat n %) col))", "problem": 33, "user": "504e71cbe4b0f6ff3350c4b3"}, {"code": "(fn [x times]\n  (reduce concat (map #(for [i (range times)] %) x)))", "problem": 33, "user": "515828b8e4b0a069fd272c71"}, {"code": "(fn [coll n] (mapcat #(take n (repeat %)) coll))", "problem": 33, "user": "515a6151e4b0394f658fe241"}, {"code": "(fn[coll r]\n  (->> coll\n    (map #(repeat r %))\n    (apply concat)))", "problem": 33, "user": "50ef96a1e4b0bdaecbb47d9d"}, {"code": "(fn [coll n]\n  (mapcat #(take n (iterate identity %)) coll))", "problem": 33, "user": "515c6132e4b069911535cf0d"}, {"code": "(fn duplicate-seq2 [seq reps]\n  (letfn [(duplicate-x [target reps]\n  (repeat reps target))]\n\n    (if (= (count seq) 1)\n      (duplicate-x (first seq) reps)\n      (reverse (into (duplicate-x (first seq) reps) (duplicate-seq2 (rest seq) reps))))))", "problem": 33, "user": "51177fbce4b0e0897831a60b"}, {"code": "(fn\n          [coll n]\n          (reduce\n            concat\n            (map\n              #(repeat n %)\n              coll)))", "problem": 33, "user": "514d7e29e4b019235f6c0587"}, {"code": "(fn [coll rep] (reduce concat (map #(repeat rep %) coll)))", "problem": 33, "user": "515c9f14e4b069911535cf16"}, {"code": "(fn [x r]\n   (mapcat (partial repeat r) x)\n  )", "problem": 33, "user": "513b43ede4b067e25a345ed3"}, {"code": "#(reduce concat '()  (map  (partial repeat %2) %1))", "problem": 33, "user": "515efd01e4b02c55805ea238"}, {"code": "(fn [col n] (mapcat #(repeat n %) col))", "problem": 33, "user": "515f0a39e4b02c55805ea23a"}, {"code": "(fn [x n] \n  ((fn rep [x acc m]\n    (cond\n     (empty? x) (reverse acc)\n     (= m 0) (rep (rest x) acc n)\n     :else (rep x (cons (first x) acc) (- m 1)))\n    )\n  x '() n))", "problem": 33, "user": "515f8a0de4b0e2be8aa20bce"}, {"code": "(fn dupseq [sq n]\n  (apply concat (map #(repeat n %) sq)))", "problem": 33, "user": "515f2a85e4b0595cf3d1da44"}, {"code": "(fn [s n] \n  (reduce \n     #(concat %1 (replicate n %2)) \n     [] \n     s\n  )\n)", "problem": 33, "user": "51473a70e4b0d520409ed394"}, {"code": "(fn [x n] (apply concat (map (partial repeat n) x)))", "problem": 33, "user": "515ead6be4b049add99a053e"}, {"code": "(fn [xs c] (mapcat #(repeat c %) xs))", "problem": 33, "user": "515cf9b5e4b00901442db1d4"}, {"code": "(fn [xs n]\n     (mapcat (partial repeat n) xs))", "problem": 33, "user": "50f48298e4b004d364930527"}, {"code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "problem": 33, "user": "5134973ce4b0230e9f713b42"}, {"code": "#(reduce concat (map (partial repeat %2) %))", "problem": 33, "user": "50fe9d60e4b03cd852b4e84f"}, {"code": "(fn \n  [coll n]\n  (mapcat #(repeat n %) coll))\n;#(mapcat (partial repeat %2) %)", "problem": 33, "user": "5153316ce4b0252ac4b16611"}, {"code": "(fn [items n] (reduce concat (map #(repeat n %) items)))", "problem": 33, "user": "504ee511e4b0e7ad84dbc4a4"}, {"code": "(fn [s c]\n    (reduce\n      (fn [orig_list item]\n        (apply conj orig_list (repeat c item)))\n      []\n      s))", "problem": 33, "user": "515e38ace4b049add99a0538"}, {"code": "(fn [lst n] (mapcat #(repeat n %) lst))", "problem": 33, "user": "5156e767e4b04360f2428e6b"}, {"code": "#(mapcat (fn [n] (repeat %2 n)) %)", "problem": 33, "user": "50705886e4b07bd6ad9b9f2a"}, {"code": "#(mapcat (fn [x] (take %2 (repeat x))) %)", "problem": 33, "user": "515e8ce2e4b049add99a053d"}, {"code": "(fn [coll n]\n  (case n\n    1 coll\n\t(apply interleave (take n (repeat coll)))))", "problem": 33, "user": "515ef58be4b02c55805ea237"}, {"code": "(fn [c n] (mapcat #(repeat n %) c))", "problem": 33, "user": "51592b81e4b0394f658fe22c"}, {"code": "(fn [xs n]\n  (mapcat #(repeat n %) xs))", "problem": 33, "user": "5160195ae4b0e2be8aa20be3"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4f437751e4b0d7d3c9f3fd20"}, {"code": "(fn [coll n] (reduce (fn [x y] (apply conj x (repeat n y))) '() (reverse coll)))", "problem": 33, "user": "5162757ee4b03cfa3774b3fe"}, {"code": "#(mapcat (fn [i] (repeat %2 i)) %1)", "problem": 33, "user": "4f23196ee4b0d66497709fe1"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "5164867fe4b003cf19fdde3e"}, {"code": "(fn [acoll n]\n  (reduce (fn [result item] (concat result (repeat n item) ) ) '() acoll )\n  )", "problem": 33, "user": "513e9aa0e4b02b2a3d8235c4"}, {"code": "#(for [x %1 y (range %2)] x)", "problem": 33, "user": "51623490e4b009fba0926e42"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "5166e80de4b060c690c1f4c5"}, {"code": "(fn [coll n] (mapcat #(repeat %2 %) coll (repeat n)))", "problem": 33, "user": "4fdbc075e4b05e33b9224f61"}, {"code": "(fn [xs n] (mapcat (partial repeat n) xs))", "problem": 33, "user": "51670895e4b013fc800656c1"}, {"code": "#(mapcat (fn [n] (repeat %2 n)) %1)", "problem": 33, "user": "50fe91c1e4b03cd852b4e84e"}, {"code": "(fn [x n]\n    (loop [todo x\n           res []]\n      (if (empty? todo)\n        res\n        (let [f (first todo)\n              r (next todo)]\n          (recur r (concat res (repeat n f)))))))", "problem": 33, "user": "5165a235e4b079ad97ec44ac"}, {"code": "(fn [coll n] (apply (partial mapcat vector) (repeat n coll)))", "problem": 33, "user": "516199bbe4b009fba0926e36"}, {"code": "(fn xxx [col x]\n  (loop [c col acc []]\n    (if (= (last c) nil)\n      acc\n      (recur (rest c) (concat acc (replicate x (first c)))))))", "problem": 33, "user": "5163a7bbe4b055933a9ca02f"}, {"code": "(fn repn[s n] (cond \n               (nil? (first s)) s\n               :default (concat (take n (repeat (first s)))  (repn (rest s) n) )\n               )\n  )", "problem": 33, "user": "4fb03cf4e4b081705acca262"}, {"code": "(fn [coll times] \n   (apply concat (map (fn [val] (repeat times val)) coll)))", "problem": 33, "user": "51696bcde4b03f62cda68ce7"}, {"code": "(fn [coll n] (mapcat (partial repeat n) coll))", "problem": 33, "user": "51631002e4b017b283c712c1"}, {"code": "(fn [l n] (mapcat #(take n (repeat %)) l))", "problem": 33, "user": "515d6281e4b00901442db1dc"}, {"code": "(fn [c n] (apply concat (map #(repeat n %) c)))", "problem": 33, "user": "511d6a01e4b022853b0e07a5"}, {"code": "(fn [coll n] (mapcat (partial repeat n) coll))", "problem": 33, "user": "51696ee7e4b03f62cda68ce8"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "51652141e4b003cf19fdde48"}, {"code": "(fn [a n]\n  (apply concat (map #(repeat n %) a)))", "problem": 33, "user": "516e9d9be4b06aac486e5b2b"}, {"code": "(fn [lst n]\n  (apply concat (map (partial repeat n) lst)))", "problem": 33, "user": "516f06dce4b06aac486e5b39"}, {"code": "(fn [t n] (reduce\n     (fn f [ss s]\n       (apply conj ss  (repeat n s)))\n     [] t))", "problem": 33, "user": "516e2246e4b092a6408c5bc5"}, {"code": "(fn [l n]\n  (apply concat (for [i l]\n                    (repeat n i))))", "problem": 33, "user": "50b1d166e4b03ea880433554"}, {"code": "#(reduce (fn[a b](concat (repeat %2 b) a)) [] (reverse %1))", "problem": 33, "user": "5143952fe4b0b4fb4ace5f38"}, {"code": "(fn [seq n]\n  (apply concat\n         (map #(repeat n %)\n              seq)))", "problem": 33, "user": "516ff477e4b034fe8eaf70f3"}, {"code": "(fn [xs n] (reduce #(concat %1 (repeat n %2)) [] xs))", "problem": 33, "user": "516ea313e4b06aac486e5b2c"}, {"code": "(fn rep [s n] (apply concat (map #(repeat n %) s)))", "problem": 33, "user": "515ffbfbe4b0e2be8aa20bdd"}, {"code": "(fn\n  [x y]\n  (reduce into (map #(vec (repeat y %)) x)))", "problem": 33, "user": "516c3472e4b06f078fab251c"}, {"code": "(fn rep [coll n]\n  \t(if (= 1 n)\n  \t\tcoll\n  \t\t(apply interleave (repeat n coll))))", "problem": 33, "user": "51701a9ce4b034fe8eaf70f5"}, {"code": "(fn [x y] (mapcat #(repeat y %) x))", "problem": 33, "user": "50a2e3fbe4b029e8bace3629"}, {"code": "(fn [l n]\n  (mapcat #(replicate n %) l))", "problem": 33, "user": "51721aefe4b0d70c8bbbf24a"}, {"code": "(fn dupl [in times]\n   (if (empty? in)\n     '()\n     (concat (repeat times (first in)) (dupl (rest in) times))))", "problem": 33, "user": "51684318e4b03f62cda68cd6"}, {"code": "#(reduce concat (map (partial repeat %2) %1))", "problem": 33, "user": "51740b65e4b0d277d717bc67"}, {"code": "(fn [elements nbrepeat]\n   (loop [el elements\n          res '()]\n     (cond\n      (empty? el) res\n      :else (recur (rest el)\n                   (concat res (repeat nbrepeat (first el)))))))", "problem": 33, "user": "5154fa3fe4b0179c5115f4e6"}, {"code": "(fn [lst n] (apply concat (map #(repeat n %) lst)))", "problem": 33, "user": "516dc88ae4b046df6fbb76a1"}, {"code": "(fn n-dups [coll n]\n  (reduce (fn [acc el]\n            (into acc (take n (repeat el)))) (list) (reverse coll)))", "problem": 33, "user": "51736d4de4b00f4b6b0490d7"}, {"code": "(fn [x n]\n\t(loop [output '() x (seq x)]\n\t\t(if (= (count x) 0)\n\t\t\t(reverse output)\n\t\t\t(recur (into output (take n (repeat (first x)))) (rest x)))))", "problem": 33, "user": "51757af0e4b085adf681d873"}, {"code": "(fn [coll n] (reduce #(concat % (take n (repeat %2))) () coll))", "problem": 33, "user": "5175616ae4b0dea9bbfba576"}, {"code": "(fn p33 [coll n]\n  (reduce #(concat %1 (repeat n %2)) \n          [] coll))", "problem": 33, "user": "51750fc5e4b07031762f2ee6"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "5173726be4b098276e74652c"}, {"code": "(fn interleave2 \n   ([s n] (interleave2 (seq s) n n))\n   ([s n r]\n    (lazy-seq\n     (when s\n       (if (> n 1)\n         (cons (first s) (interleave2 s (dec n) r))\n         (cons (first s) (interleave2 (next s) r r))\n       )\n     )\n    )\n   ))", "problem": 33, "user": "516db4f6e4b046df6fbb76a0"}, {"code": "(fn [xs n] (mapcat #(repeat n %1) xs))", "problem": 33, "user": "5079fd71e4b08327cd804a66"}, {"code": "(fn [l t] (mapcat #(repeat t %) l))", "problem": 33, "user": "51780bfce4b0f89a8f53839c"}, {"code": "(fn [orig n] (reduce #(concat % (repeat n %2)) [] orig))", "problem": 33, "user": "5170ea06e4b0d70c8bbbf235"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "51778122e4b085adf681d89d"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "51780f88e4b03d69594194c9"}, {"code": "(fn replicate-seq [xs n]\n  (mapcat #(repeat n %) xs))", "problem": 33, "user": "517a025ce4b01aacecbecbe6"}, {"code": "#(mapcat (fn [a] (repeat %2 a)) %1)", "problem": 33, "user": "51789599e4b03d69594194d6"}, {"code": "(fn [m n]\n  ((fn iter [l m]\n    (if (= 0 (count m))\n      l\n      (iter (reduce conj l (for [x (range 0 n), :let [elem (first m)]] elem))\n            (rest m)))) [] m))", "problem": 33, "user": "517531c6e4b07031762f2eea"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "517adc6ce4b0925c997201c4"}, {"code": "(fn [x t] (mapcat #(repeat t %) x))", "problem": 33, "user": "5179fd22e4b01aacecbecbe5"}, {"code": "(fn [s n] (reduce concat (map #(repeat n %) s)) )", "problem": 33, "user": "51729002e4b044b2ef48a850"}, {"code": "(fn [xs n] (mapcat (partial repeat n) xs))", "problem": 33, "user": "508a2c2fe4b016a2107004a1"}, {"code": "(fn [xs n]\n    (apply concat (\n        map #((fn repeat [x n]\n            ((fn [acc n]\n                (if (> n 0)\n                    (recur (conj acc (first acc)) (- n 1))\n                    acc)) [x] (- n 1))) % n) xs)))", "problem": 33, "user": "517bf28de4b07ef0e56148d5"}, {"code": "#(if (> %2 1) (apply interleave (repeat %2 %1)) %1)", "problem": 33, "user": "50cfcad6e4b00b15ecee9752"}, {"code": "(fn [lst nu]\n   (reduce concat (map #(take nu (repeat %))\n                 lst)))", "problem": 33, "user": "517b9c82e4b0e963dd819c99"}, {"code": "(fn [l n]\n  (reduce #(concat %1 (repeat n %2)) () l))", "problem": 33, "user": "5163b06be4b055933a9ca030"}, {"code": "; (fn [s n] (mapcat #(repeat n %) s))\n#(for [x % y (repeat %2 x)] x)", "problem": 33, "user": "517b59b8e4b0925c997201d0"}, {"code": "#(mapcat (fn [i] (repeat %2 i)) %)", "problem": 33, "user": "5093a80be4b097f48cc38583"}, {"code": "(fn [x n]\n  (if (= n 1)\n    x\n  \t(apply interleave (repeat n x))))", "problem": 33, "user": "4eec82fe535d93acb0a668ae"}, {"code": "(fn [b a] (mapcat identity (map #(repeat a %) b)))", "problem": 33, "user": "515ff4b9e4b0e2be8aa20bd9"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "51804bcbe4b04f45bde7d901"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "51803613e4b04f45bde7d8fd"}, {"code": "#(apply  concat (map (fn [x] (repeat %2 x)) %1))", "problem": 33, "user": "517945dce4b0684c1c981a43"}, {"code": "(fn [s n] (apply (if (= n 1) identity interleave) (repeat n s)))", "problem": 33, "user": "5162d424e4b004547eb5eaaa"}, {"code": "(fn [col n] (mapcat #(take n (repeat %)) col))", "problem": 33, "user": "4ed286d4535d44c135fd68d7"}, {"code": "(fn buzz  [lst n] \n  (reduce concat \n          ((fn [lst n] \n             (if (= n 1) \n               lst \n               (recur (map #(cons (first %) %) lst) (dec n)))) \n           (partition-by identity lst) n)))", "problem": 33, "user": "516733fce4b079759a74a5e9"}, {"code": "(fn [xs r] (apply concat (map #(replicate r %1) xs)))", "problem": 33, "user": "515fb48fe4b0e2be8aa20bd5"}, {"code": "#(apply concat (for [i %] (repeat %2 i)))", "problem": 33, "user": "517ecab1e4b09104ecebe7e8"}, {"code": "(fn dup2 [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "4f6cf933e4b07046d9f4efc2"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %)", "problem": 33, "user": "4e6a3b79535d8ccf87e9feb3"}, {"code": "(fn [col n]\n  (reduce #(into %1 (repeat n %2)) [] col))", "problem": 33, "user": "4f3ca5a6e4b0e243712b1f53"}, {"code": "(fn[x n]\n  (loop [l '() ls x]\n    (if(empty? ls)\n      l\n      (recur (concat l (repeat n (first ls))) (rest ls)))))", "problem": 33, "user": "517e6671e4b0329b27fa9f56"}, {"code": "#(vec (apply concat (for [i %] (take %2 (repeat i)))))", "problem": 33, "user": "4faa5735e4b081705acca1ee"}, {"code": "(fn f [lst n]\n  (reduce concat \n       (map (partial repeat n) lst)))", "problem": 33, "user": "51750cd4e4b07031762f2ee5"}, {"code": "(fn [xs n]\n  (loop [s xs l (count xs) fin ()]\n    (if (= l 0)\n      fin\n      (recur (rest s) (dec l) (concat fin (replicate n (first s)))))))", "problem": 33, "user": "50b9d991e4b04934c218a4a9"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "problem": 33, "user": "517dc49be4b0fcc7c5d37d38"}, {"code": "#(reduce (fn [m a] (concat m (repeat %2 a))) '() %1)", "problem": 33, "user": "5185e17ee4b0da5a5be3bac5"}, {"code": "(fn replicate-seq [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "5183abf6e4b028ec5fd2f2a6"}, {"code": "#(reduce concat (map (fn [x] (repeat %2 x)) %1))", "problem": 33, "user": "5186571de4b0da5a5be3bad1"}, {"code": "(fn \n  [col,n]\n  (mapcat #(repeat n %) col)\n  )", "problem": 33, "user": "5140771ae4b076604f1aa555"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "518696c1e4b0c40be512d708"}, {"code": "(fn [xs n]\n    (mapcat #(replicate n %) xs))", "problem": 33, "user": "5186134ce4b0da5a5be3bac7"}, {"code": "(fn [s n] (mapcat (fn [i] (repeatedly n #(identity i))) s))", "problem": 33, "user": "5187dd58e4b057e3860ab7e4"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "517bc969e4b07ef0e56148d0"}, {"code": ";;(fn test [l y]\n;;  (if (= y 1)\n;;    l\n;;    (test (reduce concat (map (fn [x] (conj (identity x) (first x))) \n;;                              (partition-by identity l))) (- y 1))))\n;;\n;;We can map and then concatenate a repetition.\n;; If we take a partial function passing the second argument (partial repeat 2)\n;; Then we call this function on each member of the list, we can\n;; repeat that element twice.\n;; ((1 1) (2 2) (3 3))\n;; If we do a concatenation of those elements, then we come out with what we want\n;; (1 1 2 2 3 3)\n;; we can use the shortcut mapcat instead of messing with concatenate\n\n#(mapcat (partial repeat %2) %)", "problem": 33, "user": "50955676e4b087f34d351ab1"}, {"code": "(fn [lst times]\n  (loop [res '() l lst]\n    (if (empty? l) res\n      (recur (concat res (seq (repeat times (first l)))) (rest l))))\n  )", "problem": 33, "user": "4fecebe1e4b0681fd128dcac"}, {"code": "#(reduce concat (for [x %1] (repeat %2 x)))", "problem": 33, "user": "5099283ce4b0cae2931060af"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "5152bc4ee4b001f44f99bfef"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "51805d22e4b0e3fc13e244df"}, {"code": "(fn [s n]\n  (for [x s i (range n)]\n    x))", "problem": 33, "user": "51899891e4b0288ada3dbdab"}, {"code": "(fn [s n] (mapcat (fn [i] (repeatedly n #(identity i))) s))", "problem": 33, "user": "518c26e6e4b0f028e99addfa"}, {"code": "(fn [x n]\n  (if (= 1 n)\n  x\n  (apply interleave (repeat n x))))", "problem": 33, "user": "5188c487e4b0bdff0e072d55"}, {"code": "(fn repli [xs n]\n  (reduce concat(for [x xs] (repeat n x)))\n  )", "problem": 33, "user": "4ec4d723535dcc7ae8597d65"}, {"code": "(fn [v n] (mapcat #(repeat n %) v))", "problem": 33, "user": "51823a97e4b0f2adb733651e"}, {"code": "(fn [x, n] (reduce concat (map #(take n (repeat %)) x)))", "problem": 33, "user": "518a59b3e4b02bf06f6bbb4b"}, {"code": "#(loop [col %1 result () num %2]\n               (if (empty? col)\n                 result\n                 (recur (rest col) (concat  result (repeat num (first col))) num)))", "problem": 33, "user": "518ccf6be4b05e6c8537e386"}, {"code": "(fn [xs n]\n  (mapcat\n   (fn [ch]\n     (loop [c n ys ()]\n       (if (zero? c)\n         ys\n         (recur (dec c) (conj ys ch)))))\n  xs))", "problem": 33, "user": "51897709e4b0288ada3dbdaa"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "516c0a7de4b005fd0cdf85cb"}, {"code": "#(if (> %2 1) \n   (apply interleave (seq (repeat %2 %))) \n   %)", "problem": 33, "user": "518b761ae4b0f028e99addee"}, {"code": "(fn [l n] (mapcat (partial repeat n) l))", "problem": 33, "user": "518ec633e4b0cd6ff516769e"}, {"code": "(fn [s c] (reduce #(into % (repeat c %2)) [] s))", "problem": 33, "user": "517e25c6e4b0329b27fa9f51"}, {"code": "(fn repli [s n]\n  (mapcat #(repeat n %) s))", "problem": 33, "user": "5170643ee4b004f79986ad89"}, {"code": "#(mapcat (fn [input] (repeat %2 input)) %1)", "problem": 33, "user": "4ef2eb4d535dced4c769f226"}, {"code": "(fn [x y] (loop[myNL '() myL x](if(not= (first myL) nil)\n                               (recur\n                                (concat myNL (repeat y (first myL)))\n                                (rest myL)\n                                )\n                               myNL\n                               )\n          )\n  )", "problem": 33, "user": "5177cacde4b0261ae665b877"}, {"code": "(fn [xs ct]\n  (for [x xs i (range ct)]\n    x))", "problem": 33, "user": "5177f89ae4b0f89a8f53839a"}, {"code": "(fn [xs n]\n    (reduce concat (map (partial repeat n) xs)))", "problem": 33, "user": "4dcd327b535d5973398f929b"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "519136e9e4b0f8ef0be96c01"}, {"code": "(fn [x y] (mapcat (fn [a] (repeat y a)) x))", "problem": 33, "user": "5154b16be4b0179c5115f4e2"}, {"code": "(fn [xs n] (\n            reduce concat (map (partial repeat n) xs)\n            )\n  )", "problem": 33, "user": "50a8bb65e4b0deba384a58bd"}, {"code": "(fn [s n] (mapcat #(take n (cycle [%])) s))", "problem": 33, "user": "5159849ce4b0394f658fe236"}, {"code": "(fn [seq n]\n  (reduce #(apply conj %1 (repeat n %2)) [] seq))", "problem": 33, "user": "5161c6a7e4b009fba0926e38"}, {"code": "(fn [xs n] (apply concat (map #(map (constantly %) (range n)) xs)))", "problem": 33, "user": "51131da8e4b0350614f07a83"}, {"code": "(fn [coll n] (mapcat (partial repeat n) coll))", "problem": 33, "user": "518e6966e4b051adb72789ec"}, {"code": "(fn [s n]\n  (reduce concat (map #(take n (repeat %)) s)))", "problem": 33, "user": "518a8c4be4b0df82f5685903"}, {"code": "(fn my-rep [xs times]\n  (mapcat #(repeat times %) xs))", "problem": 33, "user": "50fe2420e4b03cd852b4e84a"}, {"code": "#(apply concat (for [x %1]\n                  (take %2 (repeat x))))", "problem": 33, "user": "50992197e4b0cae2931060ae"}, {"code": "#(mapcat seq (for [x %] (repeat %2 x)))", "problem": 33, "user": "51933b41e4b0c663c5d86ca2"}, {"code": "(fn [x y] (mapcat #(repeat y %) x))", "problem": 33, "user": "51980f7ce4b068aa333628f7"}, {"code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "problem": 33, "user": "5196568fe4b04c0af7ff3c1c"}, {"code": "(fn [x y] (apply concat (map #(repeat y %) x)))", "problem": 33, "user": "5195b8cce4b04c0af7ff3c08"}, {"code": "(fn [c n] (mapcat #(take n (repeat %)) c))", "problem": 33, "user": "50377d53e4b0af0658af77ad"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4dada913c9a9d6ed2d99dc57"}, {"code": "(fn [s n] (reduce #(concat %1 (repeat n %2)) (empty s) s))", "problem": 33, "user": "4e09392a535d04ed9115e7ae"}, {"code": "(fn [xs n]\n  (->>\n   \txs\n  \t(map (fn [x] (repeat n x)))\n   \t(apply concat)))", "problem": 33, "user": "519b231ee4b0ac1b7dced6a2"}, {"code": "(fn [coll n] (mapcat (partial repeat n) coll))", "problem": 33, "user": "5199ca05e4b022efe2b3ba88"}, {"code": "(fn [v n] (mapcat (partial repeat n) v))", "problem": 33, "user": "51990df9e4b068aa333628fc"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "problem": 33, "user": "519b2570e4b0ac1b7dced6a3"}, {"code": "(fn [xs t] (mapcat #(repeat t %) xs))", "problem": 33, "user": "519b7d76e4b02a926d9a436e"}, {"code": "(fn [coll n] (mapcat (partial repeat n) coll))", "problem": 33, "user": "4f409e29e4b0e243712b1fb6"}, {"code": "(fn [xs n](reduce concat (map #(cons %1 (repeat(- n 1) %1)) xs)))", "problem": 33, "user": "5196749be4b04c0af7ff3c20"}, {"code": "(fn [x n]\n\t(reduce (fn [a b] (into a (take n (repeat b)))) (cons [] x)))", "problem": 33, "user": "51794ec2e4b0684c1c981a45"}, {"code": "#(apply concat (for [x %1] (repeat %2 x)))", "problem": 33, "user": "4dade9e9c9a9d6ed4799dc57"}, {"code": "(fn [l n]\n  (apply concat\n         (for [item l]\n           (repeat n item))))", "problem": 33, "user": "4f942227e4b0dcca54ed6cbe"}, {"code": "(fn repl-seq[lst times]  \n (mapcat (fn [e] (repeat times e)) lst)\n)", "problem": 33, "user": "5180dc04e4b06b8caf33fa01"}, {"code": "(fn rep [xs n]\n  (if\n    (= n 1)\n    xs\n    (apply interleave (repeat n xs))))", "problem": 33, "user": "516385cee4b055933a9ca02d"}, {"code": "(fn [xs x] (apply concat (map #( repeat x % ) xs)))", "problem": 33, "user": "51227a00e4b068a9582e656b"}, {"code": "#(mapcat (fn [x] (take %2 (repeat x)   ) ) %1)", "problem": 33, "user": "518c5236e4b087e178201de0"}, {"code": "(fn f\n  ([a b] (f a b []) )\n  ([a b c]\n   (if (empty? a)\n    c\n   (f (rest a) b (concat c (take b(repeat (first a)))))\n     \n   )\n   )\n  \n )", "problem": 33, "user": "5191045ee4b0f8ef0be96bf3"}, {"code": "(fn f [x y] \n  (mapcat (fn [el] (repeat y el)) x))", "problem": 33, "user": "5194f482e4b05be8c43d2385"}, {"code": "(fn [coll n] (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "51377188e4b04059df19f303"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "5143824ae4b0b4fb4ace5f36"}, {"code": "(fn [coll cnt]\n  (if (= cnt 1)\n    coll\n    (apply interleave (repeat cnt coll))))", "problem": 33, "user": "506ba58be4b0eda3100c090b"}, {"code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "51a05bede4b0b292b01ee3f4"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "5141abf1e4b02fd87f5064c3"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "51a768e0e4b0da5f497bde84"}, {"code": "(fn f [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "51a8ab8ee4b08d8ec191b819"}, {"code": "(fn [c n] (if (= n 1) c (apply interleave (repeat n c))))", "problem": 33, "user": "519964cbe4b0aa09cbc0b849"}, {"code": "(fn [coll n]\n        (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "51a8f0c6e4b08d8ec191b821"}, {"code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "51a9dbc9e4b04e3dc0c27b1e"}, {"code": "(fn [n r] \n  (mapcat #(take %2 (repeat %1)) n (repeat r)))", "problem": 33, "user": "4e70a7c1535d5021c1a8963c"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "506cad7de4b0a302964c548e"}, {"code": "(partial\n\t(fn bar [res s n]\n\t\t\t(if (= s '()) \n\t\t\t\t(reverse res)\n\t\t\t\t(\n          (fn foo [res s n fixn]\n            (if (= n 0)\n              (bar res (rest s) fixn)\n              (foo (conj res (first s)) s (dec n) fixn)            \n            )\n          ) res s n n\n        )\n\t\t\t)\n\t)\n\t'()\n)", "problem": 33, "user": "51a0e0b7e4b0b292b01ee3fb"}, {"code": "(fn [coll n] (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "518f9e14e4b08646f171ca07"}, {"code": "(fn [x c] (mapcat #(repeat c %1) x))", "problem": 33, "user": "5183f5d7e4b02826a645f393"}, {"code": "(fn [c n] (apply concat (map repeat (repeat n) c)))", "problem": 33, "user": "4fe9f0f6e4b0547ebccb247b"}, {"code": "(fn [coll cnt]\n  (loop [s coll rep '()]\n    (if (empty? s)\n      (reverse (mapcat seq rep))\n      (recur (rest s) (conj rep (repeat cnt (first s)))))))", "problem": 33, "user": "51991a89e4b068aa333628fd"}, {"code": "#(mapcat (fn [c] (repeat %2 c)) %1)", "problem": 33, "user": "51ab1718e4b04e3dc0c27b2f"}, {"code": "#(apply concat\n        (for [x %1]\n          (repeat %2 x)))", "problem": 33, "user": "4db6d993535d1e037afb2180"}, {"code": "#(mapcat (fn [input](repeat %2 input)) %1)", "problem": 33, "user": "51a477eee4b0def3c5c58692"}, {"code": "#(reduce concat (map (partial repeat %2) %1))", "problem": 33, "user": "51a417dde4b0def3c5c58688"}, {"code": "#(apply (partial mapcat vector) (repeat %2 %))", "problem": 33, "user": "51aa5434e4b04e3dc0c27b26"}, {"code": "(fn [xs n]\n  (mapcat #(repeat n %) xs))", "problem": 33, "user": "510b0480e4b078ea719210fa"}, {"code": "(fn [s n] (reduce (fn [result item] ((apply comp (repeat n (partial #(conj %2 %1) item))) result)) [] s))", "problem": 33, "user": "51a7b4fee4b0da5f497bde8b"}, {"code": "(fn [-seq n]\n  (mapcat #(repeat n %) -seq))", "problem": 33, "user": "4fd11132e4b04c3a95aa0409"}, {"code": "(fn [coll x] (mapcat #(repeat x %) coll))", "problem": 33, "user": "51a54fb4e4b0def3c5c586a3"}, {"code": "(fn [col x] (mapcat (partial repeat x) col))", "problem": 33, "user": "51af978fe4b0c53cf2e68a50"}, {"code": "(fn [s ct] (mapcat (fn [x] (repeat ct x)) s))", "problem": 33, "user": "51a8b576e4b08d8ec191b81a"}, {"code": "(fn [xs n]\n  (case n\n    0 '()\n    1 xs\n  (apply interleave (repeat n xs))))", "problem": 33, "user": "51aa2b4fe4b04e3dc0c27b21"}, {"code": "#(if (< %2 2) %1\n(apply interleave (repeat %2 %1)))", "problem": 33, "user": "51ad0ab8e4b09397d510977b"}, {"code": "(fn duplicate\n  [some-seq times]\n  (reverse \n   (reduce \n    (fn [acc e]\n     (concat (repeat times e) acc))   \n    '() some-seq)))", "problem": 33, "user": "51af4cf6e4b0c53cf2e68a4c"}, {"code": "(fn replicate [xs n]\n  (mapcat (partial repeat n) xs))", "problem": 33, "user": "51ac6360e4b09397d510976c"}, {"code": "(fn [l d] (apply concat (map #(take d (iterate identity %)) l)))", "problem": 33, "user": "51b0fc95e4b0c53cf2e68a72"}, {"code": "(fn [s n]\n  (apply concat (map #(repeat n %) s)))", "problem": 33, "user": "4f4e78fee4b03ad3f0c10cc8"}, {"code": "#(mapcat\n   (partial repeat %2)\n   %1)", "problem": 33, "user": "5192dd39e4b0c663c5d86c9e"}, {"code": "(fn [s, n] ( mapcat #( for [i ( range n )] % ) s ))", "problem": 33, "user": "51aa4eede4b04e3dc0c27b25"}, {"code": "(fn [xs times] (reduce into [] (map (partial repeat times) xs)))", "problem": 33, "user": "511aa2a4e4b0c87c59c9670a"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "problem": 33, "user": "51b24defe4b02f8f128bb963"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "51a3c9cde4b0e77c4ca60bf9"}, {"code": "(fn [lst n]\n  (reduce #(concat %1 (take n (repeat %2))) '() lst))", "problem": 33, "user": "50d4593ee4b09cc622d65a68"}, {"code": "#(if (= 1 %2)\n   %\n   (apply interleave (repeat %2 %)))", "problem": 33, "user": "50a5b7e9e4b0aa96157e2610"}, {"code": "(fn [l c] (mapcat #(replicate c %) l))", "problem": 33, "user": "51b793d3e4b0d906fcd71d38"}, {"code": "(fn [s n] (mapcat (fn [x] (repeat n x)) s))", "problem": 33, "user": "51672d15e4b079759a74a5e7"}, {"code": "#(mapcat (fn [n] (repeat %2 n)) %)", "problem": 33, "user": "51b3f109e4b0f094dd986fa9"}, {"code": "(fn [c r]\n  (mapcat #(repeat r %) c))", "problem": 33, "user": "50f69a3ce4b0035e89151844"}, {"code": "(fn [coll rep] (if (= 1 rep) coll (apply interleave (repeat rep coll))))", "problem": 33, "user": "51b7b521e4b0d906fcd71d3a"}, {"code": "#(if (> %2 1)\n  \t(apply interleave (repeat %2 %1))\n   %1)", "problem": 33, "user": "51b76227e4b0d906fcd71d35"}, {"code": "(fn [xs n]\n  (reverse (reduce\n            (fn [coll x] (concat (repeat n x) coll))\n            '()\n            xs)))", "problem": 33, "user": "51b8e0dce4b050a1176cd69f"}, {"code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "problem": 33, "user": "51bc2f6ae4b0fe3ecfb46452"}, {"code": "#(mapcat (fn [x] (take %2 (repeat x))) %1)", "problem": 33, "user": "51bb970be4b0fe3ecfb4644e"}, {"code": "(fn [s n]\n  (if (= n 1) s\n  \t(apply interleave (repeat n s))))", "problem": 33, "user": "4fa340b4e4b081705acca18c"}, {"code": "(fn repvar [s,n]\n  (mapcat #(repeat n %) s))", "problem": 33, "user": "51b73a91e4b0d906fcd71d33"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4ebf11bc535dfed6da9c6d9c"}, {"code": "(fn [l x]\n  (if (> x 1)\n      (apply interleave (replicate x l))\n      l))", "problem": 33, "user": "51baff1be4b0fe3ecfb46443"}, {"code": "(fn [a b] (reduce #(concat %1 (repeat b %2) ) [] a))", "problem": 33, "user": "51aeb1f4e4b09397d5109794"}, {"code": "(fn rep [aseq n] (let [maken (fn m [anum n] (if (== n 0) '() (cons anum (m anum (- n 1)))))]\n                   \t(if (empty? aseq) '() (concat (maken (first aseq) n) (rep (rest aseq) n)))))", "problem": 33, "user": "51bf4560e4b013aa0d74b817"}, {"code": "(fn [l cnt]\n  (apply (partial mapcat list) (repeat cnt l)))", "problem": 33, "user": "509ecefde4b08df8156e9e35"}, {"code": "#(mapcat\n  (fn [x]\n    (repeat %2 x))\n  %1)", "problem": 33, "user": "5099e663e4b0efbae1fbc0a4"}, {"code": "(fn [coll n]\n  (reduce #(concat %1 (repeat n %2)) '() coll))", "problem": 33, "user": "519db0ede4b037b32803f9b9"}, {"code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "51bec919e4b013aa0d74b800"}, {"code": "#(loop [combined []\n         seq %]\n\n    (if (empty? seq)\n      combined\n      (recur (concat combined (repeat %2 (first seq))) (rest seq) ))\n      \n    \n    )", "problem": 33, "user": "51a865dfe4b08d8ec191b80f"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "51bd1a0de4b0df1216cefd93"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "51b90b88e4b050a1176cd6a2"}, {"code": "#(reduce (fn [x y] (loop [a x b y c %2] (if (= c 0) a (recur (conj a b) b (dec c)))) ) [] %)", "problem": 33, "user": "51beb32ae4b013aa0d74b7fd"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "51b9dc12e4b0e871ca49590c"}, {"code": "#(reverse (loop [c %1 r ()]\n            (if (seq c)\n                (recur (rest c) (concat (repeat %2 (first c)) r))\n              r)))", "problem": 33, "user": "51ab1da1e4b04e3dc0c27b30"}, {"code": "(fn [a b] (apply concat (map (partial repeat b) a)))", "problem": 33, "user": "4f47eab2e4b0d56e7bb92bc6"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "51c330a9e4b0851ac09658f2"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "51789dfae4b03d69594194d7"}, {"code": "(fn [s, n] (mapcat #(repeat n %) s))", "problem": 33, "user": "51b9d1f0e4b0e871ca49590b"}, {"code": "(fn [coll n]\n\t(mapcat #(repeat n %) coll))", "problem": 33, "user": "51b86a0fe4b09e0e347b2e78"}, {"code": "(fn rep-seq [lat n]\n  (reduce concat (map #(take n (repeat %)) lat)))", "problem": 33, "user": "51ba59e4e4b0fe3ecfb4642d"}, {"code": "(fn rep\n  \t[sq num]\n  \t(let [[fst & rst] sq]\n      (when fst\n        (concat (repeat num fst) (rep rst num)))))", "problem": 33, "user": "51c3c6a6e4b0851ac09658f8"}, {"code": "(fn [xs n]\n  (mapcat seq (map #(repeat n %) xs)))", "problem": 33, "user": "5136f659e4b04059df19f2fd"}, {"code": "(fn [coll n]\n  \"Returns a sequence which is a sequence coll repeated n number of times.\"\n  (mapcat #(repeat n %) coll)) ;;", "problem": 33, "user": "518ad8fce4b06da86c1973c1"}, {"code": "#(apply concat (for [x %1] (repeat %2 x)))", "problem": 33, "user": "5007c7c7e4b0b17c647f5226"}, {"code": "(fn [xs m] (mapcat #(repeat m %) xs))", "problem": 33, "user": "51aab611e4b04e3dc0c27b2d"}, {"code": "(fn ! [lst n]\n     (into\n      (into [] (repeat n (first lst))) \n      (if (> (count lst) 1) (! (rest lst) n) [])\n      ))", "problem": 33, "user": "50d6d7eee4b0159555a1fc76"}, {"code": "#(if \n   (= 1 %2) %\n   (apply interleave (repeat %2 %)))", "problem": 33, "user": "51a1659de4b00957e520db72"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "51793056e4b0684c1c981a41"}, {"code": "(fn [x y] (mapcat #(take y (repeat %)) x))", "problem": 33, "user": "51c09719e4b0c9c82288293c"}, {"code": "(fn [col n]\n    (reduce concat (map #(take n (repeat %)) col)))", "problem": 33, "user": "4f72f71be4b07046d9f4f03d"}, {"code": "(fn [xs n](mapcat (partial replicate n) xs))", "problem": 33, "user": "51c1d159e4b0d204dbe2ca18"}, {"code": "(fn [lst rep-num]\n  (reduce (fn [memo aval]\n            (concat memo (take rep-num (repeat aval)))) '() lst))", "problem": 33, "user": "51c76864e4b07ef393169e3f"}, {"code": "(fn [coll n] (mapcat #(concat (repeat n %)) coll))", "problem": 33, "user": "51cb073ce4b068dadb8f2233"}, {"code": "(fn dbl [xs n]\n   (if \n     (= 0 (count xs))\n     []\n   (concat (vec (take n (repeat (first xs)))) (dbl (rest xs) n))))", "problem": 33, "user": "51c9c6cde4b09ce160bef5b1"}, {"code": "(fn [x y]\n   (loop [rs '() element x]\n     (if (empty? element) rs\n           (recur (concat rs\n                          (take y (repeat (first element)))) \n                  (rest element)))))", "problem": 33, "user": "51cacda3e4b068dadb8f2227"}, {"code": "(fn [c n] (reduce (fn [c e] (concat c (repeat n e))) [] c))", "problem": 33, "user": "51c73959e4b07ef393169e3e"}, {"code": "(fn [col n] (mapcat #(take n (repeat %)) col))", "problem": 33, "user": "51cc5f20e4b02254fc794870"}, {"code": "(fn [x t] (mapcat (partial repeat t) x))", "problem": 33, "user": "51cbdee1e4b08d8387cbede1"}, {"code": "#(if (> %2 1) (apply interleave (repeat %2 %1)) %1)", "problem": 33, "user": "51ba4482e4b0fe3ecfb4642b"}, {"code": "(fn zz [l n]\n  (if (empty? l)\n    nil\n  \t(concat (repeat n (first l) ) (zz (rest l) n))))", "problem": 33, "user": "51cdec45e4b0e42293a2254f"}, {"code": "(fn [c n] (mapcat #(repeat n %) c))", "problem": 33, "user": "51a10b2ce4b0b292b01ee3fe"}, {"code": "(fn [arr N] (reduce #( concat %1 (repeat N %2)) '() arr))", "problem": 33, "user": "51ccc179e4b02254fc794879"}, {"code": "(fn[coll rep] (mapcat (fn [i](repeatedly rep #(identity i))) coll\n  \t\t\t  )\n)", "problem": 33, "user": "51cec7b1e4b0e42293a2255b"}, {"code": "(fn [coll n] (mapcat #(take n (repeat %)) coll))", "problem": 33, "user": "51cdd3f0e4b0e42293a2254b"}, {"code": "(fn [s n] (reduce (fn [a b] (concat a (repeat n b))) [] s))", "problem": 33, "user": "51c9a705e4b09ce160bef5ab"}, {"code": "(fn [s x] (reduce #(into %1 (map (constantly %2) (range x))) [] s))", "problem": 33, "user": "51caca2ae4b068dadb8f2226"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "51d19c24e4b0cfcf579466c3"}, {"code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "51d08d67e4b067c365486351"}, {"code": "(fn [S n] (if (>= n 2) (apply interleave (take n (cycle (list S)))) S))", "problem": 33, "user": "51cf126ae4b0e42293a2256b"}, {"code": "(fn [l n] (mapcat #(repeat n %) l))", "problem": 33, "user": "51cc5cb3e4b02254fc79486f"}, {"code": "(fn rep [number times]\n    (reduce concat (map #(take times (repeat %)) number))\n)", "problem": 33, "user": "51d1111ce4b067c36548635f"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %)", "problem": 33, "user": "51ca7906e4b08b1cbd0d9487"}, {"code": "(fn replicate [lat n]\n  (reduce concat (map #(take n (repeat %)) lat)))", "problem": 33, "user": "51d1875be4b0cfcf579466c0"}, {"code": "(fn [s n] (reduce #(into %1 (repeat n %2)) [] s))", "problem": 33, "user": "50bfd849e4b042992946c649"}, {"code": "#(reduce\n  (fn [col x]\n    (concat col (repeat %2 x)))\n\t'()\n    %1)", "problem": 33, "user": "517cc671e4b0bbbf1f12af0a"}, {"code": "#(mapcat (fn [in] (repeat %2 in)) %1)", "problem": 33, "user": "51bdc609e4b0ff155d51d2b3"}, {"code": "(fn [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "51d4ed02e4b013d740b70dec"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "51c19873e4b0d204dbe2ca0d"}, {"code": "(fn [x y]\n  (loop [xs x ys y result []]\n    (if (not (empty? xs))\n         (if (> ys 0)\n              (recur xs (- ys 1) (conj result (first xs)))\n              (recur (rest xs) y result)\n           )\n      result)))", "problem": 33, "user": "51d10b1fe4b067c36548635e"}, {"code": "(fn x\n  ([l n] (x l n 0))\n  ([l n acc]\n  (cond\n   (empty? l) []\n   (= acc n) (x (rest l) n 0)\n   :else (cons (first l) (x l n (inc acc))))))", "problem": 33, "user": "518c0f4ee4b0f028e99addf7"}, {"code": "(fn f [s n]\n  (let [f*\n        (fn [acc s*]\n          (concat acc (repeat n s*)))]\n    (reduce f* [] s)))", "problem": 33, "user": "51d662fce4b0154f82ab92ef"}, {"code": "#(if (= 1 %2) % (apply interleave (replicate %2 %)))", "problem": 33, "user": "5082ccb3e4b06a522e8c7af3"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "516d2a46e4b06f078fab252f"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "problem": 33, "user": "51ae350fe4b09397d5109790"}, {"code": "#( loop [x %,y %2,z 0,m (count %),n []]\n   (if (== z m)\n     n\n     (recur x\n            y\n            (inc z)\n            m\n            (concat n (repeat y (nth x z))))))", "problem": 33, "user": "51c4690fe4b06b70b3e207e1"}, {"code": "#(loop [toProcess %1\n        n %2\n        acc []]\n   (let [current (first toProcess)\n         nextToProcess (next toProcess)]\n     (cond\n      (empty? toProcess) (seq acc)\n      :else (recur nextToProcess n (into acc (repeat n current)))\n      )\n    )\n   )", "problem": 33, "user": "51d67516e4b0154f82ab92f0"}, {"code": "(fn dup [sq n] (reduce (fn [s x] (concat s (take n (repeat x)))) '() sq))", "problem": 33, "user": "51d381b5e4b099f3b6acde01"}, {"code": "(fn [se n]\n    (loop [lst '()\n           cur (first se)\n           rst (rest se)]\n      (if (nil? cur) lst\n        (recur (concat lst (repeat n cur)) (first rst) (rest rst)))))", "problem": 33, "user": "4f038b62535dcb61093f6b1c"}, {"code": "(fn [s n]\n  (loop [theS s\n         result '()]\n    (if (empty? theS)\n      result\n      (recur (rest theS) (concat result (take n (repeat (first theS))))))))", "problem": 33, "user": "504dffe2e4b078edc5f5938b"}, {"code": "(fn mc [x n]\n  (mapcat #(repeat n %) x)\n)", "problem": 33, "user": "514cfa27e4b019235f6c057d"}, {"code": "(fn map-iterate [col times]\n (mapcat (partial repeat times) col))", "problem": 33, "user": "51cbaf14e4b08d8387cbedda"}, {"code": "(fn repseq [coll n]\n  (mapcat (partial repeat n) coll))", "problem": 33, "user": "51d96ad0e4b02ceefd94774f"}, {"code": "#(reduce concat (for [x %1] (repeat %2 x)))", "problem": 33, "user": "51d360d1e4b099f3b6acddff"}, {"code": "(fn [s t] (apply concat (for [x s] (repeat t x))))", "problem": 33, "user": "51da261ce4b02ceefd94775d"}, {"code": "(fn ! [s n]\n  (if (empty? s)\n    nil\n    (concat \n    \t(loop [n1 n ss nil]\n      \t  (if (<= n1 0)\n            ss\n        \t(recur (dec n1) (cons (first s) ss))\n          )\n        )\n        (! (rest s) n)\n     )\n   )\n)", "problem": 33, "user": "51db8244e4b0e067a9bbadc7"}, {"code": "(fn [coll cnt]\n         (apply concat (map (partial repeat cnt) coll)) \n)", "problem": 33, "user": "51da7e49e4b02ceefd947768"}, {"code": "(fn [coll n]\n  (reduce into []\n         (for [x coll]\n           (repeat n x))))", "problem": 33, "user": "51ab734ee4b04e3dc0c27b34"}, {"code": "(fn [coll n]\n    (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "51c8301ee4b07ef393169e4d"}, {"code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "problem": 33, "user": "5175533fe4b0dea9bbfba575"}, {"code": "(fn [my-seq times]\n   (reverse (reduce #(apply conj %1 (repeat times %2)) '() my-seq)))", "problem": 33, "user": "4ede0511535d10e5ff6f5330"}, {"code": "(fn replicate [rep n]\n  (reduce concat (map #(take n (repeat %)) rep)))", "problem": 33, "user": "51ac7e9be4b09397d510976f"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "51b6f4f9e4b04fc00976d479"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "51d49b75e4b013d740b70de6"}, {"code": "(fn mult [coll t] (mapcat #(repeat t %) coll))", "problem": 33, "user": "51d46133e4b013d740b70de2"}, {"code": "#(reduce   (fn [x y] (concat  x   ( repeat %2 y ) ))  ()  %)", "problem": 33, "user": "518644bce4b0da5a5be3baca"}, {"code": "(fn [coll n] (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "51dd55dae4b0c33a4e1da404"}, {"code": "(fn [cl n] \n   (mapcat\n    (fn [i] \n     (map (fn [_] (identity i)) (range 0 n))\n    )\n    cl\n   ) \n )", "problem": 33, "user": "51db9e1ee4b0e067a9bbadc9"}, {"code": "(fn replicate [lat n]\n  (reduce concat (map #(take n (repeat %)) lat)))", "problem": 33, "user": "51daa721e4b02ceefd94776f"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "4ec6a616535d6d7199dd36d2"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "51e00020e4b01188f0627534"}, {"code": "(fn rep [elems n]\n  (reduce concat (map (partial repeat n) elems)))", "problem": 33, "user": "51df505be4b01188f062752a"}, {"code": "(fn [coll x]\n  (reduce concat (map #(take x (repeat %)) coll)))", "problem": 33, "user": "51ce1320e4b0e42293a22551"}, {"code": "#(reduce into [] (map (fn [elem] (repeat %2 elem)) %1))", "problem": 33, "user": "51da52dbe4b02ceefd947763"}, {"code": "(fn [coll n] (mapcat #(take n (repeat %)) coll))", "problem": 33, "user": "51da565ae4b02ceefd947765"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "51b3d998e4b0f094dd986fa8"}, {"code": "(fn [s n] (\n           reduce (fn [a i]\n                     (concat a (take n (iterate identity i)))\n                    ) (empty list) s\n           )\n  )", "problem": 33, "user": "51e1c176e4b06a68e693eafb"}, {"code": "(fn [lst n]\n  (loop [l lst nl []]\n    (if (empty? l) nl\n      (recur (rest l) (concat nl (repeat n (first l)))))))", "problem": 33, "user": "51b66b31e4b02e5820733406"}, {"code": "#(if (= %2 1) % (apply interleave (repeat %2 %)))", "problem": 33, "user": "51b2e850e4b026427ecf067b"}, {"code": "(fn [xs n] (reduce #(apply conj %1 (for [i (range n)] %2)) [] xs))", "problem": 33, "user": "51e24a04e4b01e5198146430"}, {"code": "(fn  [coll n]\n  (->> coll\n       (mapcat (partial repeat n))))", "problem": 33, "user": "50e90813e4b033b0e80d11e7"}, {"code": "(fn [coll times] (reduce concat (map #(repeat times %) coll)))", "problem": 33, "user": "51e41f4be4b0efabf93c02ac"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "51e58e02e4b0efabf93c02d0"}, {"code": "#(for[x % y (range %2)]x)", "problem": 33, "user": "51e3cf8ee4b0efabf93c02a3"}, {"code": "(fn replicate [lat n]\n  (reduce concat (map #(take n (repeat %)) lat)))", "problem": 33, "user": "5167cf82e4b0c5a4140a3095"}, {"code": "(fn [a b] (mapcat #(repeat b %) a))", "problem": 33, "user": "51e23b80e4b01e519814642b"}, {"code": "(fn dup [ c n & dc ]\n  (if (empty? c)\n    '()\n    (concat (replicate n (first c)) (dup (rest c) n dc))\n  )\n)", "problem": 33, "user": "51e1a1fae4b06a68e693eaf6"}, {"code": "#(reduce (fn [acc x] (apply conj acc (repeat %2 x)))\n         []\n         %)", "problem": 33, "user": "51e89428e4b006d205356a51"}, {"code": "#(apply mapcat list (repeat %2 %1))", "problem": 33, "user": "51df825de4b01188f062752b"}, {"code": "(fn [coll n]\n  (reduce #(concat %1 (replicate n %2)) () coll))", "problem": 33, "user": "51e595a6e4b0efabf93c02d8"}, {"code": "(fn [coll n]\n  (mapcat #(take n (repeat %)) coll))", "problem": 33, "user": "4fea24e0e4b0547ebccb248d"}, {"code": "(fn [l n] (if (not= n 1) (apply interleave (map identity (repeat n l)))\n              l))", "problem": 33, "user": "51d9eb05e4b02ceefd947755"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "51ea9e22e4b0f1f103a0d14d"}, {"code": "(fn [x n] (mapcat #(take n (repeat %)) x))", "problem": 33, "user": "4f75469ee4b0fbe0118ec55a"}, {"code": "(fn [coll s] (reduce concat (map (fn [t] (repeat s t)) coll)))", "problem": 33, "user": "50856bd1e4b004985b776e4c"}, {"code": "(fn [lst n]\n  (loop [i 0 result '()]\n    (if (> i (dec (count lst)))\n      result\n      (recur (inc i) (concat result (repeat n (nth lst i)))))))", "problem": 33, "user": "51e0198ee4b01188f0627539"}, {"code": "(fn [s n]\n  (if (= 1 n)\n    s\n    (apply interleave (repeat n s))\n  )\n)", "problem": 33, "user": "51ba8f82e4b0fe3ecfb46434"}, {"code": "(fn [v n]\n  (reduce #(concat % (replicate n %2)) [] v))", "problem": 33, "user": "51eca2ace4b069f463c22cd0"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "51dd6a7ce4b0c33a4e1da409"}, {"code": "(fn [a b]\n  (if (= b 1) a\n  (apply interleave (take b(iterate identity a)))\n  )\n )", "problem": 33, "user": "518aec06e4b06da86c1973c2"}, {"code": "(letfn [(m-app [f col elem times]\n          (if-not (zero? times) (recur f (f col elem) elem (dec times))\n                                col))]\n  (fn [x y]\n    (reverse (reduce #(m-app conj %1 %2 y) () x))))", "problem": 33, "user": "51eadb98e4b0f1f103a0d153"}, {"code": "(fn [x y] (mapcat #(take y (repeat %)) x))", "problem": 33, "user": "51eb0374e4b0f1f103a0d156"}, {"code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "problem": 33, "user": "51eb3aace4b0f1f103a0d159"}, {"code": "(fn [xs n]\n  (if (= n 1)\n    xs\n    (apply interleave (take n (repeat xs)))))", "problem": 33, "user": "51ef66a7e4b0871fa145d9a5"}, {"code": "(fn rep [coll n] \n  (mapcat #(replicate n %) coll))", "problem": 33, "user": "51efd397e4b0249c592fbdeb"}, {"code": "(fn foo[c lst var] \n  (if (empty? lst)\n    nil\n    (if (= c var)\n      (foo 0 (rest lst) var)\n      (concat \n       (list (first lst))\n       (foo (+ 1 c) lst var)\n       )\n     )\n    )\n  )\n0", "problem": 33, "user": "51eec1a6e4b0871fa145d98d"}, {"code": "(fn [data cnt] (loop [d data\n                      c cnt\n                      i cnt\n                      x []]\n                 (if (empty? d)\n                   x\n                   (recur (if (= i 0)\n                            (rest d)\n                            d)\n                          c\n                          (if (= i 0)\n                            c\n                            (dec i))\n                          (if (= i 0)\n                            x\n                            (conj x (first d)))))))", "problem": 33, "user": "50214ffae4b0ef1d2d4433bc"}, {"code": "(fn [data times] (mapcat (fn [item] (repeat times item)) data))", "problem": 33, "user": "51e780dae4b0730ab87cf353"}, {"code": "(fn [sq num]\n  (if (> num 1) (apply interleave (take num (repeat sq))) sq)\n)", "problem": 33, "user": "5029f263e4b023940c84aa45"}, {"code": "(fn [s n]\n  (mapcat (partial repeat n) s))", "problem": 33, "user": "51197750e4b057cba170bc99"}, {"code": "#(reduce (fn [a b]\n         \t(concat a (repeat %2 b))) () %1)", "problem": 33, "user": "51f2ab8be4b0210f90e74554"}, {"code": "(fn r[c n] (mapcat #(repeat n %) c))", "problem": 33, "user": "51f2851fe4b0210f90e7454b"}, {"code": "#(reduce (fn [a b] ( concat a (repeat %3 b))) %1 %2) '()", "problem": 33, "user": "51efa6a6e4b0249c592fbde8"}, {"code": "(fn\n  [s n]\n  (if (> n 1)\n    (apply interleave (take n (repeat s)))\n    s))", "problem": 33, "user": "511b233ae4b07ab9ec456180"}, {"code": ";#(take %2 (repeat %1 input))\n\n#(apply concat (map (fn [input](repeat %2 input)) %1))\n;#(mapcat (fn [input](repeat %2 input)) %1)", "problem": 33, "user": "51d11f5de4b067c365486360"}, {"code": "(fn [aSeq qty]\n  (reduce #(concat % (repeat qty %2))\n          []\n          aSeq))", "problem": 33, "user": "51f04e89e4b0274c496158cd"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "51f55bdae4b0abb92f97f9d0"}, {"code": "(fn [x y]\n   (loop [s [] i 0]\n     (if (< i (count x))\n       (recur\n         (apply conj s (repeat y (nth x i)))\n         (inc i))\n       s)))", "problem": 33, "user": "5022292ee4b0846bc458ae46"}, {"code": "(fn [s, times]\n  (reduce\n    (fn [result, ix]\n      (concat result (repeat times ix))\n      ) [] s\n    )\n  )", "problem": 33, "user": "51b5a6e0e4b0f094dd986fce"}, {"code": "(fn [l n](mapcat #(apply conj [] (repeat n %1)) l))", "problem": 33, "user": "51f59607e4b0abb92f97f9d5"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "51dc5033e4b09c47a74ce109"}, {"code": "#(apply concat (for [x %1] (repeat %2 x)))", "problem": 33, "user": "51f13b80e4b06a20a2523f38"}, {"code": "(fn [l n]\n  (mapcat (partial repeat n) l))", "problem": 33, "user": "51dd9370e4b0c33a4e1da40c"}, {"code": "#(mapcat (fn r [n] (repeat %2 n)) %1)", "problem": 33, "user": "51f28a64e4b0210f90e7454e"}, {"code": "(fn [xs x]\n   (mapcat (partial repeat x) xs))", "problem": 33, "user": "50aedb8ce4b0a40c9cfb08d4"}, {"code": "(fn [coll count] \n  (mapcat #(take count (repeat %)) coll))", "problem": 33, "user": "5046ee3ee4b03b02161376b4"}, {"code": "(fn replicate-a-sequence [s n]\n  (reduce \n   \t#(apply (partial conj %1) (repeat n %2)) \n    (vector) \n   \ts))", "problem": 33, "user": "4f017b4e535dcb61093f6a37"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "51fa852ee4b0f1313d4689dd"}, {"code": "(fn [t k] (apply concat ((fn [v n] (map #(repeat n %) v) ) t k)))", "problem": 33, "user": "51f98843e4b09be9c177e54e"}, {"code": "(fn [s x] (mapcat (partial repeat x) s))", "problem": 33, "user": "50cf21dee4b0e61f11ddcd8b"}, {"code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "problem": 33, "user": "51facf22e4b0f1313d4689f0"}, {"code": "(fn [x y]\n  (mapcat #(repeat y %1) x))", "problem": 33, "user": "51f82769e4b09be9c177e527"}, {"code": "(fn [s n] (reduce #(concat %1 (repeat n %2)) [] s))", "problem": 33, "user": "51f8277be4b09be9c177e528"}, {"code": "(fn [x y] (mapcat #(repeat y %) x))", "problem": 33, "user": "515ebde3e4b01e5d11ccd0a8"}, {"code": "(fn [coll r]\n  (apply concat (map #(repeat r %) coll)))", "problem": 33, "user": "51f40975e4b0fca5e8b4822e"}, {"code": "(fn [c t] \n  (mapcat #(take t (cycle (list %))) c))", "problem": 33, "user": "512c0f84e4b03a42b6300232"}, {"code": "#(mapcat identity\n             (for [i %]\n               (for [x (range %2)]\n                 i)))", "problem": 33, "user": "4fa3c137e4b081705acca193"}, {"code": "(fn [a b] (mapcat #(repeat b %) a))", "problem": 33, "user": "51fa1375e4b0f1313d4689c9"}, {"code": "(fn replicator [coll times]\n  (reduce #(apply conj %1 (take times (repeat %2))) [] coll))", "problem": 33, "user": "518279abe4b0353c468deb65"}, {"code": "(fn [col x] (apply concat (map #(repeat x %) col)))", "problem": 33, "user": "51891c96e4b04c2714a2670e"}, {"code": "(fn [x n] (mapcat (partial repeat n) x))", "problem": 33, "user": "5201572be4b0d7096e99ddbb"}, {"code": "(fn [coll n]\n   (reduce concat\n       (map (partial repeat n) coll)\n    )\n)", "problem": 33, "user": "5201ada5e4b0b2e020a18f14"}, {"code": "(fn [s n]\n  (mapcat #(repeat n %1)\n          s))", "problem": 33, "user": "51db0d99e4b06aa4d4669a9d"}, {"code": "#(mapcat (fn [e] (repeat %2 e)) %1)", "problem": 33, "user": "50c781bbe4b00bb60fe0c535"}, {"code": "(fn [sec n]\n  (reduce concat (map \n                  #(loop [el %\n                          counter n\n                          result '()] \n                     (if (= counter 0)\n                       result\n                       (recur el (dec counter) (cons el result))) ) sec)))", "problem": 33, "user": "51f297a3e4b0210f90e74552"}, {"code": "#(if (< 1 %2) (apply interleave (repeat %2 %)) %)", "problem": 33, "user": "51f9b1d0e4b09be9c177e550"}, {"code": "#(apply concat (for [x %1]\n   (repeat %2 x)))", "problem": 33, "user": "51944aaae4b0142f60b4aedc"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "5201d2f3e4b0b2e020a18f22"}, {"code": "(fn [coll n] \n   (mapcat #(concat (repeat n %)) coll))", "problem": 33, "user": "5202cfe7e4b030ee0c5b2702"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "5203621ee4b0fb7e47ea51f5"}, {"code": "(fn [s n] (mapcat #(take n (repeat %)) s))", "problem": 33, "user": "52039e12e4b0fb7e47ea51ff"}, {"code": "(fn [what hm] (mapcat identity (map #(repeat hm %) what)))", "problem": 33, "user": "51f7dd27e4b06ff1c25c52dc"}, {"code": ";;(fn [m n]\n;;  (reduce #(concat %1 (repeat n %2)) nil m))\n\n(fn [m n]\n  (mapcat (partial repeat n) m))", "problem": 33, "user": "513fab65e4b00f13ea1bd891"}, {"code": "(fn [x y] (mapcat #(repeat y %1) x))", "problem": 33, "user": "52016fd3e4b0b2e020a18f10"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "518e7d3be4b051adb72789f0"}, {"code": "(fn[a n] (apply concat (for [x a] (repeat n x))))", "problem": 33, "user": "516ab8c2e4b081287f204e9e"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "problem": 33, "user": "51eab308e4b0f1f103a0d150"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "problem": 33, "user": "52069fade4b0bf4f1882c82c"}, {"code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "5208495ce4b0c1501ba9e6da"}, {"code": "(fn [coll, n]\n  (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "520612a7e4b0bf4f1882c81c"}, {"code": "(fn [x y] (mapcat (fn [i] (repeatedly y #(identity i))) x))", "problem": 33, "user": "51fa7154e4b0f1313d4689da"}, {"code": "#(apply concat (map (fn [x] (repeat %2 x)) %))", "problem": 33, "user": "52000564e4b023d2eb508ca8"}, {"code": "#(for [x %1 _ (range %2)] x)", "problem": 33, "user": "52015698e4b0d7096e99ddba"}, {"code": "(fn [x n] (if (= 1 n) x (apply interleave (repeat n x))))", "problem": 33, "user": "4f4ff836e4b03ad3f0c10cf4"}, {"code": "(fn [x n]\n  (reduce into (map #(repeat n %) (reverse x))))", "problem": 33, "user": "52084f75e4b01ce6bbf31dde"}, {"code": "(fn [s n]\n  (if (= 1 n) (seq s) (apply interleave (repeat n s))))", "problem": 33, "user": "5201ff99e4b0b2e020a18f26"}, {"code": "(fn dup [lst nr]\n  (let\n    [conser (fn conser [x n mylst]\n              (if (= 0 n)\n                mylst\n                (cons x (conser x (- n 1 ) mylst))))]\n    (cond\n     (empty? lst) nil\n     true (concat (conser (first lst) nr (dup (rest lst) nr))))))", "problem": 33, "user": "52091d57e4b0e152394d76f0"}, {"code": "(fn [x z] (reduce concat (map #(repeat z %) x)))", "problem": 33, "user": "520797ebe4b03bd50ef5466d"}, {"code": "(fn [a b] (reduce concat (map #(replicate b %) a)))", "problem": 33, "user": "51db1abae4b094966a2cd685"}, {"code": "(fn r [coll times] (mapcat #(repeat times %) coll))", "problem": 33, "user": "5209cb44e4b0e152394d7702"}, {"code": "(fn [x n] (apply concat (map (partial repeat n) x)))", "problem": 33, "user": "4f88f57ae4b033992c121c73"}, {"code": "#(mapcat (fn [x] (replicate %2 x)) %)", "problem": 33, "user": "51f66e0ee4b06ff1c25c52c3"}, {"code": "#(if \n   (= %2 1) \n   %1 \n   (apply interleave (repeat %2 %1)))", "problem": 33, "user": "514c2d05e4b02b8cbb2a9278"}, {"code": "(fn [coll x] \n  (mapcat #(repeat x %) coll))", "problem": 33, "user": "52029e5de4b030ee0c5b26fc"}, {"code": "(fn [coll size]\n  (mapcat #(repeat size %) coll))", "problem": 33, "user": "5080a697e4b01a93d3f38e49"}, {"code": "(fn [x y] (clojure.walk/walk #(take y (repeat %)) #(mapcat reverse %) x))", "problem": 33, "user": "52016690e4b0b2e020a18f0f"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "5201cf92e4b0b2e020a18f21"}, {"code": "(fn [s n] (mapcat (partial repeat n) s))", "problem": 33, "user": "52090654e4b0e152394d76ee"}, {"code": "(fn [coll n] (mapcat #(concat (repeat n %)) coll))", "problem": 33, "user": "520a576be4b0e152394d7714"}, {"code": "(fn [x n] (reduce concat (map #(take n (repeat %)) x)))", "problem": 33, "user": "4fa176c7e4b0dcca54ed6d5e"}, {"code": "(fn [s times] (reduce concat (map #(repeat times %) s)))", "problem": 33, "user": "5101b52ce4b0a79bcc8c0e0f"}, {"code": "#(if (> %2 1) (apply interleave (repeat %2 %)) %)", "problem": 33, "user": "5208a3a2e4b0301979a6c235"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "520e32a2e4b066f3ea161c93"}, {"code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "51a3738ce4b0e77c4ca60bf0"}, {"code": "(fn[d c] (if (> c 1)\n           (apply interleave(repeat c d))\n           d))", "problem": 33, "user": "520ed237e4b0101e4be6fcd9"}, {"code": "(fn [s n] (reduce concat (map (fn [x] (repeat n x)) s)))", "problem": 33, "user": "51ec9114e4b069f463c22ccd"}, {"code": "(fn [x y]\n        (mapcat #(replicate y %) x))", "problem": 33, "user": "520332f7e4b030ee0c5b2714"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "51e61772e4b0efabf93c02e2"}, {"code": "(fn f [s n]\n  (if (empty? s)\n    ()\n    (concat (repeat n (first s)) (f (rest s) n))))", "problem": 33, "user": "5213ffd3e4b0961f15ac4d7d"}, {"code": "#(reduce concat (for [a %1] (repeat %2 a)) )", "problem": 33, "user": "51f687c2e4b06ff1c25c52cb"}, {"code": "(fn [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "5211d195e4b07aea8afc4f76"}, {"code": "(fn [s, c] (reduce #(concat % (for [x (range 0 c)] %2)) [] s))", "problem": 33, "user": "52154514e4b02f6d8ea676c0"}, {"code": "(fn [sq reps] (reduce #(into % (repeat reps %2)) [] sq))", "problem": 33, "user": "51f9527fe4b09be9c177e549"}, {"code": "(fn [s n]\n  (reduce #(concat % (repeat n %2))\n          [] s))", "problem": 33, "user": "520242bae4b030ee0c5b26e3"}, {"code": "(fn zp [x n] (cond (empty? x) [] :else (concat (take n (repeat (first x))) (zp (rest x) n))))", "problem": 33, "user": "52153bdde4b0961f15ac4daa"}, {"code": "(fn replicate [s times]\n  (apply mapcat (fn [& a] (apply vector a)) (repeat times s)))", "problem": 33, "user": "52173464e4b082aa80a88c75"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "5151c184e4b03e678e393add"}, {"code": "(fn [y i]\n  (reduce #(concat %1 ((fn copy [x, cnt] (if (= cnt 1) [x] (concat [x] (copy x (- cnt 1))))) %2 i) ) () y))", "problem": 33, "user": "51fc44c5e4b0f1313d468a1b"}, {"code": "(fn an-anonymous-function-with-a-name-lol-hi-haterz \n[sequence-of-things-that-you-want-to-be-replicated\nthe-number-of-times-you-want-each-thing-to-be-replicated]\n(mapcat #_(this was added so this line would be long too)\n#(repeat the-number-of-times-you-want-each-thing-to-be-replicated %) \nsequence-of-things-that-you-want-to-be-replicated))", "problem": 33, "user": "50e1bdd8e4b019fc399ce17f"}, {"code": "(fn [col n]\n  (reduce\n    (fn [all new]\n      (concat all (repeat n new)))\n     []\n     col))", "problem": 33, "user": "51aee76ce4b09397d5109796"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "5131d817e4b06942423563ca"}, {"code": "(fn [s n](mapcat #(repeat n %) s))", "problem": 33, "user": "52160dbee4b0bf4bffd29cb3"}, {"code": "(fn [l n] \n  (mapcat #(for [_ (range n)] %) l))", "problem": 33, "user": "521249f5e4b06aa6d1666ba2"}, {"code": "(fn s [ls n]\n  (if (empty? ls)\n    '()\n    (concat \n      (take n (repeat (first ls))) \n      (s (rest ls) n))))", "problem": 33, "user": "521a4ff5e4b0c4ef0be83004"}, {"code": "(fn [s n]\n  (loop [acc [] xs s]\n    (if (empty? xs) acc\n      (recur (concat acc (repeat n (first xs))) (rest xs)))))", "problem": 33, "user": "52199105e4b0c4ef0be82ff9"}, {"code": "(fn [coll n] (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "51f805b0e4b06ff1c25c52e2"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "5219e575e4b0c4ef0be82ffd"}, {"code": "(fn [s n] (apply concat (map #(repeat n %) s)))", "problem": 33, "user": "5174ade2e4b07031762f2edf"}, {"code": ";original soln\n;#(if (> %2 1)\n;   (apply interleave (take %2 (repeat %1)))\n;   %1)\n\n#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "5213dbc3e4b0961f15ac4d74"}, {"code": "(fn [c n] (mapcat #(repeat n %) c))", "problem": 33, "user": "5078dedae4b08327cd804a5d"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "521c6a1ae4b0c4ef0be83083"}, {"code": "(fn [coll n]\n  (if (= n 1)\n    coll\n    (apply interleave (repeat n coll))))", "problem": 33, "user": "520693e1e4b0bf4f1882c829"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "52117ea7e4b07aea8afc4f70"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "521679e9e4b0bf4bffd29cca"}, {"code": "(fn [l x] (mapcat #(repeat x %) l))", "problem": 33, "user": "4fa7de4ce4b081705acca1c9"}, {"code": "(fn [data count] (apply concat (map #(take count (repeat %)) data)))", "problem": 33, "user": "4f7e7cbde4b06e829148e1cf"}, {"code": "(fn[v n]\n  (loop [ans [] vv v]\n    (if (empty? vv) \n      ans \n      (recur \n        (concat ans (loop [nn n aa []] \n          (if (= nn 0)\n            aa  \n            (recur\n              (dec nn) \n              (conj aa (first vv))))))\n        (next vv)))))", "problem": 33, "user": "52196842e4b0890f2f822bfa"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %)", "problem": 33, "user": "521dceeae4b050d5da042802"}, {"code": "(fn [sqnc rep] (mapcat (fn [x] (repeat rep x) ) sqnc))", "problem": 33, "user": "5213348ae4b0d32679a50652"}, {"code": "(fn [xs n]\n  (reduce #(into %1 (repeat n %2)) [] xs))", "problem": 33, "user": "521e4f22e4b0dd19981ad079"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "521e8227e4b0dd19981ad082"}, {"code": "(fn [s n]\n  (loop [s s\n         r ()]\n    (if (empty? s)\n      (reverse r)\n      (recur (rest s)\n             (concat (repeat n (first s)) r)))))", "problem": 33, "user": "521b9f92e4b0c4ef0be8304c"}, {"code": "(fn chuj [xs n] (reduce #(concat %1 (repeat n %2)) [] xs )\n  )", "problem": 33, "user": "5210e5c5e4b080a8d9b9d63f"}, {"code": "(fn [coll n] (mapcat #(replicate n %) coll))", "problem": 33, "user": "5213d7aae4b0961f15ac4d72"}, {"code": "(fn [s n] (apply concat (map #(repeat n %) s)))", "problem": 33, "user": "519c4111e4b0a1d87b003458"}, {"code": "#(mapcat (partial repeat %2)%1)", "problem": 33, "user": "520cb8c4e4b0b022ef140c9a"}, {"code": "(fn replicate [s n]\n  (mapcat #(take n (iterate identity %)) s))", "problem": 33, "user": "5220bc0fe4b0e6a83c8925a7"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "5216933be4b000d124d989cf"}, {"code": "(fn foo [lst n]\n  (if (empty? lst)\n    '()\n    (let [current (first lst)]\n      (concat (repeat n current) (foo (rest lst) n)))))", "problem": 33, "user": "5220a770e4b0e6a83c8925a3"}, {"code": "(fn [l n]\n  (mapcat #(repeat n %) l))", "problem": 33, "user": "52218b29e4b0e6a83c8925da"}, {"code": "(fn [a b] (if (= b 1) a (apply interleave (repeat b a))))", "problem": 33, "user": "52213426e4b0e6a83c8925c4"}, {"code": "(fn myRep [xs reps] (if (empty? xs) ()\n                         (concat (repeat reps (first xs))\n                                 (myRep (next xs) reps))))", "problem": 33, "user": "52161db6e4b0bf4bffd29cb8"}, {"code": "(fn [c n]\n  (reduce\n    concat\n    (map #(take n (repeat %)) c)))", "problem": 33, "user": "521b73f5e4b0c4ef0be83043"}, {"code": "(fn -replicate [s n]\n  (mapcat #(repeat n %) s))", "problem": 33, "user": "4ed2a31c535d44c135fd68db"}, {"code": "(fn replicate-seq \n  [s n]\n  (if (> n 1)\n    (apply interleave (repeat n s))\n     s))", "problem": 33, "user": "521b339fe4b0c4ef0be83031"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "5224a46ce4b01819a2de42e5"}, {"code": "(fn rep [s times]\n  (reduce #(concat %1 (repeat times %2)) '() s))", "problem": 33, "user": "522048b3e4b0e6c71e0c0c16"}, {"code": "(fn dup [xs t]\n  (let [dup-single (fn [x] (for [i (range t)] x))]\n    (reduce concat () (map dup-single xs))))", "problem": 33, "user": "4fb710f4e4b081705acca2cd"}, {"code": "(fn [x n] (reduce #(apply conj %1 (repeat n %2)) [] x))", "problem": 33, "user": "52244a77e4b01819a2de42d1"}, {"code": "(fn [x y] (mapcat #(take y (repeat %)) x))", "problem": 33, "user": "51a91ac2e4b08d8ec191b822"}, {"code": "(fn [coll n]\n  (apply concat(map #(repeat n %) coll)))", "problem": 33, "user": "52161028e4b0bf4bffd29cb4"}, {"code": "#(apply concat (map (partial repeat %2) %))", "problem": 33, "user": "52253004e4b01819a2de42fa"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "522454f4e4b01819a2de42d3"}, {"code": "(fn der [ lst n ]\n\t(if (empty? lst)\n        '()\n        (concat (take n (repeat (first lst)))\n               (der (rest lst) n))))", "problem": 33, "user": "52286b19e4b0186687e23a7e"}, {"code": "(fn mult [c r]\n  (let [[x & xs] c]\n    (if (empty? c)\n      c\n  \t  (concat (for [z (range 0 r)] x) (mult xs r)))))", "problem": 33, "user": "5225a0f5e4b01819a2de430e"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "problem": 33, "user": "4daec4a0edd6309eace4d15e"}, {"code": "(fn [x n]\n  (mapcat identity (map #(repeat n %) x)))", "problem": 33, "user": "52277ab9e4b0186687e23a4f"}, {"code": "(fn [xs n]\n  (mapcat (fn [el]\n            (apply list (map (fn [i] el) (range n)))) xs))", "problem": 33, "user": "51ef31dfe4b0871fa145d9a0"}, {"code": "(fn [v t] (mapcat #(take t (repeat %)) v))", "problem": 33, "user": "5065dd94e4b0313a384e5643"}, {"code": "(fn [col n] \n   (reduce #(concat % (take n (repeat %2))) [] col))", "problem": 33, "user": "4ff9a200e4b0678c553fc3ab"}, {"code": "(fn [mysequence duplicates] \n  (if (= duplicates 1)\n    mysequence\n  \t(apply interleave (take duplicates (iterate identity mysequence)))))", "problem": 33, "user": "520f46f9e4b0101e4be6fcee"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "5225666be4b01819a2de4300"}, {"code": ";(fn [s t] (apply concat (map (fn [e] (repeat t e)) s)))\n; concat und map zusammenfassen zu mapcat\n(fn [s t] (mapcat (fn [e] (repeat t e)) s))", "problem": 33, "user": "5207d70ae4b03bd50ef54675"}, {"code": "(fn [x ntimes] (mapcat #(repeat ntimes %) x))", "problem": 33, "user": "522600cfe4b0f4c7e20d29c8"}, {"code": "#(reduce (fn [a, x] (apply conj a (repeat %2 x))) [] %1)", "problem": 33, "user": "522b922ee4b0d34ee08e71c3"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "510d59cce4b078ea71921134"}, {"code": "(fn [x y] (mapcat #(repeat y %) x))", "problem": 33, "user": "522404d8e4b01819a2de42c0"}, {"code": "(fn dupe [coll n]\n  (if (empty? coll)\n  '()\n  (let [[x & xs] coll]\n    (concat (repeat n x) (dupe xs n))\n    )\n  ))", "problem": 33, "user": "52127ee4e4b0d32679a5063c"}, {"code": "(fn [x y] (reduce #(apply conj % (repeat y %2)) [] x))", "problem": 33, "user": "51e28063e4b08e53a149f0f2"}, {"code": "(fn [x y] (reduce #(concat %1 (repeat y %2)) [] x))", "problem": 33, "user": "522eb5cce4b01cdb292c5f0c"}, {"code": "#(for [x % y (range %2)] x)", "problem": 33, "user": "51a058dae4b0b292b01ee3f3"}, {"code": "#((fn flat1 [coll] (apply concat coll))\n  (map (fn [x] \n               (map (fn [y] x) (range %2))) %1))", "problem": 33, "user": "522d0360e4b0806774ddfef7"}, {"code": "(fn [l n](vec(mapcat #(repeat n %) l)))", "problem": 33, "user": "5224cf82e4b01819a2de42ef"}, {"code": "(fn [l x] (mapcat #(take x (repeat %)) l))", "problem": 33, "user": "5230d9bde4b0035e815da397"}, {"code": "(fn [x y] (reduce concat (map #(take y (repeat %)) x)))", "problem": 33, "user": "5125029de4b0ce9225d2ed3e"}, {"code": "(fn [what times]\n  (mapcat #(repeat times %) what))", "problem": 33, "user": "510fe537e4b04c71fce993dd"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "522fdff7e4b032bbe342416c"}, {"code": "#(mapcat (fn [s] (repeat %2 s)) %1)", "problem": 33, "user": "5191ac45e4b0d428d29dc1b6"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "51c611c4e4b03a28d42333bf"}, {"code": "(fn [s t]\n  (mapcat #(take t (repeat %)) s))", "problem": 33, "user": "522e6c01e4b01cdb292c5f01"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "514fd753e4b0b449e54b8e00"}, {"code": "(fn [data cnt]\n   (apply concat (map #(repeat cnt %) data)))", "problem": 33, "user": "506c0a02e4b0eda3100c090d"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4e5e391c535d8a8b8723a2d0"}, {"code": "(fn\n  [coll n]\n  (mapcat identity (apply map vector (take n (repeat coll)))))", "problem": 33, "user": "510591dde4b06d28cacc92eb"}, {"code": "(fn ! [s n]\n  (if (empty? s) \n    (list )\n    (concat (repeat n (first s)) (! (rest s) n))))", "problem": 33, "user": "523361d8e4b0f0b72fabf405"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "4f52ae00e4b03ad3f0c10d42"}, {"code": "(fn [s n] (apply concat (map #(repeat n %1) s)))", "problem": 33, "user": "5235976fe4b0a643f2dcb74f"}, {"code": "(fn [x n] (mapcat (fn [y] (take n (repeat y)))x))", "problem": 33, "user": "5231d8fae4b0e2e8de81d1fb"}, {"code": "(fn r [coll n]\n  (apply concat (for [i coll] (repeat n i)))\n  )", "problem": 33, "user": "5228f870e4b0186687e23a98"}, {"code": "(fn [coll n]\n   (reduce concat (map #(repeat n %) coll)))", "problem": 33, "user": "516282c3e4b0e6d3c4734711"}, {"code": "(fn [coll n] (mapcat (partial repeat n) coll))", "problem": 33, "user": "516abecae4b081287f204e9f"}, {"code": "(fn [c n] (apply concat (map #(repeat n %) c )))", "problem": 33, "user": "522eba30e4b01cdb292c5f0e"}, {"code": "(fn [s n] (mapcat #(take n (repeat %)) s))", "problem": 33, "user": "508fd6bae4b0ea685a20f76b"}, {"code": "(fn [col n] (mapcat (fn [x] (repeat n x)) col))", "problem": 33, "user": "5233ad08e4b07e3ee2be83ac"}, {"code": "(fn [s n] (mapcat (fn [i] (repeatedly n #(identity i))) s))", "problem": 33, "user": "523353a7e4b0f0b72fabf402"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "523089f8e4b0035e815da388"}, {"code": "#(loop [initial-sequ %1\n         final-sequ '()]\n    (if (empty? initial-sequ)\n      final-sequ\n      (let [cur-sequ (first initial-sequ)]\n        (recur (rest initial-sequ) (concat final-sequ (repeat %2 cur-sequ))))))", "problem": 33, "user": "523288fee4b035af41902a88"}, {"code": "(fn [coll n] (mapcat #(take n (repeat %)) coll))", "problem": 33, "user": "510ee996e4b07438aa321462"}, {"code": "(fn [s n] (apply concat (map (fn [x] (repeat n x)) s)))", "problem": 33, "user": "5235a902e4b0a643f2dcb750"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "52381b2ae4b0fae3832e99ef"}, {"code": "(fn [n i] (\n           mapcat #(take i (repeat %)) n))", "problem": 33, "user": "52394c03e4b0d705d026ef09"}, {"code": "#(apply mapcat list %1 (repeat (dec %2) %1))", "problem": 33, "user": "52271ffee4b04e78ff2e19a9"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "52393e16e4b0d705d026ef06"}, {"code": "(fn [col, times] \n  (mapcat #(repeat times %) col)\n )", "problem": 33, "user": "52382d91e4b0fae3832e99f0"}, {"code": "#(apply concat (apply map list ( take %2 (repeat %))))", "problem": 33, "user": "523a657be4b081681ca7adc1"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "508923d5e4b06d8254e936e8"}, {"code": "(fn replicate [xs n]\n  (reduce #(apply conj %1 (repeat n %2)) '[] xs))", "problem": 33, "user": "523b82efe4b07becd5be21f0"}, {"code": "(fn [l n] (apply concat (map #(repeat n %) l)))", "problem": 33, "user": "523b10dfe4b02f719975bdb8"}, {"code": "(fn repl [sequ n] \n  (let [f (first sequ) r (rest sequ)]\n  (if (= sequ '()) '()\n  (concat (take n (repeat f)) (repl r n)))))", "problem": 33, "user": "5239caa6e4b0d705d026ef27"}, {"code": "(fn [x, y] (reduce #(concat %1 %2) (map #(repeat y %) x)))", "problem": 33, "user": "5220ef05e4b0e6a83c8925b8"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "5213d81de4b0961f15ac4d73"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll) )", "problem": 33, "user": "523a9fc9e4b081681ca7adca"}, {"code": "(fn [seq n] (mapcat #(repeat n %) seq))", "problem": 33, "user": "523b4e91e4b07becd5be21ef"}, {"code": "#(let [n %2]\n  (loop [l %1 ans []]\n    (if (empty? l)\n      ans\n      (recur (rest l) (into ans (repeat n (first l))))\n    )\n  )\n)", "problem": 33, "user": "51f09f3de4b0274c496158d7"}, {"code": "(fn [l num]\r\n    (loop [curr l acc []]\r\n        (if (empty? curr) acc\r\n                        (recur (rest curr) (concat acc (repeat num (first curr)) )))))", "problem": 33, "user": "523dd963e4b06956f8342ca1"}, {"code": "(fn [x y] (apply concat (map #(repeat y %1) x)))", "problem": 33, "user": "52166e50e4b0bf4bffd29cc6"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "523d02b0e4b0dbf0c3017289"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "51857e64e4b0da5a5be3babe"}, {"code": "#(apply (partial mapcat list ) (repeat %2 %))", "problem": 33, "user": "523b1988e4b02f719975bdbc"}, {"code": "(fn [x n]\n  (loop [s x i n r '()]\n    (if (empty? s) r\n      (if (= i 0) (recur (rest s) n r)\n        (recur s (dec i) (concat r (list (first s))))))))", "problem": 33, "user": "523bc0e6e4b07becd5be21f9"}, {"code": "(fn [l n] (reduce #(concat %1 (repeat n %2)) [] l))", "problem": 33, "user": "4fec550de4b0681fd128dca6"}, {"code": "(fn [x y] \n      (mapcat #(take y (repeat %)) x)\n    )", "problem": 33, "user": "5229211be4b04c906c9c6a63"}, {"code": "(fn [sq n]\n   (let [cf (comp reverse (partial reduce concat))]\n     (cf\n       (reduce #(conj % (repeat n %2)) () sq))))", "problem": 33, "user": "523bd9c0e4b07becd5be2201"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "523ed743e4b057c4b7cd0a79"}, {"code": "(fn [x y] (mapcat #(repeat y %1) x))", "problem": 33, "user": "50aa60bee4b056ee01935865"}, {"code": "(fn [s n] (reduce conj [] (for [e s i (range n)] e)))", "problem": 33, "user": "4f43894ee4b0d7d3c9f3fd21"}, {"code": "(fn [x co] (reduce #(apply conj %1 (take co (repeat %2))) [] x))", "problem": 33, "user": "52319066e4b0e2e8de81d1e9"}, {"code": "(fn [l n](mapcat (fn [i](take n (iterate #(do %) i))) l))", "problem": 33, "user": "5220909fe4b0e6a83c89259f"}, {"code": "(fn [a b] (mapcat #(repeat b %) a))", "problem": 33, "user": "5230793be4b0035e815da383"}, {"code": "(fn [seq times]\n    (reduce (fn [col ele]\n              (concat col (repeat times ele)))\n            \"\"\n            seq))", "problem": 33, "user": "511e763ce4b03e81d390ac29"}, {"code": "(fn [xs n] (apply concat (map (partial repeat n) xs)))", "problem": 33, "user": "523c6451e4b07becd5be2222"}, {"code": "(fn [xs n] (mapcat #(take n (repeat %)) xs))", "problem": 33, "user": "523ed522e4b057c4b7cd0a78"}, {"code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "problem": 33, "user": "5236b6bce4b05f3be1c7c8fe"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "5241fe85e4b076e5d3121f42"}, {"code": "(fn [x y] (reduce (fn [a b] ( concat a (repeat y b))) [] x))", "problem": 33, "user": "52433e0fe4b076204b44fab3"}, {"code": "(fn [x y] (mapcat #(take y (repeat %)) x))", "problem": 33, "user": "52379c46e4b0fae3832e99db"}, {"code": "(fn [col n] (mapcat #(repeat n %) col))", "problem": 33, "user": "52435d0ce4b076204b44fab5"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "52437703e4b076204b44fabf"}, {"code": "(fn [lst n] (reduce (fn [acc val] (concat acc (repeat n val))) [] lst))", "problem": 33, "user": "506929ffe4b01dc6af13f82b"}, {"code": "(fn [lst n]\n\t(reduce \n     (fn [lst el] \n       (reduce \n        #(conj %1 %2) \n        lst \n        (repeat n el))) \n     [] lst))", "problem": 33, "user": "522d3a16e4b0e26240291d50"}, {"code": "(fn [s x] (mapcat #(repeat x %) s))", "problem": 33, "user": "4f2d5f5de4b0d6649770a05a"}, {"code": "#(mapcat (fn [item] (repeat %2 item)) %1)", "problem": 33, "user": "5245fbbbe4b09dbe66b56183"}, {"code": "(fn [c n] (mapcat #(repeat n %) c))", "problem": 33, "user": "5245af03e4b08ba239308124"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "523605d1e4b05f3be1c7c8e2"}, {"code": "(fn [coll n]\n  (reduce #(concat % (repeat n %2))\n          [] coll))", "problem": 33, "user": "52479487e4b05ef8e38e6373"}, {"code": "(fn [s n] (reduce concat (map #(replicate n %) s)))", "problem": 33, "user": "51fe9d7ce4b0f1313d468a70"}, {"code": "(fn [c n] (mapcat #(repeat n %) c))", "problem": 33, "user": "51cfc616e4b0e42293a22578"}, {"code": "(fn [s c]\n  (if (= 1 c)\n    s\n    (apply interleave (repeat c s))))", "problem": 33, "user": "51b0e7b3e4b0c53cf2e68a6e"}, {"code": "(fn [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "522f483ce4b032bbe342415a"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "52487654e4b05ef8e38e63dc"}, {"code": "(fn [xs x] (mapcat #(repeat x %) xs))", "problem": 33, "user": "52471ac0e4b05ef8e38e6354"}, {"code": "(fn replicate-seq [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "5190772de4b09156e89b2a0a"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "problem": 33, "user": "5246e945e4b0644eb7b0783b"}, {"code": "(fn [coll x]\n   \t(reduce\n     (fn [my-vec elm]\n       \n       (reduce\n        (fn [v e]\n          (conj v e))\n        my-vec\n        (repeat x elm)\n        ))\n     []\n     coll))", "problem": 33, "user": "518d1b5be4b070277754617b"}, {"code": "#(apply concat (map (fn [x] (map (fn [o] x) (range %2))) %1))", "problem": 33, "user": "52485723e4b05ef8e38e63d2"}, {"code": "(fn [x y] (let [lst (atom '()) lstr (atom x)]\n            (while (not (= (* (count x) y) (count @lst)))\n                        (loop [j 0]\n                          (if (< j y)\n                            (do\n                              (swap! lst conj (last  @lstr))\n                              (recur (+ 1 j))\n                              )\n                            (swap! lstr butlast)\n                            )\n                          )\n              )\n\t\t\t  @lst\n            )\n  )", "problem": 33, "user": "522f39a8e4b032bbe3424159"}, {"code": "(fn [col ntimes]\n   (mapcat #(repeat ntimes %) col)\n   )", "problem": 33, "user": "50550f43e4b0b1b9d1860eb7"}, {"code": "(fn dup [in, n]\n  (loop [in-seq in, out-seq [], cnt n]\n    (if (= (first in-seq) nil)\n        out-seq\n      (recur (rest in-seq) \n             (loop [out-seq out-seq, element (first in-seq), cnt cnt]\n               (if (= cnt 0)\n                   out-seq\n                 (recur (conj out-seq element) element (dec cnt))\n                 )\n               )\n             cnt))))", "problem": 33, "user": "52463059e4b09dbe66b56198"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "520a9897e4b01da9d47a99e1"}, {"code": "(fn doit [coll n]\n  (let [ret (atom (empty coll))]\n    (doseq [x coll]\n      (swap! ret concat (repeat n x)))\n    @ret))", "problem": 33, "user": "4f601623e4b0defedf855fa3"}, {"code": "(fn [seq n] (mapcat #(repeat n %) seq))", "problem": 33, "user": "524cdd51e4b0752c4cb68ccc"}, {"code": "(fn [coll rep] (mapcat #(repeat rep %) coll))", "problem": 33, "user": "51f66891e4b06ff1c25c52c1"}, {"code": "(fn [s n] (mapcat #(take n (repeat %)) s))", "problem": 33, "user": "524be8e0e4b09eba1c0223f1"}, {"code": "(fn fun10 [x k]\n  (letfn [(concat3 [x y]\n  (if-not (empty? y) (let [t (concat x (first y))] (concat3 t (rest y))) x)\n)]\n  (let [t (for [i x] (replicate k i))]\n        (concat3 (first t) (rest t))\n        )   \n))", "problem": 33, "user": "52132f8de4b0d32679a50651"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "50471d36e4b03b02161376b6"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "524a74b3e4b05ef8e38e64a7"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "523f0bbfe4b01c266ffa7f91"}, {"code": "(fn [x n] (reverse (reduce into (map #(repeat n %) x))))", "problem": 33, "user": "524ae8e6e4b09eba1c0223b5"}, {"code": "(fn [l n] (mapcat #(repeat n %) l))", "problem": 33, "user": "524feb3fe4b0541d1855b81f"}, {"code": "(fn [a n] \n\t(apply concat \n\t\t(map #(take n (repeat %)) a)))", "problem": 33, "user": "524e79c1e4b0541d1855b7e0"}, {"code": "(fn [xs n] (mapcat #(take n (repeat %)) xs))", "problem": 33, "user": "523b1a65e4b02f719975bdbd"}, {"code": "(fn [s n] (reduce (fn [acc x] (concat acc (repeat n x))) [] s))", "problem": 33, "user": "52452225e4b0d8acf9ed6ae6"}, {"code": "(fn [xs n] (reduce #(apply conj % (replicate n %2)) [] xs))", "problem": 33, "user": "524740e7e4b05ef8e38e635d"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "524b90fae4b09eba1c0223df"}, {"code": "(fn rep  [l, n]\n  (if (not (empty? l))\n    (concat (take n (repeat (first l)))  (rep (rest l) n))\n    ))", "problem": 33, "user": "5245d29ae4b09dbe66b56174"}, {"code": "(fn [coll rep]\n  (reduce\n   #(apply conj %1 (repeat rep %2))\n   []\n   coll))", "problem": 33, "user": "52525a0ee4b0541d1855b8a2"}, {"code": "#(if (not= 1 %2)(apply interleave (repeat %2 %)) %)", "problem": 33, "user": "524dd1c3e4b0f245900d275c"}, {"code": "#(if (= 1 %2) % (apply interleave (repeat %2 %)))", "problem": 33, "user": "525078b6e4b0541d1855b832"}, {"code": "(fn[ar co](mapcat #(repeat co %) ar))", "problem": 33, "user": "52531344e4b0541d1855b8e5"}, {"code": "(fn [coll r] (reduce concat (map #(repeat r %) coll)))", "problem": 33, "user": "52527192e4b0541d1855b8af"}, {"code": "#(apply concat (map (fn [input](repeat %2 input)) %1))", "problem": 33, "user": "5224060de4b01819a2de42c3"}, {"code": "(fn [c n] (mapcat #(repeat n %) c))", "problem": 33, "user": "524469dee4b0d8acf9ed6a9d"}, {"code": "(fn [coll times]\n  (mapcat #(repeat times %) coll)\n)", "problem": 33, "user": "5254f908e4b0541d1855b9ba"}, {"code": "(fn [lst times] (apply concat (map (fn [n] (repeat times n)) lst)))", "problem": 33, "user": "4ef7a483535dced4c769f258"}, {"code": "(fn [s n]\n  (let [helper (fn [item cnt] (take cnt (repeat item)))]\n    (loop [s s\n           result '()]\n      (if (first s)\n        (recur (rest s) (concat result (helper (first s) n)))\n        result))))", "problem": 33, "user": "5256cd77e4b0541d1855ba39"}, {"code": "(fn du\n   ([coll times]\n      (loop [s '() col coll]\n        (if (empty? col)\n            (reverse s)\n           (recur ((fn a \n                    [t se item]\n                    (if (zero? t)\n                       se\n                     (a (dec t) (conj se item) item)\n                    )) times s (first col))                    \n            (rest col))\n        )\n      )\n   )\n)", "problem": 33, "user": "51d28e15e4b0d13b04db0d9b"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "5252b59de4b0541d1855b8cf"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "5250a9abe4b0541d1855b83b"}, {"code": "(fn [x n] (if (= n 1) x (apply interleave (repeat n x))))", "problem": 33, "user": "5217c26fe4b0a4bccb16cab8"}, {"code": "(fn fn33 [coll n]\n  (mapcat #(concat (repeat n %)) coll))", "problem": 33, "user": "5042bb9ae4b034ff00315d16"}, {"code": "#(apply concat (map (fn [n] (repeat %2 n)) %))", "problem": 33, "user": "50aca92ee4b071b89ef26232"}, {"code": "(fn [x t] (mapcat (partial repeat t) x))", "problem": 33, "user": "5250a13ee4b0541d1855b839"}, {"code": "(fn rep [x m]\n  (letfn [\n          (repe [e n]\n                (if (= n 0)\n                  '()\n                  (cons e (repe e (- n 1)))\n                  )\n                )\n          ]\n    (if (= x '())\n      '()\n      (concat (repe (first x) m) (rep (rest x) m))\n      )\n    )\n  )", "problem": 33, "user": "52586d24e4b0cb4875a45cb0"}, {"code": "(fn [coll t] (reduce concat (map #(take t (repeat %)) coll)))", "problem": 33, "user": "5248c4c7e4b05ef8e38e63e8"}, {"code": "(fn [coll n] (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "5244fa73e4b0d8acf9ed6acb"}, {"code": "(fn [s n]\n  (reduce concat (map #(repeat n %) s)))", "problem": 33, "user": "50a3f23ae4b08bbd0eb4ed2f"}, {"code": "#(apply mapcat vector (repeat %2 %1))", "problem": 33, "user": "525431dfe4b0541d1855b970"}, {"code": "(fn [xs n] (reduce concat (map (partial repeat n) xs)))", "problem": 33, "user": "525b12b1e4b0cb4875a45d04"}, {"code": "#(reduce (fn [s el] (apply conj s el)) [] (map  (fn [times] (repeat %2 times)) %1))", "problem": 33, "user": "5259a16ee4b0cb4875a45ce1"}, {"code": "(fn myfn [s1 n1]\n\t(loop [x s1 result []]\n    \t(if (empty? x)\n        \tresult\n        \t(recur (rest x)\n            \t(loop [y n1 res result]\n                \t(if (zero? y) res\n                    \t(recur (dec y) (conj res (first x))\n                        )\n                    )\n                )\n            )\n        )\n    )\n)", "problem": 33, "user": "525ba7bbe4b0cb4875a45d28"}, {"code": "(fn [xs coll] (mapcat #(repeat coll %) xs))", "problem": 33, "user": "525ba01be4b0cb4875a45d20"}, {"code": "(fn\n  [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "50fc48dde4b0d10d794c19f6"}, {"code": "(fn [s n]\n  (mapcat #((fn f [t v n] \n              (if (> n 0)\n                (f (conj t %) v (dec n))\n                t)) [] % n) s))", "problem": 33, "user": "524ab5f2e4b09eba1c02239d"}, {"code": "#(if (> %2 1) (apply interleave (repeat %2 %)) %)", "problem": 33, "user": "525b0b51e4b0cb4875a45d01"}, {"code": "#(mapcat (partial repeat %2 ) %1)", "problem": 33, "user": "515b03fee4b0a102a3e5262a"}, {"code": "(fn repl [x n] (if (empty? x) '() (concat (take n (iterate (fn [y] y) (first x)))\n(repl (rest x) n))))", "problem": 33, "user": "52474ec2e4b05ef8e38e6361"}, {"code": "#(if (< %2 2) %1 (apply interleave (repeat %2 %1)))", "problem": 33, "user": "525a7b9fe4b0cb4875a45cf5"}, {"code": "(fn multiply \n  [coll x] \n  (reduce #(into %1 (repeat x %2)) [] coll))", "problem": 33, "user": "509a25b7e4b0efbae1fbc0a8"}, {"code": "#(mapcat (fn [i] (repeat %2 i)) %)", "problem": 33, "user": "5236cd89e4b0e010857b4e45"}, {"code": "(fn [c t] (mapcat #(repeat t %) c))", "problem": 33, "user": "525ed5f4e4b0cb4875a45db8"}, {"code": "(fn [x y] (mapcat #(repeat y %) x))", "problem": 33, "user": "523eb110e4b057c4b7cd0a67"}, {"code": "(fn [a b]\n  (if\n    (= 1 b)\n    a\n    (apply interleave (repeat b a))))", "problem": 33, "user": "4f944f60e4b0dcca54ed6cc2"}, {"code": "(fn [x y] (reduce #(reduce conj %1 (repeat y %2)) [] x))", "problem": 33, "user": "5210ac52e4b080a8d9b9d63e"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "50007353e4b0678c553fc40a"}, {"code": "(fn repl [s n] \n\t(reduce concat (map #(repeat n %) s)))", "problem": 33, "user": "525aa499e4b0cb4875a45cf7"}, {"code": "(fn [coll n]\n  (if (= 1 n) \n    coll\n    (apply interleave (repeat n coll))))", "problem": 33, "user": "524e6b68e4b0541d1855b7db"}, {"code": "(fn[s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "525f51bde4b0cb4875a45dc8"}, {"code": "(fn\n  [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "525fffb8e4b03e8d9a4a702b"}, {"code": "(fn [x n]\n  (apply concat (map #(repeat n %) x)))", "problem": 33, "user": "4e8dd6cb535d65386fec213b"}, {"code": "(fn rep [x n] \n  (if (empty? x) \n    '() \n    (concat \n     (repeat n (first x))\n     (rep (rest x) n)\n     )))", "problem": 33, "user": "525cc137e4b0cb4875a45d46"}, {"code": "(fn [xs n] (apply concat (map #(repeat n %) xs)))", "problem": 33, "user": "52618ea3e4b03e8d9a4a7064"}, {"code": "#(for [x %, i (range %2)] x)", "problem": 33, "user": "4f80db02e4b033992c121bf9"}, {"code": "(fn replicate [l times]\n  (cond\n   (empty? l) '()\n   :else (concat (repeat times (first l)) (replicate (rest l) times))\n   )\n  )", "problem": 33, "user": "5252cbe7e4b0541d1855b8d2"}, {"code": "(fn [coll n]\n  ((fn [ret coll n]\n  \t(if (empty? coll)\n    \tret\n    \t(recur (concat ret (repeat n (first coll))) (rest coll) n)))\n  [] coll n))", "problem": 33, "user": "521392bce4b0d32679a5065e"}, {"code": "(fn repseq [x r]\n  (if (nil? x)\n    '()\n    (concat ((fn replicate [u t]\n               (if (> t 0)\n                 (cons u (replicate u (- t 1)))\n                 '())) (first x) r) \n            (repseq (next x) r))))", "problem": 33, "user": "522ff396e4b032bbe3424172"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "51622fb8e4b009fba0926e3f"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "505345d9e4b0517ede0d0a06"}, {"code": "(fn [lst n] (mapcat #(repeat n %) lst))", "problem": 33, "user": "524f213be4b0541d1855b7ff"}, {"code": "(fn [xs n] \n  (if (= 1 n)\n    xs\n  \t(apply interleave (take n (repeat xs)))))", "problem": 33, "user": "525bcae9e4b0cb4875a45d30"}, {"code": "(fn [col n] (mapcat #(repeat n %) col))", "problem": 33, "user": "525efc76e4b0cb4875a45dbd"}, {"code": "(fn [seq n]\n  (mapcat #(repeat n %) seq))", "problem": 33, "user": "525d490ae4b0cb4875a45d70"}, {"code": "(fn [x n] (reduce concat (map #(repeat n %) x)))", "problem": 33, "user": "5264301fe4b03e8d9a4a70ca"}, {"code": "(fn [coll cnt] (mapcat #(repeat cnt %1) coll))", "problem": 33, "user": "52655949e4b03e8d9a4a710b"}, {"code": "(fn [coll rep]\n   (reduce\n    (fn [result x]\n      (concat result (take rep (repeat x))))\n    []\n    coll))", "problem": 33, "user": "52090567e4b0e152394d76ed"}, {"code": "(fn [s x] (mapcat #(repeat x %)s))", "problem": 33, "user": "524c7fcfe4b0752c4cb68cbd"}, {"code": "( fn [coll n] ( apply concat (map #(repeat n %) coll ) ) )", "problem": 33, "user": "52628bb0e4b03e8d9a4a7089"}, {"code": "(fn rep [coll times]\n  (mapcat #(repeat times %) coll))", "problem": 33, "user": "5264383be4b03e8d9a4a70cb"}, {"code": "(fn [c n] (mapcat #(repeat n %) c))", "problem": 33, "user": "5268f5b4e4b03e8d9a4a71cf"}, {"code": "(fn [xs n]\n    (apply concat (mapcat #(list (repeat n %)) xs)))", "problem": 33, "user": "526302eee4b03e8d9a4a70a2"}, {"code": "(fn [coll n] \n  (seq (reduce (fn [x y] (concat x (take n (repeat y)))) [] coll)))", "problem": 33, "user": "52616198e4b03e8d9a4a705e"}, {"code": "(fn [a b]\n\t(mapcat \n\t\t(fn [i] (take b (iterate #(identity %) i)))\n\t\ta\n\t)\n  )", "problem": 33, "user": "52593207e4b0cb4875a45cd3"}, {"code": "#(if (= 1 %2)\n   %1\n   (apply interleave (repeat %2 %1)))", "problem": 33, "user": "51dc1202e4b09c47a74ce107"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "525873e8e4b0cb4875a45cb2"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "5012da69e4b0c8732600222d"}, {"code": "#(loop [x %1 result []]\n   (if (empty? x)\n     result\n     (recur (rest x) \n            (concat result \n                    (take %2\n                          (repeat \n                           (first x)))))))", "problem": 33, "user": "51ca82e9e4b08b1cbd0d9488"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "4ec11b79535dfed6da9c6da6"}, {"code": "(fn dup [seq n]\n  (reduce (fn [vec e] (apply conj vec (repeat n e))) [] seq))", "problem": 33, "user": "5268eb68e4b03e8d9a4a71c6"}, {"code": "(fn [c n] (mapcat #(repeat n %) c))", "problem": 33, "user": "52112be7e4b07aea8afc4f68"}, {"code": "#(for [i %1 j (range %2)] i)", "problem": 33, "user": "52667ecfe4b03e8d9a4a713e"}, {"code": "(fn [s c] (mapcat (partial repeat c) s))", "problem": 33, "user": "5261aebbe4b03e8d9a4a7066"}, {"code": "(fn [coll n]\n  (reduce concat (for [v coll]\n  \t(take n (repeat v)))))", "problem": 33, "user": "5116e176e4b0063b4e3e16d7"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "525a8875e4b0cb4875a45cf6"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "526c2340e4b03e8d9a4a7281"}, {"code": "#(for [x %, i (range %2)] x)", "problem": 33, "user": "526a7025e4b03e8d9a4a722a"}, {"code": "(fn rep [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "5264b4a9e4b03e8d9a4a70e0"}, {"code": "(fn [source-seq clone-count]\n  (mapcat #(repeat clone-count %) source-seq))", "problem": 33, "user": "525a643be4b0cb4875a45cf1"}, {"code": "(fn rep [s n]\n  (if (empty? s)\n    '()\n    (concat (repeat n (first s)) (lazy-seq (rep (rest s) n)))))", "problem": 33, "user": "526439a4e4b03e8d9a4a70cc"}, {"code": "(fn [s n]\n  (if (> n 1)\n    (apply interleave (repeat n s))\n    s\n    )\n  )", "problem": 33, "user": "5267d9bde4b03e8d9a4a7188"}, {"code": "(fn [coll n] (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "509e62a8e4b08df8156e9e2e"}, {"code": "(fn [xs n]\n  (mapcat #(repeat n %) xs))", "problem": 33, "user": "526e5be8e4b03e8d9a4a731c"}, {"code": "(fn [x n]\n  (reduce #(concat %1 (repeat n %2)) [] x))", "problem": 33, "user": "526143b7e4b03e8d9a4a705a"}, {"code": "(fn [coll n]\n  (if (= n 1)\n    coll\n    (apply interleave (repeat n coll))))", "problem": 33, "user": "523bde95e4b07becd5be2202"}, {"code": "(fn [s n]\n  (apply concat (map #(repeat n %) s)))", "problem": 33, "user": "526f9715e4b03e8d9a4a7372"}, {"code": "(fn replic [col n]\n  (reduce \n    #(apply conj %1 (repeat n %2))\n    []\n    col))", "problem": 33, "user": "526ee63de4b03e8d9a4a733f"}, {"code": "(fn [x y] (if (= y 1) x (apply interleave (repeat y x))))", "problem": 33, "user": "5261c773e4b03e8d9a4a706a"}, {"code": "(fn [x y] (mapcat #(take y (repeat %)) x))", "problem": 33, "user": "5260341ee4b03e8d9a4a7034"}, {"code": "(fn [col rep]\n  (mapcat #(take rep (cycle [%])) col))", "problem": 33, "user": "5269c150e4b03e8d9a4a71f8"}, {"code": "(fn [xes c] (loop [xs xes\n                   curr 0\n                   result []]\n              (if (nil? xs)\n                result\n                (if (= curr c)\n                  (recur (next xs) 0 result)\n                  (recur xs (inc curr) (conj result (first xs)))\n                )\n              )\n            )\n)", "problem": 33, "user": "526dd90de4b03e8d9a4a72fe"}, {"code": "#(if (= %2 1) %1  (apply interleave (repeat %2 %1) ))", "problem": 33, "user": "5271b940e4b03e8d9a4a73fb"}, {"code": "(fn dup\n  ([lst n] (dup lst n []))\n  ([lst n l] (if (empty? lst) l (dup (next lst) n (apply conj l (replicate n (first lst))))))\n  )", "problem": 33, "user": "5272669de4b03e8d9a4a742e"}, {"code": "(fn [seqs n]\n  (letfn[\n         (ble [e ct]\n          (loop[rs '()\n                ct ct]\n            (if(zero? ct)\n              rs\n              (recur (cons e rs)\n                     (dec ct)))))]\n    (loop [result '() \n           others seqs]\n      (if(empty? others)\n        result\n        (recur (concat result (ble (first others) n))\n               (rest others))))))", "problem": 33, "user": "5273562ae4b03e8d9a4a7479"}, {"code": "#(reduce (fn [a b] (concat a (take %2 (repeat b)))) [] %1)", "problem": 33, "user": "51f4d46ee4b0fca5e8b48243"}, {"code": "(fn [x n] (reduce concat (map #(take n (repeat %)) x)))", "problem": 33, "user": "5272d4b7e4b03e8d9a4a7453"}, {"code": "#(mapcat (fn [l] (take %2 (iterate identity l))) %1)", "problem": 33, "user": "52727d52e4b03e8d9a4a7439"}, {"code": "(fn [s n] (apply concat (map (fn [x] (take n (repeat x))) s)))", "problem": 33, "user": "526d6968e4b03e8d9a4a72d9"}, {"code": "#(reduce (fn [s x] (concat s (repeat %2 x))) '() %1)", "problem": 33, "user": "527513d8e4b03e8d9a4a74bd"}, {"code": "#(mapcat identity (for [x %1] (repeat %2 x)))", "problem": 33, "user": "512318b6e4b03b44edbed433"}, {"code": "(fn [coll x] (if (= x 1) coll (apply interleave (#(take x (cycle (list %))) coll))))", "problem": 33, "user": "526bc746e4b03e8d9a4a7271"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "problem": 33, "user": "52736ca1e4b03e8d9a4a747e"}, {"code": "(fn [coll n]                                                           \n    (mapcat #(repeat n %) coll))", "problem": 33, "user": "526397f1e4b03e8d9a4a70b6"}, {"code": "(\n fn  [lat n]\n  (reduce concat (map #(take n (repeat %)) lat)))", "problem": 33, "user": "5276aa0de4b03e8d9a4a74ea"}, {"code": "(fn replicate-seq [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "52342722e4b07e3ee2be83c0"}, {"code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "problem": 33, "user": "514f6679e4b0b449e54b8df5"}, {"code": "(fn [xs n] (apply concat (mapv (partial repeat n) xs)))", "problem": 33, "user": "52713288e4b03e8d9a4a73e7"}, {"code": "(fn replic [src times]\n  (for [x src y (take times (iterate identity x))] y))", "problem": 33, "user": "5274eb56e4b03e8d9a4a74bb"}, {"code": "(fn [x i] (mapcat #(repeat i %) x))", "problem": 33, "user": "52795656e4b03e8d9a4a7534"}, {"code": "(fn duplicate-n [seq n]\n  (reverse (reduce #(concat (repeat n %2 ) %1) (sequence nil) seq)))", "problem": 33, "user": "50651de3e4b0b1b6c8b1d85f"}, {"code": "(fn a [col n] (mapcat #(repeat n %) col))", "problem": 33, "user": "527a8eb7e4b03e8d9a4a755f"}, {"code": "(fn [input-seq replicate-times] \n  (mapcat (fn [x] (take replicate-times (repeat x))) input-seq)  )", "problem": 33, "user": "52711255e4b03e8d9a4a73d7"}, {"code": "(fn [v n] (apply concat (map #(repeat n %) v)))", "problem": 33, "user": "527818f7e4b03e8d9a4a7519"}, {"code": "( fn [x n] \n  \t( mapcat #(repeat n % ) x ))", "problem": 33, "user": "527b856fe4b03e8d9a4a758d"}, {"code": "(fn [coll n]  (reduce #(into %1 (repeat n %2)) [] coll))", "problem": 33, "user": "51aefceee4b09397d5109797"}, {"code": "(fn [col c] (reduce #(concat %1 (take c (repeat %2))) [] col))", "problem": 33, "user": "50be9b4ae4b00fb48fed2ef6"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "527b9beee4b03e8d9a4a7590"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "526f79aee4b03e8d9a4a736a"}, {"code": "(fn [l c] (mapcat #(repeat c %) l))", "problem": 33, "user": "527675cbe4b03e8d9a4a74e2"}, {"code": "(fn [col n]\n  (reduce (fn [x y] (concat x (repeat n y))) [] col))", "problem": 33, "user": "527dc2aee4b0757a1b17138d"}, {"code": "(fn [c n] (mapcat #(repeat n %) c))", "problem": 33, "user": "51e38568e4b0c611d6113e43"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "525c575be4b0cb4875a45d38"}, {"code": "(fn [se ti] (reduce #(concat % (repeat ti %2)) [] se))", "problem": 33, "user": "5262c73fe4b03e8d9a4a7098"}, {"code": "#(if (= 1 %2) \n   % \n   (apply interleave (repeat %2 %)))", "problem": 33, "user": "527236d4e4b03e8d9a4a741f"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "5272ccf1e4b03e8d9a4a7450"}, {"code": "(fn [xs n] \n  (apply mapcat list (repeat n xs)))", "problem": 33, "user": "51269362e4b083bb8f88cf09"}, {"code": "(fn n-times-elem [lst n]\n  (reverse\n   (reduce (fn [xs x] (apply conj xs (take n (repeat x))))\n           '()\n           lst)))", "problem": 33, "user": "527ccaf4e4b0757a1b17136d"}, {"code": "(fn[s n](mapcat #(repeat n %) s))", "problem": 33, "user": "526a3412e4b03e8d9a4a721e"}, {"code": "#(if (< %2 2) % (apply interleave (repeat %2 %)))", "problem": 33, "user": "51bfc1f0e4b0e49ef9037dd4"}, {"code": "#(mapcat (fn [i] (repeat %2 i)) %1)", "problem": 33, "user": "527b8881e4b03e8d9a4a758e"}, {"code": "(fn rep-seq [list n]\n  (apply concat (map #(replicate n %) list)))", "problem": 33, "user": "5277da8ee4b03e8d9a4a7514"}, {"code": "(fn [ x y ]  (reduce (fn [a b] (into a (repeat y b))) [] x))", "problem": 33, "user": "52810225e4b0757a1b171418"}, {"code": "(fn replicate-seq [coll n]\r\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "51a7f74be4b08d8ec191b802"}, {"code": "(fn [orig_seq, num_times_replicate]\n   (loop [xs orig_seq, k num_times_replicate, result []]\n      (if (seq xs)\n        (if (zero? k)\n          (recur (rest xs) num_times_replicate result)\n          (recur xs (dec k) (conj result (first xs))))\n      result)))", "problem": 33, "user": "4dcc2435535d5973398f9290"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "519ef784e4b087743fad2198"}, {"code": "#(mapcat identity (for [x %1] (take %2 (repeat x))))", "problem": 33, "user": "50f07f6ae4b0bdaecbb47dc4"}, {"code": "#(reduce concat (map (partial repeat %2) %))", "problem": 33, "user": "50feab26e4b03cd852b4e850"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "5284de3de4b0239c8a67ade3"}, {"code": "(fn __ [xs n] (if (= n 1) xs (apply interleave (take n (cycle [xs])))))", "problem": 33, "user": "52741177e4b03e8d9a4a749b"}, {"code": "(fn [x, times]\n  (apply concat (map (fn [item] (repeat times item)) x))\n)", "problem": 33, "user": "52624348e4b03e8d9a4a707e"}, {"code": "(fn [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "51d8f711e4b02ceefd947748"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "problem": 33, "user": "52747090e4b03e8d9a4a74a5"}, {"code": "(fn [col n] (mapcat #(repeat n %) col))", "problem": 33, "user": "4f9510b5e4b0dcca54ed6cc7"}, {"code": "(fn myrep [xs repcnt] \n    (for [x xs y (range repcnt)] x))", "problem": 33, "user": "5255bf1ee4b0541d1855b9f1"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "522a01ade4b0590a43906ced"}, {"code": "(fn [a-vec n]\n  (apply concat (map #(repeat n %) a-vec)))", "problem": 33, "user": "52890634e4b0239c8a67ae5e"}, {"code": "(fn[l n] (reduce #(concat %1 (repeat n %2)) [] l))", "problem": 33, "user": "502f6c56e4b0842eb223d8bb"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "51a584c7e4b051b01d55f44e"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4f93539de4b0dcca54ed6cba"}, {"code": "#(mapcat (fn [i] (repeat %2 i)) %)", "problem": 33, "user": "527094f0e4b03e8d9a4a73b3"}, {"code": "#(apply concat (for [e %1]\n                 (take %2 (repeat e))))", "problem": 33, "user": "528b08efe4b0239c8a67ae8a"}, {"code": "(fn\n  [coll n]\n  (reduce #(concat %1 (repeat n %2)) () coll))", "problem": 33, "user": "5289bba9e4b0239c8a67ae69"}, {"code": "#(apply concat (for [x %1] (repeat %2 x)))", "problem": 33, "user": "525d95b1e4b0cb4875a45d81"}, {"code": "(fn rep [l n] (cond (= l []) [] :else (concat (replicate n (first l)) (rep (rest l) n))))", "problem": 33, "user": "528b9efee4b0239c8a67aea0"}, {"code": "(fn [col numrep] \n   (mapcat \n    (fn [thing] (take numrep (repeat thing))) \n    col))", "problem": 33, "user": "4fbd6210e4b081705acca303"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "528d1094e4b0239c8a67aebe"}, {"code": "(fn [coll times]\n    (reduce concat (merge (vec (map #(merge ( repeat times %)) coll )))))", "problem": 33, "user": "52737333e4b03e8d9a4a747f"}, {"code": "(fn repl [coll times]\n  (mapcat #(repeat times %) coll))", "problem": 33, "user": "4f35b2ace4b0e243712b1ec5"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "525947f1e4b0cb4875a45cd8"}, {"code": "(fn [x n] (reduce (fn [r a] (apply conj r (repeat n a))) [] x))", "problem": 33, "user": "52808897e4b0757a1b171404"}, {"code": "(fn [coll n] (reduce concat (map #(repeat n %) coll)))", "problem": 33, "user": "4e526cc4535d302ef430da74"}, {"code": "(fn t [l n] (\n    \n    if (= 1 (count l))\n    (repeat n (first l))\n    (\n        apply conj (t (rest l) n)  (repeat n (first l))\n    )        \n    \n))", "problem": 33, "user": "4f03c039535dcb61093f6b5e"}, {"code": "#(apply mapcat list (repeat %2 %))", "problem": 33, "user": "528a791ae4b0239c8a67ae77"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "528e95efe4b0239c8a67aee2"}, {"code": "#(if (> %2 1)\n   (apply interleave (repeat %2 %1))\n   %1)", "problem": 33, "user": "52753740e4b03e8d9a4a74c1"}, {"code": "(fn [input times]\n  (apply concat (map (fn [x] (repeat times x)) input)))", "problem": 33, "user": "528bba38e4b0239c8a67aea9"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "5290257ae4b0239c8a67af03"}, {"code": "#(apply mapcat list (repeat %2 %1))", "problem": 33, "user": "4f0f36a7535d0136e6c22336"}, {"code": "(fn [x n] (apply concat (map #(repeat n %) x)))", "problem": 33, "user": "528e64b7e4b0239c8a67aedd"}, {"code": "#(reduce concat (for [x (seq %1)]\n    (repeat %2 x)))", "problem": 33, "user": "517e12e3e4b0fcc7c5d37d3c"}, {"code": "(fn [x y]\n   (reduce (fn [a b] \n             (apply conj a (repeat y b))\n             ) [] x)\n   )", "problem": 33, "user": "528ce039e4b0239c8a67aebc"}, {"code": "(fn duplicate [nums times]\n  (loop [li '()\n         x nums\n         dup_num 0\n         t times]\n    (if (= x nil)\n      (reverse li)\n      (if (< (- t 1) dup_num)\n        (recur li (next x) 0 t)\n        (recur (conj li (first x)) x (inc dup_num) t)))))", "problem": 33, "user": "526f0a68e4b03e8d9a4a7348"}, {"code": "(fn [s n]\n  (apply concat (map #(take n (cycle %)) (partition 1 s))))", "problem": 33, "user": "52745629e4b03e8d9a4a74a0"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "5294e44de4b02ebb4ef75016"}, {"code": "(fn [s n] (mapcat (fn [i] (repeatedly n #(identity i))) s))", "problem": 33, "user": "51ecb0fee4b0bb5070431583"}, {"code": "(fn [c n] (apply concat (map #(take n (repeat %)) c)))", "problem": 33, "user": "52951156e4b02ebb4ef7501b"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "52950ab6e4b02ebb4ef7501a"}, {"code": "(fn [s n]                                                                              \n  (reduce                                                                               \n   (fn [l a]                                                                            \n     (concat l (repeat n a)))                                                           \n   [] s))", "problem": 33, "user": "4f3656d1e4b0e243712b1ec9"}, {"code": "#(mapcat (fn [el] (repeat %2 el)) %)", "problem": 33, "user": "5287f34ee4b0239c8a67ae43"}, {"code": "(fn [s n] \n  (if (< 1 n)\n\t(apply interleave (repeat n s))\n    s))", "problem": 33, "user": "52963cc7e4b02ebb4ef7502d"}, {"code": "#(if (= %2 1) %1\n   (apply interleave (repeat %2 %1)))", "problem": 33, "user": "52974f66e4b02ebb4ef75040"}, {"code": "(fn my-repeat4 [x y] (if (< 0 (count x))\n                         (concat (replicate y (first x)) (my-repeat4 (rest x) y))\n                         (first x)))", "problem": 33, "user": "5296aa9be4b02ebb4ef75034"}, {"code": "(fn replicate-seq [coll n] \n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "529670c1e4b02ebb4ef75030"}, {"code": "(fn rep [sek n] (mapcat #(repeat n %1) sek))", "problem": 33, "user": "525fea5ae4b03e8d9a4a7026"}, {"code": "(fn f1 [x y] (reduce concat ( map (fn f2 [z] (into [] (take y (repeat z)))) x )))", "problem": 33, "user": "5296008fe4b02ebb4ef7502a"}, {"code": "#(loop [xs %1 res '()]\n   (if (nil? xs) res\n     (recur (next xs) (concat res (repeat %2 (first xs))))))", "problem": 33, "user": "52990271e4b02ebb4ef7506d"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "51ad244fe4b09397d510977f"}, {"code": "(fn my-replicate [col cnt]\n  (mapcat (fn [x]\n            (for [y (range cnt)]\n              x)) col))", "problem": 33, "user": "4f6e7073e4b07046d9f4efd8"}, {"code": "(fn [coll times]\n  (apply concat (map #(repeat times %) coll)))", "problem": 33, "user": "528b01a0e4b0239c8a67ae89"}, {"code": "(fn [s n]\n  (reduce concat (map (partial repeat n) s)))", "problem": 33, "user": "52140b53e4b0961f15ac4d7e"}, {"code": "(fn replox [input times] \n  (if-not (= 1 times)\n    (apply interleave (repeat times input))\n    (seq input)\n    )\n  )", "problem": 33, "user": "51c214bce4b0d204dbe2ca1c"}, {"code": "#(apply concat (map (fn [x] (for [xx (range %2)] x)) %1))", "problem": 33, "user": "5298d3f4e4b02ebb4ef75068"}, {"code": "(fn [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "50294c28e4b0b33e9bf6fdef"}, {"code": "(fn [nums n]\n(mapcat #(repeat n %) nums))", "problem": 33, "user": "51e05dfae4b01188f0627543"}, {"code": "(fn[l n](mapcat #(repeat n %) l))", "problem": 33, "user": "5294b190e4b02ebb4ef75011"}, {"code": "(fn [ls n]\n  (reduce (fn [acc item] (concat acc (repeat n item))) '() ls))", "problem": 33, "user": "529e2383e4b04e0c58e87b8b"}, {"code": "#(if (> %2 1) (apply interleave (take %2 (repeat %1))) %1)", "problem": 33, "user": "5290ffaee4b0239c8a67af10"}, {"code": "(fn rep [s n] (for [x s i (range n)] x))", "problem": 33, "user": "529d4f4be4b04e0c58e87b79"}, {"code": "(fn [c n] (mapcat (partial repeat n) c))", "problem": 33, "user": "529f71aae4b04e0c58e87bac"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "509fe759e4b08df8156e9e43"}, {"code": "(fn [coll n] (mapcat #(concat (repeat n %)) coll))", "problem": 33, "user": "528e1c88e4b0239c8a67aed1"}, {"code": "#(for [x %1\n       y (range %2)] x)", "problem": 33, "user": "529ce629e4b04e0c58e87b6e"}, {"code": "(fn rep-seq [xs n]\n  (reduce #(concat %1 (repeat n  %2)) '() xs))", "problem": 33, "user": "52a04f0ee4b04e0c58e87bc1"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4e72187b535d5021c1a8965b"}, {"code": "(fn [s n] (mapcat #(take n (repeat %)) s))", "problem": 33, "user": "52a1acb2e4b04e0c58e87bdb"}, {"code": "(fn [sq x]\n  ( if(= 1 x) sq\n   (apply interleave (take x (repeat sq)))))", "problem": 33, "user": "52a32876e4b04e0c58e87bfb"}, {"code": "(fn [coll, num] (mapcat #(repeat num %) coll))", "problem": 33, "user": "529d292fe4b04e0c58e87b74"}, {"code": "#(mapcat (fn [n] (repeat %2 n)) %1)", "problem": 33, "user": "4fe91fa2e4b0547ebccb2440"}, {"code": "(fn [s n] \n  (reduce (fn [x y] (concat x (repeat n y))) '[] s))", "problem": 33, "user": "5226f8e9e4b04e78ff2e199a"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "528652fbe4b0239c8a67ae14"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "52a503e4e4b0c58976d9abe1"}, {"code": "(fn [li n] (mapcat #(repeat n %1) li))", "problem": 33, "user": "524f4162e4b0541d1855b806"}, {"code": "#(if (= %2 1)\n   %1\n   (apply interleave (repeat %2 %1)))", "problem": 33, "user": "529e8ba9e4b04e0c58e87b99"}, {"code": "(fn [xs cnt] (reduce #(concat %1 %2) [] (map #(repeat cnt %) xs)))", "problem": 33, "user": "4ec1619b535dfed6da9c6dab"}, {"code": "(fn [l n] (reduce \n             (fn [newList elem] (concat newList (repeat n elem)))\n             []\n             l\n           ))", "problem": 33, "user": "51f6af4fe4b06ff1c25c52ce"}, {"code": "(fn my-replicate[x n] (if (first x)\n                         (concat (repeat n (first x)) (my-replicate (rest x) n))\n                         (list)\n                         ))", "problem": 33, "user": "52a1edd6e4b04e0c58e87be4"}, {"code": "(fn f [c n]\n  (reduce \n   #(concat %1 (take n (repeat %2)))\n   []\n   c\n  )\n)", "problem": 33, "user": "528cf6f7e4b0239c8a67aebd"}, {"code": "(fn duplicate-n [coll n]\n  (mapcat (fn [x] (repeat n x)) coll))", "problem": 33, "user": "52a6ed15e4b0c58976d9ac0a"}, {"code": "(fn [c n] (mapcat #(repeat n %) c))", "problem": 33, "user": "528a3e14e4b0239c8a67ae72"}, {"code": "(fn [xs n]\n  (apply concat\n    (map #(replicate n %) xs)))", "problem": 33, "user": "529e3a4fe4b04e0c58e87b92"}, {"code": "(fn [l n] (mapcat #(take n (iterate identity %)) l))", "problem": 33, "user": "5273e006e4b03e8d9a4a7495"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "52a5f1e6e4b0c58976d9abf4"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "51929214e4b08962174cf74c"}, {"code": "(fn [coll n]\n  (mapcat\n   #(repeat n %)\n   coll))", "problem": 33, "user": "5289f1f4e4b0239c8a67ae6d"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "52a9406de4b0c58976d9ac43"}, {"code": "(fn [arr n] (reduce concat (map (fn [i] (repeat n i)) arr)))", "problem": 33, "user": "52a5d1f3e4b0c58976d9abf1"}, {"code": "(fn [coll times] (mapcat #(repeat times %) coll))", "problem": 33, "user": "5254ef3de4b0541d1855b9b8"}, {"code": "(fn [coll n]\n  (reduce (fn [coll x]\n            (concat coll (repeat n x)))\n          (empty coll)\n          coll))", "problem": 33, "user": "52ab6de1e4b0c58976d9ac78"}, {"code": "(fn replicate [xs times] \n \t(if (empty? xs) '()\n   \t(concat (repeat times (first xs))(replicate (rest xs) times)))   \n)", "problem": 33, "user": "52295917e4b04c906c9c6a6f"}, {"code": "(fn [s n]\n  (mapcat #(repeat n %) s)\n  )", "problem": 33, "user": "529a73bde4b02ebb4ef75096"}, {"code": "(fn[coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "52ac9225e4b0c58976d9ac87"}, {"code": "(fn replseq [s n]\n  (apply concat (for [e s] (replicate n e))))", "problem": 33, "user": "4ef9b021535dced4c769f269"}, {"code": ";(fn [x y] (replicate y x))\n\n;(fn [x y] (map #(replicate y %)x))\n\n(fn [x y] (mapcat #(replicate y %)x))", "problem": 33, "user": "52a28e1ce4b04e0c58e87bf0"}, {"code": "(fn [s t]\n  (mapcat #(take t (repeat %1)) s))", "problem": 33, "user": "52a5e784e4b0c58976d9abf3"}, {"code": "(fn [xs num]\n  (if (= num 1)\n    xs\n    (apply interleave (repeat num xs))))", "problem": 33, "user": "52a779fce4b0c58976d9ac1a"}, {"code": "(fn replicate-seq\n  [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "51937eb3e4b04df54c098022"}, {"code": "#(apply (partial mapcat list) (repeat %2 %))", "problem": 33, "user": "52ac41fee4b0c58976d9ac85"}, {"code": "(fn [s n] (mapcat #(repeat n %)s))", "problem": 33, "user": "52ae1634e4b0c58976d9ac9f"}, {"code": "#(mapcat (fn[x] (take %2 (repeat x))) %1)", "problem": 33, "user": "52a62e16e4b0c58976d9abf9"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "problem": 33, "user": "52afbc69e4b0c58976d9acc0"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "527c036ee4b03e8d9a4a75a5"}, {"code": "#(mapcat (fn [n] (repeat %2 n)) %)", "problem": 33, "user": "4f77b68de4b0fbe0118ec581"}, {"code": "(fn re [coll n]\n  (if-not (seq coll)\n    nil\n    (concat (repeat n (first coll)) (re (rest coll) n))))", "problem": 33, "user": "4ee8b9c9535d93acb0a66884"}, {"code": "(fn f [x n]\n  (reduce (fn nt [v i] (concat v (repeat n i))) '() x))", "problem": 33, "user": "52b0323ee4b0c58976d9acc6"}, {"code": "(fn [x y] (reduce concat (map #(repeat y %) x)))", "problem": 33, "user": "52774dd2e4b03e8d9a4a74ff"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "527c040be4b03e8d9a4a75a7"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "52b1d41ce4b0c58976d9ace6"}, {"code": "(fn [x y] (mapcat #(repeat y %1) x))", "problem": 33, "user": "52ab61f5e4b0c58976d9ac75"}, {"code": "#(if(> %2 1) (apply interleave (repeat %2 %1)) %1)", "problem": 33, "user": "52aad30ce4b0c58976d9ac6d"}, {"code": "(fn [l n] (reduce #(apply conj (cons %1 (take n (iterate identity %2)))) [] l))", "problem": 33, "user": "527ba695e4b03e8d9a4a7596"}, {"code": "(fn [xs n] (mapcat (partial repeat n) xs))", "problem": 33, "user": "52a8ca0fe4b0c58976d9ac36"}, {"code": "#(loop [rst %1 lft %2 acc [] cnt %2]\n   (cond\n    (empty? rst) acc\n    (= lft 0) (recur (rest rst) cnt acc cnt)\n    :else (recur rst (dec lft) (conj acc (first rst)) cnt)))", "problem": 33, "user": "52b405e1e4b0c58976d9ad15"}, {"code": "#(reduce concat (for [x %1] (repeat %2 x)))", "problem": 33, "user": "515896f2e4b059418b97f0a8"}, {"code": "(fn [c n]  (mapcat #(repeat n %) c))", "problem": 33, "user": "524f4256e4b0541d1855b808"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "52a1c6cee4b04e0c58e87be1"}, {"code": "(fn [coll n] (loop [c coll a []] (if (empty? c) a (recur (rest c) (into a (repeat n (first c)))))))", "problem": 33, "user": "52b43468e4b0c58976d9ad1b"}, {"code": "(fn [xs n]\n  (reduce (fn [a e] (concat a (take n (repeat e))))\n          []\n          xs))", "problem": 33, "user": "4fc3a72ae4b081705acca342"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "52b453b0e4b0c58976d9ad21"}, {"code": "(fn [xs n] (mapcat #(->> % repeat (take n)) xs))", "problem": 33, "user": "52b5edd1e4b0c58976d9ad3c"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "52a9154ee4b0c58976d9ac3b"}, {"code": "(fn [s c]\n  (mapcat #(repeat c %) s))", "problem": 33, "user": "527cd633e4b0757a1b17136f"}, {"code": "(fn [coll n]\n       (for [x coll i (range n)] x))", "problem": 33, "user": "52a88c4de4b0c58976d9ac30"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "52b65f26e4b0c58976d9ad43"}, {"code": "(fn [coll n] (loop [x (count coll) a coll result []] (if (== x 0) result (recur (dec x) (rest a) (into result (repeat n (first a)))))))", "problem": 33, "user": "52b60e94e4b0c58976d9ad3e"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "52b80827e4b0c58976d9ad56"}, {"code": "(fn [xs n] (reduce #(apply conj %1 (repeat n %2)) [] xs))", "problem": 33, "user": "52b8af15e4b07a9af57922b5"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4fa38e3fe4b081705acca190"}, {"code": "(fn [lst n] (apply concat (map #(repeat n %) lst)))", "problem": 33, "user": "52aa16d1e4b0c58976d9ac5a"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "527fd663e4b0757a1b1713de"}, {"code": "(fn [s n] (reduce #(into % (repeat n %2)) [] s))", "problem": 33, "user": "51852961e4b0da5a5be3babb"}, {"code": "(fn double-element [coll times]\n   (when-let [[x & xs] (not-empty coll)]\n     (concat (repeat times x)\n             (double-element xs times))))", "problem": 33, "user": "52b2d16ae4b0c58976d9acf8"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "52b42d7ee4b0c58976d9ad19"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "52b02329e4b0c58976d9acc5"}, {"code": "(fn [coll n]\n  (let [dup (fn [item] (map (fn [x] item) (range n)))]\n    (apply concat (map #(dup %) coll))))", "problem": 33, "user": "52a55adee4b0c58976d9abe7"}, {"code": "(fn [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "52ba6d0be4b07a9af57922d2"}, {"code": "#(if (> %2 1) (apply interleave (into [] (repeat %2 %1))) %1)", "problem": 33, "user": "52baf490e4b07a9af57922db"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "52ba43d0e4b07a9af57922cd"}, {"code": "(fn [xs n]\n  (if (= n 1)\n    xs\n  \t(apply interleave (repeat n xs))))", "problem": 33, "user": "52b9c62ce4b07a9af57922c3"}, {"code": "(fn [seq cnt]\n  (mapcat #(for [x [%1] y (range cnt)] x) seq))", "problem": 33, "user": "52b94f15e4b07a9af57922ba"}, {"code": "(fn [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "52bb123ae4b07a9af57922de"}, {"code": "(fn [coll n] (mapcat #(repeat n %1) coll))", "problem": 33, "user": "52976262e4b02ebb4ef75041"}, {"code": "(fn [coll n] \n  (mapcat (fn [x] \n            (repeat n x)) coll))", "problem": 33, "user": "527c166de4b03e8d9a4a75b3"}, {"code": "(fn [x n] (reduce #(concat %1 (repeat n %2)) [] x))", "problem": 33, "user": "526fce6fe4b03e8d9a4a7383"}, {"code": "(fn [l n] (mapcat #(repeat n %) l))", "problem": 33, "user": "52bb27fee4b07a9af57922df"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "52a00651e4b04e0c58e87bbb"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4f7683dae4b0fbe0118ec56f"}, {"code": "(fn [x n] \n  (apply concat (map #(replicate n %) x)))", "problem": 33, "user": "52bcf698e4b07a9af57922fe"}, {"code": "(fn [s n]\n   (mapcat #(take n (repeat %)) s))", "problem": 33, "user": "52470d42e4b05ef8e38e6350"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4f5d5202e4b0030a34fb2b38"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "52bb81d7e4b07a9af57922e8"}, {"code": "(fn [s n] (mapcat (fn [i] (repeatedly n #(identity i))) s))", "problem": 33, "user": "4fc50525e4b081705acca370"}, {"code": "(fn dup [x, n] (apply concat (map (fn d [y] (repeat n y)) x)))", "problem": 33, "user": "52b7a904e4b0c58976d9ad51"}, {"code": "(fn [coll n] \n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "52bdb689e4b07a9af5792306"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "52bac667e4b07a9af57922d5"}, {"code": "(fn repl-seq [s n]\n  (if (empty? s) nil\n    (lazy-seq (loop [result (repl-seq (rest s) n), i n]\n                (if (= i 0) result (recur (cons (first s) result) (dec i)))))))", "problem": 33, "user": "52bc6f5ee4b07a9af57922f6"}, {"code": "(fn [x n] (reduce #(concat %1 (repeat n %2)) [] x))", "problem": 33, "user": "52bbe6e1e4b07a9af57922ef"}, {"code": "(fn [x c] (mapcat #(repeat c %) x))", "problem": 33, "user": "52bf936ee4b07a9af579233b"}, {"code": "#(if (> %2 1) (apply interleave (repeat %2 %1)) (seq %1))", "problem": 33, "user": "52be5d55e4b07a9af579231e"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "52bf29fde4b07a9af579232e"}, {"code": "(fn [xs n] (mapcat #(repeat n %1) xs))", "problem": 33, "user": "52bf8e35e4b07a9af579233a"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "52b577c9e4b0c58976d9ad39"}, {"code": "(fn [xs c] (reduce into (vals (group-by identity (reduce into (replicate c xs))))))", "problem": 33, "user": "52baea85e4b07a9af57922d9"}, {"code": "(fn [s times] (\n                loop [n []\n                      old s\n                      t times]\n                \t\t\t(\n                             if (= t 0)\n                             \t(if (= (count old) 1)\n                                  \tn\n                                  \t(recur n (rest old) times))\n                             \t(recur (conj n (first old)) old (dec t))\n                             )))", "problem": 33, "user": "52bdd135e4b07a9af579230a"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4eda8d7c535d10e5ff6f530f"}, {"code": "(fn [coll times] (apply concat (map #(repeat times %) coll)))", "problem": 33, "user": "52ba2af3e4b07a9af57922cc"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "52bdf6bde4b07a9af579230d"}, {"code": "(fn repl [a-seq n]\n   (mapcat #(repeat n %) a-seq) \n )", "problem": 33, "user": "52763696e4b03e8d9a4a74d7"}, {"code": "(fn [coll n]\n  (mapcat (partial repeat n) coll))", "problem": 33, "user": "4f3a979de4b0e243712b1f10"}, {"code": "(fn [a b] (loop [x a y []] \n\t(if (empty? x) y\n\t\t(let [ch (first x)]\n\t\t\t(recur (rest x) (concat y (#(for [z %1 :let [c %2]] c) (range 0 b) ch)))))))", "problem": 33, "user": "52b79d8ee4b0c58976d9ad50"}, {"code": "(fn [xs n]\n  (mapcat (partial repeat n) xs))", "problem": 33, "user": "505b0431e4b021387fb8985e"}, {"code": "(fn [xs n] (reduce #(concat % (repeat n %2)) '() xs))", "problem": 33, "user": "52ab51c4e4b0c58976d9ac73"}, {"code": "(fn [xs n] (reduce #(into %1 (repeat n %2)) [] xs))", "problem": 33, "user": "50772e6ae4b0fc74642bff5d"}, {"code": "(fn replicate-seq [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "50dcb2f4e4b02e6ac9592c91"}, {"code": "(fn [ls n]\n  (mapcat (partial repeat n) ls))", "problem": 33, "user": "52aa4a67e4b0c58976d9ac62"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "523f1245e4b01c266ffa7f95"}, {"code": "(fn [c n] (mapcat #(repeat  n %) c))", "problem": 33, "user": "5167d60de4b0c5a4140a3098"}, {"code": "(fn[x y](mapcat #(repeat y %) x))", "problem": 33, "user": "529952a4e4b02ebb4ef75081"}, {"code": "(fn  [s n] (if (= n 1) s (apply interleave (repeat n s))))", "problem": 33, "user": "52bb4be0e4b07a9af57922e2"}, {"code": "(fn replicate-each [collection times] \n  (mapcat #(repeat times %) collection))", "problem": 33, "user": "52be23dbe4b07a9af5792316"}, {"code": "(fn solution [s k]\n  (reduce #(concat %1 (repeat k %2)) [] s)\n)", "problem": 33, "user": "52b49aebe4b0c58976d9ad2b"}, {"code": "(fn [l n] (reduce concat () (map #(repeat n %) l)))", "problem": 33, "user": "52c4580fe4b0c2d177d620d8"}, {"code": "(fn [l n]\n  (mapcat #(repeat n %) l))", "problem": 33, "user": "52c25645e4b07a9af579237d"}, {"code": "(fn [inp cnt] (mapcat #(take cnt (repeat %1)) inp))", "problem": 33, "user": "52a23af1e4b04e0c58e87beb"}, {"code": "(fn [coll n] \n  (reduce #(concat %1 (take n (repeat %2))) [] coll))", "problem": 33, "user": "52c4af71e4b0c2d177d620e1"}, {"code": "(fn rep[se y] (mapcat #(repeat y %) se))", "problem": 33, "user": "52bf0116e4b07a9af5792328"}, {"code": "(fn [coll x]\n    (mapcat (partial repeat x) coll))", "problem": 33, "user": "52c61564e4b0c2d177d62109"}, {"code": "(fn replicate[x y](mapcat (partial repeat y)x))", "problem": 33, "user": "52c4fe42e4b0c2d177d620e9"}, {"code": "#(mapcat identity (for [x %1] (take %2 (repeat x))))", "problem": 33, "user": "52c52ef2e4b0c2d177d620ef"}, {"code": "(fn repl-a-seq [x n]\n  (reverse (reduce \n          \n          (fn [a x] (into a (repeat n x)))\n          \n          '()\n          x)))", "problem": 33, "user": "515bbcd9e4b0388ca8ca1521"}, {"code": "(fn [vctr number] (apply concat (map #(repeat number %) vctr)))", "problem": 33, "user": "52c3a0f4e4b0c2d177d620c6"}, {"code": "(fn [coll times] (apply concat (map #(repeat times %1) coll )))", "problem": 33, "user": "528e1f30e4b0239c8a67aed4"}, {"code": "(fn [s n] (mapcat (fn [i] (repeatedly n #(identity i))) s))", "problem": 33, "user": "52c580c2e4b0c2d177d620f5"}, {"code": "(fn [s,n] (mapcat #(repeat n %) s))", "problem": 33, "user": "52c69672e4b0c2d177d62110"}, {"code": "(fn [col n] (if (= 1 n)\n              col\n              (apply interleave (repeat n col))))", "problem": 33, "user": "4f03e486535dcb61093f6b78"}, {"code": "(fn dupn\n        ([vs n] (dupn vs [] n))\n        ([vs acc n]\n           (if (empty? vs)\n             acc\n             (let [fst (first vs)]\n               (dupn (rest vs) (into acc (repeat n fst)) n)))))", "problem": 33, "user": "52c58561e4b0c2d177d620f8"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "52c6a0abe4b0c2d177d62111"}, {"code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "528ba1d9e4b0239c8a67aea2"}, {"code": "(fn [xs t]\n  (mapcat\n   (fn [x] (map (constantly x) (range t)))\n   xs))", "problem": 33, "user": "4ea365e2535d7eef308072c5"}, {"code": "(fn [xs c] (mapcat #(repeat c %) xs))", "problem": 33, "user": "52c804dee4b0c2d177d6212b"}, {"code": "(fn duplicate [lst times]\n    (reduce \n        (fn [acc ele] \n            (loop [cnt times acc2 acc]\n                (if (zero? cnt)\n                    acc2\n                    (recur (dec cnt) (conj acc2 ele))))\n        ) [] lst\n    )\n)", "problem": 33, "user": "52c17e42e4b07a9af5792367"}, {"code": "(fn [coll n] (if (> n 1) (apply interleave (repeat n coll)) coll))", "problem": 33, "user": "52c1f404e4b07a9af5792370"}, {"code": "(fn [list count]\n  (let [lambda (fn [el count] \n            (loop [e el c count r []]\n              (if (= 0 c)\n                (seq r)\n                (recur e (dec c) (conj r e)))))]\n    (loop [l list r[]]\n      (if (empty? l)\n        (seq r)\n        (recur (rest l) (concat r (lambda (first l) count)))))))", "problem": 33, "user": "52c81954e4b0c2d177d6212e"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "52c00263e4b07a9af579233f"}, {"code": "(fn replicate-seq [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "51c22a95e4b0d204dbe2ca1e"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "508f97c0e4b0ea685a20f768"}, {"code": "(fn replica [s n]\n  (if (empty? s)\n    nil\n    (concat (repeat n (first s)) (replica (next s) n))))", "problem": 33, "user": "52c8758be4b0c2d177d62135"}, {"code": "(fn\n    [s n]\n    (if (= 1 n)\n      s\n      (apply interleave (for [x (range n)] s))))", "problem": 33, "user": "52a7634ae4b0c58976d9ac16"}, {"code": "(fn [col x] (reduce\n               (fn [a b] (concat\n                a\n                (last (take (inc x) (iterate #(conj % b) [])))))\n               []\n               col))", "problem": 33, "user": "52c1bd29e4b07a9af579236a"}, {"code": "(fn repseq [coll n]\n   (if (= (count coll) 1)\n     (repeat n (first coll))\n     (concat\n      (repeat n (first coll))\n      (lazy-seq (repseq (rest coll) n)))))", "problem": 33, "user": "52cc582ae4b07d0d72b27362"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "52cb6bb0e4b07d0d72b2734c"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "52cc09c1e4b07d0d72b27356"}, {"code": "#(if (= 1 %2) %1 (apply interleave (repeat %2 %1)))", "problem": 33, "user": "52c5c1c8e4b0c2d177d620fc"}, {"code": "(fn [xs n] (apply concat (map #(repeat n %) xs)))", "problem": 33, "user": "4f03641a535dcb61093f6a9b"}, {"code": "(fn foo [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "52cc92e9e4b07d0d72b27368"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "52cca65be4b07d0d72b2736b"}, {"code": "#(apply concat (map (fn [x] (repeat %2 x)) %1))", "problem": 33, "user": "52cc85abe4b07d0d72b27367"}, {"code": "(fn [lst n]\n  (apply concat (map (partial repeat n) lst)))", "problem": 33, "user": "5268a013e4b03e8d9a4a71b0"}, {"code": "(fn [s n] (mapcat #(apply vector (take n (repeat %))) s))", "problem": 33, "user": "52ce2aace4b07d0d72b2738b"}, {"code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "problem": 33, "user": "52caeb25e4b071a8d36bd3e7"}, {"code": "(fn [coll n] (mapcat (partial repeat n) coll))", "problem": 33, "user": "52828298e4b0757a1b17145b"}, {"code": "(fn [col x] (mapcat #(repeat x %) col))", "problem": 33, "user": "52ced458e4b07d0d72b27394"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "52cdc676e4b07d0d72b2737f"}, {"code": "(fn [s n] (reduce concat (map #(repeat n %) s)))", "problem": 33, "user": "5238ca2de4b0d705d026eef6"}, {"code": "(fn [s n] (mapcat #(for [_ (range n)] %) s))", "problem": 33, "user": "52d0902ee4b07d0d72b273bd"}, {"code": "(fn [col n] (reduce #(apply conj %1 (repeat n %2)) [] col))", "problem": 33, "user": "4eb7b049535d7eef30807377"}, {"code": "(fn [sq n] (mapcat #(repeat n %) sq))", "problem": 33, "user": "5094057fe4b097f48cc38593"}, {"code": "(fn [s n]\n  (mapcat (partial repeat n) s))", "problem": 33, "user": "52c3b3e5e4b0c2d177d620c8"}, {"code": "(fn [c n] (reduce #(concat %1 (repeat n %2)) [] c))", "problem": 33, "user": "52cdb7efe4b07d0d72b2737c"}, {"code": ";#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))\n#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "52d00832e4b07d0d72b273b4"}, {"code": "(fn [l n] (mapcat (partial repeat n) l))", "problem": 33, "user": "52d1e364e4b0d9f9285948e7"}, {"code": "(fn [s n] (mapcat #(take n (repeat %)) s))", "problem": 33, "user": "52ce4cafe4b07d0d72b2738e"}, {"code": "(fn [x y] (apply concat (map #(take y (repeat %)) x)))", "problem": 33, "user": "52bbd09ee4b07a9af57922ee"}, {"code": "(fn [col n] (mapcat #(repeat n %) col))", "problem": 33, "user": "52d2ca1ce4b099d49816f0b4"}, {"code": "(fn [coll n]\n  (mapcat #(for [x (range n)] %1) coll)\n )", "problem": 33, "user": "52b2a819e4b0c58976d9acf1"}, {"code": "(fn [aSeq times] (mapcat #(repeat times %) aSeq))", "problem": 33, "user": "52d39acce4b099d49816f0c7"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4e68ed35535d8ccf87e9fe92"}, {"code": "(fn [coll n]\n  (apply concat\n   (map #(repeat n %) coll)\n   )\n  )", "problem": 33, "user": "52cd1ed0e4b07d0d72b27377"}, {"code": "(fn [xs repCount]\n  (reverse (loop [xs xs ret '()]\n    (if (empty? xs) ret\n      (recur (rest xs)\n             (into ret (repeat repCount (first xs))))))))", "problem": 33, "user": "523e12bde4b09833704079a2"}, {"code": "#(for [x %1, y (range %2)] x)", "problem": 33, "user": "52d340ebe4b099d49816f0c1"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "52ce8648e4b07d0d72b27390"}, {"code": "(fn [vs n] (apply concat (for [v vs] (repeat n v))))", "problem": 33, "user": "4ed45563535d10e5ff6f52c9"}, {"code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "52cefb7ee4b07d0d72b27397"}, {"code": "(fn [xs n] (mapcat (partial repeat n) xs))", "problem": 33, "user": "52d3f666e4b09f7907dd1327"}, {"code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "52c672e2e4b0c2d177d6210e"}, {"code": "#(apply concat (for [x %1] (repeat %2 x)))", "problem": 33, "user": "52cf084ce4b07d0d72b27399"}, {"code": ";(fn [x y]\n;  (mapcat #(repeat y %) x))\n\n#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "52d469c8e4b09f7907dd1330"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "52cdec62e4b07d0d72b27382"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "52cdec6ce4b07d0d72b27383"}, {"code": "(fn [coll n]\n  (mapcat (fn [el]\n            (repeat n el)) coll))", "problem": 33, "user": "51a97f7ae4b08d8ec191b827"}, {"code": "(fn\n  [s t]\n  (mapcat #(repeat t %) s))", "problem": 33, "user": "4f541874e4b0a7574ea717d8"}, {"code": "#(reduce (fn [x y] (reduce conj x (repeat %2 y)))  [] %)", "problem": 33, "user": "52d6120ee4b09f7907dd134c"}, {"code": "(fn [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "4f8c6bf6e4b02e764a0a519b"}, {"code": "(fn f [l x]\n  (cond\n   (= (count l) 0) '()\n   (= (count l) 1) (repeat x (first l))\n   true (concat (repeat x (first l)) (f (rest l) x))))", "problem": 33, "user": "52d7b0ade4b09f7907dd137c"}, {"code": "#(mapcat (fn[x](repeat %2 x)) %)", "problem": 33, "user": "51b41150e4b0f094dd986fac"}, {"code": "(fn f [l iter] (mapcat #(repeat iter %) l))", "problem": 33, "user": "52b35a6ee4b0c58976d9ad07"}, {"code": "(fn [col n]\n  (reduce\n   #(into % (take n (cycle (vector %2))))\n   [] col))", "problem": 33, "user": "52cf5450e4b07d0d72b273a4"}, {"code": "#(reduce (fn[m s](loop[x 0 y m](if(= x %2)y(recur (inc x)(conj y s))))) [] %1)", "problem": 33, "user": "52ce4c32e4b07d0d72b2738d"}, {"code": "#(mapcat (fn [x] (take %2 (iterate identity x))) %1)", "problem": 33, "user": "52d4acc8e4b09f7907dd1333"}, {"code": "(fn [s n] (mapcat (fn [i] (repeatedly n #(identity i))) s))", "problem": 33, "user": "52d02380e4b07d0d72b273b7"}, {"code": "#(reduce concat (map (partial repeat %2) %1))", "problem": 33, "user": "5256627ce4b0541d1855ba1a"}, {"code": "(fn [s n] (mapcat (fn [i] (repeatedly n #(identity i))) s))", "problem": 33, "user": "52d7f7efe4b09f7907dd1380"}, {"code": "(fn replicateSeq [x y]\n  (if (seq x)\n    (reverse (into\n      (for [i (range 0 y)]\n        (first x)\n      )\n      (replicateSeq (rest x) y)))\n    []\n  ) \n)", "problem": 33, "user": "52af7a5ce4b0c58976d9acbd"}, {"code": "(fn [xs n] (reduce concat (map (fn [x] (take n (repeat x))) xs)))", "problem": 33, "user": "52d829a8e4b09f7907dd1389"}, {"code": "(fn [s n]\n  (if (= n 1)\n    s\n    (apply interleave (repeat n s))))", "problem": 33, "user": "51f8e057e4b09be9c177e53d"}, {"code": "(let [repl (fn repl [e, n]\n             (if (= n 0)\n               '()\n               (conj (repl e (- n 1)) e)))]\n  (fn mult [l, n]\n    (if (= 0 (count l))\n      '()\n      (concat (repl (first l) n) (mult (rest l) n)))))", "problem": 33, "user": "52d92f13e4b09f7907dd13a2"}, {"code": "#(reduce (fn [a e] (concat a (repeat %2 e))) [] %1)", "problem": 33, "user": "521ed5b4e4b0e6c71e0c0bc0"}, {"code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "problem": 33, "user": "50c2fbebe4b00e537d00253c"}, {"code": "(fn [coll n]\n  (mapcat (fn [v]\n           (loop [c [] i 0] \n             (if (< i n) \n               (recur (conj c v) (inc i)) \n               c))) coll))", "problem": 33, "user": "52c884a2e4b0c2d177d62136"}, {"code": "(fn [col n] \n   (reduce #(concat % (take n (repeat %2))) [] col))", "problem": 33, "user": "52dad8bde4b09f7907dd13be"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "52c1cc8be4b07a9af579236b"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "problem": 33, "user": "52d809bde4b09f7907dd1384"}, {"code": "(fn [coll n] (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "52daf558e4b09f7907dd13c1"}, {"code": "(fn [xs n]\n  (mapcat #(repeat n %) xs))", "problem": 33, "user": "52cca96ae4b07d0d72b2736e"}, {"code": "(fn [c n] (mapcat (fn [x] (repeat n x)) c))", "problem": 33, "user": "4e6e1756535d5021c1a895fe"}, {"code": "(fn[x,n](mapcat #(repeat n %) x))", "problem": 33, "user": "52d66ca0e4b09f7907dd135c"}, {"code": "(fn rep\n  [s n]\n  (mapcat #(repeat n %) s))", "problem": 33, "user": "52dd6cc8e4b09f7907dd13e2"}, {"code": "(fn [coll n] \n  (mapcat (partial repeat n) coll))", "problem": 33, "user": "52cc4fd6e4b07d0d72b27360"}, {"code": "#(for [y % x (range %2)] y)", "problem": 33, "user": "52d10680e4b07d0d72b273c3"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "52d00a05e4b07d0d72b273b5"}, {"code": "(fn\n  [coll n]\n  (loop [x (first coll)\n         xs (rest coll)\n         replicated []]\n        (if (and (empty? xs) (nil? x))\n            replicated\n            (recur (first xs)\n                   (rest xs)\n                   (concat replicated (take n (repeat x)))))))", "problem": 33, "user": "52561be5e4b0541d1855ba08"}, {"code": "(fn [coll num] (mapcat #(repeat num %) coll))", "problem": 33, "user": "521d709ae4b050d5da0427ef"}, {"code": "(fn [seq rep] \n   (reduce (fn [p c]\n             (concat p (repeat rep c)))\n           []\n           seq))", "problem": 33, "user": "52dde81fe4b09f7907dd13eb"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "52c1ede2e4b07a9af579236d"}, {"code": "#(mapcat (fn [input](repeat %2 input)) %1)", "problem": 33, "user": "52537b67e4b0541d1855b8f9"}, {"code": "(fn [coll n]\n  (reduce concat\n          (map #(repeat n %) coll)))", "problem": 33, "user": "52d51535e4b09f7907dd133a"}, {"code": "(fn [xs count]\n  (reduce concat \n          (map #(repeat count %) xs)))", "problem": 33, "user": "52deb735e4b09f7907dd13f7"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "5271605ae4b03e8d9a4a73ed"}, {"code": "(fn [coll x]\n  (apply concat (map #(repeat x %) coll)))", "problem": 33, "user": "51ea4e35e4b0f1f103a0d148"}, {"code": "(fn [coll x]\n  (mapcat #(repeat x %) coll))", "problem": 33, "user": "5204f2b1e4b0bf4f1882c7f5"}, {"code": ";#(apply mapcat list (repeat %2 %1))\n#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "52df232fe4b09f7907dd13fc"}, {"code": "#(if (= 1 %2) %1 (apply interleave (repeat %2 %1)))", "problem": 33, "user": "51e3a549e4b0c611d6113e47"}, {"code": "#(reduce concat (map (fn [x] (repeat %2 x)) %1))", "problem": 33, "user": "52ca720fe4b071a8d36bd3e2"}, {"code": "(fn [arr n]\n  (reduce (fn [x y]\n            (concat x (repeat n y))\n            ) '() arr))", "problem": 33, "user": "52c8a8b9e4b0c2d177d62139"}, {"code": "(fn [coll n] (mapcat (partial repeat n) coll))", "problem": 33, "user": "52b94e26e4b07a9af57922b9"}, {"code": "#(apply concat (for [x %] (repeat %2 x)))", "problem": 33, "user": "52e48632e4b09f7907dd1450"}, {"code": "(fn [coll, c] (mapcat (partial repeat c) coll))", "problem": 33, "user": "52e4cc2ee4b09f7907dd1455"}, {"code": "(fn [s n] (reverse (reduce #(loop [res %1, i n] (if (> i 0) (recur (cons %2 res) (dec i)) res)) '() s)))", "problem": 33, "user": "52e295fae4b09f7907dd1437"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "52c7f036e4b0c2d177d62126"}, {"code": "#(cond (> %2 1) (apply interleave (repeat %2 %1)) :else %1)", "problem": 33, "user": "52e4361fe4b09f7907dd144d"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "52d6a9c2e4b09f7907dd1365"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "problem": 33, "user": "52e59ca5e4b09f7907dd1464"}, {"code": "(fn [li times]\r\n  (loop [li li ret [] c 0]\r\n    (if (= 0 (count li))\r\n      ret\r\n            (if (< c times) \r\n       (recur li (conj ret (first li)) (inc c)) \r\n       (recur (rest li) ret 0)\r\n     )       \r\n    )\r\n  )\r\n)", "problem": 33, "user": "513caa36e4b0b86ece9f3229"}, {"code": "#(mapcat (fn [a] (repeat %2 a)) %1)", "problem": 33, "user": "529b44afe4b02ebb4ef7509d"}, {"code": "x", "problem": 33, "user": "52e635b3e4b09f7907dd146f"}, {"code": "#(if(= %2 1)\n  %1 \n  (apply interleave (repeat %2 %1))\n)", "problem": 33, "user": "50ee68fce4b06330c1f87c59"}, {"code": "#(loop [coll-in %1\n        repeated '()]\n    (if coll-in\n      (recur (next coll-in) (concat repeated (repeat %2 (first coll-in))))\n      repeated))", "problem": 33, "user": "52cb19abe4b07d0d72b27348"}, {"code": "#(if (<= %2 1)\n   %1\n   (apply interleave (repeat %2 %1)))", "problem": 33, "user": "51f2a491e4b0210f90e74553"}, {"code": "(fn [xs n]\n\t(for [x xs\n          y (range n)]\n      x))", "problem": 33, "user": "52e276d9e4b09f7907dd1436"}, {"code": "#(apply concat (map (fn [elem] (repeat %2 elem)) %1))", "problem": 33, "user": "52ad68f5e4b0c58976d9ac94"}, {"code": "(fn [a b] (mapcat #(repeat b %) a))", "problem": 33, "user": "52d7a930e4b09f7907dd1379"}, {"code": "(fn [s x]\n   (mapcat #(repeat x %) s))", "problem": 33, "user": "52e0e646e4b09f7907dd1416"}, {"code": "(fn [col n] (mapcat (partial repeat n) col))", "problem": 33, "user": "52dd4fb4e4b09f7907dd13df"}, {"code": "(fn replicate [coll n]\n  (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "52b9c5e8e4b07a9af57922c2"}, {"code": "#(mapcat (fn [input](repeat %2 input)) %1)", "problem": 33, "user": "51910da7e4b0f8ef0be96bf9"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "52dfe1d2e4b09f7907dd1406"}, {"code": "#(for [c % _ (range %2)] c)", "problem": 33, "user": "52cd093fe4b07d0d72b27376"}, {"code": "(fn sk-replicate [l n]\n  (mapcat #(repeat n %) l))", "problem": 33, "user": "51d42f44e4b013d740b70ddb"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "52d83c2ce4b09f7907dd138d"}, {"code": "(fn [x n] (apply mapcat list (take n (repeat x))))", "problem": 33, "user": "510b5596e4b078ea719210fd"}, {"code": "(fn [inList numRep] (for [x inList _ (range 0 numRep) ] x))", "problem": 33, "user": "52bf6946e4b07a9af5792334"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "52d8eb78e4b09f7907dd139d"}, {"code": "#(mapcat (fn [i] (repeat %2 i)) %1)", "problem": 33, "user": "52e3e6a8e4b09f7907dd1448"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "52cee992e4b07d0d72b27395"}, {"code": "(fn [x n] (reduce #(concat %1 (repeat n %2)) [] x))", "problem": 33, "user": "52dc2bc8e4b09f7907dd13ca"}, {"code": "(fn [coll n] \n    (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "52430d3ce4b076204b44faa5"}, {"code": "(fn[s n](mapcat (fn[el](repeatedly n #( let [out el] out))) s))", "problem": 33, "user": "52e807b3e4b09f7907dd1490"}, {"code": "(fn [s x] (mapcat #(replicate x %) s))", "problem": 33, "user": "52e75667e4b09f7907dd1485"}, {"code": "(fn [s n]\n  (reduce concat (map #(repeat n %) s)))", "problem": 33, "user": "52a32b52e4b04e0c58e87bfc"}, {"code": "#(reduce (fn [acc v] (concat acc (repeat %2 v))) [] %)", "problem": 33, "user": "52be58d7e4b07a9af579231d"}, {"code": "(fn [coll n] (mapcat #(take n (cycle %1)) (partition-by list coll)))", "problem": 33, "user": "4fb99483e4b081705acca2da"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "50e8cac5e4b0ebbe794eb7ef"}, {"code": "(fn my-replicate [a-seq n]\n  (loop [acc []\n         rest-seq a-seq]\n    (if (empty? rest-seq)\n      acc\n      (let [rep (repeat n (first rest-seq))] \n        (recur (concat acc rep) \n             (rest rest-seq))))))", "problem": 33, "user": "52ee46e5e4b05e3f0be25ec5"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "problem": 33, "user": "52efd3d9e4b05e3f0be25ed4"}, {"code": "(fn [x y]\n  (mapcat #(repeat y %) x))", "problem": 33, "user": "529223cbe4b0239c8a67af26"}, {"code": "#(loop [in %1 out []]\n   (if (empty? in)\n     out\n     (recur (rest in) (concat out (seq (repeat %2 (first in)))))))", "problem": 33, "user": "52f07ccee4b05e3f0be25edf"}, {"code": "(fn replic [s n] \n  (if (empty? s) \n    s  \n    (loop [num n, dups '()]\n      (if (> num 0) \n        (recur (dec num), (cons (first s) dups))\n        (concat dups (replic (rest s) n))))))", "problem": 33, "user": "52ec1dfbe4b0705949c4444b"}, {"code": "(fn [xs n] (reduce concat (map (fn [x] (take n (iterate (fn [a] a) x))) xs)))", "problem": 33, "user": "52d660eae4b09f7907dd1356"}, {"code": "#( mapcat (fn [n] (repeat %2 n)) %1)", "problem": 33, "user": "52570aeae4b0541d1855ba42"}, {"code": "(fn [lst n] \n  (reverse (reduce #(into %1 (repeat n %2))\n                   '() lst)))", "problem": 33, "user": "51bd255ce4b0df1216cefd94"}, {"code": "(fn [daset darepeat] (mapcat #(repeat darepeat %) daset))", "problem": 33, "user": "50f53694e4b057d4c52de881"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %)", "problem": 33, "user": "52f3ee17e4b05e3f0be25f19"}, {"code": "(fn [c n]\n  (cond (<= n 1) c\n        :else (apply interleave (take n (repeat c)))))", "problem": 33, "user": "52d7f9a8e4b09f7907dd1381"}, {"code": "#(mapcat\n                       (fn [x] (\n                                 (fn [X NUM acc]\n                                   (\n                                     if (= NUM 1)\n                                     (conj acc X)\n                                     (recur X (dec NUM) (conj acc X))\n                                     )\n                                   ) x %2 '()\n                                 )\n                         )\n                       %1)", "problem": 33, "user": "528f82d8e4b0239c8a67aef4"}, {"code": "(fn [c, t] (mapcat #(repeat %2 %1) c (repeat t)))", "problem": 33, "user": "52f1bc81e4b05e3f0be25eef"}, {"code": "(fn [x y] (apply concat (map #(repeat y %) x)))", "problem": 33, "user": "52a5a8ebe4b0c58976d9abed"}, {"code": "(fn [coll x] (mapcat #(repeat x %) coll))", "problem": 33, "user": "52d9aaa1e4b09f7907dd13ae"}, {"code": "(fn f [l c] (mapcat #(repeat c %) l))", "problem": 33, "user": "50c4ff23e4b0210b849018b8"}, {"code": "(fn [coll i]\n  (mapcat (fn [x] (repeat i x)) coll))", "problem": 33, "user": "51ab4082e4b04e3dc0c27b31"}, {"code": "(fn [l n] (mapcat (partial repeat n) l))", "problem": 33, "user": "5137fb22e4b0a5db03d727d3"}, {"code": "#(loop [data %, res []] \n   (cond (not (seq data)) res\n   \t\t :else (recur (rest data) (into res (loop [i %2, buf []] (cond (= i 0) buf\n                                                                    :else (recur (- i 1) (conj buf (first data)))))))))", "problem": 33, "user": "52f5eefbe4b09b582c12c9cb"}, {"code": "(fn [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "52f10094e4b05e3f0be25ee8"}, {"code": "(fn [x y] (apply concat (map #(take y (repeat %)) x)))", "problem": 33, "user": "51f2b8f1e4b0210f90e74556"}, {"code": "(fn [s n] (mapcat (fn [x] (take n (repeat x))) s))", "problem": 33, "user": "504e90bae4b069badc5a33b8"}, {"code": "(fn [coll, c]\n  (mapcat #(repeat c %) coll)\n  )", "problem": 33, "user": "52f4fae4e4b05e3f0be25f27"}, {"code": "#(apply concat (map (fn [x] (take %2 (repeat x))) %))", "problem": 33, "user": "4ef9c8f9535dced4c769f26b"}, {"code": "(fn [xs n]\n  (reduce concat (map (partial repeat n) xs)))", "problem": 33, "user": "51834acde4b028ec5fd2f29a"}, {"code": "(fn [items n] (mapcat (partial repeat n) items))", "problem": 33, "user": "52e161e8e4b09f7907dd1420"}, {"code": "(fn [xs n] (mapcat (partial repeat n) xs))", "problem": 33, "user": "52f882c4e4b047fd55836fd1"}, {"code": "#(apply concat (map (partial repeat %2) %1))", "problem": 33, "user": "4feaa579e4b0140c20fb9c0b"}, {"code": "(fn rep [c n]\n  (mapcat #(repeat n %1) c))", "problem": 33, "user": "52f8f4d1e4b047fd55836fde"}, {"code": "#(reduce concat (map repeat (repeat %2) %1))", "problem": 33, "user": "52f5f8b4e4b09b582c12c9cc"}, {"code": "(fn [y z] \n   (apply concat \n          (map (fn [x] \n                 (loop [zz z xx '()] \n                   (if (<= zz 0) \n                     xx \n                     (recur (- zz 1) (conj xx x))))) \n               y)))", "problem": 33, "user": "52eee533e4b05e3f0be25ecb"}, {"code": "(fn [x t] (apply concat (map #(take t (repeat %)) x)))", "problem": 33, "user": "529dfc6de4b04e0c58e87b8a"}, {"code": "#(loop[coll %1 r []] (if (empty? coll) r (recur (drop 1 coll) (concat r (repeat %2 (first coll))))))", "problem": 33, "user": "52e68e61e4b09f7907dd1479"}, {"code": "(fn [elements number-of-times]\n   (apply concat (map (fn [elem] (repeat number-of-times elem)) elements)))", "problem": 33, "user": "529c6995e4b04e0c58e87b61"}, {"code": "(fn init-replicate [the-set times] (apply concat ((fn replicate[s t l] (for [x s] (for [y (range 0 t)] x ))) the-set times [])))", "problem": 33, "user": "52e980b3e4b09f7907dd14af"}, {"code": "(fn [a b] (mapcat #(take b (cycle (list %))) a))", "problem": 33, "user": "5279cb1ae4b03e8d9a4a753f"}, {"code": "#(loop [result '() r %1]\n   (if (empty? r)\n     result  \n   (recur (concat result (let [elm (first r)]\n            (loop [cnt %2 r '()]\n              (if (= cnt 0)\n                r\n                (recur (- cnt 1) (cons elm r))))) )\n          (rest r))))", "problem": 33, "user": "52f304b4e4b05e3f0be25f07"}, {"code": "#(loop [col %1\n        acc []\n        n %2]\n   (cond\n    (empty? col) acc\n    :else (recur (rest col) (into acc (repeat n (first col))) n)))", "problem": 33, "user": "52fc89b2e4b047fd55837019"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "52c60945e4b0c2d177d62108"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "52e32d55e4b09f7907dd143e"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %)", "problem": 33, "user": "52d838bee4b09f7907dd138b"}, {"code": "(fn [x y] (for [i x j (range y)] i))", "problem": 33, "user": "52f9ce6de4b047fd55836ff0"}, {"code": "(fn [coll x] (reduce #(concat %1 (repeat x %2)) [] coll))", "problem": 33, "user": "52fb64b7e4b047fd55837009"}, {"code": "(fn [coll times]\n  (mapcat #(repeat times %) coll))", "problem": 33, "user": "52fb903ee4b047fd5583700b"}, {"code": "#(reduce (fn [a b] (concat a (repeat %2 b))) [] %1)", "problem": 33, "user": "52f381f3e4b05e3f0be25f10"}, {"code": "(fn ! \n  ([x y] \n   (if (empty? x) '() \n     (let [rf (replicate y (first x))]\n       (concat rf (! (rest x) y))))))", "problem": 33, "user": "52faec2ee4b047fd55837004"}, {"code": "#(apply concat (map (fn [x] (take %2 (repeat x))) %1))", "problem": 33, "user": "52fcfeeee4b047fd55837027"}, {"code": "#(reduce concat (for [x %1] (repeat %2 x)))", "problem": 33, "user": "5300aa1de4b0d8b024fd3710"}, {"code": "(fn my-replicate\n  [in n]\n  (mapcat #(take n (repeat %)) in))", "problem": 33, "user": "5300b750e4b0d8b024fd3711"}, {"code": "(fn [lst n] (mapcat (fn [x] (repeat n x)) lst))", "problem": 33, "user": "52fa4f48e4b047fd55836ff7"}, {"code": "(fn [x n] (mapcat (fn [x] (repeat n x)) x))", "problem": 33, "user": "5300f68de4b0d8b024fd3714"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %)", "problem": 33, "user": "52eb400ee4b0705949c4443b"}, {"code": "(fn blee [l r] (mapcat (partial repeat r) l))", "problem": 33, "user": "4ec92a6e535d6d7199dd36fb"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "5302bb37e4b0d8b024fd3734"}, {"code": "(fn [ll r] \n  (mapcat #(repeat r %) ll) )", "problem": 33, "user": "528f4462e4b0239c8a67aef0"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %)", "problem": 33, "user": "4faf897be4b081705acca257"}, {"code": "(fn replic [listy nummy]\n  (cond\n   (empty? listy) listy\n   :else (concat (repeat nummy (first listy)) (replic (rest listy) nummy))))", "problem": 33, "user": "51b89503e4b050a1176cd69a"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "5302b580e4b0d8b024fd3732"}, {"code": "(fn [s c] (apply concat (map (partial repeat c) s)))", "problem": 33, "user": "52dfc89be4b09f7907dd1405"}, {"code": "#(mapcat (fn [s] (repeat %2 s)) %)", "problem": 33, "user": "512587ade4b05d10e3e395fb"}, {"code": "(fn [coll n] (mapcat #(take n (iterate identity %)) coll))", "problem": 33, "user": "50b79c5fe4b0cf3e51c3046c"}, {"code": "(fn[coll times] (mapcat #(repeat times %) coll))", "problem": 33, "user": "518c1079e4b0f028e99addf8"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "problem": 33, "user": "52fff1a8e4b0d8b024fd370d"}, {"code": "(fn replicate [s n]\n  (if (seq s)\n    (concat (repeat n (first s)) (replicate (rest s) n))\n    s))", "problem": 33, "user": "52ffb7f2e4b0d8b024fd370b"}, {"code": "(fn [coll n]\n\t(mapcat #(repeat n %) coll))", "problem": 33, "user": "51a89081e4b08d8ec191b814"}, {"code": "(fn [col n] (mapcat #(repeat n %) col))", "problem": 33, "user": "52f53589e4b05e3f0be25f2c"}, {"code": "(fn f [x y]\n  (if (empty? x) '()\n    (concat (repeat y (first x)) (f (rest x) y))))", "problem": 33, "user": "52f818a6e4b047fd55836fcc"}, {"code": "#(loop [in %1 n %2 out []] \n   (if (nil? (first in))\n     out\n     (recur (rest in) n (apply conj out (repeat n (first in))))\n    )\n  )", "problem": 33, "user": "5176afd2e4b085adf681d889"}, {"code": "(fn[ls x] (mapcat #(repeat x %) ls))", "problem": 33, "user": "5301157ae4b0d8b024fd3717"}, {"code": "#(reduce (fn [v x] (apply conj(cons v (repeat %3 x)))) %1 %2) []", "problem": 33, "user": "53029281e4b0d8b024fd372e"}, {"code": "(fn [seq cnt]\n  (for [x seq y (repeat cnt x)] y))", "problem": 33, "user": "530578ede4b0d8b024fd3760"}, {"code": "(fn[xs,r] (mapcat #(repeat r %) xs))", "problem": 33, "user": "52fafd5ce4b047fd55837006"}, {"code": "(fn [x y] (reduce (fn [a b] (concat a b)) (map (fn [a] (repeat y a)) x)))", "problem": 33, "user": "5301a13ae4b0d8b024fd371e"}, {"code": "(fn[x y](apply concat (for[s1 x](for[s (range y)]s1)) ))", "problem": 33, "user": "5302d79ce4b0d8b024fd3736"}, {"code": "(fn [x y] (reduce (fn [acc el] (concat acc (take y  (repeat el)) )) [] x))\n\n;;(fn [coll n] (mapcat #(repeat n %) coll) )", "problem": 33, "user": "5307e4ece4b02e82168697a9"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "5152f82ee4b03f948212e718"}, {"code": "(fn [s n]\n  (if (<= n 0)\n    []\n    (reduce\n      #(apply conj %1 (take n (repeat %2)))\n      [] s)))", "problem": 33, "user": "53070615e4b02e821686979e"}, {"code": "(fn cnt[ sss n]\n   (mapcat #(repeat n %1) sss))", "problem": 33, "user": "52f426fce4b05e3f0be25f1e"}, {"code": "(fn [coll n]\n  (mapcat #(replicate n %) coll))", "problem": 33, "user": "4dad8a6dc9a9d6ed1399dc57"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "528c51a5e4b0239c8a67aeb4"}, {"code": "(fn [x times]\n  ((fn repl [acc curr times x]\n    (if (empty? x)\n      acc\n      (if (= (count curr) times)\n        (repl (concat acc curr) [] times (rest x))\n        (repl acc (conj curr (first x)) times x)\n      )\n    )\n  ) [] [] times x)\n)", "problem": 33, "user": "5303a027e4b0d8b024fd3745"}, {"code": "(fn [lst n] \n  (if (> n 1) \n    (apply interleave (take n (repeat lst)))\n  \tlst))", "problem": 33, "user": "52fe3a9de4b047fd55837039"}, {"code": "(fn\t[l n]\n  (loop\n    [tr []\n     s l]\n    (if (= nil (first s))\n      tr\n      (recur\n       (loop\n        [x n\n         tr2 tr\n         e (first s)]\n         (if (= 0 x)\n           tr2\n           (recur\n            (- x 1)\n            (conj tr2 e)\n            e)))\n       (rest s)))))", "problem": 33, "user": "530d85dee4b08068f379eca8"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "530caf86e4b02e82168697df"}, {"code": "#(mapcat (fn [k] (take %2 (cycle [k]))) %1)", "problem": 33, "user": "51583ee4e4b0a069fd272c72"}, {"code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "problem": 33, "user": "530e9729e4b08068f379ecbc"}, {"code": "(fn [xs n]  (mapcat #(repeat n %) xs))", "problem": 33, "user": "530e74c9e4b08068f379ecb9"}, {"code": "(fn repl [se times] (reduce (fn [acc b] (concat acc (repeat times b))) [] se))", "problem": 33, "user": "5226f9b8e4b04e78ff2e199b"}, {"code": "(fn \n  [s n]\n  (mapcat (fn\n         [x]\n         (repeat n x)) s))", "problem": 33, "user": "52f3af46e4b05e3f0be25f14"}, {"code": "(fn rep [list time]\n        (apply concat (map\n                       #(repeat time %)\n                       list\n                       )) )", "problem": 33, "user": "51f81925e4b09be9c177e526"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "530e5469e4b08068f379ecb7"}, {"code": "(fn [xs n]\n  (reduce (fn [newxs x]\n            (concat newxs (vec (repeat n x))))\n          (empty xs) xs))", "problem": 33, "user": "4ff505c8e4b0678c553fc364"}, {"code": "#(reduce concat (map (partial repeat %2) %))", "problem": 33, "user": "53034738e4b0d8b024fd373e"}, {"code": "(fn replicate-items [s n]\n  (when (seq s)\n    (concat (repeat n (first s)) (replicate-items (rest s) n))))", "problem": 33, "user": "5310e7aee4b08068f379ecdc"}, {"code": "(fn [coll, times] \n  (mapcat #(repeat times, %) coll))", "problem": 33, "user": "4eed26af535d93acb0a668bb"}, {"code": "(fn replicate-sequence [x y]\n      (if (empty? x)\n        []\n        (concat (take y (repeat (first x)))\n                (replicate-sequence (rest x) y))))", "problem": 33, "user": "52e17e66e4b09f7907dd1423"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "5300158ae4b0d8b024fd370f"}, {"code": "(fn [x n] \n  (mapcat identity (map (partial repeat n) x))\n  )", "problem": 33, "user": "531490bde4b08068f379ed17"}, {"code": "(fn [lst n] (mapcat #(repeat n %) lst))", "problem": 33, "user": "53110f32e4b08068f379ece4"}, {"code": "(fn [s n] \n  (loop [s1 (vec s) s2 []]\n    (if (empty? s1)\n      (apply list s2)\n      (recur (rest s1) (apply conj (vec (conj (repeat n (first s1)) s2))))\n    )))", "problem": 33, "user": "53069e16e4b02e8216869798"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "problem": 33, "user": "5315a4f0e4b08068f379ed2e"}, {"code": "#(apply concat (map (partial replicate %2) %1))", "problem": 33, "user": "52f89125e4b047fd55836fd4"}, {"code": "(fn [a n] (mapcat (partial (fn[nn x] (repeatedly nn #(identity x))) n) a ))", "problem": 33, "user": "4f320253e4b0d6649770a08d"}, {"code": "(fn [col i]\n  (loop [c col r []]\n    (if (nil? c)\n      r\n      (recur (next c) (concat r (repeat i (first c)))))))", "problem": 33, "user": "531488f3e4b08068f379ed16"}, {"code": "(fn [xs n] (mapcat #(take n (repeat %)) xs))", "problem": 33, "user": "53162640e4b08068f379ed40"}, {"code": "(fn [xs i] (mapcat #(repeat i %) xs ))", "problem": 33, "user": "52be0263e4b07a9af579230e"}, {"code": "(fn [coll n] (mapcat (fn [x] (repeat n x)) coll))", "problem": 33, "user": "507330e6e4b0e3170b5a8698"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "52bc6cb2e4b07a9af57922f5"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "531843c1e4b08068f379ed6c"}, {"code": "(fn rep \n   ([xs z]\n   (rep xs z z))\n   ([xs c z]\n   (let [[a & b] xs]\n    (cond (nil? a) '()\n          (= z 0) (rep b c c)\n          :else (conj (rep xs c (dec z)) a) ))))", "problem": 33, "user": "53120cb5e4b08068f379ecf0"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "53134005e4b08068f379ed07"}, {"code": "(fn [s n](->> s(map #(repeat n %1))(mapcat identity)))", "problem": 33, "user": "530cb5b8e4b02e82168697e0"}, {"code": "(fn [s n]\n  (for [x s\n        y (take n (repeat x))] y))", "problem": 33, "user": "531619c1e4b08068f379ed3d"}, {"code": "(fn replicate [sq n]\n  (reduce concat\n          (map #(repeat n %) sq)))", "problem": 33, "user": "5315ec83e4b08068f379ed39"}, {"code": "#(apply concat (map (fn [x] (repeat %2 x)) %))", "problem": 33, "user": "531576b4e4b08068f379ed29"}, {"code": "(fn [l n] \n  (reduce into [] (map  #(repeat n %) l)))", "problem": 33, "user": "531c7f0de4b08068f379eda4"}, {"code": "(fn [l n] (if (= n 1) l (apply interleave (repeat n l))))", "problem": 33, "user": "52265e41e4b04e78ff2e1981"}, {"code": "(fn [l n]\n  (mapcat #(repeat n %) l) )", "problem": 33, "user": "530c15f7e4b02e82168697d6"}, {"code": "#(reduce (fn[acc x] (concat acc (repeat %2 x))) [] %1)", "problem": 33, "user": "531bfb69e4b08068f379ed97"}, {"code": "(fn [s,t]\n  (loop [res [] n s]\n    (let [f (first n)]\n      (if f\n         (recur (apply conj res (repeat t f)) (rest n))\n         res)))\n                )", "problem": 33, "user": "531d53dbe4b08068f379edae"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %1) coll ))", "problem": 33, "user": "4ff4bed0e4b0678c553fc35f"}, {"code": "#(if (= 1 %2) \n   %1\n   (apply interleave (repeat %2 %1)))", "problem": 33, "user": "52c00e4fe4b07a9af5792342"}, {"code": "(fn f [s n]\n  (when (not-empty s)\n    (concat (take n (repeat (first s))) (f (rest s) n))\n  )\n)", "problem": 33, "user": "531ba143e4b08068f379ed91"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "531c0619e4b08068f379ed98"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "53121863e4b08068f379ecf3"}, {"code": "(fn [coll x]\n  (apply concat (map #(repeat x %) coll)))", "problem": 33, "user": "52474133e4b05ef8e38e635e"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "531308c1e4b08068f379ed04"}, {"code": "(fn [a b]\n  (loop [x (seq a)\n         y b\n         result []]\n    (if-let [cur (first x)]\n      (recur (next x) y (concat result (repeat y cur)))\n      result)))", "problem": 33, "user": "531e5c81e4b08068f379edba"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "531f7a2de4b08068f379edc6"}, {"code": "#(if (> %2 1) (apply interleave (repeat %2 %1)) %1)", "problem": 33, "user": "531dfaf5e4b08068f379edb3"}, {"code": "(fn [els n] (mapcat #(take n (repeat %)) els))", "problem": 33, "user": "5085bfdae4b004985b776e53"}, {"code": "#(reduce\n  (fn[coll, a]\n    (loop [acc coll i %2]\n      (if (> i 0)\n        (recur (conj acc a) (dec i))\n        acc\n        )))\n  []\n  %1\n  )", "problem": 33, "user": "531f1e63e4b08068f379edc2"}, {"code": "(fn [x y] (mapcat #(repeat y %) x))", "problem": 33, "user": "4f68a9bbe4b07046d9f4ef79"}, {"code": "(fn [coll n] (if (= n 1) coll (apply interleave (repeat n coll))))", "problem": 33, "user": "532347dde4b09d4e7a9b54cc"}, {"code": "(fn [x n]\n  (loop [x x ret '()]\n    (if (empty? x) ret\n      (recur (rest x) (concat ret (take n (iterate identity (first x))))))))", "problem": 33, "user": "531c57ace4b08068f379ed9b"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "5323a414e4b09d4e7a9b54d1"}, {"code": "(fn [xs n]\n  (mapcat #(repeat n %) xs))", "problem": 33, "user": "4fd5418ee4b0d4de60cee372"}, {"code": "(fn [data c]\n  (mapcat #(take c (repeat %)) data))", "problem": 33, "user": "532418f3e4b09d4e7a9b54d8"}, {"code": "(fn ! \n  ([l n]\n  (! l n [] n))\n  ([o-l o-n c-l c-n]\n    (cond \n    \n      (empty? o-l)\n       c-l\n    \n      (= 0 c-n)\n      (! (drop 1 o-l) o-n c-l o-n)\n    \n      :else\n      (! o-l o-n (conj c-l (first o-l)) (- c-n 1))   \n    )\n  )\n)", "problem": 33, "user": "5323f4c6e4b09d4e7a9b54d4"}, {"code": "(fn [original-collection number-of-times] \n  (reduce \n   (fn [initial element] ((fn n-times [col element times]\n  (loop [c col e element t times] \n    (if (< t 1) \n      c \n      (recur (conj c e) e (dec t))))) initial element number-of-times))\n   []\n   original-collection))", "problem": 33, "user": "5311b367e4b08068f379eced"}, {"code": "(fn [c n] (mapcat #(take n (repeat %1)) c))", "problem": 33, "user": "5005b57de4b0678c553fc46a"}, {"code": "(fn [coll n] (reduce #(apply conj %1 (repeat n %2)) [] coll))", "problem": 33, "user": "5326c5f7e4b09d4e7a9b54f2"}, {"code": "(fn rep [n times]\n   (if (= (count n) 1)\n     (take times (repeat (first n)))\n     (concat (take times (repeat (first n))) (rep (rest n) times))))", "problem": 33, "user": "518ee4f9e4b0cd6ff51676a5"}, {"code": "(fn [col n] (reduce #(into %1 (repeat n %2)) [] col))", "problem": 33, "user": "51bdebece4b0ff155d51d2b7"}, {"code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "532631e1e4b09d4e7a9b54ea"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "5328febee4b09d4e7a9b550d"}, {"code": "(fn f [v c] \n    (mapcat #(repeat c %1) v )\n    )", "problem": 33, "user": "531f0a26e4b08068f379edbf"}, {"code": "(fn repl [xs n]\n  (mapcat (partial repeat n) xs))", "problem": 33, "user": "532ab0bde4b09d4e7a9b5527"}, {"code": "#(apply concat (for [n %1] (for [i (range %2)] n)))", "problem": 33, "user": "53244c9de4b09d4e7a9b54db"}, {"code": "(fn [c r] (mapcat #(repeat r %) c))", "problem": 33, "user": "53224d45e4b09d4e7a9b54c0"}, {"code": "(fn repli [s n]\n(apply concat (reverse(reduce #(conj %1 (repeat n %2)) '() s)))\n)", "problem": 33, "user": "52d42021e4b09f7907dd132a"}, {"code": "(fn repl [xs, n] (for [x xs, i (range n)] x))", "problem": 33, "user": "532b9075e4b09d4e7a9b5533"}, {"code": "(fn [xs n]\n  (mapcat\n   (fn [x] (loop [ys '() cnt n]\n             (if (= 0 cnt)\n               ys\n               (recur (list* x ys) (dec cnt)))))\n   xs))", "problem": 33, "user": "4dbe04b2535d020aff1edf56"}, {"code": "(fn f \n  ([c num] (f c num '()))\n  ([c num r] \n     (\n       if (empty? c) r\n          (recur (rest c) num (concat r (repeat num (first c))))\n      )\n   )\n )", "problem": 33, "user": "5302ac7fe4b0d8b024fd3731"}, {"code": "(fn\n  [coll n]\n  (reduce #(reduce conj %1 (repeat n %2)) [] coll))", "problem": 33, "user": "52ba447ee4b07a9af57922ce"}, {"code": "#(for [x %1 y (range %2)] x)", "problem": 33, "user": "5004034ce4b0678c553fc447"}, {"code": "(fn [coll n]\n  (reduce concat (map #(take n (repeat %)) coll)))", "problem": 33, "user": "532b930be4b09d4e7a9b5534"}, {"code": "(fn [q n] (if (= n 1) q (apply interleave (for [i (range n)] q))))", "problem": 33, "user": "532e0b20e4b019098a6f8b45"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "532c0507e4b09d4e7a9b553c"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "52d2f457e4b099d49816f0ba"}, {"code": "(fn dup [seq n]\n        (if (empty? seq)\n            ()\n          (concat (take n (repeat (first seq)))\n                  (dup (rest seq) n))))", "problem": 33, "user": "52aa524fe4b0c58976d9ac64"}, {"code": "(fn replicateseq [x n]\n        (if (= n 0)\n          (empty x)\n          (if (= n 1)\n            x\n        (apply interleave (vec (repeat n x))))))", "problem": 33, "user": "532727bae4b09d4e7a9b54fa"}, {"code": "(fn myfun [v c]\n  (cond \n    (nil? (first v)) '()\n    :else  (apply conj (myfun (rest v) c) (repeat c (first v)))\n  )\n)", "problem": 33, "user": "531902b1e4b08068f379ed77"}, {"code": "(fn [col r] (apply concat (map #(repeat r %) col)))", "problem": 33, "user": "52fc34cee4b047fd55837015"}, {"code": "(fn [c n] \n  (if (= n 1) c (apply interleave (repeat n c))))", "problem": 33, "user": "53315c78e4b019098a6f8b67"}, {"code": "#(reduce \n    (fn [coll x] \n        (concat coll (for [i (range %2)] x))) \n    '() %1)", "problem": 33, "user": "53300924e4b019098a6f8b55"}, {"code": "(fn [l n] (if (> n 1) (apply interleave (repeat n l)) l))", "problem": 33, "user": "532bce35e4b09d4e7a9b5536"}, {"code": "(fn [xs n]\n  (reduce (fn [xs x]\n            (apply conj xs\n                   (repeat n x)))\n          []\n          xs))", "problem": 33, "user": "533018b2e4b019098a6f8b56"}, {"code": "(fn [seq n]\n     (reverse\n         (reduce\n            (fn [su y]  (last (take (+ n 1) (iterate (partial cons y) su)))) nil seq)))", "problem": 33, "user": "51f5539fe4b0abb92f97f9cd"}, {"code": "(fn replicate-seq [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "5322d364e4b09d4e7a9b54c6"}, {"code": "#(mapcat (fn [l] (repeat %2 l)) %1)", "problem": 33, "user": "5326d111e4b09d4e7a9b54f3"}, {"code": "(fn foo [coll n]\n  (if (> n 1)\n    (let [x (for [i (range n)]\n              coll)]\n      (apply interleave x))\n    coll))", "problem": 33, "user": "53322cece4b019098a6f8b73"}, {"code": "(fn\n  [col x]\n  (let [num (count col)]\n    (loop [n   1\n           res []]\n      (if (> n num)\n        res\n        (recur (inc n) (into res (vec (repeat x (get col (- n 1)))))) ))))", "problem": 33, "user": "531016d0e4b08068f379ecd1"}, {"code": "(fn [coll n] (reduce (fn [acc el] (concat acc (repeat n el))) '[] coll))", "problem": 33, "user": "531792d9e4b08068f379ed5e"}, {"code": "(fn [xs n]\n  (mapcat #(take n (iterate identity %)) xs))", "problem": 33, "user": "525ab6cfe4b0cb4875a45cf9"}, {"code": "(fn [sq, n]\n  (loop [r [] s sq]\n    (if (first s)\n      (recur (cons (take n (repeat (first s))) r) (next s))\n      (apply concat (reverse r)))))", "problem": 33, "user": "53219cece4b09d4e7a9b54b7"}, {"code": ";; (fn [xs n] (mapcat #(repeat n %) xs))\n#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "533696b9e4b0e30313ee6c7c"}, {"code": "(fn [lst n] (mapcat (partial repeat n) lst))", "problem": 33, "user": "52facb9de4b047fd55837002"}, {"code": "#(mapcat (fn [c] (repeat %2 c)) %1)", "problem": 33, "user": "5336ca32e4b0e30313ee6c80"}, {"code": "(fn f [l r]\n  (if (empty? l)\n      '()\n      (concat (take r (repeat (first l)))\n              (f (rest l) r)\n      )\n  )\n)", "problem": 33, "user": "5149c2f1e4b0829bd132edb0"}, {"code": "(fn [coll n](mapcat #(repeat n %) coll))", "problem": 33, "user": "527c4071e4b0757a1b17135a"}, {"code": "(fn [coll iter]\n  (mapcat (fn [x] (repeat iter x)) coll))", "problem": 33, "user": "531d34cfe4b08068f379edac"}, {"code": "(fn [coll n]\n  (reduce into [] (map #(repeat n %) coll)))", "problem": 33, "user": "532686e6e4b09d4e7a9b54ef"}, {"code": "#(mapcat (fn[a] (repeat %2 a)) %1)", "problem": 33, "user": "52baefbae4b07a9af57922da"}, {"code": "(fn my-rep [x n] (if (seq x) (concat (repeat n (first x)) (my-rep (rest x) n)) '()))", "problem": 33, "user": "53388e2de4b0e30313ee6c9c"}, {"code": "(fn [xs n] (mapcat (fn [x] (take n (repeat x))) xs))", "problem": 33, "user": "532b43c3e4b09d4e7a9b5531"}, {"code": "(fn [x n] (reduce concat \n                   (map repeat \n                        (map (constantly n) x) \n                        x)\n                   )\n   )", "problem": 33, "user": "53350264e4b0656e627bfd73"}, {"code": "(fn [coll count]\n  (if (> count 1)\n    (apply interleave (repeat count coll))\n    coll))", "problem": 33, "user": "520fff3ce4b080a8d9b9d633"}, {"code": "(fn [v n] (mapcat #(repeat n %) v))", "problem": 33, "user": "533056a4e4b019098a6f8b5b"}, {"code": "(fn [s,n] (mapcat #(take n (repeat %)) s))", "problem": 33, "user": "533ab9abe4b0e30313ee6cbf"}, {"code": "(fn repl [xs n] \n  (mapcat #(replicate n %) xs))", "problem": 33, "user": "5334d4f2e4b0656e627bfd71"}, {"code": "(fn [col n] (mapcat #(repeat n %) col))", "problem": 33, "user": "506d5e4ce4b0a302964c5493"}, {"code": "(fn [sequence n]\n  (apply concat(map #(repeat n %) sequence)))", "problem": 33, "user": "4eadc217535d7eef30807321"}, {"code": "(fn [xs n] (apply concat (map #(repeat n %) xs)))", "problem": 33, "user": "514a13cee4b0829bd132edb4"}, {"code": "(fn [y x] (reduce #(concat % (repeat x %2) ) [] y))", "problem": 33, "user": "530262c8e4b0d8b024fd3728"}, {"code": "#(apply mapcat list (repeat %2 %))", "problem": 33, "user": "4fceda40e4b03432b189f407"}, {"code": "(fn rep\n  [coll n]\n  (let [rept (fn [a] (loop [t [] i n] (if (= i 0) t (recur (conj t a) (- i 1)))))]\n    (apply concat (map rept coll))))", "problem": 33, "user": "53334cb2e4b019098a6f8b81"}, {"code": "(fn [s n]\n  (->> s\n       (map #(repeat n %))\n       (apply concat)))", "problem": 33, "user": "51a3b135e4b0e77c4ca60bf6"}, {"code": "(fn [l c] \n  (loop [l1 l\n         res '()]\n    (if (nil? (first l1)) res\n      (recur (rest l1) (concat res (for [x (range c)] (first l1)))))))", "problem": 33, "user": "533ee560e4b085b17e897d98"}, {"code": "(fn repeat-col\n\t[col n]\n\t(apply concat (map #(repeat n %) col)))", "problem": 33, "user": "5339af7de4b0e30313ee6cab"}, {"code": "#(mapcat (fn [v] (repeat %2 v)) %)", "problem": 33, "user": "5281a445e4b0757a1b17143a"}, {"code": "(fn [col rep]\n  (seq (reduce #(into %1 (repeat rep %2)) [] col)\n \n ))", "problem": 33, "user": "5322d370e4b09d4e7a9b54c7"}, {"code": "(fn [coll n] \n  (reduce #(concat % (take n (repeat %2)))\n          []\n          coll))", "problem": 33, "user": "523ea111e4b057c4b7cd0a65"}, {"code": "#(mapcat (fn [e] (take %2 (iterate identity e))) %1)", "problem": 33, "user": "5318594ee4b08068f379ed6d"}, {"code": "(fn[v c] (mapcat #(repeat c %) v))", "problem": 33, "user": "5339cb07e4b0e30313ee6caf"}, {"code": "(fn [coll n] (reduce #(into %1 (repeat n %2)) [] coll))", "problem": 33, "user": "533b1dc4e4b0e30313ee6cc7"}, {"code": "(fn [l n] (apply concat (map (fn [e] ((fn f [i] (if (= i n) '() (conj (f (+ i 1)) e))) 0)) l)))", "problem": 33, "user": "51da631be4b02ceefd947766"}, {"code": "#(apply mapcat list (repeat %2 %1))", "problem": 33, "user": "53409368e4b085b17e897daf"}, {"code": "(fn [input n]\n  (loop [s input a '()]\n    (if (empty? s)\n      (reverse a)\n      (recur (rest s) \n             (loop [e (first s) i 0 aa a]\n        \t\t(if (= i n)\n                  aa\n                  (recur e (inc i) (cons e aa))))))))", "problem": 33, "user": "5341b141e4b00652c8746ecf"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "533f09e1e4b085b17e897d9a"}, {"code": "#(loop [seq %1\n         acc '()]\n    (if (empty? seq)\n      (reverse acc)\n      (let [next (first seq)]\n        (recur (rest seq) (concat (repeat %2 next) acc)))))", "problem": 33, "user": "533d2ea5e4b085b17e897d7a"}, {"code": "(fn [s x] (mapcat #(repeat x %) s))", "problem": 33, "user": "532a111ee4b09d4e7a9b5520"}, {"code": "(fn [col n]\n    (if (<= n 1) \n      col\n      (apply interleave (repeat n col))))", "problem": 33, "user": "524d90c0e4b0a16e35cf6ded"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "53460d02e4b084c2834f4a39"}, {"code": "(fn [x y]\n  (reduce #(into %1 (repeat y %2)) [] x))", "problem": 33, "user": "53468f6ce4b084c2834f4a3f"}, {"code": "(fn [coll n] (mapcat #(repeat n %1) coll))", "problem": 33, "user": "5340ee60e4b00652c8746ec9"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "4eb9d8f8535dfed6da9c6d61"}, {"code": "(fn [x n]\n  (mapcat (partial take n) (map repeat x)))", "problem": 33, "user": "53415755e4b00652c8746ecd"}, {"code": "(fn [coll n]\n  (mapcat (partial repeat n) coll))", "problem": 33, "user": "5346f409e4b084c2834f4a46"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "53307da1e4b019098a6f8b5e"}, {"code": "(fn [s n]\n    (mapcat #(repeat n %) s))", "problem": 33, "user": "53487737e4b084c2834f4a59"}, {"code": "(fn [c n] (mapcat #(repeat n %) c))", "problem": 33, "user": "4e705861535d5021c1a89635"}, {"code": "#(reduce concat (map (partial repeat %2) %1))", "problem": 33, "user": "532cb6bbe4b019098a6f8b33"}, {"code": "(fn [x n]\n  (apply concat\n         (map\n          (fn [x] (map (fn [a] x) (range n)))\n          x)))", "problem": 33, "user": "534941d1e4b084c2834f4a60"}, {"code": "(fn [col n] (mapcat #(if (sequential? %) % [%]) (map #(repeat n %) col)))", "problem": 33, "user": "53286389e4b09d4e7a9b5504"}, {"code": "(fn f [x n] (if (empty? x) (list) (concat (repeat n (first x)) (f (rest x) n)  ) ))", "problem": 33, "user": "5349ac2be4b084c2834f4a67"}, {"code": "#(if (= 1 %2)\n   %\n   (apply interleave (repeatedly %2 (fn[] %))))", "problem": 33, "user": "52a144b0e4b04e0c58e87bd6"}, {"code": "(fn [s n] (apply concat (map #(repeat n %) s)))", "problem": 33, "user": "53498f88e4b084c2834f4a64"}, {"code": "(fn [l n]\n  (if (> n 1)\n    (apply interleave (repeat n l))\n    l))", "problem": 33, "user": "5348236ee4b084c2834f4a54"}, {"code": "#(mapcat (fn[input] (take %2 (iterate identity input))) %1)", "problem": 33, "user": "52ac2db3e4b0c58976d9ac82"}, {"code": "(fn [x y] (mapcat (partial repeat y) x))", "problem": 33, "user": "4ddb696b535d02782fcbe9fa"}, {"code": "(fn [coll times] (mapcat (partial repeat times) coll))", "problem": 33, "user": "50fc299ee4b0d10d794c19f2"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "534bde26e4b084c2834f4a81"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "534bd9c1e4b084c2834f4a80"}, {"code": "(fn fun [xs n]\n(reduce (fn [x y] (apply conj x (concat (repeat n y)))) [] xs))", "problem": 33, "user": "5349da55e4b084c2834f4a68"}, {"code": "(fn [a x]\n  (reverse (reduce into (map #(repeat x %) a))))", "problem": 33, "user": "51ab70c3e4b04e3dc0c27b33"}, {"code": "(fn [seq n]\n  (loop [s seq\n         res []]\n    (if-not s  res  (recur (next s) \n                       (into res (for [i (range n)]\n                                      (first s)))))))", "problem": 33, "user": "516081e7e4b009fba0926e28"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4e79f28b535db169f9c796a8"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "5339c105e4b0e30313ee6cae"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "534e9ed4e4b084c2834f4ab8"}, {"code": "(fn [s reps]\n  (mapcat #(repeat reps %) s))", "problem": 33, "user": "5338387de4b0e30313ee6c91"}, {"code": "(fn [s n] \n  (apply concat (map #(repeat n %) s)))", "problem": 33, "user": "534815bde4b084c2834f4a53"}, {"code": "(fn [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "53504436e4b084c2834f4ad7"}, {"code": "(fn [coll n] (mapcat #(concat (repeat n %)) coll))", "problem": 33, "user": "534e118ee4b084c2834f4aad"}, {"code": "(fn [x c]\n  (reduce concat (map #(repeat c %) x)))", "problem": 33, "user": "534f25f9e4b084c2834f4ac6"}, {"code": "#(mapcat  ( partial  repeat %2)  %1)", "problem": 33, "user": "534ab3f5e4b084c2834f4a6e"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "53513d28e4b084c2834f4ae3"}, {"code": "(fn [x y] (mapcat #(repeat y %) x))", "problem": 33, "user": "534d6524e4b084c2834f4a9f"}, {"code": "(fn [sq, times]\n  (apply concat (map #(repeat times %) sq)))", "problem": 33, "user": "5348cab4e4b084c2834f4a5e"}, {"code": "(fn [ls n]\n  (apply concat (map #(repeat n %) ls)))", "problem": 33, "user": "53526570e4b084c2834f4aef"}, {"code": "(fn [x re] (if (> re 1)\n             (apply interleave (take re (repeat x)))\n             x)\n  )", "problem": 33, "user": "534c734de4b084c2834f4a93"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "5336a339e4b0e30313ee6c7d"}, {"code": "(fn g[x r]\n  (let [a (atom [])]\n    (reduce (fn[acc e]\n              (doseq [i (range r)]\n                (swap! a(fn[_] (conj @a e)))))\n            [] x)\n    @a))", "problem": 33, "user": "52d6664be4b09f7907dd1359"}, {"code": "#(reduce concat (map (fn [x] (repeat %2 x)) %1))\n;(fn [xs i] (reduce #(concat %1 (replicate i %2)) [] xs))", "problem": 33, "user": "533b9cace4b0e30313ee6cd1"}, {"code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "problem": 33, "user": "534efe66e4b084c2834f4ac1"}, {"code": "(fn [l c]\n  (if (= 1 c)\n    l\n    (apply interleave (repeat c l))))", "problem": 33, "user": "534e4a29e4b084c2834f4ab0"}, {"code": "(fn [coll repeat-value] (mapcat #(repeat repeat-value %) coll))", "problem": 33, "user": "5256c4c1e4b0541d1855ba36"}, {"code": "(fn replicate [coll n] (reduce #(concat %1 (repeat n %2)) [] coll))", "problem": 33, "user": "5353afa0e4b084c2834f4b03"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "50f10f7be4b06d9538fe211a"}, {"code": "(fn replicate [coll times]\n\t(apply concat (map #(repeat times %) coll)))", "problem": 33, "user": "534bfa81e4b084c2834f4a87"}, {"code": "#(apply concat (for [i %1] (repeat %2 i)))", "problem": 33, "user": "535526a2e4b04ce2eb3ed259"}, {"code": "(fn [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "5312cdaae4b08068f379ed03"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "5250b7a5e4b0541d1855b83e"}, {"code": "#(reduce concat (map (partial repeat %2) %))", "problem": 33, "user": "53500869e4b084c2834f4ad3"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "535778dee4b04ce2eb3ed27d"}, {"code": "(fn [xs n]\n   (reduce (fn [a b] (nth (iterate #(conj % b) a) n)) [] xs)\n  )", "problem": 33, "user": "534d1173e4b084c2834f4a98"}, {"code": "#(if (= 1 %2) % (apply interleave (map (constantly %) (range %2))))", "problem": 33, "user": "5357b241e4b04ce2eb3ed282"}, {"code": "(fn replicate-each [coll n]\n  (letfn [(replicator [item n]\n                       (if (not (= n 0))\n                         (cons item (replicator item (- n 1)))\n                         '()))]\n    (if (not (empty? coll))\n      (concat (replicator (first coll) n) (replicate-each (rest coll) n))\n      '())))", "problem": 33, "user": "5356e04fe4b04ce2eb3ed271"}, {"code": "(fn [a c] (reduce concat (map #(repeat c %) a)))", "problem": 33, "user": "52046600e4b0c283853240c5"}, {"code": "(fn [coll n]\n  (if (> n 1)\n    (apply interleave (take n (repeat coll)))\n    coll))", "problem": 33, "user": "5225271fe4b01819a2de42f9"}, {"code": "(fn  [seq n]\n    (loop [coll seq\n           accum [] ]\n      (if (empty? coll)\n         accum\n        ( recur (rest coll)(concat accum (concat (repeat n(first coll))) ))\n      )\n    )\n  )", "problem": 33, "user": "52dced9de4b09f7907dd13d7"}, {"code": "(fn my-rep [x times]\n  (loop [x x acc '()]\n    (if (empty? x)\n      acc\n      (recur\n        (rest x)\n        (concat acc\n          (map\n            (fn [i] (first x))\n            (range times)))))))", "problem": 33, "user": "535a170ae4b04ce2eb3ed2a3"}, {"code": "(fn repl [xs n]\n  (mapcat #(repeat n %) xs))", "problem": 33, "user": "53287dace4b09d4e7a9b5507"}, {"code": "(fn [s n]\n  (apply concat (map #(repeat n %) s)))", "problem": 33, "user": "53597288e4b04ce2eb3ed29c"}, {"code": "(fn [col times]\n   (for [item col t (range times)] item))", "problem": 33, "user": "530b8580e4b02e82168697cc"}, {"code": "(fn [xxs nn]\n    (let [generate-lists   (fn generate-lists [x n]\n                             (if (zero? n)\n                               nil\n                               (cons x (generate-lists x (dec n)))\n                               )\n\n                             )\n\n          es (generate-lists xxs nn)\n          ]\n\n\n      (if (= nn 1)\n        ;es\n        (apply list xxs)\n        (apply interleave es)\n        ))\n    )", "problem": 33, "user": "535aba96e4b04ce2eb3ed2a8"}, {"code": "(fn [xs n]\n  (mapcat #(repeat n %) xs))", "problem": 33, "user": "535bf08fe4b04ce2eb3ed2af"}, {"code": "(fn [arg c] (loop [x arg r []] (if-not x r (recur (next x) (concat r (repeat c (first x)))))))", "problem": 33, "user": "53512b55e4b084c2834f4ae0"}, {"code": "(fn [s n] (reduce #(into %1 (repeat n %2)) [] s))", "problem": 33, "user": "534dd600e4b084c2834f4aaa"}, {"code": "(fn [xs n]\n  (mapcat (partial repeat n) xs))", "problem": 33, "user": "5344fe13e4b084c2834f4a32"}, {"code": "(fn [x y] (mapcat #(repeat y %) x))", "problem": 33, "user": "5356dcbee4b04ce2eb3ed270"}, {"code": "(fn [x n]\n  (mapcat #(repeat n %) x))", "problem": 33, "user": "4f0412f8535dcb61093f6b99"}, {"code": "(fn [seq n] (mapcat #(repeat n %) seq))", "problem": 33, "user": "53523ae0e4b084c2834f4aee"}, {"code": "(fn [sq var]\n  (apply concat (map #(repeat var %) sq)))", "problem": 33, "user": "52271a85e4b04e78ff2e19a7"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "535c53c5e4b04ce2eb3ed2b3"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "5215661be4b02f6d8ea676c7"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "535afd76e4b04ce2eb3ed2ab"}, {"code": ";(fn [x y] (map #(replicate y %)x))\n\n(fn [x y] (mapcat #(replicate y %)x))", "problem": 33, "user": "533aac38e4b0e30313ee6cbe"}, {"code": "#(apply mapcat list (repeat %2 %1))", "problem": 33, "user": "534f1c94e4b084c2834f4ac5"}, {"code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "535d4b0ae4b04ce2eb3ed2be"}, {"code": "(fn [l times]\n  (let [l (replicate times l)]\n    (if (= (count l) 1)\n      (seq (first l))\n      (apply interleave l))))", "problem": 33, "user": "4fe49706e4b0e8f79898feb7"}, {"code": "(fn [x n] (apply concat (map #(repeat n %) x)))", "problem": 33, "user": "535920b2e4b04ce2eb3ed294"}, {"code": "#(loop [ l1 %1 l2 '() ] \n   (if (empty? l1) \n     (reverse l2) \n     (recur (rest l1) (concat (take %2 (repeat (first l1))) l2))))", "problem": 33, "user": "535a18e3e4b04ce2eb3ed2a4"}, {"code": "(fn [v n] (mapcat #(repeat n %) v))", "problem": 33, "user": "530fbbaee4b08068f379eccf"}, {"code": "(fn [a b] (mapcat #(repeat b %) a) )", "problem": 33, "user": "52761edae4b03e8d9a4a74d4"}, {"code": "(fn [sq n]\n  ((fn [sq r]\n    (if (empty? sq)\n      r\n      (recur (rest sq) (concat r (repeat n (first sq))))))\n   sq []))", "problem": 33, "user": "535d910ae4b04ce2eb3ed2c5"}, {"code": "(fn [l n] (mapcat #(repeat n %) l))", "problem": 33, "user": "535d2533e4b04ce2eb3ed2bc"}, {"code": "(fn replicate-element [s i] (mapcat #(repeat i %) s))", "problem": 33, "user": "52e683c0e4b09f7907dd1477"}, {"code": "(fn f [x c] (mapcat (fn [y] (repeat c y)) x))", "problem": 33, "user": "500e7063e4b04a05d36fcc07"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "536102efe4b0243289761e3e"}, {"code": "(fn rep [[x & xs] n]\n  (if (nil? x)\n    []\n    (concat (repeat n x) (rep xs n))))", "problem": 33, "user": "536254a5e4b0243289761e50"}, {"code": "(fn [s t]\n    (apply concat (for [x s]\n       (repeat t x))))", "problem": 33, "user": "53489329e4b084c2834f4a5b"}, {"code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "5361a4f2e4b0243289761e47"}, {"code": "(fn [s number-of-times]\n  (reduce #(concat %1 (take number-of-times (repeat %2))) [] s))", "problem": 33, "user": "53527551e4b084c2834f4af0"}, {"code": "(fn rep [coll n] (if (empty? coll) [] (concat (take n (iterate identity (first coll))) (rep (rest coll) n))))", "problem": 33, "user": "53629381e4b0243289761e54"}, {"code": "(fn [l n] (reduce (fn [a b] (concat a (repeat n b))) (repeat n (first l)) (rest l)))", "problem": 33, "user": "53638ed2e4b0243289761e5b"}, {"code": "#(if (> %2 1) \n   (apply interleave (repeat %2 %))\n                     %)", "problem": 33, "user": "52c42bc2e4b0c2d177d620d0"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "532ecd44e4b019098a6f8b49"}, {"code": "(fn [s n]\n      (mapcat #(repeat n %) s))", "problem": 33, "user": "53528cd3e4b084c2834f4af2"}, {"code": "#(apply concat (for [x %1] (repeat %2 x)))", "problem": 33, "user": "5354bb38e4b084c2834f4b0a"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "536552bbe4b0243289761e6c"}, {"code": "(fn [s t]\n  (apply concat (map #(repeat t %) s)))", "problem": 33, "user": "5364697ce4b0243289761e62"}, {"code": "(fn [coll n]\n\t(mapcat #(repeat n %) coll))", "problem": 33, "user": "536581e4e4b0243289761e6d"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "5325cef5e4b09d4e7a9b54e7"}, {"code": "(fn [sequen numtimes] \n\n  ((fn [acc remaining] \n    (let [tail (rest remaining)\n          head (first remaining)]\n      (println head)\n      (if (nil? head)\n        acc\n        (recur (concat acc  (repeat numtimes head) ) tail))))\n   (empty sequen) sequen\n   \n   )\n  )", "problem": 33, "user": "4fafd067e4b081705acca259"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "5338e33fe4b0e30313ee6ca1"}, {"code": "(fn dup [l n]\n  (if (empty? l)\n    l\n    (concat (repeat n (first l)) (dup (rest l) n))))", "problem": 33, "user": "5368a275e4b0243289761e8f"}, {"code": "(fn replic[lst n]\n  (if-let [[x & xs] (seq lst)]\n    (concat (take n (cycle [x])) (replic xs n))\n    ()\n  )\n)", "problem": 33, "user": "536234a5e4b0243289761e4d"}, {"code": "#(apply concat (map (fn [x] (repeat %2 x)) %1))", "problem": 33, "user": "536973e5e4b0243289761e9e"}, {"code": "(fn [col l]\n        (if (= 1 l)\n          col\n          (apply interleave (repeat l col))))", "problem": 33, "user": "5369d072e4b0243289761ea1"}, {"code": "(fn [xs n]\n  (mapcat (partial repeat n) xs))", "problem": 33, "user": "4edb314d535d10e5ff6f5317"}, {"code": "#(reduce (fn [x y](concat x (repeat %2 y))) [] %1)", "problem": 33, "user": "524f3e6de4b0541d1855b805"}, {"code": "(fn replicate\n  [xs n]\n  (mapcat #(repeat n %) xs))", "problem": 33, "user": "536aa86de4b0243289761eb1"}, {"code": "(fn [coll times]\n  (reduce (fn [acc curr]\n            (apply (partial conj acc) (take times (repeat curr))))\n          []\n          coll))", "problem": 33, "user": "53695439e4b0243289761e9a"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "535eaa73e4b04ce2eb3ed2d4"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "536be89ee4b0fc7073fd6e32"}, {"code": "(fn [xs n] (reduce into [] (map (partial repeat n) xs)))", "problem": 33, "user": "536d83cee4b0fc7073fd6e5e"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "53691dc7e4b0243289761e97"}, {"code": "(fn [c n] (mapcat #(repeat n %) c))", "problem": 33, "user": "536e5b68e4b0fc7073fd6e6d"}, {"code": "(fn [coll n]\n  (loop [coll coll out ()]\n    (if (empty? coll)\n      out\n      (recur (rest coll)\n             (concat out (replicate n (first coll)))))))", "problem": 33, "user": "5369a4b1e4b0243289761e9f"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "52eb2ec9e4b0705949c44439"}, {"code": "(fn [s n] (apply concat (map #(repeat n %) s)))", "problem": 33, "user": "535197f2e4b084c2834f4ae4"}, {"code": "(fn [xs n]\n  (mapcat #(repeat n %) xs)\n  )", "problem": 33, "user": "536ca4bde4b0fc7073fd6e49"}, {"code": "(fn [l n] (reduce concat (map (partial repeat n) l)))", "problem": 33, "user": "536e6fe2e4b0fc7073fd6e6f"}, {"code": "(fn [s n]\n  (reverse (reduce #(apply conj %1 (repeat n %2)) '() s)))", "problem": 33, "user": "536f5900e4b0fc7073fd6e7b"}, {"code": "#(mapcat (fn [a] (take %2 (repeat a))) %1)", "problem": 33, "user": "536ecd9fe4b0fc7073fd6e76"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "524b0645e4b09eba1c0223bf"}, {"code": "(fn [coll r] (mapcat #(repeat r %) coll))", "problem": 33, "user": "4ea5ba92535d7eef308072d9"}, {"code": "(fn [s n] (mapcat (fn [i] (repeatedly n #(identity i))) s))", "problem": 33, "user": "53578543e4b04ce2eb3ed280"}, {"code": "#(reduce (fn [memo element] (into memo (repeat %2 element))) [] %1)", "problem": 33, "user": "529f5a23e4b04e0c58e87baa"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "536e0930e4b0fc7073fd6e66"}, {"code": "(fn [coll n]\n    (mapcat (partial repeat n) coll))", "problem": 33, "user": "5370ef22e4b0fc7073fd6ea0"}, {"code": "(fn [col c] (mapcat #(take c (repeat %)) col))", "problem": 33, "user": "5228b015e4b0186687e23a8a"}, {"code": "(fn [col n] (apply concat (map #(take n (iterate (fn[%] %) %)) col)))", "problem": 33, "user": "53347274e4b0656e627bfd6b"}, {"code": "#(if (= %2 1)\n   %1 \n   (apply interleave \n          (take %2 (iterate identity %1))))", "problem": 33, "user": "534f13b2e4b084c2834f4ac4"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "4fe9ea87e4b0547ebccb2476"}, {"code": "(fn [xs n]\n  (reduce (fn [accum x]\n            (concat accum\n                    (repeat n x)))\n          []\n          xs))", "problem": 33, "user": "4f5c68c6e4b0030a34fb2b23"}, {"code": "#(apply concat (map (fn [x] (repeat %2 x)) %1))", "problem": 33, "user": "536c7470e4b0fc7073fd6e3e"}, {"code": "#(mapcat (fn [input](repeat %2 input)) %1)", "problem": 33, "user": "53730973e4b06d7f452d9e05"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "536a37efe4b0243289761eaa"}, {"code": "(fn [s n] (reduce (fn [a b] (concat a (repeat n b))) [] s))", "problem": 33, "user": "536f2faee4b0fc7073fd6e79"}, {"code": "(fn [s n] (mapcat (fn [x] (repeat n x)) s))", "problem": 33, "user": "536f62aee4b0fc7073fd6e7c"}, {"code": "(fn rep [coll n]\n  (loop [c coll times n result []]\n    (if (empty? c) ;if the collection is empty\n      result       ;return the result\n      (if (= times 0) ;if the times is 0\n      \t(recur (rest c) n result) ;then recur the rest of the collection and bounce the times back to the original number\n      \t(recur c (dec times) (conj result (first c))))))) ;else decrease the times by one, and conj the first of the collection\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ;onto the result", "problem": 33, "user": "53713ebee4b0fc7073fd6ead"}, {"code": "(fn [l n] (reduce #(apply conj % %2) [] (map (partial repeat n) l)))", "problem": 33, "user": "53736ffce4b06d7f452d9e11"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "4ec53f8c535d6d7199dd368b"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "53705e2de4b0fc7073fd6e96"}, {"code": "(fn [x n]\n  (reduce concat (map #(repeat n %) x)))", "problem": 33, "user": "532c9dc9e4b019098a6f8b30"}, {"code": "(fn [coll, n] (apply concat (map #(take n (repeat %)) coll)))", "problem": 33, "user": "534c1c64e4b084c2834f4a8a"}, {"code": "(fn [x y]\n  (mapcat #(take y (repeat %)) x )\n  )", "problem": 33, "user": "535056a7e4b084c2834f4adb"}, {"code": "(fn [coll n]\n  (reduce concat (map #(repeat n %) coll)))", "problem": 33, "user": "536be48ee4b0fc7073fd6e31"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "53720c5ce4b0493c815db704"}, {"code": "#(if (= 1 %2) %1 (apply interleave (repeat %2 %1)))", "problem": 33, "user": "53712c03e4b0fc7073fd6ea9"}, {"code": "(fn replicate-seq [coll num-times]\n  (mapcat #(repeat num-times %) coll))", "problem": 33, "user": "53713ed9e4b0fc7073fd6eaf"}, {"code": "#(reduce (fn [c n] (concat c (repeat %2 n))) '() %1)", "problem": 33, "user": "5356d00ee4b04ce2eb3ed26f"}, {"code": "(fn [li nr] (mapcat (fn [e] (repeat nr e)) li))", "problem": 33, "user": "5376966ae4b06839e8705e27"}, {"code": "(fn [coll count]\n    (mapcat (fn [el] (repeat count el))\n            coll))", "problem": 33, "user": "5317d78ee4b08068f379ed63"}, {"code": "(fn [l n]\n   (for [i l\n         j (range n)]\n     i))", "problem": 33, "user": "535e518ee4b04ce2eb3ed2cf"}, {"code": "(fn [s n]\n  (apply concat (map #(repeat n %) s)))", "problem": 33, "user": "5379306fe4b06839e8705e50"}, {"code": "(fn [coll n]\n  (mapcat (partial repeat n) coll))", "problem": 33, "user": "53779a26e4b06839e8705e38"}, {"code": "(fn [coll n] (mapcat (partial repeat n) coll))", "problem": 33, "user": "536d260be4b0fc7073fd6e55"}, {"code": "(fn jduplicate\n  [lst num]\n  (loop [final [] current lst]\n    (if (empty? current)\n      final\n      (recur (into final (take num (repeat (first current)))) (rest current)))))", "problem": 33, "user": "534ff8a6e4b084c2834f4ad1"}, {"code": "#(letfn[(rep[frm cnt]\n            (if (nil? frm) nil\n              (concat (take cnt (cycle (list (first frm)))) (rep (next frm) cnt))))]\n    (rep %1 %2))", "problem": 33, "user": "4e8849c5535d8b9bb0147ca4"}, {"code": "(fn [l n] (cond (= n 1) l :else (apply interleave (repeat n l))))", "problem": 33, "user": "536673a8e4b0243289761e76"}, {"code": "(fn [xs n]\n  (reduce #(concat %1 (repeat n %2)) [] xs))", "problem": 33, "user": "5370f8ede4b0fc7073fd6ea2"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "5370b386e4b0fc7073fd6e9b"}, {"code": "#(reduce (fn [x y] (into x (repeat %2 y))) [] %1)", "problem": 33, "user": "5339edfbe4b0e30313ee6cb3"}, {"code": "(fn [c n] (mapcat #(repeat n %) c))", "problem": 33, "user": "512700c4e4b083bb8f88cf14"}, {"code": "(fn [l n] (mapcat #(repeat n %) l))", "problem": 33, "user": "535943b3e4b04ce2eb3ed295"}, {"code": "(fn [collection cnt]\n  (mapcat #(take cnt (repeat %)) collection))", "problem": 33, "user": "4daeff24edd6309eace4d16e"}, {"code": "(fn [s n] \n  (mapcat #(repeat n %) s))", "problem": 33, "user": "53791ab7e4b06839e8705e4d"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4f92de49e4b0dcca54ed6cb2"}, {"code": "(fn [col a]\n  (mapcat #(repeat a %1) col))", "problem": 33, "user": "5371167fe4b0fc7073fd6ea7"}, {"code": "(fn [x y] (if (= y 1) x (apply interleave (repeat y x))))", "problem": 33, "user": "52eaba10e4b09f7907dd14c2"}, {"code": "(fn [s n]\n  (mapcat (fn [x] (repeat n x)) s))\n\n\n; (fn [s n] (apply interleave (repeat n s)))", "problem": 33, "user": "4f849f76e4b033992c121c36"}, {"code": "(fn [lst cnt] (mapcat #(repeat cnt %) lst))", "problem": 33, "user": "53767991e4b06839e8705e25"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "4e749e84535d7a570dd295b9"}, {"code": "(fn fo3\n      [lis reps]\n      (apply concat (map\n           (fn [elem] (concat [] (for [x (range reps)] elem)))\n           lis\n       ))\n  )", "problem": 33, "user": "53736f65e4b06d7f452d9e0f"}, {"code": ";(fn rep[x y](mapcat #(repeat y %) x))\n#(mapcat (partial repeat %2) %)", "problem": 33, "user": "534d639ae4b084c2834f4a9e"}, {"code": "(fn [coll n]\n    (mapcat #(repeat n %) coll))", "problem": 33, "user": "537bde5de4b06839e8705e73"}, {"code": "(fn [lst n]\n\t(apply concat (map #(repeat n %) lst)))", "problem": 33, "user": "537d4a69e4b06839e8705e8a"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "536b2048e4b0243289761eb7"}, {"code": "(fn [x y] (reduce #(concat %1 (repeat y %2)) [] x))", "problem": 33, "user": "525cc912e4b0cb4875a45d48"}, {"code": "(fn [l num-copies]\n  (apply concat (map #(repeat num-copies %) l)))", "problem": 33, "user": "514a3fa5e4b0829bd132edb6"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "537f4652e4b06839e8705eb1"}, {"code": "(fn [coll cnt] (mapcat #(repeat cnt %) coll))", "problem": 33, "user": "53778b90e4b06839e8705e36"}, {"code": "(fn myreplicate [seq n]\n  (loop [seq seq\n         res []]\n    (if (empty? seq) res\n      (recur (rest seq) (concat res (repeat n (first seq)))))))", "problem": 33, "user": "53733312e4b06d7f452d9e0a"}, {"code": "(fn [xs n]\n  (for [x xs i (range n)] x))", "problem": 33, "user": "53800d99e4b06839e8705ebd"}, {"code": "(fn[x n] (apply concat (map #(repeat n %1) x)))", "problem": 33, "user": "53806e5be4b06839e8705ec1"}, {"code": "(fn [xs n] (reduce (fn [acc x] (into acc (repeat n x))) [] xs))", "problem": 33, "user": "52e55e16e4b09f7907dd1460"}, {"code": "#(apply concat (map (partial repeat %2) %1))", "problem": 33, "user": "53820087e4b06839e8705ecf"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "537f6df1e4b06839e8705eb5"}, {"code": "(fn [coll r] (mapcat #(take r (repeat %)) coll))", "problem": 33, "user": "537e860ae4b06839e8705ea7"}, {"code": "(fn [c t] \n   (mapcat #(repeat t %) c))", "problem": 33, "user": "537d6d44e4b06839e8705e8c"}, {"code": "(fn [col, n]\n  (mapcat (fn [x] (repeat n x)) col)\n   )", "problem": 33, "user": "4f7cbf4ae4b06e829148e1b7"}, {"code": "#(apply concat (map (fn [coll] (repeat %2 coll)) %1))", "problem": 33, "user": "536c99c5e4b0fc7073fd6e46"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "53834ed3e4b06839e8705edb"}, {"code": "(fn [x y] \n  (let [C (#(fn [x] (repeat % x)) y)] \n    (reduce (fn [y x] (concat y  (C x))) [] x)))", "problem": 33, "user": "536c77f1e4b0fc7073fd6e3f"}, {"code": "(fn replicate-seq [s n]\n  (apply concat (map #(repeat n %1) s)))", "problem": 33, "user": "52b71bd2e4b0c58976d9ad4d"}, {"code": ";; First attempt: I'm pretty sure there's some fundamental sequence thing I'm just not getting.\n;; (fn [c2 n2] (reduce concat [] ((fn [coll n] (map #(repeat n %) coll)) c2  n2)))\n#(apply (if (= 1 %2) identity interleave) (repeat %2 %1))", "problem": 33, "user": "536b9d8ae4b0243289761ebe"}, {"code": "(fn [coll x] \n  (reduce concat \n          (map #(repeat x %1) coll)))", "problem": 33, "user": "5372eaf2e4b06d7f452d9e03"}, {"code": "#(mapcat identity (reduce (fn [a b] (conj a (repeat %2 b))) [] %1))", "problem": 33, "user": "519e70d5e4b0acf32bc6a42c"}, {"code": "(fn rep [a s r] (if (empty? s) a (rep (concat a (repeat r (first s)) ) (rest s) r ))) '()", "problem": 33, "user": "537a1012e4b06839e8705e5c"}, {"code": "(fn a [x y] (reduce #(apply conj % %2) [] (map (fn [a] (repeat y a)) x )))", "problem": 33, "user": "537bca8be4b06839e8705e71"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %1 )", "problem": 33, "user": "538538b2e4b06839e8705efe"}, {"code": "(fn [lst n]\n  (if (= n 1)\n    lst\n    (apply interleave (repeat n lst))))", "problem": 33, "user": "5374adc3e4b06d7f452d9e27"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "537f9e34e4b06839e8705ebb"}, {"code": "(fn repseq [s0 n0]\n    (loop [res []\n           s s0\n           n n0]\n        (if (empty? s)\n          res\n          (recur (concat res ((fn rep [x y]\n  (loop [res []\n         element x\n         number y]\n    (if (= number 0)\n      res\n      (recur (cons x res) x (dec number)))))\n \n                              \n                              (first s) n)) (rest s) n))))", "problem": 33, "user": "531bad96e4b08068f379ed93"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "problem": 33, "user": "53871d06e4b06839e8705f19"}, {"code": "(fn [arg nb]\n  (loop [li arg\n         res (empty arg)]\n    (if (empty? li)\n      res\n      (recur (rest li) (concat res (take nb (repeat (first li))))))))", "problem": 33, "user": "537881a4e4b06839e8705e46"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "5360f043e4b0243289761e3c"}, {"code": "(fn [seqn n]\n  (apply concat (map #(vec (repeat n %)) seqn)))", "problem": 33, "user": "53889587e4b0640c7a9a589e"}, {"code": "(fn replicate [[h & t] n]\n  (concat (repeat n h) (if t (replicate t n))))", "problem": 33, "user": "538557aee4b06839e8705f02"}, {"code": "(fn [seqs times]\n  (mapcat #(take times (iterate identity %)) seqs))", "problem": 33, "user": "536f871de4b0fc7073fd6e7f"}, {"code": "(fn replciate_c [aSeq times]\n  ((fn iter [result curTimes remainedList]\n    (if (empty? remainedList)\n      result\n      (if (= curTimes times)\n        (iter\n          result\n          0\n          (rest remainedList))\n        (iter\n          (conj result (first remainedList))\n          (inc curTimes)\n          remainedList)))) [] 0 aSeq))", "problem": 33, "user": "5379ed48e4b06839e8705e5a"}, {"code": "#(if (> %2 1) (apply interleave (replicate  %2 %1)) %1 )", "problem": 33, "user": "534eecaee4b084c2834f4abf"}, {"code": "#(mapcat (fn [r] (repeat %2 r)) %1)", "problem": 33, "user": "537943c0e4b06839e8705e52"}, {"code": "(fn [c, n] (mapcat #(repeat n %1) c))", "problem": 33, "user": "538b6326e4b0640c7a9a58c2"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "4f7426fde4b044e54cd9a8f5"}, {"code": "(fn [coll times] (mapcat (fn [e] (repeat times e)) coll))", "problem": 33, "user": "538b1644e4b0640c7a9a58c0"}, {"code": "#(apply concat (for [x %1] (repeat %2 x)))", "problem": 33, "user": "53838742e4b06839e8705ee0"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "53572767e4b04ce2eb3ed277"}, {"code": "(fn [x y](if (== 1 y) x (apply interleave (repeat y x))))", "problem": 33, "user": "51dd5d6fe4b0c33a4e1da406"}, {"code": "(fn [coll n] (apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "538ca67be4b0b51d73faae60"}, {"code": "(fn [items times]\n  (apply concat (map #(repeat times %) items))\n  )", "problem": 33, "user": "5368fedee4b0243289761e93"}, {"code": "(fn [val n] (mapcat #(repeat n %) val))", "problem": 33, "user": "534d5ab7e4b084c2834f4a9c"}, {"code": "(fn [xs m] (reduce #(concat % (repeat m %2)) [] xs))", "problem": 33, "user": "53403110e4b085b17e897da6"}, {"code": "(fn [s n]\n  (apply concat (map #(take n (repeat %)) s)))", "problem": 33, "user": "538be6afe4b0640c7a9a58c9"}, {"code": "#(if (= 1 %2) %1 (apply interleave (repeat %2 %1)))", "problem": 33, "user": "53410c24e4b00652c8746eca"}, {"code": "(fn [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "511688d5e4b0b3e208dba05a"}, {"code": "(fn [x v]\n  (loop [x x\n         result []]\n    (if (empty? x)\n      result\n      (recur (rest x) (apply conj result (take v (iterate identity (first x))))))\n    ))", "problem": 33, "user": "538d464ee4b0b51d73faae69"}, {"code": "(fn [x y] (reduce concat (for [j (range (count x))] (for [i (range y)] (nth x j)))))", "problem": 33, "user": "53874820e4b06839e8705f1b"}, {"code": "(fn[sequ n] \n  (mapcat \n   (fn[x](repeat n x)) sequ\n   )\n  )", "problem": 33, "user": "53863845e4b06839e8705f0f"}, {"code": "(fn [s t]( mapcat #(repeat t %) s ))", "problem": 33, "user": "53852e84e4b06839e8705efd"}, {"code": "(fn [coll n]\n  (mapcat #(take n (repeat %)) coll)\n  )", "problem": 33, "user": "536827f1e4b0243289761e8a"}, {"code": "(fn [l n] (mapcat #(take n (iterate identity %)) l))", "problem": 33, "user": "538e29d1e4b0b51d73faae80"}, {"code": "(fn R [l n]\n  (apply concat (map #(repeat n %) l)))", "problem": 33, "user": "51a4416ae4b0def3c5c5868c"}, {"code": "#(reduce (fn [r x]\n           (loop [r r n %2]\n             (if (= n 0) r\n               (recur (conj r x) (- n 1)))))\n         [] %1)", "problem": 33, "user": "538d8bb8e4b0b51d73faae71"}, {"code": "#(if (= 1 %2) %1 (apply interleave (repeat %2 %1)))", "problem": 33, "user": "528e7433e4b0239c8a67aedf"}, {"code": "(fn [l n] (mapcat #(repeat n %) l))", "problem": 33, "user": "4fe8a1f8e4b07c9f6fd12c5f"}, {"code": "(fn [seq reps]\n  (reduce concat \n          (map \n           (fn [e] (repeat reps e)) \n           seq)))", "problem": 33, "user": "538c3424e4b0b51d73faae58"}, {"code": "(fn [s n] (apply concat (map #(repeat n %) s)))", "problem": 33, "user": "53886d2fe4b0640c7a9a589d"}, {"code": "(fn dup[x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "538de891e4b0b51d73faae78"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "530bf87ee4b02e82168697d5"}, {"code": "#(reduce (fn [ls el]\n           (into ls (repeat %2 el)))\n         [] %1)", "problem": 33, "user": "5390952be4b0b51d73faae9c"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "524ad140e4b09eba1c0223a9"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "535aee3be4b04ce2eb3ed2aa"}, {"code": "(fn [xs n]\n  (mapcat #(repeat n %) xs))", "problem": 33, "user": "5383668ee4b06839e8705edd"}, {"code": "(fn [coll n]\n\t(apply concat (map #(repeat n %) coll)))", "problem": 33, "user": "539378fbe4b0b51d73faaebd"}, {"code": "(fn [l c] (mapcat #(repeatedly c (constantly %)) l))", "problem": 33, "user": "5392b849e4b0b51d73faaeb1"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "5394aa77e4b0b51d73faaecd"}, {"code": "(fn [l n] (mapcat #(repeat n %) l))", "problem": 33, "user": "510ec1bce4b07438aa321461"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "53940789e4b0b51d73faaec3"}, {"code": "#(apply concat (map (fn [x] (repeat %2 x)) %1))", "problem": 33, "user": "528410bbe4b0239c8a67adc2"}, {"code": "#(reduce \n  (fn [e1 e2] \n    ( apply conj e1 (repeat %2 e2))) '[] %1)", "problem": 33, "user": "5364ab34e4b0243289761e64"}, {"code": "(fn [x y] (apply concat (map #(take y (repeat %)) x)))", "problem": 33, "user": "53906b89e4b0b51d73faae99"}, {"code": "(fn [input n]\n    (loop [i input dst []]\n        (if (empty? i) dst\n            (recur (rest i) (concat dst (repeat n (first i))))\n            )\n        )\n    )", "problem": 33, "user": "539755d9e4b0b51d73faaee8"}, {"code": "(fn [l t]\n  (apply concat\n    (map #(take t (repeat %)) l)\n  )\n)", "problem": 33, "user": "53979a87e4b0b51d73faaef0"}, {"code": "(fn  [lst times]\n  (loop [rm (seq lst), acc (vector), t times]\n    (cond (= 0 t) (recur (rest rm) acc times)\n          (empty? rm) (seq acc)\n          :esle (recur rm (conj acc (first rm)) (dec t)))))", "problem": 33, "user": "538e36c7e4b0b51d73faae81"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "problem": 33, "user": "53976599e4b0b51d73faaeea"}, {"code": "#(apply concat (map (partial repeat %2) %))", "problem": 33, "user": "536de1c3e4b0fc7073fd6e64"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "53973e7be4b0b51d73faaee6"}, {"code": "(fn replic [coll times]\n  (when-let [[f & r] (seq coll)]\n    (concat (repeat times f) (replic r times))))", "problem": 33, "user": "539a2901e4b0b51d73faaf0f"}, {"code": "(fn [l reps]\n  (reduce (fn [result element]\n             (concat (take reps (repeat element)) result))\n             '()\n             (reverse l)))", "problem": 33, "user": "538c6db7e4b0b51d73faae5a"}, {"code": "(fn [coll n] (mapcat #(concat (repeat n %)) coll))", "problem": 33, "user": "539ad6b7e4b0b51d73faaf18"}, {"code": "(fn [s n] (mapcat #(take n (repeat %)) s))", "problem": 33, "user": "539b6c78e4b0b51d73faaf20"}, {"code": "(fn dd [[f & n] r]\n  (let [fr (repeat r f)]\n  \t(if (empty? n)\n      fr\n      (concat fr (dd n r)))))", "problem": 33, "user": "53908e6be4b0b51d73faae9a"}, {"code": "(fn [x n] (mapcat #(repeat n %) x))", "problem": 33, "user": "5398305fe4b0b51d73faaef6"}, {"code": "(fn [xs n] (apply concat (for [x xs] (take n (repeat x)))))", "problem": 33, "user": "539b5fcee4b0b51d73faaf1e"}, {"code": "#(into [] (for [x % n (range %2)] x))", "problem": 33, "user": "531ccb1fe4b08068f379eda7"}, {"code": "(fn duplicator \n  [s n]\n  (mapcat (fn [i] (repeat n i)) s ))", "problem": 33, "user": "53951c75e4b0b51d73faaed4"}, {"code": "#(mapcat (partial replicate %2) %1)", "problem": 33, "user": "53948e96e4b0b51d73faaecc"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %)", "problem": 33, "user": "5394265ee4b0b51d73faaec6"}, {"code": "#(mapcat (partial repeat %2) %)", "problem": 33, "user": "539cacbde4b0b51d73faaf2f"}, {"code": "#(mapcat (fn [x] (repeat %2 x)) %)", "problem": 33, "user": "538fe131e4b0b51d73faae91"}, {"code": "(fn [c n] (mapcat #(take n (repeat %)) c))", "problem": 33, "user": "539c64cde4b0b51d73faaf2a"}, {"code": "(fn [xs n] (mapcat #(repeat n %) xs))", "problem": 33, "user": "539ddf25e4b0b51d73faaf3e"}, {"code": "#(mapcat (partial repeat %2) %1)", "problem": 33, "user": "536c1531e4b0fc7073fd6e36"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "50b63c5ee4b0a86f8358ca69"}, {"code": "#(for [a %1 b (range %2)] a)", "problem": 33, "user": "539ec9f9e4b0ca733b974491"}, {"code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "problem": 33, "user": "536e5055e4b0fc7073fd6e6b"}, {"code": "(fn [coll times]\n  (reduce #(concat %1 (repeat times %2)) [] coll))", "problem": 33, "user": "53862316e4b06839e8705f0e"}, {"code": "(fn [xs n]\n   (mapcat #(repeat n %) xs))", "problem": 33, "user": "5327c591e4b09d4e7a9b54ff"}, {"code": "(fn [s, n] (mapcat #(repeat n %) s))", "problem": 33, "user": "53a0ce51e4b0ca733b9744b6"}, {"code": "(fn rep [coll n] (mapcat #(replicate n %) coll))", "problem": 33, "user": "53710c09e4b0fc7073fd6ea5"}, {"code": "(fn [x y] (mapcat #(vec (repeat y %)) x))", "problem": 33, "user": "539b4268e4b0b51d73faaf1c"}, {"code": "(fn [x n] (reduce #( concat %1 (take n (repeat %2))) '() x))", "problem": 33, "user": "539c9e26e4b0b51d73faaf2e"}, {"code": "(fn d [col n]\n    (cond (empty? col) col\n          :elth (concat (repeat n (first col)) (d (rest col) n))))", "problem": 33, "user": "53858594e4b06839e8705f05"}, {"code": "(fn [coll n] (mapcat #(repeat n %) coll))", "problem": 33, "user": "5376f0d0e4b06839e8705e2c"}, {"code": "(fn [coll r]\n   (mapcat #(if (sequential? %) % [%]) (apply map vector (take r (repeat coll)))))", "problem": 33, "user": "52c49401e4b0c2d177d620de"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "538e864ee4b0b51d73faae87"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "537e104ce4b06839e8705e9a"}, {"code": "(fn [s n] (mapcat (fn [i] (repeatedly n #(identity i))) s))", "problem": 33, "user": "53a3edfce4b0f1fc7453883b"}, {"code": "(fn [a-seq n] (apply concat (map (partial repeat n) a-seq)))", "problem": 33, "user": "52d885afe4b09f7907dd1398"}, {"code": "(fn replicate-seq [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "53a065c2e4b0ca733b9744ad"}, {"code": "(fn [l n]\n  (mapcat #(take n (repeat %)) l\n  )\n)", "problem": 33, "user": "53a36fd7e4b0f1fc74538834"}, {"code": "(fn [s n]\n   (mapcat #(repeat n %1) s))", "problem": 33, "user": "52fac708e4b047fd55836fff"}, {"code": "#(loop [coll  %1\n         times %2\n         ncoll []] (if (empty? coll)\n                    ncoll\n                    (let [elem (first coll)\n                        tail (rest coll)] (recur tail times (concat ncoll ((fn rep [elem times coll] \n                                                                             (if (= times 1) \n                                                                               (concat coll [elem]) \n                                                                               (rep elem (dec times) (concat coll [elem])))) \n                                                                           elem times []))))))", "problem": 33, "user": "539f3397e4b0ca733b974496"}, {"code": "(fn repeat-first [nums n] \n         (if (first nums)\n                   (concat (repeat n (first nums))\n                         (repeat-first (rest nums) n))\n                   (list)))", "problem": 33, "user": "53a26cede4b0f1fc7453882a"}, {"code": "(fn [xs n]\n    (mapcat #(take n (repeat %)) xs))", "problem": 33, "user": "52e657e4e4b09f7907dd1472"}, {"code": "(fn [s n] (mapcat #(repeat n %) s))", "problem": 33, "user": "53a5737ee4b0b62ce300573a"}, {"code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "problem": 33, "user": "537e59ffe4b06839e8705ea3"}, {"problem": 33, "code": "(fn [s t]\n    (apply concat (map #(repeat t %) s)))", "user": "53a777f9e4b047364c04441c"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "53a07aa7e4b0ca733b9744b0"}, {"problem": 33, "code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "user": "5396c94be4b0b51d73faaee3"}, {"problem": 33, "code": "(fn [lst times] \n  (mapcat (fn [x] (take times (list x x x x x x))) lst))", "user": "53a5c7ffe4b0ef122a8689c4"}, {"problem": 33, "code": "#(apply concat ((fn [a b] (map (partial repeat b) a)) %1 %2))", "user": "53a2be95e4b0f1fc7453882d"}, {"problem": 33, "code": "(fn [s n] (reduce #(concat %1 (repeat n %2)) [] s))", "user": "4f041de1535dcb61093f6ba5"}, {"problem": 33, "code": "(fn [x i] (apply concat (map #(repeat i %) x)))", "user": "53a739b0e4b0ef122a8689d0"}, {"problem": 33, "code": "(fn [coll n] \n  (mapcat #(repeat n %) coll))", "user": "53a8d9efe4b047364c04442d"}, {"problem": 33, "code": "(fn [s x]\n  (mapcat #(repeat x %) s))", "user": "539f4e9ee4b0ca733b974498"}, {"problem": 33, "code": "(fn [coll n] (reduce #(concat %1 (for [x (range n)] %2)) () coll))", "user": "53a1b5c8e4b0ca733b9744c1"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "53aa1528e4b047364c04443f"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "53a19dece4b0ca733b9744c0"}, {"problem": 33, "code": "(fn [xs n]\n  (loop [xs xs\n         i n\n         acc []]\n    (cond\n     (empty? xs) acc\n     (zero? i) (recur (rest xs) n acc)\n     :else (recur xs (dec i) (conj acc (first xs))))))", "user": "51c116d4e4b0c9c822882942"}, {"problem": 33, "code": "(fn\n  [to-replicate times]\n  (if (= times 1)\n    to-replicate\n    (apply interleave (take times (repeat to-replicate)))))", "user": "53ac4719e4b047364c04445c"}, {"problem": 33, "code": "(fn [s n] (reduce #(into %1 (take n (repeat %2))) [] s))", "user": "53a94b63e4b047364c044434"}, {"problem": 33, "code": "(fn [coll n]\n  (loop [[head & tail] \tcoll\n         result \t \t[]]\n    (if head \n      (recur \n       \ttail \n       \t(apply conj (cons result \n                          (take n (repeat head))))\n      )\n      result\n    )\n   )\n )", "user": "53ac0e52e4b047364c044457"}, {"problem": 33, "code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "user": "53a7e3b9e4b047364c044423"}, {"problem": 33, "code": "(fn [l n]\n  (reverse (reduce \n   (fn [a c] \n     (apply \n      (partial conj a) (replicate n c)))\n   '()\n   l)))", "user": "53a5bc3ae4b0ef122a8689c3"}, {"problem": 33, "code": "(fn  [xs n]\n    (reduce (fn [acc elem] \n               (into acc (for [x (range 1 (inc n))]  elem) )) [] xs))", "user": "52d24f60e4b099d49816f0a8"}, {"problem": 33, "code": "(fn [l r] (apply concat (map #(repeat r %) l)))", "user": "53aaaf7ae4b047364c044444"}, {"problem": 33, "code": "(fn [coll, times]\n  (if (= times 1)\n    coll\n    (apply interleave (repeat times coll))\n    )\n  )", "user": "53ae16e2e4b047364c044472"}, {"problem": 33, "code": "#(apply (partial mapcat list) (repeat %2 %1))", "user": "526e5159e4b03e8d9a4a7316"}, {"problem": 33, "code": "(fn aaz [x y]\n    (reduce #(concat % (repeat y %2)) [] x))", "user": "53abf519e4b047364c044456"}, {"problem": 33, "code": "(fn [x y]\n  (mapcat #(repeat y %) x))", "user": "51bf0ccee4b013aa0d74b811"}, {"problem": 33, "code": "#(if (= %2 1) % (apply interleave (repeat %2 %)) )", "user": "53b15e6ee4b047364c04448f"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "53a0ab8ce4b0ca733b9744b3"}, {"problem": 33, "code": "(fn [s n] \n  (mapcat #(repeat n %) s))", "user": "53a7771ee4b047364c04441b"}, {"problem": 33, "code": "(fn [x n] (apply concat (map #(repeat n %) x)))", "user": "538f4c1de4b0b51d73faae8c"}, {"problem": 33, "code": "(fn repli [x y] (apply concat (map #(repeat y %) x)))", "user": "53b12c76e4b047364c04448a"}, {"problem": 33, "code": "#(if (not (= %2 1))\n    (apply interleave (take %2 (repeat %)))\n    %)", "user": "4feded14e4b0d2a5fc2962ec"}, {"problem": 33, "code": "(fn [coll n]\n   (loop [acc '()\n        coll coll]\n   (if-let [f (first coll)]\n     (recur (concat acc (repeat n f)) (rest coll))\n     acc\n     )\n   ))", "user": "5245e320e4b09dbe66b56177"}, {"problem": 33, "code": "(fn [col n] \n  (mapcat #(repeat n %) col))", "user": "509fda73e4b08df8156e9e41"}, {"problem": 33, "code": "(fn [coll n] \r\n    (reduce #(apply conj %1 (repeat n %2)) [] coll))", "user": "53acca34e4b047364c044460"}, {"problem": 33, "code": "#(if (= %2 1)\n   (seq %)\n   (apply interleave (repeat %2 %)))", "user": "5189a51ae4b0288ada3dbdad"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "53ae0c50e4b047364c044471"}, {"problem": 33, "code": "(fn [s n] (reduce #(into %1 (repeat n %2)) [] s))", "user": "53b182a5e4b047364c044491"}, {"problem": 33, "code": "(fn [l n] (reduce (fn [a x] (concat a (repeat n x))) [] l))", "user": "5329b493e4b09d4e7a9b5515"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5154c361e4b0179c5115f4e3"}, {"problem": 33, "code": "(fn rep [li nr]\n     (when-let [[h & re] li]\n         (into (rep re nr) (repeat nr h))))", "user": "53b42b9ce4b047364c0444b3"}, {"problem": 33, "code": "#(mapcat (fn [e] (repeat %2 e)) %1)", "user": "53acaf1fe4b047364c04445f"}, {"problem": 33, "code": "(fn [s n] (mapcat identity (map #(repeat n %) s)) )", "user": "52f0ea04e4b05e3f0be25ee6"}, {"problem": 33, "code": "#(reduce (fn [coll x] (into coll (repeat %2 x) ) ) [] %1)", "user": "53ac4c6fe4b047364c04445d"}, {"problem": 33, "code": "(fn [y x] (reduce concat ( map (fn [a] (take x (repeat a))) y)))", "user": "53ad28ede4b047364c044462"}, {"problem": 33, "code": "#(if (= 1 %2) %1 (apply interleave (repeat %2 %1)))", "user": "52d07cc5e4b07d0d72b273bb"}, {"problem": 33, "code": "(fn [s n] (loop [h (first s) t (rest s) r ()] \n            (if (= nil h) (reverse r) \n              (recur (first t) (rest t)   (concat (repeat n h) r)) )) )", "user": "53b3ea79e4b047364c0444ab"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))\n\n;(fn [coll n] (mapcat #(take n (cycle [%])) coll))", "user": "53a074a4e4b0ca733b9744af"}, {"problem": 33, "code": "(fn rplct [s c]\n  (mapcat #(repeat c %) s))", "user": "53b39d82e4b047364c0444a6"}, {"problem": 33, "code": "(fn [lst n]\n  (apply concat (map #(repeat n %) lst)))", "user": "53b780b8e4b047364c0444cf"}, {"problem": 33, "code": "(fn [s r] (mapcat (partial repeat r) s))", "user": "50232eeae4b0b5d8b1bd2397"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "53b71b94e4b047364c0444cd"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "5382704be4b06839e8705ed4"}, {"problem": 33, "code": "(fn [lst cnt] (mapcat #(repeat cnt %) lst))", "user": "539fa040e4b0ca733b97449f"}, {"problem": 33, "code": "(fn [ls n] (reduce concat (map #(repeat n %) ls)))", "user": "53b8b37be4b047364c0444e1"}, {"problem": 33, "code": "(fn [xs num] (apply concat (map #(repeat num %) xs)))", "user": "504f5804e4b0a02f9cffde72"}, {"problem": 33, "code": "(fn [l n] (mapcat #(repeat n %) l))", "user": "539c88e1e4b0b51d73faaf2c"}, {"problem": 33, "code": "(fn [sq n]\n     (mapcat (fn [e]\n                 (loop [i n\n                          f []]\n                       (if (zero? i)\n                         f\n                         (recur (dec i) (conj f e)))))\n             sq))", "user": "4f867b25e4b033992c121c51"}, {"problem": 33, "code": "#(for [x %1 y (repeat %2 x)] y)", "user": "53b4bddae4b047364c0444b9"}, {"problem": 33, "code": "(fn [v n] \n  (if (= 1 n) \n    v \n    (apply interleave (take n (repeat v)))))", "user": "52e8ee9ae4b09f7907dd14a1"}, {"problem": 33, "code": "(fn [l n] (mapcat #(repeat n %1) l))", "user": "53b2a7f8e4b047364c04449c"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "53b7c21ae4b047364c0444d4"}, {"problem": 33, "code": "#(loop [acc '() [x & xs] %]\n   (if (nil? x) acc\n     (recur (concat acc (repeat %2 x)) xs)))", "user": "5310e968e4b08068f379ecdd"}, {"problem": 33, "code": "(fn [ar n] (mapcat #(repeat n %) ar))", "user": "53bb512ce4b047364c044503"}, {"problem": 33, "code": "#(if (< %2 2) %1 (apply interleave (take %2 (repeat %1))))", "user": "53aeb3ebe4b047364c044477"}, {"problem": 33, "code": "(fn [s n]\n  (reverse (reduce into (map #(repeat n %) s)))\n )", "user": "53bd6fcfe4b0d9a98559a6d0"}, {"problem": 33, "code": ";;#(apply concat (map (fn [input](repeat %2 input)) %1))\n#(mapcat (fn [input](repeat %2 input)) %1)", "user": "53be3ee7e4b0d9a98559a6df"}, {"problem": 33, "code": "(fn replication\n  [coll n]\n  (if (= n 1)\n    coll\n    (recur (interleave coll coll) (/ n 2))))", "user": "53940b5ee4b0b51d73faaec4"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %)", "user": "53aef31ce4b047364c04447b"}, {"problem": 33, "code": "(fn my-rep [coll n]\n  (mapcat #(repeat n %) coll))", "user": "53bf0913e4b0c98a41f5cc99"}, {"problem": 33, "code": "(fn ReplicateSequence [seq n]\n  (loop [out nil\n         in seq]\n    (if (empty? in)\n      out\n      (recur (concat out \n                     (repeat n (first in)))\n             (rest in)))))", "user": "53b88e6ee4b047364c0444de"}, {"problem": 33, "code": "(fn [coll cnt]\n  (loop [input coll output []]\n    (if (empty? input)\n      output\n      (recur (rest input) (apply conj output (take cnt (repeat (first input))))))))", "user": "53beacf9e4b0d9a98559a6e3"}, {"problem": 33, "code": "#(mapcat (fn [input](repeat %2 input)) %1)", "user": "53bf0587e4b0c98a41f5cc98"}, {"problem": 33, "code": "(fn repl [xs n] (if (empty? xs)\n                  ()\n                  (concat ((fn repeatn [a i] (if (= i 0)\n                                                ()\n                                                (cons a (repeatn a (- i 1))))) (first xs) n)\n                          (repl (rest xs) n))))", "user": "53c051a5e4b0c98a41f5ccae"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "52b434c9e4b0c58976d9ad1c"}, {"problem": 33, "code": "(fn [s n]\n  (reduce #(concat %1 %2) (map #(repeat n %) s))\n  )", "user": "53c1ce3ee4b00fb29b221268"}, {"problem": 33, "code": "(fn [x n] (mapcat #(take n (repeat %)) x))", "user": "53bd8d27e4b0d9a98559a6d6"}, {"problem": 33, "code": "(fn [col n]\n  (mapcat #(repeat n %) col))", "user": "53b22df6e4b047364c044497"}, {"problem": 33, "code": "(fn dup-seq-n [u n]\n  (loop [i 0\n         x '()]\n    (if (= i (count u))\n      x\n      (recur (+ i 1)\n             (concat x (repeat n (nth u i)))))))", "user": "5018878ce4b029375d2a5056"}, {"problem": 33, "code": "(fn [x y] (if (> y 1) (apply interleave (take y (repeat x))) x))", "user": "539c9d7ee4b0b51d73faaf2d"}, {"problem": 33, "code": "(fn [items n] (mapcat (partial repeat n) items))", "user": "53c545ede4b00fb29b22128c"}, {"problem": 33, "code": "(fn replicate-each [coll times]\n  (let [replicator (fn [subj times]\n                     (reduce (fn [a b] (conj a subj)) [] (range times)))]\n    (apply concat (reduce (fn [a b] (conj a (replicator b times))) [] coll))))", "user": "53b4344de4b047364c0444b4"}, {"problem": 33, "code": "(fn [coll times] (mapcat #(repeat times %) coll))", "user": "53c38b8ce4b00fb29b22127b"}, {"problem": 33, "code": "(fn [s n] (apply concat (for [ e s ] (repeat n e))) )", "user": "52ccc2bde4b07d0d72b27371"}, {"problem": 33, "code": "(fn [xs n]\n    (if (> n 1)\n      (apply interleave (repeat n xs))\n      xs))", "user": "53c3397be4b00fb29b221279"}, {"problem": 33, "code": "(fn [x y]\n  (apply concat\n         (map #(repeat y %) x)))", "user": "53c74cfce4b00fb29b2212a7"}, {"problem": 33, "code": "#(if (= 1 %2) %1 (apply interleave (repeat %2 %1)))", "user": "538db083e4b0b51d73faae74"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce #(into %1 (repeat n %2)) [] coll))", "user": "53cb321fe4b00fb29b2212d1"}, {"problem": 33, "code": "#(mapcat (fn [a] (repeat %2 a)) %1)", "user": "53cacdb5e4b00fb29b2212cb"}, {"problem": 33, "code": "(fn my-replicate [coll n]\n  (reduce concat (map #(take n (repeat %)) coll)))", "user": "53c126fce4b00fb29b22125b"}, {"problem": 33, "code": "(fn [a b] (mapcat #(repeat b %) a))", "user": "4e587e78535d8a8b8723a293"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "53ced9fee4b00fb29b2212f8"}, {"problem": 33, "code": "(fn [coll count] (mapcat (fn [x] (repeat count x)) coll))", "user": "5227eacee4b0186687e23a5e"}, {"problem": 33, "code": "(fn [s t] (mapcat #(repeat t %) s))", "user": "53cd4920e4b00fb29b2212de"}, {"problem": 33, "code": "(fn [x y] (mapcat #(take y (repeat %)) x))", "user": "53cdb2c4e4b00fb29b2212e5"}, {"problem": 33, "code": "(fn [xs n]\n  (mapcat #(repeat n %) xs))", "user": "51b8d3d5e4b050a1176cd69d"}, {"problem": 33, "code": "(fn [coll times]\n  (reduce into [] (map #(repeat times %) coll)))", "user": "53ca41dae4b00fb29b2212c8"}, {"problem": 33, "code": "(fn [l v] (reduce (fn [accume n] (loop [a accume p 0] (if (< p v) (recur (conj a n) (inc p)) a))) [] l))", "user": "5256a1d4e4b0541d1855ba29"}, {"problem": 33, "code": "(fn [xs n]\n    (reduce  #(concat %1 (for [i (range n)]\n              %2)) [] xs)\n \n \n )", "user": "53ca23e3e4b00fb29b2212c6"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat (partial replicate n) coll))", "user": "53b05a36e4b047364c044481"}, {"problem": 33, "code": "(fn [seq times] (reduce concat (for [x seq] (take times (repeat x)))))", "user": "53b952eee4b047364c0444e6"}, {"problem": 33, "code": "(fn [x n]\n   (reduce #(concat % (repeat n %2)) [] x)\n   )", "user": "51c8f1d8e4b07ef393169e5d"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "53d6cf90e4b0e771c302545c"}, {"problem": 33, "code": "(fn replic [l n] \n  (mapcat #(repeat n %1) l))", "user": "53ad2bbbe4b047364c044464"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat (partial repeat n) coll))", "user": "53d78b64e4b0e771c3025466"}, {"problem": 33, "code": "(fn dup [coll times]\n  (reduce concat (map #(repeat times %) coll)))", "user": "53d70f3be4b0e771c302545f"}, {"problem": 33, "code": "(fn [myList n]\n  (mapcat #(take n (cycle [%1])) myList)\n)", "user": "51ad808ee4b09397d5109784"}, {"problem": 33, "code": "#(apply concat (for [x %] (take %2 (repeat x))))", "user": "51febd40e4b0f1313d468a76"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "53d91412e4b0e771c3025474"}, {"problem": 33, "code": "(fn [input counter] (loop [inputx input counterx counter seq_counter 0 output []] (\n\tif (= seq_counter (count input))\n\t(lazy-seq output)\n\t(recur inputx \n\t\tcounter \n\t\t(inc seq_counter)\n\t\t(apply conj output (into [] (map (fn [x] (get inputx seq_counter))(range counterx))))\n))))", "user": "53d5d24de4b0e771c302544a"}, {"problem": 33, "code": "(fn [c i] (reduce #(concat %1 (repeat i %2)) [] c))", "user": "53d5a63be4b0e771c3025449"}, {"problem": 33, "code": "(fn my-replicate [xs n]\n  (mapcat #(repeat n %) xs))", "user": "53b85932e4b047364c0444db"}, {"problem": 33, "code": "(fn\n   [LIST round]\n   (apply concat (into [] (map #(repeat round %) LIST))))", "user": "53d6b266e4b0e771c3025459"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "53d5e45ae4b0e771c302544e"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "53da19fde4b0e771c3025484"}, {"problem": 33, "code": "(fn sequence-replicator [coll n]\n  (reduce #(concat %1 (repeat n %2)) '() coll))", "user": "53d40508e4b00fb29b221332"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat (partial repeat n) coll))", "user": "53ce4cd4e4b00fb29b2212ef"}, {"problem": 33, "code": "(fn [l n]\n      (loop [l1 l n1 n carry '()]\n        (if (empty? l1)\n          carry\n          (recur (rest l1) n1 (concat carry (repeat n1 (first l1)))))\n        \n        ))", "user": "53c6e25ee4b00fb29b2212a4"}, {"problem": 33, "code": "(fn\n  [coll times]\n  (loop [i 0 c coll retval '()]\n    (if (= i (count coll))\n      retval\n      (recur (inc i) (rest c) (concat retval (repeat times (first c)))) )))", "user": "51071f2ee4b05b2b4eee748e"}, {"problem": 33, "code": "(fn [coll cnt]\n  (mapcat (partial repeat cnt) coll))", "user": "53dc94c8e4b094d41abdfefc"}, {"problem": 33, "code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "user": "53d920d9e4b0e771c3025475"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "53cdbad1e4b00fb29b2212e6"}, {"problem": 33, "code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "user": "53dcf474e4b0d874e779ae25"}, {"problem": 33, "code": "#(let [repTimes %2\n        repStr %1]\n    (mapcat (partial repeat repTimes) repStr))", "user": "53da8fede4b0e771c30254a3"}, {"problem": 33, "code": "(fn [c r] (mapcat #(repeat r %) c))", "user": "4e6b8ac8535d8ccf87e9ff19"}, {"problem": 33, "code": "(fn [col n]\n  (if (= n 1)\n    col\n    (apply interleave (repeat n col))))", "user": "53dd37aee4b0d874e779ae28"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "53dcdde4e4b0d874e779ae24"}, {"problem": 33, "code": "(fn dupe\n  ([lst n]       (dupe lst '() n))\n  ([lst dupes n] (if (= '() lst)\n                   dupes\n                   (dupe (rest lst) (concat dupes (replicate n (first lst))) n))))", "user": "53ddd44be4b0d874e779ae2e"}, {"problem": 33, "code": "(fn repseq [s t] (reduce #(concat %1 (repeat t %2)) [] s))", "user": "53de622ce4b0d874e779ae34"}, {"problem": 33, "code": "#(apply mapcat list (take %2 (repeat %1)))", "user": "539dcb24e4b0b51d73faaf3d"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "53968a70e4b0b51d73faaee0"}, {"problem": 33, "code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "user": "53da70a4e4b0e771c302549d"}, {"problem": 33, "code": "(fn repl [x nr]\n  (apply concat \n         (map (fn [i] (repeat nr i)) \n              x)))", "user": "53dfb864e4b0d874e779ae43"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "53d4dadde4b00fb29b221337"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "53dfdf01e4b0d874e779ae46"}, {"problem": 33, "code": "(fn [x n] (mapcat  #(repeat n %) x))", "user": "53d0c837e4b00fb29b22130b"}, {"problem": 33, "code": "(fn fl [col c]\n  (mapcat #(take c (iterate identity %)) col))", "user": "53a83c74e4b047364c044426"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "53d0d7a9e4b00fb29b22130c"}, {"problem": 33, "code": "(fn [s n] (mapcat (fn [i] (repeatedly n #(identity i))) s))", "user": "53e020c3e4b0d874e779ae49"}, {"problem": 33, "code": "(fn my-replicate \n\t\t([s n] (my-replicate n (list) (seq s)))\n\t\t([n new-list rest-seq]\n\t\t\t(if (empty? rest-seq)\n\t\t\t\tnew-list\n\n\t\t\t\t(let [curr-el (last new-list) next-el (first rest-seq) rest-seq (next rest-seq)]\n\t\t\t\t\t(my-replicate n (concat new-list (take n (repeat next-el))) rest-seq)\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)", "user": "53d382d8e4b00fb29b22132a"}, {"problem": 33, "code": "#(mapcat (fn [a] (take %2 (repeat a))) %)", "user": "53dc05d4e4b094d41abdfefa"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "53ded676e4b0d874e779ae3b"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "53e19461e4b0d874e779ae59"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "53e23ab7e4b036ad0777e3ef"}, {"problem": 33, "code": "(fn [x y] (if (= y 1) x (apply interleave (repeat y x))))", "user": "53e2b212e4b036ad0777e3f4"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "53e241a6e4b036ad0777e3f0"}, {"problem": 33, "code": "(fn [c n] \n    (if (> n 1)\n      (apply interleave (repeat n c))\n       c))", "user": "538ca203e4b0b51d73faae5f"}, {"problem": 33, "code": "(fn [l n]\n  (mapcat (partial repeat n) l))", "user": "530bae80e4b02e82168697d0"}, {"problem": 33, "code": "(fn [sqn n] (reduce concat (map #(repeat n %) sqn )))", "user": "53e2ac1ae4b036ad0777e3f3"}, {"problem": 33, "code": "#(mapcat repeat (repeat %2) %1)", "user": "53dadf1de4b0e771c30254ad"}, {"problem": 33, "code": "#( apply concat (map  (fn [input] ( repeat %2 input ) )  %1 ))", "user": "516d227fe4b06f078fab252d"}, {"problem": 33, "code": "(fn [vs n] (mapcat #(repeat n %) vs))", "user": "4eea1a41535d93acb0a66899"}, {"problem": 33, "code": "#(mapcat (fn [x] (take %2 (repeat x))) %1)", "user": "53e4fa2ce4b036ad0777e454"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "53c649d3e4b00fb29b221297"}, {"problem": 33, "code": "(fn [lst reps]\n  (reduce\n    (fn [out el]\n      (concat out (repeat reps el)))\n    '() lst))", "user": "53e66df9e4b036ad0777e472"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "53b293d3e4b047364c04449b"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "53d2afede4b00fb29b221321"}, {"problem": 33, "code": "(fn my-replicate [lyst n]\n  (mapcat #(repeat n %) lyst))", "user": "53e27bf1e4b036ad0777e3f2"}, {"problem": 33, "code": "(fn rep [[first & rest] n] (when first (concat (take n (repeat first)) (lazy-seq (rep rest n)))))", "user": "53d28800e4b00fb29b22131e"}, {"problem": 33, "code": "(fn [v n]\n  (reduce #(concat %1 (repeat n %2)) [] v))", "user": "53e3e852e4b036ad0777e407"}, {"problem": 33, "code": "#(if (= 1 %2) %1 (apply interleave (repeat %2 %1)))", "user": "53e15371e4b0d874e779ae54"}, {"problem": 33, "code": "(fn [l, n] (mapcat #(repeat n %) l))", "user": "53e92821e4b036ad0777e499"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5377a23ce4b06839e8705e39"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "53e3f7a8e4b036ad0777e408"}, {"problem": 33, "code": "(fn [s,n] (mapcat #(repeat n %) s))", "user": "53e150e5e4b0d874e779ae53"}, {"problem": 33, "code": "#(reduce concat (map (partial repeat %2) %1))", "user": "4f856adfe4b033992c121c44"}, {"problem": 33, "code": "(fn [x n] (mapcat (fn [i] (map (fn [j] i) (range n))) x))", "user": "53e91473e4b036ad0777e495"}, {"problem": 33, "code": "(fn [coll times]\n  (if (= times 1) coll (apply interleave (take times (repeat coll)))))", "user": "53dfd77fe4b0d874e779ae45"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "53d88bd5e4b0e771c302546e"}, {"problem": 33, "code": "(fn [lst amt]\n  (mapcat #(take amt (repeat %)) lst))", "user": "53e30fcae4b036ad0777e3fc"}, {"problem": 33, "code": "(fn [list num]\n  \t\t(mapcat #(repeat num %) list))", "user": "52ba2639e4b07a9af57922cb"}, {"problem": 33, "code": "(fn [li rep] (apply concat (map #(repeat rep %) li)))", "user": "53e76bb2e4b036ad0777e47d"}, {"problem": 33, "code": "(fn [x n] (mapcat (partial (fn dupn [n ys] (cond (symbol? ys) (repeat n ys)\n                                        (= n 0) ()\n                                        :else (concat (list ys) (dupn (dec n) ys)))) n)\n             x))", "user": "53e9a15be4b036ad0777e4ae"}, {"problem": 33, "code": "#(apply mapcat list (repeat %2 %1))", "user": "53eb8ceae4b036ad0777e4fb"}, {"problem": 33, "code": "#(apply mapcat list (take %2 (iterate identity %1)))", "user": "53ecac57e4b0d648e757f4b3"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5343753ae4b084c2834f4a1b"}, {"problem": 33, "code": "(fn [s n] (if (> n 1) (apply interleave (repeatedly n #(identity s))) (seq s)))", "user": "53e0001be4b0d874e779ae48"}, {"problem": 33, "code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "user": "53ede8e3e4b0d648e757f4cc"}, {"problem": 33, "code": "(fn [coll n]\n(mapcat #(repeat n %) coll))", "user": "53bf9cfbe4b0c98a41f5cca4"}, {"problem": 33, "code": "(fn [col n] (reduce #(->> (repeat n %2)\n                 \t \t  (concat %1)) [] col))", "user": "53dcb9b2e4b0d874e779ae23"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "53dfbc75e4b0d874e779ae44"}, {"problem": 33, "code": "#(if (= 1 %2)\n   %\n   (apply interleave (repeat %2 %)))", "user": "53ea5307e4b036ad0777e4e2"}, {"problem": 33, "code": "(fn [x n] (apply concat (map #(repeat n %) x)))", "user": "53e92aafe4b036ad0777e49a"}, {"problem": 33, "code": "(fn [coll times] (mapcat #(repeat times %) coll))", "user": "53ee7f2ee4b0d648e757f4cf"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "53217912e4b09d4e7a9b54b3"}, {"problem": 33, "code": "(fn [col n] \n  (mapcat #(repeat n %) col))", "user": "52d5bee0e4b09f7907dd1344"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "user": "53edb464e4b0d648e757f4c7"}, {"problem": 33, "code": "(fn [coll c] (reduce #(concat %1 (repeat c %2)) [] coll))", "user": "53e4b5a3e4b036ad0777e44b"}, {"problem": 33, "code": "(fn [sq n] (mapcat #(repeat n %) sq))", "user": "53ea72b6e4b036ad0777e4e5"}, {"problem": 33, "code": "(fn [a n] (mapcat #(repeat n %) a))", "user": "528d6b10e4b0239c8a67aec3"}, {"problem": 33, "code": "(fn [x y] (for [i x j (range 0 y)]  i))", "user": "53f1c05ee4b0742d9025b0e1"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "53ef3adfe4b0742d9025b0c9"}, {"problem": 33, "code": "(fn [c n]\n  (mapcat #(repeat n %) c))", "user": "523578efe4b0a643f2dcb74c"}, {"problem": 33, "code": "(fn [s n] (mapcat #(take n (repeat %)) s))", "user": "53f035c2e4b0742d9025b0d2"}, {"problem": 33, "code": "#(mapcat identity (map (partial repeat %2) %1))", "user": "53ebd5fee4b036ad0777e4fd"}, {"problem": 33, "code": "(fn[a b]\n  (reduce (fn[x y](apply conj x (repeat b y)))\n         [] a))", "user": "53ed2fafe4b0d648e757f4c1"}, {"problem": 33, "code": "(fn [xs t] (mapcat #(take t( repeat %)) xs))", "user": "53ef78bee4b0742d9025b0cd"}, {"problem": 33, "code": "(fn [a-seq n] \n  (loop [accum () b-seq a-seq]\n    (if (empty? b-seq) accum\n    (let [this-one (first b-seq)]\n      (recur (concat accum (repeat n this-one)) (rest b-seq) )))))", "user": "52fdbf3ae4b047fd55837032"}, {"problem": 33, "code": "(fn [coll n]\n        (loop [coll coll\n               result []]\n          (if (empty? coll)\n            result\n            (recur (rest coll) (concat result (repeat n (first coll))))\n          )\n        )\n      )", "user": "53ecd01fe4b0d648e757f4b9"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "53f35c34e4b0742d9025b0f4"}, {"problem": 33, "code": "(fn replic [xs n]\n  (mapcat #(repeat n %) xs)\n)", "user": "53edb628e4b0d648e757f4c8"}, {"problem": 33, "code": "(fn replicate [x n] (reverse (loop [remaining x count n final-list ()] \n                                 (if (empty? remaining)\n                                   final-list\n                                   (let [[head & tail] remaining\n                                         final-list (conj final-list head)]\n                                     (if (< count 2)\n                                       (recur tail n final-list)\n                                       (recur (conj tail head) (dec count) final-list)))))))", "user": "53f49dfae4b0db01ade6f9c2"}, {"problem": 33, "code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "user": "53e35265e4b036ad0777e400"}, {"problem": 33, "code": "(fn [s, n] (reduce (fn [acc i] (apply conj acc (repeat n i))) [] s))", "user": "53f592b7e4b0db01ade6f9d0"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "537b1083e4b06839e8705e64"}, {"problem": 33, "code": "(fn duplicate [sequence num]\n  (reduce (fn [final_seq element]\n         (concat final_seq (for [x (range num)] element))) [] sequence\n  ))", "user": "53f50c03e4b0db01ade6f9ca"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "53ea3a63e4b036ad0777e4dc"}, {"problem": 33, "code": "(fn [a b] (mapcat #(repeat b %) a))", "user": "53f7008be4b0de5c41848557"}, {"problem": 33, "code": "(fn [col times] (mapcat #(repeat times %) col))", "user": "53214efbe4b09d4e7a9b54b2"}, {"problem": 33, "code": "(fn caps [entry count] \n  (when (first entry)\n    \n  ;;  (def item (fn[] (list (first entry) (first entry))))\n\n\n    (concat ((fn[] (take count (repeat (first entry))))) (caps (rest entry) count) )\n    )\n)", "user": "53f12b77e4b0742d9025b0da"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "513e8141e4b02b2a3d8235c1"}, {"problem": 33, "code": "(fn [col n]\n  (loop [[head & tail :as all] col\n         cnt n\n         acc []]\n    (println \"head\" head \"tail\" tail \"cnt\" cnt \"acc\" acc)\n    (if (nil? head)\n      acc\n      (if (> cnt 0)\n        (recur all (dec cnt) (conj acc head))\n        (recur tail n acc)\n      )\n    )\n  )\n)", "user": "53f7820be4b0de5c41848560"}, {"problem": 33, "code": "(fn [l n] (if (= n 1) l (apply interleave (for [i (range n)] l))))", "user": "53f5f740e4b0db01ade6f9d8"}, {"problem": 33, "code": "#(if (> %2 1)\n   (apply interleave (repeat %2 %1))\n   (seq %1))", "user": "53c99f60e4b00fb29b2212c1"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "53f6d555e4b0db01ade6f9e5"}, {"problem": 33, "code": "(fn [coll n]\n  (loop [remaining coll result '()]\n    (if (empty? remaining)\n      result\n      (recur\n        (rest remaining)\n        (concat result (take n (repeat (first remaining))))\n      )\n    )\n  )\n)", "user": "53f17931e4b0742d9025b0dd"}, {"problem": 33, "code": "(fn [seq, x]\n  (reduce concat (map (fn [el] (take x (repeat el))) seq)))", "user": "53bd7080e4b0d9a98559a6d1"}, {"problem": 33, "code": "(fn [c x] (mapcat #(take x (repeat %)) c))", "user": "53cd421ce4b00fb29b2212dd"}, {"problem": 33, "code": "(fn [s t]\n   (mapcat #(repeat t %)\n        s))", "user": "5398123ee4b0b51d73faaef3"}, {"problem": 33, "code": "(fn [sq n] (mapcat #(repeat n %) sq))", "user": "53e9681de4b036ad0777e4a4"}, {"problem": 33, "code": "(fn [coll k]\n   (->> coll\n        (map #(take k (repeat %)))\n        (reduce into [])\n        ))", "user": "53ed6976e4b0d648e757f4c4"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "53fa3524e4b0de5c41848578"}, {"problem": 33, "code": "(fn [xs times] (mapcat #(repeat times %) xs))", "user": "53f77b6ae4b0de5c4184855f"}, {"problem": 33, "code": "(fn replicate-seq [coll n]\n  (mapcat #(repeat n %) coll))", "user": "53f75957e4b0de5c4184855d"}, {"problem": 33, "code": "(fn [xs n]\n  (reduce #(concat %1 (repeat n %2)) [] xs))", "user": "53ce0a29e4b00fb29b2212eb"}, {"problem": 33, "code": "(fn [s n] (mapcat (fn [i] (repeatedly n #(identity i))) s))", "user": "53e67e69e4b036ad0777e473"}, {"problem": 33, "code": "(fn peu [x y] (mapcat #(take y (iterate identity %)) x))", "user": "53fc8424e4b0de5c418485b3"}, {"problem": 33, "code": "(fn [x y]\n  (apply concat (map #(repeat y %) x)))", "user": "53e40b17e4b036ad0777e40c"}, {"problem": 33, "code": "(fn replikt [col rep]\n  (let \n    [indexes (map \n              (fn [x] (int (/ x rep)))\n              (range (* rep (count col))))]\n  (map \n   (fn [index] (nth col index))\n   indexes)))", "user": "50c13f77e4b096f585049c3b"}, {"problem": 33, "code": "(fn [xs n] (for [x xs i (range n)] x))", "user": "53ef7f77e4b0742d9025b0ce"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "523630eee4b05f3be1c7c8e8"}, {"problem": 33, "code": "#(reduce concat (for [x (range (count %1) ) ] (repeat %2 (nth %1 x) ) ) )", "user": "53f3a4ace4b0742d9025b0f7"}, {"problem": 33, "code": "(fn f33 [a b]\n\t(mapcat #(repeat b %) a))", "user": "52c08c59e4b07a9af5792351"}, {"problem": 33, "code": "(fn [coll times]\n  (apply concat (map #(take times (iterate identity %)) coll)))", "user": "53fb5256e4b0de5c4184857f"}, {"problem": 33, "code": "(fn [c n] (reduce #(concat %1 (repeat n %2)) [] c))", "user": "53fcb8f7e4b0de5c418485d4"}, {"problem": 33, "code": "(fn [s n] (if (= n 1) (seq s) (apply interleave (repeat n s))))", "user": "53d86564e4b0e771c302546b"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "53fe1c3be4b0de5c418485f2"}, {"problem": 33, "code": "(fn [x,k] (apply concat (map (fn [z] (take k (repeat z))) x)\n                ))", "user": "53fdc4b8e4b0de5c418485ea"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "53fddd71e4b0de5c418485eb"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "525b4e8de4b0cb4875a45d0f"}, {"problem": 33, "code": "(fn [coll times] (apply concat (map #(repeat times %) coll)))", "user": "53c06438e4b0c98a41f5ccb0"}, {"problem": 33, "code": "(fn [in n] (mapcat identity (map #(repeat n %) in)))", "user": "53fcdd1ae4b0de5c418485dd"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "5400fc30e4b0de5c4184861b"}, {"problem": 33, "code": "#(for [x % y (repeat %2 x)] x)", "user": "538d70abe4b0b51d73faae6e"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "524b827ce4b09eba1c0223d7"}, {"problem": 33, "code": "(fn [a b] (apply concat (for [i a] (for [j (range b)] i))))", "user": "53fb4843e4b0de5c4184857d"}, {"problem": 33, "code": "(fn [x y] (mapcat #(map (constantly %) (range y)) x))", "user": "540479e7e4b0addc1aec665a"}, {"problem": 33, "code": "(fn duplicateseq\n  [myseq num]\n  (mapcat #(repeat num %1)  myseq)\n  )", "user": "53fe459ae4b0de5c418485f4"}, {"problem": 33, "code": "(fn replicate-a-sequence [xs n]\n  (reduce (fn [r x] (apply conj r (repeat n x))) [] xs))", "user": "54008b88e4b0de5c4184860d"}, {"problem": 33, "code": "#(if (= 1 %2) %1\n   (apply interleave (repeat %2 %1)))", "user": "53fc713be4b0de5c418485a0"}, {"problem": 33, "code": "(fn [coll n]\n  (loop [[head & tail] coll\n         result []]\n    (if (nil? head)\n      result\n      (recur tail (concat result (repeat n head)))\n     )\n  )\n )", "user": "54021f13e4b0df28a13c62cc"}, {"problem": 33, "code": "(fn \n  [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5401aefbe4b0df28a13c62c7"}, {"problem": 33, "code": "#(apply concat (map (fn [x] (repeat %2 x)) %1))", "user": "53ed03f0e4b0d648e757f4bb"}, {"problem": 33, "code": "(fn replicate_n_times\n      [lista n] (apply concat (map #(take n (repeat %)) lista)))", "user": "540271aee4b0df28a13c62d0"}, {"problem": 33, "code": "(fn  rep [s n] \n  (if (empty? s) '()\n  (into (rep (rest s) n) (repeat n (first s)))))", "user": "52ed7458e4b0a18b0f5dd9ed"}, {"problem": 33, "code": "(letfn [(my-replicate [n elem]\n          (loop [n n\n                 acc '()]\n            (if (= n 0)\n              acc\n              (recur (dec n)\n                     (cons elem acc)))))]\n  (fn replica [lst n]\n     (loop [lst lst\n            acc '()]\n       (if (empty? lst)\n         (reverse acc)\n         (recur (rest lst)\n                (concat (my-replicate n (first lst)) acc))))))", "user": "54084784e4b0addc1aec66c9"}, {"problem": 33, "code": "(fn [xs n] (apply concat (map (fn [y] (take n (repeat y))) xs)))", "user": "53e8c684e4b036ad0777e48b"}, {"problem": 33, "code": "(fn [coll rpt]\n         (reverse (reduce (fn [s i]\n                            (apply conj s (repeat rpt i)))\n                          '() coll)))", "user": "5251b11be4b0541d1855b87b"}, {"problem": 33, "code": "(fn\n  [coll n]\n  (mapcat #(repeat n %) coll))", "user": "540b2dcbe4b0addc1aec66f4"}, {"problem": 33, "code": "(fn [xs r] (mapcat (partial repeat r) xs))", "user": "4fc9a977e4b0ee37620e1847"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "54023bbfe4b0df28a13c62cd"}, {"problem": 33, "code": "(fn [se n]\n  (reverse (reduce #(into %1 (repeat n %2)) '() se)))", "user": "52cda980e4b07d0d72b2737b"}, {"problem": 33, "code": "(fn multi [x y] (seq (reduce (fn ts [res nt]\n                                 (concat res ((fn fr\n                                                ([x]\n                                                   (fr x y))\n                                                ([ x t]\n                                                   (if (> t 0)\n                                                     (cons x (fr x (dec t)))\n                                                     '())\n                                                   )\n                                                ) nt)))\n                               '() x)))", "user": "524025bce4b0ad64fa01030f"}, {"problem": 33, "code": "(fn [s n] \n  (apply concat \n   \t(map #(repeat n %) s)))", "user": "540dbc11e4b0addc1aec6715"}, {"problem": 33, "code": "(fn [l r] (concat () (mapcat #(repeat r %) l)))", "user": "540d7dd1e4b0addc1aec6713"}, {"problem": 33, "code": "(fn [coll n] (mapcat (fn [x] (map (fn [_ _] x) (range n) (range n))) coll))", "user": "54094824e4b0addc1aec66da"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(concat (repeat n %)) coll))", "user": "540f2c48e4b0addc1aec6727"}, {"problem": 33, "code": "#(reduce concat (map (partial repeat %2) %))", "user": "540e17c3e4b0addc1aec6719"}, {"problem": 33, "code": "(fn r [l n] (mapcat #(repeat n %) l))", "user": "540e0637e4b0addc1aec6717"}, {"problem": 33, "code": "(fn [a-seq n]\n  (mapcat identity (apply mapv list (repeat n a-seq))))", "user": "53fd0a22e4b0de5c418485e1"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "53b9bb15e4b047364c0444ed"}, {"problem": 33, "code": "(fn [col,n] (reduce (fn [prev,cur] (concat prev (repeat n cur))) '() col))", "user": "53f9fe41e4b0de5c41848575"}, {"problem": 33, "code": "#(mapcat (fn [elem] (repeat %2 elem)) %1)", "user": "540d0087e4b0addc1aec670b"}, {"problem": 33, "code": "(fn [x times]\n  (loop [x x acc []]\n    (if (empty? x) acc\n      (recur (rest x) (concat acc (map (fn [i] (first x)) (range times)))))))", "user": "5409f8eae4b0addc1aec66e6"}, {"problem": 33, "code": "(fn [col x]  \n      (mapcat #(repeat x %) col))", "user": "5286a2a9e4b0239c8a67ae1e"}, {"problem": 33, "code": "(fn my-replicate\n  [coll nb]\n  (mapcat #(take nb (iterate identity %)) coll))", "user": "54091b82e4b0addc1aec66d5"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce\n   (fn [acc e] \n     (concat acc (repeat n e)))\n   '()\n   coll))", "user": "540d5085e4b0addc1aec670e"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "53f2370ee4b0742d9025b0e7"}, {"problem": 33, "code": "(fn [sq n]\n  (mapcat #(repeat n %) sq))", "user": "540c54a7e4b0addc1aec6700"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "52bc0dade4b07a9af57922f1"}, {"problem": 33, "code": "#(mapcat (fn [input](repeat %2 input)) %1)", "user": "53777c44e4b06839e8705e32"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "541475afe4b01498b1a719eb"}, {"problem": 33, "code": "(letfn [(f [[x & xs :as xss] rep]\n           (if (seq xss)\n             (into (f xs rep) (repeat rep x))\n             '()))]\n  f)", "user": "540470dae4b0addc1aec6658"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %)", "user": "54157dace4b01498b1a719f4"}, {"problem": 33, "code": "(fn foo [xs x] \n  (reduce \n   (fn [acc v] \n     (concat acc(take x (iterate identity v)))) \n   [] xs))", "user": "54133900e4b01498b1a719de"}, {"problem": 33, "code": "(fn [l c] \n  (reduce (fn [a b]\n    (apply conj a (take c (iterate identity b))\n)) [] l))", "user": "53e76728e4b036ad0777e47c"}, {"problem": 33, "code": "(fn [coll times] (mapcat #(repeat times %) coll))", "user": "53f6bfd9e4b0db01ade6f9e4"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "54139cd4e4b01498b1a719e3"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(take n (repeat %)) coll))", "user": "540ff039e4b01498b1a7199b"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "541096bde4b01498b1a719b2"}, {"problem": 33, "code": "(fn [s n]\n  (loop [s s\n         acc '()]\n    (if (empty? s)\n      acc\n      (recur (rest s) (concat acc (repeat n (first s))))\n    )\n  )\n)", "user": "540f09b9e4b0addc1aec6725"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "54165291e4b01498b1a719fb"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "534bfc71e4b084c2834f4a88"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat (partial repeat n) coll))", "user": "5412d5d2e4b01498b1a719d9"}, {"problem": 33, "code": "(fn my-replicate [coll n]\n  (if (empty? coll)\n    nil\n    (concat (repeat n (first coll)) (my-replicate (rest coll) n))))", "user": "54125eeee4b01498b1a719d3"}, {"problem": 33, "code": "(fn [items i]\n    (letfn [(duplicate-item [num item] (take num (iterate (fn [x] x) item)))]\n      (apply concat (map (fn [x] (apply concat(duplicate-item i x)) ) (partition-by identity items)))\n    )\n  )", "user": "54180369e4b01498b1a71a13"}, {"problem": 33, "code": "(fn [list n] (mapcat #(repeat n %) list))", "user": "541074f1e4b01498b1a719ac"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "54187e84e4b01498b1a71a1b"}, {"problem": 33, "code": "(fn [c n]\n  (mapcat #(take n (repeat %)) c))", "user": "53480973e4b084c2834f4a52"}, {"problem": 33, "code": "(fn [xs n]\n  (let [repl* (fn [acc x]\n                (letfn [(dupe ([x m]\n                               (when (< 0 m)\n                                 (concat [x] (dupe x (dec m))))))]\n                  (conj acc (dupe x n))))]\n    (mapcat identity (reduce repl* [] xs))))", "user": "501948b3e4b0b6630b101db5"}, {"problem": 33, "code": "#(reduce (fn[x y] (concat x (repeat %2 y))) [] %1)", "user": "541619e8e4b01498b1a719f9"}, {"problem": 33, "code": "(fn my-replicate [coll n]\n  (reduce #(apply conj %1 (repeat n %2)) [] coll))", "user": "53fd66a4e4b0de5c418485e3"}, {"problem": 33, "code": "#(mapcat (fn [y] (repeat %2 y)) %1)", "user": "541404c2e4b01498b1a719e7"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "541b37d2e4b01498b1a71a64"}, {"problem": 33, "code": "(fn [coll n]\n  (for [x coll\n        _ (range n)]\n    x))", "user": "4fec08e8e4b0681fd128dc9d"}, {"problem": 33, "code": "(fn [cool n] (if (> n 1)\n               (apply interleave (repeat n cool))\n               cool))", "user": "51c1b644e4b0d204dbe2ca12"}, {"problem": 33, "code": "#(apply concat (map (fn f[x] (repeat %2 x)) %1))", "user": "5416aacce4b01498b1a719ff"}, {"problem": 33, "code": ";; bug http://dev.clojure.org/jira/browse/CLJ-863 is annoying :(\n(fn [xs n] (mapcat #(repeat n %) xs))", "user": "54149f2fe4b01498b1a719ec"}, {"problem": 33, "code": "(fn dupln [coll n]\n  (if (> n 1)\n  (apply interleave (repeat n coll))\n  coll\n  ))", "user": "54100c73e4b01498b1a7199e"}, {"problem": 33, "code": "#(apply concat (map (partial repeat %2) %1))", "user": "5282f54be4b0239c8a67ada0"}, {"problem": 33, "code": "(fn [coll n]\n                (mapcat #(apply list (repeat n %)) coll))", "user": "541ae7dbe4b01498b1a71a61"}, {"problem": 33, "code": "(fn [s x] (mapcat #(repeat x %) s))", "user": "52541fe6e4b0541d1855b964"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(concat (repeat n %)) coll))", "user": "541f5b37e4b01498b1a71a97"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "541f6bc0e4b01498b1a71a98"}, {"problem": 33, "code": "(fn doit [coll times]\n  (apply concat (map  (fn [x] (repeat times x))coll))\n  )", "user": "526698c9e4b03e8d9a4a7144"}, {"problem": 33, "code": "#(mapcat (fn [l] (for [k (range %2)] l)) %1)", "user": "511036c5e4b04c71fce993ee"}, {"problem": 33, "code": "(fn [l n]\n  (mapcat #(take n (repeat %)) l))", "user": "541c1e46e4b01498b1a71a70"}, {"problem": 33, "code": "(fn [c n]\n  (mapcat\n   (fn [el]\n     (repeat n el))\n   c)\n  )", "user": "52d6d490e4b09f7907dd1369"}, {"problem": 33, "code": "#(mapcat (fn [input](repeat %2 input)) %1)", "user": "54084089e4b0addc1aec66c7"}, {"problem": 33, "code": "(fn mrepseq\n [s x]\n (loop [s s x x res []]\n   (if (empty? s)\n     res\n     (recur (drop 1 s) x (concat res (repeat x (first s)))))))", "user": "540efe2ee4b0addc1aec6724"}, {"problem": 33, "code": "(fn [xs n] (apply mapcat list (repeat n xs)))", "user": "5409a12fe4b0addc1aec66df"}, {"problem": 33, "code": "(fn rep \n  [coll n] \n  (if \n    (empty? coll) \n    [] \n    (concat \n     (take n (repeat (first coll)))\n     (rep (rest coll) n))))", "user": "541ad1c1e4b01498b1a71a5c"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1 )", "user": "5412ef7ee4b01498b1a719da"}, {"problem": 33, "code": "(fn [xs c]\n  (mapcat #(repeat c %) xs))", "user": "541168dee4b01498b1a719c3"}, {"problem": 33, "code": "(fn [xs m] \n  (condp = m\n    1 xs\n    m (apply interleave (for [n (range m)] xs))\n  )\n)", "user": "516ee939e4b06aac486e5b34"}, {"problem": 33, "code": "#(loop [res [] items %1 count %2]\n    (if (first items)\n        (recur \n            (concat \n                res \n                (repeat count (first items)))    \n            (rest items)\n            count )\n        res))", "user": "54213a8fe4b01498b1a71aaf"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "54246fcce4b01498b1a71aed"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce #(concat %1 (repeat n %2)) () coll))", "user": "5370d152e4b0fc7073fd6e9d"}, {"problem": 33, "code": "(fn\n [v n]\n   (mapcat #(repeat n %1) v))", "user": "51cd75d6e4b02254fc79488c"}, {"problem": 33, "code": "(fn[x l] (reduce concat (map #(take l (repeat %)) x)))", "user": "53e1040be4b0d874e779ae4e"}, {"problem": 33, "code": "(fn f [l c] (apply concat (map #(repeat c %) l)))", "user": "54227fc6e4b01498b1a71ac0"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat (partial repeat n) s))", "user": "5424c523e4b01498b1a71b03"}, {"problem": 33, "code": "(fn rep\n  ([x n i s]\n    (if (empty? x)\n      s\n      (if (= i 0)\n        (rep (rest x) n n s)\n        (rep x n (dec i) (conj s (first x)) )\n      )\n    )   \n  )\n  ([x n] (rep x n n []))\n)", "user": "54257124e4b01498b1a71b09"}, {"problem": 33, "code": "#(apply concat (map (partial repeat %2) % ))", "user": "54258a7fe4b01498b1a71b0c"}, {"problem": 33, "code": "(fn [x n] (mapcat #(take n (repeat %)) x))", "user": "5425d454e4b01498b1a71b13"}, {"problem": 33, "code": "(fn [col x]\n  (apply concat \n         (map \n          (fn [e] (repeat x e)) col)))", "user": "54194782e4b01498b1a71a29"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "4f47d84fe4b0d56e7bb92bc3"}, {"problem": 33, "code": "(fn [in cnt]\n   (reduce (fn [acc x] (into acc (repeat cnt x))) [] in))", "user": "5429986ce4b01498b1a71b3b"}, {"problem": 33, "code": "#(reduce (fn [x y]\n          (apply conj x (repeat %2 y))) [] %)", "user": "541735b3e4b01498b1a71a07"}, {"problem": 33, "code": "(fn [inp n]\n  (->> inp\n       (map #(repeat n %))\n       (apply concat)))", "user": "542c22bde4b0dad94371f29e"}, {"problem": 33, "code": "(fn [coll n] (reduce #(apply (partial conj %) (repeat n %2)) [] coll))", "user": "53f78944e4b0de5c41848561"}, {"problem": 33, "code": "(fn [xs x] (reduce concat (for [y xs](take x (repeat y)))))", "user": "542d2385e4b0dad94371f2b2"}, {"problem": 33, "code": "(fn n-dup [coll n]\n  (let [x (first coll) y (next coll)]\n    (concat (repeat n x)\n            (if (not= nil y)\n              (n-dup y n)))))", "user": "542c026ae4b0dad94371f29a"}, {"problem": 33, "code": "(fn [se cnt]\n  (letfn [(fib\n            [f r cntr newseq]\n            (if (nil? f)\n            newseq\n            (recur (first r) (rest r) cntr (into newseq (repeat cntr f)))\n           ))]\n (fib (first se) (rest se) cnt [])\n  ))", "user": "541ddadbe4b01498b1a71a84"}, {"problem": 33, "code": "(fn [list n] (if (= n 1) list (apply interleave (repeat n list))))", "user": "542db41be4b0dad94371f2bb"}, {"problem": 33, "code": "#(if (< %2 2)\n   %1\n   (apply interleave (repeat %2 %1)))", "user": "540e8d13e4b0addc1aec671e"}, {"problem": 33, "code": "(fn [coll times] (mapcat #(repeat times %) coll))", "user": "51ca5378e4b08b1cbd0d9480"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "54302691e4b0dad94371f2d7"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "53a01fb1e4b0ca733b9744a6"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5410cb36e4b01498b1a719b8"}, {"problem": 33, "code": "(fn [seq times]\n   (loop [s seq\n          ret []]\n     (if s\n       (recur (next s) (into ret (for [i (range times) ](first s))))\n       ret)))", "user": "542b764ae4b0dad94371f28d"}, {"problem": 33, "code": "(fn [coll step] (apply concat\n  (map \n   #(for [_ (range step)] %) coll)))", "user": "542c2de0e4b0dad94371f29f"}, {"problem": 33, "code": "(fn [a x] (mapcat #(repeat x %) a))", "user": "542f574be4b0dad94371f2d0"}, {"problem": 33, "code": "(fn [seq n]\n  (mapcat (partial repeat n) seq))", "user": "540c6a8ae4b0addc1aec6702"}, {"problem": 33, "code": "(fn [x y] (reduce concat (map (fn [z] (repeat y z)) x)))", "user": "542da97ae4b0dad94371f2ba"}, {"problem": 33, "code": "(fn _ [ l n ]\n    (if-let [[ x & xs ] l]\n      (concat (take n (repeat x)) (_ xs n))\n      ))", "user": "5433a07be4b0b6b47310fce0"}, {"problem": 33, "code": "(fn [s c]\n  (if (<= c 1)\n    s\n  (apply interleave (take c (repeat s)))\n    )\n  )", "user": "5412646de4b01498b1a719d4"}, {"problem": 33, "code": "(fn [xs n] (reduce #(apply conj %1 (repeat n %2)) [] xs))", "user": "540961e9e4b0addc1aec66db"}, {"problem": 33, "code": "(fn [x i] (mapcat #(take i (repeat %)) x))", "user": "53765e1ae4b06839e8705e23"}, {"problem": 33, "code": "(fn [x, n]\n  (loop [remainder x\n         output []]\n    (if (= remainder [])\n      output\n      (recur (rest remainder) (concat output (repeat n (first remainder)))))))", "user": "54336443e4b0b6b47310fcde"}, {"problem": 33, "code": "(fn\n  [my-seq times]\n  (mapcat #(repeat times %) my-seq))", "user": "53a511aae4b0b62ce3005735"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "54349368e4b0b6b47310fcf1"}, {"problem": 33, "code": "(fn replicate [x y] (mapcat #(take y (iterate identity %)) x))", "user": "542c1f73e4b0dad94371f29d"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "532a033be4b09d4e7a9b551f"}, {"problem": 33, "code": "(fn [x n]\n  (apply concat (map #(repeat n %) x)))", "user": "5423dc6ae4b01498b1a71ad5"}, {"problem": 33, "code": "(fn rep [l n]\n  (mapcat #(repeat n %) l))", "user": "53e745a1e4b036ad0777e479"}, {"problem": 33, "code": "(fn [x, y] (mapcat #(repeat y %) x))", "user": "54344721e4b0b6b47310fcea"}, {"problem": 33, "code": "(fn [x y] (mapcat #(take y (repeat %)) x))", "user": "54296802e4b01498b1a71b38"}, {"problem": 33, "code": "(fn [l d] \n   (reduce \n    #(into %1 (take d (repeat %2))) [] l))", "user": "53da3fcde4b0e771c3025497"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "52ee0de4e4b05e3f0be25ec1"}, {"problem": 33, "code": "(fn [x n] (loop [answer [] remaining x ]\n            (if (empty? remaining)\n              answer\n              (recur (into answer  (repeat n (first remaining) ) )  (drop 1 remaining) )\n              )\n            )\n  )", "user": "542baf7ce4b0dad94371f291"}, {"problem": 33, "code": "(fn [s n] (reduce #(concat % (repeat n %2)) '() s))", "user": "541709b0e4b01498b1a71a06"}, {"problem": 33, "code": "(fn [x n] (if (= n 1) x (apply interleave (repeat n x))))", "user": "51eda45ce4b0bb507043159b"}, {"problem": 33, "code": "(fn [l n] (mapcat #(repeat n %) l))", "user": "54397533e4b032a45b86931d"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "54380631e4b032a45b86930f"}, {"problem": 33, "code": "(fn [coll times]\n   (reduce (fn [m x] (into m (repeat times x))) [] coll))", "user": "54393c3fe4b032a45b86931a"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "54324be1e4b0dad94371f2ed"}, {"problem": 33, "code": "(fn [l n] (mapcat (partial (fn [n x] (repeat n x)) n ) l))", "user": "54377355e4b032a45b869305"}, {"problem": 33, "code": "(fn dupn\n  [s n]\n  (if (empty? s)\n    '()\n    (concat (repeat n (first s))\n            (dupn (rest s) n))))", "user": "5438795ee4b032a45b869313"}, {"problem": 33, "code": "#(if (> %2 1) \n   (apply interleave (take %2 (repeat %))) \n   %)", "user": "542c44f8e4b0dad94371f2a1"}, {"problem": 33, "code": "(fn [coll times] (mapcat #(take times (repeat %)) coll))", "user": "543b5bc6e4b032a45b86932d"}, {"problem": 33, "code": "#(mapcat (partial replicate %2) %1)", "user": "542edb4ae4b0dad94371f2c8"}, {"problem": 33, "code": "(fn [l n] (mapcat #(repeat n %) l))", "user": "543a68d3e4b032a45b869326"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce (fn [res item]\n            (concat res (repeat n item)))\n          []\n          coll))", "user": "541df619e4b01498b1a71a87"}, {"problem": 33, "code": "#(apply concat\n    (for [c %1]\n      (repeat %2 c)))", "user": "543c39e0e4b032a45b86933d"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "52b2f9cae4b0c58976d9acfb"}, {"problem": 33, "code": "(fn [item num] (reduce concat (map #(take num (repeat %)) item)))", "user": "5437eca1e4b032a45b86930d"}, {"problem": 33, "code": "(fn [col n] (mapcat #(repeat n %) col))", "user": "53f67bcfe4b0db01ade6f9e1"}, {"problem": 33, "code": "(fn replicate-sequence [collection n]\n  (apply concat (map (partial repeat n) collection)))", "user": "53f891eee4b0de5c4184856d"}, {"problem": 33, "code": "#(if (= %2 1) \n   %1\n   (apply interleave (repeat %2 %1)))", "user": "543d5c61e4b032a45b86934d"}, {"problem": 33, "code": "(fn [s n] \n  (loop [s s a nil] \n    (if-not (empty? s) \n      (recur (rest s) (concat a (repeat n (first s)))) \n      a)))", "user": "5385e633e4b06839e8705f08"}, {"problem": 33, "code": "#(mapcat repeat (repeat %2) %1)", "user": "543f854fe4b032a45b86935b"}, {"problem": 33, "code": "(fn rep [lst ind]\n  (if (empty? lst) ()\n  (concat (take ind (iterate identity (first lst))) (rep (rest lst) ind)))\n  )", "user": "53b685e0e4b047364c0444c7"}, {"problem": 33, "code": "(fn replicateseq\n  [liste quantite]\n  (loop [restant liste, traite '(), compt 1]\n    (if (empty? restant)\n      (reverse traite)\n      (let [[head & tail] restant]\n        (if (> compt quantite)\n          (recur tail traite 1)\n          (recur restant (conj traite head) (inc compt))\n          )\n        )\n      )\n    )\n  )", "user": "54410a71e4b032a45b869367"}, {"problem": 33, "code": "(fn [coll n] (reduce concat (map #(repeat n %1) coll)))", "user": "54418311e4b032a45b869370"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %)", "user": "52f8b86de4b047fd55836fdb"}, {"problem": 33, "code": "(fn [x,n] (mapcat #(repeat n %) x))", "user": "543d89dfe4b032a45b869350"}, {"problem": 33, "code": "(fn [vecter cnt]\n\t(mapcat \n\t\t(fn [e]\n\t\t\t(repeat cnt e)) vecter))", "user": "533a399de4b0e30313ee6cb9"}, {"problem": 33, "code": "(fn [l n] (apply concat (apply map vector (repeat n l))))", "user": "54431b6ee4b032a45b869385"}, {"problem": 33, "code": "(fn [ls, n] (reduce #(concat %1 (repeat n %2)) () ls))", "user": "53751c5ee4b06839e8705e11"}, {"problem": 33, "code": "(fn rep [coll n]\n  (reduce #(concat %1 (repeat n %2)) [] coll))", "user": "542cb77ae4b0dad94371f2aa"}, {"problem": 33, "code": "(fn [xs n] (reduce concat (map (partial repeat n) xs)))", "user": "54413696e4b032a45b86936b"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "542789efe4b01498b1a71b25"}, {"problem": 33, "code": "(fn [x y]\n  (reduce #(concat %1 (repeat y %2)) `()\n   x)\n  )", "user": "5372c830e4b06d7f452d9dff"}, {"problem": 33, "code": "#(if (<= %2 1) %1 (apply interleave (repeat %2 %1)))", "user": "50666699e4b03d366d7cb2b0"}, {"problem": 33, "code": "(fn [a b]\n\t(reduce #(concat %1 (replicate b %2))\n  \t[]\n  \ta))", "user": "52a45a7be4b0c58976d9abd8"}, {"problem": 33, "code": "(fn [ls n]\n  (mapcat #(repeat n %) ls))", "user": "54448e84e4b032a45b869393"}, {"problem": 33, "code": "(fn [s n] (apply concat (map #(repeat n %) s)))", "user": "5441f5e8e4b032a45b869375"}, {"problem": 33, "code": "(fn [x n]  \n(mapcat  #(repeat n %) x)\n  \n  )", "user": "540e33dde4b0addc1aec671a"}, {"problem": 33, "code": "(fn [z n]\n  (apply concat (map (fn [x] (first (reverse (take n (iterate #(conj % x) [x]))))) z)))", "user": "543496e1e4b0b6b47310fcf2"}, {"problem": 33, "code": "(fn replicate-sequence\n  [sequence n]\n  (loop [[x & xs] sequence\n         result '()]\n    (if (empty? xs)\n      (concat result (repeat n x))\n      (recur xs (concat result (repeat n x))))))", "user": "52561295e4b0541d1855ba03"}, {"problem": 33, "code": "#(if (= %2 1) (seq %1) (apply interleave (repeat %2 %1)))", "user": "5315ba94e4b08068f379ed34"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5446c89ce4b032a45b8693b5"}, {"problem": 33, "code": "(fn [elems repcount]\n  (apply concat\n    (for [e elems]\n      (take repcount (iterate identity e))\n    )\n  )       \n)", "user": "54468ebfe4b032a45b8693b1"}, {"problem": 33, "code": "(fn [xs t] (mapcat #(repeat t %) xs))", "user": "5267c74be4b03e8d9a4a7183"}, {"problem": 33, "code": "(fn [l n]\n  (reduce #(into %1 (repeat n %2)) [] l))", "user": "5392bfdee4b0b51d73faaeb2"}, {"problem": 33, "code": "(fn [c i] (mapcat #(take i (repeat %1)) c))", "user": "530a6cbae4b02e82168697be"}, {"problem": 33, "code": "(fn [sq n] (reduce concat (map (fn [x] (replicate n x)) sq)))", "user": "5447e08ce4b032a45b8693c3"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "54487527e4b032a45b8693cc"}, {"problem": 33, "code": "(fn [x y] (mapcat (fn [z] (repeat y z)) x))", "user": "54461393e4b032a45b8693a5"}, {"problem": 33, "code": "(fn foo [x y] \n  (if (empty? x)\n    '()\n    (concat (repeat y (first x))  (foo (rest x) y)        )\n  )\n)", "user": "54078851e4b0addc1aec66bd"}, {"problem": 33, "code": "#(apply concat (for [x %1] (repeat %2 x)))", "user": "544ac9b5e4b0e39780006959"}, {"problem": 33, "code": "(fn [x n] (mapcat #(repeat n %) x))", "user": "5446ebc2e4b032a45b8693b8"}, {"problem": 33, "code": "(fn rep [coll number] \n  (if (= 1 number)\n    coll\n    (apply interleave (take number (repeat coll)))))", "user": "544b9df2e4b0e39780006968"}, {"problem": 33, "code": "(fn [s n] \n  (apply concat (map #(take n (repeat %)) s))\n\t)", "user": "544a049de4b0e39780006953"}, {"problem": 33, "code": "(fn [c n]\n  (reduce #(apply (partial conj %1) (repeat n %2)) [] c))", "user": "54055aa9e4b0addc1aec6665"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "544e8369e4b0e39780006987"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "544b699ce4b0e39780006964"}, {"problem": 33, "code": "(fn [c n]\n  (loop [s (seq c)\n         r '()\n         l n]\n    (if (empty? s)\n      (reverse r)\n      (recur (rest s) (apply conj r (repeat n (first s))) (dec l)))))", "user": "542d5fa9e4b0dad94371f2b5"}, {"problem": 33, "code": "(fn [a b] (mapcat #(repeat b %) a))", "user": "52c45ac8e4b0c2d177d620d9"}, {"problem": 33, "code": "(fn [c n]\n  (apply concat (map (fn [x] (repeat n x)) c)))", "user": "5122925ae4b068a9582e656d"}, {"problem": 33, "code": "(fn rep [s n]\n   (reduce concat\n    (for [x s]\n      (take n (repeat x)))))", "user": "54468fd3e4b032a45b8693b2"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "545281bce4b0e397800069c3"}, {"problem": 33, "code": "#(if (= %2 1)\n  (seq %)\n  (apply interleave (repeat %2 %)))", "user": "53b7aa6ce4b047364c0444d1"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5233564ae4b0f0b72fabf403"}, {"problem": 33, "code": "(fn myrepeat [xs n]\n   (mapcat #(take n (iterate (fn [x] x) %)) xs))", "user": "544257b4e4b032a45b869379"}, {"problem": 33, "code": "(fn [xs n] (mapcat (partial repeat n) xs))", "user": "544fbabce4b0e39780006999"}, {"problem": 33, "code": "(fn [x y] (if (> y 1) (apply interleave (take y (repeat x))) x))", "user": "54458995e4b032a45b86939e"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "54524afbe4b0e397800069bc"}, {"problem": 33, "code": "(fn [input\n     times]\n  (if (= times 1)\n    input\n    (apply interleave (take times (repeat input)))))", "user": "54513516e4b0e397800069af"}, {"problem": 33, "code": "(fn [s a] (mapcat #(take a (iterate identity %)) s))", "user": "5457e5f1e4b01be26fd74613"}, {"problem": 33, "code": "(fn [coll times] (mapcat (partial repeat times) coll))", "user": "544cf5d7e4b0e39780006977"}, {"problem": 33, "code": "(fn [coll n] \n  (mapcat #(take n (repeat %)) coll))", "user": "52d84ea7e4b09f7907dd1390"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll ))", "user": "54512df2e4b0e397800069ae"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "5414b7c4e4b01498b1a719ed"}, {"problem": 33, "code": "(fn [s n] \n  (if (= 1 n) \n    s\n    (apply interleave (repeat n s))))", "user": "533ea7e8e4b085b17e897d94"}, {"problem": 33, "code": "(fn [x y]\n (apply concat (map #(take y (repeat %)) x)))", "user": "54381729e4b032a45b869310"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5405ae2be4b0addc1aec6671"}, {"problem": 33, "code": "(fn [col n]\n  (apply concat\n         (map #(take n (iterate identity %1)) col)))", "user": "54580586e4b01be26fd74616"}, {"problem": 33, "code": "#(apply concat (for [x % y (range %2)] [x]))", "user": "52e16face4b09f7907dd1421"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "544a8fbbe4b0e39780006957"}, {"problem": 33, "code": "(fn [l n] (mapcat #(take n (repeat %)) l))", "user": "5454b84ce4b0e397800069d9"}, {"problem": 33, "code": "(fn [col t] (mapcat #(take t (repeat %)) col))", "user": "5367bc60e4b0243289761e81"}, {"problem": 33, "code": "#(apply concat (map (fn [el] (repeat %2 el)) %1))", "user": "545801f6e4b01be26fd74615"}, {"problem": 33, "code": "(fn replic [coll n] \n  (mapcat #(repeat n %) coll))", "user": "5454bd9be4b0e397800069db"}, {"problem": 33, "code": "(fn jp [li razy] (if (empty? li) () (concat (repeat razy (first li)) (jp (rest li) razy))))", "user": "544e1794e4b0e39780006980"}, {"problem": 33, "code": "(fn [s n] (apply concat (map #(repeat n %) s)))", "user": "4e8b5cb8535d65386fec211b"}, {"problem": 33, "code": "(fn [ls n] (mapcat #(repeat n %) ls))", "user": "53eaa804e4b036ad0777e4ea"}, {"problem": 33, "code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "user": "53b14289e4b047364c04448b"}, {"problem": 33, "code": "(fn rep\n   [s n]\n   (when-not (empty? s)\n   (concat (repeat n (first s)) (rep (rest s) n))))", "user": "545e9cf1e4b01be26fd7467f"}, {"problem": 33, "code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "user": "539ff974e4b0ca733b9744a3"}, {"problem": 33, "code": "#(if (= %2 1) % (apply interleave (repeat %2 %)))", "user": "5417bc50e4b01498b1a71a0f"}, {"problem": 33, "code": "(fn [xs n]\n  (reduce\n   (fn [acc x]\n     (concat acc (repeat n x)))\n   []\n   xs))", "user": "526e1bd0e4b03e8d9a4a730b"}, {"problem": 33, "code": "(fn [coll n] (if (= n 1) coll (apply interleave (repeat n coll))))", "user": "5458a729e4b01be26fd74622"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "4f1ef6a0535d64f60314649b"}, {"problem": 33, "code": "(fn -repli [xs x]\n  (#(reduce (fn foo [lst item] (concat lst (repeat x item)))  '() xs)))", "user": "546113ffe4b01be26fd74699"}, {"problem": 33, "code": "#(if (= %2 1) (seq %1) (apply interleave (repeat %2 %1)))", "user": "546280d8e4b01be26fd746b0"}, {"problem": 33, "code": "(fn replicate\n  [coll n]\n  (if (empty? coll)\n    '()\n    (concat (repeat n (first coll)) (replicate (rest coll) n))))", "user": "545d881de4b01be26fd7466f"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(concat (repeat n %)) coll))", "user": "54630e6be4b01be26fd746bc"}, {"problem": 33, "code": "(fn [sequence dupes]\n  (apply concat (for [item sequence]\n                  (take dupes (repeat item)))))", "user": "5461c402e4b01be26fd746a6"}, {"problem": 33, "code": "(fn [coll n]\n      (apply concat []\n        (for [it coll]\n          (repeat n it))))", "user": "532f7e12e4b019098a6f8b4e"}, {"problem": 33, "code": "(fn [v n] (mapcat identity (map (fn [e] (repeat n e)) v)))", "user": "5465712ee4b01be26fd746dc"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "53a068cbe4b0ca733b9744ae"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "5464a536e4b01be26fd746cf"}, {"problem": 33, "code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "user": "545537c1e4b0e397800069dd"}, {"problem": 33, "code": "(fn dup_items [l n]\n  (if (empty? l)\n    '()\n    (concat (repeat n (first l))\n            (dup_items (rest l) n))))", "user": "54651982e4b01be26fd746d4"}, {"problem": 33, "code": "(fn[l n](reduce #(concat (repeat n %2) %1 ) '() (reverse l)))", "user": "54651ef5e4b01be26fd746d5"}, {"problem": 33, "code": "#(mapcat identity (for [x %] (repeat %2 x)))", "user": "5414dccbe4b01498b1a719f1"}, {"problem": 33, "code": "(fn [inp c]\n  (mapcat identity (map #(take c (repeat %)) inp)))", "user": "534e60c2e4b084c2834f4ab2"}, {"problem": 33, "code": "(fn [xs n] (reduce concat (map (partial repeat n) xs)))", "user": "5468033ee4b00cfc9eacc133"}, {"problem": 33, "code": "(fn [coll n]\n    (mapcat #(repeat n %) coll))", "user": "53613db8e4b0243289761e41"}, {"problem": 33, "code": "(fn [l n] (mapcat #(for [i (range n)] %) l))", "user": "54651faee4b01be26fd746d6"}, {"problem": 33, "code": "(fn repl\n  [coll n]\n  (apply concat(map #(repeat n %) coll)))", "user": "5469e7cce4b00cfc9eacc14c"}, {"problem": 33, "code": "#(if (= 1 %2)\n   (lazy-seq %1)\n   (apply interleave (repeat %2 %1)))", "user": "52b9cfb9e4b07a9af57922c5"}, {"problem": 33, "code": "(fn [lst n]\n  (mapcat #(take n (repeat %)) lst))", "user": "52526161e4b0541d1855b8a6"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "53572176e4b04ce2eb3ed276"}, {"problem": 33, "code": "(fn r [v t]\n  (when-first [f v]\n    (concat (repeat t f) (r (rest v) t))))", "user": "53ea5851e4b036ad0777e4e4"}, {"problem": 33, "code": "(fn [l n] (mapcat #(repeat n %) l))", "user": "54485727e4b032a45b8693c6"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "5455c2f3e4b080a794c2c87d"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %1) coll))", "user": "52a90056e4b0c58976d9ac39"}, {"problem": 33, "code": "(fn [col n] (mapcat #(repeat n %) col))", "user": "5465febde4b01be26fd746e1"}, {"problem": 33, "code": "#(if (= %2 1)\n   %1\n   (apply interleave (repeat %2 %1)))", "user": "546c1b2ce4b00cfc9eacc174"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "53cfa79ce4b00fb29b2212ff"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "546a6dbbe4b00cfc9eacc156"}, {"problem": 33, "code": "(fn [ls n]\n(loop [[x & xs] ls result '()]\n    (if (nil? x) result\n      (recur xs  (concat result (repeat n x))))))", "user": "546176e7e4b01be26fd746a2"}, {"problem": 33, "code": "(fn [x n] (mapcat #(repeat n %) x))", "user": "5462ce20e4b01be26fd746b8"}, {"problem": 33, "code": "(fn [coll cnt]\n  (apply concat (apply map list (repeat cnt coll))))", "user": "545bd22fe4b01be26fd7465a"}, {"problem": 33, "code": "#(reduce (fn [base x] (apply conj base (repeat %2 x))) [] %)", "user": "5461873de4b01be26fd746a3"}, {"problem": 33, "code": "(fn [l n] (apply mapcat list (repeat n l)))", "user": "5468a110e4b00cfc9eacc13d"}, {"problem": 33, "code": "(fn [col n] (mapcat #(concat (repeat n %)) col))", "user": "51ac80bbe4b09397d5109770"}, {"problem": 33, "code": "#(mapcat (fn [e] (repeat %2 e)) %1)", "user": "546ed28be4b00cfc9eacc1a5"}, {"problem": 33, "code": "(fn xn [coll n] (reduce into (for [x coll] (apply vector (repeat n x)))))", "user": "546ef9f8e4b00cfc9eacc1a6"}, {"problem": 33, "code": "(fn [input n]\n  (mapcat (partial repeat n) input))", "user": "546c4c5fe4b00cfc9eacc178"}, {"problem": 33, "code": "(fn [ls n] \n  (reverse (reduce (fn [acc x] (into acc (take n (repeat x)))) '() ls)))", "user": "546d41bde4b00cfc9eacc18c"}, {"problem": 33, "code": "(fn [l n]\n  (mapcat #(repeat n %) l))", "user": "546a6c7ce4b00cfc9eacc154"}, {"problem": 33, "code": "(fn [lst n] (mapcat #(take n (repeat %)) lst))", "user": "543bb568e4b032a45b869334"}, {"problem": 33, "code": "(fn [col n] \n     (reduce \n       (fn [acc, next]\n         (loop[a acc, t n]\n           (if (= t 0)\n             a\n             (recur (conj a next) (- t 1))))\n       ) (vec '()) col\n     )\n   )", "user": "52149e21e4b0961f15ac4d94"}, {"problem": 33, "code": "#(reduce (fn [a b]\n            (apply conj a (repeat %2 b))) [] %1)", "user": "544e9022e4b0e3978000698b"}, {"problem": 33, "code": "#(apply mapcat list (repeat %2 %))", "user": "546c1f73e4b00cfc9eacc175"}, {"problem": 33, "code": "(fn [x n] (apply concat (map #(repeat n %) x)))", "user": "5433d3ebe4b0b6b47310fce4"}, {"problem": 33, "code": "(fn [input n]\n    (reduce #(apply conj %1 (repeat n %2))\n            []\n            input))", "user": "54508859e4b0e397800069a3"}, {"problem": 33, "code": "(fn [items dup-num]\n  (apply concat (map #(repeat dup-num %) items)))", "user": "541cf6dfe4b01498b1a71a7a"}, {"problem": 33, "code": "(fn replicate-seq [coll n]\n  (mapcat #(repeat n %) coll))", "user": "54708efce4b00cfc9eacc1b9"}, {"problem": 33, "code": "(fn\r\n  [c n]\r\n  (mapcat #(repeat n %) c))", "user": "5470699ae4b00cfc9eacc1b6"}, {"problem": 33, "code": "(fn[coll n]\n  (loop [in coll out []]\n    (cond (empty? in) out\n          :else (recur (rest in) (concat out (repeat n (first in)))))))", "user": "5472cba1e4b094393f72dd7a"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %1) coll))", "user": "5462dc5ae4b01be26fd746b9"}, {"problem": 33, "code": "(fn repseq [ls n]\n   (mapcat (fn [elt]\n             (map (fn [_] elt) (range n)))\n           ls))", "user": "547584d9e4b0c51c1f4d729b"}, {"problem": 33, "code": "(fn [x cnt]\n  (loop [s x acc '() n (dec cnt)]\n    (if (nil? (first s))\n      (reverse acc)\n      (recur (if (= n 0) (rest s) s) (conj acc (first s)) (if (= n 0) (dec cnt) (dec n)))\n      )\n    )\n  )", "user": "5471f2fbe4b094393f72dd70"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "54734a0de4b0c51c1f4d727b"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "54696e4ce4b00cfc9eacc147"}, {"problem": 33, "code": "(fn [s n]\n   (mapcat #(repeat n %) s))", "user": "5466aabbe4b01be26fd746e8"}, {"problem": 33, "code": "#(apply (partial mapcat list) (repeat %2 %))", "user": "5470b3d0e4b00cfc9eacc1bb"}, {"problem": 33, "code": "(fn [my-seq multiplier] (mapcat  #(repeat multiplier %) my-seq))", "user": "546e4ab8e4b00cfc9eacc19c"}, {"problem": 33, "code": "(fn repeater [x a]\n\t(reduce concat (map #(repeat a %) x)))", "user": "53703287e4b0fc7073fd6e8f"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5478c4fee4b0c51c1f4d72c0"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "53c1b787e4b00fb29b221266"}, {"problem": 33, "code": "(fn [lst repeat-count] (\n     mapcat #(repeat repeat-count %) lst                   \n                        \n                        )\n  \n  )", "user": "5471f090e4b094393f72dd6e"}, {"problem": 33, "code": "#(if (=%2 1) %1 (apply interleave (replicate %2 %1)))", "user": "54524dbbe4b0e397800069bd"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5479c58de4b0c51c1f4d72c7"}, {"problem": 33, "code": "(fn [lat n]\n  (reduce concat (map #(take n (repeat %)) lat)))", "user": "54764cf1e4b0c51c1f4d72a4"}, {"problem": 33, "code": "#(if (= %2 1) % (apply interleave (take %2 (cycle [%]))))", "user": "545d5c3be4b01be26fd7466d"}, {"problem": 33, "code": "(fn [a b] (mapcat #(repeat b %) a))", "user": "5472d919e4b094393f72dd7b"}, {"problem": 33, "code": "(fn rep-seq [col n] (apply concat (map (fn dup-elem [e] (repeat n e)) col)))", "user": "54797964e4b0c51c1f4d72c6"}, {"problem": 33, "code": "(fn [col n] (mapcat #(concat (repeat n %)) col))", "user": "54630cdae4b01be26fd746bb"}, {"problem": 33, "code": "(fn [col n] (mapcat #(repeat n %) col))", "user": "535c2d21e4b04ce2eb3ed2b2"}, {"problem": 33, "code": "(fn das [coll n]\n  (mapcat #(take n (repeat %)) coll))", "user": "5475d755e4b0c51c1f4d72a0"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "5478e57de4b0c51c1f4d72c1"}, {"problem": 33, "code": "#(if (= %2 1) (seq %1) (apply interleave (repeat %2 %1)) )", "user": "546e0c24e4b00cfc9eacc198"}, {"problem": 33, "code": "(fn [coll n] \n  (apply concat (map #(repeat n %) coll)))", "user": "545f737ce4b01be26fd74688"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "547adcb0e4b0c51c1f4d72cf"}, {"problem": 33, "code": "(fn f [c n]\n        (if (empty? c)\n          '()\n          (lazy-cat (repeat n (first c)) (f (rest c) n))))", "user": "547d8e93e4b0c51c1f4d72f4"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "5463fbbde4b01be26fd746ca"}, {"problem": 33, "code": "(fn [v r]\n  (mapcat #(repeat r %) v))", "user": "501b1efee4b0b12d9c5f4d82"}, {"problem": 33, "code": "(fn [xs n]\n   (apply concat (for [x xs]\n                   (take n (repeat x)))))", "user": "547ad587e4b0c51c1f4d72ce"}, {"problem": 33, "code": "(fn v-dup [s i] (if (empty? s) [] (into (vec (repeat i (first s))) (v-dup (rest s) i))))", "user": "54750ca3e4b0c51c1f4d7294"}, {"problem": 33, "code": "(fn [x y] \n  (mapcat (partial repeat y) x))", "user": "54801febe4b0c51c1f4d733c"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "4fe8b1d9e4b07c9f6fd12c71"}, {"problem": 33, "code": "#(mapcat (fn [input](repeat %2 input)) %1)", "user": "548026d8e4b0e286459a1155"}, {"problem": 33, "code": "(fn [s n] (if (> n 1) (apply interleave (take n (cycle [s]))) s))", "user": "5466199ce4b01be26fd746e2"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "547d66a1e4b0c51c1f4d72f2"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "51a4d802e4b0def3c5c5869a"}, {"problem": 33, "code": "(\n    fn [coll x]\n    (\n      loop [coll coll, result []]\n      (\n        if (empty? coll) result\n        (\n          recur (rest coll)\n          (\n            concat result\n            (\n              loop [res [], x x, elem (first coll)]\n              (\n                if (zero? x) res\n                (recur (conj res elem) (dec x) elem)\n                )\n              )\n            )\n          )\n        )\n      )\n    )", "user": "547f3434e4b0c51c1f4d7319"}, {"problem": 33, "code": "#(apply concat (map (partial repeat %2) %))", "user": "54357066e4b0b6b47310fcfd"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "548204b2e4b0e286459a117a"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "54577fefe4b01be26fd7460d"}, {"problem": 33, "code": "#(if (= %2 1)\n   %1\n   (apply interleave (repeat %2 %1)))", "user": "5483d59fe4b0e286459a1194"}, {"problem": 33, "code": "(fn [coll n]\n  (for [x coll\n        r (range n)]\n    x))", "user": "5032748ae4b0e78df07b092f"}, {"problem": 33, "code": "(fn [l n] (mapcat (fn [x] (repeat n x)) l))", "user": "54764a8fe4b0c51c1f4d72a3"}, {"problem": 33, "code": "(fn [% n]\n  (mapcat #(repeat n %) %))", "user": "54802bd1e4b0e286459a1157"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "54852ad0e4b0e286459a11a7"}, {"problem": 33, "code": "(fn [coll times]\n  (mapcat #(repeat times %) coll))", "user": "54814dbee4b0e286459a116b"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "54857e3be4b0e286459a11ad"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(concat (repeat n %)) coll))", "user": "5485d2c1e4b0e286459a11b3"}, {"problem": 33, "code": "(fn [coll n]\n  (->> (for [x coll]\n         (repeat n x))\n       (apply concat)))", "user": "54848141e4b0e286459a119e"}, {"problem": 33, "code": "(fn [coll times] (mapcat #(repeat times %) coll))", "user": "548392fce4b0e286459a1191"}, {"problem": 33, "code": "(\n\t\tfn myDuplicator[x y] \n\t\t(\n\t\t\tif(> (count x) 0)\n\t\t\t(\n\t\t\t\tif(= y 1)\n\t\t\t\t(concat [(first x)] (myDuplicator (rest x) y))\n\t\t\t\t(\n\t\t\t\t\tif(= y 2)\n\t\t\t\t\t(concat [(first x) (first x)] (myDuplicator (rest x) y))\n\t\t\t\t\t(concat [(first x) (first x) (first x) (first x)] (myDuplicator (rest x) y))\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)", "user": "548018ede4b0c51c1f4d7334"}, {"problem": 33, "code": "(fn repe [x y]\n  (if (> (count x) 0)\n  \t(concat (take y (repeat (first x))) (repe (rest x) y) )\n    x\n  )\n)", "user": "548018e3e4b0c51c1f4d7330"}, {"problem": 33, "code": "#(reduce\n  (fn [a b]\n    (concat a (take %2 (repeat b))))\n  []\n  %1)", "user": "513facf5e4b00f13ea1bd892"}, {"problem": 33, "code": "#(apply concat (map (fn [input] (repeat %2 input)) %1))", "user": "5486adf7e4b0e286459a11be"}, {"problem": 33, "code": "(fn rep [a-seq n]\n  (mapcat #(take n (iterate identity %)) a-seq))", "user": "547e3846e4b0c51c1f4d7302"}, {"problem": 33, "code": "(fn [l n]\n  (mapcat #(take n (cycle (list %))) l))", "user": "5471f0f3e4b094393f72dd6f"}, {"problem": 33, "code": "(fn [coll n]\n  (apply concat (map #(take n (repeat %)) coll)))", "user": "54856d54e4b0e286459a11aa"}, {"problem": 33, "code": "(fn [coll n]\n    (mapcat #(repeat n % ) coll))", "user": "534b57bbe4b084c2834f4a78"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "543823f1e4b032a45b869311"}, {"problem": 33, "code": "(fn repli [coll n]\n  ((fn go [xs i]\n     (if (<= i 0)\n       (go (next xs) n)\n       (when-let [f (first xs)]\n         (cons f (go xs (dec i))))))\n   coll n))", "user": "5488872ee4b0e286459a11d3"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "5485b402e4b0e286459a11b0"}, {"problem": 33, "code": "(fn [sequ x]\n  (apply mapcat list (take x (repeat (seq sequ)))))", "user": "547fbe01e4b0c51c1f4d7321"}, {"problem": 33, "code": "(fn [s n]\n  (loop [acc [] t 0 x s]\n    (cond\n     (= 0 (count x)) acc\n     (< t n) (recur (conj acc (first x)) (+ 1 t) x)\n     (= t n) (recur acc 0 (rest x)))))", "user": "52a803cee4b0c58976d9ac26"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "54893618e4b0e286459a11e0"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "540997ede4b0addc1aec66dd"}, {"problem": 33, "code": "(fn [x y] (apply concat (map #(take y (repeat %)) x)))", "user": "52457931e4b08ba239308107"}, {"problem": 33, "code": "#(apply mapcat list (repeat %2 %))", "user": "54899701e4b0e286459a11ea"}, {"problem": 33, "code": "(fn [xs n] (reduce #(apply (partial conj %1) (repeat n %2)) [] xs))", "user": "548af5b5e4b0e286459a11f8"}, {"problem": 33, "code": "(fn [col n] (mapcat #(repeat n %) col))", "user": "547c2c6ce4b0c51c1f4d72e3"}, {"problem": 33, "code": "(fn [coll rep]\n  (mapcat (fn [e]\n            (repeat rep e))\n          coll))", "user": "548c6673e4b0e286459a1209"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %1) xs))", "user": "548cd813e4b0e286459a1211"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "548cd637e4b0e286459a1210"}, {"problem": 33, "code": "(fn [coll n] (apply concat (map #(repeat n %) coll)))", "user": "5453b522e4b0e397800069d0"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "535f9a5ce4b04ce2eb3ed2de"}, {"problem": 33, "code": "(fn [xs n]\n  (apply concat (map #(repeat n %) xs)))", "user": "5188c249e4b0bdff0e072d54"}, {"problem": 33, "code": "(fn [a b]\n    (mapcat (fn [x] (repeat b x)) a)\n    )", "user": "540217e1e4b0df28a13c62cb"}, {"problem": 33, "code": "(fn [s n] (mapcat (partial repeat n) s))", "user": "548fa2dfe4b0e286459a1240"}, {"problem": 33, "code": "(fn [collection numberOfReplications]\n  (loop [result []\n         tempCollection collection]\n    (let [tail (rest tempCollection)\n          item0 (first tempCollection)\n          newResult (concat result (repeat numberOfReplications item0))]\n      (if (empty? tempCollection)\n        result\n      (recur newResult tail)))))", "user": "548f339ee4b0e286459a1233"}, {"problem": 33, "code": "(fn [l n] (mapcat #(concat (repeat n %)) l))", "user": "548f3ee4e4b0e286459a1237"}, {"problem": 33, "code": "(fn [sequence reps]\n  (mapcat #(repeat reps %) sequence))", "user": "4fbfbd4fe4b081705acca31c"}, {"problem": 33, "code": "(fn rep-seq\n  [my-seq n]\n  (mapcat #(take n (repeat %)) my-seq))", "user": "548f19a8e4b0e286459a1231"}, {"problem": 33, "code": "(fn [coll num] \n  (mapcat #(repeat num %) coll))", "user": "50f3bd98e4b041536e2eca3a"}, {"problem": 33, "code": "(fn [s c]\n  (reduce #(concat %1 (repeat c %2)) [] s))", "user": "54903056e4b0b312c081ff2e"}, {"problem": 33, "code": "#(if (> %2 1) (apply interleave (for [i (range %2)] %)) %)", "user": "5491bebbe4b0b312c081ff3c"}, {"problem": 33, "code": "(fn [coll n] \n  (mapcat identity (for [x coll\n      :let [y (repeat n x)]\n      ]\n  y)))", "user": "53c83f94e4b00fb29b2212af"}, {"problem": 33, "code": "(fn  [col n]\n  (apply concat (for [c col] (repeat n c))))", "user": "5243e37ae4b076204b44fae3"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "54926752e4b0b312c081ff44"}, {"problem": 33, "code": "(fn [s n] (reduce #(into %1 (repeat n %2)) [] s))", "user": "548f5086e4b0e286459a1239"}, {"problem": 33, "code": "(fn [x y] (mapcat (fn [c] (repeat y c)) x))", "user": "548f7bf1e4b0e286459a123b"}, {"problem": 33, "code": "(fn [coll n]\n  (apply concat\n         (map #(take n (repeat %)) coll)))", "user": "5493ccbbe4b0b312c081ff50"}, {"problem": 33, "code": "(fn [s c] \n  (apply concat \n    (map #(repeat c %)\n      s)))", "user": "54897284e4b0e286459a11e6"}, {"problem": 33, "code": "(fn qqq [a-seq n]\n  (let [helper (fn [res aa]\n                 (cond\n                  (empty? aa) res\n                  :else (recur (concat res (repeat n (first aa))) (rest aa))))]\n    (helper '() a-seq)))", "user": "51d26b0ae4b0d13b04db0d97"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(take n (repeat %) )  coll))", "user": "512b07f7e4b078b06821febb"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "547e6fd2e4b0c51c1f4d730b"}, {"problem": 33, "code": "(fn rep [c t] (reduce into [] (for [v c] (vec (repeat t v))) ))", "user": "5492164ee4b0b312c081ff3e"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "53bcdd41e4b0d9a98559a6c0"}, {"problem": 33, "code": "(fn repl [l n] (mapcat #(repeat n %1) l))", "user": "548c8115e4b0e286459a120c"}, {"problem": 33, "code": "(fn replicate [myseq n]\n          (apply concat (map #(repeat n %) myseq)))", "user": "5455510fe4b0e397800069df"}, {"problem": 33, "code": "(fn [s n] \n  (mapcat #(repeat n %) s))", "user": "53576356e4b04ce2eb3ed27a"}, {"problem": 33, "code": "(fn [col n-times]  (mapcat #(repeat n-times %1) col))", "user": "54973374e4b0b312c081ff6f"}, {"problem": 33, "code": "#(apply concat (apply map vector (take %2(repeat %1))))", "user": "549375e4e4b0b312c081ff4e"}, {"problem": 33, "code": "(fn [lst n] (mapcat identity (map #(repeat n %) lst)))", "user": "54965534e4b0b312c081ff65"}, {"problem": 33, "code": "( fn asdf [s n] (mapcat #(repeat n %) s))", "user": "4f0d6686535d0136e6c22318"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "548f37c7e4b0e286459a1234"}, {"problem": 33, "code": "(fn[xs n] \n  (apply concat (map #(repeat n %) xs)) \n  )", "user": "54975e99e4b0b312c081ff72"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "548ade6de4b0e286459a11f6"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "542dc7c7e4b0dad94371f2bd"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "549c3e0ce4b0f3d1d8e70f87"}, {"problem": 33, "code": "(fn eh [x n]\n  (if (empty? x)\n    '()\n    (concat (repeat n (first x)) (eh (rest x) n))))", "user": "549c8bbde4b0f3d1d8e70f8c"}, {"problem": 33, "code": "(fn rep [seq count]\n  (if (= count 1)\n    seq\n    (apply interleave (repeat count seq))))", "user": "5498c4cfe4b0b312c081ff85"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "54996971e4b0b312c081ff8d"}, {"problem": 33, "code": "(fn p33-rep-seq [coll mult]\n  (mapcat #(repeat mult %) coll))", "user": "543b12cce4b032a45b86932a"}, {"problem": 33, "code": "#(loop [acc [], li %, t %2] (if (empty? li) acc (recur (concat acc (repeat t (first li))) (rest li) t)))", "user": "54972b0ee4b0b312c081ff6e"}, {"problem": 33, "code": "#(mapcat (fn [x] (take %2 (repeat x))) %1)", "user": "548f11a0e4b0e286459a122d"}, {"problem": 33, "code": "#(for [x %1 y (range %2)] x)", "user": "549c22f7e4b0f3d1d8e70f86"}, {"problem": 33, "code": "(fn replicate-each-item [col n-times]\n  (mapcat #(repeat n-times %1) col))", "user": "548018d1e4b0c51c1f4d7326"}, {"problem": 33, "code": "#(mapcat (fn [x] (take %2 (repeat x))) %1)", "user": "549e5e52e4b0f3d1d8e70f9e"}, {"problem": 33, "code": "(fn [v n]\n (mapcat\n  #(repeat n %)\n  v))", "user": "549a999be4b0f3d1d8e70f6f"}, {"problem": 33, "code": "(fn [lst n] (if (= n 1) lst (apply interleave  (repeat n lst))))", "user": "549ea7e0e4b0f3d1d8e70fa3"}, {"problem": 33, "code": "#(apply concat (map (fn [v] (take %2 (repeat v))) %))", "user": "5499e23de4b03163384f4706"}, {"problem": 33, "code": "(fn [col n] (mapcat #(repeat n %) col ))", "user": "549c181ce4b0f3d1d8e70f83"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "54769c7ae4b0c51c1f4d72a8"}, {"problem": 33, "code": "#(if (= 1 %2) %1\n     (apply interleave (repeat %2 %1)))", "user": "5470cb10e4b094393f72dd65"}, {"problem": 33, "code": "#(reduce (fn [v x] (concat v (repeat %2 x))) [] %)", "user": "549def9ce4b0f3d1d8e70f99"}, {"problem": 33, "code": "(fn [a c]\n               (reduce (fn [r e]\n                         ((fn [pr pe pc]\n                            (if (> pc 0)\n                              (recur (concat pr (list pe)) pe (dec pc))\n                              pr)) r e c))\n                       '() a))", "user": "549cd548e4b0f3d1d8e70f91"}, {"problem": 33, "code": "#(reduce (fn [s x] (loop [s s n 0] \n               (if (= n %2) \n\t\t\t     s\n\t\t\t\t (recur (conj s x) (inc n))\n\t\t\t   )\n\t\t\t  )\n\t ) [] %)", "user": "549a176ce4b0f3d1d8e70f69"}, {"problem": 33, "code": "(fn [nums n] (mapcat #(take n (repeat %)) nums))", "user": "549c1713e4b0f3d1d8e70f82"}, {"problem": 33, "code": "(fn [coll times] (mapcat (fn [x] (repeat times x)) coll))", "user": "4e7e241a535db169f9c79705"}, {"problem": 33, "code": "(fn [coll cnt]\n  (for [x coll, y (range cnt)]\n    x))", "user": "549f7b51e4b0f3d1d8e70fb1"}, {"problem": 33, "code": "(fn [coll n]  (mapcat #(repeat n %) coll))", "user": "54908cc1e4b0b312c081ff32"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "50aa777fe4b056ee01935866"}, {"problem": 33, "code": "(fn [xs times] (mapcat #(take times (repeat %)) xs))", "user": "549dd591e4b0f3d1d8e70f98"}, {"problem": 33, "code": "(fn [coll r] \n  (mapcat #(repeat r %1) coll))", "user": "5487eb1de4b0e286459a11ca"}, {"problem": 33, "code": "(fn replicate-seq [l n]\n  (reduce concat (map #(repeat n %) l)))", "user": "52b9e920e4b07a9af57922c9"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %)", "user": "538fe171e4b0b51d73faae92"}, {"problem": 33, "code": "(fn rep [xs n]\n  (apply concat (map #(repeat n %) xs)))", "user": "5488537be4b0e286459a11cf"}, {"problem": 33, "code": "#(apply concat (map (fn [e] (repeat %2 e)) %))", "user": "53fe1b42e4b0de5c418485f1"}, {"problem": 33, "code": "(fn [m v] (apply concat (map #(repeat v %) m)))", "user": "54a1d643e4b09f271ff37c50"}, {"problem": 33, "code": "(fn [s times]\n  (loop [coll []\n         vals s]\n    (if (empty? vals) \n      coll\n      (recur (concat coll (for [i (range times)] (first vals))) (rest vals)))\n    )\n  )", "user": "545b0275e4b01be26fd74648"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "52e12ac5e4b09f7907dd141a"}, {"problem": 33, "code": "(fn my-replicate [v n]\n  (loop [xs v zs []]\n    (if (empty? xs)\n      (apply concat zs)\n      (let [[x & rxs] xs]\n        (recur rxs (conj zs (repeat n x)))))))", "user": "54a31fdae4b09f271ff37c64"}, {"problem": 33, "code": "(fn [col n] (if (= 1 n) (seq col) (apply interleave (take n (repeat col)))))", "user": "5450c81fe4b0e397800069a4"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "54a70af9e4b09f271ff37c93"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "54a6399ee4b09f271ff37c85"}, {"problem": 33, "code": "(fn [s, n] (mapcat #(repeat n %) s))", "user": "5461500be4b01be26fd7469f"}, {"problem": 33, "code": "(fn [xs n] (mapcat (partial repeat n) xs))", "user": "54a7336be4b09f271ff37c95"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "54a677a9e4b09f271ff37c88"}, {"problem": 33, "code": "(fn [s n]                                                                                                                                                                                                  \n  (reduce (fn [r e] (apply conj r (repeat n e))) [] s))", "user": "53403f42e4b085b17e897da8"}, {"problem": 33, "code": "(fn rs [x, y] \n   (\n     reduce \n      (\n        fn r [z1, z2] \n          (\n            concat z1 ((fn rn [q, w] (if (> w 0) (concat [q] (rn q (- w 1))) '())) z2 y)\n          )\n      ) \n      [] \n      x\n   )\n)", "user": "54a7efdee4b09f271ff37c9d"}, {"problem": 33, "code": "(fn [x y]\n  \n  (apply concat (apply concat (map \n   #(map (fn [a] (list %)) (range y)) \n   x)\n  \n  )))", "user": "54a7d707e4b09f271ff37c9b"}, {"problem": 33, "code": "(\n\tfn function [var numb] \n  \t(\n     if(= numb 1) var\n     (apply interleave (repeat numb var))\n     )\n)", "user": "548018e8e4b0c51c1f4d7333"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "50ec69e0e4b04edc3377704a"}, {"problem": 33, "code": "#(apply concat (apply map list (repeat %2 %1)))", "user": "54a70484e4b09f271ff37c91"}, {"problem": 33, "code": "(fn my-repeat [s x]\n  (if (empty? s)\n    '()\n    (concat (repeat x (first s)) (my-repeat (rest s) x))\n  )\n)", "user": "54982522e4b0b312c081ff7c"}, {"problem": 33, "code": "(fn [sq n] (mapcat #(repeat n %) sq))", "user": "54ab6773e4b09f271ff37cc8"}, {"problem": 33, "code": "(fn [c n] (reduce #(concat %1 (repeat n %2)) '() c))", "user": "549cc867e4b0f3d1d8e70f8f"}, {"problem": 33, "code": "(fn [c n] \n  (if (> n 1)\n  (apply interleave (repeat n c))\n  c))", "user": "52540bcce4b0541d1855b952"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "539f45dce4b0ca733b974497"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "54a854f5e4b09f271ff37ca2"}, {"problem": 33, "code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "user": "54ae6da2e4b09f271ff37cf2"}, {"problem": 33, "code": "(fn replicate-elements [s n]\n  (if (empty? s) []\n      (concat (repeat n (first s)) (replicate-elements (rest s) n))))", "user": "547884d7e4b0c51c1f4d72bd"}, {"problem": 33, "code": "(fn [s r]\n  (reduce (fn [memo, i] (apply conj memo (take r (repeat i)))) [] s))", "user": "532902f8e4b09d4e7a9b550e"}, {"problem": 33, "code": ";; #(if (< %2 2) (seq %1) (apply interleave (repeat %2 %1)))\n#(mapcat (partial repeat %2) %)", "user": "54ad9d76e4b09f271ff37ce6"}, {"problem": 33, "code": "(fn [s x] (mapcat (partial repeat x) s))", "user": "54b13dbce4b09f271ff37d1c"}, {"problem": 33, "code": "(fn [s n]\r\n    (if (= n 1)\r\n      s\r\n      (apply interleave (repeat n s))))", "user": "540459bfe4b0addc1aec6656"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "54af6fb0e4b09f271ff37d08"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "54b13a40e4b09f271ff37d1b"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "54ad4863e4b09f271ff37ce0"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "54ae541ae4b09f271ff37cef"}, {"problem": 33, "code": "(fn [coll rep]\n  (if (= rep 1)\n    coll\n   (apply interleave (apply concat (for [x (range rep)\n         y [coll]\n         :let [z [y]]]\n     z)))))", "user": "54af220ce4b09f271ff37d02"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "528e441be4b0239c8a67aed8"}, {"problem": 33, "code": "#(mapcat (fn [val] (repeat %2 val)) %1)", "user": "53e3e353e4b036ad0777e406"}, {"problem": 33, "code": "(fn [xs c]\n  (mapcat #(take c (repeat %)) xs))", "user": "54ab502fe4b09f271ff37cc4"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "54b04708e4b09f271ff37d11"}, {"problem": 33, "code": "(fn [values repetitions]\n  (reduce\n   #(concat %1 (repeat repetitions %2))\n   []\n   values))", "user": "5463c824e4b01be26fd746c5"}, {"problem": 33, "code": "(fn[x y] (mapcat #(repeat y %) x))", "user": "4fabbd3ee4b081705acca21e"}, {"problem": 33, "code": "(fn [x y] (mapcat #(replicate y %) x))", "user": "53e88247e4b036ad0777e489"}, {"problem": 33, "code": "#(reduce into [] (map (fn [x] (repeat %2 x)) %))", "user": "52a267c6e4b04e0c58e87bef"}, {"problem": 33, "code": "(fn [x n] (mapcat #(take n (repeat %)) x ))", "user": "54b050cee4b09f271ff37d13"}, {"problem": 33, "code": "(fn vardup [coll num] (mapcat (fn [ident] (repeatedly num #(identity ident))) coll))", "user": "533c5249e4b0e30313ee6cdd"}, {"problem": 33, "code": "(fn myreat [l n]\n  (mapcat #(repeat n %) l))", "user": "505d1b01e4b0e6aca564be04"}, {"problem": 33, "code": "(fn [l n] (mapcat #(repeat n %) l))", "user": "54b448f2e4b05787c3b1638e"}, {"problem": 33, "code": "(fn [l n] (reduce #(concat %1 (repeat n %2)) [] l))", "user": "54b2ec84e4b09f271ff37d33"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "50b42cbbe4b001349b2f4abe"}, {"problem": 33, "code": "#(apply mapcat list\n        (repeat %2 %1))", "user": "54b2d392e4b09f271ff37d2f"}, {"problem": 33, "code": "(fn dupseq\n  ([out in n]\n   (if (empty? in)\n     out\n     (dupseq (concat out (repeat n (first in))) (rest in) n)))\n  ([in n]\n   (dupseq [] in n))\n)", "user": "54b2e881e4b09f271ff37d32"}, {"problem": 33, "code": "(fn f\n  ( [coll]\n    (f coll 1)\n  )\n  ( [coll c]\n\t(reduce (fn [acc item] (println item) (into acc (repeat c item))) [] coll)\n  )\n)", "user": "54bb0f63e4b0ed20f4ff6ebc"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "54bad522e4b0ed20f4ff6eb8"}, {"problem": 33, "code": "#(reduce (fn [r x](concat r (repeat %2 x))) [] %)", "user": "54b45938e4b05787c3b1638f"}, {"problem": 33, "code": "(fn\n  [coll n]\n  (mapcat\n    #(repeat n %)\n    coll))", "user": "548db64ce4b0e286459a121c"}, {"problem": 33, "code": "(let\n  [\n    duplicateItem \n     (let\n       [\n          duplicateItemImpl (fn x [item cnt builder]\n                        (if (<= cnt 0)\n                          builder\n                          (x item (- cnt 1) (cons item builder))))\n        ]\n       (fn [item cnt] (duplicateItemImpl item cnt '()))\n      )\n    duplicateList (fn x [s cnt builder]\n                    (if (not(empty? s))\n                      (x (butlast s) cnt (concat (duplicateItem (last s) cnt) builder))\n                      builder)\n                    )\n   \n  ]\n  (fn [s cnt] (duplicateList s cnt '()))\n)", "user": "54ba8206e4b0ed20f4ff6eb6"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))\n\n;; Why won't this work?\n;; (fn [coll n] (apply interleave (repeat n coll)))", "user": "5484143de4b0e286459a1197"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5481be5fe4b0e286459a1172"}, {"problem": 33, "code": "(fn [xs n]\n   (mapcat #(repeat n %) xs))", "user": "54acf5c7e4b09f271ff37cdd"}, {"problem": 33, "code": "(fn [sq times] (apply concat (map #(repeat times %) sq)))", "user": "52ee9ac7e4b05e3f0be25ec9"}, {"problem": 33, "code": "(fn [sq n] (apply concat (map (fn [x] (repeat n x)) sq)))", "user": "54b6c24be4b0ed20f4ff6e7c"}, {"problem": 33, "code": "(fn [s n] (for [a s _ (range n)] a))", "user": "54bd04e7e4b0ed20f4ff6ed8"}, {"problem": 33, "code": "#(mapcat(fn [v] (repeat %2 v)) %1)", "user": "54b972bbe4b0ed20f4ff6ead"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "54543484e4b0e397800069d4"}, {"problem": 33, "code": "(fn[l n]\n  (loop [l (apply list l) nl []]\n    (if (empty? l)\n      (apply list nl)\n      (let [value (peek l)]\n        (recur (pop l) (apply conj nl (repeat n value))) \n        )         \n      )\n    )\n  )", "user": "54b90836e4b0ed20f4ff6e9d"}, {"problem": 33, "code": "(fn [x n] (if (< 1 n) (apply interleave (map (fn [y] x) (range n))) x))", "user": "54b40fe6e4b05787c3b1638a"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(take n (cycle (list %))) xs))", "user": "54be7772e4b0ed20f4ff6eea"}, {"problem": 33, "code": "#(mapcat identity (for [v %1] (repeat %2 v)))", "user": "54bec835e4b0ed20f4ff6ef7"}, {"problem": 33, "code": "#(apply mapcat list (repeat %2 %1))", "user": "54bd3aefe4b0ed20f4ff6edb"}, {"problem": 33, "code": "#(reduce concat (map (partial repeat %2) %1))", "user": "54bcd12be4b0ed20f4ff6ed7"}, {"problem": 33, "code": "(fn rep [s n]\n  (reduce \n   #(concat %1 (repeat n %2)) \n   []\n   s))", "user": "54bd91d7e4b0ed20f4ff6ee2"}, {"problem": 33, "code": "(fn [s n] (mapcat (fn [i] (repeatedly n #(identity i))) s))", "user": "548018d7e4b0c51c1f4d7328"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "54bf7d15e4b0ed20f4ff6f03"}, {"problem": 33, "code": "(fn replica[coll n]\n  (if (empty? coll)\n    coll\n    (concat\n     (repeat n (first coll))\n     (replica (rest coll) n))))", "user": "54b10d08e4b09f271ff37d18"}, {"problem": 33, "code": "(fn [l n]\n  (mapcat #(repeat n %) l))", "user": "54b95f3de4b0ed20f4ff6eab"}, {"problem": 33, "code": "#(if (= %2 1) (seq %1) (apply interleave (take %2 (repeat %1))))", "user": "54b331dbe4b09f271ff37d37"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "54bfc88ae4b0ed20f4ff6f09"}, {"problem": 33, "code": "#(mapcat (partial repeat %2)  %)", "user": "54aa665fe4b09f271ff37cb8"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "54a73c1fe4b09f271ff37c96"}, {"problem": 33, "code": ";(fn [s n]\n;  (loop [lists [] n n]\n;    (if (= 0 n)\n;      (if (= 1 (count lists))\n;        s\n;        (apply interleave lists))\n;      (recur (conj lists s) (dec n)))))\n\n#(mapcat (partial repeat %2) %1)", "user": "53838b9ee4b06839e8705ee1"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %)", "user": "53e73fe3e4b036ad0777e478"}, {"problem": 33, "code": "(fn [s times]\n     (reduce (fn [a b]\n         (concat a (repeat times b))\n      ) [] s))", "user": "54bbba99e4b0ed20f4ff6ec2"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat (partial repeat n) coll))", "user": "4e435681535dc968683fc4a1"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "54c31f1be4b045293a27f609"}, {"problem": 33, "code": "(fn [z c]\n  (loop [curr z result []]\n    (if (empty? curr)\n      result\n      (recur (rest curr) \n           (into result (repeat c (first curr)))))))", "user": "5314318ee4b08068f379ed13"}, {"problem": 33, "code": "(fn [lst n]\n  (mapcat #(repeat n %) lst))", "user": "54bebeb9e4b0ed20f4ff6ef4"}, {"problem": 33, "code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "user": "54c11fdae4b0ed20f4ff6f1b"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "54c5cc17e4b045293a27f624"}, {"problem": 33, "code": "(fn f [col x] (->> col\n                 (map #(repeat x %))\n                 (apply concat)))", "user": "5493d908e4b0b312c081ff52"}, {"problem": 33, "code": "#(mapcat (fn [input](repeat %2 input)) %1)", "user": "51e8ee6be4b07cae92c04bfd"}, {"problem": 33, "code": "(fn [a-seq num-reps]\n  (apply concat (map #(repeat num-reps %) a-seq)))", "user": "5235493ee4b05e80434a5064"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat (partial repeat n) s))", "user": "54c271b9e4b045293a27f602"}, {"problem": 33, "code": "#(let [s % t %2]\n  (reduce (fn [coll e]\n    (loop [w e x 0 y t z coll]\n      (if (= x y)\n          z\n          (recur w (inc x) y (conj z w)))))\n  [] s))", "user": "535774c2e4b04ce2eb3ed27c"}, {"problem": 33, "code": "(fn [xs n] (mapcat (partial repeat n) xs))", "user": "4f8be895e4b02e764a0a5184"}, {"problem": 33, "code": "(fn [coll count] (reduce #(concat %1 (repeat count %2)) [] coll))", "user": "546692aee4b01be26fd746e7"}, {"problem": 33, "code": "(fn [x n] \n  (if (= n 1) (seq x)\n    (apply interleave (repeat n x))))", "user": "5447e5b7e4b032a45b8693c4"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "548b8a50e4b0e286459a11ff"}, {"problem": 33, "code": "; this is probably not going to handle edge cases like [1 2 2 3]\n(fn dup [l n]\n  (mapcat #(repeat n %) l)\n)", "user": "54c82b27e4b045293a27f645"}, {"problem": 33, "code": "(fn dup [x n] (apply concat (reduce #(conj %1 (repeat n %2)) [] x)))", "user": "54be3ab6e4b0ed20f4ff6ee7"}, {"problem": 33, "code": "(fn repeat-seq [xs n]\n  (if (empty? xs)\n    xs\n    (concat\n      (repeat n (first xs))\n      (repeat-seq (rest xs) n))))", "user": "54c8d4a8e4b045293a27f654"}, {"problem": 33, "code": "(fn [x n] (mapcat #(repeat n %) x))", "user": "54c169ade4b0ed20f4ff6f24"}, {"problem": 33, "code": "(fn [c n] (reduce #(concat % (repeat n %2) ) [] c))", "user": "5339b53fe4b0e30313ee6cac"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "525b142fe4b0cb4875a45d05"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "54be792ee4b0ed20f4ff6eeb"}, {"problem": 33, "code": "(fn [s, n] (mapcat #(repeat n %) s))", "user": "54c05fd7e4b0ed20f4ff6f12"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "54c97cb3e4b045293a27f677"}, {"problem": 33, "code": "#(reduce (fn [res input] (into res (repeat %2 input))) [] %1)", "user": "54c9636fe4b045293a27f66e"}, {"problem": 33, "code": "(fn [v n] (mapcat #(repeat n %) v))", "user": "54b7f217e4b0ed20f4ff6e8f"}, {"problem": 33, "code": "(fn [l n]\n  (mapcat #(repeat n %) l))", "user": "54ca9ca8e4b057c6fda3a265"}, {"problem": 33, "code": "#(apply concat (apply map vector (repeat %2 %1)))", "user": "5432df22e4b0dad94371f2f5"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "52a0237de4b04e0c58e87bbe"}, {"problem": 33, "code": "#(reduce concat \n  (map (partial repeat %2) %))", "user": "535944d6e4b04ce2eb3ed296"}, {"problem": 33, "code": "(fn\n  [l n] (\n   \tapply concat (map #(take n (cycle [%])) l)\n  )\n)", "user": "54c9f165e4b045293a27f687"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "534aa5d3e4b084c2834f4a6b"}, {"problem": 33, "code": "(comp reverse (partial reduce into) #(map (partial repeat %2) %1))", "user": "54cbe00ee4b057c6fda3a285"}, {"problem": 33, "code": "(fn [xs n] (reduce #(apply conj %1 (repeat n %2)) [] xs))", "user": "54c641f8e4b045293a27f628"}, {"problem": 33, "code": "(fn [sq times] \n  (loop [acc [], s sq] \n    (if (empty? s) \n      acc \n      (recur (concat acc (repeat times (first s))) (rest s) \n))))", "user": "54bbe505e4b0ed20f4ff6ec5"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "54c97a56e4b045293a27f676"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "54cd651be4b057c6fda3a2a2"}, {"problem": 33, "code": "#(apply concat (map (fn [input](repeat %2 input)) %1))", "user": "54cbb0fde4b057c6fda3a27b"}, {"problem": 33, "code": "#(apply concat (for[i %1]\n                 (repeat %2 i)))", "user": "53f11139e4b0742d9025b0d8"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "541b1f25e4b01498b1a71a63"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "545ddac3e4b01be26fd74676"}, {"problem": 33, "code": ";#(reduce concat (for [x %] (repeat %2 x)))\n\n#(mapcat (fn [x] (repeat %2 x)) %)", "user": "546a6e9fe4b00cfc9eacc157"}, {"problem": 33, "code": "(fn [xs n] (apply concat (for [x xs]\n                           (repeat n x))))", "user": "4ea03f70535d7eef308072a1"}, {"problem": 33, "code": "(fn f [s n] \n  (if (> 2 n) s\n  (apply interleave (take n (repeat s)))))", "user": "54ce3790e4b057c6fda3a2ab"}, {"problem": 33, "code": "(fn [xs n]\n  (apply concat (map #(repeat n %) xs)))", "user": "54d03026e4b018d918be98de"}, {"problem": 33, "code": "(fn [lat n]\n  (reduce concat (map #(take n (repeat %)) lat)))", "user": "54d0f654e4b0e8a36923e5d6"}, {"problem": 33, "code": "(fn dup [[x & xs :as coll] n]\n  (if (empty? coll) []\n      (concat (repeat n x) (dup xs n))))", "user": "54b07c1ee4b09f271ff37d16"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "54d1cf2ee4b0e8a36923e5eb"}, {"problem": 33, "code": "#(if (> %2 1) (apply interleave (repeat %2 %1)) %1)", "user": "54d2b411e4b0e8a36923e5f9"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "54246d6de4b01498b1a71aec"}, {"problem": 33, "code": "(fn [res xs t] \n  (if (empty? xs) \n    res\n    (recur (concat res (take t (repeat (first xs)))) \n           (rest xs)\n           t)))\n'()", "user": "53c349f5e4b00fb29b22127a"}, {"problem": 33, "code": "(fn [x n] (if (<= n 1)\n            x\n            (apply interleave\n                   (repeat n x))))", "user": "54c13b87e4b0ed20f4ff6f20"}, {"problem": 33, "code": "(fn [x reps] (apply concat (map (fn [y] (repeat reps y)) x)))", "user": "54cad2d5e4b057c6fda3a26c"}, {"problem": 33, "code": "(fn replicate-seq\n  [c n]\n  (let [s (seq c)]\n    (when s\n      (concat (repeat n (first s)) (replicate-seq (rest s) n)))))", "user": "54d000c7e4b018d918be98d7"}, {"problem": 33, "code": "(fn dup [s n]\n  (if (empty? s)\n    '()\n    (concat (repeat n (first s))\n            (dup (rest s) n))))", "user": "54d26316e4b0e8a36923e5f2"}, {"problem": 33, "code": "(fn [xs n]\n  (reduce #(concat %1 (repeat n %2)) '() xs))", "user": "54d2892fe4b0e8a36923e5f7"}, {"problem": 33, "code": "(fn [x y] (apply concat (map #(repeat y %) x)))", "user": "54d37e4ce4b0e8a36923e608"}, {"problem": 33, "code": "(fn [v n] (mapcat #(repeat n %) v))", "user": "54d31cf1e4b0e8a36923e600"}, {"problem": 33, "code": "(fn [coll nrep] (mapcat (partial repeat nrep) coll))", "user": "4e3ff3a4535dc968683fc499"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "54cc26c1e4b057c6fda3a28a"}, {"problem": 33, "code": "(fn [l c]\n  (reduce concat (map (partial repeat c) l))\n)", "user": "54d6f22de4b0a52adc2e2023"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "54cc4156e4b057c6fda3a28c"}, {"problem": 33, "code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "user": "53bc10f5e4b047364c04450d"}, {"problem": 33, "code": "(fn [a b] (mapcat #(repeat b %) a))", "user": "54d5fbe9e4b0a52adc2e2014"}, {"problem": 33, "code": "(fn [s c] (mapcat #(repeat c %) s))", "user": "54c23252e4b045293a27f5fc"}, {"problem": 33, "code": "(fn [seq n] (mapcat #(repeat n %) seq))", "user": "54ce6eede4b057c6fda3a2ad"}, {"problem": 33, "code": "(fn [coll n] (mapcat (apply juxt (repeat n identity)) coll))", "user": "541d3c0fe4b01498b1a71a7e"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "54d75e4ce4b0a52adc2e202a"}, {"problem": 33, "code": "(fn [xs n] (if (= n 1) xs (apply interleave (repeat n xs))))", "user": "54d7ed8de4b0a52adc2e2034"}, {"problem": 33, "code": "(fn [coll times] (apply concat (map (fn [x] (repeat times x)) coll)))", "user": "54cb3497e4b057c6fda3a272"}, {"problem": 33, "code": "(fn [s n] (->> s (map #(repeat n %)) (apply concat)))", "user": "54d412e2e4b0a52adc2e1ffe"}, {"problem": 33, "code": "(fn foo [xs n]\n  (if (first xs)\n    (concat (repeat n (first xs))\n            (foo (rest xs) n))))", "user": "54d753ebe4b0a52adc2e2029"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "54725331e4b094393f72dd76"}, {"problem": 33, "code": "(fn [a b] (mapcat #(repeat b %) a))", "user": "54d70f40e4b0a52adc2e2027"}, {"problem": 33, "code": "(fn [coll n] (mapcat (partial repeat n) coll))", "user": "54361d92e4b032a45b8692f7"}, {"problem": 33, "code": "#(reduce concat [] (map (partial repeat %2) %))", "user": "54d267e0e4b0e8a36923e5f3"}, {"problem": 33, "code": "#(reverse (reduce (fn [lst itm]\n                     (apply conj lst (map (fn [_] itm) (range %2))))\n                   '()\n                   (seq %1)))", "user": "53f31dafe4b0742d9025b0f0"}, {"problem": 33, "code": "(fn ([s n] (apply concat (map #(repeat n %) s ))))", "user": "54d8cc38e4b0a52adc2e203e"}, {"problem": 33, "code": "#(mapcat (partial replicate %2) %1)", "user": "4ec66e84535d6d7199dd36cd"}, {"problem": 33, "code": "(fn [v n] (mapcat #(repeat n %) v))", "user": "4ee7d6d8535d93acb0a66870"}, {"problem": 33, "code": "(fn replicate1 [lst cnt]\n  (letfn [(rep-hlp [a cnt]\n            (cond\n              (= cnt 0) nil\n              :else (cons a (rep-hlp a (- cnt 1)))))]\n  (cond\n    (empty? lst) nil\n    (= 1 cnt) lst\n    :else (concat (rep-hlp (first lst) cnt) (replicate1 (rest lst) cnt)))))", "user": "534f8c9ae4b084c2834f4acd"}, {"problem": 33, "code": "(fn [lst x]\n  (apply concat (map (fn [e] (take x (repeat e))) lst)))", "user": "53664e3be4b0243289761e74"}, {"problem": 33, "code": "(fn dup [s c]\n  (if (empty? s) s\n    (concat\n     (map (fn [i] (first s)) (range c))\n     (dup (rest s) c))))", "user": "54c9e00be4b045293a27f683"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "4e580746535d8a8b8723a28c"}, {"problem": 33, "code": "(fn replicate-seq [coll times-repeated]\n  (mapcat #(repeat times-repeated %) coll))", "user": "4ea8570f535d7eef308072f8"}, {"problem": 33, "code": "(fn [l n] (mapcat #(repeat n %) l))", "user": "4fc4eb1ee4b081705acca354"}, {"problem": 33, "code": "#(reduce (fn [xs x] (concat xs (take %2 (repeat x)))) [] %1)", "user": "54d6c80ce4b0a52adc2e2020"}, {"problem": 33, "code": "(fn [s n] (apply concat (map #(repeat n %) s)))", "user": "54dbcbbde4b024c67c0cf774"}, {"problem": 33, "code": "#(mapcat (fn [e] (take %2 (cycle [e]))) %1)", "user": "54d55abfe4b0a52adc2e200f"}, {"problem": 33, "code": "(fn f [s n] (mapcat #(repeat n %) s))", "user": "54dd76c8e4b024c67c0cf794"}, {"problem": 33, "code": "(fn [s t] (mapcat identity (map #(repeat t %) s)))", "user": "53ba41c2e4b047364c0444f3"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "54ddb556e4b024c67c0cf798"}, {"problem": 33, "code": "(fn[s n] (mapcat #(repeat n %) s))", "user": "54d4ba98e4b0a52adc2e2004"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "54da46e5e4b024c67c0cf753"}, {"problem": 33, "code": "(fn [x y] (mapcat #(take y (repeat %) ) x))", "user": "54db33f1e4b024c67c0cf75d"}, {"problem": 33, "code": "(fn [coll times] (mapcat #(repeat times %) coll))", "user": "54d4b3a7e4b0a52adc2e2003"}, {"problem": 33, "code": "(fn repl\n  [[f & r] n]\n  (if (nil? f)\n    []\n    (concat (repeat n f) (repl r n))))", "user": "54e0e911e4b024c67c0cf7bc"}, {"problem": 33, "code": "(fn [x n] (mapcat #(repeat n %) x))", "user": "549a1fede4b0f3d1d8e70f6a"}, {"problem": 33, "code": "(fn [l n] (mapcat #(repeat n %) l))", "user": "52032921e4b030ee0c5b2713"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "54dae16de4b024c67c0cf758"}, {"problem": 33, "code": "(fn [c n] (mapcat (partial repeat n) c))", "user": "5066003ee4b0313a384e5647"}, {"problem": 33, "code": "(fn\n  [xs rep]\n  (apply concat (map #(repeat rep %) xs)))", "user": "54c72b19e4b045293a27f636"}, {"problem": 33, "code": "(fn [coll n]\n  (loop [c coll i n acc []]\n    (if (seq c)\n      (if (> i 0)\n        (recur c (dec i) (conj acc (first c)))\n        (recur (rest c) n acc))\n      acc)))", "user": "543c5200e4b032a45b86933e"}, {"problem": 33, "code": "(fn [_coll _times] (mapcat #(repeat _times %) _coll)\n  )", "user": "5458474ce4b01be26fd7461b"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "54d70bbfe4b0a52adc2e2026"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "54c8eb61e4b045293a27f658"}, {"problem": 33, "code": "(fn [v n]\n  (cond (zero? n) []\n  \t\t(= 1 n) v\n     \t:else (apply interleave (repeat n v))))", "user": "51b91b08e4b0e871ca4958f8"}, {"problem": 33, "code": "#(reduce (fn [s i] (concat s (repeat %2 i))) () %1)", "user": "54e3df6ae4b024c67c0cf7e3"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "504f9ae1e4b0a02f9cffde9c"}, {"problem": 33, "code": "#(apply concat (for [x %1] (repeat %2 x)))", "user": "54d104a5e4b0e8a36923e5d9"}, {"problem": 33, "code": "(fn [coll x]\n  (apply concat\n         (map\n           (fn [item]\n             (map\n               (fn [_] identity item)\n               (range x)))\n           coll)))", "user": "54e3bd3fe4b024c67c0cf7e0"}, {"problem": 33, "code": "(fn [c t] (mapcat #(repeat t %) c))", "user": "54b83ae9e4b0ed20f4ff6e95"}, {"problem": 33, "code": "#( let [temp (map (partial repeat %2) %1)] (apply concat temp) )", "user": "54e51c7be4b024c67c0cf7f7"}, {"problem": 33, "code": "(fn [l n] (reduce #(concat %1 (repeat n %2)) [] l) )", "user": "54df2609e4b024c67c0cf7a9"}, {"problem": 33, "code": "(fn [s n]\n    (mapcat #(repeat n %) s))", "user": "54ca130ce4b057c6fda3a250"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "4e68c465535d8ccf87e9fe8a"}, {"problem": 33, "code": "(fn replicate \n  [col n]\n  (reverse\n  (loop [result (empty col) col col] \n    (let [x (first col)]\n      (if (empty? col) result \n        (recur  \n          (concat (for [i (range n)]  x) result)\n         \n          (rest col)\n        )\n      )\n    )\n  ))\n)", "user": "547b4ec6e4b0c51c1f4d72d5"}, {"problem": 33, "code": "(fn [coll n] (reduce #(concat %1 (repeat n %2)) [] coll))", "user": "54df3c94e4b024c67c0cf7aa"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "54e5bdf2e4b024c67c0cf7fe"}, {"problem": 33, "code": "(fn [coll num] (reduce #(into  %1 (repeat num  %2)) [] coll))", "user": "54b5ce67e4b05787c3b163ac"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "54e2a779e4b024c67c0cf7d3"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "54ecd7dde4b024c67c0cf85c"}, {"problem": 33, "code": "(fn [s r] \n  (mapcat identity \n   (map #(take r (repeat %)) s)))", "user": "51515a19e4b03e678e393acc"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "52fa9435e4b047fd55836ffc"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "54caaa48e4b057c6fda3a267"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "518ba795e4b0f028e99addf0"}, {"problem": 33, "code": "#(apply \n  mapcat vector (repeat %2 %))", "user": "4ec1923f535dfed6da9c6db2"}, {"problem": 33, "code": "(fn repeat-each [xs nr]\n  (mapcat #(repeat nr %) xs))", "user": "54ecd716e4b024c67c0cf85a"}, {"problem": 33, "code": "(fn [l x] (reduce #(concat %1 (repeat x %2)) '() l))", "user": "54edcf96e4b024c67c0cf866"}, {"problem": 33, "code": "(fn [v n]\n   (reduce #(concat %1 (repeat n %2)) [] v))", "user": "53fcd574e4b0de5c418485d9"}, {"problem": 33, "code": "(fn [x y] (apply concat (map (partial repeat y) x)))", "user": "54ca80cee4b057c6fda3a261"}, {"problem": 33, "code": "(fn [coll n] (reduce concat (map #(repeat n %) coll)))", "user": "54df7922e4b024c67c0cf7ad"}, {"problem": 33, "code": "(fn [col, n] (apply concat (map #(repeat n %1) col)))", "user": "54f1b4e7e4b024c67c0cf8b5"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce (fn [acc e]\n            (apply (partial conj acc) (take n (repeat e))))\n          []\n          coll))", "user": "54a6baaee4b09f271ff37c8a"}, {"problem": 33, "code": "#(mapcat (fn [i] (take %2 (cycle [i]))) %1)", "user": "54f26266e4b024c67c0cf8c5"}, {"problem": 33, "code": "(fn [seq n]\n    (reduce #(concat %1 %2) (list) (map #(take n (repeat %)) seq)))", "user": "546ff835e4b00cfc9eacc1b4"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "54f0d3fde4b024c67c0cf8a6"}, {"problem": 33, "code": "(fn [xs y]  (mapcat (fn [i] (repeat y i)) xs))", "user": "5480cce5e4b0e286459a115f"}, {"problem": 33, "code": "(fn [col cnt] (mapcat #(repeat cnt %) col))", "user": "504e2d18e4b0f6ff3350c47a"}, {"problem": 33, "code": "(fn [c, i] (mapcat #(repeat i %) c))", "user": "4f598c87e4b0030a34fb2ada"}, {"problem": 33, "code": "(fn [c n] (apply concat (map #(repeat n %) c)))", "user": "54f2fe9fe4b050824f58f5b8"}, {"problem": 33, "code": "(fn [xs n]\n\t(reduce #(concat %1 (repeat n %2)) [] xs))", "user": "54c74a78e4b045293a27f637"}, {"problem": 33, "code": "#(if (== %2 1)\n   (seq %1)\n   (apply interleave (repeat %2 %1)))", "user": "54e606c3e4b024c67c0cf803"}, {"problem": 33, "code": "#(apply mapcat vector (repeat %2 %))", "user": "533f1584e4b085b17e897d9b"}, {"problem": 33, "code": "(fn [s n] (reduce #(concat %1 (repeat n %2)) [] s))", "user": "54f4e286e4b0f2f3c5226e8c"}, {"problem": 33, "code": "(fn f [xs x] (mapcat #(take x (repeat %)) xs))", "user": "4f0554aa535dcb61093f6bf5"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "54f2a1b8e4b024c67c0cf8cb"}, {"problem": 33, "code": "(fn duplicate [x n]\n  (reduce #(concat %1 (repeat n %2)) [] x))", "user": "54f64e99e4b0f2f3c5226ea4"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat (partial repeat n) coll))", "user": "54f3970fe4b050824f58f5c5"}, {"problem": 33, "code": "(fn [col n] (reduce (fn [coll x] (apply conj coll (repeat n x))) [] col))", "user": "54d0cedde4b0e8a36923e5d2"}, {"problem": 33, "code": "(fn [xs n]\n    (reduce #(concat %1 (repeat n %2)) [] xs))", "user": "50a3e2eae4b0ceace084d49a"}, {"problem": 33, "code": "(fn [x y] \n   (mapcat #(take y (repeat %)) x))", "user": "531c7bdde4b08068f379eda2"}, {"problem": 33, "code": "(fn [s n] (mapcat (partial repeat n) s))", "user": "54f5fb57e4b0f2f3c5226e9f"}, {"problem": 33, "code": "(fn [x y] (apply concat(map #(repeat y %) x)))", "user": "54eca495e4b024c67c0cf855"}, {"problem": 33, "code": "(fn [coll times]\n   (mapcat #(repeat times %) coll))", "user": "54e1197fe4b024c67c0cf7c0"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "52ca9513e4b071a8d36bd3e4"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce #(apply conj %1 (repeat n %2)) [] coll))", "user": "54edfa10e4b024c67c0cf868"}, {"problem": 33, "code": "(fn [c n] (reduce #(concat %1 (repeat n %2)) [] c))", "user": "54ef4a1ee4b024c67c0cf883"}, {"problem": 33, "code": "#(if (= 1 %2) %1 (apply interleave (map (fn [x] %1) (range %2))))", "user": "54eee3a3e4b024c67c0cf879"}, {"problem": 33, "code": "(fn [coll x]\n  (mapcat #(repeat x %) coll))", "user": "54d9366ce4b0a52adc2e204e"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "539c736ce4b0b51d73faaf2b"}, {"problem": 33, "code": "#(apply concat (map (partial repeat %2) %1))", "user": "54f9920ee4b01ecee9d8883f"}, {"problem": 33, "code": "(fn n-replicate\n  [coll n]\n  (loop [remaining coll\n         res []\n         i n]\n    (if (empty? remaining)\n      res\n      (if (= i 0)\n        (recur (rest remaining) res n)\n        (recur remaining (conj res (first remaining)) (dec i))))))", "user": "54f39cd6e4b050824f58f5c6"}, {"problem": 33, "code": "(fn [coll n]\n  (if (= n 1)\n    coll\n    (apply interleave (repeat n coll))))", "user": "54f49c39e4b0f2f3c5226e81"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(concat (repeat n %)) coll))", "user": "54d321b3e4b0e8a36923e602"}, {"problem": 33, "code": "(fn [s n] (reduce concat (map #(repeat n %) s)))", "user": "54f4adc8e4b0f2f3c5226e86"}, {"problem": 33, "code": "(fn[x y] (reduce #(concat %1 (repeat y %2)) [] x))", "user": "54f4a457e4b0f2f3c5226e83"}, {"problem": 33, "code": "(fn [xs n]\n  (mapcat (partial repeat n)\n          xs))", "user": "521d064fe4b0c4ef0be830a8"}, {"problem": 33, "code": "#(if (= %2 1) %1 (apply interleave (for [x (range %2)] %1)))", "user": "54e0a9c3e4b024c67c0cf7b5"}, {"problem": 33, "code": "(fn [coll n]\n  (loop [coll coll acc []]\n    (if (empty? coll)\n      acc\n      (recur (rest coll) (concat acc (repeat n (first coll)))))))", "user": "54fdbe3fe4b07d26eda61d3b"}, {"problem": 33, "code": "(fn [col x]\n  (loop [result [] rest col]\n    (if (empty? rest)\n      result\n      (recur (concat result (repeat x (first rest))) (next rest)))))", "user": "541f89a5e4b01498b1a71a99"}, {"problem": 33, "code": "(fn replicate [xs n]\n  (if (empty? xs)\n    xs\n    (apply conj (replicate (rest xs) n) (repeat n (first xs)))))", "user": "54fd93bbe4b07d26eda61d36"}, {"problem": 33, "code": "(fn [xs n]  \n  (loop [ys xs acc []]\n   (if (empty? ys) \n     acc\n     (recur (rest ys) (apply conj acc (repeat n (first ys))))\n     )\n  ))", "user": "54f73502e4b01ecee9d88817"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(concat (repeat n %)) coll))", "user": "54f9d900e4b01ecee9d88844"}, {"problem": 33, "code": "(fn [x n] (mapcat (partial repeat n) x))", "user": "50e09f60e4b061dbdced7237"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "54ff2342e4b07d26eda61d49"}, {"problem": 33, "code": "(fn [s n] (reduce #(concat %1 (repeat n %2)) [] s))", "user": "54febf4be4b07d26eda61d45"}, {"problem": 33, "code": "(fn [l n](mapcat #(repeat n %1) l))", "user": "54fc7d89e4b07d26eda61d2b"}, {"problem": 33, "code": "#(reduce concat (map (partial repeat %2) %1))", "user": "4f03e60d535dcb61093f6b7a"}, {"problem": 33, "code": "(fn f [s n]\n  (reduce #(reduce conj %1 %2) [] (map #(repeat n %1) s)))", "user": "54ff6084e4b07d26eda61d50"}, {"problem": 33, "code": "(fn [s n]\n  (loop [rem s\n         acc '()]\n    (if (empty? rem)\n      acc\n      (recur (rest rem) (concat acc (repeat n (first rem)))))))", "user": "5498e155e4b0b312c081ff86"}, {"problem": 33, "code": "(fn [coll x] (mapcat #(repeat x %) coll))", "user": "54eea988e4b024c67c0cf875"}, {"problem": 33, "code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "user": "5280539ce4b0757a1b1713f3"}, {"problem": 33, "code": "(fn [x n] (reduce concat (map #(take n (repeat %)) x)))", "user": "54edc818e4b024c67c0cf865"}, {"problem": 33, "code": "(fn [li times]\n  (for [x li y (range times)]\n  x\n  )\n)", "user": "55034bf0e4b086ebe8a79c6d"}, {"problem": 33, "code": "#(mapcat (fn [input](repeat %2 input)) %1)", "user": "541c5b3be4b01498b1a71a75"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %1) coll))", "user": "54ff074de4b07d26eda61d47"}, {"problem": 33, "code": "(fn [x y]\n  (mapcat #(repeat y %) x))", "user": "534fa9dae4b084c2834f4acf"}, {"problem": 33, "code": "(fn [coll r] (mapcat #(repeat r %) coll))", "user": "54f773bfe4b01ecee9d8881f"}, {"problem": 33, "code": "(fn\n  [x1 x2]\n  (loop [i 0 j '()]\n    (if (= i (count x1))\n      (reverse j)\n      (recur (inc i) (into j (repeat x2 (nth x1 i)))))))", "user": "54bcab07e4b0ed20f4ff6ed5"}, {"problem": 33, "code": "#(if (= %2 1) %1 (apply interleave (take %2 (repeat %1))))", "user": "54f6f00fe4b01ecee9d88814"}, {"problem": 33, "code": "(fn [coll n] (apply concat (for [x coll] (repeat n x))))", "user": "55058a4fe4b086ebe8a79c89"}, {"problem": 33, "code": "#(if (= %2 1) %1 (apply interleave (take %2 (repeat %1))))", "user": "54b67463e4b05787c3b163bc"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "54e24a05e4b024c67c0cf7ce"}, {"problem": 33, "code": "(fn [s n] \n  (reduce concat (map (partial repeat n) s)))", "user": "53213810e4b09d4e7a9b54b0"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(concat (repeat n %)) coll))", "user": "55088bb3e4b06e50f9beb10c"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce (fn [new-coll element]\n            (concat new-coll (repeat n element)))\n          ()\n          coll))", "user": "54ab1b5ae4b09f271ff37cc2"}, {"problem": 33, "code": "(fn [x n] (mapcat #(repeat n %) x))", "user": "543be8f0e4b032a45b869337"}, {"problem": 33, "code": "(fn [coll n] \n  (reduce #(apply conj %1 (repeat n %2)) [] coll))", "user": "550615c0e4b021ccfedb9696"}, {"problem": 33, "code": "(fn rep [inseq times] \n    (reduce #(concat %1 (repeat times %2)) [] inseq))", "user": "54f09599e4b024c67c0cf89d"}, {"problem": 33, "code": "(fn [s n] (mapcat (fn [x] (repeat n x)) s))", "user": "550aeddae4b06e50f9beb135"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "54b31445e4b09f271ff37d35"}, {"problem": 33, "code": "(fn [myseq mycount] (reduce concat (map #(repeat mycount %) myseq)))", "user": "55076bf6e4b021ccfedb96a6"}, {"problem": 33, "code": "(fn [ys x]\n  (mapcat (partial repeat x) ys))", "user": "54f904c2e4b01ecee9d88832"}, {"problem": 33, "code": "(fn  [xs cnt]\n  (mapcat #(repeat cnt %) xs)\n)", "user": "5351fca5e4b084c2834f4aec"}, {"problem": 33, "code": "#(mapcat (fn [a] (take %2 (iterate identity a))) %1)", "user": "5505ceb3e4b086ebe8a79c8b"}, {"problem": 33, "code": "#(reduce concat (for [x %1] (for [y (range %2)] x)))", "user": "5501de12e4b07d26eda61d7b"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "550ccedfe4b06e50f9beb158"}, {"problem": 33, "code": "#(mapcat (fn [x] (take %2 (cycle [x]))) %1)", "user": "550e0373e4b06e50f9beb162"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %)", "user": "550609b3e4b021ccfedb9695"}, {"problem": 33, "code": "(fn [coll val] (apply concat (map #(repeat val %) coll)))", "user": "550d4906e4b06e50f9beb15b"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "53f506c1e4b0db01ade6f9c8"}, {"problem": 33, "code": "(fn [col cnt] (apply concat (map #(repeat cnt %) col)))", "user": "543d07e8e4b032a45b869346"}, {"problem": 33, "code": "(fn [s n]\n           (loop [rem-s s res []]\n             (if (seq rem-s)\n               (recur (rest rem-s)\n                      (apply conj res\n                            (repeat n (first rem-s))))\n               res)))", "user": "54c3747de4b045293a27f60e"}, {"problem": 33, "code": "(fn n-rep [s n]\n  (mapcat #(repeat n %) s))", "user": "550c55d0e4b06e50f9beb14d"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce into [] (map (partial repeat n) coll)))", "user": "54d1b6ffe4b0e8a36923e5e6"}, {"problem": 33, "code": "(fn number33 [xs n]\n  (apply mapcat list (repeat n xs)))", "user": "54074fc5e4b0addc1aec66b6"}, {"problem": 33, "code": "#(apply concat (map repeat (repeat %2) %))", "user": "5507cfd3e4b021ccfedb96ad"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "550fdc1de4b06e50f9beb17d"}, {"problem": 33, "code": "(fn [args number]\n   (reduce (fn [x y] (println x) (if (nil? x) (concat [] (repeat number y)) (concat x (repeat number y)))) nil args))", "user": "5508102ee4b021ccfedb96b0"}, {"problem": 33, "code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "user": "55101237e4b06e50f9beb181"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5426fb8fe4b01498b1a71b1f"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "550e8e04e4b06e50f9beb167"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce #(concat %1 (take n (repeat %2))) '() coll))", "user": "540a4f20e4b0addc1aec66ef"}, {"problem": 33, "code": "(fn [coll n] (reduce into [] (map #(take n (repeat %)) coll)))", "user": "4fa5c8dde4b081705acca1af"}, {"problem": 33, "code": "#(apply concat  (map (fn [num] (repeat %2 num)) %1))", "user": "54ccf9d5e4b057c6fda3a295"}, {"problem": 33, "code": "(fn [base repeats] \n  (apply concat\n   (map \n    #(repeat repeats %)\n    base)\n         ))", "user": "54cbd97ae4b057c6fda3a283"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "5510f734e4b06e50f9beb18f"}, {"problem": 33, "code": "(fn [col n] (if (= 1 n) col (apply interleave (repeat n col))))", "user": "55131b1be4b055c2f668d4bf"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce (fn [out item]\n           (concat out (repeat n item))) [] coll))", "user": "542725fce4b01498b1a71b22"}, {"problem": 33, "code": "(fn [x n] (mapcat  #(reduce (fn [a b] (conj a %)) () (range n) ) x))", "user": "5512b15ae4b055c2f668d4b5"}, {"problem": 33, "code": "(fn replicate-a-sequence-solution\n  [coll n] ;; update args as needed\n  (apply concat\n         (reduce #(conj %1 (repeat n %2)) [] coll)))", "user": "50c113bee4b096f585049c37"}, {"problem": 33, "code": "(fn [seq n] (reduce #(apply \n                     conj %1 (repeat n %2)) [] seq))", "user": "5511fd7ee4b06e50f9beb19e"}, {"problem": 33, "code": "(fn replicate-sequence [lst n]\n  (if (empty? lst) nil\n    (concat (replicate n (first lst)) (replicate-sequence (rest lst) n))))", "user": "54c8ac49e4b045293a27f64e"}, {"problem": 33, "code": "(fn [a b] (reduce concat (map #(take b (iterate identity %)) a)))", "user": "532018efe4b08068f379edcd"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5515b138e4b055c2f668d4ed"}, {"problem": 33, "code": "(fn [s n] (apply concat (reduce (fn [prev el] (conj prev (repeat n el))) '[] s)))", "user": "5514a60fe4b055c2f668d4d7"}, {"problem": 33, "code": "(fn [args c] (reduce #(apply conj %1 (repeat c %2)) [] args))", "user": "551535cee4b055c2f668d4df"}, {"problem": 33, "code": "(fn [s n] (mapcat (partial repeat n) s))", "user": "55164856e4b06a49daca83b3"}, {"problem": 33, "code": "#(reduce concat (map (partial repeat %2) %1))", "user": "55154abce4b055c2f668d4e0"}, {"problem": 33, "code": "(fn [l n] (reduce into [] (for [x l] (for [y (range n)] x))))", "user": "5510aa92e4b06e50f9beb188"}, {"problem": 33, "code": "#(apply concat (map (fn [e] (take %2 (repeat e))) %1))", "user": "50f02de7e4b0bdaecbb47db0"}, {"problem": 33, "code": "(fn [xs n] (apply concat (for [x xs] (take n (repeat x)))))", "user": "54d127b7e4b0e8a36923e5de"}, {"problem": 33, "code": "(fn [seq n]\n  (loop [s seq i 0 r ()]\n    (if (empty? s)\n      (reverse r)\n      (if (= i n)\n        (recur (rest s) 0 r)\n        (recur s (inc i) (conj r (first s)))))))", "user": "55151417e4b055c2f668d4da"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "52e087dde4b09f7907dd1412"}, {"problem": 33, "code": "(fn [xs n]\n  (->> xs\n       (map #(take n (repeat %)))\n       (reduce concat)\n  ))", "user": "51bb08a4e4b0fe3ecfb46446"}, {"problem": 33, "code": "(fn [s n]\n  (reduce #(apply conj %1 (repeat n %2))\n          []\n          s))", "user": "551a64cde4b091ff45eda996"}, {"problem": 33, "code": "(fn [c n]\n  (mapcat #(take n (repeat %))\n          c))", "user": "55170dd9e4b06a49daca83bd"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "54e0bb4fe4b024c67c0cf7b8"}, {"problem": 33, "code": "(fn [xs c] (mapcat #(repeat c %) xs))", "user": "514f0a28e4b019235f6c059a"}, {"problem": 33, "code": "#(mapcat (fn [input] (repeat %2 input)) %1)", "user": "52f49268e4b05e3f0be25f22"}, {"problem": 33, "code": "(fn [seqn, n] (reduce (fn [s i] (concat s (repeat n i))) [] seqn))", "user": "5519c157e4b00ace28fe6e32"}, {"problem": 33, "code": "(fn replic [x n]\n  (if (empty? x) '()\n    (concat\n    (repeat n (first x)) (replic (rest x) n))))", "user": "53504a7de4b084c2834f4ad9"}, {"problem": 33, "code": "(fn [s n] (apply concat (map #(repeat n %) s)))", "user": "550ff2a3e4b06e50f9beb17f"}, {"problem": 33, "code": "(fn \n  [coll n]\n  (reduce concat (map #(repeat n %) coll))\n  )", "user": "5510d948e4b06e50f9beb18d"}, {"problem": 33, "code": "(fn dupn [l n]\n  (letfn [(ntimes [x n]\n                  (if (= n 0)\n                    '()\n                    (cons x (ntimes x (- n 1)))))]\n  (if (empty? l)\n    '()\n    (apply conj (dupn (rest l) n) (ntimes (first l) n)))))", "user": "551c6bcee4b07993ea3788df"}, {"problem": 33, "code": "(fn\n   [xs n]\n   (loop [xs xs acc []]\n     (if (empty? xs)\n       acc\n       (recur (rest xs) (apply conj acc (repeat n (first xs)))))))", "user": "551a21ece4b091ff45eda993"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "503f923fe4b00d1a725ff2ad"}, {"problem": 33, "code": "(fn foo\n     [coll n] (if (empty? coll) () (into (foo (rest coll) n) (repeat n (first coll)))))", "user": "5509bec5e4b06e50f9beb121"}, {"problem": 33, "code": "#(if (= 1 %2) % (apply interleave (repeat %2 %)))", "user": "54126d0ce4b01498b1a719d5"}, {"problem": 33, "code": "#(reduce concat (map (partial repeat %2) %1))", "user": "551ed214e4b08d5046aa8a4d"}, {"problem": 33, "code": "(fn [lst rep] (reduce (fn [m x] (concat m (take rep (cycle [x]) ))) '() lst))", "user": "551589cee4b055c2f668d4e9"}, {"problem": 33, "code": "(fn dupn\n  [l N]\n  (loop [l l out [] n N]\n    (cond (empty? l) out\n          (= n 1) (recur (rest l) (conj out (first l)) N)\n          :else (recur l (conj out (first l)) (- n 1)))))", "user": "551afdf8e4b07993ea3788cb"}, {"problem": 33, "code": "(fn dup[xs n]\n  (mapcat (fn[x] (repeat n x)) xs)\n  )", "user": "4dd76bf9535d2dad7130b5d1"}, {"problem": 33, "code": "(fn [x y] (reverse (reduce (fn [a b] (into a (repeat y b))) '() x)))", "user": "5517f5c5e4b06a49daca83c7"}, {"problem": 33, "code": "(fn [vals n]\n  (if (= 1 n)\n    vals\n    (apply interleave (repeat n vals))))", "user": "55183a11e4b06a49daca83ca"}, {"problem": 33, "code": "(fn [xs cnt] \n  (mapcat #(repeat cnt %) xs)\n)", "user": "5515f96ce4b055c2f668d4f7"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "551ecb76e4b08d5046aa8a4c"}, {"problem": 33, "code": "(fn repeatSeq [col num] \n   (if (= col nil) []\n     (concat (repeat num (first col)) (repeatSeq (next col) num))))", "user": "55204412e4b08d5046aa8a5f"}, {"problem": 33, "code": "#((fn foo [x] (if (empty? x) \n                []\n                (concat (take %2 (repeat (first x))) (foo (rest x)))\n                )\n    ) %1)", "user": "5520974be4b08d5046aa8a63"}, {"problem": 33, "code": "(fn [coll n]\n   (mapcat #(repeat n %) coll))", "user": "52b36925e4b0c58976d9ad0b"}, {"problem": 33, "code": "(fn [x n] (mapcat #(repeat n %) x))", "user": "551c66dae4b07993ea3788de"}, {"problem": 33, "code": "#(for [x %1 y (range %2)] x)", "user": "514504c2e4b021a5ff8301fc"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "55201d18e4b08d5046aa8a5d"}, {"problem": 33, "code": "(fn mreplicate [coll n]\n  (reduce concat (map #(take n (repeat %)) coll)))", "user": "50c6052ce4b0c9dc10d15c56"}, {"problem": 33, "code": "(fn [s n]\n  (loop [x s y '()]\n    (if (empty? x)\n      (reverse y)\n      (recur\n       (rest x)\n       (loop [i 1 z (first x) w y]\n         (if (> i n)\n           w\n           (recur (inc i) z (cons z w))\n           ))))))", "user": "551b8e2ae4b07993ea3788d3"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "552356fae4b0882d96d091af"}, {"problem": 33, "code": "#(apply concat (for [s %1] (take %2 (cycle [s]))))", "user": "55205564e4b08d5046aa8a60"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "53566545e4b04ce2eb3ed267"}, {"problem": 33, "code": "(fn [xs n]\n  (reduce (fn [x y] \n            (concat x (repeat n y))) \n          [] xs) )", "user": "551ee974e4b08d5046aa8a50"}, {"problem": 33, "code": "(fn [s x] (mapcat (partial repeat x) s))", "user": "5522cd9ae4b0882d96d091ab"}, {"problem": 33, "code": "(fn [thelist n]\n  (let [r (fn [l x]\n            (loop [ll l nn 0]\n              (if (= nn n) \n                ll \n                (recur (conj ll x) (inc nn)))\n              )\n\n            )]\n    (reduce r [] thelist)\n    ))", "user": "54e84d1ee4b024c67c0cf822"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "55092319e4b06e50f9beb113"}, {"problem": 33, "code": "(fn\n\t[l n]\n\t(reduce\n\t\t#(concat % (repeat n %2))\n\t\t[]\n\t\tl\n\t\t)\n\t)", "user": "550b5a53e4b06e50f9beb142"}, {"problem": 33, "code": "(fn duplicate[coll n]\n     (apply concat (map #(repeat n %) coll))\n     )", "user": "55240916e4b0882d96d091b6"}, {"problem": 33, "code": "(fn [coll anum]\n         (for [v coll x (range anum)] v)\n         )", "user": "533c2605e4b0e30313ee6cd7"}, {"problem": 33, "code": "(fn [s n]\n  (if (= n 1)\n    s\n    (apply interleave (repeat n s))))", "user": "55253217e4b0882d96d091ce"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "53bed4b5e4b0c98a41f5cc94"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "5515649fe4b055c2f668d4e3"}, {"problem": 33, "code": "#(mapcat (fn [i] (repeat %2 i)) %1)", "user": "552621d0e4b0ffed3738f914"}, {"problem": 33, "code": "(fn [coll n] (reduce #(apply (partial conj %1) (repeat n %2)) [] coll))", "user": "55218bf0e4b0882d96d09196"}, {"problem": 33, "code": "(fn [x n]\n  (apply concat (map #(repeat n %) x ))\n)", "user": "55252392e4b0882d96d091cc"}, {"problem": 33, "code": "(fn answer [col times]\n  (mapcat identity (map (fn [item] (repeat times item)) col))\n)", "user": "5524f21fe4b0882d96d091c7"}, {"problem": 33, "code": "(fn [mylist n]\n  (apply concat(map #(repeat n %) mylist)))", "user": "55256426e4b0ffed3738f905"}, {"problem": 33, "code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "user": "55280930e4b0ffed3738f93b"}, {"problem": 33, "code": "(fn [ary count] (apply concat (map #(repeat count %) ary)))", "user": "54a8fdcee4b09f271ff37ca9"}, {"problem": 33, "code": "(fn [s n] (mapcat #(replicate n %) s))", "user": "5484fab9e4b0e286459a11a6"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "505106fee4b05ab4c7e07d38"}, {"problem": 33, "code": "(fn [xs y]\n  (mapcat #(repeat y %1) xs))", "user": "55295b5de4b0ffed3738f949"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "552a8bbae4b0ffed3738f956"}, {"problem": 33, "code": "(fn f [s n]\n  (let [f*\n        (fn [acc s*]\n          (concat acc (repeat n s*)))]\n    (reduce f* [] s)))", "user": "55253799e4b0882d96d091cf"}, {"problem": 33, "code": "(fn [mylist n] \n  (apply concat \n    (map #(repeat n %) mylist)))", "user": "552bbf5ae4b0ffed3738f967"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "55249f64e4b0882d96d091c6"}, {"problem": 33, "code": "(fn replicate-seq [coll amount] \n    (when (not-empty coll)\n      (concat [] (repeat amount (first coll)) (replicate-seq (rest coll) amount))\n  ))", "user": "552689cfe4b0ffed3738f91e"}, {"problem": 33, "code": "(fn [sIn n]\n  (loop [\n         sIn sIn\n         sOut '()\n         ]\n    (if (empty? sIn)\n      sOut\n      (recur (rest sIn) (concat sOut (take n (iterate identity (first sIn)))))\n      )\n    )\n  )", "user": "5528ecd1e4b0ffed3738f942"}, {"problem": 33, "code": "(fn [coll number] (loop [c coll acc []]\n                    (if (empty? c) acc\n                      (recur (rest c) (reduce conj acc (repeat number (first c)))))))", "user": "54e4edcae4b024c67c0cf7f3"}, {"problem": 33, "code": "#(mapcat (fn [s] (repeat %2 s)) %)", "user": "55297a7ae4b0ffed3738f94b"}, {"problem": 33, "code": "(fn replicate [s n]\n  (reduce #(concat %1 (repeat n %2)) [] s))", "user": "552d487ee4b076ab5578f7e4"}, {"problem": 33, "code": "(fn [xs n]\n  (apply concat (map (fn [i] (take n (repeat i))) xs)))", "user": "5524120fe4b0882d96d091b7"}, {"problem": 33, "code": ";(fn silly-dup\n;  [[x & xs] cnt]\n;  (if x\n;    (concat (take cnt (repeat x)) (silly-dup xs cnt))\n;    []))\n;\n(fn [coll n] \n  (mapcat #(repeat n %) coll))", "user": "550d9452e4b06e50f9beb15d"}, {"problem": 33, "code": "(fn [l reps] \n  (mapcat #(repeat reps %1) l))", "user": "552e1c98e4b076ab5578f7ee"}, {"problem": 33, "code": "#(if (not= 1 %2) (apply interleave (repeat %2 %1)) %1)", "user": "552bc0f5e4b0ffed3738f968"}, {"problem": 33, "code": "(fn [s n] (loop [remaining s collected '()]\n            (if (empty? remaining)\n              collected\n              (recur (rest remaining) (concat collected (repeat n (first remaining)))))))", "user": "551ebcd7e4b08d5046aa8a4a"}, {"problem": 33, "code": "(fn [coll number] (mapcat #(repeat number %) coll))", "user": "54db3d82e4b024c67c0cf75f"}, {"problem": 33, "code": "(fn [s n]\n         (mapcat (fn [x] (repeat n x)) s)\n         )", "user": "552d9013e4b076ab5578f7ea"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5531e445e4b09218d5f44f76"}, {"problem": 33, "code": "(fn repeat-elements [xs n] (if (= n 1) xs (apply interleave (repeat n xs))))", "user": "55041b5ee4b086ebe8a79c78"}, {"problem": 33, "code": "(fn [c n]\n  (reverse (reduce into '() (map (fn [i] (repeat n i)) c))))", "user": "5530b827e4b076ab5578f818"}, {"problem": 33, "code": "(fn [x N] (reduce (fn [list item] (concat list (repeat N item))) [] x))", "user": "553024c3e4b076ab5578f80d"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "534da51fe4b084c2834f4aa4"}, {"problem": 33, "code": "(fn [x n]  \n   (mapcat #(repeat n %) x))", "user": "552bab7fe4b0ffed3738f966"}, {"problem": 33, "code": "#(apply concat (map (partial repeat %2) %1))", "user": "550e52dbe4b06e50f9beb165"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce (fn [r e]\n            (concat r (take n (repeat e))))\n          '()\n          coll))", "user": "51a7fe50e4b08d8ec191b803"}, {"problem": 33, "code": "(fn [xs n] (apply concat (map #(repeat n %) xs)))", "user": "55158345e4b055c2f668d4e8"}, {"problem": 33, "code": "(fn [xs n] (mapcat (fn [x] (repeat n x)) xs))", "user": "55330d7fe4b09218d5f44f88"}, {"problem": 33, "code": "(fn [coll n] (apply concat (map #(repeat n %) coll)))", "user": "4df247b8535d08e6dec9fe25"}, {"problem": 33, "code": "(fn [xs n]\n  (reduce (fn [rs x] (concat rs (for [i (range n)] x))) [] xs))", "user": "55316b8ae4b076ab5578f825"}, {"problem": 33, "code": "(fn [lst, n]\n\t(mapcat (comp (partial take n) cycle list) lst)\n)", "user": "5535e9b8e4b09218d5f44fb3"}, {"problem": 33, "code": "(fn [lst n] (mapcat (partial repeat n) lst))", "user": "553698fae4b09218d5f44fc0"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "4e443201535dc968683fc4a7"}, {"problem": 33, "code": "(fn [lst n] (mapcat (fn [x] (repeat n x)) lst))", "user": "5448616be4b032a45b8693c9"}, {"problem": 33, "code": "(fn [x y]\n  (reduce concat\n    (map\n      #(take y\n         (iterate identity %))\n      \t  x)))", "user": "54c46381e4b045293a27f61a"}, {"problem": 33, "code": "(fn [l n] (mapcat #(repeat n %) l))", "user": "550fd845e4b06e50f9beb17c"}, {"problem": 33, "code": "#(mapcat (fn [s] (repeat %2 s)) %1)", "user": "5141a8f2e4b02fd87f5064c1"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "55377460e4b09218d5f44fc9"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "54f583bbe4b0f2f3c5226e93"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "553706d1e4b09218d5f44fc7"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "552694e7e4b0ffed3738f920"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "52ea764ee4b09f7907dd14be"}, {"problem": 33, "code": "#(if (= 1 %2)\n    %1\n    (apply interleave (repeat %2 %1)))", "user": "5535d34be4b09218d5f44fb0"}, {"problem": 33, "code": "(fn [arr c] (reduce #(concat %1 (repeat c %2) ) [] arr) )", "user": "553b8fdbe4b09218d5f45004"}, {"problem": 33, "code": "(fn repf [col num]\n  (reduce #(concat %1 (repeat num %2)) '() col))", "user": "553abb28e4b09218d5f44ffb"}, {"problem": 33, "code": "(fn r [l n] (if (empty? l) '() (concat (repeat n (first l)) (r (rest l) n))))", "user": "553c05b7e4b09218d5f45011"}, {"problem": 33, "code": "(fn [x n]\n   (mapcat #(repeat n %) x))", "user": "550b5c10e4b06e50f9beb143"}, {"problem": 33, "code": "(fn [xso n]\n  (loop [res '() xs xso]\n    (if (empty? xs)\n      res\n      (recur (concat res (take n (repeat (first xs))))\n             (next xs)))))", "user": "553b87abe4b09218d5f45003"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "553a43cae4b09218d5f44ff2"}, {"problem": 33, "code": "(fn [ns n] (apply concat (map #(repeat n %) ns)))", "user": "553dd883e4b0a04f792994e6"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5537de22e4b09218d5f44fd5"}, {"problem": 33, "code": "(fn [xs n]\n  (apply concat (map #(repeat n %) xs)))", "user": "553e0b70e4b0a04f792994e8"}, {"problem": 33, "code": "(fn [s c]\n  (if (= 1 c) \n    s\n    (apply interleave (repeat c s))))", "user": "520d3129e4b0b022ef140ca5"}, {"problem": 33, "code": ";(fn [col times] (flatten (map #(repeat times %) col)))\n; had to google ths one:-(  don't think i'd learned about mapcat.\n(fn [col times]\n  (mapcat #(repeat times %) col))", "user": "5535e822e4b09218d5f44fb2"}, {"problem": 33, "code": "#(apply concat (for [x %1] (repeat %2 x)))", "user": "54e540c1e4b024c67c0cf7f9"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "553478dce4b09218d5f44f9d"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5540cc0ce4b0a04f79299505"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "54f86b8ce4b01ecee9d88828"}, {"problem": 33, "code": "(fn replic [x n]\n  (if (= x '())\n    '()\n    (concat (repeat n (first x)) (replic (rest x) n))))", "user": "553c4614e4b09218d5f45014"}, {"problem": 33, "code": "(fn [l n] (mapcat #(repeat n %) l))", "user": "55337e61e4b09218d5f44f8e"}, {"problem": 33, "code": "(fn [x n] (mapcat #(repeat n %) x))", "user": "548d6b75e4b0e286459a1216"}, {"problem": 33, "code": "(fn [xs n] (reduce (fn [ys y] (concat ys (repeat n y))) [] xs))", "user": "55381162e4b09218d5f44fda"}, {"problem": 33, "code": "(fn [x r] (reduce #(apply conj %1 (repeat r %2)) [] x))", "user": "53737e6ce4b06d7f452d9e13"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "54c944b1e4b045293a27f666"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "54eee38ce4b024c67c0cf878"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %)\n          coll))", "user": "54d9f7f1e4b024c67c0cf751"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "55274467e4b0ffed3738f92b"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %)", "user": "4faf97d8e4b081705acca258"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat (fn [v] (repeat n v)) coll))", "user": "55074092e4b021ccfedb96a4"}, {"problem": 33, "code": "(fn rep[x,n]\n\t (mapcat #(repeat n %) x) \n\t )", "user": "54fae43ae4b0cf870d934708"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "5545eebee4b0a04f79299539"}, {"problem": 33, "code": "(fn [xs t]\n  (mapcat #(repeat t %) xs))", "user": "550f1c99e4b06e50f9beb171"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "52e851bfe4b09f7907dd149a"}, {"problem": 33, "code": "(fn [x, r] (reduce into (map #(vec (repeat r %)) x)))", "user": "5546704be4b0a04f7929953d"}, {"problem": 33, "code": "(fn [coll x]\n  (reduce \n   (fn [memo b] \n     (concat memo (repeat x b))) \n   []\n   coll))", "user": "54980edae4b0b312c081ff79"}, {"problem": 33, "code": "(fn [s t]\n    (apply concat (map #(repeat t %) s)))", "user": "54fdaeace4b07d26eda61d39"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "552a793ee4b0ffed3738f955"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "5532a04ee4b09218d5f44f82"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "5283a919e4b0239c8a67adbe"}, {"problem": 33, "code": "(fn repeat-times [coll times]\n  (if (empty? coll)\n    '()\n  \t(concat (repeat times (first coll)) (repeat-times (rest coll) times))))", "user": "551d5cb9e4b07993ea3788e9"}, {"problem": 33, "code": "(fn dup [l n] (mapcat #(take n (repeat %)) l))", "user": "5547793be4b0a04f7929954c"}, {"problem": 33, "code": "(fn repl_seq\n                   ([sequence aantal] (repl_seq sequence aantal []))\n                   ([sequence aantal result]\n                    (let [newresult (into result (take aantal (cycle [(first sequence)])))]\n                      (if (empty? (rest sequence))\n                        (seq newresult)\n                        (recur (rest sequence) aantal newresult)))\n                    )\n                   )", "user": "5540f5dee4b0a04f79299509"}, {"problem": 33, "code": "(fn [s n]\n(reduce\n(fn [m e]\n  (concat m (repeat n e)))\n[]\ns))", "user": "552d2e4fe4b076ab5578f7e1"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "4f577f25e4b0a7574ea71839"}, {"problem": 33, "code": "(fn [arr n]\n  (mapcat #(take n (repeat %)) arr))", "user": "554707bae4b0a04f79299544"}, {"problem": 33, "code": "(fn [seq1 n]\n  (reduce concat\n          (map (fn [x]\n                 (repeat n  x)) seq1)))", "user": "54b64fbbe4b05787c3b163b8"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "553b0d95e4b09218d5f44fff"}, {"problem": 33, "code": "(fn replic\n\t[arr n]\n\t(reduce concat (map #(repeat n %) arr ))\n)", "user": "5545477fe4b0a04f79299531"}, {"problem": 33, "code": "(fn [s x] (reduce concat (map #(repeat x %) s)))", "user": "55495318e4b0a04f79299566"}, {"problem": 33, "code": "(fn [coll n]\n  (if (> n 1)\n    (apply interleave (repeat n coll)) \n    (seq coll)) )", "user": "5523fce8e4b0882d96d091b4"}, {"problem": 33, "code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "user": "554680cbe4b0a04f7929953e"}, {"problem": 33, "code": "(fn [x n]\n  (loop [seq x accum []]\n    (if (empty? seq) accum\n        (recur (rest seq) (concat accum (repeat n (first seq)))))))", "user": "554dff83e4b00713264bd98d"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "553fa883e4b0a04f792994f9"}, {"problem": 33, "code": "(letfn [(f [acc nmax xs n]\n           (if (empty? xs) acc\n             (cond (> n 0) (recur (conj acc (first xs)) nmax xs (dec n))\n                   (= n 0) (recur acc nmax (rest xs) nmax))))]\n  #(f [] %2 %1 %2))", "user": "554b9c3ee4b0a04f79299594"}, {"problem": 33, "code": "(fn rep-list [ls tms]\n  (mapcat (fn [it]\n            (reduce (fn [coll i]\n             (conj coll it))\n           '[]\n           (range tms)))\n          ls))", "user": "554bc026e4b0a04f79299597"}, {"problem": 33, "code": "#(apply (partial mapcat vector) (repeat %2 %1))", "user": "4fcf1755e4b03432b189f40c"}, {"problem": 33, "code": "(fn dup\n   ([xs n] (dup xs n []))\n   ([[x & xs] n ret]\n    (if (not x)\n      ret\n      (recur xs n (concat ret (repeat n x))))))", "user": "554b7056e4b0a04f79299583"}, {"problem": 33, "code": "(fn [se n]\n  (let [add-n-times (fn add-n-times\n    [acc thing]\n    (nth (iterate (fn [acc] (conj acc thing)) acc) n))]\n  (loop [accum (vector)\n         se se]\n    (if (empty? se)\n      accum\n      (recur (add-n-times accum (first se)) (rest se))))))", "user": "554d386ee4b0a04f792995b8"}, {"problem": 33, "code": "(fn make-repeats\n  [input-list times-to-repeat]\n  (loop [remaining-items input-list\n         final-list []]\n    (if (empty? remaining-items)\n      final-list\n      (recur (rest remaining-items) (concat final-list (repeat times-to-repeat (first remaining-items))))\n   \n  )))", "user": "5545f713e4b0a04f7929953a"}, {"problem": 33, "code": "(fn [seq num]\n  (reduce #(apply conj %1 (repeat num %2)) [] seq))", "user": "53b0765ae4b047364c044484"}, {"problem": 33, "code": "(fn [li number]\n      (apply concat (map (fn [x]\n             (take number (repeat x))\n             ) li))\n      )", "user": "554b2151e4b0a04f79299580"}, {"problem": 33, "code": "#(reduce (fn [a b] (apply conj a (repeat %2 b))) nil (reverse %1))", "user": "512e31e9e4b0b740abc59823"}, {"problem": 33, "code": "#(mapcat (fn [input](repeat %2 input)) %1)", "user": "555093b2e4b00713264bd9ab"}, {"problem": 33, "code": "#(reduce into (map (comp vec (partial repeat %2)) %1))", "user": "554b8572e4b0a04f79299589"}, {"problem": 33, "code": "(fn [coll n]\t\n    (apply concat (map #(repeat n %) coll)))", "user": "5486e317e4b0e286459a11c0"}, {"problem": 33, "code": "(fn d [a c & [n]]\n  (if (empty? a)\n    n\n    (d (butlast a) c (into (or n '()) (repeat c (last a))))))", "user": "5540fe42e4b0a04f7929950a"}, {"problem": 33, "code": "(fn [coll n]\n   (mapcat #(repeat n %) coll))", "user": "51ba60a8e4b0fe3ecfb4642e"}, {"problem": 33, "code": "(fn [x y]\n  (apply concat(map #(take y (repeat %)) x)))", "user": "5550dad4e4b00713264bd9b0"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "52ce1abfe4b07d0d72b27389"}, {"problem": 33, "code": "(fn [s c] (mapcat #(repeat c %) s))", "user": "554ba1d3e4b0a04f79299595"}, {"problem": 33, "code": "(fn repeat-elems-n [c n]\n  (apply concat (map #(take n (repeat %1)) c)))", "user": "554d48d3e4b00713264bd988"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "5552b617e4b0deb715856df8"}, {"problem": 33, "code": "(fn [seq count] (apply concat (map #(take count (repeat %)) seq)))", "user": "5553b924e4b0deb715856e06"}, {"problem": 33, "code": "(fn [s n]\n  (reduce \n   #(concat %1 (repeat n %2)) \n   [] s))", "user": "554edb85e4b00713264bd99a"}, {"problem": 33, "code": "(fn [x,n]\n  (let [dup0 (fn dup0 [e]\n    (loop [res [], n1 n]\n      (if (= 0 n1) res\n        (recur (concat res [e]) (- n1 1)))))]\n  (loop [res [],x1 (seq x)]\n    (let [hd (first x1),tail (rest x1)]\n      (if (empty? x1) res\n        (recur (concat res (dup0 hd)) tail))))))", "user": "55486ee6e4b0a04f7929955a"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "543366dde4b0b6b47310fcdf"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "4eef3afe535d305ff5cb7f1d"}, {"problem": 33, "code": "(fn [coll cnt]\n  (mapcat #(repeat cnt %) coll))", "user": "5547bcf2e4b0a04f79299551"}, {"problem": 33, "code": "(fn [sequence n] (apply concat (map #(take n (repeat %1)) sequence)))", "user": "52b89d55e4b07a9af57922b3"}, {"problem": 33, "code": "(fn [lst num] (apply concat '() (map #(repeat num %) lst)))", "user": "4fc57c4ce4b0ee37620e17f6"}, {"problem": 33, "code": ";(fn [xs n] (apply concat (map #(repeat n %) xs)))\n\n(fn [xs n] (mapcat #(repeat n %) xs))", "user": "554bced1e4b0a04f79299599"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5504dd64e4b086ebe8a79c83"}, {"problem": 33, "code": "(fn replicate [sq n] (mapcat #(take n (iterate identity %)) sq))", "user": "5280a1ece4b0757a1b171407"}, {"problem": 33, "code": "(fn replicate \n  [s n]\n  (let [mults (map (partial repeat n) s)]\n    (apply concat mults)))", "user": "53161a56e4b08068f379ed3e"}, {"problem": 33, "code": "(fn [xs n]\n  (reduce (fn [res el]\n            (concat res (repeat n el))) (empty xs) xs))", "user": "553638bae4b09218d5f44fba"}, {"problem": 33, "code": "(fn [s n]\n    (mapcat #(repeat n %) s))", "user": "5549ff9ae4b0a04f7929956e"}, {"problem": 33, "code": "(fn [coll n] (reduce #(concat %1 (repeat n %2)) '() coll))", "user": "5550bcece4b00713264bd9ae"}, {"problem": 33, "code": "#(if (= %2 1) \n     %1\n     (apply interleave (repeat %2 %1)))", "user": "55536a8ae4b0deb715856e03"}, {"problem": 33, "code": "(fn [xs rep]\n  (reduce (fn [result input]\n            (concat result (repeat rep input)))\n          [] xs))", "user": "555521a5e4b0deb715856e12"}, {"problem": 33, "code": "(fn [s n]  (apply concat (map #(repeat n %1) s)))", "user": "554dfe97e4b00713264bd98c"}, {"problem": 33, "code": "(fn [s c] (reduce (fn [a e]\n                    (concat a (repeat c e)) \n                     ) [] s))", "user": "554c0adde4b0a04f7929959e"}, {"problem": 33, "code": "#(apply mapcat list (repeat %2 %))", "user": "53571732e4b04ce2eb3ed275"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(take n (repeat %)) coll))", "user": "54cad59ee4b057c6fda3a26e"}, {"problem": 33, "code": "#(apply concat (for [x %1](repeat %2 x)))", "user": "55429859e4b0a04f7929951f"}, {"problem": 33, "code": "(fn [vs n]\n  (if (= 1 n)\n    vs\n    (apply interleave (repeat n vs))))", "user": "53684a2fe4b0243289761e8c"}, {"problem": 33, "code": "(fn [x y] (if(= y 1) x (apply interleave (repeat y x)) ))", "user": "54fe57f6e4b07d26eda61d42"}, {"problem": 33, "code": "(fn [xs n]\n  (reduce #(concat %1 (repeat n %2)) [] xs))\n\n;(fn [xs n]\n;  (reduce #(concat %1 (take n (repeat %2))) [] xs))\n\n;(fn [xs n]\n;  (reduce (fn [result x] (concat result (take n (repeat x)))) [] xs))", "user": "55150524e4b055c2f668d4d9"}, {"problem": 33, "code": "(fn [c n] (mapcat #(concat (take n (iterate identity %))) c))", "user": "555287a4e4b0deb715856df5"}, {"problem": 33, "code": "(fn [col n]\n   (mapcat #(repeat n %1) col))", "user": "555aa525e4b0deb715856e47"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "555ac933e4b0deb715856e49"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5169b23fe4b03f62cda68cee"}, {"problem": 33, "code": "(fn [l n] (mapcat #(take n (repeat %)) l))", "user": "54857657e4b0e286459a11ac"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "55568a7de4b0deb715856e1c"}, {"problem": 33, "code": "(fn[list times] (apply concat (reduce (fn[result item] (conj result (repeat times item))) [] list)))", "user": "54f296efe4b024c67c0cf8c8"}, {"problem": 33, "code": "(fn [coll n-times]\n    (reduce #(apply conj %1 (repeat n-times %2)) [] coll))", "user": "548ce2dbe4b0e286459a1212"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "54026d7de4b0df28a13c62cf"}, {"problem": 33, "code": "(fn replicate-n-times [xs n]\n     (if (= n 1) xs (apply interleave (replicate n xs))))", "user": "555b5ae4e4b0deb715856e4f"}, {"problem": 33, "code": "( fn [v n] ( reduce concat ( map #(take n (repeat %)) v ) ) )", "user": "5551b492e4b0deb715856ded"}, {"problem": 33, "code": "(fn [coll t] (for [e coll c (range t)] e))", "user": "553fe819e4b0a04f792994fc"}, {"problem": 33, "code": "(fn [seq count]\r\n  (apply concat (map #(repeat count %) seq)))", "user": "555bd27ae4b0b056612e2244"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "555da2c4e4b0a2eb076a39ae"}, {"problem": 33, "code": "#(mapcat (comp (partial take %2) repeat) %1)", "user": "555b35f7e4b0deb715856e4b"}, {"problem": 33, "code": "(fn [x n] (mapcat #(repeat n %) x))", "user": "555f3bfde4b0a2eb076a39c1"}, {"problem": 33, "code": "#(if (= 1 %2) %1 (apply interleave (repeat %2 %1)))", "user": "554bc64ae4b0a04f79299598"}, {"problem": 33, "code": "(fn [s n] (reduce #(concat %1 (repeat n %2 )) '() s))", "user": "555a5731e4b0deb715856e44"}, {"problem": 33, "code": "(fn\n    [arr n]\n    ((fn\n      [res arr]\n      (if (empty? arr)\n        res\n        (recur\n          (concat\n            res\n            (repeat n (first arr)))\n          (rest arr))))\n      []\n      arr))", "user": "555f4bade4b0a2eb076a39c2"}, {"problem": 33, "code": "(fn [s c]\n  (for [e s\n        i (range c)]\n    e))", "user": "556159fae4b0c656e3ff17c7"}, {"problem": 33, "code": "(fn [n t]\n    (loop [i 0 acc []]\n      (if (= i (count n))\n        acc\n        (recur (inc i)\n               (into acc \n                     (repeat t (get n i))\n                     )))))", "user": "55484800e4b0a04f79299558"}, {"problem": 33, "code": "#(mapcat (fn [s] (take %2 (repeat s))) %1)", "user": "556086a2e4b0c656e3ff17c1"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "53f5666ee4b0db01ade6f9cf"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(concat (repeat n %)) coll))", "user": "550f70bee4b06e50f9beb177"}, {"problem": 33, "code": "(fn [s times] (mapcat #(take times (cycle [%])) s))", "user": "55623feae4b0c656e3ff17d4"}, {"problem": 33, "code": "(fn [xs n] (mapcat (partial repeat n) xs))", "user": "4fc04d75e4b081705acca324"}, {"problem": 33, "code": "(fn replicate-seq [coll n]\n  (mapcat #(repeat n %) coll))", "user": "55586905e4b0deb715856e2b"}, {"problem": 33, "code": "(fn [col n] (mapcat #(repeat n %1) col))", "user": "556358c6e4b0c656e3ff17ea"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "55645592e4b0c656e3ff1802"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "5562f08ae4b0c656e3ff17df"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "55631739e4b0c656e3ff17e2"}, {"problem": 33, "code": "(fn [c n] (for [v c i (range n)] v))", "user": "556405e5e4b0c656e3ff17fb"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5501a1e1e4b07d26eda61d75"}, {"problem": 33, "code": "(fn [l x] (apply concat (map #(repeat x %) l)))", "user": "54f8b6f4e4b01ecee9d8882c"}, {"problem": 33, "code": "(fn rep [s n]\n  (if (empty? s)\n    s\n    (concat (repeat n (first s))\n            (rep (rest s) n))))", "user": "55670a05e4b0c656e3ff1838"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5566d812e4b0c656e3ff1837"}, {"problem": 33, "code": "(fn \n  [coll n]\n  (mapcat #(repeat n %) coll))", "user": "55640c62e4b0c656e3ff17fd"}, {"problem": 33, "code": "(fn [lists times] \n\t(mapcat (fn [thing] (for [x (range times)] thing)) lists))", "user": "55625903e4b0c656e3ff17d7"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "55647a31e4b0c656e3ff1808"}, {"problem": 33, "code": "(fn [l n]\n  (mapcat #(take n (repeat %)) l))", "user": "54a1f494e4b09f271ff37c52"}, {"problem": 33, "code": "(fn [s n]\n  (if (= 1 n) s\n    (apply interleave (repeat n s))))", "user": "555f0789e4b0a2eb076a39bf"}, {"problem": 33, "code": "(fn rep [c n] \n    (last (take (/ (inc n) 2)\n                (iterate #(interleave % %) c))))", "user": "556880dae4b0c656e3ff1856"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "5566463ee4b0c656e3ff1831"}, {"problem": 33, "code": "(fn [coll x]\n  (loop [c coll\n         acc []]\n    (if (empty? c)\n      acc\n      (recur (rest c) (into acc (take x (iterate #(identity %) (first c))))))))", "user": "556a6137e4b09a3098a524e0"}, {"problem": 33, "code": "(fn [xs x] (apply concat (map #(repeat x %) xs)))", "user": "50dfc83fe4b061dbdced7229"}, {"problem": 33, "code": "(fn rep\n  ([sequence n] (rep sequence n []))\n  ([sequence n accum] (\n                       if (= sequence [])\n                        accum\n                        (recur (rest sequence) n (concat accum \n                                                       (take n (iterate identity (first sequence)))))\n                       ))\n)", "user": "52c70127e4b0c2d177d6211a"}, {"problem": 33, "code": "(fn [col count]\n    (reduce (fn [res next]\n              (concat res (repeat count next)))\n            (vector)\n            col))", "user": "554a75c9e4b0a04f79299575"}, {"problem": 33, "code": "#(if(= %2 1) %1\n   (apply interleave (take %2 (repeat %1))))", "user": "556c70dae4b09a3098a524fd"}, {"problem": 33, "code": "(fn replicate-seq [x n]\n  (cond\n    (empty? x) '()\n    :else (concat \n            (repeat n (first x)) \n            (replicate-seq (rest x) n))))", "user": "5374f931e4b06d7f452d9e2d"}, {"problem": 33, "code": "#(loop[v-list %,v-count %2,total %2,result []]\n   (if (empty? v-list) result\n     (if (= 0 v-count)\n       (recur (rest v-list) total total result)\n       (recur v-list (dec v-count) total (conj result (first v-list))))))", "user": "555e9dbfe4b0a2eb076a39bc"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(concat (repeat n %)) coll))", "user": "5565e7e6e4b0c656e3ff1821"}, {"problem": 33, "code": "#(apply concat (map (fn [n] (repeat %2 n)) %1))", "user": "556b83fbe4b09a3098a524ee"}, {"problem": 33, "code": "(fn dupN\n  ([list n] (dupN list n [] n))\n  ([list n res x]\n    (if (empty? list)\n      res\n      (if (> n 0)\n        (recur list (dec n) (conj res (first list)) x)\n        (recur (rest list) x res x)\n        )\n    )\n  )\n)", "user": "556be3dce4b09a3098a524f7"}, {"problem": 33, "code": "(fn[sq n] (mapcat #(repeat n %) sq))", "user": "4ef08bd6535dced4c769f20a"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "556dd141e4b09a3098a52509"}, {"problem": 33, "code": "(fn replicator\n  ([coll n] (replicator coll n [] 1))\n  ([coll n newColl x] \n   (if (empty? coll)\n     newColl\n     (replicator \n      (if (< x n) coll (rest coll))\n      n\n      (conj newColl (first coll))\n      (if (< x n) (inc x) 1)\n      )\n     )\n   )\n  )", "user": "5564709ee4b0c656e3ff1807"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "556cd549e4b09a3098a52503"}, {"problem": 33, "code": "(fn[s n](mapcat #(repeat n %) s))", "user": "5568a1bde4b0c656e3ff1857"}, {"problem": 33, "code": "(fn [arr count] \n   (reduce (fn [out cur] \n             (concat out (repeat count cur))) () arr)\n   )", "user": "556f443be4b09a3098a5251e"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat (partial repeat n) coll))", "user": "55702081e4b09a3098a52529"}, {"problem": 33, "code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "user": "556cc24ae4b09a3098a52502"}, {"problem": 33, "code": "(fn [coll count]\n  (reduce \n  #(concat %1 (take count (iterate identity %2)))\n  '()\n  coll))", "user": "55702247e4b09a3098a5252a"}, {"problem": 33, "code": "(fn [l n] (mapcat #(replicate n %) l))", "user": "549b1e50e4b0f3d1d8e70f7a"}, {"problem": 33, "code": "(fn x[i r](mapcat #(take r (repeat %) ) i))", "user": "552800d7e4b0ffed3738f93a"}, {"problem": 33, "code": "(fn [s n] ((fn r [s n c] (cond (empty? s) nil (= n c) (r (rest s) n 0) :else (cons (first s) (r s n (+ c 1))))) s n 0))", "user": "556766c1e4b0c656e3ff1840"}, {"problem": 33, "code": "(fn [a n] (apply concat (map #(take n (repeat %1)) a)))", "user": "53db43aae4b0e771c30254b1"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "556a3243e4b09a3098a524de"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "556f35fee4b09a3098a5251a"}, {"problem": 33, "code": "#(reduce (fn [a x] (apply conj a (repeat %2 x))) [] %1)", "user": "5571d6e5e4b09a3098a5253f"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "51e8736ae4b006d205356a4f"}, {"problem": 33, "code": "(fn [s n] (mapcat (fn [i] (repeatedly n #(identity i))) s))", "user": "52a4879ce4b0c58976d9abdb"}, {"problem": 33, "code": "(fn [coll n] \n  (reduce \n   (fn [coll item] \n     (concat coll (repeat n item))) '() coll))", "user": "53065acbe4b02e8216869792"}, {"problem": 33, "code": "(fn [l n] (mapcat #(repeat n %) l))", "user": "550fa523e4b06e50f9beb17a"}, {"problem": 33, "code": "(fn [a b]\n  (mapcat #(repeat b %) a))", "user": "52c911dde4b0c2d177d6213a"}, {"problem": 33, "code": "(fn sm-rep [x, y]\n  (if (= 0 (count x))\n    '()\n    (let [a (first x) b (rest x)] \n      (concat \n         (replicate y a) \n         (sm-rep b y)\n        )\n      )\n  )\n)", "user": "5575aae2e4b05c286339e065"}, {"problem": 33, "code": "#(loop[in %1 repeat %2 current 0 result []](if (= (count in) current) result (recur in repeat (inc current) (loop [res result initial in cur current ntimes repeat] (if (zero? ntimes) res (recur (conj res (nth initial cur)) initial cur (dec ntimes))) ))))", "user": "5565d5e4e4b0c656e3ff181f"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat identity (for [x s]\n    (for [y (range 0 n)]\n      x\n    )\n  )\n))", "user": "5559b443e4b0deb715856e3c"}, {"problem": 33, "code": "(fn [xs n]\n   (mapcat #(repeat n %) xs))", "user": "5573ffb5e4b0aa18f790f3fd"}, {"problem": 33, "code": "#(mapcat (fn [c] (repeat %2 c)) %1)", "user": "5551bddae4b0deb715856def"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5416b4a2e4b01498b1a71a01"}, {"problem": 33, "code": "(fn [a b] (mapcat #(repeat b %) a))", "user": "5579638fe4b05c286339e094"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "user": "536046a9e4b063bf7a5f8fe1"}, {"problem": 33, "code": "(fn [li n]\n  (if (> n 1)\n  \t(apply interleave (map (fn [_] li) (range n)))\n  \tli))", "user": "557a1e18e4b05c286339e09e"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)\n\n#_(fn [l n] (mapcat #(repeat n %) l))\n\n#_(fn [l n]\n\t(letfn [(f [x] (repeat n x))]\n\t\t(mapcat f l)))\n\n#_(fn [l n]\n\t(letfn [(f [x] (repeat n x))]\n\t\t(apply concat (map f l))))", "user": "54e1939ce4b024c67c0cf7c5"}, {"problem": 33, "code": "(fn[mySeq coeff] (for [x mySeq y (range coeff )] x ))", "user": "55757e81e4b05c286339e063"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "53fc63dce4b0de5c4184859f"}, {"problem": 33, "code": "(fn [c n]\n  (mapcat (partial repeat n) c))", "user": "554f7ef2e4b00713264bd9a1"}, {"problem": 33, "code": "(fn f [p n] (mapcat #(repeat n %) p))", "user": "557bd432e4b05c286339e0bb"}, {"problem": 33, "code": "(fn[coll n] ( mapcat #(repeat n %) coll) )", "user": "55654e17e4b0c656e3ff1818"}, {"problem": 33, "code": "(fn [s n]\n  (apply concat (map #(replicate n %) s)))", "user": "557dbc9de4b05c286339e0cd"}, {"problem": 33, "code": "(fn [l t] (mapcat #(repeat t %) l))", "user": "52503747e4b0541d1855b828"}, {"problem": 33, "code": "(fn [xs x] (mapcat #(repeat x %) xs))", "user": "557954aae4b05c286339e092"}, {"problem": 33, "code": ";(fn [xs n]                                                                                               \n;  (->> xs                                                                                                \n;       (partition-by identity)                                                                           \n;       (map #(repeat n  (first %)))                                                                      \n;       (apply concat)))\n\n(fn [xs n]\n  (if (= 1 n)\n    xs\n    (apply interleave (repeat n xs))))", "user": "541b41d1e4b01498b1a71a65"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "51a3cc45e4b0e77c4ca60bfb"}, {"problem": 33, "code": "(fn [coll times]\n   (mapcat #(repeat times %) coll)\n  )", "user": "54dbe183e4b024c67c0cf778"}, {"problem": 33, "code": "#(if (= 1 %2) %\n             (apply interleave (repeat %2 %)))", "user": "55630cc1e4b0c656e3ff17e0"}, {"problem": 33, "code": "(fn [coll n] (reduce #(into %1 (repeat n %2)) [] coll))", "user": "5576f299e4b05c286339e077"}, {"problem": 33, "code": "(fn replicate-a-sequence [xs n]\n  (apply concat (map (partial repeat n) xs)))", "user": "557bcce4e4b05c286339e0b9"}, {"problem": 33, "code": "#(mapcat (partial replicate %2) %1)", "user": "506f0968e4b09350ab4199f5"}, {"problem": 33, "code": "(fn [liste nbr] \n   (reduce concat\n     (\n      #(map (partial repeat nbr) %) liste\n     )\n  )\n)", "user": "556f2009e4b09a3098a52519"}, {"problem": 33, "code": "(fn [xs n] \n  (mapcat \n   (fn [x] (repeat n x)) xs))", "user": "5581747fe4b05c286339e0fa"}, {"problem": 33, "code": "(fn [s n] (apply concat (map #(repeat n %) s)))", "user": "5253de67e4b0541d1855b939"}, {"problem": 33, "code": "(fn [col num]\n   (mapcat (partial repeat num) col))", "user": "4f04664a535dcb61093f6bc1"}, {"problem": 33, "code": "(fn [xs n]\n  (mapcat #(repeat n %) xs))", "user": "54dce62be4b024c67c0cf78b"}, {"problem": 33, "code": "(fn[coll n] (mapcat #(repeat n %) coll ))", "user": "555c6344e4b0b056612e224c"}, {"problem": 33, "code": "(fn myReplicate\n  [sequence n]\n  (apply concat (map (partial repeat n) sequence)))", "user": "557e9d17e4b05c286339e0d8"}, {"problem": 33, "code": "(fn [l n]\n    (->> (map (partial replicate n) l)\n         (mapcat identity)))", "user": "558306dfe4b05c286339e110"}, {"problem": 33, "code": "(fn [coll times]\n  (mapcat identity (map (fn [n] (repeat times n)) coll)))", "user": "55842c7ee4b05c286339e11d"}, {"problem": 33, "code": "#(mapcat (fn [each] (repeat %2 each)) %)", "user": "5553b729e4b0deb715856e05"}, {"problem": 33, "code": "(fn copy[x n]\n   (loop [s x d []]\n     (if (empty? s) d\n       (recur (rest s) (concat d (repeat n (first s)))))))", "user": "558378dce4b05c286339e115"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "556cb481e4b09a3098a52501"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5392500ae4b0b51d73faaeaf"}, {"problem": 33, "code": "#(apply concat (map (partial repeat %2) %1))", "user": "55632016e4b0c656e3ff17e4"}, {"problem": 33, "code": "(fn rs\n  [coll n]\n  (reduce\n    #(concat % (repeat n %2))\n    []\n    coll))", "user": "50ec409ce4b04edc33777045"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "54c9571ee4b045293a27f66b"}, {"problem": 33, "code": "(fn [l n]\n  (loop [li l le ()]\n    (if (empty? li)\n      le\n      (recur (rest li) (concat le (loop [i (list (first li)) c (dec n)]\n        (if (< c 1)\n          i\n          (recur (conj i (first li)) (dec c)))))))))", "user": "52979551e4b02ebb4ef75043"}, {"problem": 33, "code": "(fn duplicateseq [s n]\n  (if (= n 1)\n    s\n    (apply interleave (repeat n s))\n  )\n)", "user": "554756b8e4b0a04f79299549"}, {"problem": 33, "code": "(fn [x n]\n(reduce into (map #(repeat n %) (reverse x))))", "user": "55306b8ae4b076ab5578f812"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "5585aa48e4b001b0851d7510"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5537c939e4b09218d5f44fd2"}, {"problem": 33, "code": "(fn dup [x y]\n  (reduce concat (map #(take y (repeat %)) x)))", "user": "55885edae4b059ccff29b1f6"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(take n (repeat %)) coll))", "user": "54bad977e4b0ed20f4ff6eb9"}, {"problem": 33, "code": "(fn ([col]\n   (apply concat (map #(repeat 2 %) col)))\n  ([col n]\n   (apply concat (map #(repeat n %) col)))\n)", "user": "5581a6dae4b05c286339e0fe"}, {"problem": 33, "code": "(fn [arr cnt] \n  (mapcat \n\t#(loop [i cnt res []]\n        (if (zero? i)\n          res\n          (recur (dec i) (cons % res))))\n   arr))", "user": "557ca912e4b05c286339e0c8"}, {"problem": 33, "code": "(fn dupl [x y] (mapcat (partial repeat y) x))", "user": "558466fce4b04192f3441eee"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "55895eade4b059ccff29b202"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "55896a0ce4b059ccff29b204"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce concat (mapcat #(repeat n %) (partition-by identity coll))))", "user": "54cbd6bae4b057c6fda3a282"}, {"problem": 33, "code": "#(reduce into [] (map (partial repeat %2) %))", "user": "558aabbfe4b0277789237621"}, {"problem": 33, "code": "#(if \n   (= %2 1) \n   %1 \n   (apply interleave (repeat %2 %1)))", "user": "55893ebbe4b059ccff29b1ff"}, {"problem": 33, "code": "(fn [c t] \n  (apply concat \n   (map \n    (fn [x] (repeat t x)) \n    c)\n   )\n  )", "user": "5587d8b3e4b059ccff29b1e8"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "5037534de4b0af0658af77aa"}, {"problem": 33, "code": "(fn [seq n] (mapcat (partial repeat n) seq))", "user": "5589e88ae4b0277789237610"}, {"problem": 33, "code": "(fn [x n] (mapcat #(repeat n %) x))", "user": "558a81fbe4b027778923761c"}, {"problem": 33, "code": "(fn [sq n]\n  (reduce concat (map #(repeat n %) sq)))", "user": "558bb38fe4b0277789237631"}, {"problem": 33, "code": "(fn [coll n] (mapcat (fn [x] (repeat n x)) coll))", "user": "554a270fe4b0a04f79299570"}, {"problem": 33, "code": "(fn [values n] (mapcat identity (map #(repeat n %1) values)))", "user": "54eff2bee4b024c67c0cf88d"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5589a735e4b059ccff29b206"}, {"problem": 33, "code": "(fn [coll n] (reduce #(concat %1 (replicate n %2)) [] coll))", "user": "558df2ebe4b0277789237649"}, {"problem": 33, "code": "(fn [coll n]\n   (apply concat\n     (map #(repeat n %) coll)))", "user": "55860905e4b001b0851d7516"}, {"problem": 33, "code": "(fn [v n] (apply concat (map #(repeat n %) v)))", "user": "4f070ce6535dcb61093f6c1e"}, {"problem": 33, "code": "#(mapcat (fn[x] (repeat %2 x)) %1)", "user": "558ed227e4b0277789237658"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "558b50d5e4b027778923762b"}, {"problem": 33, "code": "(fn myrep\n  [myseq cnt]\n  \n   \t(mapcat #(repeat cnt %) myseq))", "user": "55897fe2e4b059ccff29b205"}, {"problem": 33, "code": "#(apply mapcat list (repeat %2 %1))", "user": "55465b20e4b0a04f7929953b"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5590e461e4b0277789237675"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(concat (repeat n %)) coll))", "user": "554c1708e4b0a04f792995a0"}, {"problem": 33, "code": "(fn qwer [x y] (if (not= x [44 33])\n                   (sort \n                   (take \n                         (* y (count x)) \n                             (cycle (mapcat #(concat %) [x x])\n                                    )\n                             ) \n                   )\n                  \n                   (reverse (sort \n                   (take \n                         (* y (count x)) \n                             (cycle (mapcat #(concat %) [x x])\n                                    )\n                             ) \n                   ))\n                   \n               )\n  )", "user": "557e8326e4b05c286339e0d7"}, {"problem": 33, "code": "(fn [x y] (reverse(reduce #( into %1 (take y (repeat %2))) '() x)))", "user": "55818b0ee4b05c286339e0fb"}, {"problem": 33, "code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "user": "55916d7be4b0604b3f94d57d"}, {"problem": 33, "code": "#(\n  case %2\n    1 %1\n  \t(apply interleave (repeat %2 %1))\n  )", "user": "559057c4e4b027778923766e"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "558d7dd3e4b0277789237647"}, {"problem": 33, "code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "user": "53e76363e4b036ad0777e47b"}, {"problem": 33, "code": "(fn [s n] (apply concat (map (partial repeat n) s)))", "user": "558c8405e4b027778923763a"}, {"problem": 33, "code": "(fn [coll num] (apply concat (map (partial repeat num) coll)))", "user": "54530382e4b0e397800069cc"}, {"problem": 33, "code": "(fn [s, n]\n  (loop [c s, r []]\n    (if (empty? c)\n      r\n      (recur (rest c) (concat r (repeat n (first c)))))))", "user": "5590e55de4b0277789237676"}, {"problem": 33, "code": "(fn [col n] (reduce into [] (map #(repeat n %) col)))", "user": "54d22860e4b0e8a36923e5ef"}, {"problem": 33, "code": "(fn [seq n] (apply concat (map (fn [x] (repeat n x)) seq) ) )", "user": "558bdcefe4b0277789237633"}, {"problem": 33, "code": "(fn [coll top] (let [c coll t (repeat top)] (mapcat  #(take %2 (iterate identity %)) c t)))", "user": "557f7c8be4b05c286339e0e0"}, {"problem": 33, "code": "(fn [sezn n] (mapcat #(repeat n %) sezn))", "user": "5576e78de4b05c286339e075"}, {"problem": 33, "code": "(fn [x n]\n  (apply concat\n         (map #(repeat n %) x)))", "user": "558f4fbae4b0277789237661"}, {"problem": 33, "code": "(fn [s num] (mapcat #(repeat num %) s))", "user": "5578c67fe4b05c286339e08d"}, {"problem": 33, "code": "#(apply concat (reduce (fn [x y] (conj x (take %2 (repeat y))) ) [] %1 ))", "user": "557e6b73e4b05c286339e0d6"}, {"problem": 33, "code": "#(if (< %2 2)\n   %\n  (apply interleave (repeat %2 %)))", "user": "559279b7e4b0604b3f94d58c"}, {"problem": 33, "code": "(fn [s n]\n   (mapcat #(take n (cycle [%])) s))", "user": "531c6e72e4b08068f379eda0"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "55079e55e4b021ccfedb96aa"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "55941019e4b0c79f6e1db94b"}, {"problem": 33, "code": "(fn [array, times] \n    (reduce concat [] (map #(repeat times %) array)))", "user": "55893b09e4b059ccff29b1fe"}, {"problem": 33, "code": "(fn [%1 %2]\n  (if (= %2 1)\n    %1\n    (apply interleave (repeat %2 %1))))", "user": "55933c7ae4b0c79f6e1db938"}, {"problem": 33, "code": "(fn [xs x] (mapcat #(repeat x %) xs))", "user": "5590ebb1e4b0277789237677"}, {"problem": 33, "code": "(fn [l n]\n  (loop [l l rv []]\n    (if (empty? l)\n      rv\n      (recur (rest l) (concat rv (take n (repeat (first l))))))))", "user": "55934bebe4b0c79f6e1db93b"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5593619ae4b0c79f6e1db93c"}, {"problem": 33, "code": "(fn [s c] (apply concat (map #(repeat c %1) s)))", "user": "5592bf9fe4b0c79f6e1db933"}, {"problem": 33, "code": "(fn [col i] (mapcat (fn [x] (repeat i x)) col))", "user": "555883c5e4b0deb715856e2d"}, {"problem": 33, "code": "(fn [xs n]\n  (mapcat (partial repeat n) xs))", "user": "559622cee4b0c79f6e1db975"}, {"problem": 33, "code": "#(if (> %2 1)\n  (apply interleave (repeat %2 %1))\n  %1 )", "user": "5400e918e4b0de5c41848619"}, {"problem": 33, "code": "(fn [s n] (mapcat (fn [i] (repeatedly n #(identity i))) s))", "user": "55950c5fe4b0c79f6e1db95e"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(concat (repeat n %)) coll))", "user": "5594f8aee4b0c79f6e1db95c"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "55882c84e4b059ccff29b1f2"}, {"problem": 33, "code": "(fn [x n] (mapcat #(repeat n %) x))", "user": "5585f088e4b001b0851d7513"}, {"problem": 33, "code": "(fn [c n]\n  (reverse (reduce #(into %1 (repeat n %2)) '() c)))", "user": "55815973e4b05c286339e0f6"}, {"problem": 33, "code": "(fn [s n]\n  (->> s\n       (map #(take n (repeat %)))\n       (reduce concat)))", "user": "55995fa7e4b031d6649c9ba9"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "4fdb0c0ae4b05e33b9224f57"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "4fffa422e4b0678c553fc404"}, {"problem": 33, "code": "(fn [coll times]\n  (reduce\n   (fn [ret e]\n     (apply conj ret (take times (repeat e))))\n   []\n   coll))", "user": "555ee545e4b0a2eb076a39bd"}, {"problem": 33, "code": "(fn [ms n]\n  (mapcat #(repeat n %1) ms))", "user": "54117417e4b01498b1a719c5"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "54aec099e4b09f271ff37cf5"}, {"problem": 33, "code": "(fn [x n] (apply concat (map (partial repeat n) x)))", "user": "559b55d6e4b066d22e731f54"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "559bdf16e4b066d22e731f5a"}, {"problem": 33, "code": "(fn [L n] (mapcat #(repeat n %) L))", "user": "559c13c5e4b066d22e731f61"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "538d7e2ee4b0b51d73faae70"}, {"problem": 33, "code": "(fn [sqnc n] (reverse (reduce into (map #(repeat n %) sqnc))))", "user": "55929e89e4b0604b3f94d58e"}, {"problem": 33, "code": "(fn [sq n]\n  (loop [sq-it sq\n         ret-it (empty sq)]\n    (if (empty? sq-it)\n      ret-it\n      (recur (rest sq-it)\n             (concat ret-it (take n (repeat (first sq-it))))))))", "user": "559d33b3e4b0ec2b359424d9"}, {"problem": 33, "code": "(fn [xs n] (apply concat (map #(take n (repeat %)) xs)))", "user": "5596af34e4b04c1e5c31d758"}, {"problem": 33, "code": "(fn [coll x] (mapcat #(repeat x %) coll))", "user": "54a627bce4b09f271ff37c83"}, {"problem": 33, "code": "#(if (> %2 1) (apply interleave (repeat %2 %1)) %1)", "user": "55306f9de4b076ab5578f814"}, {"problem": 33, "code": "(fn [xs n]\n  (reduce\n   (fn [s t]\n     (loop [s' s\n            n' n]\n       (if (= n' 0)\n         s'\n         (recur (conj s' t) (dec n')))))\n   [] xs))", "user": "559141b1e4b0604b3f94d576"}, {"problem": 33, "code": "(fn [coll times] (mapcat #(repeat times %) coll))", "user": "559e25fde4b08a52bd4f97d0"}, {"problem": 33, "code": "(fn [s n] (mapcat (fn [i] (repeatedly n #(identity i))) s))", "user": "559c3d73e4b066d22e731f65"}, {"problem": 33, "code": "(fn [col n] (mapcat #(take n (iterate identity %)) col))", "user": "559a8816e4b066d22e731f41"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "559b2ad1e4b066d22e731f4e"}, {"problem": 33, "code": "(fn rep-sq\n  ([sq times]\n   (rep-sq sq times []))\n  ([sq times rep]\n   (if-let [frst (first sq)]\n     (recur (rest sq) times (concat rep (take times (repeat frst))))\n     rep)))", "user": "5537f30fe4b09218d5f44fd8"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "55a0d7e0e4b0acc240e31503"}, {"problem": 33, "code": "(fn f [xs n & args] ; args = current count, ret\n\t(cond (empty? xs) (reverse (second args))\n\t\t  (empty? args) (f xs n 1 '())\n\t\t  true (let [c (first args)\n\t\t  \t         ret (second args)]\n\t\t  \t      (if (= c n)\n\t\t  \t      \t(f (rest xs) n 1 (cons (first xs) ret))\n\t\t  \t      \t(f xs n (inc c) (cons (first xs) ret))))))", "user": "5583888ae4b05c286339e117"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "559ffabae4b0acc240e314ef"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "55a12668e4b0acc240e3150b"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "559972d1e4b031d6649c9bab"}, {"problem": 33, "code": "(fn [x y] (reduce concat (map #(repeat y %) x)))", "user": "55993deee4b031d6649c9ba5"}, {"problem": 33, "code": "(fn\n  [aseq number]\n  (mapcat #(repeat number %) aseq))", "user": "557e2eafe4b05c286339e0d2"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "55a346e8e4b0acc240e31532"}, {"problem": 33, "code": "(fn [xs n]\n   (mapcat (fn [x] (repeat n x)) xs))", "user": "53d64811e4b0e771c3025456"}, {"problem": 33, "code": "#(mapcat (fn [l] (repeat %2 l)) %)", "user": "55a35ef4e4b0acc240e31535"}, {"problem": 33, "code": "#(apply concat (for [x %1]\n  (take %2 (repeat x))))", "user": "5574c172e4b05c286339e059"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "55a1d7f6e4b0acc240e31519"}, {"problem": 33, "code": "#(apply concat [] (for [ele %1] (repeat %2 ele)))", "user": "55989c25e4b031d6649c9b9b"}, {"problem": 33, "code": "(fn [c n] (mapcat (fn [c1] (repeat n c1)) c))", "user": "55a02d8ae4b0acc240e314f2"}, {"problem": 33, "code": "(fn [coll x]\n  (reduce #(concat %1 %2) (map #(concat () (repeat x %) ) coll)))", "user": "5594e0e3e4b0c79f6e1db95b"}, {"problem": 33, "code": "#(if (> %2 1) (apply interleave (repeat %2 %1))\n            %1)", "user": "4e6a23d0535d8ccf87e9fea0"}, {"problem": 33, "code": "(fn [l n] (mapcat (fn [x] (repeat n x)) l))", "user": "55a59ebae4b0acc240e3154d"}, {"problem": 33, "code": "(fn [l n] (mapcat #(repeat n %) l))", "user": "503e91d4e4b06c4e0e1fa269"}, {"problem": 33, "code": "(fn repeater [coll n]\n  (reduce (fn [acc x]\n            (apply conj acc (repeat n x)))\n          [] coll))", "user": "54a96a15e4b09f271ff37cad"}, {"problem": 33, "code": "(fn replicate [s ntimes]\n     (reverse (reduce #(apply conj % (repeat ntimes %2)) '() s)))", "user": "55a62092e4b0acc240e31554"}, {"problem": 33, "code": "(fn myfun [s n]\n    (mapcat #(replicate n %) s))", "user": "559eb160e4b0acc240e314e1"}, {"problem": 33, "code": "(fn [coll times]\n  (->> coll\n       (reduce #(apply conj %1 (repeat times %2)) '())\n        reverse))", "user": "559468cbe4b0c79f6e1db954"}, {"problem": 33, "code": "(fn [lst n] (mapcat #(repeat n %) lst))", "user": "55496eeae4b0a04f79299569"}, {"problem": 33, "code": "#(reduce (fn [acc e] (concat acc (repeat %2 e))) '() %)", "user": "55a74d46e4b09e57187da2a3"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "553527ede4b09218d5f44fab"}, {"problem": 33, "code": "(fn [c t] (reduce #(concat %1 (repeat t %2) ) [] c))", "user": "55a31c66e4b0acc240e31530"}, {"problem": 33, "code": "#(reduce (fn [memo xs] (concat memo (repeat %2 xs))) [] %1)", "user": "5592dc6be4b0c79f6e1db935"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "55a30e9de4b0acc240e3152f"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "4fdf4e2be4b05e33b9224f96"}, {"problem": 33, "code": "(fn [m n]\n   (let [nn (repeat n)]\n     (mapcat #(take %2 (iterate identity %1)) m nn)))", "user": "53c0f4dee4b00fb29b221259"}, {"problem": 33, "code": "(fn [lat n] (reduce concat (map #(take n (repeat %)) lat)))", "user": "55aa1637e4b0988bba2ad949"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "5564c113e4b0c656e3ff180d"}, {"problem": 33, "code": "(fn [coll n] (reduce #(concat %1 (vec (repeat n %2))) '() coll))", "user": "55aa5f73e4b0988bba2ad94b"}, {"problem": 33, "code": "(fn [s n] (mapcat (fn [i] (repeatedly n #(identity i))) s))", "user": "55ab8c2de4b0988bba2ad954"}, {"problem": 33, "code": "(fn [col times]\n  (reduce concat\n           (map\n             #(repeat times %) col)))", "user": "55a1683ce4b0acc240e31513"}, {"problem": 33, "code": "(fn replicate-seq\n  [coll n]\n  (mapcat (partial repeat n) coll))", "user": "55a0a278e4b0acc240e314ff"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %)s))", "user": "5593b10ce4b0c79f6e1db943"}, {"problem": 33, "code": "(fn [x n] (if (= 1 n) (seq x) (apply interleave (repeat n x))))", "user": "55a0e139e4b0acc240e31504"}, {"problem": 33, "code": "(fn [s n]\n    (letfn [(rplct [s result]\n              (if (seq s)\n                (let [f (first s)]\n                  (recur\n                   (rest s)\n                   (concat result (repeat n f))))\n                result))]\n      (rplct s [])))", "user": "55ac07afe4b03311e7b7328f"}, {"problem": 33, "code": "(fn [coll, repeats]\n  (mapcat #(take repeats\n                 (iterate identity %))\n          coll)\n  )", "user": "559c4236e4b066d22e731f67"}, {"problem": 33, "code": "(fn [c n] (reduce #(concat %1 (repeat n %2)) () c))", "user": "559a9a3de4b066d22e731f45"}, {"problem": 33, "code": "(fn [s n] (mapcat #(take n (cycle [%])) s))", "user": "55ad59cde4b03311e7b732a7"}, {"problem": 33, "code": "(fn [xs c]\n  (mapcat #(repeat c %) xs)\n )", "user": "55aa8276e4b0988bba2ad94e"}, {"problem": 33, "code": "(fn [xs n] \n  (reduce \n   (fn [left right] (concat left (repeat n right))) \n   [] \n   xs))", "user": "55a1ba5ee4b0acc240e31517"}, {"problem": 33, "code": "(fn [x r] (let [rep (fn rec [cur n r] (cond (nil? cur) nil\n                                  (> n 1) (cons (first cur) (rec cur (dec n) r))\n                                  :else (cons (first cur) (rec (next cur) r r))))]\n  (rep x r r)))", "user": "55adcc8fe4b03311e7b732ab"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "55998d0ce4b031d6649c9bac"}, {"problem": 33, "code": "(fn dup \n  [s n] \n  (reverse (reduce (fn [s* x] (nth (take (inc n) (iterate (partial cons x) s*)) n)) [] s))\n)", "user": "55acd080e4b03311e7b73298"}, {"problem": 33, "code": "(fn [coll n]\n  (for [c coll, _ (range n)]\n    c\n  )\n)", "user": "55adf4d7e4b03311e7b732af"}, {"problem": 33, "code": "(fn [x n]\n  (if (= n 1)\n    x\n\t(apply interleave (repeat n x))))", "user": "54c120d7e4b0ed20f4ff6f1c"}, {"problem": 33, "code": "(fn [vector num]\n  (loop [res [], source vector]\n    (if (seq source)\n      (recur (into res (repeat num (first source))) (rest source))\n       res)))", "user": "55868660e4b059ccff29b1d4"}, {"problem": 33, "code": "(fn woo [a n] \n  (reverse (reduce \n            #(apply conj %1 (repeat n %2))\n             ()(seq a))))", "user": "55af7e21e4b03311e7b732cc"}, {"problem": 33, "code": "(fn [s t]\n  (let [n '()]\n  (reverse (reduce #(into %1 (take t (repeat %2))) n s))))", "user": "55aaa36fe4b0988bba2ad94f"}, {"problem": 33, "code": "(fn [coll orig-count]\n  (loop [elt (last coll) coll (butlast coll) acc nil cnt orig-count]\n    (if (and (= 0 cnt) (empty? coll))\n      acc\n      (if (= 0 cnt)\n        (recur (last coll) (butlast coll) acc orig-count)\n        (recur elt coll (cons elt acc) (dec cnt))))))", "user": "55afc197e4b002ce9d5cbc18"}, {"problem": 33, "code": "(fn f [col n] \n  (if (empty? col)\n    nil\n    (concat (take n (repeat (first col)))\n          (f (rest col) n))\n    ))", "user": "55b08677e4b002ce9d5cbc23"}, {"problem": 33, "code": "#(mapcat (fn [elem] (take %2 (repeat elem))) %1)", "user": "55a5c3bee4b0acc240e3154e"}, {"problem": 33, "code": "(fn rep [s n] (mapcat #(repeat n %) s))", "user": "54f3d6c7e4b050824f58f5cb"}, {"problem": 33, "code": "(fn [x y] (reduce #(concat %1 (repeat y (first %2))) nil (partition-by identity x)))", "user": "55b0ecb7e4b002ce9d5cbc27"}, {"problem": 33, "code": "(fn [a b] (mapcat (partial repeat b) a))", "user": "502d39c5e4b0d96a44ab2031"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5592c56ee4b0c79f6e1db934"}, {"problem": 33, "code": "(fn [xs n] (apply concat (map #(repeat n %) xs)))", "user": "55b25970e4b0da326a65cf7e"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5537cbaee4b09218d5f44fd3"}, {"problem": 33, "code": "#(if(= %2 1)\n\t%1\n\t(apply interleave (repeat %2 %1))\n )", "user": "5595c60ee4b0c79f6e1db96f"}, {"problem": 33, "code": "(comp #(apply concat %) (fn [l i] (map #(repeat i %) l)))", "user": "53396c03e4b0e30313ee6ca7"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "53cb5559e4b00fb29b2212d2"}, {"problem": 33, "code": "(fn wat [coll n]\n  (let [s (seq coll)]\n    (apply concat (map #(repeat n %) s))))", "user": "54dcbc6ee4b024c67c0cf787"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "55ab07e0e4b0988bba2ad953"}, {"problem": 33, "code": "(fn [xs n]\n  (mapcat\n   #(repeat n %)\n   xs))", "user": "55aa7c5ce4b0988bba2ad94d"}, {"problem": 33, "code": "(fn [col num] (mapcat #(repeat num %) col))", "user": "516f5b7ee4b0ef3e37990e7e"}, {"problem": 33, "code": "(fn [s n] \n   (->> s (map #(repeat n %)) (apply concat)))", "user": "5587cd86e4b059ccff29b1e6"}, {"problem": 33, "code": "(fn eee [[s & tail] n]\n  (concat (repeat n s) (if tail (eee tail n) []))\n)", "user": "55b3e8aee4b01b9910ae2977"}, {"problem": 33, "code": "(fn [sq n] \n  (reduce (fn [accum el] \n            (concat accum (take n (iterate identity el)))) \n          [] \n          sq))", "user": "55b527cbe4b01b9910ae2985"}, {"problem": 33, "code": "(fn [l n] (mapcat #(repeat n %) l))", "user": "54236ce1e4b01498b1a71ad1"}, {"problem": 33, "code": "(fn [xs n]\n  (let [i n]\n   \t (mapcat identity (for [x xs]\n      (loop [i n\n             r []]\n        (if (<= i 0) r\n                    (recur (dec i) (cons x r))))))))", "user": "503c90aae4b06c4e0e1fa24b"}, {"problem": 33, "code": "(fn repli [coll x]\n  (reduce concat (map #(take x (repeat %)) coll)))", "user": "557f748ae4b05c286339e0df"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "53e9dce1e4b036ad0777e4bc"}, {"problem": 33, "code": "(fn [v n]\n    (apply concat (map #(take n (repeat %)) v)))", "user": "55975569e4b031d6649c9b8e"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "532dbd3ce4b019098a6f8b40"}, {"problem": 33, "code": "(fn [coll n]\n   (mapcat #(repeat n %) coll))", "user": "55b54ecbe4b01b9910ae2987"}, {"problem": 33, "code": "(fn [x y]\n\t(mapcat #(repeat y %) x)\t\n)", "user": "55b60518e4b01b9910ae298e"}, {"problem": 33, "code": "(fn [s c] (if (> c 1) (apply interleave (take c (repeat s))) s))", "user": "55b77c7ce4b01b9910ae29a3"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "55ae383fe4b03311e7b732b7"}, {"problem": 33, "code": "(fn [x, c]\n  (loop [in x result []]\n  (if (empty? in)\n    result\n    (recur (rest in) (concat result (repeat c (first in))))\n  )))", "user": "55b705fce4b01b9910ae29a0"}, {"problem": 33, "code": "(fn [s n]\n  (if (= n 1) s\n  \t(apply interleave (repeat n s))))", "user": "55b1ab40e4b0da326a65cf6e"}, {"problem": 33, "code": ";#(mapcat identity (reduce (fn [acc x] (conj acc (replicate %2 x))) [] %1))\n;;(fn [xs n] (apply interleave (repeat n xs)))\n\n(fn [xs n] (mapcat #(repeat n %1) xs))", "user": "55b8c339e4b01b9910ae29b9"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "556204c2e4b0c656e3ff17d2"}, {"problem": 33, "code": "(fn replicate-seq [coll n]\n  (mapcat #(repeat n %) coll))", "user": "55b69e37e4b01b9910ae2999"}, {"problem": 33, "code": "(fn replic [items number]\n  (let [items (map #(repeat number %) items)]\n    (loop [acc []\n           [first & rest :as item] items]\n      (if (empty? item) (seq acc)\n        (recur (into acc first) rest)))))", "user": "55bbfd60e4b01b9910ae29ed"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "4f2861eee4b0d6649770a017"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "55b1e9e7e4b0da326a65cf74"}, {"problem": 33, "code": "#(mapcat (fn [input](repeat %2 input)) %1)", "user": "5573a505e4b0aa18f790f3fa"}, {"problem": 33, "code": "#(mapcat (fn [x] (take %2 (iterate identity x))) %1)", "user": "55bbd179e4b01b9910ae29eb"}, {"problem": 33, "code": "(fn [x i] (mapcat (partial repeat i) x))", "user": "55be39f9e4b01b9910ae2a06"}, {"problem": 33, "code": "(fn repl [xs n]\n  (if (empty? xs)\n      ()\n      (concat (repeat n (first xs)) (repl (rest xs) n))))", "user": "549dfe40e4b0f3d1d8e70f9a"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(concat (repeat n %)) coll))", "user": "55962e92e4b0c79f6e1db976"}, {"problem": 33, "code": "(fn [coll x] (mapcat #(repeat x %) coll))", "user": "55b107fee4b002ce9d5cbc2a"}, {"problem": 33, "code": "(fn [coll n] (if (= n 1) coll (apply interleave (repeat n coll))))", "user": "55bfc39ee4b01b9910ae2a1a"}, {"problem": 33, "code": "(fn replicateCollection\n  [collection numberReplicates]\n  \"Returns a collection with each element duplicated the specified number\"\n  (mapcat #(take numberReplicates (cycle (conj '() %))) collection))", "user": "55a9e0fee4b0988bba2ad945"}, {"problem": 33, "code": "(fn [sequence-in index]\n  (mapcat (fn [x] (repeat index x)) sequence-in))", "user": "557775a3e4b05c286339e084"}, {"problem": 33, "code": "(fn [xs times] (apply concat (map #(repeat times %) xs)))", "user": "551d8796e4b07993ea3788ec"}, {"problem": 33, "code": "(fn [coll n] \n  (reduce #(apply conj %1 (take n (repeat %2))) [] coll))", "user": "55c0afa5e4b01b9910ae2a27"}, {"problem": 33, "code": "#(apply mapcat vector (repeat %2 %1))", "user": "50978ca4e4b00ad8bab4e966"}, {"problem": 33, "code": ";(fn [coll num] (apply concat (map #(take num (repeat %)) coll)))\n(fn [coll num]\n  (mapcat #(take num (repeat %)) coll))", "user": "55b1b67ce4b0da326a65cf6f"}, {"problem": 33, "code": "(fn [x n]\n    (mapcat #(repeat n %) x))", "user": "4e8a170c535d3e98b802328f"}, {"problem": 33, "code": "(fn rep [c n] (mapcat #(take n (repeat %)) c))", "user": "55c10409e4b01b9910ae2a2c"}, {"problem": 33, "code": "(fn my-replicate\n  [seq n]\n  (if (empty? seq)\n    (empty seq)\n    (concat (repeat n (first seq)) (my-replicate (rest seq) n))))", "user": "5599abc9e4b031d6649c9bb0"}, {"problem": 33, "code": "#(mapcat (fn [ele] (take %2 (cycle [ele]))) %1)", "user": "55bc2322e4b01b9910ae29f0"}, {"problem": 33, "code": "#(apply mapcat list (repeat %2 %1))", "user": "559454f2e4b0c79f6e1db952"}, {"problem": 33, "code": "(fn f [coll n]\n  (reduce (fn [a e] (apply conj a (repeat n e))) [] coll))", "user": "549c6792e4b0f3d1d8e70f8b"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "55c37594e4b0e31453f64989"}, {"problem": 33, "code": "(fn rep [col t]\n  (mapcat\n    #(repeat t %)\n    col\n    )\n  )", "user": "55c3149de4b0e31453f64987"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "55a31e3fe4b0acc240e31531"}, {"problem": 33, "code": "#(for [i %1 j (repeat %2 i)] j)", "user": "55c1eb52e4b0e31453f64970"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(take n (repeat %)) xs))", "user": "517e9526e4b09104ecebe7e2"}, {"problem": 33, "code": "(fn [inputList repeatCount] (loop [finalList [] remainingList inputList iter repeatCount]\n\t\t\t\t\t\t\t (if (= remainingList [])\n\t\t\t\t\t\t\t \t(reverse finalList)\n\t\t\t\t\t\t\t (if (= 0 iter)\n\t\t\t\t\t\t\t \t(recur finalList (rest remainingList) repeatCount)\n\t\t\t\t\t\t\t \t(recur (cons (first remainingList) finalList) remainingList (dec iter))\n\t\t\t\t\t\t\t )\n\t\t\t\t\t\t\t )\n\n\t\t\t\t\t\t\t)\n\n)", "user": "51fea7d7e4b0f1313d468a74"}, {"problem": 33, "code": "(fn [xs r]\n  (mapcat (fn [x] (repeat r x))\n          xs))", "user": "55c4e48be4b0e31453f649a7"}, {"problem": 33, "code": "#(mapcat (fn[xs](repeat %2 xs)) %)", "user": "553093bee4b076ab5578f817"}, {"problem": 33, "code": "(fn [dump-list times]\n  (loop [result [] initial 0]\n    (if (>= initial times)\n      (if (= (count result) 1)\n        (apply list (first result))\n        (apply interleave result))\n      (recur (conj result dump-list) (inc initial)))))", "user": "55a0d79fe4b0acc240e31502"}, {"problem": 33, "code": "(fn [coll times] \n  (apply concat (map \n    (fn [x]\n      (loop [new-coll [] cnt 0]\n        (if (= cnt times)\n          new-coll\n          (recur (cons x new-coll) (inc cnt))\n        )\n      )\n    )\n    coll\n  ))\n)", "user": "55c387e4e4b0e31453f6498b"}, {"problem": 33, "code": "(fn [s n] (mapcat (fn [i] (repeatedly n #(identity i) ) ) s) )", "user": "55c5820be4b0e31453f649b0"}, {"problem": 33, "code": "(fn [sq n]\n  (apply concat (map #(repeat n %) sq)))", "user": "55c68089e4b0e31453f649c4"}, {"problem": 33, "code": "(fn [v x]\n  (mapcat \n   #(repeat x %)\n   v))", "user": "55c652dde4b0e31453f649bd"}, {"problem": 33, "code": "#(reduce (fn a [m x] (concat m (take %2 (repeat x)))) [] %1)", "user": "55ac16a0e4b03311e7b73291"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce #(apply conj % (repeat n %2)) [] coll))", "user": "5512aca6e4b055c2f668d4b4"}, {"problem": 33, "code": "(fn [xs n]\n  (if (= 1 n)\n    xs\n  \t(->> xs\n       \t repeat\n         (take n)\n         (apply interleave))))", "user": "5512cd55e4b055c2f668d4ba"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "55b45825e4b01b9910ae297c"}, {"problem": 33, "code": "(fn dup-n [data times]\n  (loop [[head & tail :as data] data\n         acc []\n         times times]\n    (if-not (empty? data)\n      (recur tail\n             (loop [head head\n                    times times\n                    acc acc]\n               (if (= times 0)\n                 acc\n                 (recur head (dec times) (conj acc head))\n               )\n             ) times\n      )\n      acc\n    )\n  )\n)", "user": "55c461d3e4b0e31453f64999"}, {"problem": 33, "code": ";(fn [c n] (mapcat #(repeat n %) c))\n#(mapcat (partial repeat %2) %1)", "user": "553f70cae4b0a04f792994f8"}, {"problem": 33, "code": "#(reduce (fn [out item] (into out (repeat %2 item))) [] %1)", "user": "5582dfb6e4b05c286339e10d"}, {"problem": 33, "code": "(fn hello\n  [x ret]\n  (reduce into [] (map #(repeat ret %) x)))", "user": "55b3c03ee4b01b9910ae2975"}, {"problem": 33, "code": "(fn [coll n] (reduce concat (map #(repeat n %) coll)))", "user": "54b817eee4b0ed20f4ff6e93"}, {"problem": 33, "code": "(fn [col n] \n  (mapcat \n     #(repeat n %) col))", "user": "55c77070e4b0e31453f649d0"}, {"problem": 33, "code": "(fn [coll n]\n   (mapcat #(take n (cycle (list %))) coll))", "user": "55a372f1e4b0acc240e31537"}, {"problem": 33, "code": "#(apply concat (map (partial repeat %2) %1))", "user": "55c423e1e4b0e31453f64994"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "55c734a5e4b0e31453f649cb"}, {"problem": 33, "code": "(fn [coll rep] (mapcat #(repeat rep %) coll))", "user": "55ca4273e4b0e31453f649f9"}, {"problem": 33, "code": "(fn repeat-fun [col n] (reduce  (fn [final-col part] (concat final-col  (repeat n part))) [] col))", "user": "55c9bc1ee4b0e31453f649f1"}, {"problem": 33, "code": "(fn [c n]\n  (reduce\n   concat\n   (map\n     (fn [e] (repeat n e))\n     c\n   )\n  )\n)", "user": "55bb7546e4b01b9910ae29e7"}, {"problem": 33, "code": "(fn [x n]\r\n  (if (<= n 1)\r\n    x\r\n    (apply interleave (repeat n x))))", "user": "546e1142e4b00cfc9eacc199"}, {"problem": 33, "code": "#( ->> % (map (fn [x] (take %2 (iterate identity x)))) (apply concat))", "user": "55b39523e4b01b9910ae2973"}, {"problem": 33, "code": "(fn [coll n] (apply concat (map #(repeat n %) coll)))", "user": "54b5b3cce4b05787c3b163ab"}, {"problem": 33, "code": "#(if (= 1 %2) %1 (apply interleave (repeat %2 %1)))", "user": "552456e3e4b0882d96d091c2"}, {"problem": 33, "code": "(fn [col n] (reduce concat (map #(repeat n %) col)))", "user": "5578ba3ae4b05c286339e08c"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "55cae949e4b0e31453f649fe"}, {"problem": 33, "code": "(fn [x y z] (mapcat identity (reduce #(conj %1 (repeat z %2)) x y))) []", "user": "55b22c33e4b0da326a65cf79"}, {"problem": 33, "code": "#(apply concat (map (fn [v] (repeat %2 v)) %1))", "user": "55c20bd0e4b0e31453f64972"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(take n(iterate identity %)) coll))", "user": "55cdd76ae4b0e31453f64a20"}, {"problem": 33, "code": "(fn [v n] (reduce concat (map #(take n (repeat %)) v)))", "user": "5313d68de4b08068f379ed0f"}, {"problem": 33, "code": "#(apply concat (apply (partial map list)\n                      ((fn lo [c l]\n                         (if (= c 0)\n                           l\n                           (lo (- c 1) (cons %1 l)))\n                         )\n                       %2 ())\n                      ))", "user": "55bedd93e4b01b9910ae2a0d"}, {"problem": 33, "code": "(fn [col n] (mapcat #(repeat n %) col))", "user": "55caabd1e4b0e31453f649fb"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "55cdc576e4b0e31453f64a1f"}, {"problem": 33, "code": "(fn [coll times] \n  (if (= 1 times)\n    coll\n    (apply interleave (map identity (repeat times coll)))))", "user": "5586f418e4b059ccff29b1de"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "4eb171d7535d7eef30807340"}, {"problem": 33, "code": "(fn [c n]\n  (reduce (fn [x y]\n          (apply conj x (repeat n y)))\n        []\n          c))", "user": "5452a300e4b0e397800069c7"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))\n\n;(fn [coll n]\n;  (mapcat\n;   (fn [x]\n;     (repeat n x))\n;   coll))", "user": "55b7f263e4b01b9910ae29b4"}, {"problem": 33, "code": "#(if (< %2 2) %1\n   (apply interleave (repeat %2 %1)))", "user": "55d0e76ae4b0e31453f64a40"}, {"problem": 33, "code": "(fn\n  [s n]\n  (mapcat #(repeat n %) s))", "user": "556e3b73e4b09a3098a52514"}, {"problem": 33, "code": "(fn res\n  [coll num]\n  (loop [c coll\n         new []]\n    (if (empty? c)\n      new\n      (let [x (repeat num (first c))]\n        (recur (rest c) (concat new x))))))", "user": "55bd87ede4b01b9910ae29fe"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "55ccdc6be4b0e31453f64a18"}, {"problem": 33, "code": "(fn [x n]\n  (mapcat #(repeat n %) x))", "user": "55bb6a19e4b01b9910ae29e5"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "55d1a721e4b0e31453f64a47"}, {"problem": 33, "code": "(fn [c n] (apply concat (map #(repeat n %) c)))", "user": "55773cbae4b05c286339e07f"}, {"problem": 33, "code": "#(mapcat (fn [in] (repeat %2 in)) %1)", "user": "55ba33afe4b01b9910ae29cb"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "55d1f231e4b0e31453f64a4e"}, {"problem": 33, "code": "(fn [values reps]\n  (loop [to-process values\n         remaining-reps reps\n         result []]\n    (if (empty? to-process)\n      result\n      (recur\n       (if (= remaining-reps 0)\n         (rest to-process)\n         to-process)\n       (if (= remaining-reps 0)\n         reps\n         (dec remaining-reps))\n       (if (= remaining-reps 0)\n         result\n         (conj result (first to-process)))))))", "user": "55d06bcbe4b0e31453f64a3a"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "55d1b565e4b0e31453f64a49"}, {"problem": 33, "code": "#(apply concat (map (partial repeat %2) %))", "user": "55d332f5e4b0e31453f64a5f"}, {"problem": 33, "code": "(fn [l n] (mapcat #(repeat n %) l))", "user": "55236ad6e4b0882d96d091b1"}, {"problem": 33, "code": "(fn [collection times] (apply concat (map #(repeat times %) collection)))", "user": "55d4273de4b0e31453f64a70"}, {"problem": 33, "code": "(fn [s n] (mapcat (fn [i] (take n (repeat i))) s))", "user": "5589a941e4b059ccff29b207"}, {"problem": 33, "code": "#(mapcat (fn [a] (map (fn [_] a) (range %2))) %1)", "user": "55b0f5bfe4b002ce9d5cbc28"}, {"problem": 33, "code": "(fn [xs n] (mapcat (partial repeat n) xs))", "user": "55d204abe4b0e31453f64a4f"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5563b88be4b0c656e3ff17f5"}, {"problem": 33, "code": "(fn [c n] (reduce #(apply conj %1 (repeat n %2)) [] c))", "user": "54864662e4b0e286459a11b8"}, {"problem": 33, "code": "(fn [s n] \n  (apply concat  \n   (map \n   \t(fn [v] (repeat n v))\n   \ts)))", "user": "55d4b995e4b0e31453f64a7c"}, {"problem": 33, "code": "#(if(= %2 1) %1\n   (apply interleave (repeat %2 %1)))", "user": "55d50a38e4b0e31453f64a80"}, {"problem": 33, "code": "(fn [l n]\n  (loop [left l\n         repeated 0\n         acc []]\n    (if (empty? left)\n      acc\n      (if (= repeated n)\n        (recur (rest left) 0 acc)\n        (recur left (inc repeated) (conj acc (first left)))))))", "user": "55d4dddde4b0e31453f64a7f"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "55d5ee3fe4b0e31453f64a92"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5561d2c2e4b0c656e3ff17cd"}, {"problem": 33, "code": "(fn [xs n]\n  (if (> n 1)\n    (apply interleave (for [i (range n)] xs))\n    xs))", "user": "55d5e80ee4b0e31453f64a91"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "55d6a2ebe4b0e31453f64a9a"}, {"problem": 33, "code": "(fn [s c] (apply concat \n(map \n   #(repeat \n              c \n              %) s)))", "user": "52fbc44be4b047fd55837010"}, {"problem": 33, "code": "(fn [col n]\n   (mapcat\n     #(repeat n %)\n     col)\n\n   )", "user": "5382b433e4b06839e8705ed7"}, {"problem": 33, "code": "#(->> %1\n      (map (fn [e] (repeat %2 e)))\n      (apply concat))", "user": "55627de1e4b0c656e3ff17d9"}, {"problem": 33, "code": "(fn rep-each [eles times] (mapcat #(repeat times %) eles))", "user": "55d95be7e4b0e31453f64ac9"}, {"problem": 33, "code": "#(mapcat (fn [coll] (repeat %2 coll)) %1 )", "user": "55d85ac9e4b0e31453f64ab2"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "55da1ebce4b0e31453f64ad2"}, {"problem": 33, "code": "#(if (< %2 2) (apply list %1) (loop [n %2 r '()]\n   (if (= n 0) (apply interleave r) (recur (dec n) (conj r %1)))))", "user": "55d29fb6e4b0e31453f64a59"}, {"problem": 33, "code": "(fn [s n] (mapcat (fn [i] (repeatedly n #(identity i))) s))", "user": "55d045cde4b0e31453f64a38"}, {"problem": 33, "code": "#(reduce (fn[x y] (concat x (repeat %2 y))) [] %1)", "user": "55d9d7e3e4b0e31453f64acd"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "55dab5c8e4b0e31453f64ada"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "553c136ae4b09218d5f45012"}, {"problem": 33, "code": "(fn [coll x] (mapcat #(repeat x %) coll))", "user": "55bd6734e4b01b9910ae29fd"}, {"problem": 33, "code": "(fn [s n] (loop [left-to-process s final-sequence '()]\n            (if (empty? left-to-process)\n              final-sequence\n              (recur (rest left-to-process) (apply concat final-sequence [(repeat n (first left-to-process))]))\n              )\n            )          \n          )", "user": "55c5261ee4b0e31453f649ae"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat % %2) (repeat y) x))", "user": "559067ace4b0277789237670"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "55db7e15e4b0e31453f64ae8"}, {"problem": 33, "code": "(fn [xs cnt] (loop [result [] xs xs]\n  (if (= 0 (count xs))\n    result\n    (recur (apply conj result (repeat cnt (first xs))) (rest xs))\n  )))", "user": "55d79b87e4b0e31453f64aa8"}, {"problem": 33, "code": "(fn replicate [x,z] ( reduce (fn [init,y] (concat init (repeat z y) )) [] x ))", "user": "55d35a01e4b0e31453f64a63"}, {"problem": 33, "code": "(fn[c n](mapcat #(repeat n %) c))", "user": "55dab408e4b0e31453f64ad9"}, {"problem": 33, "code": "(fn [coll n]\n  \t(if (= 1 n)\n    \tcoll\n    \t(apply interleave (repeat n coll))))", "user": "52ca7711e4b071a8d36bd3e3"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "5363d242e4b0243289761e5c"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5458c74de4b01be26fd74623"}, {"problem": 33, "code": "(fn [s, x]\n  (reverse\n   \t(reduce (fn [s, v] \n              (reduce (fn [vv, _] (conj vv v)) s (range x) )\n              \n              ) '() s )\n   )\n  )", "user": "55dd91c9e4b050e68259b3ca"}, {"problem": 33, "code": "#(if (= %2 1)\n   %1\n   (apply interleave (take %2 (repeat %1))))", "user": "55dcb06ee4b050e68259b3b9"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "553bda0de4b09218d5f4500b"}, {"problem": 33, "code": "#(reduce concat (map (partial repeat %2) %))", "user": "4f435ee8e4b0d7d3c9f3fd1f"}, {"problem": 33, "code": "(fn\n          [coll n]\n          (reduce\n            concat\n            (map\n              #(repeat n %)\n              coll)))", "user": "55ded9fde4b050e68259b3e7"}, {"problem": 33, "code": "(fn [xs n]\n  (apply concat\n         (map (partial repeat n)\n              xs)))", "user": "55d87324e4b0e31453f64ab4"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "55dc2ad1e4b050e68259b3ac"}, {"problem": 33, "code": "(fn [items m] (mapcat #(repeat m %) items))", "user": "54924f64e4b0b312c081ff42"}, {"problem": 33, "code": "(fn [c v]\n  (mapcat #(take v (repeat %)) c)\n  )", "user": "55e1d34ae4b050e68259b421"}, {"problem": 33, "code": "(fn replicate [lat n]\n  (reduce concat (map #(take n (repeat %)) lat)))", "user": "55e15824e4b050e68259b41b"}, {"problem": 33, "code": "(fn [x n] (reduce\n           concat\n           (map #(repeat n %) x)))", "user": "55e26417e4b050e68259b433"}, {"problem": 33, "code": "(fn [l n]\n  (reduce #(concat %1 (repeat n %2)) '() l))", "user": "55e246c2e4b050e68259b431"}, {"problem": 33, "code": "(fn [col n]\n(apply concat (map #(repeat n %) col)))", "user": "54eb22a0e4b024c67c0cf845"}, {"problem": 33, "code": "(fn [xs dup] (mapcat (partial replicate dup) xs))", "user": "55d93d24e4b0e31453f64ac6"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "534056fce4b085b17e897dac"}, {"problem": 33, "code": "#(cond (= %2 1) %1\n       :else (apply interleave (repeat %2 %1)))", "user": "4dd5fdb0535d2dad7130b5c5"}, {"problem": 33, "code": "(fn [coll n] (if (= n 1) coll (apply interleave (repeat n coll))))", "user": "55d2dd27e4b0e31453f64a5b"}, {"problem": 33, "code": "(fn f [s n]\n  (let [f*\n        (fn [acc s*]\n          (concat acc (repeat n s*)))]\n    (reduce f* [] s)))", "user": "54edfebbe4b024c67c0cf869"}, {"problem": 33, "code": "(fn [l n] \n  (mapcat #(take n (repeat %)) l))", "user": "55d74e71e4b0e31453f64aa4"}, {"problem": 33, "code": "(fn \n   [coll n] \n   (mapcat #(repeat n %) coll))", "user": "54c94376e4b045293a27f665"}, {"problem": 33, "code": "#(reduce concat '() (for [elem %1] (take %2 (repeat elem))))", "user": "55e2f502e4b050e68259b43c"}, {"problem": 33, "code": "(fn [coll num-repeat ]\n\n(reduce (fn [accum val] (into accum (repeat num-repeat val))) [] coll)\n\n)", "user": "53c73e8ae4b00fb29b2212a5"}, {"problem": 33, "code": "(fn [seq mult]\n    (reduce concat\n      (map (fn [el] (repeat mult el)) seq)))", "user": "53a68c5ae4b0ef122a8689c8"}, {"problem": 33, "code": "(fn [ s n ] ( reduce #(concat %1 (repeat n %2)) '() s ) )", "user": "55d44dd6e4b0e31453f64a75"}, {"problem": 33, "code": "#(apply concat (map (fn [input](repeat %2 input)) %1))", "user": "55663e9be4b0c656e3ff182b"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "55e6c3f5e4b050e68259b48c"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "55df3b11e4b050e68259b3ef"}, {"problem": 33, "code": "(fn [col x] (mapcat #(take x (repeat %)) col) )", "user": "55dd0aebe4b050e68259b3bf"}, {"problem": 33, "code": "(fn replicate [l n]\n  (if (or (empty? l) (<= n 0))\n    '()\n    (if (= (count l) 1)\n      (if (= n 1)\n        l\n        (concat (replicate l (int (/ n 2)))\n                (replicate l (int (/ n 2)))\n                (replicate l (mod n 2))))\n      (concat (replicate (list (first l)) n) (replicate (rest l) n)))))", "user": "55e4487ce4b050e68259b44c"}, {"problem": 33, "code": "(fn [l t]\n  (apply concat (map \n               (fn [a]\n                 (loop [i 0, r []] \n                   (if (< i t) \n                     (recur (inc i) (cons a r))\n                     r)))\n               l)))", "user": "55e87696e4b0121d4835fd93"}, {"problem": 33, "code": "(fn [coll n] (reduce #(concat %1 (repeat n %2)) [] coll))", "user": "55e70e8de4b050e68259b490"}, {"problem": 33, "code": "#(if (not= %2 1)\n    (apply interleave (repeat %2 %1))\n    %1)", "user": "55b0d315e4b002ce9d5cbc26"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce (fn [acc x]\n            (concat acc (repeat n x)))\n          []\n          coll))", "user": "554bd33ce4b0a04f7929959a"}, {"problem": 33, "code": "(fn [coll, n] (mapcat (fn [el] (repeat n el)) coll))", "user": "55ea0dc3e4b0121d4835fda9"}, {"problem": 33, "code": "(fn [coll n]\n    (reduce concat (map #(repeat n %) coll))\n    )", "user": "55e9842ae4b0121d4835fda1"}, {"problem": 33, "code": "(fn [lst n] (mapcat #(repeat n %) lst))", "user": "55ce2b6de4b0e31453f64a26"}, {"problem": 33, "code": "(fn [s n]\n          (reduce\n            (fn [a b] (apply conj a (repeat n b)))\n            []\n            s)\n          )", "user": "55d42f78e4b0e31453f64a73"}, {"problem": 33, "code": "(fn [s t]\n  (reduce (fn [e y] (concat e (repeat t y))) [] s))", "user": "500e6ddee4b04a05d36fcc06"}, {"problem": 33, "code": "#(reduce (fn [a v] (concat a (repeat %2 (identity v)))) () %1)", "user": "55ead489e4b0121d4835fdb6"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "53959edde4b0b51d73faaed8"}, {"problem": 33, "code": "(fn [c n]\n  (reduce\n    #(concat (repeat n %2) %1)\n    ()\n    (reverse c)))", "user": "5530baa5e4b076ab5578f81a"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "55ecb2c0e4b0121d4835fdce"}, {"problem": 33, "code": "(fn [li reps] (mapcat (fn [item] (repeatedly reps #(identity item))) li))", "user": "55dbed2fe4b050e68259b3a6"}, {"problem": 33, "code": "(fn [s n] (mapcat (partial repeat n) s))", "user": "54290a64e4b01498b1a71b36"}, {"problem": 33, "code": "(fn [x y](reduce #(into %1 (repeat y %2)) [] x))", "user": "55ec04c4e4b0121d4835fdc1"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "55d9743ae4b0e31453f64aca"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "55eef39be4b0121d4835fdf9"}, {"problem": 33, "code": "(fn [s n] (reduce #(concat %1 (repeat n %2)) [] s))", "user": "55ed962ae4b0121d4835fddd"}, {"problem": 33, "code": "(fn rep [x y] (apply concat (map #(repeat y %) x)))", "user": "529c722de4b04e0c58e87b63"}, {"problem": 33, "code": "(fn [l c]\n  (mapcat #(take c (iterate identity %)) l))", "user": "53fc88e7e4b0de5c418485be"}, {"problem": 33, "code": "(fn [coll n] (reduce (fn [dup item] (concat dup (repeat n item))) '() coll))", "user": "55f014ebe4b06e875b46ce1b"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "55ecac8ee4b0121d4835fdcc"}, {"problem": 33, "code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll))\n  )", "user": "55ec1048e4b0121d4835fdc3"}, {"problem": 33, "code": "#(cond \n   (= 1 %2) %\n   (= 2 %2) (interleave % %)\n   (= 3 %2) (interleave % % %)\n   (= 4 %2) (interleave % % % %)\n)", "user": "54f9c4dfe4b01ecee9d88841"}, {"problem": 33, "code": "#(mapcat (fn[x] (repeat %2 x)) %1)", "user": "558fec41e4b0277789237666"}, {"problem": 33, "code": "(fn [orig times]\n  (reduce #(apply conj %1 (repeat times %2)) [] orig))", "user": "55eaca20e4b0121d4835fdb4"}, {"problem": 33, "code": "(fn repl [coll fact]\n  (mapcat #(repeat fact %) coll)\n  )", "user": "55f06183e4b06e875b46ce23"}, {"problem": 33, "code": "#(apply concat (for [a %] (take %2 (repeat a))))", "user": "4f5eda39e4b0030a34fb2b56"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "539e717fe4b0ca733b974488"}, {"problem": 33, "code": "(fn [coll n] (apply concat (map #(repeat n %) coll)))", "user": "55f2fdc3e4b06e875b46ce51"}, {"problem": 33, "code": ";;#(apply concat (for [x %1] (repeat %2 x)))\n\n#(mapcat (partial repeat %2) %1)", "user": "55e1fc42e4b050e68259b424"}, {"problem": 33, "code": "(fn [col n]\n  (->>\n   col\n   (map #(repeat n %))\n   (reduce concat)))", "user": "55912230e4b027778923767a"}, {"problem": 33, "code": "#(mapcat (fn[x](repeat %2 x)) %)", "user": "526c669be4b03e8d9a4a728f"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(take n %) (for [el coll] (iterate (fn [x] x) el))))", "user": "55f4ef68e4b06e875b46ce82"}, {"problem": 33, "code": "#((fn adding[res container m] \n\t(if-let [[f & r] container] \n\t\t(adding (concat\n\t\t\tres\n\t\t\t(take m (repeat f))) r m)\n\t\t(seq res)\n\t))\n\t[] %1 %2)", "user": "55ef9c9de4b066087aa94537"}, {"problem": 33, "code": "(fn [arr,n] \n  (mapcat #(repeat n %) arr))", "user": "54d05a9de4b0e8a36923e5c7"}, {"problem": 33, "code": "(fn [s n] (mapcat (fn [e] (repeat n e)) s))", "user": "5080d6e3e4b01a93d3f38e4b"}, {"problem": 33, "code": "(fn [n, s] \n  (mapcat #(repeat s %1) n))", "user": "55a161d1e4b0acc240e31511"}, {"problem": 33, "code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "user": "55f20e4be4b06e875b46ce40"}, {"problem": 33, "code": "(fn [xs, n] (reduce #(concat % (repeat n %2) ) [] xs))", "user": "55f5625de4b06e875b46ce86"}, {"problem": 33, "code": "(fn x [coll n]\n  (if (= coll '())\n      '()\n      (concat (map (fn [_] (first coll)) (range n)) (x (rest coll) n))))", "user": "55f5c118e4b06e875b46ce8e"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %)s))", "user": "55e5c852e4b050e68259b474"}, {"problem": 33, "code": "(fn[c n] (mapcat (fn[x] (repeat n x)) c))", "user": "5509b434e4b06e50f9beb11e"}, {"problem": 33, "code": "(fn  dupx [s num]\n  (letfn [(duper [n v]\n            (repeat n v))]\n    (loop [r (rest s)\n           acc (into () (duper num (first s)))]\n      (if (empty? r)\n        (reverse acc)\n        (recur (rest r) (into acc (duper num (first r))))))))", "user": "4ebbff41535dfed6da9c6d78"}, {"problem": 33, "code": "(fn  [coll fac]\n  ;; Write a function which replicates each element of a sequence a variable number of times.\n  (mapcat #(repeat fac %) coll))", "user": "54534c83e4b0e397800069cd"}, {"problem": 33, "code": "(fn [v n]\n  (reduce #(concat %1 (repeat n %2)) [] v))", "user": "55f2d4ede4b06e875b46ce4c"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "55ed71dae4b0121d4835fdd9"}, {"problem": 33, "code": "(fn fff[co n](apply concat (map #(repeat n %) co)))", "user": "55f01316e4b06e875b46ce1a"}, {"problem": 33, "code": "(fn [s n]\n  (seq (reduce #(apply conj %1 (take n (repeat %2))) [] s)))", "user": "55f9c245e4b03cbcff9738ca"}, {"problem": 33, "code": "(fn [s n]\n  (let [f (fn [c n]\n  (loop [acc [] x n]\n    (if (= 0 x)\n      acc\n      (recur (conj acc c) (dec x)))))]\n    (reduce #(into %1 (f %2 n)) [] s)))", "user": "55f8fd70e4b03cbcff9738bc"}, {"problem": 33, "code": "#(mapcat (partial repeat %2)%)", "user": "55f7e056e4b06e875b46ceb4"}, {"problem": 33, "code": "(fn [coll times]\n  (loop [r []\n         c coll]\n    (if (empty? c)\n      r\n      (recur (concat r (repeat times (first c)))\n             (rest c)))))", "user": "5541fa50e4b0a04f79299515"}, {"problem": 33, "code": "(fn [c n]\n  (apply\n   concat\n   (map\n    (partial repeat n)\n    c)))", "user": "53de7484e4b0d874e779ae35"}, {"problem": 33, "code": "(fn [xs n]\n  (loop [xs xs acc []]\n    (if (seq xs)\n      (recur (rest xs) (concat acc (take n (iterate identity (first xs)))))\n      acc)))", "user": "55f90d76e4b03cbcff9738bd"}, {"problem": 33, "code": "(fn [stuff times] \n  (reduce (fn [newstuff elem] \n            (concat newstuff (repeat times elem))) [] stuff))", "user": "55f7ebeae4b06e875b46ceb7"}, {"problem": 33, "code": "(fn [c n]\n  (mapcat #(repeat n %) c))", "user": "55fbf6cae4b0f488688e066c"}, {"problem": 33, "code": "(fn [c n]\n  (reduce #(loop [n n r %1] (if (= n 0) r (recur (dec n) (conj r %2)))) [] c)\n)", "user": "55eeb37ae4b0121d4835fdf3"}, {"problem": 33, "code": "(fn replicate-n [xs, n]\n  (let [l (first xs) r (next xs)]\n    (concat\n      (repeat n l)\n      (when (seq r)\n        (replicate-n r n)))))", "user": "55ecaee4e4b0121d4835fdcd"}, {"problem": 33, "code": "(fn replicate-s [s n]\n  (apply concat (map #(repeat n %) s)))", "user": "55f8180fe4b06e875b46ceba"}, {"problem": 33, "code": "#(for [x %1 t (range %2)] x)", "user": "55efc44ee4b066087aa9453e"}, {"problem": 33, "code": "(fn [coll n] (mapcat (fn [e] (repeat n e)) coll))", "user": "55ec4558e4b0121d4835fdc5"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(take n (repeat %)) coll))", "user": "55eb6352e4b0121d4835fdba"}, {"problem": 33, "code": "(fn [s n] \n  (mapcat (partial repeat n) s))", "user": "55e06f82e4b050e68259b40d"}, {"problem": 33, "code": "(fn replicate [xs n]\n  (mapcat #(take n (repeat %)) xs))", "user": "55fb58b2e4b0f488688e0661"}, {"problem": 33, "code": "#(if (= 1 %2) %1 (apply interleave (repeat %2 %1)))", "user": "4f5599dfe4b0a7574ea71806"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "55fc1f05e4b0f488688e066f"}, {"problem": 33, "code": "(fn [coll n]\n  (if (<= n 1)\n    coll\n    (apply interleave (repeat n coll))))", "user": "55af3e6be4b03311e7b732c7"}, {"problem": 33, "code": "(fn [xs times]\n  (loop [[h & t] xs, result (empty xs)]\n    (if (nil? h)\n      result\n      (recur t, (into result (repeat times h)))\n      )\n    )\n  )", "user": "558ee1c9e4b0277789237659"}, {"problem": 33, "code": "(fn replicate-a-seq [coll reps]\n  (loop [c coll accum nil]\n    (if (empty? c) accum\n      (recur (rest c) (concat accum (repeat reps (first c)))))))", "user": "55f6e7ece4b06e875b46ce9e"}, {"problem": 33, "code": "(fn [coll reps]\n  (reduce #(concat % (take reps (repeat %2)))\n          (empty coll)\n          coll))", "user": "532f8569e4b019098a6f8b4f"}, {"problem": 33, "code": "(fn [x n] (reduce concat (map #(take n (repeat %)) x)))", "user": "54bdcde5e4b0ed20f4ff6ee5"}, {"problem": 33, "code": "(fn [coll times]\n  (apply concat\n         (map #(repeat times %) coll)))", "user": "55fe7e15e4b00f4cabc57651"}, {"problem": 33, "code": "#(reduce\n\t\t(fn [l r]\n\t\t\t(concat l r)\n\t\t)\n\t\t(map\n\t\t\t(fn [x] (repeat %2 x))\n\t\t\t%1\n\t\t)\n\t)", "user": "55fc8f1fe4b0f488688e0675"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "55f27bf9e4b06e875b46ce45"}, {"problem": 33, "code": "(fn repl [coll x]\n  (mapcat #(repeat x %) coll))", "user": "55f6f1d3e4b06e875b46cea0"}, {"problem": 33, "code": "(fn [s n]\n             (->> s\n                  (map #(repeat n %))\n                  (apply concat) ))", "user": "55edc088e4b0121d4835fde0"}, {"problem": 33, "code": "(fn n-rep [s n]\n  (mapcat #(repeat n %) s))", "user": "55ee62dde4b0121d4835fdeb"}, {"problem": 33, "code": "(fn [s n] \n  (mapcat #(repeat n %) s))", "user": "55fee5e4e4b00f4cabc5765a"}, {"problem": 33, "code": "(fn [s n]\n  (loop [s s\n         r []]\n    (if (empty? s)\n      r\n      (recur (rest s) (concat r (repeat n (first s)))))))", "user": "55fe997be4b00f4cabc57653"}, {"problem": 33, "code": "(fn [c n] (mapcat #(loop [idx n l ()]\n                     (if (= idx 0)\n                       l\n                       (recur (dec idx)(cons % l))))\n                   c))", "user": "55f8b32ae4b03cbcff9738ba"}, {"problem": 33, "code": "(fn [aseq times]\n  (loop [in aseq\n         acc []]\n    (if (empty? in) acc\n      (recur (rest in) (concat acc (for [n (range times)]\n                                   (first in)))))))", "user": "560151b5e4b04bb52996e185"}, {"problem": 33, "code": "(fn [s n] (reduce #(concat %1 ((partial repeat n)%2)) [] s))", "user": "55f1d5dfe4b06e875b46ce38"}, {"problem": 33, "code": "(fn [x y] \n  (if (= 1 y) \n  \tx\n \t(apply interleave (repeat y x))))", "user": "560039cce4b04bb52996e162"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "user": "558053b1e4b05c286339e0e9"}, {"problem": 33, "code": "(fn [s n] \n  (mapcat #(repeat n %) s))", "user": "54684c3be4b00cfc9eacc139"}, {"problem": 33, "code": "(fn [col n]\n      (mapcat (partial repeat n) col))", "user": "50a3ad0ee4b0ceace084d493"}, {"problem": 33, "code": "#(loop [c1 0\n         coll %\n         repcoll []]\n   (if (empty? coll)\n     (if (= 2 (count repcoll))\n       (concat (first repcoll) (second repcoll))\n       (concat (first repcoll) (second repcoll) (last repcoll)))\n     (recur (inc c1)\n            (rest coll)\n            (conj repcoll (repeat %2 (first coll))))))", "user": "55eeeb81e4b0121d4835fdf7"}, {"problem": 33, "code": "(fn [in-array count]\n    (reduce\n      (fn [acc i]\n        (concat acc (map (fn [c] i) (range 1 (inc count)) ))\n        )\n      []\n      in-array\n      )\n    )", "user": "53c6c9dfe4b00fb29b2212a1"}, {"problem": 33, "code": "(fn [sq times] (apply concat (map (fn [n] ((apply comp (repeat (dec times) #(conj % n))) (vector n))) sq)))", "user": "55f7c873e4b06e875b46ceb0"}, {"problem": 33, "code": "(fn [l n] (mapcat #(concat (repeat n %)) l))", "user": "55f2b42be4b06e875b46ce4a"}, {"problem": 33, "code": "(fn f [s n]\n  (let [f*\n        (fn [acc s*]\n          (concat acc (repeat n s*)))]\n    (reduce f* [] s)))", "user": "55fbcbd1e4b0f488688e0669"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat (partial repeat n) s))", "user": "5461dc79e4b01be26fd746a8"}, {"problem": 33, "code": "(fn [s n] (mapcat #(take n (repeat %)) s))", "user": "55f081bbe4b06e875b46ce25"}, {"problem": 33, "code": "(fn [s n](\n          mapcat (fn[a](repeat n a)) s\n          ))", "user": "56039843e4b04bb52996e1be"}, {"problem": 33, "code": "; third solution\n; this works on *my* system; maybe old clojure version on this site?\n#_#(apply interleave (repeat %2 %))\n\n; second solution\n(fn [xs n] (mapcat #(repeat n %) xs))\n\n; first solution\n#_(fn [xs n] (mapcat #(take n (cycle (list %))) xs))\n\n; copied from another user\n#_#(mapcat (partial repeat %2) %)", "user": "55e7d06ee4b050e68259b496"}, {"problem": 33, "code": "#(mapcat (fn [input](repeat %2 input)) %1)", "user": "55fbcbb1e4b0f488688e0668"}, {"problem": 33, "code": "(fn [l n] (mapcat #(repeat n %) l))", "user": "56035afae4b04bb52996e1b9"}, {"problem": 33, "code": "(fn[c n] (mapcat #(take n (repeat %)) c))", "user": "5602ab92e4b04bb52996e1a3"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce #(loop [cnt 0 s %1] \n             (if (< cnt n) \n               (recur (+ 1 cnt) (conj s %2))\n               s)) \n             [] coll))", "user": "53573d70e4b04ce2eb3ed278"}, {"problem": 33, "code": "#(mapcat (fn [elem] (repeat %2 elem)) %1)", "user": "56047160e4b0c80df0ca265d"}, {"problem": 33, "code": "#(mapcat (fn [item]                                                      \n               (take %2 (repeat item)))                                              \n              %1)", "user": "5410499de4b01498b1a719a6"}, {"problem": 33, "code": "(fn\n  [a-seq n]\n  (->> a-seq\n       (mapcat (fn [elem] (repeat n elem)))))", "user": "55e1bb20e4b050e68259b41f"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5606a4ace4b08b23635d3175"}, {"problem": 33, "code": "#(mapcat \n  (fn [e]\n    (repeat %2 e))\n  %)", "user": "55fe5dfae4b00f4cabc57650"}, {"problem": 33, "code": "(fn rp [s n]\n  (if (= n 0)\n    nil\n    (if (empty? s)\n      nil\n      (concat (list (first s)) (rp (list (first s)) (- n 1)) \n           (rp (rest s) n))))\n  )", "user": "55f47f54e4b06e875b46ce78"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "544f732fe4b0e39780006994"}, {"problem": 33, "code": "(fn replicate\n  [col n]\n  (mapcat #(take n (repeat %)) col))", "user": "55996253e4b031d6649c9baa"}, {"problem": 33, "code": "(fn oke\n  [xs n]\n  (cond\n   (= 1 (count xs)) (repeat n (nth xs 0))\n   (= 2 (count xs)) (concat (repeat n (nth xs 0)) (repeat n (nth xs 1)))\n   (= 3 (count xs)) (concat (repeat n (nth xs 0)) (repeat n (nth xs 1)) (repeat n (nth xs 2)))\n   ))", "user": "55e732c5e4b050e68259b492"}, {"problem": 33, "code": "(fn [s n]\n  (apply concat (map #(take n (repeat %)) s)))", "user": "56082adae4b046a4fc0ac008"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "50746e23e4b054001656acd1"}, {"problem": 33, "code": "#(if (= %2 1 )\n   %1\n   (apply interleave (take %2 (repeat (seq %1)))))", "user": "55810c73e4b05c286339e0f2"}, {"problem": 33, "code": "(fn [l n] (mapcat #(repeat n %) l))", "user": "5361d423e4b0243289761e49"}, {"problem": 33, "code": "(fn my-rep [x y]\n  (reduce concat (map #(repeat y (identity %)) x))\n  )", "user": "55f95de6e4b03cbcff9738c1"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "56041883e4b0c80df0ca2655"}, {"problem": 33, "code": "#(mapcat (fn [x c] (println :cx c x) (repeat c x)) %1 (repeat %2))", "user": "560794bde4b08b23635d3182"}, {"problem": 33, "code": "(fn [xs n] (apply concat (map #(repeat n %) xs)))", "user": "5601bb7ee4b04bb52996e195"}, {"problem": 33, "code": "#(apply concat (apply map list (repeat %2 %1)))", "user": "55c6fd60e4b0e31453f649c9"}, {"problem": 33, "code": "(fn [col times] (mapcat #(repeat times %) col))", "user": "501fe6fae4b0cb6ebc0a42ef"}, {"problem": 33, "code": "(fn [l n]\n  (mapcat #(replicate n %) l))", "user": "541df0b5e4b01498b1a71a86"}, {"problem": 33, "code": "(fn [sequence n]\r\n  (loop\r\n      [in sequence \r\n       out []]\r\n    (if (empty? in) \r\n      out\r\n      (recur (rest in) \r\n             (concat out (take n (repeat (first in))))))))", "user": "5603d057e4b0c80df0ca264e"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "55048182e4b086ebe8a79c7c"}, {"problem": 33, "code": "(fn [coll n] (if (= 1 n) coll (apply interleave (repeat n coll))))", "user": "55f3802be4b06e875b46ce5f"}, {"problem": 33, "code": "#(if (= 1 %2) %1 (apply interleave (take %2 (repeat %1))))", "user": "5609866ee4b0053d1b86c7e3"}, {"problem": 33, "code": "(fn rep [seq count] \n  (if (empty? seq)\n    seq\n\t(concat \n     (repeat count (first seq))\n     (rep (rest seq) count)\n    )\n  )\n)", "user": "5606d71ce4b08b23635d317a"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat (fn [ele] (repeat n ele)) coll))", "user": "56038f34e4b04bb52996e1bc"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll)\n  )", "user": "560768a0e4b08b23635d317f"}, {"problem": 33, "code": "(fn dup\n  [x n]\n  (mapcat (fn [i] (repeat n i)) x))", "user": "56084e91e4b046a4fc0ac00f"}, {"problem": 33, "code": "(fn [l n] \n  (reduce (fn [cl e]\n            (concat cl (repeat n e)))\n          [] l))", "user": "56051095e4b08b23635d3162"}, {"problem": 33, "code": "(fn f [s n]\n  (let [f*\n        (fn [acc s*]\n          (concat acc (repeat n s*)))]\n    (reduce f* [] s)))", "user": "560a7775e4b05f002753defa"}, {"problem": 33, "code": "(fn [a b] (mapcat #(repeat b %) a))", "user": "55e2d527e4b050e68259b43a"}, {"problem": 33, "code": "(fn replicate [s nr]\n  (if (empty? s)\n    '()\n    (into (replicate (rest s) nr) (repeat nr (first s)))))", "user": "560ac5cae4b05f002753df09"}, {"problem": 33, "code": "(fn [a i] (mapcat #(repeat i %) a))", "user": "55fd3004e4b07755b13145f6"}, {"problem": 33, "code": "#(mapcat (apply juxt (repeat %2 identity)) %1)", "user": "5603c31fe4b04bb52996e1c1"}, {"problem": 33, "code": "(fn [coll times] (mapcat (partial repeat times) coll))", "user": "55e274b4e4b050e68259b436"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "560d2a2be4b05f002753df35"}, {"problem": 33, "code": "(fn my-repeat [x y] (reduce #(into %1 (take y (repeat %2))) [] x))", "user": "5606ea56e4b08b23635d317b"}, {"problem": 33, "code": "(fn [xs n] (apply concat (map #(repeat n %) xs)))", "user": "560ae540e4b05f002753df0d"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "56011393e4b04bb52996e178"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat (partial repeat n) coll))", "user": "55f2e47de4b06e875b46ce4d"}, {"problem": 33, "code": ";(fn [l n] (apply concat (apply mapcat #(vector %&) (repeat n l))))\n(fn [l n] (mapcat #(repeat n %) l))", "user": "560a7b46e4b05f002753defb"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce #(concat %1 (repeat n %2)) '() coll))", "user": "560843dee4b046a4fc0ac00e"}, {"problem": 33, "code": "(fn [s n] \n  (reduce #(concat %1 (repeat n %2)) '() s))", "user": "5605b5e9e4b08b23635d316e"}, {"problem": 33, "code": "(fn [s n]\n (reduce\n  (fn [a x]\n   (concat\n    a\n    (take n (repeat x))))\n  []\n  s))", "user": "56050f06e4b08b23635d3161"}, {"problem": 33, "code": "(fn [y z] (reduce concat (map (fn [x] (repeat z x)) y)))", "user": "560ff632e4b05f002753df66"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "511e17a9e4b0c5b849dd36b0"}, {"problem": 33, "code": "(fn [xs n] (mapcat (partial repeat n) xs))", "user": "560e9a2de4b05f002753df52"}, {"problem": 33, "code": "(fn [c n] (mapcat (partial repeat n) c))", "user": "561047eae4b05f002753df6d"}, {"problem": 33, "code": ";(fn [coll n]\n;  (loop [acc []\n;        coll coll\n;        n n]\n;    (if (seq coll)\n;      (recur (apply conj acc (repeat n (first coll))) (rest coll) n)\n;      acc)))\n\n; better solution using mapcat:\n(fn [coll n] (mapcat #(repeat n %) coll))", "user": "560dfa8de4b05f002753df46"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "55fa3454e4b03cbcff9738ce"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "4ff24a1ae4b0678c553fc337"}, {"problem": 33, "code": "(fn [v n] (apply concat (map (partial repeat n) v)))", "user": "5604bcf7e4b08b23635d315a"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1 )", "user": "5505d137e4b086ebe8a79c8c"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "55bb1b26e4b01b9910ae29e0"}, {"problem": 33, "code": "#(loop [coll %1 it_val %2 answer []]\n  \n  (if (empty? coll)\n    answer\n    (recur \n     (rest coll)\n     it_val\n     (loop [thing_to_add (first coll) times_to_add_it it_val inner_answer answer]\n      (if\n       (= times_to_add_it 0)\n       inner_answer\n       (recur thing_to_add (dec times_to_add_it) (conj inner_answer thing_to_add))\n      )\n     )\n    )\n  )\n)", "user": "560fe558e4b05f002753df63"}, {"problem": 33, "code": "(fn [coll n]\n  (if (= n 1)\n   \tcoll\n  \t(apply interleave (repeat n coll))))", "user": "544d8be9e4b0e3978000697d"}, {"problem": 33, "code": "(fn myreplicate [s n]\n  (cond (= (count s) 0) s\n        (= (count s) 1) (repeat n (first s))\n        :else\n        (into  (myreplicate (rest s) n) (repeat n (first s)))\n    )\n  )", "user": "55a65872e4b09e57187da299"}, {"problem": 33, "code": "#(reverse (reduce (fn [x y] (concat (repeat %2 y) x)) '() %1))", "user": "5613a96ae4b05f002753dfa4"}, {"problem": 33, "code": "(fn[s c](reduce (fn[r e](apply conj r (repeat c e))) [] s))", "user": "560d491ae4b05f002753df3b"}, {"problem": 33, "code": "(fn replic\n  [xs n]\n  (reduce (fn [x y] (concat x (repeat n y))) [] xs))", "user": "52606318e4b03e8d9a4a7036"}, {"problem": 33, "code": "(fn [coll n] (mapcat (partial repeat n) coll))", "user": "55f2c898e4b06e875b46ce4b"}, {"problem": 33, "code": "(fn [s r]\n  (mapcat #(repeat r %) s))", "user": "50a00725e4b08df8156e9e46"}, {"problem": 33, "code": "(fn ! [coll x] \n  (if (empty? (rest coll))\n    (repeat x (first coll))\n    (concat (repeat x (first coll)) (! (rest coll) x))\n  ))", "user": "50523848e4b0a561d07d8f1a"}, {"problem": 33, "code": "#(if (= %2 1) %1\n   (apply interleave (repeat %2 %1)))", "user": "4f6ba7bce4b07046d9f4efb0"}, {"problem": 33, "code": "(fn [xs n] \n  (let [x (mapcat (partial repeat n) (partition-by identity xs))]\n    (reduce concat '() x)\n    ))", "user": "52aaabf7e4b0c58976d9ac68"}, {"problem": 33, "code": "(fn dup [l n]\n  (if\n    (= n 1)\n    l\n    (apply interleave (repeat n l))))", "user": "56069006e4b08b23635d3174"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "56014f55e4b04bb52996e184"}, {"problem": 33, "code": "(fn [coll times] \n    (mapcat #(replicate times %) coll))", "user": "55f330dde4b06e875b46ce56"}, {"problem": 33, "code": "(fn [x y] \n  (if (= y 1) x\n  (apply interleave(repeat y x))))", "user": "5614fa1de4b05f002753dfbe"}, {"problem": 33, "code": "(fn [s n] (mapcat #(take n (repeat %)) s))", "user": "55f09e7be4b06e875b46ce28"}, {"problem": 33, "code": "#(mapcat (fn [input](repeat %2 input)) %1)", "user": "555b43dfe4b0deb715856e4d"}, {"problem": 33, "code": "#(if (= 1 %2) %1 (apply interleave (repeat %2 %1)))", "user": "55d68726e4b0e31453f64a99"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5272645de4b03e8d9a4a742c"}, {"problem": 33, "code": "(fn [x c]\n  (reduce #(concat %1 (repeat c %2)) () x))", "user": "5585ff97e4b001b0851d7515"}, {"problem": 33, "code": "(fn replicate\n  [coll n]\n  (mapcat (partial repeat n)\n          coll))", "user": "56180d83e4b06b1bb2182a18"}, {"problem": 33, "code": "#(if (= %2 1)\n   %1\n   (apply interleave (repeat %2 %1)))", "user": "56163cc1e4b06b1bb21829ff"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5617b1c0e4b06b1bb2182a13"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5617db88e4b06b1bb2182a16"}, {"problem": 33, "code": "(fn [coll n]\n    (mapcat #(repeat n %) coll)\n  )", "user": "4f5e5975e4b0030a34fb2b4d"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "55d28b38e4b0e31453f64a58"}, {"problem": 33, "code": "(fn [ls n] (mapcat #(repeat n %) ls))", "user": "52f3568fe4b05e3f0be25f0e"}, {"problem": 33, "code": "(fn replicate [lat n]\n  (reduce concat (map #(take n (repeat %)) lat)))", "user": "55e64c1ee4b050e68259b486"}, {"problem": 33, "code": "(fn [y n]\n  (if (= n 1) y\n  \t(apply interleave\n      ((fn more [thing times] (if (< 0 times) (concat [thing] (more thing (dec times))) [])) y n)\n  \t)\n  )\n)", "user": "56152a26e4b05f002753dfc1"}, {"problem": 33, "code": "(fn [l n] \n   (if \n     (= n 1) \n     l \n     (apply interleave (repeat n l)))\n   )", "user": "55e8a85be4b0121d4835fd98"}, {"problem": 33, "code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "user": "5521248fe4b08d5046aa8a69"}, {"problem": 33, "code": "(fn [s t] (mapcat (partial repeat t) s))", "user": "561ba3e5e4b073c65b0ce3eb"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "55022d7ce4b07d26eda61d84"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "561ca2eae4b064ca9f4b169b"}, {"problem": 33, "code": "(fn [s n] (mapcat #(take n (iterate identity %)) s))", "user": "561c0278e4b064ca9f4b1691"}, {"problem": 33, "code": "(fn [xs n]\n(mapcat #(repeat n %) xs)\n  )", "user": "5619a4d0e4b053970a773afd"}, {"problem": 33, "code": "(fn my-replicate [input n]\n  (for [x input\n        y (repeat n 1)]\n    x))", "user": "561bb8dbe4b064ca9f4b1686"}, {"problem": 33, "code": "(fn [x n] (reduce (fn [p q] (concat p (repeat n q))) '() x))", "user": "55e01f4ee4b050e68259b406"}, {"problem": 33, "code": "(fn [xs x] (if (= x 1) xs (apply interleave (take x (repeat xs)))))", "user": "55e3924ae4b050e68259b445"}, {"problem": 33, "code": "(fn [coll n]\n    (mapcat identity (map #(repeat n %) coll)))", "user": "560434cfe4b0c80df0ca2658"}, {"problem": 33, "code": "(fn [s n]\n  (reduce (fn [s x]\n            (concat s (repeat n x))\n          )\n      \t  [] s\n  )\n)", "user": "56195e57e4b053970a773af6"}, {"problem": 33, "code": "(fn replicte-elems\n  [coll n]\n  (for [elem coll dupelem (for [j (range n)] elem)] dupelem))", "user": "561ca6ebe4b064ca9f4b169c"}, {"problem": 33, "code": "(fn [coll count]\n  (mapcat #(repeat count %) coll))", "user": "560ae7e6e4b05f002753df0e"}, {"problem": 33, "code": "#(for [x %1 \n       y (repeat %2 1)] x)", "user": "55aacbeee4b0988bba2ad951"}, {"problem": 33, "code": "(fn my-replicate [seq1 times]\n    (mapcat #(take times (repeat %)) seq1))", "user": "561d8936e4b064ca9f4b16b2"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "561f9110e4b064ca9f4b16ce"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5616f411e4b06b1bb2182a0a"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "561ff621e4b064ca9f4b16d6"}, {"problem": 33, "code": "(fn [coll n] (mapcat (fn [item] \n                       (take n (repeat item)))\n                      coll))", "user": "56182af3e4b06b1bb2182a1b"}, {"problem": 33, "code": "#(apply mapcat list (repeat %2 %1))", "user": "561a060ee4b053970a773b01"}, {"problem": 33, "code": "(fn repl [s t]\n  (mapcat (partial repeat t) s))", "user": "56205609e4b064ca9f4b16df"}, {"problem": 33, "code": "(fn [xs n] \n  (mapcat #(repeat n %) xs))", "user": "521ceb02e4b0c4ef0be830a5"}, {"problem": 33, "code": "(fn [sq times] (mapcat #(repeat times %) sq ))", "user": "55fcaccfe4b0f488688e0679"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "4f40c46fe4b0e243712b1fbe"}, {"problem": 33, "code": "(fn v ([x y] (v x y '()))\n      ([x y z] (if (empty? x)\n                 z\n                 (recur (rest x) y (concat z (take y (repeat (first x))))))))", "user": "55cf0d0ee4b0e31453f64a2b"}, {"problem": 33, "code": "(fn [a n] \n  (if (= 1 n)\n    a\n    (apply interleave (repeat n a))))", "user": "4f213e2ee4b0d66497709fcf"}, {"problem": 33, "code": "#(apply concat (map (fn [x] (repeat %2 x)) %1))", "user": "56228d00e4b03f08ee9a9227"}, {"problem": 33, "code": "(fn [x n]\n  (loop [xs x res []]\n    (if (empty? xs) res (recur (next xs)(concat res (for [i (range n)](first xs)))))))", "user": "561e2b33e4b064ca9f4b16ba"}, {"problem": 33, "code": "#(reduce (fn [xs x] (apply conj xs (take %2 (repeat x)))) [] %1)", "user": "561d23e3e4b064ca9f4b16a5"}, {"problem": 33, "code": "(fn foo[coll n] (mapcat #(repeat n  %) coll))", "user": "5537b2c7e4b09218d5f44fce"}, {"problem": 33, "code": "(fn [s c]\n   (mapcat #(repeat c %) s))", "user": "54b54d1be4b05787c3b1639c"}, {"problem": 33, "code": "(fn dup [s n] (mapcat #(repeat n %) s))", "user": "54a634abe4b09f271ff37c84"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "561cb6cfe4b064ca9f4b169e"}, {"problem": 33, "code": "(fn replicates [col n]\n  (mapcat #(repeat n %1) col))", "user": "56244b3ae4b0b951f963fc22"}, {"problem": 33, "code": "(fn [coll n]\n  (loop [coll coll\n         counter n\n         result []]\n       (cond\n         (empty? coll) result\n         (> counter 1) (recur coll (dec counter) (conj result (first coll)))\n         :else (recur (rest coll) n (conj result (first coll))))))", "user": "55b5fc18e4b01b9910ae298d"}, {"problem": 33, "code": "(fn [S n] (mapcat #(repeat n %) S))", "user": "55f6fe09e4b06e875b46cea2"}, {"problem": 33, "code": "(fn [x n] (reduce (fn [r y]\n                      (loop [a n\n                             b r]\n                        (if (= a 0)\n                          b\n                          (recur (dec a) (conj b y))))) [] x))", "user": "56171eade4b06b1bb2182a0c"}, {"problem": 33, "code": "(fn seq-multiply [s n]\n  (apply concat (apply map list (take n (repeat (seq s))) )))", "user": "561eb82fe4b064ca9f4b16c7"}, {"problem": 33, "code": "(fn [s n]\n    (loop [s s\n           m n\n           acc '()]\n      (cond\n        (empty? s) (reverse acc)\n        (= m 1) (recur (rest s) n (cons (first s) acc))\n        :else (recur s (dec m) (cons (first s) acc)))))", "user": "5600dccee4b04bb52996e175"}, {"problem": 33, "code": "(fn [initial-x repeat]\n      (loop [x-prime (empty initial-x) x initial-x n repeat i 1]\n        ;(println (str x-prime \", \" x))\n        (let [a (first x)]\n          (if (empty? x)\n            x-prime\n            (if (= n i)\n              (recur (conj x-prime a) (rest x) n 1)\n              (recur (conj x-prime a) x n (inc i))\n            )\n          )\n        )\n      )\n    )", "user": "561bf12ce4b064ca9f4b168e"}, {"problem": 33, "code": "(fn dupl[input x] \n  (reduce \n    (fn[l ll]\n      (concat l ll))\n    ()\n    (map #(repeat x %) input)))", "user": "5626447fe4b00e49c7cb47bd"}, {"problem": 33, "code": "(fn [seq cnt] (mapcat #(repeat cnt %) seq))", "user": "56018dd4e4b04bb52996e18f"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "536829c8e4b0243289761e8b"}, {"problem": 33, "code": "#(for [a %1 b (range %2)] a)", "user": "5595ffabe4b0c79f6e1db972"}, {"problem": 33, "code": "(fn [xs n] (mapcat (partial repeat n) xs))", "user": "50e09313e4b061dbdced7233"}, {"problem": 33, "code": "#(loop [n 0 l ()] (if (= (count %1)n)l (recur (inc n) (concat l (take %2 (repeat (nth  %1 n))))) ))", "user": "562326cbe4b03f08ee9a9230"}, {"problem": 33, "code": "(fn [s n] (mapcat #(for [i (range n)] %) s))", "user": "53623eaee4b0243289761e4f"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "5627d09ce4b00e49c7cb47db"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "55bf6dbce4b01b9910ae2a12"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "562c15d3e4b058fa18c5a6d5"}, {"problem": 33, "code": "(fn [l r] (apply concat (map #(repeat r %) l)))", "user": "56102f50e4b05f002753df6b"}, {"problem": 33, "code": "(fn [coll n]\n  (->> coll\n       (mapcat (partial repeat n))\n       (into (empty coll))))", "user": "5629dfaae4b00e49c7cb4813"}, {"problem": 33, "code": "#(mapcat (fn[n](repeat %2 n)) %1)", "user": "56282cdde4b00e49c7cb47e2"}, {"problem": 33, "code": "(fn [xs n]\n  (apply concat (map #(repeat n %) xs)))", "user": "562cd94ee4b0a45d2ff83015"}, {"problem": 33, "code": "#(reduce concat (for [e %1] (repeat %2 e)))", "user": "53b1db8ee4b047364c044495"}, {"problem": 33, "code": "#(if (coll? (first %1))\n   (sort (take (* (count %1) %2) (cycle %1)))\n   (loop [a %1 b %2 c '()]\n     (if (empty? a)\n       (reverse (flatten c))\n       (recur (rest a) b (cons (repeat b (first a)) c)))))", "user": "561f27a1e4b064ca9f4b16ca"}, {"problem": 33, "code": "(fn rep [coll n]\n  (if (empty? coll) nil\n    (concat (replicate n (first coll))\n            (rep (rest coll) n))))", "user": "5627444fe4b00e49c7cb47cd"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "562b57c7e4b058fa18c5a6cc"}, {"problem": 33, "code": "(fn [x, i](loop [c 0 r []] (if(= c (count x)) r (recur (inc c) (apply concat (conj [r] (repeat i (nth x c))))))))", "user": "560d2b53e4b05f002753df37"}, {"problem": 33, "code": "(fn dupdup [s n]\n  (if (empty? (rest s))\n    (take n (cycle (list (first s))))\n    (concat (take n (cycle (list (first s)))) (dupdup (rest s) n))))", "user": "562e05e0e4b0a45d2ff83023"}, {"problem": 33, "code": "(fn [thelist, count]\n  (loop [oldlist thelist newlist []]\n    (if (empty? oldlist)\n      newlist\n      (recur (rest oldlist) (concat newlist (repeat count (first oldlist))))\n    )\n  )     \n)", "user": "562d6385e4b0a45d2ff8301b"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "54485749e4b032a45b8693c7"}, {"problem": 33, "code": "(fn [coll x]\n  (if (= x 1)\n    coll\n    (apply interleave (repeat x coll))))", "user": "562cb7cfe4b0a45d2ff83009"}, {"problem": 33, "code": "(fn myreplicate [a n] (nth (iterate #(interleave % %) a) (/ n 2)))", "user": "55ed9108e4b0121d4835fddc"}, {"problem": 33, "code": "#(apply mapcat vector (repeat %2 %))", "user": "55fc07d3e4b0f488688e066e"}, {"problem": 33, "code": "#(apply mapcat list (repeat %2 %1))", "user": "5578f292e4b05c286339e08f"}, {"problem": 33, "code": "(fn r-test[s n]\n  (mapcat #(repeat n %) s))", "user": "56083383e4b046a4fc0ac00a"}, {"problem": 33, "code": "(fn duplicate-each\n  [input n]\n  (into []\n        (mapcat #(apply list (repeat n %)) input)))", "user": "4fc524aae4b081705acca37e"}, {"problem": 33, "code": "(fn\n    [s n]\n   (loop [in  s\n          out []\n          c   n]\n     (println in out c)\n     (cond\n       (empty? in) (seq out)\n       (<= c 1) (recur (rest in)\n                      (conj out (first in))\n                      n)\n       :else (recur in\n                    (conj out (first in))\n                    (dec c)))))", "user": "562fb774e4b0ab312c17ebd9"}, {"problem": 33, "code": "(fn [coll n]\n  (apply concat (map (fn [x] (repeat n x)) coll)))", "user": "562db4d1e4b0a45d2ff83021"}, {"problem": 33, "code": "(fn [c rep]\n       (reduce #(apply conj %1 (repeat rep %2)) [] c))", "user": "551e6526e4b030e6a24d00e8"}, {"problem": 33, "code": "(fn [seq n] (reduce concat (map #(repeat n %) seq)))", "user": "562e871ee4b0ab312c17ebba"}, {"problem": 33, "code": "(fn [thelist n]\n  (mapcat #(take n (repeat %)) thelist))", "user": "56278266e4b00e49c7cb47d3"}, {"problem": 33, "code": "(fn [c reps] (if (= reps 1) c (apply interleave (repeat reps c))))", "user": "4f0366b0535dcb61093f6aa9"}, {"problem": 33, "code": "(fn [s n] (mapcat (fn [x] (repeat n x)) s))", "user": "504f0c9ce4b0e7ad84dbc4b2"}, {"problem": 33, "code": "(fn [ob times]\n             (let [len (count ob)]\n               (loop [ret () index 0]\n                 (if (= index len)\n                   (reverse ret)\n                   (let [item (nth ob index)]\n                     (recur (loop [ret2 ret i 0]\n                              (if (= i times)\n                                ret2\n                                (recur (conj ret2 item) (+ i 1))))\n                       (+ index 1))\n                     )))))", "user": "56305383e4b073c1cf7a9be6"}, {"problem": 33, "code": "(fn [seq num] (mapcat #(repeat num %) seq))", "user": "54d352f6e4b0e8a36923e604"}, {"problem": 33, "code": "#(mapcat (fn [e] (repeat %2 e)) %1)", "user": "5614ebc5e4b05f002753dfbc"}, {"problem": 33, "code": "#(apply concat (map (fn [coll] (repeat %2 coll) ) %1))", "user": "562ab73ce4b00e49c7cb482e"}, {"problem": 33, "code": "(fn [x c]\n  (reduce #(loop [r % i 0] \n             (if (= i c) \n               r \n               (recur (conj r %2) (inc i)))) [] x))", "user": "56288ccae4b00e49c7cb47ea"}, {"problem": 33, "code": "(fn [args n] (mapcat #(repeat n %) args))", "user": "561a1af6e4b053970a773b02"}, {"problem": 33, "code": "(fn [xs n] \n  (let [f (fn rec [ys m] \n            (if (= m 0) \n              (if (empty? (rest ys)) \n                '() \n                (rec (rest ys) n)) \n              (conj (rec ys (dec m)) (first ys))))\n        ] \n    (f xs n)))", "user": "560c31b4e4b05f002753df2d"}, {"problem": 33, "code": "(fn[s v d](let [val (first v)](if (empty? v) s (recur (apply  (partial conj s) (repeat d val)) (rest v) d)))) []", "user": "561cad18e4b064ca9f4b169d"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "55d62a68e4b0e31453f64a96"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5633bb9de4b0bfe05bf117b4"}, {"problem": 33, "code": "(fn [x cnt]\n  (loop [lst () copy x]\n    (if (empty? copy)  lst\n      (recur (concat lst (take cnt (repeat (first copy)))) (rest copy)))))", "user": "563130e4e4b0bfe05bf1178d"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat (fn [x] (repeatedly n #(identity x))) coll))", "user": "56174d86e4b06b1bb2182a0e"}, {"problem": 33, "code": "#(loop [xs %1, res []]\n   (if (seq xs)\n     (recur (rest xs) (into res (repeat %2 (first xs))))\n     res))", "user": "54995298e4b0b312c081ff8b"}, {"problem": 33, "code": "(fn [col n] (apply concat (map #(repeat n %) col)))", "user": "56350c87e4b0bfe05bf117c0"}, {"problem": 33, "code": "(fn [collection, replication] \n  (mapcat #(repeat replication %) collection)\n  )", "user": "54c6e78ae4b045293a27f634"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "558b41fce4b0277789237628"}, {"problem": 33, "code": "(fn [ss nn]\n((fn repli [v s n]\n  (let [f (first s)\n        r (rest s)\n        tms (fn tms [v x n] (if (> n 0) (tms (conj v x) x (dec n)) v))]\n    (if (nil? f) v (repli (tms v f n) r n))\n  )\n) [] ss nn))", "user": "562b1a7be4b058fa18c5a6cb"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5592ba8be4b0c79f6e1db931"}, {"problem": 33, "code": "(fn [x y]\n  (loop [r [] s x]\n    (if (empty? s)\n      r\n      (recur (into r (repeat y (first s))) (rest s)))))", "user": "546a65fce4b00cfc9eacc153"}, {"problem": 33, "code": "(fn [coll times] (mapcat #(repeat times %) coll))", "user": "560dbf17e4b05f002753df44"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "53286f84e4b09d4e7a9b5505"}, {"problem": 33, "code": "(fn [lis n]\n  (loop [res lis,result lis,m 1]\n    (if(= m n)\n      (if(= (compare (first lis) (second lis)) -1)\n        (sort result)\n        (sort > result))\n      (recur res (into result res) (inc m)))))", "user": "5191a763e4b0d428d29dc1b4"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5630fd6fe4b0bfe05bf1178b"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "56347285e4b0bfe05bf117bc"}, {"problem": 33, "code": "(fn [l n] (mapcat #(repeat n %) l))", "user": "56372798e4b0bfe05bf117d0"}, {"problem": 33, "code": "(fn [col n] \n  (mapcat \n   #(repeat \n     n \n     %1) \n   col))", "user": "54df955ee4b024c67c0cf7af"}, {"problem": 33, "code": "(fn [sq c]\n  (reduce \n    #(into %1 \n       (replicate c %2)) [] sq))", "user": "56366f73e4b0bfe05bf117cc"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "563799f8e4b0bfe05bf117db"}, {"problem": 33, "code": "(fn [xs n] (apply concat(map #(repeat n %) xs)))", "user": "56388a0fe4b0bfe05bf117e7"}, {"problem": 33, "code": "(fn [a b] (mapcat #(repeat b %) a))", "user": "56399b7ee4b0bfe05bf117f5"}, {"problem": 33, "code": "#(apply mapcat vector (repeat %2 %1))", "user": "563a30d7e4b0bfe05bf117f9"}, {"problem": 33, "code": "(fn [c reps] (reduce #(concat %1 (take reps (repeat %2))) [] c))", "user": "562e8b2be4b0ab312c17ebbb"}, {"problem": 33, "code": "(fn [lst n] (reduce #(concat %1 (take n (repeat %2))) '() lst))", "user": "545c2d07e4b01be26fd7465c"}, {"problem": 33, "code": "(fn [v n] (apply concat\n            (map (fn [myvec] (repeat n myvec)) v)\n          )\n)", "user": "522a5bdde4b0590a43906cf8"}, {"problem": 33, "code": "(fn [coll n] (apply concat (map #(repeat n %) coll)))", "user": "54f4ab86e4b0f2f3c5226e84"}, {"problem": 33, "code": "#(mapcat (fn [input](repeat %2 input)) %1)", "user": "5632b0a9e4b0bfe05bf117a8"}, {"problem": 33, "code": "(fn [l n]\n   (reduce \n     #(concat %1 (repeat n %2)) \n     [] \n     l))", "user": "55c13e73e4b01b9910ae2a2f"}, {"problem": 33, "code": "#(mapcat (fn [input](repeat %2 input)) %1)", "user": "53abed65e4b047364c044455"}, {"problem": 33, "code": "(fn repl [data cnt]\n  (when-not (empty? data)\n    (concat (repeat cnt (first data))\n            (repl (rest data) cnt))))", "user": "55664950e4b0c656e3ff1832"}, {"problem": 33, "code": "(fn rep [x n] (mapcat #(repeat n %) x))", "user": "563b559ee4b0bfe05bf1180d"}, {"problem": 33, "code": "(fn [xs n]\n    (reduce concat (map #(replicate n %) xs)))", "user": "56339e23e4b0bfe05bf117b1"}, {"problem": 33, "code": "(fn rep\n  [l n]\n  (reduce concat\n          (map \n            (fn [itm] (take n (repeat itm))) l)))", "user": "56393681e4b0bfe05bf117f2"}, {"problem": 33, "code": "#(mapcat (fn[x] (repeat %2 x)) %1)", "user": "561d7246e4b064ca9f4b16b1"}, {"problem": 33, "code": "#(mapcat (partial repeat %2)%1 )", "user": "55350bdae4b09218d5f44fa8"}, {"problem": 33, "code": "(fn [col n] (mapcat #(repeat n %) col))", "user": "563e7a33e4b0da801c4e466d"}, {"problem": 33, "code": "#(for [l %1\n      i (range %2)]\n     l)", "user": "55c49394e4b0e31453f6499e"}, {"problem": 33, "code": "(fn [s n] (reduce (fn [res x] (concat res (repeat n x))) [] s))", "user": "563ddefee4b0bfe05bf11857"}, {"problem": 33, "code": "(fn [xs n]\n  (mapcat #(repeat n %) xs))", "user": "54dce62fe4b024c67c0cf78c"}, {"problem": 33, "code": "#(reduce concat ((fn [a b] (map (fn [c] (repeat b c)) a)) %1 %2))", "user": "5604ae27e4b0c80df0ca2663"}, {"problem": 33, "code": "(fn [s t] (reduce #(apply conj (conj (repeat t %2) %1)) [] s))", "user": "544e6b7fe4b0e39780006986"}, {"problem": 33, "code": "(fn [col i] (reduce #(concat %1 (repeat i %2)) [] col))", "user": "52d68ed2e4b09f7907dd1362"}, {"problem": 33, "code": "(fn [coll time]\n  (mapcat #(repeat time %) coll))", "user": "546b24a0e4b00cfc9eacc166"}, {"problem": 33, "code": "(fn [xs x] (mapcat #(repeat x %) xs))", "user": "563ed73ae4b08d4f616f5ecb"}, {"problem": 33, "code": "(fn replicate [repme n] \n  (if (> n 1) (apply interleave (repeat n repme)) repme))", "user": "563b5dc9e4b0bfe05bf1180f"}, {"problem": 33, "code": "(fn my-replicate\n  [s n]\n  (reduce (fn [result v]\n            (apply conj result (take n (repeat v))))\n          [] s))", "user": "563f1493e4b08d4f616f5ecf"}, {"problem": 33, "code": "(fn [s n]\n  (reduce #(apply conj % (take n (repeat %2))) [] s))", "user": "53bbae20e4b047364c044509"}, {"problem": 33, "code": "(fn [s n]\n    (mapcat #(take n (iterate identity %)) s)\n    )", "user": "52846deee4b0239c8a67adcf"}, {"problem": 33, "code": "(fn [col x] (reduce #(concat %1 (repeat x %2)) '() col))", "user": "563b6a2ae4b0bfe05bf11812"}, {"problem": 33, "code": "(fn repl\n   ([s n]\n    (repl s n [])\n     )\n   ([s n l]\n    (apply concat \n     (map (fn\n            [x]\n            (concat l (repeat n x))\n            ) s\n          )\n     ))\n     )", "user": "5632abbee4b0bfe05bf117a7"}, {"problem": 33, "code": ";(fn [coll n] (reduce concat (map #(repeat n %) coll)))\n(fn [coll n]  (mapcat #(repeat n %) coll))", "user": "562f2985e4b0ab312c17ebc5"}, {"problem": 33, "code": "(fn [ls rep] (mapcat #(repeat rep %) ls))", "user": "564127a9e4b08d4f616f5ef3"}, {"problem": 33, "code": "(fn [col n] (mapcat #(concat (repeat n %1)) col))", "user": "54cec2a9e4b018d918be98c1"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "55eb026de4b0121d4835fdb7"}, {"problem": 33, "code": "(fn [x n]\n  (if (> n 1)\n    (apply interleave \n         (loop [iter n\n                args []]\n           (if (= iter 0)\n             args\n             (recur (- iter 1) (conj args x)))))\n    x\n    ))", "user": "5642b939e4b08d4f616f5f1b"}, {"problem": 33, "code": "(fn [a b] (apply concat (for [x a] (repeat b x))))", "user": "52a3c66ce4b04e0c58e87c04"}, {"problem": 33, "code": "#_(fn replicater' [coll x]\n  (reduce (fn [a c] (concat a (repeat x c))) [] coll))\n\n(fn rep-seq [xs n]\n  (if (> n 1)\n    (apply interleave (repeat n xs))\n    xs))", "user": "563fc1f2e4b08d4f616f5ed7"}, {"problem": 33, "code": "(fn [xs n]\n  (mapcat (partial repeat n) xs))", "user": "5641296de4b08d4f616f5ef4"}, {"problem": 33, "code": "(fn [seq, n] (mapcat #(repeat n %) seq))", "user": "56215c8ee4b03f08ee9a921a"}, {"problem": 33, "code": "#(mapcat (partial replicate %2) %1)", "user": "563d4600e4b0bfe05bf1184c"}, {"problem": 33, "code": "(fn [l n] (mapcat (partial repeat n) l))", "user": "505fdf63e4b08f2a82ad10b9"}, {"problem": 33, "code": "(fn [sq n]\n  (loop [sq  sq\n         acc []]\n    (if (empty? sq)\n      acc\n      (recur (rest sq) (into acc (repeat n (first sq)))))))", "user": "563772a9e4b0bfe05bf117d7"}, {"problem": 33, "code": "(fn [sequen n]\n  (->> sequen\n       (mapcat #(repeat n %))))", "user": "5422c959e4b01498b1a71ac7"}, {"problem": 33, "code": "(fn myreplicate\n  [s n]\n  (mapcat #(repeat n %) s))", "user": "54145050e4b01498b1a719ea"}, {"problem": 33, "code": "(fn [x n]\n  (reduce concat (map #(repeat n %) x)))", "user": "56451201e4b0284900eef600"}, {"problem": 33, "code": "(fn [s n] (mapcat (fn [i] (repeatedly n #(identity i))) s))", "user": "564045a8e4b08d4f616f5edd"}, {"problem": 33, "code": "(fn [coll times] (mapcat #(repeat times %) coll))", "user": "5376190de4b06839e8705e1c"}, {"problem": 33, "code": "(fn [lst t] \n  (mapcat #(repeat t %) lst))", "user": "545e7ab0e4b01be26fd7467c"}, {"problem": 33, "code": "(fn [x y] (mapcat #(take y (iterate identity %)) x))", "user": "562d869be4b0a45d2ff8301f"}, {"problem": 33, "code": "(fn multiply-sequence [s times]\n  \n\n\n  (reverse\n    (loop [result nil\n           input s]\n      (if\n        (empty? input)\n        result\n        (recur (concat ((fn repeat [e times]\n    (loop [result nil\n           t times]\n      (if (zero? t)\n        result\n        (recur (cons e result) (dec t))\n        )\n      )\n    ) (first input) times) result) (rest input))\n        )\n      )\n    )\n  )", "user": "563b9acbe4b0bfe05bf11827"}, {"problem": 33, "code": "(fn [coll n] (mapcat (partial repeat n) coll))", "user": "56466fb1e4b0284900eef613"}, {"problem": 33, "code": "#(mapcat identity (apply map vector (repeat %2 %1)))", "user": "5632e850e4b0bfe05bf117ac"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5646dff3e4b0284900eef615"}, {"problem": 33, "code": "(fn [x n] (reduce concat (map #(repeat n %) x)))", "user": "56449e4de4b0284900eef5f9"}, {"problem": 33, "code": "(fn [s times]\n  (reduce #(concat %1 (repeat times %2)) [] s))", "user": "528c381ce4b0239c8a67aeb2"}, {"problem": 33, "code": "#(for [e % i (range %2)] e)", "user": "52bacfa8e4b07a9af57922d6"}, {"problem": 33, "code": "(fn [l n] (mapcat #(repeat n %) l))", "user": "5647dc44e4b0284900eef624"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat (partial repeat n) coll))", "user": "5400407de4b0de5c4184860a"}, {"problem": 33, "code": "(fn [lst n]\n  (mapcat #(repeat n %) lst))", "user": "5649542fe4b0284900eef63f"}, {"problem": 33, "code": "#(apply concat (map (partial replicate %2 ) % ))", "user": "5643ba10e4b0018b46ad8bff"}, {"problem": 33, "code": "#(cond (= 1 %2) % (= 2 %2) (interleave % %) :else (interleave % % % %))", "user": "56441e72e4b0018b46ad8c09"}, {"problem": 33, "code": "#(->> %1\n     (map (partial repeat %2))\n     (apply concat))", "user": "56442758e4b0018b46ad8c0a"}, {"problem": 33, "code": "#(mapcat (fn [input](repeat %2 input)) %1)", "user": "54a6645be4b09f271ff37c87"}, {"problem": 33, "code": "(fn [lst n] (mapcat #(repeat n %) lst))", "user": "5489dd4de4b0e286459a11ef"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "56449c90e4b0284900eef5f8"}, {"problem": 33, "code": "#(if (= %2 1) %1 ;; this version of clojure does not have interleave with arity 1\n   (apply interleave (repeat %2 %1)))", "user": "560bb1f7e4b05f002753df20"}, {"problem": 33, "code": "(fn [s times]\n  (reduce \n   (fn [a b] \n     (concat a (loop [x (list b) t (dec times)] (if (zero? t) x (recur (conj x (first x)) (dec t))))))\n   '() s))", "user": "563d12f9e4b0bfe05bf11845"}, {"problem": 33, "code": "(fn f [s n]\n  (let [f*\n        (fn [acc s*]\n          (concat acc (repeat n s*)))]\n    (reduce f* [] s)))", "user": "563c0d4ce4b0bfe05bf11831"}, {"problem": 33, "code": "(fn [fun1 coll]\n  (mapcat #(repeat coll %1) fun1))", "user": "5634995fe4b0bfe05bf117be"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "551e2cade4b030e6a24d00e4"}, {"problem": 33, "code": "(fn [s n] \n  (mapcat #(repeat n %) s)  \n)", "user": "564633a1e4b0284900eef60f"}, {"problem": 33, "code": "(fn [coll rep] (reverse\n              \t(reduce (fn [acc x]\n                        (loop [a acc n rep]\n                          (if (<= n 0)\n                            a\n                          \t(recur (conj a x) (dec n)))))\n                      '()\n                      coll)))", "user": "5622af0fe4b03f08ee9a922b"}, {"problem": 33, "code": "#(mapcat (fn dupper[val] (repeat %2 val)) %1)", "user": "564b1ff8e4b0284900eef663"}, {"problem": 33, "code": "#(reverse\n  (reduce\n   (fn[output input]\n     (concat (take %2 (repeat input)) output))\n   '() %1))", "user": "51671557e4b013fc800656c4"}, {"problem": 33, "code": "(fn replicate-list [the-seq n]\n  (reverse (reduce #(reduce conj %1 (repeat n %2)) '() the-seq)))", "user": "5645a7d6e4b0284900eef608"}, {"problem": 33, "code": "(fn [S n]\n   (reduce (fn [lst x] (concat lst (for [y (range n)] x))) () S)\n)", "user": "5649615be4b0284900eef641"}, {"problem": 33, "code": "(fn [xs n]\n   (apply concat \n    (for [x xs]\n       (repeat n x)   \n    )\n  )\n)", "user": "52824143e4b0757a1b171453"}, {"problem": 33, "code": "(fn [x y] (loop [r x result '()] (if (empty? r) result (recur  (rest r) (concat result (repeat y (first r)))))))", "user": "56427910e4b08d4f616f5f19"}, {"problem": 33, "code": "(fn [ls n] \n  (mapcat #(repeat n %) ls)\n  )", "user": "541ef7e2e4b01498b1a71a92"}, {"problem": 33, "code": "(fn rep_seq \n    ([s n]\n        (rep_seq (rest s) n [] n (first s)))\n    ([s n acc idex item]\n        (if (<= idex 0)\n            (if (empty? s)\n                acc\n                (rep_seq (rest s) n acc n (first s)))\n            (rep_seq s n (concat acc (list item)) (- idex 1) item))))", "user": "56058d64e4b08b23635d3169"}, {"problem": 33, "code": "#(apply concat (map (partial repeat %2) %1))", "user": "4df9d3b0535d04ed9115e77b"}, {"problem": 33, "code": "#(reduce (fn [x y]\n           (into x (repeat %2 y)))\n         []\n         %1)", "user": "563c48e7e4b0bfe05bf11832"}, {"problem": 33, "code": "(fn [col n] (mapcat #(repeat n %) col  ))", "user": "564a560ae4b0284900eef654"}, {"problem": 33, "code": "(fn r [s t] (if (= t 1) s (apply interleave (map (fn [x] s) (range t)))))", "user": "561223e5e4b05f002753df8b"}, {"problem": 33, "code": "(fn [x n] (mapcat #(repeat n %) x))", "user": "4db85282535d1e037afb218a"}, {"problem": 33, "code": "(fn [coll x] (mapcat #(repeat x %) coll))", "user": "564d3169e4b0284900eef67c"}, {"problem": 33, "code": "(fn xdupn [x, n]                                                              \n  (loop [ elms (seq x) acc '() ]                                                \n    (if (= 0 (count elms))                                                      \n      ;; then                                                                   \n      acc                                                                       \n      ;; else                                                                   \n      (recur (rest elms)                                                        \n             (concat acc (repeat n (first elms))                                \n        )))))", "user": "564cc055e4b0284900eef676"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "56313ff1e4b0bfe05bf1178f"}, {"problem": 33, "code": "(fn [s n] (apply mapcat #(vec %&) (repeat n s)))", "user": "564b3730e4b0284900eef665"}, {"problem": 33, "code": "(fn\n  [s n]\n\t(if (= n 1)\n      \ts\n    \t(apply interleave (repeat n s))))", "user": "5576fee3e4b05c286339e078"}, {"problem": 33, "code": "(fn [input num]\n  (loop [in input out []]\n    (if (empty? in)\n      (seq out)\n      (recur (rest in) (apply conj out (repeat num (first in)))))))", "user": "564a5a09e4b0284900eef656"}, {"problem": 33, "code": "(fn [c n] (mapcat #(take n (repeat %)) c))", "user": "563b1553e4b0bfe05bf1180a"}, {"problem": 33, "code": "(fn [col n] \n  (apply concat (map \n   #(take n (repeat %))\n     col)))", "user": "56504dc2e4b0284900eef6bc"}, {"problem": 33, "code": "(fn rp [coll n]\n  (reduce (fn [acc cur] (apply conj acc (repeat n cur))) [] coll))", "user": "564ecc9ee4b0284900eef6a1"}, {"problem": 33, "code": "#(apply concat (for [x %] (repeat %2 x)))", "user": "5643a11ee4b0018b46ad8bfb"}, {"problem": 33, "code": "(fn dup-n [in n]\n\t(loop [[x1 & xrest :as X] in, out []]\n\t\t(if (seq X) \n\t\t\t(recur xrest (concat out (for [i (range n)] x1))) \n\t\t\tout)))", "user": "564d02cde4b0284900eef679"}, {"problem": 33, "code": "(fn [sq n]\n  (case n\n    1 sq\n    (apply interleave (repeat n sq))))", "user": "55380eeae4b09218d5f44fd9"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "56441634e4b0018b46ad8c08"}, {"problem": 33, "code": "(fn [x y]\n  (apply concat (map #(repeat y %) x)))", "user": "4f037faf535dcb61093f6af8"}, {"problem": 33, "code": "#(if (= %2 1)\n   %1\n   (apply interleave (repeat %2 %1)))", "user": "5650b8a0e4b0284900eef6c3"}, {"problem": 33, "code": "(fn [col n]\n  (mapcat #(repeat n %) col))", "user": "549674cde4b0b312c081ff66"}, {"problem": 33, "code": "(fn [coll times] (reduce (fn [acc el] (concat acc (repeat times el))) [] coll))", "user": "564faadce4b0284900eef6b2"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "user": "56488119e4b0284900eef632"}, {"problem": 33, "code": "(fn [l n] (mapcat #(repeat n %) l))", "user": "56521a26e4b0f9d632dd845f"}, {"problem": 33, "code": "(fn [coll, n] (mapcat #(repeat n %) coll))", "user": "563dfc02e4b0da801c4e4662"}, {"problem": 33, "code": "(fn [l n] (mapcat #(repeat n %) l))", "user": "55c3c1b0e4b0e31453f6498c"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "564b495de4b0284900eef667"}, {"problem": 33, "code": "(fn rep [x n]\n  (reduce #(concat %1 (repeat n %2)) '() x))", "user": "564066dee4b08d4f616f5ee2"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "55cd95b4e4b0e31453f64a1e"}, {"problem": 33, "code": "(fn [xs cnt]\n  (reduce #(loop [acc %1 x %2 n cnt] (if(<= n 0) acc (recur (conj acc x) x (dec n)))) [] xs))", "user": "54dce6dbe4b024c67c0cf78d"}, {"problem": 33, "code": "(fn out [seq, number]\n  (let [filler (fn this [seq acc]\n                 (cond\n                   (= (count seq) 0) acc\n                   :else (this (rest seq) (apply conj acc (repeat number (first seq))))\n                   ))]\n    (filler seq []))\n  )", "user": "56530a1ce4b0f9d632dd846c"}, {"problem": 33, "code": "(fn duplicate-seq [xs n]\n   (reduce\n   #(concat %1 (repeat n %2))\n   '()\n   xs))", "user": "5624f5a6e4b00a550fc90288"}, {"problem": 33, "code": "(fn [s n] (reduce #(into % (repeat n %2)) [] s))", "user": "5654d0e1e4b0f9d632dd848c"}, {"problem": 33, "code": "(fn dup [a b]\n        (if (empty? a)\n          '()\n          (let [r (atom (dup (rest a) b))]\n            (dotimes [n b] (swap! r #(conj % (first a))))\n            @r\n            )))", "user": "5654cb2de4b0f9d632dd848b"}, {"problem": 33, "code": "(fn [lst n]\n  (mapcat #(repeat n %) lst))", "user": "56561119e4b0f9d632dd849d"}, {"problem": 33, "code": "(fn [xs times] (reduce (fn [acc x] (concat acc (repeat times x))) [] xs))", "user": "535fa486e4b04ce2eb3ed2e0"}, {"problem": 33, "code": "(fn [l n]\n  (reduce #(concat (repeat n %2) %1) [] (reverse l)))", "user": "4ff3113ae4b0678c553fc345"}, {"problem": 33, "code": "(fn [coll n]\n  (if (= n 1)\n    coll\n    (apply interleave (repeat n coll))))", "user": "5632d1b3e4b0bfe05bf117a9"}, {"problem": 33, "code": "(fn [c n] (apply concat \n (map #(repeat n %1) c)\n ))", "user": "561e8b11e4b064ca9f4b16c0"}, {"problem": 33, "code": "(fn [s r]\n  (mapcat #(repeat r %) s))", "user": "56040e58e4b0c80df0ca2654"}, {"problem": 33, "code": "(fn duplicate \n  [list amount]\n  (mapcat #(repeat amount %) list))", "user": "560d7863e4b05f002753df40"}, {"problem": 33, "code": "(fn [lst n] (apply concat (map #(repeat n %) lst)))", "user": "56367c51e4b0bfe05bf117cd"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "54588070e4b01be26fd74620"}, {"problem": 33, "code": "(fn f [s n]\n  (let [temp1\n        (fn [temp3 temp2]\n          (concat temp3 (repeat n temp2)))]\n    (reduce temp1 [] s)))", "user": "5657e495e4b0f9d632dd84ac"}, {"problem": 33, "code": "#(cond (= %2 1) %1 :else (apply interleave (repeat %2 %1)))", "user": "56540485e4b0f9d632dd847a"}, {"problem": 33, "code": "(fn rep\n  ([coll num]\n   (rep coll num num))\n  ([coll num c]\n   (if (nil? coll)\n     nil\n     (if (zero? c)\n       (rep (next coll) num)\n       (conj (rep coll num (dec c)) (first coll))))))", "user": "56557d2de4b0f9d632dd8498"}, {"problem": 33, "code": "(fn replicate [s n] (mapcat #(repeat n %) s))", "user": "5654e024e4b0f9d632dd848d"}, {"problem": 33, "code": "(fn [coll ct] (apply concat (map (fn [n] (repeat ct n)) coll)))", "user": "5658acabe4b0f9d632dd84b7"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "56444fb1e4b0018b46ad8c0c"}, {"problem": 33, "code": "(fn repl [s n]\n  (letfn \n    [(inner [s m]\n            (if (seq s)\n              (if (zero? m)\n                (lazy-seq (inner (rest s) n))\n                (lazy-seq (cons (first s) (inner s (- m 1)))))\n              '()))]\n    (inner s n)))", "user": "54ca93abe4b057c6fda3a264"}, {"problem": 33, "code": "(fn [coll n] (seq (reduce #(apply (partial conj %1) (repeat n %2)) [] coll)))", "user": "564c8e99e4b0284900eef674"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "565a3e25e4b068f2fe63dbfb"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "55577fcce4b0deb715856e24"}, {"problem": 33, "code": "(fn [els n]\n   (reverse (reduce (fn [res item]\n             (apply conj res (repeat n item)))\n           '() els)))", "user": "5658b9bde4b00d315579610e"}, {"problem": 33, "code": "(fn [coll n-times](mapcat #(repeat n-times %) coll))", "user": "560331dee4b04bb52996e1b5"}, {"problem": 33, "code": "; #(apply concat (map (fn [input](repeat %2 input)) %1))\n#(mapcat (fn [input](repeat %2 input)) %1)", "user": "52c48ec6e4b0c2d177d620dd"}, {"problem": 33, "code": "#(reduce (fn [o i] (into o (repeat %2 i))) [] %1)", "user": "5651de3ee4b0f9d632dd845b"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "56532ff4e4b0f9d632dd846e"}, {"problem": 33, "code": "(fn dupn [inlist n]\n  (if (empty? inlist)\n    (list)\n    (let [curelem (first inlist)]\n      ((fn consn [elem coll times]\n        (loop\n          [res coll\n           x 0]\n          (if (= x times)\n            res\n            (recur (cons elem res) (inc x)))))\n      curelem (dupn (rest inlist) n) n))))", "user": "5658d775e4b00d3155796114"}, {"problem": 33, "code": "#( if(= %2 1) %1 ( apply interleave (repeat %2 %1) ) )", "user": "56188848e4b053970a773aea"}, {"problem": 33, "code": "(fn [coll n]\n  (apply concat (map #(take n (repeat %)) coll)))", "user": "564da567e4b0284900eef682"}, {"problem": 33, "code": "(fn [c t]( mapcat #(repeat t %) c))", "user": "564348e1e4b08d4f616f5f26"}, {"problem": 33, "code": "(fn replicate [x n]\n  (loop [l '() i (dec (count x))]\n    (if (< i 0)\n      l\n      (recur (loop [t l k 0]\n               (if (< k n)\n                 (recur (cons (nth x i) t) (inc k))\n                 t)) (dec i)))))", "user": "56588f4ee4b0f9d632dd84b6"}, {"problem": 33, "code": "#(apply concat (map (partial repeat %2) %))", "user": "565e0934e4b068f2fe63dc30"}, {"problem": 33, "code": "(fn [arg1 arg2]\n(cond\n(and (= arg1 [1 2 3]) (= arg2 2)) (quote (1 1 2 2 3 3))\n(and (= arg1 [:a :b]) (= arg2 4)) (quote (:a :a :a :a :b :b :b :b))\n(and (= arg1 [4 5 6]) (= arg2 1)) (quote (4 5 6))\n(and (= arg1 [[1 2] [3 4]]) (= arg2 2)) (quote ([1 2] [1 2] [3 4] [3 4]))\n(and (= arg1 [44 33]) (= arg2 2)) [44 44 33 33]\n))", "user": "565f2461e4b068f2fe63dc3b"}, {"problem": 33, "code": "(fn [xs n]\n  (mapcat #(repeat n %) xs))", "user": "563f24f9e4b08d4f616f5ed0"}, {"problem": 33, "code": "(fn [xs n] (reduce #(concat %1 (take n (repeat %2))) [] xs))", "user": "565b818ce4b068f2fe63dc05"}, {"problem": 33, "code": "(fn [coll number]\n  (mapcat #(repeat number %) coll)\n  )", "user": "56349008e4b0bfe05bf117bd"}, {"problem": 33, "code": "(fn [coll repeat-times]\n  (loop [c coll result []]\n    (if (empty? c) (reverse (into '() result))\n      (recur (rest c) (into result (take repeat-times (repeat (first c)\n )))))))", "user": "562c2fc2e4b058fa18c5a6d7"}, {"problem": 33, "code": "(fn replicate-seq [coll n]\n  (mapcat #(repeat n %) coll))", "user": "555994fbe4b0deb715856e39"}, {"problem": 33, "code": "#(loop [s %1 n %2 r []]\n   (if-let [x (first s)]\n     (recur (next s) n (concat r (take n (repeat x))))\n     r\n     )\n   )", "user": "565f9aece4b068f2fe63dc42"}, {"problem": 33, "code": "(fn [a b] (mapcat #(repeat b %) a))", "user": "565faf46e4b068f2fe63dc44"}, {"problem": 33, "code": "(fn [x y] (apply concat (map #(repeat y %1) x)))", "user": "5650ac8be4b0284900eef6c2"}, {"problem": 33, "code": "(fn [a b] (reduce concat (map #(repeat b %) a)))", "user": "5657fc1ae4b0f9d632dd84ad"}, {"problem": 33, "code": "(fn [coll duplicate-count] \n (apply concat\n \t(map \n  \t\t(comp #(take duplicate-count %1) \n          \t  cycle) \n  \t\t(partition 1 1 coll))))", "user": "4fc77f5ae4b0ee37620e1821"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %)", "user": "530e9bd6e4b08068f379ecbe"}, {"problem": 33, "code": "(fn mr\n  [sq no]\n  (mapcat (fn \n            [i] \n            (repeat no i)\n          ) sq)\n)", "user": "56019662e4b04bb52996e190"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce into \n   (reverse\n     (map #(take n (repeat %)) coll))))", "user": "565b941ce4b068f2fe63dc07"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce concat\n    (for [v coll]\n      (repeat n v))))", "user": "5169d422e4b051e2a73aba53"}, {"problem": 33, "code": "(fn replicate-sequence [xs n]\n  (letfn [(combine-repeat [xs x]\n             (concat (repeat n x) xs))]\n    (reverse (reduce combine-repeat '() xs))))", "user": "5661e09ae4b068f2fe63dc70"}, {"problem": 33, "code": "(fn [col n] (apply concat (map #(repeat n %) col)))", "user": "5656e039e4b0f9d632dd84a3"}, {"problem": 33, "code": "(fn [xs n]\n  (apply concat (map #(repeat n %) xs)))", "user": "56602649e4b068f2fe63dc47"}, {"problem": 33, "code": "(fn [coll n] (reduce #(concat %1 (repeat n %2)) [] coll))", "user": "5659679ae4b068f2fe63dbeb"}, {"problem": 33, "code": "#(apply concat (map (fn [x] (repeat %2 x)) %1))", "user": "55344b75e4b09218d5f44f99"}, {"problem": 33, "code": "(fn [arg1 arg2]\n(cond\n(and (= arg1 [1 2 3]) (= arg2 2)) (quote (1 1 2 2 3 3))\n(and (= arg1 [:a :b]) (= arg2 4)) (quote (:a :a :a :a :b :b :b :b))\n(and (= arg1 [4 5 6]) (= arg2 1)) (quote (4 5 6))\n(and (= arg1 [[1 2] [3 4]]) (= arg2 2)) (quote ([1 2] [1 2] [3 4] [3 4]))\n(and (= arg1 [44 33]) (= arg2 2)) [44 44 33 33]\n))", "user": "5666bf34e4b04acd4f672dc2"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "5666500ee4b0e91d5f5c566d"}, {"problem": 33, "code": "(fn [seq n] (apply  concat (map #(repeat n %) seq)))", "user": "566713e0e4b04acd4f672dc7"}, {"problem": 33, "code": "(fn [coll rep]\n  (reduce #(concat % (repeat rep %2)) [] coll))", "user": "56677192e4b04acd4f672dd5"}, {"problem": 33, "code": "(fn [s n] (mapcat (fn [i] (repeatedly n #(identity i))) s))", "user": "56503c4ee4b0284900eef6bb"}, {"problem": 33, "code": "(fn [col n]\n  (mapcat (fn [x]\n            (repeat n x))\n          col))", "user": "564bbb15e4b0284900eef66d"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "566733d6e4b04acd4f672dcb"}, {"problem": 33, "code": "(fn [coll times]\n  (mapcat #(repeat times %) coll)\n )", "user": "56004deee4b04bb52996e164"}, {"problem": 33, "code": "(fn replica [x n]\n  (loop [x x\n         res []]\n    (if (empty? x)\n      res\n      (recur (rest x) (vec (concat res (repeat n (first x))))))))", "user": "5666c2dbe4b04acd4f672dc3"}, {"problem": 33, "code": "(fn [lat n]\n  (reduce concat (map #(take n (repeat %)) lat)))", "user": "566888e4e4b04acd4f672ded"}, {"problem": 33, "code": "(fn [a_seq n] (apply concat (map #(repeat n %) a_seq)))", "user": "556189a6e4b0c656e3ff17c9"}, {"problem": 33, "code": "#(mapcat (fn [x] (take %2 (repeat x))) %1)", "user": "56671a4de4b04acd4f672dca"}, {"problem": 33, "code": "(fn [xs x] (mapcat #(repeat x %) xs))", "user": "5668dcc6e4b04acd4f672df8"}, {"problem": 33, "code": "(fn [x y]\n  (mapcat #(repeat y %) x))", "user": "54a11042e4b09f271ff37c49"}, {"problem": 33, "code": "(fn [in factor]\n  (mapcat identity (reduce #(conj %1 (take factor (repeat %2))) [] in)))", "user": "5600591de4b04bb52996e166"}, {"problem": 33, "code": "(fn [xs n] (reduce (fn [i d](concat i (repeat n d)   )) () xs))", "user": "56686edce4b04acd4f672dea"}, {"problem": 33, "code": "(fn [x y](mapcat #(repeat y %) x ))", "user": "566a3a26e4b0a866af689699"}, {"problem": 33, "code": "#(if (= 1 %2) %1 (apply interleave (repeat %2 %1)))", "user": "566734c4e4b04acd4f672dcc"}, {"problem": 33, "code": "(fn [a b] (into (empty a) (mapcat #(for [x (range b)] %) a)))", "user": "565a280be4b068f2fe63dbf7"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "user": "566a6e38e4b0a866af68969b"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "566b7a77e4b0a866af6896af"}, {"problem": 33, "code": "#(if (> %2 1)\n(apply interleave (repeat %2 %1))\n   %1)", "user": "5393185ae4b0b51d73faaeb7"}, {"problem": 33, "code": "(fn [x n] (mapcat #(repeat n %1) x))", "user": "5006c169e4b0678c553fc48d"}, {"problem": 33, "code": "(fn [col, n] \n  (sort-by #(.indexOf col %) (apply concat (repeat n col))))", "user": "55f68468e4b06e875b46ce94"}, {"problem": 33, "code": "(fn [x y]\n        (loop [a x z '()]\n        (if (seq a)\n                (recur (rest a) (concat z (repeat y (first a))))\n                z\n        ))\n)", "user": "5661b0a9e4b068f2fe63dc6f"}, {"problem": 33, "code": "(fn [in cnt] (reduce #(concat % (repeat cnt %2)) [] in))", "user": "559ff9eee4b0acc240e314ee"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5649d538e4b0284900eef647"}, {"problem": 33, "code": "(fn repeat-n-times [coll n]\n  (mapcat #(repeat n %) coll))", "user": "563afd5ae4b0bfe05bf11809"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(concat (repeat n %)) coll))", "user": "566fa059e4b0a866af6896ea"}, {"problem": 33, "code": "(fn f [[x & xs] n]\n   (if (nil? xs)\n     (take n (repeat x))\n     (into (f xs n) (take n (repeat x)))))", "user": "56483562e4b0284900eef629"}, {"problem": 33, "code": ";#(loop [given-sequence %1\n;        result []]\n;  (if (nil? given-sequence)\n;    result\n;    (recur (next given-sequence) (concat result (take %2 (repeat (first given-sequence)))))\n;    )\n;  )\n#(mapcat (partial repeat %2) %1)", "user": "566639f4e4b0e91d5f5c566b"}, {"problem": 33, "code": "(fn\n  [data n]\n  (mapcat #(repeat n %) data))", "user": "5640eb50e4b08d4f616f5eec"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "5516a874e4b06a49daca83b5"}, {"problem": 33, "code": "(fn [coll n] (apply concat (map #(repeat n %) coll)))", "user": "51441ce7e4b0b4fb4ace5f41"}, {"problem": 33, "code": "(fn replicate-seq [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5668aad0e4b04acd4f672df5"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5654c550e4b0f9d632dd848a"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5674477ce4b05957ce8c6134"}, {"problem": 33, "code": "(fn [s n]\n  (if (= n 1)\n    s\n    (apply interleave (repeat n s))))", "user": "56669819e4b0e91d5f5c5674"}, {"problem": 33, "code": "(fn mults [lst times] (reduce concat (map (partial repeat times) lst)))", "user": "564716e6e4b0284900eef616"}, {"problem": 33, "code": "#(apply mapcat list (repeat %2 %1))", "user": "56754c4be4b05957ce8c6149"}, {"problem": 33, "code": "(fn [coll times] (mapcat #(repeat times %) coll))", "user": "55efb51ee4b066087aa9453b"}, {"problem": 33, "code": "(fn [coll n] \n  (mapcat #(repeat n %) coll))", "user": "567476bde4b05957ce8c6139"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5652dd89e4b0f9d632dd8469"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "56732c84e4b05957ce8c611c"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5674f874e4b05957ce8c6144"}, {"problem": 33, "code": "(fn [xs n]\n  (mapcat #(repeat n %) xs))", "user": "56706f01e4b0a866af6896f2"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "54ce541de4b057c6fda3a2ac"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5676af21e4b05957ce8c6158"}, {"problem": 33, "code": "#(apply mapcat list (repeat %2 %1))", "user": "56761ab1e4b05957ce8c6154"}, {"problem": 33, "code": "(fn [coll n]\n  (let [f (fn [orig result]\n            (if (empty? orig)\n                result\n                (recur (rest orig) (apply conj result (take n (repeat (first orig)))))))]\n    (f coll [])))", "user": "567695c2e4b05957ce8c6157"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce (fn [res x]\n            (concat res (repeat n x)))\n          '() coll))", "user": "5675cdf1e4b05957ce8c614d"}, {"problem": 33, "code": "(fn [coll n] (mapcat (fn [x] (take n (repeat x))) coll))", "user": "567874f3e4b05957ce8c617c"}, {"problem": 33, "code": "(fn [l n] (mapcat #(take n (repeat %)) l))", "user": "5547b72be4b0a04f79299550"}, {"problem": 33, "code": "(fn [vectorToRepeat numberOfTimesToRepeat] (mapcat #(repeat numberOfTimesToRepeat %) vectorToRepeat))", "user": "56781ab6e4b05957ce8c6171"}, {"problem": 33, "code": "(fn [input multiplier]\n    (mapcat (fn [x](take multiplier (repeat x))) input ))", "user": "54ef7568e4b024c67c0cf885"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "567b2f20e4b05957ce8c61a2"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "567798afe4b05957ce8c6169"}, {"problem": 33, "code": "#(mapcat (fn [input](repeat %2 input)) %1)", "user": "5427b477e4b01498b1a71b27"}, {"problem": 33, "code": "(fn repl [[x & xs] n] (if x (apply conj (repl xs n) (repeat n x))))", "user": "567b39b6e4b05957ce8c61a3"}, {"problem": 33, "code": "(fn duplicate-ntimes [s n]\n    (reduce concat (map (fn [x] (take n (repeat x))) s)))", "user": "567b62fce4b05957ce8c61a6"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce #(apply (partial conj %1) (repeat n %2)) [] coll))", "user": "567c2322e4b05957ce8c61af"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat #(take n %) (map cycle (map list s))))", "user": "5638b88de4b0bfe05bf117e9"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "567cef8ce4b05957ce8c61c1"}, {"problem": 33, "code": "(fn [xs n] (reduce concat (map #(repeat n %) xs)))", "user": "567d132ee4b05957ce8c61c3"}, {"problem": 33, "code": "(fn [col n] (mapcat (partial repeat n) col))", "user": "5455a6d3e4b0e397800069e2"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce\n    #(apply conj %1 (repeat n %2))\n    []\n    coll))", "user": "567b4641e4b05957ce8c61a5"}, {"problem": 33, "code": "(fn [xs n] (mapcat (partial repeat n) xs))", "user": "56771b31e4b05957ce8c6163"}, {"problem": 33, "code": "(fn [s n] \n  (apply concat\n   (map #(repeat n %) s)\n )\n)", "user": "567debb5e4b05957ce8c61ce"}, {"problem": 33, "code": "(fn my-duplicater\n   [coll n]\n   (mapcat #(repeat n %) coll))", "user": "567c7fefe4b05957ce8c61bc"}, {"problem": 33, "code": "(fn [s n] (mapcat (fn [x] (repeat n x)) s))", "user": "562add6de4b00e49c7cb4834"}, {"problem": 33, "code": "(fn replicate-seq [coll n]\n  (mapcat #(repeat n %) coll))", "user": "56798c1be4b05957ce8c618a"}, {"problem": 33, "code": "(fn [coll n]\n  (apply concat (map (fn [x] (repeat n x)) coll)))", "user": "52cf1e25e4b07d0d72b2739c"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "56781f16e4b05957ce8c6173"}, {"problem": 33, "code": "(fn [coll n]\n  (if (= n 1)\n    coll\n     (->>\n   (repeat n coll)\n   (apply interleave)))\n )", "user": "567ea403e4b0feffd0d18eb5"}, {"problem": 33, "code": "(fn [col n] (reduce #(concat %1 (repeat n %2)) [] col))", "user": "56795deae4b05957ce8c6187"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "50784ae5e4b0fc74642bff68"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "53864493e4b06839e8705f10"}, {"problem": 33, "code": "(fn \n  [coll n]\n  (mapcat #(repeat n %) coll))", "user": "566f7749e4b0a866af6896e9"}, {"problem": 33, "code": "#(apply concat (for [x %1] (take %2 (repeat x))))", "user": "54d03a17e4b018d918be98e0"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "5195fadee4b04c0af7ff3c11"}, {"problem": 33, "code": "(fn [s n] (loop [s s\n                 n n\n               result []]\n          (if (empty? s)\n            result\n            (let [addme (repeat n (first s))]\n              \t(recur (rest s) n (concat result addme))))))", "user": "567d18c9e4b05957ce8c61c4"}, {"problem": 33, "code": "#(apply mapcat list (repeat %2 %1))", "user": "565fe49ee4b068f2fe63dc46"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5680104ae4b0966858e4d8ea"}, {"problem": 33, "code": "(fn [lst n] (mapcat #(repeat n %) lst))", "user": "553900d4e4b09218d5f44fe5"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce \n   (fn [result item]\n     (loop [times n\n            final-result result]\n       (if (zero? times)\n         final-result\n         (recur (- times 1)\n                (conj final-result item)))))\n   []\n   coll))", "user": "56822f37e4b0945ebc182a8d"}, {"problem": 33, "code": "(fn rptn [c n]\n  (let [r #(for [x (range %1)] %2)]\n    (reduce concat (map #(r n %) c))))", "user": "56800ba1e4b0966858e4d8e8"}, {"problem": 33, "code": "(fn [x,y] (mapcat #(take y (repeat %)) x))", "user": "56798d83e4b05957ce8c618b"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "55cbd29be4b0e31453f64a0a"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "568227fee4b0945ebc182a8a"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "56810479e4b0966858e4d8f8"}, {"problem": 33, "code": "(fn [a b] (mapcat #(repeat b %) a) )", "user": "56814cbce4b0945ebc182a81"}, {"problem": 33, "code": "(fn [coll times] (mapcat #(repeat times %) coll))", "user": "56826ebce4b0945ebc182a93"}, {"problem": 33, "code": "(fn [list replicate] \n  (mapcat (fn [val] (take replicate (repeat val))) list))", "user": "4f4fc570e4b03ad3f0c10cea"}, {"problem": 33, "code": "(fn [s n]\n  (apply concat (map #(repeat n %) s)))", "user": "5681afaae4b0945ebc182a87"}, {"problem": 33, "code": "(fn [col n]\n  (mapcat (fn [val]\n            (repeat n val)) \n          col))", "user": "567abc97e4b05957ce8c619d"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5685e9fde4b04eec3ec5cfd1"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "566efb2be4b0a866af6896e2"}, {"problem": 33, "code": "(fn repl [data cnt]\n  (mapcat\n    (fn [val] (map (fn [n] val) (range cnt) )) data\t\n  )\n)", "user": "568513c4e4b04eec3ec5cfc5"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "56747b46e4b05957ce8c613b"}, {"problem": 33, "code": "(fn [lst n]\n  (mapcat #(take n (iterate identity %)) lst))", "user": "566812f0e4b04acd4f672de1"}, {"problem": 33, "code": "(fn [seq' n]\n  (let [repeat-times (fn [element times]\n                       (loop [times' times\n                              acc []]\n                         (if (zero? times')\n                           acc\n                           (recur (dec times') (conj acc element)))))]\n    (reduce #(concat %1 (repeat-times %2 n)) [] seq')))", "user": "567bf820e4b05957ce8c61ad"}, {"problem": 33, "code": "(fn [s n]\n    (apply concat (map #(repeat n %) s)))", "user": "5686640ae4b0dcc4269f4050"}, {"problem": 33, "code": "(fn [s n] (reduce #(loop [memo %1\n                          ctr n]\n                     (if (zero? ctr)\n                       memo\n                       (recur (conj memo %2) (dec ctr)))) [] s))", "user": "565233f2e4b0f9d632dd8461"}, {"problem": 33, "code": "(fn [a b]\n  (if (= b 1)\n    a\n    (apply interleave (repeat b a))))", "user": "5683d2a9e4b0945ebc182aa0"}, {"problem": 33, "code": "(fn [s n] (reduce #(into % (repeat n %2)) [] s))", "user": "508f4343e4b0ea685a20f767"}, {"problem": 33, "code": "(fn [xs n] (apply concat (map #(take n (repeat %)) xs)))", "user": "5686e652e4b0dcc4269f4059"}, {"problem": 33, "code": "(fn [xs n] (apply concat (for [x xs] (repeat n x))))", "user": "5275f7a2e4b03e8d9a4a74d0"}, {"problem": 33, "code": "(fn duplicate-n [x n]\n  (apply concat (for [a x]\n                  (for [c (range 0 n)] a))))", "user": "5688a01be4b0dcc4269f406d"}, {"problem": 33, "code": "(fn replicateC [x n] (apply concat (map #(replicate n %) x)))", "user": "568820e8e4b0dcc4269f4067"}, {"problem": 33, "code": "(fn [coll, rep] (mapcat #(repeat rep %) coll))", "user": "5680fff3e4b0966858e4d8f6"}, {"problem": 33, "code": "(fn [lst n] (apply (partial mapcat list) (repeat n lst)))", "user": "56897739e4b0dcc4269f407d"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "567f988be4b0feffd0d18ebe"}, {"problem": 33, "code": "(fn replicate [lat n]\n  (reduce concat (map #(take n (repeat %)) lat)))", "user": "56874171e4b0dcc4269f405c"}, {"problem": 33, "code": "(fn [col n]\n  (reduce (fn [acc e] (reduce #(conj %1 %2) acc (repeat n e)))\n          []\n          col))", "user": "55597fcce4b0deb715856e37"}, {"problem": 33, "code": "(fn [coll rep] (loop [coll coll output []]\n                 (if (empty? coll) output\n                   (recur (rest coll) (concat output (repeat rep (first coll))))\n                   )\n                 )\n  )", "user": "56885c32e4b0dcc4269f4068"}, {"problem": 33, "code": "(fn [s n]\n  (reduce #(concat %1 (repeat n %2)) '() s))", "user": "5689fd03e4b0dcc4269f4088"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "568a743ee4b0dcc4269f408e"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "55ee7977e4b0121d4835fdee"}, {"problem": 33, "code": "#(if (= 1 %2) %1 (apply interleave (take %2 (repeat %1))))", "user": "568242bfe4b0945ebc182a8f"}, {"problem": 33, "code": ";;(fn [seq,n] (apply interleave (repeat n seq)))\n\n(fn [seq,n] (if (= n 1) seq (apply interleave (repeat n seq))))", "user": "533a2f7be4b0e30313ee6cb8"}, {"problem": 33, "code": "#(if (> %2 1)\n   (apply interleave (repeat %2 %1))\n   %1)", "user": "55915fe9e4b0604b3f94d579"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "55664bb5e4b0c656e3ff1833"}, {"problem": 33, "code": "(fn [x y] (loop [data x rpt y result ()]\n\t\t\t(if-not (first data)\n              (reverse result)\n              (recur (rest data) rpt (concat (repeat rpt (first data)) result)))))", "user": "567f034be4b0feffd0d18eba"}, {"problem": 33, "code": "(fn \n  [items rep] \n  (mapcat #(repeat rep %) items))", "user": "568a13eae4b0dcc4269f4089"}, {"problem": 33, "code": "(fn [coll n]\n   (mapcat #(repeat n %) coll)\n )", "user": "5687fe58e4b0dcc4269f4065"}, {"problem": 33, "code": "(fn repeat-sequence [my-seq times]\n  (if (> times 1)\n    (apply interleave (repeat times my-seq))\n    (seq my-seq)))", "user": "56889672e4b0dcc4269f406c"}, {"problem": 33, "code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "user": "52e5f810e4b09f7907dd1468"}, {"problem": 33, "code": "(fn [coll nmb]\n  (mapcat #(take nmb (repeat %)) coll))", "user": "53f5c402e4b0db01ade6f9d4"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "568bddaee4b0dcc4269f40aa"}, {"problem": 33, "code": "(fn [sqnc n]\n  (reverse \n   (loop [old-sqnc sqnc\n          new-sqnc nil]\n     (if (empty? old-sqnc)\n       new-sqnc\n       (let [item (first old-sqnc)]\n         (recur (rest old-sqnc)\n                (apply conj new-sqnc (repeat n item))))))))", "user": "566f3e18e4b0a866af6896e7"}, {"problem": 33, "code": "(fn [v m] (apply concat (map #(repeat m %) v)))", "user": "51be00cae4b0ff155d51d2b8"}, {"problem": 33, "code": "(fn [s n]\n  (reduce (fn [ret x]\n            (apply (partial conj ret) (repeat n x))) [] s))", "user": "55f85b93e4b03cbcff9738ae"}, {"problem": 33, "code": "#(if \n    (= 1 %2)%1\n    (apply interleave (repeat %2 %1)))", "user": "568e450fe4b0dcc4269f40d0"}, {"problem": 33, "code": "(fn [x n]\n  (reduce\n    (fn [accum a]\n       (concat accum (for [i (range n)] a)))\n     []\n     x))", "user": "568f0db0e4b0dcc4269f40dd"}, {"problem": 33, "code": "(fn [x y] (reverse (reduce #(into %1 (repeat y %2)) '() x )))", "user": "568c2d96e4b0dcc4269f40af"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "56903cb9e4b0dcc4269f40eb"}, {"problem": 33, "code": "#(reduce (fn [a b] (concat a (repeat %2 b)))\n         nil\n         %1)", "user": "568e1871e4b0dcc4269f40cc"}, {"problem": 33, "code": "(fn [l, n] (reduce (fn [a b] (concat a (repeat n b))) () l))", "user": "56912f93e4b0dcc4269f40ef"}, {"problem": 33, "code": "#(if (= %2 1)\n   %1 #_\"Special case for interleave. Fixed in Clojure 1.6\"\n   (apply interleave (repeat %2 %1)))", "user": "4ff8487be4b0678c553fc397"}, {"problem": 33, "code": "(fn [coll n] (apply concat (mapv #(vec (repeat n %)) coll)))", "user": "568d4742e4b0dcc4269f40c2"}, {"problem": 33, "code": "(fn [x t] \n     (mapcat #(repeat t %) x))", "user": "51e6a2bce4b0ab43cc26c21d"}, {"problem": 33, "code": "#(if (> %2 1)\n   (apply interleave (repeat %2 %1))\n   %1)", "user": "561a9380e4b053970a773b07"}, {"problem": 33, "code": "(fn replicate-ntimes [pcoll n]\n  (reduce concat (map #(repeat n %) pcoll)))", "user": "552bd5c2e4b0ffed3738f969"}, {"problem": 33, "code": "(fn [coll n] (loop [coll coll, acc '()] (if (empty? coll) (reverse acc) (recur (rest coll) \n\n(concat (repeat n (first coll)) acc) \n;(conj (conj acc (first coll)) (first coll)) \n\n\n                                                                             ) ; recur\n                                        ) ; if\n             ) ; loop\n  ) ; fn", "user": "4e268c6e535deb9a81d77ef4"}, {"problem": 33, "code": "#(apply concat (apply map (fn [& l] conj [] l) (repeat %2 %1)))", "user": "5686b7c7e4b0dcc4269f4057"}, {"problem": 33, "code": "(fn [s n] (reduce concat (map #(repeat n %) s)))", "user": "543b4746e4b032a45b86932c"}, {"problem": 33, "code": "(fn [arg num]\n  (apply concat (map #(repeat num %) arg)))", "user": "5691ef12e4b0dcc4269f40f8"}, {"problem": 33, "code": "#(reduce (fn [acc elm] (concat acc (repeat %2 elm))) [] %1)", "user": "5694a50fe4b0dcc4269f4121"}, {"problem": 33, "code": "(fn [a b]\n  (mapcat #(repeat b %) a))", "user": "569381a5e4b0dcc4269f4104"}, {"problem": 33, "code": "(fn [t n] (mapcat #(repeat n %) t))", "user": "5629de63e4b00e49c7cb4812"}, {"problem": 33, "code": "(fn [coll n]\n  (loop [res []\n         col coll]\n    (if (empty? col)\n      res\n      (recur (concat res (repeat n (first col))) (rest col)))))", "user": "5294a49be4b02ebb4ef7500f"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce #(concat %1 (repeat n %2)) [] coll))", "user": "56175cf9e4b06b1bb2182a0f"}, {"problem": 33, "code": "#(for [x % y (range %2)] x)", "user": "56743413e4b05957ce8c612e"}, {"problem": 33, "code": "#(apply mapcat vector (repeat %2 %1))", "user": "5657fed1e4b0f9d632dd84ae"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "55c5b55fe4b0e31453f649b5"}, {"problem": 33, "code": "(fn reps [xs n] (when-let [[y & ys] xs] (concat (replicate n y) (reps ys n))))", "user": "566669d8e4b0e91d5f5c566f"}, {"problem": 33, "code": "(fn [coll n]\n  (apply \n     concat \n       (map #(repeat n %) coll)))", "user": "5690221ce4b0dcc4269f40e9"}, {"problem": 33, "code": "(fn [xs n]\n  (mapcat (partial repeat n) xs))", "user": "56967bc0e4b0dcc4269f4131"}, {"problem": 33, "code": "(fn [x n] \n  (reduce \n    (fn [acc y] \n      (concat acc (repeat n y))) [] x))", "user": "56946d43e4b0dcc4269f411e"}, {"problem": 33, "code": "(fn [x y]  (reduce concat (map (fn [item] (repeat y item) ) x)))", "user": "56979bb7e4b0e0b3d3318cac"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "user": "5579eed7e4b05c286339e09b"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "569783bde4b0e0b3d3318cab"}, {"problem": 33, "code": "(fn [xs n]\n  (reduce\n    #(into %1 (repeat n %2))\n    []\n    xs))", "user": "51e5a627e4b0efabf93c02db"}, {"problem": 33, "code": "(fn [xs n]\n  (reverse (reduce (fn [l x] (into l (repeat n x))) () xs)))", "user": "5293a603e4b0239c8a67af42"}, {"problem": 33, "code": "(fn ! [x y] (if (not (empty? x)) (concat (repeat y (first x) ) (! (rest x) y ) ) ))", "user": "56066e82e4b08b23635d3173"}, {"problem": 33, "code": "#(reduce \n  (fn [a b] \n    (concat a (\n      map (fn [_] b) (range %2)))) [] %1)", "user": "569c40cee4b0542e1f8d1462"}, {"problem": 33, "code": "(fn replicate-a-seq [coll n]\n  (apply concat\n         (map #(repeat n %) coll)))", "user": "5693a53ee4b0dcc4269f4106"}, {"problem": 33, "code": "(fn [s t]\n  (for [y s\n         _ (range t)]\n    y))", "user": "5637557ce4b0bfe05bf117d4"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "569aca1ee4b0542e1f8d144d"}, {"problem": 33, "code": "(fn alt-replicate\n  [ls x]\n  (apply concat ( map #(repeat x %) ls )))", "user": "569ad037e4b0542e1f8d144f"}, {"problem": 33, "code": "(fn [x y]\n  (reduce concat [] (map\n   #(take y \n          (cycle [%])) x)))", "user": "56949fc5e4b0dcc4269f4120"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(concat (repeat n %)) coll))", "user": "4e6a8d28535d8ccf87e9fef5"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5591cc56e4b0604b3f94d582"}, {"problem": 33, "code": "(fn [a-seq cnt]\n  (mapcat #(repeat cnt %) a-seq))", "user": "56795625e4b05957ce8c6186"}, {"problem": 33, "code": "(fn\n      [l n]\n      (if (= l [44 33])\n        (into [] '(44 44 33 33))\n      (sort (take (* n (count l)) (cycle l)))))", "user": "5683b67ce4b0945ebc182a9f"}, {"problem": 33, "code": "(fn [x y] (reduce concat '() (map #(repeat y %) x)))", "user": "56992162e4b0542e1f8d143c"}, {"problem": 33, "code": "(fn [myseq it]\n  (loop [return_list [] index 0 iterations 0]\n    (cond\n     (and (< index (count myseq)) (< iterations it))\n     (recur (conj return_list (nth myseq index)) index (inc iterations))\n     (and (< index (count myseq)) (= iterations it))\n     (recur return_list (inc index) 0)\n     :else (seq return_list))))", "user": "53d977f1e4b0e771c302547a"}, {"problem": 33, "code": "(fn dup-seq [lat n]\n  (reduce concat (map #(take n (repeat %)) lat)))", "user": "569f8736e4b0542e1f8d1495"}, {"problem": 33, "code": "(fn [coll n] (mapcat (partial repeat n) coll))", "user": "569d2283e4b0542e1f8d1474"}, {"problem": 33, "code": "(fn [coll rep-times]\n  (mapcat (partial repeat rep-times) coll))", "user": "5630ce72e4b0bfe05bf11786"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "55263009e4b0ffed3738f916"}, {"problem": 33, "code": "(fn [col n]\n  ;(apply concat (map #(repeat n %) col))\n  (mapcat #(repeat n %) col))", "user": "569ab3e2e4b0542e1f8d144a"}, {"problem": 33, "code": "#(mapcat (partial (fn r [n a] (if (zero? n) '() (cons a (r (- n 1) a)))) %2) %1)", "user": "569c07b9e4b0542e1f8d145d"}, {"problem": 33, "code": "(fn [l n] (mapcat #(repeat n %) l))", "user": "56791447e4b05957ce8c6183"}, {"problem": 33, "code": "(fn [xs times]\n  (mapcat #(repeat times %) xs))", "user": "562d15a6e4b0a45d2ff83019"}, {"problem": 33, "code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "user": "56824e1be4b0945ebc182a91"}, {"problem": 33, "code": "#(loop [items %1 result []]\n   (if (empty? items)\n     result\n     (let [f (first items)]\n       (recur (rest items) (concat result (repeat %2 f)))\n       )\n     )\n   )", "user": "569ef93de4b0542e1f8d148b"}, {"problem": 33, "code": "#(for [col %1 i (range 0 %2) ] col)", "user": "569f33c7e4b0542e1f8d148f"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "56a1b854e4b0542e1f8d14b2"}, {"problem": 33, "code": "(fn repn [sq n]\n  (if (empty? sq) '()\n    (loop [i n\n           chain '()]\n      (if (> i 0)\n        (recur (dec i) (conj chain (first sq)))\n        (concat chain (repn (rest sq) n))))))", "user": "569f99cce4b0542e1f8d1497"}, {"problem": 33, "code": "(fn [seq multiplier]\n       (reduce (fn [acc elem] (apply conj acc (repeat multiplier elem))) [] seq))", "user": "56936547e4b0dcc4269f4101"}, {"problem": 33, "code": "#(reduce (fn [accum x] (loop [a accum\n                              i 0]\n                         (if (= i %2)\n                           a\n                           (recur (conj a, x) (inc i)))))\n         []\n         %1)", "user": "56a38a4ce4b0542e1f8d14cc"}, {"problem": 33, "code": "(fn [data n] (mapcat #(repeat n %) data))", "user": "54c779bee4b045293a27f63b"}, {"problem": 33, "code": "(fn [x n]\n    \n(reduce\n  (fn [result element] (apply concat result ( repeat n element) )  )\n  []\n  (partition 1  x )\n )\n \n  );END: fn", "user": "56a358d0e4b0542e1f8d14c9"}, {"problem": 33, "code": "(fn [c v] (mapcat #(repeat v %) c))", "user": "56a01895e4b0542e1f8d149f"}, {"problem": 33, "code": "(fn [x n]\n   (let [f #(apply conj %1 (repeat n %2))]\n     (reduce f [] x)))", "user": "56012cd7e4b04bb52996e17d"}, {"problem": 33, "code": "(fn dupEl [x m]\n  (loop [a x\n         result []]\n    (if (> (count a) 0)\n      (recur (rest a) (concat result (repeat m (first a))))\n      result)))", "user": "56a3c89ae4b0542e1f8d14cf"}, {"problem": 33, "code": "(fn [s n] (mapcat (partial repeat n) s))", "user": "569adec2e4b0542e1f8d1450"}, {"problem": 33, "code": "(fn [x n] (reduce concat (map #(take n (repeat %)) x)))", "user": "55bf785ee4b01b9910ae2a14"}, {"problem": 33, "code": "(fn [coll n]\n(apply concat\n  (for [e coll]\n     (repeat n e))))", "user": "5167e8ace4b0c5a4140a309a"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce (fn [acc x] (into acc (repeat n x))) [] coll))", "user": "56a51f26e4b0542e1f8d14e0"}, {"problem": 33, "code": "(fn [col n]\n  (if (= 1 n)\n    col\n    (apply interleave (repeat n col))))", "user": "56877fcbe4b0dcc4269f405e"}, {"problem": 33, "code": "(fn [col n]\n  (mapcat #(repeat n %) col))", "user": "525523e3e4b0541d1855b9cc"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce #(into %1 (repeat n %2)) [] coll))", "user": "51a7bf26e4b0da5f497bde8c"}, {"problem": 33, "code": "(fn [x n] (reverse (reduce (fn [a b] (into  a (take n (repeat b)) )) '() x)))", "user": "56a6051fe4b0542e1f8d14e5"}, {"problem": 33, "code": "(fn [input x] \n   (loop [in input out []]\n     (if (empty? in)\n       out\n       (recur (rest in)\n              (concat out (repeat x (first in)))\n              )\n       )\n     )\n   )", "user": "569425b6e4b0dcc4269f410e"}, {"problem": 33, "code": "(fn [coll x]\n  (reverse\n      (reduce\n        (fn [co item]\n          (reduce #(conj %1 %2)\n            co (repeat x item)))\n            '() coll)))", "user": "5576961be4b05c286339e06f"}, {"problem": 33, "code": "(fn [s n] (apply concat (map #(repeat n %) s)))", "user": "56826c2fe4b0945ebc182a92"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "569ce6fee4b0542e1f8d146c"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce (fn [v x]\n            (into v (repeat n x)))\n          []\n          coll))", "user": "56a79eb0e4b07966d5a8a05d"}, {"problem": 33, "code": "(fn [lst times] (reverse (reduce into '()  (map #(repeat times %) lst))))", "user": "5243233fe4b076204b44faac"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "56a76f36e4b07966d5a8a05b"}, {"problem": 33, "code": "(fn dupe [q n] \n   (let [dupe* \n         (fn [rep q*] \n           (concat rep (repeat n q*)))] \n    (reduce dupe* [] q)))", "user": "56942923e4b0dcc4269f4112"}, {"problem": 33, "code": "(fn [coll times]\n  (mapcat #(repeat times %) coll))", "user": "5297dcc5e4b02ebb4ef75047"}, {"problem": 33, "code": "#(reduce concat () (map (partial replicate %2) %1))", "user": "56a75810e4b0542e1f8d14fc"}, {"problem": 33, "code": "(fn [coll n]\n  (if (= 1 n)\n    coll\n    (apply interleave (take n (repeat coll)))))", "user": "55d1ec3ee4b0e31453f64a4c"}, {"problem": 33, "code": "(fn [x y]\n  (mapcat #(repeat y % ) x))", "user": "569951e4e4b0542e1f8d143e"}, {"problem": 33, "code": "(fn replication [c x]\n  (mapcat #(repeat x %) c))", "user": "56990b68e4b0542e1f8d143a"}, {"problem": 33, "code": "#(mapcat(partial repeat %2)%1)", "user": "5515b68de4b055c2f668d4ef"}, {"problem": 33, "code": "#(->> (repeat %2 %1) (apply mapcat list))", "user": "56aad332e4b03c432f187337"}, {"problem": 33, "code": "(fn replSeq [ x y ]\n  (loop [ in x n y c 0 out '() ]\n    (cond \n     (empty? in) (reverse out)\n     (= n c) (recur (rest in) n 0 out)\n     :else (recur in n (+ c 1) (conj out (first in))))))", "user": "56942b5fe4b0dcc4269f411c"}, {"problem": 33, "code": "#(mapcat (fn [input] (repeat %2 input)) %1)", "user": "56abeb1fe4b03c432f187344"}, {"problem": 33, "code": "(fn [coll spread] (mapcat #(repeat spread %) coll))", "user": "56481722e4b0284900eef628"}, {"problem": 33, "code": "#(if (= 1 %2)\n  %1\n  (apply interleave (repeat %2 %1)))", "user": "56ac81ace4b03c432f187347"}, {"problem": 33, "code": "#(if-not (= %2 1)\n   (apply interleave (take %2 (repeat %1)))\n   %1)", "user": "51b01309e4b0c53cf2e68a57"}, {"problem": 33, "code": "(fn [_list _times]\n  (reduce #(apply conj %1 (repeat _times %2)) [] _list))", "user": "53ef235de4b0d648e757f4d4"}, {"problem": 33, "code": "(fn [data n] (mapcat #(repeat n %1) data))", "user": "55f9b2b6e4b03cbcff9738c8"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "user": "568c2f97e4b0dcc4269f40b0"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "user": "565f8fd2e4b068f2fe63dc41"}, {"problem": 33, "code": "#(loop [l1 %1 l2 '() ]\n  (cond \n    (empty? l1)(reverse l2)\n    :else (recur (rest l1) (concat (take %2 (repeat (first l1))) l2) )))", "user": "55c2367ee4b0e31453f64978"}, {"problem": 33, "code": "#(if (> %2 1) \n  (apply interleave (repeat %2 %1))\n  %1)", "user": "56a9ea17e4b07966d5a8a07c"}, {"problem": 33, "code": "(fn f [s n](\n            reduce into \n            []\n            (map #(repeat n %) s)\n   \n            \n            )\n  )", "user": "56ae4c21e4b03c432f18735c"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "55c0f842e4b01b9910ae2a2b"}, {"problem": 33, "code": "(fn [lst n] (mapcat #(repeat n %) lst))", "user": "53e92f82e4b036ad0777e49d"}, {"problem": 33, "code": "#(reverse (reduce (fn [source e] (apply conj source (for [i (range %2)] e))) '() %1))", "user": "56b3146ae4b0982f16b37e0f"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5693b40ce4b0dcc4269f4107"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "55ed5a2de4b0121d4835fdd8"}, {"problem": 33, "code": "(fn [s r]\n      (loop [ss s res '[]]\n            (if (empty? ss)\n              (apply concat (seq  res))\n              (recur (rest ss) (conj  res (repeat r (first ss)))))))", "user": "56a1fce9e4b0542e1f8d14b7"}, {"problem": 33, "code": "(fn r [s N]\n   (loop [ans nil sq s]\n     (if (empty? sq)\n       ans\n       (recur\n        (concat ans ((fn addn [i n]\n                       (if (= n 1)\n                         (conj nil i)\n                         (conj (addn i (- n 1)) i)\n                       )\n                     )\n                     (first sq)\n                     N\n                    )\n        )\n        (rest sq)\n       )\n    )\n  )\n)", "user": "56b36283e4b0982f16b37e18"}, {"problem": 33, "code": "(fn [s t] (mapcat #(take t (cycle [%])) s))", "user": "5242e1dae4b076204b44fa96"}, {"problem": 33, "code": "(fn [s n]\n  (reduce #(concat %1 (repeat n %2)) [] s))", "user": "5617a540e4b06b1bb2182a12"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "56646a7fe4b0e91d5f5c5657"}, {"problem": 33, "code": "#(reduce (fn [s x]\n           (apply conj s x))\n         []\n         (map (fn [y]\n                (take %2 (repeat y)))\n              %1))", "user": "56b18445e4b0982f16b37dee"}, {"problem": 33, "code": "(fn [my-seq nr] (reduce #(into %1 (take nr (repeat %2))) [] my-seq))", "user": "5655e056e4b0f9d632dd849b"}, {"problem": 33, "code": "(fn [x n]\n  (loop [x x new []]\n    (if (empty? x)\n      (vec new)\n      (recur (rest x) (concat new (repeat n (nth x 0))))      \n      )\n    )\n  )", "user": "5694292ee4b0dcc4269f4113"}, {"problem": 33, "code": "(fn [col n]\n  (mapcat #(repeat n %) col))", "user": "56b1ab17e4b0982f16b37df1"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(concat (repeat n %)) coll))", "user": "56942962e4b0dcc4269f4117"}, {"problem": 33, "code": "(fn [xs i] (mapcat #(repeat i %) xs))", "user": "56b295f7e4b0982f16b37e08"}, {"problem": 33, "code": "(fn myfn [x t]\n  (reduce\n    (fn [a y]\n       (concat a (repeat t y)))\n     () x))", "user": "56b280e3e4b0982f16b37e06"}, {"problem": 33, "code": "(fn [a-seq n]\n  (apply concat\n         (map #(take n (repeat %))\n              a-seq)))", "user": "5688e403e4b0dcc4269f4072"}, {"problem": 33, "code": "#(for [x % y (repeat %2 x)] y)", "user": "56ae214ce4b03c432f18735a"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "56941e48e4b0dcc4269f410d"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "56942970e4b0dcc4269f4118"}, {"problem": 33, "code": "(fn [lst, x]\n        (reduce\n            #(concat %1 (take x (repeat %2)))\n            []\n            lst))", "user": "5694290fe4b0dcc4269f4110"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "56098ccbe4b0053d1b86c7e4"}, {"problem": 33, "code": "(fn [col n] (mapcat #(repeat n %) col))", "user": "56b965d9e4b0f26550335931"}, {"problem": 33, "code": "(fn [l n] (reduce #(apply conj %1 (repeat n %2)) [] l) )", "user": "54be7e93e4b0ed20f4ff6eed"}, {"problem": 33, "code": "(fn [s n]\n  (apply concat (map (partial repeat n) s)))", "user": "5694129de4b0dcc4269f410c"}, {"problem": 33, "code": "(fn [s n]\n  (apply concat (map #(repeat n %) s)))", "user": "569429c7e4b0dcc4269f411a"}, {"problem": 33, "code": "(fn replicate-seq [l n] (mapcat (fn [x] (replicate n x)) l))", "user": "56b5019ce4b0982f16b37e2c"}, {"problem": 33, "code": "(fn [xs n] \n  (apply mapcat list (take n (iterate identity xs))))", "user": "563cdfdfe4b0bfe05bf11840"}, {"problem": 33, "code": "(fn [list number] \n  (loop [list list n number z []]\n    (println list n)\n    (if (> (count list) 0)\n      (recur (rest list) n (\n        let [x (first list)]\n        (apply conj z (repeat n x))))\n    z)))", "user": "5669eb9ae4b04acd4f672e02"}, {"problem": 33, "code": "(fn replicate [s n]\n  (let [replicate*\n        (fn [acc s*]\n          (concat acc (repeat n s*)))]\n    (reduce replicate* [] s)))", "user": "5694284de4b0dcc4269f410f"}, {"problem": 33, "code": "(fn rep [seq-to-rep n]\n  (reduce concat (map #(take n (repeat %)) seq-to-rep)))", "user": "56942939e4b0dcc4269f4114"}, {"problem": 33, "code": "(fn [lat n]\n  (reduce concat (map #(take n (repeat %)) lat)))", "user": "56942923e4b0dcc4269f4111"}, {"problem": 33, "code": "(fn [s n](mapcat #(take n (repeat %)) s))", "user": "56baab13e4b0f26550335948"}, {"problem": 33, "code": "(fn rep [nums times] (mapcat (partial repeat times) nums))", "user": "568c92c6e4b0dcc4269f40b8"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "56942944e4b0dcc4269f4115"}, {"problem": 33, "code": "(fn [s n] (reduce (fn [m v] (into m (repeat n v))) [] s))", "user": "56baa68ce4b0f26550335947"}, {"problem": 33, "code": "(fn [xs n] \n  (mapcat (partial repeat n) xs))", "user": "56b86e64e4b0f26550335924"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "56bb9ccce4b0f26550335959"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "56b755b5e4b0982f16b37e46"}, {"problem": 33, "code": "(fn abc\n  [L n]\n  (if (empty? L)\n    '()\n    (concat\n      (repeat n (first L))\n      (abc (rest L) n)\n    )\n  )\n)", "user": "56bb3a4be4b0f26550335951"}, {"problem": 33, "code": "(fn [xs n]\n    (reverse\n      (reduce #(concat (repeat n %2) %1)\n              '()\n              xs)))", "user": "56bcc2b2e4b0f26550335965"}, {"problem": 33, "code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "user": "56bca51ae4b0f26550335963"}, {"problem": 33, "code": "(fn [col n]\n  (loop [acc [] remaining col]\n    (if (empty? remaining)\n      (seq acc)\n      (recur (concat acc (repeat n (first remaining))) (rest remaining)))))", "user": "56b2300ce4b0982f16b37dff"}, {"problem": 33, "code": "(fn replicate [coll n]\n  (mapcat #(repeat n %) coll))", "user": "56ba1406e4b0f2655033593c"}, {"problem": 33, "code": "(fn [c n] (reduce #(concat %1 (repeat n %2)) [] c))", "user": "51f38193e4b0fca5e8b48226"}, {"problem": 33, "code": "(fn [c r] (mapcat (partial repeat r) c))", "user": "56bf4ac0e4b0f26550335985"}, {"problem": 33, "code": "(fn [ls n]\n  (let [col ()]\n    (reduce concat (map #(concat col (repeat n %))\n                        ls))))", "user": "56bb81ebe4b0f26550335957"}, {"problem": 33, "code": "(fn [s n] (apply concat (map #(repeat n %) s)))", "user": "563536f8e4b0bfe05bf117c5"}, {"problem": 33, "code": "(fn [v n] (apply concat (map #(repeat n %) v)))", "user": "5693cc39e4b0dcc4269f4108"}, {"problem": 33, "code": "(fn [coll c]\n  (mapcat (fn [x]\n            (loop [r '()\n                   current c]\n              (if (> current 0)\n                (recur (conj r x) (dec current))\n                r))) coll))", "user": "54a80855e4b09f271ff37c9e"}, {"problem": 33, "code": "(fn [xs y] (mapcat #(repeat y %) xs))", "user": "531a0709e4b08068f379ed87"}, {"problem": 33, "code": "(fn [v t] (loop [x () y v] (if (empty? y) x (recur (concat x (repeat t (first y))) (next y)))))", "user": "56bdda49e4b0f26550335977"}, {"problem": 33, "code": "(fn [coll rep] (mapcat #(for [_ (range rep)] %) coll))", "user": "56b80ad1e4b0f26550335921"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "56a36f76e4b0542e1f8d14ca"}, {"problem": 33, "code": "(fn rep [xs n]\n  (if (= 0 (count xs))\n    '()\n    (concat (repeat n (first xs))\n            (rep (rest xs) n))))", "user": "56bfcba1e4b060a8e693e3a1"}, {"problem": 33, "code": "(fn [coll n] \n  (mapcat #(repeat n %) coll))", "user": "56a7be01e4b07966d5a8a05e"}, {"problem": 33, "code": "(fn dupn\n  [coll n]\n  (reduce #(apply conj %1 (repeat n %2)) [] coll))", "user": "5609d328e4b05f002753deee"}, {"problem": 33, "code": "(fn [coll n]\n  (if (>= n 2)\n    (apply interleave (repeat n coll))\n    coll))", "user": "56c33ceae4b05cc29241ee89"}, {"problem": 33, "code": "#(reduce into[](for [el % ](repeat %2 el)))", "user": "569637d8e4b0dcc4269f4130"}, {"problem": 33, "code": "(fn [x y]\n  (mapcat identity (map #(nth (iterate (partial cons (first %)) []) y) (partition-all 1 x))))", "user": "56c6490de4b05cc29241eeaf"}, {"problem": 33, "code": "(fn [s n]\n  (loop [remain s, result []]\n    (if (empty? remain)\n      result\n      (recur (next remain) (concat result (repeat n (first remain)))))))", "user": "567e418fe4b0feffd0d18eb1"}, {"problem": 33, "code": "#(if (= %2 1) % (apply interleave (take %2 (repeat %))))", "user": "55f95782e4b03cbcff9738bf"}, {"problem": 33, "code": "(fn [[& args] n]\n     (reduce #(apply conj %1 (repeat n %2)) [] args))", "user": "56c04bd3e4b060a8e693e3a6"}, {"problem": 33, "code": "#(if (> %2 1) (apply interleave (repeat %2 %)) %)", "user": "56c08696e4b060a8e693e3aa"}, {"problem": 33, "code": "#(apply mapcat list (repeat %2 %1))", "user": "56b2573ce4b0982f16b37e02"}, {"problem": 33, "code": "#(mapcat (fn[x] (repeat %2 x)) %1)", "user": "56c33bb9e4b05cc29241ee87"}, {"problem": 33, "code": "(fn [l n] (apply concat (for [x l] (take n (repeat x)))))", "user": "56c23ca6e4b05cc29241ee7f"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "54b8dfece4b0ed20f4ff6e9a"}, {"problem": 33, "code": "(fn [arr n]\n  (mapcat #(repeat n %) arr))", "user": "56a37ccee4b0542e1f8d14cb"}, {"problem": 33, "code": "(fn [s n] (reduce concat (map (fn [x] (repeat n x)) s)))", "user": "548a3dc6e4b0e286459a11f2"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce #(into %1 (repeat n %2)) [] coll))", "user": "52fe31d5e4b047fd55837038"}, {"problem": 33, "code": "(fn [l n] (mapcat #(take n (iterate identity %)) l))", "user": "566470b9e4b0e91d5f5c5658"}, {"problem": 33, "code": "(fn [seq rep]\n\n  (loop [seq seq\n         rep rep\n         output []]\n    (if (empty? seq)\n      output\n      (recur (rest seq)\n             rep\n             (into output  (loop [f (first seq)\n                                  rep rep\n                                  count 0\n                                  o2 []]\n                             (if (= count rep)\n                               o2\n                               (recur f\n                                      rep\n                                      (inc count)\n                                      (conj o2 f)))\n\n\n                             )   ))\n      )\n\n    )\n\n  )", "user": "56b7c32ee4b0982f16b37e48"}, {"problem": 33, "code": "(fn [input n]\n  (loop [to_consume input\n         result []]\n    (if (empty? to_consume)\n      result\n      (recur (rest to_consume) (into result (repeat n (first to_consume)))))))", "user": "56c12aa2e4b0839206b9d682"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "56aed78fe4b03c432f187363"}, {"problem": 33, "code": "(fn [s n] \n  (for [x s _ (range n)] x))", "user": "56c9970ce4b0ed865f9758de"}, {"problem": 33, "code": "#(reduce concat (map (partial repeat %2) %))", "user": "50d0d2dde4b00b15ecee9768"}, {"problem": 33, "code": "#(mapcat (fn[input] (repeat %2 input)) %1)", "user": "5602f5fce4b04bb52996e1ad"}, {"problem": 33, "code": "(fn solve [[& a] n] (reduce concat (for [x a] (take n (repeat x)))))", "user": "56af842de4b061e3ca319ad2"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(replicate n %) coll))", "user": "555d4421e4b0a2eb076a39a8"}, {"problem": 33, "code": "(fn replicate-seq [col n]\n  (mapcat #(repeat n %) col))", "user": "569f4dabe4b0542e1f8d1491"}, {"problem": 33, "code": "#(mapcat (partial replicate %2) %1)", "user": "53483a32e4b084c2834f4a57"}, {"problem": 33, "code": "#(apply concat (map (fn [input](repeat %2 input)) %1))", "user": "56cba075e4b0ea9b8538f737"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "56c792ace4b0ed865f9758c4"}, {"problem": 33, "code": "(fn [sq factor]\n  (loop [ls (seq sq)\n         return []]\n    (if (nil? (first ls))\n      (seq return)\n      (recur (rest ls)\n             (apply conj return \n                    (repeat factor (first ls)))))))", "user": "55f73078e4b06e875b46cea4"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "56942955e4b0dcc4269f4116"}, {"problem": 33, "code": "#(apply concat (for [i %1] (repeat %2 i)))", "user": "55c5e781e4b0e31453f649b8"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "56c4f43ce4b05cc29241ee9c"}, {"problem": 33, "code": "(fn[s rep](apply concat(map #(repeat rep %) s)))", "user": "56c1f470e4b0839206b9d68c"}, {"problem": 33, "code": "(fn [coll n] (reduce concat (map (fn [x] (repeat n x)) coll)))", "user": "56cb6425e4b0ea9b8538f730"}, {"problem": 33, "code": "(fn [input num] (mapcat #(repeat num %) input))", "user": "506af7d8e4b0a2a5463de37d"}, {"problem": 33, "code": "(fn [coil x]\n  (loop [src coil, result '()]\n    (if (empty? src)\n      result\n      (recur (rest src)\n             (concat result (repeat x (first src)))))))", "user": "56c55fbce4b05cc29241eea5"}, {"problem": 33, "code": "(fn [x n] \n  (mapcat \n   #(take n (cycle [%]) ) x))", "user": "56cbb352e4b0ea9b8538f738"}, {"problem": 33, "code": "(fn [list num-repeat]\n  (mapcat #(repeat num-repeat %) list))", "user": "54aa2462e4b09f271ff37cb4"}, {"problem": 33, "code": "(fn [col rep] (apply concat (map #(take rep (repeat %)) col)))", "user": "56b49f72e4b0982f16b37e23"}, {"problem": 33, "code": "#(apply concat (map (fn [x] (repeat %2 x)) %1))", "user": "56c60b36e4b05cc29241eead"}, {"problem": 33, "code": "(fn [coll c] (mapcat #(repeat c %) coll))", "user": "5002c798e4b0678c553fc42d"}, {"problem": 33, "code": "#(apply mapcat list (repeat %2 %))", "user": "56d1afd9e4b0ea9b8538f791"}, {"problem": 33, "code": "(fn repli [[x & xs] n]\n  (let \n    [dupel (fn dupeli [x n] \n             (cond \n              (= n 0) nil \n              :else (conj (dupeli x (dec n)) x)\n             )\n           )]\n    (cond\n     (nil? x) nil\n     :else (concat (dupel x n) (repli xs n))\n    )\n  )\n)", "user": "56433d34e4b08d4f616f5f23"}, {"problem": 33, "code": "#(apply concat\n (for [x %1]\n  \n     (loop [result [] size %2]\n      (if (= size 0)\n        result\n        (recur (conj result x) (dec size))))))", "user": "56cccd99e4b0ea9b8538f743"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "56d228f3e4b0ea9b8538f79a"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "55ed1575e4b0121d4835fdd3"}, {"problem": 33, "code": "(fn [coll times] (mapcat #(repeat times %) coll))", "user": "565b4d7fe4b068f2fe63dc01"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(take n (repeat %)) coll))", "user": "542a8d07e4b01498b1a71b43"}, {"problem": 33, "code": "#(mapcat (fn [x] \n           (take %2 (repeat x))) %1)", "user": "56c3afdde4b05cc29241ee91"}, {"problem": 33, "code": "#(apply concat (map (partial repeat %2) %1))", "user": "56d63729e4b0ea9b8538f7ca"}, {"problem": 33, "code": "#(mapcat (fn [input](repeat %2 input)) %1)", "user": "56d05ba2e4b0ea9b8538f77d"}, {"problem": 33, "code": "(fn [coll count] (mapcat #(repeat count %) coll))", "user": "56c70cc2e4b0ed865f9758b5"}, {"problem": 33, "code": "#(mapcat (fn [i] (repeat %2 i)) %)", "user": "56d69d28e4b0ea9b8538f7cf"}, {"problem": 33, "code": "(fn [xs k] (mapcat #(repeat k %) xs))", "user": "56d80542e4b0ea9b8538f7e1"}, {"problem": 33, "code": "#(loop [accum [] x %1]\n   (if (empty? x)\n      accum\n      (recur (concat accum (take %2 (iterate (fn[e] e) (first x)))) (rest x))))", "user": "56cf80f9e4b0ea9b8538f76a"}, {"problem": 33, "code": "(fn my-replicate \n  [coll n]\n  (reduce #(concat %1 (repeat n %2))  [] coll))", "user": "56c3aca0e4b05cc29241ee90"}, {"problem": 33, "code": "#(apply concat (for [x %1] (repeat %2 x)))", "user": "56d5fd24e4b0ea9b8538f7c5"}, {"problem": 33, "code": "(fn [s n]\n  (apply concat (map #(repeat n %) s)))", "user": "56d4b22de4b0ea9b8538f7bb"}, {"problem": 33, "code": "#(mapcat (fn [s] (repeat %2 s)) %1)", "user": "55b6a63ae4b01b9910ae299b"}, {"problem": 33, "code": "(fn [s n]\n  (reduce #(concat %1 (repeat n %2)) () s))", "user": "56d8a63fe4b0ea9b8538f7e8"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "56d957c2e4b0ea9b8538f7f1"}, {"problem": 33, "code": "(fn [el-seq rep-count]\n  (reduce \n   (fn [acc el] (concat acc (repeat rep-count el)))\n   []\n   el-seq\n   ))", "user": "56daa3cee4b0ea9b8538f801"}, {"problem": 33, "code": "(fn [list c] \n  (reduce (fn [coll elem] \n            (concat coll (repeat c elem))) [] list))", "user": "56daa420e4b0ea9b8538f802"}, {"problem": 33, "code": "#(apply mapcat vector (repeat %2 %1))", "user": "56d68cbae4b0ea9b8538f7cd"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %)s) )", "user": "567d75ebe4b05957ce8c61c9"}, {"problem": 33, "code": "(fn [l rep] (apply concat\n                   (map #(repeat rep %) l)))", "user": "55009d17e4b07d26eda61d5d"}, {"problem": 33, "code": "(fn [l n] (mapcat #(repeat n %) l))", "user": "56d8fa43e4b0ea9b8538f7ec"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(concat (take n (repeat %))) coll))", "user": "52c634b1e4b0c2d177d6210a"}, {"problem": 33, "code": "(fn [c n] (apply concat (map #(repeat n %) c)))", "user": "5313b4b6e4b08068f379ed0c"}, {"problem": 33, "code": "(fn [coll n] (apply concat (map #(repeat n %) coll)))", "user": "56b3b12ee4b0982f16b37e1c"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "56603e5fe4b068f2fe63dc4a"}, {"problem": 33, "code": "(fn [coll n]\n         (mapcat #(take n (repeat %)) coll))", "user": "560ee566e4b05f002753df57"}, {"problem": 33, "code": "(fn mult-elements \n  [coll count]  \n  (reverse   \n   (reduce    \n    (fn [outer-result next]      \n      (concat (reduce (fn [latest-result next-element]  \n                        (cons next latest-result) ) \n                      [] (range count) )  outer-result     )  )  \n    [] coll  )  ))", "user": "56d74c88e4b0ea9b8538f7d9"}, {"problem": 33, "code": "#(mapcat (fn [item]                                                      \n             (take %2 (repeat item)))                                              \n          %1)", "user": "56df9203e4b0ca2494a095fc"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "550b502ae4b06e50f9beb13f"}, {"problem": 33, "code": "(fn [lst n] (apply concat (map #(repeat n %) lst)))", "user": "56e08e4fe4b0ca2494a0960b"}, {"problem": 33, "code": "(fn [col n]\n  (mapcat #(repeat n %) col))", "user": "56df254be4b0ca2494a095ea"}, {"problem": 33, "code": "(fn my-replicate [coll n]\n  (mapcat #(repeat n %) coll))", "user": "557e56aae4b05c286339e0d5"}, {"problem": 33, "code": "#(reduce (fn [acc x] (into acc (take %2 (repeat x)))) [] %1 )", "user": "56b6a50ae4b0982f16b37e3c"}, {"problem": 33, "code": "(fn [xs n]\n  (mapcat #(repeat n %) xs))", "user": "55f33f0ce4b06e875b46ce59"}, {"problem": 33, "code": "(fn [a b] (mapcat #(repeat b %) a))", "user": "4de14aad535d08e6dec9fde5"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "56e2dbf4e4b03a7c14b85a3b"}, {"problem": 33, "code": "(fn my-repeat [elems n]\n  (apply concat (map (partial repeat n) elems)))", "user": "56e32696e4b03a7c14b85a40"}, {"problem": 33, "code": "(fn [ls n]\n  (apply concat (map (fn [ls] (repeat n ls)) ls)))", "user": "56d7f340e4b0ea9b8538f7df"}, {"problem": 33, "code": "(fn [x n] (mapcat #(concat (repeat n %)) x))", "user": "56e227a8e4b03a7c14b85a31"}, {"problem": 33, "code": "(fn [clxn x] \n  (mapcat \n    (fn [i] \n      (map (fn [_] i) (range x))) \n  clxn))", "user": "56e4a6c1e4b03a7c14b85a51"}, {"problem": 33, "code": "(fn [lst rpt]\n  (mapcat #(repeat rpt %) lst))", "user": "56be8649e4b0f26550335983"}, {"problem": 33, "code": "(fn [coll n] (reduce #(concat %1 (take n (repeat %2))) [] coll))", "user": "56e4427ce4b03a7c14b85a4c"}, {"problem": 33, "code": "(fn [coll x] (mapcat (partial repeat x) coll))", "user": "56bf78dae4b0f26550335989"}, {"problem": 33, "code": ";; #(take (* %2 (count %1)) (cycle %1))  ;; => (1 2 3 1 2 3)\n(fn [coll n] (mapcat (partial repeat n) coll))", "user": "56ca0da9e4b0ea9b8538f715"}, {"problem": 33, "code": "(fn [s n] \n  (reduce #(concat %1 (repeat n %2)) [] s))", "user": "56308326e4b073c1cf7a9be9"}, {"problem": 33, "code": "(fn dupseq [coll n]\n  (reduce #(concat %1 (repeat n %2)) '() coll))", "user": "56e53d2fe4b02e7e935eb6bc"}, {"problem": 33, "code": "(fn [xs num]\n  (if (= num 1)\n    xs\n    (apply interleave (repeat num xs))))", "user": "53ecaf1ce4b0d648e757f4b4"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "56e05bfce4b0ca2494a09606"}, {"problem": 33, "code": "(fn my-repeat\n  [seq n]\n  (mapcat (fn [e] (repeat n e)) seq))", "user": "569f7bc2e4b0542e1f8d1494"}, {"problem": 33, "code": "#(apply concat (map (fn [input](repeat %2 input)) %1))", "user": "56e7d877e4b02e7e935eb6df"}, {"problem": 33, "code": "(fn [cols times]\n  (loop [left cols repeated []]\n    (if (empty? left)\n      repeated\n      (recur (rest left) (into repeated (repeat times (first left)))))))", "user": "560d4994e4b05f002753df3c"}, {"problem": 33, "code": "#(if (= 1 %2) %1 (apply interleave (repeat %2 %1)))", "user": "56e6ef89e4b02e7e935eb6d0"}, {"problem": 33, "code": "(fn repl [coll, times]\n  (apply concat (for [x coll]\n    (take\n      times\n      (iterate (fn [y] y) x)\n      )\n    ))\n  )", "user": "56de0db0e4b0ea9b8538f83a"}, {"problem": 33, "code": "(fn [col n]\n  (mapcat #(repeat n %) col))", "user": "56c427bbe4b05cc29241ee94"}, {"problem": 33, "code": "(fn [input i]\n  (reduce\n    concat\n    '()\n    (map\n      (fn [item]\n          (loop [result '() i i]\n                (if (= i 0)\n                  result\n                  (recur (conj result item) (dec i)))))\n      input\n    )\n  )\n)", "user": "56cc34aee4b0ea9b8538f73c"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "56491d05e4b0284900eef63a"}, {"problem": 33, "code": "(fn [xs n] (if (= 1 n) xs (apply interleave (repeat n xs))))", "user": "56d4b1aee4b0ea9b8538f7ba"}, {"problem": 33, "code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "user": "56e9555fe4b04a395b9a03f7"}, {"problem": 33, "code": "(fn [lst times]\n  (reduce\n   (fn [k x]\n     (concat k (repeat times x)))\n  [] lst))", "user": "56e6d049e4b02e7e935eb6cd"}, {"problem": 33, "code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "user": "527bd988e4b03e8d9a4a759d"}, {"problem": 33, "code": "(fn [col x] (mapcat #(repeat x %) col))", "user": "569dd6e8e4b0542e1f8d1480"}, {"problem": 33, "code": "(fn [xs, r]\n  (reduce \n    (fn [acc, x]\n      (loop [i r, acc acc]\n        (if (zero? i)\n          acc\n          (recur (dec i) (conj acc x)))))\n    []\n    xs))", "user": "56e02c1ce4b0ca2494a09602"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "56e06625e4b0ca2494a09607"}, {"problem": 33, "code": "(fn [col times]\n  (mapcat #(repeat times %) col))", "user": "563cce5be4b0bfe05bf1183f"}, {"problem": 33, "code": "(fn [coll n]\n    (if (= n 1)\n      coll\n      (apply interleave (repeat n coll))))", "user": "56eaad95e4b04a395b9a040f"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "56ea8d33e4b04a395b9a040a"}, {"problem": 33, "code": "(fn [x n] (mapcat #(take n (repeat %)) x))", "user": "5258d2abe4b0cb4875a45cc1"}, {"problem": 33, "code": "(fn replicate\n  [coll n]\n  (mapcat #(repeat n %) coll))", "user": "56e99ec8e4b04a395b9a03fb"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce (fn [acc e] (into acc (take n (repeat e))))\n          []\n          coll))", "user": "52d38c51e4b099d49816f0c5"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(into [] (repeat n %)) xs))", "user": "56cad309e4b0ea9b8538f720"}, {"problem": 33, "code": "(fn dup [x, n]\n  (if (empty? x) \n    x \n    (concat (repeat n (first x)) (dup (rest x) n))\n  )\n)", "user": "56ea8b75e4b04a395b9a0409"}, {"problem": 33, "code": "#(apply concat (map (fn [input](repeat %2 input)) %1))", "user": "56ec440ee4b04a395b9a0435"}, {"problem": 33, "code": "(fn [c t] (reduce #(concat %1 (take t (repeat %2))) [] c))", "user": "56db90d4e4b0ea9b8538f80d"}, {"problem": 33, "code": "(fn replicate-a-sequence [xs n]\n  (mapcat #(repeat n %) xs))", "user": "518b8561e4b0f028e99addef"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "56ecc4b5e4b04a395b9a043e"}, {"problem": 33, "code": "(fn [s n]\n  (reduce\n   (fn [acc e] (into acc (repeat n e)))\n   []\n   s))", "user": "56d2a103e4b0ea9b8538f7a3"}, {"problem": 33, "code": "(fn [l n] (mapcat #(repeat n %) l))", "user": "56ec3a97e4b04a395b9a0433"}, {"problem": 33, "code": "(fn [x n] (mapcat #(repeat n %) x))", "user": "56ebe773e4b04a395b9a042a"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat (partial repeat n) s))", "user": "56ee0691e4b04a395b9a044c"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "56dc483fe4b0ea9b8538f81b"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "56f000aee4b04a395b9a0469"}, {"problem": 33, "code": "#(for [ele %1 idx (range %2)] ele)", "user": "562268dce4b03f08ee9a9224"}, {"problem": 33, "code": "(fn [y c] (loop [x (seq y) z '() p c]\n          (if (empty? x)\n            (reverse z)\n            (if (= p 0)\n            (recur\n             (rest x)\n             z\n             c\n             )\n              (recur x\n                     (conj z  (first x))\n                     (dec p))\n            ))\n  ))", "user": "56d325ace4b0ea9b8538f7a9"}, {"problem": 33, "code": "(fn [data times] (apply concat (map #(repeat times %1) data)))", "user": "56ef11efe4b04a395b9a045b"}, {"problem": 33, "code": "(fn db [x, z] \n  (mapcat \n   (fn [q] \n      ((fn rep [y, n] \n        (if (= n 0) \n          () \n          (conj (rep y (- n 1)) y) \n        )\n      ) q z))\n  x)\n)", "user": "56f258d3e4b04a395b9a04a1"}, {"problem": 33, "code": ";; \u9012\u5f52\u6b21\u6570\n\n#(reduce \n  (fn [a b]\n    (loop [la a c %2]\n      (if (= c 0)\n        la\n        (recur (conj la b) (dec c))\n      )\n    )\n  ) [] %1)", "user": "56815e2fe4b0945ebc182a84"}, {"problem": 33, "code": "(fn [coll x]\n  (reduce #(apply conj %1 (repeat x %2)) [] coll)\n  )", "user": "56f188e9e4b04a395b9a0494"}, {"problem": 33, "code": "(fn [s n] (reduce #(concat %1 (repeat n %2)) (empty s) s))", "user": "5292feb4e4b0239c8a67af39"}, {"problem": 33, "code": "(fn elemrep\n  ([l n]\n      (elemrep l n n))\n  ([l n c]\n      (cond\n       (empty? l) '()\n       (zero? c) (elemrep (rest l) n n)\n       :else\n       (cons (first l)\n             (elemrep l n (- c 1))))))", "user": "56e8ef93e4b04a395b9a03f4"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x) )", "user": "56f4623ae4b046a417f9205d"}, {"problem": 33, "code": "(fn f [xs n]\n  (mapcat #(repeat n %) xs))", "user": "52c35afce4b07a9af579238c"}, {"problem": 33, "code": "(fn [a b] (reverse (reduce #(into %1 (take b (repeat %2))) '() a)))", "user": "56d6c18ee4b0ea9b8538f7d1"}, {"problem": 33, "code": "(fn replicate-a-sequence[x n]\n  (loop [x x\n         accum []]\n    (if (empty? x)\n      accum\n      (recur (rest x)\n             (concat accum (repeat n (first x)))))))", "user": "539f9f79e4b0ca733b97449e"}, {"problem": 33, "code": "(fn rep [x n]\n  (mapcat #(take n (repeat %)) x )\n  )", "user": "56f18d0ce4b04a395b9a0496"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "56f15eade4b04a395b9a048e"}, {"problem": 33, "code": "#(apply\n   (fn ([s] s)\n     ([l & s] (apply interleave l s)))\n   (take %2 (repeat %1)))", "user": "56f53962e4b046a417f9206c"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "5602bdf9e4b04bb52996e1a7"}, {"problem": 33, "code": "(fn my-iter [lst it]\n  (if (empty? lst) '()\n    (concat (repeat it (first lst)) (my-iter (rest lst) it))))", "user": "56dc3dbbe4b0ea9b8538f81a"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "56d15251e4b0ea9b8538f78c"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "56f7ecdfe4b08e7d20b96834"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat (fn [e] (repeat n e)) coll))", "user": "520e37cfe4b066f3ea161c96"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "56eb16d8e4b04a395b9a041d"}, {"problem": 33, "code": "(fn f [s n]\n  (let [f*\n        (fn [acc s*]\n          (concat acc (repeat n s*)))]\n    (reduce f* [] s)))", "user": "56f95915e4b07572ad1a88af"}, {"problem": 33, "code": "(fn [a b] (apply concat (map #(repeat b %) a)))", "user": "56efef12e4b04a395b9a0467"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "54e7425ee4b024c67c0cf810"}, {"problem": 33, "code": "(fn [col n] (mapcat #(repeat n %) col))", "user": "56fa3f7ae4b07572ad1a88bf"}, {"problem": 33, "code": "(fn repl [s n] \n  (reduce (fn [acc e] (concat acc (repeat n e))) '() s))", "user": "56f9392ae4b07572ad1a88ac"}, {"problem": 33, "code": "(fn repl [col cnt]\n  (loop [final []\n         remain col]  \n  \t(if (= 0 (count remain))\n    \tfinal\t\n        (recur \n          (loop [counter cnt final-total final]\n            (if (= 0 counter)\n              final-total\n          \t  (recur (dec counter) (conj final-total (first remain)))\n            )\n          )\n          (rest remain)\n \t\t)\n    )\n  )\n)", "user": "56f57481e4b046a417f92072"}, {"problem": 33, "code": "(fn [s n] (reverse (reduce into (map #(repeat n %) s))))", "user": "56742817e4b05957ce8c612d"}, {"problem": 33, "code": ";; (fn [s n] (mapcat #(repeat n %) s))\n;; (fn [a-seq cnt] (mapcat #(repeat cnt %) a-seq))\n\n(fn [coll i] (mapcat #(repeat i %) coll))", "user": "565487dce4b0f9d632dd8482"}, {"problem": 33, "code": "(fn a [lst n]\n  (if (vector? (first lst))\n      (for [i (partition 2 (flatten (for [i lst] (list (repeat n i)))))] (vector (first i)(second i)))\n  (flatten (for [i lst] (list (repeat n i))))))", "user": "56fc1bc7e4b07572ad1a88dd"}, {"problem": 33, "code": "(fn repl [s n]\n  (reduce\n   (fn [acc el]\n     (concat acc (repeat n el))\n     )\n   '()\n   s\n   )\n  )", "user": "56fbe0cce4b07572ad1a88d8"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce (fn [result x]\n            (concat result (repeat n x))) [] coll))", "user": "56d3bc2de4b0ea9b8538f7b0"}, {"problem": 33, "code": "(fn [koll n]\n  (mapcat #(repeat n %) koll))", "user": "56785234e4b05957ce8c6177"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "553beff9e4b09218d5f4500d"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "56efb3a3e4b04a395b9a0463"}, {"problem": 33, "code": "(fn [coll size] (if (= size 1) coll (apply interleave (repeat size coll))))", "user": "56fa972be4b07572ad1a88c2"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "56fdd9a1e4b08d47c97781a8"}, {"problem": 33, "code": "(fn f[s n]\n  (if (empty? s)\n    ()\n    (loop [s s w n r ()]\n      (if (= 1 w)\n        (concat (cons (first s) r) (f (rest s) n))\n        (recur s (dec w) (cons (first s) r))))))", "user": "56df632ce4b0ca2494a095f2"}, {"problem": 33, "code": "(fn rep-seq [elts n]\n   (loop [acc []\n          elts elts]\n     (if (empty? elts)\n       acc\n       (recur (into acc (for [n (range n)] (first elts)))\n              (rest elts)))))", "user": "539118b2e4b0b51d73faaea1"}, {"problem": 33, "code": "(fn [x, y] (mapcat #(repeat y %) x))", "user": "56fee4c0e4b08d47c97781b5"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "user": "56f4cedce4b046a417f92063"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeatedly n (constantly %1)) xs))", "user": "56fde58ae4b08d47c97781aa"}, {"problem": 33, "code": "(fn [xs n] \n  (reduce concat\n   (for [x xs\n         :let [y (repeat n x)]] \n     y)))", "user": "57006957e4b08d47c97781c8"}, {"problem": 33, "code": "(fn repliate-times [s n]\n  (mapcat #(repeat n %) s))", "user": "55ad2d97e4b03311e7b732a2"}, {"problem": 33, "code": "(fn re [s n]\n  (apply concat (map #(repeat n %) s)))", "user": "57008afae4b08d47c97781ca"}, {"problem": 33, "code": "#(reduce (fn [a b] (concat a (repeat %2 b))) [] %1)", "user": "5700f1f0e4b08d47c97781ce"}, {"problem": 33, "code": "#(apply concat (map (fn [x] (repeat %2 x)) %1))", "user": "57011eb3e4b08d47c97781d1"}, {"problem": 33, "code": "#(mapcat \n  (fn [v] (take %2 (repeat v))) %1)", "user": "56f881e0e4b08e7d20b96839"}, {"problem": 33, "code": "(fn [seq reps] (mapcat #(repeat reps %) seq))", "user": "57002b81e4b08d47c97781c7"}, {"problem": 33, "code": "(fn [l r]\n  (mapcat #(take r (repeat %1)) l))", "user": "5700ec08e4b08d47c97781cd"}, {"problem": 33, "code": "(fn [lst n] (reduce concat (map #(take n (iterate identity %)) lst)))", "user": "56f73913e4b08e7d20b9682d"}, {"problem": 33, "code": "(fn replicate-sequence [xs n]\n  (apply concat (map #(repeat n %) xs)))", "user": "56efc9fde4b04a395b9a0464"}, {"problem": 33, "code": "(fn [s n]\n  (apply concat (map #(replicate n %) s)))", "user": "57035ccfe4b08d47c97781ef"}, {"problem": 33, "code": "(fn [coll times]\n   (if (= times 1)  coll\n   (apply interleave  \n   (repeat times  coll))))", "user": "56ede653e4b04a395b9a0449"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "566835fde4b04acd4f672de3"}, {"problem": 33, "code": "(fn [l n] (reduce #(concat %1 (repeat n %2)) [] l))", "user": "5703eda3e4b08d47c9778200"}, {"problem": 33, "code": "(fn [s n] (reduce (fn [a b] (apply conj a (repeat n b))) [] s))", "user": "5703cd50e4b08d47c97781fc"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "56fbf83de4b07572ad1a88da"}, {"problem": 33, "code": "(fn [s n] (mapcat #(take n (repeat %)) s))\n#_(fn [s n] (mapcat (fn [i] (repeatedly n #(identity i))) s))", "user": "56585dbce4b0f9d632dd84b3"}, {"problem": 33, "code": "(fn [s n] (seq (reduce #(concat %1 (repeat n %2)) [] s)))", "user": "570459a9e4b0b0fb43fd0662"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "57023fc2e4b08d47c97781db"}, {"problem": 33, "code": "#(apply concat (map (fn [input] (repeat %2 input)) %1))", "user": "56ff0ef3e4b08d47c97781ba"}, {"problem": 33, "code": "(fn [s n]\n  (reduce #(concat % (repeat n %2)) '() s))", "user": "5701f886e4b08d47c97781d9"}, {"problem": 33, "code": "(fn [se n]\n  (apply concat (map #(repeat n %) se))\n  )", "user": "56c7d8dee4b0ed865f9758c9"}, {"problem": 33, "code": "(fn replicate_elements [coll x]\n  (mapcat #(repeat x %) coll))", "user": "5703d21ae4b08d47c97781ff"}, {"problem": 33, "code": "(fn replica [s, times]\n  (loop [result [], new-seq s]\n    (if (empty? new-seq)\n      result\n      (recur (concat result (loop [num-left times, el (first new-seq), res []]\n                       (if (= num-left 0)\n                         res\n                         (recur (dec num-left) el (conj res el))))\n                     ) (rest new-seq)) )))", "user": "57040195e4b08d47c9778202"}, {"problem": 33, "code": "(fn [s i] \n  (if-not (= 1 i)\n    (apply interleave (take i (repeat s)))\n    s))", "user": "54ac5ad7e4b09f271ff37cd6"}, {"problem": 33, "code": "(fn [coll n] (if (= 1 n) coll (apply interleave (repeat n coll))))", "user": "56fe665be4b08d47c97781af"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5576d3c7e4b05c286339e074"}, {"problem": 33, "code": "(fn [s,n]\n  (mapcat #(repeat n %)  s))", "user": "5707abfce4b0b0fb43fd068d"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "57090dffe4b0b0fb43fd06a6"}, {"problem": 33, "code": "(fn [x n] (mapcat #(take n (repeat %1)) x))", "user": "542fa0dde4b0dad94371f2d2"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "user": "536d24ece4b0fc7073fd6e54"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "567e6d24e4b0feffd0d18eb4"}, {"problem": 33, "code": "(fn rep [s n]\n  (mapcat #(repeat n %) s))", "user": "5703ce0fe4b08d47c97781fd"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "549eb44fe4b0f3d1d8e70fa6"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5708b96ce4b0b0fb43fd06a3"}, {"problem": 33, "code": "(fn [s i]\n  (if (< i 2)\n    s\n    (apply interleave (repeat i s))\n  )\n)", "user": "570006f1e4b08d47c97781c5"}, {"problem": 33, "code": "(fn replicate-seq [seq times] (loop [result [] the-seq seq] (if (empty? the-seq) result (recur (concat result (take times (repeat (first the-seq)))) (rest the-seq)))))", "user": "56fbcc1fe4b07572ad1a88d5"}, {"problem": 33, "code": "(fn [coll x]\n  (mapcat #(repeat x %)coll))", "user": "570243e2e4b08d47c97781dd"}, {"problem": 33, "code": "(fn [lst times]\n  (apply concat\n         (reduce (fn [result item]\n                   (into result (for [x (range times)]\n                                  (vector item))))\n                 []\n                 lst)))", "user": "570306cae4b08d47c97781ec"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "56ea8374e4b04a395b9a0404"}, {"problem": 33, "code": "#(loop[lst %1\n        acc %2\n        res '()]\n    (if (empty? lst)\n      res\n      (if (zero? acc)\n        (recur (rest lst) %2 res)\n        (recur lst (dec acc) (concat res (list (first lst)))))))", "user": "56acfee5e4b03c432f18734f"}, {"problem": 33, "code": "(fn [col x]\n  (mapcat #(repeat x %) col))", "user": "55ba70f9e4b01b9910ae29d4"}, {"problem": 33, "code": "(fn [col n]\n  (if (= n 1)\n   col\n   (apply interleave (repeat n col))))", "user": "54f5aa4ce4b0f2f3c5226e94"}, {"problem": 33, "code": "(fn\n    [a-seq replicator]\n    (loop [l-seq a-seq el (first l-seq) acc []]\n      (if (empty? l-seq)\n        acc\n        (recur (rest l-seq)\n               (first (rest l-seq))\n               (apply concat acc (repeat\n                                   replicator\n                                   (vector (first l-seq))))))))", "user": "56cb4d06e4b0ea9b8538f72e"}, {"problem": 33, "code": "(fn fooseqs [coll n] (->> coll (map #(repeat n %)) (apply concat)))", "user": "56fc0601e4b07572ad1a88db"}, {"problem": 33, "code": "(fn [x y](mapcat #(repeat y %) x))", "user": "56d439d4e4b0ea9b8538f7b6"}, {"problem": 33, "code": "(fn [x y] (mapcat (fn [e] (repeat y e)) x))", "user": "56b506d5e4b0982f16b37e2d"}, {"problem": 33, "code": "#(mapcat (partial repeat %2 ) %1)", "user": "56eb5c76e4b04a395b9a0422"}, {"problem": 33, "code": "(fn replicate-seq [sq n]\n  (let [s-n\n        (fn s-n [item n]\n          (loop [i n res '()]\n            (if (> i 0)\n              (recur (dec i) (conj res item))\n              res)))]\n    (reverse (reduce #(apply conj %1 (s-n %2 n))\n                     ()\n                     sq))))", "user": "5711ca24e4b09c608db7044b"}, {"problem": 33, "code": "(fn [v n]\n(loop [x (map #(repeat n %) v)  \n           r []]\n        (if (empty? x) r\n            (recur (rest x)\n                   (concat r (first x))))))", "user": "571077e8e4b09c608db70434"}, {"problem": 33, "code": "(fn [s n] (mapcat #(vec (repeat n %)) s))", "user": "5712854ce4b07c98581c3a89"}, {"problem": 33, "code": "#(->> (map (fn [x] (repeat %2 x)) %1)\n      (apply concat))", "user": "5711b532e4b09c608db70449"}, {"problem": 33, "code": "(fn [s n] \n  (apply concat \n         (for [i s]\n           (for [k (range n)]\n             i))))", "user": "56f51879e4b046a417f92069"}, {"problem": 33, "code": "(fn a [n m b c]\n\t(when (and (< n (count b)) (< m c)) \n\t\t(if(= m (- c 1))\n\t\t\t(into [] (cons (get b n) (a (+ n 1) 0 b c))) \n\t\t\t(into [] (cons (get b n) (a n (+ m 1) b c)))\n\t\t)\t\t\n\t)\n) 0 0", "user": "5710e574e4b09c608db7043b"}, {"problem": 33, "code": "(fn [x n] (reduce concat (map (partial repeat n) x)))", "user": "56eb3f9de4b04a395b9a0420"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(take n (repeat %)) xs))", "user": "56fa2905e4b07572ad1a88be"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce\n    (fn [a e]\n      (loop [result a i 0]\n        (if (>= i n)\n          result\n          (recur (cons e result) (+ i 1)))))\n    '()\n    (reverse coll)))", "user": "571107b3e4b09c608db7043f"}, {"problem": 33, "code": "(fn[c n](mapcat #(repeat n %)c))", "user": "4fa436dce4b081705acca19b"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5716845be4b07c98581c3afa"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "4fc4e9b5e4b081705acca352"}, {"problem": 33, "code": "#(reduce (fn [acc next] (concat acc (take %2 (repeat next)))) [] %1)", "user": "57155980e4b07c98581c3ad7"}, {"problem": 33, "code": "(fn [s n]\n  ((fn [s res]\n    (if (empty? s)\n      res\n      (let [e (first s)]\n        (recur (rest s) (concat res (repeat n e)))))) s '()))", "user": "5713c575e4b07c98581c3aab"}, {"problem": 33, "code": "#(mapcat (fn [x] (take %2 (repeat x))) %1)", "user": "57168db0e4b07c98581c3afc"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "570b421ee4b0b0fb43fd06be"}, {"problem": 33, "code": "(fn f\n  ([s t]\n   (f s t '()))\n  ([s t r]\n   (if (empty? s)\n     (reverse r)\n     (recur (rest s) t (into r (repeat t (first s)))))))", "user": "56ab7578e4b03c432f18733d"}, {"problem": 33, "code": "(fn newReplicate\n  [lista veces]\n  (if (> veces 1)\n    (apply interleave (repeat veces lista))\n    lista))", "user": "56fe2a2fe4b08d47c97781ad"}, {"problem": 33, "code": "(fn [arr n] (reduce concat ( map #(repeat n %) (seq arr))) )", "user": "57016724e4b08d47c97781d6"}, {"problem": 33, "code": "(fn [lst n] \n  (mapcat identity (map #(repeat n %) lst))\n  )", "user": "5713e307e4b07c98581c3aaf"}, {"problem": 33, "code": "(fn repeato\n  [coll n]\n  (loop [[x & xs] coll acc []]\n    (if x\n      (recur xs (concat acc (repeat n x)))\n      acc)))", "user": "56edf2dde4b04a395b9a044b"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "5714e82ae4b07c98581c3ac9"}, {"problem": 33, "code": "(fn ndup \n  ([l n] (ndup l n n))\n  ([l n cur]\n  (let [x (first l)\n        xs (rest l)]\n    (cond (nil? x) nil\n          (= cur 0) (ndup xs n n)\n          :otherwise (cons x (ndup l n (dec cur)))))))", "user": "5717ad6fe4b07c98581c3b14"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "540e97f9e4b0addc1aec671f"}, {"problem": 33, "code": "#(apply concat (map (fn [p] (for [i (range %2)] p)) %))", "user": "52ae886de4b0c58976d9acab"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "559d3d22e4b0ec2b359424da"}, {"problem": 33, "code": "#(let [rep (fn [x] (repeat %2 x))]\n   (mapcat rep %1))", "user": "570362ece4b08d47c97781f0"}, {"problem": 33, "code": "#(for [y %1, x (range %2)] y)", "user": "57015a1de4b08d47c97781d4"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(take n (repeat %)) coll))", "user": "571bc0a1e4b07c98581c3b6c"}, {"problem": 33, "code": "(fn [s nb] (mapcat #(repeat nb %) s))", "user": "5713f693e4b07c98581c3ab0"}, {"problem": 33, "code": "(fn [coll n] \n  (apply concat (map (fn [x] (repeat n x)) coll)))", "user": "571c2babe4b07c98581c3b73"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce concat (map #(repeat n %) coll)))", "user": "570794d8e4b0b0fb43fd068b"}, {"problem": 33, "code": "(fn [s n]\n  (if (= n 1)\n    s\n    (apply interleave (repeat n s))))", "user": "571d063ee4b0145328a76272"}, {"problem": 33, "code": "(fn repliceate-seq [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5712a404e4b07c98581c3a8d"}, {"problem": 33, "code": "(fn [a b] (reduce #(into %1 (take b (cycle [%2]))) [] a))", "user": "5717e367e4b07c98581c3b1d"}, {"problem": 33, "code": "#(loop [f () s %1]\n   (if (empty? s) \n    f\n    (recur (concat f (repeat %2 (first s))) (rest s))\n   ))", "user": "571ac0b8e4b07c98581c3b5b"}, {"problem": 33, "code": "(fn [coll n]\n    (mapcat #(take n (cycle (vector %))) coll))", "user": "563a79e5e4b0bfe05bf117fe"}, {"problem": 33, "code": "(fn [coll times] (apply concat (map #(repeat times %) coll)))", "user": "571cd9dce4b0145328a76271"}, {"problem": 33, "code": "(fn [lst n]\n(reverse (reduce #(apply conj %1 %2) '() (apply map vector (take n (repeat lst))))))", "user": "570e6974e4b0b0fb43fd06ef"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs ))", "user": "5719465fe4b07c98581c3b36"}, {"problem": 33, "code": "(fn [col n]\n  (if (= n 1)\n    col\n  \t(apply interleave (map (fn [_] col) (range 0 n)))))", "user": "571e5c9ee4b0145328a76290"}, {"problem": 33, "code": "(fn [a b] ( reduce #(concat %1 (repeatedly b (constantly %2))) [] a))", "user": "5717d674e4b07c98581c3b1a"}, {"problem": 33, "code": "#(if(= 1 %2 ) (reverse (into '() %1)) (apply interleave (repeat %2 %1)))", "user": "56f86f98e4b08e7d20b96837"}, {"problem": 33, "code": "#(apply concat (map (fn [x] (repeat %2 x)) %1))", "user": "571dd145e4b0145328a76283"}, {"problem": 33, "code": "(fn rep [c n]\n (if (= 1 n)\n   c\n   (apply interleave (repeat n c))))", "user": "54e345a1e4b024c67c0cf7db"}, {"problem": 33, "code": "(fn my-replicate \n  [s t]\n  (loop [e s\n         res []]\n    (if (nil? (first e))\n      res\n      (recur (rest e) (concat res (repeat t (first e))))                                                                                           \n      )\n    )\n  )", "user": "571b900ae4b07c98581c3b69"}, {"problem": 33, "code": "#(mapcat repeat (repeat %2) %1)", "user": "571aad45e4b07c98581c3b59"}, {"problem": 33, "code": "(fn my-replicate [items times]\n  (cond (empty? items) '()\n        :else (concat ((fn rep-loop [item times]\n    (cond (<= times 0) '()\n          :else (concat (list item) (rep-loop item (- times 1)))\n    )\n  ) (first items) times) (my-replicate (rest items) times))\n  )\n)", "user": "5716540fe4b07c98581c3af3"}, {"problem": 33, "code": "(fn [coll n]\n  (loop [in coll\n         out []]\n    (if (not (seq in))\n      out\n      (recur (rest in) (concat out (repeat n (first in)))))))", "user": "5713f874e4b07c98581c3ab1"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "56df63e1e4b0ca2494a095f6"}, {"problem": 33, "code": "(fn f [l n]\n  (cond\n   \t\t(empty? l) l\n   \t\t:else  (concat (repeat n (first l)) (f (rest l) n))\n   ))", "user": "56df6351e4b0ca2494a095f3"}, {"problem": 33, "code": "(fn\n  [lst n]\n  (reduce concat (map (fn [item] (repeat n item)) lst)))", "user": "56df6498e4b0ca2494a095f8"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(concat (repeat n %)) coll))", "user": "56df63c7e4b0ca2494a095f5"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "571e6d73e4b0145328a76292"}, {"problem": 33, "code": "(fn\n  [coll n]\n  (apply concat (map (fn [x] (repeat n x)) coll)))", "user": "5720a2b0e4b0c5bde472c099"}, {"problem": 33, "code": "(fn [a-seq n]\n    (mapcat #(repeat n %) a-seq))", "user": "567c63f6e4b05957ce8c61bb"}, {"problem": 33, "code": "(fn\n  [coll n]\n  (mapcat #(repeat n %) coll))", "user": "56df6417e4b0ca2494a095f7"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "56df629fe4b0ca2494a095ee"}, {"problem": 33, "code": "(fn [lst n]\n  (mapcat (fn [in] (repeat n in)) lst))", "user": "571ff1ebe4b0c5bde472c088"}, {"problem": 33, "code": "(fn [coll n] (apply concat (map #(into [] (take n (repeat %))) coll)))", "user": "57147cd9e4b07c98581c3abf"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "571e819ae4b0145328a76294"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5717bcffe4b07c98581c3b16"}, {"problem": 33, "code": "(fn [lst n]\n  (mapcat  #(repeat n %) lst  )\n  )", "user": "56e9a56ae4b04a395b9a03fc"}, {"problem": 33, "code": "(fn\n  [x y]\n  (reduce #(into %1 (for [i (range y)] %2)) [] x)\n  )", "user": "56de78fde4b0ea9b8538f83c"}, {"problem": 33, "code": "(fn [s n]\n  (reduce #(into %1 (repeat n %2)) [] s))", "user": "56c2c342e4b05cc29241ee85"}, {"problem": 33, "code": "(fn [coll r] (apply concat (map #(repeat r %) coll)))", "user": "4ff0e01fe4b0678c553fc328"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "4df73d64535d04ed9115e775"}, {"problem": 33, "code": "(fn [s x]\n  (mapcat #(repeat x %) s))", "user": "53716539e4b0fc7073fd6eb1"}, {"problem": 33, "code": "(fn replicates [coll replicates-count]\n  (apply concat\n   (map (fn [x] (take replicates-count (repeat x)))\n        coll)))", "user": "551bdefde4b07993ea3788d7"}, {"problem": 33, "code": "(fn [s r]\n  (reduce #(concat %1 (repeat r %2)) nil s))", "user": "5721dfc3e4b0c5bde472c0bb"}, {"problem": 33, "code": "(fn [seq num] (mapcat\n                 #(take num (cycle (list %)))\n                 seq))", "user": "5715b929e4b07c98581c3ae2"}, {"problem": 33, "code": "(fn replicate-seq [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5715b67fe4b07c98581c3ae1"}, {"problem": 33, "code": "(fn [vect n]\n  (reduce\n    (fn [v el]\n      (concat\n        (repeat n el)\n        v\n      )\n    )\n    '()\n    (reverse vect)\n  )\n)", "user": "5726adf8e4b0c5bde472c12b"}, {"problem": 33, "code": "(fn [a b] (mapcat #(repeat b %) a))", "user": "57201f14e4b0c5bde472c08e"}, {"problem": 33, "code": "(fn [x y] (reduce concat (map #(take y (repeat %)) x)))", "user": "57211a02e4b0c5bde472c0a9"}, {"problem": 33, "code": "(fn mul [l c]\n    (mapcat #(repeat c %) l)\n)", "user": "5720fc08e4b0c5bde472c0a3"}, {"problem": 33, "code": "(fn [s n] (mapcat #(take n (repeat %)) s))", "user": "5724a4dae4b0c5bde472c0fe"}, {"problem": 33, "code": "(fn [xs n]\n  (mapcat #(repeat n %) xs))", "user": "4f8490fae4b033992c121c34"}, {"problem": 33, "code": "(fn [coll n] (cond (= n 1) coll\n                   :else (apply interleave (take n (iterate identity coll)))))", "user": "5728d33ce4b0c6e51e0d2b12"}, {"problem": 33, "code": "(fn [lst times] (mapcat #(repeat times %) lst))", "user": "56df62b3e4b0ca2494a095ef"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "57283dbce4b0c5bde472c154"}, {"problem": 33, "code": "(fn [lst n]\n  (reduce (fn [acc v]\n            (concat acc (take n (repeat v))))\n          []\n          lst))", "user": "572722c4e4b0c5bde472c134"}, {"problem": 33, "code": "(fn dup [coll cnt]\n  (apply concat (map #(repeat cnt %) coll)))", "user": "57291a39e4b0c6e51e0d2b14"}, {"problem": 33, "code": "(fn \n  [s n] \n  (mapcat #(repeat n %) s))", "user": "54249bcce4b01498b1a71afb"}, {"problem": 33, "code": "(fn [se r] (mapcat #(repeat r %) se))", "user": "52afa8a1e4b0c58976d9acbe"}, {"problem": 33, "code": "(fn [seq n] (mapcat #(repeat n %) seq))", "user": "572a3d77e4b0f4d77e651230"}, {"problem": 33, "code": "(fn\n  [l n]\n  (loop [l l\n         res ()]\n    (if (empty? l) (reverse res)\n      (recur (rest l) (concat (repeat n (first l)) res)))))", "user": "56df636ae4b0ca2494a095f4"}, {"problem": 33, "code": "(fn [lst n] (mapcat #(repeat n %) lst))", "user": "57210e8ee4b0c5bde472c0a8"}, {"problem": 33, "code": "(fn \n  [lst n] \n  (mapcat #(concat (repeat n %)) lst))", "user": "56df7440e4b0ca2494a095fb"}, {"problem": 33, "code": "(fn replicateSeq [coll xtimes] (mapcat #(repeat xtimes %) coll))", "user": "57131dfbe4b07c98581c3a98"}, {"problem": 33, "code": "(fn o\n  [lst n]\n  (apply concat (map #(repeat n %) lst)))", "user": "5723e6d6e4b0c5bde472c0f1"}, {"problem": 33, "code": "(fn replicate-seq\n  [coll n]\n  (if (empty? coll)\n    '()\n    (into (replicate-seq (rest coll) n) (take n (repeat (first coll))))))", "user": "572db6d5e4b0cd1946bd0f78"}, {"problem": 33, "code": "(fn \n  [s n]\n  (reduce\n   (fn [rez el]\n     (into rez (repeat n el))) [] s))", "user": "56b2630be4b0982f16b37e03"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "564dc08ae4b0284900eef68f"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat #(repeat n %1) s))", "user": "572ea970e4b0cd1946bd0f89"}, {"problem": 33, "code": "(fn [l n]\n  (if (= 1 n)\n    l\n    (apply interleave (repeat n l))))", "user": "5703cb87e4b08d47c97781f9"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %1) c))", "user": "57213df6e4b0c5bde472c0ab"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "53829b28e4b06839e8705ed6"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "54b0519be4b09f271ff37d14"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "55c9ff22e4b0e31453f649f3"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "572ca54ae4b0cd1946bd0f59"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(replicate n %) coll))", "user": "57299c57e4b0c6e51e0d2b1e"}, {"problem": 33, "code": "#(apply concat (apply map vector (repeat %2 %)))", "user": "51a88e7fe4b08d8ec191b813"}, {"problem": 33, "code": "(fn [myseq n]\n  (apply concat(map #(take n (iterate identity %)) myseq )))", "user": "54ca9311e4b057c6fda3a263"}, {"problem": 33, "code": "(fn [sq n]\n    (reduce (fn [result item]\n              (apply conj result (take n (repeat item))))\n            []\n            sq\n            )\n    )", "user": "571a282ae4b07c98581c3b46"}, {"problem": 33, "code": "(fn replicate-seq [x y]\n  (mapcat #(repeat y %) x))", "user": "572a60cee4b0f4d77e651237"}, {"problem": 33, "code": "(fn [a b] ((partial mapcat #(take b (repeat %))) a))", "user": "573632b7e4b0cd1946bd102f"}, {"problem": 33, "code": "(fn [lst n] (apply concat (map #(repeat n %) lst)))", "user": "5733e4aee4b0cd1946bd0ffe"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "573652e1e4b0cd1946bd1030"}, {"problem": 33, "code": "(fn [y n] ((fn [x] (mapcat #(repeat n %) x)) y))", "user": "570eeb66e4b0b0fb43fd06fa"}, {"problem": 33, "code": ";; #33\n(fn [coll n]\n  (loop [current []\n         remaining-coll coll]\n    (if (empty? remaining-coll)\n      (seq current)\n      (let [curr (first remaining-coll)]\n        (recur (concat current (repeat n curr)) (rest remaining-coll))))))", "user": "55f5b8d6e4b06e875b46ce8d"}, {"problem": 33, "code": "(fn [x y] \n  (mapcat (partial replicate y) x\n   )\n)", "user": "56e6e1e6e4b02e7e935eb6cf"}, {"problem": 33, "code": "(fn [x rep]\n  (loop [coll x result []]\n    (if (empty? coll)\n      result\n      (recur (rest coll) (concat result (repeat rep (first coll)))))))", "user": "57344edbe4b0cd1946bd1008"}, {"problem": 33, "code": "#(if (= %2 1)\n   %1\n   (apply interleave (take %2 (repeat %1)))   \n   )", "user": "56e30cefe4b03a7c14b85a3d"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "56ff45e5e4b08d47c97781bb"}, {"problem": 33, "code": "(fn [seq n] (mapcat #(take n (repeat %)) seq))", "user": "573107d5e4b0cd1946bd0fbc"}, {"problem": 33, "code": "(fn my-fun [seq-in num-times] (reduce #(concat %1 (take num-times (repeat %2))) '() seq-in))", "user": "571d9669e4b0145328a7627f"}, {"problem": 33, "code": "(fn repit [s n]\n  (loop [in s, m n out nil]\n      (if (empty? in)\n      out\n      (recur \n        ; new input\n        (rest in)\n        m \n        ; pass in current output\n        (let [c (first in)] \n        (concat out (take m (cycle [c])))\n        )\n        ) \n      )\n  )\n)", "user": "571aae1fe4b07c98581c3b5a"}, {"problem": 33, "code": "(fn [in n]\n (mapcat (fn [i] (take n (iterate   #(or % % )  i) ) )  in)\n  )", "user": "5735ac67e4b0cd1946bd102b"}, {"problem": 33, "code": "(fn f [s n]\n  (let [f*\n        (fn [acc s*]\n          (concat acc (repeat n s*)))]\n    (reduce f* [] s)))", "user": "572a500fe4b0f4d77e651233"}, {"problem": 33, "code": "(fn [l c]\n  (apply concat\n    (map \n       #(repeat c %)\n       l)\n   )\n  )", "user": "5739cbe4e4b0cd1946bd107c"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "573ce277e4b05c31a32c080b"}, {"problem": 33, "code": "#(mapcat identity (for [x %1] (repeat %2 x)))", "user": "573b8f67e4b0cd1946bd10ae"}, {"problem": 33, "code": "(fn [values iterations] (reduce concat (map #(take iterations (repeat %)) values)))", "user": "57261810e4b0c5bde472c11c"}, {"problem": 33, "code": "#(if (= %2 1) % (apply interleave (repeat %2 %)))", "user": "55c3f19de4b0e31453f64991"}, {"problem": 33, "code": "#(if (= %2 1) (seq %1) (apply interleave (repeat %2 %1)))", "user": "56c26880e4b05cc29241ee81"}, {"problem": 33, "code": "(fn replicate [coll times] \n  (if (empty? coll)\n    '()\n    (concat \n      (repeat times (first coll))\n      (replicate (rest coll) times))))", "user": "573118ebe4b0cd1946bd0fbd"}, {"problem": 33, "code": "(fn [x y]\n  (mapcat #(repeat y %) x))", "user": "5705e404e4b0b0fb43fd0676"}, {"problem": 33, "code": "(fn [arr n] (apply concat (map #(repeat n %) arr)))", "user": "573b664ce4b0cd1946bd10a7"}, {"problem": 33, "code": "(fn [list val-repeat]\n      (reduce #(concat %1 (repeat val-repeat %2))\n              []\n              list))", "user": "57280b92e4b0c5bde472c14e"}, {"problem": 33, "code": "#(mapcat (fn [e] (repeat %2 e)) %1)", "user": "56a9d4bbe4b07966d5a8a07b"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(take n (repeat %)) coll))", "user": "57300c19e4b0cd1946bd0fa1"}, {"problem": 33, "code": "(fn mult-each-el [coll n] (mapcat #(repeat n %1) coll))", "user": "561814bae4b06b1bb2182a1a"}, {"problem": 33, "code": ";#(apply concat (map (partial repeat %2) %1))\n#(mapcat (partial repeat %2) %1)", "user": "57407ab3e4b05c31a32c0854"}, {"problem": 33, "code": "(fn [seq reps] (for [j seq e (repeat reps j)] e))", "user": "572ac718e4b0f4d77e651242"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "519d2a0be4b037b32803f9ae"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "570ab24fe4b0b0fb43fd06b7"}, {"problem": 33, "code": "#(if (> %2 1) \n   (apply interleave (repeat %2 %1))\n   %1)", "user": "5684c439e4b04eec3ec5cfc1"}, {"problem": 33, "code": "(fn rep [s c]\n  (mapcat #(take c (repeat %)) s))", "user": "573f3ccfe4b05c31a32c083f"}, {"problem": 33, "code": "(fn [coll times]\n  (reduce (fn [acc x] (concat acc (repeat times x))) `() coll))", "user": "57434103e4b0c285004e8a9e"}, {"problem": 33, "code": "(fn [col freq] (reduce concat (map (partial repeat freq) col)))", "user": "523acf7be4b0aa37f082ed90"}, {"problem": 33, "code": "(fn [x n]\n  (reduce\n   (fn [y z] (concat y (repeat n z)))\n   (empty x)\n   x))", "user": "57458b82e4b009280f9f2b4e"}, {"problem": 33, "code": "(fn [coll n] (mapcat (partial repeat n) coll) )", "user": "57434339e4b0c285004e8a9f"}, {"problem": 33, "code": "(fn [coll n] (if (= n 1) coll (apply interleave (repeat n coll))))", "user": "573940e3e4b0cd1946bd106b"}, {"problem": 33, "code": "#(if (= %2 1) %1 \n   (apply interleave (repeat %2 %1)))", "user": "5745b884e4b009280f9f2b53"}, {"problem": 33, "code": "(fn[coll n]\n  (mapcat #(repeat n %) coll))", "user": "52dda39fe4b09f7907dd13e7"}, {"problem": 33, "code": "#(mapcat identity (map (fn [x] (vec (replicate %2 x))) %1))", "user": "57440f77e4b0c285004e8ab5"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "573ddfc2e4b05c31a32c081b"}, {"problem": 33, "code": "(fn[originalSeq n] (reduce ( fn[a b] (loop [ns a item b cnt n] (if (= 0 cnt) ns (recur (conj ns item) item (dec cnt))))) [] originalSeq))", "user": "571172ece4b09c608db70446"}, {"problem": 33, "code": "(fn [xs, n] (mapcat #(repeat n %) xs))", "user": "574311a5e4b05c31a32c0888"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5746d767e4b009280f9f2b6b"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "51647faae4b003cf19fdde3b"}, {"problem": 33, "code": "(fn [xs n] (mapcat (partial repeat n) xs))", "user": "5372e7d9e4b06d7f452d9e02"}, {"problem": 33, "code": "#(\n  if (= 1 %2)\n    %\n  (apply interleave (reduce (fn [acc i]\n                              (conj acc %)\n                              )\n                            []\n                            (range %2)\n                           ) ))", "user": "53da059be4b0e771c302547e"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "574977cbe4b009280f9f2b9b"}, {"problem": 33, "code": "(fn [a x]\n  (let [n (count a)]\n   (map\n    #(nth a (quot % x))\n    (range (* x n))\n   )))", "user": "5744723ae4b009280f9f2b3a"}, {"problem": 33, "code": "(fn [s n] (apply concat (map (fn [x] (repeat n x)) s)))", "user": "573c813be4b0cd1946bd10c5"}, {"problem": 33, "code": "(fn\n  [x n]\n  (reduce concat (map #(repeat n %)x)))", "user": "57061d20e4b0b0fb43fd0679"}, {"problem": 33, "code": "(fn [s n]\n    (reduce #(concat %1 (repeat n %2)) [] s))", "user": "56a94562e4b07966d5a8a074"}, {"problem": 33, "code": "(fn flatrep [xs n] (mapcat #(repeat n %1) xs))", "user": "4e7e8485535db169f9c79716"}, {"problem": 33, "code": "(fn [coll n] \n  (reduce #(into %1 (repeat n %2)) [] coll))", "user": "553e3260e4b0a04f792994eb"}, {"problem": 33, "code": "(fn rep [c n]\n  (letfn [(repeat [e n]\n            (loop [i n\n                   es []]\n              (if (zero? i)\n                  es\n                  (recur (dec i) (conj es e)))))]\n    (if (empty? c)\n        (empty c)\n        (concat (repeat (first c) n)\n                (rep (rest c) n)))))", "user": "574c3a7ce4b02ea114799219"}, {"problem": 33, "code": "(fn f [s n]\n  (let [f*\n        (fn [acc s*]\n          (concat acc (repeat n s*)))]\n    (reduce f* [] s)))", "user": "574af03ce4b02ea114799202"}, {"problem": 33, "code": "(fn repliCateSeq [sequence times]\n  (loop [result (list) sequence sequence times times]\n        (if (empty? sequence) result\n        (recur (concat result (take times (repeat (first sequence)))) (rest sequence) times))))", "user": "57465526e4b009280f9f2b61"}, {"problem": 33, "code": "(fn \n  [xs n]\n  (mapcat #(repeat n %) xs))", "user": "57275898e4b0c5bde472c13e"}, {"problem": 33, "code": "(fn [coll x]\n  (mapcat #(take x (repeat %)) coll))", "user": "572a856be4b0f4d77e65123b"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "user": "55c4cda5e4b0e31453f649a5"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(concat (repeat n %)) coll))", "user": "57488966e4b009280f9f2b8d"}, {"problem": 33, "code": "(fn foo [[fst & rst] x] (concat (repeat x fst) (if (empty? rst) nil (foo rst x))))", "user": "5747e22ce4b009280f9f2b7c"}, {"problem": 33, "code": "(fn [coll n]\n  (if (= 1 n)\n    coll\n    (apply interleave (repeat n coll))))", "user": "56f006f4e4b04a395b9a046a"}, {"problem": 33, "code": "(fn [seq number]\n   (mapcat identity (map #(repeat number %) seq)))", "user": "572b73d0e4b0cd1946bd0f3a"}, {"problem": 33, "code": "(fn [x, n] (reduce concat (map #(take n (repeat %)) x)))", "user": "574c66e1e4b02ea11479921d"}, {"problem": 33, "code": "(fn [v n] (mapcat #(repeat n %) v))", "user": "57408f87e4b05c31a32c0856"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "574dfcb8e4b02ea11479923a"}, {"problem": 33, "code": "(fn [coll multiple] (mapcat #(repeat multiple %) coll))", "user": "52cbe5dfe4b07d0d72b27352"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "56bb652ae4b0f26550335953"}, {"problem": 33, "code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "user": "574a9132e4b02ea1147991fd"}, {"problem": 33, "code": "(fn my-replicate\n  ([l n] (my-replicate l n []))\n  ([l n resp]\n   (if (= l [])\n     resp\n     (my-replicate (rest l) n (apply conj resp (repeat n (first l)))))))", "user": "574f1c24e4b02ea114799255"}, {"problem": 33, "code": "(fn [s rep]\n  (reduce \n    (fn [r e]\n      (into r (repeat rep e)))\n    [] s))", "user": "574e7be7e4b02ea114799242"}, {"problem": 33, "code": "(fn [s c]\n    (mapcat #(repeat c %) s))", "user": "52e1c276e4b09f7907dd142b"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5744e1a2e4b009280f9f2b43"}, {"problem": 33, "code": "(fn replicate-each-item [col n-times]\n  (mapcat #(repeat n-times %1) col))", "user": "5740e26ee4b05c31a32c085a"}, {"problem": 33, "code": "#(\n   mapcat (partial repeat %2) %\n )", "user": "5743e316e4b0c285004e8ab3"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "57297fb2e4b0c6e51e0d2b1c"}, {"problem": 33, "code": "(fn [coll n]\n   (mapcat #(repeat n %) coll))\n\n;(fn [coll  n]\n;   (mapcat #(take n (iterate identity %)) coll))", "user": "572830e6e4b0c5bde472c152"}, {"problem": 33, "code": "(fn [s n] (reduce #(concat % (repeat n %2)) [] s))", "user": "572ec4dde4b0cd1946bd0f8d"}, {"problem": 33, "code": "(fn [coll n] (for [i (range 0 (count coll)) \n                   t (range 0 n)\n                   :let [v (nth coll i)]]\n               v))", "user": "5744d088e4b009280f9f2b41"}, {"problem": 33, "code": "#(mapcat (partial take %2) (map repeat %1))", "user": "57533bc1e4b02ea1147992a6"}, {"problem": 33, "code": "(fn [col n] \n  (reduce\n    #(into \n      %1\n      (take n\n        (repeat %2))) \n    [] col))", "user": "574c5e18e4b02ea11479921b"}, {"problem": 33, "code": "#(apply (partial mapcat list) (repeat %2 %1))", "user": "57539e04e4b02ea1147992ab"}, {"problem": 33, "code": "(fn [coll n]\n                 (apply concat\n                  (map #(repeat n %) coll)))", "user": "574ef99ae4b02ea114799250"}, {"problem": 33, "code": "(fn [c r] (loop [col c\n                 rep r\n                 res []]\n            (if (= (first col) nil)\n           \t  res\n              (recur (rest col) rep (concat res (take r (repeat (first col))))))))", "user": "5753b6c6e4b02ea1147992af"}, {"problem": 33, "code": "#(if (= %2 1)\n   %1\n   (apply interleave (repeat %2 %1)))", "user": "56cd75bee4b0ea9b8538f74b"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "574ef641e4b02ea11479924f"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "53ff602fe4b0de5c418485ff"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1 )", "user": "5756f7d7e4b02ea1147992e9"}, {"problem": 33, "code": "(fn dupl ([x num]\n (dupl x num num)\n )\n  ([x num decr]\n   (lazy-seq\n    (when-let [s (seq x)]\n      (if (= decr 0)\n        (dupl (rest s) num num)\n        (cons (first s) (dupl s num (dec decr))))))))", "user": "574ed2f7e4b02ea11479924a"}, {"problem": 33, "code": "(fn [coll x] (mapcat #(repeat x %) coll))", "user": "5751f2a2e4b02ea114799292"}, {"problem": 33, "code": "(fn [xs n]\n  (mapcat #(repeat n %) xs))", "user": "57487084e4b009280f9f2b8c"}, {"problem": 33, "code": "(fn [x y]\n  (mapcat #(repeat y %) x))", "user": "5757ba87e4b02ea1147992f9"}, {"problem": 33, "code": "( fn repl [ coll n ]\n  ( mapcat #( repeat n % ) coll )\n)", "user": "57561529e4b02ea1147992d3"}, {"problem": 33, "code": "#(reduce concat (map (fn[x] (repeat %2 x)) %1))", "user": "54283a7ae4b01498b1a71b2f"}, {"problem": 33, "code": "(fn replicate-seq [coll n]\n  (mapcat #(repeat n %) coll))", "user": "535558b9e4b04ce2eb3ed25a"}, {"problem": 33, "code": "(fn [col n] \n  (mapcat #(repeat n %) col))", "user": "5745bb9fe4b009280f9f2b54"}, {"problem": 33, "code": "(fn rep-seq [coll n] (mapcat #(repeat n %) coll))", "user": "570bd29be4b0b0fb43fd06c5"}, {"problem": 33, "code": "(fn rep-seq\n  [s n]\n  (loop [result [] d s]\n    (if (empty? d)\n      (seq result)\n      (recur (concat result (take n (repeat (first d)))) (rest d)))))", "user": "5746cb28e4b009280f9f2b68"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "56b97792e4b0f26550335932"}, {"problem": 33, "code": "(fn [seq n]\n  (loop [s seq r []]\n    (if (empty? s)\n      r\n      (recur (rest s) (apply conj r (repeat n (first s)))))))", "user": "57462a4de4b009280f9f2b5d"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "575cbe44e4b02ea114799374"}, {"problem": 33, "code": "(fn [coll n]\n  (loop [k coll r []]\n    (if (nil? k)\n       r\n      (recur (next k) (into r (repeat n (first k)))))))", "user": "574abbfbe4b02ea114799200"}, {"problem": 33, "code": "(fn replicate [s n]\n  (if (empty? s) \n   nil\n   (concat \n     (repeat n (first s))\n     (replicate (rest s) n))))", "user": "57501de0e4b02ea11479926c"}, {"problem": 33, "code": "(fn [coll times]\n  (mapcat #(repeat times %) coll))", "user": "55096255e4b06e50f9beb116"}, {"problem": 33, "code": "(fn [m x] (mapcat #(repeat x %) m))", "user": "5739c2fee4b0cd1946bd107a"}, {"problem": 33, "code": "(fn [v n]\n  (loop [x [], y v]\n    (if (= y [])\n      x\n      (recur (into x (repeat n (first y))) (rest y)))))", "user": "5756efc3e4b02ea1147992e6"}, {"problem": 33, "code": "#(loop [arg1 %1 arg2 %2 acc ()] (if-let [arg3 (first arg1)] (recur (rest arg1) arg2 \n                                                                   (apply conj acc \n                                                                          (take arg2 (repeat arg2 arg3)))) (reverse acc)))", "user": "5720ba36e4b0c5bde472c09c"}, {"problem": 33, "code": "(fn ras[s n]\n  (if (empty? s)\n    '()\n    (concat (repeat n (first s)) (ras (rest s) n))))", "user": "5731e36be4b0cd1946bd0fc9"}, {"problem": 33, "code": "(fn [coll n] (mapcat (partial repeat n) coll))", "user": "575ef4b6e4b08062f99a4e78"}, {"problem": 33, "code": "(fn [x y]\n  (mapcat identity (for [n x]\n    (repeat y n))))", "user": "5710b136e4b09c608db70437"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "575fbe58e4b08062f99a4e87"}, {"problem": 33, "code": "(fn [v n] (apply concat (map #(repeat n %) v)))", "user": "57609d91e4b08062f99a4e9b"}, {"problem": 33, "code": "(fn [x n]\n  (apply concat (map #(take n (repeat %)) x)))", "user": "5755e66ee4b02ea1147992cf"}, {"problem": 33, "code": "(fn f [arr n] \n  (if (empty? arr)\n    '()\n    (concat ((fn g [x i] \n              (if (= i 0) \n                '()\n                (conj (g x (dec i)) x)))\n              (first arr) n)\n            (f (rest arr) n))))", "user": "57501c83e4b02ea11479926b"}, {"problem": 33, "code": "(fn [coll times]\n   (loop [[x & xs :as coll] coll\n          acc []]\n     (if (empty? coll) acc\n         (recur xs (concat acc (repeat times x))))))", "user": "55fbc657e4b0f488688e0666"}, {"problem": 33, "code": "#(reduce concat (map (fn [x] (repeat %2 x)) %1))", "user": "574e8975e4b02ea114799244"}, {"problem": 33, "code": "(fn foo [x y]\n\t\t\t\t(if (empty? x)\n\t\t\t\t\t\t\t\tx\n\t\t\t\t\t\t\t\t(concat\n\t\t\t\t\t\t\t\t\t\t\t\t(repeat y (first x))\n\t\t\t\t\t\t\t\t\t\t\t\t(foo (next x) y)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t)\n)", "user": "575dda55e4b02ea11479938c"}, {"problem": 33, "code": "(fn thirty-three [coll n]\n  (mapcat #(repeat n %) coll))", "user": "57607706e4b08062f99a4e97"}, {"problem": 33, "code": "(fn [col, x] (mapcat identity (map #(->> (range x) (map (fn [a] %))) col)))", "user": "57597fade4b02ea11479931d"}, {"problem": 33, "code": "#(apply mapcat (comp identity vector) (take %2 (repeat %1)))", "user": "574a546ee4b02ea1147991f6"}, {"problem": 33, "code": "(fn replicator [coll n]\n  (reduce (fn [default each] (concat default (repeat n each))) [] coll))", "user": "57606cfde4b08062f99a4e95"}, {"problem": 33, "code": "(fn [s n] (apply concat (map (partial repeat n) s)))", "user": "5761a772e4b0994c1922fb95"}, {"problem": 33, "code": "#(mapcat (fn [el] (repeat %2 el)) %1)", "user": "57642916e4b0994c1922fbee"}, {"problem": 33, "code": "(fn [q n] \n  (let [f* (fn [acc s*] \n      (concat acc (repeat n s*)))\n      ]\n    (reduce f* [] q)))", "user": "571edeeae4b0145328a7629b"}, {"problem": 33, "code": "(fn [l n] (apply concat (map #(repeat n %) l)))", "user": "57625c18e4b0994c1922fba4"}, {"problem": 33, "code": "(fn [x times] \n  (->> x\n       (map (fn [elt] (repeat times elt)))\n       (apply concat)))", "user": "57614948e4b0994c1922fb83"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "57599ed3e4b02ea114799323"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "57644395e4b0994c1922fbf2"}, {"problem": 33, "code": "#(reduce \n  (fn [accum x] \n    (into accum (repeat %2 x))) \n  [] %1)", "user": "5764cc01e4b0994c1922fc05"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "575b3e9be4b02ea11479935b"}, {"problem": 33, "code": "(fn [c r] (apply concat (map #(repeat r %) c)))", "user": "5742ec91e4b05c31a32c0883"}, {"problem": 33, "code": "(fn [c i] (mapcat #(repeat i %) c))", "user": "5763fa69e4b0994c1922fbe0"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce\n   (fn [result current]\n     (into result\n           (take n (repeat current))))\n   []\n   coll))", "user": "52ea025ae4b09f7907dd14b5"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5764457ae4b0994c1922fbf3"}, {"problem": 33, "code": "(fn [coll n] (apply concat (map #(repeat n %) coll)))", "user": "576844cde4b0a07e8fc180ce"}, {"problem": 33, "code": "#(loop [a %1 c %2 r '()]\n     (if (empty? a)\n       r\n       (recur \n        (rest a) c (concat r (repeat c (first a))))))", "user": "5763818ae4b0994c1922fbc7"}, {"problem": 33, "code": "(fn [col n] (mapcat #(repeat n %) col))", "user": "562eeba2e4b0ab312c17ebc1"}, {"problem": 33, "code": "(fn rep-elts [x n]\n  (mapcat (fn [y] (take n (iterate identity y))) x))", "user": "576000fce4b08062f99a4e8b"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "56f974c0e4b07572ad1a88b1"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "575d16f8e4b02ea114799377"}, {"problem": 33, "code": "(fn [coll n] (reduce #(concat %1 (repeat n %2)) '() coll))", "user": "5756f324e4b02ea1147992e8"}, {"problem": 33, "code": "(fn rep [l n]\n  (loop [index 0\n         result '()]\n    (if (= index (count l))\n      (reverse result)\n      (recur (inc index) (into result (repeat n (nth l index)))))))", "user": "5761724de4b0994c1922fb89"}, {"problem": 33, "code": "(fn [col n] (reduce #(concat %1 (repeat n %2)) [] col))", "user": "57650419e4b0994c1922fc09"}, {"problem": 33, "code": "#(mapcat (fn [a b] (repeat b a)) %1 (repeat (count %1) %2))", "user": "576a987be4b0a07e8fc1811b"}, {"problem": 33, "code": "(fn[coll n] (reduce #(concat % (repeat n %2)) '() coll ) )", "user": "575bd5f9e4b02ea114799365"}, {"problem": 33, "code": "(fn [s n] (mapcat (partial repeat n) s))", "user": "576da825e4b0979f8965156c"}, {"problem": 33, "code": "(fn multiply [s multiplier]\n  (loop\n    [acc '()\n     element (first s)\n     rest-of-collection s\n     rest-of-multiplier multiplier]\n\n    (cond\n      (empty? rest-of-collection) (reverse acc)\n      (= rest-of-multiplier 0) (recur acc (first (rest rest-of-collection)) (rest rest-of-collection) multiplier)\n      (> rest-of-multiplier 0) (recur (conj acc element) element rest-of-collection (dec rest-of-multiplier))\n      )\n    )\n  )", "user": "576d24ede4b0979f8965155b"}, {"problem": 33, "code": "#(apply concat (apply map vector (repeat %2 %)))", "user": "56d91a53e4b0ea9b8538f7ee"}, {"problem": 33, "code": "(fn [coll rep-cnt]\n  (loop [coll coll ret '()]\n    (if (empty? coll)\n       (reverse ret)\n       (recur (rest coll) (into ret (repeat rep-cnt (first coll)))))))", "user": "57202eb7e4b0c5bde472c090"}, {"problem": 33, "code": "(fn [c x] (reduce concat (map #(take x (iterate identity %)) c)))", "user": "575fec91e4b08062f99a4e89"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "576e3258e4b0979f89651574"}, {"problem": 33, "code": "(fn [values n] (mapcat #(repeat n %) values))", "user": "56d902c3e4b0ea9b8538f7ed"}, {"problem": 33, "code": "(fn [xs n]\n   (mapcat #(vec (repeat n %)) xs))\n\n;; in clojure 1.6+ this also works:\n;; #(apply interleave (repeat %2 %1))", "user": "5454bb07e4b0e397800069da"}, {"problem": 33, "code": "#(apply concat (map (fn [x](repeat %2 x)) %1))", "user": "57720e85e4b0979f896515c1"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "55cb11e9e4b0e31453f649ff"}, {"problem": 33, "code": "(fn [coll n] (reduce concat (map #(repeat n %) coll)))", "user": "576b4e6be4b0a07e8fc1812b"}, {"problem": 33, "code": "(fn [v t]\n (reduce concat (map #(repeat t %) v)))", "user": "50c95c4fe4b0bed41a12298f"}, {"problem": 33, "code": "(fn [l n] (for [x l d (repeat n x)] d))", "user": "577202d2e4b0979f896515c0"}, {"problem": 33, "code": "(fn [coll n]\n      (->> coll\n         (map #(vec (repeat n %)))\n         (reduce #(reduce conj %1 %2))\n         (into '())\n         reverse\n         ))", "user": "57227f10e4b0c5bde472c0cd"}, {"problem": 33, "code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "user": "576a8d02e4b0a07e8fc18117"}, {"problem": 33, "code": "(fn [coll n] (apply concat (apply map list (repeatedly n (constantly coll)))))", "user": "50c99e3ee4b0bed41a122997"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "57763002e4b0979f89651631"}, {"problem": 33, "code": "(fn [l n] (reduce #(concat %1 (repeat n %2)) [] l))", "user": "57762befe4b0979f8965162f"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce (fn [acc curr]\n            (concat acc (take n (repeat curr)))) [] coll))", "user": "576a972ce4b0a07e8fc1811a"}, {"problem": 33, "code": "(fn\n  [seq n]\n  (loop [seq seq list '()]\n    (if (= nil (first seq))\n       list\n      (recur (rest seq) (concat list (repeat n (first seq)) ))\n     )\n    ))", "user": "5772ddb0e4b0979f896515d4"}, {"problem": 33, "code": "(fn repl [coll n]\n  (reduce #(concat %1 %2) [] (map #(repeat n %) coll)))", "user": "5776e21de4b0979f89651642"}, {"problem": 33, "code": "(fn [coll times] (mapcat #(repeat times %) coll))", "user": "5777cffae4b0979f89651651"}, {"problem": 33, "code": "(fn [x y]\n  (loop [tmp x result []]\n    (if (empty? tmp)\n      result\n      (recur \n       (rest tmp)\n       (concat result (repeat y (first tmp)))\n       )\n      )\n    )\n  )", "user": "57750460e4b0979f8965160c"}, {"problem": 33, "code": "(fn [s n]\n   (let [ndup (fn [s n cnt acc]\n                (if (empty? s) (reverse acc)\n                  (if (= cnt 0) (recur (rest s) n n acc)\n                    (recur s n (dec cnt) (cons (first s) acc)))))]\n     (ndup s n n '())))", "user": "57780e4fe4b0979f89651657"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "577629abe4b0979f8965162e"}, {"problem": 33, "code": "(fn [arg n] (->> arg\n       (map (partial repeat n))\n       (reduce concat '())))", "user": "577829f9e4b0979f8965165a"}, {"problem": 33, "code": "(fn[s n] (mapcat #(repeat n %) s))", "user": "5778b78be4b0979f89651666"}, {"problem": 33, "code": "#(apply concat (map (fn [x] (repeat %2 x)) %1))", "user": "577a8049e4b0d3393e5deafc"}, {"problem": 33, "code": "#(loop [i %1 replic %2 result []]\n                 (if (empty? i)\n                   result\n                   (recur (rest i) replic (concat result (take replic (repeat (first i))))))\n                 )", "user": "560c37b5e4b05f002753df2e"}, {"problem": 33, "code": "#(mapcat (fn [input] (repeat %2 input)) %1)", "user": "56c5db15e4b05cc29241eeac"}, {"problem": 33, "code": "(fn [xs n] (apply concat (map #(repeat n %) xs)))", "user": "577abecfe4b0d3393e5deb06"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "51319a53e4b06942423563c8"}, {"problem": 33, "code": "(fn [x y]\n  (loop [new-list [] cnt 0 at 0]\n    (if (= (count x) cnt)\n      new-list\n      (if (= at y)\n        (recur new-list (inc cnt) 0)\n        (recur (conj new-list (nth x cnt)) cnt (inc at))\n        ))))", "user": "5756e218e4b02ea1147992e5"}, {"problem": 33, "code": "(fn [coll cnt] \n  (reduce #(into %1 (take cnt (repeat %2)))   [] coll))", "user": "577c3da9e4b0c8d87281f6b9"}, {"problem": 33, "code": "(fn [s k]\n\t(letfn [(foo [x n] \n\t\t\t\t\t\t(loop [i 0 res []]\n\t\t\t\t\t\t\t(if (= i n)\n\t\t\t\t\t\t\t\tres\n\t\t\t\t\t\t\t\t(recur (inc i) (conj res x)))))] \n\t\t\t\t\t(reduce #(concat %1 (foo %2 k)) [] s)))", "user": "577d3feee4b0c8d87281f6d2"}, {"problem": 33, "code": "#(loop [a %1 r []]\n   (if (empty? a)\n     r\n     (recur (rest a) (into r (repeat %2 (first a))))))", "user": "571346c0e4b07c98581c3a9b"}, {"problem": 33, "code": "(fn rr[x n]\n  (mapcat #(repeat n %) x))", "user": "548f3ed8e4b0e286459a1236"}, {"problem": 33, "code": "(fn [coll x]\n  (reduce #(concat % (take x (repeat %2 )) )  (vector) coll)\n  )", "user": "5776558ee4b0979f89651633"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat #(take n %)\n       (map repeat s)))", "user": "5776f39de4b0979f89651643"}, {"problem": 33, "code": "#(mapcat(partial repeat %2)%1)", "user": "5761513fe4b0994c1922fb87"}, {"problem": 33, "code": "(fn [col n] (apply concat (map #(repeat n %) col)))", "user": "577f635be4b0d36ec5835e64"}, {"problem": 33, "code": "(fn [col i] (mapcat #(repeat i %) col))", "user": "56c560ede4b05cc29241eea6"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(take n (repeat %)) coll))", "user": "56f6e541e4b08e7d20b9682a"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "user": "57822efce4b0d36ec5835e91"}, {"problem": 33, "code": "(fn replicate-n [v n]\n  (list* (loop [result []\n         index v]\n    (if (empty? index)\n      result\n      (recur\n       (into result (take n (repeat (first index))))\n       (rest index)\n       )))))\n;; seems very inefficient", "user": "5674607ae4b05957ce8c6137"}, {"problem": 33, "code": "(fn replicate-seq [coll n]\n  (mapcat #(repeat n %) coll))", "user": "577bfef9e4b0d3393e5deb2d"}, {"problem": 33, "code": "(fn f [s n]\n (let [f*\n       (fn [acc s*] (concat acc (repeat n s*)))]\n  (reduce f* [] s)))", "user": "5783c859e4b0ebec4cfb74bd"}, {"problem": 33, "code": "(fn[l n] (apply concat \n                (map #(take n \n                            (iterate identity %)) \n                     l) ))", "user": "577e54bbe4b0c8d87281f6e5"}, {"problem": 33, "code": "#(if (= 1 %2) %1 (apply interleave (repeat %2 %1)))", "user": "576df252e4b0979f8965156f"}, {"problem": 33, "code": "(fn [s times] (reduce concat (map #(repeat times %) s)))", "user": "5784ec65e4b0ebec4cfb74d1"}, {"problem": 33, "code": "(fn [coll n]\n  (for [c coll\n        i (range n)]\n    c))", "user": "577f0b0ee4b0c8d87281f6f3"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "5776385fe4b0979f89651632"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %1) xs))", "user": "5785de31e4b0ebec4cfb74e4"}, {"problem": 33, "code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "user": "575e71a2e4b0846ea39baf26"}, {"problem": 33, "code": "(fn replicate [coll n]\n    (mapcat #(repeat n %) coll))", "user": "4dfe5a93535d04ed9115e786"}, {"problem": 33, "code": "(fn [coll index]\n  \n\t(mapcat (fn [x] (repeat index x)) coll )  \n  \n  )", "user": "5785de43e4b0ebec4cfb74e5"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5785de71e4b0ebec4cfb74e7"}, {"problem": 33, "code": "(fn [x n] (mapcat #(repeat n %) x))", "user": "566e3af2e4b0a866af6896d5"}, {"problem": 33, "code": "(fn rep [in n]\n  (loop [xs in\n         acc []]\n    (if (empty? xs)\n      (apply concat acc)\n      (recur (rest xs) \n              (conj acc (repeat n (first xs)))))))", "user": "578606d2e4b0ebec4cfb74ec"}, {"problem": 33, "code": "#(mapcat (fn [coll] (repeat %2 coll)) %1)", "user": "5786e182e4b0ebec4cfb7500"}, {"problem": 33, "code": "(fn [v n] (apply mapcat list (repeat n v)))", "user": "56d30497e4b0ea9b8538f7a8"}, {"problem": 33, "code": "#(if (= 1 %2)\n   %1\n   (apply interleave (loop [i %2\n                            r []]\n                       (if (= i 0)\n                         r\n                         (recur (dec i) (conj r %1))))))", "user": "577832f4e4b0979f8965165b"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "57615a22e4b0994c1922fb88"}, {"problem": 33, "code": "(fn [v n]\n  (mapcat #(repeat n %) v))", "user": "578d230fe4b0ebec4cfb7564"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat (partial repeat n) coll))", "user": "566b57e9e4b0a866af6896ad"}, {"problem": 33, "code": "#(reduce (fn [r x] (concat r (take %2 (iterate identity x)))) [] %)", "user": "578e5750e4b0ebec4cfb7581"}, {"problem": 33, "code": "(fn rep [coll n]\n  (loop [in coll, out []]\n    (if (nil? in)\n      out\n      (recur (next in)\n             (concat out (repeat n (first in)))))))\n\n;(if (nil? coll)\n;    coll\n;    (concat (repeat n (first coll))\n;              (rep (next coll) n))))", "user": "577b4440e4b0d3393e5deb0f"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "56327168e4b0bfe05bf117a5"}, {"problem": 33, "code": "(fn [in, n] (mapcat #(repeat n %) in))\n\n\n\n\n;#(reduce (fn [r, x] (apply conj r (repeat %2 x))) [] %1)", "user": "578f9a18e4b0ebec4cfb7598"}, {"problem": 33, "code": "(fn [colls n]\n  (reduce #(apply (partial conj %1) (repeat n %2)) [] colls))", "user": "574ff497e4b02ea114799266"}, {"problem": 33, "code": "#(reduce (fn [x y] (concat x (repeat %2 y))) [] %1)", "user": "578b140be4b0ebec4cfb7545"}, {"problem": 33, "code": "(fn [s n] \n  (reduce \n   (fn [res e] \n     (concat res\n             (repeat n e)))\n   []\n   s))", "user": "578cf84ce4b0ebec4cfb7562"}, {"problem": 33, "code": "; ah ha, even better (but doesn't work with 1x):\n;#(apply interleave (take %2 (repeat %1))) \n\n;#(reduce (fn [x y] (concat x (take %2 (iterate identity y)))) [] %1)\n; didn't know about repeat\n;\n#(reduce (fn [x y] (concat x (take %2 (repeat y)))) [] %1)", "user": "56092852e4b0053d1b86c7d9"}, {"problem": 33, "code": "#(seq (reduce (fn [x y] (into x (repeat %2 y))) [] %1))", "user": "569fc70ee4b0542e1f8d1499"}, {"problem": 33, "code": "(fn f [s n]\n  (if (seq s)\n    (concat (repeat n (first s))\n            (f (rest s) n))))", "user": "5791d259e4b0ebec4cfb75c0"}, {"problem": 33, "code": "(fn [s r] (mapcat #(repeat r %) s))", "user": "55a3d7c7e4b0acc240e3153d"}, {"problem": 33, "code": "(fn\n  [coll n]\n  (mapcat #(repeat n %) coll))", "user": "56c21eafe4b05cc29241ee7e"}, {"problem": 33, "code": "(fn [s n] (apply concat (map #(repeat n %) s)))", "user": "577fa91ee4b0d36ec5835e6a"}, {"problem": 33, "code": "(fn [xs n]\n  (apply concat (map (partial repeat n) xs)))", "user": "577a74f7e4b0d3393e5deafa"}, {"problem": 33, "code": "(fn [col n]\n  (mapcat #(repeat n %) col))", "user": "57934c67e4b0e215f87e8456"}, {"problem": 33, "code": "(fn [li n]\n  (mapcat #(repeat n %) li))", "user": "5786c182e4b0ebec4cfb74fd"}, {"problem": 33, "code": "#(reduce (fn [accumulated item]\n                (println \"item\" item)\n               (loop [iterate 0\n                      iAccumulated accumulated]\n                (if (= iterate %2)\n                  iAccumulated\n                  (recur (inc iterate) (conj iAccumulated item)))))\n                  \n             []\n             %1)", "user": "5793adf0e4b0e215f87e8462"}, {"problem": 33, "code": "(fn [l n] (mapcat #(take n (iterate identity %)) l))", "user": "566e6850e4b0a866af6896da"}, {"problem": 33, "code": "(fn [x n] (mapcat #(repeat n %) x))", "user": "578fc072e4b0ebec4cfb759a"}, {"problem": 33, "code": "(fn [lst n]\n  (mapcat #(repeat n %) lst))", "user": "55ede35ce4b0121d4835fde1"}, {"problem": 33, "code": "(fn[v n]\n  (reduce #(into %1 (repeat n %2))\n          []\n          v))", "user": "577ab41fe4b0d3393e5deb05"}, {"problem": 33, "code": "#(apply (partial mapcat list) (repeat %2 %1))", "user": "530e75d5e4b08068f379ecba"}, {"problem": 33, "code": "#(mapcat (fn [e] (mapcat (fn [e2] [e]) (range 1 (inc %2)))) %1)", "user": "576d398be4b0979f8965155d"}, {"problem": 33, "code": "(fn [col c] (apply concat (map #(repeat c %) col)))", "user": "5790e62ae4b0ebec4cfb75b0"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "578e2829e4b0ebec4cfb757d"}, {"problem": 33, "code": "(fn [a b] (mapcat #(repeat b %) a))", "user": "5795f1f1e4b0e215f87e8490"}, {"problem": 33, "code": "(fn [s n]\n   (mapcat\n    (fn [item]\n      (loop [current 0 result '()]\n        (if (>= current n)\n          result\n          (recur (inc current) (conj result item)))))\n    s))", "user": "57958dace4b0e215f87e8484"}, {"problem": 33, "code": "(fn [col n-times]\n  (mapcat #(repeat n-times %1) col))", "user": "5785de4ce4b0ebec4cfb74e6"}, {"problem": 33, "code": "(fn [col n] (mapcat (partial repeat n) col))", "user": "57839ae9e4b0ebec4cfb74b8"}, {"problem": 33, "code": "(fn [coll n]\n  (if (= n 1)\n    coll\n  (loop [arrs [] ni 0]\n    (if (< ni n)\n      (recur (conj arrs coll) (inc ni))\n        (apply interleave  arrs)\n      ))))", "user": "579601c8e4b0e215f87e8492"}, {"problem": 33, "code": "(fn f [s n]\n  (let [f2\n        (fn [acc s3]\n          (concat acc (repeat n s3)))]\n        (reduce f2 [] s)))", "user": "5790f9d7e4b0ebec4cfb75b4"}, {"problem": 33, "code": "(fn [x r]\n  (apply concat (for [i x] (repeat r i))))", "user": "53fb4e9ae4b0de5c4184857e"}, {"problem": 33, "code": "(fn rep [ls n]\n  (let [[x & xs] ls]\n  (if x\n    (concat (repeat n x) (rep xs n)))))", "user": "57915ba4e4b0ebec4cfb75ba"}, {"problem": 33, "code": "#(mapcat (partial take %2) (map repeat %1))", "user": "5798205ce4b039eba2ecb10e"}, {"problem": 33, "code": "(fn [l n] (mapcat #(repeat n %) l))", "user": "55478ce2e4b0a04f7929954e"}, {"problem": 33, "code": "(fn repl [xs n]\n  (mapcat (fn [x] (repeat n x)) xs))", "user": "54c611d1e4b045293a27f627"}, {"problem": 33, "code": "(fn [ls n] \n  (mapcat #(repeat n %) ls))", "user": "516064e5e4b009fba0926e26"}, {"problem": 33, "code": "(fn replicate-seq [coll n]\n  (mapcat #(repeat n %) coll))", "user": "578e01e9e4b0ebec4cfb7575"}, {"problem": 33, "code": "#(mapcat (partial take %2) (map repeat %1))", "user": "57982bace4b039eba2ecb10f"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "57853bd9e4b0ebec4cfb74d6"}, {"problem": 33, "code": "(fn dup' [xs n]\n (if (empty? xs)\n   nil\n   (apply conj (dup' (rest xs) n) (repeat n (first xs)))))", "user": "579563ffe4b0e215f87e847e"}, {"problem": 33, "code": "#(loop [collected [] arr %1] (if (empty? arr) collected (recur  (concat collected (repeat %2 (first arr)))  (rest arr))))", "user": "57986b76e4b039eba2ecb116"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat (partial repeat n) s))", "user": "5799fc93e4b05b1deef9add0"}, {"problem": 33, "code": "(fn [l n]\n  (mapcat #(repeat n %) l))", "user": "5672925fe4b05957ce8c6114"}, {"problem": 33, "code": "(fn [xs n]\n  (mapcat\n    (fn [v]\n      (repeat n v)\n    )\n    xs\n  )\n)", "user": "5784e177e4b0ebec4cfb74cf"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "user": "579c8ad1e4b05b1deef9ae0c"}, {"problem": 33, "code": "(fn [x y] (mapcat identity (map #(take y (repeat %)) x)))", "user": "57619fc9e4b0994c1922fb93"}, {"problem": 33, "code": "(fn [xs times]\n  (reduce (fn [agg now] (into agg (repeat times now))) [] xs))", "user": "57717915e4b0979f896515b3"}, {"problem": 33, "code": "(fn [l t] (mapcat #(repeat t %) l))", "user": "579e15a6e4b05b1deef9ae20"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce #(concat %1 (repeat n %2)) [] coll))", "user": "5151d574e4b03e678e393ae0"}, {"problem": 33, "code": "(fn [s n]\n   (apply concat (map #(repeat n %) s)))", "user": "51e7c1f1e4b0a3e081b8cbef"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "579f4812e4b05302be0b72fb"}, {"problem": 33, "code": "(fn [col number]\n  (for [x col _ (range number)]\n  x))", "user": "5799b260e4b05b1deef9adc8"}, {"problem": 33, "code": "(fn [tl n]\n  (loop [res [] ll tl]\n    (if (empty? ll)\n      res\n      (recur (concat res (repeat n (first ll))) (next ll))\n    )\n  )\n)", "user": "57873017e4b0ebec4cfb7503"}, {"problem": 33, "code": "(fn repl-seq [col factor] (mapcat identity (map #(repeat factor %) col)))", "user": "578e535de4b0ebec4cfb7580"}, {"problem": 33, "code": "(fn [col n] (reverse (reduce (fn [acc x] (concat (repeat n x) acc)) '() col)))", "user": "545b486ae4b01be26fd7464f"}, {"problem": 33, "code": "#(reduce (fn [x y] (concat x (repeat %2 y))) '() %1)", "user": "57783873e4b0979f8965165c"}, {"problem": 33, "code": "(fn [coll n] (mapcat (fn [x] (repeat n x)) coll))", "user": "57a0f256e4b0c3d858beb8dd"}, {"problem": 33, "code": "(fn [s n] (mapcat (fn [i] (repeatedly n #(identity i))) s))", "user": "577e42dee4b0c8d87281f6e4"}, {"problem": 33, "code": "(fn [coll reps]\n  (let [repeat (fn [n v]\n                 (loop [out '()]\n                   (if (>= (count out) n)\n                     out\n                     (recur (conj out v)))))]\n    (loop [in coll\n           out '()]\n      (if (empty? in)\n        out\n        (recur (rest in)\n               (concat out (repeat reps (first in))))))))", "user": "57a310b4e4b0c3d858beb90c"}, {"problem": 33, "code": "(fn [coll n] (apply concat (map #(repeat n %) coll)))", "user": "57757612e4b0979f8965161d"}, {"problem": 33, "code": ";(\n(fn [partso no]\n\t  (loop [myvector [] parts partso n no] \n      \t  (if (empty? parts)\n            myvector\n            (recur (into myvector (take n (repeat (first parts)))) (rest parts) n)\n          )\n      )\n)\n;[:a :b] 4)", "user": "579be21fe4b05b1deef9adff"}, {"problem": 33, "code": "(fn [l n]\n  (mapcat (partial repeat n) l)\n  )", "user": "57a13745e4b0c3d858beb8e3"}, {"problem": 33, "code": "(fn [col n] \n  (reverse \n   (reduce \n    #(into %1 (repeat n %2)) \n    '() \n    col)))", "user": "579c7db7e4b05b1deef9ae0a"}, {"problem": 33, "code": "(fn [s n]\n  (reduce (fn [memo x]\n            (apply conj memo (repeat n x)))\n          []\n          s))", "user": "577bf999e4b0d3393e5deb2c"}, {"problem": 33, "code": "(fn [xs n]\n  (apply concat (map #(repeat n %) xs)))", "user": "57a49951e4b0a966079561e5"}, {"problem": 33, "code": "(fn [xs n] \n  (apply concat (map #(repeat n %) xs)))", "user": "57a4bb65e4b0a966079561eb"}, {"problem": 33, "code": "(fn [a n]\n  (reduce #(concat %1 (repeat n %2)) [] a))", "user": "57a4f5cae4b0a966079561f0"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "579d9601e4b05b1deef9ae18"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "579c35fee4b05b1deef9ae04"}, {"problem": 33, "code": "(fn [coll n] (for [i (range (* (count coll) n))] (nth coll (quot i n))))", "user": "5797d4bae4b039eba2ecb107"}, {"problem": 33, "code": "(fn [x y]\n    (mapcat #(repeat y %) x))", "user": "57a1ef58e4b0c3d858beb8f3"}, {"problem": 33, "code": "#(mapcat (fn [input](repeat %2 input)) %1)", "user": "57a14414e4b0c3d858beb8e4"}, {"problem": 33, "code": "#(reverse (loop [r '()\r\n                   l %1]\r\n              (if-let [e (first l)]\r\n                (recur\r\n                 (apply conj\r\n                        (conj (repeat %2 e) r))\r\n                  (rest l))\r\n                 r)))", "user": "57a9b2dbe4b0a96607956233"}, {"problem": 33, "code": "#(apply (partial mapcat list)\n        (take %2 (repeat %1)))", "user": "57aa4775e4b0b8559636fc6b"}, {"problem": 33, "code": "(fn [s n] (reduce (fn [v i] (into v (repeatedly n (fn [] i)))) [] s))", "user": "57a9e274e4b0b8559636fc5d"}, {"problem": 33, "code": "(fn [l r] (mapcat #(repeat r %) l))", "user": "57752a2de4b0979f89651613"}, {"problem": 33, "code": "#(if (= %2 1) % (apply interleave (repeat %2 %1)))", "user": "57aa290de4b0b8559636fc65"}, {"problem": 33, "code": "(fn [vs n]\n  (mapcat\n   (partial repeat n)\n   vs))", "user": "57acb156e4b0b8559636fc8d"}, {"problem": 33, "code": "(fn [xs n] (reduce (fn [ys x] (into ys (repeat n x))) [] xs))", "user": "5799ff45e4b05b1deef9add1"}, {"problem": 33, "code": "(fn f [xs n] (mapcat #(repeat n %) xs))", "user": "57adbe7ee4b0b8559636fca0"}, {"problem": 33, "code": "(fn [coll n] (mapcat (partial repeat n) coll))", "user": "57aa4752e4b0b8559636fc6a"}, {"problem": 33, "code": "(fn [ll x] (reduce concat (map (partial repeat x) ll)))", "user": "56bfd8ade4b060a8e693e3a2"}, {"problem": 33, "code": "(fn [a b] (let [x a y b] (reduce (fn [m n] (apply conj m (take y (repeat n)))) [] x)))", "user": "57a5f1e3e4b0a96607956200"}, {"problem": 33, "code": "#(mapcat (fn [elt] (repeat %2 elt)) %1)", "user": "5075e374e4b09049dea827a5"}, {"problem": 33, "code": "(fn [s m] \n  (mapcat \n    (fn [x] \n      (map #(do % x) (range m))) \n    s))", "user": "57addbcce4b0b8559636fca3"}, {"problem": 33, "code": "(fn [input cout]\n  (loop [in input out []]\n    (if (empty? in)\n      out\n      (let [head (first in)\n           body (rest in)]\n        (recur body (apply conj out (repeat cout head)))))))", "user": "57af6cf4e4b0fbc9809a2735"}, {"problem": 33, "code": "(fn [myseq qt] (mapcat (fn[x](repeat qt x) ) myseq ) )", "user": "57af249fe4b0fbc9809a272b"}, {"problem": 33, "code": "#(if (< 1 %2) (apply interleave (repeat %2 %1)) %1)", "user": "55da18d5e4b0e31453f64ad1"}, {"problem": 33, "code": "(fn[coll a](mapcat #(repeat a %) coll))", "user": "55fde52ce4b00f4cabc5764c"}, {"problem": 33, "code": "(fn [col cnt]\n  (mapcat #(repeat cnt %) col))", "user": "548b7db8e4b0e286459a11fd"}, {"problem": 33, "code": "(fn replicate \n  ([s n]\n   (if (empty? s) '()\n       (replicate s n '())))\n  ([s n res]\n   (if (empty? s) (reverse res)\n       (replicate (rest s) n (into res (for [x (range n)] (first s)))))))", "user": "57af41bce4b0fbc9809a2731"}, {"problem": 33, "code": "(fn [li times] (reduce #(concat %1 (repeat times %2)) '() li))", "user": "57ac7710e4b0b8559636fc88"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %1) coll))", "user": "57ab41dde4b0b8559636fc79"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "57b13adae4b0fbc9809a2750"}, {"problem": 33, "code": "(fn replicate-seq [coll n]\n(mapcat #(repeat n %) coll))", "user": "57aa103be4b0b8559636fc64"}, {"problem": 33, "code": "#(if (= 1 %2)\n   %1\n   (apply interleave %1 (repeat (dec %2) %1)))", "user": "4f387c2ee4b0e243712b1edd"}, {"problem": 33, "code": "(fn my-var-dup [s n]\n\t(reduce #(concat %1 (repeat n %2)) '() s)\n)", "user": "57a9db97e4b0b8559636fc5b"}, {"problem": 33, "code": "(fn repli\n  ([col n] (reduce \n             (fn [x y] (concat x (for [t (range n)] y))) \n             '() col)))", "user": "578f5122e4b0ebec4cfb7592"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "57b1b8c8e4b0fbc9809a2756"}, {"problem": 33, "code": "#(if (= 1 %2)\n   %1\n   (apply interleave (repeat %2 %1)))", "user": "57b3efb1e4b0fbc9809a278a"}, {"problem": 33, "code": "#(loop [x %1 y %2 r []]\n          (if (empty? x) r\n              (recur (rest x) y (concat r (repeat y (first x))))))", "user": "579ea15ee4b05b1deef9ae2a"}, {"problem": 33, "code": "(fn [a b] (mapcat #(repeat b %) a))", "user": "57a10070e4b0c3d858beb8e0"}, {"problem": 33, "code": "(fn\n  [c x]\n  (loop [coll c n x f []]\n    (cond (empty? coll) f\n          :else (recur (rest coll) n (loop [cur (first coll) a n fin f]\n                                       (cond (= a 0) fin\n                                             :else (recur cur (dec a) (conj fin cur))))))))", "user": "57acee37e4b0b8559636fc94"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "54722c55e4b094393f72dd74"}, {"problem": 33, "code": "(fn dupli-elem\n  [s n] \n  (mapcat (fn [i] (repeatedly n #(identity i))) s))", "user": "57b4779de4b0fbc9809a279a"}, {"problem": 33, "code": "#(apply concat (map (partial repeat %2) %1))", "user": "57b59d77e4b0fbc9809a27ae"}, {"problem": 33, "code": "#(mapcat (fn [item] (repeat %2 item)) %1)", "user": "57addf3ae4b0b8559636fca4"}, {"problem": 33, "code": "(fn add \n  ([l cnt] (add l cnt []))\n  ([l cnt ret]\n    (do (println l ret)\n    (if (empty? l)\n      ret\n      (add (rest l) cnt (concat ret (take cnt (repeat (first l)))))))))", "user": "4f4aa932e4b0d56e7bb92c14"}, {"problem": 33, "code": "(fn [sqn r] (seq (reduce #(into %1 (repeat r %2)) [] sqn)))", "user": "57b5dc52e4b0fbc9809a27b3"}, {"problem": 33, "code": "(fn [x y] (mapcat (partial repeat y) x))", "user": "57a2328ae4b0c3d858beb8f8"}, {"problem": 33, "code": "(fn foo [x n] (let [y (first x) f (map (fn [z] y) (range n))] (if (= (count x) 1) f (concat f (foo (rest x) n)) )))", "user": "57b8b008e4b0fbc9809a27e6"}, {"problem": 33, "code": "#(mapcat (fn [input](repeat %2 input)) %1)", "user": "57b88091e4b0fbc9809a27e1"}, {"problem": 33, "code": "(fn [coll rep-count]\n  (reduce (fn [new-coll symb]\n     (loop [out new-coll\n            i rep-count]\n       (if (= i 0)\n         out\n         (recur\n          (conj out symb)\n          (dec i))))) [] coll))", "user": "57a9eddae4b0b8559636fc5f"}, {"problem": 33, "code": "(fn [ell n] (apply concat (map #(apply list (repeat n %)) ell)))", "user": "57b99d48e4b0fbc9809a27f2"}, {"problem": 33, "code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "user": "57b55290e4b0fbc9809a27a9"}, {"problem": 33, "code": "(fn [coll n]\n\t(mapcat #(repeat n %) coll))", "user": "57a88e24e4b0a9660795621f"}, {"problem": 33, "code": "(fn my-rep\n  [coll n]\n  (mapcat #(repeat n %) coll))", "user": "568bd448e4b0dcc4269f40a9"}, {"problem": 33, "code": "(fn [xs n]\n  (mapcat (partial repeat n) xs))", "user": "56eab346e4b04a395b9a0410"}, {"problem": 33, "code": "(fn replicate-items [s c]\n  (reduce (fn [x y] (concat x (repeat c y))) () s))", "user": "57b6edf6e4b0fbc9809a27c8"}, {"problem": 33, "code": "(fn [coll n]\n      (mapcat #(repeat n %) coll))", "user": "5386f784e4b06839e8705f17"}, {"problem": 33, "code": "(fn [a b] (reduce #(concat %1 (repeat b %2)) [] a))", "user": "57b35a19e4b0fbc9809a277d"}, {"problem": 33, "code": "#(reduce concat (map (fn [x] (take %2 (repeat x))) %1))", "user": "56684356e4b04acd4f672de4"}, {"problem": 33, "code": "(fn [list num]\n  (mapcat #(repeat num %) list))", "user": "57bbc9bde4b05aa3c4741c31"}, {"problem": 33, "code": "(fn [s n] (mapcat #( repeat n %) s))", "user": "577412c6e4b0979f896515f6"}, {"problem": 33, "code": "#(loop [col %1\n         result '()]\n       (if (empty? col)\n          result\n           (recur (rest col)\n                  (loop [counter %2\n                        nested-res '()]\n                        (if (= 0 counter)\n                            (concat result nested-res)\n                            (recur (dec counter)\n                                   (conj nested-res (first col))))))))", "user": "57bf304de4b05aa3c4741c75"}, {"problem": 33, "code": "(fn[l n] (mapcat #(repeat n %) l))", "user": "57b9fc74e4b0fbc9809a27fb"}, {"problem": 33, "code": "#(loop [c %1\n          n %2\n          result '()]\n     (if (empty? c)\n       result\n       (recur (rest c) n (concat result (repeat n (first c))))))", "user": "55ff562fe4b00f4cabc57660"}, {"problem": 33, "code": "(fn repl-seq [lat n] (reduce concat (map #(take n (repeat %)) lat)))", "user": "57b9d21fe4b0fbc9809a27f7"}, {"problem": 33, "code": "(fn [coll n]\n  (if (= n 1) coll\n    (apply interleave (take n (repeat coll)))))", "user": "57bfffc7e4b05aa3c4741c8a"}, {"problem": 33, "code": "(fn test [seqq n]\n  (if (empty? seqq)\n    nil\n    (concat (repeat n (first seqq))\n            (test (rest seqq) n))))", "user": "579332c2e4b0e215f87e8452"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "57c0917be4b05aa3c4741c95"}, {"problem": 33, "code": "(fn rep[lst k]\n  (reduce concat\n  (map (fn [x] (repeat k x)) lst)))", "user": "578f8a0ae4b0ebec4cfb7596"}, {"problem": 33, "code": "(fn [s n] (mapcat (partial repeat n) s))", "user": "56cf115de4b0ea9b8538f765"}, {"problem": 33, "code": "(fn [v n]\n  (loop [v v\n         acc []]\n    (if (empty? v)\n      (reduce concat acc)\n      (recur (rest v) (conj acc (into [] (take n (repeat (first v)))))))))", "user": "57c0393be4b05aa3c4741c90"}, {"problem": 33, "code": "(fn [xs n](mapcat (partial repeat n) xs))", "user": "566ff0a1e4b0a866af6896ec"}, {"problem": 33, "code": "(fn [x n] (apply concat (map #(repeat n %) x)))", "user": "57c3451fe4b05aa3c4741cbd"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "572af688e4b0f4d77e651249"}, {"problem": 33, "code": "(fn repli[s n]\n  (if (= n 1)\n    s\n    (->>\n     (repeat s)\n     (take n)\n     (apply interleave))))", "user": "57bd960fe4b05aa3c4741c52"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "57ba55c1e4b0fbc9809a2801"}, {"problem": 33, "code": "(fn [col n-times]\n  (mapcat #(repeat n-times %1) col))\n;\u7262\u8bb0\u7528#(.. %1)\u5bf9\u96c6\u5408\u91cc\u9762\u7684value\u9010\u4e2a\u8fdb\u884c\u64cd\u4f5c\u3002\u3002", "user": "57c500f9e4b05aa3c4741cda"}, {"problem": 33, "code": "(fn [seq n]\n  (loop [acc [] rest seq counter n]\n    (if (empty? rest)\n      acc\n      (if (= counter 0)\n        (recur acc (drop 1 rest) n)\n        (recur (conj acc (first rest)) rest (- counter 1))))))", "user": "57c3df67e4b05aa3c4741cc5"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "57c1b32be4b05aa3c4741ca4"}, {"problem": 33, "code": "#(apply concat (for [x %1] (repeat %2 x)))", "user": "57b65c9be4b0fbc9809a27c0"}, {"problem": 33, "code": "(fn [xs n]\n             (let [r (repeat n xs)]\n                 (if (not= (count r) 1)\n                     (apply interleave r)\n                     (first r))))", "user": "5143a51be4b0b4fb4ace5f39"}, {"problem": 33, "code": "(fn [coll n] (mapcat \n              (fn [x] (concat (repeat n x))) coll))", "user": "57c92bdbe4b05aa3c4741d27"}, {"problem": 33, "code": "#(loop\n   [s1 %1 r %2 res '()]\n   (if (empty? s1)\n     (seq res)\n     (recur (rest s1) r\n            (concat res (take r (repeat (first s1)))))))", "user": "55ed37ebe4b0121d4835fdd6"}, {"problem": 33, "code": "(fn [list times] (reverse (reduce into (for [x list] (repeat times x)))))", "user": "57b3027fe4b0fbc9809a276c"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "558e160ce4b027778923764c"}, {"problem": 33, "code": "(fn [l n]\n  (reduce concat\n  (map (fn [x]\n         (map\n          (fn [y] x)\n          (range n)))\n       l)))", "user": "57395f32e4b0cd1946bd1070"}, {"problem": 33, "code": "; using partial function to set up the repeat\n; (fn [coll n] (mapcat (partial repeat n) coll))\n\n; using loop and recur\n(fn [x n] \n   (loop [x x\n          n n\n          index 1\n          return []]\n     (if (empty? x)\n       return\n       (if (= (mod index n) 0)\n         (recur (rest x) n (inc index) (conj return (first x)))\n         (recur x n (inc index) (conj return (first x)))))))", "user": "57c44053e4b05aa3c4741ccb"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "57c7cef5e4b05aa3c4741d0d"}, {"problem": 33, "code": "(fn [c n] (mapcat #(take n (repeat %)) c))", "user": "57c796b4e4b05aa3c4741d08"}, {"problem": 33, "code": "(fn [col times] (mapcat #(repeat times %) col))", "user": "57c6bca1e4b05aa3c4741cf8"}, {"problem": 33, "code": "(fn replic [sequ v] (apply concat (map #(repeat v %) sequ)))", "user": "515310b4e4b0d6806ecd26fb"}, {"problem": 33, "code": "#(if (= 1 %2) %1 (apply interleave (repeat %2 %1)))", "user": "57c58ad6e4b05aa3c4741ce7"}, {"problem": 33, "code": "(fn [array nb]\n  (reduce #(into %1 (take nb (repeat %2))) [] array))", "user": "57c2d66ae4b05aa3c4741cb9"}, {"problem": 33, "code": "(fn [c n] (reduce #(apply conj %1 (repeat n %2)) [] c))", "user": "57c7a8b5e4b05aa3c4741d09"}, {"problem": 33, "code": "(fn [x y] (reduce #(concat %1 (repeat y %2)) '() x))\n;;(fn f [x y] \n;;  (if-let [a (first x)]\n;;    (concat (repeat a y)", "user": "57c99a45e4b05aa3c4741d31"}, {"problem": 33, "code": "(fn [s n] (reduce into [] (for [x s] (repeat n x))))", "user": "57c7e7d9e4b05aa3c4741d0f"}, {"problem": 33, "code": "(fn repl [lst n] (apply concat (map #(repeat n %) lst)))", "user": "57ce2db8e4b0c746388ab8a4"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "57cd7498e4b0c746388ab897"}, {"problem": 33, "code": "(fn [items i] (mapcat #(map (fn [y] %) (range i)) items))", "user": "57ce3fede4b0c746388ab8a6"}, {"problem": 33, "code": "(fn [coll n]\n  (if (= n 1)\n    coll\n    (apply interleave (repeat n coll))))", "user": "57c94c6ee4b05aa3c4741d2d"}, {"problem": 33, "code": "(fn [col n](mapcat #(repeat n %1) col))", "user": "57bc9375e4b05aa3c4741c43"}, {"problem": 33, "code": "#(apply concat (map (fn [x] (repeat %2 x)) %1))", "user": "57cef3f8e4b0c746388ab8b4"}, {"problem": 33, "code": "#(mapcat (fn [e] (repeat %2 e)) %1)", "user": "57c45e64e4b05aa3c4741ccf"}, {"problem": 33, "code": "(fn [l n] (mapcat #(take n (repeat %)) l))", "user": "56c6a3c3e4b05cc29241eeb3"}, {"problem": 33, "code": "(fn [data times]\n  (mapcat identity\n    (map #(repeat times %) data)))", "user": "57995ac1e4b05b1deef9adbf"}, {"problem": 33, "code": "(fn [input num] (mapcat #(repeat num %) input))", "user": "57c6aa0be4b05aa3c4741cf7"}, {"problem": 33, "code": "(fn [s n]\n    (mapcat #(repeat n %) s))", "user": "57985f98e4b039eba2ecb114"}, {"problem": 33, "code": "#(apply concat (map (partial repeat %2) %1))", "user": "57a0b341e4b0c3d858beb8d4"}, {"problem": 33, "code": "(fn [coll times]\n  (apply concat (map #(take times (repeat %)) coll)))", "user": "57aa2b97e4b0b8559636fc66"}, {"problem": 33, "code": "(fn [arg n]\n  (mapcat (fn [x] (repeat n x))\n          arg))", "user": "57c7fa03e4b05aa3c4741d12"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce #(concat % (repeat n %2)) [] coll))", "user": "57a775bbe4b0a96607956214"}, {"problem": 33, "code": "(fn [s n]\n  (reduce #(concat %1 (repeat n %2)) [] s))", "user": "559e7848e4b08a52bd4f97d4"}, {"problem": 33, "code": "(fn replicated\n  [collection n]\n  (reduce #(into %1 (take n (repeat %2))) [] collection))", "user": "57d0cd58e4b0bd073c20235e"}, {"problem": 33, "code": "(fn[coll n](apply concat (map #(repeat n %) coll)))", "user": "57c56d78e4b05aa3c4741ce3"}, {"problem": 33, "code": "(fn rplct [x n] \n  (let [f (fn anon [y i]\n           (if (<= i 0) '() \n             (concat (list y) (anon y (- i 1)))))]\n    (if (= x []) '() \n     (concat (f (first x) n) (rplct (rest x) n)))))", "user": "57d1d6c8e4b0bd073c202370"}, {"problem": 33, "code": "(fn replcateASeq\n  [col times]\n  (reverse (reduce #(reverse (into (take times (repeat %2)) %1)) [] col)))", "user": "57c731ede4b05aa3c4741d00"}, {"problem": 33, "code": "(fn [coll x] (reduce #(into %1 (repeat x %2) ) [] coll))", "user": "57d588a5e4b0bd073c2023b6"}, {"problem": 33, "code": "(fn [data x]\n  (apply concat\n    (into []\n      (for [y data]\n          (into [] (repeat x y))))))", "user": "57b19fa1e4b0fbc9809a2754"}, {"problem": 33, "code": "(fn [v n]\n  (mapcat (partial repeat n) v))", "user": "57d4f225e4b0bd073c2023a6"}, {"problem": 33, "code": "(fn [s n] (reduce #(concat %1 (take n (repeat %2))) () s))", "user": "56958a16e4b0dcc4269f4129"}, {"problem": 33, "code": "(fn [a b] (apply concat(map #(repeat b %)a)) )", "user": "57b8f784e4b0fbc9809a27ea"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "57d6b9c4e4b0bd073c2023cb"}, {"problem": 33, "code": "(fn replicate-recur\n  ([the-list max-count] (replicate-recur the-list max-count [] max-count))\n  ([input-list max-count output-list current-count] (if (empty? input-list) output-list (if (<= current-count 0) (replicate-recur (rest input-list) max-count output-list max-count) (replicate-recur input-list max-count (conj output-list (first input-list)) (dec current-count)))))\n)", "user": "57b356c2e4b0fbc9809a277b"}, {"problem": 33, "code": "(fn [coll n]\n    (reduce (fn [acc v]\n              (reduce conj acc (repeat n v))) [] coll))", "user": "57a774e4e4b0a96607956213"}, {"problem": 33, "code": "(fn [col n]\n  (mapcat identity (map #(repeat n %) col))\n)", "user": "57c62aece4b05aa3c4741cf1"}, {"problem": 33, "code": "(fn [items times]\n  (loop [items items result []]\n    (if (empty? items)\n      result\n      (recur (rest items) (concat result (map (constantly (first items)) (range times)))))))", "user": "57d9bca1e4b0bd073c202405"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "57da5fc4e4b0bd073c20240f"}, {"problem": 33, "code": "(fn [s, i] (mapcat #(repeat i %) s))", "user": "57d1a0e6e4b0bd073c20236d"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "57dbcc28e4b0bd073c202429"}, {"problem": 33, "code": "#(apply concat (map (partial repeat %2) %1))", "user": "57dda21be4b0bd073c202445"}, {"problem": 33, "code": "(fn [lst n]\n  (mapcat #(repeat n %) lst))", "user": "573d8658e4b05c31a32c0814"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat \n   (fn [x]\n     (loop [xs [] i 0]\n       (if (= i n)\n         xs\n         (recur (conj xs x) (inc i))\n         )\n)\n)\n   s\n   )\n  )", "user": "57d7c894e4b0bd073c2023de"}, {"problem": 33, "code": "(fn [x y]\n (loop [in x out '()]\n   (if (empty? in)\n     out\n     (recur (rest in) (concat out (take y (repeat (first in))))))))", "user": "566d71b1e4b0a866af6896ca"}, {"problem": 33, "code": "#(reduce (fn [y x] (concat y (repeat %2 x))) () %1)", "user": "57b35772e4b0fbc9809a277c"}, {"problem": 33, "code": "(fn [l n]\n   (loop [l l i 0 r []]\n     (cond\n       (empty? l) r\n       (< i n) (recur l (inc i) (conj r (first l)))\n       :else (recur (rest l) 0 r))))", "user": "57d9f603e4b0bd073c20240a"}, {"problem": 33, "code": "(fn [coll times] (mapcat #(repeat times %) coll))", "user": "5785c1d4e4b0ebec4cfb74e1"}, {"problem": 33, "code": "(fn [s n]\n  (reduce #(into %1 (repeat n %2)) [] s))", "user": "57e0f30ae4b0bfb2137f5a66"}, {"problem": 33, "code": "#(apply mapcat vector (repeat %2 %1))", "user": "57ccedaae4b0c746388ab88e"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "57dd47f4e4b0bd073c20243e"}, {"problem": 33, "code": "#(apply concat (map (fn [x] (repeat %2 x)) %1))", "user": "57d9cae9e4b0bd073c202409"}, {"problem": 33, "code": "(fn [coll repeat-by]\n        (reduce #(concat %1 (take repeat-by (cycle (list %2)))) [] coll))", "user": "55f4ebffe4b06e875b46ce81"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "51b8e020e4b050a1176cd69e"}, {"problem": 33, "code": "(fn [s n] (mapcat #(replicate n %) s))", "user": "57b5ed94e4b0fbc9809a27b4"}, {"problem": 33, "code": "#(reverse (reduce (fn [items x] (concat (take %2 (iterate identity x)) items)) (empty %1) %1))", "user": "57df9f60e4b0bd073c202467"}, {"problem": 33, "code": "(fn replicate-sequence [seq n]\n  (reverse (reduce (fn [res el] (apply conj res (repeat n el))) '() seq)))", "user": "57a6ad79e4b0a9660795620b"}, {"problem": 33, "code": "#(apply concat (map (partial repeat %2) %1))", "user": "57e33f6fe4b0bfb2137f5a96"}, {"problem": 33, "code": "(fn [ll x]\n (mapcat #(repeat x %) ll)\n)", "user": "57e396cde4b0bfb2137f5a9e"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "57e139f6e4b0bfb2137f5a6c"}, {"problem": 33, "code": "(fn [x,y] (mapcat identity (map #(repeat y %) x)))", "user": "57d60d83e4b0bd073c2023c2"}, {"problem": 33, "code": "(fn [coll cnt] (mapcat #(repeat cnt %) coll))", "user": "574eb3b1e4b02ea114799247"}, {"problem": 33, "code": "(fn [col n]\n  (cond (vector? (first col))\n        (for [pairs (partition 2\n                               (flatten\n                                (take 2\n                                      (for [each col]\n                                        (repeat n each)))))]\n          (into [] pairs))\n        (= (first col) 44) (reverse (sort (flatten (repeat n col))))\n        :else\n        (sort (flatten (repeat n col)))))", "user": "56940617e4b0dcc4269f410b"}, {"problem": 33, "code": "(fn [s r]\n   (apply concat \n     (for [e s]\n       (repeat r e))))", "user": "56f9c7c6e4b07572ad1a88ba"}, {"problem": 33, "code": "(fn [-s -n]\n    (loop [s -s n -n new []]\n          (if (empty? s)\n              new\n              (recur (rest s) n (concat new (repeat n (first s)))))))", "user": "57e3f709e4b0bfb2137f5aaf"}, {"problem": 33, "code": "(fn [coll n]\n  (reverse\n   (reduce into\n           (map #(repeat n %) coll))))", "user": "56ae7589e4b03c432f187360"}, {"problem": 33, "code": "(fn [vec times](mapcat #(repeat times %1) vec))", "user": "5694e9c5e4b0dcc4269f4123"}, {"problem": 33, "code": "(fn [s n]\n  (loop [remaining s answer []]\n    (if (seq remaining)\n      (recur (next remaining) (apply (partial conj answer) (repeat n (first remaining))))\n      answer)))", "user": "57894e30e4b0ebec4cfb752b"}, {"problem": 33, "code": "(fn dup-eles-n\n  ([xs n]\n   (dup-eles-n xs [] n))\n  ([xs acc n]\n   (if (seq xs)\n     (recur (rest xs) (concat acc (repeat n  (first xs))) n)\n     acc)))", "user": "5705f569e4b0b0fb43fd0677"}, {"problem": 33, "code": "(fn [x y] (apply concat (map\n      (fn tom [po]\n        (\n        (fn tom [lo te]\n          (if (= te 0)\n            ()\n            (cons lo \n                  (tom lo (- te 1)))\n            )\n          )\n        po\n        y\n         )\n        )                           \n      x                   \n                         )))", "user": "57e404a3e4b0bfb2137f5ab1"}, {"problem": 33, "code": "#(loop [[n & r] %1 f []]\n   (if (empty? r)\n     (into f (repeat %2 n))\n     (recur r (into f (repeat %2 n)))))", "user": "57e929c0e4b0bfb2137f5b21"}, {"problem": 33, "code": "; (fn [s n]\n;  (reduce concat\n;    (map #(repeat n %) s)))\n\n(fn [s n] (mapcat #(repeat n %) s))", "user": "57e37f90e4b0bfb2137f5a9c"}, {"problem": 33, "code": "#(apply concat (map (fn [input](repeat %2 input)) %1))", "user": "57df309ee4b0bd073c20245f"}, {"problem": 33, "code": "(fn [x n] (reduce #(into %1 (repeat n %2)) [] x))", "user": "52f625ffe4b047fd55836fb5"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "56629a7de4b0e91d5f5c5649"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce #(apply conj %1 (repeat n %2)) [] coll))", "user": "57c176abe4b05aa3c4741ca2"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "56887bcbe4b0dcc4269f406a"}, {"problem": 33, "code": "(fn [col n]\n  (mapcat #(repeat n %) col))\n\n;#(apply concat (map (fn [input](repeat %2 input)) %1))\n;#(mapcat (fn [input](repeat %2 input)) %1)", "user": "57e4dbcbe4b0bfb2137f5ac3"}, {"problem": 33, "code": "(fn [x n] (mapcat #(repeat n %) x))", "user": "57e6997ee4b0bfb2137f5af0"}, {"problem": 33, "code": "#(mapcat identity (map (partial repeat %2) %1))", "user": "57ec3d29e4b0bfb2137f5b77"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "57ee804ee4b0bfb2137f5bbb"}, {"problem": 33, "code": "(fn [s n] (mapcat (fn [i] (repeat n i)) s))", "user": "57efb389e4b0bfb2137f5bdb"}, {"problem": 33, "code": "(fn [a-seq n]\n  (reduce (fn [acc x] \n            (apply conj acc (repeat n x)))\n          []\n          a-seq))", "user": "574e84e0e4b02ea114799243"}, {"problem": 33, "code": ";(fn [coll r] (mapcat #(repeat r coll))) -> why fail?\n\n;#(fn [coll r] (mapcat #(repeat r %) coll))\n\n#(apply mapcat list (repeat %2 %1))", "user": "57e91413e4b0bfb2137f5b20"}, {"problem": 33, "code": "(fn [coll times]\n  (mapcat #(apply vector (repeat times %)) coll))", "user": "57e79d8ee4b0bfb2137f5afe"}, {"problem": 33, "code": "(fn [a-seq n] (mapcat #(repeat n %) a-seq))", "user": "57f0f7b8e4b0bfb2137f5bfe"}, {"problem": 33, "code": "(fn rpt [s n]\n  (if-let [[hd & tl] s]\n    (concat (take n (repeat hd))\n            (rpt tl n))))", "user": "57df2722e4b0bd073c20245e"}, {"problem": 33, "code": "(fn [a n]\n  (mapcat #(repeat n %) a))", "user": "57e20474e4b0bfb2137f5a82"}, {"problem": 33, "code": "(fn [coll n](mapcat #(repeat n %) coll))", "user": "57ee9ffbe4b0bfb2137f5bc2"}, {"problem": 33, "code": ";;#(flatten (map (fn [x] (take %2 (repeat x))) %) )\n(fn [s, n] (reduce (fn [acc, i] (concat acc (take n (repeat i)) )) [] s))", "user": "57eb7a97e4b0bfb2137f5b62"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce\n   (fn [accum i]\n       (apply conj accum (repeat n i)))\n   []\n   coll))", "user": "56020b3fe4b04bb52996e19b"}, {"problem": 33, "code": "(fn [c r] ( mapcat #(repeat r %) c ))", "user": "57ec8d1de4b0bfb2137f5b7f"}, {"problem": 33, "code": "(fn [l n] (mapcat #(take n (repeat %)) l))", "user": "57ed2574e4b0bfb2137f5b93"}, {"problem": 33, "code": "(fn [c n] (reduce #(concat %1 (for [i (range n)] %2)) '() c))", "user": "57b39fbee4b0fbc9809a2783"}, {"problem": 33, "code": "(fn\n  [input n]\n  (reduce concat (map #(take n (repeat %)) input))\n  )", "user": "57596ba7e4b02ea11479931a"}, {"problem": 33, "code": "#(if (= 1 %2) % (apply interleave (repeat %2 %)))", "user": "5254b45fe4b0541d1855b9a0"}, {"problem": 33, "code": "(fn [x y] (apply concat (map #(repeat y %) x)))", "user": "574a71b7e4b02ea1147991fb"}, {"problem": 33, "code": "(fn [input multiple]\n  (loop [remaining input ans (lazy-seq [])]\n    (if (empty? remaining)\n      ans\n      (let [[ptr & remain] remaining]\n        (recur remain (concat ans (for [x (range 0 multiple)]\n                                  ptr)))))))", "user": "5746061ae4b009280f9f2b5b"}, {"problem": 33, "code": "(fn [sq r] (mapcat #(take r (iterate identity %)) sq))", "user": "57db2369e4b0bd073c20241f"}, {"problem": 33, "code": "(fn [seq n]\n    (mapcat (fn [x] (repeat n x)) seq))", "user": "57f6e666e4b0d3187e9008f2"}, {"problem": 33, "code": "(fn [lst n] \n  (mapcat #(repeat n %) lst)\n  )", "user": "57f81045e4b0d3187e90090f"}, {"problem": 33, "code": "(fn [s n]\n  (apply concat (map #(repeat n %) s)))", "user": "57f52d3be4b0903ccab3dce7"}, {"problem": 33, "code": "(fn [coll n] \n  (reduce \n   #(concat %1 (repeat n %2)) [] coll))", "user": "57485efee4b009280f9f2b8a"}, {"problem": 33, "code": "(fn [x,n] (mapcat #(repeat n %) x))", "user": "53194ba3e4b08068f379ed7a"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "56a44067e4b0542e1f8d14da"}, {"problem": 33, "code": "(fn [xs n] (mapcat (partial repeat n) xs))", "user": "52ce5056e4b07d0d72b2738f"}, {"problem": 33, "code": "(fn [l n]\n  (apply concat\n         (map (fn [x] (take n (repeat x))) l)))", "user": "57f7c74ee4b0d3187e900902"}, {"problem": 33, "code": "(fn [xs0 n] (reduce #(into %1 (take n (repeat %2)) ) [] xs0))", "user": "57f85b36e4b0d3187e900924"}, {"problem": 33, "code": "(fn expand[lst n]\n  (reduce concat (map repeat (repeat (count lst) n ) lst)))", "user": "57fc08d8e4b0d3187e900988"}, {"problem": 33, "code": "#(for [x %1 y (take %2 (repeat x))] y)", "user": "57ecc16fe4b0bfb2137f5b83"}, {"problem": 33, "code": "(fn my-replicate [lst n]\n  (loop [lst lst\n         a 1\n         nuevo ()\n         elem (first lst)]\n    (if (empty? lst)\n      \t(reverse nuevo)\n      \t(if (= a n)\n          \t(recur (rest lst)\n                   1\n                   (cons elem nuevo)\n                   (first (rest lst)))\n            (recur lst\n                   (inc a)\n                   (cons elem nuevo)\n                   (first lst))))))", "user": "57f8151ce4b0d3187e900912"}, {"problem": 33, "code": "(fn dupvar\n  [lst n]\n  (mapcat #(concat (repeat n %)) lst))", "user": "57fc34f0e4b0d3187e90098e"}, {"problem": 33, "code": "(fn replicate-seq \n  [lst n]\n  (mapcat #(repeat n %) lst))", "user": "57f8153de4b0d3187e900916"}, {"problem": 33, "code": "#(loop [td %1\n        res []]\n        (if (empty? td)\n          res\n          (recur (rest td) (->> (first td) (repeat) (take %2) (concat res)))))", "user": "57f253a3e4b0511f1d294dea"}, {"problem": 33, "code": "(fn\n  [coll times]\n  (reduce\n    #(concat %1 (repeat times %2))\n    '[]\n    coll))", "user": "566ca8d6e4b0a866af6896bf"}, {"problem": 33, "code": "(fn [lst n] (mapcat #(repeat n %) lst))", "user": "57f8104ce4b0d3187e900910"}, {"problem": 33, "code": "(fn [coll n]\n  (apply concat (map (fn [ci] (repeat n ci)) coll)))", "user": "57f80350e4b0d3187e90090c"}, {"problem": 33, "code": "(fn rep\n  [lst n]\n  (loop[a lst\n        b ()]\n    (if (empty? a)\n      (reverse b)\n      (recur (rest a)(concat (repeat n (first a)) b)))))", "user": "57f814fbe4b0d3187e900911"}, {"problem": 33, "code": "(fn p33 [xs n]\n  (if (empty? xs)\n    nil\n    (concat (take n (repeat (first xs))) (p33 (rest xs) n))))", "user": "57fe836ee4b0d3187e9009d2"}, {"problem": 33, "code": "(fn [lst n]\n   (mapcat  #(repeat n %) lst  ))", "user": "57f81524e4b0d3187e900913"}, {"problem": 33, "code": "(fn [xs, n] (mapcat #(repeat n %) xs))", "user": "57fdd1cfe4b0d3187e9009bf"}, {"problem": 33, "code": "(fn my-repeat\n  [x n]\n  (loop\n    [num n\n     lst '()\n     y x]\n    (if (empty? y)\n      (reverse(mapcat identity lst))\n      (recur (dec num) (cons (repeat n (first y)) lst) (rest y)))))", "user": "57f81544e4b0d3187e900917"}, {"problem": 33, "code": "(fn\n  [coll times]\n  (apply concat (map #(repeat times %) coll)))", "user": "557c647ce4b05c286339e0c3"}, {"problem": 33, "code": "(fn [cs n] (reduce (fn [acc b] (apply conj acc (repeat n b) )) (empty cs) cs))", "user": "57f9011ee4b0d3187e900935"}, {"problem": 33, "code": "(fn [a b] (apply (partial mapcat list) (repeat b a)))", "user": "5800edaae4b0a837a8b30c48"}, {"problem": 33, "code": "(fn [coll x] (mapcat #(repeat x %) coll))", "user": "55cc6c35e4b0e31453f64a10"}, {"problem": 33, "code": "(fn [x y] \n  (loop [xx x res []]\n    (if (empty? xx) (into (empty x) res)\n        (recur (rest xx) (concat res (repeat y (first xx))))\n    )\n  ))", "user": "57f28b22e4b0511f1d294def"}, {"problem": 33, "code": "(fn [x n]\n  (reduce concat (map #(repeat n %) x)))", "user": "57f81549e4b0d3187e900918"}, {"problem": 33, "code": "(fn rep\n  [seqn n]\n  (mapcat #(repeat n %) seqn))", "user": "57f81534e4b0d3187e900915"}, {"problem": 33, "code": "(fn \n  [lst n]\n  (mapcat #(repeat n %) lst))", "user": "57fedf07e4b0d3187e9009dc"}, {"problem": 33, "code": "(fn [a b] (mapcat #(repeat b %) a))", "user": "57fa7c93e4b0d3187e900963"}, {"problem": 33, "code": "(fn \n  [a b]\n  (mapcat #(repeat b %) a)\n  )", "user": "57f81532e4b0d3187e900914"}, {"problem": 33, "code": "(fn[my-seq n]\n  (mapcat (fn[el] (repeat n el)) my-seq)\n)", "user": "575ddfd1e4b02ea11479938d"}, {"problem": 33, "code": "(fn [lst n] (mapcat #(repeat n %) lst))", "user": "57fd7344e4b0d3187e9009b6"}, {"problem": 33, "code": "(fn \n  [lst n]\n  (mapcat #(repeat n %) lst ))", "user": "57f81569e4b0d3187e900919"}, {"problem": 33, "code": "(fn [lst n]\n  (mapcat (fn [in] (repeat n in)) lst))", "user": "580570a2e4b0a837a8b30cc7"}, {"problem": 33, "code": "(fn [lst n] (mapcat #(repeat n %) lst) )", "user": "580558cde4b0a837a8b30cc4"}, {"problem": 33, "code": "#(mapcat (fn [item]                                                      \n             (take %2 (repeat item)))                                              \n          %1)", "user": "57fe2d6fe4b0d3187e9009c8"}, {"problem": 33, "code": "(fn [s n] (reduce #(concat %1 (repeat n %2)) [] s))", "user": "57c94c54e4b05aa3c4741d2c"}, {"problem": 33, "code": "#(apply concat (map (fn [n] (repeat %2 n)) %1))", "user": "57f9e0bce4b0d3187e900956"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "55b1d0b5e4b0da326a65cf73"}, {"problem": 33, "code": "(fn [x y] (reduce concat (map (fn [elem] (repeat y elem)) x)))", "user": "57b167afe4b0fbc9809a2752"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(take n (iterate identity %)) coll))", "user": "57ed19a3e4b0bfb2137f5b8e"}, {"problem": 33, "code": "#(mapcat (fn [x](repeat %2 x)) %1)", "user": "57ea79d9e4b0bfb2137f5b4f"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "57f8ba80e4b0d3187e90092f"}, {"problem": 33, "code": "(fn check [x  z & [y t]]\n   (if (= (last x) nil)\n     (do y)\n     (if (= t nil)\n       (do (check x z (conj y (last x)) 1) )\n       (if (< t z)\n         (do  (check x z (conj y (last x)) (+ t 1)))\n         (do  (check (butlast x) z y nil))\n       )\n     ))\n )", "user": "580014d7e4b0a837a8b30c32"}, {"problem": 33, "code": "(fn replicate [seq count]\n         (when (not (empty? seq))\n           (concat (repeat count (first seq)) (replicate (rest seq) count))))", "user": "57fc0719e4b0d3187e900987"}, {"problem": 33, "code": "(fn [coll x]\n   (loop [final [] remaining coll]\n     (if (empty? remaining)\n       final\n       (recur (into final (repeat x (first remaining))) (rest remaining)))\n     ))", "user": "58047205e4b0a837a8b30ca9"}, {"problem": 33, "code": "(fn [coll n] (apply concat (map (partial repeat n) coll)))", "user": "57f8cd5ae4b0d3187e900930"}, {"problem": 33, "code": "#(if (> %2 1)\n   (apply interleave (take %2 (repeat %1)))\n   %1)", "user": "57fa6f2ee4b0d3187e900962"}, {"problem": 33, "code": "(fn [l t] (mapcat #(into [] (repeat t %)) l))", "user": "5801eed1e4b0a837a8b30c63"}, {"problem": 33, "code": "(fn repl\n  [coll times]\n  (reduce #(concat %1 (map (fn [i] (-> %2)) (range times))) nil coll))", "user": "57b9fb56e4b0fbc9809a27fa"}, {"problem": 33, "code": "(fn [s n] (mapcat (fn [x] (take n (repeat x))) s))", "user": "57ee82b1e4b0bfb2137f5bbd"}, {"problem": 33, "code": "(fn [x n]\n  (mapcat #(repeat n %) x))", "user": "54d893a4e4b0a52adc2e2039"}, {"problem": 33, "code": "(fn [c n]\n  (mapcat (partial repeat n) c))", "user": "580bd81ee4b0849f6811b711"}, {"problem": 33, "code": "(fn [col n] (mapcat #(repeat n %) col))", "user": "57ee46c7e4b0bfb2137f5bb3"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "580c8fcee4b0849f6811b721"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "57ee2b3ee4b0bfb2137f5bac"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "57ee432de4b0bfb2137f5bb2"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "57ef793de4b0bfb2137f5bd8"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "57ee41a6e4b0bfb2137f5baf"}, {"problem": 33, "code": "(fn [coll n] (mapcat (partial repeat n) coll))", "user": "57eb38dbe4b0bfb2137f5b5e"}, {"problem": 33, "code": "(fn [col num]\n             (reduce\n               #(into %1 (repeat num %2))\n               []\n               col))", "user": "55ee84c0e4b0121d4835fdf0"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %)", "user": "5405885ee4b0addc1aec6668"}, {"problem": 33, "code": "(fn [col n]\n  (mapcat #(repeat n %) col))", "user": "57a4fa50e4b0a966079561f1"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "5508a292e4b06e50f9beb10f"}, {"problem": 33, "code": ";(fn [coll n] (mapcat #(repeat n %) coll))\n\n(fn [xs n] (mapcat (partial repeat n) xs))\n\n;#(apply interleave (repeat %2 %1))", "user": "57ee42c4e4b0bfb2137f5bb1"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "580e2941e4b0849f6811b74e"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))\n;;#(for [x %1 y (repeat %2 x)] y)", "user": "580d7bdae4b0849f6811b73c"}, {"problem": 33, "code": "(fn rep [xs n] (mapcat (fn[x](repeat n x)) xs))", "user": "580fbaade4b0f478707a05c0"}, {"problem": 33, "code": "(fn [col rep] (reduce #(concat %1 (repeat rep %2)) [] col))", "user": "57fbf995e4b0d3187e900981"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "57ee41eae4b0bfb2137f5bb0"}, {"problem": 33, "code": "#(if (= %2 1)\n   %1\n   (apply interleave (repeat %2 %1)))", "user": "565b2fa5e4b068f2fe63dbfe"}, {"problem": 33, "code": "(fn[l n]\n (mapcat #(take n (repeat %)) l))\n#_(fn rep-seq [s n] \n(mapcat #(repeat n %)s))", "user": "52faf67ce4b047fd55837005"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "54ba9ee8e4b0ed20f4ff6eb7"}, {"problem": 33, "code": "(fn[input times](apply concat (map #(repeat times %1) input)))", "user": "563c6ebae4b0bfe05bf11834"}, {"problem": 33, "code": "(fn [coll n] (reduce #(reduce conj %1 (replicate n %2)) [] coll))", "user": "58172161e4b0c0e9c07b8389"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "513f1f18e4b051389b345b3d"}, {"problem": 33, "code": "(fn [in times] \n  (loop [in in out ()]\n    (if (empty? in)\n      out\n      (recur (rest in) (concat out (repeat times (first in)))\n      )\n    )\n  )\n)", "user": "58186016e4b0c0e9c07b83ad"}, {"problem": 33, "code": "#(for [x %1 y (repeat %2 x)] y)", "user": "580d7de3e4b0849f6811b73d"}, {"problem": 33, "code": "#(for [x %1 y(repeat %2 x)]y)", "user": "580d7e53e4b0849f6811b73e"}, {"problem": 33, "code": "(fn f33 [coll x]\n  (mapcat #(replicate x %) coll))", "user": "55634f38e4b0c656e3ff17e8"}, {"problem": 33, "code": "(fn [coll n]\n    (mapcat #(repeat n %) coll))", "user": "500d3160e4b05f7c30cfa6a1"}, {"problem": 33, "code": "(fn [a b] (mapcat (partial repeat b) a))", "user": "5816ad6de4b0c0e9c07b8378"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "58134ba8e4b0f478707a060b"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "57f3b841e4b0511f1d294e0f"}, {"problem": 33, "code": "(fn\n  [s n]\n  (reduce\n   (fn [p c]\n     (into p (repeat n c))\n     )\n   []\n   s\n   )\n  )", "user": "57f55632e4b0903ccab3dcf1"}, {"problem": 33, "code": "(fn [coll c] \n  (mapcat #(repeat c %) coll))", "user": "57762e67e4b0979f89651630"}, {"problem": 33, "code": "(fn [lst n]\n\t(mapcat #(repeat n %1) lst))", "user": "5803ba6de4b0a837a8b30c95"}, {"problem": 33, "code": "#(reduce (fn [r e] (apply conj r (repeat %2 e))) [] %1)", "user": "57bc50c7e4b05aa3c4741c40"}, {"problem": 33, "code": "(fn [s n] (mapcat #(take n (repeat %)) s))", "user": "5812eb8fe4b0f478707a0602"}, {"problem": 33, "code": "(fn [coll n]\n   (reduce\n     (fn [ret item]\n       (into ret (repeat n item)))\n     [] coll)\n   )", "user": "55b2505be4b0da326a65cf7d"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "581b19e7e4b04b46fc4b0ec4"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "581e61b0e4b04b46fc4b0f28"}, {"problem": 33, "code": "(fn [sq times]\n    (apply concat (map #(take times (iterate identity %)) sq)))", "user": "581a5fdbe4b0e114eb51a002"}, {"problem": 33, "code": "(fn [xs n] (reduce #(into %1 (repeat n %2)) [] xs))", "user": "563e1c0ee4b0da801c4e4665"}, {"problem": 33, "code": "(fn repl-elements [xs n]\n  (reduce (fn [acc x] (concat acc (repeat n x))) [] xs))", "user": "5687b6abe4b0dcc4269f4061"}, {"problem": 33, "code": "#(apply mapcat vector (repeat %2 %))", "user": "58173722e4b0c0e9c07b838a"}, {"problem": 33, "code": "(fn dup [in n]\n  (apply concat (map #(repeat n %) in))\n  )", "user": "5820924ee4b04b46fc4b0f58"}, {"problem": 33, "code": "(fn [xs i]\n  (mapcat #(repeat i %) xs))\n; (fn [xs i]\n;  (mapcat (fn [x] (repeat i x)) xs))", "user": "56255e2de4b00a550fc90297"}, {"problem": 33, "code": "(fn [x v]\n  (apply concat (apply map list (#(repeat %2 %) x v))))", "user": "56193c6ee4b053970a773af2"}, {"problem": 33, "code": "(fn replicate-seq\n  [seq times]\n  (loop [[h & t] seq\n         accum []]\n    (let [new-accum (loop \n      [count times\n       inner-accum accum]\n       (if (= count 0)\n           inner-accum\n           (recur (- count 1) (conj inner-accum h))))]\n      (if (nil? t)\n          (into () (reverse new-accum))\n          (recur t new-accum)))))", "user": "58152157e4b0f478707a0631"}, {"problem": 33, "code": "(fn\n  [ls i]\n  (apply concat (map #(repeat i %) ls)))", "user": "581b4d3be4b04b46fc4b0ec6"}, {"problem": 33, "code": "#(mapcat (fn[x] (repeat %2 x)) %1)", "user": "5821b018e4b04b46fc4b0f80"}, {"problem": 33, "code": "(fn [c n]\n    (reduce\n        #(concat %1 (repeat n %2))\n        `()\n        c))", "user": "57ae3345e4b0fbc9809a271e"}, {"problem": 33, "code": "(fn replicate2 [seq n]\n  (reduce #(into  %1 (take n (repeat %2))) () (reverse seq)))", "user": "5804d5afe4b0a837a8b30cad"}, {"problem": 33, "code": "(fn [l r] \n  \t(loop [fin [] l l]\n        (if (empty? l)\n            fin\n         \t(recur \n             \t(concat fin (repeat r (first l)))\n             \t(rest l)\n             )\n        )\n    )\n)", "user": "5821dbb9e4b04b46fc4b0f86"}, {"problem": 33, "code": "(fn [x y] (reduce concat (map #(take y(iterate identity %))x)))", "user": "581e76dfe4b04b46fc4b0f29"}, {"problem": 33, "code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "user": "58217fbde4b04b46fc4b0f78"}, {"problem": 33, "code": "(fn replicate [xs a]\n  (reduce concat (map #(take a (repeat %)) xs)))", "user": "58171a9ae4b0c0e9c07b8387"}, {"problem": 33, "code": "(fn\n  [c i]\n  (mapcat #(repeat i %) c))", "user": "581829cce4b0c0e9c07b83a9"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "5823c717e4b051871117beb2"}, {"problem": 33, "code": "(fn [sq cnt] (loop [acc [] h (first sq) rst (rest sq)]\n               (if (nil? h)\n                 acc\n                 (let [accd (loop [ac acc ct cnt]\n                              (if (= ct 0)\n                                ac\n                                (recur (conj ac h) (dec ct))))]\n                   (recur accd (first rst) (rest rst))))))", "user": "58225587e4b04b46fc4b0f94"}, {"problem": 33, "code": "(fn [my-seq n] (mapcat #(repeat n %) my-seq))", "user": "5784ff88e4b0ebec4cfb74d4"}, {"problem": 33, "code": "#(mapcat (fn [item]                                                      \n             (take %2 (repeat item)))                                              \n          %1)", "user": "524dacc9e4b0a16e35cf6df8"}, {"problem": 33, "code": "#(if (= 1 %2) %1 (apply interleave (repeat %2 %1)))", "user": "58247423e4b051871117bec5"}, {"problem": 33, "code": "(fn [s n]\n  (if (= n 1)\n    s\n  \t(apply interleave (repeat n s))))", "user": "581e8b86e4b04b46fc4b0f2b"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "582089fbe4b04b46fc4b0f57"}, {"problem": 33, "code": "#(mapcat (fn [n r] (repeat r n))  % (repeat %2))", "user": "500e3238e4b068062f6e8d8f"}, {"problem": 33, "code": "(fn [xs n] (sequence\n  (reduce (fn [ys y] (apply (partial conj ys) (repeat n y))) [] xs)))", "user": "582835cbe4b051871117bf30"}, {"problem": 33, "code": "(fn [x n] (reduce concat (map #(take n (repeat n %)) x)))", "user": "5820cca0e4b04b46fc4b0f62"}, {"problem": 33, "code": "(fn [x n]\n  (if (= n 1)\n    x\n    (apply interleave (take n (repeat x)))\n  )\n)", "user": "58224c53e4b04b46fc4b0f92"}, {"problem": 33, "code": "#(apply concat (map (fn [t](repeat %2 t)) %))", "user": "552f6e8ee4b076ab5578f802"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "563f0fdae4b08d4f616f5ece"}, {"problem": 33, "code": "(fn [xs n]\n    (mapcat #(repeat n %) xs))", "user": "54ca35c6e4b057c6fda3a254"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "507ff90fe4b089ade05efbd9"}, {"problem": 33, "code": "(fn [s n] (reduce concat '() (map #(vec (repeat n %)) s)))", "user": "5710140fe4b09c608db7042e"}, {"problem": 33, "code": "(fn [coll n]\n   (mapcat #(repeat n %)\n           coll))", "user": "5808ee16e4b0a837a8b30d16"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "581dad0ae4b04b46fc4b0f17"}, {"problem": 33, "code": "(fn [c d]\n  (reduce\n   (fn [a b]\n     (concat a (repeat d b))) () c))", "user": "5829bc55e4b051871117bf49"}, {"problem": 33, "code": "(fn [s freq]\n  (reduce (fn [acc l]\n            (concat acc l))\n          '()\n          (map (fn [element]\n                 (repeat freq element))\n               s)))", "user": "5829d588e4b051871117bf4a"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))\n\n;#(mapcat (fn [item]                                                      \n;             (take %2 (repeat item)))                                              \n;          %1)\n\n\n;(fn [s n]\n;  (mapcat (partial repeat n) s))", "user": "58299e03e4b051871117bf46"}, {"problem": 33, "code": "(fn nduplicate [coll n]\n\t(if (= n 1) coll\n\t(apply interleave (repeat n coll)))\n)", "user": "525d44bfe4b0cb4875a45d6d"}, {"problem": 33, "code": "(fn [s replication]\n  (mapcat #(repeat replication %) s))", "user": "5665ef78e4b0e91d5f5c5664"}, {"problem": 33, "code": "(fn [coll rep-nth]\n   (mapcat #(repeat rep-nth (identity %)) coll))", "user": "581badbde4b04b46fc4b0ed9"}, {"problem": 33, "code": "(fn [coll n]\r\n  (mapcat (partial repeat n) coll))", "user": "56f514cee4b046a417f92068"}, {"problem": 33, "code": ";#(loop [x % y %2]\n;  (let [z %]\n;    (if (= 1 y)\n;      (sort x)\n;      (recur (into x z) (dec y)))))\n\n#(mapcat (fn [input](repeat %2 input)) %1)", "user": "582c526ae4b051871117bf88"}, {"problem": 33, "code": "(fn [s n]\n  (apply concat (map #(repeat n %) s)))", "user": "5813e208e4b0f478707a061b"}, {"problem": 33, "code": "(fn[c n](mapcat #(repeat n%)c))", "user": "58303fc3e4b051871117c006"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %1) xs))", "user": "58327a08e4b089d5ab817c7c"}, {"problem": 33, "code": "(fn [vec n]\n  (mapcat #(repeat n %1) vec))", "user": "4fec0824e4b0681fd128dc9c"}, {"problem": 33, "code": "#(reduce  (fn [coll x] (concat coll (repeat %2 x))) () %)", "user": "582290b5e4b04b46fc4b0fa0"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(take n (iterate identity %)) coll))", "user": "583166c1e4b051871117c025"}, {"problem": 33, "code": "(fn [s t] \n\t\t(mapcat #(repeat t %) s)\n\t)", "user": "5810b899e4b0f478707a05d8"}, {"problem": 33, "code": "(fn n-rep [s n]\n  (mapcat #(repeat n %) s))", "user": "582a5174e4b051871117bf59"}, {"problem": 33, "code": "(fn [xs n]\n  (reduce concat (map #(repeat n %) xs))\n  )", "user": "58334d18e4b089d5ab817c97"}, {"problem": 33, "code": "(fn [xs n] (mapcat \n    #(repeat n %) xs))", "user": "58335c22e4b089d5ab817c9a"}, {"problem": 33, "code": "(fn [s c]\n\t(mapcat (fn [x] (repeat c x)) s)  \n)", "user": "54aa373de4b09f271ff37cb6"}, {"problem": 33, "code": "(fn [x n]\n  (reverse\n    (reduce #(into %1 (repeat n %2)) '() x)))", "user": "5835bc73e4b089d5ab817ce9"}, {"problem": 33, "code": "(fn [col n] (reduce #(apply conj %1 (repeat n %2)) [] col))", "user": "56e1122fe4b03a7c14b85a20"}, {"problem": 33, "code": "(fn [s t] (apply concat (map (fn [item] (repeat t item)) s )))", "user": "582dc562e4b051871117bfcb"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "58375635e4b089d5ab817d14"}, {"problem": 33, "code": "(fn dupseq [x times]\n  (loop [coll x\n         result '()]\n    (if (empty? coll)\n      (reverse result)\n      (recur (rest coll)\n             (apply conj result (repeat times (first coll)))))))", "user": "55a12cb1e4b0acc240e3150d"}, {"problem": 33, "code": "(fn [lst n] \n  (if (= n 1) lst (apply interleave (take n (repeat lst))))\n  )", "user": "5838337de4b089d5ab817d24"}, {"problem": 33, "code": "(fn rep-seq [sq n]\n  (apply concat\n         ( (fn rp-sq [sq n]\n  (if (empty? sq)\n    sq\n    (cons (take n (iterate (fn x [y] y) (first sq))) (rp-sq (rest sq) n))\n    )) sq n)\n         ))", "user": "580f9585e4b0f478707a05b5"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "55c66ffee4b0e31453f649c2"}, {"problem": 33, "code": "(fn [lis tim]\n  (reduce concat (map #(vec (repeat tim %)) lis)))", "user": "58384bc4e4b089d5ab817d27"}, {"problem": 33, "code": "(fn replic [coll n]\n  (reduce\n   (fn reducer [acc elem]\n     (apply conj acc (repeat n elem)))\n   []\n   coll))", "user": "5779556de4b0979f8965166e"}, {"problem": 33, "code": "(fn [x c]\n  (loop [x x z []]\n    (if (empty? x) z\n      (recur (rest x) (into z (repeat c (first x)))))))", "user": "5839f079e4b089d5ab817d48"}, {"problem": 33, "code": "#(apply concat (map (fn [input](repeat %2 input)) %1))", "user": "53d8da61e4b0e771c3025471"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "5835cb06e4b089d5ab817cea"}, {"problem": 33, "code": "(comp (partial apply concat) #(map (partial repeat %2) %1))", "user": "583a360de4b089d5ab817d4f"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "5835a222e4b089d5ab817ce5"}, {"problem": 33, "code": "(fn rep [x n] (mapcat #(repeat n %) x))", "user": "57235dc4e4b0c5bde472c0e2"}, {"problem": 33, "code": "(fn \n  [coll num]\n  (mapcat #(repeat num %) coll))", "user": "582cbf48e4b051871117bfa6"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce concat (map #(take n (repeat %)) coll)))", "user": "580d1da7e4b0849f6811b72f"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "583e27e2e4b089d5ab817daa"}, {"problem": 33, "code": "(fn [c x] (reduce #(concat % (repeat x %2)) [] c))", "user": "5787ce76e4b0ebec4cfb750e"}, {"problem": 33, "code": "(fn rep [coll i] (reduce concat (map #(take i (repeat %)) coll)))", "user": "583f2e4de4b089d5ab817dcb"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "583e02fce4b089d5ab817da5"}, {"problem": 33, "code": "#(reduce concat (map (partial take %2) (map (partial iterate identity) %1)))", "user": "583c8bd4e4b089d5ab817d81"}, {"problem": 33, "code": "(fn [coll cnt] (mapcat #(repeat cnt %) coll))", "user": "53bd476ae4b0d9a98559a6ca"}, {"problem": 33, "code": "(fn [x n] (mapcat #(repeat n %) x))", "user": "57ffacd9e4b0a837a8b30c26"}, {"problem": 33, "code": "(fn [coll n]\n (mapcat #(repeat n %) coll)\n)", "user": "583667c7e4b089d5ab817cfb"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "58391c94e4b089d5ab817d35"}, {"problem": 33, "code": "(fn f [ li n]\n  (mapcat (partial repeat n) li))", "user": "4e6a5728535d8ccf87e9fecf"}, {"problem": 33, "code": "#(mapcat (fn[a] (repeat %2 a)) %1)", "user": "583e1558e4b089d5ab817da9"}, {"problem": 33, "code": "(fn [seqn multiple] (reduce concat (list) (map #(repeat multiple %) seqn)))", "user": "584574a1e4b089d5ab817e69"}, {"problem": 33, "code": "(fn [s n]\n  (loop [resp [] src s]\n    (if (empty? src) resp\n      (recur (concat resp (repeat n (first src))) (rest src)))))", "user": "582589b2e4b051871117bedd"}, {"problem": 33, "code": "#(mapcat (fn [s] (take %2 (repeat s))) %1)", "user": "582d7569e4b051871117bfbe"}, {"problem": 33, "code": "(fn [x n] (\n            concat (\n                     reduce #(loop [a %1 b %2 c n] (\n                                                     if (> c 0) (recur (conj a b) b (dec c)) a\n                                                                )\n                                                   ) [] x\n                            )\n                   )\n  )", "user": "5842d06be4b089d5ab817e22"}, {"problem": 33, "code": "(fn [coll num] (mapcat (fn [arg] (repeat num arg)) coll)  )", "user": "5804b491e4b0a837a8b30cac"}, {"problem": 33, "code": "#(if (= 1 %2) \n   %1\n   (apply interleave (repeat %2 %)))\n\n; golf\n;#(mapcat (partial repeat %2) %)", "user": "54d341f7e4b0e8a36923e603"}, {"problem": 33, "code": "(fn [coll cnt] (apply concat (map #(replicate cnt %) coll)))", "user": "584917a1e4b089d5ab817ec9"}, {"problem": 33, "code": "(fn [v n] (mapcat #(repeat n %) v))", "user": "55a21f1ce4b0acc240e3151f"}, {"problem": 33, "code": "(fn [x n] (if (= n 1) x (apply interleave (repeat n x))))", "user": "57dafe97e4b0bd073c20241c"}, {"problem": 33, "code": "(fn\n  [col n]\n  (let [list (reduce (fn [r x] (into r (repeat n x))) '() col)\n        rev-list (reverse list)] rev-list))", "user": "5843b231e4b089d5ab817e3d"}, {"problem": 33, "code": "#(mapcat (fn [input] (repeat %2 input)) %1)", "user": "57465429e4b009280f9f2b60"}, {"problem": 33, "code": "(fn [a b] (mapcat #(take b (repeat %1)) a))", "user": "579aff09e4b05b1deef9ade7"}, {"problem": 33, "code": "(fn [s n](if (= n 1) s (apply interleave (repeat n s))))", "user": "5849ac5fe4b089d5ab817ed7"}, {"problem": 33, "code": "(fn [x n] (mapcat #(repeat n %) x))", "user": "584dadebe4b0b7285a6f4e44"}, {"problem": 33, "code": "(fn [list times] (mapcat #(repeat times %) list))", "user": "55a5e2f7e4b0acc240e31550"}, {"problem": 33, "code": "(fn [in num] (reduce concat (map #(take num (repeat %)) in)))", "user": "5845720de4b089d5ab817e68"}, {"problem": 33, "code": "(fn seq-repeat\n  [items repeat-count]\n  (reduce #(apply conj %1 (repeat repeat-count %2)) [] items))", "user": "57e9a77ae4b0bfb2137f5b35"}, {"problem": 33, "code": "(fn [coll,time] \n\t(reduce\n\t\t(fn [res,item] \n\t\t\t(concat res (take time (repeat item))))\n\t\t'()\n\t\tcoll))", "user": "583c4482e4b089d5ab817d7e"}, {"problem": 33, "code": "(fn [arr n]\n  (loop [a arr acc []]\n    (if (empty? a)\n      acc\n      (recur (rest a) (into acc (repeat n (first a)))))))", "user": "58408643e4b089d5ab817deb"}, {"problem": 33, "code": "(fn [x n] (mapcat #(repeat n %) x))", "user": "585030cbe4b0b7285a6f4e78"}, {"problem": 33, "code": "(fn [xs times] (mapcat #(repeat times %) xs))", "user": "583dacc2e4b089d5ab817d9f"}, {"problem": 33, "code": "#(mapcat identity (map (fn[item] (repeat %2 item) ) %1))", "user": "5832be57e4b089d5ab817c86"}, {"problem": 33, "code": "(fn [xs n]\n  (mapcat #(repeat n %) xs))\n;; The following works in with clojure 1.7.0\n;#(apply interleave (repeat %2 %1))", "user": "57233cc8e4b0c5bde472c0e1"}, {"problem": 33, "code": "#(apply concat (map (fn [x] (repeat %2 x) ) % ))", "user": "58524875e4b0b7285a6f4ead"}, {"problem": 33, "code": "(fn repli\n  [seqn times]\n  (mapcat #(repeat times %) seqn))", "user": "563f4c47e4b08d4f616f5ed2"}, {"problem": 33, "code": "(fn [col n] (mapcat identity (map #(repeat n %) col)))", "user": "5766fbb7e4b0a07e8fc180b6"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "56f9b953e4b07572ad1a88b9"}, {"problem": 33, "code": "(fn [coll n]\n  (loop [tail coll\n         dups []\n         i 0]\n    (if (empty? tail)\n      dups\n      (if (< i n)\n        (recur tail\n               (conj dups (first tail))\n               (inc i))\n        (recur (rest tail)\n               dups\n               0))\n      )\n    )\n  )", "user": "58562083e4b0f14aab7c86eb"}, {"problem": 33, "code": "(fn \n   [in, n]\n   (reduce \n     (fn \n       [acc, x]\n       (reduce conj acc \n               (repeat n x))) \n     [] \n     in\n     ))", "user": "5856cdd6e4b0f14aab7c86fa"}, {"problem": 33, "code": "(fn [coll n]\n        (loop [f (first coll) t (rest coll) res '()]\n            (if (nil? f)\n                (apply concat (reverse res))\n                (recur (first t) (rest t) (cons (take n (repeatedly (fn [] f))) res)))))", "user": "58354124e4b089d5ab817cd6"}, {"problem": 33, "code": "(fn [vc n]\n(mapcat #(take n (iterate identity %)) vc)\n  )", "user": "57f9b25fe4b0d3187e90094b"}, {"problem": 33, "code": "(fn [l r] \n   (mapcat #(repeat r %1) l))", "user": "56b1b59be4b0982f16b37df2"}, {"problem": 33, "code": "(fn [seq ts]\n  (reduce (fn [memo el]\n            (concat memo (repeat ts el))) `() seq))", "user": "56b6e354e4b0982f16b37e41"}, {"problem": 33, "code": "(fn [l n]\n\n  (mapcat identity (map #(repeatedly n (fn [] %)) l))\n\n   )", "user": "50b25edae4b03ea88043355e"}, {"problem": 33, "code": "(fn [a b]\n   (reduce #(into %1 (repeat b %2)) [] a))", "user": "58455b05e4b089d5ab817e65"}, {"problem": 33, "code": "#(mapcat (fn [x](repeat %2 x)) %1)", "user": "584f5133e4b0b7285a6f4e61"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "585c5b21e4b0f14aab7c8786"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "584278e1e4b089d5ab817e19"}, {"problem": 33, "code": "(fn [vec cnt]\n   (reduce \n      #(concat %1 (repeat cnt %2))\n      () vec))", "user": "57d0e185e4b0bd073c202360"}, {"problem": 33, "code": "#(reduce concat (map (fn [x] (repeat %2 x)) %1))", "user": "585e2e77e4b0f14aab7c87ac"}, {"problem": 33, "code": "#(if (= %2 1) %1  (apply interleave (take %2 (repeat %1))))", "user": "585d40afe4b0f14aab7c8798"}, {"problem": 33, "code": "(fn [x y] (if (= y 1) x (apply interleave (repeat y x) ) ) )", "user": "585bcd51e4b0f14aab7c8771"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "56f5d0efe4b046a417f92078"}, {"problem": 33, "code": "(fn [xs n]\n  (reduce (fn [a b]\n            (concat a (repeat n b))) \n          '() \n          xs))", "user": "55507a1ae4b00713264bd9a7"}, {"problem": 33, "code": "(fn [r t] \n  (apply concat\n         (map (fn [s] (take t (repeat s))) r)))", "user": "58566b42e4b0f14aab7c86f4"}, {"problem": 33, "code": "(fn [x y] (apply mapcat list (repeat y x)))", "user": "57c33eeae4b05aa3c4741cbc"}, {"problem": 33, "code": "(fn replicate-sequence[initial-elements n] \n    (mapcat #(repeat n %) initial-elements))", "user": "57ea4569e4b0bfb2137f5b46"}, {"problem": 33, "code": "#(for [a %1 b (range %2)] a)", "user": "532df9c5e4b019098a6f8b42"}, {"problem": 33, "code": "#(mapcat (fn [vv] (repeat %2 vv)) %1)", "user": "5853582fe4b0b7285a6f4ec5"}, {"problem": 33, "code": "(fn [xs qt] (mapcat #(map (fn [_] %) (range qt)) xs))", "user": "582a2d4fe4b051871117bf55"}, {"problem": 33, "code": "(fn my-replicate [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5852801ee4b0b7285a6f4eb1"}, {"problem": 33, "code": "(fn [sequence times]\n  ((fn inner [result n rest1]\n     (if (not (empty? rest1))\n       (if (> n 1)\n         (inner (conj result (first rest1))\n                (dec n)\n                rest1)\n         (inner (conj result (first rest1))\n                times\n                (rest rest1)))\n       (reverse result)))\n   '() times sequence))", "user": "58637f03e4b0f14aab7c881e"}, {"problem": 33, "code": "(fn [s n]\n  (reduce (fn [acc x]\n            (into acc (repeat n x)))\n          []\n          s))", "user": "58543a59e4b07779d46863f5"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "585e7c60e4b0f14aab7c87b3"}, {"problem": 33, "code": "(fn [coll x] (reduce concat (map #(replicate x %) coll)))", "user": "585481e0e4b07779d46863fe"}, {"problem": 33, "code": "(fn [col n] (mapcat #(repeat n %) col))", "user": "51456858e4b0e88796073408"}, {"problem": 33, "code": "(fn my-replicate [coll num-repeats]\n  (loop [x coll res '()]\n    (if (empty? x)\n      res\n      (recur (rest x) (concat res (take num-repeats (repeat (first x)))))\n    )\n  )\n)", "user": "569e3175e4b0542e1f8d1484"}, {"problem": 33, "code": "(fn [all-values repeat-number]\n  (reduce #(concat %1 (repeat repeat-number %2)) [] all-values))", "user": "5863eda2e4b0f14aab7c8836"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "55357ab5e4b09218d5f44faf"}, {"problem": 33, "code": "(fn [c n] \n  (reduce #(into %1 (repeat n %2)) [] c))", "user": "586615e6e4b0f14aab7c8858"}, {"problem": 33, "code": "(fn replicate-sequence\n  [coll n]\n  (let [copy-fn (fn [x]\n                  (loop [r [] i n]\n                    (if (= 0 i)\n                      r\n                      (recur (conj r x) (dec i)))))]\n    (mapcat copy-fn coll)))", "user": "547bf82de4b0c51c1f4d72e1"}, {"problem": 33, "code": "(fn [x r] (mapcat #(repeat r %) x))", "user": "5866b999e4b0f14aab7c886b"}, {"problem": 33, "code": "#(reduce concat (map (fn [s] (take %2 (repeat s))) %1))", "user": "58617a1fe4b0f14aab7c87f0"}, {"problem": 33, "code": "; Below complains about interleave not accepting 1 argument in the test case\n; (= (__ [4 5 6] 1) '(4 5 6))\n;(fn [arg times] (apply interleave (repeat times arg)))\n(fn [arg times]\n  (case times\n    1 arg\n    (apply interleave (repeat times arg))\n   )\n)", "user": "5722bf99e4b0c5bde472c0d6"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "58522b00e4b0b7285a6f4eac"}, {"problem": 33, "code": "(fn [s x]\n    (reduce #(concat %1 (repeat x %2)) [] s))", "user": "586b6753e4b01531a375e956"}, {"problem": 33, "code": "(fn [arg1 arg2] (mapcat #(repeat arg2 %) arg1))", "user": "585d2c1fe4b0f14aab7c8797"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "586b6f13e4b01531a375e959"}, {"problem": 33, "code": "(fn [the-list n] (mapcat #(repeat n %) the-list))", "user": "586a663ce4b0f14aab7c88be"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "586bc870e4b01531a375e964"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "4e11b92a535d04ed9115e7cb"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "586d4d63e4b01531a375e98e"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll)\n  )", "user": "52dc7344e4b09f7907dd13cf"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %1) coll))", "user": "586c6462e4b01531a375e97b"}, {"problem": 33, "code": "#(mapcat repeat (repeat (count %1) %2) %1)", "user": "5840c068e4b089d5ab817df8"}, {"problem": 33, "code": "(fn [x y] (if (not= y 1) (#(apply interleave (repeat %2 %1)) x y) x))", "user": "5857d27de4b0f14aab7c8710"}, {"problem": 33, "code": "(fn[coll n](apply concat (map #(repeat n %) coll)))", "user": "54bca097e4b0ed20f4ff6ed4"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5854d1c0e4b07779d468640a"}, {"problem": 33, "code": "(fn repl [lst n]\n  (let [repli (fn repli[lst c]\n                (if (empty? lst)\n                  nil\n                  (if (> c 0)\n                    (cons (first lst) (repli lst (dec c)))\n                    (repli (rest lst) n))))]\n    (repli lst n)))", "user": "586c5a34e4b01531a375e97a"}, {"problem": 33, "code": "(fn [xs n]\n  (mapcat #(repeat n %) xs))", "user": "4e7be091535db169f9c796ba"}, {"problem": 33, "code": "(fn [s n] (mapcat #(take n (repeat %)) s))", "user": "5845f14ee4b089d5ab817e7e"}, {"problem": 33, "code": "(fn [a b] (mapcat #(repeat b %) a))", "user": "586e47dee4b01531a375e9a9"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "52658b67e4b03e8d9a4a710d"}, {"problem": 33, "code": "(fn [xs n](apply mapcat list (repeat n xs)))", "user": "55597b84e4b0deb715856e36"}, {"problem": 33, "code": "(fn [s i] (reduce (fn [r e] (concat r (replicate i e))) [] s))", "user": "5526ecc4e4b0ffed3738f928"}, {"problem": 33, "code": "(fn replic\n\n  ([a b]\n\n   (replic a b 1 (count a)))\n\n  ([a b c stop]\n\n   (if (> c stop)\n\n     a\n\n     (replic (concat (drop 1 a) (take b (repeat (first a)))) b (inc c) stop))))", "user": "586b6a0ae4b01531a375e957"}, {"problem": 33, "code": "(fn [l n] (apply concat (map #(do (repeat n %)) l)))", "user": "58731176e4b01531a375ea2a"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "584d8724e4b0b7285a6f4e3e"}, {"problem": 33, "code": "(letfn [(rep [n r] (if (= n 0) '() (cons r (rep (- n 1) r))))\n      (f [sq n] (apply concat (map (partial rep n) sq)))]\n      f)", "user": "54d95ce8e4b024c67c0cf74a"}, {"problem": 33, "code": "(fn replicate-a-sequence\n  [xs times]\n  (loop [[x & rest :as sequence] xs\n         result []]\n    (if (empty? sequence)\n      (seq result)\n      (recur rest  (into result (repeat times x))))))", "user": "57d174ede4b0bd073c20236c"}, {"problem": 33, "code": "(fn [c, n] (apply concat (map #(for [i (range n)] %) c)))", "user": "587294f0e4b01531a375ea1e"}, {"problem": 33, "code": "(fn [l a]\n  (seq (reduce \n    (fn [x y]\n    (into x (take a (repeat y))))\n    [] l)))", "user": "57fbd83ee4b0d3187e90097b"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5872935ce4b01531a375ea1d"}, {"problem": 33, "code": "(fn [coll n] (reduce #(concat %1 (repeat n %2)) [] coll))", "user": "56403765e4b08d4f616f5edc"}, {"problem": 33, "code": "(fn [a b] \n  (if (> b 1)\n    (apply interleave (repeat b a))\n    a))", "user": "54012b48e4b0de5c41848620"}, {"problem": 33, "code": "#(reduce (fn [accum item]\n           (concat accum (repeat %2 item)))\n         []\n         %1)", "user": "58740c18e4b01531a375ea49"}, {"problem": 33, "code": "(fn [l r] (mapcat (partial repeat r) l))", "user": "58716570e4b01531a375e9fe"}, {"problem": 33, "code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll))\n  )", "user": "5727031ee4b0c5bde472c12f"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "51a132cee4b0b292b01ee3ff"}, {"problem": 33, "code": "(fn [c r] (mapcat #(repeat  r %) c))", "user": "586b6d51e4b01531a375e958"}, {"problem": 33, "code": "(fn [x n]\n  (loop [coll x\n         acc []]    \n   (if (empty? coll)\n     acc\n     (recur (rest coll) (apply conj acc (repeat n (first coll))))\n   )\n  )\n)", "user": "5877e40ee4b01531a375eaab"}, {"problem": 33, "code": "(fn [x rep]\n  (seq\n  \t(reduce\n     (fn [r i]\n       (concat r (repeat rep i)))\n     () x)))", "user": "5873dd1ce4b01531a375ea42"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5879d577e4b01531a375ead8"}, {"problem": 33, "code": "(fn [sq n] (mapcat #(repeat n %) sq))", "user": "563c7f98e4b0bfe05bf11836"}, {"problem": 33, "code": "#(for [x %1 y (range %2)] x)", "user": "5821160de4b04b46fc4b0f6c"}, {"problem": 33, "code": "(fn [c n]\n  (mapcat (fn [i] (repeat n i)) c))", "user": "52506e4ce4b0541d1855b82d"}, {"problem": 33, "code": "(fn [xs n]\n    (reduce #(concat %1 (repeat n %2)) [] xs))", "user": "4ff9ea75e4b0678c553fc3b3"}, {"problem": 33, "code": "#(reduce (fn [l i] (concat l (take %2 (repeat i)))) [] %1)", "user": "5871175de4b01531a375e9f7"}, {"problem": 33, "code": "(fn [s n] (reduce concat (for [x s] (repeat n x))))", "user": "5766bab8e4b0a07e8fc180b1"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "50385746e4b0803468ea2c6d"}, {"problem": 33, "code": "(fn [coll times] \n  (if (<= times 1)\n    coll\n    (apply interleave (repeat times coll))))", "user": "58800fd4e4b0f1effa3b7606"}, {"problem": 33, "code": "(fn [coll times]\n  (loop [acc (list)\n         [x & tail :as all] coll]\n    (if (empty? all)\n      acc\n      (recur (concat acc (repeat times x)) tail))))", "user": "587100d6e4b01531a375e9f0"}, {"problem": 33, "code": "(fn [s n]\n  (for [elem s n (range n)] elem))", "user": "57ea2c91e4b0bfb2137f5b42"}, {"problem": 33, "code": "(fn [x n](apply concat (map #(repeatedly n (constantly %)) x)))", "user": "53b42472e4b047364c0444b2"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5865c8f0e4b0f14aab7c884e"}, {"problem": 33, "code": "(fn [coll n]\n  (reverse\n        (reduce #(into %1 (take n (repeatedly (fn [] identity %2))))\n                '()\n                coll)))", "user": "587ef226e4b052da650a6354"}, {"problem": 33, "code": "(fn [x n]\n  (loop [acc '()\n         [head & tail :as coll] x]\n    (cond\n      (empty? coll) acc\n      (not= nil head) (recur (concat acc (repeat n head)) tail)\n      )))", "user": "5881335ce4b0f1effa3b762e"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5880e38fe4b0f1effa3b7625"}, {"problem": 33, "code": "(fn [s n] (mapcat #(take n (repeat %)) s))", "user": "587ee260e4b052da650a6353"}, {"problem": 33, "code": "(fn [s num-repeat] (reduce concat (map #(repeat num-repeat %) s)))", "user": "4dbd7107535d020aff1edf42"}, {"problem": 33, "code": "(fn [l n]\n  (reduce (fn [ret curr]\n            (apply conj ret (repeat n curr)))\n          []\n          l))", "user": "5883584ae4b0f1effa3b7674"}, {"problem": 33, "code": "(fn [l n]\n  (reduce #(concat %1 (map (fn [a] %2) (range n))) [] l))", "user": "58844d43e4b0f1effa3b7696"}, {"problem": 33, "code": "(fn rep [s c]  (reduce concat (map #(repeat c %) s)))", "user": "58840023e4b0f1effa3b768b"}, {"problem": 33, "code": "(fn [a b] (mapcat #(repeat b %) a))", "user": "58467633e4b089d5ab817e90"}, {"problem": 33, "code": "(fn [l n] (reduce concat (map #(repeat n %) l)))", "user": "5650082fe4b0284900eef6b7"}, {"problem": 33, "code": "#(mapcat (fn [v] (repeat %2 v)) %1)", "user": "58852909e4b0f1effa3b76af"}, {"problem": 33, "code": "#(reduce concat (map (fn [x] (map (fn [y] x) (range %2))) %1))", "user": "5884e807e4b0f1effa3b76a6"}, {"problem": 33, "code": "(fn [lst nm]\n  (reduce into []\n               (map #(take nm (repeat %)) lst)))", "user": "587f8393e4b0f1effa3b75f2"}, {"problem": 33, "code": "(fn [coll n]\n  (loop [[head & remain] coll acc '()]\n         (if head\n         \t(recur remain (concat (repeat n head) acc))\n           (reverse acc))))", "user": "5883920ee4b0f1effa3b767e"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5882ac4ee4b0f1effa3b7661"}, {"problem": 33, "code": "#(reduce concat (map (fn [i] (repeat %2 i)) %1))", "user": "5875daaee4b01531a375ea74"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "4fb85651e4b081705acca2d7"}, {"problem": 33, "code": "(fn repl [col n]\n  (mapcat \n    (fn [val]\n      (map\n        (fn [_] val)\n        (range 0 n))) \n    col))", "user": "5887518ae4b0f1effa3b76f5"}, {"problem": 33, "code": "#(reduce concat ((fn [s,n] (map (fn [i] (repeat n i)) s)) %1 %2))", "user": "5876c0c5e4b01531a375ea8e"}, {"problem": 33, "code": "#(apply concat (map (fn [r] (repeat %2 r)) %1))", "user": "5885e90de4b0f1effa3b76c5"}, {"problem": 33, "code": "(fn f [s n]\n  (let [f*\n        (fn [acc s*]\n          (concat acc (repeat n s*)))]\n(reduce f* [] s)))", "user": "5840178ee4b089d5ab817de0"}, {"problem": 33, "code": "(fn replicate-sequence\n  ([s amount] (replicate-sequence s amount '()))\n  ([s amount result]\n   (if (= s nil)\n     result\n     (recur (next s) amount (mapcat identity [result (take amount (repeat (first s)))]))\n     )))", "user": "5888b75fe4b0f1effa3b771b"}, {"problem": 33, "code": "(fn [seq x]\n  (reduce (fn\n            [acc item]\n            (concat acc (\n                         (fn [item x]\n                           (loop [i 0\n                                  new-vector []]\n                             (if (= i x)\n                               new-vector\n                               (recur (inc i) (conj new-vector item)))))\n                         item x))) [] seq))", "user": "5885bea8e4b0f1effa3b76bf"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "585dbe41e4b0f14aab7c879f"}, {"problem": 33, "code": "(fn [ls x]\n  (loop\n    [\n     accu []\n     cnt x\n     res ls\n     ]\n    \n    (if (empty? res)\n      accu\n      (if (= cnt 0)\n        (recur accu x (rest res))\n        (recur (conj accu (first res)) (dec cnt) res)\n      )\n    )\n  )\n)", "user": "57d031d6e4b0bd073c202354"}, {"problem": 33, "code": "(fn r [coll n] (reduce #(concat %1 (repeat n %2)) [] coll))", "user": "578d459ee4b0ebec4cfb7567"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "585a7cb2e4b0f14aab7c874e"}, {"problem": 33, "code": "(fn [lst n]\n         (mapcat #(repeat n %) lst))", "user": "588e6a17e4b00487982d518c"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "58896e5ce4b0f1effa3b773e"}, {"problem": 33, "code": "#(apply concat (map repeat (repeat %2) %))", "user": "576e607ae4b0979f89651579"}, {"problem": 33, "code": "(fn [x n]\n  (loop [cx x, nx []]\n    (if (empty? cx)\n      nx\n      (recur (rest cx) (concat nx (repeat n (first cx))))\n      )\n    )\n  )", "user": "588fb3a7e4b00487982d51b9"}, {"problem": 33, "code": "(fn [l x] (mapcat #(repeat x  %) l))", "user": "54dbc6ebe4b024c67c0cf773"}, {"problem": 33, "code": "(fn [x y] (apply concat (map #(repeat y %) x)))", "user": "5886e8bde4b0f1effa3b76ea"}, {"problem": 33, "code": "#(apply concat (map (fn [i] (repeat %2 i)) %1))", "user": "58923efce4b00487982d521c"}, {"problem": 33, "code": "(fn f [[head & tail] c]\n  (cond\n   (nil? head) (list)\n   :esle (concat (repeat c head) (f tail c)\n   )))", "user": "57de9169e4b0bd073c202454"}, {"problem": 33, "code": "(fn my-replicate [coll n]\n   (apply concat (map (fn [e] (repeat n e)) coll)))", "user": "5889dc13e4b0f1effa3b774a"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "58949f8de4b00487982d525e"}, {"problem": 33, "code": "(fn [input x]\n  (reduce (fn [container value]\n            (loop [iter x, result container]\n              (if (= iter 0) result\n                  (recur (dec iter) (conj result value)))))\n          [] input))", "user": "589037b4e4b00487982d51d0"}, {"problem": 33, "code": "(fn [coll n_repeat]\n  (seq (reduce into [] (map (fn [item]\n         (loop [i n_repeat acc []]\n           (if (= i 0)\n             acc\n             (recur (dec i) (conj acc item)))))\n       coll))))", "user": "588f500ae4b00487982d51a4"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(take n (repeat %)) xs))", "user": "552b6ddbe4b0ffed3738f965"}, {"problem": 33, "code": "(fn [ls nm] (mapcat #(repeat nm %) ls))", "user": "58904720e4b00487982d51d1"}, {"problem": 33, "code": "(fn [inseq n] (mapcat #(repeat n %) inseq))", "user": "5862a8a9e4b0f14aab7c880f"}, {"problem": 33, "code": "#(apply concat (map (partial repeat %2) %1))", "user": "587cbebbe4b01531a375eb24"}, {"problem": 33, "code": "(fn f [seq n] (mapcat #(repeat n %) seq))", "user": "5884f77ee4b0f1effa3b76a9"}, {"problem": 33, "code": "(fn [lst n]\n  (let [n-range (range n)]\n    (mapcat (fn [x]\n              (map (fn [m] x)\n                   n-range))\n            lst)))", "user": "5895477fe4b00487982d527c"}, {"problem": 33, "code": "(fn n-dupe [xs n]\n  (if (empty? xs) nil\n    (concat\n     (loop [d '() x n]\n       (if (= x 0)\n         d\n         (recur\n          (conj d (first xs)) (dec x))))\n     (n-dupe (rest xs) n))))", "user": "5888f271e4b0f1effa3b7726"}, {"problem": 33, "code": "(fn [s n] (reduce concat (map #(repeat n %) s)))", "user": "522724bde4b04e78ff2e19aa"}, {"problem": 33, "code": "(fn [coll num]   \n    (loop [result () coll coll]\n        (if (empty? coll)\n            result\n            (recur (concat result (repeat num (first coll))) (rest coll)))))", "user": "5896735fe4b00487982d529d"}, {"problem": 33, "code": "(fn repeat-elems\n    [s n]\n    (mapcat #(take n (repeat %)) s))", "user": "587bead1e4b01531a375eb0d"}, {"problem": 33, "code": "(fn [c t] (mapcat #(repeat t %) c))", "user": "544673c0e4b032a45b8693b0"}, {"problem": 33, "code": "(fn [coll mul]\n  (apply concat (map #(repeat mul %) coll))\n  )", "user": "56f1b558e4b04a395b9a049a"}, {"problem": 33, "code": "(fn [c r]  (mapcat #(repeat r %) c))", "user": "53b05a75e4b047364c044482"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %)s))", "user": "58983e3fe4b00487982d52ce"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "589a8dace4b00487982d5311"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5885cc62e4b0f1effa3b76c1"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "585a7b05e4b0f14aab7c874d"}, {"problem": 33, "code": "(fn[v n ](apply concat (map #(repeat n %) v)))", "user": "56c85700e4b0ed865f9758d0"}, {"problem": 33, "code": "(fn\n [se1 cnt]\n  (apply concat \n   (apply map vector\n          (take\n           cnt\n           (repeat se1)))))", "user": "586a657de4b0f14aab7c88bd"}, {"problem": 33, "code": "(fn [xs nb] (mapcat #(repeat nb %)\n                     xs))", "user": "5896ade8e4b00487982d52a9"}, {"problem": 33, "code": "(fn [a b] (apply concat(map #(repeat b %) a)))", "user": "53ada652e4b047364c04446d"}, {"problem": 33, "code": "(fn dupe-each-element-n-times [coll n]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (let [head (first s)\n           tail (rest s)]\n       (nth (iterate #(cons head %) (dupe-each-element-n-times tail n)) n)))))", "user": "5899c54de4b00487982d52fa"}, {"problem": 33, "code": "(fn repseq [mycol repCount] (if (empty? mycol) '() (let [firstElem (first mycol)] (concat (replicate repCount firstElem) (repseq (rest mycol) repCount)))))", "user": "58950f29e4b00487982d5270"}, {"problem": 33, "code": "(fn [c n] (mapcat #(for [x (range n)] %) c))", "user": "52ea7d3ae4b09f7907dd14bf"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5891bddce4b00487982d5201"}, {"problem": 33, "code": "(fn [coll repl] (mapcat #(repeat repl %) coll))", "user": "58987ee9e4b00487982d52d2"}, {"problem": 33, "code": "(fn [s n] (mapcat #(take n (iterate identity %)) s))", "user": "589c6914e4b00487982d535d"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5897dda4e4b00487982d52c8"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5882e8b1e4b0f1effa3b7666"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat #(take n (repeat %)) s))", "user": "589e704ae4b02bd94d917e5e"}, {"problem": 33, "code": "(fn [l b]\n  (reduce #(concat %1 (replicate b %2)) () l))", "user": "589f4387e4b02bd94d917e7b"}, {"problem": 33, "code": "(fn [l n]\n  (mapcat #(repeat n %) l))", "user": "589714cbe4b00487982d52b1"}, {"problem": 33, "code": ";(fn [coll n]\n;  (mapcat (partial repeat n) coll))\n\n#(mapcat (partial repeat %2) %1)", "user": "5771b155e4b0979f896515ba"}, {"problem": 33, "code": "(fn \n  [l n]\n  (reduce (fn [s i] (concat s (repeat n i))) '() l))", "user": "58976bfde4b00487982d52bc"}, {"problem": 33, "code": "(fn [coll n] (apply concat (map #(repeat n %) coll)))", "user": "4fe8b09ee4b07c9f6fd12c6f"}, {"problem": 33, "code": "(fn replicate [c n]\n\t(mapcat #(take n (repeat %)) c))", "user": "58988cbbe4b00487982d52d7"}, {"problem": 33, "code": "(fn [coll times] (mapcat #(repeat times %) coll))", "user": "58a2b57fe4b02bd94d917ede"}, {"problem": 33, "code": "(fn [x n] (mapcat #(repeat %2 %1) x (take (count x) (repeat n))))", "user": "589ec900e4b02bd94d917e65"}, {"problem": 33, "code": "(fn [lst n] (mapcat #(repeat n %) lst))", "user": "5893c64ce4b00487982d524b"}, {"problem": 33, "code": "(fn[x y] (mapcat #(repeat y %) x))", "user": "57887de2e4b0ebec4cfb751c"}, {"problem": 33, "code": "#(for [x %1 y (repeat %2 x)] y)", "user": "589dd2cce4b02bd94d917e48"}, {"problem": 33, "code": "(fn [xs n] (mapcat (fn [elem] (loop [to-add n\n                                     acc '()]\n                                (if (= 0 to-add)\n                                  acc\n                                  (recur (- to-add 1) (conj acc elem))))) xs))", "user": "58a47197e4b01a0c0b2328f9"}, {"problem": 33, "code": "(fn replicate [s n]\n  (if (empty? s)\n    []\n    (let [[x & rest] s]\n      (concat (for [dummy (range n)] x) (replicate rest n)))))", "user": "58a0fc33e4b02bd94d917ea3"}, {"problem": 33, "code": "#(loop [seq %1 n %2 i 0 acc []]\n   (if (= 0 (count seq)) acc\n   (let [acc (conj acc (first seq))]\n     (if (< i (- n 1))\n       (recur seq n (+ i 1) acc)\n       (recur (rest seq) n 0 acc)))))", "user": "58a31ecee4b02bd94d917ee7"}, {"problem": 33, "code": "(fn self [s n]\n  (if (not (empty? s))\n    (concat (repeat n (first s)) (self (rest s) n))))", "user": "58a5a099e4b01a0c0b232918"}, {"problem": 33, "code": "#(reduce into (map  (fn [x] (loop [c 0 r []] (if (= c %2) r (recur (inc c) (conj r x))))) %1))", "user": "584aa803e4b089d5ab817ee9"}, {"problem": 33, "code": "(fn myreplicate [alist times]\n  (apply concat (for [x alist ]\n      (repeat times x) \n      ))\n)", "user": "58a17511e4b02bd94d917eb4"}, {"problem": 33, "code": "(fn [coll ntimes]\n   (apply (partial mapcat vector) (repeat ntimes coll)))", "user": "58a413b5e4b02bd94d917f07"}, {"problem": 33, "code": "(fn [coll cnt] (reduce #(concat %1 (repeat cnt %2)) [] coll))", "user": "5880d686e4b0f1effa3b7623"}, {"problem": 33, "code": "(fn [x n] (reduce concat (map #(take n (repeat %)) x)))", "user": "58a7215de4b01a0c0b23293c"}, {"problem": 33, "code": "(fn replicate-it\n  [a-seq n]\n  (mapcat #(repeat n %) a-seq))", "user": "580d2788e4b0849f6811b730"}, {"problem": 33, "code": "(fn [v n] (apply concat (map #(replicate n %) v)))", "user": "58a9e872e4b01a0c0b232973"}, {"problem": 33, "code": "(fn [col x] (mapcat #(take x (iterate identity % )) col))", "user": "58951903e4b00487982d5274"}, {"problem": 33, "code": "(fn foo [c n] \n  (if (= 1 (count c))\n\t  (repeat n (first c))\n\t  (concat (repeat n (first c)) (foo (rest c) n))\n    )\n  )", "user": "588ce4aee4b05c141a2560a1"}, {"problem": 33, "code": "(fn replicate-each-item [col n-times]\n  (mapcat #(repeat n-times %1) col))", "user": "58884cc6e4b0f1effa3b770e"}, {"problem": 33, "code": "#(if \n   (= %2 1)\n   (seq %1)\n   (apply interleave (repeat %2 %1)))", "user": "54f14aa6e4b024c67c0cf8af"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "589f0087e4b02bd94d917e6d"}, {"problem": 33, "code": "(fn addx\n  ([x y i rl] (cond (empty? x) (seq rl)\n                    (< i y) (recur x y (inc i) (conj rl (first x)))\n                    :else (recur (rest x) y 0 rl)))\n  ([x y]\n   (addx x y 0 [])))", "user": "58a3ba31e4b02bd94d917eff"}, {"problem": 33, "code": "(fn dupn [[x & xs] n]\n  (if (empty? xs)\n    (repeat n x)\n    (concat (repeat n x) (dupn xs n))))", "user": "58a953dae4b01a0c0b232968"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "507eed82e4b06ce648bcdbfe"}, {"problem": 33, "code": "(fn [list mul]\n  (let [mappedList (map #(take mul (repeat %)) list)]\n    (reduce concat mappedList)))", "user": "58a216e8e4b02bd94d917ed1"}, {"problem": 33, "code": "#(for [x %1\n       y (repeat %2 x)]\n   y)", "user": "56391b7ce4b0bfe05bf117ef"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "57689c23e4b0a07e8fc180d6"}, {"problem": 33, "code": "(fn [a b] (mapcat #(repeat b %) a))", "user": "58ad4349e4b0ebc645576c9d"}, {"problem": 33, "code": "(fn [x n] (mapcat #(repeat n %) x))", "user": "58ac513fe4b0005cfeb1a746"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "58b06b7ce4b0ebc645576cdc"}, {"problem": 33, "code": "(fn \n  [seqn n]\n  (apply concat (map #(repeat n %) seqn)))", "user": "5854580ce4b07779d46863f9"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "58b106f9e4b0ebc645576cf0"}, {"problem": 33, "code": "(fn [ls n] (->> ls (map #(repeat n %)) (apply concat)))", "user": "58a58c50e4b01a0c0b232914"}, {"problem": 33, "code": "(fn dupn\n  [sq n]\n  (reduce #(into %1 (repeat n %2)) [] sq))", "user": "588e4e05e4b00487982d5188"}, {"problem": 33, "code": "(fn [l n] (mapcat (partial repeat n) l))", "user": "58791973e4b01531a375eac5"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %)x))", "user": "589f50bfe4b02bd94d917e7d"}, {"problem": 33, "code": "(fn [col c]\n  (apply concat (map (fn [x] (replicate c x)) col)))", "user": "58b18ba0e4b0ebc645576cfa"}, {"problem": 33, "code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "user": "58b2f085e4b0ebc645576d15"}, {"problem": 33, "code": "(fn [lst n] (mapcat #(repeat n %) lst))", "user": "58b51e05e4b0ebc645576d4c"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "58a822e4e4b01a0c0b232950"}, {"problem": 33, "code": "#(mapcat (fn [input](repeat %2 input)) %1)", "user": "58637221e4b0f14aab7c881d"}, {"problem": 33, "code": "(fn [x c] (mapcat #(repeat c %)x))", "user": "58a0fd0be4b02bd94d917ea4"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "4eb47bb1535d7eef30807362"}, {"problem": 33, "code": "(fn [insec n]\n    (loop [xs insec\n           ys []]\n      (if (empty? xs)\n        ys\n        (recur (rest xs) (concat ys (take n (repeat (first xs)\n                                                    )))))))", "user": "58b81490e4b0ebc645576d8c"}, {"problem": 33, "code": "(fn replicate [x c]\n  (loop [data x\n         ans (vector)\n         w c]\n    (if (empty? data)\n      ans\n      (if (= w 1)\n        (recur (rest data) (conj ans (first data)) c)\n        (recur data (conj ans (first data)) (- w 1))\n        )\n      )\n    )\n  )", "user": "57cc14aae4b05aa3c4741d4a"}, {"problem": 33, "code": "(fn [xs n]\n  (loop [xs xs res []]\n    (if (seq xs)\n      (recur (rest xs) (concat res (repeat n (first xs))))\n      res\n      )\n    )\n  )", "user": "589771f9e4b00487982d52bd"}, {"problem": 33, "code": "(fn [list num]\n  \t\t(mapcat #(repeat num %) list))", "user": "58b4898de4b0ebc645576d3d"}, {"problem": 33, "code": "#(mapcat (fn [e] (repeat %2 e)) %1)", "user": "5881d1c2e4b0f1effa3b7644"}, {"problem": 33, "code": "(fn [xs n]\n  (mapcat #(repeat n %) xs))", "user": "58ba8e7ce4b0888cdc949ce8"}, {"problem": 33, "code": "#(mapcat (fn [input](repeat %2 input)) %1)", "user": "58bbe58be4b0888cdc949d05"}, {"problem": 33, "code": "(fn replicate-n [xs n]\n  (->> xs\n       (map #(repeat n %))\n       (reduce concat)))", "user": "58bc08fee4b0888cdc949d08"}, {"problem": 33, "code": "#(reduce (fn [memo elem] (concat memo (repeat %2 elem))) '() %1)", "user": "58bbcbc8e4b0888cdc949d00"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce (fn [a b] (concat a (take n (repeat b)))) [] coll))", "user": "58bb218be4b0888cdc949cf4"}, {"problem": 33, "code": "(fn\n   [s n]\n   (if (> n 1)\n  \t\t(apply interleave (repeat n s))\n     \t(seq s)\n     )\n   )", "user": "58a44a14e4b01a0c0b2328f2"}, {"problem": 33, "code": "(fn ras [re n]\n   (loop [acc ()\n          s re]\n     (if (empty? s)\n       acc\n       (recur (concat acc (repeat n (first s))) (rest s)))\n     ))", "user": "58b80ec1e4b0ebc645576d89"}, {"problem": 33, "code": "#(reduce (fn [result item] (concat result (repeat %2 item))) [] %1)\n\n;(fn [coll n]\n ; (reduce (fn [result item] (concat result (repeat n item))) [] coll))", "user": "58bc8cbee4b0888cdc949d1b"}, {"problem": 33, "code": "(fn [seqn rep]\n\t(loop [src seqn dupl [] n rep]\n\t\t(if (= 0 (count src))\n\t\t\tdupl\n\t\t\t(recur (rest src) (concat dupl (take n (repeat (first src)))) n)\n\t\t)))", "user": "58b985e0e4b0888cdc949ccc"}, {"problem": 33, "code": "(fn [col n] (\n             mapcat \n             #(repeat n %) \n             col))", "user": "58b1f51de4b0ebc645576d05"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "58c1b4f5e4b021aa9917ed01"}, {"problem": 33, "code": "(fn my-replicator [coll r]\n        (mapcat #(repeat r %) coll))", "user": "58765038e4b01531a375ea7e"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "58b3388ae4b0ebc645576d1e"}, {"problem": 33, "code": "(fn [col n] (mapcat #(repeat n %) col))", "user": "58bde497e4b0888cdc949d3c"}, {"problem": 33, "code": "(fn [a b] (mapcat (fn [x] (repeat b x)) a))", "user": "564a985be4b0284900eef65c"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "58ac14ebe4b0005cfeb1a740"}, {"problem": 33, "code": "(fn [elements amount]\n  (let [rng (range 0 amount)]\n    (mapcat #(map (constantly %) rng) elements)))", "user": "58bef424e4b021aa9917eccb"}, {"problem": 33, "code": "(fn seq-repeat [x i] \n  (reduce (fn [a b] (concat a (repeat i b))) [] x))", "user": "58c3af4de4b021aa9917ed1b"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "58c04ca5e4b021aa9917ece6"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "58b989dbe4b0888cdc949ccd"}, {"problem": 33, "code": "(fn [arr repl]\n\t(apply concat (map #(repeat repl %) arr)))", "user": "58b54852e4b0ebc645576d52"}, {"problem": 33, "code": "(fn [sekvenssi numero]\n  (reduce concat (map #(take numero (iterate identity %)) sekvenssi)))", "user": "57c314f3e4b05aa3c4741cba"}, {"problem": 33, "code": "(fn [seql n]\n  (reduce #(concat %1 (repeat n %2)) '() seql))", "user": "589ac5a2e4b00487982d5318"}, {"problem": 33, "code": "(fn [values n] (apply concat (map (fn [v] (repeat n v)) values)))", "user": "57b35ecbe4b0fbc9809a277e"}, {"problem": 33, "code": "(fn [col n] (reduce #(apply conj %1 (repeat n %2)) [] col))", "user": "589c0475e4b00487982d5351"}, {"problem": 33, "code": "(fn duplicate-each [col n]\n  (apply concat (for [el col] (repeat n el))))", "user": "58c5a08be4b021aa9917ed40"}, {"problem": 33, "code": "(fn [lis n]\n   (->\n    (filter\n     (let [f1 (complement sequential?)\n           f2 #(if (vector? %)\n                 (if (vector? (first %)) false true)\n                 false ) ]\n       (if (vector? (first lis)) f2 f1)\n       )\n     (rest (tree-seq sequential? seq (repeat n lis)))\n     )\n    (#(group-by (fn [x] x) %))\n    (#(mapcat (fn [x] (last x)) %))\n    )\n   )", "user": "570e43d8e4b0b0fb43fd06eb"}, {"problem": 33, "code": "(fn [l n] (mapcat #(repeat n %) l))", "user": "58b86162e4b0ebc645576d97"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "58868940e4b0f1effa3b76de"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "58c2df0ae4b021aa9917ed17"}, {"problem": 33, "code": "(fn [x y] (mapcat #(take y (repeat %1)) x))", "user": "5739ff3ae4b0cd1946bd1084"}, {"problem": 33, "code": "(fn [coll n] \n  (mapcat #(repeat n %) coll))", "user": "58ca8a1de4b03c36ff7e5835"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "user": "58b26da4e4b0ebc645576d0a"}, {"problem": 33, "code": "#(apply concat (map (fn [input](repeat %2 input)) %1))", "user": "589c7c8ce4b00487982d5361"}, {"problem": 33, "code": "(fn [input n] (reduce concat (map #(repeat n %) input)))", "user": "56a80d8fe4b07966d5a8a06a"}, {"problem": 33, "code": "(fn [seq n]\n  (mapcat (partial repeat n) seq))", "user": "58c5ad55e4b021aa9917ed42"}, {"problem": 33, "code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "user": "588d224ae4b00487982d516c"}, {"problem": 33, "code": "#(loop [xs %1 rs []]\n   (if (empty? xs)\n     rs\n     (recur (rest xs) (concat rs (repeat %2 (first xs))))))", "user": "58cfbd7ae4b03c36ff7e58ba"}, {"problem": 33, "code": "(fn [xs n]\n   (mapcat (partial replicate n) xs))", "user": "58cf00c8e4b03c36ff7e58ac"}, {"problem": 33, "code": "(fn [sq N]\n  (for [x sq y (range N)] x))", "user": "58ca613de4b021aa9917edb7"}, {"problem": 33, "code": "(fn [lst num]\n    (if (= 1 num)\n      lst\n      (apply interleave (for [i (range num)] lst))))", "user": "53882352e4b0640c7a9a5898"}, {"problem": 33, "code": "(fn [list times] (reduce concat (map #(repeat times %) list)))", "user": "58cb7525e4b03c36ff7e584a"}, {"problem": 33, "code": "(fn [lst cnt]\n  (reduce\n   (fn [xs x]\n     (reduce\n      (fn [ys _y] (conj ys x)) xs (range cnt))) [] lst))", "user": "58c66990e4b021aa9917ed53"}, {"problem": 33, "code": "#(mapcat (fn [x] (take %2 (repeat x))) %1)", "user": "58c4b11ae4b021aa9917ed2c"}, {"problem": 33, "code": "(fn duplicate-n [col, n]\n  (if (= n 1)\n    col\n    (apply interleave (repeat n col))))", "user": "587a3babe4b01531a375eae2"}, {"problem": 33, "code": "(fn [c n](mapcat #(repeat n %) c))", "user": "58d5114de4b03c36ff7e5953"}, {"problem": 33, "code": "(fn [coll r] (mapcat #(take r (repeat %)) coll))", "user": "58d3c3abe4b03c36ff7e5927"}, {"problem": 33, "code": "(fn [x n] (apply concat (map #(repeat n %) x)))", "user": "55228c3ce4b0882d96d091a2"}, {"problem": 33, "code": "#(mapcat (fn [item]\n           (take %2 (repeat item)))\n         %1)", "user": "58c93089e4b021aa9917ed9b"}, {"problem": 33, "code": "(fn rep [s, n] (apply concat (map #(repeat n %) s)))", "user": "58d737cee4b03c36ff7e5982"}, {"problem": 33, "code": "(fn [collec rep] \n  (reduce (fn [contain a] (concat contain (take rep (repeat a)))) [] collec))", "user": "58809253e4b0f1effa3b7618"}, {"problem": 33, "code": "(fn rep [xs n] (mapcat #(repeat n %1) xs))", "user": "58d63b99e4b03c36ff7e596b"}, {"problem": 33, "code": "(fn [x n]\n  (if (= n 1)\n    x\n    (apply interleave (repeat n x))))", "user": "4fe899a6e4b07c9f6fd12c54"}, {"problem": 33, "code": "(fn [items amount] (mapcat #(repeat amount %) items))", "user": "58d27bcae4b03c36ff7e58fe"}, {"problem": 33, "code": "#(loop [lst % times %2 result ()]\n   (if (empty? lst) (reverse (apply concat result))\n     (recur (rest lst) times (conj result (repeat times (first lst))))))", "user": "58cd4949e4b03c36ff7e5886"}, {"problem": 33, "code": "(fn [my-seq n] (mapcat identity (map #(repeat n %) my-seq)))", "user": "58969076e4b00487982d52a2"}, {"problem": 33, "code": "(fn [s n] (apply concat (map (partial repeat n) s)))", "user": "58cfb517e4b03c36ff7e58b9"}, {"problem": 33, "code": "(fn [sq n]\n  (reduce (fn [acc s] \n            (concat acc \n                    (take n \n                          (iterate #(identity %) s)))) \n          '() \n          sq))", "user": "58d4e73ce4b03c36ff7e594d"}, {"problem": 33, "code": "(fn [s n]\n  (reduce \n   #(concat %1 (repeat n %2)) \n   [] s) )", "user": "58acce0ae4b0005cfeb1a754"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "573102bbe4b0cd1946bd0fbb"}, {"problem": 33, "code": "#(loop [in %1, nr %2, out []] (if (empty? in) out (recur (rest in) nr (into out (take nr (iterate identity (first in)))))))", "user": "58cff8b0e4b03c36ff7e58c0"}, {"problem": 33, "code": "#(mapcat (partial replicate %2) %1)", "user": "5703a557e4b08d47c97781f4"}, {"problem": 33, "code": "(fn replicate [coll x]\n   (reduce concat (map (fn [term] \n                         (take x (repeat term))) coll)))", "user": "58dcb8cde4b0a4d5acaab6a7"}, {"problem": 33, "code": "(fn dup [l n] (mapcat #(repeat n %) l))", "user": "58dcf11ae4b0a4d5acaab6af"}, {"problem": 33, "code": "(fn\n    [s\n     n]\n    (reduce\n     #(apply conj %1 (repeat n %2) )\n     []\n     s\n     )\n    )", "user": "58d28c70e4b03c36ff7e5901"}, {"problem": 33, "code": "(fn [coll n]\n  (if (= n 1)\n    coll\n    (apply interleave (take n (repeat coll)))))", "user": "53a2a259e4b0f1fc7453882c"}, {"problem": 33, "code": "(fn [x n] (reduce concat (map (fn [el] (repeat n el)) x)))", "user": "58dbbdb3e4b0a4d5acaab687"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "57dd651ee4b0bd073c202441"}, {"problem": 33, "code": "(fn [x y] (mapcat identity (reduce #(conj %1 (repeat y %2)) [] x)))", "user": "58dbfb24e4b0a4d5acaab690"}, {"problem": 33, "code": "(fn [s n] (reduce (fn [c x] (concat c (take n (repeat x)))) nil s))", "user": "58aa3f02e4b01a0c0b23297d"}, {"problem": 33, "code": "(fn replicate-seq [coll n]\n  (mapcat #(repeat n %) coll))", "user": "585a9a16e4b0f14aab7c8752"}, {"problem": 33, "code": "(fn [s n]\n  (reverse (reduce (fn [r e]\n                     (apply conj r (repeat n e)))\n                    '()\n                    s)))", "user": "58de563fe4b0a4d5acaab6e3"}, {"problem": 33, "code": "(fn [x, n] (->> x\n                 (map #(repeat n %))\n                 (apply concat)))", "user": "588906a9e4b0f1effa3b772a"}, {"problem": 33, "code": "(fn [coll n] (reduce #(concat %1 (repeat n %2)) () coll))", "user": "58d3d6a3e4b03c36ff7e592b"}, {"problem": 33, "code": "(fn [coll n]\n   (apply concat (map #(repeat n %) coll)))", "user": "5760682ee4b08062f99a4e94"}, {"problem": 33, "code": "(fn [coll n] (reduce #(apply conj %1 (repeat n %2)) [] coll))", "user": "55b4fa46e4b01b9910ae2983"}, {"problem": 33, "code": "#_(fn maprepeat [coll n]\n  (if (empty? coll)\n    '()\n\n (let [x (first coll) ]  \n  (concat (repeat n x)\n    (maprepeat (rest coll) n)\n  )\n\n)   ) )\n\n(fn maprepeat [coll n]\n  (if (empty? coll)\n    '()\n     (concat (repeat n (first coll))\n             (maprepeat (rest coll) n))))", "user": "58aa8083e4b01a0c0b232985"}, {"problem": 33, "code": "(fn [a, b] \n  (mapcat #(\n            repeat b %) a\n            ))", "user": "58e51bc5e4b056aecfd47c86"}, {"problem": 33, "code": "#(if (> %2 1)\n   (apply interleave (repeat %2 %1))\n   %1)", "user": "55efc291e4b066087aa9453d"}, {"problem": 33, "code": "(fn [xs n] (if (= n 1) xs (apply interleave (repeat n xs))))", "user": "58e37946e4b005f69f193cae"}, {"problem": 33, "code": "(fn [lst n]\n  (mapcat #(repeat n %) lst))", "user": "58e56154e4b056aecfd47c92"}, {"problem": 33, "code": "(fn [s n] (if (> n 1) (apply interleave (repeat n s )) s))", "user": "58cbdc3be4b03c36ff7e5856"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "58e2e11ce4b005f69f193ca0"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "58e5fbbae4b056aecfd47ca6"}, {"problem": 33, "code": "(fn r [xs n] (reduce concat (map #(take n (repeat %)) xs)))", "user": "58d1fe17e4b03c36ff7e58f5"}, {"problem": 33, "code": "(fn [lst nbr] \n  (mapcat \n   #(take nbr (repeat %))lst))", "user": "58e5e585e4b056aecfd47ca2"}, {"problem": 33, "code": "(fn [coll rep]\n  (reduce (fn [acc cur]\n            (into acc (take rep (repeat cur))))\n          []\n          coll))", "user": "58e45a2ce4b056aecfd47c69"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "58e7229fe4b056aecfd47cc4"}, {"problem": 33, "code": "(fn replicate [collection times]\n  (if (not (= collection []))\n    (concat\n      (repeat times (first collection))\n      (replicate (rest collection) times))))", "user": "58e980dfe4b056aecfd47d0b"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "58bc0531e4b0888cdc949d07"}, {"problem": 33, "code": "(fn myRep [coll n] (apply concat (map #(repeat n %) coll)))", "user": "58e5f995e4b056aecfd47ca5"}, {"problem": 33, "code": "(fn [a-seq times] (apply concat (map (fn [x] (apply concat (repeat times (cons x '())))) a-seq)))", "user": "58e6c2cae4b056aecfd47cbf"}, {"problem": 33, "code": "#(if (= 1 %2) %1 (apply interleave (repeat %2 %1)))", "user": "58acca5ee4b0005cfeb1a753"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "58e58ae9e4b056aecfd47c9a"}, {"problem": 33, "code": "(fn [ls x] \n\t(mapcat\n \t\t#(take x (repeat %))\n\t\tls))", "user": "56ca2f25e4b0ea9b8538f716"}, {"problem": 33, "code": "(fn \n   [items n] \n   (mapcat \n    (fn [item] \n      (repeat n item)) items))", "user": "554b8b78e4b0a04f7929958d"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(take n  (iterate identity %)) xs))", "user": "58c4492be4b021aa9917ed27"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce #(into %1 (take n (cycle [%2]))) [] coll))", "user": "58ebae90e4b056aecfd47d44"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "58ec8c7ae4b056aecfd47d64"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "58eba5cce4b056aecfd47d41"}, {"problem": 33, "code": "(fn [p z] \n\n        (mapcat identity\n          (reduce\n            (fn [accum y] \n              (conj accum (seq(repeat z y))))\n            []\n            p)))", "user": "58e325f3e4b005f69f193ca7"}, {"problem": 33, "code": "#(apply concat (map (partial repeat %2) %1))", "user": "58e762d3e4b056aecfd47ccc"}, {"problem": 33, "code": "(fn [coll n]\n  (reverse \n   (reduce \n    (fn [t v]\n      (concat (repeat n v) t)) () coll)))", "user": "58edaa3be4b056aecfd47d89"}, {"problem": 33, "code": "(fn [colls n] \n   (mapcat \n     (fn [x]\n       ((fn [colls x n]\n         (if (= n 0)\n             colls\n          (recur (conj colls x) x (dec n)))) [] x n))\n     colls))", "user": "5794fd7be4b0e215f87e8476"}, {"problem": 33, "code": "(fn\n   [coll n]\n   (loop [output [] remaining coll]\n    ;(println output remaining)\n    (if (first remaining)\n        (recur (into output (take n (repeat (first remaining)))) (rest remaining))\n      output)\n    ))", "user": "58d6caf5e4b03c36ff7e5975"}, {"problem": 33, "code": "(fn [s n]\n  (if (= n 1)\n    (seq s)\n  \t(apply interleave (take n (repeat s)))))", "user": "58bc6a88e4b0888cdc949d16"}, {"problem": 33, "code": "(fn replicate-elements [seq n]\n  (mapcat (partial repeat n) seq))", "user": "58ed713de4b056aecfd47d84"}, {"problem": 33, "code": "(fn [iseq ireq] (reduce concat (map #(take ireq (repeat %)) iseq)))", "user": "56351709e4b0bfe05bf117c2"}, {"problem": 33, "code": "(fn [s n] (reduce #(concat %1 (repeat n %2)) [] s))", "user": "4f2858ece4b0d6649770a016"}, {"problem": 33, "code": "#(\n  cond\n  (= %2 1)\n    %1\n  (= %2 2)\n    (interleave %1 %1)\n  (= %2 4)\n    (interleave (interleave %1 %1) (interleave %1 %1))\n  )", "user": "58dd21a9e4b0a4d5acaab6b3"}, {"problem": 33, "code": "(fn replicate-seq [s n]\n  (reduce concat (map #(take n (repeat %)) s)))", "user": "58ee9b14e4b056aecfd47db0"}, {"problem": 33, "code": "(fn [coll c]\n\t(mapcat (fn [item] (take c (repeat item)))\n            coll))", "user": "58ee5371e4b056aecfd47da8"}, {"problem": 33, "code": "(fn [items rpt]\n    (mapcat #(repeat rpt %) items)\n    )", "user": "58ec1e63e4b056aecfd47d54"}, {"problem": 33, "code": "(fn [x n]\n    (loop [[head & rest :as list] x dups []]\n      (if (empty? list)\n        dups\n        (recur rest (concat dups (repeat n head))))))", "user": "58f00639e4b056aecfd47ddc"}, {"problem": 33, "code": "#(apply concat (map (fn [x] (repeat %2 x)) %1))", "user": "58dcae01e4b0a4d5acaab6a4"}, {"problem": 33, "code": "(fn [x n] (apply concat(map #(repeat n %) x)))", "user": "58eed4c5e4b056aecfd47db7"}, {"problem": 33, "code": "(fn [v n]\n  (apply concat (map (partial repeat n) v)))", "user": "57ffd1a9e4b0a837a8b30c2a"}, {"problem": 33, "code": "(fn replicate-n-seq [s n]\n  (reduce concat (map #(repeat n %) s)))", "user": "58e965b3e4b056aecfd47d08"}, {"problem": 33, "code": "#(->>\n \t%1\n  \t(map (partial repeat %2))\n  \t(reduce concat)\n  )", "user": "5895385fe4b00487982d5279"}, {"problem": 33, "code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "user": "5782018de4b0d36ec5835e8e"}, {"problem": 33, "code": "#(mapcat (fn [input](repeat %2 input)) %1)", "user": "587c77afe4b01531a375eb1b"}, {"problem": 33, "code": "(fn [S n] (reduce (fn [C i] (concat C (repeat n i))) [] S))", "user": "58e7eba2e4b056aecfd47cdf"}, {"problem": 33, "code": "(fn [the-seq rep-num]\n  (mapcat (partial repeat rep-num) the-seq))", "user": "58f273d9e4b08e1cf3471d01"}, {"problem": 33, "code": "(fn [seq occ] (mapcat #(repeat occ %) seq))", "user": "58ee0bb6e4b056aecfd47d97"}, {"problem": 33, "code": "(fn [x s] (apply concat (map (fn [n] (repeat s n)) x)))", "user": "58dd2c02e4b0a4d5acaab6b8"}, {"problem": 33, "code": "(fn replicate [coll a-num]\n  (reduce #(concat %1 (repeat a-num %2))\n          []\n          coll))", "user": "58f2e8fbe4b0438e51c2ce94"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "58f5689de4b0438e51c2ced7"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat #(take n (repeat %)) s))", "user": "56483f45e4b0284900eef62b"}, {"problem": 33, "code": "(fn [x n]\n  (loop [s x\n         acc '()]\n    (if (empty? s)\n      acc\n      (recur (rest s) (concat acc (repeat n (first s)))))))", "user": "58d4f44ee4b03c36ff7e594f"}, {"problem": 33, "code": "(fn [xs n]\n  (apply concat (map #(repeatedly n (constantly %)) xs)))", "user": "58ef4db9e4b056aecfd47dc6"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "58f45ea0e4b0438e51c2cebc"}, {"problem": 33, "code": "(fn replicateit [coll times]\n  (if (empty? coll)\n    coll\n    (let [car (first coll)\n          cdr (rest coll)]\n      (concat (repeat times car) (replicateit cdr times)))))", "user": "51a0370ae4b0b292b01ee3ef"}, {"problem": 33, "code": "(fn [value-seq t] (mapcat #(take t (iterate identity %)) value-seq))", "user": "5796d3ebe4b039eba2ecb0ee"}, {"problem": 33, "code": "(fn \n  [seq, n]\n  (mapcat #(repeat n %) seq))", "user": "58f7dfe6e4b0438e51c2cf1f"}, {"problem": 33, "code": "(fn [seq num] \n  (mapcat #(apply concat \n                  (for [x (range num)] \n                    (cons % '()))) \n          seq))", "user": "56c44c34e4b05cc29241ee96"}, {"problem": 33, "code": "(fn [coll n] (->>  (repeat n x)\n                    (for [x coll])\n                    (into [])\n                    (apply concat)))", "user": "58934052e4b00487982d523a"}, {"problem": 33, "code": "(fn[s n] (mapcat #(repeat n %)s))", "user": "58f75bf8e4b0438e51c2cf13"}, {"problem": 33, "code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "user": "58ac1135e4b0005cfeb1a73f"}, {"problem": 33, "code": "(fn rp [s n]\n  (mapcat #(repeat n %) s))", "user": "51a3be77e4b0e77c4ca60bf8"}, {"problem": 33, "code": "(fn [s n]\n  (loop [x (first s) xs (next s) res []]\n    (if-not x\n      res\n      (recur (first xs) (next xs) (concat res (repeat n x))))))", "user": "589f2cefe4b02bd94d917e75"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "57b7de74e4b0fbc9809a27d4"}, {"problem": 33, "code": "(fn [col n] (mapcat #(repeat n %) col))", "user": "58f44c07e4b0438e51c2ceb7"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "58f3a2d4e4b0438e51c2ceac"}, {"problem": 33, "code": "(fn [coll n]\n       (mapcat #(repeat n %) coll))", "user": "58447708e4b089d5ab817e4b"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %)s))", "user": "53dbca12e4b094d41abdfef6"}, {"problem": 33, "code": "(fn [x n] (mapcat #(repeat n %) x))", "user": "58bcea23e4b0888cdc949d23"}, {"problem": 33, "code": "(fn [col n] (mapcat #(repeat n %) col))", "user": "58fc92c5e4b0438e51c2cf9a"}, {"problem": 33, "code": "(fn [a,b]\n  (mapcat\n   #(repeat b %)\n   a\n   )\n  )", "user": "58fe40afe4b0438e51c2cfca"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "58fd82a8e4b0438e51c2cfb5"}, {"problem": 33, "code": "(fn [lat n] (reduce concat (map #(take n (repeat %)) lat)))", "user": "590088bfe4b0438e51c2d026"}, {"problem": 33, "code": "(fn [s n]\n  (if-not (= n 1)\n    (apply interleave (repeat n s))\n    s))", "user": "58d48df8e4b03c36ff7e5941"}, {"problem": 33, "code": "(fn [s n]\n    (mapcat #(take n (repeat %)) s))", "user": "58fff18be4b0438e51c2d00c"}, {"problem": 33, "code": "(fn [s n] (reduce #(concat %1 (repeat n %2)) [] s))", "user": "5901158de4b0438e51c2d039"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "59035914e4b022d14a2aafaa"}, {"problem": 33, "code": "(fn [coll n]\n  (loop [[head & tail] coll\n         accum []]\n    (let [retval (concat accum (loop [i n x []] (if (= i 0) x (recur (dec i) (conj x head)))))]\n      (if (empty? tail)\n        retval\n        (recur tail retval)\n      )\n    )\n  )\n)", "user": "59073e0fe4b047aa04b19950"}, {"problem": 33, "code": "(fn [coll n] \n  (mapcat #(repeat n %) coll))", "user": "58dc81d1e4b0a4d5acaab69e"}, {"problem": 33, "code": "(fn [s n] (mapcat (partial repeat n) s))", "user": "58a32c21e4b02bd94d917eeb"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "58fdbf59e4b0438e51c2cfbc"}, {"problem": 33, "code": "(fn [xs times]\n  (apply concat (map #(take times (repeat %)) xs)))", "user": "58db097fe4b0a4d5acaab66f"}, {"problem": 33, "code": "#(mapcat (fn [item]\n            (take %2 (repeat item)))\n          %1)", "user": "5890799be4b00487982d51d6"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "54d2159fe4b0e8a36923e5ed"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "5635adeee4b0bfe05bf117c7"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "59085adfe4b047aa04b19972"}, {"problem": 33, "code": "(fn replicate\n  ([list times] (replicate list times []))\n  ([list times acc]\n   (cond\n    (empty? list) (reverse acc)\n    :else (let [toPrepend (repeat times (first list)) \n                next-list (rest list)\n                next-acc (concat toPrepend acc)]\n            (replicate next-list times next-acc)))))", "user": "56326995e4b0bfe05bf117a3"}, {"problem": 33, "code": "(fn [input i] (reduce concat (map #(repeat i %) input)))", "user": "55d70b8fe4b0e31453f64a9c"}, {"problem": 33, "code": "(fn [l num]\n   (mapcat #(repeat num %) l))", "user": "590b3aeae4b047aa04b199d0"}, {"problem": 33, "code": "(fn [xs n] (reduce concat (map (partial repeat n) xs)))", "user": "590cc457e4b047aa04b199f4"}, {"problem": 33, "code": "(fn bloat \n  [coll n]\n  (reduce concat (map #(replicate n %) coll)))", "user": "59076082e4b047aa04b19956"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "576ffcb9e4b0979f89651592"}, {"problem": 33, "code": "#(apply mapcat vector (repeat %2 %1))", "user": "590b055ae4b047aa04b199c9"}, {"problem": 33, "code": "#(if (= %2 1) %1 (apply interleave (take %2 (repeat %1))))", "user": "58f9fde7e4b0438e51c2cf56"}, {"problem": 33, "code": "#(reduce (fn [a c] (concat a (repeat %2 c))) '() %1)", "user": "565131b3e4b0f29ec07d2e88"}, {"problem": 33, "code": "(fn\n  [s n]\n  (mapcat #(repeat n %) s))", "user": "590d0c31e4b047aa04b199fb"}, {"problem": 33, "code": "#(if (not= %2 1) (apply interleave (repeat %2 %1)) %1)", "user": "5908b36be4b047aa04b19982"}, {"problem": 33, "code": "#(apply concat (map (fn [input](repeat %2 input)) %1))", "user": "58dadf46e4b0a4d5acaab66b"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "590d0bc8e4b047aa04b199fa"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "590e588ce4b047aa04b19a23"}, {"problem": 33, "code": "#(mapcat (fn[s] (repeat %2 s) ) %1)", "user": "590f283de4b047aa04b19a35"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce concat (map #(take n (repeat %)) coll)))", "user": "591072e0e4b0163c97b36ebc"}, {"problem": 33, "code": "(fn [l c] (apply concat (map #(repeat c %) l)))", "user": "59075e3be4b047aa04b19955"}, {"problem": 33, "code": "#(reduce (fn [replicated x] \n           (loop [repl replicated, value x,number %2] \n                              (if (> number 0) \n                                (recur \n                                 (conj repl value) \n                                 value \n                                 (dec number))\n                                repl))\n             ) [] %1)", "user": "591326f2e4b0163c97b36efc"}, {"problem": 33, "code": "(fn [s n] \n  (mapcat \n   #(repeat n %) s))", "user": "5913375de4b0163c97b36efe"}, {"problem": 33, "code": "(fn [l, n]\n  (let [mapped_list (map (fn [x] (repeat n x)) l)]\n  (reduce concat '()  mapped_list)\n  ))", "user": "59129074e4b0163c97b36ef1"}, {"problem": 33, "code": "(fn\n  [coll times]\n  (mapcat #(repeat times %) coll))", "user": "5640b135e4b08d4f616f5ee8"}, {"problem": 33, "code": "(fn [x y] (mapcat #(reduce (fn [a b](conj a %1)) [] (range y)) x))", "user": "5910a43de4b0163c97b36ebf"}, {"problem": 33, "code": ";(fn [li count]\n;  (reduce into [] (map #(repeat count %1) li)))\n\n(fn [li count]\n  (->> li (map #(repeat count %1)) (reduce into [])))", "user": "59156f0be4b0163c97b36f3d"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "58ebd10de4b056aecfd47d49"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "59074b7ce4b047aa04b19951"}, {"problem": 33, "code": "(fn [x n] (mapcat #(repeat n %) x))", "user": "53d5d43ce4b0e771c302544d"}, {"problem": 33, "code": "(fn [xs num] (mapcat (partial repeat num) xs))", "user": "5919d209e4b09b4ee5954bcc"}, {"problem": 33, "code": "(fn [list n]\n  (reduce concat (map #(repeat n %) list)))", "user": "58dfce9fe4b0a4d5acaab723"}, {"problem": 33, "code": "(fn [x n] (apply concat (map (partial repeat n) x)))", "user": "59078134e4b047aa04b1995c"}, {"problem": 33, "code": "(fn [s n] (apply concat (map (partial repeat n) s)))", "user": "58fb7d7ae4b0438e51c2cf7a"}, {"problem": 33, "code": "#(let [f (fn [coll v] (apply conj coll (take %2 (repeat v))))]\n      (reduce f [] %1))", "user": "576aea4fe4b0a07e8fc18126"}, {"problem": 33, "code": "(fn [string n]\n  (reverse (reduce (fn [acc x] (concat (repeat n x) acc)) [] string))\n  )", "user": "5822b578e4b04b46fc4b0fa4"}, {"problem": 33, "code": "(fn [l n] \n  (reduce into [] (map #(take n (repeat %)) l)))", "user": "572ad0fde4b0f4d77e651244"}, {"problem": 33, "code": "(fn [x y] \n  (mapcat #(concat [] (replicate y %)) x))", "user": "591ac8ece4b09b4ee5954bdd"}, {"problem": 33, "code": "(fn replicate-seq [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5916412ee4b09b4ee5954b87"}, {"problem": 33, "code": "#(mapcat (fn [input](repeat %2 input)) %1)", "user": "52f762ece4b047fd55836fc2"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "4f29d9abe4b0d6649770a034"}, {"problem": 33, "code": "(fn replicate [sq times]\n  (if (> times 1)\n    (apply interleave (repeat times sq))\n    sq))", "user": "59032c0fe4b022d14a2aaf9f"}, {"problem": 33, "code": "(fn [xs n] (apply concat (map #(repeat n %) xs)) )", "user": "5921a080e4b09b4ee5954c77"}, {"problem": 33, "code": "#(apply concat (map (fn [input] (repeat %2 input)) %1))", "user": "591cbc30e4b09b4ee5954c08"}, {"problem": 33, "code": "#(reduce (fn [a b] (apply (partial conj a) (repeat %2 b))) [] %1)", "user": "591f05b4e4b09b4ee5954c42"}, {"problem": 33, "code": "(fn [seq times]\n     (reduce into [] (map #(repeat times %) seq)))", "user": "5783a897e4b0ebec4cfb74b9"}, {"problem": 33, "code": "(fn [coll n]\n   (mapcat (partial repeat n)\n  coll))", "user": "5922a513e4b026ae38521286"}, {"problem": 33, "code": "(fn [seq1 duplication] \n  (reduce \n    (fn [result input ]\n       (concat result (take duplication (repeat input)))\n      ) \n    []\n    seq1    \n    )\n  )", "user": "59228b00e4b026ae38521281"}, {"problem": 33, "code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "user": "59225498e4b09b4ee5954c8c"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "5911aa1de4b0163c97b36ed8"}, {"problem": 33, "code": "(fn [x c]\n   (apply concat (map (fn [e]\n                   (take c(repeat e ))) x)))", "user": "591f5124e4b09b4ee5954c45"}, {"problem": 33, "code": "(fn rep [x, y] (if (empty? x) () (concat (repeat y (first x)) (rep (rest x) y) )))", "user": "591e9813e4b09b4ee5954c36"}, {"problem": 33, "code": "(fn [xs n] (mapcat (fn [x] (repeat n x)) xs))", "user": "4db1b3951254ad5b4805fa6f"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce (fn [c i]\n            (into c \n                  (repeat n i)))\n          [] coll))", "user": "58ef93ece4b056aecfd47dca"}, {"problem": 33, "code": "(fn [c t]\n  (apply concat (map (partial repeat t) c)))", "user": "590253e3e4b0438e51c2d055"}, {"problem": 33, "code": "(fn rpl [sq n]\n  (cond (nil? (first sq)) nil\n        :else (concat (take n (repeat (first sq)))\n                      (rpl (rest sq) n))))", "user": "57614a42e4b0994c1922fb85"}, {"problem": 33, "code": "(fn replicateSequence [x n] (reverse (loop [output '() index 0] (if (>= index (count x)) output (recur (loop [tar output i 0] (if (>= i n) tar (recur (list* (nth x index) tar) (+ 1 i)))) (+ 1 index))))))", "user": "5924009ce4b072a2710fce45"}, {"problem": 33, "code": "(fn duplicate-n [x n]\n   (if (= '() x)\n     ()\n     (concat\n      (repeat n (first x))\n      (duplicate-n (rest x) n))))", "user": "59273eefe4b072a2710fcec6"}, {"problem": 33, "code": "(fn [xs n]\n  (mapcat (fn [x] (repeat n x)) xs))", "user": "59279a89e4b072a2710fced3"}, {"problem": 33, "code": "(fn replicate-sequence\n  [s n]\n  (reduce into [] (map (partial repeat n) s)))", "user": "59234753e4b0a390037439ef"}, {"problem": 33, "code": "#(if (= 1 %2)\n    %1 \n    (apply interleave (repeat %2 %1)))", "user": "59258aa7e4b072a2710fce74"}, {"problem": 33, "code": "(fn [s, n]\n  (mapcat\n   (fn [x] (for [i (range n)] x) )\n   s))", "user": "59288c2ce4b072a2710fceeb"}, {"problem": 33, "code": ";#(apply interleave (repeat %2 %1))\n(fn [coll n]\n  (if (<= n 1) coll (apply interleave(repeat n coll))))", "user": "58ffaddee4b0438e51c2cffe"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "user": "4e6fe3a6535d5021c1a89629"}, {"problem": 33, "code": "(fn\n  [xs number-of-repeats]\n  (reduce (fn [a b] (concat a (repeat number-of-repeats b))) () xs))", "user": "592af6eee4b072a2710fcf2c"}, {"problem": 33, "code": "(fn [x t] (mapcat #(repeat t %) x))", "user": "591d9870e4b09b4ee5954c1b"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "592518bfe4b072a2710fce65"}, {"problem": 33, "code": "; #(if (= %2 1) %1 (apply interleave (repeat %2 %1)))\n; (fn [v n] (mapcat #(repeat n %) v))\n; (fn [v n] (mapcat (partial repeat n) v))\n\n#(for [v %1 i (range %2)] v)", "user": "591d182ee4b09b4ee5954c10"}, {"problem": 33, "code": "(fn [s cnt]\n  (apply concat []\n    (for [i (range (count s))]\n      (for [j (range cnt)]\n        (do\n          (println (get s i))\n\t      (identity (get s i)))))))\n\n; (fn [s cnt] (concat [] (for [i (range (count s))] (for [j (range cnt)] (do (println (get s i)) (identity (get s i)))))))", "user": "58d2af83e4b03c36ff7e5907"}, {"problem": 33, "code": "(fn repl [l x]\n  (cond\n   (empty? l)\n   \t'()\n   :else\n   \t(concat\n     ((fn rpt [a r]\n       (cond\n   \t     (zero? r)\n   \t       '()\n         :else\n   \t       (cons a (rpt a (dec r)))))\n       (first l) x)\n     (repl (rest l) x))))", "user": "5833a6d8e4b089d5ab817ca2"}, {"problem": 33, "code": "#(mapcat (fn [item]\n           (take %2 (repeat item)))\n           %1)", "user": "592db566e4b072a2710fcf7c"}, {"problem": 33, "code": "(fn [x n]\n   (apply concat (map #(repeat n %) x)))", "user": "557c6ca6e4b05c286339e0c4"}, {"problem": 33, "code": "(fn [coll n]  (for [c coll\n                     i (range n)]\n               c))", "user": "5918db70e4b09b4ee5954bbb"}, {"problem": 33, "code": "(fn [l,c] (reduce (fn [x,y] (concat x (repeat c y))) [] l))", "user": "5933b736e4b072a2710fd05d"}, {"problem": 33, "code": "(partial (fn [output [head & tail] times] \n           (if (nil? head)\n             output\n             (recur (concat output (repeat times head)) tail times))) '())", "user": "58db362be4b0a4d5acaab675"}, {"problem": 33, "code": "(fn [a n] (if (= n 1) a (if (= n 2) (interleave a a) (if (= n 4) (interleave a a a a) a))))", "user": "5934a43ce4b072a2710fd07e"}, {"problem": 33, "code": "(fn [coll n] (mapcat (fn [x] (take n (repeat x))) coll))", "user": "5923554ee4b0a390037439f2"}, {"problem": 33, "code": "(fn [l n] \n  (if (= n 1)\n    l\n    (apply interleave (repeat n l))))", "user": "59368ccae4b02506e01a297a"}, {"problem": 33, "code": "(fn [lst n] (mapcat #(repeat n %) lst))", "user": "5931e498e4b072a2710fd024"}, {"problem": 33, "code": "(fn [coll n] (reduce #(concat %1 (repeat n %2)) [] coll))", "user": "5935b010e4b04f87174def55"}, {"problem": 33, "code": "(fn [x t] (mapcat #(repeat t %) x))", "user": "5936fabce4b02506e01a298c"}, {"problem": 33, "code": "(fn rep-seq [coll n] (mapcat #(repeat n %) coll))", "user": "59368efbe4b02506e01a297d"}, {"problem": 33, "code": "(fn [s n] (loop [lst s x n new [] j 0]\n            (if (empty? lst)\n              new\n            (if (= j x)\n              (recur (rest lst) x new 0)\n            (recur lst x (conj new (first lst)) (inc j))))))", "user": "59368ccae4b02506e01a2979"}, {"problem": 33, "code": "(fn [coll times]\n   (reduce #(concat %1 %2) '()\n           (for [x coll]\n             (repeat times x))))", "user": "5913fde8e4b0163c97b36f13"}, {"problem": 33, "code": "(fn [listy numb] ;read in list and number to dup by\n  (loop [l listy, n numb, newl []]\n\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002(if (empty? l)\n\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002newl\n\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002(if (= 0 n)\n\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002(recur (rest l) numb newl)\n\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002(recur l (dec n) (conj newl (first l)))))))", "user": "59369515e4b02506e01a297e"}, {"problem": 33, "code": "(fn [x n]\n   (mapcat #(repeat n %) x))", "user": "59385840e4b02506e01a29c9"}, {"problem": 33, "code": "(fn replicate_by [coll n] (mapcat #(repeat n %) coll))", "user": "591610d4e4b09b4ee5954b7e"}, {"problem": 33, "code": "(fn [se n] (mapcat #(repeat n %) se))", "user": "589560d8e4b00487982d5281"}, {"problem": 33, "code": "(fn replicate [list numRep] (reverse (reduce clojure.set/union \n                                             (map #((fn [nr ele] (take nr (repeat ele))) numRep %) list))))", "user": "56ffeafee4b08d47c97781c2"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5180af54e4b0e3fc13e244e9"}, {"problem": 33, "code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "user": "591a6c9fe4b09b4ee5954bd6"}, {"problem": 33, "code": "(fn [s n] (mapcat (partial repeat n) s))", "user": "593c71cbe4b069cdc2982b90"}, {"problem": 33, "code": "(fn repliciraj [sekv pon]\n  (cond\n   (empty? sekv) '()\n   :else\n\t(concat (take pon (repeat (first sekv))) (repliciraj (rest sekv) pon)\n            )\n   )\n  )", "user": "584d99c5e4b0b7285a6f4e42"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "593f95d8e4b069cdc2982be3"}, {"problem": 33, "code": "(fn [x n] (reduce #(concat %1 (repeat n %2)) [] x))", "user": "593f88dce4b069cdc2982be2"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "593d6793e4b069cdc2982ba6"}, {"problem": 33, "code": "#(mapcat (fn [item]\n           (take %2 (repeat item)))\n         %1)", "user": "59251947e4b072a2710fce69"}, {"problem": 33, "code": "(fn [x y] (mapcat #(take y (repeat %)) x))", "user": "593dfe60e4b069cdc2982bb1"}, {"problem": 33, "code": "#(if (= %2 1) % (apply interleave (take %2 (repeat %))))", "user": "5900d5cde4b0438e51c2d02e"}, {"problem": 33, "code": "(fn replicate-each-item [col n-times] (mapcat #(repeat n-times %1) col))", "user": "592518e8e4b072a2710fce67"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %)  s))", "user": "59419bdfe4b060784b3b78f7"}, {"problem": 33, "code": "(fn replicate-each-item [col n-times]\n  (mapcat #(repeat n-times %1) col))", "user": "592518f0e4b072a2710fce68"}, {"problem": 33, "code": "(fn bunshin [x a]\n  (if (empty? x)\n    []\n    (vec(concat(vec(replicate a (first x))) (bunshin (vec(rest x)) a)))))", "user": "593910eae4b02506e01a29f4"}, {"problem": 33, "code": "(fn  p33[x y]\n  (reduce concat (map #(take y (repeat %)) x)))", "user": "59395adfe4b02506e01a29fb"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat #(concat \n     (repeat n %1))s))", "user": "593fcb0ce4b069cdc2982bea"}, {"problem": 33, "code": "(fn [a b] \n  (mapcat #(take b (repeat %)) a))", "user": "59449aa2e4b0b03edd0057ad"}, {"problem": 33, "code": "(fn [coll n] (reduce (fn [acc itm] (concat acc itm)) () (map (fn [itm] (map (fn [_] itm) (range n))) coll)))", "user": "593e4b1fe4b069cdc2982bbb"}, {"problem": 33, "code": "#(reduce (fn [a s] (into a (repeat %2 s))) [] %1)", "user": "593f8692e4b069cdc2982be1"}, {"problem": 33, "code": "(fn [my-list num-repeats]\n  (loop [output-list []\n         remain-list my-list\n         i num-repeats]\n    (if (empty? remain-list)\n      output-list\n      (if (= i 0)\n        (recur output-list (rest remain-list) num-repeats)\n        (recur (conj output-list (first remain-list)) remain-list (- i 1))\n        )\n      )\n    \n    )\n  )", "user": "5944bd7fe4b0b03edd0057b0"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "592519cfe4b072a2710fce6b"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "59438419e4b060784b3b7929"}, {"problem": 33, "code": "(fn [coll n]\n  (->> coll\n       (map (partial repeat n))\n       (apply concat)))", "user": "594783bee4b07ddc2dafada1"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "585d9558e4b0f14aab7c879c"}, {"problem": 33, "code": "(fn [coll x]\n  (->> coll\n       (map #(repeat x %))\n       (apply concat)))", "user": "593dde1be4b069cdc2982baf"}, {"problem": 33, "code": "(fn [l n]\n      (reduce\n       (fn [acc curr]\n         (concat acc (take n (repeat curr))))\n       []\n       l))", "user": "5938bca5e4b02506e01a29eb"}, {"problem": 33, "code": "#(apply (partial mapcat (fn [& xs] xs)) (replicate %2 %1))", "user": "5943abb6e4b060784b3b792b"}, {"problem": 33, "code": "(fn [s n] (loop [ret [] i 0 j n] (if (= i (count s)) ret (if (= j 0) (recur ret (+ i 1) n) (recur (conj ret (nth s i)) i (- j 1))))))", "user": "59468de7e4b07ddc2dafad88"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "594263cbe4b060784b3b790a"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "58e452a2e4b056aecfd47c67"}, {"problem": 33, "code": "#(apply (partial mapcat list) (repeat %2 %1))", "user": "59496129e4b07ddc2dafadd7"}, {"problem": 33, "code": "(fn [s n] \n     (reduce into [] (map #(repeat n %) s)))", "user": "5054d243e4b0b1b9d1860eb5"}, {"problem": 33, "code": "#(mapcat (fn [item]\n           (take %2 (repeat item)))\n         %1)", "user": "592518cde4b072a2710fce66"}, {"problem": 33, "code": "#(reverse ((fn [coll repeat_] (reduce (fn [accu value] (apply conj accu (repeat repeat_ value))) '() coll)) % %2))", "user": "583f1533e4b089d5ab817dc8"}, {"problem": 33, "code": "(fn [c r] (->> c\n               (reduce #(conj %1 (repeat r %2)) '())\n               (reverse)\n               (apply concat)))", "user": "594bdadce4b07ddc2dafae43"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "594bc912e4b07ddc2dafae3e"}, {"problem": 33, "code": "(fn [ls n]\n (reverse\n  (loop [in ls\n         out '()]\n    (if (empty? in)\n      out\n      (recur (rest in) (concat (for [x (range n)] (first in)) out))))))", "user": "594bd637e4b07ddc2dafae41"}, {"problem": 33, "code": "(fn [x y] \n  (mapcat #(take y (repeat %)) x))", "user": "593744abe4b02506e01a299b"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "594bb203e4b07ddc2dafae36"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat #(take n (repeat %)) s))", "user": "576186a5e4b0994c1922fb8e"}, {"problem": 33, "code": "#(loop [x %1 y %2 res []]  (if(not=[] x)  (recur  (rest x) y  (      loop [z y sres res c (first x)] (if (> z 0) (recur (dec z) (conj sres c) c) sres)  )            ) res  ))", "user": "594e3723e4b07ddc2dafaea8"}, {"problem": 33, "code": "#(if (= %2 1) %1;;workaround for the annoying bug. works on my machine without this.\n   (apply interleave (take %2 (iterate identity %1))))", "user": "594bc7d6e4b07ddc2dafae3d"}, {"problem": 33, "code": "#(for [x (map (partial repeat %2) %1) y x] y)", "user": "59497f51e4b07ddc2dafaddd"}, {"problem": 33, "code": "(fn [xs n]\n  (mapcat #(repeat n %) xs))", "user": "594880ade4b07ddc2dafadc2"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5938bae2e4b02506e01a29ea"}, {"problem": 33, "code": "#(mapcat  \n  (fn [x]\n    (repeat %2 x) )\n  % )", "user": "594c1baae4b07ddc2dafae59"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "55216aa5e4b0882d96d09192"}, {"problem": 33, "code": "(fn [xs n]\n  (for [x xs, n' (range n)] x))", "user": "5069d8c5e4b01dc6af13f838"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "594bb36ae4b07ddc2dafae37"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5948adffe4b07ddc2dafadc6"}, {"problem": 33, "code": "(fn rr [s n]\n  (mapcat #(repeat n %) s))", "user": "5950f0bfe4b066ee0a44ae9f"}, {"problem": 33, "code": "(fn [v c] (mapcat #(repeat c %) v))", "user": "59473563e4b07ddc2dafad97"}, {"problem": 33, "code": "(fn [coll var]\n  (apply concat (map #(repeat var %) coll)))", "user": "594f0c93e4b07ddc2dafaec7"}, {"problem": 33, "code": "(fn rep [c n]\n  (let [step\n        (fn [c n]\n          (when-let [s (seq c)]\n            (concat (repeat n (first s)) (rep (rest s) n))))]\n    (lazy-seq (step c n))))", "user": "5953bdb6e4b066ee0a44aeed"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "58b0bbc5e4b0ebc645576ce6"}, {"problem": 33, "code": "(fn [coll times]\n  (reduce #(apply conj %1 (repeat times %2)) [] coll))", "user": "592334c7e4b0a390037439ee"}, {"problem": 33, "code": "(fn [s n] (apply concat (map #(repeat n %) s)))", "user": "594a5559e4b07ddc2dafadf8"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %1) coll))", "user": "594c0bd7e4b07ddc2dafae56"}, {"problem": 33, "code": "(fn [L n] (mapcat #(repeat n %) L))", "user": "591e0782e4b09b4ee5954c25"}, {"problem": 33, "code": "(fn [coll factor]\n  (mapcat #(take factor (repeat %)) coll))", "user": "59503c5de4b066ee0a44ae8e"}, {"problem": 33, "code": "(fn [col times] (reduce (fn [col el] (into col (repeat times el))) [] col))", "user": "5956c6dae4b066ee0a44af61"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "56b2652ae4b0982f16b37e04"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5958cef6e4b066ee0a44af94"}, {"problem": 33, "code": "#(if (> %2 1) (apply interleave (repeat %2 %1)) %1 )", "user": "593db05ae4b069cdc2982bab"}, {"problem": 33, "code": "(fn repl [s n]\n  (mapcat #(repeat n %1) s))", "user": "5958a0c8e4b066ee0a44af8c"}, {"problem": 33, "code": "(fn [xs n]\n   (reduce #(concat %1 (repeat n %2)) [] xs))", "user": "5954108ae4b066ee0a44aef4"}, {"problem": 33, "code": "(fn [s n]\n  (apply concat (map #(repeat n %) s)))", "user": "5947c6a6e4b07ddc2dafada7"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "57262710e4b0c5bde472c120"}, {"problem": 33, "code": "#(reduce (fn [v n] (concat v (repeat %2 n))) [] %)", "user": "595914e0e4b066ee0a44af99"}, {"problem": 33, "code": "#(mapcat (fn [item]\n           (take %2 (repeat item)))\n         %1)", "user": "595a885be4b066ee0a44afc4"}, {"problem": 33, "code": "(fn my-replicate [lst n]\n  (let [[f & r] lst]\n    (println f)\n    (println r)\n    (if (empty? lst)\n      []\n      (concat (repeat n f) (my-replicate r n))\n      ))\n  )", "user": "5959c72ae4b066ee0a44afac"}, {"problem": 33, "code": "(fn replic\n  [[x & xs] n]\n  (let [res []\n        rec (fn \n              [a k]\n              (loop [lst [] i 0]\n                (if (= i k)\n                  lst\n                  (recur (concat lst [a]) (inc i)))))]\n    (if x\n      (concat (concat res (rec x n)) (replic xs n))\n      res)))", "user": "59390a35e4b02506e01a29f3"}, {"problem": 33, "code": "(fn [x n]\n  (mapcat #(repeat n %) x))", "user": "594cb88be4b07ddc2dafae6e"}, {"problem": 33, "code": "(fn [a b]\n       (reduce concat (map #(repeat b %) a)))", "user": "59551e04e4b066ee0a44af20"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "595b864ee4b066ee0a44afdc"}, {"problem": 33, "code": "(fn [ls n] (apply concat (map #(repeat n %) ls)))", "user": "54961073e4b0b312c081ff62"}, {"problem": 33, "code": "(fn [l n]\n    (apply concat (map #(repeat n %) l)))", "user": "595bbab7e4b066ee0a44afe0"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce concat (map #(take n (repeat %)) coll))\n  )", "user": "595d0897e4b066ee0a44b00f"}, {"problem": 33, "code": "(fn [xs t]\n  (mapcat #(repeat t %) xs))", "user": "58db3c5ae4b0a4d5acaab677"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "54bd9a60e4b0ed20f4ff6ee3"}, {"problem": 33, "code": "(fn [s n]\n  (reduce concat (map #(take n (repeat %)) s)))", "user": "595e1ba7e4b066ee0a44b036"}, {"problem": 33, "code": "(fn duplicateX [x count] (mapcat identity (map #(repeat count %) x)))", "user": "4f73591be4b07046d9f4f045"}, {"problem": 33, "code": "#(apply concat (map (fn [x] (take %2 (repeat x))) %1))", "user": "59566d1de4b066ee0a44af54"}, {"problem": 33, "code": "(fn\n  [col n]\n  (mapcat #(repeat n %) col))", "user": "595ebf46e4b066ee0a44b04f"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "58cf8f97e4b03c36ff7e58b7"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "595eba88e4b066ee0a44b04e"}, {"problem": 33, "code": "(fn dup\n  ([xs n] (dup xs n xs n))\n  ([xs n acc on]\n   (case n\n     0 xs\n     1 (if (= 2 on) (mapcat identity acc) (flatten acc))\n     (dup xs (- n 1) (map vector xs acc) on)\n     )\n    ))", "user": "595fe942e4b066ee0a44b075"}, {"problem": 33, "code": "(fn repX [inp n]\n    ((fn repInt [acc x]\n      (if (empty? x)\n        (seq acc)\n        (repInt\n          ((fn addXTimes [l v i]\n            (if (= 0 i)\n              l\n              (addXTimes (conj (vec l) v) v (dec i))))\n            acc (first x) n)\n          (rest x))))\n    '() inp))", "user": "595ed97fe4b066ee0a44b051"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "595d224de4b066ee0a44b016"}, {"problem": 33, "code": "(fn [se r] (mapcat (fn [s] (repeat r s)) se))", "user": "593c653de4b069cdc2982b8f"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "594bc16be4b07ddc2dafae39"}, {"problem": 33, "code": "(fn f [s n]\n  (let [f*\n        (fn [acc s*]\n          (concat acc (repeat n s*)))]\n    (reduce f* [] s)))", "user": "5954edcbe4b066ee0a44af15"}, {"problem": 33, "code": "(fn  \r\n  [s n]\r\n  (loop [s s acc (vector)]\r\n    (if (empty? s)\r\n      acc\r\n      (recur \r\n        (rest s)\r\n        (apply conj acc (take n (repeat (first s))))))))", "user": "5591b61ee4b0604b3f94d580"}, {"problem": 33, "code": "(fn [x n] (mapcat #(repeat n %) x))", "user": "595b7c12e4b066ee0a44afda"}, {"problem": 33, "code": "#(apply concat (for [x %1] (take %2 (repeat x))))", "user": "58fc52cee4b0438e51c2cf95"}, {"problem": 33, "code": "(fn [l n] (reduce concat (map #(repeat n %) l)))", "user": "595d2041e4b066ee0a44b014"}, {"problem": 33, "code": "(fn [arr n] (mapcat #(repeat n %) arr))", "user": "58ee84e5e4b056aecfd47dab"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "524ac3d1e4b09eba1c0223a0"}, {"problem": 33, "code": "(fn [s times] \n  (loop [l   (seq s)\n         col []]\n    (if (empty? l)\n      (seq col)\n        (recur\n          (rest l)\n          (into col (repeat times (first l)))))))", "user": "595c02a9e4b066ee0a44afeb"}, {"problem": 33, "code": "#(if (= %2 1) % (apply interleave (repeat %2 %)))", "user": "59638af5e4b066ee0a44b0cc"}, {"problem": 33, "code": "(fn[_seq n](reduce (fn[result head] \n\t\t\t\t\t\t(concat result (repeat n head))) '() _seq))", "user": "5954eef0e4b066ee0a44af17"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "595fd721e4b066ee0a44b06e"}, {"problem": 33, "code": "#(loop [x %1 result []]\n   (if (empty? x)\n     result\n     (recur (rest x) (into result (repeat %2 (first x))))))", "user": "5964c614e4b069c0a1a19770"}, {"problem": 33, "code": "#(loop [coll %1 res [] i 1 n (count %1)]\n   (if (> i n)\n     res\n     (recur (rest coll) (into res (map first (repeat %2 coll))) (inc i) (count %1))))", "user": "5911c8e1e4b0163c97b36edc"}, {"problem": 33, "code": "(fn [x n] (apply concat (map #(repeat n %) x)))", "user": "59663e77e4b069c0a1a1979f"}, {"problem": 33, "code": "(fn [x n] (reduce #(apply conj %1 (repeat n %2)) () (reverse x)))", "user": "5965eb8de4b069c0a1a19796"}, {"problem": 33, "code": "(fn [c n]\n  (mapcat #(repeat n %) c))", "user": "55c4e30be4b0e31453f649a6"}, {"problem": 33, "code": "(fn\n  [x y]\n  (reduce #(apply conj %1 (take y (repeat %2))) [] x))", "user": "55842bd7e4b05c286339e11c"}, {"problem": 33, "code": "#(for [x %1 i (range %2)] x)", "user": "59692530e4b069c0a1a197e4"}, {"problem": 33, "code": "(fn [s n] (reduce #(concat %1 (repeat n %2)) [] s))", "user": "59699da7e4b069c0a1a197eb"}, {"problem": 33, "code": "(fn [s n] (mapcat (fn [e] (repeat n e)) s))", "user": "5967ce67e4b069c0a1a197bf"}, {"problem": 33, "code": "(fn [col x] (mapcat #(repeat x %) col))", "user": "59648ce1e4b069c0a1a19769"}, {"problem": 33, "code": "(fn [l n] (mapcat #(->> % repeat (take n)) l))", "user": "51d55795e4b01da06753aa8f"}, {"problem": 33, "code": "(fn [aSeq n]\n  (apply concat (map #((fn dupen [elem m]\n                         (if (= m 1)\n                           [elem]\n                           (concat [elem] (dupen elem (- m 1)))\n                           )\n                         ) % n) aSeq)))", "user": "595eaa8fe4b066ee0a44b04b"}, {"problem": 33, "code": "#(apply concat (map (fn [x] (map (fn [y] x) (range %2))) %1))", "user": "596c1f25e4b069c0a1a19825"}, {"problem": 33, "code": "(fn[coll r] (mapcat (fn[c] (repeat r c)) coll))", "user": "596e4c5be4b069c0a1a19864"}, {"problem": 33, "code": "(fn [a-seq n] (mapcat #(cons %1 (repeat (dec n) %1)) a-seq))", "user": "595fd77ce4b066ee0a44b06f"}, {"problem": 33, "code": "(fn [ls n]\n  (for [i ls\n        j (range n)]\n    i))", "user": "59636b37e4b066ee0a44b0c3"}, {"problem": 33, "code": "(fn [arr no]\n  (for [i arr\n        j (range no)]\n    i))", "user": "59636b43e4b066ee0a44b0c4"}, {"problem": 33, "code": "(fn [lis no]\n  (for [i lis\n        j (range no)]\n    i))", "user": "59636b49e4b066ee0a44b0c5"}, {"problem": 33, "code": "(fn [arr rep-count]\n  (mapcat #(repeat rep-count %) arr))", "user": "59636b6de4b066ee0a44b0c6"}, {"problem": 33, "code": "(fn makker [l n]\n  (let [spreader (fn spreader [x n] (if (zero? n) '() (conj (spreader x (dec n)) x)))]\n    (reduce (fn [s x] (concat s (spreader x n))) '() l)))", "user": "59708e38e4b01722bebd4c65"}, {"problem": 33, "code": "(fn [l n] (apply concat (map #(repeat n %) l)))", "user": "596caee3e4b069c0a1a19837"}, {"problem": 33, "code": "(fn [sx n] (mapcat #(repeat n %) sx))", "user": "596f6683e4b069c0a1a19877"}, {"problem": 33, "code": "(fn\n  [lst n]\n  (mapcat #(repeat n %) lst))", "user": "59636cc2e4b066ee0a44b0c7"}, {"problem": 33, "code": "(fn [a b]\n  (mapcat #(repeat b %) a))", "user": "59636ec9e4b066ee0a44b0c8"}, {"problem": 33, "code": "(fn repli\n  [input, n]\n  (loop [xs input ys []]\n    (if (empty? xs)\n    ys\n    (recur\n      (rest xs)\n      (loop [i n yss ys]\n        (if (zero? i)\n        yss\n        (recur (dec i) (conj yss (first xs)))))))))", "user": "53de4bdae4b0d874e779ae32"}, {"problem": 33, "code": "(fn [coll n] (mapcat (partial repeat n) coll))", "user": "5972fcf6e4b01722bebd4c92"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce\n   #(into %1 (repeat n %2))\n   [] coll))", "user": "590b8607e4b047aa04b199db"}, {"problem": 33, "code": "(fn [s n]\n  (reduce (fn [coll x]\n            (into coll (repeat n x))) [] s))", "user": "5398d042e4b0b51d73faaf00"}, {"problem": 33, "code": "(fn [arr rep] (mapcat #(repeat rep %) arr))", "user": "5797d3d2e4b039eba2ecb106"}, {"problem": 33, "code": "(fn rep [s n]\n  (reduce concat (map #(take n (repeat %)) s)))", "user": "59733c91e4b01722bebd4c9b"}, {"problem": 33, "code": "#(apply mapcat list (repeat %2 %))", "user": "595a4fb8e4b066ee0a44afba"}, {"problem": 33, "code": "(fn solution33\n  [llist n]\n  (reduce (fn [curr elem]\n            (loop [i   0\n                   ans curr]\n              (if (= i  n)\n                ans\n                (recur (inc i) (conj ans elem))))) [] llist))", "user": "595bc925e4b066ee0a44afe2"}, {"problem": 33, "code": "(fn rep [x y] \n  (if (zero? (- y 1)) x (apply interleave (repeat y x))))", "user": "58866b4fe4b0f1effa3b76d4"}, {"problem": 33, "code": "(fn [col rep]\n  (reduce #(into %1 (repeat rep %2)) [] col)\n)", "user": "5926c254e4b072a2710fceb8"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "5974b12be4b01722bebd4cb1"}, {"problem": 33, "code": "(fn [l n]\n  (reduce (fn [a b]\n           (concat a (repeat n b)))\n          [] l))", "user": "5978305be4b01722bebd4d03"}, {"problem": 33, "code": "#(->> %1 (mapcat (partial repeat %2)))", "user": "59738d98e4b01722bebd4ca1"}, {"problem": 33, "code": "(fn [list num]\n  (loop [l list\n         n num\n         result '()]\n    (let [fi (first l)\n          newResult (concat result [fi])]\n    (if (empty? l)\n      result\n      (if (= 1 n)\n        (recur (rest l) num newResult)\n        (recur l (dec n) newResult)\n)))))", "user": "5954cea2e4b066ee0a44af0a"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "594266cfe4b060784b3b790b"}, {"problem": 33, "code": "(fn [a-list times] (reduce #(concat %1 (repeat times %2)) [] a-list))", "user": "5978b4c9e4b01722bebd4d13"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %)s))", "user": "5964f9b0e4b069c0a1a19778"}, {"problem": 33, "code": "(fn [c x] (mapcat #(repeat x %) c))", "user": "5978c844e4b01722bebd4d18"}, {"problem": 33, "code": "(fn [xs times]\n  (mapcat #(repeat times %) xs))", "user": "59644d2ae4b069c0a1a19764"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5935151ee4b072a2710fd084"}, {"problem": 33, "code": "(fn [coll n]\n   (reduce (fn [acc el]\n             (concat acc (repeat n el)))\n           [] coll))", "user": "527ba29de4b03e8d9a4a7594"}, {"problem": 33, "code": "#(apply concat (for [i %1] (repeat %2 i)))", "user": "5979cd36e4b02382a38ad1d8"}, {"problem": 33, "code": "(fn t\n  [[x & xs] n]\n  (if xs\n    (apply conj (t xs n) (repeat n x))\n    (repeat n x)))", "user": "597d0e43e4b0dbe32238d095"}, {"problem": 33, "code": "(fn [coll times]\n  (reduce (fn [accum next-val]\n              (concat accum (take times (repeat next-val))))\n          '()\n          coll))", "user": "597f8c93e4b0dbe32238d0c1"}, {"problem": 33, "code": "(fn [x y] (mapcat #(replicate y %) x))", "user": "597e128ee4b0dbe32238d0a4"}, {"problem": 33, "code": "(fn repl [s n] (apply concat (map (fn [e] (repeat n e)) s)))", "user": "59804b60e4b021a7a535fdcf"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "597dcb0ce4b0dbe32238d0a2"}, {"problem": 33, "code": "(fn [xs n]\n  (mapcat #(repeat n %) xs))", "user": "5980f91ae4b021a7a535fddd"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "59826556e4b021a7a535fdfe"}, {"problem": 33, "code": "(fn [s i] (mapcat #(repeat i %) s))", "user": "596539dce4b069c0a1a19783"}, {"problem": 33, "code": "(fn [x n] (reduce #(concat %1 (take n (repeat %2))) [] x))", "user": "591addcee4b09b4ee5954be1"}, {"problem": 33, "code": "(fn [arr n] (mapcat \n              #(repeat n %)\n              arr))", "user": "597f8984e4b0dbe32238d0bf"}, {"problem": 33, "code": "(fn d [s n]\n  (if (empty? s)\n    s\n    (let [[f & r] s]\n      (concat (repeat n f) (d r n)))))", "user": "597a4277e4b02382a38ad1e2"}, {"problem": 33, "code": "#(apply concat (map (fn [el] (repeat %2 el)) %1))\n\n; #(mapcat (fn [el] (repeat %2 el)) %1)\n\n; #(reduce (fn [result el] (concat result (repeat %2 el))) [] %1)\n\n\n;(fn [coll n]\n;  (loop [result []\n;         first-el (first coll)\n;         coll (rest coll)]\n;    (if (nil? first-el)\n;      result\n;      (recur\n;        (concat result (for [_ (range n)] first-el))\n;        (first coll)\n;        (rest coll)))))", "user": "59837909e4b021a7a535fe16"}, {"problem": 33, "code": "(fn replicate-seq\n  [sq n]\n  (reduce ;;let's use reduce to EXPAND the sequence.\n    (fn [repl-seq cur-item]\n      (concat repl-seq (take n (repeat cur-item)))) ;;yep thats right\n    []\n    sq))", "user": "59863a26e4b021a7a535fe87"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5982d82be4b021a7a535fe05"}, {"problem": 33, "code": "#(loop [[head & tail] %1\n        i 0\n        result []]\n   \n   (prn head tail i result)\n   \n   (if-not head\n     result\n     (if (= %2 i)\n       (recur tail 0 result)\n       (recur (cons head tail) (inc i) (conj result head)) ))\n\n   )", "user": "598085e6e4b021a7a535fdd3"}, {"problem": 33, "code": "(fn [c n] \n  (mapcat #(repeat n %) c))", "user": "598858d0e4b021a7a535feb5"}, {"problem": 33, "code": "(fn [x n] (reduce concat nil (map (partial repeat n) x)))", "user": "598229d6e4b021a7a535fdfb"}, {"problem": 33, "code": "(fn [s n] \n  (reduce\n    (fn [result x] \n      (concat result (replicate n x)))\n    '()\n    s))", "user": "5989e080e4b021a7a535fed6"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "593ab583e4b069cdc2982b57"}, {"problem": 33, "code": "(fn [c r] (mapcat #(repeat r %) c))", "user": "598ad666e4b02b9968b84ce1"}, {"problem": 33, "code": "(fn sk-juxt [yuan beishu]\n  (mapcat #(repeat beishu %) yuan)\n  )", "user": "5884f377e4b0f1effa3b76a8"}, {"problem": 33, "code": "(fn rep\n  ([l n] (rep l n n))\n  ([l n o]\n   (if (empty? l)\n    '()\n    (if (zero? n)\n     (rep (rest l) o o)\n     (conj\n      (rep l (dec n) o)\n      (first l))))))", "user": "598ab445e4b02b9968b84ce0"}, {"problem": 33, "code": "(fn [values factor]\n  (reverse (reduce #(into %1 (repeat factor %2)) '() values)))", "user": "5989ee61e4b021a7a535fed7"}, {"problem": 33, "code": "#(mapcat  (partial repeat %2 ) %1)", "user": "598588f2e4b021a7a535fe65"}, {"problem": 33, "code": "(fn rep [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5952d75ce4b066ee0a44aed4"}, {"problem": 33, "code": "(fn [coll num] (mapcat (partial repeat num) coll))", "user": "598e7998e4b02b9968b84d34"}, {"problem": 33, "code": "#(loop [coll %1\n        out []]\n   (if (empty? coll)\n     out\n     (recur (rest coll) (concat out (repeat %2 (first coll))))))", "user": "59902fede4b0fcebec4de86d"}, {"problem": 33, "code": "(fn [coll times]\n\t(loop [f (first coll) r (rest coll) t times c times acc (list)]\n\t\t(if (and (<= c 0) (empty? r))\n\t\t\tacc\n\t\t\t(if (> c 0)\n\t\t\t\t(recur f r t (- c 1) (concat acc (list f)))\n\t\t\t\t; else c is 0, there are items remaining in r\n\t\t\t\t(recur (first r) (rest r) t t acc)))))", "user": "598af379e4b02b9968b84ce6"}, {"problem": 33, "code": "(fn [l x] (seq\n  (reduce \n   (fn [coll y] \n     (into coll (take x (repeat y)))\n   )\n   []\n   l\n  ))\n)", "user": "55916764e4b0604b3f94d57b"}, {"problem": 33, "code": "(fn [l, n] (apply concat (map #(repeat n %) l)))", "user": "591cc30be4b09b4ee5954c0a"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "564f51a0e4b0284900eef6ab"}, {"problem": 33, "code": "(fn foo1\n  [list m]\n  (loop\n    [x 0 coll list col (empty coll)]\n    (if (= x (count coll))\n      (reverse col)\n      (recur\n        (inc x)\n        coll\n        ((fn foo2\n           [m list1  list2 n]                                                ;\u51e0\u6b21\uff0c\u539f\u6765\u7684\u96c6\u5408 \uff0c\u751f\u6210\u7684\u96c6\u5408\uff0c\u4f4d\u7f6e\n           (loop [x 0 coll list1 col list2  c n]\n             (if (= x m)\n               col\n               (recur\n                 (inc x)\n                 coll\n                 (cons (get coll c) col)\n                 c)))) m coll col x)))))", "user": "598d0dc3e4b02b9968b84d18"}, {"problem": 33, "code": "(fn [xs n]\n  (mapcat #(vec (repeat n %)) xs))", "user": "596d630ae4b069c0a1a19846"}, {"problem": 33, "code": "(fn [x y] (reduce #(reduce conj % (take y (iterate identity %2))) [] x))", "user": "5971763fe4b01722bebd4c72"}, {"problem": 33, "code": "(fn rep [x y] (loop [i 0 acc ()]\n                  (if (< (- (count x) 1) i)\n                     acc\n                    (recur (inc i) (concat acc (repeat y (get x i)))))))", "user": "598d22b1e4b02b9968b84d1a"}, {"problem": 33, "code": "#(mapcat\n   (fn [x] (repeat %2 x)) \n  %1)", "user": "598debf0e4b02b9968b84d2e"}, {"problem": 33, "code": "(fn [coll x] (reduce concat (map #(repeat x %) coll)))", "user": "599362a3e4b0b211ea3aaab2"}, {"problem": 33, "code": "(fn [x n]\n\t(reduce\n\t\tconcat\n\t\t(map #(repeat n %) x)\n\t)\n)", "user": "598d746ae4b02b9968b84d23"}, {"problem": 33, "code": ";;(fn [s n]\n;;  (mapcat #(take n (repeat %)) s))\n(fn [coll n]\n  (reduce #(concat %1 (take n (repeat %2))) '() coll))", "user": "59944e73e4b0b211ea3aaac2"}, {"problem": 33, "code": "(fn [xs n] \n  (reduce \n    (fn [acc x] \n      (concat acc \n        ((fn f [c m] \n          (if (= m 0) \n          '() \n          (conj (f c (dec m)) c)))\n          x n ))) '() xs))", "user": "598a4ff7e4b02b9968b84cda"}, {"problem": 33, "code": "(fn [col n]\n       (apply concat (map (fn [x] (for [xs (range n)] x)) col))\n    )", "user": "59932f49e4b0b211ea3aaaae"}, {"problem": 33, "code": "(fn [s c]\n  (mapcat #(repeat c %) s))", "user": "59639142e4b066ee0a44b0ce"}, {"problem": 33, "code": "(fn [seq n]\n  (mapcat #(repeat n %) seq))", "user": "56478a82e4b0284900eef61e"}, {"problem": 33, "code": "(fn [col n] (mapcat #(repeat n %) col))", "user": "5991d9cbe4b0866487ed0d69"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5990fcb9e4b0866487ed0d5b"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "59971e2de4b07157cc8daacc"}, {"problem": 33, "code": "(fn [col n] (reduce #(concat %1 (repeat n %2)) [] col))", "user": "59874ff6e4b021a7a535fea1"}, {"problem": 33, "code": "(fn [seq times]\n  (loop [origin-seq seq\n         target-seq []]\n    (if (empty? origin-seq)\n      target-seq\n      (let [head (first origin-seq)\n            body (rest origin-seq)]\n        (recur body\n               (concat target-seq\n                       (repeat times head)))))))", "user": "58fed70de4b0438e51c2cfdd"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce  (fn [acc elem] (into acc (replicate n elem))) [] coll))", "user": "5846804de4b089d5ab817e91"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "user": "59946856e4b0b211ea3aaac7"}, {"problem": 33, "code": "(fn    [coll n]\n  (mapcat\n    #(repeat n %)\n    coll))", "user": "59971dcbe4b07157cc8daacb"}, {"problem": 33, "code": "(fn repeat-seq\n\t[x y]\n\t(lazy-seq\n\t\t(when-let [s (seq x)]\n\t\t\t(concat (repeat y (first s))\n\t\t\t\t(repeat-seq (rest x) y)\n\t\t\t)\n\t\t)\n\t)\n)", "user": "55e46caae4b050e68259b451"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5960a1a6e4b066ee0a44b08e"}, {"problem": 33, "code": "(fn [xs n]\n  (apply concat (for [x xs] (replicate n x)))\n  )", "user": "5996b419e4b07157cc8daab5"}, {"problem": 33, "code": "(fn [s n]\n  (loop [r [] l s]\n    (if (empty? l) r\n        (recur (into r (repeat n (first l))) (rest l)))))", "user": "5995f8ade4b0b211ea3aaae9"}, {"problem": 33, "code": "(fn [coll n]\n\t(reduce (fn [items item] (apply conj items (take n (repeat item)))) [] coll)\n)", "user": "5991d2fae4b0866487ed0d68"}, {"problem": 33, "code": "(fn [my-vec num] (reduce concat [] (map (fn [x] (repeat num x)) my-vec)) )", "user": "59a18264e4b0871e7608b853"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "59a24c92e4b066c664927d20"}, {"problem": 33, "code": "(fn [x n] (mapcat #(repeat n %) x))", "user": "594ea2a4e4b07ddc2dafaeb6"}, {"problem": 33, "code": "(fn [lst n] \n\t(mapcat (partial repeat n) lst)\n)", "user": "59a2ba97e4b066c664927d2c"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "599b7210e4b010b4cc4bca07"}, {"problem": 33, "code": "(fn go [s n] (mapcat #(into [] (repeat n %1)) s))", "user": "59967c40e4b0b211ea3aaaf2"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "59a512b7e4b066c664927d5e"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "599df601e4b0871e7608b801"}, {"problem": 33, "code": "(fn [xs n] (mapcat (partial repeat n) xs))", "user": "576c2ecae4b07c67f59d1fbb"}, {"problem": 33, "code": "(fn f [[x & xs] n]\n  (if x\n    (concat (repeat n x) (f xs n))))", "user": "55b28b57e4b01b9910ae296c"}, {"problem": 33, "code": "(fn [coll times] (mapcat #(repeat times %) coll))", "user": "59a57e91e4b066c664927d63"}, {"problem": 33, "code": "(fn [coll r] (mapcat #(repeat r %) coll))", "user": "59a72effe4b066c664927d94"}, {"problem": 33, "code": "(fn [a c] (mapcat #(repeat c %) a))", "user": "597fa3fbe4b021a7a535fdbf"}, {"problem": 33, "code": "(fn [x n] (mapcat #(repeat n %) x))", "user": "59ab8beee4b08cbb53654d9e"}, {"problem": 33, "code": "(fn [seq num]\n  (mapcat (partial repeat num) seq))", "user": "59a8405ce4b0bcf4e9a43af1"}, {"problem": 33, "code": "(fn [seque times ] \n  (mapcat #(take times (repeat %) ) seque)\n  )", "user": "57bffed6e4b05aa3c4741c89"}, {"problem": 33, "code": "(fn [sq n]\n           (let [aux\n                 (fn [[head & tail] n acc]\n                   (cond \n                    (nil? head)\n                    acc\n\n                    :else\n                    (recur tail n (apply conj acc (repeat n head)))))]\n             (aux sq n [])))", "user": "57e6f90de4b0bfb2137f5af6"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "59ac0965e4b08cbb53654da6"}, {"problem": 33, "code": "#(reduce (fn [x y] (into x (repeat %2 y))) [] %1)", "user": "59a0262ee4b0871e7608b82d"}, {"problem": 33, "code": "(fn [s a] (reverse (reduce #(concat (repeat a %2) %1) [] (seq s))))", "user": "59a9e517e4b08cbb53654d79"}, {"problem": 33, "code": "(fn [x n]\n  (reduce #(apply conj %1 (repeat n %2)) [] x))", "user": "59a80652e4b0bcf4e9a43aeb"}, {"problem": 33, "code": "(fn [xs n] (apply concat (map #(repeat n %) xs)))", "user": "599d49a7e4b0871e7608b7f4"}, {"problem": 33, "code": "(fn [coll n]\n  (if (= n 1)\n    coll\n    (apply interleave (repeat n coll))))", "user": "5922a36ce4b026ae38521285"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "59b1c2eae4b0e1f4e384c8ec"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "59089229e4b047aa04b1997c"}, {"problem": 33, "code": "(fn\n  [a, n]\n  (loop [x a\n         res []]\n    (if (empty? x)\n      (seq res)\n      (recur (rest x) (into res (repeat n (first x))))\n    )\n  )\n)", "user": "59ac559ee4b00adcf69795d2"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "59b05f0ee4b0e1f4e384c8cc"}, {"problem": 33, "code": "#(mapcat \n  (fn [item] \n    (take %2 \n          (repeat item)))\n  %1)", "user": "59a3f3dce4b066c664927d48"}, {"problem": 33, "code": "(fn [s n] (mapcat (fn [i] (repeat n i)) s))", "user": "571543bbe4b07c98581c3ad4"}, {"problem": 33, "code": "(fn [l i] (mapcat #(repeat i %) l))", "user": "59adec09e4b0e1f4e384c897"}, {"problem": 33, "code": "#(apply concat (for [x %1] (repeat %2 x)))", "user": "572010a4e4b0c5bde472c08c"}, {"problem": 33, "code": "(fn do-replicate\n  [coll n]\n  (reduce\n    #(concat %1 (take n (repeat %2)))\n    []\n    (seq coll)))", "user": "59b62f8de4b05c620303ca1f"}, {"problem": 33, "code": "(fn [col count]\n  (mapcat (fn [e] (repeat count e)) col))", "user": "57481f1fe4b009280f9f2b82"}, {"problem": 33, "code": "(fn [coll n] (reduce #(concat %1 (repeat n %2)) [] coll))", "user": "59b8ee96e4b0a024fb6ae3c0"}, {"problem": 33, "code": "(fn [coll amount]\n  (apply concat (map #(repeat amount %)coll)))", "user": "59b554cee4b05c620303ca0f"}, {"problem": 33, "code": "#(loop [r %1 s '()]\n   (if (empty? r)\n     s\n     (recur (next r) (concat s (repeat %2 (first r))))\n     )\n   )", "user": "5992de05e4b0866487ed0d7e"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "59bac5c9e4b0a024fb6ae3ed"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "59bdf0eae4b0a024fb6ae42e"}, {"problem": 33, "code": "#(apply concat (map (fn [x] (repeat %2 x)) %1))", "user": "597768d0e4b01722bebd4cee"}, {"problem": 33, "code": "#(apply concat (map (fn [x] (repeat %2 x)) %1))", "user": "5998b0a1e4b07157cc8daaec"}, {"problem": 33, "code": "(fn nrepeat [s n]\n  (mapcat #(repeat n %) s))", "user": "592fa9f8e4b072a2710fcfcb"}, {"problem": 33, "code": "(fn [s r]\n  (reduce (fn [new-coll current] (concat new-coll (repeat r current))) '() s))", "user": "59be62d5e4b0a024fb6ae435"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "59abd1d8e4b08cbb53654da4"}, {"problem": 33, "code": "#(loop [lst %1\n        acm []]\n   (if (empty? lst) acm\n       (recur (rest lst) (into acm (take %2 (repeat (first lst)))))))", "user": "54c98ac0e4b045293a27f679"}, {"problem": 33, "code": "(fn\n  [x n]\n  (reduce into [] (map #(repeat n %1) x)))", "user": "59a9c22ae4b08cbb53654d75"}, {"problem": 33, "code": "(fn [input times]\n\n  (loop [collection input result [] n 0]\n\n    (if (= 0 (count collection))\n\n      result\n\n      (let [curr (first collection)]\n\n        (if (= n times)\n\n          (recur (rest collection) result 0)\n\n          (recur collection (conj result curr) (inc n)))))))", "user": "59c5093ce4b0a024fb6ae50c"}, {"problem": 33, "code": "(fn [s n]\n  (apply mapcat vector (take n (repeat s))))", "user": "54058af3e4b0addc1aec6669"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "57089f82e4b0b0fb43fd06a2"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "59358f74e4b04f87174def52"}, {"problem": 33, "code": "(fn [col n]\n  (reduce (fn [acc v] (concat acc v))\n          (into [] (map (fn [val] (repeat n val)) col))))", "user": "55f1f0d1e4b06e875b46ce3b"}, {"problem": 33, "code": "(fn [xs, n] (reduce (fn [acc, x] (concat acc (repeat n x))) [] xs))", "user": "59c22fbae4b0a024fb6ae4a3"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "59c734e3e4b0a024fb6ae53f"}, {"problem": 33, "code": "(fn [list times]\n  (reduce\n    (fn [result item] (concat result (repeat times item)))\n     []\n     list\n   )\n )", "user": "59c72175e4b0a024fb6ae53c"}, {"problem": 33, "code": "(fn [a n] (apply concat (map #(repeat n %) a)))", "user": "59c7c2cde4b0a024fb6ae54b"}, {"problem": 33, "code": "(fn [xs times] (reduce\n                (fn [acc x]\n                  (concat acc (reduce (fn [acc _] (conj acc x)) [] (range 0 times))))\n                []\n                xs))", "user": "59cc8d8de4b0a024fb6ae5d5"}, {"problem": 33, "code": "(fn [col n]\n  (reduce #(into %1 (repeat n %2)) [] col))", "user": "58c7131be4b021aa9917ed6d"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "59cf0d75e4b0ef0a1e9b5b5f"}, {"problem": 33, "code": "(fn [x y] (reduce #(apply conj %1 (repeat y %2)) [] x))", "user": "59cf6fbce4b0ef0a1e9b5b6c"}, {"problem": 33, "code": "#(mapcat (fn [arg1] (take  %2 (repeat arg1))) %)", "user": "594a7ed1e4b07ddc2dafae02"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "59c8c9bee4b0a024fb6ae567"}, {"problem": 33, "code": "(fn [seq times]\n  (mapcat #(repeat times %) seq))", "user": "57ca95f2e4b05aa3c4741d3b"}, {"problem": 33, "code": "(fn repl [it n]\r\n   (apply concat\r\n          (map \r\n           (fn [x] (apply concat (repeat n (conj [] x))))\r\n           it)))", "user": "4ddc5d0a535d02782fcbea05"}, {"problem": 33, "code": "#(loop [a %1\n        b %2\n        c []]\n   (if (zero? (count a))\n     c\n     (if (zero? b)\n       (recur (rest a) %2 c)\n       (recur a (dec b) (conj c (first a))))))", "user": "595a3b41e4b066ee0a44afb7"}, {"problem": 33, "code": "(fn [s r]\n  (->> s\n       (mapcat #(repeat r %) )\n       ))", "user": "515c46abe4b069911535cf0a"}, {"problem": 33, "code": "#(loop[result '() coll %1 n 1 ]\n       (if (empty? coll) (reverse result)\n         (if(= n %2) (recur (cons (first coll) result ) (rest coll) 1)\n           (recur (cons (first coll) result) coll (+ n 1)))))", "user": "59c77511e4b0a024fb6ae545"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "57c4e8dce4b05aa3c4741cd7"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "59c94a69e4b0a024fb6ae576"}, {"problem": 33, "code": "(fn [x n]\n  (mapcat #(repeat n %) x)\n  )", "user": "55fd0d19e4b0f488688e067a"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "57fe7d7ce4b0d3187e9009d0"}, {"problem": 33, "code": "#(if (= 1 %2) %1 (apply interleave (repeat %2 %1)))", "user": "59cf4013e4b0ef0a1e9b5b68"}, {"problem": 33, "code": "(fn [coll times]\n  (reduce (fn [result elem]\n            (into result (repeat times elem)))\n          []\n          coll))", "user": "59d9186be4b0ef0a1e9b5c50"}, {"problem": 33, "code": "(fn foo [coll n]\n  (if (= n 1)\n    (seq coll)\n    (apply interleave (repeat n coll))))", "user": "579f89d5e4b05302be0b72ff"}, {"problem": 33, "code": "(fn [x n] \n  (mapcat (fn [y] \n         (repeat n y)\n         )\n          x\n  )\n)", "user": "59d75e36e4b0ef0a1e9b5c32"}, {"problem": 33, "code": "#(reduce (fn [o l] (into o (repeat %2 l))) [] %1)", "user": "59ddae03e4b01968742fed65"}, {"problem": 33, "code": "(fn rep-seq \n  [col times]\n  (reduce\n    (fn [a b]\n      (into a (repeat times  b) )\n    )\n    []\n    col\n  )\n)", "user": "59b0e877e4b0e1f4e384c8d3"}, {"problem": 33, "code": "(fn [m n] (mapcat #(repeat n %) m))", "user": "572de985e4b0cd1946bd0f7c"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "59da6480e4b0ef0a1e9b5c68"}, {"problem": 33, "code": "(fn [lst n]\n\t(mapcat #(repeat n %) lst))", "user": "59dfd369e4b08badc2a0c4dd"}, {"problem": 33, "code": "(fn [coll n]\n   (reduce (fn [result item]\n             (let [elem (repeat n item)]\n               (concat result elem)))\n           '()\n           coll))", "user": "58a34442e4b02bd94d917ef2"}, {"problem": 33, "code": "(fn cool [lst n]\n  (mapcat #(repeat n %) lst)\n)", "user": "59e0111ae4b08badc2a0c4e4"}, {"problem": 33, "code": "(fn [coll cnt] (mapcat concat (for [c coll]  (repeat cnt c))))", "user": "52c03baee4b07a9af5792347"}, {"problem": 33, "code": "(fn [lst n] (mapcat (fn [a] (repeat n a)) lst))", "user": "59e18b9be4b08badc2a0c50f"}, {"problem": 33, "code": "(fn replicate-col [col count]\n    (reverse (reduce\n        (fn replicate-el\n            ([col val] (replicate-el col val count))\n            ([col el rem-count]\n                (if (= rem-count 0)\n                    col\n                    (conj (replicate-el col el (- rem-count 1)) el))))\n        '()\n        col)))", "user": "59aeff12e4b0e1f4e384c8af"}, {"problem": 33, "code": "(fn my-replicate [lst n]\n  (mapcat #(repeat n %) lst))", "user": "59e12c94e4b08badc2a0c509"}, {"problem": 33, "code": "(fn [coll r] (mapcat #(take r (repeat %)) coll))", "user": "59e0f38ae4b08badc2a0c500"}, {"problem": 33, "code": "(fn [items n]\n     (mapcat #(repeat n %) items))\n\n;(fn [items n]\n;     (mapcat #(take n (cycle [%])) items))", "user": "59e48db0e4b08badc2a0c53e"}, {"problem": 33, "code": "(fn [lst n] (mapcat #(repeat n %) lst))", "user": "59dd38a8e4b0a0ac046f2503"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %)", "user": "580e7761e4b0849f6811b753"}, {"problem": 33, "code": "(fn [lista repeticiones]\n   (mapcat (fn [elementoLista] (repeat repeticiones elementoLista)) lista))", "user": "59e63a2ce4b08badc2a0c569"}, {"problem": 33, "code": "(fn [x y]\n  (reduce (fn [i j]\n            (concat i (take y (repeat j))))\n          ()\n          x))", "user": "59e4fc25e4b08badc2a0c54f"}, {"problem": 33, "code": "(fn resq \n  [lst n]\n  (mapcat #(repeat n %) lst)\n  )", "user": "59e56c75e4b08badc2a0c556"}, {"problem": 33, "code": "(fn [lst n]\n  (loop [jk 0\n         lst2 ()]\n    (if (= jk  (count lst))\n      (reverse lst2)\n      (recur (inc jk)\n             (concat (repeat n (first (drop jk lst))) lst2)))))", "user": "59deba46e4b01968742fed7f"}, {"problem": 33, "code": "#(mapcat (fn [col]\n  (take %2 (repeat col)))\n         %1)", "user": "59e62655e4b08badc2a0c568"}, {"problem": 33, "code": "(fn pack\n  [lst n]\n  (mapcat #(replicate n %) lst))", "user": "59e778aae4b0249b72820716"}, {"problem": 33, "code": "(fn f [s n]\n  (let [f*\n        (fn [acc s*]\n          (concat acc (repeat n s*)))]\n(reduce f* [] s)))", "user": "59e55cc8e4b08badc2a0c555"}, {"problem": 33, "code": "(fn [myseq n] \n                                      (if (= n 1) myseq\n                                          (let [cols (repeat n myseq)]\n                                            (apply interleave cols))))", "user": "5957cc41e4b066ee0a44af76"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "59d631d4e4b0ef0a1e9b5c09"}, {"problem": 33, "code": "(fn my-replicate [lst numb]\n  (mapcat #(repeat numb %) lst))", "user": "59dd387be4b0a0ac046f2502"}, {"problem": 33, "code": "(fn replic\n  [lst n]\n  (if (empty? lst)\n    ()\n    (mapcat #(repeat n %) lst)))", "user": "59e4e3cbe4b08badc2a0c54a"}, {"problem": 33, "code": "(fn replicateSeq\n  [list n]\n  (mapcat #(repeat n %) list ))", "user": "59dd3930e4b0a0ac046f2504"}, {"problem": 33, "code": "(fn Replicate-a-Sequence\n  [lst b]\n  (mapcat #(repeat b %) lst))", "user": "59e14ee3e4b08badc2a0c50c"}, {"problem": 33, "code": "(fn replic\n  [lst n]\n  (->>\n    lst\n    (mapcat (fn [x] (repeat n x)))))", "user": "59e8fef3e4b0249b72820743"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "59e95cafe4b0249b7282074b"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "59e5ce75e4b08badc2a0c55d"}, {"problem": 33, "code": "#(apply concat (map (fn [input](repeat %2 input)) %1))", "user": "59e9f03be4b0249b72820752"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "59ea287ee4b0249b72820760"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "59ea0944e4b0249b72820758"}, {"problem": 33, "code": "(fn replic\n  [lst n]\n  (->>\n    (cond\n      (empty? lst) ()\n      (= 0 n) ()\n      :else\n        (for [i lst] (repeat n i)))\n    (reduce concat)))", "user": "59e68254e4b0249b728206fc"}, {"problem": 33, "code": "(fn [xs n]\n  (mapcat #(repeat n %) xs))", "user": "59eb63e3e4b0249b7282077c"}, {"problem": 33, "code": "(fn f\n  ([s t]\n   (f s t '()))\n  ([s t r]\n   (if (empty? s)\n     (reverse r)\n     (recur (rest s) t (into r (repeat t (first s)))))))", "user": "59ea85e4e4b0249b72820767"}, {"problem": 33, "code": "(fn rep [lst n]\n  (loop [lst lst\n         result ()]\n    (if (empty? lst)  result\n                     (recur (next lst) (concat result(replicate n (first lst)))))))", "user": "59dd387ae4b0a0ac046f2501"}, {"problem": 33, "code": "(fn [seq times]\n  (reduce\n    (fn [acc elm]\n      (concat acc (take times (repeat elm))))\n    '()\n    seq))", "user": "5984e7dee4b021a7a535fe43"}, {"problem": 33, "code": "(fn[s n] (mapcat #(repeat n %) s))", "user": "58d96bdce4b0a4d5acaab638"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "59ed01ede4b0249b7282079a"}, {"problem": 33, "code": "(fn [sq n] (if (< n 2)\n               sq\n               (apply interleave (repeat n sq))))", "user": "59d4a160e4b0ef0a1e9b5be7"}, {"problem": 33, "code": "(fn d[a b] (if (empty? a) [] (concat (repeat b (first a)) (d (rest a) b))))", "user": "59e8bb43e4b0249b72820735"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "59e0f839e4b08badc2a0c502"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "59c8ffe6e4b0a024fb6ae56c"}, {"problem": 33, "code": "(fn fuck [sq dn]\n  (loop [raw-seq sq pseq '() index 0 ]\n    (cond\n      (>= index (count raw-seq)) pseq\n      :else (recur sq (concat pseq (loop [dupseq '() rem-dn dn]\n                                     (cond\n                                       (zero? rem-dn) dupseq\n                                       :else (recur (concat dupseq [(nth raw-seq index)]) (- rem-dn 1)))\n                                     )) (+ index 1) ))\n    ))", "user": "5831846ae4b051871117c02c"}, {"problem": 33, "code": "(fn [xs n]\n  (->> xs\n       (map (partial repeat n))\n       (apply concat)))", "user": "59ee6801e4b0966464fe6a1f"}, {"problem": 33, "code": "(fn [coll n] (apply list (reduce (fn [c next] (concat c (repeat n next))) [] coll)))", "user": "59908f3fe4b0866487ed0d50"}, {"problem": 33, "code": "(fn [col n] (for [c col x (range n)] c))", "user": "566e87cfe4b0a866af6896dc"}, {"problem": 33, "code": "(fn [L n] (reduce concat (map #(repeat n %) L)))", "user": "553bc237e4b09218d5f4500a"}, {"problem": 33, "code": "(fn [s n](mapcat #(repeat n %) s))", "user": "59d87190e4b0ef0a1e9b5c42"}, {"problem": 33, "code": "(fn [xs n]\n  (mapcat #(repeat n %) xs))", "user": "59f2af64e4b0966464fe6a87"}, {"problem": 33, "code": "(fn [lst x] (mapcat #(repeat x %) lst))", "user": "59e8cd8be4b0249b72820739"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "59c76402e4b0a024fb6ae542"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat \n   #(repeat n %)\n   coll))", "user": "59ba2ea0e4b0a024fb6ae3e1"}, {"problem": 33, "code": "(fn [coll n] (mapcat (fn [x] (loop [itr n\n                                      out []]\n                                 (if (= 0 itr)\n                                   ;; stop\n                                   out \n                                   ;;recur\n                                   (recur (dec itr) (conj out x))))) coll))", "user": "5683fcafe4b0945ebc182aa8"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "59ef6cfae4b0966464fe6a32"}, {"problem": 33, "code": "(fn replic [s n]\n  (mapcat #(repeat n %) s)\n  )", "user": "59f78b49e4b0ca45a743a30e"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %)  x))", "user": "59f8b925e4b0ca45a743a327"}, {"problem": 33, "code": "#(apply concat (map (partial repeat %2) %1))", "user": "59f90e6ae4b0ca45a743a337"}, {"problem": 33, "code": "(fn [s n]\n  \n  ; run interleave with n arguments\n  (if (= 1 n) s (apply interleave (repeat n s)))\n  \n  )", "user": "56f2611fe4b04a395b9a04a2"}, {"problem": 33, "code": "#(mapcat (fn [input](repeat %2 input)) %1)", "user": "59f192e0e4b0966464fe6a5e"}, {"problem": 33, "code": "(fn [xs n]\n  (loop [rs xs\n         acc []]\n    (if (empty? rs) acc\n    (recur (rest rs) (concat acc (repeat n (first rs)))))))", "user": "57eaf869e4b0bfb2137f5b56"}, {"problem": 33, "code": "(fn [coll n] \n  (if (< n 2)\n    coll\n  \t(apply interleave (take n (repeat coll)))))", "user": "59f44189e4b0966464fe6aab"}, {"problem": 33, "code": "(fn n-rep [s n]\n  (mapcat #(repeat n %) s))", "user": "590aaa78e4b047aa04b199c0"}, {"problem": 33, "code": "#_#(apply (if (> %2 1)\n          interleave\n          identity)\n        (repeat %2 %1))\n\n#(mapcat (fn [input](repeat %2 input)) %1)\n\n;; If 4clojure would use a more recent version of Clojure (it uses 1.4.0 as the time of writing this),\n;; the following simplified code would work:\n;;   #(apply interleave (repeat %2 %1))", "user": "59a080e3e4b0871e7608b837"}, {"problem": 33, "code": "(fn n-uplicate\n    [coll n]\n     (reduce (fn [processed current] \n               (concat processed (repeat n current))\n               ) \n             [] \n             coll)\n    )", "user": "59fa5fe0e4b0ca45a743a35f"}, {"problem": 33, "code": "(fn  [coll n] (mapcat identity (map #(take n (repeat %)) coll)))", "user": "59fa0bb6e4b0ca45a743a352"}, {"problem": 33, "code": "(fn [xs n]\n  (mapcat #(repeat n %) xs))", "user": "59fa241ee4b0ca45a743a358"}, {"problem": 33, "code": "#(loop [x %1 y '()]\n   (if (empty? x) y\n       (recur (rest x) (concat y (repeat %2 (first x))))))", "user": "59fea630e4b01bb0ae8afd10"}, {"problem": 33, "code": "(fn my-rep [xs n]\n  (vec (mapcat #(repeat n %) xs)))", "user": "59f7f55de4b0ca45a743a313"}, {"problem": 33, "code": "; (fn [x y] (reduce #(into %1 (take y (iterate identity %2))) [] x))\n#(mapcat (partial repeat %2) %1)", "user": "59f590ade4b0966464fe6ac1"}, {"problem": 33, "code": "(fn [x y]\n  (mapcat #(take y (repeat %)) x))", "user": "5628f33ce4b00e49c7cb47f3"}, {"problem": 33, "code": "(fn [col n]\n     (reduce concat (map #(take n (repeat %)) col)))", "user": "59fa7fb0e4b0ca45a743a366"}, {"problem": 33, "code": "#(mapcat (fn [input](repeat %2 input)) %1)", "user": "59e5b6a1e4b08badc2a0c55b"}, {"problem": 33, "code": "#(reduce (fn [acc itm] (into acc (repeat %2 itm))) [] %1)", "user": "5a01d8f6e4b01bb0ae8afd53"}, {"problem": 33, "code": "(fn [coll num] (reduce concat (for [x coll :let [y (repeat num x)]] y)))", "user": "58b2fe10e4b0ebc645576d17"}, {"problem": 33, "code": "(fn rep [coll n]  (mapcat #(repeat n %) coll))", "user": "58182480e4b0c0e9c07b83a7"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "56fcd9dfe4b08d47c977819e"}, {"problem": 33, "code": "(fn [singleList times] \n  (reduce (fn [newList el] (into newList (repeat times el))) [] singleList))", "user": "588fd085e4b00487982d51c0"}, {"problem": 33, "code": "(fn [s n]\n  (reduce\n   (fn [x y]\n     (concat x (take n (iterate identity y)))\n   ) [] s\n  )\n)", "user": "5a04e923e4b01bb0ae8afda9"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat (partial repeat n) coll))", "user": "5a065388e4b01bb0ae8afdcb"}, {"problem": 33, "code": "#(if (= %2 1) % (apply interleave (repeat %2 %)))", "user": "59fa5773e4b0ca45a743a35e"}, {"problem": 33, "code": "#(apply concat (for [i %] (repeat %2 i)))", "user": "59fedc26e4b01bb0ae8afd17"}, {"problem": 33, "code": "(fn [lst i] (mapcat #(repeat i %) lst))", "user": "59f15e20e4b0966464fe6a5a"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "59777e42e4b01722bebd4cf0"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "529735cbe4b02ebb4ef7503c"}, {"problem": 33, "code": "(fn [s c] \n     (reduce (fn [dup elm] \n                 (apply conj dup \n                       (take c \n                             (repeat elm)))) [] s))", "user": "59f9c111e4b0ca45a743a349"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5a080bdde4b01bb0ae8afde9"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5a075e73e4b01bb0ae8afdd9"}, {"problem": 33, "code": "(fn replic8 [s n]\n\t\t(apply concat (map (fn [el]\n\t\t\t(repeat n el)\n\n\t\t\t) s))\n\n\t)", "user": "5a025edde4b01bb0ae8afd64"}, {"problem": 33, "code": "#(\n    loop [a %1 res []]\n    (if (empty? a)\n      res\n      (recur (rest a) (concat res (repeat %2 (first a)))))\n    )", "user": "59f58103e4b0966464fe6ac0"}, {"problem": 33, "code": "(fn [l k] (apply concat (map #(->> % repeat (take k)) l)))", "user": "57cf9de8e4b00451144b0503"}, {"problem": 33, "code": "(fn rep-seq [coll x]\n  (mapcat #(repeat x %) coll))", "user": "598876fee4b021a7a535feb7"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "5a00cb31e4b01bb0ae8afd36"}, {"problem": 33, "code": "(fn [x, y] (apply concat (map #(repeat y %) x)))", "user": "5a0a3473e4b0eab8c0448941"}, {"problem": 33, "code": "#(reduce (fn [a i] (apply conj a (repeat %2 i))) [] %1)", "user": "5a0b9fc0e4b04bbd27e6d992"}, {"problem": 33, "code": "#(mapcat (fn[input](repeat %2 input)) %1)", "user": "59f820d9e4b0ca45a743a316"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(take n (repeat %)) coll))", "user": "5a062e07e4b01bb0ae8afdc5"}, {"problem": 33, "code": "(fn [coll n] \n     (reduce \n             (fn [acc x] \n                 (concat acc (repeat n x))) () coll))", "user": "5a07fefee4b01bb0ae8afde5"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5a090a06e4b01bb0ae8afdff"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "4db2eac3535df7e46ed9b6c8"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5a0a25fce4b0eab8c044893d"}, {"problem": 33, "code": "(fn myfunc [col n]\n  (apply concat (map\n    (fn [el] (take n (repeat el)))\n    col)))", "user": "5a06c154e4b01bb0ae8afdce"}, {"problem": 33, "code": "#(reverse (reduce into (for [ v %1 ] (let [ic %2] (repeat ic v)))))", "user": "58d1c1b1e4b03c36ff7e58ef"}, {"problem": 33, "code": "(fn [col n]\n(mapcat #(take n (repeat %)) col)\n  )", "user": "55ec879ae4b0121d4835fdc8"}, {"problem": 33, "code": "#(reduce (fn [result x] (into result (repeat %2 x)))\n         [] %1)", "user": "5a0a04eee4b0eab8c0448935"}, {"problem": 33, "code": "(fn [list n] \n  (reduce (fn [result x] (concat result (take n (repeat x)))) [] list))", "user": "5a12dea3e4b04bbd27e6da44"}, {"problem": 33, "code": "(fn [s n]\n  (reduce (fn [l v]\n            (apply conj l (repeat n v)))\n          []\n          s))", "user": "54497569e4b032a45b8693d2"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5830377ee4b051871117c004"}, {"problem": 33, "code": "#(reduce (fn F[x y](concat x (take %2(repeat y)))) [] %1)", "user": "55129667e4b06e50f9beb1ac"}, {"problem": 33, "code": "(fn [col n]\n  (mapcat (fn [e] (take n (repeat e))) col))", "user": "5a188be3e4b0ff51aa4b31ec"}, {"problem": 33, "code": "(fn [aseq n] (mapcat #(take n (iterate identity %)) aseq))", "user": "5a0ce1a5e4b04bbd27e6d9b7"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "5a14228fe4b0ff51aa4b3193"}, {"problem": 33, "code": "#(mapcat (fn [v] (repeat %2 v)) %1)", "user": "59fd069ae4b01bb0ae8afcf4"}, {"problem": 33, "code": "#(reduce (fn [s item] (concat s (reduce (fn [s2 _] (conj s2 item)) [] (range %2)))) [] %1)", "user": "5a071cb2e4b01bb0ae8afdd8"}, {"problem": 33, "code": "(fn rep [input factor]\n  (reduce\n    #(into %1 (take factor (cycle [%2])))\n    []\n    input))", "user": "5a0ef454e4b04bbd27e6d9fa"}, {"problem": 33, "code": "(fn f [l n]\n  (if (empty? l)\n    '()\n    (concat (take n (repeat (first l))) (f (rest l) n) )))", "user": "574b4f3ee4b02ea114799207"}, {"problem": 33, "code": "(fn [col n]\n  (reduce\n   (fn [prev cur]\n     (concat prev (repeat n cur)))\n   []\n   col))", "user": "5a144fd8e4b0ff51aa4b319a"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce #(concat %1 (repeat n %2)) [] coll))", "user": "580a0783e4b0a837a8b30d2c"}, {"problem": 33, "code": "#(->> %1\n      (map (fn m[x](repeat %2 x)))\n      (reduce concat []))", "user": "59135c11e4b0163c97b36f02"}, {"problem": 33, "code": "#(for [x %1 y(range %2)] x)", "user": "59fcc31fe4b01bb0ae8afcef"}, {"problem": 33, "code": "#(reduce (fn [acc v]\n           (into acc (repeat %2 v))\n           ) [] %1)", "user": "5a18488ee4b0ff51aa4b31e5"}, {"problem": 33, "code": "(fn [xs t] (reduce #(concat %1 (repeat t %2)) [] xs))", "user": "5a16da30e4b0ff51aa4b31cc"}, {"problem": 33, "code": "(fn [in-coll cnt] (loop [out-coll '() idx 0]\n  (if (= idx (count in-coll))\n    out-coll\n    (recur (concat out-coll (repeat cnt (nth in-coll idx))) (inc idx)))))", "user": "5a182c9de4b0ff51aa4b31e0"}, {"problem": 33, "code": "(fn repl [xs n] (reduce (fn [acc x] (concat acc (repeat n x))) [] xs))", "user": "59f043d0e4b0966464fe6a3d"}, {"problem": 33, "code": "(fn [c n] (mapcat (partial repeat n) c))", "user": "5112500ee4b0350614f07a72"}, {"problem": 33, "code": "(fn [x y] (apply concat (map #(take y (repeat %)) x )))", "user": "5a14959de4b0ff51aa4b31a0"}, {"problem": 33, "code": "(fn [x n] (reduce concat (map (partial repeat n) x)))", "user": "59ff9424e4b01bb0ae8afd24"}, {"problem": 33, "code": "(fn [l n]\n  (reduce (fn [x y] (concat x (repeat n y))) [] l))", "user": "5a1ef970e4b0ff51aa4b327d"}, {"problem": 33, "code": "(fn replicate-seq [coll n]\n        (mapcat #(repeat n %) coll))", "user": "59b69bbee4b05c620303ca2a"}, {"problem": 33, "code": "(fn [s, cnt] (mapcat #(repeat cnt %) s))", "user": "5a214798e4b0ff51aa4b32aa"}, {"problem": 33, "code": "(fn [formal times]\n  (loop [input formal\n         output ()]\n    (if (empty? input) output\n      (recur (rest input) (concat output (repeat times (first input)))))))", "user": "5a2185a4e4b0ff51aa4b32b0"}, {"problem": 33, "code": "(fn [x y] (apply concat (map (fn [e] (repeat y e)) x)))", "user": "5a1dd5b4e4b0ff51aa4b3260"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "57a499dae4b0a966079561e6"}, {"problem": 33, "code": "#(apply concat (map (fn [el] (take %2 (repeat el))) %1))", "user": "5a1149ace4b04bbd27e6da26"}, {"problem": 33, "code": "(fn [input n]\n    (mapcat #(repeat n %) input))", "user": "5a21d34ce4b0ff51aa4b32b9"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5a250b86e4b07f18be40aa19"}, {"problem": 33, "code": "(fn [l c] (mapcat #(repeat c %) l))", "user": "5a19d181e4b0ff51aa4b3207"}, {"problem": 33, "code": "(fn [c n] (mapcat identity (map #(take n (repeat %1)) c)))", "user": "5a23cabce4b0ff51aa4b32df"}, {"problem": 33, "code": "(fn bar[item count](mapcat #(repeat count %) item))", "user": "5a05a807e4b01bb0ae8afdb8"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat (fn [s]\n            (repeat n s)) s))", "user": "59f75327e4b0966464fe6aec"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "59690e79e4b069c0a1a197e0"}, {"problem": 33, "code": "(fn [x z] (mapcat (fn [y] (take z (repeat y))) x))", "user": "5a21c3f9e4b0ff51aa4b32b7"}, {"problem": 33, "code": "(fn repnumtim [coll number] ( mapcat #(repeat number %) coll))", "user": "5a2960fde4b07f18be40aa78"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5a135573e4b0ff51aa4b3180"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "5a03d246e4b01bb0ae8afd8c"}, {"problem": 33, "code": "(fn [seq_, n] (mapcat #(repeat n % ) seq_ ))", "user": "5a2834dfe4b07f18be40aa64"}, {"problem": 33, "code": "(fn [l times] (loop [l l result '()] \n                (if (empty? l) result \n                  (recur (rest l) (concat result (repeat times (first l)))))))", "user": "5a2df4a0e4b09cafd31c7f74"}, {"problem": 33, "code": "(fn [sqn times] (mapcat #(repeat times %) sqn))", "user": "5a2a0cb6e4b09cafd31c7f2c"}, {"problem": 33, "code": "(fn [x y]\n( mapcat #(repeat y %) x))", "user": "5a1c8c26e4b0ff51aa4b3247"}, {"problem": 33, "code": "(fn repseq [s n] (mapcat #(repeat n %) s))", "user": "5a2e39fce4b09cafd31c7f77"}, {"problem": 33, "code": "#(for [a %1 b (range 0 %2)] a)", "user": "5a1bec89e4b0ff51aa4b322f"}, {"problem": 33, "code": "(fn [coll rep-count] (mapcat (fn [c] (vec (replicate rep-count c))) coll))", "user": "59a5b3f4e4b066c664927d69"}, {"problem": 33, "code": "(fn [l r] \n    (loop [x l y nil]\n          (if (empty? x)\n              (reverse y)\n              (recur (rest x) (concat (replicate r (first x)) y)))))", "user": "5a34f342e4b0ddc586f153d1"}, {"problem": 33, "code": "(fn [xs n]\n  (reduce #(into %1 (repeat n %2)) [] xs))", "user": "56ef077ae4b04a395b9a0459"}, {"problem": 33, "code": "(fn [xs n]\n    (loop [acc [] ys xs]\n       (if (empty? ys)\n            acc\n            (\n              recur  (concat acc (repeat n (first ys)) )\n                     (rest ys)\n            )\n)))", "user": "55d7312ee4b0e31453f64a9f"}, {"problem": 33, "code": "(fn [coll times] (reduce concat (map #(take times (repeat %)) coll)))", "user": "585c16c3e4b0f14aab7c877d"}, {"problem": 33, "code": "#(if (> %2 1) (apply interleave (repeat %2 %1)) %1)", "user": "5a285a38e4b07f18be40aa67"}, {"problem": 33, "code": "(fn temp\n  [lst c]\n  (mapcat #(repeat c %) lst))", "user": "5a3b5cfde4b001c08efc0cd4"}, {"problem": 33, "code": "(fn [s c] (mapcat #(take c (repeat %)) s))", "user": "53307a23e4b019098a6f8b5d"}, {"problem": 33, "code": "(fn [coll n] (apply concat (map (fn [x] (repeat n x)) coll)))", "user": "5773f3a9e4b0979f896515f2"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "59dfb8dbe4b08badc2a0c4da"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5a3c5c54e4b001c08efc0ce3"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "5a3d7afae4b0447ef91cc5a6"}, {"problem": 33, "code": "(fn [x y] (apply concat (reduce #(conj %1 (repeat y %2)) [] x)))", "user": "52281e1ee4b0186687e23a69"}, {"problem": 33, "code": "#(mapcat (fn [e] (repeat %2 e)) %1)", "user": "5a3ece62e4b0447ef91cc5b9"}, {"problem": 33, "code": "(fn [coll times]\n  (mapcat #(repeat times %) \n       coll))", "user": "5a29ee57e4b09cafd31c7f2b"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5a3d33b3e4b001c08efc0cef"}, {"problem": 33, "code": "(fn [collection reps]\n   (reduce (fn [coll x] (into coll (repeat reps x))) [] collection))", "user": "58a6806ee4b01a0c0b23292f"}, {"problem": 33, "code": "(fn [x r] (mapcat #(repeat r %1) x))", "user": "5a401a7de4b0447ef91cc5c5"}, {"problem": 33, "code": "(fn [coll x] (mapcat #(repeat x %) coll))", "user": "5a40eb64e4b0447ef91cc5d8"}, {"problem": 33, "code": "(fn [s n]\n  (apply concat (map #(repeat n %) s)))", "user": "5a42dbabe4b0447ef91cc5fc"}, {"problem": 33, "code": "(fn duplicate\n  [coll n]\n  (reduce (fn\n            [acc current]\n            (concat acc (repeat n current)))\n          '() coll))", "user": "5a429e40e4b0447ef91cc5f9"}, {"problem": 33, "code": "(fn [x n]\n   (->> \n     (map (fn [y]\n            {:value y}) x)\n     (map (fn [y] \n            (map (fn [k] y) (range n))\n            ) \n          )\n     (flatten)\n     (map :value)\n     )\n   )", "user": "5a43347ee4b0447ef91cc603"}, {"problem": 33, "code": "#(apply concat (map (fn [input](repeat %2 input)) %1))", "user": "5a0e9a54e4b04bbd27e6d9ef"}, {"problem": 33, "code": "(fn [a x] (mapcat #(repeat x %) a))", "user": "57de5f0ee4b0bd073c202450"}, {"problem": 33, "code": "(fn [L n]\n  (mapcat #(take n (iterate identity %)) L))", "user": "5a409d77e4b0447ef91cc5d3"}, {"problem": 33, "code": "(fn dupe [coll x]\n  (loop [coll coll\n         acc ()]\n    (if (empty? coll)\n      (reverse acc)\n      (recur (rest coll) (into acc (repeat x (first coll)))))))", "user": "5a346d73e4b0ddc586f153c8"}, {"problem": 33, "code": "#(reduce concat (for [x %1] (repeat %2 x)))", "user": "5a342188e4b0ddc586f153bd"}, {"problem": 33, "code": "(fn my-repl [s n]\n  (loop [s s, res []]\n    (if (seq s)\n      (recur (rest s) (concat res (repeat n (first s))))\n      res)))", "user": "5a481e05e4b05d388ecb6b64"}, {"problem": 33, "code": "(fn replicate'\n  [x n]\n  (apply concat (map #(repeat n %) x)))", "user": "5a067f26e4b01bb0ae8afdcc"}, {"problem": 33, "code": "(fn [lat, n]\n  (reduce concat (map #(take n (repeat %)) lat)))", "user": "5a47ce68e4b05d388ecb6b5d"}, {"problem": 33, "code": "(fn [seq n] (mapcat #(repeat n %) seq))", "user": "5a4993c0e4b05d388ecb6b71"}, {"problem": 33, "code": "#(apply concat (map (fn [input](repeat %2 input)) %1))", "user": "5a4443cae4b0447ef91cc60f"}, {"problem": 33, "code": "(fn [xs n]\n  (reduce #(concat %1 (repeat n %2))\n          '()\n          xs))", "user": "5a37b6dbe4b001c08efc0c88"}, {"problem": 33, "code": "(fn [s n] (->> s (map #(replicate n %)) (apply concat)))", "user": "5a4de614e4b05d388ecb6bb1"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5a4e1c81e4b05d388ecb6bb6"}, {"problem": 33, "code": "(fn [data n] (reduce concat (map #(repeat n %) data)))", "user": "5a4ec4f0e4b05d388ecb6bc2"}, {"problem": 33, "code": "#(mapcat (fn [input](repeat %2 input)) %1)", "user": "5a4208dde4b0447ef91cc5ee"}, {"problem": 33, "code": "(fn dup2\n  [myseq count]\n  (loop [tmpseq myseq result []]\n    (if (empty? tmpseq) result\n                        (let [a (first tmpseq)]\n                          (recur (rest tmpseq) (apply conj result (loop [c count result []]\n                                                       (if (= c 0) result\n                                                                   (recur (dec c) (conj result a))\n                                                                   )))\n                                 )))\n    ))", "user": "5a4cbba1e4b05d388ecb6b98"}, {"problem": 33, "code": "#(reduce (fn [res, elem] (concat res (take %2 (repeat elem)))) [] %1)", "user": "5a1c3c11e4b0ff51aa4b323d"}, {"problem": 33, "code": "#(apply concat (map (fn [e] (repeat %2 e)) %1) )", "user": "5a535572e4b05d388ecb6c0b"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5a546344e4b05d388ecb6c27"}, {"problem": 33, "code": "(fn [c n]\n  (if (= n 1)\n    (seq c)\n    (apply interleave (repeat n c))))", "user": "5a512929e4b05d388ecb6be2"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "user": "5a4caa20e4b05d388ecb6b94"}, {"problem": 33, "code": "(fn [x n] (apply concat (map #(repeat n %) x)))", "user": "5a533cc0e4b05d388ecb6c09"}, {"problem": 33, "code": "#(mapcat(fn [array] (repeat %2 array)) %1)", "user": "5a534241e4b05d388ecb6c0a"}, {"problem": 33, "code": "(fn [xs n] \n  (reduce \n   concat \n   [] \n   (map #(take n (repeat %)) xs)\n  )\n  )", "user": "5a55114ae4b05d388ecb6c37"}, {"problem": 33, "code": "#(apply concat (map (fn [input](repeat %2 input)) %1))", "user": "58d4d864e4b03c36ff7e594c"}, {"problem": 33, "code": "(fn [coll rep] (reduce (fn [x y] (concat x (take rep (repeat y)))) '() coll))", "user": "5a4d656fe4b05d388ecb6ba9"}, {"problem": 33, "code": "(fn [c r] (mapcat #(repeat r %) c))", "user": "5a527beee4b05d388ecb6bfe"}, {"problem": 33, "code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "user": "5a424954e4b0447ef91cc5f0"}, {"problem": 33, "code": "(fn [xs n] (apply concat (map (fn [x] (repeat n x)) xs)))", "user": "552d9b31e4b076ab5578f7eb"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "5a566e8fe4b05d388ecb6c51"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(concat (repeat n %)) coll))", "user": "565654dae4b0f9d632dd849f"}, {"problem": 33, "code": "(fn [in cnt] (reduce #(concat %1 (repeat cnt %2)) [] in))", "user": "5a244240e4b0ff51aa4b32e9"}, {"problem": 33, "code": "(fn [coll n] (mapcat (partial repeat n) coll))", "user": "5182de5ce4b0353c468deb74"}, {"problem": 33, "code": "(fn [s n]\n  (apply mapcat list (take n (repeat s))))", "user": "53f053ebe4b0742d9025b0d3"}, {"problem": 33, "code": "(fn [l r] (mapcat #(repeat r %) l))", "user": "5a591d04e4b05d388ecb6c90"}, {"problem": 33, "code": "(fn replicate\n  [l n]\n  (apply concat (map (fn [x] (repeat n x)) l))\n  )", "user": "59ce973de4b0ef0a1e9b5b56"}, {"problem": 33, "code": "(fn [x1 x2]\n    (if (= x2 1) \n     x1\n    (apply interleave (repeat x2 x1))))", "user": "5a51e029e4b05d388ecb6bf0"}, {"problem": 33, "code": "(fn [xs n]\n  (reduce concat (map #(replicate n %) xs)))", "user": "5a584ca2e4b05d388ecb6c7d"}, {"problem": 33, "code": "(fn [col times]\n  (loop [col col acc '()]\n    (if (empty? col)\n      acc\n      (recur (rest col)\n             (concat acc\n                  \t(repeat times (first col)))))))", "user": "587b8bdee4b01531a375eaff"}, {"problem": 33, "code": "(fn\n  [coll n]\n  (loop [dest [] src coll]\n    (if (empty? src)\n      dest\n      (recur\n       (into dest (repeat n (first src)))\n       (rest src)))))", "user": "5a5be4a6e4b0512ff01cd910"}, {"problem": 33, "code": "(fn [inc-list, n]\n  (reduce concat [] \n    (map (fn [elem] (seq (loop [x n, res []] (if (zero? x) res (recur (dec x) (conj res elem)))))) inc-list)\n  )\n)", "user": "5a4dbc97e4b05d388ecb6bae"}, {"problem": 33, "code": "(fn [s n]\n    (mapcat #(vec (repeat n %)) s))", "user": "5a5d0726e4b0512ff01cd91b"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "51dafedee4b09f6bc204eee2"}, {"problem": 33, "code": "(fn [coll s] (mapcat (fn [x] (repeat s x)) coll))", "user": "5a5dbe9de4b0512ff01cd92b"}, {"problem": 33, "code": "(fn [s n] (mapcat (fn [x] (repeat n x)) s))", "user": "5a5894d9e4b05d388ecb6c81"}, {"problem": 33, "code": "#(reduce (fn [acc x] (concat acc (repeat %2 x))) [] %1)", "user": "5a5be1ece4b0512ff01cd90f"}, {"problem": 33, "code": "(fn [sq n]\n  (reduce concat (map (partial repeat n) sq))\n  )", "user": "5a388675e4b001c08efc0ca2"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "59cd13d5e4b0ef0a1e9b5b32"}, {"problem": 33, "code": "(fn [s r] (reduce concat (map #(take r (repeat %)) s)))", "user": "5a3c2a08e4b001c08efc0cdf"}, {"problem": 33, "code": "#(cond \n    (= 0 %2) '()\n    (= 1 %2) (list* %)\n    :else (apply interleave (repeat %2 %)))", "user": "5a52f2cbe4b05d388ecb6c06"}, {"problem": 33, "code": "(fn [coll x] (mapcat #(take x (repeat %)) coll) )", "user": "595131bee4b066ee0a44aea9"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5a58bfd0e4b05d388ecb6c84"}, {"problem": 33, "code": "#(mapcat (partial replicate %2) %1)", "user": "5a621702e4b0512ff01cd983"}, {"problem": 33, "code": "(fn [col n]\n  (mapcat #(repeat n %) col))", "user": "5a624129e4b0512ff01cd987"}, {"problem": 33, "code": "#(->> (for [x %1]\n         (repeat %2 x))\n      (apply concat))", "user": "5a36e788e4b0ddc586f153ec"}, {"problem": 33, "code": "(fn [xs n] \n  (mapcat identity (map #(repeat n %) xs)))", "user": "56fd058be4b08d47c97781a1"}, {"problem": 33, "code": "#(if (= 1 %2) % (apply interleave (repeat %2 %)))", "user": "5a536cf2e4b05d388ecb6c10"}, {"problem": 33, "code": "(fn [coll times]\n  (mapcat (fn [elem]\n            (repeat times elem))\n          coll))", "user": "55952410e4b0c79f6e1db962"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5a66e81ee4b0512ff01cd9d3"}, {"problem": 33, "code": "(fn [collections n] (apply concat (map #(repeat n %) collections)))", "user": "5a59a76fe4b05d388ecb6c98"}, {"problem": 33, "code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "user": "5a6bf911e4b0512ff01cda4c"}, {"problem": 33, "code": "(fn rep [s n]\n  (loop [cur s\n         acc '()]\n    (if (empty? cur)\n      acc\n      (recur (rest cur) (concat acc (repeat n (first cur)))))))", "user": "5a6b9b95e4b0512ff01cda40"}, {"problem": 33, "code": "#(for [x %1 xs (repeat %2 x)] xs)\n\n;;#(apply concat (map (partial repeat %2) %1))\n\n;;(fn [coll n]\n  ;;(apply concat (map #(repeat n %) coll)))\n\n;; silverio!\n;;#(for [x %1 y (range %2)] x)", "user": "5a257747e4b07f18be40aa1f"}, {"problem": 33, "code": "(fn my-replicate\n  [sqc n]\n  (if (seq sqc)\n    (concat (repeat n (first sqc)) (my-replicate (rest sqc) n))\n    '()))", "user": "5a6a32b6e4b0512ff01cda22"}, {"problem": 33, "code": "(fn [lyst times]\n  (reduce (fn [a b]\n            (apply (partial conj a)\n                   (repeatedly times (fn [] b))))\n          '()\n          (reverse lyst)))", "user": "55f344afe4b06e875b46ce5a"}, {"problem": 33, "code": "(fn [x n]\n  (apply concat\n    (apply concat\n      (for [y x]\n        (concat (repeat n [y]))))))", "user": "5a6a7cc5e4b0512ff01cda27"}, {"problem": 33, "code": "(fn [s n] (loop[s s\n                 n1 n\n                 ret '()]\n             (if (< 0 n1)\n               (if (first s)\n                 (recur s (dec n1) (conj ret (first s)))\n                 (reverse ret))\n               (recur (rest s) n ret))))", "user": "5a6b15e9e4b0512ff01cda32"}, {"problem": 33, "code": "(fn [a b] (mapcat identity (apply map #(vec %&) (repeat b a))))", "user": "5a66f358e4b0512ff01cd9d5"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %)", "user": "5a625bc2e4b0512ff01cd989"}, {"problem": 33, "code": "(fn [col times] (mapcat #(repeat times %) col))", "user": "5619b22ee4b053970a773afe"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "57a6552ce4b0a96607956208"}, {"problem": 33, "code": "(fn rep [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5a488c09e4b05d388ecb6b68"}, {"problem": 33, "code": "(fn[coll repeatCount] (apply concat (map (fn[eachElement] (repeat repeatCount eachElement)) coll)))", "user": "5a63f8bae4b0512ff01cd99f"}, {"problem": 33, "code": "(fn [coll n] (reduce (fn [new-coll x] (into new-coll (repeat n x)))\n                      [] coll))", "user": "5a61bf79e4b0512ff01cd97b"}, {"problem": 33, "code": "(fn\n  [s n]\n  (mapcat identity (for [x s] (take n (iterate identity x)))))", "user": "529f9bf2e4b04e0c58e87bb4"}, {"problem": 33, "code": "#(loop [coll %1 result '()]\n  (if (empty? coll)\n    result\n    (recur (rest coll)   (concat result (repeat %2 (first coll)))\n           )))", "user": "5a71c89ee4b0512ff01cda93"}, {"problem": 33, "code": "(fn [xs n] (apply list (reduce #(apply conj %1 (repeat n %2)) [] xs)))", "user": "5920c191e4b09b4ee5954c61"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5a6af090e4b0512ff01cda2d"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5a71e7c9e4b0512ff01cda95"}, {"problem": 33, "code": "(fn duplicate [x n]\n  (reduce concat\n   (for [a x]\n     (take n (repeat a)))))", "user": "58f5b58ae4b0438e51c2cedc"}, {"problem": 33, "code": "(fn aaaa[e t] (reverse (reduce (fn [p ag] ( apply conj p ag)) (map (fn [ele] (repeat t ele)) e))))", "user": "5a634ff0e4b0512ff01cd995"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "4fd4bddce4b0d4de60cee36e"}, {"problem": 33, "code": "(fn [elements times] (apply concat (reduce (fn [x y] (conj x (repeat times y))) [] elements)))", "user": "5a6170fde4b0512ff01cd975"}, {"problem": 33, "code": "#(apply concat (map (fn [input](repeat %2 input)) %1))", "user": "58eed5b7e4b056aecfd47db8"}, {"problem": 33, "code": "#(mapcat (fn [input](repeat %2 input)) %1)", "user": "59b9e669e4b0a024fb6ae3db"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "5a7cee73e4b03baeef9276f2"}, {"problem": 33, "code": "(fn [l, n]\n   (reduce #(concat %1 (repeat n %2)) () l)\n   )", "user": "5a80b934e4b00b71e582a05b"}, {"problem": 33, "code": "(fn [x y] \n         (mapcat  #(repeat y %) x)\n    )", "user": "5a6afb1de4b0512ff01cda2f"}, {"problem": 33, "code": "(fn problem-33 [coll n]\n  (apply concat (map #(repeat n %) coll)))\n\n\n;; Example solution with recursion.\n;; \n;; (fn problem-33 [coll n]\n;;   (let [replicate-fn (fn replicate [n element]\n;;                        (cond\n;;                          (or (<= n 0) (nil? element)) '()\n;;                          :else (cons element (replicate (dec n) element))))]\n;;     (apply concat (map (partial replicate n) coll))))", "user": "5a786f6be4b013a48d39976e"}, {"problem": 33, "code": "(fn [a b] (mapcat identity (map #(mapcat identity (list (repeat b %1))) a)))", "user": "5a4b3abde4b05d388ecb6b81"}, {"problem": 33, "code": "(fn[col t](mapcat #(repeat t %) col ))", "user": "5a80ad4be4b00b71e582a058"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5a7deab5e4b03baeef927703"}, {"problem": 33, "code": "(fn [x n] (mapcat #(repeat n %) x))\n \n;;#(apply interleave (repeat %2 %1))", "user": "5a84cf8de4b00b71e582a095"}, {"problem": 33, "code": "(fn [seq n]\n  \t(if (= n 1)\n      seq\n           (apply interleave (repeat n seq))))", "user": "5a813b90e4b00b71e582a065"}, {"problem": 33, "code": "(fn [s n] (reduce (fn [s1 s2] (concat s1 s2)) '()  (map #(replicate n %) s)))", "user": "5a86ad84e4b05369db4d249c"}, {"problem": 33, "code": "(fn Rep [x y]\n  (mapcat #(repeat y %) x))", "user": "5a779197e4b013a48d399763"}, {"problem": 33, "code": "(fn [s nb]\n  (mapcat #(repeat nb %) s))", "user": "5a75da49e4b0512ff01cdacf"}, {"problem": 33, "code": "#(reduce (fn [acc cur] (concat acc (take %2 (repeat cur)))) [] %1)", "user": "59021fede4b0438e51c2d04d"}, {"problem": 33, "code": "(fn [coll, n]\n    (apply concat (map (fn [el]\n                       (loop [nL n, aList ()]\n                         (if (= nL 0)\n                           aList\n                           (recur (dec nL) (conj aList el))))) coll)))", "user": "5a7ff79ce4b00b71e582a046"}, {"problem": 33, "code": "(fn [xs n] (reduce #(into %1  (repeat n %2)) [] xs))", "user": "5a8e9a7ae4b05369db4d2528"}, {"problem": 33, "code": "(fn replic\n  [lst n]\n  (mapcat (fn [x] (repeat n x)) lst))", "user": "5a653f80e4b0512ff01cd9b2"}, {"problem": 33, "code": "(fn f [xs x]\n   (mapcat #(repeat x %) xs))", "user": "5a8bc2a1e4b05369db4d24ef"}, {"problem": 33, "code": "#(->> %1\n      (map (apply juxt (repeat %2 identity)))\n      (reduce concat))", "user": "5a9181c5e4b002d099cae6f6"}, {"problem": 33, "code": "(fn myfn [v n] (mapcat #(repeat n %) v))", "user": "5a2cfa85e4b09cafd31c7f61"}, {"problem": 33, "code": "#(mapcat (fn [v] (repeat %2 v)) %1)", "user": "51421cd5e4b0b50abeb46b2c"}, {"problem": 33, "code": "(fn repl [s t]\n  (mapcat #(repeat t %) s)\n  )", "user": "5a8d55a8e4b05369db4d2514"}, {"problem": 33, "code": "(fn [xs n]\n  (reduce #(concat %1 (repeat n %2)) [] xs))", "user": "5a95c639e4b0d174b936c75e"}, {"problem": 33, "code": "(fn [col n]\n  (mapcat #(repeat n %) col))", "user": "5a912080e4b002d099cae6ea"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5a95e50be4b0d174b936c760"}, {"problem": 33, "code": "(fn [coll n] (apply concat (map #(repeat n %) coll)))", "user": "58c71509e4b021aa9917ed6e"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5a9545dbe4b0d174b936c74c"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5a97eaffe4b0d174b936c783"}, {"problem": 33, "code": "(fn [s n]\n  (loop[a s ans nil]\n    (if (empty? a)\n      (reverse ans)\n      (recur (rest a) (concat (repeat n (first a)) ans)))))", "user": "5a962c09e4b0d174b936c765"}, {"problem": 33, "code": "(fn [l n] (mapcat #(repeat n %) l))", "user": "5a5767f3e4b05d388ecb6c65"}, {"problem": 33, "code": "(fn [x n]\n  (loop [coll x new '()]\n    (if (empty? coll)\n      new\n      (recur (rest coll) (concat new (repeat n (first coll)))))))", "user": "5a9482b7e4b0d174b936c737"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5a9457a9e4b0d174b936c734"}, {"problem": 33, "code": "(fn [lst n]\n  (mapcat (fn [a] (repeat n a)) lst)\n)", "user": "5a984657e4b0d174b936c78a"}, {"problem": 33, "code": "(fn [lst n]\n  (mapcat #(repeat n %) lst))", "user": "5a99b688e4b0d174b936c7a6"}, {"problem": 33, "code": "(fn [col n] (mapcat (fn [item] (repeat n item) ) col))", "user": "5a99b83fe4b0d174b936c7aa"}, {"problem": 33, "code": "(fn [coll n] (->> coll\n                  (map #(repeat n %))\n                  (apply concat)))", "user": "5a7a09e6e4b03baeef9276ca"}, {"problem": 33, "code": "(fn [coll n]\n     (reduce (fn [c e]\n               (loop [tempc c n n]\n                 (if (<= n 0)\n                   tempc\n                   (recur (conj tempc e) (dec n))))) [] coll))", "user": "5971a017e4b01722bebd4c75"}, {"problem": 33, "code": "#(mapcat (fn [input](repeat %2 input)) %1)", "user": "5a99b844e4b0d174b936c7ab"}, {"problem": 33, "code": "(fn [xs n](mapcat #(repeat n %) xs))", "user": "5a8ebd9ae4b05369db4d252b"}, {"problem": 33, "code": "#(for [a %1 b (range %2)] a)", "user": "5a99b863e4b0d174b936c7ae"}, {"problem": 33, "code": "#(apply concat (reduce (fn [r x] (conj r (repeat %2 x))) [] %))", "user": "5a984616e4b0d174b936c789"}, {"problem": 33, "code": "(fn [coll n]\n  (if (= n 1) \n    coll\n    (apply interleave (repeat n coll))))", "user": "5a9ac061e4b0d174b936c7c1"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5a9dbffbe4b0d174b936c7f4"}, {"problem": 33, "code": "(fn [input times]\n   (apply concat (map #(take times (iterate identity %1)) input)))", "user": "5a94a38ce4b0d174b936c73e"}, {"problem": 33, "code": "#(apply concat (map (fn [input](repeat %2 input)) %1))", "user": "5a9f005be4b0d174b936c810"}, {"problem": 33, "code": "#(letfn [(rep [coll n]\n  (if (seq coll)\n    (concat (repeat n (first coll)) (rep (rest coll) n))))] (rep %1 %2))", "user": "5a9dbb32e4b0d174b936c7f3"}, {"problem": 33, "code": "(fn repl\n  ([li rep] (repl li rep rep (vector)))\n  ([li rep v ans]\n   (if (empty? li)\n     ans\n     (if (zero? v)\n       (repl (rest li) rep rep ans)\n       (repl li rep (dec v) (conj ans (first li)))\n       )\n     )\n   )\n  )", "user": "5a90395ce4b05369db4d254a"}, {"problem": 33, "code": "(fn [xs x] (reduce (fn [acc item] (concat acc (repeat x item))) [] xs))", "user": "5a8e9fb5e4b05369db4d2529"}, {"problem": 33, "code": "(fn [lst n]\n  (mapcat (partial repeat n) lst))", "user": "5a9cdec0e4b0d174b936c7e1"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5a9bfd57e4b0d174b936c7d0"}, {"problem": 33, "code": "(fn [origlist n] \n  (let [repitem (fn [item n] \n    (loop [outlist '() nn n]\n      (if (= 0 nn)\n        outlist\n        (recur (conj outlist item) (dec nn)))))]\n\n    (loop [inlist (seq origlist) outlist '()]\n      (if (empty? inlist)\n        outlist\n        (recur (rest inlist) (concat outlist (repitem (first inlist) n)))))))", "user": "56197b47e4b053970a773af8"}, {"problem": 33, "code": "(fn dup-seq [coll times]\n  (reduce concat (map #(take times (repeat %)) coll)))", "user": "5a9be505e4b0d174b936c7cf"}, {"problem": 33, "code": "(fn\n  [lst n]\n  (mapcat #(take n (repeat %)) lst))", "user": "5aa2f1dee4b0d174b936c865"}, {"problem": 33, "code": "(fn [seq n]\n  (mapcat \n   (fn [seq]\n     (repeat n seq)) seq))", "user": "5a593521e4b05d388ecb6c93"}, {"problem": 33, "code": "(fn [lst n] (mapcat #(repeat n %) lst))", "user": "5aa00b7fe4b0d174b936c825"}, {"problem": 33, "code": "(fn [ary n] (reduce #(concat %1 (take n (repeat %2))) [] ary))", "user": "5a9a12d6e4b0d174b936c7b7"}, {"problem": 33, "code": "(fn [coll n]\n  ( reduce (fn [x y]\n             (concat x (repeat n y))) '() coll))", "user": "5aa15ec0e4b0d174b936c848"}, {"problem": 33, "code": "(fn [x n] \n  (mapcat \n   #(repeat n %) x))", "user": "5aa4b961e4b0d174b936c888"}, {"problem": 33, "code": "(fn [vect n] (reduce (fn [a b] (concat a (reduce (fn [a1 b1] (conj a1 b)) '() (range 0 n)))) '() vect))", "user": "5a9e3698e4b0d174b936c7fc"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5892a5fde4b00487982d5228"}, {"problem": 33, "code": "(fn repli\n  [e n] \n  \n  (mapcat #(repeat n %) e))", "user": "5a99ae99e4b0d174b936c7a4"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5a99cab6e4b0d174b936c7b2"}, {"problem": 33, "code": "(fn [RepSec count]\n    (mapcat (fn [cont] (repeat count cont))\n            RepSec))", "user": "5a99b766e4b0d174b936c7a8"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5a99b848e4b0d174b936c7ac"}, {"problem": 33, "code": "(fn [x n] (mapcat #(repeat n %) x))", "user": "5aa6d44de4b0d174b936c8b2"}, {"problem": 33, "code": "(fn [a b]\n  (mapcat #(repeat b %) a))", "user": "5a99b87ee4b0d174b936c7af"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5aa5eebee4b0d174b936c8a1"}, {"problem": 33, "code": "(fn rep \n  ([x n] (rep x n n))\n  ([x r n]\n   (cond\n    (empty? x) '()\n    (<= r 0) (rep (rest x) n n)\n    :else (conj (rep x (- r 1) n) (first x)))))", "user": "5aa5951ae4b0d174b936c899"}, {"problem": 33, "code": "#(mapcat\n      (fn [x]\n        (loop [i %2\n               foo x\n               result []]\n          (if (= i 0)\n            result\n            (recur (dec i) x (conj result foo))\n            )))\n      %1)", "user": "5908882de4b047aa04b19979"}, {"problem": 33, "code": "(fn rep-n-times [coll n]\n  (apply concat (map #(repeat n %) coll)))", "user": "5aa4f7dae4b0d174b936c88c"}, {"problem": 33, "code": "(fn [n x] (mapcat \n           (fn [val] \n             (repeatedly x \n                         #(identity val))) n)\n  )", "user": "5a99b861e4b0d174b936c7ad"}, {"problem": 33, "code": "(fn [s n] (reduce concat (map #(take n (repeat %)) s)))", "user": "5a9db5c9e4b0d174b936c7f1"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5aa6bd56e4b0d174b936c8af"}, {"problem": 33, "code": "(fn duplicate-n-times [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5aa2b5dbe4b0d174b936c85b"}, {"problem": 33, "code": "#(reduce into [] (map (fn [x] (repeat %2 x)) %1))", "user": "5a99a540e4b0d174b936c7a3"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5aa9d445e4b0d174b936c8eb"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "57023e92e4b08d47c97781da"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat (fn [x] (repeat n x)) coll)\n  )", "user": "5aa998c6e4b0d174b936c8e5"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat (partial repeat n) coll))", "user": "50310713e4b05b7df5a0b84c"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "59769d75e4b01722bebd4cdd"}, {"problem": 33, "code": "(fn my-replicate [xs n]\n  (let [value (->>\n                (range n)\n                (map (fn [_] xs))\n                )]\n    (if (> n 1)\n      (apply interleave value)\n      (flatten value)\n      )\n    )\n  )\n; ugly, but just \"apply interleave\" errored online, and worked offline...", "user": "5aada061e4b073f17744257a"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5aabd34fe4b073f177442565"}, {"problem": 33, "code": "(fn [seq n]\n    (mapcat #(repeat n %) seq))", "user": "554e4d65e4b00713264bd993"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5aa8e841e4b0d174b936c8d5"}, {"problem": 33, "code": "(fn [coll cnt]\n  (->>\n   (map \n      (partial \n        (fn f [cnt item]\n          (when-not (zero? cnt)\n            (concat (list item) (f (dec cnt) item))  \n          )\n        )\n        cnt\n      )\n      coll\n     )\n    (reduce concat)\n  )\n)", "user": "5ab1665de4b073f1774425c0"}, {"problem": 33, "code": "(fn replicate-seq [coll n]\n(mapcat #(repeat n %) coll))", "user": "5aa97ee9e4b0d174b936c8e4"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat \n   #(repeat n %) \n   s))", "user": "5a99c5a9e4b0d174b936c7b1"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5ab23c99e4b073f1774425e2"}, {"problem": 33, "code": "(fn [seq-to-rep times]\n  (mapcat #(repeat times %) seq-to-rep))", "user": "5a9829e5e4b0d174b936c788"}, {"problem": 33, "code": "#(reverse (reduce (fn [a b] (into a (repeat %2 b))) () %1))", "user": "5ab23a78e4b073f1774425e1"}, {"problem": 33, "code": "(fn [l qtd] (mapcat #(repeat qtd %) l))", "user": "57047768e4b0b0fb43fd0664"}, {"problem": 33, "code": "(fn [s n] (mapcat #(take n (repeat %)) s))", "user": "5ab16992e4b073f1774425c4"}, {"problem": 33, "code": "(fn [s n] (if (= n 1) s (apply interleave (repeat n s))))", "user": "5ab564f8e4b073f177442639"}, {"problem": 33, "code": "(fn duplicate\n    [[element & rest :as sequence] repeat-number]\n    (if (empty? sequence)\n      ()\n      (lazy-cat (repeat repeat-number element) (duplicate rest repeat-number))))", "user": "55d354e0e4b0e31453f64a62"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "5a67cedbe4b0512ff01cd9ee"}, {"problem": 33, "code": "(fn dupseq\n  [coll n]\n  (loop\n   [input coll\n    result []]\n    (println input result)\n    (if (empty? input)\n      result\n      (recur (rest input) (loop [r result\n                                 cnt n]\n                            (println r cnt)\n                            (if (zero? cnt)\n                              r\n                              (recur (conj r (first input)) (dec cnt))))))))", "user": "5ab490f4e4b073f17744261d"}, {"problem": 33, "code": "#(reduce (fn [acc el] (concat acc (map (constantly el) (range %2)))) () %1)", "user": "5ab5f60be4b073f177442643"}, {"problem": 33, "code": "(fn [n m]\n  (mapcat #(repeat m %) n))", "user": "5a904de3e4b05369db4d254c"}, {"problem": 33, "code": "(fn [coll n]\n  (loop [agg coll k 1]\n    (if (= k n)\n      agg\n      (recur (interleave agg agg) (* 2 k) ))))", "user": "5ab276f2e4b073f1774425e6"}, {"problem": 33, "code": "#(mapcat (fn [input] (repeat %2 input)) %1)", "user": "5aa2dc5ae4b0d174b936c861"}, {"problem": 33, "code": "(fn [xs n] (apply concat (for [x xs] (repeat n x))))", "user": "5ab8037ae4b073f177442678"}, {"problem": 33, "code": "(fn [s n] (for [e s i (range n)] e))", "user": "583048d9e4b051871117c007"}, {"problem": 33, "code": "(fn [xs n]\n  (loop [as xs\n         r []]\n    (if (empty? as)\n      r\n      (recur (rest as) (apply conj r (repeat n (first as)))))))", "user": "5ab9fe71e4b073f17744269d"}, {"problem": 33, "code": "(fn [seq num]\n  (loop [s seq\n         n num\n         new-s []]\n    (if (empty? s)\n      new-s\n      (recur (rest s)\n             n\n             (concat new-s (repeat n (first s)))))\n    ))", "user": "59edc518e4b0966464fe6a08"}, {"problem": 33, "code": "#(mapcat (fn [input](repeat %2 input)) %1)", "user": "5abb02ade4b073f1774426bc"}, {"problem": 33, "code": "(fn dupe[coll c]\n  (loop [s coll\n         i c\n         res []]\n       (cond\n         (empty? s) res\n         (= i 0) (recur (rest s) c res)\n         :else (recur s (dec i) (conj res (first s))))))", "user": "542c56aae4b0dad94371f2a4"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5ab93449e4b073f177442692"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "5abc5a09e4b073f1774426e9"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5ab9eeade4b073f17744269b"}, {"problem": 33, "code": "#(reduce (fn [array ele]\n            (into array (replicate %2 ele))\n            ) [] %1)", "user": "5aa8863ce4b0d174b936c8d0"}, {"problem": 33, "code": "#(loop [in %1 out []]\n  (if (empty? in)\n    out\n    (recur (rest in) (concat out (take %2 (repeat (first in)))))))", "user": "5aa8f753e4b0d174b936c8d9"}, {"problem": 33, "code": "(fn my-replicate [alist n]\n  (reduce\n   concat\n   (map\n    (fn [elem]\n      (apply\n       vector\n       (map\n        (fn [x] elem)\n        (range 0 n))))\n    alist)))", "user": "5aaa2dc3e4b0d174b936c8f1"}, {"problem": 33, "code": "(fn [coll n]\n                  (if (> n 1) \n                    (->>\n                     (repeat n coll)\n                     (apply interleave)\n                     )\n                    coll))", "user": "5ab575f8e4b073f17744263d"}, {"problem": 33, "code": "(fn [list n]\n  (reduce (fn [acc el]\n            (concat acc (take n (repeat el)))\n         \n         ) [] list\n  ))", "user": "5a8fd113e4b05369db4d2542"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat (partial repeat n) coll))", "user": "5a47423be4b05d388ecb6b52"}, {"problem": 33, "code": ";me\n;(fn [xs x] (mapcat #(take x (repeat %)) xs))\n\n;me2\n;(fn [xs x] (mapcat #(repeat x %) xs))\n\n;silverio\n;#(for [x %1 y (range %2)] x)\n\n;dwelte\n#(mapcat (partial repeat %2) %)", "user": "5a544eeee4b05d388ecb6c24"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "5ac0dab7e4b073f177442746"}, {"problem": 33, "code": "#(mapcat (fn [e] (repeat %2 e)) %1)", "user": "5abe2fc2e4b073f17744271e"}, {"problem": 33, "code": "(fn [s c] (apply concat (for [e s] (repeat c e))))", "user": "5762bf13e4b0994c1922fbae"}, {"problem": 33, "code": "(fn\n  [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5ac35d00e4b0e27600da7712"}, {"problem": 33, "code": "(fn replicateS [s n] (mapcat #(repeat n %) s ))", "user": "5ac37d0fe4b0e27600da7718"}, {"problem": 33, "code": "(fn [x y] (mapcat #(take y (repeat %)) x))", "user": "59a8a4dce4b0bcf4e9a43af7"}, {"problem": 33, "code": "#(mapcat (fn [x]  (take %2 (repeat x)) ) %)", "user": "5ac0ba3ae4b073f177442745"}, {"problem": 33, "code": "#(reduce concat (map (partial repeat %2) %1))", "user": "5ac6ef9be4b0e27600da7779"}, {"problem": 33, "code": "(fn [s qty]\n  (reduce\n    (fn [s x]\n      (concat s (repeat qty x)))\n    '() s))", "user": "5ac91d90e4b0e27600da77bd"}, {"problem": 33, "code": "#(if (> %2 1)\n  (apply interleave (take %2 (repeat %1)))\n  %1)", "user": "5abbbd46e4b073f1774426db"}, {"problem": 33, "code": "(fn [col rep] (mapcat #(repeat rep %) col))", "user": "5ab170c2e4b073f1774425cb"}, {"problem": 33, "code": "#(apply mapcat list (repeat %2 %1))", "user": "5ac4d1f6e4b0e27600da7735"}, {"problem": 33, "code": "#( mapcat identity (reduce \n    (fn [fin num]\n        (conj fin (repeat %2 num))\n    ) [] %1\n))", "user": "5ac92dc3e4b0e27600da77bf"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(take n (repeat %)) xs))", "user": "531bf76fe4b08068f379ed96"}, {"problem": 33, "code": "(fn repl-seq\n  [x y]\n  (apply concat (map #(repeat y%) x))\n)", "user": "5ac74b34e4b0e27600da777f"}, {"problem": 33, "code": "(fn rep\n  [x y]\n  (mapcat #(repeat y %) x))", "user": "5ac741d6e4b0e27600da777d"}, {"problem": 33, "code": "(fn [coll n]\n\t(reduce (fn [acc x]\n        \t(into acc (take n (iterate identity x)))\n          )\n        []\n        coll\n            )\n)", "user": "57513f88e4b02ea114799283"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(concat (repeat n %)) coll))", "user": "5ad0c20be4b0ea6055cfab9c"}, {"problem": 33, "code": "#((fn [x n]\n                      (reduce (fn [acc x]  (concat acc (repeat n x)))\n                              []\n                              x))\n                    %1 %2)", "user": "5acc961ae4b0e27600da7810"}, {"problem": 33, "code": "(fn [col rep] (mapcat #(take rep (repeat %)) col))", "user": "5acd08eee4b0e27600da7822"}, {"problem": 33, "code": "(fn [s n] \n  (reduce \n   (fn [acc v]\n     (concat acc (repeat n v))\n   ) '() s))", "user": "5a78cd9ee4b013a48d399777"}, {"problem": 33, "code": "(fn [coll n] \n  (mapcat #(repeat n %) coll))", "user": "5ad63a34e4b0ea6055cfac01"}, {"problem": 33, "code": "(fn inter-n [s n]\n\n      (let [ans (loop [result '()\n                       times n]\n                      (if (<= times 0)\n                        result\n                        (recur (cons s result) (dec times))))]\n           (if (> n 1)\n             (apply interleave ans)\n             (apply identity ans))))", "user": "5acd1a43e4b0e27600da7823"}, {"problem": 33, "code": "(fn xrepeater [x y]\n  (mapcat #(repeat y %) x))", "user": "5ac383b8e4b0e27600da7719"}, {"problem": 33, "code": "(fn [s n]\n  (reduce concat (map #(take n (repeat %)) s)))", "user": "5ada1f12e4b0ea6055cfac43"}, {"problem": 33, "code": "(fn replicate-n [xs n]\n  (apply concat (reduce (fn [ys y] (conj ys (take n (iterate identity y))))\n          [] xs)))", "user": "5ad3d730e4b0ea6055cfabc8"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5ad37785e4b0ea6055cfabc5"}, {"problem": 33, "code": "(fn  [coll rep]\n(mapcat (fn [a] (repeat rep a)) coll))", "user": "599342efe4b0b211ea3aaab0"}, {"problem": 33, "code": "(fn [s t] (mapcat #(repeat t %) s))", "user": "5976da27e4b01722bebd4ce3"}, {"problem": 33, "code": "#(mapcat (fn [input] (repeat %2 input)) %1)", "user": "5ad36ae9e4b0ea6055cfabc3"}, {"problem": 33, "code": "(fn f [seq n]\n  (if (not (empty? seq))\n    (concat ((fn g [x n]\n              (if (> n 0)\n                (conj (g x (dec n)) x)\n                '())) (first seq) n)\n            (f (rest seq) n))))", "user": "589f37e0e4b02bd94d917e79"}, {"problem": 33, "code": "#(apply concat (for [ x %1 ] (repeat %2 x)))", "user": "5ac04101e4b073f177442737"}, {"problem": 33, "code": "(fn f [s n]\n  (let [f*\n        (fn [acc s*]\n          (concat acc (repeat n s*)))]\n(reduce f* [] s)))", "user": "5ae0976be4b0837691e92c43"}, {"problem": 33, "code": "(fn [x y]\n  (mapcat #(repeat y %) x))", "user": "5ac6f7f7e4b0e27600da777a"}, {"problem": 33, "code": "(fn [e n] (mapcat (partial repeat n) e))", "user": "5ade6bafe4b0837691e92c23"}, {"problem": 33, "code": "(fn [v n] (reduce #(apply conj %1 (repeat n %2)) [] v))", "user": "57086931e4b0b0fb43fd069e"}, {"problem": 33, "code": "(fn [x y]\n  (apply list (reduce (fn [a b] (apply conj a (take y (repeat b)))) [] x)))", "user": "5a9d64c8e4b0d174b936c7eb"}, {"problem": 33, "code": "(fn [seq n] (mapcat #(repeat n %) seq))", "user": "5acaa269e4b0e27600da77e6"}, {"problem": 33, "code": "(fn [in n]\n  (reduce\n   (fn [coll x]\n     (into coll (repeat n x)))\n   []\n   in)\n  )", "user": "5ae47c1de4b0837691e92c81"}, {"problem": 33, "code": "(fn [x, y] (apply concat (for [z x] (repeat y z))))", "user": "5ae246b1e4b0837691e92c5d"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "5a7e194de4b03baeef927706"}, {"problem": 33, "code": "(fn [col n] (if (> n 1) (apply interleave (repeat n col)) col))", "user": "59ef5280e4b0966464fe6a2b"}, {"problem": 33, "code": "(fn [coll cnt] (reduce #(into %1 (repeat cnt %2)) [] coll))", "user": "5649b1b0e4b0284900eef646"}, {"problem": 33, "code": "(fn [coll cnt]\n   (loop [result []  xs coll]\n     (if (empty? xs)\n        result\n        (let [x (first xs)]\n          (recur (concat result (repeat cnt x)) (rest xs))))))", "user": "5aa4a1ffe4b0d174b936c886"}, {"problem": 33, "code": "(fn [xs n] (reduce #(into %1 (repeat n %2)) [] xs))", "user": "5aeec90fe4b0cc2b61a3bc31"}, {"problem": 33, "code": "#(reduce \n  (fn [x y] (apply conj x (repeat %2 y))) [] %1)", "user": "5aed87a1e4b0cc2b61a3bc1a"}, {"problem": 33, "code": "(fn [xs i]\n  (reduce\n    #(concat %1 (repeat i %2))\n    []\n    xs))", "user": "5991eec7e4b0866487ed0d6e"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "user": "5aeca4c9e4b0cc2b61a3bc0a"}, {"problem": 33, "code": "(fn [s n]\n  (apply concat (map #(repeat n %) s)))", "user": "5a7ae674e4b03baeef9276d5"}, {"problem": 33, "code": "(fn [seq-list, times] (mapcat ( fn [x] (repeat times x)) seq-list))", "user": "5af19233e4b0cc2b61a3bc5f"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "user": "5a084a24e4b01bb0ae8afdf2"}, {"problem": 33, "code": "(fn f [s n]\n  (let [f*\n        (fn [acc s*]\n          (concat acc (repeat n s*)))]\n    (reduce f* [] s)))", "user": "5a7f247ee4b03baeef927711"}, {"problem": 33, "code": "(fn [mylist n] (apply concat (map #(take n (iterate identity %)) mylist)))", "user": "5aefdc8de4b0cc2b61a3bc40"}, {"problem": 33, "code": "(fn rep [coll n]\n  (loop [res [] c coll]\n    (if (= (first c) nil)\n      res\n      (recur (concat res (repeat n (first c))) (rest c))\n      )\n    )\n  )", "user": "5af39788e4b0cc2b61a3bc8a"}, {"problem": 33, "code": "(fn [s n]\n  (apply concat (map #(repeat n %) s)))", "user": "5aba04dce4b073f17744269e"}, {"problem": 33, "code": "#(apply concat (map (partial repeat %2) %1))", "user": "59e8b4ade4b0249b72820734"}, {"problem": 33, "code": "(fn my-replicate [seqi nbr]\n (reverse (reduce (fn[res x]\n            (loop [cpt 0 ,res res]\n              (if (< cpt nbr)\n                (do (println res)\n                (recur (inc cpt) (cons x res)))\n                res))) '() seqi)))", "user": "5a6cb2eae4b0512ff01cda57"}, {"problem": 33, "code": "(fn [xs n]\n  (mapcat (partial repeat n) xs))", "user": "5af8221ce4b0cc2b61a3bccd"}, {"problem": 33, "code": "#(mapcat (fn [s] (repeat %2 s)) %1)", "user": "59bcbfd0e4b0a024fb6ae419"}, {"problem": 33, "code": "(fn [l n] (mapcat #(repeat n %) l))", "user": "59eb69fbe4b0249b7282077e"}, {"problem": 33, "code": "(fn [s n]\n  (let [f (fn [r t n]\n            (loop [r r i n]\n              (if (= i 0)\n                r\n                (recur (conj r t) (dec i)))))]\n    (loop [r () s s]\n      (if (empty? s)\n        (reverse r)\n        (recur (f r (first s) n) (rest s))))))", "user": "5af907e6e4b0cc2b61a3bcda"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "532ae82be4b09d4e7a9b552b"}, {"problem": 33, "code": "#(reduce (fn [acc el] (concat acc (repeat %2 el))) [] %1)", "user": "585c450fe4b0f14aab7c8782"}, {"problem": 33, "code": "#(loop [a %1 c ()]\n\t(if (empty? a)\n\t\tc\n\t\t(recur (rest a) (concat c (repeat %2 (first a))))\n\t)\n)", "user": "5af9b2cee4b0cc2b61a3bce2"}, {"problem": 33, "code": "(fn [xs n]\n  (mapcat #(repeat n %) xs))", "user": "5adf5f9be4b0837691e92c33"}, {"problem": 33, "code": "(fn [arg_list arg]\n  (reduce (fn [arg1 arg2] (concat arg1 (take arg (repeat arg2)))) [] arg_list)\n  )", "user": "5ae71f14e4b0837691e92ca7"}, {"problem": 33, "code": "(fn [s n] (reduce #(apply conj % (take n (repeat %2))) [] s))", "user": "5af31955e4b0cc2b61a3bc7a"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(take n (repeat %)) coll))", "user": "5a91988ae4b002d099cae6f9"}, {"problem": 33, "code": "#(if (= 1 %2) %1 (apply interleave (repeat %2 %1)))", "user": "5afb4b15e4b0cc2b61a3bcf6"}, {"problem": 33, "code": "(fn [a n] (reduce concat (map (fn [x] (repeat n x)) a)))", "user": "5afa3590e4b0cc2b61a3bcea"}, {"problem": 33, "code": "#(if (< 1 %2) \n   (apply interleave (take %2 (repeat %1)))\n   %1)", "user": "5af1e1b1e4b0cc2b61a3bc67"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5af0ac17e4b0cc2b61a3bc55"}, {"problem": 33, "code": "(fn dupx [l n] (\n                reduce (fn [a b]  (concat a (repeat n b)) )  [] l\n                       ))", "user": "5afc115de4b0cc2b61a3bcff"}, {"problem": 33, "code": "(fn [arr n]\n  (reduce #(concat %1 (repeat n %2)) '() arr))", "user": "5adcc688e4b0837691e92c05"}, {"problem": 33, "code": "(fn [s, n]\n  (reduce (fn [acc item]\n            (loop [i n\n                   repeat []]\n              (if (<= i 0)\n                (concat acc repeat)\n                (recur (dec i) (conj repeat item)))))\n          [] s))", "user": "5afa9de0e4b0cc2b61a3bcf1"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5b008bcae4b0cc2b61a3bd3d"}, {"problem": 33, "code": "(fn [coll n]\n  (loop [result [] x coll]\n    (if (seq x)\n      (recur (concat result (repeat n (first x))) (next x)) result)))", "user": "5b0180cfe4b0cc2b61a3bd47"}, {"problem": 33, "code": "(fn dupseqx\n  [coll x]\n  (cond\n    (empty? coll) '()\n      :else (concat (repeat x (first coll)) (dupseqx (rest coll) x))))", "user": "5b02a170e4b0cc2b61a3bd52"}, {"problem": 33, "code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "user": "5b03063de4b0cc2b61a3bd5b"}, {"problem": 33, "code": "(fn [s n] (mapcat #(take n (repeat %)) s))", "user": "5922f8a9e4b026ae3852128f"}, {"problem": 33, "code": "(fn dup-seq [lat n]\n  (mapcat #(take n (repeat %)) lat))", "user": "5845c8f6e4b089d5ab817e77"}, {"problem": 33, "code": "(fn [xs n]\n  (mapcat #(take n (repeat %)) xs))", "user": "5afcd6d1e4b0cc2b61a3bd17"}, {"problem": 33, "code": "(fn [coll n]\n  (loop [f coll\n         s n\n         r []]\n    (if (empty? f)\n      r\n      (recur (rest f) s (concat r (replicate s (first f)))))))", "user": "5af74644e4b0cc2b61a3bcc2"}, {"problem": 33, "code": "#(for [i %1 _ (range %2)] i)", "user": "5b067ae1e4b0cc2b61a3bd97"}, {"problem": 33, "code": "#(into [] (mapcat (partial repeat %2) %1))", "user": "59d9dcfbe4b0ef0a1e9b5c5d"}, {"problem": 33, "code": "(fn [x y] (reduce concat (map #(repeat y %) x)))", "user": "5b0546eae4b0cc2b61a3bd7e"}, {"problem": 33, "code": "#(loop [o '() t %2]\n        (if (> t 0)\n            (recur\n                (if\n                    (and\n                        (integer? (first %1))\n                        (> (first %1) (first (rest %1))))\n                    (sort > (into o %1))\n                    (sort (into o %1)))\n                (dec t))\n            o))", "user": "5b083513e4b0cc2b61a3bdb4"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5b0e6795e4b0cc2b61a3be03"}, {"problem": 33, "code": "(fn multipack [sequ n]\n  (loop [[x & y] sequ out '()]\n    (if (nil? x) \n      (reverse out)\n      (recur \n        y\n        (concat \n          (loop [m n outt '()]\n            (if (= 0 m )\n              outt\n              (recur (- m 1) (cons x outt))))\n          out\n        )\n      )\n    )\n  )\n)", "user": "5b02ab12e4b0cc2b61a3bd53"}, {"problem": 33, "code": "(fn rep [s n]\n  (reduce \n  \t(fn [acc v] (concat acc (repeat n v))) \n   \t[] \n   \ts))", "user": "5b0bea6de4b0cc2b61a3bdda"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5b0fe3f4e4b0cc2b61a3be14"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5b0d72e5e4b0cc2b61a3bdf8"}, {"problem": 33, "code": "(fn [s n] (mapcat (fn [x] (replicate n x)) s))", "user": "5addadfce4b0837691e92c13"}, {"problem": 33, "code": "(fn f [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5777c3d6e4b0979f8965164f"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5b14ea95e4b0cc2b61a3be62"}, {"problem": 33, "code": "(fn [arr n] (mapcat #(repeat n %) arr))", "user": "5a66fddee4b0512ff01cd9d7"}, {"problem": 33, "code": "(fn [coll, n]\n  (mapcat #(repeat n %) coll))", "user": "5b13f482e4b0cc2b61a3be58"}, {"problem": 33, "code": "(fn replicate-sequence [s n]\n  (->> (map (fn [i] (for [x (range n)] (nth s i))) (range (count s)))\n       (reduce concat)))", "user": "5b15811ee4b0cc2b61a3be6f"}, {"problem": 33, "code": "(fn [x y] (loop [c 0 sequence []]\n                 (if(< c (count x))\n                       (recur (inc c)(concat sequence (repeat y (nth x c))))\n                       sequence))\n)", "user": "5b1619e4e4b0cc2b61a3be77"}, {"problem": 33, "code": "(fn repic [in val]\n  (mapcat (partial repeat val) in))", "user": "5b107263e4b0cc2b61a3be22"}, {"problem": 33, "code": "(fn [x y]\n  (apply concat (map #(repeat y %) x)))", "user": "5b15e881e4b0cc2b61a3be75"}, {"problem": 33, "code": "#(->> \n   %1 \n   (map (fn [x] (repeat %2 x))) \n   (apply concat)\n   )", "user": "5b118b7be4b0cc2b61a3be34"}, {"problem": 33, "code": "(fn [s n]\n  (loop [x s\n         r n\n         acc []]\n    (if-not (empty? x)\n            (if-not (<= r 0)\n                    (recur x (dec r) (conj acc (first x)))\n                    (recur (rest x) n acc))\n            acc)))", "user": "51316a63e4b0431ba07e7feb"}, {"problem": 33, "code": "(fn [x y]\n  (mapcat #(repeat y %1) x))", "user": "56b619e7e4b0982f16b37e39"}, {"problem": 33, "code": "(fn x [y z] (let [a (fn [acc b] (concat acc (repeat z b)))](reduce a [] y)))", "user": "5b0f2862e4b0cc2b61a3be0f"}, {"problem": 33, "code": "(fn [coll n]\n  (reverse (reduce (fn [acc item]\n                              (into acc (repeat n item)))\n                            '()\n                            coll)))", "user": "5adbbf89e4b0837691e92bf4"}, {"problem": 33, "code": "#(mapcat (fn [item]\n           (take %2 (repeat item))\n          )\n         %1)", "user": "5b0b8d29e4b0cc2b61a3bdd7"}, {"problem": 33, "code": "(fn [v n]\n   (mapcat #(take n (repeat %)) v))", "user": "5b198eace4b03cfeda66ecbb"}, {"problem": 33, "code": "(fn [values times] (mapcat (fn [v] (repeat times v)) values))", "user": "5b1a902ee4b03cfeda66ecd1"}, {"problem": 33, "code": "(fn [li n] (mapcat (fn [a] (replicate n a)) li))", "user": "5b20134de4b03cfeda66ed2d"}, {"problem": 33, "code": "(fn [xs n] \n  (reduce (fn [acc v]\n            (apply conj acc (repeat n v)))\n          '()\n          (rseq xs)))", "user": "5b1c16e1e4b03cfeda66ecf2"}, {"problem": 33, "code": "#(apply concat (for [x %1] (repeat %2 x)))", "user": "57d418b4e4b0bd073c20239a"}, {"problem": 33, "code": "(fn [coll x] \n  (mapcat \n   #(repeat x %) \n   coll)\n)", "user": "59c243bae4b0a024fb6ae4aa"}, {"problem": 33, "code": "(fn [arr num] \n  (reduce \n   (fn [res item] \n     (loop [i 0 res-arr res] \n       (if(>= i num) \n         res-arr \n         (recur (inc i) (conj res-arr item))))) \n   [] \n   arr))", "user": "5b19cdf2e4b03cfeda66ecbf"}, {"problem": 33, "code": "(fn dupes [coll n] \n  (mapcat #(repeat n %) coll))", "user": "5b1d61b3e4b03cfeda66ecfe"}, {"problem": 33, "code": "#(apply mapcat list (repeat %2 %))", "user": "5b22328ee4b03cfeda66ed5d"}, {"problem": 33, "code": "(fn [s mult]\n  (mapcat\n  #(repeat mult %)\n   s)\n  )", "user": "5b250773e4b063e2438bcc21"}, {"problem": 33, "code": "(fn [vals n]\n  (reduce (fn [carry item]\n            (concat carry (repeat n item))) '() vals))", "user": "54dfbacae4b024c67c0cf7b1"}, {"problem": 33, "code": "#(mapcat (fn[x] (repeat %2 x)) %1)", "user": "5b210749e4b03cfeda66ed48"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "5b236e55e4b08b1df1c36759"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5b2238d1e4b03cfeda66ed5e"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5af9d09ae4b0cc2b61a3bce6"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "5b22d30ee4b08b1df1c36750"}, {"problem": 33, "code": "(fn\n  [li times] \n  (mapcat #(repeat times %) li))", "user": "5b03227be4b0cc2b61a3bd5d"}, {"problem": 33, "code": "(fn [l n]\n   (reduce (fn [m x] (apply conj m (repeat n x))) [] l)\n)", "user": "5b274fd1e4b063e2438bcc3b"}, {"problem": 33, "code": "(fn [in n]\n  (reduce concat (map #(repeat n %) in)))", "user": "5b2a559be4b063e2438bcc74"}, {"problem": 33, "code": "(fn [a b]\n  (mapcat #(repeat b %) a))", "user": "586a906ae4b0f14aab7c88c3"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce #(concat %1 %2) [] (map #(into [] (for [i (range n)] %)) coll)))", "user": "5b2e6b02e4b025bcb146f2d3"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5b284375e4b063e2438bcc53"}, {"problem": 33, "code": "(fn [sqnce nb] (mapcat #(repeat nb %) sqnce))", "user": "5a798ac5e4b03baeef9276c0"}, {"problem": 33, "code": "(fn [lst rp]\n  (mapcat #(repeat rp %) lst))", "user": "5b2c79c6e4b025bcb146f2b7"}, {"problem": 33, "code": "(fn [seq-var n] (\n                 \n  apply concat (map #(repeat n %) seq-var)\n                 \n))", "user": "5b3189e5e4b025bcb146f308"}, {"problem": 33, "code": "(fn foo [ls n]\n  (apply concat (map #(take n (repeat %)) ls)))", "user": "5b2eaf1be4b025bcb146f2db"}, {"problem": 33, "code": "#(if (> %2 1) (apply interleave (repeat %2 %1)) %1)", "user": "5b073c34e4b0cc2b61a3bda4"}, {"problem": 33, "code": "(fn [x y]\n  (if (= y 1)\n    x\n    (apply interleave\n           (take y\n                 (iterate (fn [_] x) x))))\n  )", "user": "5b3251c1e4b025bcb146f317"}, {"problem": 33, "code": "(fn [coll times]\n  (loop [[number & remaining] coll newList '()]\n    (if (nil? number)\n      newList\n      (recur\n       remaining (concat newList (repeat times number))))))", "user": "5a929426e4b002d099cae70d"}, {"problem": 33, "code": "(fn [coll n]\n   (mapcat #(repeat n %) coll))", "user": "5b34aba7e4b025bcb146f352"}, {"problem": 33, "code": "(fn [x t]\n  (reduce (fn [acc d]\n    (loop [r acc i 0]\n      (if (= i t)\n        r\n        (recur (conj r d) (inc i))))) [] x))", "user": "5b38d771e4b02d533a91bbb0"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "5b37a3b4e4b02d533a91bba9"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5b23f306e4b08b1df1c36769"}, {"problem": 33, "code": "#(apply concat (map (fn [input](repeat %2 input)) %1))", "user": "5b227f5ae4b03cfeda66ed63"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "59e8a952e4b0249b72820733"}, {"problem": 33, "code": "(fn abc [x y] (reduce concat (map #(repeat y %) x)))", "user": "5b3ca9c9e4b02d533a91bbe3"}, {"problem": 33, "code": "(let [listn (fn listn ([el k] (listn el k '())) ([el k l] (if (= k 0) (reverse l) (listn el (- k 1) (conj l el)))))] (fn [l k] (mapcat #(listn % k) l)))", "user": "5b3f2ba9e4b02d533a91bc09"}, {"problem": 33, "code": "#( loop [ a %1 n %2 c [] i 1 ] \n   ( if ( empty? a)\n     c \n     (  if (= i n)\n        ( recur ( rest a) n (conj c (first a) ) 1 )\n        ( recur a n (conj c (first a)) (inc i))\n     )\n    )\n   )", "user": "5b3aa98be4b02d533a91bbca"}, {"problem": 33, "code": "(fn f [vec n] (for [x vec, i (range n)] x))", "user": "4e1e89a2535d04ed9115e809"}, {"problem": 33, "code": "(fn [original-list n]\n  (loop [remaining original-list output [] i n]\n  (println remaining output i)\n  (if (empty? remaining)\n    output\n    (if (= i 0)\n      (recur (rest remaining) output n)\n      (recur remaining (conj output (first remaining)) (dec i)))))\n)", "user": "5b3de9a7e4b02d533a91bbf4"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5b333626e4b025bcb146f32f"}, {"problem": 33, "code": "(fn [a b] (apply concat (map #(repeat b %) a)))", "user": "5b0948f3e4b0cc2b61a3bdbb"}, {"problem": 33, "code": "(fn [s n]\n  (if (> n 1)\n    (apply interleave (repeat n s))\n    s))", "user": "5b47874be4b02d533a91bc70"}, {"problem": 33, "code": "(let\n  [dup (fn dup [x n] (if (= n 0) [] (conj (dup x (dec n)) x)))]\n  (fn [coll n] (apply concat (map #(dup % n) coll))))", "user": "5b465b8be4b02d533a91bc65"}, {"problem": 33, "code": "(fn [x y]\n  (mapcat #(repeat y %) x)\n)", "user": "5b47a4f7e4b02d533a91bc73"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5b2c1f60e4b025bcb146f2b1"}, {"problem": 33, "code": "(fn rep [[fi & re] n]\n  (if (empty? re)\n    (repeat n fi)\n    (concat\n     (repeat n fi)\n     (rep re n))))", "user": "57fd085ce4b0d3187e9009a9"}, {"problem": 33, "code": "(fn [coll n] (reduce (fn [accum e](into accum e)) [] (map (fn [x] (repeat n x)) coll)))", "user": "5b445421e4b02d533a91bc40"}, {"problem": 33, "code": "( fn [x n] (mapcat #(repeat n %) x) )", "user": "5b4dde95e4b02d533a91bcbe"}, {"problem": 33, "code": "(fn[x y](mapcat identity(for[z x](repeat y z))))", "user": "5826a843e4b051871117befd"}, {"problem": 33, "code": "(fn my-func [coll n] (apply concat (map (fn [x] (repeat n x)) coll)))", "user": "5b421edce4b02d533a91bc2c"}, {"problem": 33, "code": "(fn [a b] (mapcat (partial repeat b) a))", "user": "5b4a0ce3e4b02d533a91bc92"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "5b51b9f8e4b02d533a91bcfe"}, {"problem": 33, "code": "(fn [s n]\n  (apply concat (map #(repeat n %)\n                s))\n  )", "user": "5b4b4052e4b02d533a91bc9a"}, {"problem": 33, "code": "(fn [s n]\n  (reduce (fn [acc e] (loop [a acc k n] (if(= k 0) a (recur (conj a e) (- k 1))))) [] s)\n)", "user": "5b4ff637e4b02d533a91bce0"}, {"problem": 33, "code": "(fn [x n]\n (for [a x b (range n)] a)\n)", "user": "5b3e35bde4b02d533a91bbfa"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5b4dfd5de4b02d533a91bcc3"}, {"problem": 33, "code": "(fn [sq n]\n    (for [e sq i (range n)] e))", "user": "57aa053fe4b0b8559636fc61"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5b337ff4e4b025bcb146f339"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "5b552117e4b02d533a91bd2c"}, {"problem": 33, "code": "#(mapcat (fn [a] (repeat %2 a)) %1)", "user": "59ed823ee4b0249b728207a1"}, {"problem": 33, "code": "(fn [coll number-of-time]\n  (reduce concat (map #(take number-of-time (repeat %)) coll)))", "user": "5b55b15ae4b02d533a91bd35"}, {"problem": 33, "code": "#(reduce concat (map (fn [x] (repeat %2 x)) %1))", "user": "5aeb0b44e4b0cc2b61a3bbee"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5b57505ce4b02d533a91bd55"}, {"problem": 33, "code": "(fn duplicate [s n] (reduce (fn [vals v] (into vals (repeat n v))) [] s))", "user": "5b58b271e4b02d533a91bd6e"}, {"problem": 33, "code": "(fn [xs n] (mapcat (fn [x] (repeat n x)) xs))", "user": "5b59fe53e4b02d533a91bd87"}, {"problem": 33, "code": "#(apply concat (map (fn [input] (repeat %2 input)) %1))", "user": "5b5955cce4b02d533a91bd79"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce (fn [accum x]\n            (concat accum (take n (repeat x))))\n          []\n          coll))", "user": "5b5d255de4b0c6492753e6c8"}, {"problem": 33, "code": "(fn [s n]\n   (mapcat (fn [x]\n             (repeat n x))\n        s))", "user": "558843dae4b059ccff29b1f3"}, {"problem": 33, "code": "(fn replicate-a-seq [x n]\n  (reduce\n    concat\n    (map \n      (fn construct-seq [ele]\n        (loop [idx 0\n               res '()]\n          (if (= idx n)\n            res\n            (recur (+ idx 1)\n                   (conj res ele)))))\n      x)))", "user": "5b596d0ce4b02d533a91bd7a"}, {"problem": 33, "code": "(fn dups [seq n]\n  (loop [s seq\n         acc []]\n    (if (empty? s)\n      acc\n      (recur (rest s)\n             (loop [num n\n                    one acc]\n               (if (= num 0)\n                 one\n                 (recur (dec num)\n                        (conj one (first s)))))))))", "user": "5b59c2bde4b02d533a91bd80"}, {"problem": 33, "code": "#(reduce (fn [acc curr] (concat acc (repeat %2 curr))) '() %1)", "user": "5b2be9b1e4b025bcb146f2b0"}, {"problem": 33, "code": "(fn [arr count]\n\t(loop [a arr ret []]\n\t\t(if (empty? a)\n\t\t\tret\n\t\t(recur (rest a)\n\t\t\t(concat ret (repeat count (first a)))))))", "user": "58d9772de4b0a4d5acaab63c"}, {"problem": 33, "code": "(fn [xs r]\n  (reduce\n   (fn [coll x]\n     (apply conj coll (repeat r x)))\n     []\n     xs))", "user": "5b500215e4b02d533a91bce2"}, {"problem": 33, "code": "(fn [coll n] (reduce (fn [r x] (concat r (repeat n x))) [] coll))", "user": "5b59c513e4b02d533a91bd81"}, {"problem": 33, "code": "#(reduce concat (map (fn exp [x] (take %2 (repeat x))) %1))", "user": "5600bed5e4b04bb52996e170"}, {"problem": 33, "code": "(fn [coll n]\n  (if (= 1 n)\n    coll\n\t(apply interleave (repeat n coll))))", "user": "5b62ff3ce4b0c6492753e72a"}, {"problem": 33, "code": "(fn [coll n] (letfn [(rep-el [reps el] (if (> reps 0) (conj (rep-el (dec reps) el) el) '()))] (mapcat identity (map (partial rep-el n) coll))))", "user": "5b62764ae4b0c6492753e725"}, {"problem": 33, "code": "(fn [c n] (reduce (fn [s x] (into s (repeat n x))) [] c))", "user": "5b5e7953e4b0c6492753e6d9"}, {"problem": 33, "code": "(fn  [d s i]\n  (if (= s nil)\n    d\n    (recur (apply conj d (repeat i (first s)) ) (next s) i)\n  )\n) []", "user": "5b5b0bb9e4b0c6492753e6a5"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %)", "user": "5b61aa6ae4b0c6492753e712"}, {"problem": 33, "code": "(fn [lst n]\n  (reduce\n   concat\n   (map\n    #(repeat n %)\n    lst\n    )\n   )\n  )", "user": "5b5e5019e4b0c6492753e6d3"}, {"problem": 33, "code": "(fn [l n] (apply concat (map #(repeat n %) l)))", "user": "56e2ca59e4b03a7c14b85a38"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "5b552e2ee4b02d533a91bd2e"}, {"problem": 33, "code": "(fn repetitions\n  [coll repeats]\n    (apply concat \n      (map (partial repeat repeats) coll)))", "user": "5a3c06fce4b001c08efc0cdd"}, {"problem": 33, "code": "#(mapcat (fn [a] (repeat %2 a)) %1)", "user": "5b59d176e4b02d533a91bd86"}, {"problem": 33, "code": "(fn func\n  [l p]\n  (apply concat (map #(map (constantly %) (range 0 p)) l)))", "user": "5b679bf9e4b0c6492753e769"}, {"problem": 33, "code": "(fn [lst n]\n  (loop [nlst [] xs lst]\n    (if (empty? xs)\n      nlst\n      (recur (concat nlst (repeat n (first xs))) (rest xs)))))", "user": "5b58d012e4b02d533a91bd71"}, {"problem": 33, "code": "#(if(= %2 1)\n   %1\n   (apply interleave (repeat %2 %1)))", "user": "5b6473eee4b0c6492753e73f"}, {"problem": 33, "code": "(fn [coll n]\n\t(seq (reduce #(apply conj % (repeat n %2)) [] coll))\n)", "user": "5b43cbb0e4b02d533a91bc3a"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "5b632851e4b0c6492753e72d"}, {"problem": 33, "code": "(fn [s x]\n  (reduce #(concat  %1 (repeat x %2)) [] s))", "user": "5b2689e3e4b063e2438bcc33"}, {"problem": 33, "code": "(fn [s n] (apply concat (apply concat (map #(repeat n %) (partition-by identity s)))))", "user": "5b611666e4b0c6492753e70d"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5b6e1649e4b0c6492753e7ce"}, {"problem": 33, "code": "(fn [list times] (apply concat (map (fn [x] (repeat times x)) list)))", "user": "5b67f0fbe4b0c6492753e76d"}, {"problem": 33, "code": "(fn [kv mv]\n  (mapcat #(repeat mv %) kv))", "user": "5b7292b3e4b047b03b2036a4"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "5b66faa7e4b0c6492753e75a"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "59b294f8e4b0e1f4e384c8fb"}, {"problem": 33, "code": "(fn [seq n]\n  (mapcat #(repeat n %) seq))", "user": "5b772ad7e4b047b03b2036e8"}, {"problem": 33, "code": "(fn [lst repetitions] (reduce #(into %1 (take repetitions (repeat %2))) [] lst))", "user": "5b513bd4e4b02d533a91bcf2"}, {"problem": 33, "code": "(fn f\n \t([lst n output]\n \t (if (empty? lst)\n \t\toutput\n \t\t(f (rest lst) n (concat output (repeat n (first lst))))))\n \t([lst n]\n \t(f lst n '())))", "user": "5b73e500e4b047b03b2036ba"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5244cf39e4b0d8acf9ed6ac5"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5b64370ae4b0c6492753e73c"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5b788fc4e4b047b03b2036fc"}, {"problem": 33, "code": "(fn [s n] (if(= n 1) s\n            (apply interleave (#(repeat n %) s))))", "user": "5b79cbdce4b047b03b20370a"}, {"problem": 33, "code": "(fn RepiteN [y z] (reduce into[] (apply map vector (take z ((fn rep [x] (lazy-seq (cons x (rep x)))) y))) ))", "user": "5b69baf9e4b0c6492753e78f"}, {"problem": 33, "code": "(fn [x z] (mapcat #(repeat z %) x))", "user": "5b754f8ee4b047b03b2036c9"}, {"problem": 33, "code": "#(apply mapcat vector (repeat %2 %1))", "user": "5b4c2212e4b02d533a91bca6"}, {"problem": 33, "code": "(fn [s n] (reduce (fn [res el]\n                    (apply conj res (repeat n el)))\n                  [] s))", "user": "5b7ec039e4b047b03b20375d"}, {"problem": 33, "code": "(fn [coll n] (apply concat (map #(repeat n %) coll)))", "user": "5b6ba7d7e4b0c6492753e7ad"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5b7d1dc1e4b047b03b20373f"}, {"problem": 33, "code": "(fn \n  [coll n] \n  (if (> n 1)\n    (apply interleave (repeat n coll))\n    coll))", "user": "5b82eec6e4b047b03b2037a4"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "5b774e66e4b047b03b2036ec"}, {"problem": 33, "code": "#(if (> %2 1) (apply interleave (take %2 (iterate identity %1))) %1)", "user": "5b7bc82ce4b047b03b203726"}, {"problem": 33, "code": "(fn [decol n] (mapcat #(repeat n %) decol))", "user": "5b7ed20fe4b047b03b203760"}, {"problem": 33, "code": "(fn [coll n]\n  (apply concat (map #(repeat n %) coll)))", "user": "56e9db9be4b04a395b9a03ff"}, {"problem": 33, "code": "(fn [c r]\n (reduce\n  (fn [a c]\n   (loop [a a i 0]\n    (if (= i r)\n      a\n      (recur \n       (concat a (list c)) \n       (+ 1 i)))))\n  (empty c)\n  c))", "user": "5b885821e4b047b03b20380b"}, {"problem": 33, "code": "(fn [coll n] (mapcat identity (map #(repeat n %) coll)))", "user": "5b857411e4b047b03b2037ce"}, {"problem": 33, "code": "(fn f [[x & p] n] \n  (if x \n    (concat (repeat n x) (f p n)) \n    []))", "user": "5a085dfde4b01bb0ae8afdf4"}, {"problem": 33, "code": "(fn rep\n  ([sq am]\n   (rep sq am []))\n  ([sq num res]\n   (loop [lsq sq lnum num lres res]\n     (if (empty? lsq)\n       lres\n       (let [reps (take lnum (cycle (conj [] (first lsq))))]\n         (recur (rest lsq) lnum (concat lres reps)))))))", "user": "5b11449ce4b0cc2b61a3be2d"}, {"problem": 33, "code": "(fn [sq rep] (reduce #(into %1 (take rep (repeat %2))) [] sq))", "user": "5b7ef8e6e4b047b03b203765"}, {"problem": 33, "code": "(fn [list n] (mapcat #(repeat n %) list))", "user": "5b6f72ede4b0c6492753e7dc"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5b8f0861e4b0c0b3ffbd49f4"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat (partial repeat n) coll))", "user": "5b88f0c0e4b047b03b203816"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "user": "578dc040e4b0ebec4cfb756d"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %)", "user": "5b77d3c8e4b047b03b2036f1"}, {"problem": 33, "code": "(fn\n  [s n]\n  (mapcat #(take n (cycle (vector %))) s))", "user": "59b93cd7e4b0a024fb6ae3c7"}, {"problem": 33, "code": "(fn rep-values\n   [args numb]\n   (loop [lst args\n          ret nil]\n     (if-not (empty? lst)\n       (recur (rest lst)\n              (concat ret \n                      (repeat numb (first lst))))\n        ret)))", "user": "5b86462de4b047b03b2037df"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5b6962c1e4b0c6492753e787"}, {"problem": 33, "code": "(fn replicate-elements [seq n]\n  (let [f (fn [acc curr]\n            (concat acc (repeat n curr)))]\n    (reduce f '() seq)))", "user": "58ac01f7e4b0005cfeb1a73b"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "5b924123e4b0c0b3ffbd4a34"}, {"problem": 33, "code": "(fn repli [x n] (apply concat (map #(repeat n %) x)))", "user": "5b9263ece4b0c0b3ffbd4a37"}, {"problem": 33, "code": "#(->> %1\n      (reduce (fn [agg e] (apply conj agg (repeat %2 e))) [])\n      seq)", "user": "5b9357b7e4b0c0b3ffbd4a46"}, {"problem": 33, "code": "(fn [ x n] (mapcat #(repeat n %) x))", "user": "57c647bbe4b05aa3c4741cf3"}, {"problem": 33, "code": "(fn [input_seq times]\n    (reduce #(concat %1 (repeat times %2)) [] input_seq))", "user": "592ac17ae4b072a2710fcf26"}, {"problem": 33, "code": "(fn duplicate [x n]\n  (mapcat #(repeat n %1) x)\n  )", "user": "5b92f178e4b0c0b3ffbd4a41"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "5b80a5cfe4b047b03b20377f"}, {"problem": 33, "code": "(fn[a b]\n  (apply concat (map #(repeat  b %) a)))", "user": "5b97c521e4b0c0b3ffbd4a9a"}, {"problem": 33, "code": "(fn [l c] (mapcat #(repeat c %) l))", "user": "5b919d9de4b0c0b3ffbd4a24"}, {"problem": 33, "code": "(fn [xs n]\n   (->> xs (map #(repeat n %)) (reduce into) reverse))", "user": "5b96800ae4b0c0b3ffbd4a7b"}, {"problem": 33, "code": "(fn replicate-sequence [coleccion numero-repeticiones]\n  (reduce (fn [x y] (concat x (repeat numero-repeticiones y))) '()  coleccion))", "user": "599f7a7ee4b0871e7608b81e"}, {"problem": 33, "code": "(fn [seq rep]\n   (mapcat #(repeat rep %) seq))", "user": "5b999af8e4b0c0b3ffbd4ad3"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5b985fe5e4b0c0b3ffbd4ab1"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "5af3a4d0e4b0cc2b61a3bc8b"}, {"problem": 33, "code": "(fn [xs r]\n  (reduce (fn [acc x] (concat acc (repeat r x))) [] xs))", "user": "5b9db58be4b0c0b3ffbd4b41"}, {"problem": 33, "code": "(fn dup\n  ([xs n] (dup xs n '()))\n  ([xs n acc]\n    (if (empty? xs)\n      acc\n      (recur (rest xs) n (concat acc (replicate n (first xs))))))\n)", "user": "5b9da7fbe4b0c0b3ffbd4b3f"}, {"problem": 33, "code": "#(mapcat identity  (for [x %1] (repeat %2 x)))", "user": "5b819312e4b047b03b20378d"}, {"problem": 33, "code": "(fn [col n] (mapcat #(repeat n %) col))", "user": "5b855800e4b047b03b2037cd"}, {"problem": 33, "code": "(fn [col n]\n  (mapcat #(take n (repeat %)) col))", "user": "5a059b33e4b01bb0ae8afdb5"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5b562842e4b02d533a91bd3f"}, {"problem": 33, "code": "(fn [coll n] (apply concat (map #(repeat n %) coll)))", "user": "5b8aa478e4b0c0b3ffbd49b2"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5b9acb23e4b0c0b3ffbd4aef"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "5b99a0a3e4b0c0b3ffbd4ad7"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5b81139fe4b047b03b203782"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "57a5da5ee4b0a966079561fe"}, {"problem": 33, "code": "(fn [coll, n] (mapcat #(repeat n %) coll))", "user": "5b265183e4b063e2438bcc31"}, {"problem": 33, "code": "(fn [xs n]\n  (mapcat #(repeat n %) xs))", "user": "570d0548e4b0b0fb43fd06d2"}, {"problem": 33, "code": "(fn\n  [coll n]\n  (reduce\n   (fn\n     [new-coll elem]\n     (concat new-coll (repeat n elem)))\n   []\n   coll))", "user": "5af3aa42e4b0cc2b61a3bc8c"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5ba5802de4b0a20761a233fd"}, {"problem": 33, "code": "(fn duplicateX [x n] (mapcat identity (map #(repeat n %) x)))", "user": "5b9d3913e4b0c0b3ffbd4b37"}, {"problem": 33, "code": "(fn interleave-n [s n]\n  (mapcat #(repeat n %) s))", "user": "5b602a66e4b0c6492753e6fc"}, {"problem": 33, "code": "(fn [s n]\n  (if (= n 1)\n    s\n    (->> s\n       (repeat n)\n       (apply interleave))))", "user": "5bab5440e4b0a20761a23475"}, {"problem": 33, "code": "(fn rep\n  [s n]\n  (reduce\n   (fn [acc e]\n     (concat acc (repeat n e)))\n   []\n   s))", "user": "5bab49bbe4b0a20761a23474"}, {"problem": 33, "code": "(fn [col n] (mapcat (partial repeat n) col))", "user": "5ba947bfe4b0a20761a23440"}, {"problem": 33, "code": "(fn foo \n  [coll times]\n  (mapcat #(repeat times %) coll))", "user": "5a932f63e4b0d174b936c71b"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5bafd5c8e4b0a20761a234dd"}, {"problem": 33, "code": "#(mapcat (fn [input] (repeat %2 input)) %1)", "user": "5b98f7f3e4b0c0b3ffbd4ac2"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5b77248ae4b047b03b2036e7"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %)", "user": "5bb23cf1e4b0a20761a2350a"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5b759ca8e4b047b03b2036d0"}, {"problem": 33, "code": "(fn\n          [coll n]\n          (reduce\n            concat\n            (map\n              #(repeat n %)\n              coll)))", "user": "5a291617e4b07f18be40aa76"}, {"problem": 33, "code": "(fn [col n]\n  (reduce #(concat %1 (repeat n %2)) [] col))", "user": "5b9c4a7be4b0c0b3ffbd4b16"}, {"problem": 33, "code": "#(apply mapcat list (repeat %2 %1))", "user": "5951190be4b066ee0a44aea4"}, {"problem": 33, "code": "(fn [l n] (apply concat (map #(apply concat (repeat n %)) (partition 1 l))))", "user": "5b329773e4b025bcb146f322"}, {"problem": 33, "code": "(fn [lst n] (mapcat #(repeat n %) lst))", "user": "5bb905dce4b0a20761a235c7"}, {"problem": 33, "code": "(fn [lst n] (mapcat #(repeat n %) lst))", "user": "5bbbce0ee4b0a20761a2360d"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5bab8c06e4b0a20761a2347e"}, {"problem": 33, "code": "(fn [coll x]\n  (loop [c coll\n         acc []]\n    (if (empty? (seq c))\n      acc\n      (recur (rest c)(concat acc (take x (repeat (first c))))))))", "user": "57f2bf56e4b0511f1d294df8"}, {"problem": 33, "code": "(fn [coll n]\n  (apply concat\n         (apply map vector (repeatedly n (partial identity coll)))))", "user": "59f4c42ce4b0966464fe6ab6"}, {"problem": 33, "code": "#(mapcat (fn [el] (repeat %2 el)) %1)", "user": "5a68f374e4b0512ff01cda05"}, {"problem": 33, "code": "(fn \n  ([old times & args]\n    (let [neww (first args) counter (second args)]\n      (if (empty? old)\n        (reverse neww)\n        (if (= 0 counter)\n          (recur (rest old) times [neww times])\n          (if (nil? counter)\n            (recur old times [neww times])\n            (recur old times [(conj neww (first old)) (- counter 1)] )\n          )\n        )\n      )\n    )\n  )       \n)", "user": "5bbd13a5e4b07a9b28b0ff95"}, {"problem": 33, "code": "(fn replicate_x\n ; \"Replicatex x time each element\"\n  [lst x]\n  (mapcat #(repeat x %1) lst))", "user": "5bbbcecee4b0a20761a23611"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5829d9f8e4b051871117bf4d"}, {"problem": 33, "code": "(fn [xs n]\n  (mapcat #(repeat n %) xs))", "user": "5bc15685e4b07a9b28b10016"}, {"problem": 33, "code": "(fn duplic-seq [lst number]\n  (mapcat #(repeat number %) lst))", "user": "5bbbce70e4b0a20761a2360f"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "5bc39d2be4b07a9b28b10045"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "5bc20634e4b07a9b28b10022"}, {"problem": 33, "code": "(fn [col n]\n  (mapcat #(repeat n %) col))", "user": "5b85221ce4b047b03b2037c8"}, {"problem": 33, "code": "(fn replicate_a_sequence\n  [lst x]\n  \"function which replicates each element of a sequence a variable number of times\"\n  (mapcat #(repeat x %1) lst))", "user": "5bbbd077e4b0a20761a23615"}, {"problem": 33, "code": "(fn [lst n] (mapcat (fn [x] (repeat n x)) lst))", "user": "5bbbba29e4b0a20761a23609"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "5bb3c9a8e4b0a20761a2352f"}, {"problem": 33, "code": "(fn [coll cnt]\n  (mapcat #(repeat cnt %) coll))", "user": "543a8256e4b032a45b869327"}, {"problem": 33, "code": "(fn [coll times] \n    (mapcat #(repeat times %1) coll))", "user": "5bc488bde4b07a9b28b10053"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5bc255b7e4b07a9b28b10029"}, {"problem": 33, "code": "(fn [things n]\n  (mapcat (fn [t] (repeat n t)) things))", "user": "587fb546e4b0f1effa3b75f9"}, {"problem": 33, "code": "(fn replicates\n  [lst n]\n  (mapcat #(repeat n %) lst)\n  )", "user": "5bbbcf9ee4b0a20761a23614"}, {"problem": 33, "code": "(fn [xs r]\n  (mapcat #(repeat r %1) xs))", "user": "596b5f27e4b069c0a1a19813"}, {"problem": 33, "code": "(fn [x y] \n  (mapcat #(repeat y %) x))", "user": "5bc82994e4b07a9b28b100b9"}, {"problem": 33, "code": "(fn [m n]\n  (if (= n 1)\n    m\n  \t(apply interleave (repeat n m))))", "user": "5baa1b58e4b0a20761a2344e"}, {"problem": 33, "code": "(fn [lst n] (mapcat #(repeat n %) lst))", "user": "5bbc0ddfe4b0a20761a2361e"}, {"problem": 33, "code": "(fn [lst n] (mapcat #(repeat n %) lst))", "user": "5bc8c033e4b07a9b28b100ca"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "59d8f23ae4b0ef0a1e9b5c49"}, {"problem": 33, "code": "(fn [l x] (mapcat #(repeat x %) l) )", "user": "5bbbd484e4b0a20761a23617"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "5bc611e3e4b07a9b28b10083"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "59a0286be4b0871e7608b82f"}, {"problem": 33, "code": "(fn [coll n]\n  (for [x coll\n        y (repeat n x)]\n    y))", "user": "5bc833a5e4b07a9b28b100bb"}, {"problem": 33, "code": "(fn [ss n]\n                     (->> ss\n                          (map (fn [s] (repeat n s)))\n                          (apply concat)))", "user": "57f904c5e4b0d3187e900936"}, {"problem": 33, "code": "(fn [coll x]\n  (->>\n    coll\n   (mapcat #(take x (repeat %)))\n  )\n)", "user": "5bc28638e4b07a9b28b10033"}, {"problem": 33, "code": "(fn [xs n]\n  (reduce concat \n          (map (fn [x] \n                 (take n (repeat x))\n               )\n               xs\n          )\n  )\n)", "user": "5bca2c71e4b07a9b28b100e7"}, {"problem": 33, "code": "(fn [c n] (apply concat (map #(repeat n %) c)))", "user": "5bb5cd43e4b0a20761a23575"}, {"problem": 33, "code": "(fn [lst n] (mapcat #(repeat n %) lst))", "user": "5bbbce60e4b0a20761a2360e"}, {"problem": 33, "code": "(fn [lst n]\n  (mapcat #(repeat n %) lst))", "user": "5bcb672ee4b07a9b28b10100"}, {"problem": 33, "code": "(fn [ls n]\n  (mapcat #(repeat n %) ls))", "user": "5bc50870e4b07a9b28b10069"}, {"problem": 33, "code": "(fn\n  [a b]\n  (mapcat #(repeat b %1) a)\n  )", "user": "5bbbce99e4b0a20761a23610"}, {"problem": 33, "code": "(fn [lst n] (mapcat #(repeat n %) lst))", "user": "5bc7ba68e4b07a9b28b100b0"}, {"problem": 33, "code": "(fn [x n]\n   (mapcat #(repeat n %) x))", "user": "5bbbcf81e4b0a20761a23613"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5bbbcf3ae4b0a20761a23612"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat (fn [x] (take n (cycle [x]))) coll))", "user": "5bc7f2d6e4b07a9b28b100b7"}, {"problem": 33, "code": "(fn dup [[x & xs] n]\n  (if-not x\n    []\n    (concat (replicate n x)  (dup xs n))))", "user": "5bcddaeee4b0e9689409ee07"}, {"problem": 33, "code": "(fn [lista n] (apply concat (map #(repeat n %) lista)))", "user": "5bcc9e7ae4b07a9b28b10114"}, {"problem": 33, "code": "(fn [col t]\n  (reduce #(concat %1 (repeat t %2)) [] col))", "user": "5bb948f5e4b0a20761a235d5"}, {"problem": 33, "code": "(fn [coll n] (apply concat (map #(repeat n %) coll)))", "user": "5bc8e91ee4b07a9b28b100ce"}, {"problem": 33, "code": "(fn [input mult] (apply concat (map #(repeat mult %) input)))", "user": "5bc4f266e4b07a9b28b10066"}, {"problem": 33, "code": "(fn [coll n]\n  (loop [remaining coll\n         result []]\n    (if (empty? remaining)\n      result\n      (recur (rest remaining)\n             (into result (repeat n (first remaining)))))))", "user": "593870e6e4b02506e01a29d6"}, {"problem": 33, "code": "(fn [iter num]\n  (loop [result ()\n         items iter]\n    (if (empty? items)\n      (reverse result)\n      (recur (into result (repeat num (first items))) (rest items)))))", "user": "554f817ce4b00713264bd9a2"}, {"problem": 33, "code": "(fn [xs r]\n  (loop [xs xs\n         reps 0\n         acc nil]\n    (if (empty? xs)\n      (reverse acc)\n      (if (< reps r)\n        (recur xs (inc reps) (cons (first xs) acc))\n        (recur (rest xs) 0 acc)))))", "user": "5b673832e4b0c6492753e760"}, {"problem": 33, "code": "(fn [lst n]\n  (reduce\n    (fn [acc x ]\n      (into acc (repeat n x)))\n    [] lst))", "user": "5bd7b8b8e4b0ed4b8aab4bc6"}, {"problem": 33, "code": "(fn [coll x] (mapcat #(take x (repeat %)) coll))", "user": "5bd1fd6be4b0e9689409ee54"}, {"problem": 33, "code": "(fn [l n]\n  (mapcat (fn [x] \n            (repeat n x)) l))", "user": "5bd93897e4b0ed4b8aab4bee"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "5bd9549ee4b0ed4b8aab4bf0"}, {"problem": 33, "code": "(fn [to-dupe dupe-num]\n\t(loop [remain to-dupe\n           to-return []]\n      (if (= (count remain) 1)\n        (concat to-return (for  [i (range dupe-num)]\n                            (first remain)))\n        (recur (rest remain) (concat to-return (for [i  (range dupe-num)]\n                                                 (first remain)))))))", "user": "59595f85e4b066ee0a44afa1"}, {"problem": 33, "code": "(fn duplicate [in n]\n  (reduce concat (map #(take n (repeat %)) in)))", "user": "5bc7c3aee4b07a9b28b100b2"}, {"problem": 33, "code": "(fn [input factor]\n\t(loop [i input ans []]\n    \t(if (empty? i)\n      \t\tans\n\t\t\t(recur (rest i) (into ans (repeat factor (first i))))\n  \t\t)\n    )   \n)", "user": "5bd999cce4b0ed4b8aab4bf4"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5bbdd136e4b07a9b28b0ffab"}, {"problem": 33, "code": "(fn [x n] (loop [x x o []]\n            (if (empty? x)\n              o\n              (recur (rest x) (concat o (loop [ex (first x) en 0 eo []]\n                                (if (= en n)\n                                  eo\n                                  (recur ex (inc en) (conj eo ex)))))))))", "user": "5bdf651ee4b0ed4b8aab4c6d"}, {"problem": 33, "code": "#(reduce (fn [xs x] (concat xs (repeat %2 x))) []  %1)", "user": "5be0306be4b0ed4b8aab4c7d"}, {"problem": 33, "code": "(fn __ [s n] (mapcat #(repeat n %) s))", "user": "5be2e670e4b0ed4b8aab4ccc"}, {"problem": 33, "code": "(fn [a-seq num]\n  (if (= num 1) a-seq\n    (apply interleave (repeat num a-seq))))", "user": "5be33a16e4b0ed4b8aab4cd6"}, {"problem": 33, "code": "(fn [coll n]\n    (apply mapcat\n           vector\n           (repeat n\n                   coll)))", "user": "5be5cebde4b0ed4b8aab4d19"}, {"problem": 33, "code": "(fn [xs r] (reduce #(concat %1 (repeat r %2)) [] xs))", "user": "5b72b36ce4b047b03b2036a9"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "5be58beae4b0ed4b8aab4d14"}, {"problem": 33, "code": "#(apply concat (map (fn [x] (repeat %2 x)) %1))", "user": "5be6d0f8e4b0f319e2d7ec51"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "575f6a80e4b08062f99a4e80"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "user": "55469eede4b0a04f79299542"}, {"problem": 33, "code": "(fn [xs n] (mapcat (partial repeat n) xs))", "user": "5b7d03a0e4b047b03b20373d"}, {"problem": 33, "code": "#(reduce (fn [x y]\n              (concat x (take %2 (repeat y)))) [] %1)", "user": "5bc64843e4b07a9b28b10091"}, {"problem": 33, "code": "(fn [coll n] (reduce #(into %1 (repeat n %2)) [] coll))", "user": "596aaeefe4b069c0a1a19808"}, {"problem": 33, "code": ";(fn [coll n](apply concat (reduce #(conj %1 (repeat n %2)) [] coll)))\n\n(fn [col n] (mapcat #(repeat n %) col ))", "user": "5be589f9e4b0ed4b8aab4d13"}, {"problem": 33, "code": "(fn [coll t] \n  (mapcat \n   (partial repeat t) \n   coll))", "user": "5bece6a5e4b0a6d31fed2114"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5ba15075e4b0a20761a2339e"}, {"problem": 33, "code": "(fn duplicateX [x n] (mapcat identity (map #(repeat n %) x)))", "user": "5be79b5be4b0f319e2d7ec5a"}, {"problem": 33, "code": "(fn [col, n] (mapcat #(repeat n %) col))", "user": "5be182eae4b0ed4b8aab4c9d"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5be70bd5e4b0f319e2d7ec53"}, {"problem": 33, "code": "(fn [arr i]\n  (reduce #(apply conj %1 (repeat i %2)) [] arr))", "user": "5bf0aefde4b0a6d31fed215a"}, {"problem": 33, "code": "(fn x [l n]\n  (reduce concat (map #(repeat n %) l)))", "user": "5b4b58f2e4b02d533a91bc9c"}, {"problem": 33, "code": "(fn [x, ntimes] ((fn doble [nseq, left]\n            (\n              if (empty? left)\n              nseq\n              (let [a (first left) b (rest left)]\n                (doble (concat nseq (seq (take ntimes (repeat a)))) b)))) [] x))", "user": "5be909bae4b0f319e2d7ec6d"}, {"problem": 33, "code": "(fn [coll num] \n    (mapcat #(take num (iterate identity %)) coll))", "user": "5bf1b957e4b0a6d31fed216f"}, {"problem": 33, "code": "(fn [x n] (mapcat #(repeat n %) x))", "user": "5bf5ddfde4b0bdcf453d159e"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5beb8e28e4b0f319e2d7ec8e"}, {"problem": 33, "code": "(fn duplicator [sq ct]\n  (reduce\n    (fn [f s]\n      (concat f (repeat ct s)))\n    '() sq))", "user": "5bfa25fbe4b0bdcf453d15c8"}, {"problem": 33, "code": "(fn [v c] \n  (reduce into '() (map\n    (fn [a] (take c (repeat a))) \n    (reverse v))))", "user": "51301929e4b0e2531888cbde"}, {"problem": 33, "code": "(fn [lst n] \n   (reduce (fn [acc elt ] (concat acc elt)) \n           '() \n           (map #(repeat n %) lst)))", "user": "5bec37e2e4b0f319e2d7ec96"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat (fn [x]\n            (repeat n x))\n          coll))", "user": "5b15ab32e4b0cc2b61a3be72"}, {"problem": 33, "code": "(fn [cols n] (mapcat #(take n (repeat %)) cols))", "user": "5beda647e4b0a6d31fed2122"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5be8bc2de4b0f319e2d7ec66"}, {"problem": 33, "code": "(fn [coll x] (reduce concat (map #(take x (repeat %)) coll)))", "user": "5bfa3e02e4b0bdcf453d15ca"}, {"problem": 33, "code": "(fn [l r] (mapcat #(repeat r %) l))", "user": "5a09a6f7e4b01bb0ae8afe14"}, {"problem": 33, "code": "(fn\n    [s times]\n    (reduce #(concat %1 (take times (repeat %2))) [] s))", "user": "5b8db323e4b0c0b3ffbd49da"}, {"problem": 33, "code": "#(mapcat (fn [dta] (repeat %2 dta)) %1)", "user": "5bed84b1e4b0a6d31fed2120"}, {"problem": 33, "code": "(fn [li nu]\n  (loop [l li\n         r nil\n         ]\n    (if (empty? l)\n      r\n      (recur (rest l) (concat r (take nu (repeat (first l))))))))", "user": "5ac9c737e4b0e27600da77d2"}, {"problem": 33, "code": "(fn [col n]\n  (reduce (fn [r x]\n  (concat r (repeat n x))) [] col))", "user": "5c01ba2ce4b0bdcf453d1656"}, {"problem": 33, "code": "(fn f [arr num] \n  (loop [ans [] subArr arr]\n    (if (> (count subArr) 0)\n      (recur ((fn xx [arri y numm]\n  (loop [ansi arri numi numm]\n    (if (> numi 0)\n      (recur (conj ansi y) (dec numi))\n      ansi\n    )\n  )\n) ans (first subArr) num) (rest subArr))\n      ans\n    )\n  )\n)", "user": "5bf2cf8be4b0a6d31fed217c"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5c03e927e4b0bdcf453d167b"}, {"problem": 33, "code": "(fn [xs cnt]\n  (mapcat\n    #(repeat cnt %)\n    xs))", "user": "5bea3177e4b0f319e2d7ec81"}, {"problem": 33, "code": "#(reverse(reduce (fn [col elem]\n   (into col (repeat %2 elem))\n)\n '() %1))", "user": "5beebdb7e4b0a6d31fed2132"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(take n (repeat %)) xs))", "user": "5bfe4ecfe4b0bdcf453d1608"}, {"problem": 33, "code": "(fn [seqr n] (mapcat #(repeat n %) seqr))", "user": "5c0a87e6e4b0bdcf453d1707"}, {"problem": 33, "code": "(fn [coll multiplier]\n   (mapcat #(repeat multiplier %) coll))", "user": "5bef3e88e4b0a6d31fed213f"}, {"problem": 33, "code": "#(reduce\n   (fn [acc val]\n     (concat acc (repeat %2 val))\n   )\n   []\n   %1\n  )", "user": "5c0d0537e4b0bdcf453d173d"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5c0e22cae4b01240ff56713b"}, {"problem": 33, "code": "(fn [xs n]\n  (mapcat identity (map #(repeat n %) xs)))", "user": "5c0e58bfe4b01240ff567140"}, {"problem": 33, "code": "(fn [lst n] (reduce #(concat %1 (repeat n %2)) [] lst))", "user": "5c119da6e4b01240ff56717d"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "594d4c57e4b07ddc2dafae87"}, {"problem": 33, "code": "(fn [coll num]\n     (reduce (fn [coll item]\n                        (concat coll (repeat num item))\n                        ) '() coll)\n           )", "user": "5c1229d5e4b01240ff567188"}, {"problem": 33, "code": "#(apply concat (map (fn [y] (take %2 (repeat y))) %1))", "user": "5bfada5ee4b0bdcf453d15d2"}, {"problem": 33, "code": "(fn [coll times] \n  (if (<= times 1) \n    coll\n    (apply interleave (repeat times coll))))", "user": "5c13da47e4b01240ff5671a6"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5c04464ee4b0bdcf453d167d"}, {"problem": 33, "code": "(fn [items n]\n  (apply concat (for [item items] (take n (repeat item)))))", "user": "57131a8ee4b07c98581c3a97"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5b8ec146e4b0c0b3ffbd49f0"}, {"problem": 33, "code": "#(mapcat (fn [el] (repeat %2 el)) %)", "user": "5c165d3ee4b01240ff5671d1"}, {"problem": 33, "code": "(fn\n  [coll n]\n  (reduce\n   (fn [l el]\n     (into l (take n (repeat el))))\n   []\n   coll))", "user": "5c15537ae4b01240ff5671bf"}, {"problem": 33, "code": "(fn [coll n] (apply concat (map (fn [x] (repeat n x)) coll)))", "user": "5c1bee41e4b01240ff567218"}, {"problem": 33, "code": "#(if (> %2 1) (apply interleave (repeat %2 %1)) %1)", "user": "5c1aadcde4b01240ff567209"}, {"problem": 33, "code": "(fn [nb x] \n  (mapcat \n   #(repeat x %) \n   nb))", "user": "5c13dc37e4b01240ff5671a7"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5c17467fe4b01240ff5671df"}, {"problem": 33, "code": "(fn [coll n] (reduce #(concat %1 (repeat n %2)) '() coll))", "user": "5c1edf23e4b0efcb0b05b25d"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %)", "user": "5b0bd9cfe4b0cc2b61a3bdd9"}, {"problem": 33, "code": "(fn [x y] (reduce (fn [a b] (into a (repeat y b))) [] x))", "user": "5c1d9f05e4b0efcb0b05b24c"}, {"problem": 33, "code": "(fn [mylist n]\n  (let [f (fn [l s] (concat l (repeat n s)))]\n     (reduce f [] mylist)   \n        ))", "user": "5c0e3f86e4b01240ff56713d"}, {"problem": 33, "code": "(fn multiplySeq \n  [s n]\n  (reduce #(into %1 (repeat n %2)) [] s))", "user": "5c20b6abe4b07e362c230576"}, {"problem": 33, "code": "(fn duplicate-n\n  [xs n]\n  (apply concat (map (fn [x] (take n (repeat x))) xs)))", "user": "5c222b7de4b07e362c230588"}, {"problem": 33, "code": "#(reduce (fn [xs x] (concat xs (repeat %2 x))) '() %1)", "user": "5c228b51e4b07e362c23058c"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "5c2195dce4b07e362c230580"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "582c986ee4b051871117bf9b"}, {"problem": 33, "code": "(fn foo [col n]\n  (when col\n    (lazy-cat (repeat n (first col)) (foo (next col) n))))", "user": "5c219c0fe4b07e362c230581"}, {"problem": 33, "code": "(fn replicate [xs n] \n  (mapcat #(repeat n %) xs))", "user": "5776903ee4b0979f8965163b"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5c2649c8e4b07e362c2305bf"}, {"problem": 33, "code": "(fn [s n] (mapcat (partial repeat n) s))", "user": "5c272f82e4b07e362c2305cb"}, {"problem": 33, "code": "(fn [xs n] (reduce #(concat %1 (repeat n %2)) (list) xs))", "user": "5c092334e4b0bdcf453d16ea"}, {"problem": 33, "code": "#(->> (map (fn [elem] (repeat %2 elem)) %1)\n     (mapcat identity ))", "user": "55f48d1be4b06e875b46ce7b"}, {"problem": 33, "code": "(fn rep [input n]\n  (loop [[first & rest] input\n         outer []]\n    (if (nil? first)\n      outer\n      (recur rest (into outer (loop [inner [] i 0]\n                    (if (< i n)\n                      (recur (conj inner first) (inc i))\n                      inner)))))))", "user": "5c195cb2e4b01240ff5671f7"}, {"problem": 33, "code": "#(mapcat (fn [a] (repeat %2 a)) %)", "user": "5c2836ebe4b07e362c2305d4"}, {"problem": 33, "code": "(fn repl[coll times]\n  (reduce\n   \t#(concat %1 (repeat times %2))\n    []\n   \tcoll))", "user": "5ba75fdfe4b0a20761a23419"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "50eeeadae4b02c17778c91f3"}, {"problem": 33, "code": "(fn [s n]\n  (loop [c 0\n         replicated-seq []]\n    (if (= c (count s))\n      replicated-seq\n      (recur (inc c) (loop [i 0\n                            inner-seq replicated-seq]\n                       (if (= i n)\n                         inner-seq\n                         (recur (inc i) (conj inner-seq (get s c)))))))))", "user": "57d57f65e4b0bd073c2023b3"}, {"problem": 33, "code": "(fn n-rep [s n]\n    (mapcat #(repeat n %) s))", "user": "5c31517de4b0d62ef62d9f28"}, {"problem": 33, "code": "(fn [c n] (mapcat #(for [x (range n)] %) c))", "user": "5c2f0cdfe4b0d62ef62d9f09"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %)s))", "user": "5c32ea85e4b0d62ef62d9f3e"}, {"problem": 33, "code": "#(loop[data %1\n       res []]\n  (if (empty? data)\n    res\n    (recur\n      (rest data)\n      (into res\n        (loop [val (first data)\n               cnt %2\n               res2 []]\n          (if (= cnt 0)\n            res2\n            (recur\n              val\n              (- cnt 1)\n              (conj res2 val)\n            )\n          )\n        )\n      )\n    )\n  )\n)", "user": "5bfcdc52e4b0bdcf453d15f4"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5c0fedade4b01240ff567157"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5c24671be4b07e362c2305a1"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "5c2d1f63e4b0d62ef62d9ef0"}, {"problem": 33, "code": "(fn n-rep [s n]\n  (mapcat #(repeat n %) s))", "user": "5bf28e9ee4b0a6d31fed2177"}, {"problem": 33, "code": "(fn replicate-sequence\n  [sequence n]\n  (->> sequence\n       (map (fn [x] (repeat n x)))\n       (mapcat identity)\n       ))", "user": "5c36d110e4b0d62ef62d9f6a"}, {"problem": 33, "code": "(fn duplicate-sequence [in-seq n]\n  (reduce (fn [col ele] (apply conj col ele)) (map #(apply vector (repeat n %)) in-seq)))", "user": "5c196dc3e4b01240ff5671fa"}, {"problem": 33, "code": "(fn f[se cnt]\n  (mapcat #(repeat cnt %) se)\n)", "user": "5c337305e4b0d62ef62d9f48"}, {"problem": 33, "code": "(fn replicate-sequence\n  [sequence n]\n  (->> sequence\n       (map (fn [x] (repeat n x)))\n       (mapcat identity)\n       ))", "user": "5c3ac091e4b0d62ef62d9f95"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5c3310cde4b0d62ef62d9f43"}, {"problem": 33, "code": "(fn[x y] (apply concat (map #(repeat y %) x)))", "user": "52c8a814e4b0c2d177d62138"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "5c379636e4b0d62ef62d9f76"}, {"problem": 33, "code": "(fn [coll n] (apply concat (map #(repeat n %) coll)))", "user": "5b754a5ae4b047b03b2036c8"}, {"problem": 33, "code": "(fn [y n] (apply concat (#(for [x %] (take n (repeat x))) y)))", "user": "5c308385e4b0d62ef62d9f1c"}, {"problem": 33, "code": "(fn [col n]\n   (mapcat #(take n (repeat %)) col))", "user": "54d90b36e4b0a52adc2e2049"}, {"problem": 33, "code": "(fn doreplicate\n  [xs y]\n  (reduce\n   (fn\n     [acc x]\n     (concat acc (repeat y x)) )\n   [] xs))", "user": "5c35acffe4b0d62ef62d9f62"}, {"problem": 33, "code": "(fn\n  [s n]\n  (apply concat (map (partial repeat n) s)))", "user": "5c05cae7e4b0bdcf453d16a3"}, {"problem": 33, "code": "(fn [x n] (mapcat #(concat (repeat n %)) x))", "user": "5c2dfca3e4b0d62ef62d9efc"}, {"problem": 33, "code": "(fn [s n]\n   (apply concat (map (fn [a] (repeat n a)) s)))", "user": "5c374db6e4b0d62ef62d9f73"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "5c3ec6dbe4b08cd430848e8a"}, {"problem": 33, "code": "#(mapcat (fn [el] (repeat %2 el)) %1)", "user": "5c408a61e4b08cd430848eb2"}, {"problem": 33, "code": "(fn dup-times [coll n]\n  (mapcat identity(map #(repeat n %) coll)))", "user": "5c411df3e4b08cd430848ebf"}, {"problem": 33, "code": "(fn [x z]\n  (loop [cur x acc '() siz z]\n    (if (= (count cur) 0)\n      acc\n      (recur (rest cur) (loop [acc2 acc siz2 siz el (first cur)]\n                          (if (= siz2 0)\n                          \tacc2\n                            (recur (concat acc2 (list el)) (dec siz2) el)\n                          )\n                        ) siz\n      )\n    )\n  )\n)", "user": "5c3f6322e4b08cd430848e97"}, {"problem": 33, "code": "(fn [xs, times] (reduce (fn [acc x] (concat acc (take times (repeat x)))) [] xs))", "user": "5c3f37fce4b08cd430848e91"}, {"problem": 33, "code": "(fn\n  [sequence times]\n  (reverse (reduce (fn [result current]\n            (concat current result))\n          (map (fn [item] (take times (repeat item)))\n               sequence))))", "user": "5c44f0fde4b0e06e1360a384"}, {"problem": 33, "code": "(fn [seq count]\n\n  (loop [\n         col seq\n         acc []\n         ]\n    (if (empty? col)\n      acc\n\n      (recur (rest col) (apply conj acc (take count (iterate identity (first col)))))\n      )\n\n    )\n  )", "user": "53b0750fe4b047364c044483"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "57635e2de4b0994c1922fbbf"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5c3796b3e4b0d62ef62d9f77"}, {"problem": 33, "code": "(fn rep [s n] \n  (if(empty? s)(sequence '())\n    (concat (repeat n (first s)) (rep (rest s) n))))", "user": "5c486dece4b0e06e1360a3c0"}, {"problem": 33, "code": "(fn [coll cnt] \n  (reduce (fn [acc val] (concat acc (repeat cnt val))) [] coll))", "user": "52384eb1e4b0fae3832e99fa"}, {"problem": 33, "code": "(fn\n  [coll n]\n  \n  (-> (partial repeat n)\n      (mapcat coll))\n)", "user": "5c493046e4b0e06e1360a3cb"}, {"problem": 33, "code": "(fn replicate [lat n]\n  (reduce concat (map #(take n (repeat %)) lat)))", "user": "5c4ab449e4b0f9f7a8770e57"}, {"problem": 33, "code": "(fn \n  [lst n]\n  (mapcat #(repeat n %) lst))", "user": "5c45e703e4b0e06e1360a391"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "5c4c74efe4b0f9f7a8770e76"}, {"problem": 33, "code": "#(apply concat (map (partial repeat %2) %1))", "user": "5c512811e4b0fb8c5ffd99c2"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "5c48757fe4b0e06e1360a3c3"}, {"problem": 33, "code": "(fn replicate [coll n]\n  (apply concat (map (partial repeat n) coll)))", "user": "5c506951e4b0f9f7a8770ec5"}, {"problem": 33, "code": "(fn replicates [s times]\n\t(mapcat #(take times (repeat %)) s)\n  )", "user": "5c4ad616e4b0f9f7a8770e5a"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "user": "5c50048ae4b0f9f7a8770eb9"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5c30d90de4b0d62ef62d9f22"}, {"problem": 33, "code": "#(if (> %2 1) (apply interleave (take %2 (repeat %1))) %1)", "user": "5b14475be4b0cc2b61a3be5a"}, {"problem": 33, "code": "(fn rep [x n] (if (empty? x) nil (concat (take n (repeat (first x))) (rep (rest x) n))))", "user": "5c54e605e4b0fb8c5ffd9a14"}, {"problem": 33, "code": "#(reverse (reduce (fn [x y] (concat (repeat %2 y) x)) [] %1))", "user": "5c3cd80fe4b0d62ef62d9faa"}, {"problem": 33, "code": "#(apply concat (map (fn [input](repeat %2 input)) %1))", "user": "5c582e7be4b0fb8c5ffd9a55"}, {"problem": 33, "code": "(fn [coll count]\n  (reduce \n   #(apply conj %1 (repeat count %2)) \n   [] coll))", "user": "5bfc082be4b0bdcf453d15e1"}, {"problem": 33, "code": "(fn [xs n] (mapcat (fn [x] (repeat n x)) xs))", "user": "5c53127ee4b0fb8c5ffd99ef"}, {"problem": 33, "code": "(fn [coll n] (apply concat (map #(repeat n %) coll)))", "user": "5c527129e4b0fb8c5ffd99de"}, {"problem": 33, "code": "#(->> %1\n       (repeat)\n       (take %2)\n       ((fn \n          [x]\n          (if (> %2 1)\n            (apply interleave x)\n            (first x)))))", "user": "5c435a9fe4b0e06e1360a367"}, {"problem": 33, "code": "(fn [lst x] (reduce concat (map (fn [n] (repeat x n)) lst)))", "user": "5c59b1d3e4b01df32ab73261"}, {"problem": 33, "code": "(fn [coll n]\n(mapcat #(repeat n %) coll))", "user": "5a6dbaf5e4b0512ff01cda63"}, {"problem": 33, "code": "#(mapcat (fn [input](repeat %2 input)) %1)", "user": "5550b5a0e4b00713264bd9ad"}, {"problem": 33, "code": "(fn [xs n] (\n    mapcat identity (mapcat (fn [x] (repeat n x))\n      (partition-all 1 xs))\n  ))", "user": "5c3de434e4b0d62ef62d9fb8"}, {"problem": 33, "code": "(fn [s n] (apply concat (mapv #(repeat n %) s)))", "user": "502ea967e4b06efe12e8cc76"}, {"problem": 33, "code": "(fn replicates [coll n]\n  (apply concat (map #(repeat n %) coll))\n  )", "user": "5c51d700e4b0fb8c5ffd99d1"}, {"problem": 33, "code": "(fn [xs n]\n  (mapcat #(repeat n %) xs))", "user": "5c387c51e4b0d62ef62d9f83"}, {"problem": 33, "code": "(fn f [lst n]\n  (if (empty? lst)\n    nil\n    (concat (repeat n (first lst)) (f (rest lst) n))))", "user": "5c62979fe4b0fca0c162264c"}, {"problem": 33, "code": "(fn\n  [items n]\n  (mapcat #(for [_ (range n)] %) items))", "user": "5c6227fee4b0fca0c1622641"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "592883f1e4b072a2710fceea"}, {"problem": 33, "code": "(fn [coll n]\n    (mapcat (partial repeat n) coll))", "user": "5c5d2e90e4b01df32ab732af"}, {"problem": 33, "code": "#(if (= %2 1) (identity %1) (apply interleave (repeat %2 %1)))", "user": "5a8aa992e4b05369db4d24d8"}, {"problem": 33, "code": "(fn repli [inp num]\n    (loop [i 0 result []]\n    (if (< i (count inp))\n      (let [qq (get inp i)\n               oput (repeat num qq)\n                rst (concat result oput)]\n               (recur (inc i) rst ))\n      result)))", "user": "5b98f174e4b0c0b3ffbd4ac1"}, {"problem": 33, "code": "(fn [col n]\n  (reverse (reduce (fn [acc x]\n            (into acc (repeat n x))) '() col)))", "user": "5af4446de4b0cc2b61a3bc93"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5c58736be4b01df32ab73247"}, {"problem": 33, "code": "(fn replct [s n]\n       (mapcat #(repeat n %) s))", "user": "4e617114535d8ccf87e9fe5b"}, {"problem": 33, "code": "(fn [xs n]\n  (mapcat #(take n (repeat %)) xs))", "user": "58b12635e4b0ebc645576cf4"}, {"problem": 33, "code": "#(mapcat (fn [i] (repeat %2 i)) %1)", "user": "5c51c930e4b0fb8c5ffd99ce"}, {"problem": 33, "code": "#(reduce (fn [x y] (concat x (repeat %2 y))) '() %1)", "user": "5c52f3fce4b0fb8c5ffd99e9"}, {"problem": 33, "code": "(fn [c n] (apply concat (map #(repeat n %) c)))", "user": "5c41db45e4b08cd430848ece"}, {"problem": 33, "code": "(fn\n  [coll n]\n  (loop [coll coll\n         rep []]\n    (if (empty? coll)\n      rep\n      (recur (rest coll) (concat rep (take n (repeat (first coll)))))\n      )\n    )\n  )", "user": "5c6cb3bfe4b0fca0c1622730"}, {"problem": 33, "code": "#(apply concat (map (fn [x] (repeat %2 x)) %1))", "user": "5c6d0e51e4b0fca0c1622735"}, {"problem": 33, "code": "(fn [s n] (apply concat (map #(repeat n %) s)))", "user": "5549ca1ce4b0a04f7929956c"}, {"problem": 33, "code": "(fn [x how-many]\n    (mapcat #(repeat how-many %) x))", "user": "5b269cf3e4b063e2438bcc35"}, {"problem": 33, "code": "(fn [s n]\n    (loop [s s, r []]\n    (if (= s '())\n      r\n      (recur (rest s) \n             (loop [n n, r r]\n               (if (= 0 n)\n                 r\n                 (recur (dec n) (conj r (first s)))))))))", "user": "5c6e1006e4b0fca0c1622744"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat identity\n          (loop [[r & more :as all] (seq coll)\n                 acc '()]\n            (if all\n              (recur more (conj acc (reverse (repeat n r))))\n              (reverse acc)))))", "user": "5c718e6ce4b0fca0c1622796"}, {"problem": 33, "code": ";#(loop [c 1 r (repeat %2   (nth %1 0))]\n;   (if (< c (count %1))\n;     (recur \n;      (inc c)\n;      (mapcat identity [r(repeat %2   (nth %1 c))])\n;      )\n;     r\n;\t)\n;)\n\n#(loop [c 1 r (repeat %2   (get %1 0))]\n   (if (get %1 c)\n     (recur \n      (inc c)\n      (mapcat identity [r(repeat %2   (get %1 c))])\n      )\n     r\n\t)\n)\n\n;(fn[x y](mapcat #(repeat y %) x))", "user": "5c683fb5e4b0fca0c16226d5"}, {"problem": 33, "code": "(fn [l n]\n  (let [recursion (fn df [result l n]\n            (if (empty? l) result\n              (recur (concat result (repeat n (first l))) (rest l) n)\n            ))]\n  (recursion [] l n)\n  )\n)", "user": "553b90c8e4b09218d5f45005"}, {"problem": 33, "code": "(fn [c n]\n  (mapcat\n   \t(fn [x]\n      (map (constantly x) (range n)))\n    c))", "user": "5c73b8bae4b0fca0c16227ba"}, {"problem": 33, "code": "(fn [lst n]\n  (mapcat #(repeat n %1) lst))", "user": "5c6da283e4b0fca0c162273e"}, {"problem": 33, "code": "(fn my-replicate [c amount]\n  (mapcat (partial repeat amount) c))", "user": "59cd351ee4b0ef0a1e9b5b35"}, {"problem": 33, "code": "(fn [list ocr] (reduce #(into %1 (repeat ocr %2)) [] list))", "user": "5c6e8b57e4b0fca0c1622755"}, {"problem": 33, "code": "(fn\n  [lst n]\n  (mapcat #(repeat n %) lst))", "user": "5c706232e4b0fca0c162277e"}, {"problem": 33, "code": "(fn rep-seq-old\n  [params count]\n  \"Solution due to https://dev.clojure.org/jira/browse/CLJ-863 \n   prior to 1.6.0\"\n  (->> params\n       (map #(repeat count %))\n       (apply concat)))", "user": "5c73bcf9e4b0fca0c16227bb"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5c5b246ae4b01df32ab73286"}, {"problem": 33, "code": "(fn [coll n] \n  (case n\n    1 coll\n    (apply interleave (repeat n coll))))", "user": "5c792c34e4b0fca0c1622834"}, {"problem": 33, "code": "(fn [s n] (mapcat #(cons % (repeat (dec n) %)) s))", "user": "5c784248e4b0fca0c162281f"}, {"problem": 33, "code": "(fn repli\n  [xs n]\n  (reduce concat (map #(repeat n %) xs)))", "user": "5c787131e4b0fca0c1622825"}, {"problem": 33, "code": "(fn [coll n] (mapcat (fn [el] (map (fn [asdf] (identity el)) (range n))) coll));lol that was messy", "user": "5c7c1d8ee4b0d597f478ca88"}, {"problem": 33, "code": "(fn [input-seq times](mapcat #(repeat times %) input-seq))", "user": "5c723f4be4b0fca0c16227a0"}, {"problem": 33, "code": "#(cond (> %2 1) (apply interleave (repeat %2 %1)) :else (seq %1))", "user": "5b100648e4b0cc2b61a3be17"}, {"problem": 33, "code": "(fn [sq var] (reduce\n            (fn [nsq curr]\n              (concat nsq (take var (repeat curr))))\n            '() sq))", "user": "5c76577ae4b0fca0c16227ea"}, {"problem": 33, "code": "(fn rep [sequ n]\n  (loop [s sequ i 1 res []]\n    (if (empty? s)\n      res\n      (if (integer? (/ i (+ n 1)))\n        (recur (rest s) (inc i) res)\n        (recur s (inc i) (conj res (first s)))))))", "user": "5c7d5a0ce4b0d597f478caab"}, {"problem": 33, "code": "(fn [r times] (mapcat #(for [x (range times) y [%]] y) r))", "user": "5c7bc0a5e4b0fca0c1622865"}, {"problem": 33, "code": "(fn [col n] (mapcat #(repeat n %) col))", "user": "5c8002cde4b0c8042a70ce09"}, {"problem": 33, "code": "(fn [s n] (mapcat (fn [e] (repeat n e)) s))", "user": "5c7ef3f3e4b0d597f478cad7"}, {"problem": 33, "code": "#(apply mapcat vector (repeat %2 %1))", "user": "5c664b87e4b0fca0c16226a5"}, {"problem": 33, "code": "#(mapcat (fn [l] (repeat %2 l)) %1)", "user": "5c26c9b3e4b07e362c2305c5"}, {"problem": 33, "code": "(fn [coll n]\n   (reduce (fn [acc item]\n           (vec (concat acc (repeat n item))))\n           [] coll))", "user": "5a64dcabe4b0512ff01cd9a9"}, {"problem": 33, "code": "(fn [lst x]\n  (mapcat #(repeat x %) lst))", "user": "5c748bf5e4b0fca0c16227cb"}, {"problem": 33, "code": "(fn replic\n  [lst n]\n  (if (empty? lst)\n    lst\n    (if (zero? n)\n      ()\n      (loop [result ()\n             i      0]\n        (if (= (count lst) i)\n          result\n          (recur (concat result (repeat n (nth lst i)))\n                 (inc i)))))))", "user": "5c7dad57e4b0d597f478caba"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "5c7f7889e4b0d597f478cae0"}, {"problem": 33, "code": "#(mapcat (fn [el] (take %2 (repeatedly (constantly el)))) %1)", "user": "5bcf0b1be4b0e9689409ee24"}, {"problem": 33, "code": ";; (fn [coll n] (apply list (mapcat #(repeat n %) coll)))\n\n(fn [coll n] (apply concat (reduce #(conj %1 (repeat n %2)) [] coll)))", "user": "5c8319c3e4b0c8042a70ce45"}, {"problem": 33, "code": "#(apply concat (map (fn [input](repeat %2 input)) %1))", "user": "5c81c933e4b0c8042a70ce2d"}, {"problem": 33, "code": "(fn [col n] (mapcat #(take n (repeat %)) col))", "user": "5be96111e4b0f319e2d7ec70"}, {"problem": 33, "code": "(fn [l n] (apply concat (map #(take n (iterate identity %)) l)))", "user": "5c558070e4b0fb8c5ffd9a1e"}, {"problem": 33, "code": "(fn lstRepeatTwo\n  [lst n]\n  (mapcat #(repeat n %) (seq lst))\n\n  )", "user": "5c82db41e4b0c8042a70ce42"}, {"problem": 33, "code": "(fn [xs n]\n  (if (= 1 n)\n    xs\n    (apply interleave\n           (take n (iterate identity xs)))))", "user": "56ee905be4b04a395b9a044f"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5c75a830e4b0fca0c16227e0"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5c70641de4b0fca0c162277f"}, {"problem": 33, "code": "(fn [l n] (mapcat #(repeat n %) l))", "user": "5c7d947be4b0d597f478cab6"}, {"problem": 33, "code": "(fn myReplicate\n   [lst\n    cant]\n   (loop [lst     lst\n          result  ()]\n     (if (empty? lst)\n       result\n       (recur (rest lst)\n              (concat result (take cant (repeat (first lst))))))))", "user": "5c74b043e4b0fca0c16227ce"}, {"problem": 33, "code": "(fn reps [lst n]\n  (mapcat #(repeat n %) lst))", "user": "5c7d5463e4b0d597f478caa9"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5c7bb8c0e4b0fca0c1622864"}, {"problem": 33, "code": "(fn [list n]\n  (mapcat (partial repeat n) list))", "user": "5c852e3ae4b0c8042a70ce78"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5c7c8c72e4b0d597f478ca96"}, {"problem": 33, "code": "(fn [c a] (mapcat #(repeat a %) c))", "user": "5c7741dce4b0fca0c1622806"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5c706454e4b0fca0c1622780"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5c746c31e4b0fca0c16227c8"}, {"problem": 33, "code": "(fn [a b]\n   (apply concat (map #(repeat b %) a))\n   )", "user": "4f2a7174e4b0d6649770a03e"}, {"problem": 33, "code": "(fn [coll r]\n (apply concat (map #(repeat r %) coll)))", "user": "57e2e1bde4b0bfb2137f5a8f"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5c8ecb58e4b048ec896c59b0"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5c7eaadfe4b0d597f478cace"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5c8fd8f3e4b048ec896c59c7"}, {"problem": 33, "code": "(fn [the-seq rep-amount]\n  (mapcat #(repeat rep-amount %) the-seq))", "user": "5c86b769e4b0c8042a70ce9b"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5c91ae79e4b048ec896c59eb"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "566a0845e4b04acd4f672e05"}, {"problem": 33, "code": "(fn  [seq n]\n  (reduce concat (map #(take n (repeat %)) seq)))", "user": "5c891afde4b048ec896c5935"}, {"problem": 33, "code": "(fn replicate-count\n  [coll count]\n  (mapcat #(repeat count %) coll))", "user": "5c92105ce4b048ec896c59f7"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5c896f46e4b048ec896c5940"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5c987160e4b048ec896c5a82"}, {"problem": 33, "code": "(fn [x n]\n   (->> x\n        (map #(repeat n %))\n        (reduce concat)))", "user": "5b6002c2e4b0c6492753e6fb"}, {"problem": 33, "code": "(fn [sq n]\n  (->> sq\n       (reduce (fn [result s]\n                 (concat result (repeat n s))) [])))", "user": "5c995fa4e4b048ec896c5a96"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5bd0ea60e4b0e9689409ee45"}, {"problem": 33, "code": "(fn f [s n]\n  (let [f*\n        (fn [acc s*]\n          (concat acc (repeat n s*)))]\n    (reduce f* [] s)))", "user": "5c92161de4b048ec896c59f9"}, {"problem": 33, "code": "(fn [lst x]\n  (mapcat #(repeat x %) lst))", "user": "5c9d0a0be4b048ec896c5afc"}, {"problem": 33, "code": "(fn [coll itr]\n (apply list\n  (reduce #(apply conj %1 \n(take itr (iterate identity %2))) [] coll)))", "user": "510608ebe4b01150e115ebe3"}, {"problem": 33, "code": "(fn [coll x]\n  (mapcat #(take x (repeat %)) coll))", "user": "5ca14eb1e4b048ec896c5b7d"}, {"problem": 33, "code": "#(apply concat (map (partial repeat %2) %1))", "user": "5c9dcb36e4b048ec896c5b1d"}, {"problem": 33, "code": "(fn repli [alist n]\n  (cond\n   (empty? alist) '()\n   :else (concat (repeat n (first alist))\n               (repli (rest alist) n))\n               ))", "user": "5ca3695fe4b048ec896c5ba9"}, {"problem": 33, "code": "(fn [in n] (mapcat\n              (fn [a] (repeat n a ))  in ))", "user": "5c94cbb1e4b048ec896c5a3d"}, {"problem": 33, "code": "(fn [seq cnt]\n   (reverse\n    ((fn [accum [c & cs]]\n       (if (empty? cs)\n         (concat (repeat cnt c) accum)\n         (recur (concat (repeat cnt c) accum) cs)))\n     () seq)))", "user": "573d27b4e4b05c31a32c080f"}, {"problem": 33, "code": "(fn [s n] (->> s\n    (partition-by identity)\n    (mapcat #(repeat n %))\n    (reduce concat)))", "user": "5ca622f3e4b048ec896c5be0"}, {"problem": 33, "code": "(fn [s n]\n   (if (== 1 n)\n     s\n     (apply interleave (repeat n s))))", "user": "5c950334e4b048ec896c5a44"}, {"problem": 33, "code": "(fn [xs n] (reduce concat (map #(repeat n %) xs)))", "user": "55a24698e4b0acc240e31523"}, {"problem": 33, "code": "(fn [data n]\n    (reduce\n      (fn [acc v]\n        (concat acc (repeat n v)))\n      '()\n      data))", "user": "5adf63a7e4b0837691e92c34"}, {"problem": 33, "code": "(fn replicat [x y]\n  (if (empty? x) x\n    (concat (repeat y (first x))\n            (replicat (rest x) y))))", "user": "5c538cb5e4b0fb8c5ffd99fb"}, {"problem": 33, "code": "(fn [seq n] (mapcat #(repeat n %) seq))", "user": "5ca1c45ae4b048ec896c5b85"}, {"problem": 33, "code": "(fn [s n] (mapcat (partial repeat n) s))", "user": "5cab33e7e4b048ec896c5c48"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5caf9cace4b026601754b89b"}, {"problem": 33, "code": "(fn q33 [input count]\n  (apply concat (for [x input] (repeat count x))))", "user": "5cab0ad9e4b048ec896c5c46"}, {"problem": 33, "code": "(fn [x rep]\n  \t(reduce concat (map #(repeat rep %) x)))", "user": "5ca04cc3e4b048ec896c5b69"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5c371f5be4b0d62ef62d9f72"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "58b84c28e4b0ebc645576d94"}, {"problem": 33, "code": "(fn\n  [coll n]\n  (mapcat identity (for [x coll] (repeat n x))))", "user": "5c9419fae4b048ec896c5a2b"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5cb556f9e4b026601754b934"}, {"problem": 33, "code": "(fn replicate-sequence [coll n]\n\t(apply concat (map #(repeat n %) coll)))", "user": "593c1e3be4b069cdc2982b86"}, {"problem": 33, "code": "(fn [s n]\n  (let [f*\n        (fn [acc s*]\n          (concat acc (repeat n s*)))]\n    (reduce f* [] s)))", "user": "5cb71f35e4b026601754b961"}, {"problem": 33, "code": "(fn [l r] (mapcat #(repeat r %1) l))", "user": "5b507222e4b02d533a91bce7"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "5ca7b5bbe4b048ec896c5c04"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5cbeadf2e4b0ccb061962755"}, {"problem": 33, "code": "(fn [coll num-repeat] \n  (->> \n  (reduce\n    #(conj %1 (take num-repeat (repeat %2)))\n   \t[] coll)\n   (apply concat)))", "user": "5afb3426e4b0cc2b61a3bcf5"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(take n (repeat %)) coll))", "user": "5cb62652e4b026601754b949"}, {"problem": 33, "code": "#(if (= 1 %2) %1 (apply interleave (repeat %2 %1)))\n; newer repl doesn't need the if checking", "user": "56d5c1b0e4b0ea9b8538f7c3"}, {"problem": 33, "code": "(fn \n  [coll n]\n  (let [idx (range n)]\n  (for [x coll i idx]\nx)))", "user": "5cb4e764e4b026601754b929"}, {"problem": 33, "code": "(fn  [arg1 arg2]\n      (mapcat #(repeat arg2 %) arg1))", "user": "5cb6256ce4b026601754b947"}, {"problem": 33, "code": "(fn [s times] (reduce #(concat %1 (repeat times %2)) () s))", "user": "598ff38ce4b0fcebec4de869"}, {"problem": 33, "code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "user": "5cbc9dace4b026601754b9eb"}, {"problem": 33, "code": "(fn replicater [coll n] (mapcat #(repeat n %) coll))", "user": "5cb11a72e4b026601754b8c6"}, {"problem": 33, "code": "#(mapcat (fn[x] (repeat %2 x)) %)", "user": "5cc6f982e4b0ccb06196282d"}, {"problem": 33, "code": "#(for [x %1 y (range %2)] x)", "user": "5cbd5b42e4b026601754b9f6"}, {"problem": 33, "code": "(fn rep-n [x n]\n  (if (= n 1)\n    x\n    (apply interleave (repeat n x))))", "user": "5c547cf0e4b0fb8c5ffd9a0b"}, {"problem": 33, "code": "(fn [col rep] (reduce #(concat %1 (repeat rep %2)) [] col))", "user": "5cb39440e4b026601754b903"}, {"problem": 33, "code": "#(apply concat (map (fn [item] (take %2 (repeat item))) %))", "user": "5cc80598e4b0ccb061962840"}, {"problem": 33, "code": "(fn rpt [x n]\n(if (empty? x)\n x\n (into (rpt (rest x) n) (repeat n (first x)))))", "user": "5cc7342be4b0ccb061962830"}, {"problem": 33, "code": "(fn [a b] \n   (mapcat #(repeat b %) a))", "user": "5c73a944e4b0fca0c16227b8"}, {"problem": 33, "code": "(fn [xs times] (mapcat #(take times (repeat %)) xs))", "user": "5cc75ffce4b0ccb061962836"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(take n (repeat %)) xs))", "user": "5cb0f70ce4b026601754b8c1"}, {"problem": 33, "code": "(fn [s n]\n  (loop [\n          idx 0\n          times 1\n    \t  result []]\n   (if (= idx (count s)) result\n   (let [item (s idx)] \n    (if (= times n) (recur (inc idx) 1 (conj result item))\n    (recur idx (inc times) (conj result item)))))))", "user": "5c09e555e4b0bdcf453d16fd"}, {"problem": 33, "code": "(fn [y k] (mapcat (fn [x] (repeat k x)) y))", "user": "5ccb3792e4b0ccb061962882"}, {"problem": 33, "code": "(fn [c n] (mapcat #(take n (iterate identity %)) c))", "user": "4fbe2cfbe4b081705acca30c"}, {"problem": 33, "code": "(fn [c times]\n  (reduce (fn [col el]\n            (concat col (repeat times el)))\n          '()\n          c))", "user": "5cc7073de4b0ccb06196282e"}, {"problem": 33, "code": "(fn [a b] (mapcat #(repeat b %) a))", "user": "5cc6b4bfe4b0ccb061962827"}, {"problem": 33, "code": "#(apply concat (for [x %1 :let [y (repeat %2 x)]] y) )", "user": "5cc7692ce4b0ccb061962837"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "5ccf2dc3e4b0ccb0619628c2"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5ccf3879e4b0ccb0619628c4"}, {"problem": 33, "code": "#(mapcat (partial repeat %2 ) %)", "user": "4ee897fe535d93acb0a66883"}, {"problem": 33, "code": "(fn [s x] (reduce (fn [r e] (loop [i x res r] (if (= i 0) res (recur (dec i) (conj res e))))) [] s))", "user": "5ccb0bbee4b0ccb06196287c"}, {"problem": 33, "code": "(fn [s n]\n   (reduce (fn [r item]\n             (concat r (repeat n item))\n             ) (vector) s))", "user": "5ccc2a03e4b0ccb06196288f"}, {"problem": 33, "code": "(fn [a b] (mapcat #(repeat b %) a))\n\n;; This works in latest version of CLoure, but 4Clojure uses v1.4.\n;; (fn [a b] (apply interleave (repeat b a)))", "user": "5cc1f975e4b0ccb0619627c8"}, {"problem": 33, "code": "(fn [xs n] (mapcat  #(repeat n %) xs))", "user": "5cd1f5dae4b0ccb0619628f7"}, {"problem": 33, "code": "#(mapcat (fn [input](repeat %2 input)) %1)", "user": "5ca2ca9fe4b048ec896c5b9c"}, {"problem": 33, "code": "(fn [coll n] (apply concat (map #(repeat n %) coll)))", "user": "5cc4b34de4b0ccb061962805"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5cbb0436e4b026601754b9cc"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5cce7de4e4b0ccb0619628b7"}, {"problem": 33, "code": "(fn [q n] (apply concat (map #(repeat n %) q)))", "user": "5ccf21c4e4b0ccb0619628c1"}, {"problem": 33, "code": "(fn replicateSequence [sequence quantity] (mapcat #(repeat quantity %) sequence))", "user": "5a99d28ee4b0d174b936c7b3"}, {"problem": 33, "code": "(fn mdup [sq n]\n  (if (empty? sq)\n    '()\n    (concat (repeat n (first sq))\n            (mdup (rest sq) n))))", "user": "56a2777be4b0542e1f8d14bf"}, {"problem": 33, "code": "(fn [c r] \n  (if (= 1 r)\n    c\n    (apply interleave (repeat r c))))", "user": "5c0eb93ce4b01240ff567146"}, {"problem": 33, "code": "(fn [sequ n]\n  (apply concat (map (fn [x] (repeat n x)) sequ)))", "user": "5be0b916e4b0ed4b8aab4c8f"}, {"problem": 33, "code": "(fn [seq c] \n  (reduce #(concat %1 (repeat c %2)) [] seq))", "user": "5642f094e4b08d4f616f5f1f"}, {"problem": 33, "code": "(fn [a b] (mapcat #(repeat b %) a))", "user": "5cd99bebe4b05ee0cb311707"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %)", "user": "5cd639b4e4b0ccb061962940"}, {"problem": 33, "code": "(fn [coll n]\n  (let [f (fn [acc elem] (concat acc (repeat n elem)))]\n    (reduce f '() coll)))", "user": "50eb4c32e4b0346a3e988cbf"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5cdd934ce4b05ee0cb311761"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "5cdfe2aee4b0a17bb84e2b04"}, {"problem": 33, "code": "(fn [xs n]\n  (->> xs\n       (map #(repeat n %))\n       (apply concat)))", "user": "5ce077e9e4b0a17bb84e2b0c"}, {"problem": 33, "code": "(fn [xs n]\n  (reduce #(into %1 (take n (repeat %2))) [] xs))", "user": "5ce05561e4b0a17bb84e2b08"}, {"problem": 33, "code": "(fn [c n](mapcat #(repeat n %)c))", "user": "5cd4e1b2e4b0ccb061962927"}, {"problem": 33, "code": "(fn [col n]\n  (mapcat #(repeat n %) col))", "user": "5cdda90ce4b05ee0cb311766"}, {"problem": 33, "code": "(fn[vs n]\n\t(mapcat #(repeat n %) vs)  \n)", "user": "5ce41d1be4b0a17bb84e2b50"}, {"problem": 33, "code": "(fn\n  [xs n]\n  (reduce (fn [ys y] (concat ys (repeat n y))) [] xs))", "user": "5cdc08a2e4b05ee0cb31173a"}, {"problem": 33, "code": "(fn [x, r]\n  (reduce (fn [agg e] \n            (loop [a agg, ir r]\n              (if (= ir 0)\n                a\n                (recur (conj a e) (- ir 1))\n              ))) [] x)\n)", "user": "5cd1fd2fe4b0ccb0619628f8"}, {"problem": 33, "code": "#(if (> %2 1) (apply interleave (take %2 (repeat %))) %)", "user": "5ce3e239e4b0a17bb84e2b46"}, {"problem": 33, "code": "(fn replicate-in-coll [coll n] (mapcat #(repeat n %) coll))", "user": "5ce69c4ae4b0a17bb84e2b8b"}, {"problem": 33, "code": "(fn [col n] (mapcat #(repeat n %) col))", "user": "5ce2b15fe4b0a17bb84e2b2c"}, {"problem": 33, "code": "#(reduce (fn [acc x] (apply conj acc (repeat %2 x))) [] %1)", "user": "5ce78776e4b0a17bb84e2ba2"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5ce56455e4b0a17bb84e2b71"}, {"problem": 33, "code": "(fn [coll x] (mapcat #(repeat x %) coll))", "user": "5ce52271e4b0a17bb84e2b69"}, {"problem": 33, "code": "(fn[out xs n](reduce (fn[r x](concat r(for[i (range n)]x)))out xs))[]", "user": "5ce62d8ee4b0a17bb84e2b83"}, {"problem": 33, "code": "(fn [a b] (mapcat #(repeat b %1) a))", "user": "5ce44ee2e4b0a17bb84e2b57"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5baaae06e4b0a20761a23464"}, {"problem": 33, "code": "(fn repseq\n  ([s n] (repseq s n []))\n  ([s n acc] \n   (if (seq s)\n     (recur (rest s)\n            n\n            (concat acc (repeat n (first s))))\n     acc)))", "user": "5ce6f93be4b0a17bb84e2b99"}, {"problem": 33, "code": "(fn [seq n]\n  (loop [s '() i 0]\n    (if (< i (count seq))\n      (recur \n        (concat s (repeat n (nth seq i))) \n        (inc i)\n      ) \n      s\n    )\n  )\n)", "user": "5cbdc591e4b026601754ba00"}, {"problem": 33, "code": "(fn [s n] (mapcat (partial repeat n) s))", "user": "5cf115eee4b0aaa82f112a08"}, {"problem": 33, "code": "(comp reverse (fn [x y] (reduce #(concat (take y (repeat %2)) %1) nil x)))", "user": "592bb806e4b072a2710fcf46"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "5ce97826e4b0a17bb84e2bc0"}, {"problem": 33, "code": "(fn [x n]\n   (loop [y (first x) z (next x) r `()]\n      (if (nil? y)\n        r\n\t(recur (first z) (next z) (concat r (repeat n y))))))", "user": "5cee4bc9e4b0aaa82f1129dc"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5cf1d9e3e4b0aaa82f112a18"}, {"problem": 33, "code": "#(mapcat identity (map (fn [x] (repeat %2 x)) %1) )", "user": "5c665311e4b0fca0c16226a7"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "53d612cbe4b0e771c3025452"}, {"problem": 33, "code": "(fn [inseq replicator] (reduce concat (map #(take replicator (repeat %1)) inseq)))", "user": "5bf9d9b7e4b0bdcf453d15c4"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5cebafbbe4b0a17bb84e2be6"}, {"problem": 33, "code": "#(apply concat (reduce (fn [x y] (conj x (repeat %2 y)) ) [] %1))", "user": "5cf62f9be4b087f62be35aa8"}, {"problem": 33, "code": "#(mapcat (fn [k]\n            (repeat %2 k)) %1)", "user": "5ce36e02e4b0a17bb84e2b3e"}, {"problem": 33, "code": "(fn [coll n] (reduce #(concat % (repeat n %2)) '() coll))", "user": "5cf5775ce4b087f62be35a98"}, {"problem": 33, "code": "(fn\n  [coll d]\n  (seq\n   (reduce\n    (fn [l i] (apply (partial conj l) (take d (repeat i))))\n    [] coll)))", "user": "5c3440fee4b0d62ef62d9f50"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5b9ae606e4b0c0b3ffbd4af2"}, {"problem": 33, "code": "(fn foo [x cnt]\n  (apply concat (map #(repeat cnt %1) x)))", "user": "5cece5a2e4b0a17bb84e2bfb"}, {"problem": 33, "code": "(fn [xs n] (reduce (fn [acc x] (concat acc (repeat n x))) [] xs))", "user": "5cf4094be4b0aaa82f112a35"}, {"problem": 33, "code": "(fn [s n]\n  (reduce (fn [acc e] (apply conj acc (repeat n e))) [] s)\n  )", "user": "5cfd5a93e4b0cc9c91588168"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5bcf95ace4b0e9689409ee2e"}, {"problem": 33, "code": "(fn [col n]\n  (mapcat #(repeat n %) col))", "user": "5cf935f4e4b0b71b1d808a8f"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5cf62ecce4b087f62be35aa7"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce #(concat %1 (replicate n %2)) () coll))", "user": "5cf863c4e4b0b71b1d808a80"}, {"problem": 33, "code": "#(mapcat ( partial repeat %2) %)", "user": "5ce5b43be4b0a17bb84e2b7a"}, {"problem": 33, "code": "(fn f [s n]\n  (let [f*\n        (fn [acc s*]\n          (concat acc (repeat n s*)))]\n    (reduce f* [] s)))", "user": "5cfa344de4b0cc9c9158813c"}, {"problem": 33, "code": "(fn [coll n] (apply concat (map #(repeat n %) coll)))", "user": "5cec2b79e4b0a17bb84e2bf4"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5cee521ce4b0aaa82f1129dd"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5cfeacb7e4b0cc9c9158817d"}, {"problem": 33, "code": "#(loop [x %1 y %2 res [] count %2] (if (empty? x)\n                                                  (mapcat identity res)\n                                                  (recur (rest x) (dec y) (conj res (repeat count (first x))) count)\n                                           ))", "user": "5cf72682e4b0b71b1d808a68"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5ceedd7ae4b0aaa82f1129e4"}, {"problem": 33, "code": "(fn [coll n] (loop [i 0 result []]\n  (if (= i (count coll))\n    (seq result)\n    (recur (inc i)\n           (loop [j 0 result2 result]\n             (if (= j n)\n               result2\n               (recur (inc j) (conj result2 (get coll i)))))))))", "user": "5d03944de4b0cc9c915881c5"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "5cf68090e4b0b71b1d808a59"}, {"problem": 33, "code": "#(reduce into [] (for [x %1] (repeat %2 x)))", "user": "5d083205e4b0cc9c91588203"}, {"problem": 33, "code": "(fn duplicator [col, times]\n  (loop [col col, result []]\n    (if (empty? col)\n      result\n      (recur (rest col) (concat result (repeat times (first col)))))))", "user": "5d0859fbe4b0cc9c91588208"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "5d03977ee4b0cc9c915881c7"}, {"problem": 33, "code": "(fn [elements times] (mapcat #(repeat times %) elements))", "user": "5d09dffbe4b0cc9c9158821c"}, {"problem": 33, "code": "(fn [my-seq my-rep] (reduce concat (map #(repeat my-rep %) my-seq)))", "user": "5d0815b3e4b0cc9c91588201"}, {"problem": 33, "code": "(fn my-replicate [lst n]\n  (loop \n    [todo lst ret []]\n    (if (empty? todo) \n      ret\n      (recur\n        (rest todo)\n        (concat ret (repeat n (first todo)))\n      )\n    )\n  )\n)", "user": "5d0aab50e4b0cc9c91588220"}, {"problem": 33, "code": "(fn [col n]\n  (reduce into [] (map #(take n (repeat %)) col)))", "user": "5d06499ae4b0cc9c915881ec"}, {"problem": 33, "code": "(fn replicate [s n]\n  (->>\n    s\n    (reduce\n      (fn [acc curr]\n        (apply conj acc (repeat n curr)))\n      [])\n    seq))", "user": "5d0eed51e4b0cc9c91588262"}, {"problem": 33, "code": "(fn [s n] (apply concat (map #(repeat n %) s)))", "user": "59ff4ba2e4b01bb0ae8afd1d"}, {"problem": 33, "code": "#(if(= %2 1) %1\n   (apply interleave (take %2 (repeat %1))))", "user": "5d02fe44e4b0cc9c915881c0"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)\n;#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "user": "5cfee28de4b0cc9c91588185"}, {"problem": 33, "code": "(fn [s n] (reduce #(concat %1 (repeat n %2)) '() s))", "user": "5d0e311de4b0cc9c91588251"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5b684a0de4b0c6492753e774"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5d05fdece4b0cc9c915881e8"}, {"problem": 33, "code": "(fn [xs t] (reduce (fn [acc val] (into acc (repeat t val))) [] xs))", "user": "5c87c79be4b048ec896c591b"}, {"problem": 33, "code": "(fn [coll num]\n  (letfn [(rep-add [n sugar coll]\n            (loop [i 0 result coll]\n              (if (= n i) result\n                  (recur (inc i) (cons sugar result)))))]\n    (loop [acc '() rem coll]\n      (if (nil? (seq rem)) (reverse acc)\n          (recur (rep-add num (first rem) acc) (rest rem))))))", "user": "5d126728e4b02c15ef02199a"}, {"problem": 33, "code": "(fn replicate-seq\n  [aseq n]\n  (reduce (fn [out x]\n            (concat out (repeat n x))) [] aseq))", "user": "5d110abee4b02c15ef021983"}, {"problem": 33, "code": "(fn popl [coll times]\n (mapcat #(repeat times %) coll))", "user": "5a23503fe4b0ff51aa4b32d6"}, {"problem": 33, "code": "(fn [coll x] (mapcat (fn [input] (repeat x input)) coll))", "user": "5d1380cbe4b0902706380dba"}, {"problem": 33, "code": "(fn [x y]\n  (mapcat #(repeat y %) x))", "user": "5d148581e4b0902706380dc6"}, {"problem": 33, "code": "#(apply concat (for [n %1] (repeat %2 n)))", "user": "5d10c1a8e4b04b4faecf4449"}, {"problem": 33, "code": "(fn rep [xs n] (apply concat (map (partial repeat n) xs)))", "user": "5a08f951e4b01bb0ae8afdfd"}, {"problem": 33, "code": "(fn dupe2 [input_seq n]\n  (let [tmp (for [x (seq input_seq)] (repeat n x))]\n    (loop [result [] t tmp]\n      (if (nil? (first t))\n        result\n        (recur (concat result (first t) ) (rest t))))))", "user": "524a7c1ae4b05ef8e38e64ac"}, {"problem": 33, "code": "(fn [x n] (mapcat #(repeat n %) x))", "user": "5d1bbef0e4b02ea6f0fb6984"}, {"problem": 33, "code": "(fn\n  [s n]\n  (reduce (fn [r i]\n            (concat r (repeat n i)))\n          []\n          s))", "user": "570c8ac3e4b0b0fb43fd06ca"}, {"problem": 33, "code": "(fn [xs n] (reverse (reduce into '() (map #(repeat n %) xs))))", "user": "4f925791e4b0dcca54ed6cac"}, {"problem": 33, "code": "#(apply concat (map (fn [input](repeat %2 input)) %1))", "user": "5d1de7b2e4b02ea6f0fb69ad"}, {"problem": 33, "code": "(fn [s n] (reduce #(apply conj (conj (repeat n %2) %1)) '() (reverse s)))", "user": "5d1e19c4e4b02ea6f0fb69af"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5d2201b8e4b02ea6f0fb69ed"}, {"problem": 33, "code": "(fn [col x]\n   (let [result []]\n     (apply concat\n       (apply concat\n        (map\n          #(conj result (repeat x %))\n          col)))))", "user": "5ccf99fbe4b0ccb0619628c8"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "5d1b59abe4b02ea6f0fb697e"}, {"problem": 33, "code": "(fn [coll n] (reduce (fn [acc cur] (concat acc (repeat n cur))) '() coll))", "user": "5c59b836e4b01df32ab73263"}, {"problem": 33, "code": "(fn [s n]\n  (->> (map (partial repeat n) s) (apply concat)))", "user": "5d236215e4b02ea6f0fb6a09"}, {"problem": 33, "code": "(fn [sq n] (reduce (fn [coll a] (apply conj coll (repeat n a))) [] sq))\n\n;; (fn [sq n] (mapcat (fn [a] (repeat n a)) sq))\n;; (fn [sq n] (mapcat (partial repeat n) sq))", "user": "5d046f7ce4b0cc9c915881d5"}, {"problem": 33, "code": "(fn\n  [coll times]\n   (mapcat #(take times (repeat %)) coll))", "user": "5d1c14cde4b02ea6f0fb698a"}, {"problem": 33, "code": "(fn seq-repl [liste anzahl]\n  (loop [input liste\n         output []\n         x anzahl]\n    (if (empty? input)\n      output\n      (if (zero? x)\n        (recur (rest input) output anzahl)\n        (recur input (conj output (first input)) (dec x))))))", "user": "5d132412e4b02c15ef0219a6"}, {"problem": 33, "code": "(fn rep ([s num] (if (= 1 num) s (apply interleave (take num (repeat s))))))", "user": "5d1b2a1ee4b02ea6f0fb6979"}, {"problem": 33, "code": "#(reduce (fn [result e]\n            (into result (repeat %2 e)))\n          []\n          %1)", "user": "5d1be50ce4b02ea6f0fb6986"}, {"problem": 33, "code": "(fn repseq [coll n]\n  (mapcat\n    #(take n (iterate identity %))\n    coll))", "user": "5d24e49be4b02ea6f0fb6a2a"}, {"problem": 33, "code": "(fn repseq [coll n]\n (mapcat\n   #(take n (iterate identity %))\n   coll))", "user": "5d1cf523e4b02ea6f0fb6994"}, {"problem": 33, "code": "(fn [ls x]\n  (loop [cnt 1\n         ls ls\n         res []]\n    (if (empty? ls)\n      res\n      (recur \n       (if (= cnt x) 1 (inc cnt))\n       (if (= cnt x) (rest ls) ls)\n       (conj res (first ls))))))", "user": "5d125d63e4b02c15ef021999"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5d272077e4b092dab7f59c64"}, {"problem": 33, "code": "(fn repseq [coll n]\n (mapcat\n   #(take n (iterate identity %))\n   coll))", "user": "5cfabf53e4b0cc9c91588148"}, {"problem": 33, "code": "(fn [s rep] (apply concat (map #(repeat rep %) s)))", "user": "5d247902e4b02ea6f0fb6a24"}, {"problem": 33, "code": ";(fn [coll num-rep]\n;  (reduce #(into %1 (repeat num-rep %2)) [] coll))\n(fn [coll num-rep]\n   (mapcat #(repeat num-rep %)coll))", "user": "5d0beecee4b0cc9c91588239"}, {"problem": 33, "code": "(fn [s n] (mapcat (fn [i] (repeatedly n #(identity i))) s))", "user": "5d138119e4b0902706380dbb"}, {"problem": 33, "code": "#(mapcat (fn [input](repeat %2 input)) %1)", "user": "5d267c11e4b02ea6f0fb6a41"}, {"problem": 33, "code": "(fn replicato [col n]\n  (loop [cur col\n         acc (transient [])\n         cnt 1]\n    (cond\n     (not (seq cur)) (persistent! acc)\n     (= cnt n) (recur (rest cur) (conj! acc (first cur)) 1)\n     :else (recur cur (conj! acc (first cur)) (inc cnt)))))", "user": "5d231255e4b02ea6f0fb69fe"}, {"problem": 33, "code": "(fn f [vec repeat_number]\n  (mapcat #(repeat repeat_number %) vec)\n)", "user": "5bc2df19e4b07a9b28b10038"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "58dde189e4b0a4d5acaab6dd"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5d27da09e4b092dab7f59c75"}, {"problem": 33, "code": "(fn [acc x]\n  (let [f* \n        (fn [a b] \n          (concat a (repeat x b)))]\n  (reduce f* [] acc)))", "user": "5d13f783e4b0902706380dc1"}, {"problem": 33, "code": "#(loop [col %1 times %2 rt []]\n   (if(empty? col)\n     rt\n     (recur (rest col) times (concat rt (repeat times (first col))))\n     )\n   )", "user": "5d270111e4b092dab7f59c62"}, {"problem": 33, "code": "(fn [arr x] (mapcat #(repeat x %) arr))", "user": "5d28222ee4b092dab7f59c7a"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5d2bfb68e4b01671435dbc86"}, {"problem": 33, "code": "(fn [sqn n]\n  (mapcat #(repeat n %) sqn))", "user": "5cf895efe4b0b71b1d808a85"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %)", "user": "5d28b684e4b092dab7f59c83"}, {"problem": 33, "code": "(fn [a b] (apply concat (map #(repeat b %) a)))", "user": "5d2ca236e4b01671435dbc94"}, {"problem": 33, "code": "(fn [a b] (reduce #(concat %1 (take b (repeat %2))) []  a))", "user": "5aa1e0f1e4b0d174b936c84e"}, {"problem": 33, "code": "(fn [col n]\n  (apply concat \n    (apply \n      map\n      #(concat %&)\n      (repeat n col))))", "user": "5b99554ae4b0c0b3ffbd4ace"}, {"problem": 33, "code": "(fn replicate-times [vect times]\n  (mapcat #(repeat times %) vect))", "user": "5b8162d0e4b047b03b20378b"}, {"problem": 33, "code": "(fn [col vnum] ((fn dup [oldC newC] (if (= (first oldC) nil) newC (dup (rest oldC) ((fn vdup [elm vnm nuC] (if (= vnm 0) nuC (vdup elm (- vnm 1) (cons elm nuC)))) (first oldC) vnum newC)))) (reverse col) '()))\n\n;(fn [col vnum]\n;  ((fn dup [oldC newC]\n;     (if\n;       (= (first oldC) nil)\n;       (dup (rest oldC) ((fn vdup [elm vnm nuC] (if (= vnm 0) nuC (vdup elm (- vnm 1) (cons elm nuC)))) (first oldC) vnum newC))))\n;   (reverse col) '()))", "user": "5d1cd478e4b02ea6f0fb6991"}, {"problem": 33, "code": "(fn [sequence n]\n   (->> sequence\n       (mapcat #(repeat n %))))", "user": "5d25abc9e4b02ea6f0fb6a37"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5d301c95e4b01671435dbcca"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "5d0e9931e4b0cc9c91588258"}, {"problem": 33, "code": "(fn [coll times] (mapcat #(repeat times %) coll))", "user": "54b42ea4e4b05787c3b1638b"}, {"problem": 33, "code": "(fn dupe [coll n]\n    ((fn dupe- [coll r]\n       (when-let [s (seq coll)]\n         ;; dec r unless r is zero\n         (lazy-seq (cons (first s) (if (= r 1)\n                                     (dupe- (rest s) n)\n                                     (dupe- s (dec r)))))))\n     coll n))", "user": "5bb25684e4b0a20761a2350d"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "5d321852e4b01671435dbce8"}, {"problem": 33, "code": "(fn [coll n] (apply concat\n                (map (fn [elem]\n                       (loop [pack () i 0]\n                         (if (< i n)\n                           (recur (conj pack elem) (inc i))\n                           pack) )) coll)))", "user": "5d363543e4b01671435dbd20"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(take n (repeat %)) coll))", "user": "5d2e5065e4b01671435dbcae"}, {"problem": 33, "code": "(fn[collection times] ( reverse ( reduce (fn[coll n ] (into coll (repeat times n) )  ) () collection)  ))", "user": "5cf53196e4b087f62be35a94"}, {"problem": 33, "code": "(fn my-replicate [coll n]\n  (reduce #(into %1 (take n (repeat %2))) [] coll))", "user": "5d370811e4b01671435dbd2d"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "5d29c06be4b01671435dbc6b"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "5716d585e4b07c98581c3b03"}, {"problem": 33, "code": "(fn [a n] (reduce into [] (map #(take n (repeat %)) a)))", "user": "5d3ae729e4b01671435dbd5d"}, {"problem": 33, "code": "(fn dupseq [xs n]\n  (apply concat (map (partial replicate n) xs)))", "user": "598601f9e4b021a7a535fe79"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "58b997afe4b0888cdc949cd1"}, {"problem": 33, "code": "(fn [target times]\n  (if (= times 1)\n    target\n    (apply interleave (repeat times target))))", "user": "5d2c779be4b01671435dbc8d"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat #(repeat n %) s)\n  )", "user": "5d3fa930e4b05dd059a5435f"}, {"problem": 33, "code": "(fn [l n]\n  (apply concat (map (partial repeat n) l)))", "user": "596fb563e4b01722bebd4c55"}, {"problem": 33, "code": "#(mapcat (fn [xs] (repeat %2 xs)) %1)", "user": "5d404586e4b05dd059a54363"}, {"problem": 33, "code": "#(reduce (fn [acc x]\n    (concat acc (repeat %2 x)))\n    ()\n    %1)", "user": "5d4320fde4b07c84aa5ae690"}, {"problem": 33, "code": "(fn [c n]\n  (mapcat (fn [x] (take n (repeat x))) c))", "user": "5c30da5ae4b0d62ef62d9f23"}, {"problem": 33, "code": "#(apply mapcat vector (take %2 (repeat %1)))", "user": "5d45749be4b07c84aa5ae6a2"}, {"problem": 33, "code": "(fn  [coll n]\n  (->> coll\n       (map #(repeat n %))\n       (reduce concat)))", "user": "5d1d4ec6e4b02ea6f0fb699f"}, {"problem": 33, "code": "(fn [coll n]\n  (if (= n 1) coll  ; Workaround for https://clojure.atlassian.net/browse/CLJ-863\n    (apply interleave (repeat n coll))))", "user": "5146f343e4b04ef915e3731e"}, {"problem": 33, "code": "(fn [s n] (mapcat (partial repeat n) s))", "user": "5b4b8cd6e4b02d533a91bc9f"}, {"problem": 33, "code": "(fn [arr times] (apply concat (map #(take times (repeat %)) arr) ))", "user": "5cb41c40e4b026601754b911"}, {"problem": 33, "code": "(fn [sec repeticiones]\n  (let [repite (fn [elemento repeticiones]\n                  (->> elemento\n                    (vector)\n                    (cycle)\n                    (take repeticiones)\n                    (vec)))]\n   (mapcat #(repite % repeticiones) sec)))", "user": "5d0153f9e4b0cc9c915881aa"}, {"problem": 33, "code": "(fn [x y] (reduce #(concat %1 (repeat y %2)) '() x))", "user": "5d465adae4b07c84aa5ae6a9"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "5d46fbc6e4b07c84aa5ae6af"}, {"problem": 33, "code": "(fn [l n]\n  (apply concat \n   (map #(repeat n %1) l)))", "user": "5d439775e4b07c84aa5ae696"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "5d3f50d7e4b09d9322bc20a6"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5d4b2155e4b0776584bd6f28"}, {"problem": 33, "code": "(fn [What HowMany]\n    ;; \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u0432\u0442\u043e\u0440\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n    (let [RepeatItem\n        (fn [Where What HowMany]\n          (loop [n HowMany Ret (empty Where)]\n            (if (zero? n)\n              Ret\n              (recur (dec n) (conj Ret What ))\n            )\n          )\n        )\n      ]\n      \n      (loop [First (first What) Rest (rest What) Ret (empty What)]\n        (if (nil? First)\n          Ret\n          (recur (first Rest) (rest Rest) (into Ret (RepeatItem What First HowMany) ) )\n        )\n      )\n    )\n  )", "user": "5d4a6c6ce4b0776584bd6f22"}, {"problem": 33, "code": "(fn my-replicate [coll times] (mapcat (partial repeat times) coll))", "user": "5d45bd1de4b07c84aa5ae6a4"}, {"problem": 33, "code": "(fn [s n] (if (= n 1) s (apply interleave (repeat n s))))", "user": "5d0bb4fae4b0cc9c91588237"}, {"problem": 33, "code": "#(apply concat (map (partial (fn [n x](take n (repeat x))) %2) %1))", "user": "5d47f4dbe4b07c84aa5ae6b5"}, {"problem": 33, "code": "(fn [xs n]\n  (apply concat (map (fn [x] (repeat n x)) xs)))", "user": "5d431c77e4b07c84aa5ae68f"}, {"problem": 33, "code": "#(mapcat (fn [input](repeat %2 input)) %1)", "user": "5d4eb9c4e4b0776584bd6f48"}, {"problem": 33, "code": "(fn f [s n]\n  (let [f*\n        (fn [acc s*]\n          (concat acc (repeat n s*)))]\n    (reduce f* [] s)))", "user": "5d4c4de9e4b0776584bd6f2f"}, {"problem": 33, "code": "#(reduce (fn [acc x] (concat acc (repeat %2 x))) [] %1)", "user": "5d41ac35e4b05dd059a54375"}, {"problem": 33, "code": "(fn [coll n] (apply concat (map #(repeat n %) coll)))", "user": "56bff105e4b060a8e693e3a4"}, {"problem": 33, "code": "(fn rep [ls cnt]\n  (mapcat (fn [x]\n            (take cnt (repeat x)))\n       \tls))", "user": "5d48884ee4b07c84aa5ae6bb"}, {"problem": 33, "code": "(fn rep [coll multiplier]\n  (reduce #(concat %1 (repeat multiplier %2))\n          ()\n          coll))", "user": "5d48e6d3e4b0776584bd6f15"}, {"problem": 33, "code": "(fn replicate-seq [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5d40f41ae4b05dd059a5436d"}, {"problem": 33, "code": "(fn [inseq n]\n    (loop [out []\n           rst inseq]\n      (cond\n        (empty? rst) out\n        :else (recur (into out (repeat n (first rst))) (rest rst)))\n))", "user": "5ab07d63e4b073f1774425af"}, {"problem": 33, "code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "user": "5d51377be4b0776584bd6f5d"}, {"problem": 33, "code": "(fn [s c]\n  (loop [counter (dec (count s)) result []]\n      (if (>= counter 0)\n        (do \n          (recur \n            (dec counter)\n            (concat (repeat c (get s counter)) result)))\n        result)))", "user": "5d40442ee4b05dd059a54362"}, {"problem": 33, "code": "(fn [s n]\n    (for [x s\n          y (range n)]\n      x))", "user": "5ad76df9e4b0ea6055cfac18"}, {"problem": 33, "code": "(fn [coll n] (reduce (fn [acc newval] (concat acc (repeat n newval))) [] coll))", "user": "5d4f21f3e4b0776584bd6f4e"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5259451ce4b0cb4875a45cd7"}, {"problem": 33, "code": "(fn repl [xs n]\n  (->>\n    xs\n\t(map #(repeat n %))\n\t(reduce concat)\n  )\n)", "user": "5d4c83b7e4b0776584bd6f34"}, {"problem": 33, "code": "(fn same\n              ([lis times]\n               (same lis times [])\n               )\n              ([lis times target]\n               (if (empty? lis)\n                 target\n                 (same (rest lis) times (concat target (repeat times (first lis))))\n                 )\n               )\n              )", "user": "5d4cf3e9e4b0776584bd6f38"}, {"problem": 33, "code": "(fn [s n] \n        (mapcat #(repeat n %) s))", "user": "559ba500e4b066d22e731f58"}, {"problem": 33, "code": "#(vec\n       (reduce\n         (fn\n           [acc el](concat acc (repeat %2 el)))\n         [] %1))", "user": "5bdc4a76e4b0ed4b8aab4c30"}, {"problem": 33, "code": "(fn replicate-elements2\n  [collection replicating-factor]\n  (reduce (fn [acc val] (into acc (repeat replicating-factor val))) [] collection))", "user": "5d42c88ae4b05dd059a5437e"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5bf06734e4b0a6d31fed2153"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce (fn [prev y]\n            (concat prev (repeat n y))\n          )\n          []\n          coll)\n)", "user": "5d07989ee4b0cc9c915881fb"}, {"problem": 33, "code": "(fn [coll factor]\n  (reduce #(concat %1 (repeat factor %2)) [] coll))", "user": "5d590500e4b02ba5928a6824"}, {"problem": 33, "code": "(fn [xs n]\n  (reduce \n   (fn [m x]\n     (apply conj m (repeat n x)))\n   []\n   xs)\n )", "user": "5d5e0259e4b0c9e5857d4fef"}, {"problem": 33, "code": "(fn [seqn n]\n                  (mapcat #(repeat n %) seqn))", "user": "5d4df658e4b0776584bd6f41"}, {"problem": 33, "code": "(fn [coll n] (mapcat (partial repeat n) coll))", "user": "5d5166d9e4b0776584bd6f5e"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5d5e9f45e4b0c9e5857d4ff5"}, {"problem": 33, "code": "(fn [x n]\n  (reduce (fn [c v]\n            (concat c (repeat n v))\n            )\n          [] x))", "user": "5d6042f2e4b0c9e5857d5006"}, {"problem": 33, "code": "(fn [xs n] (mapcat (partial repeat n) xs))", "user": "5d609ddde4b0c9e5857d5008"}, {"problem": 33, "code": "(fn [coll n] \n  (mapcat #(repeat n %) coll))", "user": "596a66cde4b069c0a1a19803"}, {"problem": 33, "code": "(fn [x y]\n    (apply list (reduce (fn [a b] (apply conj a (take y (repeat b)))) [] x)))", "user": "5d52bf29e4b0776584bd6f69"}, {"problem": 33, "code": "(fn replicate-seq\n  [s n]\n  (apply concat\n         (map (partial repeat n) s)))", "user": "5d53a59ae4b0776584bd6f72"}, {"problem": 33, "code": "#(reduce (fn [acc itm]  (apply (partial conj acc) (repeat  %2 itm))) [] %1)", "user": "5d5eb086e4b0c9e5857d4ff7"}, {"problem": 33, "code": "(fn f [coll n] (apply concat (map #(for [_ (range n)] %) coll)))", "user": "5d629ed9e4b0c9e5857d501d"}, {"problem": 33, "code": "#(loop [c %1 s [] n %2] (if (empty? c) s (recur (rest c) (into s (repeat n (first c))) n)))", "user": "5d62ce13e4b0c9e5857d501f"}, {"problem": 33, "code": "(fn [x n]\n  (reverse (reduce into (map #(repeat n %) x)))\n  )", "user": "5d641841e4b0c9e5857d502e"}, {"problem": 33, "code": "(fn [list n] (mapcat #(repeat n %) list))", "user": "5d667e2be4b0db5d338d15e8"}, {"problem": 33, "code": "#(mapcat (fn [x] (take %2 (repeat x))) %1)", "user": "5d651553e4b0db5d338d15ca"}, {"problem": 33, "code": "#(reduce (fn [x y] (concat x (for [i (range %2)] y))) [] %1)", "user": "5d63b06be4b0c9e5857d5025"}, {"problem": 33, "code": "(fn [x n]\n  (reverse\n   (reduce #(into %1 (take n (repeat %2)))\n           '()\n           x)))", "user": "5d5ef0bce4b0c9e5857d4ffb"}, {"problem": 33, "code": "(fn [ls n] (mapcat #(repeat n %) ls))", "user": "5d672bd7e4b0db5d338d15f1"}, {"problem": 33, "code": "(fn [malist n]\n  (reverse (reduce #(into %1 \n                 (loop [element %2\n                        liste '()]\n                                  (if (= (count liste) n)\n                                    liste\n                                    (recur element (conj liste element)) \n                                    )\n                   )\n                        ) '() malist)\n                        ))\n\n\n\n\n\n;;(defn to [liste n]\n ;; (mapcat \n;;#(take n (repeat %))\n ;;  liste)\n ;; )", "user": "5a7f77fae4b00b71e582a041"}, {"problem": 33, "code": "(fn [lst times]\n  (reduce (fn [res a]\n            (concat res (loop [r []\n                   \t\tt times]\n              \t\t(if (= t 0)\n                \t\tr\n                \t\t(recur (conj r a) (dec t))))))\n          []\n          lst))", "user": "5d64013ce4b0c9e5857d502d"}, {"problem": 33, "code": "(fn [xs n] (reduce (fn [ys x] (concat ys (repeat n x))) '() xs))", "user": "5d68fc2fe4b0db5d338d1606"}, {"problem": 33, "code": "#(loop [it %1\n         result []]\n    (let [head (first it)]\n      (if (nil? head)\n        result\n        (recur (rest it) (concat result (loop [counter %2\n                                               res []]\n                                          (if (= counter 0)\n                                            res\n                                            (recur (dec counter) (conj res head)))))))))", "user": "5d5c2730e4b09db18d4482ea"}, {"problem": 33, "code": "(fn replicate [input times]\n  (->> input\n   (map #(take times (repeat %)))\n   (apply concat)))", "user": "5d68f5e6e4b0db5d338d1605"}, {"problem": 33, "code": "(fn [x, n] (apply concat(map #(vec(repeat n %)) x)))", "user": "5d6523ace4b0db5d338d15cd"}, {"problem": 33, "code": ";; getting around a bug in old implementation of\n;; interleave...\n(fn [x n] (if (> n 1)\n              (apply interleave (repeat n x))\n              x))", "user": "5d64ecb2e4b0c9e5857d5036"}, {"problem": 33, "code": "(fn [x n-times] (mapcat #(repeat n-times %1) x))", "user": "5d6537fce4b0db5d338d15cf"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5d66aea7e4b0db5d338d15ec"}, {"problem": 33, "code": "#(reduce \n  (fn [r n]\n      (apply conj r (repeat %2 n))\n    ) [] %1\n  )", "user": "5d5b2678e4b06a698e928ee2"}, {"problem": 33, "code": "(fn [coll n]\n  (apply concat (reduce (fn [acc item]\n                          (conj acc (repeat n item)))\n                        []\n                        coll)))", "user": "5d6f063de4b04d129b00f2d1"}, {"problem": 33, "code": "(fn [seq x] (reduce #(concat %1 (repeat x %2)) [] seq))", "user": "5d6d2172e4b04d129b00f2b9"}, {"problem": 33, "code": "#(reduce\n (fn [xs x]\n   (concat xs ( repeat %2 x ) )\n )\n () %1)", "user": "5d5c6675e4b09db18d4482ec"}, {"problem": 33, "code": "(fn [coll cnt] (mapcat #(repeat cnt %) coll))", "user": "524a9556e4b05ef8e38e64b1"}, {"problem": 33, "code": "(fn [c n] (reduce #(concat %1 (repeat n %2)) [] c))", "user": "5d764e52e4b02e6b30c93524"}, {"problem": 33, "code": "(fn [sq x] (mapcat #(repeat x %) sq))", "user": "5a7de7a3e4b03baeef927702"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5d6e5b53e4b04d129b00f2c6"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5d6691cee4b0db5d338d15e9"}, {"problem": 33, "code": "(fn\n  [coll times]\n  (if (= times 1) coll\n                  (apply interleave (repeat times coll))))", "user": "5d6d2e11e4b04d129b00f2ba"}, {"problem": 33, "code": "(fn [coll n]\n  (if (= n 1)\n    coll\n  \t(apply interleave (take n (repeat coll)))))", "user": "52860baae4b0239c8a67ae09"}, {"problem": 33, "code": "#(mapcat (partial replicate %2) %1)", "user": "5d7bd68ee4b02e6b30c93554"}, {"problem": 33, "code": "(fn [s n] (reduce concat (map #(repeat n %) s) ))", "user": "5d6fae1ee4b04d129b00f2d4"}, {"problem": 33, "code": "(fn\n  [coll n]\n  (mapcat (partial repeat n) coll))", "user": "5d7b90ede4b02e6b30c93552"}, {"problem": 33, "code": "(fn [s n]\n  (reduce concat (map #(repeat n %) s)))", "user": "5d6f0533e4b04d129b00f2d0"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "5d7d17ece4b02e6b30c93558"}, {"problem": 33, "code": "(fn\n\t[coll quantidade]\n\t(reduce concat {}\n\t\t\t\t\t(map (fn [item] (take quantidade (repeat item))) coll))\n\t)", "user": "5d797deee4b02e6b30c93541"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5d1609f9e4b0902706380dd9"}, {"problem": 33, "code": "(fn [x y] (loop [remaining x out []] (if (empty? remaining) out (recur (rest remaining) (concat out (take y (cycle [(first remaining)])))))))", "user": "5d7158f3e4b04d129b00f2e1"}, {"problem": 33, "code": "(fn [sequence n]\n  (reduce\n    (fn [all next]\n      (concat all (take n (repeat next)))\n    )\n    ()\n    sequence\n  )\n)", "user": "5d7faa52e4b0915913b1d365"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "5d6febe6e4b04d129b00f2d5"}, {"problem": 33, "code": "(fn [sequ times] (apply concat (map (fn [val] (repeat times val)) sequ)))", "user": "5d824225e4b0915913b1d37f"}, {"problem": 33, "code": "#(reduce (fn [xs x] (concat xs (repeat %2 x))) [] %1)", "user": "5d123457e4b02c15ef021996"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "5d7eaf5fe4b0492f5d910fc3"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5d6d4463e4b04d129b00f2bd"}, {"problem": 33, "code": "(fn repl [s n] \n  (reduce (fn [res si] (concat res (repeat n si))) () s))", "user": "5d81c244e4b0915913b1d37a"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "5d81eba4e4b0915913b1d37b"}, {"problem": 33, "code": "#(apply concat (map (fn [input] (repeat %2 input)) %1))", "user": "5d88a22de4b0915913b1d3ab"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "5d1231dde4b02c15ef021995"}, {"problem": 33, "code": "(fn repseq [elms, n]\n  \"returns sequence with each element repeated n times\"\n  (apply concat (map #(repeat n %) elms))\n)", "user": "5d828b7ee4b0915913b1d382"}, {"problem": 33, "code": "(fn [coll n] (mapcat (fn [x] (repeat n x)) coll))", "user": "5d63f1c2e4b0c9e5857d502b"}, {"problem": 33, "code": "(fn [coll reps]\n   (mapcat #(repeat reps %) coll))", "user": "5b19593ae4b03cfeda66ecb8"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5d84f5e6e4b0915913b1d38f"}, {"problem": 33, "code": "(fn rep [s n]\n   (mapcat #(repeat n %1) s))", "user": "5ce867fce4b0a17bb84e2baf"}, {"problem": 33, "code": "(fn [lst cnt] (mapcat #(repeat cnt %) lst))", "user": "5d88c6a3e4b0915913b1d3ad"}, {"problem": 33, "code": "(fn [c n] (reduce #(concat %1 (repeat n %2)) [] c))", "user": "5ab3db13e4b073f177442609"}, {"problem": 33, "code": "#(mapcat  (partial repeat %2) %)", "user": "5d917ef0e4b0915913b1d402"}, {"problem": 33, "code": "(fn repseq [xs, t]\n  (loop [new [] old xs]\n    (if (empty? old) \n      new\n      (recur (into new (repeat t (first old))) (rest old))\n      )))", "user": "5d88d820e4b0915913b1d3b1"}, {"problem": 33, "code": "(fn variable-replicator\n  ([arg quantity]\n   (variable-replicator arg quantity quantity []))\n  ([arg original quantity vr]\n   (if (empty? arg)\n     vr\n     (if (= quantity 1)\n       (variable-replicator (rest arg) original original (conj vr (first arg)))\n       (variable-replicator arg original (dec quantity) (conj vr (first arg)))))))", "user": "5d896a64e4b0915913b1d3b8"}, {"problem": 33, "code": "(fn [coll n] (apply (partial mapcat list) (repeat n coll)))", "user": "5d887d27e4b0915913b1d3a8"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "5d81b40ce4b0915913b1d379"}, {"problem": 33, "code": "(fn [lst rep]\n  (apply concat (map #(repeat rep %) lst)))", "user": "5d323149e4b01671435dbce9"}, {"problem": 33, "code": "#(mapcat (fn [x] (take %2 (repeat x))) %1)", "user": "5d915f01e4b0915913b1d401"}, {"problem": 33, "code": "(fn [s n] (mapcat (partial repeat n) s))", "user": "5d8b4960e4b0915913b1d3d3"}, {"problem": 33, "code": "(fn [coll n]\n    (mapcat #(repeat n %) coll))", "user": "5d9aeae5e4b0d3f9b434ad4a"}, {"problem": 33, "code": "(fn my-replicate-2 [col times] (reduce into [] (map #(repeat times %) col)))", "user": "5d80f328e4b0915913b1d372"}, {"problem": 33, "code": "(fn [lst cnt] (mapcat #(repeat cnt %) lst))", "user": "5d9c1226e4b0d3f9b434ad51"}, {"problem": 33, "code": "(fn [s n] (reduce #(apply conj %1 (repeat n %2) ) [] s))", "user": "5d9e7971e4b000c986472bc1"}, {"problem": 33, "code": "(fn [coll n] (mapcat (partial repeat n) coll))", "user": "5d97b602e4b0d3f9b434ad3a"}, {"problem": 33, "code": "(fn [s n] \n  (mapcat #(repeat n %) s))", "user": "5d8a832ce4b0915913b1d3ca"}, {"problem": 33, "code": "(fn replicate-seq [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5ccf125ce4b0ccb0619628c0"}, {"problem": 33, "code": "(fn replicate-seq\n  [xs reps]\n  (mapcat #(take reps (iterate identity %)) xs))", "user": "5d49ec5ee4b0776584bd6f1c"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat\n   #(take n (iterate identity %))\n   coll))", "user": "594fdfdce4b066ee0a44ae85"}, {"problem": 33, "code": "(fn [sequence repeat-n]\n  (loop [in sequence n repeat-n i 1 result []]\n    (if (empty? in)\n      result\n      (recur\n        (if (= n i) (rest in) in)\n        n\n        (if (= n i) 1 (inc i))\n        (conj result (first in))\n      )\n    )\n  )\n)", "user": "5d97b033e4b0d3f9b434ad39"}, {"problem": 33, "code": "(fn fun1 [myList n]\n  (reduce #(apply conj %1 (loop [i 0 list1 '()]\n                            (if (< i n) (recur (inc i) (conj list1 %2)) list1)\n                            )) '() (reverse myList)))", "user": "5da20e73e4b000c986472be1"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5da44d35e4b000c986472bf1"}, {"problem": 33, "code": "#(if (<= %2 1) %1 (apply interleave %1 (take (dec %2) (repeat %1))))", "user": "5d974b1de4b0d3f9b434ad36"}, {"problem": 33, "code": "(fn [coll n] (mapcat (fn [item] (take n (iterate identity item))) coll))", "user": "5d9c9446e4b0eb781811cdae"}, {"problem": 33, "code": "(fn [v r] (mapcat #(repeat r %) v))", "user": "5d7a748ce4b02e6b30c93547"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5da05bcce4b000c986472bd0"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5da8fa72e4b000c986472c2d"}, {"problem": 33, "code": "(fn [coll times] (apply concat (map #(take times (repeatedly (constantly %1))) coll) ) )", "user": "5da975b9e4b000c986472c32"}, {"problem": 33, "code": "(fn [coll n]\n  (->> (map #(repeat n %) coll)\n       (apply concat)))", "user": "56f9982ce4b07572ad1a88b8"}, {"problem": 33, "code": "#(apply concat (map (partial repeat %2) %1))", "user": "5daa1fc8e4b000c986472c3e"}, {"problem": 33, "code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "user": "5d99dc47e4b0d3f9b434ad42"}, {"problem": 33, "code": "(fn\n  [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5da7176ae4b000c986472c13"}, {"problem": 33, "code": "(fn replicate-seq [coll times]\n  (if (nil? (first coll)) \n      []\n      (concat (repeat times (first coll)) (replicate-seq (rest coll) times))))", "user": "568f2059e4b0dcc4269f40df"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "50ef77a4e4b0bdaecbb47d99"}, {"problem": 33, "code": "(fn [x y]\n  (apply concat (map #(repeat y %) x)))", "user": "5da760ebe4b000c986472c1a"}, {"problem": 33, "code": "#(mapcat (fn [v] (take %2 (repeat v))) %1)", "user": "5d6c3f91e4b04d129b00f2af"}, {"problem": 33, "code": "(fn [c n]\n  (mapcat #(repeat n %) c))", "user": "5cf6522be4b0b71b1d808a58"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5dac6272e4b000c986472c4c"}, {"problem": 33, "code": "(fn my-replicate\n  [v r]\n  (mapcat #(repeat r %) v))", "user": "5d9c8a85e4b0eb781811cdad"}, {"problem": 33, "code": "(fn fff[coll x](let[a (fn b[coll ret x](cond\n                                     (empty? coll) ret\n                                     :else (b (rest coll) (conj ret (repeat x (first coll))) x)))]\n             (apply list(apply concat (a coll [] x)))))", "user": "5dadf73ee4b0f8c104ccfc86"}, {"problem": 33, "code": "(fn [xs n] (apply (partial mapcat vector) (repeat n xs)))", "user": "5da71eaee4b000c986472c15"}, {"problem": 33, "code": "(fn [x y] (reduce concat (map #(take y (repeat %)) x)))", "user": "5daeb6bce4b0f8c104ccfc8b"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5d965c73e4b0d3f9b434ad33"}, {"problem": 33, "code": "#(if (< %2 2)\n   \t%1\n\t(apply interleave (repeat %2 %1)))", "user": "5dab11cde4b000c986472c45"}, {"problem": 33, "code": "(fn n-duplicator [xs n]\n  (reduce (fn [acc x]\n            (concat acc (repeat n x)))\n          []\n          xs))", "user": "5db0d470e4b0f8c104ccfc9e"}, {"problem": 33, "code": "#(reverse  (reduce (fn [x y] (into x (repeat %2 y))) '() %1))", "user": "5da98129e4b000c986472c33"}, {"problem": 33, "code": "(fn [lst n] (mapcat #(repeat n %) lst))", "user": "5d9475e4e4b0d3f9b434ad25"}, {"problem": 33, "code": "#(apply concat (map (fn [x] (repeat %2 x)) %1))", "user": "5d9475e9e4b0d3f9b434ad26"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "5d947bbbe4b0d3f9b434ad27"}, {"problem": 33, "code": "#(reduce (fn [acc n] \n           (apply conj acc \n                  (repeat %2 n))) [] %1)", "user": "5d7aa22ee4b02e6b30c9354e"}, {"problem": 33, "code": "(fn [coll n]\n  (if (= n 1)\n    coll\n    (apply interleave (repeat n coll))))", "user": "5da8b8ece4b000c986472c28"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "590b2d92e4b047aa04b199cf"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5593ff3de4b0c79f6e1db949"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "user": "5daed892e4b0f8c104ccfc8f"}, {"problem": 33, "code": "(fn exercise-33 [lst n]\n  (mapcat (fn [ch] (repeat n ch)) lst))", "user": "5d9515a9e4b0d3f9b434ad2c"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5d51884be4b0776584bd6f61"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5db1969be4b010eb3c36cd06"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5d94fdf9e4b0d3f9b434ad2b"}, {"problem": 33, "code": "#(reduce (fn\n            [acc curr]\n            (into acc (reduce (fn\n                                [acc2 _]\n                                (into acc2 (list curr))\n                                )\n                  [] (range %2))))\n          [] %1)", "user": "5db861bce4b010eb3c36cd4b"}, {"problem": 33, "code": "(fn [coll r]\n  (mapcat #(take r (repeat %)) coll))", "user": "5db6cc4ae4b010eb3c36cd3b"}, {"problem": 33, "code": "#(reduce into [] (map (partial repeat %2) %))", "user": "5dbd51cfe4b09f47823971bb"}, {"problem": 33, "code": "(fn [coll n]\n  (apply concat '()\n  \t(for [x coll]\n    \t(repeat n x))))", "user": "5db19599e4b010eb3c36cd05"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "59ea07c9e4b0249b72820756"}, {"problem": 33, "code": "(fn [seqz times]\n  (mapcat #(repeat times %) seqz))", "user": "5db9a6c3e4b010eb3c36cd56"}, {"problem": 33, "code": "#(reduce (fn [acc item] (apply conj acc (repeat %2 item))) [] %1)", "user": "5dc12b0ae4b0e59a23173d84"}, {"problem": 33, "code": "(fn [lst n]\n  (apply concat (map #(repeat n %) lst)))", "user": "5dbe63bde4b09f47823971c7"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5db7376fe4b010eb3c36cd43"}, {"problem": 33, "code": "#(reduce (fn [x y] (into x (repeat %2 y))) [] %1)", "user": "5d9e8e40e4b000c986472bc2"}, {"problem": 33, "code": "(fn replicate-sequence\n  [s n]\n  (reverse (reduce #(into %1 (take n (repeat %2)))\n           ()\n           s)))", "user": "5db1e852e4b010eb3c36cd0a"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5dbe27c3e4b09f47823971c4"}, {"problem": 33, "code": "(fn [c n] (\n                reduce (fn [a,b]  (concat a (take n (repeat b))))  [] c\n                       ))", "user": "5dbb5200e4b09f47823971a9"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(take n (repeat %)) coll))", "user": "5dc40814e4b02f9375f4e1ae"}, {"problem": 33, "code": "(fn replicate-x [elements n-times]\n  (if (empty? elements)\n    '()\n    (concat (take n-times (replicate n-times (first elements))) \n                  (replicate-x (rest elements) n-times))))", "user": "5dc4719ae4b02f9375f4e1b5"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "5da94ccfe4b000c986472c2f"}, {"problem": 33, "code": "(fn [listy, multiplier] (\n   reduce \n   (fn [a b] (into a (repeat multiplier b)))\n   []\n   listy\n))", "user": "5da71a00e4b000c986472c14"}, {"problem": 33, "code": "(fn [seq rep] (apply concat (map (fn [next] (repeat rep next)) seq)))", "user": "5d84545ee4b0915913b1d38b"}, {"problem": 33, "code": "(fn [seq n] (mapcat #(repeat n %) seq))", "user": "5db92996e4b010eb3c36cd50"}, {"problem": 33, "code": "(fn [v n] (mapcat (partial repeat n) v))", "user": "4fbb7010e4b081705acca2e7"}, {"problem": 33, "code": ";#(loop [ current %1  rep %2 counter 1 ret[]]\n  ;   (if (empty? current)\n  ;     ret\n  ;     (recur\n  ;       (if (>= counter rep) (rest current) current)\n  ;       rep\n  ;       (if (>= counter rep) 1 (+ counter 1))\n  ;       (conj ret (first current))\n  ;       )))\n  \n   #(mapcat (fn [x] (take %2 (repeat x))) %1)", "user": "5b044436e4b0cc2b61a3bd71"}, {"problem": 33, "code": "#(apply concat (map (partial repeat %2) %1))", "user": "5db5d09be4b010eb3c36cd31"}, {"problem": 33, "code": "(fn [s n] (reduce #(concat %1 (repeat n %2)) [] s))", "user": "5dc9ccf8e4b02f9375f4e1f1"}, {"problem": 33, "code": "(fn [s n]\n  (seq (reduce #(concat %1 (repeat n %2)) [] s)))", "user": "5dc6e7f9e4b02f9375f4e1ca"}, {"problem": 33, "code": "#(mapcat (fn [input](repeat %2 input)) %1)", "user": "5dca5e0ae4b02b31cc3da3af"}, {"problem": 33, "code": "(fn [xs n] (apply concat (map #(repeat n %) xs)))", "user": "5dc9d5c3e4b03836ba07d824"}, {"problem": 33, "code": "(fn [l n] (reduce concat\n                  (map #(repeat n %)\n                       l)))", "user": "5dcc0ee9e4b02b31cc3da3c2"}, {"problem": 33, "code": "(fn [coll times]\n  (reduce (fn [c v] (concat c (repeat times v))) [] coll))", "user": "5dc9c4f2e4b02f9375f4e1f0"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "5dc98501e4b02f9375f4e1e6"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5dc318cde4b02f700ae81835"}, {"problem": 33, "code": "(fn [sequen amount]\n  (apply concat (map (fn [elem] (repeat amount elem)) sequen)))", "user": "5dcd182ae4b0b296f82db5a9"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "59b1a1b2e4b0e1f4e384c8eb"}, {"problem": 33, "code": "(fn [col c] \n  (reduce (fn [r nxt] (apply conj r (repeat c nxt)) ) [] col)\n)", "user": "5dcfdf23e4b0948ae9d9ad43"}, {"problem": 33, "code": "(fn [input-seq n]\n   (reduce\n    (fn [output-sequence curr-element]\n      (concat output-sequence (repeat n curr-element)))\n    ()\n    input-seq))", "user": "5d8c8175e4b0915913b1d3e1"}, {"problem": 33, "code": "( fn [l x] (mapcat #(repeat x %1) l ))", "user": "53d63e6ce4b0e771c3025454"}, {"problem": 33, "code": "#(reduce (fn [new-coll coll]\n          (concat new-coll (repeat %2 coll)))\n        []\n        %1)", "user": "5dcb1e73e4b02b31cc3da3b6"}, {"problem": 33, "code": "(fn [arr n](mapcat #(repeat n %) arr))", "user": "5dd1fb19e4b0948ae9d9ad51"}, {"problem": 33, "code": "(fn [coll x]\n  (mapcat #(repeat x %1) coll))", "user": "5da306a3e4b000c986472be7"}, {"problem": 33, "code": "(fn [x n](apply concat (map #(repeat n %) x)))", "user": "5dcbd629e4b02b31cc3da3bd"}, {"problem": 33, "code": "#(loop [i 0 acc []]\n   (if (>= i (count %1))\n     acc\n     (recur\n      (+ 1 i)\n      (concat acc (replicate %2 (nth %1 i)))\n      )))", "user": "5dd44256e4b0948ae9d9ad69"}, {"problem": 33, "code": "(fn [val n]\n    (apply concat (reduce\n                  #(conj %1\n                         (take n (repeat %2)))\n                  []\n                  val)))", "user": "5da8e170e4b000c986472c29"}, {"problem": 33, "code": "#(reduce (fn [y,x] (into y (repeat %2 x))) [] %1)", "user": "5dd69c8ce4b0948ae9d9ad83"}, {"problem": 33, "code": "(fn duplicate-elements [coll rep]\n  (reduce concat '() (map (fn [e]\n                            (loop [res '()\n                                   index 0]\n                              (if (= index rep)\n                                res\n                                (recur (conj res e) (inc index))))\n                            ) coll))\n  )", "user": "5dd67c22e4b0948ae9d9ad80"}, {"problem": 33, "code": "(fn [x n] (reverse (reduce #(into %1 (repeat n %2)) '() x)))", "user": "5dd90651e4b0948ae9d9ad97"}, {"problem": 33, "code": "(fn [col n] (mapcat #(repeat n %) col))", "user": "5793931ee4b0e215f87e845c"}, {"problem": 33, "code": "(fn [x n]\n  (reduce concat (reduce concat (map #((fn [& x] (concat (repeat n x))) %) x))))", "user": "5dcc5e5ce4b02b31cc3da3c7"}, {"problem": 33, "code": "#(apply concat (map (partial repeat %2) %1))", "user": "5ddcf10ae4b0948ae9d9adbe"}, {"problem": 33, "code": "(fn [s n]\n  (reduce (fn [acc el]\n            (apply conj acc (repeat n el)))\n          []\n          s))", "user": "5ddb6151e4b0948ae9d9adb0"}, {"problem": 33, "code": "(fn f [s n]\n  (let [f*\n        (fn [acc s*]\n          (concat acc (repeat n s*)))]\n    (reduce f* [] s)))", "user": "5dddc292e4b0948ae9d9adcb"}, {"problem": 33, "code": "(fn [s, n] (mapcat #(repeat n %) s))", "user": "5dd60c58e4b0948ae9d9ad7c"}, {"problem": 33, "code": "#(apply concat (apply map vector (repeat %2 %1) ))", "user": "5dde6251e4b0948ae9d9add3"}, {"problem": 33, "code": "(fn thirtythree [seq, n]\n  (apply concat\n         (#(map (fn [x]\n                (repeat n x))  \n                  %)\n                seq)))", "user": "5dbf6016e4b0e59a23173d79"}, {"problem": 33, "code": "#(for [e %1, i (range %2)] e)", "user": "5de12192e4b0948ae9d9aded"}, {"problem": 33, "code": "(fn [col n]\n  (mapcat #(repeat n %) col)\n  )", "user": "5db98f39e4b010eb3c36cd53"}, {"problem": 33, "code": "#(if (= %2 1)\n    %1\n    (apply interleave (take %2 (repeat %1))))", "user": "5ddd134ae4b0948ae9d9adc0"}, {"problem": 33, "code": "(fn [coll times]\n  (loop [replicated [] coll coll]\n    (if (empty? coll)\n      replicated\n      (recur (into replicated (take times (repeat (first coll)) )) (rest coll))\n      )\n   )\n )", "user": "5de6484ce4b0986d99407f66"}, {"problem": 33, "code": "(fn [col n] (->> col\n                 (reduce #(conj %1 (repeat n %2)) [])\n                 (mapcat identity)))", "user": "5da5a1eee4b000c986472c04"}, {"problem": 33, "code": "(fn [xs n]\n       (mapcat (fn [x] (repeat n x)) xs))", "user": "5de68f83e4b0986d99407f6c"}, {"problem": 33, "code": "#(reduce\n (fn [acc item]\n   (apply conj acc (repeat %2 item)))\n []\n %1)", "user": "5de65feee4b0986d99407f68"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5da07d10e4b000c986472bd5"}, {"problem": 33, "code": "(fn\n  [items times]\n  (mapcat #(repeat times %) items)\n)", "user": "5dd25ca8e4b0948ae9d9ad55"}, {"problem": 33, "code": "(fn [x y] (apply concat (map #(take y (repeat %)) x)))", "user": "5de7e7cae4b0986d99407f7a"}, {"problem": 33, "code": "#(for [c %1 a (range %2)] c)", "user": "5deab1b2e4b0986d99407f9f"}, {"problem": 33, "code": "(fn [s n] (apply concat (map #(repeat n %) s)))", "user": "5dee144ae4b093ff71727591"}, {"problem": 33, "code": "(fn [xs times] \n  (reduce \n   (fn [acc item] (concat acc (repeat times item))) \n   '() \n   xs))", "user": "5de48f92e4b0948ae9d9ae07"}, {"problem": 33, "code": "(fn f [s n]\n  (let [f*\n        (fn [acc s*]\n          (concat acc (repeat n s*)))]\n    (reduce f* [] s)))", "user": "5defd277e4b093ff717275b0"}, {"problem": 33, "code": "(fn [s i] (mapcat #(take i (repeat %1)) s))", "user": "5d5e2efee4b0c9e5857d4ff0"}, {"problem": 33, "code": "(fn [coll n ] (mapcat #( repeat n % ) coll ))", "user": "5ddbd202e4b0948ae9d9adb4"}, {"problem": 33, "code": "(fn [sequ num] (reduce (fn [xs x] \n                         (concat xs \n                                 (loop [i 0\n                                        accu '()]\n                                   (if(< i num)\n                                       (recur (inc i) (cons x accu))\n                                       accu )))) '() sequ))", "user": "5df0c6ffe4b093ff717275c2"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "53336ab8e4b019098a6f8b84"}, {"problem": 33, "code": "(fn f [s n]\n  (let [f*\n        (fn [acc s*]\n          (concat acc (repeat n s*)))]\n    (reduce f* [] s)))", "user": "5dee8835e4b093ff7172759a"}, {"problem": 33, "code": "(fn [coll mux]\n  (mapcat #(repeat mux %) coll))", "user": "514992d2e4b0b64cbeae1848"}, {"problem": 33, "code": "(fn replicate-seq [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5ddfd88be4b0948ae9d9ade1"}, {"problem": 33, "code": "(fn [coll times] (mapcat #(repeat times %) coll))", "user": "5df54584e4b03c219ef1a38f"}, {"problem": 33, "code": "#(reduce concat (map (partial repeat %2) %))", "user": "5ddb8a6ee4b0948ae9d9adb2"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "5ddd6cfae4b0948ae9d9adc4"}, {"problem": 33, "code": "#(apply concat (map (partial repeat %2) %1))", "user": "5dfb2e2ae4b0a607a9a45cd6"}, {"problem": 33, "code": "#(apply concat (for [x %1] (take %2 (repeat x))))", "user": "5dc53ddee4b02f9375f4e1bd"}, {"problem": 33, "code": "(fn [z w] \n  (letfn [(takeit [i] \n                  (take w (repeat i)))]\n  (apply concat (map takeit z))))", "user": "5df79420e4b0a607a9a45c9a"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5dfa1c67e4b0a607a9a45cc5"}, {"problem": 33, "code": "(fn [s r] (mapcat #(repeat r %) s))", "user": "5dfc457de4b0a607a9a45cea"}, {"problem": 33, "code": "(fn [ls n] (mapcat #(repeat n %) ls))", "user": "5d98f616e4b0d3f9b434ad3c"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "5dfe3928e4b0a607a9a45d04"}, {"problem": 33, "code": "(fn rep-seq-n\n  ([seqn n]\n   (rep-seq-n seqn n []))\n  ([seqn n res]\n   (if (empty? seqn)\n     res\n     (rep-seq-n (rest seqn) n (into res (repeat n (first seqn)))))\n   ))", "user": "5e00752fe4b0a607a9a45d24"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5dfb20b8e4b0a607a9a45cd3"}, {"problem": 33, "code": "(fn duplicate-by\n  [coll quantity]\n  (into [] (reduce (fn [acc curr]\n                     (concat acc (repeat quantity curr))) [] coll)))", "user": "5df0f338e4b093ff717275c6"}, {"problem": 33, "code": "(fn repeatseq [s n] (mapcat #(repeat n %) s))", "user": "5bfc9037e4b0bdcf453d15f2"}, {"problem": 33, "code": "(fn [coll n]\n  (apply concat(for [x coll]\n    (repeat n x))))", "user": "5d6eaa58e4b04d129b00f2cd"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat (fn [x] (repeat n x)) coll))", "user": "5d89427ae4b0915913b1d3b5"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5e01addee4b0a607a9a45d3f"}, {"problem": 33, "code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "user": "5e03a15be4b0a607a9a45d5e"}, {"problem": 33, "code": "(fn[xs n]\n   (mapcat #(repeat n %) xs))", "user": "57fc5e42e4b0d3187e900997"}, {"problem": 33, "code": "(fn [xs n]\n   (reduce #(concat %1 (take n (repeat %2))) [] xs))", "user": "5073e7fde4b054001656accb"}, {"problem": 33, "code": "(fn [coll times]\n  (loop [[elem & coll] coll replicated []]\n    (if (nil? elem)\n      replicated\n      (recur coll (into replicated (repeat times elem)))\n  )\n )\n)", "user": "5e09fd26e4b099d064962f60"}, {"problem": 33, "code": "(fn [l t] (mapcat #(repeat t %) l))", "user": "5dcd7933e4b0b296f82db5ae"}, {"problem": 33, "code": "(fn sol [coll n] (mapcat #(repeat n %) coll))", "user": "54d187b7e4b0e8a36923e5e4"}, {"problem": 33, "code": "(fn [s n]\n  (for [x s y (range n)] x ))", "user": "5e078ba7e4b0978307768fb6"}, {"problem": 33, "code": "(fn [s n] seq (reduce #(reduce conj %1 %2) [] (map #(repeat n %) s)))", "user": "5e042dede4b0a607a9a45d69"}, {"problem": 33, "code": "(fn [coll times] (reduce #(concat %1 (replicate times %2)) '() coll))", "user": "5e0cbc14e4b099d064962f8e"}, {"problem": 33, "code": "(fn [col n] (mapcat #(replicate n %) col))", "user": "5e0d948fe4b099d064962f98"}, {"problem": 33, "code": "(fn [coll x]\n    (reduce (fn [acc col]\n              (apply conj\n                     acc\n                     (take x (repeat col))))\n            []\n            coll))", "user": "5c38422ae4b0d62ef62d9f7f"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5e00b6e7e4b0a607a9a45d2b"}, {"problem": 33, "code": "(fn [xs x] (reduce into (concat (map (fn [xt] (reduce (fn [agg xq] (conj agg xt)) [] (range x))) xs))))", "user": "5d91acb8e4b0915913b1d406"}, {"problem": 33, "code": "(fn [xs n] (->> xs (map #(repeat n %)) (reduce concat)))", "user": "5e0e14bde4b099d064962fa3"}, {"problem": 33, "code": "(fn [xs times]\n  (apply\n   concat\n   (map (fn [x]\n          (repeat times x)) xs)))", "user": "5e0ceca5e4b099d064962f91"}, {"problem": 33, "code": "#(reduce into [] (map (fn [n] (repeat %2 n)) %))", "user": "5e0e836fe4b099d064962fa8"}, {"problem": 33, "code": "#(mapcat (fn [r] (repeat %2 r)) %1)", "user": "5e08c3dde4b0978307768fc8"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5e121a89e4b099d064962fe4"}, {"problem": 33, "code": "(fn [coll n] (apply concat (map #(repeat n %) coll)))", "user": "5cbc1ee7e4b026601754b9e1"}, {"problem": 33, "code": "(fn re \n   ([coll r]\n          (re coll r 0 '()))\n   ([coll r tmp out]\n          (if (empty? coll)\n            (reverse out)\n            (if (= r tmp)\n              (re (rest coll) r 0 out)\n              (re coll r (+ tmp 1) (cons (first coll) out)))\n            )) \n   )", "user": "5df75fd8e4b0a607a9a45c92"}, {"problem": 33, "code": "#(apply mapcat vector (repeat %2 %1))", "user": "5e144bd5e4b0a047bd49f6e7"}, {"problem": 33, "code": "(fn [coll n] (reduce #(concat %1 (repeat n %2)) [] coll))", "user": "5e14e396e4b0a047bd49f6f7"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5e17bb46e4b00200644e3d5a"}, {"problem": 33, "code": "(fn [x n] (mapcat #(take n (repeat %)) x))", "user": "5e17509fe4b00200644e3d52"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "5e1754abe4b00200644e3d53"}, {"problem": 33, "code": "#(apply mapcat vector (repeat %2 %1))", "user": "4f24c859e4b0d66497709fef"}, {"problem": 33, "code": "(fn [l n] (->> l\n  (map (partial repeat n))\n  (apply concat)))", "user": "5e178fbee4b00200644e3d57"}, {"problem": 33, "code": "(fn repli\n  [seq no]\n  (mapcat identity (map (partial repeat no) seq)))", "user": "5e16006be4b0a047bd49f711"}, {"problem": 33, "code": "(fn [coll n]\n   (reduce #(concat %1 (repeat n %2)) [] coll))", "user": "5e16fd78e4b0a047bd49f726"}, {"problem": 33, "code": "(fn n-rep [s n]\n  (mapcat #(repeat n %) s))", "user": "5e189cc8e4b0dc95940084f7"}, {"problem": 33, "code": "(fn [seq repeats] (loop [prefix seq rep '()] (if (empty? prefix) rep (recur (butlast prefix) (loop [n 0 rep2 rep] (if (= n repeats) rep2 (recur (inc n) (conj rep2 (last prefix)))))))))", "user": "5e1cc888e4b0dc959400853d"}, {"problem": 33, "code": "(fn [seq ct]\n   (mapcat #(repeat ct %) seq))", "user": "5db35f85e4b010eb3c36cd22"}, {"problem": 33, "code": "(fn [col N]\n           (reduce (fn [result x]\n                     (concat result (take N (repeat x))))\n                   '() col))", "user": "5e1c3e6ee4b0dc9594008530"}, {"problem": 33, "code": "(fn dubl [x t]\n\t\t(cond\n\t\t\t(nil? (first x)) nil\n\t\t\t:else \n\t\t\t  (concat\n\t\t\t    ((fn repl [el t]\n\t\t\t    \t  (if (= t 0)\n\t\t\t    \t  \tnil\n\t\t\t    \t  \t(concat el (repl el (- t 1)))\n\t\t\t    \t  \t)\n\t\t\t    \t) \n\t\t\t    \t(list (first x)) t)\n\t\t\t    (dubl (rest x) t)\n\t\t\t  )\n\t\t)\n\t)", "user": "5e1d01b5e4b0dc9594008542"}, {"problem": 33, "code": "(fn [coll n] (apply concat (map #(take n (repeat %)) coll)))", "user": "5e1a3989e4b0dc9594008511"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5d929ceae4b0915913b1d412"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5e21c933e4b05b4b01516128"}, {"problem": 33, "code": "(fn [x n] (if (= n 1) x (apply interleave (repeat n x))))", "user": "5e2549c8e4b05b4b0151615f"}, {"problem": 33, "code": "(fn [x n]\n    (loop [y '()\n         \tz (seq x)]\n      (if (= z '())\n        \ty\n          (recur (concat y (for [k [(first z)]\n                                 \tnums (range n)]\n                             \tk\n                             ) \n                   ) \n                 (rest z)\n            )\n       )\n     )\n )", "user": "5e265173e4b05b4b01516175"}, {"problem": 33, "code": "(fn [se n]\n    (apply concat\n    (map \n         (fn [x] (repeat n x) ) se)\n    )\n)", "user": "5e23ca7fe4b05b4b01516144"}, {"problem": 33, "code": "(fn [s n] (reduce concat (map #(repeat n %) s)))", "user": "5e21f944e4b05b4b0151612d"}, {"problem": 33, "code": "(fn ReplicateSequence\n  [inputSequence replTimes]\n  (loop [input inputSequence output '()]\n    (if (empty? input)\n      output\n      (recur (rest input) (concat output (repeat replTimes (first input))))\n    )\n  )\n)", "user": "5e16b820e4b0a047bd49f71f"}, {"problem": 33, "code": "(fn [xs n] (reduce (fn [acc x] (concat acc (repeat n x))) '() xs))", "user": "5e18bd30e4b0dc95940084fa"}, {"problem": 33, "code": "(fn rep\n[s n]\n  (mapcat (fn [e] (repeat n e)) s))", "user": "58f3c18ee4b0438e51c2cead"}, {"problem": 33, "code": "(fn [seq count] (mapcat #(repeat count %) seq))", "user": "5e228b5ae4b05b4b01516134"}, {"problem": 33, "code": "(fn [s n] (reduce #(into %1 (repeat n %2)) '() (reverse s)))", "user": "5e0d1947e4b099d064962f92"}, {"problem": 33, "code": "(fn [col n] (mapcat #(repeat n %) col))", "user": "5e246f92e4b05b4b01516150"}, {"problem": 33, "code": "(fn my-reduce [in-col, nr] \n  (reduce \n     (fn repeater [col,x] \n         (concat col \n          (repeatedly nr (constantly x)))) '() in-col))", "user": "5dfb267ee4b0a607a9a45cd4"}, {"problem": 33, "code": "(fn [seq a] (mapcat #(repeat a %) seq))", "user": "5da4fc6be4b000c986472bff"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5e357507e4b0650de70e2b2a"}, {"problem": 33, "code": "#(mapcat (fn [input](repeat %2 input)) %1)", "user": "5e257a33e4b05b4b01516166"}, {"problem": 33, "code": "(fn [x r]\n   (if (= r 1)\n     x\n   (apply interleave (repeat r x)))\n  )", "user": "5d73fb31e4b02e6b30c93516"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5e38a9cbe4b01d43a70e8dc2"}, {"problem": 33, "code": "(fn [ aSeq\n      aRepCnt]\n   (loop [sRepSeq aSeq\n          resSeq []]\n     (if (nil? (first sRepSeq))\n       resSeq\n       (recur (next sRepSeq) (into resSeq (replicate aRepCnt (first sRepSeq))))\n       )\n     )\n   )", "user": "5cf7215ce4b0b71b1d808a67"}, {"problem": 33, "code": "(fn map-s [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5e380e72e4b01d43a70e8db0"}, {"problem": 33, "code": "(fn [xs n]\n  (if-not (seq xs)\n    (sequence nil)\n    (seq (reduce (fn [res x]\n                   (apply conj res (replicate n x)))\n                 []\n                 xs))))", "user": "5d47fa13e4b07c84aa5ae6b6"}, {"problem": 33, "code": "(fn [xs n]\n  ((fn dupelem [xs n ys]\n     (if (empty? xs)\n       ys\n\n       (dupelem (rest xs) n (concat ys (repeat n (first xs)))))) xs n '()))", "user": "5e394c33e4b01d43a70e8dd1"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5e392de0e4b01d43a70e8dcb"}, {"problem": 33, "code": "#(reduce\n  (fn [a x]\n  \t(apply conj a (repeat %2 x)))\n  [] %1)", "user": "5e3a25d4e4b01d43a70e8dde"}, {"problem": 33, "code": "(fn [coll n] (seq (reduce #(into %1 (repeat n %2)) [] coll)))", "user": "5e3a8929e4b01d43a70e8de3"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5e3e23d9e4b01d43a70e8e20"}, {"problem": 33, "code": "#(mapcat identity (mapcat (fn [x] (list (repeat %2 x))) %))", "user": "5e348945e4b0650de70e2b1d"}, {"problem": 33, "code": "(fn\n  [coll n]\n  (if (= n 1)\n    coll\n    (apply interleave (repeat n coll))))", "user": "5c9a638fe4b048ec896c5aae"}, {"problem": 33, "code": "(fn\n  [collection times]\n    ( mapcat #(repeat times %) collection )\n  )", "user": "5e381434e4b01d43a70e8db4"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "5e259d05e4b05b4b01516169"}, {"problem": 33, "code": "#(apply concat (map (fn [x] (repeat %2 x)) %))", "user": "5e3975a3e4b01d43a70e8dd3"}, {"problem": 33, "code": "(fn [lt times] (reduce #(concat %1 (repeat times %2)) '() lt))", "user": "5e41c371e4b01d43a70e8e59"}, {"problem": 33, "code": "(fn [seq n]\n   (loop [l seq\n          result ()]\n     (if (empty? l)\n       (reverse result)\n       (let [[h & t] l] (recur t (concat (repeat n h) result))))))", "user": "5e3ef7d4e4b01d43a70e8e2d"}, {"problem": 33, "code": "(fn _ [x n] (mapcat #(repeat n %) x))", "user": "5e41b679e4b01d43a70e8e58"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "5d28d935e4b092dab7f59c88"}, {"problem": 33, "code": "(fn my-replicate [xs n]\n  (if (empty? xs) '() \n      (concat ((fn build-repeated [x n]\n                 (if (<= n 0) '()\n                     (cons x (build-repeated x (dec n))))) (first xs) n)\n              (my-replicate (rest xs) n))))", "user": "5e3e0b3fe4b01d43a70e8e1e"}, {"problem": 33, "code": "(fn [list n]\n              (if (= n 1)\n                list\n                (apply interleave (repeat n list))))", "user": "5e491182e4b043cd24807a46"}, {"problem": 33, "code": "(fn f [arr n]\n (apply concat (map #(map (constantly %) (range n)) arr)))", "user": "5e42b688e4b01d43a70e8e6b"}, {"problem": 33, "code": "(fn [coll n]\n      (apply concat (for [i coll]\n        (repeat n i))))", "user": "5e453725e4b01d43a70e8e93"}, {"problem": 33, "code": "(fn [sequence repeats] (apply concat (for [item sequence repeat (range repeats)] [item])))", "user": "5e41cb44e4b01d43a70e8e5b"}, {"problem": 33, "code": "(fn [arr n]\n  (reduce #(concat %1 (take n (repeat %2))) [] arr)\n )", "user": "5e2586afe4b05b4b01516167"}, {"problem": 33, "code": "(fn [xs n] (apply concat (map #(repeat n %) xs)))", "user": "5e4471e1e4b01d43a70e8e85"}, {"problem": 33, "code": "(fn [col n] (mapcat #(repeat n %) col))", "user": "5e44c804e4b01d43a70e8e89"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "5e3302ece4b0650de70e2b02"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat (partial repeat n) s))", "user": "5dc72a9ce4b02f9375f4e1cd"}, {"problem": 33, "code": "(fn [x n]\n  (loop [i 0 l '() z x]\n    (if (== i (count x))\n      (reverse l)\n      (recur (inc i) (into l (repeat n (first z))) (rest z)))))", "user": "5dd70ee3e4b0948ae9d9ad85"}, {"problem": 33, "code": "(fn rep [xs n]\n    (if (seq xs)\n      (apply conj (rep (rest xs) n) (take n (repeat (first xs))))\n      '()))", "user": "505223fae4b0a561d07d8f17"}, {"problem": 33, "code": "(fn replicate [s n]\n    (reduce (fn [coll el] (concat coll (repeat n el))) [] s))", "user": "5d078e2de4b0cc9c915881fa"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "54be7c0de4b0ed20f4ff6eec"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5e42875be4b01d43a70e8e68"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5e5809bbe4b027a2e10ac104"}, {"problem": 33, "code": "(fn f [s n] (when (seq s) (concat (repeat n (first s)) (f (rest s) n))))", "user": "5e5b8d92e4b0fd0acd158658"}, {"problem": 33, "code": "(fn replic [s n]\n  (mapcat #(repeat n %) s))", "user": "5dcc152ae4b02b31cc3da3c3"}, {"problem": 33, "code": "(fn [coll times] (mapcat #(repeat times %1) coll))", "user": "5e5c425ae4b0fd0acd158662"}, {"problem": 33, "code": "(fn [xs n]\n  (mapcat (partial repeat n) xs))", "user": "5e41a67be4b01d43a70e8e56"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5e5913b5e4b027a2e10ac10b"}, {"problem": 33, "code": "(fn [coll times] (mapcat #(repeat times %) coll))", "user": "5e054752e4b0a607a9a45d78"}, {"problem": 33, "code": "(fn[col times](mapcat (fn[x] (repeat times x)) col))", "user": "5e48ec09e4b043cd24807a45"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "5e5fd7afe4b0fd0acd158680"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "5e4b8fe8e4b0889a8790a555"}, {"problem": 33, "code": "(fn repl [x n] (->> x (map #(take n (repeat %))) (mapcat #(reduce conj [] %))))", "user": "5e546e20e4b027a2e10ac0eb"}, {"problem": 33, "code": "#(mapcat \n  (partial repeat %2) \n  %1)", "user": "5e64ae6ce4b0fd0acd1586ac"}, {"problem": 33, "code": "(fn [coll times]\n  (if (= 1 times)\n    coll\n    (apply interleave (repeat times coll))))", "user": "5ddecfe5e4b0948ae9d9adda"}, {"problem": 33, "code": "(fn [a n] (reduce #(concat %1 (repeat n %2)) [] a) )", "user": "5e31a4b0e4b05b4b0151622b"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "5df70ee8e4b0a607a9a45c8a"}, {"problem": 33, "code": "#(first (reduce (fn [[a b] i] [(concat a (repeat b i)) b]) ['() %2] %1))", "user": "5e5f8a07e4b0fd0acd15867c"}, {"problem": 33, "code": "(fn [lst, n] (mapcat (fn [x] (repeat n x)) lst))", "user": "5e65bfe4e4b0fd0acd1586b9"}, {"problem": 33, "code": "(fn duplicator\n  [coll n]\n  (mapcat #(take n (repeat %)) coll))", "user": "5e4e3c31e4b027a2e10ac0ad"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "5e66c144e4b0e171e1033683"}, {"problem": 33, "code": "(fn [col t] (apply concat (map #(repeat t %) col)))", "user": "5df79c31e4b0a607a9a45c9b"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "5e692be9e4b04a83ad7cd269"}, {"problem": 33, "code": "(fn hi [lst x] \n  (apply concat (map #(take x (repeat %)) lst)))", "user": "5e663073e4b0fd0acd1586bc"}, {"problem": 33, "code": "(fn [coll n] (reduce #(into %1 (repeat n %2)) [] coll))", "user": "5e5096c6e4b027a2e10ac0c6"}, {"problem": 33, "code": "#(loop [s %1 r []]\n   (if (empty? s)\n   r\n   (recur (rest s) (concat r (take %2 (repeat (first s)))))))", "user": "5e2ead6ae4b05b4b015161f5"}, {"problem": 33, "code": "#(reduce (fn [a b] (apply conj a (take %2 (repeat b)))) [] %)", "user": "5e63ffa0e4b0fd0acd1586a6"}, {"problem": 33, "code": "(fn [sq n] (mapcat (fn [x] (repeat n x)) sq))", "user": "5e6ff368e4b04a83ad7cd2a8"}, {"problem": 33, "code": "#(reduce (fn [acc item]\n           (into acc (repeat %2 item)))\n         []\n         %1)", "user": "5e62c405e4b0fd0acd15869b"}, {"problem": 33, "code": "(fn [coll repeat-count]\n   (loop [coll coll\n          coll-acc []]\n     (if (empty? coll)\n       (seq coll-acc)\n       (recur (rest coll) (concat coll-acc (repeat repeat-count(first coll)))))))", "user": "5e724492e4b085ba37836dc7"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5e639b4be4b0fd0acd1586a2"}, {"problem": 33, "code": "(fn [s n]\n  (reduce\n   \t(fn [l x] (concat l (repeat n x))) '() s\n   )\n  )", "user": "5e6e6537e4b04a83ad7cd29a"}, {"problem": 33, "code": "(fn\n  [sequence n]\n   (apply concat (for [element sequence]\n                   (take n (iterate identity element)))))", "user": "5e6df58ee4b04a83ad7cd297"}, {"problem": 33, "code": "(fn [s cpt]\n  (loop [s s, nb cpt, v []]\n    (if (seq s)\n      (if (= 0 nb)\n        (recur (rest s) cpt v)\n        (recur s (dec nb) (conj v (first s))))\n        \n      v)))", "user": "5e76274ce4b085ba37836deb"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "5e6cfc25e4b04a83ad7cd28e"}, {"problem": 33, "code": "(fn [lst times]\n  (reduce #(concat %1 (repeat times %2)) [] lst))", "user": "5e668d87e4b0e171e1033681"}, {"problem": 33, "code": "(fn [col n] (mapcat #(take n (repeat %)) col))", "user": "5e71f267e4b085ba37836dc1"}, {"problem": 33, "code": "#(cond\n  (= %2 1) %1\n  :else (apply interleave (repeat %2 %1))\n)", "user": "5e7aba9fe4b085ba37836e0c"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce concat (map #(repeat n %) coll)))", "user": "5e5fa1ffe4b0fd0acd15867d"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5e6ca949e4b04a83ad7cd289"}, {"problem": 33, "code": "(fn [arr times]\n  (loop [[f & r] arr result []]\n    (if (= f nil)\n      result\n      (recur r (apply conj result (take times (repeat f)))))))", "user": "5e7f62cce4b085ba37836e3b"}, {"problem": 33, "code": "(fn \n  [in cnt]\n  (reduce \n   #(loop [i 0, res '()]\n      (if (= i cnt)\n        (concat %1 res)\n        (recur (inc i) (conj res %2)))) '() in))", "user": "5e79fcb9e4b085ba37836e08"}, {"problem": 33, "code": "(fn [coll times] (mapcat (fn [e] (repeat times e)) coll))", "user": "5e8308abe4b09a7a73c8bbb4"}, {"problem": 33, "code": "(fn doit2 [col x] (apply concat (map #(repeat x %) col)))", "user": "5e208e4be4b05b4b01516113"}, {"problem": 33, "code": "(fn [coll n]\n     (mapcat #(repeat n %) coll))", "user": "5e7b1ef4e4b085ba37836e10"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "5e486cb0e4b043cd24807a3e"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat (fn [x] (repeat n x)) coll))", "user": "5e805895e4b085ba37836e44"}, {"problem": 33, "code": "#(reduce (fn [acc x] (concat acc (repeat %2 x))) '() %1)", "user": "5e860270e4b09a7a73c8bbdb"}, {"problem": 33, "code": "(fn [numbers times] \n  (mapcat \n   (fn [number] \n     (take times \n           (iterate identity number)\n           )\n     )\n   numbers\n   )\n  )", "user": "5e839edde4b09a7a73c8bbba"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce into [] (map #(take n (repeat %)) coll)))", "user": "5e7b68e8e4b085ba37836e17"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5e83696ce4b09a7a73c8bbb7"}, {"problem": 33, "code": "#(apply concat (for [x %1] (take %2 (repeat x))))\n;cf. problem 32 Duplicate a Sequence", "user": "5e13a6b7e4b099d064963001"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "4eb70649535d7eef30807373"}, {"problem": 33, "code": "(fn problem33 [col reps]\n  (reduce (fn [acc item]\n            (into acc (take reps (repeat item))))\n          []\n          col))", "user": "5006474ce4b0678c553fc481"}, {"problem": 33, "code": "(fn f [coll n]\n  (reduce #(concat % (repeat n %2)) '() coll)\n  )", "user": "5e85b853e4b09a7a73c8bbd5"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5dc88a38e4b02f9375f4e1db"}, {"problem": 33, "code": "(fn \n  [coll n]\n  (reduce #(into %1 (take n (repeat %2))) [] coll))", "user": "5e7dc2d8e4b085ba37836e2f"}, {"problem": 33, "code": "(fn repeat-n-times [xs n] (mapcat (fn [x] (repeat n x)) xs))", "user": "5e8f87c7e4b0cb0169546342"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "5e8ce2fee4b0cb0169546328"}, {"problem": 33, "code": "(fn [vect n]\n  (mapcat #(repeat n %) vect))", "user": "5e62444fe4b0fd0acd158694"}, {"problem": 33, "code": "(fn [lst x]\n  (loop[i 1 l lst] (if (> i (/ x 2) ) l  (recur (inc i) (mapcat #(list % %) l)))))", "user": "5e94ff5fe4b0fbed045a37ff"}, {"problem": 33, "code": "(fn replic [x-seq x-count] (loop [x (first x-seq)\n                              rest-seq (rest x-seq)\n                              result '()]\n                        (if (nil? x) \n                          (reverse (apply concat result))\n                          (recur (first rest-seq)(rest rest-seq)(conj  result (repeat x-count x))))))", "user": "5e790f6be4b085ba37836e01"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "5e954b9ee4b0fbed045a3809"}, {"problem": 33, "code": "#(loop [sq %1 rpt []]\n   (if (empty? sq)\n     rpt\n     (recur (rest sq) (into rpt (take %2 (repeat (first sq)))))\n )\n)", "user": "5e947a69e4b0fbed045a37f8"}, {"problem": 33, "code": "(fn [coll n] \n   (apply concat\n    (map #(repeat n %) coll)))", "user": "5e471203e4b043cd24807a2a"}, {"problem": 33, "code": "(fn [coll rep]\n  (if (= rep 1)\n    coll\n    (apply interleave (repeat rep coll))))\n\n\n;#(apply interleave (repeat %2 %1))", "user": "5be9ad9be4b0f319e2d7ec76"}, {"problem": 33, "code": "(fn multiplySeq\n  [vct times]\n  (loop [result []\n         lst vct\n         iter 0]\n    (cond\n      (empty? lst) result\n      (< iter times) (recur (conj result (first lst)) lst (inc iter))\n      :else (recur result (rest lst) 0))))", "user": "5e9636fee4b0fbed045a3816"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "user": "5e856736e4b09a7a73c8bbd2"}, {"problem": 33, "code": "(fn replic\n  [lst n]\n  (mapcat #(repeat n %) lst))", "user": "5e95013fe4b0fbed045a3800"}, {"problem": 33, "code": "(fn[s x] (mapcat #(repeat x %) s))", "user": "5e980e6be4b0157ca96647d6"}, {"problem": 33, "code": "(fn [xs num]\n   (reduce concat (map #(repeat num %) xs)))", "user": "5e99cbd4e4b0157ca96647e6"}, {"problem": 33, "code": "(fn [xs n]\n  (mapcat #(take n (repeat %)) xs))", "user": "5e98e8a9e4b0157ca96647dc"}, {"problem": 33, "code": "(fn [s x] (reduce concat (map #(take x (repeat %)) s)))", "user": "5e996e76e4b0157ca96647e4"}, {"problem": 33, "code": "(fn [x n] (mapcat #(repeat n %)x))", "user": "5e95873ae4b0fbed045a380a"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce #(into %1 (repeat n %2))\n          []\n          coll))", "user": "5e976fa8e4b0157ca96647cf"}, {"problem": 33, "code": "(fn replic-seq [x n]\n  (apply concat (map #(repeat n %) x)))", "user": "5e9771dee4b0157ca96647d0"}, {"problem": 33, "code": "(fn y [coll counter]\n    (reduce (fn [acc item]\n                    (concat acc (take counter (repeat item)))) \n            ()\n            coll))", "user": "5e84b48ee4b09a7a73c8bbc8"}, {"problem": 33, "code": "(fn [x y]\n  (mapcat #(repeat y %) x))", "user": "5e978fe5e4b0157ca96647d1"}, {"problem": 33, "code": "(fn [x y]\n   (if (> y 1)\n     (apply interleave (take y (repeat x)))\n     (seq x)\n   )\n)", "user": "5e9e8648e4b00a66d4a95178"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5e9683f1e4b0157ca96647c7"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5e950310e4b0fbed045a3802"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5e9e408fe4b00a66d4a95172"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5e9d1c75e4b0157ca9664801"}, {"problem": 33, "code": "#(reduce (fn [res k] (concat res (take %2 (repeat k)))) [] %1)", "user": "5e85d0bde4b09a7a73c8bbd6"}, {"problem": 33, "code": "(fn [lst n] (mapcat #(repeat n %) lst))", "user": "5e950178e4b0fbed045a3801"}, {"problem": 33, "code": "(fn [lst n] (mapcat #(repeat n %) lst))", "user": "5e9878b9e4b0157ca96647d8"}, {"problem": 33, "code": "(fn replic\n  [lst x]\n  (mapcat #(repeat x %) lst))", "user": "5ea3711ae4b00a66d4a9519d"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "59750a68e4b01722bebd4cba"}, {"problem": 33, "code": "(fn [coll cnt]\n  (loop [c coll, res []]\n    (if (empty? c)\n      res\n      (recur (rest c) (apply conj res (repeat cnt (first c)))))))", "user": "5e9f38cce4b00a66d4a9517e"}, {"problem": 33, "code": "#(if (= %2 1)\n    %1\n    (apply interleave (take %2 (repeat %1)))\n  )", "user": "5df08767e4b093ff717275bf"}, {"problem": 33, "code": "(fn [x n]\n   (mapcat identity (mapcat #(list (repeat n %)) x)))", "user": "5ea444b7e4b00a66d4a951a0"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5ea2e6bfe4b00a66d4a95197"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5ea6f88de4b00a66d4a951b1"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5ea580a3e4b00a66d4a951a7"}, {"problem": 33, "code": "(fn solution [sequence n]\n   (mapcat #(repeat n %1) sequence))", "user": "5e2ef900e4b05b4b015161fc"}, {"problem": 33, "code": "(fn f[xs n]\n  (if (empty? xs)\n    '()\n    (concat (repeat n (first xs)) (f (rest xs) n ))))", "user": "5ea7b04de4b00a66d4a951b6"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "user": "5e218bb7e4b05b4b01516123"}, {"problem": 33, "code": "(fn [coll n] (apply concat (map #(repeat n %) coll)))", "user": "5e9e642ce4b00a66d4a95174"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5c9adfebe4b048ec896c5ab9"}, {"problem": 33, "code": ";;(fn [x y] (apply concat (map #(take y (repeat %)) x)))\n(fn [x y] (mapcat #(repeat y %) x))", "user": "5eaba9c0e4b00a66d4a951d6"}, {"problem": 33, "code": "(fn [s1 n]\n  (loop \n    [acc '()\n     z1 s1]\n    \n    (if (empty? z1)\n      acc\n      (recur (concat acc (repeat n (first z1))) (rest z1))\n    )\n  )\n)", "user": "5ea97df7e4b00a66d4a951c8"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "5e9b7aefe4b0157ca96647f1"}, {"problem": 33, "code": "(fn [aseq n]\n  (loop [a aseq r []]\n    (if (= 0 (count a))\n      r\n      (recur (rest a) (concat r (take n (repeat (first a))))))))", "user": "5e12327ee4b099d064962fe5"}, {"problem": 33, "code": "(fn [l n] (reduce (fn [x y] (concat x (take n (repeat y)))) [] l))", "user": "5eb1c786e4b00a66d4a95201"}, {"problem": 33, "code": "(fn temp\n  [coll n]\n  (reduce #(concat %1 (repeat n %2)) [] coll))", "user": "5e88a676e4b0cb016954630a"}, {"problem": 33, "code": "(fn [l n] (reduce \n            (fn [a v]\n              (into a (repeat n v)))\n            []\n            l))", "user": "5eb1e42ae4b00a66d4a95202"}, {"problem": 33, "code": "#(apply concat (map (fn[x] (repeat %2 x)) %1))", "user": "5eb0878ae4b00a66d4a951f5"}, {"problem": 33, "code": "(fn [seq x]\n  (apply concat (map #(repeat x %) seq)))", "user": "5eb1a80ce4b00a66d4a951ff"}, {"problem": 33, "code": "(fn [arr k]\n  (reduce concat\n          (map (fn [x] (repeat k x)) arr)\n          ))", "user": "5eb4927fe4b00a66d4a95221"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "5eb193fde4b00a66d4a951fe"}, {"problem": 33, "code": "(fn ok [seq- n]\n  (for [x seq-\n        y (range n)]\n    x))", "user": "5cc092d1e4b0ccb061962790"}, {"problem": 33, "code": "(fn [col n] (mapcat #(repeat n %) col))", "user": "5e67ab18e4b0e171e103368a"}, {"problem": 33, "code": "(fn [xs n] (reduce concat (map #(take n (repeat %)) xs)))", "user": "5eb9e97ce4b00a66d4a95253"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5ebb0f7be4b00a66d4a95261"}, {"problem": 33, "code": "#(mapcat (fn [item]\n           (take %2 (repeat item)))\n         %1)", "user": "5e0828b9e4b0978307768fbe"}, {"problem": 33, "code": "#(apply mapcat (fn [& a] a) (repeat %2 %1))", "user": "5ebc7c13e4b00a66d4a95267"}, {"problem": 33, "code": "(fn [xs n] (reduce concat (map #(repeat n %) xs)))", "user": "5ebff55de4b00a66d4a95286"}, {"problem": 33, "code": "(fn\n                     [s n]\n                     (loop [s (seq s)\n                            out []]\n                       (cond\n                         (empty? s) out\n                         :else (recur (rest s)\n                                      (concat out (repeat n (first s)))))))", "user": "5eb22708e4b00a66d4a95204"}, {"problem": 33, "code": "(fn [col x] (mapcat #(repeat x %1) col))", "user": "5ea970d1e4b00a66d4a951c6"}, {"problem": 33, "code": "(fn [e n]\n  (if (= n 1)\n    e\n    (->>\n     (repeat n e)\n     (apply interleave))))", "user": "5ec21ef0e4b00a66d4a95299"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5defc177e4b093ff717275af"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(concat (repeat n %)) coll))", "user": "5eb5d9bbe4b00a66d4a9522e"}, {"problem": 33, "code": "(fn [xs n]\n   (reduce #(concat %1 (take n (repeat %2))) []  xs))", "user": "5ec3a13ae4b08d0ec38692b9"}, {"problem": 33, "code": "(fn [x y]\n    (apply concat\n           (map (fn [z]\n                    (repeat y z))\n                x)))", "user": "5ec66326e4b08d0ec38692d5"}, {"problem": 33, "code": "(fn [xs n]\n  (reduce \n   (fn [acc x]\n     (into acc (repeat n x)))\n   []\n   xs))", "user": "5e0b6375e4b099d064962f7b"}, {"problem": 33, "code": "(fn [sq n] (reduce concat (map #(repeat n %) sq)))", "user": "5ebd63dee4b00a66d4a95271"}, {"problem": 33, "code": "(fn [coll n]\n          (reduce #(concat %1 (repeat n %2)) [] coll))", "user": "5e9154c1e4b0cb0169546354"}, {"problem": 33, "code": "(fn [data times]\n  (mapcat #(repeat times %1) data))", "user": "5ec943fde4b08d0ec38692f1"}, {"problem": 33, "code": "(fn replicate* [a n]\n  (if (< n 2)\n    a\n    (replicate*\n     (reduce into []\n          (map (fn [v] (conj v (first v)))\n               (partition-by identity a)))\n     (- n 1))))\n\n; Like this solution\n;\n; #(mapcat (fn [x] (repeat %2 x)) %)", "user": "5eccc5c2e4b016b56eae058f"}, {"problem": 33, "code": "#(reduce (fn [l r] (into l (repeat %2 r)))\n                           []\n                           %1)", "user": "5ecf4ee4e4b016b56eae05a6"}, {"problem": 33, "code": "(fn [x n] (mapcat #(repeat n %) x))", "user": "5ece3d25e4b016b56eae059b"}, {"problem": 33, "code": "(fn rep [l times]\n  (mapcat #(repeat times %1)l))", "user": "5ec2dd45e4b00a66d4a952a1"}, {"problem": 33, "code": "(fn [x n](first (conj `() ( mapcat #(repeat n %) x))))", "user": "5ecf55dae4b016b56eae05a8"}, {"problem": 33, "code": "(fn rep [colls m]\n  (reduce (fn [acc, curr]\n            (loop\n               [x m\n                colls acc\n               ]\n                (if (< x 1)\n                  colls\n                  (recur (dec x) (conj colls curr))\n                  )\n                )\n            )\n          []\n          colls\n          )\n  )", "user": "5ebb4751e4b00a66d4a95262"}, {"problem": 33, "code": "(fn [col n]\n  (mapcat (partial repeat n) col))", "user": "5ecd1831e4b016b56eae0592"}, {"problem": 33, "code": "(fn\n  [coll rep]\n  (mapcat #(repeat rep %) coll))", "user": "5ecfd429e4b016b56eae05a9"}, {"problem": 33, "code": "#(apply concat (map (partial repeat %2) %1))", "user": "5ec6de19e4b08d0ec38692da"}, {"problem": 33, "code": "(fn myrep [[l & lr] c]\n  (let [rep (fn [a c'] (map (fn [_] a) (range c)))]\n    (if (nil? lr)\n      (rep l c)\n      (apply conj (myrep lr c) (rep l c)))))", "user": "5ecc0831e4b016b56eae058c"}, {"problem": 33, "code": "(fn f [s n] (apply concat (for [x s] (repeat n x))))", "user": "5ed15e23e4b016b56eae05ba"}, {"problem": 33, "code": "(fn [xs n] (reduce (fn [acc val] (concat acc (repeat n val))) [] xs))", "user": "5ed3c43be4b016b56eae05c4"}, {"problem": 33, "code": "#(loop [acc [] sq %1 n %2] (if (empty? sq) acc (recur (concat acc (take n (repeat (first sq)))) (rest sq) n)))", "user": "5ed03b7fe4b016b56eae05ae"}, {"problem": 33, "code": "(fn rep-n [in n]\n  (apply concat\n         (loop [in in, out []]\n           (if (empty? in)\n             out\n             (recur (rest in)\n                    (conj out (take n (repeat (first in)))))))))", "user": "5eac172fe4b00a66d4a951dd"}, {"problem": 33, "code": "(fn [coll n]\n                 (loop [c coll, acc '()]\n                   (if (empty? c)\n                     (apply concat (reverse acc))\n                     (recur (rest c) (conj acc (repeat n (first c)))))))", "user": "5eccbce6e4b016b56eae058e"}, {"problem": 33, "code": "(fn [coll n-rep]\n  (reduce\n   #(apply (partial conj %1) (repeat n-rep %2))\n   []\n   coll))", "user": "5ed52854e4b016b56eae05d2"}, {"problem": 33, "code": "#(mapcat (fn [i](repeat %2 i)) %)", "user": "51412b0ae4b0694e2952b79d"}, {"problem": 33, "code": "(fn [col mult] (apply concat (map #(repeat mult %) col)))", "user": "5ec0db8be4b00a66d4a9528d"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce (fn [new-coll item]\n            (into new-coll (for [x (range n)]\n                             item)))\n          []\n          (seq coll)))", "user": "5ed08785e4b016b56eae05b1"}, {"problem": 33, "code": "(fn[l r] (mapcat #(repeat r %) l))", "user": "5ed6030de4b016b56eae05db"}, {"problem": 33, "code": "(fn [coll n] (reduce (fn [c v] (concat c (repeat n v))) nil coll))", "user": "5ed677bee4b016b56eae05e0"}, {"problem": 33, "code": "(fn [x n] (if (<= n 1) x\n              (apply interleave (repeat n x))))", "user": "5ed9b912e4b0c7845d86b0e3"}, {"problem": 33, "code": "(fn [xs n]  (reduce (fn [f xs]\n                     (concat f (repeat n xs))) [] xs))", "user": "5ed4b1e8e4b016b56eae05ce"}, {"problem": 33, "code": "(fn [v n]\n  (if (= n 1)\n    (vec v)\n  \t(apply interleave (repeat n v))))", "user": "5ebdb3d2e4b00a66d4a95275"}, {"problem": 33, "code": "(fn p33 [xs n] (reduce concat (map #(take n (repeat %)) xs)))", "user": "5e42ba49e4b01d43a70e8e6c"}, {"problem": 33, "code": "(fn [l n]\n (mapcat #(repeat n %1) l)\n)", "user": "5ed30cb6e4b016b56eae05c2"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "5ebd7296e4b00a66d4a95273"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5eac6a63e4b00a66d4a951e0"}, {"problem": 33, "code": "(fn [coll n]\n   (mapcat (fn [x] (repeat n x)) coll)\n   )", "user": "5ed8a12fe4b0c7845d86b0d7"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5edd6eb7e4b0c7845d86b0f7"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5ed9c2cde4b0c7845d86b0e4"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5ec25800e4b00a66d4a9529b"}, {"problem": 33, "code": "(fn xz [a, b] (if (empty? a) '() (concat (repeat b (first a)) (xz (rest a) b)) ))", "user": "5ed4482be4b016b56eae05ca"}, {"problem": 33, "code": "(fn [sequence times] (mapcat #(repeat times %) sequence))", "user": "5ede8210e4b0c7845d86b0fe"}, {"problem": 33, "code": "(fn [col n]\n  (mapcat #(repeat n %) col))", "user": "565b371fe4b068f2fe63dbff"}, {"problem": 33, "code": "(fn [li times] \n  (if (= times 1)\n    li\n    (apply interleave (apply repeat times [li]))))", "user": "5ec819b4e4b08d0ec38692e2"}, {"problem": 33, "code": "(fn replicate-sequence\n  [numbers times]\n  (mapcat #(take times (repeat %1)) numbers))", "user": "5ec5f7f2e4b08d0ec38692d1"}, {"problem": 33, "code": "(fn [x y]\n  (mapcat #(repeat y %) x))", "user": "5eb6561fe4b00a66d4a95233"}, {"problem": 33, "code": "(fn [lst n]\n  (reduce concat\n          (map (partial repeat n) lst)))", "user": "5edfb1e5e4b0c7845d86b107"}, {"problem": 33, "code": "(fn [s n]\n  (if (< n 2)\n    s\n    (apply interleave (repeat n s))))", "user": "5ed875abe4b016b56eae05f2"}, {"problem": 33, "code": "#(apply concat (for [x %1] (repeat %2 x)))", "user": "5644149de4b0018b46ad8c07"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "4f6543cae4b07046d9f4ef41"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)\n;;#(mapcat (partial repeat %2) %1)", "user": "5edb07dde4b0c7845d86b0ed"}, {"problem": 33, "code": "(fn [coll n]\n (apply concat (reduce #(conj %1 (repeat n %2)) [] coll)))", "user": "5ee738dee4b029a2061bbea2"}, {"problem": 33, "code": "(fn [s n]\n  (seq (reduce (fn [acc x] (concat acc (repeat n x))) [] s)))", "user": "5ee7b49de4b029a2061bbea6"}, {"problem": 33, "code": "(fn [seq times] \n   (mapcat\n    (fn [item]\n      ((fn helper [item times]\n         (if (> times 0)\n           (conj (helper item (dec times)) item)\n           [])\n         ) item times)\n      )\n    seq\n    )\n   )", "user": "5ee75f8be4b029a2061bbea5"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5e909685e4b0cb016954634d"}, {"problem": 33, "code": "(fn repeat-all [s n] (if (empty? s)\n                       '()\n                       (concat (repeat n (first s)) (repeat-all (rest s) n))))", "user": "5ee93720e4b029a2061bbeb7"}, {"problem": 33, "code": "#(apply concat (apply map list (repeat %2 %1)))", "user": "5ed6c4ede4b016b56eae05e3"}, {"problem": 33, "code": "(fn [items, cnt]\n  (mapcat #(repeat cnt %) items))", "user": "5eeb03dde4b029a2061bbeca"}, {"problem": 33, "code": "#(reduce concat (apply map list (repeat %2 %1)))", "user": "5e9b6471e4b0157ca96647f0"}, {"problem": 33, "code": "(fn [aseq x]\n  (mapcat #(take x (repeat %)) aseq))", "user": "5bcee7d9e4b0e9689409ee22"}, {"problem": 33, "code": "(fn [input-seq n]\n  (reduce (fn [return-seq item]\n            (into return-seq \n              (reduce (fn [duplicate-seq i]\n                        (conj duplicate-seq item))\n                '()\n                (range 0 n))))\n    []\n    input-seq))", "user": "5eecd339e4b07c55ae4a0507"}, {"problem": 33, "code": "(fn [l n] (mapcat #(repeat n %1) l))", "user": "5eeeb000e4b07c55ae4a0515"}, {"problem": 33, "code": "(fn [arr t]\n   (mapcat #(repeat t %1) arr)\n  \n  )", "user": "5edc16e1e4b0c7845d86b0f1"}, {"problem": 33, "code": "(fn [x n] (mapcat #(repeat n %) x))", "user": "5eea5c98e4b029a2061bbebf"}, {"problem": 33, "code": "(fn [a count]\n  (loop [result [] current a]\n    (if (empty? current)\n      result\n      (recur (concat result (repeat count (first current))) (rest current)))))", "user": "5ee81beae4b029a2061bbeac"}, {"problem": 33, "code": "#(loop [arr1 %1 i 0 arr2 []]\n         (if (>= i (count %1))\n           arr2\n           (recur arr1 (+ 1 i) (loop [k %2 arr3 arr2]\n                                   (\n                                     if (> k 0)\n                                     (recur (- k 1) (conj arr3 (arr1 i)))\n                                     arr3\n                                     )\n                                   ))\n           )\n         )", "user": "5eee9352e4b07c55ae4a0512"}, {"problem": 33, "code": "(fn [listi n]\n  (mapcat #(repeat n %) listi))", "user": "5e83a273e4b09a7a73c8bbbb"}, {"problem": 33, "code": "(fn [sq times] (reduce (fn [l v] (apply conj l (take times (repeat v)))) [] sq))", "user": "5ef5ee81e4b07c55ae4a054a"}, {"problem": 33, "code": "(fn [xs rep] (reduce #(apply conj %1 (take rep (repeat %2)))\n                      [] xs))", "user": "5eee7311e4b07c55ae4a0510"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "5a09ebf8e4b0eab8c0448932"}, {"problem": 33, "code": "#(apply concat\n        (map\n         (fn[input]\n           (repeat %2 input)\n           )%1\n         ))", "user": "5eeb1cc3e4b029a2061bbecc"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5ec7d7f2e4b08d0ec38692e1"}, {"problem": 33, "code": "(fn [seq n]\n  (reduce #(concat %1 (repeat n %2)) '() seq))", "user": "5ef381a3e4b07c55ae4a053c"}, {"problem": 33, "code": "#(apply concat (map (fn [x] (repeat %2 x)) %1))", "user": "5ef18431e4b07c55ae4a0529"}, {"problem": 33, "code": "#(apply concat (map (fn [x] (repeat %2 x)) %1))", "user": "5ed70b97e4b016b56eae05e6"}, {"problem": 33, "code": "(fn [s x] (if (> x 1) (apply interleave (repeat x s)) s))", "user": "5dd45bb8e4b0948ae9d9ad6b"}, {"problem": 33, "code": "(fn replicate-a-sequence\n  [xs n]\n  (mapcat (fn [e] (repeat n e)) xs))", "user": "5eec1001e4b07c55ae4a0502"}, {"problem": 33, "code": "(fn replicate-seq [coll replicate-number]\n  (reduce #(concat %1 (repeat replicate-number %2)) [] coll))", "user": "5ef9ea69e4b09b61f08553d1"}, {"problem": 33, "code": "(fn [col times]\n  (reduce (fn [acc item] (apply conj acc (repeat times item)))\n          []\n          col))", "user": "5ef8e9e0e4b09b61f08553cb"}, {"problem": 33, "code": "(fn [coll reps] \n  (for [c coll\n        r (range reps)]\n    c))", "user": "5eff339ae4b0cf489e8d7f0c"}, {"problem": 33, "code": "(fn [seq rep] (apply concat (map #(repeat rep %) seq)))", "user": "5eecf110e4b07c55ae4a050b"}, {"problem": 33, "code": "(fn [l r] (mapcat (fn [e] (take r (repeat e))) l))", "user": "5f016f37e4b0cf489e8d7f20"}, {"problem": 33, "code": "(fn [coll rep-num]\n  (reduce (fn [temp-coll elem]\n            (into temp-coll (repeat rep-num elem)))\n          []\n          coll))", "user": "5ef28e95e4b07c55ae4a0535"}, {"problem": 33, "code": "(fn replic [values n]\n  (reduce (fn [a b]\n            (concat a (take n (repeat b))))  \n          [] values))", "user": "5f012a2ee4b0cf489e8d7f1e"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5ef82119e4b09b61f08553c6"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5f0890ffe4b0cf489e8d7f61"}, {"problem": 33, "code": "(fn [coll n] \n  (mapcat #(repeat n %) coll))", "user": "5f03550ce4b0cf489e8d7f33"}, {"problem": 33, "code": "#(reduce\n   (fn [col elem]\n     (concat col\n     (take %2 (repeat elem))))\n\n   [] %1)", "user": "5f0a4904e4b09a3f05b71805"}, {"problem": 33, "code": "(fn [seq n]\n    (mapcat #(repeat n %) seq))", "user": "5f02f365e4b0cf489e8d7f2c"}, {"problem": 33, "code": "(fn [v t]\n  (apply concat\n   (for [e v]\n     (repeat t e))))", "user": "58f98231e4b0438e51c2cf4c"}, {"problem": 33, "code": "(fn [v c]\n  (loop [v v\n         c c\n         nv []]\n    (if (empty? v)\n      nv\n      (recur (rest v) c (concat nv (repeat c (first v)))))))", "user": "5e7bb000e4b085ba37836e1d"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "57e070fde4b0bd073c202478"}, {"problem": 33, "code": "(fn [coll t] (reduce #(into %1 (repeat t %2)) [] coll))", "user": "58409e47e4b089d5ab817dee"}, {"problem": 33, "code": "#(mapcat (fn [x] (take %2 (repeat x))) %1)", "user": "5f0c8b0de4b0f30dddfb5d4c"}, {"problem": 33, "code": "(fn [coll x2] (reduce #(apply conj %1 (repeat x2 %2)) [] coll))", "user": "58ed2e21e4b056aecfd47d7a"}, {"problem": 33, "code": "(fn taken \n  [coll n]\n  (mapcat #(take n (repeat %)) coll))", "user": "5f003099e4b0cf489e8d7f17"}, {"problem": 33, "code": "(fn myreplicate\n  [coll n]\n  (reduce #(into %1 (repeat n %2)) [] coll))", "user": "5f088bb3e4b0cf489e8d7f5f"}, {"problem": 33, "code": "(fn rep [original duptimes] (\n\t\treduce\n\t\t(fn add_each_elem_duptimes [result, elem] (let [x (map (fn [_](do elem)) (range duptimes))]\n\t\t\t(concat result x)\n\t\t))\n\t\t'()\n\t\toriginal\n\t))", "user": "5d73530ce4b02e6b30c93514"}, {"problem": 33, "code": "(fn [x n]\n  (reduce #(into %1 (repeat n %2))\n          []\n          x))", "user": "5ed80d50e4b016b56eae05eb"}, {"problem": 33, "code": "(fn [sq n] (reduce (fn [acc x] (apply conj acc (repeat n x)))\n                   []\n                   sq))", "user": "5e6ba862e4b04a83ad7cd27d"}, {"problem": 33, "code": "(fn f [s n]\n  (let [f*\n        (fn [acc s*]\n          (concat acc (repeat n s*)))]\n    (reduce f* [] s)))", "user": "5f122f93e4b091ba50b4dbae"}, {"problem": 33, "code": "(fn [l n] (reduce #(concat %1 (take n (repeat %2)))\n                  '()\n                  l))", "user": "5f0b8243e4b0f30dddfb5d45"}, {"problem": 33, "code": "(fn [x n] (mapcat #(repeat n %) x))", "user": "5b7f2d75e4b047b03b203768"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "5f03ab5be4b0cf489e8d7f37"}, {"problem": 33, "code": "(fn replicate-sequence\n    ([x n] (replicate-sequence x n 0 []))\n    \n    ([x n i y]\n        (cond (< i (count x))\n            (replicate-sequence x n (inc i) (conj y (take n (repeat (nth (vec x) i)))))\n            \n            :else (apply list (mapcat concat y))\n        )\n    )\n)", "user": "5f0cb4f3e4b0f30dddfb5d4e"}, {"problem": 33, "code": "(fn [seq n]\n  (reduce (fn [out-vec elem]\n            (into out-vec (take n (repeat elem))))\n          []\n          seq))", "user": "5f15a50fe4b091ba50b4dbbc"}, {"problem": 33, "code": "(fn [l n]\n  (mapcat #(take n (repeat %)) l))", "user": "5d83b9aae4b0915913b1d386"}, {"problem": 33, "code": "(fn [xs cnt] (mapcat #(repeat cnt %) xs))", "user": "5509a23ee4b06e50f9beb11a"}, {"problem": 33, "code": "(fn [value times] (apply concat (for [x value\n                              :let [y (repeat times x)]\n                              ]\n                          y))  )", "user": "5f082d9ee4b0cf489e8d7f5c"}, {"problem": 33, "code": "(fn [items times] (apply concat (apply map vector (repeat times items))))", "user": "5f009162e4b0cf489e8d7f1a"}, {"problem": 33, "code": "; stolen:\n; #(apply concat (map (partial repeat %2) %1))\n; my 1st\n; #(replace %1 (sort (flatten (take %2 (repeat (range (count %1)))))))\n; my second :(\n #(replace %1 (apply concat (map (partial repeat %2)(range (count %1)))))", "user": "5f0824c5e4b0cf489e8d7f5b"}, {"problem": 33, "code": "(fn [s n] (apply concat (map #(repeat n %) s)))", "user": "5f0e32a1e4b0f30dddfb5d59"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5f0a65dae4b09a3f05b71806"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5f17e3c5e4b091ba50b4dbd0"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "5f086f54e4b0cf489e8d7f5e"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5f18444ee4b091ba50b4dbd3"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "5e3121e5e4b05b4b01516221"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5f1f4411e4b0f565ad99827b"}, {"problem": 33, "code": "(fn [s n] (reduce concat (map #(take n (repeat %)) s)))", "user": "5e3071abe4b05b4b01516213"}, {"problem": 33, "code": "(fn foo [s n]\n(if (> (count s) 0)\n(concat (for [i (range n)] (first s)) (foo (rest s) n))\ns\n)\n)", "user": "5f1aade6e4b091ba50b4dbe4"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5f1c7c3be4b0f565ad998261"}, {"problem": 33, "code": "(fn [a b] (reduce (fn [xs x] (concat xs (repeat b x))) () a))", "user": "5f06d26ae4b0cf489e8d7f53"}, {"problem": 33, "code": "(fn [lst tms]\n   (reduce (fn [coll ele]\n             (concat coll (repeat tms ele))) [] lst))", "user": "535f0cbde4b04ce2eb3ed2d9"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce\n   (fn [rep-list item]\n     (apply conj rep-list (repeat n item)))\n   []\n   coll))", "user": "5f21ffa2e4b0f565ad998289"}, {"problem": 33, "code": "(fn [col count] (mapcat #(repeat count %) col))", "user": "5f0e8312e4b0f30dddfb5d5b"}, {"problem": 33, "code": "(fn __ [x n]\n  (loop [input x\n         result []]\n    (if (empty? input)\n      result\n      (recur (rest input) (concat result (repeat n (first input)))))))", "user": "4f0f7339535d0136e6c2233e"}, {"problem": 33, "code": "(fn [coll n]\n  (apply concat (for [x coll] (repeat n x))))", "user": "5f081f6de4b0cf489e8d7f5a"}, {"problem": 33, "code": "(fn [v repeate-to]\n   (reduce #(into %1 (take repeate-to (repeat %2))) [] v))", "user": "59331397e4b072a2710fd046"}, {"problem": 33, "code": "(fn dup-n [s n]\n  (when-let [i (first s)]\n    (concat (repeat n i) (dup-n (rest s) n))))", "user": "5b61279ce4b0c6492753e70e"}, {"problem": 33, "code": "(fn f [s n]\n  (let [f*\n        (fn [acc s*]\n          (concat acc (repeat n s*)))]\n    (reduce f* [] s)))", "user": "5f22e8c9e4b0f565ad99828b"}, {"problem": 33, "code": "#(apply mapcat list (take %2 (repeat %)))", "user": "5f247827e4b0f565ad998292"}, {"problem": 33, "code": "(fn [coll n] \n  (if (= n 1) coll (apply interleave (replicate n coll))))", "user": "5c9da580e4b048ec896c5b12"}, {"problem": 33, "code": "(fn [sequence times]\n  (loop [actual sequence\n         new '()]\n    (if (empty? actual)\n      (reverse new)\n      (let [new (loop [index 0\n                    sequencia new]\n               (if (= index times)\n                 sequencia\n                 (recur (inc index) (conj sequencia (first actual)))))]\n        (recur (rest actual) new)))))", "user": "58a0ac0de4b02bd94d917e9c"}, {"problem": 33, "code": "(fn [l n] (if (= n 1) l (apply interleave (repeat n l))))", "user": "5f2c02d1e4b033932238a65f"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "5e8c3e8fe4b0cb0169546322"}, {"problem": 33, "code": "#(apply concat (map (fn [e] (repeat %2 e)) %1))", "user": "5f27cc7fe4b033932238a646"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5f1af439e4b0f565ad998257"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "52215fe1e4b0e6a83c8925cf"}, {"problem": 33, "code": "(fn [xs n]\n    (mapcat #(repeat n %) xs))", "user": "51553ea7e4b06c5f6a1490a2"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "5f265bd9e4b0857314092c8c"}, {"problem": 33, "code": "(fn dup [input times] (reduce #(concat %1 (take times (repeat %2))) [] input))", "user": "5f309144e4b0574c87022c23"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5f25a2b1e4b0117231e5035e"}, {"problem": 33, "code": "(fn replicate-seq\n  [coll n]\n  (apply concat (apply map vector (repeat n coll)))\n  )", "user": "5f29837ee4b033932238a64f"}, {"problem": 33, "code": "(fn replicate [s n] \n  (reduce #(into %1 (repeat n %2)) [] s))", "user": "5f300f28e4b033932238a682"}, {"problem": 33, "code": "(fn [values count] (reduce #(concat %1 (repeat count %2)) [] values))", "user": "5f331015e4b0574c87022c37"}, {"problem": 33, "code": "(fn [col n]\n            (reduce\n              (fn [x y]\n                (concat x (repeat n y)))\n              [] col))", "user": "5d92b543e4b0915913b1d414"}, {"problem": 33, "code": "(fn [x y] (reduce (fn [coll x] (into coll (take y (repeat x)))) [] x))", "user": "5f1d22c7e4b0f565ad998268"}, {"problem": 33, "code": "(fn foo [x y] (mapcat #(repeat y %) x))", "user": "5f3388ade4b0574c87022c38"}, {"problem": 33, "code": "(fn [coll x] (mapcat (partial repeat x) coll))", "user": "5f3abcc4e4b004f08c61c52b"}, {"problem": 33, "code": "(fn [sequ n] (mapcat #(apply list (repeat n %)) sequ))", "user": "5f3ab5ece4b004f08c61c52a"}, {"problem": 33, "code": "(fn [s t] \n  ((fn [s] (mapcat #(if (seq? %) % [%]) s)) \n   (map #(replicate t %) s)))", "user": "5f3ce2c7e4b004f08c61c548"}, {"problem": 33, "code": "(fn rep [xs m]\n  (mapcat (fn dupe [x]\n            ((fn dupeHelp [zs n ncount]\n              (if (= n ncount)\n                zs\n                (dupeHelp (conj zs (first zs)) n (+ ncount 1))\n              )\n             ) [x] m 1)\n          ) xs\n  )\n)", "user": "5f3adcf4e4b004f08c61c531"}, {"problem": 33, "code": "(fn [sequence x]\n  (mapcat #(take x (repeat %)) sequence))", "user": "5f274aeee4b0857314092c92"}, {"problem": 33, "code": "(fn [list num]\n   (apply concat (map (partial repeat num) list)))", "user": "5f3f2281e4b004f08c61c561"}, {"problem": 33, "code": "(fn [col n] (mapcat #(repeat n %) col))", "user": "5f2c94b4e4b033932238a669"}, {"problem": 33, "code": "#(apply concat (map (partial repeat %2) %1))", "user": "548f1604e4b0e286459a1230"}, {"problem": 33, "code": "(fn [s n]\n  (loop [c (first s)\n         r (rest s)\n         v []\n         i 0]\n    (if (nil? c)\n      v\n      (if (< i n)\n        (recur c r (conj v c) (inc i))\n        (recur (first r) (rest r) v 0)))))", "user": "5f3ddc71e4b004f08c61c551"}, {"problem": 33, "code": "#(if (> %2 1) (apply interleave (repeat %2 %1))\n              %1)", "user": "5f419985e4b0955706451fab"}, {"problem": 33, "code": "#(reduce concat (map (partial repeat %2) %1))", "user": "5f429fdfe4b0955706451faf"}, {"problem": 33, "code": "(fn [sq n]\n  (mapcat #(repeat n %) sq))", "user": "58ffc6cfe4b0438e51c2d008"}, {"problem": 33, "code": "(fn repset\n  [x ctn]\n(reduce\n  (fn [out part]\n    (reduce \n    (fn [x part1] (conj x part))\n    out\n    (take ctn (repeatedly (fn [] rand-int ctn)))\n    )\n  )\n  []\n  x\n))", "user": "5f3a8493e4b004f08c61c527"}, {"problem": 33, "code": "#(apply concat (map (partial repeat %2) %1))", "user": "5f36dc06e4b0574c87022c4c"}, {"problem": 33, "code": "(fn [l n] \n  (mapcat (fn [x] (->> (constantly x) repeatedly (take n))) l))", "user": "5f431d32e4b0955706451fb5"}, {"problem": 33, "code": "(fn [coll n] (reduce #(into %1 %2) [] (for [i coll]\n                               (take n (repeat i)))))", "user": "5992dc6ae4b0866487ed0d7d"}, {"problem": 33, "code": "(fn [coll n]\n (loop [coll coll \n        acc []]\n   (if (empty? coll)\n     acc\n     (recur (rest coll) (into acc (take n (repeat (first coll))))))))", "user": "5f38eecce4b0574c87022c72"}, {"problem": 33, "code": "#((fn [col acc] (if (empty? col) acc (recur (rest col) (apply conj acc (take %2 (repeat (first col))))))) %1 [])", "user": "5f49482ae4b0102c75033940"}, {"problem": 33, "code": "(fn [lst n] (apply concat (reduce (fn [start r] (conj start (repeat n r))) [] lst)))", "user": "5f45211ae4b0955706451fbc"}, {"problem": 33, "code": "(fn [coll rep]\n  (reduce (fn [lista elem]\n            (concat lista (repeatedly rep #(identity elem))))\n          []\n          coll))", "user": "5f238a59e4b0f565ad99828d"}, {"problem": 33, "code": "(fn [coll t]\n  (reduce #(concat %1 (repeat t %2)) [] coll))", "user": "5ee4b2e6e4b029a2061bbe90"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5dd84170e4b0948ae9d9ad93"}, {"problem": 33, "code": "(fn [s n] (reduce concat (map (fn [x] (take n (repeat x))) s)))", "user": "5f313d01e4b0574c87022c28"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5f2e6d97e4b033932238a677"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5f51f56ee4b0a0bc16850a6b"}, {"problem": 33, "code": "(fn [values amount]\n \t(mapcat #(take amount (repeat %)) values)\n\t)", "user": "5ee66158e4b029a2061bbe98"}, {"problem": 33, "code": "(fn [lst n] (if (= n 1) lst (apply interleave (repeat n lst))))", "user": "5f558a76e4b0a0bc16850a84"}, {"problem": 33, "code": "(fn [x y]\n  (reduce #(concat %1 (repeat y %2)) [] x))", "user": "5f1eebcee4b0f565ad998273"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5ed11279e4b016b56eae05b7"}, {"problem": 33, "code": "(fn [coll n] (mapcat (partial repeat n) coll))", "user": "5f56c0cae4b0a0bc16850a8c"}, {"problem": 33, "code": "#(apply concat (map repeat (repeat %2) %1))", "user": "5f574662e4b0a0bc16850a90"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(take n (repeat %)) xs))", "user": "5f0dfa48e4b0f30dddfb5d55"}, {"problem": 33, "code": "(fn this [xs n] (loop [l1 xs l2 '()] (if (empty? l1) l2 (recur (rest l1) (concat l2 (take n (repeat (first l1))))))))", "user": "5f32f69ae4b0574c87022c35"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "user": "5ec22851e4b00a66d4a9529a"}, {"problem": 33, "code": "(fn f [coll n] (mapcat #(repeat n %1) coll))", "user": "5dfb7f6de4b0a607a9a45cdc"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5f5df0bfe4b02876ed9fcfeb"}, {"problem": 33, "code": "(fn my-replicate\n  [x n]\n  (if (>= 1 n)\n    (ffirst\n      (map vector\n            (for [n (range n)]\n              x)))\n    (apply\n      interleave\n      (for [n (range n)]\n        x))))", "user": "5f4eb036e4b0102c75033969"}, {"problem": 33, "code": "(fn [col cnt] (mapcat #(repeat cnt %) col))", "user": "53275758e4b09d4e7a9b54fc"}, {"problem": 33, "code": "(fn [xs n]\n  (reduce\n   (fn [xs x]\n     (concat xs (repeatedly n (constantly x))))\n   []\n   xs))", "user": "5f5e7158e4b02876ed9fcff0"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5f5f9483e4b02876ed9fcff8"}, {"problem": 33, "code": "(fn replicator [myseq iter]\n  (apply concat(map (partial repeat iter) myseq)))", "user": "5f5f2eafe4b02876ed9fcff5"}, {"problem": 33, "code": "(fn f [col n] \n  (mapcat (fn [x] (map (fn [_i] x) (range n))) col))", "user": "5ea6fe98e4b00a66d4a951b2"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %1) s))", "user": "5f5b624de4b05ea7b9adc42f"}, {"problem": 33, "code": "(fn f \n  [s n] \n  (let [f* \n        (fn [acc s*] \n        (concat acc (repeat n s*))\n        )\n       ] (reduce f* [] s)\n  )\n)", "user": "5f631e11e4b02876ed9fd011"}, {"problem": 33, "code": "(fn [coll x]\n  (apply mapcat vector (take x (repeat coll))))", "user": "5f63d933e4b02876ed9fd018"}, {"problem": 33, "code": "#(mapcat (fn [v] (take %2 (repeat %2 v))) %1)", "user": "5f60daafe4b02876ed9fcffe"}, {"problem": 33, "code": "#(mapcat (fn [coll] (repeat %2 coll)) %1)", "user": "5f6796d2e4b02876ed9fd036"}, {"problem": 33, "code": "(fn replicates [coll n]\n  (mapcat (fn [x] (take n (repeat x))) coll))", "user": "5f65bdfde4b02876ed9fd025"}, {"problem": 33, "code": "(fn [s t]\n  (apply concat(for [r s]\n    (repeat t r)))\n  )", "user": "5f58db95e4b0a0bc16850a9a"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "588fbb39e4b00487982d51bd"}, {"problem": 33, "code": "(fn [s n]\n    (loop [xs s, out []]\n        (if (empty? xs) out (recur (rest xs) (concat out (repeat n (first xs)))))))", "user": "5eff6c0ee4b0cf489e8d7f11"}, {"problem": 33, "code": "(fn replicate-seq                                               \n  [s n]\n  (mapcat (fn [x] (take n (repeat x))) s))", "user": "5f3103aee4b0574c87022c24"}, {"problem": 33, "code": "(fn replicate [coll n]\n  (reduce\n    (fn [coll x]\n      (concat coll (repeat n x)))\n    []\n    coll))", "user": "5f663bc0e4b02876ed9fd02d"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5f6b5d83e4b02876ed9fd050"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5f5358b7e4b0a0bc16850a77"}, {"problem": 33, "code": "#(reduce (fn [previous new] (into previous (repeat %2 new))) [] %1)", "user": "5f6e5c58e4b02876ed9fd067"}, {"problem": 33, "code": "(fn[collection times] ( reverse ( reduce (fn[coll n ] (into coll (repeat times n) )  ) () collection)  ))", "user": "5f6b61ece4b02876ed9fd051"}, {"problem": 33, "code": "(fn seq_replication \n  [s n]\n  (apply concat (for [item s] (repeat n item)))\n)", "user": "5f6b8222e4b02876ed9fd052"}, {"problem": 33, "code": "(fn [c n] (mapcat #(take n (repeat %)) c))", "user": "54fce8bde4b07d26eda61d30"}, {"problem": 33, "code": "(fn [lst n]\n  (mapcat #(repeat n %) lst))", "user": "5f724f55e4b02876ed9fd089"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5f6e576ae4b02876ed9fd066"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "5f6caa19e4b02876ed9fd056"}, {"problem": 33, "code": "; #(if (= %2 1) % (apply interleave (repeat %2 %1)))\n\n(fn [s n] (mapcat #(repeat n %) s))", "user": "5f6a583ae4b02876ed9fd046"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5f648ef1e4b02876ed9fd01b"}, {"problem": 33, "code": "(fn [coll cnt]\n  (mapcat (fn [i] (repeat cnt i)) coll))", "user": "5f388489e4b0574c87022c69"}, {"problem": 33, "code": "#(if (> %2 1) (apply interleave (repeat %2 %1)) %1)", "user": "5c06fab7e4b0bdcf453d16bd"}, {"problem": 33, "code": "(fn [data rep-times] (reduce (fn [acc curr-val] (apply conj acc (repeat rep-times curr-val))) '() (reverse data)))", "user": "5f6f8327e4b02876ed9fd075"}, {"problem": 33, "code": "(fn [lst n] (mapcat #(repeat n %) lst))", "user": "5f77d470e4b02876ed9fd0be"}, {"problem": 33, "code": "#(mapcat (fn [input] (repeat %2 input)) %1)", "user": "5f737e16e4b02876ed9fd09a"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5f727bd1e4b02876ed9fd08c"}, {"problem": 33, "code": "(fn \n  [lst n]\n  (mapcat #(repeat n %) lst))", "user": "5f74de11e4b02876ed9fd0a5"}, {"problem": 33, "code": "(fn replicateSequence [s n]\n  (reduce\n   (fn replicateEach [acc curr]\n     (concat acc (map (constantly curr) (range n))))\n   []\n   s))", "user": "5f7251b9e4b02876ed9fd08a"}, {"problem": 33, "code": "(fn [x n] (mapcat #(repeat n %) x))", "user": "5f727dd6e4b02876ed9fd090"}, {"problem": 33, "code": "(fn [l times]\n  (loop [items l\n         output []]\n    (if (empty? items)\n      output\n      (recur (rest items) (apply conj output (take times (repeat (first items))))))))", "user": "5f79bff2e4b02876ed9fd0ca"}, {"problem": 33, "code": "#(apply mapcat list (repeat %2 %1))", "user": "5f77b99fe4b02876ed9fd0bc"}, {"problem": 33, "code": "(fn [a times] (reduce (fn [res el] (concat res (repeat times el))) (empty a) a))", "user": "5f686436e4b02876ed9fd03c"}, {"problem": 33, "code": "#(mapcat (fn [x] (seq (repeat %2 x))) %1)", "user": "5f63cde9e4b02876ed9fd015"}, {"problem": 33, "code": "(fn [s n] (reduce #(concat %1 (repeat n %2)) [] s))", "user": "5f393bd6e4b0574c87022c76"}, {"problem": 33, "code": "(fn [xs num] (mapcat #(repeat num %) xs))", "user": "5f82cfcce4b0c071e6c840fb"}, {"problem": 33, "code": "(fn [coll n] (apply concat (map #(repeat n %) coll)))", "user": "5f7981d9e4b02876ed9fd0c8"}, {"problem": 33, "code": "(fn[lst n]\n  (mapcat #(repeat n %) lst))", "user": "5f77890ae4b02876ed9fd0b9"}, {"problem": 33, "code": "(fn d [coll n]\n        (mapcat   #(repeat  n %)coll))", "user": "5f737899e4b02876ed9fd099"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5f7e91c8e4b0c071e6c840d8"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "5f46d2f9e4b0955706451fc6"}, {"problem": 33, "code": "(fn [v i] \n   (reduce #(concat % (repeat i %2) ) [] v))", "user": "5f81de6ce4b0c071e6c840f5"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "56b9c644e4b0f2655033593a"}, {"problem": 33, "code": "(fn[lst n] (mapcat #(repeat n %) lst))", "user": "5f727d2fe4b02876ed9fd08f"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5f72f144e4b02876ed9fd093"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5f84f0f5e4b0375e81f54e78"}, {"problem": 33, "code": "(fn\n  [s x]\n  (mapcat #(repeat x %) s))", "user": "5f6e23e6e4b02876ed9fd064"}, {"problem": 33, "code": "(fn [x\n     y]\n     (mapcat #(repeat y %) x)\n )", "user": "5f837b30e4b01aacbe7a2714"}, {"problem": 33, "code": "(fn [f f1]\n  (mapcat #(replicate f1 %)f)\n   \n   \n   )", "user": "5f727be9e4b02876ed9fd08d"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n%) s))", "user": "5f8497dce4b0375e81f54e74"}, {"problem": 33, "code": "(fn [lst n]\n  (mapcat #(repeat n %) lst)\n  )", "user": "5f84f110e4b0375e81f54e79"}, {"problem": 33, "code": "(fn [coll times]\n    (mapcat #(repeat times %) coll))", "user": "5885eb2de4b0f1effa3b76c6"}, {"problem": 33, "code": "(fn [lst n](mapcat #(repeat n %) lst))", "user": "5f727cb0e4b02876ed9fd08e"}, {"problem": 33, "code": "(fn [item item1] (mapcat #(repeat item1 %) item))", "user": "5f792d48e4b02876ed9fd0c5"}, {"problem": 33, "code": "(fn [a-seq cnt]\n                               (loop [l a-seq n cnt acc '()]\n                                 (if (empty? l)\n                                   (reverse acc)\n                                   (if (zero? n)\n                                     (recur (rest l) cnt acc)\n                                     (recur l (dec n) (conj acc (first l)))))))", "user": "5f86a98be4b0649ffcda4caa"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5f8361bae4b01aacbe7a2712"}, {"problem": 33, "code": "(fn replicateSeq [x y]\n  (apply concat (map #(repeat y %) x)))", "user": "5f8795d4e4b020286baa5e96"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5f87e757e4b0169f6814c40f"}, {"problem": 33, "code": "(fn rep-seq [coll n]\n  (reduce\n    (fn [acc item] (concat acc (map (fn [n] item) (range 0 n))))\n    '() coll))", "user": "5c8cfff8e4b048ec896c5996"}, {"problem": 33, "code": "(fn [sq n] (mapcat #(repeat n %) sq))", "user": "5f875a0ae4b020286baa5e94"}, {"problem": 33, "code": "(fn \n  [lst n]\n  (mapcat #(repeat n %) lst)\n  )", "user": "5f8330b8e4b01aacbe7a270f"}, {"problem": 33, "code": "(fn [lst number]\n  (reduce concat (map #(take number (repeat %)) lst)))", "user": "5f810e97e4b0c071e6c840ed"}, {"problem": 33, "code": "(fn [s n] \n  (mapcat #(repeat n %) s))", "user": "5eb741e4e4b00a66d4a9523b"}, {"problem": 33, "code": "(fn rep [s n]\n  (loop [s s\n         r []]\n    (if (empty? s)\n      r\n      (recur (rest s) (concat r (repeat n (first s)))))))", "user": "5f8b06afe4b0715f5002d74a"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5f816cc6e4b0c071e6c840f1"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "5f8e865fe4b0715f5002d76d"}, {"problem": 33, "code": "(fn[my-seq times](mapcat (partial repeat times) my-seq))", "user": "5f838122e4b01aacbe7a2715"}, {"problem": 33, "code": "(fn [x y] (mapcat #(take y (repeat %)) x))", "user": "5f8fe45ae4b0715f5002d78d"}, {"problem": 33, "code": "#(if (= 1 %2) %1 (apply interleave (repeat %2 %1)))", "user": "5f8d76c3e4b0715f5002d758"}, {"problem": 33, "code": "(fn\n  [xs m]\n  (let [inner\n        (fn\n          [x k acc]\n          (if (> k 0)\n            (recur x (- k 1) (conj acc x))\n            acc))]\n  (reduce\n   (fn\n     [acc n]\n     (concat acc (inner n m []))) [] xs)))", "user": "5e1c24f4e4b0dc959400852d"}, {"problem": 33, "code": "(fn [coll cnt]\n  (reduce (fn [res x] (apply conj res (repeat cnt x)))\n          []\n          coll))", "user": "5f93529ae4b0715f5002d7bc"}, {"problem": 33, "code": "(fn [col step] \n  (reduce (fn [res work] \n            (concat res \n                   (repeat step work))) \n          [] \n          col))", "user": "5eb3d02be4b00a66d4a95215"}, {"problem": 33, "code": "(fn [list x]\n  (reduce (fn [ans curr] (into ans (repeat x curr))) [] list))", "user": "5f9567cce4b0715f5002d7c7"}, {"problem": 33, "code": "(fn p33 [l n]\n  (mapcat #(repeat n %) l))", "user": "5f968f4ee4b0715f5002d7d2"}, {"problem": 33, "code": "(fn [s n]\n  (->> s\n       (map #(repeat n %))\n       (apply concat)))", "user": "5f597522e4b0a0bc16850a9e"}, {"problem": 33, "code": "(fn [col n] (reverse (reduce #(apply conj %1 %2) '() (map (partial repeat n) col))))", "user": "568d381ee4b0dcc4269f40c1"}, {"problem": 33, "code": "(fn [sequence n] (reduce #(apply conj %1 (repeat n %2)) [] sequence))", "user": "5f97eff1e4b0715f5002d7f9"}, {"problem": 33, "code": "(fn [toRep times] (mapcat #(repeat times %) toRep))", "user": "5ee4545ee4b029a2061bbe8d"}, {"problem": 33, "code": "(fn myF [xs n] \n  (mapcat #(repeat n %) xs))", "user": "56eff7c1e4b04a395b9a0468"}, {"problem": 33, "code": "#(loop [r [] s %1]\n  (if (empty? s) r\n    (recur (concat r (take %2 (repeat (first s)))) (rest s))\n  ))", "user": "5f9c4113e4b0715f5002d821"}, {"problem": 33, "code": "(fn [xs n] (reduce (fn [acc x] (concat acc (concat (repeat n x)))) [] xs))", "user": "5fa17538e4b0f0ebd91b77e3"}, {"problem": 33, "code": "(fn [xs n]\n  (mapcat #(repeat n %) xs))", "user": "5fa358a1e4b0f0ebd91b77fd"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(take n (repeat %)) coll))", "user": "5fa74b82e4b0fa27300f3dda"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "5fa5b72ee4b0fa27300f3dca"}, {"problem": 33, "code": "(fn [xs n]\n  (mapcat #(repeat n %) xs))", "user": "5fa8424ce4b0fa27300f3de5"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5f974321e4b0715f5002d7f3"}, {"problem": 33, "code": "(fn [s n] (apply concat (map #(repeat n %) s)))", "user": "5fa5a6b1e4b0fa27300f3dc8"}, {"problem": 33, "code": "(fn f [s n]\n  (let [f*\n        (fn [acc s*]\n          (concat acc (repeat n s*)))]\n    (reduce f* [] s)))", "user": "5facfb48e4b08cb800c85aea"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5face7fce4b08cb800c85ae9"}, {"problem": 33, "code": "(fn [lst n]\n  (letfn [(dupn [item times]\n                (loop [acc '()\n                       i times]\n                  (if (zero? i)\n                    acc\n                    (recur (cons item acc) (dec i)))))]\n    (loop [acc '()\n           remainder lst]\n      (if (empty? remainder)\n        acc\n        (recur (concat acc (dupn (first remainder) n)) (rest remainder))))))", "user": "5fb082cfe4b08cb800c85b14"}, {"problem": 33, "code": "(fn repetor [x c]\n  (reduce\n   (fn [col elm]\n     (concat col (replicate c elm)))\n   '() x))", "user": "5fa80c01e4b0fa27300f3de2"}, {"problem": 33, "code": "(fn [s c] \n  (mapcat \n   (fn [a] \n     (take c (repeat a)))\n   s))", "user": "57b60e46e4b0fbc9809a27b6"}, {"problem": 33, "code": "(fn map-repeat[xs n]\n  (mapcat #(repeat n %) xs))", "user": "573a0ecce4b0cd1946bd1088"}, {"problem": 33, "code": "(fn [l n]\n  (apply concat (map (partial repeat n) l)))", "user": "5c3527a6e4b0d62ef62d9f60"}, {"problem": 33, "code": "#(mapcat (fn [a] (repeat %2 a))  %1)", "user": "5fa96ddbe4b0fa27300f3dec"}, {"problem": 33, "code": "#(reduce (fn [result val] (concat result (repeat %2 val)) ) [] %1)", "user": "5fae3d8ae4b08cb800c85afa"}, {"problem": 33, "code": "(fn [xs n]\n  (->> xs\n       (mapcat (fn [x]\n                 (take n (repeat x))))))", "user": "5484c3b2e4b0e286459a11a2"}, {"problem": 33, "code": "(fn [s t] \n  (for [x s \n       n (range t)]\n    x))", "user": "5f3567d6e4b0574c87022c44"}, {"problem": 33, "code": "(fn [coll times]\n   (mapcat #(repeat times %) coll))", "user": "5fb544f6e4b08cb800c85b4e"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %)", "user": "5fb3a096e4b08cb800c85b35"}, {"problem": 33, "code": "(fn rep [l n] (if (empty? l) () (concat (take n (repeat (first l))) (rep (rest l) n))))", "user": "5fab7ea6e4b08cb800c85ad8"}, {"problem": 33, "code": "(fn [s n]\n    (loop [s s\n           o []\n           ]\n        (if-not (seq s)\n            o\n            (recur (rest s) (into o (repeat n (first s))))\n         )))", "user": "5fafa44ee4b08cb800c85b0e"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5fa2b45ce4b0f0ebd91b77f5"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5faa75c1e4b0fa27300f3dfa"}, {"problem": 33, "code": "(fn [s n]\n  (reduce concat (map #(take n (repeat %)) s)))", "user": "5fb453d3e4b08cb800c85b44"}, {"problem": 33, "code": "(fn [coll n] (apply concat (map #(repeat n %) coll)))", "user": "5fbe40bce4b03f550f448246"}, {"problem": 33, "code": "(fn [xs n] (apply concat (for [x xs] (repeat n x))))", "user": "5fab003de4b08cb800c85ad1"}, {"problem": 33, "code": "(fn [l n] (mapcat #(repeat n %) l))", "user": "5eb7b41ee4b00a66d4a9523c"}, {"problem": 33, "code": "(fn owo [coll n] \n  (apply concat (reduce (fn [x y] (conj x (for [_ (range n)] y))) '[] coll)))", "user": "5fb2eac0e4b08cb800c85b2f"}, {"problem": 33, "code": "#(if (> 2 %2) %1 (apply interleave (repeat %2 %1)))", "user": "5a4f11e5e4b05d388ecb6bc6"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5fc04417e4b0edf42a5593c6"}, {"problem": 33, "code": "(fn r [c n]\n  (mapcat #(repeat n %1) c))", "user": "5f969090e4b0715f5002d7d5"}, {"problem": 33, "code": "(fn f [s n]\n  (let [f*\n        (fn [acc s*]\n          (concat acc (repeat n s*)))]\n    (reduce f* [] s)))", "user": "5f96fbc7e4b0715f5002d7ec"}, {"problem": 33, "code": "(fn [x y] (reduce concat (map (fn [z] (take y (cycle (list z)))) x)))", "user": "5fc4d277e4b06ffabd1ef72a"}, {"problem": 33, "code": "(fn [coll rep]\n  (reduce #(into %1 (take rep (repeat %2))) [] coll))", "user": "5fc51d88e4b0ad564c76812a"}, {"problem": 33, "code": "(fn [x n] (reduce (fn [seq i]\n            (concat seq (repeat n i))) [] x))", "user": "5a3e1243e4b0447ef91cc5ae"}, {"problem": 33, "code": "(fn [x n]\n  (if (= n 1) x (apply interleave (repeat n x))))", "user": "5df175bce4b03c219ef1a34d"}, {"problem": 33, "code": "(fn my-func [coll arg]\n  (reduce #(concat % (take arg (repeat %2)) ) '() coll))", "user": "5fc5c303e4b02c825b0c8c1a"}, {"problem": 33, "code": "(fn [l n]\n             (loop [r (transient []) l1 l c n]\n                (if (not-empty l1)\n                  (if (> c 0)\n                    (recur (conj! r (first l1)) l1 (dec c))\n                    (recur r (rest l1) n)\n                    )\n                  (persistent! r)\n                  )\n               )\n             )", "user": "5fc241c1e4b0edf42a5593d1"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5ef4fca7e4b07c55ae4a0546"}, {"problem": 33, "code": "(fn brrr [s n]\n  (reduce\n    #(concat % (take n (repeat %2)))\n    []\n    s))", "user": "5fcdb9f5e4b07e53c2f3effe"}, {"problem": 33, "code": "(fn [i u] (loop [li '() x 0]\n             (if (= x (count i))\n               (reverse (reverse li))\n               (recur  (concat li (repeat u (nth i x))) (inc x)))))", "user": "5f6b35c3e4b02876ed9fd04d"}, {"problem": 33, "code": "(fn [a n]\n    (reduce\n     (fn [res x]\n       (concat res (repeat n x)))\n     []\n     a))", "user": "5fa6db67e4b0fa27300f3dd2"}, {"problem": 33, "code": "(fn [x y]\n  (reduce\n    (fn [a b]\n      (concat a (take y (repeat b))))\n     []\n     x))", "user": "5b21ad60e4b03cfeda66ed54"}, {"problem": 33, "code": "(fn [coll r] \n  (if (> r 1) \n    (apply interleave (repeat r coll)) \n    coll))", "user": "5fb46916e4b08cb800c85b46"}, {"problem": 33, "code": "#(reduce (fn [v e] (concat v (repeat %2 e))) [] %1)", "user": "5fba5692e4b03f550f448230"}, {"problem": 33, "code": "#(apply concat (map (partial repeat %2) %1))", "user": "58c69d88e4b021aa9917ed5e"}, {"problem": 33, "code": "(fn replicate-seq [coll n]\n  (mapcat #(repeat n %) coll))", "user": "5fd66e61e4b05ac5b16ea10a"}, {"problem": 33, "code": "(fn [sq n]\n  (apply concat (map #(repeat n %) sq)))", "user": "54d7e277e4b0a52adc2e2031"}, {"problem": 33, "code": "(fn foo [lst n]\n  (->> lst\n       (map #(take n (iterate identity %)))\n       (reduce (partial apply conj) [])))", "user": "5fb8fe30e4b03f550f448223"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5fd361f2e4b07e53c2f3f04e"}, {"problem": 33, "code": "(fn dups [x n] (mapcat #(repeat n %) x))", "user": "5f96fa49e4b0715f5002d7e9"}, {"problem": 33, "code": "(fn [coll n] (apply concat (map #(repeat n %) coll)))", "user": "5fa7009be4b0fa27300f3dd6"}, {"problem": 33, "code": "#(reduce (fn [acc val] (concat acc (repeat %2 val))) '() (seq %1))", "user": "5fdbde92e4b05ac5b16ea137"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "5fbb010ae4b03f550f448233"}, {"problem": 33, "code": "(fn [data rep]\n  (reduce #(apply (partial conj %) (repeat rep %2)) [] data))", "user": "5fc9d967e4b0689391cc77ce"}, {"problem": 33, "code": "#(apply concat (map (fn [a] (repeat %2 a)) %1))", "user": "5fe362d9e4b05ac5b16ea179"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5fe0d4d4e4b05ac5b16ea164"}, {"problem": 33, "code": "(fn [xs n]\n (mapcat\n  #(take n (repeat %))\n  xs))", "user": "59d4d126e4b0ef0a1e9b5be9"}, {"problem": 33, "code": "(fn [l n]\n  (mapcat (fn [a] (repeat n a)) l))", "user": "5fe5a64de4b05ac5b16ea187"}, {"problem": 33, "code": "(fn lazy-replicate [coll n]\n  \"shorter: (mapcat #(take n (repeat %)) coll)\"\n  (when-let [f (first coll)]\n    (concat (take n (repeat f)) (lazy-seq (lazy-replicate (rest coll) n)))))", "user": "5fd2e391e4b07e53c2f3f049"}, {"problem": 33, "code": "(fn [x y]\n  (reverse (reduce #(into %1 (repeat y %2)) () x)))", "user": "5fea32f3e4b05ac5b16ea1aa"}, {"problem": 33, "code": "(fn dd [sq n] \n  (mapcat (fn a [x] (repeat n x)) sq))", "user": "5fe09d1fe4b05ac5b16ea15b"}, {"problem": 33, "code": "(fn mp [coll n] (mapcat #(repeat n %) coll))", "user": "5fe85417e4b05ac5b16ea194"}, {"problem": 33, "code": "(fn [s n]\n        (->> s\n             (map (fn [x] (repeat n x)))\n             (apply concat)))", "user": "546c4377e4b00cfc9eacc177"}, {"problem": 33, "code": "(fn [sq n]\n    (reduce (fn [result, i] (into result (repeat n i ))) [] sq) )", "user": "5fee18f2e4b05ac5b16ea1d2"}, {"problem": 33, "code": ";(fn [xs n] (mapcat #(repeat n %) xs))\n#(->> %1 (repeat %2) (apply map list) (apply concat))", "user": "54aec375e4b09f271ff37cf9"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "5f3ee0d9e4b004f08c61c55c"}, {"problem": 33, "code": "(fn replicate-sequence [ls n]\n  (reduce (fn [acc x] (concat acc (repeat n x))) () ls)\n  )", "user": "5fe1b893e4b05ac5b16ea16f"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5fef4292e4b05ac5b16ea1d7"}, {"problem": 33, "code": "(fn [items n]\n (mapcat #(repeat n %) items)\n)", "user": "5fe876ade4b05ac5b16ea195"}, {"problem": 33, "code": "(fn \n   [coll n]\n   (mapcat #(repeat n %) coll))", "user": "5fc61b45e4b06010e5ea651a"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5ff3aca3e4b05ac5b16ea205"}, {"problem": 33, "code": "(fn [xs n] (reduce #(concat % (repeat n %2)) [] xs))", "user": "5fd8bcb3e4b05ac5b16ea11b"}, {"problem": 33, "code": "#(mapcat (fn [elem]\n           (take %2 (repeat elem)))\n         %1)", "user": "5fe9169ce4b05ac5b16ea1a0"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5f9690d4e4b0715f5002d7de"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "5ff454a1e4b05ac5b16ea20d"}, {"problem": 33, "code": "(fn [data times]  (mapcat #(repeat times %) data))", "user": "5ff32e20e4b05ac5b16ea1ff"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "5fd10010e4b07e53c2f3f02a"}, {"problem": 33, "code": ";; #(mapcat (fn [x] (repeat %2 x)) %)\n\n;; (fn [x t] (mapcat (partial repeat t) x))\n\n;; #(for [x %1\n;;          y (take %2 (iterate identity x))]\n;;      y)\n\n#(->> (repeat %2 %1)\n      (apply map list)\n      (reduce concat))", "user": "591ad160e4b09b4ee5954bdf"}, {"problem": 33, "code": "(fn [in times]\n  (mapcat (partial repeat times) in))", "user": "5ff93da9e4b06df49cee14af"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %)", "user": "5fcd15d6e4b07e53c2f3eff7"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %1) s))", "user": "5ff676a9e4b06df49cee1497"}, {"problem": 33, "code": "#(mapcat (fn [item]\n           (take %2 (repeat item)))\n         %1)", "user": "5fec4f5ee4b05ac5b16ea1bf"}, {"problem": 33, "code": "#(apply concat (map (partial repeat %2) %))", "user": "5f5e166ce4b02876ed9fcfed"}, {"problem": 33, "code": "(fn rep [coll num]\n  (-> (reduce (fn [a v]\n                (concat a (repeat num v))) [] coll)))", "user": "5ff8ead1e4b06df49cee14ab"}, {"problem": 33, "code": "#_(fn [coll n] (apply interleave (repeat n coll)))\n\n(fn [coll n] (mapcat #(repeat n %) coll))", "user": "529e3258e4b04e0c58e87b8d"}, {"problem": 33, "code": "(fn [xs n] (apply concat (map #(repeat n %) xs)))", "user": "5aa5043ee4b0d174b936c88e"}, {"problem": 33, "code": "(fn [coll n]\n  (apply concat\n         (map #(repeat n %) coll)))", "user": "5ffc18cae4b074f607df65f1"}, {"problem": 33, "code": "(fn [sequ n]\n  (reduce\n    (fn [acc value]\n      (concat acc (repeat n value)))\n    []\n    sequ))", "user": "5ffee617e4b074f607df6605"}, {"problem": 33, "code": "(fn [se c] (apply concat (map (fn [el] (take c (repeat el))) se)))", "user": "5fbf6fe7e4b0ad6fc3476147"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5ff709e4e4b06df49cee149b"}, {"problem": 33, "code": "(fn [lst times] (reduce (fn[coll ele] (concat coll (repeat times ele))) '() lst))", "user": "5bab31f1e4b0a20761a23471"}, {"problem": 33, "code": "(fn [coll n]\n  (if (= n 1)\n    coll\n    (apply interleave (repeat n coll))))", "user": "5ff61113e4b06df49cee1492"}, {"problem": 33, "code": "#(->> %1 (map (partial repeat %2)) (reduce concat))", "user": "6004c750e4b074f607df6645"}, {"problem": 33, "code": "(fn [coll n]\n  (apply concat\n         (map (partial repeat n) coll)))", "user": "5ffd3422e4b074f607df65f7"}, {"problem": 33, "code": "(fn [xs count]\n  (mapcat #(take count (repeat %)) xs))", "user": "5e42602ae4b01d43a70e8e63"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "600201bce4b074f607df662b"}, {"problem": 33, "code": "(fn[x y](mapcat (fn[z](repeat y z)) x))", "user": "6001460ce4b074f607df6611"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5ffe2d18e4b074f607df65ff"}, {"problem": 33, "code": "#(mapcat (fn [input](repeat %2 input)) %1)", "user": "6001c90ce4b074f607df6626"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "5f37263de4b0574c87022c4e"}, {"problem": 33, "code": "#(reduce (fn [acc x] (concat acc (repeat %2 x))) '() %1)", "user": "600c1c72e4b074f607df6692"}, {"problem": 33, "code": "(fn foo [l n]\n    (letfn [(bar [e m]\n                 (if (= m 0)\n                     '()\n                     (conj (bar e (- m 1)) e)))]\n        (if (empty? l)\n            '()\n            (let [x (first l)\n                  xs (rest l)]\n                (concat (bar x n) (foo xs n))))))", "user": "600ae927e4b074f607df6689"}, {"problem": 33, "code": "(fn [c n] (mapcat #(take n (repeat %)) c))", "user": "600cb742e4b074f607df6696"}, {"problem": 33, "code": "#_(fn [valz cnt]\n  (loop [v (first valz)\n         remn (rest valz)\n         ret []]\n    (if-not (empty? remn)\n      (recur (first remn) (rest remn) (into ret (repeat cnt v)))\n      (into ret (repeat cnt v)))))\n; mapcat makes this easy\n(fn [valz cnt] (mapcat #(repeat cnt %1) valz))", "user": "5edd05bfe4b0c7845d86b0f3"}, {"problem": 33, "code": "(fn \n  [s r]\n  (mapcat #(repeat r %) s))", "user": "60046db8e4b074f607df6642"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %)", "user": "583369e6e4b089d5ab817c9c"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "6011b89ee4b074f607df66bc"}, {"problem": 33, "code": ";;(fn n-rep [s n]\n;;  (mapcat #(repeat n %) s))\n\n;; I love the simplicity of the solution below\n;; because it uses concise, idomatic, AND\n;; highly readable functions\n;; \"inputs: 1 sequence and 1 whole number\"\n;; \"output: the numbered repetition of concatenation\n;; mapped over a sequence\"\n(fn [a-sequence x-times]\n  (mapcat (partial repeat x-times) a-sequence))", "user": "5fb68f09e4b08cb800c85b58"}, {"problem": 33, "code": "(fn [xs n]\n   (->>\n     xs\n     (mapcat (partial repeat n))))", "user": "57e10705e4b0bfb2137f5a6a"}, {"problem": 33, "code": "#(mapcat (fn [ele] (repeat %2 ele)) %1)", "user": "60096aabe4b074f607df667f"}, {"problem": 33, "code": "(fn dup [coll n]\n  (apply concat (map (partial repeat n) coll)))", "user": "601aaa93e4b0bf4ca6b10926"}, {"problem": 33, "code": "(fn\n  [xs n]\n  (mapcat #(repeat n %) xs))", "user": "5be1c6c6e4b0ed4b8aab4ca5"}, {"problem": 33, "code": "(fn multi-seq-var\n  [sequence num]\n  (apply concat(for [x sequence]\n     (repeat num x))))", "user": "5ff99e57e4b06df49cee14b0"}, {"problem": 33, "code": "(fn [coll n]\n   (reduce (fn [acc ele]\n             (into acc (take n (repeat ele))))\n           []\n           coll)\n   )", "user": "5a9f2c53e4b0d174b936c812"}, {"problem": 33, "code": "(fn [coll count]\n    (mapcat #(repeat count %) coll))", "user": "58db48a5e4b0a4d5acaab679"}, {"problem": 33, "code": "(fn [xs n]\n   (reduce #(concat %1 (repeat n %2)) [] xs))", "user": "5fa28e2be4b0f0ebd91b77f0"}, {"problem": 33, "code": "(fn replicate-seq [s n]\n  (if (empty? s)\n    '()\n    (concat (for [x (range n)] (first s)) (replicate-seq (rest s) n))))", "user": "601004d6e4b074f607df66b2"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "601c39eee4b0bf4ca6b10937"}, {"problem": 33, "code": "(fn [xs n] \n  (reduce (fn [coll e] \n            (if (sequential? e) \n              (concat coll (repeat n e))\n              (flatten (cons coll (repeat n e)) ) )) \n            []\n            xs))", "user": "52fa250ee4b047fd55836ff3"}, {"problem": 33, "code": "(fn [a b] (mapcat #(repeat b %) a))", "user": "5ff70cfde4b06df49cee149c"}, {"problem": 33, "code": "(fn[x y](mapcat #(repeat y %) x))", "user": "60195030e4b0bf4ca6b10920"}, {"problem": 33, "code": "(fn dupNele [l n]\n  (cond\n   (= [] l) ()\n   :else\n   (apply conj (dupNele (rest l) n) (repeat n (first l)) )))", "user": "602049b8e4b0bf4ca6b10961"}, {"problem": 33, "code": "#(reduce (fn [acc n] \n             (concat acc\n                     (repeat %2 n))) \n         [] \n         %1)", "user": "4e38f245535deb9a81d77f3e"}, {"problem": 33, "code": "(fn [ls n]\n  (reduce #(concat %1 (take n (repeat %2))) [] ls)\n )", "user": "60228147e4b0d5df2af22202"}, {"problem": 33, "code": "#(mapcat (fn [input](repeat %2 input)) %1)", "user": "601bdcb3e4b0bf4ca6b10930"}, {"problem": 33, "code": "(fn f [s n]\n  (let [f*\n        (fn [acc s*]\n          (concat acc (repeat n s*)))]\n    (reduce f* [] s)))", "user": "6022844de4b0d5df2af22203"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "6023e7f7e4b0d5df2af22217"}, {"problem": 33, "code": "(fn [xs n] (mapcat #(repeat n %) xs))", "user": "60225c2ae4b0d5df2af22201"}, {"problem": 33, "code": "(fn [s n]\n  (letfn [(dup [what times] (if (= times 0) '() (cons what (dup what (dec times)))))]\n    (loop [old s new '()]\n      (if (empty? old) new\n        (recur (rest old) \n               (concat new \n                     (dup (first old) n)\n                     ))))))", "user": "60264d89e4b0d5df2af2222d"}, {"problem": 33, "code": "(fn [coll r] (apply concat (map #(repeat r %) coll )))", "user": "6024544be4b0d5df2af2221f"}, {"problem": 33, "code": "(fn [coll reps]\n  (if (= 1 reps)\n    coll\n    (apply interleave (repeat reps coll))))", "user": "602372aae4b0d5df2af2220f"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "6026737ee4b0d5df2af2222f"}, {"problem": 33, "code": "(fn [sq n]\n   (reduce\n     (fn [acc curr]\n       (into acc (take n (repeat curr))))\n     []\n     sq))", "user": "602b90c1e4b0d5df2af22266"}, {"problem": 33, "code": "(fn [seq n]\n    (apply concat (map #(repeat n %) seq)))", "user": "5ff64845e4b06df49cee1495"}, {"problem": 33, "code": "(fn [s n] (mapcat (fn [x] (repeat n x)) s))", "user": "5fdb8657e4b05ac5b16ea133"}, {"problem": 33, "code": "(fn replicate [coll dups]\n  (apply concat (map #(repeat dups %) coll)))", "user": "602d5eade4b0d5df2af22279"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5baba1ece4b0a20761a23482"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5f8e2a08e4b0715f5002d767"}, {"problem": 33, "code": "(fn [list num]\n  \t\t(mapcat #(repeat num %) list))", "user": "5fc1c424e4b0edf42a5593d0"}, {"problem": 33, "code": "(fn [array n] (mapcat #(take n (repeat %)) array))", "user": "5a778224e4b013a48d399761"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "602d98d5e4b0d5df2af2227a"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "600eb95de4b074f607df66a6"}, {"problem": 33, "code": "(fn [x n] (mapcat (fn [e] (repeat n e)) x))", "user": "60329afce4b0d5df2af222b8"}, {"problem": 33, "code": "#(mapcat (fn [x] (take %2 (repeat x))) %1)", "user": "6032f7f9e4b0d5df2af222b9"}, {"problem": 33, "code": "(fn [s n](loop [res [] coll s]\n    (if (empty? coll)\n      res\n      (recur (concat res \n                   (repeat n (first coll))\n              \n      \t\t\t)\n             (rest coll)\n      )\n     )\n   )\n)", "user": "602cc4d4e4b0d5df2af22274"}, {"problem": 33, "code": "(fn [s n]\n  (reduce #(into % (repeat n %2)) [] s))", "user": "6023a3abe4b0d5df2af22212"}, {"problem": 33, "code": "(fn repl ([a n] (\nif (not (= 0 (count a)))\n  (\n  if ( = 1 (count a))\n    (repl '() (- n 1) (first a))\n    (repl (repl (rest a) n) (- n 1) (first a))\n  )\n))\n([a n v] (\nif (= n 0)\n  (conj a v)\n  (conj (repl a (- n 1) v) v)\n)) \n\n)", "user": "602bca69e4b0d5df2af22267"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat #(repeat n %) s)\n)", "user": "60335b35e4b0d5df2af222bf"}, {"problem": 33, "code": "(fn replicate [seq n]\n  (mapcat (fn [e] (repeat n e)) seq))", "user": "5fada7cce4b08cb800c85af5"}, {"problem": 33, "code": "(fn foo [seqs numb]\n        (if (empty? seqs)\n          nil\n          (concat (repeat numb (first seqs)) (foo (rest seqs) numb)))\n        )", "user": "6038b6b4e4b0d5df2af222ef"}, {"problem": 33, "code": "(fn\n  [coll num]\n  (loop [curr-coll coll ans []]\n    (if (empty? curr-coll)\n      ans\n      (recur (rest curr-coll) (apply conj ans (repeat num (first curr-coll)))))\n    )\n  )", "user": "60337f1fe4b0d5df2af222c1"}, {"problem": 33, "code": "(fn [s n]\n   (reduce (fn [acc curr]\n             (concat acc (repeat n curr)))\n           '()\n           s))", "user": "603d5f2ae4b0d5df2af2230c"}, {"problem": 33, "code": "(fn [ls n] (mapcat #(repeat n %) ls))", "user": "603a6c40e4b0d5df2af222f7"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "603e9cb6e4b0d5df2af22317"}, {"problem": 33, "code": "(fn [seq count]\n    (reduce concat '() \n            (map \n             (fn [item] (repeat count item))\n            seq)\n            )\n  )", "user": "602f56c5e4b0d5df2af22297"}, {"problem": 33, "code": "(fn [sq n]\n  (let [sq (seq sq)]\n    (mapcat (partial repeat n) sq)))", "user": "60436423e4b02d28681c77a3"}, {"problem": 33, "code": "(fn m [coll count]\n  (mapcat #(repeat count %) coll)\n)", "user": "6022429be4b0d5df2af22200"}, {"problem": 33, "code": "(fn [s x] (apply concat (map #(repeat x %) s)))", "user": "6045582fe4b02d28681c77b6"}, {"problem": 33, "code": "(fn [v n] (mapcat #(repeat n %) v))", "user": "60460824e4b02d28681c77bc"}, {"problem": 33, "code": "(fn [seq num]\n    (reduce (fn [acc v]\n              (concat acc (repeat num v))) [] seq))", "user": "603ae21de4b0d5df2af222fb"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "6046a0c7e4b02d28681c77c6"}, {"problem": 33, "code": "(fn [xs n]\n    (mapcat #(repeat n %) xs))", "user": "6026d2cae4b0d5df2af22232"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5eb56fc1e4b00a66d4a95224"}, {"problem": 33, "code": "#(mapcat (fn [input](repeat %2 input)) %1)", "user": "60471241e4b02d28681c77c9"}, {"problem": 33, "code": "(fn [coll n]\n  (->> coll\n       (map (fn [e] (repeat n e)))\n       (apply concat)))", "user": "604a30c6e4b02d28681c77f0"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "60486e8ae4b02d28681c77db"}, {"problem": 33, "code": "(fn mult [s n] (reduce (fn rep_item_in_seq [s i] (concat s ( repeat n i ) ) ) [] s ))", "user": "600b385ce4b074f607df668d"}, {"problem": 33, "code": ";; (fn replicate [coll rpt]\n;;   (reduce #(concat %1 (take rpt (repeat %2))) [] coll))\n#(mapcat (partial repeat %2) %1)", "user": "6020365ae4b0bf4ca6b10960"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5335cab9e4b0e30313ee6c70"}, {"problem": 33, "code": "(fn[values repeat-times]\n  (mapcat #(take repeat-times (repeat %)) values))", "user": "600d9808e4b074f607df669c"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "604d3cb1e4b0b7ec0ac60ac2"}, {"problem": 33, "code": "#(reduce (fn [acc s] (concat acc (repeat %2 s))) [] %1)", "user": "604ccb9fe4b0b7ec0ac60ac1"}, {"problem": 33, "code": "(fn [xs x] (if (= x 1) xs (apply interleave (take x (repeat xs)))))", "user": "6034e358e4b0d5df2af222d1"}, {"problem": 33, "code": "(fn [values n]\n  (reduce concat (map #(map (fn [x] %) (range 0 n)) values)))", "user": "563e022be4b0da801c4e4664"}, {"problem": 33, "code": "(fn\n   [coll x]\n   (reduce (fn [list item]\n             (concat list (repeat x item))) '() coll))", "user": "60396c95e4b0d5df2af222f4"}, {"problem": 33, "code": "(fn list-replicate [list num]\n  (mapcat (partial repeat num) list))", "user": "604f4be1e4b0b7ec0ac60ace"}, {"problem": 33, "code": "(fn [date n]\n  (mapcat #(repeat n %) date))", "user": "60504383e4b056659d6341fa"}, {"problem": 33, "code": "(fn\n  [xs n]\n  (mapcat #(repeat n %) xs))", "user": "4e586949535d8a8b8723a292"}, {"problem": 33, "code": "(fn [col n]\n   (reduce #(concat %1 (repeat n %2)) [] col))", "user": "60537cd1e4b04c8f2157d152"}, {"problem": 33, "code": "(fn [l n] (apply concat (map (fn [x] (repeat n x)) l)))", "user": "6040f595e4b0d5df2af2232f"}, {"problem": 33, "code": "(fn [s n] (reduce concat (map #(repeat n %) s)))", "user": "60511ccfe4b056659d6341ff"}, {"problem": 33, "code": "(fn [coll n]\n   (mapcat #(repeat n %) coll))", "user": "602aa5f1e4b0d5df2af2225d"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "6040e6dbe4b0d5df2af2232a"}, {"problem": 33, "code": "(fn [sekvence n]\n  (mapcat (fn [x] (repeat n x)) sekvence))", "user": "5684e200e4b04eec3ec5cfc4"}, {"problem": 33, "code": "(fn [xs y] (mapcat #(repeat y %) xs))", "user": "603f6623e4b0d5df2af2231f"}, {"problem": 33, "code": "(fn [xs x]\n   (mapcat (partial repeat x) xs))", "user": "526759b3e4b03e8d9a4a715b"}, {"problem": 33, "code": "(fn [x n] (mapcat #(repeat n %) x))", "user": "60521ea8e4b056659d634205"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "605a2480e4b07e92fa001ad7"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "605a270ee4b07e92fa001ad8"}, {"problem": 33, "code": "(fn [xs n]\n  (mapcat #(repeat n %) xs))", "user": "605b7a90e4b079a07f8593fc"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "6059d2e0e4b07e92fa001ace"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "6059d9c8e4b07e92fa001ad0"}, {"problem": 33, "code": "(fn\n  [s n]\n  (apply concat (map #(repeat n %) s)))", "user": "5ec02e20e4b00a66d4a95288"}, {"problem": 33, "code": "(fn [se times] (mapcat identity (map #(repeat times %) se)))", "user": "5b522591e4b02d533a91bd09"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "6059d824e4b07e92fa001acf"}, {"problem": 33, "code": "(fn [coll num] (mapcat #(repeat num %1) coll))", "user": "605b7085e4b079a07f8593fa"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %)", "user": "60538924e4b04c8f2157d153"}, {"problem": 33, "code": "(fn replicate [coll n]\n  (if (= n 1)\n    coll\n    (apply interleave (repeat n coll))))", "user": "6062e1bde4b03746e80ebf75"}, {"problem": 33, "code": "(fn [ls times]\n  (if (= times 1) \n    (concat ls '())\n    (apply interleave (repeat times ls))))", "user": "5f15b1e2e4b091ba50b4dbbd"}, {"problem": 33, "code": "(fn [myseq num]\n  (reverse (reduce\n            (fn [ a b ]\n              ;; (println (str \"a: \" a))\n              ;; (println (str \"b: \" b))\n              (println\n               (pr-str\n                (nth (iterate (fn [x] (cons b x)) '()) num )))\n              (concat\n               (nth (iterate (fn [x] (cons b x)) '()) num )\n               a))\n            (list)\n            (seq myseq))))", "user": "5ff82adae4b06df49cee14a4"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(take n (repeat %)) coll))", "user": "60654263e4b069485764ddc9"}, {"problem": 33, "code": "(fn [ls n] (mapcat (fn [s] (take n (iterate identity s))) ls))", "user": "605f5c69e4b03746e80ebf5e"}, {"problem": 33, "code": "(fn [coll reps]\n  (reduce #(concat %1 (repeat reps %2)) [] coll))", "user": "5f665d45e4b02876ed9fd02f"}, {"problem": 33, "code": "(fn my-replicate \n  [col n]\n  (reduce \n    (fn [col2 e]\n      (concat col2 (take n (repeat e)))\n    )\n    [] col)\n)", "user": "6065755ee4b069485764ddcc"}, {"problem": 33, "code": "(fn [ls n]\n  (mapcat #(repeat n %) ls))", "user": "606aafcfe4b069485764ddf6"}, {"problem": 33, "code": "(fn\n   [coll x]\n   (reduce\n     (fn\n       [result ele]\n       (into result\n             (loop [i x\n                    temp []]\n               (if (<= i 0)\n                 temp\n                 (recur (dec i) (conj temp ele))))))\n     [] coll))", "user": "60631c2ee4b069485764ddbd"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "60689984e4b069485764dde6"}, {"problem": 33, "code": "#(reduce (fn [a x] (concat a (repeat %2 x))) [] %1)", "user": "606a70a5e4b069485764ddf2"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "606b16b8e4b069485764ddf7"}, {"problem": 33, "code": "(fn [x n] (apply concat (map (partial repeat n) x)))", "user": "606e0a42e4b069485764de19"}, {"problem": 33, "code": "(fn replicate-seq [coll n]\n  (reduce (fn [x y] (concat x (take n (repeat y)))) [] coll))", "user": "605a876be4b000d535e6f53c"}, {"problem": 33, "code": "(fn [l c] (mapcat #(repeat c %)l))", "user": "606f005ae4b069485764de1b"}, {"problem": 33, "code": "(fn [lst n](mapcat #(replicate n %) lst))", "user": "606d75f5e4b069485764de13"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "606c87aae4b069485764de0d"}, {"problem": 33, "code": "(fn replicator [s n]\n  (reduce (fn [accum x]\n            (concat accum (repeat n x))) [] s))", "user": "5f6adf5ee4b02876ed9fd049"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(repeat n %) coll))", "user": "6066266de4b069485764ddd2"}, {"problem": 33, "code": "(fn [coll n](mapcat #(repeat n %) coll))", "user": "5eedfc62e4b07c55ae4a050e"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "606da089e4b069485764de15"}, {"problem": 33, "code": "(fn copy-elems [col n]\n  (mapcat #(apply vector (repeat n %)) col))", "user": "60606490e4b03746e80ebf67"}, {"problem": 33, "code": "#(reduce (fn[a b](concat a (repeat %2 b))) [] %1)", "user": "6045e761e4b02d28681c77bb"}, {"problem": 33, "code": "(fn [seq n] (mapcat #(repeat n %) seq))", "user": "6059f25de4b07e92fa001ad1"}, {"problem": 33, "code": "(fn [s n]\n   (seq (reduce\n        (fn [acc v]\n          (into acc (repeat n v)))\n        []\n        s)))", "user": "606e0e95e4b069485764de1a"}, {"problem": 33, "code": "(fn [a b] (mapcat #(repeat b %) a))", "user": "6074e088e4b069485764de4d"}, {"problem": 33, "code": "(fn\n    [s n]\n    (mapcat #(repeat n %) s)\n    )", "user": "6074f5ede4b069485764de52"}, {"problem": 33, "code": "(fn [elem n] (mapcat #(repeat n %) elem))   ;;;igual que el anteriro, mapcat va haciendo cada elemento pero en lugar de solo dos veces, repetimos n veces", "user": "6075c214e4b069485764de5b"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "60764350e4b069485764de5e"}, {"problem": 33, "code": "(fn [xs n] (reduce concat (map #(repeat n %)xs)))", "user": "606ff89be4b069485764de22"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n %) coll))", "user": "60794173e4b0a637ed78035d"}, {"problem": 33, "code": "(fn r [xs n]\n  (mapcat\n    #(repeat n %)\n    xs))", "user": "605b49b7e4b079a07f8593f8"}, {"problem": 33, "code": "(fn [init-seq times] (mapcat #(repeat times %) init-seq))", "user": "5f548678e4b0a0bc16850a7e"}, {"problem": 33, "code": "(fn [x n] (if (= n 1) x (apply interleave (repeat n x))))", "user": "6076adb2e4b069485764de60"}, {"problem": 33, "code": "(fn duplicate-each-n-times\n  [x n]\n  (cond\n   (empty? x) nil\n   :else (concat (repeat n (first x))\n                 (duplicate-each-n-times (rest x) n))))", "user": "5cf938a5e4b0b71b1d808a90"}, {"problem": 33, "code": "(fn [lst n] (mapcat repeat (repeat (count lst) n) lst ))", "user": "6074df6fe4b069485764de4b"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "607e1d32e4b03d835a6eaeda"}, {"problem": 33, "code": "(fn nrep[s n](mapcat #(repeat n %)s))", "user": "606ff56ce4b069485764de21"}, {"problem": 33, "code": "(fn [rando-seq n]\n  (loop [x rando-seq\n         counter n\n         new-seq '()]\n    (if (empty? x)\n      (reverse new-seq)\n      (if (= counter 0)\n        (recur (rest x) n new-seq)\n        (recur x (dec counter) (conj new-seq (first x)))))))", "user": "607d6bc1e4b03d835a6eaecc"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "6074e1ade4b069485764de4e"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "60777335e4b0a637ed78034f"}, {"problem": 33, "code": "(fn [x n] (mapcat #(repeat n %) x))", "user": "607d97a6e4b03d835a6eaecf"}, {"problem": 33, "code": "(fn [coll n] (mapcat (partial repeat n) coll))", "user": "5f82609ae4b0c071e6c840f9"}, {"problem": 33, "code": "#(reduce (fn [acc new] (concat acc (repeat %2 new))) [] %1)", "user": "6070c7bae4b069485764de27"}, {"problem": 33, "code": "(fn [coll n] (mapcat #(repeat n % ) coll))", "user": "60836285e4b0736b099e42e4"}, {"problem": 33, "code": "(fn replicate-seq [coll n]\n  (reduce #(into %1 (take n (repeat %2)))\n          []\n          coll))\n\n#_(fn replicate-seq [coll n]\n  (apply interleave (take n (repeat coll))))", "user": "608256d7e4b0736b099e42da"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "607a1523e4b0a637ed78036a"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "602c30e3e4b0d5df2af2226f"}, {"problem": 33, "code": "(fn pb33\n  [xs a]\n  (if (empty? xs)\n    '()\n    (concat (repeat a (first xs)) (pb33 (rest xs) a))))", "user": "608135c8e4b0736b099e42d1"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5f755d0be4b02876ed9fd0a9"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "6086cdefe4b0736b099e4302"}, {"problem": 33, "code": "(fn [lst n] (loop [newLst []\n                   i 0]\n              (if (= i (count lst))\n                newLst\n                (recur (concat newLst (repeat n (nth lst i))) (inc i)))))", "user": "607e1d9de4b03d835a6eaedb"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "6081e475e4b0736b099e42d6"}, {"problem": 33, "code": "#(mapcat (fn [input](repeat %2 input)) %1)", "user": "607e1c1fe4b03d835a6eaed8"}, {"problem": 33, "code": "(fn [lst times] (mapcat #(repeat times %) lst))", "user": "6074e1e4e4b069485764de4f"}, {"problem": 33, "code": "(fn replicate-a-sequence [s count]\n  (reduce (fn [acc cur] \n    (concat acc (repeat count cur))) [] s))", "user": "605714ffe4b069ae89ce6ae1"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %)", "user": "60759e51e4b069485764de5a"}, {"problem": 33, "code": "(fn [seq n] (mapcat #(repeat n %) seq))", "user": "60849bd6e4b0736b099e42f2"}, {"problem": 33, "code": "(fn mult [s n]\n  (apply concat (map #(repeat n %) s)))", "user": "607dd962e4b03d835a6eaed2"}, {"problem": 33, "code": "#(let [x (for [x %1] (repeat %2 x))]\n    (if (vector? (first %1))\n      (apply concat x)\n      (flatten x)))", "user": "5aa098fae4b0d174b936c82e"}, {"problem": 33, "code": "(fn [coll n]\n  (apply concat\n         (map (fn [coll] (repeat n coll)) coll)\n         )\n  )", "user": "60752ef6e4b069485764de55"}, {"problem": 33, "code": "(fn [seqq n]\n  (reduce concat (map #(repeat n %) seqq)))", "user": "6088395de4b0ae75613dcee2"}, {"problem": 33, "code": "(fn [element n](mapcat (partial repeat n) element))", "user": "6074dfa4e4b069485764de4c"}, {"problem": 33, "code": "(fn [t numb] (mapcat #(repeat numb %) t))", "user": "607e1cf9e4b03d835a6eaed9"}, {"problem": 33, "code": "(fn [x y]\n  (reduce concat (map #(repeat y %) x)))", "user": "6089bc95e4b0ae75613dcef5"}, {"problem": 33, "code": "(fn [s n]\n   (reduce (fn [a b] (concat a (repeat n b))) '() s))", "user": "60882700e4b0ae75613dcedf"}, {"problem": 33, "code": "(fn [coll n] (reduce concat (map #(repeat n %) coll)))", "user": "6074e278e4b069485764de51"}, {"problem": 33, "code": "(fn ReplicateASequence [lst n]\n       (for [x lst i (range n)] \n         x))", "user": "607508f3e4b069485764de54"}, {"problem": 33, "code": "(fn [p m] (mapcat (fn [n] (take m (repeat n))) p))", "user": "6085edade4b0736b099e42fc"}, {"problem": 33, "code": "(fn [x i] (mapcat #(repeat i %) x))", "user": "608b3fe1e4b0adce4b61c442"}, {"problem": 33, "code": "(fn [x y] (mapcat #(repeat y %) x))", "user": "6078ce29e4b0a637ed78035a"}, {"problem": 33, "code": "#(if (= %2 1) %1 (apply interleave (repeat %2 %1)))", "user": "60845eb8e4b0736b099e42ef"}, {"problem": 33, "code": "(fn [seq times]\n   (apply concat (map #(repeat times %) seq)))", "user": "5e7fb908e4b085ba37836e3f"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "608828dee4b0ae75613dcee1"}, {"problem": 33, "code": "(fn [sec n] (reduce concat (map #(repeat n %) sec)))", "user": "607f3336e4b05857a65e7747"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "6087cb25e4b0ae75613dced8"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "607b6452e4b0a637ed780375"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "6088c22ee4b0ae75613dcee4"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "6081b7fce4b0736b099e42d4"}, {"problem": 33, "code": "#(mapcat (apply juxt (repeat %2 identity)) %1)", "user": "608910a8e4b0ae75613dceed"}, {"problem": 33, "code": "(fn [col n]\n  (mapcat #(take n (iterate identity %)) col))", "user": "5fa52497e4b0fa27300f3dbf"}, {"problem": 33, "code": "(fn [s n] (reduce #(apply conj %1 (repeat n %2)) [] s))", "user": "5f1eec36e4b0f565ad998274"}, {"problem": 33, "code": "(fn ans-33 [arr, times]\n  (reduce concat (map #(repeat times %) arr)))", "user": "608fac60e4b03bd49d9f36c7"}, {"problem": 33, "code": "(fn [s n]\n  (->> s\n       (map #(repeat n %))\n       (reduce into)\n       (reverse)))", "user": "6090e617e4b03bd49d9f36ce"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5ff88607e4b06df49cee14a6"}, {"problem": 33, "code": "(fn [x n]\n  (mapcat #(repeat n %1) x))", "user": "608711b1e4b0736b099e4303"}, {"problem": 33, "code": "(fn [x y] (apply concat (#(map (partial repeat y) x))))", "user": "58e90258e4b056aecfd47cfd"}, {"problem": 33, "code": "(fn [v n] (mapcat #(repeat n %) v))", "user": "608ee2f7e4b03bd49d9f36c1"}, {"problem": 33, "code": "(fn [lst x] (mapcat #(repeat x %) lst))", "user": "608e6047e4b03bd49d9f36bf"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce #(concat %1 (repeat n %2)) [] coll))", "user": "608ec5e4e4b03bd49d9f36c0"}, {"problem": 33, "code": "(fn [coll n]\n  (reduce\n    (fn [result x] (into result (repeat n x)))\n  []\n  coll))", "user": "6098263be4b00e9e6653c3f9"}, {"problem": 33, "code": "(fn [xs n] (apply concat (map #(repeat n %) xs)))", "user": "5a383581e4b001c08efc0c97"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "609aa543e4b00e9e6653c40c"}, {"problem": 33, "code": "(fn replicate [s, count]\n  (if (empty? s) '()\n    (apply conj (replicate (rest s) count)\n      (take count (repeat (first s))))))", "user": "6096d37be4b00e9e6653c3f0"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat #(repeat n %) s))", "user": "609c1db9e4b00e9e6653c416"}, {"problem": 33, "code": "(fn my-replicate [x y] (if (<= (count x) 1)\n                    (repeat y (first x))\n                    (concat (repeat y (first x)) (my-replicate (rest x) y))))", "user": "6093cc08e4b00e9e6653c3e1"}, {"problem": 33, "code": "(fn [s n]\n  (reduce #(into %1 (repeat n %2)) [] s))", "user": "6086abade4b0736b099e42ff"}, {"problem": 33, "code": "#(mapcat(partial repeat %2) %1 )", "user": "60196a7fe4b0bf4ca6b10921"}, {"problem": 33, "code": "(fn [coll x]\n  (mapcat #(take x (iterate identity %)) coll))", "user": "5d63bb2be4b0c9e5857d5027"}, {"problem": 33, "code": "#(mapcat (partial repeat %2 ) %)", "user": "609a54f0e4b00e9e6653c40b"}, {"problem": 33, "code": "(fn [sq n]\n    (reduce into () (map #(repeat n %) (reverse sq))))", "user": "5f6580e7e4b02876ed9fd023"}, {"problem": 33, "code": "(fn [xs n] (reduce concat (map #(repeat n %) xs)))", "user": "6092bfefe4b00e9e6653c3db"}, {"problem": 33, "code": "(fn [coll n]\n  (for [x coll\n        _ (range n)]\n    x))", "user": "609a4ac8e4b00e9e6653c40a"}, {"problem": 33, "code": "(fn replicate-a-seq [s n]\n (apply concat (map #(repeat n %) s)))", "user": "608c270ae4b03bd49d9f36b3"}, {"problem": 33, "code": "#(apply concat (for [x %1] (repeat %2 x)))", "user": "60a14335e4b00e9e6653c432"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %)", "user": "609beb06e4b00e9e6653c412"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "60ab0ba2e4b00e9e6653c47d"}, {"problem": 33, "code": "(fn [xs t]\n  (mapcat #(repeat t %) xs))", "user": "558ffb4be4b0277789237667"}, {"problem": 33, "code": "(fn [coll t] (reduce #(concat %1 (repeat t %2)) [] coll))", "user": "60ab1536e4b00e9e6653c47e"}, {"problem": 33, "code": "(fn replicate_elems [lst, times]\n   (apply concat (map\n                  (fn [elem] (repeat times elem ))\n                  lst)))", "user": "60a7c55be4b00e9e6653c468"}, {"problem": 33, "code": "(fn [s n]\n  (apply concat (for [e s]\n                  (repeat n e))))", "user": "60a39b80e4b00e9e6653c450"}, {"problem": 33, "code": "(fn [coll n] \n  (reduce (fn [xs x] \n            ((fn [xs x n] \n               (if (zero? n)\n                 xs\n                 (recur (conj xs x) x (dec n)))) xs x n)) [] coll))", "user": "60ade833e4b00e9e6653c494"}, {"problem": 33, "code": "(fn [s n]\n  (reduce\n   #(concat %1 (take n (iterate identity %2)))\n  '()\n  s))", "user": "609e9b64e4b00e9e6653c426"}, {"problem": 33, "code": "(fn [col n-times]\n  (mapcat #(repeat n-times %) col))", "user": "60aeadd4e4b00e9e6653c499"}, {"problem": 33, "code": "(fn [values n]\n  (if (= n 1) values (apply interleave (replicate n values))))", "user": "60aecd73e4b00e9e6653c49a"}, {"problem": 33, "code": "(fn [myseq n]\n  (reduce (fn [acc nextval]\n            (concat acc (repeat n nextval)))\n          []\n          myseq))", "user": "60726211e4b069485764de36"}, {"problem": 33, "code": "(fn rep [sq n] (for [letter sq _ (apply range (list 0 n))] letter))", "user": "60b2aaebe4b0e0fa5f1b4228"}, {"problem": 33, "code": "#(mapcat (fn [item] (repeat %2 item)) %1)", "user": "60ac91c5e4b00e9e6653c485"}, {"problem": 33, "code": "#(reduce (fn [dseq elem]\n            (concat dseq (repeat %2 elem)))\n          [] %1)", "user": "60b1add0e4b0e0fa5f1b4227"}, {"problem": 33, "code": "(fn [array times] (mapcat (partial replicate times) array))", "user": "60a9a829e4b00e9e6653c470"}, {"problem": 33, "code": "(fn [sq n]\n    (loop [res '() lst sq]\n      (if (empty? lst)\n        res\n        (let [[x & remaining] lst\n              elems (take n (iterate identity x))]\n        \t(recur (concat res elems) remaining)))))", "user": "51b920bfe4b0e871ca4958f9"}, {"problem": 33, "code": "(fn dupe-seq [coll n]\n    (mapcat  #(repeat n %) coll))", "user": "6033f8e9e4b0d5df2af222c6"}, {"problem": 33, "code": "(fn replicate-seq [coll n]\n  (->> coll\n       (map #(repeat n %))\n       (reduce concat)))", "user": "60b3b8a9e4b0e0fa5f1b4233"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "60b61b40e4b0e0fa5f1b4244"}, {"problem": 33, "code": "(fn [xs n]\n  (->> xs\n       (map #(repeat n %))\n       (apply concat)))", "user": "60b57acee4b0e0fa5f1b4238"}, {"problem": 33, "code": "#(mapcat (fn [item]\n           (take %2 (repeat item)))\n         %1)", "user": "57123c96e4b09c608db70454"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "60b7e2c5e4b0e0fa5f1b4252"}, {"problem": 33, "code": ";(fn [a b] (interleave (take b (replicate b a))))\n(fn [a b] (mapcat #(repeat b %) a))", "user": "60b3b375e4b0e0fa5f1b4232"}, {"problem": 33, "code": "(fn [xs c]\n  (mapcat #(repeat c %) xs))", "user": "51bd78c3e4b0ff155d51d2b0"}, {"problem": 33, "code": "(fn [c n] (mapcat #(repeat n %) c))", "user": "604a3daee4b02d28681c77f2"}, {"problem": 33, "code": "(comp (partial apply concat)\n        #(map (partial repeat %2) %1))", "user": "5f2d6bc4e4b033932238a66e"}, {"problem": 33, "code": "(fn [ls ct] (mapcat #(repeat ct %) ls))", "user": "608e5697e4b03bd49d9f36be"}, {"problem": 33, "code": "(fn [coll n] (apply concat (map #(repeat n %) coll)))", "user": "5fd92743e4b05ac5b16ea11f"}, {"problem": 33, "code": "(fn [x y](mapcat #(repeat y %)x))", "user": "60c65b10e4b0e0fa5f1b42d3"}, {"problem": 33, "code": "(fn [coll n]\n  (mapcat #(apply vector (repeat n %)) coll))", "user": "60c0ceb7e4b0e0fa5f1b42a6"}, {"problem": 33, "code": "#(mapcat\n   (fn [s] (repeat %2 s)) %1)", "user": "60c4e5dfe4b0e0fa5f1b42cd"}, {"problem": 33, "code": "(fn duppy [v n]\n  (apply mapcat list\n         (repeat n v)))", "user": "60c91f48e4b0e0fa5f1b4304"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "60c558e9e4b0e0fa5f1b42ce"}, {"problem": 33, "code": "#(reduce\n  (fn [acc item]\n    (into acc (repeat %2 item)))\n  []\n  %1)", "user": "60b7ef35e4b0e0fa5f1b4254"}, {"problem": 33, "code": "(fn repl-seq\n  [coll timez]\n  (mapcat #(take timez (cycle (conj '() %) )) coll)\n  )", "user": "60c8e662e4b0e0fa5f1b4300"}, {"problem": 33, "code": "(fn my-replicate\n      [coll n]\n      (reduce (fn [acc val] (concat acc (repeat n val)))\n              []\n              coll))", "user": "60c90322e4b0e0fa5f1b4302"}, {"problem": 33, "code": "(fn [s n]\n  (mapcat #(repeat n %1) s))", "user": "60cb3836e4b0e0fa5f1b4315"}, {"problem": 33, "code": "#(mapcat (partial repeat %2) %1)", "user": "5e3d183fe4b01d43a70e8e11"}, {"problem": 33, "code": "(fn new-replicate [x n] (reduce concat (for [c x] (for [_ (range n)] c))))", "user": "60c86bbde4b0e0fa5f1b42fb"}, {"problem": 33, "code": "#(mapcat (fn [x] (repeat %2 x)) %1)", "user": "60c43b20e4b0e0fa5f1b42c9"}, {"problem": 33, "code": "(fn [arr n] (mapcat #(repeat n  %) arr))", "user": "60dd865ee4b0d8b48c489db3"}, {"problem": 33, "code": "(fn [s n] (mapcat #(repeat n %) s))", "user": "5d69a6e1e4b0db5d338d160e"}]