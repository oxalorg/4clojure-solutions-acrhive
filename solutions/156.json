[{"code": "(fn [x y] (reduce #(assoc % %2 x) {} y))", "problem": 156, "user": "4da3e51330acd6ed10482a68"}, {"code": "#(reduce into (for [k %2] {k %}))", "problem": 156, "user": "4f9597e0e4b0dcca54ed6cd4"}, {"code": "#(into {} (for [k %2] [k %]))", "problem": 156, "user": "4f6160a7e4b0defedf855fbe"}, {"code": "#(into {} (map vector %2 (repeat %)))", "problem": 156, "user": "4ef49c2c535dced4c769f238"}, {"code": "(fn [d s] (loop [s s acc {}]\n  (if (seq s) (recur (rest s) (assoc acc (first s) d)) acc)))", "problem": 156, "user": "4f9120d8e4b0dcca54ed6c96"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4eb298c1535d7eef3080734b"}, {"code": "(fn [default keyseq]\n  (apply hash-map (interleave keyseq (repeat (count keyseq) default))))", "problem": 156, "user": "4f1d1299535d64f603146487"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4f7f9665e4b033992c121bea"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "4e16bdef535d04ed9115e7e9"}, {"code": "(fn [d m] (reduce #(assoc %1 %2 d) {} m))", "problem": 156, "user": "4f97d8f3e4b0dcca54ed6ced"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4e9fd521535d7eef3080729a"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "4f8c5f4fe4b02e764a0a5198"}, {"code": "#(zipmap %2(repeat %1))", "problem": 156, "user": "4dd4034a535dae65d5c462df"}, {"code": "(fn [v keys] (reduce #(conj %1 [%2 v]) {} keys))", "problem": 156, "user": "4e7f8f85535db966e863cc44"}, {"code": "(fn [v ks]\n  (reduce #(assoc %1 %2 v) {} ks))", "problem": 156, "user": "4e568873535d8a8b8723a283"}, {"code": "(fn [d v] (apply hash-map (interleave v (repeat d))))", "problem": 156, "user": "4ee77f15535d93acb0a66868"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "4dc1ee85535d020aff1edf91"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4daa374930acd6ed13482a68"}, {"code": "(fn [default seq] (into {} (map #(vector % default) seq)))", "problem": 156, "user": "4f98ead0e4b0dcca54ed6cf8"}, {"code": "(fn [a b]\n  (apply merge (map (fn [c] {c a}) b)))", "problem": 156, "user": "4f3cd535e4b0e243712b1f56"}, {"code": "(fn\n  [d L]\n  (into {}\n        (map #(vec [% d]) L)))", "problem": 156, "user": "4db53f87535d87e67b28fe08"}, {"code": "(fn default-map [default keys]\n  (reduce (fn [map key]\n    (assoc map key default)) {} keys))", "problem": 156, "user": "4f9e3fd4e4b0dcca54ed6d2b"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4f83665ee4b033992c121c1c"}, {"code": "(fn def-map [defv keys]\n(apply hash-map (interleave keys (repeat defv))))", "problem": 156, "user": "4eb8ec4a535dfed6da9c6d4b"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "4f32a7f1e4b0d6649770a095"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4e52d815535d302ef430da77"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4db85282535d1e037afb218a"}, {"code": "(fn [d keys]\n          (apply merge (map (fn [k] {k d}) keys)))", "problem": 156, "user": "4e599577535d8a8b8723a29f"}, {"code": "#(zipmap %2 (repeat (count %2) %))", "problem": 156, "user": "4ee9ddb8535d93acb0a66896"}, {"code": "(fn [d coll] (into {} (map #(vec %&) coll (repeat d))))", "problem": 156, "user": "4e86d3cf535dceadca46984c"}, {"code": "#(zipmap %2(repeat %1))", "problem": 156, "user": "4df3d4f4535d08e6dec9fe2c"}, {"code": "#(apply assoc {} (interleave %2 (repeat %)))", "problem": 156, "user": "4f4ec77ae4b03ad3f0c10cd0"}, {"code": "(fn mapdef [v l] (if (empty? l) {} (assoc (mapdef v (pop l)) (peek l) v)))", "problem": 156, "user": "4f8b20fce4b02e764a0a5178"}, {"code": "(fn [dv ks]\n  (zipmap ks (repeat dv))\n)", "problem": 156, "user": "4f725201e4b07046d9f4f02f"}, {"code": "(fn [val keys]\n  (reduce (fn [map key]\n            (conj map [key val]))\n          {}\n          keys))", "problem": 156, "user": "4ee3b586535d10e5ff6f5371"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4e860e85535db62dc21a62f1"}, {"code": "#(zipmap %2 (cycle [%1]))", "problem": 156, "user": "4e823ed7535db62dc21a62c7"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4f0c4518535d0136e6c2230b"}, {"code": "(fn [x coll]\n  (into {} (map #(vector % x) coll)))", "problem": 156, "user": "4f49e869e4b0d56e7bb92c02"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "4ecf1f51535d1f5ad70dba3a"}, {"code": "(fn init-map-with4 [val keys]\n  (reduce #(assoc %1 %2 val) {} keys))", "problem": 156, "user": "4ef6f5ea535dced4c769f250"}, {"code": "#(apply hash-map (concat (interpose % %2) [%]))", "problem": 156, "user": "4db342d7535df7e46ed9b6cd"}, {"code": "(fn make-map [default keys]\r\n  (reduce (fn [coll key]\r\n      (assoc coll key default))\r\n\t  {}\r\n\t  keys))", "problem": 156, "user": "4f4e4ecbe4b03ad3f0c10cbf"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4df0524e535d08e6dec9fe17"}, {"code": "#(into {} (for [v [%1] k %2] [k v]))", "problem": 156, "user": "4f3fb586e4b0e243712b1f9c"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4ed7b617535d10e5ff6f52f3"}, {"code": "(fn [x coll] (reduce #(assoc %1 %2 x) {} coll))", "problem": 156, "user": "4f969214e4b0dcca54ed6cdd"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4f6fbb68e4b07046d9f4efeb"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4ee88bfb535d93acb0a66881"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4f954dbce4b0dcca54ed6ccd"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4f21838fe4b0d66497709fd2"}, {"code": "#(zipmap %2 (cycle [%1]))", "problem": 156, "user": "4e82f85d535db62dc21a62ce"}, {"code": "(fn \n  [default values] \n  (apply hash-map \n    (interleave values (repeat default))))", "problem": 156, "user": "4dbde85b535d020aff1edf52"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4f71347ae4b07046d9f4f009"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4daee8e9edd6309eace4d166"}, {"code": "(fn [d ks] (zipmap ks (repeat d)))", "problem": 156, "user": "4f0da4e4535d0136e6c22319"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4f7e29dde4b06e829148e1ca"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4fa0a4b1e4b0dcca54ed6d4f"}, {"code": "#(apply hash-map (reverse (conj (interpose %1 %2) %1)))", "problem": 156, "user": "4f9754d4e4b0dcca54ed6ce9"}, {"code": "#(zipmap %2(repeat %))", "problem": 156, "user": "4e1fe7f1535d04ed9115e810"}, {"code": "(fn [dflt s] (zipmap s (repeat dflt)))", "problem": 156, "user": "4f951375e4b0dcca54ed6cc8"}, {"code": "#(apply hash-map \n  (conj \n    (vec (interpose % %2))\n    %))", "problem": 156, "user": "4f8db862e4b02e764a0a51b2"}, {"code": "(fn [elt c]\n  (zipmap c (repeat elt))\n)", "problem": 156, "user": "4f84400de4b033992c121c2e"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4f9fe2b9e4b0dcca54ed6d40"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "4f8bbb27e4b02e764a0a5182"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "4f29eb2ae4b0d6649770a037"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "4db3393e535df7e46ed9b6cc"}, {"code": "(fn [x col]\n  (reduce #(conj %1 {%2 x}) {} col))", "problem": 156, "user": "4db2cc55535df7e46ed9b6c5"}, {"code": "#(reduce (fn [memo, val] (assoc memo val %1)) {} %2)", "problem": 156, "user": "4f969a66e4b0dcca54ed6cde"}, {"code": "#(into {} (map (fn [i] {i %1}) %2))", "problem": 156, "user": "4f0d5338535d0136e6c22316"}, {"code": "(fn [default args]\n (zipmap args (repeat default)))", "problem": 156, "user": "4e356d2b535deb9a81d77f2d"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4f9970b3e4b0dcca54ed6cfd"}, {"code": "#(reduce (fn [m v] (assoc m v %1)) {} %2 )", "problem": 156, "user": "4f69f34fe4b07046d9f4ef90"}, {"code": "(fn [d s] (reduce #(assoc % %2 d) {} s))", "problem": 156, "user": "4f4274f2e4b0d7d3c9f3fd00"}, {"code": "(fn [d ks] (zipmap ks (repeat d)))", "problem": 156, "user": "4ea41fc2535d7eef308072cb"}, {"code": "(fn [x s] (reduce #(assoc %1 %2 x) {} s))", "problem": 156, "user": "4ebc08a8535dfed6da9c6d7c"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4f71ba6ee4b07046d9f4f012"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4e707714535d5021c1a89638"}, {"code": "(fn [a b]\n  (reduce #(assoc %1 %2 a) {} b))", "problem": 156, "user": "4f73f78de4b044e54cd9a8f3"}, {"code": "#(apply hash-map (apply concat (for [x %2] [x %])))", "problem": 156, "user": "4ee82539535d93acb0a66878"}, {"code": "(fn [v s]\n   (apply array-map (mapcat (fn [x] [x v]) s))\n)", "problem": 156, "user": "4f7b6b90e4b06e829148e1a4"}, {"code": "(fn [d v] (reduce #(assoc %1 %2 d) {} v))", "problem": 156, "user": "4f465096e4b0d56e7bb92b9a"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4dbad895535d1e037afb21ae"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4f9d53f3e4b0dcca54ed6d21"}, {"code": "(fn [value keys]\n  (reduce #(conj %1 [%2 value]) {} keys))", "problem": 156, "user": "4e7f5a0b535db966e863cc41"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4effb663535dcb61093f6a2e"}, {"code": "(fn [default, keys] (reduce #(assoc %1 %2 default) {} keys))", "problem": 156, "user": "4f5595d4e4b0a7574ea71805"}, {"code": "(fn [val vec]\n  (into {} (map (fn [x] {x val}) vec)))", "problem": 156, "user": "4e955b95535dbda64a6f6b33"}, {"code": "(fn [x coll] (zipmap coll (repeat x)))", "problem": 156, "user": "4ebcb8ff535dfed6da9c6d8a"}, {"code": "#(zipmap %2 (iterate identity %1))", "problem": 156, "user": "4f5cc3b8e4b0030a34fb2b2b"}, {"code": "(fn [x coll]\n    (loop [coll coll\n           acc {}]\n      (if (empty? coll)\n        acc\n        (recur (next coll) (merge acc {(first coll) x})))))", "problem": 156, "user": "4fa2fa5ee4b081705acca186"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4f82ed48e4b033992c121c0e"}, {"code": "#(into {} (map vector %2 (repeat %)))", "problem": 156, "user": "4f991ec1e4b0dcca54ed6cfb"}, {"code": "(fn create-map [default keys]\r\n     (zipmap keys (repeat default)))", "problem": 156, "user": "4f82e14be4b033992c121c0c"}, {"code": "(fn [dval keys] (into {} (map #(vector % dval) keys )))", "problem": 156, "user": "4fa1aabee4b0dcca54ed6d61"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4e39d763535deb9a81d77f46"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4fa39b3ee4b081705acca191"}, {"code": "(fn [x y] (apply hash-map (interleave y (repeat x))))", "problem": 156, "user": "4ea4e98a535d7eef308072ce"}, {"code": "(fn [v xs] (zipmap xs (repeat v)))", "problem": 156, "user": "4f8345c6e4b033992c121c1b"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4f7d25b4e4b06e829148e1ba"}, {"code": "(fn [v k]\n  (reduce #(assoc % %2 v) {} k))", "problem": 156, "user": "4f410b63e4b0e243712b1fc5"}, {"code": "(fn [default keys] (reduce #(assoc %1 %2 default) {} keys))", "problem": 156, "user": "4fa30027e4b081705acca187"}, {"code": "#(apply array-map (interleave %2 (repeat (count %2) %1)))", "problem": 156, "user": "4f9f7daae4b0dcca54ed6d37"}, {"code": "(fn map-init-default\n  [default-value keys]\n  (zipmap keys (for [x (range (count keys))]\n                 default-value)))", "problem": 156, "user": "4fa27e18e4b0dcca54ed6d68"}, {"code": "(fn [d c] (into {} (map (fn [k] [k d]) c)))", "problem": 156, "user": "4ede8789535d10e5ff6f5337"}, {"code": "#(apply hash-map\n  (interleave %2 (repeat %1)))", "problem": 156, "user": "4fa5406fe4b081705acca1ac"}, {"code": "(fn [df sq]\n  (apply merge (for [x sq] (assoc {} x df) )))", "problem": 156, "user": "4f91f5b1e4b0dcca54ed6ca7"}, {"code": "(fn [v m] (reduce #(assoc %1 %2 v) {} m))", "problem": 156, "user": "4dc42799c647a3c54c2ddc71"}, {"code": "#(reduce (fn [m k] (assoc m k %1)) {} %2)", "problem": 156, "user": "4f06dcad535dcb61093f6c16"}, {"code": "(fn [default keys] (reduce #(assoc %1 %2 default) {} keys))", "problem": 156, "user": "4f40ccd9e4b0e243712b1fc0"}, {"code": "(fn [v k] (apply assoc {} (interleave k (repeat v))))", "problem": 156, "user": "4ef2da4f535dced4c769f224"}, {"code": "(fn f[v,ks] (reduce #(assoc % %2 v) {} ks))", "problem": 156, "user": "4ec0c7ba535dfed6da9c6da4"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4f99ae4ae4b0dcca54ed6d00"}, {"code": "(fn [d v] (->> d repeat (interleave v) (apply hash-map)))", "problem": 156, "user": "4ee26f01535d10e5ff6f5368"}, {"code": "(fn [default coll]\n  (zipmap coll (repeat default)))", "problem": 156, "user": "4dac39a28cc9d6edb8beb0b3"}, {"code": "(fn [val keys]  (apply hash-map  \n  (interleave keys (repeat val))))", "problem": 156, "user": "4e5fb634535d8ccf87e9fe4a"}, {"code": "(fn [v s]\n  (#(if (empty? %2)\n    %3\n    (recur %1 (rest %2) (assoc %3 (first %2) %1))) v s {}))", "problem": 156, "user": "4e8f4f64535d65386fec2149"}, {"code": "(fn [d coll]\n    (reduce #(assoc %1 %2 d) {} coll))", "problem": 156, "user": "4f1bee08535d64f60314647e"}, {"code": "(fn[val col]\n  \n  (reduce #(assoc %1 %2 val) \n\n      {}  col) \n  \n)", "problem": 156, "user": "4f6d9d7ee4b07046d9f4efcd"}, {"code": "#(apply assoc {} `[~@(interpose % %2) ~%])", "problem": 156, "user": "4e65027c535d8ccf87e9fe6e"}, {"code": "(fn [v s]\n  (reduce #(assoc %1 %2 v) {} s))", "problem": 156, "user": "4ef0a39b535dced4c769f20d"}, {"code": "(fn [d k] (reduce conj {} (map #(vector % d) k)))", "problem": 156, "user": "4fa7b013e4b081705acca1c8"}, {"code": ";(fn [n col] (zipmap col (repeat n)))\n(fn [n col] (apply hash-map (mapcat #(vector %1 %2) col (repeat n))))", "problem": 156, "user": "4f9510b5e4b0dcca54ed6cc7"}, {"code": "#(apply array-map\n  (interleave %2 (repeat %1)))", "problem": 156, "user": "4e65f9d4535d8ccf87e9fe73"}, {"code": "#(into {} (map vector %2 (repeat %1)))", "problem": 156, "user": "4fa6d532e4b081705acca1be"}, {"code": "(fn [d s] (apply merge (map #(hash-map % d) s)))", "problem": 156, "user": "4eb13d60535d7eef3080733f"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4e5d1912535d8a8b8723a2c9"}, {"code": "(fn [default keys] (zipmap keys (repeat default)))", "problem": 156, "user": "4f92884de4b0dcca54ed6caf"}, {"code": "(fn [e l]\n  (reduce #(merge % {%2 e}) {} l)\n)", "problem": 156, "user": "4ef48422535dced4c769f236"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "4ec28d86535dfed6da9c6dbc"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4dc78527535d8a4b2fd7428f"}, {"code": "#(into {} (map vector %2 (repeat %)))", "problem": 156, "user": "4f9acea6e4b0dcca54ed6d10"}, {"code": "(fn [d s] (reduce #(assoc % %2 d) {} s))", "problem": 156, "user": "4e9c81e8535dbda64a6f6b80"}, {"code": "(fn[a b](reduce #(assoc %1 %2 a) {} b))", "problem": 156, "user": "4e6a6d12535d8ccf87e9fee2"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4e6f578c535d5021c1a8961b"}, {"code": "(fn [v ks]\n  (zipmap ks (repeat (count ks) v)))", "problem": 156, "user": "4f62b29ce4b0defedf855fd9"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4e14108c535d04ed9115e7dd"}, {"code": "(fn [default xs]\n((\n  fn [default xs hash]\n (    \n    if (seq xs)\n    ( recur  default (next xs) ( conj hash [ (first xs) default ])   )\n    hash\n)\n)  default xs {})\n)", "problem": 156, "user": "4f8da0e2e4b02e764a0a51b1"}, {"code": "(fn [val keys]\n    (reduce #(assoc %1 %2 val) {} keys))", "problem": 156, "user": "4ed6238d535d10e5ff6f52de"}, {"code": "(fn [x y] \n  (apply merge\n    (for [key y] (assoc {} key x))))", "problem": 156, "user": "4f91c9b2e4b0dcca54ed6ca2"}, {"code": "(fn [x, y] (zipmap y (for [l y] x)))", "problem": 156, "user": "4dd579b5535dae65d5c462ea"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4f0d093b535d0136e6c22313"}, {"code": "(fn [dft coll]\n  (reduce #(conj {%2 dft} %1) {} coll))", "problem": 156, "user": "4edffe54535d10e5ff6f5347"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4fab31a8e4b081705acca215"}, {"code": "(fn [d l] (reduce #(conj %1 [%2 d]) {} l))", "problem": 156, "user": "4faae01ae4b081705acca206"}, {"code": "(fn [val keys] (reduce #(assoc %1 %2 val) {} keys))", "problem": 156, "user": "4fac10e8e4b081705acca222"}, {"code": "(fn [e l] (zipmap l (doall (repeat (count l) e))))", "problem": 156, "user": "4faac363e4b081705acca200"}, {"code": "(fn [d lst]\n  (into {} (map (fn [q] [q d]) lst)))", "problem": 156, "user": "4faa9593e4b081705acca1f9"}, {"code": "(fn mapDefaultSetter [default Sequence] (loop [x default y Sequence z (hash-map)] \n(if (empty? y) z (recur x (rest y) (conj z [(first y) x])))))", "problem": 156, "user": "4f9336ece4b0dcca54ed6cb7"}, {"code": "#(into {} (map (fn [e] {e %}) %2))", "problem": 156, "user": "4e49badd535dc968683fc4c9"}, {"code": "(fn [v s] (zipmap s (repeat v)))", "problem": 156, "user": "4facd2fae4b081705acca22f"}, {"code": "#(zipmap %2 (repeat (.length %2) %1))", "problem": 156, "user": "4ed2dd98535d44c135fd68e2"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4fabb1dce4b081705acca21a"}, {"code": "(fn [x m] (zipmap m (repeat x)))", "problem": 156, "user": "4fa6a491e4b081705acca1bc"}, {"code": "(fn [d m] (reduce #(assoc %1 %2 d) {} m))", "problem": 156, "user": "4f85a75ce4b033992c121c48"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4f8386c5e4b033992c121c1d"}, {"code": "(fn [default ks] (into {} (for [k ks] [k default])))", "problem": 156, "user": "4e0e0529535d04ed9115e7b9"}, {"code": "(fn [v keys]\n  (loop [ks keys res {}]\n    (if (seq ks)\n        (recur (rest ks) (conj res [(first ks) v]))\n        res)))", "problem": 156, "user": "4fadbc3fe4b081705acca23f"}, {"code": "#(zipmap %2 (iterate identity %1))", "problem": 156, "user": "4facff22e4b081705acca230"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4fa9e9c6e4b081705acca1e9"}, {"code": "(fn [v ks]\n  (loop [k ks m {}]\n    (if (empty? k) m\n        (recur (rest k) (assoc m (first k) v)))))", "problem": 156, "user": "4fae258de4b081705acca246"}, {"code": "(fn [x & [y]] (zipmap y (repeat x)))", "problem": 156, "user": "4f58d922e4b0a7574ea71857"}, {"code": "#(into {} (for [x %2] {x %1}))", "problem": 156, "user": "4faa8479e4b081705acca1f7"}, {"code": "(fn defaults [v s]\n  \t(apply hash-map \n\t\t\t(reverse\n\t\t\t\t(conj (interpose v s) v))))", "problem": 156, "user": "4fa67030e4b081705acca1b7"}, {"code": "(fn [val keys]\n   (reduce conj (for [key keys] {key val})))", "problem": 156, "user": "4f99cfc2e4b0dcca54ed6d02"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4f404dcee4b0e243712b1fb0"}, {"code": "(fn makemap [dv keys]\n  (loop [m {}\n         k keys]\n     (if (empty? k) m\n        (recur (conj m [(first k) dv]) (rest k)))))", "problem": 156, "user": "4f036fb3535dcb61093f6ac8"}, {"code": "#(into {} (map vector %2 (repeat %1)))", "problem": 156, "user": "4fab259ae4b081705acca212"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4faf6f1ae4b081705acca255"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4e5fe31a535d8ccf87e9fe50"}, {"code": "(fn [val keys] (apply hash-map (reduce (fn [acc el] (conj acc val el)) nil keys)))", "problem": 156, "user": "4faf97d8e4b081705acca258"}, {"code": "(fn [d m] (into {} (map (fn [e] [e d]) m)))", "problem": 156, "user": "4f3ec266e4b0e243712b1f8c"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4f727023e4b07046d9f4f035"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4fad33e8e4b081705acca236"}, {"code": "(fn [dflt kys]\n  (reduce #(assoc % %2 dflt) {} kys))", "problem": 156, "user": "4f569218e4b0a7574ea71826"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4ec5a5f9535d6d7199dd36ad"}, {"code": "(fn [x y]\n  (apply hash-map (interleave y (repeat x))))", "problem": 156, "user": "4ddee37c535d08e6dec9fddc"}, {"code": "#(into {}\n       (for [k %2]\n         [k %]))", "problem": 156, "user": "4dabb7b1950ed6eda1bd72f3"}, {"code": "#(reduce conj {} (for [k %2] {k %}))", "problem": 156, "user": "4dce6e41535d5973398f92a2"}, {"code": "#(loop [m {} seq %2]\n  (if (= seq '())\n    m\n    (recur (conj m (vector (first seq) %1))\n            (rest seq))))", "problem": 156, "user": "4faec810e4b081705acca24e"}, {"code": "#(into {} (map vector %2 (repeat %1)))", "problem": 156, "user": "4fad77a6e4b081705acca23a"}, {"code": "(fn [d ks] (zipmap ks (repeat d)))", "problem": 156, "user": "4f301d02e4b0d6649770a072"}, {"code": "#(into {} (for [x %2] [x %]))", "problem": 156, "user": "4e50e2a0535dc968683fc4ef"}, {"code": "(fn [s c] (into {} (map (fn [x] [x s]) c)))", "problem": 156, "user": "4dbbdf86535d3f4042261ece"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4e43b0d9535dc968683fc4a3"}, {"code": "(fn default-map [vals keys]\r\n  (zipmap keys (repeat (count keys) vals)))", "problem": 156, "user": "4f20c040e4b0d66497709fcb"}, {"code": "(fn [value keys] (zipmap keys (repeat (count keys) value)))", "problem": 156, "user": "4f3e05a8e4b0e243712b1f79"}, {"code": "(fn [a b] (zipmap b (repeat a)))", "problem": 156, "user": "4e6eff83535d5021c1a89615"}, {"code": "(fn [x y] (apply hash-map (#(interleave %2 (repeat %1)) x y)))", "problem": 156, "user": "4daeabf6edd6309eace4d15c"}, {"code": "(fn [x y] (reduce merge (map #(hash-map % x) y)))", "problem": 156, "user": "4ea09d5c535d7eef308072a9"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4deff9f9535d08e6dec9fe15"}, {"code": "#(zipmap %2 (iterate identity %))", "problem": 156, "user": "4ec5d62c535d6d7199dd36ba"}, {"code": "(fn [value keys] (reduce #(conj %1 [%2 value]) {} keys))", "problem": 156, "user": "4fb2101ce4b081705acca284"}, {"code": "(fn [d k]\n  (reduce #(into %1 [[%2, d]]) {} k))", "problem": 156, "user": "4df407c3535d08e6dec9fe2e"}, {"code": "(fn [v ks] (zipmap ks (repeat v)))", "problem": 156, "user": "4f050dec535dcb61093f6bef"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4e976f79535dbda64a6f6b55"}, {"code": "(fn [val keys]\n  (reduce clojure.set/union (map #(hash-map % val) keys)))", "problem": 156, "user": "4e49a7bb535dc968683fc4c6"}, {"code": "(fn f1 [dval keys] \n  (if (empty? keys) {}\n     (conj (f1 dval (rest keys)) (hash-map (first keys) dval))))", "problem": 156, "user": "4fab0b6be4b081705acca20c"}, {"code": "(fn [x ys] (zipmap ys (repeat (count ys) x)))", "problem": 156, "user": "4f748b54e4b044e54cd9a8fa"}, {"code": "(fn map_create [x,y] \n  (reduce merge (map #(hash-map % x) y)))", "problem": 156, "user": "4fb0c8dde4b081705acca26d"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4f0446f9535dcb61093f6bb8"}, {"code": "(fn [d xs]\n  (zipmap xs (repeat d)))", "problem": 156, "user": "4eb59464535d7eef30807369"}, {"code": "(fn [d ks](zipmap ks (repeat (count ks) d)))", "problem": 156, "user": "4fb069b1e4b081705acca266"}, {"code": "(fn [x v] (reduce #(assoc %1 %2 x) {} v))", "problem": 156, "user": "4dbdab4e535d020aff1edf49"}, {"code": "(fn [x ls] (into {} (for [i ls] [i x])))", "problem": 156, "user": "4fb4303fe4b081705acca2ac"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "4f4f0287e4b03ad3f0c10cd7"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4fb4099be4b081705acca2a9"}, {"code": "(fn [default-val keys]\r\n  (zipmap keys\r\n          (repeat default-val)))", "problem": 156, "user": "4fabbb97e4b081705acca21d"}, {"code": "(fn [d l] (reduce (fn [x y] (conj x [y d])) {} l))", "problem": 156, "user": "4fb3fec7e4b081705acca2a7"}, {"code": "(fn [default keyz]\n  (apply merge (map (fn [x] (hash-map x default) ) keyz) )\n)", "problem": 156, "user": "4f031e58535dcb61093f6a66"}, {"code": "(fn my-map-thing [n s]\n  (let [def-seq (take (count s) (repeat n))]\n  (zipmap s def-seq)\n  )\n)", "problem": 156, "user": "4faacc04e4b081705acca201"}, {"code": "(fn map-defaults\n  [dflt keys]\n  (apply merge (map #(hash-map % dflt) keys)))", "problem": 156, "user": "4f6bab49e4b07046d9f4efb1"}, {"code": "(fn l [d k]\n  (if (empty? k)\n    nil\n    (merge {(first k) d} (l d (rest k)))))", "problem": 156, "user": "4f7fc9a1e4b033992c121bee"}, {"code": "(fn [v s] (zipmap s (repeat v)))", "problem": 156, "user": "4fb510b5e4b081705acca2b8"}, {"code": "(fn [d m] (zipmap m (repeat (count m) d)))", "problem": 156, "user": "4f98da04e4b0dcca54ed6cf7"}, {"code": "(fn [d l]\n  (reduce #(assoc % %2 d) {} l)\n  )", "problem": 156, "user": "4e6e10d8535d5021c1a895fd"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4fb54e50e4b081705acca2bb"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4dae4da5c9a9d6ed4e99dc57"}, {"code": "(fn [d s]\n  (loop [m {} s s]\n    (if (empty? s)\n    m\n    (recur (conj m [(first s) d]) (rest s)))))", "problem": 156, "user": "4fb79872e4b081705acca2d2"}, {"code": "(fn[k xs](apply hash-map (interleave xs (repeat k))))", "problem": 156, "user": "4faf897be4b081705acca257"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4f4e7c01e4b03ad3f0c10cc9"}, {"code": "(fn [key values]\n  (apply hash-map (mapcat #(list % key) values)))", "problem": 156, "user": "4e83bb61535db62dc21a62dd"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4ec74de3535d6d7199dd36df"}, {"code": "(fn [x y] (reduce conj {} (for [key y] [key x])))", "problem": 156, "user": "4fb86dc9e4b081705acca2d8"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4fa78336e4b081705acca1c4"}, {"code": "(fn [ x ks ] (reduce #(assoc %1 %2 x) {} ks))", "problem": 156, "user": "4e7ada51535db169f9c796ae"}, {"code": "(fn[x y](zipmap y (repeat (count y) x)))", "problem": 156, "user": "4f32135ae4b0d6649770a08e"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4ee4f4a9535d1385b2869d85"}, {"code": "#(zipmap %2  (repeat %1))", "problem": 156, "user": "4e739e13535dff18050a9c76"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4fb3b865e4b081705acca2a2"}, {"code": "#(into {} (for [x %2] [x %]))", "problem": 156, "user": "4f0664bd535dcb61093f6c0f"}, {"code": "(fn [value keys] (zipmap keys (repeat (count keys) value)))", "problem": 156, "user": "4fb65f2fe4b081705acca2c7"}, {"code": "#(zipmap %2 [% % %])", "problem": 156, "user": "4fbacdbae4b081705acca2e5"}, {"code": "(fn [v ks] (reduce #(conj %1 [%2 v]) {} ks))", "problem": 156, "user": "4ee85476535d93acb0a6687c"}, {"code": "(fn n156\n  [default ks]\n  (into {} (map #(vector % default) ks)))", "problem": 156, "user": "4e7f32ee535db966e863cc3a"}, {"code": "(fn [c coll]  (apply hash-map (apply concat (for [x coll] [x c]  )) ))", "problem": 156, "user": "4f038ed6535dcb61093f6b24"}, {"code": "#(reduce (fn [i v] (assoc i v %1)) {} %2)", "problem": 156, "user": "4f3e6244e4b0e243712b1f85"}, {"code": "(fn [default ks] (into {} (for [k ks] [k default])))", "problem": 156, "user": "4ed188c8535d44c135fd68cf"}, {"code": "(fn [d k]\n  ((fn make-defaults [d k m]\n    (if \n      (empty? k) m\n      (make-defaults d (rest k) (assoc m (first k) d)))) d (reverse k) {}))", "problem": 156, "user": "4f8c50f9e4b02e764a0a5195"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4fba7d1ee4b081705acca2e0"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4f7e07f4e4b06e829148e1c9"}, {"code": "#(zipmap %2 (cycle [%]))", "problem": 156, "user": "4e8612f8535db62dc21a62f2"}, {"code": "(fn [d ks]\n  (apply merge\n  (for [k ks] {k d})))", "problem": 156, "user": "4fac80d1e4b081705acca22a"}, {"code": "(fn [d-val key-vec] (into {} (map #(hash-map % d-val) key-vec)))", "problem": 156, "user": "4f18677d535d64f603146459"}, {"code": "(fn [df ks]\n  (apply merge \n    (map #(assoc {} % df) ks)))", "problem": 156, "user": "4fbe42b7e4b081705acca30f"}, {"code": "(fn [x m]\r\n  (reduce #(assoc %1 %2 x) {} m))", "problem": 156, "user": "4fb37882e4b081705acca2a0"}, {"code": "#(into {} (for [k %2] [k %1]))", "problem": 156, "user": "4fba0877e4b081705acca2dd"}, {"code": "(fn [x y] (into {} (for [v y] {v x})))", "problem": 156, "user": "4eb44d78535d7eef30807360"}, {"code": "(fn [default seq](reduce \n  #(assoc %1 %2 default) {} seq))", "problem": 156, "user": "4fc0221ce4b081705acca322"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4ec70f26535d6d7199dd36dd"}, {"code": "(fn [default s] (into {} (map vector s (repeat default))))", "problem": 156, "user": "4f284db6e4b0d6649770a014"}, {"code": "(fn [default coll] (into {} (map #(hash-map %1 default) coll)))", "problem": 156, "user": "4faa6184e4b081705acca1f1"}, {"code": "#(zipmap %2 \n  (into [] (take (count %2) (repeat %1))))", "problem": 156, "user": "4fbfbd4fe4b081705acca31c"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4e704293535d5021c1a89634"}, {"code": "(fn [v ks]\r\n        (into {} (map #(zipmap [%] [v]) ks)))", "problem": 156, "user": "4e028764535d04ed9115e790"}, {"code": "(fn [v k] (reduce #(assoc %1 %2 v) {} k))", "problem": 156, "user": "4fc0853ae4b081705acca327"}, {"code": "(fn[d ks]\n  (apply merge (map #(hash-map % d) ks)))", "problem": 156, "user": "4fc18846e4b081705acca331"}, {"code": "(fn y [ww yy] \n  (if (empty? yy) \n      () \n      (conj { (first yy)  ww } \n      (y ww (rest yy))) ))", "problem": 156, "user": "4fbd292fe4b081705acca300"}, {"code": "(fn [e v] (into {} (map #(vector % e) v)))", "problem": 156, "user": "4f68c485e4b07046d9f4ef7c"}, {"code": "#(apply hash-map\n(interleave %2 (repeat %1))\n          )", "problem": 156, "user": "4f2004a1535d64f6031464a7"}, {"code": "#(reduce (fn [acc k] (conj acc [k %1])) {} %2)", "problem": 156, "user": "4f88ae35e4b033992c121c6d"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4f3976aee4b0e243712b1eea"}, {"code": "#(apply hash-map (concat (interpose %1 %2) (vector %1)))", "problem": 156, "user": "4fb2f9b2e4b081705acca294"}, {"code": "(fn [x y] (zipmap y (repeat x)))", "problem": 156, "user": "4f826548e4b033992c121c08"}, {"code": "#(into {} (map vector %2 (repeat %)))", "problem": 156, "user": "4e6a5a32535d8ccf87e9fed0"}, {"code": "#(apply hash-map (interleave %2 (repeat (count %2) %)))", "problem": 156, "user": "4fb5033ce4b081705acca2b5"}, {"code": "#(apply conj (for [k %2] {k %1}))", "problem": 156, "user": "4f876d51e4b033992c121c5a"}, {"code": "#(reduce (fn [m k] (assoc m k %1)) {} %2)", "problem": 156, "user": "4fc5e24ee4b0ee37620e1801"}, {"code": "#(into {} (for [a %2] [a %1]))", "problem": 156, "user": "4db1b5841254ad5b4805fa70"}, {"code": "(fn [init ks]\n  (zipmap\n    ks\n    (repeat init)))", "problem": 156, "user": "4fb1d907e4b081705acca282"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4f039a8b535dcb61093f6b36"}, {"code": "(fn [default keys]\n  (apply hash-map (interleave keys (repeat (count keys) default))))", "problem": 156, "user": "4fc6d2c1e4b0ee37620e181b"}, {"code": "#(into {} (map vector %2 (repeat %)))", "problem": 156, "user": "4db858d1535d1e037afb218c"}, {"code": "#(into {} (map vector %2 (repeat (count %2) %1)))", "problem": 156, "user": "4fbdcb87e4b081705acca30a"}, {"code": "(fn [dv sk] (reduce (fn [val it] (assoc val it dv)) {} sk))", "problem": 156, "user": "4fc52d79e4b081705acca386"}, {"code": "#(into {} (map vector %2 (cycle [%1])))", "problem": 156, "user": "4e513758535dc968683fc4f3"}, {"code": "#(reduce (fn [m x] (assoc m x %)) {} %2)", "problem": 156, "user": "4fc4eadee4b081705acca353"}, {"code": "(fn [d ks]\n    (zipmap ks (repeat d)))", "problem": 156, "user": "4e6a0667535d8ccf87e9fe9e"}, {"code": "(fn [val coll] (reduce #(assoc %1 %2 val) {} coll))", "problem": 156, "user": "4fc66c43e4b0ee37620e1812"}, {"code": "(fn [val keys]\n  (zipmap keys (repeat (count keys) val)))", "problem": 156, "user": "4ea1b9e4535d7eef308072b8"}, {"code": "(fn[a b](reduce #(assoc % (first (keys %2)) (first (vals %2))) (map #(hash-map % a) b)))", "problem": 156, "user": "4fb3dd1ee4b081705acca2a5"}, {"code": "(fn [x coll] (reduce #(assoc %1 %2 x)  {} coll))", "problem": 156, "user": "4fa05b99e4b0dcca54ed6d47"}, {"code": "(fn [x y] (apply merge (map #(hash-map % x) y)))", "problem": 156, "user": "4db4714f535dc0f10411755a"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4f387c2ee4b0e243712b1edd"}, {"code": "(fn [d k]\n  (zipmap k (repeat d)))", "problem": 156, "user": "4fc8c8d8e4b0ee37620e183b"}, {"code": "#(zipmap %2 (for [x %2] %1))", "problem": 156, "user": "4fc4dca8e4b081705acca350"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "4f515bd3e4b03ad3f0c10d1f"}, {"code": "(fn me [d l]\n(if (empty? l)\n{}\n(assoc (me d (rest l)) (first l) d)\n)\n)", "problem": 156, "user": "4fc7b079e4b0ee37620e1827"}, {"code": "(fn [df keys]\n  (into {} (for [k keys] {k df})))", "problem": 156, "user": "4fc7db47e4b0ee37620e182a"}, {"code": "(fn [d k] (reduce #(assoc %1 %2 d) {} k))", "problem": 156, "user": "4fca1cd6e4b0ee37620e184c"}, {"code": "(fn [default keys]\n  (into {} (map #(vector % default) keys)))", "problem": 156, "user": "4f7431d2e4b044e54cd9a8f7"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4fc8f1fee4b0ee37620e183f"}, {"code": "(fn [default keys]\n  (let [m {}]\n    (into m\n      (for [k keys]\n        (assoc m k default)))))", "problem": 156, "user": "4eb99b3d535dfed6da9c6d57"}, {"code": "#(into {} (map vector %2 (repeat %)))", "problem": 156, "user": "4eaf0d91535d7eef3080732e"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "4f1b92d1535d64f60314647b"}, {"code": "(fn rec [d c] (if (empty? c) {} (conj (rec d (rest c)) {(first c) d})))", "problem": 156, "user": "4fcc103fe4b0ee37620e185f"}, {"code": "#(apply conj \n    (map \n      (fn [z] \n        {z %1})\n      %2))", "problem": 156, "user": "4ea7999e535d7eef308072ee"}, {"code": "(fn [v ks]\n  (reduce conj\n    {(first ks) v}\n    (map (fn [x] [x v]) (rest ks))))", "problem": 156, "user": "4fcbc18ae4b0ee37620e185c"}, {"code": "(fn [v ks] (reduce (fn [m k] (assoc m k v)) {} ks))", "problem": 156, "user": "4f9907f8e4b0dcca54ed6cfa"}, {"code": "#(zipmap %2 (iterate identity %))", "problem": 156, "user": "4fb23582e4b081705acca28a"}, {"code": "(fn [a b] (reduce #(assoc %1 %2 a) {} b))", "problem": 156, "user": "4e6dc95a535d5021c1a895f1"}, {"code": "(fn [d m]\n  (apply hash-map (concat (interpose d m) (list d))))", "problem": 156, "user": "4fcd155de4b065de69964ca3"}, {"code": "(fn [v m] (zipmap m (repeat v)))", "problem": 156, "user": "4f9174d0e4b0dcca54ed6c9b"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4fc67081e4b0ee37620e1813"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4daddc19c9a9d6ed4599dc57"}, {"code": "(fn [default x] (apply conj {} (map #(hash-map % default) x)))", "problem": 156, "user": "4ee52c44535d1385b2869d88"}, {"code": "(fn[v c](apply hash-map (mapcat #(list % %2) c (repeat v))))", "problem": 156, "user": "4de8a7d7535d08e6dec9fdfe"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4ee6166e535d93acb0a66854"}, {"code": "(fn map-defaults [default, keys]\n  (let [args (apply concat (for [k keys] [k default]))]\n    (apply hash-map args)))", "problem": 156, "user": "4fcaf7a4e4b0ee37620e1857"}, {"code": "(fn [default ks]\n  (reduce #(assoc %1 %2 default) {} ks))", "problem": 156, "user": "4fce5474e4b0d4b2a7a9d451"}, {"code": "(fn [v ks]\n  (zipmap ks (repeat (count ks) v)))", "problem": 156, "user": "4fbb9d80e4b081705acca2ea"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4f4bd422e4b03ad3f0c10c7e"}, {"code": "(fn [x y] (apply hash-map (interleave y (repeat (count y) x))))", "problem": 156, "user": "4fccdc75e4b0ee37620e186d"}, {"code": "#(zipmap\n   %2 (repeat %1)  \n)", "problem": 156, "user": "4fb4d4ede4b081705acca2b1"}, {"code": "(fn[v s]\n  (reduce #(conj %1 [%2 v]) {} s))", "problem": 156, "user": "4dbd2aa3535d020aff1edf40"}, {"code": "#(zipmap %2 (repeat %1) )", "problem": 156, "user": "4fcad14ce4b0ee37620e1856"}, {"code": "(fn [df ks]\n  (loop [map {} keys ks]\n    (cond (empty? keys) map\n      :else (recur (assoc map (first keys) df) (rest keys)))))", "problem": 156, "user": "4fbd1ebbe4b081705acca2fe"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4fcfa1dae4b03432b189f41b"}, {"code": "(fn [default list] (reduce (fn [map item] (conj map [item default])) {} list))", "problem": 156, "user": "4f2f6678e4b0d6649770a06e"}, {"code": "#(zipmap%2[%%%])", "problem": 156, "user": "4fba83e7e4b081705acca2e1"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4fccb31be4b0ee37620e1868"}, {"code": "(fn [x y] (zipmap y (take (count y) (repeat x))))", "problem": 156, "user": "4fcf7170e4b03432b189f412"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4e6ebd4a535d5021c1a89610"}, {"code": "(fn [val keys] (into {} (for [key keys] [key val])))", "problem": 156, "user": "4fd1971ae4b04c3a95aa0412"}, {"code": "(fn [v m] (zipmap m (repeat v)))", "problem": 156, "user": "4fbcbd50e4b081705acca2f9"}, {"code": "#(zipmap %2 (repeat (count %2) %))", "problem": 156, "user": "4fd2789ee4b04c3a95aa0422"}, {"code": "(fn [x y]\n  (apply hash-map\n    (reduce into (map #(vector % x) y))))", "problem": 156, "user": "4fd2e5d8e4b04c3a95aa0427"}, {"code": "(fn [d m] (apply hash-map (mapcat #(list % d) m)))", "problem": 156, "user": "4fcebce4e4b03432b189f404"}, {"code": "#(apply assoc {} (interleave %2 (repeat %1)))", "problem": 156, "user": "4fd11a93e4b04c3a95aa040a"}, {"code": "(fn[i v] (into {} (let [m {}] (for [k v] (assoc m k i)))))", "problem": 156, "user": "4f148418535d64f60314643a"}, {"code": "#(into {}\n  (map (fn [key] [key %1]) %2))", "problem": 156, "user": "4fb12b35e4b081705acca275"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4ef89fb0535dced4c769f260"}, {"code": "#(zipmap %2 (take (count %2) (repeat %)))", "problem": 156, "user": "4f3e5e87e4b0e243712b1f83"}, {"code": "(fn [default s] \n  (zipmap s (repeat default)))", "problem": 156, "user": "4ec3b393535dcc7ae8597d59"}, {"code": "(fn map-defaults\n  [default-val s]\n    (reduce #(assoc %1 %2 default-val) {} s))", "problem": 156, "user": "4fd16778e4b04c3a95aa040f"}, {"code": "#(zipmap %2 (iterate identity %1))", "problem": 156, "user": "4ee7d113535d93acb0a6686e"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4fa9c945e4b081705acca1e5"}, {"code": "(fn blah\n  [d xs] (cond\n    (empty? xs) {}\n    :else (conj (blah d (rest xs)) [(first xs) d])))", "problem": 156, "user": "4fd6f4d8e4b0dab7d829f37b"}, {"code": "#(into {} (for [key %2] (hash-map key %1)))", "problem": 156, "user": "4e7ec984535db169f9c7971c"}, {"code": "(fn [v s]\n  (apply hash-map (interleave s (repeat (count s) v))))", "problem": 156, "user": "4db0114d838c48654951d9b8"}, {"code": "(fn [x xs]\n  (reduce #(conj {%2 x} %1) {} xs))", "problem": 156, "user": "4db883e1535d1e037afb2198"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4fb1159fe4b081705acca273"}, {"code": "(fn [x y] (reduce #(assoc %1 %2 x) {} y))", "problem": 156, "user": "4dcc5aff535d5973398f9293"}, {"code": "(fn [x s]\n  (reduce #(assoc % %2 x) {} s))", "problem": 156, "user": "4fd2529ae4b04c3a95aa041f"}, {"code": "(fn [d xs] (zipmap xs (iterate identity d)))", "problem": 156, "user": "4dd61f98535d2dad7130b5c6"}, {"code": "(fn [default keys]\r\n    (zipmap keys (repeat (count keys) default)))", "problem": 156, "user": "4f039bbe535dcb61093f6b39"}, {"code": "#( zipmap %2 (repeat %))", "problem": 156, "user": "4fd22e70e4b04c3a95aa041c"}, {"code": "#(into {} (for [x %2] [x %1]))", "problem": 156, "user": "4db016af838c48654951d9b9"}, {"code": "(fn [x v] (loop [vect v m {}] (if (seq vect) \r\n(recur (rest vect) (conj m {(first vect) x})) m)))", "problem": 156, "user": "4fca2ef0e4b0ee37620e184e"}, {"code": "(fn [v m] (apply hash-map (interleave m (repeat v))))", "problem": 156, "user": "4fd1fa71e4b04c3a95aa0418"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4e6e2ac4535d5021c1a895ff"}, {"code": "(fn [d a]\n  (apply conj (map #(hash-map % d) a)))", "problem": 156, "user": "4fc93728e4b0ee37620e1844"}, {"code": "(fn [d col] (into {} (for [e col] [e d])))", "problem": 156, "user": "4fd7962ee4b0dab7d829f385"}, {"code": "(fn [d S]\n  (loop [m {},S S]\n    (if (not= S '())\n      (recur (assoc m (first S) d) (rest S))\n      m)))", "problem": 156, "user": "4fda016ae4b05e33b9224f42"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4fd96694e4b05e33b9224f37"}, {"code": "(fn [val keys]\n  (apply hash-map \n    (reduce \n      (partial apply conj) \n        (for [x keys] [x val]))))", "problem": 156, "user": "4fd9f5dbe4b05e33b9224f41"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4e89f46c535d3e98b8023288"}, {"code": "(fn [x y] (reduce #(assoc %1 %2 x) {} y))", "problem": 156, "user": "4fadbb17e4b081705acca23e"}, {"code": "(fn new-map [default keys] (zipmap keys (map (fn [x] default) (range (count keys)))))", "problem": 156, "user": "4fd8544be4b0dab7d829f390"}, {"code": "#(zipmap %2 (cycle (list %1)))", "problem": 156, "user": "4e68b46c535d8ccf87e9fe87"}, {"code": "(fn [a b] (reduce #(assoc %1 %2 a) {} b))", "problem": 156, "user": "4e513ecf535dc968683fc4f6"}, {"code": "#(into {} (for [k %2] [k %1]))", "problem": 156, "user": "4eccb190535d23f0362276fe"}, {"code": "(fn [d keys]\n   (apply conj {}\n          (map #(vec [% d]) keys)))", "problem": 156, "user": "4f463dfde4b0d56e7bb92b99"}, {"code": "(fn [x y] (apply hash-map (mapcat (fn[z] (cons z [x])) y)))", "problem": 156, "user": "4fbd12a5e4b081705acca2fd"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4ead2841535d7eef3080731e"}, {"code": "(fn [dval coll]\n                   (reduce\n                    #(assoc % %2 dval)\n                    {}\n                    coll)\n                   )", "problem": 156, "user": "4e726575535d5021c1a89660"}, {"code": "#(apply assoc {} (interleave %2 (repeat (count %2) %1) ))", "problem": 156, "user": "4ebfdfda535dfed6da9c6d9e"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4daea889edd6309eace4d15b"}, {"code": "(fn [default keys]\n    (zipmap keys (repeat (count keys) default)))", "problem": 156, "user": "4fdd7d86e4b05e33b9224f7b"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "4dc3780b535da86f151f0c3f"}, {"code": "(fn [val keys] (zipmap keys (repeat val)))", "problem": 156, "user": "4f4e91a9e4b03ad3f0c10cca"}, {"code": "#(into {} (for [k %2] [k %1]))", "problem": 156, "user": "4eee5459535d93acb0a668c5"}, {"code": "(fn [v ks] (into {} (map vector ks (repeat v))))", "problem": 156, "user": "4dad8c92c9a9d6ed1699dc57"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4e6a412e535d8ccf87e9feb6"}, {"code": "(fn [d coll]\n  (reduce #(assoc % %2 d) {} coll))", "problem": 156, "user": "4ed2a31c535d44c135fd68db"}, {"code": "(fn [d k] (apply assoc {} (interleave k (repeat d))))", "problem": 156, "user": "4e84a7dd535db62dc21a62e2"}, {"code": "(fn [dft mp] (apply merge (for [item mp] (hash-map item dft))))", "problem": 156, "user": "4fdf2b50e4b05e33b9224f93"}, {"code": "(fn [x1 y1]\n    (loop [x x1 y y1 z {}]\n    (if (empty? y) z\n\t      (recur x (rest y) \n\t\t     (assoc z (first y) x) )\n\t      )\n\t  ))", "problem": 156, "user": "4fdf5403e4b05e33b9224f98"}, {"code": "(fn [ default-value  seq-of-keys ] \n    (zipmap  seq-of-keys  ( repeat  (count seq-of-keys)  default-value ))\n)", "problem": 156, "user": "4fdf750be4b05e33b9224f9c"}, {"code": "(fn [v s] (zipmap s (repeat v)))", "problem": 156, "user": "4e70a7c1535d5021c1a8963c"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4ed94d69535d10e5ff6f5303"}, {"code": "(fn [default keys] \n  (reduce conj {} (for [key keys] [key default])))", "problem": 156, "user": "4fe2501ae4b0dd6cd5ce3644"}, {"code": "(fn [x coll]\n  (apply hash-map\n    (interleave coll (repeat (count coll) x))))", "problem": 156, "user": "4fe13ad7e4b0dd6cd5ce3632"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "4f56d6f3e4b0a7574ea7182c"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4f04b66b535dcb61093f6bdd"}, {"code": "(fn [d ks] (into {} (for [k ks] {k d})))", "problem": 156, "user": "4e3ac1b2535deb9a81d77f4c"}, {"code": "(fn [x keys] (reduce #(assoc %1 %2 x) {} keys))", "problem": 156, "user": "4e79ff2a535db169f9c796a9"}, {"code": "(fn make-def-map [def-val keys]\r\n  (loop [keys keys\r\n         result {}]\r\n    (if (empty? keys)\r\n      result\r\n      (recur (rest keys) (conj result [(first keys) def-val])))))", "problem": 156, "user": "4fe54ee8e4b0e8f79898fec3"}, {"code": "#(loop [default %1 orig-list %2 list-with-defaults {}]\n    (if(empty? orig-list) \n      list-with-defaults\n      (recur \n        default \n        (next orig-list) \n        (assoc list-with-defaults (first orig-list) default))\n    )\n  )", "problem": 156, "user": "4fe588b6e4b0e8f79898fec5"}, {"code": "(fn [newval newkeys]\n  (apply array-map\n    (interleave newkeys (take (count newkeys) (repeat newval))\n)))", "problem": 156, "user": "4f882b4be4b033992c121c60"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4fe21889e4b0dd6cd5ce3641"}, {"code": "(fn[x y]\n  (if(= x 0) {:a 0 :b 0 :c 0}\n  (if(= x \"x\") {1 \"x\" 2 \"x\" 3 \"x\"}\n{:foo [:a :b] :bar [:a :b]})\n  \n))", "problem": 156, "user": "4fe1279fe4b0dd6cd5ce3630"}, {"code": "(fn [ val k ]\n  (reduce (fn [a b] (conj a {b val})) {} k))", "problem": 156, "user": "4fdd27f3e4b05e33b9224f78"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "4fe15ffee4b0dd6cd5ce3634"}, {"code": "(fn [d seq]\n   (zipmap seq (repeat (count seq) d))\n  )", "problem": 156, "user": "4fc3b0d4e4b081705acca343"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4fdec88fe4b05e33b9224f8e"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "4ec812d9535d6d7199dd36f0"}, {"code": "(fn foo [x ls] (zipmap ls (repeat (count ls) x)))", "problem": 156, "user": "4fe1597fe4b0dd6cd5ce3633"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4fe84c74e4b07c9f6fd12c3c"}, {"code": "(fn [val keys] (apply hash-map (interleave keys (repeat val))))", "problem": 156, "user": "4f13047d535d64f60314642c"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4e720985535d5021c1a89655"}, {"code": "(fn create-map [default-val ks]\n  (->>\n         (for [k ks]\n           [k default-val])\n  (reduce (partial apply conj))\n    (apply hash-map)))", "problem": 156, "user": "4fae4c11e4b081705acca248"}, {"code": "#(reduce (fn foo [coll x] (conj coll {x %})) {} %2)", "problem": 156, "user": "4fe8939be4b07c9f6fd12c4d"}, {"code": "(fn [a b]\n  (zipmap b (repeat a)))", "problem": 156, "user": "4f859146e4b033992c121c46"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4fb591aee4b081705acca2c0"}, {"code": "(fn [v ks]\n  (zipmap ks (repeat v)))", "problem": 156, "user": "4e7d1c22535db169f9c796c5"}, {"code": "(fn [default coll]\n  (into {}\n    (map #(vector % default) coll)))", "problem": 156, "user": "4fe9d647e4b0547ebccb2472"}, {"code": "(fn [default keys] \n  (apply hash-map \n    (interleave keys (repeat default))))", "problem": 156, "user": "4fe4c09ee4b0e8f79898febb"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4fe8d1b5e4b0547ebccb2425"}, {"code": "(fn [a b]\r\n  (zipmap b (for [i (range 0 (count b))]\r\n    a)))", "problem": 156, "user": "4fc52986e4b081705acca383"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4fe8da4de4b0547ebccb2429"}, {"code": "(fn mkmap [v ks] \r\n          (if (empty? ks)\r\n              {}\r\n              (conj (mkmap v (rest ks)) [(first ks) v])))", "problem": 156, "user": "4f07ad89535dcb61093f6c2a"}, {"code": "(fn mkmap\n  ([default keys] (mkmap default keys {}))\n  ([default keys result]\n     (if (empty? keys)\n      result\n      (mkmap default (rest keys) (assoc result (first keys) default)))))", "problem": 156, "user": "4fe89efae4b07c9f6fd12c5b"}, {"code": "(fn [df coll] (reduce #(assoc %1  %2 df) {} coll))", "problem": 156, "user": "4fea2de5e4b0140c20fb9bfe"}, {"code": "#(merge (zipmap %2 (repeat %1)))", "problem": 156, "user": "4fe97adde4b0547ebccb245e"}, {"code": "(fn [d k] (apply hash-map (concat (interpose d k) [d])))", "problem": 156, "user": "4feada56e4b0140c20fb9c11"}, {"code": "(fn [n vs]\n  (zipmap vs (repeat n)))", "problem": 156, "user": "4ee82223535d93acb0a66877"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4ec7c32c535d6d7199dd36e6"}, {"code": "(fn build [default ks]\n  (if (> (count ks) 1)\n      (merge\n       \t(hash-map (first ks) default)\n       \t(build default (rest ks))\n      )\n      (hash-map (first ks) default)\n    )\n  )", "problem": 156, "user": "4feb546ae4b0681fd128dc8d"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4e7e4d5c535db169f9c7970f"}, {"code": "(fn [d keys]\n  (apply conj {}\n   (map #(vec (list % d)) keys)))", "problem": 156, "user": "4fe87e56e4b07c9f6fd12c40"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "4fba77fae4b081705acca2df"}, {"code": "(fn zip [d x] (zipmap x (for [i x] d)))", "problem": 156, "user": "4fea08a9e4b0547ebccb2484"}, {"code": "(fn default-map-vals [v ks]\n  (zipmap ks (repeat v)))", "problem": 156, "user": "4efa3d4b535dced4c769f270"}, {"code": "(fn [default keys]\n  (zipmap keys (repeatedly #(do default))))", "problem": 156, "user": "4fbc0011e4b081705acca2f0"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4fcba3f9e4b0ee37620e185b"}, {"code": "(fn [v m] (zipmap m (repeat (count m) v)))", "problem": 156, "user": "4fead955e4b0140c20fb9c10"}, {"code": "(fn [d ks] (zipmap ks (replicate (count ks) d)))", "problem": 156, "user": "4fec550de4b0681fd128dca6"}, {"code": "(fn [x ks]\n  (into {} (map (fn [k] [k x]) ks)))", "problem": 156, "user": "4dc0ff08535d020aff1edf84"}, {"code": "(fn [dv kv] (zipmap kv (repeat dv)))", "problem": 156, "user": "4fee1574e4b0678c553fc309"}, {"code": "(fn [d m]\n    (loop [result {} part m]\n        (if (empty? part)\n          result\n          (recur (assoc result (first part) d) (rest part)))))", "problem": 156, "user": "4febb4dae4b0681fd128dc98"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "4dcfbc44535d5973398f92a7"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "4da8dd6e30acd6ed12482a68"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4e85cda3535db62dc21a62f0"}, {"code": "#(apply hash-map (mapcat list %2 (repeat %)))", "problem": 156, "user": "4ec07699535dfed6da9c6da2"}, {"code": "(fn construct-map [value coll]\r\n  (loop [result {} coll coll]\r\n    (if(empty? coll)\r\n    result\r\n    (recur (assoc result (first coll) value) (rest coll)))))", "problem": 156, "user": "4fd170fce4b04c3a95aa0411"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4fde492be4b05e33b9224f8a"}, {"code": "(fn [k m] (apply assoc {} (interleave m (take (count m) (repeat k)))))", "problem": 156, "user": "4fe79ebce4b07c9f6fd12c37"}, {"code": "(fn [d keys]\n  (reduce #(assoc %1 %2 d) {} keys))", "problem": 156, "user": "4fefd624e4b0678c553fc31b"}, {"code": "(fn foo [val keys]\n  ((fn bar [val keys map]\n    (if (empty? keys)\n        map\n        (bar val (rest keys) (assoc map (first keys) val))))\n  val keys {}))", "problem": 156, "user": "4f42ae16e4b0d7d3c9f3fd09"}, {"code": "(fn [defl keys]\n  (reduce #(assoc % %2 defl) {} keys))", "problem": 156, "user": "4fe88f78e4b07c9f6fd12c45"}, {"code": "(fn ss [default arr]\n  (let [xx (fn xx [hmap arr]\n    (if (empty? arr) hmap\n          (xx (assoc hmap (first arr) default) (rest arr))))]\n    (xx (hash-map) arr)))", "problem": 156, "user": "4f0478b0535dcb61093f6bcb"}, {"code": "(fn dmap [default collection]\n    (apply merge (map #(assoc {} % default)  collection)))", "problem": 156, "user": "4ff01fa9e4b0678c553fc321"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4f50c414e4b03ad3f0c10d0d"}, {"code": "(fn [v s]\n  (zipmap s (repeat v)))", "problem": 156, "user": "4ed292ac535d44c135fd68d9"}, {"code": "(fn [dv ks] \n  (into {} \n    (map #(vector %1 %2) ks (repeat dv))))", "problem": 156, "user": "4f584064e4b0a7574ea71846"}, {"code": "(fn [d s] (zipmap s (repeat d)))", "problem": 156, "user": "4f244f26e4b0d66497709fea"}, {"code": "(fn [default keys]\n     (reduce #(conj % [%2 default]) {} keys))", "problem": 156, "user": "4e6a5694535d8ccf87e9fece"}, {"code": "#(into {}\n  (map (fn [x] [x %1]) %2))", "problem": 156, "user": "4fbef9a6e4b081705acca316"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "4e8768f6535dceadca469850"}, {"code": "(fn [dv col]\n  (reduce #(assoc %1 %2 dv) {} col))", "problem": 156, "user": "4f1427f8535d64f603146435"}, {"code": "(fn [default keys]\r\n  (zipmap keys (map (fn [n] default) keys)))", "problem": 156, "user": "4ff304f4e4b0678c553fc343"}, {"code": "(fn init-map [default s]\n  (reduce #(assoc %1 %2 default)  \n          {} \n          s))", "problem": 156, "user": "4f91fd31e4b0dcca54ed6ca8"}, {"code": "(fn [d ks]\n  (into {} (map #(vector % d) ks)))", "problem": 156, "user": "4fe8aef4e4b07c9f6fd12c6c"}, {"code": "(fn [v ks]\n  (reduce (fn [m k]\n            (assoc m k v))\n          {} ks))", "problem": 156, "user": "4e5867d1535d8a8b8723a291"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "4e260220535deb9a81d77ef0"}, {"code": "(fn [val keys] \n   (reduce #(assoc %1 %2 val) {} keys))", "problem": 156, "user": "4feddf2ee4b0198f34b063be"}, {"code": "(fn [v ks]\n  (reduce (fn [m k] (assoc m k v)) {} ks))", "problem": 156, "user": "4e95c771535dbda64a6f6b39"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4db13ff51254ad5b4805fa68"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "4f03bbf2535dcb61093f6b59"}, {"code": "(fn\n  [x coll]\n    (let\n      [a (atom ())]\n      (doseq [c coll]\n        (swap! a conj {c x}))\n      (reduce merge {} (merge @a))))", "problem": 156, "user": "4f601623e4b0defedf855fa3"}, {"code": "#(reduce (fn [m v] (assoc m v %1)) {} %2)", "problem": 156, "user": "4fe9eb5fe4b0547ebccb2477"}, {"code": "#(apply hash-map \n  (interleave %2 (repeat (count %2) %1)))", "problem": 156, "user": "4fc9a977e4b0ee37620e1847"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4f06f953535dcb61093f6c1c"}, {"code": "(fn [v ll]\n  (apply merge\n    (map #(hash-map % v) ll)))", "problem": 156, "user": "4ff5744ae4b0678c553fc36a"}, {"code": "(fn [default m]\n  (reduce (fn [x y] (conj x {y default})) {} m)\n  )", "problem": 156, "user": "4f6b4237e4b07046d9f4efa9"}, {"code": "(fn [d, c] (reduce #(conj %1 (vector %2 d)) {} c))", "problem": 156, "user": "4ff31e13e4b0678c553fc346"}, {"code": "#(reduce (fn [m v]\n            (assoc m v %1))\n        {} %2)", "problem": 156, "user": "4ff44da6e4b0678c553fc35b"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4fe8e719e4b0547ebccb2430"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4dfe65a1535d04ed9115e787"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "4f03ac2d535dcb61093f6b4a"}, {"code": "(fn defaults [v keys]\n  (if (seq keys)\n    (assoc (->> keys rest (defaults v)) (first keys) v)\n    {}))", "problem": 156, "user": "4ff6aea8e4b0678c553fc381"}, {"code": "(fn [s x] (zipmap x (repeat (count x) s)))", "problem": 156, "user": "4fb4ca71e4b081705acca2b0"}, {"code": "(fn [x xs] (reduce \n  (fn [a b] (conj a {b x})) {} xs))", "problem": 156, "user": "4f1ae082535d64f603146470"}, {"code": "(fn [default keys] (zipmap keys (repeat default)))", "problem": 156, "user": "4e7e443e535db169f9c7970b"}, {"code": "#(zipmap %2 (take (count %2) (repeat %1)))", "problem": 156, "user": "4ff673b3e4b0678c553fc37d"}, {"code": "(fn [arg mp] (into {} (map #(vector % arg) mp)))", "problem": 156, "user": "4fab574de4b081705acca218"}, {"code": "(fn [x coll] (reduce #(assoc %1 %2 x) {} coll))", "problem": 156, "user": "4ff3e771e4b0678c553fc356"}, {"code": "(fn mdef [d c] (zipmap c (repeat (count c) d)))", "problem": 156, "user": "4ff4c9dae4b0678c553fc360"}, {"code": "(fn [val keys]\n    (apply hash-map (interleave keys (repeat val))))", "problem": 156, "user": "4ff76222e4b0678c553fc38e"}, {"code": "(fn [value keys] (reduce #(assoc %1 %2 value) {} keys))", "problem": 156, "user": "4fe8b6afe4b07c9f6fd12c76"}, {"code": "#(zipmap %2 (cycle [%1]))", "problem": 156, "user": "4fcc70b3e4b0ee37620e1862"}, {"code": "(fn [constant v] (into {} (for [cordinate v :let [param constant]]\n     {cordinate param})))", "problem": 156, "user": "4f89bd1be4b033992c121c7d"}, {"code": "(fn [v ks]\n  (->> (mapcat #(list %1 %2) ks (repeat v))\n       (apply hash-map)))", "problem": 156, "user": "4feff3b6e4b0678c553fc31e"}, {"code": "(fn [default keys] \n  (reduce \n    (fn [map key] (assoc map key default)) {} keys))", "problem": 156, "user": "4df6646e535d08e6dec9fe34"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4ff8ddd8e4b0678c553fc3a0"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4ff67852e4b0678c553fc37e"}, {"code": "(fn [x k]\n  (zipmap k (repeat (count k) x)))", "problem": 156, "user": "4ff743fde4b0678c553fc38d"}, {"code": "(fn [v ks] (apply conj (map #(hash-map % v) ks)))", "problem": 156, "user": "4dadaa5cc9a9d6ed2f99dc57"}, {"code": "#(into {} (map (fn [key] {key %}) %2))", "problem": 156, "user": "4ff83003e4b0678c553fc396"}, {"code": "(fn [d k]\n  (into {} (map #(vector % d) k)))", "problem": 156, "user": "4ff9d4e5e4b0678c553fc3b0"}, {"code": "#(reduce (fn [m v] (assoc m v %1)) {} %2)", "problem": 156, "user": "4ec9549d535d6d7199dd36fe"}, {"code": "#(into {} (for [x %2]\n           {x %}))", "problem": 156, "user": "4fea9154e4b0140c20fb9c0a"}, {"code": "#(into {} (map (fn [x] [x %1]) %2))", "problem": 156, "user": "4eb9c82d535dfed6da9c6d5c"}, {"code": "#(apply merge (for [k %2] {k %}))", "problem": 156, "user": "4db2cd84535df7e46ed9b6c6"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4fe868d1e4b07c9f6fd12c3f"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "4fcf1755e4b03432b189f40c"}, {"code": "#(apply assoc {} (interleave %2 (repeat (count %2) %)) )", "problem": 156, "user": "4ff99f47e4b0678c553fc3aa"}, {"code": "#(into {} (for [x %2] {x %1}))", "problem": 156, "user": "4e57d1e2535d8a8b8723a289"}, {"code": "#(zipmap %2 (iterate identity %))", "problem": 156, "user": "4e9c3648535dbda64a6f6b7d"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4fe83efbe4b07c9f6fd12c3b"}, {"code": "(fn [d coll] (reduce #(assoc %1 %2 d) {} coll))", "problem": 156, "user": "4ffb38e8e4b0678c553fc3c6"}, {"code": "#(zipmap %2 (repeat (count %2) %))", "problem": 156, "user": "4e7e8684535db169f9c79717"}, {"code": "(fn [d k] (zipmap k (repeat (count k) d)))", "problem": 156, "user": "4ffb59f6e4b0678c553fc3cf"}, {"code": "(fn [x keys] \n  (into {} (map (fn [key] [key x]) keys)))", "problem": 156, "user": "4fb1d7ace4b081705acca281"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4e5229dc535d302ef430da6f"}, {"code": "(fn [e v] (reduce #(merge %1 {%2 e}) {} v))", "problem": 156, "user": "4fdb02aae4b05e33b9224f56"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4e6093c9535d8ccf87e9fe54"}, {"code": "(fn[value keys](zipmap keys (repeat (count keys) value)))", "problem": 156, "user": "4fd0b0bde4b04c3a95aa0406"}, {"code": "(fn [a b] (zipmap b (repeat a)))", "problem": 156, "user": "4ff8aa3fe4b0678c553fc39e"}, {"code": "(fn [default coll] (zipmap coll (repeat (count coll) default)))", "problem": 156, "user": "4fa09916e4b0dcca54ed6d4e"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4ed55b5d535d10e5ff6f52d8"}, {"code": "(fn answerfun([defval col] (answerfun defval col {})) ([defval col retval] (if (empty? col) retval (recur defval (rest col) (assoc retval (first col) defval)))))", "problem": 156, "user": "4e539f7e535d8a8b8723a272"}, {"code": "(fn [dv col] (reduce #(assoc %1 %2 dv) {} col))", "problem": 156, "user": "4fd29d7ce4b04c3a95aa0424"}, {"code": "(fn[d keys] (apply assoc {} (interleave keys (repeat d))))", "problem": 156, "user": "4ec64981535d6d7199dd36c7"}, {"code": "#(loop [new-map {}\n         keys %2]\n    (if (= (count keys) 0)\n      new-map\n      (recur (assoc new-map (first keys) %1)\n             (rest keys))))", "problem": 156, "user": "4fecd35fe4b0681fd128dcab"}, {"code": "(fn [default values]\n  (apply hash-map (interleave values (repeat default))))", "problem": 156, "user": "4ffb43b9e4b0678c553fc3ca"}, {"code": "(fn [default coll]\n  (zipmap coll (repeat default)))", "problem": 156, "user": "4eda7cc3535d10e5ff6f530e"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4ffe4d43e4b0678c553fc3f1"}, {"code": "#(apply assoc {}\n           (interleave %2\n\t                     (repeat %1)))", "problem": 156, "user": "4eda05c1535d10e5ff6f5309"}, {"code": "(fn [d vs] (apply hash-map (apply concat (map #(list %1 d) vs))))", "problem": 156, "user": "4e7f4147535db966e863cc3d"}, {"code": "(fn [x lst]\n  (apply conj (map (fn [e] {e x}) lst))\n)", "problem": 156, "user": "4ffb3c50e4b0678c553fc3c8"}, {"code": "#(into {} (for [x %2] {x %}))", "problem": 156, "user": "4ffa8affe4b0678c553fc3bd"}, {"code": "(fn [v ks] (reduce #(assoc % %2 v) {} ks))", "problem": 156, "user": "4ff66816e4b0678c553fc37a"}, {"code": "(fn [d k] (apply hash-map (concat (interpose d k) (cons d '()))))", "problem": 156, "user": "4ff76effe4b0678c553fc390"}, {"code": "#(loop [a %1 b %2 c {}]\n  (if (empty? b)\n      c\n      (recur a (rest b) (conj c (hash-map (first b) a)))))", "problem": 156, "user": "4ffe8193e4b0678c553fc3f4"}, {"code": "(fn[x y] (zipmap y (replicate (count y) x)) )", "problem": 156, "user": "4ffd92e7e4b0678c553fc3e3"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4e8a460e535d65386fec2109"}, {"code": "(fn [defval coll]\n  (reduce merge (map #(assoc {} % defval) coll)))", "problem": 156, "user": "4ff10dd2e4b0678c553fc32a"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4dbb1126535d1e037afb21b3"}, {"code": "(fn [d k] (into {} (map #(assoc {} %1 d) k)))", "problem": 156, "user": "4ff78679e4b0678c553fc392"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4eed6b32535d93acb0a668bc"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4e12cc9d535d04ed9115e7d2"}, {"code": "(fn [initv seq] (zipmap (reverse seq) (take (count seq) (cycle [initv]))))", "problem": 156, "user": "5003bb77e4b0678c553fc442"}, {"code": "(fn [d ks]\n  (reduce (fn [m e] (merge m e)) {} (map (fn [k] [k d]) ks)))", "problem": 156, "user": "5003deb9e4b0678c553fc445"}, {"code": "(fn [d v]\n  (reduce #(assoc % %2 d) {} v))", "problem": 156, "user": "500388dde4b0678c553fc43d"}, {"code": "(fn [d ks]\n  (zipmap ks (repeat (count ks) d)\n  ))", "problem": 156, "user": "4fa719c0e4b081705acca1bf"}, {"code": "(fn [ydef xs]\n  (loop [x xs result {}]\n    (if (= (count x) 0)\n      result\n      (recur (rest x) (assoc result (first x) ydef)))))", "problem": 156, "user": "50045388e4b0678c553fc44e"}, {"code": "(fn [d ks] (into {} (map #(vector % d) ks)))", "problem": 156, "user": "4ee528fb535d1385b2869d87"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4fe89db2e4b07c9f6fd12c59"}, {"code": "(fn map-default [x k-vals]\n   (into {} (map #(hash-map % x) k-vals)))", "problem": 156, "user": "4f6845d2e4b07046d9f4ef74"}, {"code": "(fn [default-value keys] \n  (let [n (count keys) \n        vals (take n (repeat default-value))] \n  (zipmap keys vals)))", "problem": 156, "user": "4fe9364be4b0547ebccb244e"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "5002b6e5e4b0678c553fc42c"}, {"code": "#(into {} (for [z %2] [z %]))", "problem": 156, "user": "4ff520dee4b0678c553fc367"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "5003ee7de4b0678c553fc446"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "4fe89297e4b07c9f6fd12c4c"}, {"code": "(fn [v keys]\r\n  (loop [[k & keys] keys m {}]\r\n    (if k (recur keys (assoc m k v)) m)))", "problem": 156, "user": "500159b3e4b0678c553fc419"}, {"code": "(fn [x, y] (into {} (map #(vector % x) y)))", "problem": 156, "user": "50054b5ce4b0678c553fc45f"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4f1d1d95535d64f603146488"}, {"code": "(fn [elem coll]\n        (reduce #(assoc %1 %2 elem ) {} (reverse coll)))", "problem": 156, "user": "4f9f9ff5e4b0dcca54ed6d3a"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4e8a880b535d65386fec210d"}, {"code": "(fn [x m]\n  (apply hash-map (interleave m (repeat x))))", "problem": 156, "user": "4ef992c8535dced4c769f268"}, {"code": "#(\n  loop [coll %2 result {}]\n\t(\n\t\tif (= (count coll) 0)\n\t\t\tresult\n\t\t\t(\n\t\t\t\trecur (rest coll) (assoc result (first coll) %1)\n\t\t\t) \t\n\t)\n)", "problem": 156, "user": "4ff2f0a9e4b0678c553fc341"}, {"code": "(fn [val coll]\n  (into {} (map #(vector % val) coll)))", "problem": 156, "user": "4e521cef535d302ef430da6d"}, {"code": "(fn [x y] (apply conj (map #(hash-map %1 x) y)))", "problem": 156, "user": "500690e4e4b0678c553fc488"}, {"code": "(fn [v m] (reduce #(assoc % %2 v) {} m))", "problem": 156, "user": "4f05ea25535dcb61093f6c02"}, {"code": "; #(zipmap %2 (repeat %1))\n#(into {} (map (fn [x] [x %1]) %2))", "problem": 156, "user": "500933a6e4b046cdb195e074"}, {"code": "#(reduce (fn [s i] (conj s (hash-map i %1))) {} %2)", "problem": 156, "user": "4f0e995e535d0136e6c22326"}, {"code": "(fn default-map\n  ([v s] (default-map v s {}))\n  ([v s m]\n    (if (empty? s)\n      m\n      (default-map v (rest s) (conj m [(first s) v]))\n    )\n  )\n)", "problem": 156, "user": "4fff00ede4b0678c553fc3fc"}, {"code": "(fn [default keys] (zipmap keys (repeat default)))", "problem": 156, "user": "500d8c49e4b07ccb9a7ddb00"}, {"code": "(fn mapdef [x y]\n  (apply merge (map (fn [a b] {b a}) (repeat x) y)))", "problem": 156, "user": "500cb910e4b05f7c30cfa698"}, {"code": "(fn [default coll] (apply merge (map #(hash-map % default) coll)))", "problem": 156, "user": "4fefbfe7e4b0678c553fc31a"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4ee6400c535d93acb0a6685b"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4fbd24d2e4b081705acca2ff"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4fe900a6e4b0547ebccb243a"}, {"code": "(fn [d v] (zipmap v (repeat (count v) d)))", "problem": 156, "user": "500854c4e4b028e089d3518c"}, {"code": "(fn [a b] (zipmap b (take (count b) (repeat a))))", "problem": 156, "user": "4f041af6535dcb61093f6ba3"}, {"code": "#(into {} (for [k %2] [k %1]))", "problem": 156, "user": "4f052eaf535dcb61093f6bf3"}, {"code": "#(apply hash-map (interleave %2 (repeat (count %2) %1)))", "problem": 156, "user": "4e5f08c7535d8a8b8723a2da"}, {"code": "#(into {} (map vector %2 (repeat %)))", "problem": 156, "user": "4dc537fd535d8a4b2fd74282"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "4ff4f5c4e4b0678c553fc362"}, {"code": "(fn [default coll]\n  (into {} (map #(vector % default) coll)))", "problem": 156, "user": "500ff421e4b0ae202717946f"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4ff9f5c5e4b0678c553fc3b4"}, {"code": "(fn [v ks] (reduce (fn [a b] (assoc a b v)) {} ks))", "problem": 156, "user": "4e773be8535d324fb2983d6e"}, {"code": "#(into {} (for [k %2] [k %]))", "problem": 156, "user": "4fae0b85e4b081705acca245"}, {"code": "(fn [d v] \n  (apply hash-map (interleave v (repeat d))))", "problem": 156, "user": "50112acee4b0d82cfac69f4c"}, {"code": "(fn [default keys] \n  (apply hash-map (interleave keys (repeat default))))", "problem": 156, "user": "4dbdc9da535d020aff1edf4c"}, {"code": "#(zipmap %2 (vec (repeat (count %2) %1)))", "problem": 156, "user": "5012614ee4b02a085b99dc79"}, {"code": "(fn [default keyArray]\n  (reduce #(assoc %1 %2 default) {} keyArray))", "problem": 156, "user": "4f329974e4b0d6649770a093"}, {"code": "(fn [default, keys]\n  (into {} (map (fn [x] (assoc {} x default))keys))\n)", "problem": 156, "user": "4f037d9e535dcb61093f6af2"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "5012aefce4b0c8732600222a"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "5011e738e4b0cd3f2a5854e6"}, {"code": "(fn my-assoc\n  ([default-value map-keys] (my-assoc default-value map-keys {}))\n  ([default-value [a & more] res]\n    (if a (recur default-value more (assoc res a default-value))\n          res)))", "problem": 156, "user": "4f74a4fbe4b044e54cd9a901"}, {"code": "(fn [def-val keys]\n  (apply merge (map #(hash-map % def-val) keys)))", "problem": 156, "user": "4fda8f57e4b05e33b9224f4e"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "5013193ae4b0f26a0e3320ab"}, {"code": "(fn[default, k] (into {} (for [x k] [x default])))", "problem": 156, "user": "4dbac43b535d1e037afb21ac"}, {"code": "(fn mapmaker [defkey inkeys]                                                                                                                     \n    (reduce #(assoc %1 %2 defkey) {} inkeys))", "problem": 156, "user": "50057f23e4b0678c553fc466"}, {"code": "(fn map-defaults- [v keys]\r\n  (apply hash-map (interleave keys (repeat v))))", "problem": 156, "user": "4e5eb843535d8a8b8723a2d4"}, {"code": "#(into {} (map vector %2 (repeat %1)))", "problem": 156, "user": "4f1b0ab3535d64f603146474"}, {"code": "(fn [default coll]\n  (reduce \n    #(assoc %1 %2 default)\n    {} \n    coll))", "problem": 156, "user": "5014754de4b094324338f8e5"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4dae0510c9a9d6ed4b99dc57"}, {"code": "#(reduce (fn [m v]\r\n            (assoc m v %1))\r\n        {} %2)", "problem": 156, "user": "500d1db4e4b05f7c30cfa69f"}, {"code": "(fn [d ks]\n  (apply\n    hash-map\n    (interleave ks (repeat (count ks) d))))", "problem": 156, "user": "501284d9e4b030d97e4db710"}, {"code": "#(into {} (map (fn [l] [l %]) %2))", "problem": 156, "user": "4e96557d535dbda64a6f6b43"}, {"code": "(fn [default ks] (reduce #(assoc % %2 default) {} ks))", "problem": 156, "user": "4e7e8485535db169f9c79716"}, {"code": "#(zipmap %2 (cycle [%1]))", "problem": 156, "user": "500ec491e4b00fff93030f9e"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "5007e90be4b0b17c647f5228"}, {"code": "(fn make-map [default col]\n  (apply hash-map (apply concat (for [x col]\n  \t\t\t      (list x default)))))", "problem": 156, "user": "4dc54eb2535d8a4b2fd74284"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "5009fd0ae4b03d00572d2d70"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "50166470e4b052339a490e76"}, {"code": "(fn [val keys] (reduce conj {} (for [x keys] [x val])))", "problem": 156, "user": "501688f7e4b052339a490e7a"}, {"code": "(fn [d m]\n  (into {} (zipmap m (repeat d))))", "problem": 156, "user": "4dca8b6d535d5973398f9288"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4efcac3a535de96065cf507e"}, {"code": "(fn [d k]\n  (reduce #(assoc %1 %2 d) {} k))", "problem": 156, "user": "500900dee4b0144d4f561e42"}, {"code": "(fn [default keys] \n    (zipmap keys \n        (repeat (count keys) default)\n    )\n)", "problem": 156, "user": "5017eface4b02f523d7cc5e7"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "5005b57de4b0678c553fc46a"}, {"code": "(fn [v coll]\n  (apply assoc {} (interleave coll (repeat v))))", "problem": 156, "user": "5007f751e4b0b17c647f522b"}, {"code": "(fn [x y] (reduce #(assoc %1 %2 x) {} y))", "problem": 156, "user": "5017f840e4b02f523d7cc5e8"}, {"code": "(fn[ v l] (reduce #(assoc %1 %2 v) {} l) )", "problem": 156, "user": "5018ed15e4b011a2e0bf6412"}, {"code": "(fn [myDef myMap] (apply assoc {} (interleave (reverse myMap) (repeat myDef))))", "problem": 156, "user": "4ff30a84e4b0678c553fc344"}, {"code": "#(zipmap %2 (take (count %2) (repeat %1)))", "problem": 156, "user": "50182f53e4b02f523d7cc5ec"}, {"code": "(fn def-map [dt ks] (conj (if (> (count ks) 1) (def-map dt (rest ks)) {}) {(first ks) dt}))", "problem": 156, "user": "500f336be4b03ec779321687"}, {"code": "(fn [def-value elements]\n  (reduce #(merge %1 (hash-map %2 def-value)) {} elements))", "problem": 156, "user": "50052fd0e4b0678c553fc45d"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "4fab2a6ce4b081705acca214"}, {"code": "#(zipmap  %2 (repeat (count %2) %1))", "problem": 156, "user": "5007c7c7e4b0b17c647f5226"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4f5d0f25e4b0030a34fb2b33"}, {"code": "(fn [default coll] (into {} (map #(vector % default) coll)))", "problem": 156, "user": "500e91aae4b00fff93030f99"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "4f1af7e4535d64f603146471"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "4eddcbbf535d10e5ff6f532d"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "501d34f6e4b066e56b9d0b1e"}, {"code": "(fn [a b] (zipmap b (repeat a)))", "problem": 156, "user": "4db1b3951254ad5b4805fa6f"}, {"code": "(fn map-init-with-default [default seq]\n  (apply assoc {} \n         (interleave seq \n                     (apply vector (take (count seq) (repeat default))))))", "problem": 156, "user": "4ed8b598535d10e5ff6f52fc"}, {"code": "(fn map_def [d v]\n  (if (= v [])\n    {}\n    (conj (map_def d (rest v)) {(first v) d})\n  )\n)", "problem": 156, "user": "50013694e4b0678c553fc417"}, {"code": "(fn __ [x y]\r\n  (into {} (for [i y] [i x])))", "problem": 156, "user": "4fe9b372e4b0547ebccb246b"}, {"code": "(fn [a b]\n  (zipmap b\n    (repeat a)))", "problem": 156, "user": "4e5a2403535d8a8b8723a2a7"}, {"code": "( fn mapDef\n  ([d s] (mapDef d s {}))\n  ([d s m]\n    (if(not-empty s) \n      (mapDef d (butlast s) (conj m [(last s) d]))\n      m\n    )\n  )\n)", "problem": 156, "user": "4fb7b80ae4b081705acca2d4"}, {"code": "(fn [value key] (into {} (map (fn [x] {x value}) key)))", "problem": 156, "user": "4e61bb60535d8ccf87e9fe5c"}, {"code": "(fn [df ks]\n  (loop [k ks ma {}]\n    (if (empty? k)\n        ma\n        (recur (rest k) (conj ma {(first k) df}))\n    )\n  )\n)", "problem": 156, "user": "4fcf5292e4b03432b189f40e"}, {"code": "(fn [default ys] (reduce (fn [xs y] (conj xs {y default})) {} ys))", "problem": 156, "user": "501ffbb1e4b0cb6ebc0a42f2"}, {"code": "(fn asdf [x y] (reduce conj (map #(hash-map % x) y)))", "problem": 156, "user": "5012036ce4b0a040369c12f4"}, {"code": "(fn [d k]\n  (zipmap k (map (constantly d) k)))", "problem": 156, "user": "5020692be4b0cb6ebc0a42f6"}, {"code": "(fn [x y]\n    (reduce merge (map  #(hash-map % x) y))\n)", "problem": 156, "user": "501c1492e4b086d93747d180"}, {"code": "(fn [default keys]\n  (zipmap keys (repeat (count keys) default)))", "problem": 156, "user": "4e42f930535dc968683fc49f"}, {"code": "#(reduce (fn [d e] (assoc d e %1)) {} %2)", "problem": 156, "user": "4e6a5158535d8ccf87e9fec5"}, {"code": "(fn [value keys]\n           (reduce merge (map #(hash-map % value) keys)))", "problem": 156, "user": "4dbd7107535d020aff1edf42"}, {"code": "(fn [x s] (reduce #(assoc %1 %2 x) {} s))", "problem": 156, "user": "50233f64e4b0b5d8b1bd2399"}, {"code": "(fn [d s]\n  (into {} (map #(vector %1 d) s)))", "problem": 156, "user": "4fcf642ee4b03432b189f410"}, {"code": "#(loop [default %1\n        keys %2\n        result {}]\n  (if (not-empty keys)\n    (recur default \n          (rest keys)\n          (assoc result (first keys) default)\n    )\n    result\n  )\n)", "problem": 156, "user": "4fe610fde4b0e8f79898fece"}, {"code": "(fn \n  [v ks]\n    (reduce #(assoc %1 %2 v) {} ks))", "problem": 156, "user": "500cc693e4b05f7c30cfa69a"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4e781a2e535d324fb2983d74"}, {"code": "(fn [default coll]\n  (into {} (map \n    (fn [in] [in default]) coll)))", "problem": 156, "user": "50270618e4b01614d1633feb"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4ee3e3b8535d10e5ff6f5373"}, {"code": "(fn [v keys]\n  (apply hash-map (interleave keys (repeat v))))", "problem": 156, "user": "4f60ed88e4b0defedf855fb2"}, {"code": "(fn [dv arr] (loop [rm {} keys arr] (if (empty? keys) rm (recur (assoc rm (first keys) dv) (rest keys)))))", "problem": 156, "user": "4f2942ace4b0d6649770a01e"}, {"code": "(fn [n m]\n  (into {} (map #(vector % n) m)))", "problem": 156, "user": "5024d54fe4b07ca75732c81f"}, {"code": "(fn [v l]\n  (zipmap l (cycle [v])))", "problem": 156, "user": "501fcd59e4b0cb6ebc0a42ec"}, {"code": "(fn [d l]\n  (apply array-map (interleave l (repeat d))))", "problem": 156, "user": "501dfd54e4b051153f3b5b80"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "4e6a4950535d8ccf87e9febf"}, {"code": "(fn [d xs]\n  (reduce\n    (fn [map key] (assoc map key d))\n    {}\n    xs))", "problem": 156, "user": "4fb1325de4b081705acca276"}, {"code": "(fn [defkey keyseq]\n  (into {}\n        (map\n          #(hash-map % defkey) keyseq)))", "problem": 156, "user": "502925b9e4b0b6c928ad6201"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "5028bce0e4b01614d1633ffb"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "501fa1aee4b0cb6ebc0a42eb"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "50052d38e4b0678c553fc45c"}, {"code": "(fn [v ks] (into {} (for [k ks] [k v])))", "problem": 156, "user": "4dade9e9c9a9d6ed4799dc57"}, {"code": "(fn [d k]\n  ((fn [key dflt wip]\n    (if (empty? key)\n      wip\n      (recur (rest key) dflt (assoc wip (first key) dflt))))\n    k d {}\n  )\n)", "problem": 156, "user": "50293245e4b08353e5d459cf"}, {"code": "(fn\n  [k xs]\n  (into {} (for [item xs]\n      [item k])))", "problem": 156, "user": "50294c28e4b0b33e9bf6fdef"}, {"code": "(fn [default keys]\n  (zipmap keys (repeat default)))", "problem": 156, "user": "4ea1bc93535d7eef308072b9"}, {"code": "(fn [defVal keys] \n  (apply hash-map (interleave keys (repeat defVal)))\n)", "problem": 156, "user": "502a5fa4e4b09e8f859a9fbd"}, {"code": "#(zipmap %2 (repeat (count %2) %1) )", "problem": 156, "user": "4e952463535dbda64a6f6b31"}, {"code": "(fn [x y]\n  (into {}\n    (for [e y]\n      {e x})))", "problem": 156, "user": "5029faf6e4b023940c84aa46"}, {"code": "#(zipmap %2 (repeat (count %2) %))", "problem": 156, "user": "501668b4e4b052339a490e77"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4fd9d162e4b05e33b9224f3c"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "502952c9e4b0b33e9bf6fdf1"}, {"code": "(fn [ values kes ]\n  (\n    apply merge( map #(hash-map % values) kes)\n  ))", "problem": 156, "user": "502aac6ae4b0614b52996118"}, {"code": "(fn [v keys] (zipmap keys (repeat v)))", "problem": 156, "user": "4fb01e53e4b081705acca260"}, {"code": "(fn [d keys] \n  (reduce #(conj % [%2 d]) {} keys))", "problem": 156, "user": "5025b93ce4b0c969f0b056df"}, {"code": "(fn [v k] (zipmap k (repeat v)))", "problem": 156, "user": "4e9609ad535dbda64a6f6b3e"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "502d387fe4b0d96a44ab202f"}, {"code": "(fn [v k]\n  (loop [\n         retval {}\n         theKeys (seq k)]\n    (if (seq theKeys)\n      (recur (assoc retval (first theKeys) v) (next theKeys))\n      retval)))", "problem": 156, "user": "5020a3fbe4b0cb6ebc0a42f8"}, {"code": "(fn [v coll] (reduce #(assoc %1 %2 v) {} coll))", "problem": 156, "user": "4e47f4f3535dc968683fc4bb"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4f1abbfb535d64f60314646e"}, {"code": "(fn [val coll] (reduce #(into %1 {%2 val}) {} coll))", "problem": 156, "user": "4ea11921535d7eef308072af"}, {"code": "(fn [v k] (zipmap k (repeat v)))", "problem": 156, "user": "4fe893d3e4b07c9f6fd12c4e"}, {"code": "#(apply hash-map (\n  interleave %2 (repeat (count %2) %)))", "problem": 156, "user": "502a9fdee4b095a7adb898b4"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "4dea9fae535d08e6dec9fe02"}, {"code": "(fn [d l] (reduce #(assoc %1 %2 d) {} l))", "problem": 156, "user": "502cff22e4b0b2ab8d5c7e72"}, {"code": "#(zipmap %2 (vec (repeat (count %2) %)))", "problem": 156, "user": "502cd12fe4b0532a782a5e39"}, {"code": "(fn [default-value my-keys] \n  (reduce \n    (fn [current-map current-key] \n      (assoc current-map current-key default-value) )\n    {} my-keys ))", "problem": 156, "user": "4eaf08ce535d7eef3080732d"}, {"code": "(fn [a b] \n  (reduce #(conj %1 {%2 a}) {} b))", "problem": 156, "user": "5030f16fe4b05b7df5a0b84b"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4f08b15b535dcb61093f6c40"}, {"code": "(fn [val names]\n  (reduce #(conj %1 {%2 val}) {} names))", "problem": 156, "user": "5029fccee4b023940c84aa47"}, {"code": "(fn [a coll]\n  (reduce #(merge {%2 a} %1) {} coll))", "problem": 156, "user": "5031eb3be4b000fc67a99a84"}, {"code": "(fn [df ks]\n  (into {}\n    (for [k ks] [k df])))", "problem": 156, "user": "4ec56b5b535d6d7199dd369f"}, {"code": "(fn criaMapa [x y]\r\n  (cond\r\n    (nil? (first y)) nil\r\n    :else (merge (criaMapa x (rest y)) {(first y) x})))", "problem": 156, "user": "50206641e4b0cb6ebc0a42f5"}, {"code": "#(zipmap %2 (repeat (count %2) %))", "problem": 156, "user": "4e68d816535d8ccf87e9fe8e"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "502904e0e4b0feaf66e22fad"}, {"code": "(fn [default keys]\n    (apply hash-map (mapcat #(list %1 %2) keys (repeat default)))\n    )", "problem": 156, "user": "4e89e939535d3e98b8023287"}, {"code": "(fn [d v] (into {} (map #(vector % d) v)))", "problem": 156, "user": "503255d0e4b0e78df07b092b"}, {"code": "(fn [x y] (if (= x 0) {:a 0 :b 0 :c 0}\n          (if (= x \"x\") {1 \"x\" 2 \"x\" 3 \"x\"}\n          {:foo [:a :b] :bar [:a :b]})))", "problem": 156, "user": "502d39f8e4b0d96a44ab2032"}, {"code": "#(loop [n (count %2) ret {} fs (first %2) rs (rest %2)]\n  (if (zero? n)\n    ret\n    (recur (dec n) (merge ret {fs %1}) (first rs) (rest rs))\n    )\n  )", "problem": 156, "user": "503354c3e4b0c6c1199c710c"}, {"code": "(fn [default, coll] \n  (reduce (fn [sum elem] (assoc sum elem default)) {} coll))", "problem": 156, "user": "5033a1fbe4b062bc5d7ae155"}, {"code": "(fn [default-val v-keys] (into {} (map #(conj [%1] default-val) v-keys)))", "problem": 156, "user": "502ade49e4b0614b52996120"}, {"code": "(fn [x xs] (reduce #(apply assoc %1 %2) {} (map #(vector % x) xs)))", "problem": 156, "user": "5032b398e4b00c0952a257eb"}, {"code": "reduce #(cond(map? %1)\r\n                (assoc %1 %2 (val(first %1)))\r\n                :else (assoc {} %2 %1)\r\n\r\n             )", "problem": 156, "user": "4e244ed5535d04ed9115e826"}, {"code": "(fn [dv s] \n  (reduce #(conj %1 {%2 dv}) \n          {} \n          s))", "problem": 156, "user": "50336c6be4b0c6c1199c710f"}, {"code": "(fn [d k]\n  (apply assoc {} (interleave k (repeat d))))", "problem": 156, "user": "4e1f9bb5535d04ed9115e80d"}, {"code": "(fn f [x y] \n  (zipmap y (repeat (count y) x))\n)", "problem": 156, "user": "5029131ae4b0b6c928ad61ff"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "502d4ea0e4b02fc10c6c6e46"}, {"code": "(fn  [valor con]\n  (loop [indice 0\n\t\t\tres {}\n          ]\n      (if (< indice (count con))\n\n\n\t\t(recur (inc indice) (assoc res (nth con indice) valor))\n\n\t\tres\n\n      )\n\n\n     )\n\n\n  )", "problem": 156, "user": "50255bafe4b0b0b8afb15aa8"}, {"code": "(fn [def-val key-set]\n  (if (empty? key-set) (empty (hash-map))\n    (loop [ret-map (hash-map (first key-set) def-val)\n           left-keys (rest key-set)]\n      (if (empty? left-keys)\n        ret-map \n        (recur (assoc ret-map \n                 (first left-keys) \n                 def-val) \n               (rest left-keys))))))", "problem": 156, "user": "4f08a8a2535dcb61093f6c3d"}, {"code": "(fn rec [ x y ]\n  (zipmap y (repeat (count y) x))\n  )", "problem": 156, "user": "50291679e4b0b6c928ad6200"}, {"code": "(fn [default keys] (into {} (map #(hash-map % default) keys)))", "problem": 156, "user": "4f2d5f5de4b0d6649770a05a"}, {"code": "(fn [v ks] (zipmap  ks (repeat (count ks) v)) )", "problem": 156, "user": "4f0d45de535d0136e6c22315"}, {"code": "#(zipmap %2 (repeat (count %2) %))", "problem": 156, "user": "4db03279838c48654951d9bc"}, {"code": "(fn [v ks]\n  (apply hash-map (interleave ks (repeat v))))", "problem": 156, "user": "5027fc0ce4b01614d1633ff2"}, {"code": "(fn [v k]\n  (loop [a {}\n         b k]\n    (if (empty? b) a (recur (assoc a (first b) v) (rest b)))))", "problem": 156, "user": "5000a543e4b0678c553fc40f"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4dada16fc9a9d6ed2699dc57"}, {"code": "(fn [v input]\n  (loop [result {}, default v, elts input]\n    (if (empty? elts)\n      result\n      (recur (assoc result (first elts) v) v (rest elts)))))", "problem": 156, "user": "502940a9e4b061fd216be4b8"}, {"code": "(fn [default lst]\n  (zipmap lst (repeat (count lst) default)))", "problem": 156, "user": "50369122e4b0af0658af779e"}, {"code": "(fn [v s] (into {} (map #(vector % v) s) ))", "problem": 156, "user": "4ea84250535d7eef308072f5"}, {"code": "(fn [d l] (reduce #(assoc % %2 d) {} l))", "problem": 156, "user": "50352431e4b0a84c1d88f620"}, {"code": "(fn map-default\r\n  [x ks]\r\n  (let [f (first ks)]\r\n    (if \r\n    (empty? (rest ks))\r\n    (assoc {} (first ks) x)\r\n    (conj (map-default x (rest ks)) [f x]))))", "problem": 156, "user": "4fee04a0e4b0678c553fc308"}, {"code": "(fn [x ks]\n  (zipmap ks (repeat (count ks) x)))", "problem": 156, "user": "4ff695f8e4b0678c553fc380"}, {"code": "(fn [n coll] (apply assoc {} (interleave coll (repeat n))))", "problem": 156, "user": "500a0a11e4b03d00572d2d73"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4e3456f9535deb9a81d77f2a"}, {"code": "(fn f [v ks] (if-not (empty? ks) (conj {(first ks) v} (f v (rest ks)))))", "problem": 156, "user": "5035503de4b0ed9c821488f8"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "50399468e4b088a6a14ca768"}, {"code": "(fn [x v] (into {} (map #(vector % x) v)))", "problem": 156, "user": "503917a0e4b088a6a14ca763"}, {"code": "(fn default-map\n  ; Problem 156\n  [val keys-array]\n  (let [keys-length (count keys-array)\n        default-array (repeat keys-length val)]\n    (zipmap keys-array default-array)))", "problem": 156, "user": "4edfb618535d10e5ff6f5343"}, {"code": "(fn make-defaults\n  [default keys] (let [keys-seq (seq keys)]\n                      (if (= (count keys) 1)\n                          {(first keys) default}\n                          (conj (make-defaults default (rest keys)) {(first keys) default}))))", "problem": 156, "user": "503a5623e4b07a1917cc34d3"}, {"code": "(fn [val ks]\n  (into {} (for [x ks] [x val])))", "problem": 156, "user": "502bb7c0e4b0194ad32ea1a3"}, {"code": "(fn test [default keys]\n  (zipmap keys (repeat default))\n)", "problem": 156, "user": "4edf95a8535d10e5ff6f5342"}, {"code": "(fn [val list]\n   ((fn walk-list [val list result]\n      (if (empty? list)\n        result\n        (walk-list val\n                   (rest list)\n                   (assoc result (first list) val))))\n    val list {}))", "problem": 156, "user": "4f03818e535dcb61093f6b00"}, {"code": "(fn [default ks] (into {} (for [k ks] [k default])))", "problem": 156, "user": "503be1f0e4b0fc0f99c2e549"}, {"code": "(fn [v m]\n  (zipmap m (repeat (count m) v)))", "problem": 156, "user": "4e949d18535dbda64a6f6b15"}, {"code": "(fn [x y]\n  (apply assoc {}\n    (interleave y (repeat x))))", "problem": 156, "user": "4dc7e7a5535d8a4b2fd74290"}, {"code": "(fn [d keys] (zipmap keys (repeat d)))", "problem": 156, "user": "4e68c465535d8ccf87e9fe8a"}, {"code": "(fn [val v] (apply array-map (interleave\n                                       v\n                                       (take (count v) (repeatedly (fn [] val))))))", "problem": 156, "user": "503b6995e4b07a1917cc34dd"}, {"code": "(fn [d k] (zipmap k (repeat d)))", "problem": 156, "user": "502b04bee4b063e52107afac"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "5032b066e4b00c0952a257ea"}, {"code": "(fn [k m] (zipmap m (repeat k)))", "problem": 156, "user": "5036eba7e4b0af0658af77a5"}, {"code": "(fn [a b] (into {} (for [e b] [e a])))", "problem": 156, "user": "50335235e4b0c6c1199c710b"}, {"code": "(fn [v keys]\n  (apply hash-map (mapcat #(conj [%1] %2) keys (repeat (count keys) v)))\n  )", "problem": 156, "user": "503ca47fe4b06c4e0e1fa24f"}, {"code": "(fn [elt coll]\n  (into {} (for [i coll] [i elt])))", "problem": 156, "user": "4dadc27ec9a9d6ed3c99dc57"}, {"code": "(fn [d ks] (into {} (map #(vector % d) ks)))", "problem": 156, "user": "4db3a0e5535df7e46ed9b6d0"}, {"code": "(fn [v ks]\n  (apply hash-map (mapcat #(list % v) ks)))", "problem": 156, "user": "503ee85ce4b06c4e0e1fa26e"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "4e113a81535d04ed9115e7c5"}, {"code": "(fn [v keys] (zipmap keys (repeat v)))", "problem": 156, "user": "5012ec0ae4b0c87326002230"}, {"code": "(fn [d v] (into {} (map #(hash-map % d) v)))", "problem": 156, "user": "4db21d14535d37964ddf999c"}, {"code": "(fn [default keys] (zipmap keys (repeatedly (fn [] default))))", "problem": 156, "user": "4f030a38535dcb61093f6a47"}, {"code": "(fn [v s] (reduce #(assoc %1 %2 v) {} s))", "problem": 156, "user": "4e99f2e1535dbda64a6f6b6c"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "503dea56e4b06c4e0e1fa25a"}, {"code": "(fn [d kv] (zipmap kv (repeat d)))", "problem": 156, "user": "503ea917e4b06c4e0e1fa26b"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4e8708e3535dceadca46984e"}, {"code": "#(reduce (fn [v s] (assoc v s %1)) {} %2)", "problem": 156, "user": "4fcf763de4b03432b189f413"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4fb266a5e4b081705acca28c"}, {"code": "(fn [default ks]\r\n  (zipmap ks (repeat (count ks) default)))", "problem": 156, "user": "4dc97aec535d5973398f9284"}, {"code": "(fn [v ks]\n  (loop [m  {}\n         ks ks]\n    (if (= () ks)\n      m\n      (recur (assoc m (first ks) v) (rest ks)))))", "problem": 156, "user": "50435852e4b034ff00315d22"}, {"code": "(fn [d ks]\n  (zipmap ks (repeat d)))", "problem": 156, "user": "503a234de4b088a6a14ca76d"}, {"code": "(fn [d ks]\n    (reduce #(assoc %1 %2 d)\n            {} ks))", "problem": 156, "user": "4ff3df0fe4b0678c553fc355"}, {"code": "(fn [default v] (reduce #(conj % [%2 default]) {} v))", "problem": 156, "user": "504457c0e4b01f6c9a8b2360"}, {"code": "(fn [x y] (zipmap y (repeat (count y) x)))", "problem": 156, "user": "4ef4c1ff535dced4c769f23e"}, {"code": "#(reduce (fn [m v]\n            (assoc m v %1))\n        {} %2)", "problem": 156, "user": "4e14b925535d04ed9115e7df"}, {"code": "(fn [default keys] \n  (zipmap keys (repeat default)))", "problem": 156, "user": "4fea34bde4b0140c20fb9c00"}, {"code": "(fn [x keys]\n  (into {} (map (fn [k] [k x]) keys)))", "problem": 156, "user": "4e8338d6535db62dc21a62d3"}, {"code": "(fn [val keys] (zipmap  keys (repeat (count keys) val)))", "problem": 156, "user": "503e52aae4b06c4e0e1fa265"}, {"code": "(fn [x y] (zipmap y (repeat (count y) x)))", "problem": 156, "user": "5045ac21e4b01f6c9a8b2371"}, {"code": "(fn [x y] (apply hash-map (mapcat #(vector % x) y)))", "problem": 156, "user": "5046b003e4b011c5dfee7727"}, {"code": "#(into {} (for [x %2] {x %1}))", "problem": 156, "user": "5041b3c0e4b06d8231e4facf"}, {"code": "(fn [v m] (reduce #(assoc %1 %2 v) {} m))", "problem": 156, "user": "50232eeae4b0b5d8b1bd2397"}, {"code": "(fn [x ks]\n  (into {} (map #(vector % x) ks)))", "problem": 156, "user": "4e26e8b4535deb9a81d77ef6"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "4f902831e4b0dcca54ed6c8b"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "5048202fe4b0ec70b3ef8d9a"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "50479524e4b0371827a27bc4"}, {"code": "(fn\r\n  [default keys]\r\n  (reduce\r\n    (fn [result key] (assoc result key default))\r\n    {}\r\n    keys))", "problem": 156, "user": "4fbc068ae4b081705acca2f2"}, {"code": "(fn [n xs]\n  (reduce (fn [m k] (conj m [k n])) {} xs))", "problem": 156, "user": "4e8239d6535db62dc21a62c4"}, {"code": "#(loop [ret {} default_value %1 k %2] (if (empty? k ) ret  (recur (conj ret [ (first k) default_value]) default_value (rest k))  ))", "problem": 156, "user": "50463347e4b011c5dfee771e"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4e5411e8535d8a8b8723a279"}, {"code": "(fn [x y] \n  (zipmap y (repeat x)))", "problem": 156, "user": "5032e6c8e4b0e4096af89718"}, {"code": "(fn [x lst] (apply hash-map (interleave lst (repeat x))))", "problem": 156, "user": "50435689e4b034ff00315d21"}, {"code": "#(reduce (fn [m v]\r\n            (assoc m v %1))\r\n        {} %2)", "problem": 156, "user": "5048f98ee4b06e644c63f1af"}, {"code": "(fn createDefaultMap [defaultVal l]\n  (reduce \n    (fn [m v] (assoc m v defaultVal)) \n{} l))", "problem": 156, "user": "4f032cb1535dcb61093f6a70"}, {"code": "(fn [num coll]\n  (reduce #(assoc % %2 num) {} coll))", "problem": 156, "user": "4efec33f535dcb61093f6a2a"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4f702dcae4b07046d9f4eff4"}, {"code": "(fn [dv ks] (zipmap ks (repeat (count ks) dv)))", "problem": 156, "user": "503e7f06e4b06c4e0e1fa268"}, {"code": "(fn [v ks]\n  (apply hash-map\n    (mapcat\n      #(vector % v)\n      ks)))", "problem": 156, "user": "50427899e4b0add3005c0fc2"}, {"code": "(fn [x y] (apply merge (map (fn [s] {s x}) y)))", "problem": 156, "user": "5034374de4b062bc5d7ae161"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "50431cbce4b034ff00315d1c"}, {"code": "(fn [df ks]\n  (zipmap ks (repeat df)))", "problem": 156, "user": "4f2e0369e4b0d6649770a064"}, {"code": "(fn [default coll] (zipmap coll (repeat (count coll) default)))", "problem": 156, "user": "50481532e4b0ec70b3ef8d96"}, {"code": "#(into {} (map vector %2 (repeat %1) ))", "problem": 156, "user": "4faa8de0e4b081705acca1f8"}, {"code": "(fn [v k]\n  (zipmap k (repeat v)))", "problem": 156, "user": "4f128865535d64f603146428"}, {"code": "(fn [d m]\r\n  (->> m\r\n    (map #(vec (list % d)))\r\n    (reduce conj {})))", "problem": 156, "user": "504e14c2e4b078edc5f593bf"}, {"code": "(fn [a b] (zipmap b (repeat (count b) a)))", "problem": 156, "user": "504e2333e4b0f6ff3350c46c"}, {"code": "(fn [default keys] \n  (apply merge (map (fn [key] {key default}) keys)))", "problem": 156, "user": "504e9e09e4b069badc5a33bc"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "504d0116e4b022602c20b089"}, {"code": "(fn [default keys]\n   (zipmap keys (repeat default)))", "problem": 156, "user": "4f616892e4b0defedf855fbf"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "504e13fce4b078edc5f593bc"}, {"code": "(fn [dflt sqnc ] \n (apply hash-map (interleave sqnc (repeat (count sqnc) dflt))))", "problem": 156, "user": "504e108ce4b078edc5f593b3"}, {"code": "(fn [d k] (zipmap k (repeat (count k)  d)))", "problem": 156, "user": "504e9011e4b069badc5a33b7"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4f525fdce4b03ad3f0c10d37"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "504ed350e4b069badc5a33d1"}, {"code": "(fn [x y ] (into {} (map (juxt identity (constantly x)) y)))", "problem": 156, "user": "504eff22e4b0e7ad84dbc4a9"}, {"code": "(fn [v ks]\n  (zipmap\n    ks\n    (repeat (count ks) v)))", "problem": 156, "user": "504e48ace4b0f6ff3350c498"}, {"code": "(fn default-map [default m]\n  (zipmap m (map (constantly default) m)))", "problem": 156, "user": "501b1a8ee4b0b12d9c5f4d81"}, {"code": "(fn [x ks]\n  (reduce into (map hash-map ks (repeat x))))", "problem": 156, "user": "50464831e4b011c5dfee771f"}, {"code": "#(zipmap %2 (repeat (.size %2) %1))", "problem": 156, "user": "504e397ee4b0f6ff3350c485"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4f0365fc535dcb61093f6aa4"}, {"code": "(fn [val keys] \n  (apply assoc {} (interleave keys (repeat val))))", "problem": 156, "user": "4fc5a693e4b0ee37620e17fc"}, {"code": "(fn [default coll]\n  (zipmap coll (repeat (count coll) default))\n  )", "problem": 156, "user": "4eb6f065535d7eef30807372"}, {"code": "(fn [d v]\n  (loop [m v\n         r {}]\n    (if (empty? m)\n      r\n      (recur (rest m) (assoc r (first m) d)))))", "problem": 156, "user": "4dd29ede535dae65d5c462da"}, {"code": "(fn [v xs]\r\n  (reduce #(into %1 (hash-map %2 v)) {} xs))", "problem": 156, "user": "4dd59d8b535dae65d5c462eb"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "504ea40ee4b069badc5a33bf"}, {"code": "(fn [d k]\n  (reduce #(assoc %1 %2 d) {} k))", "problem": 156, "user": "4e4ca885535dc968683fc4df"}, {"code": "(fn [d seq] (reduce #(assoc % %2 d) {} seq))", "problem": 156, "user": "504f2071e4b0e7ad84dbc4be"}, {"code": "(fn [d c] (reduce #(assoc % %2 d) {} c))", "problem": 156, "user": "504e9f5ce4b069badc5a33bd"}, {"code": "(fn [v ks] (apply hash-map (interleave ks (repeat v))))", "problem": 156, "user": "4e50b67b535dc968683fc4ed"}, {"code": "(fn set-defaults [default keys]\n  (loop [keys keys key (first keys) map {}]\n(if (nil? key)\n  map\n  (recur (rest keys) (first (rest keys)) (assoc map key default)))))", "problem": 156, "user": "504f5804e4b0a02f9cffde72"}, {"code": "(fn [d vs] (into  {} (for [v vs] (vector v d))))", "problem": 156, "user": "5050b107e4b063148f524126"}, {"code": "(fn [d k] (loop [k k d d acc {}] (if (empty? k) acc (recur (rest k) d (conj acc [(first k) d])))))", "problem": 156, "user": "504f865ee4b0a02f9cffde90"}, {"code": "(fn [n c]\n   (into {} (map (fn[k] [k n] ) c)))", "problem": 156, "user": "504f44cfe4b0a02f9cffde65"}, {"code": "#(zipmap %2 (cycle [%1]))", "problem": 156, "user": "5048bcf8e4b06e644c63f1ae"}, {"code": "(fn meep [v s]\n  (if (empty? s)\n    {}\n    (assoc (meep v (rest s)) (first s) v)))", "problem": 156, "user": "504e1fdde4b0f6ff3350c468"}, {"code": "(fn [v ks] (zipmap ks (repeat (count ks) v)))", "problem": 156, "user": "50503117e4b0a02f9cffdeb5"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "504e2011e4b0f6ff3350c469"}, {"code": "(fn mapping[x y]\n  (if (nil? (first y))\n    {}\n    (conj (hash-map (first y) x) (mapping x (rest y)))))", "problem": 156, "user": "504e8e48e4b069badc5a33b3"}, {"code": "(fn f [df ks]\n  (reduce #(assoc %1 %2 df) {} ks))", "problem": 156, "user": "4e6a6b83535d8ccf87e9fee0"}, {"code": "(fn x [o l]\n  (if (empty? l)\n    {}\n    (assoc (x o (rest l)) (first l) o)))", "problem": 156, "user": "4f559d2ce4b0a7574ea71808"}, {"code": "(fn [value seq-of-keys]\r\n  (apply hash-map (lazy-seq \r\n    (mapcat (fn [item]\r\n           [item value])\r\n         seq-of-keys))))", "problem": 156, "user": "4e75edfe535d7a570dd295c7"}, {"code": "(fn cm [val keys]\n  (if (empty? (rest keys))\n    {(first keys) val}\n    (assoc (cm val (rest keys)) (first keys) val)))", "problem": 156, "user": "503e6047e4b06c4e0e1fa266"}, {"code": "(fn [d st]\n  (zipmap st\n\t\t(map (fn [n] d) st)))", "problem": 156, "user": "504e6165e4b0f6ff3350c4aa"}, {"code": "(fn [default coll] \r\n    (apply array-map (mapcat (fn [n] [n default]) coll)))", "problem": 156, "user": "504f3fa3e4b0a02f9cffde62"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4f045946535dcb61093f6bba"}, {"code": "(fn [d m] (apply conj (map #(hash-map % d) m)))", "problem": 156, "user": "5053de37e4b0b1b9d1860ea8"}, {"code": "(fn [m v k] (if (empty? k) m (recur (merge m (hash-map (first k) v)) v (rest k)))) (hash-map)", "problem": 156, "user": "503ff621e4b0c9bf6384b00f"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "50548ce8e4b0b1b9d1860ead"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "504e04a4e4b078edc5f59397"}, {"code": "#(zipmap %2 (take (count %2) (repeat %1)))", "problem": 156, "user": "50555c06e4b0ce54f56f03fa"}, {"code": "(fn [a lst]\n  (reduce #(assoc % %2 a) {} lst))", "problem": 156, "user": "5055899de4b0ce54f56f03fd"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4dbd8388535d020aff1edf46"}, {"code": "(fn ms [d ks]\n  (into {} \n        (for [k ks]\n          [k d])))", "problem": 156, "user": "504ec4d3e4b069badc5a33c9"}, {"code": "(fn [a lst] \n  (zipmap lst (repeat (count lst) a)))", "problem": 156, "user": "5054c853e4b0b1b9d1860eb3"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4ebbc1f6535dfed6da9c6d72"}, {"code": "(fn [el ls] (zipmap ls (repeat (count ls) el)))", "problem": 156, "user": "4ff769bce4b0678c553fc38f"}, {"code": "#(apply assoc {} (interleave %2 (repeat %)))", "problem": 156, "user": "4f58d92fe4b0a7574ea71858"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "504f57c7e4b0a02f9cffde71"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "5052ab7ee4b0a561d07d8f20"}, {"code": "(fn [default keys]  \n  (reduce (fn [a x] (conj {x default}  a)) {} keys))", "problem": 156, "user": "504f3f13e4b0a02f9cffde60"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "5057242fe4b0012181721986"}, {"code": "(fn [d s]\n  (into {} (vec (map #(vector % d) s))))", "problem": 156, "user": "50481b70e4b0ec70b3ef8d98"}, {"code": "(fn [v ks] (zipmap ks (repeat v)))", "problem": 156, "user": "4df669d4535d08e6dec9fe35"}, {"code": "#(apply hash-map (concat (interpose %1 %2) [%1]))", "problem": 156, "user": "4dafa380edd6309eace4d17c"}, {"code": "(fn [v s] (reduce (fn [r k] (conj r {k v})) {} s))", "problem": 156, "user": "4fca2a13e4b0ee37620e184d"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4fc6e1a8e4b0ee37620e181d"}, {"code": "#(loop\n  [d %1\n   vals %2\n   m {}]\n  (if (nil? vals)\n    m\n    (recur d (next vals) (assoc m (first vals) d))))", "problem": 156, "user": "4e814706535db62dc21a62bb"}, {"code": "#(apply array-map (conj (into [] (interpose %1 %2)) %1))", "problem": 156, "user": "50517ebfe4b0a561d07d8f06"}, {"code": "#(apply hash-map (mapcat (partial conj (list %1)) %2))", "problem": 156, "user": "5040edf4e4b0ff5d2cc40db5"}, {"code": "(fn [defval, seqq]\n  (reduce merge\n    (map #(hash-map % defval) seqq)))", "problem": 156, "user": "505aa653e4b021387fb89857"}, {"code": "(fn [x l]\r\n  (reduce conj {}\r\n    (for [i l] \r\n      [i x])))", "problem": 156, "user": "5051ea64e4b0a561d07d8f0d"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "50586354e4b06522596eba78"}, {"code": "(fn foo [default_value the_keys] (reduce (fn bar [the_map the_key] (assoc the_map the_key default_value)) (cons {} the_keys)) )", "problem": 156, "user": "4e8d5edd535d65386fec2134"}, {"code": "(fn [default s] (into {} (for [k s] {k default})))", "problem": 156, "user": "4ded56bb535d08e6dec9fe0b"}, {"code": "(fn [n coll]\n  (zipmap coll (repeat n)))", "problem": 156, "user": "505bd09fe4b032b709c81373"}, {"code": "#(loop [D %1 K %2 M {}]\n  (if (empty? K)\n    M\n  (recur D (rest K) (conj M {(first K) D}) )))", "problem": 156, "user": "505a2f3be4b03d2efce48c5b"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "4e778d36535d324fb2983d71"}, {"code": "(fn [default keys]\n  (into {} (for [key keys] [key default])))", "problem": 156, "user": "4dbb0f2d535d1e037afb21b1"}, {"code": "(fn [d seq]\n  (reduce #(merge %1 (hash-map %2 d)) {} seq))", "problem": 156, "user": "50254dace4b0b0b8afb15aa6"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "4ee624f8535d93acb0a66855"}, {"code": "(fn [d l] (zipmap l (repeat (count l) d)))", "problem": 156, "user": "4eb171d7535d7eef30807340"}, {"code": "(fn my-default-map [dv coll]\n  (into {}\n    (map hash-map coll (repeat (count coll) dv))))", "problem": 156, "user": "4fd769a1e4b0dab7d829f382"}, {"code": "(fn default [x y]\n  (zipmap y (map (fn [z] x) y)) \n)", "problem": 156, "user": "50588af1e4b06522596eba7d"}, {"code": "#(apply assoc {} (interleave %2 (repeat %1)))", "problem": 156, "user": "4f6f777de4b07046d9f4efe5"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "5054bc87e4b0b1b9d1860eb0"}, {"code": "(fn [def-val keys]\n  (into {} (for [key keys] {key def-val})))", "problem": 156, "user": "4ed98b40535d10e5ff6f5307"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4e8f1ac6535d65386fec2146"}, {"code": "(fn [val vect] (reduce conj {} (map #(identity [%1 val]) vect)))", "problem": 156, "user": "50310b8be4b05b7df5a0b84d"}, {"code": "(fn [i c]\n  (apply array-map (interleave c (repeat i))))", "problem": 156, "user": "4e589bdc535d8a8b8723a295"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "5060d137e4b0dc10a69545a0"}, {"code": "(fn foo [x m]\n  (if (empty? m)\n    {}\n    (assoc (foo x (rest m)) (first m) x)))", "problem": 156, "user": "4f4f08c8e4b03ad3f0c10cd8"}, {"code": "(fn [x v] (reduce #( conj %1 [%2 x] ) (hash-map) v))", "problem": 156, "user": "505fc8e3e4b08f2a82ad10b6"}, {"code": "#(zipmap %2 (replicate (count %2) %1))", "problem": 156, "user": "5057f59ce4b06522596eba73"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4fe9efe5e4b0547ebccb247a"}, {"code": "(fn [default keys]\n       (apply merge (for [key keys] {key default})))", "problem": 156, "user": "4db2f208535df7e46ed9b6c9"}, {"code": "(fn [default keys]\n  (zipmap keys (take (count keys) (repeat default))))", "problem": 156, "user": "4f83ae07e4b033992c121c21"}, {"code": "(fn [n seq]\n  (into {}\n    (for [k seq]\n      [k n])))", "problem": 156, "user": "50611456e4b0dc10a69545a5"}, {"code": "(fn [v s] (into {} (for [k s] {k v})))", "problem": 156, "user": "50366589e4b0fbe0a74d26c3"}, {"code": "(fn [d xs]\n  (reduce #(assoc %1 %2 d) {} xs))", "problem": 156, "user": "5063b9a0e4b075d771da6f9d"}, {"code": "(fn [x l] (reduce #(assoc %1 %2 x) {} l))", "problem": 156, "user": "504e72cee4b0f6ff3350c4b4"}, {"code": "(fn [v k] (reduce #(assoc %1 %2 v) {} k))", "problem": 156, "user": "504f191ae4b0e7ad84dbc4ba"}, {"code": "(\n    fn [x l]\n    (\n      loop [myMap {}\n            myKeys (seq l)]\n      (\n        if (and true myKeys)\n        (\n          recur (assoc myMap (first myKeys) x) \n                (next myKeys)     \n        )\n        myMap\n      )\n    )\n  )", "problem": 156, "user": "50644f3ee4b007509339a589"}, {"code": "(fn [default lista]\r\n  (zipmap lista \r\n          (repeat (count lista) \r\n                   default)))", "problem": 156, "user": "50576483e4b001218172198b"}, {"code": "(fn [v ks] (zipmap ks (repeat (count ks) v)))", "problem": 156, "user": "5037c397e4b0af0658af77b4"}, {"code": "(fn [v ks] (into {} (map (fn [k] [k v]) ks)))", "problem": 156, "user": "5063fe48e4b075d771da6f9e"}, {"code": "(fn [val keys]\n  (loop [keys keys, result {}]\n    (if (empty? keys)\n      result\n      (recur \n        (rest keys) \n        (conj result {(first keys) val}))\n    )\n  )\n)", "problem": 156, "user": "504e0136e4b078edc5f5938e"}, {"code": "(fn [v m] (reduce #(assoc % %2 v) {} m))", "problem": 156, "user": "5054c7e1e4b0b1b9d1860eb2"}, {"code": "#(zipmap (reverse %2) (repeat (count %2) %))", "problem": 156, "user": "504e3aaae4b0f6ff3350c487"}, {"code": "(fn [d, l] \n  (into {}\n    (map (fn [a] {a d}) l)\n))", "problem": 156, "user": "4f8b05d2e4b02e764a0a5176"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4fcf254ce4b03432b189f40d"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "506617c3e4b03d366d7cb2ab"}, {"code": "#(reduce (fn [a b] (assoc a b %1)) {} %2)", "problem": 156, "user": "4e8e8c24535d65386fec2143"}, {"code": "(fn [default s]\n  (loop [c (count s) results {}]\n     (if (> c 0)\n         (recur (dec c) (conj results {(nth s (- c 1)) default}))\n        results)))", "problem": 156, "user": "5057852ce4b0012181721992"}, {"code": "(fn [v k] (reduce #(assoc % %2 v) {} k))", "problem": 156, "user": "505f55d3e4b08f2a82ad10b0"}, {"code": "(fn [default keys] (zipmap keys (repeat default)))", "problem": 156, "user": "4e4be570535dc968683fc4d8"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "505f5e2fe4b08f2a82ad10b2"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "50657775e4b0deb876850599"}, {"code": "(fn [v s]\n  (into {} (map (fn [k] [k v]) s)))", "problem": 156, "user": "4fc7ddffe4b0ee37620e182b"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "5065b810e4b0148eb3925aec"}, {"code": "(fn [default coll]\n  (into {} (for [x coll] {x default})))", "problem": 156, "user": "5066fa7de4b03d366d7cb2b9"}, {"code": "(fn [d s]\r\n  (reduce #(assoc %1 %2 d) {} s))", "problem": 156, "user": "5069d8c5e4b01dc6af13f838"}, {"code": "(fn [x s] (into {} (map #(vec [% x]) s)))", "problem": 156, "user": "5065faf9e4b0313a384e5645"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "4fa9dc6fe4b081705acca1e8"}, {"code": "(fn [d col] \n  (apply merge \n         (map #(sorted-map % d) \n              col)))", "problem": 156, "user": "4e77c1db535d324fb2983d72"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "4e273a93535deb9a81d77ef8"}, {"code": "(fn [d s]\n  (zipmap s (repeat (count s) d)))", "problem": 156, "user": "50573ed8e4b0012181721987"}, {"code": "(fn [default-value keys]\n    (reduce #(assoc %1 %2 default-value) {} keys))", "problem": 156, "user": "4dbe19fe535d020aff1edf59"}, {"code": "(fn [default s]\n  (apply array-map (interleave s (repeat (count s) default))))", "problem": 156, "user": "4ee9d697535d93acb0a66895"}, {"code": "(fn [k s]\n  (zipmap s (map (fn [x] k) s)))", "problem": 156, "user": "506a1985e4b01dc6af13f83e"}, {"code": "(fn [d s] (apply conj (for [k s] {k d})))", "problem": 156, "user": "506b18c8e4b0a2a5463de383"}, {"code": "(fn [c s] (zipmap s (repeat c)))", "problem": 156, "user": "4edb4c7c535d10e5ff6f5318"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "4ecb1641535d6d7199dd370e"}, {"code": "#(reduce (fn [M K]\r\n  (assoc M K %1))\r\n\t{}\r\n\t%2)", "problem": 156, "user": "4dadca03c9a9d6ed4199dc57"}, {"code": "(fn [i v] (reduce #(assoc % %2 i) {} v))", "problem": 156, "user": "505d4b21e4b0e6aca564be07"}, {"code": "(fn [d s] (reduce #(merge %1 {%2 d}) {} s))", "problem": 156, "user": "506b016de4b0a2a5463de37f"}, {"code": "(fn [default keys]\n    (reduce #(assoc %1 %2 default) {} keys))", "problem": 156, "user": "506b0a9ce4b0a2a5463de380"}, {"code": "(fn [v ks] (reduce #(assoc %1 %2 v) {} ks))", "problem": 156, "user": "50618c62e4b0a30dc9a35d33"}, {"code": "#(reduce (fn [m v] (assoc m v %1)) {} %2)", "problem": 156, "user": "506c8116e4b0a302964c548a"}, {"code": "(fn [dv ks] (apply assoc {} (interleave (reverse ks) (repeat dv))))", "problem": 156, "user": "4f83dd78e4b033992c121c24"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "506e0e5ae4b09350ab4199eb"}, {"code": "#(reduce (fn [m v]\n            (assoc m v %1))\n        {} %2)", "problem": 156, "user": "506c2006e4b080c1a96bd6bc"}, {"code": "(fn [default liste]\n  (zipmap liste (map (fn [x] default) liste))\n)", "problem": 156, "user": "506ec408e4b09350ab4199f1"}, {"code": "(fn [val keys]\n    (loop [m {}\n          ks (seq keys)]\n       (if (empty? ks)\n         m\n         (let [k (first ks)]\n           (recur (assoc m k val)\n                  (rest ks))))))", "problem": 156, "user": "506f1e12e4b09350ab4199f9"}, {"code": "(fn [default keys]\n  (reduce #(conj % {%2 default}) {} keys))", "problem": 156, "user": "506755b3e4b03d366d7cb2bc"}, {"code": "(fn [v keys] (reduce #(assoc %1 %2 v) {} keys))", "problem": 156, "user": "50705072e4b07bd6ad9b9f27"}, {"code": "(fn map-default [value ks]\n(apply hash-map\n   (into [] \n          (interleave ks (cycle [value]))))\n  )", "problem": 156, "user": "500a214de4b03d00572d2d74"}, {"code": "(fn [d v]\n  (reduce #(assoc %1 %2 d) {} v))", "problem": 156, "user": "4f2baf1ae4b0d6649770a04c"}, {"code": "(fn [d s](reduce #(assoc %  %2 d) '{} s))", "problem": 156, "user": "4eb404ba535d7eef3080735a"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "507056b8e4b07bd6ad9b9f29"}, {"code": "(fn [defaults keyset]\n  (zipmap keyset (repeat (count keyset) defaults)))", "problem": 156, "user": "506b8242e4b0eda3100c090a"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "50645e12e4b007509339a58a"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "506cc221e4b0a302964c548f"}, {"code": "(fn [x l]\r\n  (reduce (fn [a b] (conj a [b x])) {} l))", "problem": 156, "user": "507437c2e4b054001656acd0"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "4f4c8faae4b03ad3f0c10c93"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "506406c8e4b075d771da6f9f"}, {"code": "#(into {} (map vector %2 (repeat %)))", "problem": 156, "user": "5060ae00e4b07251188e4459"}, {"code": "#(into {} (for [x %2] [x %1]))", "problem": 156, "user": "4e72dd5d535d5021c1a89667"}, {"code": "(fn [df kys]\n  (reduce (fn [mp val] (conj mp [val df])) {} kys))", "problem": 156, "user": "50763574e4b0a894bb95bf3d"}, {"code": "(fn [x y] (into {} (map vector y (repeat x))))", "problem": 156, "user": "4fc4541ae4b081705acca348"}, {"code": "(fn [v keys] (zipmap keys (repeat v)))", "problem": 156, "user": "4ecb65f6535df97575fdabda"}, {"code": "(fn [v coll]\n  (reduce #(merge % (hash-map %2 v)) nil coll))", "problem": 156, "user": "4e6961f0535d8ccf87e9fe9b"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "50748923e4b054001656acd3"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4f03154a535dcb61093f6a58"}, {"code": "(fn [d xs] (reduce (fn [a e] (assoc a e d)) {} xs))", "problem": 156, "user": "4e3a9dae535deb9a81d77f4a"}, {"code": "#(zipmap %2 (repeat (count %2) %))", "problem": 156, "user": "502d39c5e4b0d96a44ab2031"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4dbb0b6c535d1e037afb21b0"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "50783762e4b0fc74642bff67"}, {"code": "#(zipmap %2 [%1 %1 %1])", "problem": 156, "user": "5034b623e4b062bc5d7ae168"}, {"code": "(fn [x y] (zipmap y (repeat x)))", "problem": 156, "user": "5078300de4b0fc74642bff66"}, {"code": "(fn [d ks] (apply hash-map (interleave ks (repeat d))))", "problem": 156, "user": "507a9b29e4b08327cd804a6e"}, {"code": "(fn test-map [v ks] (reduce merge {} (map #(hash-map % v) ks)))", "problem": 156, "user": "4ec12516535dfed6da9c6da7"}, {"code": "(fn [v coll]\n  (reduce conj\n    (map (fn [k] {k v}) coll)))", "problem": 156, "user": "4f3242bae4b0d6649770a08f"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "5061cc17e4b0a30dc9a35d34"}, {"code": "(fn build-map [value coll] (apply hash-map ((fn [c] (reduce #(conj %1 %2 value) [] c)) coll)))", "problem": 156, "user": "5046f909e4b03b02161376b5"}, {"code": ";#(into {} (map vector %2 (repeat %)))\n#(zipmap %2 (repeat %1))", "problem": 156, "user": "4f32ef71e4b0d6649770a098"}, {"code": "(fn [d keys]\n  (reduce\n    (fn [entry map]\n      (conj map entry))\n    (map\n      (fn [key]\n        {key d})\n      keys)))", "problem": 156, "user": "4f5c0549e4b0030a34fb2b1a"}, {"code": "(fn [v lst]\n   (reduce #(conj %1 {%2 v}) {}  lst))", "problem": 156, "user": "507db411e4b03c76e5499e06"}, {"code": "(fn [d v]\n  (reduce #(assoc % %2 d) {}  v))", "problem": 156, "user": "5007cdb9e4b0b17c647f5227"}, {"code": "(fn [v keys] (apply hash-map (interleave keys (repeat v))) )", "problem": 156, "user": "507c7c8be4b0b083f3ff82ef"}, {"code": "#(into {} (map (fn [k] [k %1]) %2))", "problem": 156, "user": "4fe9de74e4b0547ebccb2475"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "504ffb8fe4b0a02f9cffdeae"}, {"code": "(fn [v m]\n  (reduce (fn [my-map vecval] (conj my-map {vecval v})) {} m))", "problem": 156, "user": "4f5576c2e4b0a7574ea71801"}, {"code": "(fn [v ks] (zipmap ks (repeat (count ks) v)))", "problem": 156, "user": "4fe8fda4e4b0547ebccb2438"}, {"code": "#(into {} (map vector %2 (repeat %1)))", "problem": 156, "user": "4dae916eedd6309eace4d155"}, {"code": "(fn [val keys] (into {}(map (fn[key] {key val}) keys)))", "problem": 156, "user": "5049fb24e4b044486d8af28d"}, {"code": "(fn [d s] (let [m {}] (reduce #(assoc %1 %2 d) m s)))", "problem": 156, "user": "507e68abe4b085af06e3afd2"}, {"code": "(fn [default keys] (zipmap keys (repeat default )))", "problem": 156, "user": "4ffee04de4b0678c553fc3f6"}, {"code": "(fn [default col] (reduce  merge (map #(assoc {} %1 default) col )))", "problem": 156, "user": "4fa7de4ce4b081705acca1c9"}, {"code": "(fn\n  [deff col]\n  (reduce #(merge %1 {%2 deff}) {} col))", "problem": 156, "user": "507a08e4e4b08327cd804a67"}, {"code": "(fn\n  [el seq]\n  (->> el (repeat (count seq)) (interleave seq) (apply hash-map))\n  )", "problem": 156, "user": "4ea31da2535d7eef308072c1"}, {"code": "(fn [d coll] (reduce #(assoc %1 %2 d) {} coll))", "problem": 156, "user": "507fa6dce4b089ade05efbd1"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "50563ae2e4b0ce54f56f0405"}, {"code": "(fn [val keys] (apply hash-map (interleave keys (repeat val))))", "problem": 156, "user": "504db141e4b021508a333965"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "5080d6e3e4b01a93d3f38e4b"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "50807940e4b01a93d3f38e44"}, {"code": "#(zipmap\n  %2 \n  (apply list (repeat (count %2) %)))", "problem": 156, "user": "507ef25ce4b0f753b6f9788e"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "5082095be4b0946d0443856f"}, {"code": "#(apply hash-map (interleave %2 (repeat (count %2) %1)))", "problem": 156, "user": "507eddf4e4b06ce648bcdbfa"}, {"code": "(fn [d ks] (zipmap ks (repeat d)))", "problem": 156, "user": "4ff9a200e4b0678c553fc3ab"}, {"code": "(fn [x y]\n  (into {}\n    (map #(conj [] % x) y)))", "problem": 156, "user": "507e5cf8e4b085af06e3afd1"}, {"code": "(fn mapdef\n    ([value keys] (mapdef value keys {}))\n    ([value keys acc]\n     (if (empty? keys) acc\n       (recur value (next keys) (conj acc [(first keys) value])))))", "problem": 156, "user": "508157b2e4b0946d0443855c"}, {"code": "(fn [val keys]\r\n  (loop [keys keys\r\n         res (hash-map)]\r\n    (if (empty? keys)\r\n      res\r\n      (recur (rest keys) (assoc res (first keys) val)))))", "problem": 156, "user": "4de2f44f535d08e6dec9fdec"}, {"code": "(fn [x y] (apply sorted-map (conj (into [] (interpose x y)) x)))", "problem": 156, "user": "506b437de4b0eda3100c0906"}, {"code": "(fn [v lst] (reduce conj (for [k lst] (assoc {} k v))))", "problem": 156, "user": "50838c06e4b0902986d69e0f"}, {"code": "(fn make-def-map [default keys]\n  (loop [key-col keys mapping {}]\n    (if (empty? key-col)\n      mapping\n      (recur (rest key-col) (merge mapping {(first key-col) default}))\n    )\n  )\n)", "problem": 156, "user": "50845d3ee4b0fb8f40674bf3"}, {"code": "(fn [d xs]  (->> xs\n  (map #(list % d))\n  (apply concat)\n  (apply hash-map)))", "problem": 156, "user": "507a396be4b08327cd804a69"}, {"code": "(fn [v kl]\n   (zipmap kl (replicate (count kl) v)))", "problem": 156, "user": "5084cb7de4b0fb8f40674bfb"}, {"code": "(fn [d k]\n  (loop [k k m {}]\n    (if (empty? k)\n      m\n      (recur (rest k) (assoc m (first k) d)))))", "problem": 156, "user": "50843a4ae4b0c98812d0788b"}, {"code": "(fn [k vs]\n  (into {} (for [v vs] [v k])))", "problem": 156, "user": "504c8165e4b09724c857af31"}, {"code": "(fn [default keys] \n  (apply hash-map \n    (mapcat #(vector % default) keys)))", "problem": 156, "user": "4e6a4954535d8ccf87e9fec0"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "5088082ae4b0198722bd9854"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4de77a0a535d08e6dec9fdfa"}, {"code": "(fn  [default keys]\n  (apply merge (map (fn [key] {key default} ) keys ))\n  )", "problem": 156, "user": "4ec5bec6535d6d7199dd36b3"}, {"code": "(fn [x v]\r\n   (loop [res {}\r\n          a x\r\n          b v]\r\n     (cond (empty? b) res\r\n           :else\r\n           (recur (assoc res (last b) a) a (butlast b)))))", "problem": 156, "user": "50868795e4b004985b776e5e"}, {"code": "#(into {} (map vector %2 (repeat %)))", "problem": 156, "user": "4ee2da14535d10e5ff6f536c"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "4eabb245535d7eef30807319"}, {"code": "(fn map-default [v xs]\n  (zipmap  xs (vec(repeat (count xs) v))))", "problem": 156, "user": "507bb3ece4b09034bfeeb720"}, {"code": "(fn [x l] (zipmap l (repeat x)))", "problem": 156, "user": "4dfd4ba8535d04ed9115e781"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4e80aa10535db62dc21a62b1"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4f49108ae4b0d56e7bb92be5"}, {"code": "(fn [v ks] (zipmap ks (repeat (count ks) v)))", "problem": 156, "user": "4f7d91e6e4b06e829148e1c3"}, {"code": "(fn [default sequence] \n  (loop [keys sequence returned {}] \n    (if (empty? keys) returned \n      (recur (rest keys) (conj returned {(first keys) default}))\n)))", "problem": 156, "user": "507da5a7e4b03c76e5499e03"}, {"code": "(fn [x vec] (zipmap vec (repeat x)))", "problem": 156, "user": "506f9423e4b082ae7d1032ca"}, {"code": "(fn [v ks] (into {} (for [k ks] [k v])))", "problem": 156, "user": "4db86aee535d1e037afb2193"}, {"code": "(fn [d k]\n  (zipmap k (repeat (count k) d))\n)", "problem": 156, "user": "508bf05ae4b0f17d83ea26aa"}, {"code": "(fn [i s] (zipmap s (repeat (count s) i)))", "problem": 156, "user": "4e7d2448535db169f9c796c8"}, {"code": "(fn [d l]\r\n  (loop [ lis l ma {} ]\r\n    (if (nil? (next lis))\r\n      (conj ma {(first lis) d})\r\n      (recur (rest lis) (conj ma {(first lis) d}) )\r\n    )\r\n  )\r\n)", "problem": 156, "user": "500c5b4ae4b03d00572d2d88"}, {"code": "(fn [default ks] (zipmap ks (repeat default)))", "problem": 156, "user": "4dd0e8f7535da60f04a96e57"}, {"code": "(fn [v ks] \n  (reduce #(assoc %1 %2 v) nil ks))", "problem": 156, "user": "50901b2ee4b0ea685a20f774"}, {"code": "(fn f [v ks] (zipmap ks (repeat (count ks) v)))", "problem": 156, "user": "5086ca15e4b004985b776e62"}, {"code": "(fn[x col](apply hash-map(reverse\n  (cons x(interpose x col)))))", "problem": 156, "user": "4e6cf521535de274dd8d818b"}, {"code": "(fn [d keys] (reduce #(assoc %1 %2 d) {} keys))", "problem": 156, "user": "50813b88e4b09292fd669443"}, {"code": "(fn [x y] (zipmap y (replicate (count y) x)))", "problem": 156, "user": "508c33ece4b0f17d83ea26b1"}, {"code": "(fn[v col] (zipmap col (map (constantly v) col)))", "problem": 156, "user": "506ee0f4e4b09350ab4199f2"}, {"code": "(fn [d k] (apply conj {} (map #(vector % d) k)))", "problem": 156, "user": "4daf907aedd6309eace4d17b"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4e5f034b535d8a8b8723a2d9"}, {"code": "(fn [ke arr]\n  (apply array-map \n    (loop [k ke a arr ret '()]\n      (if (= (count a) 0)\n        (reverse ret)\n        (recur \n          k\n          (rest a)\n          (conj (conj ret (first a)) k)\n        )\n      )\n    )\n  )\n)", "problem": 156, "user": "4fc8f671e4b0ee37620e1840"}, {"code": "(fn [d ks]\n  (reduce #(assoc % %2 d) {} ks))", "problem": 156, "user": "50608ea0e4b07251188e4456"}, {"code": "(fn [v m] (into {} (for [k m] [k v])))", "problem": 156, "user": "4f856adfe4b033992c121c44"}, {"code": "(fn [v keys]\n  (let [smap (sorted-map)]\n    (loop [v v ks keys sm smap]\n      (if (= (count ks) 0)\n        sm\n        (recur v (rest ks) (assoc sm (first ks) v))))))", "problem": 156, "user": "5087d0e4e4b0198722bd9851"}, {"code": "#(zipmap %2 (cycle [%1]))", "problem": 156, "user": "500ec210e4b00fff93030f9d"}, {"code": "(fn [v coll] (apply hash-map (interleave coll (repeat v))))", "problem": 156, "user": "4dda44f2535d02782fcbe9f1"}, {"code": "(fn [def-val keys]\n  (reduce #(assoc %1 %2 def-val) {} keys))", "problem": 156, "user": "4f843d3ce4b033992c121c2d"}, {"code": "(fn [default xs] \n  (apply\n    hash-map\n    (interleave xs (repeat default))))", "problem": 156, "user": "5089ebfee4b03217b26a539f"}, {"code": "(fn [default seq] (zipmap seq (repeat default)))", "problem": 156, "user": "508e9ed8e4b0996e1a8a53bf"}, {"code": "#(zipmap %2 (cycle [%1]))", "problem": 156, "user": "4e58c019535d8a8b8723a297"}, {"code": "(fn [x y] \n  (apply hash-map (mapcat #(vector % x) y)))", "problem": 156, "user": "4faf2f4ce4b081705acca251"}, {"code": "(fn [v ks]\n  (into {} (map #(vector % v) ks)))", "problem": 156, "user": "506fd0afe4b07bd6ad9b9f23"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "50928084e4b097f48cc3856c"}, {"code": "(fn [d ks]\n  (zipmap ks (repeat d)))", "problem": 156, "user": "4e7dbe0c535db169f9c796e3"}, {"code": "(fn [d ks] (reduce #(conj %1 [%2 d]) {} ks))", "problem": 156, "user": "5097a95fe4b00ad8bab4e96e"}, {"code": "(fn [a b] (zipmap b (repeat a)))", "problem": 156, "user": "5097b556e4b00ad8bab4e970"}, {"code": "#(into {}\n   (for [k %2]\n     {k %1}))", "problem": 156, "user": "508d8ab2e4b0f17d83ea26be"}, {"code": "(fn [value keys]\n  (into {} (for [key keys] [key value])))", "problem": 156, "user": "4fa313bbe4b081705acca188"}, {"code": "(fn [x ks]\n  (into {}\n    (for [k ks]\n      [k x])))", "problem": 156, "user": "4e7dec83535db169f9c796f3"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "5098f5d6e4b0cae2931060a4"}, {"code": "#(reduce (fn [sofar k] (assoc sofar k %1)) {} %2)", "problem": 156, "user": "4ec1923f535dfed6da9c6db2"}, {"code": "#(into {} (map (fn [x] [x %]) %2))", "problem": 156, "user": "4eb97b2e535dfed6da9c6d54"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "4dbdc898535d020aff1edf4a"}, {"code": "(fn [val coll]\n  (apply conj (map (fn[key] {key val}) coll)\n  )\n)", "problem": 156, "user": "50959df3e4b087f34d351ab4"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "50970f51e4b00ad8bab4e950"}, {"code": "(fn [val sq]\n  (reduce #(assoc %1 %2 val) {} sq))", "problem": 156, "user": "5097ea89e4b087ccf61a7af4"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4db6ce85535d1e037afb217f"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4fc50bcbe4b081705acca375"}, {"code": "(fn [%1 %2] (zipmap %2 (repeat (count %2) %1)))", "problem": 156, "user": "508fabf9e4b0ea685a20f769"}, {"code": "#(reduce (fn [m v]\n            (assoc m v %1))\n        {} %2)", "problem": 156, "user": "509b152be4b0412cdea6eb1e"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "5098bcfee4b0cae2931060a1"}, {"code": "(fn f [i x]\n  (zipmap x (take (.length x) (repeat i)))\n)", "problem": 156, "user": "4e8a0d5d535d3e98b802328e"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "5098f803e4b0cae2931060a5"}, {"code": "(fn [default l](zipmap  (reverse l) (vec (take (count l) (repeat default)))))", "problem": 156, "user": "4eeccfc0535d93acb0a668b5"}, {"code": "(fn [v ks]\n  (zipmap ks (repeat v)))", "problem": 156, "user": "4dd62278535d2dad7130b5c7"}, {"code": "(fn [default ks] (apply hash-map (mapcat #(list % default) ks)))", "problem": 156, "user": "509b89b3e4b03049c49bd678"}, {"code": "(fn [v ks] (zipmap ks (repeat (count ks) v)))", "problem": 156, "user": "4ecd1143535d23f036227702"}, {"code": "#(into {} (for [k %2] [k %]))", "problem": 156, "user": "4f541874e4b0a7574ea717d8"}, {"code": "#(reduce (fn [m k] (assoc m k %1)) {} %2)", "problem": 156, "user": "5099aea3e4b0efbae1fbc0a0"}, {"code": "(fn [x coll] (reduce #(assoc %1 %2 x) {} coll))", "problem": 156, "user": "508ba469e4b0be79e5b189c8"}, {"code": "#(into {} (for [k %2] [k %1]))", "problem": 156, "user": "4f0f36a7535d0136e6c22336"}, {"code": "(fn default-map [defval keys]\n  (reduce #(conj % {%2 defval}) {} keys))", "problem": 156, "user": "509e8da7e4b08df8156e9e2f"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "5092fe10e4b097f48cc3857e"}, {"code": "(fn [v ks] (zipmap ks (repeat (count ks) v)))", "problem": 156, "user": "4f956072e4b0dcca54ed6ccf"}, {"code": "(fn [default, keys] (zipmap keys (repeat (count keys) default)))", "problem": 156, "user": "50a15b50e4b08df8156e9e5e"}, {"code": "(fn [i l] (apply conj {} (map #(vector % i) l)))", "problem": 156, "user": "507fbd77e4b089ade05efbd3"}, {"code": "(fn [d a]\n  (zipmap a (repeat (count a) d)))", "problem": 156, "user": "50a173e4e4b08df8156e9e68"}, {"code": "(fn [v ks] (reduce #(assoc %1 %2 v) {} ks))", "problem": 156, "user": "4dad76588e77d6ed63f12a44"}, {"code": "(fn [default keys]\n  (apply hash-map (interleave keys (repeat default))))", "problem": 156, "user": "4f2cdd42e4b0d6649770a055"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "507ac76be4b09034bfeeb718"}, {"code": "(fn [elem listik]\n(apply hash-map\n  (reduce #(conj (conj % (last %2)) (first %2)) []\n          ((fn [x xs] (map (fn [e] [x e]) xs)) elem listik))))", "problem": 156, "user": "509eeb3be4b08df8156e9e37"}, {"code": "(fn [value keys]\n  (zipmap keys (repeat value)))", "problem": 156, "user": "5080a697e4b01a93d3f38e49"}, {"code": "(fn [v ks] (reduce (fn [m1 k] (merge m1 {k v})) {} ks))", "problem": 156, "user": "50982cc7e4b04e098a4c726c"}, {"code": "(fn[x k] (reduce #(conj %1 [%2 x]) {} k))", "problem": 156, "user": "4f542fd9e4b0a7574ea717db"}, {"code": "#(reduce (fn [m v]\r\n            (assoc m v %1))\r\n        {} %2)", "problem": 156, "user": "4f9a737fe4b0dcca54ed6d0a"}, {"code": "(fn [n ks]\n  (apply hash-map (interleave ks (repeatedly (constantly n)))))", "problem": 156, "user": "4e0febe6535d04ed9115e7be"}, {"code": "(fn [v ks] (zipmap ks (repeat (count ks) v)))", "problem": 156, "user": "509c7949e4b085ae113522b0"}, {"code": "#(apply hash-map (mapcat (fn [x] (list x %)) %2))", "problem": 156, "user": "50996a38e4b0cae2931060b3"}, {"code": "(fn [default the-keys]\n  (loop \n    [the-keys the-keys\n     the-map {}]\n    (if (> (count the-keys) 0) \n      (recur (rest the-keys)\n             (assoc the-map (first the-keys) default))\n      the-map)))", "problem": 156, "user": "50989786e4b04e098a4c7274"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "50a191f4e4b08df8156e9e6a"}, {"code": "(fn [x coll] \n  (zipmap coll (repeat x)))", "problem": 156, "user": "50a4cbbee4b0344e360f3bc2"}, {"code": "#(reduce \n   (fn [coll x] (assoc coll x %)) (hash-map) %2 \n  )", "problem": 156, "user": "50217818e4b00bba4502f7a7"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "50a482c1e4b0344e360f3bb7"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "50a6c0fbe4b0aa96157e262c"}, {"code": "(fn [default keys] (apply merge (map #(hash-map % default) keys)))", "problem": 156, "user": "50a7b76de4b090657f4a5cdc"}, {"code": "(fn [default coll]\n  (loop [d default, c coll, acc {}]\n    (if (empty? c)\n      acc\n      (recur d (rest c) (assoc acc (first c) d)))))", "problem": 156, "user": "50a83794e4b054305ba5a831"}, {"code": "(fn [v lst]\n  (apply hash-map \n    (interleave lst (repeat v))))", "problem": 156, "user": "5027b41ee4b01614d1633fee"}, {"code": "#(into {} (for [x %2] [x %1]))", "problem": 156, "user": "50a5f72fe4b0aa96157e2611"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "50981062e4b04e098a4c7268"}, {"code": "#(reduce (fn [m v]\n            (assoc m v %1))\n        {} %2)", "problem": 156, "user": "50a90241e4b0a9a42786e8dc"}, {"code": "(fn [default keys]\n  (reduce (fn [acc, key] (conj acc [key default])) \n    {}\n    keys))", "problem": 156, "user": "50a93b6de4b0a9a42786e8e0"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "50a4f36be4b0344e360f3bc9"}, {"code": "(fn [default coll] (zipmap coll (repeat default)))", "problem": 156, "user": "4fe3338ee4b0e8f79898fea8"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4ed152d5535d44c135fd68cc"}, {"code": "(fn [x l] \n  (reduce \n    conj \n    {} \n    (map \n      #(vector % x)\n      l\n      )))", "problem": 156, "user": "4f4c6b21e4b03ad3f0c10c8f"}, {"code": "(fn [default keys] (zipmap keys (repeat (count keys) default)))", "problem": 156, "user": "50a9504de4b07e35d68b27ae"}, {"code": "(fn map-creator [default keys]\n  (if (next keys)\n    (conj \n      (map-creator default (next keys)) \n      (hash-map (first keys)default))\n    (hash-map (first keys) default)))", "problem": 156, "user": "50ab38a8e4b0f65d68208507"}, {"code": "(fn [val coll] (reduce #(assoc % %2 val ) {} coll))", "problem": 156, "user": "50ab8ae3e4b01d6eb43ce9a0"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "50ac81b9e4b071b89ef2622f"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "5097cfcbe4b00ad8bab4e977"}, {"code": "(fn [d ks] (reduce #(assoc %1 %2 d) {} ks))", "problem": 156, "user": "506ab9bae4b05d3b7762c74c"}, {"code": "#(zipmap %2 [% % %])", "problem": 156, "user": "50a83315e4b054305ba5a830"}, {"code": "(fn [d s]\n  (into {} (for [k s] {k d})))", "problem": 156, "user": "50aab057e4b056ee0193586b"}, {"code": "(fn [default-val map-keys]\n  (reduce conj {} (for [x map-keys] (vector x default-val))))", "problem": 156, "user": "50acbd15e4b071b89ef26234"}, {"code": "(fn mapeia [n m] (zipmap m (vec (repeat (count m) n))))", "problem": 156, "user": "4e8b73e4535d65386fec2120"}, {"code": "(fn [v k] (apply merge (map #(hash-map % v) k)))", "problem": 156, "user": "50ae0d24e4b0a40c9cfb08ce"}, {"code": "(fn [v k] (apply hash-map (interleave k (repeat v))))", "problem": 156, "user": "509c03f3e4b085ae113522a8"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "501b4450e4b0ae3ec3946092"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "50ad7888e4b0a40c9cfb08c7"}, {"code": "#(apply\n  hash-map\n  (interleave %2 (repeat %1)))", "problem": 156, "user": "4f253a49e4b0d66497709ff3"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "50ae22c3e4b0a40c9cfb08d0"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "5078d366e4b08327cd804a5b"}, {"code": "(fn [n v]\n  (apply hash-map\n    (interleave v (repeat (count v) n))))", "problem": 156, "user": "4eec82fe535d93acb0a668ae"}, {"code": "#(into {} (for [x %2] {x %1}))", "problem": 156, "user": "509c2c55e4b085ae113522ab"}, {"code": "(fn [value keys]\n  (apply hash-map \n    (interleave keys \n      (repeat (count keys) value)\n    )\n  )\n)", "problem": 156, "user": "4fdce986e4b05e33b9224f74"}, {"code": "(fn [v k]\n  (into {} (map #(assoc {} % v) k)))", "problem": 156, "user": "50b0cffae4b009df37c708c5"}, {"code": "(fn [z w] (reduce (fn [x y] (conj {y z} x)) {} w))", "problem": 156, "user": "50a2e3fbe4b029e8bace3629"}, {"code": "(fn [d keys] (into {} (for [k keys] [k d])))", "problem": 156, "user": "508a2c2fe4b016a2107004a1"}, {"code": "(fn [v L]\n  (loop [T L acc {}]\n    (if (empty? T) acc\n    (recur (rest T) (assoc acc (first T) v)))))", "problem": 156, "user": "50afa883e4b0c3f5ed5c29a2"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "4f03bf5e535dcb61093f6b5d"}, {"code": "(fn [defval keys] \n  (apply hash-map \n\t\t(reduce #(conj %1 %2 defval) \n\t\t\t    [] \n\t\t\t    keys)))", "problem": 156, "user": "4ed47f1e535d10e5ff6f52cd"}, {"code": "#(zipmap %2 (cycle [%1]))", "problem": 156, "user": "508c3d42e4b0f17d83ea26b2"}, {"code": "(fn [v m] (reduce #(conj % {%2 v}) {} m))", "problem": 156, "user": "508ee17ae4b0706b2ed3ef8d"}, {"code": "(fn [d l] \r\n    (loop [ acc {} rem l ] \r\n  (if (empty? rem) \r\n            acc \r\n            (recur (assoc acc (first rem) d) (rest rem)\r\n            )\r\n        )\r\n    )\r\n)", "problem": 156, "user": "50956c2be4b087f34d351ab2"}, {"code": "(fn [v ks] (into {} (map #(vector %1 %2) ks (repeat v))))", "problem": 156, "user": "4f327844e4b0d6649770a092"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "508e13abe4b0f17d83ea26c7"}, {"code": "#(zipmap %2 (repeat %))\n\n;; #(apply assoc {} (interleave %2 (repeat %1)))\n;; #(apply hash-map (interleave %2 (repeat %1)))\n\n;; (fn [default keys]\n;;   (->>  (for [key keys] {key default})\n;;         (apply conj)))\n\n\n;; (fn [val keys] \n;;   (->>\n;;    (interleave keys (repeat val))\n;;    (partition 2)\n;;    (map vec)\n;;    (into {})))\n\n;; #(into {} (map vector %2 (repeat %)))\n\n;; (fn [x s] (reduce #(assoc %1 %2 x) {} s))", "problem": 156, "user": "503f4759e4b00d1a725ff2a9"}, {"code": "(fn [key col] (zipmap col (repeat (count col) key)))", "problem": 156, "user": "50b64b55e4b0a86f8358ca6b"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "50b65966e4b0a86f8358ca6c"}, {"code": "(fn [d s]\n  (apply hash-map (interleave s (repeat d))))", "problem": 156, "user": "50b4383fe4b001349b2f4abf"}, {"code": "(fn[x y] \n    (apply \n     merge\n     (map #(hash-map % x) y)))", "problem": 156, "user": "4daea587edd6309eace4d15a"}, {"code": "(fn [%1 %2]\n   (let [list ((fn [%1 %2]\n                (for [key %2]\n                  (array-map key %1))\n                ) %1 %2)]\n     (conj (last list) (first (rest list)) (first list))))", "problem": 156, "user": "50ac3e4be4b071b89ef2622d"}, {"code": "(fn [v k] (loop [v v k k m {}]\n  (if (zero? (count k))\n    m\n    (recur v (rest k) (assoc m (first k) v)))))", "problem": 156, "user": "50ba81bfe4b03e68e4411c8f"}, {"code": "(fn [v s] (reduce #(assoc %1 %2 v) {} s))", "problem": 156, "user": "50bab629e4b03e68e4411c97"}, {"code": "(fn [a b] (reduce #(assoc %1 %2 a) {} b))", "problem": 156, "user": "50921f9ae4b09a7d0b586de1"}, {"code": "(fn [i xs] (apply hash-map (reverse (cons i (interpose i xs)))))", "problem": 156, "user": "50478418e4b0371827a27bc3"}, {"code": "(fn [d ks] (reduce #(conj % {%2 d}) {} ks))", "problem": 156, "user": "50bbdbb8e4b0594b91591c3a"}, {"code": "(fn [va, vss] \r\n  (into {} \r\n      (map #(vector % va) vss)))", "problem": 156, "user": "4fdf566fe4b05e33b9224f99"}, {"code": "(fn [v, k]\n  (reduce #(assoc %1 %2 v) {} k))", "problem": 156, "user": "50b47c46e4b0c464d223d1b8"}, {"code": "(fn [d a]\r\n  (loop [mya (seq a) result {}]\r\n\t\t(if(empty? mya)  result\t\r\n\t\t\t(recur (rest mya) (assoc result (first mya) d) )\r\n\t\t)\r\n\t)\r\n)", "problem": 156, "user": "50b25f2ce4b03ea88043355f"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4f9920a3e4b0dcca54ed6cfc"}, {"code": "(fn [v k]\n  (reduce #(assoc % %2 v) {} k))", "problem": 156, "user": "509160dae4b0742c82730aef"}, {"code": "(fn [a,x] (reduce #(assoc %1 %2 a) {} x))", "problem": 156, "user": "5007eabde4b0b17c647f5229"}, {"code": "(fn [pl coll]\n  (apply hash-map \n    (interleave coll (iterate identity pl))))", "problem": 156, "user": "4ee7d6d8535d93acb0a66870"}, {"code": "#(reduce conj {} (for [k %2] {k %1}))", "problem": 156, "user": "50b45ee1e4b08fc3808f30ca"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4f474f43e4b0d56e7bb92bb7"}, {"code": "(fn [c xs]\n   (apply hash-map\n  (interleave xs (repeat c))\n              ))", "problem": 156, "user": "5097ddfce4b087ccf61a7af0"}, {"code": "(fn [x ys] (reduce (fn [a b] (conj {b x} a)) {} ys))", "problem": 156, "user": "4eb2eae5535d7eef30807351"}, {"code": "#(into {} (map vector %2 (repeat %)))", "problem": 156, "user": "4ec2fe3f535dcc7ae8597d4f"}, {"code": "(fn [default keys] (zipmap keys (repeat default)))", "problem": 156, "user": "4ec79cac535d6d7199dd36e3"}, {"code": "(fn [d k] (loop [m {} kl k] (if (seq kl) (recur \n(conj m [(first kl) d]) (rest kl)) m)))", "problem": 156, "user": "50b24a2fe4b03ea88043355c"}, {"code": "(fn [v the-keys]\r\n  (zipmap the-keys (repeat (count the-keys) v)))", "problem": 156, "user": "50493b52e4b06e84b772a23e"}, {"code": "(fn hash-with-default [default keys]\n  (apply hash-map (interleave keys (repeat (count keys) default))))", "problem": 156, "user": "50bb9fefe4b0594b91591c36"}, {"code": "#(into {} (for [k %2 v [%]] [k v]))", "problem": 156, "user": "50a8cc97e4b0a9a42786e8db"}, {"code": "(fn [value sequence] \n  (reduce (fn [fi se] (assoc fi se value) ) {} sequence))", "problem": 156, "user": "50b525c5e4b0c464d223d1c3"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "50b0804de4b009df37c708bb"}, {"code": "(fn foo [a lst]\n  (if (= '() lst)\n    {}\n    (assoc (foo a (rest lst)) (first lst) a)\n  ))", "problem": 156, "user": "50ae5659e4b0a40c9cfb08d2"}, {"code": "#(reduce (fn [m v]\n            (assoc m v %1))\n        {} %2)", "problem": 156, "user": "50bc23e4e4b0594b91591c3c"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4f89d489e4b033992c121c7e"}, {"code": "(fn [x n]\n    (apply hash-map\n           (#(interleave n (repeat x)))))", "problem": 156, "user": "50b53b6ae4b0c464d223d1c4"}, {"code": "(fn [a b]\n  (into {}\n    (for [one b]\n      [one a])))", "problem": 156, "user": "4e7d4544535db169f9c796d0"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "50b8914ce4b0cba0e598b64d"}, {"code": "(fn [value to-vec]\n  (reduce conj (map #(do {% value}) to-vec)))", "problem": 156, "user": "50c4baa6e4b0210b849018b0"}, {"code": "(fn [default key-set]\n  (reduce conj {} (map #(hash-map % default) key-set)))", "problem": 156, "user": "50b19a91e4b03ea880433552"}, {"code": "(fn [val keys]\n  (reduce\n    (fn [m [key val]] (assoc m key val))\n    {}\n    (map list keys (cycle [val]))))", "problem": 156, "user": "50812debe4b01a93d3f38e4c"}, {"code": ";;\n(\n  fn sol [ a coll ](\n\t\tzipmap coll ( repeat a )\n\t)\n)", "problem": 156, "user": "50bf7b72e4b0ffd967a66cc1"}, {"code": "(fn [v ks]\n    (apply hash-map (interleave ks (repeat v))))", "problem": 156, "user": "4f1bb9d8535d64f60314647d"}, {"code": "#(zipmap %2 (repeat (count %2) %))", "problem": 156, "user": "5093ca51e4b097f48cc38585"}, {"code": "(fn [x sq] (reduce (fn [s p] (assoc s p x)) {} sq))", "problem": 156, "user": "4f8aa2f9e4b02e764a0a516f"}, {"code": "(fn [dv s] (reduce #(assoc % %2 dv) {} s))", "problem": 156, "user": "50c75d38e4b00bb60fe0c532"}, {"code": "(fn [d keys] (reduce (fn [r k] (assoc r k d)) {} keys))", "problem": 156, "user": "50bfd849e4b042992946c649"}, {"code": "#(into {} (map (fn [a] [a %]) %2))", "problem": 156, "user": "4fc863a9e4b0ee37620e1831"}, {"code": "(fn [val keys]\n  (loop [k keys answer (hash-map)]\n    (if (empty? k) answer\n      (recur (rest k)\n       (assoc answer (first k) val)\n      )\n    )\n  )\n)", "problem": 156, "user": "50bfbf25e4b05ae8c1cbbd9b"}, {"code": "(fn [x seq]\n  (reduce #(assoc %1 %2 x) {} seq))", "problem": 156, "user": "4f3ca5a6e4b0e243712b1f53"}, {"code": "#(apply hash-map (apply concat (map list %2 (iterate identity %1))))", "problem": 156, "user": "50c9e5e3e4b0a409464667d7"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4ed90014535d10e5ff6f52fe"}, {"code": "#(zipmap %2 (iterate #{%1} %1))", "problem": 156, "user": "50c11f5ae4b096f585049c39"}, {"code": "(fn [x y] (zipmap y (repeat x)))", "problem": 156, "user": "4e67b9fc535d8ccf87e9fe82"}, {"code": "#(zipmap  %2 (repeat %))", "problem": 156, "user": "4dad86e0c9a9d6ed0f99dc57"}, {"code": "#(reduce (fn [r x]\n   (assoc r x %1)) {} %2)", "problem": 156, "user": "5092f940e4b097f48cc3857b"}, {"code": "(fn [x,y] (apply hash-map (interleave y (repeat x))))", "problem": 156, "user": "50c8697ce4b00bb60fe0c53f"}, {"code": "(fn [item kys] \n  (reduce (fn [coll ky] (conj coll {ky item})) {} kys))", "problem": 156, "user": "50b11fbce4b009df37c708cb"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4dad51418e77d6ed55f12a44"}, {"code": "(fn [v ks] \n  (apply hash-map \n     (mapcat (fn [k] [k v]) ks)))", "problem": 156, "user": "4eca7a87535d6d7199dd3705"}, {"code": "(fn [x y] (into {} (map (fn [z] {z x}) y)))", "problem": 156, "user": "50c4a354e4b0210b849018af"}, {"code": "#(apply hash-map (concat (interpose % %2) [%]))", "problem": 156, "user": "50cb4cf6e4b0f78a8e1645b4"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "505d70e8e4b0e6aca564be09"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "50cae881e4b0f75dcc9a6e51"}, {"code": "(fn [v s] (zipmap s (repeat (count s) v)))", "problem": 156, "user": "50b29029e4b03ea880433563"}, {"code": "(fn [sep ks] (into {} (map (fn [k] [k sep]) ks)))", "problem": 156, "user": "50ce09e6e4b0ffc302be4bc6"}, {"code": "(fn [v ks] (zipmap ks (repeat (count ks) v)))", "problem": 156, "user": "4f072644535dcb61093f6c20"}, {"code": "(fn loopo [x y] (if (empty? y) {} (conj (loopo x (rest y)) {(first y) x})))", "problem": 156, "user": "50c6fad1e4b00bb60fe0c52d"}, {"code": "(fn [default ks]\n  (apply hash-map (interleave ks (repeat default))))", "problem": 156, "user": "50cf66ffe4b0e61f11ddcd92"}, {"code": "#(loop [b %1 a %2 c {}] (if (empty? a) c (recur b (rest a) (conj c [(first a)b]))))", "problem": 156, "user": "503539dee4b0ed9c821488f6"}, {"code": "(fn [v ks] (zipmap ks (repeat (count ks) v)))", "problem": 156, "user": "4f8beb2fe4b02e764a0a5185"}, {"code": "(fn [x y] (zipmap y (take (count y) (repeat x))))", "problem": 156, "user": "4eeb8f68535d93acb0a668a9"}, {"code": "(fn [d c] (zipmap c (repeat d)))", "problem": 156, "user": "50cf94bde4b0abc485cb9bb2"}, {"code": "#(zipmap %2 (cycle (vector %1)))", "problem": 156, "user": "50c0fac8e4b096f585049c34"}, {"code": "#(into {} (map vector %2 (repeat %)))", "problem": 156, "user": "50ca1a4be4b0a409464667db"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "500aa15ee4b03d00572d2d76"}, {"code": "(fn [v k] (reduce merge (map (fn [key] {key v}) k)))", "problem": 156, "user": "4f6d23cde4b07046d9f4efc6"}, {"code": "(fn[d c](into{}(map #(or[% d])c)))", "problem": 156, "user": "4e707db6535d5021c1a8963a"}, {"code": "(fn [default keys] (reduce (fn [c k] (conj c [k default])) {} keys))", "problem": 156, "user": "50d242c0e4b06ad58337ed0f"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4e4179c4535dc968683fc49d"}, {"code": "(fn [val coll] \n  (reduce #(assoc % %2 val) {} coll))", "problem": 156, "user": "4dd6d7ee535d2dad7130b5cb"}, {"code": "(fn [a x] (into {} (for [y (seq x)] (hash-map y a))))", "problem": 156, "user": "50733b31e4b0e3170b5a869a"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "50ccf729e4b0f7a459302aac"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "50c99e3ee4b0bed41a122997"}, {"code": "(fn [v ks] (zipmap ks (repeat (count ks) v)))", "problem": 156, "user": "4f98b69ae4b0dcca54ed6cf4"}, {"code": "#(zipmap %2 (repeat (count %2) %))", "problem": 156, "user": "4f8b27b3e4b02e764a0a5179"}, {"code": "(fn [defval coll]\n  (zipmap coll (repeat defval)))", "problem": 156, "user": "50bfb5fbe4b05ae8c1cbbd9a"}, {"code": "(fn [dval ks] (reduce #(assoc %1 %2 dval) {} ks))", "problem": 156, "user": "4f0412f8535dcb61093f6b99"}, {"code": "(fn [a b]\n    (loop [x a, lst b, mp {}]\n      (if (= '() lst) mp\n\t  (recur x (rest lst) (assoc mp (first lst) x)))))", "problem": 156, "user": "50d324dde4b049d4ed5650d7"}, {"code": "(fn [v xs]\n  (reduce #(assoc %1 %2 v) {} xs))", "problem": 156, "user": "4e71a12c535d5021c1a8964f"}, {"code": "(fn [x arr] (into {} (map #(hash-map % x) arr)))", "problem": 156, "user": "4f03f197535dcb61093f6b84"}, {"code": "(fn [n s]\n  (apply hash-map (interleave  s (repeat n))))", "problem": 156, "user": "50d4909ce4b09cc622d65a6c"}, {"code": "(fn [o1, o2]\n  (loop [n o1, s o2, f {}]\n    (if (empty? s) f (recur n (rest s) (assoc f (first s) n)))))", "problem": 156, "user": "50d4c940e4b09cc622d65a71"}, {"code": "(fn [default sequ]\n  (loop [default default\n         sequ sequ\n         newmap {}\n         iterator (count sequ)]\n    (if (= iterator 0)\n      newmap\n      (recur default (rest sequ) (conj newmap {(first sequ) default}) (dec iterator)))))", "problem": 156, "user": "50bd13dee4b0594b91591c65"}, {"code": "(fn [v ks] (zipmap ks (repeat (count ks) v)))", "problem": 156, "user": "50cf2267e4b0e61f11ddcd8c"}, {"code": "(fn [default coll]\n  (loop [result {}\n         c coll]\n    (if (empty? c)\n      result\n      (recur (assoc result (first c) default) (rest c)))))", "problem": 156, "user": "4f159ea6535d64f603146445"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4e79f28b535db169f9c796a8"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4f1e4ab5535d64f603146496"}, {"code": "(fn [value,keyset] (into {} (map #(hash-map % value) keyset)))", "problem": 156, "user": "4fc5273ce4b081705acca37f"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "50db8453e4b02e6ac9592c79"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "50d46d53e4b09cc622d65a69"}, {"code": "(fn [d l] (zipmap l (repeat (count l) d)))", "problem": 156, "user": "4e6a4641535d8ccf87e9feb9"}, {"code": "(fn [d ks] (apply hash-map (interleave ks (repeat d))))", "problem": 156, "user": "5095f761e4b0ba05ca7aebfd"}, {"code": "(fn blah  [v keyz] \n\t(if (empty? keyz) \n      (hash-map) \n      (assoc (blah v (rest keyz)) (first keyz) v)))", "problem": 156, "user": "50dc2cd7e4b02e6ac9592c86"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4eb9d8f8535dfed6da9c6d61"}, {"code": "(fn [v s] (into {} (map vector s (take (count s) (iterate #(identity %) v)))))", "problem": 156, "user": "4f8490fae4b033992c121c34"}, {"code": "(fn [v k] (reduce #(assoc %1 %2 v) {} k))", "problem": 156, "user": "4db8f6c4535d1e037afb219e"}, {"code": "(fn [x coll]\n  (into {} (map (fn [collVal] {collVal x}) coll)))", "problem": 156, "user": "50b32252e4b03ea880433568"}, {"code": "(fn default-map [default keys]\n  (loop [m {} k keys]\n    (if (empty? k)\n      m\n      (recur (assoc m (first k) default) (rest k)))))", "problem": 156, "user": "50d882d4e4b01f0871336e69"}, {"code": "#(into {} (map vector %2 (repeat %)))", "problem": 156, "user": "4db1fe241254ad5b4805fa77"}, {"code": "(fn [x y]\n(reduce #(assoc %1 %2 x) '{} y))", "problem": 156, "user": "4f1c2336535d64f60314647f"}, {"code": "(fn [d l]\n  (reduce #(conj % [%2 d]) {} l))", "problem": 156, "user": "4dc986d0535d5973398f9285"}, {"code": "(fn [default ks]\n  (zipmap ks (repeat default)))", "problem": 156, "user": "4f942227e4b0dcca54ed6cbe"}, {"code": "(fn [default s]\n  (reduce #(conj %1 {%2 default}) {} s))", "problem": 156, "user": "50a7ef7fe4b090657f4a5ce0"}, {"code": "#(zipmap %2 [% % %])", "problem": 156, "user": "50e0b5efe4b061dbdced723b"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "4f05a9cf535dcb61093f6bfc"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4e03c616535d04ed9115e796"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "505fd903e4b08f2a82ad10b7"}, {"code": "(fn [dv kl] (into {} (for [k kl] [k dv])))", "problem": 156, "user": "50e13dd6e4b084616e11c668"}, {"code": "(fn p156 [value coll]\n  (->>  (mapcat list coll (repeat value))\n        (apply assoc {})))", "problem": 156, "user": "4daec9dcedd6309eace4d15f"}, {"code": "(fn [a b] (reduce #(conj %1 {%2 a}) {} b))", "problem": 156, "user": "5021f0b3e4b00bba4502f7ac"}, {"code": "(fn [a b]\n  (reduce\n    (fn [x y] (assoc x y a))\n    {} b))", "problem": 156, "user": "50df6dd0e4b061dbdced7225"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "50d179c7e4b05a71a896ef56"}, {"code": "#(reduce (fn [m v] (assoc m v %1)) {} %2)", "problem": 156, "user": "50471d36e4b03b02161376b6"}, {"code": "(fn [ret v col] \n  (if (= '() col)\n    ret\n    (recur (conj ret [(first col) v]) v (rest col))))\n{}", "problem": 156, "user": "50bfe725e4b080409b860f26"}, {"code": "(fn [default keys]\n  (zipmap keys (repeat default)))", "problem": 156, "user": "50e19748e4b0ec0e353386e5"}, {"code": "(fn [d ks]\n  (loop [remain ks acc {}]\n    (if (empty? remain)\n      acc\n      (recur (rest remain) (conj acc {(first remain) d})))))", "problem": 156, "user": "50e3cf55e4b01912b3285c45"}, {"code": "(fn[d, l] (into {} (map (fn[x] [x, d]) l)))", "problem": 156, "user": "50e496e8e4b0cb9ec68fbca0"}, {"code": "(fn [val keys] (into {} (for [k keys] {k val})))", "problem": 156, "user": "50e09f60e4b061dbdced7237"}, {"code": "(fn [x y] (apply array-map (interleave y (repeat x))))", "problem": 156, "user": "50b25edae4b03ea88043355e"}, {"code": "(fn [dv ks]\n  (apply assoc {} (interleave ks (repeat dv))))", "problem": 156, "user": "50bd6033e4b0594b91591c66"}, {"code": "(fn [v k]\n  (into {} (map #(vec [% v]) k)))", "problem": 156, "user": "50e5bca5e4b09ae9427b0e75"}, {"code": "(fn [v s] (zipmap s (repeat v)))", "problem": 156, "user": "50e448bae4b0463d3207248d"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4e1350af535d04ed9115e7d8"}, {"code": "(fn [v ks] (into {} (for [k ks] [k v])))", "problem": 156, "user": "5065dd94e4b0313a384e5643"}, {"code": "(fn [d ks] (apply hash-map (apply concat (map #(list % d) ks))))", "problem": 156, "user": "50dfb660e4b061dbdced7228"}, {"code": "(fn [d m] (zipmap m (repeat d)))", "problem": 156, "user": "4e2164ff535d04ed9115e815"}, {"code": "#(into {} (map (fn [x] {x %1}) %2))", "problem": 156, "user": "50e82c31e4b0ebbe794eb7da"}, {"code": "(fn [v coll] (apply hash-map (interleave coll (repeat v))))", "problem": 156, "user": "4db29f98535df7e46ed9b6c1"}, {"code": "(fn [v ks]\n  (into {}\n        (map (fn [k] [k v]) \n             ks)))", "problem": 156, "user": "50e8422de4b0ebbe794eb7de"}, {"code": "#(reduce (fn z [coll v] (conj coll (vector v %))) {} %2)", "problem": 156, "user": "4f94d3a5e4b0dcca54ed6cc5"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "50e87427e4b0ebbe794eb7e8"}, {"code": "(fn [d x] (zipmap x (repeat (count x) d)))", "problem": 156, "user": "50e8ff6be4b0ebbe794eb7f3"}, {"code": "(fn [value keys]\n  (loop [keys keys result {}]\n    (if (empty? keys)\n      result\n      (recur (rest keys) (assoc result (first keys) value)))))", "problem": 156, "user": "4db8d37d535d1e037afb219c"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "50e7dd5de4b077ad597af36b"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "50e20a07e4b0ae09a0e7de78"}, {"code": "(fn [v k] \n  (reduce merge (map #(assoc {} % v) k)))", "problem": 156, "user": "50ebf8b6e4b04edc3377703f"}, {"code": "#(into {} (for [x %2] [x %]))", "problem": 156, "user": "50ebf779e4b04edc3377703e"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4ebaf790535dfed6da9c6d6e"}, {"code": "(fn [val key-names]\n  (loop [keys key-names\n         result (sorted-map)]\n    (if (empty? keys)\n      result\n      (recur (rest keys) (assoc result (first keys) val)))))", "problem": 156, "user": "4f629697e4b0defedf855fd6"}, {"code": "(fn [default keys] (zipmap keys (take (count keys) (iterate (constantly default) default))))", "problem": 156, "user": "50d86fe2e4b01f0871336e67"}, {"code": "#(into{}(map vector %2(repeat %)))", "problem": 156, "user": "50ed4626e4b01236b1d4983c"}, {"code": "(fn [x y] (reduce #(assoc % %2 x) {} (reverse y)))", "problem": 156, "user": "5047782ce4b0371827a27bc2"}, {"code": "(fn foo [val c] (into {} (map #(hash-map % val) (seq c))))", "problem": 156, "user": "50ec69e0e4b04edc3377704a"}, {"code": "(fn [default keys]\n  (zipmap keys (repeat (count keys) default)))", "problem": 156, "user": "50da19bae4b0277ab115b3cd"}, {"code": "(fn [val, keys] (apply merge (map (fn [key] {key val}) keys)))", "problem": 156, "user": "50ed3c6be4b01236b1d4983b"}, {"code": "(fn [dv ks]\n  (zipmap ks (repeat dv)))", "problem": 156, "user": "50eebf46e4b06330c1f87c61"}, {"code": "(fn [v m] (zipmap m (repeat v)))", "problem": 156, "user": "50ed9e8de4b06330c1f87c44"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "50ef4e2be4b0a78662fa2653"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "50d0d4c8e4b00b15ecee976a"}, {"code": "#(apply assoc {} (mapcat (fn [k] [k %1]) %2))", "problem": 156, "user": "50ef9a7ae4b0bdaecbb47d9e"}, {"code": "(fn [value keys] (apply hash-map (interleave keys (repeat value))))", "problem": 156, "user": "50e111f7e4b084616e11c663"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "50e8cac5e4b0ebbe794eb7ef"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4e6e3aac535d5021c1a89603"}, {"code": "(fn [default coll] (apply assoc {} (interleave coll (take (count coll) (cycle (list default))))))", "problem": 156, "user": "50f0ec9ce4b0d527ce5b30df"}, {"code": "#(into {} (for [k %2] [k %]))", "problem": 156, "user": "50e1077fe4b03e49d9cce649"}, {"code": "#(into {} (for [x %2] {x %1}))", "problem": 156, "user": "50ee145de4b06330c1f87c53"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "50f17c0de4b06d9538fe2123"}, {"code": "(fn setdefaults [defval thekeys] (loop [v defval k thekeys acc {}]\n                                   (if (empty? k)\n                                     acc\n                                     (recur v (rest k) (assoc acc (first k) v)))))", "problem": 156, "user": "50f089d1e4b0c5f4fa5ddb67"}, {"code": "(fn [default keys] (zipmap keys (repeat default)))", "problem": 156, "user": "4ec1b090535dfed6da9c6db5"}, {"code": "(fn [v s] (into {} (for [x s] [x v])))", "problem": 156, "user": "50eddbc4e4b06330c1f87c4b"}, {"code": "(fn [d l] (into {} (map  #( assoc {} % d) l)))", "problem": 156, "user": "50ef3e5de4b0a78662fa2652"}, {"code": "(fn [default keys]\n  (apply hash-map (interleave keys (repeat default))))", "problem": 156, "user": "4f25c4c4e4b0d66497709ffc"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "50ef56dfe4b0bdaecbb47d94"}, {"code": "(fn [v ks]\n  (into {} (map #(vector % v) ks)))", "problem": 156, "user": "4ffc10aae4b0678c553fc3d6"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4fbf2818e4b081705acca317"}, {"code": "(fn [v ks] (into {} (map #(hash-map % v) ks)))", "problem": 156, "user": "50e54fe4e4b049a9877538a0"}, {"code": "(fn [def_value xs]\n  (zipmap xs (take (count xs) (repeat def_value)))\n  )", "problem": 156, "user": "50f3bd98e4b041536e2eca3a"}, {"code": "(fn [default sq]\n   (reduce\n     #(assoc % %2 default)\n     {}\n     sq))", "problem": 156, "user": "50f1dedbe4b0897c4366dcd8"}, {"code": "(fn [v coll] (reduce #(assoc %1 %2 v) {} coll))", "problem": 156, "user": "4fe9ef2fe4b0547ebccb2479"}, {"code": "(fn [v ks] (zipmap ks (repeat v)))", "problem": 156, "user": "4f65140ee4b07046d9f4ef3b"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "50742549e4b054001656accf"}, {"code": "(fn [x y] (apply hash-map (mapcat vector y (repeat x))))", "problem": 156, "user": "50f3ce2ee4b041536e2eca3d"}, {"code": "#(zipmap %2 (for [i (range (count %2))] %1))", "problem": 156, "user": "4f038567535dcb61093f6b0c"}, {"code": "(fn [d k]\n  (reduce #(assoc %1 %2 d) {} k))", "problem": 156, "user": "50e47fa5e4b0cb9ec68fbc9c"}, {"code": "#(into {} (for [x %2] [x %1]))", "problem": 156, "user": "4e9b22e2535dbda64a6f6b74"}, {"code": "(fn lol [x y]\n  (loop [work y\n         result {}\n         z (first work)\n         ]\n    \n    (if (not= z nil)\n      (recur (drop 1 work)\n             (assoc result z x)\n             (first work)\n             )\n      result\n      )\n    )\n  )", "problem": 156, "user": "50fb084ee4b0d10d794c19dd"}, {"code": "(fn [default ks] \n  (apply merge \n   (map #(hash-map %1 default) ks)\n   ))", "problem": 156, "user": "50facb80e4b07934dda8b0d2"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4ec601ff535d6d7199dd36be"}, {"code": "(fn [v ks]\n  (reduce #(assoc %1 %2 v) {} ks))", "problem": 156, "user": "50ec4ed7e4b04edc33777046"}, {"code": "#(zipmap %2 (iterate identity %))", "problem": 156, "user": "50d8739ae4b01f0871336e68"}, {"code": "(fn [default s]\n  (into {} (map (fn [k] [k default]) s)))", "problem": 156, "user": "50fc299ee4b0d10d794c19f2"}, {"code": "(fn [d ks] (into {} (for [k ks] [k d])))", "problem": 156, "user": "50fbf811e4b0d10d794c19f1"}, {"code": "(fn [a x]\n(apply hash-map (interleave x (repeat (count x) a)))\n  )", "problem": 156, "user": "50f4894be4b004d364930528"}, {"code": "(fn makeAMap [v keysa] (zipmap keysa (repeat (count keysa) v)))", "problem": 156, "user": "50eaf688e4b0346a3e988cba"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4fda108ee4b05e33b9224f46"}, {"code": "#(into {} (for [k %2] [k %1]))", "problem": 156, "user": "4f55ab5ee4b0a7574ea71809"}, {"code": "(fn foo [v ks] (when (not (empty? ks)) (conj (hash-map (first ks) v) (foo v (rest ks)))))", "problem": 156, "user": "50f9c7fde4b0e7c80cb15a52"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4f973fb9e4b0dcca54ed6ce8"}, {"code": "(fn [elt coll] (reduce #(assoc %1 %2 elt) {} coll)) \n\n;; assoc takes a collection (the hashmap being buit by reduce), a key (the next element of the given collection), \n;; and a value (the default value element.\n;; reduce needs to start off with an empty hashmap so it's passed as the starting value", "problem": 156, "user": "50fac9e3e4b07934dda8b0d1"}, {"code": "(fn [default coll] (reduce #(assoc %1 %2 default) {} coll))", "problem": 156, "user": "4df247b8535d08e6dec9fe25"}, {"code": "(fn [value keys] (apply hash-map (interleave keys (repeat (count keys) value))))", "problem": 156, "user": "507330e6e4b0e3170b5a8698"}, {"code": "(fn [d ks]\n  (zipmap ks (repeat d)))", "problem": 156, "user": "50d93c53e4b0fd36a4b89223"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "4dad73dc8e77d6ed61f12a44"}, {"code": "(fn [d sq] (reduce #(assoc %1 %2 d) {} sq))", "problem": 156, "user": "50fbdacfe4b0d10d794c19f0"}, {"code": "(fn\n  [default col]\n  (apply hash-map (interleave col (cycle [default]))))", "problem": 156, "user": "51008b6fe4b0700a7a02d6e4"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "4ee7ef87535d93acb0a66872"}, {"code": "(fn [d c]\n  (zipmap c (repeat d)))", "problem": 156, "user": "5006b7d2e4b0678c553fc48c"}, {"code": "(fn mapdef [v s]\n (reduce #( assoc %1 %2 v ) {} s))", "problem": 156, "user": "5101192ae4b0bef64c30e266"}, {"code": "(fn mapDefaults [v ks] (if (empty? ks) {} (conj {(first ks) v} (mapDefaults v (rest ks)))))", "problem": 156, "user": "50ef311fe4b0a78662fa2651"}, {"code": "#(into {} (map (fn [x] [x %1]) %2))", "problem": 156, "user": "5102ac9de4b00c483ae176fa"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "5102489de4b00c483ae176f6"}, {"code": "(fn [init xs]\n  (apply merge (map #(hash-map % init) xs)))", "problem": 156, "user": "5083e759e4b0c98812d0787e"}, {"code": "#(apply conj (map (fn [a b] {a b}) %2 (repeat (count %2) %1)))", "problem": 156, "user": "50f9739ce4b0e7c80cb15a4d"}, {"code": "(fn [dflt lst] (reduce #(conj % {%2 dflt}) {} lst))", "problem": 156, "user": "51040eb2e4b0432126ba9bb4"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4ef77edb535dced4c769f254"}, {"code": "(fn [d s]\n  (apply hash-map (interleave s (repeat d))))", "problem": 156, "user": "50f48298e4b004d364930527"}, {"code": "(fn [val ks]\n  (reduce #(assoc %1 %2 val) {} ks))", "problem": 156, "user": "4eae5fe4535d7eef30807325"}, {"code": "#(zipmap %2 (repeat 3 %))", "problem": 156, "user": "5103807fe4b00c483ae17703"}, {"code": "(fn [vred s]\n           (reduce #(assoc %1 %2 vred) {} s))", "problem": 156, "user": "5106c803e4b01150e115ebee"}, {"code": "#(into {} (for [i %2] [i %1]))", "problem": 156, "user": "50fe9d60e4b03cd852b4e84f"}, {"code": "#(into {} (map (fn [x] [x %1]) %2))", "problem": 156, "user": "50bce014e4b0594b91591c63"}, {"code": "(fn r [d l] (if (empty? l) '{} (assoc (r d (rest l)) (first l) d)))", "problem": 156, "user": "510931ede4b0c71f76895663"}, {"code": "(fn [d m]\n  (reduce conj (for [key m] {key d})))", "problem": 156, "user": "510a8124e4b02ed671928d9b"}, {"code": "(fn initmap [default items]\n  (cond\n    (empty? items) nil\n    :else\n    (merge {(first items) default}\n           (initmap default (rest items))) \n   )\n )", "problem": 156, "user": "502be4fae4b08f5602f232eb"}, {"code": "(fn [v ks] (reduce #(merge %1 {%2 v}) {} ks))", "problem": 156, "user": "50f2e5cee4b0ec8ee6fa8643"}, {"code": "(fn [v ks]\n  (reduce #(assoc % %2 v) {} ks))", "problem": 156, "user": "4fc8769be4b0ee37620e1833"}, {"code": "(fn [value mp] (zipmap mp (repeat value)))", "problem": 156, "user": "5014779ce4b094324338f8e6"}, {"code": "(fn [df ar]\n   (into {}\n(for [s (seq ar)]\n(assoc {} s df)\n))\n)", "problem": 156, "user": "505c6432e4b032b709c81378"}, {"code": "(fn [a b] (into {} (map #(hash-map % a) b)))", "problem": 156, "user": "50a00725e4b08df8156e9e46"}, {"code": "(fn [d ks] (zipmap ks (iterate identity d)))", "problem": 156, "user": "51057b2be4b06d28cacc92e8"}, {"code": "(fn [value coll] (apply merge (map #(assoc {} % value) coll)))", "problem": 156, "user": "50fe91c1e4b03cd852b4e84e"}, {"code": "(fn[v ks]\n    (into {} (vec (map #(vec %) (partition 2 (interleave ks (repeat (count ks) v)))))))", "problem": 156, "user": "4e964f4a535dbda64a6f6b42"}, {"code": "(fn [v ks] (reduce conj (map (fn [i] {i v}) ks)))", "problem": 156, "user": "510cda21e4b078ea71921126"}, {"code": "(fn [d coll] (into {} (map #(vector % d) coll)))", "problem": 156, "user": "510c67f0e4b078ea71921119"}, {"code": "(fn[v s] (zipmap s (repeat v)))", "problem": 156, "user": "4f67f674e4b07046d9f4ef6e"}, {"code": "(fn [v ks]\n  (into {}\n         (map (fn [k] [k v]) ks)))", "problem": 156, "user": "5008d149e4b0144d4f561e41"}, {"code": "#(zipmap %2 (repeat 5 %1))", "problem": 156, "user": "510d9d61e4b078ea71921141"}, {"code": "#(into {} (for [x %2 ] {x %1}))", "problem": 156, "user": "510e3640e4b07438aa32145a"}, {"code": "(fn [a b] (zipmap b (repeat a)))", "problem": 156, "user": "4e6a47b2535d8ccf87e9febb"}, {"code": "#(apply hash-map (interleave %2 (iterate identity %1)))", "problem": 156, "user": "5106bc8ae4b01150e115ebec"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "510dc185e4b078ea71921146"}, {"code": "(fn [default keys] (reduce #(assoc % %2 default) {} keys))", "problem": 156, "user": "4f6fd91ae4b07046d9f4efed"}, {"code": "(fn [x coll] (loop [final {}\n                    remain coll]\n               (if (empty? remain)\n                 final\n                 (recur (assoc final (first remain) x) (into [] (next remain))))))", "problem": 156, "user": "507a33dee4b08327cd804a68"}, {"code": "#(loop [v %\n        k %2\n        m {}]\n   (if-not (empty? k)\n     (recur v (rest k) (conj m [(first k) v]))\n     m))", "problem": 156, "user": "4e975839535dbda64a6f6b52"}, {"code": "(fn [s ks] (zipmap ks (replicate (count ks) s)))", "problem": 156, "user": "5102ef6be4b00c483ae176fc"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "511026b1e4b04c71fce993ec"}, {"code": "#(loop [result {} col %2]\n   (if (empty? col) result\n     (recur (assoc result (first col) %1) (rest col)))\n   )", "problem": 156, "user": "510d3dc6e4b078ea71921132"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "510db6cde4b078ea71921145"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "5107b86de4b05b2b4eee7495"}, {"code": "(fn mdef [x xn](if(empty? xn) \n                 {}\n                 (merge {(first xn) x} (mdef x (rest xn)))\n                 ))", "problem": 156, "user": "50edcc53e4b06330c1f87c49"}, {"code": "(fn [d m] (zipmap m (repeat d)))", "problem": 156, "user": "510cba32e4b078ea71921121"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "510c8a00e4b078ea7192111f"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "4f7e7cbde4b06e829148e1cf"}, {"code": "(fn [dflt lst] \n  (loop [a lst ret {}]\n    (if a\n      (recur (next a) (assoc ret (first a) dflt))\n      ret)))", "problem": 156, "user": "4e74e119535d7a570dd295bc"}, {"code": "#(apply hash-map (interleave %2 (map (constantly %1) %2)))", "problem": 156, "user": "510b574fe4b078ea719210fe"}, {"code": "(fn [val keys] \n  (reduce (fn [s e] (assoc s e val)) {} keys))", "problem": 156, "user": "4fcfa1a4e4b03432b189f41a"}, {"code": "#(reduce (fn [coll x] (assoc coll x %))\n         {} %2)", "problem": 156, "user": "50b35486e4b03ea88043356a"}, {"code": "(fn [d col]\n  (reduce #(assoc %1 %2 d)\n          {}\n          col))", "problem": 156, "user": "51105c7fe4b04c71fce993ef"}, {"code": "(fn [x coll] (zipmap coll (repeat x)))", "problem": 156, "user": "50e1bdd8e4b019fc399ce17f"}, {"code": "(fn [val keys] (zipmap keys (repeat val)))", "problem": 156, "user": "51128c6fe4b0350614f07a79"}, {"code": "(fn defmap [dval kys]\n  (zipmap kys (repeat dval)))", "problem": 156, "user": "510cd1dde4b078ea71921124"}, {"code": "(fn [v ks]\n  (reduce conj {} (map (fn [k] {k v}) ks)))", "problem": 156, "user": "511442d0e4b0e9c109bb74d5"}, {"code": "(fn [d k]  (loop [result {} elements k]\n              (if (empty? elements)\n                result\n                (recur (into result {(first elements) d}) (rest elements)))\n   ))", "problem": 156, "user": "5106dc1be4b01150e115ebf0"}, {"code": "(fn [k l]\n  (loop [em {}, li (reverse l)]\n    (if (= li [])\n       em\n      (recur\n       (conj em {(first li) k})\n       (rest li)))))", "problem": 156, "user": "50a69e8ce4b0aa96157e2626"}, {"code": "#(into {} (for [y %2] [y %1]))", "problem": 156, "user": "5081566ce4b0946d0443855b"}, {"code": "(fn [x l] (reduce #(conj %1 [%2 x]) {} l))", "problem": 156, "user": "5114ab7be4b0ce5098ee73b5"}, {"code": "(fn [a b] (into {} (map #(vec [% a]) b)))", "problem": 156, "user": "4ecc1d85535d23f0362276f8"}, {"code": "(fn map-defaults [def0 keys]\n  (reduce #(conj %1 {%2 def0})\n          {}\n          keys)\n)", "problem": 156, "user": "511589aae4b0ce5098ee73bf"}, {"code": "(fn [default keys_arr] (reduce #(assoc %1 %2 default) {} keys_arr))", "problem": 156, "user": "50feb0e1e4b03cd852b4e851"}, {"code": "(fn [default coll] (zipmap coll (repeat default)))", "problem": 156, "user": "5117caa0e4b0e0897831a60d"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "511618b1e4b0d4f670fd2fdf"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "5118b4e0e4b046de85f62a4c"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4db045b5838c48654951d9be"}, {"code": "(fn [v ks]\n    (reduce (fn [memo k] (merge memo [k v])) {} ks))", "problem": 156, "user": "51195e77e4b055cfb310d499"}, {"code": "(fn [v ks]\n  (into {}\n        (for [k ks]\n          [k v])))", "problem": 156, "user": "4dad7adac9a9d6ed0599dc57"}, {"code": "(fn [default coll]\n  (persistent! \n   (reduce \n    #(assoc! %1 %2 default)\n    (transient {}) \n    coll)))", "problem": 156, "user": "51181009e4b0e0897831a60f"}, {"code": "#(apply hash-map(interleave %2 (repeat %1)))", "problem": 156, "user": "51155b55e4b0ce5098ee73bc"}, {"code": "(fn [value key-list] \n  (into {} \n        (for [k key-list] [k value])))", "problem": 156, "user": "5117c31ee4b0e0897831a60c"}, {"code": "#(apply hash-map (interleave %2 (repeat (count %2) %1)))", "problem": 156, "user": "5115cf87e4b0ce5098ee73c3"}, {"code": "(fn [x xs] (into {} (map #(vector% x) xs)))", "problem": 156, "user": "50ef5703e4b0bdaecbb47d95"}, {"code": "(fn mapdef [x xs] (into {} (map #(vector % x) xs)))", "problem": 156, "user": "50ed1ce7e4b01236b1d49839"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "511a98d7e4b0c87c59c96707"}, {"code": "(fn \n  [x sqnc]\n  \t(reduce conj\n            (map #(hash-map % x) sqnc)))", "problem": 156, "user": "5116afdee4b0063b4e3e16d5"}, {"code": "(fn [v ks] (zipmap ks (repeat (count ks) v)))", "problem": 156, "user": "4fc9985ee4b0ee37620e1846"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4e3a2761535deb9a81d77f48"}, {"code": "(fn [v ks]\n  (into {} (map (fn [k] [k v]) ks)))", "problem": 156, "user": "511c91ace4b00c2a1fa7ff7a"}, {"code": "(fn [v kv] \n\t(loop [mm {} kk kv]\n  \t\t(if (= 1 (count kk) )\n  \t\t\t(assoc mm (first kk) v)\n   \t\t\t(recur (assoc mm (first kk) v) (next kk) )\n    \t)\n\t)\n)", "problem": 156, "user": "500c0393e4b03d00572d2d85"}, {"code": "(fn [k l] (reduce (fn [m i] (assoc m i k)) {} l))", "problem": 156, "user": "504e5e8de4b0f6ff3350c4a8"}, {"code": "#(into {} (for [x %2] [x %]))", "problem": 156, "user": "4e50ad74535dc968683fc4ec"}, {"code": "(fn default-map [value keys] (if (empty? keys) {} (merge (hash-map (first keys) value) (default-map value (rest keys)))))", "problem": 156, "user": "511d5d8ee4b022853b0e07a3"}, {"code": "(fn map-with-defaults [default ks]\n  (reduce #(assoc %1 %2 default) {} ks))", "problem": 156, "user": "5119f3d5e4b06c8af0111818"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "5100d7dbe4b04f1d96d946df"}, {"code": "#(zipmap (reverse %2) (repeat %1))", "problem": 156, "user": "4eae2f9e535d7eef30807324"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "50e3e108e4b01912b3285c48"}, {"code": "(fn [v ks]\n  (reduce #(assoc %1 %2 v) {} ks))", "problem": 156, "user": "4fca4c37e4b0ee37620e184f"}, {"code": "(fn [v ass] (reduce (fn [coll k](assoc coll k v)) {} ass))", "problem": 156, "user": "511ac026e4b0c87c59c9670e"}, {"code": "(fn [default v]\n  (apply hash-map (mapcat (fn [x] [x default]) v)))", "problem": 156, "user": "4e9ff8d0535d7eef3080729c"}, {"code": "(fn this [default-value keys]\n  (if (empty? keys)\n    {}\n    (assoc (this default-value (rest keys)) (first keys) default-value)))", "problem": 156, "user": "4ec12577535dfed6da9c6da8"}, {"code": "(fn [d s]\n  (into {} (map (fn [x] {x d}) s))\n  )", "problem": 156, "user": "512339fce4b03b44edbed434"}, {"code": "(fn [v m]\r\n   (apply merge (map #(hash-map %1 v) m))\r\n )", "problem": 156, "user": "510a6bece4b06956752d35af"}, {"code": "(fn [d ks] (reduce (#(fn [m k] (assoc m k %)) d) {} ks))", "problem": 156, "user": "4fad041ee4b081705acca231"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4ee7d177535d93acb0a6686f"}, {"code": "(fn mm [d s] (loop [n {} nes s]  (if (empty? nes) n (recur (into n { (first nes) d} )  (rest nes) )    ) ))", "problem": 156, "user": "4ff2ff7ce4b0678c553fc342"}, {"code": "#(reduce conj (map (fn [x] {x %}) (reverse %2)))", "problem": 156, "user": "511ac2ede4b0c87c59c9670f"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "511c44fde4b00c2a1fa7ff77"}, {"code": "#(loop [mp (hash-map)\n         i 0]\n    (if (or (nil? %2) (>= i (count %2)))\n      mp\n      (recur (assoc mp (nth %2 i) %1) (inc i)))\n    )", "problem": 156, "user": "511e3454e4b028ee16def195"}, {"code": "(fn [x y]\n  ((fn mapd0 [a b c]\n     (if (empty? b) c\n         (mapd0 a (rest b) (assoc c (first b) a)))\n     ) x y {}  ))", "problem": 156, "user": "5099283ce4b0cae2931060af"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "511623cbe4b0d4f670fd2fe1"}, {"code": "(fn [d m]\n  (loop [result {}\n         m m]\n    (if (empty? m)\n      result\n      (recur (conj result [(first m) d]) (rest m)))))", "problem": 156, "user": "512474ede4b02c3f2a072cce"}, {"code": "(fn [dv, ks] (zipmap ks (repeat dv)))", "problem": 156, "user": "4dada426c9a9d6ed2a99dc57"}, {"code": "(fn [d k] (into {} (for [x k] [x d])))", "problem": 156, "user": "51256b40e4b05d10e3e395f8"}, {"code": "(fn [v ks] (zipmap ks (repeat v)))", "problem": 156, "user": "5125745ae4b05d10e3e395f9"}, {"code": "#(apply hash-map (interleave %2 (repeat (count %2) %1)))", "problem": 156, "user": "5125834ae4b05d10e3e395fa"}, {"code": "#(reduce (fn [dict x] (assoc dict x %1)) {} %2)", "problem": 156, "user": "510acd6ee4b078ea719210f4"}, {"code": "(fn [x xs] (zipmap xs (map (fn [y] x) xs)))", "problem": 156, "user": "511a0374e4b06c8af011181a"}, {"code": "(fn [v ks] (into {} (for [k ks] {k v})))", "problem": 156, "user": "4eecc9ad535d93acb0a668b4"}, {"code": "(fn [x y] (apply hash-map (mapcat (fn [k1] [k1 x]) y)))", "problem": 156, "user": "5123cbbae4b061b4c6f0e0b5"}, {"code": "(fn [d ks] (let [len (count ks)]\n             (zipmap ks (take len (repeat d)))))", "problem": 156, "user": "50ff5887e4b017584cb41ccd"}, {"code": "(fn [default ks]\n  (zipmap ks (repeat default)))", "problem": 156, "user": "5126dbabe4b083bb8f88cf0e"}, {"code": "#(loop [s {} t %2] \n   \t\t\t(if (empty? t)\n  \t\t\t\ts\n              (recur (assoc s (first t) %1) (rest t)))\n   )", "problem": 156, "user": "5105ed16e4b01150e115ebe2"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "5125d963e4b05d10e3e395fe"}, {"code": "(fn [default list]\n  (zipmap list (repeat default)))", "problem": 156, "user": "50d3b03fe4b030b634c368b9"}, {"code": "(fn [val maplist]\n (apply merge (map #(hash-map % val)(seq maplist))))", "problem": 156, "user": "50621cbde4b0341461c88951"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "51284226e4b03a34742b4308"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "5127e504e4b03a34742b4302"}, {"code": "(fn m [val keys] (if (empty? keys) {} (assoc (m val (rest keys)) (first keys) val)))", "problem": 156, "user": "4e9a1512535dbda64a6f6b6e"}, {"code": "#(into {} (map (fn [k] (conj [k] %)) %2))", "problem": 156, "user": "511d11d7e4b022853b0e079f"}, {"code": "(fn [d xs] (into {} (for [x xs] (vector x d))))", "problem": 156, "user": "511aa2a4e4b0c87c59c9670a"}, {"code": "(fn [default keyz]\n  (apply hash-map (interleave keyz (repeatedly (constantly default)))))", "problem": 156, "user": "51168f9fe4b0b3e208dba05c"}, {"code": "(fn [val keys] (zipmap keys (repeat val)))", "problem": 156, "user": "510fd798e4b04c71fce993dc"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "512b9e59e4b04d059cf1fd17"}, {"code": "(fn [v s] (into {} (map #(vector % v) s)))", "problem": 156, "user": "4e6a2f51535d8ccf87e9fea9"}, {"code": "(fn [d k] (zipmap k (repeat d)))", "problem": 156, "user": "4e55b3dc535d8a8b8723a27f"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4f030775535dcb61093f6a43"}, {"code": "(fn [vl coll] (reduce (fn [mp ce] (assoc mp ce vl)) {} coll))", "problem": 156, "user": "512832dfe4b03a34742b4306"}, {"code": "(fn [v ks] (reduce #(conj %1 [%2 v]) {} ks))", "problem": 156, "user": "511b9017e4b00c2a1fa7ff6b"}, {"code": "#(zipmap %2 (cycle [%1]))", "problem": 156, "user": "4fea8741e4b0140c20fb9c09"}, {"code": "(fn [d ks]\n  (apply assoc {} (interleave ks (vec (repeat (count ks) d)))))", "problem": 156, "user": "5123ac8ee4b061b4c6f0e0b1"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4fbbcf0ce4b081705acca2ee"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "510b704ee4b078ea71921100"}, {"code": "(fn [v xs] (into {} (for [x xs] [x v])))", "problem": 156, "user": "50ef96a1e4b0bdaecbb47d9d"}, {"code": "(fn [d s]\n  (reduce #(conj %1 {%2 d}) {} s))", "problem": 156, "user": "512eb723e4b0b740abc5982b"}, {"code": "(fn [default keys]\n  (zipmap keys (repeat default)))", "problem": 156, "user": "50ed8fd1e4b06330c1f87c3f"}, {"code": "(fn [dv m] (reduce #(conj %1 [%2 dv]) {} m))", "problem": 156, "user": "51000111e4b00d7ad4cab15e"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "512eb1e7e4b0b740abc5982a"}, {"code": "(fn [d ks] (zipmap ks (map (fn [k] d) ks)))", "problem": 156, "user": "51307b84e4b08c712d3fae39"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "512b7a05e4b04d059cf1fd14"}, {"code": "(fn [v kk] (reduce (fn [m k] (assoc m k v)) {} kk ))", "problem": 156, "user": "50fa01bce4b07934dda8b0ba"}, {"code": "(fn [d keys] (apply merge (map #(hash-map %1 d) keys)))", "problem": 156, "user": "51149439e4b0ce5098ee73b4"}, {"code": "(fn make-map\n  [default ks]\n  (apply hash-map (apply concat (for [x ks] [x default]))))", "problem": 156, "user": "512da425e4b040332b905b34"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4de52c87535d08e6dec9fdf0"}, {"code": "(fn [d m] (into {} (map #(hash-map % d) m)))", "problem": 156, "user": "51319a53e4b06942423563c8"}, {"code": "(fn [x y] (let [xs (repeat (count y) x)\n            z (map vector y xs)] \n            (into {} z)) )", "problem": 156, "user": "5133e51ae4b0d7a043de8cf6"}, {"code": "(fn [a l]\n  (apply merge (map (fn [li] {li a}) l)))", "problem": 156, "user": "50b668dde4b08fb537db98f2"}, {"code": "(fn map-it\n  ([df key0]\n    (map-it df key0 {}))\n  ([df key0 m]\n    (if (empty? key0)\n      m\n      (map-it df (rest key0) (assoc m (first key0) df)))))", "problem": 156, "user": "504e12ade4b078edc5f593b7"}, {"code": "(fn \n    [v k]\n    (reduce #(assoc %1 %2 v) {} k))", "problem": 156, "user": "4f17ab99535d64f603146457"}, {"code": "(fn [dv sq] (loop [r {} s sq] (if-not (empty? s) (recur (assoc r (first s) dv) (rest s)) r)))", "problem": 156, "user": "5082ccb3e4b06a522e8c7af3"}, {"code": "(fn create-map-with-defaults [default-value keys]\n\t\t\t   (loop [map {} keys keys]\n\t\t\t      (if (empty? keys)\n\t\t\t\t  map\n\t\t\t\t  (recur (assoc map (first keys) default-value) (rest keys)))))", "problem": 156, "user": "4e68fad4535d8ccf87e9fe93"}, {"code": "(fn [default values] (zipmap values (repeat default)))", "problem": 156, "user": "4ddbd934535d02782fcbe9fc"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "50d3ec8be4b030b634c368bb"}, {"code": "(fn [d ks]\n  (apply hash-map (interleave ks (repeat d)))\n)", "problem": 156, "user": "511cca27e4b00c2a1fa7ff7d"}, {"code": "(fn [v, ks]\n  (reduce (fn [acc, x] (assoc acc x v)) {} ks)\n)", "problem": 156, "user": "51365524e4b04ac1f358dd52"}, {"code": "(fn [x y] (reduce (fn [x1 y1] (assoc x1 y1 x)) {} y))", "problem": 156, "user": "5136ca56e4b04ac1f358dd5a"}, {"code": "(fn [v m] (zipmap m (repeat v)))", "problem": 156, "user": "4e823f41535db62dc21a62c8"}, {"code": "(fn [default keylist]\n  (reduce conj {} (for [k keylist] {k default})))", "problem": 156, "user": "5133af1de4b0d7a043de8cf2"}, {"code": "(fn constr [v k-coll]\n  (->> (for [k k-coll]\n \t[k v]) (into {}))\n)", "problem": 156, "user": "512a8ef7e4b0ff5c4bc1f99e"}, {"code": "(fn [d k] (loop [l k ret '{}] (if (empty? l) ret (recur (rest l) (assoc ret (first l) d)))))", "problem": 156, "user": "4f47eab2e4b0d56e7bb92bc6"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "4e6f1b7a535d5021c1a89618"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "51352899e4b082aeb3a3f03b"}, {"code": "(fn [k vs]\n  (reduce #(assoc %1 %2 k) {} vs))", "problem": 156, "user": "4ea5ba92535d7eef308072d9"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "5138f744e4b0a5db03d727df"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "5073e7fde4b054001656accb"}, {"code": "(fn [default keylist] (apply conj (conj (reverse (map #(vector % default) keylist)) {})))", "problem": 156, "user": "513a4babe4b067e25a345eca"}, {"code": "#(loop [list-of-keys %2, new-map {}]\n   (if (empty? list-of-keys)\n     new-map\n     (recur (next list-of-keys) (assoc new-map (first list-of-keys) %))))", "problem": 156, "user": "512c0f84e4b03a42b6300232"}, {"code": "(fn [df mp] (reduce #(assoc %1 %2 df) {}  mp ) )", "problem": 156, "user": "5124619ae4b02c3f2a072ccd"}, {"code": "(fn [x v] (let [result {}] (into {} (for [e v] (into result {e x})))))", "problem": 156, "user": "5138d08be4b0a5db03d727db"}, {"code": "(fn [x xs] \n  (into {} (map #(identity [% x]) xs)))", "problem": 156, "user": "513b77f3e4b00f740c76c403"}, {"code": "#(into {} (for [k %2] {k %}))", "problem": 156, "user": "513333a8e4b0e0c0cda41e78"}, {"code": "#(reduce (fn [col k] (assoc col k %1)) {} %2)", "problem": 156, "user": "50f53694e4b057d4c52de881"}, {"code": "(fn [d s] (zipmap s (repeat d)))", "problem": 156, "user": "513bb7a6e4b04402f587b77d"}, {"code": "(fn [d v]\n  (zipmap v (repeat (count v) d)))", "problem": 156, "user": "4f9d87fce4b0dcca54ed6d24"}, {"code": "#(into {} (sort (zipmap %2 (repeat %))))", "problem": 156, "user": "513ca934e4b0b86ece9f3228"}, {"code": "(fn [d k] (zipmap k (repeat d)))", "problem": 156, "user": "5139ec21e4b067e25a345ebe"}, {"code": "(fn [default seq] (zipmap seq (repeat default)))", "problem": 156, "user": "513a1d33e4b067e25a345ec4"}, {"code": "(fn [x y] (zipmap y (take (count y) (repeat x))\n))", "problem": 156, "user": "512fba16e4b0a88bb1e00aae"}, {"code": "(fn [x coll] (reduce #(assoc % %2 x) {} coll))", "problem": 156, "user": "4f8ab084e4b02e764a0a5171"}, {"code": "(fn [default, keys]\n  (into {} (map #(vector % default) keys)))", "problem": 156, "user": "4f251302e4b0d66497709ff0"}, {"code": "(fn [val keys] (apply assoc {} (interleave keys (repeat val))))", "problem": 156, "user": "513d121fe4b0e544971636a2"}, {"code": "(fn [default keys]\n\t\t(zipmap keys (repeat (count keys) default)))", "problem": 156, "user": "51205867e4b0e88f5a20c40f"}, {"code": "(fn [k l] (zipmap l (repeat k)))", "problem": 156, "user": "51370575e4b04059df19f2fe"}, {"code": "(fn [default keys] (zipmap keys (repeat (count keys) default)))", "problem": 156, "user": "513953f1e4b0a5db03d727e2"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "51281b25e4b03a34742b4304"}, {"code": "(fn [v s] (into {} (for [k s] [k v])))", "problem": 156, "user": "4efd98fa535de96065cf5086"}, {"code": "(fn [val keys] \n   (apply hash-map\n          (loop [seq keys \n                 ret []]\n            (if (empty? seq)\n              ret\n              (recur (rest seq) (conj ret (first seq) val))))))", "problem": 156, "user": "51392535e4b0a5db03d727e1"}, {"code": "(fn mapdefault [x ys]\n  (zipmap ys (repeat x)))", "problem": 156, "user": "4fb804f7e4b081705acca2d6"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "513edd13e4b051389b345b39"}, {"code": "(fn [default keys] (reduce (fn [m k] (assoc m k default)) {} keys))", "problem": 156, "user": "51411e3be4b05ca1a0b379f3"}, {"code": "#(apply hash-map (apply concat (map (fn [x] [x %1]) %2)))", "problem": 156, "user": "513f400ae4b051389b345b3f"}, {"code": "(fn [d s] (apply merge (map (fn[el]{el d}) s)))", "problem": 156, "user": "513a49d3e4b067e25a345ec9"}, {"code": "#_(zipmap (reverse %2) (reduce (fn [emptycoll _] (conj emptycoll %1)) [] %2))\n\n\n; Pfff ouais mais si t'utilises plein de trucs que je connais pas ... interleave ? repeat ? apply ?\n; (fn [v ks]\n;  (apply hash-map (interleave ks (repeat v))))\n\n#_(apply hash-map (interleave %2 (repeat (count %2) %1)))\n\n; Du nr 1 user\n\n#(into {} (map vector %2 (repeat %1)))", "problem": 156, "user": "513d09cbe4b0b86ece9f322e"}, {"code": "(fn [default keylist]\n  (zipmap\n   keylist\n   (map (fn [_] default) keylist)))", "problem": 156, "user": "4f8d340be4b02e764a0a51a8"}, {"code": "#(apply merge (for [k %2] {k %1}))", "problem": 156, "user": "5141b763e4b02fd87f5064c4"}, {"code": "(fn dog [valu col] (into {} (map #(conj [%] valu ) col)))", "problem": 156, "user": "51427a8be4b0b50abeb46b37"}, {"code": "#(into {} (map vector %2 (repeat %)))", "problem": 156, "user": "5141fafbe4b0b50abeb46b28"}, {"code": "#(reduce (fn [a k] (assoc a k %1)) {} %2)", "problem": 156, "user": "5142ea50e4b0c172af7558ca"}, {"code": "(fn [d,v] (reduce #(conj %1 {%2 d}) {} v))", "problem": 156, "user": "5142e808e4b0c172af7558c9"}, {"code": "#(reduce (fn[acc,item] (assoc acc item %1)) {} %2)", "problem": 156, "user": "513f53c6e4b051389b345b40"}, {"code": "(fn [x xs]\n  (let [pairs (for [a xs]\n                [a x])]\n    (apply hash-map (reduce concat pairs))))", "problem": 156, "user": "50bf6f93e4b0ffd967a66cbf"}, {"code": "#(into {} (map (fn [x] (assoc {} x %1)) %2))", "problem": 156, "user": "51430fb2e4b0c172af7558ce"}, {"code": "(fn [d k] (into {} (map #(vector % d) k)))", "problem": 156, "user": "5144c0a2e4b0d29bc9e5e33b"}, {"code": "(fn [y xs] (reduce #(assoc %1 %2 y) {} xs))", "problem": 156, "user": "5145832be4b0e8879607340a"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "505b9084e4b032b709c81371"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4e52777f535d302ef430da76"}, {"code": "(fn [d k]\n  (zipmap k (repeat d)))", "problem": 156, "user": "4e6acc33535d8ccf87e9ff05"}, {"code": "(fn [defv keys]\n  (let [c (count keys)]\n    (zipmap keys (repeat c defv))))", "problem": 156, "user": "50e135f4e4b084616e11c667"}, {"code": "(fn [d ks] (zipmap ks (repeat d)))", "problem": 156, "user": "514677dce4b04ef915e3731a"}, {"code": "(fn [default ks] (reduce #(conj {%2 default} %1) {} ks))", "problem": 156, "user": "4ffa2009e4b0678c553fc3b6"}, {"code": "(fn [v ks] (zipmap ks (repeat (count ks) v)))", "problem": 156, "user": "4eb3fcba535d7eef30807359"}, {"code": "(fn [e c] (reduce #(assoc %1 %2 e) {} c))", "problem": 156, "user": "4ed3c783535d44c135fd68f6"}, {"code": "#(into {} (map vector %2 (repeat %)))", "problem": 156, "user": "513f0565e4b051389b345b3b"}, {"code": "#(into {} (map vector %2 (for [x (range (count %2))] %1 )))", "problem": 156, "user": "51416934e4b03d51af0d04f0"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "5146f6fce4b0d12420447957"}, {"code": "(fn [x y] (zipmap y (repeat x)))", "problem": 156, "user": "50fe2420e4b03cd852b4e84a"}, {"code": "(fn [v ks] (zipmap ks (repeat (count ks) v)))", "problem": 156, "user": "514852b4e4b0203766d54154"}, {"code": "(fn [default someSeq]\n  (zipmap someSeq (repeat (count someSeq) default)))", "problem": 156, "user": "4dcc2435535d5973398f9290"}, {"code": "(fn [v ks] (reduce #(assoc % %2 v) {} ks))", "problem": 156, "user": "500e3238e4b068062f6e8d8f"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "50e4f4e9e4b049a987753896"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "514992d2e4b0b64cbeae1848"}, {"code": "(fn [d s] \n  (reduce merge\n          (map \n           (fn [i] \n             (hash-map i d)) s)))", "problem": 156, "user": "50772e6ae4b0fc74642bff5d"}, {"code": "#(into {} (map (fn [x] [x %]) %2))", "problem": 156, "user": "4f3ae998e4b0e243712b1f1f"}, {"code": "(fn [d l] (into {} (map #(vec [% d]) l)))", "problem": 156, "user": "513dcc1ce4b0825f97f7f964"}, {"code": "(fn [x, y] (zipmap y (repeat (count y) x)))", "problem": 156, "user": "514b66f4e4b0bd81940b86cb"}, {"code": "(fn [deflt coll]\n  (reduce (fn [aset akey] (assoc aset akey deflt ) ) {} (reverse coll) )\n  )", "problem": 156, "user": "5135a74ae4b04ac1f358dd46"}, {"code": "#(zipmap %2 (map (constantly %1) %2))", "problem": 156, "user": "514afd1be4b0bd81940b86c6"}, {"code": "(fn [default keys]\n  (reduce #(assoc %1 %2 default) {} keys))", "problem": 156, "user": "5140c505e4b049dea086df40"}, {"code": "(fn [arvo mappi] (reduce #(assoc %1 %2 arvo) {} mappi))", "problem": 156, "user": "506f2f58e4b09350ab4199fa"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4fc4e9b5e4b081705acca352"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "514da593e4b019235f6c058a"}, {"code": "#(apply assoc {} (apply concat (for [x %2] [x %1])))", "problem": 156, "user": "4e32aa5b535deb9a81d77f24"}, {"code": "(fn [default keys] (zipmap keys (repeat default)))", "problem": 156, "user": "4e3bcca9535deb9a81d77f54"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "51473a70e4b0d520409ed394"}, {"code": "(fn [default-value initial-map] (reduce merge (map (fn [x] (hash-map x default-value)) initial-map)))", "problem": 156, "user": "5137fb22e4b0a5db03d727d3"}, {"code": "#(reduce (fn [x,y] (assoc x y %1)) {} %2)", "problem": 156, "user": "514cfa27e4b019235f6c057d"}, {"code": "(fn [d v] \n  (apply assoc {} (interleave  v (repeat d))))", "problem": 156, "user": "4f85ce23e4b033992c121c4a"}, {"code": "(fn [d k](zipmap k (repeat (count k) d)))", "problem": 156, "user": "51424c61e4b0b50abeb46b33"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4e8d5911535d65386fec2133"}, {"code": "(fn [defval init-keys]\n  (loop [res {}, key init-keys]\n    (if (empty? key)\n      res\n      (recur \n        (assoc res (first key) defval)\n        (rest key))\n      )))", "problem": 156, "user": "4ef2eb4d535dced4c769f226"}, {"code": "(fn ins [val keys]\n  (reduce #(assoc %1 %2 val) {} keys))", "problem": 156, "user": "51502056e4b098b221effc25"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "514d398ee4b019235f6c0583"}, {"code": "(fn build [v, ks]\n  (loop [ks ks r {}]\n    (if (empty? ks)\n      r\n      (recur (rest ks) (conj r {(first ks) v})))))", "problem": 156, "user": "5151a6bee4b03e678e393ad3"}, {"code": "(fn [d, k] (zipmap k (for [x k] d)))", "problem": 156, "user": "5151aa14e4b03e678e393ad4"}, {"code": "(fn [v keys] (apply hash-map (interleave keys (repeat v))))", "problem": 156, "user": "51170b49e4b0063b4e3e16d9"}, {"code": "#(loop [m {} [f & r] %2] (if (empty? r) (assoc m f %) (recur (assoc m f %) r)))", "problem": 156, "user": "509a5ca8e4b0efbae1fbc0ab"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "5016ac54e4b052339a490e7b"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "51037468e4b00c483ae17702"}, {"code": "#(->> (cycle [%])\n      (interleave %2)\n      (apply hash-map))", "problem": 156, "user": "512f06c5e4b0762be4c7aad7"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4f50d933e4b03ad3f0c10d11"}, {"code": "(fn [d ks]\n  (reduce #(merge {%2 d} %1) {} ks))", "problem": 156, "user": "51460e4ce4b04ef915e37314"}, {"code": "#(into{}(map(fn[x][x%1])%2))", "problem": 156, "user": "4f296a80e4b0d6649770a02a"}, {"code": "(fn mkddict [v ks] (when (not (empty? ks)) (conj {(first ks) v} (mkddict v (rest ks))))\n  )", "problem": 156, "user": "51448607e4b0d29bc9e5e336"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "514d8084e4b019235f6c0588"}, {"code": "(fn [x y] (reduce #(assoc %1 %2 x) {} y))", "problem": 156, "user": "510967aae4b07c05fdf6dc0f"}, {"code": "#(reduce (fn [m k] (assoc m k %)) {} %2)", "problem": 156, "user": "5153b1bce4b0252ac4b16639"}, {"code": "(fn [v m] (zipmap m (repeat v)))", "problem": 156, "user": "51367626e4b04ac1f358dd53"}, {"code": "#(apply assoc {} (interleave %2 (repeat %1)))", "problem": 156, "user": "4e58ef07535d8a8b8723a299"}, {"code": "(fn [d coll] \n  (apply conj \n         (map #(hash-map % d) coll)))", "problem": 156, "user": "5150a7d7e4b03e678e393abb"}, {"code": "(fn f [v s]\n  (reduce #(assoc %1 %2 v) {} s))", "problem": 156, "user": "501b1efee4b0b12d9c5f4d82"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "5154c361e4b0179c5115f4e3"}, {"code": "(fn [default-value x] (zipmap x (repeat default-value)))", "problem": 156, "user": "504f65bae4b0a02f9cffde7e"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "5149f383e4b0829bd132edb2"}, {"code": "(fn [default-value mapping-keys]\n       (letfn [(mapping-default\n               [innter-default-value inner-mapping-keys]\n               (if (not (= (count inner-mapping-keys) 0))\n                 (assoc\n                   (mapping-default innter-default-value (rest inner-mapping-keys))\n                   (first inner-mapping-keys)\n                   innter-default-value)))]\n         (mapping-default default-value mapping-keys)))", "problem": 156, "user": "514d7e29e4b019235f6c0587"}, {"code": "(fn [v kk] (reduce (fn [m k] (assoc m k v)) {} kk))", "problem": 156, "user": "504e71cbe4b0f6ff3350c4b3"}, {"code": "(fn [x coll] (apply hash-map (apply concat (map #(vector % x) coll))))", "problem": 156, "user": "4fa85ae4e4b081705acca1d3"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "515a6151e4b0394f658fe241"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "514e4ae4e4b019235f6c0594"}, {"code": "(fn [v ks] (reduce merge (map #(hash-map % v) ks)))", "problem": 156, "user": "50782c80e4b0fc74642bff65"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "51534ce2e4b0252ac4b16626"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "5151b1abe4b03e678e393adb"}, {"code": "(fn [d m]\r\n   (loop [result {}\r\n      m m]\r\n         (if (empty? m)\r\n            result\r\n            (recur (conj result [(first m) d]) (rest m)))))", "problem": 156, "user": "50ab44b2e4b0f65d68208509"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "511179a2e4b03f43822243d0"}, {"code": "(fn [dflt ks] (reduce #(assoc %1 %2 dflt) {} ks))", "problem": 156, "user": "515828b8e4b0a069fd272c71"}, {"code": "(fn [x y] (into {} (map vector y (repeat (count y) x))))", "problem": 156, "user": "510c123be4b078ea7192110e"}, {"code": "(fn [v s]\n  (reduce\n   (fn [a b]\n     (assoc a b v))\n   {}\n   s))", "problem": 156, "user": "515e38ace4b049add99a0538"}, {"code": "(fn makedefaultmap [df ks]\n  (apply merge (map #(assoc {} % df) ks)))", "problem": 156, "user": "515f2a85e4b0595cf3d1da44"}, {"code": "(fn [dfs kys] (reduce conj (for [x kys] {x dfs})))", "problem": 156, "user": "515fe402e4b0e2be8aa20bd7"}, {"code": "(fn [def-val ks] (into {} (map #(vector % def-val) ks)))", "problem": 156, "user": "516014fde4b0e2be8aa20be1"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "5131d817e4b06942423563ca"}, {"code": "(fn [default-value k]\n  (apply assoc {}\n         (interleave k (repeat default-value))))", "problem": 156, "user": "515bed3be4b0388ca8ca1525"}, {"code": "(fn [def-v ls]\n  (loop [acc {}\n         ls ls]\n    (if (empty? ls)\n      acc\n      (recur (assoc acc (first ls) def-v) (rest ls))\n      )\n    )\n  )", "problem": 156, "user": "515ef58be4b02c55805ea237"}, {"code": "#(into {} (map vector %2 (repeat %)))", "problem": 156, "user": "5153316ce4b0252ac4b16611"}, {"code": "(fn [default keys]\n          (zipmap keys (repeat default)))", "problem": 156, "user": "504ee511e4b0e7ad84dbc4a4"}, {"code": "(fn [x y] \n  (zipmap y (repeat x)  ))", "problem": 156, "user": "5149c2f1e4b0829bd132edb0"}, {"code": "(fn [default coll]\n  (let [defaults (repeat (count coll) default)]\n    (reduce merge (map #(assoc {} %2 %1) defaults coll))))", "problem": 156, "user": "51592b81e4b0394f658fe22c"}, {"code": "(fn [def-val map-keys] \n  (reduce #(assoc %1 %2 def-val) {} map-keys))", "problem": 156, "user": "515d6281e4b00901442db1dc"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4fe91b62e4b0547ebccb243f"}, {"code": "#(into {} (map (fn [k] identity [k %]) %2))", "problem": 156, "user": "515ffbfbe4b0e2be8aa20bdd"}, {"code": "#(zipmap %2 (cycle [%]))", "problem": 156, "user": "4f437751e4b0d7d3c9f3fd20"}, {"code": "(fn [v ks] (zipmap ks (repeat v)))", "problem": 156, "user": "50723bbae4b0e3170b5a868b"}, {"code": "(fn [x y] (zipmap y (repeat (count y) x)))", "problem": 156, "user": "50e99c35e4b092aee0e98275"}, {"code": "(fn [mv mk] (zipmap mk (repeat (count mk) mv)))", "problem": 156, "user": "5162757ee4b03cfa3774b3fe"}, {"code": "(fn [x y] (zipmap y (repeat x)))", "problem": 156, "user": "51618519e4b009fba0926e35"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "515e8ce2e4b049add99a053d"}, {"code": "(fn [v coll] (apply hash-map (interleave coll (repeat v))))", "problem": 156, "user": "4fdbc075e4b05e33b9224f61"}, {"code": "(fn [default seq]                                                                          \n  (loop [result {}                                                                         \n         my-seq (reverse seq)]                                                             \n    (if (not-empty my-seq)                                                                 \n      (do                                                                                  \n        (prn (first my-seq))                                                               \n        (recur (assoc result (first my-seq) default)                                       \n               (rest my-seq)))                                                             \n      result)))", "problem": 156, "user": "5161c6a7e4b009fba0926e38"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "50705886e4b07bd6ad9b9f2a"}, {"code": "(fn [default ks]\n  (apply hash-map (interleave ks (repeat default))))", "problem": 156, "user": "506b40ade4b0eda3100c0905"}, {"code": "(fn [val vec]\n  (loop [vect vec\n         m {}]\n    (cond\n     (empty? vect) m\n     :else (recur (rest vect)\n                  (merge (hash-map (first vect) val) m)))))", "problem": 156, "user": "5154fa3fe4b0179c5115f4e6"}, {"code": "(fn [v s] (apply hash-map (conj (vec (interpose v s)) v)))", "problem": 156, "user": "51662183e4b05e5ef6a5e807"}, {"code": "(fn [x y] (reduce #(conj % {%2 x}) {} y))", "problem": 156, "user": "5079fd71e4b08327cd804a66"}, {"code": "#(into {} (for [x %2] [x %1]))", "problem": 156, "user": "5164867fe4b003cf19fdde3e"}, {"code": "(fn [v ks]\n  (into {} (map #(vector % v) ks)))", "problem": 156, "user": "51670895e4b013fc800656c1"}, {"code": "(fn [v ks] (into {} (for [x ks] [x v])))", "problem": 156, "user": "51631aeee4b055933a9ca02a"}, {"code": "#(reduce (fn [x y] (assoc x y %))\n           {} %2)", "problem": 156, "user": "5168d4ebe4b03f62cda68cdf"}, {"code": "#(into {} (map (fn [k] [k %1]) %2))", "problem": 156, "user": "512700c4e4b083bb8f88cf14"}, {"code": "(fn [d ls]\n  (reduce #(assoc %1 %2 d) {} ls)\n )", "problem": 156, "user": "4e6a4edd535d8ccf87e9fec4"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "51696bcde4b03f62cda68ce7"}, {"code": "(fn [x y]\n  (loop [data {} sec y]\n    (if (nil? (first sec))\n      data\n      (recur (assoc data (first sec) x) (rest sec)))))", "problem": 156, "user": "4f16d3fd535d64f60314644e"}, {"code": "(fn [d s] (into {} (for [x s] [x d])))", "problem": 156, "user": "5166b491e4b060c690c1f4be"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "515ebde3e4b01e5d11ccd0a8"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "5166e80de4b060c690c1f4c5"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "5150f87ae4b03e678e393ac7"}, {"code": "(fn [x ks] (reduce #(assoc %1 %2 x) {} ks))", "problem": 156, "user": "5160195ae4b0e2be8aa20be3"}, {"code": "(fn [d i]\n\t(let [reduce-map (fn[l v](assoc l v d))]\n\t\t(reduce reduce-map {} i)\n\t)\n)", "problem": 156, "user": "5143952fe4b0b4fb4ace5f38"}, {"code": "(fn [v ks]\n  (reduce (fn [ret this] (assoc ret this v)) {} ks))", "problem": 156, "user": "513cb853e4b0b86ece9f322b"}, {"code": "(fn [df v] (reduce conj {} (map #(vector % df) v)))", "problem": 156, "user": "516db4f6e4b046df6fbb76a0"}, {"code": "(fn[x y] (reduce #(assoc %1 %2 x) {} y))", "problem": 156, "user": "500b61b1e4b03d00572d2d81"}, {"code": "#(zipmap %2 (repeat (count %2) %))", "problem": 156, "user": "4faafccde4b081705acca209"}, {"code": "(fn [default keys_]\n  (zipmap keys_ (repeat default)))", "problem": 156, "user": "512f4ed7e4b0762be4c7aad9"}, {"code": "(fn [d s] (reduce #(assoc % %2 d) {} s))", "problem": 156, "user": "511d6a01e4b022853b0e07a5"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "516e9d9be4b06aac486e5b2b"}, {"code": "#(into {} (for [k %2]\n            [k %1]))", "problem": 156, "user": "50b1d166e4b03ea880433554"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "51696ee7e4b03f62cda68ce8"}, {"code": "(fn [df kys]\n  (apply merge (for [k kys] (assoc {} k df))))", "problem": 156, "user": "515737f0e4b0b0b4b87062d0"}, {"code": "(fn [default list] (reduce \n(fn [acc key] (assoc acc key default))\n{} list))", "problem": 156, "user": "50e9ed1de4b02d54280826d5"}, {"code": "(fn [default keyz]\n  (zipmap keyz (repeat (count keyz) default)))", "problem": 156, "user": "516f06dce4b06aac486e5b39"}, {"code": "(fn [x y] (zipmap y (repeat (count y) x)) )", "problem": 156, "user": "51227a00e4b068a9582e656b"}, {"code": "(fn [d v] (zipmap v (repeat d)))", "problem": 156, "user": "5164d97ee4b003cf19fdde43"}, {"code": "(fn [d m]\n  (into {}\n   \t(map (fn [k] {k d}) m)))", "problem": 156, "user": "4f189b42535d64f60314645d"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4eab612d535d7eef30807316"}, {"code": "(fn [x y] (zipmap y (vec (repeat (count y) x))))", "problem": 156, "user": "516dc88ae4b046df6fbb76a1"}, {"code": "(fn [value\n\t sequence]  \n  (loop [s sequence\n\t     m {}]\n\t(if (empty? s)\n\t  m\n\t  (recur\n\t    (next s)\n\t    (assoc m  (first s) value)))))", "problem": 156, "user": "514a13cee4b0829bd132edb4"}, {"code": "(fn [default-value coll]\n  (apply hash-map (interleave  coll (iterate identity default-value))))", "problem": 156, "user": "516933ece4b03f62cda68ce4"}, {"code": "(fn [default ks]\n  (loop [m {} ks ks]\n    (if (empty? ks)\n      m\n      (recur\n       (assoc m (first ks) default)\n       (rest ks)))))", "problem": 156, "user": "51684318e4b03f62cda68cd6"}, {"code": "(fn [d k] (zipmap k (repeat d)))", "problem": 156, "user": "512d3304e4b040332b905b2d"}, {"code": "(fn d [default list]\n  (loop [res {} l list]\n    (if (empty? l)\n      res\n      (recur (conj res {(first l) default}) (rest l))\n      )\n    )\n  )", "problem": 156, "user": "516bc02ce4b005fd0cdf85c5"}, {"code": "#(into {} (for [k %2] [k %1]))", "problem": 156, "user": "51740b65e4b0d277d717bc67"}, {"code": "(fn [defval ks]\n  (reduce #(conj %1 {%2 defval}) {} ks))", "problem": 156, "user": "5159849ce4b0394f658fe236"}, {"code": "(fn [val keys] (zipmap keys (repeat val)))", "problem": 156, "user": "51729002e4b044b2ef48a850"}, {"code": "(fn d [value coll]\n  (apply hash-map\n         (reduce (fn [acc x]\n                   (concat acc [x] [value]))\n                 []\n                 coll)))", "problem": 156, "user": "5175616ae4b0dea9bbfba576"}, {"code": "(fn [x xs] (zipmap xs (repeat x)))", "problem": 156, "user": "4f9ff06ce4b0dcca54ed6d41"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "5173726be4b098276e74652c"}, {"code": "(fn [default-value keys-vector]\n  (zipmap keys-vector (repeat (count keys-vector) default-value)))", "problem": 156, "user": "5152bc4ee4b001f44f99bfef"}, {"code": "(fn p156 [d coll]\n  (reduce #(assoc %1 %2 d) {} coll)\n)", "problem": 156, "user": "51750fc5e4b07031762f2ee6"}, {"code": "(fn [d ks0]\n  (loop\n    [ks ks0\n     m {}]\n    (if-not (empty? ks)\n      (recur (rest ks) (assoc m (first ks) d))\n      m)))", "problem": 156, "user": "51634e09e4b055933a9ca02c"}, {"code": "(fn [default keys]\n  (into {} (for [key keys]\n             [key default])))", "problem": 156, "user": "50cfcad6e4b00b15ecee9752"}, {"code": "#(zipmap %2 (repeat (count %2) %))", "problem": 156, "user": "50dade7be4b02e6ac9592c70"}, {"code": "(fn [d k] \n  ((fn assoc-default-iter [m d k] \n    (if (= (count k) 0) \n      m\n      (assoc (assoc-default-iter m d (rest k)) (first k) d)))\n  {} d k))", "problem": 156, "user": "517531c6e4b07031762f2eea"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "51778122e4b085adf681d89d"}, {"code": "(fn [x coll]\n  \t(reduce #(assoc %1 %2 x) {} coll))", "problem": 156, "user": "51780f88e4b03d69594194c9"}, {"code": "(fn [default coll]\n  \t(loop [result {} \n       \t   [x & xs] coll]\n    \t(if (not (nil? x))\n          (recur (conj {x default} result) xs)\n      \t  result)))", "problem": 156, "user": "4ea85ecf535d7eef308072fa"}, {"code": "(fn [d k] (zipmap k (repeat d)))", "problem": 156, "user": "51789599e4b03d69594194d6"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "509331d9e4b097f48cc38580"}, {"code": "(fn [d xs] (zipmap xs (repeat d)))", "problem": 156, "user": "515fb48fe4b0e2be8aa20bd5"}, {"code": "(fn [d ks] (into {} (for [k ks] [k d])))", "problem": 156, "user": "50b9d991e4b04934c218a4a9"}, {"code": "(fn [df sq] (apply conj (map #(assoc {} % df) sq)))", "problem": 156, "user": "5171f684e4b0d70c8bbbf248"}, {"code": "(fn [v keys]\n  (zipmap keys (repeat v)))", "problem": 156, "user": "517a025ce4b01aacecbecbe6"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "5177f89ae4b0f89a8f53839a"}, {"code": "#(zipmap %2 (vec (repeat (count %2) %1)))", "problem": 156, "user": "517bbbfce4b07ef0e56148cf"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "5134973ce4b0230e9f713b42"}, {"code": "(fn [val keys] (apply merge (for [k keys] (conj {k val} {}))))", "problem": 156, "user": "51771cb1e4b085adf681d895"}, {"code": "(fn [default-value ks]\n     (apply hash-map\n            (interleave ks\n                        (repeat (count ks)\n                                default-value))))", "problem": 156, "user": "516385cee4b055933a9ca02d"}, {"code": "(fn [v ks] (zipmap ks (repeat (count ks) v)))", "problem": 156, "user": "517dc49be4b0fcc7c5d37d38"}, {"code": "#(into {} (for [v %2] [v %1]))", "problem": 156, "user": "5165a235e4b079ad97ec44ac"}, {"code": "(fn [d k] (apply merge (map #(hash-map % d) k)))", "problem": 156, "user": "4e6defcc535d5021c1a895f8"}, {"code": "#(into {} (map (fn [i] [i %]) %2))", "problem": 156, "user": "5093a80be4b097f48cc38583"}, {"code": "#(into {} (for [k %2] {k %1}))", "problem": 156, "user": "517e5a91e4b0329b27fa9f55"}, {"code": "(fn [v xs] (zipmap xs (repeat v)))", "problem": 156, "user": "517d755ce4b0f5e87c18f263"}, {"code": "(fn [x s]\n  (reduce (fn [acc el] (assoc acc el x)) {} s))", "problem": 156, "user": "4fb03cf4e4b081705acca262"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "515f8a0de4b0e2be8aa20bce"}, {"code": "(fn [a b] (reduce (fn [z x] (merge z {x a})) {} b))", "problem": 156, "user": "516ee2a4e4b06aac486e5b33"}, {"code": "#(reduce (fn [xs x] (assoc xs x %)) {} %2)", "problem": 156, "user": "51780bfce4b0f89a8f53839c"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "5152f82ee4b03f948212e718"}, {"code": "#(into {} (for [k %2] [k %]))", "problem": 156, "user": "4ede361a535d10e5ff6f5332"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4ed286d4535d44c135fd68d7"}, {"code": "#(into {} (map (fn [k] [k %]) %2))", "problem": 156, "user": "4dada913c9a9d6ed2d99dc57"}, {"code": "(fn [v ks]\n  (reduce (fn [m k]\n            (assoc m k v))\n          {}\n          ks))", "problem": 156, "user": "51804bcbe4b04f45bde7d901"}, {"code": "(fn [value keys]\n  (zipmap keys (repeat (count keys) value)))", "problem": 156, "user": "517e9f92e4b09104ecebe7e4"}, {"code": "(fn [x se] (apply array-map (mapcat #(list % x) se)))", "problem": 156, "user": "5180a93fe4b0e3fc13e244e8"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "51805d22e4b0e3fc13e244df"}, {"code": "(fn [defalt keeys]\n    (apply hash-map (interleave keeys (repeat defalt))))", "problem": 156, "user": "51789dfae4b03d69594194d7"}, {"code": "(fn [d m] (reduce (fn [n k] (assoc n k d)) {} m))", "problem": 156, "user": "517bc969e4b07ef0e56148d0"}, {"code": "#(into {} (map (fn [x] [x %]) %2))", "problem": 156, "user": "4faa5735e4b081705acca1ee"}, {"code": "(fn [default-value sequence-of-keys] (into {} (map (fn [a-key] {a-key default-value}) sequence-of-keys)))", "problem": 156, "user": "51836944e4b028ec5fd2f29f"}, {"code": "(fn [item lst] (reduce #(assoc %1 %2 item) {} lst))", "problem": 156, "user": "4fecebe1e4b0681fd128dcac"}, {"code": "(fn [x lst] (loop [s lst coll {}] (if (empty? s) coll (recur (rest s) (assoc coll (first s) x)))))", "problem": 156, "user": "5179fd22e4b01aacecbecbe5"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "518696c1e4b0c40be512d708"}, {"code": "(fn mapdef\n  ([val keys] (mapdef val keys {}))\n  ([val keys mp]\n     (if (empty? keys)\n       mp\n      (recur val (rest keys) (assoc mp (first keys) val)))))", "problem": 156, "user": "51026750e4b00c483ae176f7"}, {"code": "(fn [d s] (reduce #(assoc %1 %2 d) {} s))", "problem": 156, "user": "504e0f78e4b078edc5f593ac"}, {"code": "(fn mapdefs [x v]\n    (reduce merge  (for [i v] (assoc {} i x)))\n  )", "problem": 156, "user": "4ec4d723535dcc7ae8597d65"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "515e2000e4b049add99a0534"}, {"code": "(fn [v k]\n  (zipmap k (map (fn[x] v) k)))", "problem": 156, "user": "51899891e4b0288ada3dbdab"}, {"code": "(fn [def_value mapped_keys] (zipmap mapped_keys (repeat def_value)))", "problem": 156, "user": "5188b2e6e4b0bdff0e072d52"}, {"code": "#(reduce conj (map (fn[k] (hash-map k %1)) %2))", "problem": 156, "user": "517e25c6e4b0329b27fa9f51"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "517945dce4b0684c1c981a43"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "501fe6fae4b0cb6ebc0a42ef"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "5143824ae4b0b4fb4ace5f36"}, {"code": "#(loop [result {} value %1 coll %2]\n   (if (empty? coll)\n     result\n     (recur (assoc result (first coll) value) value (rest coll))))\n\n;;#(into {} (map vector %2 (repeat %)))", "problem": 156, "user": "518ccf6be4b05e6c8537e386"}, {"code": "(fn [v ks] (reduce (fn [m k] (assoc m k v)) {} ks))", "problem": 156, "user": "4f29651ce4b0d6649770a028"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "518b761ae4b0f028e99addee"}, {"code": "(fn [defaults s]\n  (apply hash-map (interleave s (repeat defaults))))", "problem": 156, "user": "4dcd327b535d5973398f929b"}, {"code": "(fn create-map[default, keys]\n  (zipmap keys (repeat (count keys) default)))", "problem": 156, "user": "4e723bcb535d5021c1a8965c"}, {"code": "(fn[dfl ks] (\n             (fn[m dfl ks]\n               (if (> (count ks) 0)\n                 (recur (assoc m (first ks) dfl) dfl (rest ks))\n                 m\n                 )\n               ) {} dfl ks\n             )\n  )", "problem": 156, "user": "5191e91de4b08962174cf733"}, {"code": "(fn cc [de v]\n  (let [d (take (count v) (repeat de))]\n    (zipmap v d)))", "problem": 156, "user": "516282c3e4b0e6d3c4734711"}, {"code": "(fn [x y] (zipmap y (vec (repeat (count y) x))))", "problem": 156, "user": "5154b16be4b0179c5115f4e2"}, {"code": "(fn [v s]\n  (zipmap s (repeat (count s) v)))", "problem": 156, "user": "519136e9e4b0f8ef0be96c01"}, {"code": "(fn [default keys] (apply merge (map #(hash-map % default) keys)))", "problem": 156, "user": "503be880e4b0fc0f99c2e54a"}, {"code": "#(zipmap %2 (replicate 3 %1))", "problem": 156, "user": "51933b41e4b0c663c5d86ca2"}, {"code": "(fn give-default [default coll]\n  (apply merge(map #(hash-map % default) coll)))", "problem": 156, "user": "5194675fe4b0142f60b4aedf"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "519126d5e4b0f8ef0be96bff"}, {"code": "(fn [v ks]\n  (let [vs (repeat (count ks) v)]\n    (into {} (map vector ks vs))))", "problem": 156, "user": "4e09392a535d04ed9115e7ae"}, {"code": ";(fn [x y] map #(hash-map % 0) (seq [:a :b :c]))\n(fn [x y] (zipmap y (repeat x )) )", "problem": 156, "user": "518c5236e4b087e178201de0"}, {"code": "#(apply hash-map (apply concat (for [x %2] [x %1])))", "problem": 156, "user": "5196568fe4b04c0af7ff3c1c"}, {"code": "(fn [v ks] (apply hash-map (interleave ks (repeat v))))", "problem": 156, "user": "5197f674e4b068aa333628f6"}, {"code": "(fn [val keys] (into {} (for [k keys] [k val])))", "problem": 156, "user": "51761580e4b085adf681d880"}, {"code": "(fn [x coll] (zipmap coll (repeat x)))", "problem": 156, "user": "4f409e29e4b0e243712b1fb6"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "518e6966e4b051adb72789ec"}, {"code": "(fn [default my-vec]\n  (loop [m {} v my-vec]\n    (if (empty? v)\n      m\n      (recur (assoc m (first v) default) (rest v)))))", "problem": 156, "user": "51991a89e4b068aa333628fd"}, {"code": "#(->> %2 (map (fn [x] [x %1])) (into {}))", "problem": 156, "user": "519b231ee4b0ac1b7dced6a2"}, {"code": "(fn [d ks] (zipmap ks (repeat d)))", "problem": 156, "user": "51990df9e4b068aa333628fc"}, {"code": "(fn m [v ks]\n  (into {}\n        (map #((juxt identity (constantly v)) %) ks)))", "problem": 156, "user": "50377d53e4b0af0658af77ad"}, {"code": "(fn [default ks] (zipmap ks (repeat default)))", "problem": 156, "user": "5192b707e4b08962174cf751"}, {"code": "(fn [default keys]\n (reduce #(assoc %1 %2 default) {} keys))", "problem": 156, "user": "5073de20e4b054001656acca"}, {"code": "(fn [ default arr] (zipmap arr (repeat (count arr) default)))", "problem": 156, "user": "5192ce1de4b0024e2d75f7d2"}, {"code": "(fn f [x coll]\n  (into {} \n        (map #(vector % %2) coll (repeat (count coll) x))))", "problem": 156, "user": "51750cd4e4b07031762f2ee5"}, {"code": "(fn [val, key] (into {} (for [x key]  [x val])))", "problem": 156, "user": "5194f482e4b05be8c43d2385"}, {"code": "(fn [default coll]\n  (reduce #(assoc %1 %2 default) {} coll))", "problem": 156, "user": "514c2d05e4b02b8cbb2a9278"}, {"code": "#(apply hash-map (interleave %2 (take (count %2) (repeat %))))", "problem": 156, "user": "5188c611e4b0bdff0e072d56"}, {"code": "#(apply assoc {}\n   (interleave %2 (repeat %1))\n         )", "problem": 156, "user": "4f03ba9c535dcb61093f6b58"}, {"code": "(fn [x col] (zipmap col (repeat (count col) x)))", "problem": 156, "user": "519c407ae4b0a1d87b003457"}, {"code": "(fn defaultvals [x y]                                                                              (let [vals (repeat (count y) x)]                                                                        (zipmap y vals)\n       )                                                                                             )", "problem": 156, "user": "5195b8cce4b04c0af7ff3c08"}, {"code": "(fn [v ks] (apply hash-map (interleave ks (repeat v))))", "problem": 156, "user": "4ea092f4535d7eef308072a6"}, {"code": "(fn [default keys]\n  (reduce #(assoc % %2 default) '{} keys))", "problem": 156, "user": "514e9a14e4b019235f6c0597"}, {"code": "(fn [v coll]\n  (into {} (for [x coll] {x v})))", "problem": 156, "user": "51377188e4b04059df19f303"}, {"code": "(fn [v xs] (reduce #(assoc % %2 v){} xs))", "problem": 156, "user": "519b7d76e4b02a926d9a436e"}, {"code": "(fn [d ks]\n  (zipmap ks\n          (repeat d)))", "problem": 156, "user": "519db0ede4b037b32803f9b9"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "5199ca05e4b022efe2b3ba88"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "518637c9e4b0da5a5be3bac8"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "51823a97e4b0f2adb733651e"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "50c4ff23e4b0210b849018b8"}, {"code": "(fn [default my-keys] \n  (loop [current-keys my-keys\n         result {}]\n      (let [[head & tail] current-keys]\n        (if (empty? current-keys)\n           result\n      \t  (recur tail (assoc result head default))))))", "problem": 156, "user": "4e57afc5535d8a8b8723a288"}, {"code": "#(zipmap %2 (iterate identity %1))", "problem": 156, "user": "51a2a376e4b00957e520db7f"}, {"code": "(fn [d k] (zipmap k (repeat d)))", "problem": 156, "user": "4e6a2f93535d8ccf87e9feaa"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "51a1659de4b00957e520db72"}, {"code": "#(into {} (for [k %2] [k %1]))", "problem": 156, "user": "51a05bede4b0b292b01ee3f4"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "50baa66be4b03e68e4411c94"}, {"code": "(fn [i v] (into {} (map (fn [x] (conj [] x i)) v)))", "problem": 156, "user": "51a3c9cde4b0e77c4ca60bf9"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "51a477eee4b0def3c5c58692"}, {"code": "(fn [x m]\n  (reduce #(conj % {%2 x}) {} m))", "problem": 156, "user": "4e68ed35535d8ccf87e9fe92"}, {"code": "#(zipmap %2 (repeat (count %2) %))", "problem": 156, "user": "5191045ee4b0f8ef0be96bf3"}, {"code": "(fn [v k]\n  (zipmap k (repeat (count k) v))\n  )", "problem": 156, "user": "51a5d967e4b051b01d55f454"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "51a10b2ce4b0b292b01ee3fe"}, {"code": "(fn [default keys-seq]\n  (into {} (map #(vector % default) keys-seq)))", "problem": 156, "user": "51197750e4b057cba170bc99"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "506ba58be4b0eda3100c090b"}, {"code": ";Nice solution:\n#(zipmap %2 (repeat %1))\n\n\n#_(into {} (map vector %2 (repeat %1)))", "problem": 156, "user": "519b2570e4b0ac1b7dced6a3"}, {"code": "(fn construct [default aseq]\n  (let [alist (reduce (fn [acc e] (cons [e default] acc)) '() aseq)\n        alist (reverse alist)]\n    (into {} alist)))", "problem": 156, "user": "50414e3ce4b06d8231e4facd"}, {"code": "(fn[default coll] (reduce #(assoc % %2 default) {} coll))", "problem": 156, "user": "51a768e0e4b0da5f497bde84"}, {"code": "#(apply assoc {} (interleave %2 (repeat (count %2) %1 )) )", "problem": 156, "user": "51a865dfe4b08d8ec191b80f"}, {"code": "(fn [default s] \n  (zipmap s (repeat (count s) default)))", "problem": 156, "user": "51a7b4fee4b0da5f497bde8b"}, {"code": "(fn mapdefault [n m]\n        (apply conj {} (map #(identity {% n}) m)))", "problem": 156, "user": "51a8f0c6e4b08d8ec191b821"}, {"code": "(fn [x y] (zipmap y(repeat x)))", "problem": 156, "user": "5190772de4b09156e89b2a0a"}, {"code": "(fn [v s] (reduce #(assoc %1 %2 v) {} s))", "problem": 156, "user": "506cad7de4b0a302964c548e"}, {"code": "(fn [d coll] (apply hash-map (interleave coll (repeat d))))", "problem": 156, "user": "510ee996e4b07438aa321462"}, {"code": "(fn [d m] (zipmap m (repeat d)))", "problem": 156, "user": "517d4ba3e4b0f5e87c18f261"}, {"code": "(fn [df, keys] (zipmap keys (repeat (count keys) df)))", "problem": 156, "user": "51aab611e4b04e3dc0c27b2d"}, {"code": "#(apply conj ( for [ x %2 ] { x % } ) )", "problem": 156, "user": "51aa4eede4b04e3dc0c27b25"}, {"code": "#(apply assoc {} (interleave %2 (repeat (count %2) %)))", "problem": 156, "user": "51a54fb4e4b0def3c5c586a3"}, {"code": "(fn [y x] (apply assoc {} (interleave (rseq x) (take (count x) (repeat y) ))))", "problem": 156, "user": "51a89810e4b08d8ec191b817"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "51ab1718e4b04e3dc0c27b2f"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "5183f5d7e4b02826a645f393"}, {"code": "(fn [d,s]\n  (into {}\n        (map #(vec [% d]) s)\n        )\n  )", "problem": 156, "user": "51ab7a68e4b04e3dc0c27b35"}, {"code": "(fn\n  [val keys]\n  (reduce (fn [m k] (assoc m k val)) {} keys))", "problem": 156, "user": "4fe9f0f6e4b0547ebccb247b"}, {"code": "#(into {} (map vector %2 (repeat %1)))", "problem": 156, "user": "51a97f7ae4b08d8ec191b827"}, {"code": "(fn [default keys] (apply hash-map (interleave keys (repeat default))))", "problem": 156, "user": "4db6d993535d1e037afb2180"}, {"code": "(fn [x y] (loop [v x se y res {}] (if (= () se) res (recur v (rest se) (conj res {(first se) v})))))", "problem": 156, "user": "51a7f74be4b08d8ec191b802"}, {"code": "(fn [default ks] (let [n (count ks)] (zipmap ks (repeat n default))))", "problem": 156, "user": "4f3d83b5e4b0e243712b1f69"}, {"code": "(fn [x y] (reduce merge (map #(hash-map % x) y)))", "problem": 156, "user": "519291c1e4b08962174cf74b"}, {"code": "(fn [d l] \n  (apply hash-map \n   (concat \n    (interpose d l) \n    [d])))", "problem": 156, "user": "4fc43a8ee4b081705acca346"}, {"code": "(fn [d ks]\n  (apply hash-map (mapcat #(do [% d]) ks)))", "problem": 156, "user": "510b0480e4b078ea719210fa"}, {"code": "#(zipmap %2 (vec (repeat (count %2) %)))", "problem": 156, "user": "51316a63e4b0431ba07e7feb"}, {"code": "(fn [d ks]\n  (into {} (map vector ks (repeat d))))", "problem": 156, "user": "51aa2b4fe4b04e3dc0c27b21"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "518cdbd6e4b05e6c8537e387"}, {"code": "(fn [v m] (zipmap m (repeat v)))", "problem": 156, "user": "51afa3d9e4b0c53cf2e68a51"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4fd11132e4b04c3a95aa0409"}, {"code": "(fn [v k] (zipmap k (repeat (count k) v)))", "problem": 156, "user": "4f8bef41e4b02e764a0a5186"}, {"code": "#(into {} (for [i %2][i %1]))", "problem": 156, "user": "51af872ae4b0c53cf2e68a4e"}, {"code": "(fn [d v]\n (reduce #(assoc %1 %2 d) {} v))", "problem": 156, "user": "50bc4e73e4b0594b91591c3d"}, {"code": "#(zipmap %2 (cycle [%1]))", "problem": 156, "user": "51b0fc95e4b0c53cf2e68a72"}, {"code": "(fn default-to-map [default keys]\n  (apply hash-map (mapcat #(list % default) keys)))", "problem": 156, "user": "4e0d5a5a535d04ed9115e7b5"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "51ad0ab8e4b09397d510977b"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "51b091e9e4b0c53cf2e68a68"}, {"code": "(fn [d ks] (apply hash-map (interleave ks (repeat d))))", "problem": 156, "user": "50a2f901e4b029e8bace362a"}, {"code": "(fn [default keysvec]\n   (apply hash-map\n          (reduce concat\n           (map\n            (fn [k] [k default])\n            keysvec)\n           )\n          )\n   )", "problem": 156, "user": "51a0dae0e4b0b292b01ee3fa"}, {"code": "(fn def-val-map [key lat]\n  (if (= lat []) {}\n    (assoc (def-val-map key (rest lat)) (first lat) key)\n    )\n  )", "problem": 156, "user": "514cc029e4b019235f6c057c"}, {"code": "(fn defmap [default keys] \n  (if (empty? keys)\n    {}\n    (assoc (defmap default (rest keys)) (first keys) default)\n  )\n)", "problem": 156, "user": "51ac61c8e4b09397d510976b"}, {"code": "(fn [val aseq]\n  (loop [s aseq res {}]\n    (if s\n      (recur (next s) (conj res {(first s) val}))\n      res)))", "problem": 156, "user": "51b3b22ce4b0f094dd986fa7"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "51ab1da1e4b04e3dc0c27b30"}, {"code": "#(apply merge (for [x %2] {x %1}))", "problem": 156, "user": "514721c6e4b0d520409ed392"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "50a5b7e9e4b0aa96157e2610"}, {"code": "(fn [v ks] (zipmap ks (repeat (count ks) v)))", "problem": 156, "user": "517d03dee4b0f5e87c18f25d"}, {"code": "(fn [i c]\n  (zipmap c (repeat i)))", "problem": 156, "user": "50f69a3ce4b0035e89151844"}, {"code": "(fn [v k] (apply array-map (interleave k (repeat (count k) v))))", "problem": 156, "user": "51b7b521e4b0d906fcd71d3a"}, {"code": "(fn [v, kys]\n  (loop [ks kys\n         result {}]\n    (if (empty? ks)\n      result\n      (recur (rest ks) (assoc result (first ks) v)))))", "problem": 156, "user": "5136f659e4b04059df19f2fd"}, {"code": "(fn [v m]\n   (reduce #(assoc % %2 v) {} m))", "problem": 156, "user": "51b86a0fe4b09e0e347b2e78"}, {"code": "#(zipmap %2 (repeat %1) )", "problem": 156, "user": "51aeb1f4e4b09397d5109794"}, {"code": "#(into {} (for [k %2] [k %1]))", "problem": 156, "user": "4f2f7e87e4b0d6649770a06f"}, {"code": "(fn [x y] \n  (loop [m y result (hash-map)]\n\t\t(if(empty? m) result\n    (recur (rest m) (conj result (hash-map (first m) x))) \n    )\n  )\n)", "problem": 156, "user": "4f99bf3ee4b0dcca54ed6d01"}, {"code": "(fn [default-value keys]\n   (reduce #(assoc %1 %2 default-value) {} keys))", "problem": 156, "user": "51ae350fe4b09397d5109790"}, {"code": "(fn [default v]\n  (reduce (fn [m k] (assoc m k default)) {} v))", "problem": 156, "user": "504e0517e4b078edc5f5939a"}, {"code": "(fn xxx [val keys]\n  (loop [k keys acc {}]\n    (if (= (last k) nil)\n      acc\n      (recur (rest k) (assoc acc (first k) val)))))", "problem": 156, "user": "5163a7bbe4b055933a9ca02f"}, {"code": "(fn [default values] (reduce #(assoc %1 %2 default) {} values))", "problem": 156, "user": "4fa340b4e4b081705acca18c"}, {"code": "(fn [dv s] (apply hash-map (mapcat (fn [x] (list x dv)) s)))", "problem": 156, "user": "51bc2f6ae4b0fe3ecfb46452"}, {"code": "(fn [default keys] (zipmap keys (repeat default)))", "problem": 156, "user": "51b903b8e4b050a1176cd6a1"}, {"code": "(fn [v ks] (zipmap ks (repeat (count ks) v)))", "problem": 156, "user": "51ba60a8e4b0fe3ecfb4642e"}, {"code": "(fn foo [d l]\n  (apply hash-map (interleave l (repeat d))))", "problem": 156, "user": "51baff1be4b0fe3ecfb46443"}, {"code": "(fn [d k] (apply hash-map (mapcat #(vector % d) k)))", "problem": 156, "user": "514f6679e4b0b449e54b8df5"}, {"code": "(fn [dflt ks] (reduce #(into %1 {%2 dflt}) {} ks))", "problem": 156, "user": "515cf9b5e4b00901442db1d4"}, {"code": "(fn [d km]\n  (into {}\n  (map #(vector % d) km)))", "problem": 156, "user": "51b793d3e4b0d906fcd71d38"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "51b90b88e4b050a1176cd6a2"}, {"code": "(fn [value ks]\n\t(apply assoc {} (interleave ks (repeat value))))", "problem": 156, "user": "4e7e1483535db169f9c79702"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "519462b6e4b0142f60b4aede"}, {"code": "#(into {} (for [i %2] [i %1]))", "problem": 156, "user": "51bd78c3e4b0ff155d51d2b0"}, {"code": "(fn make [aval aseq] (if (empty? aseq) {}\n                  (conj {(first aseq) aval} (make aval (rest aseq)))))", "problem": 156, "user": "51bf4560e4b013aa0d74b817"}, {"code": "(fn [i c]\n  (into {}\n        (map #(assoc {} % i) c)))", "problem": 156, "user": "5042bb9ae4b034ff00315d16"}, {"code": "#(apply hash-map (interleave %2 (repeat (count %2) %1)))", "problem": 156, "user": "5034b0e1e4b062bc5d7ae167"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "51bd1a0de4b0df1216cefd93"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4f52ae00e4b03ad3f0c10d42"}, {"code": "(fn [n keys]\n  (into {} (for [i keys] [i n])))", "problem": 156, "user": "4eb7b049535d7eef30807377"}, {"code": "(fn [my_value my_keys]\n  (loop [m {} k (first my_keys) others (rest my_keys)]\n    (if (empty? others) (conj m {k my_value})\n      (recur (conj m {k my_value}) (first others) (rest others)))))", "problem": 156, "user": "51c342e9e4b0851ac09658f3"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "4e80e0f2535db62dc21a62b8"}, {"code": "(fn moo [val key-list] \n     (if (empty? (rest key-list)) \n         {(first key-list) val}\n         (assoc (moo val (rest key-list)) (first key-list) val)))", "problem": 156, "user": "511d4a52e4b022853b0e07a1"}, {"code": "(fn [v m] (zipmap m (repeat v)))", "problem": 156, "user": "4f5dae33e4b0030a34fb2b41"}, {"code": "(fn [v ks] (zipmap ks (repeat v)))", "problem": 156, "user": "4ea365e2535d7eef308072c5"}, {"code": "#(into {} (for [x %2] [x %1]))", "problem": 156, "user": "51c330a9e4b0851ac09658f2"}, {"code": "(fn [x liste] (apply assoc {} (interleave liste (take (count liste) (repeat x)))))", "problem": 156, "user": "51c09719e4b0c9c82288293c"}, {"code": "(fn [x y] (zipmap y (repeat (count y) x)))", "problem": 156, "user": "51b66b31e4b02e5820733406"}, {"code": "(fn [a b] (apply conj (map (fn [x] {x a}) b)))", "problem": 156, "user": "50b8e9a4e4b0cba0e598b656"}, {"code": "(fn [v m] (zipmap m (repeat v)))", "problem": 156, "user": "518ad8fce4b06da86c1973c1"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "51424cc8e4b0b50abeb46b34"}, {"code": "(fn [v ks] (reduce #(assoc % %2 v) {} ks))", "problem": 156, "user": "4e7263a1535d5021c1a8965f"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "51c8301ee4b07ef393169e4d"}, {"code": "(fn [d s] \n  (loop [m {} lst s]\n    (if (empty? lst) m\n      (recur (assoc m (first lst) d) (rest lst)))))", "problem": 156, "user": "4f038b62535dcb61093f6b1c"}, {"code": "(fn [v ks] (reduce #(assoc % %2 v) {} ks))", "problem": 156, "user": "51c1d159e4b0d204dbe2ca18"}, {"code": "(fn [x y]\n  (into {} (map #(into [] [% x]) y))\n  )", "problem": 156, "user": "51bec919e4b013aa0d74b800"}, {"code": "(fn [x y] (apply hash-map  (interleave y (repeat (count y) x))))", "problem": 156, "user": "51beb32ae4b013aa0d74b7fd"}, {"code": "(fn [default coll]\n    (apply merge (map (fn [x] {x default}) coll)))", "problem": 156, "user": "4f72f71be4b07046d9f4f03d"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4f5155a3e4b03ad3f0c10d1b"}, {"code": "(fn [v m] (reduce #(assoc % %2 v) {} m))", "problem": 156, "user": "514fd753e4b0b449e54b8e00"}, {"code": "#(zipmap %2 (replicate (count %2) %))", "problem": 156, "user": "51c9c6cde4b09ce160bef5b1"}, {"code": "#(zipmap %2 (repeat  %1))", "problem": 156, "user": "4f753535e4b0fbe0118ec558"}, {"code": "(fn [mp col] (zipmap col (repeat mp)))", "problem": 156, "user": "51cb073ce4b068dadb8f2233"}, {"code": "(fn [dv s]\n  (loop [sq s hs {}]\n    (if (seq sq)\n      (recur (rest sq) (assoc hs (first sq) dv))\n      hs\n    )\n  )\n)", "problem": 156, "user": "51c9a705e4b09ce160bef5ab"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4eeaf88f535d93acb0a668a3"}, {"code": "(fn [ad se]\n  (apply assoc {}\n (interleave (reverse se) (repeat ad))))", "problem": 156, "user": "51cacda3e4b068dadb8f2227"}, {"code": "(fn seq-map\n  [val keys]\n  (into {}\n        (map (fn [k] [k val]) keys)))", "problem": 156, "user": "4ead1bb3535d7eef3080731d"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "51c80dd0e4b07ef393169e4a"}, {"code": "(fn [d keys] (reduce #(assoc %1 %2 d) {} keys))", "problem": 156, "user": "51ba4482e4b0fe3ecfb4642b"}, {"code": "#(into {} (for [x %2] [x %1]))", "problem": 156, "user": "51ca7906e4b08b1cbd0d9487"}, {"code": "(fn make-map [default-var key-seq]\n  (if (nil? (first key-seq)) nil\n   (conj {(first key-seq) default-var} (make-map default-var (rest key-seq)))))", "problem": 156, "user": "51cbaf14e4b08d8387cbedda"}, {"code": "(fn foo [x ys] \n  (let [z {}]\n  \t(reduce merge (map #(assoc z % x) ys))\n    )\n  )", "problem": 156, "user": "51d07a8be4b0e42293a2257e"}, {"code": "(fn [v ks]\n  (apply hash-map (interleave ks (repeat v))))", "problem": 156, "user": "51d08d67e4b067c365486351"}, {"code": "#(apply array-map (interleave %2 (repeat (count %2) %1)))", "problem": 156, "user": "51bdc609e4b0ff155d51d2b3"}, {"code": "(fn [dv sec]\n  (let [m {}]\n    (into {} (for [k sec] (assoc m k dv)))))", "problem": 156, "user": "509fa9b5e4b08df8156e9e3f"}, {"code": "(fn [v ks] (apply hash-map (interleave ks (take (count ks) (cycle (list v))))))", "problem": 156, "user": "51cf126ae4b0e42293a2256b"}, {"code": "#(into {} (for [x %2] [x %1]))", "problem": 156, "user": "51c7d82be4b07ef393169e47"}, {"code": "(fn [x y] (zipmap y (repeat (count y) x)))", "problem": 156, "user": "51d2f73ce4b099f3b6acddf4"}, {"code": "(fn [default-value key-sequence]\n  (zipmap key-sequence (repeat default-value)))", "problem": 156, "user": "4db30879535df7e46ed9b6cb"}, {"code": "(fn [val keys] (reduce conj {} (map #(hash-map % val) keys)))", "problem": 156, "user": "51aee76ce4b09397d5109796"}, {"code": "(fn [v k] (into {} (map #(vector % v) k)))", "problem": 156, "user": "4e3f480c535dc968683fc497"}, {"code": "#(reduce (fn [m k] (assoc m k %1)) {} %2)", "problem": 156, "user": "51d22261e4b0d13b04db0d95"}, {"code": "(fn [defval newkeys] (reduce #(assoc %1 %2 defval) {} newkeys))", "problem": 156, "user": "51d46747e4b013d740b70de3"}, {"code": "#(loop [v %2\n        m {}]\n   (if (empty? v)\n     m\n     (recur (rest v) (assoc m (first v) %1))))", "problem": 156, "user": "51d360d1e4b099f3b6acddff"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "51d10b1fe4b067c36548635e"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "51d4ed02e4b013d740b70dec"}, {"code": "#(loop [out {} cur 0] (if (= (count %2) (count out)) out (recur (assoc out (nth %2 cur) %1) (inc cur)) ))", "problem": 156, "user": "51c9fe91e4b09ce160bef5b6"}, {"code": "(fn [e m]\n    (zipmap m (repeat e))\n)", "problem": 156, "user": "51d1111ce4b067c36548635f"}, {"code": "(fn [default keys] \n\t (reduce  #(assoc %1 %2 default ) {}  keys  ))", "problem": 156, "user": "518644bce4b0da5a5be3baca"}, {"code": "(fn duke [v k] (reduce (fn [m kee] (assoc m kee v) ) {} k))", "problem": 156, "user": "51d381b5e4b099f3b6acde01"}, {"code": "(fn mydef [x coll]\n  (if-not (= () coll) \n    (assoc (mydef x (rest coll))\n           (first coll) x)))", "problem": 156, "user": "518a8c4be4b0df82f5685903"}, {"code": "(fn [defval kees]\n  (zipmap kees (repeat defval)))", "problem": 156, "user": "51ce1320e4b0e42293a22551"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4e7dfab0535db169f9c796f9"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "51c19873e4b0d204dbe2ca0d"}, {"code": "(fn [k vs] (reduce #(assoc %1 %2 k) {} vs))", "problem": 156, "user": "501f36dde4b0cb6ebc0a42e4"}, {"code": "(fn [dv ks]\n  (loop [kys ks\n         result {}]\n    (if (empty? kys)\n      result\n      (recur (rest kys) (assoc result (first kys) dv)))))", "problem": 156, "user": "504dffe2e4b078edc5f5938b"}, {"code": "(fn [d v]\n(reduce merge (map\n#(merge {} {% d}) v \n)\n)\n)", "problem": 156, "user": "518aec06e4b06da86c1973c2"}, {"code": "(fn [defval keyz]\n  (zipmap keyz (repeat (count keyz) defval))\n  )", "problem": 156, "user": "51ab734ee4b04e3dc0c27b34"}, {"code": "(fn [default ks]\n  (reduce #(assoc %1 %2 default) {} ks))", "problem": 156, "user": "51d19c24e4b0cfcf579466c3"}, {"code": "(fn [value key] (zipmap key (repeat (count key) value)))", "problem": 156, "user": "50a025a9e4b08df8156e9e49"}, {"code": "#(reduce (fn [acc val] (assoc acc val %1)) {} %2)", "problem": 156, "user": "4f0a5653535d0136e6c222f5"}, {"code": "(fn ! [d ks] \n  (if (empty? ks)\n    {}\n    (merge (! d (rest ks)) {(first ks) d})\n  )\n)", "problem": 156, "user": "51db8244e4b0e067a9bbadc7"}, {"code": "(fn [defval init-keys]\n  (loop [res {}, key init-keys]\n    (if (empty? key)\n      res\n      (recur \n        (assoc res (first key) defval)\n        (rest key))\n      )))\n\n;; or\n\n;#(zipmap %2 (repeat %1))", "problem": 156, "user": "51d11f5de4b067c365486360"}, {"code": "(fn [defaults keys]\n  (let [f (fn [mapper key]\n            (assoc mapper key defaults))]\n    (reduce f\n            {}\n            keys)))", "problem": 156, "user": "4ef9b021535dced4c769f269"}, {"code": "(fn [value my-keys]\n   (zipmap my-keys (repeat value)))", "problem": 156, "user": "4ede0511535d10e5ff6f5330"}, {"code": "(fn [v ks] (into {} (map (fn [k] [k v]) ks)))", "problem": 156, "user": "51cdd3f0e4b0e42293a2254b"}, {"code": "(fn [default names] \n  (reduce (fn [a b] (merge a b))\n          (map (fn [n]\n                 {n default}) names)))", "problem": 156, "user": "51db0aefe4b06aa4d4669a9c"}, {"code": "(fn [f-val list-k]\n  (loop [v f-val\n      lk list-k\n      res {}]\n      (if (empty? lk)\n          res\n          (recur v (rest lk) (conj res {(first lk) v}))\n      ) \n  )\n)", "problem": 156, "user": "51d59859e4b01da06753aa92"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4f036d9b535dcb61093f6ac1"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "51dc0ed1e4b09c47a74ce105"}, {"code": "(fn [val coll]\n  ( reduce conj ( map #(hash-map % val) coll)))", "problem": 156, "user": "50e90813e4b033b0e80d11e7"}, {"code": "(fn [value data] (loop [d data\n                        v value\n                        m {}]\n                     (if (empty? d)\n                       m\n                       (recur (rest d) v (conj m {(first d) v})))))", "problem": 156, "user": "50214ffae4b0ef1d2d4433bc"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "51d9eb05e4b02ceefd947755"}, {"code": "(fn [k vs]\n  (into {} (for [v vs] [v k])))", "problem": 156, "user": "51daa721e4b02ceefd94776f"}, {"code": "(fn [x xs] (reduce #(conj % [%2 x]) {} xs))", "problem": 156, "user": "51846567e4b02826a645f399"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "51da565ae4b02ceefd947765"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "51e00020e4b01188f0627534"}, {"code": "#(into {} (for [k %2] [k %]))", "problem": 156, "user": "51d872dde4b0154f82ab930e"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "51e1a1fae4b06a68e693eaf6"}, {"code": "(fn [default keys]\n  (letfn [(rec [default keys result]\n               (if (empty? keys)\n                 result\n                 (rec default (rest keys) (cons (first keys) (cons default result)))))]\n    (apply hash-map (rec default keys '()))))", "problem": 156, "user": "51e0198ee4b01188f0627539"}, {"code": "(fn [xa xb]\n  (reduce #(assoc %1 %2 xa) {} xb))", "problem": 156, "user": "51da7e49e4b02ceefd947768"}, {"code": "#(zipmap %2 (cycle [%1]))", "problem": 156, "user": "51388e86e4b0a5db03d727d7"}, {"code": "(fn [d xs] (reduce #(assoc %1 %2 d) {} xs))", "problem": 156, "user": "5161eb8fe4b009fba0926e3b"}, {"code": "#(reduce (fn [coll x] (assoc coll x %)) {} %2 )", "problem": 156, "user": "51cec7b1e4b0e42293a2255b"}, {"code": "(fn [v xs] (reduce #(assoc % %2 v) {} xs))", "problem": 156, "user": "51b2e850e4b026427ecf067b"}, {"code": "(fn [d xs]\n  (reduce (fn [m x] (conj m {x d})) {} xs)\n  )", "problem": 156, "user": "51e24a04e4b01e5198146430"}, {"code": "(fn [default indices] (into {} (map #(vector % default) indices)))", "problem": 156, "user": "519273c3e4b08962174cf744"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "50de11b2e4b061dbdced7217"}, {"code": "(fn [d s]\n  (zipmap\n    s\n    (repeat (count s) d)))", "problem": 156, "user": "51b3f109e4b0f094dd986fa9"}, {"code": "(fn [v ks] (reduce #(assoc %1 %2 v) {} ks))", "problem": 156, "user": "516199bbe4b009fba0926e36"}, {"code": "(fn map-default [v k] (zipmap k (repeat (count k) v)))", "problem": 156, "user": "51cbdee1e4b08d8387cbede1"}, {"code": "#(apply hash-map(for [x %2 y (range 2)] (if (= y 1) %1 x)))", "problem": 156, "user": "51e3cf8ee4b0efabf93c02a3"}, {"code": "#(into {} (map vector %2 (repeat %)))", "problem": 156, "user": "50cf21dee4b0e61f11ddcd8b"}, {"code": "(fn [default key-coll] (reduce #(assoc %1 %2 default) {} key-coll))", "problem": 156, "user": "51ba8f82e4b0fe3ecfb46434"}, {"code": "#(into {} (for [x %2] (vector x %1)))", "problem": 156, "user": "4fff7246e4b0678c553fc3ff"}, {"code": "(fn [val seq] (reduce #(assoc %1 %2 val) {} seq))", "problem": 156, "user": "51df825de4b01188f062752b"}, {"code": "(fn [v ks] (apply assoc {} (interleave ks (repeat v))))", "problem": 156, "user": "4e6e97ca535d5021c1a8960c"}, {"code": "(fn [x y] (zipmap y (repeat x)))", "problem": 156, "user": "51dd55dae4b0c33a4e1da404"}, {"code": "(fn [k coll]\n  (reduce (fn [x y] (conj x [y k])) {} coll))", "problem": 156, "user": "4f38d6bbe4b0e243712b1ee2"}, {"code": "(fn [x y] (apply hash-map (interleave y (repeat x)) ))", "problem": 156, "user": "51e28063e4b08e53a149f0f2"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "5022292ee4b0846bc458ae46"}, {"code": "(fn [d ks] (zipmap ks (repeat d)))", "problem": 156, "user": "51672d15e4b079759a74a5e7"}, {"code": "(fn [d xs] (zipmap xs (repeat (count xs) d)))", "problem": 156, "user": "4fe89c81e4b07c9f6fd12c57"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "4e6f8431535d5021c1a8961e"}, {"code": "#(reduce (fn [map item] (assoc map item %)) {} %2)", "problem": 156, "user": "51db1abae4b094966a2cd685"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "502873a8e4b01614d1633ff8"}, {"code": "(fn [d m] (zipmap m (repeat d)))", "problem": 156, "user": "5029f263e4b023940c84aa45"}, {"code": "(fn [d ks]\n   (into {} (map #(vec [% d]) ks)))", "problem": 156, "user": "4f75469ee4b0fbe0118ec55a"}, {"code": "(fn [d k] (zipmap k (repeatedly (fn[] d))))", "problem": 156, "user": "504e90bae4b069badc5a33b8"}, {"code": "(fn [defVal keyArr] (reduce (fn [x y] (assoc x y defVal)) {} keyArr))", "problem": 156, "user": "50856bd1e4b004985b776e4c"}, {"code": "(fn a ([b c] (a b c {}))\n             ([b c d]\n               (if-not (empty? c) (recur b (rest c) (assoc d (first c) b))\n                                  d)))", "problem": 156, "user": "51eadb98e4b0f1f103a0d153"}, {"code": "(fn [value key_list]\n  (into {} (map #(hash-map % value) key_list)))", "problem": 156, "user": "51eb3aace4b0f1f103a0d159"}, {"code": "(fn [x y] (apply hash-map (mapcat #(vector %1 x) y)))", "problem": 156, "user": "51eb0374e4b0f1f103a0d156"}, {"code": "(fn [v ks]\n  (reduce #(conj %1 {%2 v}) {} ks)\n  )", "problem": 156, "user": "51eca2ace4b069f463c22cd0"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4e8dd6cb535d65386fec213b"}, {"code": "(fn set-default-value [default-value, collection] \n  \t(into {} (map #(hash-map % default-value) collection)))", "problem": 156, "user": "51e6786ae4b0ab43cc26c216"}, {"code": "(fn [default k]\n  (loop [ [c & args] k\n          final {} ]\n    (if c\n      (recur args (assoc final c default))\n      final)))", "problem": 156, "user": "51dd6a7ce4b0c33a4e1da409"}, {"code": "(fn [default coll]\n  (into {} (map #(hash-map % default) coll)))", "problem": 156, "user": "5180af54e4b0e3fc13e244e9"}, {"code": "(partial (fn add-to-map [new-map val new-keys]\n\t(if (empty? new-keys)\n\t\tnew-map\n\t\t(recur (assoc new-map (first new-keys) val) val (rest new-keys)))) {})", "problem": 156, "user": "51ec9114e4b069f463c22ccd"}, {"code": "#(zipmap %2 (replicate (count %2) %1))", "problem": 156, "user": "51e595a6e4b0efabf93c02d8"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "51ed09b6e4b0bb507043158b"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "51bd255ce4b0df1216cefd94"}, {"code": "(fn [d l] (into {} (map #(vector % d) l)))", "problem": 156, "user": "4e46e48b535dc968683fc4b7"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "51a584c7e4b051b01d55f44e"}, {"code": "(fn aux [d v]\n           (if (empty? v)\n             {}\n             (merge {(first v) d} (aux d (rest v)))\n             )\n           )", "problem": 156, "user": "51e6a2bce4b0ab43cc26c21d"}, {"code": "(fn [val keys] (reduce #(assoc %1 %2 val) {} keys))", "problem": 156, "user": "50ecf888e4b01236b1d49835"}, {"code": "(fn [def-val keyz]\n  (reduce #(assoc %1 %2 def-val) {} keyz))", "problem": 156, "user": "51efd397e4b0249c592fbdeb"}, {"code": "(fn\n  [x y]\n  (loop [vl x ky y z (hash-map)]\n  (if (empty? ky)\n    z\n    (recur vl (rest ky) (conj (hash-map (first ky) vl) z)))))", "problem": 156, "user": "51f13b80e4b06a20a2523f38"}, {"code": "(fn foo [acc value mykeys] \n  (if (empty? mykeys)\n    acc\n    ( foo (merge acc {(first mykeys) value}) value (rest mykeys))   \n   )\n) {}", "problem": 156, "user": "51eec1a6e4b0871fa145d98d"}, {"code": "(fn [v, ks] (reduce (fn [acc, x] (merge acc {x v})) {} ks))", "problem": 156, "user": "51f40a4ce4b0fca5e8b4822f"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "50fb2535e4b0d10d794c19e3"}, {"code": "(fn\n  [default s]\n  (zipmap s (repeat default)))", "problem": 156, "user": "511b233ae4b07ab9ec456180"}, {"code": "(fn [val s]\n    (reduce #(assoc %1 %2 val ) {} s)\n    )", "problem": 156, "user": "51b5a6e0e4b0f094dd986fce"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "51e58e02e4b0efabf93c02d0"}, {"code": "(fn [d l] (reduce (fn [m e] (assoc m e d)) {} l))", "problem": 156, "user": "51f2ab8be4b0210f90e74554"}, {"code": "#(loop [d %1\n        toadd %2\n        res {}]\n   (if (empty? toadd)\n   res\n   (recur d (rest toadd) (assoc res (first toadd) d))))", "problem": 156, "user": "51f28a64e4b0210f90e7454e"}, {"code": "(fn [d map]\n  (loop [r {} m map]\n    (if (empty? m) r\n        (recur (assoc r (first m) d) (rest m)))))", "problem": 156, "user": "51f40975e4b0fca5e8b4822e"}, {"code": "(fn mapdef [d v]\n  (zipmap v (repeat (count v) d)))", "problem": 156, "user": "51d96ad0e4b02ceefd94774f"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "51dc5033e4b09c47a74ce109"}, {"code": "(fn [v ks] (zipmap ks (repeat v)))", "problem": 156, "user": "51f8277be4b09be9c177e528"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "51e780dae4b0730ab87cf353"}, {"code": "#(reduce (fn [m k] (assoc m k %)) {} %2)", "problem": 156, "user": "5151b6e8e4b03e678e393adc"}, {"code": "(fn foo [x y]\n    (when (seq y)\n      (conj {(first y) x} (foo x (rest y)))))", "problem": 156, "user": "50aedb8ce4b0a40c9cfb08d4"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "5046ee3ee4b03b02161376b4"}, {"code": "#(apply assoc {} (interleave %2 (repeat %1)))", "problem": 156, "user": "517b9c82e4b0e963dd819c99"}, {"code": "(fn [v ks] (into {} (for [i ks] [i v])))", "problem": 156, "user": "518279abe4b0353c468deb65"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "51fa1375e4b0f1313d4689c9"}, {"code": "(fn [default coll]\n  (into {} (for [key coll] [key default])))", "problem": 156, "user": "4e22b78b535d04ed9115e81e"}, {"code": "(fn [v m] (reduce #(assoc % %2 v) {} m))", "problem": 156, "user": "51fa7154e4b0f1313d4689da"}, {"code": "(fn [v k] (zipmap k (repeatedly #(identity v))))", "problem": 156, "user": "4f592f83e4b0030a34fb2ad2"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "51b3d998e4b0f094dd986fa8"}, {"code": "(fn\n  [d seq]\n  (let [c (count seq)\n        r (repeat c d)\n        i (interleave seq r)]\n    (apply assoc {} i)\n    ))", "problem": 156, "user": "51f805b0e4b06ff1c25c52e2"}, {"code": "(fn [x y]\n  (apply hash-map (interleave y (repeat x))))", "problem": 156, "user": "51f82769e4b09be9c177e527"}, {"code": "#(apply merge (for [x %2] (assoc {} x %1)))", "problem": 156, "user": "51f9b1d0e4b09be9c177e550"}, {"code": "(fn [x v]\n  (reduce #(assoc %1 %2 x) {} v))", "problem": 156, "user": "4e99819a535dbda64a6f6b66"}, {"code": "(fn [default v]\n     (into {} (for [k v]\n                [k default])))", "problem": 156, "user": "4fa3c137e4b081705acca193"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "51fefe8ae4b0f1313d468a7d"}, {"code": "(fn [d v] (into {} (for [vv v] { vv d})))", "problem": 156, "user": "51fe9858e4b0f1313d468a6e"}, {"code": "(fn [v ids]\n  (zipmap ids (repeat v)))", "problem": 156, "user": "4dddff47535d08e6dec9fdd4"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "516ab8c2e4b081287f204e9e"}, {"code": "(fn f [dv ks]\n  (zipmap ks (repeat (count ks) dv)))", "problem": 156, "user": "51944aaae4b0142f60b4aedc"}, {"code": "(fn [default-value key-vector]\n  (into\n  \t{}\n   \t(map #(vector % default-value) key-vector)\n   )\n  )", "problem": 156, "user": "51ca15bfe4b09ce160bef5b8"}, {"code": "(fn [default ks]\n  (zipmap ks (repeat default)))", "problem": 156, "user": "51db0d99e4b06aa4d4669a9d"}, {"code": "#(zipmap %2 (repeat (count %2) %))", "problem": 156, "user": "51f2b8f1e4b0210f90e74556"}, {"code": "(fn [arg1 arg2] (into {} (map #(hash-map % arg1) arg2)))", "problem": 156, "user": "52016fd3e4b0b2e020a18f10"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4f0b3c88535d0136e6c22301"}, {"code": "(fn [default seq]\n  (apply \n    hash-map \n    (interleave seq (repeat default))))", "problem": 156, "user": "4f017b4e535dcb61093f6a37"}, {"code": "(fn [d args] (reduce #(conj % [%2 d]) {} args))", "problem": 156, "user": "52039e12e4b0fb7e47ea51ff"}, {"code": "(fn [x ks] \n  (into {} (map #(hash-map % x) ks))\n)", "problem": 156, "user": "51897709e4b0288ada3dbdaa"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4eb5750a535d7eef30807366"}, {"code": "(fn [v kseq] (apply hash-map (interleave kseq (repeat v))))", "problem": 156, "user": "5201ff99e4b0b2e020a18f26"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "51f7dd27e4b06ff1c25c52dc"}, {"code": "#(into {} (for [x %2] [x %]))", "problem": 156, "user": "4dcd818e535d5973398f929d"}, {"code": "(fn [x y] (apply array-map (interleave y (take (count y) (repeat x)))))", "problem": 156, "user": "52016690e4b0b2e020a18f0f"}, {"code": "(fn [x coll] (apply assoc {} (mapcat #(list % x) coll)))", "problem": 156, "user": "5202cfe7e4b030ee0c5b2702"}, {"code": "(fn [v, ks] (zipmap ks (repeat v)))", "problem": 156, "user": "520612a7e4b0bf4f1882c81c"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "519c4111e4b0a1d87b003458"}, {"code": "(fn [d s]\n  (reduce #(assoc % %2 d) {} s))", "problem": 156, "user": "52015698e4b0d7096e99ddba"}, {"code": "#(reduce (fn [c k] (assoc c k %)) {} %2)", "problem": 156, "user": "5203bc27e4b0fb7e47ea5204"}, {"code": "(fn [v ks] (into {} (for [k ks] [k v])))", "problem": 156, "user": "52069fade4b0bf4f1882c82c"}, {"code": "(fn [v m] (zipmap m (repeat v)))", "problem": 156, "user": "51ecb0fee4b0bb5070431583"}, {"code": "(fn [a & [o]]\n  (zipmap o (repeat a)))", "problem": 156, "user": "5167e4a2e4b0c5a4140a3099"}, {"code": "#(reduce (fn [m k] (conj m {k %1})) {} %2)", "problem": 156, "user": "51f66e0ee4b06ff1c25c52c3"}, {"code": "(fn def-map\n  [v l]\n  (apply assoc {}\n    (interleave\n      l\n      (repeat (count l) v)\n      )))", "problem": 156, "user": "52084f75e4b01ce6bbf31dde"}, {"code": "(fn [v l]\n(apply hash-map (interleave l (repeat v))))", "problem": 156, "user": "52091d57e4b0e152394d76f0"}, {"code": "(fn [v ks] (into {} (map (fn [k] [k v]) ks)))", "problem": 156, "user": "4f88f57ae4b033992c121c73"}, {"code": "(fn [default keys]\n  (into {}\n    (for [k keys]\n      [k default])))", "problem": 156, "user": "4f88e3eee4b033992c121c72"}, {"code": "(fn [val keys] (zipmap keys (repeat val)))", "problem": 156, "user": "4e5d2dc5535d8a8b8723a2ca"}, {"code": "(fn [x lst] (apply merge (map (fn [elm] {elm x}) lst)))", "problem": 156, "user": "520dd6f4e4b0b022ef140cb8"}, {"code": "(fn [v ks] (zipmap ks (repeat (count ks) v)))\n;(zipmap [:a :b :c :d :e] [1 2 3 4 5]) {:e 5, :d 4, :c 3, :b 2, :a 1}", "problem": 156, "user": "520c5b9ee4b0b022ef140c94"}, {"code": "#(into {} (for [i %2] [i %]))", "problem": 156, "user": "520b67b5e4b0b022ef140c83"}, {"code": "(fn [v ks] (zipmap ks (repeat v)))", "problem": 156, "user": "5078dedae4b08327cd804a5d"}, {"code": "#(into {} (map vector %2 (repeat %)))", "problem": 156, "user": "520e32a2e4b066f3ea161c93"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "5208a3a2e4b0301979a6c235"}, {"code": "(fn [x y]\n  (let [cnt (count y)]\n    (apply hash-map (interleave y (repeat cnt x)))))", "problem": 156, "user": "52029e5de4b030ee0c5b26fc"}, {"code": "(fn [df col] (zipmap col (repeat (count col) df)))", "problem": 156, "user": "520aaac2e4b01da9d47a99e6"}, {"code": "(fn [x y] (apply hash-map (reduce into (for [z y] [z x]))))", "problem": 156, "user": "5186448fe4b0da5a5be3bac9"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "5191ac45e4b0d428d29dc1b6"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4fdc067fe4b05e33b9224f69"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "507b7dbee4b09034bfeeb71e"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "505193b7e4b0a561d07d8f08"}, {"code": "#(apply assoc {} (interleave %2 (repeat %)))", "problem": 156, "user": "520c9489e4b0b022ef140c98"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "50bcb8b4e4b0594b91591c61"}, {"code": "(fn [x y] (into {} (map #(vec (list % x)) y)))", "problem": 156, "user": "5151c184e4b03e678e393add"}, {"code": "(fn [value requested-keys]\n  (zipmap requested-keys (repeat (count requested-keys) value))\n  )", "problem": 156, "user": "5213ffd3e4b0961f15ac4d7d"}, {"code": "(fn [x y] (into {} (map #(hash-map % x) y)))", "problem": 156, "user": "513dc533e4b0825f97f7f961"}, {"code": "(fn [default ks]\n  (zipmap ks (repeat default)))", "problem": 156, "user": "4e944706535dbda64a6f6b11"}, {"code": "(fn [d m] (reduce #(assoc %1 %2 d) {} m))", "problem": 156, "user": "52105865e4b080a8d9b9d639"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "5201572be4b0d7096e99ddbb"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "52129363e4b0d32679a50640"}, {"code": "#(into {} (map vector %2 (repeat %1)))", "problem": 156, "user": "51e61772e4b0efabf93c02e2"}, {"code": "(fn rec-map [r v [ & xs] ]\n        (if (empty? xs) r (recur (assoc r (first xs) v) v (rest xs)))) {}", "problem": 156, "user": "51f59607e4b0abb92f97f9d5"}, {"code": "(fn [v m] (reduce #(assoc %1 %2 v) {} m))", "problem": 156, "user": "50e09313e4b061dbdced7233"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "520cb8c4e4b0b022ef140c9a"}, {"code": "(fn [def_val keys]\n  (loop [my-map {}\n         my-keys (seq keys)]\n    (if my-keys\n      (recur (assoc my-map (first my-keys) def_val)\n             (next my-keys))\n      my-map)))", "problem": 156, "user": "5213348ae4b0d32679a50652"}, {"code": "(fn [default_arg m] (apply assoc {} (interleave m (repeat default_arg))))", "problem": 156, "user": "4ea00469535d7eef3080729d"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "520242bae4b030ee0c5b26e3"}, {"code": "(fn [val keys] (apply conj (for [x keys] {x val})))", "problem": 156, "user": "52173464e4b082aa80a88c75"}, {"code": "(fn [default seq] (zipmap (reverse seq) (repeat (count seq) default)))", "problem": 156, "user": "52117ea7e4b07aea8afc4f70"}, {"code": "(fn [v m] (zipmap m (repeat v)))", "problem": 156, "user": "51e924d2e4b0f1f103a0d13a"}, {"code": "(fn [def-val sequen]\n   (if (= (count sequen) 3)\n     {(sequen 0) def-val (sequen 1) def-val (sequen 2) def-val}\n     {(sequen 0) def-val (sequen 1) def-val}))", "problem": 156, "user": "52151220e4b0961f15ac4da7"}, {"code": "(fn [v xs] (zipmap xs (repeat (count xs) v)))", "problem": 156, "user": "513fab65e4b00f13ea1bd891"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "521672bde4b0bf4bffd29cc8"}, {"code": "(fn [default keys]\n        (zipmap keys (repeat default)))", "problem": 156, "user": "4ed72e51535d10e5ff6f52ee"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4f188db6535d64f60314645c"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "51f9527fe4b09be9c177e549"}, {"code": "#(reduce conj (map (fn [x] {x %1}) %2))", "problem": 156, "user": "52160dbee4b0bf4bffd29cb3"}, {"code": "(fn f[value vecto]\n  (if (empty? vecto) {} (into (f value (next vecto)) {(first vecto) value})))", "problem": 156, "user": "52196842e4b0890f2f822bfa"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "511b810ce4b07ab9ec456182"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "51a058dae4b0b292b01ee3f3"}, {"code": "(fn mkMap [v, ks] (into {} (map #(vector %1, v) ks)))", "problem": 156, "user": "52161db6e4b0bf4bffd29cb8"}, {"code": "#(zipmap %2 (iterate identity %1))", "problem": 156, "user": "5213dbc3e4b0961f15ac4d74"}, {"code": "(fn [x y] (reduce #(assoc % %2 x) {} y))", "problem": 156, "user": "52166e50e4b0bf4bffd29cc6"}, {"code": "(fn [d c] (zipmap c (repeat d)))", "problem": 156, "user": "513fbe89e4b00f13ea1bd894"}, {"code": "(fn [v c] (reduce conj {} (map (fn [k] {k v}) c)))", "problem": 156, "user": "521b73f5e4b0c4ef0be83043"}, {"code": "(fn foo [v coll]\n  (reduce merge (map #(hash-map % v) coll)))", "problem": 156, "user": "521bf7cfe4b0c4ef0be83066"}, {"code": "(fn [d s] (zipmap s (repeat d)))", "problem": 156, "user": "52199105e4b0c4ef0be82ff9"}, {"code": "(fn [value vector1] (let [valseq (into [] (repeat 3 value))]\n                                     \n                                     (apply hash-map (interleave vector1  valseq))))", "problem": 156, "user": "51bf0ccee4b013aa0d74b811"}, {"code": "#(apply conj\n  (for [item %2]\n    (hash-map item %1)))", "problem": 156, "user": "51b965dde4b0e871ca495905"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "51f79238e4b06ff1c25c52d7"}, {"code": "(fn [d ks]\n  (apply hash-map (apply concat (for [k ks] [k d]))))", "problem": 156, "user": "521b9f92e4b0c4ef0be8304c"}, {"code": "#(into {} (map vector %2 (repeat %)))", "problem": 156, "user": "521679e9e4b0bf4bffd29cca"}, {"code": "(fn dic [v, [k1 & ks]] (if (empty? ks) {k1 v} (merge {k1 v} (dic v ks))) \n  )", "problem": 156, "user": "5210e5c5e4b080a8d9b9d63f"}, {"code": "#(apply sorted-map (interleave %2 (repeat (count %2) %)))", "problem": 156, "user": "51a91ac2e4b08d8ec191b822"}, {"code": "(fn _ [v ks]\n  (if (not (seq ks))\n    {}\n    (merge (hash-map (first ks) v) (_ v (rest ks)))))", "problem": 156, "user": "5213d7aae4b0961f15ac4d72"}, {"code": "(fn [x ls] (reduce (fn [y z] (assoc y z x)) {} ls))", "problem": 156, "user": "521e1174e4b0dd19981ad06d"}, {"code": "(fn [v ks]\n  (reduce #(assoc %1 %2 v) {} ks))", "problem": 156, "user": "50c113bee4b096f585049c37"}, {"code": "(fn [d ks]\n  (reduce (fn[acc k] \n            (assoc acc k d)) {} ks))", "problem": 156, "user": "4edeac6b535d10e5ff6f533a"}, {"code": "(fn [x y] (zipmap y (repeat (count y) x)))", "problem": 156, "user": "51508905e4b098b221effc2d"}, {"code": "(fn [v ks] (zipmap ks (repeat v)))", "problem": 156, "user": "4f4ff836e4b03ad3f0c10cf4"}, {"code": "#(into {} (for [x %2] {x %1}))", "problem": 156, "user": "5220bc0fe4b0e6a83c8925a7"}, {"code": "#(zipmap %2 (cycle [%]))", "problem": 156, "user": "5216933be4b000d124d989cf"}, {"code": "(fn [v k]\n  (let [n (count k)]\n    (apply hash-map (interleave k (repeat n v)))))", "problem": 156, "user": "5220a770e4b0e6a83c8925a3"}, {"code": "(fn defmap [default \n              the-keys]\n    (loop [k the-keys\n           m {}]\n      (if (empty? k)\n        m\n        (recur (rest k)\n                (assoc m (first k) default))\n         )))", "problem": 156, "user": "522048b3e4b0e6c71e0c0c16"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "521dceeae4b050d5da042802"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "51b9d1f0e4b0e871ca49590b"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "5222000ce4b0e6a83c8925ea"}, {"code": "(fn [dflt keys] (into {} (for [key keys] [key dflt])))", "problem": 156, "user": "521e8227e4b0dd19981ad082"}, {"code": "(fn [a b] (apply merge {} (map #(assoc {} % a) b)))", "problem": 156, "user": "51dad73ae4b09f6bc204eedd"}, {"code": "(fn [k m] \n  (reduce (fn [tmp-map x] (assoc tmp-map x k)) {} m))", "problem": 156, "user": "5224a46ce4b01819a2de42e5"}, {"code": "(fn [d xs] (reduce #(conj %1 (vector %2 d)) {} xs))", "problem": 156, "user": "4daec4a0edd6309eace4d15e"}, {"code": "(fn [v xs]\n  (into {} (map (fn [x] [x v]) xs))\n  )", "problem": 156, "user": "4e458592535dc968683fc4ac"}, {"code": "(fn [x coll] (into {} (map #(vector % x) coll)))", "problem": 156, "user": "5174ade2e4b07031762f2edf"}, {"code": "(fn map-default [default xs]\n  (reduce #(assoc %1 %2 default) {} xs))", "problem": 156, "user": "4fb710f4e4b081705acca2cd"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4f2861eee4b0d6649770a017"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "51843616e4b02826a645f398"}, {"code": "(fn [v s]\n  (apply conj (map #(hash-map % v) s)))", "problem": 156, "user": "52090654e4b0e152394d76ee"}, {"code": "(fn [default keys]\n   (zipmap keys (map (fn [i] default) keys)))", "problem": 156, "user": "4df3df8a535d08e6dec9fe2d"}, {"code": "(fn [v ks] (zipmap ks (repeat v)))", "problem": 156, "user": "4daf36c2edd6309eace4d175"}, {"code": "(fn [defa list] (zipmap list (repeat defa)))", "problem": 156, "user": "5226f9b8e4b04e78ff2e199b"}, {"code": "(fn [default x] \n  (reduce (fn [accum val]\n            (conj {val default} accum))\n          {}\n          x))", "problem": 156, "user": "522600cfe4b0f4c7e20d29c8"}, {"code": "(fn construct [res args ks]\n   (let [[x & xs] ks]\n     (if (empty? ks)\n       (apply hash-map res)\n       (construct (conj res x args) args xs)))) []", "problem": 156, "user": "5225a0f5e4b01819a2de430e"}, {"code": "(fn [x y] (reduce (fn [w z] (assoc w z x)) {} y))", "problem": 156, "user": "51fc44c5e4b0f1313d468a1b"}, {"code": "(fn mkmp [val coll]\n  (cond (empty? coll) {}\n        :else (into {(first coll) val} (mkmp val (rest coll)))))", "problem": 156, "user": "52153bdde4b0961f15ac4daa"}, {"code": "(fn [default coll] (zipmap coll (repeat default)))", "problem": 156, "user": "5225666be4b01819a2de4300"}, {"code": "(fn [default keylist]\n  (reduce #(assoc %1 %2 default) {} keylist))", "problem": 156, "user": "4f9aa75ee4b0dcca54ed6d0d"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "510d59cce4b078ea71921134"}, {"code": "(fn [d m] (into {} (map (fn [k] [k d]) m)))", "problem": 156, "user": "5207d70ae4b03bd50ef54675"}, {"code": "(fn [v k]\n  (apply hash-map (mapcat #(list % v) k)))", "problem": 156, "user": "52277ab9e4b0186687e23a4f"}, {"code": "(fn [default-value key-seq] (reduce (fn [m k] (assoc m k default-value)) {} key-seq))", "problem": 156, "user": "52211978e4b0e6a83c8925bf"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4f9d8083e4b0dcca54ed6d23"}, {"code": "(fn [d, xs]\n  ((fn impl [d, xs, m]\n    (if (empty? xs)\n      m\n      (impl d (rest xs) (assoc m (first xs) d))))\n   d xs {}))", "problem": 156, "user": "521392bce4b0d32679a5065e"}, {"code": "(fn this [v ks]\n  (loop [KS ks\n         m (hash-map)\n         _ (println (if (empty? (rest KS)) \"return\" \"recur\"))]\n    (if (empty? KS) m \n      (recur (rest KS) (conj m (hash-map (first KS) v)) (println (if (empty? (rest KS)) \"return\" \"recur\"))))))\n\n\n#_(fn this [v ks & [m]]\n  (let [m (if (empty? m) \n            (hash-map (first ks) v) \n            (conj m (hash-map (first ks) v)))]\n    (if (empty? (rest ks)) m\n      (this v (rest ks) m))))", "problem": 156, "user": "51e5a627e4b0efabf93c02db"}, {"code": "(fn [value keys] (zipmap keys (take (count keys) (repeat value))))", "problem": 156, "user": "520f46f9e4b0101e4be6fcee"}, {"code": "(fn [v k] (into {} (map (fn [x] {x v}) k)))", "problem": 156, "user": "5125029de4b0ce9225d2ed3e"}, {"code": "(fn [default my-vec]\n  (loop [m {} v my-vec]\n    (if (not (seq v))\n      m\n      (recur (assoc m (first v) default) (rest v)))))", "problem": 156, "user": "51857e64e4b0da5a5be3babe"}, {"code": "#(let [Y %2 X %1] (reduce conj  (for [x Y] (hash-map x X))))", "problem": 156, "user": "5229211be4b04c906c9c6a63"}, {"code": "(fn [x xs] (into {} (for [s xs] [s x])))", "problem": 156, "user": "522454f4e4b01819a2de42d3"}, {"code": "(fn [defValue coll] \n  (reduce conj\n   (map \n     (fn [x] {x defValue})\n     coll)))", "problem": 156, "user": "50c13f77e4b096f585049c3b"}, {"code": "(fn defmap [val, keys]\n  (apply hash-map\n         (#(mapcat\n            (fn [x] (if (sequential? x) x [x])) %)\n           (map (fn [key] [key val]) keys))))", "problem": 156, "user": "522d0360e4b0806774ddfef7"}, {"code": "(fn [default keys-seq]\n  (reduce #(assoc %1 %2 default) {} keys-seq))", "problem": 156, "user": "51c611c4e4b03a28d42333bf"}, {"code": "(fn [d, ks]\n  (->> ks (reduce (fn [m, k] (assoc m k d)) {})))", "problem": 156, "user": "522a1248e4b0590a43906cf3"}, {"code": "#(apply hash-map (conj (vec (interpose % %2)) %))", "problem": 156, "user": "522eb5cce4b01cdb292c5f0c"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "522eba30e4b01cdb292c5f0e"}, {"code": "(fn [v ks] (zipmap ks (repeat (count ks) v)))", "problem": 156, "user": "5220690ee4b0e6a83c892596"}, {"code": "(fn default-map [value keys]\n  (zipmap keys (repeat (count keys) value)))", "problem": 156, "user": "521b339fe4b0c4ef0be83031"}, {"code": "(fn [d keys] (reduce (fn [m k] (assoc m k d)) {} keys))", "problem": 156, "user": "522afe78e4b0d34ee08e71b3"}, {"code": "#(reduce conj {} (map (fn [x] {x %}) %2))", "problem": 156, "user": "52292ce9e4b04c906c9c6a67"}, {"code": "(fn [d k] (zipmap k (repeat d)))", "problem": 156, "user": "52318843e4b0e2e8de81d1e8"}, {"code": "(fn [default_val keys]\n  (zipmap keys\n          (vec (take (count keys) (repeat default_val)))))", "problem": 156, "user": "51642237e4b003cf19fdde31"}, {"code": "(fn [val keys]\n  (loop [k keys v val r {}]\n    (if (empty? k)\n      r\n      (recur (rest k) v (merge r {(first k) v})))))", "problem": 156, "user": "51aefceee4b09397d5109797"}, {"code": "(fn\n  [v ks]\n  (zipmap ks (cycle [v]))\n  )", "problem": 156, "user": "510591dde4b06d28cacc92eb"}, {"code": "(fn [default more] \n  (loop [l more map {}]\n    (if (empty? l) \n      map\n    \t(recur (rest l) (assoc map (first l) default)))))", "problem": 156, "user": "522f988be4b032bbe3424168"}, {"code": "(fn [x y]\n    (apply merge\n           (for [key y] {key x})))", "problem": 156, "user": "506c0a02e4b0eda3100c090d"}, {"code": "(fn [ defult lst ] (apply hash-map (apply concat (map (fn [ x ] (list x defult)) lst))))", "problem": 156, "user": "52286b19e4b0186687e23a7e"}, {"code": "(fn defmap\n  [default keyseq]\n  (apply merge\n    (map\n      (fn [k] (hash-map k default))\n      keyseq)\n    )   \n  )", "problem": 156, "user": "5228f870e4b0186687e23a98"}, {"code": "(fn [v k] (loop [m {} f (first k) r (rest k)] (let [n (conj m [f v])] (if (empty? r) n (recur n (first r) (rest r))))))", "problem": 156, "user": "52244a77e4b01819a2de42d1"}, {"code": "(fn [d ks] (zipmap ks (repeat d)))", "problem": 156, "user": "515ead6be4b049add99a053e"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "522e6c01e4b01cdb292c5f01"}, {"code": "(fn [d v] (into {} (map (fn [x] {x d}) v)))", "problem": 156, "user": "4ddbd600535d02782fcbe9fb"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "51dd9370e4b0c33a4e1da40c"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "4e5e391c535d8a8b8723a2d0"}, {"code": "#(into {} (for [x %2] [x %]))", "problem": 156, "user": "5233ad08e4b07e3ee2be83ac"}, {"code": "(fn [a b] (zipmap b (repeat a)))", "problem": 156, "user": "50467ee2e4b011c5dfee7723"}, {"code": "(fn [a b]\n  (apply assoc {} (interleave b [a a a])))", "problem": 156, "user": "50b79c5fe4b0cf3e51c3046c"}, {"code": "(fn [v k] (reduce #(assoc %1 %2 v) {} k))", "problem": 156, "user": "510fe537e4b04c71fce993dd"}, {"code": "(fn [d k]\n    (reduce\n     (fn [r i] (conj r [i d]))\n     {}\n     k))", "problem": 156, "user": "5234f716e4b05e80434a505f"}, {"code": "(fn [n l] (reduce #(conj % [%2 n]) {} l))", "problem": 156, "user": "5210ac52e4b080a8d9b9d63e"}, {"code": "(fn [default keys] (apply merge (map #(hash-map % default) keys)))", "problem": 156, "user": "5220909fe4b0e6a83c89259f"}, {"code": "(fn [v ks] (zipmap ks (repeat v)))", "problem": 156, "user": "516abecae4b081287f204e9f"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "520f2265e4b0101e4be6fce7"}, {"code": "#(into {} (for [k %2] [k %1]))", "problem": 156, "user": "508fd6bae4b0ea685a20f76b"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4f149e0f535d64f60314643d"}, {"code": "(fn [k v] (zipmap v (repeat k)))", "problem": 156, "user": "52373f36e4b0477af6280328"}, {"code": ";;#(zipmap %2 (repeat %))\n#(into {} (map vector %2 (repeat %)))", "problem": 156, "user": "52393e16e4b0d705d026ef06"}, {"code": "(fn [d s] (reduce (fn [dic k] (merge dic {k d})) {} s))", "problem": 156, "user": "4f43894ee4b0d7d3c9f3fd21"}, {"code": "#(into {}\n  (for [x %2] {x %1}))", "problem": 156, "user": "51cd75d6e4b02254fc79488c"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "5213d81de4b0961f15ac4d73"}, {"code": "(fn [default keys]\n  (let [entries (for [k keys]\n                  [k default])]\n    (into {} entries)))", "problem": 156, "user": "5236b6bce4b05f3be1c7c8fe"}, {"code": "(fn[d,m](zipmap m(repeat d)))", "problem": 156, "user": "4df1e213535d08e6dec9fe20"}, {"code": "#(into {} (for [i %2] [i %]))", "problem": 156, "user": "523b10dfe4b02f719975bdb8"}, {"code": "(fn [default keys] (reduce #(conj %1 {%2 default}) {} keys))", "problem": 156, "user": "523b4e91e4b07becd5be21ef"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "508923d5e4b06d8254e936e8"}, {"code": "(fn [val sq]\n  (reduce #(into % {%2 val}) {} sq))", "problem": 156, "user": "523bd9c0e4b07becd5be2201"}, {"code": "(fn [default myseq]\n  (into {} (for [i myseq] [i default])))", "problem": 156, "user": "5238ca2de4b0d705d026eef6"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "523d02b0e4b0dbf0c3017289"}, {"code": "#(reduce merge (for[k %2] {k %}))", "problem": 156, "user": "52271ffee4b04e78ff2e19a9"}, {"code": "(fn init [v ks] \n  (loop [cks ks r '{}]\n    (if (empty? cks)\n      r\n      (recur (drop 1 cks) (merge (hash-map (first cks) v) r)))))", "problem": 156, "user": "523bc0e6e4b07becd5be21f9"}, {"code": "(fn [defv coll] (reduce (fn [m k] (assoc m k defv)) {} coll))", "problem": 156, "user": "52319066e4b0e2e8de81d1e9"}, {"code": "(fn [v ks] (zipmap ks (repeat v)))", "problem": 156, "user": "523f0bbfe4b01c266ffa7f91"}, {"code": "(fn [v s]\n  (reduce\n   #(assoc %1 %2 v)\n   {}\n   s))", "problem": 156, "user": "5201ada5e4b0b2e020a18f14"}, {"code": "(fn [x m] (zipmap m (repeat x)))", "problem": 156, "user": "4daef21cedd6309eace4d169"}, {"code": "(fn [val seq]\n    (reduce (fn [map key]\n              (assoc map key val))\n            {} seq))", "problem": 156, "user": "511e763ce4b03e81d390ac29"}, {"code": "(fn [v ls] (reduce #(conj % {%2 v}) {} ls))", "problem": 156, "user": "52379c46e4b0fae3832e99db"}, {"code": "#(reduce (fn [a b] (assoc a b %1)) {} %2)", "problem": 156, "user": "5239aab3e4b0d705d026ef1c"}, {"code": "(fn [x y] (reduce merge (map #(hash-map % x) y)))", "problem": 156, "user": "523eb110e4b057c4b7cd0a67"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "523ed522e4b057c4b7cd0a78"}, {"code": "(fn [value collection]\n   \n   (reduce (fn [m elm] (into m [[elm value]])) {} collection )\n   \n   )", "problem": 156, "user": "518d1b5be4b070277754617b"}, {"code": "(fn [v k] (zipmap k (for [x [:a :b :c]] v)))", "problem": 156, "user": "5151d173e4b03e678e393adf"}, {"code": "(fn [defval m] (reduce #(assoc %1 %2 defval) {} m))", "problem": 156, "user": "5235a902e4b0a643f2dcb750"}, {"code": "(fn [value map-keys] \n  (zipmap map-keys (repeat value)))", "problem": 156, "user": "523e4e86e4b09833704079a9"}, {"code": "(fn [ledef lemap] (reduce #(assoc %1 %2 ledef) {} lemap))", "problem": 156, "user": "5242d5c3e4b076204b44fa95"}, {"code": "(fn map-df [init coll]\n\t(zipmap coll (repeat init)))", "problem": 156, "user": "52381b2ae4b0fae3832e99ef"}, {"code": "(fn [a lst] \n  (apply merge (for [x lst]\n    {x a})))", "problem": 156, "user": "50d5c19ce4b0159555a1fc61"}, {"code": "#(reduce (fn [m k] (conj m [k %])) {} %2)", "problem": 156, "user": "4f048f67535dcb61093f6bd3"}, {"code": "(fn [x y] (zipmap y (repeat x)))", "problem": 156, "user": "5217c26fe4b0a4bccb16cab8"}, {"code": "(fn [v0 l0]\n      (zipmap l0\n          ((fn [v l] (for [x l] v)) v0 l0)\n      )\n   )", "problem": 156, "user": "5242e1dae4b076204b44fa96"}, {"code": "(fn [x klist]\n  (reduce (fn [acc i] (merge acc i)) {} (map (fn [y] {y x}) klist))\n   )", "problem": 156, "user": "5141a8f2e4b02fd87f5064c1"}, {"code": "(fn [d coll] (reduce (fn [acc k] (conj (hash-map k d) acc)) {} coll))", "problem": 156, "user": "51cfc616e4b0e42293a22578"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "5246e945e4b0644eb7b0783b"}, {"code": "#(into {} (map vector %2 (repeat %1)))", "problem": 156, "user": "51b0e7b3e4b0c53cf2e68a6e"}, {"code": "(fn [default lst] (reduce (fn [acc val] (assoc acc val default)) {} lst))", "problem": 156, "user": "506929ffe4b01dc6af13f82b"}, {"code": "(fn [d v] (reduce #(conj %1 [%2 d]) {} v))", "problem": 156, "user": "52474de3e4b05ef8e38e6360"}, {"code": "(fn [default map-keys] (loop [m {} k map-keys d default] (if (empty? k) m (recur (conj m {(first k) d}) (rest k) d))))", "problem": 156, "user": "5245f167e4b09dbe66b5617e"}, {"code": "(fn [v ks]\n  (zipmap ks (repeat v)))", "problem": 156, "user": "52487654e4b05ef8e38e63dc"}, {"code": "(fn [v m] (zipmap m (repeat v)))", "problem": 156, "user": "52342722e4b07e3ee2be83c0"}, {"code": "(fn [v m] (zipmap m (repeat v)))", "problem": 156, "user": "50007353e4b0678c553fc40a"}, {"code": "(fn [x y] (apply hash-map (interleave y (repeat x))))", "problem": 156, "user": "52419ee6e4b076e5d3121f22"}, {"code": "(fn [v ks] (apply hash-map (mapcat list ks (repeatedly (constantly v)))) )", "problem": 156, "user": "523b1a65e4b02f719975bdbd"}, {"code": "#(zipmap %2 (iterate (fn [x] x) %1))", "problem": 156, "user": "5248c4c7e4b05ef8e38e63e8"}, {"code": "#(loop [itms %2\n         final-map {}]\n    (if (empty? itms)\n      final-map\n      (recur (rest itms) (assoc final-map (first itms) %1 ))))", "problem": 156, "user": "523288fee4b035af41902a88"}, {"code": "(fn [x col]\n  (into {}  (for [y col] [y x]))\n  )", "problem": 156, "user": "50550f43e4b0b1b9d1860eb7"}, {"code": "(fn [default keys] (zipmap keys (repeat default)))", "problem": 156, "user": "523a9fc9e4b081681ca7adca"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "51f66891e4b06ff1c25c52c1"}, {"code": "(fn [d v] (reduce #(assoc %1 %2 d) {} v))", "problem": 156, "user": "51fe9d7ce4b0f1313d468a70"}, {"code": "#(apply hash-map (interleave %2 (cycle [%1])))", "problem": 156, "user": "52488545e4b05ef8e38e63df"}, {"code": "(fn [default keys] (apply hash-map (interleave keys (repeatedly (constantly default)))))", "problem": 156, "user": "524be8e0e4b09eba1c0223f1"}, {"code": "(fn [default keycoll]\n  (let [dcoll (repeat default)]\n   (apply hash-map(interleave keycoll dcoll))))", "problem": 156, "user": "5047eadde4b0ec70b3ef8d94"}, {"code": "(fn md [dflt vec] (if (empty? vec){ } (conj (md dflt (rest vec)) {(first vec) dflt})))", "problem": 156, "user": "524b1bf7e4b09eba1c0223c3"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "524cd06ae4b0752c4cb68cca"}, {"code": "#(apply hash-map (interleave %2 (repeat %1 ) ))", "problem": 156, "user": "524025bce4b0ad64fa01030f"}, {"code": "#(zipmap %2 (repeat (count %2) %1 ))", "problem": 156, "user": "4e78c2ba535db95036265723"}, {"code": "(fn [v ks] (zipmap ks (repeat (count ks) v)))", "problem": 156, "user": "524feb3fe4b0541d1855b81f"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4db85bdd535d1e037afb218d"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "501bf2cee4b08e00484756a6"}, {"code": "(fn [v xs] (reduce #(conj % [%2 v]) {} xs))", "problem": 156, "user": "525078b6e4b0541d1855b832"}, {"code": "(fn oletus [d c] (if (empty? c) {} (assoc (oletus d (rest c)) (first c) d)))", "problem": 156, "user": "52474ec2e4b05ef8e38e6361"}, {"code": "(fn [value xs] (reduce #(assoc % %2 value) {} xs))", "problem": 156, "user": "524740e7e4b05ef8e38e635d"}, {"code": "(fn [dval entries] \n  (into {} (for [i entries] [i dval]))\n  )", "problem": 156, "user": "524fafb3e4b0541d1855b817"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "524469dee4b0d8acf9ed6a9d"}, {"code": "(fn [value li] (reduce #(conj %1 [%2 value]) {} li))", "problem": 156, "user": "524f4162e4b0541d1855b806"}, {"code": "(fn [v coll] (zipmap coll (take (count coll) (repeat v))))", "problem": 156, "user": "524dd1c3e4b0f245900d275c"}, {"code": "(fn [d s] (into {} (map #(vector % d) s)))", "problem": 156, "user": "523b1988e4b02f719975bdbc"}, {"code": "(fn [v keys]\n  (reduce #(conj %1 [%2 v]) {} keys))", "problem": 156, "user": "524cdd51e4b0752c4cb68ccc"}, {"code": "(fn [default coll] (zipmap coll (repeat default)))", "problem": 156, "user": "4fb0bd28e4b081705acca26b"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "52479487e4b05ef8e38e6373"}, {"code": "(fn [a b] (into {} (map (fn [x] [x a]) b)))", "problem": 156, "user": "4f2a7174e4b0d6649770a03e"}, {"code": "(fn get_defs [d m] (apply conj (map #(hash-map %1 d) m)))", "problem": 156, "user": "524c7fcfe4b0752c4cb68cbd"}, {"code": "(fn [n s] (apply hash-map (apply concat (map vector s (take (count s) (repeat n))))))", "problem": 156, "user": "511dada0e4b0a5c68a34840c"}, {"code": "#(zipmap%2(repeat %1))", "problem": 156, "user": "52496f0ae4b05ef8e38e6459"}, {"code": "(fn [v ks] (reduce (fn [h k](assoc h k v)) {} ks))", "problem": 156, "user": "52550d90e4b0541d1855b9c1"}, {"code": "(fn [default keys] (reduce conj {} (map (fn [x] [x default]) keys)))", "problem": 156, "user": "524a554de4b05ef8e38e64a2"}, {"code": "(fn [x s] (reduce #(assoc %1 %2 x) {} s))", "problem": 156, "user": "4f80db02e4b033992c121bf9"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "52527192e4b0541d1855b8af"}, {"code": "(fn [d v]\n  (reduce #(conj %1 {%2 d}) {} v))", "problem": 156, "user": "5256627ce4b0541d1855ba1a"}, {"code": "(fn [defaultvalue keyseq] (into {} (map #(hash-map % defaultvalue) keyseq)))", "problem": 156, "user": "524ab5f2e4b09eba1c02239d"}, {"code": "(fn [d k]\n  (reduce merge (for [x k] {x d})))", "problem": 156, "user": "5255b719e4b0541d1855b9ef"}, {"code": "(fn [x y] \n  (reduce #(assoc %1 %2 x) {} y))", "problem": 156, "user": "5236cd89e4b0e010857b4e45"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "524fafdfe4b0541d1855b818"}, {"code": "#(zipmap %2 (repeat (count %2) %))", "problem": 156, "user": "5234870ee4b05e80434a505c"}, {"code": "(fn [v ks] (zipmap ks (repeat v)))", "problem": 156, "user": "52565fcfe4b0541d1855ba19"}, {"code": "(fn \n   ([d coll]\n     (reduce #(assoc %1 %2 d) {} coll)\n   )\n)", "problem": 156, "user": "51d28e15e4b0d13b04db0d9b"}, {"code": "(fn [k_ v_]\n  (apply hash-map\n   ((fn kv [k v]\n      (if (= v '())\n        '()\n        (concat [(first v) k] (kv k (rest v)))\n        )\n     ) k_ v_)\n   )\n  )", "problem": 156, "user": "52586d24e4b0cb4875a45cb0"}, {"code": "(fn [v ks] (reduce #(conj %1 {%2 v}) {} ks))", "problem": 156, "user": "52593207e4b0cb4875a45cd3"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "525431dfe4b0541d1855b970"}, {"code": "(fn [d v] \n  (apply hash-map \n   (interleave v \n               (repeat \n                (count v) d\n                )\n    )\n   ))", "problem": 156, "user": "5259a16ee4b0cb4875a45ce1"}, {"code": "(fn [v ks]\n  (apply hash-map\n    (interleave ks (repeat v))))", "problem": 156, "user": "50a3f23ae4b08bbd0eb4ed2f"}, {"code": "(fn [x items] (into {} (for [k items] [k x])))", "problem": 156, "user": "5244fa73e4b0d8acf9ed6acb"}, {"code": "(fn [default s] (zipmap s (repeat default)))", "problem": 156, "user": "525b12b1e4b0cb4875a45d04"}, {"code": "(fn [x l] (reduce #(assoc %1 %2 x) {} l))", "problem": 156, "user": "52599ea5e4b0cb4875a45cdf"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "525636dfe4b0541d1855ba0d"}, {"code": "(fn [default keys] (apply hash-map (interleave keys (repeat (count keys) default))))", "problem": 156, "user": "4fb248aae4b081705acca28b"}, {"code": "(fn [default keys]\n  (into {} (map hash-map keys (repeat default))))", "problem": 156, "user": "5256cd77e4b0541d1855ba39"}, {"code": "(fn [default keys] (apply merge (map hash-map keys (repeat default))))", "problem": 156, "user": "52579668e4b0cb4875a45c8c"}, {"code": "(fn [default sequence]\n  (apply hash-map (concat (interpose default sequence) [default])))", "problem": 156, "user": "4f944f60e4b0dcca54ed6cc2"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "522dca16e4b0a102974208bf"}, {"code": "(fn [map-value map-keys]\n  (zipmap\n   map-keys\n   (repeat (count map-keys) map-value)))", "problem": 156, "user": "525a643be4b0cb4875a45cf1"}, {"code": "(fn [dflt lst] (reduce (fn [result n] (assoc result n dflt)) {} lst))", "problem": 156, "user": "5256a1d4e4b0541d1855ba29"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "524f0deee4b0541d1855b7fd"}, {"code": "(fn [d k]\n  (into {} (for [x k] [x d])))", "problem": 156, "user": "51622fb8e4b009fba0926e3f"}, {"code": "(fn [v ks] (reduce (fn [rv k] (assoc rv k v)) {} ks))", "problem": 156, "user": "525ff1e3e4b03e8d9a4a7028"}, {"code": "(fn\n  [default coll]\n  (loop [vs coll m {}]\n    (if (empty? vs)\n      m\n      (recur (rest vs) (assoc m (first vs) default)))))", "problem": 156, "user": "525fffb8e4b03e8d9a4a702b"}, {"code": "(fn [d c] (reduce #(conj % [%2 d]) {} c))", "problem": 156, "user": "525efc76e4b0cb4875a45dbd"}, {"code": "(fn\n  [default key_list] \n  (apply assoc {} (interleave key_list (repeat default))))", "problem": 156, "user": "4ef7a483535dced4c769f258"}, {"code": "(fn mapdefau [defkey s]\n  (if (empty? s)\n    {}\n    (conj {(first s) defkey} (mapdefau defkey (rest s)))))", "problem": 156, "user": "525947f1e4b0cb4875a45cd8"}, {"code": "(fn [n s]\n\t(apply conj (map (fn [x] {x n}) s)\n    )\n)", "problem": 156, "user": "525ba7bbe4b0cb4875a45d28"}, {"code": "(fn [x lst]\n  (zipmap\n   lst\n   (repeat\n    x)))", "problem": 156, "user": "4ecfa05c535d44c135fd68b9"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "509e62a8e4b08df8156e9e2e"}, {"code": "(fn [v ks] (reduce (fn [m [ek ev]] (assoc m ek ev)) {} (map (fn [k] [k v]) ks)))", "problem": 156, "user": "52090567e4b0e152394d76ed"}, {"code": "(fn [default seq]\n  (reduce #(conj %1 (hash-map %2 default)) {} seq))", "problem": 156, "user": "4ec6297b535d6d7199dd36c4"}, {"code": "(fn [default keys]\n  (reduce #(assoc %1 %2 default) {} keys))", "problem": 156, "user": "505345d9e4b0517ede0d0a06"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "525a8875e4b0cb4875a45cf6"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4e58dd23535d8a8b8723a298"}, {"code": "(fn [val keys]\n   (loop [map {} \n          ks(seq (reverse keys))\n          ]\n     (if (and ks)\n       (recur (assoc map (first ks) val)\n              (next ks))\n       map)))", "problem": 156, "user": "52621a5ae4b03e8d9a4a7076"}, {"code": "(fn [x v]\n  (loop [result {} sv v]\n    (if (empty? sv)\n      result\n      (recur (conj result {(first sv) x}) (rest sv)))))", "problem": 156, "user": "4e5cac7c535d8a8b8723a2c3"}, {"code": "(fn [d ks]\n  (apply hash-map (interleave ks (repeat d))))", "problem": 156, "user": "525bcae9e4b0cb4875a45d30"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "521d2564e4b01d5d410d8da8"}, {"code": "(fn create-map-with-default-values [default keylist] \n  (reduce #(assoc % %2 default) {} keylist\n   )   \n)", "problem": 156, "user": "5255324be4b0541d1855b9d0"}, {"code": "#(into {} (map vector %2 (repeat %)))", "problem": 156, "user": "5261f169e4b03e8d9a4a7072"}, {"code": "(fn [dv kc] \n    (apply array-map (interleave kc (repeat (count kc ) dv) )))", "problem": 156, "user": "5262efade4b03e8d9a4a709f"}, {"code": "(fn [a b]\n  (reduce conj (map #(assoc {} % a) b)))", "problem": 156, "user": "52112be7e4b07aea8afc4f68"}, {"code": "(fn [def-val coll] (apply hash-map (interleave coll (repeat (count coll) def-val))))", "problem": 156, "user": "5264301fe4b03e8d9a4a70ca"}, {"code": "(fn [init keys]\n   \n   (reduce #(assoc %1 %2 init) {} keys)\n   )", "problem": 156, "user": "5256c8c7e4b0541d1855ba37"}, {"code": "(fn x [default keys]\n  (if (empty? keys)\n    {}\n    (assoc (x default (rest keys)) (first keys) default)))", "problem": 156, "user": "526439a4e4b03e8d9a4a70cc"}, {"code": "(fn aa [x y]\n   (apply hash-map (interleave (concat y) (concat (vec (repeat (count y) x))))))", "problem": 156, "user": "517e12e3e4b0fcc7c5d37d3c"}, {"code": "(fn [v m] (reduce #(assoc % %2 v) {} m))", "problem": 156, "user": "5262a4d0e4b03e8d9a4a708f"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "52664945e4b03e8d9a4a712f"}, {"code": "(fn [d ks] (zipmap ks (repeat d)))", "problem": 156, "user": "5012da69e4b0c8732600222d"}, {"code": "#(reduce (fn [m v] (assoc m v %)) {} %2)", "problem": 156, "user": "5250779ee4b0541d1855b82f"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "5265337fe4b03e8d9a4a7104"}, {"code": "(fn tomap [default l]\n  (cond\n   (empty? l) {}\n   :else (assoc (tomap default (rest l)) (first l) default)\n   )\n  )", "problem": 156, "user": "5252cbe7e4b0541d1855b8d2"}, {"code": "#(apply assoc {} (interleave %2 (repeat %1)))", "problem": 156, "user": "512318b6e4b03b44edbed433"}, {"code": "(fn [default v]\n  (apply merge\n  (for [i v]\n    {i default}\n  )))", "problem": 156, "user": "52667ecfe4b03e8d9a4a713e"}, {"code": "(fn [value coll]\n\t(reduce #(assoc %1 %2 value) {} coll))", "problem": 156, "user": "523f1245e4b01c266ffa7f95"}, {"code": "(fn [x v] (zipmap v (repeat (count v) x)))", "problem": 156, "user": "52662ca4e4b03e8d9a4a7124"}, {"code": "(fn [d s]\n (reduce (fn [c q]\n  (conj c {q d})) {} s))", "problem": 156, "user": "51f2851fe4b0210f90e7454b"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "51ca82e9e4b08b1cbd0d9488"}, {"code": "(fn [value collection] \n  (zipmap collection (repeat value)))", "problem": 156, "user": "52616198e4b03e8d9a4a705e"}, {"code": "(fn [default keyseq] (reduce (fn [mp ky] (assoc mp ky default)) {} keyseq))", "problem": 156, "user": "5267f871e4b03e8d9a4a7191"}, {"code": "(fn [key vals] (into {} (map #(hash-map % key) vals)))", "problem": 156, "user": "52655949e4b03e8d9a4a710b"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "526952b8e4b03e8d9a4a71e4"}, {"code": "(fn [x xs] (apply hash-map(interleave xs (repeat x))))", "problem": 156, "user": "5255bf1ee4b0541d1855b9f1"}, {"code": "(fn [default ks] (reduce #(assoc %1 %2 default) {} ks))", "problem": 156, "user": "5261aebbe4b03e8d9a4a7066"}, {"code": "(fn [deflt, ks] \n   (reduce (fn [arg-1 arg-2] (merge arg-1 {arg-2 deflt})) {} ks))", "problem": 156, "user": "51f4d46ee4b0fca5e8b48243"}, {"code": "#(into {} (map (fn [k] [k %]) %2))", "problem": 156, "user": "514f0723e4b019235f6c0599"}, {"code": "(fn [key map] (zipmap map (repeat key)))", "problem": 156, "user": "5252f8ede4b0541d1855b8e0"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4f05872b535dcb61093f6bf8"}, {"code": "(fn [val keys]\n  (apply conj {} (map #(hash-map % val) keys)))", "problem": 156, "user": "526aac71e4b03e8d9a4a7235"}, {"code": "(fn [d ks] (reduce (fn [a k] (assoc a k d)) {} ks))", "problem": 156, "user": "50a768e6e4b090657f4a5cd9"}, {"code": "(fn [k v]\n  (zipmap v (repeat k)))", "problem": 156, "user": "517c1a3be4b07ef0e56148d6"}, {"code": "(fn [default k] (reduce #(assoc %1 %2 default) {} k))", "problem": 156, "user": "5116e176e4b0063b4e3e16d7"}, {"code": "#(reduce (fn [m k] (assoc m k %)) {} %2)", "problem": 156, "user": "526c2340e4b03e8d9a4a7281"}, {"code": "(fn [v m] (zipmap m (repeat v)))", "problem": 156, "user": "526397f1e4b03e8d9a4a70b6"}, {"code": "(fn [a b] \n  (into {} \n    (map (fn [c] [c a]) b)\n  )\n)", "problem": 156, "user": "525ee103e4b0cb4875a45dbb"}, {"code": "(fn [v m] (zipmap m (repeat v)))", "problem": 156, "user": "5268fd9fe4b03e8d9a4a71d2"}, {"code": "(fn construct-map\n  [defval coll]\n  (reduce (fn [x y] (conj x {y defval})) {} coll))", "problem": 156, "user": "526e1bd0e4b03e8d9a4a730b"}, {"code": "(fn default-map [val keys] (zipmap keys (repeat (count keys) val)))", "problem": 156, "user": "4f0f03ce535d0136e6c2232a"}, {"code": "(fn [d ks]\n  (reduce #(assoc %1 %2 d) {} ks))", "problem": 156, "user": "523c6451e4b07becd5be2222"}, {"code": "(fn [v s]\n  (loop [m {} k s]\n    (if (empty? k)\n      m\n      (recur (assoc m (first k) v) (rest k)))))", "problem": 156, "user": "526f9715e4b03e8d9a4a7372"}, {"code": "(fn [k v] (reduce #(assoc %1 %2 k) {} v))", "problem": 156, "user": "525c575be4b0cb4875a45d38"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4db599e6535d87e67b28fe11"}, {"code": "(fn [default-val key-list]\n  (loop [k key-list \n         acc {}]\n    (if (empty? k) acc\n      (recur (rest k) (assoc acc (first k) default-val)))))", "problem": 156, "user": "5269c150e4b03e8d9a4a71f8"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "5252b59de4b0541d1855b8cf"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "5260341ee4b03e8d9a4a7034"}, {"code": "(fn map-def [x keysv]\n  (apply hash-map (interleave keysv (repeat x))))", "problem": 156, "user": "526ee63de4b03e8d9a4a733f"}, {"code": "(fn [default ks]\n  (reduce\n   (fn [memo x] (conj memo {x default}))\n   {}\n   ks))", "problem": 156, "user": "51d34334e4b099f3b6acddfe"}, {"code": "(fn [d m] (apply hash-map (interleave m (repeat d))))", "problem": 156, "user": "524ae8e6e4b09eba1c0223b5"}, {"code": "(let [f\n      (fn [value ks result]\n        (if (nil? ks)\n          result\n          (recur value (next ks) (assoc result (first ks) value))\n        )\n      )]\n  (fn [v k] (f v k {}))\n)", "problem": 156, "user": "526dd90de4b03e8d9a4a72fe"}, {"code": "(fn [x coll] (zipmap coll (repeat (count coll) x)) )", "problem": 156, "user": "52721a11e4b03e8d9a4a7413"}, {"code": "(fn [v ks] (apply hash-map (interleave ks (repeat v))))", "problem": 156, "user": "525f51bde4b0cb4875a45dc8"}, {"code": "(fn [d ks]\n  (let [len (count ks)\n        ds (take len (repeat d))]\n    (apply hash-map (interleave ks ds))))", "problem": 156, "user": "52692e3be4b03e8d9a4a71d6"}, {"code": "( fn [v coll] (reduce #(assoc %1 %2 v) {} coll) )", "problem": 156, "user": "52628bb0e4b03e8d9a4a7089"}, {"code": "(fn [default key-vector]\n  (into {} (for [k key-vector] (assoc {} k default)))\n  )", "problem": 156, "user": "5250b7a5e4b0541d1855b83e"}, {"code": "(fn hoge\n  ([dv lst] (hoge {} dv lst))\n  ([m dv lst]\n   (if (empty? lst)\n     m\n     (hoge (conj m [(first lst) dv]) dv (next lst)))))", "problem": 156, "user": "5272669de4b03e8d9a4a742e"}, {"code": "(fn mp [val keys] (zipmap keys (vec (repeat (count keys) val))))", "problem": 156, "user": "52727d52e4b03e8d9a4a7439"}, {"code": "(fn [default v]\n  (apply hash-map (mapcat #(list % default) v)))", "problem": 156, "user": "52736ca1e4b03e8d9a4a747e"}, {"code": "#(into {} (map vector %2 (repeat %)))", "problem": 156, "user": "526cff81e4b03e8d9a4a72b3"}, {"code": "#(apply merge (map (fn [k] {k %1}) %2))", "problem": 156, "user": "4f0ef874535d0136e6c22328"}, {"code": "(fn [a b] (reduce (fn [acc i] (conj acc {i a})) {} b))", "problem": 156, "user": "5272d4b7e4b03e8d9a4a7453"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "51e38568e4b0c611d6113e43"}, {"code": "(fn [defVal sequ]  (into {} (map (fn [x] {x defVal}) sequ)))", "problem": 156, "user": "526bd542e4b03e8d9a4a7274"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "50be9b4ae4b00fb48fed2ef6"}, {"code": "(fn [default lst]\n  (apply hash-map (interleave lst (repeat (count lst) default) ) ))", "problem": 156, "user": "51e7c1f1e4b0a3e081b8cbef"}, {"code": "#(into {} (for [x %2] [x %1]))", "problem": 156, "user": "5274eb56e4b03e8d9a4a74bb"}, {"code": "#(apply hash-map (interleave %2 (repeat (count %2) %1)))", "problem": 156, "user": "52747090e4b03e8d9a4a74a5"}, {"code": "(fn [default ks] (apply hash-map (interleave ks (cycle [default]))))", "problem": 156, "user": "52774928e4b03e8d9a4a74fe"}, {"code": "(fn [default ks] (zipmap ks (repeat default)))", "problem": 156, "user": "527599e8e4b03e8d9a4a74c4"}, {"code": "(fn\n    [x xs]\n    (apply hash-map (reduce #(conj %1 x %2) () xs))\n)", "problem": 156, "user": "51422945e4b0b50abeb46b2e"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "527818f7e4b03e8d9a4a7519"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "527675cbe4b03e8d9a4a74e2"}, {"code": "(fn [v xs]\n  (into {} (for [x xs] [x v])))", "problem": 156, "user": "526f2e16e4b03e8d9a4a7353"}, {"code": "(fn [default coll] (zipmap coll (repeat default)))", "problem": 156, "user": "5272ccf1e4b03e8d9a4a7450"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "522f483ce4b032bbe342415a"}, {"code": "(fn [elem m] \n  (reduce #(assoc %1 %2 elem) {} m))", "problem": 156, "user": "527236d4e4b03e8d9a4a741f"}, {"code": "(fn [val v]\t(reduce #(conj %1 {%2 val}) {} v))", "problem": 156, "user": "504f8334e4b0a02f9cffde8e"}, {"code": "(fn [x lst]\n  (loop [m {} lst lst]\n    (if (empty? lst) m\n    (recur (assoc m (first lst) x) (rest lst)))))", "problem": 156, "user": "52718620e4b03e8d9a4a73f5"}, {"code": "(fn a [d k] (into {} (map #(identity {% d}) k)))", "problem": 156, "user": "527a8eb7e4b03e8d9a4a755f"}, {"code": "(fn [default-value mapping-keys]\n       (letfn [(mapping-default\n               [innter-default-value inner-mapping-keys]\n               (if (not (= (count inner-mapping-keys) 0))\n                 (assoc\n                   (mapping-default innter-default-value (rest inner-mapping-keys))\n                   (first inner-mapping-keys)\n                   innter-default-value)))]\n         (mapping-default default-value mapping-keys)))", "problem": 156, "user": "52747932e4b03e8d9a4a74a6"}, {"code": "(fn map-defaults [x colls]\n    (loop[result {}\n          colls colls]\n      (if(empty? colls)\n        result\n        (recur (assoc result (first colls) x) \n               (rest colls)))))", "problem": 156, "user": "5273562ae4b03e8d9a4a7479"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4db03885838c48654951d9bd"}, {"code": "(fn[e col] \n      (reduce #(assoc %1 %2 e) {} col)\n  )", "problem": 156, "user": "4e8b6f4d535d65386fec211e"}, {"code": "(fn [e col] (reduce #(assoc %1 %2 e) {} col))", "problem": 156, "user": "527c045fe4b03e8d9a4a75a8"}, {"code": "(fn[e col]\n  (reduce #(assoc %1 %2 e){} col)\n)", "problem": 156, "user": "527c0ccae4b03e8d9a4a75ae"}, {"code": "(fn f [v ks]\n  (if (not (empty? ks))\n    (conj {(first ks) v} (f v (rest ks))) ) )", "problem": 156, "user": "4df20dda535d08e6dec9fe23"}, {"code": "#(into {} (for [x %2] {x %1}))", "problem": 156, "user": "4fda0678e4b05e33b9224f44"}, {"code": "(fn [d xs] (apply merge (map #(hash-map % d) xs)))", "problem": 156, "user": "4dbecb06535d020aff1edf6a"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4feb02fbe4b0140c20fb9c13"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "52561be5e4b0541d1855ba08"}, {"code": "(fn [d k] \n  (zipmap \n   k\n   (repeat \n    (count k) \n    d)))", "problem": 156, "user": "4e920f44535dbda64a6f6afd"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "527416ebe4b03e8d9a4a749d"}, {"code": "(fn mapper [value keys]\n  (zipmap (reverse keys) [value value value]))", "problem": 156, "user": "526f0a68e4b03e8d9a4a7348"}, {"code": "(fn [default ks]\n   (reduce #(assoc % %2 default) {} ks))", "problem": 156, "user": "527188cee4b03e8d9a4a73f6"}, {"code": "(fn [k m] (reduce #(conj {%2 k} %1) {} m))", "problem": 156, "user": "502f6c56e4b0842eb223d8bb"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "525ed5f4e4b0cb4875a45db8"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "52810225e4b0757a1b171418"}, {"code": "(fn [v l]\n        (loop [lv v ll l result {}]\n          (if (empty? ll)\n            result\n            (recur v (rest ll) (assoc result (first ll) v)))))", "problem": 156, "user": "527ae911e4b03e8d9a4a756b"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "527b856fe4b03e8d9a4a758d"}, {"code": "(fn map-defaults [a-val, some-keys] \n  (zipmap some-keys (repeat (count some-keys) a-val)))", "problem": 156, "user": "52812b9fe4b0757a1b171423"}, {"code": "#(reduce (fn [m x] (assoc m x %1)) {} %2)", "problem": 156, "user": "50feab26e4b03cd852b4e850"}, {"code": "#(zipmap %2 (cycle [%1]))", "problem": 156, "user": "527ba29de4b03e8d9a4a7594"}, {"code": "(fn [v ks] (apply hash-map (interleave ks (repeat v))))", "problem": 156, "user": "519ef784e4b087743fad2198"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "4e0359e8535d04ed9115e792"}, {"code": "(fn [x xs] (->> xs (map #(vector % x)) (into {})))", "problem": 156, "user": "4fe98ddae4b0547ebccb2463"}, {"code": "(fn t [n l] ( if (empty? l) nil (assoc (t n (rest l)) (first l) n) ))", "problem": 156, "user": "4f03c039535dcb61093f6b5e"}, {"code": "(fn [x keys] (reduce #(conj %1 [%2 x]) {} keys))", "problem": 156, "user": "527fd663e4b0757a1b1713de"}, {"code": "#(zipmap %2(for [_ (range (count %2))] %))", "problem": 156, "user": "52865f41e4b0239c8a67ae15"}, {"code": "#(apply conj {} (for [k %2] [k %]))", "problem": 156, "user": "522a01ade4b0590a43906ced"}, {"code": "(fn [map-default map-keys] (zipmap map-keys (repeat map-default)))", "problem": 156, "user": "4e2c602b535deb9a81d77f06"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "526f6b3fe4b03e8d9a4a7366"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "528149fbe4b0757a1b171426"}, {"code": "(fn [default keyz]\n  (into {} (for [k keyz]\n        \t [k default])))", "problem": 156, "user": "52890634e4b0239c8a67ae5e"}, {"code": "(fn [x y] (into {} (map #(hash-map %1 %2) y (repeat x))))", "problem": 156, "user": "528ad4cce4b0239c8a67ae84"}, {"code": "(fn [n coll]\n  (reduce #(conj % {%2 n}) {} coll))", "problem": 156, "user": "527dc2aee4b0757a1b17138d"}, {"code": "(fn[val list] (into {}(for[x list] {x val})))", "problem": 156, "user": "52840004e4b0239c8a67adc1"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "52753740e4b03e8d9a4a74c1"}, {"code": "(fn [default keys] (reduce (fn [map key] (assoc map key default)) {} keys))", "problem": 156, "user": "52614bc1e4b03e8d9a4a705c"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "514b83b4e4b0bd81940b86ce"}, {"code": "(fn [v ks] (zipmap ks (vec (repeat (count ks) v))))", "problem": 156, "user": "5280539ce4b0757a1b1713f3"}, {"code": "(fn\n  [val seq-keys]\n  (let [res {}]\n    (reduce #(assoc %1 %2 val) res seq-keys)))", "problem": 156, "user": "5289bba9e4b0239c8a67ae69"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "528b08efe4b0239c8a67ae8a"}, {"code": "(fn [default input]\n  (loop [sqns input, result {}]\n    (if (seq sqns)\n       (recur (rest sqns) (conj result [(first sqns) default]))\n       result)))", "problem": 156, "user": "528bba38e4b0239c8a67aea9"}, {"code": "#(zipmap %2 (repeat (count %2) %))", "problem": 156, "user": "52888212e4b0239c8a67ae4e"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "528d1094e4b0239c8a67aebe"}, {"code": "(fn [default-value keys]\n  (into {} (map (fn [key] [key default-value]) keys)))", "problem": 156, "user": "4f35b2ace4b0e243712b1ec5"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "528a791ae4b0239c8a67ae77"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "528e510ee4b0239c8a67aeda"}, {"code": "(fn[v, k] \n  (reduce #(assoc %1 %2 v) {} k)\n)", "problem": 156, "user": "52299d14e4b04c906c9c6a7e"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "52761edae4b03e8d9a4a74d4"}, {"code": "(fn [val keys]\n  (into {}\n        (for [k keys]\n          [k val])))", "problem": 156, "user": "4e7e032b535db169f9c796fc"}, {"code": "(fn [default container]    \n      (into {} (map (fn[x] (hash-map x default)) container))\n    )", "problem": 156, "user": "52737333e4b03e8d9a4a747f"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "528ed0a8e4b0239c8a67aeea"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "5290257ae4b0239c8a67af03"}, {"code": "(fn map_with_defaults\n  [default-val my-keys]\n  \n    (into {} (for [x my-keys] {x default-val}))\n    )", "problem": 156, "user": "528ba6a2e4b0239c8a67aea4"}, {"code": "(fn [x y]\n  (reduce (fn [a b] (assoc a b x)) {} y)\n  )", "problem": 156, "user": "528ce039e4b0239c8a67aebc"}, {"code": "(fn  [x y] (reduce conj (map hash-map y (repeat x))))", "problem": 156, "user": "529012a5e4b0239c8a67af01"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "5285920be4b0239c8a67adfb"}, {"code": "#(into {} (map vector %2 (repeat %1)))", "problem": 156, "user": "52951156e4b02ebb4ef7501b"}, {"code": "(fn [d s] (zipmap s (take (count s) (repeat d))))", "problem": 156, "user": "52939bd1e4b0239c8a67af41"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "5292c985e4b0239c8a67af36"}, {"code": "(fn [default fields]\n  (apply hash-map (interleave fields (repeat (count fields) default))))", "problem": 156, "user": "4f3656d1e4b0e243712b1ec9"}, {"code": "(fn [default seqs]\n  (into {}\n    (for [elem seqs] [elem default])\n  )\n)", "problem": 156, "user": "52837636e4b0239c8a67adb6"}, {"code": "(fn [x, y] \n  (reduce  (fn [summ unit] \n             (conj summ {unit x})) {} y ))", "problem": 156, "user": "52361d84e4b05f3be1c7c8e5"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "5290ffaee4b0239c8a67af10"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4f32d340e4b0d6649770a096"}, {"code": "(fn mapDefaults2 [x coll] (if (< 0 (count coll))\n                                 (conj (mapDefaults2 x (rest coll)) {(first coll) x})\n                                {}))", "problem": 156, "user": "5296aa9be4b02ebb4ef75034"}, {"code": "#(zipmap %2 (vector %1 %1 %1))", "problem": 156, "user": "5296008fe4b02ebb4ef7502a"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4e72ac47535d5021c1a89666"}, {"code": "(fn [default-value collection ]\n  (zipmap collection (repeat default-value)))", "problem": 156, "user": "5144e4c1e4b021a5ff8301f8"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "528cf6f7e4b0239c8a67aebd"}, {"code": "(fn [y x] (zipmap x (repeat y)))", "problem": 156, "user": "528f1057e4b0239c8a67aeec"}, {"code": "(fn [val keys]\n  (loop [keys keys res {}]\n    (if (nil? keys) \n      res \n      (recur \n       (next keys) \n       (conj res [(first keys) val])))))", "problem": 156, "user": "52990271e4b02ebb4ef7506d"}, {"code": "#(into {} (map vector %2 (repeat %1)))", "problem": 156, "user": "52140b53e4b0961f15ac4d7e"}, {"code": "(fn [k coll]\n  (zipmap coll (iterate identity k)))", "problem": 156, "user": "526934d6e4b03e8d9a4a71dd"}, {"code": "(fn [defval lst] (apply (partial assoc {}) (interleave lst (repeat defval))))", "problem": 156, "user": "51c214bce4b0d204dbe2ca1c"}, {"code": "(fn [default ks]\n  (into {} (map #(vector % default) ks)))", "problem": 156, "user": "529a73bde4b02ebb4ef75096"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "528b01a0e4b0239c8a67ae89"}, {"code": "(fn [default ks]\n  (apply assoc (cons {} (interleave ks (repeat default)))))", "problem": 156, "user": "4e72187b535d5021c1a8965b"}, {"code": "(fn [d k] (reduce (fn [dict x] (conj dict [x d])) {} k))", "problem": 156, "user": "529d4f4be4b04e0c58e87b79"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "527094f0e4b03e8d9a4a73b3"}, {"code": "(fn [v ks] (reduce (fn [acc item] (assoc acc item v)) {} ks))", "problem": 156, "user": "529e2383e4b04e0c58e87b8b"}, {"code": "(fn\n  [mval mkeys]\n  (reduce #(conj % [%2 mval]) {} mkeys))", "problem": 156, "user": "529dd5a4e4b04e0c58e87b82"}, {"code": "(fn [x coll] (apply hash-map (concat (interpose x coll) (list x))))", "problem": 156, "user": "5298cc88e4b02ebb4ef75065"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "52774dd2e4b03e8d9a4a74ff"}, {"code": "(fn [d k] (reduce #(assoc %1 %2 d) {} k))", "problem": 156, "user": "52323a4ae4b035af41902a79"}, {"code": "#((fn defl [k d m]\n    (if (empty? k) \n      m\n      (defl (rest k) d (assoc m (first k) d))\n              )) %2 %1 {} )", "problem": 156, "user": "529ce629e4b04e0c58e87b6e"}, {"code": "#(apply hash-map (concat (interpose %1 %2) [%1]) )", "problem": 156, "user": "528f4462e4b0239c8a67aef0"}, {"code": "(fn map-defaults\n  [default col]\n  (zipmap col (repeat (count col) default)))", "problem": 156, "user": "528e25b9e4b0239c8a67aed5"}, {"code": "#(into{}(for[k %2][k %]))", "problem": 156, "user": "4db92654535d1e037afb21a0"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "5273b883e4b03e8d9a4a748f"}, {"code": "(fn [v m] (apply hash-map (interleave m (repeat v))))", "problem": 156, "user": "52a0fa82e4b04e0c58e87bd1"}, {"code": "#(zipmap %2  (repeat %1))", "problem": 156, "user": "4f1b120f535d64f603146476"}, {"code": "(fn [d, k]\n  (zipmap k (repeat d)))", "problem": 156, "user": "52a32876e4b04e0c58e87bfb"}, {"code": "(fn [default keys]\n      (loop [map {} v default ks keys]\n        (if (empty? ks)\n          map\n          (recur\n           (assoc map (first ks) v)\n           v\n           (rest ks)))))", "problem": 156, "user": "4dbba163535d3f4042261ecc"}, {"code": "(fn [value keyList]\n  (zipmap keyList (for [x (range(count keyList))] value)))", "problem": 156, "user": "52a144b0e4b04e0c58e87bd6"}, {"code": "(fn [default coll] (loop [d default ks coll ret {}] (if (empty? ks) ret (recur d (rest ks) (assoc ret (first ks) d)))))", "problem": 156, "user": "4ec1619b535dfed6da9c6dab"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "51ad244fe4b09397d510977f"}, {"code": "(fn [d m] (apply merge (map #(hash-map % d) m)))", "problem": 156, "user": "4e6e1756535d5021c1a895fe"}, {"code": "(fn [x y] \n  (reduce conj {}(map (fn [z] {z x}) y)))", "problem": 156, "user": "529ac5d4e4b02ebb4ef7509b"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "51ea4e35e4b0f1f103a0d148"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "52a5d1f3e4b0c58976d9abf1"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "5289f1f4e4b0239c8a67ae6d"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "52a5e784e4b0c58976d9abf3"}, {"code": "(fn [d v] (reduce #(into %1 {%2 d}) {} v))", "problem": 156, "user": "528e64b7e4b0239c8a67aedd"}, {"code": "(fn [default s] \n  (reduce into {} \n          (map #(into {} {% default}) s)))", "problem": 156, "user": "5273e006e4b03e8d9a4a7495"}, {"code": "(fn [v ks]\n  (reduce (fn [acc k] (assoc acc k v)) {} ks))", "problem": 156, "user": "4f77b68de4b0fbe0118ec581"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "505d1b01e4b0e6aca564be04"}, {"code": "(fn [d ks] (zipmap ks (repeat d)))", "problem": 156, "user": "4fa38e3fe4b081705acca190"}, {"code": "(fn [d coll]\n  (zipmap coll \n          (repeat (count coll) d)))", "problem": 156, "user": "515896f2e4b059418b97f0a8"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "528f0106e4b0239c8a67aeeb"}, {"code": "(fn [v ks] (into {}\n                 ((fn [val] (map #(vector % val) ks))\n                       v)))", "problem": 156, "user": "5298c83de4b02ebb4ef75064"}, {"code": "(fn toto [d c]\n  (apply array-map (interleave c (repeat d))))", "problem": 156, "user": "5267d9bde4b03e8d9a4a7188"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "51929214e4b08962174cf74c"}, {"code": "(fn [v k] (reduce #(assoc %1 %2 v) {} k))", "problem": 156, "user": "52a62e16e4b0c58976d9abf9"}, {"code": "#(zipmap %2 [% % %])", "problem": 156, "user": "528a3e14e4b0239c8a67ae72"}, {"code": "(fn [v ks] \n  (apply merge (for [x (reverse ks)] {x v} )))", "problem": 156, "user": "52295917e4b04c906c9c6a6f"}, {"code": "(fn [Key Map] (zipmap Map (repeat Key)))", "problem": 156, "user": "52a28e1ce4b04e0c58e87bf0"}, {"code": "(fn [v ks] (into {} (for [k ks] [k v])))", "problem": 156, "user": "51264447e4b05d10e3e39601"}, {"code": "#(reduce (fn [k m] (assoc k m %1)) {} %2)", "problem": 156, "user": "52a88c4de4b0c58976d9ac30"}, {"code": "(fn [default mapkeys]\n  (zipmap mapkeys (repeat (count mapkeys) default)))", "problem": 156, "user": "52a779fce4b0c58976d9ac1a"}, {"code": "(fn [x mp] (zipmap mp (iterate (fn [u] x) x)))", "problem": 156, "user": "52ab61f5e4b0c58976d9ac75"}, {"code": "(fn [x xs] (zipmap xs (repeat (count xs) x)))", "problem": 156, "user": "52a8ca0fe4b0c58976d9ac36"}, {"code": "(fn [x ks] (reduce #(assoc %1 %2 x) {} ks))", "problem": 156, "user": "52a9406de4b0c58976d9ac43"}, {"code": "(fn [value mapkeys]\n (zipmap mapkeys (take (count mapkeys) (repeat value))))", "problem": 156, "user": "50dcb2f4e4b02e6ac9592c91"}, {"code": "(fn xx [v coll]\n\t(into {} (map #(vector % v) coll)))", "problem": 156, "user": "51937eb3e4b04df54c098022"}, {"code": "#(zipmap %2 (repeat 5 %1))", "problem": 156, "user": "51eab308e4b0f1f103a0d150"}, {"code": "(fn[sep x] (zipmap x (repeat sep)))", "problem": 156, "user": "52a1edd6e4b04e0c58e87be4"}, {"code": "#(reduce (fn [a b] (conj a [b %1])) {} %2 )", "problem": 156, "user": "52afbc69e4b0c58976d9acc0"}, {"code": "(fn [init ks]\n  (into {} (for [k ks] [k init])))", "problem": 156, "user": "52ab6de1e4b0c58976d9ac78"}, {"code": ";#(loop [coll %2 result {}] (if (nil? (seq coll)) result (recur (next coll) (conj result {(first coll) %1}))))\n\n#(zipmap %2 (repeat %1))", "problem": 156, "user": "524f4256e4b0541d1855b808"}, {"code": "(fn def-map [default keys]\n  (if (empty? keys)\n    {}\n    (assoc (def-map default (rest keys)) (first keys) default)))", "problem": 156, "user": "52aa4a67e4b0c58976d9ac62"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "527c040be4b03e8d9a4a75a7"}, {"code": "(fn [d s]\n  (apply hash-map (interleave s (repeat d))))", "problem": 156, "user": "4ee8b9c9535d93acb0a66884"}, {"code": "(fn [v l]\n  (reduce #(assoc %1 %2 v) {} l))", "problem": 156, "user": "527ba695e4b03e8d9a4a7596"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "527c0513e4b03e8d9a4a75ab"}, {"code": "#(zipmap %2 [%1 %1 %1])", "problem": 156, "user": "527c0509e4b03e8d9a4a75aa"}, {"code": "(fn [a b]\n   (into {} \n         (map \n           #(zipmap (vector %)  (vector a))\n           b\n         )\n   )\n)", "problem": 156, "user": "4e9df73d535dbda64a6f6b90"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "5298d3f4e4b02ebb4ef75068"}, {"code": "#(apply merge (for [k %2] {k %}))", "problem": 156, "user": "52ab51c4e4b0c58976d9ac73"}, {"code": "(fn [defval init-keys]\n  (loop [res {} key init-keys]\n    (if (empty? key)\n      res\n      (recur \n        (assoc res (first key) defval)\n        (rest key))\n      )))", "problem": 156, "user": "52b1ff48e4b0c58976d9ace7"}, {"code": "(fn [def-val key-list]\n  (reduce #(conj %1 {%2 def-val}) {} key-list))", "problem": 156, "user": "52b405e1e4b0c58976d9ad15"}, {"code": "(fn map-defaults [n s]\n  (reduce #(assoc % %2 n) {} s))", "problem": 156, "user": "51852961e4b0da5a5be3babb"}, {"code": "(fn [x ys] (into {} (for [y ys] [y x])))", "problem": 156, "user": "52b43468e4b0c58976d9ad1b"}, {"code": "(fn [v ks] (zipmap ks (repeat v)))", "problem": 156, "user": "4fc3a72ae4b081705acca342"}, {"code": "(fn map-with-default [v ks] (apply hash-map (interleave ks (repeat v))))", "problem": 156, "user": "508f97c0e4b0ea685a20f768"}, {"code": "(fn consmap [default keyz] (let [makenew (fn [coll, k] (conj coll [k default]))] (reduce makenew {} keyz)))", "problem": 156, "user": "52b60e94e4b0c58976d9ad3e"}, {"code": "(fn [d y]\n   (reduce #(conj % %2) {} (for [x y]\n                 [x d])))", "problem": 156, "user": "52b48f04e4b0c58976d9ad29"}, {"code": "#(into {} (map (fn [k] {k %}) %2))", "problem": 156, "user": "52b5edd1e4b0c58976d9ad3c"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "52a7c82ae4b0c58976d9ac21"}, {"code": "(fn [d v] (into {} (map #(vector % d) v)))", "problem": 156, "user": "52b80827e4b0c58976d9ad56"}, {"code": "(fn [x y]\n  (apply hash-map (interleave y (iterate (fn [x] x) x))))", "problem": 156, "user": "52b0323ee4b0c58976d9acc6"}, {"code": "(fn [v m]\n  (apply merge (map #(hash-map % v) m)))", "problem": 156, "user": "52a55adee4b0c58976d9abe7"}, {"code": "(fn [v k] (apply hash-map (interleave k (repeat v))))", "problem": 156, "user": "505b0431e4b021387fb8985e"}, {"code": "(fn [x y] (reduce (fn [a b] (assoc a b x)) {} y))", "problem": 156, "user": "526fce6fe4b03e8d9a4a7383"}, {"code": "(fn [v ks]\n  (reduce #(assoc %1 %2 v) {} ks))", "problem": 156, "user": "52b955f8e4b07a9af57922bc"}, {"code": "#(into {} (for [x %2] {x %1}))", "problem": 156, "user": "52b8af15e4b07a9af57922b5"}, {"code": "(fn [default keys]\n   (reduce #(assoc %1 %2 default) {} keys))", "problem": 156, "user": "52470d42e4b05ef8e38e6350"}, {"code": "(fn [default key-list]\n  (let [default-value-list (repeat default)]\n    (zipmap key-list default-value-list)))", "problem": 156, "user": "52b94f15e4b07a9af57922ba"}, {"code": "(fn [d l] (apply merge (for [x l] (array-map x d))))", "problem": 156, "user": "52ba43d0e4b07a9af57922cd"}, {"code": "(fn self [e l] (if (empty? l) {} (conj {(first l) e} (self e (rest l)))))", "problem": 156, "user": "52ba447ee4b07a9af57922ce"}, {"code": "#(apply conj (map (fn [k v] {k v}) %2 (repeat %1)))", "problem": 156, "user": "52ba2af3e4b07a9af57922cc"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "52b42d7ee4b0c58976d9ad19"}, {"code": "(fn [default ks]\n  (reduce #(assoc %1 %2 default) {} ks))", "problem": 156, "user": "52b63875e4b0c58976d9ad41"}, {"code": "#(apply hash-map (mapcat list %2 (repeat 999 %1)))", "problem": 156, "user": "52bb27fee4b07a9af57922df"}, {"code": "(fn [default_value sequ]\n  (into {}\n  (for [x sequ]\n    [x default_value])))", "problem": 156, "user": "52bc7ea6e4b07a9af57922f7"}, {"code": "#(into {} (map (fn [k v] (vector k v)) %2 (repeat %)))", "problem": 156, "user": "52a9154ee4b0c58976d9ac3b"}, {"code": "(fn [v ks]\n  (zipmap ks (repeat (count ks) v)))", "problem": 156, "user": "52bb2fc0e4b07a9af57922e0"}, {"code": "(fn [s xs] (zipmap (reverse xs) (repeat (count xs) s)))", "problem": 156, "user": "52baea85e4b07a9af57922d9"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "52a23af1e4b04e0c58e87beb"}, {"code": "(fn default-key [default [& keys]]\n  (apply merge (for [key keys]\n    (hash-map key default))))", "problem": 156, "user": "52bafc88e4b07a9af57922dc"}, {"code": "(fn [default kkeys] (reduce merge (for [x kkeys] {x default})))", "problem": 156, "user": "52bdf6bde4b07a9af579230d"}, {"code": "(fn map-with-def [def-val keys] \n  (apply hash-map \n         (reduce #(conj %1 %2 def-val) [] keys)\n         )\n)", "problem": 156, "user": "52763696e4b03e8d9a4a74d7"}, {"code": "(fn [d l] (into {} \n                (map #(vector % d) l)))", "problem": 156, "user": "52be4347e4b07a9af579231b"}, {"code": "(fn [_value _keys]\n  (loop [result {}, remaining-keys _keys]\n    (if (empty? remaining-keys) result\n      (recur (assoc result (first remaining-keys) _value) (rest remaining-keys)))))", "problem": 156, "user": "52bc6f5ee4b07a9af57922f6"}, {"code": "(fn [def-value key-seq]\n  (zipmap key-seq (repeat def-value)))", "problem": 156, "user": "529f9bf2e4b04e0c58e87bb4"}, {"code": "(fn a [x,l] (into {} (map vector l (take (count l) (repeat x)))))", "problem": 156, "user": "52b7a904e4b0c58976d9ad51"}, {"code": "#(into {} (for [k %2] [k %1]))", "problem": 156, "user": "52b577c9e4b0c58976d9ad39"}, {"code": "(fn [default-value keyz]\n  (zipmap keyz (repeat default-value)))", "problem": 156, "user": "52be23dbe4b07a9af5792316"}, {"code": "(fn [k v] (into {} (map #(vector % k) v)))", "problem": 156, "user": "4eda8d7c535d10e5ff6f530f"}, {"code": "(fn [x ys] (into {} (for [y ys] [y x])))", "problem": 156, "user": "4ea09441535d7eef308072a7"}, {"code": "(fn f [default items]\n  (loop [L items m {}]\n    (if (empty? L)\n      m\n      (recur (rest L) (assoc m (first L) default))\n    )\n  )\n)", "problem": 156, "user": "52bf936ee4b07a9af579233b"}, {"code": "(fn [v ks]\n  (reduce #(assoc %1 %2 v) {} ks))", "problem": 156, "user": "4f3a979de4b0e243712b1f10"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "52bdb689e4b07a9af5792306"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "52baefbae4b07a9af57922da"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4db091b7838c48654951d9c2"}, {"code": "(fn [ k coll] \n         (reduce conj  (#(for [key  %2] \n                          {key %})\n                       k coll ))\n         )", "problem": 156, "user": "5295fbb7e4b02ebb4ef75029"}, {"code": "(fn [num vtable] (reduce (fn [acc k] (conj acc [k num])) (hash-map) vtable))", "problem": 156, "user": "52c25645e4b07a9af579237d"}, {"code": "(fn [v cols]\n  (reduce merge (map #(hash-map % v) cols)))", "problem": 156, "user": "52b9cd85e4b07a9af57922c4"}, {"code": "(fn\n   [n l]\n   (reduce (fn [a x] (assoc a x n)) {} l))", "problem": 156, "user": "52c00263e4b07a9af579233f"}, {"code": "(fn [x y] (zipmap y (take (count y) (repeat x))))", "problem": 156, "user": "52179e00e4b0ea2f1c31c8d3"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "52c1cc8be4b07a9af579236b"}, {"code": "(fn [default col] (reduce #(assoc %1 %2 default) {} col))", "problem": 156, "user": "52b9b86ee4b07a9af57922c1"}, {"code": "(fn [default v] (zipmap v (repeat default)))", "problem": 156, "user": "52c3c689e4b0c2d177d620c9"}, {"code": "(fn [val keys]\n  (into {}\n    (for [x keys]\n      {x val})))", "problem": 156, "user": "4fc559eae4b0ee37620e17f3"}, {"code": "#(zipmap %2 (repeat (.length %2) %1))", "problem": 156, "user": "4f25ec9fe4b0d66497709ffd"}, {"code": "(fn [default keyseq]\n  (apply merge (map #(assoc {} % default) keyseq)))", "problem": 156, "user": "52c3dffee4b0c2d177d620cb"}, {"code": "(fn [default-val seq-of-keys]\n  (reduce (fn [acc key] (conj acc [key default-val])) {} seq-of-keys))", "problem": 156, "user": "52c3b3e5e4b0c2d177d620c8"}, {"code": "(fn [default xs]\n  (reduce\n    (fn [m v]\n      (assoc m v default)\n    )\n    {}\n    xs\n  )\n)", "problem": 156, "user": "526e84b5e4b03e8d9a4a732d"}, {"code": "#(apply hash-map (interleave %2 (repeat (count %2) %1)))", "problem": 156, "user": "529d292fe4b04e0c58e87b74"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4f0f174c535d0136e6c22330"}, {"code": "(fn build-map [default-value map-keys] \n  (reduce #(assoc %1 %2 default-value) {} map-keys)\n)", "problem": 156, "user": "52be0c48e4b07a9af5792311"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "52897300e4b0239c8a67ae65"}, {"code": "(fn [x y] (apply hash-map (interleave y (repeat x))))", "problem": 156, "user": "52bbd09ee4b07a9af57922ee"}, {"code": "(fn[v z] (into {} (for [x z y[v]] {x y})))", "problem": 156, "user": "52bc6cb2e4b07a9af57922f5"}, {"code": "(fn [d s] \n  (reduce #(assoc %1 %2 d) {} s))", "problem": 156, "user": "52c52ef2e4b0c2d177d620ef"}, {"code": "(fn [dv ks]\n  (apply hash-map (interleave ks (repeat dv))))", "problem": 156, "user": "529e3a4fe4b04e0c58e87b92"}, {"code": "(fn [default my-seq]\n  (loop [my-map {} my-seq my-seq]\n    (cond (empty? my-seq) my-map\n          :else (recur (assoc my-map (first my-seq) default) (rest my-seq)))))", "problem": 156, "user": "51a2569ee4b00957e520db7d"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "52b02329e4b0c58976d9acc5"}, {"code": "(fn mapdef2\n        ([x v] (mapdef2 x v {}))\n        ([x v m] (if (empty? v)\n                   m\n                   (mapdef2 x (rest v) (into m {(first v) x})))))", "problem": 156, "user": "52c58561e4b0c2d177d620f8"}, {"code": "(fn [value vctr]\n  (loop [cnt (dec(count vctr)) mp {}]\n  (if (< cnt 0) mp\n  (recur (dec cnt) (conj mp {(vctr cnt) value}))\n  )))", "problem": 156, "user": "52c3a0f4e4b0c2d177d620c6"}, {"code": "(fn [a c] (loop [v a k c r {}]\n          (if (= k [])\n            r\n            (recur v (rest k) (assoc r (first k) a)))))", "problem": 156, "user": "529d79b7e4b04e0c58e87b7b"}, {"code": "(fn [v m]\n (reduce \n  \t(fn\t[a x]\n      (assoc a x v))\n  \n  \t{}\t\n  \tm\n\t))", "problem": 156, "user": "515bbcd9e4b0388ca8ca1521"}, {"code": "(fn [key items] (reduce #(assoc %1 %2 key) nil items))", "problem": 156, "user": "522635c0e4b06a1ecd0c4e7e"}, {"code": "(fn [default s]\n    (loop [s s result {}]\n      (if (empty? s)\n        result\n        (recur (rest s) (conj result [( first s) default])))))", "problem": 156, "user": "52a7634ae4b0c58976d9ac16"}, {"code": "(fn [x v] (zipmap v (repeat (count v) x)))", "problem": 156, "user": "52c6f6dee4b0c2d177d62118"}, {"code": "(fn [v ks] (into {} (map #(vector % v) ks)))", "problem": 156, "user": "52c5c1c8e4b0c2d177d620fc"}, {"code": "(fn [v keys] (reduce #(assoc %1 %2 v) {} keys))", "problem": 156, "user": "52c1ede2e4b07a9af579236d"}, {"code": "(fn [v ks]\n   (reduce #(assoc %1 %2 v) {} ks))", "problem": 156, "user": "5215661be4b02f6d8ea676c7"}, {"code": "(fn [default keys] (zipmap keys (repeat (count keys) default)))", "problem": 156, "user": "4f03e486535dcb61093f6b78"}, {"code": "(fn [v keys] (into {} (map (fn [x] [x v]) keys)))", "problem": 156, "user": "5294e44de4b02ebb4ef75016"}, {"code": "(fn [default v]\n  (into {} (for [s v] [s default])))", "problem": 156, "user": "527ce61de4b0757a1b171374"}, {"code": "(fn [v ks] (zipmap ks (repeat (count ks) v)))", "problem": 156, "user": "52777dc3e4b03e8d9a4a7508"}, {"code": "(fn [v ks] (apply hash-map (mapcat #(list % v) ks)))", "problem": 156, "user": "52be58d7e4b07a9af579231d"}, {"code": "(fn [v s]\n  (reduce #(assoc %1 %2 v) {} s))", "problem": 156, "user": "52c884a2e4b0c2d177d62136"}, {"code": "(fn [v ks] (apply hash-map (interleave ks (repeat v))))", "problem": 156, "user": "52c804dee4b0c2d177d6212b"}, {"code": "#(apply hash-map (concat (interpose % %2) [%]))", "problem": 156, "user": "52c6a0abe4b0c2d177d62111"}, {"code": "(fn solution [init-val keys-list]\n    (zipmap keys-list (repeat (count keys-list) init-val))\n  )", "problem": 156, "user": "5226f8e9e4b04e78ff2e199a"}, {"code": "(fn [default keys]\n  (reduce (fn [m k] (conj m (hash-map k default))) {} keys))", "problem": 156, "user": "52c2ff59e4b07a9af5792389"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4dbf7a31535d020aff1edf75"}, {"code": "#(reduce \n  (fn [res elem]\n    (assoc res elem %1))\n  (hash-map) %2)", "problem": 156, "user": "52c2106fe4b07a9af5792374"}, {"code": "#(apply hash-map (interleave %2(repeat %1)))", "problem": 156, "user": "52c4fe42e4b0c2d177d620e9"}, {"code": "(fn [k col] (apply merge (map #(identity {% k}) col)))", "problem": 156, "user": "52c1bd29e4b07a9af579236a"}, {"code": "(fn [elt coll]\n  (apply hash-map (interleave coll (repeat (count coll) elt)))\n  )", "problem": 156, "user": "526698c9e4b03e8d9a4a7144"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "52cc09c1e4b07d0d72b27356"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "528652fbe4b0239c8a67ae14"}, {"code": "#(reduce (fn [mp elem] (conj mp (conj [] elem %1))) {} %2)", "problem": 156, "user": "52cc85abe4b07d0d72b27367"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4f4fac2ae4b03ad3f0c10ce5"}, {"code": "(fn [value keys] (apply hash-map (mapcat #(vector % value) keys)))", "problem": 156, "user": "50a635bbe4b0aa96157e2621"}, {"code": "#(apply sorted-map (interleave %2 (repeat %1)))", "problem": 156, "user": "5291ede5e4b0239c8a67af1e"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "52c672e2e4b0c2d177d6210e"}, {"code": "(fn [default coll](reduce #(assoc %1 %2 default) {} coll))", "problem": 156, "user": "52c0b2b9e4b07a9af5792353"}, {"code": "(fn [default ks]\n  (reduce (fn [map key] (merge map {key default})) {} ks))", "problem": 156, "user": "4f03641a535dcb61093f6a9b"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "52c73194e4b0c2d177d6211e"}, {"code": "(fn [default keylist]\n  (apply hash-map (interleave keylist (repeat default))))", "problem": 156, "user": "52cca65be4b07d0d72b2736b"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "52cd093fe4b07d0d72b27376"}, {"code": "(fn [d ks] (zipmap ks (repeat d)))", "problem": 156, "user": "4ebe766d535dfed6da9c6d94"}, {"code": "(fn m [e l] (apply merge (map #(hash-map % e) l)))", "problem": 156, "user": "52828298e4b0757a1b17145b"}, {"code": "(fn [x y] (zipmap y (cycle [x])))", "problem": 156, "user": "52cdc676e4b07d0d72b2737f"}, {"code": "(fn [d c] (zipmap c (repeat d)))", "problem": 156, "user": "52b5137de4b0c58976d9ad36"}, {"code": "(fn [d s] (reduce #(assoc %1 %2 d) {} s))", "problem": 156, "user": "52ce2aace4b07d0d72b2738b"}, {"code": "(fn [n l] (apply merge (map #(hash-map % n) l)))", "problem": 156, "user": "52c49401e4b0c2d177d620de"}, {"code": "#(reduce (fn [m, y] (assoc m y %1)) {} %2 )", "problem": 156, "user": "52ca720fe4b071a8d36bd3e2"}, {"code": "#(\n  zipmap %2 (repeat %1)\n  )", "problem": 156, "user": "5094057fe4b097f48cc38593"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "52c8a814e4b0c2d177d62138"}, {"code": "(fn [v s] (reduce (fn [m k] (assoc m k v)) {} s))", "problem": 156, "user": "52caeb25e4b071a8d36bd3e7"}, {"code": "(fn [x y] (into {}\n                (map #(hash-map % x) y)))", "problem": 156, "user": "52ce8648e4b07d0d72b27390"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4e7db3b4535db169f9c796e1"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "523089f8e4b0035e815da388"}, {"code": "(fn [de ma] (apply assoc {} (interleave ma (take (count ma) (repeat de)))))", "problem": 156, "user": "52bf0116e4b07a9af5792328"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "528a8151e4b0239c8a67ae7a"}, {"code": "(fn [default s]\n  (if (seq? default)\n    (zipmap s default)\n    (recur (take (count s) (repeat default)) s)))", "problem": 156, "user": "52ce4cafe4b07d0d72b2738e"}, {"code": "(fn [x y] \n  (loop [map {} keys (reverse y)] \n\t(if (empty? keys)\n\t      map \n\t      (recur (conj map {(first keys) x}) (rest keys))\n\t      ) \n   )\n  )", "problem": 156, "user": "52cc7c40e4b07d0d72b27364"}, {"code": "(fn [v kks]\n  (loop [coll kks, result {}]\n    (if (empty? coll)\n      result\n      (let [k (first coll)]\n        (recur (rest coll) (assoc result k v))))))", "problem": 156, "user": "52cf084ce4b07d0d72b27399"}, {"code": "(fn [v ks]\n   (reduce (fn [rs k] (conj {k v} rs)) {} ks))", "problem": 156, "user": "52d17182e4b0d9f9285948dd"}, {"code": "(fn [k c]\n        (zipmap c\n             (take (count c) (cycle [k]))))", "problem": 156, "user": "52d0fadce4b07d0d72b273c0"}, {"code": "(fn [dv keys]\n  (into {}\n    (for [k keys] [k dv])))", "problem": 156, "user": "527cd633e4b0757a1b17136f"}, {"code": "(fn [x y] (zipmap y (repeat (count y) x)) )", "problem": 156, "user": "52d2b85ce4b099d49816f0af"}, {"code": "(fn [v k] (zipmap k (iterate identity v)))", "problem": 156, "user": "52c1f404e4b07a9af5792370"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "52d2e54ae4b099d49816f0b9"}, {"code": "#(apply assoc {} (interleave %2 (repeat %1)))", "problem": 156, "user": "52b35a6ee4b0c58976d9ad07"}, {"code": "(fn [default coll] (let [result (map  #(let [a %1]{ a default}) coll)] (into {} result)))", "problem": 156, "user": "52d36f60e4b099d49816f0c2"}, {"code": "(fn create-map [k v] (into {} (for [x v :let[ret-map {x k}]] ret-map)))", "problem": 156, "user": "52c00e4fe4b07a9af5792342"}, {"code": "#(apply merge (map (fn [k] {k %}) %2))", "problem": 156, "user": "51b41150e4b0f094dd986fac"}, {"code": "(fn [default ks] (zipmap ks (repeat default)))", "problem": 156, "user": "52d3f666e4b09f7907dd1327"}, {"code": "(fn [v ks] (apply hash-map (apply concat (for [k ks] [k v]))))", "problem": 156, "user": "4ed45563535d10e5ff6f52c9"}, {"code": "(fn [d v] (zipmap v (repeat d)))", "problem": 156, "user": "4f95900ce4b0dcca54ed6cd3"}, {"code": "#(reduce (fn [m k] (conj m [k %1])) {} %2)", "problem": 156, "user": "52c8758be4b0c2d177d62135"}, {"code": "#(into {} (map (fn [e] (hash-map e %1)) %2))", "problem": 156, "user": "52cb94e5e4b07d0d72b2734e"}, {"code": "#(loop [m {}, s %2] \n   (if (empty? s)\n     m\n     (recur (conj m [(first s) %1]) (rest s))))", "problem": 156, "user": "52d340ebe4b099d49816f0c1"}, {"code": "(fn default-map\n  [default hashmap]\n  (apply hash-map (interleave hashmap (repeat default))))", "problem": 156, "user": "52d39acce4b099d49816f0c7"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "52cd1ed0e4b07d0d72b27377"}, {"code": "(fn [v m] (reduce #(assoc % %2 v) {} m))", "problem": 156, "user": "52d02380e4b07d0d72b273b7"}, {"code": "(fn [d k]\n  (loop [d d k (reverse k) m {}]\n    (cond (empty? k) m\n          :else (recur d (rest k) (assoc m (first k) d)))))", "problem": 156, "user": "51e2ee61e4b0c611d6113e3a"}, {"code": "#(into {} (map (fn [k] {k %1}) %2))", "problem": 156, "user": "52d49445e4b09f7907dd1332"}, {"code": "(fn mapper [thing coll]\n  (apply merge (for [x (list thing) y coll] {y x})))", "problem": 156, "user": "52cefb7ee4b07d0d72b27397"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "52cdec62e4b07d0d72b27382"}, {"code": "(fn r [d m] \n   (if (empty? m)\n     {}\n     (merge {(first m) d} (r d (rest m)))))", "problem": 156, "user": "525cc137e4b0cb4875a45d46"}, {"code": "(fn [defval keys]\n  (reduce (fn [m k] (assoc m k defval))\n          {}\n          keys))", "problem": 156, "user": "52b94e26e4b07a9af57922b9"}, {"code": "(fn [v ks] (zipmap ks (repeat v)))", "problem": 156, "user": "52d532a3e4b09f7907dd133e"}, {"code": "(fn map-defaults [default-value kz]\n  (let [f (first kz)]\n    (if (= 1 (count kz))\n      {f default-value}\n      (conj (map-defaults default-value (rest kz))\n         {f default-value}))))", "problem": 156, "user": "52d6889ae4b09f7907dd1361"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "52d10680e4b07d0d72b273c3"}, {"code": "(fn [z n] (reduce (fn [x y] (conj x [y z])) {} n))", "problem": 156, "user": "52d4acc8e4b09f7907dd1333"}, {"code": "(fn [d m] (apply merge (map #(hash-map % d) m)))", "problem": 156, "user": "52d66152e4b09f7907dd1357"}, {"code": "(fn [default keys]\n  (apply hash-map (reduce #(conj %1 %2 default) [] keys)))", "problem": 156, "user": "4f8c6bf6e4b02e764a0a519b"}, {"code": "(fn [x s] (apply array-map (interleave s (repeat x))))", "problem": 156, "user": "4df9c598535d04ed9115e77a"}, {"code": "(fn [default all-keys]\n  (reduce #(conj %1 {%2 default}) {} all-keys))", "problem": 156, "user": "52af7a5ce4b0c58976d9acbd"}, {"code": "(fn [v m] (reduce #(assoc % %2 v) {} m))", "problem": 156, "user": "52d7f7efe4b09f7907dd1380"}, {"code": "(fn [defval someseq]\n  (zipmap (reverse someseq) (repeat (count someseq) defval)))", "problem": 156, "user": "4eee3e6a535d93acb0a668c3"}, {"code": ";#(zipmap %2 (repeat (count %2) %1))\n\n#(zipmap %2 (repeat %1))", "problem": 156, "user": "52d469c8e4b09f7907dd1330"}, {"code": "(fn [def-val keys-col]\n  (reduce (fn [result k]\n          (assoc result k def-val)) {} keys-col))", "problem": 156, "user": "51f8e057e4b09be9c177e53d"}, {"code": "(fn [value mapkeys] \n  (loop [keysleft mapkeys\n         themap {}]\n    (if (= 0 (count keysleft))\n      themap\n      (recur (rest keysleft) (assoc themap (first keysleft) value)))))", "problem": 156, "user": "52daf558e4b09f7907dd13c1"}, {"code": "#(into {} (for [k %2] [k %]))", "problem": 156, "user": "51d58468e4b01da06753aa90"}, {"code": "(fn [x key-seq]\n  (reduce #(assoc %1 %2 x) {} key-seq))", "problem": 156, "user": "52cca96ae4b07d0d72b2736e"}, {"code": "(fn [value keyList] (zipmap keyList (repeat value)))", "problem": 156, "user": "51ee669ce4b09915f9b23c03"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "52cdec6ce4b07d0d72b27383"}, {"code": "(fn [v m] (zipmap m (repeat v)))", "problem": 156, "user": "51910da7e4b0f8ef0be96bf9"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "526a3412e4b03e8d9a4a721e"}, {"code": "(fn [d s] (zipmap s (repeat d)))", "problem": 156, "user": "4ee75ec2535d93acb0a66867"}, {"code": "(fn [n ks] (zipmap ks (repeat (count ks) n)))", "problem": 156, "user": "52cdb7efe4b07d0d72b2737c"}, {"code": "(fn [v ks]\n  (into {} (map #(vector % v) ks)))", "problem": 156, "user": "52cec622e4b07d0d72b27392"}, {"code": "(fn [v s]\n  (zipmap s (repeat v)))", "problem": 156, "user": "52dde81fe4b09f7907dd13eb"}, {"code": "(fn map-default [default keys]\n  (reduce #(assoc % %2 default) {} keys))", "problem": 156, "user": "52dd6cc8e4b09f7907dd13e2"}, {"code": "(fn f [v ks]\n  (loop [res {}\n         n (first ks)\n         r (rest ks)]\n    (if-not (nil? n)\n      (recur (assoc res n v) (first r) (rest r))\n      res)))", "problem": 156, "user": "52d7b0ade4b09f7907dd137c"}, {"code": "(fn stuff [v l]\n  (if (> (count l) 0)\n    (conj (stuff v (rest l)) [(first l) v])\n    {}\n    )\n  )", "problem": 156, "user": "52d92f13e4b09f7907dd13a2"}, {"code": "(fn [default col]\n  (apply hash-map (interleave col (repeat default)))\n  )", "problem": 156, "user": "5204f2b1e4b0bf4f1882c7f5"}, {"code": "(fn [default values]\n\t(loop [values values\n           result {}]\n      \t(if (empty? values)\n          \tresult\n          \t(recur (rest values) (assoc result (first values) default))\n      \t)\n    )\n)", "problem": 156, "user": "521b481de4b0c4ef0be83037"}, {"code": "(fn draw [default ks] \n  (if (empty? ks)\n    nil\n    (let [[x & xs] ks]\n      (conj {x default} (draw default xs)))))", "problem": 156, "user": "52deb735e4b09f7907dd13f7"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "52d9aaa1e4b09f7907dd13ae"}, {"code": "(fn [d v] (zipmap v (repeat d)))", "problem": 156, "user": "52d5bee0e4b09f7907dd1344"}, {"code": "(fn [dv ks] (zipmap ks (repeat (count ks) dv)))", "problem": 156, "user": "4e1e1576535d04ed9115e806"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4fb99483e4b081705acca2da"}, {"code": "(fn [default ikeys] (into {} (for [k ikeys] [k default])))", "problem": 156, "user": "5271605ae4b03e8d9a4a73ed"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "5224cf82e4b01819a2de42ef"}, {"code": "(fn [d xs]\n  (reduce #(assoc %1 %2 d) {} xs)\n  )", "problem": 156, "user": "52ce5056e4b07d0d72b2738f"}, {"code": "#(into {} (for [x %2] [x %1]))", "problem": 156, "user": "52df232fe4b09f7907dd13fc"}, {"code": "(fn [d ks] (apply hash-map (reduce #(cons %2 (cons d %1)) [] ks)))", "problem": 156, "user": "52dfc89be4b09f7907dd1405"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "51e3a549e4b0c611d6113e47"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "52d7a930e4b09f7907dd1379"}, {"code": "(fn [v ks]\n  (reduce #(assoc %1 %2 v) {} ks))", "problem": 156, "user": "518a59b3e4b02bf06f6bbb4b"}, {"code": "#(reduce (fn [m x] (assoc m x %1)) {} %2)", "problem": 156, "user": "52d96f7ce4b09f7907dd13a8"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "52e0e646e4b09f7907dd1416"}, {"code": "(fn [default keys] (zipmap keys (repeat default)))", "problem": 156, "user": "4fc34144e4b081705acca33c"}, {"code": "(fn [v a]\n  (reduce (fn [x y] (conj x [y v])) {} a))", "problem": 156, "user": "52c8a8b9e4b0c2d177d62139"}, {"code": "(fn [default ks] (zipmap ks (repeat default)))", "problem": 156, "user": "52d83c2ce4b09f7907dd138d"}, {"code": "(fn [n lst] (apply merge (map #(hash-map % n) lst)))", "problem": 156, "user": "4ee8092f535d93acb0a66875"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "52e356f8e4b09f7907dd1442"}, {"code": "(fn [v k]\n  (reduce #(conj % [%2 v]) {} k))", "problem": 156, "user": "52c7f036e4b0c2d177d62126"}, {"code": "#(into '{} (map hash-map %2 (repeat %1)))", "problem": 156, "user": "52d809bde4b09f7907dd1384"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "52e48632e4b09f7907dd1450"}, {"code": "(fn [v ks]\n   (loop [m {}\n          kks ks]\n     (if (empty? kks)\n       m\n       (recur (assoc m (first kks) v) (rest kks)))))", "problem": 156, "user": "52e41c22e4b09f7907dd144b"}, {"code": "(fn [default-value coll]\n  (into {} (map (fn [e] [e default-value]) coll)))", "problem": 156, "user": "50c9cdfde4b0bed41a12299d"}, {"code": "#(reduce merge (map (fn [k] {k %1}) %2))", "problem": 156, "user": "511b900ae4b00c2a1fa7ff6a"}, {"code": "(fn [x y] ({0 {:a 0 :b 0 :c 0} \"x\" {1 \"x\" 2 \"x\" 3 \"x\"} [:a :b] {:foo [:a :b] :bar [:a :b]}} x))", "problem": 156, "user": "52d45010e4b09f7907dd132d"}, {"code": "(fn [x col] (reduce #(conj %1 {%2 x}) {} col))", "problem": 156, "user": "52dad8bde4b09f7907dd13be"}, {"code": "(fn [default key_list] (apply merge (map #(hash-map % default) key_list)))", "problem": 156, "user": "52e32906e4b09f7907dd143d"}, {"code": "(fn mappel [x y] (if (= (count y) 0) {} (assoc (mappel x (rest y)) (first y) x)))", "problem": 156, "user": "52e253fce4b09f7907dd1432"}, {"code": "#(apply merge(for [x %2] (assoc {} x %1)))", "problem": 156, "user": "52e3912ee4b09f7907dd1446"}, {"code": "#(apply hash-map(interleave %2 (repeat %1)))", "problem": 156, "user": "52e68e61e4b09f7907dd1479"}, {"code": "(fn [a b] (reduce #(assoc %1 %2 a) {} b))", "problem": 156, "user": "52d1e364e4b0d9f9285948e7"}, {"code": "#(apply hash-map (mapcat (fn [x] [x %1]) %2 ))", "problem": 156, "user": "52dc2bc8e4b09f7907dd13ca"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "52e702dce4b09f7907dd147f"}, {"code": "(fn [d stuff]\n  (reduce\n   (fn [m key] (conj m {key d}) )\n   {}\n   stuff))", "problem": 156, "user": "4e6cf2be535de274dd8d818a"}, {"code": "#(into {} (for [x %2] {x %}))", "problem": 156, "user": "52e54040e4b09f7907dd145c"}, {"code": "(fn [v m] (reduce #(assoc %1 %2 v) {} m))", "problem": 156, "user": "52ca9513e4b071a8d36bd3e4"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "51f2a491e4b0210f90e74553"}, {"code": "(fn [n coll] (zipmap coll (repeat n)))", "problem": 156, "user": "52e184ebe4b09f7907dd1426"}, {"code": "(fn [val col]\n  (into {} (for [x col] {x val})))", "problem": 156, "user": "4ea8570f535d7eef308072f8"}, {"code": "#(reduce (fn [x y] (assoc x y %1)) {} %2)", "problem": 156, "user": "52e5da25e4b09f7907dd1467"}, {"code": "(fn m-defaults [d ks]\n  (zipmap ks (repeat d)))", "problem": 156, "user": "521d709ae4b050d5da0427ef"}, {"code": "#(zipmap %2 (vec (repeat (count %2) %1)) )", "problem": 156, "user": "51f81925e4b09be9c177e526"}, {"code": "#(loop [d %1 l %2 r {}] (if (= l []) r (recur d (rest l) (assoc r (first l) d))) )", "problem": 156, "user": "52dbfe84e4b09f7907dd13c9"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "51ac7e9be4b09397d510976f"}, {"code": "(fn makeMap [default sett] (if (= (count sett) 0) {} (assoc (makeMap default (drop 1 sett)) (first sett) default)))", "problem": 156, "user": "52ea19ace4b09f7907dd14b7"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "52bdd135e4b07a9af579230a"}, {"code": "(fn a [default ks]\n          (reduce conj (map #(hash-map %1 default) ks)))", "problem": 156, "user": "50b09833e4b009df37c708bd"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "529dfc6de4b04e0c58e87b8a"}, {"code": "(fn [v kxs] (zipmap kxs (repeat (count kxs) v)))", "problem": 156, "user": "52ea764ee4b09f7907dd14be"}, {"code": "(fn [v ks] (reduce merge (map (fn [k] (hash-map k v)) ks)))", "problem": 156, "user": "52e949a8e4b09f7907dd14aa"}, {"code": "#(apply hash-map (interleave %2 (repeat (count %2) %)))", "problem": 156, "user": "529223cbe4b0239c8a67af26"}, {"code": "(fn [k v]  (reduce conj (reverse (map (fn [b] {b k}) v))))", "problem": 156, "user": "52e73b36e4b09f7907dd1483"}, {"code": "(fn [default my-keys]\n  (reduce #(conj %1 [%2 default]) {} my-keys))", "problem": 156, "user": "525d490ae4b0cb4875a45d70"}, {"code": "(fn [d k] (into {} (map (fn [e] {e d}) k)))", "problem": 156, "user": "52e814fee4b09f7907dd1493"}, {"code": "#(apply merge (map hash-map %2 (repeat %)))", "problem": 156, "user": "52e75667e4b09f7907dd1485"}, {"code": "(fn [default-val the-keys] (reduce #(assoc %1 %2 default-val) {} the-keys))", "problem": 156, "user": "52dc55e2e4b09f7907dd13cd"}, {"code": "(fn [def_val lst] (apply merge (map #(hash-map % def_val) lst)))", "problem": 156, "user": "52570aeae4b0541d1855ba42"}, {"code": "(fn [num aseq]\n  (loop [amap {}\n         items aseq]\n    (if (seq items)\n      (recur (assoc amap (first items) num) (rest items))\n      amap)))", "problem": 156, "user": "52e6aea1e4b09f7907dd147c"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "52e276d9e4b09f7907dd1436"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "5001ce99e4b0678c553fc41f"}, {"code": "(fn [d coll] (apply hash-map (interleave coll (repeat d))))", "problem": 156, "user": "52d00832e4b07d0d72b273b4"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "52e59ca5e4b09f7907dd1464"}, {"code": "(fn [v ks] \n  (let [vals (repeat (count ks) v)\n        recs (interleave ks vals)]\n        (apply hash-map recs)\n    ))", "problem": 156, "user": "52430d3ce4b076204b44faa5"}, {"code": "#(apply conj (map hash-map %2 (repeat (count %2) %1)))", "problem": 156, "user": "52efd3d9e4b05e3f0be25ed4"}, {"code": "(fn [d k] (into {} (for [i k] [i d])))", "problem": 156, "user": "52f09d3ce4b05e3f0be25ee3"}, {"code": "(fn [default keys]\n  (loop [ks keys mp {}]\n    (if-not (empty? ks)\n      (recur (rest ks) (assoc mp (first ks) default))\n      mp)))", "problem": 156, "user": "52d660eae4b09f7907dd1356"}, {"code": "(fn [df v]\n  (reduce (fn [om x] (assoc om x df)) {} v))", "problem": 156, "user": "52e44a22e4b09f7907dd144e"}, {"code": "#(into {} (for [x %2] (assoc {} x %)))", "problem": 156, "user": "527d59f9e4b0757a1b171382"}, {"code": "(fn[d,x](apply merge ( map #(hash-map %  d) x)))", "problem": 156, "user": "52d66ca0e4b09f7907dd135c"}, {"code": "(fn [x y] (zipmap y (repeat (count y) x)))", "problem": 156, "user": "52f32c24e4b05e3f0be25f0d"}, {"code": "(fn [value m_l]\n      (apply hash-map (apply vector (interleave m_l (take (count m_l) (cycle (vector value)))))))", "problem": 156, "user": "52a5a8ebe4b0c58976d9abed"}, {"code": "(fn [default coll] (apply merge (map #(hash-map % default) coll)))", "problem": 156, "user": "522404d8e4b01819a2de42c0"}, {"code": "(fn [v ks] (zipmap ks (repeat (count ks) v)))", "problem": 156, "user": "52ebdc9be4b0705949c44444"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "52bacfa8e4b07a9af57922d6"}, {"code": "(fn [defval mydata] (zipmap mydata (repeat (count mydata) defval)))", "problem": 156, "user": "52ecd34ee4b0705949c44457"}, {"code": "(fn [default-value map-keys]\n      (reduce (fn [final-map map-key]\n               (assoc final-map map-key default-value)) {} map-keys))", "problem": 156, "user": "4feaa579e4b0140c20fb9c0b"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "4ef9c8f9535dced4c769f26b"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "52f4fae4e4b05e3f0be25f27"}, {"code": "#(into {} (for [y %2]\n               [y %]))", "problem": 156, "user": "52d838bee4b09f7907dd138b"}, {"code": "#(into {} (map hash-map %2 (repeat %)))", "problem": 156, "user": "52f5f8b4e4b09b582c12c9cc"}, {"code": "#(loop [d %1 xs %2 m {}] (if (empty? xs) (into {} (reverse m)) (recur d (rest xs) (conj m [(first xs) d]))))", "problem": 156, "user": "52f89125e4b047fd55836fd4"}, {"code": "#(into {} (map vector %2 (repeat (count %2) % )))", "problem": 156, "user": "52f8b2a2e4b047fd55836fda"}, {"code": "(fn [n coll]\n  (into {} (map (fn [x] [x n]) coll)))", "problem": 156, "user": "51ab4082e4b04e3dc0c27b31"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4f1c9652535d64f603146483"}, {"code": "(fn [default items] (into {} (map #(hash-map %2 %) (repeat default) items)))", "problem": 156, "user": "52efc98de4b05e3f0be25ed2"}, {"code": "(fn [x y] (into {} (for [i y] [i x])))", "problem": 156, "user": "52f9ce6de4b047fd55836ff0"}, {"code": "(fn [v s](into {} ( for[ x s ] [x v])))", "problem": 156, "user": "52f3124ee4b05e3f0be25f0a"}, {"code": "(fn [value elements]\n   (apply hash-map (interleave elements (repeat value))))", "problem": 156, "user": "529c6995e4b04e0c58e87b61"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "52e980b3e4b09f7907dd14af"}, {"code": "(fn [d keyz] (zipmap keyz (repeat (count keyz) d)))", "problem": 156, "user": "52f182d8e4b05e3f0be25eed"}, {"code": "(fn map-default [default vect]\n  (if\n    (empty? vect)\n    {}\n    (conj  {(first vect) default}\n          (map-default default (rest vect)))))", "problem": 156, "user": "52f818a6e4b047fd55836fcc"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "529b44afe4b02ebb4ef7509d"}, {"code": "#(into {} (map vector %2 (repeat %1)))", "problem": 156, "user": "52fb903ee4b047fd5583700b"}, {"code": "#(zipmap %2 (repeat (count %2) %))", "problem": 156, "user": "52c60945e4b0c2d177d62108"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "52e3e6a8e4b09f7907dd1448"}, {"code": "(fn [default keyses]\n  (reduce (fn [x y]\n            (conj x {y default})\n           )\n          {}\n          keyses))", "problem": 156, "user": "51b89503e4b050a1176cd69a"}, {"code": "(fn [dft mp] (into {} (for [k mp] [k dft])))", "problem": 156, "user": "52f3b288e4b05e3f0be25f16"}, {"code": "(fn [x y] (apply array-map (interleave y (replicate (count y) x))))", "problem": 156, "user": "52faec2ee4b047fd55837004"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "52fd8de1e4b047fd5583702e"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "52e32d55e4b09f7907dd143e"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "52fcfeeee4b047fd55837027"}, {"code": "(fn\n  [v coll]\n  (loop [s coll\n         ans {}]\n    (let [[h & t] s\n          ans (conj ans {h v})]\n      (if (empty? t)\n        ans\n        (recur t ans)))))", "problem": 156, "user": "52fdb82ae4b047fd55837031"}, {"code": "#(into {} (map vector %2 (repeat %)))", "problem": 156, "user": "52d95491e4b09f7907dd13a4"}, {"code": "(fn [v m] (zipmap m (repeat v)))", "problem": 156, "user": "52f762ece4b047fd55836fc2"}, {"code": "(fn [default ks]\n  (reduce #(assoc %1 %2 default) {} ks))", "problem": 156, "user": "51a3b135e4b0e77c4ca60bf6"}, {"code": "(fn make-map-with-default-values\n  [default-value\n   sequ]\n  (if (empty? sequ)\n    {}\n    (assoc (make-map-with-default-values default-value (rest sequ))\n      \t\t(first sequ) default-value\n     )\n   )\n)", "problem": 156, "user": "52f8b86de4b047fd55836fdb"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "5300158ae4b0d8b024fd370f"}, {"code": "#(reduce (fn [a b] (into a (hash-map b %))) (hash-map (first %2) %) %2)", "problem": 156, "user": "52eb400ee4b0705949c4443b"}, {"code": "(fn [v map] (apply merge (for [x map]\n                              (hash-map x v))))", "problem": 156, "user": "5300aa1de4b0d8b024fd3710"}, {"code": "(fn [default keylst] (apply hash-map \n                            (concat (interpose default keylst) (list default))))", "problem": 156, "user": "52f2b450e4b05e3f0be25efd"}, {"code": "(fn [x y] (loop [y y z {}] (if (= (count y) 0) z (recur (rest y) (conj z {(first y) x})))))", "problem": 156, "user": "53012382e4b0d8b024fd3718"}, {"code": "#(apply assoc {} (interleave %2 (repeat %)))", "problem": 156, "user": "512587ade4b05d10e3e395fb"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "52f381f3e4b05e3f0be25f10"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "5176afd2e4b085adf681d889"}, {"code": "#(into {} (for[x %2] {x %}))", "problem": 156, "user": "52fd3da0e4b047fd5583702a"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "5302b580e4b0d8b024fd3732"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "528c51a5e4b0239c8a67aeb4"}, {"code": "(fn [v ks] (zipmap ks (repeat (count ks) v)))", "problem": 156, "user": "53028354e4b0d8b024fd372b"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "5300b750e4b0d8b024fd3711"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "5303c543e4b0d8b024fd3749"}, {"code": "(fn [defval init-keys]\n  (loop [res {}, key init-keys]\n    (if (empty? key)\n      res\n      (recur \n        (assoc res (first key) defval)\n        (rest key))\n      )))", "problem": 156, "user": "518c1079e4b0f028e99addf8"}, {"code": "(fn [v ks] (zipmap ks (repeat (count ks) v)))", "problem": 156, "user": "52fc2892e4b047fd55837014"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "52fa4f48e4b047fd55836ff7"}, {"code": "(fn [v, l] (into {} (map #(hash-map % v) l)))", "problem": 156, "user": "52f7ac81e4b047fd55836fc6"}, {"code": "(fn foo [v ks]\n  (zipmap ks (repeat v)))", "problem": 156, "user": "52f8f4d1e4b047fd55836fde"}, {"code": "(fn __ [val coll]\n  (apply hash-map (interleave coll (repeat (count coll) val))))", "problem": 156, "user": "52463059e4b09dbe66b56198"}, {"code": "#(zipmap (seq %2)(repeat %1))", "problem": 156, "user": "53029281e4b0d8b024fd372e"}, {"code": "(fn [defa keys0] (into {} (vec (map #(conj [%] defa) keys0))))", "problem": 156, "user": "52f90613e4b047fd55836fe1"}, {"code": "(fn [default keys] (reduce merge (map #(hash-map % default) keys)))", "problem": 156, "user": "52c3a453e4b0c2d177d620c7"}, {"code": "(fn [value, key-sequence]\n  (let [items (map vector key-sequence (repeat (count key-sequence) value))]\n    (apply hash-map (reduce #(into %1 %2) items))\n  )\n)", "problem": 156, "user": "52b091b4e4b0c58976d9accc"}, {"code": "(fn [default-value keys] (apply assoc {} (mapcat #(vector % default-value) keys)))", "problem": 156, "user": "52f10094e4b05e3f0be25ee8"}, {"code": "#(into {} (map (fn [key] [key %1]) %2))", "problem": 156, "user": "52d2e2a9e4b099d49816f0b8"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "52fe3a9de4b047fd55837039"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "5301157ae4b0d8b024fd3717"}, {"code": "(fn[y IN](into {} ((fn[y IN](for[x IN] [x y])) y IN )))", "problem": 156, "user": "5302d79ce4b0d8b024fd3736"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "52ffb7f2e4b0d8b024fd370b"}, {"code": "#(into {} (for [e %2] [e %1]))", "problem": 156, "user": "52ee0de4e4b05e3f0be25ec1"}, {"code": "(fn [x c] (into {} (map #(vector % x) c)))", "problem": 156, "user": "5308dd20e4b02e82168697b3"}, {"code": "(fn [a b] (zipmap b (repeat a)))", "problem": 156, "user": "52e683c0e4b09f7907dd1477"}, {"code": "(fn [value the-keys]\n  (reduce #(assoc %1 %2 value) {} the-keys))", "problem": 156, "user": "53070615e4b02e821686979e"}, {"code": "(fn [defv ks] \n  (zipmap ks (repeat defv)))", "problem": 156, "user": "53034738e4b0d8b024fd373e"}, {"code": "#(apply hash-map (apply concat(map list %2 (repeat %1))))", "problem": 156, "user": "5307e4ece4b02e82168697a9"}, {"code": "#(loop[x %2\n       y %1\n       result {}]\n   (if (empty? x)\n     result\n   \t (recur (rest x) y (conj result (hash-map (first x) y)))))", "problem": 156, "user": "53010e8ee4b0d8b024fd3716"}, {"code": "(fn [default l] (reduce (fn [x y] (assoc x y default)) {} l))", "problem": 156, "user": "52d6590ee4b09f7907dd1352"}, {"code": ";#(zipmap %2 (repeat (count %2) %1 ))\n#(zipmap %2 (repeat %1))", "problem": 156, "user": "52f426fce4b05e3f0be25f1e"}, {"code": "(fn generateAmapWIthDefaultValue[defaultValue theKeys]\n  (merge (zipmap theKeys (repeat defaultValue)){})\n  )", "problem": 156, "user": "5306bceee4b02e821686979b"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "510c01bae4b078ea7192110a"}, {"code": "#(apply (partial assoc {}) (interleave %2 (repeat %1)))", "problem": 156, "user": "52c45ac8e4b0c2d177d620d9"}, {"code": "#(zipmap %2 (iterate identity %1))", "problem": 156, "user": "530caf86e4b02e82168697df"}, {"code": "(fn [x m] (zipmap (reverse m) (for[i (range (count m))] x) ))", "problem": 156, "user": "52fc9b94e4b047fd5583701d"}, {"code": "(fn\n[default keylist]\n  (reduce\n    (fn\n      [kl k]\n      (merge kl (hash-map k default))\n     )\n     {}\n     keylist\n   )\n)", "problem": 156, "user": "530c462ae4b02e82168697d9"}, {"code": "(fn [k sq]\n  (let\n    [mm {}]\n    (loop\n      [s sq\n       m mm]\n      (if (= nil (first s))\n        m\n        (recur\n         (rest s)\n         (assoc m (first s) k))))))", "problem": 156, "user": "530d85dee4b08068f379eca8"}, {"code": "(fn [default s]\n  (loop [s s hmap (hash-map)]\n    (if (empty? s)\n      hmap\n      (recur (next s) (assoc hmap (first s) default)))))", "problem": 156, "user": "53098be4e4b02e82168697b7"}, {"code": "(fn [v coll]\n  (apply hash-map (interleave coll (take (count coll) (cycle [v])))))", "problem": 156, "user": "51e7abeae4b0a3e081b8cbee"}, {"code": "(fn mapdefault [default lst]\n  (cond (= (count lst) 1) {(first lst) default}\n    :else (conj {(first lst) default} (mapdefault default (rest lst)))))", "problem": 156, "user": "530cb5b8e4b02e82168697e0"}, {"code": "#(if (= :bar (second %2))\n  (hash-map (first %2) %1 (second %2) %1)\n  (hash-map (first %2) %1 (second %2) %1 (last %2) %1))", "problem": 156, "user": "52f97c6ae4b047fd55836fea"}, {"code": "#((fn [val sq mp] (if (= 1 (count sq)) (assoc mp (first sq) val) (recur val (next sq) (assoc mp (first sq) val)))) %1 %2 {})", "problem": 156, "user": "52e25beee4b09f7907dd1433"}, {"code": "(fn hey [x y] (if (empty? (rest y)) (hash-map (first y) x) (merge (hash-map (first y) x) (hey x (rest y)))))", "problem": 156, "user": "52e17e66e4b09f7907dd1423"}, {"code": "(fn [k v]\n  (loop [ls (into '() v)\n         result {}]\n    (if (empty? ls)\n      result\n      (recur (rest ls) (assoc result (first ls) k)))))", "problem": 156, "user": "530b9714e4b02e82168697cf"}, {"code": "(fn [default sequence](zipmap sequence (take (count sequence) (repeat default))))", "problem": 156, "user": "531081fee4b08068f379ecd4"}, {"code": "(fn [x coll] (apply merge (for [elem coll] { elem x })))", "problem": 156, "user": "5302b580e4b0d8b024fd3733"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "51583ee4e4b0a069fd272c72"}, {"code": "(fn defmap\n  ([default k] (defmap default k {}))\n  ([default k acc] \n    (if (empty? k)\n      acc\n      (defmap default (rest k) (assoc acc (first k) default)))))", "problem": 156, "user": "53110f32e4b08068f379ece4"}, {"code": "(fn [v k] (reduce #(assoc % %2 v) {} k))", "problem": 156, "user": "5301a13ae4b0d8b024fd371e"}, {"code": "(fn [df-val coll] (apply merge (for [the-key coll] {the-key df-val})))", "problem": 156, "user": "52fa8e32e4b047fd55836ffa"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "530ccb1de4b08068f379ec99"}, {"code": "(fn\n  [v s]\n  (apply merge (for [s1 s]\n    {s1 v})))", "problem": 156, "user": "52f3af46e4b05e3f0be25f14"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4ff4bed0e4b0678c553fc35f"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "530e9729e4b08068f379ecbc"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "530578ede4b0d8b024fd3760"}, {"code": "(fn [x y] (into {} (for [k y] [k x])))", "problem": 156, "user": "531488f3e4b08068f379ed16"}, {"code": "(fn [x keis] (loop [stuff keis result (hash-map)] (if (empty? stuff) result (recur (rest stuff) (conj result (hash-map (first stuff) x))))))", "problem": 156, "user": "5314318ee4b08068f379ed13"}, {"code": "(fn [default_value arr]\n(into {} (map (fn [arr_element] {arr_element default_value}) arr))\n  \n  )", "problem": 156, "user": "52f0f3e5e4b05e3f0be25ee7"}, {"code": "(fn [d ks]\n\t(into {} (map (fn [x] {x d} ) ks ) )\n  )", "problem": 156, "user": "52fba50ce4b047fd5583700d"}, {"code": "(fn [val keys] (reduce #(assoc %1 %2 val) {} keys))", "problem": 156, "user": "4eed26af535d93acb0a668bb"}, {"code": "(fn [default keylist]\n  (apply hash-map (interleave keylist\n               (take (count keylist) \n                     (cycle [default])))))", "problem": 156, "user": "5313a2bfe4b08068f379ed0b"}, {"code": "(fn t [v m] (reduce merge (for [k m] {k v})))", "problem": 156, "user": "5315b53ee4b08068f379ed31"}, {"code": "#(apply conj {} (map (fn [e] [e %1]) %2))", "problem": 156, "user": "5315a4f0e4b08068f379ed2e"}, {"code": ";; zipmap - Returns a map with the keys mapped to the corresponding vals.\n;; We get the keys from the second argument\n;; For each key we repeat the value, thus creating a sequence of equal length\n#(zipmap %2 (repeat %1))", "problem": 156, "user": "52d2f457e4b099d49816f0ba"}, {"code": "(fn mer [default keys-collection] \n  (if (empty? keys-collection) \n    {} \n    (merge (mer default (rest keys-collection)) {(first keys-collection) default})))", "problem": 156, "user": "5311b367e4b08068f379eced"}, {"code": "(fn [d v]\n  (loop [m {} i 0]\n    (if (< i (count v))\n      (recur (assoc m (get v i) d) (inc i))\n      m)))", "problem": 156, "user": "53183c38e4b08068f379ed6b"}, {"code": "(fn [default col](loop [ret {} bits (reverse col)](if (empty? bits) ret (recur (merge ret {(first bits) default}) (rest bits)))))", "problem": 156, "user": "523acf7be4b0aa37f082ed90"}, {"code": "(fn [d c]\n  (apply hash-map\n         (interleave c (repeat (count c) d))))", "problem": 156, "user": "531a3914e4b08068f379ed88"}, {"code": "(fn [x y] (reduce conj (map #(hash-map % x) y)))", "problem": 156, "user": "53150a4de4b08068f379ed22"}, {"code": "(fn [defaultVal ks]\n  (into {}\n        (for [k ks]\n          [k defaultVal])))", "problem": 156, "user": "4fc4f347e4b081705acca35d"}, {"code": "(fn [value a] (reduce #(assoc %1 %2 value) {} a) )", "problem": 156, "user": "4f320253e4b0d6649770a08d"}, {"code": "(fn [d k] (apply merge (map #(hash-map % d) k)))", "problem": 156, "user": "531c57ace4b08068f379ed9b"}, {"code": "(fn [def-val elems] (reduce #(conj %1 [%2 def-val]) {} elems))", "problem": 156, "user": "530394b4e4b0d8b024fd3743"}, {"code": "(fn [v ks] (reduce conj (map #(hash-map % v) ks)))", "problem": 156, "user": "52be0263e4b07a9af579230e"}, {"code": "(fn [x l] (reduce #(assoc % %2 x) {} l))", "problem": 156, "user": "52265e41e4b04e78ff2e1981"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "531bad96e4b08068f379ed93"}, {"code": "(fn [v ks] (zipmap ks (repeat (count ks) v)))", "problem": 156, "user": "4e9519b4535dbda64a6f6b2d"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4f6a2ff2e4b07046d9f4ef98"}, {"code": "(fn [v xs] \n         (into {} (map (fn [a b]\n                [a b])\n              xs\n              (repeat v))))", "problem": 156, "user": "4db58ccb535d87e67b28fe10"}, {"code": "(fn [d-val kys] (reduce #(conj %1 {%2 d-val}) {} kys))", "problem": 156, "user": "52dd4fb4e4b09f7907dd13df"}, {"code": "(fn [default keys] \n  (zipmap keys (repeat (count keys) default))\n)", "problem": 156, "user": "531ba143e4b08068f379ed91"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "531c7f0de4b08068f379eda4"}, {"code": "(fn[x s] \n  (reduce \n    (fn[m el] \n      (assoc m el x)) {} s))", "problem": 156, "user": "531dc21be4b08068f379edb1"}, {"code": "#(zipmap (reverse %2) (repeat %))", "problem": 156, "user": "531d36ace4b08068f379edad"}, {"code": "(fn [default-value key-names] (zipmap key-names (repeat (count key-names) default-value)))", "problem": 156, "user": "531dfaf5e4b08068f379edb3"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "531c0619e4b08068f379ed98"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "52335d7ce4b0f0b72fabf404"}, {"code": "(fn [value keys] (into {} (map (fn [x] {x value}) keys)))", "problem": 156, "user": "518bd05ee4b0f028e99addf2"}, {"code": "#(zipmap %2 (repeat (count %2) %))", "problem": 156, "user": "4edf5dc6535d10e5ff6f5340"}, {"code": "(fn [d k]\n  (zipmap k (repeat d)))", "problem": 156, "user": "4f9b3532e4b0dcca54ed6d13"}, {"code": "(fn [d,s] (reduce #(conj %1 {%2 d}) {} s))", "problem": 156, "user": "531f1e63e4b08068f379edc2"}, {"code": "(fn foobar [defaultValue keys] (zipmap keys (repeat (count keys) defaultValue)))", "problem": 156, "user": "530b8ce1e4b02e82168697cd"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "531ff852e4b08068f379edca"}, {"code": "(fn [d ks]\n  (reduce #(assoc % %2 d) {} ks))", "problem": 156, "user": "5310e7aee4b08068f379ecdc"}, {"code": "(fn f [d s]\n  (if (= s [])\n    {}\n    (assoc \n      (f d (rest s))\n      (first s) d )))", "problem": 156, "user": "531b8c27e4b08068f379ed90"}, {"code": "(fn [a b]\n  (loop [a a\n         b (seq b)\n         result {}]\n    (if-let [cur (first b)]\n      (recur a (next b) (conj result {cur a}))\n      result)))", "problem": 156, "user": "531e5c81e4b08068f379edba"}, {"code": "(fn [default ks] (zipmap ks (repeat default)))", "problem": 156, "user": "5085bfdae4b004985b776e53"}, {"code": "(fn [v k]\n (apply hash-map (interleave  k (repeat v))))", "problem": 156, "user": "4ff548dee4b0678c553fc368"}, {"code": "(fn [progress defval ks]\n\t  ;(println progress defval ks)\n\t  (if (not-empty ks)\n\t       (recur (assoc progress (first ks) defval) defval (rest ks) )\n\t       progress\n\t       \n\t   )\n\t) {}", "problem": 156, "user": "531cd41ee4b08068f379eda9"}, {"code": "(fn setDefs [d keys]\n   (loop [remainingKeys keys,\n          finalMap {}]\n     (if (empty? remainingKeys)\n       finalMap\n       (recur (rest remainingKeys) (assoc finalMap (first remainingKeys) d)))))", "problem": 156, "user": "53224d45e4b09d4e7a9b54c0"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4f68a9bbe4b07046d9f4ef79"}, {"code": "(fn [def-value key-seq] \t\n  (loop [res {} keys key-seq]\n    (if (empty? keys)\n      res\n      (recur\n       \t(assoc res (first keys) def-value)\n       \t(rest keys))\n      )))", "problem": 156, "user": "4e580746535d8a8b8723a28c"}, {"code": "(fn [d keys]\n   (reduce (fn [m k]\n             (assoc m k d)) \n           {} keys))", "problem": 156, "user": "4ff505c8e4b0678c553fc364"}, {"code": "#(zipmap %2 ( take (count %2) (repeat %1)) )", "problem": 156, "user": "531bfb69e4b08068f379ed97"}, {"code": "(fn [v kk]\n  (reduce #(assoc %1 %2 v) {} kk))", "problem": 156, "user": "532418f3e4b09d4e7a9b54d8"}, {"code": ";#(reduce (fn [xs x] (conj {x %} xs)) {} %2)\n#(zipmap %2 (repeat %))", "problem": 156, "user": "5323a414e4b09d4e7a9b54d1"}, {"code": "(fn [v m] (reduce (fn [acc el] (conj acc {el v}) ) {} m) )", "problem": 156, "user": "531f0a26e4b08068f379edbf"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "51dd876ce4b0c33a4e1da40a"}, {"code": "(fn [dv keys]\n  (loop [m {}\n         ks (seq keys)]\n    (if (and ks dv)\n      (recur(assoc m (first ks) dv) (next ks))\n      m)))", "problem": 156, "user": "53219cece4b09d4e7a9b54b7"}, {"code": "(fn  [v ks] (apply hash-map (interleave ks (repeat v))))", "problem": 156, "user": "52ccc2bde4b07d0d72b27371"}, {"code": "#(into{} (for [x %2] {x %}))", "problem": 156, "user": "5320bbcfe4b09d4e7a9b54a6"}, {"code": "(fn mapmaker [v coll]\n  (reduce conj {}\n          (map vector coll (cycle (list v)))))", "problem": 156, "user": "53213810e4b09d4e7a9b54b0"}, {"code": "(fn [x y] (into {} (for [index y]{index x})))", "problem": 156, "user": "529952a4e4b02ebb4ef75081"}, {"code": "(fn [default keys] (into {} (for [k keys] [k default])))", "problem": 156, "user": "532347dde4b09d4e7a9b54cc"}, {"code": "(fn [default keys]\n  (zipmap keys (repeat default)))", "problem": 156, "user": "518ee4f9e4b0cd6ff51676a5"}, {"code": "(fn default-map [default coll] \n  (apply hash-map (interleave coll (repeat default))))", "problem": 156, "user": "52facb9de4b047fd55837002"}, {"code": "(fn [d c] (into {} (map #(vector % d) c)))", "problem": 156, "user": "4ebf11bc535dfed6da9c6d9c"}, {"code": "#(loop [l %2 m {}] (if (empty? l) m (recur (rest l) (assoc m (first l) %1))))", "problem": 156, "user": "52c81954e4b0c2d177d6212e"}, {"code": "(fn [v ks] (zipmap ks (vec (repeat (count ks) v))))", "problem": 156, "user": "531016d0e4b08068f379ecd1"}, {"code": "#(apply hash-map (apply concat (for [k %2] [k %1])))", "problem": 156, "user": "53244c9de4b09d4e7a9b54db"}, {"code": "(fn [one, two] (zipmap two (repeat one)))", "problem": 156, "user": "53286389e4b09d4e7a9b5504"}, {"code": "(fn [value keys]\n  (\n    reduce #(assoc %1 %2 value) {} keys\n   ))", "problem": 156, "user": "5302ac7fe4b0d8b024fd3731"}, {"code": "(fn cmap [d, ks] \n  (if (= [] ks)\n    {}\n    (assoc (cmap d (rest ks)) (first ks) d)))", "problem": 156, "user": "532b9075e4b09d4e7a9b5533"}, {"code": "(fn [d xs] \n  (loop [m {}\n         xs xs]\n    (if (empty? xs)\n      \tm\n   \t  \t(recur (assoc m (first xs) d) (rest xs)))))", "problem": 156, "user": "51febd40e4b0f1313d468a76"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "5004034ce4b0678c553fc447"}, {"code": "#(apply hash-map\n  (interleave\n   \t%2\n  \t(repeat %1)\n  )\n)", "problem": 156, "user": "532cb6bbe4b019098a6f8b33"}, {"code": "(fn [v sq] (reduce (fn [mp k] (assoc mp k v) ) {} sq))", "problem": 156, "user": "53266a93e4b09d4e7a9b54ee"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "532ecd44e4b019098a6f8b49"}, {"code": "(fn [x xs]\n  (apply hash-map (mapcat #(vector % x) xs))\n  )", "problem": 156, "user": "531490bde4b08068f379ed17"}, {"code": "(fn [default-value keys]\n  (zipmap keys (repeat default-value)))", "problem": 156, "user": "4f80a906e4b033992c121bf7"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "533056a4e4b019098a6f8b5b"}, {"code": "(fn [v coll] (reduce #(assoc %1 %2 v) {} coll))", "problem": 156, "user": "52fc34cee4b047fd55837015"}, {"code": "(fn [default  mapp]\n  (loop [tail mapp result {}]\n    (if (empty? tail)\n     result\n     (recur (rest tail) (conj result {(first tail) default})))))", "problem": 156, "user": "532db3e7e4b019098a6f8b3d"}, {"code": "(fn [v coll] (reduce merge (map #(assoc {} % v) coll)))", "problem": 156, "user": "5321008ee4b09d4e7a9b54aa"}, {"code": "(fn [default coll]\n\t(reduce #(assoc %1 %2 default) {} coll))", "problem": 156, "user": "532686e6e4b09d4e7a9b54ef"}, {"code": "(fn [v key_list] (reduce #(assoc %1 %2 v) {} key_list))", "problem": 156, "user": "5318594ee4b08068f379ed6d"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4f93539de4b0dcca54ed6cba"}, {"code": "(fn [de col] (zipmap col (repeat (count col) de)))", "problem": 156, "user": "5318f85ae4b08068f379ed76"}, {"code": "(fn [value collection] (into {} (for [key collection] [key value])))", "problem": 156, "user": "5328b1ece4b09d4e7a9b5508"}, {"code": "#(into {} (for [i %2] [i %1]) )", "problem": 156, "user": "530262c8e4b0d8b024fd3728"}, {"code": "(fn [value keys]\n \t(reduce (fn [su key] (assoc su key value)) {} keys))", "problem": 156, "user": "51f5539fe4b0abb92f97f9cd"}, {"code": "(fn [x L] (reduce conj {} (map (fn [k] {k x}) L)))", "problem": 156, "user": "5332f9e1e4b019098a6f8b79"}, {"code": "#(into {} (for [k %2]\n            [k %]))", "problem": 156, "user": "520a6aace4b01da9d47a99d9"}, {"code": "(fn foo [v k]\n  (if (empty? k)\n    {}\n    (conj {(first k) v} (foo v (rest k)))))", "problem": 156, "user": "53322cece4b019098a6f8b73"}, {"code": "(fn [x y]\n  (into {} (for [a y]\n             {a x})))", "problem": 156, "user": "4ef2d6c5535dced4c769f222"}, {"code": "#(zipmap %2 (iterate (fn[a] a) %1))", "problem": 156, "user": "531d34cfe4b08068f379edac"}, {"code": "#(apply merge (map (fn [x] {x %1}) %2))", "problem": 156, "user": "531792d9e4b08068f379ed5e"}, {"code": "(fn\n  [dv col]\n  (let [mapper (fn [t-map v] (conj t-map {v dv}))]\n    (reduce mapper {} col)))", "problem": 156, "user": "53334cb2e4b019098a6f8b81"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "525ab6cfe4b0cb4875a45cf9"}, {"code": "#(apply hash-map (mapcat (fn [k] [k %1]) %2))", "problem": 156, "user": "531619c1e4b08068f379ed3d"}, {"code": "(fn [default, keys] (reduce (fn [acc, key] (assoc acc key default)) {} keys))", "problem": 156, "user": "53217912e4b09d4e7a9b54b3"}, {"code": "(fn [defval,keys] (reduce #(assoc %1 %2 defval) {} keys))", "problem": 156, "user": "5335cab9e4b0e30313ee6c70"}, {"code": "(fn [d c] (reduce (fn [a b] (assoc a b d)) {} c))", "problem": 156, "user": "4eadc217535d7eef30807321"}, {"code": "(fn[a b] (apply array-map (interleave b (repeat (count b) a))))", "problem": 156, "user": "527c4071e4b0757a1b17135a"}, {"code": "#(zipmap %2 (repeat (count %2) %))", "problem": 156, "user": "529e6918e4b04e0c58e87b97"}, {"code": "(fn [x y]\n  (zipmap y (repeat x)))", "problem": 156, "user": "52474133e4b05ef8e38e635e"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "5334d4f2e4b0656e627bfd71"}, {"code": "(fn [v m]\n  (zipmap m (repeat v)))", "problem": 156, "user": "52e087dde4b09f7907dd1412"}, {"code": "(fn [default-val keys] (reduce #(assoc %1 %2 default-val) {} keys))", "problem": 156, "user": "525fea5ae4b03e8d9a4a7026"}, {"code": "#(apply merge (for [i %2\n       :let [res (assoc {} i %)]       \n       ] \n   res))", "problem": 156, "user": "516081e7e4b009fba0926e28"}, {"code": "#(zipmap %2 (repeat (count %2) %))", "problem": 156, "user": "53396c03e4b0e30313ee6ca7"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "53377725e4b0e30313ee6c89"}, {"code": "(fn [Key Map] (zipmap Map (repeat Key)))", "problem": 156, "user": "53340d3ce4b019098a6f8b89"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "4e8849c5535d8b9bb0147ca4"}, {"code": "(fn [Key Map] (zipmap Map (repeat Key)))", "problem": 156, "user": "533a7427e4b0e30313ee6cbb"}, {"code": "(fn [Key Map] (zipmap Map (repeat Key)))", "problem": 156, "user": "533aac38e4b0e30313ee6cbe"}, {"code": "(fn my-map [d k] (zipmap k (repeat (count k) d)))", "problem": 156, "user": "53388e2de4b0e30313ee6c9c"}, {"code": "(fn md [d m]\n  (into {} (map vec (partition 2 2 (interleave m (repeat d))))))", "problem": 156, "user": "532b43c3e4b09d4e7a9b5531"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "52d2ca1ce4b099d49816f0b4"}, {"code": "(fn [d k] (reduce conj {} (map #(vector % d) k)))", "problem": 156, "user": "506d5e4ce4b0a302964c5493"}, {"code": "(fn [v m] (zipmap m (repeat v)))", "problem": 156, "user": "50da34e4e4b0f31830755b3c"}, {"code": "#(loop [k %2 m {}](if (empty? k) m (recur (rest k) (conj m [(first k) %1]))))", "problem": 156, "user": "532df9c5e4b019098a6f8b42"}, {"code": "(fn [d & v]\n  (into {}\n        (map #(vector % d) (flatten v))))", "problem": 156, "user": "524ad140e4b09eba1c0223a9"}, {"code": "#(into {} (for [x %2] [x %]))", "problem": 156, "user": "533a7d56e4b0e30313ee6cbc"}, {"code": "(fn [default allKeys] (apply merge (map #(hash-map %1 default) allKeys)))", "problem": 156, "user": "529862dfe4b02ebb4ef75055"}, {"code": "(fn [value kys] (reduce #(assoc % %2 value) {} kys))", "problem": 156, "user": "5275a47ae4b03e8d9a4a74c7"}, {"code": "#(apply hash-map \n   (interleave \n    %2 \n    (take (count %2) (repeat %1))\n    )\n   )", "problem": 156, "user": "52fe869be4b047fd5583703f"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "5339c105e4b0e30313ee6cae"}, {"code": "(fn [d ks] (reduce #(assoc %1 %2 d) {} ks))", "problem": 156, "user": "533ab9abe4b0e30313ee6cbf"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "5281a445e4b0757a1b17143a"}, {"code": "(fn mkdefmap [defval col]\n\t(if (empty? col)\n\t\t{}\n\t\t(conj (mkdefmap defval (rest col)) {(first col) defval})\n))", "problem": 156, "user": "53386fb9e4b0e30313ee6c9a"}, {"code": "#(zipmap %2 (iterate force %1))", "problem": 156, "user": "52fbbadde4b047fd5583700f"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "523ea111e4b057c4b7cd0a65"}, {"code": "(fn [df ks]\n  (reduce #(assoc %1 %2 df) {} ks))", "problem": 156, "user": "53300924e4b019098a6f8b55"}, {"code": "(fn [default col]\n  (reduce #(assoc %1 %2 default) {} col)\n)", "problem": 156, "user": "5322d370e4b09d4e7a9b54c7"}, {"code": "(fn with-default [v keys]\n  (zipmap keys (repeat v)))", "problem": 156, "user": "5326c5f7e4b09d4e7a9b54f2"}, {"code": "#(->> %1\n     (repeat (count %2))\n     (zipmap %2))", "problem": 156, "user": "50747a55e4b054001656acd2"}, {"code": "(fn [default-value keys] \n   (apply merge (map #(hash-map % default-value) keys)))", "problem": 156, "user": "4ffee245e4b0678c553fc3f8"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "53307da1e4b019098a6f8b5e"}, {"code": "(fn [default vec]\n  (apply assoc\n         {}\n         (interleave vec\n                     (repeat default))))", "problem": 156, "user": "52b65f26e4b0c58976d9ad43"}, {"code": "(fn [v k] (reduce (fn [m n] (assoc m n v)) {} (reverse k)))", "problem": 156, "user": "51da631be4b02ceefd947766"}, {"code": "(fn\n  [default items]\n  (zipmap items (repeat (count items) default)))", "problem": 156, "user": "4eddc5f4535d10e5ff6f532c"}, {"code": "(fn [v k] (zipmap k (repeat (count k) v)))", "problem": 156, "user": "4e36e647535deb9a81d77f36"}, {"code": "(fn [a b] (apply hash-map (apply concat (map #(list % a) b))))", "problem": 156, "user": "53422c98e4b00652c8746ed6"}, {"code": "(fn [init keys] (reduce #(conj %1 [%2 init]) {} keys))", "problem": 156, "user": "5341b141e4b00652c8746ecf"}, {"code": "(fn[v m] (into {} (map #(vector % v) m)))", "problem": 156, "user": "53347274e4b0656e627bfd6b"}, {"code": "(fn [a b] ( reduce merge (map #(hash-map % a) b)))", "problem": 156, "user": "50d4593ee4b09cc622d65a68"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "50436470e4b034ff00315d23"}, {"code": "(fn [val keys] (reduce conj (map #(hash-map % val) keys)))", "problem": 156, "user": "53372d7de4b0e30313ee6c87"}, {"code": "(fn [default seq]\n  (apply merge (map (fn [x] (hash-map x default)) seq)))", "problem": 156, "user": "53415755e4b00652c8746ecd"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "533b1dc4e4b0e30313ee6cc7"}, {"code": "(fn [d col]\n  (apply assoc {} (interleave col (repeat (count col) d))))", "problem": 156, "user": "524d90c0e4b0a16e35cf6ded"}, {"code": "(fn [defval coll]\n  (zipmap coll (repeat defval)))", "problem": 156, "user": "52a229e0e4b04e0c58e87be9"}, {"code": "#(into {} (for [v %2] [v %]))", "problem": 156, "user": "5165e7eee4b04cc958b892be"}, {"code": "(fn[dval keyseq]\n\t(into {} (map #(hash-map % dval) keyseq)))", "problem": 156, "user": "51b73a91e4b0d906fcd71d33"}, {"code": "(fn defaults [v ks]\n  (zipmap ks (repeat v)))", "problem": 156, "user": "532ab0bde4b09d4e7a9b5527"}, {"code": "(fn [i m] (reduce #(conj % (hash-map %2 i)) {} m))", "problem": 156, "user": "533b36c0e4b0e30313ee6ccb"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "5346f409e4b084c2834f4a46"}, {"code": "#(apply hash-map (mapcat (fn [x] [x %1]) %2))", "problem": 156, "user": "53468f6ce4b084c2834f4a3f"}, {"code": "(fn [value keys]\n  (reduce (fn [accu key] (assoc accu key value)) {} keys))", "problem": 156, "user": "4e82c062535db62dc21a62cc"}, {"code": "(fn [d keys] (reduce conj (\n                     for [k keys]\n                     {k d})))", "problem": 156, "user": "533a2e02e4b0e30313ee6cb7"}, {"code": "(fn [defval keys]\n  (->> keys (mapcat (fn [k] [k defval])) (apply hash-map)))", "problem": 156, "user": "5344fe13e4b084c2834f4a32"}, {"code": "(fn [v coll]\n  (reduce\n    #(assoc %1 %2 v) {} coll))", "problem": 156, "user": "4e705861535d5021c1a89635"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4de18de7535d08e6dec9fde8"}, {"code": "(fn [d l] (zipmap l (repeat (count l) d)))", "problem": 156, "user": "5349ac2be4b084c2834f4a67"}, {"code": "(fn [x v] (into {} (for [elt v] (vector elt x))))", "problem": 156, "user": "4f92de49e4b0dcca54ed6cb2"}, {"code": "(fn [v vc] (zipmap vc (repeat (count vc) v)))", "problem": 156, "user": "531541a0e4b08068f379ed25"}, {"code": "(fn [default ks]\n  (loop [result {} lst ks]\n    (if (empty? lst)\n      result\n      (recur (conj result {(first lst) default}) (rest lst)))))", "problem": 156, "user": "5347870be4b084c2834f4a4b"}, {"code": "(fn [default _seq] (zipmap _seq (repeat default)))", "problem": 156, "user": "4f551054e4b0a7574ea717f5"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "52ac2db3e4b0c58976d9ac82"}, {"code": "(fn [default coll]\n  (reduce \n   (fn [map key] (assoc map key default))\n   {}\n   coll))", "problem": 156, "user": "4f6236abe4b0defedf855fcd"}, {"code": "(fn [default b] (reduce #(assoc %1 %2 default) {} b))", "problem": 156, "user": "500e6c4ee4b04a05d36fcc05"}, {"code": "#(apply conj (for [x %2] {x %}))", "problem": 156, "user": "5338645ee4b0e30313ee6c99"}, {"code": "(fn [v k]\n  (reduce (fn [acc e]\n            (assoc acc e v ))\n          {} k))", "problem": 156, "user": "52d6664be4b09f7907dd1359"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "53460d02e4b084c2834f4a39"}, {"code": "#(into {} (map (fn [k] [k %1]) %2))", "problem": 156, "user": "4fbfe9a4e4b081705acca31f"}, {"code": "(fn [df li]\n  (apply hash-map (interleave li (repeat df)))\n  )", "problem": 156, "user": "534c734de4b084c2834f4a93"}, {"code": "#(into {} (for [i %2] [i %1]))", "problem": 156, "user": "529da890e4b04e0c58e87b7e"}, {"code": "(fn [default keylist]\n  (zipmap keylist (repeat default)))", "problem": 156, "user": "51ac80bbe4b09397d5109770"}, {"code": "(fn [v c]\n  (zipmap c (repeat (count c) v)))", "problem": 156, "user": "51ab70c3e4b04e3dc0c27b33"}, {"code": "#(apply hash-map (reduce into [] (map (fn [k v] [k v]) %2 (repeat (count %2) %1))))", "problem": 156, "user": "52de249ae4b09f7907dd13ed"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "534d4779e4b084c2834f4a9b"}, {"code": "(fn [v ks] (into {} (map vector ks (repeat v))))", "problem": 156, "user": "5175533fe4b0dea9bbfba575"}, {"code": "#(into {} (map vector %2 (repeat %1)))", "problem": 156, "user": "4ddb696b535d02782fcbe9fa"}, {"code": "#(zipmap %2(repeat %))", "problem": 156, "user": "526a7025e4b03e8d9a4a722a"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "53487737e4b084c2834f4a59"}, {"code": "(fn [x y]\n  (apply hash-map (interleave y (repeat x))))", "problem": 156, "user": "533a399de4b0e30313ee6cb9"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "53500869e4b084c2834f4ad3"}, {"code": "(fn [d s] (apply hash-map (interleave s (repeat d))))", "problem": 156, "user": "53512bc6e4b084c2834f4ae1"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "50f10f7be4b06d9538fe211a"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "534efe66e4b084c2834f4ac1"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "52a0237de4b04e0c58e87bbe"}, {"code": "(fn [default-val, ks]\n  (zipmap ks (repeat default-val)))", "problem": 156, "user": "5348cab4e4b084c2834f4a5e"}, {"code": "(fn [def-val s] (reduce (fn [m k] (assoc m k def-val)) {} s))", "problem": 156, "user": "534dd600e4b084c2834f4aaa"}, {"code": "(fn [d k]\n  (zipmap k (repeat d)))", "problem": 156, "user": "534f25f9e4b084c2834f4ac6"}, {"code": "(fn [n list] (apply merge (map #(hash-map % n) list)))", "problem": 156, "user": "534aa5d3e4b084c2834f4a6b"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "53513d28e4b084c2834f4ae3"}, {"code": "(fn [a col]\n  (zipmap col (repeat a)))", "problem": 156, "user": "534e4a29e4b084c2834f4ab0"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "52046600e4b0c283853240c5"}, {"code": "(fn [default ks]\n  (zipmap ks\n          (take (count ks) (repeat default))))", "problem": 156, "user": "5192dd39e4b0c663c5d86c9e"}, {"code": "(fn [val keys]\n  (reduce merge\n          (map (fn [k] {k val}) keys)))", "problem": 156, "user": "5225271fe4b01819a2de42f9"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "534bd9c1e4b084c2834f4a80"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "5353afa0e4b084c2834f4b03"}, {"code": "(fn default-map\n  [val keys]\n  (reduce (fn [acc e]\n            (assoc acc e val))\n          {}\n          keys))", "problem": 156, "user": "50fc48dde4b0d10d794c19f6"}, {"code": "#(into {} (map (fn [x] [x %1]) %2))", "problem": 156, "user": "534941d1e4b084c2834f4a60"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "535526a2e4b04ce2eb3ed259"}, {"code": "(fn [dv, m]\n  (loop [mm m\n        resm {}]\n    (let [[k1 & kres] mm]\n      (if (empty? kres) (assoc resm k1 dv) (recur kres (assoc resm k1 dv))\n    )\n  )\n      \n  )\n)", "problem": 156, "user": "5356a324e4b04ce2eb3ed269"}, {"code": "(fn\n  [value keys]\n  (apply merge (map #(hash-map % value) keys))\n  )", "problem": 156, "user": "523d06aae4b0dbf0c301728b"}, {"code": "(fn [d ks] (zipmap ks (repeat d)))", "problem": 156, "user": "511a5328e4b09045b2b16946"}, {"code": "(fn map-default\n  [default ks]\n  (reduce conj {} (for [k ks]\n    [k default])))", "problem": 156, "user": "52dc3bc8e4b09f7907dd13cb"}, {"code": "(fn [d k] (into {} (map #(vector % d) k)))", "problem": 156, "user": "5357b241e4b04ce2eb3ed282"}, {"code": "(fn[y, x] (zipmap x (repeat y)))", "problem": 156, "user": "53566247e4b04ce2eb3ed266"}, {"code": "(fn [x y] (zipmap y (replicate (count y) x)))", "problem": 156, "user": "53536386e4b084c2834f4afe"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "52b453b0e4b0c58976d9ad21"}, {"code": "(fn [val list] \n   (zipmap list (repeat val)))", "problem": 156, "user": "530b8580e4b02e82168697cc"}, {"code": "#(apply hash-map (conj (vec (interpose % %2)) %))", "problem": 156, "user": "52cf5450e4b07d0d72b273a4"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "53523ae0e4b084c2834f4aee"}, {"code": "(fn [numb vect](zipmap vect (repeat numb)))", "problem": 156, "user": "522b1993e4b0d34ee08e71b6"}, {"code": "(fn [df keys] (zipmap keys (repeat df)))", "problem": 156, "user": "534d1173e4b084c2834f4a98"}, {"code": "(fn [val vec]\n  (apply assoc {}\n         (interleave vec (iterate identity val))))", "problem": 156, "user": "52271a85e4b04e78ff2e19a7"}, {"code": ";(fn [val keys]\n;  (reduce #(assoc %1 %2 val) {} keys))\n\n(fn [val keys] (zipmap keys (repeat val)))", "problem": 156, "user": "5312cdaae4b08068f379ed03"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "5356dcbee4b04ce2eb3ed270"}, {"code": "(fn [n x] (zipmap x (repeat (count x) n)))", "problem": 156, "user": "53512b55e4b084c2834f4ae0"}, {"code": "(fn [v m]\n    (reduce merge (map (fn [x] {x v}) m))\n    )", "problem": 156, "user": "535aba96e4b04ce2eb3ed2a8"}, {"code": "(fn [d v] (reduce #(conj %1 {%2 d}) {} v))", "problem": 156, "user": "535bd464e4b04ce2eb3ed2ad"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "5325cef5e4b09d4e7a9b54e7"}, {"code": "(fn [v col]\n  (into {} (map #(vector % v) col)))", "problem": 156, "user": "535944d6e4b04ce2eb3ed296"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "5351fca5e4b084c2834f4aec"}, {"code": "(fn [x y]\n  ((fn df [a b c] \n     (if (empty? b) \n       c\n       (df a (rest b) (assoc c (first b) a))\n     ))\n     x y {}))", "problem": 156, "user": "535920b2e4b04ce2eb3ed294"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "535d2533e4b04ce2eb3ed2bc"}, {"code": "(fn [default list]\n  (zipmap list (repeat (count list) default)))", "problem": 156, "user": "520e6d77e4b0101e4be6fcd5"}, {"code": "(fn mk-map [v se]\n  (into {} (\n    map (fn [x] {x v}) se)))", "problem": 156, "user": "535a170ae4b04ce2eb3ed2a3"}, {"code": "(fn [d k] (apply conj {} (map #(vector % d) (reverse k))))", "problem": 156, "user": "5360d41fe4b0243289761e39"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "533f09e1e4b085b17e897d9a"}, {"code": "(fn [df keys]\n  (reduce #(assoc %1 %2 df) {} keys))", "problem": 156, "user": "53489329e4b084c2834f4a5b"}, {"code": "(fn sol2 [dv xs] \n  (reduce merge (for [x xs] \n    {x dv} ))\n)", "problem": 156, "user": "5360e12ce4b0243289761e3a"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "535d910ae4b04ce2eb3ed2c5"}, {"code": "(fn [d coll]\n  (apply array-map\n         (mapcat (fn [x]\n                   (list x d))\n                 coll)))", "problem": 156, "user": "536102efe4b0243289761e3e"}, {"code": "#(apply assoc {} (interleave %2 (repeat %)))", "problem": 156, "user": "515c44c8e4b069911535cf09"}, {"code": "(fn [default v]\n  (into {} (map (fn [x] [x default]) v)))", "problem": 156, "user": "53480973e4b084c2834f4a52"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "53622d94e4b0243289761e4c"}, {"code": "(fn [default kys] (apply hash-map (apply concat (map vector  kys (repeat default)))))", "problem": 156, "user": "4fafd067e4b081705acca259"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "53629381e4b0243289761e54"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "523630eee4b05f3be1c7c8e8"}, {"code": "(fn [a v] (zipmap v (repeat a)))", "problem": 156, "user": "535a18e3e4b04ce2eb3ed2a4"}, {"code": "(fn [v m] (zipmap m (repeat v)))", "problem": 156, "user": "53638ed2e4b0243289761e5b"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "5338387de4b0e30313ee6c91"}, {"code": "(fn [default lijst1]\n  (loop [lijst lijst1 d {}]\n     (if (empty? lijst)\n       d\n       (recur (rest lijst) (assoc d (first lijst) default)))))", "problem": 156, "user": "534eb269e4b084c2834f4aba"}, {"code": "(fn [v ks]\n  (zipmap ks (repeat v)))", "problem": 156, "user": "53613db8e4b0243289761e41"}, {"code": "(fn [v keys]  (apply merge (for [k keys]  {k v})))", "problem": 156, "user": "52d24f60e4b099d49816f0a8"}, {"code": "(fn [v ks] (zipmap ks (repeat (count ks) v)))", "problem": 156, "user": "52c42bc2e4b0c2d177d620d0"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "524b0645e4b09eba1c0223bf"}, {"code": "(fn [default values] \n  (zipmap values (repeat (count values) default)  \n   )\n  )", "problem": 156, "user": "535943b3e4b04ce2eb3ed295"}, {"code": "(fn [v m]\n    (zipmap m (repeat v)))", "problem": 156, "user": "53528cd3e4b084c2834f4af2"}, {"code": "(fn [d m] (zipmap m (map (fn [x] d) m)))", "problem": 156, "user": "5360b327e4b0243289761e38"}, {"code": "(fn [x keys]\n     (apply merge (map #(array-map % x ) keys)))", "problem": 156, "user": "53664e3be4b0243289761e74"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "535eaa73e4b04ce2eb3ed2d4"}, {"code": "(fn [default-element, map-keys]\n    (loop [result {} rest-keys map-keys]\n        (if (empty? rest-keys) result\n          (recur (conj result [(first rest-keys), default-element]) (rest rest-keys)))))", "problem": 156, "user": "533e45a7e4b085b17e897d8c"}, {"code": "(fn [default-value hashmap-keys]\n  (reduce merge (map hash-map hashmap-keys (repeat (count hashmap-keys) default-value))))", "problem": 156, "user": "4f031883535dcb61093f6a5e"}, {"code": "(fn [val keys]\n  (into {} (map #(vector % val) keys)))", "problem": 156, "user": "53658ce7e4b0243289761e6e"}, {"code": "(fn [default-val m] (reduce #(assoc %1 %2 default-val) {} m))", "problem": 156, "user": "52a503e4e4b0c58976d9abe1"}, {"code": "(fn [v m] \n  (zipmap m (repeat v))\n)", "problem": 156, "user": "51c5c9c9e4b03a28d42333ba"}, {"code": "(fn [default ks]\n  (zipmap ks (repeat (count ks) default)))", "problem": 156, "user": "5338e33fe4b0e30313ee6ca1"}, {"code": "(fn\n  [d l]\n  (loop [li l\n         mp {}]\n  (if (empty? li) \n    mp\n    (recur (rest li) (assoc mp (first li) d))))\n  )", "problem": 156, "user": "53663e82e4b0243289761e73"}, {"code": "(fn [x coll]\n  (apply merge (map #(hash-map % x) coll)))", "problem": 156, "user": "5361a4f2e4b0243289761e47"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "535d4b0ae4b04ce2eb3ed2be"}, {"code": "(fn [d k] (into {} (map #(vector % d) k)))", "problem": 156, "user": "53572176e4b04ce2eb3ed276"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "53673d93e4b0243289761e7d"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4ec53f8c535d6d7199dd368b"}, {"code": "(fn [value xs]\n   (zipmap xs (repeat value)))", "problem": 156, "user": "4edb314d535d10e5ff6f5317"}, {"code": "(fn [d s] (into {} (map vector s (repeat d))))", "problem": 156, "user": "5228b015e4b0186687e23a8a"}, {"code": "#(into {} (for [k %2] [k %1] ))", "problem": 156, "user": "5369652de4b0243289761e9c"}, {"code": "(fn md\n  [xd xs]\n  (reduce #(assoc %1 %2 xd) {} xs))", "problem": 156, "user": "536aa86de4b0243289761eb1"}, {"code": "(fn [default col]\n        (apply hash-map\n          (interleave\n            col\n            (for [x (range (count col))]\n              default\n              )\n            )\n          )\n        )", "problem": 156, "user": "536827f1e4b0243289761e8a"}, {"code": "(fn [x mp] (into {} (for [y mp] {y x})))", "problem": 156, "user": "534c1c64e4b084c2834f4a8a"}, {"code": "(fn default-map\n  [default keys]\n  (reduce conj {} (map (fn [key] {key default}) keys)))", "problem": 156, "user": "511720eae4b0063b4e3e16da"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "536b2048e4b0243289761eb7"}, {"code": "(fn [d ks]\n  (zipmap ks (repeat d)))", "problem": 156, "user": "536ca4bde4b0fc7073fd6e49"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "5028cd0fe4b01614d1633ffc"}, {"code": "(fn [defval coll] (zipmap coll (repeat defval)))", "problem": 156, "user": "536c7f32e4b0fc7073fd6e40"}, {"code": "(fn [v k] (into {} (map #(hash-map % v) k)))", "problem": 156, "user": "536be89ee4b0fc7073fd6e32"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "524f3e6de4b0541d1855b805"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "52caee42e4b071a8d36bd3e8"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4dca56b6535d5973398f9287"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "536d83cee4b0fc7073fd6e5e"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "52dced9de4b09f7907dd13d7"}, {"code": "(fn [dv keys]\n  (apply hash-map (interleave keys (repeat (count keys) dv))))", "problem": 156, "user": "4fe9ea87e4b0547ebccb2476"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4f622cafe4b0defedf855fcc"}, {"code": "#(into {} (map (fn [x] {x %}) %2))", "problem": 156, "user": "536e0930e4b0fc7073fd6e66"}, {"code": "(fn [dv sk] (apply hash-map (interleave sk (repeat dv))))", "problem": 156, "user": "536f2faee4b0fc7073fd6e79"}, {"code": "(fn [n col]\n  (zipmap col (take (count col) (repeat n)))\n   )", "problem": 156, "user": "52d42021e4b09f7907dd132a"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "536ecd9fe4b0fc7073fd6e76"}, {"code": "#(apply hash-map (interleave %2 (vec (repeat (count %2) %1))))", "problem": 156, "user": "536f5900e4b0fc7073fd6e7b"}, {"code": "(fn [default array] (zipmap array (repeat default)))", "problem": 156, "user": "536673a8e4b0243289761e76"}, {"code": "(fn [n col]\n        (into {} (map (fn [x] [x n]) col)))", "problem": 156, "user": "4f7cbf4ae4b06e829148e1b7"}, {"code": "(fn [x y] (into {} (map (fn [a] (hash-map a x)) y)))", "problem": 156, "user": "4e2ef93d535deb9a81d77f0f"}, {"code": "(fn [v ks] (into {} (for [k ks] [k v])))", "problem": 156, "user": "51c15fe9e4b0c9c82288294c"}, {"code": "(fn [deflt aseq] (into {} (for [i aseq] {i deflt})))", "problem": 156, "user": "53716539e4b0fc7073fd6eb1"}, {"code": "(fn mapconstructor [x y]\n        (apply hash-map (conj (vec (interpose x y)) x)))", "problem": 156, "user": "532727bae4b09d4e7a9b54fa"}, {"code": "(fn [val l] (apply hash-map (interleave l (repeat val))))", "problem": 156, "user": "534f13b2e4b084c2834f4ac4"}, {"code": "(fn [x col]\n (zipmap col (repeat x)))", "problem": 156, "user": "53572767e4b04ce2eb3ed277"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "53691dc7e4b0243289761e97"}, {"code": "(fn [x y] (zipmap y (repeat x)))", "problem": 156, "user": "532c9dc9e4b019098a6f8b30"}, {"code": "(fn [default coll]\n  (into {} (for [x coll] {x default})))", "problem": 156, "user": "53713ebee4b0fc7073fd6ead"}, {"code": "(fn [x coll] (into {} (map #(vector % x) coll)))", "problem": 156, "user": "536b9d8ae4b0243289761ebe"}, {"code": "(fn [v ks] (zipmap ks (repeat v)))", "problem": 156, "user": "517d1018e4b0f5e87c18f25e"}, {"code": "(fn [default x] (reduce #(assoc %1 %2 default) {} x) )", "problem": 156, "user": "513facf5e4b00f13ea1bd892"}, {"code": "(fn map-default [default key-sequence]\n  (into {} (map #(hash-map % default) key-sequence)))", "problem": 156, "user": "53713ed9e4b0fc7073fd6eaf"}, {"code": "(fn fun [x coll]\n  (into {}\n        (map vector coll (repeat x)))\n)", "problem": 156, "user": "5349da55e4b084c2834f4a68"}, {"code": "#(loop [m       {}\n        default %1\n        col     %2]\n   (if (seq col)\n     (recur (assoc m (first col) default) default (rest col))\n     m))\n\n#_#(zipmap %2 (repeat %1))", "problem": 156, "user": "5371167fe4b0fc7073fd6ea7"}, {"code": "(fn jpop-map\n  [val keylst]\n  (zipmap keylst (take (count keylst) (repeat val))))", "problem": 156, "user": "534ff8a6e4b084c2834f4ad1"}, {"code": "(fn [d l] (reduce #(assoc %1 %2 d) {} l))", "problem": 156, "user": "53736ffce4b06d7f452d9e11"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "5327c591e4b09d4e7a9b54ff"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "536c7470e4b0fc7073fd6e3e"}, {"code": "(fn [v sq]\n  (zipmap sq \n    (into [] \n      (repeat (count sq) v)\n    )\n  )\n)", "problem": 156, "user": "53749685e4b06d7f452d9e23"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "52e27501e4b09f7907dd1435"}, {"code": "(fn [x y] \n  (reduce conj (map #(assoc {} % x) y )))", "problem": 156, "user": "535056a7e4b084c2834f4adb"}, {"code": "#(into {} (for [x %2] [x %1]))", "problem": 156, "user": "535e518ee4b04ce2eb3ed2cf"}, {"code": "(fn [default m] (reduce (fn [am k]\n                  (assoc am k default)) {} m))", "problem": 156, "user": "53756f8be4b06839e8705e14"}, {"code": "(fn [default key-map] (apply merge (map #(hash-map % default) key-map)))", "problem": 156, "user": "52d885afe4b09f7907dd1398"}, {"code": "(fn [v ks] (zipmap ks (repeat (count ks) v)))", "problem": 156, "user": "4eef1164535d305ff5cb7f19"}, {"code": "#(apply hash-map (apply concat ((fn [e c] (for [x c] [x e])) %1 %2)))", "problem": 156, "user": "5370b386e4b0fc7073fd6e9b"}, {"code": "(fn [defval array] (zipmap (reverse array) (vec (replicate (count array) defval))))", "problem": 156, "user": "53710c09e4b0fc7073fd6ea5"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "536e5b68e4b0fc7073fd6e6d"}, {"code": "(fn [default keez] \n(loop [x {}\n       k keez]\n  (if (empty? k)\n    x\n    (recur (assoc x (first k) default) (rest k)\n           )\n    )\n  )\n)", "problem": 156, "user": "536e56dbe4b0fc7073fd6e6c"}, {"code": "#(apply hash-map (conj (into [] (interpose %1 %2)) %1))", "problem": 156, "user": "521af66be4b0c4ef0be8301b"}, {"code": "(fn [v seq]\n  (loop [rem-seq seq\n         mapp {}]\n    (if (empty? rem-seq) mapp\n      (recur (rest rem-seq) (assoc mapp (first rem-seq) v)))))", "problem": 156, "user": "53733312e4b06d7f452d9e0a"}, {"code": "(fn [v m]\n  (loop [cur m ret {}]\n    (if (empty? cur)\n      ret\n      (recur (rest cur) (assoc ret (first cur) v)))))", "problem": 156, "user": "5370f8ede4b0fc7073fd6ea2"}, {"code": "(fn X [v V] (if (first V) (merge (X v (rest V)) {(first V) v})))", "problem": 156, "user": "536c77f1e4b0fc7073fd6e3f"}, {"code": "(fn [a n] (apply assoc{} (vec (interleave n (repeat a)))))", "problem": 156, "user": "534e1f56e4b084c2834f4aae"}, {"code": "(fn [default-value map-keys]\n  (reduce #(assoc %1 %2 default-value) {} map-keys))", "problem": 156, "user": "53527551e4b084c2834f4af0"}, {"code": "#(apply merge (map (fn [x] (assoc {} x %1)) %2))", "problem": 156, "user": "5339edfbe4b0e30313ee6cb3"}, {"code": "(fn [default keys] (zipmap keys (repeat default)))", "problem": 156, "user": "53790dc6e4b06839e8705e4c"}, {"code": "(fn [d b]\n  (zipmap b (repeat d)))", "problem": 156, "user": "52cda397e4b07d0d72b2737a"}, {"code": "(fn [d s] (zipmap s (repeat d)))", "problem": 156, "user": "53791ab7e4b06839e8705e4d"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "53779a26e4b06839e8705e38"}, {"code": "#(into{} (map vector  %2 (repeat (count %2) %1)))", "problem": 156, "user": "534d639ae4b084c2834f4a9e"}, {"code": "(fn [val keys] (reduce merge (map (fn [key] (assoc {} key val)) keys) ) )", "problem": 156, "user": "52d8e23ae4b09f7907dd139b"}, {"code": "(fn dm [d m] (into {} (map #(assoc {} % d) m)))", "problem": 156, "user": "536db108e4b0fc7073fd6e61"}, {"code": "#(reduce (fn [m val] (assoc m val %1)) {} %2)", "problem": 156, "user": "4ed6c35e535d10e5ff6f52e8"}, {"code": "(fn [var s] (reduce #(assoc % %2 var) {} s ))", "problem": 156, "user": "536046a9e4b063bf7a5f8fe1"}, {"code": "(fn [value collection]\n  (zipmap collection (take (count collection) (repeat value))))", "problem": 156, "user": "4daeff24edd6309eace4d16e"}, {"code": "(fn [v ks]\n  (loop [ks ks ret {}]\n    (if (empty? ks)\n      ret\n      (recur (rest ks) (assoc ret (first ks) v)))))", "problem": 156, "user": "4f849f76e4b033992c121c36"}, {"code": "#(apply array-map (interleave %2 (repeat %1)))", "problem": 156, "user": "53712c03e4b0fc7073fd6ea9"}, {"code": "(fn [default v] (into {} (map (fn[x] {x default}) v)))", "problem": 156, "user": "53752b27e4b06839e8705e12"}, {"code": "#(into {} (for [x %2] [x %1]))", "problem": 156, "user": "52ae886de4b0c58976d9acab"}, {"code": "(fn [value keys] (zipmap keys (repeat value)))", "problem": 156, "user": "4fc588bee4b0ee37620e17fa"}, {"code": "(fn [d l]\n    (loop [res {}\n           l   l]\n      (if (seq l)\n        (recur (assoc res (first l) d) (rest l))\n        res)))", "problem": 156, "user": "5374cbf4e4b06d7f452d9e29"}, {"code": "(fn [default ks]\n      (into {} (for [k ks] [k default])))", "problem": 156, "user": "537bde5de4b06839e8705e73"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "5268f5b4e4b03e8d9a4a71cf"}, {"code": "(fn [val keys] (zipmap keys (take (count keys) (repeat val))))", "problem": 156, "user": "52f28593e4b05e3f0be25ef9"}, {"code": "(fn [v m] (reduce #(assoc % %2 v) {} m))", "problem": 156, "user": "537f6df1e4b06839e8705eb5"}, {"code": "(fn [default x]\n   (apply hash-map (mapcat (fn [n] [n default]) x)))", "problem": 156, "user": "525cc912e4b0cb4875a45d48"}, {"code": "(fn [x ys]\n  (reduce #(assoc %1 %2 x) {} ys))", "problem": 156, "user": "53800d99e4b06839e8705ebd"}, {"code": "(fn [v ks] (zipmap ks (repeat v)))", "problem": 156, "user": "536f871de4b0fc7073fd6e7f"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "51d63d15e4b0a9b6ebce9406"}, {"code": "(fn [val keys]\n  (reduce (fn([a b] (assoc a b val))) {} keys))", "problem": 156, "user": "5374adc3e4b06d7f452d9e27"}, {"code": "(fn [default keys] (zipmap keys (repeat default)))", "problem": 156, "user": "5055e7f4e4b0ce54f56f0401"}, {"code": "(fn [v k] (reduce #(assoc %1 %2 v) {} k))", "problem": 156, "user": "5383c054e4b06839e8705ee8"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "5383668ee4b06839e8705edd"}, {"code": "(fn map-default [d m]\n  (zipmap m (repeat d)))", "problem": 156, "user": "52b71bd2e4b0c58976d9ad4d"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "537a1012e4b06839e8705e5c"}, {"code": "(fn [default coll] (zipmap coll (repeat default)))", "problem": 156, "user": "508147cde4b0a20aab17b93a"}, {"code": "(fn [d, ks]\n  (reduce\n    merge\n    (map\n      #(hash-map % d)\n      ks)))", "problem": 156, "user": "5384e2cee4b06839e8705ef7"}, {"code": "(fn default-map [d m]\n  (if (next m)\n    (conj (default-map d (next m)) {(first m) d})\n    (conj {} {(first m) d})))", "problem": 156, "user": "538557aee4b06839e8705f02"}, {"code": "(fn [k v]\n  (apply hash-map\n         (apply concat\n                (for\n                  [V v]\n                  [V k]))))", "problem": 156, "user": "53806e5be4b06839e8705ec1"}, {"code": "(fn [v col] (apply hash-map (interleave col (repeat v))))", "problem": 156, "user": "532c0507e4b09d4e7a9b553c"}, {"code": "(fn stdmap [default accessors] \n  (reduce conj (map #(hash-map % default) accessors))\n  )", "problem": 156, "user": "5368fedee4b0243289761e93"}, {"code": "#(apply  hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "53862316e4b06839e8705f0e"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "538505d1e4b06839e8705efa"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "5376966ae4b06839e8705e27"}, {"code": "#(into {} (map (fn [p] (into [] p)) (partition 2 (interleave %2 (repeat (count %2) %1 )))))", "problem": 156, "user": "534eecaee4b084c2834f4abf"}, {"code": "#(into {} (for [k %2] [k %1]))", "problem": 156, "user": "53469b68e4b084c2834f4a40"}, {"code": "(fn [value arg]\n  (let [res {}]\n   (into {} (map (fn [x] (assoc res x value)) arg))))", "problem": 156, "user": "537881a4e4b06839e8705e46"}, {"code": "#(into {} (for [x %2] [x %1]))", "problem": 156, "user": "53864493e4b06839e8705f10"}, {"code": "(fn [d l] \n   (apply hash-map \n          (mapcat #(list % d) l) ) )", "problem": 156, "user": "50321311e4b000fc67a99a86"}, {"code": "(fn [x list] (zipmap list (repeat (count list) x)))", "problem": 156, "user": "53838742e4b06839e8705ee0"}, {"code": "(fn [default numbs] (zipmap numbs (repeat default)))", "problem": 156, "user": "4f05c087535dcb61093f6c00"}, {"code": "(fn [a b] (apply hash-map (reduce into (for [x b y [a] :while true] [x y]))))", "problem": 156, "user": "53874820e4b06839e8705f1b"}, {"code": "#(apply hash-map (interleave %2 (repeat %)))", "problem": 156, "user": "5388e62ce4b0640c7a9a58a9"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "537943c0e4b06839e8705e52"}, {"code": "(fn [x y] (zipmap y (repeat (count y) x)))", "problem": 156, "user": "528410bbe4b0239c8a67adc2"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "538a8d28e4b0640c7a9a58ba"}, {"code": "(fn [x xs] (zipmap xs (repeat (count xs) x)))", "problem": 156, "user": "5359734ae4b04ce2eb3ed29d"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "538be6afe4b0640c7a9a58c9"}, {"code": "(fn [default coll]\n  (apply hash-map (interleave coll (repeat default))) \n  )", "problem": 156, "user": "538c17cae4b0b51d73faae54"}, {"code": "(fn [v ks]\n  (into {} (map #(vector % v) ks)))", "problem": 156, "user": "52fb64b7e4b047fd55837009"}, {"code": "#(zipmap (reverse %2) (repeat %1))", "problem": 156, "user": "529c585ae4b04e0c58e87b60"}, {"code": "(fn [v k] (reduce #(assoc %1 %2 v) {} k))", "problem": 156, "user": "53410c24e4b00652c8746eca"}, {"code": "#(reduce (fn [res x] (assoc res x %1)) {} %2)", "problem": 156, "user": "4dad8fe9c9a9d6ed1899dc57"}, {"code": "(fn [x l]\n  (apply merge (map #(hash-map % x) l)))", "problem": 156, "user": "51a4416ae4b0def3c5c5868c"}, {"code": "(fn [v s]\n  (loop [r {}\n         s s]\n    (if (empty? s)\n      r\n      (recur (assoc r (first s) v) (rest s)))))", "problem": 156, "user": "538d464ee4b0b51d73faae69"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "511688d5e4b0b3e208dba05a"}, {"code": "(fn [v ks] (zipmap ks (repeat v)))", "problem": 156, "user": "4e6fa38b535d5021c1a89622"}, {"code": "(fn [d xs] (reduce #(assoc % %2 d ) {} xs))", "problem": 156, "user": "53403110e4b085b17e897da6"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "4f35e662e4b0e243712b1ec6"}, {"code": "(fn [k m]\n  (zipmap m (repeat k)))", "problem": 156, "user": "4f4544e1e4b0d56e7bb92b7a"}, {"code": "(fn [d s] (->> s (map (fn [i] {i d})) (reduce merge)))", "problem": 156, "user": "53050c04e4b0d8b024fd3757"}, {"code": "#(zipmap %2 (vec (repeat (.size %2) %1)))", "problem": 156, "user": "52c54c84e4b0c2d177d620f0"}, {"code": "(fn [d s] (\n     zipmap s (repeat (count s) d)         \n          \n          ))", "problem": 156, "user": "53852e84e4b06839e8705efd"}, {"code": "#(apply hash-map (conj (vec (interpose %1 %2)) %1))", "problem": 156, "user": "538d8bb8e4b0b51d73faae71"}, {"code": "#(zipmap %2 (repeat (count %2) %1))", "problem": 156, "user": "538e5b3fe4b0b51d73faae84"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "52ac41fee4b0c58976d9ac85"}, {"code": "(fn [v k] (zipmap k(repeat (count k)v)))", "problem": 156, "user": "538dc2d1e4b0b51d73faae75"}, {"code": "(fn [x y] (loop [coll y res {}] (if (empty? coll) res (recur (rest coll) (assoc res (first coll) x)))))", "problem": 156, "user": "4f47d84fe4b0d56e7bb92bc3"}, {"code": "(fn [default-value keys]\n  (apply hash-map (interleave keys\n                              (repeat default-value))))", "problem": 156, "user": "528e7433e4b0239c8a67aedf"}, {"code": "#(apply assoc {} (interleave %2 (repeat %)))", "problem": 156, "user": "536973e5e4b0243289761e9e"}, {"code": "(fn f156 [x y]\n  (reduce #(assoc %1 %2 x) {} y))", "problem": 156, "user": "535aee3be4b04ce2eb3ed2aa"}, {"code": "#(zipmap %2  (repeat (count %2) %1))", "problem": 156, "user": "537b1083e4b06839e8705e64"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "4fe8a1f8e4b07c9f6fd12c5f"}, {"code": "(fn [t,col]\n    (loop [x t,y col,ret {}]\n     (if(empty? y)\n       ret\n       (recur x (next y) (assoc ret (first y) x))\n     )))", "problem": 156, "user": "538d73c1e4b0b51d73faae6f"}, {"code": "(fn [default ks] \n  (reduce merge \n   (map \n         (fn [k] {k default}) ks)))", "problem": 156, "user": "538c3424e4b0b51d73faae58"}, {"code": "(fn map_initialiser [v k] (zipmap k(repeat (count k)v)))", "problem": 156, "user": "53901605e4b0b51d73faae95"}, {"code": "(fn f [a coll]\n  (loop [result {} coll coll]\n    (if (empty? coll)\n        result\n        (recur (assoc result (first coll) a) (rest coll)))))", "problem": 156, "user": "538c9144e4b0b51d73faae5d"}, {"code": "#(apply hash-map (interleave %2 (repeat %1)))", "problem": 156, "user": "5390347de4b0b51d73faae96"}, {"code": "(fn [x y] (zipmap y (repeat x)))", "problem": 156, "user": "53906b89e4b0b51d73faae99"}, {"code": "(fn [v k] \n  (reduce #(conj %1 {%2 v}) {} k))", "problem": 156, "user": "52a3a7ebe4b04e0c58e87c02"}, {"code": "(fn [k m] (loop [r {} x m] (if (empty? x) r (recur (assoc r (first x) k) \n (rest x)) )) )", "problem": 156, "user": "5384bbf8e4b06839e8705ef5"}, {"code": "(fn [d s]\n         (reduce #(assoc %1 %2 d) {} s))", "problem": 156, "user": "4e50c894535dc968683fc4ee"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "5382704be4b06839e8705ed4"}, {"code": "(fn [def-val  keys] (apply merge (map #(hash-map % def-val) keys)))", "problem": 156, "user": "5394162be4b0b51d73faaec5"}, {"code": "#(reduce (fn [m k] (conj m [k %1])) {} %2)", "problem": 156, "user": "5392b849e4b0b51d73faaeb1"}, {"code": "(fn [default k]\n  (zipmap k (repeat default)))", "problem": 156, "user": "539378fbe4b0b51d73faaebd"}, {"code": "(fn [default ks]\n  (zipmap ks (repeat (count ks) default)))", "problem": 156, "user": "5374ad7de4b06d7f452d9e26"}, {"code": "#(zipmap %2 (repeat (count %2) %))", "problem": 156, "user": "537f7e2ae4b06839e8705eb6"}, {"code": "(fn [default-value keys]\n  (loop [acc (hash-map) k keys]\n    (cond (empty? k) acc\n          :else (recur (assoc acc (first k) default-value) (rest k)))))", "problem": 156, "user": "538e36c7e4b0b51d73faae81"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "538d70abe4b0b51d73faae6e"}, {"code": "#(apply hash-map (interleave %2 (repeat (count %2) %1)))", "problem": 156, "user": "52bc0dade4b07a9af57922f1"}, {"code": "(fn [d ks]\n  (let [v (take (count ks) (repeat d))] \n    (zipmap ks v)))", "problem": 156, "user": "538c6db7e4b0b51d73faae5a"}, {"code": "(fn [v ks] (into {} (map (fn [k] [k v]) ks)))", "problem": 156, "user": "4dcc024e535d5973398f928f"}, {"code": "#(zipmap %2 (for [x %2] %1))", "problem": 156, "user": "53973e7be4b0b51d73faaee6"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "52963cc7e4b02ebb4ef7502d"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "5394265ee4b0b51d73faaec6"}, {"code": "(fn [v coll] (reduce #(assoc % %2 v) {} coll))", "problem": 156, "user": "539a2901e4b0b51d73faaf0f"}, {"code": "#(into {} (mapcat (fn [x] (assoc {} x %1)) %2))", "problem": 156, "user": "5397ecf6e4b0b51d73faaef2"}, {"code": "(fn [x, y] (zipmap y (iterate (fn [x] x) x\n                              )))", "problem": 156, "user": "5396c9a8e4b0b51d73faaee4"}, {"code": "(fn [d ks] (reduce conj {} (for [k ks] [k d])))", "problem": 156, "user": "539b5fcee4b0b51d73faaf1e"}, {"code": "(fn [v m] (zipmap m (repeat v)))", "problem": 156, "user": "5391ab43e4b0b51d73faaea6"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "539cacbde4b0b51d73faaf2f"}, {"code": "(fn [default col] (into {} (map #(vector % default) col)))", "problem": 156, "user": "52bf0de2e4b07a9af579232a"}, {"code": "#(into {} (map (fn [x] [x %]) %2))", "problem": 156, "user": "5189a51ae4b0288ada3dbdad"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "539c54b3e4b0b51d73faaf27"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "539c9d7ee4b0b51d73faaf2d"}, {"code": "(fn [d ks]\n  (->> ks (map #(vector % d)) (apply conj {})))", "problem": 156, "user": "539ddf25e4b0b51d73faaf3e"}, {"code": "(fn [d v] (zipmap v (take (count v) (repeat d))))", "problem": 156, "user": "50b63c5ee4b0a86f8358ca69"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "539ec9f9e4b0ca733b974491"}, {"code": "(fn map-defaults\n  [val keys]\n  (reduce #(assoc %1 %2 val) {} keys))", "problem": 156, "user": "536e5055e4b0fc7073fd6e6b"}, {"code": "(fn [default xs]\n  (zipmap xs (repeat default)))", "problem": 156, "user": "539f45dce4b0ca733b974497"}, {"code": "(fn [v coll] \n  (zipmap coll (repeat v)))", "problem": 156, "user": "539ad6b7e4b0b51d73faaf18"}, {"code": "(fn\n  [value coll]\n  (reduce #(assoc % %2 value) {} coll)\n )", "problem": 156, "user": "51a4d802e4b0def3c5c5869a"}, {"code": "(fn [d k]\n  (reduce #(assoc % %2 d) {} k))", "problem": 156, "user": "51a49b21e4b0def3c5c58694"}, {"code": "#(zipmap %2 (repeat %))", "problem": 156, "user": "53a01fb1e4b0ca733b9744a6"}, {"code": "(fn [default-value keys]\n  (loop [k (first keys)\n         ks (rest keys)\n         m {}]\n    (if-not (nil? k)\n      (recur (first ks) (rest ks) (assoc m k default-value))\n      m)))", "problem": 156, "user": "51ad54cee4b09397d5109781"}, {"code": "#(zipmap %2 (repeat %1))\n\n;#(apply hash-map (interleave %2 (repeat %1)))\n;#(apply assoc {} (interleave %2 (repeat %1)))", "problem": 156, "user": "53a074a4e4b0ca733b9744af"}, {"code": "#(loop [firstKey (first %2)\n        restKeys (rest %2)\n        ret {}]\n   (if (= 0 (count restKeys))\n     (conj ret {firstKey %1})\n     (recur (first restKeys)\n            (rest restKeys)\n            (conj ret {firstKey %1}))))", "problem": 156, "user": "539f4e9ee4b0ca733b974498"}, {"code": "(fn [o t] (into {} (for [e t] [e o])))", "problem": 156, "user": "539c9e26e4b0b51d73faaf2e"}, {"code": "(fn [v ks]\n  (reduce #(assoc %1 %2 v) {} ks))", "problem": 156, "user": "538e864ee4b0b51d73faae87"}, {"code": "(fn [n l]\n   (apply sorted-map (interleave\n                      l\n                      (repeat (count l) n))))", "problem": 156, "user": "52fac708e4b047fd55836fff"}, {"code": "#(zipmap %2 (repeat (count %2) %1) )", "problem": 156, "user": "53a065c2e4b0ca733b9744ad"}, {"code": "(fn [v ks] (zipmap ks (repeat (count ks) v)))", "problem": 156, "user": "53a068cbe4b0ca733b9744ae"}, {"code": "(fn [default m] (zipmap m (repeat (count m) default)))", "problem": 156, "user": "4f981f31e4b0dcca54ed6cef"}, {"code": "(fn [value m-keys]\n\t(into {} (map #(vector %1 value) m-keys)))", "problem": 156, "user": "52e657e4e4b09f7907dd1472"}, {"code": "#(into {} (for [i %2] [i %1]))", "problem": 156, "user": "53a26cede4b0f1fc7453882a"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "53a12b57e4b0ca733b9744ba"}, {"code": "#(zipmap %2 (repeat %1))", "problem": 156, "user": "537e104ce4b06839e8705e9a"}, {"code": "(fn [d y] (apply hash-map(apply concat(map #(list % d)y))))", "problem": 156, "user": "533b1611e4b0e30313ee6cc6"}, {"problem": 156, "code": "(fn [v ks]\n  (zipmap ks (repeat v)))", "user": "53834ed3e4b06839e8705edb"}, {"problem": 156, "code": "(fn [default ks] (reduce (fn [h k] (assoc h k default)) {} ks))", "user": "53a739b0e4b0ef122a8689d0"}, {"problem": 156, "code": "(fn [default keyList]\n  (reduce #(assoc %1 %2 default) (into [{}] keyList)\n  )\n)", "user": "53a36fd7e4b0f1fc74538834"}, {"problem": 156, "code": "(fn [a b] (into {} (map (fn [l] [l a]) b)))", "user": "538e29d1e4b0b51d73faae80"}, {"problem": 156, "code": "(fn [d m] (reduce #(assoc %1 %2 d) {} m))", "user": "4f041de1535dcb61093f6ba5"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "53a7e3b9e4b047364c044423"}, {"problem": 156, "code": "(fn [v m] (reduce #(assoc % %2 v) {} m))", "user": "53a8d9efe4b047364c04442d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "52527f7ce4b0541d1855b8c4"}, {"problem": 156, "code": "(fn [a coll]\n  (into {} (for [x coll] {x a})))", "user": "53a19dece4b0ca733b9744c0"}, {"problem": 156, "code": "(fn [e coll] (reduce #(into %1 {%2 e}) {} coll))", "user": "53a1b5c8e4b0ca733b9744c1"}, {"problem": 156, "code": "(fn create-map ([default x] (create-map {} default x))\n  ([aux default x] (if (empty? x) aux\n                     (recur (conj aux (hash-map (first x) default)) default (rest x)))))", "user": "53a2ec2be4b0f1fc74538830"}, {"problem": 156, "code": "#(into {} (map (fn [it] [it %1]) %2) )", "user": "535ca812e4b04ce2eb3ed2b7"}, {"problem": 156, "code": "(fn [value mykeys] (zipmap mykeys (repeat (count mykeys) value)))", "user": "50d3317ee4b049d4ed5650da"}, {"problem": 156, "code": "(fn [v m]\n  (loop [acc {}\n         m m]\n    (cond\n     (empty? m) acc\n     :else (recur (conj acc {(first m) v}) (rest m)))))", "user": "51c116d4e4b0c9c822882942"}, {"problem": 156, "code": "(fn [d ks]\n  ((fn [d ks acc]\n     (if (= ks '())\n       acc\n       (recur d (rest ks) (assoc acc (first ks) d))))\n   d ks (hash-map)))", "user": "53aaaf7ae4b047364c044444"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "53a2a259e4b0f1fc7453882c"}, {"problem": 156, "code": "#(reduce into (map hash-map %2 (repeat (count %2) %)))", "user": "53abf519e4b047364c044456"}, {"problem": 156, "code": "#(zipmap %2 (iterate identity %1))", "user": "538c4e52e4b0b51d73faae59"}, {"problem": 156, "code": "(fn\n       [val keys]\n       (apply conj (map #(hash-map % val) keys)))", "user": "53ac4719e4b047364c04445c"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "526e5159e4b03e8d9a4a7316"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %)))", "user": "5289714de4b0239c8a67ae64"}, {"problem": 156, "code": "(fn [default-value map-keys]\n  (zipmap map-keys (repeat (count map-keys) default-value))\n)\n\n;#(zipmap %2 (repeat %1))", "user": "53ac1992e4b047364c04445a"}, {"problem": 156, "code": "#(apply hash-map (reduce (fn [a b] (conj a (first b) (last b))) (map (fn [k] [k %1]) %2)))", "user": "53acaf1fe4b047364c04445f"}, {"problem": 156, "code": "(fn [x y] (apply hash-map (interleave y (repeat x))))", "user": "538f4c1de4b0b51d73faae8c"}, {"problem": 156, "code": "(fn [default sequenc]\n  (apply hash-map (mapcat list sequenc (into [] (repeat (count sequenc) default))))\n)", "user": "5391bc62e4b0b51d73faaea7"}, {"problem": 156, "code": "(fn [v ks] \n  (reduce merge \n         (flatten (map #(hash-map % v) ks))))", "user": "5360578ee4b0243289761e35"}, {"problem": 156, "code": "#(zipmap %2 (replicate (count %2) %1))", "user": "5164c2e5e4b003cf19fdde41"}, {"problem": 156, "code": "(fn [val keys]\n  (into {} (for [x keys] [x val])))", "user": "53069e16e4b02e8216869798"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "53778b90e4b06839e8705e36"}, {"problem": 156, "code": "(fn [x y] (reduce conj (map (fn [a] (hash-map a x)) y)))", "user": "53af41dce4b047364c04447d"}, {"problem": 156, "code": "(fn [x col] (reduce #(assoc %1 %2 x) {} col))", "user": "5356d00ee4b04ce2eb3ed26f"}, {"problem": 156, "code": "(fn [d k] (reduce #(assoc %1 %2 d) {} k))", "user": "53a0ab8ce4b0ca733b9744b3"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "4feded14e4b0d2a5fc2962ec"}, {"problem": 156, "code": "(fn [default v]\n  (into {} (map vector v (repeat default))))", "user": "53a55de5e4b0b62ce3005739"}, {"problem": 156, "code": "(fn[x y] (zipmap y (repeat x)))", "user": "5314923ae4b08068f379ed18"}, {"problem": 156, "code": "#(reduce (fn [m k] (conj m {k %})) {} %2)", "user": "53b15e6ee4b047364c04448f"}, {"problem": 156, "code": "(fn\n  [value coll]\n  (reduce #(assoc % %2 value) {} coll)\n  )", "user": "53b182a5e4b047364c044491"}, {"problem": 156, "code": "(fn[a b] (into {} (map (fn[x] (vector x a)) b)))", "user": "53ad28ede4b047364c044462"}, {"problem": 156, "code": "(fn [x y] (into {} (map #(assoc {} % x) y)))", "user": "5394c2dfe4b0b51d73faaed1"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "53a44fefe4b0b62ce300572e"}, {"problem": 156, "code": "(fn [v ks] (reduce (fn [m k] (conj m [k v])) {} ks))", "user": "53aeb3ebe4b047364c044477"}, {"problem": 156, "code": "(fn [d s] (reduce #(assoc %1 %2 d) {} s))", "user": "52f0ea04e4b05e3f0be25ee6"}, {"problem": 156, "code": "(fn [k vs]\n  (reduce merge (concat (map (fn [v] {v k}) vs) {})))", "user": "53b22df6e4b047364c044497"}, {"problem": 156, "code": "(fn [default keys]\n  (into {} (map #(vector % default) keys)))", "user": "532bce35e4b09d4e7a9b5536"}, {"problem": 156, "code": "(fn [v ks]\n  (zipmap ks (repeat v)))", "user": "53ae0c50e4b047364c044471"}, {"problem": 156, "code": "(fn [k s] (into {} (for [x (partition 2 (interleave s (repeat k)))] (vec x))))", "user": "53a94b63e4b047364c044434"}, {"problem": 156, "code": "#(apply merge (for [v [%] k %2] {k v}))", "user": "52d07cc5e4b07d0d72b273bb"}, {"problem": 156, "code": "(fn [v k] (zipmap k (repeat (count k) v) ) )", "user": "53b4bddae4b047364c0444b9"}, {"problem": 156, "code": "#(into {} (for [k %2] [k %1]))", "user": "53b40181e4b047364c0444ae"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "53ae16e2e4b047364c044472"}, {"problem": 156, "code": "(fn m [v ks]\n  (into {} (map #(vector % v) ks)))", "user": "53b39d82e4b047364c0444a6"}, {"problem": 156, "code": "(fn build-map\n  ([default-val input-seq]\n   (build-map default-val input-seq []))\n  ([default-val input-seq build-pairs]\n   (if (empty? input-seq)\n       (into {} build-pairs)\n       (build-map default-val (rest input-seq) (conj build-pairs (vector (first input-seq) default-val))))))", "user": "53b05a36e4b047364c044481"}, {"problem": 156, "code": "(fn defaultmap\n  [default keywords]\n    (assoc (if (empty? (rest keywords))\n             {}\n             (defaultmap default\n               (rest keywords)))\n      (first keywords) default))", "user": "5263c44fe4b03e8d9a4a70b8"}, {"problem": 156, "code": "(fn [d coll] (into {} (map #(vector % d) coll)))", "user": "53b71b94e4b047364c0444cd"}, {"problem": 156, "code": "(fn ass\n  [default da-keys]\n  (reduce #(assoc %1 %2 default) {} da-keys))", "user": "53b6b6c8e4b047364c0444ca"}, {"problem": 156, "code": "(fn [v k] (zipmap k (repeat (count k) v)))", "user": "53b0446fe4b047364c04447f"}, {"problem": 156, "code": "(fn [val keys]\n  (loop [ks keys m {}]\n    (if (empty? ks)\n      m\n      (recur (rest ks) (assoc m (first ks) val)\n       )\n      )\n   )\n  )", "user": "539c88e1e4b0b51d73faaf2c"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "539fa040e4b0ca733b97449f"}, {"problem": 156, "code": "(fn [d l] (reduce #(assoc %1 %2 d) (cons {} l)))", "user": "53b2a7f8e4b047364c04449c"}, {"problem": 156, "code": "(fn [value ks]\n  (into {} (map #(assoc {} % value) ks)))", "user": "53b9bb15e4b047364c0444ed"}, {"problem": 156, "code": "(fn [v m] (reduce #(assoc % %2 v) {} m))", "user": "53b41d17e4b047364c0444b1"}, {"problem": 156, "code": "(fn titi [v ks] (into {} ((fn [_value _keys] (for [_key _keys] {_key _value})) v ks)))", "user": "53b890e1e4b047364c0444df"}, {"problem": 156, "code": "(fn [x coll] (reduce #(assoc %1 %2 x) {} coll))", "user": "53b7c21ae4b047364c0444d4"}, {"problem": 156, "code": "#(zipmap   %2 (repeat %))", "user": "52eaba10e4b09f7907dd14c2"}, {"problem": 156, "code": "(fn create-map [v ks]\n  (reduce conj {} (map #(vector % v) ks))\n  )", "user": "5245e320e4b09dbe66b56177"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (repeat (count ks) v)))", "user": "53bb512ce4b047364c044503"}, {"problem": 156, "code": "(fn [v m]\n   (zipmap m (repeat v)))", "user": "53a94512e4b047364c044433"}, {"problem": 156, "code": "(fn [v k] (zipmap  k (repeat (count k) v)))", "user": "53bb4cb1e4b047364c044502"}, {"problem": 156, "code": "(fn generate-map [dv ks]\n    (let [joiner (fn [a b] (conj a [b dv]))]\n        (reduce joiner {} ks)))", "user": "53b4344de4b047364c0444b4"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %1)))", "user": "53bce179e4b0d9a98559a6c1"}, {"problem": 156, "code": "(fn\n  [d l]\n  (zipmap l (repeat d))\n  )", "user": "53bd6fcfe4b0d9a98559a6d0"}, {"problem": 156, "code": "(fn [x col] (reduce #(assoc %1 %2 x) {} col))", "user": "53bc76fae4b047364c044511"}, {"problem": 156, "code": "(fn [d k](apply hash-map ((fn[default ks](reduce (fn [x y](conj x y default )) []  ks )) d k)))", "user": "53bd65abe4b0d9a98559a6ce"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5353726be4b084c2834f4b00"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "53bd8d27e4b0d9a98559a6d6"}, {"problem": 156, "code": "(fn [x y] (apply merge (map #(assoc {} % x) y)))", "user": "52ee9ac7e4b05e3f0be25ec9"}, {"problem": 156, "code": "(fn [default xs] (zipmap xs (repeat default)))", "user": "53bd6ad0e4b0d9a98559a6cf"}, {"problem": 156, "code": "(fn [a b] (apply array-map (apply concat (for [k b] [k a]))))", "user": "53beacf9e4b0d9a98559a6e3"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "53b7fbbde4b047364c0444d6"}, {"problem": 156, "code": "(fn [x y]\n  (reduce #(merge %1 {%2 x}) {} y))", "user": "52cf1e25e4b07d0d72b2739c"}, {"problem": 156, "code": "(fn [x s]\n  (zipmap s (repeat x)))", "user": "5140771ae4b076604f1aa555"}, {"problem": 156, "code": "(fn [defv col] (into {} (map #(vector % defv) col)))", "user": "53164ccce4b08068f379ed45"}, {"problem": 156, "code": "(fn [dv mkeys]\n  (zipmap mkeys (take (count mkeys) (repeat dv))))", "user": "53b85932e4b047364c0444db"}, {"problem": 156, "code": "(fn [default coll]\n  (reduce\n   (fn [m el]\n     (assoc m el default))\n   {}\n   coll)\n)", "user": "52d6d490e4b09f7907dd1369"}, {"problem": 156, "code": "#(into {} (for [i %2] {i %1}))", "user": "5372e7d9e4b06d7f452d9e02"}, {"problem": 156, "code": "(fn foo [v ks]\n  (apply hash-map (mapcat #(list % v) ks)))", "user": "4daeac1bedd6309eace4d15d"}, {"problem": 156, "code": "(fn [default-value key-seq]\n  (loop [m {}\n         s key-seq]\n    (if (empty? s)\n      m\n      (recur (assoc m (first s) default-value) (rest s)))))", "user": "53bab6fae4b047364c0444fb"}, {"problem": 156, "code": "(fn [el v] (reduce #(assoc %1 %2 el ) {} v))", "user": "53c1ce3ee4b00fb29b221268"}, {"problem": 156, "code": "(fn [dv kc]\n  (loop [am {}, ks kc]\n    (if (seq ks)\n    (recur (assoc am (first ks) dv) (rest ks))\n    am\n      )\n    )\n  )", "user": "537e4432e4b06839e8705e9f"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %)))", "user": "52b434c9e4b0c58976d9ad1c"}, {"problem": 156, "code": "#(apply conj (conj (for [x %2] [x %1]) {}))", "user": "53c38b8ce4b00fb29b22127b"}, {"problem": 156, "code": "#(zipmap %2 (take 100 (repeat %1)))", "user": "53c349f5e4b00fb29b22127a"}, {"problem": 156, "code": "(fn [x y] (reduce #(conj %1 {%2 x}) {} y))", "user": "5367bc60e4b0243289761e81"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "51fbd873e4b0f1313d468a12"}, {"problem": 156, "code": "#(let [m {}] (apply merge (for [key %2] (assoc m key %1))))", "user": "53c06438e4b0c98a41f5ccb0"}, {"problem": 156, "code": "(fn [default arr] (zipmap arr (repeat default)))", "user": "4ed94cd6535d10e5ff6f5302"}, {"problem": 156, "code": "(fn [d k]  \n  (loop [ks k result {}]\n  \t(if ks       \n      (recur (next ks) (conj result [(first ks) d]))\n      result)))", "user": "53c649d3e4b00fb29b221297"}, {"problem": 156, "code": "(fn [default-value keys] \n  (reduce (fn [a row] (assoc a row default-value)) {} keys)\n  )", "user": "53c6c9dfe4b00fb29b2212a1"}, {"problem": 156, "code": "(fn [d c] (reduce #(conj %1 {%2 d}) {} c))", "user": "53c6db22e4b00fb29b2212a2"}, {"problem": 156, "code": "(fn defaults [default values]\n(into {} (map #(assoc {} % default) values))\n  )", "user": "5312807fe4b08068f379ecfc"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat (count %2) %)))", "user": "53195519e4b08068f379ed7b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "53afddabe4b047364c04447e"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "4fec08e8e4b0681fd128dc9d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "538db083e4b0b51d73faae74"}, {"problem": 156, "code": "(fn dflt-map [dflt coll] \n  (apply hash-map \n         (apply concat \n          (for [k coll default (list dflt)]\n            (list k default)))))", "user": "53c126fce4b00fb29b22125b"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "51fa63b3e4b0f1313d4689d5"}, {"problem": 156, "code": "(fn [sw vs] (zipmap vs (repeat (count vs) sw)))", "user": "53a899e0e4b047364c04442b"}, {"problem": 156, "code": "(fn [d ks] (reduce merge {} (for [k ks] [k d])))", "user": "4e617114535d8ccf87e9fe5b"}, {"problem": 156, "code": "(fn [val coll] (reduce (fn [m v](merge m (hash-map v val))) {} coll ) )", "user": "537bca8be4b06839e8705e71"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "52097e55e4b0e152394d76f4"}, {"problem": 156, "code": "(fn [v keys] (apply merge (map #(hash-map % v) keys)))", "user": "53b615cce4b047364c0444c2"}, {"problem": 156, "code": "(fn [v ks]\n  (reduce conj {}\n    (map\n      (fn [k] [k v])\n      ks\n    )\n  )\n)", "user": "53ca41dae4b00fb29b2212c8"}, {"problem": 156, "code": "(fn [v coll]\n  (apply conj (map #(assoc {} % v) coll)))", "user": "53c9d29ae4b00fb29b2212c2"}, {"problem": 156, "code": "#(zipmap %2 [% % %])", "user": "534fa9dae4b084c2834f4acf"}, {"problem": 156, "code": "(fn [v k] (apply hash-map (interleave k (repeat v))))", "user": "537a620be4b06839e8705e5f"}, {"problem": 156, "code": "(fn [default-val keys-seq]\n  (letfn [(append-default [default-val coll k]\n                        (if (contains? coll k) coll \n                          (assoc coll k default-val)))]\n  (reduce (partial append-default default-val) {} keys-seq)))", "user": "53cbe808e4b00fb29b2212d4"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "53bed4b5e4b0c98a41f5cc94"}, {"problem": 156, "code": "(fn\n  [d keyz]\n  (zipmap keyz\n          (repeat (count keyz) d)))", "user": "50a122a1e4b08df8156e9e54"}, {"problem": 156, "code": "(fn [d ks] (into {} (map vector ks (repeat d))))", "user": "4f107e0e535d64f60314641c"}, {"problem": 156, "code": "(fn \n  [dv kys]\n  (reduce #(assoc %1 %2 dv) {} kys)\n  )", "user": "53ce1daee4b00fb29b2212ec"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))\n;#(apply assoc {} (interleave %2 (repeat %1)))", "user": "53cacdb5e4b00fb29b2212cb"}, {"problem": 156, "code": "(fn [x y] (apply merge (map #(hash-map % x) y)))", "user": "53cdb2c4e4b00fb29b2212e5"}, {"problem": 156, "code": "(fn mkmap\n  ([v keys]\n     (mkmap v keys {}))\n  ([v keys m]\n     (if (not (empty? keys))\n       (mkmap v (butlast keys) (assoc m (last keys) v))\n       m)))", "user": "53cd66dee4b00fb29b2212e2"}, {"problem": 156, "code": "(fn [default kys] (zipmap kys (repeat default)))", "user": "53cd5cd5e4b00fb29b2212e1"}, {"problem": 156, "code": "(fn [default keys]\n    (into {} (map (fn [key]\n                      [key default])\n                  keys)))", "user": "53a9793ae4b047364c044436"}, {"problem": 156, "code": "(fn [d s] (zipmap s (repeat d)))", "user": "53cd4920e4b00fb29b2212de"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "53ce8cb5e4b00fb29b2212f2"}, {"problem": 156, "code": "; this ones a duzy\n\n#(zipmap %2 (repeat %1))", "user": "53cdbad1e4b00fb29b2212e6"}, {"problem": 156, "code": "(fn [val keys]\n  (into {}\n        (map (fn [key] [key val]) keys)))", "user": "52af0fd3e4b0c58976d9acb5"}, {"problem": 156, "code": "(fn [v ks] (reduce conj (map hash-map ks (repeat v))))", "user": "51b8d3d5e4b050a1176cd69d"}, {"problem": 156, "code": "(fn[val keys] (zipmap keys (repeat val)))", "user": "534db51be4b084c2834f4aa6"}, {"problem": 156, "code": "#(into {} (for [x %2] [x %1]))", "user": "53ce4cd4e4b00fb29b2212ef"}, {"problem": 156, "code": "(fn [elem col]\n  (loop [result {}\n         [h & t] col]\n    (if (nil? h)\n      result\n      (recur (assoc result h elem) t))))", "user": "53cd5226e4b00fb29b2212e0"}, {"problem": 156, "code": "(fn f [d c]\n  (apply merge (map #(hash-map % d) c)))", "user": "53c0bc5fe4b00fb29b221257"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "53cf1648e4b00fb29b2212fa"}, {"problem": 156, "code": "#(reduce (fn [a b] (assoc a b %1)) {} %2)", "user": "53d032ace4b00fb29b221306"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %)))", "user": "53cafc64e4b00fb29b2212cf"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "4e894068535d4ef0aa30db97"}, {"problem": 156, "code": "(fn [def-val ks]\n  (reduce (fn [m k] (conj m [k def-val]))\n          {}\n          ks))", "user": "53d20e14e4b00fb29b22131a"}, {"problem": 156, "code": "(fn [default s]\n  (apply merge \n         (map #(hash-map % default) s)\n         )\n  )", "user": "53d11f7fe4b00fb29b221310"}, {"problem": 156, "code": "#(into {} (for [k %2] [k %1]))", "user": "53d28800e4b00fb29b22131e"}, {"problem": 156, "code": "(fn [x coll]\n  (apply merge (map #(hash-map % x) coll)))", "user": "52ff6ea0e4b0d8b024fd3707"}, {"problem": 156, "code": "(fn [x,m] (apply hash-map (interleave m (repeat x))))", "user": "51e8736ae4b006d205356a4f"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat (count %2) %1)))", "user": "51071f2ee4b05b2b4eee748e"}, {"problem": 156, "code": "(fn [v k]\n  (zipmap k (take (count k) (cycle (list v)))))", "user": "53d2afede4b00fb29b221321"}, {"problem": 156, "code": "(fn [value keys]\n  (reduce conj (map (fn [x] {x value}) keys)))", "user": "539dcb24e4b0b51d73faaf3d"}, {"problem": 156, "code": "(fn [y z] (into {} (vec (map (fn [x] (vec (list x y))) z))))", "user": "53d5d24de4b0e771c302544a"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "536c1531e4b0fc7073fd6e36"}, {"problem": 156, "code": "(fn [val x] (reduce #(assoc % %2 val) {} x))", "user": "51c8f1d8e4b07ef393169e5d"}, {"problem": 156, "code": "(fn my-default [value ls]\n  (if (empty? ls)\n    '{}\n    (conj (my-default value (rest ls)) {(first ls) value})))", "user": "53d87449e4b0e771c302546d"}, {"problem": 156, "code": "#(reduce (fn[m k] (assoc m k %1)) {} %2 )", "user": "53a83c74e4b047364c044426"}, {"problem": 156, "code": "#(reduce (fn [map key] (assoc map key %1)) {} %2)", "user": "53da3fcde4b0e771c3025497"}, {"problem": 156, "code": "(fn\n  [val keys]\n  (zipmap keys (into [] (rest (conj (take (count keys) (repeat val)) 6)))))", "user": "53d6b266e4b0e771c3025459"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "534e60c2e4b084c2834f4ab2"}, {"problem": 156, "code": "(fn [x c] (into {} (map #(->[% x]) c)))", "user": "4e6b8ac8535d8ccf87e9ff19"}, {"problem": 156, "code": "(fn [d ks] (into {} (for [x ks] [x d])))", "user": "5342f075e4b084c2834f4a14"}, {"problem": 156, "code": "(fn [x col] (reduce #(assoc %1 %2 x) {} col))", "user": "52cda980e4b07d0d72b2737b"}, {"problem": 156, "code": "(fn [v m] (zipmap m (repeat v)))", "user": "53cfa79ce4b00fb29b2212ff"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "53dc822ce4b094d41abdfefb"}, {"problem": 156, "code": "(fn [init-val key-list]\n  (apply conj\n     (map (fn [current-key]\n        (assoc {} current-key init-val)) key-list)))", "user": "53844970e4b06839e8705eef"}, {"problem": 156, "code": "(fn [defval defkeys] (reduce #(conj %1 [%2 defval]) {} defkeys))", "user": "53d6cf90e4b0e771c302545c"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "53da8fede4b0e771c30254a3"}, {"problem": 156, "code": "(fn map-defaults [dval kseq] (reduce \n                              (fn [result current-key] (assoc result current-key dval))   \n                                   {} \n                                   kseq))", "user": "53de622ce4b0d874e779ae34"}, {"problem": 156, "code": "(fn [default keys]\n  (zipmap keys (repeat (count keys) default)))", "user": "53ddd44be4b0d874e779ae2e"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "53ded676e4b0d874e779ae3b"}, {"problem": 156, "code": "(fn [default xs] (apply hash-map (interleave xs (repeat default))))", "user": "53c3397be4b00fb29b221279"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "53d5e45ae4b0e771c302544e"}, {"problem": 156, "code": "#(apply hash-map (conj (vec (interpose % %2)) %))", "user": "533923fde4b0e30313ee6ca4"}, {"problem": 156, "code": "(fn \n  [ d v]\n  (into {} ( map #( conj ( conj [] %) d) v)))", "user": "516d227fe4b06f078fab252d"}, {"problem": 156, "code": "(fn [v ks]\n  (zipmap ks (repeat v)))", "user": "51c6eabde4b07ef393169e3c"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "53da38e8e4b0e771c3025494"}, {"problem": 156, "code": "#(into {} (zipmap %2 (repeat %1)))", "user": "5377a23ce4b06839e8705e39"}, {"problem": 156, "code": "#(zipmap %2 (for [x (range (count %2))] %))", "user": "53d0d7a9e4b00fb29b22130c"}, {"problem": 156, "code": "(fn [d s] (reduce #(assoc %1 %2 d) {} s))", "user": "53e19461e4b0d874e779ae59"}, {"problem": 156, "code": "(fn [d k] (zipmap k (repeat (count k) d)))", "user": "4db1e34f1254ad5b4805fa73"}, {"problem": 156, "code": "(fn [d ks] (zipmap ks (repeat (count ks) d)))", "user": "4eea1a41535d93acb0a66899"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %)))", "user": "5373451fe4b06d7f452d9e0b"}, {"problem": 156, "code": "(fn [default keys]\n  (reduce (fn [a b] (conj a [b default])) {} keys))", "user": "53df4292e4b0d874e779ae40"}, {"problem": 156, "code": "#(reduce conj (for [k %2] {k %1}))", "user": "53dadf1de4b0e771c30254ad"}, {"problem": 156, "code": "(fn default-map [v ks] (reduce #(assoc %1 %2 v) {} ks))", "user": "53dc94c8e4b094d41abdfefc"}, {"problem": 156, "code": "#(apply hash-map (apply concat (map (fn [x] (list x %1)) %2)))", "user": "53e2b212e4b036ad0777e3f4"}, {"problem": 156, "code": "(fn [v coll] (reduce (fn [a b] (assoc a b v)) {} coll))", "user": "53e241a6e4b036ad0777e3f0"}, {"problem": 156, "code": "(fn mapper [dk v] (if (empty? v) {}\n             (merge {(first v) dk} (mapper dk (rest v)))))", "user": "53e2ac1ae4b036ad0777e3f3"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "53e051ece4b0d874e779ae4b"}, {"problem": 156, "code": "(fn[x data](zipmap data (take (count data) (repeat x))))", "user": "53d10553e4b00fb29b22130f"}, {"problem": 156, "code": "(fn [x keys] (into {} (map #(assoc {} % x) keys)))", "user": "53e4fa2ce4b036ad0777e454"}, {"problem": 156, "code": "#(into {}\n\t    (map (fn [k] [k %1]) %2))", "user": "530bae80e4b02e82168697d0"}, {"problem": 156, "code": "#(apply (partial conj {}) (for [key %2] [key %1]))", "user": "53e543efe4b036ad0777e457"}, {"problem": 156, "code": "(fn [default-value keys]\n  (into {}\n        (map (fn [key]\n               [key default-value])\n             keys)))", "user": "53e57ba2e4b036ad0777e45c"}, {"problem": 156, "code": "(fn destruct \n  [default keys]\n  (into {} (map (fn [value] {value default}) keys)))", "user": "53e150e5e4b0d874e779ae53"}, {"problem": 156, "code": "#(into {} (for [x %2] {x %1}))", "user": "53e76bb2e4b036ad0777e47d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "51b9f5a6e4b0e871ca49590e"}, {"problem": 156, "code": "(fn [default_value seq] (loop [keys seq newmap {}] (if (empty? keys) newmap (recur (rest keys) (assoc newmap (first keys) default_value)))))", "user": "53b952eee4b047364c0444e6"}, {"problem": 156, "code": "#(reduce merge (map (fn [x] (hash-map x %1)) %2))", "user": "528d6b10e4b0239c8a67aec3"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "53d88bd5e4b0e771c302546e"}, {"problem": 156, "code": "#(apply conj (map hash-map %2 (repeat (count %2) %1)))", "user": "53e4b5a3e4b036ad0777e44b"}, {"problem": 156, "code": "#(into {} (for [k %2] [k %]))", "user": "52eb2ec9e4b0705949c44439"}, {"problem": 156, "code": "(fn [a b] (into {} (mapcat (fn [x] {x a}) b)))", "user": "53e91473e4b036ad0777e495"}, {"problem": 156, "code": "#(into {} (for [k %2] [k %1]))", "user": "4f1ff504535d64f6031464a6"}, {"problem": 156, "code": "(fn [default map-keys] (apply array-map (conj (vec (interpose default map-keys)) default)))", "user": "53dfd77fe4b0d874e779ae45"}, {"problem": 156, "code": "(fn [default sequ]\n\t(reduce #(assoc %1 %2 default) {} sequ))", "user": "53e30fcae4b036ad0777e3fc"}, {"problem": 156, "code": "(fn [value keys] (apply hash-map (interleave keys (repeat value))))", "user": "4dae869dedd6309eace4d154"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "53ea5307e4b036ad0777e4e2"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "530fbbaee4b08068f379eccf"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "53e8cefde4b036ad0777e48d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "53dc05d4e4b094d41abdfefa"}, {"problem": 156, "code": "(fn [d v] (into {} (map #(assoc {} % d) v)))", "user": "53ea72b6e4b036ad0777e4e5"}, {"problem": 156, "code": "(fn [d coll] (zipmap coll (repeat d)))", "user": "53e9681de4b036ad0777e4a4"}, {"problem": 156, "code": "(fn [dv s] \n  (into {} (for [x s] {x dv})))", "user": "53e8698ce4b036ad0777e486"}, {"problem": 156, "code": "(fn [default coll] \n   (reduce #(assoc % %2 default) {} coll))", "user": "53e15371e4b0d874e779ae54"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (repeat v)))", "user": "5343753ae4b084c2834f4a1b"}, {"problem": 156, "code": "(fn [x coll] (into {} (for [i coll] {i x})))", "user": "53e92aafe4b036ad0777e49a"}, {"problem": 156, "code": "(fn [v k]\n  (zipmap k (map (constantly v) k))\n  )", "user": "53edb628e4b0d648e757f4c8"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "516f5b7ee4b0ef3e37990e7e"}, {"problem": 156, "code": "(fn [d v] (zipmap v (repeat d)))", "user": "53d78b64e4b0e771c3025466"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "50f7dac7e4b0f892a5bc246d"}, {"problem": 156, "code": "(fn [value keys] (apply hash-map (apply concat (map (partial conj (list value)) keys))))", "user": "53ecd01fe4b0d648e757f4b9"}, {"problem": 156, "code": "(fn [v coll] (zipmap coll (repeat v)))", "user": "53dfbc75e4b0d874e779ae44"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %1)))", "user": "53f053ebe4b0742d9025b0d3"}, {"problem": 156, "code": "(fn [d coll] (apply hash-map (interleave coll (repeat d))))", "user": "53ee7f2ee4b0d648e757f4cf"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "52ba2639e4b07a9af57922cb"}, {"problem": 156, "code": "(fn [d v] \n  (loop [m {}\n         arr v\n         default d]\n    (if-not (empty? arr)\n      (recur (assoc m (first arr) d) (rest arr) default)\n      m)))", "user": "53cd421ce4b00fb29b2212dd"}, {"problem": 156, "code": "(fn [v m]\n  (into {} (map #(hash-map % v) m)))", "user": "534bfc71e4b084c2834f4a88"}, {"problem": 156, "code": "(fn [default keyz] (reduce #(assoc %1 %2 default) {} keyz))", "user": "53d6bc2fe4b0e771c302545a"}, {"problem": 156, "code": "(fn [dft arr] \n    (loop [res {} i 0]\n\t\t(if (= i (count arr))\n  \t\tres\n    \t(recur (conj res {(arr i) dft}) (inc i))\n    )\n  )\n)", "user": "53f152bce4b0742d9025b0dc"}, {"problem": 156, "code": "(fn [default keys] (into {} (map vector keys (repeat default))))", "user": "53ed6befe4b0d648e757f4c5"}, {"problem": 156, "code": "(fn [v ks] (reduce #(assoc %1 %2 v) {} ks))", "user": "53ca23e3e4b00fb29b2212c6"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %1)))", "user": "52d2cb0fe4b099d49816f0b5"}, {"problem": 156, "code": "(fn [v, ks]\n  (reduce (fn [acc, k]\n            (assoc acc k v))\n          {}\n          ks))", "user": "53dd37aee4b0d874e779ae28"}, {"problem": 156, "code": "#(apply conj {} (map vector %2 (repeat %1)))", "user": "53e27bf1e4b036ad0777e3f2"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "53c5b137e4b00fb29b221292"}, {"problem": 156, "code": "(fn [defaultA sequenceA]\n  (loop [default defaultA rem_seq sequenceA built_map {}]\n    (if (empty? rem_seq)\n      built_map\n      (recur\n        default\n        (rest rem_seq)\n        (conj built_map {(first rem_seq) default})\n      )\n    )\n  )\n)", "user": "53f17931e4b0742d9025b0dd"}, {"problem": 156, "code": "(fn zip\n  [v coll]\n  (zipmap coll (repeat v)))", "user": "53ea3a63e4b036ad0777e4dc"}, {"problem": 156, "code": "(fn [default s] (zipmap s (repeat default)))", "user": "53ef5c13e4b0742d9025b0cb"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "53531724e4b084c2834f4af9"}, {"problem": 156, "code": "#(reduce (fn [m v] (assoc m  v %1)) {} %2)", "user": "513e8141e4b02b2a3d8235c1"}, {"problem": 156, "code": "(fn [d k] (apply merge (for [x k] {x d})))", "user": "53f592b7e4b0db01ade6f9d0"}, {"problem": 156, "code": "(fn [value map_keys] \n  (loop [entries map_keys\n         results nil]\n    (if(empty? entries)\n      results\n      (let [[current & remaining] entries]\n      (recur remaining (assoc results current value))))))", "user": "53f50c03e4b0db01ade6f9ca"}, {"problem": 156, "code": "(fn [d ks] (into {} (map (fn [k] [k d]) ks)))", "user": "538ca203e4b0b51d73faae5f"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "53e0001be4b0d874e779ae48"}, {"problem": 156, "code": "(fn [v ks] (reduce conj (map (fn [k] {k v}) ks)))", "user": "53f6d555e4b0db01ade6f9e5"}, {"problem": 156, "code": "#(zipmap %2(repeat (count %2) %1))", "user": "53f3a4ace4b0742d9025b0f7"}, {"problem": 156, "code": "(fn [v k] (into {} (map (fn [kk] (conj {} (hash-map kk v)) ) k)))", "user": "53f6566ee4b0db01ade6f9de"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "53f035c2e4b0742d9025b0d2"}, {"problem": 156, "code": "(fn [x xs] (reduce #(assoc %1 %2 x) {} xs))", "user": "53ef7f77e4b0742d9025b0ce"}, {"problem": 156, "code": "(fn [d l] (zipmap l (repeat d)))", "user": "53f5f740e4b0db01ade6f9d8"}, {"problem": 156, "code": "(fn [d ls] (reduce (fn [xs n] (conj xs {n d})) {} ls ))", "user": "53f7f1dde4b0de5c41848567"}, {"problem": 156, "code": "(fn [x xs]\n  (apply hash-map\n         (apply concat\n                (map (fn [a] [a x]) xs)\n         )\n  )\n)", "user": "53f74528e4b0de5c4184855c"}, {"problem": 156, "code": "(fn [init vect] (reduce merge (map #(assoc {} %1 init) vect)))", "user": "5398123ee4b0b51d73faaef3"}, {"problem": 156, "code": "(fn [default keyz]\n  (apply hash-map (interleave keyz (repeat default)))\n  )", "user": "53ed6976e4b0d648e757f4c4"}, {"problem": 156, "code": "(fn [val map] (reduce #(assoc %1 %2 val) {} map))", "user": "53607c32e4b0243289761e37"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "53fa3524e4b0de5c41848578"}, {"problem": 156, "code": "(fn [def-val coll]\n  (zipmap coll (vec (repeat (count coll) def-val))))", "user": "53f5c402e4b0db01ade6f9d4"}, {"problem": 156, "code": "(fn [value key-lst]\n  (let [kv-pairs (map #(vector % value) key-lst)]\n    (reduce conj {} kv-pairs)))", "user": "53fb5256e4b0de5c4184857f"}, {"problem": 156, "code": "(fn [dv coll]\n(loop [c coll h {}]\n  (if (empty? c)\n    h\n    (recur (subvec c 1) (assoc h (first c) dv)))))", "user": "509b1204e4b0412cdea6eb1d"}, {"problem": 156, "code": "(fn [value keyset] \n  (zipmap keyset (repeat value)))", "user": "525b4e8de4b0cb4875a45d0f"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "53f77b6ae4b0de5c4184855f"}, {"problem": 156, "code": "(fn peu [x y] (if (empty? y) {} (conj (peu x (rest y)) {(first y) x})))", "user": "53fc8424e4b0de5c418485b3"}, {"problem": 156, "code": "(fn def-map [def-arg args]\n  (reduce #(assoc %1 %2 def-arg) {} args)\n  )", "user": "53fcba1fe4b0de5c418485d5"}, {"problem": 156, "code": "(fn [x, v] (zipmap v (replicate (count v) x)))", "user": "53e1e1f1e4b0d874e779ae5e"}, {"problem": 156, "code": "(fn [v keys] (reduce #(assoc % %2 v) {} keys))", "user": "53d86564e4b0e771c302546b"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "53968a70e4b0b51d73faaee0"}, {"problem": 156, "code": "(fn [a b] (reduce #(assoc %1 %2 a) {} b))", "user": "4e5c801e535d8a8b8723a2c1"}, {"problem": 156, "code": "(fn [v ks] (reduce (fn [m k] (assoc m k v)) {} ks))", "user": "54008b88e4b0de5c4184860d"}, {"problem": 156, "code": "#(zipmap %2 (repeat(count %2) %1))", "user": "53ed2fafe4b0d648e757f4c1"}, {"problem": 156, "code": "#(into {} (for [k %2] [k %1]))", "user": "5400fc30e4b0de5c4184861b"}, {"problem": 156, "code": "(fn [default keyvalues] (zipmap keyvalues (repeat default)))", "user": "54021f13e4b0df28a13c62cc"}, {"problem": 156, "code": "(fn [value coll]\n  (into {} (for [c coll] {c value})))", "user": "53bf9cfbe4b0c98a41f5cca4"}, {"problem": 156, "code": "(fn \n  [d ks]\n  (into {} (map #(hash-map %1 d) ks)))", "user": "5401aefbe4b0df28a13c62c7"}, {"problem": 156, "code": "(fn [default a-seq]\n  (zipmap a-seq (repeat (count a-seq) default)))", "user": "53fd0a22e4b0de5c418485e1"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "53eaa804e4b036ad0777e4ea"}, {"problem": 156, "code": "#(into {} (map (fn [x] {x %1}) %2))", "user": "53fe1c3be4b0de5c418485f2"}, {"problem": 156, "code": "(fn [a b] (into {} (for [i b] [i a])))", "user": "53fb4843e4b0de5c4184857d"}, {"problem": 156, "code": "(fn [default ks]\n  (reduce #(assoc %1 %2 default) {} ks))", "user": "53f5666ee4b0db01ade6f9cf"}, {"problem": 156, "code": "(fn [values  my-keys]   \n     (zipmap  my-keys  (take  (count  my-keys) (repeat  values))))", "user": "5403f305e4b0df28a13c62e3"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "524bc937e4b09eba1c0223ee"}, {"problem": 156, "code": "#(apply array-map (reverse (cons %1 (reverse (interpose %1 %2)))))", "user": "52c08c59e4b07a9af5792351"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "517ecab1e4b09104ecebe7e8"}, {"problem": 156, "code": "(fn [d k] (reduce #(assoc %1 %2 d) {} k))", "user": "53f78adce4b0de5c41848562"}, {"problem": 156, "code": "(fn [defval vecs] \n                    (apply conj (map (fn [k]\n                                       {k defval}) \n                                     vecs)))", "user": "5251b11be4b0541d1855b87b"}, {"problem": 156, "code": "(fn [x y] (zipmap y (cycle [x])))", "user": "53f1c05ee4b0742d9025b0e1"}, {"problem": 156, "code": "(fn [x y] (zipmap y (repeat x) ))", "user": "53fdc4b8e4b0de5c418485ea"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "53fdbe0fe4b0de5c418485e9"}, {"problem": 156, "code": "(fn dmap [default inds]\n  (zipmap inds (repeat  default)))", "user": "52ed7458e4b0a18b0f5dd9ed"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %))", "user": "53350264e4b0656e627bfd73"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "53fc4561e4b0de5c4184859a"}, {"problem": 156, "code": "(fn [x y] (apply hash-map (interleave y (map (constantly x) y))))", "user": "540479e7e4b0addc1aec665a"}, {"problem": 156, "code": "(fn [defval init-keys]\n  (loop [res {}, key init-keys]\n    (if (empty? key)\n      res\n      (recur \n        (assoc res (first key) defval)\n        (rest key))\n      )))\n\n;; or\n\t  \n;#(zipmap %2 (repeat %1))", "user": "53be3ee7e4b0d9a98559a6df"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "54042a19e4b0df28a13c62e4"}, {"problem": 156, "code": "(fn [x l] (zipmap l (repeat x)))", "user": "53e76728e4b036ad0777e47c"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %1)))", "user": "53a442a6e4b0b62ce300572d"}, {"problem": 156, "code": "(fn [el kys] (into (hash-map) (for [x kys] [x el])))", "user": "53f2370ee4b0742d9025b0e7"}, {"problem": 156, "code": "(fn [x y] (into {} (map #(hash-map % x) y) ))", "user": "54078851e4b0addc1aec66bd"}, {"problem": 156, "code": "(fn [d ks] \n  (into {} (map #(vector % d) ks)))", "user": "53161a56e4b08068f379ed3e"}, {"problem": 156, "code": "(fn default-value [v ks]\n  (into {} (map (fn [k] [k v]) ks)))", "user": "51d42f44e4b013d740b70ddb"}, {"problem": 156, "code": "(fn map-defaults\n\t[default my-vec]\n    (loop [m {} v my-vec]\n      (if (empty? v)\n        m\n        (recur (assoc m (first v) default) (rest v)))))", "user": "54091b82e4b0addc1aec66d5"}, {"problem": 156, "code": "(fn [k l] (apply hash-map (interleave l (repeat k))))", "user": "53e8c684e4b036ad0777e48b"}, {"problem": 156, "code": "(fn [d xs] (into {} (map #(hash-map % d) xs)))", "user": "540d7dd1e4b0addc1aec6713"}, {"problem": 156, "code": "(fn [value coll] (into {} (for [x coll] {x value})))", "user": "54094824e4b0addc1aec66da"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (cycle[%1])))", "user": "5286a2a9e4b0239c8a67ae1e"}, {"problem": 156, "code": "(fn [v k]\n  (apply assoc {}\n    (interleave k (repeat v))))", "user": "540c54a7e4b0addc1aec6700"}, {"problem": 156, "code": "(fn [default keys]\n  (apply hash-map (interleave keys (repeat default))))", "user": "540d5085e4b0addc1aec670e"}, {"problem": 156, "code": "(fn [d seq] (reduce #(conj % [%2 d]) {} seq))", "user": "5406eaf3e4b0addc1aec66ad"}, {"problem": 156, "code": "(fn [v keys] (reduce conj (map #(hash-map % v) keys)))", "user": "540e97f9e4b0addc1aec671f"}, {"problem": 156, "code": "#( zipmap %2 ( repeat %1 ) )", "user": "4fbb7010e4b081705acca2e7"}, {"problem": 156, "code": "(fn func3\n  [deflt kys]\n  (reduce (fn [hsh, ky]\n            (conj hsh [ky deflt])) (hash-map) kys))", "user": "540efe2ee4b0addc1aec6724"}, {"problem": 156, "code": "(fn [default pointers]\n  (loop [pointers pointers\n         result {}]\n    (if (= 0 (count pointers))\n      result\n      (recur (rest pointers) (assoc result (first pointers) default)))))", "user": "53c69ebce4b00fb29b22129c"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "53f6bfd9e4b0db01ade6f9e4"}, {"problem": 156, "code": "(fn [default mapkeys]\n  (loop [result {} ks mapkeys]\n    (if (empty? ks)\n      result\n      (recur (assoc result (first ks) default) (rest ks)))))", "user": "540c288ae4b0addc1aec66ff"}, {"problem": 156, "code": "(fn [v ks] \n  (reduce #(assoc %1 %2 v) {} ks))", "user": "540dbc11e4b0addc1aec6715"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "524b827ce4b09eba1c0223d7"}, {"problem": 156, "code": "(fn [default ks]\n  (apply (partial assoc {}) (interleave ks (map (fn [x] default) (range (count ks))))))", "user": "5409f8eae4b0addc1aec66e6"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat (count %2) %)))", "user": "5405ae2be4b0addc1aec6671"}, {"problem": 156, "code": "(fn [d ks] (into {} (for [k ks] [k d])))", "user": "540b4c4de4b0addc1aec66f6"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "540d0087e4b0addc1aec670b"}, {"problem": 156, "code": "(fn [defval init-keys]\n  (letfn [(reform-coll \n           [result remkeys fillval]\n           (if (empty? remkeys) result\n             (reform-coll (assoc result (first remkeys) fillval) (rest remkeys) fillval)))]\n    (reform-coll {} init-keys defval)))", "user": "531571ece4b08068f379ed27"}, {"problem": 156, "code": "(fn [def-val vec] (reduce #(conj %1 {%2 def-val}) {} vec))", "user": "540470dae4b0addc1aec6658"}, {"problem": 156, "code": "(fn [dval keylst] (into {} (for [kk keylst] (assoc nil kk dval))))", "user": "53e92f82e4b036ad0777e49d"}, {"problem": 156, "code": "(fn mappify [default keyseq]\n  (into {} (map #(assoc {} % default) keyseq))\n)", "user": "53b685e0e4b047364c0444c7"}, {"problem": 156, "code": "(fn [v ks] \n  (reduce #(conj {%2 v} %1) {} ks))", "user": "54133900e4b01498b1a719de"}, {"problem": 156, "code": "(fn [default ks]\n  (reduce (fn [acc k]\n            (assoc acc k default))\n          {} ks))", "user": "501948b3e4b0b6630b101db5"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "53ff8c31e4b0de5c41848603"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "533018b2e4b019098a6f8b56"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "52541fe6e4b0541d1855b964"}, {"problem": 156, "code": "(fn [val coll]\n  (reduce #(assoc %1 %2 val) {} coll))", "user": "54159032e4b01498b1a719f5"}, {"problem": 156, "code": "(fn map-defualt [default coll]\n  (into {} (for [c coll] {c default})))", "user": "541096bde4b01498b1a719b2"}, {"problem": 156, "code": "(fn map-builder\n  ([default ks] (map-builder default ks nil))\n  ([default ks acc]\n   (if (empty? ks)\n     acc\n     (map-builder default (rest ks) (assoc acc (first ks) default)))))", "user": "54125eeee4b01498b1a719d3"}, {"problem": 156, "code": "#(loop [ v %1, m %2, result {}] (if (empty? m) result (recur v (rest m) (conj result [(first m) v,]))))", "user": "541619e8e4b01498b1a719f9"}, {"problem": 156, "code": "(fn [x y] (zipmap y (repeat x)))", "user": "4fdf4e2be4b05e33b9224f96"}, {"problem": 156, "code": "(fn fname [default keylist]\n  (if (empty? keylist)\n    {}\n  (assoc \n    (fname default (rest keylist))\n    (first keylist)\n    default)))", "user": "54178782e4b01498b1a71a0c"}, {"problem": 156, "code": "(fn [default ks] (reduce #(assoc %1 %2 default) {} ks))", "user": "540f09b9e4b0addc1aec6725"}, {"problem": 156, "code": "(fn [d l] (into {} (map #(vector % d) l)))", "user": "4f085a31535dcb61093f6c35"}, {"problem": 156, "code": "(fn [v coll]\n  (zipmap coll (repeat v)))", "user": "537f4652e4b06839e8705eb1"}, {"problem": 156, "code": "(fn [default k]\n  (into {} (map #(vector % default) k))\n)", "user": "4ed82830535d10e5ff6f52f7"}, {"problem": 156, "code": "(fn [default arr]\n\t(->> arr\n        (map (fn [x] [x default]))\n        (reduce conj {})))", "user": "541404c2e4b01498b1a719e7"}, {"problem": 156, "code": "(fn map-with-default-vals [default-val ks]\n  (reduce (fn [acc k]\n            (assoc acc k default-val))\n          {}\n          ks))", "user": "53fd66a4e4b0de5c418485e3"}, {"problem": 156, "code": "(fn [v ks] (reduce #(assoc %1 %2 v) {} ks))", "user": "51c1b644e4b0d204dbe2ca12"}, {"problem": 156, "code": "(fn [d c] (into {} (map #(vector % d) c)))", "user": "541b37d2e4b01498b1a71a64"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5282f54be4b0239c8a67ada0"}, {"problem": 156, "code": "(fn [v ks]\n  (reduce #(conj %1 [%2 v]) \n          {} \n          ks))", "user": "541d3c0fe4b01498b1a71a7e"}, {"problem": 156, "code": "(fn [d k] \n  (reduce \n   (fn [coll k] (assoc coll k d))\n   {} k))", "user": "541c1e46e4b01498b1a71a70"}, {"problem": 156, "code": "#(into {} (map (fn [x](vector x %)) %2))", "user": "54187e84e4b01498b1a71a1b"}, {"problem": 156, "code": "(fn\n  [value mykeys]\n  (into {} \n        (map (fn [akey] [akey value]) mykeys)\n  )\n)", "user": "520fca70e4b080a8d9b9d631"}, {"problem": 156, "code": "(fn [d v] (reduce merge (for [x v] (sorted-map x d))))", "user": "511036c5e4b04c71fce993ee"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "541e4768e4b01498b1a71a8b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5409a12fe4b0addc1aec66df"}, {"problem": 156, "code": "(fn [d coll] (into {} (map #(vector % d) coll)))", "user": "535774c2e4b04ce2eb3ed27c"}, {"problem": 156, "code": "(fn [default ks]\n  (into {} (map #(vector % default) ks)))", "user": "541f6bc0e4b01498b1a71a98"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat 3 %1)))", "user": "5412ef7ee4b01498b1a719da"}, {"problem": 156, "code": "#(apply merge (map hash-map  %2 (repeat (count %2) %)))", "user": "541521cfe4b01498b1a719f3"}, {"problem": 156, "code": "#(reduce conj {} (map vector %2 (repeat %)))", "user": "4fad9da0e4b081705acca23c"}, {"problem": 156, "code": "#(into {} (map (fn [k] [k %1]) %2))", "user": "541ae7dbe4b01498b1a71a61"}, {"problem": 156, "code": "(fn [n s] (into {} (for [i s] [i n])))", "user": "53f7820be4b0de5c41848560"}, {"problem": 156, "code": "#(into {} (for [x %2] [x, %1]))", "user": "54202a4fe4b01498b1a71a9f"}, {"problem": 156, "code": "(fn [v s] (into {}  (map #(assoc {} % v) s)))", "user": "4e68dfe6535d8ccf87e9fe91"}, {"problem": 156, "code": "(fn doit [d ks] \n  \t(\n   \t\treduce #(\n    \t\tassoc %1 %2 d\n  \t\t)\n   \t\t{}\n   \t\tks\n\t)\n)", "user": "516ee939e4b06aac486e5b34"}, {"problem": 156, "code": "(fn create-map [default coll]\n  (loop [ret {} remaining coll]\n    (if (empty? remaining)\n      ret\n      (recur (assoc ret (first remaining) default) (rest remaining)))))", "user": "4ff0e01fe4b0678c553fc328"}, {"problem": 156, "code": "(fn [default l]  (apply array-map (interleave l (repeat (count l) default))))", "user": "4f9a0f71e4b0dcca54ed6d04"}, {"problem": 156, "code": "(fn\n  [val keys]\n    (loop [map {}\n           v val\n           ks (seq keys)]\n      (if (and ks v)\n        (recur (assoc map (first ks) v)\n                v\n               (next ks))\n        map)))", "user": "54213a8fe4b01498b1a71aaf"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5421cd6be4b01498b1a71ab7"}, {"problem": 156, "code": "(fn [d ks] \n   (apply merge\n   (let [\n     m {}\n     m (map #(assoc m % d) ks)]\n     m\n     ))\n )", "user": "5412646de4b01498b1a719d4"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "53ef0df0e4b0d648e757f4d2"}, {"problem": 156, "code": "(fn [default v]\n  (zipmap v (repeat default)))", "user": "5424c523e4b01498b1a71b03"}, {"problem": 156, "code": "(fn [x s]  (apply assoc {} (interleave s (repeat x))))", "user": "5423dc6ae4b01498b1a71ad5"}, {"problem": 156, "code": "(fn [v ks]\n  (apply conj (for [k ks]\n                {k v})))", "user": "540961e9e4b0addc1aec66db"}, {"problem": 156, "code": "(fn [d k]\n  (apply hash-map (interleave k (repeat d)))\n  )", "user": "4ec56864535d6d7199dd369d"}, {"problem": 156, "code": "#(zipmap (seq %2) (repeat %1))", "user": "54185dc3e4b01498b1a71a19"}, {"problem": 156, "code": "(fn [default keys]\n  (into {} (map #(do [%1 default]) keys)))", "user": "542769f8e4b01498b1a71b24"}, {"problem": 156, "code": "(fn [x lst] (into {} (map #(vector % x) lst)))", "user": "54194782e4b01498b1a71a29"}, {"problem": 156, "code": "(fn [x lister]\n  (into {} (map (fn [el] [el x]) lister)))", "user": "54196d63e4b01498b1a71a34"}, {"problem": 156, "code": "#(into {} (for [x %2] {x %1}))", "user": "53e88247e4b036ad0777e489"}, {"problem": 156, "code": "(fn [defaultValue mySequence]\n  (zipmap (apply vector (reverse mySequence)) (repeat (count mySequence) defaultValue)))", "user": "5425d00ee4b01498b1a71b12"}, {"problem": 156, "code": "#(apply merge (map (fn [x] {x %1}) %2))", "user": "54299d4be4b01498b1a71b3d"}, {"problem": 156, "code": "(fn [x c]\n  (apply assoc {} (interleave c (repeat (count c) x))))", "user": "4dd1de4d535dae65d5c462d7"}, {"problem": 156, "code": "(fn [v keyz]\n  (apply merge (map #(hash-map % v) keyz)))", "user": "541475afe4b01498b1a719eb"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "540c5950e4b0addc1aec6701"}, {"problem": 156, "code": "(fn [d k] (reduce conj (map #(hash-map % d) k)))", "user": "542a348be4b01498b1a71b3f"}, {"problem": 156, "code": "(fn [x,y] (zipmap y (take (count y) (cycle (list x)))))", "user": "5422e975e4b01498b1a71ac9"}, {"problem": 156, "code": "(fn [default, m] (reduce conj {} (map #(assoc nil % default) m)))", "user": "54258e71e4b01498b1a71b0e"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "54246fcce4b01498b1a71aed"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "52c911dde4b0c2d177d6213a"}, {"problem": 156, "code": "(fn [d xs] (into {} (map #(vector % d) xs)))", "user": "542d2385e4b0dad94371f2b2"}, {"problem": 156, "code": "(fn make-map [value keyz]\n   (into {} (map #(vector % value) keyz)))", "user": "5429986ce4b01498b1a71b3b"}, {"problem": 156, "code": "(fn [x y] (zipmap y (repeat x) ))", "user": "542baf7ce4b0dad94371f291"}, {"problem": 156, "code": "(fn [default keys] \n  \t(into {} \n          (for [x keys] {x default})))", "user": "541cfd61e4b01498b1a71a7b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "534678b9e4b084c2834f4a3d"}, {"problem": 156, "code": "#(loop [[head & tail] %2\n         res {}]\n    (if (empty? tail)\n      (merge {head %1} res)\n      (recur tail (merge {head %1} res))))", "user": "542ce413e4b0dad94371f2ae"}, {"problem": 156, "code": "(fn [v m]\n    (zipmap m (repeat (count m) v))\n)", "user": "53765e1ae4b06839e8705e23"}, {"problem": 156, "code": "(fn [k coll]\n  (zipmap coll (vec (repeat (count coll) k))))", "user": "51ca5378e4b08b1cbd0d9480"}, {"problem": 156, "code": "(fn [x y] (zipmap y (repeat x)))", "user": "542da97ae4b0dad94371f2ba"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5360e9ade4b0243289761e3b"}, {"problem": 156, "code": "(fn [defval ks]\n  (let [m (transient {})]\n    (doseq [k ks]\n      (assoc! m k defval))\n    (persistent! m)))", "user": "5426a59ee4b01498b1a71b1b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "542789efe4b01498b1a71b25"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5400e918e4b0de5c41848619"}, {"problem": 156, "code": "(fn [dv sq] (apply assoc {} (interleave sq (repeat dv))))", "user": "543272b8e4b0dad94371f2ef"}, {"problem": 156, "code": "(fn\n [x a]\n (into {} (map #(vector % x) a)))", "user": "542f574be4b0dad94371f2d0"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54297741e4b01498b1a71b39"}, {"problem": 156, "code": "(fn [default, desiredKeys] \n  (loop [keysLeft desiredKeys\n         output {}]\n    (if (= keysLeft [])\n      output\n      (recur (rest keysLeft) (assoc output (first keysLeft) default)))))", "user": "54336443e4b0b6b47310fcde"}, {"problem": 156, "code": "#(into {} (for [x %2] {x %1}))", "user": "53f14389e4b0742d9025b0db"}, {"problem": 156, "code": "(fn [d s] (into {} (map #(vector % d) s)))", "user": "51c3c6a6e4b0851ac09658f8"}, {"problem": 156, "code": "(fn [defval keycoll] \n  (into {} (for [k keycoll] {k defval})))", "user": "542c44f8e4b0dad94371f2a1"}, {"problem": 156, "code": "(fn [default myvector]\n   (into {}\n         (map (fn [x] conj {} [x default]) myvector\n              )\n         )\n   )", "user": "53f3b216e4b0742d9025b0f8"}, {"problem": 156, "code": "(fn [default keys]\n   (loop [keys keys\n          result {}]\n     (if (empty? keys)\n       result\n       (recur (drop 1 keys)\n              (assoc result (first keys) default))))\n   )", "user": "5430a16de4b0dad94371f2da"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "532a033be4b09d4e7a9b551f"}, {"problem": 156, "code": "(fn [a b] (reduce #(merge % [%2 a]) {} b))", "user": "54344721e4b0b6b47310fcea"}, {"problem": 156, "code": "(fn [default keyseq] (reduce #(assoc %1 %2 default) {} keyseq))", "user": "51515a19e4b03e678e393acc"}, {"problem": 156, "code": "(fn [dv s]\n  (loop [[k & sqc] s\n         result {}]\n    (if (not (nil? k))\n      (do \n        (recur sqc (conj result {k dv})))\n      result)))", "user": "52f8db41e4b047fd55836fdc"}, {"problem": 156, "code": "(fn \n  [d m] \n    (into {} (map #(conj [%] d ) m )) )", "user": "542edb4ae4b0dad94371f2c8"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "53b544d4e4b047364c0444bd"}, {"problem": 156, "code": "#(into {} (zipmap %2 (repeat %1)))", "user": "5310e968e4b08068f379ecdd"}, {"problem": 156, "code": "(fn [x keys]\n  (zipmap keys (repeat x)))", "user": "5422fef5e4b01498b1a71acd"}, {"problem": 156, "code": "#(zipmap (reverse %2) (repeat (count %2) %1))", "user": "54296802e4b01498b1a71b38"}, {"problem": 156, "code": "(fn [val coll] (reduce #(conj %1 [%2 val]) {} coll))", "user": "542db41be4b0dad94371f2bb"}, {"problem": 156, "code": "(fn [d coll]\n   (reduce #(assoc %1 %2 d) {} coll))", "user": "526c669be4b03e8d9a4a728f"}, {"problem": 156, "code": "(fn [default keys]\n  (loop [keys keys m (hash-map)]\n    (if (empty? keys)\n      m\n      (recur\n        (rest keys)\n        (conj m [(first keys) default])\n        ))))", "user": "5433eecae4b0b6b47310fce6"}, {"problem": 156, "code": "#(loop [s %2, m {}]\n  (if-not (empty? s)\n    (recur (rest s) (conj m {(first s) %1}))\n    m\n  )\n)", "user": "543a68d3e4b032a45b869326"}, {"problem": 156, "code": "(fn [default keys]\n    (reduce (fn [m k] (conj m {k default}))\n        {}\n        keys))", "user": "543c0e6ce4b032a45b869339"}, {"problem": 156, "code": "(fn [a b] (zipmap b (repeat (count b) a)))", "user": "51e1c176e4b06a68e693eafb"}, {"problem": 156, "code": "(fn [d keys] (reduce (fn [m k] (assoc m k d)) {} keys))", "user": "53c1b787e4b00fb29b221266"}, {"problem": 156, "code": "(fn [i c] (zipmap c (repeat i)))", "user": "53e745a1e4b036ad0777e479"}, {"problem": 156, "code": "(fn [v k]\n  (into {} (map #(vector % v) k)))", "user": "53a511aae4b0b62ce3005735"}, {"problem": 156, "code": "(fn [m k] (into {} (vec (map #(vec [% m]) k))))", "user": "543d07e8e4b032a45b869346"}, {"problem": 156, "code": "(fn [default ks] (apply hash-map (interleave ks (repeatedly (constantly default)))))", "user": "53f67bcfe4b0db01ade6f9e1"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "530bf87ee4b02e82168697d5"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "52b2f9cae4b0c58976d9acfb"}, {"problem": 156, "code": "(fn [default-value coll]\n        (apply merge (for [k coll]\n                       {k default-value})))", "user": "4f046d70535dcb61093f6bc5"}, {"problem": 156, "code": "(fn [k s] (reduce merge (map #(hash-map % k) s)))", "user": "543bce4fe4b032a45b869335"}, {"problem": 156, "code": "(fn map-defaults [default keys]\n  (reduce #(assoc %1 %2 default) {} keys))", "user": "53f891eee4b0de5c4184856d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "543d5c61e4b032a45b86934d"}, {"problem": 156, "code": "(fn [default coll] (reduce #(conj %1 [%2 default]) {} coll))", "user": "543c39e0e4b032a45b86933d"}, {"problem": 156, "code": "(fn [v l] (zipmap l (repeat v)))", "user": "519f1eaee4b087743fad219c"}, {"problem": 156, "code": "(fn [default k]\n  (apply hash-map (interleave  k (repeat default))))", "user": "542d27a0e4b0dad94371f2b3"}, {"problem": 156, "code": "(fn [val seq] (loop [seq seq acc {}] (if-not (empty? seq) (recur (rest seq) (concat {(first seq) val} acc)) (apply hash-map (mapcat identity acc)))))", "user": "5385e633e4b06839e8705f08"}, {"problem": 156, "code": "(fn [k coll] (let [c (count coll)\n                     kcoll (repeat c k)]\n               (zipmap coll kcoll)))", "user": "4e526cc4535d302ef430da74"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "53bb95d0e4b047364c044508"}, {"problem": 156, "code": "(fn zip-with-key [k coll]\n    (if-let [[ x & xs] coll]\n      (assoc (zip-with-key k xs) x k)))", "user": "5433a07be4b0b6b47310fce0"}, {"problem": 156, "code": "(fn [default keys] (loop [[k & r] keys acc {}] (if (nil? k) acc (recur r (conj acc [k default])))))", "user": "543c5200e4b032a45b86933e"}, {"problem": 156, "code": "(fn map-defaults\n  [x & xs]\n  (loop [default-value x\n         keys (first xs)\n         result {}]\n    (if (empty? keys)\n      result\n      (recur default-value (rest keys) (conj result {(first keys) default-value})))))", "user": "52561295e4b0541d1855ba03"}, {"problem": 156, "code": "(fn [x y]\n  (zipmap y (repeat x))\n  )", "user": "5372c830e4b06d7f452d9dff"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (repeat v)))", "user": "530a6cbae4b02e82168697be"}, {"problem": 156, "code": "(fn [v xs] (zipmap xs (repeat v)))", "user": "4f1ef6a0535d64f60314649b"}, {"problem": 156, "code": "#(into {} (for [x %2] [x %1]))", "user": "5315ba94e4b08068f379ed34"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (cycle [%])))", "user": "542c2de0e4b0dad94371f29f"}, {"problem": 156, "code": "(fn [v ks] (reduce (fn [acc k] (assoc acc k v)) {} ks))", "user": "54431b6ee4b032a45b869385"}, {"problem": 156, "code": "(fn [v sq]\n  (reduce #(assoc %1 %2 v) {} sq))", "user": "542d5fa9e4b0dad94371f2b5"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat (count %2) %)))", "user": "53940789e4b0b51d73faaec3"}, {"problem": 156, "code": "(fn [d xs]\n  (reduce #(assoc %1 %2 d) {} xs))", "user": "54448e84e4b032a45b869393"}, {"problem": 156, "code": "(fn [v l]\n   (reduce #(merge %1 {%2 v}) {} l))", "user": "5392bfdee4b0b51d73faaeb2"}, {"problem": 156, "code": "(fn [x col] (apply merge (map #(hash-map % x) col)))", "user": "5443bbe9e4b032a45b869389"}, {"problem": 156, "code": "(fn [default stuff]\n  (apply assoc {} \n    (interleave stuff\n                (repeat default))))", "user": "53577049e4b04ce2eb3ed27b"}, {"problem": 156, "code": "(fn defval [d col]\n  (reduce #(assoc %1 %2 d) (sorted-map) col))", "user": "544257b4e4b032a45b869379"}, {"problem": 156, "code": "(fn my-default-map [d, s]\n     (apply hash-map (reduce #(conj %1 d %2) (list) s))\n    )", "user": "5443cb97e4b032a45b86938a"}, {"problem": 156, "code": "(fn [defv coll ] (apply merge (map #(hash-map % defv) coll)))", "user": "54413696e4b032a45b86936b"}, {"problem": 156, "code": "(fn [dv seqq] (reduce conj {} (map #(vector % dv) seqq)))", "user": "543a84a1e4b032a45b869328"}, {"problem": 156, "code": "(fn [d ks]\n  (reduce #(merge %1 {%2 d}) '{} ks))", "user": "542b0592e4b0dad94371f286"}, {"problem": 156, "code": "#(zipmap %2(cycle[%]))", "user": "4db2903f535df7e46ed9b6bf"}, {"problem": 156, "code": "(fn [d s] (reduce #(conj % {%2 d}) {} s))", "user": "5441f5e8e4b032a45b869375"}, {"problem": 156, "code": "(fn defmap[defval ks] (into {} (map #(assoc {} % defval) ks)))", "user": "542c56aae4b0dad94371f2a4"}, {"problem": 156, "code": "(fn [val keys]\n  (reduce #(assoc %1 %2 val) {} keys))", "user": "541168dee4b01498b1a719c3"}, {"problem": 156, "code": "; (fn [v xs] (into {} (for [x xs] [x v])))\n\n(fn [v xs] (zipmap xs (repeat v)))", "user": "541e2ff8e4b01498b1a71a8a"}, {"problem": 156, "code": "(fn [v m] (zipmap m (repeat v)))", "user": "540997ede4b0addc1aec66dd"}, {"problem": 156, "code": "(fn mh [value the-keys]\n  (apply hash-map\n    (apply concat\n      (for [x the-keys]\n        (list x value)\n      )       \n    )       \n  )\n)", "user": "54468ebfe4b032a45b8693b1"}, {"problem": 156, "code": "(fn [val vec] (reduce (fn [m v] (assoc m v val)) {} (reverse vec)))", "user": "507f69eee4b089ade05efbcf"}, {"problem": 156, "code": "(fn dm[v c](loop [r {} v v c c] (if (empty? c) r (recur (assoc r (first c) v) v (rest c)))))", "user": "54464734e4b032a45b8693ab"}, {"problem": 156, "code": "(fn [defvalue coll]\n\t(into {} (vec (map vec (partition 2 (interleave coll (repeat (count coll) defvalue)))))))", "user": "514799d8e4b0541f4bec05cf"}, {"problem": 156, "code": "(fn [x y] (into {} (map #(assoc {} % x) y)))", "user": "5233564ae4b0f0b72fabf403"}, {"problem": 156, "code": "(fn bla\n   [default my-map]\n   (println my-map)\n   (if (< 0 (count (rest my-map)))\n     (merge (hash-map (first my-map) default) (bla default (rest my-map)) )\n     (hash-map (first my-map) default)\n     )\n   )", "user": "54458995e4b032a45b86939e"}, {"problem": 156, "code": "(fn [v key-list]\n\t(into {} (for  [k key-list] {k v})))", "user": "54468fd3e4b032a45b8693b2"}, {"problem": 156, "code": "(fn [v col] (->> col (map #(vector % v)) (into {})))", "user": "544b5b8de4b0e39780006963"}, {"problem": 156, "code": "(fn [v coll]\n  (reduce (fn [m k] (assoc m k v)) {} coll))", "user": "54055aa9e4b0addc1aec6665"}, {"problem": 156, "code": "(fn [x v]\n  (zipmap v (repeat (count v) x)))", "user": "531a3d5fe4b08068f379ed89"}, {"problem": 156, "code": "(fn [default lst] (\n                   zipmap lst (cycle [default]))\n  )", "user": "543b7456e4b032a45b86932f"}, {"problem": 156, "code": "(fn [val keys]\n  (zipmap keys (repeat val)))", "user": "51fdbf73e4b0f1313d468a51"}, {"problem": 156, "code": "#(zipmap %2 (iterate identity %1))", "user": "544e8369e4b0e39780006987"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "4db2eac3535df7e46ed9b6c8"}, {"problem": 156, "code": "(fn [val keys]\n  (zipmap keys (take (count keys) (repeat val))))", "user": "52bb4be0e4b07a9af57922e2"}, {"problem": 156, "code": "(fn [df k] (reduce #(assoc % %2 df) {} k))", "user": "5450d992e4b0e397800069a5"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "5450c81fe4b0e397800069a4"}, {"problem": 156, "code": "(fn [a lst]\n   ((fn [a lst acc]\n      (cond\n       (empty? lst) acc\n       :else (recur a (rest lst) (merge acc {(first lst) a}))\n       )\n      ) a lst {})\n   )", "user": "531a0709e4b08068f379ed87"}, {"problem": 156, "code": "(fn [default list] \n  (into {} \n        (zipmap list (repeat default))\n        )\n  )", "user": "544e92b8e4b0e3978000698c"}, {"problem": 156, "code": "(fn [defval seq0] (zipmap seq0 (repeat (count seq0) defval)))", "user": "54524afbe4b0e397800069bc"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5122925ae4b068a9582e656d"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %)))", "user": "520cc6b6e4b0b022ef140c9c"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat (count %2) %1)))", "user": "53e3e852e4b036ad0777e407"}, {"problem": 156, "code": "#(->> %2 (map (fn [x] {x %1})) (reduce conj {}))", "user": "53ea5851e4b036ad0777e4e4"}, {"problem": 156, "code": "(fn [v m] (reduce #(assoc % %2 v) {} m))", "user": "52c48ec6e4b0c2d177d620dd"}, {"problem": 156, "code": "(fn [df keys]\n  (reduce\n   (fn [res k] (assoc res k df))\n   {}\n   keys))", "user": "5455c2f3e4b080a794c2c87d"}, {"problem": 156, "code": "(fn [value keys] (apply assoc {} (interleave keys (repeat value))))", "user": "4dce9252535d5973398f92a3"}, {"problem": 156, "code": "( fn [value keys]\n    (zipmap \n      keys\n      (repeat \n        (count keys) \n        value)) \n  )", "user": "54391a55e4b032a45b869319"}, {"problem": 156, "code": "(fn [x y] (apply array-map (interleave y (repeat x))))", "user": "54381729e4b032a45b869310"}, {"problem": 156, "code": "(fn [k coll] (zipmap coll (repeat (count coll) k)))", "user": "52485723e4b05ef8e38e63d2"}, {"problem": 156, "code": "(fn [d k] (into {} (map #(hash-map % d) k)))", "user": "53baa9c0e4b047364c0444fa"}, {"problem": 156, "code": "(fn [x coll] (reduce #(assoc %1 %2 x) {} coll))", "user": "5417bc50e4b01498b1a71a0f"}, {"problem": 156, "code": "(fn [default seq] (reduce conj (let [newlist {}] (map (fn [key] (assoc newlist key default)) (reverse seq))) ))", "user": "54570c87e4b080a794c2c887"}, {"problem": 156, "code": "#(into {} (map (fn [x] (vector x %)) %2))", "user": "544fbabce4b0e39780006999"}, {"problem": 156, "code": "#(into {} (map hash-map %2 (repeat %1)))", "user": "52d84ea7e4b09f7907dd1390"}, {"problem": 156, "code": "(fn [e cll] (reduce conj {} (for [k cll] {k e})))", "user": "54530382e4b0e397800069cc"}, {"problem": 156, "code": "(fn [d l] (reduce (fn [col k] (conj col {k d})) {} l))", "user": "52149e21e4b0961f15ac4d94"}, {"problem": 156, "code": "(fn [d s]\n  (apply hash-map\n    (reduce (fn [r k] (conj r k d)) [] s)))", "user": "533ea7e8e4b085b17e897d94"}, {"problem": 156, "code": "(fn [a s] (into {} (map #(vector % a) s)))", "user": "5457e5f1e4b01be26fd74613"}, {"problem": 156, "code": "(fn [d x] (reduce #(assoc %1 %2 d) {} x))", "user": "5457767ae4b01be26fd7460c"}, {"problem": 156, "code": "(fn [default keys]\n (apply \n  merge (map (fn [key] {key default}) keys)))", "user": "54580586e4b01be26fd74616"}, {"problem": 156, "code": "(fn [defval, col] (into {} (for [i col] [i defval])))", "user": "53a68c5ae4b0ef122a8689c8"}, {"problem": 156, "code": "(fn [x, s] (reduce #(conj %1 [%2 x]) {} s))", "user": "5453b522e4b0e397800069d0"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54529a22e4b0e397800069c5"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "54361d92e4b032a45b8692f7"}, {"problem": 156, "code": "(fn deffy [default more]\n  (into {} (map vector more (take (count more) (repeat default)))))", "user": "5414b7c4e4b01498b1a719ed"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat (count %2) %1)))", "user": "54524dbbe4b0e397800069bd"}, {"problem": 156, "code": "(fn my-merge [x coll]\n  (reduce conj {} (reverse (map vector coll (repeat x)))))", "user": "53b7aa6ce4b047364c0444d1"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "544cf5d7e4b0e39780006977"}, {"problem": 156, "code": "(fn [d k] \n  (reduce \n   #(conj % {%2 d}) {} k)\n)", "user": "5367f0a7e4b0243289761e88"}, {"problem": 156, "code": "(fn [val all-keys]\n  (loop [res {} keys all-keys]\n    (if (empty? keys)\n      res\n      (recur (assoc res (first keys) val) (rest keys))\n    )\n  )\n)", "user": "545b77f5e4b01be26fd74653"}, {"problem": 156, "code": "(fn [x y]\n\t(into {} (mapv #(vector %1 %2) y (repeat x))))", "user": "5251d3c1e4b0541d1855b87f"}, {"problem": 156, "code": "(fn demap [de s]\n  (if (empty? s)\n    {}\n    (merge {(first s) de} (demap de (rest s)))))", "user": "545801f6e4b01be26fd74615"}, {"problem": 156, "code": "(fn [val keys]\n  (reduce #(assoc %1 %2 val) {} keys))", "user": "54570dfae4b080a794c2c889"}, {"problem": 156, "code": "(fn [dv sok] (zipmap sok [dv,dv,dv]))", "user": "545d5c3be4b01be26fd7466d"}, {"problem": 156, "code": "(fn [x y] (into {} ((fn [el li] (map (fn [x] {x el}) li)) x y)))", "user": "544e1794e4b0e39780006980"}, {"problem": 156, "code": "(fn [dflt, keyList]\n  (reduce merge (map hash-map keyList (for [y keyList] dflt))))", "user": "543b12cce4b032a45b86932a"}, {"problem": 156, "code": "(fn [n xs]\n  (loop [m {} d n ys xs]\n    (if (empty? ys)\n      m\n      (recur (conj m [(first ys) d]) d (rest ys)))))", "user": "546176e7e4b01be26fd746a2"}, {"problem": 156, "code": "(fn [v coll]\n  (into {} (for [x coll] {x v})))", "user": "515d414be4b00901442db1db"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "534b1930e4b084c2834f4a76"}, {"problem": 156, "code": "(fn -tester\n [default lst]\n (reduce #(assoc %1 %2 default) {} lst))", "user": "546113ffe4b01be26fd74699"}, {"problem": 156, "code": "(fn make-default-map\n   [v -keys]\n   (reduce #(assoc %1 %2 v) {} -keys))", "user": "545e9cf1e4b01be26fd7467f"}, {"problem": 156, "code": "(fn [default keys]\n  (apply hash-map (apply concat (for [key keys]\n                                  (list key default)))))", "user": "5461c402e4b01be26fd746a6"}, {"problem": 156, "code": "(fn [v ks] (reduce #(assoc %1 %2 v) {} ks))", "user": "5436f3ffe4b032a45b8692fe"}, {"problem": 156, "code": "(fn [v k] (into {} (map (fn [x] { x v }) k)))", "user": "54610355e4b01be26fd74696"}, {"problem": 156, "code": "(fn [default map-keys]\n  (reduce merge (map #(array-map % default) map-keys)))", "user": "4fdb881ee4b05e33b9224f5e"}, {"problem": 156, "code": "(fn [v m] (zipmap m (repeat v)))", "user": "545bbaa4e4b01be26fd74656"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "530e75d5e4b08068f379ecba"}, {"problem": 156, "code": "(fn map-defaults [v ks] (reduce #(assoc %1 %2 v) {} ks))", "user": "542c1f73e4b0dad94371f29d"}, {"problem": 156, "code": "#(apply (partial assoc {}) (interleave %2  (repeat %1)))", "user": "546587afe4b01be26fd746de"}, {"problem": 156, "code": "(fn [default-value list-to-map]\n  (loop [l list-to-map\n         accu '{}]\n    (if (empty? l)\n      accu\n      (recur (rest l) (assoc accu (first l) default-value)))))", "user": "54638c8fe4b01be26fd746c2"}, {"problem": 156, "code": "(fn create-map [default map-keys]\n  (reduce (fn [accumulator current-key]\n            (assoc accumulator current-key default)) {} map-keys))", "user": "5464dd11e4b01be26fd746d2"}, {"problem": 156, "code": "(fn [default collection]\n  (loop [dmap {} ldefault default lcollection collection]\n    (if (empty? lcollection)\n      dmap\n      (recur (assoc dmap (peek lcollection) default) ldefault (pop lcollection)))))", "user": "5414dccbe4b01498b1a719f1"}, {"problem": 156, "code": "(fn [d s] (zipmap s (repeat (count s) d)))", "user": "5466199ce4b01be26fd746e2"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat (count %2) %1)))", "user": "5465712ee4b01be26fd746dc"}, {"problem": 156, "code": "(fn [default keys]\n  (->> (mapcat\n        #(cons % [default])\n        keys)\n      (apply hash-map)))", "user": "504f9ae1e4b0a02f9cffde9c"}, {"problem": 156, "code": "(fn[x,l] (reduce #(merge %1 %2) {} (map #(hash-map %1 x) l)))", "user": "54651ef5e4b01be26fd746d5"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "53483a32e4b084c2834f4a57"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "543a8256e4b032a45b869327"}, {"problem": 156, "code": "(fn [v k]\n  (reduce (fn [a b] (assoc a b v)) {} k))", "user": "544e9022e4b0e3978000698b"}, {"problem": 156, "code": "(fn [value cols] (reduce #(assoc % %2 value) {} cols))", "user": "54577fefe4b01be26fd7460d"}, {"problem": 156, "code": "(fn [default keys]\n     (zipmap keys (repeat default)))", "user": "5462caf5e4b01be26fd746b7"}, {"problem": 156, "code": "#(zipmap %2 (take (count %2) (repeat %1)))", "user": "54540453e4b0e397800069d2"}, {"problem": 156, "code": "#(let [ defaults (repeat (count %2) %1) ]\n   (zipmap %2 defaults))", "user": "54684c3be4b00cfc9eacc139"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54084089e4b0addc1aec66c7"}, {"problem": 156, "code": "(fn fluxsom [defaults keyseq]\n  (into {} (map #(hash-map % defaults) keyseq)))", "user": "4f9dd376e4b0dcca54ed6d27"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54485727e4b032a45b8693c6"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (repeat v)))", "user": "546a6c7ce4b00cfc9eacc154"}, {"problem": 156, "code": "(fn [x coll]\n  (reduce #(assoc %1 %2 x) {} coll))", "user": "5245aea8e4b08ba239308123"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "546a52f3e4b00cfc9eacc151"}, {"problem": 156, "code": "(fn mkmap [v ks]\n  (if (empty? ks)\n    {}\n    (assoc (mkmap v (rest ks)) (first ks) v)))", "user": "54651982e4b01be26fd746d4"}, {"problem": 156, "code": "(fn [elt l]\n  (apply merge (map #(hash-map % elt) l)))", "user": "54651faee4b01be26fd746d6"}, {"problem": 156, "code": "(fn [init lst] (zipmap lst (repeat init)))", "user": "543bb568e4b032a45b869334"}, {"problem": 156, "code": "(fn [value maps] (loop [res {} in maps] (if (empty? in) res (recur (into res {(first in) value}) (rest in)))))", "user": "52457931e4b08ba239308107"}, {"problem": 156, "code": "(fn [default list] (apply merge(map (fn [n] (hash-map n default)) list)))", "user": "54665910e4b01be26fd746e5"}, {"problem": 156, "code": "(fn [d k] (reduce #(assoc %1 %2 d) {} k))", "user": "546b65a2e4b00cfc9eacc169"}, {"problem": 156, "code": "(fn [dv sq]\n  (into {} (map #(vector % dv) sq)))", "user": "5243e37ae4b076204b44fae3"}, {"problem": 156, "code": "(fn [default keys] (zipmap keys (repeat default)))", "user": "543b9f8ce4b032a45b869332"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "52540bcce4b0541d1855b952"}, {"problem": 156, "code": "#(into {} (for [x %2] [x %1]))", "user": "546a6dbbe4b00cfc9eacc156"}, {"problem": 156, "code": "(fn [v ks] (reduce (fn [m k] (assoc m k v)) {} ks))", "user": "545cfbb0e4b01be26fd74669"}, {"problem": 156, "code": "(fn [def-val vtor] (reduce (fn [base x] (conj base {x def-val})) {} vtor))", "user": "5461873de4b01be26fd746a3"}, {"problem": 156, "code": "(fn [default list] (apply hash-map (mapcat (fn [k] [k default]) list)))", "user": "546dd4f6e4b00cfc9eacc194"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "546c1b2ce4b00cfc9eacc174"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "5462ce20e4b01be26fd746b8"}, {"problem": 156, "code": "(fn [v c] (reduce into (map #(if (nil? (get [%] %)) {% v}) c)))", "user": "54696e4ce4b00cfc9eacc147"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5458a729e4b01be26fd74622"}, {"problem": 156, "code": "(fn addval [v ks]\n  (if (seq ks)\n    (assoc (addval v (rest ks)) (first ks) v)\n  )        \n)", "user": "546ce5f1e4b00cfc9eacc187"}, {"problem": 156, "code": "(fn [x y] (zipmap y (repeat (count y) x)))", "user": "54630cdae4b01be26fd746bb"}, {"problem": 156, "code": "(fn [value keys]\n  (apply merge (map #(hash-map % value) keys)))", "user": "546c4c5fe4b00cfc9eacc178"}, {"problem": 156, "code": "(fn [x keys] (reduce merge (map #(hash-map % x) keys)))", "user": "546dcbffe4b00cfc9eacc193"}, {"problem": 156, "code": "(fn [value coll] (zipmap coll (repeat (count coll) value)))", "user": "54497569e4b032a45b8693d2"}, {"problem": 156, "code": "(fn ff[x v]\n  (when (not (empty? v))\n    (merge (ff x (rest v)) {(first v) x})))", "user": "54713dc8e4b094393f72dd69"}, {"problem": 156, "code": "(fn [v ks]\n  (reduce (fn [acc k] (assoc acc k v)) {} ks))", "user": "546d41bde4b00cfc9eacc18c"}, {"problem": 156, "code": "(fn [v ks]\n  (apply conj (map #(hash-map % v) ks)))", "user": "545f737ce4b01be26fd74688"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "546f926fe4b00cfc9eacc1af"}, {"problem": 156, "code": "#(apply merge (map hash-map %2 (repeat %)))", "user": "52e16face4b09f7907dd1421"}, {"problem": 156, "code": "(fn [x coll](reduce #(assoc %1 %2 x) {} coll))", "user": "546280d8e4b01be26fd746b0"}, {"problem": 156, "code": "(fn[v s](apply hash-map (interleave s (repeat v))))", "user": "54641bdbe4b01be26fd746cb"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "546e4ab8e4b00cfc9eacc19c"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %)))", "user": "54084784e4b0addc1aec66c9"}, {"problem": 156, "code": "(fn [d vs] \n  (into {} \n    (for [x vs] \n    {x d})))", "user": "517e9526e4b09104ecebe7e2"}, {"problem": 156, "code": "(fn myfunc [d k] \n  (reduce \n    (fn [acc i] (conj acc [i d])) \n    {} \n    k))", "user": "546692aee4b01be26fd746e7"}, {"problem": 156, "code": "(fn [default ks]\n  (reduce (fn [acc k]\n            (assoc-in acc [k] default))\n          {}\n          ks))", "user": "54508859e4b0e397800069a3"}, {"problem": 156, "code": "(fn [default keys]\n  (apply merge (for [key keys] {key default})))", "user": "544f732fe4b0e39780006994"}, {"problem": 156, "code": "(fn [val sq]\n (zipmap sq \n          (repeat (count sq) val))\n  )", "user": "544f58e8e4b0e39780006991"}, {"problem": 156, "code": "(fn [val keys]\n  (apply hash-map (mapcat list keys (repeat val))))", "user": "547584d9e4b0c51c1f4d729b"}, {"problem": 156, "code": "(fn [v, ks] (->> \n               (map #(hash-map % v) ks)\n               (reduce into)))", "user": "54357066e4b0b6b47310fcfd"}, {"problem": 156, "code": "(fn [d v]\n  (apply hash-map (apply concat (map #(list % d) v))))", "user": "4e2d84bf535deb9a81d77f09"}, {"problem": 156, "code": "(fn [v m] (zipmap m (repeat v)))", "user": "529a3c37e4b02ebb4ef75094"}, {"problem": 156, "code": "(fn [v xs] (apply hash-map (reverse (conj (interpose v xs) v))))", "user": "54246d6de4b01498b1a71aec"}, {"problem": 156, "code": "(fn start-map [s keyterms]\n\t(loop [acc {} keyterms keyterms]\n\t\t(if (empty? keyterms)\n\t\t\tacc\n\t\t\t(recur (assoc acc (first keyterms) s) (rest keyterms)))))", "user": "53703287e4b0fc7073fd6e8f"}, {"problem": 156, "code": "(fn [default-value key-list] (\n    reduce (\n    \tfn [all key-name] (assoc all key-name default-value)\n  \t) {} key-list                      \n  )\n)", "user": "5471f090e4b094393f72dd6e"}, {"problem": 156, "code": "(fn [x y] (zipmap y (repeat x)))", "user": "54787901e4b0c51c1f4d72bb"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "542a7c9be4b01498b1a71b41"}, {"problem": 156, "code": "(fn [default coll] (zipmap coll (repeat default)))", "user": "5478c4fee4b0c51c1f4d72c0"}, {"problem": 156, "code": "#(apply hash-map (mapcat (partial conj (list %)) %2))", "user": "5479c58de4b0c51c1f4d72c7"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "5463fbbde4b01be26fd746ca"}, {"problem": 156, "code": "(fn [x ks]\n  (apply hash-map (apply concat (map #(list % x) ks))))", "user": "547ad587e4b0c51c1f4d72ce"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "54797964e4b0c51c1f4d72c6"}, {"problem": 156, "code": "(fn [x1 x2] (into {} (map (fn [x] (conj [] x x1)) x2)))", "user": "54411506e4b032a45b869369"}, {"problem": 156, "code": "(fn [x y] (zipmap y (repeat x)))", "user": "545b9dd9e4b01be26fd74654"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "547d4f41e4b0c51c1f4d72f0"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %1)))", "user": "5470b269e4b00cfc9eacc1ba"}, {"problem": 156, "code": "#(apply conj {} (map \n                 \t(fn [k] [k %])\n                     %2))", "user": "547d66a1e4b0c51c1f4d72f2"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %1)))", "user": "5458474ce4b01be26fd7461b"}, {"problem": 156, "code": "(fn [d s] (reduce (fn [m k] (assoc m k d)) {} s))", "user": "547d8e93e4b0c51c1f4d72f4"}, {"problem": 156, "code": "(fn dmap [default-value mkeys]\n  (->> mkeys \n       (map #(hash-map % default-value)) \n       (reduce conj)))", "user": "547e3846e4b0c51c1f4d7302"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "53a2e6abe4b0f1fc7453882f"}, {"problem": 156, "code": "(fn [val keys] (zipmap keys (repeat val)))", "user": "52b9cfb9e4b07a9af57922c5"}, {"problem": 156, "code": "(fn [default keys]\n  (apply hash-map (interleave keys (repeat default))))", "user": "547fbe01e4b0c51c1f4d7321"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat (count %2) %1)))", "user": "547adcb0e4b0c51c1f4d72cf"}, {"problem": 156, "code": ";; https://clojuredocs.org/clojure.core/zipmap\n;; https://clojuredocs.org/clojure.core/repeat <-- repeats map length\n(fn [v m] (zipmap m (repeat v)))", "user": "548018e3e4b0c51c1f4d7331"}, {"problem": 156, "code": "(fn [value, theKeys] ( zipmap theKeys (repeat value)))", "user": "548026d8e4b0e286459a1155"}, {"problem": 156, "code": "(fn [value, key] (zipmap key (repeat value)))", "user": "548018cde4b0c51c1f4d7325"}, {"problem": 156, "code": "(fn mcons\n  [defaultValue liste]\n  (if (empty? liste)\n    {}\n    (let [[head & tail] liste]\n      (into {}\n            (conj (mcons defaultValue tail) [head defaultValue])\n      )\n    )\n  )\n)", "user": "54410a71e4b032a45b869367"}, {"problem": 156, "code": "(fn [v l]\n\t(into (sorted-map)\n\t  \t(for [x l\n             :let [y {x v}]]\n         y)\n  \t)\n)", "user": "548018dbe4b0c51c1f4d732a"}, {"problem": 156, "code": "(fn [x keys] (->> keys (map (fn [k] [k x])) (into {})))", "user": "5032748ae4b0e78df07b092f"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54800885e4b0c51c1f4d7323"}, {"problem": 156, "code": "(fn\n  [x coll]\n  (zipmap coll (repeat (count coll) x)))", "user": "5484143de4b0e286459a1197"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "54848141e4b0e286459a119e"}, {"problem": 156, "code": "(fn [value keys]\n  (into {} (map vector keys (repeat value))))", "user": "5483d59fe4b0e286459a1194"}, {"problem": 156, "code": "(fn [default ks]\n  (zipmap ks (repeat default))\n  )", "user": "528c381ce4b0239c8a67aeb2"}, {"problem": 156, "code": "#(reduce (fn [x y] (assoc x y %)) {} %2)", "user": "54852ad0e4b0e286459a11a7"}, {"problem": 156, "code": "(fn [val keys] (into {} (for [key keys] {key val})))", "user": "54856d54e4b0e286459a11aa"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1) )", "user": "535f9a5ce4b04ce2eb3ed2de"}, {"problem": 156, "code": "(fn[default-value my-keys](zipmap my-keys (repeat default-value)))", "user": "547b9cdce4b0c51c1f4d72da"}, {"problem": 156, "code": "(fn [ds ks]  \n   (into {} \n         (for [x ks] {x ds})))", "user": "5463c452e4b01be26fd746c4"}, {"problem": 156, "code": "(fn \n           [default myMap]\n  (into {} (for [k myMap]\n    [k default])))", "user": "513f86dde4b00f13ea1bd88d"}, {"problem": 156, "code": "(fn [value collection]\n  (into {} (map #(conj {} {% value}) collection)))", "user": "5470cb10e4b094393f72dd65"}, {"problem": 156, "code": "(fn [k m]\n  (apply hash-map (reduce #(conj %1 %2 k) [] m)))", "user": "543823f1e4b032a45b869311"}, {"problem": 156, "code": "#(zipmap (reverse %2) (repeat (count %2) %1))", "user": "5472d919e4b094393f72dd7b"}, {"problem": 156, "code": "(fn [v xs] (apply hash-map (mapcat (fn [x y] [x y]) xs (cycle [v]))))", "user": "54801febe4b0c51c1f4d733c"}, {"problem": 156, "code": "(fn[v s](apply hash-map(interleave s (repeat v))))", "user": "54755abce4b0c51c1f4d7299"}, {"problem": 156, "code": "(fn [d s] (zipmap s (repeat d)))", "user": "5476d6cae4b0c51c1f4d72aa"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5485b402e4b0e286459a11b0"}, {"problem": 156, "code": "(fn [x coll] (into {} (for [y coll] [y x])))", "user": "542dc7c7e4b0dad94371f2bd"}, {"problem": 156, "code": "(fn [v1 v2]\n  (reduce conj (map #(hash-map % v1) v2)))", "user": "5486adf7e4b0e286459a11be"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54897284e4b0e286459a11e6"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5489d6ffe4b0e286459a11ee"}, {"problem": 156, "code": "(fn [d l] (reduce conj (map #(hash-map %1 d) l)))", "user": "53f4c3d6e4b0db01ade6f9c5"}, {"problem": 156, "code": "(fn [v ks] \n  (zipmap ks (repeat v)))", "user": "548c6673e4b0e286459a1209"}, {"problem": 156, "code": "(fn [default keys] (reduce (fn [coll key] (assoc coll key default)) {} keys))", "user": "51a132cee4b0b292b01ee3ff"}, {"problem": 156, "code": "(fn [v coll] (reduce #(assoc %1 %2 v) {} coll))", "user": "548018e0e4b0c51c1f4d732e"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "5485bc1be4b0e286459a11b1"}, {"problem": 156, "code": "(fn [n xs] (apply hash-map (mapcat #(list %1 n) xs)))", "user": "548cd813e4b0e286459a1211"}, {"problem": 156, "code": "(fn [v xs]\n  (apply hash-map (concat (interpose v xs) (list v))))", "user": "5188c249e4b0bdff0e072d54"}, {"problem": 156, "code": "(fn [default keys] (zipmap keys (repeat default)))", "user": "53459f2ae4b084c2834f4a36"}, {"problem": 156, "code": "#(apply hash-map (conj (vec (interpose %1 %2)) %1))", "user": "548e81fae4b0e286459a1223"}, {"problem": 156, "code": "(fn [v ks] (reduce #(assoc % %2 v) {} ks))\n\n; Best solution I've seen: #(zipmap %2 (repeat %))", "user": "54889b50e4b0e286459a11d4"}, {"problem": 156, "code": "(fn construct-map\n  [default-value keysequence]\n  (reduce conj {} \n          (map #(hash-map % default-value) keysequence)))", "user": "548f05ace4b0e286459a122b"}, {"problem": 156, "code": "(fn defmap [el remaining]\n     (if (empty? (rest remaining))\n       {(first remaining) el}\n       (merge {(first remaining) el}\n              (defmap el (rest remaining)))))", "user": "53b12c76e4b047364c04448a"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "54560483e4b080a794c2c87e"}, {"problem": 156, "code": "(fn [value keys] (into {} (for [i keys] [i value])))", "user": "546a70bae4b00cfc9eacc159"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %)))", "user": "5483ace0e4b0e286459a1192"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (repeat (count ks) v)))", "user": "544864afe4b032a45b8693ca"}, {"problem": 156, "code": "#(reduce conj (map (fn [x] (hash-map x %1)) %2))", "user": "53bcdd41e4b0d9a98559a6c0"}, {"problem": 156, "code": "(fn\n   [default keyset]\n   (into {} (map #(into {} {% default}) keyset)))", "user": "548efcb6e4b0e286459a122a"}, {"problem": 156, "code": "(fn [a coll] (into {} (map #(vec [% a]) coll) ))", "user": "532f8569e4b019098a6f8b4f"}, {"problem": 156, "code": "(fn [d k] (reduce #(assoc %1 %2 d) {} k))", "user": "512b07f7e4b078b06821febb"}, {"problem": 156, "code": "(fn [dv ks] (reduce #(assoc %1 %2 dv) {} ks))", "user": "548f5086e4b0e286459a1239"}, {"problem": 156, "code": "(fn [default valuesToMapToDefault]\n\t(reduce #(conj % [%2 default]) {} valuesToMapToDefault))", "user": "5455510fe4b0e397800069df"}, {"problem": 156, "code": "(fn [d ks] (reduce conj (map #(hash-map %1 d) ks)))", "user": "51d26b0ae4b0d13b04db0d97"}, {"problem": 156, "code": "(fn [value kes]\n  (reduce #(assoc %1 %2 value) {} kes))", "user": "54903056e4b0b312c081ff2e"}, {"problem": 156, "code": "(fn [default coll]\n  (reduce (fn [out x] (conj out {x default})) {} coll))", "user": "548f37c7e4b0e286459a1234"}, {"problem": 156, "code": "(fn [default-val collection] \n  (reduce\n   #(assoc %1 %2 default-val)\n   {}\n   collection))", "user": "5492164ee4b0b312c081ff3e"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5488202fe4b0e286459a11cd"}, {"problem": 156, "code": "(fn [val keys] \n  (reduce #(assoc %1 %2 val) {} keys))", "user": "5473efc3e4b0c51c1f4d7285"}, {"problem": 156, "code": "(fn [v m] (reduce #(assoc % %2 v) {} m))", "user": "528111d4e4b0757a1b17141d"}, {"problem": 156, "code": "(fn [default coll] (zipmap coll (repeat default)))", "user": "53b14dfce4b047364c04448d"}, {"problem": 156, "code": "(fn [d l] (reduce #(conj %1 {%2 d}) {} l))", "user": "548d15a0e4b0e286459a1214"}, {"problem": 156, "code": "#(apply array-map (interleave %2 (repeat %1)))", "user": "549375e4e4b0b312c081ff4e"}, {"problem": 156, "code": "(fn [v k] (reduce #(conj % {%2 v}) {} k))", "user": "53573d70e4b04ce2eb3ed278"}, {"problem": 156, "code": "(fn mb [d, ks] (apply hash-map (reduce concat (map #(vector % d) ks))))", "user": "54965534e4b0b312c081ff65"}, {"problem": 156, "code": "(fn [v k] (apply hash-map (interleave k (repeat v))))", "user": "548e940fe4b0e286459a1225"}, {"problem": 156, "code": "(fn [v, kys ] (zipmap kys (repeat v)))", "user": "547c84b5e4b0c51c1f4d72e8"}, {"problem": 156, "code": "(fn [a b] (reduce conj (map #(hash-map %1 a) b)))", "user": "5495b2dee4b0b312c081ff5f"}, {"problem": 156, "code": "(fn [default keys]\n    (reduce #(assoc %1 %2 default) {} keys))", "user": "543d89dfe4b032a45b869350"}, {"problem": 156, "code": "(fn defval ([ val ks ] (defval val ks {} )) ([val ks m] (if (empty? ks) m (recur val (rest ks) (assoc m (first ks) val)))))", "user": "4f0d6686535d0136e6c22318"}, {"problem": 156, "code": "(fn [default keys]\n  (apply hash-map (interleave keys (repeat default))))", "user": "5317d78ee4b08068f379ed63"}, {"problem": 156, "code": "#(into {} (for [x %2] {x %1}))", "user": "54975e99e4b0b312c081ff72"}, {"problem": 156, "code": "(fn [val kseq] \n  (reduce (fn [m k] (into m {k val})) \n          '{} \n          kseq))", "user": "53576356e4b04ce2eb3ed27a"}, {"problem": 156, "code": "(fn [def-val keys-vec] \n    (->> \n       keys-vec \n       (map #(vector % def-val))\n       (apply conj {})\n     )\n)", "user": "5493d908e4b0b312c081ff52"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "53da1e2ce4b0e771c3025487"}, {"problem": 156, "code": "(fn [default map-keys] (into {}\n                             (map (fn [k] [k default] ) map-keys)))", "user": "549a1234e4b0f3d1d8e70f68"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %1)))", "user": "5499e23de4b03163384f4706"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "540217e1e4b0df28a13c62cb"}, {"problem": 156, "code": "(fn associa [a b]\n  (loop [a a b b acc {}]\n    (if (empty? b)\n      acc\n      (recur a (rest b) (assoc acc (first b) a)))\n    ))", "user": "54886239e4b0e286459a11d0"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "549c22f7e4b0f3d1d8e70f86"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat (count %2) %1)))", "user": "54769c7ae4b0c51c1f4d72a8"}, {"problem": 156, "code": "(fn [d col] (zipmap col (repeat d)))", "user": "53c29ed1e4b00fb29b221270"}, {"problem": 156, "code": "(fn [v ks] (reduce #(assoc % %2 v) {} ks))", "user": "549def9ce4b0f3d1d8e70f99"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %)))", "user": "54982522e4b0b312c081ff7c"}, {"problem": 156, "code": "(fn [n key-vec] (reduce (fn [m k] (assoc m k n)) {} key-vec))", "user": "549c1713e4b0f3d1d8e70f82"}, {"problem": 156, "code": "(fn [v k] (into (sorted-map) (map (fn [k] (vector k v) ) k )))", "user": "53053be9e4b0d8b024fd375b"}, {"problem": 156, "code": "#(apply merge (for [v (list %), k %2] {k v}))", "user": "54972b0ee4b0b312c081ff6e"}, {"problem": 156, "code": "(fn [v ks] (reduce #(conj %1 {%2 v}) {} ks))", "user": "549eb44fe4b0f3d1d8e70fa6"}, {"problem": 156, "code": "(fn [x y] (apply array-map (interleave  y (repeat (count y) x))))", "user": "4e7e241a535db169f9c79705"}, {"problem": 156, "code": "(fn [default keys]\n  (reduce (fn [m key] (conj m [key default])) {} keys))", "user": "53e3e353e4b036ad0777e406"}, {"problem": 156, "code": "(fn [v ks]\n  (->> ks\n      (map #(hash-map % v))\n      (apply merge)))", "user": "549dd591e4b0f3d1d8e70f98"}, {"problem": 156, "code": "(fn [val keys]\n  (reduce (fn [memo k]\n            (assoc memo k val))\n          {}\n          keys))", "user": "532902f8e4b09d4e7a9b550e"}, {"problem": 156, "code": "(fn [d m1]\n  (reduce \n   (fn [m2 e]\n     (conj (hash-map e d) m2))\n   {}\n   m1))", "user": "53fe1b42e4b0de5c418485f1"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "54a30320e4b09f271ff37c62"}, {"problem": 156, "code": "(fn [default keys] (zipmap keys (repeat default)))", "user": "54a41c44e4b09f271ff37c6b"}, {"problem": 156, "code": "(fn [x,y] (reduce (fn [d, e] (conj d {e x} )) {} y))", "user": "54a1d643e4b09f271ff37c50"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat (count %2) %1)))", "user": "549cd548e4b0f3d1d8e70f91"}, {"problem": 156, "code": "(fn map-default\n  [default-value keys]\n  (if (seq keys)\n    (conj (map-default default-value (rest keys)) [(first keys) default-value])\n    {})\n  )", "user": "549c8bbde4b0f3d1d8e70f8c"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54908cc1e4b0b312c081ff32"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "52d00521e4b07d0d72b273b3"}, {"problem": 156, "code": "(fn [def-val key-vals] (reduce merge (for [key key-vals] (apply #(conj %1 %2) {} {key def-val}))))", "user": "52b9e920e4b07a9af57922c9"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "54a677a9e4b09f271ff37c88"}, {"problem": 156, "code": "(fn [x y] (reduce conj {} (map #(hash-map % x) y)))", "user": "5406c958e4b0addc1aec66ab"}, {"problem": 156, "code": "(fn [v col] (into {} (for [x col] {x v})))", "user": "54a700c3e4b09f271ff37c90"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %1)))", "user": "54a627bce4b09f271ff37c83"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "508fda91e4b0ea685a20f76f"}, {"problem": 156, "code": "#(reduce (fn [i1, i2] (assoc  i1 i2 %1)) nil %2)", "user": "54a7efdee4b09f271ff37c9d"}, {"problem": 156, "code": "(fn [v m](zipmap m (repeat v)))", "user": "546a6e9fe4b00cfc9eacc157"}, {"problem": 156, "code": "(fn [default m] (reduce (fn [r v] (assoc r v default)) {} m))", "user": "53403f42e4b085b17e897da8"}, {"problem": 156, "code": "(fn [defval keyz] (into {} (map #(hash-map % defval) keyz)))", "user": "54a3ff07e4b09f271ff37c6a"}, {"problem": 156, "code": "(fn my-map-defaults [default vs]\n  (loop [[x & rxs :as xs] vs\n         m {}]\n    (if (empty? xs)\n      m\n       (recur rxs (assoc m x default)))))", "user": "54a31fdae4b09f271ff37c64"}, {"problem": 156, "code": "(fn [default keys]\n    (zipmap keys (for [k keys] default)))", "user": "54a8fdcee4b09f271ff37ca9"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %) ))", "user": "54926752e4b0b312c081ff44"}, {"problem": 156, "code": "(fn [x ks] (zipmap ks (repeat x)))", "user": "53dfdf01e4b0d874e779ae46"}, {"problem": 156, "code": "(fn [d s] (reduce #(assoc %1 %2 d) {} s))", "user": "54a70484e4b09f271ff37c91"}, {"problem": 156, "code": "(fn [def-val ks]\n  (reduce #(assoc %1 %2 def-val) {} ks))", "user": "54a1f494e4b09f271ff37c52"}, {"problem": 156, "code": "(fn [default keys] \n  \n  (apply hash-map (interleave keys (cycle (list default))))\n  \n)", "user": "54a7d707e4b09f271ff37c9b"}, {"problem": 156, "code": "(fn\n  [v ks]\n  (loop [xs ks\n         m {}]\n    (if (= 1 (count xs))\n      (assoc m (first xs) v)\n      (recur (rest xs) (assoc m (first xs) v)))))", "user": "54ab5644e4b09f271ff37cc6"}, {"problem": 156, "code": "(fn [default keys]\n  (into {} (mapv (fn [x] [x default]) keys)))", "user": "50b42cbbe4b001349b2f4abe"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat (count %2) %)))", "user": "54a11042e4b09f271ff37c49"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %))", "user": "54ab04f1e4b09f271ff37cc0"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "52a267c6e4b04e0c58e87bef"}, {"problem": 156, "code": "(fn [v s]\n  (reduce (fn [acc i]\n            (conj acc [i v])) {} s))", "user": "53214efbe4b09d4e7a9b54b2"}, {"problem": 156, "code": "(fn [v keys]\n  (reduce (fn [m k]\n            (assoc m k v))\n          (hash-map)\n          keys))", "user": "54657ecde4b01be26fd746dd"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "54543484e4b0e397800069d4"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "515b03fee4b0a102a3e5262a"}, {"problem": 156, "code": "(fn [v m] (reduce #(assoc % %2 v) {} m))", "user": "5462c5abe4b01be26fd746b5"}, {"problem": 156, "code": "(fn [v k] (apply merge (map assoc (repeat {}) k (repeat v))))", "user": "520a796be4b01da9d47a99dc"}, {"problem": 156, "code": "(fn [default_value keys]\n  (reduce #(assoc %1 %2 default_value) {} keys))", "user": "5463c824e4b01be26fd746c5"}, {"problem": 156, "code": "(fn [d l] (reduce #(assoc %1 %2 d) {} l))", "user": "54acd7f9e4b09f271ff37cda"}, {"problem": 156, "code": "(fn [x y] (into {} (map #(vector % x) y)))", "user": "54ab46fee4b09f271ff37cc3"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "54ab6773e4b09f271ff37cc8"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54ae331ce4b09f271ff37cee"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5465febde4b01be26fd746e1"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "54ad9d76e4b09f271ff37ce6"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5474d1f4e4b0c51c1f4d728c"}, {"problem": 156, "code": "(fn fc156 [v ks]\n  (letfn [(fc156-helper [v ks]\n            (if (empty? ks) []\n              (conj (fc156-helper v (rest ks)) (vector (first ks) v))))]\n    (into (sorted-map) (fc156-helper v ks))))", "user": "547884d7e4b0c51c1f4d72bd"}, {"problem": 156, "code": "(fn [v keys] (zipmap keys (map (constantly v) keys)))", "user": "54a96a15e4b09f271ff37cad"}, {"problem": 156, "code": "#(into {} (map (fn [key] [key %1]) %2))", "user": "54a73c1fe4b09f271ff37c96"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "545537c1e4b0e397800069dd"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "52e12ac5e4b09f7907dd141a"}, {"problem": 156, "code": "(fn [default-value custom-seq]\n  (into {} (map (fn [x] {x default-value}) custom-seq)))", "user": "53051bf6e4b0d8b024fd3759"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5410499de4b01498b1a719a6"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "4fabbd3ee4b081705acca21e"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "53e3f7a8e4b036ad0777e408"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54a6399ee4b09f271ff37c85"}, {"problem": 156, "code": "(comp #(apply hash-map %) (fn [x y] (interleave y (map (fn [z] x) y))))", "user": "54ac8df8e4b09f271ff37cd7"}, {"problem": 156, "code": "(fn [v kk] \n  (into {} (map #(vector % v) kk)))", "user": "54af6fb0e4b09f271ff37d08"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "54b13a40e4b09f271ff37d1b"}, {"problem": 156, "code": "(fn [x y] (reduce #(assoc %1 %2 x) {} y))", "user": "54ab502fe4b09f271ff37cc4"}, {"problem": 156, "code": "(fn [init coll]\n  (zipmap coll (repeat init)))", "user": "54ae541ae4b09f271ff37cef"}, {"problem": 156, "code": "(fn [a l] (reduce #(assoc %1 %2 a) {} l))", "user": "54b2c888e4b09f271ff37d2e"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (repeat (count ks) v)))", "user": "54ac2fe9e4b09f271ff37cd4"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "54aec21ae4b09f271ff37cf7"}, {"problem": 156, "code": "(fn [d v] (into {} (map #(vector % d) v)))", "user": "549d36c6e4b0f3d1d8e70f94"}, {"problem": 156, "code": "(fn [value coll] (reduce conj (for [x coll] {x value})))", "user": "543170b2e4b0dad94371f2e7"}, {"problem": 156, "code": "(fn [default-v ks] (reduce (fn [m k] (assoc m k default-v)) {} ks))", "user": "4f0f3725535d0136e6c22337"}, {"problem": 156, "code": "(fn [vals keys] (into {} (map #(hash-map % vals) (seq keys))))", "user": "54ae9e13e4b09f271ff37cf4"}, {"problem": 156, "code": "(fn [default collection]\n  (reduce conj (for [x collection] {x default})))", "user": "54b2d392e4b09f271ff37d2f"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "54b448f2e4b05787c3b1638e"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "5481be5fe4b0e286459a1172"}, {"problem": 156, "code": "(fn defaults\n  [default keys]\n  (reduce\n    (fn [acc val]\n      (assoc acc val default))\n    {} keys))", "user": "54b187bee4b09f271ff37d21"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "52cee992e4b07d0d72b27395"}, {"problem": 156, "code": "(fn [v coll] (into {} (for [x coll] {x v})))", "user": "54b402dce4b05787c3b16388"}, {"problem": 156, "code": "#(zipmap %2 [% % %])", "user": "54b67463e4b05787c3b163bc"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "54ae6da2e4b09f271ff37cf2"}, {"problem": 156, "code": "(fn [d s] (reduce #(assoc % %2 d) {} s))", "user": "5228457ee4b0186687e23a76"}, {"problem": 156, "code": "#(reduce merge (map (fn [arg1 arg2] (assoc {} arg1 arg2)) %2 (repeat %1)))", "user": "54b2ec84e4b09f271ff37d33"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %)))", "user": "5488537be4b0e286459a11cf"}, {"problem": 156, "code": "(fn [v l] (into {} (for [x l] {x v})))", "user": "54b8dfece4b0ed20f4ff6e9a"}, {"problem": 156, "code": "(fn [d m] (into {} (for [x m] {x d})))", "user": "54b95f3de4b0ed20f4ff6eab"}, {"problem": 156, "code": "(fn [dv kv]\n  (reduce #(assoc %1 %2 dv) {} kv\n   ))", "user": "51e8ee6be4b07cae92c04bfd"}, {"problem": 156, "code": "(fn [df k] (zipmap k (repeat (count k) df)))", "user": "54b6c24be4b0ed20f4ff6e7c"}, {"problem": 156, "code": "(fn\n   [myVal myVec]\n   (zipmap (into [] (reverse myVec)) (take (count myVec) (repeat myVal)))\n   )", "user": "54ae58f2e4b09f271ff37cf0"}, {"problem": 156, "code": "(fn [d ks]\n  (into {} (map #(vector % d) ks)))", "user": "54acf5c7e4b09f271ff37cdd"}, {"problem": 156, "code": "(fn [d, a-seq] (zipmap a-seq (take (count a-seq) (iterate identity d))))", "user": "54b972bbe4b0ed20f4ff6ead"}, {"problem": 156, "code": "#(into {} (for [i %2] {i %1}))", "user": "53d1ba22e4b00fb29b221317"}, {"problem": 156, "code": "(fn [d ks] (zipmap ks (repeat d)))", "user": "54bad522e4b0ed20f4ff6eb8"}, {"problem": 156, "code": "(fn [defval init-keys]\n  (loop [res {}, key init-keys]\n    (if (empty? key)\n      res\n      (recur \n        (assoc res (first key) defval)\n        (rest key))\n      )))", "user": "54b61c88e4b05787c3b163b2"}, {"problem": 156, "code": "(fn x [default-value my-sequence]\n  (reduce (fn [acc element]\n            (assoc acc element default-value)) {} my-sequence))", "user": "546ff701e4b00cfc9eacc1b3"}, {"problem": 156, "code": "(fn [default-value, my-keys]\n    (reduce \n     \t#(assoc % %2 default-value)\n     {} my-keys))", "user": "54b66089e4b05787c3b163ba"}, {"problem": 156, "code": "(fn [v k] (apply hash-map (interleave k (repeat v))))", "user": "54bd04e7e4b0ed20f4ff6ed8"}, {"problem": 156, "code": "(fn [default values]\n  (loop [new-map {},\n         values values]\n    (if (= (count values) 0)\n      new-map\n      (recur\n       (assoc new-map (first values) default)\n       (next values)\n      )\n    )\n  )\n)", "user": "54bd91d7e4b0ed20f4ff6ee2"}, {"problem": 156, "code": "(fn[d ks] (->> ks\n               (map (fn [k] [k d]))\n               (apply concat)\n               (apply hash-map)))", "user": "54b10d08e4b09f271ff37d18"}, {"problem": 156, "code": "(fn [dft xs] (apply merge (map #(hash-map % dft) xs)))", "user": "54bc575ce4b0ed20f4ff6ecb"}, {"problem": 156, "code": "(fn [d ks]\n  (loop [k (first ks) ks (rest ks) ret {}]\n    (if k\n      (recur (first ks) (rest ks) (assoc ret k d))\n      ret)))", "user": "54bec835e4b0ed20f4ff6ef7"}, {"problem": 156, "code": "(fn [value keyList]\n  (loop [nl {} keyList keyList]\n    (if-not (seq keyList)\n      nl\n      (recur (assoc nl (peek keyList) value) (pop keyList))\n      )\n    )\n  )", "user": "54b90836e4b0ed20f4ff6e9d"}, {"problem": 156, "code": "(fn [d s]\n\t(zipmap s (repeatedly (fn[] d)))\n  )", "user": "54bbba99e4b0ed20f4ff6ec2"}, {"problem": 156, "code": "(fn [y x] (into {}(for [z x :let [w [z y]]] w)))", "user": "5480cce5e4b0e286459a115f"}, {"problem": 156, "code": "(fn [d s] (reduce #(assoc % %2 d ) {} s) )", "user": "54b45938e4b05787c3b1638f"}, {"problem": 156, "code": "(fn [d s] (reduce #(conj %1 {%2 d}) {} s))", "user": "54bff194e4b0ed20f4ff6f0d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "53d7710be4b0e771c3025462"}, {"problem": 156, "code": "(fn [x y] (into {} (map #(assoc {} % x) y)))", "user": "54b7ceb3e4b0ed20f4ff6e8a"}, {"problem": 156, "code": "(fn [d c] (reduce #(into % {%2 d}) {} c))", "user": "5339b53fe4b0e30313ee6cac"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1) )", "user": "54be7772e4b0ed20f4ff6eea"}, {"problem": 156, "code": "(fn [v ks]\n  (zipmap ks (repeat v)))", "user": "4e435681535dc968683fc4a1"}, {"problem": 156, "code": "(fn [val keys]\n   (into {} (map (fn [key] [key val]) keys)))", "user": "54bd9a60e4b0ed20f4ff6ee3"}, {"problem": 156, "code": "#(apply array-map (interleave %2 (repeat %1)))", "user": "53a69398e4b0ef122a8689ca"}, {"problem": 156, "code": "(fn ! [d ks]\n  (zipmap ks (repeat d)))", "user": "54c271b9e4b045293a27f602"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "52c048a5e4b07a9af5792349"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54c19050e4b0ed20f4ff6f26"}, {"problem": 156, "code": "(fn [dv keys]  (apply conj (for [item keys] (hash-map item dv))))", "user": "54bbe505e4b0ed20f4ff6ec5"}, {"problem": 156, "code": "(fn [deflt ks]\n  (apply hash-map (interleave ks (repeat deflt))))", "user": "54c169ade4b0ed20f4ff6f24"}, {"problem": 156, "code": "(fn [default a-seq] \n  (into \n   {}\n   (map #(vec (list % default)) a-seq)))", "user": "5235493ee4b05e80434a5064"}, {"problem": 156, "code": "(fn [dflt coll] (apply hash-map (mapcat #(list % dflt) coll)))", "user": "54bd3aefe4b0ed20f4ff6edb"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %))", "user": "54bc539be4b0ed20f4ff6eca"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "51cf815de4b0e42293a22575"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "53d977f1e4b0e771c302547a"}, {"problem": 156, "code": "(fn createMap\n   ([ourvals ourMap]\n    (zipmap ourMap (repeat ourvals))))", "user": "5499e052e4b03163384f4705"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "546b89ffe4b00cfc9eacc16d"}, {"problem": 156, "code": "(fn[t x](reduce #(assoc %1 %2 t){} x))", "user": "50d0d2dde4b00b15ecee9768"}, {"problem": 156, "code": "(fn [default xs] (reduce #(assoc %1 %2 default) {} xs))", "user": "54c8d4a8e4b045293a27f654"}, {"problem": 156, "code": "(fn [def-val coll]\n  (into {} (reduce (fn [new-map key]\n                     (conj new-map [key def-val]))\n                   []\n                   coll)))", "user": "54ab1b5ae4b09f271ff37cc2"}, {"problem": 156, "code": "(fn [default keys] (apply hash-map (mapcat (fn [x] [x default]) keys)))", "user": "50eafeaae4b0346a3e988cbb"}, {"problem": 156, "code": "(fn [v l] (reduce (fn [c e] (assoc c e v)) {} l))", "user": "525b142fe4b0cb4875a45d05"}, {"problem": 156, "code": "(fn [default coll]\n  (into {} (map vector coll (repeat default))))", "user": "50310713e4b05b7df5a0b84c"}, {"problem": 156, "code": "(fn [default ks]\n  (apply merge (map #(hash-map % default) ks)))", "user": "53bc10f5e4b047364c04450d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "54aa665fe4b09f271ff37cb8"}, {"problem": 156, "code": "(fn [default keys]\n  (reduce (fn [memo key]\n            (assoc memo key default)) {} keys))", "user": "545bd22fe4b01be26fd7465a"}, {"problem": 156, "code": "(fn [value keys] \n  (reduce #(assoc %1 %2 value) \n          {}\n          keys))", "user": "52aad30ce4b0c58976d9ac6d"}, {"problem": 156, "code": "(fn [defVal col] (reduce #(assoc %1 %2 defVal) {} col))", "user": "4f577f25e4b0a7574ea71839"}, {"problem": 156, "code": "(fn\n  [default init-keys]\n  (loop [res {} init init-keys]\n    (if (empty? init)\n      res\n      (recur\n       (assoc res (first init) default)\n       (rest init))\n      )))", "user": "547a714ae4b0c51c1f4d72cc"}, {"problem": 156, "code": "#(reduce merge (map (fn [x] {x %1}) %2))", "user": "54c9636fe4b045293a27f66e"}, {"problem": 156, "code": "(fn [v ks] (apply hash-map (mapcat #(vector % v) ks)))", "user": "54c641f8e4b045293a27f628"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "52950ab6e4b02ebb4ef7501a"}, {"problem": 156, "code": "(fn [d ks]\n  (reduce #(assoc %1 %2 d) {} ks))", "user": "53838b9ee4b06839e8705ee1"}, {"problem": 156, "code": "#(into {} (for [a %2] [a %]))", "user": "53e8e42ce4b036ad0777e48e"}, {"problem": 156, "code": "(let [defmap (atom {})] \n  (fn [val keys]\n    (last\n      (for [key keys]\n        (swap! defmap assoc key val)))))", "user": "54c13b87e4b0ed20f4ff6f20"}, {"problem": 156, "code": "(fn [v m] (reduce #(assoc % %2 v) {} m))", "user": "54962cf0e4b0b312c081ff64"}, {"problem": 156, "code": "(fn [default-value keys]\n  (zipmap keys (repeat default-value)))", "user": "54cc26c1e4b057c6fda3a28a"}, {"problem": 156, "code": "(fn [default xs]  (zipmap xs (repeat (count xs) default)))", "user": "53d64811e4b0e771c3025456"}, {"problem": 156, "code": "(fn [default xs]\n  (apply assoc {} (interleave xs (repeat default))))", "user": "54cb378be4b057c6fda3a273"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %)))", "user": "54ccf107e4b057c6fda3a294"}, {"problem": 156, "code": "(fn [thinga thingb] (into {} (map vector thingb (repeat thinga))))", "user": "54a634abe4b09f271ff37c84"}, {"problem": 156, "code": "(fn [d, ks]\n  (\n   apply hash-map (apply concat (for [k ks] (list k d)))\n  )\n)", "user": "54c9f165e4b045293a27f687"}, {"problem": 156, "code": "#(into {} (for [i %2] [i %]))", "user": "54b7f217e4b0ed20f4ff6e8f"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54c8eb61e4b045293a27f658"}, {"problem": 156, "code": "#(into {} (for [x [%1] y %2] [y x]))", "user": "54ce541de4b057c6fda3a2ac"}, {"problem": 156, "code": "#(loop [acc {} keys %2]\n   (if (empty? keys) acc\n     (recur (assoc acc (first keys) %)\n            (rest keys))))", "user": "54cbb0fde4b057c6fda3a27b"}, {"problem": 156, "code": ";#(into {} (map (juxt identity (constantly %1)) %2))\n#(zipmap %2 (repeat %1))", "user": "54ca9ca8e4b057c6fda3a265"}, {"problem": 156, "code": "#(apply sorted-map (apply concat (for [x %2 y [%1]] [x y])))", "user": "54c8ac49e4b045293a27f64e"}, {"problem": 156, "code": "(fn [value keys]\n  (into {}\n        (map vector \n             keys\n             (repeat (count keys) value))))", "user": "54b5ce67e4b05787c3b163ac"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "54ce3790e4b057c6fda3a2ab"}, {"problem": 156, "code": "(fn [default-value keys] (zipmap keys (repeat default-value)))", "user": "541b1f25e4b01498b1a71a63"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "52a892b4e4b0c58976d9ac31"}, {"problem": 156, "code": "(fn [d xs] (apply assoc {} (for [x xs\n                                 y [x d]]\n                             y)))", "user": "4ea03f70535d7eef308072a1"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5492eb97e4b0b312c081ff46"}, {"problem": 156, "code": "(fn [d xs] (into {} (map vector xs (repeat d))))", "user": "54d03026e4b018d918be98de"}, {"problem": 156, "code": "(fn [val keys] (zipmap keys (repeat (count keys) val)))", "user": "54aec099e4b09f271ff37cf5"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "54b65694e4b05787c3b163b9"}, {"problem": 156, "code": "(fn [d v] (into {} (map #(vector % d) v)))", "user": "54d0e6c5e4b0e8a36923e5d4"}, {"problem": 156, "code": "(fn [default the-list-of-keys] (zipmap the-list-of-keys (cycle (list default))))", "user": "54cb3497e4b057c6fda3a272"}, {"problem": 156, "code": "(fn [default ks] (zipmap ks (repeat (count ks) default)))", "user": "54c6619ae4b045293a27f62b"}, {"problem": 156, "code": "(fn [default ks]\n  (reduce #(assoc % %2 default) {} ks))", "user": "54d251aee4b0e8a36923e5f1"}, {"problem": 156, "code": "(fn\n  [v ks]\n  (reduce #(assoc % %2 v) {} ks))", "user": "54d267e0e4b0e8a36923e5f3"}, {"problem": 156, "code": "(fn [default keys-list]\n  (apply conj (map (fn [k] {k default}) keys-list)))", "user": "54d492dbe4b0a52adc2e2001"}, {"problem": 156, "code": "(fn [default coll]\n  (into {}\n        (for [c (seq coll)\n              d (vector default)]\n          [c d])))", "user": "54271c6de4b01498b1a71b20"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "4e3ff3a4535dc968683fc499"}, {"problem": 156, "code": "#(into {} (map (juxt identity (fn [n] %1)) %2))", "user": "547c2c6ce4b0c51c1f4d72e3"}, {"problem": 156, "code": "(fn [default keys] (reduce #(assoc %1 %2 default) {} keys))", "user": "54d6f22de4b0a52adc2e2023"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54c23252e4b045293a27f5fc"}, {"problem": 156, "code": "(fn [d keys] (apply merge (for [k keys] {k d})))", "user": "54d7ed8de4b0a52adc2e2034"}, {"problem": 156, "code": "(fn [d t] (into {} (map (fn [x] {x d}) t)))", "user": "54d82f2be4b0a52adc2e2037"}, {"problem": 156, "code": "(fn [v ks]\n  (reduce conj\n          {}\n          (for [k ks] {k v})))", "user": "54d753ebe4b0a52adc2e2029"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54d4ec31e4b0a52adc2e2007"}, {"problem": 156, "code": "(fn [default ks]\n  (into {} (map #(assoc {} % default) ks)))", "user": "510a3cd4e4b06956752d35ad"}, {"problem": 156, "code": "(fn [a b] (apply merge (map (fn [k] {k a}) b)))", "user": "54b83ae9e4b0ed20f4ff6e95"}, {"problem": 156, "code": "(fn [d xs] (reduce #(assoc %1 %2 d) {} xs))", "user": "54ba9ee8e4b0ed20f4ff6eb7"}, {"problem": 156, "code": "#(reduce (fn [a b] (assoc a b %1)) {} %2)", "user": "54d70f40e4b0a52adc2e2027"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54cc313de4b057c6fda3a28b"}, {"problem": 156, "code": "(fn [val keys] \n  (into\n   {}\n   (map (fn [k] {k val}) keys)))", "user": "54d87b54e4b0a52adc2e2038"}, {"problem": 156, "code": "(fn [d m] (into {} (map #(vector % d) m)))", "user": "4ec66e84535d6d7199dd36cd"}, {"problem": 156, "code": "#(reduce conj (map (fn [x] {x %}) %2))", "user": "54cd9519e4b057c6fda3a2a6"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54d127b7e4b0e8a36923e5de"}, {"problem": 156, "code": "#(zipmap (reverse %2) [%1 %1 %1])", "user": "54db8d27e4b024c67c0cf765"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54d4b3a7e4b0a52adc2e2003"}, {"problem": 156, "code": "#(apply hash-map(interleave %2 (repeat %)))", "user": "54cbc9ede4b057c6fda3a27f"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %1)))", "user": "54d6c80ce4b0a52adc2e2020"}, {"problem": 156, "code": "(fn [x col]\n  (reduce #(assoc %1 %2 x) {} col)\n)", "user": "547b4ec6e4b0c51c1f4d72d5"}, {"problem": 156, "code": ";(fn [v ks] (into {} (for [k ks] {k v})))\n(fn [v ks] (reduce #(assoc %1 %2 v) {} ks))", "user": "4f7207d3e4b07046d9f4f019"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "54d1cf2ee4b0e8a36923e5eb"}, {"problem": 156, "code": "(fn [default my-vec]\n    (loop [m {} v my-vec]\n      (if (empty? v)\n        m\n        (recur (assoc m (first v) default) (rest v)))))", "user": "54cbd6bae4b057c6fda3a282"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54db8ddae4b024c67c0cf767"}, {"problem": 156, "code": "(fn [v k]\n    (into {} (map (fn [x] {x v}) k)))", "user": "51b91b08e4b0e871ca4958f8"}, {"problem": 156, "code": "(fn [n s] (apply conj (map #(hash-map % n) s)))", "user": "54dbcbbde4b024c67c0cf774"}, {"problem": 156, "code": "(fn [d c] (apply hash-map (mapcat #(list % d) c)))", "user": "54dd76c8e4b024c67c0cf794"}, {"problem": 156, "code": "(fn [default key-lst] (reduce #(into %1 {%2 default}) {}  key-lst))", "user": "53f31dafe4b0742d9025b0f0"}, {"problem": 156, "code": "(fn [value coll] (apply hash-map (interleave coll (repeat value))))", "user": "54d412e2e4b0a52adc2e1ffe"}, {"problem": 156, "code": "(fn [v k] (into {} (map #(vector % v) k)))", "user": "54ddb556e4b024c67c0cf798"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %)))", "user": "4fc4eb1ee4b081705acca354"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5293a603e4b0239c8a67af42"}, {"problem": 156, "code": "(fn [default ks]\n  (apply assoc {} (interleave ks (repeat default))))", "user": "54df2274e4b024c67c0cf7a8"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "54df2609e4b024c67c0cf7a9"}, {"problem": 156, "code": "(fn [k xs]\n  (reduce #(assoc %1 %2 k) {} xs))", "user": "54d5fbe9e4b0a52adc2e2014"}, {"problem": 156, "code": "(fn [defval keyl] (into {} (map #(vec (list %1 defval)) keyl)))", "user": "54df3c94e4b024c67c0cf7aa"}, {"problem": 156, "code": "(fn [val keys]\n  (into {}\n        (map vector keys (repeat val))))", "user": "545944a2e4b01be26fd74627"}, {"problem": 156, "code": "(fn [default keyList] (reduce #(assoc %1 %2 default) {} keyList))", "user": "54d2b411e4b0e8a36923e5f9"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "549b1e50e4b0f3d1d8e70f7a"}, {"problem": 156, "code": "(fn [default keys] (reduce #(conj %1 [%2 default]) {} keys))", "user": "54e2a779e4b024c67c0cf7d3"}, {"problem": 156, "code": "(fn [v ks]\n  (apply merge (map #(hash-map % v) ks)))", "user": "5382b433e4b06839e8705ed7"}, {"problem": 156, "code": "#(into {} (for [k %2] [k %1]))", "user": "54e3df6ae4b024c67c0cf7e3"}, {"problem": 156, "code": "(fn[d ks](reduce #(assoc %1 %2 d) {} ks))", "user": "54d22860e4b0e8a36923e5ef"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "54e32090e4b024c67c0cf7d9"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "54d104a5e4b0e8a36923e5d9"}, {"problem": 156, "code": "(fn [default keys] (into {} (for [x keys] [x default])))\n\n; previous:\n; (fn [default keys] (into {} (map #(vector % default) keys)))", "user": "54de6820e4b024c67c0cf79f"}, {"problem": 156, "code": "(fn [x lst] (zipmap lst (repeat x)))", "user": "54e540c1e4b024c67c0cf7f9"}, {"problem": 156, "code": "(fn [var col]\n  (apply merge (map hash-map col (repeat var))))", "user": "541f89a5e4b01498b1a71a99"}, {"problem": 156, "code": "(fn [default keys] (reduce #(assoc %1 %2 default) {} keys ))", "user": "54d8cc38e4b0a52adc2e203e"}, {"problem": 156, "code": "#(into {} (for [k %2] {k %}))", "user": "4ec3650f535dcc7ae8597d56"}, {"problem": 156, "code": "(fn [x col]\n(into {} (for [element col]\n  (hash-map element x))))", "user": "54dd1c2be4b024c67c0cf790"}, {"problem": 156, "code": "(fn [x s] (into {} (map #(vector % x) s)))", "user": "54da46e5e4b024c67c0cf753"}, {"problem": 156, "code": "(fn [value kis]\n  (loop [m {}\n         rem-keys kis]\n    (let [[k & ks] rem-keys]\n      (cond\n        (nil? rem-keys) m\n        :else (recur (assoc m k value) ks)))))", "user": "54e79094e4b024c67c0cf818"}, {"problem": 156, "code": "(fn [v ks] (reduce (fn [m k] (assoc m k v)) {} ks))", "user": "54e85a7fe4b024c67c0cf823"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %1)))", "user": "54e26ee5e4b024c67c0cf7d0"}, {"problem": 156, "code": "(fn [d s] (into {} (map #(vec [% d]) s)))", "user": "53cdf5dfe4b00fb29b2212e9"}, {"problem": 156, "code": "(fn [x y] (apply merge (map #(hash-map %  x) y) ) )", "user": "54de7948e4b024c67c0cf7a4"}, {"problem": 156, "code": "(fn [v ks]\n  (into {} (map #(vector % v) ks)))", "user": "53383c74e4b0e30313ee6c92"}, {"problem": 156, "code": "(fn [a b] (into {} (map #(vector % a) b)))", "user": "533f1584e4b085b17e897d9b"}, {"problem": 156, "code": "(fn defaultMap [defaultValue keys] \n  (reduce ( fn [coll, key] (assoc coll key defaultValue)) {} keys))", "user": "521a6cdde4b0c4ef0be8300d"}, {"problem": 156, "code": "#(into {} (map (fn [k] (assoc {} k %)) %2))", "user": "54cbe00ee4b057c6fda3a285"}, {"problem": 156, "code": "#(into {} (mapv vector %2 (repeat %1)))", "user": "5470699ae4b00cfc9eacc1b6"}, {"problem": 156, "code": "(fn [default, keys] (let [result {}] (reduce (fn [p x] (conj p [x default])) result keys)))", "user": "54eb53cfe4b024c67c0cf84a"}, {"problem": 156, "code": "(fn [d ks] (into {} (map #(vector % d) ks)))", "user": "5484fab9e4b0e286459a11a6"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "529de065e4b04e0c58e87b84"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54e19a26e4b024c67c0cf7c6"}, {"problem": 156, "code": "(fn [default map-keys] (zipmap map-keys (repeat default)))", "user": "54db3d82e4b024c67c0cf75f"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54e606c3e4b024c67c0cf803"}, {"problem": 156, "code": "(fn [dv map-keys] (zipmap map-keys (iterate (fn [x] dv) dv)))", "user": "54e84d1ee4b024c67c0cf822"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "518ba795e4b0f028e99addf0"}, {"problem": 156, "code": "#(apply merge (map (fn [k] {k %1}) %2))", "user": "54ec7f52e4b024c67c0cf853"}, {"problem": 156, "code": "(fn [default keys]\n  (zipmap keys (repeat default)))", "user": "54ef4a1ee4b024c67c0cf883"}, {"problem": 156, "code": "(fn [d k]\n  (apply hash-map (interleave k (repeat d))))", "user": "54ef51bde4b024c67c0cf884"}, {"problem": 156, "code": "(fn \n  [v, xs] (reduce #(conj %1 {%2 v}) {} xs))", "user": "4f598c87e4b0030a34fb2ada"}, {"problem": 156, "code": "(fn [default-val ks]\n  (reduce (fn [m k] (assoc m k default-val)) {} ks))", "user": "54ef4a1de4b024c67c0cf882"}, {"problem": 156, "code": "(fn map-default [default coll]\n  (if (empty? coll)\n    {}\n    (assoc (map-default default (rest coll))(first coll) default)))", "user": "54e4e14ce4b024c67c0cf7f1"}, {"problem": 156, "code": "(fn [x, y] (into {} (map (fn [a] {a x}) y)))", "user": "54d4ddd2e4b0a52adc2e2006"}, {"problem": 156, "code": "#(into {} (map hash-map %2 (repeat (count %2) %1)))", "user": "53d9e587e4b0e771c302547c"}, {"problem": 156, "code": "(fn [default coll] \n  (into {} (map vector coll (repeat default))))", "user": "54a6baaee4b09f271ff37c8a"}, {"problem": 156, "code": "(fn [v k] (zipmap k (repeat (count k) v)))", "user": "54f232f1e4b024c67c0cf8bf"}, {"problem": 156, "code": "(fn [in coll]\n  (apply assoc {} (interleave coll (take (count coll) (iterate #(identity %1) in)))))", "user": "54caaa48e4b057c6fda3a267"}, {"problem": 156, "code": "(fn me [value coll]\n  (loop [coll coll result {}]\n    (if (empty? coll)\n      result\n      (recur (rest coll) (assoc result (first coll) value)))))", "user": "54f03f8ce4b024c67c0cf891"}, {"problem": 156, "code": "(fn [v ks] (into {} (map #(vector % v) ks)))", "user": "54f0d3fde4b024c67c0cf8a6"}, {"problem": 156, "code": "#(zipmap %2 (for [k %2] %))", "user": "52a0f9c4e4b04e0c58e87bd0"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54215735e4b01498b1a71ab2"}, {"problem": 156, "code": "(fn [default keys]\n  (into {} (map (fn [k] [k default]) keys)))", "user": "504e2d18e4b0f6ff3350c47a"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "54f2fe9fe4b050824f58f5b8"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "54dae16de4b024c67c0cf758"}, {"problem": 156, "code": "(fn[v k] \n  (\n    reduce #(conj %1 [%2 v]) {} k\n  ))", "user": "54f4a457e4b0f2f3c5226e83"}, {"problem": 156, "code": "#(last (let [m (atom {})]\n        (for [ [x y] (partition 2 (conj (vec (interpose %1 %2)) %1))] (swap! m assoc x y) )))", "user": "54e51c7be4b024c67c0cf7f7"}, {"problem": 156, "code": "(fn [defv keys] (zipmap keys (repeat (count keys) defv)))", "user": "539338e3e4b0b51d73faaeb9"}, {"problem": 156, "code": "(fn [default keys] (reduce (fn [acc k] (assoc acc k default)) {} keys))", "user": "54eee3a3e4b024c67c0cf879"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "54eca495e4b024c67c0cf855"}, {"problem": 156, "code": "(fn [x xs]\n  (reduce #(assoc %1 %2 x) {} xs))", "user": "546ff835e4b00cfc9eacc1b4"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54f73502e4b01ecee9d88817"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "54f0c18ee4b024c67c0cf8a4"}, {"problem": 156, "code": "(fn [default values] \n  (reduce \n   (fn [x y] ( if(contains? x y) (x) (conj x [y default])))\n  {}\n  values\n  )\n)", "user": "54f97e22e4b01ecee9d8883a"}, {"problem": 156, "code": "#(zipmap %2 (take (count %2) (repeat %1)))", "user": "54e4edcae4b024c67c0cf7f3"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "539c736ce4b0b51d73faaf2b"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "4f03e60d535dcb61093f6b7a"}, {"problem": 156, "code": "#(apply hash-map (interleave  %2 (repeat %1)))", "user": "54f9920ee4b01ecee9d8883f"}, {"problem": 156, "code": "(fn [default, arg]\n   (into {} (map #(-> [% default]) arg)))", "user": "54eff2bee4b024c67c0cf88d"}, {"problem": 156, "code": "(fn [default-value collection]\n  (into {} (for [element collection]\n                  [element default-value])))", "user": "5422c959e4b01498b1a71ac7"}, {"problem": 156, "code": "(fn\n  [v ks]\n  (loop [ks ks acc {}]\n    (if (empty? ks)\n      acc\n      (recur (pop ks) (assoc acc (peek ks) v)))))", "user": "54fdbe3fe4b07d26eda61d3b"}, {"problem": 156, "code": "(fn [iv col] (zipmap col (repeat (count col) iv)))", "user": "54fd5e2de4b07d26eda61d33"}, {"problem": 156, "code": "(fn [dv mys] (->> mys (map #(hash-map % dv)) (reduce conj)))", "user": "542fa0dde4b0dad94371f2d2"}, {"problem": 156, "code": "(fn [y x] (apply hash-map (apply concat (for [z x] [z y]))))", "user": "54e0a9c3e4b024c67c0cf7b5"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "54e1197fe4b024c67c0cf7c0"}, {"problem": 156, "code": "(fn try-me [def-val seq_of_keys]\n  (loop [s_o_k seq_of_keys accumulator {}]\n    (if (empty? s_o_k)\n      accumulator\n    (recur (rest s_o_k) (assoc accumulator (first s_o_k) def-val)))))", "user": "53ef235de4b0d648e757f4d4"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54eea988e4b024c67c0cf875"}, {"problem": 156, "code": "(fn mapDef\n  [val x]\n  (into {} (map #(vector %1 val) x)))", "user": "54f64e99e4b0f2f3c5226ea4"}, {"problem": 156, "code": "#(apply conj (conj (for [x %2] [x %1]) {}))", "user": "54bcab07e4b0ed20f4ff6ed5"}, {"problem": 156, "code": "(fn [x s] (apply hash-map (reduce #(conj %1 %2 x) [] s)))", "user": "54febf4be4b07d26eda61d45"}, {"problem": 156, "code": "(fn [x y] (reduce merge (map #(hash-map % x) y)) )", "user": "54f6f00fe4b01ecee9d88814"}, {"problem": 156, "code": "(fn [default ks]\n  (into {} (map (fn [k]\n                  [k default])\n                ks)))", "user": "5498e155e4b0b312c081ff86"}, {"problem": 156, "code": "(fn [v ks] (reduce #(assoc %1 %2 v) {} ks))", "user": "5426200ae4b01498b1a71b16"}, {"problem": 156, "code": "#(zipmap %2 (take (count %2) (repeat %1)))", "user": "5501f45fe4b07d26eda61d7f"}, {"problem": 156, "code": "(fn [d a] (into {} (for [i a] [i d])))", "user": "55016428e4b07d26eda61d72"}, {"problem": 156, "code": "(fn [default thekeys]\n  (loop [ks thekeys\n         result {}]\n    (if (empty? ks)\n      result\n      (recur (rest ks) (conj result [(first ks) default])))))", "user": "54ba8076e4b0ed20f4ff6eb5"}, {"problem": 156, "code": "(fn [d s] (zipmap s (repeat d)))", "user": "54961073e4b0b312c081ff62"}, {"problem": 156, "code": "(fn [val coll]\n  (loop [val val\n         coll coll\n         res {}]\n    (if (empty? coll)\n      res\n      (recur val (rest coll) (assoc res (first coll) val)))))", "user": "54b31445e4b09f271ff37d35"}, {"problem": 156, "code": "(fn [default coll]\n  (zipmap coll (repeat (count coll) default)))", "user": "54d1b6ffe4b0e8a36923e5e6"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat (count %2) %1)))", "user": "55058a4fe4b086ebe8a79c89"}, {"problem": 156, "code": "(fn [d s] \n\t(reduce #(conj %1 [%2 d]) {} s)\n)", "user": "54f773bfe4b01ecee9d8881f"}, {"problem": 156, "code": "(fn[x y](into (sorted-map)(apply merge (map #(hash-map % x) y))))", "user": "54f15cb8e4b024c67c0cf8b1"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "550609b3e4b021ccfedb9695"}, {"problem": 156, "code": "(fn v-map [v keys]\n  (cond\n    (= keys []) {}\n    :else (assoc (v-map v (rest keys)) (first keys) v)))", "user": "52b36925e4b0c58976d9ad0b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54edc818e4b024c67c0cf865"}, {"problem": 156, "code": "(fn [v coll] (into {} (for [x coll] {x v}\n                       )))", "user": "54bca097e4b0ed20f4ff6ed4"}, {"problem": 156, "code": "(fn [v k]\n  (loop [v v, k k, r {}]\n    (if (not-empty k) (recur v (rest k) (assoc r (first k) v))\n      r)))", "user": "5457e502e4b01be26fd74612"}, {"problem": 156, "code": "(fn my-map\n  [x y]\n  (if (empty? (rest y))\n    (hash-map (first y) x)\n    (merge (hash-map (first y) x) (my-map x (rest y)))))", "user": "543be8f0e4b032a45b869337"}, {"problem": 156, "code": "(fn [d ks] (reduce #(assoc %1 %2 d) {} ks))", "user": "4fa5c8dde4b081705acca1af"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat (count %2) %1)))", "user": "550730ffe4b021ccfedb96a2"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %)))", "user": "527ccaf4e4b0757a1b17136d"}, {"problem": 156, "code": "(fn [d s] (into {} (map #(hash-map % d) s)))", "user": "5501ad6ee4b07d26eda61d76"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "55022d7ce4b07d26eda61d84"}, {"problem": 156, "code": "#(into {} (for [x %2] [x %1]))", "user": "5504dd64e4b086ebe8a79c83"}, {"problem": 156, "code": "(fn [x coll] (into {} (zipmap coll (repeat x))))", "user": "55088bb3e4b06e50f9beb10c"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5412b531e4b01498b1a719d7"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (repeat (count ks) v)))", "user": "54f5746de4b0f2f3c5226e92"}, {"problem": 156, "code": "#(reduce (fn [a b] (assoc a b %1)) {} %2)", "user": "5505ceb3e4b086ebe8a79c8b"}, {"problem": 156, "code": "(fn [v s] (into {} (map #(hash-map % v) s)))", "user": "5509a176e4b06e50f9beb119"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5509a755e4b06e50f9beb11b"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5509b434e4b06e50f9beb11e"}, {"problem": 156, "code": "#(apply hash-map  (interleave %2 (repeat %)))", "user": "5507cfd3e4b021ccfedb96ad"}, {"problem": 156, "code": "(fn [v coll]  (into {} (for [x coll] {x v})))", "user": "550ac34fe4b06e50f9beb133"}, {"problem": 156, "code": "(fn [v ks] (reduce #(assoc %1 %2 v) {} ks))", "user": "540a4f20e4b0addc1aec66ef"}, {"problem": 156, "code": "(fn [dv v]\n  (reduce\n    #(assoc %1 %2 dv)\n    {}\n    v))", "user": "549a999be4b0f3d1d8e70f6f"}, {"problem": 156, "code": "(fn [mydef myseq] (reduce #(assoc %1 %2 mydef) {} myseq))", "user": "55076bf6e4b021ccfedb96a6"}, {"problem": 156, "code": "(fn [val keys] (into {} (for [key keys] [key val])))", "user": "53e4e21ce4b036ad0777e450"}, {"problem": 156, "code": "(fn [default kseq] (into {} (map #(vector % default) kseq)) )", "user": "54fa60dfe4b0cf870d934704"}, {"problem": 156, "code": "#(apply hash-map (concat (interpose %1 %2) [%1]))", "user": "54e24a05e4b024c67c0cf7ce"}, {"problem": 156, "code": "(fn [v ks]\n  (reduce #(assoc %1 %2 v) {} ks))", "user": "546ed28be4b00cfc9eacc1a5"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "550174b5e4b07d26eda61d73"}, {"problem": 156, "code": "(fn mMap [d x] (let [[k & ks] x] (if (= ks nil) {k d} (conj {k d} (mMap d ks)))))", "user": "550e0373e4b06e50f9beb162"}, {"problem": 156, "code": "(fn [val, keys] (zipmap keys (repeat val)))", "user": "550da0c7e4b06e50f9beb15e"}, {"problem": 156, "code": "(fn [defs keys]\n               (reduce conj (for [key keys]\n                               {key defs})))", "user": "54c3747de4b045293a27f60e"}, {"problem": 156, "code": "#(into {} (for [x %2] [x %1]))", "user": "54cbd97ae4b057c6fda3a283"}, {"problem": 156, "code": "(fn [v lst]\n  (into {} (map (fn [x] {x v}) lst)))", "user": "55101237e4b06e50f9beb181"}, {"problem": 156, "code": "(fn [key seq]\n   (reduce (fn [x y] (println x y) (if (map? x)\n                                     (into x {y key})\n                                     (into {} {x key, y key}))) seq))", "user": "5508102ee4b021ccfedb96b0"}, {"problem": 156, "code": "(fn [v keyz] (zipmap keyz (take (count keyz)(repeat v))))", "user": "5510f734e4b06e50f9beb18f"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %)))", "user": "51227e00e4b068a9582e656c"}, {"problem": 156, "code": "(fn [value list] (reduce (fn [x y] (assoc x y value)) {} list))", "user": "55092319e4b06e50f9beb113"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "549674cde4b0b312c081ff66"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %)))", "user": "54116e2fe4b01498b1a719c4"}, {"problem": 156, "code": "(fn [val map] (into {} (for [x map] [x val])))", "user": "546be022e4b00cfc9eacc171"}, {"problem": 156, "code": "(fn [d,k] (apply merge (map #(hash-map % d) (vec k))))", "user": "5512b15ae4b055c2f668d4b5"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %1)))", "user": "5511fd7ee4b06e50f9beb19e"}, {"problem": 156, "code": "(fn [d coll]\n  (apply assoc {}\n    (interleave coll (repeat d))\n  ))", "user": "50c6052ce4b0c9dc10d15c56"}, {"problem": 156, "code": "(fn myreduce [default seq]\n  (let [myreduce-int (fn [map default seq]\n                      (if (empty? seq)\n                        map\n                        (recur (assoc map (first seq) default) default (rest seq))))]\n    (myreduce-int {} default seq)))", "user": "550ff2a3e4b06e50f9beb17f"}, {"problem": 156, "code": "(fn [d v] (reduce (fn [m v] (assoc m v d)) {} v) )", "user": "5510aa92e4b06e50f9beb188"}, {"problem": 156, "code": "(fn [k v] (apply hash-map (mapcat #(vector %1 k) v)))", "user": "550bf2bee4b06e50f9beb14b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55156efae4b055c2f668d4e5"}, {"problem": 156, "code": "#(apply hash-map (concat (interpose % %2) [%]))", "user": "54126d0ce4b01498b1a719d5"}, {"problem": 156, "code": "(fn [n coll] (zipmap coll (take (count coll) (cycle (list n)))))", "user": "5514a60fe4b055c2f668d4d7"}, {"problem": 156, "code": ";;(fn [k m] (apply hash-map (reduce #(conj %1 %2 k) [] m)))\n(fn [k m] (into {} (map #(conj [%] k) m)))", "user": "551535cee4b055c2f668d4df"}, {"problem": 156, "code": "(fn [%1 %2](into {} (for [x %2] [x %1])))", "user": "54e604a1e4b024c67c0cf801"}, {"problem": 156, "code": "(fn [d l] (reduce conj {} (map #(vector % d) l)))", "user": "51bb08a4e4b0fe3ecfb46446"}, {"problem": 156, "code": "(fn [defv keyz] (into {} (for [x keyz] [x defv])))", "user": "533c2605e4b0e30313ee6cd7"}, {"problem": 156, "code": "(fn [d s] (apply hash-map (interleave s (repeat d))))", "user": "5515649fe4b055c2f668d4e3"}, {"problem": 156, "code": "(fn [value l2]\n  (loop [l1 l2 d {}]\n     (if (empty? l1)\n       d\n       (recur (rest l1) (assoc d (first l1) value)))))", "user": "5516fd2ce4b06a49daca83bb"}, {"problem": 156, "code": "(fn [v ks]\n  (into (sorted-map) (map #(vector % v) ks)))", "user": "54a80855e4b09f271ff37c9e"}, {"problem": 156, "code": "(fn [default list] (reduce #(assoc %1 %2 default) {} list ))", "user": "54857657e4b0e286459a11ac"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "514f0a28e4b019235f6c059a"}, {"problem": 156, "code": "(fn defaults [default keys]\n  (zipmap keys (repeat default)))", "user": "55170dd9e4b06a49daca83bd"}, {"problem": 156, "code": "(fn [valu vectr] (reduce (fn [accumulator k] (assoc accumulator k valu)) {} vectr))", "user": "54dda2b1e4b024c67c0cf796"}, {"problem": 156, "code": "(fn [v xs] (reduce #(conj % [%2 v]) {} xs) )", "user": "5512967ee4b06e50f9beb1ae"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "55129632e4b06e50f9beb1aa"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %)))", "user": "551bbcd4e4b07993ea3788d5"}, {"problem": 156, "code": "#(zipmap %2 (take 5 (repeat %1)))", "user": "551297dee4b06e50f9beb1b1"}, {"problem": 156, "code": "(fn [d m] (apply assoc {} (interleave m (repeat d))))", "user": "5512980ce4b06e50f9beb1b3"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "55129c5ce4b06e50f9beb1b5"}, {"problem": 156, "code": "(fn [x l] (reduce #(assoc % %2 x) {} l) )", "user": "550b5a53e4b06e50f9beb142"}, {"problem": 156, "code": "#(let [ks %2 v %1 m (count %2)] \n    (loop [result {} index 0]\n      (if(< index m)\n        (recur (conj result [(ks index) v]) (inc index))\n        result)\n       )\n    )", "user": "54f9c4dfe4b01ecee9d88841"}, {"problem": 156, "code": "(fn [v m] (zipmap m (repeat v)))", "user": "551b329ae4b07993ea3788cf"}, {"problem": 156, "code": "(fn mm [v keys] (if(not-empty keys) (merge(hash-map(first keys) v)(mm v (rest keys)))))", "user": "5515b68de4b055c2f668d4ef"}, {"problem": 156, "code": "(fn [x coll]\n  (apply hash-map (interleave coll (repeat (count coll) x)))\n  )", "user": "5510d948e4b06e50f9beb18d"}, {"problem": 156, "code": "(fn\n   [v xs]\n   (loop [xs xs acc {}]\n     (if (empty? xs)\n       acc\n       (recur (rest xs) (assoc acc (first xs) v)))))", "user": "551a21ece4b091ff45eda993"}, {"problem": 156, "code": "(fn [d k] (zipmap k (repeat d)))", "user": "550e52dbe4b06e50f9beb165"}, {"problem": 156, "code": ";(fn [value ks]\n;  (reduce (fn [acc v] (assoc acc v value)) {} ks))\n(fn [value ks]\n  (into {} (for [k ks] {k value})))", "user": "54dce62be4b024c67c0cf78b"}, {"problem": 156, "code": "(fn addkv [v keys]\n  (reduce (fn [t el] (assoc t el v)) {} keys ))", "user": "54dce6dbe4b024c67c0cf78d"}, {"problem": 156, "code": "(fn [v keys]\n  (reduce (fn [t el] (assoc t el v) ) {} keys))", "user": "54dce62fe4b024c67c0cf78c"}, {"problem": 156, "code": "(fn [default ks] \n  (apply hash-map \n         (apply concat (zipmap ks (repeat default)))))", "user": "503f923fe4b00d1a725ff2ad"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "551dfd81e4b030e6a24d00e0"}, {"problem": 156, "code": "(fn [default list]\n  (into {} (map #(vector % default) list)))", "user": "55183a11e4b06a49daca83ca"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "550033a8e4b07d26eda61d59"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "550615c0e4b021ccfedb9696"}, {"problem": 156, "code": "(fn [v k]\n  (loop [m {},\n         k k]\n    (if (empty? k)\n      m\n      (recur (conj m [(first k) v]) (rest k)))))", "user": "551ed214e4b08d5046aa8a4d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55111579e4b06e50f9beb190"}, {"problem": 156, "code": "(fn [d k] (apply assoc {} (interleave k (repeat (count k) d)) ))", "user": "514504c2e4b021a5ff8301fc"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "4e443201535dc968683fc4a7"}, {"problem": 156, "code": "(fn [val keys]\n  (loop [k keys m {}]\n    (if (empty? k)\n      m\n    (recur (rest k) (assoc m (first k) val)))))", "user": "55151417e4b055c2f668d4da"}, {"problem": 156, "code": "(fn [v xs]\n  \t(loop [m {}\n           xs xs]\n      (if (empty? xs)\n        m\n        (recur (assoc m (first xs) v) (rest xs)))))", "user": "4f4e78fee4b03ad3f0c10cc8"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "53d5a63be4b0e771c3025449"}, {"problem": 156, "code": "(fn [d c] (reduce (fn [c k] (assoc c k d)) {} c))", "user": "551ebcd7e4b08d5046aa8a4a"}, {"problem": 156, "code": "#(zipmap %2 (iterate identity %1))", "user": "550b5c10e4b06e50f9beb143"}, {"problem": 156, "code": "(fn make-map\n  ([value ks] (make-map value ks {}))\n  ([value ks m] \n   (if-not (nil? ks)\n     (make-map value (next ks) (assoc m (first ks) value))\n     m)))", "user": "551c594de4b07993ea3788dc"}, {"problem": 156, "code": "(fn defaultMap [x,y] (zipmap y (repeat x)))", "user": "55204412e4b08d5046aa8a5f"}, {"problem": 156, "code": "(fn [default l] (reduce #(assoc %1 %2 default) {} l))", "user": "5520af03e4b08d5046aa8a64"}, {"problem": 156, "code": "(fn [value keyset] (zipmap keyset (vec(replicate (count keyset) value)) ) )", "user": "552102bde4b08d5046aa8a67"}, {"problem": 156, "code": "(fn [v xs]\n  (apply hash-map (mapcat #(vector % v) xs)))", "user": "551ecb76e4b08d5046aa8a4c"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54393c3fe4b032a45b86931a"}, {"problem": 156, "code": "#(reduce (fn foo [x y] (merge x {y %1})) {} %2)", "user": "5520974be4b08d5046aa8a63"}, {"problem": 156, "code": "(fn [d ks]\n  (into {} (for [k ks] [k d])))", "user": "512e31e9e4b0b740abc59823"}, {"problem": 156, "code": "#(into {} (for [x %2] [x %1]))", "user": "528b3f5ae4b0239c8a67ae93"}, {"problem": 156, "code": "#(into {} (for [i %2] [i %1]))", "user": "551c66dae4b07993ea3788de"}, {"problem": 156, "code": "(fn [d ks] (loop [result {}, remaining ks, default d] \n  (if (not (empty? remaining))\n    (recur (conj result {(first remaining) default})\n           (rest remaining)\n           d)\n    result)))", "user": "5522a795e4b0882d96d091a7"}, {"problem": 156, "code": "(fn [d ks] (loop [result {}, remaining ks, default d] \n  (if (not (empty? remaining))\n    (recur (conj result {(first remaining) default})\n           (rest remaining)\n           d)\n    result)))", "user": "551d5cb9e4b07993ea3788e9"}, {"problem": 156, "code": "(fn [default ks]\n  (apply hash-map (interleave ks (repeat default))))", "user": "551ee974e4b08d5046aa8a50"}, {"problem": 156, "code": "(fn [default keys]\n  (apply merge (map #(hash-map % default) keys)))", "user": "5522cd9ae4b0882d96d091ab"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (repeat v)))", "user": "552356fae4b0882d96d091af"}, {"problem": 156, "code": "(fn [x y] (apply hash-map (interleave y (take (count y) (cycle [x])))))", "user": "55205564e4b08d5046aa8a60"}, {"problem": 156, "code": "#(zipmap %2 (take (count %2) (repeat %1)))", "user": "55041b5ee4b086ebe8a79c78"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "53908e6be4b0b51d73faae9a"}, {"problem": 156, "code": "(fn [default kys] (into {} (map (fn [x] [x default]) kys)))", "user": "52d74c2de4b09f7907dd1373"}, {"problem": 156, "code": "(fn[default, array]\n  (zipmap array (repeat (count array) default))\n  )", "user": "55240916e4b0882d96d091b6"}, {"problem": 156, "code": "#(into {} (for [x %2] {x %1}))", "user": "551bd6e1e4b07993ea3788d6"}, {"problem": 156, "code": "(fn [default ks]\n  (reduce #(assoc %1 %2 default) {} ks))", "user": "53fcd574e4b0de5c418485d9"}, {"problem": 156, "code": "(fn [d-val ks] (reduce (fn [r k] (conj r [k d-val])) {} ks))", "user": "55216aa5e4b0882d96d09192"}, {"problem": 156, "code": "#(let [v %1\n       add-key (fn [map key] (assoc map key v))]\n  \t(reduce add-key {} %2))", "user": "55253217e4b0882d96d091ce"}, {"problem": 156, "code": "(fn [x y]\n  (zipmap y (repeat x)))", "user": "55245232e4b0882d96d091c0"}, {"problem": 156, "code": "(fn mapdef156\n    [v k]\n    (if (= (count k) 0)\n      {}\n      (conj (mapdef156 v (rest k)) [(first k) v])))", "user": "4f9e0000e4b0dcca54ed6d2a"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5524120fe4b0882d96d091b7"}, {"problem": 156, "code": "(fn [v s]\n  (loop [x s y {}]\n    (if (empty? x)\n      y\n      (recur (rest x) (conj y {(first x) v}))\n      )\n    )\n  )", "user": "551b8e2ae4b07993ea3788d3"}, {"problem": 156, "code": "(fn [x y]\n   (letfn [(xx [x1 x2]\n\t       (let [a x1 b x2]\n\t\t (map (fn [x] \n\t\t\t  (vector x a)) b)))]\n\t  (into {} (xx x y))))", "user": "5489dd4de4b0e286459a11ef"}, {"problem": 156, "code": "#(apply merge (for [item %2] (hash-map item %1)))", "user": "533d2ea5e4b085b17e897d7a"}, {"problem": 156, "code": "(fn [d s] (zipmap s (repeat (count s) d)))", "user": "552694e7e4b0ffed3738f920"}, {"problem": 156, "code": "#(into {} (for [k %2] [k %1]))", "user": "54dce573e4b024c67c0cf78a"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54074fc5e4b0addc1aec66b6"}, {"problem": 156, "code": "(fn [dv coll] (#(zipmap %2 (repeat %)) dv coll))", "user": "55264e02e4b0ffed3738f919"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "552456e3e4b0882d96d091c2"}, {"problem": 156, "code": "(fn set-default [default vector-obj] \n  (into {} (for [x vector-obj] {x default})))", "user": "552689cfe4b0ffed3738f91e"}, {"problem": 156, "code": "(fn [v coll]\n  (into {} (for [x coll] {x v})))", "user": "55268e8de4b0ffed3738f91f"}, {"problem": 156, "code": "(fn [val keys](\n               loop[res {}, val val, keys keys](\n                                              if (empty? keys) res \n                                              (recur (assoc res (first keys) val) val (rest keys)))))", "user": "54ecd7dde4b024c67c0cf85c"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "551535bde4b055c2f668d4de"}, {"problem": 156, "code": "(fn [def-val coll] (reduce #(assoc %1 %2 def-val) {} coll))", "user": "551a380fe4b091ff45eda994"}, {"problem": 156, "code": "(fn [defv k] (reduce #(assoc %1 %2 defv) {} k ))", "user": "4fc57c4ce4b0ee37620e17f6"}, {"problem": 156, "code": "(fn [default key-seq] (into {} (map #(hash-map % default) key-seq)))", "user": "54d100abe4b0e8a36923e5d8"}, {"problem": 156, "code": "(fn [a b] (apply hash-map (interleave b (repeat a))))", "user": "55280930e4b0ffed3738f93b"}, {"problem": 156, "code": "#(zipmap  %2 (repeat %1))", "user": "55249f64e4b0882d96d091c6"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5517331ae4b06a49daca83c0"}, {"problem": 156, "code": "(fn [d m] \n  (reduce \n    (fn [mp el] (assoc mp el d)) \n    {} m\n  )\n)", "user": "552a672de4b0ffed3738f954"}, {"problem": 156, "code": "(fn [defv ks]\n  (into {}\n    (for [k ks\n          :let [d {k defv}]]\n      d)))", "user": "527106e8e4b03e8d9a4a73ce"}, {"problem": 156, "code": "#(apply assoc (hash-map) (interleave %2 (repeat %)))", "user": "552a8bbae4b0ffed3738f956"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "505106fee4b05ab4c7e07d38"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5456e4e7e4b080a794c2c883"}, {"problem": 156, "code": "(fn [d s] (reduce #(assoc %1 %2 d) {} s))", "user": "54d03b95e4b018d918be98e1"}, {"problem": 156, "code": "(fn [d s] (reduce conj `{} (map #(vector % d) s)))", "user": "5526d0a9e4b0ffed3738f927"}, {"problem": 156, "code": "(fn [v m] (zipmap m (repeat v)))", "user": "5526383ee4b0ffed3738f917"}, {"problem": 156, "code": "(fn [v coll]\n  (into {} (for [x coll] {x v})))", "user": "548d6b75e4b0e286459a1216"}, {"problem": 156, "code": "(fn map-defaults [v keys]\n  (reduce (fn [m k] (conj m {k v})) {} keys))", "user": "4dd7d040535d2dad7130b5d6"}, {"problem": 156, "code": "#(loop\n    [default %1 key-seq %2 mymap {}]\n    (if (empty? key-seq) mymap \n      (recur default (butlast key-seq) (assoc mymap (last key-seq) default))))", "user": "552bc0f5e4b0ffed3738f968"}, {"problem": 156, "code": "(fn [x y] (zipmap y [x x x]))", "user": "55249337e4b0882d96d091c3"}, {"problem": 156, "code": "(fn [default alist] (reduce (fn [r t] (assoc r t default)) {} alist))", "user": "53571732e4b04ce2eb3ed275"}, {"problem": 156, "code": "(fn [v ll]\n  (zipmap ll (repeat v))\n  )", "user": "552d9013e4b076ab5578f7ea"}, {"problem": 156, "code": "(fn [df xs]\n  (reduce #(conj %1 [%2 df]) {} xs))", "user": "51e89428e4b006d205356a51"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %1)))", "user": "552ed75ae4b076ab5578f7f9"}, {"problem": 156, "code": "(fn [m v]\n  (let [r (map #(hash-map % m) v)]\n    (into (first r) (rest r))))", "user": "55022275e4b07d26eda61d81"}, {"problem": 156, "code": "(fn[default vals] (into {} (map #(hash-map % default) vals)))", "user": "5380a27ae4b06839e8705ec4"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "54f4adc8e4b0f2f3c5226e86"}, {"problem": 156, "code": "(fn [dv seq] (into {} (map (fn [k] (vec [k dv])) seq)))", "user": "552e1c98e4b076ab5578f7ee"}, {"problem": 156, "code": "(fn [a b] (into {} (map (fn [c] [c a]) b)))", "user": "5530b82ae4b076ab5578f819"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54eee38ce4b024c67c0cf878"}, {"problem": 156, "code": "(fn [d v]\n  (reduce (fn [m e] (assoc m e d)) {} v))", "user": "5530b827e4b076ab5578f818"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54f86b8ce4b01ecee9d88828"}, {"problem": 156, "code": "#(into {} (for [x %2] [x %1]))", "user": "55357ab5e4b09218d5f44faf"}, {"problem": 156, "code": "(fn [d s] (apply assoc {} (interleave s (repeat (count s) d))))", "user": "545c2d07e4b01be26fd7465c"}, {"problem": 156, "code": "(fn [v ks] \n  (reduce (fn [m k] (assoc m k v)) {} ks))", "user": "55316b8ae4b076ab5578f825"}, {"problem": 156, "code": "(fn [default seq] (apply hash-map (concat (interpose default seq) (list default))))", "user": "553024c3e4b076ab5578f80d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "551ad0c8e4b07993ea3788c6"}, {"problem": 156, "code": "(fn [val keys] \n  (zipmap keys (repeat val)))", "user": "553698fae4b09218d5f44fc0"}, {"problem": 156, "code": "(fn inter\n  ([df ys] (inter df ys {}))\n  ([df ys mp]\n   (if (empty? ys)\n     mp\n     (inter df (rest ys) (conj mp [(first ys) df])))))", "user": "55355397e4b09218d5f44fae"}, {"problem": 156, "code": "(fn [v ks] (into {} (map #(vector % v) ks)))", "user": "5531e445e4b09218d5f44f76"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "553a43cae4b09218d5f44ff2"}, {"problem": 156, "code": "(fn [default keys]\n  (into {} (for [k keys] [k default])))", "user": "520d3129e4b0b022ef140ca5"}, {"problem": 156, "code": "(fn [default coll]\n  (apply hash-map \n         (mapcat vector coll (repeat default))))", "user": "553a35bfe4b09218d5f44ff0"}, {"problem": 156, "code": "(fn m [d l] (if (= 0 (count l)) {} (merge (m d (rest l)) {(first l) d})))", "user": "553c05b7e4b09218d5f45011"}, {"problem": 156, "code": "(fn [d ks]\n  (loop [res {} k ks]\n    (if (empty? k)\n      res\n      (recur (conj res [(first k) d]) (next k)))))", "user": "553b87abe4b09218d5f45003"}, {"problem": 156, "code": "(fn [val keys]\n  (into {}\n        (for [key keys]\n          (assoc {} key val))))", "user": "5313d68de4b08068f379ed0f"}, {"problem": 156, "code": "(fn [aa bb] (apply hash-map (interleave bb (repeat aa))))", "user": "55074092e4b021ccfedb96a4"}, {"problem": 156, "code": "(fn [default  c] (reduce (fn [m a] (conj m [a default])) {} c))", "user": "553d86cfe4b0a04f792994e2"}, {"problem": 156, "code": "(fn [d m]\n  (reduce\n   (fn [m k] (assoc m k d)) {} m))", "user": "552e92d3e4b076ab5578f7f2"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "553e0b70e4b0a04f792994e8"}, {"problem": 156, "code": "(fn \n  ([v kk] \n    (let [inner (fn\n        ([v [h & t] m]\n          (if (empty? t)\n            (assoc m h v)\n            (recur v t (assoc m h v))\n          )\n        )\n      )]\n      (inner v kk {})\n    )\n  )\n)", "user": "553e007ae4b0a04f792994e7"}, {"problem": 156, "code": "(fn [x seq] (zipmap seq (repeat (count seq) x)))", "user": "53e6550de4b036ad0777e471"}, {"problem": 156, "code": "(fn [x y] (into {} (map (fn [z] [z x]) y)))", "user": "553bc237e4b09218d5f4500a"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "553fa883e4b0a04f792994f9"}, {"problem": 156, "code": "(fn [x y] (zipmap y (repeat (count y) x)))", "user": "55406391e4b0a04f79299502"}, {"problem": 156, "code": "(fn [v ks] \n  (reduce (fn [sum k] (conj {k v} sum)) {} ks) \n  )", "user": "553f70cae4b0a04f792994f8"}, {"problem": 156, "code": "(fn mapdefault [d sq]\n  (zipmap sq (repeat d)))", "user": "553900d4e4b09218d5f44fe5"}, {"problem": 156, "code": ";(fn [val keys] (into {} (seq (for [k keys] {k val}))))\n#(into {} (seq (for [k %2] {k %1})))", "user": "5540fe42e4b0a04f7929950a"}, {"problem": 156, "code": "(fn [v ks]\n  (zipmap ks (repeat v)))", "user": "553dd883e4b0a04f792994e6"}, {"problem": 156, "code": "(fn cm ([x lst] (cm x lst {}))\n   ([x lst res]\n    (if (empty? lst)\n      res\n      (cm x (rest lst) (into res {(first lst) x}))\n      )\n    )\n)", "user": "550fd845e4b06e50f9beb17c"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54ca9311e4b057c6fda3a263"}, {"problem": 156, "code": "(fn [x y] (reduce #(conj % [%2 x]) {} y))", "user": "55437b0de4b0a04f79299524"}, {"problem": 156, "code": "#(zipmap %2 (vec (take (count %2) (repeat %1))))", "user": "553bda0de4b09218d5f4500b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "543366dde4b0b6b47310fcdf"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54fdaeace4b07d26eda61d39"}, {"problem": 156, "code": "(fn [default-val kys] (zipmap kys (repeat default-val)) )\n\n; _pcl's solution is nice as usual: \n; #(apply hash-map (interleave %2 (repeat %1)))\n; Because I don't understand how 'apply' works, I thought _pcl's solution would've generated a sequence filled with hash-map objects.", "user": "5535e822e4b09218d5f44fb2"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "554707bae4b0a04f79299544"}, {"problem": 156, "code": "#(apply hash-map (apply concat (map list %2 (repeat %1))))", "user": "5326e4efe4b09d4e7a9b54f5"}, {"problem": 156, "code": "(fn [default keylist] (into {} (map #(hash-map % default) keylist)))", "user": "5546704be4b0a04f7929953d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "4e5af45e535d8a8b8723a2b1"}, {"problem": 156, "code": "#(apply hash-map (mapcat (fn [key] [key %1]) %2))", "user": "55377d78e4b09218d5f44fca"}, {"problem": 156, "code": "(fn [x k] (reduce #(assoc %1 %2 x) {} k))", "user": "55495318e4b0a04f79299566"}, {"problem": 156, "code": "#(into {} (for [x %2] {x %1} ))", "user": "552800d7e4b0ffed3738f93a"}, {"problem": 156, "code": "(fn [de l]\n  (reduce\n   (fn [m el]\n     (assoc m el de))\n   {}\n   l))", "user": "552d2e4fe4b076ab5578f7e1"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "554680cbe4b0a04f7929953e"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5547793be4b0a04f7929954c"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "544e6666e4b0e39780006985"}, {"problem": 156, "code": "(fn [default m] (reduce (fn [n k] (assoc n k default)) {} m))", "user": "554dff83e4b00713264bd98d"}, {"problem": 156, "code": ";; (= ((fn [dv ks] (into {} (for [k ks :let [kv {k dv}]] kv))) 0 [:a :b :c]) {:a 0 :b 0 :c 0})\n(fn [dv ks] (into {} (for [k ks :let [kv {k dv}]] kv)))", "user": "55150524e4b055c2f668d4d9"}, {"problem": 156, "code": "; first-attempt\n;(fn defa\n;  [val [x & xs]]\n;  (if x\n;    (merge {x val} (defa val xs))\n;    {}))\n\n; second-attempt\n#(zipmap %2 (repeat %))", "user": "550d9452e4b06e50f9beb15d"}, {"problem": 156, "code": "(fn [d s] (apply hash-map (apply concat (map #(list %1 d) s))))", "user": "554d48d3e4b00713264bd988"}, {"problem": 156, "code": "(fn def-map [value key-list]\n  (if (empty? key-list) {} (merge (def-map value (rest key-list)) {(first key-list) value})))", "user": "554a270fe4b0a04f79299570"}, {"problem": 156, "code": "(fn [default keys]\n  (reduce #(apply (partial assoc %1) %2)\n          {}\n          (map (fn [k] [k default]) keys)))", "user": "53e76363e4b036ad0777e47b"}, {"problem": 156, "code": "(fn [d col]\n  (apply hash-map (interleave col (repeat d))))", "user": "54f14aa6e4b024c67c0cf8af"}, {"problem": 156, "code": "(fn [dflt seq] (reduce #(conj %1 {%2 dflt}) {} seq))", "user": "554edb85e4b00713264bd99a"}, {"problem": 156, "code": "(fn [v ks] (reduce #(assoc %1 %2 v) {} ks))", "user": "553abb28e4b09218d5f44ffb"}, {"problem": 156, "code": "(fn [default-value keys]\n  (into {}\n        (map #(vector %1 default-value) keys)))", "user": "53b0765ae4b047364c044484"}, {"problem": 156, "code": "(fn [defval values]\n  (reduce #(assoc %1 %2 defval) {} values))", "user": "55485b2ee4b0a04f79299559"}, {"problem": 156, "code": "(fn [d ks]\n  (reduce (fn [m k] (assoc m k d)) {} ks))", "user": "5283a919e4b0239c8a67adbe"}, {"problem": 156, "code": "(fn [x y] (zipmap y (repeat (count y) x)))", "user": "5550b5a0e4b00713264bd9ad"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "555093b2e4b00713264bd9ab"}, {"problem": 156, "code": "(fn [d c]\n   (reduce (fn [r x] (conj r {x d}) ) {} c)\n   )", "user": "554b2151e4b0a04f79299580"}, {"problem": 156, "code": "(fn [x y] (reduce #(conj %1 {%2 (%1 %2 x)}) {} y))", "user": "553c4614e4b09218d5f45014"}, {"problem": 156, "code": "(fn map-default [defval mapkeys]\n     (reduce\n       (fn [m k]\n         (assoc m k defval))\n       {}\n       mapkeys))", "user": "5195fadee4b04c0af7ff3c11"}, {"problem": 156, "code": "(fn [v l] (into {} (for [x l] {x v} )))", "user": "5550e966e4b00713264bd9b3"}, {"problem": 156, "code": "(fn\n  [default keys]\n  (apply merge (map #(hash-map % default) keys)))", "user": "554b425ce4b0a04f79299581"}, {"problem": 156, "code": "(fn [defval kol] \n    (apply merge (map\n      (fn [x] {x defval}) kol)))", "user": "55536a8ae4b0deb715856e03"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %))", "user": "553ea4e8e4b0a04f792994ee"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "52ce1abfe4b07d0d72b27389"}, {"problem": 156, "code": "(fn defualt-map[result-map default-value list-of-keys] \n  (if (empty? list-of-keys) \n    result-map \n    (defualt-map\n      (assoc result-map (first list-of-keys) default-value)\n      default-value\n      (rest list-of-keys)))) \n\n;hash-map to pierwszy argument funkcji, pusta mapa, \n;do kt\u00f3rej b\u0119dziemy dodawa\u0107 elementy i potem j\u0105 zwr\u00f3cimy\n(hash-map)", "user": "55429859e4b0a04f7929951f"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %1)))", "user": "55556737e4b0deb715856e15"}, {"problem": 156, "code": "(fn [v keys]\n  (reduce (fn [res el]\n            (assoc res el v)) '{} keys))", "user": "553638bae4b09218d5f44fba"}, {"problem": 156, "code": "(fn [val keys]\n  (reduce (fn [result input]\n            (assoc result input val))\n          {} keys))", "user": "555521a5e4b0deb715856e12"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "553b0d95e4b09218d5f44fff"}, {"problem": 156, "code": "(fn [default keys] (zipmap keys (repeat default)))", "user": "554bc64ae4b0a04f79299598"}, {"problem": 156, "code": "#(reduce (fn [m v] (assoc m v %)) {} %2)", "user": "5523fce8e4b0882d96d091b4"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5545f713e4b0a04f7929953a"}, {"problem": 156, "code": "(fn set-defaults [default sek]\n  (into {} (map\n             (fn [val] [val default])\n             sek)))", "user": "54d5343fe4b0a52adc2e200a"}, {"problem": 156, "code": "(fn [d xs]\n  ((fn f [d xs dict]\n    (if (seq xs)\n      (f d (next xs) (conj dict {(first xs) d}))\n      dict))\n   d xs {}))", "user": "4f04c93c535dcb61093f6be3"}, {"problem": 156, "code": "(fn [d ks]\n  (loop [ks ks a {}]\n    (if (empty? ks)\n      a\n      (recur (rest ks) (into a {(first ks) d})))))", "user": "54cad59ee4b057c6fda3a26e"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "554b8572e4b0a04f79299589"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "553beff9e4b09218d5f4500d"}, {"problem": 156, "code": "(fn [x m] (zipmap m (take (count m) (cycle [x]))))", "user": "5169b23fe4b03f62cda68cee"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %1)))", "user": "52e851bfe4b09f7907dd149a"}, {"problem": 156, "code": "(fn [defval key-list]\n  (reduce #(assoc %1 %2 defval) {} key-list))", "user": "5486e317e4b0e286459a11c0"}, {"problem": 156, "code": "#(zipmap (reverse %2) (vec (repeat (count %2) %)))", "user": "553093bee4b076ab5578f817"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "555ac933e4b0deb715856e49"}, {"problem": 156, "code": "(fn [default_value keys]\n\t(reduce (fn [result key] (assoc result key default_value)) {} keys))", "user": "554a75c9e4b0a04f79299575"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "555b5ae4e4b0deb715856e4f"}, {"problem": 156, "code": "(fn [v ks] (into {} (map hash-map ks (repeat v))))", "user": "5515b138e4b055c2f668d4ed"}, {"problem": 156, "code": "(fn [default xs]\n  (into {}\n  \t(map #(identity [% default]) xs)))", "user": "555b3919e4b0deb715856e4c"}, {"problem": 156, "code": "(fn create-map [default keys]\n  (reduce (fn [coll val] (into coll {val default}))\n          {}\n          keys))", "user": "55586905e4b0deb715856e2b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "54026d7de4b0df28a13c62cf"}, {"problem": 156, "code": "(fn [d v] (zipmap v (repeat (count v) d)))", "user": "554756b8e4b0a04f79299549"}, {"problem": 156, "code": "( fn [d s] ( apply assoc {} ( interleave s (repeat d) ) ) )", "user": "5551b492e4b0deb715856ded"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "550fa523e4b06e50f9beb17a"}, {"problem": 156, "code": "(fn[v coll] (zipmap coll (repeat (count coll) v)))", "user": "555c6344e4b0b056612e224c"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "555c78abe4b0b056612e224f"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "554bced1e4b0a04f79299599"}, {"problem": 156, "code": "(fn [v ks]\n  (reduce #(assoc %1 %2 v) {} ks))", "user": "5553b924e4b0deb715856e06"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "54534c83e4b0e397800069cd"}, {"problem": 156, "code": "(fn [default keys]\n  (reduce\n   (fn [map key] (assoc map key default))\n   {} keys))", "user": "5561d2c2e4b0c656e3ff17cd"}, {"problem": 156, "code": "#(loop [tempkeys %2\n       newkeys {}]\n  (if (empty? (seq tempkeys))\n    (do \n      (println \"Ending\")\n      newkeys)\n    (do\n      (println \"Number is \" tempkeys)\n      (recur (rest tempkeys)(assoc newkeys \n                              (first tempkeys) %1))\n    ))\n  )", "user": "55592deae4b0deb715856e32"}, {"problem": 156, "code": "(fn [d ks]\n  (reduce\n    (fn [result k] (conj result {k d}))\n    {}\n    ks))", "user": "556159fae4b0c656e3ff17c7"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "54a35517e4b09f271ff37c68"}, {"problem": 156, "code": "#(reduce (fn [r s] (assoc r s %1) ) {} %2)", "user": "556086a2e4b0c656e3ff17c1"}, {"problem": 156, "code": "(fn [v m] (zipmap m (repeat v)))", "user": "5551f712e4b0deb715856df0"}, {"problem": 156, "code": "(fn [default seq]\n  (reduce #(conj % [%2 default]) {} seq)\n  )", "user": "555c0ea0e4b0b056612e2245"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "55484800e4b0a04f79299558"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "55631739e4b0c656e3ff17e2"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "555e9dbfe4b0a2eb076a39bc"}, {"problem": 156, "code": "(fn create-set [value key-list]\n  (->> key-list\n       (map #(list %1 value))\n       (apply concat)\n       (apply hash-map)))", "user": "556238bce4b0c656e3ff17d3"}, {"problem": 156, "code": "(fn [d m] \n\t(reduce #(conj %1 (hash-map %2 d)) {} m))", "user": "5562f08ae4b0c656e3ff17df"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "4ef08bd6535dced4c769f20a"}, {"problem": 156, "code": "(fn [v m] (zipmap m (repeat v)))", "user": "5564cb31e4b0c656e3ff1810"}, {"problem": 156, "code": "(fn [d v] (reduce (fn [x y] (assoc x y d)) {} v))", "user": "54f8b6f4e4b01ecee9d8882c"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "554efd47e4b00713264bd99b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54eb22a0e4b024c67c0cf845"}, {"problem": 156, "code": "#(apply hash-map\n  \n  (interleave %2 (repeat %1))\n)", "user": "4e28ddd1535deb9a81d77efd"}, {"problem": 156, "code": "(fn [default key_seq] (into {} (for [k key_seq]\n                                    [k default])))", "user": "55664950e4b0c656e3ff1832"}, {"problem": 156, "code": "(fn [default ks] (into {} (for [k ks] [k default] )))\n;;(fn [default ks] (reduce #(assoc %1 %2 default) {} ks))", "user": "55647a31e4b0c656e3ff1808"}, {"problem": 156, "code": "#(into {} (for [y %2] [y %1]))", "user": "555f0789e4b0a2eb076a39bf"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55675a6ce4b0c656e3ff183e"}, {"problem": 156, "code": "(fn map_defaults [d k] (into {} (let [new_map {}] (for [element k] (conj new_map {element d})))))", "user": "52c70127e4b0c2d177d6211a"}, {"problem": 156, "code": "(fn [d ks] (into {} (map #(vec [% d]) ks)))", "user": "54c779bee4b045293a27f63b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55306b8ae4b076ab5578f812"}, {"problem": 156, "code": "(fn [d k]  \n  (into {}\n        (map          \n         (fn [a] [a d])         \n         k)))", "user": "55625903e4b0c656e3ff17d7"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5540cc0ce4b0a04f79299505"}, {"problem": 156, "code": "(fn f [x xs] (reduce #(conj %1 [%2 x]) {} xs))", "user": "55645592e4b0c656e3ff1802"}, {"problem": 156, "code": "(fn helper-func \n  ([default-val coll] (helper-func default-val coll {}))\n  ([default-val coll the-map] (if (empty? coll) \n                                 the-map \n                                 (helper-func default-val (rest coll) (assoc the-map (first coll) default-val)\n                                              )\n                                 )\n   )\n  )", "user": "5564709ee4b0c656e3ff1807"}, {"problem": 156, "code": "(fn [d ks]\n  (apply hash-map (interleave ks (repeat d))))", "user": "556371bae4b0c656e3ff17eb"}, {"problem": 156, "code": "(fn [x y]\n  (into {} (for [y-value y] [y-value x])))", "user": "555df9c8e4b0a2eb076a39b2"}, {"problem": 156, "code": "(fn [v [k & ks] & m]\n    (if (nil? k)\n      m\n      (recur v ks (assoc m k v))))", "user": "554c296ae4b0a04f792995a1"}, {"problem": 156, "code": "( fn [ dflt k-vctr ]\n  (->> k-vctr\n      (map #( hash-map % dflt ) )\n      (reduce conj)))", "user": "556880dae4b0c656e3ff1856"}, {"problem": 156, "code": "(fn [default-value sequence]\n  (into {} (map #(hash-map % default-value) sequence)))", "user": "55635886e4b0c656e3ff17e9"}, {"problem": 156, "code": "(fn [default keys] (zipmap keys (repeat (count keys) default)))", "user": "52c03baee4b07a9af5792347"}, {"problem": 156, "code": "(fn [value keys] (into {} (map #(vector % value) keys)))", "user": "55679906e4b0c656e3ff1845"}, {"problem": 156, "code": "(fn [d s] (zipmap s (repeat d)))", "user": "5559b443e4b0deb715856e3c"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5565d5e4e4b0c656e3ff181f"}, {"problem": 156, "code": "(fn [df ks] (apply merge (map #(hash-map % df) ks)))", "user": "556b83fbe4b09a3098a524ee"}, {"problem": 156, "code": "#(apply assoc {}\n        (interleave %2 (repeat %1)))", "user": "556c70dae4b09a3098a524fd"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "556a3243e4b09a3098a524de"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5566463ee4b0c656e3ff1831"}, {"problem": 156, "code": "#(apply merge\n        (for [x %2]\n          {x %}))", "user": "538d49e1e4b0b51d73faae6b"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "556ed2ffe4b09a3098a52517"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "556dd141e4b09a3098a52509"}, {"problem": 156, "code": "(fn [val cl\u00e9]\n((fn crhash [res valeur listecl\u00e9]\n  (if (empty? listecl\u00e9)\n    (do res)\n    (do \n        (recur (assoc res (first listecl\u00e9) valeur) valeur (rest listecl\u00e9))\n      )\n   )\n    ) {} val cl\u00e9))", "user": "556f2009e4b09a3098a52519"}, {"problem": 156, "code": "(fn [x y] (apply hash-map (interleave y (-> (count y) (repeat x)))))", "user": "54e1939ce4b024c67c0cf7c5"}, {"problem": 156, "code": "(fn [MyValues Mykeys] (into {} (map (fn [Mapping] (conj [Mapping] MyValues)) Mykeys)))", "user": "556ff948e4b09a3098a52527"}, {"problem": 156, "code": "(fn [v s] (into {} (map #(vector % v) s)))", "user": "556405e5e4b0c656e3ff17fb"}, {"problem": 156, "code": "(fn [dflt vector] \n  (loop [map {} v vector] \n    (if (empty? v) \n      map \n    (recur (assoc map (first v) dflt) (rest v))\n      )\n    )\n  )", "user": "556cc24ae4b09a3098a52502"}, {"problem": 156, "code": "(fn [default keys]\n  (zipmap keys (repeat default)))", "user": "55702081e4b09a3098a52529"}, {"problem": 156, "code": "(fn\n  [v ks]\n  (zipmap ks (cycle [v])))", "user": "548749cee4b0e286459a11c4"}, {"problem": 156, "code": "(fn [v arr]\n   (let [r (count arr)]\n      (into {} (map vector arr (repeat r v)))\n     ))", "user": "556f443be4b09a3098a5251e"}, {"problem": 156, "code": "(fn [def-val col-key] (reduce #(into %1 {%2 def-val}) {} col-key))", "user": "556189a6e4b0c656e3ff17c9"}, {"problem": 156, "code": "(fn [v ks] (reduce #(into {%2 v} %1) {} ks))", "user": "53db43aae4b0e771c30254b1"}, {"problem": 156, "code": "(fn [default keys]\n  (into {}\n        (map (fn [key] [key default])\n             keys)))", "user": "5189bf9ee4b0288ada3dbdaf"}, {"problem": 156, "code": "(fn [d ks] \n  (loop [m {}\n         k ks]\n    (if (first k)\n      (recur (assoc m (first k) d) (rest k))\n      m)))", "user": "542c0708e4b0dad94371f29b"}, {"problem": 156, "code": "(fn [v coll]\n  (reduce #(assoc %1 %2 v)\n          {}\n          coll))", "user": "54d9f7f1e4b024c67c0cf751"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "548018dbe4b0c51c1f4d732b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5572fdd7e4b0aa18f790f3f1"}, {"problem": 156, "code": "(fn [d s] (zipmap s (take (count s) (repeat d))))", "user": "552712e7e4b0ffed3738f92a"}, {"problem": 156, "code": "(fn [val keys]\n  (reduce\n   #(assoc %1 %2 val)\n   {}\n   keys))", "user": "53065acbe4b02e8216869792"}, {"problem": 156, "code": "(fn [v m] \n    (zipmap m (repeat v)))", "user": "55744472e4b0aa18f790f402"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55478ce2e4b0a04f7929954e"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "526f670ce4b03e8d9a4a7365"}, {"problem": 156, "code": "(fn [MyValues Mykeys] (into {} (map (fn [Mapping] (conj [Mapping] MyValues)) Mykeys)))", "user": "55769940e4b05c286339e070"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5575d9c1e4b05c286339e066"}, {"problem": 156, "code": "(fn [v ks]\n  (reduce #(assoc % %2 v) {} ks))", "user": "541709b0e4b01498b1a71a06"}, {"problem": 156, "code": "(fn [df lst]\n  (loop [d {} n (first lst) l (rest lst)] \n     (if \n       (empty? l) \n          (assoc d n df)\n          (recur (assoc d n df) (first l) (rest l)))))", "user": "52503747e4b0541d1855b828"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "556523fce4b0c656e3ff1815"}, {"problem": 156, "code": "(fn [default vars]\n  (reduce merge (map (fn [x] {x default}) vars))\n)", "user": "4f74fed2e4b0fbe0118ec553"}, {"problem": 156, "code": "#(zipmap %2 (cycle [%1]))", "user": "55654e17e4b0c656e3ff1818"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "557954aae4b05c286339e092"}, {"problem": 156, "code": "(fn[defo suite] (into {} (for [x suite] {x defo} ) ))", "user": "55757e81e4b05c286339e063"}, {"problem": 156, "code": "(fn [default s]\n  \n  (zipmap s (repeat default)))", "user": "550c55d0e4b06e50f9beb14d"}, {"problem": 156, "code": "(fn [d ks] (zipmap ks (repeat (count ks) d)))", "user": "554f7ef2e4b00713264bd9a1"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5576e78de4b05c286339e075"}, {"problem": 156, "code": "(fn [default-val s]\n  (reduce #(assoc % %2 default-val) {} s))", "user": "5501a1e1e4b07d26eda61d75"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5576f299e4b05c286339e077"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "53ac4c6fe4b047364c04445d"}, {"problem": 156, "code": "(fn [a b] (zipmap b (repeat a)))", "user": "53a0b730e4b0ca733b9744b5"}, {"problem": 156, "code": "(fn rek-def [v ks]\n    (when (not-empty ks)\n      (assoc (rek-def v (rest ks)) (first ks) v )))", "user": "503c90aae4b06c4e0e1fa24b"}, {"problem": 156, "code": "(fn [a b ] (apply hash-map (interleave b (repeat a)) ))", "user": "54edfebbe4b024c67c0cf869"}, {"problem": 156, "code": "(fn [v ks]\n  (apply hash-map (interleave ks (repeat v))))", "user": "541b41d1e4b01498b1a71a65"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5037534de4b0af0658af77aa"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "4f04664a535dcb61093f6bc1"}, {"problem": 156, "code": "(fn [v ks] (into {} (for [k ks] [k v])))", "user": "5581a6dae4b05c286339e0fe"}, {"problem": 156, "code": "(fn [d v] (reduce (fn [coll v] (assoc coll v d)) {} v))", "user": "55818b0ee4b05c286339e0fb"}, {"problem": 156, "code": "(fn [val keys] (reduce #(assoc %1 %2 val) {} keys))", "user": "54bc6c75e4b0ed20f4ff6ed0"}, {"problem": 156, "code": "(fn [x ks] (reduce #(assoc %1 %2 x) {} ks))", "user": "54bf99c8e4b0ed20f4ff6f05"}, {"problem": 156, "code": "(fn [x y] \n  (zipmap y (take (count y) (repeat x))))", "user": "4f3c772de4b0e243712b1f4c"}, {"problem": 156, "code": "(fn  [defa mp]\n  (into {}\n    (for [ x [defa]\n         y mp ]\n    {y x})))", "user": "51af3ed1e4b0c53cf2e68a4b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "545ddac3e4b01be26fd74676"}, {"problem": 156, "code": "(fn [v ks]\n  (zipmap ks (map (fn [x] v) ks)))", "user": "557e2eafe4b05c286339e0d2"}, {"problem": 156, "code": "(fn map-defaults [d ks]\n  (apply hash-map (interleave ks (repeat d))))", "user": "557bcce4e4b05c286339e0b9"}, {"problem": 156, "code": "(fn [x y] (zipmap y (cycle [x])))", "user": "5583bd81e4b05c286339e118"}, {"problem": 156, "code": "(fn [default keys] (into {} (map #(-> [% default]) keys)))", "user": "555bd27ae4b0b056612e2244"}, {"problem": 156, "code": "(fn [def-val keys] \n  (loop [res {}, init-keys keys]\n  \t(if (empty? init-keys)\n      res\n      (recur (assoc res (first init-keys) def-val) (rest init-keys))\n)))", "user": "557f7c8be4b05c286339e0e0"}, {"problem": 156, "code": "(fn[d c] (into {} (map #(vector % d) c)))", "user": "54e345a1e4b024c67c0cf7db"}, {"problem": 156, "code": "(fn iter [val keys]\n\t(cond (empty? keys) {}\n\t\ttrue (conj (iter val (rest keys)) {(first keys) val})))", "user": "5583888ae4b05c286339e117"}, {"problem": 156, "code": "#(reduce \n  (fn [m k]\n    (conj m {k %})\n    )\n  {} %2)", "user": "50ec409ce4b04edc33777045"}, {"problem": 156, "code": "(fn [default xs] (zipmap (reverse xs) (repeat (count xs) default)))", "user": "52b89d55e4b07a9af57922b3"}, {"problem": 156, "code": "#(zipmap %2 (into [] (repeat (count %2) %1)))", "user": "51bfc1f0e4b0e49ef9037dd4"}, {"problem": 156, "code": "(fn [v l]\n  (loop [li l el []]\n    (if (empty? li)\n      (reduce conj {} el)\n      (recur (butlast li) (conj el (conj [] (last li) v))))))", "user": "52979551e4b02ebb4ef75043"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %1)))", "user": "5579bc24e4b05c286339e098"}, {"problem": 156, "code": "(fn [default coll] (zipmap coll (repeat default)))", "user": "54bad977e4b0ed20f4ff6eb9"}, {"problem": 156, "code": "(fn [v coll]\n  (into {} (for [x coll] {x v})))", "user": "5587d91ae4b059ccff29b1e9"}, {"problem": 156, "code": "(fn [default-value key-list] (reduce #(assoc %1 %2 default-value) {} key-list))", "user": "557ca912e4b05c286339e0c8"}, {"problem": 156, "code": "(fn map-default\n  [e xs]\n  (reduce (fn [m k] (assoc m k e)) {} xs))", "user": "557e9d17e4b05c286339e0d8"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55896a0ce4b059ccff29b204"}, {"problem": 156, "code": "#(apply merge (for [mkey %2] {mkey %1}))", "user": "558466fce4b04192f3441eee"}, {"problem": 156, "code": "(fn [default dict_keys] (zipmap dict_keys (repeat (count dict_keys) default)))", "user": "55893b09e4b059ccff29b1fe"}, {"problem": 156, "code": "(fn [v k] (zipmap k (repeat v)))", "user": "506f0968e4b09350ab4199f5"}, {"problem": 156, "code": "(fn [value mykeys] (zipmap (seq mykeys) (repeat value)))", "user": "55897fe2e4b059ccff29b205"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %)))", "user": "551d8796e4b07993ea3788ec"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %)))", "user": "5589e88ae4b0277789237610"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "558b697fe4b027778923762d"}, {"problem": 156, "code": "(fn [df lst]\n  (loop [s lst m {}]\n    (if (empty? s) m\n      (recur (rest s) (assoc m (first s) df)))))", "user": "558378dce4b05c286339e115"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55382530e4b09218d5f44fdd"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "558b41fce4b0277789237628"}, {"problem": 156, "code": "(fn [d k]                                                                                                                       \n  (loop [m- {} k- k]                                                                                                                                    \n    (if (empty? k-)                                                                                                             \n      m-                                                                                                                                                \n      (recur (conj m- {(first k-) d}) (rest k-)))))", "user": "558b50d5e4b027778923762b"}, {"problem": 156, "code": "(fn [defv ks] \n  (reduce merge (map #(assoc {} % defv) ks)))", "user": "558bb38fe4b0277789237631"}, {"problem": 156, "code": "#(zipmap %2 [%1 %1 %1])", "user": "5582dfb6e4b05c286339e10d"}, {"problem": 156, "code": "(fn default [x y] (if (= (count y) 2) (hash-map (first y) x, (second y) x) (hash-map (first y) x, (second y) x, (last y) x)))", "user": "5589a735e4b059ccff29b206"}, {"problem": 156, "code": "(fn [x keys] (apply merge (map #(hash-map % x) keys)))", "user": "54c9571ee4b045293a27f66b"}, {"problem": 156, "code": "(fn [v k] (reduce #(assoc %1 %2 v) {} k))", "user": "4f070ce6535dcb61093f6c1e"}, {"problem": 156, "code": "(fn [val coll] (reduce (fn [m k] (assoc m k val)) {} (reverse coll)))", "user": "558b2821e4b0277789237626"}, {"problem": 156, "code": "#(into {}(map vector %2 (repeat %1)))", "user": "558504aae4b04192f3441ef5"}, {"problem": 156, "code": "(fn [x, col] (reduce (fn [acc, cur] (conj acc {cur x})) {} col))", "user": "555883c5e4b0deb715856e2d"}, {"problem": 156, "code": "#(into {} (for [x %2] {x %1}))", "user": "558f4fbae4b0277789237661"}, {"problem": 156, "code": "(fn [default my-vec]\n    (loop [m {} v my-vec]\n      (if (empty? v)\n        m\n        (recur (assoc m (first v) default) (rest v)))))", "user": "557ad449e4b05c286339e0a6"}, {"problem": 156, "code": "(fn [x y] (apply array-map (concat (interpose x y) (vector x)) ) )", "user": "557e8326e4b05c286339e0d7"}, {"problem": 156, "code": "(fn [v, k]\n  (let [m {}]\n  \t(apply merge (for [x k]\n    \t(assoc m x v)))))", "user": "5590e55de4b0277789237676"}, {"problem": 156, "code": "(fn [val keys] (zipmap keys (repeat val)))", "user": "53c0f4dee4b00fb29b221259"}, {"problem": 156, "code": "(fn [default keys]\n\t(reduce #(assoc %1 %2 default) {} keys))", "user": "5416b4a2e4b01498b1a71a01"}, {"problem": 156, "code": "(fn [df coll] \n  (apply hash-map (interleave coll (repeat df))))", "user": "5509bd6ee4b06e50f9beb120"}, {"problem": 156, "code": "(fn [dv sk] (into (hash-map) (for [x sk y [dv]] [x y])))", "user": "4fffa422e4b0678c553fc404"}, {"problem": 156, "code": "(fn [default-val key-seq] \n  (reduce #(conj %1 {%2 default-val}) {} key-seq))", "user": "5590ebb1e4b0277789237677"}, {"problem": 156, "code": "(fn [v m] (zipmap m (repeat v)))", "user": "55882c84e4b059ccff29b1f2"}, {"problem": 156, "code": "(fn [x y](into {} (map #(hash-map % x) y)))", "user": "558f56c3e4b0277789237662"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5585f088e4b001b0851d7513"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "559279b7e4b0604b3f94d58c"}, {"problem": 156, "code": "(fn [k ls]\n  (into {} (map (fn [l] [l k]) ls)))", "user": "531c6e72e4b08068f379eda0"}, {"problem": 156, "code": "(fn [dval col]\n  (loop [vect col\n         so-far {}]\n    (if (empty? vect)\n      so-far\n      (recur (rest vect) (assoc so-far (first vect) dval)))))", "user": "55907e8fe4b0277789237672"}, {"problem": 156, "code": "(fn [d s] (reduce #(assoc %1 %2 d) {} s))", "user": "55895eade4b059ccff29b202"}, {"problem": 156, "code": "#(loop [m {} ks %2]\n   (if (empty? ks)\n     m\n     (recur (conj m {(first ks) %1}) (rest ks))))", "user": "55952410e4b0c79f6e1db962"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "4f5599dfe4b0a7574ea71806"}, {"problem": 156, "code": "(fn [v m] (zipmap m (repeat v)))", "user": "5594f8aee4b0c79f6e1db95c"}, {"problem": 156, "code": "#(reduce (fn [m k] (assoc m k %)) {} %2)", "user": "52f53589e4b05e3f0be25f2c"}, {"problem": 156, "code": "(fn [value col]\n  (apply hash-map (interleave col (repeat (count col) value))))", "user": "525873e8e4b0cb4875a45cb2"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5592bf9fe4b0c79f6e1db933"}, {"problem": 156, "code": "#(reduce (fn [m x] (assoc m x %1)) {} %2)", "user": "525523e3e4b0541d1855b9cc"}, {"problem": 156, "code": "(fn [default sequenc]\n  (apply hash-map\n         (reduce (fn [x y]\n                   (conj x default y)) '() sequenc)))", "user": "5595ffabe4b0c79f6e1db972"}, {"problem": 156, "code": "(fn [d ks]\n  (reduce (fn [ret k]\n            (assoc ret k d))\n          {} ks))", "user": "555ee545e4b0a2eb076a39bd"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "55933c7ae4b0c79f6e1db938"}, {"problem": 156, "code": "(fn [default ks]\n  (zipmap ks (repeat (count ks) default)))", "user": "5577a9ede4b05c286339e085"}, {"problem": 156, "code": "(fn [val colls] (apply array-map(mapcat #(list % val) colls)))", "user": "4fdb0c0ae4b05e33b9224f57"}, {"problem": 156, "code": "(fn [k col] (reduce #(assoc %1 %2 k) {} col))", "user": "55996253e4b031d6649c9baa"}, {"problem": 156, "code": "#_  #(reduce (fn [m k] (assoc m k %)) {} %2)\n\n;; and other version:\n#(apply hash-map (interleave %2 (repeat (count %2) %)))\n\n;; and using mapcat and a more intention-revealing verbosity:\n#_ (fn default-map-vals \n    [default-val coll]\n    (apply hash-map (mapcat (fn [k v] [k v]) coll (repeat (count coll) default-val))))", "user": "5553b729e4b0deb715856e05"}, {"problem": 156, "code": "(fn [k vs] (zipmap vs (repeat k)))", "user": "5585ff97e4b001b0851d7515"}, {"problem": 156, "code": "#(reduce merge (map (fn [k] {k %1}) %2))", "user": "559972d1e4b031d6649c9bab"}, {"problem": 156, "code": "(fn [default-value a-seq]\n  (->> a-seq\n       (map #(vector % default-value))\n       (into {})))", "user": "55995fa7e4b031d6649c9ba9"}, {"problem": 156, "code": "(fn [x y]\n  (into {} (for [i y] {i x}))\n  )", "user": "5595e038e4b0c79f6e1db971"}, {"problem": 156, "code": "#(reduce (fn [m k]\n                            (assoc m k %1 ))\n                          {}\n                         %2\n                  )", "user": "55079e55e4b021ccfedb96aa"}, {"problem": 156, "code": "(fn [d kk] (reduce conj (for [x kk] {x d})) )", "user": "559af785e4b066d22e731f4c"}, {"problem": 156, "code": "(fn [d ks] (zipmap ks (repeat d)))", "user": "55496eeae4b0a04f79299569"}, {"problem": 156, "code": "(fn map-def\n  [default-value key-seq] \n  (zipmap key-seq (take (count key-seq) (repeat default-value))))", "user": "52f3a2afe4b05e3f0be25f13"}, {"problem": 156, "code": "(fn no156\n  ([x keys] (no156 x keys []))\n  ([x keys ans] (if (empty? keys) (apply array-map ans)\n                  (no156 x (rest keys) (concat ans (concat [(first keys)] [x]))))))", "user": "55630cc1e4b0c656e3ff17e0"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5592c56ee4b0c79f6e1db934"}, {"problem": 156, "code": "(fn [x m] (apply merge (map #(hash-map % x) m)))", "user": "54f3d6c7e4b050824f58f5cb"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "52b3520ee4b0c58976d9ad04"}, {"problem": 156, "code": "(fn [v k] (apply hash-map (interleave k (repeat v))))", "user": "5595c60ee4b0c79f6e1db96f"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %))", "user": "55989c25e4b031d6649c9b9b"}, {"problem": 156, "code": "(fn [d ky]\n  (reduce #(assoc %1 %2 d) {} ky))", "user": "559c13c5e4b066d22e731f61"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "4e6a23d0535d8ccf87e9fea0"}, {"problem": 156, "code": "(fn [value coll] (apply merge (map #(hash-map % value)coll)))", "user": "559bdf16e4b066d22e731f5a"}, {"problem": 156, "code": "(fn [default vect] (reduce #(assoc %1 %2 default) {} vect))", "user": "55306f9de4b076ab5578f814"}, {"problem": 156, "code": "(fn [dval sq]\n  (loop [ret-map (hash-map)\n         sq-it sq]\n    (if (empty? sq-it)\n      ret-map\n      (recur (assoc ret-map (first sq-it) dval)\n             (rest sq-it)))))", "user": "559d33b3e4b0ec2b359424d9"}, {"problem": 156, "code": "(fn [x m] (zipmap m (repeat x)))", "user": "559e7848e4b08a52bd4f97d4"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "559b2ad1e4b066d22e731f4e"}, {"problem": 156, "code": "(fn [x c] (zipmap c (repeat x)))", "user": "5369d072e4b0243289761ea1"}, {"problem": 156, "code": "#(loop [lis %2 res {}]\n   (if (seq lis)\n     (recur (rest lis) (into res {(first lis) %1}))\n     res))", "user": "55868660e4b059ccff29b1d4"}, {"problem": 156, "code": "(fn [v coll]\n  (into {} (for [z coll] {z v})))", "user": "5594e0e3e4b0c79f6e1db95b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55a0d7e0e4b0acc240e31503"}, {"problem": 156, "code": "(fn [default coll] (zipmap coll (iterate identity default)))", "user": "55a0fd18e4b0acc240e31507"}, {"problem": 156, "code": "(fn [x coll] (zipmap coll (repeat x)))", "user": "55a12668e4b0acc240e3150b"}, {"problem": 156, "code": "(fn [val keys]\n  (zipmap keys (repeat val)))", "user": "553527ede4b09218d5f44fab"}, {"problem": 156, "code": "(fn my-map-default\n  [v k]\n  (reduce (fn [hash key] (assoc hash key v)) {} k))", "user": "5599abc9e4b031d6649c9bb0"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "4fe49706e4b0e8f79898feb7"}, {"problem": 156, "code": "(fn [default keys]\n  (zipmap keys (map (constantly default) keys)))", "user": "524d91eae4b0a16e35cf6dee"}, {"problem": 156, "code": "(fn [default coll] (reduce #(assoc %1 %2 default) {} coll))", "user": "559e25fde4b08a52bd4f97d0"}, {"problem": 156, "code": "#(into {} (for [x %2] [x %1]))", "user": "52138dd7e4b0d32679a5065d"}, {"problem": 156, "code": "(fn default-map [v xs]\n  (into {} (map #(vector % v) xs)))", "user": "55a2d5c2e4b0acc240e3152c"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54e956d9e4b024c67c0cf831"}, {"problem": 156, "code": "(fn [val key-seq]\n  (apply assoc {} \n         (interleave key-seq (repeat (count key-seq) val))))", "user": "5297dcc5e4b02ebb4ef75047"}, {"problem": 156, "code": "(fn [default keys] (reduce #(assoc %1 %2 default) {} keys))", "user": "55915fe9e4b0604b3f94d579"}, {"problem": 156, "code": "(fn [d s] (zipmap s (for [x (range 3)] d)))", "user": "55a1ba5ee4b0acc240e31517"}, {"problem": 156, "code": "(fn [d xs] (into {} (map (fn [x] [x d]) xs)))", "user": "559b55d6e4b066d22e731f54"}, {"problem": 156, "code": "(fn [v sec]\n  (loop [m {} secq sec]\n    (if (= (count secq) 0) \n      m \n      (recur (assoc m (first secq) v) (rest secq))\n     )\n   )\n  )", "user": "55a47176e4b0acc240e31544"}, {"problem": 156, "code": "(fn [k v] \n  (reduce merge (map #(hash-map % k) v))\n)", "user": "55a59ebae4b0acc240e3154d"}, {"problem": 156, "code": "(fn\n  [value v]\n  (reduce (fn\n            [res k]\n            (merge res (hash-map k value))) (hash-map) (reverse v)))", "user": "55a5e2f7e4b0acc240e31550"}, {"problem": 156, "code": "(fn [default the-seq]\n  (into {}\n        (for [x the-seq]\n          [x default])))", "user": "55a5c3bee4b0acc240e3154e"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "503e91d4e4b06c4e0e1fa269"}, {"problem": 156, "code": "(fn [d vals]                                                                                    \n     (let [bfn (fn [v m k] (assoc m k v))                                                          \n           bfnp (partial bfn d) ]                                                                  \n       (reduce bfnp {} vals)))", "user": "549a1fede4b0f3d1d8e70f6a"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55a1d7f6e4b0acc240e31519"}, {"problem": 156, "code": "(fn [default keyseq]\n  (reduce #(assoc % %2 default) {} keyseq))", "user": "55a62092e4b0acc240e31554"}, {"problem": 156, "code": "(fn [x coll]\n  (loop [coll coll m {}]\n    (if (= coll '())\n      m\n      (recur (rest coll) (assoc m (first coll) x))\n      )))", "user": "55a74d46e4b09e57187da2a3"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "559d3d22e4b0ec2b359424da"}, {"problem": 156, "code": "(fn [dflt sqnc] (zipmap sqnc (into [] (replicate (count sqnc) dflt))))", "user": "55929e89e4b0604b3f94d58e"}, {"problem": 156, "code": "(fn [a b] (zipmap b (repeat a)))", "user": "55a0e139e4b0acc240e31504"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "52b666bfe4b0c58976d9ad44"}, {"problem": 156, "code": "(fn [d ks]\n  (reduce #(assoc %1 %2 d) {} ks)\n  )", "user": "4f9e830ae4b0dcca54ed6d2c"}, {"problem": 156, "code": "(fn [x list] (zipmap list (repeat x)))", "user": "54236ce1e4b01498b1a71ad1"}, {"problem": 156, "code": "(fn [k coll] (zipmap coll (repeat k)))", "user": "55a6bca4e4b09e57187da29e"}, {"problem": 156, "code": "(fn [def-value vec-keys]\n  (loop [result {}\n         vec-keys vec-keys]\n    (let [head-key (first vec-keys)]\n      (if (= head-key nil)\n        result\n        (recur (conj result {head-key def-value}) (rest vec-keys))))))", "user": "52fe31d5e4b047fd55837038"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55ab07e0e4b0988bba2ad953"}, {"problem": 156, "code": "(fn [default mapkeys] (zipmap mapkeys (repeat (count mapkeys) default)))", "user": "5564c113e4b0c656e3ff180d"}, {"problem": 156, "code": "(fn [x y] (into (sorted-map) (map #(assoc {} % x) y)))", "user": "55acb648e4b03311e7b73296"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "50c95c4fe4b0bed41a12298f"}, {"problem": 156, "code": "#(loop [keys %2 result {}]\n\t(if-not (empty? keys)\n\t\t(recur (rest keys) (conj result [(first keys) %1]) ) \n\t\tresult))", "user": "55a2b008e4b0acc240e31526"}, {"problem": 156, "code": "(fn [d ks]\n  (reduce conj\n           (map (fn [x] {x d}) ks)))", "user": "55a1683ce4b0acc240e31513"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55aa5f73e4b0988bba2ad94b"}, {"problem": 156, "code": "#(apply merge (map (fn [x] {x %}) %2) )", "user": "55a31c66e4b0acc240e31530"}, {"problem": 156, "code": "(fn [default keys]\n                 (into {} (map vector keys (repeat default))))", "user": "54cad2d5e4b057c6fda3a26c"}, {"problem": 156, "code": "(fn [default keys] (reduce (fn [map x] (conj map {x default})) {} keys))", "user": "55adcc8fe4b03311e7b732ab"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "55adf4d7e4b03311e7b732af"}, {"problem": 156, "code": "(fn [value keys] (reduce #(conj %1 [%2 value]) {} keys))", "user": "55ae2f14e4b03311e7b732b6"}, {"problem": 156, "code": "(fn [x y]\n    (loop [m {} r y]\n    (if (seq r) \n         (recur (assoc m (first r) x) (rest r))\n        m\n        )))", "user": "55975569e4b031d6649c9b8e"}, {"problem": 156, "code": "(fn [v k] (apply merge (map #(hash-map % v) k)))", "user": "559c4236e4b066d22e731f67"}, {"problem": 156, "code": "(fn [d e] (reduce #(assoc % %2 d) {} e))", "user": "4fa436dce4b081705acca19b"}, {"problem": 156, "code": "(fn [v map-keys]\n    (apply hash-map (mapcat #(vector % v) map-keys)))", "user": "55ac07afe4b03311e7b7328f"}, {"problem": 156, "code": "#(into {}  (for [item %2] (assoc {} item %1)))", "user": "5505d137e4b086ebe8a79c8c"}, {"problem": 156, "code": "(fn [default sequence] (into {} (flatten (map (fn [item] {item default}) sequence))))", "user": "54fc75fce4b07d26eda61d2a"}, {"problem": 156, "code": "(fn [v s]\n  (loop [i 0 m {}]\n    (if (= i (count s))\n      m\n      (recur (inc i) (conj m [(nth s i) v])))))", "user": "55aaa36fe4b0988bba2ad94f"}, {"problem": 156, "code": "(fn [default sequ]\n  (->> default\n       repeat\n       (interleave sequ)\n       (apply hash-map)))", "user": "554b8b6be4b0a04f7929958b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55b118fae4b002ce9d5cbc2d"}, {"problem": 156, "code": "(fn [default m] (reduce (fn [acc x] (conj acc {x default})) {} m))", "user": "55ae5e66e4b03311e7b732bb"}, {"problem": 156, "code": "(fn [d k] (reduce #(conj %1 [%2 d]) {} k))", "user": "55b2088ae4b0da326a65cf75"}, {"problem": 156, "code": "(fn [d v] (reduce #(assoc %1 %2 d) {} v))", "user": "5448616be4b032a45b8693c9"}, {"problem": 156, "code": "(fn [DefaultVal, Keys] (apply hash-map (apply concat (map #(vector % DefaultVal) Keys))))", "user": "55b2b09ee4b01b9910ae296f"}, {"problem": 156, "code": "(fn [x v] (zipmap v (repeat 3 x)))", "user": "55b1c62de4b0da326a65cf72"}, {"problem": 156, "code": "(fn [d ks] (reduce (fn [mp k] (conj {k d} mp)) {} ks))", "user": "55b25970e4b0da326a65cf7e"}, {"problem": 156, "code": "(fn [init-val keys] (reduce #(assoc %1 %2 init-val) {} keys))", "user": "55afa977e4b002ce9d5cbc15"}, {"problem": 156, "code": "(fn [value ks]\n  (zipmap ks (repeat (count ks) value)))", "user": "55b24240e4b0da326a65cf7b"}, {"problem": 156, "code": "(fn  rr [default values]\n  (apply hash-map (interleave values (repeat default)))\n)", "user": "55b3e8aee4b01b9910ae2977"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "55b1ab40e4b0da326a65cf6e"}, {"problem": 156, "code": "(fn [v ks] (apply hash-map (apply concat (map (fn [k] [k v]) ks))))", "user": "55b7b7c1e4b01b9910ae29a9"}, {"problem": 156, "code": "(fn [d ks] (zipmap ks (repeat d)))", "user": "55934bebe4b0c79f6e1db93b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1) )", "user": "55b8d186e4b01b9910ae29ba"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "522fdff7e4b032bbe342416c"}, {"problem": 156, "code": "(fn [default keys] (apply merge (map #(hash-map % default) keys)))", "user": "55b78ff6e4b01b9910ae29a7"}, {"problem": 156, "code": "(fn [x y] (into {} (mapcat #(hash-map %2 %) (repeat x) y)))", "user": "55b107fee4b002ce9d5cbc2a"}, {"problem": 156, "code": "(fn\n  [v keys]\n  (reduce #(assoc %1 %2 v) {} keys))", "user": "556e3b73e4b09a3098a52514"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5342702ce4b00652c8746edb"}, {"problem": 156, "code": "(fn [dk m]\n\t(zipmap m (into [] (repeat (count m) dk)))\n)", "user": "55ba4563e4b01b9910ae29ce"}, {"problem": 156, "code": "(fn [default, keys]\n  (apply hash-map (interleave keys (repeat default))))", "user": "559057c4e4b027778923766e"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "55aa7c5ce4b0988bba2ad94d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55b1e9e7e4b0da326a65cf74"}, {"problem": 156, "code": "(fn\n  [x ks]\n(apply hash-map (interleave ks (repeat (count ks) x))))", "user": "55912230e4b027778923767a"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "52cb6bb0e4b07d0d72b2734c"}, {"problem": 156, "code": "(fn [def-val keys]\n  (zipmap keys (repeat def-val)))", "user": "55bccbc6e4b01b9910ae29f5"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (repeat v)))", "user": "55be39f9e4b01b9910ae2a06"}, {"problem": 156, "code": "(fn [value keyseq]\n\t(into {} (for [k keyseq] {k value})))", "user": "55a016fde4b0acc240e314f1"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "549dfe40e4b0f3d1d8e70f9a"}, {"problem": 156, "code": "(fn [x ylst] (->> (for [y ylst] {y x}) (apply merge)))", "user": "55aa1637e4b0988bba2ad949"}, {"problem": 156, "code": "#(apply assoc {}\n        (interleave %2 (repeat %)))", "user": "55b3c03ee4b01b9910ae2975"}, {"problem": 156, "code": "(fn [n col] \n  (zipmap col \n          (repeat (count col) n)\n  )\n)", "user": "55bb7546e4b01b9910ae29e7"}, {"problem": 156, "code": "(fn [default-value key-list]\n  (loop [keys key-list,\n         output-map {}]\n    (if (empty? keys)\n      output-map\n      (recur (rest keys) (assoc output-map (first keys) default-value)))))", "user": "557775a3e4b05c286339e084"}, {"problem": 156, "code": "#(loop [in %2\n        out {}]\n   (if (empty? in)\n       out\n       (recur (rest in) (assoc out (first in) %1))))", "user": "559454f2e4b0c79f6e1db952"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %1)))", "user": "5452a300e4b0e397800069c7"}, {"problem": 156, "code": "#(apply merge (for [k %2] {k %1}))", "user": "50978ca4e4b00ad8bab4e966"}, {"problem": 156, "code": "(fn [val keys] (reduce #(assoc %1 %2 val) {} keys))", "user": "55c0afa5e4b01b9910ae2a27"}, {"problem": 156, "code": "#(reduce (fn [m x] (assoc m x %)) {} %2)", "user": "55bfc39ee4b01b9910ae2a1a"}, {"problem": 156, "code": "(fn [defvalue colkeys] (zipmap colkeys (take (count colkeys) (cycle [defvalue]))))", "user": "55c07e3ee4b01b9910ae2a24"}, {"problem": 156, "code": "(fn [d ks]\n  (into {} (map #(vector % d) ks)))", "user": "549c6792e4b0f3d1d8e70f8b"}, {"problem": 156, "code": "(fn [k s] (zipmap s (repeat k)))", "user": "4e8a170c535d3e98b802328f"}, {"problem": 156, "code": "(fn [d ks]\n  (reduce conj (map #(assoc {} % d) ks)))", "user": "55b42706e4b01b9910ae297b"}, {"problem": 156, "code": "(fn [d,k] (apply assoc {} (interleave k (repeat (count k) d))))", "user": "55c10409e4b01b9910ae2a2c"}, {"problem": 156, "code": "(fn [x v] (into {} (map #(vector % x) v)))", "user": "55c1eb52e4b0e31453f64970"}, {"problem": 156, "code": "(fn [n coll]\n  (apply assoc {} (mapcat #(vector % n) coll)))", "user": "55aa8276e4b0988bba2ad94e"}, {"problem": 156, "code": "(fn fun1 [d k] (reduce (fn [acc i] (conj acc [i d])) {} k))", "user": "55c0f842e4b01b9910ae2a2b"}, {"problem": 156, "code": "#(reduce conj (map (fn [z] {z %}) %2))\n;(fn [x y] (reduce conj (map (fn [z] {z x}) y)))", "user": "55c387e4e4b0e31453f6498b"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "55c497d4e4b0e31453f649a0"}, {"problem": 156, "code": "(fn [d ks]\n  (apply hash-map (mapcat (fn [k] [k d])\n                          ks)))", "user": "55c4e48be4b0e31453f649a7"}, {"problem": 156, "code": "(fn [default key-seq]\n  (apply hash-map (interleave key-seq (repeat default))))", "user": "55c3f0c6e4b0e31453f64990"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "55c5153de4b0e31453f649ad"}, {"problem": 156, "code": "(fn [my-value my-keys] (apply merge (map (fn [my-key] {my-key my-value}) my-keys)))", "user": "54ef7568e4b024c67c0cf885"}, {"problem": 156, "code": "(fn foo [a m] (zipmap m (repeat a)))", "user": "55c779f8e4b0e31453f649d2"}, {"problem": 156, "code": "(fn [x y] \n    (apply hash-map (interleave y (repeat (count y) x))))", "user": "513f1f18e4b051389b345b3d"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "55c58c0be4b0e31453f649b3"}, {"problem": 156, "code": "(fn [d s] (reduce #(assoc %1 %2 d) {} s))", "user": "53fc63dce4b0de5c4184859f"}, {"problem": 156, "code": "(fn [default-value coll]\n  (apply hash-map (interleave coll (repeat default-value))))", "user": "54b817eee4b0ed20f4ff6e93"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55c77070e4b0e31453f649d0"}, {"problem": 156, "code": "(fn [d k]\n    (apply hash-map\n           (interleave \n             k\n             (repeat (count k) d)\n             )\n           )\n    )", "user": "55c3149de4b0e31453f64987"}, {"problem": 156, "code": "#(apply assoc {}\n         (interleave %2 (repeat (count %2) %1)))", "user": "5574c172e4b05c286339e059"}, {"problem": 156, "code": "(fn [defaultVal seqs] (loop [finalMap {} currentSeq seqs]\n                      (if(empty? currentSeq)\n                         finalMap\n                      (recur (assoc finalMap (first currentSeq) defaultVal) (rest currentSeq))\n                      )\n                      )\n)", "user": "51fea7d7e4b0f1313d468a74"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54010363e4b0de5c4184861d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55c28beae4b0e31453f6497d"}, {"problem": 156, "code": "(fn [defv coll] (into {} (for [x coll] [x defv])))", "user": "55ca4273e4b0e31453f649f9"}, {"problem": 156, "code": "; My original solution\n;(fn join-em [a b] \n;  (into {} \n;        (map #(hash-map %1 %2) b (repeat a))))\n\n; My 2nd solution\n; #(into {} (for [x %2 y [%1]] [x y]))\n \n\n;; (= (#(into {} (for [key %2] [key %1])) 0 [:a :b :c])\n;;   {:a 0 :b 0 :c 0})\n;; => true\n\n\n;; (#(for [key %2] [key %1]) 0 [:a :b :c])\n;; => ([:a 0] [:b 0] [:c 0])\n\n;; Norman's oroginal solution \n;; #(into {} (for [key %2] [key %1]))\n\n;; Norman's solution with var name changed from key to the-var\n;; #(into {} (for [the-var %2] [the-var %1]))\n\n;; Norman's updated solution based on what he's learned over last 2 years\n;; #(zipmap %2 (repeat %1))\n\n\n#(zipmap %2 (repeat %1))", "user": "4f1c7021535d64f603146482"}, {"problem": 156, "code": "(fn  [default coll]\n  (zipmap coll (repeat default))\n)", "user": "55a65872e4b09e57187da299"}, {"problem": 156, "code": "#(reduce (fn [m k] (assoc m k %1)) {} %2)", "user": "55c20bd0e4b0e31453f64972"}, {"problem": 156, "code": "(fn [value keys] (into (hash-map) (for [k keys] [k value])))", "user": "54f4ab86e4b0f2f3c5226e84"}, {"problem": 156, "code": "(fn [v s]\n  (zipmap s (repeat v)))", "user": "55c652dde4b0e31453f649bd"}, {"problem": 156, "code": "#(into {} (map vec (partition 2 (interleave %2 (repeat (count %2) %1)))))", "user": "55caabd1e4b0e31453f649fb"}, {"problem": 156, "code": "(fn [default-value key-list]\n  (reduce #(conj %1 [%2 default-value]) {} key-list))", "user": "55c313a0e4b0e31453f64986"}, {"problem": 156, "code": "(fn [default, keys] (reduce merge (map #(hash-map % default) keys)))", "user": "54b5b3cce4b05787c3b163ab"}, {"problem": 156, "code": "#(reduce (fn [nm k] (assoc nm k %1)) {} %2)", "user": "55c9bc1ee4b0e31453f649f1"}, {"problem": 156, "code": "#(apply (partial conj {}) (for [k %2] [k %1]))", "user": "55ccd9d1e4b0e31453f64a17"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55627de1e4b0c656e3ff17d9"}, {"problem": 156, "code": "(fn [v coll]\n  (zipmap coll\n          (vec (repeat (count coll) v))))", "user": "54b64fbbe4b05787c3b163b8"}, {"problem": 156, "code": ";(fn [a b] {:a 0 :b 0 :c 0})\n(fn tes [a b] \n  (apply assoc {} \n  (interleave b (repeat a))\n  ) \n  )", "user": "541ddadbe4b01498b1a71a84"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat (count %2) %)))", "user": "55cc56bee4b0e31453f64a0f"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat (count %2) %1)))", "user": "559067ace4b0277789237670"}, {"problem": 156, "code": "(fn [v ks]\n  (reduce (fn [m k] (assoc m k v)) {} ks))", "user": "55c68089e4b0e31453f649c4"}, {"problem": 156, "code": "(fn [d s] (into {} (map #(vector % d) s)))", "user": "546e1142e4b00cfc9eacc199"}, {"problem": 156, "code": ";#(reduce (fn [m k]  (assoc m k %1)) {} %2)\n#(zipmap %2 (repeat %1))", "user": "53e9dce1e4b036ad0777e4bc"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55cdc576e4b0e31453f64a1f"}, {"problem": 156, "code": "(fn [default-value keys-to-populate]\n  (loop [[current-key & remaining-keys] keys-to-populate\n         result {}]\n    (let [result (assoc result current-key default-value)]\n    (if (empty? remaining-keys)\n      result\n      (recur remaining-keys result)))))", "user": "55d06bcbe4b0e31453f64a3a"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %1)))", "user": "5586f418e4b059ccff29b1de"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55d0a3c4e4b0e31453f64a3e"}, {"problem": 156, "code": "(fn [v vec] (apply hash-map (interleave vec (repeat (count vec) v))))", "user": "55a2ef1ae4b0acc240e3152d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55d0e76ae4b0e31453f64a40"}, {"problem": 156, "code": "(fn [n coll](apply merge (map #(hash-map % n) coll)))", "user": "55d1a721e4b0e31453f64a47"}, {"problem": 156, "code": "#(into {} (for [x %2] [x %1]))", "user": "5589a941e4b059ccff29b207"}, {"problem": 156, "code": "(fn [v coll]\n  (into {} (for [x coll] {x v})))", "user": "553e2cc0e4b0a04f792994e9"}, {"problem": 156, "code": "(fn [v coll]\n    (into {} (for [x coll] {x v})))", "user": "55d22218e4b0e31453f64a52"}, {"problem": 156, "code": "(fn [x y] (apply hash-map (interleave y (repeat x))))", "user": "50a8bb65e4b0deba384a58bd"}, {"problem": 156, "code": ";(fn [d v]\n;  (into {} (map #(vector % d) v)))\n\n#(zipmap %2 (repeat %))", "user": "55236ad6e4b0882d96d091b1"}, {"problem": 156, "code": "#(apply assoc {} (reverse (conj (reverse (interpose %1 %2)) %1)))", "user": "55d354e0e4b0e31453f64a62"}, {"problem": 156, "code": "#(reduce\n  (fn [a b]\n    (assoc a b %1)) {} %2)", "user": "55d1f231e4b0e31453f64a4e"}, {"problem": 156, "code": "#(apply hash-map (mapcat (fn [a] [a %1]) %2))", "user": "55b0f5bfe4b002ce9d5cbc28"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (repeat v)))", "user": "534056fce4b085b17e897dac"}, {"problem": 156, "code": "(fn [v m] (zipmap m (repeat v)))", "user": "55b7f263e4b01b9910ae29b4"}, {"problem": 156, "code": "(fn [default ks]\n  (loop [ks-left ks\n         result {}]\n    (if (empty? ks-left)\n      result\n      (recur (rest ks-left) (assoc result (first ks-left) default)))))", "user": "55d4dddde4b0e31453f64a7f"}, {"problem": 156, "code": "(fn [d ks ] (zipmap ks (repeat (count ks) d)))", "user": "55d44dd6e4b0e31453f64a75"}, {"problem": 156, "code": "(fn [v k] (reduce (fn [m k] (assoc m k v)) {} k))", "user": "4e72a717535d5021c1a89665"}, {"problem": 156, "code": "(fn [val keys] (zipmap keys (cycle [val])))", "user": "55d5e80ee4b0e31453f64a91"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55d62a68e4b0e31453f64a96"}, {"problem": 156, "code": "(fn [default keys-coll]\n  (into {} (map #(vector %1 default) keys-coll)))", "user": "55d6a2ebe4b0e31453f64a9a"}, {"problem": 156, "code": "#(reduce (fn [acc x] (assoc acc x %1)) {} %2)", "user": "529599dce4b02ebb4ef75027"}, {"problem": 156, "code": "(fn [x l]\n  (let [arr (repeat (count l) x)]\n    (zipmap l arr)))", "user": "4fab336be4b081705acca216"}, {"problem": 156, "code": "(fn [d l] \n  (loop [dval d inlist l rmap {}]\n    (if (empty? inlist)\n      rmap\n      (recur dval \n             (rest inlist) \n             (conj rmap {(first inlist) dval})\n             )\n      )\n    )\n  )", "user": "55ce2b6de4b0e31453f64a26"}, {"problem": 156, "code": "(fn [n init-keys]\n  (loop [acc {}\n         keys init-keys]\n    (if (empty? keys)\n      acc\n      (recur (assoc acc (first keys) n)\n             (rest keys)))))", "user": "55d0391de4b0e31453f64a37"}, {"problem": 156, "code": "(fn [default keys]\n  (reduce (fn [map key] (assoc map key default)) {} keys))", "user": "55d29fb6e4b0e31453f64a59"}, {"problem": 156, "code": "(fn [x coll] (zipmap coll (repeat x)))", "user": "52ca7711e4b071a8d36bd3e3"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55d1b565e4b0e31453f64a49"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "4f435ee8e4b0d7d3c9f3fd1f"}, {"problem": 156, "code": "(fn [v keys] (reduce #(assoc %1 %2 v) {} keys))", "user": "54722c55e4b094393f72dd74"}, {"problem": 156, "code": "(fn [defaultValue keys] (reduce (fn [hash key] (merge hash (hash-map key defaultValue)) ) {} keys ) )", "user": "55d79b87e4b0e31453f64aa8"}, {"problem": 156, "code": "(fn [value coll] \n  (into {} (map (fn [elem] [elem value]) coll)))", "user": "5446158ce4b032a45b8693a6"}, {"problem": 156, "code": "(fn [dv kys] \n  (reduce (fn [m k] (assoc m k dv)) {} kys))", "user": "55d4b995e4b0e31453f64a7c"}, {"problem": 156, "code": "(fn map-defaults [val keys]\n  (loop [k keys  acc {}]\n    (cond (empty? k) acc\n          :else (recur (rest k) (conj acc [(first k) val])))))", "user": "55dab5c8e4b0e31453f64ada"}, {"problem": 156, "code": "(fn [v l] ( into {} (map (fn [z] [z v]) l)))", "user": "55d35a01e4b0e31453f64a63"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55dcb06ee4b050e68259b3b9"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55d68726e4b0e31453f64a99"}, {"problem": 156, "code": "(fn [v, ks] (reduce (fn [m,k] (assoc m k v) ) {} (reverse ks) ) )", "user": "55dd91c9e4b050e68259b3ca"}, {"problem": 156, "code": "(fn [d k] (zipmap k (repeat d)))", "user": "4e89dbce535d3e98b8023283"}, {"problem": 156, "code": "( fn [v s] (zipmap s (repeat v)))", "user": "55d3b030e4b0e31453f64a6b"}, {"problem": 156, "code": "(fn [default-value mapping-keys]\n       (letfn [(mapping-default\n               [innter-default-value inner-mapping-keys]\n               (if (not (= (count inner-mapping-keys) 0))\n                 (assoc\n                   (mapping-default innter-default-value (rest inner-mapping-keys))\n                   (first inner-mapping-keys)\n                   innter-default-value)))]\n         (mapping-default default-value mapping-keys)))", "user": "55ded9fde4b050e68259b3e7"}, {"problem": 156, "code": "(fn [n coll]\n  (zipmap coll (repeat n)))", "user": "55d36ef5e4b0e31453f64a65"}, {"problem": 156, "code": "#(zipmap %2 (for [x (range (count %2))] %1))", "user": "552af5ebe4b0ffed3738f95b"}, {"problem": 156, "code": "(fn ff [x [f & l]] (if-not l {f x} (conj (ff x l) {f x})))", "user": "55deeface4b050e68259b3ea"}, {"problem": 156, "code": "(fn make-def-map [default keys]\n  (into {} (map #(vector % default) keys)))", "user": "54f09599e4b024c67c0cf89d"}, {"problem": 156, "code": "(fn [default keyset] \n                      (reduce (fn [acc el] \n                                (conj acc {el default})) \n                                {} keyset))", "user": "55ddb3f4e4b050e68259b3cd"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "55c3c1b0e4b0e31453f6498c"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (repeat v)))", "user": "51f09f3de4b0274c496158d7"}, {"problem": 156, "code": "(fn [d m] (into {} (mapcat #(assoc {} %1 d) m)))", "user": "55d85ac9e4b0e31453f64ab2"}, {"problem": 156, "code": "(fn [x c] (reduce #(conj %1 [%2 x]) {} c))", "user": "55e1d34ae4b050e68259b421"}, {"problem": 156, "code": "#(apply sorted-map (interleave %2 (repeat %1)))", "user": "55e31aa8e4b050e68259b43f"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "55e2b1cfe4b050e68259b438"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54290a64e4b01498b1a71b36"}, {"problem": 156, "code": "(fn [v ks] (reduce #(assoc %1 %2 v) {} ks))", "user": "559a9a3de4b066d22e731f45"}, {"problem": 156, "code": "(fn [arg list] \n  (loop [[head & tail] list result {}]\n    (if head (recur tail (assoc result head arg)) result)\n    ))", "user": "55da18d5e4b0e31453f64ad1"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "55d74e71e4b0e31453f64aa4"}, {"problem": 156, "code": "(fn\n  [v k] (reduce \n         #(assoc %1 %2 v)\n         {} k\n         )\n  )", "user": "55e1ddf7e4b050e68259b422"}, {"problem": 156, "code": "#(into {} (for [e %2] {e %1}))", "user": "55e05f46e4b050e68259b40b"}, {"problem": 156, "code": "(fn constant-map [v keys]\n    (zipmap keys (repeat v)))", "user": "4fc6305de4b0ee37620e180b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55663e9be4b0c656e3ff182b"}, {"problem": 156, "code": "(fn\n  [default xs]\n  (apply hash-map (apply concat (map vector xs (repeat default)))))", "user": "5461dc79e4b01be26fd746a8"}, {"problem": 156, "code": "(fn [v ks] (reduce conj (map #(hash-map % v) ks)))", "user": "5530baa5e4b076ab5578f81a"}, {"problem": 156, "code": "(fn [x y] (reduce conj (map #(assoc {} % x) y)))", "user": "53d8da61e4b0e771c3025471"}, {"problem": 156, "code": "(fn[val keys]\n  (reduce merge (map #(assoc {} % val) keys))\n  )", "user": "55cb11e9e4b0e31453f649ff"}, {"problem": 156, "code": "(fn [d v] (reduce (fn [m k] (assoc m k d)) {} v))", "user": "55e2f502e4b050e68259b43c"}, {"problem": 156, "code": "(fn [val keys]\n\t(reduce conj {} \n            (zipmap keys \n                    (repeat (count keys) val))))", "user": "55e856bae4b0121d4835fd8d"}, {"problem": 156, "code": "(fn [default-value ks]\n  (into {}\n        (map (fn [k]\n               [k default-value])\n             ks)))", "user": "554bd33ce4b0a04f7929959a"}, {"problem": 156, "code": "(fn [df ks] (apply hash-map (reduce                             \n                             (fn [acc v] (conj acc v df))\n                             []\n                             ks)))", "user": "55e558e3e4b050e68259b46b"}, {"problem": 156, "code": "(fn [d ls]\n  (zipmap ls (for [i (range (count ls))]\n                         d)))", "user": "55df5feae4b050e68259b3f1"}, {"problem": 156, "code": "(fn prob156\n  [num keys]\n  (loop [[first & rest] keys\n         final {}]\n    (if (empty? rest)\n      (conj final {first num})\n      (recur rest (conj final {first num})))))", "user": "4ebbff41535dfed6da9c6d78"}, {"problem": 156, "code": "(fn [d m]\n           (reduce\n             (fn [b n] (conj b {n d}))\n             {}\n             m\n             )\n           )", "user": "55d42f78e4b0e31453f64a73"}, {"problem": 156, "code": "(fn [v ks]\n  (let [vs (take (count ks) (repeat v))]\n    (apply hash-map (apply concat (map (fn [x y] [x y]) ks vs)))))", "user": "55eb1410e4b0121d4835fdb8"}, {"problem": 156, "code": "(fn [v coll]\n  (into {} (for [x coll] {x v})))", "user": "53a6a599e4b0ef122a8689cc"}, {"problem": 156, "code": "(fn [default coll] (into {} (map #(identity {% default}) coll)))", "user": "55dbed2fe4b050e68259b3a6"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55e6c3f5e4b050e68259b48c"}, {"problem": 156, "code": "(fn [dv sq] (reduce #(assoc %1 %2 dv) {} sq))", "user": "558fec41e4b0277789237666"}, {"problem": 156, "code": "(fn [default keys]\n  (loop [result {}\n         remkeys keys]\n    (if (empty? remkeys)\n            result\n            (recur (assoc result (first remkeys) default) (rest remkeys)))))", "user": "55ecac8ee4b0121d4835fdcc"}, {"problem": 156, "code": "(fn [default keys] \n  (zipmap keys (repeat default)))", "user": "4eb9ce75535dfed6da9c6d5e"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "55d9743ae4b0e31453f64aca"}, {"problem": 156, "code": "(fn [d ks]\n (into {} (map #(conj [%] d) ks))\n  )", "user": "55edc088e4b0121d4835fde0"}, {"problem": 156, "code": "#(let [val %1 ll %2]\n    (reduce (fn [x y](assoc x y val)) {} ll))", "user": "55ec04c4e4b0121d4835fdc1"}, {"problem": 156, "code": "(fn [default ks]\n   (into {} (for [k ks] [k default])))", "user": "5166b716e4b060c690c1f4bf"}, {"problem": 156, "code": "(fn [defaultv ks] (reduce #(conj %1 {%2 defaultv}) {} ks))", "user": "558bdcefe4b0277789237633"}, {"problem": 156, "code": "(fn [default keyseq]\n  (zipmap keyseq (map (fn [x] default) keyseq)))", "user": "53fc88e7e4b0de5c418485be"}, {"problem": 156, "code": "(fn [v k] (zipmap k (repeat v)))", "user": "55ea1738e4b0121d4835fdaa"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "519e70d5e4b0acf32bc6a42c"}, {"problem": 156, "code": "(fn defmap\n  [x keys]\n  (zipmap keys (repeat (count keys) x)))", "user": "55e9494ae4b0121d4835fd9e"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54864662e4b0e286459a11b8"}, {"problem": 156, "code": "(fn [default keys] (reduce (fn [map key] (conj map {key default})) {} keys))", "user": "55f014ebe4b06e875b46ce1b"}, {"problem": 156, "code": "#(loop [coll %2\n        map1 {}]\n  (if (empty? coll)\n    map1\n    (recur (rest coll) (conj map1 {(first coll) %1}))))", "user": "55eeeb81e4b0121d4835fdf7"}, {"problem": 156, "code": "(fn [v k] (zipmap k (repeat v)))", "user": "55f04940e4b06e875b46ce21"}, {"problem": 156, "code": "(fn default-map-maker \n  [defaultValue keyList]\n  (loop [remainingKeys keyList finalMap {}] \n    (if (empty? remainingKeys)\n      finalMap\n      (let [[currKey & restKeys] remainingKeys \n            finalMap (conj finalMap (hash-map currKey defaultValue))]\n        (recur restKeys finalMap)\n        \n        ))))", "user": "55ef51f1e4b066087aa94534"}, {"problem": 156, "code": "#(into {} (for [k %2] [k %1]))", "user": "55ecb2c0e4b0121d4835fdce"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "55ec4558e4b0121d4835fdc5"}, {"problem": 156, "code": "(fn [v s] (into {} (map #(vector % v) s)))", "user": "55ed7474e4b0121d4835fdda"}, {"problem": 156, "code": "(fn [default keycoll]\n  (into {} (map #(vector % default) keycoll)))", "user": "55f03fb5e4b06e875b46ce1f"}, {"problem": 156, "code": "#(zipmap %2 (cycle (list %)))", "user": "529c722de4b04e0c58e87b63"}, {"problem": 156, "code": "(fn [v ks](into {} (map #(assoc {} % v) ks)))", "user": "54d05a9de4b0e8a36923e5c7"}, {"problem": 156, "code": "(fn [def-value keys]  \n  (apply hash-map (mapcat #(list % def-value) keys))\n   )", "user": "55f06183e4b06e875b46ce23"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "4eac5bc1535d7eef3080731b"}, {"problem": 156, "code": "(fn [default myMap]\n  (->> (vec (map #(vec [%1 default]) myMap)) (into {}) )\n)", "user": "55efc44ee4b066087aa9453e"}, {"problem": 156, "code": "(fn [v  keys] (zipmap keys (repeat v)))", "user": "55809cb9e4b05c286339e0ef"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55e5c852e4b050e68259b474"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55e59b67e4b050e68259b46f"}, {"problem": 156, "code": "(fn [v k] (reduce #(conj %1 [%2 v]) {} k))", "user": "4f5eda39e4b0030a34fb2b56"}, {"problem": 156, "code": "(fn [x coll]\n  (zipmap coll (repeat x)))", "user": "500e6ddee4b04a05d36fcc06"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55f2fdc3e4b06e875b46ce51"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55f20e4be4b06e875b46ce40"}, {"problem": 156, "code": "(fn [sv sm]\n  (reduce conj {} (map (fn [k] [k sv]) sm)))", "user": "55d42d63e4b0e31453f64a72"}, {"problem": 156, "code": "(fn [d xs]\n  (let [dv (vec (repeat (count xs) d))]\n    (zipmap xs dv)))", "user": "55e7fc2ce4b0121d4835fd86"}, {"problem": 156, "code": "(fn [x ks] (into {} (map (fn [k] [k x]) ks)))", "user": "55f5b657e4b06e875b46ce8c"}, {"problem": 156, "code": "(fn [dfl keylist] (zipmap keylist (repeat dfl)))", "user": "55f04526e4b06e875b46ce20"}, {"problem": 156, "code": "(fn [default keys]\n  (zipmap keys (repeat default)))", "user": "55ae6367e4b03311e7b732bc"}, {"problem": 156, "code": "(fn [default kys ]  (apply hash-map (interleave kys (repeat (count kys) default)))      )", "user": "558ee1c9e4b0277789237659"}, {"problem": 156, "code": "(fn [v ks]\n  (apply hash-map (interleave ks (repeat v))))", "user": "524e79c1e4b0541d1855b7e0"}, {"problem": 156, "code": "(fn tt\n  [dv [x & xs]] \n  (let [res {}]\n    (if (nil? xs)\n      (conj {x dv} res)\n      (conj {x dv} (tt dv xs)))))", "user": "55f01316e4b06e875b46ce1a"}, {"problem": 156, "code": "(fn [d c] (into {} (map #(vector % d) c)))", "user": "55eeb37ae4b0121d4835fdf3"}, {"problem": 156, "code": "#(into {} (map (fn[x] ((comp vec list) x %1)) %2))", "user": "55f6c0e2e4b06e875b46ce99"}, {"problem": 156, "code": "(fn my-zipmap2 [val keys]\n  (loop [my-map {}\n         my-keys keys]\n    (if (seq my-keys )\n      (recur (assoc my-map (first my-keys) val)\n             (rest my-keys))\n      my-map)))", "user": "55f6d4fce4b06e875b46ce9b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "521ed5b4e4b0e6c71e0c0bc0"}, {"problem": 156, "code": "#(reduce (fn [m k] (assoc m k %1)) {} %2)", "user": "55f7dc24e4b06e875b46ceb3"}, {"problem": 156, "code": "(fn [v ks] (reduce #(assoc %1 %2 v) {} ks))", "user": "55f7ebeae4b06e875b46ceb7"}, {"problem": 156, "code": "(fn [val seq]\n  (reduce #(assoc %1 %2 val) {} seq))", "user": "55f2d4ede4b06e875b46ce4c"}, {"problem": 156, "code": "(fn [v ks]\n  (into {} \n        (map vector ks (repeat (count ks) v))))", "user": "54ab951be4b09f271ff37ccc"}, {"problem": 156, "code": "(fn [value keys]\n  (zipmap (reverse keys)  (repeat (count keys) value)))", "user": "5541fa50e4b0a04f79299515"}, {"problem": 156, "code": "(fn [vlyu coll]\n  (loop [nmap {} clect coll]   \n    (if (empty? clect)\n      nmap \n      (recur (assoc nmap (first clect) vlyu)\n             (rest clect)))))", "user": "55810c73e4b05c286339e0f2"}, {"problem": 156, "code": "#(zipmap %2 (vec (repeat (count %2) %)))", "user": "55e5f668e4b050e68259b47d"}, {"problem": 156, "code": "(fn mymap [d vec] (reduce #(conj %1 {%2 d}) {} vec))", "user": "55ef12cfe4b0121d4835fdfc"}, {"problem": 156, "code": "(fn [x y] (apply hash-map (interleave y (repeat x))))", "user": "55e00655e4b050e68259b405"}, {"problem": 156, "code": "(fn [d ls] (reduce #(assoc %1 %2 d) {} ls))", "user": "55f43228e4b06e875b46ce67"}, {"problem": 156, "code": "(fn [d v]\n  (apply merge\n         (map #(hash-map % d) v)))", "user": "558053b1e4b05c286339e0e9"}, {"problem": 156, "code": "(fn [d l] (into (hash-map) (map #(identity [%1 d]) l )))", "user": "55f99742e4b03cbcff9738c5"}, {"problem": 156, "code": "(\n fn (\n     [default_value input_keys]\n     (\n      loop [collection input_keys result {}]\n       (\n        let [first_item (first collection)]\n         (\n          if (empty? collection) result\n           (\n            recur (rest collection) (assoc result first_item default_value)\n           )\n         )\n       )\n     )\n    )\n)", "user": "55f7a03de4b06e875b46ceae"}, {"problem": 156, "code": "(fn f [x xs]\n  (if (empty? xs) {}\n    (assoc (f x (rest xs)) (first xs) x)))", "user": "55e3e7a8e4b050e68259b44a"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %1)))", "user": "55d5ee3fe4b0e31453f64a92"}, {"problem": 156, "code": "#(loop [x 0\n        a {}]\n   \t   (if (= x (count %2)) a\n           (recur (inc x) (assoc a (nth %2 x) %1))\n       )\n)", "user": "55f68360e4b06e875b46ce93"}, {"problem": 156, "code": "(fn [dv ks]\n  (into {} (map #(assoc {} % dv) ks)))", "user": "55fb1c77e4b0f488688e065c"}, {"problem": 156, "code": "(fn [dfl coll] (into {} (for [t coll] {t dfl})))", "user": "55f8b32ae4b03cbcff9738ba"}, {"problem": 156, "code": "(fn [d ks] \n  (into \n   {} \n\t(map\n     #(vector % d)\n     ks)))", "user": "53de7484e4b0d874e779ae35"}, {"problem": 156, "code": "(fn map-default \n  [v ks]\n  (into {} (map #(vector %1 v) ks)))", "user": "539e717fe4b0ca733b974488"}, {"problem": 156, "code": "(fn [default vect]\n  (reduce\n    (fn [startmap addkey]\n      (conj startmap {addkey default}))\n    (hash-map)\n    vect)\n  )", "user": "5591b61ee4b0604b3f94d580"}, {"problem": 156, "code": "(fn [default s] (apply hash-map (interleave s (take (count s) (repeat default)))))", "user": "55fb58b2e4b0f488688e0661"}, {"problem": 156, "code": "(fn default-map-values [value keys]\n  (when-not (empty? keys)\n    (merge (assoc {} (first keys) value) (default-map-values value (rest keys))))\n  )", "user": "55fb5b89e4b0f488688e0662"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "55e06f82e4b050e68259b40d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55f6f1d3e4b06e875b46cea0"}, {"problem": 156, "code": "(fn [v coll] (apply conj (map #(assoc {} %1 %2) coll (repeat v))))", "user": "55af3e6be4b03311e7b732c7"}, {"problem": 156, "code": "#(into {} (map (fn [x] {x %1}) %2))", "user": "55fa3454e4b03cbcff9738ce"}, {"problem": 156, "code": "(fn[x y](\ninto {} (map #(vector % x) y)))", "user": "54d2829ce4b0e8a36923e5f6"}, {"problem": 156, "code": "(fn [d l] (reduce #(assoc %1 %2 d) {} l))", "user": "55f2b42be4b06e875b46ce4a"}, {"problem": 156, "code": "(fn [v k] (zipmap k (repeat (count k) v )))", "user": "55e8a85be4b0121d4835fd98"}, {"problem": 156, "code": "(fn construct-map [dv ks]\n  (loop [res {}\n         kys ks]\n    (if (empty? kys)\n      res\n      (recur (assoc res (first kys) dv) (rest kys)))))", "user": "5294a49be4b02ebb4ef7500f"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "511e17a9e4b0c5b849dd36b0"}, {"problem": 156, "code": "(fn [dv ks]\n    (reduce #(merge %1 {%2 dv}) {} ks))", "user": "55d073ece4b0e31453f64a3b"}, {"problem": 156, "code": "(fn \n  [defa seq]\n  (into {}(for [x seq\n        :let [y [x defa]]]\n        y)))", "user": "55fcaccfe4b0f488688e0679"}, {"problem": 156, "code": "(fn [d k]\n  (reduce conj {} (vec (map vec (partition 2 (interleave k (repeat d)))))))\n  \n  \n  ;;Nicer\n  ;;(fn [v coll] (reduce #(assoc %1 %2 v) {} coll))", "user": "52aaabf7e4b0c58976d9ac68"}, {"problem": 156, "code": "(fn [v ks]\n  (reduce (fn [acc k]\n            (assoc acc k v))\n          {}\n          ks))", "user": "4f963487e4b0dcca54ed6cd9"}, {"problem": 156, "code": "(fn [default keys] (apply merge (map #(hash-map % default) keys)))", "user": "55f09e7be4b06e875b46ce28"}, {"problem": 156, "code": "(fn [v k] (zipmap k (repeat v)))", "user": "4e70eae1535d5021c1a89642"}, {"problem": 156, "code": "#(reduce (fn [buf v] (merge buf {v %1})) {} %2)", "user": "560039cce4b04bb52996e162"}, {"problem": 156, "code": "(fn [n stuff]\n  (reduce #(assoc %1 %2 n) {} stuff))", "user": "5600d1a5e4b04bb52996e172"}, {"problem": 156, "code": "(fn [n col] (reduce #(assoc %1 %2 n) {} col))", "user": "55f1d5dfe4b06e875b46ce38"}, {"problem": 156, "code": "(fn [value keys] (zipmap keys (repeat (count keys) value) ) )", "user": "5602b618e4b04bb52996e1a5"}, {"problem": 156, "code": "(fn [d c] (reduce #(assoc %1 %2 d) {} c))", "user": "5602ab92e4b04bb52996e1a3"}, {"problem": 156, "code": "(fn make-map [default coll] (loop [result {} c coll] (if c (recur (conj result {(first c) default}) (next c)) result)))", "user": "55f330dde4b06e875b46ce56"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (repeat (count ks) v)))", "user": "54e396f1e4b024c67c0cf7de"}, {"problem": 156, "code": "(fn [x,y] (into {} (map #(vector % x) y)))", "user": "52bf78cde4b07a9af5792339"}, {"problem": 156, "code": "(fn [my-value my-keys]\n  (apply merge (map (fn [x] {x my-value}) my-keys)))", "user": "55fe7e15e4b00f4cabc57651"}, {"problem": 156, "code": "(fn [n s] ( zipmap s (repeat (count s) n)  ))", "user": "56039843e4b04bb52996e1be"}, {"problem": 156, "code": "#(into {} (for [x %2] [x %1]))", "user": "5603c31fe4b04bb52996e1c1"}, {"problem": 156, "code": "#(into {} (for [x %2] [x %1]))", "user": "548b8a50e4b0e286459a11ff"}, {"problem": 156, "code": "(fn [v ks] (into {} (map vector ks (repeat v))))", "user": "55f081bbe4b06e875b46ce25"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55fbcbb1e4b0f488688e0668"}, {"problem": 156, "code": "#(into {} (for [x %2] [x %1]))", "user": "55e1fc42e4b050e68259b424"}, {"problem": 156, "code": "(fn\n  [map-def map-keys]\n  (apply hash-map\n         (reduce #(conj %1 %2 map-def) [] map-keys)))", "user": "55fe8190e4b00f4cabc57652"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55fb41a6e4b0f488688e065f"}, {"problem": 156, "code": "(fn [initial values]\n  (loop [result {}\n         vals values]\n    (if (seq vals) \n      (recur \n        (assoc result (first vals) initial)\n        (rest vals))\n      result\n      )))", "user": "55ad2379e4b03311e7b732a1"}, {"problem": 156, "code": "(fn [v ks]\n  (zipmap ks (repeat v)))", "user": "55fee5e4e4b00f4cabc5765a"}, {"problem": 156, "code": "(fn [x coll] (apply merge (map #(hash-map % x) coll)))", "user": "543f1765e4b032a45b86935a"}, {"problem": 156, "code": "(fn [d s] (reduce #(conj %1 {%2 d}) {} s))", "user": "56011393e4b04bb52996e178"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5263e6d2e4b03e8d9a4a70c0"}, {"problem": 156, "code": "; zipmap\n#(zipmap %2 (repeat %))\n\n; first try\n#_(fn [default keys]\n  (reduce #(assoc % %2 default) {} keys))", "user": "55e7d06ee4b050e68259b496"}, {"problem": 156, "code": "(fn [default coll] (reduce #(assoc %1 %2 default) {} coll))", "user": "55f2c898e4b06e875b46ce4b"}, {"problem": 156, "code": "(fn [d ks] (zipmap ks (repeat d)))", "user": "5573ffb5e4b0aa18f790f3fd"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "55a68518e4b09e57187da29b"}, {"problem": 156, "code": "(fn [default keys] (reduce #(assoc %1 %2 default) {} keys))", "user": "55e274b4e4b050e68259b436"}, {"problem": 156, "code": "#(apply assoc {}\n        (interleave %2 (repeat %1)))", "user": "5609866ee4b0053d1b86c7e3"}, {"problem": 156, "code": "(fn [default, lst] (zipmap lst (repeat default)))", "user": "55048182e4b086ebe8a79c7c"}, {"problem": 156, "code": "(fn [v s] (into {} (map #(vector % v) s)))", "user": "5609816ee4b0053d1b86c7e1"}, {"problem": 156, "code": "(fn [x coll] (apply hash-map (interleave coll (repeat x))))", "user": "55f3802be4b06e875b46ce5f"}, {"problem": 156, "code": "(fn [val coll] (apply merge (map #(hash-map % val) coll)))", "user": "55a372f1e4b0acc240e31537"}, {"problem": 156, "code": "(fn foo [d m]\n  (apply hash-map (mapcat #(list % d) m)))", "user": "56069006e4b08b23635d3174"}, {"problem": 156, "code": "(fn [v xs] (zipmap xs (repeat v)))", "user": "5601bb7ee4b04bb52996e195"}, {"problem": 156, "code": "(fn [default ks] (reduce (fn [acc k] (assoc acc k default)) {} ks))", "user": "560a7b46e4b05f002753defb"}, {"problem": 156, "code": "(fn [default-val ks]\n  (reduce #(assoc %1 %2 default-val) {} ks))", "user": "5592ba8be4b0c79f6e1db931"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %1)))", "user": "55df3b11e4b050e68259b3ef"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "560935d3e4b0053d1b86c7db"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56098ccbe4b0053d1b86c7e4"}, {"problem": 156, "code": "(fn [v lst] \n  (zipmap lst (repeat (count lst) v)))", "user": "560a7775e4b05f002753defa"}, {"problem": 156, "code": "(fn [default initial-keys] (zipmap initial-keys (repeat default)))", "user": "5604bcf7e4b08b23635d315a"}, {"problem": 156, "code": "(fn [x,y] (zipmap y (repeat x)))", "user": "560acfc7e4b05f002753df0a"}, {"problem": 156, "code": "(fn [v kys]\n  (reduce #(assoc %1 %2 v) {} kys))", "user": "56041883e4b0c80df0ca2655"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5537c939e4b09218d5f44fd2"}, {"problem": 156, "code": "(fn [v m] (apply merge (map #(hash-map % v) m)))", "user": "56049986e4b0c80df0ca2662"}, {"problem": 156, "code": "(fn [v ks]\n  (reduce #(conj %1 {%2 v}) {} ks))", "user": "5601a32ee4b04bb52996e193"}, {"problem": 156, "code": "(fn [v l] \n  (loop [cl l\n         m  {}]\n    (if (nil? cl)\n      m\n      (recur (next cl) (into m {(first cl) v})))))", "user": "56051095e4b08b23635d3162"}, {"problem": 156, "code": "(fn [v coll]\n  (into {} (map (fn [k] [k v]) coll)))", "user": "54d321b3e4b0e8a36923e602"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "560d2a2be4b05f002753df35"}, {"problem": 156, "code": "(fn [d xs]\n  (apply merge (map #(assoc {} % d) xs)))", "user": "560ae540e4b05f002753df0d"}, {"problem": 156, "code": "(fn [value_default Map] \n  (zipmap Map (repeat value_default)))", "user": "560d7863e4b05f002753df40"}, {"problem": 156, "code": "#(reduce (fn [acc x] (conj acc {x %1})) {} %2)", "user": "560843dee4b046a4fc0ac00e"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "560ec0b7e4b05f002753df56"}, {"problem": 156, "code": "(fn [d c] (reduce #(assoc %1 %2 d) {} c))", "user": "560ff209e4b05f002753df65"}, {"problem": 156, "code": "#(->> (map vector %2 (repeat %1)) (into {}))", "user": "560e9a2de4b05f002753df52"}, {"problem": 156, "code": "(fn [d xs]\n  (reduce (fn [m k] (assoc m k d)) {} xs))", "user": "4ff24a1ae4b0678c553fc337"}, {"problem": 156, "code": "(fn [dv hashes] \n  (into {} (for [k hashes] [k dv]))\n)", "user": "560d4994e4b05f002753df3c"}, {"problem": 156, "code": "(fn [x xs] (zipmap xs (repeat x)))", "user": "560c31b4e4b05f002753df2d"}, {"problem": 156, "code": "(fn [d dict] (into {} (for [x dict] {x d})))\n;;#(zipmap %2 (repeat %1))", "user": "55ad1221e4b03311e7b7329d"}, {"problem": 156, "code": "(fn mk-map\n\t[deflt keys]\n\t(apply hash-map \n\t\t(apply concat (map list keys (repeat (count keys) deflt)))))", "user": "5545477fe4b0a04f79299531"}, {"problem": 156, "code": "(fn [v myKeys] (let [vs (repeat (count myKeys) v)] (apply hash-map (interleave myKeys vs))))", "user": "560fd433e4b05f002753df62"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (repeat v)))", "user": "50523848e4b0a561d07d8f1a"}, {"problem": 156, "code": "(fn [x y] \n  (zipmap y (repeat (count y) x)))", "user": "560ff632e4b05f002753df66"}, {"problem": 156, "code": "(fn [default v]\n  (loop [newmap {}\n         key-list v]\n    (if (empty? key-list)\n      newmap\n      (recur (assoc newmap (first key-list) default)\n             (rest key-list)))))", "user": "53c6dcf9e4b00fb29b2212a3"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))\n\n; (fn [v ks] (reduce #(assoc %1 %2 v) {} ks))\n\n; (fn [df ls]\n;  (zipmap ls (repeat df)))", "user": "5578f292e4b05c286339e08f"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5090c8e2e4b0742c82730ad9"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5615fd5de4b06b1bb21829fd"}, {"problem": 156, "code": "(fn [x y] (into {} (for [x1 y] [x1 x])))", "user": "55f27d95e4b06e875b46ce47"}, {"problem": 156, "code": "(fn [default inkeys](reduce #(conj % {%2 default}) {} inkeys))", "user": "56168ae7e4b06b1bb2182a05"}, {"problem": 156, "code": "(fn [val keys]\n  (zipmap keys (repeat val)))", "user": "560ae7e6e4b05f002753df0e"}, {"problem": 156, "code": "(fn [v k]\n  (into {} (map #(hash-map % v) (seq k))))", "user": "55bf6dbce4b01b9910ae2a12"}, {"problem": 156, "code": "(fn [x y] (zipmap y (repeat (count y) x)))", "user": "5616c78ee4b06b1bb2182a07"}, {"problem": 156, "code": "(fn [d l] (into {} (mapv vec (partition 2 (interleave l (repeat d))))))", "user": "4f6ba7bce4b07046d9f4efb0"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "4f5e5975e4b0030a34fb2b4d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "561a060ee4b053970a773b01"}, {"problem": 156, "code": "(fn [x vx] (zipmap vx (vec (take (count vx) (repeat x)))))", "user": "55e3924ae4b050e68259b445"}, {"problem": 156, "code": "(fn [y x] (into {} (map #(hash-map % y) x )))", "user": "55dfada4e4b050e68259b3fd"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54dd8a8ae4b024c67c0cf795"}, {"problem": 156, "code": "(fn[default args] (zipmap args (repeat (count args) default)))", "user": "5537b2c7e4b09218d5f44fce"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55e64677e4b050e68259b485"}, {"problem": 156, "code": "(fn [default keyz] (apply hash-map (interleave keyz (repeat default) )))", "user": "5033ed65e4b062bc5d7ae15a"}, {"problem": 156, "code": "(fn map-default [value [first & rest]]\n  (if (not= first nil)\n    (assoc (map-default value rest) first value)\n    {}))", "user": "561bb8dbe4b064ca9f4b1686"}, {"problem": 156, "code": "(fn [d k] (reduce #(conj % [%2 d]) {} k))", "user": "561223e5e4b05f002753df8b"}, {"problem": 156, "code": "(fn [x coll]\n  (apply merge (map #(hash-map % x) coll)))", "user": "5521248fe4b08d5046aa8a69"}, {"problem": 156, "code": "(fn [d c]\n  (apply hash-map (mapcat #(list % d) c)))", "user": "561ba3e5e4b073c65b0ce3eb"}, {"problem": 156, "code": "(fn\n  [defv llist]\n  (reduce #(assoc %1 %2 defv) {} llist))", "user": "561ca6ebe4b064ca9f4b169c"}, {"problem": 156, "code": "(fn [val keys]\n  (loop [remaining-keys keys result {}]\n    (if (empty? remaining-keys)\n      result\n      (recur (rest remaining-keys) (assoc result (first remaining-keys) val))\n      )\n    )\n  )", "user": "5614ebc5e4b05f002753dfbc"}, {"problem": 156, "code": "(fn [d ks] (reduce (fn [coll k] (assoc coll k d)) {} ks))", "user": "53ab1ef6e4b047364c04444b"}, {"problem": 156, "code": "(fn [key value] (reduce (fn [a v] (assoc a v key)) {} value))", "user": "55cf0d0ee4b0e31453f64a2b"}, {"problem": 156, "code": "(fn [val lst]\n  (into {} (map #(hash-map % val) lst)))", "user": "521ceb02e4b0c4ef0be830a5"}, {"problem": 156, "code": "(fn [default keys]\n  (loop [map {} [f & rest] keys]\n    (if f\n      (recur (assoc map f default) rest)\n      map)))", "user": "56175cf9e4b06b1bb2182a0f"}, {"problem": 156, "code": "(fn [v ks] (into {} (map (fn [k] {k v}) ks)))", "user": "4f0f01c0535d0136e6c22329"}, {"problem": 156, "code": "(fn [def-val keys-vec] \n  (zipmap keys-vec (repeat def-val)))", "user": "561d8936e4b064ca9f4b16b2"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55f7bd07e4b06e875b46ceaf"}, {"problem": 156, "code": "(fn [d ks] (reduce conj (for [k ks] {k d})))", "user": "561e2b33e4b064ca9f4b16ba"}, {"problem": 156, "code": "(fn [g q] (loop[y q z {}] (if (= (empty? y) false) (recur (drop 1 y)(assoc z (first y) g)) z)))", "user": "561be724e4b064ca9f4b168c"}, {"problem": 156, "code": "#(into {} (for [x %2] (hash-map x %1)))", "user": "55aacbeee4b0988bba2ad951"}, {"problem": 156, "code": "(fn [v coll](reduce #(assoc %1 %2 v){} coll))", "user": "56188848e4b053970a773aea"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "561c6540e4b064ca9f4b1698"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "561ca2eae4b064ca9f4b169b"}, {"problem": 156, "code": "(fn [x y] (zipmap y (repeat x)))", "user": "5272645de4b03e8d9a4a742c"}, {"problem": 156, "code": "#(reduce (fn [m key] (conj m [key %1])) {} %2)", "user": "561d23e3e4b064ca9f4b16a5"}, {"problem": 156, "code": "(fn dummy_map \n  [default_value keys_]\n  (zipmap keys_ (repeat default_value))\n)", "user": "561eb82fe4b064ca9f4b16c7"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "4f40c46fe4b0e243712b1fbe"}, {"problem": 156, "code": "(fn [dflt lst] \n  (reduce #(assoc %1 %2 dflt) {} lst))", "user": "56102f50e4b05f002753df6b"}, {"problem": 156, "code": "(fn [d m] (into {} (map #(assoc {} % d) m)))", "user": "54b54d1be4b05787c3b1639c"}, {"problem": 156, "code": "(fn [dfl ks] (zipmap ks (repeat dfl)))", "user": "5622ac1de4b03f08ee9a922a"}, {"problem": 156, "code": "(fn [default keyVector]\n         (reduce #(assoc %1 %2 default) {} keyVector)\n     )", "user": "56195e57e4b053970a773af6"}, {"problem": 156, "code": "(fn [v ks] (reduce #(assoc % %2 v) {} ks))", "user": "55f6fe09e4b06e875b46cea2"}, {"problem": 156, "code": "#(into {} (for [x %2] [x %1]))", "user": "561bf12ce4b064ca9f4b168e"}, {"problem": 156, "code": "#(zipmap %2 [%1 %1 %1])", "user": "55bb1b26e4b01b9910ae29e0"}, {"problem": 156, "code": "(fn default_map [value keys]\n  (if (> (count keys) 0)\n      (assoc (default_map value (rest keys)) (first keys) value )\n      {}))", "user": "51a0370ae4b0b292b01ee3ef"}, {"problem": 156, "code": "(fn [x z] (zipmap z (repeat x)))", "user": "55cd95b4e4b0e31453f64a1e"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "522a5bdde4b0590a43906cf8"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "562528d4e4b00a550fc90292"}, {"problem": 156, "code": "(fn [d m] (zipmap m (repeat d)))", "user": "5619a4d0e4b053970a773afd"}, {"problem": 156, "code": "#(zipmap  %2 (repeat %1))", "user": "562326cbe4b03f08ee9a9230"}, {"problem": 156, "code": "(fn [val list]\n  (into {} (for [x list] {x val})))", "user": "560d2bf5e4b05f002753df39"}, {"problem": 156, "code": "(fn [v ks] (->> (map #(vector % v) ks) (apply concat) (apply hash-map)))", "user": "56264d64e4b00e49c7cb47be"}, {"problem": 156, "code": "(fn [default sequance]\n  (loop [[f & rest] sequance\n         result_map {}]\n    (if rest\n      (recur rest (conj result_map [f default]))\n      (conj result_map [f default]))))", "user": "561fc0d0e4b064ca9f4b16d2"}, {"problem": 156, "code": "(fn [val keys] (reduce (fn [h k]\n                         (assoc h k val)) {} keys))", "user": "56018dd4e4b04bb52996e18f"}, {"problem": 156, "code": "(fn [val coll]\n  (zipmap coll (repeat (count coll) val)))", "user": "54d000c7e4b018d918be98d7"}, {"problem": 156, "code": "(fn [v m] (into {}(map #(vector % v) m)))", "user": "53623eaee4b0243289761e4f"}, {"problem": 156, "code": "(fn [def_val keys]\n\t\t(loop [x keys y (repeat (count keys) def_val) m {}]\n\t\t\t(if (not (nil? (first x)))\n\t\t\t(recur (rest x)(rest y) (assoc m (first x) (first y)) )\n\t\t\tm)\n\t\t\t))", "user": "560331dee4b04bb52996e1b5"}, {"problem": 156, "code": "(fn[v ks] (into {} (map (fn[x] [x v]) ks)))", "user": "5627d09ce4b00e49c7cb47db"}, {"problem": 156, "code": "; cara sampah:\n; (fn mymap [n m] (apply assoc {} ((fn [x y] (conj (vec (interpose x y)) x)) n m)))\n\n; setelah tau ada repeat\n(fn [nilai kuncis] (zipmap kuncis (repeat nilai)))", "user": "56278266e4b00e49c7cb47d3"}, {"problem": 156, "code": "(fn [v l]\n (loop [m {} cl l]\n  (if (empty? cl)\n   m\n   (recur \n    (assoc m (first cl) v) \n    (rest cl)))))", "user": "4e80d1c8535db62dc21a62b6"}, {"problem": 156, "code": "#(zipmap  %2 (repeat %1))", "user": "56215c8ee4b03f08ee9a921a"}, {"problem": 156, "code": "(fn [a b] (into {} (map (fn [x] [x a]) b)))", "user": "562b1a7be4b058fa18c5a6cb"}, {"problem": 156, "code": "(fn [x coll]\n  (zipmap coll (repeat (count coll) x)))", "user": "562c15d3e4b058fa18c5a6d5"}, {"problem": 156, "code": "(fn [default xs]\n  (zipmap xs (repeat default)))", "user": "5629dfaae4b00e49c7cb4813"}, {"problem": 156, "code": "(fn [default mymap] (zipmap mymap (repeat default)))", "user": "504f0c9ce4b0e7ad84dbc4b2"}, {"problem": 156, "code": "(fn [v coll] (apply hash-map (conj (vec (interpose v coll)) v)))", "user": "53b1db8ee4b047364c044495"}, {"problem": 156, "code": "#(zipmap %2 (vec (replicate (count %2) %1)))", "user": "55fc07d3e4b0f488688e066e"}, {"problem": 156, "code": "(fn[s v ke] (if (empty? ke) s (recur (assoc s (first ke) v) v (rest ke) )) ) {}", "user": "561cad18e4b064ca9f4b169d"}, {"problem": 156, "code": "(fn [x y] (into {} (map #(vector  % x) y)))", "user": "562d7854e4b0a45d2ff8301d"}, {"problem": 156, "code": "(fn [i v] (reduce #(assoc %1 %2 i) {} v))", "user": "4f31ad57e4b0d6649770a089"}, {"problem": 156, "code": "(fn [v indexes] (reduce (fn [ha i] (conj ha {i v})) {} indexes))", "user": "562e8b2be4b0ab312c17ebbb"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (repeat (count ks) v)))", "user": "56308326e4b073c1cf7a9be9"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "535558b9e4b04ce2eb3ed25a"}, {"problem": 156, "code": "(fn \n  [v ks]\n  (reduce #(assoc %1 %2 v) {} ks))", "user": "562fb774e4b0ab312c17ebd9"}, {"problem": 156, "code": "(fn[d ks] (apply merge (map (fn[k]{k d}) ks)))", "user": "561d7246e4b064ca9f4b16b1"}, {"problem": 156, "code": "(fn \n  [defval keys]\n  (let [res {}]\n    (reduce #(assoc %1 %2 defval) res keys)))", "user": "55729a78e4b09a3098a52547"}, {"problem": 156, "code": "(fn [x y] (zipmap y (into [] (take (count y) (repeat x)))))", "user": "562f45e6e4b0ab312c17ebc8"}, {"problem": 156, "code": "(fn [x l]\n  (reduce #(into %1 [[%2 x]]) {} l))", "user": "5626447fe4b00e49c7cb47bd"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55ed9108e4b0121d4835fddc"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55c5b55fe4b0e31453f649b5"}, {"problem": 156, "code": "(fn [dv seqs]\n  (loop [s {} c (count seqs)]\n    (if (= c 0)\n      s\n      (recur (assoc s (nth seqs (- c 1)) dv) (dec c)))))", "user": "561a1af6e4b053970a773b02"}, {"problem": 156, "code": "(fn [df k]\n  (reduce #(assoc %1 %2 df) {} k))", "user": "5630ce72e4b0bfe05bf11786"}, {"problem": 156, "code": "(fn [c coll] (into {} (for [e coll] [e c])))", "user": "5474666ae4b0c51c1f4d7288"}, {"problem": 156, "code": "(fn [x data] (reduce (fn [y z] (conj (hash-map z x) y)) {} data))", "user": "56339e23e4b0bfe05bf117b1"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56252effe4b00a550fc90294"}, {"problem": 156, "code": "(fn map-defaults-solution\n  [dval keythings] ;; update args as needed\n  ;; When retrieving values from a map, you can specify default values in case the key is not found:\n  ;; \n  ;; (= 2 (:foo {:bar 0, :baz 1} 2))\n  ;; \n  ;; However, what if you want the map itself to contain the default values? Write a function which takes a default value and a sequence of keys and constructs a map.\n  (zipmap keythings (repeat dval))\n  )", "user": "536829c8e4b0243289761e8b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "562cd94ee4b0a45d2ff83015"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55c49394e4b0e31453f6499e"}, {"problem": 156, "code": "(fn [d col] (zipmap col (repeat d)))", "user": "56350c87e4b0bfe05bf117c0"}, {"problem": 156, "code": "(fn [v ks]\n  (reduce \n   (fn [m k] (assoc m k v)) \n   {} \n   ks)\n  )", "user": "562fd7f6e4b0ab312c17ebe0"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %))", "user": "5627444fe4b00e49c7cb47cd"}, {"problem": 156, "code": "(fn defaults[default mapkeys]\n  (zipmap mapkeys (repeat default)))", "user": "5632abbee4b0bfe05bf117a7"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1) )", "user": "56283825e4b00e49c7cb47e4"}, {"problem": 156, "code": "(fn[d ks] (reduce (fn[m k](conj m [k d])) {} ks))", "user": "56347285e4b0bfe05bf117bc"}, {"problem": 156, "code": "(fn [v seq] (into {} (for [x seq] {x v})))", "user": "54d352f6e4b0e8a36923e604"}, {"problem": 156, "code": "#(reduce (fn [r v] (conj r [v %1])) {} %2)", "user": "56372798e4b0bfe05bf117d0"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "5604ae27e4b0c80df0ca2663"}, {"problem": 156, "code": "#(into {} (for [i %2] [i %1]))", "user": "563747e9e4b0bfe05bf117d2"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "563a30d7e4b0bfe05bf117f9"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "550f1c99e4b06e50f9beb171"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5632b0a9e4b0bfe05bf117a8"}, {"problem": 156, "code": "(fn [default l] (into {} (map #(hash-map % default) l)))", "user": "55c13e73e4b01b9910ae2a2f"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55d50a38e4b0e31453f64a80"}, {"problem": 156, "code": "(fn [d v]\n  (zipmap v (repeat d)))", "user": "4ede8e1d535d10e5ff6f5339"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %))", "user": "53286f84e4b09d4e7a9b5505"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))\n\n\n\n\n\n;(#(assoc {} %2 %1) 0 [:a :b :c])\n;#(apply hash-map %2 %1)", "user": "5633bb9de4b0bfe05bf117b4"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5587ddd9e4b059ccff29b1ea"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %1)))", "user": "563cf9e5e4b0bfe05bf11844"}, {"problem": 156, "code": "(fn create [value ks]\n  (apply hash-map\n    (reduce concat\n      (map (fn [k] (list k value)) ks)\n    )\n  )\n)", "user": "56393681e4b0bfe05bf117f2"}, {"problem": 156, "code": "#(into {} (map (fn [el] [el %1]) %2))", "user": "4fc524aae4b081705acca37e"}, {"problem": 156, "code": "(fn [v ks]\n  (into {} (map #(vector % v) ks)))", "user": "4e842ebb535db62dc21a62df"}, {"problem": 156, "code": "(fn [default s] \n  (reduce #(assoc %1 %2 default) {} s))", "user": "563ddefee4b0bfe05bf11857"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "561d6467e4b064ca9f4b16ad"}, {"problem": 156, "code": "(fn [dv s] (zipmap s (repeat (count s) dv)))", "user": "56019662e4b04bb52996e190"}, {"problem": 156, "code": "(fn [v keys] (into {} (map #(vector % v) keys)))", "user": "563f1493e4b08d4f616f5ecf"}, {"problem": 156, "code": "(fn [v s]\n  (reduce #(assoc %1 %2 v) {} s))", "user": "53bbae20e4b047364c044509"}, {"problem": 156, "code": "(fn [v xs] (into {} (map #(vector % v) xs)))", "user": "563ed73ae4b08d4f616f5ecb"}, {"problem": 156, "code": "(fn [a b] (apply hash-map (interleave b (repeat a))))", "user": "56324a2de4b0bfe05bf117a0"}, {"problem": 156, "code": "(fn [d coll] (zipmap coll (repeat (count coll) d)))", "user": "563a79e5e4b0bfe05bf117fe"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %)))", "user": "53c7da9ce4b00fb29b2212ad"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "563d3fc8e4b0bfe05bf1184b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5393a2e1e4b0b51d73faaebf"}, {"problem": 156, "code": "(fn [def-value keys]\n  (reduce #(assoc %1 %2 def-value) {} keys))", "user": "50738138e4b054001656acc9"}, {"problem": 156, "code": "(fn [dv lst] (zipmap lst (repeat dv)))", "user": "56058d64e4b08b23635d3169"}, {"problem": 156, "code": "(fn [d ks] (reduce (fn [m k] (assoc m k d)) {} ks))", "user": "56416320e4b08d4f616f5efb"}, {"problem": 156, "code": "(fn [a lis]\n  (into {} (map #(hash-map % a) lis)))", "user": "5191a763e4b0d428d29dc1b4"}, {"problem": 156, "code": "#(into {} (map (fn [k] (vector k %1)) %2))", "user": "54588070e4b01be26fd74620"}, {"problem": 156, "code": "(fn [v ks] (reduce #(conj %1 [%2 v]) {} ks))", "user": "564127a9e4b08d4f616f5ef3"}, {"problem": 156, "code": "(fn [default args] (reduce #(assoc %1 %2 default) {} args))", "user": "54cec2a9e4b018d918be98c1"}, {"problem": 156, "code": "(fn [val coll]\n    (into {} (map #(vector % val) coll)))", "user": "563772a9e4b0bfe05bf117d7"}, {"problem": 156, "code": "(fn fill-map [val keys]\n  (reduce #(assoc %1 %2 val) {} keys))", "user": "5619a388e4b053970a773afc"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56427910e4b08d4f616f5f19"}, {"problem": 156, "code": "(fn [v coll] (let [s (map #(hash-map % v) coll)] (apply merge s)))", "user": "551e2cade4b030e6a24d00e4"}, {"problem": 156, "code": "#(zipmap %2 (map (constantly %1) %2))", "user": "51671557e4b013fc800656c4"}, {"problem": 156, "code": "(fn [v coll] (reduce #(assoc %1 %2 v) {} coll))", "user": "563c0d4ce4b0bfe05bf11831"}, {"problem": 156, "code": "(fn [v s]\n  (zipmap s (repeat v)))", "user": "564583f0e4b0284900eef607"}, {"problem": 156, "code": "(fn [x l]\n  (apply hash-map (mapcat #(vector % x) l)))", "user": "56451201e4b0284900eef600"}, {"problem": 156, "code": "(fn [default coll] (zipmap coll (repeat default)))", "user": "5376190de4b06839e8705e1c"}, {"problem": 156, "code": "(fn [default keys]\n  (loop [m {} k keys]\n    (if (empty? k)\n      m\n      (recur (assoc m (first k) default) (rest k))\n    )\n  )\n)", "user": "5643a11ee4b0018b46ad8bfb"}, {"problem": 156, "code": "#(into {} (for [x %2] [x %1]))", "user": "545e7ab0e4b01be26fd7467c"}, {"problem": 156, "code": "(fn [val keys]\n  (reduce #(assoc %1 %2 val) {} keys))", "user": "56442758e4b0018b46ad8c0a"}, {"problem": 156, "code": "(fn [a-default a-keys]  (reduce merge {} (map (fn [a-key] {a-key a-default}) a-keys)))", "user": "561c57b9e4b064ca9f4b1697"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55577fcce4b0deb715856e24"}, {"problem": 156, "code": "(fn [default ks] (reduce #(assoc %1 %2 default) {} ks))", "user": "545a2da7e4b01be26fd74634"}, {"problem": 156, "code": "(fn [default kys]\n  (reduce #(assoc %1 %2 default) {} kys))", "user": "5628e9f4e4b00e49c7cb47f2"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "56466fb1e4b0284900eef613"}, {"problem": 156, "code": "#(apply hash-map (mapcat list %2 (replicate (count %2) %1)))", "user": "5643ba10e4b0018b46ad8bff"}, {"problem": 156, "code": "#(zipmap %2 (replicate (count %2) %1))", "user": "56441e72e4b0018b46ad8c09"}, {"problem": 156, "code": "(fn [default-value keys] (reduce #(conj %1 {%2 default-value}) {} keys))", "user": "56438342e4b0018b46ad8bf4"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5649d538e4b0284900eef647"}, {"problem": 156, "code": "(fn [value coll]\n   (reduce merge \n\t   (map \n\t     (fn [elem] {elem value}) coll)))", "user": "552281cae4b0882d96d0919f"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54a6645be4b09f271ff37c87"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55b1d0b5e4b0da326a65cf73"}, {"problem": 156, "code": "(fn [n coll] (reduce merge (map #(hash-map %1 n) coll)))", "user": "4e7d5eb8535db169f9c796d6"}, {"problem": 156, "code": "(fn [d v] \n  (into (hash-map) (map (fn [x] [x d]) v)))", "user": "560bb1f7e4b05f002753df20"}, {"problem": 156, "code": "(fn default-map [default-value keys]\n  (reduce #(assoc %1 %2 default-value) {} keys ))", "user": "5645a7d6e4b0284900eef608"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %)))", "user": "56449c90e4b0284900eef5f8"}, {"problem": 156, "code": "(fn map-defaults\n  [value the-seq]\n  (zipmap the-seq (take (count the-seq) (iterate identity value))))", "user": "563fc1f2e4b08d4f616f5ed7"}, {"problem": 156, "code": "(fn [v ks]\n  (apply hash-map (interleave ks (repeat v))))", "user": "562cb7cfe4b0a45d2ff83009"}, {"problem": 156, "code": "(fn [x y] (into {} (for [i y] [i x])))", "user": "564a985be4b0284900eef65c"}, {"problem": 156, "code": "#(loop [v %1 s %2 res {}]\n   (if (empty? s) \n     res\n     (recur v (rest s) (assoc res (first s) v))))", "user": "5600591de4b04bb52996e166"}, {"problem": 156, "code": "#(apply merge (map (fn [key] (hash-map key %1)) %2))", "user": "5647ba2ae4b0284900eef622"}, {"problem": 156, "code": "(fn [default m] (apply hash-map (interleave m (repeat default))))", "user": "56313ff1e4b0bfe05bf1178f"}, {"problem": 156, "code": "(fn [default s]\n  (zipmap s (repeat default)))", "user": "564b495de4b0284900eef667"}, {"problem": 156, "code": "(fn default-map [v keys]\n    (into {} \n         (map (fn [k] [k v]) keys)))", "user": "55380eeae4b09218d5f44fd9"}, {"problem": 156, "code": "(fn [x l]\n  (reduce #(assoc %1 %2 x) {} l)\n  )", "user": "563b9acbe4b0bfe05bf11827"}, {"problem": 156, "code": "(fn f [d s]\n  (reduce (fn [a b] (conj a (hash-map b d))) '{} s))", "user": "563d12f9e4b0bfe05bf11845"}, {"problem": 156, "code": "(fn [a, l] (reduce #(assoc %1 %2 a) {} l))", "user": "4df9d3b0535d04ed9115e77b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54e3a741e4b024c67c0cf7df"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %)))", "user": "562d869be4b0a45d2ff8301f"}, {"problem": 156, "code": "(fn [v c] (zipmap c (repeat (count c ) v)))", "user": "55ff562fe4b00f4cabc57660"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %1)))", "user": "564da567e4b0284900eef682"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "564a4400e4b0284900eef651"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "564d3169e4b0284900eef67c"}, {"problem": 156, "code": "#(loop [ks %2 result {}] (if (empty? ks) result (recur (rest ks) (assoc result (first ks) %1))))", "user": "564b3730e4b0284900eef665"}, {"problem": 156, "code": "(fn myinsert [number coll] (let [x \n                               (repeat (count coll) number) ]\n                       (apply hash-map   (interleave coll x))\n                               ))", "user": "56349008e4b0bfe05bf117bd"}, {"problem": 156, "code": "(fn [n ls]\n  (reduce #(assoc % %2 n) {} ls))", "user": "541ef7e2e4b01498b1a71a92"}, {"problem": 156, "code": "(fn\n  [d ks]\n  (into {} (for [x ks]\n    [x d])))", "user": "5576fee3e4b05c286339e078"}, {"problem": 156, "code": "(fn [v coll] (apply hash-map (interleave coll (repeat v))))", "user": "4f2d90ece4b0d6649770a05f"}, {"problem": 156, "code": "#(apply array-map (mapcat vector %2 (repeat %1)))", "user": "563dfc02e4b0da801c4e4662"}, {"problem": 156, "code": "(fn [v s] (apply merge ((fn [v s] (map (fn [k] (hash-map k v)) s)) v s)))", "user": "564f128de4b0284900eef6a4"}, {"problem": 156, "code": "(fn [x y] (apply merge (map #(hash-map % x) y)))", "user": "56491d05e4b0284900eef63a"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55e732c5e4b050e68259b492"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56521a26e4b0f9d632dd845f"}, {"problem": 156, "code": "(fn [x y] (into {} (map #(vector %1 x) y)))", "user": "5642f094e4b08d4f616f5f1f"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "56441634e4b0018b46ad8c08"}, {"problem": 156, "code": "(fn [default vec] (into {} (for [x vec] {x default})))", "user": "559fb147e4b0acc240e314ea"}, {"problem": 156, "code": "(fn [e l] (into {} (map #(vector % e) l)))", "user": "54227fc6e4b01498b1a71ac0"}, {"problem": 156, "code": "(fn [dv v]\n  (reduce (fn [m k] (assoc m k dv)) {} v))", "user": "5169d422e4b051e2a73aba53"}, {"problem": 156, "code": "(fn [default-value ks] \n  (apply hash-map \n         (interleave ks (repeat default-value))))", "user": "4fc77f5ae4b0ee37620e1821"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "56126d71e4b05f002753df90"}, {"problem": 156, "code": "#(zipmap%2(repeat %1))", "user": "55f48d1be4b06e875b46ce7b"}, {"problem": 156, "code": "(fn [default keys] (into {} (for [k keys] [k default])))", "user": "564a560ae4b0284900eef654"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5653a1cbe4b0f9d632dd8475"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (repeat (count ks) v)))", "user": "5653600ce4b0f9d632dd8471"}, {"problem": 156, "code": "(fn [default ks]\n  (loop [m {}\n         ks ks]\n    (if (first ks)\n      (recur (assoc m (first ks) default)\n             (rest ks))\n      m)))", "user": "55f43fe7e4b06e875b46ce6b"}, {"problem": 156, "code": "(fn addKey [default ve] \n  (into {} (for [x ve] (conj {} [x default])))\n)", "user": "56405959e4b08d4f616f5ee1"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "560de00fe4b05f002753df45"}, {"problem": 156, "code": "(fn [default-value coll]\n  (apply hash-map(interleave coll(repeat default-value))))", "user": "560978d0e4b0053d1b86c7de"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56497a73e4b0284900eef642"}, {"problem": 156, "code": "(fn [d s] (reduce #(assoc %1 %2 d) {} s))", "user": "5654d0e1e4b0f9d632dd848c"}, {"problem": 156, "code": "(fn __ [value keys]\n  (apply hash-map (apply concat (map (fn [x] [x value]) keys))))", "user": "564ecc9ee4b0284900eef6a1"}, {"problem": 156, "code": "#(into {} (for [i %2] [i %]))", "user": "53d0c3c9e4b00fb29b22130a"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5632d1b3e4b0bfe05bf117a9"}, {"problem": 156, "code": "(fn [v k] (reduce merge (map #(hash-map % v) k)))", "user": "513e39f9e4b02b2a3d8235bd"}, {"problem": 156, "code": "(fn [k v] (apply merge (map #(hash-map %1 k) v)))", "user": "5654e024e4b0f9d632dd848d"}, {"problem": 156, "code": "#(loop[n 0, m []]\n   (if(= n (count %2))\n     (apply array-map m)\n     (recur(inc n)(conj (conj m (nth %2 n)) %1))))", "user": "5654e8ade4b0f9d632dd848e"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %)))", "user": "56561119e4b0f9d632dd849d"}, {"problem": 156, "code": "(fn [default s]\n\t(zipmap s (repeat default))  \n  )", "user": "56040e58e4b0c80df0ca2654"}, {"problem": 156, "code": "(fn [v k](apply merge (map #(hash-map % v) k)))", "user": "564b1ff8e4b0284900eef663"}, {"problem": 156, "code": "(fn [d l] (reduce\n    (fn [nl el] (conj nl {el (get el l d)}))\n    {}\n    l\n  )\n)", "user": "5625f678e4b00e49c7cb47b8"}, {"problem": 156, "code": "(fn [e v] (loop [v v, m {}]\n            (if (seq v)\n              (recur (rest v) (assoc m (first v) e))\n              m)))", "user": "54ca93abe4b057c6fda3a264"}, {"problem": 156, "code": "(fn [default keys]\n   (into {}\n         (for [key keys]\n           [key default])))", "user": "561a9380e4b053970a773b07"}, {"problem": 156, "code": "#(into (hash-map) (for [k %2 :let [r {k, %1}]] r))", "user": "55a03d7de4b0acc240e314f4"}, {"problem": 156, "code": "(fn [v s]\n  (zipmap s (repeat v)))", "user": "56532ff4e4b0f9d632dd846e"}, {"problem": 156, "code": "(fn [k vs]\n   (zipmap  vs (repeat (count vs) k))\n)", "user": "5649615be4b0284900eef641"}, {"problem": 156, "code": "(fn [default in-keys]\n  (loop\n    [res {}\n     keylist in-keys]\n    (if (empty? keylist)\n      res\n      (recur (merge res {(first keylist) default}) (rest keylist)))))", "user": "5658d775e4b00d3155796114"}, {"problem": 156, "code": "(fn [xval xlist]\n  (reduce (fn [x y]\n            (assoc x y xval))\n          {} xlist))", "user": "56038f34e4b04bb52996e1bc"}, {"problem": 156, "code": "(fn [default k] (reduce #(assoc % %2 default) {} k))", "user": "5658acabe4b0f9d632dd84b7"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5658eaa0e4b00d3155796115"}, {"problem": 156, "code": "(fn [d, keys] (into {} (map #(vector %1 %2) keys (repeat (count keys) d))))", "user": "55507a1ae4b00713264bd9a7"}, {"problem": 156, "code": "#(apply assoc (cons {} (interleave %2 (for [_ (range (count %2))] %1))))", "user": "56588f4ee4b0f9d632dd84b6"}, {"problem": 156, "code": "(fn [c0 lst] (reduce #(conj %1 (hash-map %2 c0)) {} lst))", "user": "544285dde4b032a45b869380"}, {"problem": 156, "code": "(fn [default keys]\n      (reduce (fn [res cur]\n                (conj res {cur default}))\n              {}\n              keys)\n      )", "user": "5658b9bde4b00d315579610e"}, {"problem": 156, "code": "#(reduce (fn [o i] (merge o {i %1})) {} %2)", "user": "5651de3ee4b0f9d632dd845b"}, {"problem": 156, "code": "(fn [x y] (into {} (for [i y]  {i x})))", "user": "55d80befe4b0e31453f64aae"}, {"problem": 156, "code": "#(reduce (fn [acc x] (assoc acc x %1)) {} %2)", "user": "5516a874e4b06a49daca83b5"}, {"problem": 156, "code": "(fn [dv ks] (into {} (map (fn [k] [k dv]) ks)))", "user": "53bd7080e4b0d9a98559a6d1"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5654cb2de4b0f9d632dd848b"}, {"problem": 156, "code": "(fn [d c]\n  (zipmap c (repeat d)))", "user": "56504dc2e4b0284900eef6bc"}, {"problem": 156, "code": "(fn f [x l] (if (empty? l) {} (assoc (f x (rest l)) (first l) x)))", "user": "565e0934e4b068f2fe63dc30"}, {"problem": 156, "code": "(fn [arg1 arg2]\n(cond\n(and true (= arg2 [:a :b :c])) {:a 0, :b 0, :c 0}\n(and true (= arg2 [1 2 3])) {1 \"x\", 2 \"x\", 3 \"x\"}\n(and true (= arg2 [:foo :bar])) {:foo [:a :b], :bar [:a :b]}\n))", "user": "565f2461e4b068f2fe63dc3b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54fce8bde4b07d26eda61d30"}, {"problem": 156, "code": "(fn [value sq] (reduce conj (map #(hash-map % value) sq)))", "user": "56446954e4b0284900eef5f4"}, {"problem": 156, "code": "(fn [default key-list]\n  (loop [keys-left key-list\n         result {}]\n    (if (empty? keys-left) result\n      (recur (rest keys-left) (conj result [(first keys-left) default])))))", "user": "562c2fc2e4b058fa18c5a6d7"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "565faf46e4b068f2fe63dc44"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "530e9bd6e4b08068f379ecbe"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56618ddfe4b068f2fe63dc6a"}, {"problem": 156, "code": "(fn [k coll] (into {} (map #(assoc {} % k) coll)))", "user": "559ff9eee4b0acc240e314ee"}, {"problem": 156, "code": "(fn [default coll]\n  (reduce #(assoc  %1 %2 default) {} coll)\n )", "user": "56004deee4b04bb52996e164"}, {"problem": 156, "code": "(fn [def_val keys] (into {} (for [x keys] {x def_val})))", "user": "546a6fd8e4b00cfc9eacc158"}, {"problem": 156, "code": "(fn [i v]\n     (zipmap v (repeat (count v) i)))", "user": "5656e039e4b0f9d632dd84a3"}, {"problem": 156, "code": "(fn [v k]\n  (apply merge (map #(assoc {} % v) k )\n  ))", "user": "5650ac8be4b0284900eef6c2"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "564348e1e4b08d4f616f5f26"}, {"problem": 156, "code": "(fn [arg1 arg2]\n(cond\n(and true (= arg2 [:a :b :c])) {:a 0, :b 0, :c 0}\n(and true (= arg2 [1 2 3])) {1 \"x\", 2 \"x\", 3 \"x\"}\n(and true (= arg2 [:foo :bar])) {:foo [:a :b], :bar [:a :b]}\n))", "user": "5666bf34e4b04acd4f672dc2"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "566639f4e4b0e91d5f5c566b"}, {"problem": 156, "code": "#(into {} (for [x %2] {x %}))", "user": "54c6ad6ae4b045293a27f62f"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (repeat (count ks) v)))", "user": "56662275e4b0e91d5f5c566a"}, {"problem": 156, "code": "(fn [v ks]\n  (reduce #(assoc %1 %2 v) {} ks))", "user": "563f24f9e4b08d4f616f5ed0"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56658570e4b0e91d5f5c565f"}, {"problem": 156, "code": "(fn [x m] (zipmap m (repeat x)))", "user": "546c1375e4b00cfc9eacc173"}, {"problem": 156, "code": "#(zipmap (reverse %2) (repeat (count %2) %1))", "user": "566734c4e4b04acd4f672dcc"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "5661b0a9e4b068f2fe63dc6f"}, {"problem": 156, "code": "(fn [d s]\n  (reduce \n   (fn [a b]\n     (merge {b d} a)) {} s))", "user": "565233f2e4b0f9d632dd8461"}, {"problem": 156, "code": "#(apply hash-map (apply concat (map vector %2 (repeat %1))))", "user": "56679f30e4b04acd4f672dda"}, {"problem": 156, "code": "(fn [default keys-given] \n  (loop [m {} k keys-given]\n    (if (empty? k)\n      m\n      (recur (assoc m (first k) default) (rest k)))))", "user": "5668aad0e4b04acd4f672df5"}, {"problem": 156, "code": "(fn [v coll]\n  (reduce #(assoc % %2 v) {} coll))", "user": "4ff6018de4b0678c553fc373"}, {"problem": 156, "code": "(fn [default keez] (zipmap keez (repeat (count keez) default)))", "user": "4f71ac00e4b07046d9f4f010"}, {"problem": 156, "code": "(fn [val keys]\n  (into {} (map #(vector %1 val) keys)))", "user": "543f854fe4b032a45b86935b"}, {"problem": 156, "code": "(fn [v s]\n  (zipmap s (repeat (count s) v)))", "user": "566a6e38e4b0a866af68969b"}, {"problem": 156, "code": "(fn [value vect]\n  (reduce #(conj %1 [%2 value]) {} vect)\n  )", "user": "549ffeade4b0f3d1d8e70fb2"}, {"problem": 156, "code": "(fn [v m] (zipmap m (repeat v)))", "user": "566064cae4b068f2fe63dc50"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "565b2fa5e4b068f2fe63dbfe"}, {"problem": 156, "code": "#(into {} (for [x %2] [x %1]))", "user": "55ed37ebe4b0121d4835fdd6"}, {"problem": 156, "code": "(fn [default my-keys] (->> my-keys (interpose default) (vec) (#(conj % default)) (apply sorted-map)))", "user": "55c5bdffe4b0e31453f649b6"}, {"problem": 156, "code": "(fn [default ks] (reduce #(assoc %1 %2 default) {} ks))", "user": "5006c169e4b0678c553fc48d"}, {"problem": 156, "code": "(fn [v coll]\n  (into {} (for [x coll] {x v})))", "user": "566c0cc2e4b0a866af6896bb"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %1)))", "user": "54c5cc17e4b045293a27f624"}, {"problem": 156, "code": "(fn map-with-defaults [init coll]\n  (zipmap coll (repeat (count coll) init)))", "user": "5666500ee4b0e91d5f5c566d"}, {"problem": 156, "code": "(fn [n l] (zipmap l(repeat n)))", "user": "566d8c43e4b0a866af6896cc"}, {"problem": 156, "code": "(fn [d ks]\n  (reduce (fn [acc x] (into acc [[x d]]))\n          {}\n          ks))", "user": "56483562e4b0284900eef629"}, {"problem": 156, "code": "(fn [v ks] (reduce #(assoc %1 %2 v) {} ks))", "user": "566669d8e4b0e91d5f5c566f"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56540485e4b0f9d632dd847a"}, {"problem": 156, "code": "#(reduce (fn [x y](assoc x y %1 )) {} %2)", "user": "564e719ee4b0284900eef69b"}, {"problem": 156, "code": "(fn [v k] (zipmap (reverse k) (vector v v v)))", "user": "566e55fce4b0a866af6896d7"}, {"problem": 156, "code": "(fn [default-value key-seq]\n  (into {} (for [k key-seq]\n             [k default-value])))", "user": "54ee34c2e4b024c67c0cf870"}, {"problem": 156, "code": "(fn [default-value key-vector] (reduce #(assoc %1 %2 default-value) {} key-vector))", "user": "52229374e4b0e6a83c892600"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (repeat (count ks) v)))", "user": "56705858e4b0a866af6896ef"}, {"problem": 156, "code": "(fn [x coll] (into {} (map #(assoc {} % x) coll)))", "user": "567072fbe4b0a866af6896f3"}, {"problem": 156, "code": "(fn [v m] (zipmap m (repeat v)))", "user": "56669819e4b0e91d5f5c5674"}, {"problem": 156, "code": "(fn [d m]\n  (into {}\n    (for [k m]\n     [k d])))", "user": "5640eb50e4b08d4f616f5eec"}, {"problem": 156, "code": "(fn [df kys]\n  (zipmap kys (repeat (count kys) df)))", "user": "5670ef43e4b0a866af6896fc"}, {"problem": 156, "code": "(fn [v list](reduce #(assoc %1 %2 v) {} list))", "user": "5669eb9ae4b04acd4f672e02"}, {"problem": 156, "code": "(fn [v k] (reduce #(assoc %1 %2 v) {} k))", "user": "564a5a09e4b0284900eef656"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %1)))", "user": "5674f874e4b05957ce8c6144"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "509a25b7e4b0efbae1fbc0a8"}, {"problem": 156, "code": "(fn [default sequen]\n  (reduce\n   #(conj %1 {%2 default})\n   {}\n   sequen))", "user": "56732c84e4b05957ce8c611c"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %1)))", "user": "56754c4be4b05957ce8c6149"}, {"problem": 156, "code": "(fn [vals keys] (zipmap keys (repeat vals)))", "user": "567476bde4b05957ce8c6139"}, {"problem": 156, "code": "#(loop [key (first %2) keys (rest %2) result {}]                                                                                                                                                                                                         \n                (if (nil? key)                                                                                                                                                                                                                                       \n                    result                                                                                                                                                                                                                                           \n                    (recur (first keys) (rest keys) (merge result {key %1}))                                                                                                                                                                                         \n                )                                                                                                                                                                                                                                                    \n            )", "user": "56667178e4b0e91d5f5c5671"}, {"problem": 156, "code": "(fn [def-val lst]\n  (loop [m {}, l lst]\n    (if (empty? l)\n        m\n        (recur\n          (conj m {(first l) def-val})\n          (rest l)))))", "user": "567695c2e4b05957ce8c6157"}, {"problem": 156, "code": "(fn [default sequenc] \n  (loop [d default m {} s sequenc] \n    (if (empty? s) m\n    \t(recur d (assoc m (first s) d) (rest s) ))))", "user": "5675f2f4e4b05957ce8c6153"}, {"problem": 156, "code": "(fn [v xs]\n              (reduce #(assoc %1 %2 v) {} xs))", "user": "4f9aa2a6e4b0dcca54ed6d0c"}, {"problem": 156, "code": "(fn [d c]\n  (->> d (repeat 3) (interleave c) (apply hash-map)))", "user": "5676af21e4b05957ce8c6158"}, {"problem": 156, "code": "(fn [x y] (apply conj (for [k y] {k x})))", "user": "566bd453e4b0a866af6896b7"}, {"problem": 156, "code": "#(into {} (map (fn [x] [x %]) %2))", "user": "52d9ba39e4b09f7907dd13af"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5673c91fe4b05957ce8c6124"}, {"problem": 156, "code": "(fn [value m] ( reduce #(assoc %1 %2 value) {} m) )", "user": "567798afe4b05957ce8c6169"}, {"problem": 156, "code": "(fn [val keys] (reduce #(assoc %1 %2 val) {} keys))", "user": "56548885e4b0f9d632dd8483"}, {"problem": 156, "code": "#(apply hash-map (conj (into [] (interpose %1 %2)) %1))", "user": "53307a23e4b019098a6f8b5d"}, {"problem": 156, "code": "#(into (sorted-map) (map vector %2 (vec (repeat (count %2) %1))))", "user": "566caad9e4b0a866af6896c0"}, {"problem": 156, "code": "(fn [x y] (zipmap y (repeat x)))", "user": "4fe98e07e4b0547ebccb2464"}, {"problem": 156, "code": "(fn [v m] (zipmap m (repeat v)))", "user": "566efb2be4b0a866af6896e2"}, {"problem": 156, "code": "(fn create-map [v ks]\n  (apply hash-map (mapcat identity (for [x ks] [x v]))))", "user": "5649b1b0e4b0284900eef646"}, {"problem": 156, "code": "(fn [val keys] \n  (zipmap keys (repeat val)))", "user": "56781f16e4b05957ce8c6173"}, {"problem": 156, "code": "(fn [default-value mapping-keys]\n       (letfn [(mapping-default\n               [innter-default-value inner-mapping-keys]\n               (if (not (= (count inner-mapping-keys) 0))\n                 (assoc\n                   (mapping-default innter-default-value (rest inner-mapping-keys))\n                   (first inner-mapping-keys)\n                   innter-default-value)))]\n         (mapping-default default-value mapping-keys)))", "user": "4e6a8d28535d8ccf87e9fef5"}, {"problem": 156, "code": "(fn [val keys] (reduce (fn [m key] (assoc m key val)) {} keys))", "user": "5679a4d0e4b05957ce8c618d"}, {"problem": 156, "code": "(fn [default keys] (reduce (fn [xs x] (conj xs {x default})) {} keys))", "user": "567d132ee4b05957ce8c61c3"}, {"problem": 156, "code": "(fn md [d k] (reduce (fn [m k] (assoc m k d)) {} k))", "user": "56771b31e4b05957ce8c6163"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "56706f01e4b0a866af6896f2"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "54aa2462e4b09f271ff37cb4"}, {"problem": 156, "code": "(fn foo [default pkeys]\n  (when (not-empty  pkeys)\n  \t  (merge {(first pkeys) default} (foo default (rest pkeys)))))", "user": "566df171e4b0a866af6896d2"}, {"problem": 156, "code": "(fn [d s] \n  (reduce \n   (fn [a b] \n     (conj a {b d})\n   ) \n   {} \n   s\n  )\n)", "user": "567b9ff7e4b05957ce8c61a9"}, {"problem": 156, "code": "(fn [v coll] (reduce #(assoc %1 %2 v) {} coll))", "user": "567ea95de4b0feffd0d18eb6"}, {"problem": 156, "code": "(fn [default-value seq']\n  (reduce \n   #(conj %1 [%2 default-value])\n   {} seq'))", "user": "567bf820e4b05957ce8c61ad"}, {"problem": 156, "code": "(fn [v ks]\n  (into {}\n    (for [k ks]\n      [k v]\n    )))", "user": "567ea403e4b0feffd0d18eb5"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "567cef8ce4b05957ce8c61c1"}, {"problem": 156, "code": "(fn [v coll] (reduce #(assoc %1 %2 v) {} coll))", "user": "5673f804e4b05957ce8c6126"}, {"problem": 156, "code": "#(into {} (map (fn [e] (hash-map e %)) %2))", "user": "567b2f20e4b05957ce8c61a2"}, {"problem": 156, "code": "(fn [def-val coll] (into {} (map (fn [v] [v def-val]) coll)))", "user": "56739bdce4b05957ce8c6122"}, {"problem": 156, "code": "#(into {} (for [a %2] {a %}))", "user": "565fe49ee4b068f2fe63dc46"}, {"problem": 156, "code": "(fn [a l] (reduce (fn [m x] (assoc m x a)) {} l))", "user": "567b39b6e4b05957ce8c61a3"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "56814ccbe4b0945ebc182a82"}, {"problem": 156, "code": "(fn [d ks] (reduce #(conj %1 [%2 d]) {} ks))", "user": "568227fee4b0945ebc182a8a"}, {"problem": 156, "code": "(fn [k c]\n  (loop [result {}\n         remaining c]\n    (if (empty? remaining)\n      result \n      (recur (into result [[(first remaining) k]]) (rest remaining)))))", "user": "56646a7fe4b0e91d5f5c5657"}, {"problem": 156, "code": "(fn f [dv coll] \n  (if (empty? coll) {}\n    (assoc (f dv (rest coll)) (first coll) dv)\n  )\n)", "user": "5680fff3e4b0966858e4d8f6"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56814cbce4b0945ebc182a81"}, {"problem": 156, "code": "(fn dflt [d k] (if (empty? k) {} (assoc (dflt d (rest k)) (first k) d)))", "user": "56800ba1e4b0966858e4d8e8"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %)))", "user": "5680104ae4b0966858e4d8ea"}, {"problem": 156, "code": "(fn [x y] (into {} (map #(vector % x) y)))", "user": "568242bfe4b0945ebc182a8f"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "56810479e4b0966858e4d8f8"}, {"problem": 156, "code": "(fn [d m]\n  (zipmap m (repeat d)))", "user": "524b90fae4b09eba1c0223df"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "56826ebce4b0945ebc182a93"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56743413e4b05957ce8c612e"}, {"problem": 156, "code": "#(zipmap %2 (vec (repeat (count %2) %)))", "user": "528e7740e4b0239c8a67aee0"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "543b4746e4b032a45b86932c"}, {"problem": 156, "code": "(fn f [v ks] (into {} (map #(vector % v) ks)))", "user": "5681afaae4b0945ebc182a87"}, {"problem": 156, "code": "(fn [v ks] (reduce #(assoc %1 %2 v) {} ks))", "user": "508f4343e4b0ea685a20f767"}, {"problem": 156, "code": "(fn [k v]\n  (into {}\n        (map #(assoc {} % k) v)))", "user": "56853a7ce4b04eec3ec5cfc9"}, {"problem": 156, "code": "(fn [k v]\n  (into {}\n    (map #(vector % k) v)))", "user": "564dc062e4b0284900eef68c"}, {"problem": 156, "code": "(fn [x coll] (zipmap coll (repeat x)))", "user": "5684e200e4b04eec3ec5cfc4"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %)))", "user": "56784adbe4b05957ce8c6176"}, {"problem": 156, "code": "(fn [default-value, map-keys] \n  (loop [source map-keys result-map {}]\n    (if (empty? source)\n      result-map\n      (recur (next source) (assoc result-map (first source) default-value)))))", "user": "56798d83e4b05957ce8c618b"}, {"problem": 156, "code": "(fn f [k m] (into {} (map #(vector % k) m)))", "user": "5683d2a9e4b0945ebc182aa0"}, {"problem": 156, "code": "(fn [v coll]\n  (reduce #(conj %1 [%2 v]) {} coll))", "user": "55f4ef68e4b06e875b46ce82"}, {"problem": 156, "code": "(fn [default ks] \n   (into {} (map #(hash-map % default) ks)))", "user": "545bc5a8e4b01be26fd74658"}, {"problem": 156, "code": "#(loop [v %2 m {}]\n   (if (empty? v)\n     m\n     (recur (rest v) (assoc m (first v) %1))))", "user": "56815e2fe4b0945ebc182a84"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5686b7c7e4b0dcc4269f4057"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5686e652e4b0dcc4269f4059"}, {"problem": 156, "code": "#(into (hash-map) (for [x %2] [x %1]))", "user": "568513c4e4b04eec3ec5cfc5"}, {"problem": 156, "code": "#(zipmap %2 (vec (repeat (count %2)%1)))", "user": "56874171e4b0dcc4269f405c"}, {"problem": 156, "code": "(fn [x y] (zipmap y (repeat x)))", "user": "5688a693e4b0dcc4269f406f"}, {"problem": 156, "code": "(fn [v keys] (into {} (map (fn [x] [x v]) keys)))", "user": "55ee7977e4b0121d4835fdee"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5275f7a2e4b03e8d9a4a74d0"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5687fe58e4b0dcc4269f4065"}, {"problem": 156, "code": "(fn [d v]\n  (reduce #(assoc %1 %2 d) {} v))", "user": "54e6762be4b024c67c0cf809"}, {"problem": 156, "code": "(fn [v k] (zipmap k (repeat v)))", "user": "55b11716e4b002ce9d5cbc2c"}, {"problem": 156, "code": "(fn [default all-keys] (apply merge (map (fn [one-key] (hash-map one-key default)) all-keys)))", "user": "56066e82e4b08b23635d3173"}, {"problem": 156, "code": "(fn [default-value key-coll] (loop [default-value default-value key-coll key-coll map-coll (hash-map)]\n                               (if (empty? key-coll)\n                                 map-coll\n                                 (recur default-value (rest key-coll) (conj map-coll {(first key-coll) default-value}))\n                                 )\n                               )\n  )", "user": "56885c32e4b0dcc4269f4068"}, {"problem": 156, "code": "(fn default-vals [d ks] (zipmap ks (repeat (count ks) d)))", "user": "56481722e4b0284900eef628"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "4fd5418ee4b0d4de60cee372"}, {"problem": 156, "code": "(fn defal [d m]\n  (reduce #(assoc %1 %2 d) {} m))", "user": "5689fd03e4b0dcc4269f4088"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %)))", "user": "5673c886e4b05957ce8c6123"}, {"problem": 156, "code": "(fn [value coll] \n     (into {} (for \n       [y coll] \n       {y value})))", "user": "567d18c9e4b05957ce8c61c4"}, {"problem": 156, "code": "(fn [v ks] (into {} (map vector ks (repeat v))))", "user": "56897739e4b0dcc4269f407d"}, {"problem": 156, "code": "(fn [default xs] (zipmap xs (repeat default)))", "user": "5672a711e4b05957ce8c6117"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "567c48e6e4b05957ce8c61b8"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "55664bb5e4b0c656e3ff1833"}, {"problem": 156, "code": "(fn [v k] (reduce (fn [m n] (assoc m n v)) {} (seq k)))", "user": "5673881fe4b05957ce8c6120"}, {"problem": 156, "code": "(fn [d s]\n  (zipmap s (repeat d)))", "user": "567f2bc6e4b0feffd0d18ebb"}, {"problem": 156, "code": "#(into {} (for [k %2] {k %1}))", "user": "4ddf597a535d08e6dec9fddf"}, {"problem": 156, "code": "(fn [x xs] (zipmap xs (repeat (count xs) x)))", "user": "568c2d96e4b0dcc4269f40af"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %1)))", "user": "562fbf87e4b0ab312c17ebdb"}, {"problem": 156, "code": "(fn [dv sk] (apply merge (map #(hash-map % dv) sk) ))", "user": "56791447e4b05957ce8c6183"}, {"problem": 156, "code": "(fn [dflt sqnc]\n  (apply conj {} (map (fn [itm] {itm dflt}) sqnc)))", "user": "566f3e18e4b0a866af6896e7"}, {"problem": 156, "code": "(fn [default ks]\n  (apply hash-map (interleave ks (repeat default))))", "user": "52213426e4b0e6a83c8925c4"}, {"problem": 156, "code": "(fn [val, keys]\n  (reduce (fn[map, key]\n            (assoc map key val)) {} keys))", "user": "55f85b93e4b03cbcff9738ae"}, {"problem": 156, "code": "(fn defX [d x] (zipmap x (repeat (count x) d)))", "user": "568820e8e4b0dcc4269f4067"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "568e450fe4b0dcc4269f40d0"}, {"problem": 156, "code": "#(apply conj (for [x %2] {x %1}))", "user": "5651654be4b0f9d632dd845a"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "4ed0e139535d44c135fd68c7"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat (count %2) %1)))", "user": "568e1871e4b0dcc4269f40cc"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "4ff8487be4b0678c553fc397"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "52e1c276e4b09f7907dd142b"}, {"problem": 156, "code": "(fn\n  [defv lst] \n  (reduce (fn [a b] (conj a {b defv}))\n          {}\n          lst))", "user": "5693383fe4b0dcc4269f4100"}, {"problem": 156, "code": "(fn [a b]\n  (reduce #(assoc % %2 a) {} b))", "user": "55a0d79fe4b0acc240e31502"}, {"problem": 156, "code": "#(into {} (map (fn [x] [x %1]) %2))", "user": "569381a5e4b0dcc4269f4104"}, {"problem": 156, "code": "#(apply merge (for [x %2] (assoc nil x %1)))", "user": "5688a01be4b0dcc4269f406d"}, {"problem": 156, "code": "(fn [v ks] (reduce #(assoc %1 %2 v) {} ks))", "user": "568c92c6e4b0dcc4269f40b8"}, {"problem": 156, "code": "#(apply array-map (loop [s %2, r []]\n\t\t\t\t\t(if (empty? s)\n\t\t\t\t\t\tr\n\t\t\t\t\t\t(recur (rest s) (conj r (first s) %1)))\n\t\t\t\t\t))", "user": "568cea39e4b0dcc4269f40bc"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (repeat v)))", "user": "5130c26fe4b08c712d3fae3a"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "568bddaee4b0dcc4269f40aa"}, {"problem": 156, "code": ";(fn \n;  [val vec]\n;  (loop [remaining vec final {}]\n;    (if (empty? remaining)\n;      final\n;      (let [[thing & remmy] remaining]\n;        (recur remmy\n;               (into final \n;                     (hash-map thing val)))))))\n\n  \n\n;(fn \n;  [val vec]\n;  (reduce \n;   (fn [final thing2]\n;     (into final (hash-map thing2 val)))\n;   {} vec))\n\n(fn [x v]\n  (reduce\n   #(into %1 (hash-map %2 x)) {} v))", "user": "564ba493e4b0284900eef669"}, {"problem": 156, "code": "(fn [v k] \n  (reduce #(conj %1 {%2 v}) {} k)\n)", "user": "550345fee4b086ebe8a79c6c"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %1)))", "user": "5657fed1e4b0f9d632dd84ae"}, {"problem": 156, "code": "(fn [defval init-keys]\n  (loop [res {}, key init-keys]\n    (if (empty? key)\n      res\n      (recur \n        (assoc res (first key) defval)\n        (rest key))\n      )))", "user": "56585dbce4b0f9d632dd84b3"}, {"problem": 156, "code": "(fn [a xs] (apply hash-map (interleave xs (repeat a))))", "user": "56967bc0e4b0dcc4269f4131"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56193c6ee4b053970a773af2"}, {"problem": 156, "code": "(fn [x m] (apply conj (map #(hash-map %1 x) m)))", "user": "5379b723e4b06839e8705e57"}, {"problem": 156, "code": "(fn [x a-seq]\n  (reduce #(assoc %1 %2 x) {} a-seq) )", "user": "56795625e4b05957ce8c6186"}, {"problem": 156, "code": "(fn map-defaults [defaults kys]\n    (reduce #(assoc %1 %2 defaults) {} kys))", "user": "552bd5c2e4b0ffed3738f969"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5688d6a8e4b0dcc4269f4071"}, {"problem": 156, "code": "#(zipmap %2 (repeat 5 %1))", "user": "569c40cee4b0542e1f8d1462"}, {"problem": 156, "code": "(fn [x y] (apply merge (map #(hash-map % x) y)))", "user": "56990b68e4b0542e1f8d143a"}, {"problem": 156, "code": "(fn [v keys]\n  (into {} (apply vector (map (fn [x y] [x y]) keys (repeat v)))))", "user": "5637557ce4b0bfe05bf117d4"}, {"problem": 156, "code": "(fn [d l] (apply conj (map #(hash-map % d) l) ))", "user": "56979bb7e4b0e0b3d3318cac"}, {"problem": 156, "code": "(fn [d l] (into {} (map (fn [x] [x d]) l)))", "user": "562add6de4b00e49c7cb4834"}, {"problem": 156, "code": "(fn [value keys]\n  (apply hash-map (apply concat\n    (map #(list % value) keys)\n  )))", "user": "562d15a6e4b0a45d2ff83019"}, {"problem": 156, "code": "(fn map-defaults [v coll]\n  (reduce #(assoc % %2 v) {} coll))", "user": "5693a53ee4b0dcc4269f4106"}, {"problem": 156, "code": "(fn [defValue keys]\n\t(reduce (fn [acc key] (assoc acc key defValue)) {} keys))", "user": "56936547e4b0dcc4269f4101"}, {"problem": 156, "code": "(fn [v seq] (reduce #(conj %1 [%2 v]) {} seq))", "user": "55e206f3e4b050e68259b429"}, {"problem": 156, "code": "(fn [n keys] (apply hash-map (reduce concat (for [k keys] [k n]))))", "user": "4eb47bb1535d7eef30807362"}, {"problem": 156, "code": "(fn build-default-map [v lst] (reduce (fn expand-assoc [m k] (assoc m k v)) {} lst))", "user": "56912f93e4b0dcc4269f40ef"}, {"problem": 156, "code": "(fn [val keys] (zipmap keys (repeat (count keys) val)))", "user": "5002c798e4b0678c553fc42d"}, {"problem": 156, "code": "#(into {} (for [x %2] {x %1}))", "user": "569ed6a8e4b0542e1f8d1489"}, {"problem": 156, "code": "(fn [d keys] (zipmap keys (vec( repeat (count keys) d ) ) ))", "user": "55c2367ee4b0e31453f64978"}, {"problem": 156, "code": "(fn [a b] (reduce merge (map #(assoc {} % a) b)))", "user": "563dfeffe4b0da801c4e4663"}, {"problem": 156, "code": "(fn [d v]\n  (apply conj (map (fn [x] {x d}) v))\n  )", "user": "569f8736e4b0542e1f8d1495"}, {"problem": 156, "code": "(fn [v coll]\n  (into {} (for [x coll] {x v})))", "user": "569ce6fee4b0542e1f8d146c"}, {"problem": 156, "code": "(fn [defaulValue sequenceOfKeys]\n  (zipmap sequenceOfKeys (repeat (count sequenceOfKeys) defaulValue) )\n)", "user": "551acc5ae4b07993ea3788c4"}, {"problem": 156, "code": "(fn [n xs]\n  (apply assoc {} (#(interleave %2 (repeat %1)) n xs)))", "user": "569ad037e4b0542e1f8d144f"}, {"problem": 156, "code": "(fn [default arr] (into {} (map #(hash-map % default) arr)))", "user": "55dd7f72e4b050e68259b3c4"}, {"problem": 156, "code": "(fn [default keys]\n  (into {} (map #(vector % default) keys)))", "user": "56a0a85fe4b0542e1f8d14a5"}, {"problem": 156, "code": "(fn [value coll] (reduce (fn [map key] (assoc map key value)) {} coll))", "user": "56a0d7e5e4b0542e1f8d14a8"}, {"problem": 156, "code": "(fn [v k]\n  (zipmap k (lazy-seq (take (count k) (repeat v))))\n  )", "user": "5600bed5e4b04bb52996e170"}, {"problem": 156, "code": "(fn [d m] (loop [r {} v m]\n             (if (empty? v) \n               r\n               (recur (assoc r (first v) d) (rest v)))))", "user": "569ff6dbe4b0542e1f8d149c"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5591cc56e4b0604b3f94d582"}, {"problem": 156, "code": "(fn [d ks]\n  (into {} (map (fn [k] [k d]) ks)))", "user": "56903cb9e4b0dcc4269f40eb"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "569adec2e4b0542e1f8d1450"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56a1c646e4b0542e1f8d14b3"}, {"problem": 156, "code": "(fn [default vect]\n  (zipmap (reverse vect) (repeat default)))", "user": "5689bd04e4b0dcc4269f4082"}, {"problem": 156, "code": "#(apply hash-map(interleave %2 (repeat %1)))", "user": "569951e4e4b0542e1f8d143e"}, {"problem": 156, "code": "(fn\n  [newValue coll]\n  (into {}\n    (for [k  coll] [k newValue])))", "user": "5697fda8e4b0542e1f8d142c"}, {"problem": 156, "code": "(fn [d ks]\n  (into {} (map vector ks (repeat d))))", "user": "56012cd7e4b04bb52996e17d"}, {"problem": 156, "code": "(fn [v ks] (reduce #(assoc %1 %2 v) {} ks))", "user": "565f8fd2e4b068f2fe63dc41"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "56877fcbe4b0dcc4269f405e"}, {"problem": 156, "code": "(fn [x y] (reduce #(assoc %1 %2 x) {} y))", "user": "55f9b2b6e4b03cbcff9738c8"}, {"problem": 156, "code": "(fn [x coll]\n  (reduce #(conj %1 [%2 x]) {} coll))", "user": "5576961be4b05c286339e06f"}, {"problem": 156, "code": "#(zipmap %2 (take (count %2) (repeat %1)))", "user": "559e38b2e4b08a52bd4f97d2"}, {"problem": 156, "code": "(fn [default seq] \n  (zipmap seq (repeat default)))", "user": "55a505dde4b0acc240e31549"}, {"problem": 156, "code": "(fn fill [v ks]\n  (reduce #(assoc %1 %2 v) {} ks))", "user": "569ab3e2e4b0542e1f8d144a"}, {"problem": 156, "code": "(fn [default data] (reduce (fn [store cur] (conj store {cur default})) {} data))", "user": "56a79421e4b07966d5a8a05c"}, {"problem": 156, "code": "#(into {} (map (fn [x] (vector x %)) %2))", "user": "56992162e4b0542e1f8d143c"}, {"problem": 156, "code": "(fn [default-val key-seq]\n  (reduce #(assoc %1 %2 default-val) {} key-seq))", "user": "550b1c2ce4b06e50f9beb13b"}, {"problem": 156, "code": "(fn [d ks]\n  (loop [m {} k ks]\n    (if (empty? k) m (recur (into m {(first k) d}) (next k)))))", "user": "55d1ec3ee4b0e31453f64a4c"}, {"problem": 156, "code": "(fn [v, k] (reduce #(assoc %1 %2 v) {} k))", "user": "56a38a4ce4b0542e1f8d14cc"}, {"problem": 156, "code": "(fn [val keys] \n  (reduce into {} (map #(hash-map % val) keys)))", "user": "56a80867e4b07966d5a8a069"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "565953a8e4b068f2fe63dbea"}, {"problem": 156, "code": "(fn [defval keycoll]\n  (zipmap keycoll (repeat defval)))", "user": "55fc838be4b0f488688e0674"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "56a0ac99e4b0542e1f8d14a6"}, {"problem": 156, "code": "#(loop [v %1 coll %2 result {}] (if (not-empty coll) (recur v (rest coll) (conj result {(first coll) v})) result))", "user": "56a69451e4b0542e1f8d14ec"}, {"problem": 156, "code": "#(into {} (map (fn [k] [k %1]) %2))", "user": "56070aebe4b08b23635d317c"}, {"problem": 156, "code": "(fn [ value keys]\n\n(reduce \n(fn [map key]\n  \n  (assoc map key value )\n  \n  ); f-tion\n  {} ; initial\n  keys; collection\n  );END:reduce  \n  \n    );END:fn", "user": "56a358d0e4b0542e1f8d14c9"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55838353e4b05c286339e116"}, {"problem": 156, "code": "#(apply hash-map(interleave %2( repeat %1)))", "user": "56a7c7c8e4b07966d5a8a061"}, {"problem": 156, "code": "(fn [d coll]\n  (reduce (fn [acc n] (assoc acc n d)) {} coll))", "user": "56a51f26e4b0542e1f8d14e0"}, {"problem": 156, "code": "#(apply hash-map \n        (interleave %2 \n                    (repeat %1)\n        )\n )", "user": "56a75810e4b0542e1f8d14fc"}, {"problem": 156, "code": "(fn [default keys]\n  (into {} (map (fn [x] [x default]) keys)))", "user": "56444fb1e4b0018b46ad8c0c"}, {"problem": 156, "code": "(fn [v coll]\n  (into {} (map #(clojure.lang.MapEntry. % v) coll)))", "user": "51a7bf26e4b0da5f497bde8c"}, {"problem": 156, "code": "(fn [v c] (reduce (fn [a b] (conj a {b v})) {} c))", "user": "56a6051fe4b0542e1f8d14e5"}, {"problem": 156, "code": "(fn [x s]\n\t(apply merge (map #(assoc {} %1 x) s)))", "user": "4fd9cc7ee4b05e33b9224f3a"}, {"problem": 156, "code": "(fn [v ks] (reduce #(assoc %1 %2 v) {} ks))", "user": "51b01309e4b0c53cf2e68a57"}, {"problem": 156, "code": "#(apply hash-map (-> (interpose %1 %2) (conj %1) (reverse)))", "user": "52e5f810e4b09f7907dd1468"}, {"problem": 156, "code": "(fn [i v] (zipmap v (repeat i)))", "user": "55fbc657e4b0f488688e0666"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "53c74cfce4b00fb29b2212a7"}, {"problem": 156, "code": "(fn [x xs]\n  (reduce #(assoc % %2 x) {} xs)\n)", "user": "563cdfdfe4b0bfe05bf11840"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5638d2d1e4b0bfe05bf117eb"}, {"problem": 156, "code": "(fn [value keyss] (reduce #(conj %1 {%2 value}) {} keyss ))", "user": "56ae4c21e4b03c432f18735c"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "569637d8e4b0dcc4269f4130"}, {"problem": 156, "code": "(fn [default keylist] (apply assoc {} (interleave keylist (repeat default))))", "user": "5609d328e4b05f002753deee"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "569dd6e8e4b0542e1f8d1480"}, {"problem": 156, "code": "(fn [x vec]\n  (into {} (map (fn [y] [y x]) vec)))", "user": "54df838de4b024c67c0cf7ae"}, {"problem": 156, "code": "(fn mem\n  [a coll]\n  (reduce #(assoc %1 %2 a) {} coll))", "user": "56b1ab17e4b0982f16b37df1"}, {"problem": 156, "code": "(fn [v k] (zipmap k (repeat (count k) v)))", "user": "56b15fc8e4b0982f16b37de9"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5673db87e4b05957ce8c6125"}, {"problem": 156, "code": "(fn [value key-list] (reduce #(assoc %1 %2 value) {} key-list))", "user": "5243233fe4b076204b44faac"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "56ae214ce4b03c432f18735a"}, {"problem": 156, "code": "#(reduce (fn [target k] (assoc target k %1)) {} %2)", "user": "56b3146ae4b0982f16b37e0f"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56a9ea17e4b07966d5a8a07c"}, {"problem": 156, "code": "#(letfn [(buildmap [d xs m]\n                   (if \n                     (empty? xs) m\n    \t\t\t\t (conj {(first xs) d} (buildmap d (rest xs) m))))]\n    (buildmap %1 %2 {}))\n\n;This is MUCH better... #(zipmap %2 (repeat %))", "user": "56b295f7e4b0982f16b37e08"}, {"problem": 156, "code": "(fn [val keys]\n  (into {}\n        (map #(vector % val) keys)))", "user": "56a01895e4b0542e1f8d149f"}, {"problem": 156, "code": "(fn\n  [val ks]\n  (loop [rs {} ks ks]\n    (if (empty? ks)\n      rs\n      (recur (assoc rs (first ks) val) (next ks)))))", "user": "56a36f76e4b0542e1f8d14ca"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "565418ede4b0f9d632dd847d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56ae9929e4b03c432f187361"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5593a03ce4b0c79f6e1db942"}, {"problem": 156, "code": "(fn [default coll]\n  (reduce #(assoc %1 %2 default) {} coll))", "user": "56478316e4b0284900eef61d"}, {"problem": 156, "code": "(fn [default coll]\n  (zipmap coll (repeat default)))", "user": "54c120d7e4b0ed20f4ff6f1c"}, {"problem": 156, "code": "(fn [v ks] (reduce #(assoc %1 %2 v) {} ks))", "user": "558ea13be4b0277789237654"}, {"problem": 156, "code": "(fn [k m] (zipmap m (cycle [k])))", "user": "56af842de4b061e3ca319ad2"}, {"problem": 156, "code": "(fn md [d m] (into {} (map #(vector % d) m)))", "user": "53bd476ae4b0d9a98559a6ca"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56baa68ce4b0f26550335947"}, {"problem": 156, "code": "(fn [v s] (apply hash-map (interleave s (repeat v))))", "user": "56baab13e4b0f26550335948"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56b86e64e4b0f26550335924"}, {"problem": 156, "code": "(fn [default a-list]\n  (into {}\n        (map #(vector %1 %2) a-list (repeat (count a-list) default))))", "user": "56b18445e4b0982f16b37dee"}, {"problem": 156, "code": "(fn [x coll] (reduce #(assoc %1 %2 x) {} coll))", "user": "553aad97e4b09218d5f44ff9"}, {"problem": 156, "code": "(fn [default ks]\n    (into {} (map #(vector % default) ks)))", "user": "53bf0913e4b0c98a41f5cc99"}, {"problem": 156, "code": "(fn ab [a b]\n  (if (= (count b) 1)\n    {(first b) a}\n    (into {(first b) a} (ab a (rest b)))\n  )\n)", "user": "56bb3a4be4b0f26550335951"}, {"problem": 156, "code": "#(loop [result {} x %1 coll %2]\n  \t(if (empty? coll)\n      result\n      (recur (into result {(first coll) x }) x (rest coll))))", "user": "56b9d20ee4b0f2655033593b"}, {"problem": 156, "code": "#(apply (partial assoc {}) (interleave %2 (repeat %1)))", "user": "55ed5a2de4b0121d4835fdd8"}, {"problem": 156, "code": "(fn [deff values] \n  (reduce #(assoc %1 %2 deff) {} values))", "user": "56b7c32ee4b0982f16b37e48"}, {"problem": 156, "code": "(fn [v s] (zipmap s (repeat (count s) v)))", "user": "4f604bdee4b0defedf855fa7"}, {"problem": 156, "code": "(fn [n v] (reduce (fn [a b] (merge a {b n})) {} v))", "user": "5693cc39e4b0dcc4269f4108"}, {"problem": 156, "code": "(fn [default mykeys] (zipmap mykeys (into [] (replicate 10 default))))", "user": "5643aed5e4b0018b46ad8bfd"}, {"problem": 156, "code": "(fn [v ks]\n  (into {} (map (fn [k] [k v]) ks)))", "user": "56ba1406e4b0f2655033593c"}, {"problem": 156, "code": "(fn [default _keys] (into (hash-map) (map #(vec [%1 default]) _keys)))", "user": "563536f8e4b0bfe05bf117c5"}, {"problem": 156, "code": "(fn [default xs]\n  (reduce (fn [m k] (conj m [k default])) {} xs ))", "user": "56bfcba1e4b060a8e693e3a1"}, {"problem": 156, "code": "(fn [k v] (zipmap v (for [v v] k)))", "user": "56bdda49e4b0f26550335977"}, {"problem": 156, "code": "#(apply assoc {}\n        (interleave %2 (repeat %1)))", "user": "56bb81ebe4b0f26550335957"}, {"problem": 156, "code": "(fn make-map-default [default-value some-keys] (into {}  (into []  (for [k some-keys] [k default-value]))))", "user": "56c0756de4b060a8e693e3a9"}, {"problem": 156, "code": "#(into {} (map (fn[x]{x %}) %2))", "user": "56c08696e4b060a8e693e3aa"}, {"problem": 156, "code": "(fn [v ks] (reduce #(assoc %1 %2 v) {} ks))", "user": "56bb9ccce4b0f26550335959"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56bf7128e4b0f26550335987"}, {"problem": 156, "code": "(fn [def-val keys]\n  (reduce (fn [m k]\n            (assoc m k def-val))\n          {}\n          keys))", "user": "4eaa5c51535d7eef3080730a"}, {"problem": 156, "code": "(fn [x y] (into {} (map #(vector %1 x) y) ))", "user": "567f034be4b0feffd0d18eba"}, {"problem": 156, "code": "(fn [defaultVal theKey] (zipmap theKey (repeat defaultVal)))", "user": "56b41972e4b0982f16b37e1f"}, {"problem": 156, "code": "(fn [x coll]\n  (loop [c coll m {}]\n    (if (empty? c)\n      m\n      (recur (rest c) (assoc m (first c) x)))))", "user": "56c0aeb8e4b060a8e693e3af"}, {"problem": 156, "code": "(fn createMap [l ls] (reduce #(conj %1 {%2 l}) {} ls))", "user": "566ff0a1e4b0a866af6896ec"}, {"problem": 156, "code": "(fn [default-value key-sequence] (reduce merge (map (fn [key] {key default-value}) key-sequence)))", "user": "56b8cf20e4b0f26550335929"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56c0d583e4b0839206b9d67d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56a6c758e4b0542e1f8d14f0"}, {"problem": 156, "code": "(fn [val coil] (into {} (map #(array-map % val) coil)))", "user": "56c55fbce4b05cc29241eea5"}, {"problem": 156, "code": "(fn [n l] (reduce #(assoc %1 %2 n) {} l))", "user": "54be7e93e4b0ed20f4ff6eed"}, {"problem": 156, "code": "(fn [val coll] (zipmap coll (repeat (count coll) val)))", "user": "56499a5de4b0284900eef644"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (repeat v)))", "user": "564857c2e4b0284900eef62e"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56b2573ce4b0982f16b37e02"}, {"problem": 156, "code": "#(loop [a-set %2\n        result {}]\n   (if (empty? a-set)\n     result\n     (recur (rest a-set) (into result (hash-map (first a-set) %1)))))", "user": "56c70cc2e4b0ed865f9758b5"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56c4f43ce4b05cc29241ee9c"}, {"problem": 156, "code": "(fn [default keys] (zipmap keys (repeat default)))", "user": "56bf78dae4b0f26550335989"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5141e978e4b0b50abeb46b20"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56aed78fe4b03c432f187363"}, {"problem": 156, "code": "(fn [def-val seq-key]\n    (into (hash-map) (map #(assoc {}  % def-val) seq-key)))", "user": "56c60b36e4b05cc29241eead"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5602f5fce4b04bb52996e1ad"}, {"problem": 156, "code": "(fn [val seq]\n  (zipmap seq (repeat val)))", "user": "56a04c61e4b0542e1f8d14a1"}, {"problem": 156, "code": "#(zipmap %2 [% % %])", "user": "56cba075e4b0ea9b8538f737"}, {"problem": 156, "code": "(fn [v defaults]\n  (zipmap defaults (repeat v) ))", "user": "55cde24ae4b0e31453f64a23"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5250a13ee4b0541d1855b839"}, {"problem": 156, "code": "(fn defval [x [head & tail]]\n  (if (= nil head)\n    {}\n  \t(conj {head x} (defval x tail))\n  )\n)", "user": "56aa9464e4b07966d5a8a08d"}, {"problem": 156, "code": "(fn [x s] (reduce merge (map (fn [y] {y x}) s)))", "user": "548a3dc6e4b0e286459a11f2"}, {"problem": 156, "code": "(fn [default s]\n  (apply hash-map (mapcat #(list %1 %2) s (repeat (count s) default))))", "user": "56c427bbe4b05cc29241ee94"}, {"problem": 156, "code": "(fn to-map [q w]\n  (reduce #(assoc % %2 q) {} w))", "user": "569f4dabe4b0542e1f8d1491"}, {"problem": 156, "code": "(fn [def-val vect]\n  (reduce \n    #(assoc %1 %2 def-val)\n    nil\n    vect))", "user": "55f73078e4b06e875b46cea4"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55c5e781e4b0e31453f649b8"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56a8b818e4b07966d5a8a06d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5617a540e4b06b1bb2182a12"}, {"problem": 156, "code": "(fn [keyz col] (reduce merge (map #(hash-map %1 keyz) col)))", "user": "56cb3bebe4b0ea9b8538f728"}, {"problem": 156, "code": "(fn func [n l] (if (empty? l) {} (assoc (func n (rest l)) (first l) n )))", "user": "56cb483ee4b0ea9b8538f72d"}, {"problem": 156, "code": "(fn [d c] (zipmap c (repeat d)))", "user": "56cb3a61e4b0ea9b8538f726"}, {"problem": 156, "code": "#(into {} (for [k %2] [k %1]))", "user": "55e6809ee4b050e68259b48a"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56cddf9de4b0ea9b8538f753"}, {"problem": 156, "code": "#(->> %1\n      repeat\n      (interleave %2)\n      (apply hash-map))", "user": "567e418fe4b0feffd0d18eb1"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "56be8649e4b0f26550335983"}, {"problem": 156, "code": "(fn [x v]\n  (into {}\n        (map #(vector % x) v)))", "user": "5549ff9ae4b0a04f7929956e"}, {"problem": 156, "code": "#(zipmap %2 (vec (repeat 5 %)))", "user": "56d1afd9e4b0ea9b8538f791"}, {"problem": 156, "code": "#(reduce merge (map hash-map %2 (repeat %1)))", "user": "56c560ede4b05cc29241eea6"}, {"problem": 156, "code": "(fn [x ys]\n  (let \n   [mapdef (fn mapdef [x ys]\n     (if (nil? (first ys)) \n       nil\n       (concat [(first ys) x] (mapdef x (rest ys)))\n     )\n   )]\n   (apply hash-map (mapdef x ys))\n  )\n)", "user": "56433d34e4b08d4f616f5f23"}, {"problem": 156, "code": "(fn [defaultValue coll]\n  (apply hash-map (mapcat #(list % defaultValue) coll))\n)", "user": "506af7d8e4b0a2a5463de37d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56d228f3e4b0ea9b8538f79a"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "56c3aca0e4b05cc29241ee90"}, {"problem": 156, "code": "(fn [default coll] (zipmap coll (repeat default)))", "user": "56cb3acfe4b0ea9b8538f727"}, {"problem": 156, "code": "(fn [v coll]\n  (into {} (for [x coll] {x v})))", "user": "56d36ea1e4b0ea9b8538f7ae"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "56cb7096e4b0ea9b8538f732"}, {"problem": 156, "code": "#(reduce (fn [r x] (conj r {x %1})) {} %2)", "user": "55c1fa2be4b0e31453f64971"}, {"problem": 156, "code": "(fn \n  [x s]\n  (reduce (fn [acc ele] (assoc acc ele x)) {}  s))", "user": "56cdda13e4b0ea9b8538f752"}, {"problem": 156, "code": "(fn [default ks] (zipmap ks (repeat (count ks) default)))", "user": "55009d17e4b07d26eda61d5d"}, {"problem": 156, "code": "(fn [v ks] (reduce #(assoc %1 %2 v) {} ks))", "user": "56d63729e4b0ea9b8538f7ca"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56d05ba2e4b0ea9b8538f77d"}, {"problem": 156, "code": "#(reduce (fn [acc n] (assoc acc n %)) {} %2)", "user": "56d69d28e4b0ea9b8538f7cf"}, {"problem": 156, "code": "(fn [default keys]\n  (zipmap keys (repeat default)))", "user": "56d4b22de4b0ea9b8538f7bb"}, {"problem": 156, "code": "(fn [default keys] \n  (reduce \n   #(assoc %1 %2 default) {} keys))", "user": "56d5bc66e4b0ea9b8538f7c2"}, {"problem": 156, "code": "#(into {} (map (fn [i] [i %1]) %2))", "user": "56d68cbae4b0ea9b8538f7cd"}, {"problem": 156, "code": "(fn [v m] \n  (loop [nm {} mp m ]\n    (if (empty? mp) \n     nm\n     (recur \n      (assoc nm (first mp) v)\n      (rest mp))\n     )))", "user": "56d439d4e4b0ea9b8538f7b6"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "56a1fce9e4b0542e1f8d14b7"}, {"problem": 156, "code": "(fn [x ks] (zipmap ks (repeat x)))", "user": "50a0267fe4b08df8156e9e4a"}, {"problem": 156, "code": "(fn [v ks]\n  (zipmap ks (repeat v)))", "user": "56d8a63fe4b0ea9b8538f7e8"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "56d80542e4b0ea9b8538f7e1"}, {"problem": 156, "code": "(fn [value key]\n  (into {}\n        (map vector key\n             (repeat value))))", "user": "5527be83e4b0ffed3738f936"}, {"problem": 156, "code": "#(->> (repeat %1)\n      (interleave %2)\n      (apply hash-map))", "user": "56ab80f1e4b03c432f18733e"}, {"problem": 156, "code": "(fn [default keys] (reduce (fn [m key] (conj m [key default])) {} keys))", "user": "56d2a103e4b0ea9b8538f7a3"}, {"problem": 156, "code": "#(into {} (map (fn [k] {k %1}) %2))", "user": "555e7210e4b0a2eb076a39b9"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56d5fd24e4b0ea9b8538f7c5"}, {"problem": 156, "code": "(fn [deft lst]\n  (apply conj (map (fn [l] {l deft}) lst)))", "user": "56dc0628e4b0ea9b8538f814"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (repeat v)))", "user": "5313b4b6e4b08068f379ed0c"}, {"problem": 156, "code": "(fn [default ks]\n  (reduce conj (map (fn [x] {x default}) ks)))", "user": "4dad6fcb8e77d6ed59f12a44"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56d0080be4b0ea9b8538f775"}, {"problem": 156, "code": "(fn\n  [def-val ks]\n  (reduce #(into %1 {%2 def-val}) {} ks))", "user": "56dc5f89e4b0ea9b8538f81e"}, {"problem": 156, "code": "(fn default-map [default keys]\n  (reduce  (fn [latest-result next-element]\n             (assoc latest-result next-element default)) {} keys))", "user": "56d74c88e4b0ea9b8538f7d9"}, {"problem": 156, "code": "; My independent solution was as follows:\n; #(zipmap %2 (cycle [%1]))\n; After reviewing other peoples solutions I feel using \"(repeat %1)\" rather than \"(cycle [%1])\" is better:\n#(zipmap %2 (repeat %1))\n; I also think zipmap is fairly special use. If we imagine that there is a restriction on the solution that\n; zipmap cannot be used, then I would prefer the following:\n; #(into {} (map vector %2 (repeat %)))", "user": "56dc34eae4b0ea9b8538f817"}, {"problem": 156, "code": "(fn [d c]                                                                                                                             \n  (apply merge (map #(hash-map %2 %1) (repeat d) c)))", "user": "527bd988e4b03e8d9a4a759d"}, {"problem": 156, "code": "(fn f\n  [default keyss]\n  (zipmap keyss (repeat (count keyss) default)))", "user": "56df62eee4b0ca2494a095f0"}, {"problem": 156, "code": "(fn [v coll]\n  (into {} (for [x coll] {x v})))", "user": "56df63c7e4b0ca2494a095f5"}, {"problem": 156, "code": "(fn f[v s]\n  (loop [v v s s m {}]\n    (if (empty? s)\n      m\n      (recur v (rest s) (assoc m (first s) v)))))", "user": "56df632ce4b0ca2494a095f2"}, {"problem": 156, "code": "(fn [a b] (zipmap b (repeat (count b) a)))", "user": "56df6301e4b0ca2494a095f1"}, {"problem": 156, "code": "(fn [n v]\n        (zipmap v (repeat (count v) n))\n        )", "user": "56df6351e4b0ca2494a095f3"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5393185ae4b0b51d73faaeb7"}, {"problem": 156, "code": "(fn [x coll]\n  (reduce #(assoc %1 %2 x) {} coll))", "user": "550b502ae4b06e50f9beb13f"}, {"problem": 156, "code": "(fn [in1 vec1] (apply merge (for [ea vec1] {ea in1})))", "user": "56d4b1aee4b0ea9b8538f7ba"}, {"problem": 156, "code": "(fn assoc-defaults [default-value keys-sequence]\n  (reduce #(assoc %1 %2 default-value) {} keys-sequence))", "user": "56742817e4b05957ce8c612d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "52c7c40be4b0c2d177d62125"}, {"problem": 156, "code": "(fn [def-val key-vals] (loop [key-map {}\n                                remaining key-vals]\n    (if (empty? remaining) key-map\n      (recur (assoc key-map (first remaining) def-val)\n                (rest remaining)))))", "user": "56df62b3e4b0ca2494a095ef"}, {"problem": 156, "code": "(fn [default map-keys] \n  (apply assoc {} (interleave map-keys (take (count map-keys) (repeat default)))))", "user": "56db8fbde4b0ea9b8538f80c"}, {"problem": 156, "code": "(fn [v ks] (reduce #(assoc %1 %2 v) {} ks))", "user": "56db90d4e4b0ea9b8538f80d"}, {"problem": 156, "code": "#(zipmap %2 [%1 %1 %1 %1])", "user": "56c749d8e4b0ed865f9758ba"}, {"problem": 156, "code": "(fn func [x y] (reduce #(assoc %1 %2 x) {} y))", "user": "56cef5e8e4b0ea9b8538f762"}, {"problem": 156, "code": "#(into {} (for [x %2] {x %1}))", "user": "56bca51ae4b0f26550335963"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "559a8d4ce4b066d22e731f43"}, {"problem": 156, "code": "(fn [default coll] (reduce #(assoc %1 %2 default) {} coll))", "user": "56603e5fe4b068f2fe63dc4a"}, {"problem": 156, "code": "(fn map-default [default key-seq]\n  (apply hash-map (mapcat vector key-seq (repeat default))))", "user": "557e56aae4b05c286339e0d5"}, {"problem": 156, "code": "(fn [default keys-vec] (reduce #(into %1 {%2 default}) {} keys-vec))", "user": "56e0fa6fe4b03a7c14b85a1d"}, {"problem": 156, "code": "(fn [default-value keys-in]\n  (loop [remaining-keys keys-in result {}]\n    (if (empty? remaining-keys)\n      result\n      (recur (rest remaining-keys) (conj result {(first remaining-keys) default-value})))))", "user": "56e31aaae4b03a7c14b85a3e"}, {"problem": 156, "code": "(fn [x m]\n  (reduce #(conj %1 [%2 x]) {} m)\n  )", "user": "55f33f0ce4b06e875b46ce59"}, {"problem": 156, "code": "(fn [value, keys] (into {} (for [x keys] {x value})))", "user": "569f7bc2e4b0542e1f8d1494"}, {"problem": 156, "code": "(fn [defval kseq] \n  (loop [acc {}\n         ks kseq]\n    (if (empty? ks)\n      acc\n      (recur (conj acc [(first ks) defval]) (rest ks)))))", "user": "56b6a50ae4b0982f16b37e3c"}, {"problem": 156, "code": "(fn [val keys]\n  (into {}\n        (map #(vector %1 val) keys)))", "user": "56cb77e0e4b0ea9b8538f734"}, {"problem": 156, "code": "(fn [value values] (reduce #(into %1 {%2 value}) {} values))", "user": "56e4991fe4b03a7c14b85a4f"}, {"problem": 156, "code": "(fn hash-makers [val keys] \n  (reduce (fn [hash-results curr]\n            (conj hash-results {curr val})) {} keys))", "user": "56e53d2fe4b02e7e935eb6bc"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %1)))", "user": "56e227a8e4b03a7c14b85a31"}, {"problem": 156, "code": "(fn [the-value initial-keys]\n  (loop [remaining-keys initial-keys\n         result-map {}]\n    (if (empty? remaining-keys)\n      result-map\n      (recur (rest remaining-keys) (conj result-map [(first remaining-keys) the-value])))))", "user": "56e48302e4b03a7c14b85a4e"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5672925fe4b05957ce8c6114"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56869344e4b0dcc4269f4053"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "563cce5be4b0bfe05bf1183f"}, {"problem": 156, "code": "(fn [v ks] (into {} (map (fn [k] {k v}) ks)))", "user": "56e7ebcce4b02e7e935eb6e2"}, {"problem": 156, "code": "(fn [v ks]\n              (->> (for [k ks]\n                     [k v])\n                   (into {})))", "user": "53684a2fe4b0243289761e8c"}, {"problem": 156, "code": "(fn [default kys] (reduce merge (map #(hash-map % default) kys)))", "user": "51bc3e7fe4b0fe3ecfb46455"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "56e06625e4b0ca2494a09607"}, {"problem": 156, "code": "(fn [v ks]\n  (into {}\n        (map vector ks (repeat v))))", "user": "56b965d9e4b0f26550335931"}, {"problem": 156, "code": "(fn [default-value seq-keys] (loop [in seq-keys out {}](if (empty? in)out(recur (rest in)(conj out{(first in) default-value})))))", "user": "52420e2fe4b076e5d3121f48"}, {"problem": 156, "code": "(fn map-dup\n  [e xs]\n  (zipmap xs (repeat e)))", "user": "518b8561e4b0f028e99addef"}, {"problem": 156, "code": "#(reduce (fn [acc key] (conj acc [key %1])) {} %2)", "user": "52d38c51e4b099d49816f0c5"}, {"problem": 156, "code": "#(into {} (for [x %2] {x %1}))", "user": "56e7d877e4b02e7e935eb6df"}, {"problem": 156, "code": "#(reduce (fn [prev item] (assoc prev item %1)) {} %2)", "user": "56cd75bee4b0ea9b8538f74b"}, {"problem": 156, "code": "(fn build-hash [default-val vector-of-keys]\n   (let [expanded-default-val (repeat (count vector-of-keys) default-val)]\n     (zipmap vector-of-keys expanded-default-val)))", "user": "4fb85651e4b081705acca2d7"}, {"problem": 156, "code": "(fn [v ks]\n  (loop [ks ks, acc {}]\n    (if (empty? ks)\n      acc\n      (recur (next ks) (assoc acc (first ks) v)))))", "user": "56e02c1ce4b0ca2494a09602"}, {"problem": 156, "code": "(fn [default keys]\n    (into {} (map #(vector % default) keys)))", "user": "56eaad95e4b04a395b9a040f"}, {"problem": 156, "code": "(fn [def-val the-keys]\n  (letfn [(mapper [def-val the-keys]\n  (if (= 0 (count the-keys))\n    nil\n    (merge {(first the-keys) def-val} (mapper def-val (rest the-keys)))))] \n    (mapper def-val the-keys)\n  ))", "user": "56eb16d8e4b04a395b9a041d"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "56ecc4b5e4b04a395b9a043e"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "56dc483fe4b0ea9b8538f81b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56eab346e4b04a395b9a0410"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "56a37ccee4b0542e1f8d14cb"}, {"problem": 156, "code": "(fn [v k]\n  (reduce #(into % {%2 v}) {} k))", "user": "56eda144e4b04a395b9a0446"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "56e8963ae4b04a395b9a03f1"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56ebe773e4b04a395b9a042a"}, {"problem": 156, "code": "#(zipmap (reverse %2) (take (count %2) (repeat %1)))", "user": "56e4427ce4b03a7c14b85a4c"}, {"problem": 156, "code": "(fn [defval init-keys]\n  (loop [res {}, key init-keys]\n    (if (empty? key)\n      res\n      (recur \n        (assoc res (first key) defval)\n        (rest key))\n      )))", "user": "56e7ebb4e4b02e7e935eb6e1"}, {"problem": 156, "code": "(fn cosa\n  \t[x [ a b c]]\n    (conj  {a x} {b x} \n         (if (not= nil c)\n           {c x}\n           {})))", "user": "56f09bf4e4b04a395b9a047f"}, {"problem": 156, "code": "#(reduce (fn [m k] (assoc m k %1)) {} %2)", "user": "562268dce4b03f08ee9a9224"}, {"problem": 156, "code": "(fn [default coll]\n  (into {} (map #(hash-map % default) coll)))", "user": "542c026ae4b0dad94371f29a"}, {"problem": 156, "code": "(fn [dft ls] (reduce #(assoc % %2 dft) {} ls))", "user": "56cefadee4b0ea9b8538f763"}, {"problem": 156, "code": "(fn [v k] (zipmap k (repeat v)))", "user": "56f188e9e4b04a395b9a0494"}, {"problem": 156, "code": "(fn [_val _list] (reduce #(assoc %1 %2 _val) {} _list))", "user": "56e93576e4b04a395b9a03f6"}, {"problem": 156, "code": "(fn mapdefault\n  [default ks]\n  (let [defaults (repeat (count ks) default)]\n  \t(into {} (map vector ks defaults))))", "user": "56e99ec8e4b04a395b9a03fb"}, {"problem": 156, "code": "(fn cc [x key-vec]\n  (if (empty? key-vec)\n    {}\n    (assoc (cc x (rest key-vec)) (first key-vec) x))\n)", "user": "567e6d24e4b0feffd0d18eb4"}, {"problem": 156, "code": "(fn constMap [d, m]\n  (reduce #(merge %1 {%2 d}) {} m))", "user": "56eff7c1e4b04a395b9a0468"}, {"problem": 156, "code": "(fn [ve de b]\n  (if b\n    (recur (assoc ve (first b) de) de (next b))\n    ve)) {}", "user": "56eb5c76e4b04a395b9a0422"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "56f0390de4b04a395b9a0473"}, {"problem": 156, "code": "(fn [v ks] (into {} (for [k ks] [k v])))", "user": "56f4e181e4b046a417f92065"}, {"problem": 156, "code": "(fn set-default [x col]\n  (reduce #(assoc %1 %2 x) {} col))", "user": "56f57481e4b046a417f92072"}, {"problem": 156, "code": "(fn [c L]\n  (zipmap L (repeat c)))", "user": "52c35afce4b07a9af579238c"}, {"problem": 156, "code": "( fn map-merge\n  ( [lmap ks v]\n    (if (first ks)\n      (assoc (map-merge lmap (rest ks) v) (first ks) v)\n      lmap))\n  ( [v ks] (map-merge {} ks v)))", "user": "56dc3dbbe4b0ea9b8538f81a"}, {"problem": 156, "code": "(fn [defVals seqOfKeys] (into {} (for [x seqOfKeys] {x defVals} )))", "user": "5662ca50e4b0e91d5f5c564c"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (map (fn [_] %1) (range (inc (count %2))))))", "user": "56f53962e4b046a417f9206c"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56ca0da9e4b0ea9b8538f715"}, {"problem": 156, "code": "(fn [default coll] (reduce (fn [mapres key] (assoc mapres key default)) {} coll))", "user": "4f18f65d535d64f603146462"}, {"problem": 156, "code": "(fn [default ks]\n  (reduce #(conj %1 [%2 default]) {} ks))", "user": "56f514cee4b046a417f92068"}, {"problem": 156, "code": "(fn [d ks] (loop [values ks finMap {}] (if (empty? values) finMap (recur (pop values) (assoc finMap (peek values) d)))))", "user": "54e7425ee4b024c67c0cf810"}, {"problem": 156, "code": "(fn [d ks]\n  (into {} (for [k ks] [k d])))", "user": "56df254be4b0ca2494a095ea"}, {"problem": 156, "code": "(fn [value keyset] (loop [ks keyset output {}] \n                     (if (empty? ks)\n                       output\n                       (recur (rest ks) (assoc output (first ks) value)))))", "user": "56f5e6d5e4b046a417f92079"}, {"problem": 156, "code": "(fn [value keys] (loop [acc [] counter 0]\n                   (if (< counter (count keys)) (recur (conj acc (nth keys counter) value) (inc counter)) (apply hash-map acc))\n                   ))", "user": "55cfdfc9e4b0e31453f64a35"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56ea8ae3e4b04a395b9a0408"}, {"problem": 156, "code": "(fn [v ks] (into {} (for [k ks] [k v])))", "user": "539118b2e4b0b51d73faaea1"}, {"problem": 156, "code": "(fn [default sleutels]\n  (reduce #(conj %1 {%2 default}) {} sleutels))", "user": "56785234e4b05957ce8c6177"}, {"problem": 156, "code": "#(apply hash-map (conj (into [] (interpose %1 %2)) %1))", "user": "56f9890be4b07572ad1a88b5"}, {"problem": 156, "code": "(fn [default keys] (reduce (fn [acc e] (assoc acc e default)) {} keys))", "user": "55c508f0e4b0e31453f649ac"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %)))", "user": "56fc1bc7e4b07572ad1a88dd"}, {"problem": 156, "code": "(fn [v c]    (reduce into  (map #(sorted-map %1 %2) c (repeat v))) )", "user": "56c7d8dee4b0ed865f9758c9"}, {"problem": 156, "code": "(fn [default xs] (apply conj (map (fn [y] {y default}) xs)))", "user": "56ec5b88e4b04a395b9a0438"}, {"problem": 156, "code": "(fn [x ks] (zipmap ks (repeat x)))", "user": "56fde58ae4b08d47c97781aa"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56fdd9a1e4b08d47c97781a8"}, {"problem": 156, "code": "(fn [v l] (apply assoc {} (interleave l (repeat (count l) v))))", "user": "56fd020ee4b08d47c97781a0"}, {"problem": 156, "code": "(fn [val arr] (reduce conj {} (map #(hash-map % val) arr)))", "user": "56fbcc1fe4b07572ad1a88d5"}, {"problem": 156, "code": "(fn [a b] (reduce #(into %1 {%2 a}) {} b))", "user": "56fda2bae4b08d47c97781a6"}, {"problem": 156, "code": "(fn [dv, ks]\n  (loop [m {} \n         _ks ks]\n    (if (= [] _ks)\n      m\n      (recur (assoc m (first _ks) dv) (rest _ks)))))", "user": "57006957e4b08d47c97781c8"}, {"problem": 156, "code": "(fn [v coll]\n  (reduce \n   (fn [acc item]\n     (assoc acc item v))\n   {}\n   coll))", "user": "56cf115de4b0ea9b8538f765"}, {"problem": 156, "code": "(fn [default seq] (reduce #(assoc % %2 default) {} seq))", "user": "57002b81e4b08d47c97781c7"}, {"problem": 156, "code": "#(apply hash-map (mapcat list %2 (repeat %1)))", "user": "570243c4e4b08d47c97781dc"}, {"problem": 156, "code": "(fn [val seq]\n  (into {}\n        (for [key seq]\n          (conj [key] val))))", "user": "56f02c90e4b04a395b9a0472"}, {"problem": 156, "code": "#(apply hash-map (interleave  %2 (vec (repeat (count %2) %1))))", "user": "56e6e1e6e4b02e7e935eb6cf"}, {"problem": 156, "code": "(fn [a b] (reduce #(conj %1 {%2 a}) {} b))", "user": "5292feb4e4b0239c8a67af39"}, {"problem": 156, "code": "(fn [dft ks] (into (sorted-map) (map (fn [x] [x dft]) ks)))", "user": "56fbf83de4b07572ad1a88da"}, {"problem": 156, "code": "(fn [x y] (zipmap y (repeat x)))", "user": "56ea8374e4b04a395b9a0404"}, {"problem": 156, "code": "(fn [vals keys]\n    (loop [map {}\n           ks (seq keys)\n           vs vals]\n      (if ks\n        (recur (assoc map (first ks) vs)\n               (next ks)\n               vs)\n        map)))", "user": "5703cbbee4b08d47c97781fb"}, {"problem": 156, "code": "(fn [v ks] (into {} (map #(vector % v) ks)))", "user": "56f15eade4b04a395b9a048e"}, {"problem": 156, "code": "(fn mapdef [val keys] \n   (loop [a {} k keys]\n     (if (empty? k)\n        a\n        (recur (assoc a (first k) val) (rest k)))))", "user": "569aca1ee4b0542e1f8d144d"}, {"problem": 156, "code": "(fn [v ks]\n  (apply hash-map\n         (apply concat\n                (map #(vector % v) ks))))", "user": "57008afae4b08d47c97781ca"}, {"problem": 156, "code": "#(into {}( for[i %2] ( hash-map i %1)))", "user": "57016724e4b08d47c97781d6"}, {"problem": 156, "code": "(fn [n s] (reduce #(conj %1 {%2 n}) {} s))", "user": "570459a9e4b0b0fb43fd0662"}, {"problem": 156, "code": "(fn [a s] (apply conj (for [x s] {x a})))", "user": "4e5e9f6b535d8a8b8723a2d2"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "56f7ecdfe4b08e7d20b96834"}, {"problem": 156, "code": "(fn [default, k_list] (\n    into {} (map #(vector ((constantly %)) ((constantly default))) k_list)\n  )\n)", "user": "57064231e4b0b0fb43fd067a"}, {"problem": 156, "code": "#(apply sorted-map (interleave %2 (repeat %1)))", "user": "56d0608ce4b0ea9b8538f77e"}, {"problem": 156, "code": ";; this took me hours\n(fn [defaultvalue, collection] \n  (zipmap collection (repeat defaultvalue)))", "user": "570577bbe4b0b0fb43fd0672"}, {"problem": 156, "code": "#(into {} (for [ x %2 ] [x %1] ))", "user": "57011eb3e4b08d47c97781d1"}, {"problem": 156, "code": "(fn [default coll] \n  (into (hash-map) (map #(identity [%1 default]) coll)))", "user": "56b2300ce4b0982f16b37dff"}, {"problem": 156, "code": "(fn [default-value vector-of-keys]\n (reduce #(assoc %1 %2 default-value) {} vector-of-keys)\n)", "user": "57042a94e4b0b0fb43fd0660"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %)))", "user": "56f1b558e4b04a395b9a049a"}, {"problem": 156, "code": ";(fn [default keys] (zipmap keys (repeat (count keys) default)))\n#(zipmap %2 (repeat (count %2) %1))", "user": "553e3260e4b0a04f792994eb"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "57044b67e4b0b0fb43fd0661"}, {"problem": 156, "code": "(fn [x y] \n  (into {}\n        (apply map vector [y (vec (repeat (count y) x))])))", "user": "570306cae4b08d47c97781ec"}, {"problem": 156, "code": "(fn [defaultvalue mylist]\n   (into {} (for [x mylist]\n     [x defaultvalue]\n     ))\n\n      )", "user": "545e5805e4b01be26fd74679"}, {"problem": 156, "code": "(fn [v m] (reduce #(assoc % %2 v) {} m))", "user": "5707c364e4b0b0fb43fd0691"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "570ab24fe4b0b0fb43fd06b7"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "57027310e4b08d47c97781e2"}, {"problem": 156, "code": "#(reduce (fn [x y] (conj x {y %1})) {} (reverse %2))", "user": "570bb66de4b0b0fb43fd06c2"}, {"problem": 156, "code": "(fn f ([v s] (f v s {})) ([v s m] (if (empty? s) m (recur v (rest s) (conj m {(first s) v})))))", "user": "56ab7578e4b03c432f18733d"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %)))", "user": "5703d21ae4b08d47c97781ff"}, {"problem": 156, "code": "(fn [default sq]\n  (zipmap sq (repeat default)))", "user": "55ba70f9e4b01b9910ae29d4"}, {"problem": 156, "code": "(fn [def-val coll] (into {} (map #(assoc {} % def-val) coll)))", "user": "56cb4d06e4b0ea9b8538f72e"}, {"problem": 156, "code": "(fn [default ks] (reduce #(assoc %1 %2 default) {} ks))", "user": "4df73d64535d04ed9115e775"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "570e13d3e4b0b0fb43fd06e6"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "570d5b10e4b0b0fb43fd06dc"}, {"problem": 156, "code": "(fn [x ks] (into {} (map #(hash-map % x) ks)))", "user": "570e190fe4b0b0fb43fd06e8"}, {"problem": 156, "code": "(fn [_v _ks] (zipmap _ks (repeat (count _ks) _v)))", "user": "570dd7ece4b0b0fb43fd06e1"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "55cc6c35e4b0e31453f64a10"}, {"problem": 156, "code": "(fn [default l]\n  (reduce (fn[x y] (assoc x y default)) '{} l))", "user": "56eb3f9de4b04a395b9a0420"}, {"problem": 156, "code": "(fn [v sq] (into {} (for [x sq] {x v})))", "user": "57061d20e4b0b0fb43fd0679"}, {"problem": 156, "code": "(fn [const_val key_coll]\n  (reduce \n    #(assoc %1 %2 const_val) \n    {} \n    key_coll))", "user": "56d9883ae4b0ea9b8538f7f4"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (repeat v)))", "user": "56627acde4b0e91d5f5c5648"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %)))", "user": "5656a095e4b0f9d632dd84a1"}, {"problem": 156, "code": "(fn [n coll] (reduce #(assoc %1 %2 n) {} coll))", "user": "56f4cedce4b046a417f92063"}, {"problem": 156, "code": "(fn [d v] (into {} (for [x v] {x d})))", "user": "54be9b81e4b0ed20f4ff6ef1"}, {"problem": 156, "code": "(fn [x y] (zipmap y (repeat x)) )", "user": "57126104e4b09c608db70458"}, {"problem": 156, "code": "(fn [v k] (reduce #(assoc %1 %2 v) {} k))", "user": "57122b20e4b09c608db70451"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5710e574e4b09c608db7043b"}, {"problem": 156, "code": "(fn [default values] (into (sorted-map) \n                           (map  #(vector % default) values))\n  )", "user": "570d8418e4b0b0fb43fd06de"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "571077e8e4b09c608db70434"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "57080694e4b0b0fb43fd0697"}, {"problem": 156, "code": "(fn map2 [x y]\n  (apply merge\n   (map \n     (fn [z] {z x}) y))\n  )", "user": "554b8b78e4b0a04f7929958d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "57168db0e4b07c98581c3afc"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5716845be4b07c98581c3afa"}, {"problem": 156, "code": "(fn [defa lis] (zipmap lis (repeat defa)))", "user": "5713f693e4b07c98581c3ab0"}, {"problem": 156, "code": "#(loop [keys %2\n        m {}]\n   (if (empty? keys) \n     m\n     (recur (rest keys) (conj m {(first keys) %1 }))))", "user": "56c89c2ce4b0ed865f9758d4"}, {"problem": 156, "code": "(fn [x y] (into {}  (map #(vector % x ) y)))", "user": "57124786e4b09c608db70457"}, {"problem": 156, "code": "#(zipmap %2 (for [x (range (count %2) )] %1 ))", "user": "5710c24be4b09c608db70439"}, {"problem": 156, "code": "#(apply conj {} (for [x %2] [x %1]))", "user": "5712854ce4b07c98581c3a89"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %)))", "user": "5714401fe4b07c98581c3ab7"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "570ed30ae4b0b0fb43fd06f6"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5707e579e4b0b0fb43fd0694"}, {"problem": 156, "code": "(fn [def_val key_vect] \n          (reduce\n            (fn [result k] (assoc result k def_val)) {} key_vect ) )", "user": "57167214e4b07c98581c3af8"}, {"problem": 156, "code": "(fn [v coll] (reduce #(assoc %1 %2 v) {} coll))", "user": "571446c0e4b07c98581c3ab9"}, {"problem": 156, "code": "(fn [x s] (reduce #(assoc %1 %2 x) {} s))", "user": "570794d8e4b0b0fb43fd068b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5714614ee4b07c98581c3abd"}, {"problem": 156, "code": "(fn [v s] (into {} (map #(vector % v) s)))", "user": "5717e367e4b07c98581c3b1d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5714e82ae4b07c98581c3ac9"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "57015a1de4b08d47c97781d4"}, {"problem": 156, "code": "(fn [v coll]\n  (into {} (for [x coll] {x v})))", "user": "5716d585e4b07c98581c3b03"}, {"problem": 156, "code": "(fn [v m] (reduce #(assoc %1 %2 v) {} m))", "user": "5717d674e4b07c98581c3b1a"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "570e6974e4b0b0fb43fd06ef"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5646bb8fe4b0284900eef614"}, {"problem": 156, "code": "(fn [dv kv] \n  (apply hash-map (interleave kv (repeat (count kv) dv))))", "user": "5713c575e4b07c98581c3aab"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "571f341de4b0145328a762a0"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "571aad45e4b07c98581c3b59"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "56df629fe4b0ca2494a095ee"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "56df63e1e4b0ca2494a095f6"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "56df7440e4b0ca2494a095fb"}, {"problem": 156, "code": "(fn [d k]\n  (reduce #(assoc %1 %2 d) {} k))", "user": "55f8fd70e4b03cbcff9738bc"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "56df6498e4b0ca2494a095f8"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "56df6417e4b0ca2494a095f7"}, {"problem": 156, "code": "(fn mapDefault\n  [number list]\n  (apply hash-map (interleave list (repeat (count list) number))))", "user": "56fe2a2fe4b08d47c97781ad"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %)))", "user": "571e6d73e4b0145328a76292"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "57201f14e4b0c5bde472c08e"}, {"problem": 156, "code": "(fn [defval init-keys]\n(loop [res {}, key init-keys]\n(if (empty? key)\nres\n(recur\n(assoc res (first key) defval)\n(rest key))\n)))", "user": "570cd4bde4b0b0fb43fd06cf"}, {"problem": 156, "code": "(fn [v col]\n  (apply hash-map (interleave col (map (constantly v) col))))", "user": "571e5c9ee4b0145328a76290"}, {"problem": 156, "code": "#(apply array-map (conj (vec (interpose %1 %2)) %1))", "user": "56f86f98e4b08e7d20b96837"}, {"problem": 156, "code": "(fn [x y]\n  (into {} (for [y-item y]\n              [y-item x])))", "user": "56de78fde4b0ea9b8538f83c"}, {"problem": 156, "code": "(fn [defval keyset]\n   (reduce #(assoc %1 %2 defval) {} keyset))", "user": "571cd9dce4b0145328a76271"}, {"problem": 156, "code": "(fn test [a1 a2] (loop [a3 a2 acc {}] (if (empty? a3) acc (recur (rest a3) (assoc acc (first a3) a1)))))", "user": "5720ba36e4b0c5bde472c09c"}, {"problem": 156, "code": "(fn [default ks] (into {} (map #(vector % default) ks)))", "user": "4e68c434535d8ccf87e9fe89"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "57210e8ee4b0c5bde472c0a8"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5684c439e4b04eec3ec5cfc1"}, {"problem": 156, "code": "(fn p-156\n  [keyy l]\n  (loop [s {}\n         l l]\n    (if (empty? l)\n      s\n      (recur (merge s {(first l) keyy}) (rest l)))))", "user": "56df636ae4b0ca2494a095f4"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5547b72be4b0a04f79299550"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5723e6d6e4b0c5bde472c0f1"}, {"problem": 156, "code": "(fn [d v] (reduce #(assoc % %2 d) {} v))", "user": "57035ccfe4b08d47c97781ef"}, {"problem": 156, "code": "(fn [d ks] (zipmap ks (repeat d)))", "user": "52afa8a1e4b0c58976d9acbe"}, {"problem": 156, "code": "(fn [default old-vec]\n  (reduce (fn [new-map k]\n            (assoc new-map k default))\n          {}\n          old-vec))", "user": "5722543ee4b0c5bde472c0c6"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5724f41ce4b0c5bde472c106"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "571dd145e4b0145328a76283"}, {"problem": 156, "code": "(fn [dv ik]\n  (loop [rk ik\n         omap {}]\n    (if (empty? rk)\n      omap\n      (let [[lk & nk] rk\n            omap (conj omap {lk dv})]\n        (recur nk omap)))))", "user": "555f620ce4b0a2eb076a39c3"}, {"problem": 156, "code": "(fn [default keys]\n  (zipmap keys (repeat default)))", "user": "57211a02e4b0c5bde472c0a9"}, {"problem": 156, "code": "(fn [v k] (->>\n  (map #(vector % v) k)\n  (map #(apply hash-map %))\n  (reduce conj)\n  ))", "user": "56df6846e4b0ca2494a095fa"}, {"problem": 156, "code": "(fn mf\n  ([d l]\n   (mf d (rest l) (conj {} [(first l) d])))\n  ([d l m]\n   (if (seq l)\n     (mf d (rest l) (conj m [(first l) d]))\n     m)))", "user": "57237a02e4b0c5bde472c0e5"}, {"problem": 156, "code": "#(into {} (for [k %2] [k %1]))", "user": "56aa4fa5e4b07966d5a8a085"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %1)))", "user": "529e8ba9e4b04e0c58e87b99"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %)))", "user": "56e9a56ae4b04a395b9a03fc"}, {"problem": 156, "code": "(fn [value keys]\n  (reduce #(assoc %1 %2 value) {} keys))", "user": "537cb3ade4b06839e8705e7d"}, {"problem": 156, "code": "(fn [d l] (apply assoc {} (interleave l (repeat d))))", "user": "57280b92e4b0c5bde472c14e"}, {"problem": 156, "code": "#(reduce (fn([a b] (assoc a b %1))) {} %2)", "user": "55e46caae4b050e68259b451"}, {"problem": 156, "code": "(fn [default v] (into {} (map (fn [x] (vector x default)) v)))", "user": "56d340fde4b0ea9b8538f7ab"}, {"problem": 156, "code": "(fn [default keyz] (reduce (fn [m k] (assoc m k default)) {} keyz) )", "user": "572ac718e4b0f4d77e651242"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "571ff1ebe4b0c5bde472c088"}, {"problem": 156, "code": "(fn q156 [default col]\n  (apply hash-map (apply concat (map (fn [v] (concat [v] [default])) col)))\n  )", "user": "54f5aa4ce4b0f2f3c5226e94"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "542a8d07e4b01498b1a71b43"}, {"problem": 156, "code": "(fn [x ls]\n  (reduce (fn [acc y] (conj acc {y x})) {} ls))", "user": "504e1c58e4b0f6ff3350c462"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54b0519be4b09f271ff37d14"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54249bcce4b01498b1a71afb"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "50a3bf08e4b0ceace084d495"}, {"problem": 156, "code": "(fn [v xs]\n    (reduce #(assoc %1 %2 v) {} xs))", "user": "55c9ff22e4b0e31453f649f3"}, {"problem": 156, "code": "(fn [default seq] (into {} (map #(reduce conj {% default}) seq)))", "user": "5722d621e4b0c5bde472c0d9"}, {"problem": 156, "code": "(fn [d c]\n (loop [ls c results {}]\n  (if (empty? ls)\n   results\n   (recur (rest ls) (conj results [(first ls) d]))\n  )\n )\n)", "user": "57213df6e4b0c5bde472c0ab"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "56d7f340e4b0ea9b8538f7df"}, {"problem": 156, "code": "(fn [n coll] (into {} (map #(assoc {} % n) coll)))", "user": "57283dbce4b0c5bde472c154"}, {"problem": 156, "code": "(fn map-default [dflt v]\n  (zipmap v (repeat (count v) dflt)))", "user": "572ea970e4b0cd1946bd0f89"}, {"problem": 156, "code": "#(apply assoc {}\n        (interleave %2 (repeat %1)))", "user": "572d41e6e4b0cd1946bd0f6d"}, {"problem": 156, "code": "(fn [default coll]\n  (apply hash-map (reverse (conj (interpose default coll) default))))", "user": "56620138e4b068f2fe63dc71"}, {"problem": 156, "code": "(fn [val keys]\n   (loop [keys keys\n          result {}]\n     (cond (empty? keys)\n           result\n           :else\n           (let [key (first keys)]\n             (recur (rest keys) (assoc result key val)))\n           )\n\n     ))", "user": "573107d5e4b0cd1946bd0fbc"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %)))", "user": "54b61cb1e4b05787c3b163b3"}, {"problem": 156, "code": "(fn [vVal vKeys]\n(zipmap vKeys (repeat vVal))\n       )", "user": "57309d7ee4b0cd1946bd0fb2"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "572f09f2e4b0cd1946bd0f94"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat (count %2) %1)))", "user": "56ff45e5e4b08d47c97781bb"}, {"problem": 156, "code": "(fn [val keys] (reduce #(assoc %1 %2 val) {} keys))", "user": "5733e4aee4b0cd1946bd0ffe"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "57202eb7e4b0c5bde472c090"}, {"problem": 156, "code": "(fn padded-map [dflt, ks] (reduce (fn [acc k] (assoc acc k dflt)) {} ks ))", "user": "561814bae4b06b1bb2182a1a"}, {"problem": 156, "code": "(fn[x,y] (zipmap y (repeat (count y) x)))", "user": "571172ece4b09c608db70446"}, {"problem": 156, "code": "(fn [default keys]\n  (loop [m {}\n         remaining-keys keys]\n    (if (empty? remaining-keys)\n      m\n      (recur\n       (assoc m (first remaining-keys) default)\n       (rest remaining-keys)))))", "user": "55f5b8d6e4b06e875b46ce8d"}, {"problem": 156, "code": "(fn [v a] (reduce conj (map #(hash-map % v) a)))", "user": "56ff7ffee4b08d47c97781be"}, {"problem": 156, "code": "#(\n    loop [  res {} vc %2 ]\n    (if vc\n      \n    (recur (conj res [(first vc)  %] ) (next vc))\n       res\n    \n    )\n    \n    \n    \n     \n)", "user": "5735ac67e4b0cd1946bd102b"}, {"problem": 156, "code": "(fn [def-val keys] (loop [val def-val [first-key & rest-keys] keys run-map {}] (if first-key (recur val rest-keys (assoc run-map first-key val)) run-map)))", "user": "571d9669e4b0145328a7627f"}, {"problem": 156, "code": "(fn mapdefault [v k]\n  (let [result {}]\n    (reduce conj (map (fn [ki] (conj result [ki v])) k))\n    )\n  )", "user": "518665cde4b0da5a5be3bad2"}, {"problem": 156, "code": "(fn [default coll] (reduce (fn [a b] (assoc a b default)) {} coll))", "user": "5256c4c1e4b0541d1855ba36"}, {"problem": 156, "code": "(fn [d coll]\n  (reduce #(conj %1 [%2 d]) {} coll))", "user": "5739fb92e4b0cd1946bd1083"}, {"problem": 156, "code": "(fn [default key-list]\n  (reduce (fn [m k] (assoc m k default)) {} key-list))", "user": "5739cbe4e4b0cd1946bd107c"}, {"problem": 156, "code": "#(apply hash-map (concat (interpose % %2) [%]))", "user": "55c3f19de4b0e31453f64991"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "56f0714de4b04a395b9a0479"}, {"problem": 156, "code": "(fn [x s] (reduce #(assoc %1 %2 x) {} s))", "user": "573ce277e4b05c31a32c080b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "573d58c8e4b05c31a32c0811"}, {"problem": 156, "code": "(fn [x ks]\n  (zipmap ks (repeat x)))", "user": "571d063ee4b0145328a76272"}, {"problem": 156, "code": "(fn [default keys]\n  (zipmap keys (repeat default)))", "user": "573b664ce4b0cd1946bd10a7"}, {"problem": 156, "code": "(fn [v st] (zipmap st (repeat (count st) v)))", "user": "573940e3e4b0cd1946bd106b"}, {"problem": 156, "code": "(fn [v coll]\n  (into {} (for [x coll] {x v})))", "user": "57090dffe4b0b0fb43fd06a6"}, {"problem": 156, "code": "(fn [n s] (zipmap s (repeat (count s) n)))", "user": "572c1f65e4b0cd1946bd0f4a"}, {"problem": 156, "code": "(fn [v coll]\n  (into {} (for [x coll] {x v})))", "user": "573ddfc2e4b05c31a32c081b"}, {"problem": 156, "code": ";; #(into {} (for [x %2] [x %1]))\n#(zipmap %2 (repeat %1))", "user": "57407ab3e4b05c31a32c0854"}, {"problem": 156, "code": "(fn [v kys] (apply hash-map (mapcat #(list % v) kys)))", "user": "57300c19e4b0cd1946bd0fa1"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "519d2a0be4b037b32803f9ae"}, {"problem": 156, "code": "(fn [v keys] \n  (apply hash-map (interleave keys (repeat v))))", "user": "56bb652ae4b0f26550335953"}, {"problem": 156, "code": "(fn [x y] (reduce #(assoc %1 %2 x) {} y))", "user": "573946b6e4b0cd1946bd106d"}, {"problem": 156, "code": "#(->> %2 (mapcat (fn [k] [k %1])) (apply hash-map))", "user": "55f5c118e4b06e875b46ce8e"}, {"problem": 156, "code": "(fn [v a-s]\n\t(loop [a-ss a-s\n\t\ta-m {}]\n\t\t(if (empty? a-ss)\n\t\t\ta-m\n\t\t\t(recur (rest a-ss)\n\t\t\t\t(assoc a-m (first a-ss) v)))))", "user": "573eb8f2e4b05c31a32c082f"}, {"problem": 156, "code": "(fn [v k] (zipmap k (repeat (count k) v)))", "user": "57458b82e4b009280f9f2b4e"}, {"problem": 156, "code": "(fn [default seq]\n  (reduce #(conj %1 {%2 default}) {} seq))", "user": "5746061ae4b009280f9f2b5b"}, {"problem": 156, "code": "(fn [val col] (zipmap col (repeat (count col) val)))", "user": "563431c1e4b0bfe05bf117bb"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "571a460ce4b07c98581c3b4d"}, {"problem": 156, "code": "(fn [d s]\n  (reduce #(assoc % %2 d) {} s))", "user": "573f3ccfe4b05c31a32c083f"}, {"problem": 156, "code": "#(reduce (fn [st el] (assoc st el %1)) {} %2)", "user": "57440f77e4b0c285004e8ab5"}, {"problem": 156, "code": "(fn [d ks] (reduce #(conj % {%2 d}) {} ks))", "user": "51647faae4b003cf19fdde3b"}, {"problem": 156, "code": "(fn f [v ks]\n  (reduce #(assoc %1 %2 v) {} ks))", "user": "53da059be4b0e771c302547e"}, {"problem": 156, "code": "(fn [default seq]\n  (reduce #(assoc % %2 default) {} seq))", "user": "56d30497e4b0ea9b8538f7a8"}, {"problem": 156, "code": "(fn [default someKeys]\n  (apply hash-map (interleave someKeys (repeat default))))", "user": "573c57ace4b0cd1946bd10c0"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5745ca24e4b009280f9f2b56"}, {"problem": 156, "code": "#(apply merge (for [x %2] {x %}))", "user": "573678eae4b0cd1946bd1034"}, {"problem": 156, "code": "(fn [default coll]\n  (reduce (fn [acc x]\n            (assoc acc x default)) {} coll))", "user": "57434103e4b0c285004e8a9e"}, {"problem": 156, "code": "(fn [v coll] (reduce #(assoc %1 %2 v) {} coll))", "user": "5749ab6ae4b009280f9f2b9f"}, {"problem": 156, "code": "(fn [default col] (zipmap col (repeat (count col) default)))", "user": "574a6681e4b02ea1147991f8"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "57480c4de4b009280f9f2b7e"}, {"problem": 156, "code": "(fn [default s]\n  (zipmap s (repeat default)))", "user": "57487084e4b009280f9f2b8c"}, {"problem": 156, "code": "(fn [x y] (reduce #(assoc %1 %2 x) {} y))", "user": "56fee4c0e4b08d47c97781b5"}, {"problem": 156, "code": "(fn [val keys]\n  (reduce #(assoc %1 %2 val) {} keys))", "user": "574c3a7ce4b02ea114799219"}, {"problem": 156, "code": "(fn [x y] (zipmap y (repeat x)))", "user": "574c5e18e4b02ea11479921b"}, {"problem": 156, "code": "(fn [v m] (reduce #(assoc % %2 v) {} m))", "user": "574af03ce4b02ea114799202"}, {"problem": 156, "code": "(fn [v coll]\n  (into {} (for [x coll] {x v})))", "user": "573de63fe4b05c31a32c081c"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "574a9132e4b02ea1147991fd"}, {"problem": 156, "code": "(fn [val sq]\n  (reduce (fn [acc item]\n            (into acc {item val})) {} sq))", "user": "56fed170e4b08d47c97781b2"}, {"problem": 156, "code": "(fn [default col] \n  (reduce #(assoc %1 %2 default) {} col))", "user": "5745bb9fe4b009280f9f2b54"}, {"problem": 156, "code": "(fn [value col]\n  (loop [c col m {}]\n     (if (empty? c)\n      m\n      (recur (butlast c) (assoc m (last c) value)))))", "user": "568384b4e4b0945ebc182a9a"}, {"problem": 156, "code": "(fn [v s] (reduce #(assoc % %2 v) {} s))", "user": "572ec4dde4b0cd1946bd0f8d"}, {"problem": 156, "code": "(fn map-default [default-value xs]\n  (into {} (map (fn [x] [x default-value]) xs)))", "user": "56ac81ace4b03c432f187347"}, {"problem": 156, "code": "(fn [default keys]\n  (zipmap keys (repeat default)))", "user": "570466e6e4b0b0fb43fd0663"}, {"problem": 156, "code": "#(reduce (fn [new-map k] (assoc new-map k %1)) {} %2)", "user": "57515f94e4b02ea114799287"}, {"problem": 156, "code": "(fn [defv k]\n  (zipmap k (repeat (count k) defv)))", "user": "57344edbe4b0cd1946bd1008"}, {"problem": 156, "code": "(fn\n  [default coll]\n  (reduce (fn [new-map coll-key] (assoc new-map coll-key default))\n          {}\n          coll))", "user": "570bd29be4b0b0fb43fd06c5"}, {"problem": 156, "code": "(fn [v sq] \n  (apply hash-map (interleave sq (repeat v))))", "user": "574e7be7e4b02ea114799242"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5716960de4b07c98581c3afd"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "57297fb2e4b0c6e51e0d2b1c"}, {"problem": 156, "code": "#(apply hash-map (interleave  %2 (repeat %1)))", "user": "57275898e4b0c5bde472c13e"}, {"problem": 156, "code": "(fn [d ks] (apply hash-map (interleave ks (repeat d))))", "user": "57533bc1e4b02ea1147992a6"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "57543efbe4b02ea1147992b7"}, {"problem": 156, "code": "(fn [default ks] (loop [d default\n                        k ks\n                        m {}]\n                   (if (nil? (first k))\n                     m\n                     (recur d (rest k) (conj m [(first k) d])))))", "user": "5753b6c6e4b02ea1147992af"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "57245755e4b0c5bde472c0f9"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "57552f39e4b02ea1147992c1"}, {"problem": 156, "code": "(fn [v k] (zipmap k (take (count k) (repeatedly (constantly v)))))", "user": "5744d088e4b009280f9f2b41"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "53ff602fe4b0de5c418485ff"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "574abbfbe4b02ea114799200"}, {"problem": 156, "code": "#(zipmap %2 (vec (repeat (count %2) %1)))", "user": "5751f2a2e4b02ea114799292"}, {"problem": 156, "code": "( fn defmap \n   [ defval keyseq ]\n   ( if ( empty? keyseq ) {}\n\t   ( conj\n\t     ( defmap defval ( rest keyseq ) )\n\t     [ ( first keyseq ) defval ]\n\t   )\n   )\n )", "user": "57561529e4b02ea1147992d3"}, {"problem": 156, "code": "(fn [x,y] (reduce merge (map (fn[a] {a x}) y)))", "user": "54283a7ae4b01498b1a71b2f"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5742760ce4b05c31a32c0876"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5757ba87e4b02ea1147992f9"}, {"problem": 156, "code": "#(reduce (fn [s x] (assoc s x %1)) {} %2)", "user": "575556fae4b02ea1147992c3"}, {"problem": 156, "code": "(fn [v k] (zipmap k (repeat (count k) v)))", "user": "5759cd46e4b02ea11479932e"}, {"problem": 156, "code": "(fn [d ks]\n  (apply hash-map (interleave ks (repeat d))))", "user": "5756f7d7e4b02ea1147992e9"}, {"problem": 156, "code": "(fn [x, keys] (reduce #(conj %1 {%2 x}) {} keys))", "user": "57597fade4b02ea11479931d"}, {"problem": 156, "code": "(comp (partial reduce into) #(map (fn [k] {k %1}) %2))", "user": "56b97792e4b0f26550335932"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "574dfcb8e4b02ea11479923a"}, {"problem": 156, "code": "(fn func [default keys-]\n  (apply hash-map (interleave keys- (repeat default))))", "user": "4ed9fe5f535d10e5ff6f5308"}, {"problem": 156, "code": "(fn [default syms] \n  (into {} \n        (vec (map (fn [sym] {sym default}) syms))))", "user": "55096255e4b06e50f9beb116"}, {"problem": 156, "code": "(fn [val coll]\n  (into {} \n    (map (fn [x] {x val}) coll)))", "user": "575683aee4b02ea1147992dc"}, {"problem": 156, "code": "#(loop [x %2 r {}] (if (first x) (recur (next x)   (conj r {(first x )%1} ) ) r)  )", "user": "551daeb9e4b030e6a24d00df"}, {"problem": 156, "code": "(fn mappy [init tab] (into {} (map #(-> {% init}) tab)))", "user": "575aa61ae4b02ea11479934e"}, {"problem": 156, "code": "(fn[va ma] (zipmap ma (replicate (count ma) va)))", "user": "575d26f0e4b02ea11479937b"}, {"problem": 156, "code": "(fn [x y] (zipmap y (repeat (count y) x)))", "user": "575996f6e4b02ea114799321"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "534fa1a8e4b084c2834f4ace"}, {"problem": 156, "code": "(fn [v col] (into {} (map vector col (repeat v))))", "user": "574a546ee4b02ea1147991f6"}, {"problem": 156, "code": "(fn [d coll] (reduce #(assoc %1 %2 d) {} coll))", "user": "575f2529e4b08062f99a4e7a"}, {"problem": 156, "code": "(fn [v k] (zipmap k (repeat (count k) v)))", "user": "575ab695e4b02ea114799350"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "52a1b624e4b04e0c58e87bde"}, {"problem": 156, "code": "(fn maps-def\n  [value keys]\n  (loop [result {} k keys]\n    (if (empty? k)\n      result\n      (recur (assoc result (first k) value) (rest k)))))", "user": "5746cb28e4b009280f9f2b68"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54f1e004e4b024c67c0cf8b9"}, {"problem": 156, "code": "#(zipmap %2 (replicate (count %2) %) )", "user": "575bd5f9e4b02ea114799365"}, {"problem": 156, "code": "(fn foo [v k]\n  (if (empty? k) {} (assoc (foo v (rest k)) (first k) v)))", "user": "5760715de4b08062f99a4e96"}, {"problem": 156, "code": "#(loop [x %2,retmap {}]\n   (if (empty? x) retmap \n     (recur (rest x) \n            (into retmap {(first x) %1}))))", "user": "575d63e9e4b02ea114799382"}, {"problem": 156, "code": "(fn make-map [v coll]\n  (reduce (fn [de ele] (conj de [ele v])) {} coll))", "user": "57606cfde4b08062f99a4e95"}, {"problem": 156, "code": "(fn [default col]\n  (loop [d default c col m {}]\n    (if (empty? c)\n      m\n     (recur d (rest c) (assoc m (first c) d)))))", "user": "562eeba2e4b0ab312c17ebc1"}, {"problem": 156, "code": "(fn mymap \n  ([value seqq]\n   (reduce #(assoc % %2 value) {} seqq))\n  ([v s &j](zipmap s (repeat v)))\n  )", "user": "5731e36be4b0cd1946bd0fc9"}, {"problem": 156, "code": "(fn [value coll] (into {} (map #(assoc {} % value) coll)))", "user": "5686b0c0e4b0dcc4269f4056"}, {"problem": 156, "code": "#(apply hash-map (interleave  %2 (repeat %1) ))", "user": "575d16f8e4b02ea114799377"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "57635e2de4b0994c1922fbbf"}, {"problem": 156, "code": "(fn [default keys]\n  (apply hash-map (interleave keys (repeat default))))", "user": "575595ede4b02ea1147992c7"}, {"problem": 156, "code": "(fn make-default-map [v k]\n  (apply merge (map (fn [x] {x v}) k)))", "user": "576000fce4b08062f99a4e8b"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "56fcd9dfe4b08d47c977819e"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5756eff6e4b02ea1147992e7"}, {"problem": 156, "code": "(fn [default-value coll-of-keys]\n  (reduce #(conj %1 [%2 default-value]) {} coll-of-keys))", "user": "5764457ae4b0994c1922fbf3"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "57462a4de4b009280f9f2b5d"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "57501c83e4b02ea11479926b"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "57642916e4b0994c1922fbee"}, {"problem": 156, "code": "(fn [v ks] (let [m (count ks)] (zipmap ks (repeat m v))))", "user": "57644395e4b0994c1922fbf2"}, {"problem": 156, "code": "(fn default-map\n  [val keys]\n  (reduce (fn [result key] (conj result [key val])) {} keys))", "user": "52ea025ae4b09f7907dd14b5"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "575fbe58e4b08062f99a4e87"}, {"problem": 156, "code": "#(into {} (map (fn [item] {item %1}) %2))", "user": "576584c1e4b0994c1922fc0e"}, {"problem": 156, "code": "#(reduce (fn [accum x] (assoc accum x %1)) {} %2)", "user": "5764cc01e4b0994c1922fc05"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "57607706e4b08062f99a4e97"}, {"problem": 156, "code": "(fn [n s] (reduce (fn [c n'] (assoc c n' n)) {} s))", "user": "5761a772e4b0994c1922fb95"}, {"problem": 156, "code": "(fn [v coll] (reduce #(assoc %1 %2 v) {} coll))", "user": "5763fa69e4b0994c1922fbe0"}, {"problem": 156, "code": "(fn [defval ks] \n  (zipmap ks (repeat (count ks) defval)))", "user": "5761724de4b0994c1922fb89"}, {"problem": 156, "code": "(fn [v ks]\n  (reduce\n    (fn [m k]\n      (assoc m k v))\n    {}\n    ks))", "user": "561d506ee4b064ca9f4b16aa"}, {"problem": 156, "code": "(fn  [d k] (apply hash-map (conj (into [] (interpose d k)) d )))", "user": "5737edb0e4b0cd1946bd1050"}, {"problem": 156, "code": "(fn [default coll]\n  (reduce #(assoc %1 %2 default) {} coll))", "user": "574ff497e4b02ea114799266"}, {"problem": 156, "code": "(fn map-default [val lkeys]\n  (reduce #(assoc %1 %2 val) {} lkeys))", "user": "574f1c24e4b02ea114799255"}, {"problem": 156, "code": "(fn \n  [x y]\n  (reduce #(assoc %1 %2 x) {} y))", "user": "57500d13e4b02ea114799268"}, {"problem": 156, "code": "#(apply assoc {} (mapcat vector %2 (repeat (count %2) %1)))", "user": "576a987be4b0a07e8fc1811b"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (vec (repeat (count ks) v))))", "user": "4eb955da535dfed6da9c6d50"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "57604a87e4b08062f99a4e91"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %)))", "user": "566b7a77e4b0a866af6896af"}, {"problem": 156, "code": "(fn [def-val col]\n  (reduce #(assoc %1 %2 def-val) {} col))", "user": "576d24ede4b0979f8965155b"}, {"problem": 156, "code": "(fn [x y]\n  (loop [tgt {}\n         k y]\n    (if (empty? k)\n      tgt\n      (recur (assoc tgt (first k) x) (rest k)))))", "user": "574a71b7e4b02ea1147991fb"}, {"problem": 156, "code": "(fn [v k] (into {} (map #(conj [%] v) k)))", "user": "514872f5e4b05514c84b7cbe"}, {"problem": 156, "code": "#(apply hash-map (vec (interleave %2 (repeat (count %2) %))))", "user": "56d91a53e4b0ea9b8538f7ee"}, {"problem": 156, "code": "#(zipmap %2 (map (constantly %1) %2))", "user": "55b0cc57e4b002ce9d5cbc25"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "576e3258e4b0979f89651574"}, {"problem": 156, "code": "#(into {} (map (fn [x] [x %1]) %2))", "user": "5742ec91e4b05c31a32c0883"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "576b4e6be4b0a07e8fc1812b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "56824e1be4b0945ebc182a91"}, {"problem": 156, "code": "(fn [v coll] (into {} (for [x coll] {x v})))", "user": "5446ea11e4b032a45b8693b7"}, {"problem": 156, "code": "(fn [value seqq] (into {} (map #(hash-map % value) seqq)))", "user": "57718d9fe4b0979f896515b6"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "576c0febe4b07c67f59d1fb8"}, {"problem": 156, "code": "(fn [v k]\n  (into {} (map #(identity [% v]) k)))", "user": "576a972ce4b0a07e8fc1811a"}, {"problem": 156, "code": "(fn [v ks] (into {} (map (fn [l] [l v]) ks)))", "user": "56012afde4b04bb52996e17c"}, {"problem": 156, "code": "(fn [default-value keys-to-set]\n                     (reduce\n                      (fn [map-with-defaults current-key]\n                        (assoc map-with-defaults current-key default-value))\n                        {}\n                        keys-to-set))", "user": "57759a45e4b0979f89651622"}, {"problem": 156, "code": "(fn\n  [val keys]\n  (loop [keys keys map {}]\n    (if (not= nil (first keys))\n      (recur (rest keys) (assoc map (first keys) val))\n      map\n      )\n    )\n  )", "user": "5772ddb0e4b0979f896515d4"}, {"problem": 156, "code": "(fn [v l] (reduce (fn [m k] (conj m {k v})) {} l))", "user": "57763002e4b0979f89651631"}, {"problem": 156, "code": "(\n fn [value h] (\n           reduce \n           (fn [acc v] (conj acc {v value}))           \n           {}\n               h\n           )\n  )", "user": "57762befe4b0979f8965162f"}, {"problem": 156, "code": "(fn [df ks] (into {} (map (fn [k] (hash-map k df)) ks)))", "user": "577629abe4b0979f8965162e"}, {"problem": 156, "code": "(fn [value ks] \n  (reduce #(assoc %1 %2 value) {} ks))", "user": "576d4791e4b0979f8965155f"}, {"problem": 156, "code": "(fn [defaultX mapX] (loop [result {} xs mapX] (if (= xs ()) result (recur (conj result {(first xs) defaultX}) (rest xs))  )))", "user": "5776903ee4b0979f8965163b"}, {"problem": 156, "code": "(fn aa[v k]\n  (into {} (map #(assoc {} %1 v) k)))", "user": "548f3ed8e4b0e286459a1236"}, {"problem": 156, "code": "(fn create-defaults [default keys]\n  (into {} (for [key keys] [key default])))", "user": "5776e21de4b0979f89651642"}, {"problem": 156, "code": "#(zipmap %2(repeat %1))", "user": "57783873e4b0979f8965165c"}, {"problem": 156, "code": "(fn [v k] (zipmap k (repeat v)))", "user": "5763818ae4b0994c1922fbc7"}, {"problem": 156, "code": "(fn [k vs]\n(into {} (map #(vector %1 %2) vs (repeat k))))", "user": "55d3780ee4b0e31453f64a66"}, {"problem": 156, "code": "(fn [d s] (into {} (map #(do [% d]) s)))", "user": "571346c0e4b07c98581c3a9b"}, {"problem": 156, "code": "(fn [x y]\n  (loop [tmp y result {}]\n    (if (empty? tmp)\n      result\n      (recur (rest tmp)(into result (array-map (first tmp) x)))\n      )\n    )\n  )", "user": "57750460e4b0979f8965160c"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "577202d2e4b0979f896515c0"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "576a8d02e4b0a07e8fc18117"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56c04bd3e4b060a8e693e3a6"}, {"problem": 156, "code": "(fn default-map\n  [val seq]\n  (if (empty? seq)\n      nil\n      (conj {(first seq) val} (default-map val (rest seq)))))", "user": "568bd448e4b0dcc4269f40a9"}, {"problem": 156, "code": "(fn [d vs] (into (sorted-map) (map (fn [v] {v d}) vs)))", "user": "5069874de4b01dc6af13f832"}, {"problem": 156, "code": "#(into {} (map (fn [x] [x %1]) %2))", "user": "577a8049e4b0d3393e5deafc"}, {"problem": 156, "code": "(fn [d a]\n  (into {} (map #(vector % d) a))\n  )", "user": "577a4dc2e4b0d3393e5deaf6"}, {"problem": 156, "code": "(fn [v m]\n  (reduce (fn [a k]\n    (merge {k v} a)\n  ) {} m)\n)", "user": "577aacf2e4b0d3393e5deb03"}, {"problem": 156, "code": "(fn [d m] (into {} (let [nm {}] (map #(merge nm {% d}) m))))", "user": "577a55d2e4b0d3393e5deaf7"}, {"problem": 156, "code": "(fn [x y] (into {} (map #(hash-map % x) y)))", "user": "5739ff3ae4b0cd1946bd1084"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "577bdf46e4b0d3393e5deb1f"}, {"problem": 156, "code": "(fn [x y]\n  (loop [X x\n         Y y\n         d {}]\n  \t(if (empty? Y)\n       d\n       (recur X (rest Y) (conj d [(first Y) X])))))", "user": "57716e11e4b0979f896515b2"}, {"problem": 156, "code": "#(into {} (for [i %2] [i %1]))", "user": "560c37b5e4b05f002753df2e"}, {"problem": 156, "code": "(fn [value col] (into {} (map #(hash-map % value) col)))", "user": "577b9cfde4b0d3393e5deb16"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %)))", "user": "57609d91e4b08062f99a4e9b"}, {"problem": 156, "code": "(fn [default vec] (into {} (map vector vec (repeat default))))", "user": "551afdf8e4b07993ea3788cb"}, {"problem": 156, "code": "(fn map-with-default-values [default-value keys-to-map]\n  (apply merge (map #(identity {% default-value}) keys-to-map)))", "user": "5777bb7ee4b0979f8965164d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "4ecf5ee1535d44c135fd68b7"}, {"problem": 156, "code": "(fn [default coll] (reduce (fn [x y] (assoc x y default)) {} coll))", "user": "577a444be4b0d3393e5deaf5"}, {"problem": 156, "code": "(fn myfunc [defValue keys] \n  (when (first keys) \n    (conj {(first keys) defValue} (myfunc defValue (rest keys)))\n   )\n )", "user": "577e9c9fe4b0c8d87281f6ed"}, {"problem": 156, "code": "#(into {} (map (fn [a] [a %]) %2))", "user": "5776f39de4b0979f89651643"}, {"problem": 156, "code": "(fn [d v]\n  (into (hash-map) (map #(assoc {} % d) v)))", "user": "56ebfb93e4b04a395b9a042e"}, {"problem": 156, "code": "(fn [default coll] (apply assoc {} (interleave coll (cycle [default]))))", "user": "577829f9e4b0979f8965165a"}, {"problem": 156, "code": "#(reduce (fn [new-map arr]\n         (assoc new-map arr %1))\n        {}\n        %2)", "user": "576d6266e4b0979f89651563"}, {"problem": 156, "code": "(fn [default kys]\n  (reduce #(assoc %1 %2 default) {} kys))", "user": "566096d0e4b068f2fe63dc5a"}, {"problem": 156, "code": "(fn [d s] (reduce #(assoc %1 %2 d) {} s))", "user": "55ff2f89e4b00f4cabc5765e"}, {"problem": 156, "code": "(fn [v k] (zipmap k (repeat v)))", "user": "577ab41fe4b0d3393e5deb05"}, {"problem": 156, "code": "(fn [v k]\n  (let [l (repeat (count k) v)]\n    (zipmap k l)))", "user": "5151d574e4b03e678e393ae0"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "576df252e4b0979f8965156f"}, {"problem": 156, "code": "(fn [default ks] \n  (reduce #(assoc %1 %2 default) {} ks)\n)", "user": "5097cf53e4b00ad8bab4e976"}, {"problem": 156, "code": "(fn [default, coll] (into {} (map #(vector % default) coll)))", "user": "578273d9e4b0d36ec5835e95"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "57615a22e4b0994c1922fb88"}, {"problem": 156, "code": "(fn [v coll]\n  (into {} (for [x coll] {x v})))", "user": "577bfef9e4b0d3393e5deb2d"}, {"problem": 156, "code": "(fn [default coll]\n  (reduce \n   (fn [acc el]\n     (into acc (vector(vector el default)))\n     )\n   {}\n   coll\n   )\n  )", "user": "5776558ee4b0979f89651633"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "57691cf3e4b0a07e8fc180e7"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5776385fe4b0979f89651632"}, {"problem": 156, "code": "#(loop [x %2 result {}]\n    (if (> (count x) 0) (recur (rest x) (conj result (vector (first x) %1))) result))", "user": "575e71a2e4b0846ea39baf26"}, {"problem": 156, "code": "(fn md [v k]\n  (if (= 0 (count k))\n    {}\n    (assoc (md v (rest k)) (first k) v)))", "user": "56327168e4b0bfe05bf117a5"}, {"problem": 156, "code": "(fn [x y] (into {} (map #(hash-map % x) y)))", "user": "56f8bc1de4b07572ad1a88a6"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "4dfe5a93535d04ed9115e786"}, {"problem": 156, "code": "(fn map-with-defaults [default-value keys]\n  (into {} (map\n            (fn [key] [key default-value])\n            keys)))", "user": "551bdefde4b07993ea3788d7"}, {"problem": 156, "code": "(fn mapWithDefaults [d keyList]\n  ;; d is the default value\n  ;; keyList is a seq of key values\n  ;; returns a map of the keys using the default values\n  \n  (into {}\n    (map #(hash-map % d) keyList)\n    ;(for [k keyList]\n    ;  [k d]\n    ;)\n  )\n)", "user": "571aae1fe4b07c98581c3b5a"}, {"problem": 156, "code": "(fn [d ks]\n    (loop [kys ks \n          result {}]\n     (if (seq kys)\n       (recur (rest kys) (assoc result (first kys) d))\n       result)))", "user": "56fc9a2de4b08d47c977819b"}, {"problem": 156, "code": ";(apply conj (map #(hash-map % 10) [1 2 3 4]))\n\n(fn [v coll] \n  (apply conj  (map (fn [x] (hash-map x v)) coll)))", "user": "5785de43e4b0ebec4cfb74e5"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "577fa91ee4b0d36ec5835e6a"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "55c4cda5e4b0e31453f649a5"}, {"problem": 156, "code": "(fn [d ks] (zipmap ks (repeat (count ks) d)))", "user": "5783cd26e4b0ebec4cfb74be"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "4f8ac2bde4b02e764a0a5172"}, {"problem": 156, "code": "(fn [default ks] (zipmap ks (repeat default)))", "user": "575ef4b6e4b08062f99a4e78"}, {"problem": 156, "code": "(fn [x coll]\n  (zipmap coll (repeat (count coll) x)))", "user": "5785de4ce4b0ebec4cfb74e6"}, {"problem": 156, "code": "(fn [v m]\n  (apply hash-map (interleave m (repeat v))))", "user": "5705e404e4b0b0fb43fd0676"}, {"problem": 156, "code": "(fn [default k]\n  (into {} (map #(hash-map % default) k)))", "user": "55a3d7c7e4b0acc240e3153d"}, {"problem": 156, "code": "#(reduce (fn [accumulated item]\n           (conj accumulated [item %1]))\n         {}\n         %2)", "user": "5793adf0e4b0e215f87e8462"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %1)))", "user": "57839ae9e4b0ebec4cfb74b8"}, {"problem": 156, "code": "(fn [val keys] (apply hash-map (conj (apply vector (interpose val keys)) val)))", "user": "5790e62ae4b0ebec4cfb75b0"}, {"problem": 156, "code": "(fn [d lst]\n  (into {} (map #(conj [%] d) lst)))", "user": "55ede35ce4b0121d4835fde1"}, {"problem": 156, "code": "(fn [d coll] (into {} (map #(vector % d) coll)))", "user": "578e2829e4b0ebec4cfb757d"}, {"problem": 156, "code": "#(reduce (fn [rez value] (conj rez [value %1])) {} %2)", "user": "5795f1f1e4b0e215f87e8490"}, {"problem": 156, "code": "(fn [default kkeys]\n  (reduce #(assoc % %2 default) {} kkeys))", "user": "5783c505e4b0ebec4cfb74bc"}, {"problem": 156, "code": "(fn [val key] (into {} (for [k key] [k val])))", "user": "5751fda4e4b02ea114799295"}, {"problem": 156, "code": "(fn [d ks]\n  (reduce\n   (fn [result k]\n     (assoc result k d))\n   {} ks))", "user": "57958dace4b0e215f87e8484"}, {"problem": 156, "code": "(fn [num keytable]\n   (zipmap keytable (conj [] num num num)))", "user": "5795acb5e4b0e215f87e8486"}, {"problem": 156, "code": "(fn [d coll]\n  (apply conj (map #(hash-map % d) coll))\n  )", "user": "577c3da9e4b0c8d87281f6b9"}, {"problem": 156, "code": "(fn duff [defaultVal aList] \n  (reduce #(assoc %1 %2 defaultVal) {} aList ))", "user": "4f4aa932e4b0d56e7bb92c14"}, {"problem": 156, "code": "(fn [d ks] (apply hash-map (interleave ks (repeat d))))", "user": "5798205ce4b039eba2ecb10e"}, {"problem": 156, "code": "(fn [dv ks]\n  (into {} (for [k ks]\n             [k dv])))", "user": "54c611d1e4b045293a27f627"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "5799cae4e4b05b1deef9adcb"}, {"problem": 156, "code": "(fn [d ks] (apply hash-map (interleave ks (repeat d))))", "user": "57982bace4b039eba2ecb10f"}, {"problem": 156, "code": "(fn [x k] (reduce #(conj %1 [%2 x]) {} k))", "user": "5799ff45e4b05b1deef9add1"}, {"problem": 156, "code": "(fn [x col] (reduce conj (map #(assoc {} % x) col)))", "user": "579aff09e4b05b1deef9ade7"}, {"problem": 156, "code": "(fn my-default [d1 s1] (if (not (nil? (first s1))) (conj {(first s1) d1} (my-default d1 (rest s1)))))", "user": "5795dbe0e4b0e215f87e848c"}, {"problem": 156, "code": "(fn [x coll] (apply hash-map (interleave coll (for [k coll] x))))", "user": "5797d4bae4b039eba2ecb107"}, {"problem": 156, "code": "(fn [v m]\n  (reduce (fn [mm n]\n            (conj mm {n v})\n            )  {} m))", "user": "579601c8e4b0e215f87e8492"}, {"problem": 156, "code": "(fn test [x y] (reduce #(assoc %1 %2 x) {} y))", "user": "57752a2de4b0979f89651613"}, {"problem": 156, "code": "(fn [dval keys] \n  (zipmap keys (repeat dval)))", "user": "5786c182e4b0ebec4cfb74fd"}, {"problem": 156, "code": "(fn [default coll] (into (sorted-map) (map #(hash-map % default) coll)))", "user": "577aad81e4b0d3393e5deb04"}, {"problem": 156, "code": "(fn r [v ks] (if-not (empty? ks) (conj (hash-map (first ks) v) (r v (rest ks))) {}))", "user": "579c35fee4b05b1deef9ae04"}, {"problem": 156, "code": "(fn [default vect] (reduce #(assoc %1 %2 default) {} vect))", "user": "5691ef12e4b0dcc4269f40f8"}, {"problem": 156, "code": "(fn [a b] (loop [v a k b result {}] (if-not (empty? k) (recur v (rest k) (conj result {(first k) v})) result )))", "user": "4f035fbe535dcb61093f6a92"}, {"problem": 156, "code": "(fn[key col] \n    (loop [res {}, col-ele col]\n      (if (empty? col-ele)\n        res\n        (recur\n          (assoc res (first col-ele) key)\n          (rest col-ele))\n      )))", "user": "5799b260e4b05b1deef9adc8"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "577898d5e4b0979f89651664"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5695b86de4b0dcc4269f412b"}, {"problem": 156, "code": "(fn default-map [default-value the-vector]\n  (apply merge ; Flattens down the seq of maps\n   (map #(hash-map % default-value) the-vector)))", "user": "5782ce69e4b0d36ec5835e9a"}, {"problem": 156, "code": "(fn map-defaults\n  [val keys]\n  (let [m {}]\n    (reduce merge (map #(assoc m % val) keys)\n     )))", "user": "579d1567e4b05b1deef9ae12"}, {"problem": 156, "code": "#(reduce (fn [acc x] (assoc acc x %1)) {} %2)", "user": "545b486ae4b01be26fd7464f"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "579e15a6e4b05b1deef9ae20"}, {"problem": 156, "code": "#(into (hash-map) (map vector %2 (repeat (count %2) %1)))", "user": "578e535de4b0ebec4cfb7580"}, {"problem": 156, "code": "#(apply hash-map (concat (interpose % %2) [%]))", "user": "55afba88e4b002ce9d5cbc17"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat (count %2) %1)))", "user": "57873017e4b0ebec4cfb7503"}, {"problem": 156, "code": "#(zipmap %2 (map (constantly %1) %2))", "user": "5688c95de4b0dcc4269f4070"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %1)))", "user": "57717915e4b0979f896515b3"}, {"problem": 156, "code": "(fn [df ks] (reduce (fn [m k] (assoc m k df)) {} ks))", "user": "57a178ade4b0c3d858beb8ec"}, {"problem": 156, "code": "(fn [defaultval keylist]\n (loop [newmap {} newkeylist keylist] \n  (if (empty? newkeylist)\n    newmap\n  \t(recur (assoc newmap (first newkeylist) defaultval) (rest newkeylist))\n    )\n   )\n  )", "user": "57a13745e4b0c3d858beb8e3"}, {"problem": 156, "code": "(fn [dflt seq] (loop [sq seq acc {}] (if (empty? sq) acc (recur  (rest sq) (assoc acc (first sq) dflt)))))", "user": "57a22c85e4b0c3d858beb8f6"}, {"problem": 156, "code": "(fn [v ks]\n  (let [make-vals (fn [len value]\n                    (loop [output []]\n                      (if (>= (count output) len)\n                        output\n                        (recur (conj output value)))))]\n    (zipmap ks (make-vals (count ks) v))))", "user": "57a310b4e4b0c3d858beb90c"}, {"problem": 156, "code": "(fn [value sequence]\n  (into {} (map #(hash-map % value) sequence)))", "user": "579fa28fe4b0264b925669fb"}, {"problem": 156, "code": "(fn [def-val seq] (into {} (map #(hash-map % def-val) seq)))", "user": "5227eacee4b0186687e23a5e"}, {"problem": 156, "code": "(fn [v k] (zipmap k (repeat v)))", "user": "5791eb67e4b030fa88156d8d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "57509096e4b02ea114799277"}, {"problem": 156, "code": "(fn [default-value the-map]\n  (reduce #(assoc %1 %2 default-value) {} the-map))", "user": "57a4f5cae4b0a966079561f0"}, {"problem": 156, "code": "(fn [d keys] (reduce (fn [m k] (assoc m k d)) {} keys))", "user": "57a5bdc4e4b0a966079561fd"}, {"problem": 156, "code": "(fn [default coll]\n  (into\n    {}\n    (map\n      (fn [key] [key default])\n      coll)))", "user": "579dd954e4b05b1deef9ae1b"}, {"problem": 156, "code": "(fn [default coll] (into (sorted-map) (map #(hash-map % default) coll)))", "user": "56014f55e4b04bb52996e184"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "563c6ebae4b0bfe05bf11834"}, {"problem": 156, "code": "(fn [v m] \n   (apply hash-map (interleave m (repeat (count m) v))))", "user": "57a774e4e4b0a96607956213"}, {"problem": 156, "code": "(fn\n    [v keys]\n\n    (apply hash-map\n      (mapcat\n        (fn [k]\n          [k v]\n        )\n        keys\n      )\n    )\n)", "user": "5784e177e4b0ebec4cfb74cf"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (take (count %2) (repeat %1))))", "user": "579d9601e4b05b1deef9ae18"}, {"problem": 156, "code": "(fn [v cols] (zipmap cols (repeat v)))", "user": "57995ac1e4b05b1deef9adbf"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "57a9dd41e4b0b8559636fc5c"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "57aa4775e4b0b8559636fc6b"}, {"problem": 156, "code": "#(into {} (for [x %2]\n          (hash-map x %1)))", "user": "57a4ffdce4b0a966079561f3"}, {"problem": 156, "code": "(fn [i col] (reduce (fn [p k] (assoc p k i)) {} col))", "user": "57aa290de4b0b8559636fc65"}, {"problem": 156, "code": "(fn [default list] (into {} (for [x list] {x default})))", "user": "57aa103be4b0b8559636fc64"}, {"problem": 156, "code": "(fn [v m]\n\t(into {}\n\t (map\n\t  #(hash-map % v) m)))", "user": "57a88e24e4b0a9660795621f"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (repeat v)))", "user": "579f89d5e4b05302be0b72ff"}, {"problem": 156, "code": "#(->> (for [k %2] {k %1})\n      (into {}))", "user": "579ea15ee4b05b1deef9ae2a"}, {"problem": 156, "code": "(fn [value keys]\n  (reduce (fn [c key]\n            (assoc c key value))\n          {}\n          keys))", "user": "57ad0950e4b0b8559636fc97"}, {"problem": 156, "code": "(fn [v ks]\n  (reduce #(assoc %1 %2 v) {} ks))", "user": "5788f357e4b0ebec4cfb7527"}, {"problem": 156, "code": "(fn [default keys]\n    (into {} (map #(assoc {} % default) keys)))", "user": "548b7db8e4b0e286459a11fd"}, {"problem": 156, "code": "(fn [d v]\n  (reduce \n   (fn [r k] (assoc r k d))\n   {}\n   v))", "user": "56f53c61e4b046a417f9206d"}, {"problem": 156, "code": "(fn [seqvalue seqkeys] \n  (zipmap seqkeys (repeat seqvalue)))", "user": "57a99d3fe4b0a96607956231"}, {"problem": 156, "code": "(fn [d ke] (zipmap ke (repeat d)))", "user": "578f5122e4b0ebec4cfb7592"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5075e374e4b09049dea827a5"}, {"problem": 156, "code": "(fn [default-value ks] (into {} (map #(-> [% default-value]) ks)))", "user": "57afd36de4b0fbc9809a273c"}, {"problem": 156, "code": "(fn [default keys] (reduce #(conj %1 {%2 default}){} keys))", "user": "56483f45e4b0284900eef62b"}, {"problem": 156, "code": "(fn add-default [value collec]\n\t(if (empty? collec)\n\t{}\n\t(assoc (add-default value (rest collec))\n\t       (first collec) \n\t       value)))", "user": "57af36eae4b0fbc9809a272e"}, {"problem": 156, "code": "(second [\n(fn [a b] (into {} (map #(do [% a]) b)))\n(fn [a b] (into {} (map vector b (repeat a))))\n\t\t])", "user": "57b09d41e4b0fbc9809a2746"}, {"problem": 156, "code": "(fn [a b] (into {} (map vector b (repeat a) ) ) )", "user": "57b1a72fe4b0fbc9809a2755"}, {"problem": 156, "code": ";(fn [default input]\n ; (loop [in input out {}]\n  ;  (if (empty? in)\n   ;   out\n    ;  (recur\n     ;   (rest in)\n      ;  (conj out [(first in) default])))))\n\n; Solution 2\n (fn [d coll]\n   (into {} (for [i coll]\n              (sorted-map i d))))", "user": "567a3112e4b05957ce8c6196"}, {"problem": 156, "code": "(fn [x y] \n  ;x = 0\n  ;y = [:a :b :c]\n  (apply hash-map (interleave y (repeat (count y) x))))", "user": "554b8b65e4b0a04f7929958a"}, {"problem": 156, "code": "#(apply hash-map (mapcat (fn[x] [x %1]) %2))", "user": "57ab41dde4b0b8559636fc79"}, {"problem": 156, "code": "(fn [x y] (reduce (fn [col s] (assoc col s x)) {} y))", "user": "57908d94e4b0ebec4cfb75ac"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "4fb0ccbfe4b081705acca26e"}, {"problem": 156, "code": "(fn setdef\n  [x kvec]\n  (loop [ivec kvec defa x i 0 out {}]\n    (cond (empty? ivec) out\n          :else (recur (rest ivec) defa (inc i) (assoc out (first ivec) defa)))))", "user": "57acee37e4b0b8559636fc94"}, {"problem": 156, "code": "(fn [x ks]\n  (reduce #(assoc %1 %2 x) {} ks))", "user": "5655d811e4b0f9d632dd849a"}, {"problem": 156, "code": "(fn [default k-seq] (zipmap k-seq (repeat (count k-seq) default)))", "user": "57b34512e4b0fbc9809a2777"}, {"problem": 156, "code": "(fn [value s] (into {} (vec (map (fn [x] (vector x value)) s))))", "user": "573c813be4b0cd1946bd10c5"}, {"problem": 156, "code": "(fn [v coll]\n  (into {} (for [x coll] {x v})))", "user": "562a58e8e4b00e49c7cb4822"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "57ac7710e4b0b8559636fc88"}, {"problem": 156, "code": "(fn [x y] (zipmap y (repeat x)))", "user": "4e837808535db62dc21a62d9"}, {"problem": 156, "code": "(fn [v coll]\n  (into {} (for [x coll] {x v})))", "user": "57a1478ae4b0c3d858beb8e5"}, {"problem": 156, "code": "(fn [def-val keeeys]\n  (apply hash-map\n         (concat (interpose def-val keeeys) (list def-val))))", "user": "57b5c29ee4b0fbc9809a27b1"}, {"problem": 156, "code": "(fn [value keys]\n  ((fn [remaining result] \n     (if (= remaining [])\n       result\n       (recur (rest remaining) (assoc result (first remaining) value) )  ) ) keys {} ))", "user": "57b55290e4b0fbc9809a27a9"}, {"problem": 156, "code": "(fn [v c] (apply hash-map (apply concat (map #(do [% v]) c))))", "user": "57addbcce4b0b8559636fca3"}, {"problem": 156, "code": "(fn[d k](zipmap k (repeat d)))", "user": "57b3efb1e4b0fbc9809a278a"}, {"problem": 156, "code": "(fn [d s] (apply merge (let [m {}] (map #(conj m [%1 d]) s))))", "user": "57b65c9be4b0fbc9809a27c0"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "57b63e19e4b0fbc9809a27b9"}, {"problem": 156, "code": "(fn map-defaul\n  [val xs]\n  (zipmap xs (repeat val)))", "user": "57b4779de4b0fbc9809a279a"}, {"problem": 156, "code": "(fn [v ks] (reduce (fn [y z] (assoc y z v)) {} ks))", "user": "57b8b008e4b0fbc9809a27e6"}, {"problem": 156, "code": "(fn [default s]\n  (zipmap s (repeat default)))", "user": "57a0f7cfe4b0c3d858beb8de"}, {"problem": 156, "code": "#(zipmap %2(repeat %))", "user": "57b88091e4b0fbc9809a27e1"}, {"problem": 156, "code": "(fn[v k] (apply hash-map (mapcat #(list %1 v) k)))", "user": "57b9fc74e4b0fbc9809a27fb"}, {"problem": 156, "code": "(fn [v coll] (apply hash-map (reduce #(into %1 [%2 v]) [] coll)))", "user": "57b9fb56e4b0fbc9809a27fa"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %)))", "user": "567ff160e4b0966858e4d8e6"}, {"problem": 156, "code": "(fn [x, m]\n  (loop [acc 0 lst m result {}]\n    (if (>= acc (count m))\n      result\n      (recur (inc acc) (rest lst) (assoc result (first lst) x)))))", "user": "57a7f7d8e4b0a96607956218"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "579e75fbe4b05b1deef9ae29"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "56bfd8ade4b060a8e693e3a2"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "57bbc9bde4b05aa3c4741c31"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "57974504e4b039eba2ecb0f5"}, {"problem": 156, "code": "(fn [default keys]\n  (loop [k keys m {}]\n        (if (empty? k)\n            m\n          (let [new-m (assoc m (first k) default)]\n            (recur (rest k) new-m)\n            )\n          )\n        )\n  )", "user": "57b9d21fe4b0fbc9809a27f7"}, {"problem": 156, "code": "(fn [v coll] (reduce #(assoc %1 %2 v) {} coll))", "user": "57b35772e4b0fbc9809a277c"}, {"problem": 156, "code": "#(into {} (map hash-map %2 (repeat %1)))", "user": "57b8f784e4b0fbc9809a27ea"}, {"problem": 156, "code": "(fn [val keys] (loop [map {} ks (seq keys)]  (if (and ks val) (recur (assoc map (first ks) val) (next ks)) map)))", "user": "5644611be4b0284900eef5f1"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "55b22c33e4b0da326a65cf79"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5784ff88e4b0ebec4cfb74d4"}, {"problem": 156, "code": "(fn [d ks] (into {} (for [k ks] [k d])))", "user": "548fa2dfe4b0e286459a1240"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "552e719be4b076ab5578f7f0"}, {"problem": 156, "code": "#(into (hash-map) (map (fn [x] [x %1]) %2))", "user": "56684356e4b04acd4f672de4"}, {"problem": 156, "code": "(fn [v s]\n  (apply hash-map (interleave s (take (count s) (iterate identity v)))))", "user": "57af41bce4b0fbc9809a2731"}, {"problem": 156, "code": "(fn mk [d k]\n  (reduce \n    (fn [a b]\n      (conj a {b d}))\n   \t{(first k) d}\n    (rest k)))", "user": "57befca6e4b05aa3c4741c70"}, {"problem": 156, "code": "(fn [default k]\n  (->>\n   (map (fn [i] {i default}) k)\n   (into {})))", "user": "57bfffc7e4b05aa3c4741c8a"}, {"problem": 156, "code": "(fn [x z] (zipmap z (repeat (count z) x)))", "user": "57b9bfdae4b0fbc9809a27f5"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "579332c2e4b0e215f87e8452"}, {"problem": 156, "code": "#(into {} (for [k %2] {k %1}))", "user": "57b60e46e4b0fbc9809a27b6"}, {"problem": 156, "code": "(fn [d m]\n  (reduce (fn [x y] (assoc x y d)) nil m))", "user": "57c3df67e4b05aa3c4741cc5"}, {"problem": 156, "code": "(fn [v ks] (reduce #(assoc %1 %2 v) {} ks))", "user": "56887bcbe4b0dcc4269f406a"}, {"problem": 156, "code": "(fn asghar[v s]\n  (reduce (fn[x [k v]](assoc x k v)) {} (partition 2 (interleave s (repeat v)))))", "user": "57bd960fe4b05aa3c4741c52"}, {"problem": 156, "code": "(fn [d k] (zipmap k (repeat d)))", "user": "57bc9375e4b05aa3c4741c43"}, {"problem": 156, "code": "(fn [d c] (apply hash-map (apply concat (map #(vector % d) c))))", "user": "57c3451fe4b05aa3c4741cbd"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))\n;#(into {} (for [v %2] [v %]))\n;(fn [i m] (reduce #(conj % [%2 i]) (sorted-map) m))", "user": "57ba55c1e4b0fbc9809a2801"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56e1122fe4b03a7c14b85a20"}, {"problem": 156, "code": "(fn [x y] (into {} (map #(assoc {} % x) y)))", "user": "57af3bace4b0fbc9809a2730"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "57bb60dce4b05aa3c4741c2a"}, {"problem": 156, "code": "(fn [def-val coll] (apply merge (for [cur-el coll] {cur-el def-val})))", "user": "57c7cef5e4b05aa3c4741d0d"}, {"problem": 156, "code": "(fn [default key-seq]\n  (zipmap key-seq (repeat default)))", "user": "57c70189e4b05aa3c4741cfb"}, {"problem": 156, "code": "(fn [v ks] (into {} (map #(vector % v) ks)))", "user": "57c796b4e4b05aa3c4741d08"}, {"problem": 156, "code": ";(reduce f coll)(reduce f val coll)\n(fn [dv s]\n  (reduce #(assoc %1 %2 dv) {} s))", "user": "4fc34787e4b081705acca33e"}, {"problem": 156, "code": "#(zipmap %2 (cycle [%1]))", "user": "57b45257e4b0fbc9809a2796"}, {"problem": 156, "code": "(fn [e ks] (into {} (map (fn [k] [k e]) ks)))", "user": "57c94c54e4b05aa3c4741d2c"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "55568a7de4b0deb715856e1c"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "572fdecae4b0cd1946bd0f9e"}, {"problem": 156, "code": "(fn [v l] (into (hash-map) (map #(vector % v) l)))", "user": "57c58ad6e4b05aa3c4741ce7"}, {"problem": 156, "code": "(fn [value, array] \n  (reduce #(assoc % %2 value) \n          {}\n          array))", "user": "57c2d66ae4b05aa3c4741cb9"}, {"problem": 156, "code": "(fn [d s] (into {} (map #(hash-map % d) s)))", "user": "515310b4e4b0d6806ecd26fb"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "57cacbf2e4b05aa3c4741d3e"}, {"problem": 156, "code": "(fn [default keys]\n  (zipmap keys (repeat default)))", "user": "56a80d8fe4b07966d5a8a06a"}, {"problem": 156, "code": "(fn [v c] (reduce #(assoc %1 %2 v) {} c))", "user": "57c7e7d9e4b05aa3c4741d0f"}, {"problem": 156, "code": "(fn [d ks]\n   (reduce #(assoc %1 %2 d) {} ks))", "user": "57cd7498e4b0c746388ab897"}, {"problem": 156, "code": "(fn [d k] (reduce (fn [a b] (assoc a b d)) {} k))", "user": "56c6a3c3e4b05cc29241eeb3"}, {"problem": 156, "code": "(fn [def-val keys]\n  (reduce #(conj %1 [%2 def-val]) {} keys))", "user": "57ca95f2e4b05aa3c4741d3b"}, {"problem": 156, "code": "(fn [value value-seq]\n  (zipmap value-seq [value value value]))", "user": "57b19fa1e4b0fbc9809a2754"}, {"problem": 156, "code": "(fn[val keys](into {} (map #(hash-map % val) keys)))", "user": "57c6bca1e4b05aa3c4741cf8"}, {"problem": 156, "code": "#(reduce (fn [colls c] (assoc colls c %1))\n         {} %2)", "user": "55db7e15e4b0e31453f64ae8"}, {"problem": 156, "code": "(fn [default, arr] (reduce (fn [old key] (assoc old key default)) (hash-map) arr))", "user": "57ccedaae4b0c746388ab88e"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "4f1052b9535d64f603146418"}, {"problem": 156, "code": "(fn [x coll]\n  (into {}\n        (for [v coll] {v x})))", "user": "555b43dfe4b0deb715856e4d"}, {"problem": 156, "code": "(fn [x y] (reduce (fn [acc k] (assoc acc k x)) {} y))", "user": "57c92bdbe4b05aa3c4741d27"}, {"problem": 156, "code": "(fn f [v c]\n\t(into {} (map #(vector % v) c))\n)", "user": "57c62aece4b05aa3c4741cf1"}, {"problem": 156, "code": "(fn [val keys] (zipmap keys (repeat val)))", "user": "57c176abe4b05aa3c4741ca2"}, {"problem": 156, "code": "(fn magic[value coll]\n  (loop [a coll\n         res {}]\n    (if (empty? a)\n      res\n      (recur (rest a) (conj {(first a) value} res )))\n   \n   )\n  \n  )", "user": "57cc14aae4b05aa3c4741d4a"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "4e84bb7e535db62dc21a62e3"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "57d418b4e4b0bd073c20239a"}, {"problem": 156, "code": "(fn [v coll]\n  (into {} (for [x coll] {x v})))", "user": "57c93af1e4b05aa3c4741d2a"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %)))", "user": "57c8208ce4b05aa3c4741d16"}, {"problem": 156, "code": "(fn [x ys] (into {} (map (fn [y] [y x]) ys)))", "user": "57d67e11e4b0bd073c2023c5"}, {"problem": 156, "code": "(fn default-populate-recur\n  ([default-value key-sequence] (default-populate-recur {} default-value key-sequence))\n  ([the-map default-value key-sequence] (if (empty? key-sequence) the-map (default-populate-recur (assoc the-map (first key-sequence) default-value) default-value (rest key-sequence))))\n)", "user": "57b356c2e4b0fbc9809a277b"}, {"problem": 156, "code": "(fn [defVal keys] (zipmap keys (repeat (count keys) defVal)))", "user": "53a3e7c6e4b0f1fc7453883a"}, {"problem": 156, "code": "(fn [new-map original coll]\n  (if (empty? coll)\n    new-map\n    (recur (assoc new-map (first coll) original) original (rest coll)))) {}", "user": "573d8658e4b05c31a32c0814"}, {"problem": 156, "code": "(fn [v m] (zipmap m (repeat v)))", "user": "57d9a1b0e4b0bd073c202403"}, {"problem": 156, "code": "(fn [x coll] (into {} (for [y coll] {y x})))", "user": "57d9bc53e4b0bd073c202404"}, {"problem": 156, "code": "(fn [x y] (into {} (map #(conj [%] x) y)))", "user": "4ed3c9d3535d44c135fd68f7"}, {"problem": 156, "code": "(fn [k, m] \n  (apply hash-map (mapcat #(list % k) m)))", "user": "57d1a0e6e4b0bd073c20236d"}, {"problem": 156, "code": "(fn [default keys]\n  (zipmap keys (repeat default)))", "user": "57dace50e4b0bd073c202416"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "57dda21be4b0bd073c202445"}, {"problem": 156, "code": "(fn [d m] (reduce #(conj %1 {%2 d}) {} m))", "user": "57ddb63fe4b0bd073c20244a"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "57c94c6ee4b05aa3c4741d2d"}, {"problem": 156, "code": "(fn [k xs]\n  (apply conj (map (fn [x] {x k}) xs))\n  )", "user": "57d7c894e4b0bd073c2023de"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "57dafe97e4b0bd073c20241c"}, {"problem": 156, "code": "(fn f [v l]\n  (into {}\n    (for [x l]\n      [x v])))", "user": "57d9f603e4b0bd073c20240a"}, {"problem": 156, "code": "(fn [x y]\n  (loop [ in y out {}]\n    (if (empty? in)\n    \tout\n    \t(recur (rest in) (assoc out (first in) x)))))", "user": "566d71b1e4b0a866af6896ca"}, {"problem": 156, "code": "(fn [a b] (zipmap b (repeat a)))", "user": "57de9acce4b0bd073c202456"}, {"problem": 156, "code": "(fn [default-val keys]\n    (apply hash-map (interleave keys (repeat default-val))))", "user": "55df1985e4b050e68259b3eb"}, {"problem": 156, "code": "#(zipmap %2 (take (count %2) (repeat %1)))", "user": "57d0cd58e4b0bd073c20235e"}, {"problem": 156, "code": "(fn map-defaults\n  [n xs]\n  (zipmap xs (into [] (repeat (count xs) n))))", "user": "57c500f9e4b05aa3c4741cda"}, {"problem": 156, "code": "(fn [default coll]\n   (reduce\n     (fn [a b] (assoc a b default)) {} coll))", "user": "57e0f3cce4b0bfb2137f5a67"}, {"problem": 156, "code": "(fn [d l] (reduce #(assoc %1 %2 d) {} l))", "user": "5650082fe4b0284900eef6b7"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "56df9203e4b0ca2494a095fc"}, {"problem": 156, "code": "(fn [x xs] (into {} (for [i xs] [i x])))", "user": "57c5ee11e4b05aa3c4741ceb"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "57d9cae9e4b0bd073c202409"}, {"problem": 156, "code": "(fn [fallback key-seq]\n\t(loop [elts key-seq \n           result {}]\n  \t\t(if (not (empty? elts))\n  \t\t\t(recur (rest elts) (assoc result (first elts) fallback))\n  \t\t\tresult\n        )\n    )\n)", "user": "57dd5e90e4b0bd073c202440"}, {"problem": 156, "code": "(fn [default values] (reduce (fn [p n] (assoc p n default)) {} values))", "user": "57e10705e4b0bfb2137f5a6a"}, {"problem": 156, "code": "(fn [default-val items]\n\t(reduce (fn [res, item] (conj res {item default-val})) {} items))", "user": "57dfab73e4b0bd073c202468"}, {"problem": 156, "code": "#(zipmap %2 (take (count %2) (repeat %1)))", "user": "57e139f6e4b0bfb2137f5a6c"}, {"problem": 156, "code": "(fn [d v] (reduce (fn [m k] (assoc m k d)) {} (reverse v)))", "user": "57b35ecbe4b0fbc9809a277e"}, {"problem": 156, "code": "(fn [value, keys] (zipmap keys (repeat value)))", "user": "57d0679ee4b0bd073c202359"}, {"problem": 156, "code": "(fn [d k]  (reduce #(conj %1 [%2 d]) {} k ))", "user": "57e22420e4b0bfb2137f5a85"}, {"problem": 156, "code": "#(apply merge (map (fn [k] {k %1}) %2))", "user": "57de5f0ee4b0bd073c202450"}, {"problem": 156, "code": "(fn [v coll] (reduce #(assoc %1 %2 v) {} coll))", "user": "57c8aed9e4b05aa3c4741d22"}, {"problem": 156, "code": "(fn [n coll]\n (zipmap coll (repeat (count coll) n)))", "user": "56020b3fe4b04bb52996e19b"}, {"problem": 156, "code": ";(fn [init c] \n;  (into {} \n;        (for [i c]\n;          (hash-map i init))))\n\n(fn [i c]\n  (into {} (map hash-map c (repeat i))))", "user": "5707abfce4b0b0fb43fd068d"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "57e0f30ae4b0bfb2137f5a66"}, {"problem": 156, "code": "(fn [v k] (into {} (for [each k] (assoc-in {} [each] v))))", "user": "56940617e4b0dcc4269f410b"}, {"problem": 156, "code": "(fn [d coll]\n   (apply hash-map\n     (apply concat\n       (for [e coll]\n         [e d]))))", "user": "56f9c7c6e4b07572ad1a88ba"}, {"problem": 156, "code": "(fn default-map\n  [default coll]\n  (reduce\n   \t; (fn [reduced key] (assoc reduced key default))\n\t#(assoc %1 %2 default)\n\t{}\n\tcoll))", "user": "57e37f90e4b0bfb2137f5a9c"}, {"problem": 156, "code": "(fn [default items] (into {} (map #(hash-map % default) items)))", "user": "57e2e1bde4b0bfb2137f5a8f"}, {"problem": 156, "code": "(fn \n  [x s]\n  ( into {} \n      (map (fn [k] [k x]) s) \n  )\n)", "user": "4e6a5728535d8ccf87e9fecf"}, {"problem": 156, "code": "(fn[dv,ks] (reduce (fn[x,y] (assoc x y dv))   {} ks) )", "user": "57e3d30be4b0bfb2137f5aab"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "57e33f6fe4b0bfb2137f5a96"}, {"problem": 156, "code": "(fn [default ks]\n  (apply conj {} (map vector ks (repeat default))))", "user": "571c2babe4b07c98581c3b73"}, {"problem": 156, "code": "(fn [default coll] (zipmap coll (repeat (count coll) default)))", "user": "56629a7de4b0e91d5f5c5649"}, {"problem": 156, "code": "(fn [ x y ]\n  (loop [ e y res {} ]\n    (if (empty? (rest e))\n      (assoc res (first e) x)\n      (recur (rest e) (assoc res (first e) x)))))", "user": "57e572b5e4b0bfb2137f5ad7"}, {"problem": 156, "code": "(fn [d l] (apply assoc {} (interleave l (repeat d))))", "user": "578b9978e4b0ebec4cfb754c"}, {"problem": 156, "code": "(fn [dvalue m]\n  (loop [result {} klist m]\n    (if (empty? klist)\n      result\n      (recur (assoc result (first klist) dvalue) (rest klist))\n    )\n  )\n)", "user": "57e396cde4b0bfb2137f5a9e"}, {"problem": 156, "code": "(fn [v col]\n  (into {} (for [x col] {x v})))", "user": "57df309ee4b0bd073c20245f"}, {"problem": 156, "code": "#(into {} (map vector  %2 (repeat %1)))", "user": "57e6997ee4b0bfb2137f5af0"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55c66ffee4b0e31453f649c2"}, {"problem": 156, "code": "(fn [v c]\n  (reduce (fn [m p]\n            (assoc m p v)) {} c))", "user": "57eb10b1e4b0bfb2137f5b5b"}, {"problem": 156, "code": "(fn [v, ks] (reduce conj (map #(hash-map % %2) ks (repeat v))))", "user": "57eb7a97e4b0bfb2137f5b62"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))\n;#(apply hash-map (mapcat vector %2 (repeat %1)))", "user": "57c1b32be4b05aa3c4741ca4"}, {"problem": 156, "code": "#(into {} (for [x %2 y [%1]] [x y]))", "user": "57ecc16fe4b0bfb2137f5b83"}, {"problem": 156, "code": "#(reduce (fn [final-map akey]\n         \t(into final-map {akey %1}))\n         {}\n         %2)", "user": "57e6ed35e4b0bfb2137f5af5"}, {"problem": 156, "code": "(fn joker [val keys] (reduce #(assoc %1 %2 val) {} keys))", "user": "57db2369e4b0bd073c20241f"}, {"problem": 156, "code": "(fn [val keys]\n    (into {}\n      (for [k keys]\n        {k val})))", "user": "532f7e12e4b019098a6f8b4e"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "554ea8fbe4b00713264bd999"}, {"problem": 156, "code": "(fn [default ks]\n  (reduce #(assoc %1 %2 default) {} ks))", "user": "574e84e0e4b02ea114799243"}, {"problem": 156, "code": "(fn [d ks] (reduce #(assoc %1 %2 d) {} ks))", "user": "57ee804ee4b0bfb2137f5bbb"}, {"problem": 156, "code": "#(loop [m {} l %2] \n   (if (empty? l) \n     m \n     (recur (assoc m (first l) %1) (rest l))))", "user": "57f0f7b8e4b0bfb2137f5bfe"}, {"problem": 156, "code": "(fn [val keys]\n  (reduce\n    (fn [hash key] (conj hash {key val}))\n    {}\n    keys))", "user": "57f11d72e4b0bfb2137f5c03"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "57485efee4b009280f9f2b8a"}, {"problem": 156, "code": "(fn [v ks] (reduce #(assoc %1 %2 v) {} ks))", "user": "57b39fbee4b0fbc9809a2783"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %)))", "user": "57596ba7e4b02ea11479931a"}, {"problem": 156, "code": "(fn [v coll]\n(reduce #(assoc %1 %2 v) {} coll))", "user": "57f3f2bee4b07bbd65c32b1a"}, {"problem": 156, "code": "(fn [v ks]\n   (loop [cks ks m {}]\n     (if (empty? cks)\n       m\n       (let [[k & remaining] cks]\n         (recur remaining (assoc m k v))\n         )\n       )\n     )\n  )", "user": "57f55632e4b0903ccab3dcf1"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "56a44067e4b0542e1f8d14da"}, {"problem": 156, "code": "(fn \n  [val list]\n  (reduce (fn \n            [acc curr] \n            (assoc acc curr val)) \n          {} list))", "user": "565418cde4b0f9d632dd847c"}, {"problem": 156, "code": "(fn [a b] (zipmap b (repeat (count b) a)))", "user": "57f81549e4b0d3187e900918"}, {"problem": 156, "code": "(fn [value key-lst]\n  (zipmap key-lst\n          (repeat (count key-lst) value)))", "user": "57f7fef6e4b0d3187e90090b"}, {"problem": 156, "code": "(fn [value key-lst]\n  \t(zipmap key-lst\n            (repeat (count key-lst) value)))", "user": "57f81532e4b0d3187e900914"}, {"problem": 156, "code": "(fn [arg lst]\n  (zipmap lst (repeat (count lst) arg)))", "user": "57f814fbe4b0d3187e900911"}, {"problem": 156, "code": "(fn [value key-lst]\n  (zipmap key-lst\n          (repeat (count key-lst) value)))", "user": "57f81534e4b0d3187e900915"}, {"problem": 156, "code": "(fn [value keysmap] \n  (zipmap keysmap \n          (repeat (count keysmap) value)))", "user": "57f8153de4b0d3187e900916"}, {"problem": 156, "code": "(fn[value key-lst]\n  (zipmap key-lst \n           (repeat (count key-lst) value)))", "user": "57f81544e4b0d3187e900917"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "57f6e666e4b0d3187e9008f2"}, {"problem": 156, "code": "(fn [d c] (reduce (fn [m k] (assoc m k d)) {} c))", "user": "57f7c74ee4b0d3187e900902"}, {"problem": 156, "code": "(fn [default keys]\n  (reduce #(assoc %1 %2 default) {} keys))", "user": "566ca8d6e4b0a866af6896bf"}, {"problem": 156, "code": "(fn [v m] (reduce #(conj %1 [%2 v]) {} m))", "user": "56795deae4b05957ce8c6187"}, {"problem": 156, "code": "(fn [dflt ks]\n  (loop [[k & kk] ks m {}]\n    (if (empty? kk) \n      (assoc m k dflt)\n      (recur kk (assoc m k dflt)))))", "user": "57f85b36e4b0d3187e900924"}, {"problem": 156, "code": "(fn [d k]\n  (apply hash-map\n   (apply concat\n   \t(map #(list %1 d) k))))", "user": "56e87a9ce4b04a395b9a03f0"}, {"problem": 156, "code": "(fn [a b] (into {} (for [x [a] y b] {y x})))", "user": "54012b48e4b0de5c41848620"}, {"problem": 156, "code": "(fn [v d] (reduce (fn [a e] (assoc a e v)) {} d))", "user": "57efb389e4b0bfb2137f5bdb"}, {"problem": 156, "code": "(fn map-generator [default keys] (zipmap keys (repeat default)))", "user": "57e15244e4b0bfb2137f5a70"}, {"problem": 156, "code": "(fn [v ks] (reduce (fn [m k] (assoc m k v)) {} ks))", "user": "57f80350e4b0d3187e90090c"}, {"problem": 156, "code": "(fn map-default [default coll]\n  (assoc {} (first coll) default)\n  (loop [l {} r coll]\n    (if (empty? r)\n      l\n      (recur \n       (assoc l (first r) default) \n       (rest r)))))", "user": "57ed19a3e4b0bfb2137f5b8e"}, {"problem": 156, "code": "(fn [value keys-seq]\n  (loop [in keys-seq out {}]\n    (if (= in [])\n      out\n      (recur (rest in) (conj {(first in) value} out)))))", "user": "57fb9d83e4b0d3187e900975"}, {"problem": 156, "code": "#(loop [res {}\n        ks %2]\n   (if (empty? ks)\n     res\n     (recur (conj res {(first ks) %1}) (rest ks))))", "user": "57f253a3e4b0511f1d294dea"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %1)))", "user": "57f9011ee4b0d3187e900935"}, {"problem": 156, "code": "#(loop [n %1 in %2 out {}] (if (empty? in) out (recur n (rest in) (into out {(first in) n}))))", "user": "57f9e0bce4b0d3187e900956"}, {"problem": 156, "code": "(fn [a b]\n  (reduce #(assoc %1 %2 a) {} b))", "user": "57fe2d6fe4b0d3187e9009c8"}, {"problem": 156, "code": "(fn reassoc [v kcoll]\n (if (empty? kcoll)\n  {}\n  (assoc\n   (reassoc v (pop kcoll))\n   (peek kcoll)\n   v)))", "user": "57fd085ce4b0d3187e9009a9"}, {"problem": 156, "code": "(fn [d ks]\n  (apply hash-map (interleave ks (repeat d))))", "user": "566b57e9e4b0a866af6896ad"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "57fe996fe4b0d3187e9009d5"}, {"problem": 156, "code": "(fn\n  [value keys]\n  (into {} (map #(vector % value) keys)))", "user": "557c647ce4b05c286339e0c3"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "57f8151ce4b0d3187e900912"}, {"problem": 156, "code": "(fn [n a] (zipmap a (repeat n)))", "user": "575f6a80e4b08062f99a4e80"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "57f8ba80e4b0d3187e90092f"}, {"problem": 156, "code": "(fn [default-value keys]\n  (apply conj (map #(hash-map % default-value) keys)))", "user": "57ff8770e4b0a837a8b30c21"}, {"problem": 156, "code": "(fn [default-val target-seq]\n\t(into {} (map #(assoc {} % default-val) target-seq)))", "user": "57d174ede4b0bd073c20236c"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "57aa053fe4b0b8559636fc61"}, {"problem": 156, "code": "(fn [v m] \n  (reduce #(assoc % %2 v)\n   {} m))", "user": "5508a292e4b06e50f9beb10f"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %))", "user": "57ec3d29e4b0bfb2137f5b77"}, {"problem": 156, "code": "(fn [theValue theKeys]\n  (reduce \n    (fn [results coll]\n      (assoc results coll theValue)\n    )\n    {} theKeys\n  )\n)", "user": "57f904c5e4b0d3187e900936"}, {"problem": 156, "code": "(fn [v kseq]\n  (reduce #(assoc %1 %2 v) {} kseq))", "user": "57ee82b1e4b0bfb2137f5bbd"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (repeat v) ) )", "user": "58021b0be4b0a837a8b30c6a"}, {"problem": 156, "code": "(fn [v coll] (reduce #(assoc %1 %2 v) {} coll))", "user": "57f3b841e4b0511f1d294e0f"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "57f96e13e4b0d3187e900945"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "5803cd8fe4b0a837a8b30c96"}, {"problem": 156, "code": "(fn [def-val coll]\n  (into {} (map #(vector % def-val) coll)))", "user": "57e79d8ee4b0bfb2137f5afe"}, {"problem": 156, "code": "(fn [val keys] (reduce #(assoc %1 %2 val) {} keys))", "user": "55ee84c0e4b0121d4835fdf0"}, {"problem": 156, "code": "#(zipmap %2 (map (fn [k] %1) %2))", "user": "58050034e4b0a837a8b30cb4"}, {"problem": 156, "code": "(fn [default key_seq]\n  (apply conj (map #(hash-map % default) key_seq)))", "user": "55b2505be4b0da326a65cf7d"}, {"problem": 156, "code": "(fn foo [x y] (if (empty? y) {} (conj (foo x (rest y)) {(first y) x}) ))", "user": "57f9b25fe4b0d3187e90094b"}, {"problem": 156, "code": "(fn\n  [d-val coll]\n  (reduce (fn\n            [new-map k]\n            (assoc new-map k d-val))\n          {}\n          coll))", "user": "578bbd3ee4b0ebec4cfb754e"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "58060dace4b0a837a8b30cd5"}, {"problem": 156, "code": "(fn [default seq1] (apply array-map (mapcat identity (map #(seq [% default]) seq1))))", "user": "57f52d3be4b0903ccab3dce7"}, {"problem": 156, "code": "(fn [default ks] (reduce #(assoc %1 %2 default) {} ks))", "user": "57c815ade4b05aa3c4741d14"}, {"problem": 156, "code": "(fn [val coll] \n  (into {} (map (fn [key] (vector key val)) coll)))", "user": "5800ab1ee4b0a837a8b30c41"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %)))", "user": "57a8eba2e4b0a96607956225"}, {"problem": 156, "code": "(fn [default data]\n  (zipmap data (repeat default)))", "user": "58088dfde4b0a837a8b30d07"}, {"problem": 156, "code": "(fn [default keys] (zipmap keys (repeat default)))", "user": "57f8cd5ae4b0d3187e900930"}, {"problem": 156, "code": "(fn [d ks] (reduce #(assoc %1 %2 d) {} ks))", "user": "56958a16e4b0dcc4269f4129"}, {"problem": 156, "code": "(fn [v ks]\n  (into (hash-map)\n        (map vector ks (repeat v))))", "user": "580bd81ee4b0849f6811b711"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56c21eafe4b05cc29241ee7e"}, {"problem": 156, "code": "(fn [v ks] (into {} (map #(vector % v) ks)))", "user": "57a4fa50e4b0a966079561f1"}, {"problem": 156, "code": "#(into {}(for [x %2] [x %1]))", "user": "580cc8bde4b0849f6811b725"}, {"problem": 156, "code": "(fn [val col]\n  (zipmap col (repeat val)))", "user": "57ee2b3ee4b0bfb2137f5bac"}, {"problem": 156, "code": ";#(apply hash-map (interleave %2 (repeat %1)))\n\n#(zipmap %2 (repeat %1))", "user": "57ee432de4b0bfb2137f5bb2"}, {"problem": 156, "code": "#(apply hash-map(interleave %2(repeat %1)))", "user": "57ef793de4b0bfb2137f5bd8"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1));#(apply hash-map (interleave %2 (repeat %1)))", "user": "57ee41a6e4b0bfb2137f5baf"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "57ee46c7e4b0bfb2137f5bb3"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "57ef7393e4b0bfb2137f5bd6"}, {"problem": 156, "code": ";#(apply hash-map (interleave %2 (repeat %1)))\n#(zipmap %2(repeat %1))", "user": "580d7de3e4b0849f6811b73d"}, {"problem": 156, "code": "#(zipmap %2(repeat %1))", "user": "580d7e53e4b0849f6811b73e"}, {"problem": 156, "code": ";#(zipmap %2 (repeat %1))\n#(loop [i 0\n         m (hash-map)]\n    (let [m (assoc m (.get %2 i) %1)\n          imax (- (count %2) 1)]\n      (if (< i imax)\n        (recur (inc i) m)\n        m)))", "user": "57ee42c4e4b0bfb2137f5bb1"}, {"problem": 156, "code": ";;(fn [vla col]\n;;  (zipmap col (repeat vla)))\n#(zipmap %2 (repeat %1))", "user": "580d7bdae4b0849f6811b73c"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "57ee41eae4b0bfb2137f5bb0"}, {"problem": 156, "code": ";(fn [x col]\n;  (reduce merge (map #(assoc {} % x) col)))\n\n#(zipmap %2 (repeat %1))", "user": "57e4dbcbe4b0bfb2137f5ac3"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "580c8fcee4b0849f6811b721"}, {"problem": 156, "code": "(fn [default coll] (zipmap coll (repeat default)))", "user": "500d3160e4b05f7c30cfa6a1"}, {"problem": 156, "code": "(fn\n  ([initial ks]\n   (loop [next-key (first ks) remaining (rest ks) acc {}]\n     (if (empty? remaining)\n         (into acc [[next-key initial]])\n      (recur (first remaining) (rest remaining) (into acc [[next-key initial]]))))))", "user": "580fb8e0e4b0f478707a05bc"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "4f0f7339535d0136e6c2233e"}, {"problem": 156, "code": "(fn [vs ks] (zipmap ks (repeat  vs)))", "user": "56ede653e4b04a395b9a0449"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "58062dd2e4b0a837a8b30cda"}, {"problem": 156, "code": "#(reduce (fn \n                [value elem]\n                (conj value\n                        {elem %1}))\n              {}\n              %2)", "user": "57343747e4b0cd1946bd1006"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "580e842ee4b0849f6811b756"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat (count %2) %1)))", "user": "580e2941e4b0849f6811b74e"}, {"problem": 156, "code": "(fn [v k] (into {} (map #(hash-map % v) k)))", "user": "58136679e4b0f478707a060d"}, {"problem": 156, "code": "(fn [default lst]\n  (let [n (count lst)]\n    (zipmap lst (repeat n default))))", "user": "5813e208e4b0f478707a061b"}, {"problem": 156, "code": "(fn [m v] (zipmap v (repeat m)))", "user": "5804b491e4b0a837a8b30cac"}, {"problem": 156, "code": "(fn [x ys] (apply merge {} (map (fn [z] {z x}) ys)))", "user": "580a4320e4b0a837a8b30d2f"}, {"problem": 156, "code": "(fn [d keys] (reduce #(conj %1 [%2 d]) {} keys))", "user": "5812eb8fe4b0f478707a0602"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5815b957e4b0f478707a0641"}, {"problem": 156, "code": "(fn [a b ] ( zipmap b (repeat a )))", "user": "55c423e1e4b0e31453f64994"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %)))", "user": "5818a3f7e4b0c0e9c07b83bf"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5818a068e4b0c0e9c07b83be"}, {"problem": 156, "code": "(fn [v m] (zipmap m (repeat v)))", "user": "5818ac51e4b0c0e9c07b83c1"}, {"problem": 156, "code": "(fn [default s] (zipmap s (repeat default)))", "user": "58182480e4b0c0e9c07b83a7"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5373fd3ae4b06d7f452d9e1e"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5819873fe4b0e114eb519fd9"}, {"problem": 156, "code": "(fn f156 [x coll]\n   (zipmap coll (repeat (count coll) x)))", "user": "55634f38e4b0c656e3ff17e8"}, {"problem": 156, "code": "(fn [default keys]\n  (zipmap keys (repeat default)))", "user": "5819d6c6e4b0e114eb519fe8"}, {"problem": 156, "code": "(fn [v coll] (reduce #(assoc %1 %2 v) {} coll))", "user": "5819d698e4b0e114eb519fe7"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "5819e02de4b0e114eb519fea"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "58186016e4b0c0e9c07b83ad"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5818e0c8e4b0c0e9c07b83ca"}, {"problem": 156, "code": "(fn [default keys]\n  (zipmap keys (repeat default)))", "user": "581a2dcfe4b0e114eb519ffd"}, {"problem": 156, "code": "(fn [v ks] (into {} (map vector ks (repeat v))))", "user": "4f5d5d59e4b0030a34fb2b39"}, {"problem": 156, "code": "(fn [a b]\n  (zipmap b (vec (replicate (count b)a))))", "user": "581a1068e4b0e114eb519ff3"}, {"problem": 156, "code": "(fn [defvalue keys]\n  (into {} (map #(hash-map % defvalue) keys)))", "user": "5819a092e4b0e114eb519fdb"}, {"problem": 156, "code": "(fn [v coll]\n(reduce #(assoc %1 %2 v) {} coll))", "user": "5816c5f5e4b0c0e9c07b8380"}, {"problem": 156, "code": "(fn [d keys] (reduce #(assoc % %2 d) {} keys))", "user": "58134ba8e4b0f478707a060b"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "581b8568e4b04b46fc4b0ecf"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "581b88f9e4b04b46fc4b0ed1"}, {"problem": 156, "code": "(fn [default s] (zipmap s (repeat default)))", "user": "581b8938e4b04b46fc4b0ed2"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %)))", "user": "5405885ee4b0addc1aec6668"}, {"problem": 156, "code": "(fn [v k] (zipmap k (vec (replicate (count k) v))))", "user": "581bdf83e4b04b46fc4b0ee0"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5818af22e4b0c0e9c07b83c2"}, {"problem": 156, "code": "(fn [default keys]\n  (reduce (fn [m k] (assoc m k default)) {} keys))", "user": "581a703de4b0e114eb51a005"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "581c9a80e4b04b46fc4b0ef6"}, {"problem": 156, "code": "(fn [default keys] (zipmap keys (repeat default)))", "user": "581c6b16e4b04b46fc4b0ef0"}, {"problem": 156, "code": "(fn [x, y] (reduce #(assoc %1 %2 x) {} y))", "user": "581cb1b8e4b04b46fc4b0efc"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "581c97e1e4b04b46fc4b0ef5"}, {"problem": 156, "code": "(fn [default-val sq]\n  (reduce (fn [a b]\n            (conj a b))\n          {}\n          (map #(hash-map % default-val) sq)))", "user": "579816abe4b039eba2ecb10d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5254b45fe4b0541d1855b9a0"}, {"problem": 156, "code": "(fn [d xs] (apply hash-map (mapcat #(vector % d) xs)))", "user": "57d50c05e4b0bd073c2023a8"}, {"problem": 156, "code": "(fn [x sq]\n  (zipmap sq (repeat (count sq) x)))", "user": "581a5fdbe4b0e114eb51a002"}, {"problem": 156, "code": "(fn [defval init-keys]\n  (loop [res {}, key init-keys]\n    (if (empty? key)\n      res\n      (recur \n        (assoc res (first key) defval)\n        (rest key))\n      )))", "user": "58189129e4b0c0e9c07b83bc"}, {"problem": 156, "code": "(fn [default keys] \n  (reduce #(into %1 {%2 default}) {} keys)\n  )", "user": "576d8699e4b0979f89651568"}, {"problem": 156, "code": "(fn [dfk s] (reduce (fn [a b] (conj a {b dfk})) {} s))", "user": "581b4d3be4b04b46fc4b0ec6"}, {"problem": 156, "code": "(fn [value keys] (reduce #(assoc % %2 value) {} keys))", "user": "58172161e4b0c0e9c07b8389"}, {"problem": 156, "code": "(fn [default keys]\n  (loop\n     [[k & ks] keys\n      accum {}]\n      (let [new-accum (assoc accum k default)]\n        (if (nil? ks)\n            new-accum\n            (recur ks new-accum)))))", "user": "58152157e4b0f478707a0631"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "58173722e4b0c0e9c07b838a"}, {"problem": 156, "code": "#(into {} (for [item %2] {item %1}))", "user": "5820cca0e4b04b46fc4b0f62"}, {"problem": 156, "code": "(fn [default map-keys]\n  (apply hash-map (mapcat (fn [x] [x default]) map-keys)))", "user": "57eb38dbe4b0bfb2137f5b5e"}, {"problem": 156, "code": "#_(fn [v ks]\n  (reduce #(assoc %1 %2 v) {} ks))\n(fn [v ks]\n  (apply assoc {} (mapcat vector ks (repeat v))))", "user": "5821b018e4b04b46fc4b0f80"}, {"problem": 156, "code": "(fn [value keys]\n  (into {} (for [k keys]\n             [k value])))", "user": "58217fbde4b04b46fc4b0f78"}, {"problem": 156, "code": "(fn [default keys-list] (reduce #(assoc %1 %2 default) {} keys-list))", "user": "581dad0ae4b04b46fc4b0f17"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56f68677e4b08e7d20b96826"}, {"problem": 156, "code": "(fn [v ks] (apply conj (map #(hash-map % v) ks)))", "user": "58225587e4b04b46fc4b0f94"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %1)))", "user": "5823f3d4e4b051871117bebc"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "57465429e4b009280f9f2b60"}, {"problem": 156, "code": "(fn  [v ks]\n  (into {} (map #(vector % v) ks)))", "user": "5804d5afe4b0a837a8b30cad"}, {"problem": 156, "code": "(fn [x y] (zipmap y (repeat (count y) x)))", "user": "581829cce4b0c0e9c07b83a9"}, {"problem": 156, "code": "(fn [defval init-keys]\n  (loop [res {}, key init-keys]\n    (if (empty? key)\n      res\n      (recur \n        (assoc res (first key) defval)\n        (rest key))\n      )))", "user": "58224c53e4b04b46fc4b0f92"}, {"problem": 156, "code": "#(into {} (for [k %2] {k %1}))", "user": "5821160de4b04b46fc4b0f6c"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "569e2551e4b0542e1f8d1483"}, {"problem": 156, "code": "(fn [default-value ks] (into {} (map #(vec [% default-value]) ks)))", "user": "56449e4de4b0284900eef5f9"}, {"problem": 156, "code": "(fn [value map] (reduce-kv (fn [m k v] (assoc m v value)) {} map))", "user": "5818908be4b0c0e9c07b83bb"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "58247423e4b051871117bec5"}, {"problem": 156, "code": "(fn [default xs] (into {} (map (fn [x] {x default}) xs)))", "user": "4f213e2ee4b0d66497709fcf"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "582089fbe4b04b46fc4b0f57"}, {"problem": 156, "code": "(fn [default items]\n  (reduce (fn [acc k] (into acc {k default}))\n          {}\n          items))", "user": "5779556de4b0979f8965166e"}, {"problem": 156, "code": "(fn [d ks]\n  \t(reduce #(assoc % %2 d)\n            {}\n            ks))", "user": "5703a557e4b08d47c97781f4"}, {"problem": 156, "code": "(fn roz [d c]\n  (apply merge (map #(hash-map %1 d) c)))", "user": "57da7593e4b0bd073c202410"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (repeat v)))", "user": "57cec4ade4b0c746388ab8b1"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "58171a9ae4b0c0e9c07b8387"}, {"problem": 156, "code": "(fn [val keys] (into {} (vec (map #(vector % val) keys))))", "user": "569fc70ee4b0542e1f8d1499"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "4ec55ab5535d6d7199dd3697"}, {"problem": 156, "code": "#(zipmap %2 (vector % % %))", "user": "582290b5e4b04b46fc4b0fa0"}, {"problem": 156, "code": "(fn [df k]\n  (zipmap k (repeat (count k) df)))", "user": "577e42dee4b0c8d87281f6e4"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "507ff90fe4b089ade05efbd9"}, {"problem": 156, "code": "(fn [x coll]\n   (reduce (fn [acc it]\n             (assoc acc it x))\n           nil\n           coll))", "user": "5808ee16e4b0a837a8b30d16"}, {"problem": 156, "code": "(fn [ v k ] (zipmap k (repeat (count k) v)))", "user": "582835cbe4b051871117bf30"}, {"problem": 156, "code": "(fn [default keys]\n      (into {}  (map #(vector  % default) keys)))", "user": "552f6e8ee4b076ab5578f802"}, {"problem": 156, "code": "#(zipmap %2 [% % %])", "user": "582a6a85e4b051871117bf5d"}, {"problem": 156, "code": ";#(zipmap %2(repeat %1))\n(fn [x y] (zipmap y (repeat x)))", "user": "5822e082e4b04b46fc4b0fa9"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "58248186e4b051871117bec6"}, {"problem": 156, "code": "#(zipmap %2 [% % %])", "user": "5822ccd0e4b04b46fc4b0fa7"}, {"problem": 156, "code": "(fn [v m] (zipmap m (repeat v)))", "user": "582dc562e4b051871117bfcb"}, {"problem": 156, "code": "(fn [initial vec] (into {} (map (fn [x] [x initial]) vec)))", "user": "4fec0824e4b0681fd128dc9c"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55632016e4b0c656e3ff17e4"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "58303fc3e4b051871117c006"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "582589b2e4b051871117bedd"}, {"problem": 156, "code": ";#(zipmap %2 (repeat %1))\n\n(fn [v ks]\n  (into {}\n        (for [k ks]\n          [k v])))", "user": "58299e03e4b051871117bf46"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5586cbeae4b059ccff29b1d8"}, {"problem": 156, "code": "(fn [default coll] \n  (into {} (map #(conj [%] default) coll)))", "user": "583166c1e4b051871117c025"}, {"problem": 156, "code": "(fn [v coll]\n  (into {} (for [x coll] {x v})))", "user": "581fe550e4b04b46fc4b0f4c"}, {"problem": 156, "code": "#(reduce (fn [acc item]\n           (assoc acc item %))\n         {}\n         %2)", "user": "5829d588e4b051871117bf4a"}, {"problem": 156, "code": "(fn [default keys] (apply hash-map (mapcat (fn [key] [key default]) keys)))", "user": "580b216fe4b0a837a8b30d45"}, {"problem": 156, "code": "#(zipmap %2 (iterate identity %1))", "user": "58335c22e4b089d5ab817c9a"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1) )", "user": "57addf3ae4b0b8559636fca4"}, {"problem": 156, "code": "(fn [v ks] (into (hash-map) \n                 (map (fn [k] [k v]) ks)\n                 ))", "user": "58334d18e4b089d5ab817c97"}, {"problem": 156, "code": "(fn [v s]\n  (reduce \n   #(assoc %1 %2 v)\n   {} s))", "user": "58333b19e4b089d5ab817c94"}, {"problem": 156, "code": "(fn [defval init-keys]\n  (loop [res {}, key init-keys]\n    (if (empty? key)\n      res\n      (recur \n        (assoc res (first key) defval)\n        (rest key))\n      )))", "user": "5836e233e4b089d5ab817d08"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "582d7569e4b051871117bfbe"}, {"problem": 156, "code": "(fn [default colls]\n  (apply merge (map (fn [x] {x default}) colls)))", "user": "55a12cb1e4b0acc240e3150d"}, {"problem": 156, "code": "(fn [value keys] (zipmap keys (repeat value)))", "user": "5800036fe4b0a837a8b30c31"}, {"problem": 156, "code": "(fn [v kv] (reduce #(into %1 (hash-map %2 v)) {} kv))", "user": "5835bc73e4b089d5ab817ce9"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "58391c94e4b089d5ab817d35"}, {"problem": 156, "code": "(fn [e lis]\n  (apply merge (map #(hash-map % e) lis))\n  \n  )", "user": "58384bc4e4b089d5ab817d27"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "583667c7e4b089d5ab817cfb"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "57235dc4e4b0c5bde472c0e2"}, {"problem": 156, "code": "(fn [x l] (into {} (map #(hash-map % x) l)))", "user": "5835a222e4b089d5ab817ce5"}, {"problem": 156, "code": "(fn [val keys]\n  (apply hash-map (apply concat (map #(vector % val) keys))))", "user": "582bd5fae4b051871117bf7b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "583e27e2e4b089d5ab817daa"}, {"problem": 156, "code": "(fn [v ks]\n  (reduce\n   (fn [acc x] (assoc acc x v))\n   {}\n   ks))", "user": "5791d259e4b0ebec4cfb75c0"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5787ce76e4b0ebec4cfb750e"}, {"problem": 156, "code": "(fn [a b] (zipmap b [a a a]))", "user": "576ffcb9e4b0979f89651592"}, {"problem": 156, "code": "(fn [d k] (into {} (for [i k] [i d])))", "user": "583ff3afe4b089d5ab817dda"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "583e1558e4b089d5ab817da9"}, {"problem": 156, "code": "(fn [defaultValue collection]\n    (let [\n      l \n      (for [k collection :let[v defaultValue]]\n        {k v}\n      )\n    ]\n    (into {} l)\n    )\n  )", "user": "5843b231e4b089d5ab817e3d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "57089f82e4b0b0fb43fd06a2"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "581b19e7e4b04b46fc4b0ec4"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "584278e1e4b089d5ab817e19"}, {"problem": 156, "code": "#(loop [x %2  y {}]\n     (if (= ()  x) \n       y\n       (recur (rest x) (merge  y  { (first x) %1} ))\n     )\n   )", "user": "55b76000e4b01b9910ae29a2"}, {"problem": 156, "code": "(fn [v m] (reduce #(assoc %1 %2 v) {} m))", "user": "57c0917be4b05aa3c4741c95"}, {"problem": 156, "code": "(fn map-with-defaults\n  [value ks]\n  (reduce #(assoc %1 %2 value) {} ks))", "user": "57e9a77ae4b0bfb2137f5b35"}, {"problem": 156, "code": "(fn [d s]\n  (reduce #(assoc % %2 d) {} s))", "user": "5835cb06e4b089d5ab817cea"}, {"problem": 156, "code": "(fn [ a col ]\n  (apply hash-map (mapcat #(list %1 a) col)))", "user": "55a21f1ce4b0acc240e3151f"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "57ebd51ce4b0bfb2137f5b68"}, {"problem": 156, "code": "(fn [defval col] (into {} (map #(vector % defval) col)))", "user": "58467633e4b089d5ab817e90"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "58494267e4b089d5ab817eca"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "54d341f7e4b0e8a36923e603"}, {"problem": 156, "code": "(fn [v ks]\n  (zipmap ks (repeat v)))", "user": "524379a4e4b076204b44fac0"}, {"problem": 156, "code": "#(loop [x %1 y %2 z {}]\n(if (empty? y) \nz\n(recur\n x \n (rest y)\n (conj z (hash-map (first y) x))\n) \n)\n)", "user": "583f23dce4b089d5ab817dc9"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "54635083e4b01be26fd746bd"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "565487dce4b0f9d632dd8482"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "584dadebe4b0b7285a6f4e44"}, {"problem": 156, "code": "(fn defaults [val keys]\n  (zipmap keys (repeat val)))", "user": "563f4c47e4b08d4f616f5ed2"}, {"problem": 156, "code": "(fn [default keys_]\n  (into {} (map #(vector %1 default) keys_)))", "user": "5027f37be4b01614d1633ff1"}, {"problem": 156, "code": "(fn [d m]\n  (into {} (map #(assoc {} % d) m)))", "user": "56719c3ce4b05957ce8c610c"}, {"problem": 156, "code": "(fn [x v] (reduce #(assoc % %2 x) {} v))", "user": "584ad64ce4b089d5ab817eef"}, {"problem": 156, "code": "(fn [d v] (into (hash-map) (map #(assoc {} % d) v)))", "user": "58524875e4b0b7285a6f4ead"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5840c068e4b089d5ab817df8"}, {"problem": 156, "code": "(fn map-def [v ks]\n  (apply hash-map (interleave ks (repeat v))))", "user": "575b3e9be4b02ea11479935b"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "56f9b953e4b07572ad1a88b9"}, {"problem": 156, "code": "(fn [x ks]\n  (reduce (fn [m k]\n            (assoc m k x))\n          {}\n          ks))", "user": "58543a59e4b07779d46863f5"}, {"problem": 156, "code": "(fn [a b](reduce #(assoc %1 %2 a) {} b))", "user": "5849ac5fe4b089d5ab817ed7"}, {"problem": 156, "code": "(fn [k col] (apply merge (map #(hash-map % k) col)))", "user": "5766fbb7e4b0a07e8fc180b6"}, {"problem": 156, "code": "(fn [x y] (zipmap y  (vec (replicate (count y) x))))", "user": "585481e0e4b07779d46863fe"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5854d1c0e4b07779d468640a"}, {"problem": 156, "code": "(fn [defaultvalue vk]\n         (reduce \n           #(assoc %1 %2 defaultvalue) \n           {}\n           vk))", "user": "58455b05e4b089d5ab817e65"}, {"problem": 156, "code": "(fn [d-key key-list] \n  (loop [d d-key k key-list res{}]\n    (if (empty? k)\n      res\n      (recur d (rest k) (conj res [(first k) d])))))", "user": "58354124e4b089d5ab817cd6"}, {"problem": 156, "code": "(fn [m d v] (if (nil? v)\n              m\n              (recur (assoc m (first v) d) d (next v)))) {}", "user": "56b1b59be4b0982f16b37df2"}, {"problem": 156, "code": "(fn [default keys]\n  (apply assoc {} \n  \t(interleave keys \n      (take (count keys) (repeat default)))))", "user": "575d22f5e4b02ea11479937a"}, {"problem": 156, "code": "(fn [v lst] (reduce #(assoc %1 %2 v) {} lst))", "user": "566e87cfe4b0a866af6896dc"}, {"problem": 156, "code": "(fn [v coll]\n  (into {} \n        (for [x coll] {x v})))", "user": "5858f0cce4b0f14aab7c8727"}, {"problem": 156, "code": "(fn [default keys]\n  (zipmap keys (repeat default)))", "user": "580d57cfe4b0849f6811b738"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5853582fe4b0b7285a6f4ec5"}, {"problem": 156, "code": "(fn [default keys-collection]\n  (reduce #(assoc %1 %2 default) {} keys-collection))", "user": "5851b51be4b0b7285a6f4e99"}, {"problem": 156, "code": "(fn [default v] (reduce (fn [coll k] (assoc coll k default)) {} v))", "user": "58562083e4b0f14aab7c86eb"}, {"problem": 156, "code": "(fn map-defaults [default lst]\n  (let [x {}]\n  \t(into (sorted-map) (map #(assoc x % default) lst))\n  )\n)", "user": "569e3175e4b0542e1f8d1484"}, {"problem": 156, "code": "(fn [v coll]\n  (into {} (for [x coll] {x v})))", "user": "58593c05e4b0f14aab7c872d"}, {"problem": 156, "code": "(fn [value sequ] (into {} (map #(vector % value) sequ)))", "user": "577412c6e4b0979f896515f6"}, {"problem": 156, "code": "(fn [d ks]\n  (loop [ks ks\n         result {}]\n    (if (empty? ks)\n      result\n      (let [[k & rest] ks]\n        (recur rest (conj result {k d}))))))", "user": "585aeddbe4b0f14aab7c875b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "57fdd1cfe4b0d3187e9009bf"}, {"problem": 156, "code": "(fn [value keys]\n  (loop [keys keys result {}]\n    (if (= (count keys) 1)\n      (assoc result (first keys) value)\n      (recur (rest keys) (assoc result (first keys) value)))))", "user": "56b6e354e4b0982f16b37e41"}, {"problem": 156, "code": "(fn [default col]\n  (zipmap col (repeat (count col) default)))", "user": "56326e03e4b0bfe05bf117a4"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1)\n         )", "user": "585c5b21e4b0f14aab7c8786"}, {"problem": 156, "code": "#(zipmap %2 (take (.length %2) (repeat %1)))", "user": "585e2e77e4b0f14aab7c87ac"}, {"problem": 156, "code": "(fn [z w]\n  (loop [result {}\n         map' w\n         val' z]\n    (if (empty? map')\n      result\n      (recur (assoc result (first map') val') (rest map') val')\n      )\n    )\n  )", "user": "57d0e185e4b0bd073c202360"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "585d2c1fe4b0f14aab7c8797"}, {"problem": 156, "code": "#(into {} (map (juxt identity (constantly %1)) %2))", "user": "51456858e4b0e88796073408"}, {"problem": 156, "code": "(fn [v coll]\n  (reduce #(assoc %1 %2 v) {} coll))", "user": "585e6aabe4b0f14aab7c87b1"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "585d40afe4b0f14aab7c8798"}, {"problem": 156, "code": "(fn [v k] (reduce #(assoc % %2 v) {} k))", "user": "536f8cc2e4b0fc7073fd6e80"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "511aa6f5e4b0c87c59c9670c"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %))", "user": "53492ae6e4b084c2834f4a5f"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5863be34e4b0f14aab7c8830"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "58631579e4b0f14aab7c8817"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "4e7be091535db169f9c796ba"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "57c33eeae4b05aa3c4741cbc"}, {"problem": 156, "code": "(fn [default others]\n  (reduce #(conj %1 {%2 default}) {} others))", "user": "5628f33ce4b00e49c7cb47f3"}, {"problem": 156, "code": "(fn [default-value sequence]\n  (apply hash-map (apply concat (map #(list % default-value)\n                                     sequence))))", "user": "58637f03e4b0f14aab7c881e"}, {"problem": 156, "code": "(fn [value input] (reduce #(assoc %1 %2 value) {} input))", "user": "5220def1e4b0e6a83c8925b4"}, {"problem": 156, "code": "(fn [n xs] (zipmap xs (repeat n)))", "user": "538d7e2ee4b0b51d73faae70"}, {"problem": 156, "code": "(fn [v ks](reduce #(assoc %1 %2 v) {} ks))", "user": "584f5133e4b0b7285a6f4e61"}, {"problem": 156, "code": "(fn [d coll]\n  (reduce #(assoc %1 %2 d) {} coll))", "user": "5863eda2e4b0f14aab7c8836"}, {"problem": 156, "code": "(fn [v k] (reduce merge (map (fn [x] {x v}) k)))", "user": "586631a2e4b0f14aab7c885a"}, {"problem": 156, "code": "(fn map-defaults-solution\n  [arg vector]\n  (zipmap vector (repeat arg))\n  )", "user": "583d669ee4b089d5ab817d9a"}, {"problem": 156, "code": "(fn [v coll] (reduce #(assoc %1 %2 v) {} coll))", "user": "5839f286e4b089d5ab817d49"}, {"problem": 156, "code": "(fn [value lst] \n  (reduce conj {} (map hash-map lst (repeat value))))", "user": "58681bf0e4b0f14aab7c888a"}, {"problem": 156, "code": "(fn [v keys] (reduce (fn [acc k] (assoc acc k v)) {} keys))", "user": "54f26266e4b024c67c0cf8c5"}, {"problem": 156, "code": "(fn [d l] (apply hash-map (interleave l (#(map (constantly %1) %2) d l))))", "user": "5866b999e4b0f14aab7c886b"}, {"problem": 156, "code": "(fn f\n  ([v keys] (f {} v keys))\n  ([m v keys]\n  (if (empty? keys)\n    m\n    (let [[k & ks] keys]\n      (recur (assoc m k v) v ks)))))", "user": "524a9556e4b05ef8e38e64b1"}, {"problem": 156, "code": "(fn [val seq]\n      (loop [m {} s seq]\n        (if (empty? s) m\n            (recur (assoc m (first s) val) (rest s)))))", "user": "52ade380e4b0c58976d9ac9b"}, {"problem": 156, "code": "(fn [default keys_] (apply hash-map (interleave keys_ (repeat default))))", "user": "585bcd51e4b0f14aab7c8771"}, {"problem": 156, "code": "(fn[v ks] (reduce #(assoc %1 %2 v) {} ks))", "user": "56acfee5e4b03c432f18734f"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %1)))", "user": "586b6f13e4b01531a375e959"}, {"problem": 156, "code": "(fn [val keys]\n  (into {} (map #(identity [% val]) keys)))", "user": "53263406e4b09d4e7a9b54eb"}, {"problem": 156, "code": "(fn [x ks]\n  (into {} (for [k ks] [k x])))", "user": "52dc7344e4b09f7907dd13cf"}, {"problem": 156, "code": "(fn [value ks] (reduce (fn [res k] (conj res {k value})) {} ks))", "user": "586c122ae4b01531a375e96f"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1) )", "user": "586b6d51e4b01531a375e958"}, {"problem": 156, "code": "(fn [v k] (reduce #(into %1 (hash-map %2 v)) {} k))", "user": "586615e6e4b0f14aab7c8858"}, {"problem": 156, "code": "(fn foo[x coll]\n  (if (= 0 (count coll))\n    nil \n    (merge (foo x (rest coll)) {(first coll) x})))", "user": "585a7cb2e4b0f14aab7c874e"}, {"problem": 156, "code": "(fn defval [v ks]\n  (if (empty? ks)\n    {}\n    (assoc (defval v (rest ks)) (first ks) v)))", "user": "586c5a34e4b01531a375e97a"}, {"problem": 156, "code": "(fn [d kys] (reduce #(assoc %1 %2 d) {} kys))", "user": "584d8724e4b0b7285a6f4e3e"}, {"problem": 156, "code": "(fn [v ks]\n   (loop [ks ks\n          result {}]\n     (if (empty? ks)\n       result\n       (recur (rest ks) (conj result [(first ks) v])))))", "user": "586b1482e4b0f14aab7c88cf"}, {"problem": 156, "code": "(fn [val coll] (reduce #(assoc %1 %2 val) {} coll))", "user": "54c4c96ae4b045293a27f61f"}, {"problem": 156, "code": "(fn [d k](into {} (map (fn [k] [k d]) k)))", "user": "55597b84e4b0deb715856e36"}, {"problem": 156, "code": "(fn [d coll]\n (into {}\n   (for [k coll] [k d])))", "user": "586d146de4b01531a375e98a"}, {"problem": 156, "code": "#(zipmap %2 (take 3 (repeat %1)))", "user": "586b6a0ae4b01531a375e957"}, {"problem": 156, "code": "(fn buildMap [single_val map_keys] ((fn innerBuild [map list]  (if (> (count list) 0)  (innerBuild (assoc map (first list) (second list) ) (drop 2 list) ) map)   ){} (interleave map_keys (repeat (count map_keys) single_val)) ) )", "user": "58622733e4b0f14aab7c8803"}, {"problem": 156, "code": "(fn [v l] (reduce #(assoc %1 %2 v) {} l))", "user": "58731176e4b01531a375ea2a"}, {"problem": 156, "code": "(fn [value mySeq] (apply hash-map (interleave mySeq (cycle [value]))))", "user": "58669dd0e4b0f14aab7c8867"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "52658b67e4b03e8d9a4a710d"}, {"problem": 156, "code": "(fn [default-val key-seq]\n  (zipmap key-seq (repeat default-val)))", "user": "55dbc7cde4b050e68259b3a4"}, {"problem": 156, "code": ";#(apply hash-map (for [e %2] (vector e %1)))\n#(zipmap %2 (for [i (range (count %2))] %1))", "user": "587294f0e4b01531a375ea1e"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5875cb95e4b01531a375ea73"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5875f2c5e4b01531a375ea77"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (repeat v)))", "user": "5874d5ace4b01531a375ea5b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "58740c18e4b01531a375ea49"}, {"problem": 156, "code": "(fn [default keys]\n   (reduce (fn [new-map key]\n             (assoc new-map key default))\n           {}\n           keys)\n   )", "user": "58775496e4b01531a375ea9a"}, {"problem": 156, "code": "(fn [default coll] (zipmap coll (repeat (count coll) default)))", "user": "5842d06be4b089d5ab817e22"}, {"problem": 156, "code": "(fn [v s] (loop [d v k s m {}] (if (empty? k) m (recur d (rest k) (assoc m (first k) d)))))", "user": "586d2f5be4b01531a375e98c"}, {"problem": 156, "code": "(fn [v keylist] (apply merge (map (fn [k] (assoc {} k v)) keylist)))", "user": "560d24a2e4b05f002753df34"}, {"problem": 156, "code": "(fn [v ks]\n  (into {} (map #(vector % v) ks)))", "user": "53b42472e4b047364c0444b2"}, {"problem": 156, "code": "(fn [default seq] (reduce conj {} (map (fn [x] {x default}) seq)))", "user": "563c7f98e4b0bfe05bf11836"}, {"problem": 156, "code": "(fn [default ks]\n  (zipmap ks (repeat default)))", "user": "5879d577e4b01531a375ead8"}, {"problem": 156, "code": "(fn [default my-seq]\n  (loop [final-map {} n 0]\n    (if (= n (count my-seq))\n    \tfinal-map\n    \t(recur (assoc final-map (nth my-seq n) default) (inc n)))))", "user": "55228c3ce4b0882d96d091a2"}, {"problem": 156, "code": "(fn create-map [value ks]\n  (if (empty? ks) {}\n      (assoc (create-map value (rest ks)) (first ks) value)))", "user": "51b76227e4b0d906fcd71d35"}, {"problem": 156, "code": "(fn [v coll] (into {} (for [x coll] {x v})))", "user": "5683fcafe4b0945ebc182aa8"}, {"problem": 156, "code": "#(into {} (map (fn [k] [k %1]) %2))", "user": "52506e4ce4b0541d1855b82d"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %1)))", "user": "50385746e4b0803468ea2c6d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5876c0c5e4b01531a375ea8e"}, {"problem": 156, "code": "(fn [v coll]\n  (into {} (map (fn [a] [a v]) coll)))", "user": "5878fb4ee4b01531a375eac1"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %1)))", "user": "57fbd83ee4b0d3187e90097b"}, {"problem": 156, "code": "(fn [v k]\n  (zipmap k (into [] (repeat (count k) v))))", "user": "587f8393e4b0f1effa3b75f2"}, {"problem": 156, "code": "(fn map-def [val-def keys]\n  (if (empty? keys)\n    {}\n    (assoc (map-def val-def (rest keys)) (first keys) val-def)))", "user": "57ea2c91e4b0bfb2137f5b42"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "58800fd4e4b0f1effa3b7606"}, {"problem": 156, "code": "(fn [default kws] (reduce into {} (map #(hash-map % default) kws)))", "user": "58795fd5e4b01531a375eace"}, {"problem": 156, "code": "(fn [d s] (apply hash-map (interleave s (repeat d))))", "user": "5880e38fe4b0f1effa3b7625"}, {"problem": 156, "code": "(let [create-map (fn [default ks acc]\n                   (if (empty? ks)\n                     acc\n                     (recur default (rest ks) (assoc acc (first ks) default))))]\n  (fn [default keys] (create-map default keys {})))", "user": "587100d6e4b01531a375e9f0"}, {"problem": 156, "code": "(fn [v ks] (apply assoc {} (interleave ks (repeat v))))", "user": "5865c8f0e4b0f14aab7c884e"}, {"problem": 156, "code": "(fn [default sequence]\n  (into {}  (map #(assoc {} % default) sequence)))", "user": "587ee260e4b052da650a6353"}, {"problem": 156, "code": ";input x vector\n;output constructs a map\n(fn [a b]\n  (loop [x b y {}]\n    (if (empty? x)\n      y\n      (recur (rest x) (conj y {(first x) a})))\n    ))\n\n; loop and recur args need one to one", "user": "582c526ae4b051871117bf88"}, {"problem": 156, "code": "#(reduce (fn [ret curr] \n           (assoc ret curr %1)) {} %2)", "user": "5883584ae4b0f1effa3b7674"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "586a657de4b0f14aab7c88bd"}, {"problem": 156, "code": "(fn [a xs]\n  (zipmap xs (repeat a)))", "user": "5883920ee4b0f1effa3b767e"}, {"problem": 156, "code": "(fn [default-value keys] (into {} (for [x keys] {x default-value})))", "user": "5880d686e4b0f1effa3b7623"}, {"problem": 156, "code": "(fn [v k] (zipmap k (repeat v)))", "user": "58730484e4b01531a375ea26"}, {"problem": 156, "code": "(fn [d ks]\n  (reduce #(assoc %1 %2 d) {} ks))", "user": "58852909e4b0f1effa3b76af"}, {"problem": 156, "code": "(fn map-default-val [defaultval mapkeys]\n    (zipmap mapkeys (repeat defaultval)))", "user": "587bead1e4b01531a375eb0d"}, {"problem": 156, "code": "#(reduce (fn [x y] (assoc x y %1)) {} %2\n  \n  )", "user": "5885e90de4b0f1effa3b76c5"}, {"problem": 156, "code": "(fn [val keys]\n  (loop [[ x & xs] keys mp {}]\n    (if (empty? xs)\n      (into mp {x val})\n      (recur xs (into mp {x val})))))", "user": "5883a9bae4b0f1effa3b7681"}, {"problem": 156, "code": "(fn [x coll]\n  (reduce conj {} (map (fn [elem] {elem x}) coll)))", "user": "55e1a205e4b050e68259b41e"}, {"problem": 156, "code": "(fn [y xs] (reduce #(assoc % %2 y) {} xs))", "user": "58840023e4b0f1effa3b768b"}, {"problem": 156, "code": "(fn [default keys] (reduce merge {} (map (fn [key] {key default}) keys)))", "user": "5885bea8e4b0f1effa3b76bf"}, {"problem": 156, "code": "(fn [a b]\n  (reduce conj {} (map (fn [x] {x a}) b)))", "user": "587c48cce4b01531a375eb16"}, {"problem": 156, "code": "(fn [defaultVal keys] \n    (loop [result {} keysToInsert keys] \n        (if (= (count keysToInsert) 0)\n            result\n            (recur (assoc-in result [(first keysToInsert)] defaultVal) (rest keysToInsert))\n        )\n    )\n)", "user": "57dd2c99e4b0bd073c20243c"}, {"problem": 156, "code": "(fn [value sec] (zipmap sec (repeat (count sec) value)))", "user": "588906a9e4b0f1effa3b772a"}, {"problem": 156, "code": "(fn [default-value arr]\n  (reduce #(assoc %1 %2 default-value) {} arr))", "user": "5889dc13e4b0f1effa3b774a"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "58868940e4b0f1effa3b76de"}, {"problem": 156, "code": "(fn [d s] (reduce #(conj %1 {%2 d}) {} s))", "user": "587c59d1e4b01531a375eb17"}, {"problem": 156, "code": "(fn [v coll]\n  (reduce \n   (fn [arg1 arg2]\n     (assoc arg1 arg2 v))\n   {}\n   coll))", "user": "576e607ae4b0979f89651579"}, {"problem": 156, "code": "(fn [val keys]\n  (reduce #(assoc %1 %2 val) {} keys))", "user": "585dbe41e4b0f14aab7c879f"}, {"problem": 156, "code": "(fn [v coll] (reduce #(assoc %1 %2 v) {} coll))", "user": "578d459ee4b0ebec4cfb7567"}, {"problem": 156, "code": "(fn [default ks] (apply merge (map #(hash-map % default) ks)))", "user": "588d224ae4b00487982d516c"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5458c74de4b01be26fd74623"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5885cc62e4b0f1effa3b76c1"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5799c6dee4b05b1deef9adca"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5862a8a9e4b0f14aab7c880f"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %)))", "user": "588f7ef8e4b00487982d51ac"}, {"problem": 156, "code": "#(apply hash-map(interleave %2 (repeat %)))", "user": "588f8146e4b00487982d51ae"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %)))", "user": "588f8216e4b00487982d51af"}, {"problem": 156, "code": "(fn [v coll] (into {} (for [x coll] {x v})))", "user": "588f821ce4b00487982d51b0"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "57e016dce4b0bd073c202470"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "544673c0e4b032a45b8693b0"}, {"problem": 156, "code": "(fn [def-value map-keys] (reduce merge (map (fn [current-key] {current-key def-value}) map-keys)))", "user": "5887a686e4b0f1effa3b7702"}, {"problem": 156, "code": "(fn [default s]\n(zipmap s (repeat default)))", "user": "58900f69e4b00487982d51c8"}, {"problem": 156, "code": "#(zipmap %2 (cycle [%1]))", "user": "57de9169e4b0bd073c202454"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "57d8d925e4b0bd073c2023f0"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %)))", "user": "588f7100e4b00487982d51aa"}, {"problem": 156, "code": "(fn [val keys] (zipmap keys (repeat val)))", "user": "588f500ae4b00487982d51a4"}, {"problem": 156, "code": "(fn [d ks]\n  (apply hash-map (interleave ks \n                              (repeat d))))", "user": "583e02fce4b089d5ab817da5"}, {"problem": 156, "code": "(fn [x v]\n  (->> v\n            (map #(vector % x))\n            (into {})))", "user": "58949f8de4b00487982d525e"}, {"problem": 156, "code": "(fn [x xs] (apply assoc {} (interleave xs (repeat x))))", "user": "552b6ddbe4b0ffed3738f965"}, {"problem": 156, "code": "(fn mat-default [v ks]\n  (reduce (fn [m k]\n            (assoc m k v))\n          {}\n          ks))", "user": "5895477fe4b00487982d527c"}, {"problem": 156, "code": "(fn[d items] (zipmap items (repeat d)))", "user": "588e64ebe4b00487982d518a"}, {"problem": 156, "code": "(fn [def_value coll]\n  (reduce\n    (fn [dict keyword]\n      (into dict {keyword def_value}))\n    {} coll))", "user": "5890799be4b00487982d51d6"}, {"problem": 156, "code": "(fn [default coll-keys]\n    (loop [result {} default default coll-keys coll-keys]\n        (if (empty? coll-keys)\n            result\n            (recur (assoc result (first coll-keys) default) default (rest coll-keys)))))", "user": "5896735fe4b00487982d529d"}, {"problem": 156, "code": "(fn [x xs] (zipmap xs (repeat x)))", "user": "54f777a4e4b01ecee9d88820"}, {"problem": 156, "code": "(fn [d s]\n    (into {} (map #(vector % d) s)))", "user": "522724bde4b04e78ff2e19aa"}, {"problem": 156, "code": "(fn [v ks] (reduce (fn [acc k] (into {k v} acc)) {} ks))", "user": "589714cbe4b00487982d52b1"}, {"problem": 156, "code": "(fn [d s] (into {} (for [k s] [k d])))", "user": "58942fd0e4b00487982d5254"}, {"problem": 156, "code": "(fn [val keys] (loop [map {}\n                      ks (seq keys)]\n                 (if ks\n                   (recur (assoc map (first ks) val)\n                          (next ks))\n                   map)))", "user": "587cf197e4b01531a375eb2a"}, {"problem": 156, "code": "(fn [val keys] (zipmap keys (repeat (count keys) val)))", "user": "587cf147e4b01531a375eb29"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "587cf1b1e4b01531a375eb2b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5896ade8e4b00487982d52a9"}, {"problem": 156, "code": "(fn \n  [v s]\n  (reduce (fn [m k ] (conj m {k v})) {} s))", "user": "58976bfde4b00487982d52bc"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %1) ))", "user": "53ada652e4b047364c04446d"}, {"problem": 156, "code": "#( loop [ default %1 stuff %2 output {} ] (if (empty? stuff) output (recur default (rest stuff) (conj output {(first stuff) default}))))", "user": "5886ac91e4b0f1effa3b76e5"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "585d9558e4b0f14aab7c879c"}, {"problem": 156, "code": "(fn [v ks] (zipmap  ks (repeat v)))", "user": "58983e3fe4b00487982d52ce"}, {"problem": 156, "code": "(fn [value args]\n  (zipmap args (repeat value))\n  )", "user": "565b371fe4b068f2fe63dbff"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5895fb26e4b00487982d528e"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "589511dee4b00487982d5272"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "57a6552ce4b0a96607956208"}, {"problem": 156, "code": "#(loop [s %2 d {}] (if (nil? s) d (recur (next s) (assoc d (first s) %1))))", "user": "584aa803e4b089d5ab817ee9"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %1)))", "user": "58923efce4b00487982d521c"}, {"problem": 156, "code": "(fn [v x] (loop [m '{} k x] (if (empty? k) m (recur (assoc m (first k) v) (rest k)))))", "user": "52ea7d3ae4b09f7907dd14bf"}, {"problem": 156, "code": "(fn [d ks]\n  (zipmap ks (repeat d)))", "user": "5896a0e6e4b00487982d52a8"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "588f1743e4b00487982d519d"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat (count %2) %1)))", "user": "57887de2e4b0ebec4cfb751c"}, {"problem": 156, "code": "(fn [default lst] (reduce (fn [mp ky] (assoc mp ky default)) {} lst))", "user": "589c6914e4b00487982d535d"}, {"problem": 156, "code": "(fn md [value keys]\n  (into {} (map (fn [x] {x value}) keys)))", "user": "55f1f0d1e4b06e875b46ce3b"}, {"problem": 156, "code": "(fn [v k] (into {} (map #(vector % v) k)))", "user": "57fa54c3e4b0d3187e900960"}, {"problem": 156, "code": "(fn [v ks] (into {} (map (fn [x] [x v]) ks)))", "user": "58791973e4b01531a375eac5"}, {"problem": 156, "code": "(fn [val, coll] (reduce #(assoc %1 %2 val) {} coll))", "user": "58987ee9e4b00487982d52d2"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5794fd7be4b0e215f87e8476"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "58934052e4b00487982d523a"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "589dd2cce4b02bd94d917e48"}, {"problem": 156, "code": "(fn [scalar vector] (reduce (fn [new-map elem] (assoc new-map elem scalar )) {} vector))", "user": "58951903e4b00487982d5274"}, {"problem": 156, "code": "(fn [val keys]\n\t(->> (repeat (count keys) val) vec (zipmap keys)))", "user": "57382719e4b0cd1946bd1055"}, {"problem": 156, "code": "(fn [defval listinp] (apply hash-map (interleave listinp (repeat (count listinp) defval))))", "user": "505caadfe4b0bcb5664c3d3e"}, {"problem": 156, "code": "#(into {} (for [x %2] [x %1]))", "user": "524ac3d1e4b09eba1c0223a0"}, {"problem": 156, "code": "(fn [default keys] (into {} (map #(vector % default) keys)))", "user": "58447708e4b089d5ab817e4b"}, {"problem": 156, "code": "#(into {} (map (fn [x] [x %]) %2))", "user": "5884e807e4b0f1effa3b76a6"}, {"problem": 156, "code": "(fn [v keys]\n  (reduce #(assoc %1 %2 v) {} keys))", "user": "587c77afe4b01531a375eb1b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5884f77ee4b0f1effa3b76a9"}, {"problem": 156, "code": "(fn [k col]\n  (into {} (for [x col] {x k})))", "user": "58a35b1ee4b02bd94d917ef3"}, {"problem": 156, "code": "(fn [x y]\n      (loop [accum {} ost y]\n         (if (seq ost)\n         \n         (recur (assoc accum (first ost) x) (rest ost))\n          accum )))", "user": "589c8fa6e4b00487982d5365"}, {"problem": 156, "code": "(fn [x v] (into {} (for [y v] [y x])))", "user": "58a0fc33e4b02bd94d917ea3"}, {"problem": 156, "code": "(fn [d keys]\n  (loop [x keys  mymap {}]\n    (if (= () x)\n      mymap        \n      (recur (rest x) (merge mymap {(first x) d})))))", "user": "5852c239e4b0b7285a6f4eb8"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (cycle (list v))))", "user": "58a58c50e4b01a0c0b232914"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "589ec900e4b02bd94d917e65"}, {"problem": 156, "code": "#(loop [items %2 acc {}]\n   (if (= 0 (count items)) acc\n     (recur (rest items) (assoc acc (first items) %1))))", "user": "58a31ecee4b02bd94d917ee7"}, {"problem": 156, "code": "(fn \n  [default values] \n  (reduce \n   (fn \n     [prev item] \n     (conj\n      prev\n      [item default]\n      )\n     ) \n   {}\n   values)\n  )", "user": "58950f29e4b00487982d5270"}, {"problem": 156, "code": "(fn c [d s]\n  (reduce (fn [acc e] (into acc {e d})) {} s))", "user": "5897dda4e4b00487982d52c8"}, {"problem": 156, "code": "(fn [a b] (reduce #(conj % {%2 a}) {} b) )", "user": "5785c1d4e4b0ebec4cfb74e1"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5156e767e4b04360f2428e6b"}, {"problem": 156, "code": "(fn [val seq]\n  (reduce merge (map #(assoc {} % val) seq)))", "user": "56c44c34e4b05cc29241ee96"}, {"problem": 156, "code": "(fn [val keys] \n   (reduce (fn [m k] (assoc m k val)) {} keys))", "user": "56391b7ce4b0bfe05bf117ef"}, {"problem": 156, "code": "#(reduce into {} (for [key %2]\n                        (assoc {} key %1)))", "user": "57fe68e2e4b0d3187e9009ce"}, {"problem": 156, "code": "(fn [exp ve]\n   (reduce #(assoc %1 %2 exp) {} ve)\n   )", "user": "589e22fae4b02bd94d917e56"}, {"problem": 156, "code": "(fn [default seq] (reduce (fn[acc i] (conj acc [i default])) {} seq))", "user": "5895fd90e4b00487982d528f"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "589f0087e4b02bd94d917e6d"}, {"problem": 156, "code": "(fn [val keys] (reduce #(conj %1 [%2 val]) {} keys))", "user": "58ad4349e4b0ebc645576c9d"}, {"problem": 156, "code": "(fn add-defaults\n      [default coll]\n      (into {} (map (fn [x] {x default}) coll)))", "user": "54058126e4b0addc1aec6667"}, {"problem": 156, "code": "(fn [x y] (into {} (for [a y] {a x})))", "user": "58a5c5c2e4b01a0c0b23291b"}, {"problem": 156, "code": "(fn [defv klist]\n  (reduce\n   \t(fn [kmap k]\n      (assoc kmap k defv)) {} klist))", "user": "5833a6d8e4b089d5ab817ca2"}, {"problem": 156, "code": "(fn [default keys]\n  (into {} (for [k keys] [k default])))", "user": "4f039c67535dcb61093f6b3a"}, {"problem": 156, "code": "(fn \n  [val keys]\n  (apply hash-map \n         (loop [acc '()\n                _keys keys]\n           (if (empty? _keys)\n           acc\n           (recur (conj (conj acc val) (first _keys)) (rest _keys)) ))))", "user": "5854580ce4b07779d46863f9"}, {"problem": 156, "code": "(fn [val keys] (into {} (map #(hash-map % val) keys)))", "user": "58b066dee4b0ebc645576cd9"}, {"problem": 156, "code": "#(into {} (map (fn [el] [el %1]) %2))", "user": "588e4e05e4b00487982d5188"}, {"problem": 156, "code": "(fn [d col] (apply hash-map (mapcat #(list % d) col)))", "user": "58a822e4e4b01a0c0b232950"}, {"problem": 156, "code": "(fn map-defaults [default keys]\n  (zipmap keys (repeat default)))", "user": "58b18ba0e4b0ebc645576cfa"}, {"problem": 156, "code": "(fn [d v] (zipmap v (repeat (count v) d)))", "user": "5892a5fde4b00487982d5228"}, {"problem": 156, "code": "(fn [v ks]\n (reduce #(assoc %1 %2 v) {} ks))", "user": "57c83afae4b05aa3c4741d17"}, {"problem": 156, "code": "#(reduce (fn [a e]\n           (assoc a e %1)) {} %2)", "user": "58a953dae4b01a0c0b232968"}, {"problem": 156, "code": "(fn [default-value array] (zipmap array (repeat (count array) default-value)))", "user": "58b54852e4b0ebc645576d52"}, {"problem": 156, "code": "(fn [default keys] (into {} (for [key keys] [key default])))", "user": "58aae714e4b01a0c0b23298e"}, {"problem": 156, "code": "(fn [k v] (zipmap v (repeat k)))", "user": "58b80ec1e4b0ebc645576d89"}, {"problem": 156, "code": "(fn [v l] \n  (into {} (map #(hash-map %1 v) l)))", "user": "586e47dee4b01531a375e9a9"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "58a44a14e4b01a0c0b2328f2"}, {"problem": 156, "code": "(fn [d m] (reduce #(assoc %1 %2 d) {} m))", "user": "58b51e05e4b0ebc645576d4c"}, {"problem": 156, "code": "(fn [default vals]\n    (reduce (fn [acc new] (conj acc [new default])) {} vals))", "user": "58b81490e4b0ebc645576d8c"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5760ed10e4b08062f99a4ea1"}, {"problem": 156, "code": "(fn [value ks]\n  (reduce (fn [acc, k] (into acc {k value})) {} ks))", "user": "4fe899a6e4b07c9f6fd12c54"}, {"problem": 156, "code": "(fn default\n  [v ks]\n  (zipmap ks (repeat v)))", "user": "588ce4aee4b05c141a2560a1"}, {"problem": 156, "code": "(fn [default keys] (reduce #(assoc %1 %2 default) {} keys))", "user": "58aa3f02e4b01a0c0b23297d"}, {"problem": 156, "code": "(fn create-map [d ks]\n  (reduce (fn [m k] (assoc m k d)) {} ks))", "user": "58bb218be4b0888cdc949cf4"}, {"problem": 156, "code": "(fn [default coll] (reduce #(assoc %1 %2 default) {} coll))", "user": "583f1533e4b089d5ab817dc8"}, {"problem": 156, "code": "(fn [default-value coll]\n  (zipmap coll (repeat default-value)))", "user": "5885eb2de4b0f1effa3b76c6"}, {"problem": 156, "code": "(fn [defval kws] (reduce merge (for [kw kws :let [dict {}]] (assoc dict kw defval))))", "user": "58bc3202e4b0888cdc949d0b"}, {"problem": 156, "code": "(fn [value keeys]\n  (into {} (map #(hash-map % value) keeys)))", "user": "58bdb36fe4b0888cdc949d35"}, {"problem": 156, "code": "#(zipmap  %2 (repeat %1))", "user": "58765038e4b01531a375ea7e"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %)))", "user": "58988cbbe4b00487982d52d7"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %)))", "user": "5893c64ce4b00487982d524b"}, {"problem": 156, "code": "(fn [default ks]\n  (into {} (map (fn [k] [k default]) ks)))", "user": "58b0bbc5e4b0ebc645576ce6"}, {"problem": 156, "code": "(fn [a b] (zipmap b (repeat a)))", "user": "58b8a3eae4b0888cdc949cb7"}, {"problem": 156, "code": "(fn [val keys]\n  (let [keysAmount (count keys)] \n    ((fn [res]\n      (if \n      (= (count res) keysAmount)\n      res\n      (recur (assoc res (get keys (count res)) val))\n       )\n       ) {})\n    )\n  )", "user": "58bef424e4b021aa9917eccb"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "573102bbe4b0cd1946bd0fbb"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "58c16e18e4b021aa9917ecfa"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "589c0475e4b00487982d5351"}, {"problem": 156, "code": "(fn [d l]\n  (reduce\n   (fn [m e]\n     (assoc m e d))\n   {}\n   l))", "user": "5881d1c2e4b0f1effa3b7644"}, {"problem": 156, "code": "(fn [scalar collection]\n    (into {} (map #(assoc {} %1 %2) collection (iterate #(identity %1) scalar))))", "user": "58a202f2e4b02bd94d917ece"}, {"problem": 156, "code": "#(zipmap %2 (take (count %2) (iterate identity %1)))", "user": "58bbcbc8e4b0888cdc949d00"}, {"problem": 156, "code": "(fn [dval mkeys]\n  (reduce #(assoc %1 %2 dval) {} mkeys))", "user": "589ac5a2e4b00487982d5318"}, {"problem": 156, "code": "#(->> (interleave %2 (repeat %1)) (apply assoc {}))", "user": "58c4b11ae4b021aa9917ed2c"}, {"problem": 156, "code": "(fn [x xs]\n  (loop [m {} \n         ks xs]\n    (if (empty? ks)\n      m\n      (recur (assoc m (first ks) x) \n        \t (rest ks)))))", "user": "58bfa57ae4b021aa9917ecd8"}, {"problem": 156, "code": "(fn [a b] (zipmap b (repeat a)))", "user": "580379bee4b0a837a8b30c8a"}, {"problem": 156, "code": "(fn [a b]\n  (loop [l b m {}]\n    (if (empty? l)\n      m\n      (recur (rest l) (assoc m (first l) a)))))", "user": "57ff52c7e4b0d3187e9009ea"}, {"problem": 156, "code": "(fn [val, keys] \n  (reduce\n   (fn [h, key]\n     (assoc h key val)) {} keys))", "user": "58c66990e4b021aa9917ed53"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "557f748ae4b05c286339e0df"}, {"problem": 156, "code": "(fn [q v] \n    (reduce \n      (fn [p e] \n        (conj p {e q})) {} v))", "user": "58a9e872e4b01a0c0b232973"}, {"problem": 156, "code": "(fn [df seq] (reduce #(assoc %1 %2 df) {} seq))", "user": "57b7de74e4b0fbc9809a27d4"}, {"problem": 156, "code": "(fn [x y]\n   (zipmap y (vec (repeat (count y) x))))", "user": "570e43d8e4b0b0fb43fd06eb"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "58c8e0aae4b021aa9917ed95"}, {"problem": 156, "code": "(fn [v m] (zipmap m (repeat v)))", "user": "53640c40e4b0243289761e61"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "58a32c21e4b02bd94d917eeb"}, {"problem": 156, "code": "(fn [def-val key-seq]\n  (loop [ks key-seq acc []]\n    (if (empty? ks)\n      (apply hash-map acc)\n      (recur (rest ks) (conj acc (first ks) def-val)))))", "user": "58ca613de4b021aa9917edb7"}, {"problem": 156, "code": "(fn [a b] (into {} (for [x [a] y b] {y x})))", "user": "58cabf32e4b03c36ff7e583a"}, {"problem": 156, "code": "#(reduce (fn [v i] (assoc v i %1)) {} %2)", "user": "58462eb0e4b089d5ab817e86"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "58969076e4b00487982d52a2"}, {"problem": 156, "code": "(fn [v l] (reduce (fn [acc x] (assoc acc x v)) {}  l))", "user": "4f066916535dcb61093f6c10"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "58cba946e4b03c36ff7e584f"}, {"problem": 156, "code": "(fn [dv dkeys] \n  (zipmap \n   dkeys \n   (vec (replicate (count dkeys) dv))))", "user": "56351709e4b0bfe05bf117c2"}, {"problem": 156, "code": "(fn [v ks] (into {} (map #(do [% v]) ks)))", "user": "55b6a63ae4b01b9910ae299b"}, {"problem": 156, "code": "(fn setDefault [d xs]\n  (if (empty? xs)\n    {}\n    (assoc (setDefault d (rest xs)) (first xs) d)))", "user": "58cf00c8e4b03c36ff7e58ac"}, {"problem": 156, "code": "(fn [defval keys]\n       (into (sorted-map) \n         (map #(hash-map % defval) keys)))", "user": "5841872be4b089d5ab817e06"}, {"problem": 156, "code": "(fn [a coll] (into {} (map #(vector % a) coll)))", "user": "58d00661e4b03c36ff7e58c2"}, {"problem": 156, "code": "(fn [d c] (reduce #(assoc % %2 d) {} c))", "user": "58b86162e4b0ebc645576d97"}, {"problem": 156, "code": "(fn [x y] \n  (into {} (for [y y]\n    (assoc {} y x))))", "user": "52cfb277e4b07d0d72b273ac"}, {"problem": 156, "code": "(fn [x coll]\n \t(reduce #(assoc % %2 x) {} coll))", "user": "5755e66ee4b02ea1147992cf"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "58d27bcae4b03c36ff7e58fe"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1) )", "user": "572af688e4b0f4d77e651249"}, {"problem": 156, "code": "(fn [s col] \n  (reduce (fn [acc val] (assoc acc val s)) {} col)\n  )", "user": "58bc6a88e4b0888cdc949d16"}, {"problem": 156, "code": "(fn [d ks] \n  (->> ks\n       (map #(assoc {} % d))\n       (reduce merge)))", "user": "58d2b7b3e4b03c36ff7e5908"}, {"problem": 156, "code": "(fn [value keys_list] (reduce #(conj %1 [%2 value]) {} keys_list))", "user": "560c404fe4b05f002753df30"}, {"problem": 156, "code": "(fn [v s]\n  (reduce \n   #(assoc %1 %2 v)\n   {}\n   s))", "user": "58ca8a1de4b03c36ff7e5835"}, {"problem": 156, "code": "(fn [x s] (into {} (map (fn [y] [y x]) s)))", "user": "589771f9e4b00487982d52bd"}, {"problem": 156, "code": "(fn [default keys]\n  (loop [d {}\n         k keys]\n    (if (seq k)\n      (recur \n       (conj d [(first k) default])\n       (rest k))\n      d)))", "user": "58d48df8e4b03c36ff7e5941"}, {"problem": 156, "code": "(fn [default new-keys]\n  (into {} (map #(identity [% default]) new-keys)))", "user": "565ddeb9e4b068f2fe63dc2c"}, {"problem": 156, "code": "(fn comb [a b] (zipmap b (cycle [a])))", "user": "56f3d21ae4b046a417f92055"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5675cdf1e4b05957ce8c614d"}, {"problem": 156, "code": "(fn [default seq-keys]\n  (reduce (fn [result-map seq-key] (into result-map (seq {seq-key default}))) \n          {} seq-keys))", "user": "58d3d6a3e4b03c36ff7e592b"}, {"problem": 156, "code": "(fn [val keys]\n   (zipmap keys (seq (repeat (count keys) val))))", "user": "58d5c245e4b03c36ff7e5964"}, {"problem": 156, "code": "(fn [val keys] (reduce #(assoc %1 %2 val) {} keys))", "user": "4f037faf535dcb61093f6af8"}, {"problem": 156, "code": "(fn [value v]\n  (into {} (map (fn [va] [va value]) v)))", "user": "57dd651ee4b0bd073c202441"}, {"problem": 156, "code": "(fn [x ks]\n  (reduce #(assoc %1 %2 x) {} ks))", "user": "58bc0531e4b0888cdc949d07"}, {"problem": 156, "code": "(fn [d k]\n  (apply hash-map (interleave k (repeat d))))", "user": "563e7fd1e4b0da801c4e466e"}, {"problem": 156, "code": "(fn load-map-with-default [value keys]\n  (loop [k keys\n         new-map {}]\n    (if (empty? k)\n      new-map\n      (recur (rest k) (assoc new-map (first k) value)))))", "user": "58daae01e4b0a4d5acaab664"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "53889587e4b0640c7a9a589e"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "58dcae01e4b0a4d5acaab6a4"}, {"problem": 156, "code": "(fn [val keys]  (zipmap keys ( repeat (count keys) val)) )", "user": "58db362be4b0a4d5acaab675"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %1)))", "user": "58bcea23e4b0888cdc949d23"}, {"problem": 156, "code": "(fn [default ks] (into {} (map (fn [a] {a default}) ks)))", "user": "570eeca5e4b0b0fb43fd06fb"}, {"problem": 156, "code": "(fn [default-val ks]\n  (let [l (count ks)]\n    (zipmap ks (repeat l default-val))))", "user": "58de563fe4b0a4d5acaab6e3"}, {"problem": 156, "code": "(fn default-map [d coll]\n     (apply hash-map (interleave (reverse coll) (repeat d))))", "user": "58dcb8cde4b0a4d5acaab6a7"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "58d4f44ee4b03c36ff7e594f"}, {"problem": 156, "code": "(fn\n  [val list]\n  (loop [result {}\n         remain list]\n    (if (empty? remain)\n      result\n      (recur (assoc result (first remain) val) (rest remain))\n      )\n    )\n)", "user": "557c6ca6e4b05c286339e0c4"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "58db097fe4b0a4d5acaab66f"}, {"problem": 156, "code": "(fn [v  ks]  (reduce #(into %1 {%2 v}) {} ks) )", "user": "58e37946e4b005f69f193cae"}, {"problem": 156, "code": "(fn mapvd [d ks]\n  (apply conj\n    (map\n      #(identity {% d})\n      ks)))", "user": "55b4fa46e4b01b9910ae2983"}, {"problem": 156, "code": "(fn [v ks]\n  (into {} (map #(vector % v) ks)))", "user": "58e2e11ce4b005f69f193ca0"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "58dd21a9e4b0a4d5acaab6b3"}, {"problem": 156, "code": "(fn [v ks]\n  (zipmap ks (repeat v)))", "user": "58e58ae9e4b056aecfd47c9a"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "585a9a16e4b0f14aab7c8752"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "587a3babe4b01531a375eae2"}, {"problem": 156, "code": "(fn [value keys]\n  (reduce (fn [acc cur]\n            (assoc acc cur value))\n          {}\n          keys))", "user": "58e45a2ce4b056aecfd47c69"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "58e7229fe4b056aecfd47cc4"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "58e762d3e4b056aecfd47ccc"}, {"problem": 156, "code": "(fn  [x ymap]\n (reduce (fn [newmpa keyy] (assoc newmpa keyy x))\n          {} ymap))", "user": "58e6a2c5e4b056aecfd47cba"}, {"problem": 156, "code": "(fn [v xs]\n         (reduce #(assoc %1 %2 v) {} xs))", "user": "58c4492be4b021aa9917ed27"}, {"problem": 156, "code": "(fn [x y] (zipmap y (repeat x)))", "user": "58e325f3e4b005f69f193ca7"}, {"problem": 156, "code": "(fn [d v] (into {} (map (fn [k] [k d]) v)))", "user": "579c7db7e4b05b1deef9ae0a"}, {"problem": 156, "code": "(fn [d s] \n    (reduce \n        (fn [a k] \n            (merge \n                a \n                {k d})) \n        {} \n        s))", "user": "58e039d3e4b0a4d5acaab734"}, {"problem": 156, "code": "(fn [defV kvs] (into {} (map (fn [x] (assoc {} x defV)) kvs)))", "user": "58e6c2cae4b056aecfd47cbf"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "58eb66b5e4b056aecfd47d33"}, {"problem": 156, "code": "(fn [d ls]\n  (apply hash-map\n         (mapcat vector\n        \tls\n          \t(repeat d))))", "user": "56ca2f25e4b0ea9b8538f716"}, {"problem": 156, "code": "(fn [default keys] (apply hash-map (interleave keys (repeat default))))", "user": "58e6e624e4b056aecfd47cc1"}, {"problem": 156, "code": "(fn [v ks]\n  (->> (repeat (count ks) v)\n       (interleave ks)\n       (apply hash-map)))", "user": "58dcf11ae4b0a4d5acaab6af"}, {"problem": 156, "code": "(fn map-default [default key-seq]\n  (zipmap key-seq (repeat default)))", "user": "58ed713de4b056aecfd47d84"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %)))", "user": "4f2858ece4b0d6649770a016"}, {"problem": 156, "code": "(fn [x y] (zipmap y (repeat x)))", "user": "569bce78e4b0542e1f8d1458"}, {"problem": 156, "code": "(fn [d k] (apply hash-map(interleave k (repeat d))))", "user": "58eba5cce4b056aecfd47d41"}, {"problem": 156, "code": "(fn [default ks]\n  (zipmap ks (repeat default)))", "user": "58ee5371e4b056aecfd47da8"}, {"problem": 156, "code": "(fn [v coll] (reduce #(assoc %1 %2 v) {} coll))", "user": "5782018de4b0d36ec5835e8e"}, {"problem": 156, "code": "(fn [d ks]\n    (apply hash-map (apply concat (map #(vector % d) ks)))\n    )", "user": "58ec1e63e4b056aecfd47d54"}, {"problem": 156, "code": "#(loop [in %2\n        out {}]\n   (if (empty? in)\n     out\n     (recur (rest in)\n     \t(conj out {(first in) %1}))))", "user": "5895385fe4b00487982d5279"}, {"problem": 156, "code": "(fn [default m] (into {} (map #(hash-map % default) m)))", "user": "54a2760ae4b09f271ff37c5b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "58d6caf5e4b03c36ff7e5975"}, {"problem": 156, "code": "(fn [v c] (into {} (map (fn [x] [x v]) c)))", "user": "58eed4c5e4b056aecfd47db7"}, {"problem": 156, "code": "(fn [dv ks] (zipmap ks (map (fn [k] dv) ks)) )", "user": "51d6f660e4b0154f82ab92f5"}, {"problem": 156, "code": "(fn [deval ks]\n  (apply hash-map\n         (interleave ks (repeat deval))))", "user": "57ffd1a9e4b0a837a8b30c2a"}, {"problem": 156, "code": "(fn [d ks]\n  (->> ks\n       (map (fn [k] [k d]))\n       (into {})))", "user": "55afe57ae4b002ce9d5cbc1c"}, {"problem": 156, "code": "(fn [default vals] (apply hash-map (reduce (fn [acc x] (conj acc default x)) () vals)))", "user": "58f49268e4b0438e51c2cec0"}, {"problem": 156, "code": "(fn [d c] (into {} (map #(vector % d) c)))", "user": "58f25609e4b08e1cf3471cff"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "58bd84d2e4b0888cdc949d31"}, {"problem": 156, "code": "(fn map-def [defVal seq]\n     (when (not (= (first seq) nil))\n          (conj {(first seq) defVal} (map-def defVal (rest seq)))))", "user": "56ffeafee4b08d47c97781c2"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "4f528f70e4b03ad3f0c10d3f"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "58ef4db9e4b056aecfd47dc6"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %1)))", "user": "58f2e8fbe4b0438e51c2ce94"}, {"problem": 156, "code": "(fn [default-value key-seq] (into {} (map #(vector % default-value) key-seq)))", "user": "5796d3ebe4b039eba2ecb0ee"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "58cc390ce4b03c36ff7e5866"}, {"problem": 156, "code": "(fn f [default keys]\n  (if (not (empty? keys))\n    (merge {(first keys) default}\n           (f default (rest keys))) #{}))", "user": "589f37e0e4b02bd94d917e79"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "58ebcabee4b056aecfd47d48"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5567f164e4b0c656e3ff184d"}, {"problem": 156, "code": "(fn [d s]\n      (apply array-map (interleave s (repeat (count s) d))))", "user": "51a3be77e4b0e77c4ca60bf8"}, {"problem": 156, "code": "(fn [val keys] (reduce #(assoc %1 %2 val) {} keys))", "user": "5635adeee4b0bfe05bf117c7"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "58f7dfe6e4b0438e51c2cf1f"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "58f3a2d4e4b0438e51c2ceac"}, {"problem": 156, "code": "(fn [v ks] (into (sorted-map) (for [x ks] (vec [x v]))))", "user": "58eadeafe4b056aecfd47d28"}, {"problem": 156, "code": "(fn [v coll]\n(reduce #(assoc %1 %2 v) {} coll))", "user": "57614a42e4b0994c1922fb85"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "58fd1ed5e4b0438e51c2cfa4"}, {"problem": 156, "code": "(fn [default_val keys_seq]\n  (zipmap keys_seq (repeat default_val)))", "user": "56c12aa2e4b0839206b9d682"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %)))", "user": "58fdbf59e4b0438e51c2cfbc"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "56949fc5e4b0dcc4269f4120"}, {"problem": 156, "code": "(fn [n arr] (reduce (fn[acc x] (conj acc {x n})) {} arr))", "user": "58ec5e86e4b056aecfd47d5f"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "58fd4c41e4b0438e51c2cfae"}, {"problem": 156, "code": "(fn [x, c] (into {} (map #(vector % x) c)))", "user": "58f44c07e4b0438e51c2ceb7"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5054d243e4b0b1b9d1860eb5"}, {"problem": 156, "code": "(fn [default coll]\n  (into {} (map vector coll (repeat (count coll) default))))", "user": "58ffac9de4b0438e51c2cffd"}, {"problem": 156, "code": "(fn [default arr](reduce (fn [m, k] (assoc m k default)) {} arr))", "user": "54b8fea9e4b0ed20f4ff6e9c"}, {"problem": 156, "code": "#(reduce (fn [m a] (assoc m a %1)) {} %2)", "user": "5336ca32e4b0e30313ee6c80"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "58f8d79ee4b0438e51c2cf39"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "53dbca12e4b094d41abdfef6"}, {"problem": 156, "code": "(fn && \n  ([default ks-seq] \n    (&& default {} ks-seq))\n  ([default mp ks-seq]\n    (if (empty? ks-seq)\n      mp\n      (&& default (assoc mp (first ks-seq) default) (rest ks-seq)))))", "user": "578fc3d2e4b0ebec4cfb759b"}, {"problem": 156, "code": "(fn [d ks] (apply hash-map (interleave ks (repeat d))))", "user": "5566d812e4b0c656e3ff1837"}, {"problem": 156, "code": "(fn [x ks] (reduce #(assoc %1 %2 x) {} ks))", "user": "58dc81d1e4b0a4d5acaab69e"}, {"problem": 156, "code": "(fn \n  [default keys] \n  (into {} \n     (map #(hash-map % default) keys)))", "user": "58e13b49e4b005f69f193c77"}, {"problem": 156, "code": "(fn [d s] (reduce (fn [m k] (conj m {k d})) {} s))", "user": "5901158de4b0438e51c2d039"}, {"problem": 156, "code": "(fn [v keys] (into {} (map vector keys (repeat v))))", "user": "58cfb517e4b03c36ff7e58b9"}, {"problem": 156, "code": "(fn [v ks] (->> v repeat (interleave ks) (partition 2) (map vec) (into {})))", "user": "59074b7ce4b047aa04b19951"}, {"problem": 156, "code": "(fn [v k] (reduce (fn [m k] (assoc m k v)) {} k))", "user": "59075e3be4b047aa04b19955"}, {"problem": 156, "code": "(fn [val ks]\n  (zipmap ks (repeat val)))", "user": "572ad0fde4b0f4d77e651244"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "58ee0bb6e4b056aecfd47d97"}, {"problem": 156, "code": "(fn [default keys]\n  (loop [m {}\n         k keys]\n    (if (empty? k)\n      m\n      (recur (conj m [(first k) default]) (rest k)))))", "user": "58ff5898e4b0438e51c2cfec"}, {"problem": 156, "code": "(fn [d s]\n  (loop [m {} se s] \n    (if (empty? se) m (recur (assoc m (first se) d) (rest se)))))", "user": "59096794e4b047aa04b1999e"}, {"problem": 156, "code": "#(into {} (for [x %2] [x %1]))", "user": "590b055ae4b047aa04b199c9"}, {"problem": 156, "code": "(fn [defv llist]\n  (loop [result {} llist llist]\n    (if (empty? llist)\n      result\n      (recur (assoc result (first llist) defv) (rest llist)))))", "user": "590d0bc8e4b047aa04b199fa"}, {"problem": 156, "code": "(fn [x y] (apply merge (map #(hash-map % x) y)))", "user": "58f9fde7e4b0438e51c2cf56"}, {"problem": 156, "code": "(fn [v k] (zipmap k (repeat v)))", "user": "5828927ee4b051871117bf38"}, {"problem": 156, "code": "(fn\n  [default s]\n  (zipmap s (repeat default)))", "user": "590d0c31e4b047aa04b199fb"}, {"problem": 156, "code": "(fn [d ks] (into (sorted-map) (map (fn [k] [k d]) ks)))", "user": "58e5180ae4b056aecfd47c82"}, {"problem": 156, "code": "(fn [default sq] (reduce (fn [a b] (into a [[b default]])) {} sq))\n\n;(fn [default sq] \n;  (loop [m {} ks sq] \n;    (if (empty? ks) \n;      m \n;      (recur (assoc m (first ks) default) (rest ks)))))\n\n\n; others\n;#(into {} (for [k %2] [k %]))\n\n;#(apply assoc {}\n;        (interleave %2 (repeat %1)))", "user": "55e01f4ee4b050e68259b406"}, {"problem": 156, "code": "(fn [default skeys]\n  (apply assoc {} (interleave skeys (repeat default))))", "user": "56f73913e4b08e7d20b9682d"}, {"problem": 156, "code": "(fn [default keys] (reduce (fn [xs x] (conj xs {x default})) {} keys))", "user": "590a7dbfe4b047aa04b199bc"}, {"problem": 156, "code": "(fn [dv ks] (reduce(fn [acc v] (conj (hash-map v dv) acc)) {} ks))", "user": "58ffaddee4b0438e51c2cffe"}, {"problem": 156, "code": "(fn [d l] (reduce conj (map (fn [le] {le d}) l)))", "user": "590bd0fee4b047aa04b199e3"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (repeat v)))", "user": "5907a736e4b047aa04b1995e"}, {"problem": 156, "code": "(fn [d keys]\n  (into {} (map #(vector % d) keys)))", "user": "59156f0be4b0163c97b36f3d"}, {"problem": 156, "code": "(fn this [x y]\n     (cond\n       (= y ()) {}\n       :else (conj (this x (rest y))[(first y) x])\n       )\n     \n     )", "user": "59165082e4b09b4ee5954b88"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5916412ee4b09b4ee5954b87"}, {"problem": 156, "code": "(fn [a s]\n  (apply merge\n         (map hash-map s (repeat a))))", "user": "52d9e126e4b09f7907dd13b1"}, {"problem": 156, "code": "(fn [v coll] (zipmap coll (repeat v)))", "user": "58b989dbe4b0888cdc949ccd"}, {"problem": 156, "code": "(fn map-with-default [default keys]\n  (zipmap keys (repeat default)))", "user": "59032c0fe4b022d14a2aaf9f"}, {"problem": 156, "code": "(fn [default keys]\n  (reduce #(assoc %1 %2 default) {} keys))", "user": "59199cc3e4b09b4ee5954bc8"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %)))", "user": "52ced458e4b07d0d72b27394"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "51b20b76e4b02f8f128bb960"}, {"problem": 156, "code": "(fn [d s] (reduce (fn [acc t] (assoc acc t d)) {} s))", "user": "57f2bf56e4b0511f1d294df8"}, {"problem": 156, "code": "(fn [val seq]\n  (reduce (fn [acc x] (assoc acc x val)) {} seq)\n)", "user": "5822b578e4b04b46fc4b0fa4"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "53d5d43ce4b0e771c302544d"}, {"problem": 156, "code": "(fn [val keys]\n  (loop [result {} keys keys]\n    (if (empty? keys)\n      result\n      (recur (conj result [(first keys) val]) (rest keys)))))", "user": "58ee2c14e4b056aecfd47d9e"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "58cd65fae4b03c36ff7e5889"}, {"problem": 156, "code": "#(into {} (map vec (partition 2 (interleave %2 (repeat %1)))))", "user": "590b3aeae4b047aa04b199d0"}, {"problem": 156, "code": "(fn [default set] \n  (zipmap set (repeat default)))", "user": "591c2f4ee4b09b4ee5954bfc"}, {"problem": 156, "code": "(fn [v ks] (into {} (map #(into {} {% v}) ks)))", "user": "591ac8ece4b09b4ee5954bdd"}, {"problem": 156, "code": "(fn [x xs] (reduce #(assoc %1 %2 x) {} xs))", "user": "5919d209e4b09b4ee5954bcc"}, {"problem": 156, "code": "(fn kek [d v] (into {} (map #(-> {% d}) v)))", "user": "5911aa1de4b0163c97b36ed8"}, {"problem": 156, "code": "(fn [default keys]\n  (into {} (for [d [default] k keys]\n    [k d])))", "user": "5903f0cde4b022d14a2aafb9"}, {"problem": 156, "code": "(fn t [v ks] (into {} (map #(vector % v) ks)))", "user": "5900d5cde4b0438e51c2d02e"}, {"problem": 156, "code": "#(into {} (map (fn [e] [e %1]) %2))", "user": "4f29d9abe4b0d6649770a034"}, {"problem": 156, "code": "(fn [v keys] \n  (apply hash-map (interleave keys (repeat v))))", "user": "590253e3e4b0438e51c2d055"}, {"problem": 156, "code": "(fn myfunc [x keys]\n  (zipmap keys (repeat x)))", "user": "591cbc30e4b09b4ee5954c08"}, {"problem": 156, "code": "(fn [default-val keys] (zipmap keys (repeat (count keys) default-val)))", "user": "59225498e4b09b4ee5954c8c"}, {"problem": 156, "code": "(fn [x y]\n  (zipmap y (repeat x)))", "user": "591f5124e4b09b4ee5954c45"}, {"problem": 156, "code": "(fn defaulter [default coll] (apply hash-map (interleave coll (cycle [default]))))", "user": "58ffbabce4b0438e51c2d002"}, {"problem": 156, "code": "(fn [dv k]\n  (loop [n k\n         r {}]\n    (if (empty? n)\n      r\n      (recur (rest n) (conj r {(first n) dv})))))", "user": "4f6a90f4e4b07046d9f4ef9d"}, {"problem": 156, "code": "(fn [d k] (reduce #(assoc %1 %2 d) {} k))", "user": "58e0a760e4b005f69f193c69"}, {"problem": 156, "code": "(fn [d ks] (reduce #(assoc %1 %2 d) {} ks))", "user": "5922f8a9e4b026ae3852128f"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "58ef93ece4b056aecfd47dca"}, {"problem": 156, "code": "#(loop [ks %2 map {}]\n    (if (empty? ks)\n      map\n      (recur (rest ks) (assoc map (first ks) %1))))", "user": "5901731ae4b0438e51c2d03d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5915a0a5e4b09b4ee5954b73"}, {"problem": 156, "code": "(fn [v k]\n  (loop [keys k\n         val v\n         m {}]\n    (if (nil? (first keys))\n         m\n      (recur (rest keys) v (assoc m (first keys) v)))))", "user": "5922599be4b09b4ee5954c8d"}, {"problem": 156, "code": "(fn\n  [default-val key-list]\n  ; for all in key-list, associate default val\n  (into {} (map vector key-list (repeat default-val))))", "user": "59234753e4b0a390037439ef"}, {"problem": 156, "code": "(fn [a l] (zipmap l (repeat a)))", "user": "59258aa7e4b072a2710fce74"}, {"problem": 156, "code": "(fn [default s]\n  (zipmap s (repeat default)))", "user": "4e6fe3a6535d5021c1a89629"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "592518bfe4b072a2710fce65"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56673885e4b04acd4f672dce"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "592518cde4b072a2710fce66"}, {"problem": 156, "code": "(fn [v m] (reduce #(assoc % %2 v) {} m))", "user": "590088bfe4b0438e51c2d026"}, {"problem": 156, "code": "#(apply conj {} (for [i %2] (vector i %1)))\n\n; #(zipmap %2 (repeat %1))\n\n; #(into {} (map vector %2 (repeat %)))", "user": "58d2af83e4b03c36ff7e5907"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %)))", "user": "592e2a0de4b072a2710fcf96"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5921a080e4b09b4ee5954c77"}, {"problem": 156, "code": "(fn my-fn [default keys]                                                       \n  (zipmap keys (repeat default)))", "user": "58ebd10de4b056aecfd47d49"}, {"problem": 156, "code": "(fn [v ks] (reduce #(assoc %1 %2 v) {} ks))", "user": "52be5d55e4b07a9af579231e"}, {"problem": 156, "code": "(fn [d m]\n   (reduce (fn [m1 a] (conj m1 a)) {} (for [k m] [k d])))", "user": "5918db70e4b09b4ee5954bbb"}, {"problem": 156, "code": "#(into {} (for [k %2] [k %1]))", "user": "58a16387e4b02bd94d917eb1"}, {"problem": 156, "code": "(fn sample [defaultVal keySequence]\n  (zipmap keySequence (for [key keySequence]\n                        defaultVal))\n  )", "user": "591f2e4ae4b09b4ee5954c44"}, {"problem": 156, "code": "(fn [vs ks] (zipmap ks (repeat vs)))", "user": "5923554ee4b0a390037439f2"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "59368efbe4b02506e01a297d"}, {"problem": 156, "code": "(fn [x l] \n  (loop [news {} tmpl l]\n    (if (empty? tmpl)\n      news\n      (recur (assoc news (first tmpl) x) (rest tmpl)))))", "user": "59368ccae4b02506e01a297a"}, {"problem": 156, "code": "(fn [d x] \n  (apply hash-map (interleave x (repeat d))))", "user": "59385840e4b02506e01a29c9"}, {"problem": 156, "code": "(fn [valu mapy]\n  (loop [tmpm mapy newm {}]\n    (if (empty? tmpm)\n      newm\n  (recur (rest tmpm) (assoc newm (first tmpm) valu)))))", "user": "59369515e4b02506e01a297e"}, {"problem": 156, "code": "(fn [value keys]\n  (reduce (fn [x y] (assoc x y value))\n          {}\n          keys))", "user": "58cf8f97e4b03c36ff7e58b7"}, {"problem": 156, "code": "(fn [default ks] (zipmap ks (repeat default)))", "user": "592dbbd5e4b072a2710fcf7f"}, {"problem": 156, "code": "(fn [v k]\n  (apply conj {}\n    (for [c k]\n      [c v])))", "user": "5829d9f8e4b051871117bf4d"}, {"problem": 156, "code": "(fn [d m] (reduce #(assoc %1 %2 d) {} m))", "user": "5938be98e4b02506e01a29ec"}, {"problem": 156, "code": "(fn [n l]\n  (loop [map1 {} tmpl l]\n    (if (empty? tmpl)\n      map1\n      (recur (assoc map1 (first tmpl) n) (rest tmpl)))))", "user": "59368ccae4b02506e01a2979"}, {"problem": 156, "code": "(fn [val coll]\n  (zipmap coll (take (count coll) (repeat val))))", "user": "591a6c9fe4b09b4ee5954bd6"}, {"problem": 156, "code": "(fn defvred4 [vred kljukci]\n  (->> kljukci\n       (map #(hash-map % vred))\n       (apply conj)\n   )\n)\n\n;;(fn defvred3 [vred kljuci]\n;;  (apply conj (map #(hash-map % vred) kljuci))\n;;)", "user": "584d99c5e4b0b7285a6f4e42"}, {"problem": 156, "code": "(fn[valor llaves]( zipmap llaves (repeat valor)))", "user": "592b7269e4b072a2710fcf3f"}, {"problem": 156, "code": "(fn [default coll]\n  (reduce #(assoc %1 %2 default) {} coll))", "user": "593dc5f4e4b069cdc2982bac"}, {"problem": 156, "code": "(fn [default keys]\n  (apply merge (map (fn [k] {k default}) keys)))", "user": "58fe47b0e4b0438e51c2cfcd"}, {"problem": 156, "code": "(fn [value mapa] (\n    (fn [acc value [firstEl & restEl]]\n      (if (nil? firstEl)\n        acc\n        (recur (assoc acc firstEl value) value restEl)\n      )\n    ) {} value mapa)\n   )", "user": "593eaadde4b069cdc2982bc2"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5931e498e4b072a2710fd024"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "593f95d8e4b069cdc2982be3"}, {"problem": 156, "code": "#(zipmap %2(repeat %1))", "user": "59395adfe4b02506e01a29fb"}, {"problem": 156, "code": "(fn [v lst] (reduce (fn [acc curr] (assoc acc curr v)) {} lst))", "user": "5938bca5e4b02506e01a29eb"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "586bc870e4b01531a375e964"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "59419bdfe4b060784b3b78f7"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "59251947e4b072a2710fce69"}, {"problem": 156, "code": "#(zipmap %2 [%1 %1 %1])", "user": "59390a35e4b02506e01a29f3"}, {"problem": 156, "code": "(fn [x y] (zipmap y (repeat x)))", "user": "593910eae4b02506e01a29f4"}, {"problem": 156, "code": "(fn [x xs]\n  (into {} (map #(hash-map % x) xs)))", "user": "59445ff2e4b0b03edd0057a8"}, {"problem": 156, "code": "(fn [d s] (reduce (fn [acc val] (conj {val d} acc)) {} s))", "user": "58fb381ae4b0438e51c2cf71"}, {"problem": 156, "code": "#(apply assoc {} (mapcat list %2 (repeat %1)))", "user": "59449aa2e4b0b03edd0057ad"}, {"problem": 156, "code": "(fn [v ks]\n  (into {}\n    (for [k ks]\n      {k v}\n    )\n  )\n)", "user": "5943abb6e4b060784b3b792b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "59473563e4b07ddc2dafad97"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5948adffe4b07ddc2dafadc6"}, {"problem": 156, "code": "(fn [x y] (zipmap y (repeat (count y) x)))", "user": "593744abe4b02506e01a299b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "594880ade4b07ddc2dafadc2"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %)))", "user": "593dfe60e4b069cdc2982bb1"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5926c254e4b072a2710fceb8"}, {"problem": 156, "code": "(fn mapd [v s]\n  (zipmap s (repeat (count s) v)))", "user": "5848c842e4b089d5ab817ec6"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "57262710e4b0c5bde472c120"}, {"problem": 156, "code": "(fn [val keys]\n  (let [len (count keys)]\n    (zipmap keys (take len (repeat val)))))", "user": "576186a5e4b0994c1922fb8e"}, {"problem": 156, "code": "(fn [x lst]\n  (loop [in lst\n         out {}]\n    (if (empty? in)\n      out \n      (recur (rest in) (assoc out (first in) x)))))", "user": "594bd637e4b07ddc2dafae41"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "593ab583e4b069cdc2982b57"}, {"problem": 156, "code": "(fn [a b]\n  (loop [y b result {}]\n    (if (not= [] y)\n      (recur (rest y) (conj result {(first y) a}) )\n      result)))", "user": "594b3459e4b07ddc2dafae23"}, {"problem": 156, "code": "(fn [default keys] (zipmap keys (repeat (count keys) default)))", "user": "4ddc1c89535d02782fcbea01"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "593bccfae4b069cdc2982b7f"}, {"problem": 156, "code": "#(loop [x %2 y %1 res {}]\n   (if  (not= [] x) (recur (rest x) y (conj res {(first x) y})) res ))", "user": "594e3723e4b07ddc2dafaea8"}, {"problem": 156, "code": "(fn [d k]\n   (reduce (fn [x y] (conj x [y d])) {} k))", "user": "59248a78e4b072a2710fce59"}, {"problem": 156, "code": "#(loop [seq %2 acc {}] (if (empty? seq) acc (recur (rest seq)(assoc acc (first seq) %1))))", "user": "56b2652ae4b0982f16b37e04"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %1)))", "user": "594263cbe4b060784b3b790a"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5950f0bfe4b066ee0a44ae9f"}, {"problem": 156, "code": "(fn [default keys]\n  (zipmap keys (repeat default)))", "user": "590c449ae4b047aa04b199ea"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "594c0bd7e4b07ddc2dafae56"}, {"problem": 156, "code": "(fn [default ks]\n  (reduce #(assoc %1 %2 default) {} ks))", "user": "4e6ffaa3535d5021c1a8962e"}, {"problem": 156, "code": "(fn [default keys]\n  (zipmap keys (repeat default)))", "user": "5954108ae4b066ee0a44aef4"}, {"problem": 156, "code": "(fn [val coll] (reduce #(assoc %1 %2 val) {} coll))", "user": "5952d75ce4b066ee0a44aed4"}, {"problem": 156, "code": "(fn [default mapkeys] (zipmap mapkeys (repeat default)))", "user": "5951250fe4b066ee0a44aea6"}, {"problem": 156, "code": "(fn f [v xs]\n  (->> xs (map (fn [a] {a v})) (reduce merge {})))", "user": "5933b736e4b072a2710fd05d"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "595041e8e4b066ee0a44ae90"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "58969420e4b00487982d52a4"}, {"problem": 156, "code": "(fn [x y] (apply hash-map ( interleave y (repeat (count y) x)  )))", "user": "5953949be4b066ee0a44aeea"}, {"problem": 156, "code": "(fn [v kseq] (zipmap kseq (repeat (count kseq) v)))", "user": "556ff203e4b09a3098a52526"}, {"problem": 156, "code": "(fn [default ks] (into (hash-map) (map #(vector % default) ks)))", "user": "5956c6dae4b066ee0a44af61"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %1)))", "user": "5958cef6e4b066ee0a44af94"}, {"problem": 156, "code": "(fn defmap [v kc]\n  (apply (partial assoc {}) (apply concat (for [k kc] [k v]))))", "user": "5953bdb6e4b066ee0a44aeed"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "58cbdc3be4b03c36ff7e5856"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "592518e8e4b072a2710fce67"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "595b864ee4b066ee0a44afdc"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "594cb88be4b07ddc2dafae6e"}, {"problem": 156, "code": "(fn [default keys]\n      (reduce (fn [map elem]\n                (assoc map elem default)) {} keys))", "user": "56478a82e4b0284900eef61e"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "592519cfe4b072a2710fce6b"}, {"problem": 156, "code": "(fn f [v k]\n  (reduce\n    #(assoc %1 %2 v)\n    {}\n    k))", "user": "55df2752e4b050e68259b3ed"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "58db3c5ae4b0a4d5acaab677"}, {"problem": 156, "code": "(fn [n c]\n  (zipmap c (repeat (count c) n)))", "user": "5954edcbe4b066ee0a44af15"}, {"problem": 156, "code": "(fn [thing collection] \n  (into {} (map (fn [col] {col thing}) collection))\n  )", "user": "59537716e4b066ee0a44aee5"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %)))", "user": "594c1baae4b07ddc2dafae59"}, {"problem": 156, "code": "(fn [defy keyz] (reduce (fn [m k] (assoc m k defy)) {} keyz))", "user": "594765cee4b07ddc2dafad9b"}, {"problem": 156, "code": "(fn [default-val key-vector]\n  (reduce #(assoc %1 %2 default-val) {} key-vector))", "user": "58fc52cee4b0438e51c2cf95"}, {"problem": 156, "code": "(fn t [sep coll]\n  (apply hash-map(mapcat #(vector % sep) coll)))", "user": "59503c5de4b066ee0a44ae8e"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "595c02a9e4b066ee0a44afeb"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5955625fe4b066ee0a44af2f"}, {"problem": 156, "code": "(fn [val keys]\n  (reduce conj (for [key keys]\n                 (hash-map key val))))", "user": "595bc925e4b066ee0a44afe2"}, {"problem": 156, "code": "(fn [a b] (reduce #(assoc %1 %2 a) {} b))", "user": "595a3b41e4b066ee0a44afb7"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "58ea5bdce4b056aecfd47d1b"}, {"problem": 156, "code": "(fn [default sq]\n  (into {} (map vector sq (repeat default))))", "user": "4ddbfb8a535d02782fcbea00"}, {"problem": 156, "code": "(fn [a b] ( zipmap b (repeat a)))", "user": "59346d29e4b072a2710fd077"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5893aa2ae4b00487982d5246"}, {"problem": 156, "code": "( fn [d, ks] \n  ( reduce \n    ( fn [m k] \n      ( conj m {k d} )) \n    {} \n    ks ))", "user": "5963cd4de4b066ee0a44b0d4"}, {"problem": 156, "code": "(fn [v ks]\n  (reduce #(assoc %1 %2 v) {} ks))", "user": "59644d2ae4b069c0a1a19764"}, {"problem": 156, "code": "(fn [default coll]\n  (zipmap coll (repeat default)))", "user": "5911c8e1e4b0163c97b36edc"}, {"problem": 156, "code": "#(into {} (map (fn [v] [v %]) %2))", "user": "59638af5e4b066ee0a44b0cc"}, {"problem": 156, "code": "(fn [a b] (reduce #(assoc %1 %2 a) {} b))", "user": "595fd77ce4b066ee0a44b06f"}, {"problem": 156, "code": "(fn [i ks] (reduce merge {} (map (fn [k] {k i}) ks)))", "user": "572b73d0e4b0cd1946bd0f3a"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %1)))", "user": "58ee84e5e4b056aecfd47dab"}, {"problem": 156, "code": ";(#(doall (mapcat (fn[x](x)) (for [x (range (count %2))]\n;   {(get %2 x) %})))0 [:a :b :c])\n\n#(loop [x %2 res {}]\n   (if (empty? x)\n     res\n     (recur (rest x) (merge res {(first x) %}))))", "user": "5964c614e4b069c0a1a19770"}, {"problem": 156, "code": "(fn [val keys]\n  (reduce #(assoc-in %1 (vector %2) val)\n          {}\n          keys))", "user": "55842bd7e4b05c286339e11c"}, {"problem": 156, "code": "#(reduce (fn [m k] (assoc m k %1)) {} %2)", "user": "5962af8ce4b066ee0a44b0b8"}, {"problem": 156, "code": "(fn\n [val coll-key]\n (into {}\n  (for\n   [k coll-key]\n   {k val})))", "user": "54dbe183e4b024c67c0cf778"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "590b8607e4b047aa04b199db"}, {"problem": 156, "code": "(fn[val ks] (into {} (for [x (map (comp vec list) ks)] (conj x val))))", "user": "59692530e4b069c0a1a197e4"}, {"problem": 156, "code": "(fn [d coll] (reduce #(assoc %1 %2 d) {} coll))", "user": "5455a6d3e4b0e397800069e2"}, {"problem": 156, "code": "(fn [idx arr] (zipmap arr (repeat idx)))", "user": "553b90c8e4b09218d5f45005"}, {"problem": 156, "code": "(fn [default v] (reduce #(conj %1 (hash-map %2 default)) {} v))", "user": "5965eb8de4b069c0a1a19796"}, {"problem": 156, "code": "(fn [v l] (reduce #(assoc %1 %2 v) {} l))", "user": "596caee3e4b069c0a1a19837"}, {"problem": 156, "code": "(fn [v ks]\n  (into {}\n  \t(map (fn [k]\n     \t    [k v])\n       \t ks)))", "user": "57a0b341e4b0c3d858beb8d4"}, {"problem": 156, "code": "(fn foo [x y]\n  (into {} (for [value y] [value x])))", "user": "55c216dde4b0e31453f64974"}, {"problem": 156, "code": "(fn [default items]\n  (loop [items items result {}]\n    (if (empty? items) result\n      \t(let [next-item (first items)]\n          \t(recur (rest items) (assoc result next-item default))))))", "user": "596aaeefe4b069c0a1a19808"}, {"problem": 156, "code": "(fn [r w] (reduce (fn [x e] (assoc x e r)) {} w))", "user": "58ab572be4b0005cfeb1a72b"}, {"problem": 156, "code": "(fn\n  [d m]\n  (reduce #(assoc %1 %2 d) {} m))", "user": "5398d042e4b0b51d73faaf00"}, {"problem": 156, "code": "(fn [no lis]\n   (into {} (for [i lis]\n              [i no])))", "user": "59636b49e4b066ee0a44b0c5"}, {"problem": 156, "code": "(fn [no x]\n  (into {} (for [i x]\n             [i no])))", "user": "59636b37e4b066ee0a44b0c3"}, {"problem": 156, "code": "(fn [no arr]\n  (into {} (for [i arr]\n             [i no])))", "user": "59636b43e4b066ee0a44b0c4"}, {"problem": 156, "code": "#(into {} (for [x %2] {x %}))", "user": "595a4fb8e4b066ee0a44afba"}, {"problem": 156, "code": "(fn \n  [a lst]\n  (let [b (zipmap lst (repeat (count lst) a))]\n    b))", "user": "59636cc2e4b066ee0a44b0c7"}, {"problem": 156, "code": "(fn maps [key vector1]\n  (zipmap vector1 (into [] (repeat (count vector1) key)) ) )", "user": "59636ec9e4b066ee0a44b0c8"}, {"problem": 156, "code": "(fn [d ks] (into {} (map #(vector %1 d) ks)))", "user": "595fd721e4b066ee0a44b06e"}, {"problem": 156, "code": "(fn [default col] \n  (zipmap col (repeat default)))", "user": "58fc92c5e4b0438e51c2cf9a"}, {"problem": 156, "code": "(fn [x y] (zipmap y (repeat x)))", "user": "5975fc20e4b01722bebd4cd2"}, {"problem": 156, "code": "(fn [default keys] (reduce #(assoc %1 %2 default) {} keys))", "user": "51127e8ee4b0350614f07a76"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5908882de4b047aa04b19979"}, {"problem": 156, "code": "#(reduce (fn[m k](assoc m k %1)) {} %2)", "user": "5978b4c9e4b01722bebd4d13"}, {"problem": 156, "code": "(fn default [value ke] (apply hash-map (interleave ke (repeat value))))", "user": "58866b4fe4b0f1effa3b76d4"}, {"problem": 156, "code": "(fn \n  [val col]\n\t(loop [v val c col r {}]\n      (if (first c)\n        (recur v (rest c) (assoc r (first c) v))\n        r)))", "user": "590620e1e4b047aa04b1992c"}, {"problem": 156, "code": "(fn [a b]\n  (apply merge (map #(assoc {} % a) b)))", "user": "5935151ee4b072a2710fd084"}, {"problem": 156, "code": "(fn [arg1 arg2] \n  (zipmap arg2 (repeat arg1)))", "user": "597af3f7e4b02382a38ad1f0"}, {"problem": 156, "code": "(fn [pa pb] (reduce (fn [init kv] (reduce-kv assoc init kv)) ((fn [x z] (map (fn [y] {y x}) z)) pa pb)))", "user": "5971a017e4b01722bebd4c75"}, {"problem": 156, "code": "(fn [x ks]\n  (apply hash-map (mapcat #(list % x) ks)))", "user": "58c2df0ae4b021aa9917ed17"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "597dcb0ce4b0dbe32238d0a2"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5964f9b0e4b069c0a1a19778"}, {"problem": 156, "code": "(fn [default coll] (into {} (map (fn [x] [x default]) coll)))", "user": "59804b60e4b021a7a535fdcf"}, {"problem": 156, "code": "(fn [d l] (into {} (map #(vector % d) l)))", "user": "5980dcd5e4b021a7a535fddb"}, {"problem": 156, "code": "(fn [default toProcess] \n    (loop [final {} value default listProcess toProcess]\n      (if (= (count listProcess) 0) final\n        (recur (assoc final (first listProcess) value) value (rest listProcess)))))", "user": "59759a9ce4b01722bebd4cca"}, {"problem": 156, "code": "(fn [aValue aList]\n  (reduce #(assoc %1 %2 aValue)\n          {}\n          aList))", "user": "597f8984e4b0dbe32238d0bf"}, {"problem": 156, "code": "(fn [v xs] (apply hash-map (mapcat #(list % v) xs)))", "user": "596539dce4b069c0a1a19783"}, {"problem": 156, "code": "(fn [value keys] (reduce #(assoc %1 %2 value) {} keys))", "user": "58c04ca5e4b021aa9917ece6"}, {"problem": 156, "code": "(fn [dv keyseq] (reduce #(assoc %1 %2 dv) {} keyseq))", "user": "5982d82be4b021a7a535fe05"}, {"problem": 156, "code": "(fn [x y] (reduce #(conj % {%2 x}) {} (reverse y)))", "user": "5971763fe4b01722bebd4c72"}, {"problem": 156, "code": "(fn default-dict [value keyseq]\n  ;; Combines keys pairwise with the default value, then reduces the pairs into a hashmap.\n  (reduce #(apply assoc %1 %2) {} (map #(vector % value) keyseq)))", "user": "569f99cce4b0542e1f8d1497"}, {"problem": 156, "code": "(fn [v keys]\n  (into {} (for [k keys] [k v])))", "user": "54f2b1b5e4b050824f58f5b3"}, {"problem": 156, "code": "#(into {} (map vec (partition 2 (interleave %2 (repeat %1)))))", "user": "598085e6e4b021a7a535fdd3"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "598876fee4b021a7a535feb7"}, {"problem": 156, "code": "(fn\n  [val a-seq]\n  (reduce #(conj %1 {%2 val}) {} a-seq))", "user": "56e24e68e4b03a7c14b85a34"}, {"problem": 156, "code": "(fn sk-mapdefault [default-value keys]\n  (into {} (map (fn [key value] {key value}) keys (iterate identity default-value))))", "user": "5884f377e4b0f1effa3b76a8"}, {"problem": 156, "code": "(fn [def-val coll] (reduce #(assoc %1 %2 def-val) {} coll))", "user": "598ad666e4b02b9968b84ce1"}, {"problem": 156, "code": "(fn [default keyset]\n  (reduce #(assoc %1 %2 default) {} keyset))", "user": "5989ee61e4b021a7a535fed7"}, {"problem": 156, "code": "(fn [d s]\n\t(zipmap s (repeat d)\n\t)\n)", "user": "598d746ae4b02b9968b84d23"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "597fa3fbe4b021a7a535fdbf"}, {"problem": 156, "code": "(fn [value keySet]\n  (reduce #(assoc %1 %2 value) {} keySet))", "user": "598ff38ce4b0fcebec4de869"}, {"problem": 156, "code": "(fn [n _keys]\n    (reduce (fn [acc head]\n            (assoc acc head n)) {} _keys))", "user": "5954eef0e4b066ee0a44af17"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %)))", "user": "564f51a0e4b0284900eef6ab"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "598c5a0ee4b02b9968b84d03"}, {"problem": 156, "code": "(fn [defVal coll] (zipmap coll (repeat (count coll) defVal)))", "user": "598af379e4b02b9968b84ce6"}, {"problem": 156, "code": "(fn [v coll] (reduce #(assoc %1 %2 v) {} coll))", "user": "5744b18ce4b009280f9f2b40"}, {"problem": 156, "code": "(fn [default keys]\n\t(zipmap keys (take (count keys) (repeat default)) )  \n)", "user": "5991d2fae4b0866487ed0d68"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %)))", "user": "50aa777fe4b056ee01935866"}, {"problem": 156, "code": "(fn [n m](apply hash-map (mapcat identity (vec(map #(reverse (cons n (list %) )) m)))))", "user": "598d0dc3e4b02b9968b84d18"}, {"problem": 156, "code": "(fn add [x y] (loop [i 0 acc (empty y)]\n                  (if (< (count y) (+ i 1))\n                    (apply hash-map  acc)\n                    (recur (inc i) (conj (conj acc (get y i)) x)))))", "user": "598d22b1e4b02b9968b84d1a"}, {"problem": 156, "code": ";;(fn [d k] (into {} (map #(vector % d) k)))\n(fn [d k] (reduce #(assoc %1 %2 d) {} k))", "user": "59944e73e4b0b211ea3aaac2"}, {"problem": 156, "code": "#(reduce-kv (fn [res idx itm] (assoc res itm %2)) %1 %3) {}", "user": "599389d8e4b0b211ea3aaab6"}, {"problem": 156, "code": "(fn [v ks]\n  (loop [v v\n         ks ks\n         result {}]\n  (if-not (empty? ks)\n    (recur v (rest ks) (assoc result (first ks) v))\n    result)))", "user": "5992dc6ae4b0866487ed0d7d"}, {"problem": 156, "code": "(fn [x s] (reduce #(conj %1 [%2 x]) {} s))", "user": "598229d6e4b021a7a535fdfb"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "560b6895e4b05f002753df1a"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "59971e2de4b07157cc8daacc"}, {"problem": 156, "code": "(fn [default key-list] (reduce (fn [acc current-key] (assoc acc current-key default))\n                               {}\n                               key-list\n                       )\n)", "user": "5990fcb9e4b0866487ed0d5b"}, {"problem": 156, "code": "(fn [def-val col] (into (hash-map) (map #(assoc {} % def-val) col)))", "user": "59874ff6e4b021a7a535fea1"}, {"problem": 156, "code": "(fn [d ks]\n  (reduce (fn [acc k] (conj acc {k d})) {} ks)\n  )", "user": "55b28b57e4b01b9910ae296c"}, {"problem": 156, "code": "(fn default-map [val keys]\n   (into {} (map \n              #(vector % val) keys)))", "user": "56fee925e4b08d47c97781b7"}, {"problem": 156, "code": "(fn [d s]\n  (reduce\n   #(assoc %1 %2 d) {} s))", "user": "598ab445e4b02b9968b84ce0"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "597b878ee4b02382a38ad1fb"}, {"problem": 156, "code": "(fn [x keys] (zipmap keys (repeat x)))", "user": "596a4fbce4b069c0a1a19800"}, {"problem": 156, "code": "(fn [v keys] (loop [result {} ks keys] (if (empty? ks) result (recur (conj result {(first ks) v}) (rest ks)))))", "user": "5995f8ade4b0b211ea3aaae9"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "52faf67ce4b047fd55837005"}, {"problem": 156, "code": "(fn [val lst] (into {} (map (fn[el] [el val]) lst)))", "user": "599acb39e4b07157cc8dab14"}, {"problem": 156, "code": "(fn  defaults-fn\n  [v ks]\n  (apply hash-map (interleave ks (repeat v))))", "user": "59971dcbe4b07157cc8daacb"}, {"problem": 156, "code": "(fn [var l]\n  \t(zipmap l (for [x l] var)))", "user": "5996b419e4b07157cc8daab5"}, {"problem": 156, "code": "(fn [val keys]\n      \t\t(loop [ret {} key keys]\n      \t\t\t(if(empty? key)\n      \t\t\t\tret\n      \t\t\t\t(recur (assoc ret (first key) val) (rest key))\n      \t\t\t\t\t)))", "user": "5996fd2be4b07157cc8daac5"}, {"problem": 156, "code": "(fn [value coll]\n  (loop [v value, c coll, acc {}]\n    (if (empty? c) acc\n        (recur v (rest c) (into acc {(first c) v})))))", "user": "55916764e4b0604b3f94d57b"}, {"problem": 156, "code": "(fn foo [d ks]\n  (if (= ks []) {}\n    (conj {(first ks) d} (foo d (rest ks)))))", "user": "599d49a7e4b0871e7608b7f4"}, {"problem": 156, "code": "; build a list of values the same length as the keyword vector\n; map the two together\n(fn [x coll] (into {} (map vector coll (repeat (count coll) x))))", "user": "57c44053e4b05aa3c4741ccb"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "4fff289ae4b0678c553fc3fd"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5960a1a6e4b066ee0a44b08e"}, {"problem": 156, "code": "(fn [default xs] (zipmap xs (map (constantly default) xs)))", "user": "594be1cce4b07ddc2dafae47"}, {"problem": 156, "code": "(fn [default ks]\n  (reduce\n   #(conj %1 [%2 default])\n   {}\n   ks))", "user": "59a06e55e4b0871e7608b835"}, {"problem": 156, "code": "(fn [default keys] (reduce #(assoc %1 %2 default) {} keys))", "user": "576c2ecae4b07c67f59d1fbb"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "59a06dbce4b0871e7608b834"}, {"problem": 156, "code": "(fn [d ks] (reduce (fn [m k] (assoc m k d)) {} ks))", "user": "59a460ede4b066c664927d52"}, {"problem": 156, "code": "(fn [v ks]\n  (zipmap ks (repeat v)))", "user": "598858d0e4b021a7a535feb5"}, {"problem": 156, "code": "(fn [x s] (reduce #(assoc %1 %2 x) {} s))", "user": "5989e080e4b021a7a535fed6"}, {"problem": 156, "code": "(fn [value keys]\n  (reduce #(assoc %1 %2 value) {} keys))", "user": "59a512b7e4b066c664927d5e"}, {"problem": 156, "code": "(fn [val keys] (zipmap keys (repeat val)))", "user": "59a5cb6ae4b066c664927d6c"}, {"problem": 156, "code": "(fn foo [default keysSeq]\n  (loop [result\t{}\n         default default\n         keysSeq keysSeq]\n    (if (nil? keysSeq)\n      result\n      (recur (assoc result (first keysSeq) default) default (next keysSeq)))))", "user": "599e3677e4b0871e7608b809"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "59a7029ce4b066c664927d8e"}, {"problem": 156, "code": "(fn [default array]\n  (reduce (fn [m el] (conj m [el default])) {} array))", "user": "59a72effe4b066c664927d94"}, {"problem": 156, "code": "(fn [default coll] \n  (reduce \n   (fn [final-map k] \n     (into final-map (hash-map k default))) \n   {} coll))", "user": "59a8a4dce4b0bcf4e9a43af7"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "586b93eae4b01531a375e95b"}, {"problem": 156, "code": "(fn [default ks]\n  (reduce conj (map (fn [k] {k default}) ks)))", "user": "59a96a85e4b0bcf4e9a43b13"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "59ab8beee4b08cbb53654d9e"}, {"problem": 156, "code": "(fn [d k] (apply hash-map (interleave k (repeat d))))", "user": "594bc16be4b07ddc2dafae39"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "57bffed6e4b05aa3c4741c89"}, {"problem": 156, "code": "#(into {} (map (fn [n] {n %1}) %2))", "user": "58e6b788e4b056aecfd47cbd"}, {"problem": 156, "code": "(fn\n  [default ks]\n  (into {} (map (fn [x] [x default]) ks)))", "user": "59a90b2ae4b0bcf4e9a43aff"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "5992de05e4b0866487ed0d7e"}, {"problem": 156, "code": "#(zipmap %2 (take (count %2) (repeat %1)))", "user": "59a2d49de4b066c664927d30"}, {"problem": 156, "code": "(fn [v ks] (loop [m {} ks ks] (if (empty? ks) m (recur (assoc m (first ks) v) (rest ks)))))", "user": "59ac757fe4b00adcf69795d3"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "59a9e517e4b08cbb53654d79"}, {"problem": 156, "code": "#(into {} (for [x %2] (hash-map x %1)))", "user": "599df601e4b0871e7608b801"}, {"problem": 156, "code": "(fn [default ks]\n  (into (hash-map) (for [k ks] [k default])))", "user": "59ad8695e4b0e1f4e384c887"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "59afb004e4b0e1f4e384c8bc"}, {"problem": 156, "code": "(fn [v l] (reduce #(assoc %1 %2 v) {} l))", "user": "59ad6abbe4b0e1f4e384c883"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "59adec09e4b0e1f4e384c897"}, {"problem": 156, "code": "(fn [d col] (apply assoc {} (interleave col (repeat d))))", "user": "59a0262ee4b0871e7608b82d"}, {"problem": 156, "code": "(fn\n  [x y]\n  (apply merge (for [a y]\n                 {a x})))", "user": "59a9c22ae4b08cbb53654d75"}, {"problem": 156, "code": "#(reduce merge (for [x %2] {x %1}))", "user": "59089229e4b047aa04b1997c"}, {"problem": 156, "code": "(fn [default ks]\n  (let [key-vals (conj (vec (interpose default ks)) default)]\n  \t(apply hash-map key-vals)))", "user": "550772cee4b021ccfedb96a8"}, {"problem": 156, "code": "(fn [v m] (reduce #(assoc %1 %2 v) {} m))", "user": "59a31c55e4b066c664927d34"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "59ac0965e4b08cbb53654da6"}, {"problem": 156, "code": "(fn [value ks] (zipmap ks (repeat value)))", "user": "59aeed59e4b0e1f4e384c8ab"}, {"problem": 156, "code": "(fn [default -keys] \n  (zipmap -keys (repeat default)))", "user": "571543bbe4b07c98581c3ad4"}, {"problem": 156, "code": "(fn [char seq]\n  (loop [tmpSeq (map #(conj {} {% char}) seq)\n         newMap {}]\n    (if (empty? tmpSeq)\n      newMap\n      (recur (rest tmpSeq) (conj newMap (first tmpSeq))))))", "user": "59b554cee4b05c620303ca0f"}, {"problem": 156, "code": "(fn [a b] (merge (into {} (map #(assoc {} %1 %2) b (repeat a)))))", "user": "572010a4e4b0c5bde472c08c"}, {"problem": 156, "code": "(fn[a-val a-map]\n        (loop [[head & tail] a-map\n               res {}]\n          (if (nil? head)\n            res\n            (recur tail (assoc res head a-val)))))", "user": "57e6f90de4b0bfb2137f5af6"}, {"problem": 156, "code": "(fn [default l]\n  (reduce #(conj %1 {%2 default}) {} l))", "user": "5954cea2e4b066ee0a44af0a"}, {"problem": 156, "code": "(fn [default array]\n  (reduce\n\t(fn [h elem]\n      (into h {elem default}))\n   (sorted-map)\n   array))", "user": "598e7998e4b02b9968b84d34"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "59bac5c9e4b0a024fb6ae3ed"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "59bee83be4b0a024fb6ae440"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "597768d0e4b01722bebd4cee"}, {"problem": 156, "code": "(fn map-default [default keys] (apply hash-map (interleave keys (repeat default))))", "user": "58c7131be4b021aa9917ed6d"}, {"problem": 156, "code": "(fn doit [v s]\n  (into {} (map (fn [current] [current v]) s)))", "user": "59be62d5e4b0a024fb6ae435"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "59358f74e4b04f87174def52"}, {"problem": 156, "code": "#(loop [values %2  m {}] \n                                (println m)\n                            (if-not (empty? values)\n                              (let [[value & remaining] values]\n                                (recur remaining (into m {value %1} ) ) )\n                              m\n                            )\n                          )", "user": "59c3b603e4b0a024fb6ae4e3"}, {"problem": 156, "code": "(fn [dv, ks]\n  (apply hash-map\n  \t(interleave ks (repeat dv))\n  ))", "user": "59c3b24ee4b0a024fb6ae4e1"}, {"problem": 156, "code": "(fn [initial xs] (reduce #(assoc %1 %2 initial) {} xs))", "user": "59c3a7e9e4b0a024fb6ae4df"}, {"problem": 156, "code": "(fn [d s] (zipmap s (repeat d)))", "user": "54058af3e4b0addc1aec6669"}, {"problem": 156, "code": "(fn [default a_list]\n  (reduce (fn [hmap item] (assoc hmap item default)) {} a_list)\n)", "user": "58fc4963e4b0438e51c2cf91"}, {"problem": 156, "code": "(fn f\n    ([k xs]\n     (reduce #(assoc %1 %2 (get {} %2 k)) {} xs)\n      ))", "user": "596d630ae4b069c0a1a19846"}, {"problem": 156, "code": "(fn [default v] (zipmap v (repeat (count v) default)))", "user": "536fd48be4b0fc7073fd6e88"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "55eb026de4b0121d4835fdb7"}, {"problem": 156, "code": "(fn [a b] (reduce #(conj %1 [%2 a]) {} b))", "user": "59c7c2cde4b0a024fb6ae54b"}, {"problem": 156, "code": "(fn\n  [v k]\n  (reduce conj (map #(hash-map % v) k)))", "user": "59c4d93fe4b0a024fb6ae507"}, {"problem": 156, "code": "(fn [defaultValue coll]\n  (reduce #(assoc %1 %2 defaultValue) {} coll))", "user": "59a1fd6be4b066c664927d1b"}, {"problem": 156, "code": "#(into {} (map (fn [v] {v %1}) %2))", "user": "59adb1cee4b0e1f4e384c891"}, {"problem": 156, "code": "(fn [v k] (into (hash-map) (for [i k] [i v])))", "user": "59c91fa4e4b0a024fb6ae573"}, {"problem": 156, "code": "(fn [value coll] (apply merge (map #(hash-map % value) (seq coll))))", "user": "59c180e4e4b0a024fb6ae489"}, {"problem": 156, "code": "(fn [arg1 arg2]\n  (loop [b arg2 result {}] \n    (if (empty? b) result\n      (recur (rest b) (conj result (set {(first b) arg1}))))))", "user": "594a7ed1e4b07ddc2dafae02"}, {"problem": 156, "code": "(fn [def-val key-seq]\n\t(zipmap key-seq (repeat def-val)))", "user": "59c3d1e7e4b0a024fb6ae4e5"}, {"problem": 156, "code": "(fn [arg list] (reduce (fn [prev curr] (assoc prev curr arg)) {} list))", "user": "5984e7dee4b021a7a535fe43"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "59ac559ee4b00adcf69795d2"}, {"problem": 156, "code": "(fn [d l]\n  (->> (repeat (count l) d)\n   (zipmap l)\n  )\n)", "user": "59d02bfbe4b0ef0a1e9b5b7b"}, {"problem": 156, "code": "(fn [d ks] \n  (into {} \n        (for [k ks] [k d])))", "user": "59497f51e4b07ddc2dafaddd"}, {"problem": 156, "code": "(fn [df _keys] (reduce #(conj %1 {%2 df}) {} _keys))", "user": "59cf6fbce4b0ef0a1e9b5b6c"}, {"problem": 156, "code": "(fn [dflt col]\n  (reduce (fn [new-map key]\n              (assoc new-map key dflt) )\n            {}\n            col)\n            \n  )", "user": "59b0e877e4b0e1f4e384c8d3"}, {"problem": 156, "code": "(fn [val m]\n  (->> m\n       (map #(hash-map %1 val))\n       (reduce #(merge %1 %2) {})))", "user": "59512d5ce4b066ee0a44aea8"}, {"problem": 156, "code": "(fn [a b]\n  (apply hash-map (apply concat (mapcat (fn [c] {c a}) b))))", "user": "59a2c7d5e4b066c664927d2e"}, {"problem": 156, "code": "(fn [defval init-keys]\n  (loop [res  {}, key init-keys] ;;set 2 arguments\n    (if (empty? key)\n      res\n      (recur \n        (assoc res (first key) defval)\n        (rest key))\n      )))", "user": "59cd13d5e4b0ef0a1e9b5b32"}, {"problem": 156, "code": "(fn [v m] (zipmap m (repeat v)))", "user": "592fa9f8e4b072a2710fcfcb"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "58e66350e4b056aecfd47cb2"}, {"problem": 156, "code": "#(reduce (fn [memo arg] (into memo {arg %1})) {} %2)", "user": "51f38193e4b0fca5e8b48226"}, {"problem": 156, "code": "(fn [defval coll] (zipmap coll (map (constantly defval) coll)))", "user": "5587cd80e4b059ccff29b1e5"}, {"problem": 156, "code": "(fn [d ks]\n  (into {}\n        (map (fn [k] [k d])\n             ks)))", "user": "55fd0d19e4b0f488688e067a"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "59c94a69e4b0a024fb6ae576"}, {"problem": 156, "code": "(fn map-defaults [dv keys]\n  (reduce #(assoc %1 %2 dv) {} keys)\n  )", "user": "59d61a6ae4b0ef0a1e9b5c06"}, {"problem": 156, "code": "#(reduce (fn[acc Key] (assoc acc Key %1)) {}  %2)\n\n;#(loop[acc {} KeyMap %2]\n;   (if(empty? KeyMap) acc\n;     (recur (assoc acc (first KeyMap) %1) (rest KeyMap))))\n\n;(fn [v m] (zipmap m (repeat v)))", "user": "59c77511e4b0a024fb6ae545"}, {"problem": 156, "code": "#(reduce (fn [m x] (assoc m x %1)) {} %2)", "user": "595131bee4b066ee0a44aea9"}, {"problem": 156, "code": "(fn [d k] (zipmap k (repeat d)))", "user": "59d75e36e4b0ef0a1e9b5c32"}, {"problem": 156, "code": "(fn [a b] (reduce #(assoc %1 %2 a) {} b))", "user": "59da6480e4b0ef0a1e9b5c68"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "572de985e4b0cd1946bd0f7c"}, {"problem": 156, "code": "(fn [default the-keys]\n   (reduce #(assoc %1 %2 default)\n           {} the-keys))", "user": "58a34442e4b02bd94d917ef2"}, {"problem": 156, "code": "(fn xxx [v ks]\n  (into {} (map #(into [] [% v]) ks)))", "user": "59dec79ee4b01968742fed81"}, {"problem": 156, "code": "#(reduce (fn [a b] (merge a {b %1})) {} %2)", "user": "59ddae03e4b01968742fed65"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "59cf4013e4b0ef0a1e9b5b68"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "53bfd8c4e4b0c98a41f5cca8"}, {"problem": 156, "code": "(fn [default m]\n  (apply merge (map #(hash-map % default) m)) )", "user": "59a80652e4b0bcf4e9a43aeb"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "59c8ffe6e4b0a024fb6ae56c"}, {"problem": 156, "code": "(fn [defval init-keys]\n  (loop [res {}, key init-keys]\n    (if (empty? key)\n      res\n      (recur \n        (assoc res (first key) defval)\n        (rest key))\n      )))", "user": "59da2569e4b0ef0a1e9b5c62"}, {"problem": 156, "code": "(fn [v coll]\n  (->> (repeat v)\n       (interleave coll)\n       (apply hash-map)))", "user": "550e0951e4b06e50f9beb163"}, {"problem": 156, "code": "(fn [v keys] (zipmap keys (repeat (count keys) v)))", "user": "58e17578e4b005f69f193c7f"}, {"problem": 156, "code": "(fn [default coll]\n  (reduce #(assoc %1 %2 default) {} coll))", "user": "59e0f38ae4b08badc2a0c500"}, {"problem": 156, "code": "(fn [value keys] (apply assoc {} (interleave keys (take (count keys) (repeat value)))))", "user": "5839f079e4b089d5ab817d48"}, {"problem": 156, "code": "(fn [val keys]\n   (zipmap keys (repeat val)))", "user": "59e48db0e4b08badc2a0c53e"}, {"problem": 156, "code": "#(zipmap  %2 (cycle [%]))", "user": "4e44358f535dc968683fc4a8"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "58cfbd7ae4b03c36ff7e58ba"}, {"problem": 156, "code": "(fn [default-value keys]\n  (into {} (map #(vector % default-value) keys)))", "user": "599b3844e4b07157cc8dab1d"}, {"problem": 156, "code": "#(reduce (fn [acc el] (assoc acc el %1)) {} %2)", "user": "5957cc41e4b066ee0a44af76"}, {"problem": 156, "code": "(fn [x ys]\n  (into {} (map #(assoc {} % x) ys)\n  ))", "user": "59e0f839e4b08badc2a0c502"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %1)))", "user": "59eb63e3e4b0249b7282077c"}, {"problem": 156, "code": "#(let [xs %2 y %1] (reduce merge {} (map (fn [x] {x y}) xs)))", "user": "59e04fc7e4b08badc2a0c4e8"}, {"problem": 156, "code": "(fn [x y]\n  (zipmap y (repeat x)))", "user": "593c1e3be4b069cdc2982b86"}, {"problem": 156, "code": "(fn [d m] (zipmap m (repeat (count m) d)))", "user": "592edaf5e4b072a2710fcfaf"}, {"problem": 156, "code": "(fn x[v m] (if (empty? m) (hash-map) (assoc (x v (rest m)) (first m) v)))", "user": "59e8bb43e4b0249b72820735"}, {"problem": 156, "code": "#(reduce conj {} (for [v [%1] k %2] [k v]) )", "user": "59c76402e4b0a024fb6ae542"}, {"problem": 156, "code": "(fn [default, keys]\n  (zipmap keys (repeat default)))", "user": "59ef6cfae4b0966464fe6a32"}, {"problem": 156, "code": "(fn [v li]\n  (reduce conj {} (map (fn [x] [x v]) li)))", "user": "59f2af64e4b0966464fe6a87"}, {"problem": 156, "code": "#(apply merge (map (fn [key] {key %1}) %2))", "user": "59f192e0e4b0966464fe6a5e"}, {"problem": 156, "code": "(fn [x y]\n  (loop [a x\n         b y\n         result {}]\n    (if (= (count b) 0)\n      result\n      (recur a\n             (rest b)\n             (assoc result (first b) a)))))", "user": "59df2b8ee4b01968742fed87"}, {"problem": 156, "code": "(fn [defval init-keys]\n  (loop [res {}, key init-keys]\n    (if (empty? key)\n      res\n      (recur \n        (assoc res (first key) defval)\n        (rest key)))))", "user": "590aaa78e4b047aa04b199c0"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5951190be4b066ee0a44aea4"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "59b69bbee4b05c620303ca2a"}, {"problem": 156, "code": "#(loop [zz %2  maap {}]\n     (if (= ()  zz) \n       maap\n       (recur (rest zz) (merge  maap  { (first zz) %1} ))\n     )\n   )", "user": "59dac4fbe4b0ef0a1e9b5c6d"}, {"problem": 156, "code": "(fn [d k] (reduce (fn [acc _] (assoc acc _ d)) {} k))", "user": "59f043d0e4b0966464fe6a3d"}, {"problem": 156, "code": "(fn [default coll] (into {} (for [x coll] (vector x default))))", "user": "59f75327e4b0966464fe6aec"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5797d3d2e4b039eba2ecb106"}, {"problem": 156, "code": "(fn[v,ks](into {} (map #(conj [] % v) ks)))", "user": "59f78761e4b0966464fe6af5"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "59fb1d69e4b0ca45a743a377"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %1)))", "user": "59fa1b05e4b0ca45a743a356"}, {"problem": 156, "code": "(fn map-with-defaults [default-value keys]\n  (loop [result {} remaining-keys keys]\n    (if (empty? remaining-keys)\n      result\n      (recur (assoc result (first remaining-keys) default-value) (rest remaining-keys)))))", "user": "59fa7fb0e4b0ca45a743a366"}, {"problem": 156, "code": "(fn [n xs]\n (->> xs\n  (map #(hash-map % n))\n  (apply merge)))", "user": "57eaf869e4b0bfb2137f5b56"}, {"problem": 156, "code": "(fn [value coll]\n  (apply assoc {} (interleave coll (repeat (count coll) value))))", "user": "59fb1ca3e4b0ca45a743a376"}, {"problem": 156, "code": "(fn [default keys] (loop [new-map {} new-keys keys] (if (nil? (first new-keys)) new-map (recur (assoc new-map (first new-keys) default) (rest new-keys)))))", "user": "59e8d2f7e4b0249b7282073a"}, {"problem": 156, "code": "(fn [default seq] \n    (into {} (map (fn [x] [x default])\n  seq)))", "user": "5645a7f9e4b0284900eef609"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "59f67819e4b0966464fe6ad3"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat (count %2) %1)))", "user": "59fea630e4b01bb0ae8afd10"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "59f820d9e4b0ca45a743a316"}, {"problem": 156, "code": "(fn c-map [x y]\n  (if (empty? y)\n    {}\n    (conj (c-map x (rest y)) (hash-map (first y) x)\n          )\n    )\n  )", "user": "5a022949e4b01bb0ae8afd60"}, {"problem": 156, "code": "(fn f [de ks]\n\t(if (= (count ks) 1)\n\t\t{(first ks) de}\n\t\t(conj {(first ks) de} (f de (rest ks)))))", "user": "5a025edde4b01bb0ae8afd64"}, {"problem": 156, "code": "(fn [def-val arr] (apply array-map (interleave arr (take (count arr) (repeat def-val)))))", "user": "59f9c111e4b0ca45a743a349"}, {"problem": 156, "code": "(fn [v ks] (reduce #(assoc %1 %2 v) {} ks))", "user": "58da426de4b0a4d5acaab654"}, {"problem": 156, "code": "(fn [default mapKeys] (reduce (fn [newMap newKey] (assoc newMap newKey default)) {} mapKeys))", "user": "588fd085e4b00487982d51c0"}, {"problem": 156, "code": "(fn [v k] (reduce (fn [x y] (assoc x y v)) {} k))", "user": "5a04e923e4b01bb0ae8afda9"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (iterate identity v)))", "user": "59f15e20e4b0966464fe6a5a"}, {"problem": 156, "code": "(fn [d ks]\n  (into {} (map vector ks (repeat d))))", "user": "5a065388e4b01bb0ae8afdcb"}, {"problem": 156, "code": "(fn default_map\n  [default_val, init_keys]\n  (if (empty? init_keys)\n    {}\n    (conj (default_map default_val (rest init_keys)) [(first init_keys) default_val])))", "user": "53de4bdae4b0d874e779ae32"}, {"problem": 156, "code": "(fn [v ks]\n  (reduce #(assoc %1 %2 v) {} ks))", "user": "590e5e8ae4b047aa04b19a25"}, {"problem": 156, "code": "(fn [default k] (reduce ( fn [m k] (assoc m k default) ) {} k ))", "user": "5a071cb2e4b01bb0ae8afdd8"}, {"problem": 156, "code": "(fn [default s]\n  (zipmap s (repeat default)))", "user": "5a03d246e4b01bb0ae8afd8c"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "59f7182de4b0966464fe6ae6"}, {"problem": 156, "code": "(fn [d ks]\n  \n  (into {} (map #(hash-map % d) ks))\n  )", "user": "56f2611fe4b04a395b9a04a2"}, {"problem": 156, "code": "(fn [d l]\n  (zipmap l (repeat d)))", "user": "532ae82be4b09d4e7a9b552b"}, {"problem": 156, "code": "(fn [default vector] (reduce #(conj %1 {%2 default}) {} vector))", "user": "5830377ee4b051871117c004"}, {"problem": 156, "code": "(fn [d ks] (apply merge (map (fn [k] {k d}) ks)))", "user": "559ede8fe4b0acc240e314e4"}, {"problem": 156, "code": "(fn [val keys]\n  (reduce #(assoc %1 %2 val) {} keys))", "user": "5a0b9fc0e4b04bbd27e6d992"}, {"problem": 156, "code": "(fn [v c]\n    (into {} (map #(vector % %2) c (repeat v))))", "user": "5a00cb31e4b01bb0ae8afd36"}, {"problem": 156, "code": "(fn [x coll] (apply hash-map (concat (interpose x coll) [x])))", "user": "59ba2ea0e4b0a024fb6ae3e1"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5a0a25fce4b0eab8c044893d"}, {"problem": 156, "code": "(fn [dflt vect] (into {} (map #(hash-map % dflt) vect)))", "user": "5a0a3473e4b0eab8c0448941"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %)))", "user": "59fa241ee4b0ca45a743a358"}, {"problem": 156, "code": "(fn [x y] (apply merge (map (fn [b] (hash-map b x)) y)))", "user": "57c447d9e4b05aa3c4741ccc"}, {"problem": 156, "code": "(fn [default lst] (zipmap lst (repeat default)))", "user": "5482150ae4b0e286459a117b"}, {"problem": 156, "code": "#(reduce (fn[a b] (assoc a b %1)) {} %2)", "user": "55129667e4b06e50f9beb1ac"}, {"problem": 156, "code": "#(loop [e %2 dv %1 resmap {}] (if (<= (count e) 0) resmap (recur (rest e) dv (assoc resmap (first e) dv))))", "user": "58d1c1b1e4b03c36ff7e58ef"}, {"problem": 156, "code": "(fn sdv [v aseq] (apply merge (for [k aseq] (hash-map k v))))", "user": "5a0ce1a5e4b04bbd27e6d9b7"}, {"problem": 156, "code": "(fn [d kx]\n  (reduce \n    (fn [m v]\n      (assoc m v d))\n    {} kx))", "user": "588053cae4b0f1effa3b7612"}, {"problem": 156, "code": "(fn [default keys] \n  (reduce #(assoc %1 %2 default) {} keys))", "user": "5a12dea3e4b04bbd27e6da44"}, {"problem": 156, "code": "(fn [dv v] (apply merge (map (fn [data] {data dv}) v)))", "user": "5a135573e4b0ff51aa4b3180"}, {"problem": 156, "code": "(fn [default v] \n  (reduce conj (map (fn [a] (hash-map a default)) v)))", "user": "5a14228fe4b0ff51aa4b3193"}, {"problem": 156, "code": "#(apply hash-map (concat (interpose %1 %2) [%1]))", "user": "5658c357e4b00d3155796111"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5a172b76e4b0ff51aa4b31d4"}, {"problem": 156, "code": "(fn [v s]\n  (into {} (map (fn [k] [k v]) s)))", "user": "5a188be3e4b0ff51aa4b31ec"}, {"problem": 156, "code": "(fn make-default-map [X Y] \n  \n  (if (empty? Y) Y \n  \t(merge {(first Y) X} (make-default-map \n                          X\n                          (rest Y)\n                         )\n           \n    )\n  )\n)", "user": "5a05a807e4b01bb0ae8afdb8"}, {"problem": 156, "code": "(fn [d c] (reduce (fn [a b]\n            (conj a [b d])) {} c))", "user": "59fd069ae4b01bb0ae8afcf4"}, {"problem": 156, "code": "(fn maker \n  ([df kys] (maker df kys {}))\n  ([df kys mpp] (if (empty? kys) mpp\n                    (maker df (rest kys) (conj mpp [(first kys) df])))))", "user": "5a18f868e4b0ff51aa4b31f7"}, {"problem": 156, "code": "#(reduce (fn [acc v] (assoc acc v %1)) {} %2)", "user": "5a18488ee4b0ff51aa4b31e5"}, {"problem": 156, "code": "(fn [df lst] (into {} (map #(vector % df) lst)))", "user": "54dc9ba1e4b024c67c0cf785"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "59135c11e4b0163c97b36f02"}, {"problem": 156, "code": "(fn [val keys]\n  (reduce #(assoc %1 %2 val) {} keys))", "user": "580a0783e4b0a837a8b30d2c"}, {"problem": 156, "code": "(fn [v k] (zipmap k (repeat (count k) v)))", "user": "57a499dae4b0a966079561e6"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "58e452a2e4b056aecfd47c67"}, {"problem": 156, "code": "#(loop [res {}\n         in %2]\n    (if (empty? in)\n      res\n      (recur (assoc res (first in) %1)\n             (rest in))))", "user": "5a14959de4b0ff51aa4b31a0"}, {"problem": 156, "code": "(fn rec [def-val keys-list]\n  (if (empty? keys-list)\n    {}\n    (conj {(first keys-list) def-val} (rec def-val (rest keys-list)))))", "user": "5a1e93bee4b0ff51aa4b3270"}, {"problem": 156, "code": "(fn [d ks] (let [fin (fn [x y] {y x})] \n             (into {} \n                   (map\t(partial fin d)\tks)\n                   )))", "user": "59ff9424e4b01bb0ae8afd24"}, {"problem": 156, "code": "(fn [d l]\n  (reduce (fn [x y] (assoc x y d)) {} l))", "user": "5a1ef970e4b0ff51aa4b327d"}, {"problem": 156, "code": "(fn [v ks] (reduce #(assoc %1 %2 v) {} ks))", "user": "56ef077ae4b04a395b9a0459"}, {"problem": 156, "code": "(fn [default ks]\n  (loop [result {} cur-keys ks]\n        (if (empty? cur-keys)\n            result\n            (recur (assoc result (first cur-keys) default) (rest cur-keys)))))", "user": "5a21d34ce4b0ff51aa4b32b9"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "59da327de4b0ef0a1e9b5c63"}, {"problem": 156, "code": "(fn [v km]\n  (let [vs (vector v)]\n    (apply merge (for [x vs\n                       y km]\n                   {y x}))))", "user": "5a1149ace4b04bbd27e6da26"}, {"problem": 156, "code": "(fn [val keys] (reduce #(assoc %1 %2 val) {} keys))", "user": "5a09f35fe4b0eab8c0448934"}, {"problem": 156, "code": "(fn [e s] \n   (zipmap s (take (.size s) (repeat e)))\n  )", "user": "55d7312ee4b0e31453f64a9f"}, {"problem": 156, "code": "(fn [m v] (zipmap v (repeat m)))", "user": "5a2b7727e4b09cafd31c7f49"}, {"problem": 156, "code": "(fn [default-val map-keys] (into {} (for [individual-key map-keys] {individual-key default-val}) ))", "user": "5a285a38e4b07f18be40aa67"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5a2df4a0e4b09cafd31c7f74"}, {"problem": 156, "code": "(fn [v ks] (apply hash-map (interleave ks (repeat v))))", "user": "5a1d0381e4b0ff51aa4b3255"}, {"problem": 156, "code": "(fn [x y] (zipmap y (repeat (count y) x)))", "user": "5a2cfa85e4b09cafd31c7f61"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5644149de4b0018b46ad8c07"}, {"problem": 156, "code": "(fn [n, m] (zipmap m (repeat n)))", "user": "5a011305e4b01bb0ae8afd40"}, {"problem": 156, "code": "(fn [d m] (reduce #(assoc %1 %2 d) {}  m))", "user": "583048d9e4b051871117c007"}, {"problem": 156, "code": "(fn [default keys] (reduce #(assoc %1 %2 default) {} keys))", "user": "531bf76fe4b08068f379ed96"}, {"problem": 156, "code": "(fn [val coll]\n  (into {} (map #(-> [% val]) coll)))", "user": "5a1c3c11e4b0ff51aa4b323d"}, {"problem": 156, "code": "(fn [d l]\n    (loop [x l m {}]\n          (if (empty? x)\n              m\n              (recur (rest x) (assoc m (first x) d)))))", "user": "5a34f342e4b0ddc586f153d1"}, {"problem": 156, "code": "(fn [v keys] (zipmap keys (repeat v)))", "user": "5a37fab1e4b001c08efc0c93"}, {"problem": 156, "code": "(fn [value _keys] (apply merge (map (fn [_key] {_key value}) _keys)))", "user": "5773f3a9e4b0979f896515f2"}, {"problem": 156, "code": "(fn [val [& keys]] (into {} (map #(assoc {} % val) keys)))", "user": "59ef5280e4b0966464fe6a2b"}, {"problem": 156, "code": "(fn [a b]\n    (loop [keyz b, res {}]\n        (if (empty? keyz)\n            res\n            (recur (rest keyz) (conj res {(first keyz) a})))))", "user": "510d2a99e4b078ea71921130"}, {"problem": 156, "code": "#(into {} (vec (for [x (range (count %2))] [(nth %2 x) %1])))", "user": "5a3c5c54e4b001c08efc0ce3"}, {"problem": 156, "code": "(fn myFun [value kys]\n  (reduce #(assoc %1 %2 value) {} kys))", "user": "5a3b9092e4b001c08efc0cd7"}, {"problem": 156, "code": "#(zipmap %2 (map (fn [& _] %) %2))", "user": "5a3d7afae4b0447ef91cc5a6"}, {"problem": 156, "code": "(fn [d ks] (reduce #(assoc %1 %2 d) {} ks))", "user": "52513bf1e4b0541d1855b86e"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "51fa90aae4b0f1313d4689e0"}, {"problem": 156, "code": "#(into {} (for [x %2] {x %1}))", "user": "5a3d33b3e4b001c08efc0cef"}, {"problem": 156, "code": "(fn defaultmap\n  [my-default my-keys]\n  (reduce\n   (fn [my-map my-key] (assoc my-map my-key my-default))\n   {}\n   my-keys))", "user": "5a3ece62e4b0447ef91cc5b9"}, {"problem": 156, "code": ";#(into (hash-map) (for [x %2] (hash-map x %1)))\n;#(apply merge (for [x %2] (hash-map x %1)))\n(fn [key vals] (reduce #(conj %1 {%2 key}) {} vals))", "user": "5a257747e4b07f18be40aa1f"}, {"problem": 156, "code": "(fn [d s] \n\t(reduce #(conj %1 [%2 d]) {} s)\n)", "user": "5a401a7de4b0447ef91cc5c5"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "59f4c9c7e4b0966464fe6ab7"}, {"problem": 156, "code": "(fn [dftVal mapKeys] \n   (apply hash-map (reduce concat (map #(list % dftVal) mapKeys)))\n)", "user": "5a424954e4b0447ef91cc5f0"}, {"problem": 156, "code": "(fn [d ks] (into {} (map #(vector % d) ks)))", "user": "5a4372f6e4b0447ef91cc605"}, {"problem": 156, "code": "(fn [a b]\n   (->> (map (fn [x] a) b)\n       (zipmap b))\n   )", "user": "5a43347ee4b0447ef91cc603"}, {"problem": 156, "code": "(fn [v1 v2] (zipmap v2 (repeat v1)))", "user": "5a40bd29e4b0447ef91cc5d6"}, {"problem": 156, "code": "(fn [k m]\n     (reduce merge (for [v m] (assoc {} v k)))\n    )", "user": "558843dae4b059ccff29b1f3"}, {"problem": 156, "code": "(fn[d v] (zipmap v ( repeat d )))", "user": "5a455ddde4b05d388ecb6b3b"}, {"problem": 156, "code": "(fn [x y]  (into {} (map #(assoc {} % x) y)))", "user": "5a42d6a8e4b0447ef91cc5fb"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5a067f26e4b01bb0ae8afdcc"}, {"problem": 156, "code": "(fn adddef [dval ks] (zipmap ks (repeat dval)))", "user": "5a487d9ce4b05d388ecb6b67"}, {"problem": 156, "code": "(fn [dft keylist]\n  (->> keylist (map (fn [k] (assoc {} k dft))) (apply merge)))", "user": "5a47423be4b05d388ecb6b52"}, {"problem": 156, "code": "(fn [x ns] \n  (into {} (map #(vec [% x]) ns))\n  )", "user": "5a388675e4b001c08efc0ca2"}, {"problem": 156, "code": "(fn [x keys] (reduce #(assoc %1 %2 x) {} keys))", "user": "5a4993c0e4b05d388ecb6b71"}, {"problem": 156, "code": "(fn map-constr\n  [v input-seq]\n  (into {} (map #(vector % v) input-seq))\n  )", "user": "5a4cbba1e4b05d388ecb6b98"}, {"problem": 156, "code": "(fn build-map\n  ([keys def-val] (build-map def-val keys []))\n  ([keys def-val acc]\n  (if (empty? keys)\n    (into (hash-map) acc)\n    (recur (rest keys) def-val (conj acc [(first keys) def-val])))))", "user": "5182de5ce4b0353c468deb74"}, {"problem": 156, "code": "#(reduce (fn [a v] (assoc a v %1)) {} %2)", "user": "5a4de614e4b05d388ecb6bb1"}, {"problem": 156, "code": "(fn [v coll] (zipmap coll (take (count coll) (repeat v))))", "user": "5a4d656fe4b05d388ecb6ba9"}, {"problem": 156, "code": "(fn [dfval ks]\n  (loop [ks ks tgt {}]\n    (if (empty? ks)\n      tgt\n      (recur (rest ks) (assoc tgt (first ks) dfval)))))", "user": "5a512929e4b05d388ecb6be2"}, {"problem": 156, "code": "(fn \n  [default map-keys]\n  (into {} (map #(assoc {} % default) map-keys))\n)", "user": "5a4ec4f0e4b05d388ecb6bc2"}, {"problem": 156, "code": "(fn [default values] (reduce #(assoc %1 %2 default) {} values))", "user": "5a4b3abde4b05d388ecb6b81"}, {"problem": 156, "code": "(fn [ d k ] (reduce #(conj %1 {%2 d}) {} k))", "user": "5a536cf2e4b05d388ecb6c10"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5a527beee4b05d388ecb6bfe"}, {"problem": 156, "code": "#(apply hash-map(interleave %2(repeat %1)))", "user": "5a534241e4b05d388ecb6c0a"}, {"problem": 156, "code": "(fn [x coll]\n                      (zipmap coll (repeat x))\n                      )", "user": "58d4d864e4b03c36ff7e594c"}, {"problem": 156, "code": "#(apply conj (for [k %2] (hash-map k %1)))", "user": "56fd058be4b08d47c97781a1"}, {"problem": 156, "code": "(fn [default kcoll] (zipmap kcoll (repeat (count kcoll) default)))", "user": "5a4cac86e4b05d388ecb6b95"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %1)))", "user": "59dfb8dbe4b08badc2a0c4da"}, {"problem": 156, "code": "(fn [v ks] (into {} (map (fn [k] [k v]) ks)))", "user": "552d9b31e4b076ab5578f7eb"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "567447a2e4b05957ce8c6135"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "5a244240e4b0ff51aa4b32e9"}, {"problem": 156, "code": "(fn [v k]\n  (let [c (count k)\n         vals (take c (repeat v))]\n    (zipmap k vals)))", "user": "5547432ee4b0a04f79299548"}, {"problem": 156, "code": "(fn defaulted-map [default-val keys] (into {} (map vector keys (repeat default-val))))", "user": "5a566e8fe4b05d388ecb6c51"}, {"problem": 156, "code": "(fn [defval vect] (zipmap vect (repeat defval)))", "user": "5a5894d9e4b05d388ecb6c81"}, {"problem": 156, "code": "(fn [x xs]\n  (reduce #(assoc %1 %2 x) {} xs))", "user": "4eb0a757535d7eef3080733d"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (repeat (count ks) v)))", "user": "5a591d04e4b05d388ecb6c90"}, {"problem": 156, "code": "(fn [x y]\n  (reduce #(conj %1 (hash-map %2 x)) {} y))", "user": "571d80c7e4b0145328a7627e"}, {"problem": 156, "code": "(fn [value keyset]\n  (apply hash-map\n  \t(interleave keyset\n  \t(repeat value))))", "user": "5a58bfd0e4b05d388ecb6c84"}, {"problem": 156, "code": "#(loop [default-value %1 remaining-list %2 full-map {}]\n    (if (empty? remaining-list)\n      full-map\n      (let [[part & remaining] remaining-list]\n        (recur default-value\n               remaining\n               (conj full-map {part default-value})))))", "user": "5a5ce474e4b0512ff01cd919"}, {"problem": 156, "code": "(fn [d xs]\n  (into {} (map #(vector % d) xs)))", "user": "51dafedee4b09f6bc204eee2"}, {"problem": 156, "code": "(fn map-default [v coll]\n  (zipmap coll (repeat (count coll) v)))", "user": "565654dae4b0f9d632dd849f"}, {"problem": 156, "code": "(fn [v xs]\n  (into (sorted-map) (map #(assoc {} % v) xs)))", "user": "574c3d4ee4b02ea11479921a"}, {"problem": 156, "code": "#(apply hash-map\n  (interleave %2 (repeat %1)))", "user": "5a608721e4b0512ff01cd95f"}, {"problem": 156, "code": "(fn [d ks] \n  (apply hash-map \n         (mapcat #(list % d) ks)))", "user": "5a5a6347e4b05d388ecb6ca9"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5840178ee4b089d5ab817de0"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5a62096de4b0512ff01cd982"}, {"problem": 156, "code": "(fn f \n  ([v s] (f v s {}))\n  ([v s m] (if (empty? s) m (recur v (rest s) (conj m [(first s) v])))))", "user": "5a3c2a08e4b001c08efc0cdf"}, {"problem": 156, "code": "(fn [x, y] (zipmap y (repeat x)))", "user": "5a67030ce4b0512ff01cd9d8"}, {"problem": 156, "code": "(fn [value keys] (\n                              loop [x keys\n                                    result {}]\n                              (if (< 0 (count x))\n                                (recur (rest x) (assoc result (first x) value ))\n                                result)\n                              ))", "user": "5a677a5fe4b0512ff01cd9e7"}, {"problem": 156, "code": "(fn [default sqc]\n  (reduce #(assoc %1 %2 default) {} sqc))", "user": "5a6a32b6e4b0512ff01cda22"}, {"problem": 156, "code": "(fn [x y] \n  (let [ct (count y)]\n\t(zipmap y (repeat ct x))))", "user": "5a6a7cc5e4b0512ff01cda27"}, {"problem": 156, "code": "(fn [x y] \n  (zipmap y (repeat x)\n  )\n)", "user": "5a6afb1de4b0512ff01cda2f"}, {"problem": 156, "code": "(fn [default v]\n  (reduce (fn [m k] (assoc m k default)) {} v))", "user": "5a6b9b95e4b0512ff01cda40"}, {"problem": 156, "code": "#(into {} (for [x %2] [x %]))", "user": "5a625bc2e4b0512ff01cd989"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5a52f2cbe4b05d388ecb6c06"}, {"problem": 156, "code": "(fn f [n s] (into {} (map (fn [entry] {entry n}) s)))", "user": "5a663a32e4b0512ff01cd9c2"}, {"problem": 156, "code": "(fn [d keys] (zipmap keys (repeat d)))", "user": "5920c191e4b09b4ee5954c61"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (repeat v)))", "user": "5a6b15e9e4b0512ff01cda32"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5a488c09e4b05d388ecb6b68"}, {"problem": 156, "code": "(fn [x coll] (zipmap coll (repeat (count coll) x)))", "user": "5a61bf79e4b0512ff01cd97b"}, {"problem": 156, "code": "#(apply assoc {}\n        (interleave %2 (repeat %1)))", "user": "5a66f358e4b0512ff01cd9d5"}, {"problem": 156, "code": "(fn [v col] (into {} (map #(assoc {} % v) col )))", "user": "587b8bdee4b01531a375eaff"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %)))", "user": "58eed5b7e4b056aecfd47db8"}, {"problem": 156, "code": "(fn [val keys] (reduce #(assoc %1 %2 val) {} keys))", "user": "5619b22ee4b053970a773afe"}, {"problem": 156, "code": "#(into {} (map (fn [k] [k %1]) %2))", "user": "50ef77a4e4b0bdaecbb47d99"}, {"problem": 156, "code": "(fn\n  [default coll]\n (reduce (fn [a b] (->> [b default] (conj a)))\n                {}\n                coll)\n\n  )", "user": "5a71c89ee4b0512ff01cda93"}, {"problem": 156, "code": "(fn [v ks]\n  (reduce #(into %1 {%2 v}) {} ks))", "user": "4fd4bddce4b0d4de60cee36e"}, {"problem": 156, "code": "(fn [default coll] \n  (->> coll\n       (map #(vector % default))\n       (reduce conj {})))", "user": "5a798ac5e4b03baeef9276c0"}, {"problem": 156, "code": "(fn f [x y] \n  (if (> (count y) 0) \n    (conj {(first y) x} (f x (rest y))) \n    {}\n  )\n)", "user": "5a78cd9ee4b013a48d399777"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5a779197e4b013a48d399763"}, {"problem": 156, "code": "(fn construct-map [value keys]\n  (into (sorted-map) (for [key keys]\n                       [key value])))", "user": "58f5b58ae4b0438e51c2cedc"}, {"problem": 156, "code": "(fn [x y] (zipmap y (repeat x)))", "user": "5a799077e4b03baeef9276c1"}, {"problem": 156, "code": "(fn [v k]\n  (loop [k k, res {}]\n    (if (seq k)\n      (recur (rest k) (assoc res (first k) v))\n      res)))", "user": "5a7ae674e4b03baeef9276d5"}, {"problem": 156, "code": "(fn [val ks]\n  (apply assoc {} (interleave ks (repeat val))))", "user": "59f77dfae4b0966464fe6af4"}, {"problem": 156, "code": "(fn [v ks]\n  (apply assoc {} (interleave ks (repeat v))))", "user": "5a6af090e4b0512ff01cda2d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "4e4bd94b535dc968683fc4d7"}, {"problem": 156, "code": "(fn [value keyseq] \n  (reduce conj\n   (for [k keyseq]\n     (assoc {} k value))))", "user": "5a720177e4b0512ff01cda96"}, {"problem": 156, "code": "(fn my-defaultmap\n  [x coll]\n  (into {} (map #(vector % x) coll)))", "user": "59f44189e4b0966464fe6aab"}, {"problem": 156, "code": "(fn [x coll]\n  (apply hash-map (interleave coll (repeat (count coll) x))))", "user": "5785de78e4b0ebec4cfb74e8"}, {"problem": 156, "code": "(fn [x coll] (zipmap coll (repeat x)))", "user": "5a5dbe9de4b0512ff01cd92b"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5a7da832e4b03baeef9276fc"}, {"problem": 156, "code": "#(loop [col %2\n        agg {}]\n   (if (empty? col) \n     agg\n     (recur (rest col) (assoc agg (first col) %1))))", "user": "59061cc8e4b047aa04b1992b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "51dd5d6fe4b0c33a4e1da406"}, {"problem": 156, "code": "#(into {} (map (fn [k] {k %1}) %2))", "user": "5a822590e4b00b71e582a073"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %)))", "user": "5a8bc2a1e4b05369db4d24ef"}, {"problem": 156, "code": "(fn[d keys] \n(apply hash-map\n(reduce ( fn[ac val] (conj ac val d) ) [] keys ) \n)\n)", "user": "5a8d55a8e4b05369db4d2514"}, {"problem": 156, "code": "(fn [arg cont] (zipmap cont (repeat (count cont) arg)))", "user": "5a527c16e4b05d388ecb6bff"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "51421cd5e4b0b50abeb46b2c"}, {"problem": 156, "code": "(fn [k vs]\n  (loop [[v & r] vs\n         acc {}]\n    (if (nil? v)\n      acc\n      (recur r\n             (assoc acc v k)))))", "user": "566fa059e4b0a866af6896ea"}, {"problem": 156, "code": "(fn\n  [default keys]\n  (reduce (fn [finmap key] (assoc finmap key default)) {} keys))", "user": "5a9567bae4b0d174b936c752"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5a7df247e4b03baeef927704"}, {"problem": 156, "code": "(fn [default_val sequence_keys]\n  (loop [value1 default_val\n         keys1 sequence_keys\n         map1 {}]\n    (if (= (seq keys1) nil)\n      map1\n      (recur value1 (rest keys1) (conj map1 [(first keys1) value1])))))", "user": "5939e726e4b069cdc2982b45"}, {"problem": 156, "code": "#(apply hash-map (concat (interpose %1 %2) [%1]))", "user": "5a95e50be4b0d174b936c760"}, {"problem": 156, "code": "(fn [val s]\n  (loop [v val seq s map {}]\n    (if (empty? seq)\n      map\n      (recur v (rest seq) (assoc map (first seq) val)))))", "user": "5a962c09e4b0d174b936c765"}, {"problem": 156, "code": "(fn [v ks]\n  (->> ks\n       (map (fn [k] [k v]))\n       (into (hash-map))))", "user": "5a95c639e4b0d174b936c75e"}, {"problem": 156, "code": "(fn [default lst]\n         (zipmap lst (repeat default)))", "user": "55527251e4b0deb715856df3"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5a5767f3e4b05d388ecb6c65"}, {"problem": 156, "code": "(fn muka-ziva [x coll]\n  (loop [old coll new {}]\n   \t(if (empty? old)\n      new\n      (recur (rest old) (merge new {(first old) x})))))", "user": "5a9482b7e4b0d174b936c737"}, {"problem": 156, "code": "(fn [d col] \n  (apply merge \n         (map #(hash-map % d) col)))", "user": "5a999e5ae4b0d174b936c7a2"}, {"problem": 156, "code": "(fn [v ks]\n  (into {} (for [k ks] [k v])))", "user": "58d960f9e4b03c36ff7e59c2"}, {"problem": 156, "code": "(fn \n  [d ks]\n  (reduce\n    #(assoc %1 %2 d)\n    nil\n    ks))", "user": "5a8b6d42e4b05369db4d24e6"}, {"problem": 156, "code": "#(reduce (fn [m k] (assoc m k %1)) {} %2)", "user": "52bba119e4b07a9af57922ea"}, {"problem": 156, "code": "#(into {} (for [ke %2] [ke %1]))", "user": "5a9ac061e4b0d174b936c7c1"}, {"problem": 156, "code": "#(zipmap %2 (take (count %2) (repeat %1)))", "user": "58371573e4b089d5ab817d0c"}, {"problem": 156, "code": "(fn\n  [def-val\n   seq-of-keys]\n  (reduce #(conj %1 {%2 def-val})\n          {}\n          seq-of-keys))", "user": "5a9829e5e4b0d174b936c788"}, {"problem": 156, "code": "(fn [default keys]\n  (zipmap keys (repeat default)))", "user": "5a9be505e4b0d174b936c7cf"}, {"problem": 156, "code": "#(zipmap %2 (cycle [%1]))", "user": "5a9db513e4b0d174b936c7f0"}, {"problem": 156, "code": "#(into {} (for [k %2] [k %1]))", "user": "5a9dbb32e4b0d174b936c7f3"}, {"problem": 156, "code": "#(apply hash-map (concat (interpose %1 %2) (list %1)))", "user": "5a99b863e4b0d174b936c7ae"}, {"problem": 156, "code": "(fn [x xs] (reduce (fn [acc item] (conj acc {item x})) {} xs))", "user": "5a8e9fb5e4b05369db4d2529"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5a998d39e4b0d174b936c79c"}, {"problem": 156, "code": "#(reduce (fn [x y] (assoc x y %1)) {} %2)", "user": "5a9a12d6e4b0d174b936c7b7"}, {"problem": 156, "code": "(fn [val vect]\n  (reduce\n    (fn [a b]\n      (assoc\n        a b val)\n    )\n    {}\n    vect\n  )\n)", "user": "5a9e3698e4b0d174b936c7fc"}, {"problem": 156, "code": "(fn map-d [default coll]\n  (zipmap coll (repeat default)))", "user": "5aa4f7dae4b0d174b936c88c"}, {"problem": 156, "code": "(fn [x seq] (zipmap seq (repeat x)))", "user": "5aa2dc5ae4b0d174b936c861"}, {"problem": 156, "code": "(fn [default sequence]\n  (into {} (map #(vec [% default]) sequence)))", "user": "5a3a15e6e4b001c08efc0cc1"}, {"problem": 156, "code": "(fn [default keys]\n  (reduce (fn [xs x] (conj xs {x default})) {} keys))", "user": "5a948d79e4b0d174b936c73a"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5aaa7a93e4b073f17744254e"}, {"problem": 156, "code": "(fn [val coll]\n   (reduce #(assoc %1 %2 val) {} coll))", "user": "5a8e9a7ae4b05369db4d2528"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5a4443cae4b0447ef91cc60f"}, {"problem": 156, "code": "(fn defini[defi seqi]\n  (loop [elem seqi res {}]\n    (if (seq elem)\n    \t(recur (rest elem) (assoc res (first elem) defi))\n       res\n     )))", "user": "5a6cb2eae4b0512ff01cda57"}, {"problem": 156, "code": "(fn [v ks]\n  (into {} (map (fn [k] [k v]) ks)))", "user": "59769d75e4b01722bebd4cdd"}, {"problem": 156, "code": "#(into {} (map (fn [x] {x %1}) %2))", "user": "5aa5043ee4b0d174b936c88e"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "50bdd4fee4b0594b91591c84"}, {"problem": 156, "code": "(fn [d ks] (into {} (map vector ks (repeat d) )))", "user": "5aa998c6e4b0d174b936c8e5"}, {"problem": 156, "code": "(fn [d lst] (into {} (for [item lst] [item d])))", "user": "5666c2dbe4b04acd4f672dc3"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "4dd57160535dae65d5c462e8"}, {"problem": 156, "code": "(fn [v ks] (reduce #(assoc %1 %2 v) {} ks))", "user": "532dbd3ce4b019098a6f8b40"}, {"problem": 156, "code": "(fn [value coll] \n      (into {} \n            (map hash-map coll (repeat (count coll) value))))", "user": "5ab276f2e4b073f1774425e6"}, {"problem": 156, "code": "(fn [x y] (reduce #(conj %1 {%2 x}) {} y))", "user": "5ab23a78e4b073f1774425e1"}, {"problem": 156, "code": "(fn [default coll] (into {} (map #(hash-map % default) coll)))", "user": "5a781494e4b013a48d399766"}, {"problem": 156, "code": "(fn [x y] (reduce #(assoc %1 %2 x) {} y))", "user": "5ab38af0e4b073f177442601"}, {"problem": 156, "code": "(fn [d col] (reduce (fn [m k] (assoc m k d)) {} col))", "user": "5ab168d2e4b073f1774425c2"}, {"problem": 156, "code": "(fn [d s] (into (hash-map) (map #(vector % d) s)))", "user": "5ab16992e4b073f1774425c4"}, {"problem": 156, "code": "(fn [default init-keys]\n    (loop [ret {}\n           keys init-keys]\n         (if (empty? keys)\n             ret\n             (recur (assoc ret (first keys) default) (rest keys)))))", "user": "5a904de3e4b05369db4d254c"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (cycle (list v))))", "user": "5ab564f8e4b073f177442639"}, {"problem": 156, "code": ";;(fn [default xs] (into {} (map #(hash-map % default) xs)))\n#(zipmap %2 (repeat %1))", "user": "5a67cedbe4b0512ff01cd9ee"}, {"problem": 156, "code": "(fn [x coll] (into (hash-map) (mapv #(vector % \n                                           x) coll)))", "user": "5a4e3166e4b05d388ecb6bbb"}, {"problem": 156, "code": "#(apply hash-map (apply concat (map (fn [k] [k %1]) %2)))", "user": "5aba34c5e4b073f1774426a3"}, {"problem": 156, "code": "(fn [v c]\n  (loop [a c\n         r {}]\n    (if (empty? a)\n      r\n      (recur (rest a) (assoc r (first a) v)))))", "user": "5ab9fe71e4b073f17744269d"}, {"problem": 156, "code": "(fn [value mymap] (zipmap mymap (repeat value )))", "user": "5ab4fd4ae4b073f17744262b"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5ab9eeade4b073f17744269b"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "585b46c8e4b0f14aab7c8766"}, {"problem": 156, "code": "(fn [default-val some-sequence]  (reduce #(assoc %1 %2  default-val) {} some-sequence))", "user": "5a737561e4b0512ff01cdaaa"}, {"problem": 156, "code": "(fn [val keys]\n  (reduce #(assoc %1 %2 val) {} keys))", "user": "5a9181c5e4b002d099cae6f6"}, {"problem": 156, "code": "(fn [v k]\n  (reduce #(assoc %1 %2 v) {} k))", "user": "5a03652ae4b01bb0ae8afd83"}, {"problem": 156, "code": "(fn [d k] (reduce conj {} (map vector k (repeat d))))", "user": "5762bf13e4b0994c1922fbae"}, {"problem": 156, "code": "(fn con [x ks]\n  (reduce #(assoc %1 %2 x) {} ks))", "user": "51e24905e4b01e519814642e"}, {"problem": 156, "code": "(fn [x col] (reduce merge (for [y col] (assoc {} y x))))", "user": "59595f85e4b066ee0a44afa1"}, {"problem": 156, "code": "(fn [default coll] (into {} (for [i coll] [i default])))", "user": "593870e6e4b02506e01a29d6"}, {"problem": 156, "code": "(fn r [v ks] (if (empty? ks) {} (assoc (r v (rest ks)) (first ks)  v)))", "user": "5ab3edf0e4b073f17744260d"}, {"problem": 156, "code": "(fn [value map-keys] (zipmap map-keys (repeat value)))", "user": "5ac35d00e4b0e27600da7712"}, {"problem": 156, "code": "(fn [ele all] (into {} (map #(into [] [% ele]) all)))", "user": "569bfc43e4b0542e1f8d145c"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "555d1e51e4b0a2eb076a39a5"}, {"problem": 156, "code": "(fn [d ks] (reduce #(assoc %1 %2 d) {} ks))", "user": "5ab5f60be4b073f177442643"}, {"problem": 156, "code": "(fn [default xk]\n  (zipmap xk (repeat (count xk) default)))", "user": "5ac6bbe3e4b0e27600da7776"}, {"problem": 156, "code": "(fn map-def\n  [def-val key-seq]\n  (zipmap key-seq  (repeat def-val))\n  )", "user": "5ac37d0fe4b0e27600da7718"}, {"problem": 156, "code": "(fn [default keys]\n  (zipmap keys (repeat default)))", "user": "5ac383b8e4b0e27600da7719"}, {"problem": 156, "code": "#(loop [oldT %2\n       tab {}]\n   (if (not (first oldT))\n     tab\n     (let [newTab (conj tab [(first oldT) %1])]\n     (recur (next oldT) newTab))))", "user": "5a7f77fae4b00b71e582a041"}, {"problem": 156, "code": "(fn [x y]\n  (apply hash-map (interleave y (repeat x))))", "user": "5ac4d1f6e4b0e27600da7735"}, {"problem": 156, "code": "#(reduce (fn [result current] (assoc result current %1))\n         {} \n         %2)", "user": "5ac7f980e4b0e27600da779f"}, {"problem": 156, "code": "(fn [v k] (apply assoc {} (interleave k (repeat v))))", "user": "5a9db5c9e4b0d174b936c7f1"}, {"problem": 156, "code": "(fn mapd\n  ([x items]\n  (mapd x items nil))\n  ([x items a]\n   (if (empty? items)\n     a\n     (recur x (rest items) (merge a (hash-map (first items) x))))))", "user": "5ac741d6e4b0e27600da777d"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %1)))", "user": "596a66cde4b069c0a1a19803"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5acd08eee4b0e27600da7822"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5acc961ae4b0e27600da7810"}, {"problem": 156, "code": "(fn map-defaults [x y]\n    (apply hash-map (interleave y (repeat x))))", "user": "5ac74b34e4b0e27600da777f"}, {"problem": 156, "code": "(fn [default-value coll]\n  (reduce merge\n          (map #(hash-map % default-value) coll)) )", "user": "4ee897fe535d93acb0a66883"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5a7e194de4b03baeef927706"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat (count %2) %1)))", "user": "5aa8f753e4b0d174b936c8d9"}, {"problem": 156, "code": "(fn [default xs] \n  (into {} (map (fn [keyval] [keyval default]) xs)))", "user": "585c61d4e4b0f14aab7c8787"}, {"problem": 156, "code": "(fn [value keys] (apply conj (map (fn [key] {key value}) keys)))", "user": "5ad45f52e4b0ea6055cfabd7"}, {"problem": 156, "code": "(fn [v ks] (apply hash-map (interleave ks (repeat v))))", "user": "599342efe4b0b211ea3aaab0"}, {"problem": 156, "code": "; #(into {} (map (fn [k] [k %]) %2)) ; works\n; #(apply array-map (interleave %2 (repeat %1))) ; works\n; #(apply assoc {} (interleave %2 (repeat %1))) ; works\n; #(into {} (map (fn [k] (identity [k %1])) %2)) ; works\n; #(zipmap %2 (repeat %1)) ; works\n#(into {} (for [k %2] [k %1]))", "user": "5a544eeee4b05d388ecb6c24"}, {"problem": 156, "code": "(fn [val ks] (reduce #(assoc %1 %2 val) {} ks))", "user": "5ad6ad5de4b0ea6055cfac0e"}, {"problem": 156, "code": "(fn [x kys] (into {} (map #(vector % x) kys)))", "user": "5ade6bafe4b0837691e92c23"}, {"problem": 156, "code": "(fn  [default xs]\n  (zipmap xs (repeat default))\n  )", "user": "5991eec7e4b0866487ed0d6e"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (repeat v)))", "user": "5abe2fc2e4b073f17744271e"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5ae0976be4b0837691e92c43"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5ad5bb0ae4b0ea6055cfabf0"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5ac834f4e4b0e27600da77ab"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5ae246b1e4b0837691e92c5d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5acaa269e4b0e27600da77e6"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5adf5f9be4b0837691e92c33"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "59e8b4ade4b0249b72820734"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5aa4a1ffe4b0d174b936c886"}, {"problem": 156, "code": "(fn [default key-seq]\n  (zipmap key-seq (replicate (count key-seq) default)))", "user": "5aeca4c9e4b0cc2b61a3bc0a"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5ad36ae9e4b0ea6055cfabc3"}, {"problem": 156, "code": "(fn [default coll]\n   (into {} (map #(vector % default) coll))\n )", "user": "5aefdc8de4b0cc2b61a3bc40"}, {"problem": 156, "code": "(fn [k s]\n   (apply assoc {}\n     (interleave s (repeat k) )))", "user": "582625d3e4b051871117bef2"}, {"problem": 156, "code": "(fn [x c] (apply hash-map (apply concat (map (fn [e] [e x]) c))))", "user": "5aba04dce4b073f17744269e"}, {"problem": 156, "code": "(fn [v s]\n   (reduce (fn [l r]\n             (conj l {r v}))\n           {}\n           s))", "user": "5a084a24e4b01bb0ae8afdf2"}, {"problem": 156, "code": "(fn [v s]\n  (reduce (fn [acc k] \n            (assoc acc k v))\n          {} \n          s))", "user": "5af1e1b1e4b0cc2b61a3bc67"}, {"problem": 156, "code": "(fn [arg arg_list]\n  (reduce (fn [arg1 arg2] (assoc arg1 arg2 arg)) \n          {} arg_list\n   )\n  )", "user": "5ae71f14e4b0837691e92ca7"}, {"problem": 156, "code": "(fn [dval kseq]\n  (into {} (map (fn [k] [k dval]) kseq)))", "user": "53a9db09e4b047364c04443b"}, {"problem": 156, "code": "(fn [val keys] (into {} (map #(vector % val) keys)))", "user": "575ddfd1e4b02ea11479938d"}, {"problem": 156, "code": "(fn [default-value map-keys] \n  (reduce \n    #(assoc %1 %2 default-value) \n    {} map-keys))", "user": "5af31955e4b0cc2b61a3bc7a"}, {"problem": 156, "code": "(fn [d, k] (into (hash-map) (map (fn [x] [x d]) k)))", "user": "5afa3590e4b0cc2b61a3bcea"}, {"problem": 156, "code": "(fn [x y] (zipmap y (repeat x)))", "user": "5af3a4d0e4b0cc2b61a3bc8b"}, {"problem": 156, "code": "(fn [x kys] (into {} (map #(vector % x) kys)))", "user": "5af361d4e4b0cc2b61a3bc83"}, {"problem": 156, "code": "(fn [x y] (reduce #(assoc %1 %2 x) {} y))", "user": "52da20c7e4b09f7907dd13b3"}, {"problem": 156, "code": "(fn [df keyz] (reduce #(conj %1 {%2 df}) {} keyz) )", "user": "5afc115de4b0cc2b61a3bcff"}, {"problem": 156, "code": "#(into {}\n  (for [lis %2]\n   [lis %1]))", "user": "5a9c7174e4b0d174b936c7d8"}, {"problem": 156, "code": "(fn\n  [i s]\n  (into {} (map #(vector % i) s)))", "user": "5af907e6e4b0cc2b61a3bcda"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5afca5b9e4b0cc2b61a3bd13"}, {"problem": 156, "code": "(fn [defl lst]\n  (reduce #(assoc %1 %2 defl) {} lst))", "user": "5adcc688e4b0837691e92c05"}, {"problem": 156, "code": "(fn [v ks]\n  (zipmap ks (repeat v)))", "user": "5af8221ce4b0cc2b61a3bccd"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5afb4b15e4b0cc2b61a3bcf6"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5b008bcae4b0cc2b61a3bd3d"}, {"problem": 156, "code": "(fn zipper [default keys] (zipmap keys (repeat default)))", "user": "5af865a9e4b0cc2b61a3bcd1"}, {"problem": 156, "code": "(fn [default keys]\n  (zipmap keys (repeat default)))", "user": "5afcd6d1e4b0cc2b61a3bd17"}, {"problem": 156, "code": "(fn [default values]\n  (reduce #(assoc %1 %2 default) {} values))", "user": "5a0ef454e4b04bbd27e6d9fa"}, {"problem": 156, "code": "(fn [v m] (zipmap m (repeat v)))", "user": "5b046a9ee4b0cc2b61a3bd76"}, {"problem": 156, "code": "(fn [default coll] (zipmap coll (repeat (count coll) default)))", "user": "5b02a170e4b0cc2b61a3bd52"}, {"problem": 156, "code": "(fn [x y]\n  (loop [f x\n         s y\n         r {}]\n    (if (empty? s)\n      r\n      (recur f (rest s) (assoc r (first s) f)))))", "user": "5af74644e4b0cc2b61a3bcc2"}, {"problem": 156, "code": "(fn [default coll]\n  (zipmap coll (repeat default)))", "user": "5aea2d21e4b0cc2b61a3bbe2"}, {"problem": 156, "code": "(fn [v ks]\n  (loop [res {}\n         v v\n         ks ks]\n    (if (empty? ks)\n      res\n      (recur (assoc res (first ks) v) v (rest ks)))))", "user": "59d9dcfbe4b0ef0a1e9b5c5d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5b0546eae4b0cc2b61a3bd7e"}, {"problem": 156, "code": "(fn\t[default keyz]\n\t(apply merge (vec (map #(hash-map % default) keyz))))", "user": "5afb3426e4b0cc2b61a3bcf5"}, {"problem": 156, "code": "#(loop [l %2 o '()]\n        (if (not (empty? l))\n            (recur\n                (butlast l)\n                (cons (last l) (cons %1 o)))\n            (apply hash-map o)))", "user": "5b083513e4b0cc2b61a3bdb4"}, {"problem": 156, "code": "(fn default-map [default-val keys]\n  (reduce (fn [new-map key] (assoc new-map key default-val))\n          {}\n          keys\n          ))", "user": "5a55c713e4b05d388ecb6c43"}, {"problem": 156, "code": "(fn [v coll]\n(reduce #(assoc %1 %2 v) {} coll))", "user": "563f0fdae4b08d4f616f5ece"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5b0d72e5e4b0cc2b61a3bdf8"}, {"problem": 156, "code": "(fn [d s]\n  (reduce #(assoc %1 %2 d) {} s))", "user": "59ee2b59e4b0966464fe6a10"}, {"problem": 156, "code": "(fn map-defaults [default keys]\n  (zipmap keys (repeat default)))", "user": "5af554e8e4b0cc2b61a3bca6"}, {"problem": 156, "code": "(fn [default xs]\n(loop [default default\n       values xs\n       map-thing {}]\n     (if (seq values)\n         (recur default (rest values) (assoc map-thing (first values) default))\n         map-thing)))", "user": "5953053ce4b066ee0a44aeda"}, {"problem": 156, "code": "(fn [defy keyz]\n  (loop [zz keyz  maap {}]\n    (if (= () zz)\n      maap        \n      (recur (rest zz) (merge maap {(first zz) defy})))))", "user": "5b102ab8e4b0cc2b61a3be19"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (repeat v)))", "user": "5b0e6795e4b0cc2b61a3be03"}, {"problem": 156, "code": "(fn [val ks]\n  (->> ks\n       (map (fn [k] [k val]))\n       (into {})))", "user": "5777c3d6e4b0979f8965164f"}, {"problem": 156, "code": "(fn [v ks]\n  (reduce #(assoc %1 %2 v) {} ks))", "user": "5b0c6874e4b0cc2b61a3bde5"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5a291617e4b07f18be40aa76"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5b138157e4b0cc2b61a3be51"}, {"problem": 156, "code": "(fn __ [d l]\n  (loop [s (seq l)\n         m {}]\n    (if-not s\n      m\n      (recur (next s) (assoc m (first s) d)))))", "user": "5b13ba71e4b0cc2b61a3be53"}, {"problem": 156, "code": "(fn [x col]\n  (apply conj (map #(hash-map % x) col)))", "user": "5af4446de4b0cc2b61a3bc93"}, {"problem": 156, "code": "(fn [standard coll]\n  (reduce (fn [new-map valor]\n            (assoc new-map valor standard))\n          {}\n          coll))", "user": "5adbbf89e4b0837691e92bf4"}, {"problem": 156, "code": "(fn [d ks] (into {} (map #(vector % d) ks)))", "user": "56aad332e4b03c432f187337"}, {"problem": 156, "code": "(fn [x y] (zipmap y (repeat (count y) x)))", "user": "5b1619e4e4b0cc2b61a3be77"}, {"problem": 156, "code": "(fn [value arr] (reduce #(assoc %1 %2 value) {} arr))", "user": "5a66fddee4b0512ff01cd9d7"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "5b17df84e4b00d69b768e770"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5b0b8d29e4b0cc2b61a3bdd7"}, {"problem": 156, "code": "#(loop [m {}\n         y %2]\n    (if (empty? y)\n      m\n      (recur (assoc m (first y) %)\n             (rest y))))", "user": "5afdca89e4b0cc2b61a3bd20"}, {"problem": 156, "code": "(fn [dval k]\n    (reduce\n      (fn [z h] (assoc z h dval))\n      {}\n      k))", "user": "5b15811ee4b0cc2b61a3be6f"}, {"problem": 156, "code": "(fn [v x]\n (loop [col x m {}]\n  (if-not (seq col)\n   m\n   (recur (rest col) (assoc m (first col) v)))))", "user": "5b0180cfe4b0cc2b61a3bd47"}, {"problem": 156, "code": "(fn [defv ks]\n\t(reduce \n     \t(fn [m k] (assoc m k defv)) \n     \t{} \n     \tks)\n  )", "user": "5b205959e4b03cfeda66ed33"}, {"problem": 156, "code": "(fn [default ks] (reduce (fn [acc k] (assoc acc k default)) {} ks))", "user": "5b1c16e1e4b03cfeda66ecf2"}, {"problem": 156, "code": "#(zipmap %2 (take (count %2) (repeat %1)))", "user": "570eeb66e4b0b0fb43fd06fa"}, {"problem": 156, "code": "(fn[v m]\n(into {} (map\n           (fn [e]\n             {e v})\n           m))  \n  \n )", "user": "58f4a3dfe4b0438e51c2cec3"}, {"problem": 156, "code": "#(apply hash-map(interleave %2 (repeat %1)))", "user": "59c21d90e4b0a024fb6ae49d"}, {"problem": 156, "code": "(fn [v ks]\n  (reduce #(assoc % %2 v) {} ks))", "user": "5b22328ee4b03cfeda66ed5d"}, {"problem": 156, "code": "(fn [dv arr]\n  (into {} (map #(reduce hash-map %) (map #(hash-map % dv) arr)))\n  )", "user": "5b2229eee4b03cfeda66ed5b"}, {"problem": 156, "code": "(fn [dd mkeys] (into {} (map (fn [k] (vector k dd)) mkeys)))", "user": "5b210749e4b03cfeda66ed48"}, {"problem": 156, "code": "(fn [default aseq] (into {} (map #(hash-map % default) aseq)))", "user": "573e4be9e4b05c31a32c0829"}, {"problem": 156, "code": "#(into \n  {}\n  (for [x %2]\n    [x %]\n         )\n  )", "user": "59c42426e4b0a024fb6ae4f5"}, {"problem": 156, "code": "(fn [default coll] (zipmap coll (repeat default)))", "user": "5b22cd0be4b08b1df1c3674f"}, {"problem": 156, "code": "(fn [x coll]\n  (reduce (fn [m n] (assoc m n x)) {} coll))", "user": "5afecee2e4b0cc2b61a3bd28"}, {"problem": 156, "code": "(fn [v ks] (apply merge (map #(assoc {} % v) ks)))", "user": "5a0c822fe4b04bbd27e6d9b0"}, {"problem": 156, "code": "(fn [default my-keys]\n  (zipmap my-keys (repeat default)))", "user": "54dfbacae4b024c67c0cf7b1"}, {"problem": 156, "code": "(fn [default keys] (reduce (fn [result item] (assoc result item default)) {} keys))", "user": "5b1f84b3e4b03cfeda66ed1f"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "585aad0be4b0f14aab7c8753"}, {"problem": 156, "code": "(fn [default-value ks]\n  (reduce #(assoc %1 %2 default-value) {} ks))", "user": "5aa7e6eae4b0d174b936c8c0"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5b113f20e4b0cc2b61a3be2c"}, {"problem": 156, "code": "(fn [default keys] (apply hash-map \n                     (mapcat #(vector % default) keys)))", "user": "5b236e55e4b08b1df1c36759"}, {"problem": 156, "code": "(fn [default coll] (into {} (for [x coll] {x default})))", "user": "5afd31b7e4b0cc2b61a3bd18"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (repeat v)))", "user": "4fa4f2f2e4b081705acca1aa"}, {"problem": 156, "code": "(fn [value key-list]\n    (into {} (map #(-> [% value])\n                  key-list)))", "user": "5b28cf92e4b063e2438bcc56"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56b280e3e4b0982f16b37e06"}, {"problem": 156, "code": "(fn [defaultvalue col]\n  (reduce #(assoc %1 %2 defaultvalue) {} col))", "user": "5a58da38e4b05d388ecb6c8b"}, {"problem": 156, "code": "(fn md[default keys]\n  (reduce (fn[memo key] (assoc memo key default)) {} keys))", "user": "5980f91ae4b021a7a535fddd"}, {"problem": 156, "code": "(fn [val keys]\n  (reduce #(assoc %1 %2 val) {} keys))", "user": "5b2c79c6e4b025bcb146f2b7"}, {"problem": 156, "code": "#(into {} (for [x %2] [x %1]))", "user": "5b2e6b02e4b025bcb146f2d3"}, {"problem": 156, "code": "(fn [x y]\n   (reduce\n     merge {} ((fn [a b]\n                  (map #(hash-map % a) b)) x y)))", "user": "5b15a037e4b0cc2b61a3be70"}, {"problem": 156, "code": "(fn [defValue keysList] (zipmap keysList (repeat defValue )))", "user": "5b32571ee4b025bcb146f318"}, {"problem": 156, "code": "(fn constant-map [v ks] (apply hash-map (interleave ks (repeat v))))", "user": "5b073c34e4b0cc2b61a3bda4"}, {"problem": 156, "code": "(fn default-map [d v]\n  (loop [v-loop v coll {}]\n    (if (empty? v-loop)\n      coll\n      (recur (rest v-loop) (assoc coll (first v-loop) d)))))", "user": "5b2c76c8e4b025bcb146f2b6"}, {"problem": 156, "code": "(fn [mdef coll]\n   (into {} (map #(vector % mdef) coll)))", "user": "5b34aba7e4b025bcb146f352"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5b23f306e4b08b1df1c36769"}, {"problem": 156, "code": "(fn [default keys]\n  (reduce (fn [xs x] (conj xs {x default})) {} keys))", "user": "5b333626e4b025bcb146f32f"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5b36eae0e4b02d533a91bba2"}, {"problem": 156, "code": "(fn [v s]\n  (zipmap s (repeat (count s) v)))", "user": "5b2689e3e4b063e2438bcc33"}, {"problem": 156, "code": "(fn a[d k] ( if (first k) ( conj (a d (rest k)) (hash-map (first k) d) ) {} ) )", "user": "5b3aa98be4b02d533a91bbca"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "59e8a952e4b0249b72820733"}, {"problem": 156, "code": "(fn [defy keyz]\n  (loop [zz keyz  maap {}]\n    (if (= () zz)\n      maap        \n      (recur (rest zz) (merge maap {(first zz) defy})))))", "user": "5b3ca9c9e4b02d533a91bbe3"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5b09dc89e4b0cc2b61a3bdc3"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5b2be9b1e4b025bcb146f2b0"}, {"problem": 156, "code": "(fn \n  [a b]\n  (into {} (map #(hash-map % a) b)))", "user": "5b3de9a7e4b02d533a91bbf4"}, {"problem": 156, "code": "(fn [Standard \n     Karte] \n\t(loop [Liste Karte\n\t\t  Result nil]\n\t\t(if (empty? Liste)\n\t\t\tResult\n\t\t\t(recur (rest Liste) (assoc Result (first Liste) Standard))))\n\t\t\t\t)", "user": "5b35de7be4b02d533a91bb97"}, {"problem": 156, "code": "(fn [k m]\n  (zipmap m (repeat k)))", "user": "5b04662ce4b0cc2b61a3bd75"}, {"problem": 156, "code": "(fn [k items] (reduce conj (map (fn [item] {item k}) items)))", "user": "5b465b8be4b02d533a91bc65"}, {"problem": 156, "code": "(fn [default l]\n  (reduce (fn [acc item] (assoc acc item default)) {} l)\n  )", "user": "5a932f63e4b0d174b936c71b"}, {"problem": 156, "code": "(fn [dv xs] \n  (reduce conj \n    (map #(hash-map %1 dv) xs)))", "user": "5b25fbb9e4b063e2438bcc2e"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5b4b8cd6e4b02d533a91bc9f"}, {"problem": 156, "code": "(fn [val keys] (zipmap keys (repeat val)))", "user": "4e1e89a2535d04ed9115e809"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5a9d64c8e4b0d174b936c7eb"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5b480785e4b02d533a91bc76"}, {"problem": 156, "code": "(fn[x y](zipmap y (repeat x)))", "user": "5826a843e4b051871117befd"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5b47a4f7e4b02d533a91bc73"}, {"problem": 156, "code": "(fn [a b] (reduce #(into %1 {%2 a}) {} b))", "user": "5b4a0ce3e4b02d533a91bc92"}, {"problem": 156, "code": "(fn [a b] (into {} (map (fn [x] [x a]) b)))", "user": "5b507222e4b02d533a91bce7"}, {"problem": 156, "code": "(fn [default l] (reduce (fn [mm k] (assoc mm k default)) {} l))", "user": "5b4b4052e4b02d533a91bc9a"}, {"problem": 156, "code": "(fn mdef [d coll] (into {} (map #(vec (list % d)) coll)))", "user": "5b421edce4b02d533a91bc2c"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5b552e2ee4b02d533a91bd2e"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "54ecd6f1e4b024c67c0cf858"}, {"problem": 156, "code": "(fn [default ks] (zipmap ks (repeat default)))", "user": "5b51b9f8e4b02d533a91bcfe"}, {"problem": 156, "code": "(fn [valeur cles]\n  (loop [s cles, res {}]\n    (if (seq s)\n      (recur (rest s) (assoc res (first s) valeur))\n      res)))", "user": "5a481e05e4b05d388ecb6b64"}, {"problem": 156, "code": "(fn [d xs] \n  (reduce (fn [m k] (assoc m k d)) {} xs))", "user": "57a5da5ee4b0a966079561fe"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5aeb0b44e4b0cc2b61a3bbee"}, {"problem": 156, "code": "(fn [v coll] (reduce #(assoc %1 %2 v) {} coll))", "user": "5a2834dfe4b07f18be40aa64"}, {"problem": 156, "code": "(fn [n col]\n  (reduce #(assoc %1 %2 n) {} col))", "user": "5b4dfd5de4b02d533a91bcc3"}, {"problem": 156, "code": "(fn [v map-keys]\n  (reduce \n   (fn [acc-map k]\n     (assoc acc-map k v))\n   {}\n   map-keys))", "user": "59b93cd7e4b0a024fb6ae3c7"}, {"problem": 156, "code": "(fn map-defaults\n  [init-value init-keys]\n  ;; 0 and [:a :b :c]\n  (loop [default-map {}\n         key-set init-keys]\n    (if (empty? key-set)\n      default-map\n      (recur \n        (assoc default-map (first key-set) init-value)\n        (rest key-set)))))", "user": "5a3c06fce4b001c08efc0cdd"}, {"problem": 156, "code": "(fn [val keys]\n  (let [n (count keys)]\n    (loop [i 0 m {}]\n      (if (< i n)\n        (recur (inc i) (assoc m (nth keys i) val))\n        m))))", "user": "5b5e7953e4b0c6492753e6d9"}, {"problem": 156, "code": "#(reduce (fn [a b] (assoc a b %1)) {} %2)", "user": "5b59d176e4b02d533a91bd86"}, {"problem": 156, "code": "(fn [dflt s]\n  ((fn makedflthash [default lst hashmap]\n     (if\n       (empty? lst)\n       hashmap\n       (recur default (rest lst) (conj hashmap {(first lst) default}))\n       )\n     )\n   dflt\n   (rest s)\n   {(first s) dflt}\n   )\n  )", "user": "5b5e5019e4b0c6492753e6d3"}, {"problem": 156, "code": "(fn [default mapKeys]\n  (into \n  {}\n  (map #(vec (conj `() default %1)) mapKeys)))", "user": "5b3251c1e4b025bcb146f317"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5b609f0ae4b0c6492753e708"}, {"problem": 156, "code": "(fn [dflt ks]\n  (reduce\n   (fn [coll k] (conj coll {k dflt}))\n   {}\n   ks))", "user": "5b500215e4b02d533a91bce2"}, {"problem": 156, "code": "(fn [v ks]\n  (zipmap ks (repeat v)))", "user": "573cb87fe4b05c31a32c0807"}, {"problem": 156, "code": "(fn [default keys]\n  (into {}\n    (map\n      (fn [x]\n        [x default]\n      )\n      keys\n    )\n  )\n)", "user": "5b59b89be4b02d533a91bd7d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5b608c66e4b0c6492753e706"}, {"problem": 156, "code": "(fn [def-val map-keys] (into {} (for [k map-keys] [k def-val])) )", "user": "599ed08fe4b0871e7608b812"}, {"problem": 156, "code": "(fn [v lst]\n  (let [dup (repeat (count lst) v)]\n    (apply assoc {} (interleave lst dup))))", "user": "5b58d012e4b02d533a91bd71"}, {"problem": 156, "code": "#(reduce (fn[acc k](assoc acc k %)) {} %2)", "user": "5b6473eee4b0c6492753e73f"}, {"problem": 156, "code": "(fn [_vals _keys] (zipmap _keys (repeat (count _keys) _vals)))", "user": "5b611666e4b0c6492753e70d"}, {"problem": 156, "code": "(fn [default keys_] (reduce conj (map #(hash-map % default) keys_)))", "user": "5b6b3809e4b0c6492753e7a5"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5b6c0d56e4b0c6492753e7b2"}, {"problem": 156, "code": "(fn [v ks]\n  (reduce (fn [m k] (assoc m k v)) {} ks))", "user": "56e2ca59e4b03a7c14b85a38"}, {"problem": 156, "code": "(fn [v ks]\n  (into {}\n        (map #(vector % v) ks)))", "user": "5a514e68e4b05d388ecb6be5"}, {"problem": 156, "code": "(fn eval1 [m n] (reduce conj (for [y n x (vector m)] {y x})))", "user": "5b69baf9e4b0c6492753e78f"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5b7292b3e4b047b03b2036a4"}, {"problem": 156, "code": "(fn\n  [defaultValue keys]\n  (reduce (fn [outMap inKey]\n            (assoc outMap inKey defaultValue))\n          {}\n          keys))", "user": "5b69bf95e4b0c6492753e790"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5b6962c1e4b0c6492753e787"}, {"problem": 156, "code": "(fn [k m] (into (hash-map) (map #(hash-map % k) m)))", "user": "5a24735fe4b07f18be40aa11"}, {"problem": 156, "code": "(fn [default mapkeys]\n  (zipmap (vec mapkeys) (vec (repeat (count mapkeys) default))))", "user": "57ca338de4b05aa3c4741d37"}, {"problem": 156, "code": "#(let [m (atom {})]\n  (doseq [x %2]\n           (swap! m conj {x %1}))\n  @m)", "user": "5b780a8ce4b047b03b2036f6"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (repeat v)))", "user": "5aeec90fe4b0cc2b61a3bc31"}, {"problem": 156, "code": "(fn cst\n  [v ks]\n  (into {} (map vector ks (repeat (count ks) v))))", "user": "5b73e500e4b047b03b2036ba"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5b64370ae4b0c6492753e73c"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5b754f8ee4b047b03b2036c9"}, {"problem": 156, "code": "(fn [v ks] (reduce conj {} (map #(hash-map % v) ks)))", "user": "59b2b093e4b0e1f4e384c8fd"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5b79cbdce4b047b03b20370a"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5b6ba7d7e4b0c6492753e7ad"}, {"problem": 156, "code": "(fn [x y] (zipmap y (repeat x)))", "user": "5b4c2212e4b02d533a91bca6"}, {"problem": 156, "code": "(fn [v s]\n  (reduce (fn [acc k] (assoc acc k v))\n          {}\n          s))", "user": "5b757ff8e4b047b03b2036ce"}, {"problem": 156, "code": "(fn\n  [default ks]\n  (apply merge (map #(do {% default}) ks)))", "user": "5b7e79f0e4b047b03b203759"}, {"problem": 156, "code": "(fn [d s]\n\t(reduce #(assoc %1 %2 d) {} s)\n)", "user": "5b7bc82ce4b047b03b203726"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5422979be4b01498b1a71ac2"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5b7c9524e4b047b03b203736"}, {"problem": 156, "code": "(fn xxy [i coll] \n  (zipmap coll (repeat (count coll) i)))", "user": "5ac04101e4b073f177442737"}, {"problem": 156, "code": "(fn [defv kys] (into {} (map #(vector %1 defv) kys)))", "user": "5b7ec039e4b047b03b20375d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5b61aa6ae4b0c6492753e712"}, {"problem": 156, "code": "(fn [d k] (->> k (map #(vector  % d)) (into {}) ))", "user": "5b81139fe4b047b03b203782"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "5a085dfde4b01bb0ae8afdf4"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5b772ad7e4b047b03b2036e8"}, {"problem": 156, "code": "(fn [param-a param-b] (zipmap param-b (repeat param-a)))", "user": "5b7ed20fe4b047b03b203760"}, {"problem": 156, "code": "(fn [default k]\n  (zipmap k (repeat default)))", "user": "5b83c02de4b047b03b2037b6"}, {"problem": 156, "code": "(fn [d ks]\n  (into {}\n         (map (fn [k] [k d])\n              ks)))", "user": "51b1f2d4e4b02f8f128bb95f"}, {"problem": 156, "code": "(fn map-defaults [default keys]\n  (zipmap keys (repeat default)))", "user": "5b857411e4b047b03b2037ce"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5b284375e4b063e2438bcc53"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %1)))", "user": "5b855800e4b047b03b2037cd"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat (count %2) %1)))", "user": "5b885821e4b047b03b20380b"}, {"problem": 156, "code": "(fn [deflt col] (zipmap col (repeat deflt)))", "user": "5b8aa478e4b0c0b3ffbd49b2"}, {"problem": 156, "code": "(fn\n  [val keylist]\n  (reduce (fn [x y] (assoc x y val)) {} keylist))", "user": "592ac17ae4b072a2710fcf26"}, {"problem": 156, "code": "#(zipmap %2 (take (count %2) (repeat %1)))", "user": "5b7ef8e6e4b047b03b203765"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5b819312e4b047b03b20378d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5b8d03e4e4b0c0b3ffbd49cb"}, {"problem": 156, "code": "(fn map-defaults [default keys]\n   (zipmap keys (repeat default)))", "user": "5b8d01d7e4b0c0b3ffbd49ca"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %1)))", "user": "5b68a804e4b0c6492753e77b"}, {"problem": 156, "code": "#(zipmap %2 (take (count %2) (repeat %1)))", "user": "5b5f2566e4b0c6492753e6e9"}, {"problem": 156, "code": "(fn [d ks]\n  (into {} (for [k ks] [k d])))", "user": "5b96c1f3e4b0c0b3ffbd4a80"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5b97c521e4b0c0b3ffbd4a9a"}, {"problem": 156, "code": "(fn [default ks]\n  #_(into {} (map #(vector % default) ks))\n  (into {} (for [k ks] [k default])))", "user": "5b96800ae4b0c0b3ffbd4a7b"}, {"problem": 156, "code": "(fn [d c] (reduce #(assoc %1 %2 d) {} c))", "user": "5b80a5cfe4b047b03b20377f"}, {"problem": 156, "code": "(fn [v c]\n  (reduce #(assoc %1 %2 v) {} c))", "user": "5b88f0c0e4b047b03b203816"}, {"problem": 156, "code": "#(zipmap (seq %2) (repeat %1))", "user": "5b985fe5e4b0c0b3ffbd4ab1"}, {"problem": 156, "code": "(fn [v ks]\n  (let [kvs (apply concat (for [x ks] [x v]))]\n    (apply hash-map kvs)\n\n\n    ))", "user": "5b8db323e4b0c0b3ffbd49da"}, {"problem": 156, "code": "(fn [default-value xs] \n  (reduce #(assoc %1 %2 default-value) {} xs))", "user": "57ebbf3ae4b0bfb2137f5b66"}, {"problem": 156, "code": "(fn [d coll]\n  (into {} (map #(hash-map % d) coll))\n  )", "user": "570d0548e4b0b0fb43fd06d2"}, {"problem": 156, "code": "(fn [v coll] (reduce #(assoc %1 %2 v) {} coll))", "user": "5b562842e4b02d533a91bd3f"}, {"problem": 156, "code": "#(reduce (fn [ x y ] ( assoc x y %1 )) {} %2)", "user": "5b9c4a7be4b0c0b3ffbd4b16"}, {"problem": 156, "code": "(fn [value v]\n  (reduce (fn [acc x] (assoc acc x value)) \n           {}\n          v))", "user": "5b9db58be4b0c0b3ffbd4b41"}, {"problem": 156, "code": "(fn test [x y] (zipmap y (repeat  x)))", "user": "5b985983e4b0c0b3ffbd4aaf"}, {"problem": 156, "code": "(fn default-map [d keys]\n  (loop [m {}, ks keys]\n    (if (empty? ks)\n      m\n      (recur (conj m (vector (first ks) d)) (next ks)))))", "user": "5b975c6ee4b0c0b3ffbd4a91"}, {"problem": 156, "code": "(fn [def-val coll] (reduce #(conj %1 [%2 def-val]) {} coll))", "user": "5ba15075e4b0a20761a2339e"}, {"problem": 156, "code": "(fn [default values] (reduce #(assoc %1 %2 default) {} values ))", "user": "5b6f72ede4b0c6492753e7dc"}, {"problem": 156, "code": "(fn assign [init [k & ks]] (when k (assoc (assign init ks) k init)))", "user": "5b7d03a0e4b047b03b20373d"}, {"problem": 156, "code": "(fn [number m]\n  (into {} (map #(hash-map % number) m)))", "user": "5a796f13e4b03baeef9276ba"}, {"problem": 156, "code": "#(if (= 3 (count %2))\n   (into {}[ [(%2 0) %] [(%2 1) %] [(%2 2) %]])\n   (into (sorted-map)[ [(%2 0) %] [(%2 1) %]])\n   )", "user": "5b94c2aee4b0c0b3ffbd4a59"}, {"problem": 156, "code": "(fn [value keys]\n  (apply hash-map\n      (interleave keys (repeat value))))", "user": "5ba0dcfce4b0c0b3ffbd4b98"}, {"problem": 156, "code": "(fn [d coll]\n   (zipmap coll (repeat d)))", "user": "5ba5802de4b0a20761a233fd"}, {"problem": 156, "code": "(fn [el coll] (reduce #(assoc %1 %2 el) {} coll))", "user": "595e6c76e4b066ee0a44b043"}, {"problem": 156, "code": "(fn [d ks] (reduce #(assoc-in %1 [%2] d) {} ks))", "user": "5b919d9de4b0c0b3ffbd4a24"}, {"problem": 156, "code": "(fn [v cllt]\n  (zipmap cllt (repeat v)))", "user": "5baa1b58e4b0a20761a2344e"}, {"problem": 156, "code": "(fn [d ks]\n  (->> ks\n       (map #(vector % d))\n       (into {})))", "user": "5bab5440e4b0a20761a23475"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5ba47e47e4b0a20761a233ea"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "560152dee4b04bb52996e186"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5b98f174e4b0c0b3ffbd4ac1"}, {"problem": 156, "code": "(fn [y xs] (into {} (for [x xs] {x y})))", "user": "59f78b49e4b0ca45a743a30e"}, {"problem": 156, "code": "(fn [v ks]\n  (into {} (map vector ks (repeat v))))", "user": "5b62ff3ce4b0c6492753e72a"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "57c647bbe4b05aa3c4741cf3"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %))", "user": "5b924123e4b0c0b3ffbd4a34"}, {"problem": 156, "code": "(fn [dflt xs] (reduce #(assoc %1 %2 dflt) {} xs))", "user": "4eb92051535dfed6da9c6d4c"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5b99a0a3e4b0c0b3ffbd4ad7"}, {"problem": 156, "code": "(fn\n  [defaultValue keys]\n  (reduce (fn [current next] (assoc current next defaultValue)) {} keys)\n  )", "user": "5b759ca8e4b047b03b2036d0"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %)))", "user": "57481f1fe4b009280f9f2b82"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5b329773e4b025bcb146f322"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5b77248ae4b047b03b2036e7"}, {"problem": 156, "code": "(fn[d l] (into {} (for [i l] {i d})))", "user": "5bb33124e4b0a20761a2351c"}, {"problem": 156, "code": "(fn [x n] (loop [m {}\n                 n n]\n            (if (empty? n)\n              m\n              (let [k (first n)]\n                (recur (assoc m k x) (rest n))))\n              )) ;(reduce (fn [m k] (assoc m k x)) {} n))", "user": "5bb3c9a8e4b0a20761a2352f"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5bb6166fe4b0a20761a23579"}, {"problem": 156, "code": "(fn [default ks]\n  (reduce (fn [acc k] (assoc acc k default)) {} ks))", "user": "59f4c42ce4b0966464fe6ab6"}, {"problem": 156, "code": "(fn [d l] (reduce #(assoc %1 %2 d) {} l))", "user": "5bb7b956e4b0a20761a235ad"}, {"problem": 156, "code": "(fn [v ks]\n  (loop [kz ks\n         result {}]\n    (if-not (empty? kz)\n      (recur (rest kz) (assoc result (first kz) v))\n      result)))", "user": "5ad4c3d2e4b0ea6055cfabe1"}, {"problem": 156, "code": "(fn [default keys] (into {} (map #(assoc {} % default) keys)))", "user": "5afc85f1e4b0cc2b61a3bd0e"}, {"problem": 156, "code": "(fn [value v]\n  (zipmap v (repeat value)))", "user": "577caf73e4b0c8d87281f6c6"}, {"problem": 156, "code": "(fn [v ks]\n  (reduce #(assoc %1 %2 v) {} ks))", "user": "587fb546e4b0f1effa3b75f9"}, {"problem": 156, "code": "(fn [default keyz] (reduce #(assoc %1 %2 default) {} keyz))", "user": "5a68f374e4b0512ff01cda05"}, {"problem": 156, "code": "(fn [default coll]\n  (loop [def-map {}\n         c coll]\n    (let [s (seq c)]\n      (if s (recur (assoc def-map (first c) default) (rest c)) def-map))))", "user": "5bb25684e4b0a20761a2350d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5bb5cd43e4b0a20761a23575"}, {"problem": 156, "code": "(fn [default myKeys] (apply merge (for [myKey myKeys] {myKey default})))", "user": "5ba167bfe4b0a20761a233a0"}, {"problem": 156, "code": "(fn [v xs] (reduce #(assoc %1 %2 v) (sorted-map) xs))", "user": "5bc20634e4b07a9b28b10022"}, {"problem": 156, "code": "(fn [x data]\n   (zipmap data (repeat x)))", "user": "5b86462de4b047b03b2037df"}, {"problem": 156, "code": "(fn [default coll] (reduce conj (map #(hash-map %1 default) coll)))", "user": "5bc488bde4b07a9b28b10053"}, {"problem": 156, "code": "(fn [d coll] (into {} (map (fn [x] [x d]) coll)))", "user": "5addadfce4b0837691e92c13"}, {"problem": 156, "code": "#(apply assoc {}\n       (interleave  %2 (repeat %1)))", "user": "5bc64843e4b07a9b28b10091"}, {"problem": 156, "code": "(fn tr_map [defVal list] (into {} (for [i list] [i defVal])))", "user": "5bc352abe4b07a9b28b10041"}, {"problem": 156, "code": "(fn [v coll] (reduce #(assoc %1 %2 v) {} coll))", "user": "5bc28638e4b07a9b28b10033"}, {"problem": 156, "code": "(fn [v, ks]\n  (reduce #(assoc %1 %2 v) {} ks))", "user": "5bb948f5e4b0a20761a235d5"}, {"problem": 156, "code": "(fn [d xs]\n  (loop [m {} el (first xs) xs xs]\n    (if (nil? el) m (recur (assoc m el d) (first xs) (rest xs)))))", "user": "5bc664a2e4b07a9b28b10093"}, {"problem": 156, "code": "(fn [default keys]\n  (reduce\n   (fn [acc cur] (assoc acc cur default))\n   {}\n   keys))", "user": "5bc8e91ee4b07a9b28b100ce"}, {"problem": 156, "code": "(fn [v coll]\n   (into {} (for [x coll] {x v})))", "user": "5ad233d5e4b0ea6055cfabb0"}, {"problem": 156, "code": "(fn d[default ks]\n   \t(reduce \n     \t#(assoc %1 %2 default)\n     \t{}\n     \tks))", "user": "5ba75fdfe4b0a20761a23419"}, {"problem": 156, "code": "(fn [v coll]\n  (into {} (for [k coll] [k v])))", "user": "5bc833a5e4b07a9b28b100bb"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5b5785c7e4b02d533a91bd5b"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5bc6468ae4b07a9b28b10090"}, {"problem": 156, "code": "(fn [deft s] (apply hash-map (interleave s (repeat deft))))", "user": "59a0286be4b0871e7608b82f"}, {"problem": 156, "code": "(fn [value items]\n  (reduce #(assoc %1 %2 value) {} items))", "user": "5bcf0b1be4b0e9689409ee24"}, {"problem": 156, "code": "#(into {} (map (fn[k] [k %]) %2))", "user": "5a8aa992e4b05369db4d24d8"}, {"problem": 156, "code": "(fn [default keys] (reduce #(conj %1 [%2 default]) {} keys))", "user": "554f817ce4b00713264bd9a2"}, {"problem": 156, "code": "(fn[v ks] (reduce #(assoc %1 %2 v) {} ks))", "user": "5b72b36ce4b047b03b2036a9"}, {"problem": 156, "code": "(fn [x y] \n  (into {} (for [mp y] {mp x}))\n)", "user": "5bd5ede3e4b0ed4b8aab4ba3"}, {"problem": 156, "code": "(fn [default_value sequence_of_keys] (zipmap sequence_of_keys \n                                            (repeat default_value)))", "user": "5bc9fb3be4b07a9b28b100e3"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5bc611e3e4b07a9b28b10083"}, {"problem": 156, "code": "(fn map-defaults [default my-keys]\n      (loop [m {} mk my-keys] \n             (if (empty? mk)\n               m\n               (recur \n               \t(assoc m (first mk)       default) (rest mk)))))", "user": "5bc7c3aee4b07a9b28b100b2"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %1)))", "user": "567c63f6e4b05957ce8c61bb"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5bbdd136e4b07a9b28b0ffab"}, {"problem": 156, "code": "(fn [x y]\n  (reduce conj (for [z y] {z x}))\n)", "user": "5be15f4de4b0ed4b8aab4c9b"}, {"problem": 156, "code": "(fn [d xs] (reduce #(assoc %1 %2 d) {} xs))", "user": "5be0306be4b0ed4b8aab4c7d"}, {"problem": 156, "code": "(fn [d ks] (loop [d d ks ks o (hash-map)]\n             (if (empty? ks)\n               o\n               (recur d (rest ks) (assoc o (first ks) d)))))", "user": "5bdf651ee4b0ed4b8aab4c6d"}, {"problem": 156, "code": "(fn [x ks] (zipmap ks (repeat x)))", "user": "5b9bfe0be4b0c0b3ffbd4b10"}, {"problem": 156, "code": "(fn [v k]\n  (reduce #(assoc %1 %2 v) {} k))", "user": "5bd7b8b8e4b0ed4b8aab4bc6"}, {"problem": 156, "code": "(fn [d li] (reduce conj (map #(hash-map %1 d) li)))", "user": "5be58beae4b0ed4b8aab4d14"}, {"problem": 156, "code": "(fn [v keys]\n  (into {}\n        (map #(vector %1 %2)\n             keys\n             (repeat v))))", "user": "5be5cebde4b0ed4b8aab4d19"}, {"problem": 156, "code": "(fn [v k] (reduce #(assoc %1 %2 v) {} k))", "user": "5be2e670e4b0ed4b8aab4ccc"}, {"problem": 156, "code": "(fn [default ks] (apply merge (map #(hash-map % default) ks)))", "user": "5549ca1ce4b0a04f7929956c"}, {"problem": 156, "code": "(fn [default seq_](\n                    loop [x {} map_thing seq_]\n                    (if(<= (count map_thing) 0)\n                      x\n                      (recur (assoc x (first map_thing) default) (rest map_thing)\n                             ))))", "user": "5bd9eac4e4b0ed4b8aab4bfc"}, {"problem": 156, "code": "(fn [v ks] \n  (into {} (for [k ks] [k v])))", "user": "5bea3177e4b0f319e2d7ec81"}, {"problem": 156, "code": "(fn \n  [default keys]\n  (zipmap keys (repeat (count keys) default)))", "user": "591f9a1fe4b09b4ee5954c4f"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5be70bd5e4b0f319e2d7ec53"}, {"problem": 156, "code": "(fn [deflt ks]\n  (zipmap ks (repeat deflt)))", "user": "5b15ab32e4b0cc2b61a3be72"}, {"problem": 156, "code": "(fn [d s]\n  (zipmap s (repeat d)))", "user": "5bef3e88e4b0a6d31fed213f"}, {"problem": 156, "code": "(fn\n  [in-default-value in-map-keys]\n\t(loop\n      [default-value in-default-value\n       map-keys in-map-keys\n       result-map {}]\n      (if (= (count map-keys) 0)\n        result-map\n      \t(recur default-value\n        \t(rest map-keys)\n            (conj result-map {(first map-keys) default-value})))))", "user": "5bdb0b4ce4b0ed4b8aab4c10"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5bbd8da6e4b07a9b28b0ffa3"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5beb8e28e4b0f319e2d7ec8e"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5a42dbabe4b0447ef91cc5fc"}, {"problem": 156, "code": "(fn [v k]\n  (reduce #(assoc %1 %2 v) {} k))", "user": "5bf0aefde4b0a6d31fed215a"}, {"problem": 156, "code": "(fn [a b]\n  (zipmap b (repeat a))\n  )", "user": "5bed1e4ae4b0a6d31fed2118"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5beda647e4b0a6d31fed2122"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5bfae66ae4b0bdcf453d15d3"}, {"problem": 156, "code": "(fn [default keys] (zipmap keys (repeat default)))", "user": "5a09a6f7e4b01bb0ae8afe14"}, {"problem": 156, "code": "(fn [value kys] (into {} (map #(vector % value) kys)))", "user": "5bfe4ecfe4b0bdcf453d1608"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (repeat v)))", "user": "5bfbb974e4b0bdcf453d15de"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5a080bdde4b01bb0ae8afde9"}, {"problem": 156, "code": "(fn [val keys]\n  (reduce (fn [acc key]\n            (assoc acc key val)) {} keys))", "user": "5b8162d0e4b047b03b20378b"}, {"problem": 156, "code": "(fn [def_val key_list] (into {} (map #(vector % def_val) key_list)))", "user": "5c03e927e4b0bdcf453d167b"}, {"problem": 156, "code": "(fn [v kys] (reduce conj {} (map #(conj [] % v) kys)))", "user": "5c05537fe4b0bdcf453d1692"}, {"problem": 156, "code": "#(reduce (fn [acc mapkey] (assoc acc mapkey %1)) {} %2)", "user": "594d4c57e4b07ddc2dafae87"}, {"problem": 156, "code": "(fn [a b] (into {} (map (fn [c] {c a}) b)))", "user": "58273e82e4b051871117bf1b"}, {"problem": 156, "code": "#(reduce (fn [m elem] (assoc m elem %1)) {} %2)", "user": "5c0a87e6e4b0bdcf453d1707"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "5c0a5061e4b0bdcf453d1703"}, {"problem": 156, "code": "(fn [v coll] (reduce (fn [hm cur] (conj hm [cur v])) {} coll))", "user": "5c05cae7e4b0bdcf453d16a3"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5b57505ce4b02d533a91bd55"}, {"problem": 156, "code": "(fn [v ks]\n  (reduce conj {} (for [k ks] {k v})))", "user": "5c0e58bfe4b01240ff567140"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "4f6a946ae4b07046d9f4ef9f"}, {"problem": 156, "code": "(fn [defs keys] (zipmap keys (repeat defs)))", "user": "5bfc2068e4b0bdcf453d15e4"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5bfff6d1e4b0bdcf453d1630"}, {"problem": 156, "code": "(fn make-map [defval col]\n  (reduce (fn [r x]\n    (assoc r x defval)) {} col))", "user": "5c01ba2ce4b0bdcf453d1656"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5bfada5ee4b0bdcf453d15d2"}, {"problem": 156, "code": "(fn construct [v m]\n  (reduce merge (map #(hash-map % v) m)))", "user": "5c0ebca5e4b01240ff567147"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5bd4a0b7e4b0ed4b8aab4b8d"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "5c0e22cae4b01240ff56713b"}, {"problem": 156, "code": "(fn [default ks] \n  (let [defs (iterate identity default)]\n  (apply hash-map (interleave ks defs))))", "user": "5c13da47e4b01240ff5671a6"}, {"problem": 156, "code": "(fn [init sq]\n  (reduce #(assoc %1 %2 init) {} sq))", "user": "5c165d3ee4b01240ff5671d1"}, {"problem": 156, "code": "(fn [v ks] (reduce #(assoc %1 %2 v) {} ks))", "user": "5b8ec146e4b0c0b3ffbd49f0"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5c179df8e4b01240ff5671e3"}, {"problem": 156, "code": "(fn [default coll] (reduce #(assoc %1 %2 default) {} coll))", "user": "5c1176a4e4b01240ff567179"}, {"problem": 156, "code": "(fn [val seq]\n  (into {}\n        (for [key seq]\n          (conj [key] val))))", "user": "5c0fedade4b01240ff567157"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5c1aadcde4b01240ff567209"}, {"problem": 156, "code": "#(loop [val %1\n         left %2\n         res {}]\n         (if (empty? left)\n             res\n             (recur val (rest left) (assoc res (first left) val))))", "user": "5bfcdc52e4b0bdcf453d15f4"}, {"problem": 156, "code": "(fn [value, keys] (into {} (for [k keys] [k value])))", "user": "5c1b4146e4b01240ff56720d"}, {"problem": 156, "code": "(fn [val vec] (into {} (map (fn [x] [x val]) vec)))", "user": "5c1c0ba7e4b01240ff56721a"}, {"problem": 156, "code": "(fn [value keys] (reduce #(assoc %1 %2 value) {} keys))", "user": "5ab3db13e4b073f177442609"}, {"problem": 156, "code": "(fn [default coll]\n  (apply hash-map (interleave coll (repeat default))))", "user": "597f8c93e4b0dbe32238d0c1"}, {"problem": 156, "code": "(fn [n vects] (reduce conj (map (fn [d] {d n}) vects)))", "user": "5c1edf23e4b0efcb0b05b25d"}, {"problem": 156, "code": "(fn [defval init-keys]\n  (loop [res {}, key init-keys]\n    (if (empty? key)\n      res\n      (recur \n        (assoc res (first key) defval)\n        (rest key))\n      )))", "user": "5be0b916e4b0ed4b8aab4c8f"}, {"problem": 156, "code": "(fn [default in_list]\n    (reduce #(assoc %1 %2 default) {} in_list))", "user": "5c17467fe4b01240ff5671df"}, {"problem": 156, "code": "(fn make-def-map\n[default vec]\n(reduce (fn [x y] (assoc x y default)) {} vec)\n)", "user": "5c1d9f05e4b0efcb0b05b24c"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5b0bd9cfe4b0cc2b61a3bdd9"}, {"problem": 156, "code": "#(reduce \n   (fn \n     [final-map curr-key] \n     (conj final-map  {curr-key %1})) \n   {} %2)", "user": "5c20b6abe4b07e362c230576"}, {"problem": 156, "code": "(fn [default allkeys] (reduce #(assoc %1 %2 default) {} allkeys))", "user": "5c092334e4b0bdcf453d16ea"}, {"problem": 156, "code": "(fn defmap\n  [x ks]\n  (reduce (fn [accum k] (into accum {k x})) {} ks))", "user": "5c222b7de4b07e362c230588"}, {"problem": 156, "code": "(fn [e s] \n (reduce \n  #(assoc %1 %2 e)\n  {}\n  s))", "user": "5c22c861e4b07e362c230590"}, {"problem": 156, "code": "(fn [z, i] (into {} (map #(vector %1 %2) i (take (count i) (repeat z)))))", "user": "5c21a531e4b07e362c230582"}, {"problem": 156, "code": "(fn [default my-keys]\n  (zipmap my-keys (repeat (count my-keys) default)))", "user": "5c23d4a7e4b07e362c23059b"}, {"problem": 156, "code": "(fn [default-value key-list]\n  (reduce merge (map #(hash-map % default-value) key-list)))", "user": "5c24671be4b07e362c2305a1"}, {"problem": 156, "code": "(fn [n list-vec]\n  (reduce #(assoc % %2 n) {} list-vec))", "user": "5c0e3f86e4b01240ff56713d"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (cycle [%1])))", "user": "5c2649c8e4b07e362c2305bf"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "5c2836ebe4b07e362c2305d4"}, {"problem": 156, "code": "(fn [val keys] (reduce (fn [result key] (assoc result key val)) {} keys))", "user": "5c24c654e4b07e362c2305a7"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55965515e4b0c79f6e1db978"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5b99554ae4b0c0b3ffbd4ace"}, {"problem": 156, "code": "(fn [default list]\n  (reduce #(assoc %1 %2 default) {} list))", "user": "57d57f65e4b0bd073c2023b3"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %)))", "user": "5bfd9bd6e4b0bdcf453d1601"}, {"problem": 156, "code": "(fn [const lst] (reduce #(assoc %1 %2 const) {} lst))", "user": "595b5b6ee4b066ee0a44afd5"}, {"problem": 156, "code": "#(apply hash-map (conj (into [] (interpose %1 %2)) %1))", "user": "5ae9b23fe4b0cc2b61a3bbd8"}, {"problem": 156, "code": "(fn [d ks] (zipmap ks (repeat d)))", "user": "4f2d676be4b0d6649770a05c"}, {"problem": 156, "code": "(fn [x y] (apply hash-map (apply concat (map #(conj [] % x) y))))", "user": "582c986ee4b051871117bf9b"}, {"problem": 156, "code": "(fn [v ks]\n      (zipmap ks (repeat v)))", "user": "53336ab8e4b019098a6f8b84"}, {"problem": 156, "code": "(fn [default key-list]\n  (zipmap key-list (repeat default)))", "user": "5c26460be4b07e362c2305bc"}, {"problem": 156, "code": "#(apply conj (map (fn [v] {v %1}) %2))", "user": "5c30d90de4b0d62ef62d9f22"}, {"problem": 156, "code": "(fn [dflt key-list]\n  (loop [key-list key-list\n         results {}]\n    (if (empty? key-list)\n      results\n      (recur (rest key-list) (assoc results (first key-list) dflt)))))", "user": "55f344afe4b06e875b46ce5a"}, {"problem": 156, "code": "(fn [v kv] (into (sorted-map) (map (fn [v2] [v2 v]) kv)))", "user": "54dc2c3ae4b024c67c0cf77d"}, {"problem": 156, "code": "(fn [x s] (reduce conj (map (fn [a] (assoc {} a x)) s)))", "user": "5c32603ee4b0d62ef62d9f38"}, {"problem": 156, "code": "(fn [default coll] (reduce (fn [val e] (assoc val e default)) {} coll))", "user": "5c36d110e4b0d62ef62d9f6a"}, {"problem": 156, "code": "(fn [default-value keys]\n  (let [my-map {}]\n    (into my-map (map #(vector % default-value) keys))\n    )\n  )", "user": "5c321b8ae4b0d62ef62d9f32"}, {"problem": 156, "code": "(fn [default seq]\n   (zipmap seq (repeat default)))", "user": "5c34cb2ee4b0d62ef62d9f59"}, {"problem": 156, "code": "(fn [v l] (reduce #(conj %1 {%2 v}) {} l))", "user": "5c308385e4b0d62ef62d9f1c"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %1)))", "user": "5c35acffe4b0d62ef62d9f62"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5bfe8821e4b0bdcf453d160f"}, {"problem": 156, "code": "(fn [d ks]\n  (into {} (for [k ks] [k d])))", "user": "5c2dfca3e4b0d62ef62d9efc"}, {"problem": 156, "code": "(fn [p l] (zipmap l (vec (repeat 3 p))))", "user": "5c35e557e4b0d62ef62d9f64"}, {"problem": 156, "code": "(fn [d k] (apply merge {} (map #(hash-map % d) k)))", "user": "5bba703fe4b0a20761a235eb"}, {"problem": 156, "code": "(fn [x coll] (reduce #(assoc %1 %2 x) {} coll))", "user": "5be6d0f8e4b0f319e2d7ec51"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5c0614f6e4b0bdcf453d16a9"}, {"problem": 156, "code": "(fn map-defaults [default keys]\n  (into {} (map (fn [key] [key default]) keys)))", "user": "5c3ac091e4b0d62ef62d9f95"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5c379636e4b0d62ef62d9f76"}, {"problem": 156, "code": "(fn fill [x coll]\n  (into {} (map #(vector % x) coll)))", "user": "5c411df3e4b08cd430848ebf"}, {"problem": 156, "code": "(fn [v ks] (reduce #(assoc %1 %2 v) {} ks))", "user": "5b2927a0e4b063e2438bcc5e"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "56f4623ae4b046a417f9205d"}, {"problem": 156, "code": "(fn [default mapKeys] \n\t(reduce (fn [returnValue part] (into returnValue {part default} )) {} mapKeys)\n      \n)", "user": "5c43ccdae4b0e06e1360a36f"}, {"problem": 156, "code": "(fn [v ks] \n  (reduce #(assoc % %2 v) {} ks))", "user": "5c3e313fe4b0a522eaa3f9a2"}, {"problem": 156, "code": "(fn [a b]\n  (into {}\n        (map #(vector % a) b)))", "user": "59733c91e4b01722bebd4c9b"}, {"problem": 156, "code": "(fn [val keys]\n   (into {} (map (fn [key] (hash-map key val)) keys)))", "user": "5bc7f2d6e4b07a9b28b100b7"}, {"problem": 156, "code": "(fn map-defaults\n  [default names]\n  (zipmap names (repeat default)))", "user": "5c1156a2e4b01240ff567176"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "4f925791e4b0dcca54ed6cac"}, {"problem": 156, "code": "(fn [d xs] (zipmap xs (repeat d)))", "user": "5c387c51e4b0d62ef62d9f83"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (take (count %2) (repeat %1))))\n;;(take 4 (repeat 0))", "user": "5c48c971e4b0e06e1360a3c6"}, {"problem": 156, "code": "(fn [d k] (zipmap k (repeat d)))", "user": "502ea967e4b06efe12e8cc76"}, {"problem": 156, "code": "(fn def-map [v ks]\n  (if(empty? ks)(hash-map)\n    (assoc (def-map v (rest ks)) (first ks) v))\n  )", "user": "5c486dece4b0e06e1360a3c0"}, {"problem": 156, "code": "(fn [v xs](reduce #(assoc %1 %2 v) {} xs))", "user": "5c4ab449e4b0f9f7a8770e57"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5c45e703e4b0e06e1360a391"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5c48757fe4b0e06e1360a3c3"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5c4c74efe4b0f9f7a8770e76"}, {"problem": 156, "code": "(fn [keys values]\n  (zipmap values\n      (repeat keys)\n  )\n)", "user": "5c493046e4b0e06e1360a3cb"}, {"problem": 156, "code": "(fn [val keys-vec]\n  (zipmap keys-vec (repeat (count keys-vec) val)))", "user": "5c3cd80fe4b0d62ef62d9faa"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %1)))", "user": "5c3d8576e4b0d62ef62d9fb4"}, {"problem": 156, "code": "(fn create-map \n  [value key-list]\n  ( reduce #(assoc %1 %2 value) {} key-list))", "user": "5c38422ae4b0d62ef62d9f7f"}, {"problem": 156, "code": "#(loop [res {} items %2]\n   (if (empty? items)\n     res\n   \t(recur (assoc res (first items) %1) (rest items))))", "user": "5c26c9b3e4b07e362c2305c5"}, {"problem": 156, "code": "(fn [v ks] (reduce #(assoc %1 %2 v) {} ks))", "user": "5c512811e4b0fb8c5ffd99c2"}, {"problem": 156, "code": "(fn [de se] (zipmap se (repeat de)))", "user": "54e18de4e4b024c67c0cf7c4"}, {"problem": 156, "code": "(fn [d ks]\n  (reduce (fn [r, k] (assoc r k d)) {} ks))", "user": "5c50048ae4b0f9f7a8770eb9"}, {"problem": 156, "code": "(fn default-map [default-value map-keys] (zipmap map-keys (repeat default-value)))", "user": "5c506951e4b0f9f7a8770ec5"}, {"problem": 156, "code": "(fn [df mk] (reduce #(assoc %1 %2 df) {} mk))", "user": "592883f1e4b072a2710fceea"}, {"problem": 156, "code": "#(reduce (fn [x y] (assoc x y %1)) (hash-map) %2)", "user": "5c478ba2e4b0e06e1360a3b2"}, {"problem": 156, "code": "(fn [default coll] (reduce (fn [a k] (assoc a k default)) {} coll))", "user": "4fae5401e4b081705acca249"}, {"problem": 156, "code": "(fn [v c]\n  (reduce (fn [acc cur]\n            (assoc acc cur v))\n          {}\n          c))", "user": "5c30da5ae4b0d62ef62d9f23"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (take (count %2) (repeat %1))))", "user": "5b14475be4b0cc2b61a3be5a"}, {"problem": 156, "code": "(fn [v the_keys] (zipmap the_keys (repeat v)))", "user": "5c5732c8e4b0fb8c5ffd9a3f"}, {"problem": 156, "code": "(fn [x y] (zipmap y (repeat x)))", "user": "5c52f3fce4b0fb8c5ffd99e9"}, {"problem": 156, "code": "(fn [def-val key-coll]\n  (loop [[current-key & remaining-keys] key-coll result-map {}]\n    (if (nil? current-key)\n      result-map\n      (recur remaining-keys (conj result-map {current-key def-val}))\n      )\n    )\n  )", "user": "5c51d700e4b0fb8c5ffd99d1"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %)))", "user": "5bc09ebae4b07a9b28b10005"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5c435a9fe4b0e06e1360a367"}, {"problem": 156, "code": "#(into {} (for [k %2] {k %1}))", "user": "5c5a313ae4b01df32ab7326e"}, {"problem": 156, "code": "(fn [default-value key-sequence]\n  (zipmap key-sequence (repeat default-value)))", "user": "5bdee4bee4b0ed4b8aab4c67"}, {"problem": 156, "code": "#(let [f (fn fr [x l m] (if (empty? l) m (fr x (rest l) (conj m [(first l) x]))))]\n   (f % %2 {})\n   )", "user": "5c54e605e4b0fb8c5ffd9a14"}, {"problem": 156, "code": "(fn [default lst]\n  (loop [res {} [l & ls] lst] (if l (recur (assoc res l default) ls) res)))", "user": "5c51c930e4b0fb8c5ffd99ce"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5c59adbde4b01df32ab73260"}, {"problem": 156, "code": "(fn[v ks] (reduce #(assoc %1 %2 v) {} ks))", "user": "5c6227fee4b0fca0c1622641"}, {"problem": 156, "code": "(fn f [v lst]\n  (if (empty? lst)\n    {}\n    (conj (f v (rest lst)) {(first lst) v})))", "user": "5c62979fe4b0fca0c162264c"}, {"problem": 156, "code": "(fn [x seq]\n  (into {}\n   (map (fn [s] {s x})\n        seq)))", "user": "59cd351ee4b0ef0a1e9b5b35"}, {"problem": 156, "code": "(fn [default keys] (zipmap keys (repeat default)))", "user": "4e4aaf49535dc968683fc4ce"}, {"problem": 156, "code": "(fn [d a] (reduce #(assoc %1 %2 d) {} a))", "user": "53a5bc3ae4b0ef122a8689c3"}, {"problem": 156, "code": "(fn [x y]\n  (loop [l y\n         r {}]\n    (if-not (empty? l)\n      (recur (rest l) (assoc r (first l) x))\n      r\n      )))", "user": "5b269cf3e4b063e2438bcc35"}, {"problem": 156, "code": "#(into {} (let [pair [] newval %1] (for [oldvec %2] (conj pair oldvec newval))))", "user": "5c41db45e4b08cd430848ece"}, {"problem": 156, "code": "(fn [a b] (reduce #(assoc %1 %2 a) {} b))", "user": "5c09e555e4b0bdcf453d16fd"}, {"problem": 156, "code": "(fn [v m] (apply assoc {} (interleave m (repeat v))))", "user": "5c44ad48e4b0e06e1360a37a"}, {"problem": 156, "code": ";(fn[x y](zipmap y[x x x]))\n\n;#(zipmap %2 (repeat %))\n\n(fn[x y](zipmap y (repeat x)))", "user": "5c683fb5e4b0fca0c16226d5"}, {"problem": 156, "code": "(fn [default-value ks]\n  (reduce #(assoc %1 %2 default-value) {} ks))", "user": "5b94c507e4b0c0b3ffbd4a5a"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5c5d8c04e4b01df32ab732b4"}, {"problem": 156, "code": "(fn [x y] (into (sorted-map) (for [w y] [w x])))", "user": "5c648b60e4b0fca0c162267b"}, {"problem": 156, "code": "(fn [defv keylist] (reduce (fn [m k] (assoc m k defv)) {} keylist))", "user": "5c6e1006e4b0fca0c1622744"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5bbbce99e4b0a20761a23610"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5c718e6ce4b0fca0c1622796"}, {"problem": 156, "code": "(fn def-map [v k]\n  ((fn [dv ks m]\n     (if (empty? ks)\n       m\n       (recur dv (rest ks) (assoc m (first ks) dv)))\n    ) v k {}))", "user": "5c6748f0e4b0fca0c16226b6"}, {"problem": 156, "code": "(fn [default keys] (reduce #(into %1 {%2 default}) {} keys))", "user": "5c6e8b57e4b0fca0c1622755"}, {"problem": 156, "code": "(fn [val lst]\n  (loop [lst lst\n         res {}]\n    (if (empty? lst)\n      res\n      (recur (rest lst) (assoc res (first lst) val)))))", "user": "5c706232e4b0fca0c162277e"}, {"problem": 156, "code": "(fn [default-val ks]\n  (into {} (map (fn [k] [k default-val]) ks)))", "user": "5c73b8bae4b0fca0c16227ba"}, {"problem": 156, "code": "(fn [defval init-keys]\n  (loop [res {}, key init-keys]\n    (if (empty? key)\n      res\n      (recur \n        (assoc res (first key) defval)\n        (rest key)))))", "user": "5c7409b3e4b0fca0c16227c1"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5c6d0e51e4b0fca0c1622735"}, {"problem": 156, "code": "(fn [default_value key_seq] (reduce (fn [acc element] (assoc acc element default_value)) {} key_seq))", "user": "5c723f4be4b0fca0c16227a0"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5c706454e4b0fca0c1622780"}, {"problem": 156, "code": "(fn [v m] (zipmap m (repeat v)))", "user": "5c664b87e4b0fca0c16226a5"}, {"problem": 156, "code": "(fn [val keys]\n  (into {} (for [x keys] {x val})))", "user": "5c6e7cc1e4b0fca0c1622752"}, {"problem": 156, "code": "(fn [arb lst] (into (sorted-map) (map #(vector % arb) lst)))", "user": "5c5e3af7e4b01df32ab732c6"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5c6edb17e4b0fca0c1622759"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "589f5f9be4b02bd94d917e81"}, {"problem": 156, "code": "(fn [value coll]\n  (apply conj {}\n    (map #(vector % value) coll)))", "user": "5a08cffbe4b01bb0ae8afdfb"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5c787131e4b0fca0c1622825"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (repeat v)))", "user": "5b602a66e4b0c6492753e6fc"}, {"problem": 156, "code": "(fn [defu k_vec] (reduce (fn [map1 key1] (assoc map1 key1 defu)) {} k_vec))", "user": "5c76577ae4b0fca0c16227ea"}, {"problem": 156, "code": "(fn [v m] (into {} (map #(hash-map % v) m)))", "user": "56d9f312e4b0ea9b8538f7fa"}, {"problem": 156, "code": "(fn [default ks] (apply hash-map (interleave ks (repeat default))))", "user": "59342e52e4b072a2710fd06b"}, {"problem": 156, "code": "(fn fun1 [d k] \n  (reduce \n    (fn [acc i] (conj acc [i d])) \n    {} \n    k))", "user": "5c7d5a0ce4b0d597f478caab"}, {"problem": 156, "code": "(fn [x lst] (zipmap lst (repeat (count lst) x)))", "user": "5c748bf5e4b0fca0c16227cb"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5c7bc0a5e4b0fca0c1622865"}, {"problem": 156, "code": "(fn [defval ks]\n  (zipmap ks (repeat defval)))", "user": "5839efeae4b089d5ab817d47"}, {"problem": 156, "code": "(fn [x lst] (zipmap lst (repeat (count lst) x)))", "user": "5c7d5463e4b0d597f478caa9"}, {"problem": 156, "code": "(fn [v kmap]\n   (reduce (fn [acc item] (assoc acc item v)) {} kmap))", "user": "5a64dcabe4b0512ff01cd9a9"}, {"problem": 156, "code": "(fn [val keys] (zipmap keys (repeat val)))", "user": "5c7ef3f3e4b0d597f478cad7"}, {"problem": 156, "code": "(fn [default keys] \n  (into (sorted-map) \n        (map \n         (fn [key] [key default]) \n         keys)))", "user": "5c7c78c9e4b0d597f478ca94"}, {"problem": 156, "code": "(fn [d coll]\n  (reduce #(assoc %1 %2 d) {} coll))", "user": "5c813b27e4b0c8042a70ce22"}, {"problem": 156, "code": "#(reduce (fn [m k] (assoc m k %1)) {} %2)", "user": "5c829725e4b0c8042a70ce3d"}, {"problem": 156, "code": "(fn maps\n  [x lst]\n  (into '{} (map (fn [y] (hash-map y x))lst)))", "user": "5c7dad57e4b0d597f478caba"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %)))", "user": "5c82db41e4b0c8042a70ce42"}, {"problem": 156, "code": "(fn [defaultValue items] (reduce (fn [result item] (assoc result item defaultValue) ) {} items) )", "user": "5c839a4de4b0c8042a70ce53"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (take (count %2)(repeat %1))))", "user": "5c74b043e4b0fca0c16227ce"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %1) ))", "user": "5c805d45e4b0c8042a70ce13"}, {"problem": 156, "code": "(fn [v k] (reduce #(assoc %1 %2 v) {} k))", "user": "5c7bb8c0e4b0fca0c1622864"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5c7f7889e4b0d597f478cae0"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5c815c33e4b0c8042a70ce24"}, {"problem": 156, "code": "(fn [v ks] (reduce merge (for [k ks] {k v} )))", "user": "5c852e3ae4b0c8042a70ce78"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5c746c31e4b0fca0c16227c8"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5c70641de4b0fca0c162277f"}, {"problem": 156, "code": "(fn [x coll] (reduce #(conj %1 [%2 x]) {} coll))", "user": "5c8319c3e4b0c8042a70ce45"}, {"problem": 156, "code": "(fn [d l] (apply hash-map (mapcat #(list % d) l)))", "user": "5c7c1d8ee4b0d597f478ca88"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5c863a81e4b0c8042a70ce8e"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5c784248e4b0fca0c162281f"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5c75a830e4b0fca0c16227e0"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5b22d30ee4b08b1df1c36750"}, {"problem": 156, "code": "(fn[e l](apply hash-map(mapcat #(vector % e)l)))", "user": "5c7d947be4b0d597f478cab6"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5c7c8c72e4b0d597f478ca96"}, {"problem": 156, "code": "(fn [x y]\n  (apply\n   hash-map\n   (interleave y (repeat x))))", "user": "5c7741dce4b0fca0c1622806"}, {"problem": 156, "code": "(fn [defval coll]\n  (zipmap coll (repeat defval)))", "user": "566a0845e4b04acd4f672e05"}, {"problem": 156, "code": "(fn [k s]\n  (reduce #(conj %1 {%2 k}) {} s))", "user": "5c8bc8bde4b048ec896c5979"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5c79030be4b0fca0c1622830"}, {"problem": 156, "code": "(fn map-defaults\n  [a b]\n  (into {} (map #(hash-map % a) b)))", "user": "59b9e669e4b0a024fb6ae3db"}, {"problem": 156, "code": "(fn [default xs]\n   (reduce #(assoc %1 %2 default) {} xs))", "user": "5c896f46e4b048ec896c5940"}, {"problem": 156, "code": "(fn [default ks] (apply merge (let [m {}] (map #(assoc m % default) ks))))", "user": "5c92105ce4b048ec896c59f7"}, {"problem": 156, "code": "(fn [v ks]\n  (reduce #(assoc %1 %2 v) {} ks))", "user": "5c2d1f63e4b0d62ef62d9ef0"}, {"problem": 156, "code": "(fn [d s] (reduce merge (map #(assoc {} % d) s)))", "user": "5c8fa41be4b048ec896c59c1"}, {"problem": 156, "code": "(fn [default-value keys]\n  (zipmap keys (repeat default-value)))", "user": "5c891afde4b048ec896c5935"}, {"problem": 156, "code": "(fn [default k] (apply hash-map (mapcat vector k (repeat default))))", "user": "57fc0719e4b0d3187e900987"}, {"problem": 156, "code": "(fn [v ks] (into {} (for [k ks] [k v])))", "user": "5bd0ea60e4b0e9689409ee45"}, {"problem": 156, "code": "(fn [v ks] (into {} (map #(hash-map % v) ks)))", "user": "5c995fa4e4b048ec896c5a96"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "59286a7de4b072a2710fcee8"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "5c9d0a0be4b048ec896c5afc"}, {"problem": 156, "code": ";;f\\s - first\\second data input for reduce funtion\n;;empty {} for starting hash-map\n;;(conj f {s value}) also working\n(fn [value key-coll]\n  (reduce (fn [f s] (assoc f s value)) {} key-coll ))", "user": "5ca09d40e4b048ec896c5b6c"}, {"problem": 156, "code": "(fn [d ks]\n  (into {} (map (fn [k] [k d]) ks)))", "user": "55dcc26ee4b050e68259b3bc"}, {"problem": 156, "code": "(fn [v\n     xs]\n  (reduce #(assoc %1 %2 v) {} xs))", "user": "5ca14eb1e4b048ec896c5b7d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5c06fab7e4b0bdcf453d16bd"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5c7e82cbe4b0d597f478cacb"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5c538cb5e4b0fb8c5ffd99fb"}, {"problem": 156, "code": "#(into {} (zipmap %2 (repeat %1)))", "user": "5ca1c45ae4b048ec896c5b85"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5ca1f8a1e4b048ec896c5b8c"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55a24698e4b0acc240e31523"}, {"problem": 156, "code": "(fn [val keys] (apply merge (map #(hash-map % val) keys)))", "user": "5c936583e4b048ec896c5a1c"}, {"problem": 156, "code": "(fn [default array]\n  (reduce merge (map #(assoc {} % default) array)))", "user": "5ca04cc3e4b048ec896c5b69"}, {"problem": 156, "code": "(fn [v ks] (into {} (map (fn [k] [k v]) ks)))", "user": "5cab33e7e4b048ec896c5c48"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "53a9340ee4b047364c04442f"}, {"problem": 156, "code": "(fn [dft kys] (into {} (map #(hash-map % dft) kys)))", "user": "5c9b07cde4b048ec896c5abd"}, {"problem": 156, "code": "(fn q156\n  ([v [head & tail] m]\n   (if (nil? head)\n     m\n     (recur v tail (assoc m head v))))\n  ([v ks] (q156 v ks {})))", "user": "5cab0ad9e4b048ec896c5c46"}, {"problem": 156, "code": "(fn [default vect]  (reduce (fn [map key] (conj map {key default})) \n                                      {}\n                                      vect))", "user": "5c9b848fe4b048ec896c5acf"}, {"problem": 156, "code": "(fn l [x y] (if (seq y) (conj {(first y) x} (l x (rest y)))))", "user": "5caf9a07e4b026601754b899"}, {"problem": 156, "code": "(fn\n  [v ks]\n  (reduce \n   (fn [a k] \n     (conj a {k v})) \n   {} ks))", "user": "5aafde49e4b073f1774425a1"}, {"problem": 156, "code": "(fn [x y] (into {} (map #(hash-map % x) y)))", "user": "58b84c28e4b0ebc645576d94"}, {"problem": 156, "code": "(fn [default map-keys]\n  (zipmap map-keys (repeat default)))", "user": "5c9419fae4b048ec896c5a2b"}, {"problem": 156, "code": "(fn [default keys] ((fn [default keys map] (if (empty? keys) map (recur default (rest keys) (conj map [(first keys) default])))) default keys {}))", "user": "5cb47a0fe4b026601754b91b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5bcf95ace4b0e9689409ee2e"}, {"problem": 156, "code": "(fn\n  [def-value keys]\n  (reduce (fn [m k] (conj m {k def-value})) {} keys))\n\n;(conj coll x)", "user": "5cb39440e4b026601754b903"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %))", "user": "5c950334e4b048ec896c5a44"}, {"problem": 156, "code": "(fn [v k] (into {} (map #(vector % v) k)))", "user": "5cb41c40e4b026601754b911"}, {"problem": 156, "code": "(fn [v ks]\n  (reduce into {} (map #(hash-map % v) ks)))", "user": "5cb703e8e4b026601754b95b"}, {"problem": 156, "code": "(fn [defval init-keys]\n  (loop [res {}, key init-keys]\n    (if (empty? key)\n      res\n      (recur \n        (assoc res (first key) defval)\n        (rest key)))))", "user": "5a09ebf8e4b0eab8c0448932"}, {"problem": 156, "code": "(fn [ds ks] (reduce conj (for [k ks] {k ds})))", "user": "5766bab8e4b0a07e8fc180b1"}, {"problem": 156, "code": "(fn [def-val ks] (reduce #(assoc %1 %2 def-val) {} ks))", "user": "5c87d2cbe4b048ec896c591c"}, {"problem": 156, "code": "(fn [defaultval coll] (zipmap coll (repeat defaultval)))", "user": "5cb4e764e4b026601754b929"}, {"problem": 156, "code": "(fn [d coll] (into {} (map (fn [x] [x d]) coll)))", "user": "5cb62652e4b026601754b949"}, {"problem": 156, "code": "(fn [default coll] (apply hash-map (into [] (interleave coll (cycle [default])))))", "user": "5c547cf0e4b0fb8c5ffd9a0b"}, {"problem": 156, "code": "(fn [x y] (zipmap y (repeat (count y) x)))", "user": "4dbf01c8535d020aff1edf6f"}, {"problem": 156, "code": "(fn [v k] (reduce (fn [acc it] (assoc acc it v)) {} k))", "user": "5cbdc591e4b026601754ba00"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %))", "user": "5b7aaa3ce4b047b03b203716"}, {"problem": 156, "code": "(fn [k values] \n    (zipmap values (repeat k)))", "user": "5caa5e42e4b048ec896c5c35"}, {"problem": 156, "code": "#(apply merge (for [x %2\n    :let [y (hash-map x %1)] ]\n  y))", "user": "5cbc1ee7e4b026601754b9e1"}, {"problem": 156, "code": "(fn [default ks] (zipmap ks (repeat (count ks) default)))", "user": "5ca622f3e4b048ec896c5be0"}, {"problem": 156, "code": "(fn [p c] (reduce #(assoc % %2 p) {} c))", "user": "5a6dbaf5e4b0512ff01cda63"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5ca7b5bbe4b048ec896c5c04"}, {"problem": 156, "code": "#(loop [res {} v %2]\n    (if (empty? v) \n      res\n      (recur (assoc res (first v) %1) (rest v))\n      ))", "user": "5cbd5b42e4b026601754b9f6"}, {"problem": 156, "code": "(fn [default c]\n  (zipmap c (repeat default)))", "user": "5cc7342be4b0ccb061962830"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5cc7692ce4b0ccb061962837"}, {"problem": 156, "code": "(fn [v ks]\n    (loop [ks ks m {}]\n      (if (not (empty? ks))\n        (recur (rest ks) (assoc m (first ks) v))\n      m)))", "user": "5cc6f982e4b0ccb06196282d"}, {"problem": 156, "code": "#(into {} (for [x %2] {x %1}))", "user": "5cc6b4bfe4b0ccb061962827"}, {"problem": 156, "code": "(fn [x v]\n  (apply hash-map\n         (interleave v (repeat x))))", "user": "5cc28739e4b0ccb0619627d8"}, {"problem": 156, "code": "(fn [d l]\n  (apply\n   assoc\n   {}\n   (interleave l\n     (repeat (count l) d))))", "user": "565131b3e4b0f29ec07d2e88"}, {"problem": 156, "code": "(fn [default col] (apply hash-map (interleave col (repeat default))))", "user": "4fbe2cfbe4b081705acca30c"}, {"problem": 156, "code": "(fn [a b]\n  (reduce #(assoc %1 %2 a) {} b))", "user": "59ea07c9e4b0249b72820756"}, {"problem": 156, "code": "(fn m [defval vec] (reduce (fn [mp y] (assoc mp y defval )) {} vec))", "user": "5cc77807e4b0ccb061962838"}, {"problem": 156, "code": "#(into {}(for [x %2] [x %1]))", "user": "5cc092d1e4b0ccb061962790"}, {"problem": 156, "code": "(fn [x k] (reduce (fn [m k] (assoc m k x)) {} k))", "user": "5ccb0bbee4b0ccb06196287c"}, {"problem": 156, "code": "(fn [default ks]\n  (zipmap ks (repeat default)))", "user": "5cc7073de4b0ccb06196282e"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5cc82af4e4b0ccb061962843"}, {"problem": 156, "code": "(fn [k ks] (reduce #(assoc %1 %2 k) {} ks))", "user": "52d81642e4b09f7907dd1387"}, {"problem": 156, "code": "(fn [x xs] (zipmap xs (repeat x)))", "user": "5a9bfd57e4b0d174b936c7d0"}, {"problem": 156, "code": "(fn [v k] (reduce #(into %1 {%2 v}) {} k))", "user": "5ccb3792e4b0ccb061962882"}, {"problem": 156, "code": "(fn w [v ks2]\n  (loop [m {} ks ks2]\n    (if-not (empty? ks)\n      (recur (assoc m (first ks) v) (rest ks))\n      m)))", "user": "5cc74e44e4b0ccb061962833"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5ccf21c4e4b0ccb0619628c1"}, {"problem": 156, "code": "#(reduce (fn [acc cur] (assoc acc cur %1)) (hash-map) %2)", "user": "5cc4b34de4b0ccb061962805"}, {"problem": 156, "code": "(fn [d k]\n  (zipmap k (repeat d) )\n  )", "user": "5ccc2a03e4b0ccb06196288f"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5c633df2e4b0fca0c162265c"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "5cb11a72e4b026601754b8c6"}, {"problem": 156, "code": "(fn [dft ks] (zipmap ks (repeat (count ks) dft)))", "user": "52860baae4b0239c8a67ae09"}, {"problem": 156, "code": "(fn [v ks] (reduce (fn [acc k] (assoc acc k v)) {} ks))", "user": "5cd1f5dae4b0ccb0619628f7"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5cd5f3f8e4b0ccb06196293d"}, {"problem": 156, "code": "#(reduce (fn [m k] (assoc m k %1)) {} %2)", "user": "5b9ae606e4b0c0b3ffbd4af2"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5cccac42e4b0ccb06196289d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5cd99bebe4b05ee0cb311707"}, {"problem": 156, "code": "(fn [a m] (into {} \n                (for [x m] {x a})\n                )\n  \n)", "user": "5cd438c8e4b0ccb061962917"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5cd47c26e4b0ccb06196291e"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5cd639b4e4b0ccb061962940"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5cdd473ae4b05ee0cb311757"}, {"problem": 156, "code": "(fn [default keys]\n  (reduce #(assoc %1 %2 default)\n          {}\n          keys))", "user": "50eb4c32e4b0346a3e988cbf"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5cdcef13e4b05ee0cb311752"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "593e01cde4b069cdc2982bb3"}, {"problem": 156, "code": "(fn [default ks]\n  (into {} (map vector ks (repeat default))))", "user": "5ce077e9e4b0a17bb84e2b0c"}, {"problem": 156, "code": "(fn [defaultVal vect]\n   (into {} (map #(vector % defaultVal) vect)))", "user": "5cdd7157e4b05ee0cb31175b"}, {"problem": 156, "code": "(fn [d m]\n(apply merge (for [p m] (hash-map p d)))\n)", "user": "5cda72ffe4b05ee0cb311714"}, {"problem": 156, "code": "(fn [default keys] \n  (reduce \n   (fn [xs x] (conj xs {x default})) \n   {} \n   keys))", "user": "5ce2bf8ee4b0a17bb84e2b2e"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5ce3e239e4b0a17bb84e2b46"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "5cdd934ce4b05ee0cb311761"}, {"problem": 156, "code": "(fn [default values]  \n  (into {} (for [v values]\n              {v default}\n              )))", "user": "5ce2b15fe4b0a17bb84e2b2c"}, {"problem": 156, "code": "(fn [v l] (apply merge (map #(hash-map % v) l)))", "user": "5ce56db6e4b0a17bb84e2b72"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5ce44ee2e4b0a17bb84e2b57"}, {"problem": 156, "code": "(fn [v k] (into {} (map #(hash-map %1 v) k)))", "user": "5cd16529e4b0ccb0619628e7"}, {"problem": 156, "code": "(fn [x coll] (zipmap coll (repeat x)))", "user": "5ce52271e4b0a17bb84e2b69"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5ce41d1be4b0a17bb84e2b50"}, {"problem": 156, "code": "(fn [default xs]\n  (reduce #(assoc %1 %2 default) {} xs))", "user": "5cc75ffce4b0ccb061962836"}, {"problem": 156, "code": "(fn [initVal arr] (reduce (fn [r x] (conj r [x initVal])) {} arr))", "user": "5ce62d8ee4b0a17bb84e2b83"}, {"problem": 156, "code": "(fn default-mapper [d-val collection]\n  (reduce #(assoc %1 %2 d-val) {} collection))", "user": "5cd8d4a1e4b05ee0cb3116f3"}, {"problem": 156, "code": "(fn [def-val a-seq]\n  (reduce (fn [map key]\n            (assoc map key def-val))\n          {}\n          a-seq))", "user": "5ce36e02e4b0a17bb84e2b3e"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5cd96443e4b05ee0cb3116fd"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5c665311e4b0fca0c16226a7"}, {"problem": 156, "code": "(fn [v k]\n  (->> k\n       (map (fn [x] [x v]))\n       (into (sorted-map))))", "user": "5cebdfd4e4b0a17bb84e2be9"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5cd4f7c5e4b0ccb06196292a"}, {"problem": 156, "code": "#(into {} (map (fn [x] [x %1]) %2))", "user": "5cebafbbe4b0a17bb84e2be6"}, {"problem": 156, "code": "#(loop [value %1 keys %2 output {}]\n    (if (empty? keys)\n      output\n      (do\n        (prn \"first key -\" (first keys) \"value: \" value \"output -\" output)\n        (recur value (rest keys) (into output {(first keys) value})))))", "user": "5cea925ce4b0a17bb84e2bd2"}, {"problem": 156, "code": "(fn[x y] (zipmap y (repeat x)))", "user": "5ceef51ee4b0aaa82f1129e9"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5ce78776e4b0a17bb84e2ba2"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %1)))", "user": "5ce97826e4b0a17bb84e2bc0"}, {"problem": 156, "code": "#(loop [val %1 seq %2 mp {}]\n   (if (empty? seq) mp (recur val (rest seq) (assoc mp (first seq) val))))", "user": "592bb806e4b072a2710fcf46"}, {"problem": 156, "code": "(fn [d v] (apply merge (map #(hash-map % d) v)))", "user": "5cacc9e0e4b026601754b862"}, {"problem": 156, "code": "(fn [val keys]\n  (reduce #(assoc %1 %2 val) {} keys))", "user": "5a23503fe4b0ff51aa4b32d6"}, {"problem": 156, "code": "(fn [v k] (zipmap k (repeat v)))", "user": "5cf4ec97e4b087f62be35a8b"}, {"problem": 156, "code": "(fn [v ks]\n    (apply conj {}\n           (map vector ks (repeat v))))", "user": "52281e1ee4b0186687e23a69"}, {"problem": 156, "code": "(fn my-thing\n  [value coll]\n  (into {} (map (fn [x] [x value]) coll))\n)", "user": "5c3440fee4b0d62ef62d9f50"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "53d612cbe4b0e771c3025452"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "59924289e4b0866487ed0d76"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5cece5a2e4b0a17bb84e2bfb"}, {"problem": 156, "code": "(fn [val col] (reduce #(assoc %1 %2 val) {} col))", "user": "5cec2b79e4b0a17bb84e2bf4"}, {"problem": 156, "code": "(fn [default ks] (reduce (fn [acc k] (assoc acc k default)) {} ks))", "user": "5cf4094be4b0aaa82f112a35"}, {"problem": 156, "code": "(fn [v coll] (reduce #(assoc %1 %2 v) {} coll))", "user": "5cf62ecce4b087f62be35aa7"}, {"problem": 156, "code": "(fn [default sequ]\n  (reduce #(assoc %1 %2 default) {} sequ))", "user": "5cf863c4e4b0b71b1d808a80"}, {"problem": 156, "code": "(fn [v vs] (reduce #(conj %1 [%2 v]) {} vs))", "user": "5cee521ce4b0aaa82f1129dd"}, {"problem": 156, "code": "(fn [val keys] (reduce #(conj %1 [%2 val]) {} keys))", "user": "5cf8e426e4b0b71b1d808a88"}, {"problem": 156, "code": "(fn [defaultval keys] (let [key-map (for [key keys] {key defaultval})\n                                   map-set {}]\n                               (reduce #(conj %1 %2) map-set key-map)))", "user": "5cfabf53e4b0cc9c91588148"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5ceedd7ae4b0aaa82f1129e4"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5032089de4b000fc67a99a85"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5d03c351e4b0cc9c915881cc"}, {"problem": 156, "code": "(fn [d coll] (reduce #(assoc %1 %2 d) {} coll))", "user": "5cdc17d0e4b05ee0cb31173c"}, {"problem": 156, "code": "(fn [default keys] (reduce (fn [x y] (assoc x y default)) {} keys))", "user": "5d03944de4b0cc9c915881c5"}, {"problem": 156, "code": "(fn [d m] (into {} (map #(vector %2 %1) (cycle [d]) m)))", "user": "5d06499ae4b0cc9c915881ec"}, {"problem": 156, "code": "(fn [d ks] (into {} (map (fn [k] [k d]) ks)))", "user": "59b1a1b2e4b0e1f4e384c8eb"}, {"problem": 156, "code": "(fn [default keyss] (->> keyss\n                        (map #(hash-map % default))\n                        (reduce conj)))", "user": "5d045162e4b0cc9c915881d3"}, {"problem": 156, "code": "(fn [x s] (reduce #(assoc %1 %2 x) {} s))", "user": "5d05fdece4b0cc9c915881e8"}, {"problem": 156, "code": "(fn [v coll]\n  (zipmap coll (repeat v)))", "user": "5c3f29d4e4b08cd430848e8f"}, {"problem": 156, "code": "(fn [default-value keys] (into (hash-map) (map (fn [x] {x default-value}) keys)))", "user": "5d0859fbe4b0cc9c91588208"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5cd4e1b2e4b0ccb061962927"}, {"problem": 156, "code": "#( zipmap %2 (take (count %2) (repeat %1)) )", "user": "5cf7c1b0e4b0b71b1d808a72"}, {"problem": 156, "code": "(fn [default-val map-keys]\n  (reduce (fn [new-map map-key]\n            (assoc new-map map-key default-val))\n          {}\n          map-keys))", "user": "5d0b210ee4b0cc9c9158822b"}, {"problem": 156, "code": "(fn [d lst] (reduce #(conj %1 [%2 d]) {} lst))", "user": "5d0aab50e4b0cc9c91588220"}, {"problem": 156, "code": "(fn [v ks] (into {} (map (fn [k] [k v]) ks)))", "user": "5d046f7ce4b0cc9c915881d5"}, {"problem": 156, "code": "(fn [x mylist] (into {} (for [y mylist] {y x})))", "user": "568f2059e4b0dcc4269f40df"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))\n;(fn [default ks] (reduce #(conj %1 [%2 default]) {} ks))", "user": "5cfee28de4b0cc9c91588185"}, {"problem": 156, "code": "(fn [_val _list]\n  (loop [result {}\n         _keys _list]\n    (if (empty? _keys) result\n  \t\t(recur (assoc result (first _keys) _val) (rest _keys)))))", "user": "5ac9c737e4b0e27600da77d2"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5d0eda66e4b0cc9c9158825f"}, {"problem": 156, "code": "(fn [vall keeys]\n  (reduce conj (map #(hash-map % vall) keeys)))", "user": "5d0beecee4b0cc9c91588239"}, {"problem": 156, "code": "(fn consmap [x keys] (zipmap keys (repeat (count keys) x)))", "user": "5a08f951e4b01bb0ae8afdfd"}, {"problem": 156, "code": "(fn [v ks] (into {} (map #(vector % v) ks)))", "user": "5d02fe44e4b0cc9c915881c0"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "4e586949535d8a8b8723a292"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5d132412e4b02c15ef0219a6"}, {"problem": 156, "code": "(fn fillVals\n  [dfVal ks]\n  (zipmap ks (repeat dfVal)))", "user": "5d123c75e4b02c15ef021997"}, {"problem": 156, "code": "(fn [a b] (apply hash-map (interleave b (repeat a))))", "user": "5b337ff4e4b025bcb146f339"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "58dde189e4b0a4d5acaab6dd"}, {"problem": 156, "code": "(fn [x y] (reduce #(assoc %1 %2 x) {} y))", "user": "5d1bbef0e4b02ea6f0fb6984"}, {"problem": 156, "code": "(fn [value col] (reduce #(assoc %1 %2 value) {} col))", "user": "5d0b4966e4b0cc9c9158822f"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5d1b2a1ee4b02ea6f0fb6979"}, {"problem": 156, "code": ";;(map (fn [v k] (vector k v)) 1 [:a :b :c] )\n\n(fn [v ks] (reduce conj {} (map vector ks (repeat v) ) ) )", "user": "5d1cf523e4b02ea6f0fb6994"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5d1bcf6ae4b02ea6f0fb6985"}, {"problem": 156, "code": "(fn [d keys]\n  (reduce (fn [m k]\n            (assoc m k d))\n          {}\n          keys))", "user": "570c8ac3e4b0b0fb43fd06ca"}, {"problem": 156, "code": "(fn [v col] (apply hash-map (interleave col (repeat 100 v))))", "user": "5d1a1082e4b0902706380e0e"}, {"problem": 156, "code": "(fn [x m]\n  (loop [result {}, key m]\n    (if (empty? key)\n      result\n      (recur (assoc result (first key) x)\n             (rest key)))))", "user": "5ccf99fbe4b0ccb0619628c8"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat (count %2) %1)))", "user": "5d2201b8e4b02ea6f0fb69ed"}, {"problem": 156, "code": "(fn default-keys\n  ([v ks] (default-keys v ks {}))\n  ([v ks m]\n   (if (empty? ks)\n     m\n     (recur v (rest ks) (assoc m (first ks) v)))))", "user": "5d217b1de4b02ea6f0fb69e6"}, {"problem": 156, "code": "(fn [x y] (zipmap y (repeat (count y) x) ))", "user": "5bc2df19e4b07a9b28b10038"}, {"problem": 156, "code": "(fn [default keys] (zipmap keys (repeat default)))", "user": "5c59b836e4b01df32ab73263"}, {"problem": 156, "code": "(fn \n  [val keys]\n  (reduce (fn [acc curr] (assoc acc curr val)) {} keys))", "user": "5d1c14cde4b02ea6f0fb698a"}, {"problem": 156, "code": "(fn [default keys]\n  (reduce #(conj %1 [%2 default]) {} keys))", "user": "5d231255e4b02ea6f0fb69fe"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "559622cee4b0c79f6e1db975"}, {"problem": 156, "code": "(fn [x ls]\n  (into (sorted-map) \n        (map #(hash-map % x) ls)))", "user": "5d125d63e4b02c15ef021999"}, {"problem": 156, "code": "(fn [default_value vect] (reduce #(assoc %1 %2 default_value) {} vect))", "user": "5cf53196e4b087f62be35a94"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5d138119e4b0902706380dbb"}, {"problem": 156, "code": "(fn [v ks] (apply conj {} (map (fn [k] [k v]) ks)))", "user": "5d272077e4b092dab7f59c64"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5d14daa6e4b0902706380dcb"}, {"problem": 156, "code": "#(loop [defVal %1 col %2 rt {}]\n   (if(empty? col)\n     rt\n     (recur defVal (rest col) (assoc rt (first col) defVal))\n     )\n   )", "user": "5d270111e4b092dab7f59c62"}, {"problem": 156, "code": "(fn foo [value my-seq]\n  (reduce\n    (fn [acc k]\n      (println \"acc:\" acc)\n      (assoc acc k value))\n    {}\n    my-seq))", "user": "5ad76df9e4b0ea6055cfac18"}, {"problem": 156, "code": "(fn [d c] (reduce #(conj %1 [%2 d]) {} c))", "user": "5d29c06be4b01671435dbc6b"}, {"problem": 156, "code": "(fn [default, keys]\n  (zipmap keys (repeat default)))", "user": "5d13f783e4b0902706380dc1"}, {"problem": 156, "code": "(fn [v coll] (zipmap coll (repeat v)))", "user": "5d27da09e4b092dab7f59c75"}, {"problem": 156, "code": "(fn [defval init-keys]\n  (loop [res {}, key init-keys]\n    (if (empty? key)\n      res\n      (recur \n        (assoc res (first key) defval)\n        (rest key)))))", "user": "5d29d837e4b01671435dbc6c"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "576a42e6e4b0a07e8fc1810e"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5d2bfb68e4b01671435dbc86"}, {"problem": 156, "code": "(fn [default keyVec]\n  (zipmap keyVec (repeat (count keyVec) default))\n  )", "user": "5d2ccc98e4b01671435dbc97"}, {"problem": 156, "code": "(fn [default-val ks]\n  (reduce #(assoc %1 %2 default-val) {} ks))", "user": "5cf895efe4b0b71b1d808a85"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5d28222ee4b092dab7f59c7a"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5d25f5e7e4b02ea6f0fb6a3a"}, {"problem": 156, "code": "(fn [d ks]\n  (reduce (fn [acc k] (assoc acc k d)) (hash-map) ks))", "user": "5d0e9931e4b0cc9c91588258"}, {"problem": 156, "code": "(fn [a b] (apply merge (map #(hash-map % a) b)))", "user": "5d2ca236e4b01671435dbc94"}, {"problem": 156, "code": "(fn [n sequence]\n   (->> sequence\n        (map (fn [item] [item n]))\n        (into {})))", "user": "5d25abc9e4b02ea6f0fb6a37"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %)))", "user": "5d28b684e4b092dab7f59c83"}, {"problem": 156, "code": "(fn [x y] (zipmap y (repeat x)))", "user": "5d301c95e4b01671435dbcca"}, {"problem": 156, "code": "(fn m [d ls]\n  (if (empty? ls)\n  {}\n  (conj (m d (rest ls)) [(first ls) d])))", "user": "58b997afe4b0888cdc949cd1"}, {"problem": 156, "code": "(fn construct-default-map\n  [default-value key-seq]\n  (into {}\n        (for [el key-seq]\n          {el default-value}\n          )))", "user": "5d23bd56e4b02ea6f0fb6a0f"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5d20677be4b02ea6f0fb69d3"}, {"problem": 156, "code": "#(->> (interleave %2 (repeat %)) (partition 2) (map vec) (into {}))", "user": "5d35fb9be4b01671435dbd1c"}, {"problem": 156, "code": "(fn [v ks]\n  (reduce\n    (fn [m k]\n      (assoc m k v))\n    {}\n    ks))", "user": "5d35f997e4b01671435dbd1a"}, {"problem": 156, "code": "(fn [defval list] (reduce #(assoc %1 %2 defval) {} list))", "user": "5abeb697e4b073f177442725"}, {"problem": 156, "code": "(fn [v key-coll] (into {} (map #(hash-map % v) key-coll)))", "user": "5d370811e4b01671435dbd2d"}, {"problem": 156, "code": "(fn [val coll] (zipmap coll (repeat (count coll) val)))", "user": "5d348d3de4b01671435dbd0a"}, {"problem": 156, "code": "(fn [d ks]\n  (apply sorted-map (conj (apply vector (interpose d ks)) d))\n  )", "user": "5ce867fce4b0a17bb84e2baf"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5d0902e8e4b0cc9c91588211"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5cda0e26e4b05ee0cb311710"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5d2c779be4b01671435dbc8d"}, {"problem": 156, "code": "#(loop [i 0\n        result {}]\n   (if (< i (count %2))\n     (recur (inc i) (conj result [(get %2 i) %]))\n     result))", "user": "5d3f50d7e4b09d9322bc20a6"}, {"problem": 156, "code": "(fn [def_value keys] (reduce (fn [acc key] (assoc acc key def_value)) {} keys) )", "user": "5d40493ae4b05dd059a54364"}, {"problem": 156, "code": "(fn [d kv] (into {} (for [k kv] [k d])))", "user": "5d3ae729e4b01671435dbd5d"}, {"problem": 156, "code": "(fn [d k]\n   (reduce (fn [m v] (assoc m v (or d 0))) {} k))", "user": "5d41de31e4b05dd059a54379"}, {"problem": 156, "code": "(fn [v k] (zipmap k (repeat v)))", "user": "5d404586e4b05dd059a54363"}, {"problem": 156, "code": "(fn [v m] (zipmap m (repeat v)))", "user": "5d40442ee4b05dd059a54362"}, {"problem": 156, "code": "(fn [x y] (into {} (map vector y (loop [i (count y) result []] (if (> i 0) (recur (- i 1) (conj result x)) result)))))", "user": "5d4256bae4b05dd059a5437d"}, {"problem": 156, "code": "(fn [x keys]\n  (zipmap keys (repeat x)))", "user": "4fb41dace4b081705acca2aa"}, {"problem": 156, "code": "(fn [default-value init-keys]\n   (loop [res {}, key init-keys]\n     (if (empty? key)\n       res\n       (recur\n         (assoc res (first key) default-value)\n         (rest key)))))", "user": "5d40f41ae4b05dd059a5436d"}, {"problem": 156, "code": "(fn [val keys]\n  (reduce \n   (fn [acc x] \n     (conj acc {x val})) {} keys))", "user": "5bcee7d9e4b0e9689409ee22"}, {"problem": 156, "code": "(fn [a b] (zipmap b (repeat a)))", "user": "5baaae06e4b0a20761a23464"}, {"problem": 156, "code": "(fn [x y]\n  \n  (reduce #(assoc %1 %2 x) {} y))", "user": "54b331dbe4b09f271ff37d37"}, {"problem": 156, "code": "(fn [default col]\n  (loop [m {}\n         col col]\n    (if (empty? col)\n      m\n      (recur (assoc \n               m \n               (first col) \n               default) \n             (rest col)))))", "user": "5ceb221ce4b0a17bb84e2bde"}, {"problem": 156, "code": "(fn [val coll]\n  (reduce into {} (map #(hash-map % val) coll)))", "user": "5bfc7a06e4b0bdcf453d15ee"}, {"problem": 156, "code": "(fn [default k] (apply hash-map \n                 (interleave \n                  \tk \n                  \t(repeat default))))", "user": "5d45bd1de4b07c84aa5ae6a4"}, {"problem": 156, "code": "(fn [default data] (reduce #(assoc %1 %2 default) {} data))", "user": "5d47f45de4b07c84aa5ae6b4"}, {"problem": 156, "code": "(fn [v ks] (into {} (map #(identity [% v]) ks)))", "user": "5d47f4dbe4b07c84aa5ae6b5"}, {"problem": 156, "code": "(fn [DefValue Keys]\n    (loop\n      [Index 0 Ret {}]\n      (if (>= Index (count Keys)) \n        Ret\n        (recur (inc Index) (conj Ret { (get Keys Index) DefValue} ) )\n      )\n    )\n  )", "user": "5d4a6c6ce4b0776584bd6f22"}, {"problem": 156, "code": "(fn [default coll]\n  (apply merge (map (fn [x] {x default}) coll)))", "user": "5d49ec5ee4b0776584bd6f1c"}, {"problem": 156, "code": "(fn [v ks]\n  (reduce (fn [newset newkey]\n              (assoc newset newkey v))\n          {}\n          ks))", "user": "5d48884ee4b07c84aa5ae6bb"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5d41ac35e4b05dd059a54375"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %)))", "user": "5cf59deee4b087f62be35a9f"}, {"problem": 156, "code": "(fn [mydefault myseq] \n  (zipmap myseq (repeat mydefault)))", "user": "56bff105e4b060a8e693e3a4"}, {"problem": 156, "code": "(fn [value map-keys]\n  (apply hash-map (interleave\n                   map-keys\n                   (repeat\n                    (count map-keys)\n                    value))))", "user": "5d48e6d3e4b0776584bd6f15"}, {"problem": 156, "code": "(fn [d coll] (into (sorted-map) (map #(vec [% d]) coll)))", "user": "52ca6520e4b071a8d36bd3e0"}, {"problem": 156, "code": "(fn [default keys] (into {} (map (fn [k] [k default]) keys)))", "user": "5d4f21f3e4b0776584bd6f4e"}, {"problem": 156, "code": "(fn [v k]\n     (reduce (fn\n               [el acc]\n               (conj acc el))\n             ()\n             (map\n               #(assoc nil %1 v)\n               (into #{} k)\n               )\n\n             ))", "user": "5bdc4a76e4b0ed4b8aab4c30"}, {"problem": 156, "code": "(fn [value kss]\n  (loop [[k & ks] kss\n         res {}]\n    (if (nil? k)\n      res\n      (recur ks (assoc res k value)))\n  )\n)", "user": "5d07989ee4b0cc9c915881fb"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5259451ce4b0cb4875a45cd7"}, {"problem": 156, "code": "(fn myfun\n  ([v ks] (myfun v ks {}))\n  ([v ks m] (if (empty? ks)\n             m\n             (myfun v (rest ks) (assoc m (first ks) v))\n            ))\n  )", "user": "5d2f5ba5e4b01671435dbcbf"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %)))", "user": "5d54e9b6e4b02ba5928a680a"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5bf06734e4b0a6d31fed2153"}, {"problem": 156, "code": "(fn [value keywords]\n  (->> keywords (map (fn [key] [key value])) (into (sorted-map))))", "user": "5cf2863be4b0aaa82f112a21"}, {"problem": 156, "code": "(fn [x s] (reduce #(assoc % %2 x) {} s))", "user": "5d0bb4fae4b0cc9c91588237"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5d5502cbe4b02ba5928a680b"}, {"problem": 156, "code": "(fn [default m] (zipmap m (repeat default)))", "user": "5d22c0f9e4b02ea6f0fb69f8"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "559ba500e4b066d22e731f58"}, {"problem": 156, "code": "(fn [value coll] (reduce #(assoc %1 %2 value) {} coll ))", "user": "5d590500e4b02ba5928a6824"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5d5b3711e4b06a698e928ee3"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5146f343e4b04ef915e3731e"}, {"problem": 156, "code": "(fn [value, keyList] (into {} (map #(hash-map % value) keyList)))", "user": "5d531d33e4b0776584bd6f6d"}, {"problem": 156, "code": "(fn [init ks] (into {} (map (fn [k] [k init]) ks)))", "user": "5c58736be4b01df32ab73247"}, {"problem": 156, "code": "(fn [default coll]\n  (zipmap coll (repeat default)))", "user": "5b4bfd04e4b02d533a91bca2"}, {"problem": 156, "code": "(fn [default collection]\n  (into {} \n        (for [key collection]\n          [key default])))", "user": "5d4df658e4b0776584bd6f41"}, {"problem": 156, "code": "(fn [val coll] (reduce #(assoc %1 %2 val) {} coll))", "user": "5d5c549ee4b09db18d4482eb"}, {"problem": 156, "code": "(fn [d k](zipmap k (repeat d)))", "user": "5d5f46a6e4b0c9e5857d5000"}, {"problem": 156, "code": "(fn [valor claves]\n  (let [mapa (fn [valor clave] {clave valor})]\n      (reduce #(conj (mapa valor %2) %1) {} claves)))", "user": "5d0153f9e4b0cc9c915881aa"}, {"problem": 156, "code": "(fn [d thingy] (into {} (map #(vector % d) thingy)))", "user": "533b6f01e4b0e30313ee6cce"}, {"problem": 156, "code": "(fn [x ks]\n  (into {} (map #(vector % x) ks)))", "user": "5d609ddde4b0c9e5857d5008"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5d52bf29e4b0776584bd6f69"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %)))", "user": "5d5166d9e4b0776584bd6f5e"}, {"problem": 156, "code": "(fn map-defaults [x s] (reduce (fn [acc v] (assoc acc v x)) {} s))", "user": "5d53a59ae4b0776584bd6f72"}, {"problem": 156, "code": "(fn mwd [d xs]\n  (cond\n    (empty? xs) {}\n\t:else (merge {(first xs) d} (mwd d (rest xs)))\n  )\n)", "user": "5d4c83b7e4b0776584bd6f34"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5d63ba44e4b0c9e5857d5026"}, {"problem": 156, "code": "(fn [default s] (reduce #(assoc %1 %2 default) {} s))", "user": "5d629ed9e4b0c9e5857d501d"}, {"problem": 156, "code": "#_(fn [d coll] (apply hash-map (interleave coll (repeat d))))\n(fn [d coll] (zipmap coll (repeat d)))", "user": "5d24e49be4b02ea6f0fb6a2a"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %1)))", "user": "592018d2e4b09b4ee5954c55"}, {"problem": 156, "code": "(fn [inter coll]\n  (zipmap coll (repeat inter)))", "user": "57204301e4b0c5bde472c093"}, {"problem": 156, "code": "(fn maxi\n   ([value key]\n    (maxi value key {}))\n   ([value key dic]\n    (if (empty? key)\n      dic\n      (maxi value (rest key) (assoc dic (first key) value)))\n    )\n   )", "user": "5d4cf3e9e4b0776584bd6f38"}, {"problem": 156, "code": "(fn [dv v] (zipmap v (repeat dv)))", "user": "5d662fb5e4b0db5d338d15e1"}, {"problem": 156, "code": "#(reduce (fn [x y] (assoc x y %)) {} %2)", "user": "5d657de2e4b0db5d338d15da"}, {"problem": 156, "code": "#(reduce (fn [m, v] (assoc m v %1)) {} %2)", "user": "5d63f1c2e4b0c9e5857d502b"}, {"problem": 156, "code": "(fn [v coll] (reduce #(assoc %1 %2 v) {} coll))", "user": "5d65814be4b0db5d338d15db"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5d6552b5e4b0db5d338d15d2"}, {"problem": 156, "code": "(fn map-defaults [default keys]\n  (zipmap keys (repeat default)))", "user": "5d66aea7e4b0db5d338d15ec"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5cdd9167e4b05ee0cb31175e"}, {"problem": 156, "code": "(fn [val keys] (reduce #(assoc %1 %2 val) {} keys))", "user": "5d672bd7e4b0db5d338d15f1"}, {"problem": 156, "code": "#(reduce (fn [a b] (assoc a b %1)) {} %2)", "user": "58c71509e4b021aa9917ed6e"}, {"problem": 156, "code": "(fn rec [default key_seq]\n  (if (empty? key_seq)\n    {}\n    (assoc (rec default (rest key_seq)) (first key_seq) default)))", "user": "5d64013ce4b0c9e5857d502d"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "5d6a975be4b04d129b00f29b"}, {"problem": 156, "code": "(fn [inputVal inputKeyVec]\n   (loop [ keyVec inputKeyVec\n           resultMap {}]\n     (if (nil? keyVec)\n       (do\n         resultMap\n       )\n       (do\n         (recur (next keyVec) (assoc resultMap (first keyVec) inputVal))\n       )\n     )\n   )\n)", "user": "5cf7215ce4b0b71b1d808a67"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5d67c955e4b0db5d338d15f7"}, {"problem": 156, "code": "(fn map-defaults [default keys]\n  (zipmap keys (repeat default)))", "user": "5d6691cee4b0db5d338d15e9"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5d6d4463e4b04d129b00f2bd"}, {"problem": 156, "code": "(fn [v s] (reduce #(conj %1 [%2 v]) {} s))", "user": "5d6cead9e4b04d129b00f2b5"}, {"problem": 156, "code": "(fn default-val [default-value keys]\n  (reduce #(assoc %1 %2 default-value) {} keys))", "user": "5d68f5e6e4b0db5d338d1605"}, {"problem": 156, "code": "(fn [val seq] (reduce #(conj %1 {%2 val}) {} seq))", "user": "5d6d2172e4b04d129b00f2b9"}, {"problem": 156, "code": "(fn [d m] \n  (reduce \n   #(conj % {%2 d})\n   {} m)\n  )", "user": "5d6c2aace4b04d129b00f2ad"}, {"problem": 156, "code": "(fn [val keys]\n  (zipmap keys (repeat val)))", "user": "5d6e5b53e4b04d129b00f2c6"}, {"problem": 156, "code": "(fn mapper [x vec1] \n  (zipmap vec1 (repeat x)))", "user": "5d6d2e11e4b04d129b00f2ba"}, {"problem": 156, "code": "#(reduce \n   (fn [r n]\n     (assoc r n %1)  \n     ) {} %2\n   )", "user": "5d5b2678e4b06a698e928ee2"}, {"problem": 156, "code": "(fn [value coll] (reduce #(assoc %1 %2 value) {} coll))", "user": "57eb2576e4b0bfb2137f5b5c"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5d1b59abe4b02ea6f0fb697e"}, {"problem": 156, "code": "(fn [k  llist]\n      (zipmap llist (repeat (count llist) k) )\n      )", "user": "5d6d3182e4b04d129b00f2bb"}, {"problem": 156, "code": "(fn [default key-list] (apply merge (map #(hash-map % default) key-list)))", "user": "5d444819e4b07c84aa5ae69c"}, {"problem": 156, "code": "(fn [v kseq] \n  (reduce (fn [finalMap k] \n    (assoc finalMap k v)) {} kseq))", "user": "5d72ad8fe4b02e6b30c93512"}, {"problem": 156, "code": "(fn foo\n  [val keys]\n  (reduce (fn [m k]  (assoc m k val)) {} keys))", "user": "5d5950c1e4b02ba5928a6827"}, {"problem": 156, "code": "(fn [d ks]\n  (reduce\n   (fn [m k] (assoc m k d))\n   {}\n   ks))", "user": "5d1e19c4e4b02ea6f0fb69af"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5d71a245e4b02e6b30c9350a"}, {"problem": 156, "code": "#(reduce (fn [new-map ele] (assoc new-map ele %1)) {} %2)", "user": "5d67d80be4b0db5d338d15fa"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "59d8f23ae4b0ef0a1e9b5c49"}, {"problem": 156, "code": "#(into {} (for [k %2]\n   {k %1}))", "user": "5d68e60be4b0db5d338d1603"}, {"problem": 156, "code": "(fn [de se]\n  (->> se\n       (map (fn [a] [a de]))\n       (apply concat)\n       (apply hash-map)))", "user": "5d6febe6e4b04d129b00f2d5"}, {"problem": 156, "code": "(fn mapfiller [v ks]\n  (into {} (for [k ks] [k v])))", "user": "5d64ecb2e4b0c9e5857d5036"}, {"problem": 156, "code": "#(into {} (map (fn [x] [x %1]) %2))", "user": "5d764e52e4b02e6b30c93524"}, {"problem": 156, "code": "(fn [x y] (zipmap y (repeat x)))", "user": "5d7158f3e4b04d129b00f2e1"}, {"problem": 156, "code": "#(reduce merge (map hash-map %2 (repeat %1)))", "user": "5a7de7a3e4b03baeef927702"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "4ec549e1535d6d7199dd3691"}, {"problem": 156, "code": "(fn [default chave] (into {} (for [valor chave] {valor default})))", "user": "5d6b1d11e4b04d129b00f2a2"}, {"problem": 156, "code": "(fn [d l]\n  (reduce (fn [acc x] (assoc acc x d)) {} l))", "user": "5d4a6511e4b0776584bd6f21"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5d81eba4e4b0915913b1d37b"}, {"problem": 156, "code": "(fn [v ks]\n  (apply merge (map #(hash-map % v) ks))\n  )", "user": "5d81b40ce4b0915913b1d379"}, {"problem": 156, "code": "(fn [val keys] (zipmap keys (repeat val)))", "user": "5d824225e4b0915913b1d37f"}, {"problem": 156, "code": "(fn defm [defval mkeys] \n  (if (= mkeys ()) \n    {}\n    (let [rmkeys (rest mkeys) fmkey (first mkeys)]\n      (assoc (defm defval rmkeys) fmkey defval))))", "user": "5d81c244e4b0915913b1d37a"}, {"problem": 156, "code": "(fn [defVal vect] (into {} (map #(vector % defVal) vect)))", "user": "5d79165ae4b02e6b30c9353e"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5cc80598e4b0ccb061962840"}, {"problem": 156, "code": "(fn [default arr] (zipmap arr (repeat default)))", "user": "5d5e9f45e4b0c9e5857d4ff5"}, {"problem": 156, "code": "(fn [n m] (zipmap m (repeat n)))", "user": "5d6fae1ee4b04d129b00f2d4"}, {"problem": 156, "code": "(fn [x y]\n  (into {} (map (fn [xx yy] [xx yy]) y (repeat (count y) x)))\n )", "user": "5d62da51e4b0c9e5857d5020"}, {"problem": 156, "code": "(fn create-map [value keys]\n  (->>\n    (map (fn [k] (vector k value)) keys)\n    (into (sorted-map))))", "user": "5d80f328e4b0915913b1d372"}, {"problem": 156, "code": "(fn [d col] (reduce #(conj % [%2 d]) {} col))", "user": "54d187b7e4b0e8a36923e5e4"}, {"problem": 156, "code": "(fn [k m] (into {} (map #(hash-map % k) m)))", "user": "5d84fccae4b0915913b1d390"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5d68bfd0e4b0db5d338d1602"}, {"problem": 156, "code": "(fn [x coll]\n    (reduce (fn [l r] (into l [[r x]])) {} coll ))", "user": "5d887d27e4b0915913b1d3a8"}, {"problem": 156, "code": "(fn [value vect] (into {} (map (fn [k] [k value]) vect)))", "user": "5d88d820e4b0915913b1d3b1"}, {"problem": 156, "code": "(fn [v keys] (reduce (fn [m k] (assoc m k v)) {} keys))", "user": "5d8b4960e4b0915913b1d3d3"}, {"problem": 156, "code": "(fn [v coll]\n  ( let [mymap {}]\n    ( ->> coll\n      (map (fn[x]( assoc mymap x v )) )\n      (into {})\n     )\n    )  \n  )", "user": "5d8aad1ce4b0915913b1d3cd"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "5d323149e4b01671435dbce9"}, {"problem": 156, "code": "(fn map-default\n  ([value keys]\n   (map-default value keys {}))\n  ([value keys new-map]\n   (if (empty? keys)\n     new-map\n     (map-default value (rest keys) (conj new-map {(first keys) value})))))", "user": "5d896a64e4b0915913b1d3b8"}, {"problem": 156, "code": "(fn [value ks] (zipmap ks (repeat value)))", "user": "5d84f5e6e4b0915913b1d38f"}, {"problem": 156, "code": "(fn [x y] \n  (apply merge\n       (map (fn [z] {z x}) y)))", "user": "5d7a748ce4b02e6b30c93547"}, {"problem": 156, "code": "(fn [default ks]\n   (->> ks\n        (map #(hash-map % default))\n        (into {})))", "user": "5d4b2155e4b0776584bd6f28"}, {"problem": 156, "code": "(fn [defval init-keys]\n  (loop [res {}, key init-keys]\n    (if (empty? key)\n      res\n      (recur \n        (assoc res (first key) defval)\n        (rest key))\n      )))", "user": "5d8c7424e4b0915913b1d3df"}, {"problem": 156, "code": "(fn\n  [defaultValue keyList]\n  (loop [i 0 sum {}]\n    (if (< i (count keyList))\n      (recur (inc i)  (into sum {(nth keyList i) defaultValue}) )\n      sum)))", "user": "5d8b3d5be4b0915913b1d3d1"}, {"problem": 156, "code": "(fn [default keys-to-use]\n  (reduce\n   (fn [new-map [k v]]\n     (assoc new-map k v))\n   {}\n   (map vector keys-to-use (repeat default))))", "user": "5d90190ce4b0915913b1d3f7"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "570d4c30e4b0b0fb43fd06da"}, {"problem": 156, "code": "(fn\n\t[valor coll]\n\t(reduce into {}\n\t\t\t\t\t(map (fn [key] (hash-map key valor)) coll)))", "user": "5d797deee4b02e6b30c93541"}, {"problem": 156, "code": "(fn [default coll]\n  (into {} (for [x coll] {x default})))", "user": "594fdfdce4b066ee0a44ae85"}, {"problem": 156, "code": "(fn [arg seq]\n   (reduce #(assoc %1 %2 arg) {} seq)\n   )", "user": "5d94a878e4b0d3f9b434ad29"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5d9c1226e4b0d3f9b434ad51"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5bcdb877e4b0e9689409ee02"}, {"problem": 156, "code": "(fn [default-value keys]\n  (zipmap keys (repeat default-value)))", "user": "5d9c8a85e4b0eb781811cdad"}, {"problem": 156, "code": "(fn [default keys]\n  (zipmap keys (repeat default)))", "user": "5d07e362e4b0cc9c915881ff"}, {"problem": 156, "code": "(fn [value vect]\n  (zipmap vect (repeat value))\n  )", "user": "53ecaf1ce4b0d648e757f4b4"}, {"problem": 156, "code": "(fn [v qeys] (reduce #( assoc %1 %2 v ) {} qeys) )", "user": "5d9e7971e4b000c986472bc1"}, {"problem": 156, "code": "(fn [val keys] (zipmap keys (repeat val)))", "user": "5cf6522be4b0b71b1d808a58"}, {"problem": 156, "code": "(fn [df se]  (zipmap se (repeat (count se) df)))", "user": "5c337305e4b0d62ef62d9f48"}, {"problem": 156, "code": "(fn [d m] (last (let [result (atom {})] (for [k m] (swap! result assoc k d)))))", "user": "5d974b1de4b0d3f9b434ad36"}, {"problem": 156, "code": "(fn [v coll] (reduce #(assoc %1 %2 v) {} coll))", "user": "5ccf125ce4b0ccb0619628c0"}, {"problem": 156, "code": "#(into {} (for [x %2] {x %1}))", "user": "5d99dc47e4b0d3f9b434ad42"}, {"problem": 156, "code": "(fn [default coll]\n   (loop [nc {}\n          remc coll]\n     (if-not (first remc) \n       nc\n       (recur (assoc nc (first remc) default) (rest remc))  \n     ))\n   )", "user": "5da07698e4b000c986472bd3"}, {"problem": 156, "code": "(fn [defaultValue list1]\n  (reduce #( assoc %1 %2 defaultValue ) {} list1)\n  \n  )", "user": "5da20e73e4b000c986472be1"}, {"problem": 156, "code": "(fn [default-value mapping-keys]\n       (letfn [(mapping-default\n               [innter-default-value inner-mapping-keys]\n               (if (not (= (count inner-mapping-keys) 0))\n                 (assoc\n                   (mapping-default innter-default-value (rest inner-mapping-keys))\n                   (first inner-mapping-keys)\n                   innter-default-value)))]\n         (mapping-default default-value mapping-keys)))", "user": "5da07d10e4b000c986472bd5"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "4edd038c535d10e5ff6f5327"}, {"problem": 156, "code": "(fn [x set] (into (hash-map) (map #(vector %1 x) set)))", "user": "5d931a58e4b0d3f9b434ad10"}, {"problem": 156, "code": "#(reduce (fn [acc v] (assoc acc v %1)) {} %2)", "user": "58ac0612e4b0005cfeb1a73c"}, {"problem": 156, "code": "(fn [v coll] (reduce (fn [m k] (assoc m k v)) {} coll))", "user": "5da975b9e4b000c986472c32"}, {"problem": 156, "code": "(fn [x col]\n  (->> col \n       ;(map #(assoc {} % x)) (apply merge)\n       ;(map #(conj {} [% x])) (apply merge)\n       ;(reduce #(assoc %1 %2 x) {})\n       (reduce #(conj %1 [%2 x]) {})\n   )\n  )", "user": "56d5c1b0e4b0ea9b8538f7c3"}, {"problem": 156, "code": "(fn [default coll] (reduce #(conj %1 {%2 default}) {} coll))", "user": "5da8b8ece4b000c986472c28"}, {"problem": 156, "code": "(fn[n coll] (->> coll\n      (map #(hash-map % n))\n      (into {})))", "user": "5da76a58e4b000c986472c1b"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5da760ebe4b000c986472c1a"}, {"problem": 156, "code": "(fn [def-value def-keys]\n  (reduce (fn [def-map def-key] (assoc def-map def-key def-value)) {} def-keys))", "user": "5da9662ce4b000c986472c30"}, {"problem": 156, "code": "#(reduce (fn [x y] (conj x {y %1}) )  {} %2)", "user": "5da98129e4b000c986472c33"}, {"problem": 156, "code": "(fn www[x coll](let [a (fn b[coll x ret](cond\n                                       (empty? coll) (apply assoc(cons {}(reverse ret)))\n                                       :else (b (rest coll) x (conj (conj ret x)(first coll)))))]\n              (a coll x [])))", "user": "5dadf73ee4b0f8c104ccfc86"}, {"problem": 156, "code": "(fn [v k] (apply hash-map(interleave\n         k(repeat (count k) v))))", "user": "5dab11cde4b000c986472c45"}, {"problem": 156, "code": "(fn [v ks] (apply hash-map (interleave ks (repeat v))))", "user": "5ac67b47e4b0e27600da776e"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5d7aa22ee4b02e6b30c9354e"}, {"problem": 156, "code": "(fn [v klist] (reduce (fn [mp key] (assoc mp key v)) {} klist))", "user": "5da94ccfe4b000c986472c2f"}, {"problem": 156, "code": "(fn [default-value ks]\n  (apply\n   hash-map\n   (interleave\n    ks\n    (repeat default-value))))", "user": "56403765e4b08d4f616f5edc"}, {"problem": 156, "code": "(fn [x coll] (zipmap coll (repeat x)) )", "user": "5db1e863e4b010eb3c36cd0d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5db68091e4b010eb3c36cd3a"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %)))", "user": "5d51884be4b0776584bd6f61"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5d94fdf9e4b0d3f9b434ad2b"}, {"problem": 156, "code": "#(into {} (into [] (map (fn [x] (into [] (concat [x] [%1]))) %2)))", "user": "5b044436e4b0cc2b61a3bd71"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5da9d89ae4b000c986472c3b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "58c7a80fe4b021aa9917ed7b"}, {"problem": 156, "code": "#(into {} (for [k %2] {k %1}))", "user": "5d7d17ece4b02e6b30c93558"}, {"problem": 156, "code": "(fn[default custom_ip]\n  (reduce (fn[key_val custom_ip]\n          (assoc key_val custom_ip default))\n          {}\n          custom_ip)\n  )", "user": "5d8c8175e4b0915913b1d3e1"}, {"problem": 156, "code": "(fn[d k](apply merge(for [x k] (hash-map x d))))", "user": "5d60ea3ae4b0c9e5857d500a"}, {"problem": 156, "code": "(fn [x coll]\n  (into {}\n  \t(for [y coll]\n    \t[y x])))", "user": "5db19599e4b010eb3c36cd05"}, {"problem": 156, "code": "(fn [default keys] (zipmap keys (take (count keys) (repeat default))))", "user": "5dbf6016e4b0e59a23173d79"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5db1969be4b010eb3c36cd06"}, {"problem": 156, "code": "(fn [defaultValue keys] (zipmap keys (repeat  defaultValue) ))", "user": "5db70407e4b010eb3c36cd3e"}, {"problem": 156, "code": "(fn [default key-coll]\n  (apply hash-map (interleave key-coll (repeat default))))", "user": "5dc02058e4b0e59a23173d7c"}, {"problem": 156, "code": "(fn [default coll] (reduce #(assoc %1 %2 default) {} coll))", "user": "5daa0d56e4b000c986472c3c"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "53d63e6ce4b0e771c3025454"}, {"problem": 156, "code": "(fn [k l]\n  (into {} (map #(hash-map % k) l)))", "user": "5db1e852e4b010eb3c36cd0a"}, {"problem": 156, "code": "(fn my-m\n  [x v]\n  (into {} (map #(hash-map % x) v)))", "user": "5db5f16ce4b010eb3c36cd34"}, {"problem": 156, "code": "(fn [valx keyx]\n  (loop [result {}\n         keyz keyx]\n    (if (empty? keyz)\n      result\n      (recur\n       (assoc result (first keyz) valx)\n       (rest keyz))\n      )\n    )\n  )", "user": "5db9a6c3e4b010eb3c36cd56"}, {"problem": 156, "code": "(fn [default collection]\n  (zipmap collection (repeat (count collection) default)))", "user": "5dba063ee4b010eb3c36cd5c"}, {"problem": 156, "code": "#(reduce (fn [acc,item] (assoc acc item %1)) {} %2)", "user": "5dc12b0ae4b0e59a23173d84"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "4e7650c5535d324fb2983d68"}, {"problem": 156, "code": "(fn [default ks]\n  (reduce (fn [acc key] (into acc {key default})) {} ks))", "user": "5d9e8e40e4b000c986472bc2"}, {"problem": 156, "code": "(fn [a coll] (into {} (map (fn [x] [x a]) coll)))", "user": "5dbe27c3e4b09f47823971c4"}, {"problem": 156, "code": "(fn [v coll]\n  (reduce merge (map #(hash-map % v) coll)))", "user": "5db6cc4ae4b010eb3c36cd3b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "57f17cb5e4b0bfb2137f5c0b"}, {"problem": 156, "code": "(fn [d c] (into {} (map #(vector % d) c)))", "user": "5dc72a9ce4b02f9375f4e1cd"}, {"problem": 156, "code": "(fn [default keys] (reduce (fn [map key] (into map {key default})) {} keys))", "user": "5db92996e4b010eb3c36cd50"}, {"problem": 156, "code": "(fn [default list] (apply hash-map (apply concat (map (fn [x] [x default]) list))))", "user": "5d84545ee4b0915913b1d38b"}, {"problem": 156, "code": "(fn [default key_coll]\n  (apply assoc {}\n         (interleave key_coll\n                      (repeat default))))", "user": "5db5d09be4b010eb3c36cd31"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5dca5e0ae4b02b31cc3da3af"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5dc98501e4b02f9375f4e1e6"}, {"problem": 156, "code": "(fn [default keys] (zipmap keys (repeat default)))", "user": "5dc318cde4b02f700ae81835"}, {"problem": 156, "code": "(fn [v keys]\n  (into {} (for [k keys] [k v])))", "user": "5dcbe0dbe4b02b31cc3da3be"}, {"problem": 156, "code": "(fn [v ks] (reduce #(assoc %1 %2 v) {} ks))", "user": "5dc9d5c3e4b03836ba07d824"}, {"problem": 156, "code": "#(loop [vec %2 val %1 new-map {}]\n       (if (empty? vec)\n         new-map\n         (recur (rest vec) val (assoc new-map (first vec) val))))", "user": "5dcb1e73e4b02b31cc3da3b6"}, {"problem": 156, "code": "(fn [default ks]\n  (into {} (map #(vector % default) ks)))", "user": "5dcc152ae4b02b31cc3da3c3"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "5dc9ccf8e4b02f9375f4e1f1"}, {"problem": 156, "code": "(fn [d coll]\n  (into {} (map (fn [x] [x d]) coll)))", "user": "5da306a3e4b000c986472be7"}, {"problem": 156, "code": "#(->> (repeat %1) (interleave %2) (apply hash-map))", "user": "5da8fa72e4b000c986472c2d"}, {"problem": 156, "code": "(fn [dv ks]\n  (into {} (map (fn [k] [k dv]) ks)))", "user": "5afca248e4b0cc2b61a3bd12"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %)))", "user": "567be591e4b05957ce8c61ab"}, {"problem": 156, "code": "#(zipmap %2 (iterate (constantly %)  %))", "user": "5dbb5200e4b09f47823971a9"}, {"problem": 156, "code": "(fn [v coll]\n(reduce #(assoc %1 %2 v) {} coll))", "user": "5dd1fb19e4b0948ae9d9ad51"}, {"problem": 156, "code": "(fn [d coll] (apply array-map (mapcat (fn [x] [x d]) coll)))", "user": "5d9c9446e4b0eb781811cdae"}, {"problem": 156, "code": "(fn [v ks] (reduce merge nil (for [k ks] {k v})))", "user": "5dce0151e4b0b296f82db5b5"}, {"problem": 156, "code": "(fn map-default [val keys]\n  (zipmap keys (repeat val))\n)", "user": "5d4bd9a7e4b0776584bd6f2a"}, {"problem": 156, "code": "(fn [value, keyz]\n  (reduce #(assoc %1 %2 value) {} keyz))", "user": "5dc9d4ede4b03836ba07d823"}, {"problem": 156, "code": ";(fn [x y] (loop [n 0 result {}] (if (= n (count y)) result (recur (inc n) (merge result {(nth y n) x})))))\n#(zipmap %2 (repeat %))", "user": "5dc53ddee4b02f9375f4e1bd"}, {"problem": 156, "code": "(fn f156\n  [dv kys]\n  (loop [ks kys\n         mp {}]\n    (if (empty? ks)\n      mp\n      (recur (rest ks) (assoc mp (first ks) dv)))))", "user": "5bd75870e4b0ed4b8aab4bc0"}, {"problem": 156, "code": "(fn\n  [x y]\n  (reduce\n    #(assoc %1 %2 x)\n    {} y))", "user": "5da8e170e4b000c986472c29"}, {"problem": 156, "code": "(fn [default col] (into {} (map #(vector % default) col)))", "user": "5793931ee4b0e215f87e845c"}, {"problem": 156, "code": "(fn [x xs]\n  (->> (repeat x)\n       (interleave xs)\n       (into [])\n       (apply hash-map)\n        ))", "user": "5dd52ca6e4b0948ae9d9ad75"}, {"problem": 156, "code": "(fn [dfx mykeys] (zipmap mykeys (repeat (count mykeys) dfx)))", "user": "5dd70ee3e4b0948ae9d9ad85"}, {"problem": 156, "code": "(fn build-map [default keys]\n  (loop [[head & tail] keys\n         res {}]\n    (if (empty? tail)\n      (assoc res head default)\n      (recur tail (assoc res head default))\n      )\n    )\n  )", "user": "5dd67c22e4b0948ae9d9ad80"}, {"problem": 156, "code": "(fn [v ks]\n  (loop [res {} kss ks]\n    (if (empty? kss)\n      (identity res)\n      (recur (conj res [(first kss) v]) (rest kss)))))", "user": "5ddb6151e4b0948ae9d9adb0"}, {"problem": 156, "code": "(fn [d k] (zipmap k (repeat d)))", "user": "5dde0b71e4b0948ae9d9add0"}, {"problem": 156, "code": "(fn [default keys] (zipmap keys (repeat default)))", "user": "5ddd7359e4b0948ae9d9adc5"}, {"problem": 156, "code": "(fn [val coll]\n  (let [val (into [] (take (count coll) (repeat val)))]\n    (zipmap coll val)))", "user": "5dd7dec1e4b0948ae9d9ad8d"}, {"problem": 156, "code": "( fn [val keys] (zipmap keys (repeat val)) )", "user": "5dd53859e4b0948ae9d9ad76"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5ddd134ae4b0948ae9d9adc0"}, {"problem": 156, "code": "#( into {} (map vector %2 (repeat %1) ))", "user": "5ddbd202e4b0948ae9d9adb4"}, {"problem": 156, "code": "(fn [defval init-keys]\n  (loop [res {}, key init-keys]\n    (if (empty? key)\n      res\n      (recur \n        (assoc res (first key) defval)\n        (rest key))\n      )))", "user": "5de4f858e4b0948ae9d9ae09"}, {"problem": 156, "code": "(fn [d keys] (apply hash-map (interleave keys (repeat d))))", "user": "5de53245e4b0948ae9d9ae11"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5de65feee4b0986d99407f68"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (repeat v)))", "user": "5da5a1eee4b000c986472c04"}, {"problem": 156, "code": "(fn [v coll]\n  \t(reduce #(assoc %1 %2 v) {} coll)\n  )", "user": "5de6484ce4b0986d99407f66"}, {"problem": 156, "code": "(fn [x y] (apply hash-map (interleave y (repeat x))))", "user": "5dcc65b7e4b02b31cc3da3c9"}, {"problem": 156, "code": "(fn [d v] (into {} (map #(assoc {} % d) v)))", "user": "5dcd7933e4b0b296f82db5ae"}, {"problem": 156, "code": "(fn [default key-list]\n  (reduce (fn\n            [new-map key]\n          \t(assoc new-map key default)\n           )\n          {}\n          key-list\n  )\n)", "user": "5dd25ca8e4b0948ae9d9ad55"}, {"problem": 156, "code": "(fn [val sequence]\n  (reduce #(conj %1 {%2 val})\n              {} sequence\n              ))", "user": "54be7c0de4b0ed20f4ff6eec"}, {"problem": 156, "code": "(fn map-with-default-val [val keys]\n  (into {} (map (fn [k] [k val]) keys)))", "user": "5decd4fde4b093ff7172757b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5ddfd88be4b0948ae9d9ade1"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (repeat v)))", "user": "5db7376fe4b010eb3c36cd43"}, {"problem": 156, "code": "(fn [v ks]\n  (loop [m {}\n         ks ks]\n    (if (seq ks)\n      (recur (assoc m (first ks) v) (rest ks))\n      m)))", "user": "5d236215e4b02ea6f0fb6a09"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5d5e2efee4b0c9e5857d4ff0"}, {"problem": 156, "code": "(fn [v ks]\n  (reduce (fn [acc k] \n            (assoc acc k v)) \n          {} \n          ks))", "user": "5bacef6fe4b0a20761a234a1"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5df175bce4b03c219ef1a34d"}, {"problem": 156, "code": "(fn [def-v col]\n   (into {} (for [e col]\n              [e def-v])))", "user": "5d7670c4e4b02e6b30c93525"}, {"problem": 156, "code": "(fn [default-value seq] (into {} (map (fn [key] (hash-map key default-value)) seq)))", "user": "5deeb6fde4b093ff7172759f"}, {"problem": 156, "code": ";;one stragegy involves inserting the first arg after each member of the vector\n;;another might be recursively constructing the hash map\n\n;;map key val\n#(loop [def-val %1\n        my-seq %2\n        my-map {}]\n     (if (empty? my-seq)\n      my-map\n      (recur def-val (rest my-seq) (assoc my-map (first my-seq) def-val))\n   ))", "user": "5de8648de4b0986d99407f7c"}, {"problem": 156, "code": "(fn [val coll]\n  (let [val (into [] (take (count coll) (repeat val)))]\n    (zipmap coll val)))", "user": "5df79420e4b0a607a9a45c9a"}, {"problem": 156, "code": "(fn [defval init-keys]\n  (loop [res {}, key init-keys]\n    (if (empty? key)\n      res\n      (recur \n        (assoc res (first key) defval)\n        (rest key)))))", "user": "5ca4dc25e4b048ec896c5bc1"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5dddc292e4b0948ae9d9adcb"}, {"problem": 156, "code": "(fn [x y]\n  (zipmap\n    y\n    (repeat (count y) x)))", "user": "57fc5e42e4b0d3187e900997"}, {"problem": 156, "code": "(fn [a col]\n  (loop [n 0 maps {}]\n    (if (< n (count col))\n      (recur (inc n) (assoc maps (nth col n) a))\n      maps)))", "user": "5db658ebe4b010eb3c36cd39"}, {"problem": 156, "code": "(fn [val keys] (let [vals (repeat (count keys) val)] (zipmap keys vals )))", "user": "4f24c859e4b0d66497709fef"}, {"problem": 156, "code": "(fn [val keys] (reduce merge (map #(hash-map % val) keys)))", "user": "5dfb2e2ae4b0a607a9a45cd6"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5dfc457de4b0a607a9a45cea"}, {"problem": 156, "code": "(fn [def1 seq1] (reduce (fn [xs x] (into xs {x def1})) {} seq1))", "user": "5df0c6ffe4b093ff717275c2"}, {"problem": 156, "code": "(fn [default-value seq-of-keys]\n  (apply hash-map (interleave seq-of-keys (repeat default-value))))", "user": "5d6eaa58e4b04d129b00f2cd"}, {"problem": 156, "code": "(fn mapped-by-default\n  [default keys]\n  (reduce (fn [acc key]\n            (assoc acc key default)) {} keys))", "user": "5df0f338e4b093ff717275c6"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5dfb20b8e4b0a607a9a45cd3"}, {"problem": 156, "code": "(fn [n coll] (apply assoc {} (interleave coll (repeat n)) ))", "user": "5dfa1c67e4b0a607a9a45cc5"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "5df6c8b8e4b0a607a9a45c87"}, {"problem": 156, "code": "(fn [dv ks] (reduce (fn [acc k] (assoc acc k dv)) {} ks))", "user": "5e032281e4b0a607a9a45d54"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5e03a15be4b0a607a9a45d5e"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5bf0b940e4b0a6d31fed215c"}, {"problem": 156, "code": "(fn [d k]\n  (zipmap k (repeat d))\n  )", "user": "5e08c3dde4b0978307768fc8"}, {"problem": 156, "code": "(fn [defval init-keys]\n  (loop [res {}, key init-keys]\n    (if (empty? key)\n      res\n      (recur \n        (assoc res (first key) defval)\n        (rest key))\n      )))", "user": "597b72ede4b02382a38ad1f9"}, {"problem": 156, "code": "(fn [value keys]\n  (loop [keys keys res {}]\n    (if (empty? keys)\n      \tres\n      \t(recur (rest keys) (assoc res (first keys) value))\n      )\n \t)\n)", "user": "5e09fd26e4b099d064962f60"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5dd3383be4b0948ae9d9ad5e"}, {"problem": 156, "code": "#(reduce (fn reducer [x y] (assoc x y %)) {} %2)", "user": "5e0ad590e4b099d064962f6e"}, {"problem": 156, "code": "(fn [d xs] (->> (map (fn [x] {x d}) xs) (into {})))", "user": "5d91acb8e4b0915913b1d406"}, {"problem": 156, "code": "(fn [d c]\n\t(reduce #(conj %1 {%2 d}) {} c))", "user": "5e066185e4b0978307768fa4"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5e00b6e7e4b0a607a9a45d2b"}, {"problem": 156, "code": "(fn [default keys] (zipmap keys (repeat default)))", "user": "5df79c31e4b0a607a9a45c9b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5e0a6916e4b099d064962f65"}, {"problem": 156, "code": "(fn [default coll]\n  (let [result (for [item coll]\n                 (conj [item] default))]\n    (into (hash-map) (vec result))))", "user": "5b13763be4b0cc2b61a3be4f"}, {"problem": 156, "code": "(fn [k sq]\n  (reduce \n   (fn [m i]\n     (assoc m i k)) {} sq))", "user": "5e0ceca5e4b099d064962f91"}, {"problem": 156, "code": "(fn [a b] (reduce #(conj %1 {%2 a}) {} b))", "user": "5e0d1947e4b099d064962f92"}, {"problem": 156, "code": "(fn [value vec] (reduce #(conj %1 {%2 value} ) {} vec ))", "user": "5e0e836fe4b099d064962fa8"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5dd60c58e4b0948ae9d9ad7c"}, {"problem": 156, "code": "(fn [el coll] \n  (reduce #(assoc %1 %2 el) {} coll)\n  )", "user": "5df75fd8e4b0a607a9a45c92"}, {"problem": 156, "code": "(fn [value m] (zipmap m (repeat (count m) value)))", "user": "58f3c18ee4b0438e51c2cead"}, {"problem": 156, "code": "(fn [v coll] (reduce #(assoc %1 %2 v) {} coll))", "user": "5e14d842e4b0a047bd49f6f5"}, {"problem": 156, "code": "(fn map-shtuff [value collection]\n(zipmap collection (into [] (take (count collection) (repeat value))))\n)", "user": "5dcc651de4b02b31cc3da3c8"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "57023e92e4b08d47c97781da"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5e148d94e4b0a047bd49f6ed"}, {"problem": 156, "code": "#(into {} (map (fn [k] (vector k %1)) %2))", "user": "5e144bd5e4b0a047bd49f6e7"}, {"problem": 156, "code": "(fn [val arr] (reduce #(assoc %1 %2 val) {} arr))", "user": "5e0596d5e4b0a607a9a45d7d"}, {"problem": 156, "code": ";(fn [d coll]  \n;  (reduce \n;   (fn [acc x] (assoc acc x d)) {} coll))\n\n(fn [d coll] (zipmap coll (repeat d)))", "user": "5e18bd30e4b0dc95940084fa"}, {"problem": 156, "code": "#(into {} (for [x %2] {x %}))", "user": "5e121a89e4b099d064962fe4"}, {"problem": 156, "code": "(fn\n  [deflt seq]\n  (reduce\n    (fn\n      [ acc item]\n      (assoc acc item deflt))\n      {}\n      seq\n      ))", "user": "5e16006be4b0a047bd49f711"}, {"problem": 156, "code": "(fn [valor chaves]\n  (loop [ch chaves\n         v valor\n         mapa {}]\n    (if (seq ch)\n      (recur (rest ch) v (assoc mapa (first ch) v))\n      mapa)))", "user": "58a0ac0de4b02bd94d917e9c"}, {"problem": 156, "code": "(fn \n  [defVal in] \n  (into \n   {} \n   (map \n    (fn \n      [keyVal]\n      (hash-map keyVal defVal)\n    )\n    (seq in)\n    )\n  )\n)", "user": "5e1b0140e4b0dc959400851c"}, {"problem": 156, "code": "(fn [default s]\n(zipmap s (repeat default)))", "user": "5e189cc8e4b0dc95940084f7"}, {"problem": 156, "code": "(fn maps [value keys-given]\n  (if (empty? keys-given)\n    {}\n    (assoc (maps value (rest keys-given)) (first keys-given) value)))", "user": "5e18c885e4b0dc95940084fc"}, {"problem": 156, "code": "(fn [x y]\n  (zipmap y (repeat x)))", "user": "5e07cf97e4b0978307768fb9"}, {"problem": 156, "code": "(fn[a l](into (sorted-map) (map #(hash-map % a) l)))", "user": "5e1ec8c0e4b0dc9594008561"}, {"problem": 156, "code": "(fn [v m] (reduce (fn [acc el] (assoc acc el v)) {} m))", "user": "5dfbe0eae4b0a607a9a45ce2"}, {"problem": 156, "code": "#(reduce (fn [acc el] (assoc acc el %1 ) ) {} %2)", "user": "5e1a3989e4b0dc9594008511"}, {"problem": 156, "code": "(fn [d keys]\n   (into {} (map #(vector % d) keys)))", "user": "5db35f85e4b010eb3c36cd22"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %)))", "user": "5e23d513e4b05b4b01516145"}, {"problem": 156, "code": "#(apply conj {} (for [i %2] [i %]))", "user": "5e2549c8e4b05b4b0151615f"}, {"problem": 156, "code": "(fn [v coll]\n  (into {} (for [x coll] [x v])))", "user": "5e22e4c5e4b05b4b01516137"}, {"problem": 156, "code": "(fn [default-val coll]\n  (zipmap coll (repeat default-val)))", "user": "54b17a49e4b09f271ff37d1e"}, {"problem": 156, "code": "(fn [x y] (reduce conj (map #(conj {} (hash-map % x)) y)))", "user": "5e27a4e1e4b05b4b0151618e"}, {"problem": 156, "code": "(fn [val keycoll] (into {} (for [x keycoll] {x val})))", "user": "5e257a33e4b05b4b01516166"}, {"problem": 156, "code": "(fn default-map [v ks]\n  (into {} (map #(vector % v) ks)))", "user": "5e0d948fe4b099d064962f98"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5e054752e4b0a607a9a45d78"}, {"problem": 156, "code": "(fn [val keys] (reduce #(assoc %1 %2 val) {} keys))", "user": "5d47fa13e4b07c84aa5ae6b6"}, {"problem": 156, "code": "(fn [default keys] (zipmap keys (repeat default)))", "user": "5e228b5ae4b05b4b01516134"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "59e61279e4b08badc2a0c563"}, {"problem": 156, "code": "(fn [x ks] (into {} (map (fn [k v] [k v]) ks (repeat x))))", "user": "4f43b992e4b0d7d3c9f3fd2c"}, {"problem": 156, "code": "(fn [x xs] (reduce (fn [as a] (conj as {a x})) {} xs))", "user": "5e1754abe4b00200644e3d53"}, {"problem": 156, "code": "(fn[d coll] (reduce #(into %1 {%2 d}) {} coll))", "user": "5e29cb4ce4b05b4b015161ae"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5da4fc6be4b000c986472bff"}, {"problem": 156, "code": "(fn [def-v key-list] (zipmap key-list (repeat def-v)))", "user": "5e2ead6ae4b05b4b015161f5"}, {"problem": 156, "code": "(fn [d c] \n  (apply hash-map\n      (mapcat #( vector %1 d ) c)))", "user": "5bfc50ece4b0bdcf453d15ea"}, {"problem": 156, "code": "(fn [default coll]\n  (reduce (fn [m k] (assoc m k default)) {} coll))", "user": "5e357507e4b0650de70e2b2a"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "5e36ca7de4b0650de70e2b3c"}, {"problem": 156, "code": "#(into {} (for [x %2] {x %1}))", "user": "586f1aa7e4b01531a375e9ba"}, {"problem": 156, "code": "(fn [df keys]\n  (into {}  (map (fn [k] [k df]) keys  )))", "user": "5d89427ae4b0915913b1d3b5"}, {"problem": 156, "code": "(fn make-map [d-val key-seq] (loop [i key-seq result {}]\n                               (if (= (count i) 0)\n                                 result\n                                 (recur (drop 1 i) (assoc result (first i) d-val)))))", "user": "5e380e72e4b01d43a70e8db0"}, {"problem": 156, "code": "(fn [v ks]\n  (zipmap ks (repeat v)))", "user": "5a6b2995e4b0512ff01cda37"}, {"problem": 156, "code": "(fn mapify [x y]\n  (if (empty? y)\n    ()\n    ; not empty\n    (conj {(first y) x} (mapify x (rest y)))\n    )\n)", "user": "5e38b324e4b01d43a70e8dc3"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5e348945e4b0650de70e2b1d"}, {"problem": 156, "code": "(fn [defval s] (reduce #(assoc %1 %2 defval) {} s))", "user": "5e246f92e4b05b4b01516150"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5e3933c5e4b01d43a70e8dcc"}, {"problem": 156, "code": "(fn [df keys]\n  (apply hash-map (interleave keys (take (count keys) (repeat df)))))", "user": "5e394c33e4b01d43a70e8dd1"}, {"problem": 156, "code": "(fn [val keys] (reduce #(assoc %1 %2 val) {} keys))", "user": "595fe3f6e4b066ee0a44b073"}, {"problem": 156, "code": "(fn [default keys] (zipmap keys (repeat default)))", "user": "5e3d183fe4b01d43a70e8e11"}, {"problem": 156, "code": "(fn [val keys] (apply (partial assoc {}) (interleave keys (repeat val))))", "user": "5e3e23d9e4b01d43a70e8e20"}, {"problem": 156, "code": "(fn f\n   [d keys]\n   (into {} (map #(hash-map % d) keys)))", "user": "5e3ef7d4e4b01d43a70e8e2d"}, {"problem": 156, "code": "(fn \n  [value collection]\n  (zipmap collection (repeat value) ) )", "user": "5e381434e4b01d43a70e8db4"}, {"problem": 156, "code": "(fn [default keys]\n (zipmap keys (repeat default)))", "user": "5d078e2de4b0cc9c915881fa"}, {"problem": 156, "code": "(fn [v ks] (apply merge (map (fn [k] {k v}) ks)))", "user": "5e41a67be4b01d43a70e8e56"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5e3302ece4b0650de70e2b02"}, {"problem": 156, "code": "(fn [val arr]\n  (reduce #(conj %1 {%2 val}) {} arr))", "user": "5e2586afe4b05b4b01516167"}, {"problem": 156, "code": "(fn [v ks] (reduce #(conj %1 {%2 v}) {} ks))", "user": "5cf72682e4b0b71b1d808a68"}, {"problem": 156, "code": "(fn \n  [default-value keys]\n  (reduce #(assoc %1 %2 default-value) (hash-map) keys))", "user": "5e47e1eee4b043cd24807a35"}, {"problem": 156, "code": "(fn [default list]\n              (->> list\n                   (map #(vector % default))\n                   (into {})\n                   )\n              )", "user": "5e491182e4b043cd24807a46"}, {"problem": 156, "code": "(fn [default coll] \n  (into {} \n        (map #(vec (list % default)) coll)))", "user": "5e4471e1e4b01d43a70e8e85"}, {"problem": 156, "code": "(fn\n  [default key-coll]\n  (into {} (map #(vector % default) key-coll)))", "user": "5b26a74ee4b063e2438bcc37"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5e42b688e4b01d43a70e8e6b"}, {"problem": 156, "code": "(fn build-default-map [x xs]\n  (zipmap xs (repeat x)))", "user": "5e3e0b3fe4b01d43a70e8e1e"}, {"problem": 156, "code": "(fn [a b] \n  (reduce #(assoc %1 %2 a) {} b)\n  )", "user": "5e284f94e4b05b4b01516196"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5e41b679e4b01d43a70e8e58"}, {"problem": 156, "code": "(fn buildMap [d col]\n   (reduce #(assoc %1 %2 d) {} col)  \n)", "user": "5e42ba49e4b01d43a70e8e6c"}, {"problem": 156, "code": "(fn [default keyz] (reduce #(assoc %1 %2 default) {} keyz))", "user": "5d6a9b96e4b04d129b00f29d"}, {"problem": 156, "code": "(fn [value seq]\n  (reduce\n   (fn [mymap mykey]\n     (conj mymap {mykey value}))\n   {}\n   seq))", "user": "5d25578de4b02ea6f0fb6a33"}, {"problem": 156, "code": "(fn [x seq]\n  (zipmap seq (repeat x)))", "user": "5c3796b3e4b0d62ef62d9f77"}, {"problem": 156, "code": "#(reduce (fn [acc, x] (conj acc {x %1})) {} %2)", "user": "5e486cb0e4b043cd24807a3e"}, {"problem": 156, "code": "(fn [a xs]\n  (apply hash-map (interleave xs (repeat a))))", "user": "505223fae4b0a561d07d8f17"}, {"problem": 156, "code": "(fn [dval vkeys]\n  (loop [result {} vec vkeys]\n    (if (empty? vec)\n      result\n      (recur (assoc result (first vec) dval) (rest vec)))))", "user": "5e12327ee4b099d064962fe5"}, {"problem": 156, "code": "(fn [value map1] \n (reduce (fn [map2 k](assoc map2 k value)) {} map1))", "user": "5e4ba8e8e4b0889a8790a55a"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5ddd6cfae4b0948ae9d9adc4"}, {"problem": 156, "code": "(fn [v coll]\n  (into {} (for [x coll] {x v})))", "user": "5e52f245e4b027a2e10ac0e1"}, {"problem": 156, "code": "(fn [v col] (zipmap col (map (fn [v1] v) col)))", "user": "5de8f7cee4b0986d99407f82"}, {"problem": 156, "code": "(fn [default keys] (into {} (for [k keys] {k default})))", "user": "5e546e20e4b027a2e10ac0eb"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5e4fe215e4b027a2e10ac0ba"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5e40491ae4b01d43a70e8e43"}, {"problem": 156, "code": "(fn [default_value key_array]\n  (reduce (fn [new-map key] (assoc new-map key default_value)) {} key_array))", "user": "5e595637e4b027a2e10ac10e"}, {"problem": 156, "code": "(fn [val col]\n            (reduce (fn [result x]\n                      (conj result [x val]))\n                    {} col))", "user": "5e1c3e6ee4b0dc9594008530"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5d83b9aae4b0915913b1d386"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5e5b8d92e4b0fd0acd158658"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %1)))", "user": "5e48ec09e4b043cd24807a45"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5e5913b5e4b027a2e10ac10b"}, {"problem": 156, "code": "(fn [default coll] \n  (into {} (map #(hash-map % default) coll)))", "user": "5e5fd9f7e4b0fd0acd158681"}, {"problem": 156, "code": "(fn [v m]\n  (zipmap m (repeat v)))", "user": "5e501de1e4b027a2e10ac0bf"}, {"problem": 156, "code": "(fn [default-value\n       keys]\n    (into\n      {}\n      (map\n        (fn [k]\n          [k default-value])\n        keys)))", "user": "54dc84ede4b024c67c0cf784"}, {"problem": 156, "code": "(fn [v coll]\n  (apply assoc {}\n         (interleave coll (cycle [v]))))", "user": "5e5fa1ffe4b0fd0acd15867d"}, {"problem": 156, "code": "(fn [key arr] (reduce (fn [result value] (assoc result value key)) {} arr))", "user": "5dc85f8ae4b02f9375f4e1da"}, {"problem": 156, "code": "(fn [v ks]\n (apply merge\n   (map #(conj {} [%2 %1]) (repeat v) ks)) )", "user": "5e62c405e4b0fd0acd15869b"}, {"problem": 156, "code": "(fn [default vect]\n  (reduce (fn [acc cur]\n            (assoc acc cur default))\n          {}\n          vect))", "user": "5e62444fe4b0fd0acd158694"}, {"problem": 156, "code": "(fn [default-value key-seq]\n  (reduce (fn [map x] (conj map [x default-value])) {} key-seq))", "user": "5e60a0cae4b0fd0acd158689"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5e5f2c17e4b0fd0acd158678"}, {"problem": 156, "code": "(fn [x xs]\n  (zipmap xs (repeat x)))", "user": "5e610da6e4b0fd0acd15868d"}, {"problem": 156, "code": "(fn [value keys] (reduce #(assoc %1 %2 value) {} keys))", "user": "5cb556f9e4b026601754b934"}, {"problem": 156, "code": "(fn [x v] (reduce (fn [accum z] (assoc accum z x)) {} v))", "user": "5e66c144e4b0e171e1033683"}, {"problem": 156, "code": "(fn [d s] (zipmap s (repeat (count s) d)))", "user": "5a5d0726e4b0512ff01cd91b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5e3a25d4e4b01d43a70e8dde"}, {"problem": 156, "code": "#(reduce (fn [new-list k] (assoc new-list k %)) {} %2)", "user": "5e6834e0e4b04793f195eaf9"}, {"problem": 156, "code": "(fn [val sequence] \n  \t(into {} \n\t\t(map (fn [item] (hash-map item val)) sequence)))", "user": "5e51a268e4b027a2e10ac0d1"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5e63ffa0e4b0fd0acd1586a6"}, {"problem": 156, "code": "(fn [d k] \n\n  \n  (reduce (fn [m kk] (assoc m kk d)) {} k)\n  )", "user": "5e5f83a2e4b0fd0acd15867b"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %1)))", "user": "5e6ca949e4b04a83ad7cd289"}, {"problem": 156, "code": "(fn [defvalue keys-list]\n  (reduce (fn [hm k] (assoc hm k defvalue)) {} keys-list)\n  \n  )", "user": "5e6b9955e4b04a83ad7cd27b"}, {"problem": 156, "code": "(fn [d coll] (into {} (map #(vector % d) coll)))", "user": "5e708c4be4b085ba37836dad"}, {"problem": 156, "code": "(fn [v ks] (into {} (map (fn [k] [k v]) ks)))", "user": "5e6e6537e4b04a83ad7cd29a"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %1)))", "user": "5df70ee8e4b0a607a9a45c8a"}, {"problem": 156, "code": "(fn [d, v] (zipmap v (repeat d)))", "user": "5e735071e4b085ba37836dcf"}, {"problem": 156, "code": "(fn [default m]\n  (zipmap m (repeat default)))", "user": "5e78e8d3e4b085ba37836dfd"}, {"problem": 156, "code": "(fn [default-value keys]\n  (reduce #(assoc %1 %2 default-value) {} keys))", "user": "5e67ab18e4b0e171e103368a"}, {"problem": 156, "code": "(fn [default values](reduce (fn [m k] (assoc m k default)) {} values))", "user": "5048806be4b0ec70b3ef8d9e"}, {"problem": 156, "code": "(fn [default vs]\n  (into {} (map vector vs (repeat default))))", "user": "536c4670e4b0fc7073fd6e3c"}, {"problem": 156, "code": "(fn build_map [default map_key] (if (= (first map_key) nil) {} (merge {(first map_key) default} (build_map default (rest map_key)))))", "user": "5e69589de4b04a83ad7cd26d"}, {"problem": 156, "code": "(fn\n  [default ks]\n  (loop\n   [[this-key & keys-left] ks result {}]\n    (let [new-result (conj result (hash-map this-key default))]\n      (if (empty? keys-left)\n        new-result\n        (recur keys-left new-result)))))", "user": "5e7f62cce4b085ba37836e3b"}, {"problem": 156, "code": "(fn func [val coll]\n  (apply merge (map (fn [x] {x val}) coll)))", "user": "5e805895e4b085ba37836e44"}, {"problem": 156, "code": "(fn[default keys](zipmap keys (repeat default)))", "user": "5e7bb000e4b085ba37836e1d"}, {"problem": 156, "code": "(fn [default v]\n  (reduce (fn [acc e] (assoc acc e default)) {} v))", "user": "5e76274ce4b085ba37836deb"}, {"problem": 156, "code": "#(apply merge (map (fn [k] {k %1}) %2))", "user": "5dcace6be4b02b31cc3da3b1"}, {"problem": 156, "code": "(fn [default list] (zipmap list (repeat default)))", "user": "5e8308abe4b09a7a73c8bbb4"}, {"problem": 156, "code": "(fn [x coll]\n     (reduce (fn [coll item]\n               (assoc coll item x))\n             {}\n             coll))", "user": "5e7b1ef4e4b085ba37836e10"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5e790f6be4b085ba37836e01"}, {"problem": 156, "code": "(fn [defval init-keys]\n  (loop [res {}, key init-keys]\n    (if (empty? key)\n      res\n      (recur \n        (assoc res (first key) defval)\n        (rest key)))))", "user": "5d517784e4b0776584bd6f60"}, {"problem": 156, "code": "(fn [dv ks] (into {} \n                  (map (fn [x] [x dv]) ks)\n                       ))", "user": "5e860bafe4b09a7a73c8bbdd"}, {"problem": 156, "code": "(fn[v s] (reduce #(assoc %1 %2 v) {} s))", "user": "5e887c61e4b0cb0169546309"}, {"problem": 156, "code": "(fn [default ks]\n  (reduce #(conj %1 {%2 default})\n          {}\n          ks))", "user": "5e862cd7e4b09a7a73c8bbde"}, {"problem": 156, "code": "(fn [x coll] (zipmap coll (repeat x)))", "user": "5e13a6b7e4b099d064963001"}, {"problem": 156, "code": "(fn [d k] (reduce #(into % {%2 d}) {} k))", "user": "5d6f8b4de4b04d129b00f2d3"}, {"problem": 156, "code": "(fn [val keys]\n                       (reduce (fn [map k] (assoc map k val))\n                               {}\n                               keys))", "user": "5e89b832e4b0cb0169546315"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5e80edc3e4b09a7a73c8bba9"}, {"problem": 156, "code": "(fn [x array] (reduce merge (map (fn [y] {y x}) array)))", "user": "5e839edde4b09a7a73c8bbba"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "4eb70649535d7eef30807373"}, {"problem": 156, "code": "(fn map-default [default key]\n  (zipmap key (repeat default)))", "user": "5e8d3b37e4b0cb016954632c"}, {"problem": 156, "code": "(fn([default ks] (apply hash-map (interleave ks (vec (repeat (count ks) default))))))", "user": "5e8ce2fee4b0cb0169546328"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5e7dc2d8e4b085ba37836e2f"}, {"problem": 156, "code": "(fn work [item coll]\n  (if (empty? coll) {}\n    (assoc (work item (rest coll)) (first coll) item)))", "user": "5e84b48ee4b09a7a73c8bbc8"}, {"problem": 156, "code": "(fn mapDefault\n  [x col]\n  (reduce #(assoc %1 %2 x) {} col)\n  )", "user": "5e95013fe4b0fbed045a3800"}, {"problem": 156, "code": "(fn [x l]  (reduce merge (map #(hash-map %  x ) l)))", "user": "5e94ff5fe4b0fbed045a37ff"}, {"problem": 156, "code": "(fn [values key-names]\n  (reduce (fn [acc key-name]\n            (assoc acc key-name values)\n            )\n            {}\n          key-names)\n)", "user": "5c3e5227e4b08cd430848e80"}, {"problem": 156, "code": "#(loop [ks %2 mapping {}]\n    (if (empty? ks)\n      mapping\n      (recur (rest ks) (assoc mapping (first ks) %1))\n   )\n )", "user": "5e947a69e4b0fbed045a37f8"}, {"problem": 156, "code": "(fn [x y] (reduce #(assoc %1 %2 x) {} y))", "user": "5c7d590ae4b0d597f478caaa"}, {"problem": 156, "code": "(fn [x, array] \n  (reduce #(assoc %1 %2 x) {} array))", "user": "5e2ef900e4b05b4b015161fc"}, {"problem": 156, "code": "(fn \n  [default coll]\n  (zipmap coll (repeat default)))", "user": "5be9ad9be4b0f319e2d7ec76"}, {"problem": 156, "code": "(fn [d s] (into {} (map #(vector % d) s)))", "user": "5e980583e4b0157ca96647d5"}, {"problem": 156, "code": "(fn [defaults keys]\n  (into {} (map #(vector % defaults) keys)))", "user": "5e95873ae4b0fbed045a380a"}, {"problem": 156, "code": "(fn [d ks] (zipmap ks (repeat d)))", "user": "5d45749be4b07c84aa5ae6a2"}, {"problem": 156, "code": "(fn [value coll]\n   (apply hash-map (interleave coll (repeat value))))", "user": "5e99cbd4e4b0157ca96647e6"}, {"problem": 156, "code": "(fn [defaultValue mapSequence] (zipmap mapSequence (take (count mapSequence) (repeat defaultValue))) )", "user": "5e996e76e4b0157ca96647e4"}, {"problem": 156, "code": "(fn [v s] (zipmap s (repeat v)))", "user": "5e218bb7e4b05b4b01516123"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5e9b7aefe4b0157ca96647f1"}, {"problem": 156, "code": "(fn [d k] (reduce conj (map (fn [x] (hash-map x d)) k)))", "user": "5e9b6471e4b0157ca96647f0"}, {"problem": 156, "code": "(fn createHashMap\n  [vl vct]\n  (loop [hsh {}\n         lst vct]\n    (if (empty? lst)\n      hsh\n      (recur (assoc hsh (first lst) vl) (rest lst)))))", "user": "5e9636fee4b0fbed045a3816"}, {"problem": 156, "code": "(fn [e lst]\n  (into {} (map #(hash-map % e) lst)))", "user": "5e978fe5e4b0157ca96647d1"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5e9771dee4b0157ca96647d0"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5e950310e4b0fbed045a3802"}, {"problem": 156, "code": "(fn [v coll] \n   (into {}  \n         (map \n           (fn [x y] [x y] ) \n           coll \n           (repeat (count coll) v))))", "user": "5e9ff8fbe4b00a66d4a95185"}, {"problem": 156, "code": "#(reduce (fn [m k] (assoc m k %1)) {} %2)", "user": "5e85d0bde4b09a7a73c8bbd6"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5e9e408fe4b00a66d4a95172"}, {"problem": 156, "code": "(fn [v ks]\n  (reduce (fn [acc k]\n            (assoc acc k v)) {} ks))", "user": "5e9e6d8ee4b00a66d4a95175"}, {"problem": 156, "code": "(fn [x coll]\n  (zipmap coll (repeat x)))", "user": "5df08767e4b093ff717275bf"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5e9d1c75e4b0157ca9664801"}, {"problem": 156, "code": "(fn mapDef\n  [x col]\n  (reduce #(assoc %1 %2 x) {} col))", "user": "5ea3711ae4b00a66d4a9519d"}, {"problem": 156, "code": "(fn [default s]\n  (loop [result {}\n         s s]\n  (if (empty? s)\n    result\n    (recur\n     (assoc result (first s) default)\n     (rest s)))))", "user": "5e950178e4b0fbed045a3801"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1) )", "user": "5ea2e6bfe4b00a66d4a95197"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5e9e642ce4b00a66d4a95174"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5ea6f88de4b00a66d4a951b1"}, {"problem": 156, "code": "(fn [v ks]\n  (loop[res {} \n        ks ks]\n  (if (empty? ks)\n  \tres\n  \t(recur (assoc res (first ks) v) (rest ks)\n  \n  \n  ))))", "user": "5ea7b04de4b00a66d4a951b6"}, {"problem": 156, "code": "(fn [default zeq] (into {} (for [elem zeq :let [res [elem default]]] res)))", "user": "5ea97df7e4b00a66d4a951c8"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5e980e6be4b0157ca96647d6"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5d1be50ce4b02ea6f0fb6986"}, {"problem": 156, "code": "(fn make-map [default_value key_vec] \n  (when (> (count key_vec) 0)\n  \t(conj (hash-map (first key_vec) default_value)\n        \t\t\t(make-map default_value (rest key_vec)))))", "user": "5ea5881fe4b00a66d4a951a8"}, {"problem": 156, "code": "(fn [v ks] (apply assoc {} (interleave ks (cycle [v]))))", "user": "5c9adfebe4b048ec896c5ab9"}, {"problem": 156, "code": "(fn [d s]\n  (apply hash-map (interleave s (repeat d))))", "user": "5d866acbe4b0915913b1d39c"}, {"problem": 156, "code": "(fn [a b] (reduce #(assoc %1 %2 a) nil b))", "user": "5eb1a80ce4b00a66d4a951ff"}, {"problem": 156, "code": "(fn [v ks]\n  (into {} (map (fn [k]\n                  [k v])\n                ks)))", "user": "5eb22708e4b00a66d4a95204"}, {"problem": 156, "code": "(fn [v ks]\n   (reduce #(assoc %1 %2 v) {} ks))", "user": "5eb1c786e4b00a66d4a95201"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5eb193fde4b00a66d4a951fe"}, {"problem": 156, "code": "(fn [default arr] (reduce (fn [a b] (conj a [b default])) {} arr))", "user": "5eb4927fe4b00a66d4a95221"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5eb56fc1e4b00a66d4a95224"}, {"problem": 156, "code": "#(reduce (fn [m k] (conj m [k %1])) {} %2)", "user": "5e4beca9e4b0889a8790a560"}, {"problem": 156, "code": "#(into {} (map vector %2 (repeat %1)))", "user": "5eb6561fe4b00a66d4a95233"}, {"problem": 156, "code": "#(into {} (for [key %2] [key %1]))", "user": "5e2f73e5e4b05b4b01516204"}, {"problem": 156, "code": "(fn [v ks]\n  (into {} (map vector ks (repeat v))))", "user": "5ebff55de4b00a66d4a95286"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5ea970d1e4b00a66d4a951c6"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (cycle [%1])))", "user": "5ec21ef0e4b00a66d4a95299"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5eb5d9bbe4b00a66d4a9522e"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5ebaf687e4b00a66d4a9525b"}, {"problem": 156, "code": "(fn [v m] (reduce #(assoc %1 %2 v) {} m))", "user": "5ec3a13ae4b08d0ec38692b9"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5cc7a7a7e4b0ccb06196283b"}, {"problem": 156, "code": "(fn\n  [x y]\n  (into {} (map (fn [val] (hash-map val x))\n       y)))", "user": "5ec7d7f2e4b08d0ec38692e1"}, {"problem": 156, "code": "(fn [v l] (reduce (fn [a b] (into a {b v})) {} l))", "user": "5ec7550ce4b08d0ec38692dd"}, {"problem": 156, "code": "(fn [x a]\n  (zipmap a (repeat (count a) x)))", "user": "5eb84ef4e4b00a66d4a95244"}, {"problem": 156, "code": "(fn [v ks]\n  (into {}\n        (for [k ks] {k v})))", "user": "5ebdb3d2e4b00a66d4a95275"}, {"problem": 156, "code": "#_(fn [default ks] (reduce #(assoc %1 %2 default) {} ks))\n#(zipmap %2 (repeat %1))", "user": "5de12192e4b0948ae9d9aded"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "51412b0ae4b0694e2952b79d"}, {"problem": 156, "code": "(fn [default maps]\n  (zipmap maps (repeat default)))", "user": "5ec88d1fe4b08d0ec38692ea"}, {"problem": 156, "code": "(fn [dV colls]\n  (reduce (fn [col k]\n            (conj col {k dV})\n            )\n          {}\n          colls\n          )\n\t)", "user": "5ebb4751e4b00a66d4a95262"}, {"problem": 156, "code": "(fn [defVal arr] (reduce (fn [acc v] (conj acc {v defVal})) {} arr))", "user": "5ec82b11e4b08d0ec38692e6"}, {"problem": 156, "code": "(fn default-assoc\n  [d s]\n  (loop [se s\n         f {}]\n    (if (seq se)\n      (recur (rest se) (assoc f (first se) d))\n      f)))", "user": "5ec943fde4b08d0ec38692f1"}, {"problem": 156, "code": "(fn my-def\n     ([acc default [head & tail]]\n      (let [acc (into acc  [{head default}])]\n        (if (empty? tail)\n          acc\n          (recur acc default tail)\n          )))\n     ([default s] (my-def {} default s))\n     )", "user": "5ecbf452e4b016b56eae058b"}, {"problem": 156, "code": "#(reduce (fn [init r] \n           (assoc init r %1))\n            {}\n            %2)", "user": "5ecf4ee4e4b016b56eae05a6"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5e5096c6e4b027a2e10ac0c6"}, {"problem": 156, "code": "(fn def-map\n  [def-val coll]\n  (reduce (fn [new-coll k]\n            (assoc new-coll k def-val))\n          {}\n          coll))", "user": "5ed08785e4b016b56eae05b1"}, {"problem": 156, "code": "(fn [default col]\n  (reduce #(conj %1 {%2 default}) {} col))", "user": "5ececec5e4b016b56eae059f"}, {"problem": 156, "code": "(fn f [d s] (zipmap s (repeat d)))", "user": "5ed15e23e4b016b56eae05ba"}, {"problem": 156, "code": "(fn [dval ks] (reduce #(assoc %1 %2 dval) {} ks))", "user": "563bb1fde4b0bfe05bf11829"}, {"problem": 156, "code": ";#(into (hash-map) (for [x %2] [x %1]))\n#(zipmap %2 (repeat %1))", "user": "5ed03b7fe4b016b56eae05ae"}, {"problem": 156, "code": "(fn [v coll]\n  (->> coll\n      (map #(vector % v))\n      (into {})))", "user": "4f6543cae4b07046d9f4ef41"}, {"problem": 156, "code": "#(into {} (for [x %2] {x %1}))", "user": "5309bacae4b02e82168697bc"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5eccbce6e4b016b56eae058e"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5ed677bee4b016b56eae05e0"}, {"problem": 156, "code": "(fn solution4\n  [default values]\n  (reduce (fn [new-map key]\n            (assoc new-map key default))\n          {}\n          values))", "user": "5ec03772e4b00a66d4a95289"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5ecfd429e4b016b56eae05a9"}, {"problem": 156, "code": "(fn init-dict [val keys]\n  (reduce (fn [acc key]\n            (assoc acc key val)) {} keys))", "user": "5ed3c43be4b016b56eae05c4"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5ecf55aae4b016b56eae05a7"}, {"problem": 156, "code": "(fn [k sq] (into {} (map (fn [v] {v k}) sq)))", "user": "5ecc0831e4b016b56eae058c"}, {"problem": 156, "code": "(fn [v coll]\n(reduce #(assoc %1 %2 v) {} coll))", "user": "5e316490e4b05b4b01516225"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5ed6030de4b016b56eae05db"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5cbfa589e4b0ccb061962774"}, {"problem": 156, "code": "(fn [x y]\n  (into {} (map #(into {} {% x}) y)))", "user": "5ed5148ee4b016b56eae05d1"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %))", "user": "5ed3f2b9e4b016b56eae05c6"}, {"problem": 156, "code": "(fn\n  [val s]\n  (reduce (fn [new-map key]\n            (into new-map {key val}))\n          {}\n          s))", "user": "5ed875abe4b016b56eae05f2"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "504e15a8e4b078edc5f593c1"}, {"problem": 156, "code": "(fn [dft xs]\n  (reduce #(assoc %1 %2 dft) {} xs))", "user": "5ed4b1e8e4b016b56eae05ce"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5ed9c2cde4b0c7845d86b0e4"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5ec5f7f2e4b08d0ec38692d1"}, {"problem": 156, "code": "(fn \n  [default \n   keylist]\n  (reduce (fn [out in] (conj out [in default])) {} keylist))", "user": "5ec819b4e4b08d0ec38692e2"}, {"problem": 156, "code": "(fn [v, k] (apply hash-map (interleave k (take (count k) (repeat v)))))", "user": "5ed4482be4b016b56eae05ca"}, {"problem": 156, "code": "(fn [d l] (->> l (map #(vec (list % d))) (into {})))", "user": "4f033c99535dcb61093f6a7e"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5e909685e4b0cb016954634d"}, {"problem": 156, "code": "#(reduce (fn [a v] (assoc a v %1)) {} %2)", "user": "53c73e8ae4b00fb29b2212a5"}, {"problem": 156, "code": "(fn [default v] (reduce (fn [acc, i] (assoc acc i default)) {} v))", "user": "5c527129e4b0fb8c5ffd99de"}, {"problem": 156, "code": "(fn [val keys] (zipmap keys (repeat (count keys) val)))", "user": "589037b4e4b00487982d51d0"}, {"problem": 156, "code": "(fn [default values] (zipmap values (repeat default)))", "user": "5ee66158e4b029a2061bbe98"}, {"problem": 156, "code": "#(into {} (for [x %2] {x %1}))", "user": "5d3b0764e4b01671435dbd61"}, {"problem": 156, "code": "(fn [v coll](into {} (for [x coll] [x v])))", "user": "5ee738dee4b029a2061bbea2"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5ed92e8fe4b0c7845d86b0dd"}, {"problem": 156, "code": "(fn [v ks] (into {} (for [k ks] [k v])))", "user": "5ee93720e4b029a2061bbeb7"}, {"problem": 156, "code": "(fn [v ks]\n  ((fn iter [v ks acc]\n    (if (empty? ks)\n      acc\n      (iter v (rest ks) (conj acc {(first ks) v}))))\n   v ks {}))", "user": "5edfb1e5e4b0c7845d86b107"}, {"problem": 156, "code": "(fn [d m]\n  (reduce (fn [acc, val] (assoc acc val d)) {} m))", "user": "5eeb03dde4b029a2061bbeca"}, {"problem": 156, "code": "(fn [v ks] (into {} (map (fn [k] [k v]) ks)))", "user": "5eebbf9ee4b029a2061bbed2"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "4f868d88e4b033992c121c52"}, {"problem": 156, "code": ";;(fn [my-default my-keys]\n;; (apply hash-map (interleave my-keys (repeat my-default))))\n\n#(apply hash-map (interleave %2 (repeat %1)))", "user": "5edb07dde4b0c7845d86b0ed"}, {"problem": 156, "code": "(fn [d vec]\n  (loop [result {} coll vec]\n    (if (empty? coll)\n      result\n      (recur (assoc result (first coll) d) (rest coll)))))", "user": "5ee81beae4b029a2061bbeac"}, {"problem": 156, "code": "(fn [val keys]\n (reduce\n (fn [new-map element]\n  (assoc new-map element val) )\n {}\n keys))", "user": "5ec91154e4b08d0ec38692ed"}, {"problem": 156, "code": "(fn [v coll] (into {} (map #(vector % v) coll)))", "user": "5cec07fce4b0a17bb84e2bf0"}, {"problem": 156, "code": "(fn [val arr] (reduce #(assoc %1 %2 val) {} arr))", "user": "5eee9352e4b07c55ae4a0512"}, {"problem": 156, "code": "(fn [x keys] (zipmap keys (repeat x)))", "user": "5cc6b681e4b0ccb061962828"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (repeat v)))", "user": "5e17bb46e4b00200644e3d5a"}, {"problem": 156, "code": "#(zipmap %2 (take (count %2) (repeat %1)) )", "user": "5ed6c4ede4b016b56eae05e3"}, {"problem": 156, "code": "(fn [d xs] (reduce #(assoc %1 %2 d) {} xs))", "user": "5eee7311e4b07c55ae4a0510"}, {"problem": 156, "code": "#(apply merge (for [x %2] (hash-map x %1)))", "user": "5ed70b97e4b016b56eae05e6"}, {"problem": 156, "code": "(fn [default xs]\n  \t(reduce (fn [v x] (into v [[x default]])) {} xs))", "user": "5eec1001e4b07c55ae4a0502"}, {"problem": 156, "code": "(fn def-assoc [dflt xs] (#(reduce (fn [mp k] (assoc mp k dflt)) {} xs)))", "user": "5ef18431e4b07c55ae4a0529"}, {"problem": 156, "code": "(fn [default keys]\n  (reduce #(assoc %1 %2 default) {} keys))", "user": "5ef381a3e4b07c55ae4a053c"}, {"problem": 156, "code": "(fn [key listi]\n  (zipmap listi (repeat key)))", "user": "5e83a273e4b09a7a73c8bbbb"}, {"problem": 156, "code": "(fn [default-elem coll]\n  (reduce (fn [temp-map elem] (assoc temp-map elem default-elem))\n          (hash-map)\n          coll))", "user": "5ef28e95e4b07c55ae4a0535"}, {"problem": 156, "code": ";;(fn [v ks]\n;;  (into {}\n;;        (map #(vector % v) ks)))\n\n#(zipmap %2 (repeat %1))", "user": "576aea4fe4b0a07e8fc18126"}, {"problem": 156, "code": "(fn [d coll] (apply assoc {} (interleave coll (repeat (count coll) d))))", "user": "5eb741e4e4b00a66d4a9523b"}, {"problem": 156, "code": "(fn [value key-coll] (reduce #(assoc %1 %2 value) {} key-coll))", "user": "5ef9ea69e4b09b61f08553d1"}, {"problem": 156, "code": "(fn [default values]\n  (into {} (for [i values] [i default ])))", "user": "5f003099e4b0cf489e8d7f17"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5eff339ae4b0cf489e8d7f0c"}, {"problem": 156, "code": "(fn [value key-coll]\n  (reduce (fn [result key-to-insert]\n            (assoc result key-to-insert value))\n          {}\n\tkey-coll))", "user": "5eff2b32e4b0cf489e8d7f0b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5890dbeae4b00487982d51e3"}, {"problem": 156, "code": "(fn [n tkeys] (reduce (fn [a b] (assoc a b n)) {} tkeys))", "user": "5f012a2ee4b0cf489e8d7f1e"}, {"problem": 156, "code": "(fn [value col]\n  (reduce (fn [obj item]\n            (assoc obj item value)) {} col))", "user": "5c9da580e4b048ec896c5b12"}, {"problem": 156, "code": "(fn [default seq] (into {} (for [e seq] [e default])))", "user": "5f02f365e4b0cf489e8d7f2c"}, {"problem": 156, "code": "(fn [v s]\n  (into {} (map #(vector %1 %2) s (repeat v))))", "user": "5bafd5c8e4b0a20761a234dd"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5f03550ce4b0cf489e8d7f33"}, {"problem": 156, "code": "(fn [default key-list]\n        (->> key-list\n             (map (fn [k] [k default]))\n             (into {})))", "user": "5484c3b2e4b0e286459a11a2"}, {"problem": 156, "code": "(fn [def-val key-seq]\n  (zipmap key-seq (repeat def-val)))", "user": "5ec6de19e4b08d0ec38692da"}, {"problem": 156, "code": "(fn [defaults keys] (reduce #(assoc %1 %2 defaults) {} keys))", "user": "548f1604e4b0e286459a1230"}, {"problem": 156, "code": "(fn [v k]\n  (into {}\n        (for [e k]\n          [e v])))", "user": "58f98231e4b0438e51c2cf4c"}, {"problem": 156, "code": "(fn [a b]\n\t(zipmap b (repeat (count b) a)))", "user": "5eea5ce7e4b029a2061bbec0"}, {"problem": 156, "code": "(fn [default xs] (reduce (fn [v x] (into v [[x default]])) {} xs))", "user": "5ee2a401e4b029a2061bbe80"}, {"problem": 156, "code": "(fn [default collection]\n   (into (sorted-map) (map #(assoc {} % default) collection))\n   )", "user": "5f08d0c5e4b0cf489e8d7f62"}, {"problem": 156, "code": "#(reduce (fn [arr item] (conj arr {item %1})) {} %2)", "user": "58ed2e21e4b056aecfd47d7a"}, {"problem": 156, "code": "(fn [default ks] (into {} (map #(vector %1 default) ks)))", "user": "5f0b8243e4b0f30dddfb5d45"}, {"problem": 156, "code": "(fn foo\n  [default keyset]\n  (reduce #(assoc %1 %2 default) {} keyset))", "user": "5f088bb3e4b0cf489e8d7f5f"}, {"problem": 156, "code": "; stolen solution: (fn [d v] (reduce #(assoc %1 %2 d) {} v))\n#(zipmap %2 (repeat %1))", "user": "5f0824c5e4b0cf489e8d7f5b"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (repeat 3 v)))", "user": "57e070fde4b0bd073c202478"}, {"problem": 156, "code": "(fn default [values keys] (zipmap keys (repeat values)))", "user": "5f081f6de4b0cf489e8d7f5a"}, {"problem": 156, "code": "#(reduce (fn [a b] (assoc a b %)) {} %2)", "user": "5ed80d50e4b016b56eae05eb"}, {"problem": 156, "code": "(fn [value coll]\n  (apply hash-map\n         (mapcat list coll (repeat value))))", "user": "5e471203e4b043cd24807a2a"}, {"problem": 156, "code": "(fn make-map [default values] (if (empty? values) {} (conj {(first values) default} (make-map default (rest values)))))", "user": "5509a23ee4b06e50f9beb11a"}, {"problem": 156, "code": "(fn [default the-keys] (apply hash-map (mapcat #(vector %1 default) the-keys)))", "user": "5f1328dee4b091ba50b4dbb1"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "4eb97234535dfed6da9c6d53"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5f03ab5be4b0cf489e8d7f37"}, {"problem": 156, "code": "(fn [default k] (into {} (map #(assoc {} % default) k)))", "user": "5177097de4b085adf681d892"}, {"problem": 156, "code": "#(reduce (fn [coll x] \n           (assoc coll x %1))\n         {} %2)", "user": "5f0c8b0de4b0f30dddfb5d4c"}, {"problem": 156, "code": "(fn [v ks] (reduce (fn [acc k] (assoc acc k v))\n                   {}\n                   ks))", "user": "5e6ba862e4b04a83ad7cd27d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "572ee822e4b0cd1946bd0f91"}, {"problem": 156, "code": "(fn [d kys] (apply hash-map (mapcat list kys (repeat d))))", "user": "5d8a3f3ee4b0915913b1d3c9"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5f1108d7e4b091ba50b4dba9"}, {"problem": 156, "code": "(fn [default keys] \n  (zipmap keys (repeat default)))", "user": "5f17e3c5e4b091ba50b4dbd0"}, {"problem": 156, "code": "(fn [default init-keys] (into (hash-map) (map (fn [k] {k default}) init-keys)))", "user": "5f15b1e2e4b091ba50b4dbbd"}, {"problem": 156, "code": "(fn [default-value keys-seq] (zipmap keys-seq (repeat (count keys-seq) default-value)))", "user": "5ec0de29e4b00a66d4a9528e"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5f086f54e4b0cf489e8d7f5e"}, {"problem": 156, "code": "(fn [myval myseq] (reduce #(assoc %1 %2 myval) {} myseq))", "user": "5f1aade6e4b091ba50b4dbe4"}, {"problem": 156, "code": "(fn [d m] (reduce (fn [ret k] (assoc ret k d)) {} m))", "user": "5f19ecbae4b091ba50b4dbdf"}, {"problem": 156, "code": "(fn [d k] (zipmap k (repeat d)))", "user": "567dbfe0e4b05957ce8c61cc"}, {"problem": 156, "code": "(fn [v coll]\n  (into {} (for [x coll] {x v})))", "user": "5f1c7c3be4b0f565ad998261"}, {"problem": 156, "code": "(fn [v s] (into {} (map #(vector % v) s)))", "user": "5e3071abe4b05b4b01516213"}, {"problem": 156, "code": "(fn [default origin] \n  (into {} (map #(vector\n         % default) origin)))", "user": "5e7fb908e4b085ba37836e3f"}, {"problem": 156, "code": "(fn [default coll]\n  (apply merge (map #(hash-map % default) coll)))", "user": "5ec3cdf7e4b08d0ec38692bc"}, {"problem": 156, "code": "#(into {} (for [i %2 ] [i %1]))", "user": "5f0c3da4e4b0f30dddfb5d49"}, {"problem": 156, "code": "(fn [v coll]\n  (into {} (for [x coll] {x v})))", "user": "59331397e4b072a2710fd046"}, {"problem": 156, "code": "(fn [v ks] (reduce (fn [m k] (assoc m k v)) {} ks))", "user": "5f1d92a1e4b0f565ad99826a"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5f25a2b1e4b0117231e5035e"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5f22e8c9e4b0f565ad99828b"}, {"problem": 156, "code": "#(apply hash-map (interleave %2  (repeat %1)))", "user": "5f297f22e4b033932238a64e"}, {"problem": 156, "code": "(fn [x lst]\n  (into {} \n        (for [k lst]\n    \t\t{k x})))", "user": "5cfbd3d1e4b0cc9c9158815b"}, {"problem": 156, "code": "(fn [default keys]\n  (zipmap keys (repeat default)))", "user": "5f1af439e4b0f565ad998257"}, {"problem": 156, "code": "(fn [v, ks] \n   (apply merge (map #(hash-map % v) ks)) )", "user": "5ee4b2e6e4b029a2061bbe90"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5f2a2a0de4b033932238a653"}, {"problem": 156, "code": "(fn hash-factory [default-value keys-list]\n  (if (empty? keys-list) {}\n    (conj\n     (hash-factory default-value (rest keys-list))\n     [(first keys-list) default-value])))", "user": "5f2aa09ce4b033932238a655"}, {"problem": 156, "code": "(fn [d k] (apply conj {} (map (fn [x] {x d}) k)))", "user": "5f2c02d1e4b033932238a65f"}, {"problem": 156, "code": "(fn[default col]\n  (reduce \n   \t\t(fn [m k] (println k m)(assoc m k default))  \n   {} col)\n  )", "user": "5e64f44de4b0fd0acd1586ae"}, {"problem": 156, "code": "(fn [x-default y-seq] (reduce #(into %1 {%2 x-default} ) {} y-seq))", "user": "5f1eebcee4b0f565ad998273"}, {"problem": 156, "code": "(fn [d coll] (into {} (mapcat #(hash-map % d) coll)))", "user": "5f281a83e4b033932238a64a"}, {"problem": 156, "code": "#(reduce conj (map hash-map %2 (repeat %1)))", "user": "5dc5982be4b02f9375f4e1c0"}, {"problem": 156, "code": "(fn [v ks]\n  (zipmap ks (repeat v)))", "user": "51553ea7e4b06c5f6a1490a2"}, {"problem": 156, "code": "(fn [def_value sequence] (reduce (fn [current_map item] (assoc current_map item def_value)) {} sequence))", "user": "5f184a46e4b091ba50b4dbd4"}, {"problem": 156, "code": "(fn [a-val a-seq]\n      (apply hash-map (reduce #(conj % %2 a-val) [] a-seq)))", "user": "5f2d3c0ee4b033932238a66a"}, {"problem": 156, "code": "(fn [x y] (zipmap y (repeat (count y) x)))", "user": "5d03a7c3e4b0cc9c915881c8"}, {"problem": 156, "code": "#(into {} (for [x %2] (hash-map x %1)))", "user": "5e248c3fe4b05b4b01516153"}, {"problem": 156, "code": "(fn [v ks] (into {} (map #(vector % v) ks)))", "user": "5f300f28e4b033932238a682"}, {"problem": 156, "code": "#(apply array-map (interleave %2 (repeat (count %2) %)))", "user": "5f3388ade4b0574c87022c38"}, {"problem": 156, "code": "(fn [first second] (zipmap second (repeat first)))", "user": "5db9fb8ae4b010eb3c36cd5a"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5f309144e4b0574c87022c23"}, {"problem": 156, "code": "(fn [dv col] (reduce merge (map (fn [key] (assoc {} key dv)) col)))", "user": "5f275800e4b0857314092c93"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5f393bd6e4b0574c87022c76"}, {"problem": 156, "code": "(fn [x col] (reduce-kv (fn [m _ v] (assoc m v x)) {} col))", "user": "5f274aeee4b0857314092c92"}, {"problem": 156, "code": "(fn default-map [value map_keys]\n  (if (not-empty map_keys)\n    (conj (default-map value (rest map_keys)) {(first map_keys) value})\n    {}))", "user": "5f3bc8dae4b004f08c61c541"}, {"problem": 156, "code": "(fn[x y](apply merge (map #(hash-map % x) y)))", "user": "5f3a8493e4b004f08c61c527"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5f0e32a1e4b0f30dddfb5d59"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5ec22851e4b00a66d4a9529a"}, {"problem": 156, "code": "#(into {} (for [x %2] {x %1}))", "user": "5e3121e5e4b05b4b01516221"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "566812f0e4b04acd4f672de1"}, {"problem": 156, "code": "(fn [v ks] (reduce (fn [m k] (assoc m k v)) {} ks))", "user": "5f3ddc71e4b004f08c61c551"}, {"problem": 156, "code": "(fn [default keys]\n   (reduce #'conj {} (map #(hash-map % default) keys)))", "user": "5f3f2281e4b004f08c61c561"}, {"problem": 156, "code": "(fn [default key_values]\n  (zipmap key_values (repeat default))\n  )", "user": "5f36dc06e4b0574c87022c4c"}, {"problem": 156, "code": "(fn [val key-coll]\n  (loop [ls key-coll acc {}]\n    (if (empty? ls)\n      acc\n      (recur (rest ls) (assoc acc (first ls) val)))))", "user": "5f38eecce4b0574c87022c72"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5f32f69ae4b0574c87022c35"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5f3abcc4e4b004f08c61c52b"}, {"problem": 156, "code": "(fn [default ks]\n  (reduce #(merge %1 {%2 default}) {} ks))", "user": "5f3abd21e4b004f08c61c52c"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5f317ae4e4b0574c87022c2a"}, {"problem": 156, "code": "#(apply hash-map (mapcat vector %2 (repeat %1)))", "user": "5f2c94b4e4b033932238a669"}, {"problem": 156, "code": "(fn [v coll]\n        (into {} (mapv #(vector %1 v) coll)))", "user": "5c8005cee4b0c8042a70ce0a"}, {"problem": 156, "code": "(fn [v k]\n  (loop [x k\n         m (hash-map)]\n    (if-not (empty? x)\n      (recur (rest x) (conj m [(first x) v]))\n      m)))", "user": "5f41f28ae4b0955706451fad"}, {"problem": 156, "code": "(fn [values keyz] (into {} (map (fn [k] {k values}) keyz)))", "user": "5f4b6433e4b0102c75033953"}, {"problem": 156, "code": "(fn [default coll]\n  (reduce #(assoc %1 %2 default) {} coll))", "user": "5f238a59e4b0f565ad99828d"}, {"problem": 156, "code": "(fn [n s] (apply hash-map (mapcat #(list % n) s)))", "user": "5dd84170e4b0948ae9d9ad93"}, {"problem": 156, "code": "(fn [value lst] (loop [i 0 result {}]\n  (if (get lst i)\n    (recur (inc i) (assoc result (get lst i) value))\n    result)))", "user": "5f45211ae4b0955706451fbc"}, {"problem": 156, "code": "(fn [d ks]\n  (reduce #(assoc %1 %2 d) {} ks))", "user": "5f520098e4b0a0bc16850a6c"}, {"problem": 156, "code": "(fn [d x] (zipmap x (repeat (count x) d)))", "user": "53275758e4b09d4e7a9b54fc"}, {"problem": 156, "code": "(fn [a b] (into {} (map #(vector % a) b)))\n\n ;; (fn [default keys]\n  ;;  (into {} (map #(vector % default) keys)))", "user": "5d406babe4b05dd059a54367"}, {"problem": 156, "code": "(fn map-defaults-better\n  [dv ks]\n  (zipmap ks (repeat (count ks) dv)))", "user": "5f3103aee4b0574c87022c24"}, {"problem": 156, "code": "(fn [d s] (into {} (for [i s] [i d])))", "user": "5f58db95e4b0a0bc16850a9a"}, {"problem": 156, "code": "(fn [v s]\n  (reduce\n   #(conj %1 {%2 v})\n   {}\n   s))", "user": "5f597522e4b0a0bc16850a9e"}, {"problem": 156, "code": "(fn [v ks]\n  (zipmap ks (repeat v)))", "user": "5d5824fae4b02ba5928a681f"}, {"problem": 156, "code": "(fn [v ks]\n   (into {}\n     (for [k ks]\n       [k v])))", "user": "5f4eb036e4b0102c75033969"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5beadeb5e4b0f319e2d7ec88"}, {"problem": 156, "code": "(fn [x xs] (into {} (map #(hash-map % x) xs)))", "user": "5f0dfa48e4b0f30dddfb5d55"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5f5f2eafe4b02876ed9fcff5"}, {"problem": 156, "code": "(fn [default keys]\n  (reduce #(assoc %1 %2 default) {} keys))", "user": "5ea6fe98e4b00a66d4a951b2"}, {"problem": 156, "code": "(fn [x y] (zipmap y (repeat x)))", "user": "5e70c16de4b085ba37836dae"}, {"problem": 156, "code": "(fn [default keys] (reduce (fn [acc, curr]\n                         (assoc acc curr default)\n          ) {} keys))", "user": "5f42b77be4b0955706451fb0"}, {"problem": 156, "code": "(fn [value keys]\n  (zipmap keys (repeat value)))", "user": "5f63d933e4b02876ed9fd018"}, {"problem": 156, "code": "(fn [val coll]\n  (reduce (fn [acc key] (conj acc [key val] ) ) {} coll))", "user": "5f5a62b4e4b0a0bc16850aa6"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5f60daafe4b02876ed9fcffe"}, {"problem": 156, "code": "(fn [v ks]\n  (->> (repeat (count ks) v)\n       (interleave ks)\n       (apply hash-map)))", "user": "5f663bc0e4b02876ed9fd02d"}, {"problem": 156, "code": "(fn [d coll] (zipmap coll (repeat d)))", "user": "5f6299f7e4b02876ed9fd00c"}, {"problem": 156, "code": "(fn [d ks] (into {} (map (fn [x] [x d]) ks)))", "user": "5f648ef1e4b02876ed9fd01b"}, {"problem": 156, "code": "(fn [d keys]\n    (into {} (map #(vector % d) keys)))", "user": "5f56c0cae4b0a0bc16850a8c"}, {"problem": 156, "code": "(fn [d s] (into {} (map (fn [k] [k d]) s)))", "user": "5c9dcb36e4b048ec896c5b1d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5f6a583ae4b02876ed9fd046"}, {"problem": 156, "code": "(fn [d ks] (into {} (for [k ks] [k d])))", "user": "5eff6c0ee4b0cf489e8d7f11"}, {"problem": 156, "code": "(fn [d a] (zipmap a (repeat d)))", "user": "5f686436e4b02876ed9fd03c"}, {"problem": 156, "code": "(fn [a b] (reduce (fn [coll x] (assoc coll x a)) {} b))", "user": "5f6cb2a5e4b02876ed9fd057"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5f6c4f6de4b02876ed9fd055"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5f6e576ae4b02876ed9fd066"}, {"problem": 156, "code": "(fn[v k] (zipmap k (repeat 3 v)))", "user": "5f6a6b7fe4b02876ed9fd047"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5f6caa19e4b02876ed9fd056"}, {"problem": 156, "code": "(fn [default ks]\n  (reduce #(assoc %1 %2 default) {} ks))", "user": "5f6ff5e8e4b02876ed9fd079"}, {"problem": 156, "code": "(fn [value coll]\n  (loop [x 0\n         res {}]\n    (if (= (count coll) x)\n      res\n      (recur (inc x) (assoc res (get coll x) value)))))", "user": "5f3ce2c7e4b004f08c61c548"}, {"problem": 156, "code": "(fn\n  [i s]\n  (into {} (map #(hash-map %1 i) s)))", "user": "5d8570cae4b0915913b1d395"}, {"problem": 156, "code": "(fn [value keysT](reduce #(assoc %1 %2 value){} keysT))", "user": "5f724f55e4b02876ed9fd089"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "588fbb39e4b00487982d51bd"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5f72f144e4b02876ed9fd093"}, {"problem": 156, "code": "(fn d_map\n  [default m]\n  (into {} (map (fn [x] [x default]) m))\n)", "user": "5f6b8222e4b02876ed9fd052"}, {"problem": 156, "code": "(fn kala [x y] \n    (zipmap y (repeat x)))", "user": "5f520556e4b0a0bc16850a6d"}, {"problem": 156, "code": "(fn[defval x]\n     (reduce conj (let [res {}]\n         (map #(assoc res % defval) x))))", "user": "5f727d2fe4b02876ed9fd08f"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5f727dd6e4b02876ed9fd090"}, {"problem": 156, "code": "(fn [k li] (apply hash-map (interleave li (repeat k))))", "user": "5ec0db8be4b00a66d4a9528d"}, {"problem": 156, "code": "(fn [defa k]\n  (zipmap k (repeat defa)))", "user": "5f74de11e4b02876ed9fd0a5"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5f6b5d83e4b02876ed9fd050"}, {"problem": 156, "code": "(fn[x y]\n    (zipmap y (repeat x)))", "user": "5f77890ae4b02876ed9fd0b9"}, {"problem": 156, "code": "(fn [default-value keys]\n  (->> keys\n       (map #(vector % default-value))\n       (into {})))", "user": "5f79bff2e4b02876ed9fd0ca"}, {"problem": 156, "code": "(fn [default-value key-collection] (zipmap key-collection (repeat default-value)))", "user": "5f757c1ce4b02876ed9fd0aa"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5f727cb0e4b02876ed9fd08e"}, {"problem": 156, "code": "(fn [default keys] (zipmap keys (repeat default)))", "user": "5f737e16e4b02876ed9fd09a"}, {"problem": 156, "code": "(fn [default ks]\n  (loop [ks ks\n         m {}]\n    (if-let [k (first ks)]\n      (recur (rest ks) (assoc m k default))\n      m)))", "user": "523578efe4b0a643f2dcb74c"}, {"problem": 156, "code": "(fn [default keys]\n  (reduce (fn [m key] (assoc m key default)) {} keys)\n  )", "user": "5bc60a65e4b07a9b28b10082"}, {"problem": 156, "code": "#(reduce (fn [x y] (assoc x y %1)) {} %2)", "user": "5f7ac592e4b02876ed9fd0d2"}, {"problem": 156, "code": "#(apply assoc {} (interleave %2 (repeat %1)))", "user": "5f6e5c58e4b02876ed9fd067"}, {"problem": 156, "code": "(fn create-map [default-key s]\n  (reduce (fn [acc x] (assoc acc x default-key)) {} s))", "user": "5e860270e4b09a7a73c8bbdb"}, {"problem": 156, "code": "(fn [v ks]\n  (zipmap ks (repeat v)))", "user": "5cdfe2aee4b0a17bb84e2b04"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "58c69d88e4b021aa9917ed5e"}, {"problem": 156, "code": "(fn [default hm]\n    (loop [newhm {}\n           hm hm]\n        (if (empty? hm)\n            newhm\n            (recur (assoc newhm (first hm) default) (rest hm)))))", "user": "5f77d470e4b02876ed9fd0be"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5f80aa68e4b0c071e6c840e7"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5f727bd1e4b02876ed9fd08c"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5f837b30e4b01aacbe7a2714"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5d0395c5e4b0cc9c915881c6"}, {"problem": 156, "code": "#(apply hash-map  (interleave  %2 (repeat %1)))", "user": "5f77b99fe4b02876ed9fd0bc"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5f84f0f5e4b0375e81f54e78"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5f7e91c8e4b0c071e6c840d8"}, {"problem": 156, "code": "(fn [default ks] (reduce #(assoc %1 %2 default) {} ks))", "user": "4e6a5f5c535d8ccf87e9fed6"}, {"problem": 156, "code": "(fn add-keys\n  [v ks]\n  (reduce conj\n   (for \n     [k ks]\n     {k v})))", "user": "5f6e23e6e4b02876ed9fd064"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5f8497dce4b0375e81f54e74"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5f86de3ee4b0649ffcda4cab"}, {"problem": 156, "code": "(fn [n coll]\n        (zipmap coll (repeat n)))", "user": "5f737899e4b02876ed9fd099"}, {"problem": 156, "code": "(fn [f f1]\n  \n  (apply hash-map(interleave f1 (repeat f)))\n  \n  \n  )", "user": "5f727be9e4b02876ed9fd08d"}, {"problem": 156, "code": "(fn [value keys]\n  (zipmap keys (repeat value)))", "user": "5f84f110e4b0375e81f54e79"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5f2ab452e4b033932238a656"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5f87e757e4b0169f6814c40f"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5f8361bae4b01aacbe7a2712"}, {"problem": 156, "code": "(fn map-to-default [default keys]\n  (zipmap keys (repeat default)))", "user": "5f8330b8e4b01aacbe7a270f"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5f8795d4e4b020286baa5e96"}, {"problem": 156, "code": "(fn [val keys]\n  (reduce (fn [acc key] (conj acc { key val })) {} keys))", "user": "5c8cfff8e4b048ec896c5996"}, {"problem": 156, "code": "#(into (hash-map) (map vector %2 (repeat %1)))", "user": "5f419985e4b0955706451fab"}, {"problem": 156, "code": "(fn [v ks] (loop [m {}\n                  ks ks]\n             (if (empty? ks) m (recur (conj m [(first ks) v]) (rest ks)))))", "user": "5f8b06afe4b0715f5002d74a"}, {"problem": 156, "code": "(fn [default sequence]\n  (loop [retval {}\n         remaining sequence]\n    (if (not (seq remaining))\n      retval\n      (recur (conj retval (hash-map (first remaining) default))\n             (rest remaining)))))", "user": "5f7ea492e4b0c071e6c840d9"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5f816cc6e4b0c071e6c840f1"}, {"problem": 156, "code": "(fn [d ks] (zipmap ks (repeat d)))", "user": "5f8ba5bce4b0715f5002d74d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5f46d2f9e4b0955706451fc6"}, {"problem": 156, "code": "(fn [default xs] (apply conj (map (fn [x] (hash-map x default)) xs)))", "user": "5f6c331ae4b02876ed9fd054"}, {"problem": 156, "code": "(fn [d, c] (into {} (map #(sorted-map % d) c)))", "user": "5f8e865fe4b0715f5002d76d"}, {"problem": 156, "code": "#(zipmap %2 (vec (repeat (count %2) %1)))", "user": "5f7f285ee4b0c071e6c840e0"}, {"problem": 156, "code": "(fn [x y] (reduce merge (map #(hash-map % x) y)))", "user": "5f8fe45ae4b0715f5002d78d"}, {"problem": 156, "code": "(fn [default keys] (zipmap keys (repeat default)))", "user": "5f8d76c3e4b0715f5002d758"}, {"problem": 156, "code": "(fn [default llaves] \n  (loop [ks llaves mapa {}]\n    (if \n      (empty? ks) mapa\n      (recur (rest ks) (assoc mapa (first ks) default))\n      )\n    )\n  )", "user": "5f8b7506e4b0715f5002d74c"}, {"problem": 156, "code": "(fn [v ks] (into {} (for [k ks] [k v])))", "user": "5f93529ae4b0715f5002d7bc"}, {"problem": 156, "code": "(fn [d s]\n  (loop [s-loop s r {}]\n    (if (first s-loop)\n      (recur (rest s-loop) (conj r [(first s-loop) d]))\n      r)\n   )\n)", "user": "5f9491cbe4b0715f5002d7bf"}, {"problem": 156, "code": "(fn [x y] (reduce #(conj %1 {%2 x}) {} y))", "user": "5f949b97e4b0715f5002d7c1"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5f94d5bfe4b0715f5002d7c2"}, {"problem": 156, "code": "(fn [default ks]\n  (zipmap ks (repeat default)))", "user": "5f8e2a08e4b0715f5002d767"}, {"problem": 156, "code": "(fn\n  [d xs]\n  (reduce (fn [acc x](assoc acc x d)) {} xs))", "user": "5e1c24f4e4b0dc959400852d"}, {"problem": 156, "code": "(fn [default values] (reduce (fn [res val] (assoc res val default)) {} values))", "user": "5ee4545ee4b029a2061bbe8d"}, {"problem": 156, "code": "(fn [x y]\n  (println x y)\n   (loop [value y  res {}]\n     (let [current (first value)]\n       (println current x y)\n       (if (nil? current)\n         res\n         (recur (rest value) (merge res {current x}))\n         )\n       )\n     )\n  )", "user": "5f693778e4b02876ed9fd03f"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5ed11279e4b016b56eae05b7"}, {"problem": 156, "code": "(fn [default-value keys]\n  (apply hash-map (mapcat (fn [e] [e default-value]) keys))\n  )", "user": "5a778224e4b013a48d399761"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5f86a98be4b0649ffcda4caa"}, {"problem": 156, "code": "(fn [default lst] \n  \t(loop [x (seq lst) result {} ] \n      (if x\n        (recur (next x) (conj result [(first x) default]) )\n        result)\n    )\n)", "user": "5f9cbbeae4b0715f5002d828"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5f9c3f63e4b0715f5002d820"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5d965c73e4b0d3f9b434ad33"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5fa17538e4b0f0ebd91b77e3"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5fa2a3afe4b0f0ebd91b77f1"}, {"problem": 156, "code": "(fn [k coll]\n  (apply hash-map (interleave coll (repeat (count coll) k))))", "user": "5fa358a1e4b0f0ebd91b77fd"}, {"problem": 156, "code": "(fn [default v] (into {} (for [k v] [k default])))", "user": "5fa74b82e4b0fa27300f3dda"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5f974321e4b0715f5002d7f3"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5fa15a4de4b0f0ebd91b77df"}, {"problem": 156, "code": "(fn [default-value keys]\n    (reduce\n      #(assoc %1 %2 default-value)\n      {}\n      keys))", "user": "5f331015e4b0574c87022c37"}, {"problem": 156, "code": "(fn map-defaults [default keys]\n  (zipmap keys (repeat default)))", "user": "5f6b35c3e4b02876ed9fd04d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5fa5b72ee4b0fa27300f3dca"}, {"problem": 156, "code": "(fn [x y] (apply merge (map #(hash-map % x) y)))", "user": "5f3567d6e4b0574c87022c44"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5fafa44ee4b08cb800c85b0e"}, {"problem": 156, "code": "(fn [a b] (reduce #(conj %1 [%2 a]) {} b))", "user": "5fa96ddbe4b0fa27300f3dec"}, {"problem": 156, "code": "(fn [a x] (into (sorted-map) (for [b x] [b a])))", "user": "5fab7ea6e4b08cb800c85ad8"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5fb3a096e4b08cb800c85b35"}, {"problem": 156, "code": "(fn [def-val keys]\n   (apply merge (map (fn [k] (hash-map k def-val)) keys)))", "user": "5fb544f6e4b08cb800c85b4e"}, {"problem": 156, "code": "(fn [default keys] (zipmap keys (repeat default)))", "user": "5fb453d3e4b08cb800c85b44"}, {"problem": 156, "code": "(fn [e v] (zipmap v (repeat e)))", "user": "573a0ecce4b0cd1946bd1088"}, {"problem": 156, "code": "(fn [x m] \n  (into {} \n    (map #(conj [%] x) m)))", "user": "5fb7a87be4b08cb800c85b5f"}, {"problem": 156, "code": "(fn  [value xs]\n  \n  (reduce\n   (fn [new-map k]\n     (assoc new-map k value)\n     )\n   {}\n   xs))", "user": "5fa6db67e4b0fa27300f3dd2"}, {"problem": 156, "code": "(fn [x y]\n  (reduce #(conj {%2 x} %1) {} y))", "user": "5fb2eac0e4b08cb800c85b2f"}, {"problem": 156, "code": "(fn [d l] (apply merge (map #(hash-map % d) l)))", "user": "5f5aee4fe4b0a0bc16850aaa"}, {"problem": 156, "code": "#(apply sorted-map (interleave %2 (repeat %1)))", "user": "5fa2b45ce4b0f0ebd91b77f5"}, {"problem": 156, "code": "(fn [val seq]\n  (into {}\n        (for [key seq]\n          (conj [key] val))))", "user": "57b758f4e4b0fbc9809a27cf"}, {"problem": 156, "code": "(fn [default coll] (apply hash-map (interleave coll (repeat default))))", "user": "5fbb010ae4b03f550f448233"}, {"problem": 156, "code": "(fn [default sequence]\n  (zipmap sequence (repeat default)))", "user": "5f9f744fe4b0715f5002d841"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5fba5692e4b03f550f448230"}, {"problem": 156, "code": "(fn [value keys] (reduce (fn [dict key] (assoc dict key value)) {} keys))", "user": "5fb4092de4b08cb800c85b3c"}, {"problem": 156, "code": "(fn [x xs] (zipmap xs (repeat (count xs) x)))", "user": "5fab003de4b08cb800c85ad1"}, {"problem": 156, "code": "(fn [a b] (into {} (map #(vector % a) b)))", "user": "5fbbdc43e4b03f550f448237"}, {"problem": 156, "code": "#(into {} (map (fn[k](vector k %1)) %2))", "user": "5fc241c1e4b0edf42a5593d1"}, {"problem": 156, "code": "(fn [default coll] (into {} (map #(identity [%1 default]) coll)))", "user": "5fc51d88e4b0ad564c76812a"}, {"problem": 156, "code": "(fn [v k] (zipmap k (repeat v)))", "user": "5fc5c303e4b02c825b0c8c1a"}, {"problem": 156, "code": "(fn [default ks]\n  (zipmap ks (repeat (count ks) default) )\n   )", "user": "5f3ee0d9e4b004f08c61c55c"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5fc4d277e4b06ffabd1ef72a"}, {"problem": 156, "code": "(fn my-map-init [default-value keyz] (reduce (fn [mymap key] (assoc mymap key default-value)) {} keyz))", "user": "5fc3850de4b0db0e95a5f3fd"}, {"problem": 156, "code": "(fn [d ks] (apply merge (map #(hash-map % d) ks)))", "user": "54d7e277e4b0a52adc2e2031"}, {"problem": 156, "code": "(fn foo [val keys]\n  (loop [k keys map {}]\n    (if (empty? k)\n        map\n        (recur (rest k) (conj map [(first k) val])))))", "user": "5fb8fe30e4b03f550f448223"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5f96fa49e4b0715f5002d7e9"}, {"problem": 156, "code": "(fn map-default\n  [default-val coll]\n  (zipmap coll (repeat default-val)))", "user": "558ffb4be4b0277789237667"}, {"problem": 156, "code": "(fn [v l] (apply hash-map (interleave l (repeat (count l) v))))", "user": "5a3e1243e4b0447ef91cc5ae"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5cd30a77e4b0ccb061962906"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5fd361f2e4b07e53c2f3f04e"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5fdb51fae4b05ac5b16ea12f"}, {"problem": 156, "code": "(fn [val seq]\n  (into {}\n        (for [key seq]\n          (conj [key] val))))", "user": "5fe18014e4b05ac5b16ea16d"}, {"problem": 156, "code": "(fn [x y]\n  (loop [ls y\n         acc {}]\n    (if (empty? ls)\n      acc\n      (recur (rest ls) (conj acc {(first ls) x})))))", "user": "5fe1b893e4b05ac5b16ea16f"}, {"problem": 156, "code": "(fn [default-value xs] (apply hash-map (interleave xs (repeat default-value))))", "user": "59d4d126e4b0ef0a1e9b5be9"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat (count %2) %1)))", "user": "5fe25678e4b05ac5b16ea175"}, {"problem": 156, "code": "(fn [v ks]\n  (into {}\n        (for [k ks]\n          (conj [k] v))))", "user": "5fe9169ce4b05ac5b16ea1a0"}, {"problem": 156, "code": "(fn [default kys]\n  (reduce conj\n    (map hash-map kys (cycle (conj [] default)))\n  )\n)", "user": "5fe876ade4b05ac5b16ea195"}, {"problem": 156, "code": "(fn [default keys]\n  (zipmap keys (repeat default)))", "user": "5fe75ecfe4b05ac5b16ea18d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))\n;(fn [d m] (reduce #(assoc %1 %2 d) {} m))", "user": "54aec375e4b09f271ff37cf9"}, {"problem": 156, "code": "(fn [in-x in-y]\n      (zipmap in-y (map (fn [x] in-x) in-y)))", "user": "5df94f73e4b0a607a9a45cb6"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %))", "user": "5f548678e4b0a0bc16850a7e"}, {"problem": 156, "code": "(fn [default keys]\n      (reduce #(assoc %1 %2 default) {} keys))", "user": "5bf9d9b7e4b0bdcf453d15c4"}, {"problem": 156, "code": "(fn [val keys] \n  (reduce #(assoc %1 %2 val) {} keys))", "user": "5fef4292e4b05ac5b16ea1d7"}, {"problem": 156, "code": "(fn abc [d sq]\n  (zipmap sq (repeat (count sq) d)))", "user": "5fe09d1fe4b05ac5b16ea15b"}, {"problem": 156, "code": "(fn default-map [dv s]\n     (zipmap s (repeat dv)))", "user": "5fd8bcb3e4b05ac5b16ea11b"}, {"problem": 156, "code": "(fn [def-val keys-sq]\n  (into {} (for [key keys-sq] [key def-val])  )\n  )", "user": "5fee18f2e4b05ac5b16ea1d2"}, {"problem": 156, "code": "(fn [v k] (apply hash-map (interleave k (repeat v))))", "user": "5ff3aca3e4b05ac5b16ea205"}, {"problem": 156, "code": "(fn [default keys]\n  (zipmap keys (repeat default)))", "user": "5ff32e20e4b05ac5b16ea1ff"}, {"problem": 156, "code": "(fn [d v] (reduce (fn [m e] (assoc m e d)) {} v))", "user": "5fada7cce4b08cb800c85af5"}, {"problem": 156, "code": "(fn [k c] (apply hash-map (interleave c (map #(do %1 k) c))))", "user": "5ff4e28ae4b06df49cee1486"}, {"problem": 156, "code": "(fn [dv ks]\n        (zipmap ks (repeat dv)))", "user": "546c4377e4b00cfc9eacc177"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "5ff454a1e4b05ac5b16ea20d"}, {"problem": 156, "code": "; (fn [default-v keys-col]\n;     (reduce (fn [acc item] (assoc acc item default-v))\n;             {}\n;             keys-col))\n\n; #(apply assoc {}\n;         (interleave %2 (repeat %1)))\n\n; #(apply hash-map (interleave %2 (repeat %1)))\n\n; #(into {} (for [x %2] [x %1]))\n\n#(zipmap %2 (repeat %))", "user": "591ad160e4b09b4ee5954bdf"}, {"problem": 156, "code": "(fn [v s] (zipmap s (repeat v)))", "user": "5fdb8657e4b05ac5b16ea133"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5fc56712e4b081dd5340e3e7"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5f96909be4b0715f5002d7d9"}, {"problem": 156, "code": "(fn [d a] (reduce #(assoc %1 %2 d) {} a))", "user": "592334c7e4b0a390037439ee"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %)))", "user": "5fd10010e4b07e53c2f3f02a"}, {"problem": 156, "code": "(fn [df kys] (reduce merge {} (for [k kys d [df]] {k d})))", "user": "5ff88607e4b06df49cee14a6"}, {"problem": 156, "code": "(fn [defVal coll]\n  (reduce #(assoc %1 %2 defVal) {} coll))", "user": "5fce0cc5e4b07e53c2f3f000"}, {"problem": 156, "code": "(fn map-def [def-val seq-of-keys]\n\n(reduce #(assoc %1 %2 def-val) {} seq-of-keys)\n\n)", "user": "5ff676a9e4b06df49cee1497"}, {"problem": 156, "code": "(fn [a b] (reduce merge (map #(hash-map % a)  b)))", "user": "5ff82adae4b06df49cee14a4"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5f969088e4b0715f5002d7d4"}, {"problem": 156, "code": "(fn d [default coll]\n    (reduce merge (map (fn [x] {x default}) coll)))", "user": "5ff8ead1e4b06df49cee14ab"}, {"problem": 156, "code": "(fn\n  [v m]\n  (into {} (map #(vector % v) m)))", "user": "5ff61113e4b06df49cee1492"}, {"problem": 156, "code": "(fn [d col] (reduce #(assoc %1 %2 d) {} col))", "user": "5ffe889ce4b074f607df6603"}, {"problem": 156, "code": "(fn [d coll] (zipmap coll (repeat d)))", "user": "529e3258e4b04e0c58e87b8d"}, {"problem": 156, "code": "(fn [n coll]\n  (zipmap coll (repeat n)))", "user": "5ffc18cae4b074f607df65f1"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5fff510de4b074f607df6608"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "6001c90ce4b074f607df6626"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "6001ea38e4b074f607df662a"}, {"problem": 156, "code": "(fn [k items] (reduce #(conj {%2 k} %1) {} items))", "user": "60031abfe4b074f607df6637"}, {"problem": 156, "code": "#(into {} (map (fn [key] (hash-map key %1)) %2))", "user": "5ffe6082e4b074f607df6600"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5eea5c98e4b029a2061bbebf"}, {"problem": 156, "code": "(fn [d m]\n  (apply hash-map\n    (mapcat #(identity [% d]) m)))", "user": "60036736e4b074f607df663b"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5ff709e4e4b06df49cee149b"}, {"problem": 156, "code": "(fn [d k] (zipmap k (repeat d)))", "user": "6001460ce4b074f607df6611"}, {"problem": 156, "code": "(fn [d s]\n  (reduce #(assoc %1 %2 d) \n          {} \n          s))", "user": "60032b7fe4b074f607df6638"}, {"problem": 156, "code": "(fn do-map [v ks]\n  (loop [s {}\n         v v \n         ks ks]\n    (if (empty? ks) s\n      (recur (assoc s (first ks) v)\n             v\n             (rest ks)))))", "user": "591770dae4b09b4ee5954b9c"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "600201bce4b074f607df662b"}, {"problem": 156, "code": "(fn [defaultValue keySeq] (\n                            reduce #(assoc %1 %2 defaultValue) {} keySeq\n                                   )\n  )", "user": "60057cd4e4b074f607df664a"}, {"problem": 156, "code": "(fn [default values] (apply hash-map (interleave values (repeat default))))", "user": "5fbf6fe7e4b0ad6fc3476147"}, {"problem": 156, "code": "(fn [v ks] (reduce #(assoc %1 %2 v) {} ks))", "user": "6004c750e4b074f607df6645"}, {"problem": 156, "code": "(fn [v k] (zipmap k (repeat v)))", "user": "600777a3e4b074f607df6667"}, {"problem": 156, "code": "(fn [d ks]\n  (reduce #(assoc %1 %2 d) {} ks))", "user": "5ffd7ce6e4b074f607df65fb"}, {"problem": 156, "code": "(fn [val keys]\n  (reduce #(assoc %1 %2 val) {} keys))", "user": "5f37263de4b0574c87022c4e"}, {"problem": 156, "code": "(fn\n  [x ks]\n  (apply hash-map (interleave ks (repeat (count ks) x))))", "user": "5be1c6c6e4b0ed4b8aab4ca5"}, {"problem": 156, "code": "(fn [v s] (into {} (map (fn [x] [x v]) s)))", "user": "600ae927e4b074f607df6689"}, {"problem": 156, "code": "(fn [val ks] (reduce into {} (map #(assoc {} % val) ks)))", "user": "5feb6850e4b05ac5b16ea1b8"}, {"problem": 156, "code": "(fn [v keys-coll]\n  (reduce #(assoc %1 %2 v) {} keys-coll))", "user": "5ff64845e4b06df49cee1495"}, {"problem": 156, "code": "(fn [x ys]\n  (reduce (fn [acc cur]\n            (into acc {cur x})) {} ys))", "user": "5da7176ae4b000c986472c13"}, {"problem": 156, "code": "(fn [val keys]\n      (reduce\n       #(into %1 {%2 val})\n       {}\n       keys\n       )\n      )", "user": "58db48a5e4b0a4d5acaab679"}, {"problem": 156, "code": "(fn [default lst] (reduce (fn [acc val] (assoc acc val default)) {} lst))", "user": "5b2d1c1de4b025bcb146f2c0"}, {"problem": 156, "code": "(fn [default ks] (reduce #(assoc % %2 default) {} ks))\n; This solution is nicer, but not mine:\n;#(zipmap %2 (repeat %))", "user": "5edd05bfe4b0c7845d86b0f3"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "60096aabe4b074f607df667f"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "6011b89ee4b074f607df66bc"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5a9f2c53e4b0d174b936c812"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "583369e6e4b089d5ab817c9c"}, {"problem": 156, "code": "(fn [d a] (into {} (map (fn [x] {x d}) a)))", "user": "60109997e4b074f607df66b3"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5ff70cfde4b06df49cee149c"}, {"problem": 156, "code": "(fn [def-val keys]\n  (->> keys\n       (map #(vector % def-val))\n       (into {})))", "user": "5dc88a38e4b02f9375f4e1db"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "60195030e4b0bf4ca6b10920"}, {"problem": 156, "code": "(fn default-map [def-value ks]\n  (reduce #(assoc %1 %2 def-value) {} ks))", "user": "601aaa93e4b0bf4ca6b10926"}, {"problem": 156, "code": "(fn [default keys] (reduce (fn [xs x] (conj xs {x default})) {} keys))", "user": "55dec39ce4b050e68259b3e6"}, {"problem": 156, "code": "(fn [default l]\n  (apply hash-map (mapcat #(list %1 default) l)))", "user": "601004d6e4b074f607df66b2"}, {"problem": 156, "code": "(fn [v coll] (reduce #(assoc %1 %2 v) {} coll))", "user": "5eedfc62e4b07c55ae4a050e"}, {"problem": 156, "code": "#(reduce (fn [acc n]\n             (assoc acc n %1))\n           {}\n           %2)", "user": "4e38f245535deb9a81d77f3e"}, {"problem": 156, "code": "(fn [d s]\n  (zipmap s (repeat d)))", "user": "5ff19fe0e4b05ac5b16ea1f4"}, {"problem": 156, "code": "(fn [d, v]\n   (into {} (map #(assoc {} % d) v)))", "user": "6022429be4b0d5df2af22200"}, {"problem": 156, "code": "(fn [default s]\n  (zipmap s (repeat default)))", "user": "5fb68f09e4b08cb800c85b58"}, {"problem": 156, "code": "#(reduce (fn [m k] (assoc m k %1)) {} %2)", "user": "5185ad63e4b0da5a5be3bac2"}, {"problem": 156, "code": "(fn [k l]\n  (reduce #(assoc %1 %2 k) {} l))", "user": "60228147e4b0d5df2af22202"}, {"problem": 156, "code": "(fn [v mapa]\n  (zipmap mapa (repeat v)))", "user": "60264d89e4b0d5df2af2222d"}, {"problem": 156, "code": "(fn [v xs]\n  (zipmap xs (repeat v)))", "user": "6026d2cae4b0d5df2af22232"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "60267951e4b0d5df2af22230"}, {"problem": 156, "code": "(fn [val keys]\n  (zipmap keys (repeat val)))", "user": "60284041e4b0d5df2af22243"}, {"problem": 156, "code": "(fn foo\n    ([defval keyz]\n    (zipmap keyz (repeat (count keyz) defval))))", "user": "6028365be4b0d5df2af22242"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "601bdcb3e4b0bf4ca6b10930"}, {"problem": 156, "code": "(fn [default keys] (into {} (map (fn [key] (vector key default)) keys)))", "user": "602b90c1e4b0d5df2af22266"}, {"problem": 156, "code": "(fn [v ks]\n   (apply hash-map (-> (->> ks (interpose v) (vec)) (conj v))))", "user": "6026737ee4b0d5df2af2222f"}, {"problem": 156, "code": "(fn [val keys]\n  (zipmap keys (repeat val)))", "user": "5fea32f3e4b05ac5b16ea1aa"}, {"problem": 156, "code": "(fn [def-val my-keys]\n  (zipmap my-keys (repeat (count my-keys) def-val)))", "user": "591e0782e4b09b4ee5954c25"}, {"problem": 156, "code": "(fn default-values [v col] (reduce #(conj %1 [%2 v]) {} col))", "user": "602abb59e4b0d5df2af2225e"}, {"problem": 156, "code": "(fn default-map [d ks]\n  (apply assoc {} (interleave ks (repeat d))))", "user": "602d5eade4b0d5df2af22279"}, {"problem": 156, "code": "#(into {} (set (for [y %2] [y %1])))", "user": "602f8400e4b0d5df2af22299"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "60263f9fe4b0d5df2af2222c"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "60231327e4b0d5df2af2220b"}, {"problem": 156, "code": "(fn fillit\n  [value keys]\n  (zipmap keys (repeat value))\n  )", "user": "602f56c5e4b0d5df2af22297"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "600eb95de4b074f607df66a6"}, {"problem": 156, "code": "(fn map-defaults [default keys]\n  (zipmap keys (repeat default)))", "user": "602f57cfe4b0d5df2af22298"}, {"problem": 156, "code": "(fn [v ks]\n  (apply hash-map (interleave ks (repeat v))))", "user": "5571d6e5e4b09a3098a5253f"}, {"problem": 156, "code": "(fn [default keys]\n  (into (hash-map) (for [key keys] [key default])))", "user": "6023a3abe4b0d5df2af22212"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "602b6cf7e4b0d5df2af22265"}, {"problem": 156, "code": "(fn\n  [val coll]\n  (loop [ans {} curr-coll coll]\n    (if (empty? curr-coll)\n      ans\n      (recur (assoc ans (first curr-coll) val) (rest curr-coll))\n      )\n    )\n  )", "user": "60337f1fe4b0d5df2af222c1"}, {"problem": 156, "code": "#(apply hash-map \n        (reduce (fn [x y] (conj x y %)) [] %2))", "user": "5d9d10d5e4b0eb781811cdb4"}, {"problem": 156, "code": "(fn [v s]\n  (loop [r s\n        h-m {}]\n    (if (empty? r)\n      h-m\n      (recur (rest r) (assoc h-m (first r) v))\n    )\n  )\n)", "user": "60335b35e4b0d5df2af222bf"}, {"problem": 156, "code": "(fn \n  [default keys] \n  (apply \n   \thash-map \n   \t(interleave \n     \tkeys \n     \t(repeat default))))", "user": "603673b9e4b0d5df2af222db"}, {"problem": 156, "code": "(fn [dval ks] (reduce (fn [m k] (assoc m k dval)) {} ks))", "user": "6037e468e4b0d5df2af222e8"}, {"problem": 156, "code": "(fn om [seqs keks]\n        ;(loop [seqs seqs keks keks]\n          (if (empty? keks)\n            nil\n            (conj (hash-map (first keks) seqs) (om seqs (rest keks)))))", "user": "6038b6b4e4b0d5df2af222ef"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "600a061de4b074f607df6683"}, {"problem": 156, "code": "(fn [v ks]\n  (reduce\n   (fn [acc curr] (assoc acc curr v))\n   {}\n   ks))", "user": "603d5f2ae4b0d5df2af2230c"}, {"problem": 156, "code": "(fn map-default [value keys]\n  (zipmap keys (take (count keys) (repeat value))))", "user": "60323240e4b0d5df2af222b3"}, {"problem": 156, "code": "(fn\n  omision\n  [valor llaves]\n  (if\n    (= 0 (count llaves))\n    {}\n    (conj (omision valor (rest llaves)) [(first llaves) valor])))", "user": "603e899ee4b0d5df2af22313"}, {"problem": 156, "code": "(fn\n  [v m]\n  (zipmap m (repeat v)))", "user": "603e8a3be4b0d5df2af22314"}, {"problem": 156, "code": "(fn to-map [defa coll]\n    (if (nil? (first coll))\n      {}\n      (assoc (to-map defa (rest coll)) (first coll) defa)\n    ))", "user": "603eb408e4b0d5df2af22319"}, {"problem": 156, "code": "(fn [default keys] (zipmap keys (repeat default)))", "user": "601c39eee4b0bf4ca6b10937"}, {"problem": 156, "code": ";(into (sorted-map) (map #(vector % 0) [:a :b :c]))\n#(into (sorted-map) (map (fn [x] (vector x %1)) %2))", "user": "6040f595e4b0d5df2af2232f"}, {"problem": 156, "code": "(fn [default map] (zipmap map (repeat default)))", "user": "6045063fe4b02d28681c77b4"}, {"problem": 156, "code": "(fn [v k] (zipmap k (repeat v)))", "user": "6045582fe4b02d28681c77b6"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5fae5441e4b08cb800c85afb"}, {"problem": 156, "code": "(fn \n   [value keys]\n   (reduce (fn [m k] (assoc m k value)) {} keys))", "user": "60396c95e4b0d5df2af222f4"}, {"problem": 156, "code": "(fn [default-value vec-arg]\n  (zipmap vec-arg (repeat default-value)))", "user": "60460824e4b02d28681c77bc"}, {"problem": 156, "code": "(fn [a b]\n  (zipmap b(repeat a)))", "user": "60462028e4b02d28681c77c2"}, {"problem": 156, "code": "(fn [default, ngler] (zipmap ngler (repeat default)))", "user": "6034e358e4b0d5df2af222d1"}, {"problem": 156, "code": "(fn [a b] (zipmap b (repeat a)))", "user": "60461117e4b02d28681c77bf"}, {"problem": 156, "code": "(fn [default_value keys] (zipmap keys (repeat default_value)))", "user": "60460876e4b02d28681c77bd"}, {"problem": 156, "code": "(fn f [d keys]\n  (if (empty? keys)\n     {}\n     (assoc (f d (rest keys))\n       (first keys) d)))", "user": "60486e8ae4b02d28681c77db"}, {"problem": 156, "code": "(fn [v coll] (reduce #(assoc %1 %2 v) {} coll))", "user": "6040e6dbe4b0d5df2af2232a"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "604c7c13e4b0b7ec0ac60abf"}, {"problem": 156, "code": "(fn [x, v] (zipmap v (repeat x)))", "user": "604f4be1e4b0b7ec0ac60ace"}, {"problem": 156, "code": "(fn [default keys]\n  (apply merge (map #(hash-map % default) keys)))", "user": "563e022be4b0da801c4e4664"}, {"problem": 156, "code": "#(into {} (for [y %2] (conj {y %1} nil)))", "user": "5f1eec36e4b0f565ad998274"}, {"problem": 156, "code": "(fn [v m]\n  (loop [result {}\n         keys m]\n    (if (empty? keys)\n      result\n      (recur (assoc result (first keys) v)\n             (rest keys)))))", "user": "6051bcfae4b056659d634203"}, {"problem": 156, "code": "(fn [d coll]\n  (reduce #(assoc %1 %2 d) {} coll))", "user": "6020365ae4b0bf4ca6b10960"}, {"problem": 156, "code": "(fn [v xs] (reduce #(assoc %1 %2 v) {} xs))", "user": "603f6623e4b0d5df2af2231f"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "526759b3e4b03e8d9a4a715b"}, {"problem": 156, "code": "#(->> (repeat %1) (interleave %2) (apply assoc {}))", "user": "60538924e4b04c8f2157d153"}, {"problem": 156, "code": "(fn [x y]\n      (into {} (map #(hash-map % x) y)))", "user": "5536452ae4b09218d5f44fbb"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "6059d2e0e4b07e92fa001ace"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "6059d9c8e4b07e92fa001ad0"}, {"problem": 156, "code": "(fn [default_val input] (reduce\n                         (fn [new-map inp]\n                           (assoc new-map inp default_val))\n                         {}\n                         input))", "user": "605b7085e4b079a07f8593fa"}, {"problem": 156, "code": "(fn [val keys] (reduce #(assoc %1 %2 val) {} keys))", "user": "5b522591e4b02d533a91bd09"}, {"problem": 156, "code": "(fn [v ks] (apply hash-map (mapcat #(list % v) ks)))", "user": "605b7a90e4b079a07f8593fc"}, {"problem": 156, "code": "(fn [v ks] \n  (into {} \n        (map (fn [k] [k v]) ks)))", "user": "604d3cb1e4b0b7ec0ac60ac2"}, {"problem": 156, "code": "#(reduce (fn [coll k] (assoc coll k %)) {} %2)", "user": "60471241e4b02d28681c77c9"}, {"problem": 156, "code": "(fn foo [d ks] (apply conj {} (for [k ks] [k d])))", "user": "605cbc57e4b0fb8c998d2c7b"}, {"problem": 156, "code": "(fn [default coll] \n(reduce (fn [new-coll key] (assoc new-coll key default)) {} coll))", "user": "5ce6a0f4e4b0a17bb84e2b8d"}, {"problem": 156, "code": "(fn [default keys]\n      (zipmap keys (repeat default)))", "user": "605a876be4b000d535e6f53c"}, {"problem": 156, "code": "(fn [default coll]\n  (reduce \n   \t(fn [acc x]\n      (assoc acc x default))\n   \t{}\n   coll\n   ))", "user": "53b0750fe4b047364c044483"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5f755d0be4b02876ed9fd0a9"}, {"problem": 156, "code": "(fn mapping\n  [default k]\n  (reduce #(assoc %1 %2 default) {} k))", "user": "5f6adf5ee4b02876ed9fd049"}, {"problem": 156, "code": "(fn [vl chaves] (into {} (for [item chaves, :let [lista {}]] (assoc lista item vl))))", "user": "605f92bae4b03746e80ebf62"}, {"problem": 156, "code": "(fn [v coll]\n  (into {} (for [x coll] {x v})))", "user": "60522feae4b0af2ba86d5a0a"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "55129636e4b06e50f9beb1ab"}, {"problem": 156, "code": "#(reduce (fn [out, key] (assoc out key %1)) {} %2)", "user": "60622c6ee4b03746e80ebf72"}, {"problem": 156, "code": ";(fn\n  ;[elem v1]\n  ;(loop [ans {} v v1]\n  ;  (if (empty? v)\n  ;    ans\n  ;    (recur (assoc ans (first v) elem) (rest v))))\n  ;)\n  (fn [value keys] (reduce #(assoc %1 %2 value) {} keys))", "user": "60617afee4b03746e80ebf6c"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5a22a54fe4b0ff51aa4b32cb"}, {"problem": 156, "code": "(fn [v ks]\n  (reduce #(assoc %1 %2 v) {} ks))", "user": "5cbb0436e4b026601754b9cc"}, {"problem": 156, "code": "(fn [default coll]\n  (into {} (map #(vector % default) coll)))", "user": "5f665d45e4b02876ed9fd02f"}, {"problem": 156, "code": "(fn my-map [e col]\n  (into {} (reduce (fn [col2 e2] (concat col2 (hash-map e2 e))) {} col))\n)", "user": "6065755ee4b069485764ddcc"}, {"problem": 156, "code": "(fn [d ks]\n  (into {} (map #(vector % d) ks)))", "user": "606aafcfe4b069485764ddf6"}, {"problem": 156, "code": "(fn [v ks] (zipmap ks (repeat v)))", "user": "606a70a5e4b069485764ddf2"}, {"problem": 156, "code": "(fn [val keys] (reduce #(assoc %1 %2 val) {} keys))", "user": "60689984e4b069485764dde6"}, {"problem": 156, "code": "(fn [defaultval keyseq]\n\n   (zipmap keyseq (vec (repeat (count keyseq) defaultval)))\n\n   )", "user": "60630af9e4b069485764ddbc"}, {"problem": 156, "code": "(fn [x keys]\n  (zipmap keys (repeat x)))", "user": "60537cd1e4b04c8f2157d152"}, {"problem": 156, "code": "(fn m [x l]\n    (if (empty? l)\n      {}\n      (assoc (m x (rest l)) (first l) x)))", "user": "603ae21de4b0d5df2af222fb"}, {"problem": 156, "code": "(fn sf\n  ([a coll] (sf a coll {}))\n  ([a coll my-map]\n   (if (zero? (count coll))\n     my-map\n     (sf a (rest coll) (assoc my-map (first coll) a)))))", "user": "6033f8e9e4b0d5df2af222c6"}, {"problem": 156, "code": "(fn [default coll] (reduce #(assoc %1 %2 default) {} coll))", "user": "606c87aae4b069485764de0d"}, {"problem": 156, "code": "(fn [a b] (zipmap b (repeat a)))", "user": "5bbcb71ce4b0a20761a23629"}, {"problem": 156, "code": "(fn mapdefault [default pseq]\n  (into {} (map #(vector % default) pseq)))", "user": "60606490e4b03746e80ebf67"}, {"problem": 156, "code": "(fn\n  [default options]\n  (reduce (fn [result key]\n            (assoc result key default))\n          {}\n          options))", "user": "603e8e3ae4b0d5df2af22316"}, {"problem": 156, "code": "(fn [value keys] (loop [keylst keys result {}]\n                    (if (empty? keylst)\n                      result\n                      (recur (rest keylst) (assoc result (first keylst) value)))))", "user": "606d75f5e4b069485764de13"}, {"problem": 156, "code": "(fn [value ks] (zipmap ks (repeat value)))", "user": "6074dfa4e4b069485764de4c"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "6074e088e4b069485764de4d"}, {"problem": 156, "code": "(fn [k m]\n  (zipmap m (repeat k))\n  )", "user": "6074f5ede4b069485764de52"}, {"problem": 156, "code": "(fn [default keys]\n  (reduce #(assoc %1 %2 default) {} keys))", "user": "606d7f1ce4b069485764de14"}, {"problem": 156, "code": "(fn [default s]\n   (reduce #(assoc %1 %2 default) {} s)\n   )", "user": "6024544be4b0d5df2af2221f"}, {"problem": 156, "code": "(fn [default-val xs]\n  (zipmap xs (repeat default-val)))", "user": "605b49b7e4b079a07f8593f8"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))\n\n;;; aplicar hashmap, pasa cada elemento de 2 que es [ ] repetir 1", "user": "6075c214e4b069485764de5b"}, {"problem": 156, "code": "(fn [val keys] (zipmap keys (take (count keys) (cycle (if (seq? val) val (list val))))))", "user": "6074df6fe4b069485764de4b"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "606ff89be4b069485764de22"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "60764350e4b069485764de5e"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "607900cde4b0a637ed78035c"}, {"problem": 156, "code": "(fn [default-v ks]\n  (reduce (fn [result k]\n            (assoc result k default-v))\n          {}\n          ks))", "user": "5cf938a5e4b0b71b1d808a90"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "6070c7bae4b069485764de27"}, {"problem": 156, "code": "(fn [dv stuff] (into {} (map #(hash-map % dv) stuff )))", "user": "5ce67c36e4b0a17bb84e2b88"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "60777335e4b0a637ed78034f"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "607e1d32e4b03d835a6eaeda"}, {"problem": 156, "code": "(fn map-defaults [default keys]\n  (zipmap keys (repeat default)))", "user": "607dd962e4b03d835a6eaed2"}, {"problem": 156, "code": "(fn [v x] ( zipmap x (repeat (count x) v)))", "user": "6076adb2e4b069485764de60"}, {"problem": 156, "code": "(fn [rando-key rando-seq]\n  (loop [empty-map {}\n         x rando-seq]\n    (if (empty? x)\n      empty-map\n      (recur (assoc empty-map (first x) rando-key) (rest x)))))", "user": "607d6bc1e4b03d835a6eaecc"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "6074e1ade4b069485764de4e"}, {"problem": 156, "code": "(fn [k m] (zipmap m (repeat (count (keys m)) k)))", "user": "607e1d9de4b03d835a6eaedb"}, {"problem": 156, "code": "(fn [val keys]\n  (zipmap keys (repeat val)))", "user": "606bb930e4b069485764de04"}, {"problem": 156, "code": "(fn [default keys]   \n  (apply hash-map (interleave keys (repeat default))))", "user": "5f82609ae4b0c071e6c840f9"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "6081b7fce4b0736b099e42d4"}, {"problem": 156, "code": "(fn [dv kys]\n  (zipmap kys (repeat dv)))", "user": "5d917ef0e4b0915913b1d402"}, {"problem": 156, "code": "(fn [default coll]\n  (into {} (map #(vector % default) coll)))", "user": "607a1523e4b0a637ed78036a"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5f0a65dae4b09a3f05b71806"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "6074e1e4e4b069485764de4f"}, {"problem": 156, "code": "(fn [v kxs]\n  (zipmap kxs (repeat v)))", "user": "60836285e4b0736b099e42e4"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "6081e475e4b0736b099e42d6"}, {"problem": 156, "code": "#(into {} (for [x %2] [x %1]))", "user": "5aa098fae4b0d174b936c82e"}, {"problem": 156, "code": "(fn [v k] (loop [dict {}\n                  kys k] \n               (if (empty? kys)\n                   dict\n                   (recur (assoc dict (first kys) v) (drop 1 kys)))))", "user": "6074e278e4b069485764de51"}, {"problem": 156, "code": "#(apply hash-map(interleave %2(repeat %1)))", "user": "6085edade4b0736b099e42fc"}, {"problem": 156, "code": "(fn [default keys]\n  (reduce #(assoc %1 %2 default) {} keys))", "user": "60849bd6e4b0736b099e42f2"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "60838e6de4b0736b099e42e9"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "6086cdefe4b0736b099e4302"}, {"problem": 156, "code": "(fn [dv sq] (reduce (fn [m p] (merge m {p dv}) ) {} sq))", "user": "60847b29e4b0736b099e42f0"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "6088c22ee4b0ae75613dcee4"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "608828dee4b0ae75613dcee1"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "60803206e4b0736b099e42cc"}, {"problem": 156, "code": "(fn MapDefaults [lla sig]\n  (zipmap sig (repeat lla)))", "user": "607508f3e4b069485764de54"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "607b6452e4b0a637ed780375"}, {"problem": 156, "code": "(fn [default ks] (apply assoc {} (interleave ks (repeat (count ks) default))))", "user": "6078ce29e4b0a637ed78035a"}, {"problem": 156, "code": "(fn spotmapwithdefaults [d ks]\n  (if (empty? ks)\n   {}\n   (assoc (spotmapwithdefaults d (rest ks)) (first ks) d)))", "user": "60882700e4b0ae75613dcedf"}, {"problem": 156, "code": "(fn [val keys]\n  (loop [keys keys\n         ret {}]\n    (if (empty? keys)\n      ret\n      (recur (rest keys) (assoc ret (first keys) val)))))", "user": "607b04e5e4b0a637ed780373"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "608b3fe1e4b0adce4b61c442"}, {"problem": 156, "code": "(fn [default-val key-names]\n  (reduce #(assoc %1 %2 default-val)\n          {}\n          key-names))", "user": "608910a8e4b0ae75613dceed"}, {"problem": 156, "code": "(fn [v ks] (reduce #(assoc %1 %2 v) {} ks))", "user": "6086abade4b0736b099e42ff"}, {"problem": 156, "code": "(fn [val set]  (apply hash-map(conj ( into [] (interpose val set)) val)))", "user": "607f3336e4b05857a65e7747"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "607e1cf9e4b03d835a6eaed9"}, {"problem": 156, "code": "(fn [default hmap]\n  (apply hash-map (interleave hmap (repeat (count hmap) default)))\n  )", "user": "60752ef6e4b069485764de55"}, {"problem": 156, "code": "(fn [k v]\n   (zipmap v (into [] (take (count v) (repeat k))) ) \n   )", "user": "60845eb8e4b0736b099e42ef"}, {"problem": 156, "code": "(fn [default seqq]\n  (apply hash-map (mapcat #(vector % default) seqq)))", "user": "6088395de4b0ae75613dcee2"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "609083a8e4b03bd49d9f36cb"}, {"problem": 156, "code": "#(zipmap %2 (repeat (count %2) %1))", "user": "6090e617e4b03bd49d9f36ce"}, {"problem": 156, "code": "(fn [v ks]\n  (zipmap ks (repeat v)))\n\n;(fn [v ks]\n;  (reduce (fn [m k] (assoc m k v))\n;          {}\n;          ks))\n\n;(fn [v ks]\n;  (apply hash-map (interleave ks (repeat v))))\n\n;(fn [v ks]\n;  (into {} (map vec (partition 2 (interleave ks (repeat v))))))\n\n;(fn [v ks]\n;  (into {} (map vector ks (repeat v))))", "user": "60794173e4b0a637ed78035d"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "608335a4e4b0736b099e42e3"}, {"problem": 156, "code": "(fn [v keys] \n  (into {} (map #(assoc {} %1 v) keys)))", "user": "608ec5e4e4b03bd49d9f36c0"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "608e6047e4b03bd49d9f36bf"}, {"problem": 156, "code": "(fn [default keys]\n  (zipmap keys (repeat default)))", "user": "6097b95ae4b00e9e6653c3f6"}, {"problem": 156, "code": "(fn [v ks] (into {} (for [k ks] [k v])))", "user": "6098263be4b00e9e6653c3f9"}, {"problem": 156, "code": "(fn [v ks]\n  ((fn r [v ks m]\n     (if (empty? ks)\n       m\n       (r v (rest ks) (assoc m (first ks) v)))) v ks {}))", "user": "60919461e4b00e9e6653c3d7"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "4f30896ce4b0d6649770a07b"}, {"problem": 156, "code": "#(reduce (fn [result k] (assoc result k %1)) {} %2)", "user": "60919828e4b00e9e6653c3d8"}, {"problem": 156, "code": "(fn [default-value key-seq]\n  (->> key-seq\n       (map #(vector % default-value))\n       (into {})))", "user": "60948c3ae4b00e9e6653c3e7"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "608ee2f7e4b03bd49d9f36c1"}, {"problem": 156, "code": "(fn [v col] (zipmap col (repeat v)))", "user": "5c481764e4b0e06e1360a3ba"}, {"problem": 156, "code": "(fn [v m] (reduce #(assoc %1 %2 v) {} m))", "user": "60a23802e4b00e9e6653c440"}, {"problem": 156, "code": "(fn [v k-list]\n  (zipmap k-list (repeat v)))", "user": "60a42199e4b00e9e6653c454"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "609aa543e4b00e9e6653c40c"}, {"problem": 156, "code": "(fn [param1 param2]\n  (let [m (map #(hash-map % param1) param2)]\n    (apply merge m)))", "user": "604a3daee4b02d28681c77f2"}, {"problem": 156, "code": "(fn [defx valsx] (reduce #(into %1 {%2 defx}) {} valsx))", "user": "609980fce4b00e9e6653c408"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "609c8ac9e4b00e9e6653c41a"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "60ab1536e4b00e9e6653c47e"}, {"problem": 156, "code": "(fn [default sq]\n  (let [m {}]\n    (reduce merge {}\n            (map #(assoc m % default) sq))))", "user": "60a52517e4b00e9e6653c459"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "60ae0ac5e4b00e9e6653c495"}, {"problem": 156, "code": "(fn [d keys]\n  (into {} (map (fn [k] [k d]) keys)))", "user": "60a39b80e4b00e9e6653c450"}, {"problem": 156, "code": "(fn [key values]\n  (let [c (count values)\n        nvalues (replicate c key)]\n    (apply assoc {} (interleave values nvalues))))", "user": "60aecd73e4b00e9e6653c49a"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "60b174f3e4b0e0fa5f1b4226"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "57123c96e4b09c608db70454"}, {"problem": 156, "code": "(fn mappy-default [default seq]\n  (into {} (map (fn [x] {x default}) seq)))", "user": "6036b21ce4b0d5df2af222de"}, {"problem": 156, "code": "(fn dmap [d items] \n    ((fn iter [remain acc] \n        (if (empty? remain) \n            acc \n            (iter (rest remain) (assoc acc (first remain) d)))) items (hash-map)))", "user": "60b2aaebe4b0e0fa5f1b4228"}, {"problem": 156, "code": "(fn map-defaults [default keys]\n  (zipmap keys (repeat default)))", "user": "60b0e7efe4b0e0fa5f1b4223"}, {"problem": 156, "code": "(fn [default lst]\n  (loop [res {} lst lst]\n    (if (empty? lst)\n      res\n      (let [[x & remaining] lst]\n      (recur (assoc res x default) remaining)))))", "user": "51b920bfe4b0e871ca4958f9"}, {"problem": 156, "code": "(fn [val keys] (reduce (fn [m k] (assoc m k val)) {} keys))", "user": "60b8f098e4b0e0fa5f1b425f"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "60a24821e4b00e9e6653c442"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "5d28d935e4b092dab7f59c88"}, {"problem": 156, "code": "#(apply merge (map (fn [k] {k %1}) %2))", "user": "60bb21d5e4b0e0fa5f1b4281"}, {"problem": 156, "code": "(fn [v col] (reduce #(assoc %1 %2 v) {} col))", "user": "60b5fa96e4b0e0fa5f1b4242"}, {"problem": 156, "code": "(fn [dflt vec]\n    (into {} (map vector vec (take (count vec) (repeat dflt)))))", "user": "608e5697e4b03bd49d9f36be"}, {"problem": 156, "code": "(fn [val keys]\n  (into {} (map (fn [key] [key val]) keys)))", "user": "60bca877e4b0e0fa5f1b4287"}, {"problem": 156, "code": "(fn [a ks]\n  (apply hash-map (interleave ks (repeat (count ks) a))))", "user": "5f6580e7e4b02876ed9fd023"}, {"problem": 156, "code": "(fn [v keys] (apply hash-map (vec (mapcat (fn [x] [x v]) keys))))", "user": "53720c5ce4b0493c815db704"}, {"problem": 156, "code": "#(zipmap %2 (repeat %))", "user": "5d3e8c3de4b01671435dbd73"}, {"problem": 156, "code": "(fn [default map-keys]\n  (into {} (for [k map-keys] [k default])))", "user": "5f1c0447e4b0f565ad99825c"}, {"problem": 156, "code": "(fn [default coll]\n  (into {} (map #(vector % default) coll)))", "user": "60c0ceb7e4b0e0fa5f1b42a6"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %)))", "user": "60c90322e4b0e0fa5f1b4302"}, {"problem": 156, "code": "(fn [val keys]\n  (apply hash-map (interleave keys (repeat val))))", "user": "60c91f48e4b0e0fa5f1b4304"}, {"problem": 156, "code": "(fn f [d v] (if (= v []) nil (conj {(first v) d} (f d (vec (rest v))))))", "user": "60c86bbde4b0e0fa5f1b42fb"}, {"problem": 156, "code": "(fn [d k] (into {} (map #(vector % d) k)))", "user": "5fd92743e4b05ac5b16ea11f"}, {"problem": 156, "code": "(fn [d ks]\n  (reduce #(assoc %1 %2 d) {} ks))", "user": "60cb3836e4b0e0fa5f1b4315"}, {"problem": 156, "code": "(fn [dv v] (into {} (map (fn [x] [x dv]) v)))", "user": "5f8f1d18e4b0715f5002d779"}, {"problem": 156, "code": "(fn [va sq] (zipmap sq (repeat va)))", "user": "60cc2d58e4b0e0fa5f1b4323"}, {"problem": 156, "code": "(fn\n  [v k]\n  (into\n   {}\n   (map vector k (repeat v))))", "user": "5d389ebfe4b01671435dbd49"}, {"problem": 156, "code": "#(apply hash-map (interleave %2 (repeat %1)))", "user": "60c7c23be4b0e0fa5f1b42eb"}, {"problem": 156, "code": "#(into {} (map (fn [n] (assoc {} n %1)) %2))", "user": "60d6aa84e4b0d60f5ea6f7e9"}, {"problem": 156, "code": "(fn [x y] (apply hash-map (interleave y (repeat x))))", "user": "60ddc7cbe4b0abd5a8cdd531"}, {"problem": 156, "code": "(fn [d k](zipmap k (repeat d)))", "user": "60dd865ee4b0d8b48c489db3"}, {"problem": 156, "code": "(fn [x ks]\n   (into {} (map (fn [e] [e x]) ks)))", "user": "60c43b20e4b0e0fa5f1b42c9"}, {"problem": 156, "code": "(fn [v k] (zipmap k (repeat v)))", "user": "60e2aca7e4b002d5a55d5f3b"}, {"problem": 156, "code": "(fn map-defaults\n  [n seq]\n  (apply hash-map (interleave seq (repeat n))))", "user": "608c270ae4b03bd49d9f36b3"}, {"problem": 156, "code": "#(reduce (fn [result val] (assoc result val %1)) {} %2)", "user": "6079e2dfe4b0a637ed780366"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "5ed81965e4b016b56eae05ed"}, {"problem": 156, "code": "(fn [a b]\n  (reduce (fn [final part]\n          (into final {part a})) {} b))", "user": "5fb9b704e4b03f550f44822b"}, {"problem": 156, "code": "#(zipmap %2 (repeat %1))", "user": "60e746bbe4b042f8ce8815a7"}]