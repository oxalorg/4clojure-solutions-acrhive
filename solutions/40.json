[{"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "4dd61f98535d2dad7130b5c6"}, {"code": "(fn [x ls]\r\n  (rest (interleave (repeat x) ls)))", "problem": 40, "user": "4dd62278535d2dad7130b5c7"}, {"code": "(fn f [sep [x & xs]]\r\n  (if (seq xs)\r\n    (cons x (cons sep (f sep xs)))\r\n    [x]))", "problem": 40, "user": "4dd6d6a0535d2dad7130b5ca"}, {"code": "(fn[a x](rest(reduce #(conj% a%2)[]x)))", "problem": 40, "user": "4dd66da7535d2dad7130b5c8"}, {"code": "(fn [sep coll]\r\n  (reduce #(concat %1 [sep] %2) (map list coll)))", "problem": 40, "user": "4dd6fa35535d2dad7130b5cd"}, {"code": "(fn interponer [xrep yl]\r\n  (drop-last (flatten (map #(list %1 %2) yl (repeat (count yl) xrep) )))\r\n)", "problem": 40, "user": "4dadca03c9a9d6ed4199dc57"}, {"code": "#(rest (interleave [% % % %] %2))", "problem": 40, "user": "4dce6e41535d5973398f92a2"}, {"code": "(fn my-interpose [c xs]\r\n  (if (empty? (next xs))\r\n    (list (first xs))\r\n    (conj (my-interpose c (next xs)) c (first xs))))", "problem": 40, "user": "4dd023dd535d5973398f92ad"}, {"code": "(fn ipose [n coll]\r\n  \t\t\t (loop [res [] seq coll]\r\n\t\t\t\t\t\t(if (empty? seq)\r\n\t\t\t\t\t\t\t\tres\r\n\t\t\t\t\t\t\t\t(if (= (first seq) (last seq))\r\n\t\t\t\t\t\t\t\t\t\t(recur (conj res (first seq)) (rest seq))\r\n\t\t\t\t\t\t\t\t    (recur (conj res (first seq) n) (rest seq))))))", "problem": 40, "user": "4db045b5838c48654951d9be"}, {"code": "#(butlast(mapcat list %2(repeat %1)))", "problem": 40, "user": "4db92654535d1e037afb21a0"}, {"code": "(fn interpose2 [x l]\r\n  (loop [lst l\r\n         ret []]\r\n    (cond\r\n     (= (count lst) 1) (conj ret (first lst))\r\n     :else (recur (rest lst) (conj ret (first lst) x))\r\n     )))", "problem": 40, "user": "4dcbb035535d5973398f928d"}, {"code": "(fn [sep coll]\r\n  (-> (mapcat (fn [x y] [x y]) coll (repeat sep))\r\n      (drop-last)))", "problem": 40, "user": "4dd4f0a8535dae65d5c462e4"}, {"code": "#(next (mapcat (fn [x] [% x]) %2))", "problem": 40, "user": "4dae0510c9a9d6ed4b99dc57"}, {"code": "(fn [sep coll]\r\n  (reduce #(conj %1 sep %2) \r\n          [(first coll)] \r\n          (rest coll)))", "problem": 40, "user": "4dbb1126535d1e037afb21b3"}, {"code": "#(reverse\r\n   (reduce (fn [acc elm]\r\n       (cons elm (cons % acc)))\r\n\t   [(first %2)]\r\n\t   (rest %2)))", "problem": 40, "user": "4dd6d7ee535d2dad7130b5cb"}, {"code": "#(rest (mapcat vector (repeat %1) %2))", "problem": 40, "user": "4ddbfb8a535d02782fcbea00"}, {"code": "(fn [r l]\r\n  (rest (reverse (loop [cnt (count l)\r\n        result []]\r\n    (if (= cnt 0)\r\n      result\r\n      (recur (dec cnt) (conj result (last (take cnt l)) r))\r\n    )\r\n  )))\r\n)", "problem": 40, "user": "4dd579b5535dae65d5c462ea"}, {"code": "(fn myintpose [sep lst]\r\n  (loop [xs '() ls lst]\r\n    (if (= nil (first (rest ls)))\r\n      (reverse (conj xs (first ls)))\r\n      (recur (conj xs (first ls) sep)\r\n       (rest ls)))))", "problem": 40, "user": "4ddc620d535d02782fcbea06"}, {"code": "(fn [sep xs] (rest (reduce (fn [a x] (conj a sep x)) [] xs)))", "problem": 40, "user": "4dd52e29535dae65d5c462e5"}, {"code": "(fn [x l] (butlast (interleave l (repeat x))))", "problem": 40, "user": "4ddbd934535d02782fcbe9fc"}, {"code": "(fn [i_separator i_list]\r\n    (drop-last (interleave i_list (repeat (count i_list) i_separator))))", "problem": 40, "user": "4dddf817535d08e6dec9fdd3"}, {"code": "#(cons (first %2) (interleave (cycle (list %1)) (rest %2)))", "problem": 40, "user": "4dda5d07535d02782fcbe9f2"}, {"code": "(fn [i coll]\r\n  (cons (first coll) (mapcat #(list i %) (rest coll))))", "problem": 40, "user": "4ddbdc1b535d02782fcbe9fd"}, {"code": "(fn [s xs]\r\n    (rest (apply concat (map #(list s %) xs))))", "problem": 40, "user": "4ddc1c89535d02782fcbea01"}, {"code": "(fn [v coll]\r\n  (loop [coll coll\r\n         r '()]\r\n    (if (empty? coll)\r\n      (reverse (rest r))\r\n      (recur (rest coll) (conj r (first coll) v)))))", "problem": 40, "user": "4de2f44f535d08e6dec9fdec"}, {"code": "(fn [n coll]\r\n  (vec\r\n  (reverse\r\n  (flatten\r\n  (rest\r\n    (reduce\r\n      (fn [col e]\r\n        (conj [n e] col))\r\n      []\r\n      coll))))))", "problem": 40, "user": "4ddee37c535d08e6dec9fddc"}, {"code": "(fn x-interpose [n coll]\r\n  (if (>= (count coll) 2)\r\n\t(cons (first coll) (cons n (x-interpose n (rest coll)))) \r\n\tcoll )\r\n)", "problem": 40, "user": "4ddeb916535d08e6dec9fdd9"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4dea9406535d08e6dec9fe01"}, {"code": "#(next (mapcat list (repeat %) %2))", "problem": 40, "user": "4de77a0a535d08e6dec9fdfa"}, {"code": "(fn [n x] (butlast(vec\r\n  (interleave x  (repeat (count  x) n)))))", "problem": 40, "user": "4de18de7535d08e6dec9fde8"}, {"code": "(fn ipose [sep coll]\r\n   (if (= (count (seq coll)) 1)\r\n     coll\r\n     (concat (list (first coll) sep) (ipose sep (rest coll)))))", "problem": 40, "user": "4de623ef535d08e6dec9fdf4"}, {"code": "(fn inter [d s]\r\n  (if (= (count s) 1)\r\n      s\r\n      (conj (conj (inter d (rest s)) d)\r\n            (first s))))", "problem": 40, "user": "4df1ce44535d08e6dec9fe1f"}, {"code": "#(pop (vec (interleave %2 (take (count %2) (repeat %1)))))", "problem": 40, "user": "4df1e213535d08e6dec9fe20"}, {"code": "#(drop 1 ((fn i [sep s] (when s (cons sep (cons (first s) (i sep (next s)))))) %1 %2))", "problem": 40, "user": "4dad51418e77d6ed55f12a44"}, {"code": "(fn [value coll]\r\n  (loop [s coll e (empty coll)]\r\n    (let [c (first s) r (rest s)]\r\n      (if (nil? c) e \r\n        (recur r\r\n          (conj (if (empty? e) e \r\n                  (conj e value))\r\n            c))))))", "problem": 40, "user": "4dee4a9c535d08e6dec9fe11"}, {"code": "(fn [s xs]\r\n       (butlast (flatten (map vector xs (repeat s)))))", "problem": 40, "user": "4deb529a535d08e6dec9fe04"}, {"code": "(fn [x coll]\r\n  (loop [x x coll coll memo []]\r\n    (if (= (count coll) 1) (concat memo coll)\r\n      (recur x (rest coll) (concat memo [(first coll) x])))))", "problem": 40, "user": "4db135081254ad5b4805fa67"}, {"code": "(fn [sep coll]\r\n   (loop [c coll acc []]\r\n      (if (first c) (recur (rest c) (conj (conj acc (first c)) sep)) (pop acc))))", "problem": 40, "user": "4df168bd535d08e6dec9fe1d"}, {"code": "#(reduce (fn [v x] (conj v %1 x)) [(first %2)] (rest %2))", "problem": 40, "user": "4df3d4f4535d08e6dec9fe2c"}, {"code": "(fn [in s]\r\n  (loop [new-s [(first s)] orig (rest s)]\r\n    (if (empty? orig)\r\n      new-s\r\n      (recur (concat new-s [in (first orig)]) (rest orig)))))", "problem": 40, "user": "4df3df8a535d08e6dec9fe2d"}, {"code": "(fn [n coll]\r\n  (drop-last (reduce #(concat %1 (list %2) (list n)) '() coll)))", "problem": 40, "user": "4df407c3535d08e6dec9fe2e"}, {"code": "(fn [x y] (drop 1 (interleave (repeat x) y)))", "problem": 40, "user": "4df669d4535d08e6dec9fe35"}, {"code": "(fn [n l] (loop [s false ls l rs []]\r\n  (cond (empty? ls) rs\r\n        s (recur s (rest ls) (conj (conj rs n) (first ls)))\r\n        :else (recur true (rest ls) (conj rs (first ls)))\r\n)))", "problem": 40, "user": "4db883e1535d1e037afb2198"}, {"code": "(fn x [a [f & r]]\r\n  (if r\r\n    (conj (x a r) a f)\r\n    (list f) ) )", "problem": 40, "user": "4df20dda535d08e6dec9fe23"}, {"code": "(fn ip [s xs]\r\n  (letfn [(ipp [s xs]\r\n            (if (empty? xs)\r\n              nil\r\n              (let [[x & rxs] xs]\r\n                (concat [s x] (ipp s rxs)))))]\r\n    (drop 1 (ipp s xs))))", "problem": 40, "user": "4dfd4ba8535d04ed9115e781"}, {"code": "#(drop-last (mapcat (fn [v1 v2] (list v1 v2)) %2 (repeat %1)))", "problem": 40, "user": "4def301c535d08e6dec9fe12"}, {"code": "(fn [x s]\r\n  (butlast (mapcat #(list % x) s)))", "problem": 40, "user": "4e02bee8535d04ed9115e791"}, {"code": "(fn [m arr](rest (mapcat (fn [x]  [m x]) arr)))", "problem": 40, "user": "4de6f806535d08e6dec9fdf7"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "4e03c616535d04ed9115e796"}, {"code": "(fn i [delim [l & ls]]\r\n  (cond\r\n    (empty? ls) (cons l '())\r\n    :else (cons l (cons delim (i delim ls)))))", "problem": 40, "user": "4dc7e7a5535d8a4b2fd74290"}, {"code": "(fn myinterpose\r\n     ([sep coll] (myinterpose sep coll []))\r\n     ([sep coll coll2] \r\n       (cond \r\n         (empty? coll) coll2\r\n         (empty? (rest coll)) (conj coll2 (first coll))\r\n         :else (recur sep (rest coll) (conj (conj coll2 (first coll)) sep)))))", "problem": 40, "user": "4dddff47535d08e6dec9fdd4"}, {"code": "(fn [x ys]\r\n   (loop [ys ys acc []]\r\n     (if (> (count ys) 1)\r\n       (let [y (first ys)]\r\n         (recur (rest ys) (conj acc y x)))\r\n       (conj acc (first ys)))))", "problem": 40, "user": "4e0d8c27535d04ed9115e7b7"}, {"code": "(fn [i s] \r\n  (concat \r\n    (interleave (drop-last s) (repeat i)) \r\n    (list (last s))))", "problem": 40, "user": "4e0e0529535d04ed9115e7b9"}, {"code": "(fn f\r\n   ([a xs ret]\r\n      (if (empty? xs)\r\n        ret\r\n        (f a (rest xs) (concat ret (list a (first xs))))))\r\n   ([a xs]\r\n      (f a (rest xs) (list (first xs)))))", "problem": 40, "user": "4e059278535d04ed9115e7a5"}, {"code": "(fn x [n [f & r]]\r\n  (if (empty? r)\r\n    (list f)\r\n    (concat [f n] (x n r))))", "problem": 40, "user": "4e111538535d04ed9115e7c3"}, {"code": "#(butlast (mapcat (fn [a] [a %]) %2))", "problem": 40, "user": "4daa374930acd6ed13482a68"}, {"code": "(fn intpose [ip initxs]\r\n  (loop [ys nil, xs initxs]\r\n    (if (empty? xs)\r\n      (reverse ys)\r\n      (if (= (count xs) 1)\r\n        (recur (cons (first xs) ys) (rest xs))\r\n        (recur (cons ip (cons (first xs) ys)) (rest xs))))))", "problem": 40, "user": "4e123905535d04ed9115e7ce"}, {"code": "#(rest\r\n  (interleave (repeat %1) %2))", "problem": 40, "user": "4dd7d040535d2dad7130b5d6"}, {"code": "#(rest (interleave [% % % %] %2))", "problem": 40, "user": "4e14b925535d04ed9115e7df"}, {"code": "(fn [sep coll]\r\n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "4e1158aa535d04ed9115e7c6"}, {"code": "(fn [sep coll]\r\n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "4e14090d535d04ed9115e7dc"}, {"code": "(fn [a b]\r\n  (loop [b b r []]\r\n    (if (= 1 (count b)) (concat r b)\r\n      (recur (rest b) (conj r (first b) a)))))", "problem": 40, "user": "4deff9f9535d08e6dec9fe15"}, {"code": "(fn mypose [p lt]\r\n    (letfn [(myposea []\r\n  \t     (apply concat (map #(list % p) lt)))] \r\n\t   (butlast (myposea))))", "problem": 40, "user": "4e1b2cd9535d04ed9115e7fd"}, {"code": "(fn myinterpose [x coll]\r\n  (if (empty? (rest coll)) coll\r\n      (cons (first coll) (cons x (myinterpose x (rest coll))))))", "problem": 40, "user": "4e14108c535d04ed9115e7dd"}, {"code": "(fn interpose-seq\r\n  ([x y]\r\n    (interpose-seq x (rest y) (vector (first y))))\r\n  ([x y z]\r\n    (if (= 0 (count y))\r\n      z\r\n      (if (= x (last z))\r\n        (recur x (rest y) (conj z (first y)))\r\n        (recur x y (conj z x))))))", "problem": 40, "user": "4e16bdef535d04ed9115e7e9"}, {"code": "(fn inter [a lat]\r\n  (letfn [(iter [a lat]\r\n    (let [[x & xs] lat]\r\n      (if (empty? xs) (list x)\r\n          (cons x (cons a (iter a xs))))))]\r\n  (iter a lat)))", "problem": 40, "user": "4ddb339c535d02782fcbe9f9"}, {"code": "(fn [elem list]\r\n  \t(vec (butlast (mapcat #(vector %2 %1)  (repeat elem) list)) ))", "problem": 40, "user": "4dfd7ecf535d04ed9115e783"}, {"code": "(fn [sep coll]\r\n  (drop 1 (interleave (iterate identity sep) coll)))", "problem": 40, "user": "4e22b78b535d04ed9115e81e"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "4e232f34535d04ed9115e81f"}, {"code": "(fn [e ls]\n  (rest (apply concat\n    (map (partial list e) ls))))", "problem": 40, "user": "4de165f3535d08e6dec9fde6"}, {"code": "(fn [del original_coll]\r\n  (reverse\r\n    (loop [coll original_coll acc '()]\r\n        (cond\r\n          (empty? coll) acc\r\n          (empty? acc) (recur (rest coll) (cons (first coll) acc))\r\n          :else (recur (rest coll) (apply list (first coll) del acc))\r\n        )\r\n    )\r\n  )\r\n)", "problem": 40, "user": "4e1ec17a535d04ed9115e80a"}, {"code": "(fn [x as]\r\n   (loop [as as acc '()]\r\n     (cond\r\n      (nil? (seq as))\r\n      (reverse acc)\r\n      (nil? (seq (rest as)))\r\n      (recur (rest as) (conj acc (first as)))\r\n      :else\r\n      (let [a (first as)]\r\n        (recur (rest as) (conj (conj acc a) x))))))", "problem": 40, "user": "4e26e8b4535deb9a81d77ef6"}, {"code": "#(let [v (interleave %2 (cycle [%1]))]\n  (take (dec (count v)) v))", "problem": 40, "user": "4e28120f535deb9a81d77efa"}, {"code": "(fn [a s] (drop 1 (mapcat #(list a %) s)))", "problem": 40, "user": "4e218464535d04ed9115e816"}, {"code": "(fn [a b] [a b] (take (- (* (count b) 2) 1) (mapcat #(list %1 a) b)))", "problem": 40, "user": "4e218470535d04ed9115e817"}, {"code": "; lazy\n(fn myinterleave [token coll]\n  (when (seq coll)\n    (lazy-seq\n     (let [f (first coll) r (rest coll)]\n       (if-not (empty? r)\n         (cons \n           f \n           (cons \n             token \n             (myinterleave \n               token \n               r)))\n         (cons \n           f\n           (myinterleave\n              token\n              r)))))))", "problem": 40, "user": "4e131443535d04ed9115e7d3"}, {"code": "#(letfn [(interp [delim xs]\r\n      (if (= (count xs) 1)\r\n\t\t(list (first xs))\r\n\t\t(conj (interp delim (rest xs)) delim (first xs))))]\r\n  (interp %1 %2))", "problem": 40, "user": "4e273301535deb9a81d77ef7"}, {"code": "(fn ip [sep lst]\n  (cond (empty? lst) '()\n        (empty? (rest lst)) lst\n        :else (cons (first lst)\n                    (cons sep\n                          (ip sep (rest lst))))))", "problem": 40, "user": "4e2d84bf535deb9a81d77f09"}, {"code": "#(butlast (mapcat (fn [x] [x %1]) %2))", "problem": 40, "user": "4e2edb0e535deb9a81d77f0d"}, {"code": "(fn hoge [x y]\n  (if (= (count y) 1) y\n      (cons (first y) (cons x (hoge x (rest y))))))", "problem": 40, "user": "4e2e6460535deb9a81d77f0b"}, {"code": "(fn [x xs] (rest (reverse (reduce #(conj (conj %1 x) %2) '() xs))))", "problem": 40, "user": "4e2d562c535deb9a81d77f07"}, {"code": "(fn interpose-dl [mid coll]\n  (reduce (fn [acc x]\n      (if (empty? acc)\n\t      [x]\n\t      (conj acc mid x)))\n\t  []\n\t  coll))", "problem": 40, "user": "4dc54eb2535d8a4b2fd74284"}, {"code": "#(rest (interleave [%%%%] %2))", "problem": 40, "user": "4e307313535deb9a81d77f14"}, {"code": "#(reduce (fn [C v] (conj C %1 v)) [(first %2)] (rest %2))", "problem": 40, "user": "4e31a15c535deb9a81d77f1e"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4e21c0c7535d04ed9115e818"}, {"code": "(comp rest\n  (fn my-interpose [sep sq]\n    (let [sq (seq sq)]\n      (if sq (cons sep (cons (first sq) (my-interpose sep (rest sq))))\n          '()))))", "problem": 40, "user": "4e342671535deb9a81d77f29"}, {"code": "(fn [sep coll]\n      (butlast (mapcat list coll\n               (repeat sep))))", "problem": 40, "user": "4daef21cedd6309eace4d169"}, {"code": "(fn [inter seq]\r\n        (butlast \r\n            (reduce #(concat %1 (list %2 inter)) (list) seq)))", "problem": 40, "user": "4e2f9e71535deb9a81d77f11"}, {"code": "(fn [x coll]\n  (rest (interleave (repeat x) coll)))", "problem": 40, "user": "4e36425c535deb9a81d77f33"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "4e360757535deb9a81d77f32"}, {"code": "(fn [val coll]\r\n\"Separates the items of a sequence by an arbitrary value\"\r\n(if (empty? coll)\r\ncoll\r\n(reduce #(conj %1 val %2) [(first coll)] (rest coll))))", "problem": 40, "user": "4e370a04535deb9a81d77f37"}, {"code": "(fn ip [sep l]\n  (if (= 1 (count l)) l\n    (cons (first l) (cons sep (ip sep (rest l))))))", "problem": 40, "user": "4e356d2b535deb9a81d77f2d"}, {"code": "#(drop-last (mapcat vector %2 (repeat (count %2) %)))", "problem": 40, "user": "4e3996b0535deb9a81d77f41"}, {"code": "(fn [sep coll] (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "4e39fb68535deb9a81d77f47"}, {"code": "(new clojure.core$interpose)", "problem": 40, "user": "4e3b6bff535deb9a81d77f52"}, {"code": "(fn interp [sep coll]\n  (if (empty? (rest coll))\n    coll\n    (cons (first coll)\n      (cons sep (interp sep (rest coll))))))", "problem": 40, "user": "4e113a81535d04ed9115e7c5"}, {"code": "(fn [v s] (let [e (first s)]\n  (loop [s (rest s), acc [e]]\n    (if (empty? s) acc\n      (recur (rest s)\n        (concat acc [v] [(first s)]))))))", "problem": 40, "user": "4e3ac1b2535deb9a81d77f4c"}, {"code": "(fn four-clojure [repeated coll]\n  (conj\n   (vec  (interleave\n          (take (dec (count coll)) coll)\n          (take (dec (count coll)) (repeat repeated))))\n   (last coll)\n   )\n  )", "problem": 40, "user": "4e3f480c535dc968683fc497"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "4e39d763535deb9a81d77f46"}, {"code": "(fn [item lisp]\n  (rest (flatten (map\n    (fn [x]\n      (list item x)\n    )\n  lisp)))\n)", "problem": 40, "user": "4e3456f9535deb9a81d77f2a"}, {"code": "(fn [x y]\n  (drop-last (mapcat vector y (repeat x))))", "problem": 40, "user": "4e2ef93d535deb9a81d77f0f"}, {"code": "#(rest (mapcat list (repeat %) %2))", "problem": 40, "user": "4dabb7b1950ed6eda1bd72f3"}, {"code": "(fn separa-2 [x ys]\n  (butlast (mapcat vector ys (repeat x))))", "problem": 40, "user": "4db51ce0535d87e67b28fe06"}, {"code": "(fn inter [x s]\n  (cond\n    (nil? (next s)) s\n    :else (concat (list (first s) x)\n                  (inter x (next s)))))", "problem": 40, "user": "4e444c11535dc968683fc4a9"}, {"code": "(fn [x y]\n  (butlast\n    (flatten\n      (for [t y\n        :let [v [t x]]]\n          `(~t ~x)))))", "problem": 40, "user": "4e333091535deb9a81d77f25"}, {"code": "(fn interpose-1 [sep coll]\r\n  (loop [c coll acc ()]\r\n     (if (next c)\r\n\t       (recur (rest c) (conj acc (first c) sep))\r\n\t       (reverse (conj acc (first c))))))", "problem": 40, "user": "4e46ac46535dc968683fc4b5"}, {"code": "#(butlast (mapcat (fn [i] [i %]) %2))", "problem": 40, "user": "4e49badd535dc968683fc4c9"}, {"code": "(fn [inter s]\n             (reverse (conj (reduce #(into %1 %2) '() (map #(list % inter) (butlast s))) (last s))))", "problem": 40, "user": "4e08fb7a535d04ed9115e7ac"}, {"code": "(comp rest (fn [acc sep s] (if (empty? s) acc \n  (recur (conj acc sep (first s)) sep (rest s))))) []", "problem": 40, "user": "4e4a94a9535dc968683fc4cd"}, {"code": "(fn [interloper sequence]\n  (let [poser (fn [so-far intrlpr to-go]\n                (if (= 1 (count to-go))\n                 (conj so-far (first to-go))\n                 (recur (conj so-far (first to-go) intrlpr)\n                        intrlpr\n                        (rest to-go))))]\n   (poser [] interloper sequence)))", "problem": 40, "user": "4e42f930535dc968683fc49f"}, {"code": "#(for [i (range (dec (* 2 (count %2))))]\n   (if (odd? i)\n     %\n     (nth %2 (int (/ i 2)))))", "problem": 40, "user": "4e4ae5aa535dc968683fc4d2"}, {"code": "#(rest (interleave (cycle [%1]) %2))", "problem": 40, "user": "4e4870d1535dc968683fc4bc"}, {"code": "(fn [d s] (butlast (mapcat #(list % d) s)))", "problem": 40, "user": "4e43b0d9535dc968683fc4a3"}, {"code": "(fn [item list]\n  (loop [l (rest list),\n         r (conj nil (first list))]\n    (if (empty? l) (reverse r)\n      (recur (rest l) (conj r item (first l))))))", "problem": 40, "user": "4e4c1e8c535dc968683fc4db"}, {"code": "(fn my-interpose [c coll]\n  (drop 1 (mapcat #(vector c %) coll)))", "problem": 40, "user": "4e4b4564535dc968683fc4d3"}, {"code": "(fn [x xs] (let [y (mapcat #(-> [% x]) xs)] (take (dec (count y)) y)))", "problem": 40, "user": "4e4c238f535dc968683fc4dc"}, {"code": "(fn [n coll]\n  (loop [result '()\n         togo (reverse coll)]\n    (if (empty? (rest togo)) \n        (cons (first coll) result)\n      (recur (cons n\n        (cons (first togo) result))\n          (rest togo)))))", "problem": 40, "user": "4e4bf20e535dc968683fc4d9"}, {"code": "(fn [sep x] (loop [res (), y x] \n  \t\t\t(cond (= () y) (reverse res)\n\t\t\t\t      (= () (rest y)) (recur (conj res (first y)) ())\n\t\t\t\t      :else (recur (conj (conj res (first y)) sep) (rest y)))))", "problem": 40, "user": "4e49a7bb535dc968683fc4c6"}, {"code": "(fn hop [x xs] \n  (lazy-seq\n    (if (empty? (rest xs))\n        (list (first xs))\n        (concat \n          (list (first xs) x)\n          (hop x (rest xs))))))", "problem": 40, "user": "4e4fbd0c535dc968683fc4e9"}, {"code": "(fn [s xs]\n  (loop [xs xs accum []]\n    (if (empty? xs)\n      accum\n      (let [new-accum (conj accum (first xs))\n            new-xs (next xs)]\n        (if new-xs (recur new-xs (conj new-accum s)) (recur new-xs new-accum))))))", "problem": 40, "user": "4e50b67b535dc968683fc4ed"}, {"code": "(fn [sep coll] (drop-last (interleave coll (repeat sep))))", "problem": 40, "user": "4e513ecf535dc968683fc4f6"}, {"code": "(fn interpose-sqe [c coll]\n  (reduce (fn [l e]\n    (if (empty? l)\n        (conj l e)\n        (conj l c e)))\n   []\n   coll))", "problem": 40, "user": "4e4bd94b535dc968683fc4d7"}, {"code": "#(next (interleave (repeat %1) %2))", "problem": 40, "user": "4e4ad154535dc968683fc4d1"}, {"code": "(fn [x c]\n  (reduce\n    #(concat % [x %2])\n    [(c 0)]\n    (next c)))", "problem": 40, "user": "4e2b1d48535deb9a81d77f03"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4e52d815535d302ef430da77"}, {"code": "(fn [x y] (drop 1 (reduce #(conj % x %2) [] y)))", "problem": 40, "user": "4e12cc9d535d04ed9115e7d2"}, {"code": "(fn [n m] (butlast (reduce #(conj % %2 n) [] m)))", "problem": 40, "user": "4e50e2a0535dc968683fc4ef"}, {"code": "(fn [i l]\n  (cons (first l) (mapcat #(list i %) (rest l))))", "problem": 40, "user": "4e498df9535dc968683fc4c4"}, {"code": "#(drop-last (interleave %2 (repeat %)))", "problem": 40, "user": "4e5229dc535d302ef430da6f"}, {"code": "(fn [s xs] (reduce #(conj %1 s %2) [(first xs)] (rest xs)))", "problem": 40, "user": "4e513758535dc968683fc4f3"}, {"code": "#(drop-last (interleave %2 (repeat (count %2) %)))", "problem": 40, "user": "4e399685535deb9a81d77f40"}, {"code": "(fn [v s]\n  (butlast (interleave s (repeat v))))", "problem": 40, "user": "4e50c894535dc968683fc4ee"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4e5411e8535d8a8b8723a279"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "4e5676b2535d8a8b8723a282"}, {"code": "(fn [sep coll] (drop 1 (reduce #(conj %1 sep %2) [] coll)))", "problem": 40, "user": "4e521cef535d302ef430da6d"}, {"code": "(fn[elt a-seq]\n  (butlast (mapcat (fn[a b] [a b]) a-seq\n       (repeat elt))))", "problem": 40, "user": "4e58bcd4535d8a8b8723a296"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "4e5914e0535d8a8b8723a29b"}, {"code": "(fn [item xs] (drop 1 (mapcat list (repeat item) xs)))", "problem": 40, "user": "4e593dac535d8a8b8723a29c"}, {"code": "(fn ipose [interposed s]\n  (let [this (first s)\n        remaining (next s)\n        has_following (seq remaining)]\n    (lazy-seq\n      (if has_following\n        (concat\n          [this interposed]\n          (ipose interposed remaining))\n        s))))", "problem": 40, "user": "4e584256535d8a8b8723a28e"}, {"code": "(fn [s1 c1]\n  (drop-last\n    (mapcat vector c1 (repeat s1))\n  )\n)", "problem": 40, "user": "4e570f47535d8a8b8723a287"}, {"code": "(fn [v xs]\n  (loop [cur-seq xs new-seq []]\n    (condp = (count cur-seq)\n      0 new-seq\n      1 (conj new-seq (first cur-seq))\n      (recur (rest cur-seq) (conj (conj new-seq (first cur-seq)) v )))))", "problem": 40, "user": "4ddabc33535d02782fcbe9f5"}, {"code": "#(-> % repeat (interleave %2) (->> (drop 1)))", "problem": 40, "user": "4e597b2c535d8a8b8723a29d"}, {"code": "(fn [a s] \n  (butlast \n    (mapcat #(vector % a) s)))", "problem": 40, "user": "4e599577535d8a8b8723a29f"}, {"code": "#(butlast (mapcat vector %2 (repeat %)))", "problem": 40, "user": "4e589bdc535d8a8b8723a295"}, {"code": "(fn [sep coll]\n  (let [length (count coll)]\n    (->> coll\n      (map #(vector %2 %1) (iterate identity sep))\n      (reduce concat)\n      (take (- (* 2 length) 1)))))", "problem": 40, "user": "4e5bff2b535d8a8b8723a2bd"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "4e5af6d7535d8a8b8723a2b2"}, {"code": "(fn [a b]\n  (loop [acc [(first b)] foo (next b)]\n   (if foo\n     (recur (conj acc a (first foo)) (next foo))\n     acc)))", "problem": 40, "user": "4db88b37535d1e037afb2199"}, {"code": "(fn [x y] (drop-last (mapcat #(list % x) y)))", "problem": 40, "user": "4e588e84535d8a8b8723a294"}, {"code": "(fn [i s]\n  (loop [rr [(first s)] ss (rest s)]\n    (if (empty? ss)\n      rr\n      (recur (conj rr i (first ss)) (rest ss)))))", "problem": 40, "user": "4e5c801e535d8a8b8723a2c1"}, {"code": "(fn my-interpose [separator sequence]\n  (loop [s (rest sequence) r [(first sequence)]]\n    (if (empty? s)\n      r\n      (recur\n        (rest s)\n        (conj r separator (first s))))))", "problem": 40, "user": "4e360072535deb9a81d77f30"}, {"code": "(fn intrp \n  ([el ls]\n    (intrp el (rest ls) (vector (first ls))))\n  ([el ls acc]\n    (if (empty? ls)\n      acc\n      (recur el (rest ls) (into acc (list el (first ls)))))))", "problem": 40, "user": "4e5a2403535d8a8b8723a2a7"}, {"code": "(fn [inter n]\n  (loop [coll (rest n) acc [(first n)]]\n\t   (if (empty? coll)\n\t       (butlast (conj acc (first coll)))\n\t       (recur (rest coll)\n\t\t      (conj (conj acc inter) (first coll))))))", "problem": 40, "user": "4e5d2dc5535d8a8b8723a2ca"}, {"code": "(fn [item aSeq]\n  (reduce \n      #(conj %1 item %2) \n        [(first aSeq)] \n        (rest aSeq)))", "problem": 40, "user": "4e463703535dc968683fc4b2"}, {"code": "#(conj (mapcat (fn [x] [% x]) (rest %2)) (first %2))", "problem": 40, "user": "4dad938fc9a9d6ed1b99dc57"}, {"code": "(fn [d l] (reduce #(if (empty? %1) [%2] (conj %1 d %2)) [] l))", "problem": 40, "user": "4e5f08c7535d8a8b8723a2da"}, {"code": "(fn [a b] (drop-last (reduce into (map (fn [x] (vector x a)) b))))", "problem": 40, "user": "4e4b911f535dc968683fc4d6"}, {"code": "(fn myinterpose [i sq] \n  (if (seq sq) \n    (cons (first sq) \n      (if (seq (rest sq)) \n        (cons i (myinterpose i (rest sq))) (rest sq)))))", "problem": 40, "user": "4dcc3281535d5973398f9291"}, {"code": "#(butlast (mapcat list %2 (repeat %1)))", "problem": 40, "user": "4e615cd2535d8ccf87e9fe58"}, {"code": "#(rest (mapcat list (repeat %1) %2))", "problem": 40, "user": "4e3bccb1535deb9a81d77f55"}, {"code": "(fn interpose- [x coll]\n  \"40. Write a function which separates the items of a sequence by an arbitrary value.\"\n  (concat (mapcat (fn [n] (list n x)) (butlast coll)) (list (last coll))))", "problem": 40, "user": "4e5eb843535d8a8b8723a2d4"}, {"code": "#(rest (mapcat (fn [x] (vector %1 x)) %2))", "problem": 40, "user": "4e5867d1535d8a8b8723a291"}, {"code": "(fn [sep s]\n  (drop-last (reduce #(conj %1 %2 sep) '[] s)))", "problem": 40, "user": "4e5ecd65535d8a8b8723a2d6"}, {"code": "(fn [sep lis]\n   (rest (mapcat (fn [x]\n    (cons sep (cons x '())))lis)))", "problem": 40, "user": "4df9c598535d04ed9115e77a"}, {"code": "(fn *interpose                                                                                                                                              \n  [c coll]                                                                                                                                                    \n  (loop [res '() coll coll]                                                                                                                                   \n    (if (empty? coll)                                                                                                                                         \n      (butlast (apply concat res))                                                                                                                            \n      (recur (cons (list (last coll) c) res) (butlast coll)))))", "problem": 40, "user": "4e3bcccd535deb9a81d77f56"}, {"code": "(fn [y x] (drop-last (mapcat #(list % y) x)))", "problem": 40, "user": "4e634eb9535d8ccf87e9fe63"}, {"code": "(fn [x coll] (mapcat #(if (= % (last coll))\n                           [%]\n                           (conj [%] x)) coll))", "problem": 40, "user": "4e3bcca9535deb9a81d77f54"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "4e44358f535dc968683fc4a8"}, {"code": "(fn [x y] (drop-last (mapcat #(conj [] % x) y)))", "problem": 40, "user": "4e6472b7535d8ccf87e9fe6c"}, {"code": "(fn inpos [a s] (if (= (count (rest s)) 1)\n                 (list (first s) a (last s))\n                 (concat (list (first s) a) (inpos a (rest s)))))", "problem": 40, "user": "4e5e9f6b535d8a8b8723a2d2"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "4e5a3891535d8a8b8723a2aa"}, {"code": "#(loop [c1 %2\r\n       v1 (list %1)\r\n       ret '()]\r\n  (if (= (count c1) 1)\r\n    (concat ret (list (first c1)))\r\n    (recur (rest c1) v1 (concat ret (list (first c1)) v1))))", "problem": 40, "user": "4e5bdc2b535d8a8b8723a2bb"}, {"code": "(fn f [sep xs]\n  (if (empty? (rest xs))\n      xs\n      (concat (list (first xs) sep)\n              (f sep (rest xs)))))", "problem": 40, "user": "4e68dbd5535d8ccf87e9fe8f"}, {"code": "(fn [x coll]\n  (when-first [a coll]\n    (cons a (mapcat vector (repeat x) (rest coll)))))", "problem": 40, "user": "4e68c434535d8ccf87e9fe89"}, {"code": "(fn [i s]\n  (rest (flatten (map (fn [x] [i x]) s))))", "problem": 40, "user": "4e68b46c535d8ccf87e9fe87"}, {"code": "#(reduce concat [(first %2)] (map (fn [x] [%1 x]) (rest %2)))", "problem": 40, "user": "4e5fe31a535d8ccf87e9fe50"}, {"code": "#(next (interleave (repeat %) %2))", "problem": 40, "user": "4e6a412e535d8ccf87e9feb6"}, {"code": "#(rest (mapcat (fn [x] [% x]) %2))", "problem": 40, "user": "4e6a48d5535d8ccf87e9febd"}, {"code": "(fn [delim, input]\n  (loop [in input\n         out '()]\n        (if (= (count in) 1)\n            (reverse (cons (first in) out))\n            (recur (rest in) \n                   (cons delim (cons (first in) out))))))", "problem": 40, "user": "4e6a60cd535d8ccf87e9fed7"}, {"code": "(fn [value coll]\n  (into [] \n    (butlast (mapcat \n      (fn [x] (list x value)) coll))))", "problem": 40, "user": "4e6ab9cb535d8ccf87e9fefe"}, {"code": "#(drop 1 (interleave (repeat %) %2))", "problem": 40, "user": "4e6b3fc8535d8ccf87e9ff0f"}, {"code": "(fn [v s] (drop 1 (mapcat #(vector v %) s)))", "problem": 40, "user": "4e6a4954535d8ccf87e9fec0"}, {"code": "(fn [sep s] (drop-last (flatten (map (fn [& a] a) s (repeat sep)))))", "problem": 40, "user": "4e6a4ab9535d8ccf87e9fec2"}, {"code": "(fn [x ys] (next (flatten (concat (map list (repeat x) ys)))))", "problem": 40, "user": "4e6a97a9535d8ccf87e9fef8"}, {"code": "(fn [sep xs] (drop 1 (interleave (repeat sep) xs)))", "problem": 40, "user": "4df0524e535d08e6dec9fe17"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4e31a101535deb9a81d77f1d"}, {"code": "(fn [a seq-b] (drop-last (mapcat (fn [b] [b a]) seq-b)))", "problem": 40, "user": "4e6dc95a535d5021c1a895f1"}, {"code": "(fn [x y] (rest (flatten (map (fn [p] [x p]) y))))", "problem": 40, "user": "4e6def42535d5021c1a895f7"}, {"code": "(fn [id coll]\n  (drop 1\n    (mapcat vector (repeat id) coll)))", "problem": 40, "user": "4e6dd51b535d5021c1a895f6"}, {"code": "(fn x [m i]\n  (if (< (count i) 2) i\n  (cons (first i) (cons m (x m (rest i))))))", "problem": 40, "user": "4e6e6630535d5021c1a89609"}, {"code": "#(drop 1 (interleave (repeat %) %2))", "problem": 40, "user": "4e6dd0f5535d5021c1a895f3"}, {"code": "(fn [e,l]\n  (rest (mapcat #(list e %) l))\n)", "problem": 40, "user": "4e6e10d8535d5021c1a895fd"}, {"code": "#(apply concat (vec\n(cons (list (first %2))  \n   (for [i (rest %2)] (list %1 i)))))", "problem": 40, "user": "4e6e3a1e535d5021c1a89602"}, {"code": "#(drop-last (flatten (map (fn[x] (list x %1)) %2)))", "problem": 40, "user": "4e6df3c9535d5021c1a895fa"}, {"code": "#(concat [(first %2)] (mapcat (fn together [a] (concat  [%1] [a])) (next %2)))", "problem": 40, "user": "4e70ed07535d5021c1a89643"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4e70c0b1535d5021c1a89640"}, {"code": "#(conj (vec (mapcat (fn [a] [a %1]) (butlast %2))) (last %2))", "problem": 40, "user": "4e68be01535d8ccf87e9fe88"}, {"code": "(fn [v s]\n     (let [interpose-seq (repeat (count s) v)]\n       (drop-last (interleave s interpose-seq))))", "problem": 40, "user": "4e6a11ee535d8ccf87e9fe9f"}, {"code": "(fn intp [v aseq]\n  (reverse (rest (reverse (reduce #(concat %1 (list %2 v)) '() aseq))))\n)", "problem": 40, "user": "4e6a79ca535d8ccf87e9feeb"}, {"code": "#(butlast (mapcat (fn [x] [x %]) %2))", "problem": 40, "user": "4e704293535d5021c1a89634"}, {"code": "(fn [i s] (drop-last (mapcat #(vector % i) s)))", "problem": 40, "user": "4e6a5f5c535d8ccf87e9fed6"}, {"code": "#(next (for [x %2, y [% x]] y))", "problem": 40, "user": "4e7115b3535d5021c1a89647"}, {"code": "(fn [x ys] \n  (let [c (count ys)] \n    (take (- (* 2 c) 1) (interleave ys (repeat c x)))))", "problem": 40, "user": "4e6a2f51535d8ccf87e9fea9"}, {"code": "(fn [sep coll]\n  [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "4e6defcc535d5021c1a895f8"}, {"code": "(fn [s c] (butlast (mapcat #(list %1 s) c)))", "problem": 40, "user": "4e6dc5f5535d5021c1a895f0"}, {"code": "(fn [x [f & r]] (reduce #(conj %1 x %2 ) [f] r))", "problem": 40, "user": "4e71da4d535d5021c1a89653"}, {"code": "#(drop 1 (interleave (repeat %) %2))", "problem": 40, "user": "4e72ac47535d5021c1a89666"}, {"code": "(fn [n l]\n    (butlast\n      (reduce #(conj %1 %2 n)\n        [] l)))", "problem": 40, "user": "4e6a2f93535d8ccf87e9feaa"}, {"code": "#(butlast (interleave %2 \n          (map (fn [x] %1) (range 0 (count %2)))))", "problem": 40, "user": "4e6f1b7a535d5021c1a89618"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "4e71920f535d5021c1a8964e"}, {"code": "(fn ipose [v s]\n  (drop 1 (interleave (repeat v) s)))", "problem": 40, "user": "4e6a4950535d8ccf87e9febf"}, {"code": "(fn [s l]\n  (concat (mapcat #(list % s) (butlast l)) [(last l)]))", "problem": 40, "user": "4e720985535d5021c1a89655"}, {"code": "(fn ipose [n [x & xs :as l]]\n                  (cond\n                   (empty? l)   l\n                   (empty? xs)  l\n                   :else        (cons x (cons n (ipose n xs)))))", "problem": 40, "user": "4e71705e535d5021c1a89649"}, {"code": "(fn [x coll]\n  (rest (reduce (fn [acc v] (conj (conj acc x) v)) [] coll)))", "problem": 40, "user": "4e6a4edd535d8ccf87e9fec4"}, {"code": "(fn [i c]\n (butlast (mapcat #(list % i) c))\n)", "problem": 40, "user": "4e6f8d36535d5021c1a89621"}, {"code": "#(drop-last(interleave %2(repeat %)))", "problem": 40, "user": "4e6e3aac535d5021c1a89603"}, {"code": "(fn  [item seq]\n  (drop-last\n   (interleave seq (repeat (count seq) item))))", "problem": 40, "user": "4daedd1eedd6309eace4d164"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4de760a3535d08e6dec9fdf9"}, {"code": "(fn intersperse [i xs]\n  (when-not (empty? xs)\n    (let [reduceRight (fn reduceRight [f z _xs]\n        (if-let [[x & xs] _xs]\n          (f x #(reduceRight f z xs))\n          z))]\n      (cons (first xs) (reduceRight #(cons i (cons %1 (%2))) '() (rest xs))))))", "problem": 40, "user": "4e691c79535d8ccf87e9fe97"}, {"code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "4e6eff83535d5021c1a89615"}, {"code": "(fn [d c] (reduce #(if (first %1) (conj %1 d %2) (conj %1 %2)) [] c))", "problem": 40, "user": "4e6fa38b535d5021c1a89622"}, {"code": "(fn [x coll]\n  (flatten (concat (map #(conj [%] x) (drop-last coll))\n                   (conj [] (last coll)))))", "problem": 40, "user": "4e5d0e96535d8a8b8723a2c8"}, {"code": "(fn k [x xs] (drop-last (flatten (map #(seq [% x]) xs))))", "problem": 40, "user": "4e765170535d324fb2983d69"}, {"code": "#(butlast (mapcat vector %2 (repeat (count %2) %1)))", "problem": 40, "user": "4daf907aedd6309eace4d17b"}, {"code": "(fn [sep coll]\n  (drop-last\n  \t(mapcat vector coll (repeat sep))))", "problem": 40, "user": "4e40529b535dc968683fc49a"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "4e707db6535d5021c1a8963a"}, {"code": "(fn [sep coll] (vec (rest \n  (reduce #(conj % sep  %2)  [] coll))))", "problem": 40, "user": "4e739e13535dff18050a9c76"}, {"code": "(fn [i s]\n  (butlast (mapcat vector s (repeat i))))", "problem": 40, "user": "4e773be8535d324fb2983d6e"}, {"code": "#(drop 1 (interleave (repeat %) %2))", "problem": 40, "user": "4e781a2e535d324fb2983d74"}, {"code": "#(conj (flatten (map (fn [x] [%1 x]) (rest %2))) (first %2))", "problem": 40, "user": "4e79a143535db169f9c796a2"}, {"code": "(fn [a b] (pop (reduce #(conj % %2 a) [] b)))", "problem": 40, "user": "4e794004535db169f9c796a1"}, {"code": "(fn fujikawa [separate col]\n  (loop [c col re ()]\n    (if (empty? c)\n      (reverse (rest re))\n      (recur (rest c) (cons separate (cons (first c) re)))\n      )\n    )\n  )", "problem": 40, "user": "4db7da66535d1e037afb2187"}, {"code": "(fn iter [sep s] \n  (if (or (empty? s) (empty? (rest s)))\n      s\n      (cons (first s) (cons sep (iter sep (rest s))))))", "problem": 40, "user": "4e7a5395535db169f9c796ab"}, {"code": "(fn [sep coll]\n  (loop [res [] iter coll]\n\t (if (empty? (rest iter))\n\t     (conj res (first iter))\n\t     (recur (conj res (first iter) sep) (rest iter)))))", "problem": 40, "user": "4e68fad4535d8ccf87e9fe93"}, {"code": "(fn[sep coll]\n  (loop [res () c coll]\n    (if (nil? (seq c))\n      (reverse res)\n      (recur (if (nil? (seq (rest c)))\n        (conj res (first c))\n        (conj res (first c) sep))\n        (rest c)))))", "problem": 40, "user": "4e7bc07c535db169f9c796b9"}, {"code": "(fn [sep items] (rest (interleave (repeat sep) items)))", "problem": 40, "user": "4e6a0667535d8ccf87e9fe9e"}, {"code": "(fn [item coll]\n  (reduce (fn [result elt] (conj result item elt))\n          [(first coll)]\n          (rest coll)))", "problem": 40, "user": "4e7c8fd1535db169f9c796be"}, {"code": "(fn [d l] (vec (flatten (reduce (fn [a b](conj [] a d b)) l))))", "problem": 40, "user": "4dbf0cd2535d020aff1edf72"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4e7db3b4535db169f9c796e1"}, {"code": "(fn [a s] (butlast (mapcat #(list % a) s)))", "problem": 40, "user": "4e7dd982535db169f9c796ee"}, {"code": "(fn [n col]\n  (let [foo (flatten\n              (let [out []]\n                (for [i (range (count col))]\n                (conj out (nth col i) n))))]\n    (take (- (count foo) 1) foo)))", "problem": 40, "user": "4e7d4544535db169f9c796d0"}, {"code": "(fn [x sq]\n  (-> sq\n    (interleave (repeat x))\n    (drop-last)))", "problem": 40, "user": "4e7e032b535db169f9c796fc"}, {"code": "(fn [n s]\n  (rest\n    (apply concat (map list (repeat n) s))))", "problem": 40, "user": "4e7dfab0535db169f9c796f9"}, {"code": "(fn [y xs] (rest (loop [r [] s xs] \n  (if (empty? s) r (recur (conj r y (first s)) (rest s))))))", "problem": 40, "user": "4e7e55ab535db169f9c79711"}, {"code": "#(butlast(interleave%2(repeat%1)))", "problem": 40, "user": "4e7eff9e535db966e863cc38"}, {"code": "(fn intp\n\n\n   [n,l]\n      (if (empty? (rest l))\n        l\n        (cons (first l) (cons n (intp n (rest l))))\n        )\n      )", "problem": 40, "user": "4e78c208535db95036265722"}, {"code": "#(drop-last (flatten (map (fn [el] (conj [el] %1)) %2)))", "problem": 40, "user": "4e7e33a3535db169f9c79708"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4e7e93f5535db169f9c7971a"}, {"code": "#(butlast(flatten(reverse(zipmap %2 (repeat %)))))", "problem": 40, "user": "4e7f4147535db966e863cc3d"}, {"code": "(fn my-interspose [val coll]\n  (butlast (mapcat (fn [x] (list x val)) coll)))", "problem": 40, "user": "4e7f51eb535db966e863cc3f"}, {"code": "(fn [x c] (rest (mapcat #(conj [x] %) c)))", "problem": 40, "user": "4e6ea1f5535d5021c1a8960e"}, {"code": "(fn [del seq]\n  (drop 1 (reverse (reduce #(conj %1 del %2) '() seq)))\n)", "problem": 40, "user": "4e7e05a6535db169f9c796fe"}, {"code": "#(rest (apply concat (for [i %2] [% i])))", "problem": 40, "user": "4db858d1535d1e037afb218c"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "4e80aa10535db62dc21a62b1"}, {"code": "(fn [a s]\n  (take (dec (* 2 (count s))) (flatten (for [i s]\n    [i a]))))", "problem": 40, "user": "4e80d71b535db62dc21a62b7"}, {"code": "(fn inter [x  y] (if (> (count y) 1)\n  (cons (first y) (cons x (inter x (rest y))))\n  (list (first y))))", "problem": 40, "user": "4e6cf521535de274dd8d818b"}, {"code": "(fn [ix ulaz] (reverse (rest (reverse (reduce concat (map (fn [x] (list x ix)) ulaz))))))", "problem": 40, "user": "4e78dc98535db95036265724"}, {"code": "(fn [n, c] (drop-last (flatten (map #(list % n) c))))", "problem": 40, "user": "4e7f7e48535db966e863cc42"}, {"code": "(fn intp\n  ([e col] (intp col e []))\n  ([col e rcol]\n         (if (empty? col) (drop-last rcol)\n                (intp (rest col) e (conj (conj rcol (first col)) e)))))", "problem": 40, "user": "4e7ada51535db169f9c796ae"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4e75d6b6535d7a570dd295c6"}, {"code": "#(next (for [x %2 y [%1 x]] y))", "problem": 40, "user": "4db1f7d223724b71670a9c07"}, {"code": "#(next (mapcat list (repeat %) %2))", "problem": 40, "user": "4e823ed7535db62dc21a62c7"}, {"code": "#(butlast (mapcat list %2 (repeat (count %2) %1)))", "problem": 40, "user": "4e6fe3a6535d5021c1a89629"}, {"code": "(fn ipose [what coll]\r\n  (cond\r\n    (< (count coll) 2) coll\r\n\r\n    true\r\n      (cons\r\n       (first coll)\r\n       (cons\r\n        what\r\n        (ipose what (rest coll))\r\n        )\r\n       )\r\n  )\r\n)", "problem": 40, "user": "4e7f3891535db966e863cc3b"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4e5a460f535d8a8b8723a2ab"}, {"code": "(fn [separator e]\n  ((fn [s elements result]\n    (if (= (count elements) 1)\n        (conj result (first elements))\n        (recur s (rest elements)\n                 (conj (conj result (first elements))\n                     s))))\n   separator e []))", "problem": 40, "user": "4e73a9dc535dff18050a9c77"}, {"code": "#(rest (mapcat list (repeat %1) %2))", "problem": 40, "user": "4e8612f8535db62dc21a62f2"}, {"code": "(fn [d i] (butlast (mapcat #(list % d) i)))", "problem": 40, "user": "4e5d1912535d8a8b8723a2c9"}, {"code": "(fn [x ys] (butlast (mapcat vector ys (repeat x))))", "problem": 40, "user": "4e8681b7535dae1a5effa438"}, {"code": "(fn [v s] (drop 1 (mapcat vector (repeat v) s)))", "problem": 40, "user": "4db8ec47535d1e037afb219d"}, {"code": "(comp rest #(mapcat list (repeat %) %2))", "problem": 40, "user": "4e80e0f2535db62dc21a62b8"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4e860e85535db62dc21a62f1"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4e8510e7535db62dc21a62e7"}, {"code": "(fn i [a s]\n    (if (= 1 (count s))\n\t      s\n\t      (concat (vector (first s) a)\n\t\t      (i a (next s)))))", "problem": 40, "user": "4e842ebb535db62dc21a62df"}, {"code": "(fn [v s] (drop-last (reduce #(into %1 [%2 v]) [] s)))", "problem": 40, "user": "4e821ca5535db62dc21a62c2"}, {"code": "(fn [a b] (butlast (mapcat #(vector % a) b)))", "problem": 40, "user": "4e6ebd4a535d5021c1a89610"}, {"code": "(fn [fill seqn]\n  (loop [seqn seqn acc []]\n    (if (= (count seqn) 1)\n      (concat acc seqn)\n      (recur (rest seqn) (conj acc (first seqn) fill)))))", "problem": 40, "user": "4e8944b6535d4ef0aa30db98"}, {"code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "4e894068535d4ef0aa30db97"}, {"code": "(fn [a l]\n  (if (empty? l)\n    '()\n    (letfn [(iter [accu l]\n  \t  (if (empty? l)\n\t\t    accu\n\t\t    (recur (cons (first l) (cons a accu)) (rest l))))]\n      (reverse (iter (list (first l)) (rest l))))))", "problem": 40, "user": "4e82c062535db62dc21a62cc"}, {"code": "(fn [x coll] (butlast (mapcat #(list % x) coll)))", "problem": 40, "user": "4dfe65a1535d04ed9115e787"}, {"code": "(fn ipose [sep s]\n  (if (= 1 (count s))\n    s\n    (concat (list (first s) sep) (ipose sep (rest s)))))", "problem": 40, "user": "4e89f46c535d3e98b8023288"}, {"code": "(fn [separator coll]\n    (reverse (reduce (fn [xs y] (cons y (cons separator xs)))\n                     (list (first coll))\n                     (rest coll))))", "problem": 40, "user": "4daf36c2edd6309eace4d175"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4e726914535d5021c1a89661"}, {"code": "(fn interp [sep coll]\n  (if (< 1 (count coll))\n    (cons (first coll)\n          (cons sep\n                (interp sep (rest coll))))\n    coll))", "problem": 40, "user": "4e8c1d97535d65386fec2127"}, {"code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "4e8aef69535d65386fec2114"}, {"code": "(fn [e col]\n  (rest (mapcat #(list e %) col)))", "problem": 40, "user": "4e89f9e5535d3e98b8023289"}, {"code": "(fn [x coll]\n    \"interpose a seq                                                         \n     0 [1 2 3] --> [1 0 2 0 3]\"\n    (loop [coll coll result []]\n      (cond\n       (empty? coll) result\n       (empty? (rest coll)) (conj result (first coll))\n       :else (recur (rest coll) (conj result (first coll) x)))))", "problem": 40, "user": "4e88feef535d8b9bb0147ca8"}, {"code": "(fn [val sequence] (butlast (reduce (fn [acc x] (concat acc [x val])) [] sequence)))", "problem": 40, "user": "4e89de60535d3e98b8023285"}, {"code": "(fn [sep coll] \n  (butlast (mapcat #(vector % sep) coll)))", "problem": 40, "user": "4dcfbc44535d5973398f92a7"}, {"code": "(fn [a b] (rest (flatten (map #(vector a %) b))))", "problem": 40, "user": "4e7f32ee535db966e863cc3a"}, {"code": "(fn[d l]\n  (loop [s l accum []]\n    (if-not (next s) \n      (conj accum (first s))\n      (recur (next s) (conj accum (first s) d)))))", "problem": 40, "user": "4e889643535d8b9bb0147ca5"}, {"code": "(fn [d coll]\n  (butlast (mapcat #(list % d) coll)))", "problem": 40, "user": "4e8a0c82535d3e98b802328d"}, {"code": "(fn [sep coll]\n    (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "4e8e8c24535d65386fec2143"}, {"code": "(fn pose [x seq]\n  (if (empty? (rest seq))\n    seq\n    (cons (first seq) (cons x (pose x (rest seq))))))", "problem": 40, "user": "4e84f77c535db62dc21a62e5"}, {"code": "(fn f [p l]\n  (cond (empty? l) '()\n        (empty? (rest l)) (cons (first l) (f p (rest l)))\n        :else (cons (first l) (cons p (f p (rest l))))))", "problem": 40, "user": "4e8b557c535d65386fec2119"}, {"code": "(fn join [j sq]\n  (if (> (count sq) 1)\n    (cons\n      (first sq)\n      (cons j (join j (rest sq))))\n    sq))", "problem": 40, "user": "4e8f5eba535d65386fec214c"}, {"code": "#(rest (mapcat vector (repeat %1) %2))", "problem": 40, "user": "4dc0ff08535d020aff1edf84"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "4e6a61d8535d8ccf87e9fed8"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "4db016af838c48654951d9b9"}, {"code": "#(rest(mapcat (fn [x] [% x]) %2))", "problem": 40, "user": "4e6f8431535d5021c1a8961e"}, {"code": "#(butlast (mapcat (fn [x] [x %1]) %2))", "problem": 40, "user": "4e79ff2a535db169f9c796a9"}, {"code": "#(butlast (mapcat list %2 (repeat %)))", "problem": 40, "user": "4dfd018c535d04ed9115e77f"}, {"code": "#(next (interleave (repeat %1) %2))", "problem": 40, "user": "4e89ddf9535d3e98b8023284"}, {"code": "#(flatten (reduce (fn [x y] [x % y]) %2))", "problem": 40, "user": "4e904d9c535d65386fec2152"}, {"code": "(fn sepp [y x]\n  (rest \n    (\n      (fn sepp1 [y x]\n        (if (seq x) \n          (into \n            (sepp1 y (rest x)) \n            (conj (conj '() y) (first x)))\n          () \n          ) \n        ) y x))\n)", "problem": 40, "user": "4e8d5edd535d65386fec2134"}, {"code": "#(rest (mapcat list (repeat %) %2))", "problem": 40, "user": "4e8df08f535d65386fec213e"}, {"code": "(fn [x y] (pop (vec (flatten (map #(concat (list %) (list x)) y)))))", "problem": 40, "user": "4e8b73e4535d65386fec2120"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "4e7e0bdc535db169f9c796ff"}, {"code": "(fn [val s]\n  (letfn [\n    (join [val s c] \n      (if (empty? s)\n        c\n        (if (empty? (rest s))\n          (recur val (rest s) (conj c (first s)))\n          (recur val (rest s) (conj (conj c (first s)) val)))))]\n  (join val s [])))", "problem": 40, "user": "4e8f4f64535d65386fec2149"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "4e951ce5535dbda64a6f6b2e"}, {"code": "#(rest (mapcat (partial list %1) %2))", "problem": 40, "user": "4de8a7d7535d08e6dec9fdfe"}, {"code": "(fn [v seq]\n  (let [vs (repeat v)]\n    (butlast (take-while identity (interleave seq vs)))))", "problem": 40, "user": "4e955b95535dbda64a6f6b33"}, {"code": "(fn [i [h & s]] (reduce #(conj % i %2) [h] s))", "problem": 40, "user": "4e9660ec535dbda64a6f6b44"}, {"code": "#(butlast (mapcat vector %2 (repeat %1)))", "problem": 40, "user": "4e96557d535dbda64a6f6b43"}, {"code": "(fn [v lst]\n  (cons (first lst) (reduce \n    (fn [acc it]\n      (conj acc v it))\n    [] (rest lst))  ))", "problem": 40, "user": "4e9528ef535dbda64a6f6b32"}, {"code": "(fn [sep l]\n  (rest (mapcat #(list sep %) l)))", "problem": 40, "user": "4e94a8b5535dbda64a6f6b16"}, {"code": "#(butlast (mapcat list %2 (repeat %1)))", "problem": 40, "user": "4e976f79535dbda64a6f6b55"}, {"code": "(fn [sep vet]\n(butlast (mapcat #(vector %1 sep) vet))\n)\n\n;#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4e8b6f4d535d65386fec211e"}, {"code": "#(next (mapcat (fn [x] [% x]) %2))", "problem": 40, "user": "4e8f1ac6535d65386fec2146"}, {"code": "#(butlast (mapcat vector %2 (repeat %1)))", "problem": 40, "user": "4e994541535dbda64a6f6b64"}, {"code": "#(drop 1 (interleave (repeat %) %2))", "problem": 40, "user": "4db13ff51254ad5b4805fa68"}, {"code": "#(rest (mapcat (partial list %) %2))", "problem": 40, "user": "4e9b230c535dbda64a6f6b75"}, {"code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "problem": 40, "user": "4e98a6d0535dbda64a6f6b5e"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4e7e241a535db169f9c79705"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4e9b22e2535dbda64a6f6b74"}, {"code": "(fn [i s] (rest (mapcat #(vector i %) s)))", "problem": 40, "user": "4e951f44535dbda64a6f6b30"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "4e7263a1535d5021c1a8965f"}, {"code": "(fn [br xs] (drop-last (mapcat #(list % br) xs)))", "problem": 40, "user": "4e9609ad535dbda64a6f6b3e"}, {"code": "(fn [it coll] \n  (if-let [nw (repeat (count coll) it) ] \n\t(vec (drop-last (interleave coll nw)))))", "problem": 40, "user": "4e8ad1d2535d65386fec2110"}, {"code": "(fn [a [x & s]] (cons x (interleave (repeat a) s)))", "problem": 40, "user": "4e9e0640535dbda64a6f6b91"}, {"code": "(fn myinterpose [o l]\r\n  (if (= (count l) 1)\r\n    l\r\n    (concat (list (first l) o) (myinterpose o (rest l)))))", "problem": 40, "user": "4e9e12b2535dbda64a6f6b92"}, {"code": "(fn sep[sepa sequ] (butlast (reduce #(conj (conj %1 %2) sepa) [] sequ)))", "problem": 40, "user": "4e9de526535dbda64a6f6b8e"}, {"code": "(fn [value seq]\n  (loop [acc [] [x & xs] seq]\n    (if (empty? xs)\n      (conj acc x)\n      (recur (conj acc x value) xs))))", "problem": 40, "user": "4e9fd521535d7eef3080729a"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "4e9e6bd6535dbda64a6f6b96"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4e9e7ce3535dbda64a6f6b98"}, {"code": "(fn [x y] (loop [index 0 result []] (cond (= index (count y)) result (= (inc index) (count y)) (recur (inc index) (conj result (nth y index))) true (recur (inc index) (conj result (nth y index) x)))))", "problem": 40, "user": "4e975bce535dbda64a6f6b53"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4e8516d0535db62dc21a62e8"}, {"code": "(fn [del coll]\n  (butlast (interleave coll (repeat (count coll) del))))", "problem": 40, "user": "4e9dafe1535dbda64a6f6b89"}, {"code": "(fn [del coll]\n  (butlast (interleave coll (repeat (count coll) del))))", "problem": 40, "user": "4daee8e9edd6309eace4d166"}, {"code": "(fn interp [sep col2]\n  (if (> 2 (count col2))\n    (list (first col2))\n    (concat (list (first col2) sep) (interp sep (rest col2)))))", "problem": 40, "user": "4ea01955535d7eef3080729f"}, {"code": "(fn [i col] (rest (reduce #(concat %1 [i] [%2]) [] col)))", "problem": 40, "user": "4e7d2448535db169f9c796c8"}, {"code": "#(rest (mapcat (partial vector %) %2))", "problem": 40, "user": "4db85bdd535d1e037afb218d"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4e9a8c0e535dbda64a6f6b72"}, {"code": "(fn [e c]\n  (reverse (rest (reverse (apply concat (map (fn[elt] [elt e]) c))))))", "problem": 40, "user": "4dbd2aa3535d020aff1edf40"}, {"code": "#(rest (mapcat (fn [x] [%1 x]) %2))", "problem": 40, "user": "4ea09fa4535d7eef308072aa"}, {"code": "(fn [v s] (butlast (interleave s (repeat v))))", "problem": 40, "user": "4ea092f4535d7eef308072a6"}, {"code": "(fn [x coll] (butlast (interleave coll (repeat x))))", "problem": 40, "user": "4ea1b9e4535d7eef308072b8"}, {"code": "(fn [v x]\n  (butlast (mapcat (fn [a] [a v]) x)))", "problem": 40, "user": "4e59b02c535d8a8b8723a2a2"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4ea0cfb0535d7eef308072ae"}, {"code": "(fn [x coll] \n  (butlast \n    (interleave coll \n      (take (count coll) \n        ((fn iter [y] (cons y (lazy-seq (iter y)))) \n        x)))))", "problem": 40, "user": "4e9ff8d0535d7eef3080729c"}, {"code": "(fn [i s]\n  (butlast (interleave s (repeat i))))", "problem": 40, "user": "4ea348ad535d7eef308072c4"}, {"code": "(fn [sep l] (drop-last (flatten (map #(conj nil sep %) l))))", "problem": 40, "user": "4e9c81e8535dbda64a6f6b80"}, {"code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "4e8a6bb0535d65386fec210b"}, {"code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "4e8ddf32535d65386fec213c"}, {"code": "(fn [v s]\n  (loop [sq s, acc []]\n    (if (empty? sq)\n      acc\n      (if (empty? acc)\n        (recur (rest sq) (conj acc (first sq)))\n        (recur (rest sq) (conj acc v (first sq)))))))", "problem": 40, "user": "4ea4fe1f535d7eef308072cf"}, {"code": "(fn f [x s] (if (> (count s) 1) (cons (first s) (cons x (f x (rest s)))) s))", "problem": 40, "user": "4ea41fc2535d7eef308072cb"}, {"code": "(fn [i s]\n  (loop [r [(first s)] i i s (rest s)]\n    (if (empty? s)\n      r\n      (recur\n        (conj r i (first s))\n        i\n        (rest s)))))", "problem": 40, "user": "4ea67906535d7eef308072e4"}, {"code": "#(rest (interleave (repeat %) %2 ))", "problem": 40, "user": "4ea5e794535d7eef308072df"}, {"code": "#(vec (drop-last \n  (interleave %2(repeat (count %2) %1))))", "problem": 40, "user": "4e7650c5535d324fb2983d68"}, {"code": "#(rest (flatten (map (fn [x] [% x]) %2)))", "problem": 40, "user": "4ea2ddf1535d7eef308072bf"}, {"code": "(fn [x l] (butlast (interleave l (repeat x))))", "problem": 40, "user": "4e9d6a65535dbda64a6f6b87"}, {"code": "(fn [x s]\n  (letfn [ (f [x s lst]\n               (cond\n                 (empty? s) lst\n                 (= (count s) 1) (recur x (rest s) (concat lst (list (first s))))\n                 :else (recur x (rest s) (concat lst (list (first s)) (list x)))\n                ))]\n  (f x s '())))", "problem": 40, "user": "4dd1de4d535dae65d5c462d7"}, {"code": "(fn [d coll] (rest (interleave (repeat (count coll) d) coll)))", "problem": 40, "user": "4dad76588e77d6ed63f12a44"}, {"code": "(fn inter[n c]\r\n  (pop(into [] (mapcat (fn add[x] [x n] )c)))\r\n  )", "problem": 40, "user": "4e9def6b535dbda64a6f6b8f"}, {"code": "#(rest (mapcat (fn [x] (vector %1 x)) %2))", "problem": 40, "user": "4e9fde3c535d7eef3080729b"}, {"code": "(fn [x ls]\n  (apply concat (cons [(first ls)]\n    (for [i (range (count (rest ls)))]\n      [x (nth ls (inc i))]\n    )\n  ))\n)", "problem": 40, "user": "4ea57300535d7eef308072d5"}, {"code": "#(reduce (fn [m v] (concat m [%1 v])) (list (first %2)) (rest %2))", "problem": 40, "user": "4dbb0f2d535d1e037afb21b1"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4e8a460e535d65386fec2109"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4ea85846535d7eef308072f9"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4eab612d535d7eef30807316"}, {"code": "(fn [sep c]\n  (rest (mapcat #(list sep %) c)))", "problem": 40, "user": "4ead6418535d7eef3080731f"}, {"code": "(fn [in coll]\n  (cons (first coll)\n        (mapcat #(list in %)\n                (next coll))))", "problem": 40, "user": "4eae5fe4535d7eef30807325"}, {"code": "(fn [x y] (butlast (mapcat #(vector % x) y)))", "problem": 40, "user": "4eaa96e1535d7eef3080730d"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4e8d86d5535d65386fec2136"}, {"code": "#(rest (mapcat (fn[x] [%1 x]) %2))", "problem": 40, "user": "4eaf08ce535d7eef3080732d"}, {"code": "(fn [v x] (rest (reverse (reduce #(cons %2 (cons v %1)) '() x))))", "problem": 40, "user": "4ea1ecfa535d7eef308072bb"}, {"code": "(fn ips [x y]\n  (loop [i 0 newseq []]\n    (if (= i (dec (count y))) (conj newseq (nth y i))\n    (recur (inc i) (conj newseq (nth y i) x)))))", "problem": 40, "user": "4ea9b80c535d7eef30807306"}, {"code": "#(rest(mapcat(fn[x](list% x))%2))", "problem": 40, "user": "4eb07be3535d7eef3080733b"}, {"code": "#(rest (flatten (map vector (cycle (list %1)) %2)))", "problem": 40, "user": "4e58c019535d8a8b8723a297"}, {"code": "(fn f [part coll]\r\n  (next (mapcat #(list part %) coll)))", "problem": 40, "user": "4eaed3a7535d7eef30807328"}, {"code": "#(drop 1 (interleave (repeat %) %2))", "problem": 40, "user": "4e6f4cbc535d5021c1a8961a"}, {"code": "(fn [c coll]\n  (concat\n    (interleave coll (repeat (dec (count coll)) c)) \n    [(last coll)]))", "problem": 40, "user": "4e949d18535dbda64a6f6b15"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "4eaede1f535d7eef30807329"}, {"code": "(fn interpos\n  [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "4eb0afed535d7eef3080733e"}, {"code": "(fn [sep lst]\n  (drop-last (interleave lst (repeat sep))))", "problem": 40, "user": "4eb1dd39535d7eef30807345"}, {"code": "(fn [i c]\n  (reverse (reduce (fn [a b]\n    (conj a i b)) (-> c first list) (next c))))", "problem": 40, "user": "4eb27fad535d7eef3080734a"}, {"code": "(fn [n2 v2](vec (rest (\r\n        (fn inter [n v]\r\n          (if (= (count v) 1)\r\n                 (cons n v)\r\n                  (cons n (cons (first v) (inter n (rest v))))\r\n         ))\r\n        n2 v2))))", "problem": 40, "user": "4e932523535dbda64a6f6b09"}, {"code": "(fn intrpse [i,s]\n  (if (not (= 1 (.size s)))\n    (cons (first s) (cons i (intrpse i (rest s))))\n    (list (first s))))", "problem": 40, "user": "4e8b98fc535d65386fec2124"}, {"code": "(fn [sep coll]\n    (drop 1 (flatten (map #(list sep %) coll))))", "problem": 40, "user": "4e89e939535d3e98b8023287"}, {"code": "#(loop [i %1, [f & r] %2, res []]\n  (if f \n    (recur i r (conj res i f))\n    (rest res)\n    ))", "problem": 40, "user": "4eabb245535d7eef30807319"}, {"code": "(fn nintp [m x]\n  (let [doint (fn [z] [m z])]\n  (rest (mapcat doint x))))", "problem": 40, "user": "4ea7999e535d7eef308072ee"}, {"code": "(fn\n  [v s]\n  (loop [intersposed [(first s)] val v seq (rest s)]\n    (println intersposed seq)\n    (if-not (empty? seq)\n     (recur (conj intersposed val (first seq))\n            val (rest seq))\n     intersposed)))", "problem": 40, "user": "4eaf1342535d7eef30807330"}, {"code": "(fn [n s]\n  (drop-last\n    (mapcat (fn [e] (list e n)) s)))", "problem": 40, "user": "4eb2e6ca535d7eef3080734f"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "4eb01df4535d7eef30807337"}, {"code": "#(->\n  (mapcat\n  (fn [x]\n    (concat (list x) (list %1))\n  ) \n%2)\n   reverse\n   rest\n   reverse\n )", "problem": 40, "user": "4e8b73f1535d65386fec2121"}, {"code": "(fn[sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "4eb80ce6535d7eef3080737d"}, {"code": "(fn [sep coll]\n  (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "4ea76541535d7eef308072eb"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4ea55757535d7eef308072d3"}, {"code": "#(rest (mapcat conj (repeat [%]) %2))", "problem": 40, "user": "4eb97b2e535dfed6da9c6d54"}, {"code": "(fn [n c] (drop-last (mapcat #(vec [%1 %2]) c (repeat n))))", "problem": 40, "user": "4eb97234535dfed6da9c6d53"}, {"code": "(fn poe[algo x]\n  (loop [aux x lista []] \n    (if( or (empty? aux) (= 1 (count aux)  ) )\n       (conj lista (first aux))\n       (recur (rest aux) (conj lista (first aux) algo))                \n    ) \n  )\n)", "problem": 40, "user": "4e94aab8535dbda64a6f6b1f"}, {"code": "(fn [s c] (rest (mapcat #(vec [s %]) c)))", "problem": 40, "user": "4eb5750a535d7eef30807366"}, {"code": "(fn [i s] \n  (reduce #(conj %1 i %2) [(first s)] (rest s)))", "problem": 40, "user": "4eb9c82d535dfed6da9c6d5c"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "4ebb78a2535dfed6da9c6d70"}, {"code": "(fn [sep coll] (drop-last (flatten (map #(vector % sep) coll))))", "problem": 40, "user": "4e9519b4535dbda64a6f6b2d"}, {"code": "#(rest (interleave (repeat (count %2) %) %2))", "problem": 40, "user": "4eac5bc1535d7eef3080731b"}, {"code": "(fn [x coll] (drop-last (mapcat #(list % x) coll)))", "problem": 40, "user": "4eb2eae5535d7eef30807351"}, {"code": "(fn [j s]\n  (reverse\n    (rest\n      (reverse\n        (interleave s (repeat j))))))", "problem": 40, "user": "4dbdc9da535d020aff1edf4c"}, {"code": "(fn [x s]\n  (butlast (interleave s (repeat (count s) x))))", "problem": 40, "user": "4ebc08a8535dfed6da9c6d7c"}, {"code": "#(rest (mapcat (partial list %) %2))", "problem": 40, "user": "4e82f85d535db62dc21a62ce"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "4e8a0d5d535d3e98b802328e"}, {"code": "#(drop-last 1 (interleave %2 (repeat %)))", "problem": 40, "user": "4eb25069535d7eef30807348"}, {"code": "#(rest (mapcat (partial list %) %2))", "problem": 40, "user": "4e1350af535d04ed9115e7d8"}, {"code": "(fn [x ys]\n    (rest (interleave (repeat x) ys)))", "problem": 40, "user": "4dadb891c9a9d6ed3699dc57"}, {"code": "(fn ipose [val coll] (if (next coll)\n(cons (first coll) (cons val \n(lazy-seq (ipose val (next coll))))) [(first coll)]))", "problem": 40, "user": "4ebf45c3535dfed6da9c6d9d"}, {"code": "(fn a [sep x]\n  (concat (mapcat list x (repeat (- (count x) 1) sep)) [(last x)]))", "problem": 40, "user": "4ea0c284535d7eef308072ad"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "4eb2d0ae535d7eef3080734e"}, {"code": "(fn [x xs] (reduce #(conj %1 x %2) (vector (first xs)) (rest xs)))", "problem": 40, "user": "4ec132a0535dfed6da9c6da9"}, {"code": "(partial \n(fn [result i c]\n  (if (seq c)\n    (recur (conj result i (first c)) i (rest c))\n    (rest result)))\n[])", "problem": 40, "user": "4ec12577535dfed6da9c6da8"}, {"code": "(fn [item coll]\n  (reverse\n   (conj (loop [c (butlast coll) interposed '()]\n           (if (empty? c)\n             interposed\n             (recur (rest c) (cons item (cons (first c) interposed)))))\n         (last coll))))", "problem": 40, "user": "4ebc64db535dfed6da9c6d82"}, {"code": "(fn [x,y] (rest (mapcat #(vector x %) y)))", "problem": 40, "user": "4ec0c7ba535dfed6da9c6da4"}, {"code": "(fn [x coll] (rest (flatten (map #(list x %1) coll))))", "problem": 40, "user": "4ebb20c0535dfed6da9c6d6f"}, {"code": "(fn myf [i [x & xs]]\n    (if (seq xs)\n      (lazy-seq (cons x (cons i (myf i xs))))\n      [x]))", "problem": 40, "user": "4ebe766d535dfed6da9c6d94"}, {"code": "#(drop 1 (interleave (repeat %) %2))", "problem": 40, "user": "4eb44d78535d7eef30807360"}, {"code": "(fn [separator coll]\n  (cons (first coll) (mapcat (fn [item] [separator item]) (rest coll))))", "problem": 40, "user": "4ec2fe3f535dcc7ae8597d4f"}, {"code": "(fn [it l]\n  (reverse\n    (reduce #(conj %1 it %2) \n            (list (first l)) \n            (rest l))))", "problem": 40, "user": "4ec21058535dfed6da9c6dba"}, {"code": "#(rest (mapcat list (repeat %) %2))", "problem": 40, "user": "4ec34578535dcc7ae8597d51"}, {"code": "(fn inter-pose [delim item-list] (drop-last (interleave item-list (repeat (count item-list) delim))))", "problem": 40, "user": "4ec12516535dfed6da9c6da7"}, {"code": "(fn my-interpose [a b] \n   (reverse (rest (\n      (fn ips [a b o] \n         (if (= (first b) nil) \n            o\n            (ips a (rest b) (cons a (cons (first b) o)))\n         )\n      )\n      a b []\n   )))\n)", "problem": 40, "user": "4ec17677535dfed6da9c6dad"}, {"code": "(fn ! [x ys]\n       (if (= ()\n        (rest ys))\n\t (list (first ys))\n\t (conj (! x (rest ys)) x (first ys))))", "problem": 40, "user": "4ec6157b535d6d7199dd36c2"}, {"code": "#(rest (mapcat (partial list %1) %2))", "problem": 40, "user": "4ec2f192535dcc7ae8597d4c"}, {"code": "(fn [sep coll] (take (- (* (count coll) 2) 1) (mapcat (fn [x] (list x sep)) coll)))", "problem": 40, "user": "4ec42c11535dcc7ae8597d5f"}, {"code": "#(rest (apply concat (for [x %2] [%1 x])))", "problem": 40, "user": "4ebbf772535dfed6da9c6d76"}, {"code": "#(drop 1 (mapcat list (repeat %) %2))", "problem": 40, "user": "4ec16c21535dfed6da9c6dac"}, {"code": "(fn [x xs] (rest (flatten (reduce #(conj % [x %2]) [] xs))))", "problem": 40, "user": "4ebd4448535dfed6da9c6d8f"}, {"code": "#(drop-last (flatten (map list %2 (repeat %))))", "problem": 40, "user": "4ec5d40d535d6d7199dd36b9"}, {"code": "#(drop-last (mapcat vector %2 (repeat %1)))", "problem": 40, "user": "4eb51942535d7eef30807365"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4dadc6f2c9a9d6ed4099dc57"}, {"code": "(fn inter [val coll]\n  (loop [s1 coll xs []]\n    (if (> (count s1) 1)\n      (recur (next s1) (conj xs (first s1) val))\n      (conj xs (first s1)))))", "problem": 40, "user": "4e0d5a5a535d04ed9115e7b5"}, {"code": "(fn [delim lst]\n  (loop [l lst, result []]\n    (if (empty? l)\n      result\n      (recur\n        (rest l)\n        (cond\n          (empty? result) (vector (first l))\n          :else (conj result delim (first l)))))))", "problem": 40, "user": "4e117dea535d04ed9115e7c9"}, {"code": "#(rest (mapcat (fn [x] [% x]) %2))", "problem": 40, "user": "4ec812d9535d6d7199dd36f0"}, {"code": "(fn inter [v xs] \n  (if (empty? (rest xs))\n    xs\n    (cons (first xs) (cons v (inter v (rest xs))))))", "problem": 40, "user": "4ec07699535dfed6da9c6da2"}, {"code": "(fn a [sep sq] (if (empty? (rest sq)) [(first sq)] (conj (reverse (a sep (reverse (rest sq)))) sep (first sq))))", "problem": 40, "user": "4dbecb06535d020aff1edf6a"}, {"code": "#(rest (flatten (map (partial conj [%1]) %2)))", "problem": 40, "user": "4ebede00535dfed6da9c6d9a"}, {"code": "#(rest (mapcat list (repeat %) %2))", "problem": 40, "user": "4ec74de3535d6d7199dd36df"}, {"code": "(fn [x col]\n     (loop [result []  c1 col]\n       (if (empty? c1)\n           result\n           (recur (if (empty? (rest c1)) (concat result [(first c1)] ) (concat result [(first c1) x] ))\n                  (rest c1)\n    ))))", "problem": 40, "user": "4ec5bec6535d6d7199dd36b3"}, {"code": "(fn interpose-j [v s]\n  (cond\n    (>= 1 (count s)) s\n    :else\n      (concat\n        [(first s) v]\n            (interpose-j v (rest s)))))", "problem": 40, "user": "4e6f578c535d5021c1a8961b"}, {"code": "(fn x-interpose [sep lst]\r\n  (flatten (list (first lst) (for [v (next lst)] [sep v]))))", "problem": 40, "user": "4eccb190535d23f0362276fe"}, {"code": "(fn [el coll] \n  (cons (first coll) \n     (interleave (replicate (-> coll count dec) el) \n        (rest coll))))", "problem": 40, "user": "4e25176e535d04ed9115e829"}, {"code": "(fn [sep coll] \n  (drop-last (interleave coll (repeat sep))))", "problem": 40, "user": "4ec3c4a0535dcc7ae8597d5a"}, {"code": "#(butlast (mapcat list %2 (repeat %1)))", "problem": 40, "user": "4ec28d86535dfed6da9c6dbc"}, {"code": "(fn [int coll] (butlast(into [] (mapcat #(list  % int) coll))))", "problem": 40, "user": "4ec51590535d6d7199dd3683"}, {"code": "(fn [val col]\n  (loop [result (conj [] (first col))\n         s (next (seq col))]\n    (if s\n      (recur (conj result val (first s))\n             (next s))\n      result)))", "problem": 40, "user": "4ecb1641535d6d7199dd370e"}, {"code": "(fn [sep coll]\n  (loop [c coll, r []]\n    (condp = (count c)\n      0 r\n      1 (conj r (first c))\n      (recur (rest c) (conj r (first c) sep)))))", "problem": 40, "user": "4e7e4d5c535db169f9c7970f"}, {"code": "(fn [v c] \n  (vec (butlast \n    (flatten (map #(vector %1 v) c)))))", "problem": 40, "user": "4e52777f535d302ef430da76"}, {"code": "(fn [limiter b] (loop [s (map #(list % limiter) (drop-last b)) r '()]\n             (if (empty? s)\n               (concat r (list (last b)))\n               (recur (rest s) (concat r (first s))))))", "problem": 40, "user": "4ebef65e535dfed6da9c6d9b"}, {"code": "(fn [sep coll]\n  (drop-last (interleave coll (repeat sep))))", "problem": 40, "user": "4ec70f26535d6d7199dd36dd"}, {"code": "(fn [x y] (butlast (mapcat #(list % x) y)))", "problem": 40, "user": "4ecbb249535df97575fdabdf"}, {"code": "#(rest (interleave (iterate identity %) %2))", "problem": 40, "user": "4ece9ca9535d23f03622770f"}, {"code": "#(take (- (* (count %2) 2) 1) (interleave %2 (repeat %)))", "problem": 40, "user": "4ecfb458535d44c135fd68bb"}, {"code": "#(reduce (fn [s x] (conj s % x)) [(first %2)] (rest %2))", "problem": 40, "user": "4ed06ea6535d44c135fd68c4"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "4ecf42b4535d1f5ad70dba3c"}, {"code": "#(cons (first %2) (mapcat (fn[e](list %1 e)) (next %2)))", "problem": 40, "user": "4ec75829535d6d7199dd36e1"}, {"code": "#(butlast (mapcat vector %2 (repeat %)))", "problem": 40, "user": "4ed15f60535d44c135fd68cd"}, {"code": "(fn [sep, ls] (drop-last (mapcat #(list % sep) ls)))", "problem": 40, "user": "4ecc147b535d23f0362276f7"}, {"code": "(fn [v [x & xs]] (cons x (interleave (repeat v) xs)))", "problem": 40, "user": "4ed188c8535d44c135fd68cf"}, {"code": "#(butlast\n  (flatten\n    (map list %2 (repeat %1))))", "problem": 40, "user": "4ec60dc4535d6d7199dd36c0"}, {"code": "(fn [sep coll]\n  (rest (mapcat list (repeat sep) coll)))", "problem": 40, "user": "4eb9ce75535dfed6da9c6d5e"}, {"code": "#(drop-last (interleave %2 (repeat (count %2) %)))", "problem": 40, "user": "4ecf1f51535d1f5ad70dba3a"}, {"code": "#(drop 1 (interleave (repeat %) %2))", "problem": 40, "user": "4ebc829e535dfed6da9c6d86"}, {"code": "(fn my-interpose\n  [x seq]\n  (rest (mapcat #(vector x %) seq)))", "problem": 40, "user": "4ebf11bc535dfed6da9c6d9c"}, {"code": "(fn [s as] (cons (first as) (mapcat (fn [a] [s a]) (rest as))))", "problem": 40, "user": "4ecab3b7535d6d7199dd3709"}, {"code": "(fn [p l]\n  (butlast (reduce #(concat % [%2 p]) [] l)))", "problem": 40, "user": "4ed2b168535d44c135fd68dd"}, {"code": "(fn [del, seq] (reduce #(concat %1 [del] [%2]) [(first seq)] (rest seq)))", "problem": 40, "user": "4ece7617535d23f03622770c"}, {"code": "#(conj (mapcat (fn [e] [% e]) (rest %2)) (first %2))", "problem": 40, "user": "4eb0a757535d7eef3080733d"}, {"code": "#(drop-last (interleave %2 (repeat %)))", "problem": 40, "user": "4dbf7a31535d020aff1edf75"}, {"code": "(fn my-interpose [elem coll]\n  (if (seq coll)\n    (lazy-seq\n      (cons (first coll)\n            (let [r (rest coll)]\n              (if (seq r) (cons elem (my-interpose elem r))))))))", "problem": 40, "user": "4ec75077535d6d7199dd36e0"}, {"code": "#(butlast (mapcat (partial conj (list %)) %2))", "problem": 40, "user": "4eb13d60535d7eef3080733f"}, {"code": "(fn myinterpose [k [f & r :as l]] \n  (if (nil? r) [f] (lazy-cat [f k] (myinterpose k r))))", "problem": 40, "user": "4ecaaa25535d6d7199dd3708"}, {"code": "(fn [i col] (rest (mapcat #(list i %) col)))", "problem": 40, "user": "4ea4e98a535d7eef308072ce"}, {"code": "#(drop 1 (interleave (repeat %) %2))", "problem": 40, "user": "4e75500f535d7a570dd295c1"}, {"code": "(fn [sep s]\n    (concat (conj (mapcat (fn [el] [sep el]) (drop 1 s)) (first s))))", "problem": 40, "user": "4ed292ac535d44c135fd68d9"}, {"code": "#(rest (mapcat list (repeat %) %2))", "problem": 40, "user": "4e5af45e535d8a8b8723a2b1"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4ecc8dea535d23f0362276fd"}, {"code": "(fn [x list]\n  (loop [remaining list\n         result []]\n           (if (> (count remaining) 1) \n             (recur (rest remaining)\n                    (conj result (first remaining) x))\n             (conj result (first remaining)))))", "problem": 40, "user": "4daf1076edd6309eace4d16f"}, {"code": "(fn ip [y xs]\n  (if (< (count xs) 2) \n      xs\n      (cons (first xs) (cons y (ip y (rest xs))))\n))", "problem": 40, "user": "4ed500bb535d10e5ff6f52d3"}, {"code": "(fn [e col]\n  (rest (interleave (repeat e) col)))", "problem": 40, "user": "4e7f8f85535db966e863cc44"}, {"code": "(fn interp [x coll]\n  (if (= (count coll) 1) coll\n  (concat (cons (first coll) [x]) (interp x (rest coll)))))", "problem": 40, "user": "4ed4798f535d10e5ff6f52cc"}, {"code": "#(butlast (flatten (map (fn [x]\n                          (list x %1)) %2)))", "problem": 40, "user": "4ed578d1535d10e5ff6f52d9"}, {"code": "#(next (interleave (repeat %) %2))", "problem": 40, "user": "4ed69ea4535d10e5ff6f52e3"}, {"code": "(fn fobo [x y]\r\n  (drop 1 (interleave (repeat x) y)))", "problem": 40, "user": "4ec7def0535d6d7199dd36e9"}, {"code": "(fn mine [pose xs]\n  (cond (= 1 (count xs)) xs\n        :else (cons (first xs)\n                    (cons pose (mine pose (rest xs))))))", "problem": 40, "user": "4dad8d4bc9a9d6ed1799dc57"}, {"code": "#(cons (first %2) (mapcat list (repeat %) (rest %2)))", "problem": 40, "user": "4e65027c535d8ccf87e9fe6e"}, {"code": "#(butlast (mapcat list %2 (repeat %)))", "problem": 40, "user": "4eca40cd535d6d7199dd3703"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "4ed6238d535d10e5ff6f52de"}, {"code": "(fn [s x]\n  (loop [curr_x (rest x), result [(first x)]]\n    (if (empty? curr_x)\n      result\n      (recur (rest curr_x) (conj result s (first curr_x))))))", "problem": 40, "user": "4ec5cdb0535d6d7199dd36b8"}, {"code": "(fn [n x] (reduce (fn [a b] (conj a n b)) [(first x)] (rest x)))", "problem": 40, "user": "4ed94d69535d10e5ff6f5303"}, {"code": "(fn [sep coll]\n  (rest\n    (interleave (repeat sep) coll)))", "problem": 40, "user": "4ed0e139535d44c135fd68c7"}, {"code": "(fn inter [item coll]\n  (conj\n    ((fn inner [item coll]\n      (if (seq coll)\n          (conj (inner item (rest coll)) (first coll) item)\n          ())) item (rest coll)) (first coll)))", "problem": 40, "user": "4eda7cc3535d10e5ff6f530e"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4ec5aa1f535d6d7199dd36b0"}, {"code": "(fn [elem coll]\n  (rest (mapcat #(list elem %) coll)))", "problem": 40, "user": "4edab806535d10e5ff6f5311"}, {"code": "(fn [sep c]\n  (pop (vec (interleave c (repeat sep)))))", "problem": 40, "user": "4e86fd2d535dceadca46984d"}, {"code": "#(rest (mapcat list (repeat %) %2))", "problem": 40, "user": "4ed6ac40535d10e5ff6f52e4"}, {"code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "4e6e7018535d5021c1a8960b"}, {"code": "(fn interpose-mark [x coll]\n  (cond \n    (= 1 (count coll)) coll\n    :else\n    (cons (first coll) (cons x (interpose-mark x (rest coll))))))", "problem": 40, "user": "4ecdb0bb535d23f036227709"}, {"code": "(fn [a col] (reverse (rest (reduce #(conj %1 %2 a) () col))))", "problem": 40, "user": "4ed6c738535d10e5ff6f52e9"}, {"code": "(fn my-interpose [separator col]\n  (butlast (interleave col (repeat separator))))", "problem": 40, "user": "4eb59464535d7eef30807369"}, {"code": "(fn inter [x coll]\n (cond\n   (not (seq coll)) []\n   (seq (rest coll))\n     (cons (first coll) (cons x (inter x (rest coll))))\n   :else\n   (cons (first coll) (inter x (rest coll)))))", "problem": 40, "user": "4eb955da535dfed6da9c6d50"}, {"code": "(fn pose [i s]\n  (if (seq s)\n\t\t(if (seq (rest s))\n\t\t\t(concat (vector (first s) i) (pose i (rest s)))\n\t\t\t(vector (first s)))\n\t\t[]))", "problem": 40, "user": "4ed72e51535d10e5ff6f52ee"}, {"code": "(fn separate [separator lst]\n  (cond\n    (empty? lst) lst\n    (empty? (rest lst)) lst\n    :else (conj (separate separator (rest lst)) separator (first lst) )\n    )\n  )", "problem": 40, "user": "4ecfa05c535d44c135fd68b9"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "4ede8789535d10e5ff6f5337"}, {"code": "(fn[sep xs]\n  (rest(interleave(repeat sep)xs)))", "problem": 40, "user": "4edeac6b535d10e5ff6f533a"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "4ed27f9f535d44c135fd68d5"}, {"code": "(fn [x coll] (drop-last (interleave coll (repeat x))))", "problem": 40, "user": "4ea11921535d7eef308072af"}, {"code": "(fn [e v]\r\n (loop [w [] aux v]\r\n    (if (empty? aux)\r\n       (take (- (count w) 1) w)\r\n       (recur (conj w (first aux) e) (rest aux))\r\n    )\r\n )\r\n)", "problem": 40, "user": "4e94aa18535dbda64a6f6b1e"}, {"code": "(fn interior [valor lista]\r\n  (loop [x lista resultado []]\r\n    (if (empty? x)\r\n      (take (- (count resultado) 1) resultado)\r\n      (recur (rest x) (conj resultado (first x) valor))\r\n    )\r\n  )\r\n)", "problem": 40, "user": "4edf92f0535d10e5ff6f5341"}, {"code": "(fn [x l]\n  (rest (mapcat (fn [y] [x y]) l)))", "problem": 40, "user": "4ede8e1d535d10e5ff6f5339"}, {"code": "#(drop-last (interleave %2 (repeat %)))", "problem": 40, "user": "4edd038c535d10e5ff6f5327"}, {"code": "(fn [a lst] (flatten (reduce #(list %1 a %2) lst)))", "problem": 40, "user": "4ec18451535dfed6da9c6db0"}, {"code": "#(concat (mapcat list (butlast %2) (repeat %)) (list (last %2)))", "problem": 40, "user": "4e89ff3d535d3e98b802328a"}, {"code": "(fn [delim vals]\n  (let [size (count vals)]\n    (rest (interleave (repeat size delim) vals))))", "problem": 40, "user": "4edd9d79535d10e5ff6f532b"}, {"code": "(fn [sep coll]\n  (flatten (reduce #(vector % sep %2) coll)))", "problem": 40, "user": "4ed62436535d10e5ff6f52df"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "4ec6357a535d6d7199dd36c5"}, {"code": "(fn i [x a]\n  (if (<= (count a) 1) a\n      (cons (first a) (cons x (i x (rest a))))))", "problem": 40, "user": "4dbde85b535d020aff1edf52"}, {"code": "(fn [sep coll]\n  (reduce\n    #(conj % sep %2)\n    [(first coll)]\n    (rest coll)))", "problem": 40, "user": "4ee2da14535d10e5ff6f536c"}, {"code": "(fn [sep coll]\n  (butlast (mapcat #(cons % (cons sep nil)) coll)))", "problem": 40, "user": "4ed9fe5f535d10e5ff6f5308"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "4db6ce85535d1e037afb217f"}, {"code": "(fn [x [y & ys]] (cons y (mapcat #(list x %) ys)))", "problem": 40, "user": "4ee3b586535d10e5ff6f5371"}, {"code": "#(drop-last\r\n    (reduce concat\r\n      (map vector %2 (iterate identity %1))))", "problem": 40, "user": "4ee40938535d10e5ff6f5375"}, {"code": "(fn [item seq] (reverse (rest (reverse (reduce #(conj %1 %2 item) [] seq)))))", "problem": 40, "user": "4edd4b77535d10e5ff6f5328"}, {"code": "(fn [d x] (rest (mapcat (fn [xx] [d xx]) x)))", "problem": 40, "user": "4ee26f01535d10e5ff6f5368"}, {"code": "#(rest (reduce (fn[a i] (conj a % i)) [] %2))", "problem": 40, "user": "4ec6cd4f535d6d7199dd36d7"}, {"code": "(fn [s l] (mapcat #(if (= % (last l )) (list %) (list % s)) l))", "problem": 40, "user": "4edf5dc6535d10e5ff6f5340"}, {"code": "#(rest (interleave (repeat (count %2) %1) %2))", "problem": 40, "user": "4ed7b617535d10e5ff6f52f3"}, {"code": "(fn [x xs]\n  (drop 1 (interleave (repeat x) xs)))", "problem": 40, "user": "4ee75ec2535d93acb0a66867"}, {"code": "#(drop-last (mapcat vector %2 (repeat %1)))", "problem": 40, "user": "4edfd846535d10e5ff6f5345"}, {"code": "(fn [x coll] (rest (mapcat #(list x %) coll)))", "problem": 40, "user": "4ee6400c535d93acb0a6685b"}, {"code": "(fn [delim [h & r]]\n  (reduce\n    (fn [memo el] (concat memo (list delim el))) (list h) r))", "problem": 40, "user": "4ec5a6ee535d6d7199dd36ae"}, {"code": "(fn [join coll]\n  (butlast (reduce #(conj (conj %1 %2) join) [] coll)))", "problem": 40, "user": "4eddcbbf535d10e5ff6f532d"}, {"code": "#(rest (mapcat list (repeat %) %2))", "problem": 40, "user": "4eb30868535d7eef30807355"}, {"code": "(comp next\n  (fn f [x [h & t]]\n    (if h\n      (conj (f x t) h x))))", "problem": 40, "user": "4ee82539535d93acb0a66878"}, {"code": "#(drop-last (mapcat vector %2 (repeat %1)))", "problem": 40, "user": "4edee6a2535d10e5ff6f533e"}, {"code": "(fn inter[sep lst] \n  (drop-last 1(flatten(map (fn [a b] [a b]) lst (repeat sep)))))", "problem": 40, "user": "4ee8092f535d93acb0a66875"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "4ee7ef87535d93acb0a66872"}, {"code": "#(rest (mapcat list (repeat %) %2))", "problem": 40, "user": "4ee7d177535d93acb0a6686f"}, {"code": "(fn [sep coll]\n    (if (seq coll)\n      (loop [r  [(first coll)]\n             xs (rest coll)]\n        (if (seq xs)\n          (recur (conj r sep (first xs)) (rest xs))\n          r))\n      coll))", "problem": 40, "user": "4e5be681535d8a8b8723a2bc"}, {"code": "#(reverse\n  (rest\n    (reduce (fn [a b] (conj a b %1)) '() %2)))", "problem": 40, "user": "4ee82223535d93acb0a66877"}, {"code": "(fn [i xs]\n  (loop [x (first xs) xs (rest xs) out []]\n    (if (seq xs)\n       (recur (first xs) (rest xs) (conj out x i))\n       (conj out x))))", "problem": 40, "user": "4ee88269535d93acb0a6687f"}, {"code": "#(rest (mapcat (fn [x] [% x]) %2))", "problem": 40, "user": "4ee88bfb535d93acb0a66881"}, {"code": "(letfn [(myil [c1 c2]                                                                                                                                    \n                     (let [s1 (seq c1) s2 (seq c2)]                                                                                                             \n                          (when (and s1 s2)                                                                                                                     \n                            (cons (first s1)                                                                                                                    \n                                  (cons (first s2)                                                                                                              \n                                        (myil (rest s1) (rest s2)))))))]                                                                                        \n                                        (fn [x c]                                                                                                               \n                                            (when (seq c) (drop 1 (myil (repeat x) c)))))", "problem": 40, "user": "4e4be570535dc968683fc4d8"}, {"code": "#(butlast (mapcat list %2 (repeat (count %2) %)))", "problem": 40, "user": "4ed19f00535d44c135fd68d1"}, {"code": "(fn [x l]\n  (rest (mapcat #(vec [x %]) l)))", "problem": 40, "user": "4ee63d8d535d93acb0a66859"}, {"code": "(fn [x v] (vec (drop-last (mapcat #(list % x) v))))", "problem": 40, "user": "4ec79f99535d6d7199dd36e4"}, {"code": "#(butlast (for [x %2 y [x %]] y))", "problem": 40, "user": "4ee9ddb8535d93acb0a66896"}, {"code": "#((fn [x y z] (if\n  (= (count y) 1) \n  (concat z y)\n  (recur x (rest y) (concat z [(first y) x]))\n)) % %2 [])", "problem": 40, "user": "4eebfd03535d93acb0a668ab"}, {"code": "(fn [x coll] (rest (interleave (repeat (count coll) x) coll)))", "problem": 40, "user": "4ee9d697535d93acb0a66895"}, {"code": "#(next (interleave (repeat %) %2))", "problem": 40, "user": "4e95f5a5535dbda64a6f6b3b"}, {"code": "(fn [inter col] (flatten (reduce #(list %1 inter %2) col)))", "problem": 40, "user": "4daeabf6edd6309eace4d15c"}, {"code": "#(cons (first %2) (mapcat (fn [v] [%1 v]) (rest %2)))", "problem": 40, "user": "4ee868be535d93acb0a6687d"}, {"code": "(fn [s [x & xs]] (conj (mapcat (partial list s) xs) x))", "problem": 40, "user": "4eebc5da535d93acb0a668aa"}, {"code": "#(butlast (mapcat (fn [x] (list x %1)) %2))", "problem": 40, "user": "4ee91d00535d93acb0a6688b"}, {"code": "(fn [inter coll]\n    (rest (interleave (repeat inter) coll)))", "problem": 40, "user": "4e7e8684535db169f9c79717"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4ee4f4a9535d1385b2869d85"}, {"code": "(fn [y xs] (drop-last (flatten (map #(vector % y) xs))))", "problem": 40, "user": "4eeae8f0535d93acb0a668a2"}, {"code": "(fn [d s] (rest (mapcat #(vector d %) s)))", "problem": 40, "user": "4eecdd66535d93acb0a668b9"}, {"code": "#(rest (interleave (repeat (count %2) %1) %2))", "problem": 40, "user": "4ef0a39b535dced4c769f20c"}, {"code": "#(rest (interleave (cycle [%1]) %2))", "problem": 40, "user": "4daea889edd6309eace4d15b"}, {"code": "(fn [val s]\n  (pop (vec (mapcat (fn [e] [e val]) s))))", "problem": 40, "user": "4ef0a38e535dced4c769f20b"}, {"code": "(fn [c coll] (pop (reduce #(when %2 (conj %1 %2 c)) [] coll)))", "problem": 40, "user": "4ef0a39b535dced4c769f20d"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4ef2d243535dced4c769f221"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4ef2a142535dced4c769f21e"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4ef49c2c535dced4c769f238"}, {"code": "(fn my-interpose [sep xs]\n  (let [len (count xs)]\n    (if (= 0 len)\n      nil\n    (if (= 1 len)\n      xs\n      (conj (my-interpose sep (rest xs)) sep (first xs))))))", "problem": 40, "user": "4ef41f26535dced4c769f230"}, {"code": "(fn [x ys] (rest (apply concat (for [y ys] [x y]))))", "problem": 40, "user": "4edecdae535d10e5ff6f533c"}, {"code": "(fn [sep xs]\n  (rest (apply concat (map #(list sep %) xs))))", "problem": 40, "user": "4ee67d74535d93acb0a66861"}, {"code": "(fn [a s]\r\n  (loop [xs s acc [] intl? false]\r\n    (if (empty? xs)\r\n      acc\r\n      (recur (rest xs) \r\n             (if intl? (concat acc [a (first xs)]) (seq [(first xs)]))\r\n             true))))", "problem": 40, "user": "4ef1ee67535dced4c769f219"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "4ef4c1ff535dced4c769f23e"}, {"code": "(fn [sep [f & r]]\n    (cons f (mapcat #(list sep %1) r)))", "problem": 40, "user": "4ef667c4535dced4c769f24c"}, {"code": "(fn [n coll] (drop 1 (interleave (repeat n) coll)))", "problem": 40, "user": "4ec6297b535d6d7199dd36c4"}, {"code": "#(loop [s %2 r []]\n  (if (empty? s)\n   (butlast r)\n   (recur (rest s) (conj r (first s) %))))", "problem": 40, "user": "4ef355e3535dced4c769f228"}, {"code": "(fn [val col]\n  (butlast (mapcat #(vector % val) col)))", "problem": 40, "user": "4ef4acf8535dced4c769f23c"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "4ef4e5fa535dced4c769f242"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "4ef5c7ce535dced4c769f248"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4ef77c82535dced4c769f253"}, {"code": "#(rest (mapcat list (repeat %) %2))", "problem": 40, "user": "4dd88803535d2dad7130b5d9"}, {"code": "#(butlast (mapcat list %2 (repeat %1)))", "problem": 40, "user": "4ef992c8535dced4c769f268"}, {"code": "(fn [d c]\n   (let [s (str \"/\" d \"/\")]\n     (if (= d \", \")\n     (reduce #(str % %2) (clojure.string/split (clojure.string/join s c) #\"/\"))\n     (map #(read-string %) (clojure.string/split (clojure.string/join s c) #\"/\")))))", "problem": 40, "user": "4e1fe800535d04ed9115e811"}, {"code": "(fn [x ys] (loop [yy ys erster true res nil]\n  (if (empty? yy)\n    res\n    (if erster \n      (recur (rest yy) false (list (first yy)))\n      (recur (rest yy) false (concat res (list x (first yy))))))))", "problem": 40, "user": "4ee528fb535d1385b2869d87"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "4efacdf7535dced4c769f271"}, {"code": "(fn myinterpose [x xs]\n  (cond (empty? xs) '()\n        (empty? (rest xs)) xs\n        true (conj (myinterpose x (rest xs)) x (first xs))))", "problem": 40, "user": "4ef6f5ea535dced4c769f250"}, {"code": "#(butlast( interleave %2 (repeat %1)))", "problem": 40, "user": "4ee2baa8535d10e5ff6f536b"}, {"code": "(fn [sep xs] (reverse (drop 1 (reduce #(cons sep (conj %1 %2)) '() xs))))", "problem": 40, "user": "4ef8d47c535dced4c769f261"}, {"code": "(fn [v s]\n  (loop [results '()\n        more s]\n    (if (empty? more)\n      (reverse results)\n      (if (= (count more) 1)\n        (recur (conj results (first more)) (next more))\n        (recur (conj results (first more) v) (next more))))))", "problem": 40, "user": "4efb92ce535dced4c769f27a"}, {"code": "#(butlast (mapcat (fn [item] [item %]) %2))", "problem": 40, "user": "4ec5d62c535d6d7199dd36ba"}, {"code": "#(drop 1 (interleave (repeat %) %2))", "problem": 40, "user": "4eee5c7f535d93acb0a668c6"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4e9be708535dbda64a6f6b79"}, {"code": "#(butlast (mapcat list %2 (iterate (fn [a] a) %)))", "problem": 40, "user": "4efb0ae1535dced4c769f273"}, {"code": "(fn my-interpose \n    ([ival icoll] (my-interpose ival icoll '()))\n    ([ival icoll ocoll]\n     (cond\n      (empty? icoll) (reverse (drop 1 ocoll))\n      :else (recur ival (rest icoll) (conj ocoll (first icoll) ival)))))", "problem": 40, "user": "4eee3e6a535d93acb0a668c3"}, {"code": "(fn intrp [n coll]\n   (cons (first coll) (mapcat #(list n %) (rest coll))))", "problem": 40, "user": "4ef57a7f535dced4c769f246"}, {"code": "(fn [v xs](drop-last (mapcat vector xs (repeat v))))", "problem": 40, "user": "4efcac3a535de96065cf507e"}, {"code": "#(vec(flatten (reduce (fn [x y][x %1 y]) %2)))", "problem": 40, "user": "4ed2dd98535d44c135fd68e2"}, {"code": "#(butlast (mapcat list %2 (repeat %)))", "problem": 40, "user": "4efb2fd7535dced4c769f274"}, {"code": "#(drop 1 (interleave (repeat %) %2))", "problem": 40, "user": "4e8768f6535dceadca469850"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "4ed9354f535d10e5ff6f5301"}, {"code": "(fn [sep values]\n  (rest \n    (flatten\n      (map #(list %1 %2) (repeat sep) values))))", "problem": 40, "user": "4ee3afde535d10e5ff6f5370"}, {"code": "(fn my-interleave [sep coll]\n  (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "4eb2c45e535d7eef3080734d"}, {"code": "(fn [sep s] (butlast (mapcat #(list %1 sep) s)))", "problem": 40, "user": "4effb663535dcb61093f6a2e"}, {"code": "(fn [x y] (cons (first y) (mapcat #(list x %) (rest y))))", "problem": 40, "user": "4eff81ca535dcb61093f6a2d"}, {"code": "#(butlast (flatten (for [x %2] [x %])))", "problem": 40, "user": "4efb87f7535dced4c769f279"}, {"code": "(fn wstaw [co gdzie]\r\n(if (empty? gdzie) (list)\r\n( if (= 1 (count gdzie)) \r\n(list (first gdzie))\r\n(cons (first gdzie) (cons co (wstaw co (rest gdzie)))))))", "problem": 40, "user": "4f00c74f535dcb61093f6a31"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4f01ff83535dcb61093f6a3a"}, {"code": "(fn my-interpose [sep items0]\n   (loop [items items0 out '()]\n      (if (empty? items )\n        (reverse (rest out))\n        (recur (rest items) (conj out (first items) sep)))))", "problem": 40, "user": "4ee9c8d0535d93acb0a66892"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "4f031eac535dcb61093f6a67"}, {"code": "(fn [delim col] (drop-last (flatten (map #(list %1 delim) col))))", "problem": 40, "user": "4f032977535dcb61093f6a6c"}, {"code": "(fn [e s]\n  (drop-last (reduce #(into %1 [%2 e]) [] s)))", "problem": 40, "user": "4e1f9bb5535d04ed9115e80d"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "4db8f6c4535d1e037afb219e"}, {"code": "(fn pose [val [x & xs]]\n  (if (seq xs)\n    (cons x (cons val (pose val xs)))\n    (cons x nil)))", "problem": 40, "user": "4ef0eaef535dced4c769f211"}, {"code": "(fn [elem s] (butlast (interleave s (repeat elem))))\n; butlast takes linear time\n; maybe (interleave (repeat elem) s) and drop first one", "problem": 40, "user": "4efd98fa535de96065cf5086"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4f01c938535dcb61093f6a39"}, {"code": "#(butlast (mapcat (fn [x] (list x %)) %2))", "problem": 40, "user": "4f036d9b535dcb61093f6ac1"}, {"code": "(fn intp [s, s1]\n    (if (= 1 (count s1))\n      (vector (first s1))\n      (concat (vector (first s1) s) (intp s (rest s1)))))", "problem": 40, "user": "4edffe54535d10e5ff6f5347"}, {"code": "(fn ip [x ys]\n    (cond (empty? ys)  nil\n          (empty? (rest ys)) (list (first ys))\n          :else (list* (first ys) x (ip x (rest ys)))))", "problem": 40, "user": "4ee82ce9535d93acb0a6687a"}, {"code": "(fn [i s]\n  (if (empty? s) nil\n    (loop [a (list (first s)) s (rest s)]\n      (if (empty? s) (reverse a) (recur (cons (first s) (cons i a)) (rest s))))))", "problem": 40, "user": "4f03d0fe535dcb61093f6b6d"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "4f03822f535dcb61093f6b03"}, {"code": "#(butlast (interleave %2 (repeat  (count %2) %1)))", "problem": 40, "user": "4f0397ee535dcb61093f6b30"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4ef6e689535dced4c769f24f"}, {"code": "(fn [i s] (loop [s s r []]\n  (if (empty? (rest s))\n    (conj r (first s))\n    (recur (rest s) (conj r (first s) i)))))", "problem": 40, "user": "4f038017535dcb61093f6afa"}, {"code": "(fn [e s & r]\n       (if (empty? (rest s))\n             (concat r (list (first s)))\n             (recur e (rest s) (concat r (list (first s) e)))))", "problem": 40, "user": "4f03193e535dcb61093f6a61"}, {"code": "(fn [v l] (reduce (fn [a b] (concat a [v b])) [(first l)] (rest l)))", "problem": 40, "user": "4f017593535dcb61093f6a36"}, {"code": "(fn inp [sep lst] (if (= (count lst) 1)\n                      lst\n                      (concat [(first lst) sep]\n                              (inp sep (rest lst)))))", "problem": 40, "user": "4f039f14535dcb61093f6b3e"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4f03857e535dcb61093f6b0d"}, {"code": "(fn [x y]\r\n  (rest (mapcat #(list x %) y)))", "problem": 40, "user": "4ef0f1a1535dced4c769f212"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4f039a8b535dcb61093f6b36"}, {"code": "(fn my-interposey\n  [val x]\n  (drop 1 (mapcat #(list val %) x)))", "problem": 40, "user": "4f047c07535dcb61093f6bcd"}, {"code": "#(rest (mapcat list (repeat %) %2))", "problem": 40, "user": "4f038bcd535dcb61093f6b1d"}, {"code": "(fn [d s] (cons (first s) (mapcat #(list d %) (rest s))))", "problem": 40, "user": "4f043ed1535dcb61093f6bb4"}, {"code": "(fn [x l] (butlast (mapcat #(list % x) l)))", "problem": 40, "user": "4ec2f1d9535dcc7ae8597d4d"}, {"code": "(fn [sep coll]\n  (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "4e6a73d0535d8ccf87e9fee7"}, {"code": "(fn [v X]\r\n  (loop [n 0 res []]\r\n\t\t(if  (< n (- (count X) 1))\r\n\t\t\t(recur (inc n) (conj res (nth X n) v))\r\n\t\t\t(conj res (last X))\r\n\t\t)\r\n\t)\r\n)", "problem": 40, "user": "4f031883535dcb61093f6a5e"}, {"code": "(fn [sep xs]\n  (rest (mapcat #(list sep %) xs)))", "problem": 40, "user": "4f0381db535dcb61093f6b02"}, {"code": "(fn [x y] \n (butlast(interleave y (repeat (count y) x)))\n)", "problem": 40, "user": "4f00f997535dcb61093f6a34"}, {"code": "(fn [sp l]\n  (reduce #(conj %1 sp %2) [(first l)] (next l)))", "problem": 40, "user": "4f04f847535dcb61093f6beb"}, {"code": "(fn [iv [n1 & lst]]\n  (loop [[fst & rst] lst\n         accum-lst [n1]]\n           (if (nil? fst)\n              accum-lst\n              (recur rst (conj accum-lst iv fst)))))", "problem": 40, "user": "4ee271e2535d10e5ff6f5369"}, {"code": "(fn [val coll]\n  (reduce #(if (empty? %1) [%2] (conj %1 val %2)) [] coll))", "problem": 40, "user": "4ec5a5f9535d6d7199dd36ad"}, {"code": "(fn f [x y]\n  (if (> 2 (count y))\n    y\n    (cons (first y)\n      (cons x (f x (rest y))))))", "problem": 40, "user": "4f062d4a535dcb61093f6c08"}, {"code": "(fn [v s]\n  (loop [s s i []]\n    (if (= 1 (count s))\n      (conj i (first s))\n      (recur (rest s) (conj i (first s) v)))))", "problem": 40, "user": "4f03ebf7535dcb61093f6b7f"}, {"code": "(fn my-interpose [sep, seq]\n  (if (< (count seq) 2)\n    seq\n    (cons (first seq)\n      (cons sep\n        (my-interpose sep (rest seq))))))", "problem": 40, "user": "4f03d4dc535dcb61093f6b6e"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4e6a6be7535d8ccf87e9fee1"}, {"code": "(fn [v xs]\n  ((fn _build [xs out]\n    (if (= 1 (count xs))\n      (reverse (conj out (first xs)))\n      (_build (rest xs)\n              (conj out (first xs) v))))\n    xs ()))", "problem": 40, "user": "4f047902535dcb61093f6bcc"}, {"code": "#(rest (mapcat vector (repeat %1) %2))", "problem": 40, "user": "4f0664bd535dcb61093f6c0f"}, {"code": "(fn [x coll]\r\n  (drop-last (apply concat (map #(seq [% x]) coll))))", "problem": 40, "user": "4f0348b4535dcb61093f6a84"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "4ed3c783535d44c135fd68f6"}, {"code": "#(butlast (mapcat list %2 (repeat (count %2) %1)))", "problem": 40, "user": "4f04b66b535dcb61093f6bdd"}, {"code": "(fn my-interpose [sep l]\r\n    (loop [l l f []]\r\n      (if (empty? (rest l))\r\n        (conj f (first l))\r\n        (recur (rest l) (conj (conj f (first l)) sep)))))", "problem": 40, "user": "4f039524535dcb61093f6b2c"}, {"code": "(fn [s x] (drop-last (mapcat (fn [a b] (list a b)) \nx (repeat (count x) s))))", "problem": 40, "user": "4f07056c535dcb61093f6c1d"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4f083048535dcb61093f6c33"}, {"code": "(fn my-interpose [v coll]\n  (loop [xs (rest coll) r [(first coll)]]\n    (if (empty? xs) r\n      (recur (rest xs) (conj r v (first xs))))))", "problem": 40, "user": "4f0660ee535dcb61093f6c0d"}, {"code": "(fn [i s1]\n  (loop [s1 s1\n         s []]\n    (if (not (seq s1))\n      (drop-last s)\n      (recur (rest s1) (conj s (first s1) i)))))", "problem": 40, "user": "4dc1e1e4535d020aff1edf90"}, {"code": "(fn [a b] (butlast (mapcat (fn [y z] [y z]) b (repeat a))))", "problem": 40, "user": "4f036fad535dcb61093f6ac7"}, {"code": "(fn [x s]\n  (loop [s_ s ret '()]\n    (if s_\n      (let [n (next s_)]\n        (if n\n          (recur n (conj ret (first s_) x))\n          (recur n (conj ret (first s_)))))\n      (into '() ret))))", "problem": 40, "user": "4f050dec535dcb61093f6bef"}, {"code": "#(conj (mapcat list (repeat %) (rest %2)) (first %2))", "problem": 40, "user": "4f0891a2535dcb61093f6c3b"}, {"code": "(fn [x xs] (rest (mapcat #(list x %) xs)))", "problem": 40, "user": "4f06dcad535dcb61093f6c16"}, {"code": "(fn [in-val in-seq]\n  (loop [local-seq in-seq out-seq []]\n    (if (<= (count local-seq) 1) (conj out-seq (first local-seq))\n      (recur (rest local-seq) (conj out-seq (first local-seq) in-val)))))", "problem": 40, "user": "4ef4ab95535dced4c769f23b"}, {"code": "(fn [d s] (rest (mapcat #(list d %) s)))", "problem": 40, "user": "4f08b15b535dcb61093f6c40"}, {"code": "#(butlast (mapcat list %2 (replicate (count %2) %1)))", "problem": 40, "user": "4f039bbe535dcb61093f6b39"}, {"code": "#(drop-last (interleave %2 (repeat %)))", "problem": 40, "user": "4f038499535dcb61093f6b09"}, {"code": "(fn [x ys] (vec (rest (mapcat #(vector x %) ys))))", "problem": 40, "user": "4ef0b523535dced4c769f20e"}, {"code": "(fn [v s] (drop-last (mapcat #(list % v) s)))", "problem": 40, "user": "4f0a4e7e535d0136e6c222f4"}, {"code": "(fn [v coll]\n  (when-let [s (seq coll)]\n    (conj \n      (mapcat #(vector v %1) (rest coll))\n      (first coll)\n    )\n  )\n)", "problem": 40, "user": "4f03154a535dcb61093f6a58"}, {"code": "#(drop-last (mapcat (fn [x] (conj (vec x) %)) (partition 1 %2)))", "problem": 40, "user": "4f047542535dcb61093f6bc7"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "4f045946535dcb61093f6bba"}, {"code": "(fn my-interpose [x coll]\n  (loop [c coll result []]\n    (if (= 1 (count c))\n      (concat result (vector (last c)))\n      (recur (rest c) (concat result (vector (first c)) (vector x))))))", "problem": 40, "user": "4e95a440535dbda64a6f6b37"}, {"code": "#(drop-last (interleave %2 (cycle [%1])))", "problem": 40, "user": "4ef89fb0535dced4c769f260"}, {"code": "(fn [a b] (butlast (flatten (map #(list % a) b))))", "problem": 40, "user": "4f070ce6535dcb61093f6c1e"}, {"code": "(fn [value coll]\n  (drop 1\n    (mapcat #(list value %1) coll)))", "problem": 40, "user": "4f0b2028535d0136e6c222ff"}, {"code": "(fn une [sep l]\n(conj (reduce (fn [acc x] (conj (conj acc x) sep)) [] (butlast l)) (last l)))", "problem": 40, "user": "4f04a06d535dcb61093f6bd9"}, {"code": "(fn [inel inlist]\n  (letfn [(inter[thing x]\n  (if (empty? x)\n   '()\n   (cons (first x) (cons thing (inter thing (rest x))))))]\n   (butlast (inter inel inlist))))", "problem": 40, "user": "4f0365fc535dcb61093f6aa4"}, {"code": "#(rest (flatten (for [i %2] [% i])))", "problem": 40, "user": "4ee67364535d93acb0a6685f"}, {"code": "(fn [x y]\n  (butlast\n    (interleave y\n      (repeat (count y) x))))", "problem": 40, "user": "4ee259a1535d10e5ff6f5366"}, {"code": "(fn my-interpose [spacer coll]\n  (->> coll\n    (mapcat (fn [x] [x spacer]))\n    (butlast)))", "problem": 40, "user": "4f07bc41535dcb61093f6c2c"}, {"code": "(fn ip [n coll] (drop 1 (mapcat #(cons n (list %)) coll)))", "problem": 40, "user": "4f037bb5535dcb61093f6aec"}, {"code": "#(rest (mapcat list (repeat %1) %2))", "problem": 40, "user": "4f089f1a535dcb61093f6c3c"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4eeaf88f535d93acb0a668a3"}, {"code": "(fn [sep s]\n  (reduce (fn [out-seq item] (conj (conj (vec out-seq) sep ) item))\n    [(s 0)] (drop 1 s)))", "problem": 40, "user": "4f0bc223535d0136e6c22307"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "4eae2f9e535d7eef30807324"}, {"code": "(fn [c col] \n  (apply vector \n    (drop-last \n      (mapcat (fn [a] (list a c)) col))))", "problem": 40, "user": "4f03ac2d535dcb61093f6b4a"}, {"code": "(fn pose [sep s]\n  (loop [s s acc []]\n    (if (seq s)\n      (recur (rest s) (conj acc (first s) sep))\n      (pop acc))))", "problem": 40, "user": "4f0ef874535d0136e6c22328"}, {"code": "#(cons (first %2) \n       (interleave (repeat %) (rest %2)))", "problem": 40, "user": "4f067029535dcb61093f6c12"}, {"code": "(fn [x coll]\n  (drop-last (mapcat #(vector % x) coll)))", "problem": 40, "user": "4ec1b80c535dfed6da9c6db6"}, {"code": "(fn myInterpose\n    ([x y z]\n        (if (empty? y)\n            z\n        (if (empty? (rest y))\n            (conj z (first y))\n        (myInterpose x (rest y) (conj (conj z (first y)) x)))))\n    ([x y] (myInterpose x y [])))", "problem": 40, "user": "4f03b3fb535dcb61093f6b52"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4f0446f9535dcb61093f6bb8"}, {"code": "#(concat (mapcat (fn [x] (list x %)) (drop-last 1 %2)) (list (last %2)))", "problem": 40, "user": "4f0f174c535d0136e6c22330"}, {"code": "(fn [x coll] (rest (interleave (repeat x) coll)))", "problem": 40, "user": "4ebcb8ff535dfed6da9c6d8a"}, {"code": "#(loop [x %2 value %1 result[]]\n     (if (nil? (first x))\n\t       result\n\t       (if (> (count x) 1)\n\t\t   (recur (rest x) value (conj (conj result (first x)) value))\n\t\t   (recur (rest x) value (conj result (first x))))))", "problem": 40, "user": "4f066916535dcb61093f6c10"}, {"code": "#(drop 1 (interleave (repeat %) %2))", "problem": 40, "user": "4f10175e535d64f603146411"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4f0e995e535d0136e6c22326"}, {"code": "(fn [x s]\n  (butlast (interleave s (repeat (count s) x)))\n)", "problem": 40, "user": "4f0df199535d0136e6c2231e"}, {"code": "#(rest (mapcat (partial list %) %2))", "problem": 40, "user": "4f1052b9535d64f603146418"}, {"code": "(fn [separator seq]\n  (rest (interleave (repeat separator)\n                    seq)))", "problem": 40, "user": "4eecc9ad535d93acb0a668b4"}, {"code": "(fn fill [sep seq]\n  (drop-last\n    (reduce (fn [acc e] (conj (conj acc e) sep)) [] seq)))", "problem": 40, "user": "4f13047d535d64f60314642c"}, {"code": "(fn interpose2 [sep coll]  \r\n  (cons (first coll) (interleave (take (dec  (count coll)) (iterate identity sep)) (rest coll))) \r\n    )", "problem": 40, "user": "4ee7d113535d93acb0a6686e"}, {"code": "(fn [e c] \n  (drop 1 (mapcat #(list e %) c)))", "problem": 40, "user": "4ede361a535d10e5ff6f5332"}, {"code": "(fn intpos [x y] (if (seq (rest y)) \n                      (concat (list (first y) x) \n                      (intpos x (rest y))) (list (first y))))", "problem": 40, "user": "4f048f67535dcb61093f6bd3"}, {"code": "(fn [ip l1]\n  (loop [[e & l] l1 \n    res []]\n    (if (nil? (seq l))\n      (conj res e)\n      (recur l (conj res e ip)))))", "problem": 40, "user": "4f141dee535d64f603146434"}, {"code": "(fn intrps [value coll]\n  (if (empty? coll) '() \n    (if (= 1 (count coll)) \n      (list (first coll))\n      (concat (list (first coll) value) \n        (intrps value (rest coll))))))", "problem": 40, "user": "4f036d6e535dcb61093f6ac0"}, {"code": "(fn [sep coll]\n  (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "4f1473eb535d64f603146439"}, {"code": "(fn [sep coll]\r\n    (drop-last (apply concat (map vector coll (repeat sep)))))", "problem": 40, "user": "4f149e0f535d64f60314643d"}, {"code": "(fn interject [n x]\n (rest  (interleave (repeat n) x )))", "problem": 40, "user": "4f03bf5e535dcb61093f6b5d"}, {"code": "(fn [sep coll]\n    (loop [r coll, n []]\n        (if (empty? r)\n            (drop-last n)\n            (recur (rest r) (conj n (first r) sep)))))", "problem": 40, "user": "4f128865535d64f603146428"}, {"code": "(fn  \n  [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "4f14fbec535d64f603146440"}, {"code": "(fn [i s] (butlast (flatten (map #(cons % [i]) s))))", "problem": 40, "user": "4f12ab23535d64f603146429"}, {"code": "#(loop [res [(first %2)], xs (rest %2)]\n  (if (empty? xs)\n    res\n    (recur (conj res % (first xs)) (rest xs))))", "problem": 40, "user": "4f0f9df7535d0136e6c22342"}, {"code": "(fn [a b] (let [c (repeat (count b) a)] (butlast (mapcat list b c))))", "problem": 40, "user": "4f0e4ebd535d0136e6c22322"}, {"code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "4dadba4dc9a9d6ed3899dc57"}, {"code": "(fn [a xs] \n  (vec (butlast (mapcat #(vector % a) xs))))", "problem": 40, "user": "4efccd24535de96065cf5080"}, {"code": "(fn [c l] (butlast (mapcat #(list % c) l)))", "problem": 40, "user": "4f0333f6535dcb61093f6a77"}, {"code": "(fn [e l] (drop-last (reduce (fn [a b] (conj a b e)) [] l)))", "problem": 40, "user": "4f1595da535d64f603146444"}, {"code": "#(rest (reduce (fn [x y] (conj x % y)) [] %2))", "problem": 40, "user": "4f0c84ce535d0136e6c2230e"}, {"code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "4f11b078535d64f603146422"}, {"code": "(fn [sep xs] (drop-last (flatten (map #(list % sep) xs))))", "problem": 40, "user": "4e6b6294535d8ccf87e9ff11"}, {"code": "#( next ( mapcat list ( repeat %1 )  %2 ))", "problem": 40, "user": "4f030775535dcb61093f6a43"}, {"code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "4f159ea6535d64f603146445"}, {"code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "4e570b60535d8a8b8723a286"}, {"code": "(fn [a b]\n  ((fn mySep [sep data result]\n    (if (empty? data)\n      (butlast result)\n      (mySep\n        sep\n        (rest data)\n        (conj result (first data) sep)\n      )\n    )\n  ) a b [])\n)", "problem": 40, "user": "4f16d6ed535d64f60314644f"}, {"code": "(fn [i l]\n  (let [merge (fn [l1 l2]\n                (loop [acc (reverse l1)\n                       todo l]\n                  (if (empty? todo)\n                    (reverse acc)\n                    (recur (conj acc (first todo)) (rest todo)))))]\n    (-> (flatten (map #(list % i) l)) reverse rest reverse)))", "problem": 40, "user": "4f08a8a2535dcb61093f6c3d"}, {"code": "(fn my-interpose [v s]\n  (drop-last (mapcat #(list % v) s)))", "problem": 40, "user": "4f0f40d3535d0136e6c2233b"}, {"code": "(fn [x s]\n  (reduce #(conj %1 x %2) [(first s)] (rest s)))", "problem": 40, "user": "4f1b0ab3535d64f603146474"}, {"code": "(fn [sep xs]\n  (drop-last (mapcat list xs (repeat sep))))", "problem": 40, "user": "4f1b92d1535d64f60314647b"}, {"code": "(fn interpose-a-seq [v coll]\r\n  (let [n (count coll)]\r\n   (reverse (rest (reverse (interleave coll (take n (repeat v))))))))", "problem": 40, "user": "4ec3b393535dcc7ae8597d59"}, {"code": "#(rest (mapcat list (repeat %1) %2))", "problem": 40, "user": "4f16ef8a535d64f603146451"}, {"code": "(fn inter [c s]\n    (if (empty? (rest s)) s\n        (conj (inter c (rest s)) c (first s)))\n    )", "problem": 40, "user": "4f16213f535d64f603146449"}, {"code": "(fn poser [sep items]\n  (let [f (first items) r (rest items)]\n    (cons f (when (not-empty r) (cons sep (poser sep r))))))", "problem": 40, "user": "4f0d093b535d0136e6c22313"}, {"code": "#(drop-last (interleave %2 (repeat (count %2) %1)))", "problem": 40, "user": "4f0c4518535d0136e6c2230b"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "4e7d1c22535db169f9c796c5"}, {"code": "(fn i[x [y & ys]] \n  (if ys \n    (conj (i x ys) x y) \n    (list y)))", "problem": 40, "user": "4f1fd734535d64f6031464a5"}, {"code": "#(loop [result [] seq1 %2]\n               (if (empty? seq1)\n                 result\n               (recur (if (empty? result) (vector (first seq1)) (conj (conj result %1) (first seq1)))   (rest seq1))\n             )\n           )", "problem": 40, "user": "4ea31da2535d7eef308072c1"}, {"code": "(fn [x coll]\n  (drop 1 (mapcat (fn [y] [x y]) coll)))", "problem": 40, "user": "4f1c2a3a535d64f603146480"}, {"code": "(fn [x y] (drop-last (mapcat #(list % x) y)))", "problem": 40, "user": "4f032f30535dcb61093f6a73"}, {"code": "(fn [v coll]\n  (loop [result [(first coll)] remaining (rest coll)]\n    (if (empty? remaining)\n      result\n      (recur (conj result v (first remaining))\n             (rest remaining)))))", "problem": 40, "user": "4e8dc25f535d65386fec213a"}, {"code": "(fn [sep cols] (butlast (interleave cols (repeat sep))))", "problem": 40, "user": "4f246938e4b0d66497709fec"}, {"code": "#(cons (first %2) (interleave (repeat %1) (rest %2)))", "problem": 40, "user": "4f215350e4b0d66497709fd0"}, {"code": "(fn [a lst] \n  (rest(flatten (map (fn [x] \n          (conj () x a)) lst))))", "problem": 40, "user": "4f00e9c7535dcb61093f6a33"}, {"code": "#(->> %1 repeat (interleave %2) butlast)", "problem": 40, "user": "4f1c9652535d64f603146483"}, {"code": "(fn [d c]\n  (loop [res []\n         s c]\n    (cond (= (count s) 1) (conj res (first s))\n     :else (recur (conj res (first s) d) (rest s)))))", "problem": 40, "user": "4f230dfbe4b0d66497709fe0"}, {"code": "(fn [sep xs] (drop-last 1 (mapcat #(list % sep) xs)))", "problem": 40, "user": "4eb02674535d7eef30807338"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "4f251302e4b0d66497709ff0"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4f1abbfb535d64f60314646e"}, {"code": "(fn [n coll] (butlast (mapcat list coll (repeat (count coll)  n) )) )", "problem": 40, "user": "4f1684c7535d64f60314644b"}, {"code": "(fn func [x y]\n  (loop [xs (repeat (count y) x)\n         ys y\n         out []] \n    (if (or (empty? xs) (empty? ys))\n      (drop-last out)\n      (let [[x & xs] xs\n            [y & ys] ys]\n        (recur xs ys (conj out y x)) \n        )   \n      )   \n    )   \n  )", "problem": 40, "user": "4ee88f29535d93acb0a66882"}, {"code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "4f27dd9ce4b0d6649770a00e"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4f26c487e4b0d6649770a006"}, {"code": "(fn [x s] (loop [r [(first s)] s (rest s)] (if (empty? s) r (recur (conj r x (first s)) (rest s)))))", "problem": 40, "user": "4f0cc259535d0136e6c22310"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4e4ea0f6535dc968683fc4e6"}, {"code": "(fn foo [sep, l] \n  (rest (mapcat #(list sep %) l)))", "problem": 40, "user": "4f294c48e4b0d6649770a023"}, {"code": "(fn [d x] \n  (loop [d d r (rest x) acc [(first x)]]\n    (if (empty? r)\n     acc\n     (recur d (rest r) (conj acc d (first r))))))", "problem": 40, "user": "4f26d6d9e4b0d6649770a007"}, {"code": ";(fn [x y]\n;  (drop-last (interleave y (repeat (count y) x))))\n\n(fn [x y]\n  (butlast (mapcat #(list % x) y)))", "problem": 40, "user": "4f07c8c3535dcb61093f6c2d"}, {"code": "(fn [sep l] \n  (reduce \n    (fn [prelist elem]  (concat prelist (list sep elem)))\n    (list (first l))\n    (rest l)\n  )\n)", "problem": 40, "user": "4f2a6169e4b0d6649770a03d"}, {"code": "(fn [a l] (butlast (mapcat list l (repeat a) )))", "problem": 40, "user": "4f280840e4b0d6649770a010"}, {"code": "(fn [sep mylist]\n    (loop [l (rest mylist), ret (conj [] (first mylist))]\n        (if (= '() l) \n            ret\n            (recur (rest l) (conj ret sep (first l)) ) )))", "problem": 40, "user": "4f2965ffe4b0d6649770a029"}, {"code": "(fn [elem, sq] (apply vector (drop-last (flatten (map (fn [it] [it elem]) sq)))))", "problem": 40, "user": "4f21838fe4b0d66497709fd2"}, {"code": "(fn zip[x y] (let [s (seq y)] (if (seq? (next s)) (cons (first s) (cons x (zip x (rest s)))) s)))", "problem": 40, "user": "4f2b2c13e4b0d6649770a048"}, {"code": "#(rest (mapcat (fn [x] (list % x)) %2))", "problem": 40, "user": "4e8ad247535d65386fec2111"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "4f29cdc8e4b0d6649770a033"}, {"code": "(fn [i a] (butlast (mapcat #(vector %1 %2) a (repeat i))))", "problem": 40, "user": "4f2a35ace4b0d6649770a03a"}, {"code": "(fn [sep coll]\n  (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "4f1d1299535d64f603146487"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4f2c593ee4b0d6649770a053"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4f1d1d95535d64f603146488"}, {"code": "#(cons (first %2) (mapcat (partial list %) (rest %2)))", "problem": 40, "user": "4e48b61d535dc968683fc4be"}, {"code": "(fn [sep coll] (butlast (mapcat #(list %1 sep) coll)  ))", "problem": 40, "user": "4eb41884535d7eef3080735d"}, {"code": "(fn [n c] (rest (mapcat #(list n %) c)))", "problem": 40, "user": "4f0f01c0535d0136e6c22329"}, {"code": "(fn [x c] (butlast (interleave c (repeat (count c) x))))", "problem": 40, "user": "4f18677d535d64f603146459"}, {"code": "(fn [sep col] (butlast (mapcat vector col (repeat sep))))", "problem": 40, "user": "4f2fa32ce4b0d6649770a070"}, {"code": "(fn [s xs]\n   \n   (loop [as xs\n          res []]\n     (cond (empty? as) res\n           (empty? (rest as)) (conj res (first as))\n           true (recur (rest as) (conj res (first as) s))))\n\n   )", "problem": 40, "user": "4f2ef48be4b0d6649770a06c"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "4e1248b1535d04ed9115e7cf"}, {"code": "(fn [v s] (butlast (reduce into [] (map vector s (repeat v)))))", "problem": 40, "user": "4dcd2065535d5973398f929a"}, {"code": "#(next (mapcat list (repeat %) %2))", "problem": 40, "user": "4e6a5a32535d8ccf87e9fed0"}, {"code": "(fn [sep lst]\n  (loop [todo lst\n         acc []]\n    (let [[x & xs] todo\n          new_acc (conj acc x)]\n      (if (seq xs)\n        (recur xs (conj new_acc sep))\n        new_acc))))", "problem": 40, "user": "4f28c979e4b0d6649770a01a"}, {"code": "(fn [x l]\n  (loop [lst l\n         ret []]\n    (cond\n     (= (count lst) 1) (conj ret (first lst))\n     :else (recur (rest lst) (conj ret (first lst) x))\n     )))", "problem": 40, "user": "4f192b29535d64f603146464"}, {"code": "(fn my-pose [x y]\n  (butlast (apply concat (map #(seq (conj '() x %)) y))))", "problem": 40, "user": "4f04d312535dcb61093f6be7"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4f2de7e9e4b0d6649770a061"}, {"code": "(fn [s [h & t]] (cons h (mapcat #(list s %) t)))", "problem": 40, "user": "4ee1f2ba535d10e5ff6f535f"}, {"code": "(fn [new-item s]\n  (reduce\n   (fn [a b]\n     (let [result\n           (if (> (count a) 0) (conj a new-item) a)]\n       (conj result b)))\n   [] s))", "problem": 40, "user": "4f31519ae4b0d6649770a086"}, {"code": "(fn [s sq](vec (drop-last (interleave sq  (take (count sq) (cycle (vector s)))))))", "problem": 40, "user": "4f2046b7535d64f6031464ab"}, {"code": "(fn [x l] (rest (mapcat #(list %1 %2) (take (count l) (iterate identity x)) l)))", "problem": 40, "user": "4f2f6678e4b0d6649770a06e"}, {"code": "(fn [o c] (drop 1 (interleave (repeat o) c)))", "problem": 40, "user": "4f036d18535dcb61093f6abe"}, {"code": "(fn ipose [x s]\n  (if (or (empty? s)\n          (empty? (rest s)))\n    s\n    (list* (first s) x (ipose x (rest s)))))", "problem": 40, "user": "4f2b0951e4b0d6649770a045"}, {"code": "(fn this\n  ([ins xs] (this ins xs []))\n  ([ins [hd & tl :as xs] acc]\n    (if (empty? xs)\n      acc\n      (if (empty? tl)\n        (conj acc hd)\n        (recur ins tl (into acc [hd ins]))))))", "problem": 40, "user": "4f2e0369e4b0d6649770a064"}, {"code": "#(drop-last (interleave %2 (repeat %)))", "problem": 40, "user": "4dc1bd76535d020aff1edf8d"}, {"code": "#(drop-last (mapcat (fn [x] [x %1]) %2))", "problem": 40, "user": "4f32a7f1e4b0d6649770a095"}, {"code": "#(rest (interleave (repeat %) %2 ))", "problem": 40, "user": "4f341320e4b0e243712b1eb4"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4ea84250535d7eef308072f5"}, {"code": "(fn [x y] (drop 1 (interleave (repeat x) y)))", "problem": 40, "user": "4eeb8f68535d93acb0a668a9"}, {"code": "(fn [fill list] \n  (rest (mapcat #(conj [fill] %) list)))", "problem": 40, "user": "4eb9353f535dfed6da9c6d4e"}, {"code": "(fn [x y] (butlast (vec (mapcat #(list % x) y))))", "problem": 40, "user": "4f307b02e4b0d6649770a079"}, {"code": "(fn [x y] (drop-last (interleave y (iterate (fn [z] z) x))))", "problem": 40, "user": "4f34eb87e4b0e243712b1eba"}, {"code": "(fn [x coll] \n  (drop-last (mapcat #(vector % x) coll)))", "problem": 40, "user": "4f2582bae4b0d66497709ff6"}, {"code": "(fn [x y] (rest (flatten (map (fn [a] (list x a)) y))))", "problem": 40, "user": "4f343e60e4b0e243712b1eb5"}, {"code": "#(rest (for [x %2 y [% x]] y))", "problem": 40, "user": "4ef48422535dced4c769f236"}, {"code": "(fn b [a lis]\n  (letfn [\n        (q [a lis]\n  (if (> (count lis) 0)\n  (cons [(first lis)] (cons [a] (q a (rest lis))))\n    []\n    ))\n    ]\n(butlast (flatten (q a lis)))\n  )\n  )", "problem": 40, "user": "4f2004a1535d64f6031464a7"}, {"code": "(fn [a s]\r\n  (reverse (reduce (fn [xs x]\r\n                     (cons x (cons a xs))) (list (first s)) (next s))))", "problem": 40, "user": "4f359c7ee4b0e243712b1ec4"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4f35e662e4b0e243712b1ec6"}, {"code": "#(drop-last (mapcat vector %2 (repeat %)))", "problem": 40, "user": "4f312c35e4b0d6649770a084"}, {"code": "(fn [val lst]\n  (rest (interleave (repeat (count lst) val) lst)))", "problem": 40, "user": "4f06f953535dcb61093f6c1c"}, {"code": "#(butlast (interleave %2 (repeat (count %2) %)))", "problem": 40, "user": "4f2c2ccbe4b0d6649770a050"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4f39f902e4b0e243712b1efe"}, {"code": "#(rest (mapcat list (repeat (count %2) %1) %2))", "problem": 40, "user": "4f378631e4b0e243712b1ed3"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "4f3444b7e4b0e243712b1eb6"}, {"code": "#(vec (drop 1 (interleave (repeat %1) %2)))", "problem": 40, "user": "4f1bee08535d64f60314647e"}, {"code": "#(rest (flatten (for [p (vector %) s %2] [p s])))", "problem": 40, "user": "4efd8b67535de96065cf5085"}, {"code": "(fn [val sqnc] (drop-last (interleave sqnc (repeat (count sqnc) val))))", "problem": 40, "user": "4f2aff4de4b0d6649770a044"}, {"code": "#(take (- (* 2 (count %2)) 1) (vec (interleave %2 (cycle [%]))))", "problem": 40, "user": "4f15de56535d64f603146448"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4f3ad7f0e4b0e243712b1f1d"}, {"code": "(fn [x coll]\n  (drop 1 (interleave (repeat x) coll)))", "problem": 40, "user": "4f38d6bbe4b0e243712b1ee2"}, {"code": "(fn [s sq] (drop 1 (apply concat (map #(vector s %) sq))))", "problem": 40, "user": "4f36f5f2e4b0e243712b1ece"}, {"code": "(fn [n s]\n  (drop-last (interleave s (repeat (count s) n))))", "problem": 40, "user": "4f29eb2ae4b0d6649770a037"}, {"code": "(fn [i col] \n  (drop-last \n    (apply concat (map #(vector % i) col))\n  ))", "problem": 40, "user": "4f31ad57e4b0d6649770a089"}, {"code": "#(butlast (mapcat list %2 (repeat %1)))", "problem": 40, "user": "4ddbf54e535d02782fcbe9ff"}, {"code": "; would be shorter if you used mapcat\n(fn [glue [head & tail]] (concat [head] (interleave (repeat glue) tail)))", "problem": 40, "user": "4ebaf790535dfed6da9c6d6e"}, {"code": "(fn [sep, seq] (butlast (interleave seq (repeat (count seq) sep))))", "problem": 40, "user": "4f0f3725535d0136e6c22337"}, {"code": "#(butlast (mapcat list %2 (cycle [%])))", "problem": 40, "user": "4e1b8106535d04ed9115e801"}, {"code": "(fn [v coll]\n  (reduce (fn [accum x]\n    (-> accum\n      (conj v)\n      (conj x)))\n    [(first coll)]\n    (rest coll)))", "problem": 40, "user": "4f107e0e535d64f60314641c"}, {"code": "(fn [sep l]\n  (butlast (mapcat #(vector % sep) l)))", "problem": 40, "user": "4f22e667e4b0d66497709fdb"}, {"code": "(fn foo\n  [el col]\n    (concat\n      (reduce #(concat % (list %2 el)) '() (butlast col))\n      (list (last col))))", "problem": 40, "user": "4f387c2ee4b0e243712b1edd"}, {"code": "(fn this [v s]\n(if (< (count s) 2) s\n(concat [(first s) v] (this v (rest s)))))", "problem": 40, "user": "4f418eaee4b0d7d3c9f3fce9"}, {"code": "(fn qq [x y] (drop-last (interleave y (repeat (count y)  x))))", "problem": 40, "user": "4f4003d9e4b0e243712b1fa5"}, {"code": "#(rest (for [x %2 y [% x]] y))", "problem": 40, "user": "4ef77edb535dced4c769f254"}, {"code": ";; Gebruik gemaakt van repeat's laziness :)\n#(drop-last (mapcat list %2 (repeat %1)))", "problem": 40, "user": "4f17df72535d64f603146458"}, {"code": "(fn [v c] (reduce #(concat %1 [v] [%2]) [(first c)] (rest c)))", "problem": 40, "user": "4f4274f2e4b0d7d3c9f3fd00"}, {"code": "(fn [sep l1] (cons (first l1) (reduce (fn [x y] (into x [sep y])) [] (rest l1))))", "problem": 40, "user": "4f2acb29e4b0d6649770a040"}, {"code": "(fn[x col] (cons (first col) (mapcat #(list x %)  (rest col))))", "problem": 40, "user": "4f3e2fbbe4b0e243712b1f7e"}, {"code": "(fn f [e s]\n    (if (empty? (rest s))\n        s\n        (cons (first s)\n          (cons e \n            (f e (rest s))))))", "problem": 40, "user": "4f404dcee4b0e243712b1fb0"}, {"code": "#(cons (first %2) (mapcat (fn [p q] [p q]) (repeat %1) (rest %2)))", "problem": 40, "user": "4f426a7ae4b0d7d3c9f3fcff"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4e6e2ac4535d5021c1a895ff"}, {"code": "(fn interpose2 [v col]\r\n  (if (= (count col) 1) \r\n    (list (first col))\r\n    (conj (interpose2 v (rest col)) v (first col))))", "problem": 40, "user": "4f0da4e4535d0136e6c22319"}, {"code": "(fn [sep xs]\n  (reduce concat (map-indexed #(if (pos? %1)(list sep %2)(list %2)) xs)))", "problem": 40, "user": "4f065217535dcb61093f6c0c"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4ec49231535dcc7ae8597d63"}, {"code": "#(rest (interleave (repeat (count %2) %1) %2))", "problem": 40, "user": "4eb66737535d7eef3080736b"}, {"code": "(fn [item coll] (butlast (flatten (for [x coll] (list x item)))))", "problem": 40, "user": "4f4544e1e4b0d56e7bb92b7a"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "4f382eb7e4b0e243712b1ed9"}, {"code": "#(letfn [(worker [i s n]\r\n           (if (= (count s) 1)\r\n             (conj n (first s))\r\n             (recur i (rest s) (conj n (first s) i))))]\r\n   (worker %1 %2 []))", "problem": 40, "user": "4f474f43e4b0d56e7bb92bb7"}, {"code": "(fn [e col]\n    (drop-last (mapcat #(list % e) col)))", "problem": 40, "user": "4ec6f4ee535d6d7199dd36dc"}, {"code": "(fn [x y] (butlast(flatten (map (fn [a] (list a x)) y))))", "problem": 40, "user": "4f461e57e4b0d56e7bb92b92"}, {"code": "#(butlast (mapcat list %2 (repeat %1)))", "problem": 40, "user": "4f2baf1ae4b0d6649770a04c"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4f38b7d9e4b0e243712b1ee0"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "4f4319ebe4b0d7d3c9f3fd13"}, {"code": "#(butlast (mapcat list %2 (repeat %1)))", "problem": 40, "user": "4f3c772de4b0e243712b1f4c"}, {"code": "#(drop-last(vec(apply concat (map (fn [x] [x %1]) %2))))", "problem": 40, "user": "4f4a34b2e4b0d56e7bb92c09"}, {"code": "(fn [x coll]\n  (butlast (interleave coll (repeat x))))", "problem": 40, "user": "4f4ba29ae4b03ad3f0c10c7a"}, {"code": "#(drop 1 (interleave (repeat %) %2))", "problem": 40, "user": "4f2f7e87e4b0d6649770a06f"}, {"code": "(fn [x ys] (reduce #(concat %1 [x %2]) [(first ys)] (rest ys)))", "problem": 40, "user": "4f49e869e4b0d56e7bb92c02"}, {"code": "(fn [sep seq]\n  (butlast (flatten (map #(list % sep) seq))))", "problem": 40, "user": "4f4ac35ae4b0d56e7bb92c18"}, {"code": "(fn [n coll] (take (- (* (count coll) 2) 1) (mapcat (fn [e] [e n]) coll)))", "problem": 40, "user": "4f3ec266e4b0e243712b1f8c"}, {"code": "(fn interp\r\n  [e c]\r\n  (butlast (mapcat #(list % e) c)))", "problem": 40, "user": "4f17ab99535d64f603146457"}, {"code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "4f4c8faae4b03ad3f0c10c93"}, {"code": "#(drop 1 (interleave (repeat %) %2))", "problem": 40, "user": "4f3543eee4b0e243712b1ebd"}, {"code": "(fn [ins ls] (reverse (rest (reduce #(conj %1 %2 ins) () ls))))", "problem": 40, "user": "4f03ba9c535dcb61093f6b58"}, {"code": "(fn [i s]\n  (drop 1 (interleave (repeat i) s)))", "problem": 40, "user": "4f282da7e4b0d6649770a013"}, {"code": "#((comp rest flatten map) (partial list %1) %2)", "problem": 40, "user": "4f4f0287e4b03ad3f0c10cd7"}, {"code": "(fn ip [n [x & xs]]\n  (if (seq xs)\n    (lazy-seq\n      (cons x\n        (cons n\n          (ip n xs))))\n    [x]))", "problem": 40, "user": "4f4e91a9e4b03ad3f0c10cca"}, {"code": "#(rest (mapcat (partial list %) %2))", "problem": 40, "user": "4f4fac2ae4b03ad3f0c10ce5"}, {"code": "(fn interposex\n  ([value a-seq] (interposex value a-seq []))\n  ([value a-seq result]\n    (if (empty? a-seq) (butlast result)\n    (interposex value\n               (rest a-seq)\n               (concat result\n                       (vector (first a-seq) value))))))", "problem": 40, "user": "4f4e4ecbe4b03ad3f0c10cbf"}, {"code": "(fn join [delim s]\n  (if (next s)\n    (cons (first s) (cons delim (join delim (rest s))))\n    s))", "problem": 40, "user": "4f3e5e87e4b0e243712b1f83"}, {"code": "#(loop [n %1 l %2 result []]\n  (if (zero? (count l))\n      (pop result)\n      (recur n (rest l) (conj result (first l) n))))", "problem": 40, "user": "4f4bbda0e4b03ad3f0c10c7b"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "4f3e6244e4b0e243712b1f85"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "4f50c414e4b03ad3f0c10d0d"}, {"code": "(fn [val lst]\n    (drop-last\n     (mapcat #(list %1 val) lst)))", "problem": 40, "user": "4f4a8707e4b0d56e7bb92c12"}, {"code": "(fn foo [arb coll]\n  (if (= (count coll) 1)\n    coll\n    (concat \n      (list (first coll) arb) \n      (foo arb (rest coll)))))", "problem": 40, "user": "4f4f08c8e4b03ad3f0c10cd8"}, {"code": "(fn my-interpose\n  [x s]\n  (drop 1 (interleave (repeat x) s)))", "problem": 40, "user": "4db8d37d535d1e037afb219c"}, {"code": "(fn [a b] (rest (mapcat #(list %1 %2) (repeat a) b)))", "problem": 40, "user": "4f4e7c01e4b03ad3f0c10cc9"}, {"code": "(fn [a x]\r\n  (conj\r\n    (vec (flatten\r\n       (map #(list %1 %2) x (take (- (count x) 1) (cycle (list a)))\r\n           )))\r\n    (last x)))", "problem": 40, "user": "4f410b63e4b0e243712b1fc5"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4f0404df535dcb61093f6b91"}, {"code": "(fn myinterpose\n  [x lst]\n  (butlast (interleave lst (repeat x))))", "problem": 40, "user": "4f25c4c4e4b0d66497709ffc"}, {"code": "(fn [v s] (butlast (reverse (reduce (fn [a x] (conj a x v)) () s))))", "problem": 40, "user": "4f40f055e4b0e243712b1fc2"}, {"code": "(fn [e s]\n  (drop-last (mapcat (fn [x] [x e]) s)))", "problem": 40, "user": "4f4c6b21e4b03ad3f0c10c8f"}, {"code": "(fn [value coll]\r\n    (cons (first coll)\r\n          (mapcat #(vector value %) (rest coll))))", "problem": 40, "user": "4f047177535dcb61093f6bc6"}, {"code": "(fn myInter ([ x y ] \n  \t\t(if (> (count y) 0)    \n\t\t\t\t(if (> (count y) 1)    \n\t\t\t\t\t(cons (first y) (cons x (myInter x (rest y))))\n\t\t\t\t\t(list (first y))\n\t\t\t\t)\n\t\t\t\t(list)\n\t\t\t)\n\t\t    )   \n\t)", "problem": 40, "user": "4f3bfce2e4b0e243712b1f38"}, {"code": "#(rest (mapcat list (repeat %) %2))", "problem": 40, "user": "4f554416e4b0a7574ea717f9"}, {"code": "(fn [x s] (rest (interleave (repeat x) s)))", "problem": 40, "user": "4f569218e4b0a7574ea71826"}, {"code": "#(cons (first %2) (interleave (map (constantly %1) (rest %2)) (rest %2)))", "problem": 40, "user": "4f46df00e4b0d56e7bb92bac"}, {"code": "(fn [x s] (reduce\n             #(conj %1 x %2)\n             (conj (empty s) (first s)) (next s)))", "problem": 40, "user": "4f5694cae4b0a7574ea71827"}, {"code": "#(rest (mapcat (partial list %1) %2))", "problem": 40, "user": "4f567cdbe4b0a7574ea71824"}, {"code": "(fn [x s]\n  (rest (mapcat #(list x %) s)))", "problem": 40, "user": "4f3c0734e4b0e243712b1f3c"}, {"code": "(fn [sep s]\n  (drop-last (mapcat #(list % sep) s)))", "problem": 40, "user": "4f45c72be4b0d56e7bb92b8a"}, {"code": "(fn inter [v, x] \n  (if (<= (count x) 1) (list (first x))\n    (concat\n      (list (first x))\n      (list v) \n      (inter v (rest x)) )))", "problem": 40, "user": "4f566178e4b0a7574ea71820"}, {"code": "(fn [sep seq]\n  (letfn [(intrlv [s1 s2]\n            (when-not (empty? s2)\n              (cons (first s1) (cons (first s2)\n                                     (intrlv (rest s1) (rest s2))))))]\n    (drop 1 (intrlv (repeat sep) seq))))", "problem": 40, "user": "4f2893d0e4b0d6649770a019"}, {"code": "(fn [i coll] (rest (mapcat #(list i %) coll)))", "problem": 40, "user": "4f4fbed7e4b03ad3f0c10ce8"}, {"code": "#(rest (flatten (interleave (repeat %) %2)))", "problem": 40, "user": "4e8b1fa2535d65386fec2118"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "4f580a9fe4b0a7574ea71844"}, {"code": "(fn thisfunc [x l]\n  (if (<= (count l) 1)\n    l\n    (conj (thisfunc x (rest l)) x (first l))))", "problem": 40, "user": "4dd9d299535d2dad7130b5dd"}, {"code": "(fn ip [i is] (if (= 1 (count is)) is\n  (concat [(first is) i] (ip i (rest is)))))", "problem": 40, "user": "4f51e8a4e4b03ad3f0c10d2d"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4db2f208535df7e46ed9b6c9"}, {"code": "(fn [sep coll]\r\n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "4f50be5de4b03ad3f0c10d0c"}, {"code": "(fn [v [x & xs]] (reduce #(conj %1 v %2) [x] xs))", "problem": 40, "user": "4f569a3ce4b0a7574ea71828"}, {"code": "(fn [sep coll]\r\n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "4f4feb95e4b03ad3f0c10cf0"}, {"code": "(fn [char string] (butlast (mapcat #(list % char) string)))", "problem": 40, "user": "4f528bcde4b03ad3f0c10d3e"}, {"code": "(fn [sep items]\n  (if\n    (empty? items)\n    items\n    (reduce\n      (fn [target source]\n        (apply conj target [sep source]))\n      [(first items)]\n      (rest items))))", "problem": 40, "user": "4f5c0549e4b0030a34fb2b1a"}, {"code": "(fn [sep coll]\n  (rest (apply concat (map #(list sep %) coll))))", "problem": 40, "user": "4f5cc3b8e4b0030a34fb2b2b"}, {"code": "(fn pinter [x y] (cond\n                    (empty? y) ()\n                    (= (count y) 1) y\n                    :else (conj (pinter x (rest y)) x (first y))))", "problem": 40, "user": "4f524d11e4b03ad3f0c10d34"}, {"code": "(fn zinterpose [intr lst]\n  (butlast (mapcat #(list % intr) lst))\n)", "problem": 40, "user": "4e5fdd68535d8ccf87e9fe4f"}, {"code": "(fn [i,s] (into [] ((comp rest reverse flatten seq zipmap) s (repeat (count s) i))))", "problem": 40, "user": "4f54ecf1e4b0a7574ea717f0"}, {"code": "(fn [v xs]\n  (drop 1 (for [x xs u [v x]] u)))", "problem": 40, "user": "4f5eda39e4b0030a34fb2b56"}, {"code": "(fn my-in-mid[e coll]\n  (if (empty? (rest coll))\n      coll\n      (cons (first coll) (cons e  \n              (my-in-mid e (rest coll))))))", "problem": 40, "user": "4e53bf5e535d8a8b8723a275"}, {"code": "(fn [x coll]\n  (butlast (interleave coll (repeat (count coll) x))))", "problem": 40, "user": "4f504739e4b03ad3f0c10d00"}, {"code": "(fn [sep s]\n  (loop [output []\n         sepnext false\n         remain s]\n     (if (empty? remain) output\n       (if sepnext \n         (recur (concat output [sep]) false remain)\n         (recur (concat output [(first remain)]) true (rest remain))))))", "problem": 40, "user": "4f036fb3535dcb61093f6ac8"}, {"code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "4f604bdee4b0defedf855fa7"}, {"code": "(fn [v l] (drop-last (flatten (reduce conj [] (map vector l (repeat v))))))", "problem": 40, "user": "4f614976e4b0defedf855fbb"}, {"code": "(fn interposer [i s]\n  (butlast \n    (for [value s flip (range 2)]\n      (if (= 1 flip)\n        i\n        value))))", "problem": 40, "user": "4f03fb59535dcb61093f6b89"}, {"code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "4ed60c9c535d10e5ff6f52dd"}, {"code": "(fn [sep coll] (drop 1(mapcat #(list sep %) coll)))", "problem": 40, "user": "4f57a153e4b0a7574ea7183a"}, {"code": "(fn [n xs] (butlast (mapcat #(do [% n]) xs)))", "problem": 40, "user": "4e85cda3535db62dc21a62f0"}, {"code": "#(next (interleave (repeat %) %2))", "problem": 40, "user": "4f6160a7e4b0defedf855fbe"}, {"code": "(fn [sep xs]\n  (reduce (fn [acc x] (conj acc sep x)) [(first xs)] (rest xs)))", "problem": 40, "user": "4e7f5a0b535db966e863cc41"}, {"code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "problem": 40, "user": "4f565bebe4b0a7574ea7181e"}, {"code": "(fn [y x] (butlast (mapcat #(vector % y) x)))", "problem": 40, "user": "4f4ec77ae4b03ad3f0c10cd0"}, {"code": "#(reduce (fn [x y] (concat x [% y])) [(first %2)](rest %2))", "problem": 40, "user": "4f3cc2fbe4b0e243712b1f55"}, {"code": "#(drop-last (mapcat vector %2 (repeat %1)))", "problem": 40, "user": "4f5155a3e4b03ad3f0c10d1b"}, {"code": "(fn ipos [item s]\n  (if (< (count s) 2)\n    s\n    (conj (conj (ipos item (rest s)) item) (first s))))", "problem": 40, "user": "4f611127e4b0defedf855fb4"}, {"code": "(fn i [v seq]\n  (if (= 1 (count seq))\n    seq\n    (concat (list (first seq) v) (i v (rest seq)))))", "problem": 40, "user": "4f559d2ce4b0a7574ea71808"}, {"code": "(fn [token lst]\r\n  (loop [inp lst acc []]\r\n    (if (empty? inp)\r\n      acc\r\n      (recur (rest inp)\r\n             (if (= (count inp) 1)\r\n               (conj acc (first inp))\r\n               (conj acc (first inp) token))))))", "problem": 40, "user": "4f629697e4b0defedf855fd6"}, {"code": "(fn [sep s]\n  (rest (mapcat (partial list sep) s)))", "problem": 40, "user": "4f63777be4b0defedf855fe4"}, {"code": "(fn [c coll] (drop-last (interleave coll (repeat c))))", "problem": 40, "user": "4f65eec7e4b07046d9f4ef48"}, {"code": "#(butlast (apply list (interleave %2 (take 4 (cycle (list %1))))))", "problem": 40, "user": "4f651f66e4b07046d9f4ef3c"}, {"code": "#(rest (mapcat (partial list %) %2))", "problem": 40, "user": "4ed845a8535d10e5ff6f52f8"}, {"code": "(fn [elem coll]\n  (rest (reduce into (map #(vector elem %) coll))))", "problem": 40, "user": "4f043bbd535dcb61093f6bb2"}, {"code": "(fn [x [f & r]]\n  (concat (list f) (mapcat #(list x %) r)))", "problem": 40, "user": "4f62b29ce4b0defedf855fd9"}, {"code": "(fn [item coll]\n  (butlast (mapcat #( list % item) coll)))", "problem": 40, "user": "4eb8ec4a535dfed6da9c6d4b"}, {"code": "(fn [el col]\n  (butlast (apply concat (map #(vector %1 el) col))))", "problem": 40, "user": "4f61be97e4b0defedf855fc5"}, {"code": "(fn [sep seq] (rest (mapcat #(list sep %) seq)))", "problem": 40, "user": "4f58fe71e4b0a7574ea7185f"}, {"code": "#(rest (interleave \n  \n  (take (count %2) (cycle (cons %1 '()))) \n  %2))", "problem": 40, "user": "4df8644f535d04ed9115e778"}, {"code": "#(rest(interleave (repeat  (count %2) %) %2))", "problem": 40, "user": "4f4bd422e4b03ad3f0c10c7e"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4f4e147ae4b03ad3f0c10cb9"}, {"code": "#(butlast (mapcat (fn [x] [x %]) %2))", "problem": 40, "user": "4f6b4237e4b07046d9f4efa9"}, {"code": "#(pop (vec (mapcat list %2 (repeat (count %2) %1))))", "problem": 40, "user": "4f608f0ee4b0defedf855faa"}, {"code": "(fn f [val l] \n  (if (= 1 (count l)) l \n    (cons (first l) (cons val (f val (rest l))))))", "problem": 40, "user": "4eca2cea535d6d7199dd3702"}, {"code": "(fn [s l] \r\n  (drop-last \r\n    (reduce \r\n      #(conj (conj %1 %2) s) [] l)))", "problem": 40, "user": "4ef2da4f535dced4c769f224"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4f1bb9d8535d64f60314647d"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "4f6688d6e4b07046d9f4ef5d"}, {"code": "(fn [e sq] \n  (loop [rem-sq sq so-far []]\n    (if (empty? (rest rem-sq))\n      (concat so-far [(first rem-sq)])\n      (recur (rest rem-sq) \n             (concat so-far [(first rem-sq) e])))))", "problem": 40, "user": "4f4a5ca6e4b0d56e7bb92c0f"}, {"code": "(fn [n collect ]\r\n     (loop [col collect ,a n ,result []   ]\r\n     (if (empty?(rest col))\r\n         (conj result (first col) )\r\n         (recur (rest col)\r\n                a\r\n               (conj (conj result (first col) )\r\n                    a)\r\n         )\r\n     )\r\n   )\r\n     )", "problem": 40, "user": "4f6d9d7ee4b07046d9f4efcd"}, {"code": "#(rest (for [i %2, x [% i]] x))", "problem": 40, "user": "4f6fbb68e4b07046d9f4efeb"}, {"code": "#(loop [result '() x %1 y %2]\n    (if (empty? y)\n      (butlast (reverse result))\n      (recur (conj result (first y) x ) x (rest y))\n    )\n  )", "problem": 40, "user": "4ddc56e1535d02782fcbea04"}, {"code": "(fn my-interpose [v [x & xs]]\n  (if (empty? xs)\n    [x]\n    (concat [x v] (my-interpose v xs))))", "problem": 40, "user": "4f70183ee4b07046d9f4eff3"}, {"code": "(fn [glue coll]\n    (loop [c coll r '() b true]\n    (if (empty? c)\n\t      r\n\t    (if b\n\t\t(recur (rest c)\n\t\t       (concat r \n\t\t\t       (list (first c)))\n\t\t       (not b))\n\t      (recur c \n\t\t     (concat r (list glue))\n\t\t     (not b))))))", "problem": 40, "user": "4f62ef0ce4b0defedf855fdc"}, {"code": "(fn [c s]\n  (reverse (reduce #(cons %2 (cons c %1)) (list (first s)) (rest s))))", "problem": 40, "user": "4f4e978ae4b03ad3f0c10ccb"}, {"code": "(fn [a b] (drop 1 (interleave (repeat a) b)))", "problem": 40, "user": "4f27d30fe4b0d6649770a00d"}, {"code": "(fn [a xs]\n  (butlast (mapcat #(list % a) xs)))", "problem": 40, "user": "4f6845d2e4b07046d9f4ef74"}, {"code": "#(butlast (mapcat list %2 (repeat (count %2) %1)))", "problem": 40, "user": "4f706cc3e4b07046d9f4eff7"}, {"code": "(fn [val seqx]\n    (butlast (mapcat #(conj [] %1 val) seqx)))", "problem": 40, "user": "4dc0f7ff535d020aff1edf82"}, {"code": "(fn [val seqx]\n    (butlast (mapcat #(conj [] %1 val) seqx)))", "problem": 40, "user": "4f617f66e4b0defedf855fc0"}, {"code": "(fn [v coll]\n       (loop [ret [(first coll)]\n              c (rest coll)]\n         (if (empty? c)\n           ret\n           (recur (conj ret v (first c)) (rest c)))))", "problem": 40, "user": "4f463dfde4b0d56e7bb92b99"}, {"code": "(fn [sep coll]\n  (cons (first coll) (reduce #(conj %1 sep %2) [] (rest coll))))", "problem": 40, "user": "4ec6c878535d6d7199dd36d5"}, {"code": "(fn my-interpose [v sq]\r\n  (cons (first sq)\r\n        (reduce (fn [coll x]\r\n                  (concat coll [v x]))\r\n                []\r\n                (rest sq))))", "problem": 40, "user": "4f71db68e4b07046d9f4f015"}, {"code": "(fn [x xs] (reduce #(concat %1 (list x %2)) (list (first xs)) (rest xs)))", "problem": 40, "user": "4f724e56e4b07046d9f4f027"}, {"code": "(fn [x coll]\n  (drop-last (mapcat #(list % x) coll)))", "problem": 40, "user": "4f726dd2e4b07046d9f4f034"}, {"code": "(fn [ele lst] (reduce #(concat %1 (if (> (count %1) 0) [ele %2] [%2])) [] lst))", "problem": 40, "user": "4f68c485e4b07046d9f4ef7c"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4f734e93e4b07046d9f4f043"}, {"code": "#(butlast (mapcat (fn [e] (list e %1)) %2))", "problem": 40, "user": "4f69f34fe4b07046d9f4ef90"}, {"code": "(fn f [a b] (\n  if (= 1 (count b))\n    b\n    (\n      concat\n      [\n        (first b)\n        a\n      ]\n      (f a (rest b))\n    )\n))", "problem": 40, "user": "4f72e09de4b07046d9f4f03b"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4eb298c1535d7eef3080734b"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "4f71347ae4b07046d9f4f009"}, {"code": "(fn ipose [value s]\n  (if (= 1 (count s))\n      s\n      (cons (first s) (cons value (ipose value (rest s))))))", "problem": 40, "user": "4f70afb8e4b07046d9f4effb"}, {"code": "#(drop-last (interleave %2 (repeat %)))", "problem": 40, "user": "4f6a2ff2e4b07046d9f4ef98"}, {"code": "(fn [a b] (reduce #(flatten (concat [%1] [a] [%2])) b))", "problem": 40, "user": "4f713878e4b07046d9f4f00a"}, {"code": "#(drop-last (interleave %2 (take (count %2) (cycle [%]))))", "problem": 40, "user": "4e1fe7f1535d04ed9115e810"}, {"code": "(fn [x c]\n  (drop-last (interleave c (repeat x))))", "problem": 40, "user": "4daea587edd6309eace4d15a"}, {"code": "(fn [n l]\n  (loop [l l acc []]\n    (if (= 1 (count l))\n      (conj acc (first l))\n      (recur (rest l) (conj acc (first l) n)))))", "problem": 40, "user": "4e568873535d8a8b8723a283"}, {"code": "(fn ip [x ys]\n  (if (empty? (rest ys)) \n      ys\n      (lazy-cat [(first ys) x] (ip x (rest ys)))))", "problem": 40, "user": "4f7250cce4b07046d9f4f02a"}, {"code": "(fn interpo [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "4f6543cae4b07046d9f4ef41"}, {"code": "(fn [pos thing]\n  (pop (vec (flatten (map #(list % pos) thing)))))", "problem": 40, "user": "4f74fe77e4b0fbe0118ec552"}, {"code": "(fn [sep coll]\n  (butlast\n   (mapcat (fn [a b] [a b])\n           coll\n           (cycle [sep]))))", "problem": 40, "user": "4e89dbce535d3e98b8023283"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4f7869c2e4b0fbe0118ec589"}, {"code": "(fn [ch coll] (reduce (fn [t v] (into t [ch v])) [(first coll)] (rest coll)))", "problem": 40, "user": "4f7207d3e4b07046d9f4f019"}, {"code": "(fn blub [z x]\r\n  (butlast (mapcat #(conj [%] z) x)))", "problem": 40, "user": "4f71ba6ee4b07046d9f4f012"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "4f725201e4b07046d9f4f02f"}, {"code": "(fn [x y] (rest (mapcat #(list x %1) y) ) )", "problem": 40, "user": "4f725466e4b07046d9f4f030"}, {"code": "(fn [del seq]\n  (pop (reduce #(conj %1 %2 del) [] seq)))", "problem": 40, "user": "4f7a9416e4b06e829148e19b"}, {"code": "(fn [value lis & newlis]\n  (if (empty? lis)\n    (flatten (reverse (next newlis)))\n    (recur\n      value\n      (next lis)\n      (conj newlis (first lis) value))))", "problem": 40, "user": "4f7d065ce4b06e829148e1b9"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "4f7d5328e4b06e829148e1bf"}, {"code": "(fn [n x]\n  (drop-last (mapcat (fn [i]\n  (list i n)) x))\n)", "problem": 40, "user": "4f7b6b90e4b06e829148e1a4"}, {"code": "(fn [c l]\n  (loop [[f & args :as my-l] l\n         r '()]\n    (if (empty? my-l)\n      r\n      (if (empty? args)\n        (concat r (list f))\n        (recur args (concat r (list f c)))))))", "problem": 40, "user": "4f7e29dde4b06e829148e1ca"}, {"code": "(fn ip [a [x & xs]]\n  (if (nil? xs)\n    (list x)\n    (concat (list x a) (ip a xs))))", "problem": 40, "user": "4f7f0827e4b06e829148e1d5"}, {"code": "(fn [x lst]\n  (drop-last (mapcat (fn [y] [y x]) lst)))", "problem": 40, "user": "4f7fc9a1e4b033992c121bee"}, {"code": "(fn [sep v]\n(vec \n  (drop-last \n    (apply concat \n      (for [i v] \n        (list i sep))))))", "problem": 40, "user": "4f4a17ffe4b0d56e7bb92c05"}, {"code": "(fn [s datas]\n  ((fn [data rs]\n    (if (empty? data) (butlast rs)\n      (recur (rest data)\n        (conj (conj rs (first data)) s)))) datas []))", "problem": 40, "user": "4f3242bae4b0d6649770a08f"}, {"code": "(fn inter [sep sq]\n  (pop (vec (interleave sq \n    (take (count sq) (repeat sep))))))", "problem": 40, "user": "4f82e14be4b033992c121c0c"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4f7b6f12e4b06e829148e1a5"}, {"code": "(fn [a xs] (apply concat (for [x xs]\n  (if (= x (last xs)) [x] [x a]))))", "problem": 40, "user": "4f8345c6e4b033992c121c1b"}, {"code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "4f83e712e4b033992c121c25"}, {"code": "#(drop-last (mapcat vector %2 (repeat %1)))", "problem": 40, "user": "4ec5569f535d6d7199dd3695"}, {"code": "(fn [item x] (reverse (loop [xs x result '()] (if (empty? xs) result (recur (rest xs) (if (= (count xs) 1) (cons (first xs) result) (cons item (cons (first xs) result))))))))", "problem": 40, "user": "4f122bfe535d64f603146426"}, {"code": "#(rest (mapcat (fn [x] [% x]) %2))", "problem": 40, "user": "4f83ee95e4b033992c121c26"}, {"code": "(fn [x coll] (rest (interleave (repeat x) coll)))", "problem": 40, "user": "4f85b7b5e4b033992c121c49"}, {"code": "#(conj (vec (interleave \n              (drop-last %2) \n              (take (dec (count %2)) (repeat %))\n             )\n        ) (last %2))", "problem": 40, "user": "4f7c2ac4e4b06e829148e1ad"}, {"code": "(fn f [e l]\n  (reduce #(conj %1 e %2) (subvec l 0 1) (rest l))\n)", "problem": 40, "user": "4f84400de4b033992c121c2e"}, {"code": "(fn [i,l]\n    (rest (interleave (repeat i) l)))", "problem": 40, "user": "4f85ef29e4b033992c121c4d"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "4f8592e6e4b033992c121c47"}, {"code": "(fn [x s]\n  (let [fd (repeat (count s) x)]\n        (drop-last(interleave s fd))))", "problem": 40, "user": "4f7b3d53e4b06e829148e1a0"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4dc78527535d8a4b2fd7428f"}, {"code": "(fn sep [v s]\n  (if (not-empty s)\n    (if (not-empty (rest s))\n      (conj (conj (sep v (rest s)) v) (first s))\n      (list (first s)))))", "problem": 40, "user": "4f82f1b9e4b033992c121c0f"}, {"code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "problem": 40, "user": "4f7d25b4e4b06e829148e1ba"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4f88ae35e4b033992c121c6d"}, {"code": "(fn [x c] (drop-last (mapcat #(vector %1 x) c)))", "problem": 40, "user": "4f83665ee4b033992c121c1c"}, {"code": "(fn [i s] (butlast (interleave s (repeat (count s) i))))", "problem": 40, "user": "4f8b56dae4b02e764a0a517e"}, {"code": "#(butlast (mapcat vector %2 (repeat %1)))", "problem": 40, "user": "4f847bf2e4b033992c121c32"}, {"code": "(fn [x coll]\n  (reduce\n    #(concat %1 [x %2])\n    (list (first coll))\n    (rest coll)))", "problem": 40, "user": "4f7f9665e4b033992c121bea"}, {"code": "#(drop-last (interleave %2 (repeat (count %2) %1)))", "problem": 40, "user": "4f8aa1c1e4b02e764a0a516e"}, {"code": "(fn intpo [a l]\n  (if (empty? (rest l)) l (concat (list (first l) a) (intpo a (rest l)))))", "problem": 40, "user": "4f8b20fce4b02e764a0a5178"}, {"code": "(fn interpol [sep lst]\n  (if (= (count lst) 1)\n    lst\n    (into [(first lst) sep]\n      (interpol sep (rest lst)))))", "problem": 40, "user": "4f42ae16e4b0d7d3c9f3fd09"}, {"code": "(fn inter-pose\n[sep coll]\n(drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "4f29afc7e4b0d6649770a02e"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "4f891abde4b033992c121c77"}, {"code": "(fn [v s] (drop-last (mapcat #(vector % v) s)))", "problem": 40, "user": "4f90dc2ae4b0dcca54ed6c92"}, {"code": "#(butlast (mapcat (fn [i] [i %1]) %2))", "problem": 40, "user": "4f8ea1f7e4b0d4e659cdde69"}, {"code": "(fn [v l]\n  (loop [result (vector (first l))  left (rest l)]\n    (if (empty? left)\n      result\n    (recur\n      (conj result v (first left))\n      (rest left)))))", "problem": 40, "user": "4f90e238e4b0dcca54ed6c94"}, {"code": "(fn [x l] (->> (map #(list % x) l) (reduce concat) (drop-last 1)))", "problem": 40, "user": "4f8c5f4fe4b02e764a0a5198"}, {"code": "(fn inter\n  [sep a]\n    (when (not (empty? a))\n      (cons (first a)\n            (when (not (empty? (rest a)))\n                  (cons sep (inter sep (rest a)))))))", "problem": 40, "user": "4f91a38ae4b0dcca54ed6c9f"}, {"code": "#(butlast (interleave  %2 (repeat %1)))", "problem": 40, "user": "4f92709de4b0dcca54ed6cad"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4f727023e4b07046d9f4f035"}, {"code": "(fn [sep s]\n  (drop-last\n    (interleave s (repeat sep))))", "problem": 40, "user": "4f7ab8c7e4b06e829148e19c"}, {"code": "(fn [s xs] (reduce #(conj % s %2) [(first xs)] (rest xs)))", "problem": 40, "user": "4f6511eee4b07046d9f4ef3a"}, {"code": "(fn[i s]\n       (loop [final [] inter i cur s]\n         (if (= (count cur) 1)\n             (conj final (first cur))\n             (recur (conj final (first cur) inter) inter (rest cur)))))", "problem": 40, "user": "4f9174d0e4b0dcca54ed6c9b"}, {"code": "(fn [x c] (reduce #(conj %1 x %2) [(first c)] (rest c)))", "problem": 40, "user": "4f8ab084e4b02e764a0a5171"}, {"code": "(fn [x s] (cons (first s)\n   (mapcat #(vector x %) (rest s))))", "problem": 40, "user": "4f9120d8e4b0dcca54ed6c96"}, {"code": "(fn [s l]\n  (loop [s s l l r nil]\n    (if (= 1 (count l)) \n      (reverse (conj r (first l)))\n      (recur\n        s\n        (rest l)\n        (conj r (first l) s)))))", "problem": 40, "user": "4f930858e4b0dcca54ed6cb4"}, {"code": "#(butlast (reduce concat (for [x %2] [x %1])))", "problem": 40, "user": "4ee77f15535d93acb0a66868"}, {"code": "(fn [sep xs] (rest (interleave (repeat sep) xs)))", "problem": 40, "user": "4f3fb586e4b0e243712b1f9c"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "4f9597e0e4b0dcca54ed6cd4"}, {"code": "(letfn [(i [x [f & r]]                                                                                                                                                                                                                       \n          (if r                                                                                                                                                                                                                              \n            (cons f (cons x (i x r)))                                                                                                                                                                                                        \n            (list f)))]                                                                                                                                                                                                                      \n  i)", "problem": 40, "user": "4db342d7535df7e46ed9b6cd"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "4f954dbce4b0dcca54ed6ccd"}, {"code": "(fn my-sep [sep coll] (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "4f95900ce4b0dcca54ed6cd3"}, {"code": "(fn [sp col]\n  (butlast (interleave col (repeat (count col) sp))))", "problem": 40, "user": "4f890488e4b033992c121c76"}, {"code": "(fn [sep s]\n  (cons (first s)\n  (mapcat #(list sep %)\n\t\t(rest s))))", "problem": 40, "user": "4dc21233535d020aff1edf92"}, {"code": "(fn interpose2 [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "4f8ac2bde4b02e764a0a5172"}, {"code": "(fn [i l] (drop 1 (interleave (repeat i) l)))", "problem": 40, "user": "4f9754d4e4b0dcca54ed6ce9"}, {"code": "(fn [sep coll] \n  (cons (first coll) \n        (mapcat #(list sep %) (rest coll))))", "problem": 40, "user": "4f969214e4b0dcca54ed6cdd"}, {"code": "(fn blah [del x] (if (empty? (rest x)) x (cons (first x) (cons del (blah del (rest x))))))", "problem": 40, "user": "4f17aa97535d64f603146456"}, {"code": "(fn [val seq] (drop 1 (mapcat #(list val %) seq)))", "problem": 40, "user": "4f98ead0e4b0dcca54ed6cf8"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4f991ec1e4b0dcca54ed6cfb"}, {"code": "(fn intps [x ys]                                                                                                  \n            (reduce (fn [coll val] (if (empty? coll) (conj coll val)                                                     \n                                       (conj coll x val))) [] ys))", "problem": 40, "user": "4f748b54e4b044e54cd9a8fa"}, {"code": "(fn[x y] (butlast (mapcat #(list % x) y)))", "problem": 40, "user": "4f9920a3e4b0dcca54ed6cfc"}, {"code": "#(-> (mapcat list %2 (repeat %1)) drop-last)", "problem": 40, "user": "4f82f9f7e4b033992c121c10"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "4e897fc5535de4250bdfe493"}, {"code": "(fn [j s] (drop-last (mapcat vector s (repeat j))))", "problem": 40, "user": "4f97d8f3e4b0dcca54ed6ced"}, {"code": "(fn [x y]\n  (butlast (reduce into [] (map vector y (repeat x)))))", "problem": 40, "user": "4f9b5a1ce4b0dcca54ed6d16"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4f9d53f3e4b0dcca54ed6d21"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "4f8db862e4b02e764a0a51b2"}, {"code": "(fn [n xs]\n  (mapcat #(if (= % (last xs))\n            (list %)    \n            (list % n)) xs))", "problem": 40, "user": "4f9c7b0fe4b0dcca54ed6d1c"}, {"code": "(fn [s coll]  (drop-last (mapcat list coll (repeat s) )))", "problem": 40, "user": "4e86d3cf535dceadca46984c"}, {"code": "(fn [sep s] (drop-last (interleave s (repeat sep))))", "problem": 40, "user": "4db3393e535df7e46ed9b6cc"}, {"code": "#(next (for [e %2 x [% e]] x))", "problem": 40, "user": "4f9fe2b9e4b0dcca54ed6d40"}, {"code": "(fn [i s]\n  (reduce \n    (fn [s n]\n      (concat s (list i n)))\n    (list (first s))\n    (rest s)))", "problem": 40, "user": "4f951375e4b0dcca54ed6cc8"}, {"code": "(fn [x y](rest (#(interleave (repeat %1) %2) x y)))", "problem": 40, "user": "4f8bbb27e4b02e764a0a5182"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4f9d87fce4b0dcca54ed6d24"}, {"code": "(fn my-interpose\n([x s] (my-interpose x s nil))\n([x s r] (cond (empty? s) (reverse (rest r))\n               :default (recur x (rest s) (cons x (cons (first s) r))))))", "problem": 40, "user": "4f9c4080e4b0dcca54ed6d1a"}, {"code": "#(rest (interleave (repeat %1) %2 ))", "problem": 40, "user": "4f9d8083e4b0dcca54ed6d23"}, {"code": "(partial\n   (fn [acc d s]\n     (cond\n      (and (not (seq acc)) (seq s)) (recur (conj acc (first s)) d (rest s))\n      (not (seq s)) acc\n      true (recur (conj acc d (first s)) d (rest s))))\n   [])", "problem": 40, "user": "4fa1183fe4b0dcca54ed6d57"}, {"code": "(fn my-interpose [item list]\n  (pop\n    (reduce \n      (fn [result, list-item] \n        (-> \n          (conj result list-item) \n          (conj item)))\n      [] \n      list)))", "problem": 40, "user": "4f03396d535dcb61093f6a7b"}, {"code": "(fn [v s] (butlast (reduce #(conj %1 %2 v) [] s)))", "problem": 40, "user": "4f465096e4b0d56e7bb92b9a"}, {"code": "(fn [sep coll]\n  (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "4f969a66e4b0dcca54ed6cde"}, {"code": "(fn my-interpose\n  ([val [x & xrest]]\n     (if (pos? (count xrest))\n       (my-interpose [x val] val xrest)\n       x))\n  ([res val [x & xrest]]\n     (if (pos? (count xrest))\n       (my-interpose `(~@res ~x ~val) val xrest)\n       `(~@res ~x))))", "problem": 40, "user": "4fa27e18e4b0dcca54ed6d68"}, {"code": "(fn [sep coll]\n  (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "4fa2fa5ee4b081705acca186"}, {"code": "#(drop-last 1 (interleave %2 (repeat %1)))", "problem": 40, "user": "4fa39b3ee4b081705acca191"}, {"code": "(fn [x c]\n  (butlast (mapcat identity (for [y c] [y x]))))", "problem": 40, "user": "4f9f7daae4b0dcca54ed6d37"}, {"code": "(fn [x s] (rest (mapcat list (repeat x) s)))", "problem": 40, "user": "4fa4ef2ee4b081705acca1a9"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "4e65f9d4535d8ccf87e9fe73"}, {"code": "(fn [x y] (concat (mapcat #(list % x) (butlast y)) (list (last y))))", "problem": 40, "user": "4fa5406fe4b081705acca1ac"}, {"code": "#(butlast (mapcat list %2 (repeat (count %2) %)))", "problem": 40, "user": "4fa3f91fe4b081705acca196"}, {"code": "(fn [s coll] (rest (#(mapcat vector %1 %2) (repeat (count coll) s) coll)))", "problem": 40, "user": "4fa17b00e4b0dcca54ed6d5f"}, {"code": "(fn [s xs] (rest (mapcat #(list s %) xs)))", "problem": 40, "user": "4f40ccd9e4b0e243712b1fc0"}, {"code": "#(rest (mapcat list (repeat %) %2))", "problem": 40, "user": "4fa5ddfde4b081705acca1b1"}, {"code": "#(rest (flatten (map (partial vector %1) %2)))", "problem": 40, "user": "4fa0a4b1e4b0dcca54ed6d4f"}, {"code": "(fn [v l] (butlast (reduce #(conj % %2 v) [] l)))", "problem": 40, "user": "4fa30027e4b081705acca187"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4fa58500e4b081705acca1ae"}, {"code": "#(if (= 1 (count %2)) %2\n     (loop [todo (next %2) acc [(%2 0)]]\n           (if (empty? todo) acc\n                (recur (next todo)\n                       (conj (conj acc %1)\n                             (first todo))))))", "problem": 40, "user": "4fa6d532e4b081705acca1be"}, {"code": "(fn [x xs] (rest (reduce #(conj % x %2) [] xs)))", "problem": 40, "user": "4f9acea6e4b0dcca54ed6d10"}, {"code": "(fn [separator s]\n  (loop [s s result []]\n    (cond\n      (next s) (recur (next s) (conj result (first s) separator))\n      (seq s) (conj result (first s))\n      :else result)))", "problem": 40, "user": "4fa820fde4b081705acca1ce"}, {"code": "(fn [x xs] (butlast (mapcat #(list % x) xs)))", "problem": 40, "user": "4fa069c3e4b0dcca54ed6d4a"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "4fa96e80e4b081705acca1df"}, {"code": "(fn [w s]\n  (butlast (mapcat vector s (repeat w))))", "problem": 40, "user": "4faa8de0e4b081705acca1f8"}, {"code": "#(rest (mapcat list (repeat %1) %2))", "problem": 40, "user": "4faa9593e4b081705acca1f9"}, {"code": "(fn [x xs] (butlast (mapcat #(vector % x) xs)))", "problem": 40, "user": "4ebbb6bc535dfed6da9c6d71"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "4f4d0a52e4b03ad3f0c10c9d"}, {"code": "(fn [x y] (drop 1 (interleave (repeat x) y)))", "problem": 40, "user": "4fa99ee1e4b081705acca1e4"}, {"code": "#(rest (mapcat (fn [x] [%1 x]) %2))", "problem": 40, "user": "4fabb1dce4b081705acca21a"}, {"code": "(fn [a b] (loop [x a y (vec b) z []] (if (= 1 (count y)) (conj z (first y)) (recur x \n(rest y) (conj (conj z (first y)) x)))))", "problem": 40, "user": "4f9336ece4b0dcca54ed6cb7"}, {"code": "(fn [i s]\n  (rest (interleave (repeat i) s)))", "problem": 40, "user": "4facd2fae4b081705acca22f"}, {"code": "(fn [v xs] (butlast (flatten (map #(concat % [v]) (partition 1 xs)))))", "problem": 40, "user": "4f60ed88e4b0defedf855fb2"}, {"code": "(fn my-interpose [x s]\n  (if (= 1 (count s))\n\t\ts\n\t\t(cons (first s) (cons x (my-interpose x (rest s))))\n\t)\n)", "problem": 40, "user": "4faacc04e4b081705acca201"}, {"code": "(fn [x y] (drop-last (apply concat (map #(cons % [x]) y))))", "problem": 40, "user": "4e8d5911535d65386fec2133"}, {"code": "(fn [e l] \n  (rest (mapcat list (repeat e) l)))", "problem": 40, "user": "4fad77a6e4b081705acca23a"}, {"code": "(fn [v s]\n  (loop [t (rest s) r [(first s)]]\n    (if (empty? t) r\n        (recur (rest t) (conj r v (first t))))))", "problem": 40, "user": "4fae258de4b081705acca246"}, {"code": "(fn [s c] (butlast (mapcat #(vector % s) c)))", "problem": 40, "user": "4facff22e4b081705acca230"}, {"code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "4f9970b3e4b0dcca54ed6cfd"}, {"code": "#(drop-last (mapcat (fn [a] [a %]) %2))", "problem": 40, "user": "4fab31a8e4b081705acca215"}, {"code": "#(rest (mapcat (partial list %) %2))", "problem": 40, "user": "4fad33e8e4b081705acca236"}, {"code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "problem": 40, "user": "4fa67030e4b081705acca1b7"}, {"code": "#(loop [x %2 comp []]\n  (if (= x '())\n    (drop-last comp)\n    (recur (rest x)\n           (conj (conj comp (first x)) %1))))", "problem": 40, "user": "4faec810e4b081705acca24e"}, {"code": "#(butlast (reduce (fn [l a] (conj l a %1)) [] %2))", "problem": 40, "user": "4fad89f0e4b081705acca23b"}, {"code": "(fn [s c] (butlast (mapcat (fn [i] [i s]) c)))", "problem": 40, "user": "4f301d02e4b0d6649770a072"}, {"code": "(comp butlast #(mapcat list %2 (repeat %1)))", "problem": 40, "user": "4fab259ae4b081705acca212"}, {"code": "(fn [x coll] (rest (mapcat vector (repeat x) coll)))", "problem": 40, "user": "4fac1d77e4b081705acca223"}, {"code": "(fn [delim sequ]\n  (->> sequ\n    (mapcat #(list delim %))\n    rest))", "problem": 40, "user": "4f0374a0535dcb61093f6ad9"}, {"code": "(fn  [inter arr]\r\n  (loop [-in inter -arr arr rst []]\r\n    (if (empty? (rest -arr))\r\n      (conj rst (first -arr))\r\n      (recur -in (rest -arr) (conj rst (first -arr) -in)))))", "problem": 40, "user": "4ef2d6c5535dced4c769f222"}, {"code": "(fn [item xs]\n              (loop [xxs xs acc []]\n                (cond (empty? xxs) acc\n                      (= 1 (count xxs)) (conj acc (first xxs))\n                      :else (recur (rest xxs) (conj acc (first xxs) item)))))", "problem": 40, "user": "4fadbc3fe4b081705acca23f"}, {"code": "(fn [sep xs]\n  (rest (mapcat (fn [x] [sep x]) xs)))", "problem": 40, "user": "4e8338d6535db62dc21a62d3"}, {"code": "(fn [sep coll]\n  (let [n (count coll)]\n    (butlast (mapcat list coll (take n (repeat sep))))))", "problem": 40, "user": "4fa982fae4b081705acca1e0"}, {"code": "(fn [a coll]\n  (butlast (reduce concat\n                   (map #(concat () (list %1 %2))\n                        coll(repeat a)))))", "problem": 40, "user": "4f9a7dc0e4b0dcca54ed6d0b"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "4f8386c5e4b033992c121c1d"}, {"code": "#(take (dec (* 2 (count %2))) (interleave %2 (repeat %)))", "problem": 40, "user": "4f9a0064e4b0dcca54ed6d03"}, {"code": "(fn [i xs]\n    (butlast (interleave xs (repeat i)))                                                                                                                                        \n    )", "problem": 40, "user": "4f91f5b1e4b0dcca54ed6ca7"}, {"code": "(fn [x y] (rest (mapcat #(list x %) y)))", "problem": 40, "user": "4f82ed48e4b033992c121c0e"}, {"code": "#(letfn [(ip [l res]\n            (if (empty? l)\n                (reverse (rest res))\n                (ip (rest l) (cons %1 (cons (first l) res)))))]\n    (ip %2 nil))", "problem": 40, "user": "4fb4099be4b081705acca2a9"}, {"code": "(fn [x s] (cons (first s) (mapcat list (repeat x) (rest s))))", "problem": 40, "user": "4fb2101ce4b081705acca284"}, {"code": "#(rest (interleave (repeat (count %2) %1) %2))", "problem": 40, "user": "4f859146e4b033992c121c46"}, {"code": "(fn [elt coll]\r\n  (rest (interleave (repeat elt) coll)))", "problem": 40, "user": "4fb37882e4b081705acca2a0"}, {"code": "(fn [v s] (into [] (butlast (flatten (into [] (zipmap (reverse s) (repeat v)))))))", "problem": 40, "user": "4fb510b5e4b081705acca2b8"}, {"code": "#(next (for [e %2 x [% e]] x))", "problem": 40, "user": "4fb3b865e4b081705acca2a2"}, {"code": "(fn [d xs] (rest (mapcat #(list d %1) xs)))", "problem": 40, "user": "4fa6a491e4b081705acca1bc"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4fb12b35e4b081705acca275"}, {"code": "(fn [spr coll] (apply concat (list (first coll)) (map #(vector spr %) (rest coll))))", "problem": 40, "user": "4f3cd535e4b0e243712b1f56"}, {"code": "(fn my-interpose [sep coll]\n  (rest (mapcat (fn [x] [sep x]) coll)))", "problem": 40, "user": "4f6bab49e4b07046d9f4efb1"}, {"code": "(fn [sep coll] (butlast (interleave coll (repeat (count coll) sep))))", "problem": 40, "user": "4fb3fec7e4b081705acca2a7"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4e83bb61535db62dc21a62dd"}, {"code": "#(drop 1 (interleave (repeat %) %2))", "problem": 40, "user": "4e6a4541535d8ccf87e9feb8"}, {"code": "#(butlast (mapcat list %2 (repeat %1)))", "problem": 40, "user": "4fa11204e4b0dcca54ed6d56"}, {"code": "(fn [sep lst] (butlast (mapcat #(list % sep) lst)))", "problem": 40, "user": "4fba7d1ee4b081705acca2e0"}, {"code": "(fn [e l] (flatten (reduce #(list %1 e %2) l)))", "problem": 40, "user": "4faac363e4b081705acca200"}, {"code": "#(loop [x %1 l %2 acc []]\n  (if (= 1 (count l)) (conj acc (first l))\n    (recur x (rest l) (conj (conj acc (first l)) x))))", "problem": 40, "user": "4fab1bede4b081705acca20f"}, {"code": "(fn interp [insert coll]\n  (butlast (mapcat #(list % insert) coll)))", "problem": 40, "user": "4faafccde4b081705acca209"}, {"code": "(fn [sep s] (rest (mapcat #(list sep %) s)))", "problem": 40, "user": "4f05ea25535dcb61093f6c02"}, {"code": "(fn [x xs] (butlast (reduce #(conj %1 %2 x) [] xs)))", "problem": 40, "user": "4fb65f2fe4b081705acca2c7"}, {"code": "(fn [i lst] (rest (mapcat list (repeat i) lst)))", "problem": 40, "user": "4fb86dc9e4b081705acca2d8"}, {"code": "(fn [sep s]\n  (cons (first s)\n    (loop [s (rest s)\n           acc '()]\n      (if (empty? s) acc\n        (recur (rest s) (concat acc [sep (first s)]))))))", "problem": 40, "user": "4fbd24d2e4b081705acca2ff"}, {"code": "(fn[a,b](reverse( rest( reverse (apply concat (map (fn[x](vector x a)) b))))))", "problem": 40, "user": "4fb3dd1ee4b081705acca2a5"}, {"code": "(fn [s c] (butlast (mapcat list c (repeat s))))", "problem": 40, "user": "4fc13433e4b081705acca32b"}, {"code": "#(conj (mapcat (fn [e] [%1 e]) (drop 1 %2)) (first %2))", "problem": 40, "user": "4fbfe9a4e4b081705acca31f"}, {"code": "(fn[n,s] (flatten(reduce (fn[a,b] [a,n,b]) s)))", "problem": 40, "user": "4fbd12a5e4b081705acca2fd"}, {"code": "(fn [v l] (butlast (mapcat #(list % v) l)))", "problem": 40, "user": "4fc0853ae4b081705acca327"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "4fabbb97e4b081705acca21d"}, {"code": "#(rest (mapcat (partial list %1) %2))", "problem": 40, "user": "4fbe42b7e4b081705acca30f"}, {"code": "(fn aaa [sep l]\n    (butlast (mapcat list l (repeat sep))))", "problem": 40, "user": "4fbdcb87e4b081705acca30a"}, {"code": "(fn [x xs]\n  (concat [(first xs)] (interleave (repeat (count (rest xs)) x) (rest xs))))", "problem": 40, "user": "4fb4f42ae4b081705acca2b4"}, {"code": "(fn [s c] (rest (mapcat #(vector s %) c)))", "problem": 40, "user": "4fc4eadee4b081705acca353"}, {"code": "(fn [sep coll]\r\n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "4fc4c6afe4b081705acca34d"}, {"code": "(fn [v s]\n  (loop [se s\n         out []]\n    (if-not (next se)\n      (conj out (first se))\n      (recur (rest se)\n             (conj out (first se) v)))))", "problem": 40, "user": "4eca7a87535d6d7199dd3705"}, {"code": "(fn [x l]\n  (drop-last (interleave l (repeat (count l) x))))", "problem": 40, "user": "4e6cf61a535de274dd8d818c"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4fa9da14e4b081705acca1e7"}, {"code": "(fn interpose-reduce [delim coll]\n  (if (seq coll)\n    (->> coll\n         (reduce (fn [acc x] (conj acc delim x)) [])\n         rest)\n    '()))", "problem": 40, "user": "4fc6305de4b0ee37620e180b"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "4fb1d907e4b081705acca282"}, {"code": "#(rest (mapcat list (repeat %1) %2))", "problem": 40, "user": "4ec53831535d6d7199dd3684"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "4fc0221ce4b081705acca322"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "4f73f78de4b044e54cd9a8f3"}, {"code": "(fn [x y] (drop-last (mapcat #(list % x) y)))", "problem": 40, "user": "4faa6184e4b081705acca1f1"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4fb79872e4b081705acca2d2"}, {"code": "(fn [sep col]\n  (into (empty col) (drop-last 1 (mapcat (fn [e] [e sep]) col))))", "problem": 40, "user": "4fc7db47e4b0ee37620e182a"}, {"code": "(fn seqjoin [sep s]\n  (if (empty? (rest s))\n    s\n    (cons (first s) (cons sep (seqjoin sep (rest s))))))", "problem": 40, "user": "4fc50441e4b081705acca36f"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "4f515bd3e4b03ad3f0c10d1f"}, {"code": "(fn [w l]\n  (cons (first l) (interleave (repeat w) (rest l))))", "problem": 40, "user": "4fc8c8d8e4b0ee37620e183b"}, {"code": "(fn itp [sp coll]\n  (cond\n    (empty? coll) ()\n    (empty? (rest coll)) coll\n    :else (cons (first coll) (cons sp (itp sp (rest coll))))))", "problem": 40, "user": "4fbb9d80e4b081705acca2ea"}, {"code": "(fn [sep lst]\n  (loop [res [] l lst s sep]\n        (if (= 1 (count l))\n          (conj res (first l))\n          (recur (conj res (first l) s) (rest l) s))))", "problem": 40, "user": "4fc18846e4b081705acca331"}, {"code": "(fn [d l] (rest (reduce #(conj %1 d %2) [] l)))", "problem": 40, "user": "4fca1cd6e4b0ee37620e184c"}, {"code": "(fn mypose [val inlist]\n  (if (= (count inlist) 1)\n    (list (first inlist))\n    (concat [(first inlist) val] (mypose val (rest inlist)))))", "problem": 40, "user": "4fc50bcbe4b081705acca375"}, {"code": "(fn my-interpose [i coll]\n  (if (or (empty? coll) (empty? (rest coll)))\n    coll\n    (conj (my-interpose i (rest coll)) i (first coll))))", "problem": 40, "user": "4fcaf7a4e4b0ee37620e1857"}, {"code": "(fn [ j l ] \n  (reduce #(concat %1 (list j) %2) ( map vector l ) ))", "problem": 40, "user": "4fc43a8ee4b081705acca346"}, {"code": "(fn [el lst]\n  (pop (reduce (fn [a i]  (into a [i el]) ) [] lst)))", "problem": 40, "user": "4fbd292fe4b081705acca300"}, {"code": "(fn [s xs] (butlast (mapcat #(vector % s) xs)))", "problem": 40, "user": "4ecbd630535df97575fdabe1"}, {"code": "#(rest (mapcat list (repeat %1) %2))", "problem": 40, "user": "4fc67081e4b0ee37620e1813"}, {"code": "(fn [elm col] (drop-last (mapcat #(list % elm) col)))", "problem": 40, "user": "4fb2f9b2e4b081705acca294"}, {"code": "(fn myinterpose [i v]\n  (cons (first v) (mapcat list (repeat (dec (count v)) i) (rest v))\n))", "problem": 40, "user": "4fcad14ce4b0ee37620e1856"}, {"code": "(fn [x s] (butlast (mapcat #(vector % x) s)))", "problem": 40, "user": "4fc8f1fee4b0ee37620e183f"}, {"code": "(fn [val sq]\n  (loop [s sq res []]\n    (if (empty? s)\n      (drop-last res)\n      (recur (rest s) (conj res (first s) val)))))", "problem": 40, "user": "4fcd1bbde4b065de69964ca4"}, {"code": "#(rest (mapcat list (repeat %1) %2))", "problem": 40, "user": "4fce5474e4b0d4b2a7a9d451"}, {"code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "4fc2e302e4b081705acca33a"}, {"code": "(fn [y ys]\n((fn [x xs acc]\n  (if (empty? xs)\n   (pop acc)\n   (recur x (rest xs)\n     (conj acc (first xs) x))))\ny ys []))", "problem": 40, "user": "4f94d3a5e4b0dcca54ed6cc5"}, {"code": "(fn interc[v s] (if (= (count s) 1) s (cons (first s) (cons v (interc v (rest s))))))", "problem": 40, "user": "4f148418535d64f60314643a"}, {"code": "(fn [x coll]\n  (rest (apply concat (for [i coll] [x i]))))", "problem": 40, "user": "4f7431d2e4b044e54cd9a8f7"}, {"code": "(fn [a b] (reduce #(if (vector? %1) (conj %1 a %2) (vector %1 a %2)) b))", "problem": 40, "user": "4ec92a6e535d6d7199dd36fb"}, {"code": "(fn my-interpose [x coll]\n  (when-let [[h & r] coll]\n    (if (not (nil? r))\n      (cons h ( cons x (my-interpose x r)))\n      (list h) \n      )))", "problem": 40, "user": "4fc34787e4b081705acca33e"}, {"code": "(fn in [x l]\n  (if (< (count l) 2)\nl\n  (conj (in x (rest l)) x (first l))\n))", "problem": 40, "user": "4fcebce4e4b03432b189f404"}, {"code": "#(rest (flatten (map (juxt (constantly %) identity) %2)))", "problem": 40, "user": "4f826548e4b033992c121c08"}, {"code": "(fn [sep coll]\n  (drop-last\n    (mapcat #(conj [] % sep) coll)))", "problem": 40, "user": "4fbcbd50e4b081705acca2f9"}, {"code": "(fn[x y]  (butlast (mapcat (fn[z] (list z x)) y))  )", "problem": 40, "user": "4fc7b079e4b0ee37620e1827"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "4fd0d058e4b04c3a95aa0408"}, {"code": "#(next (mapcat (fn [w] [% w]) %2))", "problem": 40, "user": "4fbacdbae4b081705acca2e5"}, {"code": "#(cons (first %2) (mapcat list (repeat %) (rest %2)))", "problem": 40, "user": "4fd22e70e4b04c3a95aa041c"}, {"code": "(fn my-interpse\n  [v seq]\n  (cond\n    (empty? seq) '()\n    (empty? (rest seq)) (list (first seq))\n    :else (cons (first seq) (cons v (my-interpse v (rest seq))))))", "problem": 40, "user": "4fd16778e4b04c3a95aa040f"}, {"code": "#(butlast (interleave %2 (repeat %1)))\n\n;(fn rec [s c]\n;  (if (empty? c) '()\n;    (conj (rec s (rest c)) s (first c))))", "problem": 40, "user": "4fcc103fe4b0ee37620e185f"}, {"code": "(fn [j l] (butlast (mapcat #(list % j) l)))", "problem": 40, "user": "4daf4d2fedd6309eace4d178"}, {"code": "(fn myinterpose [sep,lst](\r\n  if (nil? (next lst))\r\n  lst\r\n  (cons (first lst) (cons sep (myinterpose sep (next lst))))\r\n))", "problem": 40, "user": "4fd459cfe4b0d4de60cee36b"}, {"code": "(fn [a b] (rest (mapcat (partial list a) b)))", "problem": 40, "user": "4fccdc75e4b0ee37620e186d"}, {"code": "(fn [s l] (\n  (fn r [s l res] (\n    if (= nil (first l))\n       res\n       (r s (rest l) (concat res (list s (first l))))\n    )  \n  ) s (rest l) (list (first l)))\n)", "problem": 40, "user": "4fcf5292e4b03432b189f40e"}, {"code": "#(rest (mapcat list (repeat %) %2))", "problem": 40, "user": "4fb23582e4b081705acca28a"}, {"code": "#(rest (mapcat (partial list %) %2))", "problem": 40, "user": "4e929dd0535dbda64a6f6b05"}, {"code": "#(next (interleave (repeat %) %2))", "problem": 40, "user": "4dac61e18cc9d6edb9beb0b3"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "4fadbb17e4b081705acca23e"}, {"code": "#(concat (apply concat (map (fn [x] [x %1]) (butlast %2))) [(last %2)])", "problem": 40, "user": "4f84a4a4e4b033992c121c39"}, {"code": "(fn [v col](butlast (mapcat #(list % v) col)))", "problem": 40, "user": "4fd29d7ce4b04c3a95aa0424"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4fd96694e4b05e33b9224f37"}, {"code": "#(rest (mapcat (partial list %) %2))", "problem": 40, "user": "4fd2789ee4b04c3a95aa0422"}, {"code": "(fn [x S]\n  (rest (apply concat (for [i S]\n    (list x i)))))", "problem": 40, "user": "4fda016ae4b05e33b9224f42"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4fba0877e4b081705acca2dd"}, {"code": "#(butlast (mapcat list %2 (repeat %1)))", "problem": 40, "user": "4fccb31be4b0ee37620e1868"}, {"code": "#(rest (mapcat list (repeat %) %2))", "problem": 40, "user": "4fd6028ce4b0d4de60cee37b"}, {"code": "(fn interp [i s]\r\n      (loop [e s\r\n\t           r '()]\r\n\t       (if (empty? e)\r\n\t\t   (reverse (rest r))\r\n\t\t   (recur (rest e) (conj r (first e) i)))))", "problem": 40, "user": "4eb99b3d535dfed6da9c6d57"}, {"code": "(fn f [n c]\n  (when-let [[h & t] (seq c)]\n    (if (empty? t)\n      [h]\n      (cons h (cons n (f n t))))))", "problem": 40, "user": "4ead2841535d7eef3080731e"}, {"code": "(fn [i xs] (drop-last (flatten (map #(list % i) xs))))", "problem": 40, "user": "4fd6f4d8e4b0dab7d829f37b"}, {"code": "(fn [sep coll]\n  (drop-last (mapcat #(cons % [sep]) coll))\n)", "problem": 40, "user": "4fce75cfe4b03432b189f400"}, {"code": "(fn [x coll]\n  (butlast (interleave coll (repeat x))))", "problem": 40, "user": "4fc66c43e4b0ee37620e1812"}, {"code": "(fn [sep s] (drop 1 (reduce (fn [res el] (conj res sep el )) [] s)))", "problem": 40, "user": "4dad8c92c9a9d6ed1699dc57"}, {"code": "(fn my-interleave [x coll]\n        (if (nil? (next coll))\n            (concat (list (first coll) ))\n            (concat (list (first coll)) [x] (my-interleave x (rest coll)))))", "problem": 40, "user": "4fb591aee4b081705acca2c0"}, {"code": "#(drop-last (mapcat list %2 (repeat (count %2) %1)))", "problem": 40, "user": "4fc6d2c1e4b0ee37620e181b"}, {"code": "#(rest\n  (apply concat\n    (map (fn [x] [%1 x]) %2)))", "problem": 40, "user": "4fdd27f3e4b05e33b9224f78"}, {"code": "(fn r [v l]\n  (if (or (empty? l) (empty? (rest l)))\n    l\n    (conj (conj (r v (rest l)) v) (first l))))", "problem": 40, "user": "4fd153cee4b04c3a95aa040e"}, {"code": "(fn [sep coll] (drop-last(mapcat vector coll (repeat sep))))", "problem": 40, "user": "4f9fb08ae4b0dcca54ed6d3c"}, {"code": "(fn [x y] (rest (interleave (repeat x) y)))", "problem": 40, "user": "4fd2e5d8e4b04c3a95aa0427"}, {"code": "#(drop 1 (interleave (repeat %) %2))", "problem": 40, "user": "4ee6166e535d93acb0a66854"}, {"code": "#(-> % repeat (interleave %2) rest)", "problem": 40, "user": "4e5a5ecb535d8a8b8723a2ac"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4fca2ef0e4b0ee37620e184e"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4fc93728e4b0ee37620e1844"}, {"code": "(fn [a coll]\n  (drop 1 \n    (reduce #(conj % a %2) [] coll)))", "problem": 40, "user": "4fcd155de4b065de69964ca3"}, {"code": "(fn ip [x s]\r\n  (cond\r\n    (empty? s) '()\r\n    (empty? (rest s)) s\r\n    :else (cons (first s)\r\n                (cons x (ip x (rest s))))))", "problem": 40, "user": "4fcc6cb3e4b0ee37620e1861"}, {"code": "(fn [delimiter lst]\n  (loop [l lst result []]\n    (if (empty? l)\n      (butlast result)\n      (recur (next l) (conj result (first l) delimiter)))))", "problem": 40, "user": "4fd7f892e4b0dab7d829f38d"}, {"code": "(fn my-interpose [value coll]\r\n  (loop [coll coll\r\n         result []]\r\n    (if (empty? (rest coll))\r\n      (conj result (first coll))\r\n      (recur (rest coll) (conj result (first coll) value)))))", "problem": 40, "user": "4fe54ee8e4b0e8f79898fec3"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "4fc52d79e4b081705acca386"}, {"code": "#(loop [delim %1 orig-list %2 res-list '()]\n   (cond \n       (empty? orig-list) res-list\n       (= (count orig-list) 1) (recur delim (next orig-list) (concat res-list [(first orig-list)]))\n       true (recur delim (next orig-list) (concat res-list [(first orig-list) delim]))\n   )\n )", "problem": 40, "user": "4fe588b6e4b0e8f79898fec5"}, {"code": "#(drop-last(mapcat (fn [a] [a %1]) %2))", "problem": 40, "user": "4fdc3065e4b05e33b9224f6b"}, {"code": "(fn i [x l]\n  (if (< (count l) 2)\n    l\n    (concat [(first l)] [x] (i x (rest l)))))", "problem": 40, "user": "4fde492be4b05e33b9224f8a"}, {"code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "4fdf2b50e4b05e33b9224f93"}, {"code": "(fn [x [y & ys]]\n  (reduce #(conj %1 x %2) [y] ys))", "problem": 40, "user": "4fd7962ee4b0dab7d829f385"}, {"code": "(fn[x y](butlast (loop [cnt 0 acc[]](if (= cnt (count y)) acc (recur(inc cnt) (conj (conj acc (nth y cnt)) x))))))", "problem": 40, "user": "4f32135ae4b0d6649770a08e"}, {"code": "(fn [x l]\n  (reverse\n    (reduce\n      (fn [accum next]\n        (cons next (cons x accum)))\n      (list (first l))\n      (rest l))))", "problem": 40, "user": "4fb57e06e4b081705acca2bf"}, {"code": "(fn [ y s ]    \n     (let [top  (dec (count s))]\n     (loop \n          [  answer    (vector (get s 0))             \n              index       1        ]\n            ( if (>  index  top )\n                answer \n                ( recur    (conj  (conj  answer   y)  (get s index))         (inc index)))))\n)", "problem": 40, "user": "4fdf750be4b05e33b9224f9c"}, {"code": "(fn [x seq] (drop-last (mapcat vector seq (repeat x))))", "problem": 40, "user": "4fdf4e2be4b05e33b9224f96"}, {"code": "#(rest (mapcat list (repeat %) %2))", "problem": 40, "user": "4fdec88fe4b05e33b9224f8e"}, {"code": "(fn [i as]\n  (if (empty? as)\n      as\n      (loop [xs (rest as) \n             r [(first as)]]\n        (if (empty? xs) r\n             (recur (rest xs) (into r [i (first xs)]))))))", "problem": 40, "user": "4fe8aef4e4b07c9f6fd12c6c"}, {"code": "(fn [i s]\n  ((fn iter [i s-in s-out]\n    (if (empty? s-in)\n      s-out\n      (iter i (rest s-in) (conj s-out i (first s-in)))))\n  i (rest s) [(first s)]))", "problem": 40, "user": "4fe8e771e4b0547ebccb2431"}, {"code": "(fn join [sep xs]\n  (if (= 1 (count xs))\n    xs\n  (cons (first xs) (cons sep (join sep (rest xs))))))", "problem": 40, "user": "4f81fcbfe4b033992c121c03"}, {"code": "(fn my-interpose [e [x & xs]]\n   (if (or (nil? xs)) (list x)\n     `(~x ~e ~@(my-interpose e xs))))", "problem": 40, "user": "4fe8d862e4b0547ebccb2428"}, {"code": "#(butlast (interleave %2 (repeat (count %2) %)))", "problem": 40, "user": "4fe88f78e4b07c9f6fd12c45"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "4fe13ad7e4b0dd6cd5ce3632"}, {"code": "(fn my-interpose [sep coll]\r\n  (let [c (count coll)]\r\n    (take (+ c c -1) (interleave coll (repeat c sep)))))", "problem": 40, "user": "4e7e4a1f535db169f9c7970c"}, {"code": "(fn [sep coll]\n  (butlast (interleave coll (repeat sep))))", "problem": 40, "user": "4fe9d647e4b0547ebccb2472"}, {"code": "(fn [sep xs]\r\n          (rest (interleave (map (fn [a] sep) xs) xs)))", "problem": 40, "user": "4f07ad89535dcb61093f6c2a"}, {"code": "(fn interp\n  ([val seq] (interp val seq []))\n  ([val seq result]\n     (if (empty? seq)\n      result\n      (interp val (rest seq)\n              (if (empty? (rest seq))\n                (conj result (first seq))\n                (conj result (first seq) val))))))", "problem": 40, "user": "4fe89efae4b07c9f6fd12c5b"}, {"code": "#(concat\n  (interleave (pop %2) (repeat %1))\n  (list (peek %2)))", "problem": 40, "user": "4fe89db2e4b07c9f6fd12c59"}, {"code": "(fn [a s] (rest (mapcat vector (repeat a) s)))", "problem": 40, "user": "4feada56e4b0140c20fb9c11"}, {"code": "#(drop-last (interleave %2 (repeat %)))", "problem": 40, "user": "4fd11a93e4b04c3a95aa040a"}, {"code": "(fn f [inter x]\r\n    (if (empty? (rest x)) x\r\n    (concat [(first x)] [inter] (f inter (rest x)))))", "problem": 40, "user": "4fea08a9e4b0547ebccb2484"}, {"code": "(fn [insert seq]\n  (butlast (mapcat #(list % insert) seq)))", "problem": 40, "user": "4fe87e56e4b07c9f6fd12c40"}, {"code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "problem": 40, "user": "4fe9de74e4b0547ebccb2475"}, {"code": "(fn join [seperator coll]\n  (if (empty? (rest coll))\n    coll\n    (cons (first coll) (cons seperator (join seperator (rest coll))))))", "problem": 40, "user": "4fdb881ee4b05e33b9224f5e"}, {"code": "(fn [i l] (butlast (mapcat #(list % i) l)))", "problem": 40, "user": "4fd9d162e4b05e33b9224f3c"}, {"code": "(fn [sep a] (-> (mapcat #(vec (list % sep)) a) reverse rest reverse))", "problem": 40, "user": "4da8dd6e30acd6ed12482a68"}, {"code": "(fn ipose [x ys]\n  (if (> (count ys) 1) (concat (list (first ys) x) (ipose x (rest ys)))\n  (list (first ys))))", "problem": 40, "user": "4fe2501ae4b0dd6cd5ce3644"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "4fe9231ce4b0547ebccb2445"}, {"code": "(fn [i s] (-> (reduce #(conj  %1 %2 i) [] s) (drop-last) ))", "problem": 40, "user": "4e5fb634535d8ccf87e9fe4a"}, {"code": "(fn [sep s]\n    (loop [[x & xs] s\n           res []]\n      (if (empty? xs)\n        (conj res x)\n        (recur xs (conj res x sep)))))", "problem": 40, "user": "4fe89297e4b07c9f6fd12c4c"}, {"code": "(fn pepe [e c]\n    (when c \n      (let [cab (first c)\n            cola (rest c)]\n        (if (empty? cola)\n          [cab]\n          (cons cab (cons e (pepe e cola)))))))", "problem": 40, "user": "4febb4dae4b0681fd128dc98"}, {"code": "(fn implode [glue pieces]\n  (loop [src1 pieces dest []]\n    (if (and (seq src1) (< 1 (count src1)))\n    (recur\n        (rest src1)\n        (conj dest (first src1) glue)\n      )\n      (conj dest (first src1))\n    )\n  )\n)", "problem": 40, "user": "4fea09b2e4b0547ebccb2485"}, {"code": "(fn [x ls] (butlast (interleave ls (repeat (count ls) x))))", "problem": 40, "user": "4fe1597fe4b0dd6cd5ce3633"}, {"code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "problem": 40, "user": "4fea2de5e4b0140c20fb9bfe"}, {"code": "(fn [v x]\n  (loop [x x a '()]\n    (if (empty? x)\n        (reverse (rest a))\n        (recur (rest x)\n               (cons v\n                     (cons (first x) a))))))", "problem": 40, "user": "4feef09ae4b0678c553fc30e"}, {"code": "(fn myinterpose [element coll]\r\n  (let [cnt (count coll)]\r\n    (loop [result [] i 0]\r\n      (if (>= i cnt)\r\n        result\r\n        (recur\r\n          (if (= (inc i) cnt)\r\n            (conj result (nth coll i))\r\n            (conj result (nth coll i) element))\r\n          (inc i))))))", "problem": 40, "user": "4fd170fce4b04c3a95aa0411"}, {"code": "(fn [a col]\n  (butlast (mapcat #(list %1 %2) col (repeat a))))", "problem": 40, "user": "4feff3b6e4b0678c553fc31e"}, {"code": "(fn [a s]\n  (rest (interleave (repeat a) s)))", "problem": 40, "user": "4fe84c74e4b07c9f6fd12c3c"}, {"code": "#_ (fn [sep seq]\n  (reduce #(conj %1 sep %2) [(first seq)] (rest seq)))\n\n#_ (fn [sep seq]\n  (rest (mapcat #(vector %1 %2) (repeat sep) seq)))\n\n#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4fe8b6afe4b07c9f6fd12c76"}, {"code": "(fn interpause [middle collection]\n  (flatten (reduce #(list %1 middle %2) collection)))", "problem": 40, "user": "4ff01fa9e4b0678c553fc321"}, {"code": "(fn [x y]\r\n   (drop-last (mapcat #(conj () x %1) y)))", "problem": 40, "user": "4ff07688e4b0678c553fc324"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4fd65b2be4b0d4de60cee37e"}, {"code": "#(take (-> %2 count ( * 2) dec)\n       (interleave %2 (repeat %1)))", "problem": 40, "user": "4ff07229e4b0678c553fc323"}, {"code": "(fn intr [sep coll]\n  (butlast (reduce #(concat %1 (list %2 sep)) '() coll)))", "problem": 40, "user": "4fe83efbe4b07c9f6fd12c3b"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "4fedd2cae4b0198f34b063ba"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4fe15ffee4b0dd6cd5ce3634"}, {"code": "(fn [x coll]\n  \t(cons (first coll) (apply concat (map #(list x %) (rest coll)))))", "problem": 40, "user": "4e6a63fd535d8ccf87e9feda"}, {"code": "(fn interpose* [intervl cl]\n  (->\n    (reduce (partial apply conj) [] ;; Flattens by one dimension only\n    (for [colval cl]\n      [colval intervl]))\n    (butlast)))", "problem": 40, "user": "4fae4c11e4b081705acca248"}, {"code": "(fn [i s] (concat (apply concat (map (fn [a] [a i]) (butlast s))) [(last s)]))", "problem": 40, "user": "4ff304f4e4b0678c553fc343"}, {"code": "#(butlast ( interleave %2 (repeat %1)))", "problem": 40, "user": "4e95c771535dbda64a6f6b39"}, {"code": "(fn jam [x, ys]\n  (cons (first ys) (reduce #(concat %1 [x %2]) [] (rest ys))))", "problem": 40, "user": "4ff2430ae4b0678c553fc336"}, {"code": "(fn [n col]\n  (rest (reduce #(concat %1 [n %2]) [] col)))", "problem": 40, "user": "4f1427f8535d64f603146435"}, {"code": "(fn [v s]\r\n  (next (interleave (repeat v) s)))", "problem": 40, "user": "4ff201d7e4b0678c553fc330"}, {"code": "(fn [inter coll] (rest (mapcat #(list inter %) coll)))", "problem": 40, "user": "4ff50604e4b0678c553fc365"}, {"code": "#(rest (interleave (repeat %1)\n                    %2))", "problem": 40, "user": "4ff5744ae4b0678c553fc36a"}, {"code": "#(cons (first %2) (mapcat list (repeat %1) (rest %2)))", "problem": 40, "user": "4ff4f5c4e4b0678c553fc362"}, {"code": "(fn ip [s c]\n    (drop-last (mapcat #(list % s) c)))", "problem": 40, "user": "4ff4c9dae4b0678c553fc360"}, {"code": "(fn [x ys] (rest (interleave (repeat x) ys)))", "problem": 40, "user": "4fb4ca71e4b081705acca2b0"}, {"code": "(fn [x y]\n  (butlast (interleave y (repeat x))))", "problem": 40, "user": "4fdf5403e4b05e33b9224f98"}, {"code": "(fn [sep coll] (drop 1 (mapcat #(list sep %1) coll)))", "problem": 40, "user": "4ff3e771e4b0678c553fc356"}, {"code": "(fn nterpose [separator, sq]\n  (reverse (rest (reverse (mapcat list sq (repeat separator))))))", "problem": 40, "user": "4ff31e13e4b0678c553fc346"}, {"code": "(fn [x y] (butlast (flatten (map #(list % x) y))))", "problem": 40, "user": "4fba77fae4b081705acca2df"}, {"code": "(fn [n coll] (drop-last (reduce #(conj % %2 n) [] coll)))", "problem": 40, "user": "4fee04a0e4b0678c553fc308"}, {"code": "(fn [i c] (butlast (reduce #(conj %1 %2 i) [] c)))", "problem": 40, "user": "4fcc70b3e4b0ee37620e1862"}, {"code": "(fn [n coll] (->> n repeat (interleave coll) butlast))", "problem": 40, "user": "4ff6aea8e4b0678c553fc381"}, {"code": "(fn [x lst]\n  (butlast (interleave lst\n    (repeat (count lst) x))))", "problem": 40, "user": "4ff743fde4b0678c553fc38d"}, {"code": "#(next (mapcat vector (repeat %) %2))", "problem": 40, "user": "4f244f26e4b0d66497709fea"}, {"code": "#(drop-last 1 (interleave %2 (repeat %1)))", "problem": 40, "user": "4f230adde4b0d66497709fdf"}, {"code": "(fn [i l]\n  (butlast (vec (mapcat #(list % i)  l))))", "problem": 40, "user": "4fea1f9ee4b0547ebccb248b"}, {"code": "(fn [v s]\n  (loop [x s\n         acc []]\n    (if (nil? x)\n      (butlast acc)\n      (recur (next x) (-> acc (conj (first x)) (conj v))))))", "problem": 40, "user": "4ff9d4e5e4b0678c553fc3b0"}, {"code": "(fn [v c] (drop-last\n  (mapcat vector c (repeat v))))", "problem": 40, "user": "4e84a7dd535db62dc21a62e2"}, {"code": "(fn [s c] (butlast (mapcat #(list % s) c)))", "problem": 40, "user": "4fefd624e4b0678c553fc31b"}, {"code": "(fn [item lst] (butlast (mapcat #(list % item) lst)))", "problem": 40, "user": "4fe8da4de4b0547ebccb2429"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "4e9c3648535dbda64a6f6b7d"}, {"code": "#(rest(interleave (repeat %) %2))", "problem": 40, "user": "4fe868d1e4b07c9f6fd12c3f"}, {"code": "(fn interp [value coll]\n  (butlast (mapcat #(list % value) coll)))", "problem": 40, "user": "4feddf2ee4b0198f34b063be"}, {"code": "#((fn [int l acc]\n     (if (empty? (rest l))\n       (reverse (cons (first l) acc))\n       (recur int (rest l) (into acc [(first l), int])))) %1 %2 nil)", "problem": 40, "user": "4ff355a1e4b0678c553fc34d"}, {"code": "(fn [k coll] (cons (first coll)\n  (reduce #(concat %1 (list k %2)) '() (rest coll))\n))", "problem": 40, "user": "4ffb38e8e4b0678c553fc3c6"}, {"code": "#(drop 1 (mapcat list (repeat %) %2))", "problem": 40, "user": "4e57d1e2535d8a8b8723a289"}, {"code": "#((comp rest interleave) (repeat %) %2)", "problem": 40, "user": "4ff67852e4b0678c553fc37e"}, {"code": "(fn [n s] (rest (mapcat #(vector n %) s)))", "problem": 40, "user": "4ff889f2e4b0678c553fc399"}, {"code": "(fn bl \n  ([x y] (bl y x []))\n  ([x y z] (if (= x []) \n             (rest z) \n             (bl (rest x) y (conj (conj z y) (first x))))))", "problem": 40, "user": "4ff6ed6ae4b0678c553fc384"}, {"code": "(fn [i c] (butlast (apply concat (map list c (repeat (count c) i)))))", "problem": 40, "user": "4ff8a89de4b0678c553fc39d"}, {"code": "#(rest ; drop first value\n  (interleave (repeat %) %2) )", "problem": 40, "user": "4ec7c32c535d6d7199dd36e6"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "4db2cd84535df7e46ed9b6c6"}, {"code": "(fn [a s] (butlast (mapcat #(vector % a) s)))", "problem": 40, "user": "4fdb02aae4b05e33b9224f56"}, {"code": "#(butlast (mapcat list %2 (repeat %)))", "problem": 40, "user": "4fe8e719e4b0547ebccb2430"}, {"code": "(fn my-interpose [x lst]\n  (if (or (empty? lst) (empty? (rest lst)))\n    lst\n    (cons (first lst) (cons x (my-interpose x (rest lst))))))", "problem": 40, "user": "4ff9cfd6e4b0678c553fc3af"}, {"code": "(fn [sep col] (drop 1 (interleave (repeat sep) col)))", "problem": 40, "user": "4fe1a734e4b0dd6cd5ce3637"}, {"code": "(fn [d s]\n  (loop [src1 s dest []]\n    (if (> (count src1) 1)\n      (recur (rest src1) (conj dest (first src1) d))\n      (conj dest (first src1)))))", "problem": 40, "user": "4daf8e61edd6309eace4d179"}, {"code": "(fn [s x]\n  (loop [xx (rest x)\n         result [(first x)]]\n        (if (empty? xx)\n        result\n        (recur (rest xx) (conj result s (first xx))))))", "problem": 40, "user": "4e4ca885535dc968683fc4df"}, {"code": "(fn [sep s] (butlast (interleave s (repeat (count s) sep))))", "problem": 40, "user": "4ff76effe4b0678c553fc390"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4ff82b00e4b0678c553fc395"}, {"code": "(fn [x coll] (rest (interleave (repeat x) coll)))", "problem": 40, "user": "4ffb43b9e4b0678c553fc3ca"}, {"code": "(fn [s xs]\n  (let [[h & t] (map (fn [x] [s x]) xs)]\n    (flatten [(rest h) t])))", "problem": 40, "user": "4ffa213ee4b0678c553fc3b7"}, {"code": "(fn [element seq]\n  (letfn [(ipose [element seq]\n    (cond \n      (empty? seq) '()\n      (empty? (rest seq)) seq\n      :else (cons (first seq) (cons element (ipose element (rest seq)))))\n  )]\n  (ipose element seq))\n)", "problem": 40, "user": "4ff83003e4b0678c553fc396"}, {"code": "#(drop 1 (apply concat (map vector (repeat %) %2)))", "problem": 40, "user": "500159b3e4b0678c553fc419"}, {"code": "(fn [sep s]\n  (butlast (mapcat #(conj [%] sep) s)))", "problem": 40, "user": "4ec9549d535d6d7199dd36fe"}, {"code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "problem": 40, "user": "4ffe4d43e4b0678c553fc3f1"}, {"code": "(fn[k lst]\n  (butlast (flatten (map #(list % k) lst))))", "problem": 40, "user": "4eed6b32535d93acb0a668bc"}, {"code": "(fn [x s]\n  (let [xs (map (fn [_] x) (range (count s)))]\n    (pop (vec (interleave s xs)))))", "problem": 40, "user": "5003deb9e4b0678c553fc445"}, {"code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "4fe8a3bde4b07c9f6fd12c61"}, {"code": "#(butlast (mapcat list %2 (repeat %1)))", "problem": 40, "user": "5003ee7de4b0678c553fc446"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4ffa8affe4b0678c553fc3bd"}, {"code": "#(drop-last (mapcat list %2 (repeat %)))", "problem": 40, "user": "50045388e4b0678c553fc44e"}, {"code": "(fn [n seq] (drop 1 (interleave (repeat n) seq)))", "problem": 40, "user": "5003bb77e4b0678c553fc442"}, {"code": "(fn [c coll] \n  (butlast (mapcat list coll (repeat (count coll) c))))", "problem": 40, "user": "4f625f68e4b0defedf855fd2"}, {"code": "(fn[x s] (take (dec (* (count s) 2)) (interleave s (repeat x))))", "problem": 40, "user": "4ec64981535d6d7199dd36c7"}, {"code": ";; other's solutions found much better ways to do this\n(fn [ins lst] \n  (butlast \n    (mapcat #(list %2 %1) (repeat ins) lst)))", "problem": 40, "user": "5005b57de4b0678c553fc46a"}, {"code": "#(butlast (mapcat (fn [e] (list e %)) %2))", "problem": 40, "user": "4fff57f1e4b0678c553fc3fe"}, {"code": "#(drop-last ((fn fun [i c] (when (seq c) (cons (first c) (cons i (fun i (rest c)))))) %1 %2))", "problem": 40, "user": "4f30896ce4b0d6649770a07b"}, {"code": "#(rest (mapcat (partial list %1) %2))", "problem": 40, "user": "50052d38e4b0678c553fc45c"}, {"code": "(fn [ins items]\n  (loop [x items, dest []]\n    (if (= 1 (count x))\n      (conj dest (first x))\n      (recur\n        (rest x)\n        (conj dest (first x) ins))\n       )))", "problem": 40, "user": "5005f0fae4b0678c553fc472"}, {"code": "(fn my-interpose [x coll]\n  (if (empty? (rest coll))\n    [(first coll)]\n    (cons (first coll) (cons x (my-interpose x (rest coll))))))", "problem": 40, "user": "5002b6e5e4b0678c553fc42c"}, {"code": "(fn [a lst] (loop [rst (list (first lst)), ll (rest lst)]\n              (if (empty? ll)\n                   rst\n                   (recur (concat rst (list a (first ll)))\n                           (rest ll)))))", "problem": 40, "user": "4fd0cb0ee4b04c3a95aa0407"}, {"code": "(fn [char coll]\n  (rest(mapcat #(list char %) coll)))", "problem": 40, "user": "4ffb529be4b0678c553fc3cd"}, {"code": "(fn interp\n  ([val s] (interp val s []))\n  ([val s acc]\n    (if (empty? (rest s))\n      (conj acc (first s))\n      (interp val (rest s) (conj acc (first s) val))\n    )\n  )\n)", "problem": 40, "user": "4fff00ede4b0678c553fc3fc"}, {"code": "(fn seperate [x coll] (drop 1 (interleave (repeat x) coll)))", "problem": 40, "user": "4fa09916e4b0dcca54ed6d4e"}, {"code": "(fn ip [val sequ]\n  (butlast (apply concat (for [a sequ] [a val]))))", "problem": 40, "user": "50057f23e4b0678c553fc466"}, {"code": "(fn [x v]\n  (butlast (interleave v (take (count v) (repeat x)))))", "problem": 40, "user": "4e944706535dbda64a6f6b11"}, {"code": "#(concat (mapcat (fn [x]\n                  [x %]) (butlast %2)) [(last %2)])", "problem": 40, "user": "4fbef9a6e4b081705acca316"}, {"code": "(fn [sep coll]\n  (reduce #(conj %1 sep %2) [(first coll)] (rest coll)))", "problem": 40, "user": "500933a6e4b046cdb195e074"}, {"code": "(fn [s c] (butlast (interleave c (repeat s))))", "problem": 40, "user": "500aa15ee4b03d00572d2d76"}, {"code": "(fn AIDS [sep [& seqN]]\n  (loop [seqZ seqN acc []]\n    (if (> (count seqZ) 1)\n      (recur \n        (rest seqZ) \n        (conj acc (first seqZ) sep))\n      (conj acc (first seqZ)))))", "problem": 40, "user": "50097962e4b03d00572d2d6c"}, {"code": "(fn [sep coll]\n  (butlast (flatten (map #(vector %1 sep) coll))))", "problem": 40, "user": "500d0f21e4b05f7c30cfa69e"}, {"code": "(fn [sep s]\n  (reduce #(conj % sep %2) [(first s)] (rest s)))", "problem": 40, "user": "4f24957ae4b0d66497709fed"}, {"code": "(fn [x lst]\n  (map (fn [n]\n         (if (even? n) (nth lst (/ n 2)) x))\n       (range (+ -1 (* 2 (count lst))))))", "problem": 40, "user": "500cb910e4b05f7c30cfa698"}, {"code": "(fn my-interp [item coll]\n  (if (< (count coll) 1)\n    coll\n    (let [s (seq coll)]\n      (cons (first s)\n            (for [x (rest s)\n                  y [item x]]\n              y)))))", "problem": 40, "user": "500d8c49e4b07ccb9a7ddb00"}, {"code": "(fn [separator coll]\n  (butlast\n    (mapcat vector coll (repeat separator))))", "problem": 40, "user": "4f92884de4b0dcca54ed6caf"}, {"code": "(fn [sep s]\n    (rest (reduce (fn [p i] \n        (conj p i sep)) '() (reverse s))))", "problem": 40, "user": "500cc693e4b05f7c30cfa69a"}, {"code": "(fn [it c] (-> (reduce #(conj %1 %2 it) [] (butlast c))\n               (conj (last c))))", "problem": 40, "user": "4fe900a6e4b0547ebccb243a"}, {"code": "(fn[x, s]( rest (  interleave (take (count s) (repeat x)) s )))", "problem": 40, "user": "4ffd92e7e4b0678c553fc3e3"}, {"code": "(fn myf1[i l]\n  (drop 1\n        (mapcat\n         (fn [x] (list i x)) l)))", "problem": 40, "user": "5007cdb9e4b0b17c647f5227"}, {"code": "(fn [x c] (drop-last (mapcat list c (repeat x))))", "problem": 40, "user": "4e8742d4535dceadca46984f"}, {"code": "#(butlast (mapcat list %2 (repeat %1)))", "problem": 40, "user": "500900dee4b0144d4f561e42"}, {"code": "(fn [v xs]\n  (rest (reduce (fn [acc x] (conj acc v x)) [] xs)))", "problem": 40, "user": "500ff421e4b0ae202717946f"}, {"code": "(fn z [a l]\n  (if (empty? (rest l))\n   [(first l)]\n   (cons (first l) (cons a (z a (rest l))))))", "problem": 40, "user": "4fd8544be4b0dab7d829f390"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "500d1db4e4b05f7c30cfa69f"}, {"code": "(fn [x y]\n(drop-last (interleave y (repeat (count y) x))))", "problem": 40, "user": "50127fbfe4b030d97e4db70f"}, {"code": "(fn [sep, list] (rest (reduce #(conj %1 sep %2) [] list)))", "problem": 40, "user": "500e6c4ee4b04a05d36fcc05"}, {"code": "#(drop-last (interleave %2 (repeat %)))", "problem": 40, "user": "4ff9f5c5e4b0678c553fc3b4"}, {"code": "(fn [a x] (rest (mapcat #(list a %) x)))", "problem": 40, "user": "4fae0b85e4b081705acca245"}, {"code": "(fn [x y]\n  (butlast (interleave y (repeat x))))", "problem": 40, "user": "5012aefce4b0c8732600222a"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "500ee13be4b00fff93030fa1"}, {"code": "(fn [x sequence]\n  (butlast \n    (flatten \n      (seq \n        (into {} \n          (map (fn [y] (assoc {} y x)\n        ) sequence)))))\n)", "problem": 40, "user": "4f037d9e535dcb61093f6af2"}, {"code": "(fn [x ys]\n  (loop [my-vec [] y ys]\n    (if y\n      (recur\n        (conj my-vec (first y) x)\n        (next y))\n      (pop my-vec))))", "problem": 40, "user": "4f98da04e4b0dcca54ed6cf7"}, {"code": "(fn [n coll](drop-last (reduce #(conj %1 %2 n) [] coll)))", "problem": 40, "user": "50054b5ce4b0678c553fc45f"}, {"code": "(fn [i l] (butlast (mapcat (fn [a] (list a i)) l)))", "problem": 40, "user": "4f8320e9e4b033992c121c18"}, {"code": "#(next (mapcat (fn [x] [% x]) %2))", "problem": 40, "user": "5014718fe4b094324338f8e3"}, {"code": "(fn [sep coll]\n  (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "5007f751e4b0b17c647f522b"}, {"code": "#(rest (mapcat list (repeat %) %2))", "problem": 40, "user": "50142490e4b07d18bdaaf70a"}, {"code": "#(butlast (reduce (fn [a b] (conj a b %1)) [] %2))", "problem": 40, "user": "5013141de4b0f26a0e3320a9"}, {"code": "(fn my-interpose [v s]\n  (loop [w v\n         t s\n         newseq []]\n    (if (empty? t)\n      newseq\n      (recur w (rest t) (concat newseq (if (empty? (rest t)) [(first t)] [(first t) w]))))))", "problem": 40, "user": "4ff89ae0e4b0678c553fc39a"}, {"code": "#(drop-last\n  (interleave %2\n    (repeat (count %2) %1)))", "problem": 40, "user": "5012614ee4b02a085b99dc79"}, {"code": "(fn [sep coll]\n  (butlast\n    (flatten\n      (map #(list % sep) coll))))", "problem": 40, "user": "5014754de4b094324338f8e5"}, {"code": "(fn i[d s]\n  (if (= 1 (count s))\n      s\n      (concat [(first s) d]\n              (i d (rest s)))))", "problem": 40, "user": "501284d9e4b030d97e4db710"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "50166470e4b052339a490e76"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "5009fd0ae4b03d00572d2d70"}, {"code": "(fn [x y] \n  (butlast (mapcat #(list % x) y)))", "problem": 40, "user": "500b61b1e4b03d00572d2d81"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "4fe4c09ee4b0e8f79898febb"}, {"code": "(fn [p s]\n  (drop-last (mapcat #(list % p) s)))", "problem": 40, "user": "4fea9154e4b0140c20fb9c0a"}, {"code": "(fn [val xs] (conj (mapcat list (repeat val) (rest xs)) (first xs)))", "problem": 40, "user": "501688f7e4b052339a490e7a"}, {"code": "(fn b [l n] (loop [e l nn n ee '()] (if (empty? nn) (reverse ee) (if (= (count nn) 1) (recur e (rest nn) (conj ee (first nn))) (recur e (rest nn) (conj (conj ee (first nn)) e))))))", "problem": 40, "user": "4fe97adde4b0547ebccb245e"}, {"code": "(fn [v col]\n   (drop 1 (mapcat (partial vector v) col)))", "problem": 40, "user": "500ea957e4b00fff93030f9b"}, {"code": "(fn [x y] (reduce #(concat %1 (if (> (count %1) 0) [x] []) [%2]) [] y))", "problem": 40, "user": "5017f840e4b02f523d7cc5e8"}, {"code": "(fn my-interpose\n               (\n                 [sep seq]\n                 (my-interpose sep seq [])\n               )\n               (\n                 [sep seq res]\n                 (if (= 1 (count seq))\n                     (conj res (first seq))\n                     (recur sep (rest seq) (conj res (first seq) sep))\n                   \n                 )\n               )\n              )", "problem": 40, "user": "50158fa0e4b0aaedd199e913"}, {"code": "(fn [value s]\n  (pop (reduce #(conj %1 %2 value) [] s)))", "problem": 40, "user": "50052fd0e4b0678c553fc45d"}, {"code": "(fn inter [x s]\n  (\n    if(not-empty s)\n    (\n      if(not-empty (rest s))\n        (cons (first s) (cons x (inter x (rest s))))\n        s\n    )\n  )\n)", "problem": 40, "user": "4fb7b80ae4b081705acca2d4"}, {"code": "#(next (flatten (map list (repeat (count %2) %1) %2)))", "problem": 40, "user": "500854c4e4b028e089d3518c"}, {"code": "#(rest (mapcat list (repeat (count %2) %) %2))", "problem": 40, "user": "4ff2f0a9e4b0678c553fc341"}, {"code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "500e91aae4b00fff93030f99"}, {"code": "(fn [x xs] (rest (interleave (repeat x) xs)))", "problem": 40, "user": "4f0309a2535dcb61093f6a46"}, {"code": "(fn [x ys] (butlast (flatten (map #(list %1 %2) ys (repeat x)))))", "problem": 40, "user": "4f528f70e4b03ad3f0c10d3f"}, {"code": "(fn[v s] \n    (reduce #(conj (conj %1 v)%2) [(first s)] (next s))\n)", "problem": 40, "user": "5017eface4b02f523d7cc5e7"}, {"code": "#(drop-last (interleave %2 (repeat (count %2) %1)))", "problem": 40, "user": "50182f53e4b02f523d7cc5ec"}, {"code": "#(loop [del %1 l %2 out ()]\n          (if (= 1 (count l))\n            (reverse (conj out (first l)))\n            (recur del (rest l) (conj out (first l) del))))", "problem": 40, "user": "4fb5033ce4b081705acca2b5"}, {"code": "(fn [x ys] (rest (interleave (repeat x) ys)))", "problem": 40, "user": "4e61bb60535d8ccf87e9fe5c"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "501d34f6e4b066e56b9d0b1e"}, {"code": "#(butlast (interleave %2 (repeat (count %2) %)))", "problem": 40, "user": "4fa719c0e4b081705acca1bf"}, {"code": "#(butlast (apply concat (map (fn [x y] [x y]) %2 (repeat (count %2) %1))))", "problem": 40, "user": "501c76eae4b01d3bc87c0201"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4e260220535deb9a81d77ef0"}, {"code": "(fn [v coll]\n  (drop-last (mapcat vector coll (repeat v))))", "problem": 40, "user": "4f329974e4b0d6649770a093"}, {"code": "(fn [x xs] (rest (reduce #(conj % x %2) [] xs)))", "problem": 40, "user": "501d52a8e4b066e56b9d0b20"}, {"code": "(fn [v s]\n     (reduce (fn [res x]\n               (if (empty? res) \n                 (concat res [x])\n                 (concat res [v x]))) [] s))", "problem": 40, "user": "4ed8b598535d10e5ff6f52fc"}, {"code": "(fn [x y]\n  (butlast(reduce #(conj %1 %2 x) [] y)))", "problem": 40, "user": "501c1492e4b086d93747d180"}, {"code": "(fn [d s]\n  (drop-last (mapcat #(vector % d) s)))", "problem": 40, "user": "4fd2529ae4b04c3a95aa041f"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "4e6a5158535d8ccf87e9fec5"}, {"code": "#(loop [a %1 b (first %2) br %2 rr ()]\n  (if (nil? (second br))\n      (reverse (cons b rr))\n      (recur a \n             (second br) \n             (rest br) \n             (cons a (cons b rr)))))", "problem": 40, "user": "4ffe8193e4b0678c553fc3f4"}, {"code": "(fn inter [x, s]\n  (butlast (mapcat #(vector % x) s)))", "problem": 40, "user": "4fcf642ee4b03432b189f410"}, {"code": "(fn ! [x xs]\n  (if (not-empty xs)\n      (if (not-empty (rest xs))\n          (cons (first xs) (cons x (! x (rest xs))))\n          (list (first xs)))))", "problem": 40, "user": "5020d033e4b0cb6ebc0a42fa"}, {"code": "(fn [x y] (pop (vec (interleave y (repeat x)))))", "problem": 40, "user": "4fab2859e4b081705acca213"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "4f1af7e4535d64f603146471"}, {"code": "(fn asdf [x y]\n(drop-last (mapcat #(take 3 (conj '() x %)) y)))", "problem": 40, "user": "5012036ce4b0a040369c12f4"}, {"code": "#(pop (vec (interleave %2 (repeat (count %2) %1))))", "problem": 40, "user": "50223ee2e4b0846bc458ae48"}, {"code": "(fn intrps [ val sq ]\n (drop-last (mapcat (fn [v] (list v val ) ) sq ) ) )", "problem": 40, "user": "5026916fe4b0c969f0b056e1"}, {"code": "(fn [v coll]\n  (into [] (butlast (mapcat (fn [x] [x v]) coll))))", "problem": 40, "user": "5027fc0ce4b01614d1633ff2"}, {"code": "(fn [x coll]\n  (into (empty coll)\n        (take (- (* 2 (count coll)) 1)\n              (flatten (map (fn [y] [y x]) coll)))))", "problem": 40, "user": "5028cd0fe4b01614d1633ffc"}, {"code": "(fn [sep coll] \n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "501dddc9e4b051153f3b5b7e"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "502ac96de4b0614b5299611b"}, {"code": "#(rest (mapcat list (repeat %1) %2))", "problem": 40, "user": "502ad2cae4b0614b5299611f"}, {"code": "(fn [v s] \n  (let [n  (count s)]\n  (take (+ n (- n 1)) (interleave s (repeat v)))))", "problem": 40, "user": "502a5fa4e4b09e8f859a9fbd"}, {"code": "(fn my-inter [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "5028bce0e4b01614d1633ffb"}, {"code": "#(cons (first %2) (interleave (repeat %1) (rest %2)))", "problem": 40, "user": "502873a8e4b01614d1633ff8"}, {"code": "(fn [delim xs] \n  (butlast (interleave xs (repeat delim))))", "problem": 40, "user": "5025b93ce4b0c969f0b056df"}, {"code": "#(drop-last 1 (interleave %2 (repeat %1)))", "problem": 40, "user": "502d387fe4b0d96a44ab202f"}, {"code": "(fn [ip s]\n  (drop 1 (interleave (repeat ip) s)))", "problem": 40, "user": "501dfd54e4b051153f3b5b80"}, {"code": "(fn [delim s] \n  (drop 1 (interleave (repeat delim) s)))", "problem": 40, "user": "4e47f4f3535dc968683fc4bb"}, {"code": "#(rest (mapcat (partial list %1) %2))", "problem": 40, "user": "502952c9e4b0b33e9bf6fdf1"}, {"code": "(fn interp [v l] \n  (if (empty? (rest l))\n    (list (first l))\n    (cons (first l) (cons v (interp v (rest l))))))", "problem": 40, "user": "502ed81ee4b06efe12e8cc7b"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "501fa1aee4b0cb6ebc0a42eb"}, {"code": "(fn [d c]\n  (rest (mapcat (fn [x] [d x]) c)))", "problem": 40, "user": "4fb1325de4b081705acca276"}, {"code": "(fn foo [x y]\n  (cond \n    (= (count y) 1) y\n    :else (concat (list (first y) x)\n       (foo x (rest y)))))", "problem": 40, "user": "4dea9fae535d08e6dec9fe02"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "502b0804e4b063e52107afad"}, {"code": "#(butlast (interleave\n            %2 (repeat %1)))", "problem": 40, "user": "502a4fdfe4b09dd42f6f3644"}, {"code": "(fn [s c] (drop-last (flatten (map (fn [x] [x s]) c))))", "problem": 40, "user": "502904e0e4b0feaf66e22fad"}, {"code": "(fn [elem coll] \n  (butlast (mapcat #(vector % elem) coll)))", "problem": 40, "user": "4fb01e53e4b081705acca260"}, {"code": "(fn [sep coll]\n  (loop [c coll r []]\n    (if (= 1 (count c)) (conj r (first c))\n        (recur (rest c) (conj r (first c) sep)))))", "problem": 40, "user": "5030f16fe4b05b7df5a0b84b"}, {"code": "(fn [i s]\n  (loop [coll [(first s)] S (rest s)]\n    (if-not (empty? S)\n      (recur (conj coll i (first S)) (rest S))\n      coll\n)))", "problem": 40, "user": "4fdf9a9ae4b05e33b9224f9f"}, {"code": "(fn [c s]\n        (loop [s s x '()]\n          (if (= 1 (count s)) (reverse (cons (first s) x))\n            (recur (rest s) (cons c (cons (first s) x)))))\n     )", "problem": 40, "user": "5029fccee4b023940c84aa47"}, {"code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "problem": 40, "user": "5032b066e4b00c0952a257ea"}, {"code": "(fn [sep s]\n  (butlast (mapcat #(vector % sep) s)))", "problem": 40, "user": "502bb7c0e4b0194ad32ea1a3"}, {"code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "problem": 40, "user": "503255d0e4b0e78df07b092b"}, {"code": "(fn [el ls]\n      (vec (drop-last 1 (mapcat #(conj [%] el)\n              ls))))", "problem": 40, "user": "50342d1be4b062bc5d7ae15f"}, {"code": "(fn [x s]\n  (flatten\n    (concat\n    [ (first s) ]\n    (map #(vector x %) (rest s)))))", "problem": 40, "user": "4ec56b5b535d6d7199dd369f"}, {"code": "(fn [x xs] (into [] (drop-last (flatten (map #(vector % x) xs)))))", "problem": 40, "user": "5032b398e4b00c0952a257eb"}, {"code": "(fn [sep elts]\n  (loop [result [], s sep, e elts]\n    (if (empty? (rest e))\n      (conj result (first e))\n      (recur (conj result (first e) s) s (rest e)))))", "problem": 40, "user": "502940a9e4b061fd216be4b8"}, {"code": "(fn [x y] (drop 1 (interleave (repeat x) y)))", "problem": 40, "user": "502d39f8e4b0d96a44ab2032"}, {"code": "#(butlast (mapcat vector %2 (repeat %)))", "problem": 40, "user": "50336c6be4b0c6c1199c710f"}, {"code": "(fn [x l]\n  (pop (vec\n  (interleave\n    l (repeat x)\n  )))  \n)", "problem": 40, "user": "4fe610fde4b0e8f79898fece"}, {"code": "#( reverse (rest (reverse (flatten (for [x %2] [x %1]))\n)\n)\n)", "problem": 40, "user": "5007c7c7e4b0b17c647f5226"}, {"code": "(fn \n[sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "50255bafe4b0b0b8afb15aa8"}, {"code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "problem": 40, "user": "5034a14de4b062bc5d7ae165"}, {"code": "(fn [i s] (butlast (reduce #(conj %1 %2 i) [] s)))", "problem": 40, "user": "50361b6be4b0fbe0a74d26be"}, {"code": "(fn [d c] (rest (mapcat #(list d %) c)))", "problem": 40, "user": "502a9fdee4b095a7adb898b4"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "50352431e4b0a84c1d88f620"}, {"code": "(fn [n s] \n  (flatten (reduce #(concat [%1] [n] [%2]) s)))", "problem": 40, "user": "5032a96ae4b0e78df07b0932"}, {"code": "(fn [i l] (flatten (reduce #(list %1 i %2) l)))", "problem": 40, "user": "5034b0e1e4b062bc5d7ae167"}, {"code": "#(pop (vec (mapcat vector  %2  (repeat %))))", "problem": 40, "user": "5029131ae4b0b6c928ad61ff"}, {"code": "(fn [sep coll]\n  (loop [input (rest coll) output [(first coll)]]\n    (if (empty? input)\n      output\n      (recur (rest input) (concat output [sep (first input)])))))", "problem": 40, "user": "5033a1fbe4b062bc5d7ae155"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "502cd12fe4b0532a782a5e39"}, {"code": "(fn [x xs]\n (rest (mapcat #(vector x %) xs)))", "problem": 40, "user": "4f3ae998e4b0e243712b1f1f"}, {"code": "(fn [sep coll]\n  (rest (reduce #(conj %1 sep %2) [] coll)))", "problem": 40, "user": "4ded27db535d08e6dec9fe0a"}, {"code": "(fn my-interpose\n     ([c list] (my-interpose c list [])) \n     ([c list result] \n      (if (empty? list)\n        (take (- (.size result) 1) result)\n        (my-interpose c (rest list) (conj (conj result (first list)) c)))))", "problem": 40, "user": "5038f8d2e4b088a6a14ca75f"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "503a234de4b088a6a14ca76d"}, {"code": "(fn foo [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "5035a77de4b0ed9c821488fe"}, {"code": "#(butlast (interleave %2 (repeat (count %2) %)))", "problem": 40, "user": "502d4ea0e4b02fc10c6c6e46"}, {"code": "(fn [e lst]\n  (loop [l lst\n         r []]\n    (if (empty? l) r\n        (recur (rest l)\n               (if (empty? (rest l)) (conj r (first l))\n                 (conj r (first l) e))))))", "problem": 40, "user": "4f58d92fe4b0a7574ea71858"}, {"code": "(fn [x s]\r\n  (butlast (mapcat #(list % x) s)))", "problem": 40, "user": "4fdc067fe4b05e33b9224f69"}, {"code": "(fn [x y] (cons (first y) (mapcat #(list x %) (rest y))))", "problem": 40, "user": "503917a0e4b088a6a14ca763"}, {"code": "(fn [val v] (conj (vec ( (fn seq-inter [x y]\n                          (if (or (empty? x) (empty? y))\n                            '()\n                            (cons\n                              (first x)\n                              (cons\n                               (first y)\n                               (seq-inter (rest x) (rest y)))))) (butlast v) (repeat val))) (last v)))", "problem": 40, "user": "503b6995e4b07a1917cc34dd"}, {"code": "(fn [s coll]\n      (drop-last (mapcat #(vector % s ) coll)))", "problem": 40, "user": "5036dea0e4b0af0658af77a4"}, {"code": "(fn my-interpose\n  ([val list]\n     (my-interpose val list []))\n  ([val list ret-val]\n     (if (empty? list)\n       (rest ret-val)\n       (my-interpose\n        val\n        (rest list)\n        (concat ret-val [val (first list)])))))", "problem": 40, "user": "4f03818e535dcb61093f6b00"}, {"code": "(fn [v x]\n     (rest (reduce concat\n             (map #(vector v %) x))))", "problem": 40, "user": "4f616892e4b0defedf855fbf"}, {"code": "(fn interps\n  [item arr]\n  (loop [acc '() tmp-arr arr]\n    (if (= 1 (count tmp-arr))\n      (concat acc [(first tmp-arr)])\n      (recur (concat acc [(first tmp-arr) item]) (rest tmp-arr)))))", "problem": 40, "user": "4edfb618535d10e5ff6f5343"}, {"code": "(fn [a s] \n   (take (- (* 2 (count s)) 1) (flatten (map (fn [x1 x2] (conj [x1] x2)) s (repeat (count s) a)))\n   ))", "problem": 40, "user": "503ca47fe4b06c4e0e1fa24f"}, {"code": "(fn [i [x & xs]] (concat (list x) (mapcat\r\n                                           #(list i %)\r\n                                           xs)))", "problem": 40, "user": "503d129fe4b06c4e0e1fa254"}, {"code": "(fn [value xs]\r\n  (pop (apply vector (interleave xs (repeat value) ))))", "problem": 40, "user": "4f038ed6535dcb61093f6b24"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "503de5aae4b06c4e0e1fa259"}, {"code": "(fn [sep coll] \n  (rest (apply concat (map #(vector sep %) coll))))", "problem": 40, "user": "5012ec0ae4b0c87326002230"}, {"code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "4fcf763de4b03432b189f413"}, {"code": "(fn [ el xs]\r\n  (cons\r\n    (first xs)\r\n    (mapcat\r\n      (fn [x]\r\n        [el x])\r\n      (rest xs))))", "problem": 40, "user": "50427899e4b0add3005c0fc2"}, {"code": "#(rest (mapcat (partial list %1) %2))", "problem": 40, "user": "4fd81472e4b0dab7d829f38e"}, {"code": "(fn [v l]\n  (loop [r [(first l)] l (rest l)]\n    (if (= () l)\n      r\n      (recur (conj (conj r v) (first l)) (rest l)))))", "problem": 40, "user": "50435852e4b034ff00315d22"}, {"code": "(fn [s l]\n  (reduce\n    (fn [a b] (flatten [a s b]))\n    l))", "problem": 40, "user": "4f70bcf9e4b07046d9f4effe"}, {"code": "(fn [item seq] (drop-last (interleave seq (repeat item))))", "problem": 40, "user": "4fb266a5e4b081705acca28c"}, {"code": "#(rest (mapcat (fn [a] [% a]) %2))", "problem": 40, "user": "4db0114d838c48654951d9b8"}, {"code": "(fn [s c] (drop-last (mapcat vector c (repeat s))))", "problem": 40, "user": "5008d149e4b0144d4f561e41"}, {"code": "(fn inter\n  [i xs]\n  (cons (first xs)\n    (if (> (count xs) 1)\n      (cons i (inter i (rest xs))))))", "problem": 40, "user": "4fab1ea1e4b081705acca210"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "50431cbce4b034ff00315d1c"}, {"code": "(fn [value list] (drop-last (flatten (map (fn [i] [i value]) list))))", "problem": 40, "user": "4f0385b9535dcb61093f6b0e"}, {"code": "#(drop-last (mapcat list %2 (repeat (count %2) %)))", "problem": 40, "user": "50464831e4b011c5dfee771f"}, {"code": "(fn [n l]\r\n  (loop [result [] s l]\r\n    (if (= (count s) 1)\r\n      (conj result (first s))\r\n      (recur (conj result (first s) n) (rest s))))\r\n  )", "problem": 40, "user": "50481b70e4b0ec70b3ef8d98"}, {"code": "#(drop 1 (mapcat vector (repeat %) %2))", "problem": 40, "user": "50479524e4b0371827a27bc4"}, {"code": "#(rest (interleave (repeat (count %2) %) %2))", "problem": 40, "user": "50378996e4b0af0658af77ae"}, {"code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "50481532e4b0ec70b3ef8d96"}, {"code": "(fn [x y] (reduce #(conj %1 x %2) [(first y)] (rest y)))", "problem": 40, "user": "5046b003e4b011c5dfee7727"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "4ff1d6a7e4b0678c553fc32f"}, {"code": "(fn interp [e, s]\n   (if (seq s)\n     (if (seq (rest s))\n       (cons (first s) (cons e (interp e (rest s))))\n       s\n      )))", "problem": 40, "user": "5048202fe4b0ec70b3ef8d9a"}, {"code": "#(rest (mapcat list (repeat %1) %2))", "problem": 40, "user": "50432da5e4b034ff00315d1e"}, {"code": "#(butlast (interleave %2 (repeat (count %2) %)))", "problem": 40, "user": "5047bbd1e4b0ec70b3ef8d90"}, {"code": "(fn [val coll]\n  (butlast (interleave coll (repeat val))))", "problem": 40, "user": "4efec33f535dcb61093f6a2a"}, {"code": "(fn anon [d x]\n  (cond\n    (= (count x) 1) x\n    true (cons (first x) (cons d (anon d (rest x))))))", "problem": 40, "user": "503cc8cae4b06c4e0e1fa251"}, {"code": "#(take (dec (* (count %2) 2)) (interleave %2 (repeat %)))", "problem": 40, "user": "503354c3e4b0c6c1199c710c"}, {"code": "(fn this\n  \t\t([value lst]\n\t\t\t\t(if (not= (rest lst) [])\n\t\t\t\t\t(conj (conj (this value (rest lst)) value) (first lst))\n\t\t\t\t\tlst\n\t\t\t\t)\n\t\t\t)\n\t\t)", "problem": 40, "user": "5048bcf8e4b06e644c63f1ae"}, {"code": "(fn [x coll]\n  (next (reduce concat (map #(list x %) coll)))\n)", "problem": 40, "user": "504d0116e4b022602c20b089"}, {"code": "(fn intps [val sq] (cond\n                    (empty? (rest sq)) sq\n                    :else (cons (first sq) (cons val (intps val (rest sq))))))", "problem": 40, "user": "504e108ce4b078edc5f593b3"}, {"code": "(fn [a s]\n  (cons (first s)\n    (interleave\n      (repeat (count s) a)\n      (rest s))))", "problem": 40, "user": "504e48ace4b0f6ff3350c498"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "504e2600e4b0f6ff3350c46f"}, {"code": "#(cons (first %2) (mapcat (partial vector %1) (rest %2)))", "problem": 40, "user": "50456731e4b01f6c9a8b236b"}, {"code": "(fn [sp sq]\n  (loop [result [] s1 sq s2 sp]\n    (if-not (nil? (second s1))\n   (recur (conj result (first s1) s2) (next s1) s2)\n    (conj result (first s1)))))", "problem": 40, "user": "5036eba7e4b0af0658af77a5"}, {"code": "(fn inter [s [x & xs]]\n  (if (seq xs)\n    (cons x (cons s (inter s xs)))\n    (list x)))", "problem": 40, "user": "504e13fce4b078edc5f593bc"}, {"code": "(fn [sep coll] (rest (mapcat (partial list sep) coll)))", "problem": 40, "user": "504ed350e4b069badc5a33d1"}, {"code": "(fn f [a, b]\r\n   (if (<= (count b) 1)\r\n     b\r\n     (cons (first b) (cons a (f a (rest b))))\r\n   )\r\n)", "problem": 40, "user": "5043a536e4b034ff00315d24"}, {"code": "(fn [n col]\n  (rest (mapcat #(list n %) col)))", "problem": 40, "user": "4db2cc55535df7e46ed9b6c5"}, {"code": "(fn [i l]\n  (drop-last (mapcat vector l (repeat i))))", "problem": 40, "user": "504e3afae4b0f6ff3350c488"}, {"code": "#(rest (flatten (map (partial list %1) %2)))", "problem": 40, "user": "504e397ee4b0f6ff3350c485"}, {"code": "#(rest (mapcat list (repeat %) %2))", "problem": 40, "user": "504e14c2e4b078edc5f593bf"}, {"code": "(fn [arb coll] (drop-last (mapcat vector coll (repeat arb))))", "problem": 40, "user": "504dff92e4b078edc5f5938a"}, {"code": "(fn myinterpose [x y]\r\n  (if (not (empty? y))\r\n\t\t(if (= 1 (count y))\r\n\t\t\t(list (first y))\r\n\t\t\t(concat (list (first y)) (list x) (myinterpose x (rest y)))\r\n\t\t)\r\n\t)\r\n)", "problem": 40, "user": "504f3aede4b0a02f9cffde5d"}, {"code": "#(butlast (mapcat list %2 (repeat (count %2) %1)))", "problem": 40, "user": "504f44cfe4b0a02f9cffde65"}, {"code": "(fn [sep coll]\n    (loop [xs (conj [] (first coll)), ys (rest coll)]\n      (if (empty? ys)\n        xs\n        (recur (conj xs sep (first ys))\n               (rest ys)))))", "problem": 40, "user": "4fcbc18ae4b0ee37620e185c"}, {"code": "#(butlast (interleave  %2 (repeat %)))", "problem": 40, "user": "504457c0e4b01f6c9a8b2360"}, {"code": "(fn [replace lst]\n   (let [[h & t] (reverse (flatten (map (fn [a] (list a replace)) lst)))]\n     (reverse t)))", "problem": 40, "user": "504ec4d3e4b069badc5a33c9"}, {"code": "#(drop-last (mapcat list %2 (repeat %)))", "problem": 40, "user": "504e9f5ce4b069badc5a33bd"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "504f2071e4b0e7ad84dbc4be"}, {"code": "(fn [sep coll]\r\n  (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "5041b3c0e4b06d8231e4facf"}, {"code": "#(loop [sep %1 col %2 ret []] (if (empty? col)\r\n                                          ret\r\n                                          (recur sep (rest col) (if (empty? (rest col)) \r\n                                                                      (conj ret (first col))\r\n                                                                      (conj ret (first col) sep))))  )", "problem": 40, "user": "50463347e4b011c5dfee771e"}, {"code": "(fn [inr xs]\n  (loop [x xs acc []]\n    (if (= (count x) 1)\n      (conj acc (first x))\n      (recur (rest x) (conj acc (first x) inr)))))", "problem": 40, "user": "5050b107e4b063148f524126"}, {"code": "(fn [split arg] (drop 1\n  (flatten (map #(list split %1) arg))))", "problem": 40, "user": "504e685fe4b0f6ff3350c4ae"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "4fda108ee4b05e33b9224f46"}, {"code": "(fn [x xs] (cons (first xs) (mapcat #(vector x %) (rest xs))))", "problem": 40, "user": "4fc5a693e4b0ee37620e17fc"}, {"code": "(fn [x v] (drop-last (reduce into [] (map #(list % x) v))))", "problem": 40, "user": "50517ebfe4b0a561d07d8f06"}, {"code": "#(drop-last (interleave %2 (cycle [%1])))", "problem": 40, "user": "4ebad797535dfed6da9c6d6a"}, {"code": "(fn [sep coll]\r\n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "50436470e4b034ff00315d23"}, {"code": "(fn interposer\n  [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "5020d2aee4b0cb6ebc0a42fb"}, {"code": "(fn [i xs] (cons (first xs) (loop [xs (rest xs) acc []] (if (empty? xs) acc\n  (recur (rest xs) (conj acc i (first xs)))))))", "problem": 40, "user": "504f865ee4b0a02f9cffde90"}, {"code": "(fn [sep coll] \r\n    (drop-last (interleave coll (repeat sep))\r\n    ))", "problem": 40, "user": "504f3fa3e4b0a02f9cffde62"}, {"code": "(fn a [z [x & y]]\n  (loop [s []]\n    (if (empty? y)\n        (conj s x)\n        (concat (conj s x z) (a z y)))))", "problem": 40, "user": "50435689e4b034ff00315d21"}, {"code": "(fn [x xs]\n    ( #(\n        if (= 1 (count %2))\n            (conj %3 (first %2))\n            (recur %1 (rest %2) (conj %3 (first %2) %1 ))\n        )\n      x xs []\n    )\n)", "problem": 40, "user": "504f191ae4b0e7ad84dbc4ba"}, {"code": "(fn interpose-2 [x col]\r\n  (let [[y & ys] (seq col)]\r\n    (if (seq ys)\r\n      (cons y (cons x (interpose-2 x ys)))\r\n      (cons y '()))))", "problem": 40, "user": "4e75edfe535d7a570dd295c7"}, {"code": "#(drop-last (interleave %2 (repeat %)))", "problem": 40, "user": "504e1abee4b0f6ff3350c45d"}, {"code": "(fn interp [v s]\n  (if (or (empty? s) (empty? (rest s))) \n    s\n    (cons (first s) (cons v (interp v (rest s))))))", "problem": 40, "user": "503e6047e4b06c4e0e1fa266"}, {"code": "(fn [d s]\n  (rest (mapcat list (repeat d) s)))", "problem": 40, "user": "504e04a4e4b078edc5f59397"}, {"code": "#(next (interleave (repeat %) %2))", "problem": 40, "user": "4ebbc1f6535dfed6da9c6d72"}, {"code": "(fn f [x xs]\n  (if (next xs)\n      (cons (first xs) (cons x (f x (next xs))))\n      xs))", "problem": 40, "user": "50555c06e4b0ce54f56f03fa"}, {"code": "(fn bla [x ls]\n  (cond (empty? (rest ls)) (list (first ls))\n        :else (cons (first ls) (cons x (bla x (rest ls))))))", "problem": 40, "user": "4ff769bce4b0678c553fc38f"}, {"code": "#(let [x %1 y %2]\n\t   (rest  \n\t    (flatten\n\t     (for [z y]\n\t         [x z]))))", "problem": 40, "user": "4f601623e4b0defedf855fa3"}, {"code": "(fn [a s]\n  (cons (first s)\n(mapcat #(vector a %) (rest s))))", "problem": 40, "user": "5055899de4b0ce54f56f03fd"}, {"code": "(fn [sep xs]\n  (cons (first xs)\n    (mapcat (partial list sep) (rest xs))))", "problem": 40, "user": "504f57c7e4b0a02f9cffde71"}, {"code": "(fn [n xs]\r\n    (rest (interleave (repeat (count xs) n) xs)))", "problem": 40, "user": "5052ab7ee4b0a561d07d8f20"}, {"code": "(fn i [t xs]\n  (rest (mapcat #(list t %) xs)))", "problem": 40, "user": "504f2efae4b0e7ad84dbc4c9"}, {"code": "#(drop-last (interleave %2 (repeat (count %2) %1)))", "problem": 40, "user": "5053de37e4b0b1b9d1860ea8"}, {"code": "(fn [token seq]\n  (butlast (into (empty seq)\n                 (flatten (for [x seq] [x token])))))", "problem": 40, "user": "5057242fe4b0012181721986"}, {"code": "#(drop-last (flatten (for [a %2] [a %1])))", "problem": 40, "user": "4e77c1db535d324fb2983d72"}, {"code": "(fn interpos [x coll]\n  (loop [coll coll acc []]\n    (if (empty? (rest coll))\n      (conj acc (first coll))\n      (recur (rest coll) (conj acc (first coll) x)))))", "problem": 40, "user": "5042de0de4b034ff00315d1b"}, {"code": "#(next ( mapcat (partial list %1) %2))", "problem": 40, "user": "5040edf4e4b0ff5d2cc40db5"}, {"code": "(fn [sep x] \n  (butlast \n    (reduce \n      (fn [a x] (concat a [x sep])) [] x)))", "problem": 40, "user": "504f3f13e4b0a02f9cffde60"}, {"code": "(fn [v s] (butlast (mapcat (fn [a] [a v]) s)))", "problem": 40, "user": "503e7f06e4b06c4e0e1fa268"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "4fca2a13e4b0ee37620e184d"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "50586354e4b06522596eba78"}, {"code": "#(rest (mapcat (fn [x] [% x]) %2))", "problem": 40, "user": "50548ce8e4b0b1b9d1860ead"}, {"code": "(fn [x coll]\r\n  (loop [x x\r\n         coll coll\r\n         z []]\r\n    (if (empty? (rest coll))\r\n      (conj z (first coll))\r\n      (recur x (rest coll) (conj z (first coll) x)))))", "problem": 40, "user": "504e2333e4b0f6ff3350c46c"}, {"code": "(fn seperate [n lat]\n  (when (not (empty? lat))\n    (if (= (count lat) 1)\n      lat\n      (concat (list (first lat) n) (seperate n (rest lat))))))", "problem": 40, "user": "4eb6f065535d7eef30807372"}, {"code": "(fn [c ls]\r\n  (pop (apply vector \r\n              (mapcat (partial #(conj [] %2 %1) c) ls))))", "problem": 40, "user": "4f9aa97ae4b0dcca54ed6d0e"}, {"code": "(fn[i col] (drop-last (reduce #(conj % %2 i) [] col)))", "problem": 40, "user": "4fc6e1a8e4b0ee37620e181d"}, {"code": "(fn [sep coll] \n  (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "5054c853e4b0b1b9d1860eb3"}, {"code": "(fn [n coll]\n  (reverse \n    (drop 1 (reduce (fn [c x] (conj c x n)) '() coll))))", "problem": 40, "user": "505bd09fe4b032b709c81373"}, {"code": "(fn i [a l] (cons (first l) (if (next l) (cons a (i a (next l))) (next l))))", "problem": 40, "user": "4e8a880b535d65386fec210d"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "50563ae2e4b0ce54f56f0405"}, {"code": "(fn inter [x y]\n  (if (empty? (rest y)) (list (first y))\n      (cons (first y) (cons x (inter x (rest y))))))", "problem": 40, "user": "50588af1e4b06522596eba7d"}, {"code": "(fn my-interpose [sep coll]\n  (letfn [(my-real-interpose [sep coll]\n    (loop [coll coll res (empty coll)]\n      (if (nil? coll)\n        res\n        (recur (next coll)\n          (concat res\n            (vector (first coll))\n            (vector sep))))))]\n    (drop-last (my-real-interpose sep coll))))", "problem": 40, "user": "4fd769a1e4b0dab7d829f382"}, {"code": "#(vec (butlast (interleave %2 (repeat %1))))", "problem": 40, "user": "4f6f777de4b07046d9f4efe5"}, {"code": "(fn [x coll] (butlast (mapcat #(vector %1 %2) coll (repeat x))))", "problem": 40, "user": "504c8165e4b09724c857af31"}, {"code": "(fn intr [s xs]\n    (loop [xs xs, res ()]\n      (if-let [tl (next xs)]\n        (recur tl\n               (cons s (cons (first xs) res)))\n        (reverse (cons (first xs) res)))))", "problem": 40, "user": "5055e7f4e4b0ce54f56f0401"}, {"code": "(fn cinterpose [ival xs]\n  (loop [xas (rest xs) acc [(first xs)]]\n    (if (empty? xas)\n      acc\n      (recur (rest xas) (concat acc [ival (first xas)])))))", "problem": 40, "user": "4f046d70535dcb61093f6bc5"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "50588ff1e4b06522596eba7e"}, {"code": "(fn [elemento lista]\n    (letfn [\n            (mezclar [elemento lista1 lista2]\n                     (\n                      cond\n                          (= '() lista1) '()\n                          (= '() (rest lista1)) (reverse (conj lista2 (first lista1)))\n                          :default (mezclar elemento (rest lista1) (conj lista2 (first lista1) elemento ))\n                       )\n              )\n           ]\n           (mezclar elemento lista '())\n      )\n\n  )", "problem": 40, "user": "5058afbbe4b06522596eba81"}, {"code": "(fn [x coll] (drop 1 (interleave (repeat x) coll)))", "problem": 40, "user": "504e8e48e4b069badc5a33b3"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "5054bc87e4b0b1b9d1860eb0"}, {"code": "(fn [n s] (butlast (interleave s (repeat n))))", "problem": 40, "user": "4ed98b40535d10e5ff6f5307"}, {"code": "(fn [s l] (drop 1 (interleave (repeat s) l)))", "problem": 40, "user": "4f8c4ee8e4b02e764a0a5194"}, {"code": "(fn [sep coll] (drop-last (mapcat #(vector %1 sep) coll)))", "problem": 40, "user": "50310b8be4b05b7df5a0b84d"}, {"code": "(fn [x l]\n  (butlast (interleave l (repeat (count l) x))))", "problem": 40, "user": "504e72cee4b0f6ff3350c4b4"}, {"code": "(fn ip [v s]\n  (concat (list (first s) v) \n    (if (empty? (rest (rest s))) (rest s)\n      (ip v (rest s)))))", "problem": 40, "user": "504ec46de4b069badc5a33c8"}, {"code": "(fn [sep coll] \n  (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "50630247e4b05ac47bc68d6b"}, {"code": "(fn [x sq] (reduce #(if (empty? %1) (conj %1 %2) (conj %1 x %2)) [] sq))", "problem": 40, "user": "5060d137e4b0dc10a69545a0"}, {"code": "(fn [n xs]\n  (loop [xs xs ys []]\n    (cond (empty? xs) ys\n          (= (count xs) 1) (conj ys (first xs))\n          :else (recur (rest xs) (conj ys (first xs) n)))))", "problem": 40, "user": "5063b9a0e4b075d771da6f9d"}, {"code": "#(drop 1 (interleave (repeat %) %2))", "problem": 40, "user": "50645e12e4b007509339a58a"}, {"code": "(fn [sep coll]\n   (rest (interleave (repeat sep) coll)))", "problem": 40, "user": "5041bdf3e4b06d8231e4fad0"}, {"code": "#(rest (interleave (repeat (count %2) %1) %2))", "problem": 40, "user": "505fc8e3e4b08f2a82ad10b6"}, {"code": "(fn [j s] (butlast (interleave s (repeat (count s) j))))", "problem": 40, "user": "5063fe48e4b075d771da6f9e"}, {"code": "(fn [sep coll]\n  (reduce #(if(empty? %1) (conj %1 %2)\n\t\t\t(conj %1 sep %2))\n\t\t\t[] coll))", "problem": 40, "user": "50668a06e4b03d366d7cb2b2"}, {"code": "#(rest (mapcat (partial list %) %2))", "problem": 40, "user": "504e3aaae4b0f6ff3350c487"}, {"code": "(fn intp [i, l1] \n  (if (empty? (rest l1)) l1\n    (concat (list (first l1) i) (intp i (rest l1)))))", "problem": 40, "user": "4f8b05d2e4b02e764a0a5176"}, {"code": "(fn [e ls]\n  (drop-last (reduce #(conj %1 %2 e) [] ls)))", "problem": 40, "user": "504db141e4b021508a333965"}, {"code": "(fn [sep s]\n  (reduce #(concat % [sep %2]) [(first s)] (rest s)))", "problem": 40, "user": "50657775e4b0deb876850599"}, {"code": "#(rest (interleave (repeat (count %2) %) %2))", "problem": 40, "user": "5065faf9e4b0313a384e5645"}, {"code": "#(rest (mapcat (partial list %) %2))", "problem": 40, "user": "505f55d3e4b08f2a82ad10b0"}, {"code": "(fn f [s [v & r]] (cons v (if r (cons s (f s r)))))", "problem": 40, "user": "4edb4c7c535d10e5ff6f5318"}, {"code": "(fn interpose2 [d l]\n  (if (<= (count l) 1)\n    l\n    (concat (list (first l) d) (interpose2 d (next l)))))", "problem": 40, "user": "50015be1e4b0678c553fc41a"}, {"code": "(fn [x, l] (butlast (mapcat (fn [ol] (list ol x)) l)))", "problem": 40, "user": "5051e2abe4b0a561d07d8f0a"}, {"code": "(fn [numb values]\n  (loop [n numb c values result []]\n    (if (empty? c) (butlast result)\n      (recur n (rest c) (conj (conj result (first c)) n)))))", "problem": 40, "user": "50621cbde4b0341461c88951"}, {"code": "(fn [v xs]\n  (butlast\n  (interleave xs (replicate (count xs) v))))", "problem": 40, "user": "50611456e4b0dc10a69545a5"}, {"code": "#(cons (first %2) \n  (mapcat (partial list %1)  (rest %2)))", "problem": 40, "user": "502ade49e4b0614b52996120"}, {"code": "(fn [a xs]\n    (butlast (flatten (map (fn [x] [x a]) xs))))", "problem": 40, "user": "506b0a9ce4b0a2a5463de380"}, {"code": "#(drop-last (mapcat list %2 (repeat (count %2) %)))", "problem": 40, "user": "5054c7e1e4b0b1b9d1860eb2"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "506e0e5ae4b09350ab4199eb"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "506617c3e4b03d366d7cb2ab"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "5017d9a9e4b0adbf98d88a3f"}, {"code": "#(butlast (interleave %2 (iterate identity %)))", "problem": 40, "user": "506ef8c3e4b09350ab4199f4"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "507056b8e4b07bd6ad9b9f29"}, {"code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "506f5f26e4b082ae7d1032c8"}, {"code": "(fn [sep string] (rest (mapcat #(list sep %1) string)))", "problem": 40, "user": "50705072e4b07bd6ad9b9f27"}, {"code": "(fn [x ys] (rest (mapcat #(list x %) ys)))", "problem": 40, "user": "506fd0afe4b07bd6ad9b9f23"}, {"code": "#(loop [sep %1 s (rest %2) result [(first %2)]]\n  (if (= 0 (count s))\n    result\n    (recur sep (rest s) (concat result (list sep (first s))))\n))", "problem": 40, "user": "5070e31ee4b0e3170b5a8678"}, {"code": "(fn inter [x list1]\n     (if (> (count list1) 1)\n           (concat\n                   [(first list1)]\n                   [x]\n                   (inter x (next list1)))\n           list1))", "problem": 40, "user": "503efe01e4b06c4e0e1fa26f"}, {"code": "(fn [x y] (butlast (mapcat #(cons %1 [%2]) y (repeat x))))", "problem": 40, "user": "4f3b5219e4b0e243712b1f2a"}, {"code": "#(drop-last (mapcat list %2 (repeat %)))", "problem": 40, "user": "4eb404ba535d7eef3080735a"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "5071b614e4b0e3170b5a867d"}, {"code": "(fn [n s] (butlast (flatten (map #(list % n) s))))", "problem": 40, "user": "5071e520e4b0e3170b5a8683"}, {"code": "(fn [m n] (rest (mapcat (partial list m) n)))", "problem": 40, "user": "503f872ee4b00d1a725ff2ac"}, {"code": "(fn [a l] (rest (interleave (repeat a) l)))", "problem": 40, "user": "507437c2e4b054001656acd0"}, {"code": "#(butlast (apply concat (for [e %2] [e %1])))", "problem": 40, "user": "506a1985e4b01dc6af13f83e"}, {"code": "(fn my-interpose [x y]\n  (vec (drop-last (interleave y (repeat x))))\n  )", "problem": 40, "user": "500a214de4b03d00572d2d74"}, {"code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "5069874de4b01dc6af13f832"}, {"code": "#(let [sep % col %2 cnt (count col)] (take (+ cnt (- cnt 1)) (mapcat (fn [x] [x sep]) col)))", "problem": 40, "user": "50783762e4b0fc74642bff67"}, {"code": "(fn [sep xs]\n  (reduce (fn [acc el]\n        (concat acc [sep el]))\n    [(first xs)] (rest xs)))", "problem": 40, "user": "4fc7ddffe4b0ee37620e182b"}, {"code": "(fn my-interpose [el lst]\n  (->> lst\n       (reduce (fn [accum val] (concat (list el val) accum)) '())\n       rest\n       reverse))", "problem": 40, "user": "50763574e4b0a894bb95bf3d"}, {"code": "(fn [sp sq]\r\n  (loop [isq sq rsq []]\r\n    (if (empty? isq)\r\n      (take (+ (count sq) (dec (count sq))) rsq)\r\n      (recur (rest isq) (conj (conj rsq (first isq)) sp)))))", "problem": 40, "user": "4f2942ace4b0d6649770a01e"}, {"code": "#(drop-last (interleave %2 (repeat %)))", "problem": 40, "user": "4e778d36535d324fb2983d71"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4f32ef71e4b0d6649770a098"}, {"code": "(fn [i col] (rest (reduce #(concat %1 (list i %2)) '() col)))", "problem": 40, "user": "507a08e4e4b08327cd804a67"}, {"code": "(fn [sep seq]\n  (butlast (mapcat #(vector % %2) seq (repeat (count seq) sep))))", "problem": 40, "user": "504eff22e4b0e7ad84dbc4a9"}, {"code": "(fn [val s] (cons (first s) (mapcat #(list val %) (rest s))))", "problem": 40, "user": "506755b3e4b03d366d7cb2bc"}, {"code": "#(rest (mapcat list (repeat %1) %2))", "problem": 40, "user": "507b7dbee4b09034bfeeb71e"}, {"code": "(fn interp\n  [value coll]\n  (loop [s coll result []]\n    (if (empty? s)\n       (drop-last result)\n       (recur (rest s) (conj result (first s) value)))))", "problem": 40, "user": "5046f909e4b03b02161376b5"}, {"code": "#(rest (mapcat list (repeat %1) %2))", "problem": 40, "user": "507a9b29e4b08327cd804a6e"}, {"code": "(fn mix [a b]\n  (if (second b)\n      (cons (first b)\n            (cons a (mix a (rest b))))\n      (list (first b))))", "problem": 40, "user": "5074b3ece4b054001656acd5"}, {"code": "(fn [s S] (rest (mapcat #(vector s %) S)))", "problem": 40, "user": "5061cc17e4b0a30dc9a35d34"}, {"code": "(fn [s c] (reduce #(flatten (list %1 s %2)) c))", "problem": 40, "user": "505f5e2fe4b08f2a82ad10b2"}, {"code": "(fn f [v s]\n  (if \n    (< (count s) 2) s\n     (cons (first s)  \n(cons v (f v (rest s))))))", "problem": 40, "user": "507db411e4b03c76e5499e06"}, {"code": "(fn [x v] (butlast (reduce #(conj % %2 x) [] v)))", "problem": 40, "user": "505d4b21e4b0e6aca564be07"}, {"code": "(fn [v lista]\r\n  (loop [l lista\r\n         res '()]    \r\n    (if\r\n      (= (count l) 1) (concat res l)\r\n     \t(recur (rest l)\r\n               (concat res (list (first l)) (list v) )))\r\n  ))", "problem": 40, "user": "50576483e4b001218172198b"}, {"code": "(fn [t c]\n  ((fn [c c0]\n      (if (empty? c0)\n        (drop-last c)\n        (recur \n          (flatten (list c (first c0) t))\n          (rest c0)))) [] c)\n)", "problem": 40, "user": "4defd021535d08e6dec9fe13"}, {"code": "(fn [x ys]\n  (butlast\n    (reduce\n      #(conj %1 %2 x)\n      []\n      ys\n    )\n  )\n)", "problem": 40, "user": "507eddf4e4b06ce648bcdbfa"}, {"code": "#(take (dec (* 2 (count %2))) \n  (mapcat (fn[x] (list x %)) %2))", "problem": 40, "user": "507c7c8be4b0b083f3ff82ef"}, {"code": "#(drop-last (mapcat list %2 (repeat %1)))", "problem": 40, "user": "50807940e4b01a93d3f38e44"}, {"code": "(fn [g xs] (drop-last (flatten (for [x xs y [g]] [x y]))))", "problem": 40, "user": "5073de20e4b054001656acca"}, {"code": "(fn [v xs] (butlast (interleave xs (repeat v))))", "problem": 40, "user": "508157b2e4b0946d0443855c"}, {"code": "(fn [x l] (take (- (* 2 (count l)) 1) (apply concat (map #(list % x) l))))", "problem": 40, "user": "50839a53e4b0902986d69e10"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "4e72dd5d535d5021c1a89667"}, {"code": "(fn [i l] (rest (reduce #(concat %1 (list i %2)) '() l)))", "problem": 40, "user": "5084cb7de4b0fb8f40674bfb"}, {"code": "#(rest (for [i %2, x [% i]] x))", "problem": 40, "user": "4f7beb36e4b06e829148e1ab"}, {"code": "(fn [x y]\n  (flatten (list (first y) (mapcat #(list x %) (rest y)))))", "problem": 40, "user": "507ef25ce4b0f753b6f9788e"}, {"code": "#(rest (mapcat (partial vector %1) %2))", "problem": 40, "user": "507e68abe4b085af06e3afd2"}, {"code": "#(vec (rest (mapcat (fn pose [x] (conj nil x %1)) %2)))", "problem": 40, "user": "5034b623e4b062bc5d7ae168"}, {"code": "#(rest (interleave (take (count %2) (cycle (vector %))) %2))", "problem": 40, "user": "506b437de4b0eda3100c0906"}, {"code": "(fn __40 [s L]\n  (conj (vec (interleave (butlast L) (repeat s))) (last L)))", "problem": 40, "user": "50293245e4b08353e5d459cf"}, {"code": "(fn [x y]\n (loop [a x b y c '()]\n  (if (empty? (next b))\n   (reverse (conj c (first b)))\n  (recur a (next b)(conj c (first b) a)))))", "problem": 40, "user": "507e5cf8e4b085af06e3afd1"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "5088082ae4b0198722bd9854"}, {"code": "(fn [s, [x & xs]] \n  (reduce #(conj % s %2) [x] xs))", "problem": 40, "user": "507a396be4b08327cd804a69"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "5089fc3ae4b016a21070049f"}, {"code": "(fn my-interpose [x l]\n  (butlast (mapcat #(list %1 x) l)))", "problem": 40, "user": "50812debe4b01a93d3f38e4c"}, {"code": "(fn [sep lst] (rest (mapcat #(list sep %) lst)))", "problem": 40, "user": "508b95a0e4b0be79e5b189c6"}, {"code": "#(butlast (mapcat vector %2 (repeat %)))", "problem": 40, "user": "502ac868e4b0614b5299611a"}, {"code": "(fn [sep coll] (butlast (mapcat (fn [x] [x sep]) coll)))", "problem": 40, "user": "4db86aee535d1e037afb2193"}, {"code": "(fn [sep v]\n    (vec\n      (rest\n        (flatten\n          (map\n            (fn [x] [sep x])\n            v)))))", "problem": 40, "user": "5069c09be4b01dc6af13f837"}, {"code": "(fn [v col] (butlast (reduce #(concat % [%2 v]) '() col)))", "problem": 40, "user": "5082ccb3e4b06a522e8c7af3"}, {"code": "#(rest (for [x %2 y [% x]] y))", "problem": 40, "user": "4e6961f0535d8ccf87e9fe9b"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "506ab9bae4b05d3b7762c74c"}, {"code": "(fn [x l]\n  (reverse\n    (rest\n      (reduce #(conj %1 %2 x) '() l))))", "problem": 40, "user": "508c33ece4b0f17d83ea26b1"}, {"code": "(fn [i lst]\n   (rest (reduce #(conj (conj %1 i) %2) [] lst )))", "problem": 40, "user": "4dd0e8f7535da60f04a96e57"}, {"code": "(fn inter [x [y & args]]\n(if (seq args)\n    (apply list y x (inter x args))\n    [y]))", "problem": 40, "user": "4ec1923f535dfed6da9c6db2"}, {"code": "(fn f [separator sequence]\n  ;; concise\n  (rest (interleave (repeat separator) sequence))\n  ;; lazy\n  (lazy-seq\n    (if (empty? (rest sequence))\n      sequence\n      (cons (first sequence) \n        (cons separator \n          (f separator (rest sequence))))))\n)", "problem": 40, "user": "50901b2ee4b0ea685a20f774"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "501fd838e4b0cb6ebc0a42ed"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "509160dae4b0742c82730aef"}, {"code": "(fn [v l]\n  (reverse (reduce\n    (fn [x y]\n      (cons y (cons v x)) \n    )\n    [(first l)]\n    (rest l)\n  ))\n)", "problem": 40, "user": "4fc8f671e4b0ee37620e1840"}, {"code": "(fn [valu sequenc] (rest (reduce #(concat %1 (list valu %2)) [] sequenc)))", "problem": 40, "user": "508bf05ae4b0f17d83ea26aa"}, {"code": "(fn [sep coll] (reduce #(conj %1 sep %2) [(first coll)] (rest coll)))", "problem": 40, "user": "4e5f034b535d8a8b8723a2d9"}, {"code": "(fn f ([x y]\n  (f x (rest y) [(first y)]))\n  ([x y r]\n    (if (empty? y)\n        r\n      (recur x (rest y) (conj r x (first y))))))", "problem": 40, "user": "507fbd77e4b089ade05efbd3"}, {"code": "(fn [s coll]\n  (drop-last (mapcat list coll (take (count coll) (repeat s)))))", "problem": 40, "user": "505aa653e4b021387fb89857"}, {"code": "#(cons (first %2) (mapcat list (repeat %) (rest %2)))", "problem": 40, "user": "5013193ae4b0f26a0e3320ab"}, {"code": "(fn [x coll]\n  (loop [d x coll coll result []]\n     (if (= 1 (count coll))\n        (conj result (first coll))\n        (recur d (rest coll) (conj result (first coll) d)))))", "problem": 40, "user": "5084c43be4b0fb8f40674bfa"}, {"code": "#(butlast(interleave %2 (repeat %)))", "problem": 40, "user": "5086ca15e4b004985b776e62"}, {"code": "(fn [v xs] (butlast (reduce #(conj %1 %2 v) [] xs)))", "problem": 40, "user": "508ee17ae4b0706b2ed3ef8d"}, {"code": "(fn [s c1] \n  (drop-last \n    (mapcat \n      (fn [coll] (conj [] coll s)) \n    c1)))", "problem": 40, "user": "5089d52ce4b03217b26a539d"}, {"code": "#(pop (vec (interleave %2 (take (count %2) (repeat %1)))))", "problem": 40, "user": "50813b88e4b09292fd669443"}, {"code": "(fn [y xs] (butlast (mapcat #(list % y) xs)))", "problem": 40, "user": "4f85a75ce4b033992c121c48"}, {"code": "(fn [x xs] (rest (mapcat vector (repeat x) xs)))", "problem": 40, "user": "5097a95fe4b00ad8bab4e96e"}, {"code": "(fn [s l]\n  (reverse (rest (reverse (apply concat (map #(vector % s) l))))))", "problem": 40, "user": "5097ea89e4b087ccf61a7af4"}, {"code": "(fn [x y] (butlast (interleave y (repeat x))))", "problem": 40, "user": "5098bcfee4b0cae2931060a1"}, {"code": "(fn [sep xs]\n  (rest (interleave (repeat (count xs) sep) xs)))", "problem": 40, "user": "5097b556e4b00ad8bab4e970"}, {"code": "(fn foo[x y]\n  (into [] (if (= 1 (count y)) y\n   (concat (list (first y)) (list x) (foo x (rest y))))))", "problem": 40, "user": "5078300de4b0fc74642bff66"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "5098f5d6e4b0cae2931060a4"}, {"code": "(fn minterpose [i xs]\n  (flatten (reduce #(list* %1 i %2 ()) xs)))", "problem": 40, "user": "50053d6ce4b0678c553fc45e"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "5089ebfee4b03217b26a539f"}, {"code": "(fn [x s]\n  (loop\n    [b s\n      c []]\n        (if-not (= (count b) 0) \n          (recur (rest b) (-> c (conj (first b)) (conj x)))\n          (drop-last c))))", "problem": 40, "user": "50989786e4b04e098a4c7274"}, {"code": "(fn [a b ] (flatten (map #(if(= % (last b)) % (seq [% a])) b)))", "problem": 40, "user": "5097c837e4b00ad8bab4e973"}, {"code": "(fn [se l](rest\n                        (mapcat #(list se %) l\n                        )\n                        ))", "problem": 40, "user": "509b152be4b0412cdea6eb1e"}, {"code": "(fn [e coll]\r\n   (flatten (reduce(fn [a b] [a e b]) coll)))", "problem": 40, "user": "509a5ca8e4b0efbae1fbc0ab"}, {"code": "#(drop 1 (interleave (repeat %) %2))", "problem": 40, "user": "4f49108ae4b0d56e7bb92be5"}, {"code": "#(take (dec (* (count %2) 2)) (interleave %2 (repeat %)))", "problem": 40, "user": "4dbdc898535d020aff1edf4a"}, {"code": "(fn [x s] (vec (butlast (mapcat #(conj [%] x) s))))", "problem": 40, "user": "50982769e4b04e098a4c726a"}, {"code": "(fn [n s]\n  (drop-last 1 (flatten (mapcat #(list % n) s))))", "problem": 40, "user": "50843a4ae4b0c98812d0788b"}, {"code": "(fn [val seq]\n  (cons (first seq)\n        (mapcat #(list val %) (rest seq))))", "problem": 40, "user": "50970f51e4b00ad8bab4e950"}, {"code": "(fn ipos [mid coll]\n  (reduce #(conj % mid %2) [(first coll)] (rest coll)))", "problem": 40, "user": "509e8da7e4b08df8156e9e2f"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "509dc716e4b08df8156e9e27"}, {"code": "(fn my-interpose [n coll]\n  (reverse\n    (drop 1\n      (reduce #(cons n (cons %2 %1))\n             '() coll))))", "problem": 40, "user": "508d8ab2e4b0f17d83ea26be"}, {"code": "(fn [d x]\r\n  (reduce \r\n    (fn [sum i] \r\n      (conj (conj sum d) i)) [(first x)] (rest x)))", "problem": 40, "user": "508453abe4b0c98812d07891"}, {"code": "(fn [x s] (drop 1 (mapcat #(list x %) s)))", "problem": 40, "user": "50928084e4b097f48cc3856c"}, {"code": "(fn [v coll]\n  (drop 1 (interleave (repeat v) coll)))", "problem": 40, "user": "4f2cdd42e4b0d6649770a055"}, {"code": "(fn [glue coll]\n  (butlast (mapcat #(list %1 %2) coll (repeat (count coll) glue))))", "problem": 40, "user": "5038381ce4b0803468ea2c6b"}, {"code": "#(butlast (mapcat list %2 (repeat %1)))", "problem": 40, "user": "50a2f901e4b029e8bace362a"}, {"code": "#(drop-last (flatten (map list %2 (repeat %1))))", "problem": 40, "user": "4f542fd9e4b0a7574ea717db"}, {"code": "#(butlast (mapcat vector %2 (repeat %)))", "problem": 40, "user": "4e0febe6535d04ed9115e7be"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "50982cc7e4b04e098a4c726c"}, {"code": "#(butlast (mapcat (fn [x] [x %]) %2))", "problem": 40, "user": "50996a38e4b0cae2931060b3"}, {"code": "(fn [p x] (rest (mapcat (partial list p) x)))", "problem": 40, "user": "4f956072e4b0dcca54ed6ccf"}, {"code": "(fn [s c] (drop 1 (interleave (repeat s) c)))", "problem": 40, "user": "508c3d42e4b0f17d83ea26b2"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4fff289ae4b0678c553fc3fd"}, {"code": "#(into [] (drop-last 1 (mapcat (fn [x] (list x %)) %2)))", "problem": 40, "user": "50217818e4b00bba4502f7a7"}, {"code": "#(rest (mapcat (fn [x] [%1 x]) %2))", "problem": 40, "user": "4ec3650f535dcc7ae8597d56"}, {"code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "50981062e4b04e098a4c7268"}, {"code": "(fn [a b]\n  (drop-last (mapcat list b (repeat a))))", "problem": 40, "user": "509f3bc9e4b08df8156e9e39"}, {"code": "(fn intrpose [s xs]\r\n  (case (count xs)\r\n    0 []\r\n    1 xs\r\n    (let [[x & ys] xs]\r\n      (concat [x s] (intrpose s ys)))))", "problem": 40, "user": "509c03f3e4b085ae113522a8"}, {"code": "(fn [sep coll]\n  (loop [s sep, c coll, acc []]\n    (if (empty? (rest c))\n      (conj acc (first c))\n      (recur s (rest c) (conj acc (first c) s)))))", "problem": 40, "user": "50a83794e4b054305ba5a831"}, {"code": "(fn [divider col] (butlast (mapcat #(vector %1 divider) col)))", "problem": 40, "user": "50a7b76de4b090657f4a5cdc"}, {"code": "(fn [val col]\n  (loop [out col acc ()]\n    (if (nil? out)\n\t\t\t\t(rest acc)\n\t\t\t  (recur (next out)\n\t\t\t\t       (concat acc\n\t\t\t\t\t             (list val (first out)))))))", "problem": 40, "user": "50a6b5e8e4b0aa96157e262a"}, {"code": "(fn [v col]\n  (loop [_col col res []]\n    (if (empty? _col)\n      (rest res)\n      (let [_v (first _col)]\n        (recur (rest _col)\n               (apply conj res [v _v]))))))", "problem": 40, "user": "5027b41ee4b01614d1633fee"}, {"code": "(fn [i s]\n  (rest (reduce #(conj %1 i %2) [] s)))", "problem": 40, "user": "4f1ae082535d64f603146470"}, {"code": "(fn fart [n s]\n  (if (= 1 (count s))\n    s\n    (concat (list (first s) n) (fart n (rest s)))))", "problem": 40, "user": "508dbd56e4b0f17d83ea26c2"}, {"code": "#(butlast (flatten (for [i %2] (list i %))))", "problem": 40, "user": "4dbe5390535d020aff1edf5c"}, {"code": "#(rest (mapcat list (repeatedly (constantly %1)) %2))", "problem": 40, "user": "50a83315e4b054305ba5a830"}, {"code": "(fn [d c] (rest (interleave (repeat d) c)))", "problem": 40, "user": "50a4cbbee4b0344e360f3bc2"}, {"code": "(fn [a col] (reverse (rest (reduce #(conj %1 %2 a) () col))))", "problem": 40, "user": "50a2cd3be4b048eb8059339d"}, {"code": "(fn [sep l] (rest (mapcat list (cycle [sep]) l)))", "problem": 40, "user": "509c2c55e4b085ae113522ab"}, {"code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "50a9504de4b07e35d68b27ae"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4ed152d5535d44c135fd68cc"}, {"code": "#(rest (mapcat list (repeat %) %2))", "problem": 40, "user": "50ab8ae3e4b01d6eb43ce9a0"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "50a4f36be4b0344e360f3bc9"}, {"code": "(comp rest #(mapcat list (iterate identity %1) %2))", "problem": 40, "user": "5092fe10e4b097f48cc3857e"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "50a482c1e4b0344e360f3bb7"}, {"code": "(fn ip\n  [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "50ab44b2e4b0f65d68208509"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "500ec210e4b00fff93030f9d"}, {"code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "problem": 40, "user": "50ae22c3e4b0a40c9cfb08d0"}, {"code": "(fn [n x]\n  (let [k (reduce #(into %1 [%2 n]) '() x)]\n    (reverse (rest k))))", "problem": 40, "user": "50a5f72fe4b0aa96157e2611"}, {"code": "(fn [s xs] (reduce #(concat %1 [s %2]) [(first xs)] (rest xs)))", "problem": 40, "user": "50aab057e4b056ee0193586b"}, {"code": "(fn myfunc [ x y ]\r\n\r\n  (pop (reduce (fn [accum z]\r\n              (conj accum z x))\r\n            []\r\n            y)\r\n)\r\n\r\n)", "problem": 40, "user": "50a85af1e4b054305ba5a833"}, {"code": "(fn [sp s] \n  (concat (mapcat #(list %1 sp) (butlast s)) \n          (list (last s))))", "problem": 40, "user": "4f03f3b7535dcb61093f6b85"}, {"code": "(fn [v s] (concat [(first s)] (mapcat (fn [x] [v x]) (drop 1 s))))", "problem": 40, "user": "50ad7888e4b0a40c9cfb08c7"}, {"code": "#(rest (mapcat (partial list %) %2))", "problem": 40, "user": "5078d366e4b08327cd804a5b"}, {"code": "#(let [reduce-function (fn [i] (fn [xs x] (concat xs (list x i))))] \n   (drop-last (reduce (reduce-function %1) [] %2)))", "problem": 40, "user": "4ea8f887535d7eef30807300"}, {"code": "(fn [bet lst]\n  (reduce \n    (fn [x y]\n      (conj (conj x bet) y))\n    [(first lst)]\n    (rest lst)))", "problem": 40, "user": "50b11fbce4b009df37c708cb"}, {"code": "(fn [i x]\n  (loop [r [] h (first x) t (rest x)]\n    (if (seq t)\n      (recur (conj r h i) (first t) (rest t))\n      (conj r h))))", "problem": 40, "user": "50af3393e4b0a40c9cfb08d7"}, {"code": "(fn [r xs]\n  (take (dec (* 2 (count xs))) (interleave xs (repeat r))))", "problem": 40, "user": "5097cfcbe4b00ad8bab4e977"}, {"code": "(fn [x xs] (rest (reduce #(concat %1 (list x %2)) [] xs)))", "problem": 40, "user": "4dad86e0c9a9d6ed0f99dc57"}, {"code": "(fn myfunc [s coll] (rest (reduce #(into %1 [s %2]) [] coll)))", "problem": 40, "user": "4fe9ef2fe4b0547ebccb2479"}, {"code": "#(rest (mapcat list (repeat%) %2))", "problem": 40, "user": "508e13abe4b0f17d83ea26c7"}, {"code": "(fn [sep coll]\r\n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "50b47c46e4b0c464d223d1b8"}, {"code": "#(drop 1 (interleave (repeat %) %2))", "problem": 40, "user": "501b1a8ee4b0b12d9c5f4d81"}, {"code": "(fn [v s]\n  (butlast (interleave s (repeat (count s) v))))", "problem": 40, "user": "50b67515e4b08fb537db98f3"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "50b4383fe4b001349b2f4abf"}, {"code": "(fn i [x y]\n  (if (= '() y)\n      '()\n      (if (= '() (rest y))\n        y\n        (cons (first y)\n          (cons x (i x (rest y)))))))", "problem": 40, "user": "50b668dde4b08fb537db98f2"}, {"code": "(fn [sep coll]\n  (butlast\n    (mapcat\n      #(list % %2)\n      coll (repeat sep))))", "problem": 40, "user": "4f253a49e4b0d66497709ff3"}, {"code": "(fn [a b](rest (flatten (for [ x [a] y b ]\n  (list x y)))))", "problem": 40, "user": "4f0386ac535dcb61093f6b13"}, {"code": "(fn [v xs]\n  (loop [acc '[] lst xs]\n    (cond \n     (empty? lst) acc\n     (empty? (rest lst)) (recur (conj acc (first lst)) (rest lst))\n     :else (recur (conj (conj acc (first lst)) v) (rest lst)))))", "problem": 40, "user": "50afa883e4b0c3f5ed5c29a2"}, {"code": "(fn poser\n  ([d s] (poser '() d s))\n  ([a d s] (if (= (count s) 1)\n              (concat a (cons (first s) '()))\n              (poser (concat a (cons (first s) '()) (cons d '())) d (rest s))\n           )\n  )\n)", "problem": 40, "user": "50b8de6ce4b0cba0e598b652"}, {"code": "(fn [v l] (butlast (mapcat #(list %1 v) l)))", "problem": 40, "user": "50112acee4b0d82cfac69f4c"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "50b65966e4b0a86f8358ca6c"}, {"code": "(fn f [nl x ol]\r\n  (if (empty? ol)\r\n    nl\r\n    (if (empty? nl)\r\n      (recur (conj nl (first ol)) x (rest ol))\r\n      (recur (conj nl x (first ol)) x (rest ol))))) []", "problem": 40, "user": "50b8e9a4e4b0cba0e598b656"}, {"code": "(fn [x s]\n  (loop [acc []\n         lst s]\n    (if (empty? (rest lst))\n      (concat acc lst)\n      (recur (concat acc (list (first lst) x)) (rest lst)))))", "problem": 40, "user": "50868795e4b004985b776e5e"}, {"code": "(fn my-interpose [val a-list]\n  (drop-last (reduce #(concat %1 [%2 val]) [] a-list)))", "problem": 40, "user": "50ba3acae4b03e68e4411c78"}, {"code": "(fn [n v]\r\n  (loop [i 0 acc (empty v)]\r\n    (if (>= i (count v)) acc\r\n      (let [acc (if (> i 0) (conj acc n) acc)]\r\n        (recur (inc i) (conj acc (v i)))))))", "problem": 40, "user": "50ba4b9ee4b03e68e4411c7b"}, {"code": "(fn interpose1 [elm col]\n  (loop  [s (rest col) ret [(first col)]]\n    (if\t(nil? (first s))\n      ret\n      (recur (rest s) (conj ret\telm (first s))))))", "problem": 40, "user": "4f03e7b3535dcb61093f6b7c"}, {"code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "50456747e4b01f6c9a8b236c"}, {"code": "(fn[itm coll]\n  (cons (first coll) \n        (mapcat #(list itm %) \n                (rest coll))))", "problem": 40, "user": "506406c8e4b075d771da6f9f"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "50b79c5fe4b0cf3e51c3046c"}, {"code": "(fn [delim s]\n  (rest\n    (mapcat\n      #(list delim %)\n      s\n    )\n  )\n)", "problem": 40, "user": "4f6fe5e4e4b07046d9f4efef"}, {"code": "(fn [x s]\n  (drop-last(interleave s (repeat x))))", "problem": 40, "user": "50acbd15e4b071b89ef26234"}, {"code": "(fn [i l] (reverse (loop [acc () s1 l] \n                      (if (= (count s1) 1)\n                        (cons (first s1) acc)\n                        (recur (cons i (cons (first s1) acc)) (rest s1))   \n                        ))))", "problem": 40, "user": "50956c2be4b087f34d351ab2"}, {"code": "(fn [el xs]\n  (cons (first xs) (mapcat (fn [x] [el x]) (rest xs))))", "problem": 40, "user": "50bd6033e4b0594b91591c66"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "50b0cffae4b009df37c708c5"}, {"code": "(fn interp [i x]\n  (take (- (* 2 (count x)) 1) (reduce\n                   (fn [a y]\n                     (concat a [y i]))\n                   '()\n                   x)))", "problem": 40, "user": "50b64b55e4b0a86f8358ca6b"}, {"code": "(fn [i s]\n  (rest (mapcat #(list i %) s)))", "problem": 40, "user": "50bb646de4b03e68e4411ca3"}, {"code": "#(rest (mapcat (partial list %) %2))", "problem": 40, "user": "4fdf566fe4b05e33b9224f99"}, {"code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "50b0804de4b009df37c708bb"}, {"code": "(fn [d s] (drop-last (mapcat #(list %1 d) s)))", "problem": 40, "user": "4f327844e4b0d6649770a092"}, {"code": "#(butlast (interleave %2 (take (count %2) (repeat %1))))", "problem": 40, "user": "50b51c06e4b0c464d223d1c1"}, {"code": "#(butlast (mapcat (partial conj `(~%)) %2))", "problem": 40, "user": "4f1e4ab5535d64f603146496"}, {"code": "(fn [x lst]\n  (reverse (butlast (reduce #(concat [%2 x] %1) [] lst))))", "problem": 40, "user": "509251f3e4b09a7d0b586de5"}, {"code": "(fn [ret x col]\n  (if\n    (= '() col )\n(rest ret)\n(recur (conj ret x (first col ))\nx (rest col )))) []", "problem": 40, "user": "50bfe725e4b080409b860f26"}, {"code": "(fn [n c] (cons (first c) (mapcat #(list n %) (rest c))))", "problem": 40, "user": "4f89d489e4b033992c121c7e"}, {"code": "#(rest (interleave (repeat (.size %2) %1) %2))", "problem": 40, "user": "50921f9ae4b09a7d0b586de1"}, {"code": "(fn[x v] (drop-last  (reduce into [] (map #(list %1 x) v) )))", "problem": 40, "user": "50b25f2ce4b03ea88043355f"}, {"code": "(fn ipose2 [i [x & xrest]] (cons x (mapcat #(vector i %1) xrest)) )", "problem": 40, "user": "50b81a93e4b0cba0e598b64b"}, {"code": "(\n  \n fn f[ a b ] (\n    if( = 1 ( count b )) \n    ;then\n    b\n    ;else\n    ( cons (first b ) ( cons a ( f a (rest b ) ) )   )\n )\n)", "problem": 40, "user": "50bf7b72e4b0ffd967a66cc1"}, {"code": "(fn foo [n lst]\n  (if (= 1 (count lst))\n    (list (first lst))\n    (concat (list (first lst) n) \n            (foo n (rest lst))))\n)", "problem": 40, "user": "50ae5659e4b0a40c9cfb08d2"}, {"code": "(fn [x y]\n  (loop [coll y answer []]\n    (if (empty? coll)\n      answer\n      (recur (rest coll)\n        (if (empty? answer)\n          [(first coll)]\n          (conj answer x (first coll))\n        )\n      )\n    )\n  )\n)", "problem": 40, "user": "50bfbf25e4b05ae8c1cbbd9b"}, {"code": "#(rest (mapcat (partial list %) %2))", "problem": 40, "user": "50afc0f9e4b0c3f5ed5c29a3"}, {"code": "#(reduce (fn [a,i] (conj a %1 i)) (vector (first %2)) (next %2))", "problem": 40, "user": "50ba5113e4b03e68e4411c7d"}, {"code": "#(rest (interleave \n  (vec (repeat (count %2) %)) %2))", "problem": 40, "user": "509eeb3be4b08df8156e9e37"}, {"code": "(fn[v, c] (butlast (mapcat #(vec [% v]) c)))", "problem": 40, "user": "5093ca51e4b097f48cc38585"}, {"code": "(fn [x ys]\n  (drop 1\n    (mapcat #(vector x %)\n            ys)))", "problem": 40, "user": "4efa3d4b535dced4c769f270"}, {"code": "(fn sepList [sep y] (if (empty? y) '() (if (empty? (rest y)) (conj (sepList sep (rest y))  (first y)) (conj (sepList sep (rest y)) sep (first y)))))", "problem": 40, "user": "50c6fad1e4b00bb60fe0c52d"}, {"code": "#(drop-last (interleave %2 (repeat %)))", "problem": 40, "user": "50c75d38e4b00bb60fe0c532"}, {"code": "(fn [i c]\r\n  (drop-last (mapcat #(identity [% i]) c)))", "problem": 40, "user": "50608ea0e4b07251188e4456"}, {"code": "#(rest (mapcat (partial vector %) %2))", "problem": 40, "user": "50bf74c7e4b0ffd967a66cc0"}, {"code": "(fn [x,y]\n   (reverse\n    (rest\n    (reduce #(conj  %1 %2 x) '() y ))))", "problem": 40, "user": "50c8697ce4b00bb60fe0c53f"}, {"code": "(fn [ele, li]\n  (butlast \n    (interleave li \n              (repeat (count li) ele))))", "problem": 40, "user": "50c84ba2e4b00bb60fe0c53e"}, {"code": "(fn [s [x & xs]] (cons x (interleave (repeat s) xs)))", "problem": 40, "user": "50c9e5e3e4b0a409464667d7"}, {"code": "(fn [n lst] (drop-last (mapcat list lst (repeat n))))", "problem": 40, "user": "50c9ece0e4b0a409464667d8"}, {"code": "(fn [x xs]\n  (take (dec (* 2 (count xs)))\n    (mapcat list xs (repeat (count xs) x))))", "problem": 40, "user": "50cb4cf6e4b0f78a8e1645b4"}, {"code": "(fn [z xs]\n  (concat (interleave xs (repeat (dec (count xs)) z)) (conj nil (last xs))))", "problem": 40, "user": "50ca2faee4b0a409464667dc"}, {"code": "(fn [sep s]\n  (let [sep-seq (repeat (count s) sep)]\n    (drop-last (interleave s sep-seq))))", "problem": 40, "user": "50b29029e4b03ea880433563"}, {"code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "4f036c4b535dcb61093f6ab9"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "4f8beb2fe4b02e764a0a5185"}, {"code": "#(drop-last (interleave %2 (repeat %)))", "problem": 40, "user": "50cf66ffe4b0e61f11ddcd92"}, {"code": "#(drop-last (interleave %2 (repeat %)))", "problem": 40, "user": "50503117e4b0a02f9cffdeb5"}, {"code": "(fn [sep coll]\n  (reduce (fn [acc i] (conj acc sep i)) [(first coll)] (rest coll)))", "problem": 40, "user": "4ffa893fe4b0678c553fc3bc"}, {"code": "(fn [a b] (butlast (mapcat #(vector % a) b)))", "problem": 40, "user": "50ae0d24e4b0a40c9cfb08ce"}, {"code": "(fn [x y] (for [z (range 0 (- (* 2 (count y)) 1)) :let [zz (nth y (quot z 2))]] (if (= 1 (rem z 2)) x zz)))", "problem": 40, "user": "4eb0175b535d7eef30807336"}, {"code": "#(rest (mapcat (partial list %) %2))", "problem": 40, "user": "509b89b3e4b03049c49bd678"}, {"code": "(fn [sep data] (butlast (mapcat #(conj (list sep) %) data)))", "problem": 40, "user": "4f072644535dcb61093f6c20"}, {"code": "#(take (dec (* (count %2) 2)) (mapcat vector %2 \n        (repeat %)))", "problem": 40, "user": "4f8b27b3e4b02e764a0a5179"}, {"code": "#(drop-last (mapcat (fn [x] (list x %1)) %2))", "problem": 40, "user": "50d04a92e4b00b15ecee975a"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "50ccf729e4b0f7a459302aac"}, {"code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "50733b31e4b0e3170b5a869a"}, {"code": "(fn [d xs] (rest ((fn rn [c] (if (empty? c) () (let [h (first c) t (rest c)] (conj (conj (rn t) h) d)))) xs)))", "problem": 40, "user": "50d242c0e4b06ad58337ed0f"}, {"code": "(fn interposeSeq [x, l]\n   (cond\n    (empty? l)\n    ()\n    (empty?\n     (rest l))\n    l\n    :else\n    (cons\n     (first l)\n     (cons\n      x\n      (interposeSeq\n       x\n       (rest l))))))", "problem": 40, "user": "50d2fa5ce4b049d4ed5650cf"}, {"code": "(fn [d c]\n  (drop-last (reduce \n   #(conj %1 %2 d) [] c)))", "problem": 40, "user": "50d0b466e4b00b15ecee9764"}, {"code": "(fn [x s] (reduce #(concat %1 (if (identical? %2 (last s)) [%2] [%2 x])) [] s))", "problem": 40, "user": "4f03f197535dcb61093f6b84"}, {"code": "(fn [s xs]\n  (rest (reduce #(concat % [s %2]) [] xs)))", "problem": 40, "user": "4e71a12c535d5021c1a8964f"}, {"code": "(fn [x, y] (drop-last (loop [n x, s y, dst []]\n             (if (empty? s)\n               dst\n               (recur n (drop 1 s) (conj dst (first s) n))))))", "problem": 40, "user": "50d4c940e4b09cc622d65a71"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "50cae881e4b0f75dcc9a6e51"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "50d882d4e4b01f0871336e69"}, {"code": "#(next (interleave (repeat %) %2))", "problem": 40, "user": "50d916eae4b0fd36a4b89221"}, {"code": "(fn [v x] (concat (mapcat #(list % v) (take (- (count x) 1) x)) (list (last x))))", "problem": 40, "user": "50d8f4b6e4b01f0871336e74"}, {"code": "(fn [v s] (cons (first s) (mapcat #(vector v %1) (next s))))", "problem": 40, "user": "50b24a2fe4b03ea88043355c"}, {"code": "(fn [sep alist] (drop 1 (mapcat #(list sep %1) alist)))", "problem": 40, "user": "504eb604e4b069badc5a33c4"}, {"code": "(fn ip [w c] (butlast (mapcat #(conj (list w) %) c)))", "problem": 40, "user": "50d179c7e4b05a71a896ef56"}, {"code": "(fn myinter [item tomb]\n  (\n     if (= (count tomb) 1)\n   \t   tomb\n   \t   (conj (myinter item (rest tomb)) item (first tomb) )\n  )\n)", "problem": 40, "user": "50d3317ee4b049d4ed5650da"}, {"code": "; This smells--I need to get all of Clojure's structural/applicative manipulations better in hand:\n(comp butlast \n      (fn [y ys] \n        (mapcat #(vector % y) ys)))", "problem": 40, "user": "50d4c626e4b09cc622d65a70"}, {"code": "(fn [v s]\n  (reverse (rest (reverse (interleave\n    s\n    (take (count s) (repeat v)))))))", "problem": 40, "user": "50d8de3fe4b01f0871336e72"}, {"code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "problem": 40, "user": "50bc4e73e4b0594b91591c3d"}, {"code": "(fn [n coll]\n  (butlast (interleave coll (take (count coll) (repeat n)))))", "problem": 40, "user": "50493b52e4b06e84b772a23e"}, {"code": "#( loop [x [] y %2] (if (seq y) (recur (conj x (first y) %1) (rest y))  (pop x) ) )", "problem": 40, "user": "50cf2267e4b0e61f11ddcd8c"}, {"code": "(fn [sep sq]\n  (rest (mapcat #(vector sep %) sq)))", "problem": 40, "user": "5095f761e4b0ba05ca7aebfd"}, {"code": "(fn [x y] (concat (list (first y)) (mapcat #(list x %) (rest y))))", "problem": 40, "user": "50a8cc97e4b0a9a42786e8db"}, {"code": "(fn my-interpose [separator s]\n  (drop-last \n    (mapcat #(list % separator) \n         s)))", "problem": 40, "user": "4f91fd31e4b0dcca54ed6ca8"}, {"code": "(fn k-interpose [delimiter sequence]\n  (if (seq sequence)\n    (let [[f & r] sequence]\n      (if (seq r)\n\t(lazy-seq (concat [f delimiter] (k-interpose delimiter r)))\n\t[f]))\n    []))", "problem": 40, "user": "50d93c53e4b0fd36a4b89223"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "50de11b2e4b061dbdced7217"}, {"code": "(fn [a b]\n  (reduce (fn [x y] (concat x (cons a (list y)))) (list (first b)) (rest b))\n)", "problem": 40, "user": "50df6dd0e4b061dbdced7225"}, {"code": "(fn myinterpose [intre lis]\n            (concat\n             (apply concat (map (fn calc-fn [arg]\n                       (list arg intre)) (butlast lis)))\n             (list(last lis))))", "problem": 40, "user": "4feb055ae4b0140c20fb9c14"}, {"code": "#(butlast (mapcat list %2 (repeat %1)))", "problem": 40, "user": "4f05a9cf535dcb61093f6bfc"}, {"code": "#(pop (reduce (fn [a b] (conj a b %1)) [] %2))", "problem": 40, "user": "503539dee4b0ed9c821488f6"}, {"code": "(fn [val coll] \n       ((comp reverse rest reverse)\n        (mapcat #(list %1 %2) \n        coll (repeat val))\n        )\n   )", "problem": 40, "user": "50bd13dee4b0594b91591c65"}, {"code": "(fn my-interpose [sep s]\n  (if (seq s)\n    (if (> (count s) 1)\n      (cons (first s) (cons sep (my-interpose sep (rest s))))\n      s)\n    ()))", "problem": 40, "user": "50a7ef7fe4b090657f4a5ce0"}, {"code": "(fn this [sep s]\n  (cond (<= (count s) 1) s\n        :else (conj (conj (this sep (rest s))\n                     sep)\n               (first s))))", "problem": 40, "user": "5021f0b3e4b00bba4502f7ac"}, {"code": "(fn [s v] (butlast (apply concat (map #(vector % s) v))))", "problem": 40, "user": "50d86fe2e4b01f0871336e67"}, {"code": "(fn [x coll]\n  (loop [newcoll '() \n         oldcoll coll\n         n 0]\n    (println \"count coll = \" (count coll) \" n = \" n)\n    (if (< n (- (count coll) 1))\n      (recur (conj newcoll (first oldcoll) x) \n             (next oldcoll) \n             (inc n))\n      (reverse (conj newcoll (last oldcoll))))))", "problem": 40, "user": "50da34e4e4b0f31830755b3c"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "50e0d5a3e4b061dbdced723d"}, {"code": "(fn [sep coll] (reduce #(if (seq %1) (conj %1 sep %2) (conj %1 %2)) [] coll))", "problem": 40, "user": "50e3ec87e4b0463d32072486"}, {"code": "(fn [x coll]\n  (reduce\n    (fn [acc v]\n      (conj acc x v))\n    [(first coll)]\n    (rest coll)\n  )\n)", "problem": 40, "user": "50e3cf55e4b01912b3285c45"}, {"code": "(fn [sep x] (drop 1 (interleave (repeat sep) x)))", "problem": 40, "user": "50cf94bde4b0abc485cb9bb2"}, {"code": "(fn [d s] (rest (reverse (reduce #(cons %2 (cons d %)) [] s))))", "problem": 40, "user": "50dfb660e4b061dbdced7228"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "50b8914ce4b0cba0e598b64d"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "50e3f311e4b0463d32072487"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "50e3ddd4e4b01912b3285c47"}, {"code": "(fn my-interpose [separator, sequence]\n  (drop-last (interleave sequence (repeat (count sequence) separator)))\n)", "problem": 40, "user": "50e496e8e4b0cb9ec68fbca0"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "50c4a354e4b0210b849018af"}, {"code": "#((fn [r f s] (if (= s nil) (vec (next r)) (recur (conj (conj r f) (first s)) f (next s)))) [] %1 %2)", "problem": 40, "user": "50e008d1e4b061dbdced722a"}, {"code": "(fn [x coll] (butlast (mapcat #(identity [%1 x]) coll)))", "problem": 40, "user": "4dda44f2535d02782fcbe9f1"}, {"code": "(fn [sep sq]\n  (concat (mapcat #(list % sep) (drop-last sq)) (list (last sq))))", "problem": 40, "user": "50e35b2de4b094329ae7f4bb"}, {"code": "#(next (interleave (repeat %1) %2))", "problem": 40, "user": "50d0d4c8e4b00b15ecee976a"}, {"code": "#(butlast (reduce (fn [x y] (conj x y %1)) [] %2))", "problem": 40, "user": "4db29f98535df7e46ed9b6c1"}, {"code": "#(rest (mapcat vector (repeat %1) %2))", "problem": 40, "user": "50e8a340e4b0ebbe794eb7ed"}, {"code": "(fn [v x] (butlast (mapcat list x (repeat (count x) v))))", "problem": 40, "user": "50e8ff6be4b0ebbe794eb7f3"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "50e7dd5de4b077ad597af36b"}, {"code": "#(drop-last 1 (interleave %2 (repeat %)))", "problem": 40, "user": "50e87427e4b0ebbe794eb7e8"}, {"code": "(fn [sp coll]\n  (loop [col coll result (empty coll)]\n  \t(if (empty? col)\n      result\n      (if (> (count col) 1)\n        (recur (rest col) (conj result (first col) sp))\n        (recur (rest col) (conj result (first col)))))))", "problem": 40, "user": "50e6a086e4b0140bc92c0a8c"}, {"code": "(fn [x s]\n   (rest (apply concat (map #(cons x [%]) s))))", "problem": 40, "user": "50e5bca5e4b09ae9427b0e75"}, {"code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "4f6fd91ae4b07046d9f4efed"}, {"code": "(fn [v s]\n  (let [n (dec (count s))]\n    (conj (vec (apply concat (map #(list % v) (take n s)))) (last s))))", "problem": 40, "user": "50bc23e4e4b0594b91591c3c"}, {"code": "(fn interpose-sequence [sep a]\n\t(reduce (fn [x y] (conj x sep y)) [(first a)] (rest a)))", "problem": 40, "user": "50ed8a5fe4b06330c1f87c3d"}, {"code": "(fn f\n  [x ys]\n  (if (empty? (rest ys))\n    ys\n    (conj (f x (rest ys))\n          x (first ys))))", "problem": 40, "user": "50ef77a4e4b0bdaecbb47d99"}, {"code": "(fn [sep xs] (reduce #(concat %1 [sep %2]) (take 1 xs) (drop 1 xs)))", "problem": 40, "user": "50ee851ee4b06330c1f87c5b"}, {"code": "#(rest(interleave(repeat %)%2))", "problem": 40, "user": "50ed4626e4b01236b1d4983c"}, {"code": "#(next(interleave (repeat %1) %2))", "problem": 40, "user": "50ef9a7ae4b0bdaecbb47d9e"}, {"code": "(fn [sep xs]\n  (rest (mapcat vector (repeat sep) xs)))", "problem": 40, "user": "50ef4e2be4b0a78662fa2653"}, {"code": "(fn [x y]\n  (butlast (mapcat #(vector % x) y)))", "problem": 40, "user": "50ed5d1be4b06330c1f87c37"}, {"code": "(fn [e coll]\n  (loop [[f & fs] coll\n         result []]\n    (if (empty? fs)\n      (conj result f)\n      (recur fs (conj result f e)))))", "problem": 40, "user": "50ed3c6be4b01236b1d4983b"}, {"code": "(fn loopfun [sep lst]\n  (if (empty? (rest lst))\n    [(first lst)]\n    (cons (first lst) (cons sep (loopfun sep (rest lst))))))", "problem": 40, "user": "50f0d000e4b0c5f4fa5ddb6f"}, {"code": "(fn [n l] (next (mapcat #(list n % ) l)))", "problem": 40, "user": "50ef3e5de4b0a78662fa2652"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "4ff3df0fe4b0678c553fc355"}, {"code": "(fn [x l]\n    (vec (butlast (interleave l (repeat x)))))", "problem": 40, "user": "50e4b066e4b0cb9ec68fbca6"}, {"code": "(fn [sep [x & xs]]\n\t\t(reduce #(conj (conj %1 sep) %2) [x] xs))", "problem": 40, "user": "50eafeaae4b0346a3e988cbb"}, {"code": "(fn [sep l]\n  (rest (reduce\n    #(concat %1 (list sep %2))\n    '()\n    l)))", "problem": 40, "user": "50e4a5a9e4b0cb9ec68fbca3"}, {"code": "(fn [items collection] (butlast (mapcat #(vector % items) collection)))", "problem": 40, "user": "50ee145de4b06330c1f87c53"}, {"code": "(fn [val seq] (concat (interleave seq (take (dec (count seq)) (repeat val))) (list (last seq))))", "problem": 40, "user": "4ec1b090535dfed6da9c6db5"}, {"code": "(fn [sep coll] (drop-last (mapcat #(conj [] % sep) coll)))", "problem": 40, "user": "50ed9e8de4b06330c1f87c44"}, {"code": "(fn [a b] (butlast (mapcat #(vector % a) b)))", "problem": 40, "user": "50ef56dfe4b0bdaecbb47d94"}, {"code": "(fn [n coll]\n    (butlast \t(mapcat #(vector % n) coll)))\n\n;; #(butlast \t(interleave %2 (repeat %1)))\n;; #(next \t\t(interleave (repeat %1) %2))\n;; #(drop 1 \t(interleave (repeat %1) %2)) -- interpose", "problem": 40, "user": "503f4759e4b00d1a725ff2a9"}, {"code": "(fn [sep xs]\n  (loop [acc [(first xs)]\n         left (rest xs)]\n    (if (seq left)\n      (recur (conj acc sep (first left)) (rest left))\n      acc)))", "problem": 40, "user": "4ffc10aae4b0678c553fc3d6"}, {"code": "(fn [sep coll]\n  (rest (mapcat #(cons sep (list %)) coll)))", "problem": 40, "user": "4ed6dbdd535d10e5ff6f52eb"}, {"code": "#(next (interleave (repeat %) %2))", "problem": 40, "user": "50ec8d93e4b04edc3377704c"}, {"code": "(fn cram [peg coll] (drop 1 (interleave (repeat peg) coll)))", "problem": 40, "user": "50e1bdd8e4b019fc399ce17f"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4fd93c42e4b05e33b9224f35"}, {"code": "(fn [sep sq]\n   (butlast (flatten (map #(vector % sep) sq))))", "problem": 40, "user": "50f1dedbe4b0897c4366dcd8"}, {"code": "(fn [ch coll] (butlast (interleave coll (repeat (count coll) ch))))", "problem": 40, "user": "50f0ec9ce4b0d527ce5b30df"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "5099a280e4b0cae2931060bb"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "50f17c0de4b06d9538fe2123"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "50d46d53e4b09cc622d65a69"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "50d8739ae4b01f0871336e68"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "4f038567535dcb61093f6b0c"}, {"code": "(fn [x y]\n  (drop-last (mapcat vector y (repeat x))))", "problem": 40, "user": "50f8615ae4b0aafb827eb1fa"}, {"code": "(fn interleave [interval sqn] (if (= 1 (count sqn)) sqn (conj (interleave interval (rest sqn)) interval (first sqn))))", "problem": 40, "user": "50f2e5cee4b0ec8ee6fa8643"}, {"code": "(fn i [v [x & xs]]\n  (if (empty? xs)\n    [x]\n    (concat [x v] (i v xs))))", "problem": 40, "user": "50e47fa5e4b0cb9ec68fbc9c"}, {"code": "#(rest(interleave(repeat %1)%2))", "problem": 40, "user": "50f9e74ee4b0e7c80cb15a54"}, {"code": "(fn [inter sequence]\n   (rest(interleave (repeat inter) sequence))\n\n                 \n  )", "problem": 40, "user": "4edf95a8535d10e5ff6f5342"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4f98b69ae4b0dcca54ed6cf4"}, {"code": "(fn [value sequ]\n  (drop-last\n   1 (interleave sequ (repeat value))\n   )\n  )", "problem": 40, "user": "50fa0dcee4b07934dda8b0bb"}, {"code": ";;(fn [v [h & tail]] (reduce concat [h] (map #(vec [v %]) tail)))\n(fn [v coll] (drop-last (interleave coll (repeat (count coll) v))))", "problem": 40, "user": "50eddbc4e4b06330c1f87c4b"}, {"code": "(fn [n x] (drop 1 (interleave (repeat n) x)))", "problem": 40, "user": "50f89404e4b0aafb827eb204"}, {"code": "(fn [a lst]\n  (drop-last (interleave lst (repeat (count lst) a)))\n  )", "problem": 40, "user": "50f4894be4b004d364930528"}, {"code": "(fn [s coll]\n  (reduce \n   (fn [a b] \n     (if (empty? a) (conj a b) (conj a s b)))\n   []\n   coll))", "problem": 40, "user": "50fbf811e4b0d10d794c19f1"}, {"code": "(fn i [s c] (butlast (mapcat #(list % s) c)))", "problem": 40, "user": "50ebd63ce4b04edc3377703c"}, {"code": "(fn interposeSeq [a x] (\n  if (empty? (rest x)) x (cons (first x) (cons a (interposeSeq a (rest x))))))", "problem": 40, "user": "50ef311fe4b0a78662fa2651"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4f55ab5ee4b0a7574ea71809"}, {"code": "(fn inter [sep sequen]\n  (loop [remain sequen result []]\n        (if (= (rest remain) [])\n          (conj result (first remain))\n          (recur (rest remain) (conj result (first remain) sep ))\n        )\n  )\n)", "problem": 40, "user": "50f87a67e4b0aafb827eb202"}, {"code": "(fn foo [x s] (if (not (empty? (rest s))) (when (not (empty? s)) (cons (first s) (cons x (foo x (rest s))))) s))", "problem": 40, "user": "50f9c7fde4b0e7c80cb15a52"}, {"code": "(fn temp [theElement, theList]\n  (if\n    (> (count theList) 1)\n    (cons (first theList) (cons theElement (temp theElement (rest theList))))\n    (if\n      (= (count theList) 1)\n      (cons (first theList) nil)\n      nil\n    )\n  )\n)", "problem": 40, "user": "50ff3800e4b017584cb41ccb"}, {"code": "(fn [x sq] (drop-last (interleave sq (repeat x))))", "problem": 40, "user": "50fbdacfe4b0d10d794c19f0"}, {"code": "(fn ip [pad xs]\n  (let [[x & xss] xs]\n    (if xss \n      (lazy-seq (concat (list x pad) (ip pad xss)))\n      (list x))))", "problem": 40, "user": "50fe2b87e4b03cd852b4e84b"}, {"code": "(fn [a b] (drop 1 (interleave (repeat a) b)))", "problem": 40, "user": "50ff44b4e4b017584cb41ccc"}, {"code": "(fn [x,y] (conj (reduce into (for [i (butlast y)] [i x])) (last y)))", "problem": 40, "user": "505caadfe4b0bcb5664c3d3e"}, {"code": "(fn [item elts]\n  (loop [result [], remaining elts, weaves (- (count elts) 1)]\n    (if (= weaves 0)\n      (conj result (first remaining))\n      (recur (conj result (first remaining) item), (rest remaining), (dec weaves)))))", "problem": 40, "user": "50fd9fd4e4b033b9c38d78d0"}, {"code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "50f9e331e4b0e7c80cb15a53"}, {"code": "(fn [x y] (reduce (fn [a b] (conj a x b)) (vector (first y)) (rest y)))", "problem": 40, "user": "50f85902e4b0aafb827eb1f8"}, {"code": "(fn [spacer a-seq]\n  (drop-last (mapcat vector a-seq (repeat spacer))))", "problem": 40, "user": "50febf94e4b075812dd6dfb3"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "50ec4ed7e4b04edc33777046"}, {"code": "(fn addtoseq [sep s] (rest (interleave (repeat sep) s)))", "problem": 40, "user": "50f897a4e4b0aafb827eb205"}, {"code": "#(rest (flatten (map vector (repeat %1) %2)))", "problem": 40, "user": "5097ddfce4b087ccf61a7af0"}, {"code": "(fn\n  [delim xs]\n  (rest (mapcat #(seq [delim %]) xs)))", "problem": 40, "user": "51008b6fe4b0700a7a02d6e4"}, {"code": "(fn [v s]\n  (drop-last \n    (flatten\n      (map #(list %1 %2)\n           s\n           (repeat v)))))", "problem": 40, "user": "50978ca4e4b00ad8bab4e966"}, {"code": "(fn [filler stuff]\n  (drop-last (flatten (map list stuff (repeat filler)))))", "problem": 40, "user": "5006b7d2e4b0678c553fc48c"}, {"code": "(fn inter\n  [v l]\n  (loop [s l o []]\n    (if (= (count s) 1)\n       (conj o (first s))\n      (recur (rest s) (conj o (first s) v)))))", "problem": 40, "user": "5101192ae4b0bef64c30e266"}, {"code": "#(drop-last (apply concat (for [v %2] [v %1])))", "problem": 40, "user": "51040eb2e4b0432126ba9bb4"}, {"code": "(fn [sep lst] (rest (reduce #(conj %1 sep %2) [] lst)))", "problem": 40, "user": "51059d33e4b0380e797c7d5c"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "504e9011e4b069badc5a33b7"}, {"code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "51022e25e4b00c483ae176f5"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "5103807fe4b00c483ae17703"}, {"code": "(fn inp\n\t([i s] (inp i s ()))\n\t([i s r]\n\t\t(if\n\t\t\t(= s ())\n\t\t\t(reverse (rest r))\n\t\t\t(inp i (rest s) (cons i (cons (first s) r))))))", "problem": 40, "user": "50f84d85e4b0aafb827eb1f7"}, {"code": "(fn f [p l]\n  (cond (empty? (rest l)) l\n        :else (concat [(first l) p] (f p (rest l)))))", "problem": 40, "user": "5102489de4b00c483ae176f6"}, {"code": "(fn [x xs] (-> (mapcat #(list % x) xs)\n               (butlast)))", "problem": 40, "user": "4fa05b99e4b0dcca54ed6d47"}, {"code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "5106bc8ae4b01150e115ebec"}, {"code": "#(drop 1 (interleave (repeat (count %2) %1) %2))", "problem": 40, "user": "4f23e1cde4b0d66497709fe4"}, {"code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "50fee7c9e4b04bea760d0d7a"}, {"code": "#(->> %2 (mapcat (partial list %1)) rest)", "problem": 40, "user": "51095588e4b0e34872b3efa5"}, {"code": "(fn [token strings] (butlast (reduce #(concat %1 [%2 token]) [] strings)))", "problem": 40, "user": "50e4f4e9e4b049a987753896"}, {"code": "(fn v [s l] (if (= (count l) 1) l (cons (first l)(cons s (v s (rest l))))))", "problem": 40, "user": "510931ede4b0c71f76895663"}, {"code": "(fn insert-into-seq [sep coll]\n  (drop-last\n    (mapcat\n      vector coll (repeat (count coll) sep)\n      )\n    )\n  )", "problem": 40, "user": "510a3cd4e4b06956752d35ad"}, {"code": "(fn [sep arr] (drop 1 (reduce #(conj %1 sep %2) [] arr)))", "problem": 40, "user": "50feb0e1e4b03cd852b4e851"}, {"code": "(fn [n coll] (rest (mapcat #(vector n %) coll)))", "problem": 40, "user": "50fac9e3e4b07934dda8b0d1"}, {"code": "#(drop-last (interleave %2 (repeat (count %2) %1)))", "problem": 40, "user": "4e964f4a535dbda64a6f6b42"}, {"code": "#(butlast (mapcat list %2 (repeat %1)))", "problem": 40, "user": "510db6cde4b078ea71921145"}, {"code": "(fn [y x] (rest (#(reduce concat '() (for [x %1] (conj '() x %2))) x y)))", "problem": 40, "user": "5047782ce4b0371827a27bc2"}, {"code": "#(drop 1 (interleave (repeat %) %2))", "problem": 40, "user": "510d1ff4e4b078ea7192112f"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "510d9d61e4b078ea71921141"}, {"code": "(fn [s S] (rest (mapcat #(list s %) S)))", "problem": 40, "user": "5107b86de4b05b2b4eee7495"}, {"code": "(fn [x coll] (into [] (butlast (interleave coll (repeat x)))))", "problem": 40, "user": "507a33dee4b08327cd804a68"}, {"code": "(fn [s xs] (rest (reverse (flatten (map list (reverse xs) (replicate (count xs) s))))))", "problem": 40, "user": "5102ef6be4b00c483ae176fc"}, {"code": "(fn [itemToInterleave originalList] (butlast (flatten (map list originalList (take (count originalList) (repeat itemToInterleave))))))", "problem": 40, "user": "51018807e4b0a79bcc8c0e0b"}, {"code": "(fn\n  [sep s]\n  (butlast \n   (mapcat \n    #(list % sep)\n    s)))", "problem": 40, "user": "4f5d5202e4b0030a34fb2b38"}, {"code": "#(rest (interleave (repeat (count %2) %1) %2))", "problem": 40, "user": "510d3dc6e4b078ea71921132"}, {"code": "#(conj (into [] (mapcat list %2 (repeat (dec (count %2)) %1))) (last %2))", "problem": 40, "user": "51105c7fe4b04c71fce993ef"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "50eebf46e4b06330c1f87c61"}, {"code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "510f0b95e4b0faca7c680138"}, {"code": "#(drop-last (interleave %2 (repeat (count %2) %)))", "problem": 40, "user": "5102ac9de4b00c483ae176fa"}, {"code": "#(drop-last 1 (interleave %2 (repeat %)))", "problem": 40, "user": "511026b1e4b04c71fce993ec"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "50afdf00e4b0c3f5ed5c29a5"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "510e1584e4b07438aa321458"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "511278bbe4b0350614f07a75"}, {"code": "(fn [a b] (vec (drop-last (interleave b (repeat a)))))", "problem": 40, "user": "510b704ee4b078ea71921100"}, {"code": "(fn [v xs]\n  (if (coll? xs)\n    (loop [ys (rest xs)\n           zs [(first xs)]]\n      (if (seq ys)\n        (recur (rest ys) (conj zs v (first ys)))\n        zs))\n    nil))", "problem": 40, "user": "511442d0e4b0e9c109bb74d5"}, {"code": "#(drop-last (mapcat (fn [x]\n            [x %1]) %2))", "problem": 40, "user": "50d3b03fe4b030b634c368b9"}, {"code": "#(rest (interleave (map (fn [n] %1) %2) %2))", "problem": 40, "user": "50bce014e4b0594b91591c63"}, {"code": "#(butlast (interleave %2 (repeat (count %2) %)))", "problem": 40, "user": "50b35486e4b03ea88043356a"}, {"code": "(fn [sep seq1]\n   (loop [result [(first seq1)] elements (rest seq1)]\n     (if (empty? elements)\n       result\n       (recur (conj (conj result sep) (first elements)) (rest elements))\n       )\n     )   \n   )", "problem": 40, "user": "5106dc1be4b01150e115ebf0"}, {"code": "(fn [val coll]\n   (rest (reverse (reduce\n                   (fn [out in]\n                     (cons in (cons val out))\n                     ) '() coll))))", "problem": 40, "user": "4f74271ae4b044e54cd9a8f6"}, {"code": "(fn[v xs] \n   (let [end (last xs)] \n     (mapcat #(if (= % end) [%] [% v]) xs)))", "problem": 40, "user": "5114ab7be4b0ce5098ee73b5"}, {"code": "(fn _interpose [value items]\n  (if (= 1 (count items))\n    items\n    (into [(first items) value] (_interpose value (rest items)))))", "problem": 40, "user": "510cd1dde4b078ea71921124"}, {"code": "#(rest (mapcat (fn [a] [%1 a]) %2))", "problem": 40, "user": "50e3e108e4b01912b3285c48"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4fe8fda4e4b0547ebccb2438"}, {"code": "(fn [sep s]\n  (loop [s s \n         v []]\n    (cond (empty? s) v\n          (empty? v) (recur (rest s) (conj v (first s)))\n          :else (recur (rest s) (conj v sep (first s)))\n    )\n  )\n)", "problem": 40, "user": "5081566ce4b0946d0443855b"}, {"code": "(fn myfun [n coll] (if (= (count coll) 1) coll (cons (first coll) (cons n (myfun n (rest coll))))))", "problem": 40, "user": "511937eee4b055cfb310d495"}, {"code": "(fn inpose [v coll]\n  (butlast (apply concat\n  (loop [acc []\n         coll coll]\n    (if (empty? coll)\n      acc\n      (recur (conj acc [(first coll) v]) (rest coll)))))))", "problem": 40, "user": "51195e77e4b055cfb310d499"}, {"code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "51181009e4b0e0897831a60f"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "50bfb5fbe4b05ae8c1cbbd9a"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "50742549e4b054001656accf"}, {"code": "(fn [e s]\n  (reduce #(if (not (seq? %1))\n          \t(list %1 e %2)\n            (concat %1 (list e %2))) s))", "problem": 40, "user": "50589113e4b06522596eba7f"}, {"code": "(fn [sep coll]\n        ( reduce\n            (fn [c  val]\n                (if (empty? c)\n                        (conj c val)\n                        (conj c sep val))) [] coll ))", "problem": 40, "user": "5018ed15e4b011a2e0bf6412"}, {"code": "(fn [ch args] (conj (vec (interleave args (repeat (dec(count args)) ch))) (last args)))", "problem": 40, "user": "5115cf87e4b0ce5098ee73c3"}, {"code": "(fn my-interpose\n  ([sep xs]\n     (my-interpose sep xs '()))\n  ([sep xs output]\n     (if (empty? xs)\n       (reverse (rest output))\n       (recur sep (rest xs) (conj output (first xs) sep)))))", "problem": 40, "user": "511720eae4b0063b4e3e16da"}, {"code": "(fn [char xs]\n  (butlast (flatten (map #(list % char) xs))))", "problem": 40, "user": "4fed24a5e4b0681fd128dcaf"}, {"code": "(fn my-interpose [sep s]\n  (if (<= (count s) 1) s\n    (concat [(first s) sep] (my-interpose sep (rest s)))))", "problem": 40, "user": "5119f3d5e4b06c8af0111818"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "4ecc1d85535d23f0362276f8"}, {"code": "(fn [sym coll]\n  (drop-last (interleave coll (repeat sym))))", "problem": 40, "user": "511060fae4b04c71fce993f1"}, {"code": "(fn [x [fs & rs]]\n  (reduce #(conj %1 x %2) [fs] rs))", "problem": 40, "user": "511c91ace4b00c2a1fa7ff7a"}, {"code": "#(drop-last (mapcat vector %2 (repeat %1)))", "problem": 40, "user": "4f8c813de4b02e764a0a519f"}, {"code": "(fn intp [sep sq]\n  (cond (empty? (rest sq)) sq\n   :else (cons (first sq) (cons sep (intp sep (rest sq))))\n  )\n )", "problem": 40, "user": "511cca27e4b00c2a1fa7ff7d"}, {"code": "(fn [a b] (into [] (rest (interleave (take (.size b) (repeat a)) b))))", "problem": 40, "user": "510a6bece4b06956752d35af"}, {"code": "(fn [s xs] (butlast (interleave xs (repeat s))))", "problem": 40, "user": "4e50ad74535dc968683fc4ec"}, {"code": "(fn [x coll]\n  (butlast (interleave coll (repeat x))))", "problem": 40, "user": "511623cbe4b0d4f670fd2fe1"}, {"code": "(fn [sep coll]\n  (drop-last (interleave coll (repeat sep))))", "problem": 40, "user": "4f702dcae4b07046d9f4eff4"}, {"code": "#(drop-last 1 (flatten (map (fn [x] [x %1] ) %2)))", "problem": 40, "user": "511a98d7e4b0c87c59c96707"}, {"code": "(fn [x y]\n  ((fn i2 [x1 y1 z1] \n    (if (= 1 (count y1)) (conj z1 (first y1))\n          (i2 x1 (rest y1) (conj z1 (first y1) x1))\n  )) x y []))", "problem": 40, "user": "5099283ce4b0cae2931060af"}, {"code": "(fn\n  [x xs]\n  (rest (reduce #(conj % x %2) [] xs)))", "problem": 40, "user": "4fca4c37e4b0ee37620e184f"}, {"code": "#(drop-last (interleave %2 (repeat %)))", "problem": 40, "user": "511f88eee4b085952a83535f"}, {"code": "#(butlast (mapcat list %2 (repeat %1)))", "problem": 40, "user": "511c44fde4b00c2a1fa7ff77"}, {"code": "(fn [s c]\n          (butlast (reverse \n           (reduce #(conj %1 %2 s) '() c))))", "problem": 40, "user": "511b810ce4b07ab9ec456182"}, {"code": "(fn [s c] (drop 1 (interleave (repeat s) c)))", "problem": 40, "user": "5100d7dbe4b04f1d96d946df"}, {"code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "50c95c4fe4b0bed41a12298f"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "50f9739ce4b0e7c80cb15a4d"}, {"code": "#(butlast (mapcat list %2 (repeat %)))", "problem": 40, "user": "511ac026e4b0c87c59c9670e"}, {"code": "(fn [x c] (butlast (mapcat #(list % x) c)))", "problem": 40, "user": "511ac2ede4b0c87c59c9670f"}, {"code": "(fn [s x]\n  (loop [r (vector (first x)) x (rest x)]\n    (if (nil? (first x))\n      r\n      (recur (concat r (vector s) (vector (first x))) (rest x)))))", "problem": 40, "user": "5123ac8ee4b061b4c6f0e0b1"}, {"code": "(fn [sep xs]\n      (rest (mapcat #(vector sep %1) xs)))", "problem": 40, "user": "510acd6ee4b078ea719210f4"}, {"code": "(fn inter [val xs] (if (= (count xs) 1)\n                         xs\n                         (cons (first xs) (cons val (inter val (rest xs))))))", "problem": 40, "user": "4e9a1512535dbda64a6f6b6e"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "512474ede4b02c3f2a072cce"}, {"code": "(fn [a b] (drop-last (#(mapcat vector %2 (repeat %1)) a b)))", "problem": 40, "user": "51197750e4b057cba170bc99"}, {"code": "(fn [x col]\n  (cons (first col) (apply concat (map #(list x %1) (rest col)))))", "problem": 40, "user": "50c7431ae4b00bb60fe0c531"}, {"code": "(fn [sep s] (rest (mapcat #(list sep %) s)))", "problem": 40, "user": "5125d963e4b05d10e3e395fe"}, {"code": "(fn [x l] (when-let [s l] (flatten (reduce #(concat (list %1 x %2)) l))))", "problem": 40, "user": "50e54fe4e4b049a9877538a0"}, {"code": "(fn [x l]\n  (rest (mapcat #(list x %) l)))", "problem": 40, "user": "4fbbcf0ce4b081705acca2ee"}, {"code": "(fn f [x s]\n  (if (< (count s) 2)\n    s\n    (concat [(first s) x] (f x (rest s)))))", "problem": 40, "user": "51256b40e4b05d10e3e395f8"}, {"code": "(fn [y xs] (rest (mapcat list (repeat y) xs)))", "problem": 40, "user": "51281b25e4b03a34742b4304"}, {"code": "#(conj (mapcat (fn [x] [%1 x]) (rest %2)) (first %2))", "problem": 40, "user": "51284226e4b03a34742b4308"}, {"code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "problem": 40, "user": "5127ca90e4b03a34742b42ff"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "5127e504e4b03a34742b4302"}, {"code": "(fn [sep col]\n  (loop [x col acc nil]\n    (if (next x)\n      (recur (rest x) (concat acc (list (first x) sep)))\n       (concat acc (list (first x))))))", "problem": 40, "user": "511618b1e4b0d4f670fd2fdf"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "5125745ae4b05d10e3e395f9"}, {"code": "(fn [s coll] (next (mapcat (partial list s) coll)))", "problem": 40, "user": "5125834ae4b05d10e3e395fa"}, {"code": "#(loop [x %2 y []] \n   (if-not (= 1 (count x))\n     (recur (rest x) (conj y (first x) %1))\n     (conj y (first x))))", "problem": 40, "user": "5105ed16e4b01150e115ebe2"}, {"code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "5126dbabe4b083bb8f88cf0e"}, {"code": "(fn[sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "5121cccee4b05ae5a5823c12"}, {"code": "#(butlast (interleave %2 (repeat %1)) )", "problem": 40, "user": "4dada426c9a9d6ed2a99dc57"}, {"code": "#(loop [coll %2 sep %1 x []]\n       (if (empty? coll)\n         (drop-last x)\n         (recur (rest coll) sep (concat x [(first coll)] [sep])\n                )))", "problem": 40, "user": "4e028764535d04ed9115e790"}, {"code": "(fn interp [glue s]\n  (if (= (count s) 2)\n    [(first s) glue (second s)]\n    (into [(first s) glue] (interp glue (rest s)))))", "problem": 40, "user": "512b9e59e4b04d059cf1fd17"}, {"code": "(fn i [x y]\n  (if (= (count y) 1)\n    y\n  \t(list* (first y) x (i x (rest y)) ))\n)", "problem": 40, "user": "4e2164ff535d04ed9115e815"}, {"code": "(fn [a [x & xs]]\n  (loop [ret [x] [x & xs] xs]\n    (if x\n      (recur (conj (conj ret a) x) xs)\n      ret)))", "problem": 40, "user": "4e74e119535d7a570dd295bc"}, {"code": "(fn i [x l] (if (empty? (rest l)) l (cons (first l) (cons x (i x (rest l))))))", "problem": 40, "user": "502d3912e4b0d96a44ab2030"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "50729f67e4b0e3170b5a868e"}, {"code": "#(loop [el %1 li %2 result []]\n   (if (= 1 (count li))\n     (into result li)\n     (recur el (rest li) (conj result (first li) el))))", "problem": 40, "user": "512d3304e4b040332b905b2d"}, {"code": "(fn [sep xs]\n  (conj (into [] (interleave xs (repeat (- (count xs) 1) sep)))\n        (peek xs)))", "problem": 40, "user": "510fd798e4b04c71fce993dc"}, {"code": "(fn weaver [delimiter fabric]\n\t(cons (first fabric) (flatten (map #(list delimiter %) (rest fabric))))\n)", "problem": 40, "user": "502be4fae4b08f5602f232eb"}, {"code": "(fn f [n s] (if (= 1 (count s)) s (conj  (f n (rest s)) n (first s) )))", "problem": 40, "user": "4ff2ff7ce4b0678c553fc342"}, {"code": "#(drop-last (mapcat (partial conj (list %)) %2))", "problem": 40, "user": "510967aae4b07c05fdf6dc0f"}, {"code": "#(butlast (interleave %2 (repeat (count %2) %)))", "problem": 40, "user": "4f525fdce4b03ad3f0c10d37"}, {"code": "(fn [sep xs] (let [ys (flatten (map (fn [x] [x sep]) xs))]\n               (take (- (count ys) 1) ys)))", "problem": 40, "user": "51307b84e4b08c712d3fae39"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "512f06c5e4b0762be4c7aad7"}, {"code": "(fn [sep col]\n  (drop-last (mapcat vector col (repeat sep))))", "problem": 40, "user": "4f724d40e4b07046d9f4f024"}, {"code": "(fn [x s]\n  (cons (first s) (reduce (fn [r y] (conj r x y)) [] (rest s))))", "problem": 40, "user": "512eb723e4b0b740abc5982b"}, {"code": "#(butlast (mapcat (fn [x] [x %]) %2))", "problem": 40, "user": "511d11d7e4b022853b0e079f"}, {"code": "#(rest (mapcat (comp seq list) (repeat %1) %2))", "problem": 40, "user": "50d3ec8be4b030b634c368bb"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4e55b3dc535d8a8b8723a27f"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "51057b2be4b06d28cacc92e8"}, {"code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "5132c6f0e4b021281ec7b6d3"}, {"code": "(fn [s xs]\n\t  (cons (first xs)\n            (mapcat\n\t\t\t    #(list s %)\n\t\t\t    (rest xs))))", "problem": 40, "user": "50fa01bce4b07934dda8b0ba"}, {"code": "(fn [x coll]\n  (butlast\n   (interleave coll (repeat (count coll) x))))", "problem": 40, "user": "511b9017e4b00c2a1fa7ff6b"}, {"code": "(fn join [join-ele col]\n  (if (seq (rest col))\n  \t(cons (first col)    \n          (cons join-ele (join join-ele (rest col)))) \n    [(first col)]))", "problem": 40, "user": "512b7a05e4b04d059cf1fd14"}, {"code": "(fn f [v s] (butlast (reduce #(conj %1 %2 v) [] s)))", "problem": 40, "user": "5117c31ee4b0e0897831a60c"}, {"code": "(fn [e l]\n  (loop [xs l acc ()]\n    (cond\n     (= (count xs) 0) acc\n     (= (count xs) 1) (concat acc xs)\n     :else (recur (rest xs) (concat acc [(first xs) e])))))", "problem": 40, "user": "5128554ee4b03a34742b430a"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "510dc185e4b078ea71921146"}, {"code": "(fn solve [el xs] (butlast (mapcat (fn [x] [x el]) xs )))", "problem": 40, "user": "511a0374e4b06c8af011181a"}, {"code": "#(loop [lst (rest %2) ret [(first %2)]]\n   (if (empty? lst)\n     ret\n     (recur (rest lst) (conj ret %1 (first lst)))))", "problem": 40, "user": "51000111e4b00d7ad4cab15e"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "50366589e4b0fbe0a74d26c3"}, {"code": "(fn ip\n  [x sq]\n  (if (= 1 (count sq))\n    sq\n    (conj (ip x (rest sq)) x (first sq))))", "problem": 40, "user": "504e12ade4b078edc5f593b7"}, {"code": "(fn [delimiter, xs]\n  (loop [coll xs\n         result []]\n    (if (empty? (rest coll)) (conj result (first coll))\n    \t(recur (rest coll) (conj result (first coll) delimiter))\n      )\n    )\n  )", "problem": 40, "user": "512b8728e4b04d059cf1fd16"}, {"code": "(comp rest #(reduce concat %1) (fn [x y] (map #(cons x [%1]) y)))", "problem": 40, "user": "504ffa26e4b0a02f9cffdead"}, {"code": "#(vec (butlast (mapcat (fn [x] [x %1]) %2)))", "problem": 40, "user": "4de52c87535d08e6dec9fdf0"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "51364acfe4b04ac1f358dd51"}, {"code": "(fn f [x xs]\n  (if (= (count xs) 1)\n    xs\n    (conj (f x (rest xs)) x (first xs))))", "problem": 40, "user": "504ffb8fe4b0a02f9cffdeae"}, {"code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "51367626e4b04ac1f358dd53"}, {"code": "#(butlast (flatten (for [i %2] (list i %1))))", "problem": 40, "user": "512eb1e7e4b0b740abc5982a"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "4e823f41535db62dc21a62c8"}, {"code": "(fn [sep coll]\n  (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "4ea5ba92535d7eef308072d9"}, {"code": "#(rest (mapcat list (repeat %1) %2))", "problem": 40, "user": "5137c3b0e4b0509a8b470482"}, {"code": "(fn [v, xs]\n  (butlast (reduce concat (map #(list % v) xs)))\n)", "problem": 40, "user": "51365524e4b04ac1f358dd52"}, {"code": "(fn [n coll]\n  (drop-last (reduce #(conj % %2 n) [] coll)))", "problem": 40, "user": "4fc8769be4b0ee37620e1833"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "4f55f4b1e4b0a7574ea7180d"}, {"code": "#(butlast (mapcat (fn [a] (list a %)) %2))", "problem": 40, "user": "51352899e4b082aeb3a3f03b"}, {"code": "(fn [i xs]\n  (reduce (fn [acc x] (if x (concat acc [i x]) acc)) [(first xs)] (rest xs)))", "problem": 40, "user": "511f9625e4b085952a835362"}, {"code": "(fn [x  y] (butlast (mapcat #(list %1 x) y)))", "problem": 40, "user": "50b78ac9e4b0cf3e51c3046a"}, {"code": "(fn [c s]\n  (butlast (interleave s (repeat (count s) c))))", "problem": 40, "user": "5139ff96e4b067e25a345ec1"}, {"code": "(fn [sep a] (rest (mapcat #(list sep %) a) ))", "problem": 40, "user": "5124619ae4b02c3f2a072ccd"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "50e3fe8fe4b0463d32072488"}, {"code": "(fn [val coll] (cons (first coll) (interleave (repeat val) (rest coll))))", "problem": 40, "user": "513a4babe4b067e25a345eca"}, {"code": "(comp drop-last flatten (fn [delim xs] (map #(list % delim) xs)))", "problem": 40, "user": "513d121fe4b0e544971636a2"}, {"code": "#(flatten (list (for[e (butlast %2)](list e %)) (last %2)))", "problem": 40, "user": "5138d08be4b0a5db03d727db"}, {"code": "(fn ! [y, x] (if(= (count x) 1) x (cons (first x) (cons y (! y (rest x))))   ))", "problem": 40, "user": "5139c00ee4b067e25a345ebc"}, {"code": "(fn ips [sep col]\n    (if (< (count col) 2)\n        col\n        (concat [(first col) sep] (ips sep (rest col)))))", "problem": 40, "user": "513a2f23e4b067e25a345ec6"}, {"code": "(fn [x coll1] (loop [coll2 []] \n                (if (= (count coll1) (count coll2)) \n                  (into [] (drop-last (interleave coll1 coll2))) \n                  (recur (conj coll2 x)))))", "problem": 40, "user": "513ca934e4b0b86ece9f3228"}, {"code": "(fn [sep coll] (drop-last (interleave coll (cycle [sep]))))", "problem": 40, "user": "513f0565e4b051389b345b3b"}, {"code": "(fn [separator input]\n\t\t(let [seps (repeat (count input) separator)]\n\t\t\t(drop-last (interleave input seps))))", "problem": 40, "user": "51205867e4b0e88f5a20c40f"}, {"code": "(fn test [x y] \n  (cons (first y) (mapcat #(cons x [%]) (rest y))))", "problem": 40, "user": "513b77f3e4b00f740c76c403"}, {"code": "(fn [joiner liist] (pop (into [] (flatten (map (fn [x] [x joiner]  ) liist)))))", "problem": 40, "user": "513f400ae4b051389b345b3f"}, {"code": "#(rest (mapcat list (repeat %) %2))", "problem": 40, "user": "513dcc1ce4b0825f97f7f964"}, {"code": "(fn myinterpose [n xs]\n  (rest (interleave (repeat n) xs)))", "problem": 40, "user": "4fb804f7e4b081705acca2d6"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "513edd13e4b051389b345b39"}, {"code": "(fn [x s] (drop-last (apply concat (map (fn [y] [y x]) s))))", "problem": 40, "user": "513bb7a6e4b04402f587b77d"}, {"code": "(fn [delim [l & ls]] (flatten [l (map #(vector delim %) ls)]))", "problem": 40, "user": "51411e3be4b05ca1a0b379f3"}, {"code": "#(butlast (interleave %2 (iterate identity %)))", "problem": 40, "user": "51424cc8e4b0b50abeb46b34"}, {"code": "(fn [x y] (butlast (flatten (map #(vector % x) y))))", "problem": 40, "user": "514282c8e4b0b50abeb46b38"}, {"code": "(fn [sep,seq]\n(conj (reduce (fn[acc,item]\n          \n           (conj (conj acc item) sep)\n           )\n          []\n          (butlast seq)\n \n  ) (last seq))\n)", "problem": 40, "user": "513f53c6e4b051389b345b40"}, {"code": "#(next (interleave (repeat %) %2))", "problem": 40, "user": "5141fafbe4b0b50abeb46b28"}, {"code": "(fn [sep col]\n  (drop-last (reduce (fn [ret this]\n     (conj ret (first this) (second this)))\n       [] (map (fn [e] [e sep]) col) )))", "problem": 40, "user": "513cb853e4b0b86ece9f322b"}, {"code": "(comp rest flatten (fn [s c] (map #(list s %) c)))\n;#(next (interleave (repeat %) %2))", "problem": 40, "user": "505b9084e4b032b709c81371"}, {"code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "512a8ef7e4b0ff5c4bc1f99e"}, {"code": "(fn [x col] (butlast (reduce #(conj % %2 x) [] col)))", "problem": 40, "user": "5145832be4b0e8879607340a"}, {"code": "(fn mi-interpose [v c]\n  (butlast\n   (mapcat (fn [x]\n   \t         (seq (list x v )))   \t\n           c)))", "problem": 40, "user": "5144e89be4b021a5ff8301f9"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "51430fb2e4b0c172af7558ce"}, {"code": "(fn [sep col]\n  (butlast (reduce #(conj %1 %2 sep) [] col)))", "problem": 40, "user": "506f2f58e4b09350ab4199fa"}, {"code": "(fn __\n      [inter coll]\n      (flatten (cons\n        [(first coll)]\n        (map\n          (fn [item] [inter item])\n          (rest coll)))\n      ))", "problem": 40, "user": "504e0136e4b078edc5f5938e"}, {"code": "(fn [separator coll] (drop-last (reduce concat (map (fn [x] [x separator]) coll))))", "problem": 40, "user": "514721c6e4b0d520409ed392"}, {"code": "#(take (dec (* 2(count %2))) (interleave %2 (replicate (count %2) %1)))", "problem": 40, "user": "5140c505e4b049dea086df40"}, {"code": "#(rest (apply concat (map list (repeat %1) %2)))", "problem": 40, "user": "5142ea50e4b0c172af7558ca"}, {"code": "(fn [a col] (reverse (rest (reduce #(conj %1 %2 a) () col))))", "problem": 40, "user": "514a2fa1e4b0829bd132edb5"}, {"code": "(fn [i s] (drop-last (flatten (map #(list %1 i) s) )))", "problem": 40, "user": "5142e808e4b0c172af7558c9"}, {"code": "(fn [sep coll] (drop-last (mapcat list coll (repeat sep))))", "problem": 40, "user": "513fb358e4b00f13ea1bd893"}, {"code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "problem": 40, "user": "4fb4303fe4b081705acca2ac"}, {"code": "(fn ipose [sep coll] (cond (empty? coll) [] (= 1 (count coll)) coll :else (concat [(first coll) sep] (ipose sep (rest coll)))))", "problem": 40, "user": "50723bbae4b0e3170b5a868b"}, {"code": "#(next (interleave (repeat %) %2))", "problem": 40, "user": "514d8084e4b019235f6c0588"}, {"code": "#(concat (mapcat list (butlast %2) (repeat %1)) [(last %2)])", "problem": 40, "user": "514457fbe4b0b4fb4ace5f43"}, {"code": "#(next (interleave (repeat %1) %2))", "problem": 40, "user": "514d2c7ee4b019235f6c0582"}, {"code": "#(pop (into [] (flatten (for [item %2] (conj [] item %1)))))", "problem": 40, "user": "514cfa27e4b019235f6c057d"}, {"code": "(fn i [e x]\n  (if (empty? (rest x)) x (cons (first x) (cons e (i e (rest x))))))", "problem": 40, "user": "5110b8bae4b04c71fce993f4"}, {"code": "#(drop-last (mapcat vector %2 (repeat %1)))", "problem": 40, "user": "4e58ef07535d8a8b8723a299"}, {"code": "(fn [s l] (butlast (mapcat #(list % s) l )))", "problem": 40, "user": "4f5d0f25e4b0030a34fb2b33"}, {"code": "(fn [sep c]\n  (drop-last (mapcat #(list % sep) c)))", "problem": 40, "user": "51502056e4b098b221effc25"}, {"code": "(fn my-interpose \n  [x c]\n  (let [s1 (seq c)\n        s2 (take (count c) (repeat x))]\n    (butlast (interleave s1 s2))))", "problem": 40, "user": "51508efce4b0c51f0585bbb4"}, {"code": "#(drop 1 (mapcat list (repeat %1) %2))", "problem": 40, "user": "514d398ee4b019235f6c0583"}, {"code": "(fn [sep coll]\n  (drop-last\n   (mapcat #(conj [] % sep) coll)))", "problem": 40, "user": "514f8926e4b0b449e54b8dfa"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "4f50d933e4b03ad3f0c10d11"}, {"code": "#(rest (interleave (replicate (count %2) %) %2))", "problem": 40, "user": "5151a6bee4b03e678e393ad3"}, {"code": "(fn [x y]\n\t(loop [acc (take 1 y) x x y y more (next y)]\n\t\t(if more\n\t\t\t(recur \n\t\t\t\t(concat (concat acc [x]) (take 1 more))\n\t\t\t\tx\n\t\t\t\t(rest more)\n\t\t\t\t(next more)\n\t\t\t)\n\t\t\tacc\n\t\t)\n\t)\n)", "problem": 40, "user": "5151aa14e4b03e678e393ad4"}, {"code": "( fn [x coll] \n  (let [limit (- (count coll) 1)]\n  (reverse (conj (reverse (interleave coll (take limit (cycle [x])))) (last coll) ))))", "problem": 40, "user": "50fec710e4b0219f3bc8bd97"}, {"code": "(fn [sep sq] (reduce (fn [sq sep1] (conj sq sep sep1)) [(first sq)] (rest sq)))", "problem": 40, "user": "513bafa4e4b04402f587b77c"}, {"code": "#(loop [btw %1 s (next %2) coll [(first %2)]]\n   (if s\n     (recur btw (next s) (conj coll btw (first s)))\n     coll))", "problem": 40, "user": "51460e4ce4b04ef915e37314"}, {"code": "#(->[%%%%](interleave    %2)next)", "problem": 40, "user": "51037468e4b00c483ae17702"}, {"code": "(fn [sep coll ] (drop 1 (interleave (repeat sep ) coll)))", "problem": 40, "user": "5016ac54e4b052339a490e7b"}, {"code": "(fn [el s]\n  (rest\n   (interleave\n    (repeat (inc (count s)) el)\n    s)))", "problem": 40, "user": "5133e51ae4b0d7a043de8cf6"}, {"code": "#(take (- (* (count %2) 2) 1) (mapcat (fn [x] (list x %1)) %2))", "problem": 40, "user": "514def61e4b019235f6c0591"}, {"code": "#(next(mapcat (fn[x][% x]) %2))", "problem": 40, "user": "4f296a80e4b0d6649770a02a"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "51533ecde4b0252ac4b16619"}, {"code": "(fn [v lst] (reduce #(concat %1 [v] [%2]) (list (first lst)) ( rest lst)) )", "problem": 40, "user": "51558136e4b06c5f6a1490a8"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "514afd1be4b0bd81940b86c6"}, {"code": "#(pop (vec (mapcat (fn [x] (list x %)) %2)))", "problem": 40, "user": "514f0723e4b019235f6c0599"}, {"code": "(fn ip [vl sq]\n  (butlast (mapcat #(list % vl) sq)))", "problem": 40, "user": "515737f0e4b0b0b4b87062d0"}, {"code": "(fn __ [itm aseq] \n  (reverse (rest\n  (reduce \n     (fn [coll value] (conj coll value itm ) )\n       '() aseq )\n   ))\n)", "problem": 40, "user": "5135a74ae4b04ac1f358dd46"}, {"code": "(fn [i coll]\n  (reduce #(conj %1 i %2) [(first coll)] (rest coll)))", "problem": 40, "user": "5150a7d7e4b03e678e393abb"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "514b66f4e4b0bd81940b86cb"}, {"code": "(fn [n l1] (loop [r [] l l1]\n             (if (= 1 (count l))\n               (conj r (first l))\n               (recur (conj r (first l) n) (next l)))))", "problem": 40, "user": "5152020de4b03e678e393ae7"}, {"code": "(fn [i x]\n   (reduce #(conj %1 i %2) [(first x)] (rest x)))", "problem": 40, "user": "51547920e4b084ca81ee2e1c"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "514a7e71e4b00c7db5067429"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "51193314e4b055cfb310d492"}, {"code": "(fn interp [val col]\n  (cond\n   (empty? (rest col)) (list (first col))\n   :else (cons (first col) (cons val (interp val (rest col))))))", "problem": 40, "user": "51427a8be4b0b50abeb46b37"}, {"code": "(fn [x xs] (rest (interleave (repeat (count xs) x) xs)))", "problem": 40, "user": "510c123be4b078ea7192110e"}, {"code": "(fn inter [v col]\n     (if (= 1 (count col)) (cons (first col) nil)\n         (cons (first col) (cons v (inter v (rest col))))))", "problem": 40, "user": "504e71cbe4b0f6ff3350c4b3"}, {"code": "#(butlast (mapcat vector %2 (repeat %)))", "problem": 40, "user": "515a6151e4b0394f658fe241"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "50ef96a1e4b0bdaecbb47d9d"}, {"code": "(fn\n  [el s]\n  (loop [res [],\n         s s]\n    (if (seq s)\n      (recur (conj res (first s) el)\n             (rest s))\n      (butlast res))))", "problem": 40, "user": "4e8ce277535d65386fec212f"}, {"code": "(fn [sep vc]  \n  (if (empty? vc)\n    vc\n    (reduce #(conj %1 sep %2) [(first vc)] (rest vc))))", "problem": 40, "user": "515828b8e4b0a069fd272c71"}, {"code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "problem": 40, "user": "514e4ae4e4b019235f6c0594"}, {"code": "#(next (interleave (repeat %) %2))", "problem": 40, "user": "51584459e4b0a069fd272c74"}, {"code": "(fn\n          [a b]\n          (letfn\n            [(step\n               [a b]\n               (if b\n                 (cons\n                   a\n                   (cons\n                     (first b)\n                     (step a (next b))))))]\n            (drop 1 (step a b))))", "problem": 40, "user": "514d7e29e4b019235f6c0587"}, {"code": "(fn [x c] \n  (rest (reduce (fn [acc e] (conj (conj acc  x) e)) (empty c) c)))", "problem": 40, "user": "515efd01e4b02c55805ea238"}, {"code": "(fn interposeSeq [i, s]\n  (butlast (mapcat list s (repeat i)))\n  )", "problem": 40, "user": "513b43ede4b067e25a345ed3"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "515ead6be4b049add99a053e"}, {"code": "(fn [v xs] (drop-last (interleave xs (repeat v))))", "problem": 40, "user": "515cf9b5e4b00901442db1d4"}, {"code": "(fn [n lst]\n  (\n   (fn f [lst acc]\n    (cond\n     (empty? lst) (reverse acc)\n     (empty? (rest lst)) (f (rest lst) (conj acc (first lst)))\n     :else (f (rest lst) (conj acc (first lst) n))\n     )\n    )\n  lst '()))", "problem": 40, "user": "515f8a0de4b0e2be8aa20bce"}, {"code": "(fn [i xs]\n   (cons (first xs) (mapcat list (repeat i) (rest xs))))", "problem": 40, "user": "50f48298e4b004d364930527"}, {"code": "(fn ip [v l]\n  (if (= 1 (count l))\n    l\n    (into [(first l) v] (ip v (rest l)))))", "problem": 40, "user": "515ffbfbe4b0e2be8aa20bdd"}, {"code": "#(rest (mapcat (partial list %) %2))", "problem": 40, "user": "50fe9d60e4b03cd852b4e84f"}, {"code": "(fn [separ l](cons (first l) \n\t\t\t   (loop [xs (rest l) acc []]\n\t\t\t\t (if  (empty? xs) \n\t\t\t\t     acc\n\t\t\t\t   (recur (rest xs) (conj acc separ (first xs)))))))", "problem": 40, "user": "4eeccfc0535d93acb0a668b5"}, {"code": "(fn [n items] (drop-last\n                (reduce concat\n                  (map #(list %1 %2)\n                       items\n                       (repeat n)))))", "problem": 40, "user": "504ee511e4b0e7ad84dbc4a4"}, {"code": "#(drop 1 (mapcat (fn [a] (list % a)) %2))", "problem": 40, "user": "50705886e4b07bd6ad9b9f2a"}, {"code": "(fn [sep coll]\n  (concat\n    (take 1 coll)\n    (interleave (repeat sep) (rest coll))\n  )\n)", "problem": 40, "user": "51473a70e4b0d520409ed394"}, {"code": "#(drop-last (interleave %2 (repeat %)))", "problem": 40, "user": "515e8ce2e4b049add99a053d"}, {"code": "(fn f [v coll]\n    (case (count coll)\n      0 []\n      1 coll\n      (cons (first coll) (cons v (f v (rest coll))))))", "problem": 40, "user": "515ef58be4b02c55805ea237"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4f437751e4b0d7d3c9f3fd20"}, {"code": "(fn [arb seqs] (->> seqs (reduce (fn [x y] (conj x y arb)) []) pop))", "problem": 40, "user": "5162757ee4b03cfa3774b3fe"}, {"code": "(fn [sep coll] \n  (reverse (reduce #(if \n                      (empty? %) \n                      (cons %2 %) \n                      (cons %2 (cons sep %)))\n                   () \n                   coll)))", "problem": 40, "user": "51592b81e4b0394f658fe22c"}, {"code": "#(drop-last (mapcat vector %2 (repeat %1)))", "problem": 40, "user": "51170b49e4b0063b4e3e16d9"}, {"code": "#(rest (flatten(for [x %2 y (vector %1)] (vector y x))))", "problem": 40, "user": "51623490e4b009fba0926e42"}, {"code": "(fn intp [v sq]\n  (drop-last (mapcat vector sq (repeat v))))", "problem": 40, "user": "515f2a85e4b0595cf3d1da44"}, {"code": "(fn [value liste]\n  (next (mapcat #(list value %) liste)))", "problem": 40, "user": "5141bc82e4b02fd87f5064c5"}, {"code": "#(drop-last (mapcat list %2 (cycle [%1])))", "problem": 40, "user": "5166e80de4b060c690c1f4c5"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "4fdbc075e4b05e33b9224f61"}, {"code": "(fn ipose [s [x & xs]] (loop [x [x] s s xs xs] (if (seq xs) (recur (conj x s (first xs)) s (rest xs)) x)))", "problem": 40, "user": "50fb46e6e4b0d10d794c19e5"}, {"code": "(fn [ch s] (-> (map vector s (repeat (count s) ch)) flatten reverse rest reverse))", "problem": 40, "user": "515e38ace4b049add99a0538"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "51670895e4b013fc800656c1"}, {"code": "(fn [sep s]\n    (if (empty? s)\n      s\n      (loop [se (next s)\n             res [(first s)]]\n        (if (empty? se)\n          res\n          (recur\n            (next se)\n            (conj res sep (first se)))))))", "problem": 40, "user": "5165a235e4b079ad97ec44ac"}, {"code": "(fn ipose [x y] \n\t(butlast (mapcat #(conj '() x %) y))\n)", "problem": 40, "user": "5113e492e4b0029845b11c58"}, {"code": "#(drop-last (mapcat vector %2 (repeat %)))", "problem": 40, "user": "51696bcde4b03f62cda68ce7"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "516b381be4b081287f204ea3"}, {"code": "#(rest (interleave (repeat (count %2) %1) %2))", "problem": 40, "user": "51631002e4b017b283c712c1"}, {"code": "(fn [x s] (butlast (apply concat (map #(vector %1 x) s))))", "problem": 40, "user": "516b8837e4b005fd0cdf85c1"}, {"code": "(fn [delim x]\n  (doall (drop 1 (interleave (repeat delim) x))))", "problem": 40, "user": "50b1d166e4b03ea880433554"}, {"code": "(fn [s l] (butlast (mapcat #(list % s) l)))", "problem": 40, "user": "515d6281e4b00901442db1dc"}, {"code": "(fn [v l]\n  (let [c (count l)\n        monvec (vec (repeat c v))\n        nb (dec (* c 2))]\n    (vec (take nb (interleave l monvec)))))", "problem": 40, "user": "5154fa3fe4b0179c5115f4e6"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "5150f87ae4b03e678e393ac7"}, {"code": "(fn [ x coll]\n  (drop-last ( mapcat vector coll ( repeat x ))))", "problem": 40, "user": "516d227fe4b06f078fab252d"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4ed90014535d10e5ff6f52fe"}, {"code": "(fn [v c] (reduce #(if (seq %) (concat % [v %2]) [%2]) [] c))", "problem": 40, "user": "511d6a01e4b022853b0e07a5"}, {"code": "(fn [x coll] \n  (next (interleave (repeat x) coll)))", "problem": 40, "user": "51696ee7e4b03f62cda68ce8"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "5143952fe4b0b4fb4ace5f38"}, {"code": "(fn [n vec]\n  (loop [[i & vec] vec\n         result nil]\n    (if (empty? vec)\n      (concat result [i])\n      (recur vec\n             (concat result [i n])))))", "problem": 40, "user": "516ff477e4b034fe8eaf70f3"}, {"code": "(fn x[v s] (lazy-seq  \n            (let [ss (seq s)] \n              \n                (cond (nil? (first (rest ss))) (list (first ss))\n                  :else\n                 \n                \t(cons \n                 \t\t(first ss) \n                     \t(cons v\n                         (x \n                        \tv \n                        \t(rest ss)\n                         )\n                        )\n                    )\n                  \n                 )\n                ) \n              \n            )\n  )", "problem": 40, "user": "4fb03cf4e4b081705acca262"}, {"code": "#(pop( reduce (fn [x y] (conj x y %1)) [] %2))", "problem": 40, "user": "516e2246e4b092a6408c5bc5"}, {"code": "#(rest (mapcat (fn \n                      [x]\n                      [% x]) %2))", "problem": 40, "user": "5153316ce4b0252ac4b16611"}, {"code": "(fn [n xs] (butlast (mapcat #(conj (vector %1) n) xs)))", "problem": 40, "user": "516ea313e4b06aac486e5b2c"}, {"code": "(fn f [n arr]\n  (loop [l arr result []]\n    (if (<= (count l) 1)\n      (conj result (last l))\n      (recur (rest l) (conj (conj result (first l)) n))\n  )))", "problem": 40, "user": "516bc02ce4b005fd0cdf85c5"}, {"code": "(fn [sep lst]\n  (take (dec (* 2 (count lst))) (interleave lst (repeat (count lst) sep))))", "problem": 40, "user": "516f06dce4b06aac486e5b39"}, {"code": "#(rest (reduce (fn [x y] (conj x %1 y)) [] %2))", "problem": 40, "user": "51652141e4b003cf19fdde48"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "5164867fe4b003cf19fdde3e"}, {"code": "(fn [e col]\n  (loop [result [] l col]\n    (cond (empty? l) result\n          (empty? (rest l)) (concat result [(first l)])\n          true\n          (recur (concat result [(first l) e]) (rest l))\n    )\n  )\n)", "problem": 40, "user": "4f7683dae4b0fbe0118ec56f"}, {"code": "(fn interposee [glue col]\n   (reverse\n   (loop [col col res '()]\n     (if (< (count col) 2)\n       (conj res (first col))\n       (recur (rest col) (conj res (first col) glue))))))", "problem": 40, "user": "51684318e4b03f62cda68cd6"}, {"code": "#(rest (apply concat (for [i %2] [% i])))", "problem": 40, "user": "51740b65e4b0d277d717bc67"}, {"code": "#(flatten (reduce (fn [l r] [l %1 r]) %2))", "problem": 40, "user": "5134973ce4b0230e9f713b42"}, {"code": "(fn inpose [x coll]\n\t(drop-last (interleave coll (repeat (count coll) x))))", "problem": 40, "user": "51701a9ce4b034fe8eaf70f5"}, {"code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "515ebde3e4b01e5d11ccd0a8"}, {"code": "(fn interpose' [value coll]\n  (reduce (fn [acc el]\n            (into acc (vector value el))) (vector (first coll)) (rest coll)))", "problem": 40, "user": "51736d4de4b00f4b6b0490d7"}, {"code": "(fn [x lst] (drop-last (interleave lst (repeat x))))", "problem": 40, "user": "516dc88ae4b046df6fbb76a1"}, {"code": "(fn [v s] (reverse (rest (reduce (fn [a x] (conj (conj a x) v)) () s))))", "problem": 40, "user": "5175616ae4b0dea9bbfba576"}, {"code": "(fn p40 [n coll]\n  (drop-last (vec (interleave coll (repeat n))))\n)", "problem": 40, "user": "51750fc5e4b07031762f2ee6"}, {"code": "(fn [i xs]\n  (butlast (interleave xs (repeat i))))", "problem": 40, "user": "5173726be4b098276e74652c"}, {"code": "#(rest (mapcat (partial conj [] %1) %2))", "problem": 40, "user": "5079fd71e4b08327cd804a66"}, {"code": "(fn [x xs] (drop-last (interleave xs (repeat x))))", "problem": 40, "user": "4f9ff06ce4b0dcca54ed6d41"}, {"code": "(fn [a b]\n  (loop [out '() a a b b]\n    (if (= (count b) 1)\n      (reverse (conj out (first b)))\n      (recur (conj out (first b) a) a (rest b)))))", "problem": 40, "user": "51757af0e4b085adf681d873"}, {"code": "(fn [v [i & rest]] (cons i (mapcat #(list v %) rest)))", "problem": 40, "user": "5170ea06e4b0d70c8bbbf235"}, {"code": "(fn [sep coll]\n  (butlast (mapcat #(list % sep) coll)))", "problem": 40, "user": "51778122e4b085adf681d89d"}, {"code": "(fn [d r]\n  ((fn iter [l r d]\n    (if (= 1 (count r))\n      (conj l (first r))\n      (iter (conj l (first r) d) (rest r) d))) [] r d))", "problem": 40, "user": "517531c6e4b07031762f2eea"}, {"code": "(fn [sp xs]\n  (drop-last (interleave xs (repeat (count xs) sp))))", "problem": 40, "user": "51780f88e4b03d69594194c9"}, {"code": "(fn interpose-seq [sep coll] \n  (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "517a025ce4b01aacecbecbe6"}, {"code": "#(rest (mapcat list (repeat %) %2))", "problem": 40, "user": "517adc6ce4b0925c997201c4"}, {"code": "(letfn [(intp [e s]\n              (let [f (first s) r (next s)]\n              (cond (empty? s) nil\n              \t\t(empty? r) (cons f nil)\n                    :else (lazy-seq (cons f (cons e (intp e r))))\n              ))\n              )] intp)", "problem": 40, "user": "51729002e4b044b2ef48a850"}, {"code": "(fn [item xs] (butlast (mapcat list xs (repeat item))))", "problem": 40, "user": "508a2c2fe4b016a2107004a1"}, {"code": "(fn interp [x xs]\n    (lazy-seq\n        (let [s (seq xs)]\n            (when s\n                (if (> (count s) 1)\n                    (cons\n                        (first s)\n                        (cons x (interp x (rest s))))\n                    (list (first s)))))))", "problem": 40, "user": "517bf28de4b07ef0e56148d5"}, {"code": "(fn [i l] (butlast (mapcat #(list %1 i) l)))", "problem": 40, "user": "5163b06be4b055933a9ca030"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "5093a80be4b097f48cc38583"}, {"code": "#(drop-last (flatten (for [x (list %1) y %2] [y x])))", "problem": 40, "user": "516eb196e4b06aac486e5b2e"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "51789599e4b03d69594194d6"}, {"code": "(fn [d xs] (reduce #(conj %1 d %2) [(first xs)] (rest xs)))", "problem": 40, "user": "51780bfce4b0f89a8f53839c"}, {"code": "(fn [c s]\n  (rest (interleave (repeat (count s) c) s)))", "problem": 40, "user": "4eec82fe535d93acb0a668ae"}, {"code": "(fn number-40 \n  ([sep coll]\n    (cond \n      (empty? (rest coll)) coll\n      :else\n        (concat \n          (list (first coll) sep)\n          (number-40 sep (rest coll))))))", "problem": 40, "user": "51803613e4b04f45bde7d8fd"}, {"code": "(fn [b as]\n  (reduce #(if (empty? %)\n              (conj % %2)\n              (conj (conj % b) %2)) [] as))", "problem": 40, "user": "516d2a46e4b06f078fab252f"}, {"code": "(fn \n  [x coll]\n  (butlast (interleave coll (repeat x))))", "problem": 40, "user": "51804bcbe4b04f45bde7d901"}, {"code": "(fn [a b] (vec (butlast (interleave b (repeat (count b) a) ))))", "problem": 40, "user": "515ff4b9e4b0e2be8aa20bd9"}, {"code": "#(vec (drop-last (mapcat list %2 (repeat %1))))", "problem": 40, "user": "4ed286d4535d44c135fd68d7"}, {"code": "(fn [x xs] (if (empty? xs) '() (conj (mapcat #(list x %1) (rest xs)) (first xs))))", "problem": 40, "user": "515fb48fe4b0e2be8aa20bd5"}, {"code": "#(drop-last (interleave  %2 (repeat %1)))", "problem": 40, "user": "517945dce4b0684c1c981a43"}, {"code": "#(butlast (mapcat (fn [a] (list a %1)) %2))", "problem": 40, "user": "51383346e4b0a5db03d727d4"}, {"code": "#(rest (mapcat (partial vector %1) %2))", "problem": 40, "user": "51721aefe4b0d70c8bbbf24a"}, {"code": "#(drop 1(interleave (repeat %) %2))\n;; Maybe I should stop copying clojure.core.", "problem": 40, "user": "515f0a39e4b02c55805ea23a"}, {"code": "#(drop-last (interleave %2 (cycle [%])))", "problem": 40, "user": "4e6a3b79535d8ccf87e9feb3"}, {"code": "(fn [n col]\n  (into [(first col)] (mapcat #(list n %) (rest col))))", "problem": 40, "user": "4f3ca5a6e4b0e243712b1f53"}, {"code": "#(concat (interleave %2 (repeat (- (count %2) 1) %1)) (list (last %2)))", "problem": 40, "user": "517e6671e4b0329b27fa9f56"}, {"code": "#(drop-last (mapcat vector %2 (repeat %)))", "problem": 40, "user": "4faa5735e4b081705acca1ee"}, {"code": "(fn [v lst] (rest ( interleave (repeat (count lst) v) lst)))", "problem": 40, "user": "516733fce4b079759a74a5e9"}, {"code": "(fn interpoze [sep lst]\n  (let [v (vec (apply concat (map #(vector % sep) lst)))]\n    (subvec v 0 (dec (count v)))))", "problem": 40, "user": "51750cd4e4b07031762f2ee5"}, {"code": "(fn [a b]\n  (rest\n    (reduce #(conj % a %2) [] b)\n  ))", "problem": 40, "user": "5185e17ee4b0da5a5be3bac5"}, {"code": "(fn interp  [token in]\n  (if (= 1 (count in))\n    in\n    (conj (interp token (rest in)) token (first in))))", "problem": 40, "user": "5186571de4b0da5a5be3bad1"}, {"code": "#(drop-last (interleave %2 (repeat %)))", "problem": 40, "user": "511ffbabe4b0e88f5a20c40c"}, {"code": "#(->> (repeat %) (interleave %2) butlast)", "problem": 40, "user": "518696c1e4b0c40be512d708"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "5140771ae4b076604f1aa555"}, {"code": "#(butlast (mapcat list %2 (repeat %)))", "problem": 40, "user": "517b59b8e4b0925c997201d0"}, {"code": "(fn [y xs] (cons (first xs) (interleave (repeat y) (rest xs))))", "problem": 40, "user": "5186134ce4b0da5a5be3bac7"}, {"code": "(fn [sep xs]\n  (butlast (mapcat list xs (repeat (count xs) sep))))", "problem": 40, "user": "5160195ae4b0e2be8aa20be3"}, {"code": "(fn [x lst] (loop [s lst r []] (if (empty? (rest s)) (conj r (first s)) (recur (rest s) (conj r (first s) x)))))", "problem": 40, "user": "5179fd22e4b01aacecbecbe5"}, {"code": "(fn [sep s] (rest (mapcat #(list sep %) s)))", "problem": 40, "user": "5187dd58e4b057e3860ab7e4"}, {"code": "(fn [i s] (rest (apply concat (map #(vector i %) s))))", "problem": 40, "user": "517ecab1e4b09104ecebe7e8"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "5183abf6e4b028ec5fd2f2a6"}, {"code": "(fn ipose [item col]\n  (drop 1 (interleave (repeat item) col)))", "problem": 40, "user": "4fecebe1e4b0681fd128dcac"}, {"code": "#(rest (mapcat (fn [d] [% d]) %2))", "problem": 40, "user": "517bc969e4b07ef0e56148d0"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "51805d22e4b0e3fc13e244df"}, {"code": "(fn [d s]\n  (reduce (fn [a b] (conj a d b)) [(first s)] (rest s)))", "problem": 40, "user": "51899891e4b0288ada3dbdab"}, {"code": "(fn [x y] (butlast (mapcat #(vector % x) y)))", "problem": 40, "user": "4ec4d723535dcc7ae8597d65"}, {"code": "#(loop [a %1 coll %2 result '()]\n   (if (empty? coll)\n     (drop-last result)\n     (recur a (rest coll) (concat result (list (first coll) a)))))", "problem": 40, "user": "518ccf6be4b05e6c8537e386"}, {"code": "(fn [x y] (rest (mapcat #(list x %) y)))", "problem": 40, "user": "51823a97e4b0f2adb733651e"}, {"code": "(fn [n xs] (rest (reduce #(concat % (list n %2)) () xs)))", "problem": 40, "user": "51897709e4b0288ada3dbdaa"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "518b761ae4b0f028e99addee"}, {"code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "516c0a7de4b005fd0cdf85cb"}, {"code": "(fn [s xs] (rest (interleave (repeat s) xs)))", "problem": 40, "user": "518ec633e4b0cd6ff516769e"}, {"code": "(fn [i s] (drop-last 1 (reduce #(into % (vector %2 i)) [] s)))", "problem": 40, "user": "517e25c6e4b0329b27fa9f51"}, {"code": "(fn my-interpose [element coll]\n  (drop-last (interleave coll (repeat (count coll) element) )))", "problem": 40, "user": "5170643ee4b004f79986ad89"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "4ef2eb4d535dced4c769f226"}, {"code": "(fn [aV x] (loop[myNL '() myL x](if(not= (first myL) nil)\n                                  (recur\n                                   (if(not= (count myL) 1)\n                                       (conj(conj myNL (first myL))aV)\n                                       (conj myNL (first myL))\n                                      )\n                                   (rest myL)\n                                   )\n                                  (reverse myNL)\n                                  )\n             )\n  )", "problem": 40, "user": "5177cacde4b0261ae665b877"}, {"code": "(fn [sep coll] \n  (let [list \n        (flatten \n         (map \n          (fn [i] \n            [i sep]) coll))]\n    (take \n     (-\n      (count\n       list) 1) list)))", "problem": 40, "user": "5191045ee4b0f8ef0be96bf3"}, {"code": "(fn comb [s x] (butlast (interleave x (repeat (count x) s))))", "problem": 40, "user": "519136e9e4b0f8ef0be96c01"}, {"code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "5154b16be4b0179c5115f4e2"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "5159849ce4b0394f658fe236"}, {"code": "(fn [x s] (butlast (flatten (map (fn [y] [y x]) s))))", "problem": 40, "user": "5194cd85e4b05be8c43d2381"}, {"code": "#(drop-last (flatten (for [x %2] [x %])))", "problem": 40, "user": "51933b41e4b0c663c5d86ca2"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4dcd327b535d5973398f929b"}, {"code": "(fn [d s]\n  (drop 1 (flatten (map #(list d %) s))))", "problem": 40, "user": "518a8c4be4b0df82f5685903"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "5161c6a7e4b009fba0926e38"}, {"code": "(fn [x y]\n  (butlast (mapcat #(vector %2 %1)\n          (repeat x)\n          y)))", "problem": 40, "user": "51980f7ce4b068aa333628f7"}, {"code": "(fn [v xs]\n  (butlast (mapcat (fn [x] [x v]) xs)))", "problem": 40, "user": "50fe2420e4b03cd852b4e84a"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "5196568fe4b04c0af7ff3c1c"}, {"code": "#( for [i (range (-(*(count %2) 2) 1))]  (if (even? i) (%2 (/ i 2)) %1) )", "problem": 40, "user": "51761477e4b085adf681d87f"}, {"code": "(fn [a b]\n  (-> (map vector b (repeat a))\n      (flatten)\n      (drop-last)))", "problem": 40, "user": "516fa727e4b0ef3e37990e86"}, {"code": "#(butlast (mapcat list %2 (repeat %)))", "problem": 40, "user": "4dada913c9a9d6ed2d99dc57"}, {"code": "#(drop-last (interleave %2 (repeat %)))", "problem": 40, "user": "51131da8e4b0350614f07a83"}, {"code": "#(butlast (mapcat vector %2 (repeat %1)))", "problem": 40, "user": "518e6966e4b051adb72789ec"}, {"code": "#(next (interleave (repeat %) %2))", "problem": 40, "user": "519b2570e4b0ac1b7dced6a3"}, {"code": "(fn [x col] (rest (interleave (repeat (count col) x) col)))", "problem": 40, "user": "518a59b3e4b02bf06f6bbb4b"}, {"code": "(fn [itm coll]\n   (reduce (fn [a b] (conj a itm b)) [(first coll)] (rest coll)))", "problem": 40, "user": "4f409e29e4b0e243712b1fb6"}, {"code": "#(rest (mapcat vector (repeat %1) %2))", "problem": 40, "user": "5199ca05e4b022efe2b3ba88"}, {"code": "(fn [x [y & ys]] (reduce #(concat % [x %2]) [y] ys))", "problem": 40, "user": "519ca227e4b0a1d87b003460"}, {"code": "(fn [delim s]\n  (drop-last (mapcat (fn [v] [v delim]) s)))", "problem": 40, "user": "504e0517e4b078edc5f5939a"}, {"code": "(fn [in l]                   \n  (butlast (apply concat                               \n                  (for [item l]                         \n                    [item in]))))", "problem": 40, "user": "4f942227e4b0dcca54ed6cbe"}, {"code": "#(vec (butlast (flatten (map (fn [i] [i %1]) %2))))", "problem": 40, "user": "4dade9e9c9a9d6ed4799dc57"}, {"code": "(fn pose [sep xs]\n  (butlast (mapcat #(list % sep) xs)))", "problem": 40, "user": "516385cee4b055933a9ca02d"}, {"code": "(fn [v x] (drop 1 (flatten (map #(conj [] v %) x))))", "problem": 40, "user": "5191e91de4b08962174cf733"}, {"code": "#(drop-last (interleave %2 (repeat %)))", "problem": 40, "user": "519b7d76e4b02a926d9a436e"}, {"code": "(fn ipose [x s]\n  (if (empty? (rest s))\n    [(first s)]\n    (cons (first s)\n          (cons x\n                (lazy-seq (ipose x (rest s)))))))", "problem": 40, "user": "519db0ede4b037b32803f9b9"}, {"code": "(fn f[v lst] (butlast (mapcat #(list % v) lst)))", "problem": 40, "user": "5180dc04e4b06b8caf33fa01"}, {"code": "(fn [x xs] (drop-last (mapcat vector xs (repeat x) )))", "problem": 40, "user": "51227a00e4b068a9582e656b"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "50377d53e4b0af0658af77ad"}, {"code": "#(conj (reduce into [] (map (fn [x] (list x %1)) (reverse (rest (reverse %2))))) (last %2))", "problem": 40, "user": "51a05bede4b0b292b01ee3f4"}, {"code": "(fn [x y ]\n  (let [ f (fn [ r i ]\n            (if (= nil (first r ))\n              (vector i)\n              (conj r x i )\n              )\n            )\n        ]\n    (reduce f [] y)\n    )\n  )", "problem": 40, "user": "518c5236e4b087e178201de0"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "51a1659de4b00957e520db72"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "50c4ff23e4b0210b849018b8"}, {"code": "(fn [d s]\n  (rest (reverse (reduce #(conj (conj %1 d) %2) '() s))))", "problem": 40, "user": "4f16d3fd535d64f60314644e"}, {"code": "#(drop-last (interleave %2 (repeat %)))", "problem": 40, "user": "51377188e4b04059df19f303"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "506ba58be4b0eda3100c090b"}, {"code": "#(butlast (flatten (map vector %2 (repeat %))))", "problem": 40, "user": "51990df9e4b068aa333628fc"}, {"code": "(fn in [x y]\n  (cons (first y) ((fn inn [r]\n    (when (not (empty? r))\n      (concat (list x (first r)) (inn (rest r))))) (rest y))))", "problem": 40, "user": "51a671d4e4b0740bfd1afd21"}, {"code": "(fn [v c] (conj (vec (mapcat #(conj [] % v) (butlast c))) (last c)))", "problem": 40, "user": "51a768e0e4b0da5f497bde84"}, {"code": "(fn [sep xs]\n    (concat (list (first xs)) (mapcat #(list sep %) (rest xs))))", "problem": 40, "user": "5141abf1e4b02fd87f5064c3"}, {"code": "(fn [x c] ((comp butlast #(interleave % (repeat (count %) x))) c))", "problem": 40, "user": "519964cbe4b0aa09cbc0b849"}, {"code": "(fn [sep xs] \n       (butlast (mapcat #(list %1 sep) xs)))", "problem": 40, "user": "51a8f0c6e4b08d8ec191b821"}, {"code": "(fn [sep coll] (rest (reduce (fn [a b] (concat a [sep b])) [] coll)))", "problem": 40, "user": "50ecf888e4b01236b1d49835"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "51a9dbc9e4b04e3dc0c27b1e"}, {"code": "#(drop 1 (reduce (fn [acc x] (conj (conj acc %1) x)) [] %2))", "problem": 40, "user": "506cad7de4b0a302964c548e"}, {"code": "#(drop-last (interleave  %2 (repeat (count %2) %1)))", "problem": 40, "user": "5143824ae4b0b4fb4ace5f36"}, {"code": "(fn [x y] (butlast (interleave  y (repeat x))))", "problem": 40, "user": "51ac61c8e4b09397d510976b"}, {"code": "#(next (interleave (repeat %1) %2))", "problem": 40, "user": "5183f5d7e4b02826a645f393"}, {"code": "(fn [i coll] (rest (#(mapcat (fn [x] [%1 x]) %2) i coll)))", "problem": 40, "user": "4fe9f0f6e4b0547ebccb247b"}, {"code": "(fn [obj coll]\n  (loop [c coll result '()]\n    (if (empty? (rest c))\n      (reverse (conj result (first c)))\n      (recur (rest c) (conj result (first c) obj)))))", "problem": 40, "user": "51991a89e4b068aa333628fd"}, {"code": "(fn intrpos [v xs]\n  (rest (mapcat vector (repeat v) xs)))", "problem": 40, "user": "51ac6360e4b09397d510976c"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "51ab1718e4b04e3dc0c27b2f"}, {"code": "(fn [x, c] (rest (interleave (repeat (count c) x) c)))", "problem": 40, "user": "5192ad1ae4b08962174cf750"}, {"code": "(fn [x, c] (rest (interleave (repeat (count c) x) c)))", "problem": 40, "user": "518c26e6e4b0f028e99addfa"}, {"code": "(fn ! [v [x & xs]]\n  (if xs (cons x (cons v (lazy-seq (! v xs)))) [x]))", "problem": 40, "user": "51aa2b4fe4b04e3dc0c27b21"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4db6d993535d1e037afb2180"}, {"code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "problem": 40, "user": "51a477eee4b0def3c5c58692"}, {"code": "(fn [x y] (loop [g x se (rest y) res (conj [] (first y))] (if (= () se) res (recur g (rest se) (conj (conj res g) (first se))))))", "problem": 40, "user": "51a7f74be4b08d8ec191b802"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "4fbf2818e4b081705acca317"}, {"code": "(fn minterpose [sep X]\n  (if (empty? (rest X)) X\n    (concat [(first X) sep] (minterpose sep (rest X)))))", "problem": 40, "user": "51ad0ab8e4b09397d510977b"}, {"code": "(fn [x ys]\n  (rest (mapcat #(do [x %]) ys)))", "problem": 40, "user": "510b0480e4b078ea719210fa"}, {"code": "#(concat (butlast (interleave %2 (repeat %))))", "problem": 40, "user": "51aa5434e4b04e3dc0c27b26"}, {"code": "#(drop-last (mapcat list %2 (repeat %1)))", "problem": 40, "user": "51a417dde4b0def3c5c58688"}, {"code": "(fn [delim s] (butlast (mapcat #( if true [% delim] ) s)))", "problem": 40, "user": "51aa4eede4b04e3dc0c27b25"}, {"code": "(fn [sep coll]\n   (drop-last 1 (mapcat #(vector % sep) coll))\n  )", "problem": 40, "user": "51a54fb4e4b0def3c5c586a3"}, {"code": "(fn [spacer s] (take (- (* (count s) 2) 1) (reduce (fn [result item] (concat result [item spacer])) [] s)))", "problem": 40, "user": "51a7b4fee4b0da5f497bde8b"}, {"code": "(fn [sep seq1] (rest (interleave (repeat sep) seq1)))", "problem": 40, "user": "516db4f6e4b046df6fbb76a0"}, {"code": "(fn [x c] (drop 1 (interleave (repeat x) c)))", "problem": 40, "user": "51a10b2ce4b0b292b01ee3fe"}, {"code": "(fn [x l] (rest (interleave (repeat x) l)))", "problem": 40, "user": "51b0fc95e4b0c53cf2e68a72"}, {"code": "(fn [p, a] (pop (vec (doall (flatten (map #(list % p) a))))))", "problem": 40, "user": "51b3a2c8e4b0f094dd986fa6"}, {"code": "(fn def-val-map [key lat]\n              (if (= (rest lat) []) (list(first lat))\n                (cons (first lat) (cons key (def-val-map key (rest lat))))\n                )\n              )", "problem": 40, "user": "514cc029e4b019235f6c057c"}, {"code": "#(cons (first %2) (mapcat vector (repeat %) (rest %2)))", "problem": 40, "user": "51b38769e4b026427ecf067f"}, {"code": "(fn [x y] (cons (first y) (interleave (repeat x) (rest y))))", "problem": 40, "user": "50a2e3fbe4b029e8bace3629"}, {"code": "#(cons (first %2) (mapcat (fn [x] [% x]) (rest %2)))", "problem": 40, "user": "51b24defe4b02f8f128bb963"}, {"code": "(fn [a coll] (drop-last (mapcat #(vector % a) coll)))", "problem": 40, "user": "51a3c9cde4b0e77c4ca60bf9"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "50d4593ee4b09cc622d65a68"}, {"code": "(fn [sep coll]\n  (drop-last\n   (mapcat #(conj [] % sep) coll)))", "problem": 40, "user": "51b0359ae4b0c53cf2e68a5f"}, {"code": "(fn [split old] \n  (reduce \n   (fn [merged current] \n     (if \n        (= (count old) (inc (/ (count merged) 2)))\n        (conj merged current)\n        (conj merged current split)))\n   [] \n   old))", "problem": 40, "user": "51aee76ce4b09397d5109796"}, {"code": "(fn [i c] (rest (mapcat list (repeat i) c)))", "problem": 40, "user": "51672d15e4b079759a74a5e7"}, {"code": "(fn [inter coll] (rest (mapcat #(vector inter %) coll)))", "problem": 40, "user": "5192dd39e4b0c663c5d86c9e"}, {"code": "(fn [a b] (next (reduce #(concat %1 [a %2] )[] b)))", "problem": 40, "user": "51aeb1f4e4b09397d5109794"}, {"code": "(fn [x y] (flatten (concat (map #(conj nil x %) (butlast y)) (list (last y)))))", "problem": 40, "user": "51b1ef95e4b02f8f128bb95e"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "50a5b7e9e4b0aa96157e2610"}, {"code": "(fn [x xs]\n  (into (vector (first xs))\n        (interleave (repeat x) (rest xs))))", "problem": 40, "user": "4f4e78fee4b03ad3f0c10cc8"}, {"code": "#(drop-last (interleave %2 (repeat %)))", "problem": 40, "user": "51b3f109e4b0f094dd986fa9"}, {"code": "(fn i \n  ([a b] (i a (first b) (rest b)))\n  ([a c b]\n   (lazy-seq\n     (if (empty? b) [c] (concat [c a] (i a b))))))", "problem": 40, "user": "51b793d3e4b0d906fcd71d38"}, {"code": "(fn ! [v [x & xs]]\n  (if xs (cons x (cons v (lazy-seq (! v xs)))) [x]))", "problem": 40, "user": "51b213c2e4b02f8f128bb962"}, {"code": "(fn [d xs] (drop-last (mapcat (fn [x] [x d]) xs)))", "problem": 40, "user": "4dd59d8b535dae65d5c462eb"}, {"code": "(fn [interpose-elem coll] (drop-last (mapcat (fn [elem1] [elem1 interpose-elem]) coll)))", "problem": 40, "user": "51b7b521e4b0d906fcd71d3a"}, {"code": "(fn [i c]\n  (drop-last (mapcat #(vector % i) c)))", "problem": 40, "user": "50f69a3ce4b0035e89151844"}, {"code": "(fn [e s]\n  (drop-last (mapcat #(list % e) s)))", "problem": 40, "user": "51b76227e4b0d906fcd71d35"}, {"code": "(fn my-inter [v l] (flatten (let [h (first l) t (rest l)] (if (empty? t) (list h) (list h v (my-inter v t))))))", "problem": 40, "user": "51bc2f6ae4b0fe3ecfb46452"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "4fa340b4e4b081705acca18c"}, {"code": "#(rest (mapcat list (repeat %1) %2))", "problem": 40, "user": "51bb970be4b0fe3ecfb4644e"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "51b3d998e4b0f094dd986fa8"}, {"code": "(fn pose0 [val,s]\n  (if(= (count s) 1) (list (first s))\n    (conj (conj (pose0 val (rest s)) val) (first s))))", "problem": 40, "user": "51b73a91e4b0d906fcd71d33"}, {"code": "(fn [v l]\n  (flatten (reduce (fn [x y] (list x v y)) l)))", "problem": 40, "user": "51baff1be4b0fe3ecfb46443"}, {"code": "(fn [x ys] (rest (flatten (for [y ys] [x y]))))", "problem": 40, "user": "4f5c68c6e4b0030a34fb2b23"}, {"code": "(fn [arb aseq] (reduce \n                #(concat \n                  (if (sequential? %1) %1 (list %1)) \n                  (list arb %2)) aseq))", "problem": 40, "user": "51bf4560e4b013aa0d74b817"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "51b90b88e4b050a1176cd6a2"}, {"code": "(fn [del l]\n  (reduce #(conj %1 del %2) [(first l)] (rest l)))", "problem": 40, "user": "509ecefde4b08df8156e9e35"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "51b8e0dce4b050a1176cd69f"}, {"code": "(fn xxx [sep coll]\n  (let [step (fn step [sep coll]\n               (if (not= nil (first coll))\n                 (cons (first coll)\n                       (if (not= nil (second coll))\n                         (cons sep (xxx sep (rest coll)))))))]\n    (vec (step sep coll))))", "problem": 40, "user": "5163a7bbe4b055933a9ca02f"}, {"code": "(fn [delim xs] (rest (mapcat list (repeat delim) xs)))", "problem": 40, "user": "51bd1a0de4b0df1216cefd93"}, {"code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "51bec919e4b013aa0d74b800"}, {"code": "#(rest (interleave (repeat (count %2) %1) %2))", "problem": 40, "user": "51beb32ae4b013aa0d74b7fd"}, {"code": "#(butlast (interleave %2 (repeat (count %2) %) ))", "problem": 40, "user": "51a865dfe4b08d8ec191b80f"}, {"code": "(fn [sep s] (rest (mapcat #(list sep %) s)))", "problem": 40, "user": "51b9dc12e4b0e871ca49590c"}, {"code": "(fn [d [x & xs]] (reduce #(conj %1 d %2) [x] xs))", "problem": 40, "user": "5161e5eee4b009fba0926e3a"}, {"code": "(fn\n  [x xs]\n  (loop [acc [], xs xs]\n    (if (empty? (rest xs))\n      (conj acc (first xs))\n      (recur (conj acc (first xs) x) (rest xs)))))", "problem": 40, "user": "4ee93f4c535d93acb0a6688c"}, {"code": "(fn [a b] (butlast (flatten (map #(list % a) b))))", "problem": 40, "user": "4f47eab2e4b0d56e7bb92bc6"}, {"code": "#(butlast (mapcat vector %2 (repeat (count %2) %1)))", "problem": 40, "user": "51c330a9e4b0851ac09658f2"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "51789dfae4b03d69594194d7"}, {"code": "#(drop-last (mapcat list %2 (repeat %1)))", "problem": 40, "user": "51b9d1f0e4b0e871ca49590b"}, {"code": "(fn [i coll]\n  (pop \n   (reduce #(conj % %2 i) [] coll)))", "problem": 40, "user": "51b86a0fe4b09e0e347b2e78"}, {"code": "(fn [split arg] (drop 1\n   (flatten (map #(list split %1) arg))))", "problem": 40, "user": "51ba59e4e4b0fe3ecfb4642d"}, {"code": "(fn [sep xs] (rest (reduce #(conj %1 sep %2) [] xs)))", "problem": 40, "user": "519291c1e4b08962174cf74b"}, {"code": "(fn [sepr coll] \n  (drop-last \n   (mapcat #(conj [] % sepr) coll)))", "problem": 40, "user": "518ad8fce4b06da86c1973c1"}, {"code": "(fn intrps\n    [v sq]\n    (let [[fst & rst] sq]\n      (when fst\n        (if-let [next (intrps v rst)]\n          (cons fst (cons v next))\n          (list fst)))))", "problem": 40, "user": "51c3c6a6e4b0851ac09658f8"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "5136f659e4b04059df19f2fd"}, {"code": "(fn [i xs] (reverse (rest (reverse (interleave xs (repeat (count xs) i))))))", "problem": 40, "user": "51aab611e4b04e3dc0c27b2d"}, {"code": "(fn [y x] (butlast (mapcat #(conj (vector %) y) x)))", "problem": 40, "user": "51c09719e4b0c9c82288293c"}, {"code": "(fn [x xs] (butlast (mapcat #(list % x) xs)))", "problem": 40, "user": "4f72f71be4b07046d9f4f03d"}, {"code": "(fn [sep ss](flatten(reduce #(conj % [sep %2] ) [(first ss)] (rest ss))))", "problem": 40, "user": "51c1d159e4b0d204dbe2ca18"}, {"code": "#(apply vector (reverse (loop [s %2\n                               coll (list)]\n                          (if (= 1 (count s))\n                              (cons (first s) coll)\n                            (recur (rest s) (cons %1 (cons (first s) coll)))))))", "problem": 40, "user": "51ab1da1e4b04e3dc0c27b30"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "51793056e4b0684c1c981a41"}, {"code": "(fn [vl lst]\n  (reverse (rest (reverse (mapcat (fn [aval]\n            (clojure.core/list aval vl)) lst)))))", "problem": 40, "user": "51c76864e4b07ef393169e3f"}, {"code": "(fn [delim col]\n  (butlast\n   (interleave col\n               (repeat delim))))", "problem": 40, "user": "51c73959e4b07ef393169e3e"}, {"code": "(fn [i x]( loop[col x new []]\n\t\t(if(>= 1 (count col))\n        \t(conj new (first col))\n        (recur (rest col) (conj new (first col) i)))))", "problem": 40, "user": "51cb073ce4b068dadb8f2233"}, {"code": "(fn [s x] (cons (first x) (mapcat #(list s %) (next x))))", "problem": 40, "user": "51cbdee1e4b08d8387cbede1"}, {"code": "(fn [sep coll]\n  (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "51c858c3e4b07ef393169e55"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "51ba4482e4b0fe3ecfb4642b"}, {"code": "(fn [v s] (butlast (reduce #(concat %1 [%2 v]) [] s)))", "problem": 40, "user": "51ccc179e4b02254fc794879"}, {"code": "(fn [sep coll] (butlast (mapcat (fn [e] (list e sep)) coll)))", "problem": 40, "user": "51cdd3f0e4b0e42293a2254b"}, {"code": "(fn [ad se]\n  (vec (butlast (interleave se (repeat (count se) ad)))))", "problem": 40, "user": "51cacda3e4b068dadb8f2227"}, {"code": "(fn [dltr lst] (into [] (rest (reduce into (map (fn [x] [dltr x]) lst)))))", "problem": 40, "user": "50d6d7eee4b0159555a1fc76"}, {"code": "(fn f [d c]\n  (if (= (count c) 1)\n    [(first c)]\n    (concat [(first c) d] (f d (rest c)))))", "problem": 40, "user": "517cc671e4b0bbbf1f12af0a"}, {"code": "(fn[separator items]\n   (rest\n     (reverse\n       (flatten\n         (map list (reverse items) (repeat (count items) separator))))))", "problem": 40, "user": "4ede0511535d10e5ff6f5330"}, {"code": "(fn [v s]\n  (loop [r []\n         lst s]\n    (if (> (count lst) 1)\n      (recur (conj r (first lst) v)\n             (next lst))\n      (conj r (first lst)))))", "problem": 40, "user": "51caca2ae4b068dadb8f2226"}, {"code": "#(butlast (mapcat vector %2 (repeat %)))", "problem": 40, "user": "51d08d67e4b067c365486351"}, {"code": "#(rest (mapcat (partial list %) %2))", "problem": 40, "user": "51cc5cb3e4b02254fc79486f"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "51cf126ae4b0e42293a2256b"}, {"code": "(fn interp [sep input]\n    (butlast (flatten (map #(vector % sep) input)))\n)", "problem": 40, "user": "51d1111ce4b067c36548635f"}, {"code": "#(drop-last (interleave %2 (repeat %)))", "problem": 40, "user": "51ca7906e4b08b1cbd0d9487"}, {"code": "(fn[n y] (loop [ys y result []]\n    (if (not (empty? ys))\n      (recur (rest ys) (conj result n (first ys)))\n      (rest result))))", "problem": 40, "user": "51d10b1fe4b067c36548635e"}, {"code": "(fn [n col] (reverse (rest (reduce #(conj %1 %2 n) () col))))", "problem": 40, "user": "51bdc609e4b0ff155d51d2b3"}, {"code": "#(next (interleave (repeat %1) %2))", "problem": 40, "user": "51d4ed02e4b013d740b70dec"}, {"code": "(fn [i s]\n  (loop [result [(first s)] s (rest s)]\n    (if (seq s)\n      (recur (conj result i (first s)) (rest s))\n      result)))", "problem": 40, "user": "4e6a82ba535d8ccf87e9feef"}, {"code": "(fn [sep [x & xs]] (reduce #(conj %1 sep %2) [x] xs))", "problem": 40, "user": "51c19873e4b0d204dbe2ca0d"}, {"code": "(fn x\n  ([n l] (x n l 1))\n  ([n l acc]\n  (cond\n   (empty? l) []\n   (= acc -1) (cons n (x n l (* -1 acc)))\n   :else (cons (first l) (x n (rest l) (* -1 acc))))))", "problem": 40, "user": "518c0f4ee4b0f028e99addf7"}, {"code": "(fn [x s] \n  (rest (mapcat #(vector x %1) s) ))", "problem": 40, "user": "51d662fce4b0154f82ab92ef"}, {"code": "(fn [separator coll] (rest (mapcat vector (repeat separator) coll)))", "problem": 40, "user": "51ae350fe4b09397d5109790"}, {"code": "(fn [inter se]\n    (loop [lst []\n           cur (first se)\n           nex (second se)\n           rst (rest se)]\n      (cond\n       (nil? cur) (vec lst)\n       (nil? nex) (conj (vec lst) cur)\n       :else (recur (concat lst (cons cur (cons inter []))) nex (second rst) (rest rst)))))", "problem": 40, "user": "4f038b62535dcb61093f6b1c"}, {"code": ";(fn [sep coll]\n;  (when (seq coll)\n;    (loop [coll coll, res []]\n;      (if (next coll)\n;        (recur (next coll) (conj res (first coll) sep))\n;        (seq (conj res (first coll)))))))\n;\n(fn ip [sep coll]\n  (letfn [(go [c]\n            (when-let [s (seq c)]\n              (if (next s)\n                (cons (first s)\n                      (cons sep\n                            (go (rest s))))\n                (list (first s)))))]\n    (lazy-seq (go coll))))", "problem": 40, "user": "51d19c24e4b0cfcf579466c3"}, {"code": "#(rest (mapcat (partial list %)  %2))", "problem": 40, "user": "51d5ce6fe4b01da06753aa94"}, {"code": "#(rest (interleave (repeat (count %2) %1) %2))", "problem": 40, "user": "51d5af00e4b01da06753aa93"}, {"code": "#(loop[x 0,y %,z %2,m '()]\n           (if (== x (count z))\n            (rest (reverse m))\n             (recur (inc x)\n                    y\n                    z\n                    (conj m y (nth z x)))))", "problem": 40, "user": "51c4690fe4b06b70b3e207e1"}, {"code": "(fn ips [ch sq] (vec (if (empty? (rest sq)) (vec sq) (concat [(first sq) ch] (ips ch (rest sq)) ))))", "problem": 40, "user": "51d381b5e4b099f3b6acde01"}, {"code": ";;For each member of the sequence, I cons the value to it. For\n;;example, if I just mapped my function I would get ([1 0] [2 0] [3 0])\n;; using mapcat instead gives me (1 0 2 0 3 0)\n;; So now I just take all of them but the last to get (1 0 2 0 3)\n;; Boom\n\n#(butlast \n  (mapcat \n   (fn [x] \n     (cons x [%])) %2))", "problem": 40, "user": "50955676e4b087f34d351ab1"}, {"code": "(fn [x s]\n  (loop [s s\n         result '()]\n    (if (= (count s) 1)\n      (concat result (list (first s)))\n      (recur (rest s) (concat result (list (first s)) (list x))))))", "problem": 40, "user": "504dffe2e4b078edc5f5938b"}, {"code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "problem": 40, "user": "51cbaf14e4b08d8387cbedda"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "50bfd849e4b042992946c649"}, {"code": "(fn [x ys] (rest (reduce (fn [l r] (concat l [x r])) [] ys)))", "problem": 40, "user": "51da111de4b02ceefd94775a"}, {"code": "(fn seq-interpose [split items]\n  (if (empty? (rest items))\n    items\n    (concat (list (first items) split) (seq-interpose split (rest items)))))", "problem": 40, "user": "51d360d1e4b099f3b6acddff"}, {"code": "(fn [s coll]\n  (loop [result (vector (first coll)) i 1]\n    (if (< i (count coll))\n    \t(recur (conj result s (nth coll i)) (inc i))\n    \tresult\n    )\n  )\n  )", "problem": 40, "user": "51da7e49e4b02ceefd947768"}, {"code": "(fn pose\n  ([sep coll] (pose sep (rest coll) (vector (first coll))))\n  ([sep coll aggr]\n   (if (empty? coll)\n     aggr\n     (pose sep (rest coll) (conj aggr sep (first coll))))))", "problem": 40, "user": "51d96ad0e4b02ceefd94774f"}, {"code": "(fn [i coll] (take (+ (count coll) (dec (count coll))) (mapcat (fn [x] [x i]) coll)))", "problem": 40, "user": "51cec7b1e4b0e42293a2255b"}, {"code": "(fn i [v s]\n  (if (> (count s) 1)\n    (conj (i v (rest s)) v (first s))\n    s))", "problem": 40, "user": "5175533fe4b0dea9bbfba575"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "51c8301ee4b07ef393169e4d"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "51d46133e4b013d740b70de2"}, {"code": "(fn [sep coll]\n  (drop-last (mapcat #(conj [] % sep) coll)))", "problem": 40, "user": "51ce1320e4b0e42293a22551"}, {"code": "(fn ! [v s]\n  (if (= (count s) 1)\n    s\n    (cons (first s) (cons v (! v (rest s))))\n  )\n)", "problem": 40, "user": "51db8244e4b0e067a9bbadc7"}, {"code": "#(rest (mapcat (partial list %1) %2))", "problem": 40, "user": "51db9e1ee4b0e067a9bbadc9"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "51e00020e4b01188f0627534"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4ec6a616535d6d7199dd36d2"}, {"code": "(fn interp [delim elems]\n  (loop [ i 0 acc []]\n    (if (>= i (dec (count elems)))\n      (conj acc (nth elems i))\n      (recur (inc i) (conj acc (nth elems i) delim)))))", "problem": 40, "user": "51df505be4b01188f062752a"}, {"code": "(fn [x y ] \n  (drop-last (reduce concat [] (map vector   y (repeat  x)))))", "problem": 40, "user": "518644bce4b0da5a5be3baca"}, {"code": "#(butlast (reduce into [] (map (fn [a b] [a b]) %2 (repeat %1))))", "problem": 40, "user": "51da52dbe4b02ceefd947763"}, {"code": "(fn [default lst]\n  (letfn [(rec [default lst result]\n               (if (empty? lst)\n                 result\n                (rec default (butlast lst) (cons (last lst) (cons default result)))))]\n    (butlast (rec default lst '()))))", "problem": 40, "user": "51e0198ee4b01188f0627539"}, {"code": "(fn [x coll] (butlast (mapcat #(list % x) coll)))", "problem": 40, "user": "51da565ae4b02ceefd947765"}, {"code": "(fn [sep xs]\n  (loop [[x & xs] xs\n         acc []]\n    (if (empty? xs)\n      (conj acc x)\n      (recur xs (conj acc x sep)))))", "problem": 40, "user": "4f03afcc535dcb61093f6b4d"}, {"code": "(fn [delim data] (loop [d data\n                        del delim\n                        x []]\n                   (if (empty? d)\n                     (drop-last x)\n                     (recur (rest d) del (conj (conj x (first d)) del)))))", "problem": 40, "user": "50214ffae4b0ef1d2d4433bc"}, {"code": "(fn inter [x xs] (butlast (flatten (map #(conj % x) (map vector xs)))))", "problem": 40, "user": "5195b8cce4b04c0af7ff3c08"}, {"code": "(fn [w l] \n  (rest\n    (reduce \n     (fn [a i] \n       (concat a (list w i))\n        )'() l\n       )\n     )\n  )", "problem": 40, "user": "51e1c176e4b06a68e693eafb"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "51b2e850e4b026427ecf067b"}, {"code": "(fn [x coll]\n  (drop-last (mapcat #(vector % x) coll)))", "problem": 40, "user": "516199bbe4b009fba0926e36"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "51e41f4be4b0efabf93c02ac"}, {"code": "(fn interp [i l] (if (empty? (rest l)) l (concat (list (first l) i) (interp i (rest l)))))", "problem": 40, "user": "51db27dbe4b094966a2cd688"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "51b66b31e4b02e5820733406"}, {"code": "(fn [sep s] (rest (mapcat #(list sep %) s)))", "problem": 40, "user": "51e5dc65e4b0efabf93c02de"}, {"code": "(fn [sep coll] \n  (loop [cur coll\n         result []]\n\t(if (empty? cur)\n      result\n      (let [[h & oth] cur]\n        (recur oth \n       (if oth\n         (conj result h sep)\n         (conj result h)\n         )        \n         )\n        )\n      )\n    )\n  )", "problem": 40, "user": "51e24a04e4b01e5198146430"}, {"code": "(fn [i, l] (drop-last (reduce #(concat %1 [%2 i]) [] l)))", "problem": 40, "user": "51d49b75e4b013d740b70de6"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "51c611c4e4b03a28d42333bf"}, {"code": "(fn [x y] (reduce (fn [a b] (cons b (cons x a))) [(last y)] (rest (reverse y))))", "problem": 40, "user": "51e28063e4b08e53a149f0f2"}, {"code": "(fn interposit\n  [separator coll]\n  (into []\n        (flatten\n         (for [item coll]\n           (if (= item (last coll))\n             item\n             [item separator]\n             )))))", "problem": 40, "user": "51ab734ee4b04e3dc0c27b34"}, {"code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep)))\n)", "problem": 40, "user": "5029f263e4b023940c84aa45"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "519c4111e4b0a1d87b003458"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "51e58e02e4b0efabf93c02d0"}, {"code": "(fn [ i c ] (reduce #(conj %1 i %2) [(first c)] (rest c)))", "problem": 40, "user": "51e1a1fae4b06a68e693eaf6"}, {"code": "#(reduce (fn [acc x] (conj acc % x)) [(first %2)] (rest %2))", "problem": 40, "user": "51e89428e4b006d205356a51"}, {"code": "(fn [join seq] (butlast (mapcat list seq (repeat join))))", "problem": 40, "user": "51df825de4b01188f062752b"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "51ba8f82e4b0fe3ecfb46434"}, {"code": "#(butlast (interleave %2 (map (fn [x] %1) %2)))", "problem": 40, "user": "51e595a6e4b0efabf93c02d8"}, {"code": "(fn [sep coll]\n              (butlast (flatten (for [x coll]\n                         (list x sep)\n                         ))))", "problem": 40, "user": "51d9eb05e4b02ceefd947755"}, {"code": "(fn[x y](next (reduce #(conj % x %2) [] y)))", "problem": 40, "user": "51dc1202e4b09c47a74ce107"}, {"code": "(fn [d s] (butlast (reduce #(conj % %2 d) [] s)))", "problem": 40, "user": "51dc5033e4b09c47a74ce109"}, {"code": "(letfn [(l [x y z]\n                 (if (empty? y) (seq z)\n                                (r x y (assoc z (count z) x))))\n        (r [x y z]\n                 (if (empty? y) (seq z)\n                                (l x (rest y) (assoc z (count z) (first y)))))]\n        #(r %1 %2 []))", "problem": 40, "user": "51eadb98e4b0f1f103a0d153"}, {"code": "#(rest\n  (interleave (repeat (count %2) %1) %2)\n  )", "problem": 40, "user": "51eca2ace4b069f463c22cd0"}, {"code": "#(drop-last(interleave %2 (repeat %)))", "problem": 40, "user": "50e90813e4b033b0e80d11e7"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "51dd6a7ce4b0c33a4e1da409"}, {"code": "(fn [a b] (rest (flatten (map #(list a %) b) )) )", "problem": 40, "user": "518aec06e4b06da86c1973c2"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "51eb0374e4b0f1f103a0d156"}, {"code": "(fn [a coll]\n           (butlast (mapcat #(list % a) coll)))", "problem": 40, "user": "4fea24e0e4b0547ebccb248d"}, {"code": "(fn [i xs]\n  (butlast (mapcat cons xs (repeat (list i)))))", "problem": 40, "user": "51ef66a7e4b0871fa145d9a5"}, {"code": "(fn [i l]\n  (rest (flatten (map #(conj '() % i) l))))", "problem": 40, "user": "51eff50fe4b0249c592fbdf0"}, {"code": "(fn a[sep coll]\n  (rest \n   (mapcat (partial list sep) coll)))", "problem": 40, "user": "51efd397e4b0249c592fbdeb"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "4e46e48b535dc968683fc4b7"}, {"code": "(fn [sep s]\n  (rest (mapcat #(list sep %) s)))", "problem": 40, "user": "51eb3aace4b0f1f103a0d159"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "51d11f5de4b067c365486360"}, {"code": "(fn foo[acc c lst] \n  (if (= 1(count lst))\n    (concat acc lst)\n    (foo \n     (concat acc (list (first lst) c))\n     c\n     (rest lst)))) nil", "problem": 40, "user": "51eec1a6e4b0871fa145d98d"}, {"code": "(fn my-interpose [s xs]\n  (drop 1 (interleave (repeat (count xs) s) xs)))", "problem": 40, "user": "51e780dae4b0730ab87cf353"}, {"code": "(fn pose\n  [inter, s]\n  (if (= (count s) 1)\n    s\n    (cons (first s) (cons inter (pose inter (next s))))))", "problem": 40, "user": "511b233ae4b07ab9ec456180"}, {"code": "(fn [separator aSeq]\n  (butlast (reduce #(conj % %2 separator) [] aSeq)))", "problem": 40, "user": "51f04e89e4b0274c496158cd"}, {"code": ";#(mapcat (fn [n a] (list a n)) %1 %2)\n#(butlast (mapcat (fn [n] (list n %1)) %2))", "problem": 40, "user": "51f28a64e4b0210f90e7454e"}, {"code": "(fn [ v s ] (drop-last (mapcat (fn [x] [x v]) s)))", "problem": 40, "user": "51f59607e4b0abb92f97f9d5"}, {"code": "(fn [s l] (rest (mapcat #(list s %) l)))", "problem": 40, "user": "51f55bdae4b0abb92f97f9d0"}, {"code": "(fn [x y] \n  (drop-last \n   (reduce \n    #(concat %1 \n             (replicate 1 %2) \n             (replicate 1 x)) \n    [] y)))", "problem": 40, "user": "5022292ee4b0846bc458ae46"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "51f13b80e4b06a20a2523f38"}, {"code": "(fn [v s] (butlast (mapcat #(list %1 %2) s (repeat v))))", "problem": 40, "user": "51b6f4f9e4b04fc00976d479"}, {"code": "(fn [delim coll] (concat (flatten (map #(list %1 %2) coll (repeat (dec (count coll)) delim))) (list (last coll))))", "problem": 40, "user": "51f805b0e4b06ff1c25c52e2"}, {"code": "(fn [x xs]\n   (butlast (mapcat #(list %1 x) xs)))", "problem": 40, "user": "50aedb8ce4b0a40c9cfb08d4"}, {"code": "(fn [x y] (drop-last (mapcat #(list % x) y)))", "problem": 40, "user": "51f9b1d0e4b09be9c177e550"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "51dd9370e4b0c33a4e1da40c"}, {"code": "#(butlast (mapcat (fn [i] [i %]) %2))", "problem": 40, "user": "5046ee3ee4b03b02161376b4"}, {"code": "#(drop-last (interleave %2 (repeat (count %2) %1)))", "problem": 40, "user": "51fa852ee4b0f1313d4689dd"}, {"code": "(fn interp [v s]\n  (rest (interleave (repeat v) s)))", "problem": 40, "user": "4f017b4e535dcb61093f6a37"}, {"code": "(fn [n l] (drop-last (vec (mapcat #(list % n) l))))", "problem": 40, "user": "51f98843e4b09be9c177e54e"}, {"code": "(fn [sep col] (butlast (flatten (map #(list % sep) col))))", "problem": 40, "user": "4eb7b049535d7eef30807377"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "50cf21dee4b0e61f11ddcd8b"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "51fa1375e4b0f1313d4689c9"}, {"code": "(fn [i l]\n  (loop [ll l\n         acc []]\n  \t(cond\n   \t\t(next ll) (recur (next ll) (conj acc (first ll) i))\n        :else (conj acc (first ll))\n    )\n  )\n)", "problem": 40, "user": "51d67516e4b0154f82ab92f0"}, {"code": "(fn [s lst]\n  (drop-last (reduce (fn [a b] (conj (conj a b) s)) [] lst)))", "problem": 40, "user": "51f2ab8be4b0210f90e74554"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "51facf22e4b0f1313d4689f0"}, {"code": "(fn interpose1 [sep coll]\n  (if (seq (rest coll))\n    (cons (first coll) (cons sep (interpose1 sep (rest coll))))\n    (cons (first coll) nil)))", "problem": 40, "user": "51f82769e4b09be9c177e527"}, {"code": "(fn [v sb]\n  (loop [s2 (rest sb) result (cons (first sb) '()) ]\n    (if (empty? s2)\n    (reverse result)\n    (recur (rest s2) (cons (first s2)  (cons v result )))\n    )\n  )\n)", "problem": 40, "user": "51fb4a9be4b0f1313d4689ff"}, {"code": "#(take (dec (* 2 (count %2))) (interleave %2 (repeat (count %2) %1)))", "problem": 40, "user": "51f40975e4b0fca5e8b4822e"}, {"code": "(fn [x coll]\n  (take (dec (* 2 ( count coll))) (mapcat #(into '() (list x %)) coll)))", "problem": 40, "user": "512c0f84e4b03a42b6300232"}, {"code": "#(drop-last\n      (apply concat\n             (for [i %2]\n               [i %])))", "problem": 40, "user": "4fa3c137e4b081705acca193"}, {"code": "(fn inter \n  ([element group] (inter element group []))\n  ([element group result]\n  (if (seq (rest group))\n    (cons (first group) (cons element (inter element (rest group) result)))\n    (cons (first group) result)\n    )\n  ))", "problem": 40, "user": "4ff8aa3fe4b0678c553fc39e"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "51a584c7e4b051b01d55f44e"}, {"code": "(fn [sep coll]\n      (if (< (count coll) 2)\n        coll\n        (reduce #(conj %1 sep %2) [(first coll)] (rest coll)))\n     )", "problem": 40, "user": "518279abe4b0353c468deb65"}, {"code": "#(rest (mapcat (partial (fn [x y] (list x y)) %1) %2))", "problem": 40, "user": "5201572be4b0d7096e99ddbb"}, {"code": "(fn [sep coll]\n  (drop 1 (interleave (repeat sep) coll))\n)", "problem": 40, "user": "5201ada5e4b0b2e020a18f14"}, {"code": "(fn [sep col] \n  (conj (mapcat #(vector %1 %2) (repeat (- (count col) 1) sep) (rest col))\n        (first col)))", "problem": 40, "user": "51891c96e4b04c2714a2670e"}, {"code": "(fn [a xs] (drop-last (mapcat #(list % a) xs)))", "problem": 40, "user": "50c781bbe4b00bb60fe0c535"}, {"code": "(fn[spacer s]\n  (flatten (reduce (fn [a b]\n                     (list a spacer b))\n                   s)))", "problem": 40, "user": "51db0d99e4b06aa4d4669a9d"}, {"code": "(fn [sep coll]\n  (drop-last\n   (mapcat #(conj [] % sep) coll)))", "problem": 40, "user": "51febd40e4b0f1313d468a76"}, {"code": "(fn [x y] (flatten (reduce #(list %1 x %2) y)))", "problem": 40, "user": "519f0f81e4b087743fad219b"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "5201d2f3e4b0b2e020a18f22"}, {"code": "(fn \n  [sym sequ]\n  (loop [sequ sequ\n         result '()]\n    (if (empty? sequ)\n      (reverse (rest result))\n      (recur (rest sequ)\n             (concat (list  sym (first sequ)) result))\n      )))", "problem": 40, "user": "51f297a3e4b0210f90e74552"}, {"code": "(fn f [x s]\n  (if (> 2 (count s))\n    s\n    (concat (list (first s)\n                  x)\n            (f x (rest s)))))", "problem": 40, "user": "50bf6f93e4b0ffd967a66cbf"}, {"code": "(fn [x y]\n (drop-last (interleave y (take (count y) (repeat x))))\n)", "problem": 40, "user": "52016690e4b0b2e020a18f0f"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "51944aaae4b0142f60b4aedc"}, {"code": "(fn [sep sq]\n  (drop-last (mapcat #(conj '[] % sep) sq)))", "problem": 40, "user": "5202cfe7e4b030ee0c5b2702"}, {"code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "5203621ee4b0fb7e47ea51f5"}, {"code": "(fn [e s] (pop (reduce #(conj % %2 e) [] s)))", "problem": 40, "user": "52039e12e4b0fb7e47ea51ff"}, {"code": "(fn [wh to] (drop-last (flatten (map list to (repeat wh)))))", "problem": 40, "user": "51f7dd27e4b06ff1c25c52dc"}, {"code": "#(->> (interleave %2 (repeat %1)) butlast)", "problem": 40, "user": "52016fd3e4b0b2e020a18f10"}, {"code": "#(drop-last (interleave %2 (repeat (count %2) %1)))", "problem": 40, "user": "516ab8c2e4b081287f204e9e"}, {"code": "#(->> (mapcat list %2 (repeat %1))\n      butlast)", "problem": 40, "user": "52069fade4b0bf4f1882c82c"}, {"code": "(fn [sep, coll]\n  (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "520612a7e4b0bf4f1882c81c"}, {"code": "(fn [sep s] (rest (mapcat #(list sep %) s)))", "problem": 40, "user": "51fa7154e4b0f1313d4689da"}, {"code": "(fn [x xs] (drop-last (interleave xs (repeat (count xs) x))))", "problem": 40, "user": "5208495ce4b0c1501ba9e6da"}, {"code": "#(loop [ el %1, reducedc (seq %2), accum [] ]\n    (if (empty? reducedc)\n      (butlast accum)\n      (recur %1 (rest reducedc) (conj (conj accum (first reducedc)) %1))))", "problem": 40, "user": "52000564e4b023d2eb508ca8"}, {"code": "(fn [val s] (reverse (rest (reverse (interleave s (repeat val))))))", "problem": 40, "user": "5201ff99e4b0b2e020a18f26"}, {"code": "(fn [sep coll] (next (interleave (repeat sep) coll)))", "problem": 40, "user": "52029e5de4b030ee0c5b26fc"}, {"code": "#(drop-last (mapcat list %2 (repeat %1)))", "problem": 40, "user": "52015698e4b0d7096e99ddba"}, {"code": "(fn f [i l]\n  (cond\n   (empty? l) nil\n   (empty? (rest l)) l\n   true (cons (first l) (cons i (f i (rest l))))))", "problem": 40, "user": "52091d57e4b0e152394d76f0"}, {"code": "(fn [sep coll] (butlast (interleave coll (repeat sep))))", "problem": 40, "user": "4f4ff836e4b03ad3f0c10cf4"}, {"code": "#(rest (interleave (repeat (count %2) %1) %2))", "problem": 40, "user": "52084f75e4b01ce6bbf31dde"}, {"code": "(fn f [v c] (butlast (mapcat #(cons % (list v)) c)))", "problem": 40, "user": "5209cb44e4b0e152394d7702"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "514c2d05e4b02b8cbb2a9278"}, {"code": "(fn [a b] (butlast (reduce #(conj % %2 a) [] b)))", "problem": 40, "user": "51db1abae4b094966a2cd685"}, {"code": "(fn [sep coll] (rest (interleave (repeat sep) coll)))", "problem": 40, "user": "5080a697e4b01a93d3f38e49"}, {"code": ";; Solution 1: Using some weird work around to achieve what is essentially \"drop-last\"\n;(fn [sym coll]\n ; (let [tk (- (* 2 (count coll)) 1)]\n ; (take tk\n  ; (interleave coll (repeat (count coll) sym)))))\n;; Solution 2: Now using \"drop-last\"\n(fn [sym coll]\n  (drop-last (interleave coll (repeat sym))))", "problem": 40, "user": "520c5b9ee4b0b022ef140c94"}, {"code": "(fn [val seq]\n  (drop-last (mapcat vector seq (repeat val))))", "problem": 40, "user": "51bf0ccee4b013aa0d74b811"}, {"code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "520a576be4b0e152394d7714"}, {"code": "(fn ip [n s]\n  (if (empty? (rest s))\n    (list (first s))\n    (concat (list (first s) n) (ip n (rest s)))))", "problem": 40, "user": "52090654e4b0e152394d76ee"}, {"code": "(fn [b x]\n  (apply concat\n         (for [i (range (count x))]\n           (if (= i (dec (count x)))\n             [(nth x i)]\n             [(nth x i) b]))))", "problem": 40, "user": "4fa176c7e4b0dcca54ed6d5e"}, {"code": "#(drop-last (interleave %2 (repeat %)))", "problem": 40, "user": "51f66e0ee4b06ff1c25c52c3"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "5208a3a2e4b0301979a6c235"}, {"code": "#(drop-last (mapcat list %2 (repeat %1)))", "problem": 40, "user": "5201cf92e4b0b2e020a18f21"}, {"code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "51a3738ce4b0e77c4ca60bf0"}, {"code": "(fn [rep-char orig-seq] (rest (interleave (repeat rep-char) orig-seq)))", "problem": 40, "user": "51ec9114e4b069f463c22ccd"}, {"code": "(fn [x y] (flatten (reduce #(vector % x %2) y)))", "problem": 40, "user": "520e32a2e4b066f3ea161c93"}, {"code": "(fn [x y] (drop-last 1 (mapcat vector y (repeat x))))", "problem": 40, "user": "520332f7e4b030ee0c5b2714"}, {"code": "(fn [sep coll] (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "51e61772e4b0efabf93c02e2"}, {"code": "(fn [d xs]\n  ((fn impl [d xs rs]\n    (if (= (count xs) 1)\n      (conj rs (first xs))\n      (impl d (next xs) (conj (conj rs (first xs)) d))))\n   d xs []))", "problem": 40, "user": "521392bce4b0d32679a5065e"}, {"code": "(fn [v xs]\n  (drop-last (interleave xs (repeat (count xs) v))))", "problem": 40, "user": "513fab65e4b00f13ea1bd891"}, {"code": "(fn [x ys] (butlast (mapcat #(list % x) ys)))", "problem": 40, "user": "5211d195e4b07aea8afc4f76"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "520cb8c4e4b0b022ef140c9a"}, {"code": "(fn [sep s]\n  (butlast\n \t(vec\n \t(#(flatten (map (fn [x] (list x %1)) %2)) sep s))))", "problem": 40, "user": "5213dbc3e4b0961f15ac4d74"}, {"code": "(fn intp [sep data] (reduce #(if (sequential? %) (concat % [sep %2]) [%1 sep %2]) data))", "problem": 40, "user": "52154514e4b02f6d8ea676c0"}, {"code": "#(cons (first %2) (mapcat (partial list %1) (rest %2)))", "problem": 40, "user": "51f9527fe4b09be9c177e549"}, {"code": "#(conj (interleave (repeat %) (rest %2)) (first %2))", "problem": 40, "user": "520242bae4b030ee0c5b26e3"}, {"code": "(fn [v [h & t]]\n  (reduce (fn [a e] (conj a v e)) [h] t))", "problem": 40, "user": "52173464e4b082aa80a88c75"}, {"code": "#(rest (interleave (repeat (count %2) %1) %2))", "problem": 40, "user": "52117ea7e4b07aea8afc4f70"}, {"code": "(fn  inter [i coll] (if (> (count coll) 1)\n                 (concat (concat [(first coll)] [i]) (inter i (rest coll)))\n                 coll        \n                 ) \n  )", "problem": 40, "user": "51fc44c5e4b0f1313d468a1b"}, {"code": "(fn [x coll] (butlast (reduce (fn [acc y] (concat acc [y x])) [] coll)))", "problem": 40, "user": "5216933be4b000d124d989cf"}, {"code": "(fn intrps [x L] (cond (= 1 (count L)) L\n                       :else (concat [(first L) x] (intrps x (rest L)))))", "problem": 40, "user": "52153bdde4b0961f15ac4daa"}, {"code": "(fn interp [sep xs]\n\t  (cond (empty? xs) ()\n\t\t(= 1 (count xs)) (list (first xs))\n\t\t:else (conj (interp sep (rest xs)) sep (first xs))))", "problem": 40, "user": "5213ffd3e4b0961f15ac4d7d"}, {"code": "(fn [sep xs] (next (reverse (reduce #(conj %1 sep %2) '() xs))))", "problem": 40, "user": "5219e575e4b0c4ef0be82ffd"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "5131d817e4b06942423563ca"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "5151c184e4b03e678e393add"}, {"code": "#(rest (apply concat (map list (repeat %1) %2)))", "problem": 40, "user": "52160dbee4b0bf4bffd29cb3"}, {"code": "#(drop-last (interleave %2 (vec (repeat (count %2) %1))))", "problem": 40, "user": "521249f5e4b06aa6d1666ba2"}, {"code": "(fn [v s]\n  (loop [acc [] xs s]\n    (if (empty? xs) (butlast acc) (recur (concat [(last xs) v] acc) (butlast xs)))))", "problem": 40, "user": "52199105e4b0c4ef0be82ff9"}, {"code": "(fn [n x] (rest (interleave (cycle [n]) x)))", "problem": 40, "user": "4e7e8ea5535db169f9c79719"}, {"code": "(fn [s x] (drop 1 (mapcat #(list s %) x)))", "problem": 40, "user": "521c6a1ae4b0c4ef0be83083"}, {"code": "#(next (mapcat list (repeat %) %2))", "problem": 40, "user": "521679e9e4b0bf4bffd29cca"}, {"code": "(fn [v l] (conj (vec (mapcat #(list %1 v) (butlast l))) (last l)))", "problem": 40, "user": "4fa7de4ce4b081705acca1c9"}, {"code": "(fn my-interpose [v s]\n  (drop-last  (interleave s (repeat (count s) v))))", "problem": 40, "user": "521bf7cfe4b0c4ef0be83066"}, {"code": "( fn [s, v]\n    (vec (butlast (reduce #( concat %1 [ %2, s]\n              ) [] v )\n    )))", "problem": 40, "user": "51b5a6e0e4b0f094dd986fce"}, {"code": "(fn [x coll] (drop-last (reduce (fn [acc x'] (concat acc [x' x])) [] coll)))", "problem": 40, "user": "5213d7aae4b0961f15ac4d72"}, {"code": "#(drop-last (flatten (for [x (list %1) y %2] [y x])))", "problem": 40, "user": "520693e1e4b0bf4f1882c829"}, {"code": "(fn [sep xs]\n  (rest (\n     reduce #(concat %1 (list sep) (list %2)) [] xs\n    )\n   ))", "problem": 40, "user": "5210e5c5e4b080a8d9b9d63f"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "52196842e4b0890f2f822bfa"}, {"code": "#(drop 1 (interleave (repeat %) %2))", "problem": 40, "user": "51a91ac2e4b08d8ec191b822"}, {"code": "(fn [x y] (pop (vec (mapcat list y (iterate identity x)))))", "problem": 40, "user": "521dceeae4b050d5da042802"}, {"code": "(fn [val lista](drop-last (mapcat (fn [x] (cons x (cons val '()))) lista)))", "problem": 40, "user": "5213348ae4b0d32679a50652"}, {"code": "#(rest (mapcat (fn [a] [%1 a]) %2))", "problem": 40, "user": "521e8227e4b0dd19981ad082"}, {"code": "(fn [x s] (drop-last (interleave s (repeat (count s) x))))", "problem": 40, "user": "5174ade2e4b07031762f2edf"}, {"code": "(fn myinterpose [x y]\n  (if \n    (empty? (rest y))\n    y\n    (cons (first y) (cons x (myinterpose x (rest y))))\n  )\n)", "problem": 40, "user": "51f687c2e4b06ff1c25c52cb"}, {"code": "(fn i [d s]\n  (let [[a & r] s]\n    (cond\n     (empty? s) ()\n     (empty? r) (list a)\n     :else (conj (i d r) d a))))", "problem": 40, "user": "521b9f92e4b0c4ef0be8304c"}, {"code": "(fn [x coll]\n  (->> coll\n       (map vector (repeat x))\n       flatten\n       rest))", "problem": 40, "user": "50c113bee4b096f585049c37"}, {"code": "#(rest (mapcat list (repeat %) %2))", "problem": 40, "user": "510ee996e4b07438aa321462"}, {"code": "(fn interpoze [x s]\n  (cond\n   (empty? s) s\n   (empty? (rest s)) (cons (first s) (interpoze x (rest s)))\n   :else (concat (list (first s) x) (interpoze x (rest s)))))", "problem": 40, "user": "5220bc0fe4b0e6a83c8925a7"}, {"code": "(fn [x ys]\n   (butlast (mapcat #(list % %2) ys (repeat x))))", "problem": 40, "user": "4feded14e4b0d2a5fc2962ec"}, {"code": "(fn foo [v lst]\n  (if (empty? lst)\n    '()\n    (if (empty? (rest lst))\n      (list (first lst))\n      (concat (list (first lst) v) (foo v (rest lst))))))", "problem": 40, "user": "5220a770e4b0e6a83c8925a3"}, {"code": "(fn [sep in-seq]\n   ((fn [i-seq res-vec]\n      (if (empty? i-seq)\n        res-vec\n        (recur (rest i-seq) (conj res-vec sep (first i-seq)))\n        )\n      )\n    (rest in-seq) [(first in-seq)])\n   )", "problem": 40, "user": "52213426e4b0e6a83c8925c4"}, {"code": "(fn myInter [v, stuff] (loop [x (second stuff), xs (next (next stuff)), res (vector (first stuff))]\n                          (if (nil? x) res\n                              (recur (first xs) (next xs) (conj res v x)))))", "problem": 40, "user": "52161db6e4b0bf4bffd29cb8"}, {"code": "(fn -interpose [el s]\n  (butlast (mapcat vector s (repeat el))))", "problem": 40, "user": "4ed2a31c535d44c135fd68db"}, {"code": "#(butlast (reduce (fn[r x]( conj r x %1)) [] %2))", "problem": 40, "user": "51f79238e4b06ff1c25c52d7"}, {"code": "#(butlast(mapcat (fn [x] [x %]) %2))", "problem": 40, "user": "5224a46ce4b01819a2de42e5"}, {"code": "(fn separate-seq\n  [separator seq]\n  (let [seps (repeat (count seq) separator)]\n    (drop-last (interleave seq seps))))", "problem": 40, "user": "521b339fe4b0c4ef0be83031"}, {"code": "(fn inter [sep sec]\n  (reduce #(concat %1 (list sep %2)) (list (first sec)) (rest sec)))", "problem": 40, "user": "522048b3e4b0e6c71e0c0c16"}, {"code": "(fn sep-seq [sep xs]\n  (let [l    (.length xs)\n        seps (repeat (dec l) sep)\n        mix  (fn mix [xs ys]\n               (if (and (seq xs) (seq ys))\n                 (concat [(first xs) (first ys)] (mix (rest xs) (rest ys)))\n                 (list (first xs))))]\n        (mix xs seps)))", "problem": 40, "user": "4fb710f4e4b081705acca2cd"}, {"code": "(fn [s x] (reduce #(conj %1 s %2) (vector (first x)) (rest x)))", "problem": 40, "user": "52244a77e4b01819a2de42d1"}, {"code": "(fn inter\n  ([separator coll] (inter separator (rest coll) (list (first coll))))\n  ([separator coll new-coll]\n   (if (= 1 (count coll))\n     (reverse (conj new-coll separator (first coll)))\n     (recur separator (rest coll) (conj new-coll separator (first coll))))))", "problem": 40, "user": "512e74c0e4b0b740abc59827"}, {"code": "(fn [arb xs]\n  (pop (vec (mapcat #(vector %1 arb) xs))))", "problem": 40, "user": "51ef31dfe4b0871fa145d9a0"}, {"code": "(fn [x y]\n  (cons\n    (first y)\n    (mapcat #(list x %) (next y))))", "problem": 40, "user": "522454f4e4b01819a2de42d3"}, {"code": "#(drop 1 (interleave (repeat %) %2))", "problem": 40, "user": "520b67b5e4b0b022ef140c83"}, {"code": "#(rest (mapcat (partial vector %) %2))", "problem": 40, "user": "52253004e4b01819a2de42fa"}, {"code": "#(butlast (mapcat (fn [x] (vector x %1)) %2))", "problem": 40, "user": "4daec4a0edd6309eace4d15e"}, {"code": "(fn [i c] (drop 1 (interleave (repeat i) c)))", "problem": 40, "user": "5167e4a2e4b0c5a4140a3099"}, {"code": "(fn [elem s]\n  (butlast (mapcat #(conj [%] elem) s)))", "problem": 40, "user": "52277ab9e4b0186687e23a4f"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "5191ac45e4b0d428d29dc1b6"}, {"code": "(fn [separator array] \n  (reduce (fn [a b] (conj (if (coll? a) a [a]) separator b)) array))", "problem": 40, "user": "520f46f9e4b0101e4be6fcee"}, {"code": "; (fn [glue col] (butlast (interleave col (iterate (fn [scratch] glue) glue))))\n; sch\u00f6ner mit repeat:\n(fn [glue col] (butlast (interleave col (repeat glue))))\n; oder ohne unendliche Reihe\n;(fn [glue col] (butlast (mapcat (fn [e] [e glue]) col)))", "problem": 40, "user": "5207d70ae4b03bd50ef54675"}, {"code": "(fn [n col] (drop-last (reduce #(conj % %2 n) [] col)))", "problem": 40, "user": "4ff9a200e4b0678c553fc3ab"}, {"code": "#(into [] (butlast (interleave %2 (repeat %1))))", "problem": 40, "user": "51cfc616e4b0e42293a22578"}, {"code": "(fn [sep x]\n     (reduce #(if (empty? %1)\n                [%2]\n          \t\t(conj %1 sep %2))\n             []\n             x))", "problem": 40, "user": "522600cfe4b0f4c7e20d29c8"}, {"code": "(fn [x [y & ys]] (reduce #(conj %1 x %2) [y] ys))", "problem": 40, "user": "522b922ee4b0d34ee08e71c3"}, {"code": "(fn [sep coll] (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "522404d8e4b01819a2de42c0"}, {"code": "(fn my-pose [x coll]\n  (if (= 1 (count coll))\n    coll\n    (concat (vector (first coll) x) (my-pose x (rest coll)))))", "problem": 40, "user": "52127ee4e4b0d32679a5063c"}, {"code": "(fn [x y] (rest (interleave (repeat (count y) x) y)))", "problem": 40, "user": "522eb5cce4b01cdb292c5f0c"}, {"code": "(fn my-interpose [val coll]\n  (reverse (rest (reverse \n                  (let [flat1 (fn [coll] \n                                (reduce \n                                 (fn [a b] (concat a b)) [] coll))] \n                  (flat1 \n                   (map \n                    (fn [c] [c val]) coll)))))))", "problem": 40, "user": "522d0360e4b0806774ddfef7"}, {"code": "(fn [e, l] \n  (drop-last\n\t(mapcat (fn [x] (list x, e)) l)))", "problem": 40, "user": "522a1248e4b0590a43906cf3"}, {"code": "#(drop 1 (interleave (repeat %) %2))", "problem": 40, "user": "51a058dae4b0b292b01ee3f3"}, {"code": "#(rest (mapcat list (repeat %) %2))", "problem": 40, "user": "4ed2a92b535d44c135fd68dc"}, {"code": "(fn\n   [sep lst]\n   (butlast\n      (reduce concat\n              (map list lst (repeat sep))\n             )\n     )\n )", "problem": 40, "user": "5228f870e4b0186687e23a98"}, {"code": "(fn [val sequence]\n  (loop [result (vector (last sequence)) xs (butlast sequence)]\n    (if (not (seq xs))\n      result\n      (recur (conj (cons val result) (last xs)) (butlast xs)))))", "problem": 40, "user": "51857e64e4b0da5a5be3babe"}, {"code": "(fn [i v] (rest (reduce #(conj % i %2) [] v)))", "problem": 40, "user": "5125029de4b0ce9225d2ed3e"}, {"code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "51fe9d7ce4b0f1313d468a70"}, {"code": "(fn [in coll] (drop-last (flatten (map #(list %  in) coll))))", "problem": 40, "user": "5230d9bde4b0035e815da397"}, {"code": "#(rest (mapcat (fn [x] [%1 x]) %2))", "problem": 40, "user": "508923d5e4b06d8254e936e8"}, {"code": "(fn\n          [a b]\n          (letfn\n            [(step\n               [a b]\n               (if b\n                 (cons\n                   a\n                   (cons\n                     (first b)\n                     (step a (next b))))))]\n            (drop 1 (step a b))))", "problem": 40, "user": "514fd753e4b0b449e54b8e00"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "522e6c01e4b01cdb292c5f01"}, {"code": "(fn [c a]\n\t(drop 1 (apply concat (map (fn [m n] [m n]) (repeat c) a))))", "problem": 40, "user": "510591dde4b06d28cacc92eb"}, {"code": "#(drop-last\n  (flatten\n   (for [x %2] \n     [x %1])))", "problem": 40, "user": "522f988be4b032bbe3424168"}, {"code": "(fn [a b]\n   (rest\n    ( (fn inte [s data]\n        (let [se (seq data)]\n          (when se\n            (cons s (cons (first se)\n                          (inte s (rest se)))))))\n      a b)))", "problem": 40, "user": "506c0a02e4b0eda3100c090d"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "4e5e391c535d8a8b8723a2d0"}, {"code": "#(flatten (cons (first %2) (for [x (rest %2)] [% x])))", "problem": 40, "user": "51d872dde4b0154f82ab930e"}, {"code": "(fn [a b]\n  (butlast (mapcat list b (repeat (count b) a))))", "problem": 40, "user": "523361d8e4b0f0b72fabf405"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "51cc5f20e4b02254fc794870"}, {"code": "(fn [i v] (vec (butlast (interleave v (repeat i)))))", "problem": 40, "user": "51b9b5ace4b0e871ca495908"}, {"code": "(fn [v coll]\n   (drop-last (reduce concat (map #(list % v) coll))))", "problem": 40, "user": "516282c3e4b0e6d3c4734711"}, {"code": "(fn [x y] (drop-last (mapcat vector y (repeat x))))", "problem": 40, "user": "5231d8fae4b0e2e8de81d1fb"}, {"code": "(fn [sep coll]\n  (drop-last (mapcat list coll (repeat sep))))", "problem": 40, "user": "516abecae4b081287f204e9f"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "5233ad08e4b07e3ee2be83ac"}, {"code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "problem": 40, "user": "523089f8e4b0035e815da388"}, {"code": "(fn [obj coll]\n  (->> (repeat obj)\n       (interleave coll)\n       butlast))", "problem": 40, "user": "52381b2ae4b0fae3832e99ef"}, {"code": "(fn [i c] (butlast (mapcat #(list % i) c)))", "problem": 40, "user": "52394c03e4b0d705d026ef09"}, {"code": "(fn [x y] (rest (apply concat (map (fn [y1] [x y1]) y))))", "problem": 40, "user": "5235a902e4b0a643f2dcb750"}, {"code": "(fn myinterpose                                                     \n  [i coll]                                                            \n  (if (empty? coll)                                                   \n    '()                                                               \n    (if (= 1 (count coll))                                            \n      coll                                                            \n      (conj (myinterpose i (rest coll)) i (first coll))               \n      )))", "problem": 40, "user": "50573ed8e4b0012181721987"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "52393e16e4b0d705d026ef06"}, {"code": "#(drop-last ( apply concat (map list %2 ( take (count %2) (repeat %)))))", "problem": 40, "user": "523a657be4b081681ca7adc1"}, {"code": "(fn [sep lst]\n  (drop-last (mapcat (fn [e] (conj [e] sep)) lst)))", "problem": 40, "user": "508fd6bae4b0ea685a20f76b"}, {"code": "(fn inter [e xs]\n  (conj (reduce #(conj %1 %2 e) '[] (butlast xs)) (last xs)))", "problem": 40, "user": "523b82efe4b07becd5be21f0"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "5213d81de4b0961f15ac4d73"}, {"code": "(fn [n coll] \n  (butlast (reverse \n   (reduce \n    (fn [acc elem] \n      (cons n (cons elem acc))) \n    () \n    coll))))", "problem": 40, "user": "523a9fc9e4b081681ca7adca"}, {"code": "#(drop-last (flatten (reverse (zipmap %2 (take (count %2) (repeat %1))))))", "problem": 40, "user": "5239caa6e4b0d705d026ef27"}, {"code": "(fn [token coll] (drop-last (mapcat #(list % token) coll)))", "problem": 40, "user": "523b4e91e4b07becd5be21ef"}, {"code": "(fn pse[ch lst]\n  (drop-last\n    (mapcat #(list %1 ch)  lst)\n  )\n)", "problem": 40, "user": "5229211be4b04c906c9c6a63"}, {"code": "(fn [w, z] (butlast (mapcat (partial (fn [x,y] [y x]) w) z)))", "problem": 40, "user": "5220ef05e4b0e6a83c8925b8"}, {"code": "(fn [mid l]\r\n    (loop [curr (rest l) acc [(first l)]]\r\n        (if (empty? curr) acc\r\n                          (recur (rest curr) (conj acc mid (first curr)))   )))", "problem": 40, "user": "523dd963e4b06956f8342ca1"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "523d02b0e4b0dbf0c3017289"}, {"code": "#(drop 1 (interleave (repeat %) %2))", "problem": 40, "user": "52271ffee4b04e78ff2e19a9"}, {"code": "(fn [sepator source] (rest (reduce #(conj % sepator %2) [] source)))", "problem": 40, "user": "523b1988e4b02f719975bdbc"}, {"code": "(fn [x is] \n  (loop [s is r '()]\n    (if (= (count s) 1) (vec (concat r (list (first s))))\n      (recur (rest s) (concat r (list (first s) x)))\n      )))", "problem": 40, "user": "523bc0e6e4b07becd5be21f9"}, {"code": "#(loop [sep %1 l %2 ans []]\n  (cond\n    (empty? l) ans\n    (empty? (rest l)) (conj ans (first l))\n    :else (recur sep (rest l) (-> ans (conj (first l)) (conj sep)))\n  )\n)", "problem": 40, "user": "51f09f3de4b0274c496158d7"}, {"code": "(fn [p l] (butlast (interleave l (repeat (count l) p))))", "problem": 40, "user": "4fec550de4b0681fd128dca6"}, {"code": "(fn [sep sq]\n  (let [rsq (reduce #(conj % (list %2 sep)) () (butlast sq))]\n    (concat (->> rsq reverse (reduce concat)) (list (last sq)))))", "problem": 40, "user": "523bd9c0e4b07becd5be2201"}, {"code": "(fn [i l] (reverse (rest (reduce #(conj %1 %2 i) () l))))", "problem": 40, "user": "5220909fe4b0e6a83c89259f"}, {"code": "(fn f \n  [x y]\n  (butlast (flatten (map #(list %1 x) y))))", "problem": 40, "user": "50aa60bee4b056ee01935865"}, {"code": "(fn [newel x] (take (dec (* 2 (count x))) (interleave x (repeat newel))))", "problem": 40, "user": "52319066e4b0e2e8de81d1e9"}, {"code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "problem": 40, "user": "52166e50e4b0bf4bffd29cc6"}, {"code": "(fn\n\n  [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "522eba30e4b01cdb292c5f0e"}, {"code": "#(drop 1 (mapcat list  (repeat %1) %2))", "problem": 40, "user": "523b10dfe4b02f719975bdb8"}, {"code": "(fn [sep coll]\n  (drop-last (flatten (map #(vector % sep) coll))))", "problem": 40, "user": "52382d91e4b0fae3832e99f0"}, {"code": "#(butlast (mapcat vector %2  (repeat %1)))", "problem": 40, "user": "5240512ee4b0ad64fa010319"}, {"code": "(fn [ele seq]\n    (drop-last (flatten (map #(list %1 ele) seq))))", "problem": 40, "user": "511e763ce4b03e81d390ac29"}, {"code": "(fn [sep [one & moar]] (flatten (concat [one] (map #(vector sep %) moar))))", "problem": 40, "user": "4f43894ee4b0d7d3c9f3fd21"}, {"code": "#(loop [seq %2\n         itm %1\n         final-seq []]\n    (if (empty? seq)\n      (apply vector (butlast final-seq))\n      (recur (rest seq) itm (conj final-seq (first seq) itm))))", "problem": 40, "user": "523288fee4b035af41902a88"}, {"code": "(fn [t x] (rest (flatten (map (fn [y] (list t y)) x))))", "problem": 40, "user": "4fb1a4e4e4b081705acca27e"}, {"code": "(fn [sep coll]\n  (drop-last\n   (mapcat vector coll (repeat sep))))", "problem": 40, "user": "51a82498e4b08d8ec191b80b"}, {"code": "(fn [el xs]\n  (reverse\n   (if (empty? xs)\n     xs\n     (loop [lst (rest xs) acc (cons (first xs) nil)]\n       (if (empty? lst)\n         acc\n         (recur (rest lst) (cons (first lst) (cons el acc))))))))", "problem": 40, "user": "523c6451e4b07becd5be2222"}, {"code": "#(drop 1 (interleave (repeat %) %2))", "problem": 40, "user": "5230793be4b0035e815da383"}, {"code": "(fn [s coll]\n  (drop-last (mapcat #(vector % s) coll)))", "problem": 40, "user": "5236b6bce4b05f3be1c7c8fe"}, {"code": "(fn [x y]\n  (reduce #(conj % x %2) [(first y)] (rest y)))", "problem": 40, "user": "52379c46e4b0fae3832e99db"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "523ed522e4b057c4b7cd0a78"}, {"code": "(fn blah [ch1 co1] (let [s1 (seq co1)] (if (> (count s1) 1) (cons (first s1) (cons ch1 (blah ch1 (rest s1)))) s1)))", "problem": 40, "user": "5241fe85e4b076e5d3121f42"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "52437703e4b076204b44fabf"}, {"code": "#(rest (mapcat list (take (count %2) (cycle (list %1))) %2))", "problem": 40, "user": "5243d9a2e4b076204b44fadf"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "5241eb78e4b076e5d3121f3a"}, {"code": "(fn [sep coll]\n  (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "4ff58b05e4b0678c553fc36b"}, {"code": "#(butlast (mapcat (fn [x] (list x %)) %2))", "problem": 40, "user": "4f2d5f5de4b0d6649770a05a"}, {"code": "(fn [sep coll]\n  (concat [(first coll)] (mapcat #(vector sep %) (rest coll))))", "problem": 40, "user": "5245fbbbe4b09dbe66b56183"}, {"code": "(fn [p coll]\n  (drop-last (reduce #(conj % %2 p) [] coll)))", "problem": 40, "user": "52479487e4b05ef8e38e6373"}, {"code": "(fn my-interpose [v l]\n\t(if (= '() (rest l))\n\t\t[(first l)]\n\t\t(into [(first l) v] (my-interpose v (rest l)))\n\t)\n)", "problem": 40, "user": "51f67858e4b06ff1c25c52c5"}, {"code": "(fn [n x coll]\n  (if (> (+ n 1) (count coll))\n    coll\n    (recur (+ n 2) x (apply conj (vec (take n coll)) x (nthrest coll n))))) 1", "problem": 40, "user": "523605d1e4b05f3be1c7c8e2"}, {"code": "#(cons (first %2) \n        (interleave (repeat %1) (rest %2)))", "problem": 40, "user": "51b0e7b3e4b0c53cf2e68a6e"}, {"code": "(fn [s a] (rest (mapcat #(conj [] s %) a)))", "problem": 40, "user": "523f5be3e4b01c266ffa7fa7"}, {"code": "(fn [x xs]\n  (rest\n   (loop [acc [], xs xs]\n     (if (seq xs)\n       (recur (conj acc x (first xs))\n              (rest xs))\n       acc))))", "problem": 40, "user": "52487654e4b05ef8e38e63dc"}, {"code": "(fn [j xs] (butlast (mapcat #(vector % j) xs)))", "problem": 40, "user": "52471ac0e4b05ef8e38e6354"}, {"code": "(fn [v c] (let [vc (seq (repeat (count c) v))] (vec (take (- (* (count c) 2) 1) (reduce concat (map vector c vc))))))", "problem": 40, "user": "5245af03e4b08ba239308124"}, {"code": "#(rest (mapcat (fn [x y] [y x]) %2 (repeat %)))", "problem": 40, "user": "5246e945e4b0644eb7b0783b"}, {"code": "(fn [x coll]\n  \n  (butlast (flatten (map \n   \t(fn [elm]\n      [elm x])\n   \tcoll))))", "problem": 40, "user": "518d1b5be4b070277754617b"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "522f483ce4b032bbe342415a"}, {"code": "#(flatten (reduce (fn [a,b] [a %1 b]) %2))", "problem": 40, "user": "52485723e4b05ef8e38e63d2"}, {"code": "#(drop-last (mapcat (fn [it] [it %1]) %2))", "problem": 40, "user": "50550f43e4b0b1b9d1860eb7"}, {"code": "(fn [out el in]\n  (if (empty? (rest in))\n    (conj out (first in))\n    (recur (conj out (first in) el) el (rest in))\n    )\n  \t\n  )[]", "problem": 40, "user": "522d3a16e4b0e26240291d50"}, {"code": "; This is just hilariously hacky!\n(fn custom-interpose [sep, in-seq]\n  (butlast (flatten \n   (map (fn [in, sep] [in sep]) in-seq (take (count in-seq) (repeat sep))))))", "problem": 40, "user": "52463059e4b09dbe66b56198"}, {"code": "(fn [a se] (next (reduce (fn [d,d1] (conj d a d1)) [] se)))", "problem": 40, "user": "514daf79e4b019235f6c058b"}, {"code": "(fn [del seq] (reverse (reduce #(cons %2 (cons del %1)) (list (first seq)) (rest seq))))", "problem": 40, "user": "524cdd51e4b0752c4cb68ccc"}, {"code": "(fn[separator items]\n  (flatten (reduce #(list %1 separator %2) items)))", "problem": 40, "user": "523ab749e4b0aa37f082ed8d"}, {"code": "(fn [sep coll] (rest (mapcat #(vector sep %) coll)))", "problem": 40, "user": "51f66891e4b06ff1c25c52c1"}, {"code": "(fn [sep coll] \n  (drop 1 (mapcat #(list sep %) coll)))", "problem": 40, "user": "524be8e0e4b09eba1c0223f1"}, {"code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "51d7f34fe4b0154f82ab9303"}, {"code": "(fn separate [sep seqn]\n  (cond\n \t(empty? seqn) seqn\n   \t(empty? (rest seqn)) seqn\n   \t:else (cons (first seqn)\n               \t(cons sep\n                      (separate sep (rest seqn))))))", "problem": 40, "user": "524e4fcce4b0541d1855b7d2"}, {"code": "(fn fun14a [k x]\n  (let [t (for [i x] [i k])] (take (- (* 2 (count t)) 1) (flatten t))\n    )\n  )", "problem": 40, "user": "52132f8de4b0d32679a50651"}, {"code": "(fn [x s] (butlast (flatten (map list s (repeat (count s) x)))))", "problem": 40, "user": "524f61bee4b0541d1855b80f"}, {"code": "(fn [inter s] (rest (interleave (repeat inter) s)))", "problem": 40, "user": "523f0bbfe4b01c266ffa7f91"}, {"code": "#(rest (interleave (map (fn [_] %1) %2) %2))", "problem": 40, "user": "4f171e7d535d64f603146452"}, {"code": "(fn [n x] (drop-last (mapcat #(list % n) x)))", "problem": 40, "user": "524feb3fe4b0541d1855b81f"}, {"code": "(fn interpose1 [x y]\n                 (loop [x x y y a []]\n                   (if (empty? (rest y)) (conj a (first y))\n                       (recur x (rest y) (conj (conj a (first y)) x)))))", "problem": 40, "user": "524a74b3e4b05ef8e38e64a7"}, {"code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "problem": 40, "user": "524ae8e6e4b09eba1c0223b5"}, {"code": "(fn [sep [x & xs]] (cons x (mapcat #(list sep %) xs)))", "problem": 40, "user": "524b90fae4b09eba1c0223df"}, {"code": "(fn interp[x ys]\n  (if (> 2 (count ys))\n    [(first ys)]\n    (cons (first ys)\n          (cons x (lazy-seq (interp x (rest ys)))))))", "problem": 40, "user": "524740e7e4b05ef8e38e635d"}, {"code": "(fn [inter input]\n  (if (empty? input)\n    input\n    (loop [result (vector (first input)) lst (rest input)]\n      (if (empty? lst)\n      result\n      (recur (conj result inter (first lst)) (rest lst))))))", "problem": 40, "user": "523f1245e4b01c266ffa7f95"}, {"code": "(fn [sep xs] (rest (reduce #(conj %1 sep %2) [] xs)))", "problem": 40, "user": "52525a0ee4b0541d1855b8a2"}, {"code": "#(butlast (reduce (fn [l v] (conj l v %)) [] %2))", "problem": 40, "user": "523b1a65e4b02f719975bdbd"}, {"code": "#(drop 1 (interleave (repeat %) %2))", "problem": 40, "user": "524dd1c3e4b0f245900d275c"}, {"code": "(fn intp [y x] (if (not(empty? x))  (concat (if (> (count(rest x)) 0) (apply list [(first x) y]) [(first x)]) (intp y (rest x))   )))", "problem": 40, "user": "5245d29ae4b09dbe66b56174"}, {"code": "(fn  [filler arr] (pop (reduce #(conj %1 %2 filler) [] arr)))", "problem": 40, "user": "524f4162e4b0541d1855b806"}, {"code": "(fn ipose [v s] (butlast (interleave s (repeat v))))", "problem": 40, "user": "52452225e4b0d8acf9ed6ae6"}, {"code": "(fn [v coll] (loop [n (- (count coll) 1) acc ()] \n               (if (= n 0)\n                 (cons (first coll) acc)\n                 (recur (dec n) (cons v (cons (nth coll n) acc))))))", "problem": 40, "user": "524469dee4b0d8acf9ed6a9d"}, {"code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "problem": 40, "user": "5224060de4b01819a2de42c3"}, {"code": "#(rest (mapcat (partial list %1) %2))", "problem": 40, "user": "525431dfe4b0541d1855b970"}, {"code": "(fn [sep coll]\n   ((fn s [sep values r]\n      (if (next values)\n        (s sep (next values) (concat r [sep] [(first values)]))\n        (concat r [sep] values))\n      ) sep (next coll) [(first coll)]))", "problem": 40, "user": "52527192e4b0541d1855b8af"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "525078b6e4b0541d1855b832"}, {"code": "(fn[d x](reverse(reduce #(cons %2 (when-not (nil? %1) (cons d %1))) nil x)))", "problem": 40, "user": "525493bbe4b0541d1855b991"}, {"code": "(fn [nr coll] \n  (drop-last (mapcat #(cons %1 [nr]) coll))\n)", "problem": 40, "user": "5254f908e4b0541d1855b9ba"}, {"code": "(fn [x coll] (drop-last (mapcat #(vector % x) coll)))", "problem": 40, "user": "50002152e4b0678c553fc407"}, {"code": "(fn [sep coll]\n  (loop [result '()\n         coll coll]\n    (if (second coll)\n      (recur (concat result (list (first coll) sep)) (rest coll))\n      (concat result coll))))", "problem": 40, "user": "5256cd77e4b0541d1855ba39"}, {"code": "(fn inte\n   ([c coll]\n      (loop [result [] col coll]\n        (cond\n            (= (count col) 1) (conj result (first col))\n            (= (count col) 0) result\n         :else\n           (recur (conj result (first col) c) (rest col))\n        )\n      )\n   )\n)", "problem": 40, "user": "51d28e15e4b0d13b04db0d9b"}, {"code": "(fn [n lst] (drop-last (interleave lst (repeat (count lst) n))))", "problem": 40, "user": "5252b59de4b0541d1855b8cf"}, {"code": "#(drop 1 (interleave (repeat (count %2) %) %2))", "problem": 40, "user": "5250a9abe4b0541d1855b83b"}, {"code": "(fn [s x] (butlast (interleave x (repeat s))))", "problem": 40, "user": "5217c26fe4b0a4bccb16cab8"}, {"code": "(fn [x xs] (reduce #(conj (if (seq %) (conj % x) %) %2) [] xs))", "problem": 40, "user": "4e3a9dae535deb9a81d77f4a"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "52586d24e4b0cb4875a45cb0"}, {"code": "(fn [sep s] (rest (mapcat #(list sep %) s)))", "problem": 40, "user": "5250a13ee4b0541d1855b839"}, {"code": "#(drop-last (mapcat vector %2 (repeat %)))", "problem": 40, "user": "50aca92ee4b071b89ef26232"}, {"code": "(fn x [a b] (if (not-empty (rest b)) (cons (first b) (cons a (x a (rest b)))) b ))", "problem": 40, "user": "5149c2f1e4b0829bd132edb0"}, {"code": "(fn [el coll]\n  (butlast (mapcat #(list % el) coll)))", "problem": 40, "user": "51269362e4b083bb8f88cf09"}, {"code": "(fn myinterpose\n  [e coll]\n  (drop 1 (interleave (repeat e) coll)))", "problem": 40, "user": "523de50de4b06956f8342ca9"}, {"code": "#(reduce \n  (fn [acc el] (concat acc [%1 el])) \n  [(first %2)] \n  (rest %2))", "problem": 40, "user": "5259a16ee4b0cb4875a45ce1"}, {"code": "(fn my-interpose\n  [theval coll]\n  (when-let [s (seq coll)]\n    (if-not (empty? (rest s))\n      (cons (first s) (cons theval (my-interpose theval (rest coll))))\n      (cons (first s) (my-interpose theval (rest coll))))))", "problem": 40, "user": "50fc48dde4b0d10d794c19f6"}, {"code": "(fn interp[val s]\n  (if (seq? (next s))\n    (concat [(first s)] [val] (interp val (next s)))\n    [(first s)]))", "problem": 40, "user": "501948b3e4b0b6630b101db5"}, {"code": "(fn interp [sep x]\n    (if (= (count x) 1)\n        x\n        (conj (conj (interp sep (rest x)) sep) (first x))))", "problem": 40, "user": "52474ec2e4b05ef8e38e6361"}, {"code": "(fn [a s] (rest (mapcat #(list a %) s)))", "problem": 40, "user": "524ab5f2e4b09eba1c02239d"}, {"code": "#(rest (interleave (repeat (count %2) %) %2))", "problem": 40, "user": "525b0b51e4b0cb4875a45d01"}, {"code": "(fn join [i s]\n  (drop 1 (reduce (fn [x1 x2] (concat x1 [i x2])) [] s)))", "problem": 40, "user": "525cc6c4e4b0cb4875a45d47"}, {"code": "(fn [n1 [n2 & s1]]\n\t(reduce \n     (fn [x y] (conj x n1 y)\n     )\n     [n2] s1\n    )\n)", "problem": 40, "user": "525ba7bbe4b0cb4875a45d28"}, {"code": "(fn [x coll] (butlast (interleave coll (repeat x))))", "problem": 40, "user": "5248c4c7e4b05ef8e38e63e8"}, {"code": "(fn [x y]\n  (pop (vec (mapcat #(list % x) y))))", "problem": 40, "user": "5236cd89e4b0e010857b4e45"}, {"code": "(fn myInterpose\n  [sep coll]\n  (drop-last (reduce (fn [x y] (conj x y sep)) [] coll)))", "problem": 40, "user": "509a25b7e4b0efbae1fbc0a8"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "525a7b9fe4b0cb4875a45cf5"}, {"code": "(fn [sep coll] (rest (interleave (repeat sep) coll)))", "problem": 40, "user": "5244fa73e4b0d8acf9ed6acb"}, {"code": "(fn [sep coll] \n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "50007353e4b0678c553fc40a"}, {"code": "(fn\n  [elt lst]\n  (drop-last (interleave lst (repeat elt))))", "problem": 40, "user": "4ef7a483535dced4c769f258"}, {"code": "(fn [x y] (drop 1 (flatten (map #(conj [] %1 %2) (repeat (count y) x) y))))", "problem": 40, "user": "5210ac52e4b080a8d9b9d63e"}, {"code": "(fn [s d] (drop-last (mapcat #(list % s) d)))", "problem": 40, "user": "523eb110e4b057c4b7cd0a67"}, {"code": "(fn\n  [x coll]\n  (rest (interleave (repeat x) coll)))", "problem": 40, "user": "525fffb8e4b03e8d9a4a702b"}, {"code": "(fn interpos [sym col] \n  (let [temp (interleave col (repeat (count col) sym))]\n    (take (dec (count temp)) temp)))", "problem": 40, "user": "525aa499e4b0cb4875a45cf7"}, {"code": "(fn [v l] (->> l (mapcat #(list v %)) (rest)))", "problem": 40, "user": "525f51bde4b0cb4875a45dc8"}, {"code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "525d413be4b0cb4875a45d65"}, {"code": "(fn [sep coll] (butlast (interleave coll (replicate (count coll) sep))))", "problem": 40, "user": "524e6b68e4b0541d1855b7db"}, {"code": "(fn inter [n x] \n   (rest (reduce concat (map #(list n %) x))))", "problem": 40, "user": "525cc137e4b0cb4875a45d46"}, {"code": "(fn [x xs] (conj (mapcat #(list x %) (rest xs)) (first xs)))", "problem": 40, "user": "52618ea3e4b03e8d9a4a7064"}, {"code": "(fn [sep coll] (butlast (mapcat #(vector % sep) coll)))", "problem": 40, "user": "4f80db02e4b033992c121bf9"}, {"code": "(fn[split col] (reduce (fn[res v] \n                         (if-not (empty? res)\n                           (conj res split v)\n                           (conj res v)\n                         )) [] col))", "problem": 40, "user": "525ed5f4e4b0cb4875a45db8"}, {"code": "(fn interpos[val1 list1]\n  (if (= 1 (count list1))\n    list1\n    (concat (list (first list1) val1) (interpos val1 (rest list1)))))", "problem": 40, "user": "525d490ae4b0cb4875a45d70"}, {"code": "(fn [sep coll]\n   (rest (reduce\n    #(conj %1 sep %2) [] coll)))", "problem": 40, "user": "4f944f60e4b0dcca54ed6cc2"}, {"code": "(fn [delim s]\n    (let [lim (dec (count s))]\n      (loop [i 0 s1 s ret []]\n        (if (empty? s1)\n          ret\n          (recur (inc i) (rest s1) (if (< i lim) (conj ret (first s1) delim)  (conj ret (first s1))))))))", "problem": 40, "user": "51622fb8e4b009fba0926e3f"}, {"code": "#(->> (repeat %1) (interleave %2) drop-last)", "problem": 40, "user": "505345d9e4b0517ede0d0a06"}, {"code": "(fn [v s]\n  (reverse (rest (reverse (flatten (map (fn [x] [x v]) s))))))", "problem": 40, "user": "4e8dd6cb535d65386fec213b"}, {"code": "#(drop-last (interleave %2 (repeat %)))", "problem": 40, "user": "524f213be4b0541d1855b7ff"}, {"code": "(fn join [sep l]\n  (cond\n   (empty? l) '()\n   (empty? (rest l)) l\n   :else (cons (first l) (cons sep (join sep (rest l))) )\n   )\n  \n  )", "problem": 40, "user": "5252cbe7e4b0541d1855b8d2"}, {"code": "(fn [x coll] (loop [coll coll\n                    result []]\n               (if (empty? coll) (pop result)\n                 (recur (rest coll) (conj result (first coll) x)))))", "problem": 40, "user": "5264301fe4b03e8d9a4a70ca"}, {"code": "#(rest(interleave(repeat %1) %2))", "problem": 40, "user": "5190772de4b09156e89b2a0a"}, {"code": "(fn a [s li]\n  (if (empty? li) []\n    (if (empty? (rest li))\n      (concat [(first li)] (a s (rest li)))\n      (concat [(first li)] [s] (a s (rest li)))\n      )\n    )\n  )", "problem": 40, "user": "5263b5e6e4b03e8d9a4a70b7"}, {"code": "(fn [b a] (drop-last (mapcat #(list %1 b) a)))", "problem": 40, "user": "52655949e4b03e8d9a4a710b"}, {"code": "(fn [x coll]\n   (butlast (interleave coll (take (count coll) (repeat x)))))", "problem": 40, "user": "52090567e4b0e152394d76ed"}, {"code": "(fn my-interpose[ele coll]\n\t\t  (let [res (reduce (fn [col n]\n\t\t\t\t\t  (vec (conj (vec (conj col n)) ele)))\n\t\t\t\t  [] coll)]\n\t\t\t(butlast res)))", "problem": 40, "user": "51f2851fe4b0210f90e7454b"}, {"code": "(fn [x s] (flatten (reduce #(list %1 x %2) s)))", "problem": 40, "user": "524c7fcfe4b0752c4cb68cbd"}, {"code": "#(drop-last (interleave %2 (repeat %)))", "problem": 40, "user": "525a8875e4b0cb4875a45cf6"}, {"code": "#(rest (mapcat (partial list %) %2))", "problem": 40, "user": "5268f5b4e4b03e8d9a4a71cf"}, {"code": "(fn my-inter [sep coll]\n  (rest (reverse (reduce #(conj %1 sep %2) '() coll))))", "problem": 40, "user": "5264383be4b03e8d9a4a70cb"}, {"code": "(fn ntrpose [value lst]\n  (if (<= (count lst) 1) lst\n    (cons (first lst) (cons value (ntrpose value (rest lst))))))", "problem": 40, "user": "525372ade4b0541d1855b8f3"}, {"code": "(fn [del xs]\n    (let \n        [list (mapcat #(list % del) xs) \n         length (* (count xs) 2)]\n      (take (- length 1) list)))", "problem": 40, "user": "526302eee4b03e8d9a4a70a2"}, {"code": "(fn [a collection]\n  (pop (vec (apply concat (reduce (fn [x y] (merge x [y a])) [] collection)))))", "problem": 40, "user": "52616198e4b03e8d9a4a705e"}, {"code": "#(butlast (mapcat vector %2 (repeat %1)))", "problem": 40, "user": "52628bb0e4b03e8d9a4a7089"}, {"code": "(fn [n l] \n    (rest (mapcat\n\t#(list %1 %2) \n\t(repeat (count l) n)\n        l\n    ))\n  )", "problem": 40, "user": "52593207e4b0cb4875a45cd3"}, {"code": "#(butlast \n\t(mapcat list %2 \n\t\t(take (count %2) \n\t\t\t(repeat %1))))", "problem": 40, "user": "525873e8e4b0cb4875a45cb2"}, {"code": "#(butlast (flatten (map vector %2 (repeat %1))))", "problem": 40, "user": "5268eb68e4b03e8d9a4a71c6"}, {"code": "#(rest (mapcat list (repeat %) %2))", "problem": 40, "user": "4ec11b79535dfed6da9c6da6"}, {"code": "(fn [n xs]\n   (butlast (flatten (map #(list %1 n) xs))))", "problem": 40, "user": "52667ecfe4b03e8d9a4a713e"}, {"code": "(fn [v s] (rest (interleave (repeat v) s)))", "problem": 40, "user": "5261aebbe4b03e8d9a4a7066"}, {"code": "#(drop-last (mapcat (fn [n] [n %1]) %2))", "problem": 40, "user": "51ca82e9e4b08b1cbd0d9488"}, {"code": "(fn [x v]\n  (rest (mapcat #(list x %) v)))", "problem": 40, "user": "52526161e4b0541d1855b8a6"}, {"code": "(fn [delim coll]\n  (loop [c coll res []]\n    (if (= 1 (count c))\n      (conj res (first c))\n      (recur (rest c) (conj res (first c) delim)))))", "problem": 40, "user": "5116e176e4b0063b4e3e16d7"}, {"code": "#(butlast (mapcat (fn [x] [x %]) %2))", "problem": 40, "user": "526c2340e4b03e8d9a4a7281"}, {"code": "(fn interp [value coll]\n  (drop-last (interleave coll (repeat value))))", "problem": 40, "user": "5264b4a9e4b03e8d9a4a70e0"}, {"code": "#(rest (mapcat (partial list %) %2))", "problem": 40, "user": "525a643be4b0cb4875a45cf1"}, {"code": "(fn inter [v s]\n  (if (= 1 (count s))\n    s\n    (cons (first s) (cons v (lazy-seq (inter v (rest s)))))))", "problem": 40, "user": "526439a4e4b03e8d9a4a70cc"}, {"code": "(let [inter\n      (fn [value coll result]\n        (if (= 1 (count coll))\n          (conj result (first coll))\n          (recur value (next coll) (conj result (first coll) value))\n        )\n      )]\n  (fn [value coll] (inter value coll []))\n)", "problem": 40, "user": "526dd90de4b03e8d9a4a72fe"}, {"code": "#(drop-last (mapcat vector %2 (repeat %1)))", "problem": 40, "user": "5244cf39e4b0d8acf9ed6ac5"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "5267d9bde4b03e8d9a4a7188"}, {"code": "#(drop-last(vec (interleave %2 (repeat (count %2) %1))))", "problem": 40, "user": "512318b6e4b03b44edbed433"}, {"code": "#(next (mapcat (fn [x] [% x]) %2))", "problem": 40, "user": "5012da69e4b0c8732600222d"}, {"code": "(fn [v coll]\n  (reduce\n   (fn [res e] \n     (if (empty? res)\n       (conj res e)\n       (conj res v e)))\n   []\n   coll))", "problem": 40, "user": "521af852e4b0c4ef0be8301c"}, {"code": "(fn [sep coll]\n   (butlast (interleave coll (repeat sep))))", "problem": 40, "user": "523bde95e4b07becd5be2202"}, {"code": "(fn [i s]\n  (drop-last (flatten (map #(list % i) s))))", "problem": 40, "user": "526f9715e4b03e8d9a4a7372"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "526143b7e4b03e8d9a4a705a"}, {"code": "(fn myInterpose [val col]\n  (pop \n    (reduce\n      #(conj %1 %2 val)\n      []\n      col)))", "problem": 40, "user": "526ee63de4b03e8d9a4a733f"}, {"code": "#(drop-last (flatten (map (fn [x] [x %1]) %2)))", "problem": 40, "user": "5260341ee4b03e8d9a4a7034"}, {"code": "(fn [x xs]\n  (drop-last (mapcat #(list %1 %2) xs (repeat x))))", "problem": 40, "user": "511aa2a4e4b0c87c59c9670a"}, {"code": "#(drop-last 1 (interleave %2 (repeat %1)  ))", "problem": 40, "user": "5271b940e4b03e8d9a4a73fb"}, {"code": "(fn ite\n  ([i lst] (ite [(first lst)] i (next lst)))\n  ([l i lst]\n   (if (empty? lst) l\n     (ite (conj l i (first lst)) i (next lst)))))", "problem": 40, "user": "5272669de4b03e8d9a4a742e"}, {"code": "(fn [ele seqs]\n  (loop[result (list (first seqs))\n        others (rest seqs)]\n    (if(empty? others)\n      result\n      (recur (concat result (list ele (first others)))\n             (rest others)))))", "problem": 40, "user": "5273562ae4b03e8d9a4a7479"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "5272d4b7e4b03e8d9a4a7453"}, {"code": "#(butlast(mapcat list %2 (repeat (count %2) %1)))", "problem": 40, "user": "52727d52e4b03e8d9a4a7439"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "51f4d46ee4b0fca5e8b48243"}, {"code": "#(vec (butlast (interleave %2 (repeat (count %2) %))))", "problem": 40, "user": "5269c150e4b03e8d9a4a71f8"}, {"code": "(fn f [v xs] (if (> 2 (count xs)) (list (last xs)) (cons (first xs) (cons v (f v (rest xs))))))", "problem": 40, "user": "51422945e4b0b50abeb46b2e"}, {"code": "(fn [i s] (take (dec (* 2 (count s))) (interleave s (repeat i))))", "problem": 40, "user": "526d6968e4b03e8d9a4a72d9"}, {"code": "#(rest (interleave (repeat (count %2) %1) %2))", "problem": 40, "user": "52747090e4b03e8d9a4a74a5"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "52736ca1e4b03e8d9a4a747e"}, {"code": "#(rest (interleave (cycle (list %1)) %2))", "problem": 40, "user": "526bc746e4b03e8d9a4a7271"}, {"code": "(fn [val coll] (rest (mapcat #(list val %) coll)))", "problem": 40, "user": "526397f1e4b03e8d9a4a70b6"}, {"code": "(fn [sep input]\n  (-> (apply concat\n       (map \n        (fn [elm] (vector elm sep))\n        input)) reverse rest reverse))", "problem": 40, "user": "4f9b3532e4b0dcca54ed6d13"}, {"code": "#(drop-last 1 (interleave %2 (repeat %1)))", "problem": 40, "user": "514f6679e4b0b449e54b8df5"}, {"code": "#(rest (mapcat vector (repeat %1) %2))", "problem": 40, "user": "5276aa0de4b03e8d9a4a74ea"}, {"code": "(fn replic [sprt seqn]\n  (butlast(flatten (map #(list %1 sprt) seqn))))", "problem": 40, "user": "5274eb56e4b03e8d9a4a74bb"}, {"code": "#(drop-last (mapcat vector %2 (repeat %1)))", "problem": 40, "user": "52795656e4b03e8d9a4a7534"}, {"code": "(fn my-interpose [val seq]\n    (when (not (empty?  seq))\n      (if (empty? (rest seq)) (cons (first seq) '())\n        (cons (first seq) (cons val\n                          (my-interpose val (rest seq)))))))", "problem": 40, "user": "50651de3e4b0b1b6c8b1d85f"}, {"code": "(fn a [s c] (butlast(mapcat #(identity [% s]) c)))", "problem": 40, "user": "527a8eb7e4b03e8d9a4a755f"}, {"code": "(fn [sep coll]\n(drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "527b856fe4b03e8d9a4a758d"}, {"code": "(fn [x y] (drop-last (interleave y (repeat (count y) x))))", "problem": 40, "user": "527818f7e4b03e8d9a4a7519"}, {"code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "52711255e4b03e8d9a4a73d7"}, {"code": "(fn [x y] (drop 1 (interleave (repeat x) y)))", "problem": 40, "user": "52563d02e4b0541d1855ba10"}, {"code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "problem": 40, "user": "526f79aee4b03e8d9a4a736a"}, {"code": "#(butlast (flatten (for [x [%1] y %2] [y x])))", "problem": 40, "user": "5277b9b5e4b03e8d9a4a750d"}, {"code": "#(rest (mapcat (partial list %1) %2))", "problem": 40, "user": "527675cbe4b03e8d9a4a74e2"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "4ee85476535d93acb0a6687c"}, {"code": "(fn [value sequ]\n  (loop [s sequ n []]\n    (cond\n     (empty? s) n\n     (= 1 (count s)) (recur (rest s) (conj n (first s)))\n     :else (recur (rest s) (conj n (first s) value)))))", "problem": 40, "user": "4e920f44535dbda64a6f6afd"}, {"code": "#(drop-last (interleave %2 (repeat (count %2) %1)))", "problem": 40, "user": "527236d4e4b03e8d9a4a741f"}, {"code": "(fn [x coll]\n  (rest (mapcat list (repeat x) coll)))", "problem": 40, "user": "527b9beee4b03e8d9a4a7590"}, {"code": "(fn my-interpose [x coll]\n   (loop [c1 (repeat x)\n        c2 coll\n         cr []]\n    (if (or (empty? c1) (empty? c2))\n      (drop 1 cr)\n     (recur (rest c1) (rest c2) (conj (conj cr (first c1)) (first c2))))))", "problem": 40, "user": "521cd8e4e4b0c4ef0be8309f"}, {"code": "(fn [a b] (butlast (reduce #(conj % %2 a) [] b)))", "problem": 40, "user": "5262c73fe4b03e8d9a4a7098"}, {"code": "(fn my-interpose [s lst]\n  (rest\n   (reverse\n   (reduce (fn [xs x] (conj xs s x))\n           '()\n           lst))))", "problem": 40, "user": "527ccaf4e4b0757a1b17136d"}, {"code": "(fn[i,s](rest (mapcat #(list i %) s)))", "problem": 40, "user": "526a3412e4b03e8d9a4a721e"}, {"code": "(fn [n s] (into [] (take (- (* 2 (count s)) 1) (interleave s (repeat (count s) n)))))", "problem": 40, "user": "525c575be4b0cb4875a45d38"}, {"code": "#(drop 1 (mapcat (partial conj (vector %)) %2))", "problem": 40, "user": "52810225e4b0757a1b171418"}, {"code": "(fn [sep col] ((comp butlast reduce) #(conj % %2 sep) [] col))", "problem": 40, "user": "50be9b4ae4b00fb48fed2ef6"}, {"code": "#(rest (mapcat list (repeat %) %2))", "problem": 40, "user": "519ef784e4b087743fad2198"}, {"code": "(fn [x, aseq] \n  (rest (reverse (apply concat(zipmap aseq (repeat (count aseq) x))))))", "problem": 40, "user": "52812b9fe4b0757a1b171423"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "527b8881e4b03e8d9a4a758e"}, {"code": "#(drop 1 (interleave (repeat %) %2))", "problem": 40, "user": "52851da0e4b0239c8a67adea"}, {"code": "(fn [v os] \n    (loop [s os acc []] \n      (if (> (count s) 1)  \n        (recur (rest s) (concat acc [(first s) v]))\n        (concat acc s))))", "problem": 40, "user": "511dada0e4b0a5c68a34840c"}, {"code": "(fn [i xs] (apply concat (list (first xs)) (map #(list i %) (rest xs))))", "problem": 40, "user": "52741177e4b03e8d9a4a749b"}, {"code": "#(butlast (mapcat list %2 (repeat %)))", "problem": 40, "user": "51aefceee4b09397d5109797"}, {"code": "(fn [x col] (butlast (mapcat #(vector %1 %2) col (repeat x))))", "problem": 40, "user": "4f9510b5e4b0dcca54ed6cc7"}, {"code": "(fn [sep xs]\n  (drop 1\n    (mapcat (fn [x] (list sep x)) xs)))", "problem": 40, "user": "5255bf1ee4b0541d1855b9f1"}, {"code": "#(drop 1 (interleave (repeat %) %2))", "problem": 40, "user": "522a01ade4b0590a43906ced"}, {"code": "(fn abob [j x]\n  (drop-last (interleave x (repeat j))))", "problem": 40, "user": "52890634e4b0239c8a67ae5e"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "51e38568e4b0c611d6113e43"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "527ba29de4b03e8d9a4a7594"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "527dc2aee4b0757a1b17138d"}, {"code": "(fn[sep lst]\n  (loop [l lst\n         ln []]\n    (if (empty? (rest l))\n      (conj ln (first l))\n      (recur (rest l) (conj ln (first l) sep)))\n    ))", "problem": 40, "user": "502f6c56e4b0842eb223d8bb"}, {"code": "(fn [element input]\n  (loop [data input result []]\n    (if (next data)\n      (recur\n       (rest data)\n       (conj result (first data) element))\n      (conj result (first data)))))", "problem": 40, "user": "528bba38e4b0239c8a67aea9"}, {"code": "(fn\n  [x coll]\n  (reduce #(conj %1 x %2) (vec (list (first coll))) (rest coll)))", "problem": 40, "user": "5289bba9e4b0239c8a67ae69"}, {"code": "#(rest (mapcat (partial list %1) %2))", "problem": 40, "user": "512b07f7e4b078b06821febb"}, {"code": "(fn join [v l] (cond (= (count l) 1) l :else (cons (first l) (cons v (join v (rest l))))))", "problem": 40, "user": "528b9efee4b0239c8a67aea0"}, {"code": "#(drop-last (interleave %2 (repeat %)))", "problem": 40, "user": "52446511e4b0d8acf9ed6a9a"}, {"code": "#(rest (flatten (map list (repeat (count %2) %1) %2)))", "problem": 40, "user": "5277da8ee4b03e8d9a4a7514"}, {"code": "#(cons (first %2) (mapcat list (repeat %) (rest %2)))", "problem": 40, "user": "528d1094e4b0239c8a67aebe"}, {"code": "(fn [x coll] (rest (mapcat #(list x %) coll)))", "problem": 40, "user": "528b08efe4b0239c8a67ae8a"}, {"code": "(fn myinterp [val coll]\n  (into [(first coll)]\n        (mapcat (fn [x] [val x])\n                (rest coll))))", "problem": 40, "user": "4f35b2ace4b0e243712b1ec5"}, {"code": "(fn [middle things] \n   (loop [x (first things) oldthings (rest things) newThings '()]\n     (if x\n       (recur (first oldthings) \n              (rest oldthings) \n              (conj newThings middle x))\n       (rest (reverse newThings))\n       )\n     )\n   )", "problem": 40, "user": "4fbd6210e4b081705acca303"}, {"code": "(fn [sep coll] (drop-last (interleave coll (repeat sep))))", "problem": 40, "user": "525947f1e4b0cb4875a45cd8"}, {"code": "(fn [a x] (drop-last (apply concat (map #(list % a) x))))", "problem": 40, "user": "52808897e4b0757a1b171404"}, {"code": "(fn [sep listing]\n  (drop-last (vec (flatten (concat (map (fn [x] [x sep]) listing)))))\n  )", "problem": 40, "user": "52737333e4b03e8d9a4a747f"}, {"code": "(fn t[spliter l] (\n    if (= 1 (count l))\n    l\n    (apply conj (t spliter (rest l)) (reverse (list (first l) spliter)))\n))", "problem": 40, "user": "4f03c039535dcb61093f6b5e"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "528a791ae4b0239c8a67ae77"}, {"code": "#(rest (interleave (repeat (count %2) %1) %2))", "problem": 40, "user": "52753740e4b03e8d9a4a74c1"}, {"code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "5290257ae4b0239c8a67af03"}, {"code": "(fn f [v [head & tail]]\n    (when head\n      (cons head\n        (when tail\n          (cons v (f v tail))))))", "problem": 40, "user": "4f0f36a7535d0136e6c22336"}, {"code": "(fn [x y]\n  (reduce (fn [a b] \n            (conj a x b)\n            ) (vector (first y)) (next y))\n  )", "problem": 40, "user": "528ce039e4b0239c8a67aebc"}, {"code": "(fn [a b] (rest (mapcat #(list a %) b)))", "problem": 40, "user": "528e64b7e4b0239c8a67aedd"}, {"code": "(fn [sep items]\n  (let [almost-all (take (dec (count items)) items)\n        last-i (last items)]\n  (conj (vec (flatten (for [i almost-all] [i sep])))last-i)))", "problem": 40, "user": "5098db05e4b0cae2931060a2"}, {"code": "(fn [sep coll] (butlast (flatten (map #(list %1 sep) coll))))", "problem": 40, "user": "4f3d83b5e4b0e243712b1f69"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "528e95efe4b0239c8a67aee2"}, {"code": "(fn [v s] (drop-last (mapcat #(list % v) s)))", "problem": 40, "user": "5294e44de4b02ebb4ef75016"}, {"code": "(fn [v c] (butlast (mapcat #(vector % v) c)))", "problem": 40, "user": "52951156e4b02ebb4ef7501b"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "52950ab6e4b02ebb4ef7501a"}, {"code": "(fn [a s]                                                                              \n   (rest                                                                                \n    (reduce (fn [l x]                                                                   \n              (conj (conj l a) x))                                                      \n            []                                                                          \n            s)))", "problem": 40, "user": "4f3656d1e4b0e243712b1ec9"}, {"code": "(fn [sep s] (rest (mapcat #(list sep %) s)))", "problem": 40, "user": "50928ecfe4b097f48cc38570"}, {"code": "#(pop (vec (mapcat (fn [el] (list el %)) %2)))", "problem": 40, "user": "5287f34ee4b0239c8a67ae43"}, {"code": "#(next (interleave (repeat %1) %2))", "problem": 40, "user": "5281a445e4b0757a1b17143a"}, {"code": "(fn my-interpose [x coll]  (if (< 1 (count coll))\n                              (conj (my-interpose x (rest coll)) x (first coll))\n                              coll))", "problem": 40, "user": "5296aa9be4b02ebb4ef75034"}, {"code": "#(reverse( rest( reverse (flatten (map (fn [x] (vector x %1)) %2)))))", "problem": 40, "user": "5296008fe4b02ebb4ef7502a"}, {"code": "#(next (interleave (repeat %1) %2))", "problem": 40, "user": "52990271e4b02ebb4ef7506d"}, {"code": "#(next (interleave (repeat %) %2))", "problem": 40, "user": "51ad244fe4b09397d510977f"}, {"code": "(fn my-interpose [s col]\n  (loop [x (first col) y (rest col) v []]\n    (if-not (empty? y)\n      (recur (first y) (rest y) (conj v x s))\n      (conj v x))))", "problem": 40, "user": "4f6e7073e4b07046d9f4efd8"}, {"code": "(fn myinterpose [sep input] (drop-last (interleave input (repeat sep))))", "problem": 40, "user": "51c214bce4b0d204dbe2ca1c"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "52140b53e4b0961f15ac4d7e"}, {"code": "(fn [sep coll]\n  (butlast (flatten (for [itm coll] (concat [itm] [sep])))))", "problem": 40, "user": "528b01a0e4b0239c8a67ae89"}, {"code": "(fn [between xs]\n  (cons (first xs) (mapcat (fn [x] [between x]) (rest xs))))", "problem": 40, "user": "50294c28e4b0b33e9bf6fdef"}, {"code": "#(drop 1 (interleave (repeat %) %2))", "problem": 40, "user": "527094f0e4b03e8d9a4a73b3"}, {"code": "#(let [[x & xs] %2]\n   (cons x\n      (apply concat (map (fn [x] (list %1 x)) xs\n                         )\n             )\n         )\n   )", "problem": 40, "user": "5298d3f4e4b02ebb4ef75068"}, {"code": "(fn [x xs]\n  (butlast (interleave xs (repeat x))))", "problem": 40, "user": "5298cc88e4b02ebb4ef75065"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4e72187b535d5021c1a8965b"}, {"code": "(fn  [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "51e05dfae4b01188f0627543"}, {"code": "(fn interpose2 [inter arr] (if (empty? arr) \n                               '()\n                               (if (= (count arr) 1)\n                                 [(first arr)]\n                                  (concat \n                                    (concat [(first arr)] [inter]) (interpose2 inter \n                                                                               (rest arr))))))", "problem": 40, "user": "525b12b1e4b0cb4875a45d04"}, {"code": "(fn pose [e s]\n  (if (= 1 (count s)) s\n    (cons (first s) (cons e (pose e (rest s))))))", "problem": 40, "user": "529ce629e4b04e0c58e87b6e"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "5273b883e4b03e8d9a4a748f"}, {"code": "#(rest (mapcat (partial vector %) %2))", "problem": 40, "user": "509fe759e4b08df8156e9e43"}, {"code": "(fn [pos xs]\n  (drop 1(reduce #(concat %1 (list pos %2)) '() xs)))", "problem": 40, "user": "52a04f0ee4b04e0c58e87bc1"}, {"code": "(fn ip [x [h & t]]\n  (if (seq t)\n    (concat [h x] (ip x t))\n    [h]))", "problem": 40, "user": "52a1acb2e4b04e0c58e87bdb"}, {"code": "(fn [sep l] (butlast (mapcat (partial conj (list sep)) l )))", "problem": 40, "user": "52a09e05e4b04e0c58e87bc9"}, {"code": "(fn [inter col]\n  (butlast (interleave col (repeat inter))))", "problem": 40, "user": "52a32876e4b04e0c58e87bfb"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "529e8ba9e4b04e0c58e87b99"}, {"code": "(fn\n  [sep items]\n  (let [sepers (repeat (count items) sep)\n        new (interleave items sepers)]\n      \n    (drop-last 1 new)))", "problem": 40, "user": "51d8f711e4b02ceefd947748"}, {"code": "#(next (mapcat (fn [x] [% x]) %2))", "problem": 40, "user": "4fe91fa2e4b0547ebccb2440"}, {"code": "(fn[a b] (drop-last(mapcat #(vector % a)b)))", "problem": 40, "user": "5294b190e4b02ebb4ef75011"}, {"code": "(fn [s c] (rest (reduce (fn [x y] (conj x s y)) [] c)))", "problem": 40, "user": "5226f8e9e4b04e78ff2e199a"}, {"code": "(fn [sep coll] \n (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "528e1c88e4b0239c8a67aed1"}, {"code": "#(drop-last (interleave %2 (repeat %)))", "problem": 40, "user": "52699a0ee4b03e8d9a4a71f2"}, {"code": "#(drop-last (mapcat list %2 (repeat %1)))", "problem": 40, "user": "52a503e4e4b0c58976d9abe1"}, {"code": "(fn [s l] (rest (mapcat #(list s %) l)))", "problem": 40, "user": "528652fbe4b0239c8a67ae14"}, {"code": "(fn [s l]\n  (loop [result [] working l]\n    (let [c (first working)\n          left (rest working)\n          nxt (conj result c)]\n      (if (empty? left)\n\t\tnxt\n        (recur (conj nxt s) left)))))", "problem": 40, "user": "4f77b68de4b0fbe0118ec581"}, {"code": "(fn [el, lst] (rest (flatten (reduce #(list %1 el %2) '() lst))) )", "problem": 40, "user": "5290ffaee4b0239c8a67af10"}, {"code": "(fn [i l] (drop-last (mapcat #(list % i) l)))", "problem": 40, "user": "4ec1619b535dfed6da9c6dab"}, {"code": "(fn my-interpose[n x] (vec (rest (interleave (take (count x) (repeat n)) x))))", "problem": 40, "user": "52a1edd6e4b04e0c58e87be4"}, {"code": "(fn f [v c]\n  (cons\n   (first c)\n   (mapcat #(list v %) (rest c))\n   \n   )\n)", "problem": 40, "user": "528cf6f7e4b0239c8a67aebd"}, {"code": "(fn smash [delim coll]\n  (loop [lst coll\n         acc []]\n    (if (empty? lst)\n      (take (dec (count acc)) acc)\n      (recur (rest lst) (conj acc (first lst) delim)))))", "problem": 40, "user": "52a6ed15e4b0c58976d9ac0a"}, {"code": "#(into (empty %2) (drop 1 (interleave (repeat %) %2)))", "problem": 40, "user": "529d292fe4b04e0c58e87b74"}, {"code": "(fn [sep coll]\n  (butlast (interleave coll (repeat (count coll) sep))))", "problem": 40, "user": "5298c83de4b02ebb4ef75064"}, {"code": "(partial \n #(if (empty? %3) (drop-last 1 %1) \n    (recur (concat %1 [(first %3) %2]) %2 (rest %3)))'())", "problem": 40, "user": "5273e006e4b03e8d9a4a7495"}, {"code": "(fn [y xs]\n  (concat \n    (apply concat\n      (map #(list % y) (drop-last xs)))\n    (list (last xs))))", "problem": 40, "user": "529e3a4fe4b04e0c58e87b92"}, {"code": "#(butlast (mapcat list %2 (repeat %)))", "problem": 40, "user": "51929214e4b08962174cf74c"}, {"code": "(fn [delim coll]\n((comp reverse rest reverse)\n    (interleave\n        coll\n        (take (count coll) (repeat delim))\n        )))", "problem": 40, "user": "5289f1f4e4b0239c8a67ae6d"}, {"code": "#(rest (mapcat list (repeat %) %2))", "problem": 40, "user": "528a3e14e4b0239c8a67ae72"}, {"code": "(fn [del arr] (flatten (reduce (fn [x y] (concat `(~x ~del ~y))) arr)))", "problem": 40, "user": "52a5d1f3e4b0c58976d9abf1"}, {"code": "#(butlast (mapcat list %2 (repeat %1)))", "problem": 40, "user": "52a5f1e6e4b0c58976d9abf4"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "5254ef3de4b0541d1855b9b8"}, {"code": "(fn [x coll]\n  (butlast (reduce #(concat %1 [%2 x]) (empty coll) coll)))", "problem": 40, "user": "52ab6de1e4b0c58976d9ac78"}, {"code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "problem": 40, "user": "52295917e4b04c906c9c6a6f"}, {"code": "(fn [x s]\n  (vec (rest (apply concat (for [e s] [x e])))))", "problem": 40, "user": "4ef9b021535dced4c769f269"}, {"code": "(fn [i s] (butlast (flatten (map #(list %1 i) s))))", "problem": 40, "user": "52a69e06e4b0c58976d9ac04"}, {"code": "(fn [n xs]\n  (butlast (interleave xs (repeat (count xs) n))))", "problem": 40, "user": "52a779fce4b0c58976d9ac1a"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "52a62e16e4b0c58976d9abf9"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "51937eb3e4b04df54c098022"}, {"code": "#(take (- (* 2 (count %2)) 1) (interleave %2 (repeat %)) )", "problem": 40, "user": "52ac41fee4b0c58976d9ac85"}, {"code": "#(drop-last (interleave %2 (repeat  %1)))", "problem": 40, "user": "52afbc69e4b0c58976d9acc0"}, {"code": "#((fn rec [l r c]\n    (if (> (count r) 1)\n      (rec l (rest r) (concat c (list (first r) l)))\n      (concat c (list (first r)))))\n  %1 %2 [])", "problem": 40, "user": "52ab61f5e4b0c58976d9ac75"}, {"code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "527c036ee4b03e8d9a4a75a5"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "529d4f4be4b04e0c58e87b79"}, {"code": "(fn [x y] (reduce #(concat %1 [x] [%2]) [(first y)] (rest y)))", "problem": 40, "user": "52aec666e4b0c58976d9acb1"}, {"code": "#(vec (butlast (interleave %2 (repeat %))))", "problem": 40, "user": "4ee8b9c9535d93acb0a66884"}, {"code": "(fn f [sp l]\n  (drop 1 (interleave (repeat sp) l)))", "problem": 40, "user": "52b0323ee4b0c58976d9acc6"}, {"code": "(fn [v s] (rest (mapcat #(vector v %) s)))", "problem": 40, "user": "527c040be4b03e8d9a4a75a7"}, {"code": "(fn [v l]\n  (if (empty? l)\n    []\n    (loop [rv [(first l)] r (rest l)]\n      (if (empty? r)\n        rv\n        (recur (concat rv [v (first r)]) (rest r))))))", "problem": 40, "user": "527ba695e4b03e8d9a4a7596"}, {"code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "52b1d41ce4b0c58976d9ace6"}, {"code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "problem": 40, "user": "52aad30ce4b0c58976d9ac6d"}, {"code": "(fn [x y] (drop-last \n           (interleave y (repeat (count y) x))\n           )\n  )", "problem": 40, "user": "52774dd2e4b03e8d9a4a74ff"}, {"code": "#(loop [rst %2 acc []]\n   (if (= (count rst) 1)\n     (conj acc (first rst))\n     (recur (rest rst) (conj acc (first rst) %1))))", "problem": 40, "user": "52b405e1e4b0c58976d9ad15"}, {"code": "(fn [x coll] (butlast (reduce concat (for [v coll] [v x]))))", "problem": 40, "user": "515896f2e4b059418b97f0a8"}, {"code": "(fn my-interpose [sep coll]\n      (concat (list (first coll) sep)\n              (let [the-rest (rest coll)]\n                (if (next the-rest)\n                  (my-interpose sep the-rest)\n                  the-rest))))", "problem": 40, "user": "509e62a8e4b08df8156e9e2e"}, {"code": "(fn [x coll] ((fn [x coll new-coll] (if (empty? (rest coll)) (conj new-coll (first coll)) (recur x (rest coll) (conj new-coll (first coll) x)))) x coll []))", "problem": 40, "user": "52b43468e4b0c58976d9ad1b"}, {"code": "#(-> (mapcat (fn [x] (list x %)) %2) drop-last)", "problem": 40, "user": "52b5edd1e4b0c58976d9ad3c"}, {"code": "#(into (empty %2) (drop-last (mapcat vector %2 (repeat %1))))", "problem": 40, "user": "524f4256e4b0541d1855b808"}, {"code": "(fn [n coll] (drop-last (mapcat vector coll (repeat n))))", "problem": 40, "user": "52a9154ee4b0c58976d9ac3b"}, {"code": "(fn ip [x s]\n  (cond\n    (empty? s) ()\n    (empty? (rest s)) (list (first s))\n    :else (cons (first s) (cons x (ip x (rest s))))))", "problem": 40, "user": "527cd633e4b0757a1b17136f"}, {"code": "(fn [a b] (into [] (take (- (* 2 (count b)) 1) (mapcat (fn [x] [x a]) b))))", "problem": 40, "user": "526fce6fe4b03e8d9a4a7383"}, {"code": "(fn ip [x coll]\n       (if (= (rest coll) ())\n         coll\n         (concat [(first coll) x] (ip x (rest coll)))))", "problem": 40, "user": "52a88c4de4b0c58976d9ac30"}, {"code": "(fn [sep xs]\n  (butlast (mapcat #(vector % sep) xs)))", "problem": 40, "user": "52b65f26e4b0c58976d9ad43"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "52a1c6cee4b04e0c58e87be1"}, {"code": "(fn [sep s] (rest (mapcat #(list sep %) s)))", "problem": 40, "user": "51ecb0fee4b0bb5070431583"}, {"code": "(fn [e coll]\n  (butlast (interleave coll (repeat e))))", "problem": 40, "user": "529b5301e4b02ebb4ef7509f"}, {"code": "(fn my-interpose [sep coll]\n  (let [c (first coll)]\n    (if (second coll)\n      (lazy-seq (cons c (cons sep (my-interpose sep (rest coll)))))\n      [c])))", "problem": 40, "user": "52a55adee4b0c58976d9abe7"}, {"code": "(fn [n x] (rest (reduce #(conj %1 n %2) [] x)))", "problem": 40, "user": "52b60e94e4b0c58976d9ad3e"}, {"code": "(fn [j [x & xs]] (reduce #(concat %1 [j %2]) [x] xs))", "problem": 40, "user": "4fc3a72ae4b081705acca342"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "52b453b0e4b0c58976d9ad21"}, {"code": "(fn [v coll] (drop 1 (mapcat #(vector v %) coll)))", "problem": 40, "user": "525fea5ae4b03e8d9a4a7026"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "4fa38e3fe4b081705acca190"}, {"code": "#(drop-last 1 (interleave %2 (repeat %1)))", "problem": 40, "user": "527fd663e4b0757a1b1713de"}, {"code": "(fn minterpose [sep coll]\n  (rest (flatten (map #(list sep %) coll))))", "problem": 40, "user": "51852961e4b0da5a5be3babb"}, {"code": "(fn interp [x y] (drop-last (mapcat #(list %2 %1) (repeat (count y) x) y)))", "problem": 40, "user": "52b2d16ae4b0c58976d9acf8"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "52b42d7ee4b0c58976d9ad19"}, {"code": "#(loop [xs %2 acc []]\n   (if (empty? xs)\n     (pop acc)\n     (recur (rest xs) (conj acc (first xs) %1))))", "problem": 40, "user": "52b8af15e4b07a9af57922b5"}, {"code": "(fn [a lst] (reduce #(conj %1 a %2) [(first lst)] (rest lst)))", "problem": 40, "user": "52aa16d1e4b0c58976d9ac5a"}, {"code": "(fn [sep xs] (cons (first xs) (mapcat (fn [x] [sep x]) (rest xs))))", "problem": 40, "user": "52ba6d0be4b07a9af57922d2"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "52ba2af3e4b07a9af57922cc"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "52b02329e4b0c58976d9acc5"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "50ed8fd1e4b06330c1f87c3f"}, {"code": "(fn [i s] (butlast (mapcat #(list % i) s)))", "problem": 40, "user": "52ba43d0e4b07a9af57922cd"}, {"code": "(fn myinterpose [seperator l]\n  (str seperator l)\n  (if (> (count l) 1)\n    (concat (list (first l) seperator) (myinterpose seperator (rest l)))\n    l))", "problem": 40, "user": "52b9e920e4b07a9af57922c9"}, {"code": "(fn [e xs]\n  (conj (into [] (flatten (map vector xs (repeat (- (count xs) 1) e)))) (last xs)))", "problem": 40, "user": "52b9c62ce4b07a9af57922c3"}, {"code": "(fn [v seq]\n  (drop-last (flatten (partition 2 (interleave seq (repeat v))))))", "problem": 40, "user": "52b94f15e4b07a9af57922ba"}, {"code": "(fn [sep coll] (pop (vec (mapcat #(list % sep) coll))))", "problem": 40, "user": "52963cc7e4b02ebb4ef7502d"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "52976262e4b02ebb4ef75041"}, {"code": "(fn put-in-between [ inter [s & smore]]\n  (if-not (empty? smore)\n    (concat (list s inter) (put-in-between inter smore))\n    (list s)))", "problem": 40, "user": "52bafc88e4b07a9af57922dc"}, {"code": "#(-> (interleave (repeat %) %2) rest)", "problem": 40, "user": "52bb123ae4b07a9af57922de"}, {"code": "(fn [s coll]\n  (reduce (fn [res x]\n            (conj res s x)) (vector (first coll)) (rest coll)))", "problem": 40, "user": "527c166de4b03e8d9a4a75b3"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "52b80827e4b0c58976d9ad56"}, {"code": "#((comp reverse rest reverse) (mapcat (fn[x] [x %1]) %2))", "problem": 40, "user": "4fc50525e4b081705acca370"}, {"code": "(fn [x s] (rest (flatten (for [e s i (repeat 1 x)] [i e]))))", "problem": 40, "user": "52bb81d7e4b07a9af57922e8"}, {"code": "(fn [x, xs] (drop 1 (interleave (repeat x) xs)))", "problem": 40, "user": "52baea85e4b07a9af57922d9"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "52bdb689e4b07a9af5792306"}, {"code": "(fn my-interpose [e s]\n  (lazy-seq (if (or (empty? s) (empty? (rest s))) s\n              (cons (first s) (cons e (my-interpose e (rest s))))))\n  )", "problem": 40, "user": "52bc6f5ee4b07a9af57922f6"}, {"code": "(fn [sep s]\n  (cons (first s)\n        (flatten (map list (repeat sep) (rest s))))\n  )", "problem": 40, "user": "52470d42e4b05ef8e38e6350"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "52be5d55e4b07a9af579231e"}, {"code": "#(next (mapcat (partial list %) %2))", "problem": 40, "user": "52bf29fde4b07a9af579232e"}, {"code": "(fn [v xs] (butlast (mapcat #(vec [%1 v]) xs)))", "problem": 40, "user": "52bf8e35e4b07a9af579233a"}, {"code": "#(reduce (fn [c i] (conj c %1 i)) (vector (first %2)) (rest %2))", "problem": 40, "user": "52b577c9e4b0c58976d9ad39"}, {"code": "(fn [x s] (drop-last (mapcat #(list % x) s)))", "problem": 40, "user": "4eda8d7c535d10e5ff6f530f"}, {"code": "(fn il\n  ([x,y] (il x y []))\n  ([x,y,r]\n   (if (== 0 (count y))\n     (reverse (butlast (flatten r)))\n     (il x (rest y) (cons (first y) (cons x r))))))", "problem": 40, "user": "52b7a904e4b0c58976d9ad51"}, {"code": "(fn my-interpose [el a-seq]\n    (drop-last (interleave a-seq (repeat (count a-seq) el)))\n )", "problem": 40, "user": "52763696e4b03e8d9a4a74d7"}, {"code": "(fn [v xs]\n  (cons (first xs) (mapcat #(vector v %) (rest xs))))", "problem": 40, "user": "4f3a979de4b0e243712b1f10"}, {"code": "(fn [i xs] (cons (first xs) (interleave (repeat i) (rest xs))))", "problem": 40, "user": "52ab51c4e4b0c58976d9ac73"}, {"code": "(fn intpos\n  [it ls]\n  (if (empty? ls) '()\n    (let [rst (rest ls)\n          fst (first ls)\n          intposrst (intpos it rst)\n          intpos? (not (empty? rst))]\n      (if intpos?\n        (conj intposrst it fst)\n        (conj intposrst fst)))))", "problem": 40, "user": "52aa4a67e4b0c58976d9ac62"}, {"code": "(fn [sep coll]\n  (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "50dcb2f4e4b02e6ac9592c91"}, {"code": "(fn [sep xs] (rest (#(interleave % %2) (repeat (count xs) sep) xs)))", "problem": 40, "user": "50772e6ae4b0fc74642bff5d"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "4f99ae4ae4b0dcca54ed6d00"}, {"code": "(fn [sep s] (reverse (drop 1 (reverse (mapcat #(list % sep) s)))))", "problem": 40, "user": "52bdf6bde4b07a9af579230d"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "52bbe6e1e4b07a9af57922ef"}, {"code": "(fn [s c] (butlast (mapcat #(vector % s) c)))", "problem": 40, "user": "5167d60de4b0c5a4140a3098"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "52be23dbe4b07a9af5792316"}, {"code": "(fn solution [sep x]\n  (if\n    (< (count x) 2)\n    x\n    (cons (first x) (cons sep (solution sep (rest x))))\n  )\n)", "problem": 40, "user": "52b49aebe4b0c58976d9ad2b"}, {"code": "(fn [p l]\n  (pop (reduce #(conj %1 %2 p) [] l)))", "problem": 40, "user": "52c25645e4b07a9af579237d"}, {"code": "(fn [s c] (drop 1 (interleave (repeat s) c)))", "problem": 40, "user": "51eab308e4b0f1f103a0d150"}, {"code": "(fn [sep coll]\n  (flatten (reduce #(list %1 sep %2) coll)))", "problem": 40, "user": "52c4af71e4b0c2d177d620e1"}, {"code": "(fn [default seq]\n  (drop-last \n   (flatten (map (fn [x] (list x default)) seq))))", "problem": 40, "user": "51a2569ee4b00957e520db7d"}, {"code": "#(loop [x %1 y %2 z[]] \n\t(if (= (count y) 1) (conj z (first y)) \n\t\t(recur x (rest y) (conj z (first y) x))))", "problem": 40, "user": "52b79d8ee4b0c58976d9ad50"}, {"code": "(fn [d x] (rest (mapcat (fn [xx] [d xx]) x)))", "problem": 40, "user": "52c4fe42e4b0c2d177d620e9"}, {"code": "(fn [sym coll]\n  (drop-last (interleave coll (repeat sym))))", "problem": 40, "user": "52c580c2e4b0c2d177d620f5"}, {"code": "(fn [x coll]\n    (take (dec (* (count coll) 2)) (interleave coll (repeat x))))", "problem": 40, "user": "52c61564e4b0c2d177d62109"}, {"code": "(fn interpose-a-seq [x c]\n  (subvec \n\n   (reduce     \n    (fn [a i] (conj a i x)) [] c) \n\n   0 (dec (* 2 (count c)))))", "problem": 40, "user": "515bbcd9e4b0388ca8ca1521"}, {"code": "(fn [a b] (vec (drop-last  ( mapcat list b (repeat a)  ))  ))", "problem": 40, "user": "528e1f30e4b0239c8a67aed4"}, {"code": "(fn f [sep coll] (rest (interleave (repeat sep) coll)))", "problem": 40, "user": "52bf936ee4b07a9af579233b"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "52c69672e4b0c2d177d62110"}, {"code": "(fn myinterpose\n        ([x xs]\n           (if (or (= 1 (count xs)) (empty? xs))\n             xs\n             (myinterpose x (rest xs) [(first xs) x])))\n        ([x xs acc]\n           (if (= 1 (count xs))\n             (into acc xs)\n             (myinterpose x (rest xs) (conj acc (first xs) x)))))", "problem": 40, "user": "52c58561e4b0c2d177d620f8"}, {"code": "(fn [n vctr] (pop (apply vector (mapcat vector vctr (repeat n)))))", "problem": 40, "user": "52c3a0f4e4b0c2d177d620c6"}, {"code": "#(rest (mapcat list (repeat %) %2))", "problem": 40, "user": "4ea365e2535d7eef308072c5"}, {"code": "(fn [x s] (rest (interleave (repeat x) s)))", "problem": 40, "user": "52bb4be0e4b07a9af57922e2"}, {"code": "#(butlast (interleave %2 (repeat %)) )", "problem": 40, "user": "52c6a0abe4b0c2d177d62111"}, {"code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "528ba1d9e4b0239c8a67aea2"}, {"code": "(fn [sep xs] (drop 1 (interleave (repeat sep) xs)))", "problem": 40, "user": "52c804dee4b0c2d177d6212b"}, {"code": "(fn inter [interp lst]\n    (rest \n        (loop [acc [] l lst]\n            (if (empty? l)\n                acc\n                (recur (conj acc interp (first l)) (rest l)))))\n)", "problem": 40, "user": "52c17e42e4b07a9af5792367"}, {"code": "#(drop-last (mapcat list %2 (repeat %1)))", "problem": 40, "user": "52a23af1e4b04e0c58e87beb"}, {"code": "#(concat [(first %2)] (mapcat (partial list %) (rest %2)))", "problem": 40, "user": "52c00263e4b07a9af579233f"}, {"code": "(fn [s x] (cons (first x) (mapcat #(list s %) (next x))))", "problem": 40, "user": "52c58440e4b0c2d177d620f7"}, {"code": "(fn [a [b & s]] (reduce #(conj % a %2) [b] s))", "problem": 40, "user": "52c73194e4b0c2d177d6211e"}, {"code": "(fn [s col] (butlast (mapcat #(list % s) col)))", "problem": 40, "user": "52c1bd29e4b07a9af579236a"}, {"code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "52ba2639e4b07a9af57922cb"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "508f97c0e4b0ea685a20f768"}, {"code": "(fn meu-interpose [v coll]\n  (cond \n   (empty? coll) nil\n   (= 2 (count coll)) (list (first coll) v (second coll))\n   :else (concat (list (first coll) v) (meu-interpose v (next coll)))))", "problem": 40, "user": "52c8758be4b0c2d177d62135"}, {"code": "(fn minterpose\n   ([val coll add?]\n      (when (seq coll)\n        (cons val\n              (cons (first coll)\n               (lazy-seq (minterpose val (rest coll) true))))))\n   ([val coll]\n      (when (seq coll)\n        (cons (first coll)\n             (lazy-seq (minterpose val (rest coll) true))))))", "problem": 40, "user": "52cc582ae4b07d0d72b27362"}, {"code": "(fn rec [sep coll]\n  (cons (first coll)\n        (mapcat #(list sep %) (rest coll))))", "problem": 40, "user": "52cc09c1e4b07d0d72b27356"}, {"code": "(fn [sep [x & xs]]\n  (reduce #(conj %1 sep %2) [x] xs))", "problem": 40, "user": "52cb6bb0e4b07d0d72b2734c"}, {"code": "(fn __ [i coll]\n  (rest (mapcat #(list i %) coll)))\n\n\n;(fn [i q]\n;  (rest (flatten (map #(identity [i %]) q ))))", "problem": 40, "user": "52828298e4b0757a1b17145b"}, {"code": "(fn [val xs] (concat (mapcat #(vector % val) (butlast xs)) [(last xs)]))", "problem": 40, "user": "4f03641a535dcb61093f6a9b"}, {"code": "#(butlast (mapcat list %2 (repeat %1)))", "problem": 40, "user": "52cca65be4b07d0d72b2736b"}, {"code": "#(reduce (fn [x y] (concat x (list %1 y))) (list (first %2)) (rest %2))", "problem": 40, "user": "52cc85abe4b07d0d72b27367"}, {"code": "(fn [v s] (rest (mapcat #(list v %) s)))", "problem": 40, "user": "52ce2aace4b07d0d72b2738b"}, {"code": "(fn [x coll] (drop 1 (mapcat #(vector x %) coll)))", "problem": 40, "user": "52c5c1c8e4b0c2d177d620fc"}, {"code": "(fn [sep s] (butlast (flatten (map #(list %1 sep) s))))", "problem": 40, "user": "52caeb25e4b071a8d36bd3e7"}, {"code": "#(butlast (mapcat vector %2 (repeat %1)))", "problem": 40, "user": "52ced458e4b07d0d72b27394"}, {"code": "#(butlast (mapcat vector %2 (repeat %1)))", "problem": 40, "user": "5238ca2de4b0d705d026eef6"}, {"code": "(fn [delim [f & col]] \n    (reduce (fn [res el] (conj res delim el)) [f] col) \n )", "problem": 40, "user": "5094057fe4b097f48cc38593"}, {"code": "#(butlast (mapcat (fn [x] (list x %)) %2))", "problem": 40, "user": "52d0902ee4b07d0d72b273bd"}, {"code": "(fn interpose1 [o c]\n  (if (empty? (rest c))\n    (conj (empty c) (first c))\n   \t(conj (interpose1 o (rest c)) o (first c))))", "problem": 40, "user": "52c915a6e4b0c2d177d6213b"}, {"code": "(fn [sep coll]\n  (drop-last\n   (mapcat #(conj [] % sep) coll)))", "problem": 40, "user": "529952a4e4b02ebb4ef75081"}, {"code": "(fn [n s]\n  (conj (mapcat list (repeat n) (next s)) (first s)))", "problem": 40, "user": "52ce4cafe4b07d0d72b2738e"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "52bbd09ee4b07a9af57922ee"}, {"code": "(fn [s c] (rest (interleave (iterate identity s) c)))", "problem": 40, "user": "52c1f404e4b07a9af5792370"}, {"code": "(fn my-interpose [x col]\n  (cond\n    (empty? col) nil\n    (empty? (rest col)) [(first col)]\n    :else (cons (first col) \n                (cons x (my-interpose x (rest col))))))", "problem": 40, "user": "52d2ca1ce4b099d49816f0b4"}, {"code": "(fn\n  [sep aList]\n  (conj (apply vector (mapcat #(vector %1 sep) (drop-last aList)))\n        (last aList)))", "problem": 40, "user": "52d39acce4b099d49816f0c7"}, {"code": "#(pop (vec (mapcat vector %2 (repeat %))))", "problem": 40, "user": "4e68ed35535d8ccf87e9fe92"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "52d00832e4b07d0d72b273b4"}, {"code": "(fn [v s] (butlast (mapcat #(list % v) s)))", "problem": 40, "user": "52cc92e9e4b07d0d72b27368"}, {"code": "(fn [x xs] (pop (vec (mapcat #(list % x) xs))))", "problem": 40, "user": "52b2a819e4b0c58976d9acf1"}, {"code": "(fn [a-sym a-seq]\n  (rest (mapcat #(list a-sym %) a-seq)))", "problem": 40, "user": "52c3b3e5e4b0c2d177d620c8"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "52ce8648e4b07d0d72b27390"}, {"code": "(fn drop-in [value list]\n  (lazy-seq\n   (cond\n    (= 1 (count list)) list\n    :else (let [a (first list)]\n\t    (cons a (cons value (drop-in value (rest list))))))))", "problem": 40, "user": "4fe89475e4b07c9f6fd12c4f"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "52cd1ed0e4b07d0d72b27377"}, {"code": "(fn interp [thing coll]\n  (loop [result (list (first coll)) left (rest coll)]\n    (if-not (empty? left)\n      (recur (concat result (list thing (first left)))\n             (rest left))\n      result\n      )\n    )\n  )", "problem": 40, "user": "52cefb7ee4b07d0d72b27397"}, {"code": "#(drop-last (mapcat list %2 (repeat (count %2) %)))", "problem": 40, "user": "4ed45563535d10e5ff6f52c9"}, {"code": "(fn [s x] (loop [f [(first x)]\n                r (rest x)]\n           (if (empty? r)\n             f\n             (recur (conj (conj f s) (first r)) (rest r)))))", "problem": 40, "user": "52c81954e4b0c2d177d6212e"}, {"code": "(fn [sep coll] (drop-last (mapcat #(list % sep) coll)))", "problem": 40, "user": "5271605ae4b03e8d9a4a73ed"}, {"code": "(fn [s coll] (drop-last (flatten (for [x coll] [x s]))))", "problem": 40, "user": "52cf084ce4b07d0d72b27399"}, {"code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "problem": 40, "user": "52cdec6ce4b07d0d72b27383"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "52cdec62e4b07d0d72b27382"}, {"code": "(fn interpose2 [div coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (if (= (count s) 1)\n        s\n        (cons (first s)\n              (cons div\n                    (interpose2 div (rest coll))))))))", "problem": 40, "user": "51a97f7ae4b08d8ec191b827"}, {"code": "(fn\n  [v s]\n  (drop-last (mapcat #(vector % v) s)))", "problem": 40, "user": "4f541874e4b0a7574ea717d8"}, {"code": "(fn [v s]\n   (rest (reduce #(conj % v %2) [] s)))", "problem": 40, "user": "52d6120ee4b09f7907dd134c"}, {"code": "(fn [separ coll]\n  (drop-last\n   (interleave coll (vec (repeat (count coll) separ)))))", "problem": 40, "user": "52c672e2e4b0c2d177d6210e"}, {"code": "(fn [sep xs] (drop-last (mapcat list xs (repeat sep))))", "problem": 40, "user": "52d3f666e4b09f7907dd1327"}, {"code": "(fn [x xs] (butlast (mapcat vector xs (repeat x))))", "problem": 40, "user": "4f8c6bf6e4b02e764a0a519b"}, {"code": "(fn f [x l]\n  (if (= (count l) 1)\n    l\n    (conj (conj (f x (rest l)) x) (first l))))", "problem": 40, "user": "52d7b0ade4b09f7907dd137c"}, {"code": "(fn [sep s] (rest (mapcat #(list sep %) s)))", "problem": 40, "user": "52d7f7efe4b09f7907dd1380"}, {"code": "#(->> %2\n    (map (fn[x](conj [x] %)))\n    (flatten)\n    (drop-last))", "problem": 40, "user": "51b41150e4b0f094dd986fac"}, {"code": "#(take (dec (* 2 (count %2))) (interleave %2 (repeat %)))", "problem": 40, "user": "52b35a6ee4b0c58976d9ad07"}, {"code": "(fn [sep col]\n  (take (- (* 2 (count col)) 1)\n  (reduce\n   #(conj % %2 sep)\n   [] col)))", "problem": 40, "user": "52cf5450e4b07d0d72b273a4"}, {"code": "#(mapcat (fn [x] (if (= (last %2) x) (vector x) (vector x %1))) %2)", "problem": 40, "user": "52d4acc8e4b09f7907dd1333"}, {"code": "(fn [sep s] (rest (mapcat #(list sep %) s)))", "problem": 40, "user": "52d02380e4b07d0d72b273b7"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "52d340ebe4b099d49816f0c1"}, {"code": "(fn [x s] (rest (reduce #(conj %1 x %2) [] s)))", "problem": 40, "user": "5256627ce4b0541d1855ba1a"}, {"code": "(fn interpos [x y]\n  (rest \n    (let [coll []]\n      (reduce\n        (fn [a b]\n          (concat a (concat (concat [x] (concat [b])) coll))\n        )\n        []\n        y\n      )\n    )\n  )\n)", "problem": 40, "user": "52af7a5ce4b0c58976d9acbd"}, {"code": ";(fn [v s]\n;  (loop [[h & t] s\n;         out []]\n;    (if (empty? t)\n;      (conj out h)\n;      (recur t (conj out h v)))))\n\n#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "52d469c8e4b09f7907dd1330"}, {"code": "(fn\n    [separator s]\n    (loop [s s result []]\n      (cond\n       (not (seq s)) result\n       (seq (rest s))\n       (recur (rest s) (conj result (first s) separator))\n       :else\n       (recur (rest s) (conj result (first s)))\n        )))", "problem": 40, "user": "52a7634ae4b0c58976d9ac16"}, {"code": "(fn [sep coll] (reduce #(conj %1 sep %2) [(first coll)] (rest coll)))", "problem": 40, "user": "521ed5b4e4b0e6c71e0c0bc0"}, {"code": "(fn [delim coll]\n  (drop-last (mapcat #(list % delim) coll)))", "problem": 40, "user": "52c884a2e4b0c2d177d62136"}, {"code": "(fn userinterpose [x y]\n  (reverse \n    (reduce\n      (fn [a b]\n        (if (= (count a) 0)\n          (conj a b)\n          (conj (conj a x) b)))\n      '()\n      y)))", "problem": 40, "user": "52dad8bde4b09f7907dd13be"}, {"code": "(fn [sep values]\n  (drop-last (mapcat vector values (repeat sep))))", "problem": 40, "user": "52daf558e4b09f7907dd13c1"}, {"code": "(fn f40 [i s] (drop-last (interleave s (repeat (count s) i))))", "problem": 40, "user": "52bf0116e4b07a9af5792328"}, {"code": "(fn tet [v c]\n  (lazy-seq\n   (let [s (seq c) r (rest (seq c))]\n     (if (not (empty? r))\n       (cons (first s) (cons v (tet v r)))\n       (cons (first s) '())))))", "problem": 40, "user": "52d809bde4b09f7907dd1384"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "522fdff7e4b032bbe342416c"}, {"code": "(fn [delimiter xs]\n  (let [insert-delimiter (fn [xs x]\n                           (conj xs delimiter x))]\n    (rest (reduce insert-delimiter [] xs))))", "problem": 40, "user": "52cca96ae4b07d0d72b2736e"}, {"code": "#((fn [s c] (drop 1 (interleave (repeat s) c))) %1 %2)", "problem": 40, "user": "5224cf82e4b01819a2de42ef"}, {"code": "(fn my-inter\n  [b ls]\n  (drop-last (mapcat #(vector % b) ls)))", "problem": 40, "user": "52dd6cc8e4b09f7907dd13e2"}, {"code": "(fn [x coll] \n  (butlast\n   (mapcat #(list %1 x) coll)))", "problem": 40, "user": "52cc4fd6e4b07d0d72b27360"}, {"code": "#(-> (for [x %2] [% x]) flatten next)", "problem": 40, "user": "52d10680e4b07d0d72b273c3"}, {"code": "(fn[ch,x](drop-last (mapcat #(list % ch) x)))", "problem": 40, "user": "52d66ca0e4b09f7907dd135c"}, {"code": "(fn my-interpose [e coll]\n  (->> coll\n       (mapcat #(identity [% e]))\n       (butlast)))", "problem": 40, "user": "52561be5e4b0541d1855ba08"}, {"code": "#(vec (drop-last (mapcat vector %2 (repeat %))))", "problem": 40, "user": "521d709ae4b050d5da0427ef"}, {"code": "(fn [n l] (butlast (reduce #(into %1 [%2 n]) [] l)))", "problem": 40, "user": "52cdb7efe4b07d0d72b2737c"}, {"code": "(fn gapify [spackle gaps]\n  (let [x (first gaps)\n        xs (rest gaps)]\n    (if (empty? xs)\n      (list x)\n      (concat (list x spackle)\n              (gapify spackle xs)))))", "problem": 40, "user": "52deb735e4b09f7907dd13f7"}, {"code": "#(drop-last (mapcat list %2 (repeat %1)))", "problem": 40, "user": "52c1ede2e4b07a9af579236d"}, {"code": "(fn [x xs]\n  (drop 1 (interleave (repeat  x) xs)\n        )\n  )", "problem": 40, "user": "52ce5056e4b07d0d72b2738f"}, {"code": "(fn inter [v l]\n  (if (> (count l) 1)\n    (conj (inter v (rest l)) v (first l))\n    (list (first l))\n    )\n  )", "problem": 40, "user": "52d92f13e4b09f7907dd13a2"}, {"code": "(fn [sep coll]\n  (butlast (reduce concat (map #(list % sep) coll))))", "problem": 40, "user": "52d51535e4b09f7907dd133a"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "52df232fe4b09f7907dd13fc"}, {"code": "(fn\n   [a coll]\n   (drop 1 (interleave (repeat a) coll)))", "problem": 40, "user": "51ea4e35e4b0f1f103a0d148"}, {"code": "#(rest (interleave (repeat %1) %2 ))", "problem": 40, "user": "51e3a549e4b0c611d6113e47"}, {"code": "(fn [v col] (butlast (mapcat #(vector % v) col)))", "problem": 40, "user": "52d00a05e4b07d0d72b273b5"}, {"code": "(fn [x arr]\n  (rest (reduce (fn [y z] (conj y x z)) [] arr))\n  )", "problem": 40, "user": "52c8a8b9e4b0c2d177d62139"}, {"code": "#(rest(flatten(map (fn[x] [%1 x]) %2)))", "problem": 40, "user": "52ca720fe4b071a8d36bd3e2"}, {"code": "(fn interpl [w l] (if (empty? (rest l)) (conj '() (first l))\n(conj (interpl w (rest l)) w (first l))))", "problem": 40, "user": "52d6889ae4b09f7907dd1361"}, {"code": "(fn [item coll] \n  (drop-last (interleave coll (repeat item))))", "problem": 40, "user": "52b94e26e4b07a9af57922b9"}, {"code": "#(rest (interleave (repeat (count %2) %) %2))", "problem": 40, "user": "52e48632e4b09f7907dd1450"}, {"code": "(fn ip [x s]\n   (reduce #(if (= %2 (last s)) (conj %1 %2) (conj (conj %1 %2) x)) [] s)\n)", "problem": 40, "user": "52e295fae4b09f7907dd1437"}, {"code": "(fn [x y] (butlast (mapcat #(list %1 %2) y (repeat (count y) x))))", "problem": 40, "user": "52e4cc2ee4b09f7907dd1455"}, {"code": "(fn intrps [separator col]\n  (-> (reduce (fn [res nxt]\n                (-> (conj res separator)\n                    (conj nxt)))\n              []\n              col)\n      (rest)))", "problem": 40, "user": "51f8e057e4b09be9c177e53d"}, {"code": "(fn [v s] (butlast (reduce #(conj %1 %2 v) [] s)))", "problem": 40, "user": "52d6a9c2e4b09f7907dd1365"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "52e59ca5e4b09f7907dd1464"}, {"code": "(fn [x li]\r\n  (loop [li li ret []]\r\n    (if (= 0 (count li))\r\n      (pop ret)\r\n      (recur (rest li) (conj (conj ret (first li)) x))\r\n    )\r\n  )\r\n)", "problem": 40, "user": "513caa36e4b0b86ece9f3229"}, {"code": "(fn [sep coll]\n  (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "51f2a491e4b0210f90e74553"}, {"code": "(fn interp\n  ([v [a & r]] (if a (interp v r [a]) []))\n  ([v [a & r] acc]\n   (if a (interp v r (conj acc v a)) acc)))", "problem": 40, "user": "52e5da25e4b09f7907dd1467"}, {"code": "x", "problem": 40, "user": "52e635b3e4b09f7907dd146f"}, {"code": "(fn [v x] (rest (mapcat #(list v %) x)))", "problem": 40, "user": "52c7f036e4b0c2d177d62126"}, {"code": "(fn [a b] ((fn [x] (take (- (count x) 1) x)) (flatten (map list b (repeat a)))))", "problem": 40, "user": "50d324dde4b049d4ed5650d7"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "52d33ac5e4b099d49816f0c0"}, {"code": "#(drop-last(interleave %2 (repeat %)))", "problem": 40, "user": "52d7a930e4b09f7907dd1379"}, {"code": "#(loop [x %2\n       y %1\n       r []]\n  (if (nil? x) (next r)\n    (recur (next x) y (conj r y (first x)))))", "problem": 40, "user": "517e12e3e4b0fcc7c5d37d3c"}, {"code": "(fn [s coll] (drop-last (interleave coll (repeat s))))", "problem": 40, "user": "52e0e646e4b09f7907dd1416"}, {"code": "(fn [x coll] (butlast (interleave coll (repeat x))))", "problem": 40, "user": "50ee68fce4b06330c1f87c59"}, {"code": "(fn [s xs] (drop 1 (interleave (repeat s) xs)))", "problem": 40, "user": "52e276d9e4b09f7907dd1436"}, {"code": "#(rest (interleave (repeat (count %2) %1) %2))", "problem": 40, "user": "529b44afe4b02ebb4ef7509d"}, {"code": "(fn [c [b & es]]\n   (flatten [b (for [e es] [ c e])])\n   )", "problem": 40, "user": "52cd093fe4b07d0d72b27376"}, {"code": "#(-> (interleave %2 (repeat %1)) drop-last)", "problem": 40, "user": "52e3e6a8e4b09f7907dd1448"}, {"code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "problem": 40, "user": "51ac7e9be4b09397d510976f"}, {"code": "(fn my-intersperse\n  [value items]\n  (if (> (count items) 1)\n    (conj (my-intersperse value (rest items)) value (first items) )\n    (list (first items))))", "problem": 40, "user": "52e94348e4b09f7907dd14a9"}, {"code": "(fn [sep s] (rest (mapcat vector (repeat sep) s)))", "problem": 40, "user": "52d83c2ce4b09f7907dd138d"}, {"code": "(fn [i coll]\n  (drop-last (mapcat vector coll (repeat i))))", "problem": 40, "user": "52b9c5e8e4b07a9af57922c2"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "4ef9c8f9535dced4c769f26b"}, {"code": "(fn sk-interpose [sep xs]\n  (rest (mapcat (fn [x]\n                  [sep x])\n                xs)))", "problem": 40, "user": "51d42f44e4b013d740b70ddb"}, {"code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "problem": 40, "user": "52dc2bc8e4b09f7907dd13ca"}, {"code": "(fn [c ls]\n  (loop [a [(first ls)] rs (rest ls)]\n    (if-not (seq rs) a\n      (recur (conj a c (first rs)) (rest rs)))))", "problem": 40, "user": "50232eeae4b0b5d8b1bd2397"}, {"code": "(fn [x s] (butlast (mapcat vector s (repeat x))))", "problem": 40, "user": "52e75667e4b09f7907dd1485"}, {"code": "(fn interp [sep list] (drop-last(interleave list  (repeat (count list) sep))) )", "problem": 40, "user": "51f81925e4b09be9c177e526"}, {"code": "#(drop-last (interleave %2 (repeat (count %2) %1)))", "problem": 40, "user": "4fb99483e4b081705acca2da"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "50e8cac5e4b0ebbe794eb7ef"}, {"code": "#(drop-last (mapcat list %2 (repeat %1)))", "problem": 40, "user": "52efd3d9e4b05e3f0be25ed4"}, {"code": "(fn my-interpose [delimiter a-seq]\n  (loop [acc [(first a-seq)]\n         rest-seq (rest a-seq)]\n    (if (empty? rest-seq)\n      acc\n      (recur (conj acc delimiter (first rest-seq))\n             (rest rest-seq))\n      )))", "problem": 40, "user": "52ee46e5e4b05e3f0be25ec5"}, {"code": "#(drop-last (interleave %2 (repeat %)))", "problem": 40, "user": "529223cbe4b0239c8a67af26"}, {"code": "(fn intp [x coll]\n  (if (= (count coll) 1)\n    [(last coll)]\n    (concat [(first coll) x] (intp x (rest coll)))))", "problem": 40, "user": "52f07ccee4b05e3f0be25edf"}, {"code": "(fn between [v s]\n  (if (<= (count s) 1)\n    s\n    (cons (first s) (cons v (between v (rest s))))))", "problem": 40, "user": "52ec1dfbe4b0705949c4444b"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "50c2fbebe4b00e537d00253c"}, {"code": "(fn [sep xs] (rest (reduce concat (map #(list sep %) xs))))", "problem": 40, "user": "52d660eae4b09f7907dd1356"}, {"code": "(fn [v s]\n  (drop-last (mapcat #(vector % v) s)))", "problem": 40, "user": "52a32b52e4b04e0c58e87bfc"}, {"code": "(fn [x coll]\n   (drop-last (interleave coll (repeat (count coll) x))\n   )\n)", "problem": 40, "user": "52430d3ce4b076204b44faa5"}, {"code": "(fn [sym l] \n  (loop [lst l n sym acc '()]\n    (if (empty? lst)\n      (reverse acc)\n      (if (next lst) \n        (recur (rest lst) n (cons n (cons (first lst) acc)))\n        (recur (rest lst) n (cons (first lst) acc))))))", "problem": 40, "user": "51bd255ce4b0df1216cefd94"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "50f53694e4b057d4c52de881"}, {"code": "#(butlast (mapcat (fn[x] (list x %1)) %2))", "problem": 40, "user": "528f82d8e4b0239c8a67aef4"}, {"code": "#(loop [todo %2\n        mapped []]\n  (if todo\n    (recur (next todo) (concat mapped [(first todo)] [%1]))\n    (drop-last mapped)))", "problem": 40, "user": "52cb19abe4b07d0d72b27348"}, {"code": "#(butlast (mapcat list %2 (repeat %1)))", "problem": 40, "user": "52f1bc81e4b05e3f0be25eef"}, {"code": "(fn [seperator coll]\n  (drop-last (interleave coll (repeat seperator))))", "problem": 40, "user": "52f528f0e4b05e3f0be25f2a"}, {"code": "(fn [s\n       [f & r]]\n    (cons\n     f\n     (mapcat (partial list s) r)))", "problem": 40, "user": "52d7f9a8e4b09f7907dd1381"}, {"code": "(fn [x coll]   (concat (interleave coll (repeat (dec (count coll)) x)) (list (last coll))))", "problem": 40, "user": "52d9aaa1e4b09f7907dd13ae"}, {"code": "(fn [separator coll]\n  (-> (mapcat (fn [x] [x separator]) coll)\n      drop-last))", "problem": 40, "user": "51ab4082e4b04e3dc0c27b31"}, {"code": "(fn [sep elem] (drop-last (mapcat #(list %1 %2) elem (repeat sep))))", "problem": 40, "user": "529c6995e4b04e0c58e87b61"}, {"code": "(fn [n v] (drop-last (interleave v (take (count v) (repeat n)))))", "problem": 40, "user": "52a5a8ebe4b0c58976d9abed"}, {"code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "52dfe1d2e4b09f7907dd1406"}, {"code": "#(loop [item %1, ls %2, res []] \n   (cond (not (seq (rest ls))) (conj res (first ls)) \n          :else                  (recur item (rest ls) (into res [(first ls) %1]) )))", "problem": 40, "user": "52f5eefbe4b09b582c12c9cb"}, {"code": "#(butlast (loop [r []\n        o %2]\n   (if (empty? o)\n     r\n     (recur (conj r (first o) %1) (rest o)))))", "problem": 40, "user": "52bdd135e4b07a9af579230a"}, {"code": "(fn intp [sep, xs]\n  (if (nil? (second xs))\n    [(first xs)]\n    (cons (first xs)\n          (cons sep (intp sep (rest xs))))))", "problem": 40, "user": "52f10094e4b05e3f0be25ee8"}, {"code": "#(apply vector (rest (mapcat list (repeat %1) %2)))", "problem": 40, "user": "4ff78679e4b0678c553fc392"}, {"code": "(fn [sep s]\n  (reduce (fn [xs x]\n            (conj xs sep x))\n          [(first s)]\n          (rest s)))", "problem": 40, "user": "504e90bae4b069badc5a33b8"}, {"code": "#(drop-last (interleave %2 (repeat %)))", "problem": 40, "user": "51f2b8f1e4b0210f90e74556"}, {"code": "(fn [item inList] \n\t(butlast (interleave inList (repeat item))))", "problem": 40, "user": "52bf6946e4b07a9af5792334"}, {"code": "(fn [separator xs]\n   (butlast (apply concat (map #(-> [% separator]) xs))))", "problem": 40, "user": "4feaa579e4b0140c20fb9c0b"}, {"code": "(fn inter [sep c]\n  (rest (mapcat (fn [e] [sep e]) c)))", "problem": 40, "user": "52f8f4d1e4b047fd55836fde"}, {"code": "(fn [y x] (->> x (map #(list y %1)) (reduce concat) (rest)))", "problem": 40, "user": "52f5f8b4e4b09b582c12c9cc"}, {"code": "(fn [x y] \n   (reduce \n    (fn [a b] \n      (if (coll? a) \n        (concat a [x b]) \n        [a x b])) \n    y))", "problem": 40, "user": "52eee533e4b05e3f0be25ecb"}, {"code": "(fn [s x] (pop (vec (mapcat #(list %1 s) x))))", "problem": 40, "user": "529dfc6de4b04e0c58e87b8a"}, {"code": "#(loop [y %1 xs %2 current []] (if (= nil (first xs)) (reverse (rest (reverse current))) (recur y (rest xs) (conj (conj current (first xs)) y))))", "problem": 40, "user": "52fa250ee4b047fd55836ff3"}, {"code": "#(rest(interleave (repeat %) %2))", "problem": 40, "user": "52d838bee4b09f7907dd138b"}, {"code": "(fn ! [x y]  (if (empty? y)  []   (if (empty? (rest y)) y (concat [(first y)] [x] (! x (rest y)))  )  )   )", "problem": 40, "user": "52faec2ee4b047fd55837004"}, {"code": "#(loop [ch %1\n        col %2\n        acc []]\n   (cond\n    (empty? col) acc\n    (empty? (rest col)) (recur ch (rest col) (conj acc (first col)))\n    :else (recur ch (rest col) (conj acc (first col) ch))))", "problem": 40, "user": "52fc89b2e4b047fd55837019"}, {"code": "(fn my-interpose[x v] (drop-last((fn recurse-interpose[x v] (interleave v (repeat x))) x v )))", "problem": 40, "user": "52e980b3e4b09f7907dd14af"}, {"code": "(fn [sep xs] (rest (flatten (map #(list sep %) xs))))", "problem": 40, "user": "52cee992e4b07d0d72b27395"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "52e32d55e4b09f7907dd143e"}, {"code": "#(rest(interleave(repeat%1)%2))", "problem": 40, "user": "52fd8de1e4b047fd5583702e"}, {"code": "(fn [inter xs]\n  (butlast (mapcat vector xs (repeat inter))))", "problem": 40, "user": "528a2de7e4b0239c8a67ae71"}, {"code": "(fn[s coll] (drop-last (flatten (map #(vec [%1 %2]) coll (repeat s)))))", "problem": 40, "user": "52e68e61e4b09f7907dd1479"}, {"code": "(fn [delim col] (drop-last (reduce (fn [xs x] (conj xs x delim)) [] col)))", "problem": 40, "user": "52f2b450e4b05e3f0be25efd"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "52fb903ee4b047fd5583700b"}, {"code": "(fn [v s] (butlast (mapcat #(list % v) s)))", "problem": 40, "user": "52bacfa8e4b07a9af57922d6"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "52da20c7e4b09f7907dd13b3"}, {"code": "(fn [x y]\n  (->\n    (interleave (repeat x) y)\n     rest\n   )\n  )", "problem": 40, "user": "52f4fae4e4b05e3f0be25f27"}, {"code": "(fn [a coll] (reduce #(if (seq %1) (conj %1 a %2) (conj %1 %2)) [] coll))", "problem": 40, "user": "52f381f3e4b05e3f0be25f10"}, {"code": "#(rest (flatten (map (fn [x] [%1 x]) %2)))", "problem": 40, "user": "52fcfeeee4b047fd55837027"}, {"code": "#(rest (reduce concat (for [x %2] [%1 x])))", "problem": 40, "user": "5300aa1de4b0d8b024fd3710"}, {"code": "(fn [x s] (drop-last (interleave s (repeat (count s) x))))", "problem": 40, "user": "5300f68de4b0d8b024fd3714"}, {"code": "(fn my-interpose\n  [x in]\n  (drop-last (mapcat #(vector % x) in)))", "problem": 40, "user": "5300b750e4b0d8b024fd3711"}, {"code": "(fn [interposer coll]\n  (butlast (mapcat (fn [x]\n            [x interposer]) coll)))", "problem": 40, "user": "52eb400ee4b0705949c4443b"}, {"code": "(fn [value coll] (mapcat #(if (= % (last coll)) (list %) (list % value)) coll))", "problem": 40, "user": "5302b580e4b0d8b024fd3733"}, {"code": "#(drop-last (interleave %2 (repeat (count %2) %)))", "problem": 40, "user": "528f4462e4b0239c8a67aef0"}, {"code": "(fn [c coll] (reduce #(if (empty? %1) (conj %1 %2) (into %1 [c %2])) [] coll))", "problem": 40, "user": "52fb64b7e4b047fd55837009"}, {"code": "(fn ipse [sep listy]\n  (cond\n   (empty? listy) listy\n   (= (count listy) 1) (cons (first listy) (ipse sep (rest listy)))\n   :else (concat (list (first listy) sep) (ipse sep (rest listy)))))", "problem": 40, "user": "51b89503e4b050a1176cd69a"}, {"code": "(fn [x s] (butlast (mapcat #(list % x) s)))", "problem": 40, "user": "52dfc89be4b09f7907dd1405"}, {"code": "(fn [y, xs] (cons (first xs) (mapcat #(list y %) (rest xs))))", "problem": 40, "user": "4faf897be4b081705acca257"}, {"code": "(fn [c s] (drop-last (mapcat #(list % c) s)))", "problem": 40, "user": "5302bb37e4b0d8b024fd3734"}, {"code": "#(drop 1 (interleave (repeat %) %2))", "problem": 40, "user": "52fa4f48e4b047fd55836ff7"}, {"code": "#(butlast (mapcat (fn [x] [x %1]) %2))", "problem": 40, "user": "512587ade4b05d10e3e395fb"}, {"code": "(fn[sep coll] (reverse (rest (reduce #(conj %1 %2 sep) () coll))))", "problem": 40, "user": "518c1079e4b0f028e99addf8"}, {"code": "(fn [ie lst] (reverse \n(reduce (fn [l elm]\n          (if (or (empty? l) (nil? elm))\n            (cons elm l)\n            (cons elm (cons ie l))\n            )\n          )\n        [] lst)))", "problem": 40, "user": "52f304b4e4b05e3f0be25f07"}, {"code": "#(drop-last (mapcat list %2 (repeat (count %2) %)))", "problem": 40, "user": "52fff1a8e4b0d8b024fd370d"}, {"code": "(fn [x lst] \n\t (butlast (mapcat  (fn [y] (vector y x))  lst)))", "problem": 40, "user": "52fe3a9de4b047fd55837039"}, {"code": "(fn f [x y]\n  (if (empty? (rest y)) [(first y)]\n    (concat [(first y) x] (f x (rest y)))))", "problem": 40, "user": "52f818a6e4b047fd55836fcc"}, {"code": "(fn jjj [sep s]\n    (reduce #(concat %1 (list sep) (list %2)) (list (first s)) (rest s))\n  )", "problem": 40, "user": "52ffb7f2e4b0d8b024fd370b"}, {"code": "(fn [x y] (for [i (range (dec (* 2 (count y))))] (if (odd? (inc i)) (nth y (/ i 2)) x) ))", "problem": 40, "user": "52f9ce6de4b047fd55836ff0"}, {"code": "#(butlast (loop [in %2 out []]\n   (if (nil? (first in))\n     out\n     (recur (rest in) (conj out (first in) %1))\n    )\n  )\n          )", "problem": 40, "user": "5176afd2e4b085adf681d889"}, {"code": "(fn[x ls] ((comp drop-last flatten) (map #(list % x) ls)))", "problem": 40, "user": "5301157ae4b0d8b024fd3717"}, {"code": "(fn f\n  [x s]\n  (into [(first s)] (flatten (for [i (drop 1 s)] [x i]))))", "problem": 40, "user": "52f3af46e4b05e3f0be25f14"}, {"code": "(fn [delim seq]\n  (butlast (mapcat #(list % delim) seq)))", "problem": 40, "user": "530578ede4b0d8b024fd3760"}, {"code": "(fn[x y](into [] (rest (flatten (for[s y][x s])))))", "problem": 40, "user": "5302d79ce4b0d8b024fd3736"}, {"code": "(fn [ n coll] (butlast (interleave coll (repeat (count coll) n))))", "problem": 40, "user": "5307e4ece4b02e82168697a9"}, {"code": "#(rest (mapcat (partial list %1) %2))", "problem": 40, "user": "5152f82ee4b03f948212e718"}, {"code": "(fn [x y & deliniated]\n  (cond (empty? (rest y)) (reverse (cons (first y) deliniated))\n        :else (recur x (rest y) (cons x (cons (first y) deliniated)))))", "problem": 40, "user": "5306e4b4e4b02e821686979d"}, {"code": "(fn [sep s]\n  (loop [[elt :as s] s, result []]\n    (if (empty? s)\n      (rest result)\n      (recur (rest s) (conj result sep elt)))))", "problem": 40, "user": "53070615e4b02e821686979e"}, {"code": "(fn interp [sep xs]\n  (if (<= (count xs) 1) xs\n    (concat (list (first xs) sep)\n            (interp sep (rest xs)))))", "problem": 40, "user": "4dad8a6dc9a9d6ed1399dc57"}, {"code": "(fn\n  [in lst]\n  (loop [out ()\n         l lst]\n    (if (= 0 (count l))\n      out\n      (if (= 0 (count out))\n        (recur (list (first l)) (rest l))\n        (let [newout (reverse (conj (conj (reverse out) in) (first l)))]\n          (recur newout (rest l))\n        )\n      )\n    )\n  )\n)", "problem": 40, "user": "530c462ae4b02e82168697d9"}, {"code": "(fn [separator x]\n  ((fn intp [acc separator x]\n    (if (= (count x) 1)\n      (conj acc (first x))\n      (intp (conj (conj acc (first x)) separator) separator (rest x))\n    )\n  ) [] separator x)\n)", "problem": 40, "user": "5303a027e4b0d8b024fd3745"}, {"code": "(fn [e l]\n  (loop\n    [tr []\n     sq l]\n    (if (< (count sq) 2)\n      (conj tr (first sq))\n      (recur\n       (conj (conj tr (first sq)) e)\n       (rest sq)))))", "problem": 40, "user": "530d85dee4b08068f379eca8"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "530caf86e4b02e82168697df"}, {"code": "#(->> (repeat %1) (interleave %2) (drop-last))", "problem": 40, "user": "530e9729e4b08068f379ecbc"}, {"code": "(fn [z coll]\n  (drop-last (flatten (map list coll (repeat z)))))", "problem": 40, "user": "50b9d991e4b04934c218a4a9"}, {"code": "(fn f [s l]\n  (case (count l)\n    0 '()\n    1 l\n    (cons (first l) (cons s (f s (rest l))))))", "problem": 40, "user": "521b73f5e4b0c4ef0be83043"}, {"code": "(fn [sep l] (drop-last (flatten(map #(list % sep) l)) ))", "problem": 40, "user": "5301a13ae4b0d8b024fd371e"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "530e5469e4b08068f379ecb7"}, {"code": "(fn [x coll] \n  (rest (mapcat #(list x %) coll)))", "problem": 40, "user": "52fafd5ce4b047fd55837006"}, {"code": "(fn [x y] (drop-last (mapcat vector y (repeat x))))", "problem": 40, "user": "52fd5121e4b047fd5583702b"}, {"code": "(fn [x xs]\n  (reduce (fn [news i]\n            (concat news [x i]))\n          (concat (empty xs) [(first xs)]) \n          (rest xs)))", "problem": 40, "user": "4ff505c8e4b0678c553fc364"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "53034738e4b0d8b024fd373e"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "53110f32e4b08068f379ece4"}, {"code": "(fn my-interpose [item s]\n  (cond (empty? s) '()\n        (empty? (rest s)) (list (first s))\n        :else (concat (list (first s) item) (my-interpose item (rest s)))))", "problem": 40, "user": "5310e7aee4b08068f379ecdc"}, {"code": "#(drop-last ( (fn [a b] (interleave b a)) (repeat %1) %2))", "problem": 40, "user": "53029281e4b0d8b024fd372e"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "4eed26af535d93acb0a668bb"}, {"code": "(fn interpose-seq [y x]\n      (if (empty? (rest x))\n        x\n        (concat (list (first x))\n                (list y)\n                (interpose-seq y (rest x)))))", "problem": 40, "user": "52e17e66e4b09f7907dd1423"}, {"code": "(fn [x y]\n  (rest (interleave (map (fn [item] (identity x)) y) y)))", "problem": 40, "user": "53153466e4b08068f379ed23"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "5300158ae4b0d8b024fd370f"}, {"code": "(fn [x s]\n  (-> (fn [e] `(~e ~x))\n      (mapcat s)\n      butlast))", "problem": 40, "user": "531490bde4b08068f379ed17"}, {"code": "(fn [d sq] \n  (loop [s1 (vec sq) s2 []]\n    (if (empty? s1)\n      s2\n      (if (> (count s1) 1)\n        (recur (rest s1) (conj s2 (first s1) d))\n        (recur (rest s1) (conj s2 (first s1)))))))", "problem": 40, "user": "53069e16e4b02e8216869798"}, {"code": "#(rest (mapcat (fn [a] [%1 a]) %2))", "problem": 40, "user": "5315a4f0e4b08068f379ed2e"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "52f89125e4b047fd55836fd4"}, {"code": "(fn [sep xs] (drop-last (interleave xs (repeat (count xs) sep))))", "problem": 40, "user": "53162640e4b08068f379ed40"}, {"code": "#(drop 1 (interleave (repeat %) %2))", "problem": 40, "user": "523acf7be4b0aa37f082ed90"}, {"code": "(fn [s c]\n  (loop [a (rest c) r [(first c)]]\n    (if-not (seq a)\n      r\n      (recur (rest a) (conj (conj r s) (first a))))))", "problem": 40, "user": "531488f3e4b08068f379ed16"}, {"code": "#(drop-last (flatten (for [x %2][x %1])))", "problem": 40, "user": "52bc6cb2e4b07a9af57922f5"}, {"code": "(fn [x l]\n     (drop-last (interleave l (repeat x)))\n   )", "problem": 40, "user": "531843c1e4b08068f379ed6c"}, {"code": "#(rest (mapcat (partial list %1) %2))", "problem": 40, "user": "4f320253e4b0d6649770a08d"}, {"code": "(fn barrier [b xs]\n   (let [[a & c] xs]\n     (if (empty? c)\n       (list a)\n       (conj (barrier b c) b a) )))", "problem": 40, "user": "53120cb5e4b08068f379ecf0"}, {"code": "(fn [v l]\n  (->> l\n       (reduce #(vector %1 v %2))\n       flatten))", "problem": 40, "user": "530cb5b8e4b02e82168697e0"}, {"code": "(fn [sep l]\n  (let [c (count l)]\n \t (take (dec (* 2 c))\n       \t (interleave l (repeat c sep)))))", "problem": 40, "user": "53134005e4b08068f379ed07"}, {"code": "(fn separate_with [sep coll]\n  (if (empty? coll)\n    ()\n    (let [fst (first coll)\n          tail (rest coll)]\n      (cons fst (mapcat #(list sep %) tail)))))", "problem": 40, "user": "5315ec83e4b08068f379ed39"}, {"code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "problem": 40, "user": "52ad68f5e4b0c58976d9ac94"}, {"code": "#(take (+ (count %2)(dec (count %2))) (apply concat(reverse(zipmap %2 (repeat (count %2) %)))))", "problem": 40, "user": "531576b4e4b08068f379ed29"}, {"code": "(fn [n s]\n  (butlast (mapcat #(list % n) s)))", "problem": 40, "user": "531619c1e4b08068f379ed3d"}, {"code": "(fn [s l] (drop-last (mapcat #(list % s) l)))", "problem": 40, "user": "52265e41e4b04e78ff2e1981"}, {"code": "#(pop (reduce (fn[acc x] (conj acc x %1)) [] %2))", "problem": 40, "user": "531bfb69e4b08068f379ed97"}, {"code": "#(vec (drop-last (flatten (map list %2 (repeat (count %2) %1)))))", "problem": 40, "user": "531d53dbe4b08068f379edae"}, {"code": "#(drop-last (interleave %2 (repeat %)))", "problem": 40, "user": "52be0263e4b07a9af579230e"}, {"code": "#(vec (rest (interleave (repeat (count %2) %1) %2)))", "problem": 40, "user": "52c00e4fe4b07a9af5792342"}, {"code": "#(loop [gen-l [(first %2)]\n        curr-l (rest %2)]\n   (if-not (seq curr-l)\n     gen-l\n     (recur (conj gen-l %1 (first curr-l)) (rest curr-l))))", "problem": 40, "user": "531c7f0de4b08068f379eda4"}, {"code": "(fn interp [x y]\n  (if (empty? (rest y))\n    (into [] [(first y)])\n    (concat (into [] [(first y) x]) (interp x (rest y)))))", "problem": 40, "user": "53150a4de4b08068f379ed22"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "531ba143e4b08068f379ed91"}, {"code": "(fn in [x l]\n (butlast (reduce (fn [c i]\n          (conj (conj c i) x) ) [] l) ) )", "problem": 40, "user": "530c15f7e4b02e82168697d6"}, {"code": "(fn my-interpose [sep s]\n  (reduce #(conj %1 sep %2) (vector (first s)) (rest s))\n  )", "problem": 40, "user": "529a73bde4b02ebb4ef75096"}, {"code": "(fn [x coll] (butlast (interleave coll (repeat x))))", "problem": 40, "user": "531c0619e4b08068f379ed98"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "52dd4fb4e4b09f7907dd13df"}, {"code": "(fn [x y] (drop 1 (interleave (repeat x) y)))", "problem": 40, "user": "4f75469ee4b0fbe0118ec55a"}, {"code": "#(->> (repeat (count %2) %1) \n      (interleave %2) \n      drop-last)", "problem": 40, "user": "531dfaf5e4b08068f379edb3"}, {"code": "(fn [v coll] (butlast (flatten (map #(list %1 v) coll))))", "problem": 40, "user": "5320bc6ae4b09d4e7a9b54a7"}, {"code": "(fn [a b]\n  (loop [a a \n         b (seq b)\n         result []]\n    (if-let [cur (first b)]\n      (recur a (next b) (conj result cur a))\n      (take (- (count result) 1) result))))", "problem": 40, "user": "531e5c81e4b08068f379edba"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "531f1e63e4b08068f379edc2"}, {"code": "(fn [s x] (rest (interleave (repeat s) x)))", "problem": 40, "user": "531f7a2de4b08068f379edc6"}, {"code": "(fn [spacer coll] (rest (interleave (repeat spacer) coll)))", "problem": 40, "user": "532347dde4b09d4e7a9b54cc"}, {"code": "(fn test [sep x]\n  (reduce \n   \t\t#(concat %1 (list sep %2))\n   \t\t(list (first x)) \n   \t\t(rest x)))", "problem": 40, "user": "531c57ace4b08068f379ed9b"}, {"code": "(fn [s coll] (butlast (interleave coll (repeat s))))", "problem": 40, "user": "52a00651e4b04e0c58e87bbb"}, {"code": "(fn [d xs]\n  (rest (mapcat #(list d %) xs))\n)", "problem": 40, "user": "5323a414e4b09d4e7a9b54d1"}, {"code": "#(drop-last (mapcat vector %2 (repeat %1)))", "problem": 40, "user": "4fd5418ee4b0d4de60cee372"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "532418f3e4b09d4e7a9b54d8"}, {"code": "#(rest (reduce (fn [xs y] (conj xs %1 y)) [] %2))", "problem": 40, "user": "53244c9de4b09d4e7a9b54db"}, {"code": "(fn join [v col]\n  (if (= 1 (count col))\n    [(first col)]\n    (concat [(first col) v] (join v (rest col)))))", "problem": 40, "user": "52d1e364e4b0d9f9285948e7"}, {"code": "#(cons (first %2) (mapcat list (repeat %) (rest %2)))", "problem": 40, "user": "512700c4e4b083bb8f88cf14"}, {"code": "(fn [sep col] (drop 1 (interleave (repeat sep) col)))", "problem": 40, "user": "5311b367e4b08068f379eced"}, {"code": "(fn t4 [v coll] (reduce #(if (seq %1) (conj %1 v %2) (conj %1 %2)) [] coll))", "problem": 40, "user": "5326c5f7e4b09d4e7a9b54f2"}, {"code": "(fn [initval initseq]\n   (loop [res [], key initseq]\n     (if (empty? key)\n       (pop res)\n       (recur\n        (conj (conj res (first key)) initval)\n        (rest key))\n       )))", "problem": 40, "user": "52d42021e4b09f7907dd132a"}, {"code": "(fn _interprose\n  [a b]\n    (if (> (count b) 1)\n      (concat [(first b) a] (_interprose a (rest b) ) )\n      (if (empty? b)\n        []\n        (concat [(first b)] (_interprose a (rest b)))\n      ) \n    ) )", "problem": 40, "user": "531f0a26e4b08068f379edbf"}, {"code": "(fn [n col] (drop-last (mapcat #(vector % n) col)))", "problem": 40, "user": "51bdebece4b0ff155d51d2b7"}, {"code": "(fn [separator [x & rest]]\n   (flatten (list x\n    (map (partial list separator) rest))))", "problem": 40, "user": "53286f84e4b09d4e7a9b5505"}, {"code": "(fn [item lst] \n  (loop [l lst\n         acc []]\n    (if (empty? l) (butlast acc)\n      (recur (rest l) (conj acc (first l) item)))))", "problem": 40, "user": "531cbf46e4b08068f379eda6"}, {"code": "(fn f [a b]\n   (butlast (mapcat #(concat [%] [a]) b))\n   )", "problem": 40, "user": "53224d45e4b09d4e7a9b54c0"}, {"code": "#(drop-last (mapcat (fn [x] (list x %)) %2))", "problem": 40, "user": "52c60945e4b0c2d177d62108"}, {"code": "(fn rint [sep xs]\n  (if (= (count xs) 1)\n    xs\n    (cons (first xs) (cons sep (rint sep (rest xs))))))", "problem": 40, "user": "532b9075e4b09d4e7a9b5533"}, {"code": "#(rest (interleave (take (count %2) (repeat %1)) %2))", "problem": 40, "user": "531c5c72e4b08068f379ed9d"}, {"code": "(fn [d xs]\n  (loop [xs xs ws '()]\n    (if (empty? xs)\n      (flatten ws)\n      (recur (rest xs)\n             (if (= (count xs) 1)\n               (list* ws (first xs) '())\n               (list* ws (first xs) d '()))))))", "problem": 40, "user": "4dbe04b2535d020aff1edf56"}, {"code": "(fn f \n  ([a col] (f a col [] (count col)))\n  ([a col v c]\n    (if (<= c 1) (conj v (first col))\n       (recur a (rest col) (conj v (first col) a) (dec c))\n     )\n   )\n  )", "problem": 40, "user": "5302ac7fe4b0d8b024fd3731"}, {"code": "#(rest (reduce (fn [a b] (conj a % b)) [] %2))", "problem": 40, "user": "52570aeae4b0541d1855ba42"}, {"code": "(fn [x coll]\n  (rest (reduce #(conj % x %2) [] coll)))", "problem": 40, "user": "527a5b84e4b03e8d9a4a7558"}, {"code": "(fn\n  [x coll]\n  (butlast (reduce concat (map #(list %1 x) coll))))", "problem": 40, "user": "52ba447ee4b07a9af57922ce"}, {"code": "(fn interp [x xs]\n  (-> (partial list x)\n      (mapcat xs)\n      rest))", "problem": 40, "user": "532ab0bde4b09d4e7a9b5527"}, {"code": "(fn go [inter vals]\n   (if (= (count vals) 1)\n     vals\n     (cons (first vals) (cons inter (go inter (rest vals))))))", "problem": 40, "user": "518ee4f9e4b0cd6ff51676a5"}, {"code": "#(butlast (apply concat (for [x %2] [x %1])))", "problem": 40, "user": "5004034ce4b0678c553fc447"}, {"code": "(fn [x q] (drop 1 (mapcat #(vector x %) q)))", "problem": 40, "user": "532e0b20e4b019098a6f8b45"}, {"code": "(fn [x ys] (drop 1 (mapcat #(list %1 %2) (repeat x) ys)))", "problem": 40, "user": "532c0507e4b09d4e7a9b553c"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "52aa524fe4b0c58976d9ac64"}, {"code": "(fn [i coll] (drop-last (apply concat (reduce (fn [a b] (conj a [b i])) [] coll))))", "problem": 40, "user": "5318594ee4b08068f379ed6d"}, {"code": "(fn newinterpose [x y]\n        \"After every component of y except the last, inserts a copy of x.\"\n  (butlast (reduce #(conj %1 %2 x) [] y)))", "problem": 40, "user": "532727bae4b09d4e7a9b54fa"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "53315c78e4b019098a6f8b67"}, {"code": "(fn ipos [x c] \n\t(if (empty? (rest c)) c\n\t\t(cons \n\t\t\t(first c) \n\t\t\t(cons x \n\t\t\t\t(lazy-seq (ipos x (rest c)))))))", "problem": 40, "user": "53300924e4b019098a6f8b55"}, {"code": "(fn [v col] (apply concat (for [i col]\n                               (cond\n                                 (= i (last col)) [i]\n                                 :else [i v]))))", "problem": 40, "user": "52fc34cee4b047fd55837015"}, {"code": "#(drop-last (mapcat list %2 (repeat (count %2) %)))", "problem": 40, "user": "532bce35e4b09d4e7a9b5536"}, {"code": "(fn i-p [n l]\n  (if (< (count l) 2)\n    [(first l)]\n  \t(concat [(first l)] [n] (i-p n (rest l)))))", "problem": 40, "user": "5322d364e4b09d4e7a9b54c6"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "533018b2e4b019098a6f8b56"}, {"code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "532631e1e4b09d4e7a9b54ea"}, {"code": "(fn [interloper coll] (concat (reduce concat (map vector coll (repeat (- (count coll) 1) interloper))) (list (last coll)) ) )", "problem": 40, "user": "5314b0cae4b08068f379ed1c"}, {"code": "(fn myfun [a b]\n  (cond\n   (= 1 (count  b)) b\n   :else (conj (myfun a (rest b)) a (first b))\n   )\n  )", "problem": 40, "user": "531902b1e4b08068f379ed77"}, {"code": ";; coding while tired is dumb...\n(fn foo [v coll]\n  (cond (empty? coll) '()\n        (empty? (rest coll)) (list (first coll))\n        :else (cons (first coll) (cons v (foo v (rest coll))))))", "problem": 40, "user": "53322cece4b019098a6f8b73"}, {"code": "(fn [v seq]\n    (take (- (* 2 (count seq)) 1) (interleave seq (repeat v))))", "problem": 40, "user": "51f5539fe4b0abb92f97f9cd"}, {"code": "(fn [x xs]\n  (drop-last (mapcat #(list %1 %2)\n          xs\n          (repeat (count xs) x)\n          )))", "problem": 40, "user": "52a7fec0e4b0c58976d9ac25"}, {"code": "(fn add-in-between\n  [sep col]\n  (butlast (mapcat (fn [a] [a sep]) col)))", "problem": 40, "user": "53334cb2e4b019098a6f8b81"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "531792d9e4b08068f379ed5e"}, {"code": "(fn [sep coll] (drop-last (flatten (map #(vector (identity %) sep) coll))))", "problem": 40, "user": "52d2f457e4b099d49816f0ba"}, {"code": "(fn \n  [tag col]\n  (let [total (+ (count col) (- (count col) 1))]\n    (loop [res  []\n           n    1\n           flag true\n           m    0]\n      (if (> n total)\n        res\n        (recur (if flag\n                 (into res (vector (get col m)))\n                 (into res (vector tag)))\n               (inc n)\n               (if (= flag true)\n                 false\n                 true)\n               (if (= flag true)\n                 (inc m)\n                 m))))))", "problem": 40, "user": "531016d0e4b08068f379ecd1"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "532cb6bbe4b019098a6f8b33"}, {"code": "#(reverse (rest (reduce (fn [m x] (conj m x %)) () %2)))", "problem": 40, "user": "533696b9e4b0e30313ee6c7c"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "52facb9de4b047fd55837002"}, {"code": "#(drop-last (interleave %2 (repeat %)))", "problem": 40, "user": "4fceda40e4b03432b189f407"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "5336ca32e4b0e30313ee6c80"}, {"code": "(fn [sep coll]\n  (loop [acc [(first coll)], rst (rest coll)]\n    (if (empty? rst)\n      acc\n      (recur (-> acc (conj sep) (conj (first rst)))\n             (rest rst)))))", "problem": 40, "user": "504f6721e4b0a02f9cffde7f"}, {"code": "(fn [x y]\n  (butlast (flatten (map #(vector % x) y))))", "problem": 40, "user": "52474133e4b05ef8e38e635e"}, {"code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "527c4071e4b0757a1b17135a"}, {"code": "(fn [value coll]\n  (conj \n   (vec \n    (interleave \n     coll \n     (repeat \n      (- (count coll) 1) \n      value)))\n   (last coll)))", "problem": 40, "user": "531d34cfe4b08068f379edac"}, {"code": "#(rest (mapcat list (repeat %1) %2))", "problem": 40, "user": "525ab6cfe4b0cb4875a45cf9"}, {"code": "(fn [elem coll]\n  (drop-last (interleave coll (repeat (count coll) elem))))", "problem": 40, "user": "532686e6e4b09d4e7a9b54ef"}, {"code": "#(pop (vec (mapcat (fn[a] (list a %1)) %2)))", "problem": 40, "user": "52baefbae4b07a9af57922da"}, {"code": "(fn [n xs] (reverse (drop 1 (reverse (mapcat (fn [x] [x n]) xs)))))", "problem": 40, "user": "532b43c3e4b09d4e7a9b5531"}, {"code": "#(butlast (mapcat list %2 (repeat %)))", "problem": 40, "user": "533056a4e4b019098a6f8b5b"}, {"code": "(fn [sep s] (drop-last (mapcat #(list % sep) s)))", "problem": 40, "user": "533ab9abe4b0e30313ee6cbf"}, {"code": "(fn [sep coll]\n  (butlast (interleave coll (repeat (count coll) sep))))", "problem": 40, "user": "520fff3ce4b080a8d9b9d633"}, {"code": "(fn [d s]\n  (drop 1 (flatten (map #(vector d %) s))))", "problem": 40, "user": "524ad140e4b09eba1c0223a9"}, {"code": "(fn [x xs]\n  (if (empty? xs)\n    xs\n    (rest (interleave (repeat x) xs))))", "problem": 40, "user": "5334d4f2e4b0656e627bfd71"}, {"code": "#(into (empty %2) (butlast (interleave %2 (repeat %))))", "problem": 40, "user": "506d5e4ce4b0a302964c5493"}, {"code": "(fn [s sequence]\n  (butlast (apply concat(map #(list % s) sequence))))", "problem": 40, "user": "4eadc217535d7eef30807321"}, {"code": "(fn [n s] (next (mapcat #(cons n %) (partition 1 s))))", "problem": 40, "user": "53219cece4b09d4e7a9b54b7"}, {"code": "(fn [sep s]\n    (cons (first s) (interleave (repeat (-> s count dec) sep) (rest s))))", "problem": 40, "user": "51a3b135e4b0e77c4ca60bf6"}, {"code": "(fn [x y] (flatten (reduce #(conj [%] x %2) y)))", "problem": 40, "user": "530262c8e4b0d8b024fd3728"}, {"code": "(fn [o l] \n  (loop [l1 (rest l)\n         res [(first l)]]\n    (if (empty? l1) res\n      (recur (rest l1) (concat res [o (first l1)])))))", "problem": 40, "user": "533ee560e4b085b17e897d98"}, {"code": "(fn [x y] (drop-last (mapcat vector y (take (count y) (repeat x)))))", "problem": 40, "user": "53350264e4b0656e627bfd73"}, {"code": "(fn [sep coll] \n    (loop [col coll\n         result []\n         ]\n    (if-not (empty? (rest col))\n      (recur (rest col) (into result [(first col) sep]))\n      (into result col))))", "problem": 40, "user": "5322d370e4b09d4e7a9b54c7"}, {"code": "(fn inter\n\t[val col]\n\t(loop [val val\n\t       col (vec col)\n\t       result []]\n\t  (if (= 1 (count col))\n\t    (concat result col)\n\t    (recur val (rest col) (concat result (vector (first col) val))))))", "problem": 40, "user": "5339af7de4b0e30313ee6cab"}, {"code": "(fn [glue xs] \n  (rest \n   (mapcat \n    (fn [x] (seq [glue x])) \n    xs)))", "problem": 40, "user": "52bdb7dee4b07a9af5792307"}, {"code": "(fn [s xs]\n  (butlast (reduce #(conj % %2 s) [] xs)))", "problem": 40, "user": "523ea111e4b057c4b7cd0a65"}, {"code": "(fn [sep coll] (rest (reduce #(conj %1 sep %2) [] coll)))", "problem": 40, "user": "533b1dc4e4b0e30313ee6cc7"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "5311cd03e4b08068f379ecef"}, {"code": "(fn [sep input]\n  (loop [l input acc []]\n    (cond (empty? l) acc\n          (= (count l) 1) (conj acc (last l))\n          :else (recur (rest l) (conj (conj acc (first l)) sep)))))", "problem": 40, "user": "5341b141e4b00652c8746ecf"}, {"code": "(fn [x y] (rest (#(flatten (mapv vector % %2)) (repeat (count y) x) y)))", "problem": 40, "user": "533f1584e4b085b17e897d9b"}, {"code": "(fn [v lst]\n  ((fn [l res]\n     (if (empty? (rest l)) (concat res l)\n       (recur (rest l) (concat res (list (first l) v)))))\n   lst '()))", "problem": 40, "user": "51da631be4b02ceefd947766"}, {"code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "4e36e647535deb9a81d77f36"}, {"code": "#(drop-last (mapcat vector %2 (repeat %1)))", "problem": 40, "user": "533f09e1e4b085b17e897d9a"}, {"code": "#(loop [seq (rest %2)\n         acc (list (first %2))]\n    (if (empty? seq)\n      (reverse acc)\n      (recur (rest seq) (conj acc %1 (first seq)))))", "problem": 40, "user": "533d2ea5e4b085b17e897d7a"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "524d90c0e4b0a16e35cf6ded"}, {"code": "#(loop [a % \n        x (first %2) \n        y (rest %2)\n        intertwine []]\n    (if (= 0 (count y))\n      (conj intertwine x)\n      (recur a (first y) (rest y) (conj intertwine x a))))", "problem": 40, "user": "531308c1e4b08068f379ed04"}, {"code": "(fn myinterpose [n coll]\n  (drop-last (mapcat vector coll (repeat n))))", "problem": 40, "user": "5344a0efe4b084c2834f4a2d"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "53460d02e4b084c2834f4a39"}, {"code": "(fn [x y]\n  (rest (mapcat #(list x %) y)))", "problem": 40, "user": "53468f6ce4b084c2834f4a3f"}, {"code": "(fn [n coll]\n  (rest (interleave (repeat n) coll)))", "problem": 40, "user": "5346f409e4b084c2834f4a46"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "52e161e8e4b09f7907dd1420"}, {"code": "#(rest (for [i %2, x [% i]] x))", "problem": 40, "user": "526a7025e4b03e8d9a4a722a"}, {"code": "#(butlast (mapcat vector %2 (repeat %1)))", "problem": 40, "user": "4e705861535d5021c1a89635"}, {"code": "(fn f [i l] (if (< (count l) 2) l (conj (f i (rest l)) i (first l))  ))", "problem": 40, "user": "5349ac2be4b084c2834f4a67"}, {"code": "(fn [p s] (drop-last (mapcat (fn [x] [x p]) s)))", "problem": 40, "user": "5340ee60e4b00652c8746ec9"}, {"code": "(fn ipose [x y]\n  (reduce #(conj %1 x %2) (into (empty y) [(first y)]) (rest y)))", "problem": 40, "user": "534941d1e4b084c2834f4a60"}, {"code": "(fn myinterpose [v [first & rest]]\n  (if (nil? rest)\n    (cons first ())\n    (concat (cons first (cons v ())) (myinterpose v rest) )\n    )\n  )", "problem": 40, "user": "5349a39de4b084c2834f4a65"}, {"code": "(fn [i s]\n    (pop (vec (mapcat #(list % i) s))))", "problem": 40, "user": "53487737e4b084c2834f4a59"}, {"code": "(fn [x s]\n  (rest (mapcat #(list x %) s)))", "problem": 40, "user": "53415755e4b00652c8746ecd"}, {"code": "(fn [sep coll]\n  (drop 1\n        (flatten\n          (map vector (repeat (count coll) sep) coll))))", "problem": 40, "user": "5348cab4e4b084c2834f4a5e"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "52ac2db3e4b0c58976d9ac82"}, {"code": "(fn [d col] (drop-last (interleave col(vec (repeat (count col) d)))))", "problem": 40, "user": "53286389e4b09d4e7a9b5504"}, {"code": "(fn [sep coll]\n  (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "5348236ee4b084c2834f4a54"}, {"code": "#(drop-last 1 (interleave %2 (repeat %1)))", "problem": 40, "user": "50fc299ee4b0d10d794c19f2"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "534bde26e4b084c2834f4a81"}, {"code": "(fn [sep, coll] (drop-last (mapcat #(conj [] % sep) coll )))", "problem": 40, "user": "4f386f61e4b0e243712b1edc"}, {"code": "#(drop-last (interleave %2 (repeat %)))", "problem": 40, "user": "534bd9c1e4b084c2834f4a80"}, {"code": "#(drop 1 (interleave (repeat (count %2) %1) %2))", "problem": 40, "user": "532a111ee4b09d4e7a9b5520"}, {"code": "(fn [delimiter arg]\n  (reduce #(conj %1 delimiter %2) (conj [] (first arg)) (rest arg)))", "problem": 40, "user": "52de249ae4b09f7907dd13ed"}, {"code": "(fn fun [n c2]\n  (pop (vec \n        (mapcat #(list % n) c2) )))", "problem": 40, "user": "5349da55e4b084c2834f4a68"}, {"code": "(fn inter[separator s]\n  (butlast (mapcat #(list %1 separator) s)))", "problem": 40, "user": "5338387de4b0e30313ee6c91"}, {"code": "(fn [v c]\n  (loop [i 1 result [(first c)]]\n    (if (< i (count c))\n      (recur (inc i) (conj result v (nth c i)))\n      result)))", "problem": 40, "user": "51ab70c3e4b04e3dc0c27b33"}, {"code": "(fn  [delim seq]\n  (loop [s seq\n         res []]\n    (if-not s res (recur (next s)\n                         (if (second s) \n                           (into res [(first s) delim])\n                           (into res [(first s)]))))))", "problem": 40, "user": "516081e7e4b009fba0926e28"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "4e79f28b535db169f9c796a8"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "534e9ed4e4b084c2834f4ab8"}, {"code": "(fn fn1 [k x]\n  (let [y  (reduce (fn [acc e]\n                     (conj acc e k))\n                   [] x)]\n    (drop-last y)))", "problem": 40, "user": "52d6664be4b09f7907dd1359"}, {"code": "(fn [y xs] (butlast (interleave xs (repeat y))))", "problem": 40, "user": "5339c105e4b0e30313ee6cae"}, {"code": "#(drop-last (mapcat list %2 (repeat (count %2) %1)))", "problem": 40, "user": "534815bde4b084c2834f4a53"}, {"code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "53504436e4b084c2834f4ad7"}, {"code": "(fn [delim c] (drop-last (mapcat #(conj [] % delim) c)))", "problem": 40, "user": "534e118ee4b084c2834f4aad"}, {"code": "(fn [sep coll] (concat (list (first coll))\n                       (interleave (repeat sep) (rest coll))))", "problem": 40, "user": "53498f88e4b084c2834f4a64"}, {"code": "(fn ntrps [x coll]\n  (butlast\n    (mapcat #(vector % x) coll)\n    ))", "problem": 40, "user": "53307da1e4b019098a6f8b5e"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "534efe66e4b084c2834f4ac1"}, {"code": "(fn[delim coll](rest (reduce #(conj %1 delim %2) [] coll)))", "problem": 40, "user": "53513d28e4b084c2834f4ae3"}, {"code": "(fn [sp xs] (reduce (fn [a b] (if (empty? a) [b] (conj a sp b))) [] xs))", "problem": 40, "user": "534d1173e4b084c2834f4a98"}, {"code": "(fn [n s] (drop 1 (mapcat #(cons n %) (partition 1 s))))", "problem": 40, "user": "4ddb696b535d02782fcbe9fa"}, {"code": "(fn [x y] (reduce #(if (nil? %1) (list %2) (concat %1 (list x %2))) nil y))", "problem": 40, "user": "534d6524e4b084c2834f4a9f"}, {"code": "#(drop-last (mapcat list %2 (cycle (vector %))))", "problem": 40, "user": "534e4a29e4b084c2834f4ab0"}, {"code": "(fn [s l]\n  (rest (reduce #(conj % s %2) [] l)))", "problem": 40, "user": "5336a339e4b0e30313ee6c7d"}, {"code": "(fn [i xs] (cons (first xs) (loop [ys (next xs) result '()] (if ys (recur (next ys) (concat result (list i (first ys)))) result ))))\n;(fn [s xs] (drop-last (reduce #(concat %1 [%2 s]) [] xs)))", "problem": 40, "user": "533b9cace4b0e30313ee6cd1"}, {"code": "(fn [sep coll]\n  (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "53121863e4b08068f379ecf3"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "50f10f7be4b06d9538fe211a"}, {"code": "(fn [v coll] (butlast (interleave coll (repeat v))))", "problem": 40, "user": "5353afa0e4b084c2834f4b03"}, {"code": "(fn [repeat-val coll] (concat (mapcat #(list %1 repeat-val) (drop-last coll)) [(last coll)]))", "problem": 40, "user": "5256c4c1e4b0541d1855ba36"}, {"code": "(fn f [e s]\n  (if (<= (count s) 1)\n    s\n    (concat [(first s) e] (f e (rest s)))))", "problem": 40, "user": "53523ae0e4b084c2834f4aee"}, {"code": "#(butlast (mapcat list %2 (repeat %1)))", "problem": 40, "user": "535526a2e4b04ce2eb3ed259"}, {"code": "(fn [y xs]\n  (butlast (interleave xs (repeat y))))", "problem": 40, "user": "5312cdaae4b08068f379ed03"}, {"code": "(fn [sep coll]\n  (vec (butlast (mapcat #(vector % sep) coll))))", "problem": 40, "user": "5250b7a5e4b0541d1855b83e"}, {"code": "#(rest (mapcat vector (repeat %1) %2))", "problem": 40, "user": "535778dee4b04ce2eb3ed27d"}, {"code": "#(butlast (mapcat list %2 (repeatedly (constantly %1))))", "problem": 40, "user": "5357b241e4b04ce2eb3ed282"}, {"code": "(fn my-interpose [delim coll]\n  (if (<= (count coll) 1)\n    coll\n    (conj (my-interpose delim (rest coll)) delim (first coll))))", "problem": 40, "user": "5356e04fe4b04ce2eb3ed271"}, {"code": "#(rest (reduce concat (for [x %2] [% x])))", "problem": 40, "user": "53500869e4b084c2834f4ad3"}, {"code": "#(let [len (count %2)] (take (dec (* 2 len)) (interleave %2 (repeat len %1))))", "problem": 40, "user": "52046600e4b0c283853240c5"}, {"code": "(fn [x coll] (butlast (reduce concat (map (fn [item] [item x]) coll))))", "problem": 40, "user": "5225271fe4b01819a2de42f9"}, {"code": "#(drop-last (interleave %2 (repeat  (count %2) %1) ))", "problem": 40, "user": "52dced9de4b09f7907dd13d7"}, {"code": "(fn xx [i x] (if (next x) (cons (first x) (cons i (xx i (rest x)))) x))", "problem": 40, "user": "535920b2e4b04ce2eb3ed294"}, {"code": "(fn myinter [sep xs]\n  (loop [xs xs sep sep acc []]\n    (if (empty? (rest xs)) (concat acc xs) \n      (recur (rest xs) sep (concat acc (vector (first xs) sep))))))", "problem": 40, "user": "53287dace4b09d4e7a9b5507"}, {"code": "(fn [i s]\n  (reverse (conj \n   (flatten (map #(list i %) (rest (reverse s)) ))\n   (last s) \n  ))\n)", "problem": 40, "user": "53597288e4b04ce2eb3ed29c"}, {"code": "(fn [value col]\n   (flatten (conj [] (first col) (for [i (rest col)] [value i]))))", "problem": 40, "user": "530b8580e4b02e82168697cc"}, {"code": "#(loop [x %1 y %2 n []]\n   (if (empty? (rest y))\n     (conj n (first y))\n     (recur x (rest y) (conj n (first y) x)\n   )))", "problem": 40, "user": "5356dcbee4b04ce2eb3ed270"}, {"code": "(fn [x s] (butlast (mapcat #(list % x) s)))", "problem": 40, "user": "534dd600e4b084c2834f4aaa"}, {"code": "(fn my-loop [value xs]\n    (if (= (count xs) 1)\n      (vec xs)\n      (into [] (concat (list (first xs) value) (my-loop value (rest xs))))\n      )\n    \n  )", "problem": 40, "user": "535aba96e4b04ce2eb3ed2a8"}, {"code": "(fn [s l] (butlast (loop [x l r []] (if-not x r (recur (next x) (concat r [(first x) s]))))))", "problem": 40, "user": "53512b55e4b084c2834f4ae0"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "4f0412f8535dcb61093f6b99"}, {"code": "(fn [value sq]\n  (butlast (interleave sq (take (count sq) (iterate identity value)))))", "problem": 40, "user": "52271a85e4b04e78ff2e19a7"}, {"code": "(fn [delimiter numbers]\n  (loop [[f1 & l1] numbers\n         result []]      \n    (if (nil? f1)\n      result\n      (do \n        (if (nil? l1)\n          (recur l1 (into result (vector f1)) )\n          (recur l1 (conj (into result (vector f1)) delimiter))        \n          )\n        \n        )\n      )\n    ))", "problem": 40, "user": "535d21ade4b04ce2eb3ed2bb"}, {"code": "#(next (interleave (repeat %1) %2))", "problem": 40, "user": "535c53c5e4b04ce2eb3ed2b3"}, {"code": "(fn [sep s]\n  (butlast (mapcat #(seq (vector %1 %2)) s (repeat sep))))", "problem": 40, "user": "5215661be4b02f6d8ea676c7"}, {"code": "(fn [x y] (rest(mapcat #(list x %) y)))", "problem": 40, "user": "534f1c94e4b084c2834f4ac5"}, {"code": "(fn [sep coll]\n  (rest (reduce #(conj %1 sep %2) [] coll)))", "problem": 40, "user": "535d4b0ae4b04ce2eb3ed2be"}, {"code": "#(loop [ l1 %2 l2 '() ]\n   (cond (empty? l1) '()\n         (= (count l1) 1) (reverse (cons (first l1) l2))\n         :else (recur (rest l1) (cons %1 (cons (first l1) l2)))))", "problem": 40, "user": "535a18e3e4b04ce2eb3ed2a4"}, {"code": "(fn [v s]\n  (reduce #(concat %1 [v %2])\n          [(first s)]\n          (rest s)))", "problem": 40, "user": "535d910ae4b04ce2eb3ed2c5"}, {"code": "(fn [n l] (rest (mapcat #(list n %) l)))", "problem": 40, "user": "535d2533e4b04ce2eb3ed2bc"}, {"code": "(fn [a b] (-> (repeat a) (interleave b) (rest) ) )", "problem": 40, "user": "52761edae4b03e8d9a4a74d4"}, {"code": "(fn [in coll]\n  (rest (mapcat #(list in %) coll)))", "problem": 40, "user": "536102efe4b0243289761e3e"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "53480973e4b084c2834f4a52"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "50fd4838e4b033b9c38d78ce"}, {"code": "(fn interpose1 [e [x & xs]]\n  (if (empty? xs)\n    (if (nil? x) [] [x])\n    (concat [x e] (interpose1 e xs))))", "problem": 40, "user": "536254a5e4b0243289761e50"}, {"code": "(fn [inter s]\n    (take (dec (* 2 (count s))) (reduce #(conj %1 %2 inter) [] s)))", "problem": 40, "user": "53489329e4b084c2834f4a5b"}, {"code": "(fn [x coll]\n  (let [xcoll (repeat (count coll) x)\n    \tlcoll (mapcat vector coll xcoll)\n        n (- (count lcoll) 1)]\n    (take n lcoll)))", "problem": 40, "user": "5361a4f2e4b0243289761e47"}, {"code": "(fn [separator-value s]\n  (butlast (mapcat #(vector % separator-value) s)))", "problem": 40, "user": "53527551e4b084c2834f4af0"}, {"code": "(fn [v l] (reduce (fn [a b] (concat a (list v b))) (list (first l)) (rest l)))", "problem": 40, "user": "53638ed2e4b0243289761e5b"}, {"code": "(fn [v xs]\n  (butlast (mapcat #(list % v) xs)))", "problem": 40, "user": "5344fe13e4b084c2834f4a32"}, {"code": "#(take (dec (* 2 (count %2))) (interleave %2 (repeat %1)))", "problem": 40, "user": "514b83b4e4b0bd81940b86ce"}, {"code": "(fn [s coll] (conj (interleave (repeat s) (rest coll)) (first coll)))", "problem": 40, "user": "53629381e4b0243289761e54"}, {"code": "#(drop 1 (mapcat list (repeat %1) %2))", "problem": 40, "user": "532ecd44e4b019098a6f8b49"}, {"code": "(fn ipose [e s]\n  (reverse (reduce (fn [acc x]\n            (cons x (cons e acc)))\n          (cons (first s) (empty s))\n          (rest s))))", "problem": 40, "user": "5364697ce4b0243289761e62"}, {"code": "(fn [iter coll]\n\t(butlast (mapcat #(vector % iter) coll)))", "problem": 40, "user": "536581e4e4b0243289761e6d"}, {"code": "#(drop-last (flatten (for [x %2] (list x %1))))", "problem": 40, "user": "5354bb38e4b084c2834f4b0a"}, {"code": "(fn fff [sep, lll]\n\t(if (seq lll)\n\t  (if (seq (rest lll))\n\t\t(cons (first lll) (cons sep (fff sep (rest lll))))\n\t\tlll)\n\t\tlll))", "problem": 40, "user": "534bfa81e4b084c2834f4a87"}, {"code": "(fn [d s]\n  (concat [(first s)] (mapcat #(vector d %) (rest s))))", "problem": 40, "user": "5338e33fe4b0e30313ee6ca1"}, {"code": "(fn intrp [item l]\n  (if (= (count l) 1)\n    l\n    (concat (list (first l) item) (intrp item (rest l)))))", "problem": 40, "user": "5368a275e4b0243289761e8f"}, {"code": "(fn [x y] (conj (vec (mapcat #(list % x) (butlast y))) (last y)))", "problem": 40, "user": "5369d072e4b0243289761ea1"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "536973e5e4b0243289761e9e"}, {"code": "(fn intr [elm lst]\n  (drop-last(flatten (map (fn [a] [a elm]) lst))))", "problem": 40, "user": "52c42bc2e4b0c2d177d620d0"}, {"code": "(fn [x col]\n  (rest (mapcat vector (repeat x) col)))", "problem": 40, "user": "5228b015e4b0186687e23a8a"}, {"code": "(fn [val xs] (drop 1 (mapcat #(conj (list %) val) xs)))", "problem": 40, "user": "4edb314d535d10e5ff6f5317"}, {"code": "#(butlast (mapcat vector %2 (iterate (fn [x] %1) %1)))", "problem": 40, "user": "535eaa73e4b04ce2eb3ed2d4"}, {"code": "(fn [x y] (rest (flatten (map vector (repeat (count y) x) y))))", "problem": 40, "user": "51cb5c3de4b08d8387cbedd7"}, {"code": "(fn my-interpose\n  [sep xs]\n  (butlast (mapcat #(list %1 sep) xs)))", "problem": 40, "user": "536aa86de4b0243289761eb1"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "536d83cee4b0fc7073fd6e5e"}, {"code": "(fn [x coll]\n  (loop [coll coll s ()]                                   \n    (if (empty? coll)\n      (rest (reverse s))\n      (recur (rest coll)\n             (cons (first coll) (cons x s))\n             ))))", "problem": 40, "user": "5369a4b1e4b0243289761e9f"}, {"code": "(fn [c xs] (drop-last (reduce #(concat %1 (list %2 c)) [] xs)))", "problem": 40, "user": "53403110e4b085b17e897da6"}, {"code": "(fn [d s] (drop-last (flatten (map #(list %1 d) s))))", "problem": 40, "user": "535197f2e4b084c2834f4ae4"}, {"code": "(fn [d coll]\n  (rest (reduce (fn [acc curr]\n                  (conj acc d curr))\n                []\n                coll)))", "problem": 40, "user": "53695439e4b0243289761e9a"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "53691dc7e4b0243289761e97"}, {"code": "(fn [ v xs]  ( drop-last (flatten (for [x xs] (list x v)))))", "problem": 40, "user": "52d24f60e4b099d49816f0a8"}, {"code": "(fn [v xs]\n  (rest (mapcat #(list v %) xs)))", "problem": 40, "user": "536ca4bde4b0fc7073fd6e49"}, {"code": "(fn[s v] (drop-last (mapcat #(vector % %2) v (repeat s))))", "problem": 40, "user": "536e86b0e4b0fc7073fd6e72"}, {"code": "(fn [d s]\n  (rest (reduce #(conj %1 d %2) [] s)))", "problem": 40, "user": "536f5900e4b0fc7073fd6e7b"}, {"code": "#(rest (interleave (repeat %) %2))", "problem": 40, "user": "524b0645e4b09eba1c0223bf"}, {"code": "(fn [token coll] (drop-last (mapcat #(list % token) coll)))", "problem": 40, "user": "534d5ab7e4b084c2834f4a9c"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "536e0930e4b0fc7073fd6e66"}, {"code": "(fn intrps [a [h & t]]\n    (cons h (mapcat (partial list a) t)))", "problem": 40, "user": "5370ef22e4b0fc7073fd6ea0"}, {"code": "(fn interp [sep col] (rest (mapcat list (repeat (count col) sep) col)))", "problem": 40, "user": "52f53589e4b05e3f0be25f2c"}, {"code": "#(drop-last (interleave %2 (repeat %1)))", "problem": 40, "user": "534f13b2e4b084c2834f4ac4"}, {"code": "#(drop-last (interleave %2 (repeat (count %2) %1)))", "problem": 40, "user": "4fe9ea87e4b0547ebccb2476"}, {"code": "(fn [a b] (drop 1 (#(interleave (repeat (count %2) %1) %2) a b)))", "problem": 40, "user": "536c7470e4b0fc7073fd6e3e"}, {"code": "(fn [sep s] (rest (mapcat #(list sep %) s)))", "problem": 40, "user": "53578543e4b04ce2eb3ed280"}, {"code": "(fn [d s] (reduce (fn [a b] (conj a d b)) (vector (first s)) (rest s)))", "problem": 40, "user": "536f2faee4b0fc7073fd6e79"}, {"code": "(fn lpose\n  [val lst]\n  (if (empty? lst)\n    '()\n    (if (= (count lst) 1)\n      lst\n      (flatten (conj (lpose val (rest lst)) [ (first lst) val] )))))", "problem": 40, "user": "534ff8a6e4b084c2834f4ad1"}, {"code": "(fn [a b] (drop-last (mapcat #(conj [] % a) b)))", "problem": 40, "user": "536a37efe4b0243289761eaa"}, {"code": "(fn my-interpose [arbitrary collection]\n  (reverse\n    (loop [arb arbitrary coll collection result []]\n       (if (empty? (rest coll));if there is only one element in the collection left\n           (conj result (first coll)) ;conj the result with the element\n           (recur arb (rest coll) (flatten (conj result \n                                                 (list arb\n                                                       (first coll)))))))))\n\t\t\t;else, recur the arbitrary value, the rest of the collection, and then flatten the result conj-ing\n            ;the result with a list of the arbitary element and the first in the collection. At the very end, reverse\n            ;the entire flattened collection", "problem": 40, "user": "53713ebee4b0fc7073fd6ead"}, {"code": "(fn [glue elements] (drop-last (interleave elements (repeat glue))))", "problem": 40, "user": "536f62aee4b0fc7073fd6e7c"}, {"code": "(fn [sep, elems] (conj (flatten (map #(list sep %1) (rest elems))) (first elems)))", "problem": 40, "user": "53736ffce4b06d7f452d9e11"}, {"code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "problem": 40, "user": "53730973e4b06d7f452d9e05"}, {"code": "#(butlast (mapcat list %2 (repeat (count %2) %)))", "problem": 40, "user": "4ec53f8c535d6d7199dd368b"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "53705e2de4b0fc7073fd6e96"}, {"code": "(fn [s l] (rest (interleave (take (count l) (repeat s)) l)))", "problem": 40, "user": "535943b3e4b04ce2eb3ed295"}, {"code": "(fn b [x y]\n  (drop-last\n   (mapcat list y (repeat x))))", "problem": 40, "user": "535056a7e4b084c2834f4adb"}, {"code": "#(cons (first %2) (mapcat list (repeat %1) (rest %2)))", "problem": 40, "user": "53720c5ce4b0493c815db704"}, {"code": "(fn [sep, coll] (drop-last (flatten (map #(concat [%] [sep]) coll))))", "problem": 40, "user": "534c1c64e4b084c2834f4a8a"}, {"code": "(fn [sep x]\n\t(loop [x x x_y []]\n\t\t(if (empty? (rest x))\n\t\t\t(conj x_y (first x))\n\t\t\t(do \n\t\t\t\t(println \"x\" x \"x_y\" x_y)\n\t\t\t\t(recur (rest x) (conj x_y (first x) sep))\n\t\t\t)\n\t\t)\n\t)\n)", "problem": 40, "user": "534f0b51e4b084c2834f4ac3"}, {"code": "(fn [del l] (reduce #(conj %1 del %2) [(first l)] (rest l)))", "problem": 40, "user": "53712c03e4b0fc7073fd6ea9"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "536b9d8ae4b0243289761ebe"}, {"code": "(fn [sep coll]\n  (concat (flatten (map (fn [val] [val sep]) (butlast coll))) [(last coll)])\n  )", "problem": 40, "user": "500e7063e4b04a05d36fcc07"}, {"code": "(fn [sep coll]\n  (drop-last (interleave coll (repeat sep))))", "problem": 40, "user": "5317d78ee4b08068f379ed63"}, {"code": ";; I like this implementation better, since I don't need to make a lazy seq\n;; of the separator.\n(fn my-interpose [separator, coll]\n  (rest (mapcat #(vector separator %) coll)))\n\n;;(fn my-interpose [separator, coll]\n;;  (rest (interleave (repeat separator) coll)))", "problem": 40, "user": "53713ed9e4b0fc7073fd6eaf"}, {"code": "#(vec (drop-last (flatten (map list %2 (repeat (count %2) %1)))))", "problem": 40, "user": "5356d00ee4b04ce2eb3ed26f"}, {"code": "(fn [n l] (rest (interleave (repeat (count l) n) l)))", "problem": 40, "user": "535e518ee4b04ce2eb3ed2cf"}, {"code": "(fn my [val col]\n  (if (= 1 (count col))\n    (list (first col))\n    (concat (list (first col) val) (my val (rest col)))))", "problem": 40, "user": "5370f8ede4b0fc7073fd6ea2"}, {"code": "(fn [x ys]\n  (drop 1\n    (interleave (repeat x) ys)))", "problem": 40, "user": "53779a26e4b06839e8705e38"}, {"code": "(fn[x y](drop-last (interleave  y  (repeat  x))))", "problem": 40, "user": "534d639ae4b084c2834f4a9e"}, {"code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "536d260be4b0fc7073fd6e55"}, {"code": "(fn [d s] (butlast (interleave s (repeat d))))", "problem": 40, "user": "5379306fe4b06839e8705e50"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "5376966ae4b06839e8705e27"}, {"code": "#(letfn[(f[x y]\n          (next (interleave (take (count y) (cycle (list x))) y)))]\n   (f %1 %2))", "problem": 40, "user": "4e8849c5535d8b9bb0147ca4"}, {"code": "(fn [e l] (butlast (interleave l (repeat e))))", "problem": 40, "user": "536673a8e4b0243289761e76"}, {"code": "(fn [x coll] (butlast (mapcat #(list % x) coll)))", "problem": 40, "user": "5370b386e4b0fc7073fd6e9b"}, {"code": "(fn [x y]\n  (drop-last (interleave y (repeat x))))", "problem": 40, "user": "5371167fe4b0fc7073fd6ea7"}, {"code": "(fn [sep coll] (drop-last (mapcat vector coll (repeat sep))))", "problem": 40, "user": "507330e6e4b0e3170b5a8698"}, {"code": "(fn [v s]\n  (loop [orig s result []]\n    (if (empty? orig)\n      (butlast result)\n      (recur (rest orig) (concat result [(first orig) v]))\n      )))", "problem": 40, "user": "53791ab7e4b06839e8705e4d"}, {"code": "#(rest (interleave (iterate identity %) %2))", "problem": 40, "user": "4f92de49e4b0dcca54ed6cb2"}, {"code": "(fn [x s]\n   (butlast (interleave s (repeat x))))", "problem": 40, "user": "4f849f76e4b033992c121c36"}, {"code": "(fn interpose2 [seed coll]\n  (if-not (empty? coll)\n    (let [x (first coll)]\n    \t(if (= x (last coll))\n    \t\t[x]\n    \t\t(cons x (cons seed (interpose2 seed (rest coll))))))\n    []))", "problem": 40, "user": "53713676e4b0fc7073fd6eac"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "52cfb277e4b07d0d72b273ac"}, {"code": "(fn inter [n coll]\n    (let [[x & xs] coll]\n      (if (empty? xs) (list x)\n        (cons x (cons n (inter n xs))))))", "problem": 40, "user": "532c9dc9e4b019098a6f8b30"}, {"code": "(fn [x y] (rest (mapcat #(list x %) y)))", "problem": 40, "user": "53767991e4b06839e8705e25"}, {"code": "(fn [s x] (rest (flatten (map (fn [x] (list s x)) x))))", "problem": 40, "user": "537a620be4b06839e8705e5f"}, {"code": "(fn [sep coll]\n    (drop 1 (mapcat list (repeat sep) coll)))", "problem": 40, "user": "537bde5de4b06839e8705e73"}, {"code": "(fn re [d input] (if (not (empty? input)) (concat (vector (first input)) (if (not (empty? (rest input)))(vector d)'()) (re d (rest input))) '()))", "problem": 40, "user": "537e6211e4b06839e8705ea4"}, {"code": "#(drop 1 (interleave (iterate identity %1) %2))", "problem": 40, "user": "53736f65e4b06d7f452d9e0f"}, {"code": "#(rest (mapcat (partial vector %1) %2))", "problem": 40, "user": "536b2048e4b0243289761eb7"}, {"code": "#(loop [acc [(first %2)]\n        l (rest %2)]\n   (if (empty? l) acc\n     (recur (conj acc %1 (first l)) (rest l))))", "problem": 40, "user": "537e745ae4b06839e8705ea6"}, {"code": "(fn [sep lst]\n\t(drop 1 (interleave (repeat sep) lst)))", "problem": 40, "user": "537d4a69e4b06839e8705e8a"}, {"code": "(fn [x y] (rest (mapcat (fn [item] [x item]) y)))", "problem": 40, "user": "525cc912e4b0cb4875a45d48"}, {"code": "#(rest \n  (mapcat list\n   (repeat %) %2))", "problem": 40, "user": "537f4652e4b06839e8705eb1"}, {"code": "(fn [x y] (rest (reduce #(conj %1 x %2) [] y)))", "problem": 40, "user": "53733312e4b06d7f452d9e0a"}, {"code": "(fn [x y] \n  (loop [i 0 l '()]\n    (if (= i (- (count y) 1))\n      (reverse (conj l (nth y i)))\n      (recur (inc i) (conj l (nth y i) x)))))", "problem": 40, "user": "537e4259e4b06839e8705e9e"}, {"code": "(fn[splat stuff]\n  (cons (first stuff)\n        (apply concat (map #(list splat %1) (rest stuff)))))", "problem": 40, "user": "53806e5be4b06839e8705ec1"}, {"code": "(fn foo [v xs]\n  (reverse\n   (loop [xs (seq xs) first-pass true acc ()]\n     (if (empty? xs)\n       acc\n       (recur (rest xs) false \n              (if first-pass (list* (first xs) acc)\n                (list* (first xs) v acc)))))))", "problem": 40, "user": "53800d99e4b06839e8705ebd"}, {"code": "(fn [x y] (reduce #(conj (conj %1 x) %2) (conj [] (first y)) (rest y)))", "problem": 40, "user": "53778b90e4b06839e8705e36"}, {"code": "#(butlast (reduce (fn [s e] (conj (conj s e) %1)) [] %2))", "problem": 40, "user": "53820087e4b06839e8705ecf"}, {"code": "(fn [x coll]\n  (drop-last (interleave coll (repeat x))))", "problem": 40, "user": "53834ed3e4b06839e8705edb"}, {"code": "(fn [y x] \n  (let [C (#(fn [x] (list x %)) y) R (reverse x)]\n\t(concat (reduce (fn [y x] \n      (concat y  (C x))) [] \n        (reverse (rest R))) [(first R)] )))", "problem": 40, "user": "536c77f1e4b0fc7073fd6e3f"}, {"code": "#(drop-last (mapcat list %2 (repeat %1)))", "problem": 40, "user": "508147cde4b0a20aab17b93a"}, {"code": "#(butlast (interleave %2 (repeat %)))", "problem": 40, "user": "52eaba10e4b09f7907dd14c2"}, {"code": "(fn [delim xs] (butlast (mapcat list xs (repeat delim))))", "problem": 40, "user": "52e55e16e4b09f7907dd1460"}, {"code": "(fn [n, col]\n  (drop-last (mapcat (fn [x] [x n]) col)))", "problem": 40, "user": "4f7cbf4ae4b06e829148e1b7"}, {"code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "problem": 40, "user": "538538b2e4b06839e8705efe"}, {"code": "(fn [nb arg]\n  (loop [li arg\n         res (empty arg)]\n    (if (= 1 (count li))\n      (concat res li)\n      (recur (rest li) (concat (concat res [(first li)]) [nb])))))", "problem": 40, "user": "537881a4e4b06839e8705e46"}, {"code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "537e860ae4b06839e8705ea7"}, {"code": "#(drop 1 (interleave (repeat (count %2) %1) %2))", "problem": 40, "user": "537d6d44e4b06839e8705e8c"}, {"code": "(fn [a b] (butlast (interleave b (repeat (count b) a))))", "problem": 40, "user": "53858594e4b06839e8705f05"}, {"code": "(fn [sep coll]\n  (butlast (flatten (for [x coll\n                          y [sep]]\n                      [x y]))))", "problem": 40, "user": "5360f043e4b0243289761e3c"}, {"code": "(fn [sep seqn]\n  (butlast (interleave seqn (repeat sep))))", "problem": 40, "user": "53889587e4b0640c7a9a589e"}, {"code": "(fn interpose2 [sep lst]\n  (cond\n   (empty? lst) '()\n   (empty? (rest lst)) lst\n   :else (conj (interpose2 sep \n                           (rest lst))\n               sep\n               (first lst))))", "problem": 40, "user": "5374adc3e4b06d7f452d9e27"}, {"code": "(fn [i xs] (next (mapcat #(list i %) xs)))", "problem": 40, "user": "538557aee4b06839e8705f02"}, {"code": "(fn myinterpose [ele s]\n  (cons (first s)\n        (loop [res [] remaining (rest s)]\n          (if (empty? remaining)\n            res\n            (recur (concat res [ele (first remaining)]) (rest remaining))))))", "problem": 40, "user": "531bad96e4b08068f379ed93"}, {"code": "(fn [separator seqs]\n  (butlast (interleave seqs (iterate identity separator))))", "problem": 40, "user": "536f871de4b0fc7073fd6e7f"}, {"code": "#(rest (apply interleave (repeat %1) %&) )", "problem": 40, "user": "5364ab34e4b0243289761e64"}, {"code": "#(take (- (* (count %2) 2) 1) (interleave %2 (repeat (count %2) %1)))", "problem": 40, "user": "534eecaee4b084c2834f4abf"}, {"code": "#(drop-last (interleave %2 (repeat %)))", "problem": 40, "user": "537943c0e4b06839e8705e52"}, {"code": "(fn [sep coll] (rest (mapcat #(vector sep %) coll)))", "problem": 40, "user": "538b1644e4b0640c7a9a58c0"}, {"code": "(fn [x coll] (butlast (mapcat list coll (repeat x))))", "problem": 40, "user": "5372eaf2e4b06d7f452d9e03"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "53572767e4b04ce2eb3ed277"}, {"code": "(fn [v coll](butlast (mapcat #(vector % v) coll)))", "problem": 40, "user": "4f7426fde4b044e54cd9a8f5"}, {"code": "(fn _interpose [a b] \n  (if (= 1 (count b)) b \n    (into [(first b) a] (_interpose a (rest b)))) )", "problem": 40, "user": "53864493e4b06839e8705f10"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "53838742e4b06839e8705ee0"}, {"code": "(fn [v s] (butlast (flatten (map vector s (repeat (count s) v)) )))", "problem": 40, "user": "53852e84e4b06839e8705efd"}, {"code": "(fn [c l]\n  (butlast (interleave l (repeat c))))", "problem": 40, "user": "538be6afe4b0640c7a9a58c9"}, {"code": "(fn [x y]\n  (loop [result [(first y)]\n         y (rest y)]\n    (if (empty? y)\n      result\n      (recur (conj (conj result x) (first y)) (rest y)))))", "problem": 40, "user": "538d464ee4b0b51d73faae69"}, {"code": "(fn _interpose [i [x & xs]] (reduce #(conj %1 i %2) [x] xs))", "problem": 40, "user": "53410c24e4b00652c8746eca"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "511688d5e4b0b3e208dba05a"}, {"code": "(fn f [r x l]\n  (let [a (nth l 0)]\n    (if (= 1 (count l)) (conj r a)\n      (f (conj r a x) x (rest l))))) []", "problem": 40, "user": "538d8bb8e4b0b51d73faae71"}, {"code": ";count\n;take (- count 1) (repeat x)\n;interleave \n\n(fn[a s]\n  (reverse (cons (last s) (reverse (interleave s (take (- (count s) 1) (repeat a)))))\n  ))", "problem": 40, "user": "53863845e4b06839e8705f0f"}, {"code": "#(butlast (interleave %2 (repeat %1)))", "problem": 40, "user": "536827f1e4b0243289761e8a"}, {"code": "(fn I [x l]\n  (cond (empty? l) []\n        (empty? (rest l)) l\n        :else (list* (first l) x (I x (rest l)))))", "problem": 40, "user": "51a4416ae4b0def3c5c5868c"}, {"code": "(fn T [c v] (loop [c c v v r '()] (if (= (count v) 1) (flatten (list r v)) (recur c (rest v) (list r (first v) c)))))", "problem": 40, "user": "538d7e2ee4b0b51d73faae70"}, {"code": "(fn\n  [sep l]\n  (let [listSep (take (count l) (repeat sep))\n        joinedList (interleave l listSep)]\n    (drop-last joinedList)))", "problem": 40, "user": "538c6db7e4b0b51d73faae5a"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "4fe8a1f8e4b07c9f6fd12c5f"}, {"code": "(fn inter \n    ([x ys]\n     (inter x ys []))\n    ([x ys ls]\n      (if (empty? ys) \n        (butlast ls)\n        (inter x (rest ys) (conj ls (first ys) x)))))", "problem": 40, "user": "51960b79e4b04c0af7ff3c13"}, {"code": "#(rest \n  (reduce concat \n          (map \n           (fn [e] (list %1 e)) \n           %2)))", "problem": 40, "user": "538c3424e4b0b51d73faae58"}, {"code": "(fn [a b] (pop (vec (mapcat (fn [c] (vector c a)) b))))", "problem": 40, "user": "538e29d1e4b0b51d73faae80"}, {"code": "#(drop-last (interleave %2 (repeat (count %2) %1)))", "problem": 40, "user": "538de891e4b0b51d73faae78"}, {"code": "(fn [s coll] (drop-last (mapcat #(list % s) coll)))", "problem": 40, "user": "5368fedee4b0243289761e93"}, {"code": "(fn this [sep ls]\n  (if (empty? (rest ls))\n    ls\n    (into [(first ls) sep] (this sep (rest ls)))))", "problem": 40, "user": "5390952be4b0b51d73faae9c"}, {"code": "(fn [v s] (drop-last (interleave s (repeat v))))", "problem": 40, "user": "530bf87ee4b02e82168697d5"}, {"code": "(fn [inter items]\n  (loop [[head & tail] items\n         acc []]\n    (if (empty? tail)\n      (conj acc head)\n      (recur tail (conj acc head inter)))))", "problem": 40, "user": "53936394e4b0b51d73faaebb"}, {"code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "5391ab43e4b0b51d73faaea6"}, {"code": "(fn [v s] (butlast (mapcat #(list % v) s)))", "problem": 40, "user": "5392b849e4b0b51d73faaeb1"}, {"code": "(fn [sp li] (reverse (rest (reverse (reduce (fn [s x] (concat s [x sp])) [] li)))))", "problem": 40, "user": "5394265ee4b0b51d73faaec6"}, {"code": "(fn [x xs]\n  (drop-last (interleave xs (repeat x))))", "problem": 40, "user": "5383668ee4b06839e8705edd"}, {"code": "#(next (interleave (repeat %1) %2))", "problem": 40, "user": "5394aa77e4b0b51d73faaecd"}, {"code": "(fn interpose_ [sep coll]\n  (loop [col (rest coll) acc [(first coll)]]\n    (if (empty? col)\n      acc\n      (recur (rest col) (conj acc sep (first col)))\n)))", "problem": 40, "user": "53886d2fe4b0640c7a9a589d"}, {"code": "(fn f [n coll]\n  (reverse (rest (reverse (mapcat #(list %1 %2) coll (iterate identity n))))))", "problem": 40, "user": "538c9144e4b0b51d73faae5d"}, {"code": "#(butlast (interleave %2 (repeat (count %2) %)))", "problem": 40, "user": "53940789e4b0b51d73faaec3"}, {"code": "#(rest (interleave (repeat %1) %2))", "problem": 40, "user": "528410bbe4b0239c8a67adc2"}, {"code": "(fn [sep coll]\n  (drop 1 (interleave (repeat sep) coll)))", "problem": 40, "user": "510ec1bce4b07438aa321461"}, {"code": "(fn [z as] (drop-last (mapcat #(list %1 z) as)))", "problem": 40, "user": "5393de76e4b0b51d73faaec2"}, {"code": "(fn [z [x & xs]]\n  (cons x (reduce (fn [zs x] (concat zs [z x])) nil xs)))", "problem": 40, "user": "4f497b61e4b0d56e7bb92bf3"}, {"code": "#(drop-last (interleave %2 (repeat (count %2) %1)))", "problem": 40, "user": "539755d9e4b0b51d73faaee8"}, {"code": "(fn ip [sep [l & more]]\n  (cond \n    (nil? more) (list l)\n    :else (conj (ip sep more) sep l)))", "problem": 40, "user": "53979a87e4b0b51d73faaef0"}, {"code": "(fn f40 [x c]\n  (drop-last (reduce #(conj %1 %2 x) [] c)))", "problem": 40, "user": "535aee3be4b04ce2eb3ed2aa"}, {"code": "#(concat (list (first %2)) (mapcat (fn [x] (list % x)) (rest %2)))", "problem": 40, "user": "53976599e4b0b51d73faaeea"}, {"code": "(fn [v x] (reduce #(into % (list v %2)) (into (empty x) (list (first x))) (rest x)))", "problem": 40, "user": "536de1c3e4b0fc7073fd6e64"}, {"code": "(fn  [delim lst]\n  (loop [rm (seq lst), acc (vector)]\n    (cond (empty? rm) (seq acc)\n          (= 1 (count rm)) (recur (rest rm) (conj acc (first rm)))\n          :else (recur (rest rm) (conj acc (first rm) delim)))))", "problem": 40, "user": "538e36c7e4b0b51d73faae81"}, {"code": "(fn[delim col] (flatten (reduce #( vector %1 delim %2) col)))", "problem": 40, "user": "53347274e4b0656e627bfd6b"}, {"code": "#(rest (mapcat list (repeat %1) %2))", "problem": 40, "user": "53973e7be4b0b51d73faaee6"}, {"code": "(fn [value coll] (drop 1 (mapcat #(list value %) coll)))", "problem": 40, "user": "539a2901e4b0b51d73faaf0f"}, {"code": "(fn [sep s] (rest (mapcat #(list sep %) s)))", "problem": 40, "user": "539ad6b7e4b0b51d73faaf18"}, {"code": "(fn my-interpose\n  [sep coll]\n  (lazy-seq\n   (let [s (seq coll)]\n     (if s\n       (if (empty? (rest s))\n         s\n         (cons (first s) (cons sep (my-interpose sep (rest s)))))))))", "problem": 40, "user": "536e5055e4b0fc7073fd6e6b"}, {"code": "(fn in [e [f & n]]\n  (if (empty? n)\n    [f]\n    (concat [f e] (in e n))))", "problem": 40, "user": "53908e6be4b0b51d73faae9a"}, {"code": "(fn [c [x & s]]\n    (reduce #(conj % c %2) [x] s))", "problem": 40, "user": "5398305fe4b0b51d73faaef6"}, {"code": "#(next (interleave (repeat %1) %2))", "problem": 40, "user": "53948e96e4b0b51d73faaecc"}, {"code": "(fn [sep xs]\n  (concat \n         (mapcat (fn [x]\n         \t\t[x sep])\n       \t\t(butlast xs))\n   [(last xs)]))", "problem": 40, "user": "539c20a4e4b0b51d73faaf25"}, {"code": "(fn [a col] (reverse (rest (reduce #(conj %1 %2 a) () col))))", "problem": 40, "user": "539cacbde4b0b51d73faaf2f"}, {"code": "(fn my-interpose\n  \n  [interposer s]\n  (butlast (reduce (fn [a b] (concat a [b interposer])) [] s)))", "problem": 40, "user": "53951c75e4b0b51d73faaed4"}, {"code": "(fn [x y]\n  (cons (first y) (mapcat list (repeat x) (rest y))))", "problem": 40, "user": "538fe131e4b0b51d73faae91"}, {"code": "(fn [key coll]\n  (drop-last(flatten (map #(vector %1 key) coll))))", "problem": 40, "user": "53862316e4b06839e8705f0e"}, {"code": "(fn [sep col]\n  (loop [t col r []]\n    (if (seq t)\n      (if (seq (rest t))\n        (recur (rest t) (conj r (first t) sep))\n        (recur (rest t) (conj r (first t))))\n      r)))", "problem": 40, "user": "539c64cde4b0b51d73faaf2a"}, {"code": "(fn [va s] (reduce (fn [m v] (conj m va v)) [(first s)] (rest s)))", "problem": 40, "user": "52b452a5e4b0c58976d9ad20"}, {"code": "#(flatten (map (fn [item] (if (= item (last %2)) (vector item) (vector item %1))) %2))", "problem": 40, "user": "52b71bd2e4b0c58976d9ad4d"}, {"code": "(fn [v s]\n  (rest (interleave (repeat v) s)))", "problem": 40, "user": "536c1531e4b0fc7073fd6e36"}, {"code": "(fn [s c] (drop-last (mapcat #(list % s) c)) )", "problem": 40, "user": "539ec9f9e4b0ca733b974491"}, {"code": "#(butlast (interleave %2 (repeat %1)))\n\n;(fn [sep coll]\n;\t(butlast (mapcat #(list % sep) coll)))", "problem": 40, "user": "53a074a4e4b0ca733b9744af"}, {"code": "#(drop-last (interleave %2 (repeat (count %2) %1)))", "problem": 40, "user": "53a065c2e4b0ca733b9744ad"}, {"code": "(fn my-interpose [p coll]\n  (cond\n   (seq (rest coll)) (cons (first coll) (cons p (my-interpose p (rest coll))))\n   (seq coll) coll))", "problem": 40, "user": "50b63c5ee4b0a86f8358ca69"}, {"code": "#(drop 1 (interleave (repeat %1) %2))", "problem": 40, "user": "537e104ce4b06839e8705e9a"}, {"code": "(fn [x ys]\n   (-> (mapcat vector ys (repeat x))\n       butlast))", "problem": 40, "user": "5327c591e4b09d4e7a9b54ff"}, {"code": "(fn [c coll] (rest (mapcat (fn [e] [c e]) coll)))", "problem": 40, "user": "53710c09e4b0fc7073fd6ea5"}, {"code": "(fn [i coll] (butlast (flatten (map #(list %1 i) coll))))", "problem": 40, "user": "53a1b5c8e4b0ca733b9744c1"}, {"code": "(fn [val coll]\n  (drop 1 (interleave (repeat val) coll)))", "problem": 40, "user": "538e864ee4b0b51d73faae87"}, {"code": "(fn [x y] (reverse (rest ( #( if (empty? %2) %3 (recur %1 (rest %2) (conj (conj %3 (first %2)) %1))) x y '()))))", "problem": 40, "user": "539c9e26e4b0b51d73faaf2e"}, {"code": "(fn [v xs]\n  (drop-last (mapcat #(list %1 v) xs)))", "problem": 40, "user": "52e657e4e4b09f7907dd1472"}, {"code": "(fn [j coll]\n   (butlast (flatten (map vector coll (take (count coll) (repeat j))))))", "problem": 40, "user": "52c49401e4b0c2d177d620de"}, {"code": "#(drop-last (interleave %2 (repeat (count %2) %1)))", "problem": 40, "user": "53a068cbe4b0ca733b9744ae"}, {"code": "(fn [n s] (drop-last (mapcat #(conj [] % n) s)))", "problem": 40, "user": "53a0ce51e4b0ca733b9744b6"}, {"code": "(fn [sep coll]\n  (reduce\n   (fn [acc next]\n     (if (empty? acc)\n       (conj acc next)\n       (apply conj acc [sep next])))\n   []\n   coll))", "problem": 40, "user": "5374ad7de4b06d7f452d9e26"}, {"code": "(fn [x y] (rest (mapcat (fn [a] (list x a)) y)))", "problem": 40, "user": "539b4268e4b0b51d73faaf1c"}, {"code": "(fn [x y] (drop 1 (interleave (repeat x) y)))", "problem": 40, "user": "4f68a9bbe4b07046d9f4ef79"}, {"code": "(fn [n l]\n  (take (- (* 2 (count l)) 1) (mapcat #(list % n) l))\n)", "problem": 40, "user": "53a36fd7e4b0f1fc74538834"}, {"code": "#(concat (interleave %2 (repeat (- (count %2) 1) %1)) (list (last %2)))", "problem": 40, "user": "52fac708e4b047fd55836fff"}, {"problem": 40, "code": "#(butlast (reduce (fn [result element]\n                       (conj result element %1)\n                     )\n                   []\n                   %2))", "user": "53a26cede4b0f1fc7453882a"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "user": "53a19dece4b0ca733b9744c0"}, {"problem": 40, "code": "(fn [c ls] \n  (rest \n   (flatten \n    (map (fn [k] [c k]) ls))))", "user": "53a5bc3ae4b0ef122a8689c3"}, {"problem": 40, "code": "#(rest (mapcat list (repeat (count %2) %1) %2))", "user": "4f041de1535dcb61093f6ba5"}, {"problem": 40, "code": "(fn [a b] (butlast (mapcat #(list % a) b)))", "user": "5396c94be4b0b51d73faaee3"}, {"problem": 40, "code": "#(rest (mapcat (fn [z] (list %1 z)) %2))", "user": "53a5c7ffe4b0ef122a8689c4"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %)))", "user": "53a739b0e4b0ef122a8689d0"}, {"problem": 40, "code": "#(take (dec (* 2 (count %2))) (mapcat (fn [a] (list a %1)) %2))", "user": "53a2be95e4b0f1fc7453882d"}, {"problem": 40, "code": "(fn  [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "user": "53a8d9efe4b047364c04442d"}, {"problem": 40, "code": "#(take (dec (* 2 (count %2))) (interleave %2 (repeat %1)))", "user": "53a83877e4b047364c044425"}, {"problem": 40, "code": "(fn ip [c coll]\n    (lazy-seq\n      (when (seq coll)\n       (cons (first coll)\n             (if (next coll)\n               (cons c (ip c (rest coll))))))))", "user": "52d885afe4b09f7907dd1398"}, {"problem": 40, "code": "(fn [value items]\n  (cons (first items)\n        (mapcat #(-> [value %]) \n                (rest items))))", "user": "539f4e9ee4b0ca733b974498"}, {"problem": 40, "code": "(fn [n s] (butlast (mapcat list s (repeat n))))", "user": "53aa1528e4b047364c04443f"}, {"problem": 40, "code": "#(rest (mapcat (partial list %1) %2))", "user": "526e5159e4b03e8d9a4a7316"}, {"problem": 40, "code": "(fn[sep coll] (drop 1 (interleave (repeat sep) coll)))", "user": "5376f0d0e4b06839e8705e2c"}, {"problem": 40, "code": "(fn [sep x] \n  (\n   (fn test [a b c] \n     (if \n       (= '() (rest a))\n       (concat b (conj '() (first a)))\n       (test (rest a) (concat b (conj '() (first a)) (conj '() c)) c)\n       )\n     )\n    x '() sep)\n  )", "user": "53874820e4b06839e8705f1b"}, {"problem": 40, "code": "(fn [separ coll] \n  (loop [separ separ [hd & tl] coll acc []] \n    (if (empty? tl) \n      (conj acc hd) \n      (recur separ tl (conj acc hd separ)))))", "user": "52e4f06be4b09f7907dd1456"}, {"problem": 40, "code": "(fn [v xs]\n  (loop [xs xs\n         now false\n         acc []]\n    (cond\n     (empty? xs) acc\n     (true? now) (recur xs false (conj acc v))\n     :else (recur (rest xs) true (conj acc (first xs))))))", "user": "51c116d4e4b0c9c822882942"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "539f3397e4b0ca733b974496"}, {"problem": 40, "code": "(fn ntrps [i data]\n  (let [[x & xs] data]\n    (if (empty? xs)\n      [x]\n      (cons x (cons i (ntrps i xs)))\n    )\n  )\n)", "user": "5225a0f5e4b01819a2de430e"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "53a7e3b9e4b047364c044423"}, {"problem": 40, "code": "(fn [d l]\n  (conj\n    ((fn blah [r]\n      (if (= '() r)\n        '()\n        (conj (blah (rest r)) (first r) d)))\n   (rest l)) (first l)))", "user": "53aaaf7ae4b047364c044444"}, {"problem": 40, "code": "(fn [a b]\n  (rest\n    (let [c (map (fn [_] a) (range 0 (count b)))]\n    (mapcat #(conj [] %1 %2) c b))))", "user": "532f8569e4b019098a6f8b4f"}, {"problem": 40, "code": "(fn bar [delim s]\n\t((fn foo [ret s] \n\t\t(if (= (count s) 1)\n\t\t\t(conj ret (first s))\n\t\t\t(foo (conj ret (first s) delim) (rest s)) )) [] s))", "user": "53a94b63e4b047364c044434"}, {"problem": 40, "code": "(fn\n  [sep coll]\n  (loop [completed '()\n         remaining coll]\n    (if (= (count remaining) 1)\n      (cons (first remaining) completed)\n      (recur (conj completed (last remaining) sep) (butlast remaining)))))", "user": "53ac4719e4b047364c04445c"}, {"problem": 40, "code": "(fn [arb s1]\n  (butlast (flatten (map (fn [i] [i arb]) s1))))", "user": "52f0ea04e4b05e3f0be25ee6"}, {"problem": 40, "code": "(fn [sep coll] (butlast (interleave coll (repeat sep))))", "user": "53ae16e2e4b047364c044472"}, {"problem": 40, "code": "(fn f [x coll]\n  (pop (reduce #(conj % %2 x) [] coll)))", "user": "53abf519e4b047364c044456"}, {"problem": 40, "code": "(fn [default sequenc]\n  (drop-last (mapcat list sequenc (into [] (repeat (count sequenc) default))))\n)", "user": "5391bc62e4b0b51d73faaea7"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "user": "53a0ab8ce4b0ca733b9744b3"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "user": "53a7771ee4b047364c04441b"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "538f4c1de4b0b51d73faae8c"}, {"problem": 40, "code": "#(drop 1(interleave (repeat %1) %2))", "user": "53b12c76e4b047364c04448a"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "50270618e4b01614d1633feb"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "53b15e6ee4b047364c04448f"}, {"problem": 40, "code": "#(drop-last (mapcat list %2 (repeat %1)))", "user": "5189a51ae4b0288ada3dbdad"}, {"problem": 40, "code": "(fn [x coll]\n  (drop-last (interleave coll (repeat x))))", "user": "53ae0c50e4b047364c044471"}, {"problem": 40, "code": "#(loop [coll %2\n        acc '()]\n   (if-let [r (seq (rest coll))]\n     (recur r (concat acc (list (first coll) %1)))\n     (concat acc (list (first coll)))\n   ))", "user": "5245e320e4b09dbe66b56177"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "53b182a5e4b047364c044491"}, {"problem": 40, "code": "(fn [val coll]\n  (if (empty? coll) coll\n   (loop [r (list (first coll))\n         coll (rest coll)]\n    (if (empty? coll) r\n      (recur (concat r (list val (first coll))) (rest coll))))))", "user": "52d07cc5e4b07d0d72b273bb"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "53acaf1fe4b047364c04445f"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "53acca34e4b047364c044460"}, {"problem": 40, "code": "#(vec (butlast (mapcat list %2 (repeat %1))))", "user": "52a229e0e4b04e0c58e87be9"}, {"problem": 40, "code": "(fn [a b](drop 1 (interleave (repeat a) b)))", "user": "53b4bddae4b047364c0444b9"}, {"problem": 40, "code": "#(conj (interleave (repeat %1) (rest %2)) (first %2))", "user": "5154c361e4b0179c5115f4e3"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %)))", "user": "5329b493e4b09d4e7a9b5515"}, {"problem": 40, "code": "(fn [x y] (drop-last (interleave y (take (count y) (repeat x)) )))", "user": "53ad28ede4b047364c044462"}, {"problem": 40, "code": "(fn [sep coll] (pop (vec (interleave coll (repeat sep)))))", "user": "53ac4c6fe4b047364c04445d"}, {"problem": 40, "code": "(fn [x xs]\n   (loop [val [(first xs)]\n          xs (rest xs)]\n     (if (empty? xs)\n       val\n       (recur\n        (conj val x (first xs))\n        (rest xs)))))", "user": "4fec08e8e4b0681fd128dc9d"}, {"problem": 40, "code": "(fn [el col] (drop-last (interleave col (repeat el))))", "user": "53164ccce4b08068f379ed45"}, {"problem": 40, "code": "(fn [se s] (butlast (flatten (map #(list % se) s) )))", "user": "53b3ea79e4b047364c0444ab"}, {"problem": 40, "code": "(fn intrps [v s]\n  (drop 1 (interleave (repeat v) s)))", "user": "53b39d82e4b047364c0444a6"}, {"problem": 40, "code": "(fn [s sq]\n     ((fn inter [s sq]\n          (if (or (empty? sq) (empty? (rest sq)))\n            (seq sq)\n            (conj (inter s (rest sq))\n                  s\n                  (first sq)))) s sq))", "user": "4f867b25e4b033992c121c51"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "user": "53b780b8e4b047364c0444cf"}, {"problem": 40, "code": "(fn [a-val a-seq]\n  (butlast (mapcat #(list % a-val) a-seq)))", "user": "4fda8f57e4b05e33b9224f4e"}, {"problem": 40, "code": "#(butlast (mapcat vector %2 (repeat %)))", "user": "5382704be4b06839e8705ed4"}, {"problem": 40, "code": "#(rest (mapcat (partial list %1) %2))", "user": "53b71b94e4b047364c0444cd"}, {"problem": 40, "code": "#(cons (first %2) (interleave (repeat %1) (rest %2)))", "user": "539fa040e4b0ca733b97449f"}, {"problem": 40, "code": "(fn [sep l]\n  (butlast \n   (interleave l (repeat (count l) sep))))", "user": "539c88e1e4b0b51d73faaf2c"}, {"problem": 40, "code": "(fn [sep coll]\n  (butlast (reduce #(conj %1 %2 sep) [] coll)))", "user": "53ab94cae4b047364c044450"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "53b7c21ae4b047364c0444d4"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "53bb512ce4b047364c044503"}, {"problem": 40, "code": "(fn [x xs]\n  (loop [y x ys xs result []]\n    (if (= (count ys) 1)\n      (conj result (first ys))\n      (recur y (rest ys) (conj (conj result (first ys)) y)))))", "user": "52cf1e25e4b07d0d72b2739c"}, {"problem": 40, "code": "(fn [d s] (drop 1 (interleave (repeat d) s)))", "user": "53aeb3ebe4b047364c044477"}, {"problem": 40, "code": "#(reduce (fn [ac v] (conj (conj ac %) v)) [(first %2)] (next %2))", "user": "5310e968e4b08068f379ecdd"}, {"problem": 40, "code": "(fn [el lst]\n  (reduce  #(concat %1 (list el %2))\n           (list (first lst))\n           (rest lst))\n  )", "user": "53bd6fcfe4b0d9a98559a6d0"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "53be3ee7e4b0d9a98559a6df"}, {"problem": 40, "code": "(fn alt-interpose [sep coll]\n  (butlast (mapcat #(list % sep) coll)))", "user": "53bf0913e4b0c98a41f5cc99"}, {"problem": 40, "code": "(fn [item coll]\n  (loop [input (rest coll) output [(first coll)]]\n    (if (empty? input)\n      output\n      (recur (rest input) (conj (conj output item) (first input))))))", "user": "53beacf9e4b0d9a98559a6e3"}, {"problem": 40, "code": "(fn [sep l] (flatten (reduce #(list %1 sep %2) l)))", "user": "53b2a7f8e4b047364c04449c"}, {"problem": 40, "code": "(fn inter [x xs] ((fn f [z as bs] (if (empty? as)\n                                    (reverse (butlast bs))\n                                    (f z\n                                       (rest as) \n                                       (cons (first as)\n                                             (cons z bs))))) x xs ()))", "user": "53c051a5e4b0c98a41f5ccae"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %)))", "user": "53aef31ce4b047364c04447b"}, {"problem": 40, "code": "(fn [el coll]  \n  (vec (flatten\n  (reduce\n    (fn [m l]\n      (cons m (list el l)) \n    )\n    (list (first coll))\n   (rest coll))))\n)", "user": "52d6d490e4b09f7907dd1369"}, {"problem": 40, "code": "(fn InterposeSeq [i s]\n  (rest (apply concat\n               (map (fn [x y] (list x y))\n                    (repeat i)\n                    s))))", "user": "53b88e6ee4b047364c0444de"}, {"problem": 40, "code": "#(drop-last (mapcat list %2 (repeat %)))", "user": "52b434c9e4b0c58976d9ad1c"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %) %2))", "user": "53940b5ee4b0b51d73faaec4"}, {"problem": 40, "code": "(fn [v s]\n  (reduce #(concat %1 (list v %2)) (list (first s)) (rest s)))", "user": "53c1ce3ee4b00fb29b221268"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "53bd8d27e4b0d9a98559a6d6"}, {"problem": 40, "code": "(fn impose-seq [s l]\n  (loop [x (conj '() (first l))\n         e (rest l)\n         i 0]\n    (if (= i (count e))\n      x\n      (recur (concat x [s] [(nth e i)])\n             e\n             (inc i)))))", "user": "5018878ce4b029375d2a5056"}, {"problem": 40, "code": "(fn [x y] (drop-last (interleave y (repeat x))))", "user": "539c9d7ee4b0b51d73faaf2d"}, {"problem": 40, "code": "(fn [separator xs]\n  (butlast\n   (interleave xs (repeat separator))))", "user": "53c38b8ce4b00fb29b22127b"}, {"problem": 40, "code": "(fn foobar [n coll]\n  (let [doubler (fn [x] [x n])]\n    (butlast (apply concat (reduce (fn [cl e]\n                                 (conj cl (doubler e))) [] coll)))))", "user": "53b4344de4b047364c0444b4"}, {"problem": 40, "code": "(fn [val xs] (rest (reduce #(conj % val %2) [] xs)))", "user": "504f5804e4b0a02f9cffde72"}, {"problem": 40, "code": "(fn [sep xs]\n    (rest (interleave (repeat sep) xs)))", "user": "53c3397be4b00fb29b221279"}, {"problem": 40, "code": "(fn intp [el sq] (\n               if (empty? (rest sq))\n                   (cons (first sq) '())\n                   (cons (first sq) (cons el (intp el (rest sq))))\n               )\n   )", "user": "53342a1ce4b019098a6f8b8b"}, {"problem": 40, "code": "(fn [x [y & z]]\n  (reduce #(conj % x %2) [y] z))", "user": "53c74cfce4b00fb29b2212a7"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "user": "538db083e4b0b51d73faae74"}, {"problem": 40, "code": "(fn [x coll]\n  (let [xs (repeat (count coll) x)]\n    (reverse (rest (reverse (flatten (mapcat list coll xs)))))))", "user": "53b22df6e4b047364c044497"}, {"problem": 40, "code": "(fn [sep coll]\n  (butlast (interleave coll (repeat sep))))", "user": "53c126fce4b00fb29b22125b"}, {"problem": 40, "code": "(fn [e coll] (drop-last (flatten (map #(vector % e) coll))))", "user": "53cb321fe4b00fb29b2212d1"}, {"problem": 40, "code": "(fn [l x] (butlast (interleave x (repeat l))))", "user": "53ad2bbbe4b047364c044464"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "53cacdb5e4b00fb29b2212cb"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %) %2))", "user": "4e587e78535d8a8b8723a293"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "533cebf1e4b085b17e897d78"}, {"problem": 40, "code": "(fn [s c] (butlast (interleave c (repeat s))))", "user": "53cd4920e4b00fb29b2212de"}, {"problem": 40, "code": "(fn [x y] (drop-last (mapcat #(list % x) y)))", "user": "53cdb2c4e4b00fb29b2212e5"}, {"problem": 40, "code": "(fn [e s] (->> s (mapcat #(list e %)) rest))", "user": "53ced9fee4b00fb29b2212f8"}, {"problem": 40, "code": "(fn [x coll] (butlast (mapcat (fn [y] [y x]) coll)))", "user": "5227eacee4b0186687e23a5e"}, {"problem": 40, "code": "(fn [x xs]\n    (drop-last (interleave xs (repeat (count xs) x))\n    \n    ))", "user": "53ca23e3e4b00fb29b2212c6"}, {"problem": 40, "code": "(fn [x coll] (drop-last (interleave coll (repeat x))))", "user": "538ca203e4b0b51d73faae5f"}, {"problem": 40, "code": "(fn meep [a b] (if (= 1 (count b)) b (concat [(first b) a] (meep a (rest b)))))", "user": "53cff414e4b00fb29b221304"}, {"problem": 40, "code": "(fn [n coll]\n  (butlast(flatten (map (fn [%] [% n]) coll))))", "user": "53b05a36e4b047364c044481"}, {"problem": 40, "code": "#(-> %2 (interleave (repeat (count %2) %)) drop-last)", "user": "51c8f1d8e4b07ef393169e5d"}, {"problem": 40, "code": "(fn interpose' [n a]\n  (if (< (count a) 2)\n    a\n    (concat [(first a) n] (interpose' n (rest a)))))", "user": "53d612cbe4b0e771c3025452"}, {"problem": 40, "code": "(fn [sep coll]\n  (rest (interleave (repeat sep) coll)))", "user": "53d78b64e4b0e771c3025466"}, {"problem": 40, "code": "(fn [separator seq]\n  (reduce #(conj % separator %2) [(first seq)] (drop 1 seq)))", "user": "530c3d88e4b02e82168697d8"}, {"problem": 40, "code": "(fn [x coll]\n  (rest (flatten (for [n coll] [x n]))))", "user": "53ca41dae4b00fb29b2212c8"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last\n   (mapcat #(conj [] % sep) coll)))", "user": "4f7d91e6e4b06e829148e1c3"}, {"problem": 40, "code": "(fn linker [link coll]\n  (let [link (repeat link)\n        coll coll]\n    (drop-last (flatten (map list coll link)))))", "user": "53d40508e4b00fb29b221332"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "53d91412e4b0e771c3025474"}, {"problem": 40, "code": "(fn [inter seqer] (loop [counter 0 output []] \n\t(if (= counter (count seqer))\n\t\t(pop output)\n\t\t(recur \n\t\t\t(inc counter)\n\t\t\t(apply conj output (vec (list (get seqer counter) inter))))\n\t)))", "user": "53d5d24de4b0e771c302544a"}, {"problem": 40, "code": "(fn [s c] (pop (vec (mapcat #(list % s) c))))", "user": "53d5a63be4b0e771c3025449"}, {"problem": 40, "code": "(fn [split coll] (drop 1\n                       (flatten \n                        (map #(list split %) coll)\n                        )\n                       )\n  )", "user": "53d70f3be4b0e771c302545f"}, {"problem": 40, "code": "(fn my-interpose \n  ([v xs] (my-interpose v xs '()))\n  ([v xs1 xs2] \n    (if (= 1 (count xs1))\n      (reverse (conj xs2 (last xs1)))\n      (recur v (rest xs1) (conj xs2 (first xs1) v)))))", "user": "53b85932e4b047364c0444db"}, {"problem": 40, "code": "#(rest (interleave (repeat (count %2) %) %2))", "user": "53d5e45ae4b0e771c302544e"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "53da19fde4b0e771c3025484"}, {"problem": 40, "code": "(fn [sep coll] (rest (interleave (repeat sep) coll)))", "user": "53dbac68e4b094d41abdfef4"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "53ce4cd4e4b00fb29b2212ef"}, {"problem": 40, "code": "#(into [] (drop-last (interleave %2 (repeat (count %2) %1))))", "user": "53d920d9e4b0e771c3025475"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %) %2))", "user": "53cdbad1e4b00fb29b2212e6"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "53d6cf90e4b0e771c302545c"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "53dcf474e4b0d874e779ae25"}, {"problem": 40, "code": "#(rest (mapcat (fn [x] [%1 x]) %2))", "user": "4e6b8ac8535d8ccf87e9ff19"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "53dcdde4e4b0d874e779ae24"}, {"problem": 40, "code": "#(vec (drop-last (flatten (map (fn[x] (vector x %)) %2))))", "user": "533923fde4b0e30313ee6ca4"}, {"problem": 40, "code": "#(take (- (* (count %2) 2) 1) (interleave %2 (repeat %1)))", "user": "53bed4b5e4b0c98a41f5cc94"}, {"problem": 40, "code": "(fn [inter col]\n  (concat\n   (mapcat #(list % inter) (butlast col))\n   [(last col)]))", "user": "53dd37aee4b0d874e779ae28"}, {"problem": 40, "code": "(fn join\n  ([glue lst]        (join glue (rest lst) (list (first lst))))\n  ([glue lst result] (if (empty? lst)\n                       result\n                       (join glue (rest lst) (concat result (list glue (first lst)))))))", "user": "53ddd44be4b0d874e779ae2e"}, {"problem": 40, "code": "(fn ip [e s] (if (empty? (rest s))\n               s\n               (concat (list (first s) e) (ip e (rest s)))))", "user": "53de622ce4b0d874e779ae34"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "539dcb24e4b0b51d73faaf3d"}, {"problem": 40, "code": "(fn [x xs]\n  (butlast (flatten (for [ys xs] [ys x]))))", "user": "52a8ca0fe4b0c58976d9ac36"}, {"problem": 40, "code": "(fn [a b] (drop-last (interleave b (repeat a))))", "user": "51910da7e4b0f8ef0be96bf9"}, {"problem": 40, "code": "(fn [inter lst]\n  (loop [vals lst accume []]\n    (if (empty? vals)\n      accume\n      (recur (rest vals) \n             (if (> (count vals) 1)\n               (conj accume (first vals) inter)\n               (conj accume (first vals)))))))", "user": "5256a1d4e4b0541d1855ba29"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "53da8fede4b0e771c30254a3"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "user": "53da70a4e4b0e771c302549d"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %)))", "user": "53d4dadde4b00fb29b221337"}, {"problem": 40, "code": "(fn [x xs] (butlast (mapcat #(list % x) xs)))", "user": "53dfdf01e4b0d874e779ae46"}, {"problem": 40, "code": "(fn [sep col]\n  (butlast (mapcat #(list % sep) col)))", "user": "53a83c74e4b047364c044426"}, {"problem": 40, "code": "(fn [x y] (drop-last (mapcat #(list % x) y)))", "user": "53d0d7a9e4b00fb29b22130c"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "53d0c837e4b00fb29b22130b"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "53ded676e4b0d874e779ae3b"}, {"problem": 40, "code": "(fn rick-interpose [sep coll] \n  (let [n (count coll)]\n  (loop [j 0 tag :from-coll output (empty coll)]\n    (if (= j n)\n      output\n      (if (= tag :from-coll)\n        (recur (inc j) :from-separator (conj output (get coll j)))\n        (recur j :from-coll (conj output sep)))))))", "user": "53703287e4b0fc7073fd6e8f"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "53e19461e4b0d874e779ae59"}, {"problem": 40, "code": "(fn [sep col] (pop (vec (flatten (map (fn [item] [item sep]) col)))))", "user": "53e1c279e4b0d874e779ae5b"}, {"problem": 40, "code": "#(drop-last (mapcat vector %2 (repeat %)))", "user": "53e241a6e4b036ad0777e3f0"}, {"problem": 40, "code": "(fn [x coll]\n            (loop [a coll\n                   s []]\n              (if (= 1 (count a))\n                (conj s (first a))\n                (recur (rest a) (conj (conj s (first a)) x)))\n              ))", "user": "51a4d802e4b0def3c5c5869a"}, {"problem": 40, "code": "(fn my-interpose [x coll]\n  (rest (interleave (repeat x) coll)))", "user": "53dc94c8e4b094d41abdfefc"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "53e2b212e4b036ad0777e3f4"}, {"problem": 40, "code": "(fn my-interpose [x xs]\n  (if (< (count xs) 2)\n    xs\n    (cons (first xs) (cons x (my-interpose x (rest xs))))))", "user": "53e27bf1e4b036ad0777e3f2"}, {"problem": 40, "code": "(fn  [i l]\n\t(drop 1 (mapcat #(conj (seq [%]) i) l)))", "user": "530bae80e4b02e82168697d0"}, {"problem": 40, "code": "(fn [v sqn] (butlast (reduce concat (map #(list % v) sqn))))", "user": "53e2ac1ae4b036ad0777e3f3"}, {"problem": 40, "code": "(fn ipose [br s]\n  (cond\n    (empty? (rest s)) [(first s)]\n    :else\n      (concat\n        [(first s) br] (ipose br (rest s))\n        )\n    )\n  )", "user": "51ad808ee4b09397d5109784"}, {"problem": 40, "code": "#(rest (mapcat (fn [x] [% x]) %2))", "user": "53e4fa2ce4b036ad0777e454"}, {"problem": 40, "code": "(fn [sep s] (drop-last (mapcat #(list %1 %2) s (repeat sep))))", "user": "53c649d3e4b00fb29b221297"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "53dadf1de4b0e771c30254ad"}, {"problem": 40, "code": "(fn a [insert xs]\n  (if (= 1 (count xs))\n    xs\n    (concat (seq [(first xs) insert])\n            (a insert (rest xs)))))", "user": "525890f7e4b0cb4875a45cb5"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "53d28800e4b00fb29b22131e"}, {"problem": 40, "code": "(fn [seperator coll]\n  (drop-last (vec (flatten (map #(cons  % [seperator])  coll)))))", "user": "53844970e4b06839e8705eef"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "5377a23ce4b06839e8705e39"}, {"problem": 40, "code": "(fn [x coll]\n  (concat (mapcat #(vector % x) (drop-last coll)) (vector (last coll)))\n  )", "user": "53d2afede4b00fb29b221321"}, {"problem": 40, "code": "(fn myinter [s1 s2]\n   (if (= (count s2) 1) s2\n                  (cons (first s2) (cons s1 (myinter s1 (rest s2))))))", "user": "53e150e5e4b0d874e779ae53"}, {"problem": 40, "code": "(fn [interposer coll] (drop-last (interleave coll (repeat interposer))))", "user": "53dfd77fe4b0d874e779ae45"}, {"problem": 40, "code": "#(butlast (mapcat (fn [x] ( list x %1)) %2))", "user": "53d88bd5e4b0e771c302546e"}, {"problem": 40, "code": "(fn intr [sep lst]\n  (drop-last (mapcat #(list % sep) lst)))", "user": "53e30fcae4b036ad0777e3fc"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat (count %2) %1)))", "user": "53e76bb2e4b036ad0777e47d"}, {"problem": 40, "code": "#(drop 1 (apply concat (for [x (list %1) y %2] [x y])))", "user": "53e15371e4b0d874e779ae54"}, {"problem": 40, "code": "(fn [i coll] (drop-last (mapcat #(vector % i) coll)))", "user": "53e3e852e4b036ad0777e407"}, {"problem": 40, "code": "(fn [n v] \n      (drop-last (reduce #(concat % [%2 n]) [] v)))", "user": "53df152ee4b0d874e779ae3e"}, {"problem": 40, "code": "(fn [delim xs]\n  (loop [acc [(first xs)] \n         xs  (seq (next xs))]\n    (if (seq? xs)\n      (recur (conj acc delim (first xs)) (next xs))\n      (vec acc))))", "user": "51b8d3d5e4b050a1176cd69d"}, {"problem": 40, "code": "(fn poser [x, l]\n  (if (> (count l) 1)\n    (concat (vector (first l) x) (poser x (rest l)))\n    l))", "user": "53e92821e4b036ad0777e499"}, {"problem": 40, "code": "#(drop 1 (mapcat (fn [x] [%1 x]) %2))", "user": "53ecac57e4b0d648e757f4b3"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %)))", "user": "53e9a15be4b036ad0777e4ae"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %)))", "user": "53eb8ceae4b036ad0777e4fb"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "user": "5343753ae4b084c2834f4a1b"}, {"problem": 40, "code": "(fn [s x] (into [] (rest (mapcat (fn [i] [s i]) x))))", "user": "53e91473e4b036ad0777e495"}, {"problem": 40, "code": "(fn [sep seq] (rest (flatten (for [x seq] (list sep x)))))", "user": "53b952eee4b047364c0444e6"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last(mapcat vector coll (repeat sep))))", "user": "53bf9cfbe4b0c98a41f5cca4"}, {"problem": 40, "code": "(fn fa [sep list]\n  (if (empty? list)\n    '()\n    (if (empty? (rest list))\n      list\n      (cons (first list) (cons sep (fa sep (rest list)))))))", "user": "53e06f81e4b0d874e779ae4c"}, {"problem": 40, "code": "(fn [ip xs]\n  (rest (mapcat (partial vector ip) xs)))", "user": "53dfbc75e4b0d874e779ae44"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "53ea5307e4b036ad0777e4e2"}, {"problem": 40, "code": "#(drop-last (mapcat vector %2 (repeat %1)))", "user": "53e92aafe4b036ad0777e49a"}, {"problem": 40, "code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "user": "53ee7f2ee4b0d648e757f4cf"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "53e3f7a8e4b036ad0777e408"}, {"problem": 40, "code": "#(let [x %1 f \n      \t(fn [s e] \n          (let [r (rest s)] \n            (if (empty? r) \n              (conj e (first s))  \n              (recur r \n                     (conj e (first s) x )\n              )\n            )\n          )\n        )] (f %2 []))", "user": "50856bd1e4b004985b776e4c"}, {"problem": 40, "code": "(fn [sep xs] (butlast (mapcat #(list % sep) xs)))", "user": "53217912e4b09d4e7a9b54b3"}, {"problem": 40, "code": "(fn my-interpose [sep s]\n  (butlast (interleave s (repeat sep))))", "user": "53edb464e4b0d648e757f4c7"}, {"problem": 40, "code": "(fn [v coll] (drop-last (interleave coll (repeat (count coll) v))))", "user": "53e4b5a3e4b036ad0777e44b"}, {"problem": 40, "code": "(fn intp [v sq] (rest (mapcat #(list v %) sq)))", "user": "53ea72b6e4b036ad0777e4e5"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "user": "534bfc71e4b084c2834f4a88"}, {"problem": 40, "code": "(fn ! [a [x & xs]]\n   (if x\n     (cons x \n           (if xs (cons a (! a xs))))))", "user": "52eb2ec9e4b0705949c44439"}, {"problem": 40, "code": "(fn [x coll] (vec (drop-last (mapcat #(list % x) coll))))", "user": "53ef3adfe4b0742d9025b0c9"}, {"problem": 40, "code": "(fn [x y] (rest (flatten (for [i y] [x i]))))", "user": "53f1c05ee4b0742d9025b0e1"}, {"problem": 40, "code": "(fn [sep c]\n  (loop [e c\n         out []]\n    (if e\n      (recur (next e) (conj out (if (next e) \n                                  [(first e) sep] \n                                  [(first e)])))\n      (apply concat out))))", "user": "523578efe4b0a643f2dcb74c"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "53968a70e4b0b51d73faaee0"}, {"problem": 40, "code": "(fn [x y]\n  (butlast(reduce (fn [a b]\n            (conj a b x)\n            ) [] y )\n  ))", "user": "53ed2fafe4b0d648e757f4c1"}, {"problem": 40, "code": "#(vec (rest (interleave (repeat %1) %2)))", "user": "4f47d84fe4b0d56e7bb92bc3"}, {"problem": 40, "code": "(fn [x y] (pop (reduce #(conj %1 %2 x) [] y)))", "user": "53f035c2e4b0742d9025b0d2"}, {"problem": 40, "code": "(fn [sep coll]\n        (loop [coll coll\n               result []]\n          (if (= (count coll) 1)\n            (conj result (first coll))\n            (recur (rest coll) (conj result (first coll) sep))\n          )\n        )\n      )", "user": "53ecd01fe4b0d648e757f4b9"}, {"problem": 40, "code": "(comp drop-last #(interleave %2 (repeat (count %2) %1)))", "user": "53ef78bee4b0742d9025b0cd"}, {"problem": 40, "code": "(fn my-interpose [sep [x & xs]]\n  (lazy-seq\n    (cond\n      (empty? xs)  (list x)\n      :else        (cons x (cons sep (my-interpose sep xs)))\n    )\n  )\n)", "user": "53edb628e4b0d648e757f4c8"}, {"problem": 40, "code": "(fn _interpose [c s]\n         (if (= (count s) 1)\n           s\n           (concat (vector (first s)) (vector c) (_interpose c (rest s)))))", "user": "53f592b7e4b0db01ade6f9d0"}, {"problem": 40, "code": "(fn [sep coll] (cons (first coll) (interleave (repeat sep) (rest coll))))", "user": "53f35c34e4b0742d9025b0f4"}, {"problem": 40, "code": "(fn [s coll] \n    (drop-last (mapcat #(list % s) coll ) ))", "user": "537b1083e4b06839e8705e64"}, {"problem": 40, "code": "(fn my-interpose [deliminator values]\n  (reduce (fn [result elem] \n         (if(empty? result)\n           (conj result elem)\n           (concat result (list deliminator elem)))) [] values))", "user": "53f50c03e4b0db01ade6f9ca"}, {"problem": 40, "code": "(fn [v coll]\n    (into (empty coll) (drop 1 (interleave (repeat v) coll))))", "user": "53ea3a63e4b036ad0777e4dc"}, {"problem": 40, "code": "(fn [item coll] (butlast (flatten (map (fn [x y] [x y]) coll (repeat item)))))", "user": "53f67bcfe4b0db01ade6f9e1"}, {"problem": 40, "code": "(fn myfunc [a b] \n  (when (first b)\n    (if (not-empty (rest b))\n      (concat (list (first b) a) (myfunc a (rest b)))\n      (list (first b))\n      )\n  )\n)", "user": "53f12b77e4b0742d9025b0da"}, {"problem": 40, "code": "(fn foo [c ls]\n  (if-let [n (next ls)]\n    (concat (list (first ls) c) (foo c n))\n    (list (first ls))))", "user": "513e8141e4b02b2a3d8235c1"}, {"problem": 40, "code": "#(loop [[head & tail] %2\n        acc nil]\n   (if (nil? head)\n     acc\n     (recur tail \n            (if (nil? acc)\n              [head]\n              (conj acc %1 head)\n            )\n     )\n   )\n )", "user": "53f7820be4b0de5c41848560"}, {"problem": 40, "code": "(fn [sep seq] (butlast (mapcat #(list % sep) seq)))", "user": "53214efbe4b09d4e7a9b54b2"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %)))", "user": "53f6d555e4b0db01ade6f9e5"}, {"problem": 40, "code": "(fn [x y] (drop-last (interleave y (repeat x))))", "user": "53f6566ee4b0db01ade6f9de"}, {"problem": 40, "code": "(fn [single coll]\n  (loop [remaining coll result '()]\n    (if (empty? remaining)\n      (drop-last result)\n      (recur\n        (rest remaining)\n        (concat result (list (first remaining)) (list single))\n      )\n    )\n  )\n)", "user": "53f17931e4b0742d9025b0dd"}, {"problem": 40, "code": "#(take (dec (* (count %2) 2)) (interleave %2 (repeat (count %2) %1)))", "user": "53f5f740e4b0db01ade6f9d8"}, {"problem": 40, "code": "(fn [sep, coll] (drop-last 1 (mapcat (fn [i] (list i sep)) coll)))", "user": "53bd7080e4b0d9a98559a6d1"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %)))", "user": "53cd421ce4b00fb29b2212dd"}, {"problem": 40, "code": "(fn[d s]\n   (drop-last\n     (interleave\n       s\n       (repeat d))))", "user": "5398123ee4b0b51d73faaef3"}, {"problem": 40, "code": "(fn[sep sq](rest (interleave (repeat sep) sq)))", "user": "53e9681de4b036ad0777e4a4"}, {"problem": 40, "code": "(fn inter [mid coll]\n   (let [x (first coll)\n         xs (next coll)]\n     (if xs (into [x mid] (inter mid xs)) [ x]))\n   )", "user": "53ed6976e4b0d648e757f4c4"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "53f75957e4b0de5c4184855d"}, {"problem": 40, "code": "(fn peu [x y] (if (< (count y) 2) (seq y) (conj (peu x (rest y)) x (first y))))", "user": "53fc8424e4b0de5c418485b3"}, {"problem": 40, "code": "(fn interps [e l]\n  (cons \n   (first l) \n   (reduce \n    (fn [res el]\n      (conj res e el))\n    []\n    (rest l))))", "user": "50c13f77e4b096f585049c3b"}, {"problem": 40, "code": "(fn [n xs]\n  (if-not (empty? xs)\n    (cons (first xs)\n          (apply concat\n           (for [x' (rest xs)]\n             [n x'])))))", "user": "53ef7f77e4b0742d9025b0ce"}, {"problem": 40, "code": "(fn [elem a-seq]\n  (let [r (fn [acc a-seq]\n            (if (= 1 (count a-seq))\n              (concat acc a-seq)\n              (recur (concat acc [(first a-seq) elem])\n                     (rest a-seq))))]\n    (r [] a-seq)))", "user": "53fd0a22e4b0de5c418485e1"}, {"problem": 40, "code": "(fn [x l] (rest (interleave (repeat x) l)))", "user": "4dadb5f4c9a9d6ed3399dc57"}, {"problem": 40, "code": "(fn intersperse [elt [hd & tl]]\n  (if (empty? tl)\n    (list hd)\n    (conj (intersperse elt tl) elt hd)))", "user": "53fb5256e4b0de5c4184857f"}, {"problem": 40, "code": "(fn [n s] (drop-last 1(apply concat (map #(conj [] % n) s))))", "user": "53d86564e4b0e771c302546b"}, {"problem": 40, "code": "(fn [sep foo]\n  (butlast (interleave foo (repeat sep))))", "user": "53fd66a4e4b0de5c418485e3"}, {"problem": 40, "code": "#(rest (mapcat (partial list %1) %2))", "user": "53fe1c3be4b0de5c418485f2"}, {"problem": 40, "code": "#(drop-last (flatten (map vector %2 (repeat %1))))", "user": "53fdbe0fe4b0de5c418485e9"}, {"problem": 40, "code": "(fn f40 [a b]\n  (rest (flatten (map (partial list a) b))))", "user": "52c08c59e4b07a9af5792351"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "53fddd71e4b0de5c418485eb"}, {"problem": 40, "code": "(fn [x y] (concat ( interleave y (take (- (count y) 1) (repeat x)) ) (list (last y))   ))", "user": "53fdc4b8e4b0de5c418485ea"}, {"problem": 40, "code": "(fn\n  [separator collection]\n  (let [interposer (fn interposer\n                     [separator collection2]\n                     (if (next collection2)\n                       (cons (first collection2) (cons separator (interposer separator (rest collection2))))\n                       (cons (first collection2) (empty collection))\n                       )\n                     )]\n    (interposer separator collection)\n  )\n)", "user": "525b4e8de4b0cb4875a45d0f"}, {"problem": 40, "code": "(fn [ch coll]\n   (loop [icol coll acc '()]\n     (if (empty? icol) \n       (butlast (reverse acc)) \n       (recur (rest icol) (conj acc (first icol) ch)))))", "user": "53c06438e4b0c98a41f5ccb0"}, {"problem": 40, "code": "(fn [sep ls] (flatten (reduce #(vector %1 sep %2) ls)))", "user": "53fcdd1ae4b0de5c418485dd"}, {"problem": 40, "code": "(fn [v x]\n  (pop (reduce #(conj %1 %2 v) [] x)))", "user": "53f77b6ae4b0de5c4184855f"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5400fc30e4b0de5c4184861b"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "524b827ce4b09eba1c0223d7"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "523630eee4b05f3be1c7c8e8"}, {"problem": 40, "code": "(fn intrsp [sep xs] (if (>= (count xs) 2) (cons (first xs) (cons sep (intrsp sep (rest xs)))) xs))", "user": "540470dae4b0addc1aec6658"}, {"problem": 40, "code": "(fn myinterpose\n  [toadd myseq]\n  (rest (mapcat #(cons toadd [%]) myseq))\n  )", "user": "53fe459ae4b0de5c418485f4"}, {"problem": 40, "code": "(fn [delimiter s] (reverse (rest (reduce #(conj %1 %2 delimiter) '() s))))", "user": "54008b88e4b0de5c4184860d"}, {"problem": 40, "code": "#(butlast(interleave %2 (repeat %)))", "user": "538d70abe4b0b51d73faae6e"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "53fc713be4b0de5c418485a0"}, {"problem": 40, "code": "(fn [v s]\n   (butlast\n     (flatten (for [i s]\n     [i v]))))", "user": "53d10553e4b00fb29b22130f"}, {"problem": 40, "code": "#(apply concat [(first %2)] (for [i (next %2)] [% i]))", "user": "53fb4843e4b0de5c4184857d"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat (count %2) %1)))", "user": "53f3a4ace4b0742d9025b0f7"}, {"problem": 40, "code": "(fn [delim coll]\n  (let [firstresult [(first coll)]]\n    (loop [[head & tail] (rest coll)\n           result firstresult]\n       (if (nil? head)\n         result\n         (recur tail (concat result [delim head]))\n       ))\n  )\n )", "user": "54021f13e4b0df28a13c62cc"}, {"problem": 40, "code": "(fn [i c]\n                (mapcat (fn [ci] \n                          (if (= ci (- (count c) 1)) [(nth c ci)] [(nth c ci) i])\n                          ) (range (count c))))", "user": "5251b11be4b0541d1855b87b"}, {"problem": 40, "code": "#(next (interleave (repeat %1) %2))", "user": "4ff4bed0e4b0678c553fc35f"}, {"problem": 40, "code": "(fn\n  [x [f & coll]]\n  (cons f (mapcat list (repeat x) coll)))", "user": "5401aefbe4b0df28a13c62c7"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %1)))", "user": "54084784e4b0addc1aec66c9"}, {"problem": 40, "code": "#(rest (interleave (map (constantly %1) %2) %2))", "user": "540479e7e4b0addc1aec665a"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "53e8c684e4b036ad0777e48b"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %)))", "user": "53dcb9b2e4b0d874e779ae23"}, {"problem": 40, "code": "#(rest (mapcat (partial list %) %2))", "user": "540b2dcbe4b0addc1aec66f4"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "53de7484e4b0d874e779ae35"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "54023bbfe4b0df28a13c62cd"}, {"problem": 40, "code": "(fn [x se]\n  (drop-last (reduce #(conj (conj %1 %2) x) [] se)))", "user": "52cda980e4b07d0d72b2737b"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "53fcb8f7e4b0de5c418485d4"}, {"problem": 40, "code": "#(let [ans (drop-last (interleave %2 (repeat  %1)))]\n            (if (vector? %2 )\n              (vec ans) ans))", "user": "524025bce4b0ad64fa01030f"}, {"problem": 40, "code": "(fn [val xs] (reverse (drop 1 (reverse (mapcat #(conj (list val) %) xs)))))", "user": "540d7dd1e4b0addc1aec6713"}, {"problem": 40, "code": "(fn [x coll] \n   (butlast (mapcat list coll (repeat (count coll) x))))", "user": "54094824e4b0addc1aec66da"}, {"problem": 40, "code": "#(drop-last (mapcat list %2 (repeat %)))", "user": "540e17c3e4b0addc1aec6719"}, {"problem": 40, "code": "#(drop-last (apply concat (apply map vector [%2 (repeat (count %2) %1)])))", "user": "53ed03f0e4b0d648e757f4bb"}, {"problem": 40, "code": "(fn [separator l]\n\t(loop [remaining-items l acc []]\n      (cond\n       (empty? remaining-items) acc\n       (= 1 (count remaining-items)) (recur [] (conj acc (first remaining-items)))\n       :else (recur (rest remaining-items) (conj acc (first remaining-items) separator))))\n)", "user": "5409f8eae4b0addc1aec66e6"}, {"problem": 40, "code": "(fn [x coll]\n  (drop-last (mapcat vector coll (repeat x))))", "user": "540f2c48e4b0addc1aec6727"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "53b9bb15e4b047364c0444ed"}, {"problem": 40, "code": "(fn [x s] (butlast (mapcat #(list % x) s)))", "user": "5409a12fe4b0addc1aec66df"}, {"problem": 40, "code": "#(drop-last (interleave %2 (take (count %2) (repeat %1))))", "user": "53d6b266e4b0e771c3025459"}, {"problem": 40, "code": "(fn [n coll]\n  (butlast\n   (mapcat (fn [e] (list e n)) coll)))", "user": "540d5085e4b0addc1aec670e"}, {"problem": 40, "code": ";;(fn [v s] (rest (mapcat #(list v %) s)))\n\n#(drop 1 (interleave (repeat %) %2))", "user": "540e0637e4b0addc1aec6717"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "540d0087e4b0addc1aec670b"}, {"problem": 40, "code": "(fn [sep coll] (flatten (reduce #(into [] [% sep %2]) coll)))", "user": "53f2370ee4b0742d9025b0e7"}, {"problem": 40, "code": "#(loop [sep %1 xs %2 result []]\n   (if (empty? xs)\n     (drop 1 result)\n     (recur sep (rest xs) (conj result sep (first xs)))))", "user": "4fad9da0e4b081705acca23c"}, {"problem": 40, "code": "(fn my-interpose\n  [value coll]\n  (drop-last\n    (mapcat #(conj [] % value) coll)))", "user": "54091b82e4b0addc1aec66d5"}, {"problem": 40, "code": "(fn doit [x y]\n  (rest (interleave (repeat x) y))\n  )", "user": "526698c9e4b03e8d9a4a7144"}, {"problem": 40, "code": "(fn [sep sq]\n  (drop-last \n   (interleave sq (repeat sep))))", "user": "540c54a7e4b0addc1aec6700"}, {"problem": 40, "code": "(fn [v coll]\n  (drop-last (mapcat #(list % v) coll)))", "user": "541475afe4b01498b1a719eb"}, {"problem": 40, "code": "#(butlast (mapcat (fn [x] [x %]) %2))", "user": "54157dace4b01498b1a719f4"}, {"problem": 40, "code": "#(drop-last (flatten (for [x %2 y (cons % ())] [x y])))", "user": "5405ae2be4b0addc1aec6671"}, {"problem": 40, "code": "(fn foo [sep xs]\n  (drop-last (reduce \n    (fn [acc v]\n      (conj acc v sep)) \n   [] xs)))", "user": "54133900e4b01498b1a719de"}, {"problem": 40, "code": "#(drop 1 (interleave (iterate identity %1) %2))", "user": "53e76728e4b036ad0777e47c"}, {"problem": 40, "code": "(fn [a b] (drop 1 (mapcat #(list %1 %2) (cycle (list a)) b)))", "user": "5042bb9ae4b034ff00315d16"}, {"problem": 40, "code": "(fn [inter-char coll] (butlast (apply concat (for [x coll] [x inter-char]))))", "user": "53f6bfd9e4b0db01ade6f9e4"}, {"problem": 40, "code": "#(rest (mapcat (fn [x] [%1 x]) %2))", "user": "541096bde4b01498b1a719b2"}, {"problem": 40, "code": "#(next (interleave (repeat %1) %2))", "user": "54139cd4e4b01498b1a719e3"}, {"problem": 40, "code": "(fn my-interpose [divider, xs]\n  (if (next xs)\n    (concat [(first xs) divider]\n            (my-interpose divider (next xs)))\n    xs))", "user": "540ff039e4b01498b1a7199b"}, {"problem": 40, "code": "(fn [x xs] (drop-last (mapcat vector xs (repeat x))))", "user": "5417385fe4b01498b1a71a08"}, {"problem": 40, "code": "(fn [i s]\n  (loop [s s\n         acc []]\n    (if (empty? (rest s))\n      (conj acc (first s))\n      (recur (rest s) (conj acc (first s) i))\n    )\n  )\n)", "user": "540f09b9e4b0addc1aec6725"}, {"problem": 40, "code": "(fn my-interpose [sep coll]\n  (if (empty? coll)\n    nil\n    (if (> (count coll) 1)\n      (cons (first coll) (cons sep (my-interpose sep (rest coll))))\n      (cons (first coll) (my-interpose sep (rest coll))))))", "user": "54125eeee4b01498b1a719d3"}, {"problem": 40, "code": "(fn [sep coll]\n  (rest (mapcat (partial list sep) coll)))", "user": "5412d5d2e4b01498b1a719d9"}, {"problem": 40, "code": "(fn [sep coll] \n  (drop-last (mapcat #(conj [] %1 sep) coll)))", "user": "54186e68e4b01498b1a71a1a"}, {"problem": 40, "code": "#(drop 1 (reduce (fn [t s] (conj t % s)) [] %2))", "user": "53e0001be4b0d874e779ae48"}, {"problem": 40, "code": "#(drop 1 ( mapcat (partial list %) %2))", "user": "54187e84e4b01498b1a71a1b"}, {"problem": 40, "code": "#(reduce (fn[x y] (if(empty? x) (conj x y) (conj x %1 y))) [] %2)", "user": "541619e8e4b01498b1a719f9"}, {"problem": 40, "code": "(fn [sep vect] (concat  (mapcat list vect (repeat (- (count vect) 1) sep)) (list (last vect))))", "user": "541074f1e4b01498b1a719ac"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "541b37d2e4b01498b1a71a64"}, {"problem": 40, "code": "(fn\n  [p coll]\n  (reverse\n    (rest\n      (reverse\n        (flatten\n          (map\n            (fn [v] (conj [v] p))\n            coll))))))", "user": "51c1b644e4b0d204dbe2ca12"}, {"problem": 40, "code": "#(butlast (interleave %2 (take (count %2) (repeat %1))))", "user": "541404c2e4b01498b1a719e7"}, {"problem": 40, "code": "(fn intrps [i col] (if (= 1 (count col)) col (flatten (conj (vector (first col)) i (intrps i (next col))))))", "user": "541c516ae4b01498b1a71a73"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "54149f2fe4b01498b1a719ec"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5282f54be4b0239c8a67ada0"}, {"problem": 40, "code": "(fn [val coll] (drop-last (mapcat #(list % val) coll)))", "user": "541ae7dbe4b01498b1a71a61"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop 1 (interleave (repeat sep) coll)))", "user": "5412646de4b01498b1a719d4"}, {"problem": 40, "code": "#(rest (mapcat (partial list %) %2))", "user": "52541fe6e4b0541d1855b964"}, {"problem": 40, "code": "(fn [x coll] (rest(interleave (repeat x) coll)))", "user": "52edc72de4b05e3f0be25ebb"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last (interleave coll (repeat sep))))", "user": "541f5b37e4b01498b1a71a97"}, {"problem": 40, "code": "(fn my-interpose\n  [elem coll]\n  (loop [acc [], [x & xs] coll]\n    (if (seq xs)\n      (recur (conj acc x elem) xs)\n      (conj acc x))))", "user": "541f6bc0e4b01498b1a71a98"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "511036c5e4b04c71fce993ee"}, {"problem": 40, "code": "(fn [a s]\n    (reverse (rest (reverse (interleave s (take (count s) (repeat a)))))))", "user": "541c1e46e4b01498b1a71a70"}, {"problem": 40, "code": "(fn minterpose\n  [sep s]\n  (let [len (count s)]\n    (drop-last (interleave s (repeat len sep)))))", "user": "540efe2ee4b0addc1aec6724"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "user": "53c67bd3e4b00fb29b22129a"}, {"problem": 40, "code": "#(->> %2\n      (interleave (repeat %1))\n      (rest))", "user": "5412ef7ee4b01498b1a719da"}, {"problem": 40, "code": "(fn [sep coll]\n  (rest (interleave (repeat sep) coll)))", "user": "541ad1c1e4b01498b1a71a5c"}, {"problem": 40, "code": "(fn [sep data] (butlast (interleave data (repeat (count data) sep))))", "user": "541168dee4b01498b1a719c3"}, {"problem": 40, "code": "#(butlast (interleave %2 (-> % list cycle)))", "user": "516ee939e4b06aac486e5b34"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "54213a8fe4b01498b1a71aaf"}, {"problem": 40, "code": "(fn [repeater xs] \n    (vec\n     (drop-last \n     (flatten (map \n               #(vector % %2) xs (repeat repeater))))))", "user": "5415d115e4b01498b1a719f7"}, {"problem": 40, "code": "(fn [x coll]\n  (let [xcoll (repeat (count coll) x)\n    \tlcoll (mapcat vector coll xcoll)\n        n (- (count lcoll) 1)]\n    (take n lcoll)))", "user": "4eb3fcba535d7eef30807359"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "54246fcce4b01498b1a71aed"}, {"problem": 40, "code": "#(rest (mapcat list (repeat %1) %2))\n;; #(drop 1 (interleave (repeat %1) %2))", "user": "5370d152e4b0fc7073fd6e9d"}, {"problem": 40, "code": "#(reduce (fn [accum x] \n           (if (empty? accum) \n             (conj accum x)\n             (conj accum %1 x)))\n         [] %2)", "user": "52fbc44be4b047fd55837010"}, {"problem": 40, "code": "(fn [i l]\n  (let [inner-f (fn inner-f [acc r] \n                 (if (nil? (second r))\n                   (conj acc (first r))\n                   (recur (conj acc (first r) i) (rest r))\n                   )\n                 )\n        ]\n    (reverse (inner-f () l))\n    )\n  )", "user": "53e1040be4b0d874e779ae4e"}, {"problem": 40, "code": "#(->> (repeat %1) (interleave %2) butlast)", "user": "54227fc6e4b01498b1a71ac0"}, {"problem": 40, "code": "(fn [i coll] (butlast (interleave coll (repeat (count coll) i))))", "user": "4fc9a977e4b0ee37620e1847"}, {"problem": 40, "code": "#(loop [input %2\n         res []]\n    (if-not (empty? input)\n      (recur (drop 1 input) (conj res (take 1 input) %1))\n      (flatten (drop-last res))))", "user": "51cd75d6e4b02254fc79488c"}, {"problem": 40, "code": "(fn [val s]\n  (-> val\n      (repeat)\n      (interleave s)\n      (rest)))", "user": "5424c523e4b01498b1a71b03"}, {"problem": 40, "code": "(fn ntrps\n  ([v s n] (if (empty? s) n (ntrps v (rest s) (conj n v (first s)))) )\n  ([v s] (ntrps v (rest s) [(first s)]) )\n)", "user": "54257124e4b01498b1a71b09"}, {"problem": 40, "code": "(fn il\n  [out item si]\n  (if (last si)\n    (recur (conj out (first si) item ) item (rest si))\n    \n    (reverse (rest out))\n  )) '()", "user": "54258a7fe4b01498b1a71b0c"}, {"problem": 40, "code": "(fn [a x] (rest (mapcat #(list a %1) x)))", "user": "5425d454e4b01498b1a71b13"}, {"problem": 40, "code": "(fn [v coll]\n  (loop [c coll\n         pos 1\n         acc []]\n    (if (seq c)\n      (if (second c)\n        (recur (rest c) (inc pos) (conj acc (first c) v))\n        (recur (rest c) (inc pos) (conj acc (first c))))\n      acc)))", "user": "51ca5378e4b08b1cbd0d9480"}, {"problem": 40, "code": "(fn [sep coll]\n   (reduce \n     (fn [acc x] (into acc [sep x]))\n     [(first coll)]\n     (rest coll)))", "user": "5429986ce4b01498b1a71b3b"}, {"problem": 40, "code": "(fn [v s]\n  (->> s\n       (map #(list % v))\n       (apply concat)\n       butlast))", "user": "542c22bde4b0dad94371f29e"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "54194782e4b01498b1a71a29"}, {"problem": 40, "code": "#(drop-last (flatten (map (fn [x] (list x %)) %2)))", "user": "542f574be4b0dad94371f2d0"}, {"problem": 40, "code": "(fn [s coll] ((comp reverse rest reverse) (mapcat #(vector % s) coll)))", "user": "540e8d13e4b0addc1aec671e"}, {"problem": 40, "code": "(fn [i c] (rest (mapcat #(list i %) c)))", "user": "53f78944e4b0de5c41848561"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "542edb4ae4b0dad94371f2c8"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "53a01fb1e4b0ca733b9744a6"}, {"problem": 40, "code": "(fn [v l] (butlast (mapcat #(list % v) l)))", "user": "54302691e4b0dad94371f2d7"}, {"problem": 40, "code": "(fn [inter seq]\r\n   (loop [s seq\r\n          ret []]\r\n     (if (= 1 (count s))\r\n       (into ret s)\r\n       (recur (next s) (into ret [(first s) inter])))))", "user": "542b764ae4b0dad94371f28d"}, {"problem": 40, "code": "(fn [x y] (butlast (flatten (map (fn [z] [z x]) y))))", "user": "542c2de0e4b0dad94371f29f"}, {"problem": 40, "code": "(fn [v seq]\n  (rest (interleave (iterate identity v) seq)))", "user": "543168f5e4b0dad94371f2e6"}, {"problem": 40, "code": "(fn [d c] (drop-last (mapcat list c (repeat d))))", "user": "53e70b3fe4b036ad0777e476"}, {"problem": 40, "code": "(fn [sep seq]\n   (drop-last (mapcat vector seq (repeat sep))))", "user": "540c6a8ae4b0addc1aec6702"}, {"problem": 40, "code": "(fn inps [x ys]\n  (loop [a x\n         b ys\n         output [(first b)]]\n    (if (> (count b) 1)\n      (recur a (rest b) (conj output a (second b)))\n      output\n      )\n    )\n  )", "user": "53b685e0e4b047364c0444c7"}, {"problem": 40, "code": "(fn [sep, items]\n  (loop [remainder (rest items)\n         output [(first items)]]\n    (if (= remainder [])\n      output\n      (recur (rest remainder) (conj output sep (first remainder))))))", "user": "54336443e4b0b6b47310fcde"}, {"problem": 40, "code": "(fn [sep coll]\n  (loop [coll coll acc []]\n    (if (next coll)\n      (recur\n        (rest coll)\n        (conj acc (first coll) sep))\n      (conj acc (first coll)))))", "user": "5433eecae4b0b6b47310fce6"}, {"problem": 40, "code": "(fn [sep list]\n (drop-last (flatten (map #(vec %&) list (repeat sep)))))", "user": "542db41be4b0dad94371f2bb"}, {"problem": 40, "code": "(fn _\n    [x l]\n    (if-let [e (first l)]\n      (if-let [xs (next l)]\n        (cons e (cons x (_ x xs)))\n        [e])))", "user": "5433a07be4b0b6b47310fce0"}, {"problem": 40, "code": "#(butlast (mapcat vector %2 (repeat %1)))", "user": "532a033be4b09d4e7a9b551f"}, {"problem": 40, "code": "(fn [a b] (butlast (reduce concat [] (map #(list % a) b))))", "user": "53c1b787e4b00fb29b221266"}, {"problem": 40, "code": "(fn [a b]\n   (butlast (mapcat #(list % a) b))\n   )", "user": "53a511aae4b0b62ce3005735"}, {"problem": 40, "code": "(fn [a c] (butlast (mapcat #(list % a) c)))", "user": "54349368e4b0b6b47310fcf1"}, {"problem": 40, "code": "#(butlast (interleave %2 (concat (take (count %2) (repeat %1)))))", "user": "53765e1ae4b06839e8705e23"}, {"problem": 40, "code": "(fn [i xs]\n  (drop 1 (reduce #(conj %1 i %2) [] xs)))", "user": "540961e9e4b0addc1aec66db"}, {"problem": 40, "code": "#(rest (reduce (fn [l n] (conj (conj l %) n)) [] %2))", "user": "53da3fcde4b0e771c3025497"}, {"problem": 40, "code": "(fn my-interpose [x [head & tail]]\n  (if tail\n    (cons head (cons x (my-interpose x tail)))\n    (list head)))", "user": "542cb77ae4b0dad94371f2aa"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat (count %2) %1)))", "user": "5423dc6ae4b01498b1a71ad5"}, {"problem": 40, "code": "(fn [i l] (rest (interleave (repeat i) l)))", "user": "53e745a1e4b036ad0777e479"}, {"problem": 40, "code": "(fn [x y] (rest (mapcat #(conj (list %) x) y)))", "user": "54344721e4b0b6b47310fcea"}, {"problem": 40, "code": "(fn [x y] ((comp vec drop-last mapcat) #(list % x) y))", "user": "52ee0de4e4b05e3f0be25ec1"}, {"problem": 40, "code": "(fn F [v sq]\n  (flatten (reduce #(list %1 v %2) sq)))", "user": "4f856adfe4b033992c121c44"}, {"problem": 40, "code": "(fn [v s]\n  (butlast (mapcat (fn [x] (list x v)) s)))", "user": "541709b0e4b01498b1a71a06"}, {"problem": 40, "code": "#(rest (mapcat (fn [x] (list %1 x)) %2))", "user": "54296802e4b01498b1a71b38"}, {"problem": 40, "code": "#(butlast (flatten (map list %2 (repeat %1))))", "user": "51eda45ce4b0bb507043159b"}, {"problem": 40, "code": "(fn myInterpose [x coll] (drop-last (mapcat #(vector % x) coll )))", "user": "542c1f73e4b0dad94371f29d"}, {"problem": 40, "code": "#(rest (mapcat list (repeat %1) %2))", "user": "54397533e4b032a45b86931d"}, {"problem": 40, "code": "#(butlast(interleave %2 (repeat %)))\n;#(cons (first %2) (mapcat list (repeat %) (rest %2)))\n;#( rest (mapcat list (repeat %) %2) )\n;#(rest (interleave (repeat %) %2))", "user": "54380631e4b032a45b86930f"}, {"problem": 40, "code": "(fn [val coll]\n   (reduce (fn [m x] (into m [val x])) [(first coll)] (rest coll)))", "user": "54393c3fe4b032a45b86931a"}, {"problem": 40, "code": "(fn my-interpose\n  ([v seq]\n   (my-interpose v seq '()))\n  ([v seq new-seq]\n   (if (= 1 (count seq))\n     (concat new-seq [(first seq)])\n     (my-interpose v (rest seq) (concat new-seq (list (first seq) v))))))", "user": "540271aee4b0df28a13c62d0"}, {"problem": 40, "code": "(fn [c s] (rest (mapcat #(conj [] c %) s)))", "user": "54324be1e4b0dad94371f2ed"}, {"problem": 40, "code": "( fn [x y] (drop-last (reduce #(conj(conj %1 %2) x) [] y)))", "user": "542baf7ce4b0dad94371f291"}, {"problem": 40, "code": "#(rest (interleave (vec (repeat (count %2) %)) %2))", "user": "542c44f8e4b0dad94371f2a1"}, {"problem": 40, "code": "(fn [v l] (drop-last (mapcat #(list % v) l)))", "user": "543a68d3e4b032a45b869326"}, {"problem": 40, "code": "(fn interpo\n  [v [x & xs]]\n  (if xs (concat (list x v) (interpo v xs)) (list x)))", "user": "542d2385e4b0dad94371f2b2"}, {"problem": 40, "code": "(fn [deli l] \n  (drop-last (mapcat (fn [x] [x deli]) l)))", "user": "54377355e4b032a45b869305"}, {"problem": 40, "code": "(fn [n coll] (reduce #(conj %1 n %2) (vector (first coll)) (rest coll)))", "user": "543c39e0e4b032a45b86933d"}, {"problem": 40, "code": "#(loop \n  [av %1\n   s %2\n   rs []]\n   (if (empty? (rest s))\n     (conj rs (first s))\n     (recur \n       av\n       (rest s)\n       (conj rs (first s) av))))", "user": "5432df22e4b0dad94371f2f5"}, {"problem": 40, "code": "(fn [c s]\n    (reduce #(conj (conj %1 c) %2) [(first s)] (rest s)))", "user": "52b2f9cae4b0c58976d9acfb"}, {"problem": 40, "code": "(fn interpose-seq [separator collection]\n  (rest (apply concat (map (fn [item] [separator item]) collection))))", "user": "53f891eee4b0de5c4184856d"}, {"problem": 40, "code": "(fn [e l]\n  (loop [result [] \n         s l]\n    (if (= (count s) 1)\n      (conj result (first s))\n      (recur (conj result (first s) e) (next s)))))", "user": "539043e7e4b0b51d73faae97"}, {"problem": 40, "code": "(fn [k coll]\n  (let [c (count coll)\n        coll2 (repeat c k)]\n    (reverse (rest (reverse (interleave coll coll2))))))", "user": "4e526cc4535d302ef430da74"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %1)))", "user": "543f854fe4b032a45b86935b"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "543d5c61e4b032a45b86934d"}, {"problem": 40, "code": "(fn [x lst] (reduce #(conj %1 x %2) [(first lst)] (rest lst)))", "user": "543d89dfe4b032a45b869350"}, {"problem": 40, "code": "(fn myinterpose\n  [inter [head & tail]]\n  (if (empty? tail)\n    (conj tail head)\n    (conj (conj (myinterpose inter tail) inter) head)\n  )\n  )", "user": "54410a71e4b032a45b869367"}, {"problem": 40, "code": "#(into [] (drop-last (flatten (for [b %2] [b %1]))))", "user": "52e683c0e4b09f7907dd1477"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "52f8b86de4b047fd55836fdb"}, {"problem": 40, "code": "(fn [a b] (rest (flatten (map vector (repeat a) b))))", "user": "54431b6ee4b032a45b869385"}, {"problem": 40, "code": "; (fn [x ys]\n;   (reduce #(flatten (list %1  x %2)) ys))\n\n#(butlast (interleave %2 (repeat %1)))", "user": "541e2ff8e4b01498b1a71a8a"}, {"problem": 40, "code": "#(->> %1 repeat (interleave %2) drop-last)", "user": "54055aa9e4b0addc1aec6665"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last\n   (mapcat vector coll (repeat sep))))", "user": "5442dddae4b032a45b869383"}, {"problem": 40, "code": "(fn [y x]\n  (reduce #(conj %1 y %2) [(first x)] (rest x) )\n  \n  )", "user": "5372c830e4b06d7f452d9dff"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "533a399de4b0e30313ee6cb9"}, {"problem": 40, "code": "(fn [sep coll] (drop-last 1 (mapcat (fn [item] [item sep]) coll)))", "user": "50666699e4b03d366d7cb2b0"}, {"problem": 40, "code": "(fn [x xs]\n  (butlast (mapcat #(vector % x) xs)))", "user": "54448e84e4b032a45b869393"}, {"problem": 40, "code": "(fn [separator seq]\n   (let [head (first seq)\n         rest (rest seq)]\n    (apply vector           \n           head\n           (mapcat\n            #(identity [%1 %2]) \n            (repeat separator)   \n            rest\n            ))))", "user": "512655b7e4b05d10e3e39603"}, {"problem": 40, "code": "(fn mh-pose [separator src]\n  (butlast\n    (apply concat \n      (for [a src]\n        (list a separator)\n      )  \n    )   \n  ) \n)", "user": "54468ebfe4b032a45b8693b1"}, {"problem": 40, "code": "(fn hi [sep col] (drop 1 (interleave (repeat sep) col)))", "user": "54458995e4b032a45b86939e"}, {"problem": 40, "code": "(fn [s, l]\n  (butlast (reduce #(conj %1 %2 s) [] l)))", "user": "5392bfdee4b0b51d73faaeb2"}, {"problem": 40, "code": "(fn [i c] (butlast (mapcat (fn [v] [v i]) c)))", "user": "530a6cbae4b02e82168697be"}, {"problem": 40, "code": "(fn [x ys]\n  (rest \n   (reduce concat \n           (map #(conj [x] %) \n                ys))))", "user": "5447e08ce4b032a45b8693c3"}, {"problem": 40, "code": "#(rest (mapcat (partial vector %1) %2))", "user": "5267c74be4b03e8d9a4a7183"}, {"problem": 40, "code": "(fn my-interpose [x s]\n  (lazy-seq\n   (let [[f & r] s]\n    (if (seq r)\n      (cons f\n            (cons x\n                  (my-interpose x r)))\n      s))))", "user": "5446c89ce4b032a45b8693b5"}, {"problem": 40, "code": "(fn [x y] (flatten (reduce (fn [a b] (list a x b)) y)))", "user": "54461393e4b032a45b8693a5"}, {"problem": 40, "code": "(fn foo [x y]\n\t(if (< (count y) 2)\n      y\n      (conj (foo x (rest y)) x (first y) )\n    )\n)", "user": "54078851e4b0addc1aec66bd"}, {"problem": 40, "code": "(fn [a coll] (drop-last (reduce #(concat %1 [%2 a]) [] coll)))", "user": "52a45a7be4b0c58976d9abd8"}, {"problem": 40, "code": "#(apply concat [(first %2)] (map (fn [x] [%1 x]) (rest %2)))", "user": "5443a894e4b032a45b869388"}, {"problem": 40, "code": "(fn [e c]\n  (butlast (reduce #(conj %1 %2 e) [] c)))", "user": "54487527e4b032a45b8693cc"}, {"problem": 40, "code": "#(rest (mapcat vector (repeat %1) %2))", "user": "544ac9b5e4b0e39780006959"}, {"problem": 40, "code": "(fn my-interpose [sep coll]\n  (if (= 1 (count coll)) coll\n    (conj (my-interpose sep (rest coll)) sep (first coll))))", "user": "544b9df2e4b0e39780006968"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "542789efe4b01498b1a71b25"}, {"problem": 40, "code": "(fn y [x seq] (drop 1 (apply concat (map vector (repeat x) seq))))", "user": "544a049de4b0e39780006953"}, {"problem": 40, "code": "(fn [i s] (take (- (* (count s) 2) 1) (interleave s (repeat i))))", "user": "5446ebc2e4b032a45b8693b8"}, {"problem": 40, "code": "(fn [v s] (butlast (interleave s (repeat v))))", "user": "5122925ae4b068a9582e656d"}, {"problem": 40, "code": "(fn [x s] (rest (reduce #(conj % x %2) [] s)))", "user": "5441f5e8e4b032a45b869375"}, {"problem": 40, "code": "(fn my-interpose\n  [separator sequence]\n  (drop-last (flatten (map #(list %1 separator) sequence))))", "user": "52561295e4b0541d1855ba03"}, {"problem": 40, "code": "(fn [inter sequencial]\n           (loop [x 0\n                  res []]\n             (if (>= x (count sequencial))\n               (rest res)\n               (recur (inc x) (conj (conj res inter) (nth sequencial x))))))", "user": "544e8369e4b0e39780006987"}, {"problem": 40, "code": "(fn separate [sep coll] (drop 1 (interleave (repeat sep) coll)))", "user": "5437eca1e4b032a45b86930d"}, {"problem": 40, "code": "(fn ff [x sek] \n  (if (= (count sek) 1) (list (first sek)) (cons (first sek) (cons x (ff x (rest sek)))))\n  \n  )", "user": "544e1794e4b0e39780006980"}, {"problem": 40, "code": "#(loop [xs %2\n          acc []]\n     (if (= 1 (count xs))\n       (conj acc (first xs))\n       (recur (rest xs) (conj acc (first xs) %1))))", "user": "544257b4e4b032a45b869379"}, {"problem": 40, "code": "(fn\n  [el coll]\n  (drop-last (interleave coll (repeat el))))", "user": "542d5fa9e4b0dad94371f2b5"}, {"problem": 40, "code": "(fn [sep coll]\n  (loop [res []\n         coll coll]\n    (let [coll-f (first coll)\n          coll-r (rest coll)]\n      (if-not (empty? coll-r)\n      \t(recur (conj res coll-f sep)\n               coll-r)\n        (conj res coll-f)))))", "user": "541df619e4b01498b1a71a87"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "544b699ce4b0e39780006964"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "52c45ac8e4b0c2d177d620d9"}, {"problem": 40, "code": "(fn inter [v s]\n  (pop (vec (reduce concat\n        (for [x s]\n            [x v])))))", "user": "54468fd3e4b032a45b8693b2"}, {"problem": 40, "code": "(fn inpose [a-value a-seq]\n               (if (empty? a-seq) nil\n                 (if (> (count a-seq) 1)\n                   (concat [(first a-seq) a-value] (inpose a-value (rest a-seq)))\n                   (concat [(first a-seq)] (inpose a-value (rest a-seq))))))", "user": "545188ebe4b0e397800069b2"}, {"problem": 40, "code": "(fn [i s] (butlast (mapcat #(into [] [% i]) s)))", "user": "5233564ae4b0f0b72fabf403"}, {"problem": 40, "code": "#(rest (mapcat (partial vector %) %2))", "user": "544fbabce4b0e39780006999"}, {"problem": 40, "code": "(fn [n s] (butlast (mapcat vector s (repeat (count s) n))))", "user": "54524afbe4b0e397800069bc"}, {"problem": 40, "code": "(fn [a s] (rest (mapcat #(list a %) s)))", "user": "5457e5f1e4b01be26fd74613"}, {"problem": 40, "code": "(fn\n   [x coll]\n   (concat [(first coll)]\n     (mapcat (fn [item] [x item] ) (next coll))\n    )\n  )", "user": "5351fca5e4b084c2834f4aec"}, {"problem": 40, "code": "(fn my-interpose [x coll]\n  (rest (interleave (repeat x) coll)))", "user": "53b7aa6ce4b047364c0444d1"}, {"problem": 40, "code": "(fn [sep coll] (drop-last (reduce (fn [acc val] (conj acc val sep)) [] coll)))", "user": "5450c81fe4b0e397800069a4"}, {"problem": 40, "code": "(fn [sep xs] (-> (mapcat (fn [x] [x sep]) xs) (drop-last)))", "user": "52d84ea7e4b09f7907dd1390"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "user": "540997ede4b0addc1aec66dd"}, {"problem": 40, "code": "(fn [sep source]\n\t(butlast (reduce (fn [coll item] (conj coll item sep)) [] source)))", "user": "544cf5d7e4b0e39780006977"}, {"problem": 40, "code": "(fn [n coll] (drop-last (interleave coll (repeat n))))", "user": "54512df2e4b0e397800069ae"}, {"problem": 40, "code": "#(butlast (mapcat vector %2 (repeat %)))", "user": "5414b7c4e4b01498b1a719ed"}, {"problem": 40, "code": "(fn [foo col]\n  (apply (partial concat [(first col)])\n         (map #(vector foo %1) (rest col))))", "user": "54580586e4b01be26fd74616"}, {"problem": 40, "code": "(fn [separator coll]\n  (drop-last (mapcat vector coll (repeat separator))))", "user": "50bdd4fee4b0594b91591c84"}, {"problem": 40, "code": "#(rest (apply concat (map (partial vector %) %2)))", "user": "52e16face4b09f7907dd1421"}, {"problem": 40, "code": "(fn inter [delim s]\n  (cond \n    (empty? s)\n      nil\n    (empty? (rest s))\n      s\n    :else\n      (concat (cons (first s) (list delim)) (inter delim (rest s)))))", "user": "545801f6e4b01be26fd74615"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "544a8fbbe4b0e39780006957"}, {"problem": 40, "code": "(fn [a lst] (cons (first lst) (mapcat (fn [n] (list a n)) (rest lst))))", "user": "545e7ab0e4b01be26fd7467c"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5454b84ce4b0e397800069d9"}, {"problem": 40, "code": "(fn new-interpose\n   [x s]\n   (vec (cons (first s) (mapcat #(vec [x %]) (rest s)))))", "user": "545e9cf1e4b01be26fd7467f"}, {"problem": 40, "code": "(fn [sep coll]\n  (rest (mapcat (partial list sep) coll)))", "user": "5454bd9be4b0e397800069db"}, {"problem": 40, "code": "(fn [x coll] (butlast (mapcat #(list % x) coll)))", "user": "53b14289e4b047364c04448b"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "5461368ce4b01be26fd7469b"}, {"problem": 40, "code": "#(rest (mapcat (fn [e] (list %1 e)) %2))", "user": "545eb56be4b01be26fd74682"}, {"problem": 40, "code": "#(cons (first %2) (interleave (repeat %) (rest %2)))", "user": "5417bc50e4b01498b1a71a0f"}, {"problem": 40, "code": "(fn [sep xs]\n  (cons\n   (first xs)\n   (reduce\n     (fn [acc x]\n       (concat acc [sep x]))\n     []\n     (rest xs))))", "user": "526e1bd0e4b03e8d9a4a730b"}, {"problem": 40, "code": "#(pop (vec (interleave %2 (repeat %1))))", "user": "534b1930e4b084c2834f4a76"}, {"problem": 40, "code": "#(rest (mapcat vector (repeat %1) %2))", "user": "4f1ef6a0535d64f60314649b"}, {"problem": 40, "code": "(fn [sep coll] (rest (mapcat list (repeat (count coll) sep) coll)))", "user": "5458a729e4b01be26fd74622"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last\n   (mapcat #(conj [] % sep) coll)))", "user": "54630e6be4b01be26fd746bc"}, {"problem": 40, "code": "(fn f [x [ y & z ]] (if z (concat (list y x) (f x z)) (list y)))", "user": "5463fbbde4b01be26fd746ca"}, {"problem": 40, "code": "(fn [d coll](\n           butlast (reduce (fn [c e] (conj c e d)) [] coll)\n           ))", "user": "546280d8e4b01be26fd746b0"}, {"problem": 40, "code": "(fn [inter sequence]\n  (->> (repeat inter)\n       (map vector sequence)\n       (apply concat)\n       (butlast)))", "user": "5461c402e4b01be26fd746a6"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "545537c1e4b0e397800069dd"}, {"problem": 40, "code": "#(rest (mapcat identity (map vector (take (count %2) (repeat %1)) %2)))", "user": "5465712ee4b01be26fd746dc"}, {"problem": 40, "code": "(fn [x yss]\n  (loop [ys yss\n         acc []]\n    (if (= 1 (count ys))\n      (conj acc (first ys))\n      (recur (rest ys)\n             (conj acc (first ys) x)))))", "user": "50478418e4b0371827a27bc3"}, {"problem": 40, "code": "(fn -interpose [x xs]\n  ((fn mypose [acc item lst]\n    (cond\n      (= 1 (count lst)) \n        (concat acc lst [])\n      (not= 1 (count lst)) \n        (concat acc \n               [(first lst) item]  \n               (mypose acc item (rest lst)))\n    )\n  ) () x xs)\n)", "user": "546113ffe4b01be26fd74699"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "53eaa804e4b036ad0777e4ea"}, {"problem": 40, "code": "#(rest (mapcat list (repeat (count %2) %) %2))", "user": "5464a536e4b01be26fd746cf"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %)))", "user": "53572176e4b04ce2eb3ed276"}, {"problem": 40, "code": "(fn myinterpose [e l]\n  (if (or (empty? l) (empty? (rest l)))\n    l\n    (cons (first l)\n          (cons e (myinterpose e (rest l))))))", "user": "54651982e4b01be26fd746d4"}, {"problem": 40, "code": "(fn [x col] (butlast (mapcat (fn [a] [a x]) col)))", "user": "5367bc60e4b0243289761e81"}, {"problem": 40, "code": "(fn [sep col]\n  (drop-last (mapcat vector col (repeat sep))))", "user": "541f89a5e4b01498b1a71a99"}, {"problem": 40, "code": "(fn [a s]\n  (loop [o (vector (first s)) s (rest s)]\n    (if (empty? s)\n      o\n      (recur (conj o a (first s)) (rest s)))))", "user": "540c8f3fe4b0addc1aec6705"}, {"problem": 40, "code": "(fn[x, l](drop-last (mapcat #(vector % x) l)))", "user": "54651ef5e4b01be26fd746d5"}, {"problem": 40, "code": "#(next (interleave (repeat %1) %2))", "user": "536c99c5e4b0fc7073fd6e46"}, {"problem": 40, "code": "(fn [separator xs]\n  (if (empty? xs)\n    []\n    (loop [xs\txs\n           sepd\t[]]\n      (if (= 1 (count xs))\n        (conj sepd (first xs))\n        (recur (rest xs) (-> sepd (conj (first xs)) (conj separator)))))))", "user": "5468033ee4b00cfc9eacc133"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %)))", "user": "54084089e4b0addc1aec66c7"}, {"problem": 40, "code": "(fn [elt l]\n  (take (dec (* (count l) 2)) (mapcat #(list % elt) l)))", "user": "54651faee4b01be26fd746d6"}, {"problem": 40, "code": "(fn [s l] (vec (butlast (mapcat #(list % s) l))))", "user": "5325cef5e4b09d4e7a9b54e7"}, {"problem": 40, "code": "#(reduce (fn [a b] (conj (conj a %1) b)) [(first %2)] (rest %2))", "user": "544e9022e4b0e3978000698b"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "52b9cfb9e4b07a9af57922c5"}, {"problem": 40, "code": "(fn [sep x]\n  (loop  [col x\n         result []]\n    (if (empty? col) \n      (butlast result) \n      (recur (rest col) (conj result (first col) sep)))))", "user": "5146fd44e4b0d12420447958"}, {"problem": 40, "code": "(fn interposex\n  [n [h & t]]\n  (if (empty? t)\n    [h]\n    (concat [h n] (interposex n t))))", "user": "5469e7cce4b00cfc9eacc14c"}, {"problem": 40, "code": "#(->> % repeat (map vector %2) flatten drop-last)", "user": "53ea5851e4b036ad0777e4e4"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "54485727e4b032a45b8693c6"}, {"problem": 40, "code": "(fn [s coll] (rest (mapcat #(list s %1) coll)))", "user": "52a90056e4b0c58976d9ac39"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "546c1b2ce4b00cfc9eacc174"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "user": "546a6dbbe4b00cfc9eacc156"}, {"problem": 40, "code": "#(rest (mapcat (partial list %) %2))", "user": "5465febde4b01be26fd746e1"}, {"problem": 40, "code": "(fn [n ls]\n(loop [[x & xs] ls  result '()]\n    (if (empty? xs) (concat result (cons x '()))\n      (recur xs (concat result (cons x (cons n '())))))))", "user": "546176e7e4b01be26fd746a2"}, {"problem": 40, "code": "(fn [x y] (rest (mapcat #(list x %) y)))", "user": "5462ce20e4b01be26fd746b8"}, {"problem": 40, "code": "(fn [separator lst] (conj (reduce (fn[base x] (conj base x separator)) [] (butlast lst)) (last lst)))", "user": "5461873de4b01be26fd746a3"}, {"problem": 40, "code": "(fn _interpose [v coll]\n  (when (seq coll)\n    (if (next coll)\n      (list* (first coll) v (lazy-seq (_interpose v (rest coll))))\n      coll)))", "user": "546ed28be4b00cfc9eacc1a5"}, {"problem": 40, "code": "(fn [value s]\n  (cons (first s) (interleave (repeat value) (rest s))))", "user": "546c4c5fe4b00cfc9eacc178"}, {"problem": 40, "code": "#(rest (mapcat list (repeat %) %2))", "user": "546f81e3e4b00cfc9eacc1ae"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "user": "53cfa79ce4b00fb29b2212ff"}, {"problem": 40, "code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "user": "546d41bde4b00cfc9eacc18c"}, {"problem": 40, "code": "(fn [x lst] (drop 1 (interleave (repeat x) lst)))", "user": "543bb568e4b032a45b869334"}, {"problem": 40, "code": "(fn[elem col] \n      (reverse(rest(reduce \n                     (fn[acc, next] (conj acc next elem)) \n                     '()\n                     col\n       )))\n    )", "user": "52149e21e4b0961f15ac4d94"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "546c1f73e4b00cfc9eacc175"}, {"problem": 40, "code": "(fn [middle-value coll]\n  (let [middle-val-list (repeat (count coll) middle-value)\n        zipped-together (flatten (map list coll middle-val-list))]\n    (butlast zipped-together)))", "user": "541cf6dfe4b01498b1a71a7a"}, {"problem": 40, "code": "(fn [x coll]\n  (butlast (flatten\n            (map vector coll (repeat (count coll) x)))))", "user": "5456e4e7e4b080a794c2c883"}, {"problem": 40, "code": "(fn [a s]\r\n  (drop-last 1 (mapcat #(list % a) s)))", "user": "5470699ae4b00cfc9eacc1b6"}, {"problem": 40, "code": "(fn[n coll]\n  (loop [in coll out []]\n    (cond (empty? (rest in)) (conj out (first in))\n          :else (recur (rest in) (conj out (first in) n)))))", "user": "5472cba1e4b094393f72dd7a"}, {"problem": 40, "code": "(fn [sep col1]\n  (drop-last\n  (mapcat #(conj [] % sep) col1)))", "user": "54413696e4b032a45b86936b"}, {"problem": 40, "code": "(fn [n coll]\n    (drop 1 (interleave (repeat n) coll)))", "user": "53613db8e4b0243289761e41"}, {"problem": 40, "code": "(fn ! [x y] \n   (if (= (count y) 0) \n     () \n     (concat \n       (list (first y)) \n       (if(= 0 (count (! x (rest y)))) \n             () \n             (list x)) (! x (rest y)))))", "user": "546fa7a7e4b00cfc9eacc1b1"}, {"problem": 40, "code": "(fn [sep xs] (butlast (mapcat list xs (map (fn [_] sep) (range (count xs))))))", "user": "547584d9e4b0c51c1f4d729b"}, {"problem": 40, "code": "(fn [i vs]\n  (butlast\n   (reduce (fn [acc v]\n             (conj acc v i))\n           []\n           vs)))", "user": "54508859e4b0e397800069a3"}, {"problem": 40, "code": "(fn [sep coll] (rest (mapcat (partial list sep) coll)))", "user": "54734a0de4b0c51c1f4d727b"}, {"problem": 40, "code": "#(butlast (mapcat (fn [x] (conj (vector x) %1)) %2))", "user": "54696e4ce4b00cfc9eacc147"}, {"problem": 40, "code": "(fn [sep seq]\n  (loop [s (rest seq) acc (list (first seq))]\n    (if (empty? s)\n      (reverse acc)\n      (recur (rest s) (conj acc sep (first s)))))\n  )", "user": "5471f2fbe4b094393f72dd70"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "5466aabbe4b01be26fd746e8"}, {"problem": 40, "code": "(fn [inter items] (rest (interleave (cycle (list inter)) items)))", "user": "51cf815de4b0e42293a22575"}, {"problem": 40, "code": "#(butlast (vec (interleave %2 (repeat %))))", "user": "546e4ab8e4b00cfc9eacc19c"}, {"problem": 40, "code": "(fn [n coll]\n  (butlast (mapcat #(list % n) coll)))", "user": "5478c4fee4b0c51c1f4d72c0"}, {"problem": 40, "code": "#(drop-last (interleave %2 (take (count %2) (repeat %1))))", "user": "54630cdae4b01be26fd746bb"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "user": "5433d3ebe4b0b6b47310fce4"}, {"problem": 40, "code": "(fn my-interpose [m x]\n  (if (seq (rest x))\n    (cons (first x) (cons m (my-interpose m (rest x))))\n    (list (first x))))", "user": "5479c58de4b0c51c1f4d72c7"}, {"problem": 40, "code": "(fn [x v]\n  (rest (mapcat #(vector x %1) v))\n  )", "user": "5475d755e4b0c51c1f4d72a0"}, {"problem": 40, "code": "#(pop(vec(interleave %2(repeat(count %2)%))))", "user": "545d5c3be4b01be26fd7466d"}, {"problem": 40, "code": "(fn [v s]\n  (drop 1 (mapcat #(vector v %) s)))", "user": "539ddf25e4b0b51d73faaf3e"}, {"problem": 40, "code": "(let [pose (fn ps [spot lst] (if (= lst '()) '() (concat (list spot (first lst)) (ps spot (rest lst)))))]\n  \n  (fn [spot lst] (rest (pose spot lst)))\n  \n  )", "user": "5471f090e4b094393f72dd6e"}, {"problem": 40, "code": "#(rest (mapcat (partial list %) %2))", "user": "5470b3d0e4b00cfc9eacc1bb"}, {"problem": 40, "code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "user": "54764cf1e4b0c51c1f4d72a4"}, {"problem": 40, "code": "#(concat (mapcat list %2 (take (- (count %2) 1) (cycle [%1]))) [(last %2)])", "user": "51dfb9e2e4b01188f0627531"}, {"problem": 40, "code": "(fn [i l] (drop-last (mapcat #(list % i) l)))", "user": "5478e57de4b0c51c1f4d72c1"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "535c2d21e4b04ce2eb3ed2b2"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "547adcb0e4b0c51c1f4d72cf"}, {"problem": 40, "code": "(fn [x coll] \n  (conj (reduce #(conj %1 %2 x) [] (drop-last coll)) (last coll)))", "user": "545f737ce4b01be26fd74688"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "user": "546e0c24e4b00cfc9eacc198"}, {"problem": 40, "code": "(fn [i c] (take (dec (* 2 (count c))) (interleave c (repeat i))))", "user": "547d8e93e4b0c51c1f4d72f4"}, {"problem": 40, "code": "(fn [x ys]\n  (let [len (count ys)]\n    (take (dec (* 2 len))\n          (interleave ys\n                      (take len (repeat x))))))", "user": "547ad587e4b0c51c1f4d72ce"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "501b1efee4b0b12d9c5f4d82"}, {"problem": 40, "code": "(fn [v c] (drop-last (mapcat vector c (repeat v))))", "user": "528c381ce4b0239c8a67aeb2"}, {"problem": 40, "code": "#(cons (first  %2) (interleave (repeat %) (rest %2) ))", "user": "547d66a1e4b0c51c1f4d72f2"}, {"problem": 40, "code": "(fn [e lst]\n  (rest (interleave (repeat e) lst)))", "user": "545281bce4b0e397800069c3"}, {"problem": 40, "code": "#(rest (apply concat (map (partial vector %) %2)))", "user": "54357066e4b0b6b47310fcfd"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "548204b2e4b0e286459a117a"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "54577fefe4b01be26fd7460d"}, {"problem": 40, "code": "(fn [v xs]\n  (butlast (mapcat (fn [x] [x v]) xs)))", "user": "5483d59fe4b0e286459a1194"}, {"problem": 40, "code": "(fn [a coll]\n  (loop [xs [(first coll)]\n         ys (rest coll)]\n    (if (empty? ys)\n      xs\n      (recur (conj xs a (first ys)) (rest ys)))))", "user": "5032748ae4b0e78df07b092f"}, {"problem": 40, "code": "(fn [x coll]\n  (loop [result []\n         c coll]\n    (if (empty? (rest c))\n      (conj result (first c))\n      (recur (conj result (first c) x)\n             (rest c)))))", "user": "5484143de4b0e286459a1197"}, {"problem": 40, "code": "#(vec (drop-last (flatten (map list %2 (repeat %1)))))", "user": "535f9a5ce4b04ce2eb3ed2de"}, {"problem": 40, "code": "(\n    fn [a, lst]\n    (\n      drop-last\n      (\n        mapcat #(conj [] % a) lst\n        )\n      )\n    )", "user": "547f3434e4b0c51c1f4d7319"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "54857e3be4b0e286459a11ad"}, {"problem": 40, "code": "(fn [in coll]\n  (->> (repeat in)\n       (interleave coll)\n       butlast))", "user": "54848141e4b0e286459a119e"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "5470c930e4b094393f72dd64"}, {"problem": 40, "code": "(fn my-interpose [between s]\n  (loop [my-s (rest s)\n         accum [(first s)]]\n    (if (empty? my-s)\n      accum\n      (recur (rest my-s) (conj accum between (first my-s))))))", "user": "542c026ae4b0dad94371f29a"}, {"problem": 40, "code": "(fn myinterpose [el coll]\n  (if (nil? (first coll))\n      []\n      (concat [(first coll)] \n              (if (empty? (rest coll)) [] [el]) \n              (myinterpose el (rest coll)))))", "user": "4e41a04e535dc968683fc49e"}, {"problem": 40, "code": "(fn [x y] (drop 1 (interleave (repeat x) y)))", "user": "548485f5e4b0e286459a119f"}, {"problem": 40, "code": "(fn [a b] (drop 1 (interleave (repeat a) b)))", "user": "54750ca3e4b0c51c1f4d7294"}, {"problem": 40, "code": "#(reduce\n  (fn [a b]\n    (conj a %1 b))\n  [(first %2)]\n  (rest %2))", "user": "513facf5e4b00f13ea1bd892"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5486adf7e4b0e286459a11be"}, {"problem": 40, "code": "(fn inter [elt a-seq]\n  (drop-last (interleave a-seq (repeat elt))))", "user": "547e3846e4b0c51c1f4d7302"}, {"problem": 40, "code": "(fn [dl li]\n   (drop-last (mapcat #(list % dl) li)))", "user": "5471f0f3e4b094393f72dd6f"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %)))", "user": "5472d919e4b094393f72dd7b"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %)))", "user": "54899701e4b0e286459a11ea"}, {"problem": 40, "code": "(fn intercalate [i coll]\n  (cons (first coll)\n        ((fn go [xs]\n           (when-let [x (first xs)]\n             (cons i (cons x (go (next xs))))\n             )\n           )\n         (next coll)\n         ))\n  )", "user": "5488872ee4b0e286459a11d3"}, {"problem": 40, "code": "(fn [n xs] (butlast (mapcat #(list % n) xs)))", "user": "5485b402e4b0e286459a11b0"}, {"problem": 40, "code": "(fn [val list]\n  (drop-last (interleave list (repeat val))))", "user": "547fbe01e4b0c51c1f4d7321"}, {"problem": 40, "code": "(fn [sep x] (butlast (reduce #(conj (conj % %2) sep) [] x)))", "user": "54893618e4b0e286459a11e0"}, {"problem": 40, "code": "(fn [val lis] (rest (interleave  (repeat (count lis) val) lis)))", "user": "52457931e4b08ba239308107"}, {"problem": 40, "code": "(fn [v vs] (rest (reduce #(conj %1 v %2) [] vs)))", "user": "548af5b5e4b0e286459a11f8"}, {"problem": 40, "code": "(fn [j m] (mapcat #(if (= %1 (peek m)) (list %1) (list %1 j)) m))", "user": "543823f1e4b032a45b869311"}, {"problem": 40, "code": "(fn [inter lst]\n  (loop [acc [(first lst)] s (rest lst)]\n    (if (= 0 (count s))\n      acc\n      (recur (conj (conj acc inter) (first s)) (rest s)))\n    )\n  )", "user": "52a803cee4b0c58976d9ac26"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "548392fce4b0e286459a1191"}, {"problem": 40, "code": "(fn [sp xs] (rest  (reduce #(conj %1 sp %2) [] xs)) )", "user": "548cd813e4b0e286459a1211"}, {"problem": 40, "code": "#(rest (interleave (repeat (count %2) %) %2))", "user": "548cd637e4b0e286459a1210"}, {"problem": 40, "code": "#(take (- (* (count %2) 2) 1) (interleave %2 (repeat (count %2) %1)))", "user": "5485bc1be4b0e286459a11b1"}, {"problem": 40, "code": "(fn [sep xs]\n  (drop 1 (interleave (repeat sep) xs)))", "user": "5188c249e4b0bdff0e072d54"}, {"problem": 40, "code": "(fn [x coll] (rest (flatten (map #(list x %) coll))))", "user": "5453b522e4b0e397800069d0"}, {"problem": 40, "code": "(fn [s v] (drop-last (reduce #(conj %1 %2 s) [] v)))", "user": "5485da80e4b0e286459a11b4"}, {"problem": 40, "code": "(fn [x l] \n      (reduce \n       (fn [x1 x2] \n         (if (odd? (count x1)) \n           (conj (conj x1 x) x2)\n            (conj x1 x2))) \n         [] l))", "user": "53f4c3d6e4b0db01ade6f9c5"}, {"problem": 40, "code": "(fn [sep values] (drop-last (mapcat vector values (repeat sep))))", "user": "539eb153e4b0ca733b97448e"}, {"problem": 40, "code": "(fn [separator sequence]\n  (into [] (butlast (mapcat #(list % separator) sequence))))", "user": "4fbfbd4fe4b081705acca31c"}, {"problem": 40, "code": "(fn [x l] (drop-last (mapcat #(conj [] % x) l)))", "user": "548f3ee4e4b0e286459a1237"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "50f3bd98e4b041536e2eca3a"}, {"problem": 40, "code": "(fn [x xs]\n  (-> xs (interleave (repeat x)) butlast))", "user": "548fa2dfe4b0e286459a1240"}, {"problem": 40, "code": "(fn [i s]\n  (rest\n  (reduce #(conj %1 i %2) [] s)\n  \n  ))", "user": "54903056e4b0b312c081ff2e"}, {"problem": 40, "code": "(fn my-interpose\n  [value my-seq]\n  (let [[current & remaining] my-seq]\n    (cons current (mapcat #(list value %) remaining))))", "user": "548f19a8e4b0e286459a1231"}, {"problem": 40, "code": "#(drop-last (mapcat list %2 (repeat %1)))", "user": "5491bebbe4b0b312c081ff3c"}, {"problem": 40, "code": "(fn [s col]\n  (butlast (apply concat (for [i col] (list i s)))))", "user": "5243e37ae4b076204b44fae3"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat (count %2) %)))", "user": "534b57bbe4b084c2834f4a78"}, {"problem": 40, "code": "(fn [sep s] (rest (mapcat #(list sep %) s)))", "user": "51d26b0ae4b0d13b04db0d97"}, {"problem": 40, "code": "(fn [i c]\n  (pop (vec (apply concat (map #(list % i) c)))))", "user": "5493ccbbe4b0b312c081ff50"}, {"problem": 40, "code": "(fn [i c] (butlast (mapcat #(list % i) c)))", "user": "536e5b68e4b0fc7073fd6e6d"}, {"problem": 40, "code": "(fn [x y] (rest (mapcat #(vector x %) y)))", "user": "53bcdd41e4b0d9a98559a6c0"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "549375e4e4b0b312c081ff4e"}, {"problem": 40, "code": "(fn myinterpose [inserted myseq]\n        (rest (apply concat (map #(identity [inserted %]) myseq))))", "user": "5455510fe4b0e397800069df"}, {"problem": 40, "code": "(fn my-interpose [x s]\n  (conj\n    (apply vector (mapcat vector s (repeat (dec (count s)) x)))\n    (last s)))", "user": "548c8115e4b0e286459a120c"}, {"problem": 40, "code": "(fn [sep coll] \n  (drop-last (mapcat vector coll (repeat sep))))", "user": "53576356e4b04ce2eb3ed27a"}, {"problem": 40, "code": "(fn [a b] (rest (mapcat #(list a %1) b)))", "user": "54973374e4b0b312c081ff6f"}, {"problem": 40, "code": "(fn [e lst] (rest (#(mapcat list (repeat e) lst))))", "user": "54965534e4b0b312c081ff65"}, {"problem": 40, "code": "(fn [interposeItem list1]\n  (loop [result []\n         l1 list1]\n    (let [firstL1 (first l1)]\n      (cond\n       (empty? l1) result\n       (= 1 (count l1)) (concat result [firstL1])\n       :else (recur \n              (concat result [firstL1 interposeItem])\n              (rest l1))))))", "user": "548f339ee4b0e286459a1233"}, {"problem": 40, "code": "(fn [x l] (rest (mapcat #(list x %) l)))", "user": "547e6fd2e4b0c51c1f4d730b"}, {"problem": 40, "code": "#(pop (into [] (interleave %2 (repeat %1))))", "user": "53c83f94e4b00fb29b2212af"}, {"problem": 40, "code": "(fn [sep coll]\n  (reduce (fn [res, x]\n            (if (empty? res)\n              [x]\n              (conj res sep x)))\n          []\n          coll))", "user": "548f37c7e4b0e286459a1234"}, {"problem": 40, "code": "(fn [a b] (butlast (mapcat #(list % a) b)))", "user": "540217e1e4b0df28a13c62cb"}, {"problem": 40, "code": "( fn [s v] (->> v (mapcat #(list s % )) rest ))", "user": "4f0d6686535d0136e6c22318"}, {"problem": 40, "code": "(fn [sep coll]\n (drop-last (interleave coll (repeat sep)))\n  )", "user": "54975e99e4b0b312c081ff72"}, {"problem": 40, "code": "(fn [sep coll]\n     (rest (mapcat (fn [x] [sep x]) coll)))", "user": "548ade6de4b0e286459a11f6"}, {"problem": 40, "code": "#(drop-last (mapcat (fn [x] (vector x %1)) %2))", "user": "54926752e4b0b312c081ff44"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "549c3e0ce4b0f3d1d8e70f87"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5498c4cfe4b0b312c081ff85"}, {"problem": 40, "code": "(fn [sep coll]\n    (drop-last (mapcat vector coll (repeat sep)))\n)", "user": "54996971e4b0b312c081ff8d"}, {"problem": 40, "code": "(fn ii [x coll]\n  (drop-last\n    (interleave coll (repeat (count coll) x))))", "user": "543b12cce4b032a45b86932a"}, {"problem": 40, "code": "(fn eh [v x]\n  (cond\n   (empty? x) []\n   (empty? (rest x)) [(first x)]\n   :else (cons (first x) (cons v (eh v (rest x))))))", "user": "549c8bbde4b0f3d1d8e70f8c"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "549c22f7e4b0f3d1d8e70f86"}, {"problem": 40, "code": "(fn [x coll] (drop 1 (interleave (repeat x) coll)))", "user": "542dc7c7e4b0dad94371f2bd"}, {"problem": 40, "code": "#(butlast(apply concat (map list %2 (repeat %1))))", "user": "549188f6e4b0b312c081ff3a"}, {"problem": 40, "code": "(fn my-interpose [delimiter [x & more]]\n  (lazy-seq\n   (when x\n     (if more\n       (cons x (cons delimiter (my-interpose delimiter more)))\n       (cons x nil)))))", "user": "548018d1e4b0c51c1f4d7326"}, {"problem": 40, "code": "#(loop [xs %2 sep %1 total []]\n   (if (empty? xs)\n     total\n     (if (= (count xs) 1)\n       (recur (rest xs) sep (conj total (first xs)))\n      (recur (rest xs) sep (conj total (first xs) sep)))))", "user": "549e5e52e4b0f3d1d8e70f9e"}, {"problem": 40, "code": "(fn [sp [h & ts]]\n (reduce\n  #(conj %1 sp %2)\n  [h]\n  ts))", "user": "549a999be4b0f3d1d8e70f6f"}, {"problem": 40, "code": "#(take (- (* 2 (count %2)) 1) (mapcat (fn [x] (list x %1)) %2))", "user": "548f11a0e4b0e286459a122d"}, {"problem": 40, "code": "(fn [element coll] \n  (flatten \n     (concat (map (fn [x] [x element]) \n                  (drop-last coll))\n             [(last coll)])))", "user": "5470cb10e4b094393f72dd65"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "54769c7ae4b0c51c1f4d72a8"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "user": "5487eb1de4b0e286459a11ca"}, {"problem": 40, "code": "#(drop-last (mapcat (fn [x] [x %]) %2))", "user": "549def9ce4b0f3d1d8e70f99"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "5499e23de4b03163384f4706"}, {"problem": 40, "code": "(fn [sep [head & tail]]\n  (concat [head] (mapcat (fn [x] [sep x]) tail)))", "user": "5455c2f3e4b080a794c2c87d"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "549c1713e4b0f3d1d8e70f82"}, {"problem": 40, "code": "(fn [v s] (rest (mapcat #(list v %) s)))", "user": "5466199ce4b01be26fd746e2"}, {"problem": 40, "code": "#(take (dec (* (count %2) 2)) (mapcat list %2 (repeat (count %2) %1)))", "user": "549cd548e4b0f3d1d8e70f91"}, {"problem": 40, "code": "(fn [value coll]\n  (rest (mapcat vector (repeat value) coll)))", "user": "53ce0a29e4b00fb29b2212eb"}, {"problem": 40, "code": "(fn [sep s] (rest (mapcat #(list sep %) s)))", "user": "549a176ce4b0f3d1d8e70f69"}, {"problem": 40, "code": "#(butlast (interleave  %2 (repeat %1)))", "user": "54908cc1e4b0b312c081ff32"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5488537be4b0e286459a11cf"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %)))", "user": "53fe1b42e4b0de5c418485f1"}, {"problem": 40, "code": "(fn [x ys] (rest (mapcat #(vector x %) ys)))", "user": "549dd591e4b0f3d1d8e70f98"}, {"problem": 40, "code": "(fn [x y] \n  (drop-last (interleave y (repeat (count y) x)))\n  )", "user": "54a1d643e4b09f271ff37c50"}, {"problem": 40, "code": "(fn [delim l] (rest (mapcat (fn [elem] [delim elem]) l)))", "user": "545b0275e4b01be26fd74648"}, {"problem": 40, "code": "(fn f [a b] (if (= b []) nil (if (= (rest b) []) (vector (first b)) (concat (vector (first b) a) (f a (rest b))))))", "user": "505006d7e4b0a02f9cffdeaf"}, {"problem": 40, "code": "(fn my-interpose [p v]\n  (loop [xs v zs []]\n    (if (empty? xs)\n      (drop-last zs)\n      (let [[x & rxs] xs]\n        (recur rxs (conj (conj zs x) p))))))", "user": "54a31fdae4b09f271ff37c64"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "54a70af9e4b09f271ff37c93"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "user": "53ef55eee4b0742d9025b0ca"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "54a6399ee4b09f271ff37c85"}, {"problem": 40, "code": "(fn [a xs] (butlast (interleave xs (repeat a))))", "user": "54a7336be4b09f271ff37c95"}, {"problem": 40, "code": "(fn [sep ls] (cons (first ls) (for [[a b] (map vector (repeat sep) (rest ls))\n                                    x [a b]]\n                                x)))", "user": "4ea03f70535d7eef308072a1"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %)))", "user": "54a677a9e4b09f271ff37c88"}, {"problem": 40, "code": "(fn [v s]                                                                                                                                                                                              \n  (drop-last (reduce (fn [r e]                                                                                                                                                                                    \n                       (conj r e v)                                                                                                                                                                              \n                       ) [] s)))", "user": "53403f42e4b085b17e897da8"}, {"problem": 40, "code": "(fn [x, y] (reduce #(if (= (last y) %2) (concat % [%2]) (concat % [%2] [x])) [] y))", "user": "54a7efdee4b09f271ff37c9d"}, {"problem": 40, "code": "(fn [separator coll]\n  (butlast (apply concat (map #(list % separator) coll)))\n)", "user": "54a7d707e4b09f271ff37c9b"}, {"problem": 40, "code": "(fn my-interpose [x s]\n  (if (empty? s)\n    '()\n    (take (- (* 2 (count s)) 1) (conj (my-interpose x (rest s)) x (first s)))\n  )\n)", "user": "54982522e4b0b312c081ff7c"}, {"problem": 40, "code": "(fn my-interpose [x ys]\n  (->(for [y ys] [y x]) flatten drop-last))", "user": "50aa777fe4b056ee01935866"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %)))", "user": "52540bcce4b0541d1855b952"}, {"problem": 40, "code": "(fn [i coll] (butlast (mapcat #(vector % i) coll)))", "user": "54ab6773e4b09f271ff37cc8"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %)))", "user": "52e12ac5e4b09f7907dd141a"}, {"problem": 40, "code": "(fn [av s] \n  (loop [r s out []]\n    (if (empty? (rest r))\n      (conj out (first r))\n      (recur (rest r) (conj out (first r) av))          \n    )\n  ) \n)", "user": "54aa373de4b09f271ff37cb6"}, {"problem": 40, "code": "(fn [x coll] (rest (flatten (map #(list x %) coll))))", "user": "54a854f5e4b09f271ff37ca2"}, {"problem": 40, "code": "(fn fc40 [e l]\n  (if (= 1 (count l)) l\n    (cons (first l) (cons e (fc40 e (rest l))))))", "user": "547884d7e4b0c51c1f4d72bd"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "50ec69e0e4b04edc3377704a"}, {"problem": 40, "code": "#(drop-last (mapcat list %2 (repeat %1)))", "user": "515b03fee4b0a102a3e5262a"}, {"problem": 40, "code": "(fn [v coll]\n  (let [inter (map (fn [_] v) coll)]\n    (rest (mapcat list inter coll))))", "user": "54addba9e4b09f271ff37ce9"}, {"problem": 40, "code": "(fn [c xs] (reduce (fn [a e] (conj a c e)) [(first xs)] (rest xs)))", "user": "549cc867e4b0f3d1d8e70f8f"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %)))", "user": "54ad9d76e4b09f271ff37ce6"}, {"problem": 40, "code": "(fn [sep sq]\n  (flatten (reduce \n   (fn [x y] (conj [x sep] y)) \n   sq)))", "user": "54ae541ae4b09f271ff37cef"}, {"problem": 40, "code": "(fn [sep args] (butlast (flatten (map (fn [& x] x) args (repeat sep)))))", "user": "520ed237e4b0101e4be6fcd9"}, {"problem": 40, "code": "(fn [item s] (drop-last (mapcat #(list % item) s)))", "user": "540459bfe4b0addc1aec6656"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "54af6fb0e4b09f271ff37d08"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "54b13a40e4b09f271ff37d1b"}, {"problem": 40, "code": "#(rest (mapcat (partial list %1) %2))", "user": "54ad4863e4b09f271ff37ce0"}, {"problem": 40, "code": "(fn intp\n  ([sep col] (intp sep (rest col) [(first col)]))\n  ([sep col1 col2] (if (= (count col1) 0)\n                     col2\n                     (intp sep (rest col1) (concat col2 [sep] [(first col1)]))\n                     )\n   )\n  )", "user": "54ab46fee4b09f271ff37cc3"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %) %2))", "user": "528e441be4b0239c8a67aed8"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat (count %2) %1) %2))", "user": "54af220ce4b09f271ff37d02"}, {"problem": 40, "code": "(fn [i xs] (drop-last (mapcat #(list % i) xs)))", "user": "54ab502fe4b09f271ff37cc4"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "53e3e353e4b036ad0777e406"}, {"problem": 40, "code": "(fn[x,y] (rest (mapcat #(conj [] x %) y)))", "user": "4fabbd3ee4b081705acca21e"}, {"problem": 40, "code": "(fn [x y] (rest (mapcat #(conj [] x %) y)))", "user": "53e88247e4b036ad0777e489"}, {"problem": 40, "code": "(fn inter [y x]\n  (cond \n   (and (seq x) (next x)) (concat [(first x) y] (inter y (rest x)))\n   (seq x) (concat [(first x)] (inter y (rest x)))\n   :else []))", "user": "54b567eee4b05787c3b163a2"}, {"problem": 40, "code": "(fn r [x s]\n  (if (= 1 (count s))\n    s\n    (concat [(first s) x] (r x (rest s)))))", "user": "545bd22fe4b01be26fd7465a"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "54b2ec84e4b09f271ff37d33"}, {"problem": 40, "code": "(fn [separator values]\n  (reduce (fn [result value]\n            (if (seq result)\n              (conj (conj result separator) value)\n              (conj result value)))\n          []\n          values))", "user": "5463c824e4b01be26fd746c5"}, {"problem": 40, "code": "#(butlast (mapcat vector %2 (repeat %1)))", "user": "54b04708e4b09f271ff37d11"}, {"problem": 40, "code": "#(butlast (seq (apply concat (for [x %2] [x %]))))", "user": "54b448f2e4b05787c3b1638e"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat (count %2) %)))", "user": "54b050cee4b09f271ff37d13"}, {"problem": 40, "code": "(fn f\n  ([v s] (f v s []))\n  ([v s t] (if (seq s)\n             (recur v (rest s) (conj t v (first s)))\n             (rest t))))", "user": "52be58d7e4b07a9af579231d"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %)))", "user": "52a267c6e4b04e0c58e87bef"}, {"problem": 40, "code": "(fn [sep s]\n  (drop 1 (interleave (repeat sep) s)))", "user": "532902f8e4b09d4e7a9b550e"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat (count %2) %1) %2))", "user": "50b42cbbe4b001349b2f4abe"}, {"problem": 40, "code": "(fn [sep coll]\n  (flatten\n   (for [x (range (count coll))]\n     (if (= 0 x) (nth coll 0) [sep (nth coll x)]))))", "user": "54b2d392e4b09f271ff37d2f"}, {"problem": 40, "code": "(fn [s col] (drop 1 (interleave (repeat s) col)))", "user": "54bad522e4b0ed20f4ff6eb8"}, {"problem": 40, "code": "#(drop-last (reduce (fn [s x](conj (conj s x) %))           \n          [] %2))", "user": "54b45938e4b05787c3b1638f"}, {"problem": 40, "code": "(fn \n  [x coll]\n  (concat\n    (list (first coll))\n    (mapcat\n      #(list x %)\n      (rest coll))))", "user": "548db64ce4b0e286459a121c"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %1)))", "user": "525b142fe4b0cb4875a45d05"}, {"problem": 40, "code": "#(butlast(interleave %2(repeat %1)))", "user": "5481be5fe4b0e286459a1172"}, {"problem": 40, "code": "#(rest (mapcat (fn [x] [% x]) %2))", "user": "54acf5c7e4b09f271ff37cdd"}, {"problem": 40, "code": "(fn [n coll] (rest (mapcat vector (repeat (count coll) n) coll)))", "user": "54b6c24be4b0ed20f4ff6e7c"}, {"problem": 40, "code": "(fn [b s] (butlast (mapcat #(vector % b) s)))", "user": "54bd04e7e4b0ed20f4ff6ed8"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "54543484e4b0e397800069d4"}, {"problem": 40, "code": "(fn [x coll] (drop 1 (interleave  (repeat x) coll)))", "user": "54b40fe6e4b05787c3b1638a"}, {"problem": 40, "code": "#(reverse (rest (reduce (fn [m, v] (conj (conj m v) %1)) '() %2)))", "user": "54b972bbe4b0ed20f4ff6ead"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "519e70d5e4b0acf32bc6a42c"}, {"problem": 40, "code": "(fn [sep [f & r]] (cons f (flatten (map #(list sep %) r))))", "user": "54be7772e4b0ed20f4ff6eea"}, {"problem": 40, "code": "(fn [s a]\n  (loop [i 1 a a r []]\n    (if (empty? a)\n      r\n      (if (odd? i)\n        (recur (inc i) (rest a) (conj r (first a)))\n        (recur (inc i) a (conj r s))))))", "user": "54bec835e4b0ed20f4ff6ef7"}, {"problem": 40, "code": "(fn inter [i s]\n  (reduce \n   #(concat %1 [i %2])\n   [(first s)]\n   (rest s)))", "user": "54bd91d7e4b0ed20f4ff6ee2"}, {"problem": 40, "code": "(fn [sep li]\n  (loop [l (pop (apply list li)) nl (list (peek (apply list li)))]\n    (println nl) \n    (if-not (seq l)\n      (reverse (vec nl))\n      (recur (pop l) (conj nl sep (peek l)))\n      )   \n    )\n  )", "user": "54b90836e4b0ed20f4ff6e9d"}, {"problem": 40, "code": "(fn intps [s data]\n  (if (= (count data) 1)\n    [(first data)]\n    (concat [(first data) s] (intps s (rest data)))\n    )\n  )", "user": "54bbba99e4b0ed20f4ff6ec2"}, {"problem": 40, "code": "(fn [sep v] (drop-last (mapcat #(conj [] %1 sep) v)))", "user": "540705f0e4b0addc1aec66b1"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "54b95f3de4b0ed20f4ff6eab"}, {"problem": 40, "code": "(fn [sep coll] (reverse (rest (reverse (apply mapcat list (list coll (take (count coll) (repeat sep))))))))", "user": "54b331dbe4b09f271ff37d37"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "54bfc88ae4b0ed20f4ff6f09"}, {"problem": 40, "code": "(fn intrp [x items] (\n  if (= 1 (count items)) items (\n                            concat (intrp x (butlast items)) [x (last items)]\n                            )                   \n))", "user": "54c0ce91e4b0ed20f4ff6f18"}, {"problem": 40, "code": "(fn mypose\n  [sep coll & [out]]\n  (if (empty? (rest coll))\n    (conj (vec out) (first coll))\n    (mypose sep (rest coll) (conj (vec out) (first coll) sep))))", "user": "54b2e881e4b09f271ff37d32"}, {"problem": 40, "code": "(fn [mid sq]\n  (next \n   (apply concat (for [elem sq] [mid elem]))))", "user": "504dfc75e4b078edc5f59387"}, {"problem": 40, "code": "(fn [i s] (rest (mapcat vector (repeat i) s)))", "user": "54c23252e4b045293a27f5fc"}, {"problem": 40, "code": "(fn delimit [sep coll]\n  (if (<= (count coll) 1)\n    coll\n    (let [[head & tail] coll]\n      (cons\n       head\n       (cons\n        sep\n        (delimit sep tail))))))", "user": "54b10d08e4b09f271ff37d18"}, {"problem": 40, "code": "(fn [s coll]\n  (drop-last (mapcat #(list % s) coll)))", "user": "4e435681535dc968683fc4a1"}, {"problem": 40, "code": "(fn [x s] (rest (mapcat #(vector x %) s)))", "user": "510fe537e4b04c71fce993dd"}, {"problem": 40, "code": "(fn ipose [x coll]\n  (drop-last (mapcat vector coll (repeat x))))", "user": "54c31f1be4b045293a27f609"}, {"problem": 40, "code": "(fn [i s]\n  (loop [curr (rest s) result [(first s)]]\n    (if (empty? curr)\n      result\n      (recur (rest curr) (into result [i (first curr)])))))", "user": "5314318ee4b08068f379ed13"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "54c19050e4b0ed20f4ff6f26"}, {"problem": 40, "code": "(fn [sep s] (reduce #(conj %1 sep %2) [(first s)] (rest s)))", "user": "54c11fdae4b0ed20f4ff6f1b"}, {"problem": 40, "code": "(fn[a b](rest (mapcat #(vector a %) b)))", "user": "54aa665fe4b09f271ff37cb8"}, {"problem": 40, "code": "(fn [s l]\n\t(\n     (fn ! [s f r]\n \t  (if (empty? r)\n       \t\t(conj (empty r) f)\n    \t(conj         \t(! s (first r) (rest r))    s   f )\n      \t)\n  \t\t)\n     s (first l) (rest l)\n     )\n  )", "user": "54c271b9e4b045293a27f602"}, {"problem": 40, "code": "(fn interp [sep coll] \n  (let [f (first coll) r (rest coll)]\n    (if (empty? r) \n      coll\n      (cons f (cons sep (interp sep r))))))", "user": "54bd3aefe4b0ed20f4ff6edb"}, {"problem": 40, "code": "(fn myinterpose [x [y & ys]]\n  (cons y (if ys (cons x (myinterpose x ys)))))", "user": "54c5cc17e4b045293a27f624"}, {"problem": 40, "code": "(fn f [x col] (->> col\n                 (map #(vector % x))\n                 (apply concat)\n                 (butlast)))", "user": "5493d908e4b0b312c081ff52"}, {"problem": 40, "code": "(fn [val a-seq]\n  (drop-last 1 (mapcat #(list % val) a-seq)))", "user": "5235493ee4b05e80434a5064"}, {"problem": 40, "code": "(fn [e col]\n  (drop-last (reduce #(conj %1 %2 e) [] col)))", "user": "51e8ee6be4b07cae92c04bfd"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %)))", "user": "54bc539be4b0ed20f4ff6eca"}, {"problem": 40, "code": "(fn [sep coll] (reduce #(if (empty? %1) (conj %1 %2) (conj %1 sep %2)) [] coll))", "user": "546692aee4b01be26fd746e7"}, {"problem": 40, "code": "#(next (interleave (repeat %) %2))", "user": "548b8a50e4b0e286459a11ff"}, {"problem": 40, "code": "(fn my-interpose [elem l]\n  (cond\n   (empty? l) l\n   (empty? (rest l)) l\n   :else (concat [(first l)] [elem] (my-interpose elem (rest l)))\n  )\n)", "user": "54c82b27e4b045293a27f645"}, {"problem": 40, "code": "(fn [e xs]\n  (loop [result [] xs xs]\n    (if (= 1 (count xs))\n      (conj result (first xs))\n      (recur\n       (conj (conj result (first xs)) e)\n       (rest xs)))))", "user": "54c8d4a8e4b045293a27f654"}, {"problem": 40, "code": "(fn [i s] (reduce #(conj (conj %1 i) %2) (vector (first s)) (rest s)))", "user": "54be3ab6e4b0ed20f4ff6ee7"}, {"problem": 40, "code": "(fn [x l] (rest (mapcat #(list x %)  l)))", "user": "54c169ade4b0ed20f4ff6f24"}, {"problem": 40, "code": "(fn [i c] (reduce #(concat % [i %2]) [(first c)] (rest c)))", "user": "5339b53fe4b0e30313ee6cac"}, {"problem": 40, "code": "(fn [sep input] (drop-last (reduce (fn [newlist item] (into newlist [item sep])) [] input)))", "user": "54c9636fe4b045293a27f66e"}, {"problem": 40, "code": "(fn [x y] (loop [alist x blist y result []]\n             (if  (> (count blist) 1) \n               (recur  alist (rest blist) (conj result (first blist) alist))\n               (identity (conj result (first blist)))\n               )\n             )\n   )", "user": "54b90fe2e4b0ed20f4ff6e9f"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "533c5249e4b0e30313ee6cdd"}, {"problem": 40, "code": "(fn [v s] (butlast (mapcat #(list % v) s)))", "user": "54c97cb3e4b045293a27f677"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %)))", "user": "54b7f217e4b0ed20f4ff6e8f"}, {"problem": 40, "code": "#(next (interleave (repeat %) %2))", "user": "52a0237de4b04e0c58e87bbe"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %)))", "user": "535944d6e4b04ce2eb3ed296"}, {"problem": 40, "code": "(fn [x s] (concat (mapcat #(list % x) (butlast s)) (list (last s))))", "user": "54c05fd7e4b0ed20f4ff6f12"}, {"problem": 40, "code": "(fn imp [sep coll]\n  (rest (concat (interleave (cycle [sep]) coll)))\n)", "user": "54c9f165e4b045293a27f687"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat (count %2) %1)))", "user": "54be792ee4b0ed20f4ff6eeb"}, {"problem": 40, "code": "(comp butlast #(interleave %2 (take (count %2) (repeatedly (constantly %1)))))", "user": "54cbe00ee4b057c6fda3a285"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %1)))", "user": "54ca9ca8e4b057c6fda3a265"}, {"problem": 40, "code": "(fn [value xs]\n  (loop [[y & ys] xs\n         retval []]\n    \n    (if (empty? ys)\n      (conj retval y)  ;; don't interpose value at the end\n      \n      (let [retval (conj retval y)]\n        (recur ys (conj retval value))))))", "user": "54bebeb9e4b0ed20f4ff6ef4"}, {"problem": 40, "code": "(fn [v xs] (butlast (reduce #(conj %1 %2 v) [] xs)))", "user": "54c641f8e4b045293a27f628"}, {"problem": 40, "code": "(fn [del values]\n  (butlast\n   (reduce #(conj %1 %2 del) [] values)))", "user": "54c13b87e4b0ed20f4ff6f20"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "54c97a56e4b045293a27f676"}, {"problem": 40, "code": "(fn interposse [what where]\n  (loop [acc [], s where]\n    (if (empty? (rest s))\n      (conj acc (first s))\n      (recur (conj acc (first s) what) (rest s)\n))))", "user": "54bbe505e4b0ed20f4ff6ec5"}, {"problem": 40, "code": "(fn [sep col] (drop 1 (interleave (repeat sep) col)))", "user": "4fc4eb1ee4b081705acca354"}, {"problem": 40, "code": "(fn [sep xs]\n  (let [[h & t] (reverse xs)]\n    (reduce #(cons %2 (cons sep %1)) (list h) t)))", "user": "54cd651be4b057c6fda3a2a2"}, {"problem": 40, "code": "(fn inter [a lat]\n  (let [[x & xs] lat]\n    (if (empty? xs) (list x)\n      (cons x (cons a (inter a xs))))))", "user": "54cbb0fde4b057c6fda3a27b"}, {"problem": 40, "code": "(fn [xa xb]\n  (butlast \n   (mapcat #(list % xa) xb)))", "user": "5447e5b7e4b032a45b8693c4"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "541b1f25e4b01498b1a71a63"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "505d1b01e4b0e6aca564be04"}, {"problem": 40, "code": "(fn [x xs] (drop-last (apply concat (map vector xs (repeat x)))))", "user": "54d03026e4b018d918be98de"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "545ddac3e4b01be26fd74676"}, {"problem": 40, "code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "user": "54ca658fe4b057c6fda3a25a"}, {"problem": 40, "code": "#(flatten (conj (vector (map list %2  (repeat (- (count %2) 1) %))) (last %2)))", "user": "546a6e9fe4b00cfc9eacc157"}, {"problem": 40, "code": "(fn [sep coll]\n  (let [rcoll (empty coll)\n        lov  (map #(vector sep %1) coll)]\n    (rest (reduce into rcoll lov))))", "user": "53ac815de4b047364c04445e"}, {"problem": 40, "code": "(fn ins [i [x & xs :as coll]]\n  (if (empty? coll) []\n      (if (empty? xs) [x] (concat [x i] (ins i xs)))))", "user": "54b07c1ee4b09f271ff37d16"}, {"problem": 40, "code": "(fn f [d s]\n  (drop-last (interleave s (repeat (count s) d))))", "user": "54ce3790e4b057c6fda3a2ab"}, {"problem": 40, "code": "(fn my-interpose\n  ([sep] ())\n  ([sep c]\n    (let [s (seq c)]\n      (when s\n        (if (= 1 (count s))\n          s\n          (cons (first s)\n                (cons sep (my-interpose sep (rest s)))))))))", "user": "54d000c7e4b018d918be98d7"}, {"problem": 40, "code": "(fn [c f] (reduce (fn [state v] (if (nil? state) [v] (conj state c v))) nil f))", "user": "54246d6de4b01498b1a71aec"}, {"problem": 40, "code": "(fn [sep c] (rest (flatten (map list (repeat sep) c))))", "user": "54d2b411e4b0e8a36923e5f9"}, {"problem": 40, "code": "(fn [ph xs] (drop-last (mapcat #(seq [% ph]) xs)))", "user": "53c349f5e4b00fb29b22127a"}, {"problem": 40, "code": "(fn [sep lst]\n  (let [arr [(first lst)]]\n    (loop [res arr, ins (rest lst)]\n      (if (empty? ins)\n        res\n        (recur (conj (conj res sep) (first ins)) (rest ins))\n      )\n    )\n  )\n)", "user": "54d35746e4b0e8a36923e606"}, {"problem": 40, "code": "(fn i [elem s]\n   (if (empty? (rest s))\n     (list (first s))\n     (cons (first s)\n           (cons elem\n                 (i elem (rest s))))))", "user": "54d26316e4b0e8a36923e5f2"}, {"problem": 40, "code": "(comp #(drop 1 %) (fn [sep coll] (mapcat (fn [elt] [sep elt]) coll)))", "user": "54cad2d5e4b057c6fda3a26c"}, {"problem": 40, "code": "(fn in [i [x & xs]]\n  (if (empty? xs)\n    (list x)\n    (concat (list x i) (in i xs))))", "user": "54d2892fe4b0e8a36923e5f7"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %)))", "user": "538fe171e4b0b51d73faae92"}, {"problem": 40, "code": "(fn [x y]\n  (butlast (mapcat #(list % x) y)))", "user": "5410cb36e4b01498b1a719b8"}, {"problem": 40, "code": "(fn [s l] \n  (drop-last (reduce concat (map #(list % s) l))))", "user": "54d6f22de4b0a52adc2e2023"}, {"problem": 40, "code": "(fn [n xs] ((comp butlast flatten) (map #(list % n) xs)))", "user": "54d5fbe9e4b0a52adc2e2014"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "53bc10f5e4b047364c04450d"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last (interleave coll (repeat sep))))", "user": "54cc26c1e4b057c6fda3a28a"}, {"problem": 40, "code": "(fn [sep coll] (rest(mapcat #(list sep %) coll)))", "user": "54cc4156e4b057c6fda3a28c"}, {"problem": 40, "code": "(fn [x coll] (butlast (mapcat vector coll (repeat x))))", "user": "541d3c0fe4b01498b1a71a7e"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "54d7ed8de4b0a52adc2e2034"}, {"problem": 40, "code": "#(rest (interleave (iterate identity %1) %2))", "user": "54725331e4b094393f72dd76"}, {"problem": 40, "code": "(fn [a b] (butlast (mapcat #(list % a) b)))", "user": "54d70f40e4b0a52adc2e2027"}, {"problem": 40, "code": "#(drop-last (mapcat (fn [x] (vector x %1)) %2))", "user": "54d352f6e4b0e8a36923e604"}, {"problem": 40, "code": "(fn [sep coll] (butlast (mapcat #(list % sep) coll)))", "user": "54361d92e4b032a45b8692f7"}, {"problem": 40, "code": "(fn _itp\n  ([ch coll]\n       (if (empty? coll)\n        coll\n       (_itp (take 1 coll) ch (rest coll))))\n   ([rst ch coll]\n    (let [item (first coll)]\n      (if (nil? item)\n         (reverse rst)\n        (recur (conj rst ch item) ch (rest coll))))))", "user": "53f31dafe4b0742d9025b0f0"}, {"problem": 40, "code": "(fn [sep coll] \n    (take (- (* (count coll) 2) 1) (apply concat (map (fn [e] (list e sep)) coll)))\n    )", "user": "54cb3497e4b057c6fda3a272"}, {"problem": 40, "code": "(fn   ([v s] (loop [r [] s1 s s2 (repeat v)]\n           (if (or (empty? s1) (empty? s2)) (drop-last r) (recur (conj r (first s1) (first s2)) (rest s1) (rest s2))))))", "user": "54d8cc38e4b0a52adc2e203e"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "54d1cf2ee4b0e8a36923e5eb"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %) %2))", "user": "4ee7d6d8535d93acb0a66870"}, {"problem": 40, "code": "; my solution\n(fn\n  [x xs]\n  (let [middles (drop-last xs)\n        laster (last xs)]\n    (concat (reduce concat [] (map #(list % x) middles)) (list laster))))\n\n; stolen, better solution; rather than drop the last off the initial list and add it back on like I did,\n; concat all of the arbitrary values and drop the last one off the end\n#_(fn [s xs] (drop-last (reduce #(concat %1 [%2 s]) [] xs)))", "user": "54d267e0e4b0e8a36923e5f3"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "user": "54dc0e1ae4b024c67c0cf77a"}, {"problem": 40, "code": "(fn [x y] (drop-last (flatten (map (fn [e1 e2] (list e1 e2))  y (repeat x)))))", "user": "5474666ae4b0c51c1f4d7288"}, {"problem": 40, "code": "(fn foo [x ys]\n  (let [xy (for [y ys] (list x y))]\n    (drop 1 (reduce concat [] xy))))", "user": "54d753ebe4b0a52adc2e2029"}, {"problem": 40, "code": "(fn [x l]\n  (drop-last (apply concat (map #(list % x) l))))", "user": "53664e3be4b0243289761e74"}, {"problem": 40, "code": "#( drop-last (mapcat vector %2 (repeat %1)))", "user": "4e580746535d8a8b8723a28c"}, {"problem": 40, "code": "(fn interpose-seq [inter coll]\n  (if (empty? (rest coll))\n    coll\n    (cons (first coll)\n          (cons inter\n                (interpose-seq inter (rest coll))))))", "user": "4ea8570f535d7eef308072f8"}, {"problem": 40, "code": "#(reduce (fn [xs x] (conj xs %1 x)) (vector (first %2)) (rest %2))", "user": "54d6c80ce4b0a52adc2e2020"}, {"problem": 40, "code": "(fn [d s] (rest (mapcat #(list d %) s)))", "user": "54dd76c8e4b024c67c0cf794"}, {"problem": 40, "code": "#(butlast (mapcat vector %2 (cycle [%])))", "user": "5286a2a9e4b0239c8a67ae1e"}, {"problem": 40, "code": "(fn [x y] (drop-last (flatten (map #(vector % x) y))))", "user": "4ec66e84535d6d7199dd36cd"}, {"problem": 40, "code": "#(-> %2 (interleave (repeat %)) drop-last)", "user": "54ddb556e4b024c67c0cf798"}, {"problem": 40, "code": "(fn[n s](drop-last (mapcat #(vector % n) s)))", "user": "54d4ba98e4b0a52adc2e2004"}, {"problem": 40, "code": "#(reverse (rest (reverse (reduce concat (map (fn [n] (concat (list n) (list %1))) %2)))))", "user": "53ba41c2e4b047364c0444f3"}, {"problem": 40, "code": "(fn [x y] \n  (drop-last (mapcat #(list % x) y)) \n)", "user": "54db33f1e4b024c67c0cf75d"}, {"problem": 40, "code": "#(butlast (reduce (fn [acc elem] (conj acc elem %1)) [] %2))", "user": "504f9ae1e4b0a02f9cffde9c"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "54d4b3a7e4b0a52adc2e2003"}, {"problem": 40, "code": "(fn\n  [sep coll]\n  (drop 1 (interleave (repeat sep) coll)))", "user": "543c5200e4b032a45b86933e"}, {"problem": 40, "code": "(fn my-interpose\n  [sep elems]\n  (if (= 1 (count elems))\n    elems\n    (cons (first elems) (cons sep (my-interpose sep (rest elems))))))", "user": "54e0e911e4b024c67c0cf7bc"}, {"problem": 40, "code": "(fn i [e [x & xs :as c]] (if (empty? xs) c (concat [x e] (i e xs))))", "user": "5066003ee4b0313a384e5647"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "user": "54dae16de4b024c67c0cf758"}, {"problem": 40, "code": "#(drop-last (mapcat list %2 (repeat (count %2) %)))", "user": "54d70bbfe4b0a52adc2e2026"}, {"problem": 40, "code": "(fn [_insert _coll] \n  (butlast (mapcat #(list %1 _insert) _coll) ) \n  )", "user": "5458474ce4b01be26fd7461b"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "54c72b19e4b045293a27f636"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "54c8eb61e4b045293a27f658"}, {"problem": 40, "code": "(fn myinterpose [i s]\n  (if (< (count s) 2) s\n    (concat (list (first s) i) (myinterpose i (rest s)))))", "user": "54e3df6ae4b024c67c0cf7e3"}, {"problem": 40, "code": "(fn [x y] (butlast (mapcat #(list % x) y)))", "user": "549a1fede4b0f3d1d8e70f6a"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "54d104a5e4b0e8a36923e5d9"}, {"problem": 40, "code": "(fn [n c] (butlast (interleave c (repeat n))))", "user": "54b83ae9e4b0ed20f4ff6e95"}, {"problem": 40, "code": "(fn\n            [sep s]\n            (loop [[x & xs] s\n                   seq-so-far (empty s)]\n              (cond\n                (nil? xs) (conj seq-so-far x)\n                :else     (recur xs (conj seq-so-far x sep)))))", "user": "54e79094e4b024c67c0cf818"}, {"problem": 40, "code": "(fn\n    my-interpose\n    [seperator c]\n    (if (= (count c) 1)\n      c\n      (concat [(first c) seperator] (my-interpose seperator (rest c)))))", "user": "54ca130ce4b057c6fda3a250"}, {"problem": 40, "code": "#( (comp drop-last reduce) (fn [acc x] (conj acc x %1) ) [] %2)", "user": "54e51c7be4b024c67c0cf7f7"}, {"problem": 40, "code": ";(fn [c coll] (reduce #(concat % [c %2]) (list (first coll)) (rest coll)))\n(fn [c coll] (rest (reduce #(concat % [c %2]) [] coll)))", "user": "54e3bd3fe4b024c67c0cf7e0"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %) %2))", "user": "4e68c465535d8ccf87e9fe8a"}, {"problem": 40, "code": "(fn _interpose \n  [z col]\n  (reverse (loop [result (empty col) col col]\n    (let [x (first col)]\n    (cond\n      (empty? col) result\n      (= 1 (count col)) (cons x result)\n     :else  (recur (cons z (cons x result)) (rest col))\n     )     \n    )\n  )  \n))", "user": "547b4ec6e4b0c51c1f4d72d5"}, {"problem": 40, "code": "(fn [s xs]\n    (loop [acc [] [x & xs] xs]\n      (cond (nil? x) nil\n            (seq xs) (recur (conj acc x s) xs)\n            :else (seq (conj acc x)))))", "user": "5315ba94e4b08068f379ed34"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %1)))", "user": "54e956d9e4b024c67c0cf831"}, {"problem": 40, "code": "(fn intps [sep coll]\n  (butlast (reduce #(conj %1 %2 sep) [] coll)))", "user": "54df3c94e4b024c67c0cf7aa"}, {"problem": 40, "code": "(fn [v coll]\n  (butlast (flatten (map #(list % v) coll)))\n)", "user": "54e5bdf2e4b024c67c0cf7fe"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "4fc45c07e4b081705acca349"}, {"problem": 40, "code": "(fn foo [delimiter collection]\n  (butlast (flatten (map #(conj (list delimiter) %) collection))))", "user": "52fc181ce4b047fd55837013"}, {"problem": 40, "code": "(fn [del coll] (drop 1 (interleave (repeat del) coll)))", "user": "54b5ce67e4b05787c3b163ac"}, {"problem": 40, "code": "#(rest (mapcat (fn [x] (list %1 x)) %2))", "user": "54e2a779e4b024c67c0cf7d3"}, {"problem": 40, "code": "(fn [x y]\n  (butlast (interleave y (repeat x) )))", "user": "54e345a1e4b024c67c0cf7db"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "54cbde61e4b057c6fda3a284"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "54eb22a0e4b024c67c0cf845"}, {"problem": 40, "code": "(fn [x ys]\n  (rest (mapcat #(vector %1 %2) (repeat x) ys)))", "user": "546a6c7ce4b00cfc9eacc154"}, {"problem": 40, "code": "#(rest (mapcat (fn [x] [%1 x]) %2))", "user": "54df2609e4b024c67c0cf7a9"}, {"problem": 40, "code": "#(vec (drop-last (interleave %2 (repeat (count %2) %1))))", "user": "52ee9ac7e4b05e3f0be25ec9"}, {"problem": 40, "code": "(fn inter-pose [separator coll]\n  (loop [coll coll\n         item? true\n         acc '()]\n    (if (empty? coll)\n      (reverse acc)\n      (if item?\n        (recur (rest coll)\n               false\n               (cons (first coll) acc))\n        (recur coll\n               true\n               (cons separator acc))))))", "user": "53c69ebce4b00fb29b22129c"}, {"problem": 40, "code": "(fn[x y](\n         butlast(flatten(map (fn[z](vector z x)) y))))", "user": "54ecd7dde4b024c67c0cf85c"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "51515a19e4b03e678e393acc"}, {"problem": 40, "code": "#(drop-last (mapcat vector %2 (repeat %1)))", "user": "54eca495e4b024c67c0cf855"}, {"problem": 40, "code": "(fn inter [v s]\n  (if (empty? (rest s))\n    s\n    (concat\n     (list (first s) v)\n     (inter v (rest s)))))", "user": "54c9e00be4b045293a27f683"}, {"problem": 40, "code": "(fn [in coll]\n  (drop-last (reduce #(conj % %2 in) [] coll)))", "user": "54caaa48e4b057c6fda3a267"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %)))", "user": "54da46e5e4b024c67c0cf753"}, {"problem": 40, "code": "(fn intr [c sq]\n  (rest\n  (letfn [(inner [[x & xs]]\n                 (cond (nil? x) ()\n                       :else (cons c (cons x (inner xs)))))]\n    (inner sq))))", "user": "518ba795e4b0f028e99addf0"}, {"problem": 40, "code": "(fn [i s] (drop-last (reduce #(conj %1 %2 i) [] s)))", "user": "54ed7293e4b024c67c0cf863"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "51b91b08e4b0e871ca4958f8"}, {"problem": 40, "code": "(fn [n l](rest (mapcat #(list n %1) l)))", "user": "54edcf96e4b024c67c0cf866"}, {"problem": 40, "code": "(fn my_interpose[x l] (drop-last (interleave l (repeat (count l) x))))", "user": "54e5dc08e4b024c67c0cf800"}, {"problem": 40, "code": "(fn [x xs] (butlast (interleave xs (repeat x))))", "user": "54a6baaee4b09f271ff37c8a"}, {"problem": 40, "code": "#(rest (interleave (repeat (count %2) %1 ) %2) )", "user": "54df7922e4b024c67c0cf7ad"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %) %2))", "user": "53e8e42ce4b036ad0777e48e"}, {"problem": 40, "code": "#(rest (mapcat list (repeat %1) %2))", "user": "54f26266e4b024c67c0cf8c5"}, {"problem": 40, "code": "(fn [del seq]\n    (drop-last 1 (flatten (map vector seq (repeat del)))))", "user": "546ff835e4b00cfc9eacc1b4"}, {"problem": 40, "code": "(fn [v s] (drop 1 (mapcat #(vector v %) s)))", "user": "54f0d3fde4b024c67c0cf8a6"}, {"problem": 40, "code": "#(drop-last (mapcat list %2 (repeat %1)))", "user": "5480cce5e4b0e286459a115f"}, {"problem": 40, "code": "#(->> %1 repeat (interleave %2) butlast)", "user": "504e2d18e4b0f6ff3350c47a"}, {"problem": 40, "code": "(fn [i c] (drop-last (mapcat #(list % i) c)))", "user": "4f598c87e4b0030a34fb2ada"}, {"problem": 40, "code": "#(butlast (apply concat (map vector %2 (repeat (count %2) %1))))", "user": "54f2fe9fe4b050824f58f5b8"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "54e606c3e4b024c67c0cf803"}, {"problem": 40, "code": "(fn interp [x lis]\n  (cond (empty? lis) []\n        (= (count lis) 1) lis\n        :else (cons (first lis) (cons x (interp x (rest lis))))))", "user": "54f4e286e4b0f2f3c5226e8c"}, {"problem": 40, "code": "(fn [sep lst]\n   (flatten (map (fn [item]\n                        (if (= item (last lst))\n                          item\n                          [item sep]))\n                      lst)))", "user": "5498e155e4b0b312c081ff86"}, {"problem": 40, "code": "(fn [sep xs]\n  (butlast (reduce #(conj %1 %2 sep) [] xs)))", "user": "54ecd716e4b024c67c0cf85a"}, {"problem": 40, "code": "(fn interp [elem s2]\n  (loop [result '()\n         e elem\n         cs2 s2]\n    (if (empty? cs2)\n      (butlast result)\n      (recur (concat result (list (first cs2) elem)) elem (rest cs2)))))", "user": "54f64e99e4b0f2f3c5226ea4"}, {"problem": 40, "code": "(fn inter [sep coll0]\n  (loop [coll coll0 result []]\n    (if (seq (rest coll))\n      (recur\n       (rest coll)\n       (conj result (first coll) sep))\n      (conj result (first coll)))))", "user": "54d0cedde4b0e8a36923e5d2"}, {"problem": 40, "code": "(fn [sep xs] (butlast (mapcat #(list %1 sep) xs)))", "user": "54c74a78e4b045293a27f637"}, {"problem": 40, "code": "(fn [sep xs] (butlast (mapcat #(list %1 sep) xs)))", "user": "50a3e2eae4b0ceace084d49a"}, {"problem": 40, "code": "(fn[val seq]\n  (reduce #(concat (if (seq? %1) %1 (list %1)) (list val) (list %2)) seq)\n)", "user": "54b598d6e4b05787c3b163a8"}, {"problem": 40, "code": "#(into [] (drop-last (flatten (map (fn [a] (vector a %1)) %2))))", "user": "536ecd9fe4b0fc7073fd6e76"}, {"problem": 40, "code": "(fn f\n  [s1 s2] (concat (list (first s2) s1) \n                  (if (> (count s2) 2) \n                    (f s1 (rest s2)) \n                    (rest s2))))", "user": "54f77213e4b01ecee9d8881d"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "54f2a1b8e4b024c67c0cf8cb"}, {"problem": 40, "code": "(fn [ip coll]\n  (loop [acc [] c coll]\n    (if (empty? c )\n    (pop  acc)\n      (recur (conj acc (first c) ip) (rest c)))))", "user": "54e1197fe4b024c67c0cf7c0"}, {"problem": 40, "code": "(fn [n vs] (reduce #(\n                       if (= :first %1)\n                         [%2]\n                         (conj %1 n %2)\n                       \n\n                       ) :first vs))", "user": "54ef4a1ee4b024c67c0cf883"}, {"problem": 40, "code": "#(butlast (interleave %2 (iterate identity %1)))", "user": "4f0554aa535dcb61093f6bf5"}, {"problem": 40, "code": "(fn [sep lst]\n  (flatten\n   (reduce (fn [acc el]\n             (conj (conj acc sep) el)) [(first lst)] (rest lst))))", "user": "54eee3a3e4b024c67c0cf879"}, {"problem": 40, "code": "(fn [d s] (rest (interleave (repeat d) s)))", "user": "54f5fb57e4b0f2f3c5226e9f"}, {"problem": 40, "code": "(fn my-interpose [n l]\n  (if (= 1 (count l))\n    l\n  \t(flatten (conj (vector (first l) n) (my-interpose n (rest l))))))", "user": "54f53d3ce4b0f2f3c5226e90"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "539c736ce4b0b51d73faaf2b"}, {"problem": 40, "code": "(fn my-interpose\n  [sep coll]\n  (-> (interleave coll (repeat (count coll) sep))\n      butlast))", "user": "54f39cd6e4b050824f58f5c6"}, {"problem": 40, "code": "(fn [x y] \n   (butlast\n    (mapcat\n      #(conj [%] x)\n      y)))", "user": "54d9366ce4b0a52adc2e204e"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last\n   (mapcat #(conj [] % sep)\n           coll)))", "user": "54d321b3e4b0e8a36923e602"}, {"problem": 40, "code": "(fn me [sep x]\n   (if (> (count x) 1)\n     (cons (first x) (cons sep (me sep (rest x))))\n     x\n     ))", "user": "54eff2bee4b024c67c0cf88d"}, {"problem": 40, "code": "(fn[x y] \n  (drop 1 (\n    reduce #(conj %1 x %2) [] y\n  )))", "user": "54f4a457e4b0f2f3c5226e83"}, {"problem": 40, "code": "(fn [s xs]\n\t(loop [ys xs res []]\n      (if (empty? ys) (butlast res)\n\t\t(recur (rest ys) (conj res (first ys) s))\n     ))\n  )", "user": "54f73502e4b01ecee9d88817"}, {"problem": 40, "code": "(fn [x xs]\n  (butlast\n    (mapcat\n      vector\n      xs\n      (repeat x))))", "user": "521d064fe4b0c4ef0be830a8"}, {"problem": 40, "code": "(fn [v coll]\n  (butlast (reduce #(conj % %2 v) [] coll)))", "user": "54fdbe3fe4b07d26eda61d3b"}, {"problem": 40, "code": ";(fn intp [sep coll]\n;  (lazy-seq\n;   (cons (first coll)\n;         (when (next coll)\n;           (cons sep\n;                 (intp sep (rest coll)))))))\n\n(fn intp [sep coll]\n  (drop-last (interleave coll (repeat sep))))", "user": "534da51fe4b084c2834f4aa4"}, {"problem": 40, "code": "#(loop [a %2\n        x []]\n        (if (= (count a) 0)\n        (pop x)\n        (recur (rest a) (conj x (first a) %1))))", "user": "4f03e60d535dcb61093f6b7a"}, {"problem": 40, "code": "(fn [n xs]\n  (drop-last ((fn interpose1 [xs]\n               (if (empty? xs)\n                 xs\n                 (conj (interpose1 (rest xs)) n (first xs)))) xs)))", "user": "54fd93bbe4b07d26eda61d36"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last\n   (mapcat #(conj [] % sep) coll)))", "user": "54f9d900e4b01ecee9d88844"}, {"problem": 40, "code": "(fn [y z] (drop-last (apply concat (map (fn [x] [x y]) z))))", "user": "54e0a9c3e4b024c67c0cf7b5"}, {"problem": 40, "code": "(fn this\n  ([d s] (this d (next s) [(first s)]))\n  ([d s new_s] \n    (if s\n      (recur d (next s) (conj (conj new_s d) (first s)))\n      new_s)))", "user": "54fdaeace4b07d26eda61d39"}, {"problem": 40, "code": "(fn [x y] (take (- (* 2 (count y)) 1)  (interleave y (repeat x))))", "user": "54ff2968e4b07d26eda61d4a"}, {"problem": 40, "code": "(fn [x y] (rest (mapcat #(list x %) y)))", "user": "54ff2342e4b07d26eda61d49"}, {"problem": 40, "code": "(fn myinterpose [x lst]\n  (butlast (flatten (map (fn [itm] (list itm x)) lst))))", "user": "534f8c9ae4b084c2834f4acd"}, {"problem": 40, "code": "(fn [x s] (drop-last(reduce #(conj %1 %2 x) [] s)))", "user": "54febf4be4b07d26eda61d45"}, {"problem": 40, "code": "(fn[x xs ](butlast (reduce #(conj %1 %2 x)[] xs)))", "user": "54fc7d89e4b07d26eda61d2b"}, {"problem": 40, "code": "(fn [x coll]\n  (butlast (interleave coll (repeat (count coll) x))))", "user": "5280539ce4b0757a1b1713f3"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "550174b5e4b07d26eda61d73"}, {"problem": 40, "code": "(fn f1 [v s]\n  (concat (mapcat list s (repeat (dec (count s)) v)) [(last s)])\n  )", "user": "54ff6084e4b07d26eda61d50"}, {"problem": 40, "code": "(fn [val\n     coll]\n  (loop[val val\n        coll coll\n        res []]\n    (if (= 1 (count coll))\n      (conj res (first coll))\n      (recur val (rest coll) (conj (conj res (first coll)) val )))))", "user": "54b31445e4b09f271ff37d35"}, {"problem": 40, "code": "(fn func [spacer [f & r]]\n  (if (empty? r) [f]\n    (cons f (cons spacer (func spacer r)))))", "user": "54c8ac49e4b045293a27f64e"}, {"problem": 40, "code": "(fn \n  [x y]\n  (vec \n  (cons (first y) \n        ((fn inner [i j] \n          (if (empty? j)\n            []\n            (\n              cons i (cons (first j) (inner i (rest j)))\n            )\n          )\n        ) x (rest y)\n      )\n   ))\n)", "user": "55034bf0e4b086ebe8a79c6d"}, {"problem": 40, "code": "(fn foo [x xs]\n  (if\n    (= 1 (count xs))\n    xs\n    (conj (foo x (pop xs)) x (peek xs))))", "user": "54f904c2e4b01ecee9d88832"}, {"problem": 40, "code": "(fn [n coll] (drop-last (interleave coll (repeat n))))", "user": "54edc818e4b024c67c0cf865"}, {"problem": 40, "code": "(fn [x y]\n  (drop-last (interleave y (repeat (count y) x))))", "user": "534fa9dae4b084c2834f4acf"}, {"problem": 40, "code": "(fn\n  [x1 x2]\n  (loop [i 0 j []]\n    (if (= i (count x2))\n      (butlast j)\n      (recur (inc i) (conj j (nth x2 i) x1)))))", "user": "54bcab07e4b0ed20f4ff6ed5"}, {"problem": 40, "code": "(fn [i s] (reduce (fn [c x] (if (= c []) [x] (conj c i x))) [] s))", "user": "4fa5c8dde4b081705acca1af"}, {"problem": 40, "code": "(fn [n coll]\n  (loop [i 0 ret []]\n    (if (< i (dec (count coll)))\n      (recur (inc i) (conj ret (coll i) n))\n      (conj ret (last coll)))))", "user": "55058a4fe4b086ebe8a79c89"}, {"problem": 40, "code": "(fn [x s]\n      (pop (vec (flatten (map #(cons % (list x)) s)))))", "user": "54b67463e4b05787c3b163bc"}, {"problem": 40, "code": "(fn [n seq] (drop-last (interleave seq ((partial repeat (count seq)) n))))", "user": "54f6f00fe4b01ecee9d88814"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last\n   (mapcat #(conj [] % sep) coll)))", "user": "54eea988e4b024c67c0cf875"}, {"problem": 40, "code": "(fn [sep coll] (drop-last (mapcat #(list % sep) coll)))", "user": "55088bb3e4b06e50f9beb10c"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %) %2))", "user": "5507cfd3e4b021ccfedb96ad"}, {"problem": 40, "code": "(fn [sep [fst & rst]]\n  (reduce #(conj %1 sep %2) [fst] rst))", "user": "550615c0e4b021ccfedb9696"}, {"problem": 40, "code": "(fn myinterpose [field seq]\n   (if (> (count seq) 1)\n     (concat (conj (conj [] (first seq)) field) (myinterpose field (rest seq)))\n     seq)\n   )", "user": "5508102ee4b021ccfedb96b0"}, {"problem": 40, "code": "(fn [x y]\n  (loop [tot '() x x y y]\n    (if (empty? y)\n      (drop-last (reverse tot))\n      (recur (conj tot (first y) x) x (rest y)))))", "user": "54e24a05e4b024c67c0cf7ce"}, {"problem": 40, "code": "(fn [v s] (rest (mapcat (fn [x] [v x]) s)))", "user": "550aeddae4b06e50f9beb135"}, {"problem": 40, "code": "(fn pose [sep inseq]\n    (rest \n        (reduce \n            #(concat %1 [sep] [%2]) [] inseq)))", "user": "54f09599e4b024c67c0cf89d"}, {"problem": 40, "code": "#(pop (vec (interleave %2 (repeat %1))))", "user": "55076bf6e4b021ccfedb96a6"}, {"problem": 40, "code": "#(rest (mapcat (partial list %1) %2))", "user": "5505ceb3e4b086ebe8a79c8b"}, {"problem": 40, "code": "(fn as [sep coll]\n  (rest\n    (mapcat #(conj [] sep %) coll)))", "user": "549674cde4b0b312c081ff66"}, {"problem": 40, "code": "#(butlast (interleave %2 (take (count %2) (repeat %1))))", "user": "5501de12e4b07d26eda61d7b"}, {"problem": 40, "code": "#(vec (drop-last (interleave %2 (repeat %1))))", "user": "550af207e4b06e50f9beb136"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %1)))", "user": "543be8f0e4b032a45b869337"}, {"problem": 40, "code": "(fn sep [s [h & t]] (if t (concat (concat [h] [s]) (sep s t)) [h]))", "user": "550e0373e4b06e50f9beb162"}, {"problem": 40, "code": "(fn[x y](drop-last (flatten (map #(seq [% x]) y))))", "user": "54f15cb8e4b024c67c0cf8b1"}, {"problem": 40, "code": "#(drop-last (mapcat vector %2 (repeat %)))", "user": "550609b3e4b021ccfedb9695"}, {"problem": 40, "code": "(fn ipose [value, a] (\n               map (fn [i] (cond (even? i)\n                                  (nth a (/ i 2))\n                                  :else\n                                  value\n                           )\n                   )     \n               (range (- (* 2 (count a)) 1))\n    )\n                      \n)", "user": "550cbb3be4b06e50f9beb155"}, {"problem": 40, "code": "(fn [e s]\n              (drop-last (interleave s\n                                     (repeat (count s) e))))", "user": "54c3747de4b045293a27f60e"}, {"problem": 40, "code": "(fn f [sep coll]\n  (if (empty? (rest coll))\n    coll\n    (concat [(first coll)] [sep] (f sep (rest coll)))\n   )\n  )", "user": "54d1b6ffe4b0e8a36923e5e6"}, {"problem": 40, "code": "(fn [av s] \n    (->> (for [x s]\n           [x av])\n          flatten\n          butlast))", "user": "550c55d0e4b06e50f9beb14d"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "550fdc1de4b06e50f9beb17d"}, {"problem": 40, "code": "(fn number40 [delim xs]\n  (->> (repeat delim)\n       (interleave xs)\n       (butlast)))", "user": "54074fc5e4b0addc1aec66b6"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "550e8e04e4b06e50f9beb167"}, {"problem": 40, "code": "(fn [sep coll]\n  (reduce #(concat %1 (list sep %2)) (list (first coll)) (rest coll)))", "user": "540a4f20e4b0addc1aec66ef"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5504dd64e4b086ebe8a79c83"}, {"problem": 40, "code": "(fn [op elems]\n  (rest (flatten (for [o [op] e elems] [o e]))))", "user": "53213810e4b09d4e7a9b54b0"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "54cbd97ae4b057c6fda3a283"}, {"problem": 40, "code": "(fn bk-interpose\n  [sep coll]\n  (drop-last (mapcat list coll (repeat (count coll) sep))))", "user": "5426fb8fe4b01498b1a71b1f"}, {"problem": 40, "code": "(fn [sep col]\n  (butlast (interleave col (repeat (count col) sep))))", "user": "55131b1be4b055c2f668d4bf"}, {"problem": 40, "code": "(fn this [c xs]\n       (when-let [n (first xs)]\n         (if (second xs)\n           (cons n (cons c (this c (rest xs))))\n           (cons n (this c (rest xs))))))", "user": "4dbe19fe535d020aff1edf59"}, {"problem": 40, "code": "(fn [x y] (pop (vec (flatten (map (fn [i] (vec [i x])) y)))))", "user": "54f98ee3e4b01ecee9d8883e"}, {"problem": 40, "code": "(fn [inter seq]\n  (loop [acc [(first seq)]\n         seq (rest seq)]\n    (if (= (count seq) 0)\n      acc\n      (recur (conj acc inter (first seq)) (rest seq)))))", "user": "5512aca6e4b055c2f668d4b4"}, {"problem": 40, "code": "(fn poser\n  [a coll]\n  (butlast (mapcat vector coll (repeat a))))", "user": "542725fce4b01498b1a71b22"}, {"problem": 40, "code": "(fn [x y] (drop 1 (interleave (repeat x) y)))", "user": "5510f734e4b06e50f9beb18f"}, {"problem": 40, "code": "#(drop-last (flatten (map (fn [a b] (list b a)) (take (count %2) (iterate identity %)) %2)) )", "user": "532018efe4b08068f379edcd"}, {"problem": 40, "code": "(fn [item coll]\n   (drop 1 (mapcat (partial vector item) coll)))", "user": "5515b138e4b055c2f668d4ed"}, {"problem": 40, "code": "(fn [sep the-list]\n  (let [x (for [y the-list]\n            [y sep])]\n    (butlast (flatten x))))", "user": "55080467e4b021ccfedb96ae"}, {"problem": 40, "code": "(fn [sep coll] \n  (butlast (flatten \n    (map \n     (fn [a b] (conj (list b) (list a))) \n         coll \n         (cycle (list sep))))))", "user": "5514a60fe4b055c2f668d4d7"}, {"problem": 40, "code": "(let [f (fn my-interpose [sep c] \n          (let [coll (seq c)] \n            (when (not-empty coll) \n              (cons sep (cons (first coll) (my-interpose sep (rest coll)))))))] \n  \n  #(drop 1 (f %1 %2))\n  )", "user": "551535cee4b055c2f668d4df"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "55164856e4b06a49daca83b3"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5510aa92e4b06e50f9beb188"}, {"problem": 40, "code": "(fn [sep coll]\n  (loop [rcoll (rest coll) result [(first coll)]]\n    (if (empty? rcoll)\n      result\n      (recur (rest rcoll) (conj result sep (first rcoll))))))", "user": "55151417e4b055c2f668d4da"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last 1 (flatten (reduce (fn [a b] (conj a [b sep])) [] coll)))\n  )", "user": "5510d948e4b06e50f9beb18d"}, {"problem": 40, "code": "(fn blip [v s]\n  (let [m (mapcat #(list % v) s)]\n    (butlast m)))", "user": "55170dd9e4b06a49daca83bd"}, {"problem": 40, "code": "(fn [a xs] (rest (apply concat (for [x xs] [a x]))))", "user": "54d127b7e4b0e8a36923e5de"}, {"problem": 40, "code": "(fn [v coll] \n  (butlast \n    (mapcat #(vector % v) coll)))", "user": "52e087dde4b09f7907dd1412"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5512b15ae4b055c2f668d4b5"}, {"problem": 40, "code": "(fn [s xs]\n   (let [ss (repeat (count xs) s)]\n     (drop-last  (interleave xs ss))))", "user": "51bb08a4e4b0fe3ecfb46446"}, {"problem": 40, "code": "(fn [x s]\n  (butlast (mapcat list s (repeat x))))", "user": "551a64cde4b091ff45eda996"}, {"problem": 40, "code": "(fn [sep x]\n  (loop [sep sep x x acc []]\n    (if (empty? (rest x))\n      (conj acc (first x))\n      (recur sep (rest x) (conj acc (first x) sep)))))", "user": "551a21ece4b091ff45eda993"}, {"problem": 40, "code": "(fn [x y] (butlast (mapcat #(vector % x) y)))", "user": "54e0bb4fe4b024c67c0cf7b8"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %)))", "user": "531c7bdde4b08068f379eda2"}, {"problem": 40, "code": "(fn inter [n l]\n  (if (empty? (rest l)) l\n    (cons (first l) \n          (cons n \n                (inter n (rest l))))))", "user": "53504a7de4b084c2834f4ad9"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "514f0a28e4b019235f6c059a"}, {"problem": 40, "code": "(fn [sep seqn] (pop (vec (mapcat #(vector % sep) seqn))))", "user": "5519c157e4b00ace28fe6e32"}, {"problem": 40, "code": "(fn [x s] (drop-last (mapcat #(list % x) s)))", "user": "550ff2a3e4b06e50f9beb17f"}, {"problem": 40, "code": "(fn my-interpose [x l]\n  (if (= (count l) 1)\n    (list (first l))\n    (cons (first l) (cons x (my-interpose x (rest l))))))", "user": "551c6bcee4b07993ea3788df"}, {"problem": 40, "code": "#(into [] (rest (interleave (repeat %1) %2)))", "user": "546db2fbe4b00cfc9eacc190"}, {"problem": 40, "code": "(fn[x y] (rest (reduce #(conj %1 x %2) [] y)))", "user": "551c66dae4b07993ea3788de"}, {"problem": 40, "code": "#(loop [input (next %2)\n        res [(first %2)]]\n   (if input\n     (recur (next input) (conj res %1 (first input)))\n     res))", "user": "503f923fe4b00d1a725ff2ad"}, {"problem": 40, "code": "(fn [sep seq]\n  (loop [remaining seq\n         output []]\n    (if (= 1 (count remaining))\n      (conj output (first remaining))\n      (recur (rest remaining) (conj output (first remaining) sep)))))", "user": "55183a11e4b06a49daca83ca"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %) %2))", "user": "54126d0ce4b01498b1a719d5"}, {"problem": 40, "code": "#(conj (reduce (fn [a b] (conj a b %)) [] (butlast %2))\n       (last %2))", "user": "551ed214e4b08d5046aa8a4d"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "4e443201535dc968683fc4a7"}, {"problem": 40, "code": "(fn intps\n  [i l]\n  (loop [l l out []]\n    (if (empty? l) (butlast out)\n      (recur (rest l) (concat out [(first l) i])))))", "user": "551afdf8e4b07993ea3788cb"}, {"problem": 40, "code": "(fn my-interpose[x xs]\n  (butlast (mapcat (fn[v] [v x]) xs)))", "user": "4dd76bf9535d2dad7130b5d1"}, {"problem": 40, "code": "(fn [s xs]\n  (rest (mapcat list (repeat s) xs)))", "user": "551ecb76e4b08d5046aa8a4c"}, {"problem": 40, "code": "(fn [delimiter coll]\n  (flatten (concat (map (fn [el] (list el delimiter)) (butlast coll)) [(last coll)])))", "user": "5515c8b1e4b055c2f668d4f2"}, {"problem": 40, "code": "(fn [a xs]\n  (list* (first xs) \n         (interleave (repeat a) (rest xs))))", "user": "551ee974e4b08d5046aa8a50"}, {"problem": 40, "code": "(fn [ch coll]\n   ( cons (first coll) (mapcat #(vector ch %) (rest coll)))\n   )", "user": "5156e767e4b04360f2428e6b"}, {"problem": 40, "code": "(fn my-interpose\n  ([x y] (my-interpose x y []))\n  ([x y z] \n   (if-not (nil? y)\n     (my-interpose x (next y) (conj z (first y) x))\n     (butlast z))))", "user": "551c594de4b07993ea3788dc"}, {"problem": 40, "code": "(fn [x y] (butlast (interleave y (take (count y) (repeat x)))))", "user": "5517f5c5e4b06a49daca83c7"}, {"problem": 40, "code": "(fn inter [num col] \n   (if (= (count col) 1) \n     col \n     (concat [(first col) num] (inter num (next col)))))", "user": "55204412e4b08d5046aa8a5f"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5520974be4b08d5046aa8a63"}, {"problem": 40, "code": "(fn [v coll] (drop-last (mapcat #(list % v) coll)))", "user": "52b36925e4b0c58976d9ad0b"}, {"problem": 40, "code": "(fn [x y] (butlast (interleave y (take (count y) (cycle [x])))))", "user": "55205564e4b08d5046aa8a60"}, {"problem": 40, "code": "(fn foo [val coll]\n     (let [head (first coll) tail (rest coll)]\n       (cond\n         (empty? coll) coll\n         (empty? tail) (list head)\n         :else (conj (foo val tail) val head))))", "user": "5509bec5e4b06e50f9beb121"}, {"problem": 40, "code": "(fn [v coll]\n  (let [vcoll (repeat (- (count coll) 1) v)\n        inter-coll (vec (interleave coll vcoll))]\n    (conj inter-coll (last coll))))", "user": "54ab1b5ae4b09f271ff37cc2"}, {"problem": 40, "code": "#(drop-last (flatten (for [x %2] [x %1]) ) )", "user": "514504c2e4b021a5ff8301fc"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "55201d18e4b08d5046aa8a5d"}, {"problem": 40, "code": "(fn mInterpose2 [stuff source]\n  (drop-last\n    (mapcat #(conj [] % stuff) source)))", "user": "50c6052ce4b0c9dc10d15c56"}, {"problem": 40, "code": "(fn [x coll] (conj (vec (mapcat #(vector % x) (butlast coll))) (last coll)))", "user": "552356fae4b0882d96d091af"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "4db2eac3535df7e46ed9b6c8"}, {"problem": 40, "code": "(fn [x xs]\n  (butlast (mapcat #(vector % x) xs)))", "user": "5515f96ce4b055c2f668d4f7"}, {"problem": 40, "code": "(fn [sep xs] \n  (butlast (interleave xs (repeat sep))))", "user": "5522cd9ae4b0882d96d091ab"}, {"problem": 40, "code": "#(reduce \n  (fn [x y] \n    (if (empty? x)\n      (concat x [y])\n      (concat x [% y])))\n  '() %2)", "user": "55092319e4b06e50f9beb113"}, {"problem": 40, "code": "(fn [x l] (drop-last (reduce #(conj %1 %2 x) [] l)))", "user": "54e84d1ee4b024c67c0cf822"}, {"problem": 40, "code": "#(rest (flatten (map (fn [x y] (conj (list x) (list y))) %2 (repeat (count %2) %1))))", "user": "552456e3e4b0882d96d091c2"}, {"problem": 40, "code": "(fn [n coll]\n           (drop 1 (interleave (repeat n) coll)))", "user": "533c2605e4b0e30313ee6cd7"}, {"problem": 40, "code": "(fn ip [x coll]\n  (butlast (flatten (map #(vector % x) coll))))", "user": "53fcd574e4b0de5c418485d9"}, {"problem": 40, "code": "(fn [v s] (butlast (interleave s (repeat (count s) v))))", "user": "55253217e4b0882d96d091ce"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "55218bf0e4b0882d96d09196"}, {"problem": 40, "code": "(fn [n x]\n  (into [] (reverse (rest (reverse (flatten (map #(cons % (list n)) x))))))\n)", "user": "55252392e4b0882d96d091cc"}, {"problem": 40, "code": "(fn f [a b] (if (empty? (rest b)) b (cons (first b) (cons a (f a (rest b))))))", "user": "55280930e4b0ffed3738f93b"}, {"problem": 40, "code": "(fn [ch ls] (rest (flatten (concat(map #(list ch %) ls)))))", "user": "528b3f5ae4b0239c8a67ae93"}, {"problem": 40, "code": "(fn [impostor ary] (drop-last (apply concat (map #(list % impostor) ary))))", "user": "54a8fdcee4b09f271ff37ca9"}, {"problem": 40, "code": "#(drop-last 1 (mapcat (fn [v] [v %1]) %2))", "user": "5484fab9e4b0e286459a11a6"}, {"problem": 40, "code": "(fn [number coll] (reduce #(conj %1 number %2) [(first coll)] (rest coll)))", "user": "54e4edcae4b024c67c0cf7f3"}, {"problem": 40, "code": "(fn [e coll]\n  (drop-last (mapcat (fn [e1] [e1 e]) coll)))", "user": "551747e0e4b06a49daca83c1"}, {"problem": 40, "code": "#(next (mapcat list (repeat %) %2))", "user": "505106fee4b05ab4c7e07d38"}, {"problem": 40, "code": "(fn [sep lst] (rest (mapcat list (repeat sep) lst)))", "user": "551589cee4b055c2f668d4e9"}, {"problem": 40, "code": "(fn [x s] \n  (rest (mapcat #(vector x %1) s) ))", "user": "55253799e4b0882d96d091cf"}, {"problem": 40, "code": "#(conj (mapcat (fn [x] (list %1 x)) (rest %2)) (first %2))", "user": "55249f64e4b0882d96d091c6"}, {"problem": 40, "code": "(fn [a coll]  (butlast (mapcat #(vector % a) coll)))", "user": "55240916e4b0882d96d091b6"}, {"problem": 40, "code": "(fn intertwine [sep coll]\n  (drop-last\n   (mapcat #(conj [] % sep) coll)))", "user": "552689cfe4b0ffed3738f91e"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "55249337e4b0882d96d091c3"}, {"problem": 40, "code": "(fn [v xs]\n  (reduce #(if (= %2 (last xs))\n             (conj %1 %2)\n             (conj %1 %2 v)) [] xs))", "user": "51071f2ee4b05b2b4eee748e"}, {"problem": 40, "code": "(fn myInterpose [x s]\n  (rest (reduce #(conj (conj %1 x) %2) [] s)))", "user": "552d487ee4b076ab5578f7e4"}, {"problem": 40, "code": "#(take (dec (* 2 (count %2))) (mapcat list %2 (repeat (count %2) %1)))", "user": "552bc0f5e4b0ffed3738f968"}, {"problem": 40, "code": "(fn [i s]\n   (drop-last 1 (flatten (map vector s (repeat i)))))", "user": "5492164ee4b0b312c081ff3e"}, {"problem": 40, "code": "(fn [s xs]\n    (drop 1 ((fn me [xs]\n              (when (not (empty? xs))\n                (cons s (cons (first xs) (lazy-seq (me (rest xs))))))) xs)))", "user": "5524120fe4b0882d96d091b7"}, {"problem": 40, "code": "(fn interp [e coll]\n  (if-let [f (first coll)]\n    (if-let [coll (next coll)]\n      (concat [f e] (interp e coll))\n      [f])))", "user": "54f4adc8e4b0f2f3c5226e86"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %1)))", "user": "5152bc4ee4b001f44f99bfef"}, {"problem": 40, "code": ";(fn selip\n;  [selipan [x & xs]]\n;  (if (empty? xs) [x]\n;    (concat [x selipan] (selip selipan xs))))\n\n(fn [n coll] (rest (mapcat #(conj [n] %) coll)))", "user": "550d9452e4b06e50f9beb15d"}, {"problem": 40, "code": "(fn [it ss]\n         (butlast (mapcat (fn [x] [x it]) ss))\n         )", "user": "552d9013e4b076ab5578f7ea"}, {"problem": 40, "code": "(fn [sep xs] (reduce #(conj % sep %2) [(first xs)] (rest xs)))", "user": "55297a7ae4b0ffed3738f94b"}, {"problem": 40, "code": "(fn interpose' [sep xs] (if (empty? xs) xs (cons (first xs) (if (empty? (rest xs)) (rest xs) (cons sep (interpose' sep (rest xs)))))))", "user": "55041b5ee4b086ebe8a79c78"}, {"problem": 40, "code": "(fn [i c]\n  (loop [c c\n         out (vector)]\n    (if (empty? c)\n      out\n      (if (empty? out)\n      \t(recur (rest c) (conj out (first c)))\n      \t(recur (rest c) (conj out i (first c)))))))", "user": "5530b827e4b076ab5578f818"}, {"problem": 40, "code": "(fn [sep xs] (rest (mapcat #(list sep %) xs)))", "user": "5531e445e4b09218d5f44f76"}, {"problem": 40, "code": "(fn [sep coll] (drop-last (mapcat #(conj [] % sep) coll)))", "user": "5533da20e4b09218d5f44f92"}, {"problem": 40, "code": "#(drop 1 (mapcat list (repeat %) %2))", "user": "54db3d82e4b024c67c0cf75f"}, {"problem": 40, "code": "(fn [val seq] (reduce (fn [seq1 item] (if (empty? seq1) (conj seq1 item) (conj seq1 val item))) [] seq))", "user": "553024c3e4b076ab5578f80d"}, {"problem": 40, "code": "(fn [e l] (butlast (flatten (map #(list % e) l ))))", "user": "552e1c98e4b076ab5578f7ee"}, {"problem": 40, "code": "(fn [delim seq]\n  (loop [index 0 final-seq []]\n    (if (> (+ index 2) (count seq))\n      (conj final-seq (get seq index))\n      (recur (inc index) (conj final-seq (get seq index) delim)))))", "user": "53c92d05e4b00fb29b2212b9"}, {"problem": 40, "code": "(fn [x coll] (drop 1 (interleave (repeat x) coll)))", "user": "4df247b8535d08e6dec9fe25"}, {"problem": 40, "code": "(fn [n coll] (rest (flatten (map #(conj '() % n) coll))))", "user": "552b265ee4b0ffed3738f95e"}, {"problem": 40, "code": "#((comp rest (partial mapcat (partial list %1))) %2)", "user": "5535e9b8e4b09218d5f44fb3"}, {"problem": 40, "code": "(fn [sep xs]\n  (reverse\n   (loop [[x & xs] xs\n          acc '()]\n     (if (empty? xs)\n       (conj acc x)\n       (recur xs (conj acc x sep))))))", "user": "553698fae4b09218d5f44fc0"}, {"problem": 40, "code": "(fn [sp xs]\n  (reduce (fn [rs x] (conj (conj rs sp) x)) [(first xs)] (rest xs)))", "user": "55316b8ae4b076ab5578f825"}, {"problem": 40, "code": "(fn [e lst] \n  (loop [e e l lst r []]\n    (let [fe (first l)\n          lr (rest l)\n          tr (conj r fe)]\n    (if (empty? lr)\n      tr\n    (recur e lr (conj tr e))))))", "user": "5448616be4b032a45b8693c9"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %1)))", "user": "550fd845e4b06e50f9beb17c"}, {"problem": 40, "code": "#(apply concat (take 1 %2) (map list (repeat %) (rest %2)))", "user": "55377460e4b09218d5f44fc9"}, {"problem": 40, "code": "(fn [num col] (rest (interleave (repeat num) col)))", "user": "5414dccbe4b01498b1a719f1"}, {"problem": 40, "code": "#(take (- (* 2 (count %2)) 1) (apply concat (map list %2 (repeat %1))))", "user": "550e52dbe4b06e50f9beb165"}, {"problem": 40, "code": "#(rest (interleave (repeat (count %2) %1 ) %2))", "user": "54c46381e4b045293a27f61a"}, {"problem": 40, "code": "(fn [tween xs] (let [hmm (fn hmm [sep xs acc] (if (seq xs) (let [[x & etc] xs, acc' (if (seq etc) (conj acc x sep) (conj acc x))] (recur sep etc acc')) acc))] (hmm tween xs [])))", "user": "53684a2fe4b0243289761e8c"}, {"problem": 40, "code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "user": "51e4b812e4b0efabf93c02bc"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "552694e7e4b0ffed3738f920"}, {"problem": 40, "code": "(fn [sep, coll] (drop-last (mapcat list coll (repeat sep))))", "user": "533b1611e4b0e30313ee6cc6"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "553a43cae4b09218d5f44ff2"}, {"problem": 40, "code": "(fn [i s]\n  (reverse (rest (reverse (apply concat (map #(list %1 %2) s (repeat (count s) i)))))))", "user": "5535d34be4b09218d5f44fb0"}, {"problem": 40, "code": "(fn [x xs]\n  (loop [res [] xsrem xs]\n    (if (empty? xsrem)\n      (drop-last res)\n      (recur (conj res (first xsrem) x) (rest xsrem)))))", "user": "553b87abe4b09218d5f45003"}, {"problem": 40, "code": "(fn [sep xs]\n  (drop-last (mapcat #(list % sep) xs)))", "user": "553abb28e4b09218d5f44ffb"}, {"problem": 40, "code": "(fn w [v l] (if (= 1 (count l)) l (conj (w v (rest l)) v (first l))))", "user": "553c05b7e4b09218d5f45011"}, {"problem": 40, "code": "(fn [x [h & arr]] (reduce #(concat %1 [x %2]) [h] arr) )", "user": "553b8fdbe4b09218d5f45004"}, {"problem": 40, "code": "(fn [a b]\n   (rest (mapcat #(vector a %1) b)))", "user": "550b5c10e4b06e50f9beb143"}, {"problem": 40, "code": "(fn [e xs]\n  (let [fst (first xs)\n        xs  (rest xs)]\n    (cons fst\n          (apply concat (map #(list e %) xs)))))", "user": "553dd883e4b0a04f792994e6"}, {"problem": 40, "code": "(fn ! [sep coll]\n  (if-let [[first & rest] coll]\n    (if (empty? rest)\n    [first]\n    (lazy-cat [first sep] (! sep rest))\n   )))", "user": "553d51c3e4b0a04f792994df"}, {"problem": 40, "code": "(fn [x y] (cons (first y) (mapcat #(list x %) (rest y))))", "user": "553e0b70e4b0a04f792994e8"}, {"problem": 40, "code": "(fn [sep coll]\n   (rest (interleave (repeat sep) coll)))", "user": "520d3129e4b0b022ef140ca5"}, {"problem": 40, "code": "(fn [x v] (drop 1 (mapcat list (repeat x) v)))", "user": "5531f8e7e4b09218d5f44f79"}, {"problem": 40, "code": "(fn f [y [x & xs]] (if (seq xs) (concat [x y] (f y xs)) [x]))", "user": "54e540c1e4b024c67c0cf7f9"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5540cc0ce4b0a04f79299505"}, {"problem": 40, "code": "(fn [token li] (butlast (mapcat #(vector % token) li)))", "user": "553478dce4b09218d5f44f9d"}, {"problem": 40, "code": "(fn [v s]\n    (->>\n      (map #(vector % v) s )\n      (flatten)\n      (butlast)))", "user": "5141a8f2e4b02fd87f5064c1"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "54f86b8ce4b01ecee9d88828"}, {"problem": 40, "code": "(fn [p s] (rest (mapcat #(vector p %1) s)))", "user": "548d6b75e4b0e286459a1216"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "55337e61e4b09218d5f44f8e"}, {"problem": 40, "code": "(fn [d xs] (butlast (mapcat #(list % d) xs)))", "user": "54c944b1e4b045293a27f666"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "4faf97d8e4b081705acca258"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "54eee38ce4b024c67c0cf878"}, {"problem": 40, "code": "(fn [j xs] (butlast (mapcat vector xs (repeat j))))", "user": "55274467e4b0ffed3738f92b"}, {"problem": 40, "code": "(fn [sep coll]\n  (butlast (reduce (fn [acc a] (conj acc a sep)) [] coll)))", "user": "55074092e4b021ccfedb96a4"}, {"problem": 40, "code": "(fn [x xs] (rest (apply concat (map list (repeat x) xs))))", "user": "55381162e4b09218d5f44fda"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "52bc0dade4b07a9af57922f1"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "550f1c99e4b06e50f9beb171"}, {"problem": 40, "code": "(fn [v s] (concat (interleave s (repeat (dec (count s)) v)) (vector (last s)))       )", "user": "54c779bee4b045293a27f63b"}, {"problem": 40, "code": "(fn inter [x xs]\n  (drop-last (mapcat #(conj [%] x) xs)))", "user": "5512cd55e4b055c2f668d4ba"}, {"problem": 40, "code": "(fn [sep xs] (rest (mapcat list (repeat sep) xs)))", "user": "52e851bfe4b09f7907dd149a"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "543366dde4b0b6b47310fcdf"}, {"problem": 40, "code": "(fn [v coll] (rest (flatten (for [c coll] (cons v (cons c nil))))))", "user": "553fe819e4b0a04f792994fc"}, {"problem": 40, "code": "#(rest (mapcat list (repeat %1) %2))", "user": "5532a04ee4b09218d5f44f82"}, {"problem": 40, "code": "(fn my-interpose [sep coll]\n  (loop [out '()\n         in coll]\n    (cond\n      (empty? out) (recur (conj out (first in)) (rest in))\n      (empty? in) out\n      :else (recur (concat out (list sep) (list (first in))) (rest in)))))", "user": "551d5cb9e4b07993ea3788e9"}, {"problem": 40, "code": "(fn [x xs] (butlast (mapcat #(vector % x) xs)))", "user": "5283a919e4b0239c8a67adbe"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5535e822e4b09218d5f44fb2"}, {"problem": 40, "code": "(fn [separator coll]\n  (reduce\n   #(conj %1 separator %2)\n   [(first coll)]\n   (rest coll)))", "user": "54980edae4b0b312c081ff79"}, {"problem": 40, "code": "(fn [s c]\n  (loop [r (rest c) result (conj [] (first c))]\n    (let [f (first r)]\n      (if f\n        (recur (rest r) (conj result s f))\n        result))))", "user": "5546704be4b0a04f7929953d"}, {"problem": 40, "code": "#(rest(interleave (repeat %1) %2))", "user": "552800d7e4b0ffed3738f93a"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat (count %2) %1)))", "user": "55495318e4b0a04f79299566"}, {"problem": 40, "code": "(fn [sep col]\n  (let [res-len (- (* 2 (count col)) 1)]\n  \t(take res-len (interleave col (repeat sep)))))", "user": "54f14aa6e4b024c67c0cf8af"}, {"problem": 40, "code": "#(reduce (fn [a b] (conj (if (coll? a) a [a]) % b)) %2)", "user": "554680cbe4b0a04f7929953e"}, {"problem": 40, "code": "(fn [x xs] (butlast (interleave xs (repeat x))))", "user": "4fcf1755e4b03432b189f40c"}, {"problem": 40, "code": "(fn [interp seq]\n  (loop [seq seq accum []]\n    (cond (empty? seq) []\n          (= 1 (count seq)) (concat accum [(first seq)])\n          :else (recur (rest seq) (concat accum (list (first seq) interp) )))))", "user": "554dff83e4b00713264bd98d"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat (count %2) %1)))", "user": "553fa883e4b0a04f792994f9"}, {"problem": 40, "code": "(letfn [(f [acc i xs]\n           (if (empty? xs) acc\n             (if (empty? acc)\n               (recur (conj acc (first xs)) i (rest xs))\n               (recur (conj acc i (first xs)) i (rest xs)))))]\n  (partial f []))", "user": "554b9c3ee4b0a04f79299594"}, {"problem": 40, "code": "(fn [deli seq] (reduce #(conj %1 deli %2) [(first seq)] (rest seq)))", "user": "554b7056e4b0a04f79299583"}, {"problem": 40, "code": "(fn my-interpose [thing se]\n  (cons (first se)\n        (when (seq (rest se))\n          (cons thing\n                (lazy-seq (my-interpose thing (rest se)))))))", "user": "554d386ee4b0a04f792995b8"}, {"problem": 40, "code": "(fn my-interpose [it ls]\n  (vec (rest (mapcat (partial conj `[~it])\n                 ls))))", "user": "554bc026e4b0a04f79299597"}, {"problem": 40, "code": "(fn intrps\n\t[x y]\n\t(if (empty? y)\n\t\t[]\n\t\t(if (empty? (rest y))\n\t\t\t[(first y)]\n\t\t\t(concat [(first y) x] \n\t\t\t\t(intrps x (rest y))\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)", "user": "5545477fe4b0a04f79299531"}, {"problem": 40, "code": "(fn my-interp [a coll]\n  (if (empty? (rest coll))\n    coll\n    (cons (first coll)\n          (cons a (my-interp a (rest coll))))))", "user": "5523fce8e4b0882d96d091b4"}, {"problem": 40, "code": "(fn [inter cont] ( rest ( mapcat #(list inter %) cont)))", "user": "555093b2e4b00713264bd9ab"}, {"problem": 40, "code": "(fn x [i a & [n]]  (if (empty? a) (butlast n) (x i (rest a) (into (or n []) [(first a) i]))))", "user": "5540fe42e4b0a04f7929950a"}, {"problem": 40, "code": "(fn [item coll]\n  (rest (apply concat (map (fn [el] [item el]) coll))))", "user": "5486e317e4b0e286459a11c0"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %)))", "user": "53571732e4b04ce2eb3ed275"}, {"problem": 40, "code": "(fn join [a b]\n    (if (= (count b) 1)\n      b\n      (concat (list (first b) a) (join a (rest b)))))", "user": "5195fadee4b04c0af7ff3c11"}, {"problem": 40, "code": "(fn [seed col] (pop (reduce #(conj %1 %2 seed) [] col)))", "user": "547c2c6ce4b0c51c1f4d72e3"}, {"problem": 40, "code": "#(rest (mapcat (partial list %) %2))", "user": "554b8572e4b0a04f79299589"}, {"problem": 40, "code": "#(drop-last (flatten (map (fn [x] [x %1]) %2)))", "user": "55534e3be4b0deb715856e01"}, {"problem": 40, "code": "(fn [x s] (drop-last (mapcat #(list % x) s)))", "user": "554ba1d3e4b0a04f79299595"}, {"problem": 40, "code": "(fn [a b]\n(drop-last (flatten  (map #(list % a) b)))\n   )", "user": "554b2151e4b0a04f79299580"}, {"problem": 40, "code": "(fn my-interpose [sep c]\n  (if (empty? (rest c))\n    (list (first c))\n    (concat (cons (first c) (list sep))\n            (my-interpose sep (rest c)))))", "user": "554d48d3e4b00713264bd988"}, {"problem": 40, "code": "(fn [seperator seq]\n  (drop 1 (apply concat (map (fn [x y] (list x y))\n                             (repeat seperator) seq))))", "user": "5553b924e4b0deb715856e06"}, {"problem": 40, "code": "(fn [v s]\n  (butlast (interleave s (repeat v))))", "user": "554edb85e4b00713264bd99a"}, {"problem": 40, "code": "(fn [c x]\n  (loop [res [(first x)] x1 (rest x)]\n    (if (empty? x1 ) res\n      (recur (concat res [c (first x1)]) (rest x1)))))", "user": "55486ee6e4b0a04f7929955a"}, {"problem": 40, "code": "(fn [i s]\n  (pop (vec (interleave s (repeat (count s) i)))))", "user": "552d2e4fe4b076ab5578f7e1"}, {"problem": 40, "code": "(fn [x coll] (drop-last (interleave coll (repeat x))))", "user": "5547bcf2e4b0a04f79299551"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "52ce1abfe4b07d0d72b27389"}, {"problem": 40, "code": ";;(fn my-interpose[result x in-seq]\n;;  (if (empty? (rest in-seq))\n;;    (conj result (first in-seq))\n;;    (my-interpose (conj result (first in-seq) x) x (rest in-seq))))\n;;\n;;(vector)\n\n(fn[x y]\n  (rest\n   (reduce #(conj %1 x %2) [] y)))", "user": "55429859e4b0a04f7929951f"}, {"problem": 40, "code": "#(-> (mapcat (partial conj (list %1)) %2) reverse rest reverse)", "user": "5280a1ece4b0757a1b171407"}, {"problem": 40, "code": "(fn [sep xs] (->> (interleave xs (repeat sep)) butlast))", "user": "5545eebee4b0a04f79299539"}, {"problem": 40, "code": "(fn [val s]\n    (cons (first s)\n          (mapcat #(list val %)\n                  (rest s))))", "user": "5549ff9ae4b0a04f7929956e"}, {"problem": 40, "code": "; (fn [s xs] (drop-last (mapcat #(list % s) xs)))\n;my favorite\n#(butlast (interleave %2 (repeat %1)))", "user": "554bced1e4b0a04f79299599"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "555521a5e4b0deb715856e12"}, {"problem": 40, "code": "(fn [z coll]\n  (butlast (mapcat list coll (repeat z)))\n  )", "user": "554c0adde4b0a04f7929959e"}, {"problem": 40, "code": "#(butlast(interleave %2 (repeat %1)))", "user": "55536a8ae4b0deb715856e03"}, {"problem": 40, "code": "#((fn rec \n     [coll sep  res] \n     (if (= 1 (count coll)) \n       (concat  res [(first coll)]) \n       (rec (rest coll) sep (concat  res [(first coll) sep]))))\n   %2 %1 [])", "user": "5550bcece4b00713264bd9ae"}, {"problem": 40, "code": "(fn [e s]\n  (loop [s s a '()]\n    (if (empty? s)\n      a\n      (recur (rest s)\n             (concat \n              a\n              (seq (list (first s)))\n              (if (not (empty? (rest s)))\n                (seq (list e))))))))", "user": "54cad59ee4b057c6fda3a26e"}, {"problem": 40, "code": "(fn [separator collection] (drop-last (mapcat vector collection (repeat separator))))", "user": "5545f713e4b0a04f7929953a"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %) %2))", "user": "5552b617e4b0deb715856df8"}, {"problem": 40, "code": "(fn [x l] (->> (mapcat #(list % x) l) butlast))", "user": "54857657e4b0e286459a11ac"}, {"problem": 40, "code": "(fn [x xs]\n  (loop [in xs out []]\n    (if (= 1 (count in))\n      (conj out (first in))\n      (recur (rest in) (conj out (first in) x)) ))\n  )", "user": "55150524e4b055c2f668d4d9"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "55568a7de4b0deb715856e1c"}, {"problem": 40, "code": "#(butlast (mapcat vector %2 (repeat %1)))", "user": "555ac933e4b0deb715856e49"}, {"problem": 40, "code": "(fn [v x] (reduce (fn [a b]\n                    (if (empty? a)\n                      [b]\n                      (conj a v b)\n                    )) [] x))", "user": "554b425ce4b0a04f79299581"}, {"problem": 40, "code": "(fn [sep s]\n  (butlast (flatten (map #(reverse (conj % sep)) (partition-all 1 s)))))", "user": "5169b23fe4b03f62cda68cee"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "54026d7de4b0df28a13c62cf"}, {"problem": 40, "code": "(fn [sep seq]\r\n  (concat\r\n    (list (first seq))\r\n    (apply concat (map #(list sep %) (rest seq)))))", "user": "555bd27ae4b0b056612e2244"}, {"problem": 40, "code": "(fn [sep xs] (drop-last (mapcat #(list % sep) xs)))", "user": "555f3bfde4b0a2eb076a39c1"}, {"problem": 40, "code": "(fn [separator theCollection] (butlast (mapcat #(list % separator) theCollection)))", "user": "554bc64ae4b0a04f79299598"}, {"problem": 40, "code": "(fn [i s] (drop 1 (interleave (repeat i) s)))", "user": "555a5731e4b0deb715856e44"}, {"problem": 40, "code": "(fn\n  [x xs]\n  (drop-last (flatten (map list xs (repeat (count xs) x) )))\n  )", "user": "550001d0e4b07d26eda61d57"}, {"problem": 40, "code": "(fn [x coll] (loop [y (next coll), z [(first coll)]] (if y (recur (next y) (conj z x (first y))) z)))", "user": "54e1939ce4b024c67c0cf7c5"}, {"problem": 40, "code": "(fn [v [h & s]]\n  (reduce #(conj (conj %1 v) %2) [h] s))", "user": "556159fae4b0c656e3ff17c7"}, {"problem": 40, "code": "#(if (= 3 (count %2)) \n    (vector (first %2) % (second %2) % (second (next %2))) \n    (vector (first %2) % (second %2) % (second (next %2)) % (second (nnext %2))))", "user": "55484800e4b0a04f79299558"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %1)))", "user": "53f5666ee4b0db01ade6f9cf"}, {"problem": 40, "code": "(fn [val coll]\n  (drop 1 (interleave (repeat val) coll)))", "user": "4fc04d75e4b081705acca324"}, {"problem": 40, "code": "(fn [s coll]\n  (drop-last (mapcat #(list % s) coll)))", "user": "55586905e4b0deb715856e2b"}, {"problem": 40, "code": "(fn [s a] (rest (reduce #(conj %1 s %2) [] a)))", "user": "55645592e4b0c656e3ff1802"}, {"problem": 40, "code": "(fn\n  [sep arr]\n  (\n    (fn\n      [res arr]\n      (if (empty? arr)\n        res\n        (recur\n          (conj\n            res\n            sep\n            (first arr))\n          (rest arr))))\n    [(first arr)]\n    (rest arr)))", "user": "555f4bade4b0a2eb076a39c2"}, {"problem": 40, "code": "(fn[i coll] (drop-last (interleave coll (repeat i))))", "user": "55631739e4b0c656e3ff17e2"}, {"problem": 40, "code": "(fn [joiner l] \n  (->>\n    (interleave l (repeat joiner))\n    (drop-last)\n   )\n  )", "user": "4e28ddd1535deb9a81d77efd"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %)) reverse next reverse)", "user": "5563ff8ae4b0c656e3ff17fa"}, {"problem": 40, "code": "(fn my-interpose [sep s]\n  (loop [result [(first s)] s (rest s)]\n    (if (empty? s)\n      (seq result)\n      (recur (conj (conj result sep) (first s)) (rest s)))))", "user": "556405e5e4b0c656e3ff17fb"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %)))", "user": "552a793ee4b0ffed3738f955"}, {"problem": 40, "code": "#(cons (first %2)\n  ((fn inter [l]\n     (if (empty? l)\n       '()\n       (cons %1\n             (cons (first l)\n                   (inter (rest l))))))\n   (rest %2)))", "user": "55670a05e4b0c656e3ff1838"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "user": "55663e9be4b0c656e3ff182b"}, {"problem": 40, "code": "(fn [n l] (take (dec (* 2 (count l))) (interleave l (repeat n))))", "user": "54f8b6f4e4b01ecee9d8882c"}, {"problem": 40, "code": "(fn [e xs]\n  (let [init (butlast xs)\n        tail (last xs)]\n    (conj (reduce #(conj %1 %2 e) [] init) tail)))", "user": "5565f616e4b0c656e3ff1823"}, {"problem": 40, "code": "(fn [e coll]\n    (concat [(first coll)]\n            (mapcat #(vector e %) (rest coll))))", "user": "5501a1e1e4b07d26eda61d75"}, {"problem": 40, "code": "#(drop-last (mapcat vector %2 (repeat %1)))", "user": "5566d812e4b0c656e3ff1837"}, {"problem": 40, "code": ";;(fn [sep coll] (drop 2 (reduce #(conj %1 (first %1) %2) [sep] coll)))\n(fn [sep coll] (rest (mapcat #(list sep %) coll)))\n;;(fn [sep coll] (butlast (interleave coll (repeat sep))) )", "user": "55647a31e4b0c656e3ff1808"}, {"problem": 40, "code": "(fn [sep l]\n  (drop-last 1 (mapcat #(list % sep) l)))", "user": "54a1f494e4b09f271ff37c52"}, {"problem": 40, "code": "#( rest (interleave (repeat (count %2) %1) %2))", "user": "556880dae4b0c656e3ff1856"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %)))", "user": "5566463ee4b0c656e3ff1831"}, {"problem": 40, "code": "(fn [a b]\n  (take (dec (* 2 (count b))) \n        (mapcat identity (for [z b] (list z a)))))", "user": "555f0789e4b0a2eb076a39bf"}, {"problem": 40, "code": "(fn separate [x y]\n  (if (= (count y) 1)\n    y\n    (concat (concat [(first y)] [x]) (separate x (rest y)))))", "user": "55630cc1e4b0c656e3ff17e0"}, {"problem": 40, "code": "(fn [c x] (rest (reduce #(conj % c %2) [] x)))", "user": "5562f08ae4b0c656e3ff17df"}, {"problem": 40, "code": "(fn [el ls] \n  (drop-last (mapcat (fn [elel] [elel el]) ls)))", "user": "5468a110e4b00cfc9eacc13d"}, {"problem": 40, "code": "(fn [itp col]\n    (reduce (fn [res next]\n              (conj res itp next))\n            (vector (first col))\n            (rest col)))", "user": "554a75c9e4b0a04f79299575"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "556c70dae4b09a3098a524fd"}, {"problem": 40, "code": "(fn [element coll] (butlast (mapcat #(vector % element) coll)))", "user": "52c70127e4b0c2d177d6211a"}, {"problem": 40, "code": "#(loop[v %,l %2,r []]\n   (if (empty? l) (subvec r 0 (dec (count r)))\n     (recur v (rest l) (conj (conj r (first l)) v))))", "user": "555e9dbfe4b0a2eb076a39bc"}, {"problem": 40, "code": "(fn foo\n  [single ary]\n  (drop-last (interleave ary (repeat single))))", "user": "55640c62e4b0c656e3ff17fd"}, {"problem": 40, "code": "#(-> (apply concat (map vector %2 (repeat %1))) butlast)", "user": "556b83fbe4b09a3098a524ee"}, {"problem": 40, "code": "(fn [a v]\n  (butlast (interleave v (repeat a)))\n  )", "user": "53a0b730e4b0ca733b9744b5"}, {"problem": 40, "code": "(fn interp [a v] (if (= (count v) 1) v (into (interp a (rest v)) (vector a (first v)))))", "user": "554a270fe4b0a04f79299570"}, {"problem": 40, "code": "(fn interp\n  [a b]\n\t(drop-last (mapcat list b (repeat a)))\n )", "user": "556be3dce4b09a3098a524f7"}, {"problem": 40, "code": "(fn [s x]\n  (butlast\n  (mapcat #(conj [] %1 s) x)))", "user": "550f70bee4b06e50f9beb177"}, {"problem": 40, "code": "(fn [i sq] (butlast(flatten(map #(conj '() i %) sq))))", "user": "4ef08bd6535dced4c769f20a"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "520e46cee4b066f3ea161c97"}, {"problem": 40, "code": "#(rest (mapcat (fn[x] (list %1 x)) %2))", "user": "524f3e6de4b0541d1855b805"}, {"problem": 40, "code": "(fn [val coll] (rest (reduce #(conj %1 val %2) [] coll)))", "user": "54a97853e4b09f271ff37cae"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "55702081e4b09a3098a52529"}, {"problem": 40, "code": "(fn[sep coll]\n     (loop [res '() s sep se (seq coll)]\n       (if (<= (count se) 1)\n         (vec (reverse (cons (first se) res)))\n          (recur\n            (cons s (cons (first se) res))\n            s        \n            (rest se)\n         )\n       )\n    )\n  )", "user": "556cc24ae4b09a3098a52502"}, {"problem": 40, "code": "(fn [v s]\n  (concat (interleave s (repeat (dec (count s)) v)) [(last s)]))", "user": "55625903e4b0c656e3ff17d7"}, {"problem": 40, "code": "(fn r [v s] (cond (= (count s) 1) s :else (cons (first s) (cons v (r v (rest s))))))", "user": "556766c1e4b0c656e3ff1840"}, {"problem": 40, "code": "(fn [v s]\n  (loop [s s, acc []]\n    (if (seq s)\n      (recur (rest s) (conj acc (first s) v))\n      (pop acc))))", "user": "555ee545e4b0a2eb076a39bd"}, {"problem": 40, "code": "(fn [e xs] (rest (mapcat #(list e %) xs)))", "user": "53db43aae4b0e771c30254b1"}, {"problem": 40, "code": "(fn [v coll]\n  (let [[head & tail] coll]\n    (reduce #(conj %1 v %2)\n            [head]\n            tail)))", "user": "54d9f7f1e4b024c67c0cf751"}, {"problem": 40, "code": "(fn [e xs] (butlast (mapcat list xs (repeat e))))", "user": "556a3243e4b09a3098a524de"}, {"problem": 40, "code": "#(rest (mapcat list (repeat %1) %2))\n;#(rest (mapcat (partial list %1) %2))\n;(fn [sep col] (butlast (mapcat #(list % sep) col)))", "user": "556f35fee4b09a3098a5251a"}, {"problem": 40, "code": "(fn [v [f & r]]\n   (reduce #(conj %1 v %2) [f] r))", "user": "5571d6e5e4b09a3098a5253f"}, {"problem": 40, "code": "(fn fn40 [x col]\n  (->>\n   col\n   (reduce #(conj %1 %2 x) [] )\n   drop-last\n   vec))", "user": "53b05a75e4b047364c044482"}, {"problem": 40, "code": "(fn [el col]\n    (rest (flatten (map #(list %1 %2) (take (count col) (cycle (list el))) col ))))", "user": "556f443be4b09a3098a5251e"}, {"problem": 40, "code": "(fn [v s](flatten(reduce #(list %1 v %2) s)))", "user": "522b1993e4b0d34ee08e71b6"}, {"problem": 40, "code": "(fn [n s] (butlast (mapcat #(vector % n) s)))", "user": "51e8736ae4b006d205356a4f"}, {"problem": 40, "code": "(fn put-stuff\n  ([stuff coll] (put-stuff stuff coll []))\n  ([stuff coll newColl] (if (empty? coll) \n                          (remove nil? newColl)\n                          (put-stuff \n                           stuff \n                           (rest coll)\n                           (conj newColl (first coll) \n                                 (when (not-empty (rest coll)) stuff)))\n                          )\n   )\n  )", "user": "5564709ee4b0c656e3ff1807"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "550fa523e4b06e50f9beb17a"}, {"problem": 40, "code": "(fn[delimiter sq]\n  (let [[h & t]  (into [] (interleave (repeat (count sq) delimiter) sq ))]\n    t)\n  )", "user": "52c911dde4b0c2d177d6213a"}, {"problem": 40, "code": "(fn sm-split [x y]\n  (if (= 1 (count y))\n    y\n    (concat (list (first y) x) (sm-split x (rest y) )  )\n   )\n )", "user": "5575aae2e4b05c286339e065"}, {"problem": 40, "code": "#(rest (mapcat (partial conj [] %1) %2))", "user": "5565d5e4e4b0c656e3ff181f"}, {"problem": 40, "code": "(fn [r s]\n(conj (vec (flatten (map #(vector %1 r)  (butlast s)))) (last s))\n)", "user": "5559b443e4b0deb715856e3c"}, {"problem": 40, "code": "(fn [b a]\n (loop [x a y (repeat (count a) b) l []]\n          (if (or (zero? (count x)) (zero? (count y)))\n           ;;(reverse (rest (reverse l)))\n            (butlast l)\n           (recur (rest x) (rest y) (conj l (first x) (first y))))))", "user": "554f7ef2e4b00713264bd9a1"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %)))", "user": "536046a9e4b063bf7a5f8fe1"}, {"problem": 40, "code": "(fn [item s]\n  (butlast\n    ((fn interp [item c1 c2]\n       (if (empty? c2) \n         c1\n         (interp\n          item\n          (concat c1 [(first c2) item])\n          (rest c2)))) item [] s)))", "user": "53065acbe4b02e8216869792"}, {"problem": 40, "code": "(fn\n[a b]\n(letfn\n[(step\n[a b]\n(if b\n(cons\na\n(cons\n(first b)\n(step a (next b))))))]\n(drop 1 (step a b))))", "user": "55306b8ae4b076ab5578f812"}, {"problem": 40, "code": "(fn [s [x & xs]] (conj (mapcat #(list s %) xs) x))", "user": "5579bc24e4b05c286339e098"}, {"problem": 40, "code": "#(drop-last (mapcat (fn [val] (vector val %1)) %2))", "user": "55079e55e4b021ccfedb96aa"}, {"problem": 40, "code": "(fn [sep xs]\n  (rest (map-indexed (fn [i el] (if (odd? i) el sep)) (interleave xs xs))))", "user": "557a1e18e4b05c286339e09e"}, {"problem": 40, "code": "(fn f [a b] (drop-last (mapcat vector b (repeat a))))", "user": "557bd432e4b05c286339e0bb"}, {"problem": 40, "code": "(fn[sep coll] ( butlast (interleave coll (repeat sep))))", "user": "55654e17e4b0c656e3ff1818"}, {"problem": 40, "code": "(fn my-interpose [x xs]\n  (if (empty? xs)\n    xs\n    (loop [l [] xs' xs]\n      (if (= (count xs') 1)\n        (into l xs')\n        (recur\n          (into l [(first xs') x])\n          (rest xs'))))))", "user": "557bcce4e4b05c286339e0b9"}, {"problem": 40, "code": "(fn [el l] \n  (rest (mapcat #(list el %) l))\n  )", "user": "52503747e4b0541d1855b828"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %)))", "user": "541b41d1e4b01498b1a71a65"}, {"problem": 40, "code": "(fn [i s] (drop-last (mapcat #(list % i) s)))", "user": "51a3cc45e4b0e77c4ca60bfb"}, {"problem": 40, "code": "(fn foo [s xs] (if (> (count xs) 1) (cons (first xs) (cons s (foo s (rest xs)))) xs))", "user": "557dbc9de4b05c286339e0cd"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %1)))", "user": "506f0968e4b09350ab4199f5"}, {"problem": 40, "code": "(fn [x xs] (drop-last (mapcat #(list % x) xs)))", "user": "557954aae4b05c286339e092"}, {"problem": 40, "code": "(fn [tokn liste]\n  (loop [rliste liste result ()]\n    (if (empty? rliste)\n      (into (empty liste) (reverse (rest result)))\n      (recur (rest rliste) (concat (list tokn) (list (first rliste))  result))\n    )\n  )\n)", "user": "556f2009e4b09a3098a52519"}, {"problem": 40, "code": "(fn [x xs] (rest (mapcat list (repeat x) xs)))", "user": "5581747fe4b05c286339e0fa"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %)))", "user": "4f04664a535dcb61093f6bc1"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "54dce62be4b024c67c0cf78b"}, {"problem": 40, "code": "(fn[sep sq](drop-last (interleave sq (repeat sep))))", "user": "55757e81e4b05c286339e063"}, {"problem": 40, "code": "#(drop-last (mapcat (fn[v] [v %1]) %2))", "user": "4f6d23cde4b07046d9f4efc6"}, {"problem": 40, "code": "(fn [separator coll]\n  (rest (flatten (map (fn [n] (list separator n)) coll))))", "user": "55842c7ee4b05c286339e11d"}, {"problem": 40, "code": "(fn [a b]\n  (loop [s b d []]\n    (if (empty? (rest s)) (concat d [(first s)])\n      (recur (rest s) (concat d [(first s) a])))))", "user": "558378dce4b05c286339e115"}, {"problem": 40, "code": "(fn [X XS]\n\t(let [func (fn iter [x xs]\n  \t\t\t\t(cond (empty? xs) []\n        \t\t(= (count xs) 1) [(first xs)]\n        \t\ttrue (conj (conj (iter x (rest xs)) x) (first xs))))]\n          (reverse (func X XS))))", "user": "5583888ae4b05c286339e117"}, {"problem": 40, "code": "(fn interpose* [x s]\n  (let [n (count s)]\n    (butlast (interleave s (repeat n x)))))", "user": "5392500ae4b0b51d73faaeaf"}, {"problem": 40, "code": "(fn my-interpose\n  [e s]\n  (take (dec (* 2 (count s))) (flatten (map list s (repeat e)))))", "user": "557e9d17e4b05c286339e0d8"}, {"problem": 40, "code": "(fn [v l]\n  (loop\n    [li l le ()]\n    (if (empty? li)\n      (reverse (rest le))\n      (recur (rest li) (conj le (first li) v)))))", "user": "52979551e4b02ebb4ef75043"}, {"problem": 40, "code": "(fn [sep coll]\n  (loop [[head & tail] coll\n          curr-coll []]\n    (cond \n       (empty? tail)\n         (conj curr-coll head)\n      :else \n           (recur tail (conj curr-coll head sep)))))\n\n#_(fn [sep coll]\n   (drop-last (flatten (map #(vector % sep) coll))))", "user": "5553b729e4b0deb715856e05"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "51bfc1f0e4b0e49ef9037dd4"}, {"problem": 40, "code": "(fn [sep s] (rest (mapcat #(list sep %) s)))", "user": "52a4879ce4b0c58976d9abdb"}, {"problem": 40, "code": "(fn interposeseq [i s]\n  (butlast (interleave s\n    (repeat (count s) i)\n  ))\n)", "user": "554756b8e4b0a04f79299549"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "5587d91ae4b059ccff29b1e9"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "5585aa48e4b001b0851d7510"}, {"problem": 40, "code": "(fn insert [v [x & xs]]\n  (if (empty? xs)\n    (list x)\n    (cons x (cons v (insert v xs)))))", "user": "55885edae4b059ccff29b1f6"}, {"problem": 40, "code": "(fn [el coll] (butlast (mapcat #(list % el) coll)))", "user": "54bad977e4b0ed20f4ff6eb9"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "558466fce4b04192f3441eee"}, {"problem": 40, "code": "(comp  vec drop-last #(interleave %2 (repeat %1)))", "user": "55896a0ce4b059ccff29b204"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %1)))", "user": "55895eade4b059ccff29b202"}, {"problem": 40, "code": "(fn [n sx] (butlast (mapcat #(list % n) sx)))", "user": "5537c939e4b09218d5f44fd2"}, {"problem": 40, "code": "#(drop-last (mapcat vector %2 (repeat %)))", "user": "5587d8b3e4b059ccff29b1e8"}, {"problem": 40, "code": "#(->> (repeat %1) (interleave %2) drop-last)", "user": "55893ebbe4b059ccff29b1ff"}, {"problem": 40, "code": "(fn [in seq] (rest (flatten (reduce #(conj %1 [in %2]) [] seq))))", "user": "5589e88ae4b0277789237610"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "558a81fbe4b027778923761c"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %) %2))", "user": "5568a1bde4b0c656e3ff1857"}, {"problem": 40, "code": "(fn [spl sq] \n  (let [c (- (* 2 (count sq)) 1)]\n  (take c (reduce concat (map #(seq [% spl]) sq)))))", "user": "558bb38fe4b0277789237631"}, {"problem": 40, "code": "#(drop-last (mapcat vector %2 (repeat %1)))", "user": "5589a735e4b059ccff29b206"}, {"problem": 40, "code": "(fn [sep coll] (drop-last (interleave coll (repeat sep))))", "user": "536be48ee4b0fc7073fd6e31"}, {"problem": 40, "code": "(fn [sep coll] (drop-last (mapcat vector coll (repeat sep))))", "user": "52b89d55e4b07a9af57922b3"}, {"problem": 40, "code": "#(rest (mapcat (fn [x] (list %1 x)) %2))", "user": "558b50d5e4b027778923762b"}, {"problem": 40, "code": "(fn[k v] (drop-last (mapcat #(vector %1 k) v)))", "user": "555c6344e4b0b056612e224c"}, {"problem": 40, "code": "(fn myinterpose\n\t[c myseq]\n\t(loop\n\t\t[myrest myseq myres nil]\n\t\t(if (empty? (rest myrest))\n\t\t\t(concat myres (list (first myrest)))\n\t\t\t(recur (rest myrest) (concat myres (list (first myrest) c))))))", "user": "55897fe2e4b059ccff29b205"}, {"problem": 40, "code": "(fn [sep col]\n  (loop [[h & t :as xs] col\n         ret []]\n    (let [new-ret (conj ret h)]\n      (if (empty? t)\n        new-ret\n        (recur t (conj new-ret sep))))))", "user": "54d22860e4b0e8a36923e5ef"}, {"problem": 40, "code": "(fn hoorah [x y] (butlast (concat (interleave y (take (count y) [x x x x])))))", "user": "557e8326e4b05c286339e0d7"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "55916d7be4b0604b3f94d57d"}, {"problem": 40, "code": "#(reduce (fn [n x] (concat n (if (= (count n) (* (- (count %2) 1) 2)) [x] [x %1]))) '() %2)", "user": "559057c4e4b027778923766e"}, {"problem": 40, "code": "(fn [v, s]\n  (drop-last (apply concat (map #(list %1 v) s))))", "user": "5590e55de4b0277789237676"}, {"problem": 40, "code": "(fn [x coll] (drop 1 (mapcat list (repeat (count coll) x) coll)))", "user": "558aabbfe4b0277789237621"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat (count %2) %)))", "user": "557f7c8be4b05c286339e0e0"}, {"problem": 40, "code": "#(->(for [x %2] (list x %1)) flatten drop-last)", "user": "558d76d4e4b0277789237644"}, {"problem": 40, "code": "(fn [sep, arr] (butlast (mapcat #(list % sep) arr)))", "user": "55893b09e4b059ccff29b1fe"}, {"problem": 40, "code": "(fn ilv [c2 c1]\n  (let [s1 (seq c1)]\n    (when s1\n      (if (> (count s1) 1)\n        (cons (first s1) (cons c2 (ilv c2 (rest s1))))\n        s1))))", "user": "558ffd47e4b0277789237669"}, {"problem": 40, "code": "(fn \n  [separator l]\n  (rest (flatten (map (fn [e] [separator e]) l))))", "user": "51d55598e4b01da06753aa8e"}, {"problem": 40, "code": "#(-> % repeat (interleave %2) rest)", "user": "559279b7e4b0604b3f94d58c"}, {"problem": 40, "code": "(fn [sep l] (flatten [(first l) (for [x [sep] y (rest l)] [x y])]))", "user": "558df2ebe4b0277789237649"}, {"problem": 40, "code": "(fn [v s]\n   (drop-last (interleave s (repeat v))))", "user": "531c6e72e4b08068f379eda0"}, {"problem": 40, "code": "#(butlast (interleave %2 (take (count %2) (repeat %1))))", "user": "557e6b73e4b05c286339e0d6"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last\n   (mapcat #(conj [] % sep) coll)))", "user": "554c1708e4b0a04f792995a0"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "5037534de4b0af0658af77aa"}, {"problem": 40, "code": "(fn [sep xs] (rest (mapcat list (repeat (count xs) sep) xs)))", "user": "4fc5eb7fe4b0ee37620e1803"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "user": "55933c7ae4b0c79f6e1db938"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5590ebb1e4b0277789237677"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %1)))", "user": "5593619ae4b0c79f6e1db93c"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %)))", "user": "558f4fbae4b0277789237661"}, {"problem": 40, "code": "(fn [in input]\n  (loop [l1 input\n         new (empty input)]\n    (if (= (count l1) 0)\n      (drop-last new)\n      (recur\n       (rest l1)\n       (conj new (first l1) in)\n       )\n      )\n    )\n  )", "user": "55871c62e4b059ccff29b1e0"}, {"problem": 40, "code": "#(drop-last (reduce (fn [acc val] (concat  acc [val %1])) []  %2))", "user": "5592bf9fe4b0c79f6e1db933"}, {"problem": 40, "code": "(fn [c l] (drop-last (interleave l (repeat c))))", "user": "55934bebe4b0c79f6e1db93b"}, {"problem": 40, "code": "(fn [x col] \n  (conj \n   (reduce \n     (fn [acc cur] \n       (conj acc cur x)) \n    [] (drop-last col)) (last col)))", "user": "555883c5e4b0deb715856e2d"}, {"problem": 40, "code": "(fn [i s] (cons (first s) (mapcat #(list i %) (rest s)) ))", "user": "55496eeae4b0a04f79299569"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5576e78de4b05c286339e075"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "559622cee4b0c79f6e1db975"}, {"problem": 40, "code": "#(drop-last (mapcat list %2 (repeat %)))", "user": "4fdb0c0ae4b05e33b9224f57"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "user": "5598a15ae4b031d6649c9b9d"}, {"problem": 40, "code": "(fn [v s] \n  (butlast (mapcat #(conj [] % v) s)))", "user": "54530382e4b0e397800069cc"}, {"problem": 40, "code": "#(take (+ 1 (* 2 (- (count %2) 1))) (interleave %2 (repeat (count %2) %1)))", "user": "5578c67fe4b05c286339e08d"}, {"problem": 40, "code": "(fn [interposed a-seq] \n  (->> a-seq\n       (map #(list % interposed))\n       (reduce concat)\n       (drop-last)))", "user": "55995fa7e4b031d6649c9ba9"}, {"problem": 40, "code": ";(fn [v coll]\n;  (loop [res [] c coll]\n;    (if (= (count c) 1)\n;      (conj res (first c))\n;      (recur (conj (conj res (first c)) v) (rest c)))))\n\n#(drop-last (interleave %2 (repeat %1)))", "user": "53573d70e4b04ce2eb3ed278"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5585f088e4b001b0851d7513"}, {"problem": 40, "code": "(fn func1 \n  [item ls]\n  (loop [new-ls [] n 0]\n    (if (= n (- (* 2 (count ls)) 1))\n      new-ls\n      (recur (if (even? n) (conj new-ls (nth ls (quot n 2))) (conj new-ls item)) (inc n))\n      )\n    )\n)", "user": "5581a6dae4b05c286339e0fe"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "54de16cae4b024c67c0cf79c"}, {"problem": 40, "code": "(fn p40 [x y] \n    (flatten \n     (if (> (count y) 1)\n      (cons (map list y [x]) (p40 [x] (rest y)))\n       y\n       )))", "user": "5400e918e4b0de5c41848619"}, {"problem": 40, "code": "(fn [e s] (reverse (rest (reduce #(conj %1 %2 e) '() s))))", "user": "4fffa422e4b0678c553fc404"}, {"problem": 40, "code": "(fn[x coll]\n  (butlast (mapcat #(vector % x) coll)))", "user": "55950c5fe4b0c79f6e1db95e"}, {"problem": 40, "code": "(fn [sep coll] (drop-last (mapcat vector coll (repeat sep)) ))", "user": "55882c84e4b059ccff29b1f2"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "54aec099e4b09f271ff37cf5"}, {"problem": 40, "code": "(fn [n x] (rest (flatten (map vector (repeat n) x))))", "user": "559b55d6e4b066d22e731f54"}, {"problem": 40, "code": "#(rest (for [v %2 x [%1 v]] x))", "user": "559c13c5e4b066d22e731f61"}, {"problem": 40, "code": "(fn [x s] \n  (rest (mapcat #(vector x %1) s) ))", "user": "54117417e4b01498b1a719c5"}, {"problem": 40, "code": "(fn [item arr]\n  (->> arr\n       (interleave (repeat item))\n       (rest)))", "user": "50ec409ce4b04edc33777045"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "559b2ad1e4b066d22e731f4e"}, {"problem": 40, "code": "(fn [n sq]\n  (loop [sq-it sq\n         ret-it '()]\n    (if (empty? (rest sq-it))\n      (concat ret-it sq-it)\n      (recur (rest sq-it)\n             (concat ret-it (list (first sq-it) n))))))", "user": "559d33b3e4b0ec2b359424d9"}, {"problem": 40, "code": "(fn ntrps [v sqnc]\n  (loop [s1 sqnc s2 []]\n    (if (empty? s1) \n      (butlast s2)\n      (recur (rest s1) (conj s2 (first s1) v )))))", "user": "55929e89e4b0604b3f94d58e"}, {"problem": 40, "code": "(fn [x coll]\n  (drop-last\n   (mapcat #(conj [] % x) coll)))", "user": "54a627bce4b09f271ff37c83"}, {"problem": 40, "code": "(fn [d s] (cons (first s) (mapcat #(vector d %) (rest s))))", "user": "558bdcefe4b0277789237633"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "559e25fde4b08a52bd4f97d0"}, {"problem": 40, "code": "#(drop 1 (mapcat vector (repeat %1) %2))", "user": "5576f299e4b05c286339e077"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5537f30fe4b09218d5f44fd8"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "559ffabae4b0acc240e314ef"}, {"problem": 40, "code": "(fn pose [v [x & xs]]\n  (if (seq xs)\n    (apply conj [x v] (pose v xs))\n    [x]))", "user": "55a12668e4b0acc240e3150b"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "559972d1e4b031d6649c9bab"}, {"problem": 40, "code": "(fn [insert coll] (butlast (interleave coll (repeat insert))))", "user": "55306f9de4b076ab5578f814"}, {"problem": 40, "code": "(fn [x list] (drop-last (mapcat vector list (repeat x))))", "user": "55a2bcebe4b0acc240e31529"}, {"problem": 40, "code": "(fn [x y] (flatten (cons (map #(do [% x]) (drop-last (vec y))) (vec (take-last 1 y)))))", "user": "55a346e8e4b0acc240e31532"}, {"problem": 40, "code": "(fn interp [x l]\n  (if (empty? (rest l))\n    (vector (first l))\n    (cons (first l) (cons x (interp x (rest l))))))", "user": "55a35ef4e4b0acc240e31535"}, {"problem": 40, "code": "(fn [x coll]\n(drop-last (flatten (map #(concat (vector %) (vector x)) coll))))", "user": "5594e0e3e4b0c79f6e1db95b"}, {"problem": 40, "code": "#(drop-last (apply concat [] (for [ele %2] [ele %1])))", "user": "55989c25e4b031d6649c9b9b"}, {"problem": 40, "code": "(fn [i xs]\n  (loop [x (first  xs)\n         rem (rest xs)\n         r []]\n    (if (empty? rem)\n      (conj r x)\n      (recur (first rem)\n             (rest rem)\n             (conj r x i)))\n))", "user": "53d64811e4b0e771c3025456"}, {"problem": 40, "code": "(fn [sep coll] (drop-last (mapcat #(list % sep) coll)))", "user": "55a1d7f6e4b0acc240e31519"}, {"problem": 40, "code": "(fn in [x l] \n  (if (empty? (rest l)) l\n    (concat [(first l) x] (in x (rest l))\n              \n              \n     )         \n   )\n)", "user": "55a59ebae4b0acc240e3154d"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "503e91d4e4b06c4e0e1fa269"}, {"problem": 40, "code": "(fn diy-interpose [separator coll]\n  (rest (reduce (fn [acc x]\n            (conj acc separator x))\n          [] coll)))", "user": "54a96a15e4b09f271ff37cad"}, {"problem": 40, "code": "(fn [x coll]\n  (loop [x x coll coll res []]\n  (if (= (count coll) 1)\n  \t(conj res (first coll))\n  \t(recur x (rest coll) (conj (conj res (first coll)) x))\n  )))", "user": "55a74d46e4b09e57187da2a3"}, {"problem": 40, "code": "(fn [x col]\n\t(loop [old col new []]\n\t\t(if (empty? old)\n\t\t\t(rest new)\n\t\t\t(recur (rest old) (-> new (conj x) (conj (first old)))))))", "user": "531dc21be4b08068f379edb1"}, {"problem": 40, "code": "(fn [sep coll] \n  (concat \n   (interleave (butlast coll) (repeat sep)) \n   (list (last coll))))\n\n;; (fn [sep coll] (drop-last (interleave coll (repeat sep))))", "user": "553527ede4b09218d5f44fab"}, {"problem": 40, "code": "#(reduce (fn [xs x] (conj xs %1 x)) [(first %2)] (rest %2))", "user": "5592dc6be4b0c79f6e1db935"}, {"problem": 40, "code": "#(rest (mapcat vector (repeat %1) %2))", "user": "5416b4a2e4b01498b1a71a01"}, {"problem": 40, "code": "(fn [i coll] (reduce (fn [a b] (conj a i b)) (vector (first coll)) (rest coll)))", "user": "5520d6b8e4b08d5046aa8a65"}, {"problem": 40, "code": "(fn my-interpose [a b]\n(let [[x & xs] b] \n (if (empty? xs) [x] (concat [x a] (my-interpose a xs)))))", "user": "55aa1637e4b0988bba2ad949"}, {"problem": 40, "code": "(fn [sep xs]\n  (-> (map vector xs (repeat (count xs) sep ))\n      flatten\n      reverse\n      rest\n      reverse))", "user": "55a1ba5ee4b0acc240e31517"}, {"problem": 40, "code": "(fn [sep coll]\n    (let [c (interleave coll (repeat sep))]\n      (take (- (count c) 1) c)\n    ))", "user": "55aa5f73e4b0988bba2ad94b"}, {"problem": 40, "code": "(fn [d coll]\n  (loop [v []\n         c 0]\n         (if (= c (count coll))\n            (pop v)\n            (recur (conj v (nth coll c) d) (inc c)))))", "user": "559468cbe4b0c79f6e1db954"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5593b10ce4b0c79f6e1db943"}, {"problem": 40, "code": "(fn [x y] (rest (interleave (repeat (count y) x) y)))", "user": "55a0e139e4b0acc240e31504"}, {"problem": 40, "code": "(fn [x s]\n    (letfn [(hf [result s]\n              (if (= (count s) 1)\n                (concat result s)\n                (recur\n                 (concat result [(first s) x])\n                 (rest s))))]\n      (hf [] s)))", "user": "55ac07afe4b03311e7b7328f"}, {"problem": 40, "code": "(fn [sep coll]\n  ((fn inter [x xs]\n    (if (empty? xs) \n      [x] \n      (list* x sep (inter (first xs) (rest xs)))))\n  (first coll) (rest coll)))", "user": "52dbd423e4b09f7907dd13c6"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5596af34e4b04c1e5c31d758"}, {"problem": 40, "code": "(fn [separator s]\n  (reduce \n    #(concat % [separator] [%2])\n    [(first s)]\n   (rest s)))", "user": "55a62092e4b0acc240e31554"}, {"problem": 40, "code": "(fn my-inter\n  [l s]\n  (loop [t [] s* s]\n    (let [[sf & srem] s*] \n      (if (= (count s*) 1)\n        (conj t sf)\n        (recur (conj(conj t sf) l) srem)\n      )\n    )\n  )\n)", "user": "55acd080e4b03311e7b73298"}, {"problem": 40, "code": "(fn [sep coll](rest(reduce #(conj %1 sep %2) [] coll)))", "user": "5422979be4b01498b1a71ac2"}, {"problem": 40, "code": "(fn [d s] (drop-last (mapcat #(list % d) s)) )", "user": "55ad59cde4b03311e7b732a7"}, {"problem": 40, "code": "#(loop [ cl %2, res []]\n  (if (empty? (rest cl)) (conj res (first cl))\n    (recur (rest cl) (conj (conj res (first cl)) %1))\n))", "user": "55adf4d7e4b03311e7b732af"}, {"problem": 40, "code": "(fn [val vector]\n  (loop [res [], source (reverse vector)]\n    (if (seq (rest source))\n      (recur (cons val (cons (first source) res)) (rest source))\n      (cons (first source) res))))", "user": "55868660e4b059ccff29b1d4"}, {"problem": 40, "code": "(fn [a b] (butlast (flatten (map vector b (repeat (count b) a)))))", "user": "55af7e21e4b03311e7b732cc"}, {"problem": 40, "code": "(fn [inter-val coll]\n  (loop [coll coll acc nil]\n    (if (> (count coll) 1)\n      (recur (butlast coll) (conj acc (last coll) inter-val))\n      (conj acc (last coll)))))", "user": "55afc197e4b002ce9d5cbc18"}, {"problem": 40, "code": "(fn [x y] (flatten (reduce #(list %1 x %2) y)))", "user": "55b107fee4b002ce9d5cbc2a"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "user": "5592c56ee4b0c79f6e1db934"}, {"problem": 40, "code": "(fn [splitter value] (rest (mapcat list (repeat splitter) value)))", "user": "559c4236e4b066d22e731f67"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "55a5c3bee4b0acc240e3154e"}, {"problem": 40, "code": "(fn [e x]\n  (loop [i 0 s ()]\n    (if (= i (- (* 2 (count x)) 1))\n      (reverse s)\n      (if (= (mod i 2) 0)\n        (recur (inc i) (conj s (nth x (/ i 2))))\n        (recur (inc i) (conj s e))))))", "user": "55aaa36fe4b0988bba2ad94f"}, {"problem": 40, "code": "(fn [x y] (drop-last (mapcat #(conj nil x %1) y)))", "user": "55b0ecb7e4b002ce9d5cbc27"}, {"problem": 40, "code": "(fn [v vs] (rest (reverse (reduce #(cons %2 (cons v %1)) [] vs))))", "user": "559a9a3de4b066d22e731f45"}, {"problem": 40, "code": "(fn [sep s] (rest (mapcat #(list sep %) s)))", "user": "55ab8c2de4b0988bba2ad954"}, {"problem": 40, "code": "#(vec ((comp drop-last interleave) %2 (replicate (count %2) %1)))", "user": "55b1372de4b002ce9d5cbc2e"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "53396c03e4b0e30313ee6ca7"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "user": "547a714ae4b0c51c1f4d72cc"}, {"problem": 40, "code": "#(rest (mapcat vector (repeat (count %2) %1) %2))", "user": "53cb5559e4b00fb29b2212d2"}, {"problem": 40, "code": "(fn [x coll]\n  (cons\n   \t(first coll)\n    (mapcat #(list x %) (rest coll))))", "user": "5537cbaee4b09218d5f44fd3"}, {"problem": 40, "code": "#(drop-last (mapcat (fn [a b] [a b]) %2 (repeat %1)))", "user": "55ab07e0e4b0988bba2ad953"}, {"problem": 40, "code": "#(let [c (take (count %2)(repeat %1))]\n   (into[](rest (interleave c %2))))", "user": "553093bee4b076ab5578f817"}, {"problem": 40, "code": "(fn [sep col] (drop 1 (interleave (repeat sep) col)))", "user": "55a21be1e4b0acc240e3151e"}, {"problem": 40, "code": "(fn [x y] (drop-last (interleave y (repeat (count y) x))))", "user": "5564c113e4b0c656e3ff180d"}, {"problem": 40, "code": "(fn [s [x & xs]]\n  (apply conj [x] (mapcat #(list s %) xs)))", "user": "55aa7c5ce4b0988bba2ad94d"}, {"problem": 40, "code": "(fn [inter sq]\n  (pop \n   (reduce (fn [accum x] (conj accum x inter))\n           []\n           sq)))", "user": "55b527cbe4b01b9910ae2985"}, {"problem": 40, "code": "(fn eee [inter [head & tail]]\n   (if tail\n\t(concat (list head inter) (eee inter tail))\n\t(list head)      \n   )\n)", "user": "55b3e8aee4b01b9910ae2977"}, {"problem": 40, "code": "(fn [x l] \n   (rest \n    (reduce \n     #(conj % x %2) [] l)))", "user": "54236ce1e4b01498b1a71ad1"}, {"problem": 40, "code": "(fn [sep lst]\n  (drop-last\n   (mapcat #(conj [] % sep) lst)))", "user": "55838353e4b05c286339e116"}, {"problem": 40, "code": "(fn [s xs]\n  (drop 1 (interleave (repeat s) xs)))", "user": "55b25970e4b0da326a65cf7e"}, {"problem": 40, "code": "(fn [vm xs]\n  (drop-last  (mapcat identity (for [x xs]\n                     (cons x (cons vm []))))))", "user": "503c90aae4b06c4e0e1fa24b"}, {"problem": 40, "code": "(fn [v xs] (drop-last (flatten (map #(identity [% v]) xs))))", "user": "54f3d6c7e4b050824f58f5cb"}, {"problem": 40, "code": "#(butlast (mapcat (fn [x] (list x %1)) %2) )", "user": "532dbd3ce4b019098a6f8b40"}, {"problem": 40, "code": ";;(fn [sep coll]\n;;\t(drop 1 \n;;    \t(interleave \n;;         \t(repeat sep) \n;;         \tcoll\n;;\t\t)\n;;\t)\n;;)\n\n#(drop 1 (interleave (repeat %1) %2))", "user": "5595c60ee4b0c79f6e1db96f"}, {"problem": 40, "code": "(fn [l v]\n    (loop [ret [] r v]\n        (if (seq r)\n            (recur (conj ret (first r) l) (rest r))\n            (butlast ret))))", "user": "55975569e4b031d6649c9b8e"}, {"problem": 40, "code": "(fn [i col] (drop-last (interleave col (repeat i))))", "user": "55b77c7ce4b01b9910ae29a3"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "55b8c339e4b01b9910ae29b9"}, {"problem": 40, "code": "(fn interpose-seq [n coll]\n  (drop 1 (mapcat list (repeat (count coll) n) coll)))", "user": "55b69e37e4b01b9910ae2999"}, {"problem": 40, "code": "(fn [x y] (\n  butlast (interleave y (repeat x))\n\n\n))", "user": "55b1ab40e4b0da326a65cf6e"}, {"problem": 40, "code": "(fn [x l]\n  (drop-last (mapcat\n   list\n   l\n   (repeat (count l) x))))\n\n;(fn [x l]\n;  ((comp reverse rest reverse) (apply concat (map\n;   list\n;   l\n;   (repeat (count l) x)))))", "user": "55b1e9e7e4b0da326a65cf74"}, {"problem": 40, "code": "(fn [sep seq]\n   (butlast (mapcat #(vector %1 %2) seq (repeat sep))))", "user": "55b54ecbe4b01b9910ae2987"}, {"problem": 40, "code": "#(drop-last (mapcat (fn [x] [x %1]) %2))", "user": "55bbd179e4b01b9910ae29eb"}, {"problem": 40, "code": "(fn [x s] (next (mapcat list (repeat x) s)))", "user": "55be39f9e4b01b9910ae2a06"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "549dfe40e4b0f3d1d8e70f9a"}, {"problem": 40, "code": "(fn f [i [x & more]] (if (empty? more) [x] (concat [x i] (f i more))))", "user": "55bfc39ee4b01b9910ae2a1a"}, {"problem": 40, "code": "(fn [buffer coll]\n  (drop 1 (interleave (repeat buffer) coll)))", "user": "557775a3e4b05c286339e084"}, {"problem": 40, "code": "(fn [x coll] (reduce #(conj %1 x %2) [(first coll)] (rest coll)))", "user": "55c0afa5e4b01b9910ae2a27"}, {"problem": 40, "code": "(fn myInterpose [sep coll] (drop-last (mapcat #(vector % sep) coll)))", "user": "55a9e0fee4b0988bba2ad945"}, {"problem": 40, "code": "(fn temp\n  [ar nums]\n  (reverse (rest (reverse (flatten (map vector nums (repeat ar)))))))", "user": "55b3c03ee4b01b9910ae2975"}, {"problem": 40, "code": "(fn f [x s]\n    (if (or (empty? s) (= 1 (count s)))\n        s\n        (cons (first s) (cons x (f x (rest s))))))", "user": "4e8a170c535d3e98b802328f"}, {"problem": 40, "code": "#(drop-last (mapcat vector %2 (repeat %)))", "user": "55c10409e4b01b9910ae2a2c"}, {"problem": 40, "code": "(fn g [x s]\n  (let [f (fn f#[x s]\n            (if (seq s)\n              (cons x (cons (first s) (lazy-seq (f# x (next s)))))\n              nil))]\n    (drop 1 (f x s))))", "user": "549c6792e4b0f3d1d8e70f8b"}, {"problem": 40, "code": "(fn [x xs] (rest (mapcat #(list x %) xs)))", "user": "559454f2e4b0c79f6e1db952"}, {"problem": 40, "code": "(fn [n coll]\n  (drop-last (mapcat #(vector % n) coll)))", "user": "55aa8276e4b0988bba2ad94e"}, {"problem": 40, "code": ";(fn [sep coll] (drop-last (mapcat #(list % sep) coll)))\n(fn [sep coll] (drop-last (interleave coll (repeat sep))))", "user": "55b1b67ce4b0da326a65cf6f"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "55c37594e4b0e31453f64989"}, {"problem": 40, "code": "(fn interposer [sep [h & t]]\n   (if (empty? t) (list h) (vec (cons h (cons sep (interposer sep t))))))", "user": "55c1eb52e4b0e31453f64970"}, {"problem": 40, "code": "(fn interpose-seq [a-value a-seq]\n   (if (= (count a-seq) 1)\n      (list (first a-seq))\n      (conj (conj (interpose-seq a-value (rest a-seq)) a-value) (first a-seq))\n  )\n)", "user": "55c387e4e4b0e31453f6498b"}, {"problem": 40, "code": "(fn [x ys]\n  (cons (first ys)\n        (interleave (repeat x)\n                    (rest ys))))", "user": "55c4e48be4b0e31453f649a7"}, {"problem": 40, "code": "(fn my-interpose [n l]\n  (drop-last (flatten (map #(vector % n) l))))", "user": "534aa5d3e4b084c2834f4a6b"}, {"problem": 40, "code": "(fn [d s]\n  (butlast (reduce \n   #(conj %1 %2 d)\n     []\n   s)))", "user": "55c652dde4b0e31453f649bd"}, {"problem": 40, "code": "(fn [x sqn]\n  (loop [in sqn out []]\n    (if (empty? (rest in))\n      (conj out (first in))\n      (recur (rest in) (conj out (first in) x)))))", "user": "55c68089e4b0e31453f649c4"}, {"problem": 40, "code": "(fn my-interpose\n [v s]\n (if (empty? (rest s))\n   s\n   (conj (my-interpose v (rest s)) v (first s))))", "user": "5599abc9e4b031d6649c9bb0"}, {"problem": 40, "code": "(fn [a s]\n      (drop-last (mapcat list s (repeat a)))\n      )", "user": "55c3149de4b0e31453f64987"}, {"problem": 40, "code": "(fn [s coll] (butlast (mapcat #(list % s) coll)))", "user": "55b45825e4b01b9910ae297c"}, {"problem": 40, "code": "(fn [a v](butlast (apply concat (map #(vector % a) v))))", "user": "55ac16a0e4b03311e7b73291"}, {"problem": 40, "code": "(fn\n  [sep aseq]\n  (loop [the-seq aseq\n         new-seq []]\n    (if (= (count the-seq) 1)\n      (conj new-seq (first the-seq))\n      (recur (rest the-seq) (conj new-seq (first the-seq) sep)))))", "user": "557e2eafe4b05c286339e0d2"}, {"problem": 40, "code": "(fn [a n] (drop-last (interleave n (cycle [a]))))", "user": "55a28acde4b0acc240e31524"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "54b817eee4b0ed20f4ff6e93"}, {"problem": 40, "code": "#(rest (interleave (take (count %2) (repeat %1)) %2))", "user": "55c77070e4b0e31453f649d0"}, {"problem": 40, "code": "(fn [x coll]\n  (rest (mapcat #(conj (list %1) x) coll)))", "user": "55a372f1e4b0acc240e31537"}, {"problem": 40, "code": "(fn [in coll]\n  (reverse (rest (reverse (reduce #(conj %1 %2 in) [] coll)))))", "user": "55c734a5e4b0e31453f649cb"}, {"problem": 40, "code": "(fn\n  [s xs]\n  (rest (mapcat #(vector s %) xs)))", "user": "55c423e1e4b0e31453f64994"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "55ca4273e4b0e31453f649f9"}, {"problem": 40, "code": "#(pop (vec (mapcat (fn [x] [x %1]) %2)))", "user": "5582dfb6e4b05c286339e10d"}, {"problem": 40, "code": "(fn [elem col]\n (reduce\n    (fn [a b]\n      (concat\n        (if (coll? a) a [a])\n        [elem]\n        [b]\n        )\n      )\n    col\n    )\n)", "user": "55bb7546e4b01b9910ae29e7"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %)))", "user": "546e1142e4b00cfc9eacc199"}, {"problem": 40, "code": "#(->> (mapcat list %2 (take (count %2) (iterate identity %))) (drop-last))", "user": "55b39523e4b01b9910ae2973"}, {"problem": 40, "code": "(fn [sep seq]\n  (drop-last (interleave seq (repeat sep))))", "user": "54f4ab86e4b0f2f3c5226e84"}, {"problem": 40, "code": "(fn [partition-val partition-list]\n  (loop [result (empty partition-list) \n         initial 0]\n    (if (= (- (count partition-list) 1) initial)\n      (conj result (nth partition-list initial))\n      (recur (conj result (nth partition-list initial) partition-val) (inc initial)))))", "user": "55a0d79fe4b0acc240e31502"}, {"problem": 40, "code": "(fn [elem col] \n  (let [c (repeat (count col) elem)]\n        (rest (interleave c col))))", "user": "5598e856e4b031d6649c9ba1"}, {"problem": 40, "code": "#(rest (mapcat (fn [v] [%1 v]) %2))", "user": "55c20bd0e4b0e31453f64972"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "55b22c33e4b0da326a65cf79"}, {"problem": 40, "code": "(fn [x y] (butlast (mapcat #(interleave [%] [x]) y)))", "user": "5313d68de4b08068f379ed0f"}, {"problem": 40, "code": "#(drop-last (mapcat (fn [n] [n  %1]) %2))", "user": "55caabd1e4b0e31453f649fb"}, {"problem": 40, "code": "#(drop-last (mapcat list %2 (repeat %1)))", "user": "55be464ce4b01b9910ae2a07"}, {"problem": 40, "code": "#(-> (repeat %) (interleave %2) next)", "user": "55cdc576e4b0e31453f64a1f"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5586f418e4b059ccff29b1de"}, {"problem": 40, "code": "(fn [x coll] (drop-last (mapcat #(list %2 %1) (take (count coll) (repeat x)) coll)))", "user": "4eb171d7535d7eef30807340"}, {"problem": 40, "code": "#(cons (first %2)\n       (mapcat list\n               (repeat (count (rest %2)) %1)\n               (rest %2)))", "user": "55d0e76ae4b0e31453f64a40"}, {"problem": 40, "code": "(fn myinterpose [s coll]\n  (into\n    (empty coll)\n    (cons (first coll) (mapcat #(vector s %) (rest coll)))\n    ))", "user": "55bd87ede4b01b9910ae29fe"}, {"problem": 40, "code": "(fn my-inter-pose [a m] (drop-last (mapcat #(conj [] % a) m)))", "user": "55c9bc1ee4b0e31453f649f1"}, {"problem": 40, "code": "(fn f [sep sq]\n  (reduce #(conj %1 sep %2) [(first sq)] (rest sq)))", "user": "55815973e4b05c286339e0f6"}, {"problem": 40, "code": "#(rest (apply concat (map list (repeat %1 ) %2)))", "user": "55bedd93e4b01b9910ae2a0d"}, {"problem": 40, "code": "#(pop (reduce (fn [a b] (conj a b %1)) [] %2))", "user": "55d1f231e4b0e31453f64a4e"}, {"problem": 40, "code": "(fn\n  [delim xs]\n  (let [delims (repeat (count xs) delim)]\n    (butlast (interleave xs delims))))", "user": "5574c172e4b05c286339e059"}, {"problem": 40, "code": "#(butlast (mapcat (fn [x] [x %]) %2))", "user": "55ccdc6be4b0e31453f64a18"}, {"problem": 40, "code": "(fn [insert values]\n  (loop [[current & remainder] values\n          result []]\n    (if (empty? remainder)\n      (conj result current)\n      (recur\n       remainder\n       (conj (conj result current) insert)))))", "user": "55d06bcbe4b0e31453f64a3a"}, {"problem": 40, "code": "(fn [sep data] ((fn wow [sep data result] (if (first data) (wow sep (rest data) (conj result sep (first data))) result)) sep (rest data) (vector (first data))))", "user": "55d354e0e4b0e31453f64a62"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "55ba33afe4b01b9910ae29cb"}, {"problem": 40, "code": "(fn [sep s] (rest (mapcat #(list sep %) s)))", "user": "5589a941e4b059ccff29b207"}, {"problem": 40, "code": "(fn [a b] (flatten (list (first b)  (map (fn [c] (list a c)) (rest b)))))", "user": "55b0f5bfe4b002ce9d5cbc28"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "55d332f5e4b0e31453f64a5f"}, {"problem": 40, "code": "(fn [v coll]\n  (loop [i (rest coll) o [(first coll)]]\n    (if (empty? i)\n      o\n      (recur (rest i) (conj o v (first i))))))", "user": "54864662e4b0e286459a11b8"}, {"problem": 40, "code": "(fn interps [sep coll]\n  (loop [coll coll acc (empty coll)]\n    (if (empty? (rest coll))\n\t  (conj acc (first coll))\n\t  (recur (rest coll) (conj acc (first coll) sep)))))", "user": "55bb6a19e4b01b9910ae29e5"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "user": "541ddadbe4b01498b1a71a84"}, {"problem": 40, "code": "#(drop-last (mapcat vector %2 (repeat (count %2) %1)))", "user": "54c9571ee4b045293a27f66b"}, {"problem": 40, "code": "(fn my-interpose [sep coll]\n  (rest (mapcat #(list sep %) coll)))", "user": "55d204abe4b0e31453f64a4f"}, {"problem": 40, "code": "#(next (interleave (repeat %1) %2))", "user": "54f11c0ce4b024c67c0cf8ab"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "55d5ee3fe4b0e31453f64a92"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %1)))", "user": "55d1b565e4b0e31453f64a49"}, {"problem": 40, "code": "#(drop-last (interleave %2 (cycle [%1])))", "user": "55d5e80ee4b0e31453f64a91"}, {"problem": 40, "code": "(fn my-interpose [value [head & tail]]\n  (if (empty? tail)\n    (list head)\n    (lazy-seq (cons head (cons value (my-interpose value tail))))))", "user": "55d6a2ebe4b0e31453f64a9a"}, {"problem": 40, "code": "#(->> %2\n      (map (fn [e] (list e %1)))\n      (apply concat)\n      drop-last)", "user": "55627de1e4b0c656e3ff17d9"}, {"problem": 40, "code": "(fn my-interpose [val eles] (rest (mapcat #(list val %1) eles)))", "user": "55d95be7e4b0e31453f64ac9"}, {"problem": 40, "code": "#(take (+ (count %2) (- (count %2) 1)) (interleave %2 (repeat %1)))", "user": "55d29fb6e4b0e31453f64a59"}, {"problem": 40, "code": "(fn [sep s] (rest (mapcat #(list sep %) s)))", "user": "55d045cde4b0e31453f64a38"}, {"problem": 40, "code": "#(rest (mapcat vector (repeat %) %2))", "user": "55236ad6e4b0882d96d091b1"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "55dab5c8e4b0e31453f64ada"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "558fec41e4b0277789237666"}, {"problem": 40, "code": "(fn [v coll] (drop-last (interleave coll (repeat v))))", "user": "553f70cae4b0a04f792994f8"}, {"problem": 40, "code": "#(take (- (* (count %2) 2) 1) (interleave %2 (repeat %1)))", "user": "55d50a38e4b0e31453f64a80"}, {"problem": 40, "code": "(fn [sep xs] (rest (interleave (repeat sep) xs)))", "user": "55da1ebce4b0e31453f64ad2"}, {"problem": 40, "code": "#(rest (mapcat list (repeat %1) %2))", "user": "553c136ae4b09218d5f45012"}, {"problem": 40, "code": "#(drop 1 \n       (interleave (repeat %) \n                   %2))\n;This way around no realisation is needed.", "user": "55d8eed3e4b0e31453f64ac3"}, {"problem": 40, "code": "(fn [i s] (flatten (reduce #(list %1 i %2) s)))", "user": "55d3cfafe4b0e31453f64a6c"}, {"problem": 40, "code": "#(-> (mapcat (fn [x] [%1 x])\n             (next %2))\n     (conj (first %2)))", "user": "55db7e15e4b0e31453f64ae8"}, {"problem": 40, "code": "(fn [x xs] (loop [result [] xs xs]\n  (if (= 1 (count xs))\n    (conj result (first xs))\n    (recur (conj result (first xs) x) (rest xs))\n  )))", "user": "55d79b87e4b0e31453f64aa8"}, {"problem": 40, "code": "(fn my-interpose [x c]\n  (if (= (count c) 1)\n    c\n    (cons (first c) (cons x (my-interpose x (rest c))))))", "user": "54722c55e4b094393f72dd74"}, {"problem": 40, "code": "(fn [x list]\n  (cons (first list) (mapcat vector (repeat x) (rest list))))", "user": "55dab408e4b0e31453f64ad9"}, {"problem": 40, "code": "(fn [i, s] (reverse (drop-last (reduce (fn [s,v] (conj (conj s i) v) ) '() s))))", "user": "55dd91c9e4b050e68259b3ca"}, {"problem": 40, "code": "(fn interp [item,z] (drop-last (apply concat (map (fn [x] [x,item]) z))))", "user": "55d35a01e4b0e31453f64a63"}, {"problem": 40, "code": "(fn [sep coll]\n         (drop-last (mapcat #(cons % [sep]) coll)))", "user": "55dcb06ee4b050e68259b3b9"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "553bda0de4b09218d5f4500b"}, {"problem": 40, "code": "(fn [v1 v2] (-> (map #(vector % v1) v2) flatten butlast vec))", "user": "5582c5b1e4b05c286339e10a"}, {"problem": 40, "code": "(fn [inter things] \n  (loop [acc [] els things] (\n                             if (= 1 (count els))\n                             (conj acc (first els))\n                             (recur (conj acc (first els) inter) (rest els)))))", "user": "55ddb3f4e4b050e68259b3cd"}, {"problem": 40, "code": "(fn [x xs]\n  (loop [r []\n         [y & ys] xs]\n    (if (empty? ys)\n      (conj r y)\n      (recur (conj r y x) ys))))", "user": "55d87324e4b0e31453f64ab4"}, {"problem": 40, "code": "(fn [x xs] (drop 1 (interleave (repeat x) xs)))", "user": "5148bcbee4b05514c84b7cc6"}, {"problem": 40, "code": "(fn [i l] (drop-last (mapcat #(vector % i) l)))", "user": "55d1a721e4b0e31453f64a47"}, {"problem": 40, "code": "(fn [a s] (butlast (mapcat (fn [i] [i a]) s)))", "user": "55c5261ee4b0e31453f649ae"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "55ded9fde4b050e68259b3e7"}, {"problem": 40, "code": "(fn myfunc [s coll] (rest (reduce #(into %1 [s %2]) [] coll)))", "user": "55e05f46e4b050e68259b40b"}, {"problem": 40, "code": "(fn [sep seq]\n   (pop (loop [items seq\n                acc []]\n           (if (nil? (first items))\n             acc\n             (recur (rest items)\n                    (conj acc (first items) sep))))))", "user": "54a8ac6ce4b09f271ff37ca7"}, {"problem": 40, "code": "#(butlast (apply concat (for [x %2] [x %1])))", "user": "55e1d34ae4b050e68259b421"}, {"problem": 40, "code": "(fn [sep coll] (drop-last (mapcat #(list %1 sep) coll)))", "user": "5563b88be4b0c656e3ff17f5"}, {"problem": 40, "code": "#(loop [xs %2 r []]\n   (cond (empty? xs) r\n         (empty? (rest xs))\n          (conj r (first xs))\n         :else (recur (rest xs)\n                      (conj r (first xs) %1))))", "user": "55e26417e4b050e68259b433"}, {"problem": 40, "code": "(fn [x ys] (butlast (mapcat (fn [y] (vector y x)) ys)))", "user": "55dc2ad1e4b050e68259b3ac"}, {"problem": 40, "code": "#(butlast (vec (interleave %2 (repeat %))))", "user": "559067ace4b0277789237670"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat (count %2) %1 )))", "user": "4dd5fdb0535d2dad7130b5c5"}, {"problem": 40, "code": "(fn [separator values] (drop-last (reduce #(conj %1 %2 separator) [] values)))", "user": "55e1ddf7e4b050e68259b422"}, {"problem": 40, "code": "(fn [x s] \n  (rest (mapcat #(vector x %1) s) ))", "user": "54edfebbe4b024c67c0cf869"}, {"problem": 40, "code": "(fn [sep col]\n  (rest (reduce #(conj %1 sep %2) []  col)))", "user": "54c94376e4b045293a27f665"}, {"problem": 40, "code": "(fn [v col] (drop-last (mapcat #(vector %1 v) col)))", "user": "55df1985e4b050e68259b3eb"}, {"problem": 40, "code": "(fn my-interpose [delimiter [x & more]]\n  (lazy-seq\n   (when x\n     (if more\n       (cons x (cons delimiter (my-interpose delimiter more)))\n       (cons x nil)))))", "user": "534056fce4b085b17e897dac"}, {"problem": 40, "code": "(fn [sep l]\n  (drop 1 (mapcat #(list sep %) l)))", "user": "55d74e71e4b0e31453f64aa4"}, {"problem": 40, "code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)) )", "user": "55d44dd6e4b0e31453f64a75"}, {"problem": 40, "code": "#(rest (mapcat list (repeat %1) %2))", "user": "55df3b11e4b050e68259b3ef"}, {"problem": 40, "code": "(fn [v c] (drop-last (flatten (map #(vector % v) c))))", "user": "554d0511e4b0a04f792995b5"}, {"problem": 40, "code": "(fn [el coll]\n  (drop 1 (interleave\n           (repeat el)\n           coll)))", "user": "55d2dd27e4b0e31453f64a5b"}, {"problem": 40, "code": "(fn [i,s] (drop-last (reduce (\n                                       fn [p,n] (conj p n i)\n\n                                       ) [] s)))", "user": "55d42f78e4b0e31453f64a73"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "55e6c3f5e4b050e68259b48c"}, {"problem": 40, "code": "(fn interposse [a l]\n  (if (empty? l)\n    '()\n    (if (= (count l) 1)\n      l          \n      (concat (list (first l) a) (interposse a (rest l))))))", "user": "55e4487ce4b050e68259b44c"}, {"problem": 40, "code": "(fn [e xs] (rest (mapcat list (repeat e) xs)))", "user": "517e9526e4b09104ecebe7e2"}, {"problem": 40, "code": "(fn f [s l]\n  (if (empty? l)\n    '()\n    (if (empty? (rest l))\n      l\n      (concat [(first l)] [s] (f s (rest l))))))", "user": "55e87696e4b0121d4835fd93"}, {"problem": 40, "code": "(fn [sep coll]\n  (butlast (reduce #(concat %1 (list %2 sep)) '() coll)))", "user": "55e70e8de4b050e68259b490"}, {"problem": 40, "code": "#(drop-last (reduce into [] ((fn [fcol v dcol]\n                  (for [x dcol]\n                    (conj fcol x v))) [] % %2)))", "user": "55b0d315e4b002ce9d5cbc26"}, {"problem": 40, "code": "(fn [x coll]\n  (butlast (interleave coll (repeat x))))", "user": "554bd33ce4b0a04f7929959a"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "55dd0aebe4b050e68259b3bf"}, {"problem": 40, "code": "(fn [v c] (butlast (mapcat #(vector % v) c)))", "user": "55ea0dc3e4b0121d4835fda9"}, {"problem": 40, "code": "(fn [n coll] (drop 1 (interleave (repeat n) coll)))", "user": "55e2f502e4b050e68259b43c"}, {"problem": 40, "code": "#(drop-last (mapcat list %2 (repeat %1)))", "user": "53e9dce1e4b036ad0777e4bc"}, {"problem": 40, "code": "(fn [val seq]\n    (loop [i 0 res '[]]\n      (let [cur (nth seq i)]\n        (if (= i (dec (count seq)))\n          (concat res [cur])\n          (recur\n            (inc i)\n            (concat res [cur val]))))))", "user": "53a68c5ae4b0ef122a8689c8"}, {"problem": 40, "code": "#(loop [value %1 [x & xs] %2 res []]\n   (if (empty? xs)\n     (conj res x)\n     (recur value xs (conj res x value))))", "user": "51aa2ad6e4b04e3dc0c27b20"}, {"problem": 40, "code": "(fn [t xs] (drop-last (mapcat #(vector % t) xs)))", "user": "55ecb2c0e4b0121d4835fdce"}, {"problem": 40, "code": "(fn [sep coll] (drop-last (mapcat vector coll (repeat sep))))", "user": "555b5ae4e4b0deb715856e4f"}, {"problem": 40, "code": "(fn [glue pieces]\n  (loop [coll (rest pieces)\n         res [(first pieces)]]\n    (if (empty? coll)\n      res\n      (recur\n        (rest coll)\n        (into res [glue (first coll)])))))", "user": "5530baa5e4b076ab5578f81a"}, {"problem": 40, "code": "(fn [sep coll] (drop-last (mapcat #(identity [% sep]) coll)))", "user": "55dbed2fe4b050e68259b3a6"}, {"problem": 40, "code": "(fn [sep s] (rest (mapcat #(list sep %) s)))", "user": "5573a505e4b0aa18f790f3fa"}, {"problem": 40, "code": "(fn [x list]\n  (drop-last (interleave list (repeat x))))", "user": "55eca2b7e4b0121d4835fdca"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "54290a64e4b01498b1a71b36"}, {"problem": 40, "code": "#(loop [x %1 y %2 r []]\n\t\t (cond \n\t\t    (= (first y) (last y) ) (conj r (first y))\n\t\t   :else (recur x (rest y) (conj r (first y) x  ))))", "user": "55ec04c4e4b0121d4835fdc1"}, {"problem": 40, "code": "(fn [a lst]\n  (drop-last(reduce #(conj %1 %2 a) [] lst))\n  )", "user": "55ed1dc5e4b0121d4835fdd4"}, {"problem": 40, "code": "(fn inter [e s]\n  (if\n   \t(empty? (rest s)) \n    [(first s)]\n  \t(concat [(first s) e] (inter e (rest s)))\n  )\n)", "user": "55efbb2ae4b066087aa9453c"}, {"problem": 40, "code": "(fn [seprator coll]\n \t(let [size (count coll) indexs (range size) r (transient [])]\n      (doseq [index indexs]\n        \t(conj! r (nth coll index))\n        \t(if(not= index (dec size))\n             \t (conj! r seprator)\n             )\n        )\n       (persistent! r)\n      )\n )", "user": "55ec1048e4b0121d4835fdc3"}, {"problem": 40, "code": "#(rest (mapcat vector (repeat (count %2) %1) %2))", "user": "55ed962ae4b0121d4835fddd"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "55ecac8ee4b0121d4835fdcc"}, {"problem": 40, "code": "(fn [mul col] (butlast (interleave col (repeat mul))))", "user": "511e17a9e4b0c5b849dd36b0"}, {"problem": 40, "code": "(fn [v coll] (rest (reduce\n    (fn [res item]\n        (concat res (list v item))\n    )\n    '()\n    coll       \n)))", "user": "55f014ebe4b06e875b46ce1b"}, {"problem": 40, "code": "(fn myInterpose [x coll] (drop-last (mapcat #(vector % x) coll )))", "user": "55e5c852e4b050e68259b474"}, {"problem": 40, "code": "#(butlast(into [] (interleave %2 (cycle (list %)))))", "user": "529c722de4b04e0c58e87b63"}, {"problem": 40, "code": "(fn [n l]\n  (drop-last (interleave l (repeat n))))", "user": "53fc88e7e4b0de5c418485be"}, {"problem": 40, "code": "(fn interpose1 [sep coll]\n  (butlast (mapcat #(list % sep) coll))\n  )", "user": "55f06183e4b06e875b46ce23"}, {"problem": 40, "code": "(fn [i coll]\n  (drop-last (interleave coll (repeat i))))", "user": "500e6ddee4b04a05d36fcc06"}, {"problem": 40, "code": "(fn [filler coll] (->> coll (mapcat #(list filler %1)) (drop 1)))", "user": "539e717fe4b0ca733b974488"}, {"problem": 40, "code": "#(drop-last  (mapcat vector %2 (repeat %1)))", "user": "55f2fdc3e4b06e875b46ce51"}, {"problem": 40, "code": ";; #(butlast (interleave %2 (repeat (count %2) %1)))\n\n#(rest (interleave (repeat (count %2) %1) %2))", "user": "55e1fc42e4b050e68259b424"}, {"problem": 40, "code": "(fn [sep col](butlast (interleave col (repeat sep))))", "user": "55912230e4b027778923767a"}, {"problem": 40, "code": "#(drop-last (mapcat (fn [x] (list x %1)) %2))", "user": "526c669be4b03e8d9a4a728f"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "55f20e4be4b06e875b46ce40"}, {"problem": 40, "code": "(fn my-interpose\n  ([symbol tail] (my-interpose symbol tail []))\n  ([symbol tail result]\n    (if (= (count tail) 0)\n      (take (dec (count result)) result)\n      (my-interpose \n        symbol\n        (rest tail)\n        (conj result (first tail) symbol)\n      )\n    )\n  )\n)", "user": "55f1ce28e4b06e875b46ce37"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "53959edde4b0b51d73faaed8"}, {"problem": 40, "code": "(fn [v arr]\n  (drop-last (mapcat #(vector % v) arr)))", "user": "54d05a9de4b0e8a36923e5c7"}, {"problem": 40, "code": "(fn [i s]\n  (butlast (interleave s (repeat i))))", "user": "5080d6e3e4b01a93d3f38e4b"}, {"problem": 40, "code": "(fn [a, [x & xs]] \n  (cons x (mapcat #(vector a %) xs)) \n  )", "user": "55f5625de4b06e875b46ce86"}, {"problem": 40, "code": "(fn myinterp [elem thelist] (if (= (count thelist) 1) thelist\n (cons (first thelist) (cons elem (myinterp elem (rest thelist))))))", "user": "55f75c6be4b06e875b46cea9"}, {"problem": 40, "code": "#(loop [coll1 %2\n         coll2 '()]\n   (if (= (count coll1) 1)\n     (concat coll2 (list (first coll1)))\n     (recur (rest coll1)\n            (concat coll2 [(first coll1) %]))))", "user": "55eeeb81e4b0121d4835fdf7"}, {"problem": 40, "code": "(fn inter [sep ls]\n  (let [elem (first ls)\n        rem (rest ls)]\n    (cond\n     (empty? ls) ls\n     (empty? rem) [elem]\n     :else (concat [elem sep] (inter sep rem)))))", "user": "524e79c1e4b0541d1855b7e0"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "52ca9513e4b071a8d36bd3e4"}, {"problem": 40, "code": "(fn dsds [ n xs] \n  (let [sz (count xs)] (take (dec (* 2 sz)) (interleave xs (repeat sz n)))))", "user": "55f01316e4b06e875b46ce1a"}, {"problem": 40, "code": "(fn [sep s]\n  (butlast (reduce #(conj %1 %2 sep) [] s)))", "user": "55f9c245e4b03cbcff9738ca"}, {"problem": 40, "code": "(fn [x coll] \n  (drop-last (interleave coll (repeat x))))", "user": "55f7e056e4b06e875b46ceb4"}, {"problem": 40, "code": "(fn prob40 [n col]\n  (loop [n n\n         col col\n         acc []]\n    (if (= (count col) 1)\n      (conj acc (first col))\n      (recur n (rest col) (conj acc (first col) n)))))", "user": "4ebbff41535dfed6da9c6d78"}, {"problem": 40, "code": "(fn f [separator s]\n  (butlast (reduce #(conj (conj %1 %2) separator) [] s)))", "user": "55f8fd70e4b03cbcff9738bc"}, {"problem": 40, "code": "(fn [value coll]\n  (->> coll\n       (map #(list % value))\n       flatten\n       butlast))", "user": "5541fa50e4b0a04f79299515"}, {"problem": 40, "code": "(fn [v l] \n  (drop-last  \n    (flatten \n     (list \n      (map #(list % v) l)\n))))", "user": "55f6c0e2e4b06e875b46ce99"}, {"problem": 40, "code": "(fn [one two] (into [] (butlast (flatten (for [x two] [x one])))))", "user": "54cbd6bae4b057c6fda3a282"}, {"problem": 40, "code": "(fn [el coll]\n  (let [res (mapcat vector coll (repeat el))]\n    (take (- (count res) 1) res)))", "user": "55fbf6cae4b0f488688e066c"}, {"problem": 40, "code": "#(pop (into [] (mapcat vector %2 (repeat %))))", "user": "558ee1c9e4b0277789237659"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last\n   (mapcat #(conj [] % sep) coll)))", "user": "55ed71dae4b0121d4835fdd9"}, {"problem": 40, "code": "(fn _interpose [y xs]\n  (into (empty xs) (drop-last (interleave xs (take (count xs) (repeat y))))))", "user": "55fb58b2e4b0f488688e0661"}, {"problem": 40, "code": "#(->> %2 (map (fn [x] (conj [x] %1))) (flatten) (drop-last))", "user": "55efc44ee4b066087aa9453e"}, {"problem": 40, "code": "(fn f [x xs]\n  (cond \n   (empty? xs) '()\n   (= (count xs) 1) xs\n   :else (cons (first xs) (cons x (f x (rest xs))))))", "user": "55e3e7a8e4b050e68259b44a"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last (mapcat #(list % sep) coll)))", "user": "55fc1f05e4b0f488688e066f"}, {"problem": 40, "code": "(fn ipose ([x y] (ipose x y true))\n  ([x y b] (if (empty? y) \n             nil \n             (if b \n             (cons (first y) (ipose x (rest y) false)) \n             (cons x (ipose x y true))\n             )\n             )\n   ))", "user": "55fdf902e4b00f4cabc5764e"}, {"problem": 40, "code": "(fn [r s]\n  (butlast (flatten (map vector s (repeat r)))))", "user": "55fee5e4e4b00f4cabc5765a"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %) %2 ))", "user": "54534c83e4b0e397800069cd"}, {"problem": 40, "code": "(fn [sep coll] (butlast (flatten (map #(vector % sep) coll))))", "user": "55fe7e15e4b00f4cabc57651"}, {"problem": 40, "code": "#(drop-last(interleave%2(repeat(count%2)%1)))", "user": "55fc8f1fe4b0f488688e0675"}, {"problem": 40, "code": "#(rest (interleave (take (count %2) (repeat %)) %2))", "user": "55f27bf9e4b06e875b46ce45"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "55f6f1d3e4b06e875b46cea0"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %) ))", "user": "55edc088e4b0121d4835fde0"}, {"problem": 40, "code": "(fn [av s]\n  (->> (for [x s]\n         [x av])\n       flatten\n       butlast))", "user": "55ee62dde4b0121d4835fdeb"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "560094a0e4b04bb52996e16b"}, {"problem": 40, "code": "(fn [e c] (butlast (interleave c (repeat (count c) e))))", "user": "55f8b32ae4b03cbcff9738ba"}, {"problem": 40, "code": "(fn [s c] (reduce (fn [a b] (let [r (conj a b)] (if (= (last c) b) r (conj r s))))  []  c))", "user": "55eeb37ae4b0121d4835fdf3"}, {"problem": 40, "code": "(fn [inter se] (butlast (interleave se (repeat inter))))", "user": "56018dd4e4b04bb52996e18f"}, {"problem": 40, "code": "(fn my-interpose [v [c & r :as col]]\n      (cond\n        (empty? col) '()\n        (empty? r) (cons c r)\n        :else (cons c (cons v (my-interpose v r)))))", "user": "50a3ad0ee4b0ceace084d493"}, {"problem": 40, "code": "(fn intp [x [y & ys :as all]] (if (not ys) all (cons y (cons x (intp x ys)))))", "user": "5600f8c7e4b04bb52996e176"}, {"problem": 40, "code": "(fn [n n-list]\n  (loop [n-list n-list  \n         acc       []]\n    (if (= 1 (count n-list))\n      (conj acc (first n-list ))\n      (recur (rest n-list) (conj acc (first n-list) n)))))", "user": "558053b1e4b05c286339e0e9"}, {"problem": 40, "code": "(fn [delimiter col] (drop-last (mapcat #(conj [] % delimiter) col)))", "user": "55f2b42be4b06e875b46ce4a"}, {"problem": 40, "code": "(fn ip\n  [e sq]\n  (butlast (apply concat (map \n    (fn [n] (conj (vector n) e)) sq))))", "user": "55f7c873e4b06e875b46ceb0"}, {"problem": 40, "code": "(fn [x s] \n  (rest (mapcat #(vector x %1) s) ))", "user": "55fbcbd1e4b0f488688e0669"}, {"problem": 40, "code": "(fn [v xs] (drop 1 (mapcat vector (repeat v) xs)))", "user": "55f081bbe4b06e875b46ce25"}, {"problem": 40, "code": "(fn[n s](\n         butlast (mapcat (fn[a][a n]) s)\n         \n         ))", "user": "56039843e4b04bb52996e1be"}, {"problem": 40, "code": "; third: butlast is O(n)\n(fn [x s] (butlast (interleave s (repeat x))))\n\n; second: butlast is O(n)\n#_(fn [x s] (butlast (mapcat #(list % x) s)))\n\n; first: into is O(n); (pop vector) is O(1)\n#_(fn [x s] (pop (into [] (mapcat #(list % x) s))))", "user": "55e7d06ee4b050e68259b496"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "55fbcbb1e4b0f488688e0668"}, {"problem": 40, "code": "(fn [sep s]\n  (butlast (mapcat (fn [a b] [a b]) s (repeat sep))))", "user": "5461dc79e4b01be26fd746a8"}, {"problem": 40, "code": "(fn \n  [item in-array]\n  (reduce\n   (fn [acc i]\n     (if (empty? acc)\n       (conj acc i)\n\t   (conj (conj acc item) i))\n     )\n   []\n   in-array))", "user": "53c6c9dfe4b00fb29b2212a1"}, {"problem": 40, "code": "#(next (interleave (repeat %1) %2))", "user": "56035afae4b04bb52996e1b9"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5602ab92e4b04bb52996e1a3"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last)", "user": "56047160e4b0c80df0ca265d"}, {"problem": 40, "code": "(fn [comma lst]\n  (loop [in lst out []]\n    (if (= (count in) 1)\n      (conj out (first in))\n      (recur (rest in) (conj out (first in) comma)))))", "user": "5604bcf7e4b08b23635d315a"}, {"problem": 40, "code": "(fn [v s] \n  (rest (flatten (map #(vector v %1) s))))", "user": "5606a4ace4b08b23635d3175"}, {"problem": 40, "code": "#(cons\n    (first %2)\n    (interleave\n     (repeat %1)\n     (rest %2)))", "user": "55fe5dfae4b00f4cabc57650"}, {"problem": 40, "code": "(fn\n  [a b]\n  (cond\n   (= 3 (count b)) (list (nth b 0) a (nth b 1) a (nth b 2))\n   :else (list (nth b 0) a (nth b 1) a (nth b 2) a (nth b 3)\n               )))", "user": "55e732c5e4b050e68259b492"}, {"problem": 40, "code": "#(concat (list (first %2)) (mapcat list (repeat (dec (count %2)) %1) (rest %2)))", "user": "55f95de6e4b03cbcff9738c1"}, {"problem": 40, "code": "#(take (- (* 2 (count %2)) 1)\n       (interleave %2 (repeat %1)))", "user": "5410499de4b01498b1a719a6"}, {"problem": 40, "code": "(fn [s xs] (into [(first xs)] (mapcat #(list s %1) (rest xs))))", "user": "560794bde4b08b23635d3182"}, {"problem": 40, "code": "(fn [s l]\n  (butlast (mapcat #(vector % s) l)))", "user": "541df0b5e4b01498b1a71a86"}, {"problem": 40, "code": "(fn [delim xs] (butlast (interleave xs (repeat delim))))", "user": "5601bb7ee4b04bb52996e195"}, {"problem": 40, "code": "#(rest (for [a %2 b [% a]] b))", "user": "50746e23e4b054001656acd1"}, {"problem": 40, "code": "#(drop-last 1 (interleave %2 (repeat %1)))", "user": "560843dee4b046a4fc0ac00e"}, {"problem": 40, "code": "(fn [x coll] (butlast (interleave coll (repeat x))))", "user": "55f3802be4b06e875b46ce5f"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5609866ee4b0053d1b86c7e3"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat (count %2) %1)))", "user": "55810c73e4b05c286339e0f2"}, {"problem": 40, "code": "#(rest (flatten (map (fn [x] [%1 x]) %2)))", "user": "560aed59e4b05f002753df11"}, {"problem": 40, "code": "(fn my-interpose\n  [sep s]\n  (butlast (mapcat #(vector % sep) s)))", "user": "56084e91e4b046a4fc0ac00f"}, {"problem": 40, "code": "(fn [sep l]\n  (loop [cl nil\n         m  l]\n    (if (nil? cl)\n      (recur [(first m)] (next m))\n      (if (nil? m)\n        cl\n        (recur (conj (conj cl sep) (first m)) (next m))))))", "user": "56051095e4b08b23635d3162"}, {"problem": 40, "code": "(fn [x s] \n  (rest (mapcat #(vector x %1) s) ))", "user": "560a7775e4b05f002753defa"}, {"problem": 40, "code": "(fn [sep xs] (butlast (reduce (fn [a b] (conj a b sep)) [] xs)))", "user": "523e12bde4b09833704079a2"}, {"problem": 40, "code": "(fn [v s]\n  (vec (flatten (conj (mapv (fn [x] [x v]) (butlast s)) (last s)))))", "user": "560ac5cae4b05f002753df09"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "560039cce4b04bb52996e162"}, {"problem": 40, "code": "(fn [n coll]\n  (drop-last (reduce #(conj %1 %2 n) [] coll))\n  \n  )", "user": "560768a0e4b08b23635d317f"}, {"problem": 40, "code": "(fn [sep coll] (butlast (interleave coll (repeat sep))))", "user": "55e274b4e4b050e68259b436"}, {"problem": 40, "code": "#(conj ( mapcat (partial vector %) (next %2)) (first %2))", "user": "5603c31fe4b04bb52996e1c1"}, {"problem": 40, "code": "(fn [a b] (reduce #(if (coll? %1) (conj %1 a %2) (vector %1 a %2)) b) )", "user": "55e2d527e4b050e68259b43a"}, {"problem": 40, "code": "(fn [n xs]\n  (loop [xs xs result []]\n    (if (empty? xs)\n      (take (dec (count result)) result)\n      (recur (rest xs) (conj result (first xs) n)))))", "user": "55f90d76e4b03cbcff9738bd"}, {"problem": 40, "code": "(fn my-interpose [x xs]\n  (butlast (mapcat vector xs (repeat x))))", "user": "5606ea56e4b08b23635d317b"}, {"problem": 40, "code": "#(cons (first %2) (mapcat (fn [x] [%1 x]) (rest %2)))", "user": "560a7b46e4b05f002753defb"}, {"problem": 40, "code": "(fn [i ys] (letfn [(my-interpose [n xs]\n  (if (= (count xs) 1)\n    (conj xs n)\n    (conj (my-interpose n (rest xs)) (first xs) n)))]\n  (rest (my-interpose i ys))))", "user": "560ae540e4b05f002753df0d"}, {"problem": 40, "code": "(fn ip [ i l]\n  (if-let [v (first l)]\n    (if-let [r (seq (rest l))]\n      (conj (ip i r) i v)\n      (list v))\n    '()))", "user": "55f04526e4b06e875b46ce20"}, {"problem": 40, "code": "#(pop (into [] (mapcat (fn [x]\n           (vector x %1)) %2)))", "user": "5605b5e9e4b08b23635d316e"}, {"problem": 40, "code": "(fn [s col] \n  (loop [c col, ret []]\n     (cond (empty? c) \n           ret\n           (= (count c) 1)\n           (recur (rest c) (conj ret (first c)))\n           :else\n\t\t   (recur (rest c) (conj ret (first c) s)))))", "user": "501fe6fae4b0cb6ebc0a42ef"}, {"problem": 40, "code": "(fn [v c] (reduce #(concat %1 [v %2]) (take 1 c) (rest c)))", "user": "561047eae4b05f002753df6d"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "560e9a2de4b05f002753df52"}, {"problem": 40, "code": "(fn [y xs]\n  (loop [xs xs\n         acc []]\n  \t(if-let [[x & more-xs] (seq xs)]\n\t  (if (seq more-xs)\n        (recur more-xs (conj acc x y))\n        (recur more-xs (conj acc x)))\n      acc)))", "user": "4ff24a1ae4b0678c553fc337"}, {"problem": 40, "code": "(fn [x y] (drop 1 (interleave (repeat x) y)))", "user": "55bb1b26e4b01b9910ae29e0"}, {"problem": 40, "code": "(fn [e s] \n  (drop-last (reduce \n   (fn [res v] (conj (conj res v) e))\n   [] s)))", "user": "56011393e4b04bb52996e178"}, {"problem": 40, "code": "#(loop [inter %1 coll %2 answer []]\n   (if (empty? coll)\n     (butlast answer)\n     (recur\n      inter (rest coll) (conj (conj answer (first coll)) inter))))", "user": "560fe558e4b05f002753df63"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5505d137e4b086ebe8a79c8c"}, {"problem": 40, "code": "#(next (interleave (repeat %1) %2))", "user": "55d9743ae4b0e31453f64aca"}, {"problem": 40, "code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "user": "55a65872e4b09e57187da299"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "560d491ae4b05f002753df3b"}, {"problem": 40, "code": "(fn minterpose\n  [sep xs]\n  (->> (repeat sep)\n       (interleave xs)\n       butlast))", "user": "52606318e4b03e8d9a4a7036"}, {"problem": 40, "code": "(fn [i s] (drop-last (interleave s (repeat (count s) i))))", "user": "50a00725e4b08df8156e9e46"}, {"problem": 40, "code": "(fn [sep coll] (butlast (interleave coll (repeat sep))))", "user": "50523848e4b0a561d07d8f1a"}, {"problem": 40, "code": "(fn [inter coll]\n  (reverse (loop [coll coll\n         inter inter\n         acc (empty coll)]\n    (if (empty? coll)\n      acc\n      (if (= (count coll) 1)\n        (cons (first coll) acc)\n        (recur (rest coll) inter (cons inter (cons (first coll) acc))))))))", "user": "5613a96ae4b05f002753dfa4"}, {"problem": 40, "code": "(fn f [a b] \n  (cons (first b) (mapcat #(vector %1 %2) (repeat a) (drop 1 b))))", "user": "4f6ba7bce4b07046d9f4efb0"}, {"problem": 40, "code": "(fn [s xs]\n  (butlast (mapcat #(list % s) xs)))", "user": "52aaabf7e4b0c58976d9ac68"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "55f2c898e4b06e875b46ce4b"}, {"problem": 40, "code": "(fn my-interpose [delimiter lst]\n  (if\n    (= (count lst) 1) lst\n    (concat [(first lst)] [delimiter] (my-interpose delimiter (next lst)))))", "user": "56069006e4b08b23635d3174"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "55f330dde4b06e875b46ce56"}, {"problem": 40, "code": "(fn [x s]\n  (drop-last (mapcat #(list %1 x) s)))", "user": "560dfa8de4b05f002753df46"}, {"problem": 40, "code": "#(butlast (apply vector (mapcat (fn [a] (vector a %)) %2)))", "user": "55f09e7be4b06e875b46ce28"}, {"problem": 40, "code": "(fn [x y] (butlast(interleave y (repeat x))))", "user": "5614fa1de4b05f002753dfbe"}, {"problem": 40, "code": "(fn [val xs] \n  (cons (first xs)\n        (mapcat list (repeat val) (rest xs))))", "user": "5573ffb5e4b0aa18f790f3fd"}, {"problem": 40, "code": "(fn [x y] (drop-last (flatten (map (fn [item] [item x]) y))))", "user": "56152a26e4b05f002753dfc1"}, {"problem": 40, "code": "(fn fun\n  ([x y] (fun x (rest y) (vector x (first y))))\n  ([x y lista]\n   (if (= (count y) 1)\n     (reverse (cons (first y) lista))\n     (fun x (rest y) (cons x (cons (first y) lista))))))", "user": "560ff632e4b05f002753df66"}, {"problem": 40, "code": "(fn my-interpose\n  [sep coll]\n  (rest (interleave (repeat sep) coll)))", "user": "56180d83e4b06b1bb2182a18"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "user": "5617b1c0e4b06b1bb2182a13"}, {"problem": 40, "code": "(fn [x coll]\n  (drop-last \n   (mapcat #(list % x) coll)))", "user": "56163cc1e4b06b1bb21829ff"}, {"problem": 40, "code": "(fn inpose [ elem [ head & tail ]]\n  (cons head  (when (seq tail) (cons elem (lazy-seq (inpose elem tail))))))", "user": "5610d39de4b05f002753df75"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "5617db88e4b06b1bb2182a16"}, {"problem": 40, "code": "#(drop 1 (mapcat vector (repeat (count %2) %1) %2))", "user": "55ec4558e4b0121d4835fdc5"}, {"problem": 40, "code": "(fn \n  [n coll]\n  (drop 1 (mapcat #(vector %1 %2) (repeat n) coll))\n         )", "user": "4f5e5975e4b0030a34fb2b4d"}, {"problem": 40, "code": "(fn my-interpose [value [x & more]]\n  (lazy-seq\n   (when x\n     (if more\n       (cons x (cons value (my-interpose value more)))\n       (cons x nil)))))", "user": "56038f34e4b04bb52996e1bc"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "52f3568fe4b05e3f0be25f0e"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "55e8a85be4b0121d4835fd98"}, {"problem": 40, "code": "(fn [x coll]\n  (let [xcoll (repeat (count coll) x)\n    \tlcoll (mapcat vector coll xcoll)\n        n (- (count lcoll) 1)]\n    (take n lcoll)))", "user": "5521248fe4b08d5046aa8a69"}, {"problem": 40, "code": "(fn [d s]\n  (rest (mapcat #(list d %) s)))", "user": "561ba3e5e4b073c65b0ce3eb"}, {"problem": 40, "code": "(fn myinterpose\n  ([s xs] (myinterpose [] s xs))\n  ([acc s [x & xs]]\n   (if (seq xs)\n     (myinterpose (conj acc x s) s xs)\n     (conj acc x))))", "user": "53ab1ef6e4b047364c04444b"}, {"problem": 40, "code": "#(rest (mapcat vector (repeat %1) %2))", "user": "561ca2eae4b064ca9f4b169b"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "561c0278e4b064ca9f4b1691"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5033ed65e4b062bc5d7ae15a"}, {"problem": 40, "code": "#(-> (interleave (repeat %1) %2) rest)", "user": "5619a4d0e4b053970a773afd"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "55022d7ce4b07d26eda61d84"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "53da059be4b0e771c302547e"}, {"problem": 40, "code": "(fn [v s] (butlast (flatten (map vector s (repeatedly (fn [] v))))))", "user": "5595a88ee4b0c79f6e1db96e"}, {"problem": 40, "code": "(fn interpose-ms [v coll]  (butlast (mapcat #(list % v) coll)))", "user": "561ca6ebe4b064ca9f4b169c"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "560ae7e6e4b05f002753df0e"}, {"problem": 40, "code": "#(rest (mapcat list (repeat %1) %2))", "user": "561f9110e4b064ca9f4b16ce"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "561ff621e4b064ca9f4b16d6"}, {"problem": 40, "code": "(fn my-interpose [v seq1]\n  (let [map-fn (fn [v1 v2] [v2 v1])]\n    (pop (vec (mapcat (partial map-fn v) seq1)))))", "user": "561d8936e4b064ca9f4b16b2"}, {"problem": 40, "code": "(fn [sep items]\n  (rest (mapcat vector (repeat (count items) sep) items)))", "user": "56205609e4b064ca9f4b16df"}, {"problem": 40, "code": "#(next (interleave (repeat %1) %2))", "user": "5616f411e4b06b1bb2182a0a"}, {"problem": 40, "code": "(fn [separator xs]\n  (drop-last (mapcat list xs (repeatedly #(identity separator)))))", "user": "521ceb02e4b0c4ef0be830a5"}, {"problem": 40, "code": "(fn [il sq] (drop-last (interleave sq (repeat (count sq) il))))", "user": "55fcaccfe4b0f488688e0679"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last (mapcat list coll (repeat (count coll) sep))))", "user": "4f40c46fe4b0e243712b1fbe"}, {"problem": 40, "code": "(fn v ([x y] (v x y (empty y)))\n      ([x y z] (if (empty? (rest y))\n                 (conj z (first y))\n                 (recur x (rest y) (conj z (first y) x)))))", "user": "55cf0d0ee4b0e31453f64a2b"}, {"problem": 40, "code": "(fn moo\n  [sep coll] (drop 1 (interleave (repeat sep) coll)))", "user": "56215c8ee4b03f08ee9a921a"}, {"problem": 40, "code": "(fn [x s]\n  (rest (interleave (repeat x) s)))", "user": "56228d00e4b03f08ee9a9227"}, {"problem": 40, "code": "(fn [n x]\n  (loop [xs x res []]\n    (if (empty? xs) res (recur (next xs)(if (empty? res)(conj res (first xs))(conj res n (first xs)))))))", "user": "561e2b33e4b064ca9f4b16ba"}, {"problem": 40, "code": "(fn [val [h & xs]] (conj (mapcat #(list val %) xs) h))", "user": "561d23e3e4b064ca9f4b16a5"}, {"problem": 40, "code": "(fn [s c] (conj (mapcat #(vector s %) (rest c)) (first c)))", "user": "55d28b38e4b0e31453f64a58"}, {"problem": 40, "code": "(fn [x s]\n  (vec (butlast (mapcat #(list % x) s))))", "user": "54b54d1be4b05787c3b1639c"}, {"problem": 40, "code": "(fn [tween s] (flatten (conj (list (last s)) (mapcat #(list % tween) (reverse (rest (reverse s)))))))", "user": "54a634abe4b09f271ff37c84"}, {"problem": 40, "code": "(fn ff [inter s]\n    (loop [result []\n           firs (first s)\n           res (rest s)]\n        (if (> (count res) 0)\n            (recur (conj result firs inter)\n                   (first res)\n                   (rest res))\n            (conj result firs)\n        )\n    )\n)", "user": "56195e57e4b053970a773af6"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "55f6fe09e4b06e875b46cea2"}, {"problem": 40, "code": "(fn delim [stop s]\n  (butlast (interleave s (repeat stop) )))", "user": "561eb82fe4b064ca9f4b16c7"}, {"problem": 40, "code": "(fn [n s]\n    (loop [s s\n           acc '()]\n      (cond\n        (=  (count s) 1) (reverse (cons (first s) acc))\n        :else (recur (rest s) (cons n (cons (first s) acc))))))", "user": "5600dccee4b04bb52996e175"}, {"problem": 40, "code": "(fn [d a]\n   (loop [x (rest a)\n          r (conj [] (first a))]\n     (if (empty? x)\n       r\n       (recur (rest x) (conj (conj r d) (first x))))))", "user": "56171eade4b06b1bb2182a0c"}, {"problem": 40, "code": "(fn f[x l] \n  (drop-last (reduce concat (map vector l (repeat (count l) x)))))", "user": "5626447fe4b00e49c7cb47bd"}, {"problem": 40, "code": "(fn [x lst] (loop [out '() l1 lst] (if (empty? l1) (rest (reverse out)) (recur (conj (conj out x) (first l1)) (rest l1) ))))", "user": "55f1d5dfe4b06e875b46ce38"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %) %2))", "user": "50e09313e4b061dbdced7233"}, {"problem": 40, "code": "#(loop [xs %2 r []]\n     (if (empty? xs)\n       (pop r)\n       (recur (rest xs) (conj r (first xs) %1))\n       )\n     )", "user": "5628cb07e4b00e49c7cb47ef"}, {"problem": 40, "code": "(fn ipose[sep coll]\n  (seq (butlast (flatten (map (fn[elem] [elem sep]) coll)))))", "user": "5537b2c7e4b09218d5f44fce"}, {"problem": 40, "code": "(fn [s xs] (pop (into [] (mapcat #(vector % s) xs)) ) )", "user": "5627d09ce4b00e49c7cb47db"}, {"problem": 40, "code": "(fn [n s] (apply vector (rest (mapcat #(cons n %) (partition 1 s)))))", "user": "562326cbe4b03f08ee9a9230"}, {"problem": 40, "code": "(fn [x coll]\n  (->> coll\n       (mapcat #(vector % x))\n       reverse rest reverse))", "user": "562c15d3e4b058fa18c5a6d5"}, {"problem": 40, "code": "(fn [c l]\n  (drop-last (mapcat list l (repeat c))))", "user": "55bf6dbce4b01b9910ae2a12"}, {"problem": 40, "code": "(fn [sep coll]\n  (butlast (mapcat vector coll (repeat sep))))", "user": "5629dfaae4b00e49c7cb4813"}, {"problem": 40, "code": "(fn [sep xs]\n  (rest \n    (apply concat \n           (map #(list sep %) xs))))", "user": "562cd94ee4b0a45d2ff83015"}, {"problem": 40, "code": "(fn [sep coll] (butlast (reduce concat (for [e coll] [e sep]))))", "user": "53b1db8ee4b047364c044495"}, {"problem": 40, "code": "(fn [i xs]\n  (flatten\n   (cons (first xs)\n         (map #(conj [i] %) (rest xs)))))", "user": "55d68726e4b0e31453f64a99"}, {"problem": 40, "code": "#(drop-last(interleave %2 (repeat (count %2) %1)))", "user": "53623eaee4b0243289761e4f"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "535558b9e4b04ce2eb3ed25a"}, {"problem": 40, "code": "(fn my-interpose [sep col]\n  (if (empty? (rest col))\n    (list (first col))\n    (concat (list (first col) sep) (my-interpose sep (rest col)))))", "user": "562e05e0e4b0a45d2ff83023"}, {"problem": 40, "code": "#(loop [sq %2, r []]\n   (if (empty? sq)\n     (drop 1 r)\n     (recur (rest sq) (conj r %1 (first sq)))))", "user": "55fc07d3e4b0f488688e066e"}, {"problem": 40, "code": "#(loop [c %2 r []]\n    (if (empty? c)\n      r\n      (recur (rest c) ( if(empty? (rest c)) (conj r (first c)) (conj (conj r (first c)) %1)))))", "user": "5614ebc5e4b05f002753dfbc"}, {"problem": 40, "code": "(fn [x coll]\n  (butlast (interleave coll (repeat x))))", "user": "562cb7cfe4b0a45d2ff83009"}, {"problem": 40, "code": "(fn [x coll]\n (flatten \n  (first \n   (split-at (- (* 2 (count coll)) 1) (flatten (map #(list %1 x) coll))))))", "user": "562db4d1e4b0a45d2ff83021"}, {"problem": 40, "code": "(fn [i c] (drop-last (reduce (fn [v x] (conj (conj v x) i)) [] c)))", "user": "55f95782e4b03cbcff9738bf"}, {"problem": 40, "code": "#(let [c (count %2)]\n   (butlast (interleave %2 (take c (repeat %1)))))", "user": "5578f292e4b05c286339e08f"}, {"problem": 40, "code": "#(butlast (mapcat vector %2 (take (count %2) (repeat %1))))", "user": "55ed9108e4b0121d4835fddc"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "56278266e4b00e49c7cb47d3"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %)))", "user": "55e06f82e4b050e68259b40d"}, {"problem": 40, "code": "(fn intp [delim li]\n  ;(if (empty? li) nil  ;; yuck\n    (if (empty? (rest li)) li\n      (cons (first li) \n            (cons delim \n                  (intp delim (rest li))))));)", "user": "5627444fe4b00e49c7cb47cd"}, {"problem": 40, "code": "(fn [separator c] \n  (let [init [(first c)]\n        other (rest c)]\n    (reduce\n      (fn [a b] (conj a separator b))\n      init\n      other)))", "user": "562e8b2be4b0ab312c17ebbb"}, {"problem": 40, "code": "(fn [e c]\n       (drop-last (interleave c (repeat (count c) e))))", "user": "551e6526e4b030e6a24d00e8"}, {"problem": 40, "code": "(fn interps\n  [v s]\n  (let [l (last s)\n        b (take (- (count s) 1) s)]\n    (concat (mapcat #(vector % v) b) [l])))", "user": "562fb774e4b0ab312c17ebd9"}, {"problem": 40, "code": "(fn [ob1 ob2]\n             (let [len (count ob2)]\n               (loop [ret () i 0]\n                   (if (= i 0)\n                     (recur (conj ret (nth ob2 i)) (+ i 1))\n                     (if (= i len)\n                       (reverse ret)\n                       (recur (conj ret ob1 (nth ob2 i)) (+ i 1)))))))", "user": "56305383e4b073c1cf7a9be6"}, {"problem": 40, "code": "(fn custom-interpose\n  [padding input-seq]\n  (drop-last\n   (mapcat #(list % padding) input-seq)))", "user": "4fc524aae4b081705acca37e"}, {"problem": 40, "code": "(fn [f a] (reverse (drop 1 (reverse (mapcat #(conj (vector %) f) a)))))", "user": "561a1af6e4b053970a773b02"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "562b57c7e4b058fa18c5a6cc"}, {"problem": 40, "code": "#(drop-last (interleave %2 (cycle [%1])))", "user": "561a060ee4b053970a773b01"}, {"problem": 40, "code": "(fn [x col] (butlast (mapcat #(list % x) col )))", "user": "56102f50e4b05f002753df6b"}, {"problem": 40, "code": "(fn [inter a]\n  (loop [lst () fir a]\n    (if (= (count fir) 1) (reverse (conj lst (first fir)))\n      (recur (conj lst (first fir) inter ) (rest fir)))))", "user": "563130e4e4b0bfe05bf1178d"}, {"problem": 40, "code": "#(drop-last (mapcat (fn[s](list s %1)) %2))", "user": "561cad18e4b064ca9f4b169d"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "558b41fce4b0277789237628"}, {"problem": 40, "code": "(fn [sep coll]\n  (butlast (mapcat #(list % sep) coll)))", "user": "5592ba8be4b0c79f6e1db931"}, {"problem": 40, "code": "(fn [cc ss] (\n(fn interp [v s c]\n  (let [f (first s)\n        r (rest s)]\n    (if (nil? f) v (interp (conj (if (seq? (seq v)) (conj v c) v) f) r c))\n  )\n) [] ss cc))", "user": "562b1a7be4b058fa18c5a6cb"}, {"problem": 40, "code": "(fn f [s xs] \n  (if (empty? (rest xs)) \n    xs \n    (cons (first xs) (conj (f s (rest xs)) s))))", "user": "560c31b4e4b05f002753df2d"}, {"problem": 40, "code": "#(concat (reduce (fn [r v] (concat r (list v %1))) '() (butlast %2)) (list (last %2)))", "user": "56372798e4b0bfe05bf117d0"}, {"problem": 40, "code": "(fn [glue [p & others]]\n  (flatten \n   (cons p (for [x others]\n    [glue x]))))", "user": "562fd63be4b0ab312c17ebde"}, {"problem": 40, "code": "#(butlast (flatten (for [x %2] [x %1])))", "user": "56347285e4b0bfe05bf117bc"}, {"problem": 40, "code": "(fn [x coll]\n  (butlast (mapcat #(list % x) coll)))", "user": "5630fd6fe4b0bfe05bf1178b"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "563799f8e4b0bfe05bf117db"}, {"problem": 40, "code": "(fn [d sq]\n  (reduce \n   #(if (empty? %1) \n      (conj %1 %2)\n      (conj %1 d %2))\n   [] sq))", "user": "56366f73e4b0bfe05bf117cc"}, {"problem": 40, "code": "(fn [sep c]\n  (conj (mapcat vector (repeat sep) (rest c))\n        (first c)))", "user": "4f0366b0535dcb61093f6aa9"}, {"problem": 40, "code": "(fn my-inter\n  [thing l]\n  (let [inter (fn inter\n    [thing l]\n    (if (empty? l)\n    (list)\n    (cons thing (cons (first l) (inter thing (rest l))))))]\n    \n    (rest (inter thing l))))", "user": "56393681e4b0bfe05bf117f2"}, {"problem": 40, "code": "#(rest \n  (mapcat (partial vector %1) %2))", "user": "54995298e4b0b312c081ff8b"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last)", "user": "56399b7ee4b0bfe05bf117f5"}, {"problem": 40, "code": "#(drop-last 1 (interleave %2 (repeat %1)))", "user": "563a30d7e4b0bfe05bf117f9"}, {"problem": 40, "code": "#(vec (drop-last (interleave %2 (repeat %1))))", "user": "522a5bdde4b0590a43906cf8"}, {"problem": 40, "code": "(fn [sep src]\n    (rest (flatten (map #(vector sep %) src))))", "user": "55c13e73e4b01b9910ae2a2f"}, {"problem": 40, "code": "#(drop-last (vec (interleave %2 (repeat %1))))", "user": "5632b0a9e4b0bfe05bf117a8"}, {"problem": 40, "code": "(fn [sep xs] (drop-last (mapcat list  xs (repeat sep))))", "user": "54ff074de4b07d26eda61d47"}, {"problem": 40, "code": "(fn [a b] (drop-last (flatten (take-nth (count b) (for [x b y (take (count b) (repeat a))] [x y])))))", "user": "563e7a33e4b0da801c4e466d"}, {"problem": 40, "code": "(fn [x y] (cons (first y) (mapcat #(list x %) (rest y))))", "user": "55c49394e4b0e31453f6499e"}, {"problem": 40, "code": "(fn [val coll]\n   (loop [out []\n          c1 coll]\n     (if (empty? c1)\n       (drop-last out)\n       (recur (conj out (first c1) val)\n              (drop 1 c1)))))", "user": "5633bb9de4b0bfe05bf117b4"}, {"problem": 40, "code": "(fn\n   [sep col]\n   (drop-last(mapcat \n    #(conj [] % sep) \n    col)))", "user": "56083383e4b046a4fc0ac00a"}, {"problem": 40, "code": "(fn [sep coll] (rest (mapcat #(list sep %) coll)))", "user": "56174d86e4b06b1bb2182a0e"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "56388a0fe4b0bfe05bf117e7"}, {"problem": 40, "code": "#(drop-last  (into [] (apply concat (map (fn [a] [a %]) %2))))", "user": "5604ae27e4b0c80df0ca2663"}, {"problem": 40, "code": "(fn [deli s] (drop-last (reduce #(conj %1 %2 deli) [] s)))", "user": "544e6b7fe4b0e39780006986"}, {"problem": 40, "code": "(fn [x y]\n  (loop [index 0 result []]\n    (cond (= index (count y)) result\n          (= index (dec (count y))) (recur (inc index) (conj result (nth y index)))\n          :else (recur (inc index) (conj result (nth y index) x)))))", "user": "56288ccae4b00e49c7cb47ea"}, {"problem": 40, "code": "(fn [joiner col] (drop-last (reduce #(conj %1 %2 joiner) [] col)))", "user": "52d68ed2e4b09f7907dd1362"}, {"problem": 40, "code": "#(rest (loop [result []\n             input %2]\n        (if (first input)\n          (recur (conj result %1 (first input) ) (rest input))\n          result)))", "user": "546b24a0e4b00cfc9eacc166"}, {"problem": 40, "code": "(fn ipose [k x] (butlast (mapcat list x (repeat k))))", "user": "563b559ee4b0bfe05bf1180d"}, {"problem": 40, "code": "(fn [d a]\n  (map \n   (fn [n]\n     \t(if (even? n)\n               (nth a (quot n 2))\n          d))\n    (range (- (* 2 (count a)) 1))))", "user": "52179e00e4b0ea2f1c31c8d3"}, {"problem": 40, "code": "(fn [e xs]\n   (let [l (dec (count xs))]\n     (prn l)\n     (flatten (map-indexed (fn [i x] (if (< i l) [x e] [x])) xs))))", "user": "563ed73ae4b08d4f616f5ecb"}, {"problem": 40, "code": "(fn [x s] \n  (->> s\n  (reduce (fn [res h] (conj res h x)) [])\n   (pop)))", "user": "563ddefee4b0bfe05bf11857"}, {"problem": 40, "code": "(fn my-interpose\n  [v s]\n  (cond\n    (empty? s) '()\n    (empty? (rest s)) s\n    :else (cons (first s) (cons v (my-interpose v (rest s))))))", "user": "563f1493e4b08d4f616f5ecf"}, {"problem": 40, "code": "#(rest (mapcat list (repeat %1) %2))", "user": "55c6fd60e4b0e31453f649c9"}, {"problem": 40, "code": "(comp drop-last #(interleave  %2  (repeat %1)))", "user": "563f2eaae4b08d4f616f5ed1"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "52f16601e4b05e3f0be25eec"}, {"problem": 40, "code": "#(reduce (fn [result x] (conj result %1 x)) [(first %2)] (rest %2))", "user": "564127a9e4b08d4f616f5ef3"}, {"problem": 40, "code": "#(drop-last (flatten (map vector %2 (repeat %1))))", "user": "5632abbee4b0bfe05bf117a7"}, {"problem": 40, "code": "(fn [i c](rest (mapcat #(list i %) c)) )", "user": "562f2985e4b0ab312c17ebc5"}, {"problem": 40, "code": "#(butlast (into [] (apply concat (for [x %2] [x %1]))))", "user": "52a3c66ce4b04e0c58e87c04"}, {"problem": 40, "code": "(fn inter [x [y & ys]]\n  (if (nil? ys)\n    (list y)\n    (concat (list y x) (inter x ys))))", "user": "56339e23e4b0bfe05bf117b1"}, {"problem": 40, "code": "(fn [sep lst]\n  (rest (flatten (map (fn [x] [sep x]) lst))))", "user": "5642b939e4b08d4f616f5f1b"}, {"problem": 40, "code": "(fn[pad coll] (drop-last (flatten (map #(vector %1 pad) coll))))", "user": "561d7246e4b064ca9f4b16b1"}, {"problem": 40, "code": "(fn [v xs]\n   (conj (mapcat #(list v %) (rest xs)) (first xs)))", "user": "5641296de4b08d4f616f5ef4"}, {"problem": 40, "code": "#(rest (mapcat (partial list %1) %2))", "user": "505fdf63e4b08f2a82ad10b9"}, {"problem": 40, "code": "(fn [x s] \n  (rest (mapcat #(vector x %1) s) ))", "user": "5634995fe4b0bfe05bf117be"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5639e878e4b0bfe05bf117f7"}, {"problem": 40, "code": "(fn [sep sq]\n   (reduce #(into %1 [sep %2]) [(first sq)] (rest sq)))", "user": "563772a9e4b0bfe05bf117d7"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "55eb026de4b0121d4835fdb7"}, {"problem": 40, "code": "(fn myinterpose\n  [sep [s0 & srest]]\n  (cond\n    (empty? srest) (list s0)\n    :else (concat (list s0 sep) (myinterpose sep srest))))", "user": "54145050e4b01498b1a719ea"}, {"problem": 40, "code": "(fn [sep coll]\n   (conj (reduce #(conj %1 %2 sep) (empty coll) (butlast coll))\n         (last coll)))", "user": "56372c3ce4b0bfe05bf117d1"}, {"problem": 40, "code": "#(rest (mapcat vector (repeat %1) %2))", "user": "5619b22ee4b053970a773afe"}, {"problem": 40, "code": "(fn [x y] (drop 1 (mapcat (partial list x) y)))", "user": "56304db8e4b073c1cf7a9be5"}, {"problem": 40, "code": "(fn [value y] (butlast (mapcat #(list % value) y)))", "user": "562d869be4b0a45d2ff8301f"}, {"problem": 40, "code": "#(next (flatten (map vector (repeat (count %2) %1) %2)))", "user": "5632e850e4b0bfe05bf117ac"}, {"problem": 40, "code": "(fn [n coll]\n  (butlast (apply concat (map (fn [x] [x n]) coll))))", "user": "564583f0e4b0284900eef607"}, {"problem": 40, "code": "(fn [x coll] (rest (mapcat list (repeat x) coll)))", "user": "56466fb1e4b0284900eef613"}, {"problem": 40, "code": "#_(fn interpose' [interposer coll]\n  (reduce (fn [accum item]\n            (conj accum interposer item))\n          [(first coll)]\n          (rest coll)))\n\n(fn il [n xs]\n  (butlast (interleave xs (take (count xs) (repeat n)))))", "user": "563fc1f2e4b08d4f616f5ed7"}, {"problem": 40, "code": "(fn [y l] (drop-last (mapcat (fn [x] [x y]) l)))", "user": "5630471ce4b073c1cf7a9be4"}, {"problem": 40, "code": "(fn [x l] (conj (mapcat #(list x %) (rest l)) (first l)))", "user": "5647dc44e4b0284900eef624"}, {"problem": 40, "code": "(fn [sep s] (rest (mapcat #(list sep %) s)))", "user": "564045a8e4b08d4f616f5edd"}, {"problem": 40, "code": "(fn [n lst]\n  (conj (mapcat #(list n %) (rest lst))\n        (first lst)))", "user": "5649542fe4b0284900eef63f"}, {"problem": 40, "code": "(fn [item coll]\n  (butlast (reduce #(conj %1 %2 item) [] coll)))", "user": "56442758e4b0018b46ad8c0a"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "562ab73ce4b00e49c7cb482e"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "56441e72e4b0018b46ad8c09"}, {"problem": 40, "code": "#(butlast ( interleave %2 (take (count %2) (repeat %1))))", "user": "5643ba10e4b0018b46ad8bff"}, {"problem": 40, "code": "(fn [val lst]\n   (let [xs (into [] (mapcat #(vec [% val]) lst))\n         out (subvec xs 0 (dec (count xs)))]\n     out))", "user": "5489dd4de4b0e286459a11ef"}, {"problem": 40, "code": "(fn \n  [x abc]\n\t(->> (map #(vector % x) abc)\n  \t\t(reduce concat)\n        (drop-last)\n     )\n  )", "user": "56449e4de4b0284900eef5f9"}, {"problem": 40, "code": "(fn my-interpose [value the-container]\n  (drop-last (reduce (fn [olds new]\n                       (concat olds [new value]))\n                     []\n                     the-container)))", "user": "5645a7d6e4b0284900eef608"}, {"problem": 40, "code": "(fn  inte [a s]\n  (loop [se s result '()]\n    (if (empty? se)\n      (reverse(rest result))\n      (recur (rest se) (conj result (first se) a)))))", "user": "563d12f9e4b0bfe05bf11845"}, {"problem": 40, "code": "(fn [i v]\n  (drop-last 1 (interleave v (repeat i))))", "user": "5637557ce4b0bfe05bf117d4"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %)))", "user": "56449c90e4b0284900eef5f8"}, {"problem": 40, "code": "(fn [x s] \n  (rest (mapcat #(vector x %1) s) ))", "user": "563c0d4ce4b0bfe05bf11831"}, {"problem": 40, "code": "(fn [val coll] (drop-last (mapcat #(seq [% val]) coll)))", "user": "564b1ff8e4b0284900eef663"}, {"problem": 40, "code": "#(butlast (flatten (reduce (fn[output input] (conj output (concat [input] [%1]))) [] %2)))", "user": "51671557e4b013fc800656c4"}, {"problem": 40, "code": "(fn [n coll]  (let [s (mapcat #(vector % n) coll)] (drop-last s)))", "user": "551e2cade4b030e6a24d00e4"}, {"problem": 40, "code": "(fn [sep S]\n  (for [x (range (dec (* (count S) 2)))]\n   \t\t(if (even? x)\n          (S (quot x 2)) sep\n        )\n   )\n )", "user": "5649615be4b0284900eef641"}, {"problem": 40, "code": "(fn [l vs]\n  (drop-last (reduce (fn [es e]\n           (concat es [e] [l])\n           ) [] vs) )\n)", "user": "52824143e4b0757a1b171453"}, {"problem": 40, "code": "(fn pose [x ls]\n  (if (<= (count ls) 1)\n    ls\n    (cons (first ls)\n          (cons x\n                (pose x (rest ls))\n                )\n          )\n    )\n  )", "user": "541ef7e2e4b01498b1a71a92"}, {"problem": 40, "code": "(fn doall [separator somelist] (vec (flatten (vector (map #(vector % separator) (pop somelist)) (peek somelist)))))", "user": "5641f0ede4b08d4f616f5f11"}, {"problem": 40, "code": "(fn [n xs]\n  (drop-last (reduce #(conj %1 %2 n) [] xs)))", "user": "54dce62fe4b024c67c0cf78c"}, {"problem": 40, "code": "(fn [a b] (rest (mapcat (fn [x] [a x]) b)))", "user": "564a560ae4b0284900eef654"}, {"problem": 40, "code": "#(rest (mapcat (fn [a b] [a b]) (repeat (count %2) %) %2))", "user": "561223e5e4b05f002753df8b"}, {"problem": 40, "code": "(fn intr_seq\n    ([i s]\n        (intr_seq i s []))\n    ([i s r_val]\n        (if (empty? (rest s))\n            (concat r_val s)\n            (intr_seq i (rest s) (concat r_val (list (first s)) (list i))))))", "user": "56058d64e4b08b23635d3169"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "564d3169e4b0284900eef67c"}, {"problem": 40, "code": "#(drop-last (mapcat list %2 (repeat %1)))", "user": "54485749e4b032a45b8693c7"}, {"problem": 40, "code": "(fn\n  [sp sq]\n  (drop-last (apply concat (for [x sq] [x sp]))))", "user": "5576fee3e4b05c286339e078"}, {"problem": 40, "code": "(fn xinterpose [e x]                                                          \n  (loop [ elms x acc '() ]                                                      \n    (if (= 1 (count elms))                                                      \n      (reverse (conj acc (first elms)))                                         \n      (recur (rest elms)                                                        \n             (conj acc (first elms) e )))))", "user": "564cc055e4b0284900eef676"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "563b5dc9e4b0bfe05bf1180f"}, {"problem": 40, "code": "(fn my-ip [x [y & ys]]\n  (lazy-seq\n   (when y\n     (if ys\n       (cons y (cons x (my-ip x ys)))\n       (cons y nil)))))", "user": "564a7a0de4b0284900eef659"}, {"problem": 40, "code": "(fn intps [v x] (if (= (count x) 1) x (concat (list  (first x) v) (intps v (rest x) ))))", "user": "5646dff3e4b0284900eef615"}, {"problem": 40, "code": "(fn [i [f & r]] (reduce #(conj % i %2) [f] r))", "user": "563b1553e4b0bfe05bf1180a"}, {"problem": 40, "code": "#(rest (for [v %2 x [% v]] x))", "user": "4db85282535d1e037afb218a"}, {"problem": 40, "code": "(fn [x coll]\n  (butlast (mapcat #(vector % x) coll)))", "user": "56313ff1e4b0bfe05bf1178f"}, {"problem": 40, "code": "(fn [v xs] (drop-last (mapcat (fn [x] [x v]) xs)))", "user": "5643a11ee4b0018b46ad8bfb"}, {"problem": 40, "code": "(fn interps [s1 s2]\n\t(loop [[x1 & xrest] s2, out []]\n\t\t(if (seq xrest)\n\t\t\t(recur xrest (concat out [x1 s1]))\n\t\t\t(concat out [x1]))))", "user": "564d02cde4b0284900eef679"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %)))", "user": "56441634e4b0018b46ad8c08"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat (count %2) %1)))", "user": "5650b8a0e4b0284900eef6c3"}, {"problem": 40, "code": "(fn [x y]\n  (butlast (mapcat #(vector % x) y)))", "user": "563c48e7e4b0bfe05bf11832"}, {"problem": 40, "code": "(fn [pol, init]\n  (loop [s init, result []]\n    (let [more (next s)]\n      (if more\n        (recur\n          more\n          (conj result (first s) pol)\n          )\n        (conj result (first s))\n        )\n      )\n    )\n  )", "user": "564faadce4b0284900eef6b2"}, {"problem": 40, "code": "#(if (empty? %2)\n   %2\n   (loop [cur %2 acc []]\n     (let [head (first cur)\n           tail (rest cur)\n           res (conj acc head)]\n       (if (empty? tail)\n         res\n         (recur tail (conj res %1))))))", "user": "4f037faf535dcb61093f6af8"}, {"problem": 40, "code": "(fn [i xs]\n  (loop [[x & xs] xs\n         acc      []]\n    (if (seq xs)\n      (recur xs (conj acc x i))\n      (conj acc x))))", "user": "56521a26e4b0f9d632dd845f"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %)))", "user": "55c3c1b0e4b0e31453f6498c"}, {"problem": 40, "code": "#(drop 1 (into [] (flatten (map vector (repeat (count %2) %1) %2))))", "user": "55fbc657e4b0f488688e0666"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "564b495de4b0284900eef667"}, {"problem": 40, "code": "(fn [i s] (butlast (mapcat #(list % i) s)))", "user": "564066dee4b08d4f616f5ee2"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %)))", "user": "55d62a68e4b0e31453f64a96"}, {"problem": 40, "code": "(fn my-interpose [x l]\n  (rest (mapcat list (take (count l) (repeat x)) l))\n  )", "user": "563b9acbe4b0bfe05bf11827"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "56488119e4b0284900eef632"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "54dce6dbe4b024c67c0cf78d"}, {"problem": 40, "code": "(fn [x xs]\n   (drop-last (flatten (map vector xs (repeat x))))\n   )", "user": "564ecc9ee4b0284900eef6a1"}, {"problem": 40, "code": "(fn [intp lis]\n\t(loop [li lis result []]\n\t\t(if(empty? li)\n\t\t\t(rest result)\n\t\t\t(if(= (last result) intp)\n\t\t\t\t(recur (rest li) (conj result (first li)))\n\t\t\t\t(recur (rest li) (conj result intp (first li)))))))", "user": "5191a763e4b0d428d29dc1b4"}, {"problem": 40, "code": "(fn [x s] (drop-last 1 (mapcat #(vector % x) s)))", "user": "5654d0e1e4b0f9d632dd848c"}, {"problem": 40, "code": "(fn seperate [sep items]\n    (if (= (count items) 1)\n      (list (last items))\n      (conj (seperate sep (rest items)) sep (first items))))", "user": "5654cb2de4b0f9d632dd848b"}, {"problem": 40, "code": "(fn [delim coll] (rest (mapcat #(list delim %) coll)))", "user": "56561119e4b0f9d632dd849d"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "55380eeae4b09218d5f44fd9"}, {"problem": 40, "code": "(fn intp [j [f & other]]\n  (if (nil? other)\n    (list f)\n    (cons f (cons j (intp j other)))))", "user": "563dfc02e4b0da801c4e4662"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "564da567e4b0284900eef682"}, {"problem": 40, "code": "(fn inter [separator coll] \n  (when-let [[head & tail] coll]\n    (if (not (nil? tail)) \n      (cons head ( cons separator (inter separator tail))) \n      (cons head (inter separator tail)))))", "user": "560331dee4b04bb52996e1b5"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) (drop-last) (vec))", "user": "5632d1b3e4b0bfe05bf117a9"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "54588070e4b01be26fd74620"}, {"problem": 40, "code": "(fn interpose-seq [i s] (rest (interleave (repeat i) s)))", "user": "5654e024e4b0f9d632dd848d"}, {"problem": 40, "code": "(fn [x y] (butlast  (interleave y (take (count y) (cycle [x])))))", "user": "53d0c3c9e4b00fb29b22130a"}, {"problem": 40, "code": "(fn my-interpose [val [x & xs]]\n  (if (nil? xs)\n    [x]\n    (concat [x val] (my-interpose val xs))))", "user": "56444fb1e4b0018b46ad8c0c"}, {"problem": 40, "code": "(fn inter [e v]\n  (loop [v v, r (empty v)]\n    (if (seq v)\n      (if (seq (rest v))\n        (recur (rest v) (conj r (first v) e))\n        (conj r (first v)))\n      r)))", "user": "54ca93abe4b057c6fda3a264"}, {"problem": 40, "code": "(fn interp [s [c & cs]]\n  (if (nil? cs)\n    [c]\n    (into [c s] (interp s cs))))", "user": "56557d2de4b0f9d632dd8498"}, {"problem": 40, "code": "(fn [sep s] (drop-last (flatten (map #(conj [] % sep) s))))", "user": "5658acabe4b0f9d632dd84b7"}, {"problem": 40, "code": "(fn [sep coll] (next (reduce #(conj %1 sep %2) [] coll)))", "user": "564c8e99e4b0284900eef674"}, {"problem": 40, "code": "(fn [v s]\n  (rest (mapcat #(list v %) s)))", "user": "565a3e25e4b068f2fe63dbfb"}, {"problem": 40, "code": "(fn [sep s] (rest (mapcat #(conj [sep] %) s)))", "user": "5651de3ee4b0f9d632dd845b"}, {"problem": 40, "code": "(fn [a xs] (rest (mapcat #(list a %) xs)))", "user": "56532ff4e4b0f9d632dd846e"}, {"problem": 40, "code": "(fn mappp [elem coll] (drop 1 (flatten (map-indexed (fn [idx itm] (list elem itm)) coll))))", "user": "5658d775e4b00d3155796114"}, {"problem": 40, "code": "(fn [x s] (reduce (fn [acc i] (conj (conj acc x) i)) [(first s)] (rest s)))", "user": "53fc63dce4b0de5c4184859f"}, {"problem": 40, "code": "(fn [i lst] (drop 1 (flatten (map #(list i %) lst))))", "user": "56367c51e4b0bfe05bf117cd"}, {"problem": 40, "code": "(fn interp [c x] (butlast (interleave x (for [_ (range (count x))] c))))", "user": "56588f4ee4b0f9d632dd84b6"}, {"problem": 40, "code": "(fn my_interpose\n  [ch list]\n  (rest(reduce (fn [acc x ] (conj acc ch x) ) [] list))\n  )", "user": "560d7863e4b05f002753df40"}, {"problem": 40, "code": "#(rest (mapcat vector (repeat %1) %2))", "user": "4db3a0e5535df7e46ed9b6d0"}, {"problem": 40, "code": "(fn  [d c]\n  (butlast\n   (flatten\n    (map #(vector % d) c))))", "user": "56504dc2e4b0284900eef6bc"}, {"problem": 40, "code": "#(vec (drop-last (interleave %2 (repeat %1))))", "user": "56188848e4b053970a773aea"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "56002c2de4b04bb52996e161"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %)))", "user": "565e0934e4b068f2fe63dc30"}, {"problem": 40, "code": "(fn [x y](butlast (mapcat list y (repeat (count y) x))))", "user": "564348e1e4b08d4f616f5f26"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5617a540e4b06b1bb2182a12"}, {"problem": 40, "code": "(fn del [number coll2]\n   (let [v (vec (mapcat list coll2 (repeat number)))]\n     (subvec v 0  (- (count v) 1)))\n  )", "user": "56349008e4b0bfe05bf117bd"}, {"problem": 40, "code": "(fn [a b] (butlast (mapcat #(vector % a) b)))", "user": "565faf46e4b068f2fe63dc44"}, {"problem": 40, "code": "(fn join [x [y & ys]]\n  (if (seq ys)\n    (list* y x (join x ys))\n    [y]))", "user": "563f24f9e4b08d4f616f5ed0"}, {"problem": 40, "code": "(fn foo [iv l] (drop 1 (reduce #(conj (conj %1 iv) %2) [] l)))", "user": "56582025e4b0f9d632dd84b1"}, {"problem": 40, "code": "#(loop [interposed-coll [] coll %2 interposer %1]\n  (if (> (count coll) 1)\n    (recur (conj interposed-coll (first coll) interposer) (rest coll) interposer)\n    (conj interposed-coll (first coll))))", "user": "4fc77f5ae4b0ee37620e1821"}, {"problem": 40, "code": "(fn [k col] (drop-last (mapcat vector col (repeat k))))", "user": "5656e039e4b0f9d632dd84a3"}, {"problem": 40, "code": "(fn [x xs] (rest (mapcat #(list x %) xs)))", "user": "56602649e4b068f2fe63dc47"}, {"problem": 40, "code": "(fn\n  [v s]\n  (drop-last (mapcat #( vec [% v]) s)))", "user": "56019662e4b04bb52996e190"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last\n   (mapcat #(conj [] % sep) coll)))", "user": "5662ca50e4b0e91d5f5c564c"}, {"problem": 40, "code": "(fn [a b] (cons (first b)(apply concat (map (fn [x] [a x]) (next b)))))", "user": "5657fc1ae4b0f9d632dd84ad"}, {"problem": 40, "code": "(fn my-interpose [del sq] \n  (let [head (first sq)\n        tail (rest sq)]\n    (if (empty? tail)\n      (cons head nil)\n      (cons head (cons del (my-interpose del tail))))))", "user": "5666500ee4b0e91d5f5c566d"}, {"problem": 40, "code": "(fn [n coll]\n  (drop-last 1 (interleave coll (take (count coll) (repeat n)))))", "user": "565b941ce4b068f2fe63dc07"}, {"problem": 40, "code": "#(drop-last (mapcat list %2 (repeat 500 %)))", "user": "56677192e4b04acd4f672dd5"}, {"problem": 40, "code": "(fn [sep col] (butlast (mapcat #(list % sep) col)))", "user": "566733d6e4b04acd4f672dcb"}, {"problem": 40, "code": "#((fn itps [x coll a] (if (empty? coll) (butlast a) (recur x (rest coll) (conj a (first coll) x)))) %1 %2 [])", "user": "5659679ae4b068f2fe63dbeb"}, {"problem": 40, "code": "(fn [x y] (loop [i 0 n (- (count y) 2) res []] (if (> i n) (conj res (y i)) (recur (inc i) n (into res [(y i) x])) ) ))", "user": "5666c2dbe4b04acd4f672dc3"}, {"problem": 40, "code": "#(conj (into [] (interleave %2 (repeat (- (count %2) 1) %1))) (last %2))", "user": "566734c4e4b04acd4f672dcc"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "566888e4e4b04acd4f672ded"}, {"problem": 40, "code": "#(loop [sep %1\n        [head & tail] %2\n        acc []]\n   (if (empty? tail)\n     (concat acc [head])\n     (recur sep tail (concat acc [head sep]))))", "user": "56685a73e4b04acd4f672de5"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "56671a4de4b04acd4f672dca"}, {"problem": 40, "code": "(fn [x xs] (butlast (mapcat #(vector % x) xs)))", "user": "5668dcc6e4b04acd4f672df8"}, {"problem": 40, "code": "(fn [x y]\n  (rest (mapcat #(list x %) y)))", "user": "54a11042e4b09f271ff37c49"}, {"problem": 40, "code": "(fn [val coll]\n  (rest\n   (apply concat\n          (for [el coll]\n            (list val el)))))", "user": "5169d422e4b051e2a73aba53"}, {"problem": 40, "code": "(fn[v s]\n  (if-not (next s)\n    s\n    (loop [result [(first s)] s (next s)]\n      (if (nil? s)\n        result\n        (recur (conj result v (first s)) (next s))))))", "user": "566a6e38e4b0a866af68969b"}, {"problem": 40, "code": "(fn [x xs] (rest (interleave (repeat x) xs)))", "user": "5393185ae4b0b51d73faaeb7"}, {"problem": 40, "code": "(fn [separator a_seq]\n  (drop-last (interleave a_seq (repeat separator))))", "user": "556189a6e4b0c656e3ff17c9"}, {"problem": 40, "code": "(fn [i x] (drop-last (mapcat #(vector % i) x)))", "user": "5006c169e4b0678c553fc48d"}, {"problem": 40, "code": "(fn [x coll] (reduce #(conj %1 x %2) (vector (first coll)) (rest coll)))", "user": "55f4ef68e4b06e875b46ce82"}, {"problem": 40, "code": "(fn [x y] (butlast(mapcat #(vector %1 x) y)))", "user": "566a3a26e4b0a866af689699"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last\n   (mapcat #(conj [] % sep) coll)))", "user": "566fa059e4b0a866af6896ea"}, {"problem": 40, "code": "#(drop-last (mapcat vector %2 (repeat %1)))", "user": "56540485e4b0f9d632dd847a"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5661b0a9e4b068f2fe63dc6f"}, {"problem": 40, "code": "(fn [separator coll]\n  (butlast (interleave coll (repeat separator))))", "user": "549ffeade4b0f3d1d8e70fb2"}, {"problem": 40, "code": "(fn f [i [x & xs]]\n  (if (nil? xs)\n    [x]\n    (into [x i] (f i xs))))", "user": "56483562e4b0284900eef629"}, {"problem": 40, "code": ";#(take (dec (* 2 (count %2))) (interleave %2 (take (count %2) (repeat %1))))\n#(drop-last (interleave %2 (repeat %1)))", "user": "566639f4e4b0e91d5f5c566b"}, {"problem": 40, "code": "(fn [x v] (rest (interleave (take  (count v) (repeat x)) v)))", "user": "56427910e4b08d4f616f5f19"}, {"problem": 40, "code": "(fn intp [s coll]\n  (loop [c []\n         f (first coll)\n         r (rest coll)]\n    (if-not f\n      (drop-last c)\n      (recur (conj c f s) (first r) (rest r)))))", "user": "51441ce7e4b0b4fb4ace5f41"}, {"problem": 40, "code": "(fn [n m]\n  (drop-last (interleave m (repeat n))))", "user": "5668aad0e4b04acd4f672df5"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5654c550e4b0f9d632dd848a"}, {"problem": 40, "code": "(fn [e l] \n  (cons (first l) (mapcat #(list e %) (rest l))))", "user": "56708ac8e4b0a866af6896f5"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5674477ce4b05957ce8c6134"}, {"problem": 40, "code": "(fn [x s]\n  (loop [out [] a (first s) in (rest s)]\n    (if (empty? in)\n      (conj out a)\n      (recur (conj out a x) (first in) (rest in)))))", "user": "564a5a09e4b0284900eef656"}, {"problem": 40, "code": "(fn [x xs]\n  (->> x (repeat) (interleave xs) (drop-last)))", "user": "56669819e4b0e91d5f5c5674"}, {"problem": 40, "code": "(fn intp [div lst] (if (not (= (rest lst) '()))\n                     (cons (first lst) (cons div (intp div (rest lst))))\n                     lst\n                     ))", "user": "564716e6e4b0284900eef616"}, {"problem": 40, "code": "#(drop-last (interleave %2 (cycle [%1])))", "user": "56014f55e4b04bb52996e184"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "56754c4be4b05957ce8c6149"}, {"problem": 40, "code": "(fn [x coll] (reverse (rest (reduce #(concat [x %2] %1) [] coll))))", "user": "567476bde4b05957ce8c6139"}, {"problem": 40, "code": "(fn my-interpose\n  [value coll]\n  (butlast (mapcat #(vector % value) coll)))", "user": "5675eea1e4b05957ce8c6152"}, {"problem": 40, "code": "(fn [x xs] (butlast (mapcat #(vector % x) xs)))", "user": "55efb51ee4b066087aa9453b"}, {"problem": 40, "code": "(fn [x xs]\n              (reduce (fn [acc a] (concat acc [x a])) [(first xs)] (rest xs)))", "user": "4f9aa2a6e4b0dcca54ed6d0c"}, {"problem": 40, "code": "(fn [i coll]\n  (reduce #(conj %1 i %2) (vector (first coll)) (rest coll)))", "user": "56732c84e4b05957ce8c611c"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "user": "5674f874e4b05957ce8c6144"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %)))", "user": "56706f01e4b0a866af6896f2"}, {"problem": 40, "code": "(fn [item lst]\n  (loop [res [] l lst]\n    (if (next l)\n        (recur (conj (conj res (first l)) item)\n               (next l))\n         (conj res (first l) ))))", "user": "56201509e4b064ca9f4b16da"}, {"problem": 40, "code": "#(butlast (mapcat vector %2 (repeat %1) ))", "user": "5676af21e4b05957ce8c6158"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "56761ab1e4b05957ce8c6154"}, {"problem": 40, "code": "(fn [divider coll] (butlast (mapcat #(list % divider) coll)))\n;(fn [separator xs] (butlast (interleave xs (repeat separator))))", "user": "54ce541de4b057c6fda3a2ac"}, {"problem": 40, "code": "#(drop 1 (interleave \n          (repeat %) %2))", "user": "566dd178e4b0a866af6896d1"}, {"problem": 40, "code": "#(loop [orig %2 result []]\n   (cond (empty? orig) result\n         (empty? (rest orig)) (recur (rest orig) (conj result (first orig)))\n         :else (recur (rest orig) (conj result (first orig) %1))))", "user": "567695c2e4b05957ce8c6157"}, {"problem": 40, "code": "(fn [sep args] (drop-last (flatten (map list args (repeat sep)))))", "user": "5673c886e4b05957ce8c6123"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last\n    (reduce\n      (fn [res x]\n        (concat res (list x sep)))\n      '() coll)))", "user": "5675cdf1e4b05957ce8c614d"}, {"problem": 40, "code": "(fn [x s] (cons (first s) (mapcat #(identity [x %]) (rest s))))", "user": "5547b72be4b0a04f79299550"}, {"problem": 40, "code": "(fn intr [sep col]\n  (loop [acc '()\n         remn col\n         add-sep false]\n    \n    (cond \n     (empty? remn) (reverse acc)\n     add-sep (recur (cons sep acc) remn false)\n     :else (recur (conj acc (first remn)) \n                  (rest remn) true) \n    \n    )))", "user": "56742817e4b05957ce8c612d"}, {"problem": 40, "code": "(fn [x y]\n   (rest (mapcat (fn [a] [x a]) y)))", "user": "54ef7568e4b024c67c0cf885"}, {"problem": 40, "code": "#( drop-last  (mapcat list %2 (repeat %1)))", "user": "567798afe4b05957ce8c6169"}, {"problem": 40, "code": "(fn interpose' [val coll]\n    (reduce\n      (fn [res actual]\n        (into '[] \n              (flatten \n               (conj res \n                     (if (empty? res) \n                       (conj [] actual) \n                       (conj (conj [] val) actual)))))) [] coll))", "user": "567b62fce4b05957ce8c61a6"}, {"problem": 40, "code": "(fn [x coll]\n  (butlast (flatten (map #(vector %1 x) coll))))", "user": "567c2322e4b05957ce8c61af"}, {"problem": 40, "code": "(fn [n ys] \n\t(let [xs (reverse ys)]\n\t((fn iter [xs res]\t\n\t\t(if (empty? xs)\n\t\t\tres\n\t\t\t(iter (rest xs)\n\t\t\t\t  (cons (first xs) (cons n res))))) (rest xs)\n                \t                                (list (first xs)))))", "user": "567d132ee4b05957ce8c61c3"}, {"problem": 40, "code": "(fn[i, col](butlast (flatten (map #(list % i) col))))", "user": "5677f9ffe4b05957ce8c616f"}, {"problem": 40, "code": "(fn [sep xs] (drop-last (concat (interleave xs (repeat sep)))))", "user": "56771b31e4b05957ce8c6163"}, {"problem": 40, "code": "(fn my-interpose [v s]\n  (take (- (* 2 (count s)) 1) (interleave s (cycle [v]))))", "user": "5638b88de4b0bfe05bf117e9"}, {"problem": 40, "code": "#(loop [acc []\n                   coll %2]\n              (let [i %1]\n                (if (= 1 (count coll))\n                  (conj acc (last coll))\n                  (recur (conj acc (first coll) i) (rest coll)))))", "user": "567cef8ce4b05957ce8c61c1"}, {"problem": 40, "code": "(fn myfunc [s coll] (rest (reduce #(into %1 [s %2]) [] coll)))", "user": "567ea95de4b0feffd0d18eb6"}, {"problem": 40, "code": "(fn [sep coll]\n  (butlast\n   (mapcat vector coll\n           (repeat sep))))", "user": "567debb5e4b05957ce8c61ce"}, {"problem": 40, "code": "(fn [sep sq] (rest (interleave (repeat sep) sq)))", "user": "562add6de4b00e49c7cb4834"}, {"problem": 40, "code": "(fn [delim, items] (rest (mapcat #(vector delim %) items)))", "user": "567931e9e4b05957ce8c6184"}, {"problem": 40, "code": "(fn my-interposer [joiner coll]\n  (->> (for [x coll]\n       [x joiner])\n       (flatten)\n       (butlast)))", "user": "567c7fefe4b05957ce8c61bc"}, {"problem": 40, "code": "(fn [n coll]\n  (let [coll1 (repeat (count coll) n)\n        t-coll (vec (interleave coll coll1))]\n    (pop t-coll)))", "user": "567ea403e4b0feffd0d18eb5"}, {"problem": 40, "code": "(fn [e x]\n  (loop [i 0 s ()]\n    (if (= i (- (* 2 (count x)) 1))\n      (reverse s)\n      (if (= (mod i 2) 0)\n        (recur (inc i) (conj s (nth x (/ i 2))))\n        (recur (inc i) (conj s e))))))", "user": "53bbae20e4b047364c044509"}, {"problem": 40, "code": "(fn [a bi] (loop [[b & bs] bi list []] (if (nil? bs) (conj list b) (recur bs (conj list b a)))))", "user": "555c38d9e4b0b056612e2249"}, {"problem": 40, "code": "(fn [c l] (butlast (interleave l (repeat c))))", "user": "52ff7424e4b0d8b024fd3708"}, {"problem": 40, "code": "(fn \n  [sep coll]\n  (butlast (mapcat #(list % sep) coll)))", "user": "566f7749e4b0a866af6896e9"}, {"problem": 40, "code": "(fn [value, xseq] \n  \t(drop-last \n      (into [] \n         (flatten \n           (mapv vector xseq \n             (into [] (take (count xseq) (repeat value))))))))", "user": "567d18c9e4b05957ce8c61c4"}, {"problem": 40, "code": "(fn [s, col] (drop-last (mapcat #(list % s) col)))", "user": "56795deae4b05957ce8c6187"}, {"problem": 40, "code": "(fn [sep coll] \n  (flatten (reduce #(vec [%1 sep %2]) coll)))", "user": "5680104ae4b0966858e4d8ea"}, {"problem": 40, "code": "(fn my-interpose\n  ([result sep coll]\n   (if (empty? coll)\n     result\n     (my-interpose (conj result sep (first coll)) sep (rest coll))))\n  ([sep coll]\n   (my-interpose [(first coll)] sep (rest coll))))", "user": "56822f37e4b0945ebc182a8d"}, {"problem": 40, "code": "(fn [i c] (drop-last (reduce concat (map #(list % i) c))))", "user": "56800ba1e4b0966858e4d8e8"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "565fe49ee4b068f2fe63dc46"}, {"problem": 40, "code": "#(drop-last (vec (interleave %2 (repeat %1))))", "user": "52c48ec6e4b0c2d177d620dd"}, {"problem": 40, "code": "(fn [k, s] (butlast (mapcat #(list % k) s)))", "user": "568227fee4b0945ebc182a8a"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "56810479e4b0966858e4d8f8"}, {"problem": 40, "code": "#(->> %2 (reduce (fn [[arr prev] el] \n\t\t\t\t [(concat arr [prev] [el]) %1]\n\t\t\t\t ) [])\n\t\t\t first\n\t\t  next\n\t\t  vec\n\t\t   )", "user": "56814cbce4b0945ebc182a81"}, {"problem": 40, "code": "(fn f [sep seq]\n  ((fn [s acc]\n    (if (empty? s)\n    acc\n    (let [f (first s) r (rest s)]\n      (if (empty? r)\n        (recur r (conj acc f))\n        (recur r (conj acc f sep)))))) seq []))", "user": "5681afaae4b0945ebc182a87"}, {"problem": 40, "code": "(fn [elem seq]\n  (drop-last (mapcat (fn [a]\n        \t\t    \t(list a elem))\n\t\t        \t seq)))", "user": "567abc97e4b05957ce8c619d"}, {"problem": 40, "code": "(fn [x coll]\n  (loop [coll coll out '[]]\n    (if (empty? coll)\n      (rest out)\n      (recur (rest coll)(conj out x (first coll))))))", "user": "5684e200e4b04eec3ec5cfc4"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "user": "566efb2be4b0a866af6896e2"}, {"problem": 40, "code": "(fn [n data] \n  (butlast (mapcat #(vector % n) data))\n  )", "user": "568513c4e4b04eec3ec5cfc5"}, {"problem": 40, "code": "(fn [a s]\n  (loop [i s\n         r []]\n    (if (empty? i)\n      (pop r)\n      (recur (rest i)\n             (conj r (first i) a)))))", "user": "5521a5a9e4b0882d96d09197"}, {"problem": 40, "code": "(fn [inter seq']\n  (butlast \n   (reduce #(conj %1 %2 inter) [] seq')))", "user": "567bf820e4b05957ce8c61ad"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %1)))", "user": "56798d83e4b05957ce8c618b"}, {"problem": 40, "code": "(fn [n s]\n  (flatten (reduce #(list %1 n %2) s)))", "user": "5686640ae4b0dcc4269f4050"}, {"problem": 40, "code": "(fn [x y] (apply concat ((fn [betw els] (map-indexed (fn [id el] (if (= (- (count els) 1) id) (vector el) (vector el betw) )) els)) x y)))", "user": "5686e652e4b0dcc4269f4059"}, {"problem": 40, "code": "(fn [joiner s] (butlast (reduce #(conj (conj %1 %2) joiner) [] s)))", "user": "565233f2e4b0f9d632dd8461"}, {"problem": 40, "code": "(fn my_interpose [c s] (if (<= (count s) 1) s (conj (conj (my_interpose c (rest s)) c) (first s))))", "user": "567b39b6e4b05957ce8c61a3"}, {"problem": 40, "code": "(fn [a m]\n  (loop [v m r []]\n    (if (empty? (rest v))\n      (conj r (first v))\n      (recur (rest v) (conj r (first v) a)))))", "user": "5683d2a9e4b0945ebc182aa0"}, {"problem": 40, "code": "(fn [a lst]\n  (butlast (reduce #(conj %1 %2 a) [] lst)))", "user": "566812f0e4b04acd4f672de1"}, {"problem": 40, "code": "(fn [v items] (drop-last (apply vector (apply concat (map #(vector % v) items)))))", "user": "56877fcbe4b0dcc4269f405e"}, {"problem": 40, "code": "(fn [sep xs] (conj (mapcat (fn [x] [sep x]) (rest xs)) (first xs)))", "user": "5275f7a2e4b03e8d9a4a74d0"}, {"problem": 40, "code": "(fn my-interpose [a xs]\n  ((fn [ys rs]\n     (if-let [y (next ys)]\n       (recur y (concat rs (list (first ys) a)))\n       (concat rs (list (first ys)))))\n      xs ()))", "user": "5688a01be4b0dcc4269f406d"}, {"problem": 40, "code": "(fn interposeX [e s] (into (empty s)(flatten (reduce #(list %1 e %2) s))))", "user": "568820e8e4b0dcc4269f4067"}, {"problem": 40, "code": "(fn [v l] (butlast (interleave l (repeat v))))", "user": "56897739e4b0dcc4269f407d"}, {"problem": 40, "code": "(fn myinterpose [i v]\n  (if (<= (count v) 1) v\n    (cons (first v) (cons i (myinterpose i (rest v))))))", "user": "54e6762be4b024c67c0cf809"}, {"problem": 40, "code": "(fn [x ys]\n  (let [super-fn (comp flatten\n                       (partial map (fn [y] [x y])))\n        col (super-fn ys)]\n    (drop 1 col)))", "user": "560b49d9e4b05f002753df17"}, {"problem": 40, "code": "(fn [z xs]\n  (drop-last (reduce #(conj %1 %2 z) [] xs)))", "user": "5689fd03e4b0dcc4269f4088"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "568242bfe4b0945ebc182a8f"}, {"problem": 40, "code": "(fn inter [a lat]\n  (let [[x & xs] lat]\n    (if (empty? xs) (list x)\n        (cons x (cons a (inter a xs))))))", "user": "56874171e4b0dcc4269f405c"}, {"problem": 40, "code": "(fn ipose\n  ([ch a] (ipose ch a []))\n  ([ch a acc]\n   (if (empty? a)\n     (seq (butlast acc))\n     (ipose \n       ch\n       (rest a)\n       (conj acc (first a) ch)))))", "user": "5591b61ee4b0604b3f94d580"}, {"problem": 40, "code": "(fn [separator collection]\n  (loop [coll (rest collection) output [(first collection)]]\n    (if (empty? coll) output\n      (recur (rest coll) (concat output [separator] [(first coll)]))\n    )\n  )\n)", "user": "56885c32e4b0dcc4269f4068"}, {"problem": 40, "code": "(fn [s coll] (drop 1 (mapcat list (repeat s) coll)))", "user": "56481722e4b0284900eef628"}, {"problem": 40, "code": "(fn [b s]\n  (concat (mapcat #(list % b) (butlast s)) [(last s)]))", "user": "568a743ee4b0dcc4269f408e"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "55664bb5e4b0c656e3ff1833"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "533a2f7be4b0e30313ee6cb8"}, {"problem": 40, "code": "(fn [x y] (loop [delimiter x data y result []]\n            (if-not (first data)\n              result\n              (if (= (first data) (last data))\n              \t(recur delimiter (rest data) (conj result (first data)))\n                (recur delimiter (rest data) (conj (conj result (first data)) delimiter)) ))))", "user": "567f034be4b0feffd0d18eba"}, {"problem": 40, "code": "(fn [sep coll] (drop 1 (mapcat #(list sep %) coll)))", "user": "567f988be4b0feffd0d18ebe"}, {"problem": 40, "code": "(fn ip [sep coll] (reduce (fn r[acc item] (into acc (if (empty? acc) [item] [sep item]))) [] coll))", "user": "5680fff3e4b0966858e4d8f6"}, {"problem": 40, "code": "(fn [val coll]\n   (butlast (interleave coll (repeat val)))\n )", "user": "5687fe58e4b0dcc4269f4065"}, {"problem": 40, "code": "(fn my-interpose\n  [n coll]\n  (if (= (count coll) 1)\n    [(first coll)]\n    (conj (my-interpose n (butlast coll)) n (last coll))))", "user": "55ee7977e4b0121d4835fdee"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "4ddf597a535d08e6dec9fddf"}, {"problem": 40, "code": "(fn [elem sqnc]\n  (drop-last\n   (mapcat vector\n           sqnc\n           (repeat (count sqnc) elem))))", "user": "566f3e18e4b0a866af6896e7"}, {"problem": 40, "code": "(fn [sep s]\n  (drop-last (mapcat (fn [x] [x sep]) s)))", "user": "55f85b93e4b03cbcff9738ae"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "568e450fe4b0dcc4269f40d0"}, {"problem": 40, "code": "(fn my-interpose [sep s]\n  (cond (empty? s) []\n        (empty? (rest s)) [(first s)]\n        :else (concat (list (first s) sep)\n                      (my-interpose sep (rest s)))))", "user": "568e1871e4b0dcc4269f40cc"}, {"problem": 40, "code": "#(butlast (flatten (map vector %2 (repeat (count %2) %1))))", "user": "568c2d96e4b0dcc4269f40af"}, {"problem": 40, "code": "(fn [s c] (butlast (\n           reduce #(conj %1 %2 s) [] c\n           )))", "user": "56912f93e4b0dcc4269f40ef"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %1)))", "user": "4ff8487be4b0678c553fc397"}, {"problem": 40, "code": "#(flatten (for [a (range (count %2))] (if (< a (dec (count %2)))\n                                          [(nth %2 a) %1]\n                                           (nth %2 a))))", "user": "568d4742e4b0dcc4269f40c2"}, {"problem": 40, "code": "(fn \n     [s l]\n     (butlast (mapcat #(list % s) l)))", "user": "51e6a2bce4b0ab43cc26c21d"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "5657fed1e4b0f9d632dd84ae"}, {"problem": 40, "code": "(fn [v coll] (flatten (reduce #(conj [] % v %2) coll)))", "user": "53f5c402e4b0db01ade6f9d4"}, {"problem": 40, "code": "(fn interpose-cousin [sep coll]\n     (drop-last (interleave coll (repeat sep))))", "user": "552bd5c2e4b0ffed3738f969"}, {"problem": 40, "code": "(fn interpose-a-seq-solution\n  [key arr] ;; update args as needed\n  ;; Write a function which separates the items of a sequence by an arbitrary value.\n    (butlast (interleave arr (repeat key)))\n    )", "user": "536829c8e4b0243289761e8b"}, {"problem": 40, "code": "(fn [x c] (loop [a [(first c)], c (rest c)] (if (empty? c)\n                              a\n                              (recur (conj (conj a x) (first c)) (rest c))\n            )))", "user": "4e268c6e535deb9a81d77ef4"}, {"problem": 40, "code": "#(loop [l (rest %2) r [(first %2)]] (if (empty? l) r ( recur (rest l) (conj r %1 (first l)) )))", "user": "5686b7c7e4b0dcc4269f4057"}, {"problem": 40, "code": "(fn [e v]\n  (rest (interleave (repeat e) v)))", "user": "569381a5e4b0dcc4269f4104"}, {"problem": 40, "code": "(fn [sep coll] (butlast (interleave coll (repeat sep) ) ) )", "user": "52e5f810e4b09f7907dd1468"}, {"problem": 40, "code": "(fn [x lst]\n      (conj (reduce #(conj %1 %2 x) [] (butlast lst)) (last lst) ) )", "user": "553900d4e4b09218d5f44fe5"}, {"problem": 40, "code": "(fn [x coll]\n  (loop [res []\n         col coll]\n    (if (empty? col)\n      (butlast res)\n      (recur (conj res (first col) x) (rest col)))))", "user": "5294a49be4b02ebb4ef7500f"}, {"problem": 40, "code": "(fn my-interpose [sep lst]\n  (let [int-lst (repeat (count lst) sep)]\n    (butlast (interleave lst int-lst))))", "user": "5691ef12e4b0dcc4269f40f8"}, {"problem": 40, "code": "(fn [dl xs] (conj (vec (mapcat #(concat [(nth xs %)] [dl]) (range (- (count xs) 1)))) (last xs)))", "user": "56743413e4b05957ce8c612e"}, {"problem": 40, "code": "(fn ips [e xs] (next (reduce #(conj %1 e %2) [] xs)))", "user": "566669d8e4b0e91d5f5c566f"}, {"problem": 40, "code": "(fn interpose-1 [val coll]\n  (reduce (fn [xs x]\n            (conj xs val x)) [(first coll)] (rest coll)))", "user": "5693a53ee4b0dcc4269f4106"}, {"problem": 40, "code": "(fn r [i [s & sx]] (cons s (if sx (cons i (r i sx)))))", "user": "56946d43e4b0dcc4269f411e"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "569783bde4b0e0b3d3318cab"}, {"problem": 40, "code": "(fn [x xs]\n  (let [ys (repeat x)] \n    (take (dec (* 2 (count xs)))\n          (interleave xs ys))))", "user": "56967bc0e4b0dcc4269f4131"}, {"problem": 40, "code": "#(butlast (apply concat (map list %2 (repeat %1))))\n#_#(butlast \n  (reduce\n   (fn [x y]\n     (conj (conj x y) %1))\n   []\n   %2))", "user": "51e5a627e4b0efabf93c02db"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat (count %2) %1)))", "user": "55577fcce4b0deb715856e24"}, {"problem": 40, "code": "(fn ! [x y] (if (= 1 (count y)) y (concat (list (first y) x) (! x (rest y) ) ) ))", "user": "56066e82e4b08b23635d3173"}, {"problem": 40, "code": "(fn [sep items] (butlast (mapcat vector items (repeat sep))))", "user": "56979bb7e4b0e0b3d3318cac"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "569c40cee4b0542e1f8d1462"}, {"problem": 40, "code": "(fn [s c] (rest (interleave (repeat s) c)))", "user": "5629de63e4b00e49c7cb4812"}, {"problem": 40, "code": "(fn [separator coll]\n  (butlast (mapcat (fn [item] (vector item separator)) coll)\n           )\n  )", "user": "564c7501e4b0284900eef671"}, {"problem": 40, "code": "(fn [x coll] (reduce concat (concat (list (list (first coll))) (map list (repeat x) (rest coll)))))", "user": "569c1038e4b0542e1f8d145f"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %1)))", "user": "569aca1ee4b0542e1f8d144d"}, {"problem": 40, "code": "(fn\n  [x ls]\n  (butlast ( mapcat #(list % x) ls )))", "user": "569ad037e4b0542e1f8d144f"}, {"problem": 40, "code": "#(butlast (reduce (fn [a b] (concat a [b %])) '[] %2))", "user": "543b4746e4b032a45b86932c"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5591cc56e4b0604b3f94d582"}, {"problem": 40, "code": "(fn [x xs] (reduce #(conj %1 x %2) [(first xs)] (rest xs)))", "user": "56795625e4b05957ce8c6186"}, {"problem": 40, "code": "(fn [x y] (concat  (vec (mapcat (fn [i] (concat [i] [x])) (pop y))) (vector (last y))) )", "user": "569951e4e4b0542e1f8d143e"}, {"problem": 40, "code": "(fn [ib se]\n    ((fn [i1 i2]\n      (loop [i (min (count i1) (count i2))\n             s1 i1\n             s2 i2\n             a '()]\n            (if (= 0 i)\n              (reverse (flatten (cons (first s1) a)))\n              (recur (dec i) (next s1) (next s2) (cons [(first s2) (first s1)] a))\n              )\n\n        )\n\n  ) se (take (dec (count se)) (repeat ib)))\n  )", "user": "5683b67ce4b0945ebc182a9f"}, {"problem": 40, "code": "#(butlast(interleave %2 (repeat %1)))", "user": "5339cb07e4b0e30313ee6caf"}, {"problem": 40, "code": "(fn [sep xs] (rest (mapcat #(seq [sep %1]) xs)))", "user": "569d2283e4b0542e1f8d1474"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "56824e1be4b0945ebc182a91"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "569c07b9e4b0542e1f8d145d"}, {"problem": 40, "code": "(fn [sep s] (->> s\n                (map #(list sep %))\n                flatten\n                rest))", "user": "53c837f7e4b00fb29b2212ae"}, {"problem": 40, "code": "#(reverse(rest(reverse(mapcat list %2 (iterate identity %1)))))", "user": "56949fc5e4b0dcc4269f4120"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "562d15a6e4b0a45d2ff83019"}, {"problem": 40, "code": "#((comp next interleave) (repeat (count %2) %1) %2)", "user": "569f33c7e4b0542e1f8d148f"}, {"problem": 40, "code": "#(loop [sep %1 items %2 result []] \n   (if (empty? items)\n     result\n     (if (empty? result)\n       (recur sep (rest items) (conj result (first items)))\n       (recur sep (rest items) (conj (conj result sep) (first items))))))", "user": "569ef93de4b0542e1f8d148b"}, {"problem": 40, "code": "(fn padding [a x]\n  (if (= 1 (count x))\n    x\n  ;only pad if there are two things to pad between!\n    (conj (padding a (rest x)) a (first x))\n  )\n)", "user": "569f99cce4b0542e1f8d1497"}, {"problem": 40, "code": "(fn [del seq]\n     (reduce (fn [acc elem]\n                 (if (empty? acc)\n                    (conj acc elem)\n                    (conj acc del elem))\n                 ) [] seq))", "user": "56936547e4b0dcc4269f4101"}, {"problem": 40, "code": "(fn [s, arr] (rest (reduce\n                    #(conj %1, s, %2)\n                    []\n                    arr)))", "user": "56a38a4ce4b0542e1f8d14cc"}, {"problem": 40, "code": "(fn [a b]\n  (butlast (interleave b (repeat a))))", "user": "5689bd04e4b0dcc4269f4082"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat (count %2) %)))", "user": "56992162e4b0542e1f8d143c"}, {"problem": 40, "code": "(fn [s x]\n   (drop-last\n    (reduce #(conj %1 %2 s) [] x)))", "user": "56012cd7e4b04bb52996e17d"}, {"problem": 40, "code": "(fn [v s] (butlast (mapcat #(vec [% v]) s)))", "user": "569adec2e4b0542e1f8d1450"}, {"problem": 40, "code": "(fn [delim coll]\n  (butlast (flatten (map #(identity [% delim]) coll))))", "user": "56a51f26e4b0542e1f8d14e0"}, {"problem": 40, "code": "(fn [c lst] (drop-last (mapcat #(list % c) lst)))", "user": "56791447e4b05957ce8c6183"}, {"problem": 40, "code": "(fn [v coll] (drop-last (mapcat #(vector % v) coll)))", "user": "56a1b854e4b0542e1f8d14b2"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5630ce72e4b0bfe05bf11786"}, {"problem": 40, "code": "#(concat (vector (first %2)) (mapcat vector (repeat %1) (rest %2)))", "user": "525523e3e4b0541d1855b9cc"}, {"problem": 40, "code": "(fn [ n coll ]\n (drop-last (flatten (map (fn [x]\n       \n       (vector x n)\n       \n       )   (partition 1 coll) )\n         \n         );END:flatten\n            )\n    );END: fn", "user": "56a358d0e4b0542e1f8d14c9"}, {"problem": 40, "code": "(fn [v s]\n  (drop-last (mapcat #(list % v) s)))", "user": "553b0d95e4b09218d5f44fff"}, {"problem": 40, "code": "#(rest (mapcat list (repeat %1) %2))", "user": "56175cf9e4b06b1bb2182a0f"}, {"problem": 40, "code": "(fn [a b]\n   (loop [[f & r] b\n          res []]\n     (if(empty? r)\n       (conj res f )\n       (recur r (conj res f a)))))", "user": "56646a7fe4b0e91d5f5c5657"}, {"problem": 40, "code": "(fn [x coll]\n  (butlast\n   (apply concat\n          (map #(list %1 x)  coll))))", "user": "5167e8ace4b0c5a4140a309a"}, {"problem": 40, "code": "#(rest (interleave (take (count %2) (repeat %1)) %2))", "user": "56a0ac99e4b0542e1f8d14a6"}, {"problem": 40, "code": "(fn [x s]\n  (reduce #(conj %1 x %2)\n          [(first s)]\n          (rest s)))", "user": "56a79eb0e4b07966d5a8a05d"}, {"problem": 40, "code": "(fn [v coll]\n  (cons (first coll) (mapcat #(vector v %) (rest coll))))", "user": "567b4641e4b05957ce8c61a5"}, {"problem": 40, "code": "(fn minterpose [delimeter s]\n  (drop-last (flatten (map #(list % delimeter) s)))\n  )", "user": "56826c2fe4b0945ebc182a92"}, {"problem": 40, "code": "(fn pia [c lst]\n  (loop [x lst res []]\n    (if (empty? x)\n      (butlast res)\n      (recur (rest x) (conj res (first x) c))\n      )\n    )\n  )", "user": "569ce6fee4b0542e1f8d146c"}, {"problem": 40, "code": "#(concat \n  (interleave %2 \n              (repeat (- (count %2) 1) %1)\n  ) \n  (list (last %2)))", "user": "56a75810e4b0542e1f8d14fc"}, {"problem": 40, "code": "#(rest (mapcat vector (repeat %) %2))", "user": "56a76f36e4b07966d5a8a05b"}, {"problem": 40, "code": "#(loop [c %2 acc []] \n   (if (next c) \n     (recur (next c) (conj (conj acc (first c)) %)) \n     (conj acc (first c))))", "user": "55d1ec3ee4b0e31453f64a4c"}, {"problem": 40, "code": "(fn [v [head & tail]]\n  (reduce #(conj (conj %1 v) %2) [head] tail))", "user": "536f96e3e4b0fc7073fd6e83"}, {"problem": 40, "code": "(fn [sep data] (butlast (mapcat (fn [d] [d sep] ) data )))", "user": "55f9b2b6e4b03cbcff9738c8"}, {"problem": 40, "code": "(fn [x col]\n  (drop 1 (mapcat #(vector x %) col)))", "user": "569ab3e2e4b0542e1f8d144a"}, {"problem": 40, "code": "#(conj (mapcat (fn [x] [%1 x]) (next %2)) (first %2))", "user": "56ac81ace4b03c432f187347"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "user": "51b01309e4b0c53cf2e68a57"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat (count %2) %1) %2))", "user": "51a7bf26e4b0da5f497bde8c"}, {"problem": 40, "code": "(fn [sep [f & r]]\n  (reduce #(conj %1 sep %2) [f] r))", "user": "565f8fd2e4b068f2fe63dc41"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5515b68de4b055c2f668d4ef"}, {"problem": 40, "code": "(fn [x s] (butlast (flatten (map (fn [y] [y x]) s))))", "user": "55c0f842e4b01b9910ae2a2b"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "55c5b55fe4b0e31453f649b5"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "56ae214ce4b03c432f18735a"}, {"problem": 40, "code": "(fn [sep coll]\n  (->\n  (mapcat list coll (repeat (count coll) sep))\n  drop-last\n   )\n  )", "user": "5652dd89e4b0f9d632dd8469"}, {"problem": 40, "code": "(fn [el xs] (butlast (mapcat #(conj [] % el) xs)))", "user": "56b35565e4b0982f16b37e16"}, {"problem": 40, "code": "(fn [i lst] (rest (reduce (fn [int-lst b] (concat int-lst [i b])) [] lst)))\n\n;nice use of interleave..\n;#(rest (interleave (repeat %1) %2))", "user": "55e01f4ee4b050e68259b406"}, {"problem": 40, "code": "#(pop(reduce (fn [target e] (conj target e %1)) [] %2))", "user": "56b3146ae4b0982f16b37e0f"}, {"problem": 40, "code": "(fn [i xs]\n  (loop [xss (rest xs) r [(first xs)]]\n        (if (empty? xss)\n          (seq r)\n          (recur (rest xss) (conj r i (first xss))))))", "user": "56a1fce9e4b0542e1f8d14b7"}, {"problem": 40, "code": "(fn [c coll]\n  (loop [remaining coll\n         result []]\n    (if (= 1 (count remaining))\n      (conj result (first remaining))\n      (recur (rest remaining) (conj result (first remaining) c)))))", "user": "54df838de4b024c67c0cf7ae"}, {"problem": 40, "code": "(fn interp [elem sequ]\n  (reduce #(concat\n            %\n            (if (empty? %)\n              (conj nil %2)\n              (concat (conj nil elem) (conj nil %2))\n            )\n           )\n          nil\n          sequ\n  )\n)", "user": "56b36283e4b0982f16b37e18"}, {"problem": 40, "code": "(fn [v s]\n  (reverse (rest (reverse (flatten (map #(list % v) s))))))", "user": "56b18445e4b0982f16b37dee"}, {"problem": 40, "code": "(fn [elem my-seq]\n  (take (dec (* 2 (count my-seq))) (reduce #(into %1 [%2 elem]) [] my-seq)))", "user": "5655e056e4b0f9d632dd849b"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "56b280e3e4b0982f16b37e06"}, {"problem": 40, "code": "(fn [sep coll] (drop-last (mapcat #(cons % [sep]) coll)))\n\n; #(drop-last (interleave %2 (repeat %1)))", "user": "56b295f7e4b0982f16b37e08"}, {"problem": 40, "code": "(fn \n  [n col]\n  (butlast (interleave col (repeat n))))", "user": "56b1ab17e4b0982f16b37df1"}, {"problem": 40, "code": "(fn [sep a-seq]\n  (->> a-seq\n       (map (fn [elt] [elt sep]))\n       flatten\n       butlast))", "user": "5688e403e4b0dcc4269f4072"}, {"problem": 40, "code": "#(reverse (drop-last (flatten (vec (zipmap %2 (repeat %1))))))", "user": "5130c26fe4b08c712d3fae3a"}, {"problem": 40, "code": "#_(fn [s coll]\n  (drop-last (interleave coll (repeat s))))\n\n(fn [s coll]\n   (drop 1 (interleave (repeat s) coll)))", "user": "5297dcc5e4b02ebb4ef75047"}, {"problem": 40, "code": "(fn boo [sep f]\n \t(if (empty? (rest f))\n      (cons (first f) (empty f))\n      (cons (first f) (cons sep (boo sep (rest f))))\n    )\n)", "user": "56b6e354e4b0982f16b37e41"}, {"problem": 40, "code": "(fn [x xs]\n  (drop-last (reduce\n   (fn [ys y] (conj (conj ys y) x)) [] xs)))", "user": "563cdfdfe4b0bfe05bf11840"}, {"problem": 40, "code": "(fn [x xs] (next (interleave (repeat x) xs)))", "user": "56b86e64e4b0f26550335924"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "56baab13e4b0f26550335948"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "54b61cb1e4b05787c3b163b3"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "56bb9ccce4b0f26550335959"}, {"problem": 40, "code": "(fn abc\n  [a L]\n  (if (= (count L) 1)\n    L\n    (concat\n     (list (first L) a)\n     (abc a (rest L))\n    )\n  )\n)", "user": "56bb3a4be4b0f26550335951"}, {"problem": 40, "code": "(fn f [x [y & ys]]\n    (lazy-seq\n      (if (empty? ys)\n        (list y)\n        (cons y (cons x (f x ys))))))", "user": "56bcc2b2e4b0f26550335965"}, {"problem": 40, "code": "#(butlast (mapcat vector %2 (repeat %1)))", "user": "56baa68ce4b0f26550335947"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "531a0709e4b08068f379ed87"}, {"problem": 40, "code": "#(drop-last (mapcat list %2 (repeat %1)))", "user": "56bca51ae4b0f26550335963"}, {"problem": 40, "code": "(fn interpose* [sep coll]\n  (if (empty? coll) ()\n    (cons (first coll) (interleave (repeat sep) (rest coll)))))", "user": "56a01895e4b0542e1f8d149f"}, {"problem": 40, "code": "#(drop-last (mapcat (fn [a] (list a %)) %2))", "user": "56bf4ac0e4b0f26550335985"}, {"problem": 40, "code": "(fn [sep coll]\n  (rest (mapcat list (repeat sep) coll)))", "user": "56ba1406e4b0f2655033593c"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "563536f8e4b0bfe05bf117c5"}, {"problem": 40, "code": "(fn\n  [elem coll]\n  (take (dec (* 2 (count coll)))\n        (flatten (map vector coll (repeat elem)))))", "user": "55ed5a2de4b0121d4835fdd8"}, {"problem": 40, "code": "(fn  [v,c] (pop (reduce (fn [a b] (conj a b v )) [] c )))", "user": "56a6051fe4b0542e1f8d14e5"}, {"problem": 40, "code": "(fn ip [sep xs]\n  (if (<= (count xs) 1)\n    xs\n    (conj (conj (ip sep (rest xs)) sep) (first xs))))", "user": "56bfcba1e4b060a8e693e3a1"}, {"problem": 40, "code": "(fn [pad coll]\n  (-> coll\n      (interleave (repeat pad))\n      drop-last))", "user": "56826ebce4b0945ebc182a93"}, {"problem": 40, "code": "(fn interps\n  [sep coll]\n  (drop 1 (reduce #(conj %1 sep %2) [] coll)))", "user": "5609d328e4b05f002753deee"}, {"problem": 40, "code": "(fn [a b] \n(rest \n ((fn [i coll] (mapcat \n     #(list i %)\n      coll)) a b) ))", "user": "56b80ad1e4b0f26550335921"}, {"problem": 40, "code": "(fn [x coll]\n  (butlast (mapcat vector\n                   coll\n                   (repeat (count coll) x))))", "user": "56c33ceae4b05cc29241ee89"}, {"problem": 40, "code": "#(drop-last (mapcat vector %2 (repeat %1)))", "user": "56a36f76e4b0542e1f8d14ca"}, {"problem": 40, "code": "#( butlast( mapcat vector %2 (into [] ( repeat (count %2) %)) ))", "user": "569637d8e4b0dcc4269f4130"}, {"problem": 40, "code": "(fn [delim coll] (drop 1 (reverse (reduce #(into %1 (list delim %2)) '() coll))))", "user": "56b2573ce4b0982f16b37e02"}, {"problem": 40, "code": "(fn [i s](drop-last (flatten (map (fn [a][a i]) s))))", "user": "56c56603e4b05cc29241eea7"}, {"problem": 40, "code": "#(loop [coll %2 res []]\n   (if (<= (count coll) 1)\n     (concat res coll)\n     (recur (rest coll) (concat res [(first coll) %1]))))", "user": "56c0aeb8e4b060a8e693e3af"}, {"problem": 40, "code": "(fn [sep xs]\n  (-> (map #(vector sep %) xs) \n      flatten\n      rest))", "user": "53161a56e4b08068f379ed3e"}, {"problem": 40, "code": "(fn [delim s]\n  (rest (interleave (take (count s) (repeat delim)) s)))", "user": "56c427bbe4b05cc29241ee94"}, {"problem": 40, "code": "(fn [sep coll]\n  (loop [c [(first coll)]\n         n (rest coll)]\n    (if (empty? n)\n      c\n      (recur (concat c (list sep (first n)))\n             (rest n)))))", "user": "54a80855e4b09f271ff37c9e"}, {"problem": 40, "code": "(fn [n coll] \n  (loop [num 0 result []]\n    (if (= num (dec (count coll)))\n      (conj result (last coll))\n      (recur (inc num) (conj result (nth coll num) n)))))", "user": "56499a5de4b0284900eef644"}, {"problem": 40, "code": "#(vec (drop-last (interleave %2 (cycle [%1]))))", "user": "56c6490de4b05cc29241eeaf"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "567e418fe4b0feffd0d18eb1"}, {"problem": 40, "code": "(fn [v s] (butlast (mapcat #(concat [%] [v]) s)))", "user": "56c08696e4b060a8e693e3aa"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "52c1cc8be4b07a9af579236b"}, {"problem": 40, "code": "#(butlast(reduce \n  (fn [one two]\n    (conj one two %1))\n  []\n  %2))", "user": "54d5343fe4b0a52adc2e200a"}, {"problem": 40, "code": "(fn [inter seq2]\n   (let [li []]\n   (drop-last(flatten (map #(conj li %1 inter) seq2)))))", "user": "56c60b36e4b05cc29241eead"}, {"problem": 40, "code": "(fn [d v] (butlast (flatten (map #(vector % d) v))))", "user": "56c8cff8e4b0ed865f9758d7"}, {"problem": 40, "code": "(fn [sep s]\n    (butlast\n        (flatten\n            (map (fn [item]\n                    [item sep]\n                )\n                s\n            )\n        )\n    )\n)", "user": "56c23ca6e4b05cc29241ee7f"}, {"problem": 40, "code": "#(butlast (mapcat (fn [x] (vector x %1)) %2))", "user": "56c33bb9e4b05cc29241ee87"}, {"problem": 40, "code": "#(cons (first %2) (mapcat (partial vector %) (rest %2) ))", "user": "54b8dfece4b0ed20f4ff6e9a"}, {"problem": 40, "code": "(fn [v col]\n  (butlast (mapcat #(vector % v) col)))", "user": "56a37ccee4b0542e1f8d14cb"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "566470b9e4b0e91d5f5c5658"}, {"problem": 40, "code": "#(butlast (mapcat (fn [x] [x %1]) %2))", "user": "56aed78fe4b03c432f187363"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "56c4f43ce4b05cc29241ee9c"}, {"problem": 40, "code": "(fn [st ls]\n  (cond \n    (string? st)\n    (str (apply str (concat (map #(str % st) (butlast ls)))) (last ls))\n    :else (concat (flatten (map list (butlast ls) (repeat st))) (list (last ls))) \n  )\n)", "user": "54897284e4b0e286459a11e6"}, {"problem": 40, "code": "(fn [r coll]\n      (butlast (mapcat #(list % r) coll)))", "user": "53483a32e4b084c2834f4a57"}, {"problem": 40, "code": ";(fn [sep coll]\n;   (drop 1 (flatten (map #(list sep %) coll))))\n#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "56cba075e4b0ea9b8538f737"}, {"problem": 40, "code": "(fn [v c] (into (empty c) (butlast (interleave c (repeat v)))))", "user": "569f4dabe4b0542e1f8d1491"}, {"problem": 40, "code": "(fn [x coil]\n  (loop [src coil result '()]\n    (if (empty? src) result\n      (recur (butlast src)\n             (if (= 1 (count src))\n               (conj result (last src))\n               (conj (conj result (last src))\n                     x))))))", "user": "56c55fbce4b05cc29241eea5"}, {"problem": 40, "code": "(fn [x xs]\n  (butlast (mapcat #(vector % x) xs)))", "user": "56ce20ffe4b0ea9b8538f75d"}, {"problem": 40, "code": "(fn [a b]  (drop-last (flatten (map #(list %1 a) b))))", "user": "54be7e93e4b0ed20f4ff6eed"}, {"problem": 40, "code": "(fn [sep coll] (butlast (interleave coll (repeat sep))))", "user": "56cb6425e4b0ea9b8538f730"}, {"problem": 40, "code": "(fn _interpose [sep coll]\n  (butlast (mapcat #(conj [%] sep) coll)))", "user": "56c792ace4b0ed865f9758c4"}, {"problem": 40, "code": "(fn [sep input] (drop-last (mapcat #(list % sep) input)))", "user": "506af7d8e4b0a2a5463de37d"}, {"problem": 40, "code": "(fn my-interpose5\n  [sep seq]\n  (reduce (fn [vec new-elm] (conj vec sep new-elm)) (vector  (first seq)) (rest seq)))", "user": "56cf9d4fe4b0ea9b8538f76c"}, {"problem": 40, "code": "(fn [delim vctr]\n  (loop [sq (rest vctr)\n         return (vector (first vctr))]\n    (if (nil? (first sq))\n      return\n      (recur (rest sq)\n             (conj return\n                   delim\n                   (first sq))))))", "user": "55f73078e4b06e875b46cea4"}, {"problem": 40, "code": "(fn [s coll]\n   (loop [left coll out (empty coll)]\n     (if (next left)\n       (recur (next left) (concat out (list (first left)) (list s)))\n       (concat out left))))", "user": "56d06d55e4b0ea9b8538f77f"}, {"problem": 40, "code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "user": "56cbb352e4b0ea9b8538f738"}, {"problem": 40, "code": "(fn [sep col] (into [] (rest (mapcat #(list sep %) col))))", "user": "56b49f72e4b0982f16b37e23"}, {"problem": 40, "code": "(fn [v s]\n  (butlast (mapcat vector s (repeat v))))", "user": "56d1db57e4b0ea9b8538f794"}, {"problem": 40, "code": "(fn [x y] (conj (vec (interleave y (repeat (dec (count y)) x))) (last y)))", "user": "53d977f1e4b0e771c302547a"}, {"problem": 40, "code": "(fn [x y] (reduce #(conj % x %2) (vector (first y)) (rest y)))", "user": "56d1afd9e4b0ea9b8538f791"}, {"problem": 40, "code": "(fn [sep lst] (drop-last (interleave lst (repeat sep))))", "user": "56603e5fe4b068f2fe63dc4a"}, {"problem": 40, "code": "(fn [sep [first & rest]] (reduce (fn [coll item] (conj coll sep item)) [first] rest))", "user": "54ba8206e4b0ed20f4ff6eb6"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "56d228f3e4b0ea9b8538f79a"}, {"problem": 40, "code": "#(loop [v [(first %2)]\n        r (rest %2)]\n   (if (empty? r)\n     v\n     (recur (conj v %1 (first r)) (rest r))))", "user": "56d63729e4b0ea9b8538f7ca"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last (interleave coll (repeat sep))))", "user": "56d05ba2e4b0ea9b8538f77d"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "user": "52fe31d5e4b047fd55837038"}, {"problem": 40, "code": "(fn intp [x [y & ys]]\n  (cond\n   (nil? y) nil\n   (empty? ys) [y]\n   :else (concat [y x] (intp x ys))\n  )\n)", "user": "56433d34e4b08d4f616f5f23"}, {"problem": 40, "code": "#(drop-last (mapcat vector %2 (repeat (count %2) %1)))", "user": "56d68cbae4b0ea9b8538f7cd"}, {"problem": 40, "code": "(fn [item coll]\n   (butlast (mapcat #(vector % item) coll)))", "user": "56c70cc2e4b0ed865f9758b5"}, {"problem": 40, "code": "(fn [x [y & ys]] (cons y (interleave (repeat x) ys)))", "user": "56d80542e4b0ea9b8538f7e1"}, {"problem": 40, "code": "(fn my-interpose\n  [sep coll]\n  (concat (reduce #(concat %1 (vector %2 sep)) [] (butlast coll)) [(last coll)]) )", "user": "56c3aca0e4b05cc29241ee90"}, {"problem": 40, "code": "(fn [v s]\n  (rest (mapcat #(list v %) s)))", "user": "56d4b22de4b0ea9b8538f7bb"}, {"problem": 40, "code": "(fn [sep coll]\n  (loop [in coll out '()]\n    (if (= (count in) 1)\n      (concat out in)\n      (recur\n       (rest in)\n       (concat out (list (first in) sep))))))", "user": "56d5fd24e4b0ea9b8538f7c5"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "565b4d7fe4b068f2fe63dc01"}, {"problem": 40, "code": "#(apply\n   vector\n   (-> (map\n         (fn [x]\n           (list x %1)) %2)\n     flatten\n     butlast))", "user": "56ab80f1e4b03c432f18733e"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "user": "56d8a63fe4b0ea9b8538f7e8"}, {"problem": 40, "code": "#(reduce (fn [c v] (conj (conj c %1) v)) (conj (empty %2) (first %2)) (rest %2))", "user": "55b6a63ae4b01b9910ae299b"}, {"problem": 40, "code": "(fn [intruder a-seq] (drop-last (mapcat list a-seq (repeat intruder))))", "user": "56b6a50ae4b0982f16b37e3c"}, {"problem": 40, "code": "(fn [sep arg] (rest (mapcat #(list sep %) arg)))", "user": "52c634b1e4b0c2d177d6210a"}, {"problem": 40, "code": "(fn [sep coll] (reduce #(concat %1 [sep %2]) [(first coll)] (rest coll)))", "user": "50e09f60e4b061dbdced7237"}, {"problem": 40, "code": "(fn [sep coll] (drop 1 (mapcat vector (repeat sep) coll)))", "user": "56b3b12ee4b0982f16b37e1c"}, {"problem": 40, "code": "#(next (mapcat list (repeat %) %2))", "user": "542a8d07e4b01498b1a71b43"}, {"problem": 40, "code": "(fn [delim coll] (drop-last (mapcat vector coll (repeat delim))))", "user": "560ee566e4b05f002753df57"}, {"problem": 40, "code": "(fn [x coll]\n  (butlast (mapcat #(list % x) coll)))", "user": "550b502ae4b06e50f9beb13f"}, {"problem": 40, "code": ";; #(reduce (fn [a b] (flatten (vector a %1 b))) %2)\n#(drop-last (interleave %2 (repeat %1)))", "user": "56df9203e4b0ca2494a095fc"}, {"problem": 40, "code": "(fn separate-elements [separator coll]\n  (let [size (count coll)]\n    (reduce\n     (fn [latest-result next-element]\n       (let [current-size (count latest-result)]\n         (if (< (/ current-size 2) (- size 1))\n           (conj latest-result next-element separator)\n           (conj latest-result next-element)\n           )\n         )\n       )\n     []\n     coll\n     )\n    )\n  )", "user": "56d74c88e4b0ea9b8538f7d9"}, {"problem": 40, "code": "(fn [inter l] (rest (apply concat (map vector (repeat inter) l))))", "user": "55009d17e4b07d26eda61d5d"}, {"problem": 40, "code": "(fn [x xs]\n  (reduce #(if %1 (conj %1 x %2) [%2]) nil xs))", "user": "56df254be4b0ca2494a095ea"}, {"problem": 40, "code": "(fn ip [val, coll]\n  (let [x (first coll)\n        xs (rest coll)]\n    (concat\n      (if (empty? xs)\n        [x]\n        (concat [x val] (ip val xs))\n        )\n      )\n    )\n  )", "user": "56de0db0e4b0ea9b8538f83a"}, {"problem": 40, "code": "(fn my-interpose [sep coll]\n  (rest (mapcat vector (repeat sep) coll)))", "user": "557e56aae4b05c286339e0d5"}, {"problem": 40, "code": "#(loop [dex 1 sq %2 acc []]\n   (if (empty? sq)\n       acc\n       (recur (inc dex)  \n              (if (odd? dex)\n                  (rest sq)\n                  sq)\n              (conj acc \n                    (if (odd? dex)\n                        (first sq)\n                        %1)))))", "user": "56be8649e4b0f26550335983"}, {"problem": 40, "code": "(fn [sep l] \n  (reduce (fn [acc val] \n            (if (empty? acc) \n              (conj acc val) \n              (conj acc sep val))) [] l))", "user": "556086a2e4b0c656e3ff17c1"}, {"problem": 40, "code": "(fn [v [fst & xs]]\n  (reduce #(conj %1 v %2) [fst] xs)\n  )", "user": "55f33f0ce4b06e875b46ce59"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "56e2dbf4e4b03a7c14b85a3b"}, {"problem": 40, "code": "(fn rec [x ls]\n  (if (or (empty? ls) (empty? (rest ls)))\n    ls\n    (cons (first ls) (cons x (rec x (rest ls))))))", "user": "56d7f340e4b0ea9b8538f7df"}, {"problem": 40, "code": "(fn [x c] (butlast (mapcat #(list % x) c)))", "user": "56e227a8e4b03a7c14b85a31"}, {"problem": 40, "code": "(fn [itm clxn]\n  (vec (reduce concat\n    (map-indexed\n    (fn [idx i]\n     (if (< idx (dec (count clxn))) [i itm] [i]))\n    clxn))))", "user": "56e4a6c1e4b03a7c14b85a51"}, {"problem": 40, "code": "(fn [x l]\n  (reverse\n  (reduce (fn [acc e] (cons e (cons x acc))) (list (first l)) (rest l))))", "user": "56050f06e4b08b23635d3161"}, {"problem": 40, "code": "(fn [sep coll] (drop-last (mapcat #(list % sep) coll)))", "user": "56ca0da9e4b0ea9b8538f715"}, {"problem": 40, "code": "(fn [x y] \n  (loop [a x b y acc []]\n    (if (= (count b) 1)\n      (conj acc (last b))\n      (recur a (drop 1 b) (conj (conj acc (first b)) a) ))))", "user": "56a22d4ae4b0542e1f8d14ba"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %1)))", "user": "56e06625e4b0ca2494a09607"}, {"problem": 40, "code": "(fn [a b] (rest (mapcat #(list a %) b)))", "user": "4de14aad535d08e6dec9fde5"}, {"problem": 40, "code": "#(butlast (mapcat vector %2 (repeat (count %2) %1)))", "user": "56e05bfce4b0ca2494a09606"}, {"problem": 40, "code": "(fn [separator sequ]\n  (butlast (flatten (map #(list % separator) sequ))))", "user": "56e48302e4b03a7c14b85a4e"}, {"problem": 40, "code": "(fn my-interpose\n  [t seq]\n  (rest (interleave (repeat (count seq) t) seq)))", "user": "569f7bc2e4b0542e1f8d1494"}, {"problem": 40, "code": "(fn [i s]\n  (butlast (reduce #(concat %1 [%2 i]) [] s)))", "user": "56308326e4b073c1cf7a9be9"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "56e7d877e4b02e7e935eb6df"}, {"problem": 40, "code": "(fn [sep l] (reduce (fn [x y] (flatten [x sep y])) l))", "user": "56e7ebcce4b02e7e935eb6e2"}, {"problem": 40, "code": "#(reverse (rest (reverse (mapcat vector %2 (repeat %1)))))", "user": "56e6ef89e4b02e7e935eb6d0"}, {"problem": 40, "code": "(fn [x y] (butlast (mapcat #(list % x) y)))", "user": "56491d05e4b0284900eef63a"}, {"problem": 40, "code": "(fn [separator lst] (flatten (reduce #(list %1 separator %2) lst)))", "user": "56cc34aee4b0ea9b8538f73c"}, {"problem": 40, "code": "#(loop [lx % liis (rest %2) lr [(first %2)]]\n    (if (empty? liis)\n      lr\n      (recur lx (rest liis) (conj lr lx (first liis)))))", "user": "56d4b1aee4b0ea9b8538f7ba"}, {"problem": 40, "code": "(fn [sep elems]\n  (loop [result [] elems elems]\n    (if (= 1 (count elems))\n      (conj result (first elems))\n      (recur (vec (concat result [(first elems) sep]))\n             (rest elems)))))", "user": "56b965d9e4b0f26550335931"}, {"problem": 40, "code": "(fn my-interpose [delim coll]\n  (if (= (count coll) 1) coll\n    (concat [(first coll) delim] (my-interpose delim (rest coll)))))", "user": "56e53d2fe4b02e7e935eb6bc"}, {"problem": 40, "code": "(fn [sep lst]\n  (reduce\n    (fn [result item]\n      (if\n        (empty? result)\n        (conj result item)\n        (conj result sep item)))\n    [] lst))", "user": "56e6d049e4b02e7e935eb6cd"}, {"problem": 40, "code": "(fn intercalate [x xs]\n  (if (empty? (rest xs)) \n    xs\n   \t(cons (first xs)\n          (cons x (intercalate x (rest xs))))))", "user": "56e8ef93e4b04a395b9a03f4"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "55d85ac9e4b0e31453f64ab2"}, {"problem": 40, "code": "(fn [delim coll]\n    (rest (reduce #(conj %1 delim %2) [] coll)))", "user": "56eaad95e4b04a395b9a040f"}, {"problem": 40, "code": "(fn [n v] (drop-last (interleave v (repeat n))))", "user": "5602f5fce4b04bb52996e1ad"}, {"problem": 40, "code": "(fn [v xs]\n  (drop 1 (reduce #(conj %1 v %2) [] xs)))", "user": "56e02c1ce4b0ca2494a09602"}, {"problem": 40, "code": "(fn [val coll]\n  (drop-last\n    1\n    (reduce (fn [acc e]\n              (into acc [e val]))\n            []\n            coll)))", "user": "52d38c51e4b099d49816f0c5"}, {"problem": 40, "code": "#(drop-last (interleave %2 (take (count %2) (repeat %1))))", "user": "56eb16d8e4b04a395b9a041d"}, {"problem": 40, "code": "(fn myi [s, l]\n  (if (= (count l) 1)\n    l\n    (conj (myi s (rest l)) s (first l) )\n  )\n)", "user": "56ea8b75e4b04a395b9a0409"}, {"problem": 40, "code": "#(conj (vec (mapcat vector (butlast %2) (repeat %))) (last %2))", "user": "569dd6e8e4b0542e1f8d1480"}, {"problem": 40, "code": "(comp drop-last #(interleave %2 (repeat %1)))", "user": "56ecc4b5e4b04a395b9a043e"}, {"problem": 40, "code": "(fn [x c] (butlast (reduce #(conj %1 %2 x) [] c)))", "user": "56db90d4e4b0ea9b8538f80d"}, {"problem": 40, "code": "(fn [x s] \n  (rest (mapcat #(vector x %1) s) ))", "user": "56ec0af1e4b04a395b9a0430"}, {"problem": 40, "code": "(fn interpose-a-seq [x ys]\n  (drop-last (interleave ys (repeat x))))", "user": "518b8561e4b0f028e99addef"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "user": "56ebe773e4b04a395b9a042a"}, {"problem": 40, "code": "#(butlast(interleave %2 (repeat %)))", "user": "56dc483fe4b0ea9b8538f81b"}, {"problem": 40, "code": "#(-> (interleave (repeat %1) %2) rest)", "user": "527bd988e4b03e8d9a4a759d"}, {"problem": 40, "code": "(fn [x y]\n   (loop [d x\n          l y\n          a []]\n     (if (= 1 (count l))\n       (seq (conj a (first l)))\n       (recur d (rest l) (conj a (first l) d)))))", "user": "56e4427ce4b03a7c14b85a4c"}, {"problem": 40, "code": "(fn intpose\n  [delim coll]\n  (next (reduce #(conj %1 delim %2) [] coll))\n)", "user": "56e99ec8e4b04a395b9a03fb"}, {"problem": 40, "code": "#(rest (reduce into [] (for [ele %2] [%1 ele])))", "user": "562268dce4b03f08ee9a9224"}, {"problem": 40, "code": "(fn [sep data] (rest (interleave (repeat sep) data)))", "user": "56ef11efe4b04a395b9a045b"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %1)))", "user": "4f5599dfe4b0a7574ea71806"}, {"problem": 40, "code": "(fn [x ,y] (drop-last \n            (mapcat #(list % x) y)))", "user": "56f102f9e4b04a395b9a0488"}, {"problem": 40, "code": "(fn [a,b] (loop [s a, [head & more] b, acc []] (if more (recur s more (into acc [head s])) (into acc [head]))))", "user": "56cad309e4b0ea9b8538f720"}, {"problem": 40, "code": "(fn [x, y] (->> (mapcat (fn [z] (list z x)) y) reverse rest reverse))", "user": "56f258d3e4b04a395b9a04a1"}, {"problem": 40, "code": "(fn [a b] (loop [x (seq b) p '()]\n            (if (= 1 (count x))\n              (reverse (conj p (first x)))\n              (recur\n               (rest x)\n               (conj (conj p (first x)) a)\n               )\n              )\n            )\n  )", "user": "56d325ace4b0ea9b8538f7a9"}, {"problem": 40, "code": "(fn [separator items]\n  (loop [accum [], itemss items]\n    (let [[curr & remaining] itemss]\n      (if (nil? remaining)\n        (conj accum curr)\n      \t(recur (into accum [curr separator]) remaining)))))", "user": "56ef2348e4b04a395b9a045c"}, {"problem": 40, "code": "(fn [ve arg dad]\n  (if dad\n    (if (empty? (next dad))\n      (apply into ve [dad])\n      (recur (into ve [(first dad) arg]) arg (next dad)))\n    ve)) []", "user": "56eb5c76e4b04a395b9a0422"}, {"problem": 40, "code": "#(reduce \n\n  (fn [a b]\n    (if (empty? a)\n      (conj a b)\n      (conj (conj a %1) b)\n    )\n  ) [] %2)", "user": "56815e2fe4b0945ebc182a84"}, {"problem": 40, "code": "(fn [a coll]\n  (rest (interleave (repeat a) coll))\n  )", "user": "56f188e9e4b04a395b9a0494"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "55101237e4b06e50f9beb181"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "56f4623ae4b046a417f9205d"}, {"problem": 40, "code": "(fn intrpose [a B]\n  (reduce (fn [x y] (conj x a y)) [(first B)] (rest B)))", "user": "56f53962e4b046a417f9206c"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "52c35afce4b07a9af579238c"}, {"problem": 40, "code": "(let [c '()]\n         (fn [a b] (butlast (flatten (map #(conj c a %) b)))))", "user": "56d6c18ee4b0ea9b8538f7d1"}, {"problem": 40, "code": "(fn [x, coll] (drop-last (mapcat #(list % x) coll)))", "user": "56f15eade4b04a395b9a048e"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "56d1978fe4b0ea9b8538f790"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last)", "user": "5602bdf9e4b04bb52996e1a7"}, {"problem": 40, "code": "#(butlast (mapcat (fn [x] [x %1]) %2))", "user": "56d15251e4b0ea9b8538f78c"}, {"problem": 40, "code": "(fn my-ip [elm sq]\n  (if (second sq)\n    (concat [(first sq) elm] (my-ip elm (rest sq)))\n    sq))", "user": "56dc3dbbe4b0ea9b8538f81a"}, {"problem": 40, "code": "#(butlast (reduce (fn[acc x](conj acc x %)) [] %2))", "user": "56f7ecdfe4b08e7d20b96834"}, {"problem": 40, "code": "(fn [sep coll] (drop-last 1 (mapcat (fn [e] [e sep]) coll)))", "user": "520e37cfe4b066f3ea161c96"}, {"problem": 40, "code": "(fn [n ls] (drop-last (vec (interleave ls (repeat n)))))", "user": "54e7425ee4b024c67c0cf810"}, {"problem": 40, "code": "(fn\n  [i-elem lst]\n  (loop [[lst-elem & lst-remaining] lst\n         result []]\n    (if (empty? lst-remaining) \n      (conj result lst-elem)\n      (recur lst-remaining (conj result lst-elem i-elem)))\n    )\n  )", "user": "56f8055ee4b08e7d20b96835"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "568c92c6e4b0dcc4269f40b8"}, {"problem": 40, "code": "(fn sep [v s] (drop-last (reduce #(conj %1 %2 v) [] s)))", "user": "56f9392ae4b07572ad1a88ac"}, {"problem": 40, "code": "(fn [x arr] (next (reduce #(conj % x %2)[] arr)))", "user": "56cefadee4b0ea9b8538f763"}, {"problem": 40, "code": "(fn [a b] (drop-last(mapcat vector b (repeat a))))", "user": "56efef12e4b04a395b9a0467"}, {"problem": 40, "code": "(fn [sep lst] (let [mpct (mapcat #(list % sep) lst) len (count mpct)] (take (dec len) mpct)))", "user": "56fa3f7ae4b07572ad1a88bf"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "56ea8d33e4b04a395b9a040a"}, {"problem": 40, "code": "(fn f [e c] \n  (if (= (rest c) '())\n    c\n    (concat\n     [(first c) e]\n     (f e (rest c))\n     )\n    )\n  )", "user": "561e8b11e4b064ca9f4b16c0"}, {"problem": 40, "code": "(fn my-interpose \n  ([sep input]\n   (my-interpose sep input nil))\n\t([sep input res]  \n  (if \n    (empty? input)\n    (reverse (rest res))\n    (recur sep (rest input) (cons sep (cons (first input) res) )))))", "user": "53e92f82e4b036ad0777e49d"}, {"problem": 40, "code": "(fn [x coll]\n   (loop [seqs coll\n          result []]\n     (if (seq seqs)\n       (recur \n        (rest seqs)\n        (conj result (first seqs) x))\n       (drop-last result))))", "user": "56d3bc2de4b0ea9b8538f7b0"}, {"problem": 40, "code": "(fn [a b]\n  (drop-last (mapcat #(conj [] % a) b)))", "user": "56efe32ce4b04a395b9a0465"}, {"problem": 40, "code": "(\nfn inter [sep s]                                                                                                                           \n  (reduce                                                                                                                                     \n   (fn [acc el]                                                                                                                               \n       (println \"acc\" acc)                                                                                                                    \n       (conj acc sep el)                                                                                                                      \n     )                                                                                                                                        \n   [(first s)]                                                                                                                                \n   (rest s)                                                                                                                                   \n   )                                                                                                                                          \n  )", "user": "56fbe0cce4b07572ad1a88d8"}, {"problem": 40, "code": "(fn interpose-seq[x s]\n(reduce \n  (fn[accum item] (conj accum x item))\n  [(first s)] (rest s)))", "user": "539f9f79e4b0ca733b97449e"}, {"problem": 40, "code": "(fn [v coll]\n  (butlast (reduce #(conj (conj % %2) v) [] coll)))", "user": "56f9890be4b07572ad1a88b5"}, {"problem": 40, "code": "(fn [sep coll]\n   (rest (flatten (map (fn [x] [sep x]) coll))))", "user": "56fbf83de4b07572ad1a88da"}, {"problem": 40, "code": "(fn [a sek]\n  (loop [res []\n         s sek]\n    (if (= (count s) 1)\n      (conj res (first s))\n      (recur (conj (conj res (first s)) a) (rest s)))))", "user": "5292feb4e4b0239c8a67af39"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "56fdd9a1e4b08d47c97781a8"}, {"problem": 40, "code": ";;(fn [key coll] (butlast (mapcat #(vector % key) coll)))\n\n; (fn [i a-seq] (rest (mapcat #(list i %) a-seq)))\n\n(fn [i coll] (rest (mapcat #(list i %) coll)))", "user": "565487dce4b0f9d632dd8482"}, {"problem": 40, "code": "(fn p\n  [v s]\n  (loop [s s r ()]\n    (if (empty? s)\n      (drop 1 (reverse r))\n      (recur (rest s) (concat (list (first s) v) r)))))", "user": "56df632ce4b0ca2494a095f2"}, {"problem": 40, "code": "(fn [del s]\n  (reduce\n   (fn [acc e]\n     (if (= (count acc) 0)\n       (conj acc e)\n       (into acc [del e])))\n   []\n   s))", "user": "56d2a103e4b0ea9b8538f7a3"}, {"problem": 40, "code": "(fn [i xs] (butlast (mapcat vector xs (repeat i))))", "user": "54a6645be4b09f271ff37c87"}, {"problem": 40, "code": "#(concat (interleave (pop %2) (repeatedly (constantly %1))) [(last %2)])", "user": "56fde58ae4b08d47c97781aa"}, {"problem": 40, "code": "#(drop-last (mapcat vector %2 (repeat %1)))", "user": "56f4cedce4b046a417f92063"}, {"problem": 40, "code": "(fn [i xs] (into [(first xs)] (reduce concat (for [x (rest xs)] [i x]))))", "user": "57006957e4b08d47c97781c8"}, {"problem": 40, "code": "(fn my-interpose\n  [n s]\n  (->> s\n      (mapcat (fn [x] (vec [x n])))\n      (butlast)))", "user": "55ad2d97e4b03311e7b732a2"}, {"problem": 40, "code": "#(butlast (flatten (reduce (fn [a b] (conj a b %1)) [] %2)))", "user": "5700f1f0e4b08d47c97781ce"}, {"problem": 40, "code": "(fn _interpose [v s]\n  (reduce #(conj % v %2) [(first s)] (rest s)))", "user": "57008afae4b08d47c97781ca"}, {"problem": 40, "code": "#(drop 1 (mapcat (fn [x] (list %1 x)) %2))", "user": "56fee4c0e4b08d47c97781b5"}, {"problem": 40, "code": "#(rest (mapcat list (repeat %) %2))", "user": "57002b81e4b08d47c97781c7"}, {"problem": 40, "code": "#(take \n  (dec (* 2 (count %2))) \n  (apply concat (for [x %2] [x %1])))", "user": "56f881e0e4b08e7d20b96839"}, {"problem": 40, "code": "(fn [el ls]\n (butlast (reduce #(conj (conj %1 %2) el) [] ls)))", "user": "5700ec08e4b08d47c97781cd"}, {"problem": 40, "code": "#(butlast (mapcat vector %2 (repeat (count %2) %1)))", "user": "56efb3a3e4b04a395b9a0463"}, {"problem": 40, "code": "(fn interpose-seq [sep xs]\n  (drop 1 (interleave (repeat sep) xs)))", "user": "56efc9fde4b04a395b9a0464"}, {"problem": 40, "code": "#((fn [c b l]\n  (cond\n    (empty? b) l\n    (= 1 (count b)) (conj l (first b))\n    true (recur c (rest b) (conj l (first b) c)))) %1 %2 [])", "user": "5703eda3e4b08d47c9778200"}, {"problem": 40, "code": "(fn [sp sq] (drop-last (interleave sq (repeat sp))))", "user": "5703cd50e4b08d47c97781fc"}, {"problem": 40, "code": "(fn [sep s] (pop (vec (flatten (map #(vector % sep) s)))))", "user": "557a2891e4b05c286339e09f"}, {"problem": 40, "code": "#(rest (mapcat (fn [& v] v) (take (count %2) (repeat %1)) %2))\n#_(fn [sep s] (rest (mapcat #(list sep %) s)))", "user": "56585dbce4b0f9d632dd84b3"}, {"problem": 40, "code": "(fn [v s] (seq (drop-last (reduce #(conj %1 %2 v) [] s))))", "user": "570459a9e4b0b0fb43fd0662"}, {"problem": 40, "code": "(fn [x s]\n  (concat (interleave s (take (dec (count s)) (repeat x)))\n          (list (last s))))", "user": "57035ccfe4b08d47c97781ef"}, {"problem": 40, "code": "(fn [x y]\n  (loop [y y z []]\n    (if (= 1 (count y))\n      (conj z (first y))\n      (recur (rest y)\n             (conj (conj z (first y)) x)))))", "user": "56f85849e4b08e7d20b96836"}, {"problem": 40, "code": "#(drop 1 (interleave  (repeat  %1)    %2))", "user": "56ede653e4b04a395b9a0449"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5703c4c4e4b08d47c97781f7"}, {"problem": 40, "code": ";;get nth val of arg2 and create a new sequence with that followed by arg1\n\n#(drop-last (interleave %2 (repeat %1)))", "user": "570377c1e4b08d47c97781f1"}, {"problem": 40, "code": "(fn [n coll] (butlast (mapcat #(vector %1 n) coll)))", "user": "555d4421e4b0a2eb076a39a8"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "56c7d8dee4b0ed865f9758c9"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %)))", "user": "5707abfce4b0b0fb43fd068d"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "57090dffe4b0b0fb43fd06a6"}, {"problem": 40, "code": "#(reduce \n (fn [accum value] \n   (concat accum [%1 value])\n ) [(first %2)] (rest %2)\n)", "user": "57011eb3e4b08d47c97781d1"}, {"problem": 40, "code": "(fn[x s](concat (mapcat #(list % x) (butlast s)) (list (last s))))", "user": "542fa0dde4b0dad94371f2d2"}, {"problem": 40, "code": "#(reduce (fn [xs v] (if (= (dec (count %2)) (/ (count xs) 2))\n                       (conj xs v)\n                       (conj xs v %1))) [] %2)", "user": "549eb44fe4b0f3d1d8e70fa6"}, {"problem": 40, "code": "(fn [n s] (rest (mapcat list (repeat n) s)))", "user": "5708b96ce4b0b0fb43fd06a3"}, {"problem": 40, "code": "(fn [av s]\n  (->> (for [x s]\n         [x av])\n       flatten\n       butlast))", "user": "5703ce0fe4b08d47c97781fd"}, {"problem": 40, "code": "(fn [s l]\n  (butlast (vec (mapcat #(conj (conj [] %) s) l))))", "user": "536d24ece4b0fc7073fd6e54"}, {"problem": 40, "code": "(fn my-interpose [value seq] (concat (mapcat #(conj (vector %1) value) (drop-last seq)) (vector (last seq))))", "user": "56fbcc1fe4b07572ad1a88d5"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) \n     drop-last vec)", "user": "5703d21ae4b08d47c97781ff"}, {"problem": 40, "code": "(fn [x lst]\n  (loop [result [] cnt 0]\n    (cond (= cnt (count lst)) result\n          (= cnt (dec (count lst)))  (recur (conj result (get lst cnt)) (inc cnt)) \n          :else (recur (conj result (get lst cnt) x ) (inc cnt) )\n      )) )", "user": "570306cae4b08d47c97781ec"}, {"problem": 40, "code": "#(rest (interleave (repeat (count %2) %1) %2))", "user": "56ab7578e4b03c432f18733d"}, {"problem": 40, "code": "(fn [arb col]\n  (butlast\n   (mapcat #(vector % arb) col)\n   )\n  )", "user": "55ba70f9e4b01b9910ae29d4"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last)", "user": "570a2357e4b0b0fb43fd06b5"}, {"problem": 40, "code": "#(loop[[y & ys] %2\n        res '()]\n    (if(nil? y)\n      (drop-last res)\n      (recur ys (concat res (list y %1)))))", "user": "56acfee5e4b03c432f18734f"}, {"problem": 40, "code": "(fn [x y] (rest (interleave (repeat x) y)))", "user": "56eb3f9de4b04a395b9a0420"}, {"problem": 40, "code": "(fn [x coll]\n  (->> coll (map #(list x %)) (apply concat) rest))", "user": "56fc0601e4b07572ad1a88db"}, {"problem": 40, "code": "(fn\n  [insert-val aseq]\n  (loop [lseq aseq acc []]\n    (if (empty? lseq)\n      acc\n      (if (= 1 (count lseq))\n        (conj acc (first lseq))\n        (recur (rest lseq) (conj acc (first lseq) insert-val))))))", "user": "56cb4d06e4b0ea9b8538f72e"}, {"problem": 40, "code": "#(drop-last (mapcat list %2 (repeat %1)))", "user": "56b506d5e4b0982f16b37e2d"}, {"problem": 40, "code": "(fn [v xs] (butlast (mapcat #(cons % [v]) xs)))", "user": "4f8490fae4b033992c121c34"}, {"problem": 40, "code": "(fn [x y]\n   (conj (into [] (mapcat #(list % x) (drop-last y))) (last y)))", "user": "567e6d24e4b0feffd0d18eb4"}, {"problem": 40, "code": "(fn [c xs]\n  (butlast (mapcat #(vector % c) xs)\n  )\n  )", "user": "56fe665be4b08d47c97781af"}, {"problem": 40, "code": "(fn f40 [v col]\n  (rest (loop [x 0\n          result []]\n     (if (< x (count col))\n       (recur (inc x) (conj result v (nth col x)))\n       result)\n     ))\n  )", "user": "54f5aa4ce4b0f2f3c5226e94"}, {"problem": 40, "code": "(fn [x seq] (butlast (mapcat #(vector %1 x) seq)))", "user": "56f18d0ce4b04a395b9a0496"}, {"problem": 40, "code": "(fn [sep coll] (butlast (interleave coll (repeat sep))))", "user": "5712854ce4b07c98581c3a89"}, {"problem": 40, "code": "#(drop-last (mapcat list %2 (repeat (count %2) %1)))", "user": "5711b532e4b09c608db70449"}, {"problem": 40, "code": "(fn a [b c]\n\t(if (string? (get c 0)) \n\t\t(clojure.string/join b c)\n\t\t((fn d [e]\n\t\t\t(read-string (clojure.string/replace (clojure.string/replace (str e) #\"\\\\\" \"\") #\": \" \":\"))\n\t\t) (into [] (clojure.string/join b c))\n\t\t)\n\t)\n)", "user": "5710e574e4b09c608db7043b"}, {"problem": 40, "code": "(fn [sep lst] \n  (into [] (drop 1 (apply concat (map #(vector sep %) lst))))\n  )", "user": "5713e307e4b07c98581c3aaf"}, {"problem": 40, "code": "#(reduce (fn [acc next] (conj acc %1 next)) [(first %2)] (rest %2))", "user": "57155980e4b07c98581c3ad7"}, {"problem": 40, "code": "#((comp rest flatten) (map (fn [x] [%1 x]) %2))", "user": "57168db0e4b07c98581c3afc"}, {"problem": 40, "code": "#(butlast (mapcat (fn [x] (list x %1)) %2))", "user": "5717e367e4b07c98581c3b1d"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %)))", "user": "56fa2905e4b07572ad1a88be"}, {"problem": 40, "code": "(fn [e [f & r]]\n     (concat (list f)\n     ((fn [result [first & rest]]\n        (let [c (concat result (list e first))]\n          (if (empty? rest)\n            c\n            (recur c rest)))) '() r)))", "user": "5713c575e4b07c98581c3aab"}, {"problem": 40, "code": "(fn intrpse\n  [sep coll]\n  (loop [[x & xs] coll acc []]\n    (if xs\n      (recur xs (into acc [x sep]))\n      (conj acc x))))", "user": "56edf2dde4b04a395b9a044b"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5716845be4b07c98581c3afa"}, {"problem": 40, "code": "(fn interpose' [i l]\n  (let [x (first l)\n        xs (rest l)]\n  (cond (empty? xs) (cons x nil)\n        :otherwise (cons x (cons i (interpose' i xs))))))", "user": "5717ad6fe4b07c98581c3b14"}, {"problem": 40, "code": "#(loop [L %2, result []]\n   (if (= (count L) 1)\n     (conj result (first L))\n     (recur (rest L) (conj result (first L) %1))))", "user": "57015a1de4b08d47c97781d4"}, {"problem": 40, "code": "(fn [x coll]\n  (butlast (mapcat #(vector % x) coll)))", "user": "571bc0a1e4b07c98581c3b6c"}, {"problem": 40, "code": "(fn [i s] \n  (let [bl (butlast s)\n        l (last s)]\n    (conj \n     (vec \n      (apply concat \n            (for [k bl] [k i]))) \n     l)))", "user": "56f51879e4b046a417f92069"}, {"problem": 40, "code": "(fn walk [x coll]\n  (if (empty? (rest coll))\n    (if (first coll) (list (first coll)) nil)\n    (cons (first coll) (cons x (walk x (rest coll))))))", "user": "571c2babe4b07c98581c3b73"}, {"problem": 40, "code": "(fn [e coll]\n  (drop-last(reduce concat (map #(vector % e) coll))))", "user": "570794d8e4b0b0fb43fd068b"}, {"problem": 40, "code": "(fn [v s]\n  (rest (interleave (repeat v) s)))", "user": "571d063ee4b0145328a76272"}, {"problem": 40, "code": "#(loop [s %2 r []]\n   (if (and (seq s) (< 1 (count s))) \n     (recur (rest s) (conj r  (first s) %1 )) \n     (conj r (first s))))", "user": "571ac0b8e4b07c98581c3b5b"}, {"problem": 40, "code": "(fn [n coll]\n    (butlast (mapcat vector coll (repeat n))))", "user": "563a79e5e4b0bfe05bf117fe"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "5714e82ae4b07c98581c3ac9"}, {"problem": 40, "code": "(fn [x xs]\n  (rest (mapcat #(apply list %&) (repeat x) xs)) )", "user": "5719465fe4b07c98581c3b36"}, {"problem": 40, "code": "(fn [del col]\n  (butlast (mapcat #(list % del) col)))", "user": "571e5c9ee4b0145328a76290"}, {"problem": 40, "code": "(fn [sep l] (conj (reduce #(conj %1 %2 sep) [] (butlast l)) (last l)))", "user": "5717d674e4b07c98581c3b1a"}, {"problem": 40, "code": "#(rest (mapcat (fn [x] (conj [] %1 x)) %2))", "user": "571dd145e4b0145328a76283"}, {"problem": 40, "code": "(fn my-interpose\n  [sign s]\n  (loop [l s\n         res []]\n    (if (nil? (first l))\n      res\n      (if (nil? (second l))\n        (recur (rest l) (conj res (first l)))\n        (recur (rest l) (conj res (first l) sign))\n      )\n    )\n  )\n)", "user": "571b900ae4b07c98581c3b69"}, {"problem": 40, "code": "(fn [s r] \n        (butlast (mapcat (fn [x] [x s]) r))\n    )", "user": "5702c8eae4b08d47c97781e6"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "571aad45e4b07c98581c3b59"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "571e6d73e4b0145328a76292"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "52ae886de4b0c58976d9acab"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "56df63e1e4b0ca2494a095f6"}, {"problem": 40, "code": "(fn f [n l]\n  (cond \n   (empty? (rest l)) l\n   :else (concat (list (first l) n) (f n (rest l)))\n   ))", "user": "56df6351e4b0ca2494a095f3"}, {"problem": 40, "code": "(fn\n  [n lst]\n  (->> (reduce concat (map (fn [item] (conj () n item)) lst))\n       (reverse)\n       (drop 1)\n       (reverse)))", "user": "56df6498e4b0ca2494a095f8"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last\n   (mapcat #(conj [] % sep) coll)))", "user": "56df63c7e4b0ca2494a095f5"}, {"problem": 40, "code": "(fn newInterpose\n  [number lista]\n  (rest (flatten (map #(concat [number] [%]) lista))))", "user": "56fe2a2fe4b08d47c97781ad"}, {"problem": 40, "code": "(fn [separator coll]\n  (loop [[head & tail] coll\n         result []]\n    (if tail\n      (recur tail (into result [head separator]))\n      (conj result head))))", "user": "553e3260e4b0a04f792994eb"}, {"problem": 40, "code": "(fn \n  [v coll] \n  (butlast (mapcat #(vector % v) coll)))", "user": "56df6417e4b0ca2494a095f7"}, {"problem": 40, "code": "(fn ipose [i items]\n  (cond (empty? items) '()\n        (= (count items) 1) (list (first items))\n        :else (concat (list (first items) i) (ipose i (rest items)))))", "user": "5716540fe4b07c98581c3af3"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "571e819ae4b0145328a76294"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "56df629fe4b0ca2494a095ee"}, {"problem": 40, "code": "(fn inter-pose [sep col]\n  (loop [final [(first col)]\n         remain (rest col)]\n    (if (empty? remain)\n      final\n      (recur (conj (conj final sep) (first remain))\n       \t\t (rest remain)))))", "user": "56f57481e4b046a417f92072"}, {"problem": 40, "code": "(fn intp [n lst]\n\t(if (empty? (rest lst)) lst\n        (cons (first lst) (cons n (intp n (rest lst))))))", "user": "56fc1bc7e4b07572ad1a88dd"}, {"problem": 40, "code": "(fn inject [a coll]\n  (if (empty? (rest coll))\n    coll\n    (cons  (first coll) (cons a (inject a (rest coll))))))", "user": "571cd9dce4b0145328a76271"}, {"problem": 40, "code": "(fn [x lstA]\n   (loop [lstA lstA\n          x x\n          aux ()]\n     (if (empty? lstA)\n       (reverse  (rest aux) )\n       (recur (rest lstA) x (conj aux (first lstA) x ))\n       )))", "user": "56e9a56ae4b04a395b9a03fc"}, {"problem": 40, "code": "(fn func\n  [x y]\n  (if (= 1 (count y))\n    y\n    (concat (list (first y) x) (func x (rest y)))\n    )\n  )", "user": "56de78fde4b0ea9b8538f83c"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2 ))", "user": "571fd5a7e4b0145328a762b8"}, {"problem": 40, "code": "(fn [seperator coll] \n  (drop-last (mapcat \n   #(list % seperator) \n   coll)))", "user": "4df73d64535d04ed9115e775"}, {"problem": 40, "code": "(fn [v coll]\n  (drop-last (interleave coll (repeat (count coll) v))))", "user": "516c3472e4b06f078fab251c"}, {"problem": 40, "code": "(fn [delimeter ss]\n  (drop-last (reduce #(conj %1 %2 delimeter) [] ss)))", "user": "56c2c342e4b05cc29241ee85"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "57201f14e4b0c5bde472c08e"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "57211a02e4b0c5bde472c0a9"}, {"problem": 40, "code": "(fn ip [s l]\n   (rest \n    (mapcat #(conj (empty l) s %) l)\n   )\n)", "user": "5720fc08e4b0c5bde472c0a3"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last\n   (mapcat #(conj [] % sep) coll)))", "user": "52afa8a1e4b0c58976d9acbe"}, {"problem": 40, "code": "(fn [el lst]\n  (concat (mapcat #(list % el) (butlast lst)) (list (last lst))))", "user": "56df62b3e4b0ca2494a095ef"}, {"problem": 40, "code": "(fn [x coll] (butlast (mapcat #(list % x) coll)))", "user": "57283dbce4b0c5bde472c154"}, {"problem": 40, "code": "(fn [token items]\n  (drop-last (mapcat vector items (take (count items) (repeat token)))))", "user": "572722c4e4b0c5bde472c134"}, {"problem": 40, "code": "(fn add-buffer [el lst]\n  (reverse (rest (reverse (loop [lst lst ret []]\n    (if (empty? lst)\n      ret\n      (recur (rest lst) (conj (conj ret (first lst)) el))\n    )\n  ))))\n)", "user": "5726adf8e4b0c5bde472c12b"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "5724a4dae4b0c5bde472c0fe"}, {"problem": 40, "code": "#(drop-last(mapcat vector %2 (repeat (count %2) %1)))", "user": "572af688e4b0f4d77e651249"}, {"problem": 40, "code": "(fn [n lst]\n  (rest (mapcat #(list n %) lst)))", "user": "571ff1ebe4b0c5bde472c088"}, {"problem": 40, "code": "(fn\n  [e l]\n  (loop [l l\n         res ()]\n    (if (empty? l) (reverse res)\n      (if (empty? (rest l)) (recur (rest l) (cons (first l) res))\n        (recur (rest l) (cons e (cons (first l) res)))))))", "user": "56df636ae4b0ca2494a095f4"}, {"problem": 40, "code": "(fn [a coll] vector (drop-last (mapcat #(vec [% a]) coll)))", "user": "56785234e4b05957ce8c6177"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "57210e8ee4b0c5bde472c0a8"}, {"problem": 40, "code": "(fn \n  [x lst]\n  (drop-last\n   (mapcat #(conj [] % x) lst)))", "user": "56df7440e4b0ca2494a095fb"}, {"problem": 40, "code": "(fn \n  [n lst]\n  (rest (mapcat #(list n %) lst)))", "user": "5723e6d6e4b0c5bde472c0f1"}, {"problem": 40, "code": "(fn [x s] \n  (rest (mapcat #(vector x %1) s) ))", "user": "57289d7ee4b0c5bde472c15d"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5715b67fe4b07c98581c3ae1"}, {"problem": 40, "code": "(fn my-interpose\n  [sep coll]\n  (cond\n   (empty? coll) '()\n   (= 1 (count coll)) (list (first coll))\n   :else (conj (my-interpose sep (rest coll)) sep (first coll))))", "user": "572db6d5e4b0cd1946bd0f78"}, {"problem": 40, "code": "(fn interposeIt [separator coll]\n  (apply conj [(first coll)] (mapcat #(conj [separator] %) (rest coll))))", "user": "57131dfbe4b07c98581c3a98"}, {"problem": 40, "code": "(fn\n  [el l]\n  (loop [e el lst l res []]\n    (if (empty? lst) (pop res)\n      (recur e (rest lst) (conj res (first lst) e)))))", "user": "57061d20e4b0b0fb43fd0679"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "53716539e4b0fc7073fd6eb1"}, {"problem": 40, "code": "#(loop [a %1 b %2 acc []]\n    (if (= (count b) 1)\n      (conj acc (first b))\n      (recur a (rest b) (conj acc (first b) a))\n      ))", "user": "57147cd9e4b07c98581c3abf"}, {"problem": 40, "code": "#(conj (interleave (repeat %1) (rest %2)) (first %2))", "user": "572a3d77e4b0f4d77e651230"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "572a3d8ce4b0f4d77e651231"}, {"problem": 40, "code": "(fn ip [x y]\n  (if (empty? y)\n    []\n    (if (= 1 (count y))\n      y\n      (cons (first y) (cons x (ip x (rest y)))))))", "user": "53829b28e4b06839e8705ed6"}, {"problem": 40, "code": "(fn [e l]\n  (rest (mapcat (fn [x] (list e x)) l)))", "user": "5703cb87e4b08d47c97781f9"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "54b0519be4b09f271ff37d14"}, {"problem": 40, "code": "(fn [c xs] (next (reduce #(conj % c %2) [] xs)))", "user": "51a88e7fe4b08d8ec191b813"}, {"problem": 40, "code": "(fn [sep coll]\n    (letfn [(join [c]\n     (if (> (count c) 1)\n      (cons (first c) (cons sep (join (rest c))))\n      c\n     )\n    )]\n    (join coll)\n    )\n  )", "user": "57213df6e4b0c5bde472c0ab"}, {"problem": 40, "code": "#(rest (mapcat (partial list %1) %2))", "user": "57299c57e4b0c6e51e0d2b1e"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v)coll)))", "user": "57297fb2e4b0c6e51e0d2b1c"}, {"problem": 40, "code": "(fn [x y] (drop-last (mapcat vector y (repeat x))))", "user": "572a60cee4b0f4d77e651237"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5733e4aee4b0cd1946bd0ffe"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "573632b7e4b0cd1946bd102f"}, {"problem": 40, "code": "(fn [sep coll]\n    (reduce (fn [result item] \n              (if (= item (last coll))\n                (conj result item)\n                (conj result item sep)\n                )\n              )\n            []\n            coll)\n    )", "user": "571a282ae4b07c98581c3b46"}, {"problem": 40, "code": "(fn [x y] (drop-last (mapcat #(conj [] % x) y)))", "user": "570eeb66e4b0b0fb43fd06fa"}, {"problem": 40, "code": ";; #40\n(fn [separator coll]\n  (loop [current []\n         remaining coll]\n    (if (empty? remaining)\n      current\n      (recur\n       (if (empty? (rest remaining))\n         (conj current (first remaining))\n         (conj current (first remaining) separator))\n       (rest remaining)))))", "user": "55f5b8d6e4b06e875b46ce8d"}, {"problem": 40, "code": "(fn [i, s]\n  (butlast\n    (interleave\n      s\n      (repeat (count s) i))))", "user": "572ea970e4b0cd1946bd0f89"}, {"problem": 40, "code": "(fn [sep sq] (flatten (reduce #(conj [] %1 sep %2) sq)))", "user": "573107d5e4b0cd1946bd0fbc"}, {"problem": 40, "code": "(fn [x y]\n  (loop [coll y result []]\n    (if (empty? coll)\n      result\n      (recur (rest coll) (if (> (count coll) 1)\n                           (conj (conj result (first coll)) x)\n                           (conj result (first coll)))))))", "user": "57344edbe4b0cd1946bd1008"}, {"problem": 40, "code": "(fn[x y] \n   (pop (into []\n   (flatten\n    (map \n    #(conj [%] x)\n    y\n    )\n   )))\n  )", "user": "56e6e1e6e4b02e7e935eb6cf"}, {"problem": 40, "code": "(fn [x y]\n\t(flatten \n\t\t(cons \n\t\t\t(seq [(first y)]) \n\t\t\t(map #(seq [x %]) (rest y))\n\t\t\t)\n\t\t)\n\t)", "user": "56e30cefe4b03a7c14b85a3d"}, {"problem": 40, "code": "(fn [sep-val, s]\n  (loop [sv sep-val\n         in s\n         output []]\n    (if (== 0 (count in))\n      (seq (next output))\n      (recur sv (next in) (conj output sv (first in)))\n      )\n    )\n  )", "user": "5739fa01e4b0cd1946bd1082"}, {"problem": 40, "code": "(fn [inter in-seq] (drop-last (interleave in-seq (repeat inter))))", "user": "571d9669e4b0145328a7627f"}, {"problem": 40, "code": "(fn [a l]    (cons  (first l) (mapcat  #(list a %)  (rest l)   ) )         )", "user": "5735ac67e4b0cd1946bd102b"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "573652e1e4b0cd1946bd1030"}, {"problem": 40, "code": "(fn [c l] (take (- (* 2 (count l)) 1) (interleave l (repeat c))))", "user": "5739cbe4e4b0cd1946bd107c"}, {"problem": 40, "code": "(fn [n s] (cons (first s) (interleave (repeat n) (rest s))))", "user": "573ce277e4b05c31a32c080b"}, {"problem": 40, "code": "(fn [x coll]\n  (next (interleave (take (count coll) (repeat x)) coll)))", "user": "572a856be4b0f4d77e65123b"}, {"problem": 40, "code": "#(concat (interleave %2 (repeat (- (count %2) 1) %)) [(last %2)])", "user": "55c3f19de4b0e31453f64991"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat (count %2) %)))", "user": "56ff45e5e4b08d47c97781bb"}, {"problem": 40, "code": "#(take (dec (* 2 (count %2))) (interleave %2 (repeat %1)))", "user": "56c26880e4b05cc29241ee81"}, {"problem": 40, "code": "(fn [interposee interposed]\n   (butlast (reduce #(concat %1 [%2 interposee]) [] interposed)))", "user": "57280b92e4b0c5bde472c14e"}, {"problem": 40, "code": "(fn [seperator coll]\n  (drop-last (interleave coll (repeat seperator))))", "user": "55cb11e9e4b0e31453f649ff"}, {"problem": 40, "code": "(fn intrps [el sq]\n  (->>\n    sq\n    (mapcat #(identity [% el]))\n    (take (dec (* 2 (count sq))))))", "user": "561814bae4b06b1bb2182a1a"}, {"problem": 40, "code": "(fn [v sq] (butlast (mapcat #(list % v) sq)))", "user": "57300c19e4b0cd1946bd0fa1"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "519d2a0be4b037b32803f9ae"}, {"problem": 40, "code": "(fn [e l]\n  (rest (apply concat (map #(list e %) l))))", "user": "573f63bfe4b05c31a32c0842"}, {"problem": 40, "code": "(fn z [x s] (drop-last (mapcat #(list % x) s)))", "user": "572ac718e4b0f4d77e651242"}, {"problem": 40, "code": "(fn interpose-a-seq [v s]\n  (rest (mapcat #(list v %) s)))", "user": "573b664ce4b0cd1946bd10a7"}, {"problem": 40, "code": "(fn [sep, coll] \n  (let [temp (reduce (fn [acc x]\n     \t\t\t(concat acc (list x sep))) `() coll)]\n   \t\t(take (- (count temp) 1) temp)))", "user": "57434103e4b0c285004e8a9e"}, {"problem": 40, "code": "(fn [i coll] \n  (loop [c coll\n         r []]\n    (if (empty? c)\n      r\n      (recur \n       (rest c)\n       (if (empty? r) \n        (vector (first c))\n        (conj r i (first c)))))))", "user": "55f5c118e4b06e875b46ce8e"}, {"problem": 40, "code": "(fn [i x]\n  (drop-last\n   (interleave x (repeat (count x) i))))", "user": "57458b82e4b009280f9f2b4e"}, {"problem": 40, "code": "(fn [elem coll]\n  (if (empty? coll)\n    nil\n    (loop [[x & xs :as all] (rest (seq coll))\n          result (list (first (seq coll)))]\n      (if all\n        (recur xs (cons x (cons elem result)))\n        (reverse result)\n      )\n    )\n  )\n)", "user": "57434339e4b0c285004e8a9f"}, {"problem": 40, "code": ";#(butlast (mapcat vector %2 (repeat %1)))\n#(butlast (interleave %2 (repeat %1)))", "user": "57407ab3e4b05c31a32c0854"}, {"problem": 40, "code": "#(butlast (interleave %2 (take (count %2) (repeat %1))))", "user": "5745b884e4b009280f9f2b53"}, {"problem": 40, "code": "(fn [x coll]\n  (let [xcoll (repeat (count coll) x)\n    \tlcoll (mapcat vector coll xcoll)\n        n (- (count lcoll) 1)]\n    (take n lcoll)))", "user": "5684c439e4b04eec3ec5cfc1"}, {"problem": 40, "code": "#(loop [s %2 v %1 o []]\n   (cond\n    (empty? s)\n    o\n    (empty? (rest s))\n    (recur (rest s)\n           v\n           (conj o (first s)))\n    :else\n    (recur (rest s)\n           v\n           (conj\n            (conj o (first s))\n            v))))", "user": "56a9d4bbe4b07966d5a8a07b"}, {"problem": 40, "code": "(fn [n coll] (drop-last (flatten (for [x coll] [x n]))))", "user": "573ddfc2e4b05c31a32c081b"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "5746d767e4b009280f9f2b6b"}, {"problem": 40, "code": "(fn inter [n s] (if (= 1 (count s)) (list(first s))  (concat (list (first s) n) (inter n (rest s)))))", "user": "573c813be4b0cd1946bd10c5"}, {"problem": 40, "code": "(fn [sep coll] (rest (interleave (repeat sep) coll)))", "user": "52dda39fe4b09f7907dd13e7"}, {"problem": 40, "code": "#(drop-last (apply concat (for [x %2 :let [y %1 z [ x y]]] z)))", "user": "573940e3e4b0cd1946bd106b"}, {"problem": 40, "code": "(fn [v s]\n      (reverse (drop 1 (reduce #(cons v (cons %2 %1)) [] s))))", "user": "56a94562e4b07966d5a8a074"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "574977cbe4b009280f9f2b9b"}, {"problem": 40, "code": "(fn interpose2 [n s]\n    (loop [ c s\n          , out []]\n      (if (= (count c) 0)\n        (drop-last out)\n        (recur \n          (rest c)\n          (conj out (first c) n )\n        )\n      )\n    )\n\n  )", "user": "571aae1fe4b07c98581c3b5a"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "57023e92e4b08d47c97781da"}, {"problem": 40, "code": "(fn [v s]\n  (reduce #(conj %1 v %2) [(first s)] (rest s)))", "user": "51647faae4b003cf19fdde3b"}, {"problem": 40, "code": "(fn[separator s] (drop-last (reduce (fn[x y] (conj x y separator)) [] s)))", "user": "571172ece4b09c608db70446"}, {"problem": 40, "code": "(fn [v l] (drop-last (flatten (map #(conj [%] v) l))))", "user": "574986cae4b009280f9f2b9c"}, {"problem": 40, "code": "(fn inter [v s]\n  (loop [l (rest s)\n         res [(first s)]]\n    (if (empty? l)\n      res\n      (recur (rest l) (conj res v (first l))))))", "user": "573f3ccfe4b05c31a32c083f"}, {"problem": 40, "code": "(fn [sep coll] (rest (interleave (repeat sep) coll)))", "user": "4e7e8485535db169f9c79716"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "574a9132e4b02ea1147991fd"}, {"problem": 40, "code": "(fn [seq coll] (drop-last (mapcat vector coll (repeat seq))))", "user": "57445f5be4b009280f9f2b36"}, {"problem": 40, "code": "(fn [x s] \n  (rest (mapcat #(vector x %1) s) ))", "user": "574af03ce4b02ea114799202"}, {"problem": 40, "code": "(fn interposeASeq [interVal coll]\n   (loop [result [] interVal interVal coll coll]\n     (if (= 1 (count coll))\n      (conj result (first coll))\n    (recur (conj result (first coll) interVal) interVal (rest coll)))))", "user": "57465526e4b009280f9f2b61"}, {"problem": 40, "code": "(fn [sep xs]  \n  (drop-last\n   (interleave xs (repeat sep))))", "user": "57275898e4b0c5bde472c13e"}, {"problem": 40, "code": "(fn [v seq] \n  (loop [s seq r []]\n    (cond \n      (empty? s) r\n      (empty? (rest s)) (conj r (first s))\n      :else (recur (rest s) (conj (conj r (first s)) v)))))", "user": "57462a4de4b009280f9f2b5d"}, {"problem": 40, "code": "(fn [ch coll] (drop-last (mapcat #(list %2 %1) (repeat ch) coll)))", "user": "570ab24fe4b0b0fb43fd06b7"}, {"problem": 40, "code": "#(drop-last (mapcat vector %2 (repeat %1)))", "user": "57408f87e4b05c31a32c0856"}, {"problem": 40, "code": "(fn [d xs] (drop-last (mapcat (fn [x] [x d]) xs)))", "user": "574dfcb8e4b02ea11479923a"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %)))", "user": "56bb652ae4b0f26550335953"}, {"problem": 40, "code": "(fn [v xs] (butlast (mapcat vector xs (repeat v))))", "user": "56098ccbe4b0053d1b86c7e4"}, {"problem": 40, "code": "(comp vec butlast (fn [sep coll] (interleave coll (repeat sep))))", "user": "574f5496e4b02ea11479925c"}, {"problem": 40, "code": "(fn foo\n  [sep [fst & rst]]\n  (if\n    (empty? rst)\n    (list fst)\n    (conj (foo sep rst) sep fst)))", "user": "5747e22ce4b009280f9f2b7c"}, {"problem": 40, "code": "(fn my-interpose [x l]\n  (drop-last (reduce #(conj %1 %2 x) [] l)))", "user": "574f1c24e4b02ea114799255"}, {"problem": 40, "code": "(fn [v s]\n  (reduce\n    (fn [r e] (conj r v e)) \n       [(first s)] (rest s)))", "user": "574e7be7e4b02ea114799242"}, {"problem": 40, "code": "(fn [v s]\n    (butlast (mapcat #(list % v) s)))", "user": "52e1c276e4b09f7907dd142b"}, {"problem": 40, "code": "(fn [i is] (drop-last (reduce #(conj %1 %2 i) [] is)))", "user": "5372e7d9e4b06d7f452d9e02"}, {"problem": 40, "code": "(fn [separ alist]\n  (reduce #(concat (if (seq? %1) %1 (list %1)) [separ %2]) alist))", "user": "5705e404e4b0b0fb43fd0676"}, {"problem": 40, "code": "(fn\n  [s xs]\n  (butlast\n   (flatten\n    (map (fn [x] [x s]) xs))))", "user": "558a099de4b0277789237614"}, {"problem": 40, "code": "(fn  [a b] \n    (->>\n      b\n      (map (fn [x] [x] ) )\n      (reduce (fn [l r] (concat l [a] r)) )\n      )\n    )", "user": "573407f0e4b0cd1946bd1001"}, {"problem": 40, "code": "(fn ips [separator, sequence] (drop-last (reduce #(conj % %2 separator) [] sequence)))", "user": "572ec4dde4b0cd1946bd0f8d"}, {"problem": 40, "code": "(fn [sep seq] (take (- (* 2 (count seq)) 1) (mapcat list seq (take (count seq) (repeat sep)))))", "user": "54c611d1e4b045293a27f627"}, {"problem": 40, "code": "(fn [sep coll] (drop-last (mapcat #(conj [] % sep) coll)))", "user": "54f1e004e4b024c67c0cf8b9"}, {"problem": 40, "code": "(fn [sep coll] (reduce (fn [v x] (concat v (if (empty? v) nil (vector sep)) (vector x))) [] coll ))", "user": "5744d088e4b009280f9f2b41"}, {"problem": 40, "code": "#(drop-last (mapcat list %2 (repeat %1)))", "user": "57539e04e4b02ea1147992ab"}, {"problem": 40, "code": "#(rest (interleave (repeat (count %2) %1) %2))", "user": "56cd75bee4b0ea9b8538f74b"}, {"problem": 40, "code": "(fn i [v [x & r :as c]]\n  (if (empty? r)\n    c\n    (concat [x v] (i v r))))", "user": "5742ec91e4b05c31a32c0883"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "57533bc1e4b02ea1147992a6"}, {"problem": 40, "code": "#(loop [collection %2\n         result '()]\n    (if (= (count collection) 1)\n      (concat result (list (last collection)))\n      (recur (rest collection) (concat result (list (first collection) %1)))))", "user": "5751aeabe4b02ea11479928a"}, {"problem": 40, "code": "(fn f [sep s]\n   (let [c (count s)]\n  (cond (= c 2)\n      [(first s) sep (second s)]\n        (> c 2)\n          (concat [(first s) sep]  (f sep (rest s)))\n        :else s\n        )\n  )\n )", "user": "5743e316e4b0c285004e8ab3"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "56749133e4b05957ce8c613e"}, {"problem": 40, "code": "(fn [s col] (rest (reduce #(conj %1 s %2) [] col)))", "user": "574c5e18e4b02ea11479921b"}, {"problem": 40, "code": "#(rest (mapcat list (repeat %) %2))", "user": "53ff602fe4b0de5c418485ff"}, {"problem": 40, "code": "#(drop-last (mapcat vector %2 (repeat %1)))", "user": "5756f7d7e4b02ea1147992e9"}, {"problem": 40, "code": "(fn interpose_ [x coll]\n  (lazy-seq\n   (when-let [c (seq coll)]\n     (if (first (rest c))\n       (cons (first c) (cons x (interpose_ x (rest c))))\n       (cons (first c) (interpose_ x (rest c)))))))", "user": "574ed2f7e4b02ea11479924a"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5751f2a2e4b02ea114799292"}, {"problem": 40, "code": "#(butlast (reduce (fn [ar el] (conj (conj ar el) %1)) [] %2))", "user": "57440f77e4b0c285004e8ab5"}, {"problem": 40, "code": "#(cons (first %2)\n  (reduce concat (map \n   \t(fn[x] [%1 x])\n   \t(rest %2)\n  ))\n)", "user": "54283a7ae4b01498b1a71b2f"}, {"problem": 40, "code": "( fn my-interpose [ i coll ]\n  ( take ( - ( * ( count coll ) 2 ) 1 )( mapcat #( seq [ % i ] ) coll ) )\n)", "user": "57561529e4b02ea1147992d3"}, {"problem": 40, "code": "#( rest( interleave (repeat %1) %2))", "user": "57487084e4b009280f9f2b8c"}, {"problem": 40, "code": "#(drop-last (mapcat (fn [x] [x %1]) %2))", "user": "5745bb9fe4b009280f9f2b54"}, {"problem": 40, "code": ";; First solution \n;#(drop-last (interleave %2 (repeat (count %2) %1)))\n\n#(butlast (interleave %2 (repeat %1)))", "user": "573118ebe4b0cd1946bd0fbd"}, {"problem": 40, "code": "(fn interpose1\n  [value data]\n  (loop [result [] d data]\n    (if (= (count d) 1)\n      (concat result [(first d)])\n      (recur (concat result [(first d)] [value]) (rest d)))))", "user": "5746cb28e4b009280f9f2b68"}, {"problem": 40, "code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "user": "570bd29be4b0b0fb43fd06c5"}, {"problem": 40, "code": "#(drop-last (flatten (map vector %2 (repeat %1))))", "user": "574a546ee4b02ea1147991f6"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "575cbe44e4b02ea114799374"}, {"problem": 40, "code": "(fn [p coll]\n  (butlast (mapcat list coll (repeat p))))", "user": "574abbfbe4b02ea114799200"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "574ef641e4b02ea11479924f"}, {"problem": 40, "code": "#(let [x (vec (interleave %2 (repeat %1)))] (take (dec(count x)) x))", "user": "5757ba87e4b02ea1147992f9"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last (flatten (map (fn [x] [x sep]) coll))))", "user": "55096255e4b06e50f9beb116"}, {"problem": 40, "code": "(fn interpos [x s]\n   (if (empty? s)\n     nil\n     (concat\n       (if (nil? (next s)) \n         (list (first s))\n         (concat (list (first s)) (list x)))\n       (interpos x (rest s)))))", "user": "57501de0e4b02ea11479926c"}, {"problem": 40, "code": "(fn [n coll] (butlast (mapcat #(vector % n) coll)))", "user": "5739c2fee4b0cd1946bd107a"}, {"problem": 40, "code": "(fn ias[n s]\n  (drop-last (interleave s (repeat n))))", "user": "5731e36be4b0cd1946bd0fc9"}, {"problem": 40, "code": "(fn [sep coll] \n  (->>\n   (repeat (count coll) sep )\n   (interleave coll)\n   (butlast)\n  ))", "user": "575ef4b6e4b08062f99a4e78"}, {"problem": 40, "code": "(fn f [x col]\n        (->> col\n             (mapcat #(list % x))\n             drop-last))", "user": "575fbe58e4b08062f99a4e87"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %)))", "user": "57609d91e4b08062f99a4e9b"}, {"problem": 40, "code": "(fn [sep, lst]\n  (loop [result (vector (first lst))\n         whatsleft (rest lst)]\n    (println result)\n    (println whatsleft)\n    (if (empty? whatsleft)\n      result\n      (recur \n      \t(conj result sep (first whatsleft)) \n       \t(rest whatsleft)))))", "user": "57597fade4b02ea11479931d"}, {"problem": 40, "code": "(fn interp [j coll] (if (= (count coll) 1)\n                      coll\n                      (into [(first coll) j] (interp j (rest coll)))))", "user": "5759cd46e4b02ea11479932e"}, {"problem": 40, "code": "#(into [] (drop 1 (flatten (for [x %2] [ %1 x]))))", "user": "5744e1a2e4b009280f9f2b43"}, {"problem": 40, "code": "#(rest (interleave (repeat (count %2) %1) %2))", "user": "574e8975e4b02ea114799244"}, {"problem": 40, "code": "(fn f [n arr]\n  (take \n   (dec (* 2 (count arr))) \n   (interleave arr (repeat (count arr) n))))", "user": "57501c83e4b02ea11479926b"}, {"problem": 40, "code": "(fn [v coll] (rest (mapcat #(list v %) coll)))", "user": "576186a5e4b0994c1922fb8e"}, {"problem": 40, "code": "(fn [value coll]\n (drop-last (mapcat vector coll (repeat value))))", "user": "57607706e4b08062f99a4e97"}, {"problem": 40, "code": "(fn [x l] (drop-last (interleave l (repeat x))))", "user": "57640b3ce4b0994c1922fbe7"}, {"problem": 40, "code": "(fn [d col] (drop-last (interleave col (repeat d))))", "user": "56d47528e4b0ea9b8538f7b7"}, {"problem": 40, "code": "(fn [x y](rest (mapcat #(vector x %) y)))", "user": "575dda55e4b02ea11479938c"}, {"problem": 40, "code": "#(into [] (cons (first %2) (mapcat (fn [b] [%1 b]) (rest %2))))", "user": "57642916e4b0994c1922fbee"}, {"problem": 40, "code": "(fn [x y]\n  (cons (first y) (mapcat #(list x %1) (rest y))))", "user": "57614948e4b0994c1922fb83"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "57625c18e4b0994c1922fba4"}, {"problem": 40, "code": "#(pop (reduce \n  (fn [accum x] (conj accum x %1))\t\n  [] %2))", "user": "5764cc01e4b0994c1922fc05"}, {"problem": 40, "code": "(fn lazy-interleave [v1 v2]\n  (if (>(count v2) 1)\n    (lazy-cat [(first v2) v1]\n              (lazy-interleave v1 (rest v2)))\n\tv2))", "user": "57644395e4b0994c1922fbf2"}, {"problem": 40, "code": "(fn [x coll]\n  (loop [[curr next & rest] coll\n         result []]\n    (if (nil? next)\n      (conj result curr)\n      (recur (into [next] rest)\n             (into result [curr x])))))", "user": "52ea025ae4b09f7907dd14b5"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "user": "5763fa69e4b0994c1922fbe0"}, {"problem": 40, "code": "(fn [sep coll] (drop 1 (mapcat #(vector %1 %2) (repeat sep) coll)))", "user": "5764457ae4b0994c1922fbf3"}, {"problem": 40, "code": "(fn [sep col] (butlast (flatten (for [x col] [x sep]))))", "user": "576664ede4b0a07e8fc180a7"}, {"problem": 40, "code": "(fn [div s]\n  (loop [srest s new '()]\n    (if (empty? srest)\n      new\n      (let [new-new (concat new (when (not (empty? new)) [div]) [(first srest)])]\n        (recur (next srest) new-new)))))", "user": "576844cde4b0a07e8fc180ce"}, {"problem": 40, "code": "(fn my-interpose [x y]\n  (rest (mapcat #(list x %) y)))", "user": "576000fce4b08062f99a4e8b"}, {"problem": 40, "code": "#(loop [s %2 r []]\n     (if (= 1 (count s))\n       (conj r (first s))\n       (recur (rest s) (conj r (first s) %1))))", "user": "5763818ae4b0994c1922fbc7"}, {"problem": 40, "code": "(fn inter [valu l]\n  (loop [index 0\n         result '()]\n    (if (= index (count l))\n           (reverse (flatten (rest result)))\n           (recur (inc index) (conj (conj result (nth l index)) valu)))))", "user": "5761724de4b0994c1922fb89"}, {"problem": 40, "code": "(fn [v s]\n  (drop-last 1\n    (reduce\n      (fn [c n]\n         (conj (conj c n) v))\n      []\n      s)))", "user": "561d506ee4b064ca9f4b16aa"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %)))", "user": "575b3e9be4b02ea11479935b"}, {"problem": 40, "code": "(fn [s coll]\n  (-> (map #(seq [% s]) coll)\n      (flatten)\n      (drop-last)))", "user": "54684c3be4b00cfc9eacc139"}, {"problem": 40, "code": "(fn [n coll] (drop-last (mapcat list coll (repeat n))))", "user": "576b4e6be4b0a07e8fc1812b"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "56f974c0e4b07572ad1a88b1"}, {"problem": 40, "code": "#(butlast (mapcat vector %2 (repeat (count %2) %1)))", "user": "576a987be4b0a07e8fc1811b"}, {"problem": 40, "code": "(fn [var1 var2] (rest (reduce #(conj %1 var1 %2) '[] var2)))", "user": "5720ba36e4b0c5bde472c09c"}, {"problem": 40, "code": "#(loop [x %1 z (first %2) y (next %2) acc []]\n    (if (nil? y)\n      (conj acc z)\n  (recur x (first y) (next y) \n     (conj (conj acc z) x)) ))", "user": "5762fcfde4b0994c1922fbb3"}, {"problem": 40, "code": "#(drop-last (flatten (map  (fn[item] [item %1] )   %2) ))", "user": "575bd5f9e4b02ea114799365"}, {"problem": 40, "code": "(fn [a b] (butlast (mapcat #(conj [] % a) b)))", "user": "5751fda4e4b02ea114799295"}, {"problem": 40, "code": "#(drop 1 (mapcat vector (repeat %1) %2))", "user": "576da825e4b0979f8965156c"}, {"problem": 40, "code": "(fn inter [elem s]\n  (loop\n    [acc '()\n     rest-of-s s]\n    (cond\n      (empty? rest-of-s) (reverse (rest acc))\n      :else (recur (conj acc (first rest-of-s) elem) (rest rest-of-s)))))", "user": "576d24ede4b0979f8965155b"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "575d16f8e4b02ea114799377"}, {"problem": 40, "code": "#(rest (mapcat vector (repeat %) %2))", "user": "56d91a53e4b0ea9b8538f7ee"}, {"problem": 40, "code": "(fn [d coll]\n  (loop [ret [] coll coll]\n    (if (and (first coll) (second coll))\n      (recur (->> ret (cons (first coll)) (cons d)) (rest coll))\n      (reverse (cons (first coll) ret)))))", "user": "57202eb7e4b0c5bde472c090"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "576e3258e4b0979f89651574"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "56b97792e4b0f26550335932"}, {"problem": 40, "code": "#(conj (vec (mapcat (fn [x] (conj [] x %1)) (butlast %2))) (last %2))", "user": "56d902c3e4b0ea9b8538f7ed"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "576a8d02e4b0a07e8fc18117"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "57763002e4b0979f89651631"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "577202d2e4b0979f896515c0"}, {"problem": 40, "code": "(fn\n  [elem seq]\n  (loop [seq seq vec []]\n    (if (> (count seq) 1)\n      (recur (rest seq) (conj vec (first seq) elem))\n      (conj vec (first seq)))\n    )\n)", "user": "5772ddb0e4b0979f896515d4"}, {"problem": 40, "code": "(fn my-interpose [sep [f & r]]\n  (when f\n    (if r\n      (lazy-seq (cons f (cons sep (my-interpose sep r))))\n      (list f))))", "user": "5776e21de4b0979f89651642"}, {"problem": 40, "code": "(fn [sep coll]\n   (drop-last (mapcat #(vector %1 %2) coll (repeat sep))))", "user": "55d3780ee4b0e31453f64a66"}, {"problem": 40, "code": "(fn [x y]\n (loop [tmp y result[] iter 1]\n   (if (empty? tmp)\n     result\n     (recur (rest tmp)\n            (cond \n             (not= iter (count y))(conj result (first tmp) x) \n             :else (conj result (first tmp))\n             )\n            (inc iter)\n            )\n     )\n   )\n  )", "user": "57750460e4b0979f8965160c"}, {"problem": 40, "code": "(fn [separator coll] (drop-last (mapcat #(vector % separator) coll)))", "user": "5777cffae4b0979f89651651"}, {"problem": 40, "code": "(fn [sep coll] (cons (first coll) (reduce #(conj %1 sep %2) [] (rest coll))))", "user": "50c99e3ee4b0bed41a122997"}, {"problem": 40, "code": "(fn [el s]\n   (let [itp (fn [el s acc]\n               (if (empty? s) (reverse (rest acc))\n                 (recur el (rest s) (cons el (cons (first s) acc)))))]\n     (itp el s '())))", "user": "57780e4fe4b0979f89651657"}, {"problem": 40, "code": "(fn [v x]\n  (->> (map #(list % v) x)\n       (apply concat)\n       (take (- (* 2 (count x)) 1)))\n  )", "user": "577829f9e4b0979f8965165a"}, {"problem": 40, "code": "(fn [n s]\n  (drop-last (mapcat (fn [x] [x n]) s)))", "user": "577629abe4b0979f8965162e"}, {"problem": 40, "code": "(fn go[fill, elems]\n  (loop [res [] start elems]\n    (if (= (count start) 1)\n      (conj res (first start))\n      (recur (conj (conj res (first start)) fill ) (rest start))\n    )\n  )\n)", "user": "5776558ee4b0979f89651633"}, {"problem": 40, "code": "#(butlast (apply concat (map vector %2 (repeat %1))))", "user": "577abecfe4b0d3393e5deb06"}, {"problem": 40, "code": "(fn [x coll] (butlast (mapcat #(list % x) coll)))", "user": "51319a53e4b06942423563c8"}, {"problem": 40, "code": "(fn [y x]\n  (loop [new-list [] cnt 0]\n    (if (= (count new-list) (- (* (count x) 2) 1))\n      new-list\n      (if (= (- (count x) 1) cnt)\n        (recur (conj new-list (nth x cnt)) (inc cnt))\n        (recur (conj new-list (nth x cnt) y) (inc cnt))))))", "user": "5756e218e4b02ea1147992e5"}, {"problem": 40, "code": "(fn [a [b & bs]] (reduce #(conj %1 a %2) [b] bs))", "user": "571346c0e4b07c98581c3a9b"}, {"problem": 40, "code": "(fn my-interpose\n  [v xs]\n  (drop-last (mapcat (partial conj '() v) xs))\n  )", "user": "560d4994e4b05f002753df3c"}, {"problem": 40, "code": "#(rest (reduce (fn [x y] (concat x [%1 y])) [] %2))", "user": "577d3feee4b0c8d87281f6d2"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %)))", "user": "5776f39de4b0979f89651643"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5761513fe4b0994c1922fb87"}, {"problem": 40, "code": "(fn [n xs] (-> (mapcat #(list %1 n) xs) butlast))", "user": "56c560ede4b05cc29241eea6"}, {"problem": 40, "code": ";(fn a[x y] (drop-last (flatten (map #( conj (into [] %) x) (partition 1 y)))))\n#((comp butlast interleave) %2 (repeat %1))", "user": "52f426fce4b05e3f0be25f1e"}, {"problem": 40, "code": "(fn a[x y] (drop-last (flatten (map #( conj (into [] %) x) (partition 1 y)))))", "user": "548f3ed8e4b0e286459a1236"}, {"problem": 40, "code": "(fn [v l] (drop-last (mapcat #(vector % v) l)))", "user": "56f6e541e4b08e7d20b9682a"}, {"problem": 40, "code": "#(vec (drop-last (flatten (map vector %2 (repeat %1)))))", "user": "560c37b5e4b05f002753df2e"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "57822efce4b0d36ec5835e91"}, {"problem": 40, "code": "(fn [a col] (rest (flatten (for [x col] [a x]))))", "user": "5776385fe4b0979f89651632"}, {"problem": 40, "code": "(fn [e coll] (drop-last (flatten (map #(vector % e) coll))))", "user": "577c3da9e4b0c8d87281f6b9"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "56e42593e4b03a7c14b85a48"}, {"problem": 40, "code": "#(drop 1 (%1 %2 %3 %4)) #(reduce (%1 %2) [] %3) (fn [x] #(conj %1 x %2))", "user": "576df252e4b0979f8965156f"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %)))", "user": "55c4cda5e4b0e31453f649a5"}, {"problem": 40, "code": "(fn [sep coll]\n  (loop [coll coll new []]\n    (if (<= (count coll) 1)\n      (into new coll)\n      (recur (rest coll)\n             (into new (list (first coll) sep))))))", "user": "57861b0ce4b0ebec4cfb74ef"}, {"problem": 40, "code": "(fn [elem coll] (rest (mapcat #(list elem %1) coll)))", "user": "5785de31e4b0ebec4cfb74e4"}, {"problem": 40, "code": "#(rest (interleave (repeat (count %2) %1) %2))", "user": "575e71a2e4b0846ea39baf26"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "56ff0ef3e4b08d47c97781ba"}, {"problem": 40, "code": "(fn my-interpose [v coll]\n    (lazy-seq\n     (let [[fst & rst] (seq coll)]\n       (cons fst\n             (when rst\n               (cons v (my-interpose v rst)))))))", "user": "4dfe5a93535d04ed9115e786"}, {"problem": 40, "code": "(fn [x xs] (reduce #(if (not (empty? %1)) (conj %1 x %2) (conj %1 %2)) [] xs))", "user": "566e3af2e4b0a866af6896d5"}, {"problem": 40, "code": "(fn [firstarg coll] (butlast (mapcat (fn [x] [x firstarg]) coll)))", "user": "5785de43e4b0ebec4cfb74e5"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last)", "user": "5786e182e4b0ebec4cfb7500"}, {"problem": 40, "code": "(fn [x xs] (loop [in xs out []]\n  (if (empty? in)\n    out\n    (recur (rest in)\n           (if (empty? out) (conj out (first in)) (conj out x (first in)))\n    )\n  )\n))", "user": "5784ec65e4b0ebec4cfb74d1"}, {"problem": 40, "code": "(fn [s l] (rest (mapcat #(list s %) l)))", "user": "577832f4e4b0979f8965165b"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %1)))", "user": "57615a22e4b0994c1922fb88"}, {"problem": 40, "code": "(fn [d coll]\n  (loop [coll coll result []]\n    (if-let [more (next coll)]\n      (recur more (conj (conj result (first coll)) d))\n      (conj result (first coll)))))", "user": "566b57e9e4b0a866af6896ad"}, {"problem": 40, "code": "#(drop 1 (mapcat vector (repeat %1) %2))", "user": "578d230fe4b0ebec4cfb7564"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "577fa91ee4b0d36ec5835e6a"}, {"problem": 40, "code": "#(rest (mapcat (partial vector %1) %2))", "user": "56327168e4b0bfe05bf117a5"}, {"problem": 40, "code": "(fn my-interpose [e coll]\n  (let [head (first coll)\n        tail (rest coll)]\n    (if (seq tail)\n      (concat (list head e) (my-interpose e tail))\n      (list head))))", "user": "577f635be4b0d36ec5835e64"}, {"problem": 40, "code": "#(butlast (reduce (fn [x y] (conj x y %1)) [] %2))", "user": "578b140be4b0ebec4cfb7545"}, {"problem": 40, "code": "(fn [e [f & r]]\n  (cons f\n   (reduce #(conj %1 e %2)\n           []\n           r)))", "user": "578cf84ce4b0ebec4cfb7562"}, {"problem": 40, "code": "(fn [n coll]\n  (drop-last(mapcat vector coll (repeat (count coll) n))))", "user": "5785de4ce4b0ebec4cfb74e6"}, {"problem": 40, "code": "(fn [x y] (drop-last (mapcat #(conj [] % x) y)))", "user": "569fc70ee4b0542e1f8d1499"}, {"problem": 40, "code": "(fn f [x [y & ys]]\n  (cond\n   ys (into [y x] (f x ys))\n   y  [y]))", "user": "5791d259e4b0ebec4cfb75c0"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5790b3d0e4b0ebec4cfb75ad"}, {"problem": 40, "code": "#(drop-last (mapcat vector %2 (repeat %1)))", "user": "55ede35ce4b0121d4835fde1"}, {"problem": 40, "code": "(fn [x ys]\n  (if (empty? ys)\n    []\n    (cons (first ys) (interleave (repeat x) (rest ys)))))", "user": "577a74f7e4b0d3393e5deafa"}, {"problem": 40, "code": "(fn [e coll]\n  (drop-last (mapcat vector coll (repeat e) )))", "user": "57934c67e4b0e215f87e8456"}, {"problem": 40, "code": "(fn [delim col] (drop-last (flatten (map (fn [a] (vector a delim)) col))))", "user": "5790e62ae4b0ebec4cfb75b0"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5786c182e4b0ebec4cfb74fd"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "577ab41fe4b0d3393e5deb05"}, {"problem": 40, "code": "#(drop-last (mapcat list %2 (repeat %1)))", "user": "578fc072e4b0ebec4cfb759a"}, {"problem": 40, "code": "(fn [s coll] (rest (mapcat #(vector s %) coll)))", "user": "578e2829e4b0ebec4cfb757d"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "530e75d5e4b08068f379ecba"}, {"problem": 40, "code": "(fn [v s]\n  (drop-last (reduce (fn [acc curr]\n                       (apply conj acc [curr v])) [] s)))", "user": "576a972ce4b0a07e8fc1811a"}, {"problem": 40, "code": "(fn [a b] (butlast (mapcat #(vector % a) b)))", "user": "5795f1f1e4b0e215f87e8490"}, {"problem": 40, "code": "(fn [x coll] (drop-last (\nreduce (fn [acc elem] (conj acc elem x)) [] coll)))", "user": "5272645de4b03e8d9a4a742c"}, {"problem": 40, "code": "(fn [sep l] (butlast (mapcat #(vector % sep) l)))", "user": "576d398be4b0979f8965155d"}, {"problem": 40, "code": "(fn f [s1,s]\n   (let [f2\n         (fn [acc s2]\n             (conj acc s1 s2))]\n     (rest (reduce f2 [] s))))", "user": "5790f9d7e4b0ebec4cfb75b4"}, {"problem": 40, "code": "apply (fn inter\n  ([n last] [last])\n  ([n x & rest] (cons x (cons n (apply inter n rest)))))", "user": "57915ba4e4b0ebec4cfb75ba"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5798205ce4b039eba2ecb10e"}, {"problem": 40, "code": "(fn [val s]\n   (take (- (* (count s) 2) 1)\n         (reduce #(concat %1 (list %2 val)) (empty s) s)))", "user": "57958dace4b0e215f87e8484"}, {"problem": 40, "code": "(fn interpose-\n  [value coll]\n  (reduce (fn [acc obj]\n            (if (empty? acc)\n              [obj]\n              (conj acc value obj)))\n          [] coll))", "user": "5777c3d6e4b0979f8965164f"}, {"problem": 40, "code": "(fn [a s]\n  (drop 1 (apply concat (map #(list % %2) (repeat a) s))))", "user": "55478ce2e4b0a04f7929954e"}, {"problem": 40, "code": "(fn interpose-fn\n  [sep s]\n  (pop\n   (reduce #(conj %1 %2 sep) []\n           s)))", "user": "551bdefde4b07993ea3788d7"}, {"problem": 40, "code": "(fn [sep coll] (rest (apply concat (for [s (list sep) i coll] (list s i)))))", "user": "5797d4bae4b039eba2ecb107"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "57982bace4b039eba2ecb10f"}, {"problem": 40, "code": "(fn [sym coll]\n  (drop-last (interleave coll (repeat sym))))", "user": "57853bd9e4b0ebec4cfb74d6"}, {"problem": 40, "code": "#(drop-last 1 ( interleave %2 (repeat (count %2) %1)))", "user": "57986b76e4b039eba2ecb116"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "516064e5e4b009fba0926e26"}, {"problem": 40, "code": "(fn [sep coll]\n  (loop [ret [] [head & remain] coll]\n    (if (empty? remain)\n      (conj ret head)\n      (recur (conj ret head sep)  remain))))", "user": "579601c8e4b0e215f87e8492"}, {"problem": 40, "code": "(fn inter\n    [sep coll]\n    (reduce \n     (fn agg [res el] \n         (if (empty? res)\n             (conj res el) \n             (conj res sep el)))\n     [] \n     coll))", "user": "568bd448e4b0dcc4269f40a9"}, {"problem": 40, "code": "(fn [n s]\n  (drop 1 (mapcat vector (repeat n) s)))", "user": "579c8ad1e4b05b1deef9ae0c"}, {"problem": 40, "code": "(fn [sep coll] (drop-last (mapcat vector coll (repeat sep))))", "user": "579bd58de4b05b1deef9adfd"}, {"problem": 40, "code": "(fn [x s] (rest (mapcat #(vector x %1) s)))", "user": "571edeeae4b0145328a7629b"}, {"problem": 40, "code": "(fn [v, x] (rest (reduce #(into %1 [v %2]) [] x) ))", "user": "579e75fbe4b05b1deef9ae29"}, {"problem": 40, "code": "#(concat (mapcat vector (drop-last %2) (repeat %1)) (list (last %2)))", "user": "579e15a6e4b05b1deef9ae20"}, {"problem": 40, "code": "(fn\n        [v l]\n        (drop-last\n          (reduce\n            (fn [xs x]\n              (conj xs x v)\n            )\n            []\n            l\n          )\n        )\n      )", "user": "5784e177e4b0ebec4cfb74cf"}, {"problem": 40, "code": "(fn problem40-interpose [i xs]\n (reduce\n  (fn [agg x]\n    (into agg [i x]))\n    [(first xs)]\n    (rest xs)))", "user": "57717915e4b0979f896515b3"}, {"problem": 40, "code": "(fn [n s]\n   (rest (apply concat (map #(cons n [%]  ) s))) )", "user": "51e7c1f1e4b0a3e081b8cbef"}, {"problem": 40, "code": "(fn [i s]\n  (drop 1 (mapcat vector (repeat i) s)))", "user": "579f4812e4b05302be0b72fb"}, {"problem": 40, "code": "#(take (- (* (count %2) 2) 1) (interleave %2 (repeat (count %2) %1)))", "user": "57873017e4b0ebec4cfb7503"}, {"problem": 40, "code": "(fn interpose-seq [value col] (drop-last (flatten (map #(vector % value) col))))", "user": "578e535de4b0ebec4cfb7580"}, {"problem": 40, "code": "#(loop [ res [] inter %1 col %2]\n    (if (empty? col)\n      (butlast res)\n      (recur (conj (conj res (first col)) inter) inter (rest col))))", "user": "5799b260e4b05b1deef9adc8"}, {"problem": 40, "code": "(fn [x col] (drop-last (interleave col (repeat x))))", "user": "545b486ae4b01be26fd7464f"}, {"problem": 40, "code": "(fn [x y] \n  (drop-last \n   (apply concat \n          (map #(cons % [x]) y))))", "user": "50d0d2dde4b00b15ecee9768"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "57783873e4b0979f8965165c"}, {"problem": 40, "code": "#(let [separator %1]\n   (loop [in %2\n          out '()]\n     (if (empty? in)\n       out\n       (recur (rest in)\n              (concat out\n                      (list (first in))\n                      (when (> (count in) 1) (list separator)))))))", "user": "57a310b4e4b0c3d858beb90c"}, {"problem": 40, "code": "(fn [pose coll]\n  (drop-last\n  (flatten\n   (map #(list % pose) coll))))", "user": "574ff497e4b02ea114799266"}, {"problem": 40, "code": "(fn [n s]\n  (butlast (mapcat #(vector % n) s))\n  )", "user": "57a13745e4b0c3d858beb8e3"}, {"problem": 40, "code": "(fn [thing parts]\n\t(loop [myvector [] thing thing [partfirst & partsrest] parts]\n    \t(if (empty? partsrest)\n         \t (conj myvector partfirst )\n          \t (recur  (conj myvector partfirst thing) thing partsrest)\n        )\n    )\n)\n;0 [1 2 3])", "user": "579be21fe4b05b1deef9adff"}, {"problem": 40, "code": "(fn [sep coll]\n  (pop (vec (interleave coll (repeat sep)))))", "user": "577bf999e4b0d3393e5deb2c"}, {"problem": 40, "code": "(fn [v xs]\n  (loop [[x & rest] xs\n         result []]\n    (if-let [s (seq rest)]\n      (recur rest (conj result x v))\n      (conj result x))))", "user": "4e6ffaa3535d5021c1a8962e"}, {"problem": 40, "code": "#(rest (mapcat list (repeat %) %2))", "user": "57a4bb65e4b0a966079561eb"}, {"problem": 40, "code": "(fn [v col]\n  (reduce #(concat %1 (seq [v %2])) (seq [(first col)]) (rest col)))", "user": "579c7db7e4b05b1deef9ae0a"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last (interleave coll (repeat sep))))", "user": "56903cb9e4b0dcc4269f40eb"}, {"problem": 40, "code": "(fn inter [el coll]\n  (if (nil? (second coll))\n    coll\n    (cons (first coll) (cons el (inter el (rest coll))))))", "user": "579c35fee4b05b1deef9ae04"}, {"problem": 40, "code": "(fn [sep s] (butlast (mapcat #(list %1 %2) s (repeat sep))))", "user": "579d9601e4b05b1deef9ae18"}, {"problem": 40, "code": "#(drop-last (mapcat vector %2 (repeat %1)))", "user": "57a1ef58e4b0c3d858beb8f3"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop 1 (reverse (reduce #(conj (conj %1 sep) %2) '() coll))))", "user": "57a0f256e4b0c3d858beb8dd"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "57a14414e4b0c3d858beb8e4"}, {"problem": 40, "code": "#(drop-last ((fn foo [v [e1 & l1]]\r\n                (if (nil? e1)\r\n                  '()\r\n                  (conj (foo v l1) v e1))) %1 %2))", "user": "57a9b2dbe4b0a96607956233"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %1)))", "user": "57aa4775e4b0b8559636fc6b"}, {"problem": 40, "code": "(fn [sep s] (rest (reduce (fn [v i] (into v [sep i]))\n                          [] s)))", "user": "57a9e274e4b0b8559636fc5d"}, {"problem": 40, "code": "(fn [init ls] (rest (flatten (map (fn [v] [init v]) ls))))", "user": "57aa290de4b0b8559636fc65"}, {"problem": 40, "code": "(fn [i xs] (drop-last(interleave xs (repeat i))))", "user": "57752a2de4b0979f89651613"}, {"problem": 40, "code": "(fn [i vs]\n  (->>\n   vs\n   (mapcat\n    (partial vector i))\n   (drop 1)))", "user": "57acb156e4b0b8559636fc8d"}, {"problem": 40, "code": "(fn [x ys] (reduce (fn [zs y] (conj zs x y)) [(first ys)] (rest ys)))", "user": "5799ff45e4b05b1deef9add1"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "57ac2d6be4b0b8559636fc83"}, {"problem": 40, "code": "(fn f [a xs] (cons (first xs) (mapcat #(vector a %) (rest xs))))", "user": "57adbe7ee4b0b8559636fca0"}, {"problem": 40, "code": "(fn f [val [x & xs]] (if xs (conj (f val xs) val x) (list x)))", "user": "57ad7ad6e4b0b8559636fc9d"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5075e374e4b09049dea827a5"}, {"problem": 40, "code": "(fn [x xs] (concat \n            (apply concat\n                   (map #(cons % [x])\n                        (butlast xs)))\n            [(last xs)]))", "user": "56d30497e4b0ea9b8538f7a8"}, {"problem": 40, "code": "(fn [val s]\n    (drop-last (flatten (map #(vector %1 val) s))))", "user": "57af41bce4b0fbc9809a2731"}, {"problem": 40, "code": "(fn [sep xs]\n  (vec (butlast (reduce #(conj % %2 sep) [] xs))))", "user": "4fb0ccbfe4b081705acca26e"}, {"problem": 40, "code": "(fn [v s]\n  (loop [[f & r] s delim nil sofar []] \n    (if-not f\n      sofar\n      (recur r v (if delim \n                   (conj sofar delim f)\n                   (conj sofar f)\n                   ))\n      )\n    )\n  )", "user": "57afd36de4b0fbc9809a273c"}, {"problem": 40, "code": "(fn[a b](butlast (mapcat #(vector % a) b)))", "user": "55fde52ce4b00f4cabc5764c"}, {"problem": 40, "code": "(fn [v init-s]\n  (loop [s init-s\n         r []]\n    (if (empty? s)\n      (drop-last r)\n      (recur (rest s) (conj r (first s) v)))))", "user": "57addbcce4b0b8559636fca3"}, {"problem": 40, "code": "#(rest (mapcat (partial conj [%]) %2))", "user": "548b7db8e4b0e286459a11fd"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "55da18d5e4b0e31453f64ad1"}, {"problem": 40, "code": "(fn [x s] (rest (mapcat #(vector x %) s )))", "user": "57af249fe4b0fbc9809a272b"}, {"problem": 40, "code": "(fn interpose-it [s coll]\n\t(drop-last (mapcat #(vector % s) coll)))", "user": "57ab41dde4b0b8559636fc79"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %)))", "user": "57ac7710e4b0b8559636fc88"}, {"problem": 40, "code": "(fn [in coll] (butlast(mapcat #(vector % in) coll)))", "user": "57b13adae4b0fbc9809a2750"}, {"problem": 40, "code": "(fn [value list]\n   (loop [set (drop 1 list) vector [(first list)]]\n     (if (empty? set)\n       vector\n       (recur (drop 1 set) (into vector [value (first set)]))\n       )\n\n     )\n  )", "user": "57aa103be4b0b8559636fc64"}, {"problem": 40, "code": "(fn interpose-own\n  ([split coll] (drop 1 (reduce (fn [x y] (conj x split y)) [] coll))))", "user": "578f5122e4b0ebec4cfb7592"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "57b3efb1e4b0fbc9809a278a"}, {"problem": 40, "code": "#(->> (mapcat list (repeat (count %2) %1) %2)\n             (rest))", "user": "579ea15ee4b05b1deef9ae2a"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5655d811e4b0f9d632dd849a"}, {"problem": 40, "code": "(fn [x y]\n    (rest (reduce #(conj (conj %1 x) %2) [] y)))", "user": "4e837808535db62dc21a62d9"}, {"problem": 40, "code": "(fn [x coll] (rest (interleave (repeat x) coll)))", "user": "57aa4752e4b0b8559636fc6a"}, {"problem": 40, "code": "#(concat\n\t\t(interleave %2 (take (dec (count %2)) (iterate identity %1)))\n\t\t(list (last %2)))", "user": "57a9db97e4b0b8559636fc5b"}, {"problem": 40, "code": "(fn [sep l]\n  (take (- (* (count l) 2) 1) (interleave l (repeat sep))))", "user": "57b55290e4b0fbc9809a27a9"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "57b1b8c8e4b0fbc9809a2756"}, {"problem": 40, "code": "(fn [sep s] (rest (mapcat #(list sep %) s)))", "user": "57b4779de4b0fbc9809a279a"}, {"problem": 40, "code": "#(->> (apply concat\n              (map (fn[x] (list x %1)) %2))\n       vec\n       pop)", "user": "57b59d77e4b0fbc9809a27ae"}, {"problem": 40, "code": "(fn\n  [v c]\n  (loop [coll c val v out []]\n    (cond (= (count coll) 1) (conj out (first coll))\n          :else (recur (rest coll) v (conj (conj out (first coll)) v)))))", "user": "57acee37e4b0b8559636fc94"}, {"problem": 40, "code": "(fn interp \n  ([new s] (interp new s []))\n  ([new s ret]\n    (if (= (count s) 1)\n      (conj ret (first s))\n      (recur new (rest s) (conj ret (first s) new)))))", "user": "4f4aa932e4b0d56e7bb92c14"}, {"problem": 40, "code": "(fn [i arr]\n  (loop [[a & rst] arr\n         result []]\n    (if (empty? rst)\n      (conj result a)\n      (recur rst (conj result a i)))))", "user": "57b5dc52e4b0fbc9809a27b3"}, {"problem": 40, "code": "(fn foo [s L] (let [LL (if (vector? L) (map (fn [y] y) L) L)] (if (= (count LL) 1) LL (conj (conj (foo s (rest LL)) s) (first LL)))))", "user": "57b8b008e4b0fbc9809a27e6"}, {"problem": 40, "code": "(fn [value coll] (butlast (mapcat #(vector % value) coll)))", "user": "57addf3ae4b0b8559636fca4"}, {"problem": 40, "code": "#(rest (mapcat (partial list %1) %2))", "user": "57a2328ae4b0c3d858beb8f8"}, {"problem": 40, "code": "(fn [delimiter ell]\n (reverse (rest (reverse (interleave ell (repeat (count ell) delimiter))))))\n\n;(defn my-interpose [delimiter ell]\n;  (as-> ell v\n;    (interleave v (repeat (count v) delimiter))\n;    (reverse v)\n;    (rest v)\n;    (reverse v)\n;    ))", "user": "57b99d48e4b0fbc9809a27f2"}, {"problem": 40, "code": "(fn [i v]\n  (drop-last (interleave v (repeat i))))", "user": "56990b68e4b0542e1f8d143a"}, {"problem": 40, "code": "#(butlast (flatten (for [i %2\n                  :let [acc '()]]\n              (conj acc %1 i))))", "user": "57b3046de4b0fbc9809a276d"}, {"problem": 40, "code": "(fn [sep vect]\n  (butlast\n   (interleave vect (repeat sep))\n  )\n)", "user": "57a88e24e4b0a9660795621f"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "559d7e9ce4b0ec2b359424de"}, {"problem": 40, "code": "(fn [i s] (drop-last (flatten (map (fn [x] [x i]) s))))", "user": "57b6edf6e4b0fbc9809a27c8"}, {"problem": 40, "code": "(fn [s xs]\n  (->> (repeat s)\n       (interleave xs)\n       (butlast)))", "user": "56eab346e4b04a395b9a0410"}, {"problem": 40, "code": "(fn [a b] (butlast (flatten (map #(vector % a) b))))", "user": "57b35a19e4b0fbc9809a277d"}, {"problem": 40, "code": "(fn [n coll]\n      (take (dec (* 2 (count coll))) (mapcat #(list % n) coll)))", "user": "5386f784e4b06839e8705f17"}, {"problem": 40, "code": "#(rest (interleave (repeat (count %2) %1) %2))", "user": "57bc9375e4b05aa3c4741c43"}, {"problem": 40, "code": "(fn [k coll]\n  (drop-last (mapcat vector coll (repeat k))))", "user": "57bbc9bde4b05aa3c4741c31"}, {"problem": 40, "code": "(fn inter [v s]\n  (if (empty? (rest s))\n    s\n    (concat (list (first s) v) (inter v (rest s)))))", "user": "57bdfba3e4b05aa3c4741c5f"}, {"problem": 40, "code": "(fn [sep xs] (rest ( mapcat #(list sep %) xs)))", "user": "566ff0a1e4b0a866af6896ec"}, {"problem": 40, "code": "(fn[x l] (rest (mapcat #(list x %) l)))", "user": "57b9fc74e4b0fbc9809a27fb"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last\n    (mapcat #(conj [] % sep) coll)))", "user": "5789ebf8e4b0ebec4cfb7534"}, {"problem": 40, "code": "(fn [d c]\n  (cons (first c)\n        (mapcat #(concat (vector d) (vector %)) (rest c))))", "user": "55ff562fe4b00f4cabc57660"}, {"problem": 40, "code": "#(loop [col %2\n         result []]\n       (if (empty? col)\n           result\n           (recur (rest col)\n                  (if (empty? (rest col))\n                      (conj result (first col))\n                      (conj result (first col) %1)))))", "user": "57bf304de4b05aa3c4741c75"}, {"problem": 40, "code": "(fn inter [a lat]\n  (let [[x & xs] lat]\n    (if (empty? xs) (list x)\n        (cons x (cons a (inter a xs))))))", "user": "57b9d21fe4b0fbc9809a27f7"}, {"problem": 40, "code": "(fn [delimiter xs]\n  (rest (reduce #(into %1 [delimiter %2]) [] xs)))", "user": "571107b3e4b09c608db7043f"}, {"problem": 40, "code": "(fn test [x seqq]\n  (subvec (vec (reduce concat\n          (map (fn [a] [a x])\n               seqq))) 0 (- (* 2 (count seqq)) 1)))", "user": "579332c2e4b0e215f87e8452"}, {"problem": 40, "code": "(fn [sep A]\n  (loop [[a & as] A\n         result []]\n    (if\n      (empty? as)\n       (conj result a)\n       (recur\n        as\n        (conj\n          result\n          a\n          sep)))))", "user": "5223daaee4b01819a2de42b8"}, {"problem": 40, "code": "(fn [n coll] (reduce #(concat %1 [n %2]) [(first coll)] (rest coll)))", "user": "57c0917be4b05aa3c4741c95"}, {"problem": 40, "code": "(fn f ([ch col] (f ch col '())) ([ch col newcol] (if (empty? col) (rest (reverse newcol)) (f ch (rest col) (reduce conj newcol (list ch (first col)))))))", "user": "57b5ed94e4b0fbc9809a27b4"}, {"problem": 40, "code": "(fn my-interpose2[x lst2]\n  (drop-last (loop [result [] v2 lst2]\n    (if (= () v2)\n      result\n      (recur (conj (conj result (first v2)) x)\t     \n\t     (rest v2))))))", "user": "578f8a0ae4b0ebec4cfb7596"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "56cf115de4b0ea9b8538f765"}, {"problem": 40, "code": "(fn [d x] (butlast (apply concat (map #(seq [% d]) x))))", "user": "57c3451fe4b05aa3c4741cbd"}, {"problem": 40, "code": "(fn [i x] (butlast (reduce #(conj (conj % %2) i) [] x)))\n;;#(comp butlast (reduce (fn [x,i] (conj (conj x i) %)) [] %2))", "user": "57ba55c1e4b0fbc9809a2801"}, {"problem": 40, "code": "(fn inpos[v s]\n  (->>(repeat v)\n      (interleave s)\n      (drop-last)))", "user": "57bd960fe4b05aa3c4741c52"}, {"problem": 40, "code": "(fn [n s] (conj (vec (mapcat vector (butlast s) (take (- (count s) 1) (repeat n)))) (last s)))", "user": "57c0393be4b05aa3c4741c90"}, {"problem": 40, "code": "#(loop [f %1\n         s %2\n         r '[]]\n   (if (= 1 (count s)) (conj r (first s)) (recur f (rest s) (conj r (first s) f))))", "user": "57b6555be4b0fbc9809a27bf"}, {"problem": 40, "code": "#(drop-last(interleave %2 (repeat (count %2) %1)))", "user": "57c500f9e4b05aa3c4741cda"}, {"problem": 40, "code": "(fn [x arr] \n  (vec (drop-last (reduce #(conj %1 %2 x) [] arr))))", "user": "57c4e8dce4b05aa3c4741cd7"}, {"problem": 40, "code": "(fn [e l]\n  (butlast (reduce #(-> %1\n               (conj %2)\n               (conj e))\n          []\n          l)))", "user": "57395f32e4b0cd1946bd1070"}, {"problem": 40, "code": "(comp rest (fn f[d c] (if (seq c) (cons d (cons (first c) (f d (rest c)))))))", "user": "57c7e7d9e4b05aa3c4741d0f"}, {"problem": 40, "code": "#(rest  (interleave (repeat %1)  %2))", "user": "57a8eba2e4b0a96607956225"}, {"problem": 40, "code": "#(drop-last (apply concat (map vector %2 (repeat %1))))", "user": "55e0a122e4b050e68259b40f"}, {"problem": 40, "code": "(fn [s coll]\n  (->>\n   (map #(vector % s) coll)\n   (concat)\n   (flatten)\n   (drop-last)))", "user": "57bfffc7e4b05aa3c4741c8a"}, {"problem": 40, "code": "(fn [e s] (drop-last (apply concat (map #(conj [] % e) s))))", "user": "57c94c54e4b05aa3c4741d2c"}, {"problem": 40, "code": "#(loop\n   [s1 %2, i %1, res []]\n   (if (= (count s1) 1)\n     (seq (concat res s1))\n     (recur (rest s1) i\n            (conj (conj res (first s1)) i))))", "user": "55ed37ebe4b0121d4835fdd6"}, {"problem": 40, "code": "#(loop [a (rest %2) b %1 c (first %2) r []]\n   (if (empty? a)\n     (conj r c)\n     (recur (rest a) b (first a) (conj r  c b))))", "user": "57af74aee4b0fbc9809a2736"}, {"problem": 40, "code": "(fn [item s]\n  (reverse (rest (reverse (mapcat vector s (repeat item))))))", "user": "550b1c2ce4b06e50f9beb13b"}, {"problem": 40, "code": "(fn [sep col] (drop-last (mapcat #(list % sep) col)))", "user": "57c7cef5e4b05aa3c4741d0d"}, {"problem": 40, "code": "#(butlast (reduce (fn [c x] (into c [x %])) [] %2))", "user": "57c796b4e4b05aa3c4741d08"}, {"problem": 40, "code": "(fn [sep col](drop-last (mapcat #(vector % sep) col)))", "user": "57c6bca1e4b05aa3c4741cf8"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "558e160ce4b027778923764c"}, {"problem": 40, "code": "#(butlast (interleave %2 (cycle (list %1))))", "user": "57b45257e4b0fbc9809a2796"}, {"problem": 40, "code": "#(butlast (flatten (map vector %2 (repeat (count %2) %1))))", "user": "515310b4e4b0d6806ecd26fb"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "57c7a8b5e4b05aa3c4741d09"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "57c58ad6e4b05aa3c4741ce7"}, {"problem": 40, "code": "(fn f [x y]\n  \t(if (= (count y) 1)\n      y\n      (concat [(first y) x] (f x (rest y)))\n      )\n  )", "user": "57c99a45e4b05aa3c4741d31"}, {"problem": 40, "code": "(fn [x arr]\n  (loop [acc [] rest arr]\n    (if (= (count rest) 1)\n      (conj acc (first rest))\n      (recur (conj (conj acc (first rest)) x) (drop 1 rest)))))", "user": "57c3df67e4b05aa3c4741cc5"}, {"problem": 40, "code": "(fn interp [sep lst]\n  (if (= (count lst) 1)\n    lst\n    (concat (list (first lst)) (list sep) (interp sep (rest lst)))\n   )\n )", "user": "57ce2db8e4b0c746388ab8a4"}, {"problem": 40, "code": "(fn [separator collection] (take (- (* (count collection) 2) 1) (clojure.walk/walk (fn [item] [item separator]) flatten collection)))", "user": "57b356c2e4b0fbc9809a277b"}, {"problem": 40, "code": "(comp butlast #(mapcat (fn [x] [x %1]) %2))", "user": "57cefcc2e4b00451144b04f8"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "57cef3f8e4b0c746388ab8b4"}, {"problem": 40, "code": "(fn [x s] (butlast (mapcat vector s (repeat (count s) x))))", "user": "57cd7498e4b0c746388ab897"}, {"problem": 40, "code": "#(butlast (mapcat (fn [e] [e %1]) %2))", "user": "57c45e64e4b05aa3c4741ccf"}, {"problem": 40, "code": "(fn [i s] (butlast (mapcat (fn [y] [y i]) s)))", "user": "57ce3fede4b0c746388ab8a6"}, {"problem": 40, "code": "#((comp drop-last interleave) %2 (repeat %1))", "user": "57c94c6ee4b05aa3c4741d2d"}, {"problem": 40, "code": "(fn [ip input] (drop-last (mapcat #(list % ip) input)))", "user": "57c6aa0be4b05aa3c4741cf7"}, {"problem": 40, "code": "#(rest (apply concat (map (partial vector %1) %2)))", "user": "57a0b341e4b0c3d858beb8d4"}, {"problem": 40, "code": "(fn [a b]\n  (let [len (count b)]\n    (butlast\n     (flatten\n      (for [x (range len)]\n        [(get b x) a])))))", "user": "57995ac1e4b05b1deef9adbf"}, {"problem": 40, "code": "(fn [fill coll]\n  (loop [[x & xs] coll\n         res []]\n    (if (empty? xs)\n      (conj res x)\n      (recur xs (conj res x fill)))))", "user": "57a775bbe4b0a96607956214"}, {"problem": 40, "code": "(fn my-interpose\n  [val collection]\n  (next (seq (reduce #(conj %1 val %2) [] collection))))", "user": "57d0cd58e4b0bd073c20235e"}, {"problem": 40, "code": "(fn [n coll]\n  (butlast (mapcat #(vector % n) coll)))", "user": "57aa2b97e4b0b8559636fc66"}, {"problem": 40, "code": "(fn interps [x y] \n  (if (<= (count y) 1) y\n    (concat (list (first y) x) (interps x (rest y)))))", "user": "57d1d6c8e4b0bd073c202370"}, {"problem": 40, "code": "(fn [to-interpose sqnc]\n  (loop [acc []\n         sqnc sqnc]\n    (if (empty? (rest sqnc))\n      (conj acc (first sqnc))\n      (recur (conj acc (first sqnc) to-interpose) (rest sqnc)))))", "user": "57d13683e4b0bd073c202368"}, {"problem": 40, "code": "(fn my-interpose [separator [head & tail]]\n\t(if (nil? head)\n\t\t'()\n\t\t(let [sub-interposed (my-interpose separator tail)] (if (empty? sub-interposed) (cons head sub-interposed) (cons head (cons separator sub-interposed))))))", "user": "57d0fce5e4b0bd073c202364"}, {"problem": 40, "code": "(fn [x y] (rest(reduce #(conj %1 x %2 ) [] (seq y))))", "user": "57d588a5e4b0bd073c2023b6"}, {"problem": 40, "code": "#(drop 1 (mapcat vector (repeat %1) %2))", "user": "57d4f225e4b0bd073c2023a6"}, {"problem": 40, "code": "(fn [x data]\n  (pop (into [] (apply concat (into []\n    (for [y data]\n      [y x]))))))", "user": "57b19fa1e4b0fbc9809a2754"}, {"problem": 40, "code": "(fn [sep coll] (butlast (mapcat vector coll (repeat sep))))", "user": "57c8d89ee4b05aa3c4741d23"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "56958a16e4b0dcc4269f4129"}, {"problem": 40, "code": "#(rest (mapcat (partial list %) %2))", "user": "5790329ee4b0ebec4cfb75a7"}, {"problem": 40, "code": "(fn [a b](drop-last (interleave  b (repeat a))))", "user": "57b8f784e4b0fbc9809a27ea"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "57d6b9c4e4b0bd073c2023cb"}, {"problem": 40, "code": "(fn[delim my-vec] (drop-last (mapcat #(list % delim) my-vec)))", "user": "575ddfd1e4b02ea11479938d"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "57c62aece4b05aa3c4741cf1"}, {"problem": 40, "code": "(fn [sep seq] \n  (rest (mapcat #(list sep %) seq)))", "user": "57d1a0e6e4b0bd073c20236d"}, {"problem": 40, "code": "(fn [item s]\n  (loop [result [] r s f true]\n    (if (empty? r)\n      result\n      (if f\n        (recur (conj result (first r))      (rest r) false)\n        (recur (conj result item (first r)) (rest r) false)\n      )\n      )\n    )\n)", "user": "57d7c894e4b0bd073c2023de"}, {"problem": 40, "code": "(fn [v s]\n  (rest (mapcat #(list v %) s)))", "user": "57dace50e4b0bd073c202416"}, {"problem": 40, "code": "#(butlast(mapcat (fn [a] [a %1]) %2))", "user": "57da5fc4e4b0bd073c20240f"}, {"problem": 40, "code": "(fn [sep seq-items]\n    (loop [items (butlast seq-items) result (list (last seq-items))]\n      (let [item (last items)]\n        (if (nil? item) \n          result\n          (recur (butlast items) (conj result sep item))))))", "user": "57d9bca1e4b0bd073c202405"}, {"problem": 40, "code": "(fn my-interpose [sep coll]\n  (rest (mapcat (partial vector sep) coll)))", "user": "57dda21be4b0bd073c202445"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "57d9750be4b0bd073c2023fe"}, {"problem": 40, "code": "#(reverse\n  (rest\n   \t(reverse\n     \t(interleave %2\n                    (repeat %1)))))", "user": "57b35772e4b0fbc9809a277c"}, {"problem": 40, "code": "(fn my-interpose [v s]\n    (drop-last (mapcat #(list % v) s)))", "user": "57985f98e4b039eba2ecb114"}, {"problem": 40, "code": "(fn [e l]\n   (loop [l l r []]\n     (if (empty? l) \n       (drop-last 1 r)\n       (recur (rest l) (conj r (first l) e)))))", "user": "57d9f603e4b0bd073c20240a"}, {"problem": 40, "code": "#(rest (mapcat list (repeat %1) %2))", "user": "530fbbaee4b08068f379eccf"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "57e139f6e4b0bfb2137f5a6c"}, {"problem": 40, "code": "(fn myinterpose [item coll]\n  (loop [c1 coll\n         acc []]\n    (if (empty? c1)\n      (filter (complement nil?) acc)\n      (recur (rest c1)\n             (conj acc (first c1) (when (> (count c1) 1) item))\n             ))))", "user": "5785c1d4e4b0ebec4cfb74e1"}, {"problem": 40, "code": "(fn [e a] (rest (mapcat #(vector e %) a)))", "user": "57ccedaae4b0c746388ab88e"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "57dd47f4e4b0bd073c20243e"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %1)))", "user": "57e0f30ae4b0bfb2137f5a66"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "57d9cae9e4b0bd073c202409"}, {"problem": 40, "code": "(fn [sep coll] (drop 1 (reduce #(conj %1 sep %2) [] coll)))", "user": "57dfab73e4b0bd073c202468"}, {"problem": 40, "code": "(fn my-interpose [val some-seq]\n  (butlast (reduce\n            (fn [res el] (conj res el val))\n            []\n            some-seq)))", "user": "57a6ad79e4b0a9660795620b"}, {"problem": 40, "code": "(fn [i coll]\n  (reduce #(conj %1 i %2) (vector (first coll)) (rest coll)))", "user": "574eb3b1e4b02ea114799247"}, {"problem": 40, "code": "(fn [i coll]\n  (rest (interleave (repeat i) coll)))", "user": "56f9c7c6e4b07572ad1a88ba"}, {"problem": 40, "code": "(fn [-v -s]\n    (loop [v -v s -s new []]\n          (if (empty? s)\n              new\n              (if (= 1 (count s))\n                  (recur v [] (conj new (first s)))\n                  (recur v (rest s) (conj new (first s) v))))))", "user": "57e3f709e4b0bfb2137f5aaf"}, {"problem": 40, "code": "(fn [v coll] (butlast (interleave coll (repeat v))))", "user": "51fda906e4b0f1313d468a4f"}, {"problem": 40, "code": "(fn [sep sqnc]\n    (vec\n     (flatten\n      (map #(if (= (first sqnc) %)\n              %\n              (list sep %))\n           sqnc))))", "user": "57b39fbee4b0fbc9809a2783"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "57e33f6fe4b0bfb2137f5a96"}, {"problem": 40, "code": "(fn my-interpose [y xs]\n  (loop [y y\n         [x & xs] xs\n         acc nil]\n    (if x\n      (recur y xs (if acc (cons x (cons y acc)) [x]))\n      (reverse acc))))", "user": "5705f569e4b0b0fb43fd0677"}, {"problem": 40, "code": "#(vec\n   (drop-last\n     (interleave %2 (repeat %1))))", "user": "57e6997ee4b0bfb2137f5af0"}, {"problem": 40, "code": "(fn tom [ire lst]\n  (if (= 1 (count lst))\n    (list (first lst))\n    (concat\n     (list (first lst) ire)\n     (tom ire (rest lst))\n          )\n    )\n  )", "user": "57e404a3e4b0bfb2137f5ab1"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "57df309ee4b0bd073c20245f"}, {"problem": 40, "code": "(fn [val coll]\n  (conj (reduce #(apply conj %1 [%2 val]) [] (butlast coll)) (last coll)))", "user": "57c176abe4b05aa3c4741ca2"}, {"problem": 40, "code": "#(rest (mapcat (partial list %1) %2))", "user": "56887bcbe4b0dcc4269f406a"}, {"problem": 40, "code": "(fn [rule coll] \n\t(drop-last \n\t\t(mapcat vector coll \n        \t(repeat rule)\n         )\n     )\n)", "user": "57eb2576e4b0bfb2137f5b5c"}, {"problem": 40, "code": "#(drop-last (reduce (fn [x y] (conj (conj x y) %1)) [] %2))", "user": "57ec3d29e4b0bfb2137f5b77"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat (count %2) %1)))", "user": "56629a7de4b0e91d5f5c5649"}, {"problem": 40, "code": "(fn intrp [sep coll] \n   (cons (first coll) \n         (mapcat #(vector sep %) (rest coll))))", "user": "57ee804ee4b0bfb2137f5bbb"}, {"problem": 40, "code": "(fn [i s] \n  (butlast \n   (mapcat #(list %1 i) s)))", "user": "554ea8fbe4b00713264bd999"}, {"problem": 40, "code": "#(rest (mapcat vector (repeat %1) %2))", "user": "57eb7a97e4b0bfb2137f5b62"}, {"problem": 40, "code": "(fn [sep a-seq]\n  (reduce #(conj %1 sep %2) [(first a-seq)] (rest a-seq)))", "user": "574e84e0e4b02ea114799243"}, {"problem": 40, "code": "(fn [v a-seq] (rest (reduce #(conj %1 v %2) [] a-seq)))", "user": "57f0f7b8e4b0bfb2137f5bfe"}, {"problem": 40, "code": "(fn [val coll]\n    (butlast\n      (reduce concat []\n        (for [x coll]\n          [x val]))))", "user": "532f7e12e4b019098a6f8b4e"}, {"problem": 40, "code": "(fn int [v xs]\n  (if-let [[x & xs] xs]\n    (if (empty? xs)\n      (list x)\n      (cons x (cons v (int v xs))))))", "user": "57df2722e4b0bd073c20245e"}, {"problem": 40, "code": "(fn [_ coll]\n  (rest (mapcat #(vector _ %) coll)))", "user": "57e79d8ee4b0bfb2137f5afe"}, {"problem": 40, "code": "#(drop-last (mapcat vector %2 (repeat %1)))", "user": "57ee9ffbe4b0bfb2137f5bc2"}, {"problem": 40, "code": "(fn my-inter [i coll]\n  (butlast (flatten (map (fn [x] [x i]) coll))) )", "user": "56020b3fe4b04bb52996e19b"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "user": "574a71b7e4b02ea1147991fb"}, {"problem": 40, "code": "(fn [a b] \n  (drop-last (reduce \n   #(conj % %2 a) [] b)))", "user": "57485efee4b009280f9f2b8a"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %1)))", "user": "57e20474e4b0bfb2137f5a82"}, {"problem": 40, "code": "(fn [s c]\n  (drop-last\n   (mapcat vector c (repeat s))))", "user": "57ed2574e4b0bfb2137f5b93"}, {"problem": 40, "code": "#(drop-last 1 (interleave %2 (repeat %)))", "user": "57596ba7e4b02ea11479931a"}, {"problem": 40, "code": "#(conj (vec (interleave %2 (repeat (- (count %2) 1) %1))) (last %2))", "user": "57e91413e4b0bfb2137f5b20"}, {"problem": 40, "code": "(fn [x col]\n  (drop-last (mapcat #(list % x) col))\n)", "user": "57e396cde4b0bfb2137f5a9e"}, {"problem": 40, "code": "(fn [inter input]\n  (loop [remaining input ans []]\n    (if (empty? remaining)\n      (butlast ans)\n      (recur (rest remaining) (conj ans (first remaining) inter)))))", "user": "5746061ae4b009280f9f2b5b"}, {"problem": 40, "code": "(fn [e sq] (drop-last (mapcat #(vector % e) sq)))", "user": "57db2369e4b0bd073c20241f"}, {"problem": 40, "code": ";;  (fn my-interpose [sep seq]\n;;    (drop-last 1 (interleave seq (repeat sep))))\n\n  (fn my-interpose [sep seq]\n    (drop 1 (interleave (repeat sep) seq)))", "user": "57f6e666e4b0d3187e9008f2"}, {"problem": 40, "code": "(fn my-interpose [v coll ] (butlast (mapcat #(vector % v) coll) ))", "user": "57e59d2be4b0bfb2137f5ad9"}, {"problem": 40, "code": "#(rest (mapcat (partial conj [%]) %2))", "user": "56a44067e4b0542e1f8d14da"}, {"problem": 40, "code": "(fn interpose-custom [x y]\n  (loop [y y\n         res '()]\n   (if (second y)\n     (recur (rest y) (cons x (cons (first y) res)))\n     (reverse (cons (first y) res)))\n   )\n  )", "user": "57f6bd5de4b0d3187e9008ee"}, {"problem": 40, "code": "(fn [n coll]\n    (flatten (conj [(first coll)] (map #(into [] [n %]) (rest coll)))))", "user": "5672925fe4b05957ce8c6114"}, {"problem": 40, "code": "(fn  [n lst]\n  (loop [ls '()\n         ls1 lst]\n    (if (empty? ls1) (rest(reverse ls)) (recur (concat (list(first ls1)) (list n) ls ) (rest ls1) ))))", "user": "57fc08d8e4b0d3187e900988"}, {"problem": 40, "code": "(fn [x xs]\n  (flatten (reduce #(list %1 x %2) xs)))", "user": "57f96e13e4b0d3187e900945"}, {"problem": 40, "code": "(fn myinterpose\n  [x lst]\n  (butlast (mapcat #(concat (list %) (list x)) lst)))", "user": "57fc34f0e4b0d3187e90098e"}, {"problem": 40, "code": "(fn my-interpose\n  [x lst] \n  (cons (first lst) (mapcat #(list x %) (next lst))))", "user": "57f8153de4b0d3187e900916"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "573d8658e4b05c31a32c0814"}, {"problem": 40, "code": "(fn [v coll]\n  (if (empty? coll) nil\n  \t(apply concat [(first coll)] (map (fn [ci] [v ci]) (rest coll)))))", "user": "57f80350e4b0d3187e90090c"}, {"problem": 40, "code": "(fn [value lst]\n  (take (dec (* (count lst) 2)) (interleave lst (repeat (count lst) value))))", "user": "57f8104ce4b0d3187e900910"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "57fe836ee4b0d3187e9009d2"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "57ec8d1de4b0bfb2137f5b7f"}, {"problem": 40, "code": "(fn interpose1 [posed col]\n  (loop [p posed\n         c col\n         res []]\n    (if (empty? (rest c))\n      (conj res (first c))\n      (recur p\n             (rest c)\n             (conj res (first c) p)))))", "user": "5600591de4b04bb52996e166"}, {"problem": 40, "code": "(fn [x lstA]\n   (loop [lstA lstA\n          x x\n          aux ()]\n     (if (empty? lstA)\n       (reverse  (rest aux) )\n       (recur (rest lstA) x (conj aux (first lstA) x ))\n       )))", "user": "57f81524e4b0d3187e900913"}, {"problem": 40, "code": "(fn interp[n lst]\n    (loop [lst lst\n           a ()]\n      (if (or (empty? lst)(empty? (rest lst)))\n        (vec (reverse (conj a (first lst))))\n        (recur (rest lst) (conj a (first lst)n)))))", "user": "57f814fbe4b0d3187e900911"}, {"problem": 40, "code": "(fn [d xs] (butlast (interleave xs (repeat d))))", "user": "57fdd1cfe4b0d3187e9009bf"}, {"problem": 40, "code": "(fn\n  [val seq]\n  (rest (apply concat (map #(vector val %) seq))))", "user": "557c647ce4b05c286339e0c3"}, {"problem": 40, "code": "(fn my-interpose \n  ([separator input] (my-interpose separator input nil))\n  ([separator input result] \n    (if \n      (empty? input) \n      (reverse (rest result))\n      (my-interpose separator (rest input) (cons separator (cons (first input) result))))))", "user": "57f81544e4b0d3187e900917"}, {"problem": 40, "code": "(fn [a [d & ds]] (reduce #(conj (conj %1 a) %2) [d] ds))", "user": "57efb389e4b0bfb2137f5bdb"}, {"problem": 40, "code": "#(rest (mapcat vector (repeat %) %2))", "user": "5254b45fe4b0541d1855b9a0"}, {"problem": 40, "code": "(fn [n cs] (if (or (empty? cs) (empty? (rest cs))) cs (into (conj (empty cs) (first cs)) \n(reduce \n  (fn [acc b] \n    (conj acc n b)) \n  (empty cs) \n  (rest cs) \n)) ))", "user": "57f9011ee4b0d3187e900935"}, {"problem": 40, "code": "(fn [s l] (rest (mapcat list (repeat s) l)))", "user": "5800edaae4b0a837a8b30c48"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "55cc6c35e4b0e31453f64a10"}, {"problem": 40, "code": "(fn [x lst]\n  (butlast (reduce concat (map #(concat (list %) (list x)) lst))))", "user": "57f81549e4b0d3187e900918"}, {"problem": 40, "code": "(fn interp\n  [n lst]\n  (loop [x lst\n         nLst '()]\n    (if (empty? x)\n      (reverse (rest nLst))\n      (recur (rest x) (cons n\n                            (cons (first x)\n                                           nLst))))))", "user": "57f81534e4b0d3187e900915"}, {"problem": 40, "code": "(fn f \n    ([x coll] (f x (rest coll) [(first coll)]))\n    ([x coll agg] (if (empty? coll) agg (f x (rest coll) (conj agg x (first coll)))))\n  )", "user": "57b9f35be4b0fbc9809a27f9"}, {"problem": 40, "code": "(fn [x lst]\n (take (- (* 2 (count lst)) 1)\n       (interleave lst (repeat x))))", "user": "57f8151ce4b0d3187e900912"}, {"problem": 40, "code": "(fn [x lst]\n  (butlast (mapcat #(list % x) lst))\n  )", "user": "57f81045e4b0d3187e90090f"}, {"problem": 40, "code": "(fn [n lst]\n  (loop [lst lst\n         r []]\n    (cond \n     (empty? lst) (butlast (apply vector (reverse r)))\n     :else (recur (rest lst) (cons n (cons (first lst) r))))))", "user": "57fedf07e4b0d3187e9009dc"}, {"problem": 40, "code": "(fn \n  [a b]\n  (rest (mapcat #(list a %) b)) \n  )", "user": "57f81532e4b0d3187e900914"}, {"problem": 40, "code": "(fn [elem lst] (butlast (mapcat #(vector % elem) lst)))", "user": "57fa7c93e4b0d3187e900963"}, {"problem": 40, "code": "(fn [x lst] (butlast (mapcat #(vector % x) lst)))", "user": "57fd7344e4b0d3187e9009b6"}, {"problem": 40, "code": "(fn [n lst]\n  (rest (mapcat #(list n %) lst)))", "user": "580570a2e4b0a837a8b30cc7"}, {"problem": 40, "code": "(fn [sym lst]\n(drop-last (interleave lst (repeat (count lst) sym))))", "user": "57f81569e4b0d3187e900919"}, {"problem": 40, "code": "(fn [sep vec1] (drop-last (flatten (for [item vec1] [item sep]))))", "user": "57f52d3be4b0903ccab3dce7"}, {"problem": 40, "code": "(fn custominterpose\n  [a col]\n  (reduce #(concat %1 %2) (list (first col))  (map #(list a %) (rest col))))", "user": "57fe2d6fe4b0d3187e9009c8"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5803cd8fe4b0a837a8b30c96"}, {"problem": 40, "code": "(fn [sep xs] (flatten (reduce (fn [x y] [x sep y]  ) xs ) ) )", "user": "568a351be4b0dcc4269f408a"}, {"problem": 40, "code": "#(loop [c %1 item %2 result []]\n   (cond\n    (empty? item) result\n    (= 1 (count item)) (recur c (rest item) (conj result (first item)))\n    :else (recur c (rest item) (conj result (first item) c))))", "user": "57f8ba80e4b0d3187e90092f"}, {"problem": 40, "code": "(fn intersuppose [y x]\n  (loop [m x col '()]\n      (if (empty? m)\n        (rest (reverse col))\n        (recur (rest m)\n               (cons (first m)\n                     (cons y col))))))", "user": "57073037e4b0b0fb43fd0689"}, {"problem": 40, "code": "(fn ipose [v seq]\n         (let [ipose2 (fn ipose2 [seq]\n                        (when (not (empty? seq))\n                          (cons v (cons (first seq) (ipose2 (rest seq))))\n                          ))]\n           (cons (first seq) (ipose2 (rest seq)))\n           ))", "user": "57fc0719e4b0d3187e900987"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %)))", "user": "5405885ee4b0addc1aec6668"}, {"problem": 40, "code": "(fn check [x y & [z]]\n   (if (= (last y) nil)\n     (do z)\n     (if (= (first y) (last y))\n       (do (check x (butlast y) (conj z (last y))))\n       (do (check x (butlast y) (conj z (last y) x)))\n   )\n )\n)", "user": "580014d7e4b0a837a8b30c32"}, {"problem": 40, "code": "(fn [a b] (drop-last (mapcat (fn [e] (list e a)) b)))", "user": "57ee82b1e4b0bfb2137f5bbd"}, {"problem": 40, "code": "(fn [f s] (drop-last (reduce (fn [l e] (conj l e f)) [] s)))", "user": "5801eed1e4b0a837a8b30c63"}, {"problem": 40, "code": "#(drop 1 (mapcat vector (repeat (count %2) %1) %2))", "user": "57b9fb56e4b0fbc9809a27fa"}, {"problem": 40, "code": "(fn [ip [f & args]]\n  (reduce #(conj %1 ip %2) [f] args))", "user": "54d893a4e4b0a52adc2e2039"}, {"problem": 40, "code": "(fn [elem v]\n  (drop-last (mapcat #(vector % elem) v)))", "user": "558fb218e4b0277789237665"}, {"problem": 40, "code": "(fn [sep c]\n  (rest (reduce (fn [a b]\n                  (conj a sep b))\n                []\n                c)))", "user": "580bd81ee4b0849f6811b711"}, {"problem": 40, "code": "(fn [x coll] (butlast (reduce #(conj %1 %2 x) [] coll)))", "user": "57ed19a3e4b0bfb2137f5b8e"}, {"problem": 40, "code": "#(drop-last(interleave %2 (repeat %1)))", "user": "57ee432de4b0bfb2137f5bb2"}, {"problem": 40, "code": ";#(drop-last(interleave %2 (repeat %1)))\n#(drop-last(mapcat vector %2 (repeat %1)))", "user": "57ee46c7e4b0bfb2137f5bb3"}, {"problem": 40, "code": "#(drop-last(interleave %2 (repeat (count %2) %1)))", "user": "57ee41eae4b0bfb2137f5bb0"}, {"problem": 40, "code": ";;(fn [s coll] (drop-last (mapcat #(vector % s) coll)))\n #(drop-last(interleave %2 (repeat %1)))", "user": "57ef793de4b0bfb2137f5bd8"}, {"problem": 40, "code": "(fn [x col] (butlast (mapcat #(conj [] % x) col)))", "user": "57ee2b3ee4b0bfb2137f5bac"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "580c8fcee4b0849f6811b721"}, {"problem": 40, "code": "#(loop [in %2 out []] (if (empty? in) out (if (> (count in) 1) (recur (rest in) (into out [(first in) %1])) (recur (rest in) (conj out (first in))))))", "user": "57f9e0bce4b0d3187e900956"}, {"problem": 40, "code": "(fn [del col]\n      (drop 1 (reduce #(conj (conj %1 del) %2) [] col))\n      )", "user": "55ee84c0e4b0121d4835fdf0"}, {"problem": 40, "code": "(fn [item lst]\n  (loop [result [] lst lst]\n    (if (= 1 (count lst))\n      (conj result (first lst))\n      (recur (conj result (first lst) item) (rest lst)))))", "user": "570e6974e4b0b0fb43fd06ef"}, {"problem": 40, "code": "(fn my-interpose [sep [item & col]]\n  (if (seq col)\n    (concat [item sep] (my-interpose sep col))\n    [item]))", "user": "57a4fa50e4b0a966079561f1"}, {"problem": 40, "code": "#_(fn [ele v]\n  (loop [i 0\n         m (list)]\n    (let [m (conj m (.get v i) ele)\n          imax (- (count v) 1)]\n      (if (< i imax)\n        (recur (inc i) m)\n        (reverse (pop m))))))\n\n#(drop-last (interleave %2 (repeat %1)))", "user": "57ee42c4e4b0bfb2137f5bb1"}, {"problem": 40, "code": "(fn [mrr coll] (reduce #(conj %1 mrr %2) [(first coll)] (rest coll)))", "user": "57eb38dbe4b0bfb2137f5b5e"}, {"problem": 40, "code": "(fn [x y] (butlast (mapcat #(vector % x) y)))", "user": "57ee41a6e4b0bfb2137f5baf"}, {"problem": 40, "code": "#(loop [coll %2 result (empty %2)]\n   (if (empty? (rest coll))\n     (conj result (first coll))\n     (recur (rest coll) (conj result (first coll) %1))))", "user": "580e2941e4b0849f6811b74e"}, {"problem": 40, "code": "#(butlast(interleave %2 (repeat %1)))", "user": "580fbaade4b0f478707a05c0"}, {"problem": 40, "code": "(fn [x col]\n   (rest (reduce #(conj %1 x %2) [] col)))", "user": "57e4dbcbe4b0bfb2137f5ac3"}, {"problem": 40, "code": "(fn [x y] (rest (interleave (repeat x) y)))\n;;#(rest (interleave (repeat %1) %2))", "user": "580d7bdae4b0849f6811b73c"}, {"problem": 40, "code": "(fn [x col]\n  (drop-last (mapcat #(identity [% x]) col)))", "user": "57839ae9e4b0ebec4cfb74b8"}, {"problem": 40, "code": "(fn [sep sq]\n  (rest (mapcat list (repeat sep) sq)))", "user": "57aa053fe4b0b8559636fc61"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "54ba9ee8e4b0ed20f4ff6eb7"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5694e9c5e4b0dcc4269f4123"}, {"problem": 40, "code": "(fn [sep [s & ss]] (loop [[h & t] ss acc [s]] (if (= t nil) (conj acc sep h) (recur t (conj acc sep h)))))", "user": "58152157e4b0f478707a0631"}, {"problem": 40, "code": "#(pop (vec (interleave %2 (repeat (count %2) %1))))", "user": "565b2fa5e4b068f2fe63dbfe"}, {"problem": 40, "code": "#(pop (vec (interleave  %2 (repeat (count %2) %1))))", "user": "580d7de3e4b0849f6811b73d"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "58047205e4b0a837a8b30ca9"}, {"problem": 40, "code": "#(drop-last(interleave %2 (repeat %1)))", "user": "580d7e53e4b0849f6811b73e"}, {"problem": 40, "code": "(fn [s [h & t]](flatten (reduce #(vector %1 s %2) h t)))", "user": "563c6ebae4b0bfe05bf11834"}, {"problem": 40, "code": "#(rest \n  ((fn ileave [x y']\n     (lazy-seq (let [y (seq y')] \n       (when y \n         (cons x (cons (first y) (ileave x (rest y))))))))\n   %1 %2))", "user": "58172161e4b0c0e9c07b8389"}, {"problem": 40, "code": "(fn f40 [x coll]\n  (butlast (mapcat #(conj [%] x) coll)))", "user": "55634f38e4b0c656e3ff17e8"}, {"problem": 40, "code": "(fn [d coll] (drop-last (mapcat list coll (repeat (count coll) d))))", "user": "58134ba8e4b0f478707a060b"}, {"problem": 40, "code": "(fn [sep in] \n    (loop [in in out ()]\n      (if (> 2 (count in)) \n        (concat out [(first in)])\n        (recur (rest in) (concat out [(first in)] [sep]))\n      )\n    )\n  )", "user": "58186016e4b0c0e9c07b83ad"}, {"problem": 40, "code": "(fn [n coll]\n    (conj (vec (mapcat #(list % n) (butlast coll))) (last coll)))", "user": "500d3160e4b05f7c30cfa6a1"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "5508a292e4b06e50f9beb10f"}, {"problem": 40, "code": "(fn selipin\n  [n xs]\n  (if (= (count xs) 1)\n    xs\n    (concat [(first xs) n] (selipin n (rest xs)))))", "user": "58171a9ae4b0c0e9c07b8387"}, {"problem": 40, "code": "(fn [n coll] (drop-last (interleave coll (repeat (count coll) n))))", "user": "57f3b841e4b0511f1d294e0f"}, {"problem": 40, "code": "(fn [x s] (->> x\n               (repeat (count s))\n               (interleave s)\n               (butlast)))", "user": "5812eb8fe4b0f478707a0602"}, {"problem": 40, "code": ";#(rest (interleave (repeat %1) %2))\n#(drop-last (interleave %2 (repeat %1)))", "user": "581b19e7e4b04b46fc4b0ec4"}, {"problem": 40, "code": "(fn [v s]\n  (drop-last (mapcat #(vector % v) s)))", "user": "581a5fdbe4b0e114eb51a002"}, {"problem": 40, "code": "(fn [sep coll] (reduce #(conj %1 sep %2) [(first coll)] (rest coll)))", "user": "563e1c0ee4b0da801c4e4665"}, {"problem": 40, "code": "(fn my-interpose [v xs]\n  (loop [acc [(first xs)]\n         remaining (rest xs)]\n    (if (seq remaining)\n      (recur (conj acc v (first remaining)) (rest remaining))\n      acc)))", "user": "5687b6abe4b0dcc4269f4061"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "581e61b0e4b04b46fc4b0f28"}, {"problem": 40, "code": "(fn inter [n a]\n  (drop-last (mapcat vector a (repeat n)))\n  )", "user": "5820924ee4b04b46fc4b0f58"}, {"problem": 40, "code": "#(butlast (interleave %2 (take (count %2) (repeat %1))))", "user": "581e8b86e4b04b46fc4b0f2b"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "55b2505be4b0da326a65cf7d"}, {"problem": 40, "code": "#(drop-last (vec (mapcat vector %2 (repeat %))))", "user": "58173722e4b0c0e9c07b838a"}, {"problem": 40, "code": "#(drop-last (into [] (apply concat (map conj (map vector %2) (into [] (repeat (count %2) %))))))", "user": "56193c6ee4b053970a773af2"}, {"problem": 40, "code": "#(butlast (mapcat vector %2 (repeat %1)))", "user": "5821b018e4b04b46fc4b0f80"}, {"problem": 40, "code": "(fn [i s] \n\t\t(let [\n\t\tis (repeat i)\n\t\tl (dec (* 2 (count s)))]\n\t\t(take l (interleave s is))\n\t\t))", "user": "500e3238e4b068062f6e8d8f"}, {"problem": 40, "code": "; (fn [i xs]\n;   (butlast (interleave xs (repeat i))))\n\n#(butlast (interleave %2 (repeat %1)))", "user": "56255e2de4b00a550fc90297"}, {"problem": 40, "code": "(fn [v col](butlast(mapcat #(vector % v) col)))", "user": "52faf67ce4b047fd55837005"}, {"problem": 40, "code": "(fn [n c]\n    (butlast (reduce\n        #(conj %1 %2 n)\n        []\n        c)))", "user": "57ae3345e4b0fbc9809a271e"}, {"problem": 40, "code": "(fn [sep s] (into [] (drop-last (mapcat #(list % sep) s))))", "user": "581b4d3be4b04b46fc4b0ec6"}, {"problem": 40, "code": "(fn [v sq] (loop [acc [(first sq)] s (rest sq)]\n             (let [h (first s)]\n               (if (nil? h)\n                 acc\n                 (recur (conj acc v h) (rest s))))))", "user": "58225587e4b04b46fc4b0f94"}, {"problem": 40, "code": "(fn[token listan] (drop-last (interleave listan (repeat (count listan) token))))", "user": "57ea79d9e4b0bfb2137f5b4f"}, {"problem": 40, "code": "(fn [x ys]\n  (loop [f [] x x ys ys]\n    (if (empty? ys)\n      \t(butlast f)\n      \t(recur \n         \t(conj f (first ys) x) \n         \tx \n         \t(rest ys)\n        )\n      )\n    )\n  )", "user": "5821dbb9e4b04b46fc4b0f86"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "58247423e4b051871117bec5"}, {"problem": 40, "code": "(fn [sep c]\n   (next (mapcat #(list sep %1) c)))", "user": "5808ee16e4b0a837a8b30d16"}, {"problem": 40, "code": "(fn [c xs]\n  (loop [ ys xs acc [] ]\n    (cond\n     (empty? ys) acc\n     (= 1 (count ys)) (conj acc (first ys))\n     :else (recur (rest ys) (conj acc (first ys) c))\n)))", "user": "582835cbe4b051871117bf30"}, {"problem": 40, "code": "#(rest( interleave (take (count %2) (repeat %1)) %2))", "user": "58224c53e4b04b46fc4b0f92"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat (count %2) %)))", "user": "581829cce4b0c0e9c07b83a9"}, {"problem": 40, "code": "(fn [sep seq]\n  (flatten \n   (reduce\n    (fn [l r]\n      (conj [] l sep r))\n    seq)))", "user": "53bd476ae4b0d9a98559a6ca"}, {"problem": 40, "code": "(fn [x coll]\n  (let [xcoll (repeat (count coll) x)\n    \tlcoll (mapcat vector coll xcoll)\n        n (- (count lcoll) 1)]\n    (take n lcoll)))", "user": "58217fbde4b04b46fc4b0f78"}, {"problem": 40, "code": "(fn [my-val my-seq]\n    (reverse (rest (reverse (mapcat #(vector % my-val) my-seq)))))", "user": "5784ff88e4b0ebec4cfb74d4"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop 1 (interleave (repeat sep) coll)))", "user": "577e42dee4b0c8d87281f6e4"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "507ff90fe4b089ade05efbd9"}, {"problem": 40, "code": "(fn [sep s] (rest (interleave (repeat (count s) sep) s)))", "user": "5710140fe4b09c608db7042e"}, {"problem": 40, "code": "(fn [n xs]\n  (butlast (interleave xs (repeat (count xs) n))))", "user": "54ca35c6e4b057c6fda3a254"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "581dad0ae4b04b46fc4b0f17"}, {"problem": 40, "code": "#(rest (for [v %2 x [% v]] x))", "user": "58299e03e4b051871117bf46"}, {"problem": 40, "code": "#(loop [inter %1\n        seqs %2\n        res []]\n   (if (empty? seqs)\n     (drop-last res)\n     (recur inter (rest seqs) (into res [(first seqs) inter]))))", "user": "5820cca0e4b04b46fc4b0f62"}, {"problem": 40, "code": "(fn my-interpose [n coll]\n\t(cons (first coll) (interleave (repeat n) (rest coll)))\n)", "user": "525d44bfe4b0cb4875a45d6d"}, {"problem": 40, "code": "(fn\r\n[i coll]\r\n(butlast (interleave coll (repeat i))))", "user": "56f514cee4b046a417f92068"}, {"problem": 40, "code": "(fn [punctuation coll] (drop-last (mapcat #(list % punctuation) coll)))", "user": "5665ef78e4b0e91d5f5c5664"}, {"problem": 40, "code": "#(butlast (flatten (map (fn [x] (conj [] x %1)) %2)))", "user": "58254a11e4b051871117bed9"}, {"problem": 40, "code": "#(loop [x [] y %2]\n   (let [z %]\n     (if (empty? y)\n       x\n       (recur (cond (= (count y) 1) (conj x (first y))\n                    :else (conj x (first y) z)) (rest y)))))", "user": "582c526ae4b051871117bf88"}, {"problem": 40, "code": "(fn [i s]\n  (drop-last\n   (apply concat (map #(identity [% i]) s))))", "user": "5813e208e4b0f478707a061b"}, {"problem": 40, "code": "(fn [delimiter coll]\n  (let [in-fn (fn [delimiter coll acc]\n                (cond\n                 (empty? coll) acc\n                 (= 1 (count coll)) (concat acc coll)\n                 :else (recur delimiter (rest coll) (conj acc (first coll) delimiter))))]\n    (in-fn delimiter coll [])))", "user": "52860baae4b0239c8a67ae09"}, {"problem": 40, "code": "(fn hello [sep s]\n  (pop (reduce (fn [a i]\n            (conj a i sep))\n          []\n          s)))", "user": "5829d588e4b051871117bf4a"}, {"problem": 40, "code": "(fn [x c] (rest (reduce #(conj %1 x %2) [] c)))", "user": "55632016e4b0c656e3ff17e4"}, {"problem": 40, "code": "(fn[x c](butlast(mapcat #(vector % x)c)))", "user": "58303fc3e4b051871117c006"}, {"problem": 40, "code": "(fn test9 [del c]\n  (rest(mapcat #(list del %1) c)))", "user": "5804d5afe4b0a837a8b30cad"}, {"problem": 40, "code": "(fn [v coll]\n  ;; There's an extra v at the end of the new list, so drop it\n  (drop-last (flatten (map #(list %1 v) coll))))", "user": "58327a08e4b089d5ab817c7c"}, {"problem": 40, "code": "#(pop (vec (interleave %2 (repeat (count %2) %))))", "user": "582290b5e4b04b46fc4b0fa0"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5649d538e4b0284900eef647"}, {"problem": 40, "code": "(fn [av s]\n  (->> (for [x s]\n         [x av])\n       flatten\n       butlast))", "user": "582a5174e4b051871117bf59"}, {"problem": 40, "code": "(fn [a l]\n  (loop [l l res ()]\n    (if (empty? l)\n      res\n      (recur (rest l)\n             (concat res (list (first l))\n                     (if (not(empty? (rest l)))(list a)()))))))", "user": "5829bc55e4b051871117bf49"}, {"problem": 40, "code": "#(drop 1 (mapcat list (repeat %) %2))", "user": "582e0afde4b051871117bfd5"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5835bc73e4b089d5ab817ce9"}, {"problem": 40, "code": "(fn [sep items] (concat [(first items)] (mapcat #(list sep %) (rest items))))", "user": "583166c1e4b051871117c025"}, {"problem": 40, "code": "(fn [sep s ] (rest(reduce (fn [acc, item] (conj acc sep item)) [] s)))", "user": "582dc562e4b051871117bfcb"}, {"problem": 40, "code": "(fn [sep coll] (butlast (mapcat #(vector % sep) coll)))", "user": "58375635e4b089d5ab817d14"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "552f6e8ee4b076ab5578f802"}, {"problem": 40, "code": "#(rest (mapcat (partial vector %1) %2))", "user": "58335c22e4b089d5ab817c9a"}, {"problem": 40, "code": "(fn [x coll] (butlast (flatten (map #(list % x) coll))))", "user": "56491050e4b0284900eef639"}, {"problem": 40, "code": "(fn interp [elem coll]\n  (let [result (apply concat\n                      (map\n                       (partial conj [])\n                       coll\n                       (repeat elem)\n                       ))]\n    (take (- (count result) 1) result)))", "user": "5779556de4b0979f8965166e"}, {"problem": 40, "code": "(fn [x y]\n  (loop [y y z []]\n    (if \n      (empty? (rest y)) (conj z (first y))\n      (recur (rest y) (conj z (first y) x )))))", "user": "5839f079e4b089d5ab817d48"}, {"problem": 40, "code": "#(butlast  (interleave %2 (repeat (count %2) %1 )))", "user": "55c66ffee4b0e31453f649c2"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "5835cb06e4b089d5ab817cea"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "57bf5f49e4b05aa3c4741c7b"}, {"problem": 40, "code": "(fn [sep lst] (conj (reduce #(conj %1 %2 sep) [] (butlast lst)) (last lst)))", "user": "583a360de4b089d5ab817d4f"}, {"problem": 40, "code": "(fn [a coll]\n    (rest (mapcat #(vector a %) coll)) )", "user": "4fec0824e4b0681fd128dc9c"}, {"problem": 40, "code": "(fn m_interp [elem arr]\n  (loop [arr arr\n         out []]\n    (if (empty? arr)\n      out\n      (recur\n       (rest arr)\n       (if (empty? (rest arr))\n         (conj out (first arr))\n         (conj out (first arr) elem))))))", "user": "55a12cb1e4b0acc240e3150d"}, {"problem": 40, "code": "#(rest (mapcat (partial vector %1) %2))", "user": "5835a222e4b089d5ab817ce5"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "user": "583667c7e4b089d5ab817cfb"}, {"problem": 40, "code": "(fn [x y]\n  (drop 1 (mapcat (fn [z] (conj '() z x)) y)))", "user": "53d8da61e4b0e771c3025471"}, {"problem": 40, "code": "(fn [n s] (rest (mapcat #(vector n %) s)))", "user": "57235dc4e4b0c5bde472c0e2"}, {"problem": 40, "code": "(fn I [i xs]\n  (when\n    (not-empty xs)\n    (let [[xh & xt] xs]\n      (if\n        (not-empty xt)\n        (cons xh (cons i (I i xt)))\n        (cons xh nil)\n      )\n    )\n  )\n)", "user": "58334d18e4b089d5ab817c97"}, {"problem": 40, "code": "(fn [x s] \n  (rest (mapcat #(vector x %1) s)))", "user": "583f2e4de4b089d5ab817dcb"}, {"problem": 40, "code": "(fn [a b] (-> (map #(list a %) b) flatten rest (into [])))", "user": "5810b899e4b0f478707a05d8"}, {"problem": 40, "code": "(fn [value coll]\n  (rest (mapcat #(list value %) coll)))", "user": "57d0679ee4b0bd073c202359"}, {"problem": 40, "code": "(fn [element lis]\n  (drop-last (mapcat vector lis (repeat (count lis) element))))", "user": "58384bc4e4b089d5ab817d27"}, {"problem": 40, "code": "(fn [sep coll]\n  (conj (vec (interleave (butlast coll) (repeat sep))) (last coll)))", "user": "57089f82e4b0b0fb43fd06a2"}, {"problem": 40, "code": "(fn [v coll]\n  (butlast (mapcat #(vector % v) coll)))", "user": "583e02fce4b089d5ab817da5"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %)))", "user": "58391c94e4b089d5ab817d35"}, {"problem": 40, "code": "#(drop-last (interleave  %2 (repeat %1)))", "user": "583c8bd4e4b089d5ab817d81"}, {"problem": 40, "code": "(fn f [ s li] \n  (drop-last (interleave li (repeat s))))", "user": "4e6a5728535d8ccf87e9fecf"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "582cbf48e4b051871117bfa6"}, {"problem": 40, "code": "(fn [ x y ]\n  (loop [ resp (list (first y))\n          src  (rest y) ]\n    (if (empty? src) resp\n      (recur (concat resp (list x (first src))) (rest src)))))", "user": "582589b2e4b051871117bedd"}, {"problem": 40, "code": "(fn [x s] (let [a (drop-last s)\n                b (map (constantly x) s)\n                l (last s)] \n            (concat (mapcat vector a b) [l])))", "user": "57ffacd9e4b0a837a8b30c26"}, {"problem": 40, "code": "#(butlast (mapcat (fn [s] [s %1]) %2))", "user": "582d7569e4b051871117bfbe"}, {"problem": 40, "code": "(fn [arg1 coll] (drop-last (mapcat #(concat [%]  [arg1] ) coll)))", "user": "5804b491e4b0a837a8b30cac"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %)))", "user": "54d341f7e4b0e8a36923e603"}, {"problem": 40, "code": "(fn [val coll] (rest (reduce #(conj %1 val %2) (empty coll) coll)))", "user": "584917a1e4b089d5ab817ec9"}, {"problem": 40, "code": "(fn [n v] (drop 1 (interleave (repeat n) v)))", "user": "55a21f1ce4b0acc240e3151f"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "583e27e2e4b089d5ab817daa"}, {"problem": 40, "code": "(fn\n  [el col]\n  (reverse (rest (reduce (fn [r x] (conj r x el)) '() col))))", "user": "5843b231e4b089d5ab817e3d"}, {"problem": 40, "code": "#(butlast (mapcat vector %2 (repeat %1)))", "user": "579aff09e4b05b1deef9ade7"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "57465429e4b009280f9f2b60"}, {"problem": 40, "code": "(fn inter[i s](if (second s) (concat [(first s) i] (inter i (rest s))) s))", "user": "5849ac5fe4b089d5ab817ed7"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "584dadebe4b0b7285a6f4e44"}, {"problem": 40, "code": "(fn\n  [interposer list]\n  (let [interposer-list (repeat (count list) interposer)]\n    (drop-last 1 (vec (interleave list interposer-list)))))", "user": "55a5e2f7e4b0acc240e31550"}, {"problem": 40, "code": "(fn [sep seq]\n  (rest (mapcat #(vector sep %1) seq)))", "user": "574c3a7ce4b02ea114799219"}, {"problem": 40, "code": "(fn [sep sq]\n  (butlast (reduce concat (map #(list % sep) sq))))", "user": "5845720de4b089d5ab817e68"}, {"problem": 40, "code": "(fn my-interpose\n  [separator [first-item & remaining-items]]\n  (reduce #(conj %1 separator %2) [first-item] remaining-items))", "user": "57e9a77ae4b0bfb2137f5b35"}, {"problem": 40, "code": "(fn [ins arr] \n\t(drop-last\n\t\t (mapcat \n\t\t\t#(list  % ins)\n\t\t\tarr )))", "user": "583c4482e4b089d5ab817d7e"}, {"problem": 40, "code": "#(rest (mapcat list (repeat %1) %2))", "user": "583e1558e4b089d5ab817da9"}, {"problem": 40, "code": "(fn [a b] (butlast (mapcat #(list % a) b)))", "user": "57dafe97e4b0bd073c20241c"}, {"problem": 40, "code": "(fn [val s] (drop-last (flatten (map #(cons % [val]) s))))", "user": "58408643e4b089d5ab817deb"}, {"problem": 40, "code": "(fn [sep coll] (butlast (reduce (fn [acc a] (conj acc a sep)) [] coll)))", "user": "570eeca5e4b0b0fb43fd06fb"}, {"problem": 40, "code": "(fn [x xs]\n   (drop-last (flatten  (for [a xs]\n                         [a x]))))", "user": "567b2f20e4b05957ce8c61a2"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "user": "564dc08ae4b0284900eef68f"}, {"problem": 40, "code": "(fn [e s] (butlast (interleave s (repeat (count s) e ) )))", "user": "585030cbe4b0b7285a6f4e78"}, {"problem": 40, "code": "#(into [] ((comp reverse rest reverse flatten) (map (fn [x] (list x %1)) %2)))", "user": "584f096ae4b0b7285a6f4e5c"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "583dacc2e4b089d5ab817d9f"}, {"problem": 40, "code": "#(reverse  \n  (reduce \n   (fn [coll item] \n     (if (empty? coll) \n       (conj coll item ) \n       (conj  (conj coll %1) item ))) \n   '()\n   %2))", "user": "5832be57e4b089d5ab817c86"}, {"problem": 40, "code": "(fn [x y] (butlast (interleave y (repeat (count y) x))) )", "user": "58524875e4b0b7285a6f4ead"}, {"problem": 40, "code": "(fn [target coll]\n  (vec (butlast (mapcat #(list % target) coll))))", "user": "563f4c47e4b08d4f616f5ed2"}, {"problem": 40, "code": "(fn [i col] (butlast (flatten (map #(list  % i) col))))", "user": "5766fbb7e4b0a07e8fc180b6"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "56f9b953e4b07572ad1a88b9"}, {"problem": 40, "code": "(fn [v coll]\n  (loop [[head & tail] coll\n         interposed-seq []]\n    (if (empty? tail)\n      (conj interposed-seq head)\n      (recur tail\n             (conj (conj interposed-seq head) v))\n      )\n    )\n  )", "user": "58562083e4b0f14aab7c86eb"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "566b7a77e4b0a866af6896af"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "585a19a4e4b0f14aab7c8746"}, {"problem": 40, "code": "(fn [k coll]\n        (loop [h (second coll) t (drop 2 coll) res [(first coll)]]\n            (if (empty? t)\n                (reverse (cons h (cons k res)))\n                (recur (first t) (rest t) (cons h (cons k res))))))", "user": "58354124e4b089d5ab817cd6"}, {"problem": 40, "code": "(comp drop-last (fn [x l] \n   (reduce #(conj %1 %2 x) [] l)))", "user": "56b1b59be4b0982f16b37df2"}, {"problem": 40, "code": "#(drop-last (mapcat vector %2 (repeat %1)))", "user": "585c5b21e4b0f14aab7c8786"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "584278e1e4b089d5ab817e19"}, {"problem": 40, "code": "(fn [x y] \n      (drop-last (flatten (map #(list % x) y))) \n      )", "user": "50b25edae4b03ea88043355e"}, {"problem": 40, "code": "#(drop-last (reduce concat (map (fn [x] (list x %1)) %2)))", "user": "585e2e77e4b0f14aab7c87ac"}, {"problem": 40, "code": "#(butlast (interleave %2 (take (count %2) (repeat %1))))", "user": "585d40afe4b0f14aab7c8798"}, {"problem": 40, "code": "(fn my-fn [v lst]\n  (if (= 1 (count lst))\n    lst\n    (concat [(first lst) v] (my-fn v (rest lst)))))", "user": "55e357dae4b050e68259b442"}, {"problem": 40, "code": "#((comp butlast interleave) %2 (repeat %1))", "user": "57d0e185e4b0bd073c202360"}, {"problem": 40, "code": "(fn [x y](\n          loop [cnt y res []] \n          (if(empty? cnt) (drop-last res)\n            (recur (rest cnt) (conj res (first cnt) x)))))", "user": "584f5133e4b0b7285a6f4e61"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "57c33eeae4b05aa3c4741cbc"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5853582fe4b0b7285a6f4ec5"}, {"problem": 40, "code": "(fn [i l] \n  (cons (first l)  \n        (apply concat \n               (map #(list i % ) (rest l)))))", "user": "58566b42e4b0f14aab7c86f4"}, {"problem": 40, "code": "#(drop-last (mapcat (fn [x] [x %1]) %2))", "user": "582a2d4fe4b051871117bf55"}, {"problem": 40, "code": "(fn [separator sequence]\n  ((fn my-join [result separator rest1]\n     (println \"count: \" (count rest1))\n     (if (empty? rest1)\n       (reverse result)\n       (if (= (count rest1) 1)\n         (my-join (conj result (first rest1)) \n                  separator \n                  (rest rest1))\n         (my-join (conj result (first rest1) separator) \n                  separator \n                  (rest rest1)))))\n   '() separator sequence))", "user": "58637f03e4b0f14aab7c881e"}, {"problem": 40, "code": "(fn my-interpose [element coll]\n  (drop-last (mapcat #(list % element) coll)))", "user": "5852801ee4b0b7285a6f4eb1"}, {"problem": 40, "code": "(fn\n  [separator s]\n  (mapcat\n    #(into []\n           (if (= % (last s))\n             (list %)\n             (list % separator)))\n    s))", "user": "58543a59e4b07779d46863f5"}, {"problem": 40, "code": "#(rest (take (-> %2 (count) (* 2))\n       (interleave (repeat %1) %2)))", "user": "532df9c5e4b019098a6f8b42"}, {"problem": 40, "code": "(fn interpose' [c [x & xs]]  (if xs (concat [x c] (interpose' c xs)) [x]))", "user": "585e7c60e4b0f14aab7c87b3"}, {"problem": 40, "code": "(fn [x coll] (rest (reduce concat (map #(vector x %) coll))))", "user": "585481e0e4b07779d46863fe"}, {"problem": 40, "code": "(fn [x col] (reverse (rest (reverse (mapcat #(list % x) col)))))", "user": "51456858e4b0e88796073408"}, {"problem": 40, "code": "(fn my-interpose [sep coll]\n  (loop [res [(first coll)] rs (rest coll)]\n    (if (empty? rs)\n      res\n      (recur (conj res sep (first rs)) (rest rs))\n    )\n  )\n)", "user": "569e3175e4b0542e1f8d1484"}, {"problem": 40, "code": "#((comp rest interleave) (repeat %1) %2)", "user": "5650082fe4b0284900eef6b7"}, {"problem": 40, "code": "(fn [d x] (drop-last (flatten (map #(list %1 d) x))))", "user": "5866b999e4b0f14aab7c886b"}, {"problem": 40, "code": "(fn [v c] (butlast (mapcat #(list %1 v) c)))", "user": "586615e6e4b0f14aab7c8858"}, {"problem": 40, "code": "(fn interpose-sequence\n  [item coll]\n  (->> (repeat (count coll) item)\n       (interleave coll)\n       butlast))", "user": "547bf82de4b0c51c1f4d72e1"}, {"problem": 40, "code": "(fn [a b]\n   (rest\n     (reduce #(conj (conj %1 a) %2)\n             [] \n             b)))", "user": "58455b05e4b089d5ab817e65"}, {"problem": 40, "code": "(fn [s a] (rest (flatten (map #(seq [s %]) a))))", "user": "58617a1fe4b0f14aab7c87f0"}, {"problem": 40, "code": "(fn my-interpose [separator xs]\n  (let [tail (mapcat #(list separator %) (rest xs))\n        head (first xs) ]\n    (conj tail head )))", "user": "57ea4569e4b0bfb2137f5b46"}, {"problem": 40, "code": "(fn [separator coll] \n  (drop-last (mapcat #(conj [] % separator) coll))\n)", "user": "58694f69e4b0f14aab7c889f"}, {"problem": 40, "code": "(fn [sep coll] (rest (flatten (map #(vector sep %) coll))))", "user": "586a657de4b0f14aab7c88bd"}, {"problem": 40, "code": "(fn [s coll]\n  (drop-last (reduce #(conj %1 %2 s) [] coll)))", "user": "5863eda2e4b0f14aab7c8836"}, {"problem": 40, "code": "(fn [x coll]\n  (butlast (mapcat #(list % x) coll))\n  )", "user": "52dc7344e4b09f7907dd13cf"}, {"problem": 40, "code": "(fn [v l]\n    (concat (mapcat #(identity [% v]) (butlast l)) [(last l)]))", "user": "586b6753e4b01531a375e956"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "586b6f13e4b01531a375e959"}, {"problem": 40, "code": "(fn [sep coll] (rest (interleave (repeat sep) coll)))", "user": "586bc870e4b01531a375e964"}, {"problem": 40, "code": "#(butlast (mapcat (fn [x] [x %1]) %2))", "user": "4e11b92a535d04ed9115e7cb"}, {"problem": 40, "code": "(fn [inter seqn] (reduce (fn [a b] (conj a inter b)) [(first seqn)] (rest seqn)) )", "user": "585bcd51e4b0f14aab7c8771"}, {"problem": 40, "code": "#(butlast (mapcat vector %2 (repeat %1)))", "user": "586d4d63e4b01531a375e98e"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat (count %2) %1) %2))", "user": "5840c068e4b089d5ab817df8"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5857d27de4b0f14aab7c8710"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "5854d1c0e4b07779d468640a"}, {"problem": 40, "code": "#(rest (mapcat list (repeat %1) %2))", "user": "5458c74de4b01be26fd74623"}, {"problem": 40, "code": "#(vec (butlast ((fn i [b a]\n    (let [a (seq a)]\n      (when (and a b)\n        (cons (first a) (cons b\n                          (i b (rest a))))))) %1 %2)))", "user": "586e47dee4b01531a375e9a9"}, {"problem": 40, "code": "(fn i [d [x & xs]](lazy-seq (cons x (when (seq xs) (cons d (i d xs))))))", "user": "55597b84e4b0deb715856e36"}, {"problem": 40, "code": "#(rest (mapcat list (repeat %) %2))", "user": "586b6a0ae4b01531a375e957"}, {"problem": 40, "code": "(fn f [s l]\n  (cond\n   (or (empty? l) (empty? (rest l))) l\n   :else (cons (first l) (cons s (f s (rest l))))))", "user": "58731176e4b01531a375ea2a"}, {"problem": 40, "code": "(fn [sep col] (rest (interleave (repeat (count col) sep) col)))", "user": "584d8724e4b0b7285a6f4e3e"}, {"problem": 40, "code": "(fn f [x sq] (if (< (count sq) 2) sq\n               (cons (first sq)\n                     (cons x\n                           (f x (next sq))))))", "user": "54d95ce8e4b024c67c0cf74a"}, {"problem": 40, "code": "(fn[x coll](loop [mid x c coll re []] (if c \n                                       (recur mid (next c) (conj re (first c) mid))\n                                       (subvec re 0 (dec (count re))))))", "user": "54bca097e4b0ed20f4ff6ed4"}, {"problem": 40, "code": "(fn [x coll]\n  (concat (flatten (map #(vector %1 x) (butlast coll))) (vector (last coll))))", "user": "587294f0e4b01531a375ea1e"}, {"problem": 40, "code": "(fn [x l] (rest (interleave (repeat x) l)))", "user": "4f213e2ee4b0d66497709fcf"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "57fbd83ee4b0d3187e90097b"}, {"problem": 40, "code": "(fn [sep xs]\n  (rest\n  (reduce\n   #(conj %1 sep %2)\n   []\n   xs)))", "user": "56403765e4b08d4f616f5edc"}, {"problem": 40, "code": "#(butlast (mapcat vector %2 (repeat (count %2) %1)))", "user": "5872935ce4b01531a375ea1d"}, {"problem": 40, "code": "(fn [a b] (vec (apply conj [(first b)] (interleave (repeat a) (rest b)))))", "user": "56049986e4b0c80df0ca2662"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "54012b48e4b0de5c41848620"}, {"problem": 40, "code": "(fn [sep coll]\n  (butlast (interleave coll (repeat (count coll) sep)))\n  )", "user": "5727031ee4b0c5bde472c12f"}, {"problem": 40, "code": "#(loop [coll %2\n        accum []]\n   (if (seq (rest coll))\n     (recur (rest coll) (concat accum [(first coll) %1]))\n     (concat accum [(first coll)])))", "user": "58740c18e4b01531a375ea49"}, {"problem": 40, "code": "(fn [x ys] (reduce\n          (fn [rs y]\n            (if (seq rs)\n              (flatten [rs x y])\n              [y]\n              ))\n          []\n          ys))", "user": "53b42472e4b047364c0444b2"}, {"problem": 40, "code": "(fn join-with [value seq] (flatten (map #(if (not (= % (last seq)))(list % value) %) seq)))", "user": "584e9acae4b0b7285a6f4e54"}, {"problem": 40, "code": "(fn [v s] (butlast (interleave s (repeat v))))", "user": "5879d577e4b01531a375ead8"}, {"problem": 40, "code": "(fn [v xs] (butlast (mapcat #(list % v) xs)))", "user": "563c7f98e4b0bfe05bf11836"}, {"problem": 40, "code": "(fn f\n  ([v coll] (f v coll false []))\n  ([v coll b coll2]\n   (if (empty? coll)\n     coll2\n     (if (= true b)\n       (f v coll (not b) (conj coll2 v))\n       (f v (rest coll) (not b) (conj coll2 (first coll)))))))", "user": "5875daaee4b01531a375ea74"}, {"problem": 40, "code": "(fn [x xs]\n  (->> (repeat x)\n       (interleave xs)\n       (drop-last 1)))", "user": "4e7be091535db169f9c796ba"}, {"problem": 40, "code": "#(let [x (- (count %2) 1)]\n      (loop [it 0 sq %2 out []]\n        (if (= it x)\n          (conj out (last sq))\n          (recur (inc it) sq (conj (conj out (nth sq it)) %1 )))))", "user": "58791cfee4b01531a375eac7"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "52506e4ce4b0541d1855b82d"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat (count %2) %1)))", "user": "55b4fa46e4b01b9910ae2983"}, {"problem": 40, "code": "#(drop 1 (mapcat (partial list %1) %2))", "user": "586b6d51e4b01531a375e958"}, {"problem": 40, "code": "(fn [x y] (loop [joiner x\n                 lst y\n                 res []]\n            (cond\n              (empty? lst) res\n              (= (count lst) 1) (recur joiner (next lst) (conj res (first lst)))\n              :else (recur joiner (next lst) (conj (conj res (first lst)) joiner))\n            )           \n          ) \n)", "user": "5877e40ee4b01531a375eaab"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5871175de4b01531a375e9f7"}, {"problem": 40, "code": "(fn [s c] (pop (reduce #(conj (conj %1 %2) s)  [] c)))\n;(fn [s c] (into [] (drop-last (mapcat #(vector %1 s) c))))", "user": "50385746e4b0803468ea2c6d"}, {"problem": 40, "code": "(fn [separator coll]\n  (loop [acc (list)\n         [x & tail :as all] coll\n         is-need-separate false\n         ]\n    (cond (empty? all) (reverse acc)\n          is-need-separate (recur (cons separator acc) all false)\n          :else (recur (cons x acc) tail true))\n    ))", "user": "587100d6e4b01531a375e9f0"}, {"problem": 40, "code": "(fn [x y]\n  (reduce #(concat %1 [x %2]) [(first y)] (rest y)))", "user": "57ea2c91e4b0bfb2137f5b42"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %) %2))", "user": "5865c8f0e4b0f14aab7c884e"}, {"problem": 40, "code": "(fn [del coll](butlast (flatten (map #(vector % del ) coll))))", "user": "5856cdd6e4b0f14aab7c86fa"}, {"problem": 40, "code": "(fn [sep coll]\n  ((comp reverse rest reverse interleave) coll (repeat (count coll) sep)))", "user": "58800fd4e4b0f1effa3b7606"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5880e38fe4b0f1effa3b7625"}, {"problem": 40, "code": "(fn [d, s] (vec (drop-last (mapcat (fn[x] [x d]) s))))", "user": "57c7258ee4b05aa3c4741cfe"}, {"problem": 40, "code": "(fn [item lst] (rest (mapcat #(list item %) lst)))", "user": "587ee260e4b052da650a6353"}, {"problem": 40, "code": "#(rest(interleave (repeat (count %2) %1) %2))", "user": "5881335ce4b0f1effa3b762e"}, {"problem": 40, "code": "(fn [n l]\n  (take (- (* 2 (count l)) 1) (reduce (fn [ret curr]\n            (conj ret curr n))\n          []\n          l)))", "user": "5883584ae4b0f1effa3b7674"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "58840023e4b0f1effa3b768b"}, {"problem": 40, "code": "#(rest (interleave (repeat (count %2) %1) %2))", "user": "58467633e4b089d5ab817e90"}, {"problem": 40, "code": "(fn [a col]\n  (drop-last (into []\n                   (flatten (map #(into [] [% a]) col)))))", "user": "58852909e4b0f1effa3b76af"}, {"problem": 40, "code": "(fn [x y] (reverse (rest (reverse (flatten(#(for [a %2] (list a %1)) x y))))))", "user": "5886e8bde4b0f1effa3b76ea"}, {"problem": 40, "code": "#(pop (vec (mapcat (fn [x] [x %1]) %2)))", "user": "587f8393e4b0f1effa3b75f2"}, {"problem": 40, "code": "(fn [sep l]\n  (drop-last (interleave l (repeat sep))))", "user": "58844d43e4b0f1effa3b7696"}, {"problem": 40, "code": "(fn intr [sep in] \n  (loop [s (butlast in) o []]\n   (if (empty? s)\n     (conj o (last in))\n     (recur \n      (rest s) \n      (conj o (first s) sep))\n)))", "user": "587c59d1e4b01531a375eb17"}, {"problem": 40, "code": "(fn my-interpose [val col]\n  (if (next col)\n    (cons (first col) (cons val (my-interpose val (next col))))\n    (list (first col))))", "user": "5887518ae4b0f1effa3b76f5"}, {"problem": 40, "code": "(fn [thing coll]\n  (butlast (interleave coll (repeat (count coll) thing))))", "user": "4fb85651e4b081705acca2d7"}, {"problem": 40, "code": "#(butlast (flatten ((fn [a, b] (map (fn [e] (vector e a)) b)) %1 %2)))", "user": "5876c0c5e4b01531a375ea8e"}, {"problem": 40, "code": "(fn [d v] \n  (reduce (fn [a x] (conj (conj a d) x)) [(first v)] (rest v)))", "user": "5884e807e4b0f1effa3b76a6"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %)))", "user": "4fe49706e4b0e8f79898feb7"}, {"problem": 40, "code": "(fn interpose2\n  ([separator s] (interpose2 separator s '()))\n  ([separator s result]\n   (if (= (next s) nil)\n     (reverse (conj result (first s)))\n     (recur separator (next s) (conj (conj result (first s)) separator)))))", "user": "5888b75fe4b0f1effa3b771b"}, {"problem": 40, "code": "(fn [delimiter seq] (reduce (fn [acc item] (concat acc [delimiter item])) [(first seq)] (rest seq)))", "user": "5885bea8e4b0f1effa3b76bf"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "585dbe41e4b0f14aab7c879f"}, {"problem": 40, "code": "(fn [v c] (drop-last (mapcat #(vector % v) c)))", "user": "578d459ee4b0ebec4cfb7567"}, {"problem": 40, "code": "(fn [x coll]\n  (rest (interleave (repeat (count coll) x) coll)))", "user": "585a7cb2e4b0f14aab7c874e"}, {"problem": 40, "code": "(fn [joiner values]\n   (drop-last (flatten (map #(list % joiner) values))))", "user": "588e8133e4b00487982d5191"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "588e6a17e4b00487982d518c"}, {"problem": 40, "code": "(fn interpose* [x xs]\n  (let [f (first xs)\n        r (rest xs)]\n    (cons f (interleave (repeat (count r) x) r))))", "user": "58896e5ce4b0f1effa3b773e"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "576e607ae4b0979f89651579"}, {"problem": 40, "code": "(fn [delim x]\n  (loop [cx x, accum []]\n    (if (empty? (rest cx))\n      (conj accum (first cx))\n      (recur (rest cx) (conj (conj accum (first cx)) delim))\n      )\n    )\n  )", "user": "588fb3a7e4b00487982d51b9"}, {"problem": 40, "code": "(fn [s ls] (butlast (mapcat #(vector % s) ls)))", "user": "54dbc6ebe4b024c67c0cf773"}, {"problem": 40, "code": "(fn ipose [sep items]\n  (loop [is items lst []]\n    (if (= (count is) 1)\n      (conj lst (first is))\n      (recur (rest is) (conj lst (first is) sep)))))", "user": "580b79e4e4b0a837a8b30d4a"}, {"problem": 40, "code": "(fn [x ys] (butlast (flatten (map #(list % x) ys))))", "user": "57de5f0ee4b0bd073c202450"}, {"problem": 40, "code": "(fn [x ys]\n  (butlast (apply concat (map #(list % x) ys))\n  ))", "user": "5885e90de4b0f1effa3b76c5"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "57de9169e4b0bd073c202454"}, {"problem": 40, "code": "(fn my-interpose [e coll]\n   (butlast (apply concat (map (fn [i] [i e]) coll))))", "user": "5889dc13e4b0f1effa3b774a"}, {"problem": 40, "code": "#(cons (first %2) (mapcat (fn [x] [%1 x]) (rest %2)))", "user": "58949f8de4b00487982d525e"}, {"problem": 40, "code": "(fn my-interpose [separator collection]\n  (rest (reduce #(into %1 [separator %2]) \n                [] \n                collection)))", "user": "562eeba2e4b0ab312c17ebc1"}, {"problem": 40, "code": "#(loop [s (rest %2), r [(first %2)]]\n   (if (seq s)\n     (recur (rest s) (conj r %1 (first s)))\n     r))", "user": "58923efce4b00487982d521c"}, {"problem": 40, "code": "(fn [delim coll]\n  (conj (reduce into [] (map (fn [item] (conj [item] delim)) (subvec coll 0 (- (count coll) 1)))) (last coll)))", "user": "588f500ae4b00487982d51a4"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "58954c47e4b00487982d527e"}, {"problem": 40, "code": "(fn [c xs] (rest (mapcat (partial list c) xs)))", "user": "552b6ddbe4b0ffed3738f965"}, {"problem": 40, "code": "(fn [delim xs] (drop-last (interleave xs (repeat delim))))", "user": "589037b4e4b00487982d51d0"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))\n\n;(fn trns \n;  ([s xs] \n;   (trns '() s xs))\n;  ([res s xs] \n;   (if (empty? xs) \n;     (butlast (reverse res)) \n;     (trns (cons s (cons (first xs) res)) s (rest xs)))))", "user": "55357ab5e4b09218d5f44faf"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5862a8a9e4b0f14aab7c880f"}, {"problem": 40, "code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "user": "587cbebbe4b01531a375eb24"}, {"problem": 40, "code": "(fn [c lst]\n  (next (mapcat list\n                (map (fn [x] c) lst)\n                lst)))", "user": "5895477fe4b00487982d527c"}, {"problem": 40, "code": "(fn ipose [x xs]\n  (if (<= (count xs) 1) xs\n    (let [h (first xs) t (rest xs)]\n      (conj (ipose x t) x h))))", "user": "5888f271e4b0f1effa3b7726"}, {"problem": 40, "code": "(fn [i s] (butlast (interleave s (repeat (count s) i))))", "user": "522724bde4b04e78ff2e19aa"}, {"problem": 40, "code": "(fn [val coll]\n    (loop [result [] coll coll]\n        (if (empty? coll)\n            result\n            (if (= (next coll) nil)\n                (recur (conj result (first coll)) (rest coll))\n                (recur (conj result (first coll) val) (rest coll))))))", "user": "5896735fe4b00487982d529d"}, {"problem": 40, "code": "(fn my-interpose\n    [item s]\n    (loop [s s, res []]\n        (if (seq s)\n            (if (>= (count s) 2)\n                (recur (rest s) (conj (conj res (first s)) item))\n                (conj res (last s)))\n            res)))", "user": "587bead1e4b01531a375eb0d"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5884f77ee4b0f1effa3b76a9"}, {"problem": 40, "code": "(fn [v col] (butlast (mapcat #(vector % v) col)))", "user": "5892a5fde4b00487982d5228"}, {"problem": 40, "code": "(fn [value seq]\n    (butlast (mapcat #(vector % value)  seq)))", "user": "5894b298e4b00487982d5261"}, {"problem": 40, "code": "(fn [c s] (drop-last (mapcat #(list %1 %2) s (repeat c))))", "user": "58983e3fe4b00487982d52ce"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %1)))", "user": "589a8dace4b00487982d5311"}, {"problem": 40, "code": "(fn [v s]\n  (drop-last (mapcat #(vector % v) s)))", "user": "585a7b05e4b0f14aab7c874d"}, {"problem": 40, "code": "(fn [c s]\n  (reverse\n   (conj\n    (reverse (interleave s (repeat (dec (count s)) c)))\n    (last s))))", "user": "5885cc62e4b0f1effa3b76c1"}, {"problem": 40, "code": "#(drop-last (mapcat list %2 (repeat %)))", "user": "5896ade8e4b00487982d52a9"}, {"problem": 40, "code": "(fn [a s] (butlast (mapcat #(vector % a) s)))", "user": "5891bddce4b00487982d5201"}, {"problem": 40, "code": "(fn [sep coll] (reduce #(if (not (empty? %1)) (conj %1 sep %2) (conj %1 %2)) [] coll))", "user": "58987ee9e4b00487982d52d2"}, {"problem": 40, "code": "(fn [value coll]\n  (let [last-elem (last coll)\n        ; Map to every element except the last one\n        new-coll (vec (mapcat #(list %1 value) (take (- (count coll) 1) coll)))]\n    ; Insert last element\n    (conj new-coll last-elem)))", "user": "589cb617e4b00487982d536a"}, {"problem": 40, "code": "(fn [x y]\n  (drop-last (interleave y (cycle [x]))))", "user": "5897dda4e4b00487982d52c8"}, {"problem": 40, "code": "#((comp pop vec) (interleave %2 (take (count %2) (repeat %1))))", "user": "589e704ae4b02bd94d917e5e"}, {"problem": 40, "code": "#(drop-last (mapcat (fn [a] (list a %1)) %2))", "user": "589f4387e4b02bd94d917e7b"}, {"problem": 40, "code": "#(rest(mapcat vector (repeat %)%2))", "user": "53ada652e4b047364c04446d"}, {"problem": 40, "code": "(fn [e xs]\n  (butlast (mapcat #(vector % e) xs)))", "user": "589714cbe4b00487982d52b1"}, {"problem": 40, "code": "(fn [v s]\n  (reduce \n   (fn ([interpd item]\n     (conj interpd v item))\n     ([] []))\n   [(first s)]\n   (rest s)))", "user": "57f904c5e4b0d3187e900936"}, {"problem": 40, "code": "(fn [v coll]\n  (butlast (mapcat #(vector % v) coll)))", "user": "5799c6dee4b05b1deef9adca"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "589dd2cce4b02bd94d917e48"}, {"problem": 40, "code": "(fn [i c] (butlast (mapcat #(list % i) c)))", "user": "544673c0e4b032a45b8693b0"}, {"problem": 40, "code": "(fn[x y] (reverse (rest (reverse (interleave y (repeat x))))))", "user": "57887de2e4b0ebec4cfb751c"}, {"problem": 40, "code": "(comp drop-last\n      (fn my-interspose\n        [a coll]\n        (when-let [s (seq coll)]\n          (lazy-seq (cons (first s)\n                          (cons a\n                                (my-interspose a (rest s))))))))", "user": "5899c54de4b00487982d52fa"}, {"problem": 40, "code": "(fn my-interpose [n c]\n\t(->> [c (repeat n)]\n         (apply mapcat vector)\n         (butlast)))", "user": "58988cbbe4b00487982d52d7"}, {"problem": 40, "code": "(fn [i x] (butlast (mapcat #(vector % i) x)))", "user": "589ec900e4b02bd94d917e65"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "58a2b57fe4b02bd94d917ede"}, {"problem": 40, "code": "(fn [item col] (let [recursor (fn recurs [out in] (if (empty? in) out (recurs (concat out (list item (first in))) (rest in))))] (recursor (list (first col)) (rest col))))", "user": "58950f29e4b00487982d5270"}, {"problem": 40, "code": "(fn [sep xs]\n  (loop [[hd & tl :as xs] xs\n         acc '()]\n    (cond (empty? xs) (reverse acc)\n          (empty? tl) (recur tl (conj acc hd))\n          :else (recur tl (conj acc hd sep)))))", "user": "58a47197e4b01a0c0b2328f9"}, {"problem": 40, "code": "(fn my-interp [x s]\n  (if (< (count s) 2)\n    s\n    (concat [(first s) x] (my-interp x (rest s)))))", "user": "58a0fc33e4b02bd94d917ea3"}, {"problem": 40, "code": "#(loop [sep %1 items %2 acc []]\n   (if (= 0 (count items)) acc\n     (recur sep (rest items)\n            (if (> (count acc) 0)\n              (conj acc sep (first items))\n              (conj acc (first items))))))", "user": "58a31ecee4b02bd94d917ee7"}, {"problem": 40, "code": "(fn [x s] (drop-last (vec (interleave s (vec (repeat (count s) x))))))", "user": "5078dedae4b08327cd804a5d"}, {"problem": 40, "code": "(fn self [sep a-seq]\n  (->\n   (map #(list %1 sep) a-seq)\n   (flatten)\n   (drop-last)))", "user": "58a5a099e4b01a0c0b232918"}, {"problem": 40, "code": "(fn\n    [sep coll]\n    (let [coll-elems (count coll)\n          separ-vect (apply concat (repeat coll-elems [sep]))]\n      (rest (mapcat vector separ-vect coll)))\n    )", "user": "58a413b5e4b02bd94d917f07"}, {"problem": 40, "code": "(fn foo\n  [a coll] (if (= 1 (count coll)) (list (first coll)) (cons (first coll) (cons a (foo a (rest coll))))))", "user": "588ce4aee4b05c141a2560a1"}, {"problem": 40, "code": "(fn ap-interpose [sep a-seq]\n  (butlast (mapcat #(list % sep) a-seq)))", "user": "580d2788e4b0849f6811b730"}, {"problem": 40, "code": "#(take (dec (* 2 (count %2))) (interleave %2 (repeat %1)))", "user": "5880d686e4b0f1effa3b7623"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "589f0087e4b02bd94d917e6d"}, {"problem": 40, "code": "#(butlast (interleave %2 (cycle [%1])))", "user": "56391b7ce4b0bfe05bf117ef"}, {"problem": 40, "code": "(fn [d v1] (loop [x 0 a []]\n                                 (let [y (count v1)]\n                                   (if (< x y)\n                                     (recur (inc x) (concat a\n                                                            (vector\n                                                             (nth v1 x)\n                                                             d))) (into [] (drop-last a))\n                                     ))))", "user": "58a9e872e4b01a0c0b232973"}, {"problem": 40, "code": "#(butlast (mapcat list  %2 (take (count %2) (repeat %1))))", "user": "5760682ee4b08062f99a4e94"}, {"problem": 40, "code": "(fn my-interpose [n [x & xs]]\n  (if (empty? xs)\n    (list x)\n    (concat (list x n) (my-interpose n xs))))", "user": "58a953dae4b01a0c0b232968"}, {"problem": 40, "code": "#(take (dec (* 2 (count %2))) (mapcat list %2 (repeat %1)))", "user": "507eed82e4b06ce648bcdbfe"}, {"problem": 40, "code": "(fn [d col] (drop-last (interleave col (cycle (list d)))) )", "user": "58951903e4b00487982d5274"}, {"problem": 40, "code": "(fn [a b] (drop 1 (reduce #(conj %1 a %2) [] b)))", "user": "58ad4349e4b0ebc645576c9d"}, {"problem": 40, "code": "(fn [x ys]\n  (loop [[first & rest] ys\n         ret []]\n    (if (empty? rest)\n      (conj ret first)\n      (recur rest (conj ret first x)))))", "user": "58a216e8e4b02bd94d917ed1"}, {"problem": 40, "code": "(fn [c arr]\n    (butlast\n          (mapcat list arr (repeat c))))", "user": "58b06b7ce4b0ebc645576cdc"}, {"problem": 40, "code": "(fn \n  [n seqn]\n  (butlast\n   (flatten\n   ((fn \n     [seqn]\n     (for [x seqn] [x n]))\n    seqn))))", "user": "5854580ce4b07779d46863f9"}, {"problem": 40, "code": "( fn [x y] (drop-last (flatten(map vector y (repeat (count y) x)  ) )))", "user": "58ac513fe4b0005cfeb1a746"}, {"problem": 40, "code": "(fn [sep l] (butlast (mapcat list l (repeat (count l) sep))))", "user": "58791973e4b01531a375eac5"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "588e4e05e4b00487982d5188"}, {"problem": 40, "code": "(fn impose\n  ([x y z] (cond (empty? y)  (reverse z)\n                 (empty? (rest y)) (recur x (rest y) (conj z (first y)))\n                :else (recur x (rest y) (conj (conj z (first y)) x))))\n  ([x y]\n   (impose x y '())))", "user": "58a3ba31e4b02bd94d917eff"}, {"problem": 40, "code": "(fn [i lst] (conj (vec (mapcat #(vector % i) (drop-last lst))) (last lst)))", "user": "58b51e05e4b0ebc645576d4c"}, {"problem": 40, "code": "#(rest (mapcat (partial list %1) %2))", "user": "58a822e4e4b01a0c0b232950"}, {"problem": 40, "code": "(fn my-interpose [in s] (drop-last(loop [i 0 result []]\n                                     (if (>= i (count s))\n                                       result\n                                       (recur (inc i) (conj(conj result (nth s i)) in))))))", "user": "58b2f085e4b0ebc645576d15"}, {"problem": 40, "code": "(fn my-interpose*\n  [v xs]\n  (when (<= 1 (count xs))\n    xs)\n  (loop [xs xs\n         res []]\n    (if\n        (= 1 (count xs)) (conj res (first xs))\n        (recur (rest xs) (conj res (first xs) v)))))", "user": "4eb47bb1535d7eef30807362"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "58637221e4b0f14aab7c881d"}, {"problem": 40, "code": "(fn [x ys]\n    (loop [ys ys zs []]\n      (if (= (count ys) 1)\n        (conj zs (first ys))\n        (recur (rest ys) (conj zs (first ys) x)\n               ))))", "user": "58b81490e4b0ebc645576d8c"}, {"problem": 40, "code": "(fn [x c] (drop-last (interleave c (repeat (count c) x))))", "user": "58a0fd0be4b02bd94d917ea4"}, {"problem": 40, "code": "(fn [x, y] (drop 1 (mapcat vector (repeat (count y) x) y)))", "user": "58b4898de4b0ebc645576d3d"}, {"problem": 40, "code": "(fn teste [sepp seqq] (rest (mapcat list (take (count seqq) (repeat sepp)) seqq)))", "user": "58b8a3eae4b0888cdc949cb7"}, {"problem": 40, "code": "#(drop-last\n  (mapcat (fn [m n] [m n]) %2 (repeat %1)))", "user": "5881d1c2e4b0f1effa3b7644"}, {"problem": 40, "code": "(fn [sep s]\n  (conj (mapcat #(vector sep %) (rest s)) (first s)))", "user": "58ba8e7ce4b0888cdc949ce8"}, {"problem": 40, "code": "(fn [s coll]\n    (loop [result []\n           xs coll]\n          (if (empty? xs)\n              (drop-last result)\n              (recur (conj result (first xs) s) (rest xs)))))", "user": "56e11125e4b03a7c14b85a1f"}, {"problem": 40, "code": "(fn [x coll]\n  (reduce (fn [a b] (conj a x b)) [(first coll)] (rest coll)))", "user": "58bb218be4b0888cdc949cf4"}, {"problem": 40, "code": "(fn [elem & rest-coll]\n    (next (flatten (apply map (fn [& elem] elem) (repeat elem) rest-coll))))", "user": "58bbcbc8e4b0888cdc949d00"}, {"problem": 40, "code": "(fn putinseq [a seqx]\n  (loop [x seqx\n         ans (vector)]\n    (if (empty? x)\n      ans\n      (if (empty? (rest x))\n      (recur (rest x) (conj ans (first x)))\n      (recur (rest x) (conj ans (first x) a))\n        )\n      )\n    )\n  )", "user": "57cc14aae4b05aa3c4741d4a"}, {"problem": 40, "code": "#(take (- (* (count %2) 2) 1) (flatten (map vector %2 (repeat (count %2) %1))))", "user": "58a44a14e4b01a0c0b2328f2"}, {"problem": 40, "code": "(fn my-interpose [delimiter [x & more]]\n  (lazy-seq\n   (when x\n     (if more\n       (cons x (cons delimiter (my-interpose delimiter more)))\n       (cons x nil)))))", "user": "58884cc6e4b0f1effa3b770e"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %)))", "user": "5893c64ce4b00487982d524b"}, {"problem": 40, "code": "(fn [value seqA]\n\t(loop [a seqA res []]\n\t\t(if (= 1 (count a))\n\t\t\t(concat res [(first a)])\n\t\t\t(recur (rest a) (concat res [(first a)] [value]))\n\t\t\t)))", "user": "58b985e0e4b0888cdc949ccc"}, {"problem": 40, "code": "(fn my-interpose [separator col]\n  (butlast (interleave col (repeat separator))))", "user": "58c1b4f5e4b021aa9917ed01"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "58765038e4b01531a375ea7e"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "58ac14ebe4b0005cfeb1a740"}, {"problem": 40, "code": "(fn [v coll]\n  (rest (interleave (repeat v) coll)))", "user": "57762e67e4b0979f89651630"}, {"problem": 40, "code": "#(reverse (rest (reverse (flatten (map (fn [x] [x %1]) %2)))))", "user": "57ecc16fe4b0bfb2137f5b83"}, {"problem": 40, "code": "(fn doobie [x ys]\n  (if (= 1 (count ys))\n    ys\n    (conj (conj (doobie x (rest ys)) x) (first ys))))", "user": "58bfa57ae4b021aa9917ecd8"}, {"problem": 40, "code": "#(butlast (interleave %2 (cycle [%1])))", "user": "58c3af4de4b021aa9917ed1b"}, {"problem": 40, "code": "(fn [i s] (loop [s s res []] (if (seq s) (recur (rest s) (conj res (first s) i)) (if (seq res) (pop res) res))))", "user": "589771f9e4b00487982d52bd"}, {"problem": 40, "code": "(fn\n  [v s]\n  (drop-last (mapcat list s (repeat v))))", "user": "4fe899a6e4b07c9f6fd12c54"}, {"problem": 40, "code": "(fn [value coll]\n  (reduce #(conj %1 value %2) [(first coll)] (rest coll)))", "user": "589ac5a2e4b00487982d5318"}, {"problem": 40, "code": "(fn [n xs]\n  (drop-last (flatten (map (fn [x] (vector x n)) xs))))", "user": "58b989dbe4b0888cdc949ccd"}, {"problem": 40, "code": "(fn x [a b]\n  (if (= (count b) 1) b\n  (concat [(first b)] [a] (x a (rest b)))))", "user": "58b54852e4b0ebc645576d52"}, {"problem": 40, "code": "(fn [n values] (drop-last (mapcat (fn [v] (list v n)) values)))", "user": "57b35ecbe4b0fbc9809a277e"}, {"problem": 40, "code": "(fn\n  [x s]\n  (reverse (rest (reduce #(conj %1 %2 x) '() s))))", "user": "58976bfde4b00487982d52bc"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "58c04ca5e4b021aa9917ece6"}, {"problem": 40, "code": "(fn [seperator collection]\n  (drop-last \n   (mapcat #(conj [] % seperator) collection)))", "user": "568aa458e4b0dcc4269f4092"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "589c0475e4b00487982d5351"}, {"problem": 40, "code": "(fn [sep coll] (into [] (rest (interleave (repeat sep) coll))))", "user": "57b7de74e4b0fbc9809a27d4"}, {"problem": 40, "code": "(fn my-interpose [glue col]\n  (reduce #(into %1 [glue %2]) [(first col)] (rest col)))", "user": "58c5a08be4b021aa9917ed40"}, {"problem": 40, "code": "(fn [v xs] (drop-last (mapcat #(list % v) xs)))", "user": "58c2df0ae4b021aa9917ed17"}, {"problem": 40, "code": "(fn [sep l] (butlast (mapcat #(list % sep) l)))", "user": "58b86162e4b0ebc645576d97"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "58ca8a1de4b03c36ff7e5835"}, {"problem": 40, "code": "(fn [a b] (drop-last (apply concat (map (fn [x] (conj (vector x) a)) b))))", "user": "564a985be4b0284900eef65c"}, {"problem": 40, "code": "#(->> %1\n      (repeat (count %2))\n      (mapcat list %2)\n      butlast)", "user": "58b26da4e4b0ebc645576d0a"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "58b80ec1e4b0ebc645576d89"}, {"problem": 40, "code": "#(butlast (interleave %2\n                      (repeat (count %2)\n                              %1)))", "user": "585aad0be4b0f14aab7c8753"}, {"problem": 40, "code": "(fn [x y] (rest (mapcat #(vector x %) y)))", "user": "56a80d8fe4b07966d5a8a06a"}, {"problem": 40, "code": "#(rest\n  (loop [xs %2 rs []]\n    (if (empty? xs)\n      rs\n      (recur (rest xs) (conj rs %1 (first xs))))))", "user": "58cfbd7ae4b03c36ff7e58ba"}, {"problem": 40, "code": "(fn [sep sq]\n  (rest (flatten (for [x sq] [sep x]))))", "user": "58ca613de4b021aa9917edb7"}, {"problem": 40, "code": "(fn interp [s xs]\n  (if (or (empty? xs) (= 1 (count xs)))\n    xs\n    (cons (first xs) (cons s (interp s (rest xs))))))", "user": "58cf00c8e4b03c36ff7e58ac"}, {"problem": 40, "code": "(fn fpose [sp args]\n    (if (empty? args)\n        []\n        (if (= 1 (count args))\n            args\n            (cons (first args) (cons sp (fpose sp (rest args)))))))", "user": "53882352e4b0640c7a9a5898"}, {"problem": 40, "code": "#(drop-last (interleave %2 (iterate (fn [x] x) %1)))", "user": "58c66990e4b021aa9917ed53"}, {"problem": 40, "code": "#(rest (reverse (reduce (fn [xs x] (cons x (cons %1 xs)))\n                            ()\n                            %2)))", "user": "58c4b11ae4b021aa9917ed2c"}, {"problem": 40, "code": "(fn [sep, col]\n  (vec (drop-last (flatten (map #(conj (vector %) sep) col)))))", "user": "587a3babe4b01531a375eae2"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "58d3c3abe4b03c36ff7e5927"}, {"problem": 40, "code": "(fn [sep s] (rest (mapcat (fn [i] (list sep i)) s)))", "user": "58c5ad55e4b021aa9917ed42"}, {"problem": 40, "code": "(fn [inter coll]\n  (butlast (apply concat (map (fn [op]\n                       [op inter])\n                     coll))))", "user": "58809253e4b0f1effa3b7618"}, {"problem": 40, "code": "(fn inter [a lat]\n  (let [[x & xs] lat]\n    (if (empty? xs) (list x)\n        (cons x (cons a (inter a xs))))))", "user": "58d737cee4b03c36ff7e5982"}, {"problem": 40, "code": "(fn [separator items] (concat [(first items)] (mapcat #(conj [separator] %) (rest items))))", "user": "58d27bcae4b03c36ff7e58fe"}, {"problem": 40, "code": "#(concat (interleave %2 (repeat (dec(count %2)) %1)) [(last %2)])", "user": "58cd4949e4b03c36ff7e5886"}, {"problem": 40, "code": "(fn [n cll] (drop-last (interleave cll (repeat n))))", "user": "58969076e4b00487982d52a2"}, {"problem": 40, "code": "(fn [n sq]\n (take (dec (* (count sq) 2))\n       (flatten\n        (map list sq (repeat n)))))", "user": "58d4e73ce4b03c36ff7e594d"}, {"problem": 40, "code": "(fn [sep coll]\n  (rest\n    (mapcat list \n      (repeat sep) coll)))\n\n#_(fn [sep coll]\n  (rest\n    (interleave (repeat sep) coll) ))", "user": "58acce0ae4b0005cfeb1a754"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "55228c3ce4b0882d96d091a2"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5755e66ee4b02ea1147992cf"}, {"problem": 40, "code": "(fn [delimiter sequ]\n  \t(-> (into [] (interleave (butlast sequ) (repeat delimiter)))\n        (conj (last sequ))\n        )\n  \t)", "user": "5703a557e4b08d47c97781f4"}, {"problem": 40, "code": "(fn [value coll]\n  (rest\n    (let [interposers (repeat value)]\n      (interleave interposers coll))))", "user": "56326995e4b0bfe05bf117a3"}, {"problem": 40, "code": "(fn intr [delim col]\n  (drop-last (mapcat #(vector % delim) col)))", "user": "58dcf11ae4b0a4d5acaab6af"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %1)))", "user": "58d71ef5e4b03c36ff7e597f"}, {"problem": 40, "code": "(fn my-interpose [delimiter sequence]\n  (loop [seq sequence\n         accumulator []]\n    (if (empty? seq)\n      (butlast accumulator)\n      (recur (rest seq) (let [item (first seq)]\n                          (conj accumulator item delimiter))))))", "user": "58daae01e4b0a4d5acaab664"}, {"problem": 40, "code": "(fn interpose-alt [x coll]\n   (flatten (map #(concat `(~%) `(~(if (= % (last coll))\n                                 ()\n                                 x)))\n                coll)))", "user": "58dcb8cde4b0a4d5acaab6a7"}, {"problem": 40, "code": "(fn [y xs] (drop-last (mapcat #(list %1 y) xs)))", "user": "589c7c8ce4b00487982d5361"}, {"problem": 40, "code": "(fn [x s]\n  (butlast(reduce #(conj %1 %2 x) [] s)\n  )\n   )", "user": "58d28c70e4b03c36ff7e5901"}, {"problem": 40, "code": "(fn [sep col] (butlast (flatten (map list col (repeat sep)))))", "user": "58b1f51de4b0ebc645576d05"}, {"problem": 40, "code": "#(drop-last (vec (interleave %2 (iterate identity %1))))", "user": "58de563fe4b0a4d5acaab6e3"}, {"problem": 40, "code": "(fn interp\n  [x y]\n  (loop [i y\n         z []]\n    (if (empty? (rest i))\n      (concat z i)\n      (recur (rest i) (concat z [(first i) x])))))", "user": "58d4f44ee4b03c36ff7e594f"}, {"problem": 40, "code": "(fn [x, y] (pop (vec (interleave y (repeat x)))))", "user": "588906a9e4b0f1effa3b772a"}, {"problem": 40, "code": "(fn [x l] (rest(reduce #(conj %1 x %2) [] l)))", "user": "58dbfb24e4b0a4d5acaab690"}, {"problem": 40, "code": "#(take (- (* 2 (count %2)) 1)\n       (interleave %2 (repeat %1)))", "user": "58c93089e4b021aa9917ed9b"}, {"problem": 40, "code": "(fn [separator toSeparate] \n\t\t(butlast(\n\t\t\tmapcat #(vector % separator) toSeparate)))", "user": "58e51bc5e4b056aecfd47c86"}, {"problem": 40, "code": "#((comp rest mapcat) (partial vector %1) %2)", "user": "58e37946e4b005f69f193cae"}, {"problem": 40, "code": "(fn [value vect1]\n  (let [[a & more] vect1]\n   (loop [[b & more1] more, result [a]]\n     (let [result (conj result value b)]\n       (if (empty? more1)\n         result\n         (recur more1 result))))\n     )\n   )", "user": "58dd20dae4b0a4d5acaab6b2"}, {"problem": 40, "code": "(fn [item coll] (butlast (mapcat #(vector % item) coll)))", "user": "58e2e11ce4b005f69f193ca0"}, {"problem": 40, "code": "(fn joinWith [with list]\n    (if (= (count list) 1)\n        list\n        (concat [(first list) with] (joinWith with (rest list)))))", "user": "57168a0de4b07c98581c3afb"}, {"problem": 40, "code": "#(butlast (mapcat vector %2 (repeat %1)))", "user": "58cbdc3be4b03c36ff7e5856"}, {"problem": 40, "code": "#(drop 1 (mapcat list (repeat %1) %2))", "user": "58e66350e4b056aecfd47cb2"}, {"problem": 40, "code": "(fn \n  [sep, coll]\n  (drop-last (mapcat #(list %1 sep) coll)))", "user": "54fdb4b9e4b07d26eda61d3a"}, {"problem": 40, "code": "(fn [x y] (rest (interleave (repeat x) y)))", "user": "58e762d3e4b056aecfd47ccc"}, {"problem": 40, "code": "(fn [splitter coll]\n  (reduce (fn [acc cur]\n            (into acc [splitter cur]))\n          [(first coll)]\n          (rest coll)))", "user": "58e45a2ce4b056aecfd47c69"}, {"problem": 40, "code": "(fn interp [j, list]\n  (if\n    (= (count list) 1)\n    list\n    (conj (interp j (rest list)) j (first list))\n   )\n)", "user": "58e6e624e4b056aecfd47cc1"}, {"problem": 40, "code": "(fn [sep coll]\n      (loop [result [] remaining coll]\n        (println remaining)\n        (if (nil? remaining)\n          (vec (take (dec (count result)) result))\n          (recur (concat result (list (first remaining) sep)) (next remaining))\n        )\n      )\n    )", "user": "58d6caf5e4b03c36ff7e5975"}, {"problem": 40, "code": "#(vec (drop-last (mapcat (partial conj (list %1)) %2)))", "user": "58e7229fe4b056aecfd47cc4"}, {"problem": 40, "code": "(fn my-interpose [sep x]\n  (when (seq x)\n    (loop [[head & tail] x\n           result []]\n      (if (seq tail)\n        (recur tail (into result [head sep]))\n        (into result [head])))))", "user": "58e63b75e4b056aecfd47cac"}, {"problem": 40, "code": "(fn myInter [x y] (drop-last (interleave y (repeat (count y) x))))", "user": "58e5f995e4b056aecfd47ca5"}, {"problem": 40, "code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "user": "5823d3e6e4b051871117beb8"}, {"problem": 40, "code": "(fn [n s] (rest (flatten(map #(vector [n %]) s))))", "user": "58e5fbbae4b056aecfd47ca6"}, {"problem": 40, "code": "(fn [x y]\n (subvec (reduce (fn [newseqq z] (conj newseqq z x)) [] y) 0 (dec (* 2 (count y)))))", "user": "58e6a2c5e4b056aecfd47cba"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "58e58ae9e4b056aecfd47c9a"}, {"problem": 40, "code": "(fn [v ls]\n  (reduce #(concat %1 [v %2])\n          [(first ls)]\n          (rest ls)))", "user": "56ca2f25e4b0ea9b8538f716"}, {"problem": 40, "code": "(fn [n c]\n   (rest (interleave (repeat n) c)))", "user": "57d8a1dee4b0bd073c2023ee"}, {"problem": 40, "code": "(fn [in col] \n\t(butlast (mapcat  #(vector % in) col)))", "user": "58e5e585e4b056aecfd47ca2"}, {"problem": 40, "code": "(fn [val coll] (rest (mapcat #(vector val %) coll)))", "user": "58acca5ee4b0005cfeb1a753"}, {"problem": 40, "code": "(fn [s xs]\n  (loop [ys (next xs) z [(first xs)]]\n    (if (empty? ys)\n      z\n      (recur (next ys) (conj z s (first ys))))))", "user": "58ebae90e4b056aecfd47d44"}, {"problem": 40, "code": "(fn [i s] (rest (mapcat #(list i %) s)))", "user": "58ec8c7ae4b056aecfd47d64"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5272ccf1e4b03e8d9a4a7450"}, {"problem": 40, "code": "#(vec(drop-last (interleave %2 (repeat (count %2) %1))))", "user": "58dd21a9e4b0a4d5acaab6b3"}, {"problem": 40, "code": "(fn [x y] (butlast (interleave y (repeat (count y) x))))", "user": "58eba5cce4b056aecfd47d41"}, {"problem": 40, "code": "(fn [val xs] (butlast (mapcat #(vector % val) xs)))", "user": "58c4492be4b021aa9917ed27"}, {"problem": 40, "code": "(fn [sep s]\n  (rest (interleave (repeat sep) s)))", "user": "58bc6a88e4b0888cdc949d16"}, {"problem": 40, "code": "(fn my-interpose [sep coll]\n  (rest (interleave (repeat sep) coll)))", "user": "58ed713de4b056aecfd47d84"}, {"problem": 40, "code": "(fn [separator colls] (drop-last (reduce #(conj %1 %2 separator) [] colls)))", "user": "5794fd7be4b0e215f87e8476"}, {"problem": 40, "code": "#(rest (mapcat list (repeat %) %2))", "user": "4f2858ece4b0d6649770a016"}, {"problem": 40, "code": "(fn interpose-seq [a s]\n  (let [[x & xs] s]\n    (if (empty? xs)\n      (list x)\n      (cons x (cons a (interpose-seq a xs))))))", "user": "58ee9b14e4b056aecfd47db0"}, {"problem": 40, "code": "#(drop-last (flatten (map (fn [x y] (list y x)) (repeat %1) %2)))", "user": "58dcae01e4b0a4d5acaab6a4"}, {"problem": 40, "code": "(fn [sep coll]\n    (drop 1 (apply concat (map #(vector sep %) coll)))\n    )", "user": "58ec1e63e4b056aecfd47d54"}, {"problem": 40, "code": "(fn [sep coll]\n  (reverse (reduce (fn [t v]\n            (concat [v sep] (flatten [t]))) coll)))", "user": "58edaa3be4b056aecfd47d89"}, {"problem": 40, "code": "(fn interpose2 [sep coll]\n  (when (first coll)\n    (cons (first coll)\n          (when (second coll)\n              (cons sep (interpose2 sep (rest coll)))))))", "user": "58aa8083e4b01a0c0b232985"}, {"problem": 40, "code": "(fn [inter-item coll]\n  (butlast (flatten (map vector coll (repeat inter-item)))))", "user": "58ee5371e4b056aecfd47da8"}, {"problem": 40, "code": "(fn [x y] (rest(apply concat(map #(seq [x %]) y))))", "user": "58eed4c5e4b056aecfd47db7"}, {"problem": 40, "code": "#(->> (interleave %2 (take (count %2) (repeat %1)))\n      (reverse)\n      (rest)\n      (reverse))", "user": "5895385fe4b00487982d5279"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5782018de4b0d36ec5835e8e"}, {"problem": 40, "code": "(fn [delimiter coll]\r\n   (let [accum []]\r\n     (into []\r\n           (rest \r\n            (mapcat #(conj accum %1 %2)\r\n                    ((fn delimiter-seq [delimiter]\r\n                       (lazy-seq\r\n                        (cons delimiter (delimiter-seq delimiter)))) delimiter)\r\n                    coll)))))", "user": "58f2e8fbe4b0438e51c2ce94"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "58ee0bb6e4b056aecfd47d97"}, {"problem": 40, "code": "(fn i [sep xs]\n  (if (seq (rest xs))\n    (concat [(first xs) sep]\n            (i sep (rest xs)))\n    (if (seq xs)\n      [(first xs)]\n      [])))", "user": "58ef4db9e4b056aecfd47dc6"}, {"problem": 40, "code": "(fn [arbitraryvalue item] \n  (drop-last \n   (interleave item \n   (take \n   (count item) \n   (repeat arbitraryvalue)))))", "user": "554b8b78e4b0a04f7929958d"}, {"problem": 40, "code": "(fn [v s] (reverse\n  (reduce #(conj (conj %1 v) %2) (list (first s)) (rest s))))", "user": "58f273d9e4b08e1cf3471d01"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "58bc0531e4b0888cdc949d07"}, {"problem": 40, "code": "#(rest (mapcat vector (repeat %) %2))", "user": "58f5689de4b0438e51c2ced7"}, {"problem": 40, "code": "#(drop 1 (mapcat vector (repeat %1) %2))", "user": "53a2a259e4b0f1fc7453882c"}, {"problem": 40, "code": "(fn interpose-seq [a lat]\n  (let [[x & xs] lat]\n    (if (empty? xs) (list x)\n      (cons x (cons a (interpose-seq a xs))))))", "user": "58e965b3e4b056aecfd47d08"}, {"problem": 40, "code": "#(rest (interleave [% % % %] %2))", "user": "58f45ea0e4b0438e51c2cebc"}, {"problem": 40, "code": "(fn [v s] (drop-last (mapcat #(list % v) s)))", "user": "5796d3ebe4b039eba2ecb0ee"}, {"problem": 40, "code": "(fn [a lst ]\n  \t(loop [l (rest lst) nl [(first lst)]]\n      (if (empty? l)\n        \tnl\n        \t(recur (rest l) (conj nl a (first l))))))", "user": "56483f45e4b0284900eef62b"}, {"problem": 40, "code": "(fn [x coll] (drop-last (mapcat #(list % x) coll)))", "user": "58934052e4b00487982d523a"}, {"problem": 40, "code": "(fn [del seq1] (pop (vec (flatten (map (fn [x] [x del]) seq1)))))", "user": "58f1971ce4b08e1cf3471cee"}, {"problem": 40, "code": "#(drop 1\n       (interleave (repeat %1) %2))", "user": "58ac1135e4b0005cfeb1a73f"}, {"problem": 40, "code": "(fn [e s]\n  (vec (drop-last (interleave s (repeat e)))))", "user": "51a3be77e4b0e77c4ca60bf8"}, {"problem": 40, "code": "(fn [sep x]\n  (loop [xi (first x) xs (next x) res []]\n    (if-not xi\n      res\n      (if (empty? res)\n        (recur (first xs) (next xs) (conj res xi))\n        (recur (first xs) (next xs) (conj res sep xi))))))", "user": "589f2cefe4b02bd94d917e75"}, {"problem": 40, "code": "(fn [sep coll]\n      (drop-last (mapcat vector coll (repeat sep))))", "user": "58447708e4b089d5ab817e4b"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "53dbca12e4b094d41abdfef6"}, {"problem": 40, "code": "(fn [sep col]\n    (butlast (mapcat #(list %1 sep) col)))", "user": "58fc92c5e4b0438e51c2cf9a"}, {"problem": 40, "code": "(fn itp [sep s]\n  (butlast (interleave s (repeat sep))))", "user": "57ffd1a9e4b0a837a8b30c2a"}, {"problem": 40, "code": "(fn [x s]\n  (rest (flatten (map list (repeat x) s))))", "user": "58cfb517e4b03c36ff7e58b9"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "58bcea23e4b0888cdc949d23"}, {"problem": 40, "code": "(fn [sep obj] (butlast (mapcat #(vector % sep) obj)))", "user": "58f75bf8e4b0438e51c2cf13"}, {"problem": 40, "code": "(fn [d s]\n  (drop-last (interleave s (repeat (count s) d))))", "user": "58d48df8e4b03c36ff7e5941"}, {"problem": 40, "code": "(fn [val s] (butlast (mapcat #(vector % val) s)))", "user": "58f7dfe6e4b0438e51c2cf1f"}, {"problem": 40, "code": "(fn my-interpose [i s]\n  (if (> (count s) 1)\n    (cons (first s) (cons i (my-interpose i (next s))))\n    (list (first s))))", "user": "58fff18be4b0438e51c2d00c"}, {"problem": 40, "code": "(fn [sep s]\n    (rest (reduce (fn [acc x] (conj acc sep x)) [] s)))", "user": "5901158de4b0438e51c2d039"}, {"problem": 40, "code": "(fn [inter seq]\n  (take (- (* 2 (count seq)) 1)\n    (flatten (map list seq (take (count seq) (repeat inter))))))", "user": "59032c0fe4b022d14a2aaf9f"}, {"problem": 40, "code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "user": "58f3c18ee4b0438e51c2cead"}, {"problem": 40, "code": "(fn [val coll] \n   (loop [xs coll\n         retv []]\n    (if (= (count xs) 1)\n      (conj retv (first xs))\n      (recur (rest xs) (conj retv (first xs) val)))))", "user": "58dde189e4b0a4d5acaab6dd"}, {"problem": 40, "code": "(fn minterpose [v c] (rest (mapcat #(list v %) c)))", "user": "5900d5cde4b0438e51c2d02e"}, {"problem": 40, "code": "#(->> (repeat %1) (mapcat vector %2) butlast)", "user": "58db097fe4b0a4d5acaab66f"}, {"problem": 40, "code": "(fn [inter coll]\n  (loop [[head & tail] coll\n         accum []]\n    (let [retval (conj accum head)]\n      (if (empty? tail)\n        retval\n        (recur tail (conj retval inter))\n      )\n    )\n  )\n)", "user": "59073e0fe4b047aa04b19950"}, {"problem": 40, "code": "(fn [x coll] \n  (rest (mapcat #(list %1 %2)\n                (repeat (count coll) x)\n                coll)))", "user": "58dc81d1e4b0a4d5acaab69e"}, {"problem": 40, "code": "(fn [sep coll] \n (rest (flatten (for [x coll]\n  [sep x]))))", "user": "589b98fae4b00487982d533c"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "59035914e4b022d14a2aafaa"}, {"problem": 40, "code": "(fn [v c] (next (reduce #(conj %1 v %2) [] c)))", "user": "5635adeee4b0bfe05bf117c7"}, {"problem": 40, "code": "(fn f [v s] \n  (if (= (count s) 1) [(first s)] \n    (cons (first s) \n          (cons v \n                (f v (rest s))))))", "user": "58fdd7b7e4b0438e51c2cfc0"}, {"problem": 40, "code": "(fn [item coll]\n  (drop-last (reduce\n               (fn [curr-vec next]\n                 (into curr-vec [next item]))\n               []\n               coll)))", "user": "5890799be4b00487982d51d6"}, {"problem": 40, "code": "#(drop-last (mapcat list %2 (repeat %1)))", "user": "59074b7ce4b047aa04b19951"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "58fdbf59e4b0438e51c2cfbc"}, {"problem": 40, "code": "(fn [x xs] (reduce #(into %1 [x %2]) (vector (first xs)) (rest xs)))", "user": "590cc457e4b047aa04b199f4"}, {"problem": 40, "code": "#(drop-last (flatten (map (fn [it] [it %1] ) %2)))", "user": "590b3aeae4b047aa04b199d0"}, {"problem": 40, "code": "#(drop 1 (mapcat vector (repeat %1) %2))", "user": "590b055ae4b047aa04b199c9"}, {"problem": 40, "code": "(fn [x y] (drop-last (interleave y (repeat x))))", "user": "576ffcb9e4b0979f89651592"}, {"problem": 40, "code": "(fn [value s] \n  (butlast \n   (mapcat\n    \n    (fn [n] (vector n value)) s)))", "user": "58eac340e4b056aecfd47d24"}, {"problem": 40, "code": "(fn [s xs] (drop-last (mapcat #(vector % s) xs)))", "user": "590e588ce4b047aa04b19a23"}, {"problem": 40, "code": "(fn [x coll]\n  (flatten (conj (map (fn[e] [x e]) (rest coll)) (first coll))))", "user": "55507a1ae4b00713264bd9a7"}, {"problem": 40, "code": "#(drop-last (mapcat list %2 (repeat %1)))", "user": "58f9fde7e4b0438e51c2cf56"}, {"problem": 40, "code": "#(drop 1 (reduce (fn [coll el] (conj coll %1 el)) [] %2))", "user": "58ebd10de4b056aecfd47d49"}, {"problem": 40, "code": "(fn inter [x y] (if (= (count y) 1)\n                  y\n                  (concat (list (first y) x) (inter x (rest y))\n                          )))", "user": "59129074e4b0163c97b36ef1"}, {"problem": 40, "code": "(fn [sep coll] (butlast (reduce #(conj %1 %2 sep) [] coll)))", "user": "5640b135e4b08d4f616f5ee8"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "user": "591072e0e4b0163c97b36ebc"}, {"problem": 40, "code": "(fn iinterpose [x y] (if (empty? (rest y)) y (cons (first y) (cons x (iinterpose x (rest y))))))", "user": "591326f2e4b0163c97b36efc"}, {"problem": 40, "code": "(fn [x y]\n  (butlast (reduce #(conj %1 %2 x) [] y)))", "user": "5910a43de4b0163c97b36ebf"}, {"problem": 40, "code": "(fn [val li] (reduce (fn [a b] (conj a val b)) [(first li)] (rest li)))", "user": "59156f0be4b0163c97b36f3d"}, {"problem": 40, "code": "(fn myinterpose [sep coll]\n  (if (empty? (rest coll))\n    coll\n    (cons (first coll) \n          (cons sep \n                (myinterpose sep (rest coll))))))", "user": "5918b824e4b09b4ee5954bb9"}, {"problem": 40, "code": "#(drop 1(interleave (repeat %1) %2))", "user": "53d5d43ce4b0e771c302544d"}, {"problem": 40, "code": "(fn ola\n  ([a l]\n   (ola a l []))\n  ([a [f & r] acc]\n   (if (empty? r)\n     (conj acc f)\n     (recur a r (conj acc f a)))))", "user": "58dfce9fe4b0a4d5acaab723"}, {"problem": 40, "code": "(fn [y x]\n  (reduce #(conj %1 y %2) (vector (first x)) (rest x))\n  )", "user": "5822b578e4b04b46fc4b0fa4"}, {"problem": 40, "code": "(fn [ sep coll]\n  (drop 1 (interleave (repeat sep) coll)))", "user": "5916412ee4b09b4ee5954b87"}, {"problem": 40, "code": "(fn [x y]\n  (loop [lst [(first y)]\n         i 1\n         ]\n    (if (< i (count y))\n      (recur\n        (conj lst x (nth y i))\n        (inc i))\n      lst\n      )))", "user": "591ac8ece4b09b4ee5954bdd"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %)))", "user": "58f44c07e4b0438e51c2ceb7"}, {"problem": 40, "code": "(fn [x y] (drop-last(mapcat #(vector % x) y)))", "user": "5739ff3ae4b0cd1946bd1084"}, {"problem": 40, "code": "(fn [a b] (rest (interleave (repeat a) b)))", "user": "58fb7d7ae4b0438e51c2cf7a"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "585a9a16e4b0f14aab7c8752"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "591c2f4ee4b09b4ee5954bfc"}, {"problem": 40, "code": "#(rest (mapcat (partial list %1) %2))", "user": "4f29d9abe4b0d6649770a034"}, {"problem": 40, "code": "(fn [p xs] (drop-last (interleave xs (repeat (count xs) p) ))\n)", "user": "5921a080e4b09b4ee5954c77"}, {"problem": 40, "code": "(fn myfunc [d input]\n  (let [[x & xs] input]\n    (if (empty? xs) \n       (list x)\n       (cons x (cons d (myfunc d xs))))))", "user": "591cbc30e4b09b4ee5954c08"}, {"problem": 40, "code": "#(reduce (fn [a b] (conj a %1 b)) [(first %2)] (rest %2))", "user": "591f05b4e4b09b4ee5954c42"}, {"problem": 40, "code": "(fn inter [between lst] (if (empty? (rest lst)) lst (cons (first lst) (cons between (inter between (rest lst))))))", "user": "59078134e4b047aa04b1995c"}, {"problem": 40, "code": "(fn [separator seq1] \n  \n    (loop [result [], data1 seq1] \n      \n      (if (empty? data1)\n        (reverse (rest (reverse result)))\n\t\t(recur (conj result (first data1) separator)(rest data1) )\n          \n      )\n    )      \n  )", "user": "59228b00e4b026ae38521281"}, {"problem": 40, "code": "(fn my-interpose [value coll] (let [[x & xs] coll] (if (empty? xs) (list x) (cons x (cons value (my-interpose value xs))))))", "user": "58d1fe17e4b03c36ff7e58f5"}, {"problem": 40, "code": "(fn[x y](butlast(mapcat vector y (repeat x))))", "user": "52f762ece4b047fd55836fc2"}, {"problem": 40, "code": "(fn [sep coll]\n  (let [len (- (count coll) 1)]\n    (cons (first coll)\n          (apply concat\n                 (map list \n                      (repeat len sep)\n                      (rest coll))))))", "user": "59225498e4b09b4ee5954c8c"}, {"problem": 40, "code": "(fn [z x]\n   (flatten (conj (vec (map (fn [a] [a z]) (drop-last x)))\n                       (last x))))", "user": "591f5124e4b09b4ee5954c45"}, {"problem": 40, "code": "(fn f1 [x y] (drop 1 (vec (interleave (repeat x) y))))", "user": "55e81430e4b0121d4835fd88"}, {"problem": 40, "code": "#(butlast\n (flatten \n  (map (partial conj []) \n       %2\n       (repeat %))))", "user": "58ef93ece4b056aecfd47dca"}, {"problem": 40, "code": "(fn [x xs] \n  (rest (interleave (repeat x) xs)))", "user": "4db1b3951254ad5b4805fa6f"}, {"problem": 40, "code": "(fn sprl [sp sq]\n  (cond (nil? (second sq)) (list (first sq))\n        :else (conj (sprl sp (rest sq))\n                    sp\n                    (first sq))))", "user": "57614a42e4b0994c1922fb85"}, {"problem": 40, "code": "(fn [sep vals]\n  (->> vals\n      (map #(vector % sep))\n      flatten\n      drop-last))", "user": "5911aa1de4b0163c97b36ed8"}, {"problem": 40, "code": "#(drop-last (mapcat list %2 (repeat %1)))", "user": "59258aa7e4b072a2710fce74"}, {"problem": 40, "code": "(fn [separator coll]\n  (loop [s separator\n         c coll\n         r []]\n    (if (empty? c)\n      (butlast r)\n      (recur s (rest c) (conj r (first c) s) ) ) ))", "user": "590253e3e4b0438e51c2d055"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "57f17cb5e4b0bfb2137f5c0b"}, {"problem": 40, "code": "(fn [x y] (reverse (list* (last y) (loop [output '() index 0] (if (= index (- (count y) 1)) output (recur (list* x (nth y index) output) (+ 1 index)))))))", "user": "5924009ce4b072a2710fce45"}, {"problem": 40, "code": "(fn intercalate [x y]\n   (if (= '() (rest y))\n     y\n     (cons (first y)\n           (cons x\n                 (intercalate\n                  x\n                  (rest y))))))", "user": "59273eefe4b072a2710fcec6"}, {"problem": 40, "code": "(fn [x col]\n  (cons (first col) (mapcat #(list x %) (rest col))))", "user": "514a3fa5e4b0829bd132edb6"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5929a5f2e4b072a2710fcf09"}, {"problem": 40, "code": "(fn my-interpose [x xs] (drop-last (interleave xs (repeat (count xs) x))))", "user": "592af6eee4b072a2710fcf2c"}, {"problem": 40, "code": "(fn [x y] (butlast (mapcat #(vector % x) y)))", "user": "59234753e4b0a390037439ef"}, {"problem": 40, "code": "(fn m [sp [x & xs]]\n  (if (nil? xs)\n    [x]\n    (into [] (concat [x sp] (m sp xs)))))", "user": "56618573e4b068f2fe63dc68"}, {"problem": 40, "code": "(fn _interpose [value _sequence]\n  (drop-last\n    ((fn __interpose [value _sequence]\n      (if-not (empty? _sequence)\n        (concat\n          (list (first _sequence))\n          (list value)\n          (__interpose value (rest _sequence)))))\n      value\n      _sequence)))", "user": "58e980dfe4b056aecfd47d0b"}, {"problem": 40, "code": "(fn [r coll]\n  (butlast(interleave coll (repeat (count coll) r))))", "user": "58ffaddee4b0438e51c2cffe"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "592518bfe4b072a2710fce65"}, {"problem": 40, "code": "(fn ips [x lat]\n  (cond\n   (empty? (rest lat)) (list (first lat))\n   :else (cons (first lat) (cons x (ips x (rest lat))))))", "user": "5833a6d8e4b089d5ab817ca2"}, {"problem": 40, "code": "#(-> (for [i %2] (vector i %1))\n     flatten\n     drop-last)\n\n;#(drop-last (apply concat (for [i %2] (vector i %1))))\n\n;#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "58d2af83e4b03c36ff7e5907"}, {"problem": 40, "code": "(fn [item xs]\n  (reduce\n   (fn [acc x](if (= x (last xs))\n                (conj acc x)\n                (conj acc x item)\n               ))\n   [] xs))", "user": "5929bdf6e4b072a2710fcf0c"}, {"problem": 40, "code": "(fn [sep xs] (drop-last (interleave xs (repeat sep))))", "user": "56c21eafe4b05cc29241ee7e"}, {"problem": 40, "code": "(fn [sep,xs] (reduce (fn [x,y] \n  (concat x [sep y])) [(first xs)] (rest xs)))", "user": "5933b736e4b072a2710fd05d"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last 1 (interleave coll (for [i (range (count coll))] sep))))", "user": "5918db70e4b09b4ee5954bbb"}, {"problem": 40, "code": "( partial (fn [ output sep [head & tail]]\n         (if (nil? (first tail))\n           (into '() (cons head output))\n           (recur (cons sep (cons head output)) sep tail))) '())", "user": "58db362be4b0a4d5acaab675"}, {"problem": 40, "code": "(fn [d coll]\n (into [] \n       (drop-last 1\n        (mapcat (fn [e] [e d]) coll))))", "user": "5838337de4b089d5ab817d24"}, {"problem": 40, "code": "(fn [v l]\n  (loop [news '() tmpl l]\n    (if (empty? tmpl)\n      (reverse (rest news))\n      (recur (conj (conj news (first tmpl)) v) (rest tmpl)))))", "user": "59368ccae4b02506e01a297a"}, {"problem": 40, "code": "(fn [sep v]\n  (drop-last (mapcat #(vector % sep) v)))", "user": "5936fabce4b02506e01a298c"}, {"problem": 40, "code": "(fn [x coll]\n   (drop-last\n    (mapcat #(list % x) coll)))", "user": "5935b010e4b04f87174def55"}, {"problem": 40, "code": "(fn [p s] (rest (mapcat #(list p %) s)))", "user": "5931e498e4b072a2710fd024"}, {"problem": 40, "code": "#(reduce (fn [acc x] (conj acc %1 x)) [(first %2)] (rest %2))", "user": "5923554ee4b0a390037439f2"}, {"problem": 40, "code": "(fn [x s] (loop [x1 x lst s new []]\n            (if (empty? lst)\n              (reverse (rest (reverse new)))\n            (recur x1 (rest lst) (conj (conj new (first lst)) x1)))))", "user": "59368ccae4b02506e01a2979"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "59368efbe4b02506e01a297d"}, {"problem": 40, "code": "(fn [value listy]\n  (loop [l listy tmpl []]\n    (if (= 1 (count l))\n      (conj tmpl (first l))\n      (recur (rest l) (conj tmpl (first l) value)))))", "user": "59369515e4b02506e01a297e"}, {"problem": 40, "code": "(fn [a x]\n   (rest (mapcat list (vec (take (count x) (repeat a))) x)))", "user": "59385840e4b02506e01a29c9"}, {"problem": 40, "code": "(fn [separator c]\n  (butlast (mapcat (fn [e] [e separator]) c)))", "user": "59362afee4b0d6bb3c60df69"}, {"problem": 40, "code": "(fn interpose'\n  [n array]\n  (drop 1 (interleave (repeat (count array) n) array)))", "user": "58b18ba0e4b0ebc645576cfa"}, {"problem": 40, "code": "(fn [x y]\n  (drop-last \n    (mapcat vector y (repeat x))))", "user": "591a6c9fe4b09b4ee5954bd6"}, {"problem": 40, "code": "(fn [e l]\n  (reduce #(conj % e %2) [(first l)] (rest l)))", "user": "557c6ca6e4b05c286339e0c4"}, {"problem": 40, "code": "(fn [e c] (butlast (mapcat (fn [x] [x e]) c)))", "user": "593c71cbe4b069cdc2982b90"}, {"problem": 40, "code": "#(butlast (mapcat vector %2 (repeat %1)))", "user": "593f95d8e4b069cdc2982be3"}, {"problem": 40, "code": "(fn inter [del sekv]\n  (if (empty? (rest sekv)) sekv \n  (conj (conj (inter del (rest sekv)) del) (first sekv))\n        )\n)", "user": "584d99c5e4b0b7285a6f4e42"}, {"problem": 40, "code": "#(take (- (* 2 (count %2)) 1)\n       (interleave %2 (repeat %1)))", "user": "59251947e4b072a2710fce69"}, {"problem": 40, "code": "(fn my-interpose [delimiter [x & more]]\n  (lazy-seq\n   (when x\n     (if more\n       (cons x (cons delimiter (my-interpose delimiter more)))\n       (cons x nil)))))", "user": "592518f0e4b072a2710fce68"}, {"problem": 40, "code": "#(vec(butlast(interleave %2(vec(take (count %2) (repeat %1))))))", "user": "59395adfe4b02506e01a29fb"}, {"problem": 40, "code": "(fn nyelip2 [x y] (vec(butlast(vec(interleave y (vec(replicate (count y) x)))))))", "user": "593910eae4b02506e01a29f4"}, {"problem": 40, "code": "(fn f [x,y]\n  (loop [s y, res []]\n    (if (seq (rest s))\n      (recur (rest s) (conj res (first s) x))\n      (conj res (first s)))))", "user": "593d6793e4b069cdc2982ba6"}, {"problem": 40, "code": "(fn my-interpose [delimiter [x & more]](lazy-seq(when x(if more (cons x (cons delimiter (my-interpose delimiter more)))(cons x nil)))))", "user": "592518e8e4b072a2710fce67"}, {"problem": 40, "code": "(fn [x y] (butlast (mapcat #(list % x) y)))", "user": "593dfe60e4b069cdc2982bb1"}, {"problem": 40, "code": "(fn [s arr] \n\t(reduce #(conj %1 s %2) [(first arr)] (rest arr)))", "user": "59449aa2e4b0b03edd0057ad"}, {"problem": 40, "code": "(fn inter [e lst]\n  (if (> (count lst) 1)\n    (cons (first lst)\n          (cons e\n                (inter e (rest lst))))\n    [(first lst)]))", "user": "55836631e4b05c286339e114"}, {"problem": 40, "code": "(fn [el coll] (reverse (rest (reduce (fn [acc itm] (conj acc itm el)) () coll))))", "user": "593e4b1fe4b069cdc2982bbb"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "592519cfe4b072a2710fce6b"}, {"problem": 40, "code": "(fn [separator coll]\n  (cons (first coll)\n        (mapcat (partial vector separator) (rest coll))))", "user": "594783bee4b07ddc2dafada1"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "585d9558e4b0f14aab7c879c"}, {"problem": 40, "code": "(fn inte\n  [s x]\n  (rest\n   (reduce\n    #(concat %1 [s %2])\n    [] x)))", "user": "593f88dce4b069cdc2982be2"}, {"problem": 40, "code": "(fn\n                 [btw lst]\n                 (reduce\n                  (fn [acc curr]\n                    (if (-> acc count (> 0))\n                      (concat acc [btw curr])\n                      (conj acc curr)))\n                  []\n                  lst))", "user": "5938bca5e4b02506e01a29eb"}, {"problem": 40, "code": "(fn [sep xs] (butlast (interleave xs (repeat sep))))", "user": "5943abb6e4b060784b3b792b"}, {"problem": 40, "code": "#(take (- (* 2 (count %2)) 1)\n       (interleave %2 (repeat %1)))", "user": "592518cde4b072a2710fce66"}, {"problem": 40, "code": "(fn [v coll]\n  (->> coll\n       (mapcat #(conj '() v %))\n       butlast ))", "user": "593dde1be4b069cdc2982baf"}, {"problem": 40, "code": "(fn [x y] \n (drop-last\n  (flatten\n   (map \n    (fn [b] \n      (vector b x)\n       ) \n    y)\n   )\n  )\n  )", "user": "593744abe4b02506e01a299b"}, {"problem": 40, "code": "#(loop [i %1 x %2 r []]\n   (let [xs (rest x)]\n     (if (empty? xs)\n       (concat r x)\n       (recur i xs (conj r (first x) i))\n   )))", "user": "594263cbe4b060784b3b790a"}, {"problem": 40, "code": "(fn [el sq] (loop [i 0 ret []] (if (= (+ i 1) (count sq)) (conj ret (nth sq i)) (recur (+ i 1) (conj ret (nth sq i) el)))))", "user": "59468de7e4b07ddc2dafad88"}, {"problem": 40, "code": "(fn [n li]\n (loop [re []     \n       li_ li]\n   (if (empty? (rest li_))\n   \t(conj re (first li_))\n   (recur (conj re (first li_) n) (rest li_)))\n    \n   ))", "user": "57a497e8e4b0a966079561e4"}, {"problem": 40, "code": "(fn [x ls]\n (cons (first ls)\n  (reverse\n   (loop [in (rest ls)\n          out '()]\n     (if (empty? in)\n       out\n       (recur (rest in) (cons (first in) (cons x out))))))))", "user": "594bd637e4b07ddc2dafae41"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "594bc912e4b07ddc2dafae3e"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "594bb203e4b07ddc2dafae36"}, {"problem": 40, "code": "#(loop [y %1 res [] x %2] (if (not= [] x) (recur  y   (if(contains? (vec x) 1)  (conj (conj res (first x)) y )  (conj res (first x)) ) (rest x) )  res))", "user": "594e3723e4b07ddc2dafaea8"}, {"problem": 40, "code": "#(rest (flatten (map vector (repeat (count %2) %1) %2)))", "user": "59497f51e4b07ddc2dafaddd"}, {"problem": 40, "code": "(fn [x xs]\n  (reduce #(conj % x %2) [(first xs)] (rest xs)))", "user": "594880ade4b07ddc2dafadc2"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5938bae2e4b02506e01a29ea"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "55216aa5e4b0882d96d09192"}, {"problem": 40, "code": "(fn [x s] \n  (rest (mapcat #(vector x %) s) ))", "user": "593f8692e4b069cdc2982be1"}, {"problem": 40, "code": "(fn inter [x ys]\n  (if-let [s (seq ys)]\n    (if-let [s' (seq (rest s))]\n      (cons (first s) (cons x (inter x (rest s))))\n      s)))", "user": "5069d8c5e4b01dc6af13f838"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5948adffe4b07ddc2dafadc6"}, {"problem": 40, "code": "(fn check [n x]\n  (->> (for [a x]\n         [a n])\n         flatten\n         butlast))", "user": "5950f0bfe4b066ee0a44ae9f"}, {"problem": 40, "code": "(fn [value col] (vec (drop-last (interleave col (repeat (count col) value)))))", "user": "59473563e4b07ddc2dafad97"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %)))", "user": "59496129e4b07ddc2dafadd7"}, {"problem": 40, "code": "#(drop-last (\n             mapcat \n             (fn [value1 value2] \n               (conj [] value1 value2)) %2 (repeat (count %2) %) ))", "user": "583f1533e4b089d5ab817dc8"}, {"problem": 40, "code": "(fn intrpse [c x]\n  (let [step\n        (fn [c x xs]\n          (if xs\n            (concat (list x c) (intrpse c xs))\n            (list x)))]\n    (lazy-seq (step c (first x) (next x)))))", "user": "5953bdb6e4b066ee0a44aeed"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "594c0bd7e4b07ddc2dafae56"}, {"problem": 40, "code": "(fn [sep coll]\n  (loop [coll coll\n         res []]\n    (if (empty? coll)\n      res\n      (let [tempres (conj res (first coll))\n            last (= (count coll) 1)\n            newres (if last\n                     tempres\n                     (conj tempres sep))]\n        (recur (rest coll) newres)))))", "user": "592334c7e4b0a390037439ee"}, {"problem": 40, "code": "#(next(interleave (repeat %1) %2))", "user": "593fcb0ce4b069cdc2982bea"}, {"problem": 40, "code": "(fn [s lst]\n         (butlast (mapcat #(vector % s) lst)))", "user": "591e0782e4b09b4ee5954c25"}, {"problem": 40, "code": "(comp drop-last (fn [p1 p2] (flatten (map #(identity [% p1]) p2))))", "user": "594bc7d6e4b07ddc2dafae3d"}, {"problem": 40, "code": "(fn [delim col] (rest (reduce (fn [col el] (conj col delim el)) [] col)))", "user": "5956c6dae4b066ee0a44af61"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %1)))", "user": "5958cef6e4b066ee0a44af94"}, {"problem": 40, "code": "(fn [x y] (flatten (conj [(first y)] (map #(conj [x] %) (drop 1 y)))))", "user": "56b2652ae4b0982f16b37e04"}, {"problem": 40, "code": "(fn interp [a x]\n  (lazy-seq\n   \t(if (> (count x) 1)\n       (cons (first x) \n             (cons a (interp a (rest x))))\n       (cons (first x) (rest x)))))", "user": "5958a0c8e4b066ee0a44af8c"}, {"problem": 40, "code": "(fn [i xs]\n  (rest (reduce (fn [a c] (conj a i c)) [] xs)))", "user": "5947c6a6e4b07ddc2dafada7"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %)))", "user": "57262710e4b0c5bde472c120"}, {"problem": 40, "code": "(fn [a s] (rest (mapcat #(list a %) s)))", "user": "590088bfe4b0438e51c2d026"}, {"problem": 40, "code": "#(butlast (mapcat (fn[a][a %1]) %2 ))", "user": "593db05ae4b069cdc2982bab"}, {"problem": 40, "code": "(fn [vv s] (flatten (vector (first s) (map #(vector vv %) (rest s)))))", "user": "57e3527ce4b0bfb2137f5a99"}, {"problem": 40, "code": "(fn [s coll]\n    (butlast (mapcat #(vector % s) coll)))", "user": "594bb36ae4b07ddc2dafae37"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "595a885be4b066ee0a44afc4"}, {"problem": 40, "code": "(fn my-interpose\n  [d c]\n  (concat (interleave c (repeat (dec (count c)) d)) [(last c)]))", "user": "59390a35e4b02506e01a29f3"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "594cb88be4b07ddc2dafae6e"}, {"problem": 40, "code": "(fn my-interpose [e, lst]\n  (let [[f & r] lst]\n    (if (empty? r)\n      (list f)\n      (let [r-res (my-interpose e r)]\n        (concat [f e] r-res)\n        )\n        ))\n  )", "user": "5959c72ae4b066ee0a44afac"}, {"problem": 40, "code": "#(->> (repeat %1)\n       (map list %2)\n       flatten\n       drop-last)", "user": "59419bdfe4b060784b3b78f7"}, {"problem": 40, "code": "#(let [r  (apply concat (map (fn [& x] x) %2 (repeat %1)))]\n     (take (dec (count r)) r))", "user": "595bbab7e4b066ee0a44afe0"}, {"problem": 40, "code": "(fn interp\n  [d sq]\n  (mapcat (fn [v]\n            (if (= v (first sq))\n              [v]\n              [d v]))\n          sq))", "user": "5264502be4b03e8d9a4a70cf"}, {"problem": 40, "code": "(fn [thing coll]\n  (apply vector (drop-last (interleave coll (repeat (count coll) thing))))\n  )", "user": "595d0897e4b066ee0a44b00f"}, {"problem": 40, "code": "(fn ip [i c]\n  (if (= 1 (count c))\n    c\n    (concat (list (first c) i) (ip i (rest c)))))", "user": "54bd9a60e4b0ed20f4ff6ee3"}, {"problem": 40, "code": "#(reduce (fn [a i] (conj a %1 i)) [(first %2)] (rest %2))", "user": "59566d1de4b066ee0a44af54"}, {"problem": 40, "code": "(fn [sep ns]\n  (drop-last (flatten (map list ns (repeat sep)))))", "user": "51dafedee4b09f6bc204eee2"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %)))", "user": "58db3c5ae4b0a4d5acaab677"}, {"problem": 40, "code": "(fn \n  [x col]\n  (let [xs (repeat (count col) x)]\n  (rest (mapcat vector xs col))))", "user": "595ebf46e4b066ee0a44b04f"}, {"problem": 40, "code": "(fn [x coll] (drop-last (reduce #(conj %1 %2 x) [] coll)))", "user": "58cf8f97e4b03c36ff7e58b7"}, {"problem": 40, "code": "#(rest (for [x %2 x [% x]] x))", "user": "595eba88e4b066ee0a44b04e"}, {"problem": 40, "code": "#(drop-last(mapcat list %2 (take (count %2) (repeat %))))", "user": "595fe942e4b066ee0a44b075"}, {"problem": 40, "code": "(fn separate [sep coll]\n  (drop-last\n    (mapcat #(list % sep) coll)))", "user": "59503c5de4b066ee0a44ae8e"}, {"problem": 40, "code": "#(rest (mapcat list (repeat %1) %2))", "user": "524ac3d1e4b09eba1c0223a0"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "4f73591be4b07046d9f4f045"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "58fc52cee4b0438e51c2cf95"}, {"problem": 40, "code": "(fn [n l] \n  (drop-last (mapcat (fn [x] [x n]) l)))", "user": "595d2041e4b066ee0a44b014"}, {"problem": 40, "code": "#(rest (mapcat (partial list %) %2))", "user": "59638af5e4b066ee0a44b0cc"}, {"problem": 40, "code": "(fn [v _seq]\n\t(take (dec (* (count _seq) 2)) (reverse (reduce (fn[result head]\n\t\t(conj result head v)) '() _seq))))", "user": "5954eef0e4b066ee0a44af17"}, {"problem": 40, "code": "#(reverse (drop 1 (reverse (interleave %2 (repeat (count %2) %1)))))", "user": "5911c8e1e4b0163c97b36edc"}, {"problem": 40, "code": "(fn [v m]\n  (loop [s    m\n         coll []]\n    (cond\n      (empty? s)\n        coll\n      :else\n        (recur\n          (rest s)\n          (if (empty? (rest s))\n            (conj coll (first s))\n            (conj coll (first s) v))))))", "user": "595c02a9e4b066ee0a44afeb"}, {"problem": 40, "code": "(fn [inter xs] (rest (mapcat #(vector inter %) xs)))", "user": "58ee84e5e4b056aecfd47dab"}, {"problem": 40, "code": "(fn [e l]\n  (drop-last (reduce \n              (fn [x y] (concat x (list y e))) \n              '() l)))", "user": "59663e77e4b069c0a1a1979f"}, {"problem": 40, "code": "(fn [sep coll]\n  (flatten (map-indexed #(if (> %1 0) (vector sep %2) (vector %2)) coll)))", "user": "53dad484e4b0e771c30254ac"}, {"problem": 40, "code": "(fn [a x] (drop 1(reduce #(conj %1 %2 a) () (reverse x))))", "user": "5965eb8de4b069c0a1a19796"}, {"problem": 40, "code": "#(butlast (interleave %2 (cycle [%])))", "user": "55c4e30be4b0e31453f649a6"}, {"problem": 40, "code": "#(loop [x (rest %2) res [(first %2)]]\n   (if (empty? x)\n     res\n     (recur (rest x) (conj res % (first x)))))", "user": "5964c614e4b069c0a1a19770"}, {"problem": 40, "code": "(fn\n  [x coll]\n  (let [y (dec (* 2 (count coll)))]\n    (take y (reduce #(conj %1 %2 x) [] coll))))", "user": "55842bd7e4b05c286339e11c"}, {"problem": 40, "code": "#(butlast (apply concat (for [x %2] (conj [] x %1))))", "user": "59692530e4b069c0a1a197e4"}, {"problem": 40, "code": "(fn [v s] (rest (mapcat list (repeat v) s)))", "user": "59699da7e4b069c0a1a197eb"}, {"problem": 40, "code": "(fn interp [i x]\n  (if (= 1 (count x))\n    [(first x)]\n    (vec (concat [(first x) i] (interp i (rest x))))))", "user": "595ed97fe4b066ee0a44b051"}, {"problem": 40, "code": "(fn [separator list] (loop [l list result '()]\n  (if (empty? l)\n    (rest (reverse result))\n    (recur (rest l) (concat [(first l)] [separator] result)))))", "user": "5954cea2e4b066ee0a44af0a"}, {"problem": 40, "code": "(fn alternate [splitter inp-seq]\n (butlast (interleave inp-seq (cycle [splitter]))))", "user": "58ffbabce4b0438e51c2d002"}, {"problem": 40, "code": "#(rest (mapcat vector (repeat %1) %2))", "user": "59648ce1e4b069c0a1a19769"}, {"problem": 40, "code": "(fn [x l] (rest (mapcat #(vector x %) l)))", "user": "51d55795e4b01da06753aa8f"}, {"problem": 40, "code": "#(drop-last (mapcat (fn [n] (list n %)) %2))", "user": "596c1f25e4b069c0a1a19825"}, {"problem": 40, "code": "(fn [sep col] (butlast (interleave  col (repeat sep))))", "user": "593c653de4b069cdc2982b8f"}, {"problem": 40, "code": "(fn [n a-seq] (butlast (reduce #(conj %1 %2 n) [] a-seq)))", "user": "595fd77ce4b066ee0a44b06f"}, {"problem": 40, "code": "#((fn separate [sep ls res] (if (= nil (second ls))\n                                     (concat res [(first ls)])\n                                    (concat [(first ls) sep] \n                                            (separate sep (rest ls) res)))) % %2 [])", "user": "56ffeafee4b08d47c97781c2"}, {"problem": 40, "code": "(fn chonk [z l]\n  (if (= (count l) 1)\n    l\n    (concat [(first l) z] (chonk z (rest l)))))", "user": "59708e38e4b01722bebd4c65"}, {"problem": 40, "code": "#(conj (apply vector (interleave %2 (repeat (- (.length %2) 1) %1))) (last %2))", "user": "596caee3e4b069c0a1a19837"}, {"problem": 40, "code": "(fn [z xs] (rest (mapcat (fn [x] [z x]) xs)))", "user": "595fd721e4b066ee0a44b06e"}, {"problem": 40, "code": "(fn [sep arr]\n  (drop-last (mapcat #(list %1 sep) arr)))", "user": "59636b6de4b066ee0a44b0c6"}, {"problem": 40, "code": "(fn solution40\n  [val coll]\n  (let [ans (reduce (fn [curr elem]\n                      (conj curr elem val))\n              [] coll)]\n    (drop-last ans)))", "user": "595bc925e4b066ee0a44afe2"}, {"problem": 40, "code": "(fn inpos[v sx] (drop-last (mapcat #(list % v) sx)))", "user": "596f6683e4b069c0a1a19877"}, {"problem": 40, "code": "(fn interp\n  [x lst]\n  (conj (into []\n              (mapcat list\n                      lst\n                      (repeat (dec (count lst))\n                              x)))\n        (last lst)))", "user": "59636cc2e4b066ee0a44b0c7"}, {"problem": 40, "code": "(fn\n  [a b]\n  (conj (into [] (mapcat #(vector % a) (drop-last b))) (last b) ) )", "user": "59636ec9e4b066ee0a44b0c8"}, {"problem": 40, "code": "(fn [v col]\n  (butlast (mapcat #(vector % v) col)))", "user": "59636f66e4b066ee0a44b0c9"}, {"problem": 40, "code": "(fn\n[value, coll]\n  (loop [xs (rest coll) ys [(first coll)]]\n    (if (empty? xs)\n    ys\n    (recur (rest xs) (conj ys value (first xs))))))", "user": "53de4bdae4b0d874e779ae32"}, {"problem": 40, "code": "(fn interp [sep coll]  (drop 1 (interleave (repeat sep) coll)) )", "user": "5972fcf6e4b01722bebd4c92"}, {"problem": 40, "code": "(fn [x coll]\n  (butlast (interleave coll (repeat (count coll) x))))", "user": "5398d042e4b0b51d73faaf00"}, {"problem": 40, "code": "(fn inter [n s]\n  (if (= (count s) 1)\n    [(first s)]\n    (cons (first s) (cons n (inter n (rest s))))))", "user": "59733c91e4b01722bebd4c9b"}, {"problem": 40, "code": "(fn [i l] (drop-last (mapcat list l (repeat i))))", "user": "595a4fb8e4b066ee0a44afba"}, {"problem": 40, "code": "(fn interp [x y] (butlast (interleave y (repeat x))))", "user": "58866b4fe4b0f1effa3b76d4"}, {"problem": 40, "code": "(fn[a vc]\n  (drop-last (mapcat (fn [x] [x a]) vc)))", "user": "59636b37e4b066ee0a44b0c3"}, {"problem": 40, "code": "(fn [no lis]\n  (drop-last (mapcat (fn [x] [x no]) lis)))", "user": "59636b49e4b066ee0a44b0c5"}, {"problem": 40, "code": "(fn [no lis]\n  (drop-last (mapcat (fn [x] [x no]) lis)))", "user": "59636b43e4b066ee0a44b0c4"}, {"problem": 40, "code": "(fn [df col]\n  (drop-last (reduce #(conj %1 %2 df) [] col))\n)", "user": "5926c254e4b072a2710fceb8"}, {"problem": 40, "code": "(fn [x xs]\n  (rest (flatten (map list (repeat (count xs) x) xs))))", "user": "596e2a70e4b069c0a1a19861"}, {"problem": 40, "code": "(comp rest\n      (partial apply interleave)\n      (juxt (comp repeat first)\n            (comp identity second))\n      list)", "user": "58dac8b1e4b0a4d5acaab668"}, {"problem": 40, "code": "(fn [n l]\n  (drop-last (reduce (fn [a b]\n            (conj a b n))\n          [] l)))", "user": "5978305be4b01722bebd4d03"}, {"problem": 40, "code": "#(cons (first %2) (mapcat (partial conj [%1]) (rest %2)))", "user": "59738d98e4b01722bebd4ca1"}, {"problem": 40, "code": "#(next (interleave (repeat %1) %2))", "user": "4fb1d7ace4b081705acca281"}, {"problem": 40, "code": "(fn [d [f & r]]\n  (cons f (interleave (repeat d) r)))", "user": "5974d2ede4b01722bebd4cb6"}, {"problem": 40, "code": "(fn [a b]\n  (drop-last (interleave b (repeat (count b) a))))", "user": "5935151ee4b072a2710fd084"}, {"problem": 40, "code": "#(loop [del %1 lst %2 res []]\n       (if (= 1 (count lst))\n           (cons (last lst) res)\n           (recur del (butlast lst) (cons del (cons (last lst) res)))))", "user": "5979cd36e4b02382a38ad1d8"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5964f9b0e4b069c0a1a19778"}, {"problem": 40, "code": "(fn my-interpose\n  [x coll]\n  (cons (first coll) (if (not= 1 (count coll)) (cons x (my-interpose x (rest coll))))))", "user": "597f8c93e4b0dbe32238d0c1"}, {"problem": 40, "code": "(fn moo [el a-seq]\n  (reduce (fn [a b] (conj (conj a el) b)) \n          [(first a-seq)] \n          (rest a-seq)))", "user": "5974b12be4b01722bebd4cb1"}, {"problem": 40, "code": "(fn [sep coll] (rest (apply concat (map (fn [e] [sep e]) coll))))", "user": "59804b60e4b021a7a535fdcf"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "597dcb0ce4b0dbe32238d0a2"}, {"problem": 40, "code": "(fn [x xs]\n  (rest\n   (mapcat #(list %1 %2) (repeat x) xs)))", "user": "5980f91ae4b021a7a535fddd"}, {"problem": 40, "code": "(fn\n  [interposed-value l]\n  (into [] (butlast (mapcat vector l (repeat interposed-value)))))", "user": "58821372e4b0f1effa3b764d"}, {"problem": 40, "code": "(fn \n  [sep in]\n  (loop [[x & xs] in\n         out []]\n    (if (not xs)\n      (conj out x)\n      (recur xs (conj out x sep)))))", "user": "597d0e43e4b0dbe32238d095"}, {"problem": 40, "code": "(fn [v coll]\n   (loop [a [] b coll]\n     (if-not (= 1 (count b))\n       (recur (concat a [(first b) v]) (rest b))\n       (concat a b))))", "user": "59826556e4b021a7a535fdfe"}, {"problem": 40, "code": "(fn [inter coll]\n  \t(cons (first coll)\n          (reduce #(concat %1 [inter %2])\n                  []\n                  (rest coll))))", "user": "591addcee4b09b4ee5954be1"}, {"problem": 40, "code": "; #(drop-last (mapcat (fn [val] [val %1]) %2))\n; #(drop-last (interleave %2 (repeat %1)))\n#(-> %2 (interleave (repeat %1)) drop-last)", "user": "59837909e4b021a7a535fe16"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "594266cfe4b060784b3b790b"}, {"problem": 40, "code": "(fn [i arr] \n  (butlast (mapcat #(vector % i) arr)))", "user": "597f8984e4b0dbe32238d0bf"}, {"problem": 40, "code": "(fn [sep coll]\n   (butlast (mapcat #(vector % sep) coll))\n)", "user": "5982d82be4b021a7a535fe05"}, {"problem": 40, "code": "(fn [x ys]\n (drop-last (flatten (vector \n                  (for [y ys]\n                    [y x]\n                    )\n                  )\n           ))\n  )", "user": "598588f2e4b021a7a535fe65"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "598085e6e4b021a7a535fdd3"}, {"problem": 40, "code": "(fn ipose [v s]\n  (if (= (count s) 1)\n    s\n    (cons (first s) (cons v (ipose v (rest s))))))", "user": "597a4277e4b02382a38ad1e2"}, {"problem": 40, "code": "#(cons (first %2) (flatten (map list (repeat %1) (rest %2))))", "user": "597768d0e4b01722bebd4cee"}, {"problem": 40, "code": "(fn [x y] (drop-last (interleave y (repeat (count y) x))))", "user": "593ab583e4b069cdc2982b57"}, {"problem": 40, "code": "(fn [insert coll] (rest (mapcat #(conj [insert] %) coll)))", "user": "598ad666e4b02b9968b84ce1"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat (count %2) %)))", "user": "596539dce4b069c0a1a19783"}, {"problem": 40, "code": "(fn sk-interpose [iter list]\n  (drop-last (mapcat vector list (repeat iter))))", "user": "5884f377e4b0f1effa3b76a8"}, {"problem": 40, "code": "(fn fill [f l]\n  (if (= (count l) 1)\n    (list (first l))\n    (conj\n     (fill f (rest l))\n     f\n     (first l))))", "user": "598ab445e4b02b9968b84ce0"}, {"problem": 40, "code": "(fn [item s] (->> (map list s (repeat item))\n                  (apply concat)\n                  (drop-last)))", "user": "598dc40ce4b02b9968b84d2c"}, {"problem": 40, "code": "#(loop [result [] s %1 c %2]\n   (if (empty? (rest c))\n     (conj result (first c))\n     (let [result (conj result (first c) s)]\n       (recur result s (rest c)))))", "user": "56f5d0efe4b046a417f92078"}, {"problem": 40, "code": "#(loop [remaining %2 result ()]\n   (if (empty? remaining)\n     (reverse (rest result))\n     (recur (rest remaining) (conj result (first remaining) %1))))", "user": "5989ee61e4b021a7a535fed7"}, {"problem": 40, "code": "(fn [inter elems] (butlast (mapcat #(vector % inter) elems)))", "user": "5797d3d2e4b039eba2ecb106"}, {"problem": 40, "code": "#(drop 1 (flatten (for [n (range (count %2))] [%1 (nth %2 n)])))", "user": "59902fede4b0fcebec4de86d"}, {"problem": 40, "code": "(fn [sep col] (reduce #(conj %1 sep %2) (vector (first col)) (rest col)))", "user": "59874ff6e4b021a7a535fea1"}, {"problem": 40, "code": "(fn [item coll]\n\t(loop [i item f (first (rest coll)) r (drop 2 coll) acc (list (first coll))]\n\t\t(if (and (nil? f) (nil? (first acc)))\n\t\t\t[]\n\t\t\t(if (nil? f)\n\t\t\t\tacc\n\t\t\t\t(recur  i (first r) (rest r) (concat acc (list i f)))))))", "user": "598af379e4b02b9968b84ce6"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "591cc30be4b09b4ee5954c0a"}, {"problem": 40, "code": "(fn [v s]\n  (let [acc_init [(first s)]]\n  \t(reduce (fn [acc, x] (into acc [v x])) acc_init (rest s))))", "user": "55916764e4b0604b3f94d57b"}, {"problem": 40, "code": "(fn foo1\n  [parm1 parm2]\n  (loop\n    [x 0 coll parm2 col [] n parm1]\n    (if (= x (count coll))\n      (reverse (rest col))\n      (recur (inc x)\n             coll\n             (cons n (cons (get coll x) col))\n             n)))\n  )", "user": "598d0dc3e4b02b9968b84d18"}, {"problem": 40, "code": "(fn [x sq]\n  (->> (repeat x)\n       (interleave sq)\n       (drop-last)))", "user": "5992bcb2e4b0866487ed0d7b"}, {"problem": 40, "code": "(fn add [x y] (loop [i 0 acc (empty y)]\n                  (if (< (- (count y) 1)  i)\n                    (drop-last acc)\n                    (recur (inc i) (conj (conj acc (get y i)) x)))))", "user": "598d22b1e4b02b9968b84d1a"}, {"problem": 40, "code": "(fn [sep items] (reduce (fn [acc elem] (conj acc sep elem)) (vector (first items)) (rest items)))", "user": "5990fcb9e4b0866487ed0d5b"}, {"problem": 40, "code": "(fn [x y] (let[interposed (reduce #(conj (conj % %2) x) [] y)]\n                  (take (- (count interposed) 1) interposed)))", "user": "5971763fe4b01722bebd4c72"}, {"problem": 40, "code": "(fn i [x coll]\n  (let [[y & ys] coll]\n    (if (seq ys) \n      (lazy-seq (cons y (cons x (i x ys))))\n      (list y))))", "user": "594bc16be4b07ddc2dafae39"}, {"problem": 40, "code": "(fn [sep xs]\n  (drop-last\n  (mapcat \n   (fn [x] [x sep]) \n   xs)))", "user": "598debf0e4b02b9968b84d2e"}, {"problem": 40, "code": "(fn [x col]\n  (butlast (mapcat #(vector % x) col)))", "user": "5991d9cbe4b0866487ed0d69"}, {"problem": 40, "code": "(fn [elem col1]\n  (loop [c1 col1\n         new-col []]\n    (if (= 1 (count c1))\n      (conj new-col (first c1))\n      (recur (rest c1) (into new-col [(first c1) elem])))))", "user": "56478a82e4b0284900eef61e"}, {"problem": 40, "code": "(fn [x xs] (butlast (mapcat #(vector % x) xs)))", "user": "596d630ae4b069c0a1a19846"}, {"problem": 40, "code": "(fn [e col]\n    (butlast (mapcat #(vector % e) col)))", "user": "59932f49e4b0b211ea3aaaae"}, {"problem": 40, "code": "(fn [sep seq]\n  (rest\n  \t(loop [result [] items seq]\n      (if (empty? items)\n        result\n        (recur (conj result sep (first items)) (rest items))\n      )\n    )\n  )\n)", "user": "5991d2fae4b0866487ed0d68"}, {"problem": 40, "code": "(fn [i s]\n\t(apply vector\n\t\t(drop-last\n\t\t\t(mapcat #(vector % i) s)\n\t\t)\n\t)\n)", "user": "598d746ae4b02b9968b84d23"}, {"problem": 40, "code": "(fn [delimiter seq]\n  (butlast (mapcat (fn [val] [val delimiter]) seq)))", "user": "5965a773e4b069c0a1a1978a"}, {"problem": 40, "code": "(fn my-interpose [delim, seqq]\n  (loop [interposed []\n         start seqq]\n    (if (= (count start) 1)\n      (conj interposed (first start))\n      (recur (conj interposed (first start) delim)\n             (rest start)))))", "user": "59971e2de4b07157cc8daacc"}, {"problem": 40, "code": "(fn insert-value [v value] (butlast (mapcat #(vector % v) value)))", "user": "594d4c43e4b07ddc2dafae86"}, {"problem": 40, "code": "(fn [v s]\n  (reduce (fn [new-seq elem]\n            (conj new-seq v elem))\n          [(first s)]\n          (rest s)))", "user": "59946856e4b0b211ea3aaac7"}, {"problem": 40, "code": "(fn my-interpose [needle seq]\n  (loop [origin-seq seq\n    \t target-seq []]\n    (if (empty? origin-seq)\n      target-seq\n      (let [head (first origin-seq)\n            new-val (if (= 1 (count origin-seq))\n                      (list head)\n                      (list head needle))]\n      \t(recur (rest origin-seq)\n               (concat target-seq new-val))))))", "user": "58fed70de4b0438e51c2cfdd"}, {"problem": 40, "code": "(fn my-interpose\n\t[x y]\n\t(drop 1 (interleave (repeat x) y))\n)", "user": "55e46caae4b050e68259b451"}, {"problem": 40, "code": "(fn interp([x y] (interp x y [])) ([x y z] \n  (if (empty? y) (drop-last z)\n      (interp x (drop 1 y) (conj (conj z (first y)) x)))))", "user": "599b457ae4b07157cc8dab1f"}, {"problem": 40, "code": "(fn  [sep coll]\n  (reverse\n   (loop [remaining (seq coll)\n          return (list (first coll))]\n     (if (next remaining)\n       (recur (rest remaining)\n              (conj return sep (second remaining)))\n       return))))", "user": "59971dcbe4b07157cc8daacb"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last (mapcat #(conj [] % sep) coll)))", "user": "55ce2b6de4b0e31453f64a26"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %)))", "user": "5960a1a6e4b066ee0a44b08e"}, {"problem": 40, "code": "(fn [x s] \n  (rest (mapcat #(vector x %1) s) ))", "user": "594be1cce4b07ddc2dafae47"}, {"problem": 40, "code": "(fn f [sep coll]\n  (if (seq coll)\n    (if (seq (rest coll))\n      (conj (f sep (rest coll)) sep (first coll))\n      (seq coll))\n    ()))", "user": "59a24c92e4b066c664927d20"}, {"problem": 40, "code": "(fn [sep x]\n     (butlast (mapcat #(list % sep) x)))", "user": "594ea2a4e4b07ddc2dafaeb6"}, {"problem": 40, "code": "(fn my-interpose [sep lst]\n  (concat (take 1 lst) (mapcat #(list sep %) (rest lst)))\n)", "user": "59a2ba97e4b066c664927d2c"}, {"problem": 40, "code": "(fn [elem s]\n  (reduce \n   (fn [result each]\n     (concat result (vector elem each)))\n   (vector (first s))\n   (rest s)))", "user": "5989e080e4b021a7a535fed6"}, {"problem": 40, "code": "(fn [n coll] (butlast (mapcat #(vector % n) coll)))", "user": "59a512b7e4b066c664927d5e"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "576c2ecae4b07c67f59d1fbb"}, {"problem": 40, "code": "#(rest (mapcat vector (repeat %) %2))", "user": "598858d0e4b021a7a535feb5"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop 1 (interleave (repeat sep) coll)))", "user": "59944e73e4b0b211ea3aaac2"}, {"problem": 40, "code": "#(butlast (mapcat vector %2 (repeat %1)))", "user": "59a57e91e4b066c664927d63"}, {"problem": 40, "code": "(fn [sep xs] (drop-last (mapcat #(list % sep) xs)))", "user": "59a72effe4b066c664927d94"}, {"problem": 40, "code": "(fn my-interpose [separator the-seq]\n  (let [[first-elem & rest-elems] the-seq]\n    (if (empty? rest-elems)\n      [first-elem]\n      (concat [first-elem separator] (my-interpose separator rest-elems)))))", "user": "59a96a85e4b0bcf4e9a43b13"}, {"problem": 40, "code": "(fn [i x] (rest (mapcat #(vector i %) x)))", "user": "59ab8beee4b08cbb53654d9e"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1) ) )", "user": "57bffed6e4b05aa3c4741c89"}, {"problem": 40, "code": "(fn [sep sq]\n           (let [aux \n                 (fn [[head & tail] acc]\n                   (cond\n                    (empty? tail)\n                    (conj acc head)\n              \n                    :else \n                    (recur tail (conj acc head sep))))]\n             (aux sq [])))", "user": "57e6f90de4b0bfb2137f5af6"}, {"problem": 40, "code": "(fn [sep seq]\n (drop-last (interleave seq (repeat (count seq) sep))))", "user": "59a8405ce4b0bcf4e9a43af1"}, {"problem": 40, "code": "(fn f [v [x & xs]]\n  (if xs\n    (conj (f v xs) v x)\n    (list x)))", "user": "59ac0965e4b08cbb53654da6"}, {"problem": 40, "code": "(fn f [y [x & xs]]\n  (cons x (if (not-empty xs)\n            (cons y (f y xs)))))", "user": "55b28b57e4b01b9910ae296c"}, {"problem": 40, "code": "(fn [a xs]\n  (into [] (flatten (concat (map (fn [x] [x a]) (butlast xs)) [(last xs)]))))", "user": "599d49a7e4b0871e7608b7f4"}, {"problem": 40, "code": "(fn f [i [x & rest]] (when x (concat [x] (when rest [i]) (f i rest))))", "user": "59adec09e4b0e1f4e384c897"}, {"problem": 40, "code": "(fn [e v] (vec\n    (drop-last 1\n      (flatten \n        (for [x v] [x e])))))", "user": "540e97f9e4b0addc1aec671f"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "user": "59a0262ee4b0871e7608b82d"}, {"problem": 40, "code": "(fn [x s]\n  (reduce #(concat %1 [x %2]) [(first s)] (rest s) \n   ))", "user": "598229d6e4b021a7a535fdfb"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "59b1c2eae4b0e1f4e384c8ec"}, {"problem": 40, "code": "#(rest (mapcat vector (repeat %1) %2))", "user": "59089229e4b047aa04b1997c"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "59ac559ee4b00adcf69795d2"}, {"problem": 40, "code": "(fn [sep xs]\n  (concat (flatten (map #(vector %& sep) (butlast xs))) (conj (empty xs) (last xs)))\n  )", "user": "59a80652e4b0bcf4e9a43aeb"}, {"problem": 40, "code": "(fn my-interpose [value coll]\n  (let [\n        n (dec (* 2 (count coll)))\n        ]\n    (into (empty coll) (take n (mapcat #(vector %1 %2) coll (repeat value))))\n  ))", "user": "58f3a2d4e4b0438e51c2ceac"}, {"problem": 40, "code": "(fn [sep s] (drop 1 (mapcat (fn [arg] [sep arg]) s)))", "user": "571543bbe4b07c98581c3ad4"}, {"problem": 40, "code": "#(loop [oldSeq %2 newSeq []]\n   (if (= 1 (count oldSeq))\n     (conj newSeq (first oldSeq))\n     (recur (rest oldSeq) (conj newSeq (first oldSeq) %1))))", "user": "59b554cee4b05c620303ca0f"}, {"problem": 40, "code": "#(butlast (reduce (fn [a %2]\n                  (-> a\n                      (conj %2)\n                      (conj %1)\n                      ))\n                [] %2))", "user": "59a3f3dce4b066c664927d48"}, {"problem": 40, "code": "(fn do-interpose\n  [sep coll]\n  (butlast\n    (flatten\n      (map (fn [a b] [a b]) coll (repeat sep)))))", "user": "59b62f8de4b05c620303ca1f"}, {"problem": 40, "code": "(fn [divider col]\n  (concat (mapcat vector col (repeat (dec (count col)) divider)) (vector (last col))))", "user": "57481f1fe4b009280f9f2b82"}, {"problem": 40, "code": "(fn [a b] (rest (into [] (flatten (map #(vector a %) b)))))", "user": "59a2c7d5e4b066c664927d2e"}, {"problem": 40, "code": "(fn [i xs] (drop-last (flatten (map #(identity [% i]) xs))))", "user": "597fa3fbe4b021a7a535fdbf"}, {"problem": 40, "code": "(fn my-interpose\n  [x xs] (butlast(mapcat(fn [a] (vector a x) ) xs)))", "user": "59afe4bae4b0e1f4e384c8c0"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "59bac5c9e4b0a024fb6ae3ed"}, {"problem": 40, "code": "(fn [elem seq]\n  (-> (reduce #(conj %1 %2 elem) [] seq)\n       butlast))", "user": "56c44c34e4b05cc29241ee96"}, {"problem": 40, "code": "#(drop-last (flatten (map (fn [x] (conj '() %1 x)) %2)))", "user": "5998b0a1e4b07157cc8daaec"}, {"problem": 40, "code": "#(take (- (* 2 (count %2)) 1)\n       (interleave %2 (repeat %1)))", "user": "592fa9f8e4b072a2710fcfcb"}, {"problem": 40, "code": "(fn [sep coll]\n  (reduce\n    (fn [new-coll current]\n      (if (empty? new-coll)\n        (conj new-coll current)\n        (conj new-coll sep current)))\n    [] coll))", "user": "59be62d5e4b0a024fb6ae435"}, {"problem": 40, "code": "(fn [x xs]\n  (butlast (reduce #(conj %1 %2 x) [] xs)))", "user": "59abd1d8e4b08cbb53654da4"}, {"problem": 40, "code": "(fn\n  [x y]\n  (butlast (#(interleave %2 (repeat (count %2) %1)) x y)))", "user": "59a9c22ae4b08cbb53654d75"}, {"problem": 40, "code": "(fn [arg1 arg2]\n\n  (loop [col arg2 result []]\n\n    (if (= 1 (count col))\n\n      (conj result (first col))\n\n      (recur (rest col) (conj result (first col) arg1)))))", "user": "59c5093ce4b0a024fb6ae50c"}, {"problem": 40, "code": "#(drop-last (mapcat vector %2 (repeat %1)))", "user": "54058af3e4b0addc1aec6669"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "59358f74e4b04f87174def52"}, {"problem": 40, "code": "(fn\n  [x s]\n  (loop [x x s s result []]\n    (if (empty? (rest s))\n      (conj result (first s))\n      (recur x (rest s) (conj result (first s) x)))))", "user": "59c4d93fe4b0a024fb6ae507"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "59c94a69e4b0a024fb6ae576"}, {"problem": 40, "code": "(fn [separator values] (butlast (reduce (fn [acc, x] (concat acc [x separator])) [] values)))", "user": "59c22fbae4b0a024fb6ae4a3"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat (count %2) %1)))", "user": "5137fb22e4b0a5db03d727d3"}, {"problem": 40, "code": "(fn [a b]\n   (loop [a a\n          b b\n          return []]\n     (if (empty? b)\n       return\n       (if (= 1 (count b))\n         (recur a (rest b) (conj return (first b)))\n         (recur a (rest b) (conj return (first b) a))))))", "user": "57c44053e4b05aa3c4741ccb"}, {"problem": 40, "code": "(fn [a b]\n  (reverse (reduce (fn [c d] (conj c a d)) (list (first b)) (rest b))))", "user": "59c7c2cde4b0a024fb6ae54b"}, {"problem": 40, "code": "(fn [sep [fst & rst]] (reduce #(conj %1 sep %2) [fst] rst))", "user": "59cc4d5ee4b0a024fb6ae5d0"}, {"problem": 40, "code": "(fn [delim xs] (reduce\n                (fn [acc x] (conj acc delim x))\n                [(first xs)]\n                (rest xs)))", "user": "59cc8d8de4b0a024fb6ae5d5"}, {"problem": 40, "code": "(fn [v coll]\n  (butlast (mapcat #(vector %1 v) coll)))", "user": "59cb706ee4b0a024fb6ae5ba"}, {"problem": 40, "code": "(fn [sep col] (butlast (reduce #(conj %1 %2 sep) [] col)))", "user": "58c7131be4b021aa9917ed6d"}, {"problem": 40, "code": "#(drop-last (mapcat (fn [x1 x2] (conj [x1] x2)) %2 (repeat %1)))", "user": "59bdf0eae4b0a024fb6ae42e"}, {"problem": 40, "code": "#(take (- (* 2 (count %2)) 1)  (interleave %2 (repeat (count %2) %1)))", "user": "59cf0d75e4b0ef0a1e9b5b5f"}, {"problem": 40, "code": "#(loop [i %1 ov (drop-last 1 %2) nv (take-last 1 %2)]\n  (if (empty? ov)\n  \tnv\n    (recur i (drop-last 1 ov) (conj nv i (last ov)))\n  )\n)", "user": "5992de05e4b0866487ed0d7e"}, {"problem": 40, "code": "#(rest (mapcat list (repeat %) %2))", "user": "59c734e3e4b0a024fb6ae53f"}, {"problem": 40, "code": "#(loop [seq %2 res []]\n   (if (= 1 (count seq))\n     (conj res (last seq))\n     (recur (rest seq) (conj (conj res (first seq) ) %))))", "user": "594a7ed1e4b07ddc2dafae02"}, {"problem": 40, "code": "(fn [sep xs]\n        (drop 1 (interleave (repeat sep) xs)))", "user": "57ca95f2e4b05aa3c4741d3b"}, {"problem": 40, "code": "#(loop [b %2\n        c []]\n   (if (= 1 (count b))\n     (conj c (last b))\n     (recur (rest b) (conj c (first b) %1))))", "user": "595a3b41e4b066ee0a44afb7"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "59b714dbe4b05c620303ca3c"}, {"problem": 40, "code": "(fn [value items] ((fn [running left] (if (empty? left) running (recur (conj running value (first left)) (rest left)))) [(first items)] (rest items)))", "user": "59cf6fbce4b0ef0a1e9b5b6c"}, {"problem": 40, "code": "(fn [e coll] (butlast (mapcat #(vector % e) coll)))", "user": "59c8c9bee4b0a024fb6ae567"}, {"problem": 40, "code": "(fn [x s]\n  (butlast\n    (mapcat #(vector % x) s)\n   )\n  )", "user": "55fd0d19e4b0f488688e067a"}, {"problem": 40, "code": "(fn [sep coll] (drop-last(reduce #(concat %1 [%2 sep]) [] coll)))", "user": "51f38193e4b0fca5e8b48226"}, {"problem": 40, "code": "#(loop[acc nil coll %2]\n   (if (empty? coll) (reverse (rest acc))\n     (recur (cons %1 (cons (first coll) acc)) (rest coll))))\n\n\n;(fn [sep coll]\n;  (drop-last\n;   (mapcat #(conj [] % sep) coll)))", "user": "59c77511e4b0a024fb6ae545"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "59d4a160e4b0ef0a1e9b5be7"}, {"problem": 40, "code": "(fn [m x] (drop-last (mapcat #(list % m) x)))", "user": "59cf4013e4b0ef0a1e9b5b68"}, {"problem": 40, "code": "(fn [a b] \n  (if (string? a) \n    (clojure.string/join a b)\n    (butlast (interleave b \n                (take (count b)\n                      (repeat a)\n                )\n    ))\n  )\n)", "user": "59d75e36e4b0ef0a1e9b5c32"}, {"problem": 40, "code": "(fn [i a]\n  (drop-last (reduce #(conj %1 %2 i) [] a)))", "user": "59ddae03e4b01968742fed65"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "572de985e4b0cd1946bd0f7c"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "59da6480e4b0ef0a1e9b5c68"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "53bfd8c4e4b0c98a41f5cca8"}, {"problem": 40, "code": "(fn [n lst]\n  (vec\n    (drop-last\n      (flatten\n        (for [i lst]\n          (concat (list i) (list n)))))))", "user": "59dfd369e4b08badc2a0c4dd"}, {"problem": 40, "code": "(fn cool [x lst]\n  (butlast (interleave lst (repeat (count lst) x))))", "user": "59e0111ae4b08badc2a0c4e4"}, {"problem": 40, "code": "(fn\n   [n coll]\n   (let [ncoll (repeat (count coll) n)\n         coll coll\n         ret []]\n      (rest (reduce into [] (map #(identity [%1 %2]) ncoll coll)))))", "user": "513f1f18e4b051389b345b3d"}, {"problem": 40, "code": "(fn [x lst] (butlast (mapcat #(list % x) lst)))", "user": "59e18b9be4b08badc2a0c50f"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last\n   (mapcat #(conj [] % sep) coll)))", "user": "56e1122fe4b03a7c14b85a20"}, {"problem": 40, "code": "(fn interpose-seq [sep col]\n    (rest (reverse (reduce\n        #(conj (conj %1 sep) %2)\n        '()\n        col))))", "user": "59aeff12e4b0e1f4e384c8af"}, {"problem": 40, "code": "(fn [sep coll]\n   (loop [inicial []\n          colle coll]\n     (if (empty? colle)\n       inicial\n       (let [remaining (rest colle)\n             elem (first colle)]\n         (recur (if (empty? remaining)\n                  (conj inicial elem)\n                  (conj inicial elem sep)) remaining)))))", "user": "58a34442e4b02bd94d917ef2"}, {"problem": 40, "code": "(fn my-interpose [n lst]\n  (reverse (conj (reverse(flatten (butlast (map #(vector % n) lst)))) (last lst))))", "user": "59e12c94e4b08badc2a0c509"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "user": "59e0f38ae4b08badc2a0c500"}, {"problem": 40, "code": "(fn zip\n  ([step coll] (zip step coll []))\n  ([step coll init]\n   (cond\n     (empty? coll) init\n     (= 1 (count coll)) (zip step (rest coll) (conj init (first coll)))\n     :else (zip step (rest coll) (conj init (first coll) step)))))", "user": "579f89d5e4b05302be0b72ff"}, {"problem": 40, "code": "(fn [x items]\n     (butlast (mapcat vector items (repeat x))))", "user": "59e48db0e4b08badc2a0c53e"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat (count %2) %1)))", "user": "59dd38a8e4b0a0ac046f2503"}, {"problem": 40, "code": "(fn   [x lst]\n(loop [lk  ()\n       jk  0\n       ss  (cons x ())]\n  (if (= jk  (count lst))\n      lk\n    (recur\n      (if (= jk  (dec (count lst)) )\n        (reverse (cons  (first (drop jk lst)) lk))\n      (concat (reverse (cons  (first (drop jk lst)) ss)) lk))\n      (inc jk)\n      ss))))", "user": "59deba46e4b01968742fed7f"}, {"problem": 40, "code": "(fn algo [x lst]\n  (loop [\n         x x\n         lst lst\n         res ()\n         ]\n    (if (empty? (rest lst))\n      (reverse (cons (first lst) res))\n      (recur x (rest lst) (cons x (cons(first lst) res)))\n      )\n    )\n  )", "user": "59e56c75e4b08badc2a0c556"}, {"problem": 40, "code": "(fn [valorSeparador lista]\n  (drop-last 1 (reduce (fn[accum elemento] (into accum [elemento valorSeparador])) [] lista))\n  )", "user": "59e63a2ce4b08badc2a0c569"}, {"problem": 40, "code": "(fn [n xs]\n (drop-last\n  (interleave xs (repeat n))))", "user": "57eaf869e4b0bfb2137f5b56"}, {"problem": 40, "code": "(fn [x y]\n  (loop [coll y\n         item x\n         finalcoll []]\n    (if (= (count coll) 1)\n      (cons (first coll) finalcoll)\n         (recur (drop-last coll) x (cons x (cons (last coll) finalcoll))))))", "user": "59e4fc25e4b08badc2a0c54f"}, {"problem": 40, "code": "#(rest (reduce (fn [xs x] (conj xs % x)) [] %2))", "user": "580e7761e4b0849f6811b753"}, {"problem": 40, "code": "(fn [x col]\n  (rest (mapcat #(list x %) col)))", "user": "59e62655e4b08badc2a0c568"}, {"problem": 40, "code": "(fn f\n  [x lst]\n  (concat\n    (mapcat #(cons % (list x)) (butlast lst))\n    (list (last lst))))", "user": "59e778aae4b0249b72820716"}, {"problem": 40, "code": "(fn [x s] \n(rest (mapcat #(vector x %1) s) ))", "user": "59e55cc8e4b08badc2a0c555"}, {"problem": 40, "code": "(fn my-interpose [element lst]\n(butlast (mapcat #(list % element) lst)))", "user": "59dd387be4b0a0ac046f2502"}, {"problem": 40, "code": "(fn my-interleave\n\t[n lstB]\n  \t(if(empty? lstB)()\n      (loop [elemB (first lstB)\n             lstB (rest lstB)\n             result ()]\n        (cond\n         (empty? lstB) (reverse (cons elemB result))\n         :else (recur (first lstB)\n                      (rest lstB)\n                      (cons n (cons elemB result)))))))", "user": "59e4e3cbe4b08badc2a0c54a"}, {"problem": 40, "code": "(fn interposeSeq \n  [i j]\n  (rest (mapcat #(list i %) j)))", "user": "59dd3930e4b0a0ac046f2504"}, {"problem": 40, "code": "(fn Interpose-a-Seq\n  [n lst]\n  (cond\n    (empty? (rest lst)) lst\n    :else  (concat (concat (list (first lst)) (list n)) (Interpose-a-Seq n (rest lst)))))", "user": "59e14ee3e4b08badc2a0c50c"}, {"problem": 40, "code": "(fn my-interpose\n  [element lst]\n  (->>\n    (mapcat (fn [x] (list x element)) lst)\n    butlast))", "user": "59e8fef3e4b0249b72820743"}, {"problem": 40, "code": "(fn myfunc [s coll] (rest (reduce #(into %1 [s %2]) [] coll)))", "user": "59e95cafe4b0249b7282074b"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "59e9f03be4b0249b72820752"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "59ea287ee4b0249b72820760"}, {"problem": 40, "code": "(fn my-interleave\n  [n lst] \n  (butlast (mapcat #(vector % n) lst)))", "user": "59e68254e4b0249b728206fc"}, {"problem": 40, "code": "#(rest (mapcat list (repeat %1) %2))", "user": "59eb63e3e4b0249b7282077c"}, {"problem": 40, "code": "(fn [n ys] \n\t(let [xs (reverse ys)]\n\t((fn iter [xs res]\t\n\t\t(if (empty? xs)\n\t\t\tres\n\t\t\t(iter (rest xs)\n\t\t\t\t  (cons (first xs) (cons n res))))) (rest xs)\n                \t                                (list (first xs)))))", "user": "59ea85e4e4b0249b72820767"}, {"problem": 40, "code": "(fn my-interpose [n lst]\n  (loop [lst lst\n         result ()]\n    (if (empty? lst) \n      (next result)\n      (recur (butlast lst)(cons n(cons (last lst)result))))))", "user": "59dd387ae4b0a0ac046f2501"}, {"problem": 40, "code": "(fn [elm seq]\n  (reduce\n    (fn [acc curr]\n      (concat acc [elm curr]))\n    (take 1 seq)\n    (rest seq)))", "user": "5984e7dee4b021a7a535fe43"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5957cc41e4b066ee0a44af76"}, {"problem": 40, "code": "(fn myfunc [s coll] (rest (reduce #(into %1 [s %2]) [] coll)))", "user": "59ed01ede4b0249b7282079a"}, {"problem": 40, "code": "#(loop [c %2 acc []] (cond (empty? c) acc (= (count c) 1) (conj acc (first c)) :else (recur (rest c) (conj acc (first c) %1))))", "user": "59c8ffe6e4b0a024fb6ae56c"}, {"problem": 40, "code": "(fn Jfunc [x ys]\n  (rest (mapcat (fn [z] [x z]) ys))\n  )", "user": "59e0f839e4b08badc2a0c502"}, {"problem": 40, "code": "(fn [sep x] \n  (drop 1 (interleave (repeat sep) x)))", "user": "589560d8e4b00487982d5281"}, {"problem": 40, "code": "(fn x[s a] (if (= 1 (count a)) (list (first a)) (cons (first a) (cons s (x s (rest a))))))", "user": "59e8bb43e4b0249b72820735"}, {"problem": 40, "code": "(fn interpose- [x ys]\n  (if (= (count ys) 1)\n    ys\n    (concat [(first ys) x] (interpose- x (rest ys)))))", "user": "59ee6801e4b0966464fe6a1f"}, {"problem": 40, "code": "(fn [n X] (flatten (reduce (fn [a b] (list a n b)) X)))", "user": "553bc237e4b09218d5f4500a"}, {"problem": 40, "code": "(fn seq-interpose [sep ls]\n  (butlast (apply concat (map #(vector % sep) ls))))", "user": "59ece650e4b0249b72820795"}, {"problem": 40, "code": "(fn [e xs]\n  (butlast (mapcat #(list % e) xs)))", "user": "59f2af64e4b0966464fe6a87"}, {"problem": 40, "code": "(fn[s a] (concat (mapcat #(->[% s]) (butlast a)) [(last a)]))", "user": "58d96bdce4b0a4d5acaab638"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "59ea0944e4b0249b72820758"}, {"problem": 40, "code": "#( loop [c %2, s [] ] (if  (next c)  (recur (rest c) (conj s (first c) %1)) (conj s (first c)) ))", "user": "59c76402e4b0a024fb6ae542"}, {"problem": 40, "code": "(fn my-interpose [delimiter [x & more]]\n  (lazy-seq\n   (when x\n     (if more\n       (cons x (cons delimiter (my-interpose delimiter more)))\n       (cons x nil)))))", "user": "59e8cd8be4b0249b72820739"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %1)))\n;; #(butlast (interleave %2 (repeat %1)))", "user": "59d631d4e4b0ef0a1e9b5c09"}, {"problem": 40, "code": "(fn [el coll]\n    (pop (vec (apply concat \n           (for [x coll]\n      (list x el))))))", "user": "59ba2ea0e4b0a024fb6ae3e1"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "59ef6cfae4b0966464fe6a32"}, {"problem": 40, "code": "(fn custom-interpose [a b]\n  (drop-last (mapcat #(vector % a) b))\n  )", "user": "59f78b49e4b0ca45a743a30e"}, {"problem": 40, "code": "(fn [x lst] (butlast (mapcat #(list % x) lst)))", "user": "59f8b925e4b0ca45a743a327"}, {"problem": 40, "code": "(fn [v xs]\n  (let [xs (reduce #(conj %1 %2 v) [] xs)]\n    (into [] (take (dec (count xs)) xs))))", "user": "595d224de4b066ee0a44b016"}, {"problem": 40, "code": "#(take (- (* 2 (count %2)) 1 ) (interleave %2 (repeat (count %2) %1)))", "user": "59f90e6ae4b0ca45a743a337"}, {"problem": 40, "code": "(fn my-sep [x ys](apply vector (drop-last (mapcat #(vector % x) ys))))", "user": "59f7f55de4b0ca45a743a313"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat (count %2) %1)))", "user": "59f192e0e4b0966464fe6a5e"}, {"problem": 40, "code": "(fn [seperator coll]\n    (-> (for [c coll] [c seperator])\n        flatten\n        butlast\n        ))", "user": "5683fcafe4b0945ebc182aa8"}, {"problem": 40, "code": "(fn foo [sep liste](butlast  (flatten (map #(list %1 sep) liste))))", "user": "577412c6e4b0979f896515f6"}, {"problem": 40, "code": "(fn [v s]\n\n  (rest (interleave (repeat v) s))\n\n)", "user": "56f2611fe4b04a395b9a04a2"}, {"problem": 40, "code": "(fn inter [sep col]\n  (if (> (count col) 1)\n    (concat (list (first col) sep) (inter sep (rest col)))\n    col))\n\n;; much more elegant would be:\n;; - interleave the repeated seperator with the collection\n;; - discard the first element of the result\n;; -> #(rest (interleave (repeat %1) %2))", "user": "59a080e3e4b0871e7608b837"}, {"problem": 40, "code": "(fn my-interpose\n  [separator coll]\n    (butlast (mapcat #(list %1 separator) coll))\n  )", "user": "59fa5fe0e4b0ca45a743a35f"}, {"problem": 40, "code": "(fn [split seq] (rest (flatten (map #(list split %) seq))))", "user": "59f15e20e4b0966464fe6a5a"}, {"problem": 40, "code": "#(loop [x %1 y %2 z []]\n\t(cond (empty? y) z\n      \t  (empty? (rest y)) (concat z [(first y)])\n   \t\t  :else (recur x (rest y) (concat z [(first y) x]))))", "user": "59fea630e4b01bb0ae8afd10"}, {"problem": 40, "code": "(fn my-interpose [sep coll]\n \t(drop 1 (interleave (repeat sep) coll)))", "user": "59fd069ae4b01bb0ae8afcf4"}, {"problem": 40, "code": "(fn [x y]\n  (drop-last (mapcat #(vector % x) y)))", "user": "5628f33ce4b00e49c7cb47f3"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "594e6b8ce4b07ddc2dafaeac"}, {"problem": 40, "code": "(fn [sep data]\n    (let [g (fn [res data]\n              (cond\n                (seq (rest data))\n                (recur (conj res (first data) sep) (rest data))\n                (= (count data) 1)\n                (conj res (first data))\n                :else\n                res))]\n      (g [] data)))", "user": "593352b7e4b072a2710fd052"}, {"problem": 40, "code": "(fn [sep xs]\n  ((comp drop-last interleave) xs (repeat sep)))", "user": "59fa241ee4b0ca45a743a358"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "59f590ade4b0966464fe6ac1"}, {"problem": 40, "code": "(fn my-interpose [separator a-seq]\n   (if (empty? a-seq)\n     a-seq\n     (let [head (first a-seq)\n           tail (rest a-seq)]\n       (cons\n        head \n        (reduce concat (map #(vector separator %) tail))))))", "user": "59fa7fb0e4b0ca45a743a366"}, {"problem": 40, "code": "(fn [sep xs]\n  (reduce \n   #(if (empty? %1) \n      (vector %2) \n      (conj %1 sep %2))\n   [] xs))", "user": "5a01d8f6e4b01bb0ae8afd53"}, {"problem": 40, "code": "(fn [i s]\n  (reduce \n   (fn [x y]\n     (concat x [i y])) (take 1 s) (rest s)))", "user": "5a04e923e4b01bb0ae8afda9"}, {"problem": 40, "code": "(fn [value coll]\n  (rest (mapcat vector (repeat value) coll)))", "user": "5a065388e4b01bb0ae8afdcb"}, {"problem": 40, "code": "(fn interp\n   [x col]\n   (flatten (reduce (fn [item1 item2]\n              (conj [item1] x item2))\n            col)))", "user": "59fe5612e4b01bb0ae8afd0c"}, {"problem": 40, "code": "#(drop-last (mapcat vector %2 (repeat %)))", "user": "59fa5773e4b0ca45a743a35e"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat (count %2) %) %2))", "user": "59fedc26e4b01bb0ae8afd17"}, {"problem": 40, "code": "(fn ipose [el s]\n\t(vec (take (- (* 2 (count s)) 1) (apply concat\n\t\t(map (fn [li]\n\t\t\t(vec (list li el))\n\t\t\t) s))))\n\t)", "user": "5a025edde4b01bb0ae8afd64"}, {"problem": 40, "code": "(comp butlast (fn [x coll]\n                        (let [couples (apply map vector [coll (repeat x)])]\n                          (for [x couples y x] y))))", "user": "5a082ce4e4b01bb0ae8afdec"}, {"problem": 40, "code": "(fn [a xs] (rest (reduce #(conj % a %2) [] xs)))", "user": "5a00cb31e4b01bb0ae8afd36"}, {"problem": 40, "code": "#(take (- (* 2 (count %2)) 1) (interleave %2 (repeat %1)))", "user": "5a080bdde4b01bb0ae8afde9"}, {"problem": 40, "code": "(fn [x, y] (butlast (flatten (map #(conj (list x) %) y))))", "user": "5a0a3473e4b0eab8c0448941"}, {"problem": 40, "code": "(fn [x,y] (butlast (interleave y (-> y \n                count \n                (repeat x) \n                vec) )))", "user": "5a075e73e4b01bb0ae8afdd9"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "59f820d9e4b0ca45a743a316"}, {"problem": 40, "code": "(fn [x coll] \n          (butlast \n                   (interleave coll (repeat x))))", "user": "5a07fefee4b01bb0ae8afde5"}, {"problem": 40, "code": "#(butlast (flatten (map list %2 (repeat %1))))", "user": "595e6c76e4b066ee0a44b043"}, {"problem": 40, "code": "(fn [sep xs]\n      (concat (interleave xs (repeat (dec (count xs)) sep)) (list (last xs)))\n      )", "user": "5a062e07e4b01bb0ae8afdc5"}, {"problem": 40, "code": "(fn [x coll] (butlast(mapcat #(list % x) coll)))", "user": "5a0a25fce4b0eab8c044893d"}, {"problem": 40, "code": "(fn intpos [x xs]\n  (rest (mapcat (partial list x) xs))\n  )", "user": "58d1c1b1e4b03c36ff7e58ef"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "59f44189e4b0966464fe6aab"}, {"problem": 40, "code": "(fn [value list]\n  (rest (reduce (fn [result x] (conj result value x)) [] list)))", "user": "5a12dea3e4b04bbd27e6da44"}, {"problem": 40, "code": "(fn [sep c]\n  (drop-last (into (empty c) (interleave c (repeat sep)))))", "user": "54497569e4b032a45b8693d2"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(conj [%] v) coll)))", "user": "598876fee4b021a7a535feb7"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5a0a04eee4b0eab8c0448935"}, {"problem": 40, "code": "(fn [x sq] (drop-last (flatten (map #(list % x) sq))))", "user": "5a14959de4b0ff51aa4b31a0"}, {"problem": 40, "code": "(fn [val seque] (vec (butlast (flatten (map #(vector %1 val) seque)))))", "user": "5830377ee4b051871117c004"}, {"problem": 40, "code": "#(reduce (fn[x y](if(empty? x) (conj x y) (conj (conj x %1) y))) [] %2)", "user": "55129667e4b06e50f9beb1ac"}, {"problem": 40, "code": "(fn [sep col]\n  (rest (mapcat (fn [e] [sep e]) col)))", "user": "5a188be3e4b0ff51aa4b31ec"}, {"problem": 40, "code": "#(vec (rest (flatten(map vector (vec (repeat (count %2) %1 )) %2))))", "user": "59135c11e4b0163c97b36f02"}, {"problem": 40, "code": "(fn [s xs] (rest (mapcat #(list s %1) xs)))", "user": "5a0ce1a5e4b04bbd27e6d9b7"}, {"problem": 40, "code": "(fn [x y] (drop-last (vec (mapcat (fn [a] [a x]) y))))", "user": "5a14228fe4b0ff51aa4b3193"}, {"problem": 40, "code": "(fn [x l]\n  (into [] (drop-last (reduce concat (map #(vector % x) l)))))", "user": "574b4f3ee4b02ea114799207"}, {"problem": 40, "code": "(fn inter [s col]\n  (if (> (count col) 1)\n    (concat [(first col)] [s] (inter s (rest col)))\n    col))", "user": "5a144fd8e4b0ff51aa4b319a"}, {"problem": 40, "code": "(fn [sep lst] (rest (interleave (repeat sep) lst)))", "user": "5a05a807e4b01bb0ae8afdb8"}, {"problem": 40, "code": "#(drop-last (interleave %2 (vec (repeat (count %2) %1)) ))", "user": "59fcc31fe4b01bb0ae8afcef"}, {"problem": 40, "code": "(fn [value coll1] \n  (drop-last (reduce into [] \n  \t(map \n     \t#(vector %1 %2) \n     \tcoll1 \n     \t(repeat (count coll1) value)))))", "user": "5a0ef454e4b04bbd27e6d9fa"}, {"problem": 40, "code": "#(butlast(mapcat vector %2 (repeat %1) ))", "user": "5a18488ee4b0ff51aa4b31e5"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "user": "59f043d0e4b0966464fe6a3d"}, {"problem": 40, "code": "(fn [i xs] (rest (reduce #(concat %1 [i %2]) [] xs)))", "user": "5a16da30e4b0ff51aa4b31cc"}, {"problem": 40, "code": "#(loop [head (first %2)\n        tail (rest %2)\n        result []]\n  (if (empty? tail)\n    (conj result head)\n    (recur (first tail)\n           (rest tail)\n           (into result [head %1]))))", "user": "590b8607e4b047aa04b199db"}, {"problem": 40, "code": "(fn [v coll]\n  (reduce #(conj %1 v %2) [(first coll)] (rest coll)))", "user": "580a0783e4b0a837a8b30d2c"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "58a32c21e4b02bd94d917eeb"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat (count %2)  %1)))", "user": "59ff9424e4b01bb0ae8afd24"}, {"problem": 40, "code": "(fn i [s [f & r]] (lazy-seq (if r (conj (i s r) s f) (if f [f]))))", "user": "5112500ee4b0350614f07a72"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "59b69bbee4b05c620303ca2a"}, {"problem": 40, "code": "#(drop-last 1 (flatten (map vector %2 (repeat %1))))", "user": "5a0c822fe4b04bbd27e6d9b0"}, {"problem": 40, "code": "#(drop-last (mapcat list %2 (take (count %2) (repeat %1))))", "user": "5a1ef970e4b0ff51aa4b327d"}, {"problem": 40, "code": "(fn magic [sep x]\n\t(if (<= (count x) 1)\n    \tx\n    \t(concat [(first x)] [sep] (magic sep (rest x)))\n    )\n)", "user": "5a214798e4b0ff51aa4b32aa"}, {"problem": 40, "code": "(fn [v l] (butlast (flatten (map #(vector %1 v) l))))", "user": "5a208195e4b0ff51aa4b32a3"}, {"problem": 40, "code": "(fn intersperse [inter input]\n    (loop [current input result []]\n          (if (= 1 (count current))\n              (conj result (first current))\n              (recur (rest current) (conj result (first current) inter)))))", "user": "5a21d34ce4b0ff51aa4b32b9"}, {"problem": 40, "code": "#(butlast (reduce (fn [items left]\n           (conj items left %1))\n         []\n         %2))", "user": "5a1149ace4b04bbd27e6da26"}, {"problem": 40, "code": "#(butlast (mapcat vector %2 (take (count %2) (repeat %1))))", "user": "55ec879ae4b0121d4835fdc8"}, {"problem": 40, "code": "(fn x-interpose [n xs]\n    (if (empty? (rest xs))\n\txs\n      (conj (conj (x-interpose n (rest xs)) n) (first xs))))", "user": "5a250b86e4b07f18be40aa19"}, {"problem": 40, "code": "(fn [i lst] (butlast (mapcat #(vector % i) lst)))", "user": "5a19d181e4b0ff51aa4b3207"}, {"problem": 40, "code": "(fn [c a-list]\n  (let [couples (map #(list %1 %2) a-list (repeat c))\n        result (reduce into [] couples)\n        size   (dec (count result))]\n    (take size result)))", "user": "5054d243e4b0b1b9d1860eb5"}, {"problem": 40, "code": "(fn [c cl] \n  (->> cl\n       (map #(cons % (cons c nil)))\n       (flatten)\n       (drop-last)))", "user": "568d381ee4b0dcc4269f40c1"}, {"problem": 40, "code": "(fn [v s]\n  (rest (mapcat #(list v %) s)))", "user": "5a21c3f9e4b0ff51aa4b32b7"}, {"problem": 40, "code": "(fn [sep coll] (butlast (mapcat #(vector % sep) coll)))", "user": "59690e79e4b069c0a1a197e0"}, {"problem": 40, "code": "(fn [del coll] (butlast (mapcat (fn [x] [x del]) coll)))", "user": "5a135573e4b0ff51aa4b3180"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5a2960fde4b07f18be40aa78"}, {"problem": 40, "code": "(fn [i coll]\n    (let [lazy-i-seq (fn gen-is []\n                       (lazy-seq (cons i (gen-is))))]\n      (drop-last (apply concat (map list coll (lazy-i-seq))))))", "user": "5a2c20c3e4b09cafd31c7f51"}, {"problem": 40, "code": "(fn [v col] (butlast  (mapcat #(vector % v) col )))", "user": "5a2834dfe4b07f18be40aa64"}, {"problem": 40, "code": "(fn [v l]\n  (loop [l l result '()]\n    (if\n      (= (count l) 1)\n      (concat result l)\n      (recur (rest l) (concat result [(first l) v])))))", "user": "5a2df4a0e4b09cafd31c7f74"}, {"problem": 40, "code": "(fn [sep items]\n    (reduce (fn [new-items cur-itm] (conj new-items sep cur-itm))\n            [(first items)]\n            (rest items)))", "user": "5a23503fe4b0ff51aa4b32d6"}, {"problem": 40, "code": "(fn [sep s] (butlast (interleave s (iterate identity sep))))", "user": "5a2e39fce4b09cafd31c7f77"}, {"problem": 40, "code": "(fn [v s]\n  (butlast (interleave s (repeat (count s) v))))", "user": "5a1bec89e4b0ff51aa4b322f"}, {"problem": 40, "code": "(fn [i l] (loop [x l y nil] (if (empty? x) (reverse (rest y)) (recur (rest x) (cons i (cons (first x) y))))))", "user": "5a34f342e4b0ddc586f153d1"}, {"problem": 40, "code": "(fn [sep lst] (cons (first lst) (flatten (map (fn [x] [sep x]) (rest lst)))))", "user": "5a2e80fde4b09cafd31c7f7d"}, {"problem": 40, "code": "(fn [n s] (reverse (rest (reduce #(conj %1 %2 n) '() s))))", "user": "59f75327e4b0966464fe6aec"}, {"problem": 40, "code": "(fn [v xs]\n   (reduce #(conj %1 v %2) (conj [] (first xs)) (rest xs)))", "user": "56ef077ae4b04a395b9a0459"}, {"problem": 40, "code": "(fn [v se](loop [mseq se res []]\n            ( if ( empty?(rest mseq ))\n              (conj res (first mseq))\n              (recur ( rest mseq) ( conj ( conj res (first mseq) ) v)))))", "user": "5a1c8c26e4b0ff51aa4b3247"}, {"problem": 40, "code": "(fn [separator coll]\n  (\n    rest (reduce #(conj %1 separator %2) [] coll)\n  )\n)", "user": "5a285a38e4b07f18be40aa67"}, {"problem": 40, "code": "(fn [i coll]\n    (rest (reduce #(conj %1 i %2)\n             []\n             coll)))", "user": "53307a23e4b019098a6f8b5d"}, {"problem": 40, "code": "(fn [x s] (next (mapcat #(vector x %) s)))", "user": "5a3d7afae4b0447ef91cc5a6"}, {"problem": 40, "code": "(fn [i xs] (rest (interleave (repeat i) xs)))", "user": "52513bf1e4b0541d1855b86e"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "59dfb8dbe4b08badc2a0c4da"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "5a3c5c54e4b001c08efc0ce3"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "5a3d33b3e4b001c08efc0cef"}, {"problem": 40, "code": "(fn my-interpose\n  [v coll]\n  (reduce (fn [acc e] (concat acc [v e])) [(first coll)] (rest coll)))", "user": "5a3ece62e4b0447ef91cc5b9"}, {"problem": 40, "code": "(fn my-interpose [x tokens]\n  (let [[head & tail] tokens]\n    (if (empty? tail)\n      [head]\n      (concat [head x] (my-interpose x tail)))))", "user": "5773f3a9e4b0979f896515f2"}, {"problem": 40, "code": "(fn [x y] (drop-last (reduce #(conj %1 %2 x) [] y)))", "user": "52281e1ee4b0186687e23a69"}, {"problem": 40, "code": "(fn [el coll] \n  (loop [[a & rest] coll\n         result []]\n    (if (empty? rest) \n      (conj result a)\n      (recur rest (vec (concat result [a el]))))))", "user": "52fd35eee4b047fd55837029"}, {"problem": 40, "code": "(fn [inter coll]\n  (butlast (reduce (fn [result item] (into result [item inter])) [] coll)))", "user": "58a6806ee4b01a0c0b23292f"}, {"problem": 40, "code": "(fn [i x]\n  (reduce #(conj %1 i %2 ) [(first x)] (rest x)))", "user": "5a401a7de4b0447ef91cc5c5"}, {"problem": 40, "code": "(fn [x xs] (\n       drop-last (interleave xs (take (.size xs) (repeat x))\n        )\n    ))", "user": "55d7312ee4b0e31453f64a9f"}, {"problem": 40, "code": "(fn [value coll]\n  (loop [v value\n         c coll\n         r []]\n    (if (= (count c) 1)\n      (conj r (first c))\n      (recur v (rest c)\n             (conj (conj r (first c))\n                   v)))))", "user": "5a29ee57e4b09cafd31c7f2b"}, {"problem": 40, "code": "(fn [x y]\n  (rest (interleave (repeat (count y) x) y)))", "user": "5a40eb64e4b0447ef91cc5d8"}, {"problem": 40, "code": "(fn [x xs]\n    (drop-last\n       (reduce #(conj %1 %2 x) [] xs)))", "user": "5a429e40e4b0447ef91cc5f9"}, {"problem": 40, "code": "(fn [a b]\n   (rest (reduce (fn [x y] (conj x a y )  ) [] b ))\n   )", "user": "5a43347ee4b0447ef91cc603"}, {"problem": 40, "code": "#(rest (mapcat vector (cycle [%]) %2))", "user": "5a0e9a54e4b04bbd27e6d9ef"}, {"problem": 40, "code": "#(rest (mapcat list (repeat %1) %2))", "user": "567447a2e4b05957ce8c6135"}, {"problem": 40, "code": "(fn [v l]\n  (rest (mapcat #(vector v %) l))\n  )", "user": "558843dae4b059ccff29b1f3"}, {"problem": 40, "code": "(fn f\n  [separator some-seq]\n  (pop (into [] (mapcat identity (reduce\n    (fn\n      [new-seq item]\n      (conj new-seq [item separator]))\n    []\n    some-seq)))))", "user": "5a35d515e4b0ddc586f153e1"}, {"problem": 40, "code": "(fn interpose'\n  [y x]\n  (drop-last (interleave x (repeat  (count x) y))))", "user": "5a067f26e4b01bb0ae8afdcc"}, {"problem": 40, "code": "(fn [x coll] (rest (mapcat #(vector x %) coll)))", "user": "5a4993c0e4b05d388ecb6b71"}, {"problem": 40, "code": "(fn join\n  ([sep seq] (join sep seq []))\n  ([sep seq acc]\n   (cond\n     (empty? seq) acc\n     (empty? (rest seq)) (conj acc (first seq))\n     :else (recur sep (rest seq) (conj acc (first seq) sep)))))", "user": "5182de5ce4b0353c468deb74"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "5a4443cae4b0447ef91cc60f"}, {"problem": 40, "code": "#(into [] (butlast (mapcat list %2 (repeat %1))))", "user": "5a4de614e4b05d388ecb6bb1"}, {"problem": 40, "code": "#(-> %2 (interleave (repeat %1)) drop-last)", "user": "54f773bfe4b01ecee9d8881f"}, {"problem": 40, "code": "(fn [x coll]\n  (drop-last (mapcat (fn [x y] (list x y)) coll (take (count coll) (iterate identity x)))))", "user": "5a4e1c81e4b05d388ecb6bb6"}, {"problem": 40, "code": "(fn interp\n  [value col]\n  (loop [tmp col result []]\n    (if (= 1 (count tmp)) (conj result (first tmp))\n                          (recur (rest tmp) (conj result (first tmp) value)))\n    )\n  )", "user": "5a4cbba1e4b05d388ecb6b98"}, {"problem": 40, "code": "#(drop-last (reduce (fn [coll, curr] (conj coll curr %1))\n          [] %2))", "user": "5a1c3c11e4b0ff51aa4b323d"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "5a4208dde4b0447ef91cc5ee"}, {"problem": 40, "code": "(fn [sep coll] (butlast (interleave coll (repeat sep))))", "user": "5a535572e4b05d388ecb6c0b"}, {"problem": 40, "code": "#(rest (mapcat list (repeat %1) %2))", "user": "5a527beee4b05d388ecb6bfe"}, {"problem": 40, "code": "(fn [x y] (drop-last(apply concat (map #(vector % x) y))))", "user": "5a533cc0e4b05d388ecb6c09"}, {"problem": 40, "code": "#(take (-(* 2 (count%2))1) (interleave %2(repeat %1)) )", "user": "5a534241e4b05d388ecb6c0a"}, {"problem": 40, "code": "(fn [sep seq] (butlast (mapcat #(list % sep) seq)))", "user": "5a512929e4b05d388ecb6be2"}, {"problem": 40, "code": "(fn [sep xs]\n       (drop\n         1\n         (interleave\n           (take (count xs)\n                 (repeat sep)\n                 )\n           xs\n           )\n         )\n       )", "user": "5a55114ae4b05d388ecb6c37"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "58d4d864e4b03c36ff7e594c"}, {"problem": 40, "code": "#(rest (mapcat vector (take (count %2) (repeat %1)) %2))", "user": "5a4d656fe4b05d388ecb6ba9"}, {"problem": 40, "code": "(fn [arb coll] (vec (concat (mapcat vector coll (repeat (dec (count coll)) arb)) (list (last coll)))))", "user": "5a566e8fe4b05d388ecb6c51"}, {"problem": 40, "code": "(fn [s xs] (flatten (reduce (fn [x y] [x s y]) xs)))", "user": "552d9b31e4b076ab5578f7eb"}, {"problem": 40, "code": "(fn [n coll]\n  (-> (interleave coll (repeat n))\n      drop-last\n      vec))", "user": "565654dae4b0f9d632dd849f"}, {"problem": 40, "code": "(fn [sep in]\n  (loop [new [(first in)] old (rest in)]\n    (if (empty? old)\n      new\n      (recur (conj new sep (first old)) (rest old))\n    )\n  )\n)", "user": "5a244240e4b0ff51aa4b32e9"}, {"problem": 40, "code": "(fn [sep coll]\n  (conj \n    (mapcat #(list sep %) (rest coll))\n    (first coll)))", "user": "5a4caa20e4b05d388ecb6b94"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat (fn [x] [x v]) coll)))", "user": "5a34de78e4b0ddc586f153d0"}, {"problem": 40, "code": "(fn [a xs]\n  (rest (interleave (repeat a) xs)))", "user": "53f053ebe4b0742d9025b0d3"}, {"problem": 40, "code": "(fn interpose* [sep l] (drop-last (mapcat list l (repeat (count l) sep))))", "user": "5a591d04e4b05d388ecb6c90"}, {"problem": 40, "code": "(fn [sep items]\n  (butlast\n  (interleave items (repeat (count items) sep))\n  )\n)", "user": "5a424954e4b0447ef91cc5f0"}, {"problem": 40, "code": ";#(reduce (fn [x y] (conj (conj x %1) y)) [(first %2)] (rest %2))\n;#(butlast (mapcat list %2 (repeat %1)))\n#(butlast (interleave %2 (repeat %1)))", "user": "5a544eeee4b05d388ecb6c24"}, {"problem": 40, "code": "(fn [sep stuff] (drop 1 (reduce #(conj %1 sep %2) [] stuff)))", "user": "5a584ca2e4b05d388ecb6c7d"}, {"problem": 40, "code": "(fn [item col]\n  (drop-last (mapcat list col (repeat (count col) item))))", "user": "587b8bdee4b01531a375eaff"}, {"problem": 40, "code": "(fn [a b]\n      (loop [b b\n             result []]\n        (if (seq b)\n          (recur (next b) (conj result (first b) a))\n          (butlast result))))", "user": "5a5d0726e4b0512ff01cd91b"}, {"problem": 40, "code": "(fn [n coll] (drop-last (interleave coll (repeat (count coll) n))))", "user": "5a5be4a6e4b0512ff01cd910"}, {"problem": 40, "code": "(fn interpse [v s] (drop-last (mapcat #(list % v) s)))", "user": "5a5894d9e4b05d388ecb6c81"}, {"problem": 40, "code": "#(conj (reduce (fn [acc x] (conj acc x %1)) [] (butlast %2)) (last %2))", "user": "5a5be1ece4b0512ff01cd90f"}, {"problem": 40, "code": "(fn f\n  ([v s] (f v (rest s) [(first s)]))\n  ([v s r] (if (empty? s) r (recur v (rest s) (into r [v (first s)])))))", "user": "5a3c2a08e4b001c08efc0cdf"}, {"problem": 40, "code": "(fn [x c] (take (- (* 2 (count c)) 1)(interleave c (repeat (count c) x))))", "user": "5a23cabce4b0ff51aa4b32df"}, {"problem": 40, "code": ";(fn [value coll]\n;  (butlast (flatten (map #(list % value) coll))))\n\n(fn [v coll] \n  (butlast (mapcat #(vector % v) coll)))", "user": "5a58bfd0e4b05d388ecb6c84"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %)))", "user": "5a52f2cbe4b05d388ecb6c06"}, {"problem": 40, "code": "(fn [elem l] \n  (rest (interleave (repeat (count l) elem) l)))", "user": "5a621702e4b0512ff01cd983"}, {"problem": 40, "code": "(fn [n col]\n  (drop 1 \n        (mapcat vector (repeat n) col)))", "user": "5a624129e4b0512ff01cd987"}, {"problem": 40, "code": "#(->> (for [x %2]\n        [x %1])\n      (apply concat)\n      (butlast))", "user": "5a36e788e4b0ddc586f153ec"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "56fd058be4b08d47c97781a1"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %)))", "user": "5a536cf2e4b05d388ecb6c10"}, {"problem": 40, "code": "(fn foo\n  [delineator sqc]\n  (if (seq sqc)\n    (if (> (count sqc) 1)\n      (conj (foo delineator (rest sqc)) delineator (first sqc))\n      (list (first sqc)))\n    '()))", "user": "5a6a32b6e4b0512ff01cda22"}, {"problem": 40, "code": "(fn [i s]\n  (loop [cur (rest s)\n         acc '()]\n    (if (empty? cur)\n      (conj (reverse acc) (first s))\n      (recur (rest cur) (conj (conj acc i) (first cur))))))", "user": "5a6b9b95e4b0512ff01cda40"}, {"problem": 40, "code": "(comp drop-last #(mapcat vector %2 (repeat %1)))", "user": "5a257747e4b07f18be40aa1f"}, {"problem": 40, "code": "(fn get-interpose [separator [first-ele & rest-ele]]\n  (if (empty? rest-ele)\n    [first-ele]\n    (concat [first-ele separator] (get-interpose separator rest-ele))))", "user": "5a59a76fe4b05d388ecb6c98"}, {"problem": 40, "code": "(fn [sep s] (loop[s s\n                   ret '()]\n               (if (first s)\n                 (recur (rest s) (conj (conj ret (first s)) sep))\n                 (reverse (rest ret)))))", "user": "5a6b15e9e4b0512ff01cda32"}, {"problem": 40, "code": "(fn [d lyst]\n  (rest (reduce #(conj %1 d %2) [] lyst)))", "user": "55f344afe4b06e875b46ce5a"}, {"problem": 40, "code": "#(butlast (flatten\n             (map list %2 (repeat %1))))", "user": "5a4b3abde4b05d388ecb6b81"}, {"problem": 40, "code": "(fn [x y] (next (interleave (repeat x) y)))", "user": "5a66f358e4b0512ff01cd9d5"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %) %2))", "user": "5a6af090e4b0512ff01cda2d"}, {"problem": 40, "code": "(fn [a s]\n  (drop 1 (interleave (repeat a) s)))", "user": "5a6a7cc5e4b0512ff01cda27"}, {"problem": 40, "code": "(fn [a col]\n  (rest (reverse (reduce #(conj %1 a %2) () col))))", "user": "586f4900e4b01531a375e9c6"}, {"problem": 40, "code": "#(flatten (reduce (fn [x y] (list x % y)) %2))", "user": "5a625bc2e4b0512ff01cd989"}, {"problem": 40, "code": "(fn \n  [a args]    \n  (drop-last (mapcat #(vector % a) args))\n  )", "user": "59cd13d5e4b0ef0a1e9b5b32"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last\n   (mapcat #(conj [] % sep) coll)))", "user": "5a488c09e4b05d388ecb6b68"}, {"problem": 40, "code": "(comp reverse rest (fn [sepa coll]\n\n                 (reduce (fn [result c]\n                           (conj (conj result c) sepa)\n\n                           ) '() coll )\n\n                 ))", "user": "5a71c89ee4b0512ff01cda93"}, {"problem": 40, "code": "(fn [n xs]\n         (conj\n          (apply vector (interleave (butlast xs) (repeat n)))\n          (last xs)))", "user": "5920c191e4b09b4ee5954c61"}, {"problem": 40, "code": "(fn\n  [sep s]\n  (mapcat identity (conj (for [x (rest s)] (list sep x)) (list (first s)))))", "user": "529f9bf2e4b04e0c58e87bb4"}, {"problem": 40, "code": "(fn [sep coll]\n   (drop-last (interleave coll (repeat (count coll) sep))))", "user": "5a61bf79e4b0512ff01cd97b"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5a71e7c9e4b0512ff01cda95"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "4fd4bddce4b0d4de60cee36e"}, {"problem": 40, "code": "(fn [i x]\n  (butlast (reduce concat\n                   (for [a x]\n                     [a i]))))", "user": "58f5b58ae4b0438e51c2cedc"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "58eed5b7e4b056aecfd47db8"}, {"problem": 40, "code": "(fn [ele collec] (butlast (flatten (map #(list %1 ele) collec ))))", "user": "5a634ff0e4b0512ff01cd995"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5a7cee73e4b03baeef9276f2"}, {"problem": 40, "code": "(fn[sep coll] (butlast (flatten (map (fn[x] (concat [x] [sep])) coll))))", "user": "5a63f8bae4b0512ff01cd99f"}, {"problem": 40, "code": "#(concat (interleave %2 (repeat (dec (count %2)) %1)) [(last %2)])", "user": "5a80b934e4b00b71e582a05b"}, {"problem": 40, "code": "(fn [x y] \n         (drop-last (vec (mapcat  #(conj '() x %) y)))\n    )", "user": "5a6afb1de4b0512ff01cda2f"}, {"problem": 40, "code": "(fn problem-40 [sep coll]\n  (loop [coll coll\n         result []]\n    (cond\n      (empty? coll) result\n      (empty? (rest coll)) (conj result (first coll))\n      :else (recur (rest coll) (conj result (first coll) sep)))))", "user": "5a786f6be4b013a48d39976e"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "5a03d246e4b01bb0ae8afd8c"}, {"problem": 40, "code": "(fn [arbitraryValue myList]\n  (butlast (reduce #(conj %1 %2 arbitraryValue) [] myList)))", "user": "5a84cf8de4b00b71e582a095"}, {"problem": 40, "code": "(fn[s col] (butlast(mapcat #(list %1 s) col  )))", "user": "5a80ad4be4b00b71e582a058"}, {"problem": 40, "code": "(fn [el seq] (let [c (count seq)] (take (- (* 2 c) 1) (interleave seq (repeat c el)))))", "user": "5a86ad84e4b05369db4d249c"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5a5dbe9de4b0512ff01cd92b"}, {"problem": 40, "code": "(fn [x seq]\n            (butlast (mapcat list seq (repeat x))))", "user": "5a813b90e4b00b71e582a065"}, {"problem": 40, "code": "(fn [value s]\n  (rest (mapcat #(list value %) s)))", "user": "5a75da49e4b0512ff01cdacf"}, {"problem": 40, "code": "#(next (mapcat vector (repeat %) %2))", "user": "51dd5d6fe4b0c33a4e1da406"}, {"problem": 40, "code": "(fn foobar [x xs]\n  (reduce (fn [acc item] (concat acc [x item])) [(first xs)] (rest xs))\n)", "user": "5a8e9fb5e4b05369db4d2529"}, {"problem": 40, "code": "(fn [sep xs]\n  (loop [acc [(first xs)] values (rest xs)]\n    (if (empty? values)\n      acc\n      (recur (concat acc [sep (first values)]) (rest values)))))", "user": "5376190de4b06839e8705e1c"}, {"problem": 40, "code": "#(rest (mapcat list (repeat (count %2) %1) %2))", "user": "59021fede4b0438e51c2d04d"}, {"problem": 40, "code": "(fn [sep coll]\n  (loop [coll coll\n         result '()]\n    (if (= (count coll) 1)\n      (concat result coll)\n      (recur (rest coll) (concat result (list (first coll) sep))))))", "user": "5a7ff79ce4b00b71e582a046"}, {"problem": 40, "code": "(fn f [x xs]\n   (drop-last (mapcat #(seq [% x]) xs)))", "user": "5a8bc2a1e4b05369db4d24ef"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5a779197e4b013a48d399763"}, {"problem": 40, "code": "(fn my-interpose [x lst]\n  (loop [l lst r ()]\n    (if (= 1 (count l))\n      (reverse (cons (first l) r))\n      (recur (rest l) (cons x (cons (first l) r))))))", "user": "5a653f80e4b0512ff01cd9b2"}, {"problem": 40, "code": "#(->> %2\n      (map (fn [x] [x %1]))\n      (reduce concat)\n      butlast)", "user": "5a9181c5e4b002d099cae6f6"}, {"problem": 40, "code": "(fn myfn [sep lst]\n  (if (= (count lst) 1)\n    (list (first lst))\n    (concat (list (first lst)) (list sep) (myfn sep (rest lst)))))", "user": "5a2cfa85e4b09cafd31c7f61"}, {"problem": 40, "code": "#(next (interleave (repeat %1) %2))", "user": "51421cd5e4b0b50abeb46b2c"}, {"problem": 40, "code": "(fn ip[v s]\n    ( reverse ( rest (reverse (mapcat #(list % v) s) ) ) )\n  )", "user": "5a8d55a8e4b05369db4d2514"}, {"problem": 40, "code": "(fn [value xs]\n  (reduce #(conj %1 value %2)\n          [(first xs)]\n          (rest xs)))", "user": "5a95c639e4b0d174b936c75e"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5a95e50be4b0d174b936c760"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5a9545dbe4b0d174b936c74c"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5a97eaffe4b0d174b936c783"}, {"problem": 40, "code": "(fn inter [val s]\n  (loop [a (rest s) ans [(first s)]]\n    (if (empty? a)\n      (reverse ans)\n      (recur (rest a) (cons (first a) (cons val ans))))))", "user": "5a962c09e4b0d174b936c765"}, {"problem": 40, "code": "(fn [d s] (butlast (mapcat #(vector % d) s)))", "user": "5a5767f3e4b05d388ecb6c65"}, {"problem": 40, "code": "(fn [n lst]\n (into [] (butlast (interleave lst (repeat (count lst) n))))\n)", "user": "5a984657e4b0d174b936c78a"}, {"problem": 40, "code": "(fn [n lst]\n  (rest (mapcat #(vector n %) lst)))", "user": "5a99b688e4b0d174b936c7a6"}, {"problem": 40, "code": "(fn \n    [e xs]\n    (reduce (fn \n              [ac x]\n              (concat ac (seq [e x])))\n            (seq [(first xs)])\n            (rest xs)))", "user": "5a8b6d42e4b05369db4d24e6"}, {"problem": 40, "code": "(fn [value lst] (butlast(mapcat #(list %2 %1) (repeat (count lst) value) lst)))", "user": "5a99b83fe4b0d174b936c7aa"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "56092852e4b0053d1b86c7d9"}, {"problem": 40, "code": "(fn[n lst]\n  (reverse (cons (last lst) (reverse (interleave lst (repeat (- (count lst) 1) n))))))", "user": "5a99b844e4b0d174b936c7ab"}, {"problem": 40, "code": "#(rest (into [] (flatten (for [x (list %1) y %2] [x y]))))", "user": "5a99b863e4b0d174b936c7ae"}, {"problem": 40, "code": "(fn [sep coll]\n     (reduce (fn [c e] (if (empty? c) (conj c e) (conj (conj c sep) e))) [] coll))", "user": "5971a017e4b01722bebd4c75"}, {"problem": 40, "code": "(fn [sep coll]\n  (take (dec (* (count coll) 2))\n        (interleave coll (repeat (count coll) sep))))", "user": "5a9ac061e4b0d174b936c7c1"}, {"problem": 40, "code": "(fn [ele, coll] (rest (flatten (map list (take (count coll) (repeat ele)) coll))))", "user": "5a6170fde4b0512ff01cd975"}, {"problem": 40, "code": "(fn [sep coll]\n  (letfn [(interposex [sepx collx] (lazy-seq (when (seq collx) (cons sepx (cons (first collx) (interposex sepx (rest collx)))))))]\n    (drop 1 (interposex sep coll))))", "user": "5a9dbb32e4b0d174b936c7f3"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5a9dbffbe4b0d174b936c7f4"}, {"problem": 40, "code": "(fn inter\n  [x lst]\n  (loop\n    [x x\n     lst lst\n     result ()]\n    (if (empty? lst)\n      (butlast(reverse result))\n      (recur x (rest lst) (cons x (cons (first lst) result))))))", "user": "5a9f005be4b0d174b936c810"}, {"problem": 40, "code": "(fn [v lst]\n  (butlast (mapcat\n            #(vector % v) lst)))", "user": "5a9cdec0e4b0d174b936c7e1"}, {"problem": 40, "code": "(fn iterpoze [n x]\n  (drop-last (flatten (map #(vector % n) x))))", "user": "5a9482b7e4b0d174b936c737"}, {"problem": 40, "code": "(fn\n  [sep coll]\n  (drop 1 (interleave (repeat sep) coll)))", "user": "5a90395ce4b05369db4d254a"}, {"problem": 40, "code": "(fn\n  [x lst]\n  (cons (first lst) (mapcat #(list x %) (rest lst))))", "user": "5aa2f1dee4b0d174b936c865"}, {"problem": 40, "code": "(fn [sep indata]\n  (loop [data indata out '()]\n    (if (= 1 (count data))\n      (reverse (cons (first data) out))\n      (recur (rest data) (cons sep (cons (first data) out))))))", "user": "56197b47e4b053970a773af8"}, {"problem": 40, "code": "(fn [e coll] (butlast (mapcat #(vector % e) coll)))", "user": "5aa00b7fe4b0d174b936c825"}, {"problem": 40, "code": "#(drop-last (flatten (map (fn [n] (list n %1)) %2)))", "user": "5a9a12d6e4b0d174b936c7b7"}, {"problem": 40, "code": "(fn [v x] \n  (butlast \n   (mapcat \n    #(vector % v) x)))", "user": "5aa4b961e4b0d174b936c888"}, {"problem": 40, "code": "(fn [sep vect] (concat (reduce (fn [a b] (concat a [(nth vect b) sep])) [] (range 0 (- (count vect) 1))) [(last vect)]))", "user": "5a9e3698e4b0d174b936c7fc"}, {"problem": 40, "code": "(fn [v a-seq] (rest (reduce #(conj %1 v %2) [] a-seq)))", "user": "5a99cab6e4b0d174b936c7b2"}, {"problem": 40, "code": "(fn [sep lst]\n    (drop-last (interleave lst (repeat sep))))", "user": "5a99b766e4b0d174b936c7a8"}, {"problem": 40, "code": "(fn interpose_seq\n  [v lst]\n  \n  (take (- (* 2 (count lst)) 1)\n       (interleave lst (repeat v))))", "user": "5a99ae99e4b0d174b936c7a4"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5a99b848e4b0d174b936c7ac"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5aa6d44de4b0d174b936c8b2"}, {"problem": 40, "code": "(fn [n lst]\n  (drop-last (mapcat #(vector % n) lst)))", "user": "5a99b87ee4b0d174b936c7af"}, {"problem": 40, "code": "(fn [n x]\n  (drop-last\n   (mapcat #(conj [] % n) x))\n  )", "user": "5a99b861e4b0d174b936c7ad"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat (count %2) %1) %2))", "user": "5a342188e4b0ddc586f153bd"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5aa5eebee4b0d174b936c8a1"}, {"problem": 40, "code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "user": "5aa6bd56e4b0d174b936c8af"}, {"problem": 40, "code": "(fn inter [y xs]\n  (let [aux (fn interAux [w zs]\n              (if (empty? zs) \n                 '()\n              (conj (conj (interAux w (rest zs)) (first zs)) w)))]\n   (rest (aux y xs))))", "user": "5aa5951ae4b0d174b936c899"}, {"problem": 40, "code": "#(rest (mapcat list (repeat %) %2))", "user": "5a8e9a7ae4b05369db4d2528"}, {"problem": 40, "code": "(fn [sep coll] (cons (first coll) (mapcat (fn [x] [sep x]) (rest coll))))", "user": "5aa998c6e4b0d174b936c8e5"}, {"problem": 40, "code": "(fn [sep coll]\n  (butlast (interleave coll (cycle (list sep)))))", "user": "50310713e4b05b7df5a0b84c"}, {"problem": 40, "code": "#(rest (mapcat list (repeat %1) %2))", "user": "59769d75e4b01722bebd4cdd"}, {"problem": 40, "code": "(fn [v coll]\n  (->>\n   (mapcat #(list %1 v) coll)\n   (butlast)\n   (into [])))", "user": "5aabd34fe4b073f177442565"}, {"problem": 40, "code": "(fn my-interpose [x seq]\n  (drop-last (mapcat #(vector %1 x) seq))\n  )", "user": "5aada061e4b073f17744257a"}, {"problem": 40, "code": "(fn f [el lst]\n  (if (= 1 (count lst))\n    [(first lst)]\n    (concat [(first lst) el] (f el (rest lst)))\n    )\n  )", "user": "5ab1665de4b073f1774425c0"}, {"problem": 40, "code": "(fn [n lst] \n  (butlast \n   (mapcat #(vector % n) \n           lst)))", "user": "5a99c5a9e4b0d174b936c7b1"}, {"problem": 40, "code": "(fn [n coll]\n   (mapcat (fn [[f s]]\n             (if (and f s)\n               (list f n)\n               (list f))) (partition-all 2 1 coll)))", "user": "5ab23c99e4b073f1774425e2"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "5aa8e841e4b0d174b936c8d5"}, {"problem": 40, "code": "#(drop-last (vec (interleave %2 (repeat %1))))", "user": "5ab23a78e4b073f1774425e1"}, {"problem": 40, "code": "#(->> %1 (repeat) (interleave %2) (drop-last 1))", "user": "5ab16992e4b073f1774425c4"}, {"problem": 40, "code": "(fn [sep coll]\n                  (apply list (reduce (fn\n                                  ([a b]\n                                   (if (coll? a)\n                                     (conj a sep b)\n                                     (vector a sep b))))\n                                coll)) )", "user": "5ab575f8e4b073f17744263d"}, {"problem": 40, "code": "(fn [sep colls] (butlast (mapcat #(vec [% sep]) colls)))", "user": "5a67cedbe4b0512ff01cd9ee"}, {"problem": 40, "code": "(fn myinterpose [item coll]\n  (loop\n   [c coll\n    result []]\n    (if (empty? c)\n      result\n      (if (empty? result)\n        (recur (rest c) (conj result (first c)))\n        (recur (rest c) (conj (conj result item) (first c)))))))", "user": "5ab490f4e4b073f17744261d"}, {"problem": 40, "code": "#(reduce (fn [acc el] (conj (conj acc %1) el)) [(first %2)] (rest %2))", "user": "5ab5f60be4b073f177442643"}, {"problem": 40, "code": "(fn [x coll]\n  (butlast (into [] (mapcat #(vector % x) coll))))", "user": "5a9829e5e4b0d174b936c788"}, {"problem": 40, "code": "(fn [sep coll] \n  (butlast (flatten (map vector coll (repeat (count coll) sep)))))", "user": "5ab276f2e4b073f1774425e6"}, {"problem": 40, "code": "(fn [e s] (rest (flatten (map (fn [x] (list e x)) s))))", "user": "5ab564f8e4b073f177442639"}, {"problem": 40, "code": "(fn [sep xs] (->> (flatten (map #(list % sep) xs)) reverse rest reverse))", "user": "5ab8037ae4b073f177442678"}, {"problem": 40, "code": "(fn [v c]\n  (loop [a c\n         r []]\n    (if (= 1 (count a))\n      (conj r (first a))\n      (recur (rest a) (conj r (first a) v)))))", "user": "5ab9fe71e4b073f17744269d"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "5abb02ade4b073f1774426bc"}, {"problem": 40, "code": "(fn [s xs] (butlast (mapcat #(vector % s) xs)))", "user": "5abc5a09e4b073f1774426e9"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "user": "542c56aae4b0dad94371f2a4"}, {"problem": 40, "code": "(fn ips [sep xs] \n  (cond (<= (count xs) 1) xs\n        :else (concat [(first xs) sep ] (ips sep (drop 1 xs)))\n     )\n)", "user": "5aba34c5e4b073f1774426a3"}, {"problem": 40, "code": "(fn insert-into-list [sym alist]\n    (drop\n      1\n      (flatten\n        (map\n          (fn [elem] [sym elem])\n          alist))))", "user": "5aaa2dc3e4b0d174b936c8f1"}, {"problem": 40, "code": "(fn INTERPOSE_RECURSIVE [seperator seq]\n  (cond\n    (> (count seq) 1) (concat [(first seq) , seperator] (INTERPOSE_RECURSIVE seperator (rest seq)) )\n    (= (count seq) 1) seq\n    :else []\n    )\n\n  )", "user": "5aa11b37e4b0d174b936c840"}, {"problem": 40, "code": "(fn \n  [sep col]\n  (->\n    (#(map-indexed\n        (fn [ind el]\n          (if (< (inc ind) (count %2))\n            [el %]\n            el))\n  \n        %2) sep col)\n    flatten))", "user": "5a8fd113e4b05369db4d2542"}, {"problem": 40, "code": "(fn\n[n coll]\n(flatten (reduce #(concat [%1] [n] [%2]) coll)))", "user": "5a47423be4b05d388ecb6b52"}, {"problem": 40, "code": "(fn [n s] (concat [(first s)] (mapcat (fn [e] [n e]) (rest s))))", "user": "5abe2fc2e4b073f17744271e"}, {"problem": 40, "code": "(fn myinterpose [separator coll]\n  (loop [toparse coll\n         result (empty coll)]\n    (if (empty? (rest toparse))\n      (reverse (conj result (peek toparse)))\n      (recur (pop toparse) (conj (conj result (peek toparse)) separator)))))", "user": "5abeb697e4b073f177442725"}, {"problem": 40, "code": "(fn my-interpose [separator col]\n(butlast (flatten \n(map list col (repeat separator)))))", "user": "5ac37d0fe4b0e27600da7718"}, {"problem": 40, "code": "#(drop-last (mapcat vector %2 (take (count %2) (repeat %1))))", "user": "5ac0ba3ae4b073f177442745"}, {"problem": 40, "code": "(fn\n  [value coll]\n  (butlast (mapcat #(vector % value) coll)))", "user": "5ac35d00e4b0e27600da7712"}, {"problem": 40, "code": "#(drop 1 (interleave (take (count %2) (repeat %1)) %2))", "user": "569bfc43e4b0542e1f8d145c"}, {"problem": 40, "code": "(fn [delim x]\n(butlast (interleave x (repeat delim))))", "user": "5ac4d1f6e4b0e27600da7735"}, {"problem": 40, "code": "(fn [sep seq]\n  (when-not (empty? seq)\n    (drop-last (into [] (reverse(interleave (repeat sep) (reverse seq)))))))", "user": "5ac383b8e4b0e27600da7719"}, {"problem": 40, "code": "(fn [sep elems]\n    (butlast (reduce concat (map vector elems (repeat sep)))))", "user": "5ac6ef9be4b0e27600da7779"}, {"problem": 40, "code": "(fn [e s]\n  (rest (interleave (repeat e) s)))", "user": "5762bf13e4b0994c1922fbae"}, {"problem": 40, "code": "(fn my-interpose [v [x & r]]\n  (if x\n    (concat (if r (list x v) (list x)) (my-interpose v r))))", "user": "5ac91d90e4b0e27600da77bd"}, {"problem": 40, "code": "(fn\n   [val coll]\n   (loop [result [(first coll)] remain (rest coll)]\n    (if (empty? remain)\n      result\n      (recur (conj (conj result val) (first remain)) (rest remain)))))", "user": "5aa4a1ffe4b0d174b936c886"}, {"problem": 40, "code": "(fn [x y] (subvec (vec (flatten (map (fn [y] (cons x y)) (map list y)))) 1))", "user": "5a291617e4b07f18be40aa76"}, {"problem": 40, "code": "(fn [x ys] (conj (mapcat #(vector %1 %2) (repeat x) (rest ys))\n                   (first ys)))", "user": "531bf76fe4b08068f379ed96"}, {"problem": 40, "code": "(fn interpose-seq \n  [separator x]\n  (drop 1 (interleave (repeat separator) x))\n  )", "user": "5ac74b34e4b0e27600da777f"}, {"problem": 40, "code": "(fn [ i a] ( butlast (reduce #(conj %1 %2 i) [] a)))", "user": "5ac92dc3e4b0e27600da77bf"}, {"problem": 40, "code": "#(drop-last (flatten (for [x %2 v [%1]]\n              [x v])))", "user": "5a9db5c9e4b0d174b936c7f1"}, {"problem": 40, "code": "(fn [inter coll]\n  (loop [remaining coll\n         result (empty coll)]\n    (if (= (count remaining) 1)\n      (concat result (first [remaining]))\n      (recur (rest remaining) (concat result [(first remaining) inter])))))", "user": "5acd235ae4b0e27600da7824"}, {"problem": 40, "code": "(fn ipose\n  ([x items]\n   (ipose x items []))\n  ([x items a]\n   (if (empty? (rest items))\n     (conj a (first items))\n     (recur x (rest items) (conj a (first items) x)))))", "user": "5ac741d6e4b0e27600da777d"}, {"problem": 40, "code": "(fn [s xs] \n  (rest\n  \t(mapcat #(vector s %) xs) \n  )\n )", "user": "5ac85708e4b0e27600da77ac"}, {"problem": 40, "code": "(comp drop-last \n      #(mapcat vector %2 (repeat 10 %1)))", "user": "5ac834f4e4b0e27600da77ab"}, {"problem": 40, "code": "#(rest (mapcat vector (repeat %1) %2))", "user": "5acc961ae4b0e27600da7810"}, {"problem": 40, "code": "#(drop-last (mapcat vector %2 (repeat %1)))", "user": "5acd08eee4b0e27600da7822"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %1)))", "user": "5ad63a34e4b0ea6055cfac01"}, {"problem": 40, "code": "(fn [x s] (drop 1(mapcat #(list x %) s)))", "user": "5acd1a43e4b0e27600da7823"}, {"problem": 40, "code": "#(loop [sep %1 rl %2 res nil] (if (empty? (rest rl)) (reverse (concat rl res)) (recur sep (rest rl) (cons sep (cons (first rl) res)))))", "user": "5831846ae4b051871117c02c"}, {"problem": 40, "code": "(fn [x l]\n(loop [i (rest l) o [(first l)]]\n  (if (empty? i)\n    o\n    (recur (rest i) (conj o x (first i)))))\n)", "user": "5aa8f753e4b0d174b936c8d9"}, {"problem": 40, "code": "(fn my-intersperse [i xs]\n  (if (<= (count xs) 1)\n    xs\n    (let [;; fst (first xs)\n          lst (last xs)\n          inner-xs (butlast xs)\n          res (map #(lazy-seq [%1 i]) inner-xs)]\n      (println res)\n      (flatten [res lst]))))", "user": "51e24905e4b01e519814642e"}, {"problem": 40, "code": "(fn iter [a lat]\n  (let [[x & xs] lat]\n    (if (empty? xs) (list x)\n        (cons x (cons a (iter a xs))))))", "user": "5ada1f12e4b0ea6055cfac43"}, {"problem": 40, "code": "(fn [a col] \n  (butlast (reduce #(conj %1 %2 a) [] col)))", "user": "5976da27e4b01722bebd4ce3"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "5ad36ae9e4b0ea6055cfabc3"}, {"problem": 40, "code": "(fn f [x seq]\n   (if (not (empty? (rest seq)))\n     (concat (list (first seq) x) (f x (rest seq)))\n     (list (first seq))))", "user": "589f37e0e4b02bd94d917e79"}, {"problem": 40, "code": "(fn [joiner s]\n  (rest (interleave (repeat joiner) s)))", "user": "5ade6bafe4b0837691e92c23"}, {"problem": 40, "code": "#(drop-last (mapcat vector %2 (repeat %1)))", "user": "5991eec7e4b0866487ed0d6e"}, {"problem": 40, "code": "(fn [x s] \n(rest (mapcat #(vector x %1) s) ))", "user": "5ae0976be4b0837691e92c43"}, {"problem": 40, "code": "#(drop 1 (mapcat vector (take (count %2) (repeat %1)) %2))", "user": "5acaa269e4b0e27600da77e6"}, {"problem": 40, "code": "(fn [x coll2] \n\t(conj \n\t\t(apply vector \n\t\t\t(interleave coll2 \n\t\t\t\t(repeat (dec (count coll2)) x))) \n\t\t(last coll2))\t\n\t)", "user": "5ac04101e4b073f177442737"}, {"problem": 40, "code": "(fn [x xs] (butlast (flatten (map list xs (repeat x)))))", "user": "5adf5f9be4b0837691e92c33"}, {"problem": 40, "code": "(fn[sp sq]\n       (rest (into [](flatten (map #(vector sp %) sq)))))", "user": "59edc518e4b0966464fe6a08"}, {"problem": 40, "code": "(fn [x y] (vec (butlast (reduce (fn [a b] (conj a b x)) [] y))))", "user": "5a9d64c8e4b0d174b936c7eb"}, {"problem": 40, "code": "(fn [a v] (rest (mapcat #(list a %) v)))", "user": "57086931e4b0b0fb43fd069e"}, {"problem": 40, "code": "(fn interposee[sep seqi]\n  (reduce (fn[res,x]\n            (if (= x (last seqi))\n              (conj res x)\n              (conj (conj res x) sep))) [] seqi))", "user": "5a6cb2eae4b0512ff01cda57"}, {"problem": 40, "code": "(fn [v sq] (let [rt []] (reverse (rest (reverse (apply concat (for [s sq] (conj rt s v))))))))", "user": "5ae246b1e4b0837691e92c5d"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "59e8b4ade4b0249b72820734"}, {"problem": 40, "code": "(fn [v s] (butlast (reduce #(conj %1 %2 v) [] s)))", "user": "5aeec90fe4b0cc2b61a3bc31"}, {"problem": 40, "code": "(fn\n  [value collection]\n  (loop [coll collection final-coll []]\n    (if (empty? coll)\n      final-coll\n     (let [[part & remaining] coll]\n       (recur remaining\n              (if (nil? remaining)\n                (conj final-coll part)\n                (conj final-coll part value)\n                )\n       )\n      )\n      )\n    )\n  )", "user": "5aefd746e4b0cc2b61a3bc3d"}, {"problem": 40, "code": "#(drop-last (mapcat vector %2 (repeat %1)))", "user": "5aed87a1e4b0cc2b61a3bc1a"}, {"problem": 40, "code": "(fn [n s] (drop-last (interleave s (repeat n))))", "user": "5aeca4c9e4b0cc2b61a3bc0a"}, {"problem": 40, "code": "(fn [sep s]\n  (butlast (mapcat #(list % sep) s)))", "user": "5a084a24e4b01bb0ae8afdf2"}, {"problem": 40, "code": "(fn interpoz [el col]\n  (reduce concat [(first col)] (map #(conj [el] %) (rest col)))\n  )", "user": "5af39788e4b0cc2b61a3bc8a"}, {"problem": 40, "code": "(fn [e s]\n  (drop-last (apply concat (map (fn [a]\n                       [a e]) s))))", "user": "5aba04dce4b073f17744269e"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "59ef5280e4b0966464fe6a2b"}, {"problem": 40, "code": "(fn [s xs]\n  (rest (flatten (map vector (repeat s) xs))))", "user": "5af8221ce4b0cc2b61a3bccd"}, {"problem": 40, "code": "#(take (- (* 2 (count %2)) 1)\n       (interleave %2 (repeat %1)))", "user": "59bcbfd0e4b0a024fb6ae419"}, {"problem": 40, "code": ";(fn [sep, seq-arg] (drop-last (mapcat (fn [x] (vector x sep)) seq-arg)))\n#(rest (interleave (repeat (count %2) %1) %2))", "user": "5af19233e4b0cc2b61a3bc5f"}, {"problem": 40, "code": "(fn [x l] (butlast (mapcat #(list % x) l)))", "user": "59eb69fbe4b0249b7282077e"}, {"problem": 40, "code": "(fn my-interpose [e s]\n  (if (seq (rest s))\n    (lazy-seq (cons (first s) (cons e (my-interpose e (rest s)))))\n    [(first s)]))", "user": "5a7ae674e4b03baeef9276d5"}, {"problem": 40, "code": "(fn [t s]\n  (loop [r (list (first s)) s (rest s)]\n    (if (empty? s)\n      (reverse r)\n      (recur (conj r t (first s)) (rest s)))))", "user": "5af907e6e4b0cc2b61a3bcda"}, {"problem": 40, "code": "#(loop [a %2 b %1 c []]\n\t(if (empty? a)\n\t\tc\n\t\t(if (= (count a) 1)\n\t\t\t(recur (rest a) b (conj c (first a)))\n\t\t\t(recur (rest a) b (conj c (first a) b))\n\t\t)\n\t)\n)", "user": "5af9b2cee4b0cc2b61a3bce2"}, {"problem": 40, "code": "#(reduce (fn [a b] (conj a %1 b)) [(first %2)] (rest %2))", "user": "5649b1b0e4b0284900eef646"}, {"problem": 40, "code": "(fn [arg arg_list]\n  (loop [tmp_list (vector (first arg_list))\n         work_list (rest arg_list)]\n    (if (empty? work_list)\n      tmp_list\n      (recur (concat tmp_list (vector arg (first work_list))) (rest work_list))\n      )\n    )\n  )", "user": "5ae71f14e4b0837691e92ca7"}, {"problem": 40, "code": "#(butlast (interleave %2 (take (count %2) (repeat %))))", "user": "5af31955e4b0cc2b61a3bc7a"}, {"problem": 40, "code": "(fn [elem coll]\n  (rest (reduce concat (for [x (range (count coll))]\n    [elem (nth coll x)]))))", "user": "5a3bcdc9e4b001c08efc0cd9"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5a91988ae4b002d099cae6f9"}, {"problem": 40, "code": "(fn [v xs] \n  (loop [a []\n         [x & xs] xs]\n    (if (nil? xs)\n      (conj a x)\n      (recur (conj a x v) xs))))", "user": "5afb4b15e4b0cc2b61a3bcf6"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1))\n     (reverse)\n     (rest)\n     (reverse))", "user": "5af1e1b1e4b0cc2b61a3bc67"}, {"problem": 40, "code": "(fn [spacer coll]\n  (let [n (count coll)]\n    (loop [i 0\n           r []]\n      (if (< i (dec n))\n        (recur (inc i) (conj r (nth coll i) spacer))\n        (conj r (last coll))))))", "user": "5afc3829e4b0cc2b61a3bd08"}, {"problem": 40, "code": "(fn [sep arr]\n  (rest (reduce #(conj %1 sep %2) [] arr)))", "user": "5adcc688e4b0837691e92c05"}, {"problem": 40, "code": "(fn [a b] (loop [b b result []] (if (empty? b) (pop result) (recur (rest b) (conj result (first b) a)))))", "user": "5afdca89e4b0cc2b61a3bd20"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5b008bcae4b0cc2b61a3bd3d"}, {"problem": 40, "code": "(fn [elt s]\n  (loop [seq s\n         res []]\n    (if (empty? (rest seq))\n        (conj res (first seq))\n        (recur (rest seq) (-> res\n                            (conj (first seq))\n                            (conj elt))))))", "user": "5afa9de0e4b0cc2b61a3bcf1"}, {"problem": 40, "code": "(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))", "user": "5b0180cfe4b0cc2b61a3bd47"}, {"problem": 40, "code": "(fn interposeSeq\n  [code [x & xs]]\n  (cond\n    (= xs nil) (list x)\n    :else (concat (list x) (list code) (interposeSeq code xs))))", "user": "5b02a170e4b0cc2b61a3bd52"}, {"problem": 40, "code": "(fn interpose-seq\n  ([x xs]\n   (interpose-seq [] x xs))\n  ([s x xs]\n   (if (empty? (rest xs))\n     (conj s (first xs))\n     (recur (conj s (first xs) x) x (rest xs)))))", "user": "5922f8a9e4b026ae3852128f"}, {"problem": 40, "code": "(fn [el s]\n  (butlast (interleave s (repeat el))))", "user": "5afcd6d1e4b0cc2b61a3bd17"}, {"problem": 40, "code": "(fn [i c] (rest (mapcat #(list i %) c)))", "user": "583048d9e4b051871117c007"}, {"problem": 40, "code": "; https://stackoverflow.com/questions/36734213/clojure-butlast-vs-drop-last\n#(butlast (interleave %2 (repeat %1)))", "user": "5aa4f7dae4b0d174b936c88c"}, {"problem": 40, "code": "(fn [sep lst]\n  (butlast (mapcat #(conj [] % sep) lst)))", "user": "59d9dcfbe4b0ef0a1e9b5c5d"}, {"problem": 40, "code": "#(into [] (butlast (interleave %2 (repeat %))))", "user": "5b0546eae4b0cc2b61a3bd7e"}, {"problem": 40, "code": "#(butlast (flatten (map (fn [x y] [x y]) %2  (repeat %1) )))", "user": "52c03baee4b07a9af5792347"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "user": "5b0e6795e4b0cc2b61a3be03"}, {"problem": 40, "code": "(fn [sep s]\n  (drop-last 1 (reduce \n   (fn [acc v] (conj acc v sep))\n   []\n   s)))", "user": "5b0bea6de4b0cc2b61a3bdda"}, {"problem": 40, "code": "(fn [s col] (reverse ((fn [accum [x & xs]]\n                        (\n                          if (empty? xs)\n                          (cons x accum)\n                          (recur (cons s (cons x accum)) xs)\n                          )\n                        ) '() col)))", "user": "5b0fe3f4e4b0cc2b61a3be14"}, {"problem": 40, "code": "(fn [sep items]\n  (into []\n        (drop-last\n          (apply concat\n                 (map #(concat % (list sep))\n                      (partition 1 items))))))", "user": "5b104aebe4b0cc2b61a3be20"}, {"problem": 40, "code": "(fn pose [v sequ]\n    (reverse (rest (reverse (flatten (map #(vector % v) sequ))))))", "user": "5b02ab12e4b0cc2b61a3bd53"}, {"problem": 40, "code": "(fn f [x coll] (into [] (if (= (count coll) 1) coll (cons (first coll) (cons x (f x (rest coll)))))))", "user": "5addadfce4b0837691e92c13"}, {"problem": 40, "code": "(fn [x s] (rest (mapcat #(vector x %1) s) ))", "user": "5b14ea95e4b0cc2b61a3be62"}, {"problem": 40, "code": "(fn [sep coll]\n  (loop [result [] coll coll]\n    (if (empty? coll)\n      result\n      (if (empty? (rest coll))\n        (conj result (first coll))\n        (recur (conj result (first coll) sep) (rest coll))))))", "user": "5b13f482e4b0cc2b61a3be58"}, {"problem": 40, "code": "(fn [x y] (loop [c 0 data []]\n                (if(< c (dec (count y )))\n                      (recur (inc c)(conj data (nth y c) x ))\n                      (conj data (nth y c))\n                )))", "user": "5b1619e4e4b0cc2b61a3be77"}, {"problem": 40, "code": "#(take (dec (* (count %2) 2))\n         (apply concat\n                (map (fn [val]\n                       [val %1])\n                     %2)))", "user": "5b162d8ce4b0cc2b61a3be78"}, {"problem": 40, "code": "#(loop [l %2 o []]\n        (let [i %1]\n            (if (empty? l)\n                o\n                (recur\n                    (rest l)\n                    (if (> (count l) 1)\n                        (conj o (first l) i)\n                        (conj o (first l)))))))", "user": "5b083513e4b0cc2b61a3bdb4"}, {"problem": 40, "code": "#(reduce (fn [r x] (conj r %1 x)) [(first %2)] (rest %2))", "user": "56aad332e4b03c432f187337"}, {"problem": 40, "code": "(fn [injection injectee]\n   (let [start (vector (first injectee))]\n     (loop [output start\n            input (rest injectee)]\n       (if (empty? input)\n         output\n         (recur (conj output injection (first input)) (rest input))))))", "user": "5b15e881e4b0cc2b61a3be75"}, {"problem": 40, "code": "#(->>\n   (interleave (repeat %1) %2)\n   (rest)\n   )", "user": "5b118b7be4b0cc2b61a3be34"}, {"problem": 40, "code": "(fn my-interpose [val in]\n  (if (next in)\n    (cons (first in) (cons val (my-interpose val (next in))))\n    [(first in)]))", "user": "5b107263e4b0cc2b61a3be22"}, {"problem": 40, "code": "(fn [m n] (rest (mapcat #(vector m %1) n) ))", "user": "5b0f2862e4b0cc2b61a3be0f"}, {"problem": 40, "code": "(fn [p s]\n  (flatten (reduce #(list %1 p %2) s)))", "user": "51316a63e4b0431ba07e7feb"}, {"problem": 40, "code": "(fn [item coll]\n  (vec(drop-last (reduce (fn [acc component]\n            (conj (conj acc component) item))\n          []\n          coll))))", "user": "5adbbf89e4b0837691e92bf4"}, {"problem": 40, "code": "(fn my-inter [w s]\n  (->> (map (fn [x] [x w]) s)\n       (reduce concat)\n       (drop-last)))", "user": "5b15811ee4b0cc2b61a3be6f"}, {"problem": 40, "code": "#(take (- (* 2 (count %2)) 1) \n       (interleave %2 (repeat %1)))", "user": "5b0b8d29e4b0cc2b61a3bdd7"}, {"problem": 40, "code": "(fn [d li] ((fn rec [oli] (if (= 1 (count oli))\n                          oli\n                          (cons (first oli) (cons d (rec (rest oli))))\n                             )) li))", "user": "5b20134de4b03cfeda66ed2d"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "57d418b4e4b0bd073c20239a"}, {"problem": 40, "code": "(fn [value arr] (drop-last (reduce (fn [x y] (conj x y value)) [] arr)))", "user": "5b19cdf2e4b03cfeda66ecbf"}, {"problem": 40, "code": "(fn [i c]  \n  (->>\n   c \n   (mapcat #(list % i)) \n   reverse\n   rest\n   reverse\n  )\n)", "user": "59c243bae4b0a024fb6ae4aa"}, {"problem": 40, "code": "(fn [sep xs]\n  (let [ls (reduce (fn [acc x] (conj acc x sep)) [] xs)]\n    (take (dec (count ls)) ls)))", "user": "5b1c16e1e4b03cfeda66ecf2"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat (count %2) %)))", "user": "5b22328ee4b03cfeda66ed5d"}, {"problem": 40, "code": "(fn [insert s]\n  (drop-last (interleave s (repeat insert))))", "user": "54dfbacae4b024c67c0cf7b1"}, {"problem": 40, "code": "(fn interp [i col]\n  (rest (mapcat vector (repeat i) col))\n  )", "user": "5b250773e4b063e2438bcc21"}, {"problem": 40, "code": "(fn [sep arr] (drop-last (reduce (fn [acc i] (conj acc i sep)) [] arr)))", "user": "5b210749e4b03cfeda66ed48"}, {"problem": 40, "code": "#(drop-last (mapcat vector %2 (repeat %1)))", "user": "5af9d09ae4b0cc2b61a3bce6"}, {"problem": 40, "code": "#(let [z (repeat (count %2) %1)]\n    (butlast (flatten (map list %2 z))))", "user": "5a9414eae4b0d174b936c72c"}, {"problem": 40, "code": "(fn [x y]\n   ((fn iter [a x res]\n      (if (= 1  (count x))\n        (conj res (first x))\n        (recur a (drop 1 x) (conj (conj res (first x)) a)))) x y []))", "user": "5b2238d1e4b03cfeda66ed5e"}, {"problem": 40, "code": "(fn [i s] (loop [a [(first s)] t (rest s)]  (if (empty? t) a (recur (conj a i (first t)) (rest t)))))", "user": "5b2eba82e4b025bcb146f2dd"}, {"problem": 40, "code": "(fn [separator coll]\n   (rest (reduce #(into %1 [separator %2]) [] coll))\n)", "user": "5b274fd1e4b063e2438bcc3b"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "586a906ae4b0f14aab7c88c3"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat (count %2) %1)))", "user": "5b2e6b02e4b025bcb146f2d3"}, {"problem": 40, "code": "(fn [elem lst]\n  (let [cnt (-> (count lst)\n                (* 2)\n                (- 1))]\n    (take cnt (interleave lst (repeat elem)))))", "user": "5a798ac5e4b03baeef9276c0"}, {"problem": 40, "code": "(fn [inter lst]\n  (rest (mapcat #(vector inter %) lst)))", "user": "5b2c79c6e4b025bcb146f2b7"}, {"problem": 40, "code": "(fn [separator seq]\n  \n  (butlast (reduce #(concat %1 [%2 separator]) [] seq))\n  \n)", "user": "5b3189e5e4b025bcb146f308"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5af0ac17e4b0cc2b61a3bc55"}, {"problem": 40, "code": "(fn [delimeter xs]\n    (butlast (mapcat #(list % delimeter) xs)))", "user": "4e6a23d0535d8ccf87e9fea0"}, {"problem": 40, "code": "(fn [sep coll]\n\t(rest (apply concat (map #(conj (list %) sep) coll))))", "user": "5b2a559be4b063e2438bcc74"}, {"problem": 40, "code": "#(vec (rest (interleave (repeat %1) %2)))", "user": "5b284375e4b063e2438bcc53"}, {"problem": 40, "code": "(fn my-interpose [sep xs]                              \n  (cond\n    (and (first xs) (not-empty (rest xs)))\n      (conj (my-interpose sep (rest xs)) sep (first xs))\n    (first xs) xs\n    :else nil))", "user": "5b236e55e4b08b1df1c36759"}, {"problem": 40, "code": "#(butlast (mapcat (partial conj (list %1)) %2))", "user": "5b34aba7e4b025bcb146f352"}, {"problem": 40, "code": "(fn [d x]\n  (reduce (fn [acc v]\n    (if (empty? acc)\n      (conj acc v)\n      (conj acc d v))) [] x))", "user": "5b38d771e4b02d533a91bbb0"}, {"problem": 40, "code": "(fn [av s]\n  \n  (butlast\n    (flatten\n  (for [x s]\n    [x av]\n    )))\n  \n  )", "user": "5b227f5ae4b03cfeda66ed63"}, {"problem": 40, "code": "(fn [sep xs] ((comp butlast flatten)(map #(conj [] % sep) xs)))", "user": "5b37a3b4e4b02d533a91bba9"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "59e8a952e4b0249b72820733"}, {"problem": 40, "code": "(fn [e l] (conj (mapcat #(list e %) (rest l)) (first l)))", "user": "5b3f2ba9e4b02d533a91bc09"}, {"problem": 40, "code": "(fn [x xs]\n  (pop (reduce (fn [ys y]\n            (conj ys y x)) [] xs)))", "user": "5b333626e4b025bcb146f32f"}, {"problem": 40, "code": "(fn [joiner seq]\n            (loop [n-seq []\n                   item (first seq)\n                   restseq (rest seq)]\n              (if (empty? restseq)\n                (conj n-seq item)\n                (recur (conj n-seq item joiner) (first restseq) (rest restseq)))))", "user": "5ad002f2e4b0ea6055cfab87"}, {"problem": 40, "code": "(fn x [n array]\n  (next (mapcat list (repeat n) array)))", "user": "5b3ef412e4b02d533a91bc06"}, {"problem": 40, "code": "#( loop [ x %1 a %2 b [] ] ( if ( empty? a ) (drop-last 1 b) ( recur x (rest a) (conj (conj b (first a)) x))))", "user": "5b3aa98be4b02d533a91bbca"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat (count %2) %1)))", "user": "5b0948f3e4b0cc2b61a3bdbb"}, {"problem": 40, "code": "(fn [delimeter original-list]\n(loop [remaining original-list output []]\n  (println remaining output)\n  (if (empty? remaining)\n    output\n    (if (= 1 (count remaining))\n      (recur (rest remaining) (conj output (first remaining)))\n      (recur (rest remaining) (conj output (first remaining) delimeter)))))\n)", "user": "5b3de9a7e4b02d533a91bbf4"}, {"problem": 40, "code": "(fn my-interpose [v seq]\n  (let [len (count seq)]\n    (take (dec (* 2 len))\n          (interleave seq\n                      (repeat len v)))))", "user": "5b47874be4b02d533a91bc70"}, {"problem": 40, "code": "(fn insert [value coll] (if (second coll) (concat [(first coll) value] (insert value (rest coll))) coll))", "user": "5b465b8be4b02d533a91bc65"}, {"problem": 40, "code": "(fn[reseq value seq1]\n\t(let [a (first seq1)\n\t\t  arest (rest seq1)]\n\t\t  (if (nil? a)\n\t\t  \treseq\n\t\t  \t(if (empty? arest)\n\t\t  \t\t(conj reseq a)\n\t\t  \t\t(recur (conj reseq a value) value arest))))) []", "user": "59b9e669e4b0a024fb6ae3db"}, {"problem": 40, "code": "(fn [x y]\n  (butlast (mapcat #(list % x) y)))", "user": "5b47a4f7e4b02d533a91bc73"}, {"problem": 40, "code": "(fn [el coll] (rest (flatten (map #(vector %1 %2) (repeat el) coll))))", "user": "5b2c1f60e4b025bcb146f2b1"}, {"problem": 40, "code": "(fn pose [x c]\n  (if (= 1 (count c))\n    c\n    (concat\n     [(first c) x]\n     (pose x (rest c)))))", "user": "57fd085ce4b0d3187e9009a9"}, {"problem": 40, "code": "(fn [e coll] (butlast (reduce (fn [acc x] (into acc [x e])) [] coll)))", "user": "5b445421e4b02d533a91bc40"}, {"problem": 40, "code": "(fn mi\n  ([n xs] (mi n xs []))\n  ([n xs res]\n   (if (empty? xs) res\n       (if (empty? (rest xs))\n         (recur n (rest xs) (conj res (first xs)))\n         (recur n (rest xs) (conj res (first xs) n))))))", "user": "5b421edce4b02d533a91bc2c"}, {"problem": 40, "code": "(fn [a b] (conj (mapcat #(vector a %) (rest b)) (first b)))", "user": "5b4a0ce3e4b02d533a91bc92"}, {"problem": 40, "code": "(fn [sep lst] (cons (first lst) (mapcat #(vector sep %) (rest lst))))", "user": "5b51b9f8e4b02d533a91bcfe"}, {"problem": 40, "code": "(fn [i l]\n  (rest (flatten (map\n         (fn [ii] (list i ii))\n         l))))", "user": "5b4b4052e4b02d533a91bc9a"}, {"problem": 40, "code": "(fn [i s]\n  (pop (reduce #(conj %1 %2 i) [] s))\n)", "user": "5b4ff637e4b02d533a91bce0"}, {"problem": 40, "code": "(fn [sep coll] \n  (drop 1 (interleave (repeat sep) coll)))", "user": "56351709e4b0bfe05bf117c2"}, {"problem": 40, "code": "(fn [x y]\n  (loop\n    [x x\n     y y\n     res []]\n    (if (next y)\n      (recur x (next y) (conj (conj res (first y)) x))\n      (conj res (first y))\n      )\n    )\n  )", "user": "5b3e35bde4b02d533a91bbfa"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %1)))", "user": "5b4dfd5de4b02d533a91bcc3"}, {"problem": 40, "code": "(fn [valeur s]\n  (loop [s s, res []]\n    (if (seq (rest s))\n      (recur (rest s) (conj res (first s) valeur))\n      (conj res (first s)))))", "user": "5a481e05e4b05d388ecb6b64"}, {"problem": 40, "code": "#(drop-last (mapcat (fn [x] (vector x %1)) %2))", "user": "5b552117e4b02d533a91bd2c"}, {"problem": 40, "code": "(fn [split arg] \n  (drop 1 (flatten (map #(list split %1) arg))))", "user": "5b55b15ae4b02d533a91bd35"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5aeb0b44e4b0cc2b61a3bbee"}, {"problem": 40, "code": "(fn [a xs] (butlast (mapcat #(vector % a) xs)))", "user": "5b59fe53e4b02d533a91bd87"}, {"problem": 40, "code": "(fn myinter [sep coll]\n  (if (seq coll)\n    (concat [(first coll)]\n            (if (seq (rest coll)) [sep] nil)\n            (myinter sep (rest coll)))\n    nil))", "user": "5b5d255de4b0c6492753e6c8"}, {"problem": 40, "code": "(fn [gap seq]\n  (rest (flatten (map list (repeat (count seq) gap) seq))))", "user": "5b59c2bde4b02d533a91bd80"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5b5f2990e4b0c6492753e6ea"}, {"problem": 40, "code": "(fn [x y] \n  (rest\n   (interleave \n    (repeat x) \n    y)))", "user": "5b3251c1e4b025bcb146f317"}, {"problem": 40, "code": "(fn [delim xs]\n  (butlast (reduce\n   (fn [coll x] (conj coll x delim))\n   []\n   xs)))", "user": "5b500215e4b02d533a91bce2"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "57a6552ce4b0a96607956208"}, {"problem": 40, "code": "(fn interp [v xs]\n  (cond\n   (empty? xs) (list)\n   (empty? (rest xs)) (take 1 xs)\n   :else\n   (loop [s (vector (first xs)), x (second xs), xs (drop 2 xs)]\n     (if (empty? xs) (into s (list v x))\n       (recur (into s (list v x)), (first xs), (rest xs))))))", "user": "5b4cd94ce4b02d533a91bcb1"}, {"problem": 40, "code": "(fn y [v coll]\n  (drop-last (interleave coll (repeat (count coll) v))))", "user": "5b62ff3ce4b0c6492753e72a"}, {"problem": 40, "code": "(fn [x c] (reduce (fn [s y] (conj s x y)) [(first c)] (rest c)))", "user": "5b5e7953e4b0c6492753e6d9"}, {"problem": 40, "code": "(fn interpos [mixin lst]\n  (reverse\n   (rest\n    (reverse\n     (reduce\n      concat\n      (map\n       (fn [x] (cons x (list mixin)))\n       lst)\n      )\n     )\n    )\n   )\n  )", "user": "5b5e5019e4b0c6492753e6d3"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5b61aa6ae4b0c6492753e712"}, {"problem": 40, "code": "(fn inter [e [x & xs]]\n   (if-not (nil? xs)\n     (concat [x e] (inter e xs))\n     [x]))", "user": "56e2ca59e4b03a7c14b85a38"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "574c66e1e4b02ea11479921d"}, {"problem": 40, "code": "#(->> %2\n      (reduce (fn [a b] (conj a %1 b)) [])\n      rest)", "user": "5b59d176e4b02d533a91bd86"}, {"problem": 40, "code": "(fn [delim xs]\n  (reduce #(conj %1 delim %2) [(first xs)] (rest xs)))", "user": "5b62764ae4b0c6492753e725"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop 1 (interleave (repeat sep) coll)))", "user": "5b67d634e4b0c6492753e76b"}, {"problem": 40, "code": "(fn\n  [value coll]\n  (drop-last\n   \t(interleave coll (repeat (count coll) value))))", "user": "5a3c06fce4b001c08efc0cdd"}, {"problem": 40, "code": "#(drop-last (mapcat list %2 (repeat (count %2) %)))", "user": "5b552e2ee4b02d533a91bd2e"}, {"problem": 40, "code": "(fn interp\n  [n l]\n  (if (= (count l) 1) (list (last l))\n    (cons (first l) (cons n (interp n (rest l))))))", "user": "5b679bf9e4b0c6492753e769"}, {"problem": 40, "code": "(fn [s x]\n  (loop [lst [] xs x]\n    (if (empty? xs)\n      lst\n      (if (empty? lst)\n        (recur (conj lst (first xs)) (rest xs))\n        (recur (conj lst s (first xs)) (rest xs))))))", "user": "5b58d012e4b02d533a91bd71"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5b6473eee4b0c6492753e73f"}, {"problem": 40, "code": "(fn [x s]\n  (drop-last 1 (reduce #(concat %1 [%2 x]) [] s)))", "user": "5b2689e3e4b063e2438bcc33"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5b6e1649e4b0c6492753e7ce"}, {"problem": 40, "code": "(fn [sep list] (rest (apply concat (map (fn [x] [sep x]) list))))", "user": "5b67f0fbe4b0c6492753e76d"}, {"problem": 40, "code": "(fn [separator coll] (rest (mapcat #(list separator %) coll)))", "user": "5b632851e4b0c6492753e72d"}, {"problem": 40, "code": "(fn [sep coll]\n  (rest (reduce #(conj %1 sep %2) [] coll)))", "user": "5b6f27dce4b0c6492753e7d9"}, {"problem": 40, "code": "(fn [sep c] (drop-last (flatten (map #(vector % sep) c))))", "user": "57ebbf3ae4b0bfb2137f5b66"}, {"problem": 40, "code": "(fn [sep sor]\n  (loop [src (next sor) res [(first sor)]]\n    (if (= nil src)\n      res\n      (recur (next src)\n        (conj res sep (first src)) \n      )\n    )\n  )\n)", "user": "5b5b0bb9e4b0c6492753e6a5"}, {"problem": 40, "code": "(fn [x xs] (loop [s xs\n                  ret []]\n             (if (empty? s)\n               (drop-last ret)\n               (recur (rest s) (conj ret (first s) x)))))", "user": "5b611666e4b0c6492753e70d"}, {"problem": 40, "code": "#(take (- (* 2 (count %2)) 1)\n       (interleave %2 (repeat %1)))", "user": "5b7292b3e4b047b03b2036a4"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5b772ad7e4b047b03b2036e8"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "592db566e4b072a2710fcf7c"}, {"problem": 40, "code": "(fn [intersection lst] (drop-last (reduce (fn [new_lst value] (into new_lst (list value intersection))) [] lst)))", "user": "5b513bd4e4b02d533a91bcf2"}, {"problem": 40, "code": "#(take (- (* 2 (count %2)) 1) (interleave %2 (into [] (take (count %2) (repeat %1)))))", "user": "5b780a8ce4b047b03b2036f6"}, {"problem": 40, "code": "(fn [sep xs] (cons (first xs) (mapcat #(list sep %) (rest xs))))", "user": "5b64370ae4b0c6492753e73c"}, {"problem": 40, "code": "(fn [n coll] (butlast (mapcat #(vector % n) coll)))", "user": "5b79cbdce4b047b03b20370a"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5b788fc4e4b047b03b2036fc"}, {"problem": 40, "code": "(fn IntercalaW [x y] (rest (reduce into [] (for [a y b [x]] [b a]))))", "user": "5b69baf9e4b0c6492753e78f"}, {"problem": 40, "code": "(fn [x z] (butlast (mapcat #(vector % x) z)))", "user": "5b754f8ee4b047b03b2036c9"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %1)))", "user": "5b4c2212e4b02d533a91bca6"}, {"problem": 40, "code": "(fn !\n  [n xs]\n  (drop-last (mapcat list xs (repeat (count xs) n))))", "user": "5b73e500e4b047b03b2036ba"}, {"problem": 40, "code": "(fn [sep s] (flatten (apply conj [(first s)] \n                            (map #(identity [sep %1]) (rest s)))))", "user": "5b7ec039e4b047b03b20375d"}, {"problem": 40, "code": "#(rest (interleave (repeat (count %2) %1) %2))", "user": "5b7f381ae4b047b03b203769"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5b7d1dc1e4b047b03b20373f"}, {"problem": 40, "code": "(fn my-interpose\n  [splitter coll]\n  (butlast (mapcat list coll (repeat splitter))))", "user": "5b82eec6e4b047b03b2037a4"}, {"problem": 40, "code": "(fn [x y]\n            (rest (mapcat #(list x %) y)))", "user": "5b83c02de4b047b03b2037b6"}, {"problem": 40, "code": "(fn [x s] (rest (mapcat #(list x %) s)))", "user": "5b774e66e4b047b03b2036ec"}, {"problem": 40, "code": "(fn [e coll] (drop 1 (interleave (repeat e) coll)))", "user": "56e9db9be4b04a395b9a03ff"}, {"problem": 40, "code": "#(butlast (mapcat (fn [x] (list x %1)) %2))", "user": "5b7bc82ce4b047b03b203726"}, {"problem": 40, "code": "#(drop 1 (flatten (for[x %2](vector %1 x))))", "user": "5826a843e4b051871117befd"}, {"problem": 40, "code": "(fn [separator column] (drop 1 (mapcat (fn [a] [separator a]) column)))", "user": "5b7ed20fe4b047b03b203760"}, {"problem": 40, "code": "(fn interp [i [f & r]] (cons f (interleave (repeat i) r)))", "user": "5b857411e4b047b03b2037ce"}, {"problem": 40, "code": "#(butlast ((fn f [n [x & p]] (if x (concat (list x n) (f n p) '()))) %1 %2))", "user": "5a085dfde4b01bb0ae8afdf4"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5b855800e4b047b03b2037cd"}, {"problem": 40, "code": "(fn [sep sq] (butlast (reduce (fn [result elem] (conj result elem sep)) [] sq)))", "user": "5b7ef8e6e4b047b03b203765"}, {"problem": 40, "code": "(fn [v input]\n  (conj (loop [in input \n         out []]\n    (if (= (count in) 1)\n      out\n      (recur (rest in)\n             (conj out (first in) v )))) (last input)))", "user": "5b8aa478e4b0c0b3ffbd49b2"}, {"problem": 40, "code": "(fn [i coll]\n  (pop (vec (flatten (for [x coll y [i]] [x y])))))", "user": "5b88f0c0e4b047b03b203816"}, {"problem": 40, "code": "(fn [i col] (take (- (* 2 (count col)) 1)(flatten (mapv vector col (repeatedly (constantly i))))))", "user": "5b11449ce4b0cc2b61a3be2d"}, {"problem": 40, "code": "(fn [i [a & more]]\n    (cons a (mapcat #(list i %) more)))", "user": "5b8f0861e4b0c0b3ffbd49f4"}, {"problem": 40, "code": "(fn put-between\n  [x y]\n  (if (> (count y) 1)\n    (concat [(first y) x]\n            (put-between x (rest y)))\n    (concat [(first y)] ())))", "user": "5b86462de4b047b03b2037df"}, {"problem": 40, "code": "(fn interpose-seq [seperator seq]\n  (loop [sequence seq\n         result '()]\n    (if (empty? sequence)\n      (take (- (count result) 1) result)\n      (recur (rest sequence) (concat result [(first sequence) seperator])))))", "user": "58ac01f7e4b0005cfeb1a73b"}, {"problem": 40, "code": "#(rest (apply concat (for [ele %2] [%1 ele])))", "user": "5b917764e4b0c0b3ffbd4a1f"}, {"problem": 40, "code": "(fn [x l] (rest (mapcat #(list x %) l)))", "user": "5b9263ece4b0c0b3ffbd4a37"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5b924123e4b0c0b3ffbd4a34"}, {"problem": 40, "code": "(fn [separator input_seq]\n    (butlast (reduce #(conj (conj %1 %2) separator) [] input_seq)))", "user": "592ac17ae4b072a2710fcf26"}, {"problem": 40, "code": "(fn [a b] (rest (mapcat #(list a %) b)))", "user": "599342efe4b0b211ea3aaab0"}, {"problem": 40, "code": "#(drop-last (mapcat list %2 (iterate identity %1)))", "user": "5b92f178e4b0c0b3ffbd4a41"}, {"problem": 40, "code": "(fn [delim s]\n  (let [tmp (mapcat list s (repeat (count s) delim))]\n    (take (dec (count tmp)) tmp)))", "user": "5b9357b7e4b0c0b3ffbd4a46"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "57c647bbe4b05aa3c4741cf3"}, {"problem": 40, "code": "(fn\n  [v s]\n  (let [new-seq (reduce (fn [new-seq sv]\n                  (conj new-seq sv v))\n                  []\n                  s)]\n    (drop-last new-seq)))", "user": "59b93cd7e4b0a024fb6ae3c7"}, {"problem": 40, "code": "(fn ff \n  [k c]\n  (if (<= (count c) 1)\n    c\n    (concat [(first c) k] (ff k (rest c)))))", "user": "5b8db323e4b0c0b3ffbd49da"}, {"problem": 40, "code": "(fn [v xs]\n   (->> xs (map #(vector % v)) flatten butlast))", "user": "5b96800ae4b0c0b3ffbd4a7b"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1) ))", "user": "5b985fe5e4b0c0b3ffbd4ab1"}, {"problem": 40, "code": "(fn [x l] (reduce #(conj %1 x %2) [(first l)] (rest l)))", "user": "5b919d9de4b0c0b3ffbd4a24"}, {"problem": 40, "code": "(fn [a b]\n    (butlast (mapcat #(vector % a) b)))", "user": "5b999af8e4b0c0b3ffbd4ad3"}, {"problem": 40, "code": "(fn [sep xs]\n  (loop [acc [(first xs)] x (next xs)]\n    (if (empty? x) \n      acc \n      (recur (conj acc sep (first x)) (next x)))))", "user": "5b9db58be4b0c0b3ffbd4b41"}, {"problem": 40, "code": "(fn [n xs] (drop-last (mapcat #(vector % n) xs)))", "user": "57a5da5ee4b0a966079561fe"}, {"problem": 40, "code": "(fn [s xs] \n (butlast (mapcat #(list % s) xs)))", "user": "570d0548e4b0b0fb43fd06d2"}, {"problem": 40, "code": "(fn interpose-impl [arb-value coll]\n  (drop-last (flatten (reduce (fn loopicius [acc value]\n                                (conj acc [value arb-value])\n                                )\n                              []\n                              coll)))\n  )", "user": "5b265183e4b063e2438bcc31"}, {"problem": 40, "code": "(fn f [a b] (rest (loop [z [] l b] (if (empty? l) z (recur (conj z a (first l)) (rest l))))))", "user": "5b99a0a3e4b0c0b3ffbd4ad7"}, {"problem": 40, "code": "(fn [x coll]\n (drop-last 1 (interleave coll (repeat x))))", "user": "5ba5802de4b0a20761a233fd"}, {"problem": 40, "code": "#(->> (for [c %2] [c %1])\n     (flatten)\n     (drop-last))", "user": "58182480e4b0c0e9c07b83a7"}, {"problem": 40, "code": "(fn myip [sep lst] \n           (drop-last (interleave lst (repeat (count lst) sep))))", "user": "5b9d3913e4b0c0b3ffbd4b37"}, {"problem": 40, "code": "(fn interspose-fn [x s]\n    (butlast (mapcat vector s (repeat (count s) x))))", "user": "5b9acb23e4b0c0b3ffbd4aef"}, {"problem": 40, "code": "(fn [x coll]\n  (drop-last\n    (interleave coll\n                (repeat (count coll) x))))", "user": "5b602a66e4b0c6492753e6fc"}, {"problem": 40, "code": "(fn foo [a [x & xs]]\n  (if (empty? xs)\n    [x]\n    (cons x (cons a\n                  (foo a xs)))))", "user": "5bab5440e4b0a20761a23475"}, {"problem": 40, "code": "(fn\n  [val s]\n  (drop-last\n   (reduce\n    (fn [acc e]\n      (concat acc [e val]))\n    []\n    s)))", "user": "5bab49bbe4b0a20761a23474"}, {"problem": 40, "code": "(fn my-interpose\n  [x c]\n  (drop-last (reduce (fn [l e] (into l [e x]))\n                     []\n                     c)))", "user": "5af3aa42e4b0cc2b61a3bc8c"}, {"problem": 40, "code": "(fn [val list]\n    (reduce (fn [acc v] \n                (conj \n                    (if (empty? acc) acc (conj acc val)) \n                        v)) [] list))", "user": "5a66fddee4b0512ff01cd9d7"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5bafd5c8e4b0a20761a234dd"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "5b98f7f3e4b0c0b3ffbd4ac2"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5b77248ae4b047b03b2036e7"}, {"problem": 40, "code": "(fn [y xs]\n       (reduce (fn [acc x]\n                 (conj acc y x))\n               [(first xs)] (rest xs)))", "user": "5bb17123e4b0a20761a234fd"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %)))", "user": "5bb23cf1e4b0a20761a2350a"}, {"problem": 40, "code": "(fn [x seq]\n\t(drop-last (mapcat #(list % x) seq)))", "user": "5a932f63e4b0d174b936c71b"}, {"problem": 40, "code": "(fn  [a b]\n (rest (reduce #(conj %1 a %2) '[] b)))", "user": "566d71b1e4b0a866af6896ca"}, {"problem": 40, "code": "#(rest (mapcat list (repeat %1) %2))", "user": "5b81139fe4b047b03b203782"}, {"problem": 40, "code": "#(take (dec (* 2 (count %2)))(interleave %2 (take  (count %2)(repeat %1))))", "user": "5951190be4b066ee0a44aea4"}, {"problem": 40, "code": "#(butlast (mapcat vector %2 (repeat %1)))", "user": "5b759ca8e4b047b03b2036d0"}, {"problem": 40, "code": "(fn my-interpose [item coll]\n   (if (seq (rest coll)) (cons (first coll) (cons item (my-interpose item (rest coll))))\n       coll))", "user": "5bb25684e4b0a20761a2350d"}, {"problem": 40, "code": "#(conj (into [] (interleave %2 (repeat (dec (count %2)) %1)))\n       (last %2))", "user": "5b9c4a7be4b0c0b3ffbd4b16"}, {"problem": 40, "code": "(fn fun [sep arr]\n  (cond\n    (empty? arr) nil\n    (= 1 (count arr)) arr\n    :default \n      (conj (fun sep (rest arr)) sep (first arr))\n  )\n)", "user": "5bb905dce4b0a20761a235c7"}, {"problem": 40, "code": "(fn [x lst](rest (mapcat #(list x %) lst)))", "user": "5bbbce0ee4b0a20761a2360d"}, {"problem": 40, "code": "(fn foo [val coll]\n  (butlast\n    (apply concat (map vector coll (repeatedly (partial identity val))))))", "user": "59f4c42ce4b0966464fe6ab6"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "5bab8c06e4b0a20761a2347e"}, {"problem": 40, "code": "(fn [delimiter, stuff]\n  (reduce (fn [arg1 arg2] (flatten (conj (conj (conj [] arg1) delimiter) arg2 ) ) ) stuff )\n)", "user": "5bbd13a5e4b07a9b28b0ff95"}, {"problem": 40, "code": "(fn [n lst] (butlast (mapcat #(vector % n) lst)))", "user": "5bbc0ddfe4b0a20761a2361e"}, {"problem": 40, "code": "(fn [sep xs] (butlast (mapcat vector xs (repeat (count xs) sep))))", "user": "5a68f374e4b0512ff01cda05"}, {"problem": 40, "code": "#(butlast (mapcat vector %2 (repeat %1)))", "user": "5829d9f8e4b051871117bf4d"}, {"problem": 40, "code": "#(butlast (mapcat vector %2 (repeat %1)))", "user": "5bc15685e4b07a9b28b10016"}, {"problem": 40, "code": "(fn [elem lst] \n  (butlast (mapcat #(vector % elem) lst)))", "user": "5bbbce70e4b0a20761a2360f"}, {"problem": 40, "code": "(fn [v l] (concat (mapcat #(list % v) (butlast l)) [(last l)]))", "user": "5bc39d2be4b07a9b28b10045"}, {"problem": 40, "code": "(fn [del col]\n  (butlast (flatten (map #(list % del) col))))", "user": "5b85221ce4b047b03b2037c8"}, {"problem": 40, "code": "(fn interp [inter [fi se & xss]]\n  (apply concat \n   (loop [f fi\n         s se\n         xs xss\n         acc []]\n     (if s\n       (recur s (first xs) (rest xs) (conj acc [f inter]))\n       (conj acc [f])))))", "user": "587fb546e4b0f1effa3b75f9"}, {"problem": 40, "code": "(fn [x lst] (butlast (mapcat #(vector % x) lst)))", "user": "5bbbba29e4b0a20761a23609"}, {"problem": 40, "code": "(fn [x y] (rest (interleave (repeat x) y)))", "user": "5bb3c9a8e4b0a20761a2352f"}, {"problem": 40, "code": "(fn [i c] (drop-last (reduce #(conj %1 %2 i) [] c)))", "user": "5b8f77a8e4b0c0b3ffbd49fa"}, {"problem": 40, "code": "(fn [s coll] (drop-last (mapcat #(conj () s %1) coll)))", "user": "5bc488bde4b07a9b28b10053"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5bc255b7e4b07a9b28b10029"}, {"problem": 40, "code": "(fn my-interpose\n  [n lst]\n  (butlast (mapcat #(reverse (cons n %)) (partition 1 lst))))", "user": "5bbbcf9ee4b0a20761a23614"}, {"problem": 40, "code": "(fn [n c]\n  (butlast (mapcat #(vector % n) c)))", "user": "543a8256e4b032a45b869327"}, {"problem": 40, "code": "(fn my-interpose\n  [x lst]\n  (if (= 1 (count lst))\n    lst\n    (conj (my-interpose x (rest lst)) x (first lst)))\n  )", "user": "5bc8c033e4b07a9b28b100ca"}, {"problem": 40, "code": "(fn f [v [x & xs]]\n  (if (seq xs)\n    (cons x (cons v (f v xs)))\n   \t[x]))", "user": "59d8f23ae4b0ef0a1e9b5c49"}, {"problem": 40, "code": "(fn [sep, l]\n\t\t\t(mapcat \n\t\t\t\t#(if (= %1 0) (list %2) (list sep %2) ) (range (count l))\n\t\t\t\tl\n\t\t\t) \n\t\t)", "user": "5bbbd484e4b0a20761a23617"}, {"problem": 40, "code": "(fn [sep items]\n  (reduce\n    (fn [acc x]\n      (if (empty? acc) (conj acc x) (conj (conj acc sep) x)))\n    [] items))", "user": "59a0286be4b0871e7608b82f"}, {"problem": 40, "code": "(fn [x coll]\n  (->>\n    coll\n   (mapcat #(list % x))\n   (butlast)\n  )\n)", "user": "5bc28638e4b07a9b28b10033"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %)))", "user": "5bb5cd43e4b0a20761a23575"}, {"problem": 40, "code": "(fn [n lst]\n  (loop [lst lst\n         result ()]\n    (if (empty? lst)\n      (take (dec (count result))(reverse result))\n      (recur\n        (rest lst)\n        (cons n (cons (first lst) result))))))", "user": "5bcb672ee4b07a9b28b10100"}, {"problem": 40, "code": "(fn interpose_seq\n  [element vec ]\n  \"function which separates the items of a sequence by an arbitrary value\"\n  (loop\n    [vec vec\n     result []]\n    (= result )\n    (if (= (count vec) 1)\n      (conj result (first vec) )\n      (recur (rest vec)  (conj (conj result (first vec) ) element ))\n       )))", "user": "5bbbd077e4b0a20761a23615"}, {"problem": 40, "code": "(fn inter_seq\n  [element vec ]\n  (loop\n    [vec vec\n     res []]\n    (= res )\n    (if (= (count vec) 1)\n      (conj res (first vec) )\n      (recur (rest vec)  (conj (conj res (first vec) ) element )))))", "user": "5bbbcecee4b0a20761a23611"}, {"problem": 40, "code": "(fn [sep sequ] (butlast (mapcat #(vector % sep) sequ)))", "user": "5bc50870e4b07a9b28b10069"}, {"problem": 40, "code": "(fn\n  [a b]\n  (reverse (rest (reverse(mapcat #(vector % a) b))))\n  )", "user": "5bbbce99e4b0a20761a23610"}, {"problem": 40, "code": "(fn [inter lst]\n   (butlast (mapcat #(list % inter) lst)))", "user": "5bbbce60e4b0a20761a2360e"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5bbbcf3ae4b0a20761a23612"}, {"problem": 40, "code": "(fn [x lst] (butlast (mapcat #(vector % x) lst)))", "user": "5bc7ba68e4b07a9b28b100b0"}, {"problem": 40, "code": "(fn [v coll] \n  (butlast (mapcat #(vector % v) coll)))", "user": "5bbbcf81e4b0a20761a23613"}, {"problem": 40, "code": "(fn intrps [x [y & ys]]\n  (if (empty? ys)\n    [y]\n    (concat [y x] (intrps x ys))))", "user": "5bcddaeee4b0e9689409ee07"}, {"problem": 40, "code": "(fn [sep coll] (drop 1 (mapcat list (repeat sep) coll)))", "user": "5bc833a5e4b07a9b28b100bb"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "578dc040e4b0ebec4cfb756d"}, {"problem": 40, "code": "#(drop-last (interleave %2 (cycle (list %1))))", "user": "5bc8e91ee4b07a9b28b100ce"}, {"problem": 40, "code": "(fn [v s] (drop-last (reduce #(conj %1 %2 v) [] s)))", "user": "5b72b36ce4b047b03b2036a9"}, {"problem": 40, "code": "(fn [v col] (butlast (mapcat #(vector % v) col)))", "user": "5b337ff4e4b025bcb146f339"}, {"problem": 40, "code": "(fn [i xs]\n  (loop [xs xs\n         acc nil]\n    (if (empty? xs)\n      (reverse (drop 1 acc))\n      (recur (rest xs) (cons i (cons (first xs) acc))))))", "user": "5b673832e4b0c6492753e760"}, {"problem": 40, "code": "(fn [sp col]\n  (loop [acc [] rst col]\n    (if (nil? (next rst))\n      (into acc rst)\n      (recur (into acc (list (first rst) sp)) (rest rst)))))", "user": "5bd7b8b8e4b0ed4b8aab4bc6"}, {"problem": 40, "code": "#(drop 1 (mapcat list (repeat %1) %2))", "user": "567c63f6e4b05957ce8c61bb"}, {"problem": 40, "code": "#(rest(interleave (repeat %1) %2))", "user": "5bc611e3e4b07a9b28b10083"}, {"problem": 40, "code": "(fn [separator collec] (drop-last (into [] (flatten (for [item  collec] [item separator])))))", "user": "59595f85e4b066ee0a44afa1"}, {"problem": 40, "code": "(fn [x l]\n  (let [tst (fn [res ll]\n  \t\t\t  (if (= (count ll) 1)\n                (concat res ll)\n    \t\t\t(recur (concat res (list (first ll)) (list x)) (rest ll))))]\n    (tst '() l)))", "user": "583019b8e4b051871117bfff"}, {"problem": 40, "code": "(fn f [i xs] (if (= (count xs) 1)\n                (list (first xs))\n                (concat (list (first xs) i)\n                        (f i (rest xs)))))", "user": "5bd9549ee4b0ed4b8aab4bf0"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5bbdd136e4b07a9b28b0ffab"}, {"problem": 40, "code": "(fn [sep input-list]\n  (loop [sep sep cl input-list ol []]\n    (if (empty? cl)\n      ol\n      (if (empty? (rest cl))\n        (into ol [(first cl)])\n        (recur sep (rest cl) (into ol [(first cl) sep]))\n        )\n      )\n    )\n  )", "user": "5bdf651ee4b0ed4b8aab4c6d"}, {"problem": 40, "code": "(fn [x xs] (rest(mapcat #(list x %1) xs)))", "user": "5bd999cce4b0ed4b8aab4bf4"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "5be0306be4b0ed4b8aab4c7d"}, {"problem": 40, "code": "(fn [separator mylist]\n  (butlast(interleave mylist (repeat (count mylist) separator))))", "user": "5be22678e4b0ed4b8aab4cb1"}, {"problem": 40, "code": "(fn my-interpose [x xs]\n                     (if (= (rest xs) ())\n                       xs\n                       (cons (first xs) (cons x (my-interpose x (rest xs))))))", "user": "5be1c6c6e4b0ed4b8aab4ca5"}, {"problem": 40, "code": "(fn __ [v s] (butlast (mapcat #(list % v) s)))", "user": "5be2e670e4b0ed4b8aab4ccc"}, {"problem": 40, "code": "(fn [x coll]\n    (drop-last (interleave coll\n                           (repeat x))))", "user": "5be5cebde4b0ed4b8aab4d19"}, {"problem": 40, "code": "(fn [delimiter xs] (drop-last (flatten (map #(list % delimiter) xs))))", "user": "5be58beae4b0ed4b8aab4d14"}, {"problem": 40, "code": "(fn inter [x coll] (if (= 1 (count coll)) coll (cons (first coll) (cons x (inter x (rest coll))))))", "user": "5be6d0f8e4b0f319e2d7ec51"}, {"problem": 40, "code": ";;Function that adds a separator between elements in a collection\n;(fn [separator col]\n;  (loop [v col result []]\n;    (let [i (first v)]\n;     (if (nil? i)\n;        (drop-last result)\n;        (do\n;          (let [auxCol (rest v) res (conj result i separator)]\n;            (recur auxCol res)))))))\n\n#(drop-last (mapcat vector %2 (repeat (count %2) %1)))", "user": "5be589f9e4b0ed4b8aab4d13"}, {"problem": 40, "code": "(fn [p1 p2]\n  (butlast\n   (mapcat\n    #(vector % p1)\n    p2)))", "user": "5bcff1dce4b0e9689409ee32"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "575f6a80e4b08062f99a4e80"}, {"problem": 40, "code": "(fn ! [x l]\n  (if (= 1 (count l))\n    l\n    (conj (! x (rest l)) x (first l))\n  )\n)", "user": "551ebcd7e4b08d5046aa8a4a"}, {"problem": 40, "code": "(fn [x a-seq]\n  (if (empty? a-seq)\n    ()\n    (reduce (fn [sq rst] (conj (conj sq x) rst)) [(first a-seq)] (rest a-seq))))", "user": "5be33a16e4b0ed4b8aab4cd6"}, {"problem": 40, "code": "(fn [a col]\n  (reverse \n   (rest \n    (reduce \n     #(conj %1 %2 a) () col))))", "user": "5b6ba7d7e4b0c6492753e7ad"}, {"problem": 40, "code": "#(conj (reduce (fn [x y]\n              (conj x y %1)) [] (butlast %2)) (last %2))", "user": "5bc64843e4b07a9b28b10091"}, {"problem": 40, "code": "(fn [v s]\n(drop-last\n(interleave s (repeat (count s) v))))", "user": "55469eede4b0a04f79299542"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5b7d03a0e4b047b03b20373d"}, {"problem": 40, "code": "(fn myinte [nn [x & more]] \n  (lazy-seq \n   (when x\n     (if more\n       (cons x (cons nn (myinte nn more)))\n       (cons x nil)))))", "user": "5bedddeee4b0a6d31fed2128"}, {"problem": 40, "code": "(fn [inter, col] (rest (mapcat list (repeat inter) col)))", "user": "5be182eae4b0ed4b8aab4c9d"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5be70bd5e4b0f319e2d7ec53"}, {"problem": 40, "code": "(fn implode [y x]\n  (if (empty? (rest x))\n    x\n    (conj (implode y (rest x)) y (first x))\n  )\n)", "user": "5bef02ede4b0a6d31fed2138"}, {"problem": 40, "code": "(fn [i s]\n  (drop 1 (mapcat #(vector i %) s))\n  )", "user": "5a42dbabe4b0447ef91cc5fc"}, {"problem": 40, "code": "(fn [delimiter [first_item & other_items]] \n  (reduce \n   (fn [result next_item] (concat result [delimiter next_item]))\n   [first_item] other_items))", "user": "5a09a6f7e4b01bb0ae8afe14"}, {"problem": 40, "code": "(fn [x seq] (drop-last (vec (mapcat #(conj [] % x) seq))))", "user": "5bf5ddfde4b0bdcf453d159e"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "5bf0aefde4b0a6d31fed215a"}, {"problem": 40, "code": "(fn [x s] (butlast (mapcat #(list % x) s)))", "user": "5beb8e28e4b0f319e2d7ec8e"}, {"problem": 40, "code": "(fn my-interpose [val sq]\n  ;; I just proved I could write interleave, so I'm going to do that.\n  (butlast (interleave sq (repeat (count sq) val))))", "user": "5bfa25fbe4b0bdcf453d15c8"}, {"problem": 40, "code": "(fn [inj coll]\n (reduce (fn [coll x]\n           (concat coll [inj x]) )\n         [(first coll)]\n      (rest coll)\n         ) )", "user": "5b15ab32e4b0cc2b61a3be72"}, {"problem": 40, "code": "(fn [n coll] (butlast (mapcat #(list % n) coll)))", "user": "5beda647e4b0a6d31fed2122"}, {"problem": 40, "code": "(fn [el l] (reduce #(if (= %2 (last l)) (conj %1 %2) (conj %1 %2 el)) [] l))", "user": "5bf313e8e4b0a6d31fed2188"}, {"problem": 40, "code": "(fn [sep xs]\n  (reduce #(conj %1 sep %2) [(first xs)] (rest xs)))", "user": "5ba15075e4b0a20761a2339e"}, {"problem": 40, "code": "(fn [interposition items]\n  (loop [items items result []]\n    (let [item (first items)]\n      (if (= 1 (count items)) (conj result item)\n          (recur (rest items) (conj result item interposition))))))", "user": "596aaeefe4b069c0a1a19808"}, {"problem": 40, "code": "#(pop (vec (mapcat list %2  (repeat (count %2 ) %1) )))", "user": "5be79b5be4b0f319e2d7ec5a"}, {"problem": 40, "code": "#(loop [jj %,ll %2,rr []]\n   (if (empty? ll)\n     (pop rr)\n     (recur jj \n             (rest ll) \n               (conj \n                (conj rr (first ll)) jj)))\n   )", "user": "56c50599e4b05cc29241ee9e"}, {"problem": 40, "code": "(fn [del coll] (take (- (* 2 (count coll)) 1) (interleave coll (repeat del))))", "user": "5c03e927e4b0bdcf453d167b"}, {"problem": 40, "code": "(fn [s xs]\n  (rest (interleave (repeat s) xs)))", "user": "5bea3177e4b0f319e2d7ec81"}, {"problem": 40, "code": "(fn [s [h & t]] (cons h (interleave (repeat s) t)))", "user": "5bfe4ecfe4b0bdcf453d1608"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5bed84b1e4b0a6d31fed2120"}, {"problem": 40, "code": "#(pop (reduce (fn [m k] (conj m k %1)) [] %2))", "user": "5c0a87e6e4b0bdcf453d1707"}, {"problem": 40, "code": "(fn [delimiter coll]\n   (butlast (mapcat #(list % delimiter) coll)))", "user": "5bef3e88e4b0a6d31fed213f"}, {"problem": 40, "code": "(fn [sep sq]\n  (reduce \n    (fn [col elem] \n      (conj col sep elem)\n    )\n  [(first sq)] (rest sq))\n\n)", "user": "5beebdb7e4b0a6d31fed2132"}, {"problem": 40, "code": "#(reduce\n (fn [acc val]\n   (conj (conj acc %1) val)\n )\n (conj [] (first %2))\n (rest %2)\n)", "user": "5c0d0537e4b0bdcf453d173d"}, {"problem": 40, "code": "(fn [j xs] (vec (rest (mapcat identity (map vector (repeat j) xs)))))", "user": "5c0e58bfe4b01240ff567140"}, {"problem": 40, "code": "(fn [x y] (drop-last (mapcat list  y (repeat x))))", "user": "5c0e22cae4b01240ff56713b"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "594d4c57e4b07ddc2dafae87"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5bfada5ee4b0bdcf453d15d2"}, {"problem": 40, "code": "(fn inter [i v] (drop-last (reduce into (map #(vector % i) v))))", "user": "5c0ebca5e4b01240ff567147"}, {"problem": 40, "code": "(fn [delim coll] (butlast (reduce #(conj %1 %2 delim) [] coll)))", "user": "5c13da47e4b01240ff5671a6"}, {"problem": 40, "code": "#(butlast (flatten (for [x %2] [x %1])))", "user": "5c13ce5ee4b01240ff5671a4"}, {"problem": 40, "code": "(fn [s coll]\n  (loop [coll coll res []]\n    (let [f (first coll)\n          r (rest coll)]\n      (if (empty? r)\n        (conj res f)\n        (recur r (conj res f s))))))", "user": "5c04464ee4b0bdcf453d167d"}, {"problem": 40, "code": "(fn [delim xs] (drop 1 (mapcat vector (repeat delim) xs)))", "user": "532ae82be4b09d4e7a9b552b"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat (count %2) %1)))", "user": "5b8ec146e4b0c0b3ffbd49f0"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5c165d3ee4b01240ff5671d1"}, {"problem": 40, "code": "(fn [x coll]\n  (rest (->> (map vector (repeat x) coll)\n             (apply concat))))", "user": "5c15537ae4b01240ff5671bf"}, {"problem": 40, "code": "#(rest (mapcat list (repeat %1) %2))", "user": "57131a8ee4b07c98581c3a97"}, {"problem": 40, "code": "(fn [x coll]\n  (let [j (dec (count coll))]\n    (apply concat (map-indexed (fn [i y] (if (= i j) [y] [y x])) coll))))", "user": "5c1bee41e4b01240ff567218"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last)", "user": "5c1aadcde4b01240ff567209"}, {"problem": 40, "code": "(fn [sep aseq]\n   (->> aseq\n        (map (fn [n] [n sep]))\n        flatten\n        drop-last))", "user": "5c1ca642e4b0efcb0b05b23c"}, {"problem": 40, "code": "(fn \n  [sep arr]\n  (let [z (reduce (fn [x y] (conj x y sep)) [] arr)]\n    (seq (take (- (count z) 1) z))\n    )\n  )", "user": "5c1d9f05e4b0efcb0b05b24c"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat (count %2) %1) %2))", "user": "5c1edf23e4b0efcb0b05b25d"}, {"problem": 40, "code": "(fn [a b]\n  (butlast (interleave b (repeat a))))", "user": "58273e82e4b051871117bf1b"}, {"problem": 40, "code": "#(rest (mapcat (fn [a] [% a]) %2))", "user": "5b0bd9cfe4b0cc2b61a3bdd9"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5c17467fe4b01240ff5671df"}, {"problem": 40, "code": "(fn customInterpose\n  [separator, s]\n  (drop 1 (mapcat #(list separator %) s )) \n  )", "user": "5c20b6abe4b07e362c230576"}, {"problem": 40, "code": "(fn my-interpose\n  [v xs]\n  (butlast (mapcat #(list % v) xs)))", "user": "5c222b7de4b07e362c230588"}, {"problem": 40, "code": "(fn [el coll]\n  (butlast (mapcat #(vector %1 %2) coll (repeat (count coll) el))))", "user": "5b60e88be4b0c6492753e70b"}, {"problem": 40, "code": "#(cons (first %2) (mapcat (fn [x] (list %1 x)) (rest %2)))", "user": "5c228b51e4b07e362c23058c"}, {"problem": 40, "code": "(fn [x y] (drop-last (flatten (map #(conj [] % x) y))))", "user": "582c986ee4b051871117bf9b"}, {"problem": 40, "code": "(fn [n s] (reduce #(conj %1 n %2) [(first s)] (rest s)))", "user": "5c092334e4b0bdcf453d16ea"}, {"problem": 40, "code": "(fn [x s] \n  (let [helper (fn [tail rez]\n                   (if (= 1 (count tail))\n                   (conj rez (first tail))\n                  (recur (next tail) (conj rez (first tail) x) )))]\n  (helper s [])))", "user": "5776903ee4b0979f8965163b"}, {"problem": 40, "code": "#(->>\n  (for [x %2, y [%1]] [y x])\n  (mapcat identity)\n  rest)", "user": "5c219c0fe4b07e362c230581"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5c2649c8e4b07e362c2305bf"}, {"problem": 40, "code": "#(drop-last (flatten (for [ele %2] [ele %1])))", "user": "5c0e3f86e4b01240ff56713d"}, {"problem": 40, "code": "(fn [v s] (reduce (fn [a x] \n                       (if (coll? a) \n                           (conj a v x)\n                           [a v x])\n                    )  \n                    s\n            )\n  )", "user": "5c272f82e4b07e362c2305cb"}, {"problem": 40, "code": "#(-> (map (fn [elem] [elem %1]) %2)\n     flatten\n     butlast)", "user": "55f48d1be4b06e875b46ce7b"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "5c2836ebe4b07e362c2305d4"}, {"problem": 40, "code": "#(loop[res []\n      b %2]\n  (if (= 1(count b))\n    (conj res (first b))\n    (recur \n      (conj (conj res (first b)) %1)\n      (rest b)\n    )\n  )\n)", "user": "5bfcdc52e4b0bdcf453d15f4"}, {"problem": 40, "code": "(fn in[sep [f & more]]\n  (reduce\n    #(conj %1 sep %2)\n   \t[f]\n   \tmore))", "user": "5ba75fdfe4b0a20761a23419"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "50eeeadae4b02c17778c91f3"}, {"problem": 40, "code": "(fn [v s]\n  (reduce #(conj %1 v %2) [(first s)] (rest s)))", "user": "57d57f65e4b0bd073c2023b3"}, {"problem": 40, "code": "#(butlast (mapcat (fn [x] [x %1]) %2))", "user": "5c2f0cdfe4b0d62ef62d9f09"}, {"problem": 40, "code": "(fn [x coll]\n  (loop [output []\n         coll   coll]\n    (if (empty? coll)\n      output\n      (if (= 1 (count coll))\n        (conj output (first coll))\n        (recur (conj output (first coll) x) (rest coll))))))", "user": "5c24671be4b07e362c2305a1"}, {"problem": 40, "code": "(fn [in xs] (butlast (mapcat #(-> [% in]) xs)))", "user": "5c2d1f63e4b0d62ef62d9ef0"}, {"problem": 40, "code": "(fn [x s] \n(rest (mapcat #(vector x %1) s) ))", "user": "5c32ea85e4b0d62ef62d9f3e"}, {"problem": 40, "code": "(fn my-iterpose\n  [x coll]\n  (concat (interleave coll (repeat (- (count coll) 1) x) ) [(last coll)]))", "user": "5c36d110e4b0d62ef62d9f6a"}, {"problem": 40, "code": "(fn f[d s1]\n  (next (mapcat list (repeat (count s1) d) s1))\n)", "user": "5c337305e4b0d62ef62d9f48"}, {"problem": 40, "code": "(fn [v,coll]\n    (take (dec (* (count coll) 2))  (flatten (map #(list %1 %2) coll (repeat (count coll) v)))))", "user": "5a64dcabe4b0512ff01cd9a9"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat (count %2) %1)))", "user": "5c3ac091e4b0d62ef62d9f95"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "5c379636e4b0d62ef62d9f76"}, {"problem": 40, "code": "(fn interpose-impl [sep in-seq]\n  (conj (reduce (fn [col ele] (apply conj col ele)) (map (fn [seq-ele] (vector seq-ele sep)) (butlast in-seq))) \n                (last in-seq)))", "user": "5c196dc3e4b01240ff5671fa"}, {"problem": 40, "code": "(fn [elem my-seq]\n\n  (drop 1 (mapcat #(conj () % elem) my-seq))\n\n)", "user": "5c321b8ae4b0d62ef62d9f32"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5c3d8576e4b0d62ef62d9fb4"}, {"problem": 40, "code": "(fn doimpose\n  [y xs]\n  (reduce\n   (fn\n     [acc x]\n     (if(odd? (count acc))\n       (conj acc y x)\n       (conj acc x) ))\n   [] xs))", "user": "5c35acffe4b0d62ef62d9f62"}, {"problem": 40, "code": "(fn\n  [sep s]\n  (reduce\n   (fn\n     [coll elem]\n     (conj coll sep elem))\n   [(first s)]\n   (rest s)))", "user": "5c05cae7e4b0bdcf453d16a3"}, {"problem": 40, "code": "(fn [delimiter coll]\n  (drop-last\n   (mapcat #(conj [] % delimiter) coll)))", "user": "5c2dfca3e4b0d62ef62d9efc"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "5c308385e4b0d62ef62d9f1c"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last (mapcat vector coll (repeat sep))))", "user": "5c374db6e4b0d62ef62d9f73"}, {"problem": 40, "code": "#(butlast (mapcat (fn [e] (list e %1)) %2))", "user": "5c408a61e4b08cd430848eb2"}, {"problem": 40, "code": "(fn [i ss]\n  (loop [s (rest ss) m [(first ss)]]\n    (if (empty? s)\n      m\n      (recur (rest s)\n             (conj m i (first s))))))", "user": "54961073e4b0b312c081ff62"}, {"problem": 40, "code": "(fn [sep coll] (butlast (mapcat #(list % sep) coll)))", "user": "5c3f37fce4b08cd430848e91"}, {"problem": 40, "code": "(fn inter [sep coll]\n  (->> coll\n       (partition 1)\n       (map #(conj % sep))\n       (apply concat)\n       (drop 1)))", "user": "5c411df3e4b08cd430848ebf"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %1)))", "user": "57635e2de4b0994c1922fbbf"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5c3796b3e4b0d62ef62d9f77"}, {"problem": 40, "code": "(fn inter[a s]\n  (if(= (count s) 1)\n    (list (first s))\n    (conj (inter a (rest s)) a (first s))))", "user": "5c486dece4b0e06e1360a3c0"}, {"problem": 40, "code": "(fn [sep coll] (drop-last (flatten (map (fn [x] (list x sep)) coll))))", "user": "52384eb1e4b0fae3832e99fa"}, {"problem": 40, "code": "#(loop[l %2,e %1, r [] ]\n  (cond\n    (nil? l) r\n    (nil? (next l)) (recur (next l) e  (conj r (first l) ) )\n    :else (recur (next l) e  (conj r (first l) e)) \n    )\n  )", "user": "5c4ab449e4b0f9f7a8770e57"}, {"problem": 40, "code": "#(drop-last (mapcat (fn [x] [x %1]) %2))", "user": "5c4c74efe4b0f9f7a8770e76"}, {"problem": 40, "code": "#(cons (first %2) (interleave (repeat %1) (rest %2)))", "user": "5c512811e4b0fb8c5ffd99c2"}, {"problem": 40, "code": "#(butlast (mapcat (fn [x] (conj (vector x) %1)) %2))", "user": "5c48757fe4b0e06e1360a3c3"}, {"problem": 40, "code": "(fn my-interpose [sep coll]\n  (take (dec (* 2 (count coll))) (interleave coll (repeat sep))))", "user": "5c506951e4b0f9f7a8770ec5"}, {"problem": 40, "code": "(fn [v col]\n  (drop-last 1 \n             (interleave col (repeat v))))", "user": "5c30da5ae4b0d62ef62d9f23"}, {"problem": 40, "code": "#(drop-last (mapcat list %2 (repeat %1)) )", "user": "5c45e703e4b0e06e1360a391"}, {"problem": 40, "code": "(fn [x s]\n  (rest (interleave (repeat x) s)))", "user": "5c387c51e4b0d62ef62d9f83"}, {"problem": 40, "code": "(fn [d s]\n  (letfn [(impl [s r]\n                (if (<= (count s) 1)\n                  (concat r s)\n                  (recur (rest s) (concat r [(first s) d]))))]\n    (impl s '())))", "user": "5c50048ae4b0f9f7a8770eb9"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "5bc09ebae4b07a9b28b10005"}, {"problem": 40, "code": "#(rest (interleave (take (count %2) (repeat %1)) %2))", "user": "5b14475be4b0cc2b61a3be5a"}, {"problem": 40, "code": "(fn pos [x l] (if (= (count l) 1) [(first l)] (concat [(first l) x] (pos x (rest l)) )))", "user": "5c54e605e4b0fb8c5ffd9a14"}, {"problem": 40, "code": "(fn [sep lst]\n  (cons (first lst)\n     (reduce (fn [acv v]\n               (concat acv (list sep v))) () (rest lst))))", "user": "5773e5b0e4b0979f896515ef"}, {"problem": 40, "code": "(fn [m xs]\n  (loop [in xs\n         out []\n         first-time true]\n    (if (empty? in)\n      out\n      (recur (rest in)\n             (if first-time\n                 (conj out (first in))\n                 (conj out m (first in)))\n             false))))", "user": "5c57fc9ae4b0fb8c5ffd9a52"}, {"problem": 40, "code": "(fn [i xs] (drop-last (mapcat #(list % i) xs)))", "user": "5c53127ee4b0fb8c5ffd99ef"}, {"problem": 40, "code": "#(->> %1\n       (repeat)\n       (take (count %2))\n       (interleave %2)\n       (drop-last))", "user": "5c435a9fe4b0e06e1360a367"}, {"problem": 40, "code": "(fn foo [a lst] (if (empty? (rest lst)) (list (first lst)) (concat (list (first lst) a) (foo a (rest lst)) )))", "user": "5c59b1d3e4b01df32ab73261"}, {"problem": 40, "code": "(fn [x xs] (take (dec (* 2 (count xs))) (interleave xs (repeat x))))", "user": "502ea967e4b06efe12e8cc76"}, {"problem": 40, "code": "(fn interpose-a-seq [val coll]\n  (butlast (apply concat\n                 (for [x coll\n                       :let [y (list x val)]]\n                   y)\n                 )\n          )                                                 \n  )", "user": "5c51d700e4b0fb8c5ffd99d1"}, {"problem": 40, "code": "(fn [x xs] (\n  drop-last (flatten (\n    map list xs \n      (repeat x)\n    )\n  ))\n)", "user": "5c3de434e4b0d62ef62d9fb8"}, {"problem": 40, "code": "(fn [x col]\n  (let [times (count col)\n        repeating-x-col (repeat times x)]\n    (rest (interleave repeating-x-col col))))", "user": "5af4446de4b0cc2b61a3bc93"}, {"problem": 40, "code": "(fn [val coll] (butlast (reduce #(conj %1 %2 val) [] coll)))", "user": "5c3cd80fe4b0d62ef62d9faa"}, {"problem": 40, "code": "(fn f [sep lst]\n  (if (empty? (rest lst))\n    [(first lst)]\n    (concat [(first lst) sep] (f sep (rest lst)))))", "user": "5c62979fe4b0fca0c162264c"}, {"problem": 40, "code": "(fn\n  [sep items]\n  (->> items (interleave (repeat sep) ,,,) rest))", "user": "5c6227fee4b0fca0c1622641"}, {"problem": 40, "code": "(fn [i c]\n  (reduce #(conj % i %2) [(first c)]  (rest c)))", "user": "592883f1e4b072a2710fceea"}, {"problem": 40, "code": "#(rest(interleave(cycle [%]) %2))", "user": "5c61297ce4b0fca0c1622629"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %)))", "user": "5a8aa992e4b05369db4d24d8"}, {"problem": 40, "code": "(fn interposeseq\n  [in1 in2]\n  (let [c (count in2)]\n       (loop [i 0 result [] ]\n          (if (< i c)\n      (let [f1 (get in2 i) \n            rslt1 (conj result f1)\n            rslt (conj rslt1 in1)]\n           (recur (inc i) rslt)\n        )\n       (drop-last result)\n      ))))", "user": "5b98f174e4b0c0b3ffbd4ac1"}, {"problem": 40, "code": "(fn [el col]\n  ((fn iter [[head & tail] cur-col]\n     (let [cur-add (list head el)]\n       (if (empty? tail)\n         (concat cur-col [head])\n         (iter tail (concat cur-col cur-add)) ))) col []))", "user": "5c3f6322e4b08cd430848e97"}, {"problem": 40, "code": ";(print (\n (fn [in coll]\n    (if (= (class in) java.lang.String)\n      (apply str\n           (take (- (* (count coll) 2) 1)\n                 (interleave coll\n                      (repeat (count coll) in))))\n      (take (- (* (count coll) 2) 1)\n                 (interleave coll\n                      (repeat (count coll) in)))))\n;  \", \"\n;  '(\"one\" \"two\" \"three\")))", "user": "5c5d2e90e4b01df32ab732af"}, {"problem": 40, "code": "(fn [x ls]\n  (loop [result [] [hd & tl] ls]\n    (if (empty? tl)\n      (conj result hd)\n      (recur (conj result hd x) tl))))", "user": "5c58736be4b01df32ab73247"}, {"problem": 40, "code": "(fn [v xs] (cons (first xs) (mapcat (partial vector v) (rest xs))))", "user": "5c30d90de4b0d62ef62d9f22"}, {"problem": 40, "code": "(fn [y xs]\n  (butlast (mapcat vector xs (repeat y)))\n  )", "user": "5c6448d6e4b0fca0c1622674"}, {"problem": 40, "code": "#(rest (mapcat list (repeat %1) %2))", "user": "5c633df2e4b0fca0c162265c"}, {"problem": 40, "code": "(fn [x coll]\n  (drop 1 (interleave (repeat x) coll)))", "user": "58b12635e4b0ebc645576cf4"}, {"problem": 40, "code": "(fn[x coll]\n      (rest\n       (mapcat \n        #(conj (vector %1) %2)\n        (iterate identity x) coll\n       )\n      )\n)", "user": "5a6dbaf5e4b0512ff01cda63"}, {"problem": 40, "code": "(fn [a b] (reverse (rest (reduce #(conj % %2 a) () b))))", "user": "5c51c930e4b0fb8c5ffd99ce"}, {"problem": 40, "code": "#(take (- (* 2 (count %2)) 1) (flatten (for [x %2 y (vector %1)] [x y])))", "user": "5c52f3fce4b0fb8c5ffd99e9"}, {"problem": 40, "code": "(fn maptmp [sep l] \n  (butlast (mapcat #(list %1 sep) l)))", "user": "5c6748f0e4b0fca0c16226b6"}, {"problem": 40, "code": "#(next (interleave (repeat %1) %2))", "user": "5c41db45e4b08cd430848ece"}, {"problem": 40, "code": "(fn [x s] (butlast (mapcat list s (repeat (count s) x))))", "user": "4e617114535d8ccf87e9fe5b"}, {"problem": 40, "code": "#(loop [lst %2\n        ret []]\n   (if (empty? lst)\n     (butlast ret)\n     (recur (rest lst) (conj ret (first lst) %1))))", "user": "5c6da283e4b0fca0c162273e"}, {"problem": 40, "code": "(fn [v s] (rest (mapcat #(list v %) s)))", "user": "5549ca1ce4b0a04f7929956c"}, {"problem": 40, "code": "#(drop-last 1 (reduce (fn [seq item] (concat seq [item %1])) [] %2))", "user": "5c6d0e51e4b0fca0c1622735"}, {"problem": 40, "code": "(fn [sep col1] (letfn [(mkCol [x y acc]\n                           (if\n                             (or (empty? x) (empty? y))\n                             acc\n                             (mkCol\n                               (rest x)\n                               (rest y)\n                               (cons (first y) (cons (first x) acc))\n                               )\n                             )\n                           )\n                         ]\n                   (reverse (drop 1 (mkCol col1 (repeat sep) nil)))\n                   ))", "user": "5c635364e4b0fca0c162265f"}, {"problem": 40, "code": "(fn x [i c]\n  (loop [v (vector (first (reverse c))) c2 (rest (reverse c))]\n    (if (empty? c2)\n      (reverse v)\n      (recur (conj (conj v i)(first c2)) (rest c2))\n  )\n  )\n)", "user": "5c46e6dde4b0e06e1360a3a7"}, {"problem": 40, "code": "(fn [e coll]\n  (loop [s coll, r []]\n    (if (= (count s) 1)\n      (concat r s)\n      (recur (rest s) (conj r (first s) e)))))", "user": "5c6e1006e4b0fca0c1622744"}, {"problem": 40, "code": ";#(loop[c 1 r [(get  %2 0)]]\n;   (if (get %2 c)\n;     (recur (inc c)\n;      (conj(conj r %1) (get %2 c))\n;      )\n;     r\n;\t)\n;   )\n\n#(butlast(interleave %2 (repeat %1)))", "user": "5c683fb5e4b0fca0c16226d5"}, {"problem": 40, "code": "(fn [v c]\n  (drop-last\n   \t(mapcat\n      (fn [x] [x v])\n      c)))", "user": "5c73b8bae4b0fca0c16227ba"}, {"problem": 40, "code": "(fn [what where]\n    (loop\n        [f where\n         res []]\n      (if (empty? f) res\n          (if-not (empty? (rest f))\n            (recur (rest f) (conj res (first f) what))\n            (conj res (first f))))))", "user": "5b269cf3e4b063e2438bcc35"}, {"problem": 40, "code": "(fn [sep coll]\n  (loop [[r & more :as all] (seq coll)\n         acc '()]\n    (if all\n      (if (not (empty? more))\n        (recur more (conj acc r sep))\n        (reverse (conj acc r))))))", "user": "5c718e6ce4b0fca0c1622796"}, {"problem": 40, "code": "(fn [data collection]\n  (drop 1 (interleave (repeat data) collection)))", "user": "59cd351ee4b0ef0a1e9b5b35"}, {"problem": 40, "code": "(fn [del list] (rest (reduce #(into %1 [del %2]) [] list)))", "user": "5c6e8b57e4b0fca0c1622755"}, {"problem": 40, "code": "(fn\n  [ele lst]\n  (butlast (mapcat #(list % ele) lst)))", "user": "5c706232e4b0fca0c162277e"}, {"problem": 40, "code": "(fn [arb lst] (flatten (reduce (fn [a b] [a arb b]) lst)))", "user": "5c5e3af7e4b01df32ab732c6"}, {"problem": 40, "code": "(fn interpose_Seq\n  [s x]\n  (cons (first x) (mapcat #(list s %) (next x))))", "user": "5c787131e4b0fca0c1622825"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "user": "5c792c34e4b0fca0c1622834"}, {"problem": 40, "code": "(fn [separator input-seq] (drop-last (mapcat #(conj (cons separator ()) %) input-seq)))", "user": "5c723f4be4b0fca0c16227a0"}, {"problem": 40, "code": "(fn x [a b]\n  (loop [deli a arr b newarr []]\n    (if (= (count arr) 1)\n      (conj newarr (first arr))\n      (recur a (rest arr) (conj (conj newarr (first arr)) deli)))))", "user": "5c72c2b9e4b0fca0c16227ab"}, {"problem": 40, "code": "(fn [i seq] (reduce (fn [n curr] (concat n (vector i) (vector curr))) (vector (first seq)) (rest seq)))", "user": "5c76577ae4b0fca0c16227ea"}, {"problem": 40, "code": "(fn [d s] (take (dec (* 2 (count s))) (mapcat #(list %1 %2) s (repeat (count s) d))))", "user": "5b100648e4b0cc2b61a3be17"}, {"problem": 40, "code": "(fn my-interpose [sep coll]\n  (letfn [(my-inter [arg] (list arg sep))]\n    (butlast (apply concat (map my-inter coll)))\n         )\n)", "user": "5c75a30ee4b0fca0c16227df"}, {"problem": 40, "code": "(fn pose [v sequ]\n  (loop [s sequ i 1 res []]\n    (if (empty? s)\n      res\n      (if (odd? i)\n        (recur (rest s) (inc i) (conj res (first s)))\n        (recur s (inc i) (conj res v))))))", "user": "5c7d5a0ce4b0d597f478caab"}, {"problem": 40, "code": "(fn [sep sq]\n  ((fn ip [sep sq isq]\n     (if (empty? sq)\n       isq\n       (if (= 1 (count sq))\n         (conj isq (first sq))\n         (ip sep (rest sq) (conj isq (first sq) sep)))))\n   sep sq []))", "user": "5c7ef3f3e4b0d597f478cad7"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5c664b87e4b0fca0c16226a5"}, {"problem": 40, "code": "(fn [delimiter s] (drop-last (interleave s (repeat delimiter))))", "user": "5c7bc0a5e4b0fca0c1622865"}, {"problem": 40, "code": "#(cons (first %2) (mapcat list (repeat %1) (rest %2)))", "user": "5c26c9b3e4b07e362c2305c5"}, {"problem": 40, "code": "#(rest (mapcat list (repeat %1) %2))", "user": "5c8025d6e4b0c8042a70ce11"}, {"problem": 40, "code": "(fn [in coll] (vec (drop-last (mapcat (fn [x] (vector x in)) coll))))", "user": "5c8002cde4b0c8042a70ce09"}, {"problem": 40, "code": "#(loop [x %1 coll %2 result []]\n  (if (empty? (rest coll))\n    (conj result (first coll))\n    (recur x (rest coll) (conj result (first coll) x))))", "user": "5c813b27e4b0c8042a70ce22"}, {"problem": 40, "code": "(fn [separator l] (concat [(get l 0)] (flatten (map #(list separator %) (subvec l 1)))))", "user": "5c7c1d8ee4b0d597f478ca88"}, {"problem": 40, "code": "(fn interpose2\n  [x lst]\n  (loop [res (concat (list (first lst)) (list x))\n         lst (rest lst)]\n    (if (empty? lst)\n      (rest (reverse res))\n      (recur (concat (list (first lst)) (list x) res)\n             (rest lst)))))", "user": "5c7dad57e4b0d597f478caba"}, {"problem": 40, "code": "(fn [v l] (butlast (mapcat #(vector %1 v) l)))", "user": "5c7f7889e4b0d597f478cae0"}, {"problem": 40, "code": "(fn [x vec]\n  (loop [vec vec\n         res []]\n    (if (empty? vec)\n      (pop res)\n      (recur (subvec vec 1)\n             (conj res (nth vec 0) x)))))", "user": "5c748bf5e4b0fca0c16227cb"}, {"problem": 40, "code": "(fn [n col] (rest (mapcat #(vector n %) col)))", "user": "5be96111e4b0f319e2d7ec70"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "5bcf0b1be4b0e9689409ee24"}, {"problem": 40, "code": "(fn lstInterpose\n  [n lst]\n  (subvec (vec (interleave lst (vec (repeat (count lst) n)))) 0 (+ (- (count lst) 1) (- (count lst) 0)))\n  )", "user": "5c82db41e4b0c8042a70ce42"}, {"problem": 40, "code": "(fn [n coll] (butlast (mapcat #(vector % n) coll)))", "user": "5c75a830e4b0fca0c16227e0"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5c70641de4b0fca0c162277f"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5c7d947be4b0d597f478cab6"}, {"problem": 40, "code": "(fn myInterpose\n  [s\n   lst]\n  (loop [lst     lst\n         result  ()]\n    (if (empty? lst)\n      (butlast result)\n      (recur (rest lst)\n             (concat result (concat (list (first lst)) (list s)))))))", "user": "5c74b043e4b0fca0c16227ce"}, {"problem": 40, "code": "(fn my-interpose\n  [x xs]\n  (rest (mapcat #(vector %1 %2) (repeat x) xs)))", "user": "5c73bcf9e4b0fca0c16227bb"}, {"problem": 40, "code": "(fn unt [n lst]\n  (reverse (rest (reverse (interleave lst (repeat n))))))", "user": "5c7d5463e4b0d597f478caa9"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5c7c8c72e4b0d597f478ca96"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5c706454e4b0fca0c1622780"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5c746c31e4b0fca0c16227c8"}, {"problem": 40, "code": "(fn myinterpose [a b]\n   (drop-last (reduce (fn [acc v]\n                        (conj acc v a)) [] b))\n   )", "user": "4f2a7174e4b0d6649770a03e"}, {"problem": 40, "code": "(fn [x coll]\n  (rest (mapcat #(vector x %) coll)))", "user": "57e2e1bde4b0bfb2137f5a8f"}, {"problem": 40, "code": "(fn [sep coll] (butlast (mapcat (fn [item](vector item sep)) coll)))", "user": "5c852e3ae4b0c8042a70ce78"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5c8ecb58e4b048ec896c59b0"}, {"problem": 40, "code": "#(butlast (mapcat vector %2 (repeat (count %2) %1)))", "user": "5c8fd8f3e4b048ec896c59c7"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5c7bb8c0e4b0fca0c1622864"}, {"problem": 40, "code": "#(drop-last (mapcat vector %2 (map (constantly %1) %2)))", "user": "5c91ae79e4b048ec896c59eb"}, {"problem": 40, "code": "(fn[c coll]\n  (reverse (drop 1 (reverse (interleave coll (repeat (count coll) c))))))", "user": "566a0845e4b04acd4f672e05"}, {"problem": 40, "code": "(fn [n seq]\n  (rest (mapcat #(vector n %1) seq) ))", "user": "5c891afde4b048ec896c5935"}, {"problem": 40, "code": ";; problem/40\n(fn interpose-seq\n  [sep coll]\n  (rest (mapcat (partial cons sep) (partition 1 coll))))", "user": "5c92105ce4b048ec896c59f7"}, {"problem": 40, "code": "(fn [d sq]\n          (reduce (fn [result s]\n                    (if (empty? result)\n                      (conj result s)\n                      (conj result d s))) [] sq))", "user": "5c995fa4e4b048ec896c5a96"}, {"problem": 40, "code": "(fn [x coll1] (drop-last (mapcat vector coll1 (repeat x))))", "user": "5c987160e4b048ec896c5a82"}, {"problem": 40, "code": "(fn [x xs]\n  (butlast (interleave xs (repeat x)))\n  )", "user": "5c896f46e4b048ec896c5940"}, {"problem": 40, "code": "(fn [x ys]\n    (rest (interleave (repeat x) ys)))", "user": "5bd0ea60e4b0e9689409ee45"}, {"problem": 40, "code": "(fn [c coll]\n  (drop 1 (interleave (repeat c) coll)))", "user": "5b6002c2e4b0c6492753e6fb"}, {"problem": 40, "code": "(fn [x s] \n  (rest (mapcat #(vector x %1) s) ))", "user": "5c92161de4b048ec896c59f9"}, {"problem": 40, "code": "#(butlast(interleave %2 (repeat (count %2) %1)))", "user": "5c9d0a0be4b048ec896c5afc"}, {"problem": 40, "code": "(fn [x y]\n (rest\n  (flatten\n   (for\n    [x' (vector x)\n     y' y]\n    [x' y']))))", "user": "510608ebe4b01150e115ebe3"}, {"problem": 40, "code": "(fn [e coll]\n  (rest (flatten (map #(vector e %) coll))))", "user": "5ca14eb1e4b048ec896c5b7d"}, {"problem": 40, "code": "(fn [sep arr] (rest (interleave (take (count arr) (repeat sep)) arr)))", "user": "5ca1f8a1e4b048ec896c5b8c"}, {"problem": 40, "code": "#(rest (interleave (repeat (count %2) %1) %2))", "user": "55a24698e4b0acc240e31523"}, {"problem": 40, "code": ";;#(butlast (interleave %2 (repeat (count %2) %)))\n#(butlast (interleave %2 (repeat  %)))", "user": "5c950334e4b048ec896c5a44"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5c9dcb36e4b048ec896c5b1d"}, {"problem": 40, "code": "#(butlast(mapcat list %2 (repeat (count %2) %1)))", "user": "52c8a814e4b0c2d177d62138"}, {"problem": 40, "code": "(fn [d x] (drop-last (mapcat (fn [x_] (list x_ d)) x)))", "user": "5cae53fbe4b026601754b885"}, {"problem": 40, "code": "(fn interpeso [x y]\n  (cond (empty? y)      ()\n        (= 1 (count y)) (list (first y))\n        :else           (concat (list (first y) x)\n                                (interpeso x (rest y)))))", "user": "5c538cb5e4b0fb8c5ffd99fb"}, {"problem": 40, "code": "(fn myfunc [item coll] (rest (reduce #(into %1 [item %2]) [] coll)))", "user": "5ca1c45ae4b048ec896c5b85"}, {"problem": 40, "code": "(fn [v s] (reduce (fn [a b] (concat a (list v b))) (list (first s)) (rest s)))", "user": "5cab33e7e4b048ec896c5c48"}, {"problem": 40, "code": "(fn q40 [val l]\n  (->> l\n       (mapcat #(list % val))\n       (drop-last)))", "user": "5cab0ad9e4b048ec896c5c46"}, {"problem": 40, "code": "(fn [sep [h & tail]] \n  (reduce #(concat %1 [sep %2]) [h] tail))", "user": "5caf9cace4b026601754b89b"}, {"problem": 40, "code": "(fn [x y] (->> (map vector y (repeat (count y) x)) flatten butlast) )", "user": "58b84c28e4b0ebc645576d94"}, {"problem": 40, "code": "(fn [val coll] (rest (interleave (repeat val) coll)))", "user": "5bc7f2d6e4b07a9b28b100b7"}, {"problem": 40, "code": "(fn [x s] \n  (rest (mapcat #(vector x %1) s) ))", "user": "5cb71f35e4b026601754b961"}, {"problem": 40, "code": "(fn [e1 lst] (drop-last (interleave lst (repeat (count lst) e1))))", "user": "5cb556f9e4b026601754b934"}, {"problem": 40, "code": "(fn [sep L] (butlast (mapcat #(list % sep) L)))", "user": "5b507222e4b02d533a91bce7"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2 ))", "user": "5ca7b5bbe4b048ec896c5c04"}, {"problem": 40, "code": "(fn [arg1 arg2]\n      (loop [index 1 retVector []]\n            (if (>= index (count  arg2) )\n              (conj retVector (nth arg2 (- index 1)))\n              (recur (inc index) (conj (conj retVector (nth arg2 (- index 1))  ) arg1)))))", "user": "5cb6256ce4b026601754b947"}, {"problem": 40, "code": "(fn interpose- [sep coll]\n    (flatten (cons (first coll) (for [c (rest coll)] [sep c]))))", "user": "5766bab8e4b0a07e8fc180b1"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5cbeadf2e4b0ccb061962755"}, {"problem": 40, "code": "(fn [v l] (drop-last (reduce #(conj %1 %2 v) [] l)))", "user": "5cbdc591e4b026601754ba00"}, {"problem": 40, "code": "(fn my-interpose [el coll]\n\t(drop-last (apply concat (for [x coll]\n\t\t\t\t\t\t\t[x el]))))", "user": "593c1e3be4b069cdc2982b86"}, {"problem": 40, "code": "(fn [x coll] (butlast (interleave coll (repeat (count coll) x))))", "user": "5cb4e764e4b026601754b929"}, {"problem": 40, "code": "(fn [d s] (conj (reduce #(conj %1 %2 d) [] (butlast s)) (last s)))", "user": "598ff38ce4b0fcebec4de869"}, {"problem": 40, "code": "(fn [sep coll]\n  (butlast\n   (mapcat\n    (fn [it]\n      (list it sep))\n    coll)))", "user": "5cb62652e4b026601754b949"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5cbc9dace4b026601754b9eb"}, {"problem": 40, "code": "(fn ip [x col]\n  (rest (mapcat #(list x %) col))\n  )", "user": "56d5c1b0e4b0ea9b8538f7c3"}, {"problem": 40, "code": "(fn ipose [k coll] (take (dec (* (count coll) 2)) (interleave coll (repeat (count coll) k))))", "user": "5cb11a72e4b026601754b8c6"}, {"problem": 40, "code": "(fn[sep s]\n    (flatten (reduce (fn[a b] (list a sep b)) s)))", "user": "5cc6f982e4b0ccb06196282d"}, {"problem": 40, "code": "(fn [s v] (concat [(first v)] (mapcat #(vector s %) (rest v)) ))", "user": "5cbd5b42e4b026601754b9f6"}, {"problem": 40, "code": "(fn interposer [e x] (drop-last (mapcat vector x (repeat e))))", "user": "5c547cf0e4b0fb8c5ffd9a0b"}, {"problem": 40, "code": "#(rest (interleave (repeat (count %2) %) %2))", "user": "5cc80598e4b0ccb061962840"}, {"problem": 40, "code": "#(rest (mapcat list (repeat %1) %2))", "user": "5cb0f70ce4b026601754b8c1"}, {"problem": 40, "code": "(fn [sep xs]\n  (loop [[h & t :as remaining] xs\n         acc []]\n    (if (empty? remaining)\n      (drop-last 1 acc)\n      (recur t (into acc [h sep])))))", "user": "5cc75ffce4b0ccb061962836"}, {"problem": 40, "code": "(fn [sep col] (take (- (* (count col) 2) 1) (mapcat #(list % sep) col)))", "user": "4fbe2cfbe4b081705acca30c"}, {"problem": 40, "code": "(fn [a b] (rest (flatten (map (fn [x] [a x]) b))))", "user": "5ccb3792e4b0ccb061962882"}, {"problem": 40, "code": "(fn [a b]\n(butlast (mapcat #(vector % a) b)))", "user": "5c73a944e4b0fca0c16227b8"}, {"problem": 40, "code": "#(vec(take (- (* (count %2) 2) 1) (interleave %2 (repeat (count %2) %1))))", "user": "5cd07885e4b0ccb0619628d4"}, {"problem": 40, "code": "#(rest (mapcat list (repeat %1) %2))", "user": "5ccf3879e4b0ccb0619628c4"}, {"problem": 40, "code": "(fn [el sequence]\n  (conj \n    (reduce (fn [res x] (conj (conj res x) el)) [] (butlast sequence))\n    (last sequence)))", "user": "5ccb0bbee4b0ccb06196287c"}, {"problem": 40, "code": "(fn [a xs] (rest (reduce #(conj %1 a %2) [] xs)))", "user": "5cc6b4bfe4b0ccb061962827"}, {"problem": 40, "code": "(fn [elt lst] (loop [l0 '() l1 lst]  (println l0 l1) (cond(empty? l1) l0 \n(= l1 lst) (recur (list (first l1)) (rest l1)) :else (recur (concat l0 (list elt) (list (first l1))) (rest l1)))))", "user": "5cd127bce4b0ccb0619628e1"}, {"problem": 40, "code": "(fn my-interpose [val seq]\n\t(butlast (reduce (fn [res el] (conj res el val)) [] seq)))", "user": "5c87c79be4b048ec896c591b"}, {"problem": 40, "code": "(fn [n coll] (rest (mapcat #(list n %) coll)))", "user": "5a9bfd57e4b0d174b936c7d0"}, {"problem": 40, "code": "#(rest (interleave (repeat (count %2) %1) %2))", "user": "5cc1f975e4b0ccb0619627c8"}, {"problem": 40, "code": "(fn [s xs] (->> xs\n                (reduce (fn [acc x] (conj acc x s)) [])\n                pop))", "user": "5cd1f5dae4b0ccb0619628f7"}, {"problem": 40, "code": "#(butlast (flatten (for [i [%1] e %2] [e i])))", "user": "5cc4b34de4b0ccb061962805"}, {"problem": 40, "code": "#(drop-last (mapcat list %2 (repeat %1)))", "user": "5cce7de4e4b0ccb0619628b7"}, {"problem": 40, "code": "(fn [sp sq]\n  (rest (reduce #(conj %1 sp %2) [] sq)))", "user": "5cbb0436e4b026601754b9cc"}, {"problem": 40, "code": "(fn interposing [teste sequence] (drop-last (mapcat #(vector % teste) sequence)))", "user": "5a99d28ee4b0d174b936c7b3"}, {"problem": 40, "code": "(fn [pattern s]\n   (loop [r (vector) s s]\n     (if (empty? (rest s))\n       (conj r (first s))\n       (recur (conj (conj r (first s)) pattern) (rest s))))\n   )", "user": "5ccc2a03e4b0ccb06196288f"}, {"problem": 40, "code": "(fn [karakter lista]\n  (loop [konacna []\n         glavna lista]\n    (if (empty? glavna) konacna\n      (if (empty? (rest glavna)) (recur (conj konacna (first glavna)) (rest glavna))\n                  (recur (conj konacna (first glavna) karakter) (rest glavna))))))", "user": "5be0b916e4b0ed4b8aab4c8f"}, {"problem": 40, "code": "(fn [sep s] (drop 1 (interleave (repeat sep) s)))", "user": "5cd9dc85e4b05ee0cb31170d"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5cd99bebe4b05ee0cb311707"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "5ca2ca9fe4b048ec896c5b9c"}, {"problem": 40, "code": "(fn [arg1 arg2]\n  (loop [a arg1\n         b arg2\n         r (vector)]\n    (if (empty? b)\n      (rest r)\n      (recur a (rest b) (conj (conj r  a) (first b))))))", "user": "5ac9c737e4b0e27600da77d2"}, {"problem": 40, "code": "#(drop-last (reduce (fn [new-coll value]\n                       (conj new-coll value %1)) [] %2))", "user": "5cd639b4e4b0ccb061962940"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "5ccf21c4e4b0ccb0619628c1"}, {"problem": 40, "code": "(fn i [a xs]\n   (when (seq xs) \n     (cons (first xs)\n           (when (seq (rest xs))\n             (cons a (i a (rest xs)))))))", "user": "5cdfe2aee4b0a17bb84e2b04"}, {"problem": 40, "code": "(fn [v coll]\n  (drop-last (apply concat (map vector coll (repeat v)))))", "user": "5ce077e9e4b0a17bb84e2b0c"}, {"problem": 40, "code": ";(fn [x coll]\n;(rest (reduce #(conj (conj %1 x) %2) [] coll))\n;  )\n#(rest (mapcat list (repeat %1) %2 ))", "user": "5cd4c3dae4b0ccb061962925"}, {"problem": 40, "code": "(fn [n c](butlast(mapcat #(vector % n)c)))", "user": "5cd4e1b2e4b0ccb061962927"}, {"problem": 40, "code": "(fn [v col] \n  (rest \n   (interleave \n    (repeat (count col) v) \n    col)))", "user": "5ce2bf8ee4b0a17bb84e2b2e"}, {"problem": 40, "code": "(fn [x xs] (butlast (reduce #(conj %1 %2 x) [] xs)))", "user": "5ce05561e4b0a17bb84e2b08"}, {"problem": 40, "code": "(fn [a vs]\n  (reduce #(concat %1 [a %2]) [(first vs)] (rest vs)) \n)", "user": "5ce41d1be4b0a17bb84e2b50"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "user": "5cdd934ce4b05ee0cb311761"}, {"problem": 40, "code": "(fn [n xs] (-> xs (interleave (repeat n)) (drop-last) (vec)))", "user": "5cdc08a2e4b05ee0cb31173a"}, {"problem": 40, "code": "(fn [del ins] (cons (first ins)  (mapcat (fn [a] (list del a)) (rest ins) ))\n    )", "user": "5c94cbb1e4b048ec896c5a3d"}, {"problem": 40, "code": "(fn [x y] (drop-last (mapcat (fn [itm] [itm x]) y)))", "user": "5ce2b15fe4b0a17bb84e2b2c"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5c967845e4b048ec896c5a60"}, {"problem": 40, "code": "#(drop 1 (reduce (fn [acc x] (conj (conj acc %1) x)) [] %2))", "user": "5ce78776e4b0a17bb84e2ba2"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5ce56455e4b0a17bb84e2b71"}, {"problem": 40, "code": "(fn my-interpose [sep src]\n   ((fn my-interpose-internal [src trgt]\n      (if (= 1 (count src))\n        (conj trgt sep (first src))\n        (my-interpose-internal (rest src) (conj trgt sep (first src)))\n        )\n      ) (rest src) (conj [] (first src)))\n   )", "user": "5cd67eb2e4b0ccb061962943"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "5ce3e239e4b0a17bb84e2b46"}, {"problem": 40, "code": "(fn [x coll] (drop-last (interleave coll (repeat x))))", "user": "5ce52271e4b0a17bb84e2b69"}, {"problem": 40, "code": "(fn[s xs](drop-last(reduce(fn[r x](conj(conj r x)s))[] xs)))", "user": "5ce62d8ee4b0a17bb84e2b83"}, {"problem": 40, "code": "(fn [thing a-seq]\n   (loop [thing thing\n          a-seq a-seq\n          res '()]\n     (if (empty? a-seq)\n       (drop-last (reverse res))\n       (recur thing (rest a-seq) (conj res (first a-seq) thing)))))", "user": "5ce36e02e4b0a17bb84e2b3e"}, {"problem": 40, "code": "(fn [a b] (drop 1 (reduce concat (map #(conj %1 a) (partition 1 b)))))", "user": "5ce44ee2e4b0a17bb84e2b57"}, {"problem": 40, "code": "(fn my-interpose\n  ([x lst] (my-interpose x lst [] false))\n  ([x lst acc now?] \n   (if (seq lst)\n     (if now?\n     \t(recur x lst (conj acc x) false)\n     \t(recur x (rest lst) (conj acc (first lst)) true))\n     acc)))", "user": "5ce6f93be4b0a17bb84e2b99"}, {"problem": 40, "code": "(fn [av s]\n  (drop-last (reduce #(conj %1 %2 av) [] s)))", "user": "53ef235de4b0d648e757f4d4"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5baaae06e4b0a20761a23464"}, {"problem": 40, "code": "(fn [n s]\n          (rest\n            (flatten\n              (map (fn [p] [n p]) s)\n              )))", "user": "592bb806e4b072a2710fcf46"}, {"problem": 40, "code": "(fn [sep items] (drop-last (flatten (map #(list %1 sep) items))))", "user": "5cead199e4b0a17bb84e2bd4"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5cee4bc9e4b0aaa82f1129dc"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5cf115eee4b0aaa82f112a08"}, {"problem": 40, "code": "(fn [x coll] (butlast (mapcat #(vector % x) coll)))", "user": "5cf1d9e3e4b0aaa82f112a18"}, {"problem": 40, "code": "(fn my-interpose\n  ([a b] (my-interpose a b []))\n  ([delimiter original-list return-list]\n    (cond\n     (> (count original-list) 1)\n      (my-interpose delimiter (rest original-list) (conj return-list (first original-list) delimiter))\n     (= (count original-list) 1) (conj return-list (first original-list))\n     :else return-list\n    )\n  )\n)", "user": "5c3440fee4b0d62ef62d9f50"}, {"problem": 40, "code": "(fn [x coll] ( into [] (rest (mapcat vector (repeat (count coll) x   ) coll  ))))", "user": "511b81c3e4b07ab9ec456183"}, {"problem": 40, "code": "(fn [separator coll]\n    (loop [remainder (rest coll) out '()]\n      (if (empty? remainder)\n        (conj  (reverse out) (first coll))\n        (recur (rest remainder) (conj (conj out separator) (first remainder)))\n          )))", "user": "5bf9d9b7e4b0bdcf453d15c4"}, {"problem": 40, "code": "#(-> %1 repeat (interleave %2) rest)", "user": "5cebafbbe4b0a17bb84e2be6"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "5cf9623de4b0b71b1d808a95"}, {"problem": 40, "code": "#_#(butlast(interleave %2 (repeat %)))\n#(drop-last (mapcat vector %2 (repeat %1)))", "user": "5cd16529e4b0ccb0619628e7"}, {"problem": 40, "code": "#(drop-last (mapcat vector %2 (repeat %1)))", "user": "5c665311e4b0fca0c16226a7"}, {"problem": 40, "code": "(fn [s coll] (drop-last (mapcat #(conj [] % s) coll)))", "user": "5cf5775ce4b087f62be35a98"}, {"problem": 40, "code": "(fn [value collection]\n  (next (interleave (repeat value) collection)))", "user": "4ee897fe535d93acb0a66883"}, {"problem": 40, "code": "(fn [value collection]\n  (butlast \n    (interleave collection\n                 (repeat value))))", "user": "5c0eb93ce4b01240ff567146"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %) %2))", "user": "5b9ae606e4b0c0b3ffbd4af2"}, {"problem": 40, "code": "(fn [n l] (conj (reduce #(conj (conj %1 %2) n) [] (drop-last l)) (last l)))", "user": "5cece5a2e4b0a17bb84e2bfb"}, {"problem": 40, "code": "(fn [e xs] (drop 1 (flatten (for [x xs] [e x]))))", "user": "5cf4094be4b0aaa82f112a35"}, {"problem": 40, "code": "(fn [v s] (butlast (mapcat #(list % v) s)))", "user": "5cfd5a93e4b0cc9c91588168"}, {"problem": 40, "code": "#( \n  (fn zip [x y a]\n   (if (= (count y) 1)\n    (conj a (first y))\n    (zip x (rest y) (conj a (first y) x))))\n  %1\n  %2\n  [])", "user": "5600bed5e4b04bb52996e170"}, {"problem": 40, "code": "(fn [e col]\n  (butlast (interleave col (repeat e))))", "user": "5cf935f4e4b0b71b1d808a8f"}, {"problem": 40, "code": "#(butlast (mapcat (fn aux [val] (list val %1)) %2))", "user": "5bcf95ace4b0e9689409ee2e"}, {"problem": 40, "code": "(fn [x y]\n  (rest(mapcat #(vector x %1)y)))", "user": "5cffbc2ce4b0cc9c91588193"}, {"problem": 40, "code": "(fn [divider coll]\n  (loop [c coll output []]\n    (if (seq c)\n      (if (= (count output) 0)\n        (recur (rest c) (conj output (first c)))\n        (recur (rest c) (conj output divider (first c))))\n      output)))", "user": "5cf62ecce4b087f62be35aa7"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5d01fb3ce4b0cc9c915881b5"}, {"problem": 40, "code": "#(into [] (flatten \n           (vector (first %2) (map \n                               (fn [x] (vector %1 x)) \n                               (rest %2)))))", "user": "5cf62f9be4b087f62be35aa8"}, {"problem": 40, "code": "#(next (interleave (repeat %1) %2))", "user": "5cee521ce4b0aaa82f1129dd"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5cfeacb7e4b0cc9c9158817d"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5ceedd7ae4b0aaa82f1129e4"}, {"problem": 40, "code": "(fn [d s] (rest (reduce #(conj %1 d %2) [] s)))", "user": "5d05fdece4b0cc9c915881e8"}, {"problem": 40, "code": "(fn [separator coll]\n  (loop [i 0 result []]\n    (if (= i (dec (count coll)))\n      (seq (conj result (get coll i)))\n      (recur (inc i) (conj result (get coll i) separator)))))", "user": "5d03944de4b0cc9c915881c5"}, {"problem": 40, "code": "(fn foo [x xs]\n  (if (nil? (second xs))\n    xs\n    (list* (first xs) x (lazy-seq (foo x (rest xs))))))", "user": "5c34f7efe4b0d62ef62d9f5b"}, {"problem": 40, "code": "#(loop [x %1, coll %2, res '()]\n                    (if (empty? coll)\n                      (reverse (rest res))\n                      (recur x (rest coll) (conj res (first coll) x))\n                      )\n                    )", "user": "5cf72682e4b0b71b1d808a68"}, {"problem": 40, "code": "(fn interposer [separator seq]\n  (loop [seq seq result []]\n    (if (empty? seq)\n      result\n      (if (> (count seq) 1)\n        (recur (rest seq) (concat result [(first seq) separator]))\n        (recur (rest seq) (concat result [(first seq)]))\n        ))))", "user": "5d0859fbe4b0cc9c91588208"}, {"problem": 40, "code": "(fn func [s coll] (rest (reduce #(into %1 [s %2]) [] coll)))", "user": "5d03977ee4b0cc9c915881c7"}, {"problem": 40, "code": "#(loop [inter [] col %2]\n   (if (> (count col) 1)\n     (recur (conj (conj inter (first col)) %1) (rest col))\n     (seq (conj inter (first col)))))", "user": "5d0815b3e4b0cc9c91588201"}, {"problem": 40, "code": "(fn interpose' ([v col] (interpose' v col []))\n  ([v col itp]\n   (if (= 1 (count col))\n     (conj itp (first col))\n     (interpose' v (rest col) (conj itp (first col) v)))))", "user": "5d06499ae4b0cc9c915881ec"}, {"problem": 40, "code": "(fn my-interpose [inter lst]\n  (loop \n    [todo lst ret []]\n    (if (empty? todo) \n      (vec (take (dec (count ret)) ret))\n      (recur\n        (rest todo)\n        (conj (conj ret (first todo)) inter)\n      )\n    )\n  )\n)", "user": "5d0aab50e4b0cc9c91588220"}, {"problem": 40, "code": "(fn [x n] (butlast (mapcat #(vector % x) n)))", "user": "5cf68090e4b0b71b1d808a59"}, {"problem": 40, "code": "(fn interpose' [separator s]\n  (->>\n    s\n    (reduce\n      (fn [acc curr]\n        (conj acc curr separator))\n      [])\n    butlast))", "user": "5d0eed51e4b0cc9c91588262"}, {"problem": 40, "code": "#(drop-last (flatten (map (fn [x] [x %1]) %2)))", "user": "5cfee28de4b0cc9c91588185"}, {"problem": 40, "code": "(fn [v s] (butlast (flatten (map #(list % v) s))))", "user": "5d0e311de4b0cc9c91588251"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5d02fe44e4b0cc9c915881c0"}, {"problem": 40, "code": "(fn [sugar coll]\n  (loop [acc '() rem coll]\n    (if (nil? (seq (rest rem)))\n      (concat acc rem)\n      (recur (concat acc [(first rem) sugar]) (rest rem)))))", "user": "5d126728e4b02c15ef02199a"}, {"problem": 40, "code": "(fn [separator seq] \n  (drop-last (flatten (map #(list % separator) seq))))", "user": "5ba54642e4b0a20761a233f8"}, {"problem": 40, "code": "(fn [value collection]\n  (butlast\n    (interleave collection (repeat value))))\n\n;;; what stops repeat because repeat return infinite sequence is it interleave? ;;;;\n;#(conj (vec (mapcat vector (butlast %2) (repeat %))) (last %2))", "user": "5ce5b43be4b0a17bb84e2b7a"}, {"problem": 40, "code": "(fn interpose' [x xs] \n  (if (< (count xs) 2) \n    xs\n    (let [[y & ys] xs] (conj (mapcat #(list x %) ys) y))))", "user": "5a08f951e4b01bb0ae8afdfd"}, {"problem": 40, "code": "(fn [x y] (butlast(vec(mapcat #(list % x) y) )))", "user": "5d148581e4b0902706380dc6"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %1)))", "user": "5d10c1a8e4b04b4faecf4449"}, {"problem": 40, "code": "(fn [val ls] (take (dec (* 2 (count ls) )) (interleave ls (repeat (count ls) val))))", "user": "5d1bbef0e4b02ea6f0fb6984"}, {"problem": 40, "code": "(fn\n  [e s]\n  (butlast (reduce (fn [r i]\n                     (conj r i e))\n                   []\n                   s)))", "user": "570c8ac3e4b0b0fb43fd06ca"}, {"problem": 40, "code": "(fn [v c]\n  (next (interleave (repeat v) c)))", "user": "5d2091c4e4b02ea6f0fb69d8"}, {"problem": 40, "code": "(fn [x col]\n    (drop-last (interleave col (repeat x))))", "user": "5ccf99fbe4b0ccb0619628c8"}, {"problem": 40, "code": "#(rest (interleave (repeat (count %2) %1) %2))", "user": "5d2201b8e4b02ea6f0fb69ed"}, {"problem": 40, "code": "(fn [sep coll]\n  (let [n (* (count coll) 2)\n        ncoll (interleave coll (repeat sep))]\n    (take (dec n) ncoll)\n    )\n  )", "user": "5c59b836e4b01df32ab73263"}, {"problem": 40, "code": "(fn [v s] (butlast (interleave s (repeat v))))", "user": "5d236215e4b02ea6f0fb6a09"}, {"problem": 40, "code": "(fn [n sq] (drop-last (reduce (fn [coll x] (conj coll x n)) [] sq)))", "user": "5d046f7ce4b0cc9c915881d5"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "5952d75ce4b066ee0a44aed4"}, {"problem": 40, "code": "(fn tmp [x y]\n  (let [v1 (repeat (count y) x)\n        r  (flatten (map list y v1))]\n    (butlast r)))", "user": "5c78a3eae4b0fca0c1622829"}, {"problem": 40, "code": "(fn\n  [val coll]\n  (rest (mapcat #(vector val %) coll)))", "user": "5d1c14cde4b02ea6f0fb698a"}, {"problem": 40, "code": "(fn interpo [x coll]\n  (rest (interleave (repeat x) coll)))", "user": "5d24e49be4b02ea6f0fb6a2a"}, {"problem": 40, "code": "(fn interpo [x coll]\n (rest (interleave (repeat x) coll)))", "user": "5d1cf523e4b02ea6f0fb6994"}, {"problem": 40, "code": "(fn [x ls]\n  (loop [ls ls\n         res []]\n    (if (= (count ls) 1)\n      (conj res (first ls))\n      (recur\n       (rest ls)\n       (conj res (first ls) x)))))", "user": "5d125d63e4b02c15ef021999"}, {"problem": 40, "code": "(fn interpo [x coll]\n (rest (interleave (repeat x) coll)))", "user": "5cfabf53e4b0cc9c91588148"}, {"problem": 40, "code": ";;#(take (dec (* (count %2) 2)) (interleave %2 (repeat %1)))\n#(rest (interleave (repeat %1) %2))", "user": "5d1be50ce4b02ea6f0fb6986"}, {"problem": 40, "code": "(fn [separator coll] (butlast (mapcat #(vector % separator) coll)))", "user": "5d0beecee4b0cc9c91588239"}, {"problem": 40, "code": "(fn interposo [i col]\n  (loop [acc []\n         cur col]\n    (if (empty? (rest cur))\n      (conj acc (first cur))\n      (recur (conj acc (first cur) i) (rest cur)))))", "user": "5d231255e4b02ea6f0fb69fe"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5d272077e4b092dab7f59c64"}, {"problem": 40, "code": "(fn [sep s] (rest (mapcat #(list sep %) s)))", "user": "5d138119e4b0902706380dbb"}, {"problem": 40, "code": "#(butlast(interleave %2 (repeat %1)))", "user": "5d267c11e4b02ea6f0fb6a41"}, {"problem": 40, "code": "(fn f [i vec2]\n  (pop (vec (mapcat list vec2 (repeat i)) ) )\n)", "user": "5bc2df19e4b07a9b28b10038"}, {"problem": 40, "code": "(fn [x s] \n(rest (mapcat #(vector x %1) s) ))", "user": "5d29d837e4b01671435dbc6c"}, {"problem": 40, "code": "#(loop [c1 %1 c2 %2 rt []]\n   (if(empty? c2)\n     rt\n     (recur c1 (rest c2) (if(empty? (rest c2)) (conj rt (first c2)) (conj rt (first c2) c1) ))\n     )\n   )", "user": "5d270111e4b092dab7f59c62"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5d2bfb68e4b01671435dbc86"}, {"problem": 40, "code": "(fn [intersperser elems]\n  (butlast (reduce (fn [acc x] (into acc [x intersperser])) [] elems)))", "user": "5d28b684e4b092dab7f59c83"}, {"problem": 40, "code": "(fn [x array] (rest (mapcat #(list x %) array)))", "user": "5d28222ee4b092dab7f59c7a"}, {"problem": 40, "code": ";(fn [number sequence]\n;\t(drop-last(flatten (map #(list % number) sequence))))\n\n(fn [number sequence]\n\t(->> sequence\n\t\t\t (map #(list % number))\n\t\t\t (flatten)\n\t\t\t (drop-last)))", "user": "5d25abc9e4b02ea6f0fb6a37"}, {"problem": 40, "code": "(fn my-interpose [a s]\n  (concat (apply concat (map (fn [x] (list x a)) (drop-last s))) (list (last s))))", "user": "5d247902e4b02ea6f0fb6a24"}, {"problem": 40, "code": "(fn [v sqn]\n  (rest (mapcat #(list v %) sqn))\n  )", "user": "5cf895efe4b0b71b1d808a85"}, {"problem": 40, "code": "(fn [a b] (rest (interleave (repeat a) b)))", "user": "5d2ca236e4b01671435dbc94"}, {"problem": 40, "code": "#(pop (vec (interleave %2 (take (count %2) (repeat %1)))))", "user": "5aa1e0f1e4b0d174b936c84e"}, {"problem": 40, "code": "( fn [x y]\n    (drop-last(mapcat #(vector % x) y))\n    )", "user": "5d301c95e4b01671435dbcca"}, {"problem": 40, "code": "(fn [x xs] (butlast (flatten (for [y xs]\n                               [y x]))))", "user": "596fb563e4b01722bebd4c55"}, {"problem": 40, "code": "(fn [sep xs] (butlast (mapcat (fn [x] [x sep]) xs)))", "user": "5d0e9931e4b0cc9c91588258"}, {"problem": 40, "code": "(fn [sep x]\n  (let [a (count x)]\n    (loop [i 0\n           d '()]\n      (if (= i a)\n        (reverse (rest d))\n        (recur (+ i 1) (conj d (nth x i) sep))))))", "user": "5d371b6fe4b01671435dbd31"}, {"problem": 40, "code": "(fn [inter_elem coll]\n   (loop [rcoll [] lcoll coll]\n     (if (empty? (rest lcoll))\n       (conj rcoll (first lcoll))\n       (recur (conj rcoll (first lcoll) inter_elem) (rest lcoll)))))", "user": "5d363543e4b01671435dbd20"}, {"problem": 40, "code": "#(drop-last (mapcat list %2 (repeat %1)))", "user": "5d1b2a1ee4b02ea6f0fb6979"}, {"problem": 40, "code": "#(->\n (repeat %1)\n (interleave %2)\n (rest))", "user": "5d2e5065e4b01671435dbcae"}, {"problem": 40, "code": "(fn [n coll] (butlast (mapcat #(vector % n) coll)))", "user": "5d370811e4b01671435dbd2d"}, {"problem": 40, "code": "(fn [v coll]\n  (drop-last (interleave coll (repeat v))))", "user": "5d27da09e4b092dab7f59c75"}, {"problem": 40, "code": "(fn [n xs]\n  (butlast (interleave xs (repeat (count xs) n))))", "user": "54b42ea4e4b05787c3b1638b"}, {"problem": 40, "code": "(fn [v xs]\n  (-> (map (fn [x y] [x y]) xs (repeat v))\n      flatten\n      drop-last))", "user": "5d3aefbde4b01671435dbd5e"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %) %2))", "user": "5d29c06be4b01671435dbc6b"}, {"problem": 40, "code": "(fn this [x ys]\n    (if (= (count ys) 1) ys\n        (concat [(first ys) x] (this x (rest ys)))))", "user": "5716d585e4b07c98581c3b03"}, {"problem": 40, "code": "(fn [n ll]\n  (rest (reduce #(into %1 (list n %2)) [] ll)))", "user": "5d3ae729e4b01671435dbd5d"}, {"problem": 40, "code": "#(rest (interleave (repeat (count %2) %1) %2))", "user": "598601f9e4b021a7a535fe79"}, {"problem": 40, "code": "(fn[sep sequ] (->> (reduce #(conj %1 sep %2) [] sequ) (drop 1)) )", "user": "5cf53196e4b087f62be35a94"}, {"problem": 40, "code": "#(rest (mapcat (partial list %1) %2))", "user": "58b997afe4b0888cdc949cd1"}, {"problem": 40, "code": "(fn result [x y]\n  (let [s (seq y)]\n    (if (empty? (rest s))\n      [(first s)]\n      (into [(first s) x] (result x (rest s))))))", "user": "5d1ef23ee4b02ea6f0fb69bb"}, {"problem": 40, "code": "(fn [sep xs]\n  (drop-last (reduce (fn [acc x]\n           (conj acc x sep))\n         []\n         xs)\n))", "user": "5d4320fde4b07c84aa5ae690"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5d45749be4b07c84aa5ae6a2"}, {"problem": 40, "code": "(\n    fn [sep col]\n    (butlast (reduce #(conj % %2 sep) [] col))\n)", "user": "5d3b340fe4b01671435dbd63"}, {"problem": 40, "code": "#(into []   (drop-last (flatten (map (fn [one]\n           (vector one %1) \n        )  %2)\n    ))\n )", "user": "5d3e8c3de4b01671435dbd73"}, {"problem": 40, "code": "(fn [sep xs]\n  (conj (mapcat vector (repeat sep) (rest xs))\n        (first xs)))", "user": "5d47fa13e4b07c84aa5ae6b6"}, {"problem": 40, "code": "(fn [x l] (rest (flatten (map #(vector x %) l))))", "user": "5d439775e4b07c84aa5ae696"}, {"problem": 40, "code": "(fn my-interpose\n  [e x]\n  (if (< (count x) 2)\n    x\n    (cons (first x) (cons e (my-interpose e (rest x))))))", "user": "5b4b8cd6e4b02d533a91bc9f"}, {"problem": 40, "code": "(fn [mid arr]\n  (conj (reduce #(conj %1 %2 mid) [] (butlast arr)) (last arr)))", "user": "5cb41c40e4b026601754b911"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5d4927dfe4b0776584bd6f16"}, {"problem": 40, "code": "(fn [sep coll]\n  (rest (mapcat (partial vector sep) coll)))", "user": "5146f343e4b04ef915e3731e"}, {"problem": 40, "code": "(fn [spr l] (drop-last (mapcat #(list %1 %2) l (repeat spr))))", "user": "4e628ab2535d8ccf87e9fe61"}, {"problem": 40, "code": "#(rest (mapcat list (repeat %1) %2))", "user": "5d46fbc6e4b07c84aa5ae6af"}, {"problem": 40, "code": "(fn [v coll]\n  (loop [v v\n         coll coll\n         coll2 (empty coll)]\n    (cond\n      (empty? coll) (butlast (reverse coll2))\n      true (recur v (rest coll) (cons v (cons (first coll) coll2))))))", "user": "55b7f263e4b01b9910ae29b4"}, {"problem": 40, "code": "(fn [separator list]\n  (loop [l list\n       result []]\n  (if l\n    (let [item (first l)]\n      (println result)\n      (if (= (count result) 0)\n        (recur (next l) (conj result item))\n        (recur (next l) (conj result separator item)))\n      )\n    result))\n)", "user": "5d2564d2e4b02ea6f0fb6a34"}, {"problem": 40, "code": "#(loop [elements %2\n        result []]\n   (if (> (count elements) 1)\n     (let [[head & tail] elements]\n       (recur tail (apply conj result [head %])))\n     (conj result (first elements))))", "user": "5d3f50d7e4b09d9322bc20a6"}, {"problem": 40, "code": "(fn [sep coll]\n  (butlast (mapcat vector coll (repeat sep))))", "user": "5d4b2155e4b0776584bd6f28"}, {"problem": 40, "code": "(fn [p xs] (rest (mapcat #(list p %) xs)))", "user": "5d0bb4fae4b0cc9c91588237"}, {"problem": 40, "code": "(fn [s myseq]\n  (pop (reduce #(into %1 [%2 s]) [] myseq)))", "user": "5bcee7d9e4b0e9689409ee22"}, {"problem": 40, "code": "(fn [x y] (->> (map #(vector % x) y)\n              (apply concat)\n              (drop-last)))", "user": "5d41ac35e4b05dd059a54375"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "5d4eb9c4e4b0776584bd6f48"}, {"problem": 40, "code": "(fn [Delim L]\n    (loop [Ret [] First (first L) Rest (rest L) ]\n      #_(println Ret \"*\" First \"*\" Rest)\n      (if (nil? First)\n        Ret\n        (recur\n          (if (nil? (first Ret)) \n            (conj Ret First)\n            (conj Ret Delim First)\n          )\n          (first Rest)\n          (rest Rest)\n        )\n      )\n    )\n  )", "user": "5d4a6c6ce4b0776584bd6f22"}, {"problem": 40, "code": "(fn inter\n  ([v ls] (inter v ls []) )\n  ([v [x & xs] final]\n   \t(if (empty? xs)\n      (conj final x)\n      (inter v xs (conj (conj final x) v) ) )))", "user": "5d48884ee4b07c84aa5ae6bb"}, {"problem": 40, "code": "(fn intrpose [separator coll]\n  (butlast (interleave coll (take\n                             (count coll)\n                             (repeat (count coll)\n                                     separator)))))", "user": "5d48e6d3e4b0776584bd6f15"}, {"problem": 40, "code": "(fn [x s]\n      (rest (mapcat #(list x %1) s)))", "user": "5d4c4de9e4b0776584bd6f2f"}, {"problem": 40, "code": "(fn [sep coll]\n  (loop [[x & xs] coll\n         res []]\n    (cond (nil? x) res\n          (empty? xs) (recur xs (conj res x))\n          :else (recur xs (conj res x sep)))\n  )\n)", "user": "5d07989ee4b0cc9c915881fb"}, {"problem": 40, "code": "(fn [sep s]\n  (let [result\n          (reduce\n            (fn [coll elm]\n              (conj coll elm sep)) [] s)\n        ]\n    (if (string? (first s))\n      (->> (butlast result)\n           (flatten)\n           (reduce concat)\n           (clojure.string/join \"\"))\n      (butlast result))))", "user": "5ad76df9e4b0ea6055cfac18"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2 ))", "user": "5d40442ee4b05dd059a54362"}, {"problem": 40, "code": "(fn [pose lists]\n   (let [init []]\n     (drop-last (reduce (fn [init list]\n                          (conj init list pose)) init lists)) \n     ))", "user": "5d40f41ae4b05dd059a5436d"}, {"problem": 40, "code": "(fn [somenum someseq] \n  (butlast (flatten (for [x someseq]\n    [x somenum]))))", "user": "56bff105e4b060a8e693e3a4"}, {"problem": 40, "code": "(fn [sep coll] \n  (reduce \n   (fn [acc n] (if (empty? acc) (conj acc n) (conj (conj acc sep) n)))\n     [] \n     coll))", "user": "5d4f21f3e4b0776584bd6f4e"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5d51377be4b0776584bd6f5d"}, {"problem": 40, "code": "(fn [s [h & t]] (conj (mapcat #(list s %) t) h))", "user": "5d47f4dbe4b07c84aa5ae6b5"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5cf48f04e4b087f62be35a86"}, {"problem": 40, "code": "#(butlast (mapcat vector %2 (repeat %)))", "user": "5259451ce4b0cb4875a45cd7"}, {"problem": 40, "code": "(fn fm\n              ([f li]\n                (fm f li [])\n               )\n              ([f li tar]\n               (if (empty? (rest li))\n                 (conj tar (first li))\n                 (fm f (rest li) (conj tar (first li) f))\n                 )\n               )\n              )", "user": "5d4cf3e9e4b0776584bd6f38"}, {"problem": 40, "code": "(fn [sep col]\n  (butlast (flatten (map #(conj (vector %) sep) col))))", "user": "5bf06734e4b0a6d31fed2153"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %)))", "user": "5d5166d9e4b0776584bd6f5e"}, {"problem": 40, "code": "(fn my-interpose [i xs]\n  (cond\n    (> (count xs) 1) (concat (concat [(first xs)] [i]) (my-interpose i (rest xs)))\n\t(= (count xs) 1) [(first xs)]\n    :else []\n  )\n)", "user": "5d4c83b7e4b0776584bd6f34"}, {"problem": 40, "code": "(fn my-interpose [sep col] (last (reduce\n                                    (fn [[remaining res] val] (if (= 1 remaining)\n                                                                [remaining (conj res val)]\n                                                                [(dec remaining) (conj res val sep)])) [(count col) []] col)))", "user": "5d45bd1de4b07c84aa5ae6a4"}, {"problem": 40, "code": "(fn rias\n  [acc a b]\n  (if (empty? (next b))\n    (conj acc (first b))\n    (rias (conj acc (first b) a) a (next b))\n    )) []", "user": "5bdc4a76e4b0ed4b8aab4c30"}, {"problem": 40, "code": "(fn [val seq1]\n  (butlast (flatten (for [x seq1]\n    [x val]\n    ))))", "user": "5d4df658e4b0776584bd6f41"}, {"problem": 40, "code": "(fn [n xs] (drop-last (mapcat list xs (repeat (count xs) n))))", "user": "5d5e0259e4b0c9e5857d4fef"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5d5e9f45e4b0c9e5857d4ff5"}, {"problem": 40, "code": "#(butlast (mapcat vector %2 (repeat %1)))", "user": "5d609ddde4b0c9e5857d5008"}, {"problem": 40, "code": "(fn [sep coll] (drop-last (mapcat #(vector % sep) coll)))", "user": "596a66cde4b069c0a1a19803"}, {"problem": 40, "code": "(fn [x y] (vec (butlast (reduce (fn [a b] (conj a b x)) [] y))))", "user": "5d52bf29e4b0776584bd6f69"}, {"problem": 40, "code": "(fn interpose-seq2\n  [separator collection]\n  (->> collection\n       (map (fn [val] (conj (vector val) separator)))\n       (flatten)\n       (drop-last)))", "user": "5d42c88ae4b05dd059a5437e"}, {"problem": 40, "code": "(fn [a b]\n  (loop [a a\n         b (seq b)\n         c []]\n    (if (= (count b) 1)\n      (conj c (first b))\n      (recur a (rest b) (conj (conj c (first b)) a) ))))", "user": "5d2c779be4b01671435dbc8d"}, {"problem": 40, "code": "(fn my-interpose\n  [x ys]\n  (butlast (interleave ys\n                       (repeat x))))", "user": "5d53a59ae4b0776584bd6f72"}, {"problem": 40, "code": "(fn [x lst]\n  (rest (apply concat (map (fn [y] (list x y)) lst))))", "user": "5b608087e4b0c6492753e700"}, {"problem": 40, "code": "(fn [sep coll]\n   (drop 1 (interleave (repeat sep) coll)))", "user": "5d5eb086e4b0c9e5857d4ff7"}, {"problem": 40, "code": "(fn f [v [fst & coll]] (if-let [s (seq coll)]\n                         (conj (f v s) v fst)\n                         (list fst)))", "user": "5d629ed9e4b0c9e5857d501d"}, {"problem": 40, "code": "(fn ip [sep it]\n  (butlast (reduce #(concat %1 [%2 sep]) [] it))\n  )", "user": "5d641841e4b0c9e5857d502e"}, {"problem": 40, "code": "(fn [v s1]\n   ((fn [s1 acc]\n      (cond (<= (count s1) 1) (conj acc (first s1))\n            :else (recur (rest s1) (conj acc (first s1) v)))) s1 []))", "user": "5d631376e4b0c9e5857d5023"}, {"problem": 40, "code": "#(drop-last (interleave %2 (take (count %2) (repeat %))))", "user": "5b329773e4b025bcb146f322"}, {"problem": 40, "code": "(fn [del s] (drop-last (into [] (mapcat #(cons %1 (list  del)) s))))", "user": "5d4dd0b4e4b0776584bd6f40"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5d67c955e4b0db5d338d15f7"}, {"problem": 40, "code": "(fn foo [x ls] (rest (reduce #(conj %1 x %2) [] ls)))", "user": "5d672bd7e4b0db5d338d15f1"}, {"problem": 40, "code": "(fn [p s]\n  (drop-last (reduce (fn [t x] (conj t x p)) [] s))\n)", "user": "553b90c8e4b09218d5f45005"}, {"problem": 40, "code": "#(rest (interleave (repeat (count %2) %1) %2))", "user": "5d63b06be4b0c9e5857d5025"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5d651553e4b0db5d338d15ca"}, {"problem": 40, "code": "(fn [a b]\n      (drop 1 (reduce\n                #(into %1 (list a %2))\n                []\n                b)))", "user": "5d5ef0bce4b0c9e5857d4ffb"}, {"problem": 40, "code": "(fn [de se] (butlast(reduce #(conj %1 %2 de) [] se)))", "user": "58c71509e4b021aa9917ed6e"}, {"problem": 40, "code": "#(loop [it %2\n         result []]\n    (let [head (first it)]\n      (if (nil? head)\n        result\n        (recur (rest it)\n               (if (empty? (rest it))\n                 (conj result head)\n                 (conj result head %1))))))", "user": "5d5c2730e4b09db18d4482ea"}, {"problem": 40, "code": "(fn intrps [ins coll]\n  (let [interposed (reduce #(conj (conj %1 %2) ins) [] (drop-last coll))]\n    (conj interposed (last coll))))", "user": "5d68f5e6e4b0db5d338d1605"}, {"problem": 40, "code": "#(rest(interleave (repeat %1) %2))", "user": "5d6523ace4b0db5d338d15cd"}, {"problem": 40, "code": "#(reduce \n   (fn [r n]\n     (if (= r [])\n         (conj r n)\n         (conj r %1 n)\n       )\n     )\n   [] %2\n   )", "user": "5d5b2678e4b06a698e928ee2"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5d66aea7e4b0db5d338d15ec"}, {"problem": 40, "code": "(fn [v s]\n (drop-last 1\n  (apply vector (flatten \n   (map #(identity [%1 v]) s)))))", "user": "5ce867fce4b0a17bb84e2baf"}, {"problem": 40, "code": "(fn [element coll]\n                (->(reduce #(conj %1 %2 element) (vector) coll)\n                   (drop-last)\n                 )\n  )", "user": "5a7f77fae4b00b71e582a041"}, {"problem": 40, "code": "(fn [sep li]\n  (reduce \n    (fn [ret el] (conj (conj ret sep) el))\n    [(first li)]\n    (rest li)))", "user": "5d1e19c4e4b02ea6f0fb69af"}, {"problem": 40, "code": "(fn [x seq] (drop-last (reduce #(conj %1 %2 x) [] seq)))", "user": "5d6d2172e4b04d129b00f2b9"}, {"problem": 40, "code": "(fn [x c] (drop-last (reduce #(concat %1 [%2 x]) [] c)))", "user": "5d764e52e4b02e6b30c93524"}, {"problem": 40, "code": "(fn interp [obj s]\n  (reduce (fn [acc i] (conj acc obj i))\n          [(first s)]\n          (rest s)))", "user": "5d64ecb2e4b0c9e5857d5036"}, {"problem": 40, "code": "#(rest (mapcat vector (repeat %1) %2))", "user": "5a7de7a3e4b03baeef927702"}, {"problem": 40, "code": "(fn [value sqn]\n  (if (empty? sqn)\n    []\n  \t(loop [s (rest sqn)\n    \t   res (vector (first sqn))]\n    \t(if (empty? s)\n      \t\tres\n      \t\t(recur (rest s) (concat res (vector value (first s))))))))", "user": "5d64013ce4b0c9e5857d502d"}, {"problem": 40, "code": "#( vec ( butlast ( mapcat list %2 ( repeat (  count %2 ) %1 ) ) ) )", "user": "5d5c6675e4b09db18d4482ec"}, {"problem": 40, "code": "(fn interposer\n  [val coll]\n  (butlast (interleave coll (repeat val))))", "user": "5d6d2e11e4b04d129b00f2ba"}, {"problem": 40, "code": "(fn Interpose-seq\n  [delimiter coll]\n  (drop-last\n        (into []\n              (interleave coll\n                          (repeat (alength (into-array coll)) delimiter)))))", "user": "5d6691cee4b0db5d338d15e9"}, {"problem": 40, "code": "(fn my-interpose [sep coll]\n  (drop-last (interleave coll (repeat sep))))", "user": "5d6f063de4b04d129b00f2d1"}, {"problem": 40, "code": "(fn [sep c]\n  (drop-last\n   (interleave \n    c \n    (take (count c)\n          (repeat sep)))))", "user": "5c56e264e4b0fb8c5ffd9a39"}, {"problem": 40, "code": "(fn\n  [sep coll]\n  (butlast (mapcat #(vector % sep) coll)))", "user": "5d7b90ede4b02e6b30c93552"}, {"problem": 40, "code": "(fn [v s] (concat (interleave (butlast s) (repeat v)) (list (last s))))", "user": "5d6f0533e4b04d129b00f2d0"}, {"problem": 40, "code": "(fn [delimiter collection]\n  (rest (mapcat #(vector delimiter %1) collection) ))", "user": "5d6e5b53e4b04d129b00f2c6"}, {"problem": 40, "code": "(fn [inter-elt coll] \n  (butlast (reduce #(conj (conj %1 %2) inter-elt) [] coll)))", "user": "5d7eaf5fe4b0492f5d910fc3"}, {"problem": 40, "code": "(fn [x coll] (drop 1 (interleave (repeat x) coll)))", "user": "5d1609f9e4b0902706380dd9"}, {"problem": 40, "code": "(fn\n\t[valor coll]\n\t(let [coll-intermediada\n\t\t\t\t(reduce concat {}\n\t\t\t\t\t\t\t\t(map (fn [x] (list x valor)) coll))]\n\t\t(take (dec (count coll-intermediada)) coll-intermediada)))", "user": "5d797deee4b02e6b30c93541"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5d7d17ece4b02e6b30c93558"}, {"problem": 40, "code": "(fn [x y] (loop [z (rest y) out [(first y)]] (if (empty? z) out (recur (rest z) (concat out [x] [(first z)])))))", "user": "5d7158f3e4b04d129b00f2e1"}, {"problem": 40, "code": "(fn interpose-seq [num some-seq]\n  (concat (mapcat (fn [n] (conj (vector n) num)) (drop-last some-seq)) (vector (last some-seq))))", "user": "5d6e5ec6e4b04d129b00f2c7"}, {"problem": 40, "code": "(fn [x coll]\n  (butlast (mapcat #(vector % x) coll)))", "user": "5d80fa37e4b0915913b1d374"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %)))", "user": "5d81eba4e4b0915913b1d37b"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5d6febe6e4b04d129b00f2d5"}, {"problem": 40, "code": "(fn [element col]\n   (conj (reduce #(into\n                   %1\n                   [%2 element])\n                 []\n                 (drop-last col))\n         (last col)))", "user": "5d5824fae4b02ba5928a681f"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5d6d4463e4b04d129b00f2bd"}, {"problem": 40, "code": "(fn y-interpose\n  [symbol coll]\n  (drop-last (reduce #(conj %1 %2 symbol) [] coll)))", "user": "5d6b21efe4b04d129b00f2a3"}, {"problem": 40, "code": "#(drop-last 1 (interleave %2 (repeat %1)))", "user": "5d6fae1ee4b04d129b00f2d4"}, {"problem": 40, "code": "#(loop [%2 %2\n       acc []]\n  (if (empty? %2)\n    (drop-last acc)\n    (recur (rest %2) (conj acc (first %2) %1))))", "user": "5bcdb877e4b0e9689409ee02"}, {"problem": 40, "code": "(fn [nb coll] (rest (mapcat (fn [el] [nb el]) coll)))", "user": "5d63f1c2e4b0c9e5857d502b"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat (count %2) %1)) )", "user": "5d88a22de4b0915913b1d3ab"}, {"problem": 40, "code": "#(drop-last (apply concat (apply map vector [ %2 (repeat (count %2) %1) ])))", "user": "5d123457e4b02c15ef021996"}, {"problem": 40, "code": "#(drop-last (mapcat list %2 (repeat %1)))", "user": "5d1231dde4b02c15ef021995"}, {"problem": 40, "code": "(fn myinterpose\n  [val elms]\n  (concat (mapcat list elms (repeat (dec (count elms)) val)) (list (last elms)))\n)", "user": "5d828b7ee4b0915913b1d382"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5c5ad42ae4b01df32ab7327c"}, {"problem": 40, "code": "(fn [delimiter coll] (butlast (mapcat #(conj (vector %) delimiter) coll)))", "user": "5d88c6a3e4b0915913b1d3ad"}, {"problem": 40, "code": "(fn [seprator old-seq]\n  (let [new-old-seq (drop-last old-seq)]\n\n    (concat (reduce (fn [new-seq cur-seq]\n                       (concat new-seq [cur-seq seprator]))\n                     {}\n                     new-old-seq) [(last old-seq)] )\n    )\n\n  )", "user": "5d90b3b3e4b0915913b1d3fb"}, {"problem": 40, "code": "(fn [n xs]\n  \n (butlast(interleave xs (repeat (count xs) n)))\n  )", "user": "5d917ef0e4b0915913b1d402"}, {"problem": 40, "code": "(fn my-interpose\n  ([inter arg]\n   (my-interpose inter arg []))\n  ([inter arg pose]\n   (if (empty? arg) \n     (rest pose)\n     (my-interpose inter (rest arg) (conj pose inter (first arg))))))", "user": "5d896a64e4b0915913b1d3b8"}, {"problem": 40, "code": "(fn [v xs] (drop-last (interleave xs (repeat v))))", "user": "5d88d820e4b0915913b1d3b1"}, {"problem": 40, "code": "(fn [x coll]\n   (butlast (mapcat list coll (repeat (count coll) x))))", "user": "5d887d27e4b0915913b1d3a8"}, {"problem": 40, "code": "(fn [x ys] (rest (mapcat #(list x %) ys)))", "user": "5d81b40ce4b0915913b1d379"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "5d915f01e4b0915913b1d401"}, {"problem": 40, "code": "(fn [e xs] (reduce #(conj %1 e %2) (vector (first xs)) (rest xs)))", "user": "5ab3db13e4b073f177442609"}, {"problem": 40, "code": "(fn [ee col]                                                                          \n  (flatten (conj (vec (map #(list % ee) (butlast col))) (last col))))", "user": "57a499dae4b0a966079561e6"}, {"problem": 40, "code": "(fn f\n  ([val coll]\n   (f val coll []))\n  ([val coll result]\n   (let [[x & xs] coll]\n     (if (empty? xs)\n       (conj result x)\n       (recur val xs (conj result x val))))))", "user": "524a9556e4b05ef8e38e64b1"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5d8af64fe4b0915913b1d3cf"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5d9aeae5e4b0d3f9b434ad4a"}, {"problem": 40, "code": "(fn my-interpose [item col]\n  (loop [c col\n         new []]\n    (if (empty? c)\n      (drop-last new)\n      (recur (rest c) (conj new (first c) item)))))", "user": "5d80f328e4b0915913b1d372"}, {"problem": 40, "code": "; Interpose a sequence\n(fn\n  [val coll]\n  (let [length (count coll)]\n    (if (= length 0)\n      []\n      (loop [index 1\n            result [(first coll)]]\n            (if (>= index (count coll))\n              result \n              (recur (+ index 1)\n                (into result [val (nth coll index)])))))))\n\n;(interpose [] 4)\n;(interpose [1] 4)\n;(interpose [1 2] 4)\n;(interpose [1 2 3] 4)", "user": "5d9ceac2e4b0eb781811cdb3"}, {"problem": 40, "code": "(fn [sep sequ] (rest (mapcat (fn [el] [sep el]) sequ)))", "user": "533d51d4e4b085b17e897d7c"}, {"problem": 40, "code": "(fn [element coll] (butlast (interleave coll (repeat element))))", "user": "5d9c1226e4b0d3f9b434ad51"}, {"problem": 40, "code": "#( take (-> %2 count (* 2 ) dec) (interleave %2 (repeat %1)))", "user": "5d9e7971e4b000c986472bc1"}, {"problem": 40, "code": "(fn [n s] \n    (if (seq s)\n      (conj (interleave (repeat n) (rest s)) (first s))\n      (empty s)))", "user": "5d8b4960e4b0915913b1d3d3"}, {"problem": 40, "code": "(fn my-interpose\n  [value xs]\n  (butlast (interleave xs (repeat (count xs) value))))", "user": "5d49ec5ee4b0776584bd6f1c"}, {"problem": 40, "code": "(fn [x coll] (conj (interleave (repeat x) (rest coll)) (first coll)))", "user": "5d97b602e4b0d3f9b434ad3a"}, {"problem": 40, "code": "(fn mix [k [x & xs]]\n  (if (empty? xs) [x]\n    (into [x k] (mix k xs))))", "user": "594fdfdce4b066ee0a44ae85"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5ccf125ce4b0ccb0619628c0"}, {"problem": 40, "code": "(fn [av s]\n  (->> (for [value s]\n         [value av])\n       flatten\n       butlast))", "user": "5da44d35e4b000c986472bf1"}, {"problem": 40, "code": "#(butlast (mapcat vector %2 (repeat  %1) ))", "user": "5da7176ae4b000c986472c13"}, {"problem": 40, "code": "(fn [sep coll]\n   (butlast\n    (flatten \n     (for [i coll]\n      [i sep]))))", "user": "5c0fedade4b01240ff567157"}, {"problem": 40, "code": "(fn [sep sq] (rest (mapcat #(list sep %) sq)))", "user": "5d7a748ce4b02e6b30c93547"}, {"problem": 40, "code": "#(take (dec (* 2 (count %2))) (interleave %2 (repeat %1)))", "user": "5d974b1de4b0d3f9b434ad36"}, {"problem": 40, "code": "(fn[separator items]\n(butlast (interleave items (repeat separator))))", "user": "5da05bcce4b000c986472bd0"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5da760ebe4b000c986472c1a"}, {"problem": 40, "code": "#(rest (mapcat vector (repeat %1) %2))", "user": "5da8fa72e4b000c986472c2d"}, {"problem": 40, "code": "(fn [sep xs]\n  (loop\n    [acc []\n     rems xs]\n    (if (empty? rems)\n      acc\n      (if (= (count rems) 1)\n        (conj acc (last rems))\n        (recur (conj (conj acc (first rems)) sep)\n               (rest rems))))))", "user": "5daa1fc8e4b000c986472c3e"}, {"problem": 40, "code": "(fn interpose-seq [value coll]\n  (if \n    (<= (count coll) 1)\n    coll\n    (concat [(first coll) value] (interpose-seq value (rest coll)))))", "user": "568f2059e4b0dcc4269f40df"}, {"problem": 40, "code": "(fn inter-rec \n  [sep coll]\n  (let [head (first coll) tail (rest coll)]\n    (if (empty? tail)\n      (list head)\n      (cons head (cons sep (inter-rec sep tail))))))", "user": "5da9662ce4b000c986472c30"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "user": "5d99dc47e4b0d3f9b434ad42"}, {"problem": 40, "code": "(fn [xVal xList]\n  (reverse (rest (reduce (fn [xFirst xSecond] (apply conj xFirst (list xSecond xVal))) '() xList)))\n)", "user": "5da20e73e4b000c986472be1"}, {"problem": 40, "code": "(fn [v coll]\n  (butlast (mapcat #(list % v) coll)))", "user": "56f9982ce4b07572ad1a88b8"}, {"problem": 40, "code": "(fn [sep coll]\n  (butlast\n   \t(interleave coll (repeat sep))))", "user": "5cc0ca7ae4b0ccb06196279d"}, {"problem": 40, "code": "#(rest (interleave (map (constantly %1) %2) %2))", "user": "5dac6272e4b000c986472c4c"}, {"problem": 40, "code": "(fn [v x] (drop-last (flatten (map #(vector %1 %2) x (repeat (count x) v)))))", "user": "5dab11cde4b000c986472c45"}, {"problem": 40, "code": "(fn ttt[x coll](rest (let [a (fn b [x coll ret](cond\n                                   (empty? coll) ret\n                                   :else (b x (rest coll) (conj(conj ret x)(first coll)) ) ))]\n             (a x coll []))))", "user": "5dadf73ee4b0f8c104ccfc86"}, {"problem": 40, "code": "(fn [shunt coll]\n  (rest (flatten (map #(vector shunt %) coll)))\n)", "user": "5da975b9e4b000c986472c32"}, {"problem": 40, "code": "(fn [delim, list]\n  (->> list\n      (map #(vector % delim))\n      (flatten)\n      (drop-last)))", "user": "5da4b152e4b000c986472bf6"}, {"problem": 40, "code": "(fn my-interpose\n  [separator x]\n  (concat (mapcat #(list % separator) (butlast x)) [(last x)]))", "user": "5d9c8a85e4b0eb781811cdad"}, {"problem": 40, "code": "(fn [separator sequence]\n  (loop [sequence sequence\n         result nil]\n    (if (nil? (seq sequence))\n      result\n      (recur (rest sequence) (concat result (if-not (nil? (seq (rest sequence))) [(first sequence) separator] (seq [(first sequence)])))))))", "user": "5da5a1eee4b000c986472c04"}, {"problem": 40, "code": "(fn [x coll] (butlast (#(mapcat list %2 (repeat (count %2) %1)) x coll)))", "user": "5daa0d56e4b000c986472c3c"}, {"problem": 40, "code": "(fn iter-val [a lat]\n\t(let [[y & ys] lat] \n      (if (empty? ys) \n       (list y)\n       (cons y (cons a (iter-val a ys))))))", "user": "5daeb6bce4b0f8c104ccfc8b"}, {"problem": 40, "code": "#(->>   (reduce (fn [x y]  (into x [y %1]) )  []  %2)    (drop-last)   )", "user": "5da98129e4b000c986472c33"}, {"problem": 40, "code": "(fn [x xs] (butlast (mapcat list xs (repeat (count xs) x))))", "user": "5da71eaee4b000c986472c15"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5d94fdf9e4b0d3f9b434ad2b"}, {"problem": 40, "code": "(fn [sep lst]\n  (loop [lst lst, acc []]\n    (cond (empty? lst)       acc\n          (= (count lst) 1)  (conj acc (first lst))\n          :else              (recur (rest lst) (conj acc (first lst) sep)))))", "user": "5d9475e4e4b0d3f9b434ad25"}, {"problem": 40, "code": "(fn [y x] (loop [coll x, result []]\n  (cond (empty? coll)            result\n        (= (count coll) 1)       (conj result (first coll))\n        :else (recur (rest coll) (conj result (first coll) y)))))", "user": "5d947bbbe4b0d3f9b434ad27"}, {"problem": 40, "code": "(fn inter [d coll]\n  (reduce (fn [acc n]\n            (conj acc d n))\n          [(first coll)]\n          (rest coll)))", "user": "5d7aa22ee4b02e6b30c9354e"}, {"problem": 40, "code": "(fn [sep sq] \n  (rest \n    (apply concat\n      (for [x sq]\n        [sep x]))))", "user": "5db19599e4b010eb3c36cd05"}, {"problem": 40, "code": "(fn\n  [v xs]\n  (butlast (interleave xs (repeat v))))", "user": "5db0d470e4b0f8c104ccfc9e"}, {"problem": 40, "code": "(fn [delimiter collection]\n  (drop 1 \n        (mapcat \n          (fn [item]\n            [delimiter item])\n          collection)))", "user": "5b99554ae4b0c0b3ffbd4ace"}, {"problem": 40, "code": "(fn [sep coll]\n   (drop-last 1 (mapcat #(list % sep) coll)))", "user": "5d9475e9e4b0d3f9b434ad26"}, {"problem": 40, "code": "#(take (- (* (count %2) 2) 1) (interleave %2 (repeat (count %2) %)))", "user": "5da8b8ece4b000c986472c28"}, {"problem": 40, "code": "#(drop-last (flatten (for [x %2] (list x %1))))", "user": "590b2d92e4b047aa04b199cf"}, {"problem": 40, "code": "(fn [intc coll] (loop [c [] cnt 0]\n(if (= cnt (- (count coll) 1)) (conj c (nth coll cnt))\n(recur (conj c (nth coll cnt) intc) (inc cnt)))))", "user": "5daec18ae4b0f8c104ccfc8c"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5d51884be4b0776584bd6f61"}, {"problem": 40, "code": "(fn [x xs]\n  (let [[xs' lst] (split-at (dec (count xs)) xs)]\n    (concat (mapcat #(vector % x) xs') lst)))", "user": "5db1969be4b010eb3c36cd06"}, {"problem": 40, "code": "(fn [separator coll]\n  (drop-last (interleave coll (repeat separator))))", "user": "5a37b6dbe4b001c08efc0c88"}, {"problem": 40, "code": "(fn [x coll]\n  (butlast (mapcat (fn [p] [p x]) coll)))", "user": "5db6cc4ae4b010eb3c36cd3b"}, {"problem": 40, "code": "(fn [s col] (butlast (interleave col (repeat (count col) s))))", "user": "5dbd51cfe4b09f47823971bb"}, {"problem": 40, "code": "#(reduce (fn \n            [acc curr]\n            (if (= (count acc) 0)\n            [curr]\n            (conj (conj acc %1) curr)))\n          [] %2)", "user": "5db861bce4b010eb3c36cd4b"}, {"problem": 40, "code": "(fn [i c]\n  (->> (rest c)\n       (reduce\n        (fn [cc v]\n          (concat cc [i v]))\n        [])\n       (cons (first c))))", "user": "5cf6522be4b0b71b1d808a58"}, {"problem": 40, "code": "#( (fn [v c re]\n           (if (first c)\n             (recur v (rest c) (conj re v (first c)))\n             re)) %1 (rest %2) (vector (first %2)))", "user": "5dc12b0ae4b0e59a23173d84"}, {"problem": 40, "code": "(fn separate-items\n  [v s]\n  (reduce #(if (not= (last s) %2)\n            (conj (conj %1 %2) v)\n            (conj %1 %2))\n          [] \n          s))", "user": "5db1e852e4b010eb3c36cd0a"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5db7376fe4b010eb3c36cd43"}, {"problem": 40, "code": "(fn foo [n s]\n  (butlast (reduce (fn [coll elm] (conj coll elm n)) [] s)))", "user": "5dba063ee4b010eb3c36cd5c"}, {"problem": 40, "code": "(fn [sep s]\n  (rest (reduce (fn [acc x] (conj acc sep x))\n          \t[]\n          \ts)))", "user": "5b055773e4b0cc2b61a3bd81"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "user": "59ea07c9e4b0249b72820756"}, {"problem": 40, "code": "(fn[n x] (rest (flatten (map #(vector n %1) (seq x)))))", "user": "53d63e6ce4b0e771c3025454"}, {"problem": 40, "code": "#(rest(mapcat list (repeat (count %2) %1) %2 ))", "user": "5dbb5200e4b09f47823971a9"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5dc40814e4b02f9375f4e1ae"}, {"problem": 40, "code": "#(butlast (loop [current %2 ret [] val %1]\n             (if (empty? current)\n               ret\n               (recur (rest current)\n                      (conj ret (first current) val)\n                      val\n                      ))))", "user": "5b044436e4b0cc2b61a3bd71"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %) %2))", "user": "5dbe27c3e4b09f47823971c4"}, {"problem": 40, "code": "(fn [v, coll]\n  (loop [coll coll\n        acc []\n        insert false]\n    (if (empty? coll)\n      (reverse acc)\n      (if (= insert true)\n        (recur coll (cons v acc) false)\n        (recur (rest coll) (cons (first coll) acc) true)))))", "user": "5db93acbe4b010eb3c36cd51"}, {"problem": 40, "code": "(fn [sep seq] (butlast (mapcat #(list % sep) seq)))", "user": "5db92996e4b010eb3c36cd50"}, {"problem": 40, "code": "(fn [x v] (rest (mapcat (partial list x) v)))", "user": "4fbb7010e4b081705acca2e7"}, {"problem": 40, "code": "(fn [x xs]\n  (rest (interleave (repeat x) xs)))", "user": "5db5d09be4b010eb3c36cd31"}, {"problem": 40, "code": "(fn [item coll] (->> coll\n                     (mapcat #(list % item))\n                     (drop-last)))", "user": "5d9c9446e4b0eb781811cdae"}, {"problem": 40, "code": "(fn [v s]\n  (drop 1 (interleave (repeat v) s)))", "user": "5dc72a9ce4b02f9375f4e1cd"}, {"problem": 40, "code": "(fn my-interpose [val elements]\n  (if (= (count elements) 1)\n    elements\n    (conj (my-interpose val (rest elements)) val (first elements))))", "user": "5dc4719ae4b02f9375f4e1b5"}, {"problem": 40, "code": "(fn [d s] (drop-last 1 (reduce #(conj %1 %2 d) [] s)))", "user": "5dc9ccf8e4b02f9375f4e1f1"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "5dca5e0ae4b02b31cc3da3af"}, {"problem": 40, "code": "(fn f\n  ([y xs] (f y xs []))\n  ([y [x & xs] xys]\n    (if (empty? xs)\n      (conj xys x)\n      (f y xs (conj xys x y)))))", "user": "5dc9d5c3e4b03836ba07d824"}, {"problem": 40, "code": "(fn [sep coll] \n             (drop-last 1 (mapcat vector coll (repeat (count coll) sep))))", "user": "5dc9c4f2e4b02f9375f4e1f0"}, {"problem": 40, "code": "(fn [inter a]\n  (loop [init (rest a) acc (list (first a))]\n    (if (empty? init)\n      (reverse acc)\n      (recur (rest init) (conj acc inter (first init))))))", "user": "5dc9c070e4b02f9375f4e1ee"}, {"problem": 40, "code": "#(loop [l %2, res []]\n   (cond (empty? l) res\n         (empty? (rest l)) (recur nil (conj res (first l)))\n         :else (recur (rest l)\n                      (-> res\n                          (conj (first l))\n                          (conj %)))))", "user": "5dcc0ee9e4b02b31cc3da3c2"}, {"problem": 40, "code": "(fn [x s] (rest (mapcat #(list %1 %2) (repeat x) s)))", "user": "5dc98501e4b02f9375f4e1e6"}, {"problem": 40, "code": "(fn [x coll] (drop 1 (mapcat #(interleave [x] [%]) coll)))", "user": "5dc318cde4b02f700ae81835"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "59b1a1b2e4b0e1f4e384c8eb"}, {"problem": 40, "code": "(fn [inter coll] (-> (mapcat vector coll (repeat inter)) reverse rest reverse))", "user": "5dcfdf23e4b0948ae9d9ad43"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5dc96791e4b02f9375f4e1e5"}, {"problem": 40, "code": "(fn [separator coll]\n  (drop-last (mapcat #(list % separator) coll)))", "user": "5d9e8e40e4b000c986472bc2"}, {"problem": 40, "code": "(fn my-interpose [m col]\n  (drop-last (reduce #(into %1 [%2 m])  [] col)))", "user": "59b0e877e4b0e1f4e384c8d3"}, {"problem": 40, "code": "(fn [part coll] (butlast (mapcat #(concat % [part] ) (partition 1 coll) )))", "user": "5dcb1e73e4b02b31cc3da3b6"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5dd1fb19e4b0948ae9d9ad51"}, {"problem": 40, "code": "(fn [x coll]\n  (loop [new [] remain coll]\n    (if (empty? remain)\n      (rest new)\n      (recur (conj new x (first remain)) (rest remain)))))", "user": "5da306a3e4b000c986472be7"}, {"problem": 40, "code": "(fn f [x l] (if (= 1 (count l)) l\n              (concat (list (first l) x) (f x (rest l)))))", "user": "5dd35dcbe4b0948ae9d9ad5f"}, {"problem": 40, "code": "#(loop [i 1 acc [(nth %2 0)]] (if (>= i (count %2)) acc (recur (+ i 1) (conj acc %1 (nth %2 i)))))", "user": "5dd44256e4b0948ae9d9ad69"}, {"problem": 40, "code": "(fn \n  [element ip-sequence]\n  (let [output-seq (reduce\n                    (fn [acc curr]\n                      (conj acc curr element))\n                    []\n                    ip-sequence)]\n   (drop-last output-seq)))", "user": "5d8c8175e4b0915913b1d3e1"}, {"problem": 40, "code": "(fn interps [e coll]\n  (loop [res []\n         rem coll]\n    (let [[head & tail] rem]\n      (if (empty? tail)\n        (conj res head)\n        (recur (conj res head e) tail))))\n  )", "user": "5dd67c22e4b0948ae9d9ad80"}, {"problem": 40, "code": "(fn [a b] (drop-last (mapcat (fn [x] x) (map (fn [x] [x a]) b))))", "user": "5dd90651e4b0948ae9d9ad97"}, {"problem": 40, "code": "(fn [deli col] (drop-last 1 (mapcat #(vector % deli) col)))", "user": "5793931ee4b0e215f87e845c"}, {"problem": 40, "code": "(fn [x y]\n  (concat (->> y butlast (mapcat #(list % x)) ) (list (last y))))", "user": "5dcc5e5ce4b02b31cc3da3c7"}, {"problem": 40, "code": "(fn [i s]\n  (butlast (reduce (fn [acc el]\n                      (conj acc el i))\n                    []\n                    s)))", "user": "5ddb6151e4b0948ae9d9adb0"}, {"problem": 40, "code": "#(butlast (apply concat (map (fn [x] (list x %1)) %2)))", "user": "5ddcf10ae4b0948ae9d9adbe"}, {"problem": 40, "code": "(fn [target number coll]\n  (let [[x & new-coll] coll]\n    (if (empty? new-coll)\n      (conj target x)\n      (recur (conj target x number) number new-coll)))) []", "user": "5ddecfe5e4b0948ae9d9adda"}, {"problem": 40, "code": "(fn [x s] \n  (rest (mapcat #(vector x %1) s) ))", "user": "5dddc292e4b0948ae9d9adcb"}, {"problem": 40, "code": "(fn inter [el s]\n  (if (empty? (rest s))\n    s\n    (concat [(first s) el] (inter el (rest s)))))", "user": "5dd60c58e4b0948ae9d9ad7c"}, {"problem": 40, "code": "(fn my-interpose\n  [separator\n   coll]\n  (let [qty (count coll)]\n    (drop-last (flatten (map vector coll (repeat qty separator))))))", "user": "5de012c8e4b0948ae9d9ade2"}, {"problem": 40, "code": "(fn [x xs] (drop-last (interleave xs (take (count xs) (repeat x)))))", "user": "5d84545ee4b0915913b1d38b"}, {"problem": 40, "code": "(fn fourty [n seq]\n(reduce \n (fn [a b]\n   (conj a n b))\n   [(first seq)]\n   (rest seq)\n))", "user": "5dbf6016e4b0e59a23173d79"}, {"problem": 40, "code": "#( rest (apply concat (map vector (repeat %1) %2)))", "user": "5de3d6c6e4b0948ae9d9ae02"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5ddd134ae4b0948ae9d9adc0"}, {"problem": 40, "code": "(fn [x y] (reduce (fn [a b] (conj a x b)) (vector (first y)) (rest y)))", "user": "5bfc50ece4b0bdcf453d15ea"}, {"problem": 40, "code": "(fn [sep coll]\n  (loop [interposed [] [elem & coll] coll]\n    (if (empty? coll)\n      (conj interposed elem)\n      (recur (into interposed [elem sep]) coll)\n    )\n  )\n)", "user": "5de6484ce4b0986d99407f66"}, {"problem": 40, "code": ";;(fn [sep col] ((comp reverse rest reverse) (interleave col (repeat sep))))\n(fn [sep col] (rest (interleave (repeat sep) col)))", "user": "5dbac8ebe4b010eb3c36cd62"}, {"problem": 40, "code": "(fn [x xs] (butlast (mapcat #(vector % x) xs)))", "user": "5de68f83e4b0986d99407f6c"}, {"problem": 40, "code": "(fn _interpose [i lst]\n  (drop 1 (interleave (repeat i) lst)))", "user": "5d614059e4b0c9e5857d500e"}, {"problem": 40, "code": "(fn\n  [item items]\n  (drop-last (mapcat #(vector % item) items)))", "user": "5dd25ca8e4b0948ae9d9ad55"}, {"problem": 40, "code": "#(drop-last (flatten (for [x %2 y [%1]] [x y])))", "user": "5de65feee4b0986d99407f68"}, {"problem": 40, "code": "(fn inter [pad coll] (->> (for [x coll] (list pad x))\n                          (reduce concat)\n                          (drop 1)))", "user": "5decd4fde4b093ff7172757b"}, {"problem": 40, "code": "#(loop [c %1 list1 %2 result []]\n   (if (= (count list1) 1)\n     (conj result (first list1))\n     (recur c (rest list1) (conj (conj result (first list1)) c))\n     )\n   )", "user": "5deab1b2e4b0986d99407f9f"}, {"problem": 40, "code": "(fn [v s] (cons (first s)\n                ((fn iter [s]\n                   (if (empty? s) '() (cons v (cons (first s) (iter (rest s)))))\n                   ) (rest s))))", "user": "5dee144ae4b093ff71727591"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5de7e7cae4b0986d99407f7a"}, {"problem": 40, "code": "(fn [value xs]\n  (loop [res '() remaining xs]\n    (if (empty? remaining)\n      (butlast res)\n      (recur (concat res (list (first remaining) value)) (rest remaining)))))", "user": "5de48f92e4b0948ae9d9ae07"}, {"problem": 40, "code": "(fn [x s] \n  (rest (mapcat #(vector x %1) s) ))", "user": "5defd277e4b093ff717275b0"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5d5e2efee4b0c9e5857d4ff0"}, {"problem": 40, "code": "(fn [sep seqs] (pop (reduce-kv #(conj %1 %3 sep) [] seqs)))", "user": "5d6bff25e4b04d129b00f2ab"}, {"problem": 40, "code": "(  fn [x coll] ( take ( - ( * ( count coll) 2 ) 1) ( mapcat #( list % x ) coll )))", "user": "5ddbd202e4b0948ae9d9adb4"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5df54584e4b03c219ef1a38f"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat (count %2) %)))", "user": "5ddb8a6ee4b0948ae9d9adb2"}, {"problem": 40, "code": "(fn [separator col]\n  (butlast (interleave col (repeat separator))))", "user": "5ddfd88be4b0948ae9d9ade1"}, {"problem": 40, "code": "#(drop-last (apply concat (for [x %2] [x %1])))", "user": "5dc53ddee4b02f9375f4e1bd"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5da07d10e4b000c986472bd5"}, {"problem": 40, "code": "(fn [el col]\n   (->> (repeat (count col) el)\n        (mapcat list col)\n        (drop-last)))", "user": "5db98f39e4b010eb3c36cd53"}, {"problem": 40, "code": "(fn interp [val1 seq2] \n             (reverse(rest(reverse(reduce \n                                     (fn[xs x](concat xs (cons x (cons val1 '()))))\n                                     '() seq2)))))", "user": "5df0c6ffe4b093ff717275c2"}, {"problem": 40, "code": "(fn [s [h & t]] (reduce #(conj %1 s %2)\n                        [h]\n                        t))", "user": "5dfb2e2ae4b0a607a9a45cd6"}, {"problem": 40, "code": ";;#(rest (mapcat #(list %1 %2) %2)\n(fn [a b] (rest (mapcat #(list a %) b)))", "user": "5dfa1c67e4b0a607a9a45cc5"}, {"problem": 40, "code": "(fn [i s] (butlast (mapcat #(take 2 (cycle [% i])) s)))", "user": "5dfc457de4b0a607a9a45cea"}, {"problem": 40, "code": "(fn [e c] (butlast (mapcat #(vector % e) c)))", "user": "514992d2e4b0b64cbeae1848"}, {"problem": 40, "code": "#(loop [A (rest %2) coll (list (first %2))]\n  (if (empty? A)\n    (reverse coll)\n    (recur (rest A)\n           (conj coll %1 (first A)))))", "user": "5d98f616e4b0d3f9b434ad3c"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "5dfb20b8e4b0a607a9a45cd3"}, {"problem": 40, "code": "(fn [single s] (butlast (interleave s (repeat (count s) single))))", "user": "5bfc9037e4b0bdcf453d15f2"}, {"problem": 40, "code": "(fn [x coll] (drop-last (mapcat (fn [n] [n x]) coll)))", "user": "5d89427ae4b0915913b1d3b5"}, {"problem": 40, "code": "(fn [i xs]\n   (drop-last\n     (mapcat #(into [] [% i]) xs)))", "user": "57fc5e42e4b0d3187e900997"}, {"problem": 40, "code": "(fn [sep coll]\n   (drop 1 (interleave (repeat sep) coll)))", "user": "5073e7fde4b054001656accb"}, {"problem": 40, "code": "(fn [x coll]\n  (loop [col coll\n         result []]\n    (if (= 1 (count col))\n      (conj result (first col))\n      (recur (rest col)\n             (conj result\n                   (first col)\n                   x)))))", "user": "5c38422ae4b0d62ef62d9f7f"}, {"problem": 40, "code": "(fn [value coll]\n  (loop [[elem & coll] coll interposed []]\n    (if (empty? coll)\n      (conj interposed elem)\n      (recur coll (conj interposed elem value))\n    )\n  )\n)", "user": "5e09fd26e4b099d064962f60"}, {"problem": 40, "code": "#(rest (mapcat list (repeat (count %2) %1) %2))", "user": "5e03a15be4b0a607a9a45d5e"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5e0a6916e4b099d064962f65"}, {"problem": 40, "code": "(fn [r s] (into [] (drop-last (interleave s (repeat r)))))", "user": "5dcd7933e4b0b296f82db5ae"}, {"problem": 40, "code": "(fn [v col]\n  (drop-last (flatten (into [] (for [x col] [x v]))))\n  )", "user": "5e078ba7e4b0978307768fb6"}, {"problem": 40, "code": "(fn [sep coll] (drop-last (mapcat #(vector % sep) coll)))", "user": "5e0d948fe4b099d064962f98"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5e00b6e7e4b0a607a9a45d2b"}, {"problem": 40, "code": "(fn mapped\n  [dividator items]\n  (drop-last (flatten (map (fn [x]\n                             [x dividator]) items))))", "user": "5df0f338e4b093ff717275c6"}, {"problem": 40, "code": "(fn  [a b] (loop [bs (rest b) acc [(first b)]] (if (empty? bs) acc (recur (rest bs) (into acc [a (first bs)])))))", "user": "510528a0e4b0730a5f55ad85"}, {"problem": 40, "code": "(fn [delim xs] (conj (mapcat #(conj [delim] %) (rest xs)) (first xs)))", "user": "5d91acb8e4b0915913b1d406"}, {"problem": 40, "code": "#(butlast (mapcat (fn [x y] (conj '() y x)) %2 (repeat %)))", "user": "5e0e836fe4b099d064962fa8"}, {"problem": 40, "code": "(fn [a b] (into (list (last b)) (reverse (mapcat #(list % a) (pop b)))))", "user": "5e08c3dde4b0978307768fc8"}, {"problem": 40, "code": "#(rest (mapcat list (repeat %1) %2))", "user": "5dde6251e4b0948ae9d9add3"}, {"problem": 40, "code": "#(vec (rest (mapcat vector (map (constantly %1) %2) %2)))", "user": "5e121a89e4b099d064962fe4"}, {"problem": 40, "code": "(fn inter \n   ([el coll]\n        (inter el coll 0 '()))\n   ([el coll c out]\n        (println el coll c out)\n        (if (empty? coll)\n          (reverse out)\n          (if (= c 0)\n            (inter el (rest coll) 1 (cons (first coll) out))\n            (inter el coll 0 (cons el out)))))\n   )", "user": "5df75fd8e4b0a607a9a45c92"}, {"problem": 40, "code": "(fn [the-val the-coll]\n  (loop [input the-coll output []]\n    (if (seq (rest input))\n      (recur (vec (rest input)) (conj output (first input) the-val))\n      (conj output (first input)))))", "user": "5d6eaa58e4b04d129b00f2cd"}, {"problem": 40, "code": "#(next (interleave (repeat %) %2))", "user": "5df79420e4b0a607a9a45c9a"}, {"problem": 40, "code": "(fn my-interpose\n  [item coll]\n   (if (= (count coll) 1)\n     coll\n     (cons (first coll) (cons item (my-interpose item (rest coll))))))", "user": "5e157910e4b0a047bd49f701"}, {"problem": 40, "code": "(fn [x s]\n  (rest (mapcat #(vector x %1) s) ))", "user": "5e14d842e4b0a047bd49f6f5"}, {"problem": 40, "code": "(fn [v col] (butlast (mapcat #(vector % v) col)))", "user": "5e01addee4b0a607a9a45d3f"}, {"problem": 40, "code": "#(reduce (fn [out item] (conj out %1 item)) [(first %2)] (rest %2))", "user": "5e144bd5e4b0a047bd49f6e7"}, {"problem": 40, "code": "(fn [el coll] (butlast (reduce #(conj %1 %2 el) [] coll)))", "user": "5e14e396e4b0a047bd49f6f7"}, {"problem": 40, "code": "(fn [e coll] (butlast (mapcat #(vector % e) coll)))", "user": "5e17bb46e4b00200644e3d5a"}, {"problem": 40, "code": "#(butlast (reduce (fn [col x] \n                    (concat col [x %1])) \n                  [] \n                  %2))", "user": "5e17509fe4b00200644e3d52"}, {"problem": 40, "code": "#(into [] (butlast (mapcat vector %2 (repeat %1))))", "user": "4f24c859e4b0d66497709fef"}, {"problem": 40, "code": "(fn [x coll] (drop-last (reduce (fn [a b] (conj a b x)) [] coll)))", "user": "5e04ce34e4b0a607a9a45d71"}, {"problem": 40, "code": "(fn [x l]\n  (loop [x x l l r ()]\n    (if (empty? l)\n      (rest (reverse r))\n      (recur x (rest l) (list* (first l) x r)))))", "user": "5e178fbee4b00200644e3d57"}, {"problem": 40, "code": "#(let [dirty-coll (into [] (flatten (map (comp reverse  (partial list %1)) %2)))] (take (- (count dirty-coll) 1) dirty-coll))", "user": "5e1a3989e4b0dc9594008511"}, {"problem": 40, "code": "(fn [d s]\n  (butlast (reduce (fn [out elem] (conj out elem d)) [] s)))", "user": "5a904de3e4b05369db4d254c"}, {"problem": 40, "code": "(fn ipose\n  [val seq]\n  (let [n (count seq)]\n  (cond\n    (= n 0)   []\n    (= n 1)   (cons (first seq) [])\n    :else (cons (first seq) (cons val (ipose val (rest seq)))))))", "user": "5e16006be4b0a047bd49f711"}, {"problem": 40, "code": "#(butlast (mapcat (fn [x] (list x %1)) %2))", "user": "5e0cbc14e4b099d064962f8e"}, {"problem": 40, "code": "(fn [x coll]\n   (reduce #(conj %1 x %2)\n           (vector (first coll)) (rest coll)))", "user": "5e16fd78e4b0a047bd49f726"}, {"problem": 40, "code": "(fn [separator seq] (loop [suffix (rest seq) separated [(first seq)]] (if (empty? suffix) separated (recur (rest suffix) (conj separated separator (first suffix))))))", "user": "5e1cc888e4b0dc959400853d"}, {"problem": 40, "code": "(fn\n  [N col]\n  (butlast (apply concat (map #(vector % N) col))))", "user": "5e1c3e6ee4b0dc9594008530"}, {"problem": 40, "code": "(fn zip [b a]\n\t\t(cond\n\t\t\t(nil? b) nil\n\t\t\t(nil? (first a)) nil\n\t\t\t(nil? (second a)) a\n\t\t\t:else\n\t\t\t (concat\n\t\t\t \t(list \n\t\t\t \t\t(first a)\n\t\t\t \t\t b)\n\t\t\t \t(zip b (rest a))\n\t\t\t )\n\t\t)\n\t)", "user": "5e1d01b5e4b0dc9594008542"}, {"problem": 40, "code": "(fn divider [delimit sq]\n  (if (= 1 (count sq))\n    sq\n    (cons (first sq) (cons delimit (divider delimit (rest sq))))))", "user": "5e18c885e4b0dc95940084fc"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5d929ceae4b0915913b1d412"}, {"problem": 40, "code": "#(reverse (rest (reverse (mapcat (fn [x] (list x %1)) %2))))", "user": "5e21c933e4b05b4b01516128"}, {"problem": 40, "code": "(fn [sy sq] (pop (vec (interleave sq (repeat (count sq) sy)))))", "user": "5e2549c8e4b05b4b0151615f"}, {"problem": 40, "code": "(fn [x y]\n  (loop [r (list (first y))\n         rst (rest y)]\n    (if (= rst '())\n      r\n      (recur (concat r [x (first rst)]) (rest rst))\n     )\n   )\n )", "user": "5e265173e4b05b4b01516175"}, {"problem": 40, "code": ";(fn [x xs] (mapcat #(do [% x]) xs))\n;(fn [ys] (take (- (count ys) 1) ys))\n\n(fn [x xs]  (let [\n                  f (fn [x xs] (mapcat #(do [% x]) xs))\n                  ]\n              (drop-last (f x xs))))", "user": "5e1754abe4b00200644e3d53"}, {"problem": 40, "code": "(fn \n        [j sequ]\n        ; (repeat (count sequ) j)\n        \n         (pop (into [] (flatten (map vector sequ (repeat (count sequ) j ) ))))\n    )", "user": "5e23ca7fe4b05b4b01516144"}, {"problem": 40, "code": "(fn [a s] (drop-last (vec (mapcat (fn [q] (vector q a)) s))))", "user": "5e21f944e4b05b4b0151612d"}, {"problem": 40, "code": "(fn [sep xs] (reduce (fn [acc x] (conj (conj acc sep) x)) [(first xs)] (rest xs)))", "user": "5e18bd30e4b0dc95940084fa"}, {"problem": 40, "code": "(fn [a col] (rest (mapcat #(vector a %) col)))", "user": "5e246f92e4b05b4b01516150"}, {"problem": 40, "code": "(fn [v coll]\n  (butlast (mapcat #(list % v) coll)))", "user": "5e357507e4b0650de70e2b2a"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "5e257a33e4b05b4b01516166"}, {"problem": 40, "code": "(fn [sep ls]\n      (apply vector (rest (mapcat #(list sep %) ls))))", "user": "5e38a9cbe4b01d43a70e8dc2"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5e3933c5e4b01d43a70e8dcc"}, {"problem": 40, "code": "(fn [v xs]\n  (drop 1 (interleave (repeat v) xs)))", "user": "5e394c33e4b01d43a70e8dd1"}, {"problem": 40, "code": "#(flatten (reduce (fn t [a b] [a %1 b]) %2))", "user": "5e380e72e4b01d43a70e8db0"}, {"problem": 40, "code": "#(drop-last\n  (mapcat \n   (fn [x]\n    (vector x %1))\n  %2))", "user": "5e3a25d4e4b01d43a70e8dde"}, {"problem": 40, "code": "(fn [sep coll]\n   (reduce #(conj %1 sep %2) [(first coll)] (rest coll)))", "user": "5e3a8929e4b01d43a70e8de3"}, {"problem": 40, "code": "(fn [aVal aColl]\n  (loop [resSeq []\n         targetSeq aColl]\n    (if (nil? (first targetSeq))\n      resSeq\n      (if (= (mod (count resSeq) 2) 0)\n        (recur (conj resSeq (first targetSeq)) (next targetSeq))\n        (recur (conj resSeq aVal) targetSeq)\n      )\n    )\n  )\n)", "user": "5cf7215ce4b0b71b1d808a67"}, {"problem": 40, "code": "(fn [is_ch input_vec]\n  (butlast (reduce (fn [acc value]\n            (conj acc value is_ch))\n          [] input_vec)))", "user": "5e392de0e4b01d43a70e8dcb"}, {"problem": 40, "code": "(fn [x ys]  (butlast (flatten (map #(conj '() x %) ys))))", "user": "5e3f291ae4b01d43a70e8e33"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5e3e23d9e4b01d43a70e8e20"}, {"problem": 40, "code": "(fn\n  [x c]\n  (drop-last (interleave c (repeat x))))", "user": "5c9a638fe4b048ec896c5aae"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last\n  (reduce (fn [acc v]\n            (concat acc [v sep]))\n          []\n          coll)))", "user": "52b52c29e4b0c58976d9ad38"}, {"problem": 40, "code": "(fn [x y] (drop-last 1 (mapcat #(list % x) y)))", "user": "5e259d05e4b05b4b01516169"}, {"problem": 40, "code": "(fn [d l]\n   (loop [s (rest l)\n          r (list (first l))]\n     (if (empty? s)\n       (reverse r)\n       (let [[h & t] s] (recur t (cons h (cons d r)))))))", "user": "5e3ef7d4e4b01d43a70e8e2d"}, {"problem": 40, "code": "(fn [x y] (rest (interleave (repeat (count y) x) y)))", "user": "5e12b21be4b099d064962feb"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5e41b679e4b01d43a70e8e58"}, {"problem": 40, "code": "(fn my-interpose [x xs]\n  (if (<= (count xs) 1) xs\n      (cons (first xs) (cons x (my-interpose x (rest xs))))))", "user": "5e3e0b3fe4b01d43a70e8e1e"}, {"problem": 40, "code": "#(drop-last 1 (mapcat list %2 (take (count %2) (repeat %1))))", "user": "5e348945e4b0650de70e2b1d"}, {"problem": 40, "code": "(fn\n   [fixed coll]\n   (loop [items coll\n          result []]\n     (if (seq items)\n       (recur (rest items) (conj result (first items) fixed))\n       (drop-last result))))", "user": "5e47e1eee4b043cd24807a35"}, {"problem": 40, "code": "(fn answer [separator list]\n  (->> list\n       (mapcat #(cons % [separator]))\n       (drop-last 1))\n\n  )", "user": "5e491182e4b043cd24807a46"}, {"problem": 40, "code": "(fn u [s arr]\n  (loop [x arr res []]\n    (if (empty? x) (drop-last res)\n      (recur (next x) (conj res (first x) s)))))", "user": "5e42b688e4b01d43a70e8e6b"}, {"problem": 40, "code": "#(take (- (* 2 (count %2)) 1) (interleave %2 (take (count %2) (repeat %1))))", "user": "5e4b919ce4b0889a8790a556"}, {"problem": 40, "code": "(fn [a arr]\n    (let [n (count arr)]\n      (drop-last (flatten (map vector arr (repeat n a))))))", "user": "5e2586afe4b05b4b01516167"}, {"problem": 40, "code": "(fn my-interpose [x coll]\n  (if (= 1 (count coll))\n    coll\n    (concat\n     (list (first coll) x)\n     (my-interpose\n      x\n      (rest coll)))))", "user": "5e471203e4b043cd24807a2a"}, {"problem": 40, "code": "(fn [sep col]\n   (butlast (mapcat #(vector %1 sep) col))\n   )", "user": "5e44c804e4b01d43a70e8e89"}, {"problem": 40, "code": "#_(fn interpos [x xs]\n    (if (seq (rest xs))\n      (conj (interpos x (rest xs)) x (first xs))\n      xs))\n\n(fn interpos [x xs]\n  (rest (mapcat #(vector x %) xs)))", "user": "505223fae4b0a561d07d8f17"}, {"problem": 40, "code": "(fn\n  [sep lst]\n  (vec (drop 1 (interleave (repeat sep) lst))))", "user": "5d125605e4b02c15ef021998"}, {"problem": 40, "code": "(fn [x y] (reverse (rest (reduce (fn [acc val] (conj (conj acc val) x)) () y))))", "user": "5e5349ebe4b027a2e10ac0e2"}, {"problem": 40, "code": "(fn [k x]\n  (loop [l [] z x]\n    (if (empty? (rest z))\n      (conj l (first z))\n      (recur (conj l (first z) k) (rest z)))))", "user": "5dd70ee3e4b0948ae9d9ad85"}, {"problem": 40, "code": "(fn interpose* [sep coll]\n    (butlast (interleave coll (repeat (count coll) sep)))\n    )", "user": "5d078e2de4b0cc9c915881fa"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "54be7c0de4b0ed20f4ff6eec"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5ddd6cfae4b0948ae9d9adc4"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5e5b8d92e4b0fd0acd158658"}, {"problem": 40, "code": "#(take (- (* 2 (count %2)) 1) (mapcat vector %2 (iterate identity %1)))", "user": "5dc85f8ae4b02f9375f4e1da"}, {"problem": 40, "code": "(fn [delim s]\n  (loop [result []\n         xs s]\n    (if (empty? (rest xs))\n      (conj result (first xs))\n      (recur (conj result (first xs) delim) (rest xs)))))", "user": "5dcc152ae4b02b31cc3da3c3"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %)))", "user": "5e5c425ae4b0fd0acd158662"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5e563c88e4b027a2e10ac0f6"}, {"problem": 40, "code": "#(drop-last (flatten (for [x %2] \n                        (conj '() %1 x))))", "user": "5e453725e4b01d43a70e8e93"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5e5809bbe4b027a2e10ac104"}, {"problem": 40, "code": "(fn [separ sequen] \n  (into [] (apply concat (map-indexed #(if (= % (- (count sequen) 1)) [%2] [%2 separ]) sequen))))", "user": "5e054752e4b0a607a9a45d78"}, {"problem": 40, "code": "#(drop-last (mapcat (fn[x](list x %1)) %2))", "user": "5e48ec09e4b043cd24807a45"}, {"problem": 40, "code": "(fn [n coll] (butlast (mapcat #(vector % n) coll)))", "user": "5e5fd7afe4b0fd0acd158680"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5e5f8a07e4b0fd0acd15867c"}, {"problem": 40, "code": "(fn [value coll]\n   (drop-last (mapcat vector coll (repeat value)))\n   \n    )", "user": "5e62444fe4b0fd0acd158694"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "5df70ee8e4b0a607a9a45c8a"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat (count %2) %1)))", "user": "54b51366e4b05787c3b16398"}, {"problem": 40, "code": "(fn [a b] (reduce #(\n          concat %1 (vector a) [%2]\n          ) (vector (first b))\n        (rest b)))", "user": "5e31a4b0e4b05b4b0151622b"}, {"problem": 40, "code": "(fn\n    [split, lst]\n  (let [[x & xs] lst]\n    (cons x (reduce (fn [out, each] (conj out split each)) [] xs))))", "user": "5e65bfe4e4b0fd0acd1586b9"}, {"problem": 40, "code": "#(rest (mapcat (fn [x] [% x]) %2))", "user": "5e66c144e4b0e171e1033683"}, {"problem": 40, "code": "(fn [value mSeq]\n  (rest ((fn hi [value mSeq] \n  \t\t\t(cond (empty? mSeq) '()\n        \t:else (cons value (cons (first mSeq) (hi value (rest mSeq)) ) ) )) value mSeq)))", "user": "5e663073e4b0fd0acd1586bc"}, {"problem": 40, "code": "(fn [sep, items] (rest (mapcat #(list sep %) items)))", "user": "5e692be9e4b04a83ad7cd269"}, {"problem": 40, "code": "#(reduce (fn [a b] (merge a % b)) [(first %2)] (rest %2))", "user": "5e63ffa0e4b0fd0acd1586a6"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5e5096c6e4b027a2e10ac0c6"}, {"problem": 40, "code": "(fn intrp [v s]\n  (butlast (mapcat list s (iterate identity v))))", "user": "5d28d935e4b092dab7f59c88"}, {"problem": 40, "code": "(fn [sep coll]\n     (loop [coll coll\n            coll_acc []] \n       (cond (empty? coll) coll_acc\n             (empty? (rest coll)) (concat coll_acc (list (first coll)))\n             :else\n             (recur (rest coll) (concat coll_acc (list (first coll) sep))))))", "user": "5e724492e4b085ba37836dc7"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5e639b4be4b0fd0acd1586a2"}, {"problem": 40, "code": "(fn [v s]\n  (reduce (fn [l x] (if (nil? l) (list x) (concat l (list v x)))) nil s)\n  )", "user": "5e6e6537e4b04a83ad7cd29a"}, {"problem": 40, "code": "(fn [sep coll]\n  (loop [coll coll, res []]\n    (if (seq coll)\n      (if (= 1 (count coll))\n        (conj res (first coll))\n        (recur (rest coll) (conj (conj res (first coll)) sep)))\n        \n             \n      res)))", "user": "5e76274ce4b085ba37836deb"}, {"problem": 40, "code": "#(-> %2 (interleave (repeat %)) butlast)", "user": "5bb36a9ce4b0a20761a23523"}, {"problem": 40, "code": "#(loop [s %2 r []]\n   (if (empty? s)\n   r\n   (if (= 1 (count s))\n     (recur (rest s) (conj r (first s)))\n     (recur (rest s) (conj r (first s) %1)))))", "user": "5e2ead6ae4b05b4b015161f5"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5e7df614e4b085ba37836e32"}, {"problem": 40, "code": "(fn pose [item lst]\n  (loop [lst lst\n         acc '()]\n    (cond\n      (empty? lst) acc\n      (= (list (last lst)) lst) (recur '() (concat acc lst))\n      :else (recur (rest lst) (concat acc (list (first lst) item))))))", "user": "53528cd3e4b084c2834f4af2"}, {"problem": 40, "code": "(fn [s se] (drop-last (interleave se (seq (repeat (count se) s)))))", "user": "59bdeb22e4b0a024fb6ae42d"}, {"problem": 40, "code": "#(rest (mapcat list (repeat (count %2) %1) %2))", "user": "5e7aba9fe4b085ba37836e0c"}, {"problem": 40, "code": "#(drop-last (mapcat list %2 (repeat %1)))", "user": "5e6ca949e4b04a83ad7cd289"}, {"problem": 40, "code": "(fn [v arr]\n  (loop [[f & r] arr result []]\n    (if (= f nil)\n      result\n      (recur r (if (= r nil) (conj result f) (conj result f v))))))", "user": "5e7f62cce4b085ba37836e3b"}, {"problem": 40, "code": "(fn [k coll]\n     (butlast (mapcat #(list % k) coll)))", "user": "5e7b1ef4e4b085ba37836e10"}, {"problem": 40, "code": "(fn [sep col] (drop-last (interleave col (repeat (count col) sep))))", "user": "5e486cb0e4b043cd24807a3e"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "5e860270e4b09a7a73c8bbdb"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "4eb70649535d7eef30807373"}, {"problem": 40, "code": "#(vec (drop-last (interleave %2 (repeat %1))))", "user": "5e13a6b7e4b099d064963001"}, {"problem": 40, "code": "(fn [x coll]\n              (->> (mapcat (fn [y] [y x]) coll)\n                   butlast))", "user": "5e856736e4b09a7a73c8bbd2"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last\n   (mapcat #(conj [] % sep) coll)))", "user": "5e85b853e4b09a7a73c8bbd5"}, {"problem": 40, "code": "#(drop-last (interleave %2 (take (count %2) (repeat %1))))", "user": "5e7dc2d8e4b085ba37836e2f"}, {"problem": 40, "code": "#(rest (flatten (for [x %2] [% x])))", "user": "5e8ce2fee4b0cb0169546328"}, {"problem": 40, "code": "(fn func [sep coll]\n  (butlast (mapcat (fn [x] [x sep]) coll)))", "user": "5e805895e4b085ba37836e44"}, {"problem": 40, "code": "#(loop [sq %2 intp []]\n   (if (empty? sq)\n     (butlast intp)\n     (recur (rest sq) (conj intp (first sq) %1))\n  )\n)", "user": "5e947a69e4b0fbed045a37f8"}, {"problem": 40, "code": "(fn [x ys ]\n  (rest (mapcat (partial vector x) ys)))", "user": "5dc88a38e4b02f9375f4e1db"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5e954b9ee4b0fbed045a3809"}, {"problem": 40, "code": "(fn interposealt\n  [value arr]\n  (loop [bool false\n         lst arr\n         result []]\n    (if (empty? lst)\n      result\n      (if bool\n        (recur false lst (conj result value))\n        (recur true (rest lst) (conj result (first lst)))))))", "user": "5e9636fee4b0fbed045a3816"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5be9ad9be4b0f319e2d7ec76"}, {"problem": 40, "code": "(fn[n s] (butlast (mapcat #(vector % n) s)))", "user": "5e980e6be4b0157ca96647d6"}, {"problem": 40, "code": "(fn [v coll] \n  (butlast (mapcat #(vector % v) coll)))", "user": "5e99cbd4e4b0157ca96647e6"}, {"problem": 40, "code": "#(loop [l %2 a ()]                                                                                                   \n    \t\t(if (empty? (rest l))                                                                                         \n                (concat a (take 1 l))                                                                                     \n                (recur (rest l) (concat a (take 1 l) (list %1)))))", "user": "5e96c662e4b0157ca96647ca"}, {"problem": 40, "code": "(fn ip [v xs]\n  (if (= (count xs) 1)\n    xs\n    (cons (first xs) (cons v (ip v (rest xs))))))", "user": "5e98e8a9e4b0157ca96647dc"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5df79c31e4b0a607a9a45c9b"}, {"problem": 40, "code": "#(concat (interleave (drop-last %2) (repeat %1)) [(last %2)])", "user": "5e976fa8e4b0157ca96647cf"}, {"problem": 40, "code": "(fn [a b] (butlast (into '[] (flatten (map #(vec [% a]) b)))))", "user": "5e996e76e4b0157ca96647e4"}, {"problem": 40, "code": "(fn [x lst]\n    (loop[res '() l lst]\n      (if (empty? l) (reverse (rest res))\n        (recur (conj res (first l) x) (rest l) )\n      \n      )\n    )\n  )", "user": "5e94ff5fe4b0fbed045a37ff"}, {"problem": 40, "code": "(fn\n  [x x1] \n  (rest (mapcat #(vector x %1) x1) ))", "user": "5e9771dee4b0157ca96647d0"}, {"problem": 40, "code": "(fn inter [a lat]\n  (let [[x & xs] lat]\n    (if (empty? xs) (list x)\n        (cons x (cons a (inter a xs))))))", "user": "5e978fe5e4b0157ca96647d1"}, {"problem": 40, "code": "(fn [x y] (drop-last (mapcat list y (repeat x)) ))", "user": "5e9e8648e4b00a66d4a95178"}, {"problem": 40, "code": "(fn [item coll]\n  (conj (reduce (fn [acc element]\n            (conj acc element item))\n          []\n          (butlast coll)) (last coll))\n  )", "user": "5e84b48ee4b09a7a73c8bbc8"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5e9e408fe4b00a66d4a95172"}, {"problem": 40, "code": "(fn interSeq\n  [n lst]\n  (let [[x & xs] lst]\n    (if (empty? xs) (list x)\n        (cons x (cons n (interSeq n xs))))))", "user": "5e95013fe4b0fbed045a3800"}, {"problem": 40, "code": "(fn [x coll] \n  (butlast \n   (mapcat #(vector % x) coll)))", "user": "5e9d1c75e4b0157ca9664801"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5ea21034e4b00a66d4a95191"}, {"problem": 40, "code": "#(\n  loop [x 0, res []]\n  (if (< x (- (count %2) 1)) (recur (inc x) (conj res (%2 x) %1)) (conj res (%2 x)))\n  )", "user": "5e85d0bde4b09a7a73c8bbd6"}, {"problem": 40, "code": "(fn [x lst]\n  (loop [result (list (first lst))\n        lst (rest lst)]\n   (if (empty? lst)\n     result\n     (recur\n      (concat result (list x) (list (first lst)))\n      (rest lst)))))", "user": "5e950178e4b0fbed045a3801"}, {"problem": 40, "code": "(fn [delim coll] \n   (rest (reduce #(conj %1 delim %2) [] coll)))", "user": "5e950310e4b0fbed045a3802"}, {"problem": 40, "code": "(fn [mid-val lst] (loop [lst lst\n                          elem (first lst)\n                          intlst []]\n                     (if (= 1 (count lst))\n                       (conj intlst elem)\n                       (recur (rest lst)\n                              (first (rest lst))\n                              (conj intlst elem mid-val)))))", "user": "5e9878b9e4b0157ca96647d8"}, {"problem": 40, "code": "(fn interposeSeq\n  [n lst]\n  (let [[x & xs] lst]\n    (if (empty? xs) (list x)\n        (cons x (cons n (interposeSeq n xs))))))", "user": "5ea3711ae4b00a66d4a9519d"}, {"problem": 40, "code": "(fn [sep coll]\n  (loop [coll coll, res []]\n    (if (empty? (rest coll))\n      (conj res (first coll))\n      (recur (rest coll) (conj res (first coll) sep)))))", "user": "5e9f38cce4b00a66d4a9517e"}, {"problem": 40, "code": "#(next (interleave (repeat %1) %2))", "user": "5df08767e4b093ff717275bf"}, {"problem": 40, "code": "#(drop-last (mapcat list %2 (repeat (count %2) %1)))", "user": "5ea444b7e4b00a66d4a951a0"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5ea6f88de4b00a66d4a951b1"}, {"problem": 40, "code": "(fn solution [interpost sequen]\n  (drop-last (mapcat #(list %1 interpost) sequen)))", "user": "5e2ef900e4b05b4b015161fc"}, {"problem": 40, "code": "(fn [x s] \n  (rest (mapcat #(vector x %1) s) ))", "user": "5ea7b04de4b00a66d4a951b6"}, {"problem": 40, "code": "(fn my-int [v s]\n  (drop-last (flatten (map #(concat (list %) (list v)) s))))", "user": "5e218bb7e4b05b4b01516123"}, {"problem": 40, "code": "(fn [v s] (drop-last (vec (interleave s (repeat v)))))", "user": "5c9adfebe4b048ec896c5ab9"}, {"problem": 40, "code": "(fn [in s1]\n  (loop \n    [acc '()\n     z1 s1]\n    \n    (if (empty? z1)\n      (butlast acc)\n      (recur (concat acc (list (first z1) in)) (rest z1))\n    )\n  )\n)", "user": "5ea97df7e4b00a66d4a951c8"}, {"problem": 40, "code": "#(reduce (fn [acc x] (conj acc % x)) [(first %2) ] (rest %2))", "user": "5e9b7aefe4b0157ca96647f1"}, {"problem": 40, "code": "#(rest\n  (interleave\n   (repeat %1)\n   %2))", "user": "5e64ae6ce4b0fd0acd1586ac"}, {"problem": 40, "code": "#(vec (drop-last (reduce (fn [x y] (conj x y %1)) [] %2)))", "user": "5b2be9b1e4b025bcb146f2b0"}, {"problem": 40, "code": "(fn [t l]\n  (butlast (reduce (fn [acc x] (conj acc x t)) [] l)))", "user": "5eb1c786e4b00a66d4a95201"}, {"problem": 40, "code": "(fn k-interpose [x s2]\n  (let [s1 (repeat (count s2) x)]\n  (apply vector (drop-last (apply concat\n    (map #(list %1 %2) s2 s1))))));", "user": "5e0f9884e4b099d064962fc0"}, {"problem": 40, "code": "(fn [sep coll]\n    (reduce (fn [a v]\n          (if (empty? a)\n            (conj a v)\n            (conj (conj a sep) v)))\n        []\n        coll))", "user": "5eb1e42ae4b00a66d4a95202"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop-last (reduce (fn [result item]\n            (conj result item sep))\n          [] coll)))", "user": "5eb1a80ce4b00a66d4a951ff"}, {"problem": 40, "code": "(fn [sep arr]\n    (drop-last (reduce #(conj (conj %1 %2) sep) [] arr)))", "user": "5eb4927fe4b00a66d4a95221"}, {"problem": 40, "code": "(fn [x coll]\n  (drop-last \n   (loop [s coll r []]\n     (if (empty? s)\n       r\n       (recur (rest s) (conj r (first s) x))))))", "user": "5e12327ee4b099d064962fe5"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %)))", "user": "5eb193fde4b00a66d4a951fe"}, {"problem": 40, "code": "(fn [v lst] (butlast (mapcat #(vector % v) lst)))", "user": "5ebb0f7be4b00a66d4a95261"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5eb5d9bbe4b00a66d4a9522e"}, {"problem": 40, "code": "#(rest (interleave (repeat %) %2))", "user": "5ebdb3d2e4b00a66d4a95275"}, {"problem": 40, "code": "(fn [x coll]\n   (butlast (mapcat vector coll (repeat (count coll) x)))\n  )", "user": "5ebc7c13e4b00a66d4a95267"}, {"problem": 40, "code": "(fn [x c]\n(drop 1 ( interleave (repeat x) c)))", "user": "5ebff55de4b00a66d4a95286"}, {"problem": 40, "code": "(fn [x col] (drop-last (mapcat #(vector % x) col)))", "user": "5ea970d1e4b00a66d4a951c6"}, {"problem": 40, "code": "(fn [f n]\n  (rest (interleave (cycle [f]) n)))", "user": "5ec21ef0e4b00a66d4a95299"}, {"problem": 40, "code": "(fn [n coll]\n  (drop 1 (interleave (repeat n) coll)))", "user": "5defc177e4b093ff717275af"}, {"problem": 40, "code": "(fn [sep col]\n  (drop-last\n   (mapcat #(identity [% sep]) col)))", "user": "5d13af73e4b0902706380dbe"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5ec3a13ae4b08d0ec38692b9"}, {"problem": 40, "code": "(fn [a s] (reduce (fn [s r] (conj (conj s a) r))\n                  [(first s)]\n                  (rest s)))", "user": "5e4beca9e4b0889a8790a560"}, {"problem": 40, "code": "(fn [x y] (rest (mapcat (fn [z] (list x z)) y)))", "user": "5ec66326e4b08d0ec38692d5"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5de12192e4b0948ae9d9aded"}, {"problem": 40, "code": "(fn [sep arr] (drop-last(flatten (map #(list %1 sep) arr))))", "user": "5ec82b11e4b08d0ec38692e6"}, {"problem": 40, "code": "(fn [v xs]\n  (reduce \n   (fn [acc x]\n     (conj acc v x))\n   [(first xs)]\n   (rest xs)))", "user": "5e0b6375e4b099d064962f7b"}, {"problem": 40, "code": "(fn  [v s]\n                (loop [srest (rest s)\n                       out [(first s)]]\n                  (if (empty? srest)\n                    out\n                    (recur (rest srest)\n                           (conj out v (first srest))))))", "user": "5eb22708e4b00a66d4a95204"}, {"problem": 40, "code": "(fn [sep data]\n  (butlast (mapcat #(vector %1 sep) data)))", "user": "5ec943fde4b08d0ec38692f1"}, {"problem": 40, "code": "#(rest (interleave (repeat (count %2) %1) %2))\n\n; Like this solutions\n;\n; #(butlast (interleave %2 (repeat %1)))\n; #(drop-last (interleave %2 (repeat %1)))", "user": "5eccc5c2e4b016b56eae058f"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (take (count %2) (cycle (list %1)))))", "user": "5e0828b9e4b0978307768fbe"}, {"problem": 40, "code": "#(pop (reduce (fn \n                [result element] \n                (into result [element %1]))\n              []\n              %2))", "user": "5ecf4ee4e4b016b56eae05a6"}, {"problem": 40, "code": "(fn [i x] (butlast (mapcat #(list % i) x)))", "user": "5ece3d25e4b016b56eae059b"}, {"problem": 40, "code": "(fn [sep coll](drop-last(mapcat #(conj [] % sep) coll)))", "user": "5ecf55dae4b016b56eae05a8"}, {"problem": 40, "code": "(fn [s xs]  (rest (mapcat list  (repeat s) xs )))", "user": "5e9154c1e4b0cb0169546354"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %1)))", "user": "5ecfd429e4b016b56eae05a9"}, {"problem": 40, "code": "#(rest (interleave (repeat (count %2) %1) %2))", "user": "5ec6de19e4b08d0ec38692da"}, {"problem": 40, "code": "(fn f [d s] (rest (mapcat #(vector d %1) s)))", "user": "5ed15e23e4b016b56eae05ba"}, {"problem": 40, "code": "(fn [v sq] (rest (mapcat #(list v %) sq)))", "user": "5ecc0831e4b016b56eae058c"}, {"problem": 40, "code": "(fn [sep coll]\n  (loop [remain (rest coll) result [(first coll)]]\n    (if (empty? remain)\n      result\n      (recur (rest remain) (conj result sep (first remain))))))", "user": "5e909685e4b0cb016954634d"}, {"problem": 40, "code": "(fn [delimiter xs]\n                     (loop [xs xs, acc []]\n                       (if (empty? (rest xs))\n                         (conj acc (first xs))\n                         (recur (rest xs) (conj acc (first xs) delimiter)))))", "user": "5eccbce6e4b016b56eae058e"}, {"problem": 40, "code": "(fn inter-pose [s xs] (if (empty? (rest xs)) xs (conj (inter-pose s (rest xs)) s (first xs))))", "user": "5ed4a4ade4b016b56eae05cd"}, {"problem": 40, "code": "(fn interpose-home-made [delim coll]\n  (let [last-index (dec (count coll))]\n    (reduce\n     #(if (<= last-index (/ (count %1) 2))\n        (conj %1 %2)\n        (conj %1 %2 delim))\n     []\n     coll)))", "user": "5ed52854e4b016b56eae05d2"}, {"problem": 40, "code": "(fn [x a] (rest (mapcat #(conj % x) (doall (partition-all 1 a)))))", "user": "5ed03b7fe4b016b56eae05ae"}, {"problem": 40, "code": "#(conj (vec (interleave %2 (repeat (dec (count %2)) %))) (last %2))", "user": "51412b0ae4b0694e2952b79d"}, {"problem": 40, "code": "(fn [value coll]\n  (butlast (reduce (fn [new-coll item]\n            (conj new-coll item value))\n          []\n          coll)))", "user": "5ed08785e4b016b56eae05b1"}, {"problem": 40, "code": "(fn f [v xs]               \n  (->> xs (map  #(list % v)) flatten butlast))", "user": "5e42ba49e4b01d43a70e8e6c"}, {"problem": 40, "code": "(fn [x coll] (drop-last (apply concat (map #(list %1 %2) coll (repeat x)))))", "user": "5ed9b912e4b0c7845d86b0e3"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "user": "5ed6030de4b016b56eae05db"}, {"problem": 40, "code": "(fn [i2 i1]\n   (butlast (mapcat vector i1 (repeat (count i1) i2))))", "user": "5ed4b1e8e4b016b56eae05ce"}, {"problem": 40, "code": "(fn interpose_val [d, s] (butlast (reduce #(conj %1 %2 d) [] s)))", "user": "5eac6a63e4b00a66d4a951e0"}, {"problem": 40, "code": "(fn fct [inter coll] ((comp reverse rest reverse)\n(#(mapcat (fn [x] (list x %1)) %2 )\n  inter coll))\n )\n;#(butlast (interleave %2 (repeat %1)))\n;#(rest (interleave (repeat %) %2))\n;#(rest (mapcat (fn [x] (list %1 x)) %2))", "user": "5ed30cb6e4b016b56eae05c2"}, {"problem": 40, "code": "(fn [v s] (rest (mapcat #(list v %1) s)))", "user": "5ec25800e4b00a66d4a9529b"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5ed8a12fe4b0c7845d86b0d7"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5ed9c2cde4b0c7845d86b0e4"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5edd6eb7e4b0c7845d86b0f7"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1))\n  drop-last)", "user": "5ebd7296e4b00a66d4a95273"}, {"problem": 40, "code": "(fn [a, b] (drop-last (mapcat vector b (repeat (count b) a))))", "user": "5ed4482be4b016b56eae05ca"}, {"problem": 40, "code": "(fn [sep col]\n  (loop [col col\n         result []]\n    (if (empty? col)\n      (reverse (next (reverse result)))\n      (recur (next col) (conj result (first col) sep)))))", "user": "565b371fe4b068f2fe63dbff"}, {"problem": 40, "code": "(fn [n li] (rest (mapcat #(list n %) li)))", "user": "5ec819b4e4b08d0ec38692e2"}, {"problem": 40, "code": "(fn [a b] (rest (mapcat (fn [x] [a x]) b)))", "user": "5c527129e4b0fb8c5ffd99de"}, {"problem": 40, "code": "(fn [a b] (apply concat (take 1 b) (map #(cons a [%]) (seq (rest b)))))", "user": "5644149de4b0018b46ad8c07"}, {"problem": 40, "code": "(fn [val lst]\n    (drop-last (flatten (map (fn [v] [v val]) lst)))\n  \n  )", "user": "53c73e8ae4b00fb29b2212a5"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5ed875abe4b016b56eae05f2"}, {"problem": 40, "code": ";(fn [s1 s2]\n;  (butlast (mapcat vector s2 (repeat s1))))\n(fn [s1 s2]\n  (butlast (interleave s2 (repeat s1))))", "user": "5edb07dde4b0c7845d86b0ed"}, {"problem": 40, "code": "(fn my-interpose [v l]\n  (if (empty? (rest l))\n    l\n    (conj (my-interpose v (rest l)) v (first l))))", "user": "5edfb1e5e4b0c7845d86b107"}, {"problem": 40, "code": "(fn [separator seq]\n              (reduce\n               (fn [result item]\n                 (conj result separator item))\n               [(first seq)]\n               (rest seq)))", "user": "5ee75f8be4b029a2061bbea5"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5eb6561fe4b00a66d4a95233"}, {"problem": 40, "code": "#(drop-last (apply concat (for [x %2] [x %1])))", "user": "5ee738dee4b029a2061bbea2"}, {"problem": 40, "code": "(fn interp [v s] (cond\n                      (empty? s) '()\n                      (empty? (rest s)) s\n                      :else (cons (first s) (cons v (interp v (rest s))))))", "user": "5ee93720e4b029a2061bbeb7"}, {"problem": 40, "code": "(fn myinterpose [a b]\n  (if (empty? (rest b))\n    b\n    (concat [(first b) a] (myinterpose a (rest b)))))", "user": "5ee81beae4b029a2061bbeac"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5e9e642ce4b00a66d4a95174"}, {"problem": 40, "code": "#(concat (interleave %2 (repeat (- (count %2) 1) %1)) (vector (last %2)))", "user": "5ed6c4ede4b016b56eae05e3"}, {"problem": 40, "code": "(fn [a b]\n\t(loop [x [] i 0]\n\t\t(if (>= i (* 1 (count b)))\n\t\t\t(pop x)\n\t\t\t(recur (conj x (get b i) a) (inc i)))))", "user": "5eea5ce7e4b029a2061bbec0"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "user": "5e9b6471e4b0157ca96647f0"}, {"problem": 40, "code": "(fn my-interpose \n  [sep coll]\n  (if (second coll)\n    (cons (first coll) (cons sep (lazy-seq (my-interpose sep (rest coll)))))\n    (cons (first coll) '())))", "user": "5eecd339e4b07c55ae4a0507"}, {"problem": 40, "code": "(fn [x s] (into (empty s) (rest (mapcat #(vector x %) s))))", "user": "5db35f85e4b010eb3c36cd22"}, {"problem": 40, "code": "(fn [x ary] (cons (first ary) (mapcat (fn [y] [x y]) (drop 1 ary) ) ))", "user": "5edc16e1e4b0c7845d86b0f1"}, {"problem": 40, "code": "(fn [j s] (butlast (mapcat #(vector % j) s)))", "user": "5eea5c98e4b029a2061bbebf"}, {"problem": 40, "code": "(fn inter [sep col]\n      (butlast (\n                 mapcat #(vector % sep) col\n                 )\n\n        ))", "user": "5eee9352e4b07c55ae4a0512"}, {"problem": 40, "code": "(fn [sep coll]\n  ((fn iter [[x & xs]]\n     (if (empty? xs)\n       (list x)\n       (cons x (cons sep (iter xs))))) coll))", "user": "5eee7311e4b07c55ae4a0510"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (take (count %2) (repeat %1))))", "user": "5ef5ee81e4b07c55ae4a054a"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5ec7d7f2e4b08d0ec38692e1"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat (count %2) %1)))", "user": "5ed70b97e4b016b56eae05e6"}, {"problem": 40, "code": "(fn [v xs] (drop-last (interleave xs (repeat (count xs) v))))", "user": "5eec1001e4b07c55ae4a0502"}, {"problem": 40, "code": "(fn intrsp [sep col]\n  (if (second col)\n    (concat [(first col) sep] (intrsp sep (rest col)))\n    [(first col)]))", "user": "576aea4fe4b0a07e8fc18126"}, {"problem": 40, "code": "(fn new-interpose\n  [i xs]\n  (drop-last (mapcat #(list %1 i) xs)))", "user": "5ef18431e4b07c55ae4a0529"}, {"problem": 40, "code": "(fn [sep coll]\n  \t(reduce (fn [acc item]\n              \t(if (empty? acc)\n                  \t(conj acc item)\n                  \t(conj acc sep item)))\n            []\n            coll))", "user": "5ef8e9e0e4b09b61f08553cb"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %)))", "user": "5eff339ae4b0cf489e8d7f0c"}, {"problem": 40, "code": "(fn ip [ij ls] \n  (reverse (reduce (fn [h t] (cons t (cons ij h))) (list (first ls)) (rest ls))))", "user": "5f016f37e4b0cf489e8d7f20"}, {"problem": 40, "code": "(fn inter_pose [sep coll]\n  (drop 1 (interleave (repeat sep) coll)))", "user": "5f03550ce4b0cf489e8d7f33"}, {"problem": 40, "code": "(fn [l v] (butlast(mapcat #(list % l) v)))", "user": "5eecf110e4b07c55ae4a050b"}, {"problem": 40, "code": "(fn interp [val coll]\n  (let [interl (fn [a b]\n     (lazy-seq (loop [r1 a r2 b out []]\n                 (if (or (empty? r1) (empty? r2))\n                   out\n                   (recur (rest r1) (rest r2) (conj out (first r1) (first r2)))))))]\n    (drop 1 (interl (repeat val) coll))))", "user": "5f012a2ee4b0cf489e8d7f1e"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5f0890ffe4b0cf489e8d7f61"}, {"problem": 40, "code": "(fn myinterpose\n  [i coll]\n  (loop [i i coll coll res []]\n    (if (empty? coll)\n      res\n      (if (= (count coll) 1)\n        (recur i (rest coll) (conj res (first coll)))\n        (recur i (rest coll) (conj (conj res (first coll)) i))))))", "user": "5f088bb3e4b0cf489e8d7f5f"}, {"problem": 40, "code": "(fn [x s] \n  (rest (mapcat #(vector x %1) s) ))", "user": "5a09ebf8e4b0eab8c0448932"}, {"problem": 40, "code": "#(flatten (map\n       (fn [el]\n         (if (= el (last %2))\n           el\n           [el %1])) %2))", "user": "5f0a4904e4b09a3f05b71805"}, {"problem": 40, "code": "(fn [i s] (cons (first s) (reduce #(conj %1 i %2) [] (rest s))))", "user": "5f02f365e4b0cf489e8d7f2c"}, {"problem": 40, "code": "(fn [c v]\n   (loop [v v\n          nv []]\n     (if (empty? v)\n       (pop nv)\n       (recur (rest v) (conj nv (first v) c)))))", "user": "5e7bb000e4b085ba37836e1d"}, {"problem": 40, "code": "(fn [separator seq]\n  (butlast (reduce (fn [acc ele]\n            (conj acc ele separator)) \n          [] \n          seq)))", "user": "5ef381a3e4b07c55ae4a053c"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "57e070fde4b0bd073c202478"}, {"problem": 40, "code": "(fn [sep coll] \n   (drop-last 1 (reduce \n                  (fn [arr elem]\n                    (conj arr elem sep))\n                  []\n                  coll)))", "user": "58ed2e21e4b056aecfd47d7a"}, {"problem": 40, "code": "(fn fun [x coll]\n  (loop [old coll\n         new []]\n    (if (= (count old) 1)\n      (flatten (conj new (last old)))\n      (recur (rest old) (conj new (list (first old) x))))))", "user": "5f0c8b0de4b0f30dddfb5d4c"}, {"problem": 40, "code": "#(reduce \n(fn [result, elem]\n  (if (= elem (first %2))\n    (concat result [elem])\n    (concat result [%1 elem])\n  )\n)\n'() %2)", "user": "5d73530ce4b02e6b30c93514"}, {"problem": 40, "code": "(fn my-interpose\n ;; separate all items in collection with item \n  [item coll]\n  (loop [[x & rest] coll r []]\n   (if (empty? rest)\n     (conj r x)\n     (recur rest (conj r x item)))))", "user": "5f003099e4b0cf489e8d7f17"}, {"problem": 40, "code": "(fn [v s] (loop [xs (rest s), acc (list (first s))]\n            (if-let [x (first xs)]\n              (recur (rest xs) (cons x (cons v acc)))\n              (reverse acc))))", "user": "5e6ba862e4b04a83ad7cd27d"}, {"problem": 40, "code": "(fn [v sq]\n  (conj (reduce (fn [acc cur]\n                  (conj acc cur v))\n                []\n                (drop-last 1 sq))\n        (last sq)))", "user": "5d431c77e4b07c84aa5ae68f"}, {"problem": 40, "code": "(fn [x l] (butlast (interleave l (repeat x))))", "user": "5f0b8243e4b0f30dddfb5d45"}, {"problem": 40, "code": "(fn [sep x]\n  (butlast (mapcat #(vector % sep) x)))", "user": "5b7f2d75e4b047b03b203768"}, {"problem": 40, "code": "(fn [x coll]\n   (let [count (count coll)]\n     (loop [result []\n            val    0]\n       (if (= val count)\n         (pop result)\n         (recur (conj result (get coll val) x) (inc val))))))", "user": "5f122f93e4b091ba50b4dbae"}, {"problem": 40, "code": "(fn [sep coll]\n  (->>\n   coll\n   (map #(conj [] % sep))\n   flatten\n   butlast))", "user": "5f10fb99e4b091ba50b4dba8"}, {"problem": 40, "code": "#(butlast (interleave %2 (take (count %2) (repeat %))))", "user": "5f03ab5be4b0cf489e8d7f37"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %) %2))", "user": "5509a23ee4b06e50f9beb11a"}, {"problem": 40, "code": "(fn [e v] (for [i (range (- (* 2 (count v)) 1))] (if (even? i) (v (/ i 2)) e)))", "user": "58f98231e4b0438e51c2cf4c"}, {"problem": 40, "code": "(fn [separator seq]\n  (reduce (fn [out-vec elem]\n            (if (= elem (last seq))\n              (conj out-vec elem)\n              (into out-vec [elem separator])))\n          []\n          seq))", "user": "5f15a50fe4b091ba50b4dbbc"}, {"problem": 40, "code": "(fn [sep items]\n  (conj\n    (flatten (map vector (repeat (count items) sep) (rest items)))\n    (first items)))", "user": "5f009162e4b0cf489e8d7f1a"}, {"problem": 40, "code": "#(rest (interleave (take (count %2) (repeat %1)) %2))", "user": "5ec5f7f2e4b08d0ec38692d1"}, {"problem": 40, "code": "(fn [x y] (drop-last (interleave y (take (count y) (repeat x))))\n   )", "user": "5f082d9ee4b0cf489e8d7f5c"}, {"problem": 40, "code": "(fn [divider items] (drop-last (interleave items (repeat (count items) divider))))", "user": "5f1c2755e4b0f565ad99825d"}, {"problem": 40, "code": "(fn [sign s]\n  (butlast (mapcat #(vector % sign) s)))", "user": "5f17e3c5e4b091ba50b4dbd0"}, {"problem": 40, "code": "(fn [v coll]\n  (butlast (mapcat #(vector % v) coll)))", "user": "5ec3cdf7e4b08d0ec38692bc"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "5f086f54e4b0cf489e8d7f5e"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5e3071abe4b05b4b01516213"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5f1f4411e4b0f565ad99827b"}, {"problem": 40, "code": "(fn interpose-seq [n x]\n    (vec (drop-last (flatten (map list x (vec (repeat (count x) n))))))\n)", "user": "5f0cb4f3e4b0f30dddfb5d4e"}, {"problem": 40, "code": "(fn foo [o s]\n(if (> (count s) 0)\n(if (not= (count s) 1)\n(concat [(first s) o] (foo o (rest s)))\n(cons (first s) (foo o (rest s)))\n)\n)\n)", "user": "5f1aade6e4b091ba50b4dbe4"}, {"problem": 40, "code": "(fn [val col] (->> col (mapcat #(vector % val)) butlast))", "user": "5f0e8312e4b0f30dddfb5d5b"}, {"problem": 40, "code": "(fn [x y] (drop-last (interleave y (repeat (count y ) x))))", "user": "5f06d26ae4b0cf489e8d7f53"}, {"problem": 40, "code": "(fn [value coll] (butlast (interleave coll (repeat (count coll) value))))", "user": "5f21d172e4b0f565ad998286"}, {"problem": 40, "code": "(fn [sep [x & xs]] (conj (mapcat #(list sep %) xs) x))", "user": "5f247827e4b0f565ad998292"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "59331397e4b072a2710fd046"}, {"problem": 40, "code": "(fn [sep coll]\n  (apply concat\n         (for [x coll]\n           (if (not (= x (last coll)))\n             (concat [x] [sep])\n             [x]))))", "user": "5f081f6de4b0cf489e8d7f5a"}, {"problem": 40, "code": "(fn [x s] \n  (rest (mapcat #(vector x %1) s) ))", "user": "5f22e8c9e4b0f565ad99828b"}, {"problem": 40, "code": "(fn [s l] (rest (mapcat #(list s %) l)))", "user": "5f2c02d1e4b033932238a65f"}, {"problem": 40, "code": "#(butlast (mapcat (fn [x] (list x %1)) %2))", "user": "5e8c3e8fe4b0cb0169546322"}, {"problem": 40, "code": "(fn [itm coll]\n   (loop [resu []\n          col coll]\n     (if (empty? (rest col))\n       (conj resu (first col))\n       (recur (conj resu (first col) itm)\n              (rest col)))))", "user": "535f0cbde4b04ce2eb3ed2d9"}, {"problem": 40, "code": "#(drop-last(flatten(map (fn [x] (list [x %1]) ) %2)))", "user": "54fce8bde4b07d26eda61d30"}, {"problem": 40, "code": "#(drop-last (flatten(map(fn[x y](list[x y])) %2 (repeat %1))))", "user": "5f27cc7fe4b033932238a646"}, {"problem": 40, "code": "#(drop-last (flatten (map (fn [y] (list [y %1])) %2)))", "user": "5f275800e4b0857314092c93"}, {"problem": 40, "code": "(fn intp [y [x & xs]]\n   (if (empty? xs)\n     (list x)\n     (concat (list x y) (intp y xs))))", "user": "5f2d6787e4b033932238a66d"}, {"problem": 40, "code": "(fn [inter coll] (drop-last 1 (flatten (mapcat #(hash-map % inter) coll))))", "user": "5f281a83e4b033932238a64a"}, {"problem": 40, "code": "(fn [a xs] (drop-last (mapcat vector xs (repeat a))))", "user": "51553ea7e4b06c5f6a1490a2"}, {"problem": 40, "code": "(fn myinterpose [x vin]\n  (let [f (fn [x vin vout]\n    (let [restvin (rest vin)]\n      (if (empty? restvin)\n        (conj vout (first vin))\n        (recur x restvin (conj vout (first vin) x))\n      ))\n  )]\n  (f x vin [])))", "user": "5bcc304ce4b07a9b28b1010c"}, {"problem": 40, "code": "(fn separator [sep inseq] (rest (reduce #(concat %1 [sep %2]) [] inseq)))", "user": "5f309144e4b0574c87022c23"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5f1af439e4b0f565ad998257"}, {"problem": 40, "code": "(fn [a b] (reduce #(conj % %2) (vector (first b)) (flatten (map (fn [arg] (list a arg)) (rest b)))))", "user": "5f2d3c0ee4b033932238a66a"}, {"problem": 40, "code": "(fn interpose-a-seq [v s]\n  (rest (mapcat #(list v %) s)))", "user": "5efdb9bae4b0cf489e8d7f02"}, {"problem": 40, "code": "(fn [a b] (drop-last 1 (interleave b (repeat a))))", "user": "5f2c4c44e4b033932238a662"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5f25a2b1e4b0117231e5035e"}, {"problem": 40, "code": "#(butlast (flatten (map vector %2 (repeat %1))))", "user": "5f0824c5e4b0cf489e8d7f5b"}, {"problem": 40, "code": "(fn intrps [sep xs]\n  (if-let [x (first xs)]\n    (if-let [xs' (seq (rest xs))]\n      (concat [x sep] (intrps sep xs')) \n      [x])\n    []))", "user": "5f300f28e4b033932238a682"}, {"problem": 40, "code": "(fn interpose-seq\n  [ele coll]\n  (if (<= (count coll) 1)\n    coll\n    (concat [(first coll) ele] (interpose-seq ele (rest coll))))\n  )", "user": "5f29837ee4b033932238a64f"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5f331015e4b0574c87022c37"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %1)))", "user": "5f3ab5ece4b004f08c61c52a"}, {"problem": 40, "code": "(fn [v list]\n   (reduce #(if (empty? %1) (conj %1 %2) (conj %1 v %2)) [] list))", "user": "5f3f2281e4b004f08c61c561"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5f3abcc4e4b004f08c61c52b"}, {"problem": 40, "code": "(fn [el col]\n  (loop [inp (rest col) out [(first col)]]\n    (if (empty? inp)\n      out\n      (recur (rest inp) (conj (conj out el) (first inp))))))", "user": "5f2c94b4e4b033932238a669"}, {"problem": 40, "code": "(fn [d s]\n  (loop [c (first s)\n         remaining (rest s)\n         v []]\n    (if (nil? c)\n      v\n      (if (empty? remaining)\n      \t(recur (first remaining) (rest remaining) (conj v c))\n        (recur (first remaining) (rest remaining) (conj v c d))))))", "user": "5f3ddc71e4b004f08c61c551"}, {"problem": 40, "code": "(fn [x col]\n  (let [length (count col)\n  total (dec (* 2 length))\n  vec-to-interpose (take length (repeat x))]\n(take total (interleave col vec-to-interpose))))", "user": "5f274aeee4b0857314092c92"}, {"problem": 40, "code": "#(drop-last (mapcat list %2 (repeat %1)))", "user": "5f419985e4b0955706451fab"}, {"problem": 40, "code": "#(rest (mapcat vector (repeat (count %2) %1) %2))", "user": "5f429fdfe4b0955706451faf"}, {"problem": 40, "code": "(fn interp [v xs]\n  (drop-last (reduce #(concat %1 [%2 v]) [] xs)))", "user": "5f3adcf4e4b004f08c61c531"}, {"problem": 40, "code": "(fn [sep coll]\n  (loop [c coll\n         r []]\n    (if (nil? c)\n      (drop-last r)\n      (recur (next c)\n             (conj r (first c) sep)))))", "user": "5f2c04dde4b033932238a660"}, {"problem": 40, "code": "(fn [x data] (->> data\n                  (partition-all 1)\n                  (map #(conj (vec %) x))\n                  flatten\n                  butlast))", "user": "5b6962c1e4b0c6492753e787"}, {"problem": 40, "code": "(fn [sep coll]\n  (if (first coll)\n\t  (reduce (fn [a b] (concat a [sep b])) [(first coll)] (rest coll))))", "user": "5f37839ee4b0574c87022c59"}, {"problem": 40, "code": "(fn[inter l] (drop-last (reduce (fn [acc ele] (conj (conj acc ele) inter)) [] l)))", "user": "58ffc6cfe4b0438e51c2d008"}, {"problem": 40, "code": "(fn [v coll]\n  (drop-last (reduce #(conj %1 %2 v) [] coll)))", "user": "5c8005cee4b0c8042a70ce0a"}, {"problem": 40, "code": "(fn [sep s] (butlast (interleave s (repeat sep))))", "user": "5f431d32e4b0955706451fb5"}, {"problem": 40, "code": "(fn [addin x]\n  (reduce \n  (fn [out part]\n    (if (= (last x) part)\n      (conj out part)\n      (conj out part addin)\n    ))\n  []\n  x))", "user": "5f3a8493e4b004f08c61c527"}, {"problem": 40, "code": "(fn [v s]\n   (drop-last (mapcat #(vector %1 %2)\n                      s\n                      (take (count s) (repeat v)))))", "user": "5992dc6ae4b0866487ed0d7d"}, {"problem": 40, "code": "(fn [sep coll] (rest (reduce #(conj %1 sep %2) [] coll)))", "user": "5f238a59e4b0f565ad99828d"}, {"problem": 40, "code": "(fn [i coll]\n  (pop (reduce #(conj %1 %2 i) [] coll)))", "user": "5ee4b2e6e4b029a2061bbe90"}, {"problem": 40, "code": "(fn [marker lst] (drop-last (apply concat (for [item lst] (concat [item] [marker])))))", "user": "5f45211ae4b0955706451fbc"}, {"problem": 40, "code": "(fn [x lst] (butlast (interleave lst (repeat (count lst)  x))))", "user": "5f558a76e4b0a0bc16850a84"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %1)))", "user": "5f56c0cae4b0a0bc16850a8c"}, {"problem": 40, "code": "(fn [n x]\n  \n  (butlast (apply concat (map #(list %1 %2) x (repeat n))))\n                    \n)", "user": "5f574662e4b0a0bc16850a90"}, {"problem": 40, "code": "(fn [v xs] (drop-last (mapcat #(list % v) xs)))", "user": "5f0dfa48e4b0f30dddfb5d55"}, {"problem": 40, "code": "(fn [s xs] (loop [l1 xs l2 []] (if (= 1 (count l1)) (concat l2 l1) (recur (rest l1) (concat l2 (conj [] (first l1) s))))))", "user": "5f32f69ae4b0574c87022c35"}, {"problem": 40, "code": "(fn [x y]\n  (reduce #(conj %1 x %2) [(first y)] (rest y)))", "user": "5f1eebcee4b0f565ad998273"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5dfb7f6de4b0a607a9a45cdc"}, {"problem": 40, "code": "(fn [value s] (conj (vec (interleave s (repeat (- (count s) 1) value))) (last s)))", "user": "5f5df0bfe4b02876ed9fcfeb"}, {"problem": 40, "code": "(fn my-interpose [x lst]\n  (drop-last (vec (interleave lst (repeat x)))))", "user": "5f4eb036e4b0102c75033969"}, {"problem": 40, "code": "(fn [a xs]\n  (reduce\n   (fn [xs x]\n     (concat xs (list a x)))\n   (list (first xs))\n   (rest xs)))", "user": "5f5e7158e4b02876ed9fcff0"}, {"problem": 40, "code": "#(butlast (mapcat vector %2 (repeat (count %2) %1)))", "user": "53275758e4b09d4e7a9b54fc"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5f5f9483e4b02876ed9fcff8"}, {"problem": 40, "code": "(fn [v col]\n  (drop-last (interleave col (repeat v))))", "user": "5ea6fe98e4b00a66d4a951b2"}, {"problem": 40, "code": "(fn my-interpose [i s]\n  (butlast (mapcat list s (repeat (count s) i))))", "user": "5f5b624de4b05ea7b9adc42f"}, {"problem": 40, "code": "(fn [x s] \n  (rest \n   (mapcat #(vector x %1) s) \n  )\n)", "user": "5f631e11e4b02876ed9fd011"}, {"problem": 40, "code": "(fn [value coll]\n  (rest (mapcat (fn [element] (list value element)) coll)))", "user": "5f63d933e4b02876ed9fd018"}, {"problem": 40, "code": "(fn f [a [x & xs]]\n   (lazy-seq(cond\n    (nil? xs) (cons x nil)\n    :else (cons x (cons a (f a xs))))))", "user": "563f0fdae4b08d4f616f5ece"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5f65bdfde4b02876ed9fd025"}, {"problem": 40, "code": "(fn [v coll]\n  (butlast (mapcat #(vector % v) coll)))", "user": "5f5f2eafe4b02876ed9fcff5"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "588fbb39e4b00487982d51bd"}, {"problem": 40, "code": "(fn [del s]\n  (reduce\n    #(if\n       (sequential? %1) (conj %1 del %2)\n       [%1 del %2])\n    s)\n  )", "user": "5f58db95e4b0a0bc16850a9a"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5f6796d2e4b02876ed9fd036"}, {"problem": 40, "code": "(fn [v s]\n        (reduce (fn [a x] (conj (conj a v) x)) [(first s)] (rest s)))", "user": "5eff6c0ee4b0cf489e8d7f11"}, {"problem": 40, "code": "(fn interp [x coll]\n  (-> (interleave coll (repeat (count coll) x))\n   (reverse)\n   (rest)\n   (reverse)))", "user": "5f38eecce4b0574c87022c72"}, {"problem": 40, "code": "(fn my-interpose [sep coll]\n  (butlast\n    (reduce\n      (fn [res a]\n        (concat res [a sep]))\n      []\n      coll)))", "user": "5f663bc0e4b02876ed9fd02d"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5f6b5d83e4b02876ed9fd050"}, {"problem": 40, "code": "#(drop-last (apply concat (map list %2 (repeat %1))))", "user": "5f6e5c58e4b02876ed9fd067"}, {"problem": 40, "code": "(fn[sep sequ] (->> (reduce #(conj %1 sep %2) [] sequ) (drop 1)) )", "user": "5f6b61ece4b02876ed9fd051"}, {"problem": 40, "code": "(fn myInterpose\n  [lim, lst]\n  (rest (reduce #(into %1 [lim %2]) [] lst))\n  )", "user": "5f724f55e4b02876ed9fd089"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5f6e576ae4b02876ed9fd066"}, {"problem": 40, "code": "(fn[sep sq] (concat \n              (mapcat (fn[item] (list item sep)) (butlast sq))\n              (list (last sq))))", "user": "5f727d2fe4b02876ed9fd08f"}, {"problem": 40, "code": "; #(drop-last (interleave %2 (repeat %))) \n\n#(rest (interleave (repeat %) %2))", "user": "5f6a583ae4b02876ed9fd046"}, {"problem": 40, "code": "#(butlast (flatten (map (fn [v] [v %1]) %2)))", "user": "5ec0db8be4b00a66d4a9528d"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5f727dd6e4b02876ed9fd090"}, {"problem": 40, "code": "(fn my-interpose\n  [x s]\n  (drop-last (mapcat list s (repeat x))))", "user": "5f3103aee4b0574c87022c24"}, {"problem": 40, "code": "(fn f [sep lst] (butlast (mapcat #(list % sep) lst)))", "user": "5f648ef1e4b02876ed9fd01b"}, {"problem": 40, "code": "(fn \n  [interposee s]\n  (butlast(reduce (fn [s el]  (conj (conj s el) interposee)) [] s))\n)", "user": "5f6b8222e4b02876ed9fd052"}, {"problem": 40, "code": "(fn xx [z qq] ((fn ias [x q r] (if (= (rest q) '()) (conj r (first q)) (ias x (rest q) (conj r (first q) x)))) z qq []))", "user": "5f79cb16e4b02876ed9fd0cb"}, {"problem": 40, "code": "(fn [new_value coll] (drop-last (flatten (map (fn [value] (list value new_value)) coll))))", "user": "5885eb2de4b0f1effa3b76c6"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5f727bd1e4b02876ed9fd08c"}, {"problem": 40, "code": "#(vec (drop-last (interleave %2 (repeat (count %2) %))))", "user": "5c06fab7e4b0bdcf453d16bd"}, {"problem": 40, "code": "(fn [x lst]\n    (butlast(interleave lst (repeat (count lst) x))))", "user": "5f74de11e4b02876ed9fd0a5"}, {"problem": 40, "code": "(fn  [val xs]\n   (loop [i   0\n          res []]\n     (if (= i (- (count xs) 1)) (conj res (get xs i))\n         (recur (inc i) (conj res (get xs i) val) )) ))", "user": "5f74770fe4b02876ed9fd09f"}, {"problem": 40, "code": "(fn [token sequ]\n   (pop (vec (interleave sequ (take (count sequ) (repeat token))))))", "user": "5f79bff2e4b02876ed9fd0ca"}, {"problem": 40, "code": "#(flatten (for [x %2]\n      (if (= x (last %2) ) (list x) (list x %1) \n               )))", "user": "5f77b99fe4b02876ed9fd0bc"}, {"problem": 40, "code": "(fn [sep arr] (drop-last (reduce #(conj % %2 sep) [] arr)))", "user": "5f686436e4b02876ed9fd03c"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "573102bbe4b0cd1946bd0fbb"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5f63cde9e4b02876ed9fd015"}, {"problem": 40, "code": "(fn interposeByReduce [sep s]\n  (rest\n   (reduce\n     (fn interposeReducer [acc curr]\n       (concat acc [sep curr]))\n     []\n     s)))", "user": "5f7251b9e4b02876ed9fd08a"}, {"problem": 40, "code": "(fn [sep [one & more]]\n  (reduce #(conj %1 sep %2) [one] more))", "user": "5f393bd6e4b0574c87022c76"}, {"problem": 40, "code": "(fn [value lst]\n    (loop [lst lst\n          newlst ()]\n        (if (empty? lst)\n            (rest newlst)\n            (recur (butlast lst) (concat (list value (last lst)) newlst)))\n    ))", "user": "5f77d470e4b02876ed9fd0be"}, {"problem": 40, "code": "(fn [v xs] \n        (rest (loop [[x :as xs] xs\n               acc []] \n            (if (empty? xs) acc\n                (recur (rest xs) (conj (conj acc v) x))))))", "user": "5f82cfcce4b0c071e6c840fb"}, {"problem": 40, "code": "(fn [sep coll] (drop-last (reduce #(conj %1 %2 sep) [] coll)))", "user": "5c87217de4b0c8042a70cea1"}, {"problem": 40, "code": "(fn [n m] (rest (mapcat #(list n %) m)))", "user": "5f7e91c8e4b0c071e6c840d8"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5f72f144e4b02876ed9fd093"}, {"problem": 40, "code": "(fn [separator sequence]\n   (rest (interleave (repeat separator) sequence)))", "user": "5f5358b7e4b0a0bc16850a77"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5f84f0f5e4b0375e81f54e78"}, {"problem": 40, "code": "(fn [x y]\n     (into [] (butlast(mapcat #(list % x) y))))", "user": "5f837b30e4b01aacbe7a2714"}, {"problem": 40, "code": ";(fn [p v] \n;   ( let [sv (count v)\n;          v2 (repeat sv p)]\n;    (take (- (* 2 sv) 1)(mapcat vector v v2))))\n#(butlast (interleave %2 (repeat %1)))", "user": "5f81de6ce4b0c071e6c840f5"}, {"problem": 40, "code": "(fn\n  [sep sec]\n  (pop (vec (mapcat #(list % sep) sec))))", "user": "5f6e23e6e4b02876ed9fd064"}, {"problem": 40, "code": "(fn [n lst]\n        (reverse(drop 1(reverse(mapcat #(vector % n)lst))))\n        )", "user": "5f737899e4b02876ed9fd099"}, {"problem": 40, "code": "(fn [f f1]\n  \n  (rest (mapcat vector (repeat f)f1))\n  \n  )", "user": "5f727be9e4b02876ed9fd08d"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5f8497dce4b0375e81f54e74"}, {"problem": 40, "code": "(fn [item item1] \n  (rest (mapcat #(vector item %1) item1)))", "user": "5f792d48e4b02876ed9fd0c5"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5f87e757e4b0169f6814c40f"}, {"problem": 40, "code": "(fn [elem a-seq]\n                               (loop [l a-seq acc []]\n                                 (if (empty? (rest l))\n                                   (conj acc (first l))\n                                   (recur (rest l) (conj (conj acc (first l)) elem)))))", "user": "5f86a98be4b0649ffcda4caa"}, {"problem": 40, "code": "(fn [i lst]\n  (rest (mapcat #(list i %) lst)))", "user": "5f84f110e4b0375e81f54e79"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5f8361bae4b01aacbe7a2712"}, {"problem": 40, "code": "(fn interpose-a-seq [x y]\n  (rest (mapcat #(list x %) y)))", "user": "5f8795d4e4b020286baa5e96"}, {"problem": 40, "code": "(fn [n lst]\n        (reverse (rest (reverse(mapcat #(vector % n) lst)))))", "user": "5f77890ae4b02876ed9fd0b9"}, {"problem": 40, "code": "(fn interposeSeq [av lst]\n  (rest (mapcat (fn[x] (list av x)) lst))\n  )", "user": "5f8330b8e4b01aacbe7a270f"}, {"problem": 40, "code": "(fn [x y]\n  (rest (mapcat #(list x %) y)))", "user": "5f810e97e4b0c071e6c840ed"}, {"problem": 40, "code": "(fn [lst n] (butlast (mapcat #(vector % lst) n)))", "user": "5f727cb0e4b02876ed9fd08e"}, {"problem": 40, "code": "(fn intp [sep coll] (drop-last (reduce (fn [acc e] (concat acc [e sep])) [] coll)))", "user": "5c8cfff8e4b048ec896c5996"}, {"problem": 40, "code": "(fn interp [v s]\n  (-> (repeat (count s) v) (interleave s) (rest)))", "user": "5f8b06afe4b0715f5002d74a"}, {"problem": 40, "code": "(fn [first second] (into [] (butlast (flatten (map #(vector % first) second)))))", "user": "5f8b7506e4b0715f5002d74c"}, {"problem": 40, "code": "(fn interpose*\n  [i col]\n  (drop-last (mapcat list col (repeat i))))", "user": "5f816cc6e4b0c071e6c840f1"}, {"problem": 40, "code": "#(rest (mapcat (fn [v] [% v]) %2))", "user": "5f8e865fe4b0715f5002d76d"}, {"problem": 40, "code": "(fn ipose [sep items]\n  (if (<= (count items) 1)\n    items\n    (concat [(first items)]\n            [sep]\n            (ipose sep (rest items)))))", "user": "56a2777be4b0542e1f8d14bf"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %)))", "user": "5f8fe45ae4b0715f5002d78d"}, {"problem": 40, "code": "(fn myfunc [n seqn] (rest (mapcat #(list n %) seqn)))", "user": "5f8d76c3e4b0715f5002d758"}, {"problem": 40, "code": "(fn [s coll] (butlast (mapcat #(vector % s) coll)))", "user": "5f92d736e4b0715f5002d7ba"}, {"problem": 40, "code": "(fn [sep coll]\n  (reduce (fn [res x] (conj res sep x))\n          [(first coll)]\n          (rest coll)))", "user": "5f93529ae4b0715f5002d7bc"}, {"problem": 40, "code": "#(butlast(mapcat (fn[el](list el %1)) %2))", "user": "5f838122e4b01aacbe7a2715"}, {"problem": 40, "code": "(fn [v s]\n  (->> s\n    (mapcat #(list % v))\n    (drop-last)))", "user": "5f597522e4b0a0bc16850a9e"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5f737e16e4b02876ed9fd09a"}, {"problem": 40, "code": "(fn\n  [k xs]\n  (butlast (reduce (fn\n                     [acc x]\n                     (conj (conj acc x) k))\n                   []\n                   xs)))", "user": "5e1c24f4e4b0dc959400852d"}, {"problem": 40, "code": "(fn [val coll] (drop-last(mapcat #(list %1 val) coll)))", "user": "5ee4545ee4b029a2061bbe8d"}, {"problem": 40, "code": "(fn [del list]\n   (vec\n    (butlast\n     (flatten\n      (map #(conj [] % del) list)))))", "user": "5f97eff1e4b0715f5002d7f9"}, {"problem": 40, "code": "(fn [i c] (butlast (vec (flatten (map (fn [j] (conj (conj [] j) i)) c)))))", "user": "5eb741e4e4b00a66d4a9523b"}, {"problem": 40, "code": "(fn p40 [v l]\n  (drop-last (mapcat (fn [a] `(~a ~v)) l)))", "user": "5f968f4ee4b0715f5002d7d2"}, {"problem": 40, "code": "(fn myF [x xs] \n  (into [] (drop-last (mapcat #(list % x) xs))))", "user": "56eff7c1e4b04a395b9a0468"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5f8f4aa3e4b0715f5002d780"}, {"problem": 40, "code": "(fn [n coll]\n  (rest (interleave (repeat n) coll)))", "user": "5f8e2a08e4b0715f5002d767"}, {"problem": 40, "code": "(fn [x ys] (rest (mapcat #(conj [] x %) ys)))", "user": "5fa17538e4b0f0ebd91b77e3"}, {"problem": 40, "code": "(fn [v xs]\n  (loop [ys xs acc []]\n    (cond\n     \t(empty? ys) acc\n     \t(empty? (rest ys)) (conj acc (first ys))\n     \t:else (recur (rest ys) (conj acc (first ys) v)))))", "user": "5fa5b72ee4b0fa27300f3dca"}, {"problem": 40, "code": "#(loop [r [] s %2] (println r s)\n    (cond\n      (empty? s) r\n      (seq r) (recur (conj r %1 (first s)) (rest s))\n      :else (recur (conj r (first s)) (rest s))))", "user": "5f9c4113e4b0715f5002d821"}, {"problem": 40, "code": "(fn [pos coll] (drop 1 (interleave (repeat pos) coll)))", "user": "5fa74b82e4b0fa27300f3dda"}, {"problem": 40, "code": "(fn [sep xs]\n  (butlast (mapcat #(vector % sep) xs)))", "user": "5fa8424ce4b0fa27300f3de5"}, {"problem": 40, "code": "(fn interpose-ku [n xs]\n    (next (mapcat vector (repeat (count xs) n) xs)))", "user": "5fa358a1e4b0f0ebd91b77fd"}, {"problem": 40, "code": "(fn intrpose \n  ([n s] \n   (intrpose n s []))\n  ([n s res] \n   (if (= (count s) 1)\n     (conj res (first s))\n     (intrpose n (rest s) (conj res (first s) n)))))", "user": "5fa5a6b1e4b0fa27300f3dc8"}, {"problem": 40, "code": "(fn [val s] (drop-last (flatten (interleave s (repeat (vector val))))))", "user": "5f974321e4b0715f5002d7f3"}, {"problem": 40, "code": "(fn [x s] \n  (rest (mapcat #(vector x % ) s)))", "user": "5facfb48e4b08cb800c85aea"}, {"problem": 40, "code": ";;1\n\n(fn [s col]\n  (rest (into [] (flatten (map #(vector s %) col))))\n)\n\n;;2\n\n;(fn [s col]\n; (butlast (into [] (flatten (map #(vector % s) col))))\n; )\n\n;;3\n\n;;(fn [v coll] (butlast (mapcat #(vector % v) coll)))\n\n;;4\n\n;;(fn [v coll] (rest (mapcat #(vector v %) coll)))", "user": "5face7fce4b08cb800c85ae9"}, {"problem": 40, "code": "(fn [d s]\n   (reverse\n    (rest\n     (reverse\n      (flatten (for [x s]\n                 [x d]))))))", "user": "5fa80c01e4b0fa27300f3de2"}, {"problem": 40, "code": "(fn [i xs]\n  (rest \n   (mapcat list (repeat i) xs)))", "user": "573a0ecce4b0cd1946bd1088"}, {"problem": 40, "code": "#(butlast (mapcat (fn [a] (list a %1 )) %2))", "user": "5fae3d8ae4b08cb800c85afa"}, {"problem": 40, "code": "(fn [sep coll] (reduce #(conj %1 sep %2) [(first coll)] (rest coll)))", "user": "5fa96ddbe4b0fa27300f3dec"}, {"problem": 40, "code": "(fn [sep coll]\n   (vec (drop-last (mapcat #(cons % [sep]) coll))))", "user": "5fb544f6e4b08cb800c85b4e"}, {"problem": 40, "code": "#(drop-last (interleave  %2  (repeat %)))", "user": "5fb3a096e4b08cb800c85b35"}, {"problem": 40, "code": "(fn\n  [v xs]\n  (-> xs\n      (interleave (repeat (-> xs count) v))\n      butlast))", "user": "5484c3b2e4b0e286459a11a2"}, {"problem": 40, "code": "(fn f [x l] (if (= (count l) 1) l (concat (list (first l)) (list x) (f x (rest l)))))", "user": "5fab7ea6e4b08cb800c85ad8"}, {"problem": 40, "code": "(fn [v s]\n  (rest (mapcat #(list v %) s)))", "user": "5fa2b45ce4b0f0ebd91b77f5"}, {"problem": 40, "code": "(fn [n xs]\n  (butlast (interleave xs (repeat (count xs) n))))", "user": "5fbe40bce4b03f550f448246"}, {"problem": 40, "code": "(fn [x col]\n    (let [r (interleave col (repeat x))]\n     (drop-last r)))", "user": "5fafa44ee4b08cb800c85b0e"}, {"problem": 40, "code": "(fn [a b] (drop-last (reduce (fn [acc curr] (conj acc curr a)) [] b)))", "user": "5fac50f4e4b08cb800c85ae5"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %1)))", "user": "5a4f11e5e4b05d388ecb6bc6"}, {"problem": 40, "code": "(fn leave [a b]\n  (if (not-empty (rest b))\n    (list* (first b) a\n           (leave a (rest b)))\n    b))", "user": "5eb7b41ee4b00a66d4a9523c"}, {"problem": 40, "code": "(fn [x y] (drop 1 (flatten (into [] (map #(list %1 %2) (take (count y) (repeat x)) y)))))", "user": "5fc4d277e4b06ffabd1ef72a"}, {"problem": 40, "code": "(fn [sep xs] (drop 1 (mapcat list (repeat sep) xs)))", "user": "5faa75c1e4b0fa27300f3dfa"}, {"problem": 40, "code": "(fn [delim coll] (pop (reduce #(into %1 [%2 delim]) [] coll)))", "user": "5fc51d88e4b0ad564c76812a"}, {"problem": 40, "code": "(fn [sep x] (rest (mapcat (partial list sep) x)))", "user": "5a3e1243e4b0447ef91cc5ae"}, {"problem": 40, "code": "(fn [x coll]\n  (cond\n    (string? x) (clojure.string/join x coll)\n    :else (drop-last (interleave coll (repeat (count coll) x)))))", "user": "5fab003de4b08cb800c85ad1"}, {"problem": 40, "code": "#( (comp butlast interleave) %2 (repeat % ) )", "user": "5fc5c303e4b02c825b0c8c1a"}, {"problem": 40, "code": "#(rest (interleave (repeat (count %2) %1) %2))", "user": "5fba5692e4b03f550f448230"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5fcd15d6e4b07e53c2f3eff7"}, {"problem": 40, "code": "(fn interpose-a-seq [v s]\n  (rest (mapcat #(list v %) s)))", "user": "5f969090e4b0715f5002d7d5"}, {"problem": 40, "code": "(fn [x s] \n  (rest (mapcat #(vector x %1) s) ))", "user": "5f96fbc7e4b0715f5002d7ec"}, {"problem": 40, "code": "(fn [sep sequen] (reduce #(conj %1 sep %2) [(first sequen)] (rest sequen)) )", "user": "5fcefd47e4b07e53c2f3f006"}, {"problem": 40, "code": "(fn p40 [a lat]\n  (cond (empty? lat) '()\n   \t\t(empty? (rest lat)) (list (first lat))\n        :else (cons (first lat) (cons a (p40 a (rest lat))))))", "user": "5f90aeefe4b0715f5002d799"}, {"problem": 40, "code": "(fn [i s]\n    (drop-last (mapcat #(vector %2 %1) (repeat i) s)))", "user": "5ef4fca7e4b07c55ae4a0546"}, {"problem": 40, "code": "(fn [x l] (drop-last (flatten (map #(list %1 x) l))))", "user": "5b2d1c1de4b025bcb146f2c0"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "5edd05bfe4b0c7845d86b0f3"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat (count %2) %1)))", "user": "58c69d88e4b021aa9917ed5e"}, {"problem": 40, "code": "(fn [i ls] (flatten (conj (map #(conj (list %) i) (rest ls)) (first ls))))", "user": "54d7e277e4b0a52adc2e2031"}, {"problem": 40, "code": "(fn foo [val seq]\n  (cond\n    (empty? seq) seq\n    (= 1 (count seq)) seq\n    :else (into [(first seq) val] (foo val (rest seq)))))", "user": "5fb8fe30e4b03f550f448223"}, {"problem": 40, "code": "(fn [x coll] (butlast (mapcat #(list % x) coll)))", "user": "5f96fa49e4b0715f5002d7e9"}, {"problem": 40, "code": "#(drop-last (flatten (for [x (conj '() %1) y %2] [y x])))", "user": "5f3567d6e4b0574c87022c44"}, {"problem": 40, "code": "(fn [sep coll] (butlast (interleave coll (repeat sep))))", "user": "5fb46916e4b08cb800c85b46"}, {"problem": 40, "code": "#(butlast (mapcat vector %2 (repeat %1)))", "user": "5fbb010ae4b03f550f448233"}, {"problem": 40, "code": "(fn [a s] (butlast (reduce (fn [r x] (conj r x a)) [] s)))", "user": "5fc9d967e4b0689391cc77ce"}, {"problem": 40, "code": "(fn [val l]\n  (-> (interleave l (repeat (count l) val))\n      (drop-last)))", "user": "5fe5a64de4b05ac5b16ea187"}, {"problem": 40, "code": "(fn\n join\n [sep xs]\n (let\n  [c (count xs)]\n  (cond\n   (= 0 c) nil\n   (= 1 c) xs\n   :else (concat [(first xs) sep] (join sep (rest xs))))))", "user": "59d4d126e4b0ef0a1e9b5be9"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5fe0d4d4e4b05ac5b16ea164"}, {"problem": 40, "code": "(fn my-interpose [sep coll]\n  (drop-last (mapcat list coll (repeat sep))))", "user": "5fd2e391e4b07e53c2f3f049"}, {"problem": 40, "code": "(fn [x coll]\n  (reduce #(conj %1 x %2) [(first coll)] (next coll)))", "user": "5fea32f3e4b05ac5b16ea1aa"}, {"problem": 40, "code": "#(rest (flatten (mapcat (fn [x] (vector %1 x)) %2)))", "user": "5fdbde92e4b05ac5b16ea137"}, {"problem": 40, "code": "(fn ar [p sp]\n  (butlast (mapcat (fn [x] (vector x p)) sp)))", "user": "5fe09d1fe4b05ac5b16ea15b"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5fe85417e4b05ac5b16ea194"}, {"problem": 40, "code": "(fn [sep xs] (-> (map vector xs (repeat sep)) flatten butlast))", "user": "54aec375e4b09f271ff37cf9"}, {"problem": 40, "code": "(fn f [v s]\n        (if (empty? (rest s))\n          s\n          (lazy-cat [(first s) v] (f v (rest s)))))", "user": "546c4377e4b00cfc9eacc177"}, {"problem": 40, "code": "(fn interpose-seq [item ls]\n  (butlast (reduce (fn [acc x]\n                     (conj acc x item)\n                     ) [] ls)))", "user": "5fe1b893e4b05ac5b16ea16f"}, {"problem": 40, "code": "#(butlast (mapcat vector %2 (repeat (count %2) %1)))", "user": "5fe362d9e4b05ac5b16ea179"}, {"problem": 40, "code": "(fn [x coll]\n  (drop 1 (interleave (repeat x) coll)))", "user": "5fef4292e4b05ac5b16ea1d7"}, {"problem": 40, "code": "(fn [a b] (butlast (mapcat #(vector % a) b)))", "user": "5ff3aca3e4b05ac5b16ea205"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5fd8bcb3e4b05ac5b16ea11b"}, {"problem": 40, "code": "#(take (- (* (count %2) 2) 1)\n       (interleave %2 (repeat %1)))", "user": "5fe9169ce4b05ac5b16ea1a0"}, {"problem": 40, "code": "(fn [x y] (drop-last (reduce #(conj %1 %2 x) [] y)))", "user": "5ff32e20e4b05ac5b16ea1ff"}, {"problem": 40, "code": "(fn my-interpose\n  [v col]\n  (->> v\n       repeat\n       (interleave col)\n       (drop-last)))", "user": "5ff454a1e4b05ac5b16ea20d"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5f9690d4e4b0715f5002d7de"}, {"problem": 40, "code": "(fn [x y]\n  (drop-last (loop [n 0 res '[]]\n    (if (= n (count y))\n      res\n      (recur (inc n) (conj res (nth y n) x))))))", "user": "5d517784e4b0776584bd6f60"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %) %2))", "user": "5fd10010e4b07e53c2f3f02a"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "5ff93da9e4b06df49cee14af"}, {"problem": 40, "code": ";; #(drop-last (interleave %2 (repeat %1)))\n\n;; #(rest (mapcat list (repeat %1) %2))\n\n;; #(->> %2\n;;       (reduce (fn [acc e] (conj acc e %1)) '())\n;;       (next)\n;;       (reverse))\n\n(fn [t c]\n    (butlast (flatten (map #(vector % t) c))))", "user": "591ad160e4b09b4ee5954bdf"}, {"problem": 40, "code": "(fn [t s] (butlast (flatten (map #(conj [%] t) s))))", "user": "5ff676a9e4b06df49cee1497"}, {"problem": 40, "code": "(fn in2 [sep coll]\n  (-> (reduce (fn [acc v]\n                (conj acc [v sep])) [] coll)\n      flatten\n      butlast))", "user": "5ff8ead1e4b06df49cee14ab"}, {"problem": 40, "code": "(fn [n nums]\n   (loop [i 1 ans [] orgSeq nums]\n     (if (= i (* 2 (count nums)))\n       ans\n       (if (= (mod i 2) 0)\n         (recur (inc i) (conj ans n) orgSeq)\n         (recur (inc i) (conj ans (first orgSeq)) (rest orgSeq))\n         )\n       )\n     )\n   )", "user": "5fd361f2e4b07e53c2f3f04e"}, {"problem": 40, "code": "#(drop-last (mapcat vector %2 (into [] (take (count %2) (repeat %1)))) )", "user": "5fec4f5ee4b05ac5b16ea1bf"}, {"problem": 40, "code": "(fn [val coll]\n    (butlast (mapcat #(conj '() val % ) coll)))", "user": "529e3258e4b04e0c58e87b8d"}, {"problem": 40, "code": "(fn teste [item xs]\n  (reduce (fn [acc atual]\n            (let [sequence (conj acc atual)]\n              (if (= (last xs) atual)\n                sequence\n                (conj sequence item)))) [] xs))", "user": "58a0ac0de4b02bd94d917e9c"}, {"problem": 40, "code": "(fn [x coll]\n  ((comp butlast flatten) \n   (map #(conj () x %) coll)))", "user": "5ffc18cae4b074f607df65f1"}, {"problem": 40, "code": "#(drop-last 1 (interleave %2 (repeat %1)))", "user": "5ffee617e4b074f607df6605"}, {"problem": 40, "code": "(fn my-interpose [sep seq]\n  (reduce\n   (fn [newseq elem]\n     (if (empty? newseq)\n       (list elem)\n       (concat newseq (list  sep elem))\n\n       ) )\n   () seq) )", "user": "5fa6db67e4b0fa27300f3dd2"}, {"problem": 40, "code": "(fn myinterpose [n sq]\n  (take (dec (* 2 (count sq))) (mapcat #(vector %1 %2) sq (repeat n))) )", "user": "5fee18f2e4b05ac5b16ea1d2"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat (count %2) %1)))", "user": "5ff61113e4b06df49cee1492"}, {"problem": 40, "code": "(fn [sep sq] (drop-last (flatten (map (fn [e] [e sep]) sq))))", "user": "5fbf6fe7e4b0ad6fc3476147"}, {"problem": 40, "code": "(fn [sep lst] (drop-last (flatten (map #(vector % sep) lst))))", "user": "6004c750e4b074f607df6645"}, {"problem": 40, "code": "(fn [x y]\n   (butlast (interleave y (take (count y) (repeat x)))\n    ))", "user": "5ffd3422e4b074f607df65f7"}, {"problem": 40, "code": "(fn[x y](-> (interleave y (repeat x)) drop-last vec))", "user": "6001460ce4b074f607df6611"}, {"problem": 40, "code": "(fn [n c] (butlast (mapcat #(vector % n) c)))", "user": "5ffe2d18e4b074f607df65ff"}, {"problem": 40, "code": "(fn [s xs] (reduce (fn [acc x]\n                     (if (empty? acc)\n                       (conj acc x)\n                       (-> acc\n                           (conj s)\n                           (conj x))))\n                   []\n                   xs))", "user": "5f37263de4b0574c87022c4e"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last)", "user": "6001c90ce4b074f607df6626"}, {"problem": 40, "code": "(fn [x coll] (butlast (mapcat vector coll (repeat x))))", "user": "5f9f032fe4b0715f5002d839"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "5ff709e4e4b06df49cee149b"}, {"problem": 40, "code": "#(reduce (fn [a b]\n           ((if (vector? a) conj vector) a %1 b))\n         %2\n         )", "user": "60096aabe4b074f607df667f"}, {"problem": 40, "code": "#(drop-last (mapcat (fn [x] (concat x [%1])) (partition-by identity %2)))", "user": "600c1c72e4b074f607df6692"}, {"problem": 40, "code": "(fn foo [e s]\n    (let [x (first s)\n          xs (rest s)]\n        (if (empty? xs)\n            (list x)\n            (conj (conj (foo e xs) e) x))))", "user": "600ae927e4b074f607df6689"}, {"problem": 40, "code": "#(loop [n [] c %2 s %1] (if (empty? c) (drop-last n) (recur (conj n (first c) s) (rest c) s)))", "user": "5d62ce13e4b0c9e5857d501f"}, {"problem": 40, "code": "(fn [s c] (rest (reduce #(concat %1 [s] [%2]) [] c)))", "user": "600cb742e4b074f607df6696"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat (count %2) %)))", "user": "583369e6e4b089d5ab817c9c"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "6011b89ee4b074f607df66bc"}, {"problem": 40, "code": ";; (fn [arbitrary-value a-seq]\n  ;; (butlast (flatten (for [x a-seq]\n    ;; return a new vector of the sequence\n    ;; and arbitrary value combined\n    ;; [x arbitrary-value]))))\n    \n(fn [inbetween a-seq]\n  ;; \"thread last\"\n  (->> \n   (for [x a-seq]\n    [x inbetween])\n   flatten\n   butlast))", "user": "5fb68f09e4b08cb800c85b58"}, {"problem": 40, "code": "(fn [n xs]\n   (drop-last (interleave xs (repeat n))))", "user": "57e10705e4b0bfb2137f5a6a"}, {"problem": 40, "code": "(fn intersperse [sep coll]\n  (rest (interleave (repeat sep) coll)))", "user": "601aaa93e4b0bf4ca6b10926"}, {"problem": 40, "code": "(fn [x xs] (drop-last (reduce (fn [acc ele] (conj acc ele x)) [] xs)))", "user": "5a9f2c53e4b0d174b936c812"}, {"problem": 40, "code": "(fn [a xs]\n   (->> (map #(list % a) xs)\n        (apply concat)\n        butlast))", "user": "5fa28e2be4b0f0ebd91b77f0"}, {"problem": 40, "code": "(fn [s l] (drop-last (mapcat #(list % s) l)))", "user": "601004d6e4b074f607df66b2"}, {"problem": 40, "code": "(fn [separator col]\n   (reduce (fn [a b]\n             (if (empty? a)\n               (conj a b)\n               (conj a separator b)))\n           []\n           col))", "user": "5aafde49e4b073f1774425a1"}, {"problem": 40, "code": "(fn [v s] (rest (mapcat #(list v %) s)))", "user": "5ff70cfde4b06df49cee149c"}, {"problem": 40, "code": "(fn myinterpose [x l]\n  (cond\n   (= 1 (count l)) l\n   :else\n   (conj (myinterpose x (rest l) ) x (first l))))", "user": "602049b8e4b0bf4ca6b10961"}, {"problem": 40, "code": "(fn [sep coll]\n  (loop [res [] rem coll]\n    (if (> (count rem) 1)\n      (recur (conj res (first rem) sep) (rest rem))\n      (conj res (first rem)))))", "user": "57a774e4e4b0a96607956213"}, {"problem": 40, "code": "#(take (- (* 2 (count %2)) 1)(interleave %2 (repeat %1)))", "user": "60195030e4b0bf4ca6b10920"}, {"problem": 40, "code": "#(loop [[fst & rest] %2\n       f []]\n  (if rest\n      (recur rest (conj f fst %1))\n      (conj f fst)))", "user": "4e38f245535deb9a81d77f3e"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "601bdcb3e4b0bf4ca6b10930"}, {"problem": 40, "code": "(fn [x s] \n  (rest (mapcat #(vector x %1) s) ))", "user": "6022844de4b0d5df2af22203"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "6023e7f7e4b0d5df2af22217"}, {"problem": 40, "code": "(fn [x ls]\n  (rest (reduce #(conj (conj %1 x) %2) [] ls)))", "user": "60228147e4b0d5df2af22202"}, {"problem": 40, "code": "(fn [vl szn]\n  (loop [s szn new '()]\n    (if (empty? s) new\n      (recur (rest s)\n             (concat new \n                     (if (empty? (rest s)) \n                       (list (first s))\n                       (list (first s) vl))\n                     )))))", "user": "60264d89e4b0d5df2af2222d"}, {"problem": 40, "code": "(fn [sep [l & l-rest]]\n  (reduce\n   (fn [acc x] (conj acc sep x))\n   [l]\n   l-rest))", "user": "593c9583e4b069cdc2982b94"}, {"problem": 40, "code": "(fn i [x col] (into [] (butlast (flatten (mapcat #(conj (list x) (list %1)) col)))))", "user": "5fc860b1e4b049d89c09cd94"}, {"problem": 40, "code": "#(-> (for [x %2 res [x %1]] res) (butlast))", "user": "6026737ee4b0d5df2af2222f"}, {"problem": 40, "code": "(fn [val sq]\n   (butlast (interleave sq (repeat val))))", "user": "602b90c1e4b0d5df2af22266"}, {"problem": 40, "code": "(fn [n s] (butlast (interleave s (repeat n))))", "user": "5fdb8657e4b05ac5b16ea133"}, {"problem": 40, "code": "(fn [sep s]\n    (->> (interleave s (repeat sep))\n         vec\n         pop))", "user": "5ff64845e4b06df49cee1495"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "602d5eade4b0d5df2af22279"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "5baba1ece4b0a20761a23482"}, {"problem": 40, "code": "(fn [n list] (drop 1 (mapcat #(vector n %) list)))", "user": "5a778224e4b013a48d399761"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "600eb95de4b074f607df66a6"}, {"problem": 40, "code": "(fn [n x] (butlast(mapcat (fn [e] [e n]) x)))", "user": "60329afce4b0d5df2af222b8"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "603454cbe4b0d5df2af222cb"}, {"problem": 40, "code": "#(butlast (mapcat (fn [x] (list x %1)) %2))", "user": "6032f7f9e4b0d5df2af222b9"}, {"problem": 40, "code": "(fn my-interpose [val col]\n  (let [length (dec (count col)) last-item (last col)] \n    (concat (interleave col (repeat length val)) [last-item]))\n  )", "user": "6031926ae4b0d5df2af222ac"}, {"problem": 40, "code": "(fn my-interpose [v s]\n  (vec (rest (mapcat #(conj % v) (partition 1 s))))\n)", "user": "60335b35e4b0d5df2af222bf"}, {"problem": 40, "code": "(fn inter [x seq]\n   (if (empty? (rest seq))  seq \n     (cons (first seq ) (cons x ( inter x (rest seq))))))", "user": "5fc1c424e4b0edf42a5593d0"}, {"problem": 40, "code": "(fn v [sep list] (rest (flatten (map (fn [sep val] [sep val]) (repeat sep) list))))", "user": "60383d43e4b0d5df2af222ec"}, {"problem": 40, "code": "(fn introp [numb seqs]\n        (if (nil? (next  seqs))\n          seqs\n          (concat (vector (first seqs) numb) (introp  numb (rest seqs)))))", "user": "6038b6b4e4b0d5df2af222ef"}, {"problem": 40, "code": "(fn\n   [val coll]\n   (loop [ans [] curr-coll coll]\n     (if (empty? curr-coll)\n       (drop-last ans)\n       (recur (conj ans (first curr-coll) val) (rest curr-coll))\n       )\n     )\n   )", "user": "60337f1fe4b0d5df2af222c1"}, {"problem": 40, "code": "(fn [sep coll]\n    (->> coll\n         (mapcat (partial list sep))\n         rest\n         ))", "user": "58db48a5e4b0a4d5acaab679"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v ) coll)))", "user": "603961e3e4b0d5df2af222f3"}, {"problem": 40, "code": "#(rest(mapcat vector (repeat %1) %2))", "user": "603bfd17e4b0d5df2af22304"}, {"problem": 40, "code": "(fn [sep coll]\n  (drop 1 (interleave (repeat sep) coll)))", "user": "603d5f2ae4b0d5df2af2230c"}, {"problem": 40, "code": "(fn [i ls] (rest (mapcat vector (repeat (count ls) i) ls)))", "user": "603a6c40e4b0d5df2af222f7"}, {"problem": 40, "code": "(fn entropose[separator values](\nif (= 1 (count values)) (conj '() (first values))\n(conj (entropose separator (rest values)) separator (first values))\n))", "user": "602bca69e4b0d5df2af22267"}, {"problem": 40, "code": "(fn [v s]\n  (rest (mapcat #(list v %) s)))", "user": "603e29d4e4b0d5df2af22310"}, {"problem": 40, "code": ";; (fn [item collection]\n;;   (butlast (mapcat vector collection (repeat item))))\n\n(fn [value collection]\n  (next (interleave(repeat value) collection)))", "user": "603e9cb6e4b0d5df2af22317"}, {"problem": 40, "code": "(fn [spr ls] ( conj (mapcat #(list spr %) (rest ls)) (first ls)))", "user": "5fdc6ad4e4b05ac5b16ea13a"}, {"problem": 40, "code": "(fn ip [val coll]\n  (conj (mapcat #(list val %) (rest coll))\n        (first coll))\n  \n  )", "user": "60436423e4b02d28681c77a3"}, {"problem": 40, "code": "(fn m [s coll]\n  (rest (interleave (iterate identity s) coll ))\n)", "user": "6022429be4b0d5df2af22200"}, {"problem": 40, "code": "(fn [i coll] (drop 1 (mapcat vector (repeat i) coll)))", "user": "51f01925e4b0249c592fbdfc"}, {"problem": 40, "code": "(fn [n v]\n  (butlast (interleave v (repeat n))))", "user": "60460824e4b02d28681c77bc"}, {"problem": 40, "code": "(fn interp [a b]\n    (butlast (reduce (fn [acc v] (conj acc v a)) [] b))\n  )", "user": "603ae21de4b0d5df2af222fb"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "6046a0c7e4b02d28681c77c6"}, {"problem": 40, "code": "(fn cj [sep xs]\n  (case (count xs)\n    1 xs\n      ( concat [(first xs) sep] (cj sep (rest xs) ) )))", "user": "6045582fe4b02d28681c77b6"}, {"problem": 40, "code": "(fn f [sep coll]\n  \n  (drop-last 1 \n             ((fn iter [sep coll res]\n               (if (empty? coll) res (iter sep (rest coll) (concat res (cons (first coll) (cons sep ())))))\n               ) sep coll ())\n             )\n  )", "user": "60471241e4b02d28681c77c9"}, {"problem": 40, "code": "(fn [i xs] (butlast (mapcat list xs (repeat i))))", "user": "601c39eee4b0bf4ca6b10937"}, {"problem": 40, "code": "(fn f [delim args]\n   (loop [ans () x delim xs args]\n     (cond\n       (empty? xs) ans\n       (empty? ans)\n         (recur\n           (list (first xs))\n           delim\n           (rest xs)\n           )\n       :else\n         (recur\n           (concat ans (list delim (first xs)))\n           delim\n           (rest xs)\n           ))\n       )\n     )", "user": "60486e8ae4b02d28681c77db"}, {"problem": 40, "code": "(fn [x s]\n    (drop-last (mapcat #(list % x) s)))", "user": "6026d2cae4b0d5df2af22232"}, {"problem": 40, "code": "(fn [x y] (butlast (mapcat (fn [z] [z x]) y)))", "user": "604d3cb1e4b0b7ec0ac60ac2"}, {"problem": 40, "code": "; (fn [d coll]\n;   (butlast\n;    (reduce #(conj %1 %2 d) [] coll)))\n#(drop 1 (interleave (repeat %1) %2))", "user": "6020365ae4b0bf4ca6b10960"}, {"problem": 40, "code": "(fn interposer [x y]\n  (if(= 1 (count y))\n    y\n    (concat (list (first y) x) (interposer  x (drop 1 y)))))", "user": "604f4be1e4b0b7ec0ac60ace"}, {"problem": 40, "code": "(fn\n   [x collection]\n   (into [] (butlast (reduce\n                       (fn\n                         [coll item]\n                         (conj (conj coll item) x)) [] collection))))", "user": "60396c95e4b0d5df2af222f4"}, {"problem": 40, "code": "(fn [val values]\n  (pop (reduce #(conj (conj %1 %2) val) [] values)))", "user": "563e022be4b0da801c4e4664"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "60504383e4b056659d6341fa"}, {"problem": 40, "code": "(fn\n  [sep coll]\n  (-> (mapcat vector coll (repeat sep))\n      (drop-last)))", "user": "4e586949535d8a8b8723a292"}, {"problem": 40, "code": "(fn f [x coll]\n   (drop-last (reduce #(concat %1 [%2 x]) [] coll)))", "user": "60537cd1e4b04c8f2157d152"}, {"problem": 40, "code": "(fn [i c] (drop 1 (interleave (repeat i) c)))", "user": "598e7998e4b02b9968b84d34"}, {"problem": 40, "code": "(fn my-interpose\n  [sep coll]\n  (rest (reduce (fn [result el]\n            (into result [sep el]))\n          []\n          coll)))", "user": "600d9808e4b074f607df669c"}, {"problem": 40, "code": "(fn myinterpose [v s]\n\t(let [elem (first s) r (rest s)]\n      (if (empty? r) (list elem) (concat (list elem v) (myinterpose v r)) )))", "user": "6058e0a0e4b032d51aa7730d"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat (count %2) %1)))", "user": "526759b3e4b03e8d9a4a715b"}, {"problem": 40, "code": "(fn [sep ys] (concat [(first ys)] (mapcat #(vector sep %) (rest ys))))", "user": "603f6623e4b0d5df2af2231f"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "6040e6dbe4b0d5df2af2232a"}, {"problem": 40, "code": "(fn [x xs] (cons (first xs) (mapcat #(list x %) (rest xs))))", "user": "605b7a90e4b079a07f8593fc"}, {"problem": 40, "code": "(fn [s coll] (butlast (mapcat #(vector % s) coll)))", "user": "6059d2e0e4b07e92fa001ace"}, {"problem": 40, "code": "#((fn [sep l out] ( if (empty? l) (butlast out) (let [[h & t] l] (recur sep t (concat out [h sep])))) ) %1 %2 [])", "user": "6059d824e4b07e92fa001acf"}, {"problem": 40, "code": "(fn [n s] (butlast (mapcat vector s (#(repeat (count %2) %1) n s))))", "user": "6059d9c8e4b07e92fa001ad0"}, {"problem": 40, "code": "(fn\n  [v s]\n  (butlast (flatten (map #(list %1 %2) s (repeat v)))))", "user": "5ec02e20e4b00a66d4a95288"}, {"problem": 40, "code": "(fn [j arr] (butlast (mapcat #(vector % j) arr)))", "user": "5b522591e4b02d533a91bd09"}, {"problem": 40, "code": "(fn interp [item lst] (rest ( reduce (fn ins [slst cur_item] ( conj (conj slst item ) cur_item ) ) [] lst ) ))", "user": "600b385ce4b074f607df668d"}, {"problem": 40, "code": "(fn [sep seqq]\n  \n  (reduce \n   \n   (fn [acc e]\n     \n     (conj acc sep e)\n     \n     \n     \n     )\n   \n   \n   \n   \n   [(first seqq)]\n   (rest seqq)))", "user": "53b0750fe4b047364c044483"}, {"problem": 40, "code": "#(rest (mapcat (partial list %) %2))", "user": "60538924e4b04c8f2157d153"}, {"problem": 40, "code": "(fn [x col] (concat (flatten (map #(vector %1 x) (butlast col))) [(last col)]))", "user": "60606490e4b03746e80ebf67"}, {"problem": 40, "code": "(fn [sep coll] (butlast (mapcat #(vector %1 sep) coll)))", "user": "605b7085e4b079a07f8593fa"}, {"problem": 40, "code": "(fn my-interpose [sep coll]\n  (when-let [elem (first coll)]\n    (lazy-seq\n      (if (next coll)\n        (cons elem (cons sep (my-interpose sep (rest coll))))\n        (list elem)))))", "user": "6062e1bde4b03746e80ebf75"}, {"problem": 40, "code": "(fn [ separator myseq ]\n  (reverse (reduce (fn [a b]\n            (println (pr-str a))\n            (println (pr-str b))\n            (if (empty? a)\n              (cons b '())\n              (cons b (cons separator a))))\n          '()\n          myseq)))", "user": "5ff82adae4b06df49cee14a4"}, {"problem": 40, "code": "(fn [x s]\n  (rest (mapcat (partial vector x) s)))", "user": "6066266de4b069485764ddd2"}, {"problem": 40, "code": "(fn my-interpose [av s]\n  (reduce \n   (fn [col e] (if (= (count col) (- (* (count s) 2) 2)) \n                 (conj col e)\n                 (conj (conj col e) av)))\n   [] s))", "user": "6065755ee4b069485764ddcc"}, {"problem": 40, "code": "(fn interpose' [item coll]\n  (loop [[x & xs] coll\n         res []]\n    (if (empty? xs)\n      (conj  res x)\n      (recur xs (into res (vector x item))))))", "user": "60654263e4b069485764ddc9"}, {"problem": 40, "code": "(fn [ele coll]\n  (loop [[h & t :as c] coll acc []]\n    (cond\n      (empty? c) acc\n      (empty? t) (conj acc h)\n      :else      (recur t (conj acc h ele)))))", "user": "5f665d45e4b02876ed9fd02f"}, {"problem": 40, "code": "(fn [item seqen] (rest (interleave (repeat (count seqen) item) seqen)))", "user": "5f548678e4b0a0bc16850a7e"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "606aafcfe4b069485764ddf6"}, {"problem": 40, "code": "(fn\n   [v coll]\n   (loop [coll coll\n          res []]\n     (if (= (count coll) 1)\n       (into res coll)\n       (recur (next coll) (apply conj res [(first coll) v])))))", "user": "60631c2ee4b069485764ddbd"}, {"problem": 40, "code": "(fn [sep seq]\n  (rest (interleave (repeat sep) seq)))", "user": "6023a3abe4b0d5df2af22212"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "60689984e4b069485764dde6"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "606a70a5e4b069485764ddf2"}, {"problem": 40, "code": "(fn [n x] (rest (flatten (map list (repeat n) x))))", "user": "606e0a42e4b069485764de19"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "606b16b8e4b069485764ddf7"}, {"problem": 40, "code": "(fn [x s] (drop-last (interleave s (repeat x))))", "user": "606d7f1ce4b069485764de14"}, {"problem": 40, "code": "(fn [s l] (cons (first l) \n               (mapcat (fn [e] [s e]) (rest l))\n           )\n  )", "user": "606f005ae4b069485764de1b"}, {"problem": 40, "code": "(fn ipose [inter s]\n  (reduce #(conj %1 inter %2) [(first s)] (rest s)))", "user": "5f6adf5ee4b02876ed9fd049"}, {"problem": 40, "code": "(fn interpose-f' [n coll]\n  (reduce (fn [x y] (println x y)\n            (if (= (last coll) y)\n              (conj x y)\n              (conj (conj x y) n)))\n          [] coll))", "user": "605a876be4b000d535e6f53c"}, {"problem": 40, "code": "(fn [i coll] (butlast (mapcat #(vector % i) coll)))", "user": "5eedfc62e4b07c55ae4a050e"}, {"problem": 40, "code": "(fn [n nseq] (reverse (rest (reverse (reduce (fn [lst %] (conj (conj lst %) n)) [] nseq)))))", "user": "606d75f5e4b069485764de13"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "606c87aae4b069485764de0d"}, {"problem": 40, "code": "(fn f [sep [x & xs]]\n  (reduce\n   (fn [acc z]\n     (concat acc [sep z]))\n   [x]\n   xs))", "user": "605b49b7e4b079a07f8593f8"}, {"problem": 40, "code": "(fn\n [v s]\n    (butlast (mapcat #(cons % (list v)) s))\n)", "user": "6074f5ede4b069485764de52"}, {"problem": 40, "code": "#(drop-last (interleave  %2 (repeat %1)))", "user": "6059f25de4b07e92fa001ad1"}, {"problem": 40, "code": "(fn [a b] (butlast (mapcat #(vector % a) b)))", "user": "6074e088e4b069485764de4d"}, {"problem": 40, "code": "#(butlast \n  (interleave \n   %2 \n   (repeat %1)))", "user": "606e0e95e4b069485764de1a"}, {"problem": 40, "code": "(fn [n coll]\n  (reduce #(conj %1 n %2) (vector (first coll)) (rest coll))\n  )", "user": "6024544be4b0d5df2af2221f"}, {"problem": 40, "code": "(fn [x ls] (rest (interleave (iterate identity x) ls)))", "user": "605f5c69e4b03746e80ebf5e"}, {"problem": 40, "code": "(fn [x y] \n  (rest (mapcat #(vector x %1) y) ))   ;;; por cada elemento de y (map) agregamos al vector el primer elemento de x y despues lo quitamos con rest", "user": "6075c214e4b069485764de5b"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "60764350e4b069485764de5e"}, {"problem": 40, "code": "(fn [n ys] \n    (let [xs (reverse ys)]\n    ((fn iter [xs res]    \n        (if (empty? xs)\n            res\n            (iter (rest xs)\n                  (cons (first xs) (cons n res))))) (rest xs)\n                                                    (list (first xs)))))", "user": "606ff89be4b069485764de22"}, {"problem": 40, "code": "(fn [x xs] (rest (reduce (fn [acc y] (conj (conj acc x) y ) ) [] xs)) )", "user": "6076adb2e4b069485764de60"}, {"problem": 40, "code": "(fn my-interpose\n  [separator coll]\n  (cond\n   (empty? coll) nil\n   (empty? (rest coll)) coll\n   :else (conj (my-interpose separator (rest coll))\n               separator\n               (first coll))))", "user": "5cf938a5e4b0b71b1d808a90"}, {"problem": 40, "code": "(fn [a lst]\n  (conj \n   (loop [i 0 \n          res (vec '())]\n       (if (= i (dec (count lst)))\n           res\n           (recur \n            (inc i) \n            (-> res (conj (nth lst i)) (conj a)))))\n   (last lst)))", "user": "6074df6fe4b069485764de4b"}, {"problem": 40, "code": "(fn [comma coll]\n  (concat [(first coll)](mapcat #(vector comma %) (rest coll))))", "user": "607a1523e4b0a637ed78036a"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "607e1d32e4b03d835a6eaeda"}, {"problem": 40, "code": "(fn [value collection] (next (interleave (repeat value) collection)))", "user": "606ff56ce4b069485764de21"}, {"problem": 40, "code": ";;(fn [sep coll] (drop 1 (interleave (repeat sep) coll)))\n(fn interpos [sep coll]\n  (if-not (second coll)\n    coll\n    (cons (first coll)\n          (cons sep\n                (interpos sep (rest coll))))))", "user": "60794173e4b0a637ed78035d"}, {"problem": 40, "code": "(fn [arb rando-seq]\n  (loop [x rando-seq\n         y (empty rando-seq)]\n    (if (= (count x) 1)\n      (conj y (first x))\n      (recur (rest x) (conj y (first x) arb)))))", "user": "607d6bc1e4b03d835a6eaecc"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "60777335e4b0a637ed78034f"}, {"problem": 40, "code": "(fn [sep coll]\n   (reduce (fn [acc x] (conj acc sep x)) \n           [(first coll)]\n           (rest coll)))", "user": "5f82609ae4b0c071e6c840f9"}, {"problem": 40, "code": "#(rest (reduce (fn [acc new] (conj acc %1 new)) []  %2))", "user": "6070c7bae4b069485764de27"}, {"problem": 40, "code": "#(butlast (mapcat vector %2 (repeat %1)))", "user": "60836285e4b0736b099e42e4"}, {"problem": 40, "code": "#(drop-last (mapcat list %2 (repeat (count %2) %1)))", "user": "602c30e3e4b0d5df2af2226f"}, {"problem": 40, "code": "(fn my-interpose [sep coll]\n  (drop-last (mapcat list coll (repeat sep))))", "user": "608256d7e4b0736b099e42da"}, {"problem": 40, "code": "(fn [val s]\n   (conj\n    (vec\n     (flatten\n      (map (fn [x] [x val])\n           (take (-\n                  (count s) 1) s)))\n     )\n    (last s))\n   \n  )", "user": "59c87d49e4b0a024fb6ae55b"}, {"problem": 40, "code": "#(loop [original (drop 1 %2)\n        result [(first %2)]]\n   (if (empty? original)\n     result\n     (recur (drop 1 original) (concat result (cons %1 (list (first original)))))\n     ))", "user": "6074e278e4b069485764de51"}, {"problem": 40, "code": "#(vec (butlast (flatten (for [x %2] [x %1]))))", "user": "5f0a65dae4b09a3f05b71806"}, {"problem": 40, "code": "#(butlast (interleave %2 (repeat %1)))", "user": "5f755d0be4b02876ed9fd0a9"}, {"problem": 40, "code": "#(conj (vec(mapcat (fn[a][a %1])(butlast %2)))(last %2))", "user": "6045e761e4b02d28681c77bb"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "6086cdefe4b0736b099e4302"}, {"problem": 40, "code": "#(take (dec (* (count %2) 2)) (interleave %2 (repeat %)))", "user": "6081b7fce4b0736b099e42d4"}, {"problem": 40, "code": "(fn [separator lst] (butlast (mapcat #(vector % separator) lst)))", "user": "6074e1e4e4b069485764de4f"}, {"problem": 40, "code": "(fn [sep s] (rest (mapcat #(list sep %) s)))", "user": "607e1c1fe4b03d835a6eaed8"}, {"problem": 40, "code": "(fn interposer \n  ([int coll] (interposer int coll []))\n  ([int coll my-coll] \n   (if (empty? coll) \n     my-coll \n     (interposer int (rest coll) (if (= 1 (count coll))\n                                   (conj my-coll (first coll))\n                                   (conj my-coll (first coll) int))))))", "user": "6033f8e9e4b0d5df2af222c6"}, {"problem": 40, "code": "(fn [value seq]\n  (->> seq\n       (mapcat #(list % value))\n       (drop-last)))", "user": "60849bd6e4b0736b099e42f2"}, {"problem": 40, "code": "(fn spotip [v s]\n  (if (or (empty? s) (= (count s) 1))\n    s\n    (concat (take 1 s) (cons v (spotip v (rest s))))))", "user": "60882700e4b0ae75613dcedf"}, {"problem": 40, "code": "(fn sep [v s]\n  (rest (mapcat #(list v %) s)))", "user": "607dd962e4b03d835a6eaed2"}, {"problem": 40, "code": "(fn [x coll]\n  (rest\n   (mapcat list\n           (take (count coll) (cycle (list x)))\n           coll)\n   )\n  )", "user": "60752ef6e4b069485764de55"}, {"problem": 40, "code": "(fn [a, b] (reduce #(conj %1 a %2) [(first b)] (rest b)))", "user": "6088ed3fe4b0ae75613dcee6"}, {"problem": 40, "code": "(fn pb40\n  [a xs]\n  (let [aa (repeat (count xs) a)]\n    (drop-last (interleave xs aa))))", "user": "608135c8e4b0736b099e42d1"}, {"problem": 40, "code": "(fn [value seqq]\n  (reduce #(concat (if (sequential? %1) %1 [%1]) [value %2]) seqq))", "user": "6088395de4b0ae75613dcee2"}, {"problem": 40, "code": "(fn [x y](next (interleave (repeat x) y)))", "user": "6074dfa4e4b069485764de4c"}, {"problem": 40, "code": "(fn [valor colle] (butlast (mapcat #(vector % valor) colle)))", "user": "607e1cf9e4b03d835a6eaed9"}, {"problem": 40, "code": "(fn [v lst] (butlast (mapcat #(vector % v) lst)))", "user": "6074e1ade4b069485764de4e"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %1) %2))", "user": "608910a8e4b0ae75613dceed"}, {"problem": 40, "code": "(fn InterposeASeq [cha lst] \n  (reduce #(conj %1 cha %2) [(first lst)] (rest lst)))", "user": "607508f3e4b069485764de54"}, {"problem": 40, "code": "(fn inter[line[n & etc]](lazy-seq\n                         (when n(if etc\n                                  (cons n(cons line\n                                               (inter line etc)))\n                                  (cons n nil)))))", "user": "6085edade4b0736b099e42fc"}, {"problem": 40, "code": "(fn [value coll] (butlast (mapcat #(vector % value) coll)))", "user": "608b3fe1e4b0adce4b61c442"}, {"problem": 40, "code": "(fn [separator coll]\n   (drop-last (mapcat #(list % separator) coll)))", "user": "5e7fb908e4b085ba37836e3f"}, {"problem": 40, "code": "(fn [x lst] (rest (interleave (repeat x) lst)))", "user": "607e1d9de4b03d835a6eaedb"}, {"problem": 40, "code": "(fn [x collection] (butlast (mapcat #(vector % x) collection)))", "user": "608828dee4b0ae75613dcee1"}, {"problem": 40, "code": "(fn my-interpose [x y] (reverse (rest (reverse (interleave y (repeat (count y) x))))))", "user": "6078ce29e4b0a637ed78035a"}, {"problem": 40, "code": "(fn [c xs] (cons (first xs) (mapcat #(list c %) (rest xs))))", "user": "6089bc95e4b0ae75613dcef5"}, {"problem": 40, "code": "(fn [y xs] (drop 1 (interleave (repeat y) xs )))", "user": "5f77a0c1e4b02876ed9fd0bb"}, {"problem": 40, "code": "(fn [n s] (rest (mapcat #(list n %) s)))", "user": "607b6452e4b0a637ed780375"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "6087cb25e4b0ae75613dced8"}, {"problem": 40, "code": "#(vec(drop-last (interleave %2 (repeat %1))))", "user": "607f3336e4b05857a65e7747"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "6088c22ee4b0ae75613dcee4"}, {"problem": 40, "code": "(fn [x y] \n    (conj \n    (into [] (flatten(map #(conj []  %1 x) (drop-last y))))\n    (last y) \n  ))", "user": "60845eb8e4b0736b099e42ef"}, {"problem": 40, "code": "(fn [sep coll] (pop (reduce #(conj %1 %2 sep)[] coll)))", "user": "5f1eec36e4b0f565ad998274"}, {"problem": 40, "code": "(fn [rel coll] (reverse (rest(reverse (flatten (map (fn [x] (list x rel)) coll))))))", "user": "608ec5e4e4b03bd49d9f36c0"}, {"problem": 40, "code": "(fn ans-40 [separater arr]\n  (drop-last 1 (mapcat (fn [x] (list x separater)) arr)))", "user": "608fac60e4b03bd49d9f36c7"}, {"problem": 40, "code": "#(loop [sep %1\n         coll (rest %2)\n         result [(first %2)]]\n   (if (= '() coll)\n     result\n     (recur sep (rest coll) (conj result sep (first coll)))))", "user": "6090e617e4b03bd49d9f36ce"}, {"problem": 40, "code": "#(drop-last (mapcat list %2 (repeat %1)))", "user": "609083a8e4b03bd49d9f36cb"}, {"problem": 40, "code": "(fn interpose-a-seq [item s]\n  (loop [_s s result []]\n    (let [first_item (first _s)]\n      (if (not (nil? first_item))\n        (recur (next _s) (concat result \n          (if (not (nil? (next _s)))\n            [first_item item]\n            [first_item])))\n        result))))", "user": "605714ffe4b069ae89ce6ae1"}, {"problem": 40, "code": "(fn [i sq]\n   (loop [[fst & rst :as all] sq result [fst]]\n     (if (= 1 (count all))\n       result\n       (recur rst (conj (conj result i) (nth rst 0))))\n     ))", "user": "60759e51e4b069485764de5a"}, {"problem": 40, "code": "(fn [x lst] (butlast (mapcat #(vector % x) lst)))", "user": "608e6047e4b03bd49d9f36bf"}, {"problem": 40, "code": "(fn [sep coll]\n  (->> (repeat (count coll) sep)\n       (interleave coll)\n       (butlast)))", "user": "6098263be4b00e9e6653c3f9"}, {"problem": 40, "code": "(fn interpose-seq [sep col]\n  (vec (rest (mapcat (partial list sep) col))))", "user": "5fa52497e4b0fa27300f3dbf"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "609aa543e4b00e9e6653c40c"}, {"problem": 40, "code": "(fn [interposed-value s] (drop-last (mapcat #(vector %1 %2) s (repeat interposed-value))))", "user": "6096d37be4b00e9e6653c3f0"}, {"problem": 40, "code": "(fn [i c] (butlast (mapcat #(list % i) c)))", "user": "609c1db9e4b00e9e6653c416"}, {"problem": 40, "code": "(fn \n  [e c]\n  (rest (reduce #(conj %1 e %2) [] c)))", "user": "6086abade4b0736b099e42ff"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "608ee2f7e4b03bd49d9f36c1"}, {"problem": 40, "code": "(fn [v c]\n  (drop 1 (mapcat #(list v %) c)))", "user": "609a54f0e4b00e9e6653c40b"}, {"problem": 40, "code": "(fn [x s] \n  (rest (mapcat #(vector x %1) s) ))", "user": "6092bfefe4b00e9e6653c3db"}, {"problem": 40, "code": "(fn interpose-a-seq [v s]\n  (rest (mapcat #(list v %) s)))", "user": "608c270ae4b03bd49d9f36b3"}, {"problem": 40, "code": "(fn [v s]\n  (flatten\n   [(map list (butlast s) (repeat v))\n    (last s)]))", "user": "60a9f193e4b00e9e6653c476"}, {"problem": 40, "code": "#(drop-last (interleave %2 (repeat %1)))", "user": "60ab1536e4b00e9e6653c47e"}, {"problem": 40, "code": "(fn [sep s]\n  (reduce (fn [acc e]\n            (conj acc sep e))\n          [(first s)]\n          (rest s)))", "user": "60a39b80e4b00e9e6653c450"}, {"problem": 40, "code": "(fn _interpose [val seq]\n\t(drop-last (flatten (map (fn [x] (conj [x] val)) seq))))", "user": "60a7c55be4b00e9e6653c468"}, {"problem": 40, "code": "(fn [v xs] \n  (butlast (mapcat (fn [item] [item v]) xs)))", "user": "558ffb4be4b0277789237667"}, {"problem": 40, "code": "(fn \n   [x ys] \n   (drop 1 (interleave (repeat x) ys)))", "user": "52435d0ce4b076204b44fab5"}, {"problem": 40, "code": "(fn [x coll]\n  (butlast (interleave coll (repeat (count coll) x))))", "user": "60ade833e4b00e9e6653c494"}, {"problem": 40, "code": "#(-> (interleave %2 (repeat %1)) drop-last vec)", "user": "60a68a95e4b00e9e6653c461"}, {"problem": 40, "code": "(fn [x y]\n  (->> y\n       (reduce (fn [a b] (conj a b x)) [])\n       (drop-last)))", "user": "60aecd73e4b00e9e6653c49a"}, {"problem": 40, "code": "(fn itp [sep items]\n  (if (empty? (rest items))\n    items\n    (cons (first items) (cons sep (itp sep (rest items))))))", "user": "60b2aaebe4b0e0fa5f1b4228"}, {"problem": 40, "code": "#(butlast (mapcat list %2 (repeat %1)))", "user": "60ac91c5e4b00e9e6653c485"}, {"problem": 40, "code": "(fn ipseq [delim myseq]\n  (loop [result []\n         remseq myseq]\n    (if (empty? remseq)\n      (pop result)\n      (recur (conj (conj result (first remseq)) delim) (rest remseq)))))", "user": "60726211e4b069485764de36"}, {"problem": 40, "code": "(fn [v sq]\n  (loop [res [(first sq)]\n         lst (rest sq)]\n    (if (empty? lst)\n      res\n      (let [[x & r] lst]\n        (recur (conj res v x) r)))))", "user": "51b920bfe4b0e871ca4958f9"}, {"problem": 40, "code": "(fn\n  [sap coll]\n  (rest (reduce #(concat %1 [sap %2]) [] coll)))", "user": "60b1add0e4b0e0fa5f1b4227"}, {"problem": 40, "code": "#(drop 1 (interleave (repeat %) %2))", "user": "57123c96e4b09c608db70454"}, {"problem": 40, "code": "#(rest (interleave (repeat %1) %2))", "user": "60b7e2c5e4b0e0fa5f1b4252"}, {"problem": 40, "code": "(fn [sep coll]\n  (loop [out []\n         coll coll]\n    (let [head (first coll)\n          tail (rest  coll)]\n      (if head\n        (recur (conj (conj out sep) head) tail)\n        (rest out)))))", "user": "60b66033e4b0e0fa5f1b4248"}, {"problem": 40, "code": "(fn [a c1] (butlast (mapcat list c1 (repeat a))))", "user": "60b61b40e4b0e0fa5f1b4244"}, {"problem": 40, "code": "(fn my-interpose [x y] (if (-> y (count) (= 1))\n            y\n            (cons (first y) (cons x (my-interpose x (rest y))))\n            ))", "user": "6093cc08e4b00e9e6653c3e1"}, {"problem": 40, "code": "(fn [x y]\n      (drop-last (mapcat #(conj [%] x) y)))", "user": "60b3b375e4b0e0fa5f1b4232"}, {"problem": 40, "code": "(fn [sep coll]\n  (loop [coll coll\n         acc []]\n    (cond (empty? coll) acc\n          (empty? acc) (recur (next coll) (conj acc (first coll)))\n          :else (recur (next coll) (-> acc (conj sep) (conj (first coll)))))))", "user": "60b57acee4b0e0fa5f1b4238"}, {"problem": 40, "code": "(fn [s xs]\n  (loop [acc []\n         current (first xs)\n         xs (rest xs)]\n    (if (= 0 (count xs))\n      (concat acc [current])\n      (recur (concat acc [current s]) (first xs) (rest xs)))))", "user": "51bd78c3e4b0ff155d51d2b0"}, {"problem": 40, "code": "(fn [sep xs] (drop-last (mapcat list xs (repeat sep))))", "user": "60c0ceb7e4b0e0fa5f1b42a6"}, {"problem": 40, "code": "#(rest (reduce (fn [l x] (conj l %1 x)) [] %2))", "user": "5fd92743e4b05ac5b16ea11f"}, {"problem": 40, "code": "#(take (dec (* (count %2) 2))  \n   (interleave %2  \n   (take  (count %2) (repeat %))))", "user": "608e5697e4b03bd49d9f36be"}, {"problem": 40, "code": "(fn [v c] (butlast (mapcat #(vector % v) c)))", "user": "604a3daee4b02d28681c77f2"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "60c4e5dfe4b0e0fa5f1b42cd"}, {"problem": 40, "code": "(fn my-interpose [x xs]\n  (rest\n   (interleave (repeat x) xs)))", "user": "60c91f48e4b0e0fa5f1b4304"}, {"problem": 40, "code": "(fn\n  [v s]\n  (reduce\n   (fn [acc item]\n     (if (not= (* 2 (dec (count s))) (count acc))\n       (conj (conj acc item) v)\n       (conj acc item)))\n   []\n   s))", "user": "60b7ef35e4b0e0fa5f1b4254"}, {"problem": 40, "code": "(fn [sep coll]\n   (rest (mapcat \n     (fn [x] (vector sep x))\n     coll)))", "user": "60cb3836e4b0e0fa5f1b4315"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "60c7c23be4b0e0fa5f1b42eb"}, {"problem": 40, "code": "(fn my-interleave\n      [v coll]\n      (rest (mapcat #(apply vector [v %]) coll)))", "user": "60c90322e4b0e0fa5f1b4302"}, {"problem": 40, "code": "#(butlast (mapcat vector %2 (repeat %1)))", "user": "5e3d183fe4b01d43a70e8e11"}, {"problem": 40, "code": "(fn [x y] (flatten (conj [] (map #(conj [] %2 %1) (repeat x) (butlast y)) (last y) ) ))", "user": "60d78d64e4b0d60f5ea6f7ed"}, {"problem": 40, "code": "(fn [v coll] (butlast (mapcat #(vector % v) coll)))", "user": "60dd865ee4b0d8b48c489db3"}, {"problem": 40, "code": "(fn my-interpose\n  [x coll]\n  (drop-last\n   (interleave coll\n               (take (count coll) (repeat x)))))", "user": "60c43b20e4b0e0fa5f1b42c9"}]