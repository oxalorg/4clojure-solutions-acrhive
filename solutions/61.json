[{"code": "(fn [m c1 c2] (if (and (seq c1) (seq c2))  (recur (assoc m (first c1) (first c2)) (rest c1) (rest c2)) m)) {}", "problem": 61, "user": "4dbbdf86535d3f4042261ece"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4dd6fa35535d2dad7130b5cd"}, {"code": "#(apply hash-map (mapcat list % %2))", "problem": 61, "user": "4dce6e41535d5973398f92a2"}, {"code": "(fn my-zipmap [ls rs]\r\n  (loop [an {}, ls ls, rs rs]\r\n    (if (or (empty? ls) (empty? rs))\r\n      an\r\n      (recur (conj an [(first ls)\r\n                       (first rs)])\r\n             (rest ls) (rest rs)))))", "problem": 61, "user": "4dd62278535d2dad7130b5c7"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4dc986d0535d5973398f9285"}, {"code": "(fn map-construct [xs ys]\r\n  (if (or (empty? xs) (empty? ys))\r\n    {}\r\n    (merge {(first xs) (first ys)}\r\n           (map-construct (next xs) (next ys)))))", "problem": 61, "user": "4dd023dd535d5973398f92ad"}, {"code": "(fn [coll1 coll2]\r\n    (reduce conj {}\r\n            (map #(vector %1 %2) coll1 coll2)))", "problem": 61, "user": "4dd61f98535d2dad7130b5c6"}, {"code": "(fn [keys vals]\r\n  (apply hash-map (interleave keys vals)))", "problem": 61, "user": "4dd6d6a0535d2dad7130b5ca"}, {"code": "#(reduce (fn [acc [k v]]\r\n      (assoc acc k  v))\r\n\t  {}\r\n\t  (map vector % %2))", "problem": 61, "user": "4dd6d7ee535d2dad7130b5cb"}, {"code": "#(reduce conj (map hash-map %1 %2))", "problem": 61, "user": "4dadca03c9a9d6ed4199dc57"}, {"code": "(fn [keys vals]\r\n    (loop [map {}\r\n           ks (seq keys)\r\n           vs (seq vals)]\r\n      (if (and ks vs)\r\n        (recur (assoc map (first ks) (first vs))\r\n               (next ks)\r\n               (next vs))\r\n        map)))", "problem": 61, "user": "4dd579b5535dae65d5c462ea"}, {"code": "(fn mzipmap [lst mst]\r\n  (loop [ls lst ms mst h (hash-map)]\r\n    (if (or (= nil (first ls))\r\n      (= nil (first ms)))\r\n      h\r\n      (recur (rest ls) (rest ms) (merge h {(first ls) (first ms)})))))", "problem": 61, "user": "4ddc620d535d02782fcbea06"}, {"code": "(fn  [keys vals]\r\n    (loop [map {}\r\n           ks (seq keys)\r\n           vs (seq vals)]\r\n      (if (and ks vs)\r\n        (recur (assoc map (first ks) (first vs))\r\n               (next ks)\r\n               (next vs))\r\n        map)))", "problem": 61, "user": "4dd52e29535dae65d5c462e5"}, {"code": "(comp (partial into {}) (partial map vector))", "problem": 61, "user": "4ddbd934535d02782fcbe9fc"}, {"code": "(fn [a b] (apply merge (map #(assoc {} %1 %2) a b)))", "problem": 61, "user": "4db1fe241254ad5b4805fa77"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4dddf817535d08e6dec9fdd3"}, {"code": "(fn [ks vs]\r\n    (reduce (fn [m [k v]] (assoc m k v))\r\n            {} (map list ks vs)))", "problem": 61, "user": "4ddc1c89535d02782fcbea01"}, {"code": "(fn [ks vs] (into {} (map vector ks vs)))", "problem": 61, "user": "4dc7f472535d8a4b2fd74293"}, {"code": "(comp (partial apply hash-map) interleave)", "problem": 61, "user": "4db27319535df7e46ed9b6bd"}, {"code": "(fn [c1 c2]\r\n  (loop [c1 c1\r\n         c2 c2\r\n         r {}]\r\n    (if (some empty? [c1 c2])\r\n      r\r\n      (recur (rest c1) (rest c2) (conj r [(first c1) (first c2)])))))", "problem": 61, "user": "4de2f44f535d08e6dec9fdec"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4ddbfb8a535d02782fcbea00"}, {"code": "(fn [x y]\r\n  (loop [kx (seq x)\r\n         vy (seq y) \r\n         c {}]\r\n    (if (and kx vy)\r\n      (recur \r\n        (next kx)\r\n        (next vy)\r\n        (assoc c (first kx) (first vy)))\r\n      c)))", "problem": 61, "user": "4ddee37c535d08e6dec9fddc"}, {"code": "(fn [a b] (into {} (map #(hash-map % %2) a b)))", "problem": 61, "user": "4ddbdc1b535d02782fcbe9fd"}, {"code": "(fn [ks vs] (into {} (map (fn [a b] [a b]) ks vs)))", "problem": 61, "user": "4db86aee535d1e037afb2193"}, {"code": "#(apply merge (map hash-map % %2))", "problem": 61, "user": "4de77a0a535d08e6dec9fdfa"}, {"code": "(fn [a, b] \r\n(apply hash-map (interleave a b)))", "problem": 61, "user": "4ddeb916535d08e6dec9fdd9"}, {"code": "(fn z [k v]\r\n  (letfn [(h [k v r]\r\n            (if (or (empty? k) (empty? v))\r\n                r\r\n                (assoc (h (rest k) (rest v) r) (first k) (first v))))]\r\n        (h k v (hash-map))))", "problem": 61, "user": "4df1ce44535d08e6dec9fe1f"}, {"code": "#(apply hash-map (flatten (map vector %1 %2)))", "problem": 61, "user": "4deb529a535d08e6dec9fe04"}, {"code": "(fn [keys values]\r\n  (loop [kr keys vr values e {}]\r\n    (let [k (first kr) v (first vr)]\r\n      (if (or (nil? k) (nil? v)) e\r\n        (recur (rest kr) (rest vr) (assoc e k v))))))", "problem": 61, "user": "4dee4a9c535d08e6dec9fe11"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4df3d4f4535d08e6dec9fe2c"}, {"code": "(fn [keys vals]\r\n  (reduce #(assoc %1 (first %2) (last %2))\r\n    {} (map #(list %1 %2) keys vals)))", "problem": 61, "user": "4df407c3535d08e6dec9fe2e"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4de623ef535d08e6dec9fdf4"}, {"code": "(fn zm [ks vs]\r\n  (apply hash-map (interleave ks vs)))", "problem": 61, "user": "4dfd4ba8535d04ed9115e781"}, {"code": "(fn to-map [ks vs]\r\n  (if (or (empty? vs) (empty? ks))\r\n    {}\r\n    (merge {(first ks) (first vs)} (to-map (rest ks) (rest vs))) ))", "problem": 61, "user": "4df3df8a535d08e6dec9fe2d"}, {"code": "(fn [a b] (apply hash-map (mapcat #(vector %1 %2) a b)))", "problem": 61, "user": "4def301c535d08e6dec9fe12"}, {"code": "(fn [ks vs]\r\n  (loop [mp {} ks ks vs vs]\r\n    (if (or (empty? ks) (empty? vs)) mp\r\n        (recur (assoc mp (first ks) (first vs)) \r\n               (rest ks)\r\n               (rest vs)))))", "problem": 61, "user": "4e02bee8535d04ed9115e791"}, {"code": "(fn [a b]\r\n  (apply hash-map (interleave a b)))", "problem": 61, "user": "4e03b010535d04ed9115e794"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4e03c616535d04ed9115e796"}, {"code": "(fn my-zipmap [a b] (apply array-map (interleave a b)))", "problem": 61, "user": "4df669d4535d08e6dec9fe35"}, {"code": "#(reduce conj {} (map (fn [k v] [k v]) %1 %2))", "problem": 61, "user": "4e07eac0535d04ed9115e7a9"}, {"code": "#(apply merge(map hash-map%%2))", "problem": 61, "user": "4dd66da7535d2dad7130b5c8"}, {"code": "(fn lo [x y]\r\n  (loop [xar {} ks x vs y]\r\n    (let [k (first ks) v (first vs)] \r\n    (if (and k v)\r\n      (recur (assoc xar k v)\r\n              (rest ks)(rest vs))\r\n      xar\r\n    )\r\n  )\r\n))", "problem": 61, "user": "4de18de7535d08e6dec9fde8"}, {"code": "(fn [a b] (apply merge (map hash-map a b)))", "problem": 61, "user": "4e0e0529535d04ed9115e7b9"}, {"code": "(fn zm [one two]\r\n   (when (and one\r\n              two)\r\n     (conj {(first one) (first two)}\r\n           (zm (next one) (next two)))))", "problem": 61, "user": "4e0d8c27535d04ed9115e7b7"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4dbd0161535d020aff1edf3f"}, {"code": "#(loop [[k & ks] %1 [v & vs] %2 r {} a assoc s seq]\r\n     (if (and (s vs) (s ks))\r\n         (recur ks vs (a r k v) a s)\r\n         (a r k v)))", "problem": 61, "user": "4dae869dedd6309eace4d154"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4daa374930acd6ed13482a68"}, {"code": "(fn zmap [v1 v2]\r\n  (loop [m {}, vv1 v1, vv2 v2]\r\n    (if (or (nil? (seq vv1)) (nil? (seq vv2)))\r\n      m\r\n      (recur (assoc m (first vv1) (first vv2)) \r\n             (rest vv1) (rest vv2)))))", "problem": 61, "user": "4e123905535d04ed9115e7ce"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4e1158aa535d04ed9115e7c6"}, {"code": "(fn[a b]\r\n  (apply merge (map #(assoc {} %1 %2) a b)))", "problem": 61, "user": "4deff9f9535d08e6dec9fe15"}, {"code": "(fn mymapcons [k v]\r\n    (apply assoc {}\r\n     (apply concat (map #(list %1 %2) k v))))", "problem": 61, "user": "4e1b2cd9535d04ed9115e7fd"}, {"code": "(fn [keys vals] (apply hash-map (interleave keys vals)))", "problem": 61, "user": "4e14108c535d04ed9115e7dd"}, {"code": "(fn create-map \r\n  ([x y]\r\n    (create-map (rest x) (rest y) (vector (first x) (first y))))\r\n  ([x y z]\r\n    (if (some #(= 0 (count %)) (list x y))\r\n      (apply hash-map z)\r\n      (recur (rest x) (rest y) (conj z (first x) (first y))))))", "problem": 61, "user": "4e16bdef535d04ed9115e7e9"}, {"code": "#(apply hash-map (mapcat list % %2))", "problem": 61, "user": "4e14b925535d04ed9115e7df"}, {"code": "(fn [coll1 coll2] (into {} (map #(do [%1 %2]) coll1 coll2)))", "problem": 61, "user": "4e22b78b535d04ed9115e81e"}, {"code": "(fn map-con [a b] (apply hash-map (interleave a b)))", "problem": 61, "user": "4ddb339c535d02782fcbe9f9"}, {"code": "(fn [k v]\n  (apply hash-map (mapcat vector k v)))", "problem": 61, "user": "4de165f3535d08e6dec9fde6"}, {"code": "(fn [x y]\n  (apply hash-map (interleave x y)))", "problem": 61, "user": "4e28120f535deb9a81d77efa"}, {"code": "(fn [& args] (into {} (apply map vector args)))", "problem": 61, "user": "4e31a15c535deb9a81d77f1e"}, {"code": "#(into {} (map hash-map % %2))", "problem": 61, "user": "4e307313535deb9a81d77f14"}, {"code": "(fn [xs ys]\r\n   (loop [xs xs ys ys m {}]\r\n     (if (or (nil? (seq xs))\r\n             (nil? (seq ys)))\r\n       m\r\n       (recur (rest xs) (rest ys) (assoc m (first xs) (first ys))))))", "problem": 61, "user": "4e26e8b4535deb9a81d77ef6"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "4e21c0c7535d04ed9115e818"}, {"code": "(fn [arg-keys arg-vals]\n  (reduce \n    (fn [hsh [k v]] (assoc hsh k v)) \n    {} \n    (map list arg-keys arg-vals)))", "problem": 61, "user": "4e2f9e71535deb9a81d77f11"}, {"code": "(comp (partial apply hash-map) interleave)", "problem": 61, "user": "4daef21cedd6309eace4d169"}, {"code": "#(into {}\n       (map vec (partition 2 (interleave % %2))))", "problem": 61, "user": "4e3996b0535deb9a81d77f41"}, {"code": "(fn [x y] (apply hash-map (interleave x y)))", "problem": 61, "user": "4e3ac1b2535deb9a81d77f4c"}, {"code": "(fn my-zipmap [keys vals]\n  (loop [map {}\n         ks (seq keys)\n         vs (seq vals)]\n    (if (and ks vs)\n      (recur (assoc map (first ks) (first vs))\n             (next ks)\n             (next vs))\n      map)))", "problem": 61, "user": "4e39fb68535deb9a81d77f47"}, {"code": "(fn [x y]\n  (apply sorted-map (flatten\n    (map\n      (fn [one two] (list one two))\n    x y)\n  ))\n)", "problem": 61, "user": "4e3456f9535deb9a81d77f2a"}, {"code": "(fn zipm \n  \n  ([v1 v2 m] (if (or (empty? v1)(empty? v2)) m \n(zipm (rest v1) (rest v2) (conj m {(first v1) (first v2)}) ) ))\n  ([v1 v2] (zipm v1 v2 {})) \n)", "problem": 61, "user": "4e3a9dae535deb9a81d77f4a"}, {"code": "(fn [coll1 coll2]\n  (let [zmap (fn [res coll1 coll2]\n              (if (or (empty? coll1) (empty? coll2))\n                res\n                (recur (assoc res (first coll1) (first coll2))\n                       (rest coll1) (rest coll2))))]\n  (zmap {} coll1 coll2)))", "problem": 61, "user": "4e42f930535dc968683fc49f"}, {"code": "(fn [x y]\n  (apply hash-map (interleave x y)))", "problem": 61, "user": "4e333091535deb9a81d77f25"}, {"code": "#(reduce into (map hash-map % %2))", "problem": 61, "user": "4e49badd535dc968683fc4c9"}, {"code": "#(loop [r {} k %1 v %2] \n  (if (or (empty? k) (empty? v))\n      r\n      (recur (conj r {(first k) (first v)})\n              (rest k) (rest v))))", "problem": 61, "user": "4e4870d1535dc968683fc4bc"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4e4ae5aa535dc968683fc4d2"}, {"code": "(fn [ks vs]\n  (apply hash-map (interleave ks vs)))", "problem": 61, "user": "4e513ecf535dc968683fc4f6"}, {"code": "(fn my-zipmap\n  [ks vs]\n  (apply hash-map (interleave ks vs)))", "problem": 61, "user": "4e50b67b535dc968683fc4ed"}, {"code": "(fn fx [k v]\n  (loop [m {}, k k, v v]\n    (if (and k v)\n      (recur\n        (assoc m (first k) (first v))\n        (next k)\n        (next v))\n      m)))", "problem": 61, "user": "4e4ad154535dc968683fc4d1"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4e12cc9d535d04ed9115e7d2"}, {"code": "#(into {} (map hash-map % %2))", "problem": 61, "user": "4e52d815535d302ef430da77"}, {"code": "#(apply conj {} (map vec (partition 2 (interleave % %2))))", "problem": 61, "user": "4e399685535deb9a81d77f40"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4e513758535dc968683fc4f3"}, {"code": "#(into{}(map vector %1 %2))", "problem": 61, "user": "4e5411e8535d8a8b8723a279"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4e5676b2535d8a8b8723a282"}, {"code": "#(reduce conj (map hash-map %1 %2))", "problem": 61, "user": "4e39d763535deb9a81d77f46"}, {"code": "(fn [coll1 coll2] (apply hash-map (interleave coll1 coll2)))", "problem": 61, "user": "4e4bd94b535dc968683fc4d7"}, {"code": "#(apply hash-map (apply concat (map vector %1 %2)))", "problem": 61, "user": "4e521cef535d302ef430da6d"}, {"code": "(fn[s1 s2]\n  (apply hash-map (mapcat (fn[a b] [a b]) s1 s2)))", "problem": 61, "user": "4e58bcd4535d8a8b8723a296"}, {"code": "(fn zip-map\n  ([keys values] (zip-map keys values {}))\n  ([keys values map]\n    \n(cond\n  (or (empty? keys) (empty? values)) map\n  :else (let\n    [key (first keys) val (first values)\n     nkeys (rest keys) nvals (rest values) ]\n\n(zip-map nkeys nvals (assoc map key val))))))", "problem": 61, "user": "4e356d2b535deb9a81d77f2d"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4e593dac535d8a8b8723a29c"}, {"code": "#(apply array-map (interleave % %2))", "problem": 61, "user": "4e589bdc535d8a8b8723a295"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4e597b2c535d8a8b8723a29d"}, {"code": "(fn [k v]\n  (loop [m {} a k b v]\n    (if (or (empty? a) (empty? b))\n      m\n      (recur \n        (assoc m (first a) (first b)) \n        (rest a) \n        (rest b)))))", "problem": 61, "user": "4e5c801e535d8a8b8723a2c1"}, {"code": "(fn [x y] (loop [res {} ks x vs y]\n                        (if (or (empty? vs) (empty? ks))\n                            res\n                            (recur (assoc res (first ks) (first vs))\n                                   (rest ks)\n                                   (rest vs))\n                            )\n                        ))", "problem": 61, "user": "4db58ccb535d87e67b28fe10"}, {"code": "#(into {} (map (fn [x y] [x y]) % %2))", "problem": 61, "user": "4dad938fc9a9d6ed1b99dc57"}, {"code": "(fn [a b] (reduce into (map #(hash-map %1 %2) a b)))", "problem": 61, "user": "4e4b911f535dc968683fc4d6"}, {"code": "(fn ass \n  ([c1 c2]\n    (ass c1 c2 {}))\n  ([c1 c2 acc]\n    (if (or (empty? c1) (empty? c2))\n      acc\n      (recur (rest c1) \n             (rest c2) \n             (assoc acc (first c1) (first c2))))))", "problem": 61, "user": "4e5a2403535d8a8b8723a2a7"}, {"code": "(fn [ks vs] (apply hash-map (interleave ks vs)))", "problem": 61, "user": "4dad7adac9a9d6ed0599dc57"}, {"code": "#(apply hash-map (mapcat vector %1 %2))", "problem": 61, "user": "4e3bccb1535deb9a81d77f55"}, {"code": "#(reduce conj {} (map vector %1 %2))", "problem": 61, "user": "4e615cd2535d8ccf87e9fe58"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4e588e84535d8a8b8723a294"}, {"code": "(fn build-vex [keys values]\n  (into {} (map vector keys values)))", "problem": 61, "user": "4e50c894535dc968683fc4ee"}, {"code": "(comp (partial apply hash-map) interleave)", "problem": 61, "user": "4e5914e0535d8a8b8723a29b"}, {"code": "#(loop [map {}\n           ks (seq %1)\n           vs (seq %2)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map))", "problem": 61, "user": "4e44358f535dc968683fc4a8"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4e5ecd65535d8a8b8723a2d6"}, {"code": "#(loop [x %1 y %2 acc {}] \r\n  (if (or (empty? x) (empty? y))\r\n    acc\r\n    (recur (rest x) (rest y) (assoc acc (first x) (first y)))))", "problem": 61, "user": "4e5a3891535d8a8b8723a2aa"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4e5f08c7535d8a8b8723a2da"}, {"code": "(fn f [ks vs]\n  (when (and (not-empty ks) (not-empty vs))\n    (assoc (f (rest ks) (rest vs)) (first ks) (first vs))))", "problem": 61, "user": "4e68dbd5535d8ccf87e9fe8f"}, {"code": "(fn zipmap-\n  [keys vals]\n  \"61. Write a function which takes a vector of keys and a vector of values and constructs a map from them.\"\n  (apply hash-map (interleave keys vals)))", "problem": 61, "user": "4e5eb843535d8a8b8723a2d4"}, {"code": "(fn [ks vs]\n  (into {} (map vector ks vs)))", "problem": 61, "user": "4e68c434535d8ccf87e9fe89"}, {"code": "(fn [c1 c2]\n  (into {} (map #(conj [] %1 %2) c1 c2)))", "problem": 61, "user": "4db045b5838c48654951d9be"}, {"code": "#(apply hash-map (apply mapcat list %&))", "problem": 61, "user": "4e6a48d5535d8ccf87e9febd"}, {"code": "(fn zipmap-\n  [keys vals]\n  (reduce conj {} (map (fn [k v] [k v]) keys vals)))", "problem": 61, "user": "4e5bff2b535d8a8b8723a2bd"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4e6a97a9535d8ccf87e9fef8"}, {"code": "(fn [v1 v2]\n  (loop [[h1 & t1] v1\n         [h2 & t2] v2\n         acc       {}]\n   (if (or (nil? h1) (nil? h2))\n      acc\n      (recur t1  t2 (assoc acc h1 h2)))))", "problem": 61, "user": "4e68b46c535d8ccf87e9fe87"}, {"code": "#(into {} (apply map vector %&))", "problem": 61, "user": "4e6b3fc8535d8ccf87e9ff0f"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4e6dd51b535d5021c1a895f6"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4e6a60cd535d8ccf87e9fed7"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4e5fe31a535d8ccf87e9fe50"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4e6a412e535d8ccf87e9feb6"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4e6e6630535d5021c1a89609"}, {"code": "#(into {} (map hash-map %1 %2))", "problem": 61, "user": "4e5bdc2b535d8a8b8723a2bb"}, {"code": "(fn zm [l1, l2]\n  (cond\n    (empty? l1) {}\n    (empty? l2) {}\n    :else (let [m (zm (rest l1) (rest l2))]\n      (assoc m (first l1) (first l2))\n    )\n))", "problem": 61, "user": "4e6e10d8535d5021c1a895fd"}, {"code": "(fn [a b] (reduce conj {} (map vector a b)))", "problem": 61, "user": "4e6dc95a535d5021c1a895f1"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4e6dd0f5535d5021c1a895f3"}, {"code": "(fn [a b] (reduce #(let [[k v] %2] (assoc %1 k v)) {} (map #(vector %1 %2) a b)))", "problem": 61, "user": "4e6a5f5c535d8ccf87e9fed6"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4e6defcc535d5021c1a895f8"}, {"code": "#(into {} (apply map (fn [a b] [a b]) %&))", "problem": 61, "user": "4e7115b3535d5021c1a89647"}, {"code": "#(reduce (fn [m [k v]] (assoc m k v)) {} \n  (partition 2 (interleave %1 %2)))", "problem": 61, "user": "4e6f1b7a535d5021c1a89618"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4e2b1d48535deb9a81d77f03"}, {"code": "(fn  [klist vlist]\n  (reduce #(assoc %1 (klist %2) (vlist %2)) {} (range (min (count klist) (count vlist)))))", "problem": 61, "user": "4e6e3a1e535d5021c1a89602"}, {"code": "#(loop [acc {}, keys %1, vals %2]\n  (cond\n    (empty? keys) acc\n    (empty? vals) acc\n    :else (recur (conj acc [(first keys) (first vals)])\n                 (rest keys)\n                 (rest vals))))", "problem": 61, "user": "4e6a2f93535d8ccf87e9feaa"}, {"code": "(fn \n  [keys vals]\n    (loop [map {}\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map)))", "problem": 61, "user": "4daedd1eedd6309eace4d164"}, {"code": "(fn  zm [[k & ks :as kcoll]\n          [v & vs :as vcoll]]\n  (when (and (seq kcoll) (seq vcoll))\n    (assoc (zm ks vs) k v)))", "problem": 61, "user": "4e71705e535d5021c1a89649"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4e6df3c9535d5021c1a895fa"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "4e720985535d5021c1a89655"}, {"code": "(fn [c1 c2] (into {} (map vector c1 c2)))", "problem": 61, "user": "4e6fa38b535d5021c1a89622"}, {"code": "(fn [ks vs]\n  (apply hash-map (flatten (map #(list %1 %2) ks vs))))", "problem": 61, "user": "4e6a2f51535d8ccf87e9fea9"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4e68be01535d8ccf87e9fe88"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4e50e2a0535dc968683fc4ef"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4e498df9535dc968683fc4c4"}, {"code": "(fn [x y] (loop [x x y y result {}] (if (and (seq x) (seq y)) (recur (rest x) (rest y) (assoc result (first x) (first y))) result)))", "problem": 61, "user": "4e6a4edd535d8ccf87e9fec4"}, {"code": "#(into {} (map (fn [k v] (assoc {} k v)) %1 %2))", "problem": 61, "user": "4e79a143535db169f9c796a2"}, {"code": "(fn [k v]\n  (loop [keycol k vcol v m {}]\n    (if (or (empty? keycol)(empty? vcol))\n      m\n      (recur (rest keycol) (rest vcol)(assoc m (first keycol) (first vcol)))\n      )\n    )\n  )", "problem": 61, "user": "4db7da66535d1e037afb2187"}, {"code": "(fn zipmap* [ks vs]\n  (let [impl (fn impl [acc ks vs]\n    (if (or (empty? ks) (empty? vs))\n      acc\n      (recur (conj acc [(first ks) (first vs)])\n          (rest ks) (rest vs))))]\n    (impl {} ks vs)))", "problem": 61, "user": "4e691c79535d8ccf87e9fe97"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4df0524e535d08e6dec9fe17"}, {"code": "(fn [keys values]\n  (apply hash-map (interleave keys values)))", "problem": 61, "user": "4e7c8fd1535db169f9c796be"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4e71da4d535d5021c1a89653"}, {"code": "(fn [& s] (apply hash-map (apply interleave s)))", "problem": 61, "user": "4daf907aedd6309eace4d17b"}, {"code": "(fn [keys vals](apply array-map (mapcat list keys vals)))", "problem": 61, "user": "4e739e13535dff18050a9c76"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4e7dd982535db169f9c796ee"}, {"code": "#(apply hash-map (mapcat list % %2))", "problem": 61, "user": "4e7db3b4535db169f9c796e1"}, {"code": "#(apply hash-map (mapcat list %1 %2))", "problem": 61, "user": "4e7dfab0535db169f9c796f9"}, {"code": "#(apply hash-map (mapcat list % %2))", "problem": 61, "user": "4e7e55ab535db169f9c79711"}, {"code": "#(into{}(map vector%1%2))", "problem": 61, "user": "4e7eff9e535db966e863cc38"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "4e773be8535d324fb2983d6e"}, {"code": "(fn zm   [a b]\n\n    (if (or (empty? a) (empty? b))\n      '{}\n\n      (conj {(first a) (first b)} (zm (rest a) (rest b)))\n\n)\n\n    )", "problem": 61, "user": "4e78c208535db95036265722"}, {"code": "(fn x [r [a & at] [b & bt]] (let [rr (conj r {a b})] (if (= false (empty? at) (empty? bt)) (x rr at bt) rr))) {}", "problem": 61, "user": "4e7f4147535db966e863cc3d"}, {"code": "#(apply array-map (interleave % %2))", "problem": 61, "user": "4e794004535db169f9c796a1"}, {"code": "(fn [left right]\n  (loop [pairs (interleave left right) m {}]\n    (if (empty? pairs) \n    m\n    (recur (drop 2 pairs) (assoc m (first pairs) (second pairs))))))", "problem": 61, "user": "4e7e05a6535db169f9c796fe"}, {"code": "(fn [ks vs] (apply hash-map (interleave ks vs)))", "problem": 61, "user": "4dcc5aff535d5973398f9293"}, {"code": "(fn [keys vals]\n  (loop [map {}\n         ks (seq keys)\n         vs (seq vals)]\n    (if (and ks vs)\n     (recur (assoc map (first ks) (first vs))\n             (next ks)\n             (next vs))\n      map)))", "problem": 61, "user": "4e6a73d0535d8ccf87e9fee7"}, {"code": "(fn [ks vs] \n  (reduce merge \n    (map (fn [k v] {k v}) ks vs)))", "problem": 61, "user": "4e6ab9cb535d8ccf87e9fefe"}, {"code": "(fn my-zipmap\n  [keys vals]\n  (apply merge\n         (map #(assoc {} (first %) (fnext %))\n              (partition 2 (interleave keys vals)))))", "problem": 61, "user": "4e7f51eb535db966e863cc3f"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4e43b0d9535dc968683fc4a3"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4e765170535d324fb2983d69"}, {"code": "(fn [s1 s2]\n  (loop [c1 s1, c2 s2, r {}]\n    (let [f1 (first c1), f2 (first c2)]\n      (if (and f1 f2)\n        (recur (rest c1) (rest c2)\n               (assoc r f1 f2))\n        r))))", "problem": 61, "user": "4e7e4d5c535db169f9c7970f"}, {"code": "#(into {} (apply map (fn [a b] [a b]) %&))", "problem": 61, "user": "4e80d71b535db62dc21a62b7"}, {"code": "(fn [a b] (apply merge (map (fn [k v] (assoc {} k v)) a b)))", "problem": 61, "user": "4e823f41535db62dc21a62c8"}, {"code": "(fn [a b] (into {} (map vector a b)))", "problem": 61, "user": "4e78dc98535db95036265724"}, {"code": "#(reduce into (map hash-map %1 %2))", "problem": 61, "user": "4e5a460f535d8a8b8723a2ab"}, {"code": "(fn zippo\n  ([k v] (zippo k v {}))\n  ([k v m] (if (or (empty? k) (empty? v))\n             m\n             (zippo (rest k) (rest v) (assoc m (first k) (first v))))))", "problem": 61, "user": "4e7ada51535db169f9c796ae"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4e46e48b535dc968683fc4b7"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4e823ed7535db62dc21a62c7"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4db858d1535d1e037afb218c"}, {"code": "(fn [ks vs]\n  (loop [ks ks vs vs result {}]\n    (if (or (empty? ks) (empty? vs))\n        result\n        (recur (rest ks) (rest vs)\n               (assoc result (first ks) (first vs))))))", "problem": 61, "user": "4e4b4564535dc968683fc4d3"}, {"code": "(fn [k v]\r\n    (loop [keys k vals v map {}]\r\n\t     (if (or (empty? keys) (empty? vals))\r\n\t     map\r\n\t     (recur (rest keys) (rest vals) \r\n\t\t    (conj map {(first keys) (first vals)})))))", "problem": 61, "user": "4e821ca5535db62dc21a62c2"}, {"code": "#(into {} (map hash-map %1 %2))", "problem": 61, "user": "4e7e93f5535db169f9c7971a"}, {"code": "#(reduce conj {} (map vector %1 %2))", "problem": 61, "user": "4e8612f8535db62dc21a62f2"}, {"code": "(fn [& args] (into {} (apply map vector args)))", "problem": 61, "user": "4e8681b7535dae1a5effa438"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4e80aa10535db62dc21a62b1"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4db92654535d1e037afb21a0"}, {"code": "(fn [x y]\n  ((fn [x y result]\n    (if (or (empty? x) (empty? y))\n        result\n        (recur (rest x)\n               (rest y)\n               (assoc result (first x) (first y)))))\n  x y {}))", "problem": 61, "user": "4e73a9dc535dff18050a9c77"}, {"code": "#(into {} (map hash-map % %2))", "problem": 61, "user": "4e8510e7535db62dc21a62e7"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4e707db6535d5021c1a8963a"}, {"code": "(comp (partial into {}) (partial map vector))", "problem": 61, "user": "4db8ec47535d1e037afb219d"}, {"code": "(fn [keys vals] (apply merge {} (map #(hash-map % %2) keys vals)))", "problem": 61, "user": "4e80e0f2535db62dc21a62b8"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4e860e85535db62dc21a62f1"}, {"code": "(fn z[k v]\n    (loop [a k b v c {}]\n\t     (if (or (nil? a) (nil? b))\n\t\t c\n\t\t (recur (next a) (next b) (conj c [(first a) (first b)])))))", "problem": 61, "user": "4e842ebb535db62dc21a62df"}, {"code": "(fn [ks vs] (reduce (fn [m [k v]] (assoc m k v)) {} (map list ks vs)))", "problem": 61, "user": "4dfe65a1535d04ed9115e787"}, {"code": "(fn [k v]\n  (loop [m {}\n         k k\n         v v]\n    (if (and k v)\n      (recur (assoc m (first k) (first v))\n             (next k)\n             (next v))\n      m)))", "problem": 61, "user": "4e6ebd4a535d5021c1a89610"}, {"code": "(fn [& more]\n  (reduce #(assoc %1 (first %2) (second %2)) {} \n  (apply map list more)))", "problem": 61, "user": "4e89f46c535d3e98b8023288"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4e726914535d5021c1a89661"}, {"code": "(fn [ks vs] (into {}\n                      (map #(hash-map %1 %2) ks vs)))", "problem": 61, "user": "4e6a11ee535d8ccf87e9fe9f"}, {"code": "#(reduce conj {} (map (fn [k v] [k v]) %1 %2))", "problem": 61, "user": "4e8c1d97535d65386fec2127"}, {"code": "(fn [k v] \n  ((fn my-zip [m ks vs] \n    (if \n      (= 0 (* (count ks) (count vs))) \n      m \n      (my-zip (assoc m (first ks) (first vs)) (rest ks) (rest vs))))\n  (hash-map) k v))", "problem": 61, "user": "4e89de60535d3e98b8023285"}, {"code": "(fn [v u]\n  (loop [m {}, [fv & rv] v, [fu & ru] u]\n    (if (and fv fu)\n      (recur (assoc m fv fu) rv ru)\n      m)))", "problem": 61, "user": "4e89f9e5535d3e98b8023289"}, {"code": "(fn [k v]\n  (loop [accu {}\n   k k\n\t v v]\n    (if (or (empty? k) (empty? v))\n      accu\n      (recur (assoc accu (first k) (first v)) (rest k) (rest v)))))", "problem": 61, "user": "4e82c062535db62dc21a62cc"}, {"code": "#(apply merge {} (map hash-map %1 %2))", "problem": 61, "user": "4daf36c2edd6309eace4d175"}, {"code": "#(apply merge (map (partial assoc {}) %1 %2))", "problem": 61, "user": "4e8e8c24535d65386fec2143"}, {"code": "(fn my-mapzip [coll1 coll2]\n  (into {} (map vector coll1 coll2)))", "problem": 61, "user": "4dc54eb2535d8a4b2fd74284"}, {"code": "(fn [ks vs]\n(loop [ks ks vs vs tmp {}]\n      (if (or (empty? ks) (empty? vs))\n        tmp\n        (recur (rest ks) (rest vs) (assoc tmp (first ks) (first vs))))))", "problem": 61, "user": "4e88feef535d8b9bb0147ca8"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4e5867d1535d8a8b8723a291"}, {"code": "(fn [ks vs]\n  (->> (map vector ks vs)\n       (reduce (fn [m [k v]]\n                 (assoc m k v))\n               {})))", "problem": 61, "user": "4dc0ff08535d020aff1edf84"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4e8a0c82535d3e98b802328d"}, {"code": "#(apply hash-map (apply interleave %&))", "problem": 61, "user": "4e79ff2a535db169f9c796a9"}, {"code": "#(into {} (map hash-map %1 %2))", "problem": 61, "user": "4dcfbc44535d5973398f92a7"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4e8a460e535d65386fec2109"}, {"code": "#(into {} (map hash-map % %2))", "problem": 61, "user": "4dfd018c535d04ed9115e77f"}, {"code": "(fn [x y]\n         (loop [a x\n               b y\n               result {}]\n               (if (or (empty? a) (empty? b))\n                 result\n                 (recur (rest a) (rest b) (assoc result (first a) (first b))))))", "problem": 61, "user": "4e7e241a535db169f9c79705"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4e8df08f535d65386fec213e"}, {"code": "(fn zm [k v] (if (or(empty? k) (empty? v)) {} (assoc (zm (rest k) (rest v) ) (first k)\n( first v)  )  ) )", "problem": 61, "user": "4e8d5edd535d65386fec2134"}, {"code": "(fn [ks vs] \n  (into {} (map vector ks vs)))", "problem": 61, "user": "4e7f32ee535db966e863cc3a"}, {"code": "(fn [v1 v2] (letfn [(construct-map [keys vals c]\n  (if (or (empty? keys) (empty? vals))\n    c\n    (recur (rest keys) (rest vals) (assoc c (first keys) (first vals)))))]\n  (construct-map v1 v2 {})))", "problem": 61, "user": "4e8f4f64535d65386fec2149"}, {"code": "(fn a [x y] (if (or (empty? x) (empty? y)) {} (merge {(first x) (first y)} (a (rest x) (rest y)))))", "problem": 61, "user": "4e85cda3535db62dc21a62f0"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4e96557d535dbda64a6f6b43"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4e9660ec535dbda64a6f6b44"}, {"code": "(fn construct \n  ([keys values] (construct keys values (hash-map)))\n  ([keys values sofar]\n    (let [key (first keys)\n          value (first values)]\n      (if (or (empty? keys) (empty? values))\n        sofar\n        (construct (rest keys) (rest values) (assoc sofar key value))))))", "problem": 61, "user": "4e84f77c535db62dc21a62e5"}, {"code": "(fn [a b]\n  (loop [ut {} ar a br b]\n   (if (and (seq ar) (seq br))\n      (recur (assoc ut (first ar) (first br)) (rest ar) (rest br))\n  ut)))", "problem": 61, "user": "4e955b95535dbda64a6f6b33"}, {"code": "#(apply hash-map (mapcat vector %1 %2))", "problem": 61, "user": "4e976f79535dbda64a6f6b55"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4de8a7d7535d08e6dec9fdfe"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4e8f1ac6535d65386fec2146"}, {"code": "(fn [keys vals] \n  (loop [map {} \n         ks (seq keys) \n         vs (seq vals)]\n    (if (and ks vs)\n      (recur \n        (assoc map (first ks) (first vs)) \n        (next ks) \n        (next vs))\n      map)))", "problem": 61, "user": "4db13ff51254ad5b4805fa68"}, {"code": "(fn [a b] (apply hash-map (interleave a b)))", "problem": 61, "user": "4e89ddf9535d3e98b8023284"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4e98a6d0535dbda64a6f6b5e"}, {"code": "#(apply hash-map (mapcat list %1 %2))", "problem": 61, "user": "4e951ce5535dbda64a6f6b2e"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4e8b73e4535d65386fec2120"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4e6f8431535d5021c1a8961e"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4e9609ad535dbda64a6f6b3e"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4e9dafe1535dbda64a6f6b89"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4e7263a1535d5021c1a8965f"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4e9b22e2535dbda64a6f6b74"}, {"code": "(fn mapea [s1-ini s2-ini] (loop [s1 s1-ini s2 s2-ini result {}] (if (or (= 0 (count s1))(= 0 (count s2)) ) result (recur (rest s1) (rest s2) (assoc result (first s1) (first s2))))))", "problem": 61, "user": "4e9de526535dbda64a6f6b8e"}, {"code": "(fn [keys values]\n    (loop [[x & xs] keys [y & ys] values acc {}]\n      (if (or (empty? xs) (empty? ys))\n        (assoc acc x y)\n        (recur xs ys (assoc acc x y)))))", "problem": 61, "user": "4e9fd521535d7eef3080729a"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4e8516d0535db62dc21a62e8"}, {"code": "#(loop [m {}\n        k %1\n        v %2]\n  (if (and k v)\n    (recur (assoc m (first k) (first v)) (next k) (next v))\n    m))", "problem": 61, "user": "4e9e7ce3535dbda64a6f6b98"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4db85bdd535d1e037afb218d"}, {"code": "#(apply hash-map (mapcat vector % %2))", "problem": 61, "user": "4ea09fa4535d7eef308072aa"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4daee8e9edd6309eace4d166"}, {"code": "(fn [keys vals] (into {} (map #(vector %1 %2) keys vals)))", "problem": 61, "user": "4ea092f4535d7eef308072a6"}, {"code": "(fn [col1 col2]\n  (apply hash-map \n    (interleave col1 col2)))", "problem": 61, "user": "4e9ff8d0535d7eef3080729c"}, {"code": "(fn [ks vs]\n   (apply hash-map (mapcat (fn [a b] [a b]) ks vs)))", "problem": 61, "user": "4e59b02c535d8a8b8723a2a2"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4ea1b9e4535d7eef308072b8"}, {"code": "(fn zm [xs ys]\n  (->> (interleave xs ys)\n       (partition 2)\n       (map vec)\n       (reduce conj {})))", "problem": 61, "user": "4ea348ad535d7eef308072c4"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4e9a8c0e535dbda64a6f6b72"}, {"code": "(fn [xs ys]\r\n(loop [[head & more] (map vector xs ys)\r\n        z {}]\r\n(if (nil? head) z\r\n(recur more (conj z {(first head )(second head)})))))", "problem": 61, "user": "4ea09441535d7eef308072a7"}, {"code": "(fn [x y] (loop [keyi 0 result {}] (cond (= keyi (count x)) result (= keyi (count y)) result true (recur (inc keyi) (merge (hash-map (nth x keyi) (nth y keyi)) result)))))", "problem": 61, "user": "4e975bce535dbda64a6f6b53"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "4dd7d040535d2dad7130b5d6"}, {"code": "(fn [ks vs] (apply hash-map (mapcat vector ks vs)))", "problem": 61, "user": "4e6a4954535d8ccf87e9fec0"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4e8ddf32535d65386fec213c"}, {"code": "#(apply merge (map hash-map % %2))", "problem": 61, "user": "4ea0cfb0535d7eef308072ae"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4e72ac47535d5021c1a89666"}, {"code": "#(apply hash-map (mapcat vector %1 %2))", "problem": 61, "user": "4ea41fc2535d7eef308072cb"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4e7650c5535d324fb2983d68"}, {"code": "(fn [ks vs] (into {} (map vector ks vs)))", "problem": 61, "user": "4dad76588e77d6ed63f12a44"}, {"code": "(fn [keys, values]\n  (loop [k keys, v values, m {}]\n    (if (or (empty? k) (empty? v))\n      m\n      (recur \n        (rest k) \n        (rest v) \n        (assoc m (first k) (first v))))))", "problem": 61, "user": "4ea4fe1f535d7eef308072cf"}, {"code": "#(reduce merge (map (partial assoc {}) %1 %2) )", "problem": 61, "user": "4e9fde3c535d7eef3080729b"}, {"code": "(fn [ks vs]\n  (apply merge\n    (for [i (range (min (count ks) (count vs)))]\n      {(nth ks i) (nth vs i)}\n    )\n  )\n)", "problem": 61, "user": "4ea57300535d7eef308072d5"}, {"code": "(fn [keys vals]\n  (reduce (fn [map [k v]] (assoc map k v)) {} (partition 2 (interleave keys vals))))", "problem": 61, "user": "4dbb0f2d535d1e037afb21b1"}, {"code": "#(loop [l1 % l2 %2 m {}]\n  (if (or (empty? l1) (empty? l2)) \n    m\n    (recur (rest l1) (rest l2)\n      (assoc m (first l1) (first l2)))))", "problem": 61, "user": "4e9c81e8535dbda64a6f6b80"}, {"code": "(fn [ks vs]\n  (letfn [ (f [k v acc]\n    (cond\n      (or (empty? k) (empty? v)) acc\n      :else (recur (rest k) (rest v) (assoc acc (first k) (first v)))\n    ))]\n  (f ks vs {}))\n)", "problem": 61, "user": "4dd1de4d535dae65d5c462d7"}, {"code": "(fn mapper[keys values]\r\n  (loop [result {} x (seq keys) y (seq values) ]\r\n    (if (and x y)\r\n      (recur (assoc result (first x) (first y))\r\n          (next x)\r\n          (next y)\r\n        )\r\n      result)\r\n    )\r\n  )", "problem": 61, "user": "4e9def6b535dbda64a6f6b8f"}, {"code": "(fn [l1 l2] ((fn [res l1 l2]\n  (let [h1 (first l1)\n       h2 (first l2)]\n    (if (and (not (nil? h1)) (not (nil? h2)))\n    (recur (assoc res h1 h2) (rest l1) (rest l2))\n    res)\n  )\n  ) {} l1 l2)\n)", "problem": 61, "user": "4e9d6a65535dbda64a6f6b87"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4eab612d535d7eef30807316"}, {"code": "#(loop [map {}\n           ks (seq %1)\n           vs (seq %2)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map))", "problem": 61, "user": "4ea85846535d7eef308072f9"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "4dbd2aa3535d020aff1edf40"}, {"code": "(fn buildmap [x y]\n  (loop [cnt 0 newmap {}]\n    (if (= cnt (min (count x) (count y)))\n      newmap\n      (recur (inc cnt) \n      (conj newmap {(nth x cnt) (nth y cnt)}))\n)))", "problem": 61, "user": "4ea9b80c535d7eef30807306"}, {"code": "(fn [x y] (apply hash-map (interleave x y)))", "problem": 61, "user": "4eaa96e1535d7eef3080730d"}, {"code": "#(apply hash-map (mapcat list % %2))", "problem": 61, "user": "4e994541535dbda64a6f6b64"}, {"code": "#(apply assoc {} (mapcat list %1 %2))", "problem": 61, "user": "4e9b230c535dbda64a6f6b75"}, {"code": "(fn [lst1 lst2]\n  (loop [l1 lst1\n         l2 lst2\n         acc {}]\n    (if (or (empty? l1) (empty? l2)) acc\n      (recur (rest l1) (rest l2) (assoc acc (first l1) (first l2))))))", "problem": 61, "user": "4eaa47bc535d7eef30807309"}, {"code": "#(apply hash-map (mapcat list % %2))", "problem": 61, "user": "4ea5e794535d7eef308072df"}, {"code": "(fn\n  [keys vals]\n    (loop [map {}\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map)))", "problem": 61, "user": "4eb0afed535d7eef3080733e"}, {"code": "(fn myzip [x, y] \n    (if (or (empty? x) (empty? y))\n    (hash-map)\n    (assoc (myzip (rest x) (rest y)) (first x) (first y))))", "problem": 61, "user": "4eb0a757535d7eef3080733d"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4eaede1f535d7eef30807329"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4ea1ecfa535d7eef308072bb"}, {"code": "(fn [ks vs]\n  (reduce (fn [mp i] (assoc mp (first i) (second i))) \n          {}\n          (partition 2 (interleave ks vs))))", "problem": 61, "user": "4eb1dd39535d7eef30807345"}, {"code": "(fn [a b]\n  (loop [x a y b ret {}]\n    (if (and (next x) (next y))\n(recur (next x) (next y) (assoc ret (first x) (first y)))\n(assoc ret (first x) (first y)))))", "problem": 61, "user": "4eb27fad535d7eef3080734a"}, {"code": "#(loop [[kh & kt] %1, [vh & vt] %2, res {}]\n  (if (and kh vh)\n(recur kt vt (assoc res kh vh))\nres\n))", "problem": 61, "user": "4eabb245535d7eef30807319"}, {"code": "(fn [ks vs]\n    (apply hash-map (mapcat #(list %1 %2) ks vs)))", "problem": 61, "user": "4e89e939535d3e98b8023287"}, {"code": "(fn zm [ks, vs]\n  (if (= 1 (min (count ks) (count vs)))\n    {(first ks) (first vs)}\n    (assoc (zm (rest ks) (rest vs)) (first ks) (first vs))))", "problem": 61, "user": "4e8b98fc535d65386fec2124"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4e6a4950535d8ccf87e9febf"}, {"code": "(fn [k v] (apply hash-map (mapcat list k v)))", "problem": 61, "user": "4eb2e6ca535d7eef3080734f"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4eb01df4535d7eef30807337"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4e8b73f1535d65386fec2121"}, {"code": "(fn [ks vs] (into {} (map vector ks vs)))", "problem": 61, "user": "4ea55757535d7eef308072d3"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4e8d86d5535d65386fec2136"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4eb97b2e535dfed6da9c6d54"}, {"code": "#(loop [a %1 b %2 m {}]\n  (if (or (empty? a) (empty? b))\n    m\n    (recur (rest a) (rest b) (assoc m (first a) (first b)))))", "problem": 61, "user": "4eb5750a535d7eef30807366"}, {"code": "(fn [v1 v2]\n  (let [v (interleave v1 v2)]\n    (apply assoc {} v)))", "problem": 61, "user": "4e9519b4535dbda64a6f6b2d"}, {"code": "#(apply merge (map hash-map % %2))", "problem": 61, "user": "4eb97234535dfed6da9c6d53"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4e58c019535d8a8b8723a297"}, {"code": "(fn [x y] \n  (apply array-map (interleave x y)))", "problem": 61, "user": "4ea7999e535d7eef308072ee"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4eb2eae5535d7eef30807351"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4e82f85d535db62dc21a62ce"}, {"code": "(fn [keys values]\n  (apply array-map (interleave keys values)))", "problem": 61, "user": "4ebc08a8535dfed6da9c6d7c"}, {"code": "(fn [ks vs]\n  (apply hash-map (interleave ks vs)))", "problem": 61, "user": "4dbdc9da535d020aff1edf4c"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4e8a0d5d535d3e98b802328e"}, {"code": "#(into {} (for [[k v] (map list % %2)] [k v]))", "problem": 61, "user": "4eb25069535d7eef30807348"}, {"code": "(fn [keys vals]\n  (loop [m {} \n    ks keys\n    vs vals]\n    (if (and ks vs)\n(recur (assoc m (first ks) (first vs))\n  (next ks)\n  (next vs))\nm)))", "problem": 61, "user": "4ebd4448535dfed6da9c6d8f"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4e1350af535d04ed9115e7d8"}, {"code": "(fn [ks vs]\n  (apply array-map (interleave ks vs)))", "problem": 61, "user": "4dadb891c9a9d6ed3699dc57"}, {"code": "(fn [keys vals]\n  (loop [[k & kmore] keys\n          [v & vmore] vals\n          res {}]\n    (if (and k v) (recur kmore vmore (assoc res k v))\n      res)))", "problem": 61, "user": "4ebf45c3535dfed6da9c6d9d"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4ec132a0535dfed6da9c6da9"}, {"code": "(fn [coll1 coll2]\n  (reduce \n    #(assoc %1 (first %2) (second %2))\n    {}\n    (map (fn [item1 item2] [item1 item2]) coll1 coll2)))", "problem": 61, "user": "4ec2fe3f535dcc7ae8597d4f"}, {"code": "(fn z [k v]\n  (when (and (first k) (first v))\n    (merge {(first k) (first v)} (z (rest k) (rest v)))))", "problem": 61, "user": "4ea0c284535d7eef308072ad"}, {"code": "#(apply hash-map (mapcat list % %2))", "problem": 61, "user": "4ec34578535dcc7ae8597d51"}, {"code": "#(apply merge (for [i (range (min (count %2) (count %)))] {(nth % i) (nth %2 i)}))", "problem": 61, "user": "4ec0c7ba535dfed6da9c6da4"}, {"code": "(comp #(apply hash-map %) interleave)", "problem": 61, "user": "4ebe766d535dfed6da9c6d94"}, {"code": "#(into {} (map hash-map % %2))", "problem": 61, "user": "4ec5d40d535d6d7199dd36b9"}, {"code": "(fn \n  [s1, s2]                                                                                             \n  (loop [zipped {} seq1 s1 seq2 s2]                                                                    \n    (if (and (not-empty seq1) (not-empty seq2))                                                        \n      (recur (conj zipped (hash-map (first seq1) (first seq2))) (rest seq1) (rest seq2))               \n      zipped)))", "problem": 61, "user": "4eaf1342535d7eef30807330"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4eb51942535d7eef30807365"}, {"code": "(fn [key-seq val-seq]\n  (loop [k key-seq v val-seq result {}]\n    (cond\n      (empty? k) result\n      (empty? v) result\n      :else\n        (recur\n          (rest k)\n          (rest v)\n          (assoc result (first k) (first v))))))", "problem": 61, "user": "4e117dea535d04ed9115e7c9"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4ec16c21535dfed6da9c6dac"}, {"code": "(fn [l1 l2]\n  (let [mm (fn [ret p1 p2]\n               (cond \n                 (empty? p1) ret\n                 (empty? p2) ret\n                 :else (recur (conj ret [(first p1) (first p2)])\n                              (rest p1)\n                              (rest p2))))]\n        (mm {} l1 l2)))", "problem": 61, "user": "4ec21058535dfed6da9c6dba"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4ec07699535dfed6da9c6da2"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4ec4ac86535dcc7ae8597d64"}, {"code": "(fn   [col1 col2]\n  (loop [col3 {} cnt (min (count col1) (count col2)) ]\n   (if (= cnt 0)\n        col3\n        (let [pos (- cnt 1)]\n        (recur (conj col3 [ (nth col1 pos)  (nth col2 pos)  ] ) (dec cnt)\n   )\n  ))))", "problem": 61, "user": "4ec5bec6535d6d7199dd36b3"}, {"code": "(fn my-zipmap [a b]\n  (if (or (empty? a) (empty? b))\n    {}\n    (assoc (my-zipmap (rest a) (rest b)) (first a) (first b))))", "problem": 61, "user": "4ec6559a535d6d7199dd36c9"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4eac5bc1535d7eef3080731b"}, {"code": "#(reduce conj {} (map (fn [a, b] [a,b]) %1 %2))", "problem": 61, "user": "4e25176e535d04ed9115e829"}, {"code": "(fn zipmapj [k v]\n  (cond \n    (or (empty? k) (empty? v)) {}\n    :else\n      (assoc\n        (zipmapj (rest k) (rest v))\n        (first k) (first v))))", "problem": 61, "user": "4e6f578c535d5021c1a8961b"}, {"code": "(comp #(apply hash-map %) interleave)", "problem": 61, "user": "4ece9ca9535d23f03622770f"}, {"code": "#(apply hash-map (mapcat list %1 %2))", "problem": 61, "user": "4ecb1641535d6d7199dd370e"}, {"code": "#(loop [a %1 b %2 res {}] (if (or (= 0 (count a)) (= 0 (count b)))\n                               res (recur (rest a) (rest b) (merge res {(first a) (first b)}))))", "problem": 61, "user": "4eb44d78535d7eef30807360"}, {"code": "#(into {} (apply map vector %&))", "problem": 61, "user": "4ebb78a2535dfed6da9c6d70"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4db2eac3535df7e46ed9b6c8"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4ecfb458535d44c135fd68bb"}, {"code": "(fn [a b] (loop [s (partition 2 (interleave a b)) r {}]\n               (if (empty? s)\n                 r\n                 (recur (rest s) (assoc r (first (first s)) (last (first s)))))\n               ))", "problem": 61, "user": "4ebef65e535dfed6da9c6d9b"}, {"code": "(fn [k v]\n  (loop [ks k vs v acc {}]\n    (if (or (empty? ks) (empty? vs))\n      acc\n      (recur (rest ks) (rest vs) (assoc acc (first ks) (first vs))))))", "problem": 61, "user": "4daf8f84edd6309eace4d17a"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4ecf42b4535d1f5ad70dba3c"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4ec74de3535d6d7199dd36df"}, {"code": "(fn my-zipmap [ks vs] (into {} (map vector ks vs)))", "problem": 61, "user": "4ed188c8535d44c135fd68cf"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4db091b7838c48654951d9c2"}, {"code": "#(reduce (fn[acc,e](assoc acc (first e) (second e))) {} \n         (map (fn[x,y][x y]) %1 %2))", "problem": 61, "user": "4ec75829535d6d7199dd36e1"}, {"code": "(fn [k v]\n  (loop [m {} ks (seq k) vs (seq v)]\n    (if (and ks vs)\n      (recur (assoc m (first ks) (first vs)) (next ks) (next vs))\n      m)))", "problem": 61, "user": "4ebc829e535dfed6da9c6d86"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4e52777f535d302ef430da76"}, {"code": "(fn [& colls] (apply hash-map (apply interleave colls)))", "problem": 61, "user": "4eb9ce75535dfed6da9c6d5e"}, {"code": "#(apply hash-map (mapcat vector %1 %2))", "problem": 61, "user": "4ec70f26535d6d7199dd36dd"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4e5d0e96535d8a8b8723a2c8"}, {"code": "(fn [x y] \n  (reduce (fn [a [k v]] (assoc a k v)) {}\n    (map #(vector % %2) x y)))", "problem": 61, "user": "4ed2b168535d44c135fd68dd"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "4ecbb249535df97575fdabdf"}, {"code": "(fn fill [keys values] (\n  loop [ks keys, vs values, kvs {}]\n    (if (or (empty? ks) (empty? vs))\n        kvs\n        (recur (rest ks) (rest vs) \n               (assoc kvs (first ks) (first vs)))\n)))", "problem": 61, "user": "4ed500bb535d10e5ff6f52d3"}, {"code": "(fn [x y] \n  (reduce #(assoc %1 (first %2) (last %2)) \n  {} \n  (partition 2 (interleave x y))))", "problem": 61, "user": "4ec28d86535dfed6da9c6dbc"}, {"code": "(fn [ks vs] (into {} (map (fn [k v] [k v]) ks vs)))", "problem": 61, "user": "4ed292ac535d44c135fd68d9"}, {"code": "(fn my-zipmap [ks vs]\n  ((fn [ks vs m]\n     (if (and (seq ks) (seq vs))\n       (recur (rest ks) (rest vs) (assoc m (first ks) (first vs)))\n       m))\n     ks vs {}))", "problem": 61, "user": "4ec75077535d6d7199dd36e0"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4ebbf772535dfed6da9c6d76"}, {"code": "(fn [x y]\n  (apply hash-map (flatten (map vector x y))))", "problem": 61, "user": "4ec5cdb0535d6d7199dd36b8"}, {"code": "#(apply hash-map (mapcat list % %2))", "problem": 61, "user": "4e704293535d5021c1a89634"}, {"code": "(fn\n    [keys vals]\n    (loop [map {}\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map)))", "problem": 61, "user": "4dadba4dc9a9d6ed3899dc57"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4ea4e98a535d7eef308072ce"}, {"code": "#(apply assoc {} (mapcat (fn [x y] [x y]) %1 %2))", "problem": 61, "user": "4ed94d69535d10e5ff6f5303"}, {"code": "#(reduce conj (map hash-map %1 %2))", "problem": 61, "user": "4ed6238d535d10e5ff6f52de"}, {"code": "#(apply merge (map (fn[k v] {k v}) % %2))", "problem": 61, "user": "4eca40cd535d6d7199dd3703"}, {"code": "(fn zip [keys values]\n  (if (and (seq keys) (seq values))\n    (assoc (zip (rest keys) (rest values))\n          (first keys)\n          (first values))))", "problem": 61, "user": "4eda7cc3535d10e5ff6f530e"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4edab806535d10e5ff6f5311"}, {"code": "(fn [x y](reduce into (map #(into {} {%1 %2}) x y)))", "problem": 61, "user": "4edbca52535d10e5ff6f531e"}, {"code": "#(reduce conj {} (map vector % %2))", "problem": 61, "user": "4ed69ea4535d10e5ff6f52e3"}, {"code": "#(reduce merge {} (map hash-map % %2))", "problem": 61, "user": "4e5af45e535d8a8b8723a2b1"}, {"code": "; lesson learned, map takes multiargs\n; vector can be a poor mans zip\n(fn zm [a b]\n  (letfn [\n\t\t(zip [a b]\n\t\t\t(lazy-seq\n\t\t\t\t(if (and (seq a) (seq b))\n\t\t\t\t\t(cons (list (first a) (first b)) (zip (rest a) (rest b)))\n\t\t\t\t\t())))\n\t\t]\n\n\t\t(reduce conj (map #(apply hash-map %) (zip a b)))\n\t))", "problem": 61, "user": "4ed72e51535d10e5ff6f52ee"}, {"code": "#(into {} (apply map vector %&))", "problem": 61, "user": "4ede8789535d10e5ff6f5337"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4eb955da535dfed6da9c6d50"}, {"code": "(fn [a b] (apply assoc {} (interleave a b)))", "problem": 61, "user": "4dfd7ecf535d04ed9115e783"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4ecf1f51535d1f5ad70dba3a"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4ed55b5d535d10e5ff6f52d8"}, {"code": "(fn abr [x y]\r\n (into {} (map vector x y))\r\n)", "problem": 61, "user": "4edf92f0535d10e5ff6f5341"}, {"code": "(fn [keys vals]\r\n (loop [map {}\r\n           ks (seq keys)\r\n           vs (seq vals)]\r\n      (if (and ks vs)\r\n        (recur (assoc map (first ks) (first vs))\r\n               (next ks)\r\n               (next vs))\r\n        map)))", "problem": 61, "user": "4e570b60535d8a8b8723a286"}, {"code": "(fn [ks vs]\n  (reduce conj {} (map vector ks vs)))", "problem": 61, "user": "4edeac6b535d10e5ff6f533a"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4ede8e1d535d10e5ff6f5339"}, {"code": "(fn mapper [keys values]\n  (cond \n    (or (empty? keys) (empty? values)) {}\n    :else (conj (mapper (rest keys) (rest values)) (hash-map (first keys) (first values)) )\n  )\n  )", "problem": 61, "user": "4ecfa05c535d44c135fd68b9"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4ed0e139535d44c135fd68c7"}, {"code": "(fn [k v] (apply merge (map #(hash-map % %2) k v)))", "problem": 61, "user": "4eb13d60535d7eef3080733f"}, {"code": "(fn [keys values] (apply merge (map hash-map keys values)))", "problem": 61, "user": "4e599577535d8a8b8723a29f"}, {"code": "(fn [x y]\n    (reduce #(assoc %1 (first %2) (second %2)) {} (map vector x y)))", "problem": 61, "user": "4e89ff3d535d3e98b802328a"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "4e65027c535d8ccf87e9fe6e"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4ed27f9f535d44c135fd68d5"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4edd038c535d10e5ff6f5327"}, {"code": "#(loop [r {}, c (interleave %1 %2)]\n    (if (< (count c) 2)\n      r\n      (recur (conj r [(first c) (second c)]) (drop 2 c))))", "problem": 61, "user": "4ec6357a535d6d7199dd36c5"}, {"code": "(fn [x y] (reduce merge (map #(hash-map %1 %2) x y)))", "problem": 61, "user": "4ec60dc4535d6d7199dd36c0"}, {"code": "(fn [ks vs]\n  (apply hash-map (interleave ks vs)))", "problem": 61, "user": "4ee2da14535d10e5ff6f536c"}, {"code": "(fn [a b] (apply assoc {} (interleave a b)))", "problem": 61, "user": "4ea11921535d7eef308072af"}, {"code": "(fn [xs ys] (apply hash-map (mapcat list xs ys)))", "problem": 61, "user": "4ee3b586535d10e5ff6f5371"}, {"code": "(fn [k v]\n  (into {} (map vector k v)))", "problem": 61, "user": "4ed9fe5f535d10e5ff6f5308"}, {"code": "(fn [keys values] (apply assoc {} (interleave keys values)))", "problem": 61, "user": "4edd4b77535d10e5ff6f5328"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "4ed6ac40535d10e5ff6f52e4"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4ec5aa1f535d6d7199dd36b0"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4ee40938535d10e5ff6f5375"}, {"code": "(fn [coll coll-sec] (apply hash-map (mapcat list coll coll-sec)))", "problem": 61, "user": "4e7e8684535db169f9c79717"}, {"code": "(fn [x y] (apply array-map (interleave x y)))\n; Not as succinct as some, but I'm happy with this.", "problem": 61, "user": "4ebb20c0535dfed6da9c6d6f"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4eddcbbf535d10e5ff6f532d"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4ee7ef87535d93acb0a66872"}, {"code": "(fn mine [xs ys]\n  (if (or (empty? xs) (empty? ys))\n      {}\n      (assoc (mine (rest xs) (rest ys)) \n             (first xs) \n             (first ys))))", "problem": 61, "user": "4dad8d4bc9a9d6ed1799dc57"}, {"code": "(fn func [ks vs]\n  (if (or (empty? ks) (empty? vs))\n    {}\n    (assoc (func (rest ks) (rest vs)) (first ks) (first vs))))", "problem": 61, "user": "4ee82223535d93acb0a66877"}, {"code": "#(apply hash-map (flatten (map vector % %2)))", "problem": 61, "user": "4ee82539535d93acb0a66878"}, {"code": "(fn zm [ks vs]\n  (loop [ms (map vector ks vs) m {}]\n    (if (seq ms)\n      (let [[[k v] & r] ms]\n        (recur r (assoc m k v)))\n      m)))", "problem": 61, "user": "4ee88269535d93acb0a6687f"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4ed19f00535d44c135fd68d1"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4ee7d177535d93acb0a6686f"}, {"code": "(fn [coll1 coll2]\n  (apply merge (map hash-map coll1 coll2)))", "problem": 61, "user": "4ed7b617535d10e5ff6f52f3"}, {"code": "#(apply hash-map (mapcat list % %2))", "problem": 61, "user": "4ee63d8d535d93acb0a66859"}, {"code": "(fn [ks vs]\n  (loop [result {}\n         ks ks\n         vs vs]\n    (if (or (empty? vs) (empty? ks))\n      result\n      (recur (conj result {(first ks) (first vs)}) (rest ks) (rest vs)))))", "problem": 61, "user": "4ee7fe83535d93acb0a66874"}, {"code": "(fn x [keys vals]\r\n  (loop [my-map {}\r\n         my-keys (seq keys)\r\n         my-vals (seq vals)]\r\n    (if (and my-keys my-vals)\r\n      (recur (assoc my-map (first my-keys) (first my-vals))\r\n             (next my-keys)\r\n             (next my-vals))\r\n      my-map)))", "problem": 61, "user": "4ec7def0535d6d7199dd36e9"}, {"code": "#(into {} (apply map vector %&))", "problem": 61, "user": "4dadc27ec9a9d6ed3c99dc57"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4e95f5a5535dbda64a6f6b3b"}, {"code": "(fn [keys values] (apply hash-map (interleave keys values)))", "problem": 61, "user": "4ee9d697535d93acb0a66895"}, {"code": ";(fn [ks vs]\n;     (loop [kk ks,\n;            vv vs,\n;            m {}]\n;       (if (or (empty? kk) (empty? vv))\n;         m\n;         (recur (rest kk)\n;                (rest vv)\n;                (conj m [(first kk) (first vv)])))))\n\n;;(fn [x y] (apply hash-map (interleave x y)))\n;;#(into {} (map vector %1 %2))\n(comp (partial apply hash-map) interleave)", "problem": 61, "user": "4ee26f01535d10e5ff6f5368"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4e7f8f85535db966e863cc44"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4ee9ddb8535d93acb0a66896"}, {"code": "#(reduce conj {} (map vector %1 %2))", "problem": 61, "user": "4ee868be535d93acb0a6687d"}, {"code": "(fn my-zipmap\n  [coll1 coll2]\n  (apply conj {} (map hash-map coll1 coll2)))", "problem": 61, "user": "4edf5dc6535d10e5ff6f5340"}, {"code": "#(into {}\r\n  (for [i (range (count %1))]\r\n     (if (< i (count %2))\r\n\t      {(nth %1 i) (nth %2 i)})))", "problem": 61, "user": "4e273301535deb9a81d77ef7"}, {"code": "(fn map-construction\n  [a b & coll]\n  (into {}  (map #(assoc {} %1 %2) a b)))", "problem": 61, "user": "4e3bcccd535deb9a81d77f56"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4daeabf6edd6309eace4d15c"}, {"code": "(fn [a b]\n  (loop [map {} ks (seq a) vs (seq b)]\n    (if (and ks vs)\n      (recur (assoc map (first ks) (first vs)) (next ks) (next vs))\n      map)))", "problem": 61, "user": "4e46ac46535dc968683fc4b5"}, {"code": "(fn [xs ys]\n  (loop [m {}\n        ks (seq xs)\n        vs (seq ys)]\n    (if (and ks vs)\n      (recur (assoc m (first ks) (first vs))\n        (next ks)\n        (next vs))\n      m))\n)", "problem": 61, "user": "4ee8092f535d93acb0a66875"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4eecdd66535d93acb0a668b9"}, {"code": "(fn [lista listb]\n    (loop [a lista b listb m {}]\n       (if (or (empty? a) (empty? b)) m\n           (recur (rest a) (rest b)\n                (assoc m (first a) (first b)))\n)))", "problem": 61, "user": "4db883e1535d1e037afb2198"}, {"code": "(fn [keys vals] (apply hash-map (interleave keys vals)))", "problem": 61, "user": "4dac61e18cc9d6edb9beb0b3"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4ee88bfb535d93acb0a66881"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4daea889edd6309eace4d15b"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4eeae8f0535d93acb0a668a2"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4e6a0667535d8ccf87e9fe9e"}, {"code": "(fn [x y] (reduce merge (map #(hash-map % %2) x y)))", "problem": 61, "user": "4ef0a39b535dced4c769f20c"}, {"code": "(fn [a b] (apply merge (map (fn [x] (apply hash-map x)) ((fn [c1 c2] (map #(vector %1 %2) c1 c2)) a b))))", "problem": 61, "user": "4ef0a39b535dced4c769f20d"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4ef2d243535dced4c769f221"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4ef49c2c535dced4c769f238"}, {"code": "#(apply conj {} (map vector %1 %2))", "problem": 61, "user": "4edecdae535d10e5ff6f533c"}, {"code": "(fn [ks vs] \n  (loop [ks ks\n         vs vs\n         accum {}]\n    (if (or (empty? ks) (empty? vs))\n      accum\n      (recur (rest ks) (rest vs) (conj accum [(first ks) (first vs)])))))", "problem": 61, "user": "4ef41f26535dced4c769f230"}, {"code": "(fn [ks vs]\n  (let [p (map (fn [q w] [q w]) ks vs)]\n    (reduce (fn [m [k v]] (assoc m k v)) {} p)))", "problem": 61, "user": "4ec18451535dfed6da9c6db0"}, {"code": "(fn [keys vals]\r\n    (loop [map {}\r\n           ks (seq keys)\r\n           vs (seq vals)]\r\n      (if (and ks vs)\r\n        (recur (assoc map (first ks) (first vs))\r\n               (next ks)\r\n               (next vs))\r\n        map)))", "problem": 61, "user": "4ef1ee67535dced4c769f219"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4ef4e5fa535dced4c769f242"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4ef5c7ce535dced4c769f248"}, {"code": "(fn [x y] (apply merge (map #(hash-map % %2) x y)))", "problem": 61, "user": "4e8d5911535d65386fec2133"}, {"code": "(fn zm [[a & al][b & bl]] \n (cond \n  (some empty? [al bl]) {a b}\n  true (conj {a b} (zm al bl))\n )\n)", "problem": 61, "user": "4ef355e3535dced4c769f228"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4ef77c82535dced4c769f253"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "4ee6400c535d93acb0a6685b"}, {"code": "#(apply hash-map (mapcat list % %2))\n; didn't think to use into, but this isn't terrible IMO", "problem": 61, "user": "4dd88803535d2dad7130b5d9"}, {"code": "(fn my-map [k v]\n  (loop [kp k\n         vp v\n         result {}]\n    (if (or (empty? kp) (empty? vp))\n      result\n      (recur (next kp) (next vp) (assoc result (first kp) (first vp))))))", "problem": 61, "user": "4efb92ce535dced4c769f27a"}, {"code": "#(apply merge (map hash-map % %2))", "problem": 61, "user": "4eee5c7f535d93acb0a668c6"}, {"code": "#(apply array-map (flatten (map vector % %2)))", "problem": 61, "user": "4ec5d62c535d6d7199dd36ba"}, {"code": "(fn [xs vs](into {} (map vector xs vs)))", "problem": 61, "user": "4efcac3a535de96065cf507e"}, {"code": "(fn [c1 c2]\n  (apply assoc (concat [{}] (interleave c1 c2))))", "problem": 61, "user": "4ef992c8535dced4c769f268"}, {"code": "(fn [S1 S2]\n  (loop [m {} s1 S1 s2 S2]\n    (if (or (empty? s1) (empty? s2))\n      m\n      (recur (assoc m (first s1) (first s2)) (rest s1) (rest s2)))))", "problem": 61, "user": "4ef4c1ff535dced4c769f23e"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4e8768f6535dceadca469850"}, {"code": "#(apply merge (map hash-map % %2))", "problem": 61, "user": "4efb2fd7535dced4c769f274"}, {"code": "(fn [ks vs]\n  (apply hash-map\n    (flatten\n      (map #(vector %1 %2) ks vs))))", "problem": 61, "user": "4ee3afde535d10e5ff6f5370"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4ed9354f535d10e5ff6f5301"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4effb663535dcb61093f6a2e"}, {"code": "(fn [ks vs]\n  (apply hash-map\n    (flatten\n      (map list ks vs))))", "problem": 61, "user": "4ee67d74535d93acb0a66861"}, {"code": "#(apply hash-map (mapcat list % %2))", "problem": 61, "user": "4ef57a7f535dced4c769f246"}, {"code": "#(loop [[a b & s] (interleave % %2) c {}]\n  (let [c (conj c [a b])]\n    (if (nil? s)\n      c\n      (recur s c))))", "problem": 61, "user": "4efb87f7535dced4c769f279"}, {"code": "(fn [ks vs]\n  (apply assoc {} (interleave ks vs)))", "problem": 61, "user": "4ef6f5ea535dced4c769f250"}, {"code": "#(reduce merge (map hash-map %1 %2))", "problem": 61, "user": "4f031eac535dcb61093f6a67"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4ed2dd98535d44c135fd68e2"}, {"code": "(fn [k v]\n  (apply hash-map (interleave k v)))", "problem": 61, "user": "4e1f9bb5535d04ed9115e80d"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4db8f6c4535d1e037afb219e"}, {"code": "(fn [k v] (apply hash-map (flatten (map vector k v))))", "problem": 61, "user": "4f03d0fe535dcb61093f6b6d"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "4f01ff83535dcb61093f6a3a"}, {"code": "(fn [k v]\n  (reduce \n    (fn [m [kk vv]] (assoc m kk vv)) \n    {} \n    (reverse (partition 2 (interleave k v)))))", "problem": 61, "user": "4f017593535dcb61093f6a36"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4f036d9b535dcb61093f6ac1"}, {"code": "#(into {}\n  (map vector % %2))", "problem": 61, "user": "4f01c938535dcb61093f6a39"}, {"code": "(fn zip* [ks vs]\n  (loop [claves ks\n         valores vs\n        mapa {}]\n    (if (or (empty? claves)\n            (empty? valores))\n       mapa\n      (recur (rest claves)\n             (rest valores)\n             (assoc mapa (first claves)\n                        (first valores))))))", "problem": 61, "user": "4f04a06d535dcb61093f6bd9"}, {"code": "(fn [ks vs]\n  ((fn build [ks vs m]\n      (if (or (empty? ks) (empty? vs))\n        m\n        (recur\n          (rest ks)\n          (rest vs)\n          (assoc m (first ks) (first vs)))))\n    ks vs {}))", "problem": 61, "user": "4f047902535dcb61093f6bcc"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4f039a8b535dcb61093f6b36"}, {"code": "(fn [a b](into {} (map #(vector (first %) (last %)) (partition 2 (interleave a b)))))", "problem": 61, "user": "4e6cf521535de274dd8d818b"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4f047c07535dcb61093f6bcd"}, {"code": "#(apply merge (map hash-map %1 %2))", "problem": 61, "user": "4f043ed1535dcb61093f6bb4"}, {"code": "#(into{} (map vector % %2))", "problem": 61, "user": "4f03857e535dcb61093f6b0d"}, {"code": "(fn [keys vals]\n  (reduce #(assoc %1 (first %2) (second %2)) {}\n    (partition 2 (interleave keys vals))))", "problem": 61, "user": "4f04f847535dcb61093f6beb"}, {"code": "(fn f [x y]\n  (if (or (empty? x) (empty? y))\n    (hash-map)\n    (assoc (f (rest x) (rest y)) (first x) (first y))))", "problem": 61, "user": "4f062d4a535dcb61093f6c08"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4e6a6be7535d8ccf87e9fee1"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4ec5a5f9535d6d7199dd36ad"}, {"code": "(fn [keys seq]\n  (loop [k keys\n         s seq\n         curr {}]\n\n    (if (empty? s)\n      curr\n      (if (empty? k)\n        curr\n        (recur (rest k) (rest s) (assoc curr (first k) (first s)))))))", "problem": 61, "user": "4ef9b021535dced4c769f269"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4f083048535dcb61093f6c33"}, {"code": "(fn [keys values] (loop [k keys v values result {}]\n  (if (or (empty? k) (empty? v)) result\n    (recur (rest k) (rest v) (conj result {(first k) (first v)})))))", "problem": 61, "user": "4ef4ab95535dced4c769f23b"}, {"code": "#(apply hash-map (mapcat list % %2))", "problem": 61, "user": "4f04b66b535dcb61093f6bdd"}, {"code": "(fn make-map [ks vs]\n  (apply assoc {} (interleave ks vs)))", "problem": 61, "user": "4ee82ce9535d93acb0a6687a"}, {"code": "(fn [k v] (apply hash-map (interleave k v)))", "problem": 61, "user": "4ef0eaef535dced4c769f211"}, {"code": "(fn [c1 c2]\n  (loop [m {}\n        c1 c1\n        c2 c2]\n    (if (not (and (seq c1) (seq c2)))\n      m\n      (recur (assoc m (first c1) (first c2)) (rest c1) (rest c2))\n    )\n))", "problem": 61, "user": "4dc1e1e4535d020aff1edf90"}, {"code": "(fn [k v]\n  (loop [k_ k v_ v ret ()]\n    (cond\n      (or (not k_) (not v_))\n        (apply hash-map (into '() ret))\n      :else\n        (recur \n          (next k_) \n          (next v_) \n          (conj ret (first k_) (first v_))))))", "problem": 61, "user": "4f050dec535dcb61093f6bef"}, {"code": "(fn mc [ks vs]                                     \n    (cond                                              \n      (or (nil? ks) (nil? vs)) (hash-map)                             \n      :else (assoc (mc (next ks) (next vs)) (first ks) (first vs))))", "problem": 61, "user": "4e444c11535dc968683fc4a9"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4ef6e689535dced4c769f24f"}, {"code": "(fn [& x](apply hash-map (apply interleave x)))", "problem": 61, "user": "4f039bbe535dcb61093f6b39"}, {"code": "#(into {} (apply map vector %&))", "problem": 61, "user": "4f06dcad535dcb61093f6c16"}, {"code": "(fn\n[keys vals] (reduce #(merge % %2) {} (map #(hash-map % %2) keys vals)))", "problem": 61, "user": "4f047542535dcb61093f6bc7"}, {"code": "(comp (partial apply hash-map) interleave)", "problem": 61, "user": "4f052eaf535dcb61093f6bf3"}, {"code": "(fn map-construct [coll1 coll2]\n  (apply hash-map (interleave coll1 coll2)))", "problem": 61, "user": "4e95a440535dbda64a6f6b37"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4f0b2028535d0136e6c222ff"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4eee3e6a535d93acb0a668c3"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4f08b15b535dcb61093f6c40"}, {"code": "(fn omp [a b]\r\n    (apply merge (map #(assoc {} % %2) a b)))", "problem": 61, "user": "4ef0f1a1535dced4c769f212"}, {"code": "#(apply hash-map (reduce concat (map (fn [a b] (list a b)) % %2)))", "problem": 61, "user": "4f067029535dcb61093f6c12"}, {"code": "(fn [daKeys daVals]\n  (loop [runningMap {}\n         runKeys daKeys\n         runVals daVals]\n         (if (or (empty? runKeys) (empty? runVals))\n             runningMap\n         (recur (assoc runningMap (first runKeys) (first runVals))\n                (rest runKeys)\n                (rest runVals)))))", "problem": 61, "user": "4f0365fc535dcb61093f6aa4"}, {"code": "#(reduce conj {} (map vector % %2))", "problem": 61, "user": "4eeaf88f535d93acb0a668a3"}, {"code": "#(reduce (fn [x y] (assoc x (first y) (second y))) \n  {} \n  (partition 2 (interleave % %2)))", "problem": 61, "user": "4efec33f535dcb61093f6a2a"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4e2d84bf535deb9a81d77f09"}, {"code": "(fn map-cons [l1 l2]\r\n    (if (or (empty? l1) (empty? l2))\r\n      {}\r\n      (assoc (map-cons (rest l1) (rest l2)) (first l1) (first l2))))", "problem": 61, "user": "4f039524535dcb61093f6b2c"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4f0bc223535d0136e6c22307"}, {"code": "(comp (partial apply hash-map) interleave)", "problem": 61, "user": "4f03ac2d535dcb61093f6b4a"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "4f037bb5535dcb61093f6aec"}, {"code": "(fn myMap \n    ([x y z]\n        (if (or (empty? x) (empty? y))\n            z\n        (myMap (rest x) (rest y) (assoc z (first x) (first y)))))\n    ([x y] (myMap x y {})))", "problem": 61, "user": "4f03b3fb535dcb61093f6b52"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4f0ef874535d0136e6c22328"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4ec1b80c535dfed6da9c6db6"}, {"code": "(fn [c1 c2] (apply sorted-map (flatten (map #(vector %1 %2) c1 c2))))", "problem": 61, "user": "4f0c4518535d0136e6c2230b"}, {"code": "#(loop [keys %1 values %2 result {}]\n     (if (or (nil? (first keys)) (nil? (first values)))\n\t       result\n\t       (recur (rest keys) (rest values) (assoc result  (first keys) (first values)))))", "problem": 61, "user": "4f066916535dcb61093f6c10"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "4f038567535dcb61093f6b0c"}, {"code": "(fn [keys vals] (into {} (map vector keys vals)))", "problem": 61, "user": "4ebcb8ff535dfed6da9c6d8a"}, {"code": "(fn [k v] (loop [headk (first k)\n                 ks k \n                 headv (first v)\n                 vs v\n                 res (hash-map)] (if (and (seq vs) (seq ks) )\n          (recur (first (rest ks)) (rest ks) (first (rest vs)) (rest vs)\n                  (assoc res headk headv)) res)))", "problem": 61, "user": "4efd98fa535de96065cf5086"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4f0f36a7535d0136e6c22336"}, {"code": "(fn [A B]\n  (loop [k-s A\n         e-s B\n         res {}]\n         (cond (or (= [] k-s) (= [] e-s)) res\n               :default \n               (recur (rest k-s) (rest e-s) (conj res (hash-map (first k-s) (first e-s)))))))", "problem": 61, "user": "4e49a7bb535dc968683fc4c6"}, {"code": "(fn [a b] (reduce merge (map #(hash-map %1 %2) a b)))", "problem": 61, "user": "4f0e995e535d0136e6c22326"}, {"code": "(fn hash [keys vals]\n  (if (or (empty? keys) (empty? vals))\n      {}\n      (conj (hash (rest keys) (rest vals)) [(first keys) (first vals)])))", "problem": 61, "user": "4f13047d535d64f60314642c"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4f0f174c535d0136e6c22330"}, {"code": "#(apply hash-map (mapcat vector %1 %2))", "problem": 61, "user": "4f03154a535dcb61093f6a58"}, {"code": "(comp (partial apply hash-map) interleave)", "problem": 61, "user": "4f1052b9535d64f603146418"}, {"code": "(fn [keys vals]\n  (loop [ret {} k keys v vals]\n    (if (and (first k) (first v))\n      (recur (assoc ret (first k) (first v)) (rest k) (rest v))\n      ret)))", "problem": 61, "user": "4f0660ee535dcb61093f6c0d"}, {"code": "(fn zm\n  [keys vals]\n    (loop [map {}\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map)))", "problem": 61, "user": "4f10175e535d64f603146411"}, {"code": "(fn my-zipmap [a b]                                                                                                                          \r\n    (apply hash-map (interleave a b)))", "problem": 61, "user": "4f149e0f535d64f60314643d"}, {"code": "(fn [k v]\n  (apply hash-map (interleave k v)))", "problem": 61, "user": "4f128865535d64f603146428"}, {"code": "#(apply hash-map (interleave  %1 %2))", "problem": 61, "user": "4f03bf5e535dcb61093f6b5d"}, {"code": "#(apply hash-map (flatten (map list %1 %2)))", "problem": 61, "user": "4f12ab23535d64f603146429"}, {"code": "(fn [l n] (reduce merge \n  (apply map #(hash-map % %2) [l n])))", "problem": 61, "user": "4f0333f6535dcb61093f6a77"}, {"code": "#(into{}(map vector %1 %2))", "problem": 61, "user": "4f0446f9535dcb61093f6bb8"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4ee4f4a9535d1385b2869d85"}, {"code": "(fn [keys values]\n  (loop [k keys\n         v values\n         acc (hash-map)]\n    (if (or (empty? k) (empty? v))\n      acc\n      (recur (rest k) (rest v) (assoc acc (first k) (first v))))))", "problem": 61, "user": "4f08a8a2535dcb61093f6c3d"}, {"code": "(fn [k v]\n  (into {} (map vector k v)))", "problem": 61, "user": "4f1b0ab3535d64f603146474"}, {"code": "(fn [xs ys]\n  (loop [acc {} x (first xs) xs (rest xs) y (first ys) ys (rest ys)]\n    (if (or (nil? x) (nil? y))\n      acc\n      (recur (assoc acc x y)\n        (first xs) (rest xs)\n        (first ys) (rest ys)))))", "problem": 61, "user": "4dafa380edd6309eace4d17c"}, {"code": "(fn [a b]\n  ((fn pairUp [keys values result]\n    (if (or (empty? keys) (empty? values))\n      result\n      (pairUp\n        (rest keys)\n        (rest values)\n        (assoc result (first keys) (first values))))\n  ) a b {})\n)", "problem": 61, "user": "4f16d6ed535d64f60314644f"}, {"code": "(fn [keys vals]\n  (last \n    (reduce \n      #(list\n        (rest (first %1))\n        (assoc (last %1) (ffirst %1) %2))\n      [keys (hash-map)]\n      (take (count keys) vals))))", "problem": 61, "user": "4f1b92d1535d64f60314647b"}, {"code": "(fn [ks vs]\r\n  (loop [m {}, ks ks, vs vs]\r\n    (if (and (seq ks) (seq vs))\r\n        (recur (assoc m (first ks) (first vs))\r\n               (rest ks)\r\n               (rest vs))\r\n         m)))", "problem": 61, "user": "4de760a3535d08e6dec9fdf9"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4f0d093b535d0136e6c22313"}, {"code": "(fn [keys vals] (loop [r {} k keys v vals] (if (not (and (first k) (first v))) r (recur (assoc r (first k) (first v)) (rest k) (rest v)))))", "problem": 61, "user": "4f0e4ebd535d0136e6c22322"}, {"code": "(fn [k v] (loop [k k v v m {}] (if (or (empty? k) (empty? v)) m (recur (rest k) (rest v) (assoc m (first k) (first v))))))", "problem": 61, "user": "4f0cc259535d0136e6c22310"}, {"code": "#(apply hash-map (flatten (map list %1 %2)))", "problem": 61, "user": "4ec3b393535dcc7ae8597d59"}, {"code": "(fn [ks vs]\n  (reduce\n    (fn [acc [k v]]\n      (assoc acc k v))\n    {}\n    (map vector ks vs)))", "problem": 61, "user": "4dc7e7a5535d8a4b2fd74290"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4f0664bd535dcb61093f6c0f"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4e7d1c22535db169f9c796c5"}, {"code": "(fn [a b] (\n  reduce (fn [x i] (assoc x (nth a i) (nth b i))) {} (range 0 (min (count a) (count b)))\n))", "problem": 61, "user": "4f1595da535d64f603146444"}, {"code": "(fn [x y] (reduce merge {} (map #(hash-map % %2) x y)))", "problem": 61, "user": "4f048f67535dcb61093f6bd3"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "4f032f30535dcb61093f6a73"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4ede361a535d10e5ff6f5332"}, {"code": "(fn [kseq vseq] \n  (loop [[k & ks] kseq [v & vs] vseq acc {}]\n    (if (or (nil? k) (nil? v))\n      acc\n    (recur ks vs (assoc acc k v)))))", "problem": 61, "user": "4f1c2a3a535d64f603146480"}, {"code": "(fn z[keys vals] \n  (let [[k & keys] keys \n        [v & vals] vals] \n    (if (and k v) \n      (assoc (z keys vals) k v) \n      {})))", "problem": 61, "user": "4f1fd734535d64f6031464a5"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4eb02674535d7eef30807338"}, {"code": "(comp (partial into {}) (partial map vector))", "problem": 61, "user": "4f1c9652535d64f603146483"}, {"code": "#(loop [i 0 result nil]\n    (if (or (= i (count %1)) (= i (count %2)))\n      result\n    (recur (inc i) (assoc result (nth %1 i) (nth %2 i) ))\n   ))", "problem": 61, "user": "4ea31da2535d7eef308072c1"}, {"code": "(fn [c d]\n (apply merge (map (fn [a b] (into {} {a b})) \n               c d)))", "problem": 61, "user": "4f00e9c7535dcb61093f6a33"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4f251302e4b0d66497709ff0"}, {"code": "(fn [ks vs] (into {} (map vector ks vs)))", "problem": 61, "user": "4eecc9ad535d93acb0a668b4"}, {"code": "(fn [k v] (apply hash-map (interleave k v)))", "problem": 61, "user": "4dbf7a31535d020aff1edf75"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4f0c84ce535d0136e6c2230e"}, {"code": "(fn [a b]\n  (loop [map {}\n         ks (seq a)\n         vs (seq b)]\n    (if (and ks vs)\n      (recur (assoc map (first ks) (first vs))\n             (next ks)\n             (next vs))\n      map)))", "problem": 61, "user": "4f2a7174e4b0d6649770a03e"}, {"code": "(fn [a b] (reduce conj {} (map #(hash-map %1 %2) a b)))", "problem": 61, "user": "4e5d2dc5535d8a8b8723a2ca"}, {"code": "(fn [keys vals]\n  (loop [acc {} ks keys vs vals]\n    (if (or (empty? ks) (empty? vs))\n  acc\n (recur (assoc acc (first ks) (first vs)) (rest ks) (rest vs)))))", "problem": 61, "user": "4f26d6d9e4b0d6649770a007"}, {"code": "#(apply hash-map (interleave % %2))\r\n\r\n;#(reduce into (map hash-map % %2))", "problem": 61, "user": "4f07c8c3535dcb61093f6c2d"}, {"code": "#(into {} ((comp (partial map vec) (partial partition 2) interleave) %1 %2))", "problem": 61, "user": "4f294c48e4b0d6649770a023"}, {"code": "(fn [sq1, sq2] \n  (into {} \n    (if (>= (count sq1) (count sq2))\n      (map-indexed\n        (fn [idx, it] [(nth sq1 idx), it]) sq2)\n      (map-indexed\n        (fn [idx, it] [it, (nth sq2 idx)]) sq1))))", "problem": 61, "user": "4f21838fe4b0d66497709fd2"}, {"code": "#(into {} (map hash-map % %2))", "problem": 61, "user": "4e8ad247535d65386fec2111"}, {"code": "#(apply hash-map (mapcat (fn [a b] [a b]) %1 %2))", "problem": 61, "user": "4f29cdc8e4b0d6649770a033"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4f0891a2535dcb61093f6c3b"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4f03688d535dcb61093f6aac"}, {"code": "(fn [keys vals]\n  (loop [res {}\n         ks keys\n         vs vals]\n    (let [k (first ks)\n          v (first vs)]\n      (cond\n        (nil? k) res\n        (nil? v) res\n        :else (recur (assoc res k v) (rest ks) (rest vs))))))", "problem": 61, "user": "4f230dfbe4b0d66497709fe0"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4f2c593ee4b0d6649770a053"}, {"code": "(fn [x y] (apply hash-map (mapcat #(list % %2) x y)))", "problem": 61, "user": "4f0478b0535dcb61093f6bcb"}, {"code": "(fn [keys vals]\n  (loop [keys keys vals vals m {}]\n    (if (or (empty? keys) (empty? vals))\n        m\n        (recur (rest keys) \n(rest vals) \n(conj m [(first keys) (first vals)])))))", "problem": 61, "user": "4f03ebf7535dcb61093f6b7f"}, {"code": "#( reduce (fn f[o a] (assoc o (first a) (second a))) {} (map list % %2))", "problem": 61, "user": "4f1d1d95535d64f603146488"}, {"code": "#(apply hash-map (mapcat list %1 %2))", "problem": 61, "user": "4f280840e4b0d6649770a010"}, {"code": "(fn [ks vs]\n  (apply hash-map (interleave ks vs)))", "problem": 61, "user": "4e131443535d04ed9115e7d3"}, {"code": "(fn [keys vals]\n  (loop [map {}\n         ks (seq keys)\n         vs (seq vals)]\n     (if (and ks vs)\n       (recur (assoc map (first ks) (first vs))\n              (next ks)\n              (next vs))\n       map)))", "problem": 61, "user": "4f1d1299535d64f603146487"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4e6a5a32535d8ccf87e9fed0"}, {"code": "(fn [xs ys] (apply hash-map (interleave xs ys)))", "problem": 61, "user": "4f2ef48be4b0d6649770a06c"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4f215350e4b0d66497709fd0"}, {"code": "(fn problem-61 [one two]\n  (apply hash-map (interleave one two)))", "problem": 61, "user": "4f31519ae4b0d6649770a086"}, {"code": "(fn [k v] (into {} (map #(hash-map (first %) (last %)) (partition 2 (interleave k v)))))", "problem": 61, "user": "4f2d5f5de4b0d6649770a05a"}, {"code": "#(reduce into (map hash-map % %2))", "problem": 61, "user": "4e1248b1535d04ed9115e7cf"}, {"code": "(fn my-zipmap [c1 c2]\n  (loop [a (hash-map (first c1) (first c2)) b (rest c1) c (rest c2)]\n    (if (or (= b  '()) (= c '()))\n      a\n      (recur (conj a (hash-map (first b) (first c))) (rest b) (rest c)))))", "problem": 61, "user": "4f04d312535dcb61093f6be7"}, {"code": "(fn [k v] \n  (loop [keys k, vals v, ret {}]\n    (if (or (empty? keys) (empty? vals)) \n      ret\n      (recur (rest keys) (rest vals) (assoc ret (first keys) (first vals)))\n)))", "problem": 61, "user": "4f2965ffe4b0d6649770a029"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4dc1bd76535d020aff1edf8d"}, {"code": "#(apply assoc (cons {} (interleave %1 %2)))", "problem": 61, "user": "4f2e0369e4b0d6649770a064"}, {"code": "(fn [a b] (apply assoc {} (mapcat vector a b)))", "problem": 61, "user": "4f0f01c0535d0136e6c22329"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4f32a7f1e4b0d6649770a095"}, {"code": "#(apply hash-map (mapcat list % %2))", "problem": 61, "user": "4f341320e4b0e243712b1eb4"}, {"code": "(fn [keys vals]\n  (loop [map {} keys keys vals vals]\n    (if (or (empty? keys) (empty? vals))\n      map\n      (recur (assoc map (first keys) (first vals))\n        (rest keys) (rest vals)))))", "problem": 61, "user": "4f038499535dcb61093f6b09"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4f34eb87e4b0e243712b1eba"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4ef48422535dced4c769f236"}, {"code": "(fn [keys vals] \n  (loop [map {} ks keys vs vals]\n    (if (or (empty? ks) (empty? vs)) map\n        (recur (assoc map (first ks) (first vs)) \n                (rest ks) (rest vs)))))", "problem": 61, "user": "4eb9353f535dfed6da9c6d4e"}, {"code": "(fn [coll1 coll2]\n   (reduce merge (map hash-map coll1 coll2)))", "problem": 61, "user": "4f2582bae4b0d66497709ff6"}, {"code": "(fn [c1 c2]\r\n  (let [lst ((fn [[x1 & xs1 :as c1] [x2 & xs2 :as c2]  res]\r\n               (if (or (nil? c1) (nil? c2))\r\n                 res\r\n                 (recur xs1 xs2 (cons x1 (cons x2 res))))) c1 c2 nil)]\r\n    (apply hash-map lst)))", "problem": 61, "user": "4f359c7ee4b0e243712b1ec4"}, {"code": "#(into {} (mapcat hash-map % %2))", "problem": 61, "user": "4f2c2ccbe4b0d6649770a050"}, {"code": "#(loop [ks %1 vs %2 r {}]\n         (let [[k & kr] ks\n               [v & vr] vs]\n           (if (or (empty? ks) (empty? vs))\n             r\n             (recur kr vr (merge r {k v})))))", "problem": 61, "user": "4f1bee08535d64f60314647e"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4f3444b7e4b0e243712b1eb6"}, {"code": "(fn [coll1 coll2]\n  (loop [c1 coll1 c2 coll2 res {}]\n    (if (or (empty? c1) (empty? c2))\n      res\n      (recur \n        (rest c1) \n        (rest c2) \n        (assoc res (first c1) (first c2))))))", "problem": 61, "user": "4f378631e4b0e243712b1ed3"}, {"code": "(fn [keys vals] (loop [k (seq keys) v (seq vals) result {}]\n                  (if (or (empty? k) (empty? v))\n                      result\n                      (recur (rest k) \n                             (rest v)\n                             (assoc result (first k)  (first v))))))", "problem": 61, "user": "4f2aff4de4b0d6649770a044"}, {"code": "#(apply merge (map hash-map %1 %2))", "problem": 61, "user": "4edffe54535d10e5ff6f5347"}, {"code": "(fn [x y] (apply hash-map (interleave x y)))", "problem": 61, "user": "4f31ad57e4b0d6649770a089"}, {"code": "(fn [c1 c2]\n  (reduce conj {}\n    (map (fn [x y]  [x y]) c1 c2)))", "problem": 61, "user": "4f38d6bbe4b0e243712b1ee2"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4f329974e4b0d6649770a093"}, {"code": "(fn [keys vals] \n  (apply conj {} (map #(vector %1 %2) keys vals)))", "problem": 61, "user": "4f36f5f2e4b0e243712b1ece"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4f3cc2fbe4b0e243712b1f55"}, {"code": "(fn [c1 c2]\n  (apply hash-map (interleave c1 c2)))", "problem": 61, "user": "4f29eb2ae4b0d6649770a037"}, {"code": "(fn [ks vs]\n  (let [pairs (map vector ks vs)]\n    (reduce \n      (fn [m kv] (assoc m (first kv) (second kv))) \n      {} pairs)))", "problem": 61, "user": "4f28c979e4b0d6649770a01a"}, {"code": "(fn [ks vs]\n  (loop [ke ks ve vs acc {}]\n    (if (or (empty? ke) (empty? ve)) \n      acc\n      (recur (rest ke) (rest ve) (assoc acc (first ke) (first ve))))))", "problem": 61, "user": "4f418eaee4b0d7d3c9f3fce9"}, {"code": "(fn [a b] (apply assoc {} (interleave a b)))", "problem": 61, "user": "4f4274f2e4b0d7d3c9f3fd00"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4ef77edb535dced4c769f254"}, {"code": "#(apply hash-map (mapcat (fn [p q] [p q]) %1 %2))", "problem": 61, "user": "4f426a7ae4b0d7d3c9f3fcff"}, {"code": "(fn [key value] (loop [k key v value mmp (hash-map)]\n                  (if(or (empty? k) (empty? v)) mmp \n                  (recur (rest k) (rest v) (assoc mmp (first k) (first v))))))", "problem": 61, "user": "4f4003d9e4b0e243712b1fa5"}, {"code": "(fn [k v]\n  (apply hash-map (flatten (map (fn [a b] [a b]) k v))))", "problem": 61, "user": "4f343e60e4b0e243712b1eb5"}, {"code": "#(\n  (fn [v vv a]\n      (if (or (empty? v) (empty? vv))\n          (apply hash-map (reverse a))\n          (recur (rest v) (rest vv)\n                  (cons (first vv)\n                        (cons (first v) a)))))\n  % %2 ())", "problem": 61, "user": "4f404dcee4b0e243712b1fb0"}, {"code": "(fn [a b] (apply assoc {} (mapcat (fn [x y] [x y]) a b)))", "problem": 61, "user": "4eccb190535d23f0362276fe"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4e1b8106535d04ed9115e801"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4ec49231535dcc7ae8597d63"}, {"code": "#(apply assoc (cons {} (interleave %1 %2)))", "problem": 61, "user": "4f474f43e4b0d56e7bb92bb7"}, {"code": "(fn [b t] (reduce into {} (map #(hash-map %1 %2) b t)))", "problem": 61, "user": "4f2baf1ae4b0d6649770a04c"}, {"code": "(fn [ks vs]\r\n    (reduce (fn [m [k v]] (assoc m k v)) \r\n            {}\r\n            (partition 2 (interleave ks vs)))\r\n    )", "problem": 61, "user": "4f0da4e4535d0136e6c22319"}, {"code": "(fn [coll1 coll2]\n  (apply hash-map (flatten (map vector coll1 coll2))))", "problem": 61, "user": "4e7d4544535db169f9c796d0"}, {"code": "#(reduce into (map hash-map %1 %2))", "problem": 61, "user": "4f17df72535d64f603146458"}, {"code": "#(loop [a %1 b %2 r {}]\n  (if (or (empty? a) (empty? b))\n    r\n    (recur (rest a) (rest b) (conj r [(first a) (first b)]))))", "problem": 61, "user": "4f141dee535d64f603146434"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4f38b7d9e4b0e243712b1ee0"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4f49e869e4b0d56e7bb92c02"}, {"code": "(fn [a b]\n  (into {} (map vec (partition 2 2 (interleave a b)))))", "problem": 61, "user": "4f4ba29ae4b03ad3f0c10c7a"}, {"code": "#(apply array-map (interleave %1 %2))", "problem": 61, "user": "4f4ac35ae4b0d56e7bb92c18"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4f39f902e4b0e243712b1efe"}, {"code": "(fn [keys vals]\n  (loop [map {}\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map)))", "problem": 61, "user": "4f17ab99535d64f603146457"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4efd8b67535de96065cf5085"}, {"code": "(fn [& ls] (apply hash-map (flatten (apply (partial map list) ls))))", "problem": 61, "user": "4f03ba9c535dcb61093f6b58"}, {"code": "(fn [ks vs]\n  (let [cnt (if (< (count ks) (count vs))\n              (count ks)\n              (count vs))]\n    (into {} (for [x (range cnt)]\n               [(nth ks x) (nth vs x)]))))", "problem": 61, "user": "4f4544e1e4b0d56e7bb92b7a"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "4f3c772de4b0e243712b1f4c"}, {"code": "(fn [c1 c2] (reduce (fn [m [k v]] (assoc m k v)) {} (map (fn [a b] [a b]) c1 c2)))", "problem": 61, "user": "4f3ec266e4b0e243712b1f8c"}, {"code": "(fn [ks vs]\n  (into {} (map vector ks vs)))", "problem": 61, "user": "4f4e91a9e4b03ad3f0c10cca"}, {"code": "#(loop [l1 %1 l2 %2 m {}]\n  (if (or (empty? l1) (empty? l2))\n      m\n      (recur (rest l1) (rest l2) (assoc m (first l1) (first l2)))))", "problem": 61, "user": "4f4bbda0e4b03ad3f0c10c7b"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4f50c414e4b03ad3f0c10d0d"}, {"code": "(fn [a b]\n  (reduce #(assoc %1 (first %2) (last %2))\n          {}\n          (partition 2 (interleave a b))))", "problem": 61, "user": "4eb66737535d7eef3080736b"}, {"code": "#(into {} (map (fn [k v] (vector k v)) % %2))", "problem": 61, "user": "4f4319ebe4b0d7d3c9f3fd13"}, {"code": "(fn [x y] (apply hash-map (interleave x y)))", "problem": 61, "user": "4f4ff5a8e4b03ad3f0c10cf3"}, {"code": "(fn [x1 x2]\n       (loop [seq1 x1\n        seq2 x2\n\t      hm {}]\n\t (if (and (not (empty? seq1)) (not (empty? seq2)))\n\t   (recur (rest seq1) (rest seq2) (assoc hm (first seq1) (first seq2)))\n\t   hm)))", "problem": 61, "user": "4eae2f9e535d7eef30807324"}, {"code": "(fn [coll1 coll2]\n  (apply hash-map (interleave coll1 coll2)))", "problem": 61, "user": "4f4f08c8e4b03ad3f0c10cd8"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4db2f208535df7e46ed9b6c9"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4db8d37d535d1e037afb219c"}, {"code": "#(apply hash-map (interleave %1 %2 ))", "problem": 61, "user": "4f25c4c4e4b0d66497709ffc"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "4e8ad1d2535d65386fec2110"}, {"code": "(fn [s1 s2] (apply hash-map (mapcat list s1 s2)))", "problem": 61, "user": "4f40f055e4b0e243712b1fc2"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4f4e7c01e4b03ad3f0c10cc9"}, {"code": "(fn [keys values]\r\n    (reduce (fn [m [k v]]\r\n              (assoc m k v))\r\n            {}\r\n            (map vector keys values)))", "problem": 61, "user": "4f047177535dcb61093f6bc6"}, {"code": "(comp (partial apply hash-map) interleave)", "problem": 61, "user": "4f4f0287e4b03ad3f0c10cd7"}, {"code": "(fn f[a b]\n  (apply assoc {}\n    (mapcat #(vector %1 %2) a b)))", "problem": 61, "user": "4f4c6b21e4b03ad3f0c10c8f"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "4f3e6244e4b0e243712b1f85"}, {"code": "(fn [a b] \n  (reduce \n    #(assoc % (first %2) (second %2)) \n    nil \n    (map #(list % %2) a b)))", "problem": 61, "user": "4f569218e4b0a7574ea71826"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4f567cdbe4b0a7574ea71824"}, {"code": "#(reduce into (map hash-map % %2))", "problem": 61, "user": "4e5229dc535d302ef430da6f"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4f54e6f8e4b0a7574ea717ef"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4f569a3ce4b0a7574ea71828"}, {"code": "(fn \n  [k v]\n  (apply assoc {} (interleave k v)))", "problem": 61, "user": "4f29afc7e4b0d6649770a02e"}, {"code": "(fn problem61 [a b]\n  (apply array-map\n     (flatten\n       (let [x (first a)\n             y (first b)]\n         (if (and x y)\n           (cons (list x y) (problem61 (rest a) (rest b))))))))", "problem": 61, "user": "4db6ce85535d1e037afb217f"}, {"code": "(fn [keys vals]\n  (loop [result {}, k keys, v vals]\n    (if\n      (or (empty? k) (empty? v))\n      result\n      (recur\n        (assoc result (first k) (first v))\n        (rest k)\n        (rest v)))))", "problem": 61, "user": "4f5c0549e4b0030a34fb2b1a"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4f5cc3b8e4b0030a34fb2b2b"}, {"code": "(fn [s1 s2] (apply assoc {} (interleave s1 s2)))", "problem": 61, "user": "4f2893d0e4b0d6649770a019"}, {"code": "(fn [ks vs]\n  (loop [h (hash-map)\n         rks ks\n         rvs vs]\n     (if (or (empty? rks) (empty? rvs)) h\n       (recur (assoc h (first rks) (first rvs)) (rest rks) (rest rvs)))))", "problem": 61, "user": "4f036fb3535dcb61093f6ac8"}, {"code": "(comp (partial apply hash-map) interleave)", "problem": 61, "user": "4f6010e7e4b0defedf855fa1"}, {"code": "(fn [keys vals]\n  (apply hash-map (interleave keys vals)))", "problem": 61, "user": "4f504739e4b03ad3f0c10d00"}, {"code": "(fn [k v]\n  (loop [kk k vv v out (hash-map)]\n    (if (or (empty? kk) (empty? vv))\n      out\n      (recur (rest kk) (rest vv) (assoc out (first kk) (first vv))))))", "problem": 61, "user": "4dd9d299535d2dad7130b5dd"}, {"code": "(fn [k v] (apply assoc {} (interleave k v)))", "problem": 61, "user": "4f57a153e4b0a7574ea7183a"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4f6160a7e4b0defedf855fbe"}, {"code": "(fn [ks vs]\n  (loop [ks ks, vs vs, res {}]\n    (if (some empty? [ks vs])\n      res\n      (recur (rest ks) \n             (rest vs)\n             (into res {(first ks) (first vs)})))))", "problem": 61, "user": "4efa3d4b535dced4c769f270"}, {"code": "(fn [xs ys]\n  (apply hash-map (reverse (loop [xsp xs ysp ys acc '()]\n    (if (or (empty? xsp) (empty? ysp))\n        acc\n        (recur (rest xsp) (rest ysp) (cons (first ysp) (cons (first xsp) acc))))))))", "problem": 61, "user": "4e7f5a0b535db966e863cc41"}, {"code": "(fn [a b] (apply array-map (interleave a b)))", "problem": 61, "user": "4f559d2ce4b0a7574ea71808"}, {"code": "(fn create-map [k v]\r\n   (loop [k1 k v1 v acc {}]\r\n     (if (or (empty? k1) (empty? v1))\r\n       acc\r\n       (recur (rest k1) (rest v1) (conj acc [(first k1) (first v1)])))))", "problem": 61, "user": "4f629697e4b0defedf855fd6"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "4f63777be4b0defedf855fe4"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "4f4ec77ae4b03ad3f0c10cd0"}, {"code": "(fn [x y] (loop [acc {} k x v y]\n  (if (or (empty? k) (empty? v))\n    acc\n    (recur (merge acc {(first k) (first v)}) (rest k) (rest v)))))", "problem": 61, "user": "4f697a66e4b07046d9f4ef8a"}, {"code": "(fn [ks vs]\n  (apply hash-map (mapcat #(list %1 %2) ks vs)))", "problem": 61, "user": "4f62b29ce4b0defedf855fd9"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4f58fe71e4b0a7574ea7185f"}, {"code": "#(->> (map vector % %2) (into {}))", "problem": 61, "user": "4ed845a8535d10e5ff6f52f8"}, {"code": "(fn zm [k v]\n  (reduce \n    #(assoc %1 (first %2) (second %2)) {} \n       (partition 2 (interleave k v))))", "problem": 61, "user": "4f611127e4b0defedf855fb4"}, {"code": "#(apply hash-map(interleave % %2))", "problem": 61, "user": "4f4bd422e4b03ad3f0c10c7e"}, {"code": "(fn [keys vals]\n(loop [map {}\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map)))", "problem": 61, "user": "4f6b4237e4b07046d9f4efa9"}, {"code": "#(apply assoc {}\r\n  (interleave %1 %2))", "problem": 61, "user": "4ddc56e1535d02782fcbea04"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4f6fbb68e4b07046d9f4efeb"}, {"code": "(fn [col1 col2]\n  (loop [l1 col1, l2 col2, result {}]\n    (if (or (empty? l1) (empty? l2))\n         result\n        (recur (rest l1) (rest l2) \n            (assoc result (first l1) (first l2) )\n           )\n     )\n  )\n)", "problem": 61, "user": "4f6d9d7ee4b07046d9f4efcd"}, {"code": "(fn [s1 s2]\n  ( into {} (map vector s1 s2)))", "problem": 61, "user": "4eb8ec4a535dfed6da9c6d4b"}, {"code": "(fn [x y] \n  (reduce merge (map #(assoc {} %1 %2) x y)))", "problem": 61, "user": "4dc0f7ff535d020aff1edf82"}, {"code": "(comp (partial apply hash-map) interleave)", "problem": 61, "user": "4eb298c1535d7eef3080734b"}, {"code": "#(apply array-map (interleave %1 %2))", "problem": 61, "user": "4f69f34fe4b07046d9f4ef90"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4f6845d2e4b07046d9f4ef74"}, {"code": "#(apply sorted-map (interleave % %2))", "problem": 61, "user": "4e6e2ac4535d5021c1a895ff"}, {"code": "(fn [l1 l2]\n  (loop [l1 l1 l2 l2 acc {}]\n    (if (or (empty? l2) (empty? l1))\n      acc\n      (recur (rest l1) (rest l2)\n             (assoc acc (first l1)\n                        (first l2))))))", "problem": 61, "user": "4e568873535d8a8b8723a283"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "4dafba62838c986e7473b5f7"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "4f6688d6e4b07046d9f4ef5d"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4f713878e4b07046d9f4f00a"}, {"code": "(fn [a b] (into {} (map #(vector %1 %2) a b)))", "problem": 61, "user": "4f68c485e4b07046d9f4ef7c"}, {"code": "#(into {} (map (fn [k v] [k v]) % %2))", "problem": 61, "user": "4e89dbce535d3e98b8023283"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "4f6a2ff2e4b07046d9f4ef98"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4f7207d3e4b07046d9f4f019"}, {"code": "(fn [x y] (apply array-map (interleave x y)))", "problem": 61, "user": "4f7b6b90e4b06e829148e1a4"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4f7d5328e4b06e829148e1bf"}, {"code": "(fn [xs zs]\n  (into {} (map (fn [idx] [(nth xs idx) (nth zs idx)]) (range (min (count xs) (count zs))))))", "problem": 61, "user": "4f7f0827e4b06e829148e1d5"}, {"code": "(fn [l1 l2]\n  (apply merge\n    (map (fn [x y] {x y}) l1 l2)))", "problem": 61, "user": "4f7e29dde4b06e829148e1ca"}, {"code": "(fn [a b]\n  (apply assoc {} (interleave a b)))", "problem": 61, "user": "4f7fc9a1e4b033992c121bee"}, {"code": "#(reduce  (fn [m [x y]] (assoc m x y)){} (map list % %2))", "problem": 61, "user": "4f7869c2e4b0fbe0118ec589"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4f7b6f12e4b06e829148e1a5"}, {"code": "#(apply conj (map hash-map %1 %2))", "problem": 61, "user": "4f8345c6e4b033992c121c1b"}, {"code": "(fn [keys values]\r\n     (into {} (map vector keys values)))", "problem": 61, "user": "4f82e14be4b033992c121c0c"}, {"code": "(fn mkmap\n  ([l1 l2] \n    (mkmap (rest l1) (rest l2)\n      {(first l1) (first l2)}))\n  ([l1 l2 mp]\n    (if \n      (or\n        (empty? l1)\n        (empty? l2))\n      mp\n      (mkmap \n        (rest l1)\n        (rest l2)\n        (assoc mp\n          (first l1)\n          (first l2)))))\n)", "problem": 61, "user": "4f7d91e6e4b06e829148e1c3"}, {"code": "(fn zippity[keys values]\n  (apply assoc {} (interleave keys values)))", "problem": 61, "user": "4f831fd3e4b033992c121c17"}, {"code": "(fn mapify [a b]\n  (apply hash-map (interleave a b)))", "problem": 61, "user": "4f4e4ecbe4b03ad3f0c10cbf"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4f725201e4b07046d9f4f02f"}, {"code": "(fn map [v1 v2] \n  (apply array-map (vec (mapcat #(list %1 %2) v1 v2)))\n)", "problem": 61, "user": "4f84400de4b033992c121c2e"}, {"code": "(fn [ks vs]\n    (loop [map {}\n           k (seq ks)\n           v (seq vs)]\n      (if (and k v)\n        (recur (assoc map (first k) (first v))\n               (next k)\n               (next v))\n        map)))", "problem": 61, "user": "4dc78527535d8a4b2fd7428f"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4f88ae35e4b033992c121c6d"}, {"code": "(fn [ks vs] (apply assoc {} (interleave ks vs)))", "problem": 61, "user": "4f8b56dae4b02e764a0a517e"}, {"code": "#(reduce conj {} (map vector %1 %2))", "problem": 61, "user": "4f83665ee4b033992c121c1c"}, {"code": "(fn zipp [a b]\n  (if (or (empty? a) (empty? b)) '{}\n(merge {(first a) (first b)} (zipp (rest a) (rest b)))))", "problem": 61, "user": "4f8b20fce4b02e764a0a5178"}, {"code": "#(into {} (map (fn [a b] [a b]) %1 %2))", "problem": 61, "user": "4f8c5f4fe4b02e764a0a5198"}, {"code": "(fn [k v]\n  (loop [k k v v acc {}]\n    (if (or (empty? k) (empty? v))\n        acc\n        (recur (rest k) (rest v) (assoc acc (first k) (first v))))))", "problem": 61, "user": "4f9120d8e4b0dcca54ed6c96"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4f9597e0e4b0dcca54ed6cd4"}, {"code": "(fn [a b]\n  (apply merge\n    (map \n      #(hash-map %1 %2)\n      a\n      b\n    )\n  )\n)", "problem": 61, "user": "4f8ea1f7e4b0d4e659cdde69"}, {"code": "(letfn [(m [[k & l] [v & w]]                                                                                                                                                                                                                 \n          (if (and k v)                                                                                                                                                                                                                      \n            (assoc (m l w) k v)                                                                                                                                                                                                              \n            {}))]                                                                                                                                                                                                                            \n  m)", "problem": 61, "user": "4db342d7535df7e46ed9b6cd"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4f71ba6ee4b07046d9f4f012"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4f727023e4b07046d9f4f035"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "4f725466e4b07046d9f4f030"}, {"code": "(fn [k v] (apply assoc {} (interleave k v)))", "problem": 61, "user": "4f951375e4b0dcca54ed6cc8"}, {"code": "(fn zipmap2 [keys vals]\n    (loop [map {}\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map)))", "problem": 61, "user": "4f8ac2bde4b02e764a0a5172"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4e778d36535d324fb2983d71"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4dc21233535d020aff1edf92"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "4f7f9665e4b033992c121bea"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4f969214e4b0dcca54ed6cdd"}, {"code": "(fn [keys vals]\n  (into {} (map vector keys vals)))", "problem": 61, "user": "4f3fb586e4b0e243712b1f9c"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4f890488e4b033992c121c76"}, {"code": "#(apply hash-map (mapcat list % %2))", "problem": 61, "user": "4f991ec1e4b0dcca54ed6cfb"}, {"code": "(fn [coll1 coll2] (into {} (map #(vector %1 %2) coll1 coll2)))", "problem": 61, "user": "4f98ead0e4b0dcca54ed6cf8"}, {"code": "(fn mapzip [xs ys] (loop [keys xs\n                              vals ys\n                              new-map {}]\n                              (if (or (empty? keys) (empty? vals)) new-map\n                              (recur (rest keys) (rest vals) (assoc new-map (first keys) (first vals))))))", "problem": 61, "user": "4f748b54e4b044e54cd9a8fa"}, {"code": "(fn [keys vals]\n  (loop [mymap {}\n        mykeys (seq keys)\n        myvals (seq vals)]\n    (if (and mykeys myvals)\n      (recur (assoc mymap (first mykeys) (first myvals))\n        (next mykeys)\n        (next myvals))\n    mymap)))", "problem": 61, "user": "4f98da04e4b0dcca54ed6cf7"}, {"code": "(fn [ks vs] (into {} (map vector ks vs)))", "problem": 61, "user": "4f7ab8c7e4b06e829148e19c"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4f6511eee4b07046d9f4ef3a"}, {"code": "(fn [ks vs] (apply hash-map (interleave ks vs)))", "problem": 61, "user": "4f97d8f3e4b0dcca54ed6ced"}, {"code": "(fn [k v]\n    (reduce merge\n       (map #(assoc {} %1 %2) k v)\n       )\n     )", "problem": 61, "user": "4f9920a3e4b0dcca54ed6cfc"}, {"code": "(fn my-zipmap [keys values]\n             (->> (map vector keys values)\n               (into {})))", "problem": 61, "user": "4f465096e4b0d56e7bb92b9a"}, {"code": "#(apply merge (map (fn [ca cb] {ca cb})\n  %1 %2))", "problem": 61, "user": "4f3cd535e4b0e243712b1f56"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4f9fe2b9e4b0dcca54ed6d40"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4f954dbce4b0dcca54ed6ccd"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "4e1fe7f1535d04ed9115e810"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4db3393e535df7e46ed9b6cc"}, {"code": "(fn [x y] (apply hash-map (interleave x y)))", "problem": 61, "user": "4f9754d4e4b0dcca54ed6ce9"}, {"code": "(fn z [k v]\r\n  (loop [m {}\r\n         x (seq k)\r\n         y (seq v)]\r\n    (if (and x y)\r\n      (recur (assoc m (first x) (first y))\r\n             (next x)\r\n             (next y))\r\n      m)))", "problem": 61, "user": "4e707714535d5021c1a89638"}, {"code": "(fn [ks vs]\n  (into {} (map vector ks vs)))", "problem": 61, "user": "4f969a66e4b0dcca54ed6cde"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4f8db862e4b02e764a0a51b2"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4f50be5de4b03ad3f0c10d0c"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4f9d53f3e4b0dcca54ed6d21"}, {"code": "(fn [keys vals]\n    (loop [map {}\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map)))", "problem": 61, "user": "4fa2fa5ee4b081705acca186"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4f7d25b4e4b06e829148e1ba"}, {"code": "#(apply array-map (interleave %1 %2))", "problem": 61, "user": "4f9f7daae4b0dcca54ed6d37"}, {"code": "#(apply sorted-map (apply mapcat vector %&))", "problem": 61, "user": "4f71347ae4b07046d9f4f009"}, {"code": "#(apply hash-map (mapcat list % %2))", "problem": 61, "user": "4fa5406fe4b081705acca1ac"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4f40ccd9e4b0e243712b1fc0"}, {"code": "#(into {} (map vec (partition 2 (interleave %1 %2))))", "problem": 61, "user": "4fa0a4b1e4b0dcca54ed6d4f"}, {"code": "(fn [ks vs] (into {} (map vector ks vs)))", "problem": 61, "user": "4fa6d532e4b081705acca1be"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4fa3f91fe4b081705acca196"}, {"code": "#(into {} (apply map vector %&))", "problem": 61, "user": "4f9acea6e4b0dcca54ed6d10"}, {"code": "#(reduce (fn [a v] (assoc a (first v) (second v))) {} (map list % %2))", "problem": 61, "user": "4fa30027e4b081705acca187"}, {"code": "#(apply array-map (interleave %1 %2))", "problem": 61, "user": "4e65f9d4535d8ccf87e9fe73"}, {"code": "(fn a[x y]\n  (loop [xx x\n         yy y\n         ma {}]\n         (if (or (empty? yy) (empty? xx))\n            ma\n            (recur \n              (rest xx) \n              (rest yy) \n              (assoc ma \n                    (first xx) \n                    (first yy))))))", "problem": 61, "user": "4f891abde4b033992c121c77"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4faa3eeae4b081705acca1ed"}, {"code": "#(into (hash-map) (map vector %1 %2))", "problem": 61, "user": "4faa8de0e4b081705acca1f8"}, {"code": "(comp (partial apply sorted-map) interleave)", "problem": 61, "user": "4faa9593e4b081705acca1f9"}, {"code": "(fn [keys vals]\n  (loop [keys (seq keys), vals (seq vals), result {}]\n    (cond\n      (and keys vals) (recur (next keys) (next vals) (assoc result (first keys) (first vals)))\n      :else result)))", "problem": 61, "user": "4fa820fde4b081705acca1ce"}, {"code": "(fn my-zipmap \n([s t] (my-zipmap s t {}))\n([s t r] (cond (or (empty? s)  (empty? t)) r\n               :default (my-zipmap (rest s) (rest t) \n\t       \t\t  (assoc r (first s) (first t))))))", "problem": 61, "user": "4f9c4080e4b0dcca54ed6d1a"}, {"code": "#(apply array-map (mapcat (fn [a b]  [a b] ) %1 %2))", "problem": 61, "user": "4e86d3cf535dceadca46984c"}, {"code": "(fn zippy \n  ([keys vals] (zippy (assoc {} (first keys) (first vals)) (rest keys) (rest vals)))\n  ([res keys vals] (if (or (empty? keys) (empty? vals)) res (recur (assoc res (first keys) (first vals)) (rest keys) (rest vals)))))", "problem": 61, "user": "4fa39b3ee4b081705acca191"}, {"code": "(fn mapConstruction [a b] (loop [x a y b z (hash-map)] (if (or (empty? x) (empty? y)) z \n(recur (rest x) (rest y) (conj z [(first x) (first y)])))))", "problem": 61, "user": "4f9336ece4b0dcca54ed6cb7"}, {"code": "(fn [k v]\n  (reduce #(merge %1 %2) {} \n(map #(vector %1 %2) k v)))", "problem": 61, "user": "4facd2fae4b081705acca22f"}, {"code": "#(into {} (map vec (partition 2 (interleave %1 %2))))", "problem": 61, "user": "4fabb1dce4b081705acca21a"}, {"code": "#(apply array-map (interleave %1 %2))", "problem": 61, "user": "4facff22e4b081705acca230"}, {"code": "#(loop [x %1 y %2 m {}]\n  (if (or (empty? x) (empty? y)) m\n      (recur (rest x) (rest y) (assoc m (first x) (first y)))))", "problem": 61, "user": "4fae258de4b081705acca246"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4f9ff06ce4b0dcca54ed6d41"}, {"code": "(fn [coll1 coll2]\n    (loop [keys coll1\n           vals coll2\n           accum {}]\n      (if (or (empty? keys) (empty? vals))\n        accum\n        (recur (rest keys) (rest vals) (assoc accum (first keys) (first vals))))))", "problem": 61, "user": "4f17aa97535d64f603146456"}, {"code": "(fn [k v] (apply hash-map (interleave k v)))", "problem": 61, "user": "4fa67030e4b081705acca1b7"}, {"code": "#(apply array-map (interleave % %2))", "problem": 61, "user": "4f91a38ae4b0dcca54ed6c9f"}, {"code": "(fn [ks vs] (into {} (map vector ks vs)))", "problem": 61, "user": "4fae0b85e4b081705acca245"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4f301d02e4b0d6649770a072"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "4fad33e8e4b081705acca236"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "4fadbc3fe4b081705acca23f"}, {"code": "(fn [xs ys]\n  (into {} (map vector xs ys)))", "problem": 61, "user": "4e8338d6535db62dc21a62d3"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4f73f78de4b044e54cd9a8f3"}, {"code": "#(reduce merge (apply map hash-map %&))", "problem": 61, "user": "4fab259ae4b081705acca212"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4f8386c5e4b033992c121c1d"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4e5d1912535d8a8b8723a2c9"}, {"code": "(fn [k v]\n  (apply assoc {}\n    (interleave k v)))", "problem": 61, "user": "4eb59464535d7eef30807369"}, {"code": "(fn [k v] (reduce conj {} (map (fn [& v] (vec v))k v)))", "problem": 61, "user": "4fb2101ce4b081705acca284"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4f82ed48e4b033992c121c0e"}, {"code": "#(loop [m {} k %1 v %2]\n  (if (or (empty? k) (empty? v))\n    m\n    (recur (assoc m (first k) (first v)) (rest k) (rest v))))", "problem": 61, "user": "4faec810e4b081705acca24e"}, {"code": "#(reduce conj {} (map vector % %2))", "problem": 61, "user": "4f9a0064e4b0dcca54ed6d03"}, {"code": "(fn my-zipmap [k v]\n  (cond\n    (or (empty? k) (empty? v)) {}\n    :else (merge {(first k) (first v)} (my-zipmap (rest k) (rest v)))\n  )\n)", "problem": 61, "user": "4faacc04e4b081705acca201"}, {"code": "(fn [ks vs] \n    (reduce (fn [m [k v]] (assoc m k v)) {} (map vector ks vs)))", "problem": 61, "user": "4fa6a491e4b081705acca1bc"}, {"code": "(fn [v1 v2]\n  (reduce into {}\n     (map #(assoc {} %1 %2) v1 v2)))", "problem": 61, "user": "4f91f5b1e4b0dcca54ed6ca7"}, {"code": "#(loop [m {} k %1 v %2]\r\n  (if (or (empty? k) (empty? v))\r\n    m\r\n    (recur (assoc m (first k) (first v)) (rest k) (rest v))))", "problem": 61, "user": "4fb54e50e4b081705acca2bb"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4f1abbfb535d64f60314646e"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4e83bb61535db62dc21a62dd"}, {"code": "(fn [a b] (apply array-map (flatten (map #(vector % %2) a b))))", "problem": 61, "user": "4fab31a8e4b081705acca215"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "4f9d8083e4b0dcca54ed6d23"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4fb3b865e4b081705acca2a2"}, {"code": "(fn [ks vs]\n  (reduce #(apply assoc %1 %2)\n          {}\n          (partition 2 (interleave ks vs))))", "problem": 61, "user": "4f1bb9d8535d64f60314647d"}, {"code": "#(into {} (map hash-map %1 %2))", "problem": 61, "user": "4f18677d535d64f603146459"}, {"code": "(fn[a,b](apply hash-map (interleave (take (min (count a) (count b)) a) (take (min (count a) (count b)) b))))", "problem": 61, "user": "4fb3dd1ee4b081705acca2a5"}, {"code": "#(reduce (fn [m x] (apply assoc m x)) {} (map list % %2))", "problem": 61, "user": "4fbfe9a4e4b081705acca31f"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "4fb65f2fe4b081705acca2c7"}, {"code": "(fn [a b] (reduce merge (map #(hash-map %1 %2) a b)))", "problem": 61, "user": "4fc0853ae4b081705acca327"}, {"code": "(fn zipmap2 [ks vs]\n  (apply hash-map (interleave ks vs)))", "problem": 61, "user": "4faafccde4b081705acca209"}, {"code": "(fn [la lb] (apply assoc {} (interleave la lb)))", "problem": 61, "user": "4fb86dc9e4b081705acca2d8"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4fbe42b7e4b081705acca30f"}, {"code": "(fn [m n] (apply array-map (mapcat (fn [k v] [k v]) m n)))", "problem": 61, "user": "4faac363e4b081705acca200"}, {"code": "(fn [a b]\n  (loop [acc {}\n         l a\n         r b]\n    (let [[l-first & l-rest] l\n          [r-first & r-rest] r]\n      (if (or (empty? l) (empty? r))\n        acc\n        (recur\n          (conj acc [l-first r-first])\n          l-rest\n          r-rest)))))", "problem": 61, "user": "4fba7d1ee4b081705acca2e0"}, {"code": "#(apply hash-map (mapcat vector %1 %2))", "problem": 61, "user": "4fc4eadee4b081705acca353"}, {"code": "(fn [ks vs]\n  (into {} (map vector ks vs)))", "problem": 61, "user": "4fb1d907e4b081705acca282"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4fbdcb87e4b081705acca30a"}, {"code": "#(into {} (map hash-map %1 %2))", "problem": 61, "user": "4faa6184e4b081705acca1f1"}, {"code": "(fn [ks vs]\r\n  (apply assoc {} (interleave ks vs)))", "problem": 61, "user": "4fb37882e4b081705acca2a0"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "4fc0221ce4b081705acca322"}, {"code": "(fn zipmap--recur\n  [ks vs]\n  (loop [acc {}, ks ks, vs vs]\n    (if (and (seq ks) (seq vs))\n      (recur (assoc acc (first ks) (first vs)) (rest ks) (rest vs))\n      acc)))", "problem": 61, "user": "4fc6305de4b0ee37620e180b"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "4fabbb97e4b081705acca21d"}, {"code": "(fn [a b] (apply hash-map (interleave a b)))", "problem": 61, "user": "4fc8c8d8e4b0ee37620e183b"}, {"code": "(fn [keys vals] (apply hash-map (mapcat (fn [k v] [k v]) keys vals)))", "problem": 61, "user": "4fc7db47e4b0ee37620e182a"}, {"code": "(fn [ks vs]\n  (->> (map #(vector %1 %2) ks vs)\n       (reduce #(assoc %1 (%2 0) (%2 1)) {})))", "problem": 61, "user": "4fca1cd6e4b0ee37620e184c"}, {"code": "(fn zip-map [k v] (apply hash-map (reduce concat (map (fn [a b] [a b]) k v))))", "problem": 61, "user": "4fcaf7a4e4b0ee37620e1857"}, {"code": "#(into {} (map vec (partition 2 (interleave % %2)))\n)", "problem": 61, "user": "4fa9da14e4b081705acca1e7"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4f7431d2e4b044e54cd9a8f7"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4fc18846e4b081705acca331"}, {"code": "#(apply hash-map (mapcat list %1 %2))", "problem": 61, "user": "4fc67081e4b0ee37620e1813"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4fce5474e4b0d4b2a7a9d451"}, {"code": "(fn [v1 v2]\n  (reduce #(assoc %1 (first %2) (last %2)) {} (\n    partition 2 (interleave v1 v2))\n  )\n)", "problem": 61, "user": "4fcad14ce4b0ee37620e1856"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4fccdc75e4b0ee37620e186d"}, {"code": "(fn [list1 list2] (reduce (fn [map x] (assoc map (first x) (last x))) {} (map vector list1 list2)))", "problem": 61, "user": "4f2f6678e4b0d6649770a06e"}, {"code": "(fn [col1 col2] \n  (reduce merge (map  #(assoc {} %1 %2) col1 col2)))", "problem": 61, "user": "4fb2f9b2e4b081705acca294"}, {"code": "(fn [ks vs]\n  (apply array-map (interleave ks vs)))", "problem": 61, "user": "4fbb9d80e4b081705acca2ea"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4f826548e4b033992c121c08"}, {"code": "(fn [& c]\n  (apply assoc {} (apply interleave c)))", "problem": 61, "user": "4fb79872e4b081705acca2d2"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4fcebce4e4b03432b189f404"}, {"code": "#(apply hash-map (interleave %1 %2) )", "problem": 61, "user": "4fc43a8ee4b081705acca346"}, {"code": "(fn f [keys vals]\n  (if (or (empty? keys) (empty? vals)) \n    {}\n    (let [[k & ks] keys [v & vs] vals]\n      (assoc (f ks vs) k v))))", "problem": 61, "user": "4fd22e70e4b04c3a95aa041c"}, {"code": "(fn [coll1 coll2] (into {} (map #(vector %1 %2) coll1 coll2)))", "problem": 61, "user": "4ee77f15535d93acb0a66868"}, {"code": "#(apply assoc {} (mapcat list % %2))", "problem": 61, "user": "4fbacdbae4b081705acca2e5"}, {"code": "(fn [a b] (apply assoc {} (interleave a b)))", "problem": 61, "user": "4fbcbd50e4b081705acca2f9"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4fcc103fe4b0ee37620e185f"}, {"code": "(fn [a b]\n  ((fn r [a b]\n     (if (or (empty? a) (empty? b))\n       {}\n       (merge (r (rest a) (rest b)) {(first a) (first b)})))\n   a b))", "problem": 61, "user": "4fb510b5e4b081705acca2b8"}, {"code": "(fn [k v]\n    (apply merge (map #( array-map % %2) k v )))", "problem": 61, "user": "4f030775535dcb61093f6a43"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4fb12b35e4b081705acca275"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4fc2e302e4b081705acca33a"}, {"code": "(fn[k v] (loop [m {} a k b v] (if (or (empty? a) (empty? b)) m (recur (assoc m (first a) (first b)) (rest a) (rest b)))))", "problem": 61, "user": "4f148418535d64f60314643a"}, {"code": "(fn\n  [keys vals]\n    (reduce (fn [m pair]\n                (assoc m (first pair)\n                         (second pair)))\n      {} (map #(vector %1 %2) keys vals)))", "problem": 61, "user": "4fd16778e4b04c3a95aa040f"}, {"code": "#(apply assoc (cons {}(mapcat list % %2)))", "problem": 61, "user": "4fb23582e4b081705acca28a"}, {"code": "(fn Mp [K V]\n  (let [[k & ks] K,[v & vs] V]\n    (cond\n      (or (empty? vs) (empty? ks)) (assoc {} k v)\n      :else (assoc (Mp ks vs) k v))))", "problem": 61, "user": "4fda016ae4b05e33b9224f42"}, {"code": "#(apply hash-map (mapcat list % %2))", "problem": 61, "user": "4fd96694e4b05e33b9224f37"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4dae0510c9a9d6ed4b99dc57"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4fd2789ee4b04c3a95aa0422"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4ef89fb0535dced4c769f260"}, {"code": "(fn [x y] (apply hash-map (interleave x y)))", "problem": 61, "user": "4fbd12a5e4b081705acca2fd"}, {"code": "(fn f [x y]\n  (let [[h1 & t1] (seq x)\n        [h2 & t2] (seq y)]\n    (if (or (empty? t1) (empty? t2))\n      (hash-map h1 h2)\n      (conj (hash-map h1 h2) (f t1 t2)))))", "problem": 61, "user": "4ead2841535d7eef3080731e"}, {"code": "(fn [ks vs]\n  (apply hash-map (interleave ks vs))\n)", "problem": 61, "user": "4ec56b5b535d6d7199dd369f"}, {"code": "(fn [my-keys my-values]\n    (apply hash-map (interleave my-keys my-values)))", "problem": 61, "user": "4f4a8707e4b0d56e7bb92c12"}, {"code": "(fn [col1 col2]\n  (reduce #(assoc %1 (first %2) (second %2) ) {} (map vector col1 col2)))", "problem": 61, "user": "4fd7962ee4b0dab7d829f385"}, {"code": "#(apply array-map (interleave %1 %2))", "problem": 61, "user": "4fc6d2c1e4b0ee37620e181b"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "4fd6f4d8e4b0dab7d829f37b"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4dad8c92c9a9d6ed1699dc57"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4fadbb17e4b081705acca23e"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4ee6166e535d93acb0a66854"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4fd2e5d8e4b04c3a95aa0427"}, {"code": "(fn [a b]\n  (apply hash-map (interleave a b)))", "problem": 61, "user": "4f410b63e4b0e243712b1fc5"}, {"code": "#(apply merge (map (fn [x y] {x y}) %1 %2))", "problem": 61, "user": "4faf2f4ce4b081705acca251"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4fccb31be4b0ee37620e1868"}, {"code": "(fn zm [s1 s2]\r\n   (reduce  #(assoc %1 (first %2) (second %2)) {}\r\n            (map list s1 s2)))", "problem": 61, "user": "4fcc6cb3e4b0ee37620e1861"}, {"code": "#(apply hash-map (mapcat list %1 %2))", "problem": 61, "user": "4fde492be4b05e33b9224f8a"}, {"code": "#(apply array-map (interleave %1 %2))", "problem": 61, "user": "4fdd27f3e4b05e33b9224f78"}, {"code": "(fn [keys vals]\n  (into {} (map #(vector %1 %2) keys vals)))", "problem": 61, "user": "4e5fdd68535d8ccf87e9fe4f"}, {"code": "#(apply hash-map (flatten (interleave % %2)))", "problem": 61, "user": "4db016af838c48654951d9b9"}, {"code": "(fn my-zip-map [keys vals]\r\n  (loop [keys keys\r\n         vals vals\r\n         result {}]\r\n    (if (or (empty? keys) (empty? vals))\r\n      result\r\n      (recur\r\n       (rest keys)\r\n       (rest vals)\r\n       (conj result [(first keys) (first vals)])))))", "problem": 61, "user": "4fe54ee8e4b0e8f79898fec3"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "4fc93728e4b0ee37620e1844"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4fca2ef0e4b0ee37620e184e"}, {"code": "#(loop [keys %1 values %2 return {}]\n  (\n    if(or (empty? keys)(empty? values)) return\n    (recur (next keys) (next values) (assoc return (first keys) (first values)))\n  )\n)", "problem": 61, "user": "4fe588b6e4b0e8f79898fec5"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "4fc52d79e4b081705acca386"}, {"code": "#(apply array-map (interleave % %2))", "problem": 61, "user": "4fcd155de4b065de69964ca3"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4fe13ad7e4b0dd6cd5ce3632"}, {"code": "#(reduce merge (map hash-map % %2))", "problem": 61, "user": "4f463dfde4b0d56e7bb92b99"}, {"code": "(comp (partial apply hash-map) interleave)", "problem": 61, "user": "4fdec88fe4b05e33b9224f8e"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4fe8aef4e4b07c9f6fd12c6c"}, {"code": "(fn my-zipmap ([ks vs] (my-zipmap ks vs {}))\n   ([[k & ks] [v & vs] m]\n    (if (or (empty? ks) (empty? vs))\n      (assoc m k v)\n      (recur ks vs (assoc m k v)))))", "problem": 61, "user": "4fe8d862e4b0547ebccb2428"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4fb591aee4b081705acca2c0"}, {"code": "(fn [a b] (apply hash-map (interleave a b)))", "problem": 61, "user": "4da8dd6e30acd6ed12482a68"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4feada56e4b0140c20fb9c11"}, {"code": "(fn zm [a b]\r\n    (loop [m {} a a b b]\r\n      (if (or (empty? a) (empty? b)) m\r\n      (recur (assoc m (first a) (first b)) (rest a) (rest b)))))", "problem": 61, "user": "4fea08a9e4b0547ebccb2484"}, {"code": "(fn [ks vs]\r\n          (reduce #(conj %1 (vec %2))\r\n                  {}\r\n                  (partition 2 (interleave ks vs))))", "problem": 61, "user": "4f07ad89535dcb61093f6c2a"}, {"code": "(fn my-zipmap [key-list val-list]\n  (loop [ks key-list vs val-list zm {}]\n    (if (and ks vs)\n      (recur (next ks)\n             (next vs)\n             (assoc zm (first ks) (first vs)))\n      zm)))", "problem": 61, "user": "4f8bbb27e4b02e764a0a5182"}, {"code": "#(apply conj {} (map vec (map list %1 %2)))", "problem": 61, "user": "4fe87e56e4b07c9f6fd12c40"}, {"code": "(fn [c1 c2] (apply merge (map #(hash-map % %2) c1 c2)))", "problem": 61, "user": "4fdf2b50e4b05e33b9224f93"}, {"code": "#(apply hash-map (flatten (map list %1 %2)))", "problem": 61, "user": "4f515bd3e4b03ad3f0c10d1f"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4fe88f78e4b07c9f6fd12c45"}, {"code": "#(apply merge (map hash-map % %2))", "problem": 61, "user": "4f05ea25535dcb61093f6c02"}, {"code": "(fn [a b]\r\n  (apply hash-map (interleave a b))\r\n  )", "problem": 61, "user": "4febb4dae4b0681fd128dc98"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4ff07688e4b0678c553fc324"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4fe84c74e4b07c9f6fd12c3c"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4fe9de74e4b0547ebccb2475"}, {"code": "(fn myzipmap [coll1 coll2]\r\n  (let [coll (partition 2 (interleave coll1 coll2))]\r\n    (loop [result {} coll coll]\r\n      (if (empty? coll)\r\n        result\r\n        (recur (assoc result (first (first coll)) (second (first coll)))\r\n          (rest coll))))))", "problem": 61, "user": "4fd170fce4b04c3a95aa0411"}, {"code": "#(into {} (map vec (partition 2 (interleave %1 %2))))", "problem": 61, "user": "4fe8b6afe4b07c9f6fd12c76"}, {"code": "(fn [c1 c2]\n(reduce (fn [m [k v]] (assoc m k v)) \n        {} (partition 2 (interleave c1 c2))))", "problem": 61, "user": "4e95c771535dbda64a6f6b39"}, {"code": "(fn [k v]\n  (apply hash-map (interleave k v)))", "problem": 61, "user": "4ff304f4e4b0678c553fc343"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4fe15ffee4b0dd6cd5ce3634"}, {"code": "#(apply hash-map (mapcat list %1 %2))", "problem": 61, "user": "4fe83efbe4b07c9f6fd12c3b"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4ebbb6bc535dfed6da9c6d71"}, {"code": "#(apply hash-map\n  (mapcat list %1 %2))", "problem": 61, "user": "4ff5744ae4b0678c553fc36a"}, {"code": "(fn [ks vs] (apply hash-map (mapcat #(vector %1 %2) ks vs)))", "problem": 61, "user": "4f4fbed7e4b03ad3f0c10ce8"}, {"code": "(fn zm [xs ys]\n  (cond\n    (empty? xs) {}\n     (empty? ys) {}\n   \t:else (assoc (zm (rest xs) (rest ys)) (first xs) (first ys))))", "problem": 61, "user": "4fe2501ae4b0dd6cd5ce3644"}, {"code": "(fn [k v] (->> v (interleave k) (apply hash-map)))", "problem": 61, "user": "4ff6aea8e4b0678c553fc381"}, {"code": "(fn \n  [keys vals]\n    (loop [map {}\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map))\n)", "problem": 61, "user": "4fc7b079e4b0ee37620e1827"}, {"code": "(fn makem [ks vs]\n  (loop [m {}, keys ks, vals vs]\n\t\t(if (and keys vals)\n\t\t\t(recur (assoc m (first keys) (first vals))\n\t\t\t\t(next keys) (next vals))\n\t\tm)))", "problem": 61, "user": "4ff4c9dae4b0678c553fc360"}, {"code": "(fn [ks vs]\n  (->> (mapcat vector ks vs)\n       (apply hash-map)))", "problem": 61, "user": "4feff3b6e4b0678c553fc31e"}, {"code": "(fn zm [a b]\n  (apply hash-map (interleave a b)))", "problem": 61, "user": "4ff201d7e4b0678c553fc330"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4ff743fde4b0678c553fc38d"}, {"code": "(fn [keys vals] \n  (reduce (fn [result next] (merge result next)) {} (map hash-map keys vals)))", "problem": 61, "user": "4ff83003e4b0678c553fc396"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4ff9d4e5e4b0678c553fc3b0"}, {"code": "(fn [a b]\n  (let [c (min (count a) (count b))]\n       (loop [curr (- c 1)\n              my-map []]\n         (if (< curr 0)\n           (apply assoc {} my-map)\n           (recur (- curr 1)\n                  (conj (conj my-map (get a curr)) (get b curr)))))))", "problem": 61, "user": "4f0324d2535dcb61093f6a69"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4fefd624e4b0678c553fc31b"}, {"code": "#(reduce merge (map hash-map % %2))", "problem": 61, "user": "4fe21889e4b0dd6cd5ce3641"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4ec7c32c535d6d7199dd36e6"}, {"code": "#(into {} (map vec (partition 2 (interleave % %2))))", "problem": 61, "user": "4e9c3648535dbda64a6f6b7d"}, {"code": "#(into {} (map (fn [a b] {a b}) % %2))", "problem": 61, "user": "4e57d1e2535d8a8b8723a289"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "4fd11a93e4b04c3a95aa040a"}, {"code": "(fn my-zipmap [keys, values]\n  (loop [accum {}, keys keys, values values]\n\t\t(if (or (empty? keys) (empty? values))\n\t\t\taccum\n\t\t\t(recur\n\t\t\t\t(conj accum [(first keys) (first values)])\n\t\t\t\t(rest keys)\n\t\t\t\t(rest values)))))", "problem": 61, "user": "4fb57e06e4b081705acca2bf"}, {"code": "(fn[x y](into {} (#(map hash-map %1 %2) x y)))", "problem": 61, "user": "4fba77fae4b081705acca2df"}, {"code": "(fn  [a b]\n  (let [min (min (count  a) (count b))]\n    (loop [x (take min a)\n           y (take min b)\n           res {}]\n      (if (empty? x)\n         res\n        (recur (rest x) (rest y) (assoc res (first  x) (first  y))))     \n      )))", "problem": 61, "user": "4fea1f9ee4b0547ebccb248b"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4db2cd84535df7e46ed9b6c6"}, {"code": "(comp (partial into {}) (partial map vector))", "problem": 61, "user": "4fea2de5e4b0140c20fb9bfe"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4fdb02aae4b05e33b9224f56"}, {"code": "(fn map-construction\n  \t([v1 v2]\n\t\t\t(if (or (empty? v1) (empty? v2)) {}\n\t\t\t\t(assoc (map-construction (rest v1) (rest v2)) (first v1) (first v2)))))", "problem": 61, "user": "4e6a63fd535d8ccf87e9feda"}, {"code": "#(apply hash-map (interleave %1 %2 ))", "problem": 61, "user": "4fe8da4de4b0547ebccb2429"}, {"code": "(fn adder\n   ([a b] (adder a b {}))\n   ([a b c] (if (and (first a) (first b)) (adder (rest a) (rest b) (assoc-in c (vector (first a)) (first b))) c))\n   )", "problem": 61, "user": "4ff8aa3fe4b0678c553fc39e"}, {"code": "#(apply hash-map (interleave %1 %2))\n\n;(fn intomap [keys vals]\n;  (if (or (empty? keys) (empty? vals))\n;    {}\n;    (conj {(first keys) (first vals)}\n;        (intomap (rest keys) (rest vals)))))", "problem": 61, "user": "4fc50bcbe4b081705acca375"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4ff67852e4b0678c553fc37e"}, {"code": "(fn [k v]\n  (apply assoc {} (interleave k v)))", "problem": 61, "user": "4ec9549d535d6d7199dd36fe"}, {"code": "(fn [l r]\n  (loop [x l y r acc {}]\n    (if (or (empty? x) (empty? y))\n      acc\n      (recur (rest x) (rest y) (conj {(first x) (first y)} acc)))))", "problem": 61, "user": "4ffb38e8e4b0678c553fc3c6"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4fe8a3bde4b07c9f6fd12c61"}, {"code": "(fn [k v]\n  (into {} (map vector k v)))", "problem": 61, "user": "4ffa213ee4b0678c553fc3b7"}, {"code": "(fn associator [x y]\n  (letfn [(addKeyEntry [x1 y1 map]\n    (if (and (seq x1) (seq y1))\n      (do\n        (let [map (assoc map (first x1) (first y1))]\n          (addKeyEntry (rest x1) (rest y1) map)\n        )\n      )\n      map\n      ))]\n  (addKeyEntry x y {})))", "problem": 61, "user": "4ffb5d16e4b0678c553fc3d0"}, {"code": "(fn [lst1 lst2]                                                     \n            (let [ lst (map #(list % %2) lst1 lst2) ]                           \n                 (loop [ mp {} res lst ]                                        \n                    (if (empty? res) mp                                         \n                        (recur (into mp { (first (first res))                   \n                                          (second (first res)) })               \n                               (rest res))))))", "problem": 61, "user": "4eed6b32535d93acb0a668bc"}, {"code": "(fn [coll1 coll2]\n  (into {} (map (fn [x y] {x y}) coll1 coll2)))", "problem": 61, "user": "4ff9cfd6e4b0678c553fc3af"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4ffa8affe4b0678c553fc3bd"}, {"code": "(fn [a b] \n  (reduce (fn [x y] (merge x y))\n          {}\n          (map #(hash-map %1 %2) a b)))", "problem": 61, "user": "4ffe4d43e4b0678c553fc3f1"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "5003deb9e4b0678c553fc445"}, {"code": "#(apply hash-map (mapcat list % %2))", "problem": 61, "user": "50045388e4b0678c553fc44e"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "5002b6e5e4b0678c553fc42c"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4fe89db2e4b07c9f6fd12c59"}, {"code": "(fn zipmp\r\n  ([sk sv] (zipmp sk sv {}))\r\n  ([sk sv m]\r\n   (if (and sk sv)\r\n     (recur (next sk) (next sv) (assoc m (first sk) (first sv)))\r\n     m)))", "problem": 61, "user": "500159b3e4b0678c553fc419"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "5003ee7de4b0678c553fc446"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4ff76effe4b0678c553fc390"}, {"code": "(fn [a b] (into {} (vec (map vec (partition 2 (interleave a b))))))", "problem": 61, "user": "5003bb77e4b0678c553fc442"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4fbef9a6e4b081705acca316"}, {"code": "(fn [hash-keys hash-values]\n  (apply merge \n    (map #(hash-map %1 %2) hash-keys hash-values)))", "problem": 61, "user": "4f92884de4b0dcca54ed6caf"}, {"code": "(fn [l r] (reduce #(assoc %1 (first %2) (second %2)) {} (partition 2 (interleave  l r))))", "problem": 61, "user": "50057f23e4b0678c553fc466"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "500933a6e4b046cdb195e074"}, {"code": "(fn[vk vv] (into {} (map (fn[k v] [k v]) vk vv)))", "problem": 61, "user": "4ec64981535d6d7199dd36c7"}, {"code": "#(apply merge (map (partial assoc {}) % %2))", "problem": 61, "user": "4ee75ec2535d93acb0a66867"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "500d8c49e4b07ccb9a7ddb00"}, {"code": "(fn mapdef [x y]\n  (apply merge (map (fn [a b] {a b}) x y)))", "problem": 61, "user": "500cb910e4b05f7c30cfa698"}, {"code": "#(apply hash-map (mapcat vector %1 %2))", "problem": 61, "user": "4f3e5e87e4b0e243712b1f83"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4fe900a6e4b0547ebccb243a"}, {"code": "(fn build-map\n  ([ks vs] (build-map ks vs {}))\n  ([ks vs m]\n    (if (or (empty? ks) (empty? vs))\n      m\n      (build-map (rest ks) (rest vs) (conj m [(first ks) (first vs)]))\n    )\n  )\n)", "problem": 61, "user": "4fff00ede4b0678c553fc3fc"}, {"code": "#((fn [l1 l2 acc]\n     (if (or (empty? l1) (empty? l2))\n       acc\n       (recur (rest l1) (rest l2) (assoc acc (first l1) (first l2))))) %1 %2 (hash-map))", "problem": 61, "user": "4ff355a1e4b0678c553fc34d"}, {"code": "(fn z [a b] (if (or (empty? a)\n                                                  (empty? b))\n                                            {}\n                                            (merge-with clojure.set/union {(first a) (first b)} (z (rest a) (rest b)))\n                                            ))", "problem": 61, "user": "4fd8544be4b0dab7d829f390"}, {"code": "(fn[s1,s2](apply  hash-map ((fn[s1, s2] (interleave s1 s2))  s1 s2)))", "problem": 61, "user": "4ffd92e7e4b0678c553fc3e3"}, {"code": "(fn [coll1 coll2]\n  (into {} (map vector coll1 coll2)))", "problem": 61, "user": "500ff421e4b0ae202717946f"}, {"code": "#(apply hash-map (flatten (map list %1 %2)))", "problem": 61, "user": "500d1db4e4b05f7c30cfa69f"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "500aa15ee4b03d00572d2d76"}, {"code": "#(into {} (map (fn [a b] [a b]) %1 %2))", "problem": 61, "user": "500e91aae4b00fff93030f99"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "5014718fe4b094324338f8e3"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4fcc70b3e4b0ee37620e1862"}, {"code": "(fn [a b]\n  (apply conj\n    (map #(assoc {} %1 %2) a b)))", "problem": 61, "user": "5014754de4b094324338f8e5"}, {"code": "#(apply merge (map hash-map %1 %2))", "problem": 61, "user": "5009fd0ae4b03d00572d2d70"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "50166470e4b052339a490e76"}, {"code": "(fn [x y]\n  (apply hash-map (interleave x y)))", "problem": 61, "user": "5012aefce4b0c8732600222a"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "500900dee4b0144d4f561e42"}, {"code": "(fn [c1 c2]\n  (apply assoc {} (interleave c1 c2)))", "problem": 61, "user": "5007f751e4b0b17c647f522b"}, {"code": "#(apply assoc {} (mapcat list %1 %2))", "problem": 61, "user": "4fe4c09ee4b0e8f79898febb"}, {"code": "(fn [keys vals]\n(apply (partial assoc {}) (interleave keys vals)))", "problem": 61, "user": "501688f7e4b052339a490e7a"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "50142490e4b07d18bdaaf70a"}, {"code": "(fn [a b] (into {} (map vector a b )))", "problem": 61, "user": "5018ed15e4b011a2e0bf6412"}, {"code": "(fn [x y] (reduce #(assoc %1 (get %2 0) (get %2 1)) {} (for [i (range (min (count x) (count y))) :let [a (get x i), b (get y i)]] [a b])))", "problem": 61, "user": "5017f840e4b02f523d7cc5e8"}, {"code": "(fn [k v] (into {} (map #(vec [%1 %2]) k v)))", "problem": 61, "user": "500854c4e4b028e089d3518c"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "50182f53e4b02f523d7cc5ec"}, {"code": "(fn[a b] \n    (:r (reduce \n        (fn[x y] (let [r (x :r)\n                       o (x :2)\n                      ] \n                      {:r (if (nil? o) r (merge r {y (first o)}))\n                       :2 (next o)\n                      }\n        ))\n        {:r {}\n         :2 b }\n        a\n    ))\n)", "problem": 61, "user": "5017eface4b02f523d7cc5e7"}, {"code": "(fn [k v]\n  (loop [ke k va v result {}]\n    (if (or (empty? ke) (empty? va))\n        result\n        (recur (rest ke) (rest va) (conj result {(first ke) (first va)}))\n    )\n  )\n)", "problem": 61, "user": "4fcf5292e4b03432b189f40e"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "501d34f6e4b066e56b9d0b1e"}, {"code": "(fn l [n nn] (loop [m n mm nn i (min (count n) (count nn)) e {}] (if (< i 1) e (recur (next m) (next mm) (dec i) (into e (assoc {} (first m) (first mm)))))))", "problem": 61, "user": "4fe97adde4b0547ebccb245e"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "4fa719c0e4b081705acca1bf"}, {"code": "(fn my_zipmap [k v]\n  (if (or (empty? k) (empty? v))\n    {}\n    (conj \n      {(first k) (first v)} \n      (my_zipmap (rest k) (rest v)))))", "problem": 61, "user": "50013694e4b0678c553fc417"}, {"code": "#(into {} (map hash-map %1 %2))", "problem": 61, "user": "4ff4f5c4e4b0678c553fc362"}, {"code": "(fn [k v] \n  (let [hm (hash-map)] \n    (into {} (map #(assoc hm %1 %2) k v))))", "problem": 61, "user": "50052fd0e4b0678c553fc45d"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "500b61b1e4b03d00572d2d81"}, {"code": "(fn [k v]\n  (apply\n    hash-map\n    (interleave k v)))", "problem": 61, "user": "501284d9e4b030d97e4db710"}, {"code": "(fn zipp [x y]\n  (apply  assoc {} (interleave x y))\n)", "problem": 61, "user": "4fb7b80ae4b081705acca2d4"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "4ed8b598535d10e5ff6f52fc"}, {"code": "(fn [a b] (into {} (map (fn [x] (assoc {} (first x)(last x))) (partition-all 2 (interleave a b)))))", "problem": 61, "user": "4e61bb60535d8ccf87e9fe5c"}, {"code": "(fn [k v]\n  (loop [h {}\n         k (seq k)\n         v (seq v)]\n    (if (and k v)\n      (recur (assoc h (first k) (first v))\n             (next k)\n             (next v))\n      h)))", "problem": 61, "user": "4ff3e771e4b0678c553fc356"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4f82f9f7e4b033992c121c10"}, {"code": "(fn [ks vs]\n  (apply hash-map (interleave ks vs)))", "problem": 61, "user": "501c1492e4b086d93747d180"}, {"code": "(fn zipm [x y]\n  (into {} (map vector x y)))", "problem": 61, "user": "4fcf642ee4b03432b189f410"}, {"code": "(fn[& coll](into {} (apply map vector coll)))", "problem": 61, "user": "4ff2f0a9e4b0678c553fc341"}, {"code": "#(apply array-map (interleave % %2))", "problem": 61, "user": "50127fbfe4b030d97e4db70f"}, {"code": "(fn [xs ys]\n  (into {} (map vec (partition 2 (interleave xs ys)))))", "problem": 61, "user": "4f60ed88e4b0defedf855fb2"}, {"code": "(fn [fv sv]\n  (loop [f fv s sv el (sorted-map)]\n    (if (or (empty? f) (empty? s))\n      el\n      (recur (rest f) (rest s) (conj el [(first f) (first s)])))))", "problem": 61, "user": "501dfd54e4b051153f3b5b80"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "5028cd0fe4b01614d1633ffc"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4ff9f5c5e4b0678c553fc3b4"}, {"code": "#(loop [k %1\n        v %2\n        result {}]\n  (if (or (empty? k) (empty? v))\n      result\n      (recur (rest k) (rest v) (assoc result (first k) (first v)))))", "problem": 61, "user": "4e4ca885535dc968683fc4df"}, {"code": "(fn \r\n  [keys vals]\r\n    (loop [map {}\r\n           ks (seq keys)\r\n           vs (seq vals)]\r\n      (if (and ks vs)\r\n        (recur (assoc map (first ks) (first vs))\r\n               (next ks)\r\n               (next vs))\r\n        map)))", "problem": 61, "user": "5028bce0e4b01614d1633ffb"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "502a5fa4e4b09e8f859a9fbd"}, {"code": "(fn create-map [ks vls]\n  (apply hash-map (interleave ks vls)))", "problem": 61, "user": "4fae4c11e4b081705acca248"}, {"code": "(fn asdf[x y] (apply assoc {} (interleave x y)))", "problem": 61, "user": "5012036ce4b0a040369c12f4"}, {"code": "(fn [left right]\n  (reduce (fn [a [x,y]] (assoc a x y)) {}\n    (partition 2 (interleave left right))))", "problem": 61, "user": "5027fc0ce4b01614d1633ff2"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "50052d38e4b0678c553fc45c"}, {"code": "(fn [x y] \n  (apply hash-map (interleave x y)))", "problem": 61, "user": "4e47f4f3535dc968683fc4bb"}, {"code": "#(apply (partial assoc {} ) (interleave %1 %2))", "problem": 61, "user": "502d387fe4b0d96a44ab202f"}, {"code": "(fn [keys vals] \n  (into {} (map vector keys vals)))", "problem": 61, "user": "5025b93ce4b0c969f0b056df"}, {"code": "(fn [coll1 coll2] (apply hash-map (mapcat #(list %1 %2) coll1 coll2)))", "problem": 61, "user": "4fa09916e4b0dcca54ed6d4e"}, {"code": "#(reduce into {} (map (partial assoc {}) %1 %2))", "problem": 61, "user": "502952c9e4b0b33e9bf6fdf1"}, {"code": "(fn [k v] \n  (loop [remk k remv v m {}]\n    (if (not (or (empty? remk) (empty? remv)))\n      (recur (rest remk) (rest remv) \n        (assoc m (first remk) (first remv)) )\n      m )))", "problem": 61, "user": "4eaf08ce535d7eef3080732d"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "502873a8e4b01614d1633ff8"}, {"code": "#(loop [m {} xs % ys %2]\n  (if (or (empty? xs) (empty? ys))\n    m\n    (recur\n      (assoc m (first xs) (first ys))\n      (rest xs)\n      (rest ys))))", "problem": 61, "user": "4fb1325de4b081705acca276"}, {"code": "(fn [l1 l2] (into {} (map (fn [x1 x2] [x1 x2]) l1 l2)))", "problem": 61, "user": "4ee528fb535d1385b2869d87"}, {"code": "(fn [coll1 coll2]\n  (reduce #(conj %1 %2) {} \n    (map #(vector %1 %2) coll1 coll2)))", "problem": 61, "user": "5030f16fe4b05b7df5a0b84b"}, {"code": "#(into {} (map (fn [x y] [x y]) %1%2))", "problem": 61, "user": "502904e0e4b0feaf66e22fad"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "5032b066e4b00c0952a257ea"}, {"code": "(fn [l r] \n  (apply hash-map (mapcat #(list %1 %2) l r)))", "problem": 61, "user": "4fd9d162e4b05e33b9224f3c"}, {"code": "(fn [k v]\n      (loop [k k v v m {}]\n        (if (or (empty? k) (empty? v)) m\n         (recur (rest k) (rest v) (assoc m (first k) (first v)))))\n\n\n    )", "problem": 61, "user": "5029fccee4b023940c84aa47"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "503255d0e4b0e78df07b092b"}, {"code": "#(apply merge (map (fn [x y] (hash-map x y)) %1 %2))", "problem": 61, "user": "5032b398e4b00c0952a257eb"}, {"code": "(fn [a b]\n  (into {}  \n    (map vec (partition 2\n      (interleave a b)\n    ))\n  )\n)", "problem": 61, "user": "4fe610fde4b0e8f79898fece"}, {"code": "(fn h\n[x y]\n(loop [map {}\nks (seq x)\nvs (seq y)]\n(if (and ks vs)\n          (recur (assoc map (first ks) (first vs))\n\t               (next ks)\n\t               (next vs))\n\t        map)))", "problem": 61, "user": "502d39f8e4b0d96a44ab2032"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "50336c6be4b0c6c1199c710f"}, {"code": "(fn [k v] (apply merge (map #(assoc {} %1 %2) k v)))", "problem": 61, "user": "502a9fdee4b095a7adb898b4"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4ffe8193e4b0678c553fc3f4"}, {"code": "#(loop [in1 %1 in2 %2 out {}]\n  (if (or (empty? in1) (empty? in2))\n    out\n    (recur (rest in1) (rest in2) (assoc out (first in1) (first in2)))))", "problem": 61, "user": "5033a1fbe4b062bc5d7ae155"}, {"code": "#(loop [xs1 %1 xs2 %2 rmp {}] (if (or (empty? xs1) (empty? xs2)) rmp (recur (rest xs1) (rest xs2) (assoc rmp (first xs1) (first xs2)))))", "problem": 61, "user": "4f2942ace4b0d6649770a01e"}, {"code": "(fn [k v] (apply hash-map (mapcat list k v)))", "problem": 61, "user": "50361b6be4b0fbe0a74d26be"}, {"code": "(fn [ks vs]\n  (reduce (fn [m x]\n              (assoc m (first x) (second x)))\n          {}\n          (map vector ks vs)))", "problem": 61, "user": "4f2a35ace4b0d6649770a03a"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "502bb7c0e4b0194ad32ea1a3"}, {"code": "(fn [k v] (into {} (map vector k v)))", "problem": 61, "user": "503917a0e4b088a6a14ca763"}, {"code": "#(reduce (fn [m [k v]] (assoc m k v)) {} (map vector %1 %2))", "problem": 61, "user": "4ded27db535d08e6dec9fe0a"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "502940a9e4b061fd216be4b8"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "4f58d92fe4b0a7574ea71858"}, {"code": "(fn [k v] (apply merge (map (partial assoc {}) k v)))", "problem": 61, "user": "4e949d18535dbda64a6f6b15"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "503b6995e4b07a1917cc34dd"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "5034b0e1e4b062bc5d7ae167"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "502d4ea0e4b02fc10c6c6e46"}, {"code": "#(apply hash-map (mapcat list % %2))", "problem": 61, "user": "4e952463535dbda64a6f6b31"}, {"code": "(fn [k v]\n  (reduce merge {}\n    (map (fn [k v] {k v}) k v)))", "problem": 61, "user": "4f03818e535dcb61093f6b00"}, {"code": "(fn [a b] \n  (into {} \n    (for [i (range (min (count a) (count b)))] \n     [(nth  a i) (nth  b i)])))", "problem": 61, "user": "50335235e4b0c6c1199c710b"}, {"code": "(fn [k v]\n  (->> (interleave k v) (partition 2) (map vec) (into {})))", "problem": 61, "user": "5012ec0ae4b0c87326002230"}, {"code": "(fn [k v] (into {} (map #(hash-map %1 %2) k v)))", "problem": 61, "user": "4db21d14535d37964ddf999c"}, {"code": "#(apply merge (map hash-map %1 %2))", "problem": 61, "user": "4fb266a5e4b081705acca28c"}, {"code": "#(apply hash-map (apply interleave %&))", "problem": 61, "user": "4fd81472e4b0dab7d829f38e"}, {"code": "(fn [ks vs]\n  (loop [ks ks vs vs r {}]\n    (if (or (= ks ()) (= vs ()))\n      r\n      (recur (rest ks) (rest vs) (assoc r (first ks) (first vs))))))", "problem": 61, "user": "50435852e4b034ff00315d22"}, {"code": "#(into {} (apply map vector %&))", "problem": 61, "user": "501fa1aee4b0cb6ebc0a42eb"}, {"code": "(fn [ks vs]\n  (apply hash-map (interleave ks vs)))", "problem": 61, "user": "4fea34bde4b0140c20fb9c00"}, {"code": "(fn [ks vs]\n  (apply hash-map (mapcat vector ks vs)))", "problem": 61, "user": "503a234de4b088a6a14ca76d"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4f244f26e4b0d66497709fea"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "50479524e4b0371827a27bc4"}, {"code": "#(apply hash-map (mapcat vector %1 %2))", "problem": 61, "user": "5046b003e4b011c5dfee7727"}, {"code": "(fn f [a b]\n  (if (and (first a) (first b))\n    (merge {(first a), (first b)} (f (rest a) (rest b)))))", "problem": 61, "user": "503de5aae4b06c4e0e1fa259"}, {"code": "(fn [ks vs]\r\n  (loop [m {}\r\n   a ks\r\n\t b vs]\r\n    (let [k (first a)\r\n\t  v (first b)]\r\n      (if (or (nil? k) (nil? v))\r\n\tm\r\n\t(recur (assoc m k v)\r\n\t       (rest a)\r\n\t       (rest b))))))", "problem": 61, "user": "4fdc067fe4b05e33b9224f69"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4fb01e53e4b081705acca260"}, {"code": "(fn [k, v]\n   (reduce #(assoc %1 (%2 0) (%2 1)) {} (map vector k v))\n   )", "problem": 61, "user": "5048202fe4b0ec70b3ef8d9a"}, {"code": "(fn [c1 c2] (apply merge (map #(hash-map % %2) c1 c2)))", "problem": 61, "user": "503354c3e4b0c6c1199c710c"}, {"code": "(fn [kk vv]\n   (apply hash-map (mapcat vector kk vv)))", "problem": 61, "user": "4f616892e4b0defedf855fbf"}, {"code": "#(into {} (map hash-map %1 %2))", "problem": 61, "user": "50464831e4b011c5dfee771f"}, {"code": "(fn [ks vs] (into {} (map vector ks vs)))", "problem": 61, "user": "503d129fe4b06c4e0e1fa254"}, {"code": "(fn [a b] (apply hash-map (mapcat #(conj [%1] %2) a b)))", "problem": 61, "user": "503ca47fe4b06c4e0e1fa24f"}, {"code": "#(reduce conj {} (map (comp vec list) %1 %2))", "problem": 61, "user": "504e14c2e4b078edc5f593bf"}, {"code": "(fn [k v] (apply hash-map (interleave k v)))", "problem": 61, "user": "504d0116e4b022602c20b089"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "50481532e4b0ec70b3ef8d96"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "504e13fce4b078edc5f593bc"}, {"code": "(fn [col1 col2]\n  (into {} (map #(vec [%1 %2]) col1 col2)))", "problem": 61, "user": "4db2cc55535df7e46ed9b6c5"}, {"code": "(fn mkmap [k v]\n  (if\n    (or (empty? k) (empty? v)) {}\n    (conj {(first k) (first v)}\n      (mkmap (rest k) (rest v)))))", "problem": 61, "user": "504e48ace4b0f6ff3350c498"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "504e397ee4b0f6ff3350c485"}, {"code": "(fn [ks vs]\n  (apply hash-map\n    (mapcat\n      vector\n      ks vs)))", "problem": 61, "user": "50427899e4b0add3005c0fc2"}, {"code": "(fn [keys vals] (apply hash-map (interleave keys vals)))", "problem": 61, "user": "504ed350e4b069badc5a33d1"}, {"code": "(fn [keys vals] (apply hash-map \n  (interleave keys vals)))", "problem": 61, "user": "504e108ce4b078edc5f593b3"}, {"code": "(fn [keys values]\n    (loop [ks keys\n           vs values\n           m {}]\n      (if (or (empty? ks) (empty? vs))\n        m\n        (recur (rest ks)\n               (rest vs)\n               (assoc m (first ks) (first vs))))))", "problem": 61, "user": "4fcbc18ae4b0ee37620e185c"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "504f2071e4b0e7ad84dbc4be"}, {"code": "(fn consmap [keys vals] \n  (loop [map {} k (seq keys) v (seq vals)]\n    (if (and k v)\n      (recur (assoc map (first k) (first v)) (next k) (next v))\n      map)))", "problem": 61, "user": "504dff92e4b078edc5f5938a"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "50431cbce4b034ff00315d1c"}, {"code": "#(loop [ret {} k %1 v %2 ] (if (or (empty? k) (empty? v)) ret\r\n                              (recur  (assoc ret (first k) (first v))  (rest k) (rest v) )))", "problem": 61, "user": "50463347e4b011c5dfee771e"}, {"code": "(fn [ks vs]\n  (loop [k ks, v vs, mp {}]\n    (if (or (empty? k) (empty? v))\n      mp\n      (recur (rest k) (rest v) (assoc mp (first k) (first v))))))", "problem": 61, "user": "5050b107e4b063148f524126"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "5041b3c0e4b06d8231e4facf"}, {"code": "(fn [xs ys] (into {} (map #(vector %1 %2) xs ys)))", "problem": 61, "user": "4fc5a693e4b0ee37620e17fc"}, {"code": "(fn zipmap*\n  [keys vals]\n  (loop [acc {}\n         k keys\n         v vals]\n    (if (or (empty? k) (empty? v))\n      acc\n      (recur (assoc acc (first k) (first v)) (rest k) (rest v))\n      )))", "problem": 61, "user": "4edfb618535d10e5ff6f5343"}, {"code": "(fn [a b] (into {} (map #(hash-map % %2) a b)))", "problem": 61, "user": "4e8a880b535d65386fec210d"}, {"code": "(fn [ks vs] (loop [ks ks vs vs acc {}]\n  (if (not (or (empty? ks) (empty? vs)))\n    (recur (rest ks) (rest vs) (conj acc [(first ks) (first vs)]))\n    acc)))", "problem": 61, "user": "504f865ee4b0a02f9cffde90"}, {"code": "(fn [& a] (apply hash-map (interleave (first a ) (fnext a))))", "problem": 61, "user": "504e9f5ce4b069badc5a33bd"}, {"code": "(fn [col1 col2]\n  (let [z (interleave col1 col2)]\n     (apply hash-map z)))", "problem": 61, "user": "50435689e4b034ff00315d21"}, {"code": "(fn [a b] \r\n  (apply assoc {} \r\n    (flatten\r\n      (map vector a b))))", "problem": 61, "user": "5048f98ee4b06e644c63f1af"}, {"code": "(fn [a b] (reduce #(assoc %1 (first %2) (second %2)) {} (map vector a b)))", "problem": 61, "user": "4fa05b99e4b0dcca54ed6d47"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "50436470e4b034ff00315d23"}, {"code": "(fn [ks vs]\r\n  (into {} (map vector ks vs)))", "problem": 61, "user": "4fee04a0e4b0678c553fc308"}, {"code": "(fn [c1 c2]\n      (loop [r {} co1 c1 co2 c2]\n         (if (and (> (count co2) 0) (> (count co1) 0))\n              (recur (assoc r (first co1) (first co2)) (rest co1) (rest co2) )\n               r)))", "problem": 61, "user": "504457c0e4b01f6c9a8b2360"}, {"code": "(fn [l1 l2] (apply hash-map (interleave l1 l2)))", "problem": 61, "user": "4ff769bce4b0678c553fc38f"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4ebbc1f6535dfed6da9c6d72"}, {"code": "(fn [keys vals]\n  (apply assoc {} (interleave keys vals)))", "problem": 61, "user": "5055899de4b0ce54f56f03fd"}, {"code": "(fn [& args]\n    (reduce #(assoc %1 (first %2) (second %2))\n      {}\n      (apply map list args)))", "problem": 61, "user": "504f57c7e4b0a02f9cffde71"}, {"code": "(fn make-map [keys values]\r\n  (reduce #(assoc %1 (first %2) (second %2)) {}\r\n    (map #(list % %2) keys values)))", "problem": 61, "user": "504ec4d3e4b069badc5a33c9"}, {"code": "(fn zipm [keys vals]\n  (if (or (empty? keys) (empty? vals))\n    {}\n    (assoc (zipm (rest keys) (rest vals)) \n           (first keys) (first vals))))", "problem": 61, "user": "503e6047e4b06c4e0e1fa266"}, {"code": "#(apply assoc {} (reverse (interleave %2 %)))", "problem": 61, "user": "4f045946535dcb61093f6bba"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "5053de37e4b0b1b9d1860ea8"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "504e04a4e4b078edc5f59397"}, {"code": "(fn f [xs ys]\n  (if (and (next xs) (next ys))\n      (conj (f (next xs) (next ys)) [(first xs) (first ys)])\n      {(first xs) (first ys)}))", "problem": 61, "user": "50555c06e4b0ce54f56f03fa"}, {"code": "(fn [ks vs] (into {} (map (fn [k v] {k v}) ks vs)))", "problem": 61, "user": "4fca2a13e4b0ee37620e184d"}, {"code": "#(apply hash-map(interleave % %2))", "problem": 61, "user": "504f3fa3e4b0a02f9cffde62"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "50586354e4b06522596eba78"}, {"code": "(fn [k v]\r\n  (loop [k k\r\n         v v\r\n         z {}]\r\n    (if (or (empty? k) (empty? v))\r\n      z\r\n      (recur (rest k) (rest v) (conj z {(first k) (first v)})))))", "problem": 61, "user": "504e2333e4b0f6ff3350c46c"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "504e685fe4b0f6ff3350c4ae"}, {"code": "(fn [x y]\n  (into {} (map #(vector %1 %2) x y)))", "problem": 61, "user": "50517ebfe4b0a561d07d8f06"}, {"code": "(fn [A B]\n  (apply assoc {}\n    (interleave A B)))", "problem": 61, "user": "5054c853e4b0b1b9d1860eb3"}, {"code": "(fn [& colls]\n  (apply hash-map (apply interleave colls)))", "problem": 61, "user": "505bd09fe4b032b709c81373"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4fc6e1a8e4b0ee37620e181d"}, {"code": "(fn [c1 c2]\n    (apply array-map (interleave c1 c2)))", "problem": 61, "user": "504e1abee4b0f6ff3350c45d"}, {"code": "#(apply hash-map (mapcat list % %2))", "problem": 61, "user": "50563ae2e4b0ce54f56f0405"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4ed98b40535d10e5ff6f5307"}, {"code": "(fn [keys vals]\n  (letfn [(mc [k v m]\n            (cond\n             (or (empty? k)(empty? v)) m\n             :else (mc (rest k)(rest v)(assoc m (first k)(first v)))))]\n    (mc keys vals (hash-map))))", "problem": 61, "user": "4eb6f065535d7eef30807372"}, {"code": "(fn [a b] (apply hash-map (flatten (mapv #(vector %1 %2) a b))))", "problem": 61, "user": "5048bcf8e4b06e644c63f1ae"}, {"code": "#(apply array-map (interleave %1 %2))", "problem": 61, "user": "504e72cee4b0f6ff3350c4b4"}, {"code": "#(apply array-map (interleave %1 %2))", "problem": 61, "user": "50310b8be4b05b7df5a0b84d"}, {"code": "(fn [keys vals]                                                                                                                                                   \n    (loop [map {}                                                                                                                                               \n           ks (seq keys)                                                                                                                                        \n           vs (seq vals)]                                                                                                                                       \n      (if (and ks vs)                                                                                                                                           \n        (recur (assoc map (first ks) (first vs))                                                                                                                \n               (next ks)                                                                                                                                        \n               (next vs))                                                                                                                                       \n        map)))", "problem": 61, "user": "4fe9364be4b0547ebccb244e"}, {"code": "(fn m [x y]\n  (cond (or (empty? x) (empty? y)) '{}\n        :else\n        (assoc (m (rest x) (rest y)) (first x) (first y))))", "problem": 61, "user": "50588af1e4b06522596eba7d"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "5063b9a0e4b075d771da6f9d"}, {"code": "(fn zm [a b & m] (let [m (if (nil? m) {} (first m)) aa (first a) bb (first b)] (if (and aa bb) (zm (rest a) (rest b) (assoc m aa bb)) m)))", "problem": 61, "user": "50366589e4b0fbe0a74d26c3"}, {"code": "(fn [ks vs] (apply hash-map (interleave ks vs)))", "problem": 61, "user": "504c8165e4b09724c857af31"}, {"code": "#(into {} (map vec (partition 2 (apply interleave %&))))", "problem": 61, "user": "5063fe48e4b075d771da6f9e"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "505fc8e3e4b08f2a82ad10b6"}, {"code": "(fn [a b]\n  (loop [ax a\n         bx b\n         mp {}]\n    (if (or (empty? ax) (empty? bx))\n      mp\n      (recur (rest ax) (rest bx) (assoc mp (first ax) (first bx))))))", "problem": 61, "user": "5060d137e4b0dc10a69545a0"}, {"code": "(fn [x y] (reduce conj {} (map #(conj {} {% %2}) x y)))", "problem": 61, "user": "505e3b57e4b011187b721f39"}, {"code": "#(apply hash-map (apply interleave %&))", "problem": 61, "user": "504e3aaae4b0f6ff3350c487"}, {"code": "(fn [a b]\n    (apply assoc\n        (concat [{}] (vec (interleave a b)))\n    )\n)", "problem": 61, "user": "504f191ae4b0e7ad84dbc4ba"}, {"code": "(fn [ks vs]\n  (into {} (map hash-map ks vs)))", "problem": 61, "user": "50630247e4b05ac47bc68d6b"}, {"code": "(fn [ks vs] (apply hash-map (interleave ks vs)))", "problem": 61, "user": "4e4be570535dc968683fc4d8"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "50645e12e4b007509339a58a"}, {"code": "(fn [c1 c2] (apply merge (map #(assoc {} %1 %2) c1 c2)))", "problem": 61, "user": "4e260220535deb9a81d77ef0"}, {"code": "(fn [ks vs] (into {} (map vector ks vs)))", "problem": 61, "user": "50015be1e4b0678c553fc41a"}, {"code": "(fn [xs ys]\n  (apply hash-map (flatten\n    (map #(vector %1 %2) xs ys))))", "problem": 61, "user": "50611456e4b0dc10a69545a5"}, {"code": "(fn [x y] (apply assoc {} (interleave x y)))", "problem": 61, "user": "505c6432e4b032b709c81378"}, {"code": "( fn [x y] ( reduce conj {} (map #(assoc {} % %2) x y) ) )", "problem": 61, "user": "5061cc17e4b0a30dc9a35d34"}, {"code": "(fn [a b] (reduce conj {} (map #(assoc {} % %2) a b)))", "problem": 61, "user": "505d4b21e4b0e6aca564be07"}, {"code": "(fn constr [v1 v2]\n  ( let [a (empty? v1)\n         b (empty? v2)]\n  (if (= a true) {}\n    ( if (= b true) {}\n      ( merge { (first v1) (first v2)} (constr (rest v1) (rest v2)))))\n  )\n)", "problem": 61, "user": "5060c117e4b024449d699b5d"}, {"code": "(fn [ks vs] (into {} (map vector ks vs)))", "problem": 61, "user": "506717e2e4b03d366d7cb2ba"}, {"code": "(comp (partial into {}) (partial map hash-map))", "problem": 61, "user": "5040edf4e4b0ff5d2cc40db5"}, {"code": "#(reduce (fn [m n] (conj m n)) {} (map (fn [k v] {k v}) %1 %2))", "problem": 61, "user": "505dcfc8e4b0e6aca564be0d"}, {"code": "(fn constr [v1 v2]\n  (apply assoc{}\n  (interleave  v1 v2\n)))", "problem": 61, "user": "5065bd94e4b0148eb3925aed"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "506e0e5ae4b09350ab4199eb"}, {"code": "#(into {} (map (partial assoc {}) % %2))", "problem": 61, "user": "5054bc87e4b0b1b9d1860eb0"}, {"code": "#(->> (interleave % %2) (apply hash-map))", "problem": 61, "user": "50657775e4b0deb876850599"}, {"code": "#(apply merge (map hash-map %1 %2))", "problem": 61, "user": "50705072e4b07bd6ad9b9f27"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "506617c3e4b03d366d7cb2ab"}, {"code": "(fn f [k v]\n  (if (or (empty? k) (empty? v))\n      {}\n      (assoc (f (rest k) (rest v))\n             (first k) (first v))))", "problem": 61, "user": "5054c7e1e4b0b1b9d1860eb2"}, {"code": "; from ClojureDocs on interleave\n#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "506ab9bae4b05d3b7762c74c"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "506ef8c3e4b09350ab4199f4"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4e77c1db535d324fb2983d72"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "4eb404ba535d7eef3080735a"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4f614976e4b0defedf855fbb"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "507056b8e4b07bd6ad9b9f29"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "50548ce8e4b0b1b9d1860ead"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "505dd5c4e4b0e6aca564be0e"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "5065faf9e4b0313a384e5645"}, {"code": "(fn build [k v]\n  (if (and (seq k) (seq v))\n    (assoc (build (rest k) (rest v))\n           (first k)\n           (first v))))", "problem": 61, "user": "505f55d3e4b08f2a82ad10b0"}, {"code": "(fn [k v]\r\n  (reduce conj {} (map (fn [x y] [x y]) k v)))", "problem": 61, "user": "507437c2e4b054001656acd0"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "506a1985e4b01dc6af13f83e"}, {"code": "(fn f [x y] (into {} (into [] (map #(into [] (concat [] [%1 %2])) x y))))", "problem": 61, "user": "5062bc46e4b05ac47bc68d68"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4ee85476535d93acb0a6687c"}, {"code": "(fn my-zipmap [keys vals]\n  (loop [ks keys\n         vs vals\n         res {}]\n    (if (or (empty? ks) (empty? vs))\n      res\n      (recur (rest ks) (rest vs) (assoc res (first ks) (first vs))))))", "problem": 61, "user": "50763574e4b0a894bb95bf3d"}, {"code": "#(reduce merge (map hash-map %1 %2))", "problem": 61, "user": "50481b70e4b0ec70b3ef8d98"}, {"code": "(fn [c1 c2]\n  (reduce #(assoc % (first %2) (last %2))    {}  (map #( list %1 %2) c1 c2)))", "problem": 61, "user": "5007cdb9e4b0b17c647f5227"}, {"code": "#(into {} (mapcat hash-map %1 %2))", "problem": 61, "user": "504eff22e4b0e7ad84dbc4a9"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "507a9b29e4b08327cd804a6e"}, {"code": "(fn [k v]\n  (loop [map {}\n        ks (seq k)\n        vs (seq v)]\n    (if (and ks vs)\n      (recur (assoc map (first ks) (first vs))\n        (next ks)\n        (next vs))\n    map)))", "problem": 61, "user": "4f3242bae4b0d6649770a08f"}, {"code": "(fn [keys vals]\n  (apply hash-map (interleave keys vals)))", "problem": 61, "user": "4fceef7ae4b03432b189f40a"}, {"code": "(fn [coll1 coll2]\n  (loop [c1 coll1 c2 coll2 result []]\n    (if (or (empty? c1) (empty? c2))\n      (apply array-map result)\n      (recur (rest c1) (rest c2) (conj result (first c1) (first c2))))))", "problem": 61, "user": "5046f909e4b03b02161376b5"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "50783762e4b0fc74642bff67"}, {"code": "(fn f [a b]\n  (if-let [[k & ks] (seq a)]\n    (if-let [[v & vs] (seq b)]\n      (conj (f ks vs) [k v])\n      {})\n    {}))", "problem": 61, "user": "504ffb8fe4b0a02f9cffdeae"}, {"code": "#(apply array-map (interleave %1 %2))", "problem": 61, "user": "4e72dd5d535d5021c1a89667"}, {"code": "(fn\n  [keys vals]\n    (apply merge {}\n      (for [x (range (count keys)) :when (< x (count vals))] {(nth keys x) (nth vals x)})))", "problem": 61, "user": "507a08e4e4b08327cd804a67"}, {"code": "(fn [keys vals] (apply hash-map (interleave keys vals)))", "problem": 61, "user": "504db141e4b021508a333965"}, {"code": "(fn [c1 c2]\n  (into {} (map (fn [a b] [a b]) c1 c2)))", "problem": 61, "user": "506fd0afe4b07bd6ad9b9f23"}, {"code": "#(apply merge (map hash-map% %2))", "problem": 61, "user": "507c7c8be4b0b083f3ff82ef"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "507eddf4e4b06ce648bcdbfa"}, {"code": "#(apply hash-map (mapcat  list %1 %2))", "problem": 61, "user": "50807940e4b01a93d3f38e44"}, {"code": "(fn [a b] (apply assoc {} (interleave a b)))", "problem": 61, "user": "503f872ee4b00d1a725ff2ac"}, {"code": "(fn zipmap'\n    ([keys values] (zipmap' keys values {}))\n    ([keys values acc]\n     (if (or (empty? keys) (empty? values))\n       acc\n       (recur (rest keys) (rest values)\n              (conj acc [(first keys) (first values)])))))", "problem": 61, "user": "508157b2e4b0946d0443855c"}, {"code": "#(apply merge (apply map hash-map %&))", "problem": 61, "user": "4f9aa97ae4b0dcca54ed6d0e"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "507ef25ce4b0f753b6f9788e"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "506b437de4b0eda3100c0906"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "5088082ae4b0198722bd9854"}, {"code": "#(apply hash-map (mapcat list % %2))", "problem": 61, "user": "507a396be4b08327cd804a69"}, {"code": "(fn [keys values]\n  (apply assoc {} (interleave keys values)))", "problem": 61, "user": "4fc7ddffe4b0ee37620e182b"}, {"code": "(fn [k v] (apply assoc {} (interleave k v)))", "problem": 61, "user": "5084cb7de4b0fb8f40674bfb"}, {"code": "#(apply hash-map (mapcat list %1 %2))", "problem": 61, "user": "508b95a0e4b0be79e5b189c6"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "505f5e2fe4b08f2a82ad10b2"}, {"code": "(fn myf [x y] ( if (or (empty? x) (empty? y)) {}  (assoc (myf (rest x) (rest y)) (first x) (first y))  ) )", "problem": 61, "user": "50646c01e4b007509339a58b"}, {"code": "#(loop [map {} k %1 v %2]\n  (if (and k v)\n    (recur (assoc map (first k) (first v)) (next k) (next v)) map))", "problem": 61, "user": "4e7d2448535db169f9c796c8"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "507e68abe4b085af06e3afd2"}, {"code": "(fn [l1 l2]\r\n  (loop [_l1 l1\r\n         _l2 l2\r\n         res {}]\r\n\r\n    (if (or (empty? _l1) \r\n            (empty? _l2))\r\n      res\r\n      (recur (rest _l1) \r\n             (rest _l2)\r\n             (assoc res (first _l1) (first _l2))))))", "problem": 61, "user": "50576483e4b001218172198b"}, {"code": "(fn [k v]\n  (apply assoc nil (interleave k v)))", "problem": 61, "user": "50901b2ee4b0ea685a20f774"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "508bf05ae4b0f17d83ea26aa"}, {"code": "#(reduce conj (map (fn [a b] {a b}) %1 %2))", "problem": 61, "user": "4e5f034b535d8a8b8723a2d9"}, {"code": "(fn [a b] (apply hash-map (interleave a b)))", "problem": 61, "user": "50813b88e4b09292fd669443"}, {"code": "(fn [col1 col2] (into {} (map vector col1 col2)))", "problem": 61, "user": "506b8242e4b0eda3100c090a"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "509160dae4b0742c82730aef"}, {"code": "#(apply (partial conj {}) (map vector %1 %2))", "problem": 61, "user": "507fbd77e4b089ade05efbd3"}, {"code": "(fn [l1 l2]\n  (apply assoc {}\n    (interleave\n      l1 l2\n    )\n  )\n)", "problem": 61, "user": "4fc8f671e4b0ee37620e1840"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4f85a75ce4b033992c121c48"}, {"code": "(fn [a b] (into {} (map vector a b)))", "problem": 61, "user": "5097b556e4b00ad8bab4e970"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "5097a95fe4b00ad8bab4e96e"}, {"code": "#(apply hash-map\n  (mapcat vector % %2))", "problem": 61, "user": "5089ebfee4b03217b26a539f"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "5013193ae4b0f26a0e3320ab"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "508ee17ae4b0706b2ed3ef8d"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "4f49108ae4b0d56e7bb92be5"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "5098f5d6e4b0cae2931060a4"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4dbdc898535d020aff1edf4a"}, {"code": "(fn foo [x y]\n  (into {}\n    (for [i x j y :when (= (.indexOf x i) (.indexOf y j))]\n    [i j])))", "problem": 61, "user": "5078300de4b0fc74642bff66"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "509e8da7e4b08df8156e9e2f"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "5084c43be4b0fb8f40674bfa"}, {"code": "(fn   [keys vals]\r\n    (loop [map {}\r\n           ks (seq keys)\r\n           vs (seq vals)]\r\n      (if (and ks vs)\r\n        (recur (assoc map (first ks) (first vs))\r\n               (next ks)\r\n               (next vs))\r\n        map)))", "problem": 61, "user": "5052ab7ee4b0a561d07d8f20"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "50843a4ae4b0c98812d0788b"}, {"code": "#(apply (partial assoc {}) (interleave %1 %2))", "problem": 61, "user": "4f42ae16e4b0d7d3c9f3fd09"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "50996a38e4b0cae2931060b3"}, {"code": "#(apply hash-map (mapcat vector % %2))", "problem": 61, "user": "4e0febe6535d04ed9115e7be"}, {"code": "#(loop [m {} v [%1 %2] ] \n   (if (or (-> v first empty?) (-> v second empty?)) m\n      (recur (assoc m (-> v first first) (-> v second first)) (vector (-> v first rest) (-> v second rest) ))))", "problem": 61, "user": "4fff289ae4b0678c553fc3fd"}, {"code": "(fn [& xs]\n     (->> xs \n       (apply map vector)\n       (into {})))", "problem": 61, "user": "502ade49e4b0614b52996120"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4ec3650f535dcc7ae8597d56"}, {"code": "(fn [coll1 coll2]\n  (loop [c1 coll1, c2 coll2, acc {}]\n    (if (or (empty? c1) (empty? c2))\n      acc\n      (recur (rest c1) (rest c2) (assoc acc (first c1) (first c2))))))", "problem": 61, "user": "50a83794e4b054305ba5a831"}, {"code": "(fn [ks vs] (reduce conj (map #(hash-map %1 %2) ks vs)))", "problem": 61, "user": "50981062e4b04e098a4c7268"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "5027b41ee4b01614d1633fee"}, {"code": "(fn [as bs]\n   ((fn helper [accu xs ys]\n     (if (or (empty? xs) (empty? ys))\n       accu\n       (recur (assoc accu (first xs) (first ys)) \n                (rest xs) (rest ys))\n     )\n   ) (hash-map ) as bs)\n   )", "problem": 61, "user": "50217818e4b00bba4502f7a7"}, {"code": "(fn [col1 col2] (apply hash-map (mapcat #(vector  %1 %2) col1 col2 )))", "problem": 61, "user": "50a7b76de4b090657f4a5cdc"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "50a83315e4b054305ba5a830"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "5098bcfee4b0cae2931060a1"}, {"code": "(fn [a b] (apply merge (map hash-map a b)))", "problem": 61, "user": "4dd0e8f7535da60f04a96e57"}, {"code": "#(reduce merge (map hash-map % %2))", "problem": 61, "user": "509c03f3e4b085ae113522a8"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4ed152d5535d44c135fd68cc"}, {"code": "(fn [k v] (into {} (map vector k v)))", "problem": 61, "user": "50a4cbbee4b0344e360f3bc2"}, {"code": "#(loop [map {}\n           ks (seq %1)\n           vs (seq %2)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map))", "problem": 61, "user": "508c3d42e4b0f17d83ea26b2"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "50a4f36be4b0344e360f3bc9"}, {"code": "(fn\n  [keys vals]\n    (loop [map {}\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map)))", "problem": 61, "user": "50ab44b2e4b0f65d68208509"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4eb9c82d535dfed6da9c6d5c"}, {"code": "#(apply hash-map\n  (mapcat list % %2))", "problem": 61, "user": "4f956072e4b0dcca54ed6ccf"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "50ab8ae3e4b01d6eb43ce9a0"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "50ae22c3e4b0a40c9cfb08d0"}, {"code": "(fn [x y] (apply merge (map #(assoc {} % %2) x y)))", "problem": 61, "user": "50ad7888e4b0a40c9cfb08c7"}, {"code": "(comp (partial into {}) (partial map vector))", "problem": 61, "user": "5092fe10e4b097f48cc3857e"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "5078d366e4b08327cd804a5b"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "50a5f72fe4b0aa96157e2611"}, {"code": "(fn [as bs]\n  (loop [r {} a as b bs]\n    (println r a b)\n    (if (or (empty? a) (empty? b))\n      r\n      (recur (assoc r (first a) (first b)) (rest a) (rest b)))))", "problem": 61, "user": "4f1ae082535d64f603146470"}, {"code": "#(into {} (map hash-map %1 %2))", "problem": 61, "user": "50982769e4b04e098a4c726a"}, {"code": "(fn [x y] (loop [acc {} f1 x f2 y] \n  (if (or (empty? f1) (empty? f2)) \n    acc \n      (recur (assoc acc (first f1) (first f2)) \n                  (rest f1) (rest f2)))))", "problem": 61, "user": "50956c2be4b087f34d351ab2"}, {"code": "(fn [key-list value-list]\n  (reduce #(assoc %1 (first %2) (second %2))\n    {} \n    (map #(vector %1 %2) key-list value-list)))", "problem": 61, "user": "4ec12516535dfed6da9c6da7"}, {"code": "#(apply (partial assoc {}) (interleave %1 %2))", "problem": 61, "user": "500ec210e4b00fff93030f9d"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "508e13abe4b0f17d83ea26c7"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "50b67515e4b08fb537db98f3"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "50b65966e4b0a86f8358ca6c"}, {"code": "(comp #(reduce (fn ab [m [a b]] (assoc m a b)) {} %)  #(map vector % %2))", "problem": 61, "user": "4dad86e0c9a9d6ed0f99dc57"}, {"code": "(fn zipmap-61 [ks vs]\n  (loop [newmap {}\n         ks ks\n         vs vs]\n    (if (and ks vs)\n      (recur (assoc newmap (first ks) (first vs))\n             (next ks)\n             (next vs))\n      newmap)))", "problem": 61, "user": "501b1a8ee4b0b12d9c5f4d81"}, {"code": "(fn[x y] \n  (apply hash-map (interleave x y)))", "problem": 61, "user": "50b53b6ae4b0c464d223d1c4"}, {"code": "(fn [keys vals]\n  (apply assoc (conj (interleave keys vals) {})))", "problem": 61, "user": "50aab057e4b056ee0193586b"}, {"code": "#(reduce conj {} (map vector % %2))", "problem": 61, "user": "4f253a49e4b0d66497709ff3"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "50921f9ae4b09a7d0b586de1"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "506406c8e4b075d771da6f9f"}, {"code": "(fn [keys vals]\n  (apply hash-map (interleave keys vals)))", "problem": 61, "user": "4f03f3b7535dcb61093f6b85"}, {"code": "(fn [s1 s2]\n   (reduce\n    (fn [acc x]\n      (conj acc (hash-map (first x) (last x)))\n      )\n    {}\n    (partition 2 (interleave s1 s2)))\n   )", "problem": 61, "user": "50868795e4b004985b776e5e"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "50b0cffae4b009df37c708c5"}, {"code": "(fn [x y] (apply hash-map (interleave x y)))", "problem": 61, "user": "50b64b55e4b0a86f8358ca6b"}, {"code": "(fn [la lb]\n  (reduce conj (map hash-map la lb)))", "problem": 61, "user": "50b668dde4b08fb537db98f2"}, {"code": "(fn [& args] (apply hash-map (apply interleave args)))", "problem": 61, "user": "50acbd15e4b071b89ef26234"}, {"code": "(fn [a b] (reduce #(assoc %1 (first %2) (last %2)) {} (map list a b)))", "problem": 61, "user": "50112acee4b0d82cfac69f4c"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "50982cc7e4b04e098a4c726c"}, {"code": "(fn[s1, s2](into {} (map #(vector % %2) s1 s2)))", "problem": 61, "user": "4fdf566fe4b05e33b9224f99"}, {"code": "(fn my-zipmap [keys vals]\n  (reduce (fn [m [key val]]\n            (assoc m key val))\n    {}\n    (map list keys vals)))", "problem": 61, "user": "50812debe4b01a93d3f38e4c"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "50456747e4b01f6c9a8b236c"}, {"code": "#(into {} (map (fn[x y] {x y}) %1 %2))", "problem": 61, "user": "50b25f2ce4b03ea88043355f"}, {"code": "(fn [xs sx]\n  (loop [xs xs\n         sx sx\n         xx (hash-map)]\n    (if (some empty? [xs sx]) xx\n      (recur (rest xs) \n             (rest sx) \n             (into xx [[(first xs) (first sx)]])))))", "problem": 61, "user": "509eeb3be4b08df8156e9e37"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4f89d489e4b033992c121c7e"}, {"code": "(\n  fn sol [ coll1 coll2 ] (\n\t\tapply hash-map ( interleave coll1 coll2 ) \n\t)\n)", "problem": 61, "user": "50bf7b72e4b0ffd967a66cc1"}, {"code": "#(into {} (apply map \n  (fn [f s] \n    {f s})\n  %&))", "problem": 61, "user": "4f1e4ab5535d64f603146496"}, {"code": "(fn [ks vs]\n  (loop [ks ks\n         vs vs\n         kvs {}]\n    (if (or (= '() ks) (= '() vs))\n      kvs\n      (recur (rest ks)\n             (rest vs)\n             (assoc kvs (first ks) (first vs))))))", "problem": 61, "user": "50bd6033e4b0594b91591c66"}, {"code": "(fn foo [v1 v2]\n  (if (and (> (count v1) 0) (> (count v2) 0))\n      (assoc (foo (rest v1) (rest v2)) (first v1) (first v2))\n      {}\n    )\n  )", "problem": 61, "user": "50ae5659e4b0a40c9cfb08d2"}, {"code": "(fn [ks vs] \n  (reduce #(assoc %1 (first %2)(last %2)) {} (map list ks vs)))", "problem": 61, "user": "50b47c46e4b0c464d223d1b8"}, {"code": "#(apply hash-map (mapcat list % %2))", "problem": 61, "user": "4f327844e4b0d6649770a092"}, {"code": "#(apply array-map (interleave % %2))", "problem": 61, "user": "5093ca51e4b097f48cc38585"}, {"code": "(fn [keys values]\n  (loop [k keys v values answer (hash-map)]\n    (if (or (empty? k) (empty? v)) answer\n       (recur\n         (rest k)\n         (rest v)\n         (assoc answer (first k) (first v))\n       )\n    )\n  )\n)", "problem": 61, "user": "50bfbf25e4b05ae8c1cbbd9b"}, {"code": "(fn [ks vs]\r\n  (apply hash-map (mapcat #(identity [% %2]) ks vs)))", "problem": 61, "user": "50608ea0e4b07251188e4456"}, {"code": "(fn [& args] (apply hash-map (flatten (apply map list args))))", "problem": 61, "user": "50cb4cf6e4b0f78a8e1645b4"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "4eca7a87535d6d7199dd3705"}, {"code": "(fn [ks vs] (reduce #(assoc % (first %2) (second %2)) {} (partition 2 (interleave ks vs))))", "problem": 61, "user": "50c75d38e4b00bb60fe0c532"}, {"code": "(fn [key vals] (apply hash-map (interleave key vals)))", "problem": 61, "user": "50c6fad1e4b00bb60fe0c52d"}, {"code": "(fn  \n  [keys vals]\n    (loop [map {}\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map)))", "problem": 61, "user": "509b152be4b0412cdea6eb1e"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "50503117e4b0a02f9cffdeb5"}, {"code": "(comp (partial apply hash-map) interleave)", "problem": 61, "user": "50c9e5e3e4b0a409464667d7"}, {"code": "(fn foo [k v]\n  (if (or (empty? v) (empty? k)) nil\n    (conj {(first k) (first v)} (foo (rest k) (rest v)))\n    )\n  )", "problem": 61, "user": "4f8b27b3e4b02e764a0a5179"}, {"code": "(fn [keys vals]\n    (loop [map {}\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map)))", "problem": 61, "user": "50733b31e4b0e3170b5a869a"}, {"code": "(fn [k v]\n (apply hash-map (interleave k v)))", "problem": 61, "user": "4f072644535dcb61093f6c20"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "50ae0d24e4b0a40c9cfb08ce"}, {"code": "(fn [a b] (into {} (map vector a b)))", "problem": 61, "user": "4f173f8a535d64f603146453"}, {"code": "(fn [a b]\n           (loop [x a y b z {}]\n              (if (or (= x []) (= y []))\n                  z\n                  (recur (rest x) (rest y) (conj z {(first x) (first y)})))))", "problem": 61, "user": "4f03f197535dcb61093f6b84"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4e71a12c535d5021c1a8964f"}, {"code": "(fn [v1 v2] (reduce merge {} (map #(identity {%1 %2}) v1 v2)))", "problem": 61, "user": "50b24a2fe4b03ea88043355c"}, {"code": "#(into {}  (map vector % %2))", "problem": 61, "user": "50cae881e4b0f75dcc9a6e51"}, {"code": "(fn [ks vs]\n  (reduce \n   (fn [m [k v]] (assoc m k v))\n   {}\n   (map vector ks vs)))", "problem": 61, "user": "50d8f4b6e4b01f0871336e74"}, {"code": "(fn [x y]\n  (apply assoc {} (interleave x y))\n)", "problem": 61, "user": "4eeb8f68535d93acb0a668a9"}, {"code": "(fn create-map [x y] \n\t(apply hash-map (interleave x y))\n  )", "problem": 61, "user": "500a214de4b03d00572d2d74"}, {"code": "#(apply hash-map (interleave %1 %2 ))", "problem": 61, "user": "50cf2267e4b0e61f11ddcd8c"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "50ccf729e4b0f7a459302aac"}, {"code": "(fn my-zipmap [keys values]\n  (apply hash-map (interleave keys values)))", "problem": 61, "user": "4f91fd31e4b0dcca54ed6ca8"}, {"code": "(fn [ks vs] (apply hash-map (mapcat vector ks vs)))", "problem": 61, "user": "5095f761e4b0ba05ca7aebfd"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "507b7dbee4b09034bfeeb71e"}, {"code": "(fn this [kv vv]\n  (cond (or (= (count kv) 0)\n            (= (count vv) 0)) {}\n        :else (conj (this (rest kv) (rest vv))\n                    {(first kv) (first vv)})))", "problem": 61, "user": "5021f0b3e4b00bba4502f7ac"}, {"code": "(fn zm [keys vals]\n    (loop [map {}\n           ks (seq keys)\n           vs (seq vals)]\n      (println \"ks = \" ks \" vs = \" vs)\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map)))", "problem": 61, "user": "50da34e4e4b0f31830755b3c"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "50d179c7e4b05a71a896ef56"}, {"code": "(fn my-zipmap [keys vals]\n   (let [pairs (map (fn [key val] [key val]) keys vals)]\n     (reduce (fn [a pair] (assoc a (first pair) (second pair))) {} pairs)))", "problem": 61, "user": "50a7ef7fe4b090657f4a5ce0"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "50de11b2e4b061dbdced7217"}, {"code": "(fn mg\n  ([ks vs] (mg ks vs {}))\n  ([ks vs mp]\n  (if (or (empty? ks) (empty? vs))\n    mp\n    (mg (rest ks) (rest vs) (merge mp {(first ks) (first vs)})))))", "problem": 61, "user": "50970f51e4b00ad8bab4e950"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "50e3cf55e4b01912b3285c45"}, {"code": "(fn [c d]\n  (loop [ret {} c c d d]\n    (cond\n     (= '() c) ret\n     (= '() d) ret\n     :else \n     (recur (conj ret [(first c) (first d)]) \n            (rest c) (rest d)))))", "problem": 61, "user": "50bfe725e4b080409b860f26"}, {"code": "(fn [k v] (apply hash-map (interleave k v)))", "problem": 61, "user": "50e3ec87e4b0463d32072486"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "50e3ddd4e4b01912b3285c47"}, {"code": "(fn my-zipmap [ks vs]\n  (apply hash-map (interleave ks vs))\n)", "problem": 61, "user": "50e496e8e4b0cb9ec68fbca0"}, {"code": "#(loop [l1 %1 l2 %2 acc {}] (if (or (empty? l1) (empty? l2)) acc (recur (next l1) (next l2) (assoc acc (first l1) (first l2)))))", "problem": 61, "user": "503539dee4b0ed9c821488f6"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "50c8697ce4b00bb60fe0c53f"}, {"code": "#(apply conj {} (map vector %1 %2))", "problem": 61, "user": "4dda44f2535d02782fcbe9f1"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4db29f98535df7e46ed9b6c1"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "50b8914ce4b0cba0e598b64d"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "50e87427e4b0ebbe794eb7e8"}, {"code": "(comp (partial apply hash-map) interleave)", "problem": 61, "user": "50d0d4c8e4b00b15ecee976a"}, {"code": "#(apply hash-map (mapcat vector %1 %2))", "problem": 61, "user": "50e8ff6be4b0ebbe794eb7f3"}, {"code": "(fn [as bs]\n  (loop [a (first as)\n         as (rest as)\n         b (first bs)\n         bs (rest bs)\n         h {}]\n    (if (and a b)\n      (recur (first as) (rest as) (first bs) (rest bs) (assoc h a b))\n      h)))", "problem": 61, "user": "4ffc10aae4b0678c553fc3d6"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "50e8a340e4b0ebbe794eb7ed"}, {"code": "(fn [in-ks in-vs]\n  (loop [m {} ks in-ks vs in-vs]\n    (if (or (empty? ks) (empty? vs))\n      m\n      (recur (assoc m (first ks) (first vs)) (next ks) (next vs)))))", "problem": 61, "user": "4fedd993e4b0198f34b063bc"}, {"code": "(fn\n  [lk lv]\n    (loop [rs {}\n           ks lk\n           vs lv]\n      (if (or (empty? ks) (empty? vs))\n        rs\n        (recur (assoc rs (first ks) (first vs))\n               (next ks)\n               (next vs)))))", "problem": 61, "user": "50c9ece0e4b0a409464667d8"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "50e7dd5de4b077ad597af36b"}, {"code": "(fn [x y] (apply array-map (flatten (map (fn [a b] (list a b)) x y))  ))", "problem": 61, "user": "4e2164ff535d04ed9115e815"}, {"code": "(fn [ks vs] (reduce #(assoc % (first %2) (second %2)) {} (map #(list % %2) ks vs)))", "problem": 61, "user": "50dfb660e4b061dbdced7228"}, {"code": "(fn myzipmap [keys values]\n  (loop [ks keys\n         vs values\n         map {}]\n    (if (and (seq ks) (seq vs))\n      (recur (rest ks) (rest vs)\n             (assoc map (first ks) (first vs)))\n      map)))", "problem": 61, "user": "50c84ba2e4b00bb60fe0c53e"}, {"code": "(fn [coll-1 coll-2]\n  (apply hash-map (interleave coll-1 coll-2)))", "problem": 61, "user": "50493b52e4b06e84b772a23e"}, {"code": "#(into {} (map vec (partition 2 (interleave %1 %2))))", "problem": 61, "user": "50d8de3fe4b01f0871336e72"}, {"code": "(fn [xs ys]\n  (loop [xs1 (seq xs)\n         ys1 (seq ys)\n         res {}]\n    (if (and (seq? xs1) (seq? ys1))\n      (recur (next xs1) (next ys1) (assoc res (first xs1) (first ys1)))\n      res)))", "problem": 61, "user": "50bc23e4e4b0594b91591c3c"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "50d86fe2e4b01f0871336e67"}, {"code": "(partial (fn f [m s t] (if (or (empty? s) (empty? t)) m (assoc (f m (rest s) (rest t)) (first s) (first t)))) {})", "problem": 61, "user": "50ed4626e4b01236b1d4983c"}, {"code": "#(apply hash-map (mapcat vector % %2))", "problem": 61, "user": "50ef4e2be4b0a78662fa2653"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "50ef9a7ae4b0bdaecbb47d9e"}, {"code": "(fn [keys values]\n  (loop [[k & ks] keys\n         [v & vs] values\n         result {}]\n    (if (or (nil? k) (nil? v))\n      result\n      (recur ks vs (assoc result k v)))))", "problem": 61, "user": "50ed3c6be4b01236b1d4983b"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "4e6e3aac535d5021c1a89603"}, {"code": "(fn [klist vlist]\n  (loop [klist,klist vlist,vlist resmap,{}]\n    (if (or (empty? klist) (empty? vlist))\n      resmap\n      (recur (rest klist) (rest vlist) (conj resmap [(first klist) (first vlist)]))\n      )))", "problem": 61, "user": "50f0d000e4b0c5f4fa5ddb6f"}, {"code": "(fn [keys vals] (apply hash-map (interleave keys vals)))", "problem": 61, "user": "50ee145de4b06330c1f87c53"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4ec1b090535dfed6da9c6db5"}, {"code": "(fn [x y]\n  ((fn [a b rec]\n      (cond\n           (empty? a) rec\n           (empty? b) rec\n           :else (recur (rest a) (rest b) (conj rec {(first a) (first b)})))) x y {}))", "problem": 61, "user": "50ed5d1be4b06330c1f87c37"}, {"code": "(fn [& l] (apply hash-map  (apply mapcat list l)))", "problem": 61, "user": "50ef3e5de4b0a78662fa2652"}, {"code": "(fn [keys vals] (apply hash-map (interleave keys vals)))", "problem": 61, "user": "50ef56dfe4b0bdaecbb47d94"}, {"code": "(fn [keys vals]\n   (reduce\n     (fn [mp [k v]]\n       (assoc mp k v))\n     {}\n     (partition 2 (interleave keys vals))))", "problem": 61, "user": "50f1dedbe4b0897c4366dcd8"}, {"code": "(fn zmp [keys vals] (loop [map {} ks (seq keys) vs (seq vals)] (if (and ks vs) (recur (assoc map (first ks) (first vs)) (next ks) (next vs)) map)))", "problem": 61, "user": "50ed9e8de4b06330c1f87c44"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4ebaf790535dfed6da9c6d6e"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "50c4a354e4b0210b849018af"}, {"code": "#(into {} (map vector % %2))\n\n; #(apply hash-map (interleave %1 %2))\n; #(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "503f4759e4b00d1a725ff2a9"}, {"code": "(fn [keys vals]\n  (loop [map {}\n         ks (seq keys)\n         vs (seq vals)]\n    (if (and ks vs)\n      (recur (assoc map (first ks) (first vs))\n             (next ks)\n             (next vs))\n      map)))", "problem": 61, "user": "505aa653e4b021387fb89857"}, {"code": "(fn [ks vs]\n  (apply hash-map (interleave ks vs))\n)", "problem": 61, "user": "50f0ec9ce4b0d527ce5b30df"}, {"code": "(fn [a b] (apply hash-map (interleave a b)))", "problem": 61, "user": "50bfb5fbe4b05ae8c1cbbd9a"}, {"code": "(fn [x y]\n  (apply array-map (flatten (map vector x y)))\n  )", "problem": 61, "user": "4edf95a8535d10e5ff6f5342"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "50eddbc4e4b06330c1f87c4b"}, {"code": "(fn [a b]\n(apply hash-map (interleave a b))\n  )", "problem": 61, "user": "50f4894be4b004d364930528"}, {"code": "#(apply merge (map hash-map %1 %2))", "problem": 61, "user": "50e82c31e4b0ebbe794eb7da"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "50f17c0de4b06d9538fe2123"}, {"code": "#(apply (partial assoc {}) (interleave %1 %2))", "problem": 61, "user": "4f98b69ae4b0dcca54ed6cf4"}, {"code": "(fn [ks vs] (apply hash-map (interleave ks vs)))", "problem": 61, "user": "50fbf811e4b0d10d794c19f1"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "50e47fa5e4b0cb9ec68fbc9c"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "50d8739ae4b01f0871336e68"}, {"code": "(fn [sq1 sq2] (reduce #(assoc %1 (first %2) (second %2)) {} (map vector sq1 sq2)))", "problem": 61, "user": "50fbdacfe4b0d10d794c19f0"}, {"code": "(comp (partial apply hash-map) interleave)", "problem": 61, "user": "50ec4ed7e4b04edc33777046"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "50d46d53e4b09cc622d65a69"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "5006b7d2e4b0678c553fc48c"}, {"code": "(fn consMap [keys vals] (if (or (empty? keys) (empty? vals)) {} (conj {(first keys) (first vals)} (consMap (rest keys) (rest vals)))))", "problem": 61, "user": "50ef311fe4b0a78662fa2651"}, {"code": "(fn [ks vs]\n  (into {} (map vector ks vs)))", "problem": 61, "user": "50e4b066e4b0cb9ec68fbca6"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "5097cfcbe4b00ad8bab4e977"}, {"code": "(fn\n  [k v]\n  (apply assoc {} (interleave k v)))", "problem": 61, "user": "51008b6fe4b0700a7a02d6e4"}, {"code": "(fn [ks vs]\n  (apply hash-map\n         (mapcat vector ks vs)))", "problem": 61, "user": "50d93c53e4b0fd36a4b89223"}, {"code": "(comp (partial into {}) (partial map vector))", "problem": 61, "user": "4eae5fe4535d7eef30807325"}, {"code": "#(apply merge (map hash-map %1 %2))", "problem": 61, "user": "5103807fe4b00c483ae17703"}, {"code": "#(loop [k %1\n        v %2\n        m {}]\n    (if (or (empty? k) (empty? v))\n      m\n      (recur (rest k) (rest v) (assoc m (first k) (first v)))))", "problem": 61, "user": "504e9011e4b069badc5a33b7"}, {"code": "(fn mzip [a b]\n  (loop [x a y b o {}]\n    (if (or (empty? x) (empty? y))\n      o\n      (recur (rest x) (rest y) (assoc o (first x) (first y))))))", "problem": 61, "user": "5101192ae4b0bef64c30e266"}, {"code": "(fn [keyvec valvec] (apply array-map (interleave keyvec valvec)))", "problem": 61, "user": "50f2e5cee4b0ec8ee6fa8643"}, {"code": "(fn [keys vals] (apply array-map (interleave keys vals)))", "problem": 61, "user": "51059d33e4b0380e797c7d5c"}, {"code": "(fn [keys vals]\n  (loop [m {}\n         ks (seq keys)\n         vs (seq vals)]\n    (if (and ks vs)\n      (recur (assoc m (first ks) (first vs)) (next ks) (next vs))\n      m)))", "problem": 61, "user": "5106bc8ae4b01150e115ebec"}, {"code": "#(apply array-map (mapcat list % %2))", "problem": 61, "user": "5102489de4b00c483ae176f6"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "510cda21e4b078ea71921126"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "5008d149e4b0144d4f561e41"}, {"code": "#(apply hash-map (interleave  %1 %2))", "problem": 61, "user": "4fdf5403e4b05e33b9224f98"}, {"code": "(fn [k v] (loop [final {}\n                 rk k\n                 rv v]\n            (if (or (empty? rk) (empty? rv))\n              final\n              (recur (assoc final (first rk) (first rv)) (next rk) (next rv)))))", "problem": 61, "user": "507a33dee4b08327cd804a68"}, {"code": "(fn [l1 l2] (loop [a l1 b l2 result '{}] (if (or (empty? a) (empty? b)) result (recur (rest a) (rest b) (assoc result (first a) (first b)) ))))", "problem": 61, "user": "510931ede4b0c71f76895663"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "510d9d61e4b078ea71921141"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "510db6cde4b078ea71921145"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "5107b86de4b05b2b4eee7495"}, {"code": "#(loop [k %1 v %2 r {}]\n   (if (or (empty? k) (empty? v)) r\n     (recur (rest k) (rest v) (assoc r (first k) (first v))))\n   )", "problem": 61, "user": "510d3dc6e4b078ea71921132"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "5102ac9de4b00c483ae176fa"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "511026b1e4b04c71fce993ec"}, {"code": "#(into {} (apply map vector %&))", "problem": 61, "user": "51105c7fe4b04c71fce993ef"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "4ff3df0fe4b0678c553fc355"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "50bce014e4b0594b91591c63"}, {"code": "(fn [a b] (apply hash-map (interleave a b)))", "problem": 61, "user": "510b704ee4b078ea71921100"}, {"code": "(fn zpmp [kys vls]\n  (apply hash-map (interleave kys vls)))", "problem": 61, "user": "510cd1dde4b078ea71921124"}, {"code": "(fn [coll1 coll2] \n  (reduce #(assoc %1 (first %2) (second %2)) ; add pairs to the resulting hash map\n          {} \n          (map #(cons %1 [%2]) coll1 coll2))) ; create a map of pairs", "problem": 61, "user": "50fac9e3e4b07934dda8b0d1"}, {"code": "(fn [ks vs]\n  (apply hash-map (interleave ks vs)))", "problem": 61, "user": "511442d0e4b0e9c109bb74d5"}, {"code": "(fn [keys values]\n  (apply array-map (interleave keys values)))", "problem": 61, "user": "50e4f4e9e4b049a987753896"}, {"code": "(fn [seq1 seq2] \n   (loop [result {} elementsKeys seq1 elementsValues seq2] \n     (if (or (empty? elementsKeys) (empty? elementsValues))\n       result\n       (recur (into result {(first elementsKeys) (first elementsValues)}) (rest elementsKeys) (rest elementsValues))\n       )\n     )   \n   )", "problem": 61, "user": "5106dc1be4b01150e115ebf0"}, {"code": "#(into {} (map vec (partition 2 (interleave %1 %2))))", "problem": 61, "user": "5114ab7be4b0ce5098ee73b5"}, {"code": "(fn [s1 s2]\n\t(loop [s1 s1\n           s2 s2\n           v {}]\n      (if (or (empty? s1) (empty? s2)) v\n      \t(recur (rest s1) (rest s2) (assoc v (first s1) (first s2))))\n      )\n)", "problem": 61, "user": "5081566ce4b0946d0443855b"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4fe8fda4e4b0547ebccb2438"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "50742549e4b054001656accf"}, {"code": "(fn [ks vs]\n  (loop [m {}, ks ks, vs vs]\n    (if (and (seq ks) (seq vs))\n      (recur (assoc m (first ks) (first vs)) (rest ks) (rest vs))\n      m)))", "problem": 61, "user": "50f745f6e4b0035e89151849"}, {"code": "(fn [ks vs] (into {} (map #(vector %1 %2) ks vs)))", "problem": 61, "user": "51195e77e4b055cfb310d499"}, {"code": "(fn [keys vals]\n    (loop [map {} ks (seq keys) vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map)))", "problem": 61, "user": "51181009e4b0e0897831a60f"}, {"code": "(fn [ks vs] (apply assoc {} (interleave ks vs)))", "problem": 61, "user": "50b29029e4b03ea880433563"}, {"code": "(fn [keys values]\n    (loop [m {}\n           k (seq keys)\n           v (seq values)]\n      (if (and k v)\n        (recur (assoc m (first k) (first v))\n               (next k)\n               (next v))\n        m)))", "problem": 61, "user": "4e5be681535d8a8b8723a2bc"}, {"code": "(comp #(apply merge %) (partial map #(assoc nil %1 %2)))", "problem": 61, "user": "50e3e108e4b01912b3285c48"}, {"code": "(fn [a b]\n  (into {} (map #(vec %) (partition 2 (interleave a b)))))", "problem": 61, "user": "4e964f4a535dbda64a6f6b42"}, {"code": "#(into {} (apply map hash-map [% %2]))", "problem": 61, "user": "50eebf46e4b06330c1f87c61"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "4ecc1d85535d23f0362276f8"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4e50ad74535dc968683fc4ec"}, {"code": "(fn my-zipmap [ks vs]\n  (apply assoc {} (interleave ks vs)))", "problem": 61, "user": "5119f3d5e4b06c8af0111818"}, {"code": "#(reduce conj (map hash-map %1 %2))", "problem": 61, "user": "4f702dcae4b07046d9f4eff4"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4fca4c37e4b0ee37620e184f"}, {"code": "(fn this [keys vals]\n  (if (or (empty? keys) (empty? vals))\n    {}\n    (assoc (this (rest keys) (rest vals)) (first keys) (first vals))))", "problem": 61, "user": "4ec12577535dfed6da9c6da8"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "5100d7dbe4b04f1d96d946df"}, {"code": "(fn [k v]\n  (apply hash-map\n         (interleave k v)))", "problem": 61, "user": "511f88eee4b085952a83535f"}, {"code": "#(apply hash-map (mapcat list %1 %2))", "problem": 61, "user": "50f9739ce4b0e7c80cb15a4d"}, {"code": "(fn [l1 l2] (apply array-map (interleave l1 l2)))", "problem": 61, "user": "511b810ce4b07ab9ec456182"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "511c44fde4b00c2a1fa7ff77"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "5036eba7e4b0af0658af77a5"}, {"code": "#(into {} (apply map vector %&))", "problem": 61, "user": "50b35486e4b03ea88043356a"}, {"code": "(fn [coll1 coll2]\n  (loop [map {}\n         ks (seq coll1)\n         vs (seq coll2)]\n    (if (and ks vs)\n      (recur (assoc map (first ks) (first vs))\n             (next ks)\n             (next vs))\n      map)))", "problem": 61, "user": "4fc8769be4b0ee37620e1833"}, {"code": "#(into {} (map (fn [a b] [a b]) %1 %2))", "problem": 61, "user": "50589113e4b06522596eba7f"}, {"code": "#(reduce (fn [r i] (assoc r (% i) (%2 i)))\n          {}\n          (for [i (range (min (count %) (count %2)))] i))", "problem": 61, "user": "50b45ee1e4b08fc3808f30ca"}, {"code": "(fn [k v]\r\n   (let [s (min (.size k) (.size v))]\r\n     (reduce merge (for [i (range 0 s)]\r\n     {(get k i) (get v i)})))\r\n)", "problem": 61, "user": "510a6bece4b06956752d35af"}, {"code": "(fn [k v] (into {} (map #(vector % %2) k v)))", "problem": 61, "user": "50ebd63ce4b04edc3377703c"}, {"code": "(fn _zipmap [k v] (reduce (fn [acc [k v]](assoc acc k v)) {} (map vector k v)))", "problem": 61, "user": "511ac026e4b0c87c59c9670e"}, {"code": "(fn [ks vs] (apply hash-map (interleave ks vs)))", "problem": 61, "user": "510acd6ee4b078ea719210f4"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "512474ede4b02c3f2a072cce"}, {"code": "(fn [v1 v2]\n  (loop [v1 v1\n         v2 v2\n         r {}]\n    (if (or (nil? (first v1))\n            (nil? (first v2)))\n      r\n      (recur (rest v1) (rest v2) (assoc r (first v1) (first v2))))))", "problem": 61, "user": "5123ac8ee4b061b4c6f0e0b1"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "51256b40e4b05d10e3e395f8"}, {"code": "(fn [vallist maplist]\n (apply merge (map #(hash-map %1 %2)vallist maplist)))", "problem": 61, "user": "50621cbde4b0341461c88951"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "51284226e4b03a34742b4308"}, {"code": "#(into {} (apply map vector %&))", "problem": 61, "user": "51281b25e4b03a34742b4304"}, {"code": "#(reduce conj (map (fn [a b] {a b}) %1 %2))", "problem": 61, "user": "4e9a1512535dbda64a6f6b6e"}, {"code": "#(apply hash-map (interleave %1 %2) )", "problem": 61, "user": "50d3b03fe4b030b634c368b9"}, {"code": "#(apply hash-map (mapcat list % %2))", "problem": 61, "user": "5125834ae4b05d10e3e395fa"}, {"code": "(fn [keys vals]\n    (loop [map {}\n           ks keys\n           vs vals]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map)))", "problem": 61, "user": "5126dbabe4b083bb8f88cf0e"}, {"code": "(fn my-zipmap\n  [keys values]\n  (into\n   {}\n   (map (fn [a b] {a b}) keys values)))", "problem": 61, "user": "511720eae4b0063b4e3e16da"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "511618b1e4b0d4f670fd2fdf"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "5127e504e4b03a34742b4302"}, {"code": "(fn [x y]\n  (loop [x x y y z {}]\n    (if (or (empty? x) (empty? y))\n      z\n      (recur (rest x)\n             (rest y)\n             (assoc z (first x) (first y))))))", "problem": 61, "user": "4fed24a5e4b0681fd128dcaf"}, {"code": "(fn zm [k v]\n\t(apply hash-map (interleave k v))\n)", "problem": 61, "user": "511cca27e4b00c2a1fa7ff7d"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4fbbcf0ce4b081705acca2ee"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "5105ed16e4b01150e115ebe2"}, {"code": "(fn [keys vals]\n    (loop [map {}\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map)))", "problem": 61, "user": "512eb723e4b0b740abc5982b"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "511623cbe4b0d4f670fd2fe1"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "51307b84e4b08c712d3fae39"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4f525fdce4b03ad3f0c10d37"}, {"code": "#(apply conj (map hash-map %1 %2))", "problem": 61, "user": "4ff2ff7ce4b0678c553fc342"}, {"code": "#(reduce (fn [acc i] (assoc acc (first i) (last i))) {} (map list % %2))", "problem": 61, "user": "511d11d7e4b022853b0e079f"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "5125d963e4b05d10e3e395fe"}, {"code": "#(apply hash-map (apply interleave %&))", "problem": 61, "user": "511b9017e4b00c2a1fa7ff6b"}, {"code": "(fn [c1 c2] \n  (reduce #(assoc %1 (first %2) (second %2)) \n          {} \n          (map vector c1 c2)))", "problem": 61, "user": "4dada426c9a9d6ed2a99dc57"}, {"code": "#(apply hash-map (mapcat list % %2))", "problem": 61, "user": "51057b2be4b06d28cacc92e8"}, {"code": "(fn cp\n  [l1 l2]\n  (loop [hej {}\n         l1 l1\n         l2 l2]\n    (if (or (empty? l1) (empty? l2))\n      hej\n      (recur\n        (assoc hej (first l1) (first l2))\n        (rest l1) (rest l2)))))", "problem": 61, "user": "504e12ade4b078edc5f593b7"}, {"code": "(fn zm [k v] (loop [acu {} ak k av v] (if (and (seq ak) (seq av)) (recur (assoc acu (first ak) (first av)) (rest ak) (rest av)) acu)))", "problem": 61, "user": "511a0374e4b06c8af011181a"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "512eb1e7e4b0b740abc5982a"}, {"code": "(fn [k v]\n  (into {} (map vector k v)))", "problem": 61, "user": "5132c6f0e4b021281ec7b6d3"}, {"code": "#(apply assoc {} (mapcat list %1 %2))", "problem": 61, "user": "50d3ec8be4b030b634c368bb"}, {"code": "#(loop [s (interleave %1 %2) ret {}]\n   (if (empty? s)\n     ret\n     (recur (drop 2 s) (assoc ret (first s) (second s)))))", "problem": 61, "user": "51000111e4b00d7ad4cab15e"}, {"code": "(fn [a, b] (reduce into (map (fn [x, y] {x y}) a b)))", "problem": 61, "user": "51365524e4b04ac1f358dd52"}, {"code": "(comp #(apply hash-map %) interleave)", "problem": 61, "user": "50e0d5a3e4b061dbdced723d"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "510dc185e4b078ea71921146"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4de52c87535d08e6dec9fdf0"}, {"code": "#(apply (partial assoc {}) (interleave %1 %2))", "problem": 61, "user": "5117c31ee4b0e0897831a60c"}, {"code": "(fn [c1 c2] (apply merge (map #(hash-map %1 %2) c1 c2)))", "problem": 61, "user": "5125745ae4b05d10e3e395f9"}, {"code": "#(apply array-map (interleave % %2))", "problem": 61, "user": "51352899e4b082aeb3a3f03b"}, {"code": "(fn [ks vs] (reduce (fn [m [k,v]] (assoc m k v)) {} (map list ks vs) ))", "problem": 61, "user": "50fa01bce4b07934dda8b0ba"}, {"code": "#(apply hash-map (mapcat list %1 %2))", "problem": 61, "user": "513a4babe4b067e25a345eca"}, {"code": "#(into {} (for[i (range 0 (min (count %) (count %2)))](hash-map (nth % i) (nth %2 i))))", "problem": 61, "user": "5138d08be4b0a5db03d727db"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "5137c3b0e4b0509a8b470482"}, {"code": "#(apply assoc (cons {} (interleave % %2)))", "problem": 61, "user": "4e55b3dc535d8a8b8723a27f"}, {"code": "#(let [n (min (count %1) (count %2))]\n  (apply merge (map (partial assoc {}) (take n %1) (take n %2))))", "problem": 61, "user": "4f8ab084e4b02e764a0a5171"}, {"code": "(fn [k v] (reduce #(apply assoc %1 %2) {} (map vector k v)))", "problem": 61, "user": "513d121fe4b0e544971636a2"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "513ca934e4b0b86ece9f3228"}, {"code": "(fn [keys values]\n\t\t(reduce (fn [result input]\n\t\t\t(assoc result (key (first input)) (val (first input)))) {} (map hash-map keys values)))", "problem": 61, "user": "51205867e4b0e88f5a20c40f"}, {"code": "(fn [k v]\n  (apply hash-map (interleave k v)))", "problem": 61, "user": "5124619ae4b02c3f2a072ccd"}, {"code": "(comp (partial apply hash-map) (partial mapcat vector))", "problem": 61, "user": "513edd13e4b051389b345b39"}, {"code": "(fn [x y] \n  (reduce conj (map #(assoc {} %1 %2 ) x y)))", "problem": 61, "user": "513b77f3e4b00f740c76c403"}, {"code": "(fn create-map \n\t([xs ys] (create-map xs ys {}))\n\t([[x & xs] [y & ys] map]\n\t\t(if (or (nil? x) (nil? y))\n\t\t\tmap\n\t\t\t(create-map xs ys (assoc map x y)))))", "problem": 61, "user": "50ed8a5fe4b06330c1f87c3d"}, {"code": "(fn [k v] (apply hash-map (interleave k v)))", "problem": 61, "user": "513bb7a6e4b04402f587b77d"}, {"code": "#(apply hash-map (flatten (map (fn [k v] [k v]) % %2)))", "problem": 61, "user": "51424cc8e4b0b50abeb46b34"}, {"code": "(fn a[k v]\n  (if (or (empty? v) (empty? k))\n    {}\n    (assoc (a (rest k) (rest v)) (first k) (first v))\n  ))", "problem": 61, "user": "513f53c6e4b051389b345b40"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4ff01fa9e4b0678c553fc321"}, {"code": "(fn [c1 c2] (apply conj {} (map (partial assoc {}) c1 c2)))", "problem": 61, "user": "5145832be4b0e8879607340a"}, {"code": "(fn [l m]\n  ((fn a [l m cum]\n     (if-not (and (seq l) (seq m))\n       cum\n       (a (rest l) \n          (rest m) \n          (assoc cum \n            (first l) \n            (first m)))))\n   l m {}))", "problem": 61, "user": "50e135f4e4b084616e11c667"}, {"code": "(fn [ks vs]\n  (loop [[kh & kb] ks [vh & vb] vs ret {}]\n    (if-not (or (nil? kh) (nil? vh))\n      (recur kb vb (assoc ret kh vh))\n      ret)))", "problem": 61, "user": "513cb853e4b0b86ece9f322b"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "51430fb2e4b0c172af7558ce"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "513f0565e4b051389b345b3b"}, {"code": "#(apply (partial assoc {}) (mapcat list %1 %2))", "problem": 61, "user": "5142ea50e4b0c172af7558ca"}, {"code": "(fn [a b] (reduce #(conj %1 {(first %2) (second %2)}) {} (partition 2 (interleave a b))))", "problem": 61, "user": "5142e808e4b0c172af7558c9"}, {"code": "(fn f [k,v] (into {} (map vector k v)))", "problem": 61, "user": "514b66f4e4b0bd81940b86cb"}, {"code": "(fn [c1 c2] (reduce merge (map (fn [k v] {k v}) c1 c2)))", "problem": 61, "user": "514721c6e4b0d520409ed392"}, {"code": "#(apply assoc {} (interleave \n     % %2))", "problem": 61, "user": "512a8ef7e4b0ff5c4bc1f99e"}, {"code": "(fn [x,y] (into {}  (map #(conj {} {%1 %2}) x y)))", "problem": 61, "user": "514cfa27e4b019235f6c057d"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "51502056e4b098b221effc25"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "514d398ee4b019235f6c0583"}, {"code": "#(apply merge (map hash-map % %2))", "problem": 61, "user": "513dcc1ce4b0825f97f7f964"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "4f5d0f25e4b0030a34fb2b33"}, {"code": "(fn\n  [keys vals]\n    (loop [map {}\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map)))", "problem": 61, "user": "5151aa14e4b03e678e393ad4"}, {"code": "#(loop [map {}\n           ks (seq %)\n           vs (seq %2)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map))", "problem": 61, "user": "5047782ce4b0371827a27bc2"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "512f06c5e4b0762be4c7aad7"}, {"code": "#(reduce conj(map (fn[a b]{a b})%1%2))", "problem": 61, "user": "4f296a80e4b0d6649770a02a"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "5016ac54e4b052339a490e7b"}, {"code": "(comp (partial apply hash-map) interleave)", "problem": 61, "user": "4f50d933e4b03ad3f0c10d11"}, {"code": "#(apply assoc {}\n         (interleave % %2))", "problem": 61, "user": "51037468e4b00c483ae17702"}, {"code": "#(let [l (if (< (count %1) (count %2)) (count %1) (count %2))]\n    (loop [r {} n 0]\n      (if (>= n l)\n        r\n        (recur (assoc r (nth %1 n) (nth %2 n)) (inc n)))))", "problem": 61, "user": "4ef2eb4d535dced4c769f226"}, {"code": "(fn zm [a b]\n  (if (or (empty? a) (empty? b))\n    {}\n    (assoc (zm (rest a) (rest b)) (first a) (first b))))", "problem": 61, "user": "5110b8bae4b04c71fce993f4"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "514d8084e4b019235f6c0588"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4fb4303fe4b081705acca2ac"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "4e58ef07535d8a8b8723a299"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "514afd1be4b0bd81940b86c6"}, {"code": "(fn [x y] (into {} (map (fn [a b] [a b]) x y)))", "problem": 61, "user": "510967aae4b07c05fdf6dc0f"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "514457fbe4b0b4fb4ace5f43"}, {"code": "(fn [kys vls]\n  (reduce #(assoc %1 (first %2) (second %2)) {}\n    (partition 2 (interleave kys vls))))", "problem": 61, "user": "515737f0e4b0b0b4b87062d0"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "5150a7d7e4b03e678e393abb"}, {"code": "(fn [a b] (reduce  conj  {} (map vector a b)))", "problem": 61, "user": "5158bba4e4b059418b97f0ab"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "51533ecde4b0252ac4b16619"}, {"code": "(fn [a b] (apply hash-map (mapcat vector a b)))", "problem": 61, "user": "504e71cbe4b0f6ff3350c4b3"}, {"code": "(fn [kin vin]\n  (loop [ks kin vs vin acc {}]\n    (if (or (empty? ks) (empty? vs))\n      acc\n      (recur\n        (rest ks)\n        (rest vs)\n        (assoc acc (first ks) (first vs))))))", "problem": 61, "user": "515828b8e4b0a069fd272c71"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "515a6151e4b0394f658fe241"}, {"code": "(fn [ks vs]\n  (reduce merge\n          (map (fn [k v] {k v})\n               ks\n               vs)))", "problem": 61, "user": "51460e4ce4b04ef915e37314"}, {"code": "(fn [a b]\n          (apply assoc {} (interleave a b)))", "problem": 61, "user": "514d7e29e4b019235f6c0587"}, {"code": "(fn [c1 c2]\n  (let [kvv (map vector c1 c2)\n        kvm (map #(apply hash-map %) kvv)]\n    (apply merge kvm)))", "problem": 61, "user": "5133e51ae4b0d7a043de8cf6"}, {"code": "#(into {} (map hash-map %1 %2))", "problem": 61, "user": "4e781a2e535d324fb2983d74"}, {"code": "(fn [ks vs]\n  (reduce #(let [[k v] %2] (assoc %1 k v))\n          {} (map vector ks vs)))", "problem": 61, "user": "515ead6be4b049add99a053e"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "513b43ede4b067e25a345ed3"}, {"code": "#(apply array-map (interleave %1 %2))", "problem": 61, "user": "50fe91c1e4b03cd852b4e84e"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "50705886e4b07bd6ad9b9f2a"}, {"code": "(fn [ns ms] (loop [xs ns, ys ms, acc {}]\n\t\t\t  (if (or (empty? xs) (empty? ys))\n\t\t\t      acc\n\t\t\t    (recur (rest xs) (rest ys) (assoc acc (first xs) (first ys))))))", "problem": 61, "user": "4eeccfc0535d93acb0a668b5"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "514e4ae4e4b019235f6c0594"}, {"code": "#(apply merge (map hash-map % %2))", "problem": 61, "user": "4f8c813de4b02e764a0a519f"}, {"code": "#(reduce merge \n         (map (fn [k v] {k v}) %1 %2))", "problem": 61, "user": "51592b81e4b0394f658fe22c"}, {"code": "#(reduce conj {} (map vector % %2))", "problem": 61, "user": "4fdbc075e4b05e33b9224f61"}, {"code": "(fn [vec1 vec2] (apply merge (map (fn [mkey mvalue] (assoc {} mkey mvalue)) vec1 vec2)))", "problem": 61, "user": "5162757ee4b03cfa3774b3fe"}, {"code": "(fn [ks vs]\n      (apply hash-map (interleave ks vs)))", "problem": 61, "user": "50f48298e4b004d364930527"}, {"code": "(fn f [k v]\n\t(into {} (map #(assoc {} %1 %2) k v)))", "problem": 61, "user": "514a13cee4b0829bd132edb4"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4f437751e4b0d7d3c9f3fd20"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "5165a235e4b079ad97ec44ac"}, {"code": "(fn [xs ys]\n  (into {} (map #(vector %1 %2) xs ys)))", "problem": 61, "user": "50ef96a1e4b0bdaecbb47d9d"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "515e8ce2e4b049add99a053d"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "51696bcde4b03f62cda68ce7"}, {"code": "#(apply conj {} (map vector %1 %2))", "problem": 61, "user": "5166e80de4b060c690c1f4c5"}, {"code": "(fn zipmap2 [v1 v2] (cond (or (empty? v1) (empty? v2)) {} :else (assoc (zipmap2 (rest v1) (rest v2)) (first v1) (first v2))))", "problem": 61, "user": "50723bbae4b0e3170b5a868b"}, {"code": "(fn [k v]\n  (into {} \n        (for [x (map hash-map k v)] x)))", "problem": 61, "user": "5154fa3fe4b0179c5115f4e6"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "5150f87ae4b03e678e393ac7"}, {"code": "#(into {} (map (partial apply vector) (partition 2 (interleave %1 %2))))", "problem": 61, "user": "50b1d166e4b03ea880433554"}, {"code": "(fn [l1 l2]\n    (loop [l1 l1\n           l2 l2\n           res []]\n      (if (or (empty? l1) (empty? l2))\n        (apply hash-map res)\n        (recur (rest l1) (rest l2) (conj res (first l1) (first l2))))))", "problem": 61, "user": "515ef58be4b02c55805ea237"}, {"code": "(fn zippy\n  ([ks vs] (zippy {} ks vs))\n  ([m tks tvs]\n    (if \n      (or (empty? tks) (empty? tvs))\n      m\n      (recur (assoc m (first tks) (first tvs)) (rest tks) (rest tvs)))))", "problem": 61, "user": "4f05a9cf535dcb61093f6bfc"}, {"code": "(fn [keyz valz]\n  (reduce #(assoc % (%2 0) (%2 1)) {} (map vector keyz valz)))", "problem": 61, "user": "516f06dce4b06aac486e5b39"}, {"code": "(fn funky [col1 col2]\n   (into {} (map (fn [a b]\n          (vector a b) ) col1 col2)))", "problem": 61, "user": "51427a8be4b0b50abeb46b37"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "515ffbfbe4b0e2be8aa20bdd"}, {"code": "(fn [keys vals]\n  (loop [result {} k keys v vals]\n    (if (or (empty? k) (empty? v))\n      result\n      (recur (into result [[(first k) (first v)]]) (rest k) (rest v)))))", "problem": 61, "user": "512d3304e4b040332b905b2d"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "51473a70e4b0d520409ed394"}, {"code": "(fn [ks vs]\n  (loop [m {} ks ks vs vs]\n    (if (or (empty? ks) (empty? vs))\n      m\n      (recur\n       (assoc m (first ks) (first vs))\n       (rest ks)\n       (rest vs)))))", "problem": 61, "user": "51684318e4b03f62cda68cd6"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "51740b65e4b0d277d717bc67"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "5143952fe4b0b4fb4ace5f38"}, {"code": "(fn [keys vals]\n    (loop [map {}\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map)))", "problem": 61, "user": "4ed90014535d10e5ff6f52fe"}, {"code": "(fn [k v] (apply hash-map (interleave (seq k) (seq v))))", "problem": 61, "user": "5175616ae4b0dea9bbfba576"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "5173726be4b098276e74652c"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "516dc88ae4b046df6fbb76a1"}, {"code": "(fn [x y]\n  (reduce #(assoc %1 (first %2) (second %2))\n          {}\n          (map list x y)))", "problem": 61, "user": "515f8a0de4b0e2be8aa20bce"}, {"code": "(fn [k v] (apply conj (map #(assoc {} %1 %2) k v)))", "problem": 61, "user": "5171f684e4b0d70c8bbbf248"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "51780f88e4b03d69594194c9"}, {"code": "(fn zip [ks vs]\n  (letfn [\n          (stop-condition [ks vs] (or (= 0 (count ks)) (= 0 (count vs))))\n          (zip-first [m ks vs] (assoc m (first ks) (first vs)))\n          (zip-iter [m ks vs] (if (stop-condition ks vs) m (zip-iter (zip-first m ks vs) (rest ks) (rest vs))))\n          ]\n    (zip-iter {} ks vs)))", "problem": 61, "user": "517531c6e4b07031762f2eea"}, {"code": "(fn [ks vs] ((fn [ks vs m] (if (or (empty? ks) (empty? vs)) m (recur (next ks) (next vs) (assoc m (first ks) (first vs)) ) ) ) ks vs (hash-map)))", "problem": 61, "user": "51729002e4b044b2ef48a850"}, {"code": "(fn myzipmap[s1 s2]\n \n  (let [myzip \n   (fn myzip2[s1 s2]\n          (let \n            [ss1 (seq s1) \n             ss2 (seq s2)\n            ]\n          (cond (and ss1 ss2) \n           (lazy-seq \n             (cons [(first s1) (first s2)]\n                    (myzip2 (rest s1) (rest s2))\n              )      \n                    \n            ) \n            \n           )\n           \n          )\n  )\n        ]\n   (reduce (fn [acc pair]\n             (assoc acc (first pair) (second pair)) \n            \n            )\n            {}\n            (myzip s1 s2)\n   )\n    )\n )", "problem": 61, "user": "4fb03cf4e4b081705acca262"}, {"code": "#(reduce conj (map hash-map % %2))", "problem": 61, "user": "517adc6ce4b0925c997201c4"}, {"code": "#(into {} (map vec (partition 2 (interleave %1 %2))))", "problem": 61, "user": "5134973ce4b0230e9f713b42"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "51778122e4b085adf681d89d"}, {"code": "(fn [a b]\n  (apply hash-map (interleave a b)))", "problem": 61, "user": "4e74e119535d7a570dd295bc"}, {"code": "#(apply hash-map(flatten (map list %1 %2)))", "problem": 61, "user": "516eb196e4b06aac486e5b2e"}, {"code": "#(into {} (map (fn [i j] (vector i j)) % %2))", "problem": 61, "user": "5093a80be4b097f48cc38583"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "51780bfce4b0f89a8f53839c"}, {"code": "(fn [ks vs]\n  (apply hash-map (interleave ks vs)))", "problem": 61, "user": "4eec82fe535d93acb0a668ae"}, {"code": "(fn zm [xs ys] (if (or (empty? xs) (empty? ys)) {} (assoc (zm (rest xs) (rest ys)) (first xs) (first ys))))", "problem": 61, "user": "515fb48fe4b0e2be8aa20bd5"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4ed286d4535d44c135fd68d7"}, {"code": "#(into (sorted-map) (map vector %1 %2))", "problem": 61, "user": "517945dce4b0684c1c981a43"}, {"code": "(fn [a b] (into {} (map #(vector %1 %2) a b)))", "problem": 61, "user": "50342d1be4b062bc5d7ae15f"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "5034b623e4b062bc5d7ae168"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4faa5735e4b081705acca1ee"}, {"code": "(fn\n    [ks vs]\n  (into {} (map vector ks vs)))", "problem": 61, "user": "51804bcbe4b04f45bde7d901"}, {"code": "#(apply conj (map hash-map % %2))", "problem": 61, "user": "51757af0e4b085adf681d873"}, {"code": "(fn [l1 l2] (reduce #(into %1 %2) {} (map #(identity {%1 %2}) l1 l2)))", "problem": 61, "user": "5163b06be4b055933a9ca030"}, {"code": "(fn [k v]\n  (apply assoc {} (interleave k v)))", "problem": 61, "user": "515ff4b9e4b0e2be8aa20bd9"}, {"code": "(fn [v1 v2]     (loop [x v1 y v2 col {}]\n        (if (or (empty? x) (empty? y))\n            col\n            (recur (rest x) (rest y) (assoc col (first x) (first y))))))", "problem": 61, "user": "5179fd22e4b01aacecbecbe5"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "517b59b8e4b0925c997201d0"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "518696c1e4b0c40be512d708"}, {"code": "(fn p61 [k v]\n  (apply hash-map (interleave k v))\n  )", "problem": 61, "user": "51750fc5e4b07031762f2ee6"}, {"code": "#(apply merge (map hash-map %1 %2))", "problem": 61, "user": "5160195ae4b0e2be8aa20be3"}, {"code": "(fn [x y]\n  (loop [[h1 & r1] x, [h2 & r2] y, z (sorted-map) ]\n    (if (or (nil? h1) (nil? h2))\n      z\n      (recur r1 r2 (assoc z h1 h2)))\n    ))", "problem": 61, "user": "5099283ce4b0cae2931060af"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "4f6fd91ae4b07046d9f4efed"}, {"code": "(fn my-zipmap [ks vs]\n     (if (or (empty? ks) (empty? vs))\n         {}\n         (assoc (my-zipmap (rest ks) (rest vs)) (first ks) (first vs))))", "problem": 61, "user": "5186134ce4b0da5a5be3bac7"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "517bc969e4b07ef0e56148d0"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "5164867fe4b003cf19fdde3e"}, {"code": "(fn [k v]\n  (loop [ks k\n         vs v\n         m {}]\n    (let [ak (first ks)\n          av (first vs)]\n      (if (and ak av)\n        (recur (rest ks) (rest vs) (assoc m ak av))\n        m))))", "problem": 61, "user": "51899891e4b0288ada3dbdab"}, {"code": "(fn [ks vs]\n  (apply assoc {} (interleave ks vs)))", "problem": 61, "user": "5152bc4ee4b001f44f99bfef"}, {"code": "(fn [ks vs]\n    (into {} (map vector ks vs)))", "problem": 61, "user": "51805d22e4b0e3fc13e244df"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4fbd24d2e4b081705acca2ff"}, {"code": "(fn [ks vs] (apply hash-map (interleave ks vs)))\n\n;#(loop [result {} keys-coll %1 vals-coll %2]\n;   (if (or (empty? keys-coll)\n;           (empty? vals-coll))\n;     result\n;     (recur (assoc result (first keys-coll)(first vals-coll)) (rest keys-coll) (rest vals-coll))))", "problem": 61, "user": "518ccf6be4b05e6c8537e386"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "518b761ae4b0f028e99addee"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "51170b49e4b0063b4e3e16d9"}, {"code": "(fn [x y] (reduce merge (map hash-map x y)))", "problem": 61, "user": "4ec4d723535dcc7ae8597d65"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "4fecebe1e4b0681fd128dcac"}, {"code": "(fn [klist vlist] \n  (loop [map {}\n         ks (seq klist)\n         vs (seq vlist)]\n    (if (and ks vs)\n      (recur (assoc map (first ks) (first vs))\n             (next ks)\n             (next vs))\n      map)))", "problem": 61, "user": "5154b16be4b0179c5115f4e2"}, {"code": "#(apply merge (map hash-map % %2))", "problem": 61, "user": "5159849ce4b0394f658fe236"}, {"code": "(fn f [a b]\n  (into {}\n        (map #(vector % %2) a b)))", "problem": 61, "user": "51750cd4e4b07031762f2ee5"}, {"code": "#(apply hash-map(interleave %1 %2))", "problem": 61, "user": "517e6671e4b0329b27fa9f56"}, {"code": "#(apply merge (map hash-map % %2))", "problem": 61, "user": "51933b41e4b0c663c5d86ca2"}, {"code": "(fn zipmap-2 [k v]\n  (loop [ks k vs v m {}]\n    (if (or (empty? ks) (empty? vs))\n      m\n      (recur (rest ks) (rest vs) (into m {(first ks) (first vs)})))))", "problem": 61, "user": "519136e9e4b0f8ef0be96c01"}, {"code": "#(into '{} (map (fn [a b] {a b}) %1 %2))", "problem": 61, "user": "4f409e29e4b0e243712b1fb6"}, {"code": "#(loop [r {} k %1 v %2]\n   (if (or (empty? k) (empty? v)) r\n     \n     (recur (conj r [(first k) (first v)]) (rest k) (rest v))))", "problem": 61, "user": "5196568fe4b04c0af7ff3c1c"}, {"code": "(fn [a b]\n  (into {} (for [i (range (min (count a) (count b)))] [(get a i) (get b i)])))", "problem": 61, "user": "519c0c6ee4b0a1d87b003450"}, {"code": "(fn [k v] (into {} (map vector k v)))", "problem": 61, "user": "51990df9e4b068aa333628fc"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "519b2570e4b0ac1b7dced6a3"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "50377d53e4b0af0658af77ad"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "518e6966e4b051adb72789ec"}, {"code": "(fn [a b] (apply hash-map (interleave a b)))", "problem": 61, "user": "5073de20e4b054001656acca"}, {"code": "(fn f [a b]\n        (reduce merge (map (partial assoc {}) a b)))", "problem": 61, "user": "4f3ca5a6e4b0e243712b1f53"}, {"code": "#(apply hash-map (mapcat list % %2))", "problem": 61, "user": "519b7d76e4b02a926d9a436e"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "51823a97e4b0f2adb733651e"}, {"code": "#(reduce conj {} (map vector %1 %2))", "problem": 61, "user": "5199ca05e4b022efe2b3ba88"}, {"code": "#(apply hash-map (interleave  % %2))", "problem": 61, "user": "5191045ee4b0f8ef0be96bf3"}, {"code": "(fn [keys values] (into {} (map vector keys values)))", "problem": 61, "user": "4e57afc5535d8a8b8723a288"}, {"code": "(fn [keys values]\n  (apply hash-map (interleave keys values)))", "problem": 61, "user": "4f16d3fd535d64f60314644e"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "51377188e4b04059df19f303"}, {"code": "#(apply assoc {} (interleave %1 %2 ))", "problem": 61, "user": "518c5236e4b087e178201de0"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "506ba58be4b0eda3100c090b"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "51a05bede4b0b292b01ee3f4"}, {"code": "(comp (partial into {}) (partial map vector))", "problem": 61, "user": "4eb30868535d7eef30807355"}, {"code": "(fn [& xs] (into {} (apply map (fn [a b] [a b]) xs)))", "problem": 61, "user": "51a768e0e4b0da5f497bde84"}, {"code": "(fn [k v] (apply array-map (apply concat {} (map #(list %1 %2) k v))))", "problem": 61, "user": "51a8f0c6e4b08d8ec191b821"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "51a10b2ce4b0b292b01ee3fe"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "5183f5d7e4b02826a645f393"}, {"code": "#(apply merge (map (fn [a b] {a b}) %1 %2))", "problem": 61, "user": "4fe9f0f6e4b0547ebccb247b"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "51a477eee4b0def3c5c58692"}, {"code": "(fn [x y] (loop [sx x sy y res {}] (if (or (= () sx)(= () sy)) res (recur (rest sx)(rest sy)(conj res {(first sx) (first sy)})))))", "problem": 61, "user": "51a7f74be4b08d8ec191b802"}, {"code": "#(reduce merge {} (map vector %1 %2))", "problem": 61, "user": "51ab1718e4b04e3dc0c27b2f"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4fbf2818e4b081705acca317"}, {"code": "(fn [ks vs]\n  (apply hash-map (mapcat #(do [% %2]) ks vs)))", "problem": 61, "user": "510b0480e4b078ea719210fa"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "51a54fb4e4b0def3c5c586a3"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "518cdbd6e4b05e6c8537e387"}, {"code": "(fn [s1 s2]\n  (loop [result {} r1 s1 r2 s2]\n  (if (or (empty? r1) (empty? r2))\n  result\n  (recur (assoc result (first r1) (first r2)) (next r1) (next r2))\n  )))", "problem": 61, "user": "51a7b4fee4b0da5f497bde8b"}, {"code": "#(reduce (fn [m e] (let [[k v] e] (assoc m k v))) {} (map vector % %2))", "problem": 61, "user": "506cad7de4b0a302964c548e"}, {"code": "(fn f [A B]\n  (if (or (empty? (rest A)) (empty? (rest B)))\n    (conj {(first A) (first B)} {})\n    (conj {(first A) (first B)} (f (rest A) (rest B)))))", "problem": 61, "user": "51ad0ab8e4b09397d510977b"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "51b091e9e4b0c53cf2e68a68"}, {"code": "(fn [ks vs]\n  (apply hash-map (interleave ks vs)))", "problem": 61, "user": "50bc4e73e4b0594b91591c3d"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "50a2f901e4b029e8bace362a"}, {"code": "(fn [l1 l2] (reduce #(conj %1 %2) {} (map vector l1 l2)))", "problem": 61, "user": "51b0fc95e4b0c53cf2e68a72"}, {"code": "(fn [fst snd]\n  (apply merge (map sorted-map fst snd)))", "problem": 61, "user": "51040eb2e4b0432126ba9bb4"}, {"code": "(fn [ks vs]                                     \n  (reduce conj {} (map #(hash-map %1 %2) ks vs)))", "problem": 61, "user": "5141abf1e4b02fd87f5064c3"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "51b24defe4b02f8f128bb963"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "50a5b7e9e4b0aa96157e2610"}, {"code": "(fn [ks vs]\n  (into {} (map vector ks vs))\n  )", "problem": 61, "user": "51aa2b4fe4b04e3dc0c27b21"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "51aa4eede4b04e3dc0c27b25"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "51b793d3e4b0d906fcd71d38"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "51b3f109e4b0f094dd986fa9"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "51b38769e4b026427ecf067f"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4f2f7e87e4b0d6649770a06f"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4e70a7c1535d5021c1a8963c"}, {"code": "(fn [x y]\n          (loop [accum {} x x y y]\n            (if (or (empty? x) (empty? y))\n              accum\n              (recur (conj accum {(first x) (first y)}) (rest x) (rest y)))))", "problem": 61, "user": "504e0136e4b078edc5f5938e"}, {"code": "(fn [ks vs]\n  (reduce merge (map (fn [k v] {k v}) ks vs)))", "problem": 61, "user": "4fa340b4e4b081705acca18c"}, {"code": "(fn [a b] (apply hash-map (interleave a b)))", "problem": 61, "user": "51b7b521e4b0d906fcd71d3a"}, {"code": "(fn [k v] (apply hash-map (mapcat vector k v)))", "problem": 61, "user": "51bc2f6ae4b0fe3ecfb46452"}, {"code": "(fn f [a b] (if(or (empty? a) (empty? b))\n             {}\n             (merge {(first a) (first b)} (f (next a) (next b)))\n             )\n )", "problem": 61, "user": "51aeb1f4e4b09397d5109794"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "519db0ede4b037b32803f9b9"}, {"code": "(fn [arg1 arg2]\n  (loop [in1 arg1 in2 arg2 out {}]\n    (cond (= () in1) out\n          (= () in2) out\n          :else (recur (rest in1) (rest in2)\n                       (assoc out (first in1) (first in2))))))", "problem": 61, "user": "51baff1be4b0fe3ecfb46443"}, {"code": "(fn [v1 v2] (apply conj {} (map vector v1 v2)))", "problem": 61, "user": "516db4f6e4b046df6fbb76a0"}, {"code": "#(apply hash-map (mapcat list %1 %2))", "problem": 61, "user": "51bf4560e4b013aa0d74b817"}, {"code": "(fn [k v]\n  (into {} (map vector k v)))", "problem": 61, "user": "511d6a01e4b022853b0e07a5"}, {"code": "(fn [ks vs] (apply hash-map (mapcat (fn [k v] [k v]) ks vs)))", "problem": 61, "user": "4dd59d8b535dae65d5c462eb"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "51a865dfe4b08d8ec191b80f"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "51b90b88e4b050a1176cd6a2"}, {"code": "(fn zm2 [ks vs]\n  (into {} (map vector ks vs)))", "problem": 61, "user": "51672d15e4b079759a74a5e7"}, {"code": "(fn [x y]\n  (reduce (fn [m [k v]] \n            (into m {k v})) {} (map vector x y))\n  )", "problem": 61, "user": "51bec919e4b013aa0d74b800"}, {"code": "(fn mapmake [keys vals] \n  (loop [k keys v vals m (hash-map)]\n    (if (or (empty? k) (empty? v)) m\n      (recur (rest k) (rest v) (assoc m (first k) (first v))))))", "problem": 61, "user": "4f47eab2e4b0d56e7bb92bc6"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "51c330a9e4b0851ac09658f2"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "51789dfae4b03d69594194d7"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "51bd1a0de4b0df1216cefd93"}, {"code": "(fn xipmap\n  [ks vs]\n  (loop [lks ks lvs vs m {}]\n    (if (or (empty? lks) (empty? lvs))\n      m\n      (recur (rest lks) (rest lvs) (assoc m (first lks) (first lvs))))))", "problem": 61, "user": "5070e31ee4b0e3170b5a8678"}, {"code": "(fn f1 ([a b] (f1 a b {})) ([a b t] (if (or (empty? a) (empty? b)) t (recur (drop 1 a) (drop 1 b) (conj t {(first a) (first b)})))))", "problem": 61, "user": "50b8e9a4e4b0cba0e598b656"}, {"code": "(fn [c1 c2]\n  (loop [i 0\n         r {}]\n    (if (or (>= i (count c1)) (>= i (count c2)))\n      r\n      (recur (inc i) (assoc r (get c1 i) (get c2 i))))))", "problem": 61, "user": "51b86a0fe4b09e0e347b2e78"}, {"code": "#(apply array-map (interleave %1 %2))", "problem": 61, "user": "5180dc04e4b06b8caf33fa01"}, {"code": "(comp #(apply hash-map %) interleave)", "problem": 61, "user": "51a3c9cde4b0e77c4ca60bf9"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "518ad8fce4b06da86c1973c1"}, {"code": "#(apply hash-map (mapcat (fn [x y] [x y]) % %2))", "problem": 61, "user": "51beb32ae4b013aa0d74b7fd"}, {"code": "(fn -zipmap- [key val]\n  (loop [k key v val acc {}]\n    (if (and (seq k) (seq v))\n      (recur (rest k) (rest v) (assoc acc (first k) (first v)))\n      acc)))", "problem": 61, "user": "5163a7bbe4b055933a9ca02f"}, {"code": "#(into  {} (map vector % %2) )", "problem": 61, "user": "51c1d159e4b0d204dbe2ca18"}, {"code": "#(loop [k %1\n        v %2\n        coll (hash-map)]\n   (if (and (seq k) (seq v))\n       (recur (rest k) (rest v) (assoc coll (first k) (first v)))\n     coll))", "problem": 61, "user": "51ab1da1e4b04e3dc0c27b30"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "51c9c6cde4b09ce160bef5b1"}, {"code": "(fn [k v] (apply hash-map (interleave k v)))", "problem": 61, "user": "51aab611e4b04e3dc0c27b2d"}, {"code": "#(into {} (map  vector % %2))", "problem": 61, "user": "51c09719e4b0c9c82288293c"}, {"code": "(fn[x y] (apply hash-map (interleave x y)))", "problem": 61, "user": "4f32135ae4b0d6649770a08e"}, {"code": "(comp (partial apply sorted-map) interleave)", "problem": 61, "user": "51cbdee1e4b08d8387cbede1"}, {"code": "(fn [s1 s2]\n  (apply assoc {}\n (reverse (interleave s2 s1))))", "problem": 61, "user": "51cacda3e4b068dadb8f2227"}, {"code": "#(apply array-map (interleave % %2))", "problem": 61, "user": "51b9d1f0e4b0e871ca49590b"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "51cb073ce4b068dadb8f2233"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "51d08d67e4b067c365486351"}, {"code": "(fn [ks vs]\n  (into {} (map vector ks vs)))", "problem": 61, "user": "51d19c24e4b0cfcf579466c3"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "51ba4482e4b0fe3ecfb4642b"}, {"code": "#(apply merge (map hash-map %1 %2))", "problem": 61, "user": "519964cbe4b0aa09cbc0b849"}, {"code": "#(apply hash-map (mapcat list %1 %2))", "problem": 61, "user": "515cf9b5e4b00901442db1d4"}, {"code": "#(loop [k %1\n        v %2\n        m {}]\n   (if (or (empty? k) (empty? v))\n     m\n     (recur (rest k) (rest v) (assoc m (first k) (first v)))))", "problem": 61, "user": "51d360d1e4b099f3b6acddff"}, {"code": "(fn[x y] (loop [xs x ys y result {}]\n    (if (not (or (empty? xs)  (empty? ys)))\n      (recur (rest xs) (rest ys) (conj result {(first xs) (first ys)}))\n      result)))", "problem": 61, "user": "51d10b1fe4b067c36548635e"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "51d4ed02e4b013d740b70dec"}, {"code": "(fn myzipmap [a b]\n    (apply hash-map (interleave a b))\n)", "problem": 61, "user": "51d1111ce4b067c36548635f"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "51ca7906e4b08b1cbd0d9487"}, {"code": "(fn [ks vs] (into {} (map vector ks vs)))", "problem": 61, "user": "51cdd3f0e4b0e42293a2254b"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "5082ccb3e4b06a522e8c7af3"}, {"code": "(fn zipcat* [& cols]\n  (reduce #(assoc %1 (first %2) (second %2)) {} (apply map list cols)))", "problem": 61, "user": "51d662fce4b0154f82ab92ef"}, {"code": "(comp (partial apply hash-map) interleave)", "problem": 61, "user": "51c19873e4b0d204dbe2ca0d"}, {"code": "(fn [keys vals] \n  (loop [m {}\n         k keys\n         v vals]\n    (if (or (empty? k) (empty? v))\n      m\n      (recur (assoc m (first k) (first v)) (next k) (next v)))))", "problem": 61, "user": "51ae350fe4b09397d5109790"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "51bdc609e4b0ff155d51d2b3"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "50bfd849e4b042992946c649"}, {"code": "(fn [xa xb]\n  (loop [result {} a xa b xb]\n    (if (or (empty? a) (empty? b))\n      result\n      (recur (assoc result (first a) (first b)) (rest a) (rest b))\n     )\n   ))", "problem": 61, "user": "51da7e49e4b02ceefd947768"}, {"code": "#(apply hash-map (mapcat list % %2))", "problem": 61, "user": "51c8301ee4b07ef393169e4d"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "51670895e4b013fc800656c1"}, {"code": "(fn [data_keys data] (loop [k data_keys\n                            d data\n                            m {}]\n                       (if (or (empty? k) (empty? d))\n                         m\n                         (recur (rest k) (rest d) (conj m {(first k) (first d)})))))", "problem": 61, "user": "50214ffae4b0ef1d2d4433bc"}, {"code": "(fn alt-zipmap [my-keys my-values]\n   (apply assoc {} (interleave my-keys my-values)))", "problem": 61, "user": "4ede0511535d10e5ff6f5330"}, {"code": "#(apply hash-map (mapcat vector %1 %2))", "problem": 61, "user": "51e00020e4b01188f0627534"}, {"code": "(fn [xs ys]\n  (loop [orig (apply assoc {} (interleave xs ys)) copy {}]\n    (if (empty? orig)\n      copy\n      (recur (rest orig) (conj copy (first orig))))))", "problem": 61, "user": "51991a89e4b068aa333628fd"}, {"code": "#(apply merge (map hash-map % %2))", "problem": 61, "user": "51cec7b1e4b0e42293a2255b"}, {"code": "#(apply array-map (interleave %1 %2))", "problem": 61, "user": "51cbaf14e4b08d8387cbedda"}, {"code": "#(loop [m {} z (interleave %1 %2)]\n      (if (empty? z) m\n        (recur (into m (assoc {} (first z) (second z))) (drop 2 z))))", "problem": 61, "user": "51b66b31e4b02e5820733406"}, {"code": "(fn [ks vs]\n  (apply hash-map\n         (flatten \n          (for [i (range \n                   (min (count ks) (count vs)))] \n                   [(nth ks i) (nth vs i)]))))", "problem": 61, "user": "51ce1320e4b0e42293a22551"}, {"code": "(fn [kcoll vcoll]\n  (loop [[k & ks] kcoll [v & vs] vcoll m {}]\n    (if (and ks vs)\n     (recur ks vs (assoc m k v))\n     (assoc m k v))))", "problem": 61, "user": "516199bbe4b009fba0926e36"}, {"code": "(fn [k v]\n  (loop [m {}\n         ks k\n         vs v]\n    (if (or (empty? ks) (empty? vs))\n      m\n    (recur (assoc m (first ks) (first vs)) (next ks) (next vs)))))", "problem": 61, "user": "51da565ae4b02ceefd947765"}, {"code": "(fn [ks vs] (apply merge (map (fn [k v] {k v}) ks vs)))", "problem": 61, "user": "51e24a04e4b01e5198146430"}, {"code": "#(reduce merge {} (map hash-map %1 %2))", "problem": 61, "user": "51e1a1fae4b06a68e693eaf6"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "51ba8f82e4b0fe3ecfb46434"}, {"code": "(fn [x y] (into {} (map #(vec [%1 %2]) x y)))", "problem": 61, "user": "4f75469ee4b0fbe0118ec55a"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "51d9eb05e4b02ceefd947755"}, {"code": "(fn [cl1 cl2]\n\t(into {} (map\n\t\t#(vector %1 %2)\n\t\tcl1 cl2)\n \t)\n )", "problem": 61, "user": "51db9e1ee4b0e067a9bbadc9"}, {"code": "#(reduce conj (map hash-map  % %2))", "problem": 61, "user": "50e90813e4b033b0e80d11e7"}, {"code": "(fn [a b] (apply hash-map (interleave a b)))", "problem": 61, "user": "51df825de4b01188f062752b"}, {"code": "#(into {} (map (fn [x y] [x y]) %1 %2))", "problem": 61, "user": "518644bce4b0da5a5be3baca"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "51eb0374e4b0f1f103a0d156"}, {"code": "(fn [a b]\n  (apply hash-map (interleave a b)))", "problem": 61, "user": "51eb3aace4b0f1f103a0d159"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4e3f480c535dc968683fc497"}, {"code": "(fn [a b] (loop [result {} A a B b]\n            (if (= 0 (count A)) result\n              (if (= 0 (count B)) result\n              (recur (merge result {(first A) (first B)}) (rest A) (rest B))\n             )\n           ))\n  )", "problem": 61, "user": "518aec06e4b06da86c1973c2"}, {"code": "(fn construct-map [ks vs]\n  (apply hash-map (flatten (map vector ks vs))))", "problem": 61, "user": "516385cee4b055933a9ca02d"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "51efd397e4b0249c592fbdeb"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "504ee511e4b0e7ad84dbc4a4"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "50d882d4e4b01f0871336e69"}, {"code": "( fn foo[acc lst1 lst2] \n  (if \n    (or\n     (empty? lst1)\n     (empty? lst2)\n     )\n    acc\n    (foo (merge acc {(first lst1) (first lst2)}) (rest lst1) (rest lst2))\n    )\n  ) {}", "problem": 61, "user": "51eec1a6e4b0871fa145d98d"}, {"code": "#(apply hash-map (mapcat vector %1 %2))", "problem": 61, "user": "51197750e4b057cba170bc99"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "511b233ae4b07ab9ec456180"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "51e58e02e4b0efabf93c02d0"}, {"code": "(fn [k v] (apply assoc {} (interleave k v)))", "problem": 61, "user": "51f2ab8be4b0210f90e74554"}, {"code": "(fn [s1 s2]\n  (apply assoc {} (interleave s1 s2))\n)", "problem": 61, "user": "5029f263e4b023940c84aa45"}, {"code": "#(loop [k %1\n        v %2\n        m {}]\n   (if (or (empty? k) (empty? v))\n     m\n     (recur (rest k) (rest v) (assoc m (first k) (first v)))))", "problem": 61, "user": "51f28a64e4b0210f90e7454e"}, {"code": "(fn zmap \n  ([v1 v2] (zmap v1 v2 {}))\n  ([v1 v2 m]\n  \t(if (or (empty? v1) (empty? v2))\n      m\n      (zmap (rest v1) (rest v2) (assoc m (first v1) (first v2))))))", "problem": 61, "user": "51d96ad0e4b02ceefd94774f"}, {"code": "(fn\n  [l1 l2]\n  (loop [map {}\n         x l1\n         y l2]\n    (if (and x y)\n      (recur (assoc map (first x) (first y))\n             (next x)\n             (next y))\n      map\n     )\n    ))", "problem": 61, "user": "50573ed8e4b0012181721987"}, {"code": "#(apply hash-map (mapcat list % %2))", "problem": 61, "user": "51dc5033e4b09c47a74ce109"}, {"code": "(fn [x y] (reduce #(merge %1 %2) (map hash-map x y)))", "problem": 61, "user": "51f13b80e4b06a20a2523f38"}, {"code": "#(loop [m {}, % %, %2 %2]\n    (if (and (seq %) (seq %2))\n      (recur (assoc m (first %) (first %2)) (rest %) (rest %2))\n      m))", "problem": 61, "user": "51a91ac2e4b08d8ec191b822"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "51d11f5de4b067c365486360"}, {"code": "(fn [s1 s2] (reduce conj (map (fn[a b] {a b})  s1 s2)))", "problem": 61, "user": "51f59607e4b0abb92f97f9d5"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "5046ee3ee4b03b02161376b4"}, {"code": "(fn [s1 s2] (apply  merge (map #(conj {} {%1 %2}) s1 s2)))", "problem": 61, "user": "5022292ee4b0846bc458ae46"}, {"code": "(fn [xs1 xs2]\n    (loop [r {} x1 xs1 x2 xs2]\n      (if (or (empty? x1) (empty? x2))\n        r\n        (recur (conj r {(first x1) (first x2)}) (next x1) (next x2)))))", "problem": 61, "user": "50aedb8ce4b0a40c9cfb08d4"}, {"code": "(fn [mylist1 mylist2]\n  (apply hash-map (interleave mylist1 mylist2)))", "problem": 61, "user": "51f82769e4b09be9c177e527"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4e99819a535dbda64a6f6b66"}, {"code": "(fn map-constr-rec [k v]\n  (if (or (empty? k) (empty? v))\n    (hash-map)\n    (assoc (map-constr-rec (rest k) (rest v)) (first k) (first v))))", "problem": 61, "user": "51e0198ee4b01188f0627539"}, {"code": "(fn [ks vs]\n  (reduce (fn [accum pair]\n            (conj accum pair))\n          {}\n         (map (comp identity vector)\n              ks vs)))", "problem": 61, "user": "4fa3c137e4b081705acca193"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "51fa1375e4b0f1313d4689c9"}, {"code": "(fn my-zipmap\n  [xs ys]\n  (apply hash-map (interleave xs ys)))", "problem": 61, "user": "51e780dae4b0730ab87cf353"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "5201572be4b0d7096e99ddbb"}, {"code": "(fn [ks vs]\n  (reduce merge\n    (map #(assoc {} %1 %2) ks vs)))", "problem": 61, "user": "51db0d99e4b06aa4d4669a9d"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4f017b4e535dcb61093f6a37"}, {"code": "(fn [xs ys]\n  (loop [l1 xs l2 ys m {}]\n    (if (or (empty? l1) (empty? l2))\n      m\n      (recur (rest l1) (rest l2) (conj {(first l1) (first l2)} m))\n    )\n  )\n)", "problem": 61, "user": "51897709e4b0288ada3dbdaa"}, {"code": "(fn [k v]\n  (reduce #(assoc %1 (first %2) (second %2)) {}\n          (map #(identity [%1 %2]) k v)))", "problem": 61, "user": "5175533fe4b0dea9bbfba575"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "50c781bbe4b00bb60fe0c535"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "51b3d998e4b0f094dd986fa8"}, {"code": "#(apply merge (map (partial assoc {}) %1 %2))", "problem": 61, "user": "51944aaae4b0142f60b4aedc"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "51f9b1d0e4b09be9c177e550"}, {"code": "(fn [k v]\n  (reduce \n   #(conj % (vec %2))\n   {}\n   (partition 2 (interleave k v))))", "problem": 61, "user": "52039e12e4b0fb7e47ea51ff"}, {"code": "(fn [s1 s2]\n(reduce conj '{} (mapcat #(assoc '{} %1 %2) s1 s2)))", "problem": 61, "user": "5202cfe7e4b030ee0c5b2702"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "51f7dd27e4b06ff1c25c52dc"}, {"code": "#(apply assoc {} (flatten (interleave %1 %2)))", "problem": 61, "user": "51f40975e4b0fca5e8b4822e"}, {"code": "(fn [x y]\n  (reduce conj {} (map hash-map x y)))", "problem": 61, "user": "51eadb98e4b0f1f103a0d153"}, {"code": "#(apply merge (map hash-map % %2))", "problem": 61, "user": "51fa7154e4b0f1313d4689da"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "52016fd3e4b0b2e020a18f10"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "52015698e4b0d7096e99ddba"}, {"code": "(fn [ks vs]\n  (apply hash-map (flatten (map (fn [k v] [k v]) ks vs))))", "problem": 61, "user": "5201ff99e4b0b2e020a18f26"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "51f66e0ee4b06ff1c25c52c3"}, {"code": "(fn [l r]\n  (apply hash-map (interleave l r)))", "problem": 61, "user": "52091d57e4b0e152394d76f0"}, {"code": "#(apply hash-map (mapcat list %1 %2))", "problem": 61, "user": "514c2d05e4b02b8cbb2a9278"}, {"code": "(fn zipper [k v]\n  (apply merge (map #(hash-map %1 %2) k v)))", "problem": 61, "user": "4e0d5a5a535d04ed9115e7b5"}, {"code": "(fn [x y] (apply array-map (interleave x y)))", "problem": 61, "user": "51696ee7e4b03f62cda68ce8"}, {"code": "(fn [ks vs]\n  (loop [m {}\n         ks ks\n         vs vs]\n    (if (and ks vs)\n      (recur (assoc m (first ks) (first vs))\n             (next ks)\n             (next vs))\n      m)))", "problem": 61, "user": "520612a7e4b0bf4f1882c81c"}, {"code": "(fn [x y] (apply hash-map (interleave x y)))", "problem": 61, "user": "52016690e4b0b2e020a18f0f"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "51db1abae4b094966a2cd685"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "5208a3a2e4b0301979a6c235"}, {"code": "(fn [x y]\n  (apply hash-map (interleave x y)))", "problem": 61, "user": "52029e5de4b030ee0c5b26fc"}, {"code": "(fn [a b]\n  (apply assoc {} (interleave a b)))", "problem": 61, "user": "52084f75e4b01ce6bbf31dde"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4fa85ae4e4b081705acca1d3"}, {"code": "#(into {} (map hash-map % %2))", "problem": 61, "user": "520e32a2e4b066f3ea161c93"}, {"code": "(fn [x y] (apply hash-map (interleave x y)))", "problem": 61, "user": "4e944706535dbda64a6f6b11"}, {"code": "#(reduce (fn [acc [a b]] (assoc acc a b)) {} (partition 2 (interleave % %2)))", "problem": 61, "user": "513fab65e4b00f13ea1bd891"}, {"code": "(fn [a b] \n  (reduce \n    #(conj % %2)\n    {}\n    (map #(vector % %2) a b)))", "problem": 61, "user": "520242bae4b030ee0c5b26e3"}, {"code": "(fn [ks vs]\n  (into {} (map vector ks vs)))", "problem": 61, "user": "52173464e4b082aa80a88c75"}, {"code": "(fn [k v] (apply merge (map (fn [k v] { k v }) k v)))", "problem": 61, "user": "5080a697e4b01a93d3f38e49"}, {"code": "(fn construct [xs ys]\n\t  (cond (or (empty? xs) (empty? ys)) {}\n\t\t:else (assoc (construct (rest xs) (rest ys)) (first xs) (first ys))))", "problem": 61, "user": "5213ffd3e4b0961f15ac4d7d"}, {"code": "(fn [x y] (apply hash-map (interleave x y)))", "problem": 61, "user": "519c4111e4b0a1d87b003458"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "51f9527fe4b09be9c177e549"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "5131d817e4b06942423563ca"}, {"code": "#(reduce conj (map hash-map %1 %2))", "problem": 61, "user": "52160dbee4b0bf4bffd29cb3"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "5151c184e4b03e678e393add"}, {"code": "(fn [k v]\n  (loop [m {} ks k vs v]\n    (if (or (empty? ks) (empty? vs)) m\n      (recur (merge m {(first ks) (first vs)}) (rest ks) (rest vs)))))", "problem": 61, "user": "52199105e4b0c4ef0be82ff9"}, {"code": "(fn [k v] (into {} (map vector k v)))", "problem": 61, "user": "50e1bdd8e4b019fc399ce17f"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "5213dbc3e4b0961f15ac4d74"}, {"code": "(fn[k v]\n  (loop [map {}\n        ks (seq k)\n        vs (seq v)] \n  (if (and ks vs) \n    (recur (assoc map (first ks) (first vs))\n           (next ks) \n           (next vs))\n    map)))", "problem": 61, "user": "52196842e4b0890f2f822bfa"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "520cb8c4e4b0b022ef140c9a"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "521679e9e4b0bf4bffd29cca"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "510ee996e4b07438aa321462"}, {"code": "(fn [ks vs]\n  (loop [m {}\n         ks ks\n         vs vs]\n    (if (or (empty? ks)\n            (empty? vs))\n      m\n      (recur (conj m {(first ks) (first vs)}) (rest ks) (rest vs)))))", "problem": 61, "user": "521b9f92e4b0c4ef0be8304c"}, {"code": "(fn [k v]\n  (reduce \n   #(assoc %1 (first %2) (second %2))\n   {}\n   (map list k v)))", "problem": 61, "user": "51dd9370e4b0c33a4e1da40c"}, {"code": "(fn [ks vs] (apply merge (map (fn [k v] {k v}) ks vs)))", "problem": 61, "user": "521e8227e4b0dd19981ad082"}, {"code": "(fn [ks vs]\n  (apply array-map (interleave ks vs)))", "problem": 61, "user": "52117ea7e4b07aea8afc4f70"}, {"code": "(fn foo [k v]\n  (if (or (empty? k) (empty? v))\n    '()\n   (let [k1 (first k)\n         v1 (first v)]\n     (conj {k1 v1} (foo (rest k) (rest v))))))", "problem": 61, "user": "5220a770e4b0e6a83c8925a3"}, {"code": "(fn map-construction-solution\n  [ks vs]\n  (apply hash-map (interleave ks vs)))", "problem": 61, "user": "50c113bee4b096f585049c37"}, {"code": "(fn map-const [k v]\n  (apply hash-map (mapcat list k v)))", "problem": 61, "user": "5220bc0fe4b0e6a83c8925a7"}, {"code": "(fn mapcons [x y]\n  (loop [m {}\n         a x\n         b y]\n    (if ( or (empty? a) (empty? b))\n    m\n    (recur (assoc m (first a) (first b))\n           (rest a)\n           (rest b))\n    )))", "problem": 61, "user": "522048b3e4b0e6c71e0c0c16"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4f4ff836e4b03ad3f0c10cf4"}, {"code": "(fn [klucze wartosci]\n  (loop [ks (seq klucze)\n         vs (seq wartosci)\n         mapa {}]\n    (if (or (empty? ks) (empty? vs)) mapa\n\t(recur (rest ks) (rest vs) (assoc mapa (first ks) (first vs))))))", "problem": 61, "user": "5213348ae4b0d32679a50652"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "5216933be4b000d124d989cf"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "5224a46ce4b01819a2de42e5"}, {"code": "(fn [& x] (apply hash-map (apply interleave x)))", "problem": 61, "user": "521dceeae4b050d5da042802"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "5174ade2e4b07031762f2edf"}, {"code": "(fn [x y] (reduce merge (map #(assoc {} %1 %2) x y) ))", "problem": 61, "user": "4fa7de4ce4b081705acca1c9"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "51e61772e4b0efabf93c02e2"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "51508905e4b098b221effc2d"}, {"code": "#(reduce (fn[r x](assoc r x (nth %2 (.indexOf %1 x)))) {} (take (count %2) %1))", "problem": 61, "user": "51f79238e4b06ff1c25c52d7"}, {"code": "(fn my-zipmap [ks vs]\n  (loop [k (first ks)\n         v (first vs)\n         rest-k (rest ks)\n         rest-v (rest vs)\n         res {}]\n    (if (or (nil? k) (nil? v))\n      res\n      (recur (first rest-k) (first rest-v) (rest rest-k) (rest rest-v) (assoc res k v)))))", "problem": 61, "user": "4fb710f4e4b081705acca2cd"}, {"code": "#(loop [m {} k %1 v %2]\n  (if (or (empty? k) (empty? v)) m\n    (recur  (assoc m (first k) (first v)) (rest k) (rest v))))", "problem": 61, "user": "5167e4a2e4b0c5a4140a3099"}, {"code": "(fn [coll1 coll2] (apply assoc {} (interleave coll1 coll2)))", "problem": 61, "user": "51f805b0e4b06ff1c25c52e2"}, {"code": "(fn makemap [x y] (if \n                    (or (= 0 (count y)) (= 0 (count x)))\n                    {}\n                    (assoc \n                      (makemap (rest x) (rest y))\n                      (first x) (first y)\n                      )\n                    ))", "problem": 61, "user": "51fc44c5e4b0f1313d468a1b"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4daec4a0edd6309eace4d15e"}, {"code": "(fn zip [a b] (if (and (seq b)(seq a)) (assoc (zip (rest a) (rest b)) (first a) (first b) ) {}))", "problem": 61, "user": "522a01ade4b0590a43906ced"}, {"code": "(fn zm [k v]\n  (cond (or (empty? k)(empty? v)) {}\n        :else (into {(first k)(first v)} (zm (rest k)(rest v)))))", "problem": 61, "user": "52153bdde4b0961f15ac4daa"}, {"code": "#(apply hash-map (flatten (map (fn [a b] [a b]) %1 %2)))", "problem": 61, "user": "51891c96e4b04c2714a2670e"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "522454f4e4b01819a2de42d3"}, {"code": "(fn [k v]\n  (loop [result {} ks k vs v]\n    (if (or (not (seq ks)) (not (seq vs)))\n      result\n      (recur (assoc result (first ks) (first vs)) (rest ks) (rest vs)))))", "problem": 61, "user": "51857e64e4b0da5a5be3babe"}, {"code": "(fn [x y] (apply assoc {} (interleave x y)))", "problem": 61, "user": "522600cfe4b0f4c7e20d29c8"}, {"code": "(fn [keys values] \n  (apply hash-map (interleave keys values)))", "problem": 61, "user": "520f46f9e4b0101e4be6fcee"}, {"code": "(fn [k v] (apply hash-map (interleave k v)))", "problem": 61, "user": "52277ab9e4b0186687e23a4f"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "522b922ee4b0d34ee08e71c3"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "522eb5cce4b01cdb292c5f0c"}, {"code": "#(apply conj (map hash-map %1 %2))", "problem": 61, "user": "51701a9ce4b034fe8eaf70f5"}, {"code": "(fn construct-map [ks vs]\n  (into {} (map vec (partition 2 (interleave ks vs)))))", "problem": 61, "user": "521b339fe4b0c4ef0be83031"}, {"code": "#(loop [n 0 res {}]\n    (if (or (= n (count %1)) (= n (count %2))) res\n        (recur (inc n) (assoc res (nth %1 n) (nth %2 n)))))", "problem": 61, "user": "52161db6e4b0bf4bffd29cb8"}, {"code": "(fn [keys vals]\n  (loop [k keys v vals r {}]\n    (if (or (empty? k) (empty? v))\n      r\n      (recur (rest k) (rest v) (merge r {(first k) (first v)})))))", "problem": 61, "user": "51aefceee4b09397d5109797"}, {"code": "(fn [x y] (into {} (map (fn [t z] [t z]) x y)))", "problem": 61, "user": "5125029de4b0ce9225d2ed3e"}, {"code": "(fn [ks vs] (apply hash-map (flatten (for [i (range 0 (min (count ks) (count vs)))] [(ks i) (vs i)]))))", "problem": 61, "user": "52244a77e4b01819a2de42d1"}, {"code": "(fn [a b]\n\t(apply merge (map (fn [n m] {n m}) a b)))", "problem": 61, "user": "510591dde4b06d28cacc92eb"}, {"code": "(fn [ks v]\n  (apply assoc {} (interleave ks v)))", "problem": 61, "user": "514fd753e4b0b449e54b8e00"}, {"code": "(fn [a b]\n  (loop [a a b b c {}]\n    (if (or (empty? a) (empty? b))\n      c\n      (recur (rest a) (rest b) (assoc c (first a) (first b))))))", "problem": 61, "user": "5191ac45e4b0d428d29dc1b6"}, {"code": "#(into {} (map hash-map %1 %2))", "problem": 61, "user": "520693e1e4b0bf4f1882c829"}, {"code": "(fn my-zipmap [col1 col2]\n  (apply hash-map\n       (reduce (fn [a b] (concat a b)) []\n               (map vector col1 col2))))", "problem": 61, "user": "522d0360e4b0806774ddfef7"}, {"code": "#(apply hash-map (interleave  %1 %2))", "problem": 61, "user": "50293245e4b08353e5d459cf"}, {"code": "(fn inmap [k v]\n  (apply assoc {} (interleave k v))\n  )", "problem": 61, "user": "5228f870e4b0186687e23a98"}, {"code": "(fn [xs ys]\n   (into {} (map vector xs ys)))", "problem": 61, "user": "516282c3e4b0e6d3c4734711"}, {"code": "(fn[k v]\n   (apply merge (map (fn[x y] {x y}) k v)))", "problem": 61, "user": "506c0a02e4b0eda3100c090d"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "5233ad08e4b07e3ee2be83ac"}, {"code": "(fn [ks vs] (apply hash-map (interleave ks vs)))", "problem": 61, "user": "516abecae4b081287f204e9f"}, {"code": "(fn [a b]\n  (reduce #(assoc %1 (first %2) (second %2))\n          {}\n          (map vector a b)))", "problem": 61, "user": "50270618e4b01614d1633feb"}, {"code": "(fn[k,v](apply hash-map(interleave k v)))", "problem": 61, "user": "4df1e213535d08e6dec9fe20"}, {"code": "(fn [kws vls]\n  (apply hash-map (interleave kws vls)))", "problem": 61, "user": "52381b2ae4b0fae3832e99ef"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "508923d5e4b06d8254e936e8"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "5213d81de4b0961f15ac4d73"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "518a59b3e4b02bf06f6bbb4b"}, {"code": "#(reduce merge {} (map hash-map %1 %2))", "problem": 61, "user": "4f43894ee4b0d7d3c9f3fd21"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "508fd6bae4b0ea685a20f76b"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "4ff9a200e4b0678c553fc3ab"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "523d02b0e4b0dbf0c3017289"}, {"code": "(fn [ks vs]\n  (loop [i (dec (min (count ks) (count vs)))\n         r {}]\n    (if (< i 0) r\n      (recur (dec i) (conj r (hash-map (get ks i) (get vs i)))))))", "problem": 61, "user": "523bc0e6e4b07becd5be21f9"}, {"code": "(fn [ks vs] (into {} (map #(vector %1 %2) ks vs)))", "problem": 61, "user": "5201ada5e4b0b2e020a18f14"}, {"code": "(fn [sq1 sq2]\n   (reduce #(merge % %2) {}\n         (map #(hash-map % %2) sq1 sq2)))", "problem": 61, "user": "523bd9c0e4b07becd5be2201"}, {"code": "#(apply array-map (interleave % %2))", "problem": 61, "user": "4fec550de4b0681fd128dca6"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "52271ffee4b04e78ff2e19a9"}, {"code": "#(loop [rv {},  ks %, vs %2]\n    (if (and (seq ks) (seq vs))\n      (recur (assoc rv (first ks) (first vs)) (rest ks) (rest vs))\n      rv\n      )\n  )", "problem": 61, "user": "5229211be4b04c906c9c6a63"}, {"code": "(fn [k v] (apply hash-map (interleave k v)))", "problem": 61, "user": "52319066e4b0e2e8de81d1e9"}, {"code": "(fn [a b] (into {} (map (fn [x y] (vector x y)) a b)))", "problem": 61, "user": "50aa60bee4b056ee01935865"}, {"code": "#(reduce conj {} (map vector % %2))", "problem": 61, "user": "523b10dfe4b02f719975bdb8"}, {"code": "(fn [c1 c2] (apply hash-map (interleave c1 c2) ) )", "problem": 61, "user": "51e28063e4b08e53a149f0f2"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "51cd75d6e4b02254fc79488c"}, {"code": "(fn f [x y]\n  (if (or (empty? x) (empty? y))\n    {}\n    (conj (f (rest x) (rest y)) {(first x) (first y)})))", "problem": 61, "user": "52379c46e4b0fae3832e99db"}, {"code": "(fn [keys vector]\n    (apply assoc {} (interleave keys vector)))", "problem": 61, "user": "511e763ce4b03e81d390ac29"}, {"code": "(fn [a b]\n   (apply hash-map (interleave a b)))", "problem": 61, "user": "522eba30e4b01cdb292c5f0e"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "523ed522e4b057c4b7cd0a78"}, {"code": "(fn [k v]\n  (apply hash-map (mapcat vector k v)))", "problem": 61, "user": "5236b6bce4b05f3be1c7c8fe"}, {"code": "(fn zmap\n  ([keys vals] (zmap keys vals {}))\n  ([keys vals m]\n     (let [k (first keys)\n           v (first vals)]\n       (if (every? identity [k v])\n         (zmap (rest keys) (rest vals) (assoc m k v))\n         m))))", "problem": 61, "user": "523b82efe4b07becd5be21f0"}, {"code": "#(apply merge (map hash-map % %2))", "problem": 61, "user": "523b1988e4b02f719975bdbc"}, {"code": "#(loop [input-keys %1 input-values %2 ans {}]\n  (if (or (empty? input-keys) (empty? input-values))\n    ans\n    (recur (rest input-keys) (rest input-values) (assoc ans (first input-keys) (first input-values)))\n  )\n)", "problem": 61, "user": "51f09f3de4b0274c496158d7"}, {"code": "#(reduce conj (map hash-map %1 %2))", "problem": 61, "user": "51cfc616e4b0e42293a22578"}, {"code": "(fn [ks vs]\n  (apply assoc {} (interleave ks vs)))", "problem": 61, "user": "52487654e4b05ef8e38e63dc"}, {"code": "(fn [coll_1 coll_2]\n    \n    (reduce\n      (fn [my-map elm]\n        (assoc my-map (first elm) (last elm)))\n      {}\n      (map \n        (fn [elm1 elm2] [elm1 elm2])\n        coll_1\n        coll_2)))", "problem": 61, "user": "518d1b5be4b070277754617b"}, {"code": "(fn [keys vals] (apply hash-map (flatten (map #(vector %1 %2) keys vals))))", "problem": 61, "user": "523a9fc9e4b081681ca7adca"}, {"code": "(fn [coll1 coll2]\n\n   (apply sorted-map\n\n          (interleave coll1 coll2)))", "problem": 61, "user": "51227a00e4b068a9582e656b"}, {"code": "(fn [col1 col2]\n(into {} (map #(vector % %2) col1 col2))\n\n   )", "problem": 61, "user": "50550f43e4b0b1b9d1860eb7"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "5246e945e4b0644eb7b0783b"}, {"code": "(fn doit [x y] (apply hash-map (interleave x y)))", "problem": 61, "user": "4f601623e4b0defedf855fa3"}, {"code": "#(reduce merge (map (fn [x y] (hash-map x y)) %1 %2))", "problem": 61, "user": "5248c4c7e4b05ef8e38e63e8"}, {"code": "(fn [l1 l2]\n    (apply hash-map (reduce #(assoc %1 (first %2) (second %2)) (mapcat #(list %1 %2) l1 l2) {})))", "problem": 61, "user": "523288fee4b035af41902a88"}, {"code": "#(into {}(map vector %1 %2))", "problem": 61, "user": "5007c7c7e4b0b17c647f5226"}, {"code": "(fn [k v] (loop [map {} ks (seq k) vs (seq v)] (if (and ks vs) (recur (assoc map (first ks) (first vs)) (next ks) (next vs)) map)))", "problem": 61, "user": "5243d9a2e4b076204b44fadf"}, {"code": "(fn [ks vs]\n  (apply merge (map #(assoc {} %1 %2) ks vs)))", "problem": 61, "user": "524cdd51e4b0752c4cb68ccc"}, {"code": "(comp (partial apply hash-map) (partial mapcat list))", "problem": 61, "user": "52437703e4b076204b44fabf"}, {"code": "#(into {} (map hash-map %1 %2))", "problem": 61, "user": "510c123be4b078ea7192110e"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "524be8e0e4b09eba1c0223f1"}, {"code": "(fn [s1 s2] (reduce #(assoc %1 (first %2) (second %2)) {} (map #(conj [] %1 %2) s1 s2)))", "problem": 61, "user": "51b0e7b3e4b0c53cf2e68a6e"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "524feb3fe4b0541d1855b81f"}, {"code": "(fn [& xs] (apply hash-map (apply interleave xs)))", "problem": 61, "user": "523b1a65e4b02f719975bdbd"}, {"code": "(fn [s1 s2] (apply array-map (interleave s1 s2)))", "problem": 61, "user": "523f0bbfe4b01c266ffa7f91"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "51e595a6e4b0efabf93c02d8"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "511d4a52e4b022853b0e07a1"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "524b90fae4b09eba1c0223df"}, {"code": "(fn [ks vs] \n  (loop [m {} k ks v vs]\n     (if (and k v)\n        (recur (assoc m (first k) (first v)) \n            (next k) (next v)) m) ))", "problem": 61, "user": "524f4162e4b0541d1855b806"}, {"code": "#(apply hash-map (mapcat (fn [k v] [k v]) % %2))", "problem": 61, "user": "52479487e4b05ef8e38e6373"}, {"code": "#(apply hash-map (vec (interleave % %2)))", "problem": 61, "user": "52485723e4b05ef8e38e63d2"}, {"code": "(fn this-f [list-1 list-2]\n    (if (not\n         (or (empty? list-1)\n             (empty? list-2)))\n      (assoc (this-f (rest list-1) (rest list-2))\n        (first list-1) (first list-2))\n      {})\n    )", "problem": 61, "user": "52213426e4b0e6a83c8925c4"}, {"code": "#(into {} (apply map vector %&))", "problem": 61, "user": "525431dfe4b0541d1855b970"}, {"code": "#(apply hash-map (mapcat vector %1 %2))", "problem": 61, "user": "5245fbbbe4b09dbe66b56183"}, {"code": "(fn [xs ys] (reduce (fn [acc [x y]] (assoc acc x y)) {} (map vector xs ys)))", "problem": 61, "user": "5213d7aae4b0961f15ac4d72"}, {"code": "#(reduce (fn [xs [k v]] (conj xs {k v})) {} (partition 2 (interleave % %2)))", "problem": 61, "user": "525078b6e4b0541d1855b832"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "52527192e4b0541d1855b8af"}, {"code": "(fn [k v] (reduce conj (map (partial assoc {}) k v)))", "problem": 61, "user": "524469dee4b0d8acf9ed6a9d"}, {"code": "#(let [n (min (count %1) (count %2))]\n   (apply hash-map (interleave (take n %1) (take n %2))))", "problem": 61, "user": "524ae8e6e4b09eba1c0223b5"}, {"code": "(fn cust-zipmap [k v]\n  (apply assoc {}(interleave k v)))", "problem": 61, "user": "52463059e4b09dbe66b56198"}, {"code": "(fn [kys items] (apply assoc {} (interleave kys items)))", "problem": 61, "user": "4ef7a483535dced4c769f258"}, {"code": "(fn zi\n   ([k v]\n       (loop [ke (seq k) va (seq v) map {}]\n          (if (and ke va)\n               (recur (next ke) (next va) (assoc map (first ke) (first va)))\n               map)\n        )))", "problem": 61, "user": "51d28e15e4b0d13b04db0d9b"}, {"code": "(fn [keys vals]\n    (loop [map {}\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map)))", "problem": 61, "user": "524dd1c3e4b0f245900d275c"}, {"code": "(fn zip \n  ([xs ys] (zip xs ys {}))\n  ([xs ys accum]\n  (if (and (seq xs) (seq ys))\n    (zip (rest xs) (rest ys) (assoc accum (first xs) (first ys)))\n\taccum)))", "problem": 61, "user": "524740e7e4b05ef8e38e635d"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "5217c26fe4b0a4bccb16cab8"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "52586d24e4b0cb4875a45cb0"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "523c6451e4b07becd5be2222"}, {"code": "(fn zm\n  [keys vals]\n\n    (loop [map {}\n\n           ks (seq keys)\n\n           vs (seq vals)]\n\n      (if (and ks vs)\n\n        (recur (assoc map (first ks) (first vs))\n\n               (next ks)\n\n               (next vs))\n\n        map)))", "problem": 61, "user": "4fe8e719e4b0547ebccb2430"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4f3976aee4b0e243712b1eea"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "522d3a16e4b0e26240291d50"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "5236cd89e4b0e010857b4e45"}, {"code": "(fn [s1 s2]\n  (apply merge (map hash-map s1 s2)))", "problem": 61, "user": "524ab5f2e4b09eba1c02239d"}, {"code": "#(into {} (map hash-map %1 %2))", "problem": 61, "user": "5210ac52e4b080a8d9b9d63e"}, {"code": "(fn [ks vs] (apply hash-map (flatten (map #(vector % %2) ks vs))))", "problem": 61, "user": "525b0b51e4b0cb4875a45d01"}, {"code": "(fn [a b] (apply hash-map (interleave a b)))", "problem": 61, "user": "5244fa73e4b0d8acf9ed6acb"}, {"code": "(fn myassoc [a b]\n  (loop [h '{} a1 a b1 b]\n    (if (or (= 0 (count a1)) (= 0 (count b1)))\n      h\n      (recur (assoc h (first a1) (first b1)) (rest a1) (rest b1)))))", "problem": 61, "user": "51622fb8e4b009fba0926e3f"}, {"code": "(fn [s1 s2]\n\t(into {} (map (fn [x y] [x y]) s1 s2)\n    )\n)", "problem": 61, "user": "525ba7bbe4b0cb4875a45d28"}, {"code": "(fn\n  [c1 c2]\n  (into {} (map #(assoc {} %1 %2) c1 c2)))", "problem": 61, "user": "525fffb8e4b03e8d9a4a702b"}, {"code": "(fn [ks vs] (apply hash-map (interleave ks vs)))", "problem": 61, "user": "525f51bde4b0cb4875a45dc8"}, {"code": "(fn [& args](apply merge (apply map (fn [_1 _2] (hash-map _1 _2)) args)))", "problem": 61, "user": "5220909fe4b0e6a83c89259f"}, {"code": "(fn [xs ys] (into {} (map vector xs ys)))", "problem": 61, "user": "52618ea3e4b03e8d9a4a7064"}, {"code": "(fn [keys vals] (apply hash-map (interleave keys vals)))", "problem": 61, "user": "4ec6297b535d6d7199dd36c4"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "5235a902e4b0a643f2dcb750"}, {"code": "(fn [c1 c2]\n  ((fn [ret c1 c2]\n     (if (or (empty? c1) (empty? c2))\n       ret\n       (recur (assoc ret (first c1) (first c2)) (rest c1) (rest c2))))\n   {} c1 c2))", "problem": 61, "user": "521392bce4b0d32679a5065e"}, {"code": "(fn [x y] (apply hash-map (interleave x y)))", "problem": 61, "user": "525bcae9e4b0cb4875a45d30"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "525ed5f4e4b0cb4875a45db8"}, {"code": "(fn tomap [ks vs]\n  (cond\n   (empty? ks) {}\n   (empty? vs) {}\n   :else (conj (tomap (rest ks) (rest vs)) {(first ks) (first vs)})\n   )\n  )", "problem": 61, "user": "5252cbe7e4b0541d1855b8d2"}, {"code": "(fn [x y] (reduce merge (map #(hash-map (first %) (second %)) (partition 2 (interleave x y)))))", "problem": 61, "user": "523eb110e4b057c4b7cd0a67"}, {"code": "(fn [a b]\n   (apply hash-map (interleave a b)))", "problem": 61, "user": "52090567e4b0e152394d76ed"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "52655949e4b03e8d9a4a710b"}, {"code": "(fn mapita [k v] (if (or (empty? k) (empty? v)) {}\n                     (assoc (mapita (rest k) (rest v)) (first k) (first v))))", "problem": 61, "user": "52474ec2e4b05ef8e38e6361"}, {"code": "(fn [c1 c2] (reduce merge {} (map #(assoc {} %1 %2) c1 c2)))", "problem": 61, "user": "524c7fcfe4b0752c4cb68cbd"}, {"code": "(fn [ka va] (reduce (fn [c [k v]] (assoc c k v)) {} (map vector ka va)))", "problem": 61, "user": "51f2851fe4b0210f90e7454b"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "50fe9d60e4b03cd852b4e84f"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "514f0723e4b019235f6c0599"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "52112be7e4b07aea8afc4f68"}, {"code": "#(apply array-map (interleave %1 %2))", "problem": 61, "user": "52667ecfe4b03e8d9a4a713e"}, {"code": "(fn [ks vs]\n  (apply hash-map (interleave ks vs)))", "problem": 61, "user": "5261aebbe4b03e8d9a4a7066"}, {"code": "#(apply array-map (interleave %  %2))", "problem": 61, "user": "51ca82e9e4b08b1cbd0d9488"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "525a8875e4b0cb4875a45cf6"}, {"code": "(fn [k v] (reduce #(conj %1 %2) {}  (reverse (map #(identity  {%1 %2}) k v))))", "problem": 61, "user": "52593207e4b0cb4875a45cd3"}, {"code": "#(apply merge (map hash-map % %2))", "problem": 61, "user": "526c2340e4b03e8d9a4a7281"}, {"code": "(fn [keys vals]\n  (reduce conj {} (map vector keys vals)))", "problem": 61, "user": "5268eb68e4b03e8d9a4a71c6"}, {"code": "#(apply hash-map (mapcat vector %1 %2))", "problem": 61, "user": "52628bb0e4b03e8d9a4a7089"}, {"code": "#(into {} (map hash-map %1 %2))", "problem": 61, "user": "524f213be4b0541d1855b7ff"}, {"code": "(fn myZipMap\n  [mapKeys mapVals]\n    (apply merge (map #(assoc {} %1 %2) mapKeys mapVals)))", "problem": 61, "user": "509a25b7e4b0efbae1fbc0a8"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "50cf21dee4b0e61f11ddcd8b"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4f944f60e4b0dcca54ed6cc2"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "5012da69e4b0c8732600222d"}, {"code": "(fn crtMap [keysv valsv]\n  (reduce\n    #(assoc %1 (first %2) (second %2))\n    {}\n    (map\n      #(vector %1 %2)\n      keysv\n      valsv)))", "problem": 61, "user": "526ee63de4b03e8d9a4a733f"}, {"code": "(fn [ks vs] (let [n (apply min [(count ks) (count vs)])] (->> (range 0 n) (map #(list (nth ks %) (nth vs %))) (apply concat) (apply hash-map))))", "problem": 61, "user": "509e62a8e4b08df8156e9e2e"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "526439a4e4b03e8d9a4a70cc"}, {"code": "#(reduce merge(map \n (fn [x] (hash-map (first x) (second x))) \n     (partition 2 (interleave % %2))))", "problem": 61, "user": "5260341ee4b03e8d9a4a7034"}, {"code": "(fn [k v]\n  (apply merge (map hash-map k v)))", "problem": 61, "user": "526f9715e4b03e8d9a4a7372"}, {"code": "(fn zm [ks vs]\n  (reduce conj (map #(assoc {} %1 %2) ks vs)))", "problem": 61, "user": "511aa2a4e4b0c87c59c9670a"}, {"code": "(fn conm\n  \t([lst1 lst2] (conm {} lst1 lst2))\n  ([m lst1 lst2] (if (or (empty? lst1) (empty? lst2)) m (conm (conj m [(first lst1) (first lst2)]) (next lst1) (next lst2))))\n  )", "problem": 61, "user": "5272669de4b03e8d9a4a742e"}, {"code": "(fn [keys vals]\n    (loop [map {}\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map)))", "problem": 61, "user": "5272d4b7e4b03e8d9a4a7453"}, {"code": "(fn zip\n  [a b]\n  (let [c (partition 2 (interleave a b))]\n    (reduce #(assoc % (first %2) (last %2)) {} c)))", "problem": 61, "user": "5245d29ae4b09dbe66b56174"}, {"code": "(fn [col1 col2] (apply hash-map (mapcat #(list %1 %2) col1 col2)))", "problem": 61, "user": "52727d52e4b03e8d9a4a7439"}, {"code": "#(into {} \n      (vec \n       (map vec (partition 2 \n                           (interleave % %2)\n                           )\n            )\n       )\n       )", "problem": 61, "user": "5269c150e4b03e8d9a4a71f8"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "525a643be4b0cb4875a45cf1"}, {"code": "#(into {} (map (fn [a b] {a b})  %1 %2))", "problem": 61, "user": "52736ca1e4b03e8d9a4a747e"}, {"code": "(fn zippy [keys vals]\n    (loop [map {}\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map)))", "problem": 61, "user": "526397f1e4b03e8d9a4a70b6"}, {"code": "(fn [ks-in vs-in]\n  (loop [result {} ks ks-in vs vs-in]\n    (if (or (nil? ks) (nil? vs))\n      result\n      (recur (assoc result (first ks) (first vs)) (next ks) (next vs))\n    )\n  )\n)", "problem": 61, "user": "526dd90de4b03e8d9a4a72fe"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "52746701e4b03e8d9a4a74a2"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "512318b6e4b03b44edbed433"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "522f483ce4b032bbe342415a"}, {"code": "(fn map-construction [coll1 coll2]\n  (loop [result {} \n         coll1 coll1\n         coll2 coll2]\n    (if(or(empty? coll1)\n          (empty? coll2))\n      result\n      (let[f1 (first coll1)\n           f2 (first coll2)]\n        (recur\n          (assoc result f1 f2)\n          (rest coll1)\n          (rest coll2))))))", "problem": 61, "user": "5273562ae4b03e8d9a4a7479"}, {"code": "#(apply assoc {}\n         (interleave %1 %2))", "problem": 61, "user": "5274eb56e4b03e8d9a4a74bb"}, {"code": "(fn a [c1 c2] (merge {(first c1) (first c2)} (if-not(or(= 1 (count c1))(= 1 (count c2)))(a (next c1)(next c2)))))", "problem": 61, "user": "527a8eb7e4b03e8d9a4a755f"}, {"code": "(fn [x y] (apply hash-map (interleave x y)))", "problem": 61, "user": "527818f7e4b03e8d9a4a7519"}, {"code": "(fn test1 [inseq1 inseq2] (loop [x inseq1 y inseq2 z {}] (if \n                                    (or (= (count x) 0)(= (count y) 0)) z \n                                    (recur (rest x) (rest y) (assoc z (first x) (first y))))))", "problem": 61, "user": "52711255e4b03e8d9a4a73d7"}, {"code": "#(reduce merge (map array-map %1 %2))", "problem": 61, "user": "51f4d46ee4b0fca5e8b48243"}, {"code": "(fn f [ks vs]                                                                   \n  (if (not (or (empty? ks) (empty? vs)))                                        \n    (conj {(first ks) (first vs)} (f (rest ks) (rest vs))) ) )", "problem": 61, "user": "4df20dda535d08e6dec9fe23"}, {"code": "(fn [ks vs] (reduce (fn [m [k v]] (assoc m k v)) {} (partition 2(interleave ks vs))))", "problem": 61, "user": "521d709ae4b050d5da0427ef"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "527675cbe4b03e8d9a4a74e2"}, {"code": "(fn [a b] (apply assoc {} (interleave a b)))", "problem": 61, "user": "525c575be4b0cb4875a45d38"}, {"code": "#(into {} (map (fn [a b] [a b]) % %2))", "problem": 61, "user": "51e38568e4b0c611d6113e43"}, {"code": "#(apply merge (map hash-map % %2))", "problem": 61, "user": "527b856fe4b03e8d9a4a758d"}, {"code": "(fn [ks vs] (into {} (map vector ks vs)))", "problem": 61, "user": "5272ccf1e4b03e8d9a4a7450"}, {"code": "(fn test [x y]\n  (when\n    (and (not (empty? x)) (not (empty? y)))\n    (merge \n      (test (next x) (next y)) \t      \n      (array-map (first x) (first y))\n\t)\n  )\n)", "problem": 61, "user": "52810225e4b0757a1b171418"}, {"code": "(fn [x y] (apply hash-map (apply concat (map #(list % %2) x y))))", "problem": 61, "user": "50be9b4ae4b00fb48fed2ef6"}, {"code": "(fn [K V]\n  (loop [k K, v V, result {}]\n    (if (and (seq k) (seq v))\n      (recur (rest k) (rest v) (assoc result (first k) (first v)))\n      result)))", "problem": 61, "user": "4dcc2435535d5973398f9290"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "519ef784e4b087743fad2198"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4f80db02e4b033992c121bf9"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "52851da0e4b0239c8a67adea"}, {"code": "(fn \n  [keys vals]\n    (loop [map {}\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map)))", "problem": 61, "user": "52767b2ce4b03e8d9a4a74e4"}, {"code": "(fn [coll-1 coll-2] (into {} (map #(vector %1 %2) coll-1 coll-2)))", "problem": 61, "user": "4f9510b5e4b0dcca54ed6cc7"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "52890634e4b0239c8a67ae5e"}, {"code": "(fn [ks vs]\n  (apply hash-map (interleave ks vs)))", "problem": 61, "user": "51269362e4b083bb8f88cf09"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "527ba29de4b03e8d9a4a7594"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "51a584c7e4b051b01d55f44e"}, {"code": "(fn f [a b]\n  (if (or (empty? a) (empty? b))\n    {}\n    (assoc (f (rest a) (rest b)) (first a) (first b))))", "problem": 61, "user": "4e8dd6cb535d65386fec213b"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "527dc2aee4b0757a1b17138d"}, {"code": "(fn create-maps [keys vals]\n  (into {} (map vector keys vals)))", "problem": 61, "user": "4f35b2ace4b0e243712b1ec5"}, {"code": "(fn zip [a b]  (if-not (or (empty? a) (empty? b)) \n                 (merge \n                  {(first a) (first b)} \n                  (zip (rest a) (rest b)))))", "problem": 61, "user": "526a3412e4b03e8d9a4a721e"}, {"code": "#(apply array-map (interleave %1 %2))", "problem": 61, "user": "4ea5ba92535d7eef308072d9"}, {"code": "(fn [keys vals] (apply hash-map (interleave keys vals)))", "problem": 61, "user": "528a791ae4b0239c8a67ae77"}, {"code": "(fn [ks vs]\n  (into {} (map-indexed (fn [idx item] [item (nth vs idx)]) (take (count vs) ks))))", "problem": 61, "user": "51ef31dfe4b0871fa145d9a0"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "528bba38e4b0239c8a67aea9"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "528d1094e4b0239c8a67aebe"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "5290257ae4b0239c8a67af03"}, {"code": "#(reduce merge {} (map hash-map %1 %2))", "problem": 61, "user": "528b08efe4b0239c8a67ae8a"}, {"code": "(fn f\n  ([k v] (f k v {}))\n  ([[k & keys] [v & vals] a]\n  (if (and k v)\n    (recur keys vals (assoc a k v))\n    a)))", "problem": 61, "user": "52753740e4b03e8d9a4a74c1"}, {"code": "(fn [x y] (apply hash-map (interleave x y)))", "problem": 61, "user": "528ce039e4b0239c8a67aebc"}, {"code": "(comp (partial apply hash-map) interleave)", "problem": 61, "user": "527236d4e4b03e8d9a4a741f"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "5264301fe4b03e8d9a4a70ca"}, {"code": "#(apply (partial assoc {}) (interleave %1 %2))", "problem": 61, "user": "528e64b7e4b0239c8a67aedd"}, {"code": "(fn [ks vs]\n  (apply merge (mapv #(assoc {} %1 %2) ks vs)))", "problem": 61, "user": "4f3d83b5e4b0e243712b1f69"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "52951156e4b02ebb4ef7501b"}, {"code": "(fn\n  [keys vals]\n  (apply hash-map (interleave keys vals)))", "problem": 61, "user": "5289bba9e4b0239c8a67ae69"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4f3656d1e4b0e243712b1ec9"}, {"code": "#(apply array-map (interleave %1 %2))", "problem": 61, "user": "5267d9bde4b03e8d9a4a7188"}, {"code": "(fn construction [x y] (if (< 0 (min (count x) (count y)))\n                                   (assoc (construction (rest x) (rest y)) (first x) (first y))\n                                 {}))", "problem": 61, "user": "5296aa9be4b02ebb4ef75034"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "5296008fe4b02ebb4ef7502a"}, {"code": "#(apply hash-map (apply concat (map list %1 %2)))", "problem": 61, "user": "50fc48dde4b0d10d794c19f6"}, {"code": "(fn [keys vals & res] \n  (if (or (empty? keys) (empty? vals))\n    res\n    (recur (rest keys) (rest vals) (assoc res (first keys) (first vals)))))", "problem": 61, "user": "51fe9d7ce4b0f1313d468a70"}, {"code": "(fn my-zipmap [keys vals]\n  (loop [k (seq keys)\n         v (seq vals)\n         map {}]\n    (if (and (first k)\n             (first v))\n      (recur (rest k) (rest v) (assoc map (first k) (first v)))\n      map)))", "problem": 61, "user": "4f6e7073e4b07046d9f4efd8"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "51ad244fe4b09397d510977f"}, {"code": "(fn [x y] (into {} (map #(vec [%1 %2]) x y)))", "problem": 61, "user": "52140b53e4b0961f15ac4d7e"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "5281a445e4b0757a1b17143a"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "528e95efe4b0239c8a67aee2"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "527094f0e4b03e8d9a4a73b3"}, {"code": "(fn [keys vals]\n    (loop [map {}\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map)))", "problem": 61, "user": "525b12b1e4b0cb4875a45d04"}, {"code": "(fn mm [ks vs]\n  (if (or (empty? ks) (empty? vs))\n    {}\n    (let [k (first ks)\n          v (first vs)]\n      (conj {k v} (mm (next ks) (next vs))))))", "problem": 61, "user": "50fe2420e4b03cd852b4e84a"}, {"code": "#((fn mkmp [ks vs m]\n  (if (or (empty? ks) (empty? vs))\n    m\n    (assoc (mkmp (rest ks) (rest vs) m) (first ks) (first vs)))) %1 %2 {})", "problem": 61, "user": "529ce629e4b04e0c58e87b6e"}, {"code": "(fn [ks vs]\n  (reduce #(assoc %1 (first %2) (last %2)) {} (map vector ks vs)))", "problem": 61, "user": "527ccaf4e4b0757a1b17136d"}, {"code": "(fn [c1 c2] (apply hash-map (interleave c1 c2)))", "problem": 61, "user": "51c214bce4b0d204dbe2ca1c"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "5273b883e4b03e8d9a4a748f"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "52a1acb2e4b04e0c58e87bdb"}, {"code": "(fn [col1 col2]\n  (reduce \n   (fn [m, e] \n     (assoc m \n       (first e) \n       (second e))) {} (map vector col1 col2)))", "problem": 61, "user": "52a32876e4b04e0c58e87bfb"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4e72187b535d5021c1a8965b"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "528b01a0e4b0239c8a67ae89"}, {"code": "(fn [k v]\n  (into {} (map vector k v)))", "problem": 61, "user": "5294c95fe4b02ebb4ef75013"}, {"code": "(fn\n  [x y]\n  \n  (loop [l1 x l2 y acc {}] \n    (cond \n     \n     (or (empty? l1) (empty? l2))\n     acc\n     \n     :else \n     (recur \n      (rest l1) \n      (rest l2) \n      (assoc acc (first l1) (first l2))))))", "problem": 61, "user": "4e920f44535dbda64a6f6afd"}, {"code": "(fn [k v] \n  (let [kv (map vector k v)]\n    (reduce \n     (fn [x y] (assoc x (first y) (second y)))\n     {}\n     kv)))", "problem": 61, "user": "5226f8e9e4b04e78ff2e199a"}, {"code": "#(apply sorted-map (interleave %1 %2))", "problem": 61, "user": "4ec1619b535dfed6da9c6dab"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "528652fbe4b0239c8a67ae14"}, {"code": "(partial \n #(if (or (empty? %2) (empty? %3)) %1 \n          (recur (assoc %1 (first %2) (first %3)) (rest %2) (rest %3))) {})", "problem": 61, "user": "5273e006e4b03e8d9a4a7495"}, {"code": "(fn g [l1 l2] (if (or (empty? l1) (empty? l2))\n                 \t\t{}\n                 \t\t(conj \n                         {(first l1) (first l2)}\n                         (g (rest l1) (rest l2))\n                         )))", "problem": 61, "user": "4f2004a1535d64f6031464a7"}, {"code": "(fn [a b]\n  (into {} \n        (map vector a b)))", "problem": 61, "user": "520332f7e4b030ee0c5b2714"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "528a3e14e4b0239c8a67ae72"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "51929214e4b08962174cf74c"}, {"code": "(fn a [k v]\n  (apply assoc {} (interleave k v)))", "problem": 61, "user": "525aa499e4b0cb4875a45cf7"}, {"code": "#(loop [hs {}\n        ks %1\n        vs %2]\n   (if (and ks vs)\n     (recur (assoc hs (first ks) (first vs))\n            (next ks)\n            (next vs))\n     hs))", "problem": 61, "user": "5012614ee4b02a085b99dc79"}, {"code": "(comp (partial apply hash-map) interleave)", "problem": 61, "user": "52a503e4e4b0c58976d9abe1"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4f45c72be4b0d56e7bb92b8a"}, {"code": "(fn [list1 list2]\n  (apply hash-map\n    ((fn ziplists [xs ys]\n       (if (or (empty? xs) (empty? ys))\n         (list)\n         (concat (list (first xs) (first ys))\n                 (ziplists (rest xs) (rest ys)))))\n     list1 list2)))", "problem": 61, "user": "529e3a4fe4b04e0c58e87b92"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "50294c28e4b0b33e9bf6fdef"}, {"code": "(fn [ks vs]\n  (reduce conj {} (map vector ks vs)))", "problem": 61, "user": "51a9dbc9e4b04e3dc0c27b1e"}, {"code": "(fn [x y] (apply merge (map hash-map x y)))", "problem": 61, "user": "52a28e1ce4b04e0c58e87bf0"}, {"code": "(fn [ks vs]\n  (into {} (map vector ks vs)))", "problem": 61, "user": "52ab6de1e4b0c58976d9ac78"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "5289f1f4e4b0239c8a67ae6d"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "51a058dae4b0b292b01ee3f3"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "52295917e4b04c906c9c6a6f"}, {"code": "#(into {} (map (fn [a b] [a b]) %1 %2))", "problem": 61, "user": "52afbc69e4b0c58976d9acc0"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "52774dd2e4b03e8d9a4a74ff"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "52a5e784e4b0c58976d9abf3"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "52a62e16e4b0c58976d9abf9"}, {"code": "(fn [k v] (apply merge (map #(hash-map %1 %2) k v)))", "problem": 61, "user": "527c040be4b03e8d9a4a75a7"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4ee8b9c9535d93acb0a66884"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "5298d3f4e4b02ebb4ef75068"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "51937eb3e4b04df54c098022"}, {"code": "#(apply hash-map (mapcat list %1 %2))", "problem": 61, "user": "527ba695e4b03e8d9a4a7596"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "5290ffaee4b0239c8a67af10"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "515896f2e4b059418b97f0a8"}, {"code": "#(apply array-map (interleave %1 %2))", "problem": 61, "user": "52747090e4b03e8d9a4a74a5"}, {"code": "#(apply hash-map (mapcat list %1 %2))", "problem": 61, "user": "524f4256e4b0541d1855b808"}, {"code": "(fn [c1 c2] (into {} (map vector c1 c2)))", "problem": 61, "user": "52b43468e4b0c58976d9ad1b"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "52a88c4de4b0c58976d9ac30"}, {"code": "#(into {} (map (fn [k v] {k v}) % %2))", "problem": 61, "user": "52b5edd1e4b0c58976d9ad3c"}, {"code": "(fn [s1 s2] (reduce conj (map (fn [x y] {x y}) s1 s2)))", "problem": 61, "user": "523b4e91e4b07becd5be21ef"}, {"code": "(fn [coll1 coll2] (loop [x (min (count coll1) (count coll2)) a coll1 b coll2 result {}] (if (== x 0) result (recur (dec x) (rest a) (rest b) (conj  result {(first a) (first b)}) ))))", "problem": 61, "user": "52b60e94e4b0c58976d9ad3e"}, {"code": "#(reduce (fn [m pair] \n          (assoc m (first pair) (second pair))) \n        {} \n        (for [[x y] (partition 2 (interleave %1 %2))] [x y]))", "problem": 61, "user": "529d4f4be4b04e0c58e87b79"}, {"code": "(fn f [x y]\n  (apply hash-map (interleave x y)))", "problem": 61, "user": "52b0323ee4b0c58976d9acc6"}, {"code": "#(apply assoc {} (reverse (interleave %2 %)))", "problem": 61, "user": "4fa38e3fe4b081705acca190"}, {"code": "#(apply hash-map (mapcat list %1 %2))", "problem": 61, "user": "527fd663e4b0757a1b1713de"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "51852961e4b0da5a5be3babb"}, {"code": "(fn [arg1 arg2] (apply assoc {} (interleave arg1 arg2)))", "problem": 61, "user": "52a5d1f3e4b0c58976d9abf1"}, {"code": "(fn [ks vs]\n  (loop [ks ks vs vs d {}]\n    (if (or (empty? ks) (empty? vs))\n      d\n      (recur (rest ks) (rest vs) (assoc d (first ks) (first vs))))))", "problem": 61, "user": "52b8af15e4b07a9af57922b5"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "52aad30ce4b0c58976d9ac6d"}, {"code": "(fn [ks vs]\n  (apply merge (map #(hash-map %1 %2) ks vs)))", "problem": 61, "user": "52a55adee4b0c58976d9abe7"}, {"code": "#(apply hash-map (mapcat vector %1 %2))", "problem": 61, "user": "52b65f26e4b0c58976d9ad43"}, {"code": "(fn [ks vs]\n  (loop [k ks v vs m {}]\n    (if (or (= (count k) 0) (= (count v) 0))\n      m\n      (recur (drop 1 k) (drop 1 v) (assoc m (first k) (first v))))))", "problem": 61, "user": "52b94f15e4b07a9af57922ba"}, {"code": "#(into {} (map hash-map %1 %2))", "problem": 61, "user": "52ba2af3e4b07a9af57922cc"}, {"code": "#(apply array-map (interleave %1 %2))", "problem": 61, "user": "52ba43d0e4b07a9af57922cd"}, {"code": "(fn [ks vs] (apply hash-map (interleave ks vs)))", "problem": 61, "user": "4fc3a72ae4b081705acca342"}, {"code": "(fn[xs ys](apply hash-map (interleave xs ys)))", "problem": 61, "user": "52a1edd6e4b04e0c58e87be4"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "52a9154ee4b0c58976d9ac3b"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "52b42d7ee4b0c58976d9ad19"}, {"code": "(fn [a b] (apply hash-map (flatten (map list a b))))", "problem": 61, "user": "52bb27fee4b07a9af57922df"}, {"code": "#(loop [l1 %1 l2 %2 acc {}]\n   (if (or (empty? l1) (empty? l2))\n     acc\n     (recur (rest l1) (rest l2) (conj acc {(first l1) (first l2)}))))", "problem": 61, "user": "52b405e1e4b0c58976d9ad15"}, {"code": "(fn [x y] (apply hash-map (interleave x y)))", "problem": 61, "user": "526fce6fe4b03e8d9a4a7383"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "52ab61f5e4b0c58976d9ac75"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "52b80827e4b0c58976d9ad56"}, {"code": "(fn zm [x,y] (into {} (map vector x y)))", "problem": 61, "user": "52b7a904e4b0c58976d9ad51"}, {"code": "(fn [s t] (into {} (map #(vector %1 %2) s t)))", "problem": 61, "user": "52470d42e4b05ef8e38e6350"}, {"code": "(fn [xs1 xs2] (into {} (map #(hash-map %1 %2) xs1 xs2)))", "problem": 61, "user": "52baea85e4b07a9af57922d9"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "52bf8e35e4b07a9af579233a"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "52b577c9e4b0c58976d9ad39"}, {"code": "#(apply assoc {}\n        (interleave %1 %2))", "problem": 61, "user": "4fda108ee4b05e33b9224f46"}, {"code": "#(apply hash-map (mapcat vector %1 %2))", "problem": 61, "user": "5294e44de4b02ebb4ef75016"}, {"code": "(fn zm [ks vs]\n  (when-let [ks (seq ks)]\n    (when-let [vs (seq vs)]\n      (into {(first ks) (first vs)} (zm (rest ks) (rest vs))))))", "problem": 61, "user": "527cd633e4b0757a1b17136f"}, {"code": "(fn [coll1 coll2]\n  (into {} (map vector coll1 coll2)))", "problem": 61, "user": "52976262e4b02ebb4ef75041"}, {"code": "(comp (partial apply hash-map) interleave)", "problem": 61, "user": "4f3a979de4b0e243712b1f10"}, {"code": "(fn [ks vs]\n  (let [kvs (interleave ks vs)]\n    (if (empty? kvs) {} (apply assoc {} kvs))))", "problem": 61, "user": "52bc6f5ee4b07a9af57922f6"}, {"code": "(fn make-map[a-seq b-seq]\n \t(apply hash-map (mapcat #(list %1 %2) a-seq b-seq))\n )", "problem": 61, "user": "52763696e4b03e8d9a4a74d7"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "50772e6ae4b0fc74642bff5d"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "52bdb689e4b07a9af5792306"}, {"code": "(fn [ks vs] (apply hash-map (interleave ks vs)))", "problem": 61, "user": "52be58d7e4b07a9af579231d"}, {"code": "(fn zippy [keys vals]\n  (cond (empty? keys) {}\n        (empty? vals) {}\n        :else (assoc (zippy (rest keys) (rest vals)) (first keys) (first vals))))", "problem": 61, "user": "52aa4a67e4b0c58976d9ac62"}, {"code": "(fn [s1 s2 &{:keys [o], :or {o (hash-map)}}] (if-not (or (empty? s1) (empty? s2)) (recur (rest s1) (rest s2) {:o (conj o {(first s1) (first s2)})}) o))", "problem": 61, "user": "52bdf6bde4b07a9af579230d"}, {"code": "(fn [a b] (apply assoc {} (interleave a b)))", "problem": 61, "user": "52afa8a1e4b0c58976d9acbe"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "52b02329e4b0c58976d9acc5"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "52c4fe42e4b0c2d177d620e9"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "52c25645e4b07a9af579237d"}, {"code": "#(into {} ( map vector %1 %2))", "problem": 61, "user": "52aa16d1e4b0c58976d9ac5a"}, {"code": "(fn [a b]\n  (into {} (for [x (range (min (count b) (count a)))]\n    (vector (nth a x) (nth b x)))))", "problem": 61, "user": "52c52ef2e4b0c2d177d620ef"}, {"code": "(fn map-construction [x y]\n  (first (reduce \n   \n   (fn [[a y] xi]\n     (let [fy (first y)]\n           [(if-not (nil? fy)(assoc a xi fy) a) , (rest y)]))\n\n   [{},y]\n   x)))", "problem": 61, "user": "515bbcd9e4b0388ca8ca1521"}, {"code": "(fn [x y]\n  (loop [my-map {}\n         ks x\n         vs y]\n    (cond\n     (or (empty? ks) (empty? vs)) my-map\n     :else (recur (assoc my-map (first ks) (first vs)) (rest ks) (rest vs))\n     )\n    )\n  )", "problem": 61, "user": "51a2569ee4b00957e520db7d"}, {"code": "(fn [k v] (loop [m {} ks (seq k) vs (seq v)] (if (and ks vs) (recur (assoc m (first ks) (first vs))(next ks)(next vs))m)))", "problem": 61, "user": "51eab308e4b0f1f103a0d150"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "529d292fe4b04e0c58e87b74"}, {"code": "(fn solution [v1 v2]\n  (if (or (empty? v1) (empty? v2))\n    {}\n    (assoc (solution (rest v1) (rest v2)) (first v1) (first v2))\n  )\n)", "problem": 61, "user": "52b49aebe4b0c58976d9ad2b"}, {"code": "#(into {} (map hash-map % %2))", "problem": 61, "user": "4ea365e2535d7eef308072c5"}, {"code": "(fn [k v] \n   (loop [m {}\n          ks (seq k)\n          vs (seq v)]\n     (if (and ks vs)\n       (recur (assoc m (first ks) (first vs))\n              (next ks)\n              (next vs))\n       m)))", "problem": 61, "user": "5215661be4b02f6d8ea676c7"}, {"code": "#(apply assoc {} \n         (interleave %1 %2))", "problem": 61, "user": "50dcb2f4e4b02e6ac9592c91"}, {"code": "(fn [ks vs] (into {} (map (fn [k v] {k v}) ks vs)))", "problem": 61, "user": "52ab51c4e4b0c58976d9ac73"}, {"code": "#(into {} (map hash-map %1 %2))", "problem": 61, "user": "52c3a0f4e4b0c2d177d620c6"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "52c00263e4b07a9af579233f"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "52c580c2e4b0c2d177d620f5"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "523089f8e4b0035e815da388"}, {"code": "#(apply hash-map (mapcat list % %2))", "problem": 61, "user": "52c6a0abe4b0c2d177d62111"}, {"code": "(fn \n  [keys vals]\n    (loop [map {}\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map)))", "problem": 61, "user": "52bf936ee4b07a9af579233b"}, {"code": "(fn [coll1 coll2] ( reduce conj (map (fn[a b] {a b}) coll1 coll2)))", "problem": 61, "user": "52c58440e4b0c2d177d620f7"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "508f97c0e4b0ea685a20f768"}, {"code": "#(into {} (map (fn [k v] (hash-map k v)) %1 %2))", "problem": 61, "user": "4f99ae4ae4b0dcca54ed6d00"}, {"code": "(fn [x y] (into {} (map #(identity {(nth x %) (nth y %)}) (range (min (count x) (count y))))))", "problem": 61, "user": "52c1bd29e4b07a9af579236a"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "52cc09c1e4b07d0d72b27356"}, {"code": "#(apply merge\n     (map hash-map % %2))", "problem": 61, "user": "52c73194e4b0c2d177d6211e"}, {"code": "(fn [keys, values]\n  (reduce merge (map (fn [a b] {a b}) keys values))\n  )", "problem": 61, "user": "4f03641a535dcb61093f6a9b"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "52cca65be4b07d0d72b2736b"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "52cc582ae4b07d0d72b27362"}, {"code": "#(apply hash-map (apply concat (partition 2 (interleave %1 %2))))", "problem": 61, "user": "52cc85abe4b07d0d72b27367"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "52c5c1c8e4b0c2d177d620fc"}, {"code": "(fn m [c1 c2]\n  (apply merge (apply map hash-map [c1 c2])))", "problem": 61, "user": "52828298e4b0757a1b17145b"}, {"code": "(comp #(apply hash-map %) interleave)", "problem": 61, "user": "505345d9e4b0517ede0d0a06"}, {"code": "(fn [k v] (reduce #(assoc %1 (first %2) (last %2)) {} (map list k v)))", "problem": 61, "user": "52caeb25e4b071a8d36bd3e7"}, {"code": "#(apply conj {} (map vector %1 %2))", "problem": 61, "user": "52b453b0e4b0c58976d9ad21"}, {"code": "(fn\n  map-construction\n  [vec1 vec2]\n  (reduce\n    merge\n   (map (fn [x y] {x y}) vec1 vec2) \n   )\n  )", "problem": 61, "user": "5094057fe4b097f48cc38593"}, {"code": "(fn [ks vs] (into {} (map vector ks vs)))", "problem": 61, "user": "52d0902ee4b07d0d72b273bd"}, {"code": "(fn[x y] (apply assoc {} (flatten (partition 2 (interleave x y)))))", "problem": 61, "user": "529952a4e4b02ebb4ef75081"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "4eb7b049535d7eef30807377"}, {"code": "(fn foo[[k & ks] [v & vs]]\n  (if (and k v)\n    (conj {k v} (foo ks vs))))", "problem": 61, "user": "506755b3e4b03d366d7cb2bc"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "52bbd09ee4b07a9af57922ee"}, {"code": "(fn [k v] (reduce #(conj %1 %2) {} (map #(vector %1 %2) k v)))", "problem": 61, "user": "52c8758be4b0c2d177d62135"}, {"code": "#(loop [keylist %1, vallist %2, m {}]\n   (if (or (empty? keylist) (empty? vallist))\n     m\n     (recur (rest keylist) (rest vallist) (conj m [(first keylist) (first vallist)]))))", "problem": 61, "user": "52d340ebe4b099d49816f0c1"}, {"code": "(fn [ks vs] (apply hash-map (interleave ks vs)))", "problem": 61, "user": "52c1f404e4b07a9af5792370"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "52ce8648e4b07d0d72b27390"}, {"code": "(fn mc [ks, vs] \n  (into {} \n        (for [k ks\n              :let [ki (.indexOf ks k)] \n              :while (contains? vs ki)] (conj {} {k (nth vs ki)}))\n ))", "problem": 61, "user": "52cf084ce4b07d0d72b27399"}, {"code": "(fn [keys vals]\n  (into {} (map #(vector %1 %2) keys vals)))", "problem": 61, "user": "5271605ae4b03e8d9a4a73ed"}, {"code": "(fn make-map [ks vs]\n  (reduce #(conj %1 %2) {} (map #(vector %1 %2) ks vs))\n  )", "problem": 61, "user": "529a73bde4b02ebb4ef75096"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "4ed45563535d10e5ff6f52c9"}, {"code": "(fn [a b] (reduce merge (map (fn [r t] {r t}) a b) ) )", "problem": 61, "user": "525cc137e4b0cb4875a45d46"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "52cdec6ce4b07d0d72b27383"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "52cdec62e4b07d0d72b27382"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "51a97f7ae4b08d8ec191b827"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4f77b68de4b0fbe0118ec581"}, {"code": "(fn [ks xs] (apply hash-map (mapcat vector ks xs)))", "problem": 61, "user": "4f8c6bf6e4b02e764a0a519b"}, {"code": "(fn [ks vs] (apply hash-map (flatten (map list ks vs))))", "problem": 61, "user": "52d3f666e4b09f7907dd1327"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "51b41150e4b0f094dd986fac"}, {"code": "#(apply merge (map hash-map % %2))", "problem": 61, "user": "52d02380e4b07d0d72b273b7"}, {"code": "(fn myasoc[xs ys]\n  (if (or (empty? xs) (empty? ys))\n    {}\n    (assoc (myasoc (rest xs) (rest ys)) (first xs) (first ys))))", "problem": 61, "user": "523f1245e4b01c266ffa7f95"}, {"code": "#(apply merge (map hash-map % %2))", "problem": 61, "user": "52d7f7efe4b09f7907dd1380"}, {"code": "#(loop [x %1 y %2 result {}] (if (or (empty? x) (empty? y)) result (recur (rest x) (rest y) (conj result (hash-map (first x) (first y))))))", "problem": 61, "user": "52d4acc8e4b09f7907dd1333"}, {"code": "#(apply merge (map (partial assoc {}) %1 %2))", "problem": 61, "user": "5256627ce4b0541d1855ba1a"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "52d469c8e4b09f7907dd1330"}, {"code": "(fn [ks vs]\n  (reduce merge \n     (map #(hash-map %1 %2) ks vs)))", "problem": 61, "user": "52a8ca0fe4b0c58976d9ac36"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "52cdb7efe4b07d0d72b2737c"}, {"code": "(fn my-zipmap [keys vals]\n  (loop [my-map {}\n         my-keys keys\n         my-vals vals]\n    (if (and (seq my-keys) (seq my-vals))\n      (recur (assoc my-map (first my-keys) (first my-vals))\n             (rest my-keys)\n             (rest my-vals))\n      my-map)))", "problem": 61, "user": "52b35a6ee4b0c58976d9ad07"}, {"code": "(fn f [k v]\n  (loop [ck (first k)\n         nk (next k)\n         cv (first v)\n         nv (next v)\n         res {}]\n    (if (or (nil? ck) (nil? cv))\n      res\n      (recur (first nk) (next nk) (first nv) (next nv) (assoc res ck cv)))))", "problem": 61, "user": "52d7b0ade4b09f7907dd137c"}, {"code": "(fn\n  [keys vals]\n  (loop [keys keys\n         vals vals\n         map {}]\n        (if (or (empty? keys) (empty? vals))\n            map\n            (recur (rest keys)\n                   (rest vals)\n                   (assoc map (first keys) (first vals))))))", "problem": 61, "user": "52561be5e4b0541d1855ba08"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "52d10680e4b07d0d72b273c3"}, {"code": "#(apply hash-map (reduce concat (map vector %1 %2)))", "problem": 61, "user": "5238ca2de4b0d705d026eef6"}, {"code": "(fn [k v] (apply hash-map (flatten (map vector k v))))", "problem": 61, "user": "5195b8cce4b04c0af7ff3c08"}, {"code": "(fn [x y] (reduce conj (map #(assoc {} %1 %2) x y)))", "problem": 61, "user": "52ce5056e4b07d0d72b2738f"}, {"code": "(fn [k v]\n  (apply hash-map (interleave k v))\n  )", "problem": 61, "user": "5204f2b1e4b0bf4f1882c7f5"}, {"code": "#(apply hash-map (mapcat list %1 %2))", "problem": 61, "user": "52df232fe4b09f7907dd13fc"}, {"code": "(fn m [l1 l2]\n  (if (and (> (count l1) 0) (> (count l2) 0))\n    (conj (m (rest l1) (rest l2)) (vector (first l1) (first l2)))\n    {}\n    )\n  )", "problem": 61, "user": "52d92f13e4b09f7907dd13a2"}, {"code": "(fn [f s] (into {} (map vector f s)))", "problem": 61, "user": "51e3a549e4b0c611d6113e47"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "52e48632e4b09f7907dd1450"}, {"code": "(fn myzipmap [a b]\n  (if (or (= 0 (count a)) (= 0 (count b)))\n    {}\n    (conj {(first a) (first b)} (myzipmap (rest a) (rest b)))))", "problem": 61, "user": "52c8a8b9e4b0c2d177d62139"}, {"code": "(fn my-zipmap\n  [keys values]\n  (loop [[k & ks] keys\n         [v & vs] values\n         acc {}]\n    (if (and k v) (recur ks vs (assoc acc k v)) acc)))", "problem": 61, "user": "52dd6cc8e4b09f7907dd13e2"}, {"code": "#(apply hash-map(interleave % %2))", "problem": 61, "user": "5224cf82e4b01819a2de42ef"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "52dad8bde4b09f7907dd13be"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "51f2a491e4b0210f90e74553"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "52d6a9c2e4b09f7907dd1365"}, {"code": "#(apply merge (map hash-map % %2))", "problem": 61, "user": "52d809bde4b09f7907dd1384"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "52a23af1e4b04e0c58e87beb"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "52e3912ee4b09f7907dd1446"}, {"code": "(fn [coll1 coll2]\n  (loop [c1 (seq coll1)\n         c2 (seq coll2)\n         result {}]\n    (if (or (empty? c1)\n            (empty? c2))\n      result\n      (recur \n        (next c1)\n        (next c2)\n        (assoc result (first c1) (first c2))))))", "problem": 61, "user": "52c672e2e4b0c2d177d6210e"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "52c4af71e4b0c2d177d620e1"}, {"code": "#(into {} (map vec (partition 2 (interleave %1 %2))))", "problem": 61, "user": "52c1ede2e4b07a9af579236d"}, {"code": "#(apply assoc {}\n       (interleave %1 %2))", "problem": 61, "user": "52e59ca5e4b09f7907dd1464"}, {"code": "#(apply assoc {} (mapcat vector %1 %2))", "problem": 61, "user": "52d66ca0e4b09f7907dd135c"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "52e0e646e4b09f7907dd1416"}, {"code": "#(apply merge (map hash-map %1 %2))", "problem": 61, "user": "52eba5fee4b0705949c44442"}, {"code": "(fn [keys values]\n    (loop [keys keys values values result {}]\n      (if (and (seq keys) (seq values))\n        (recur\n         (rest keys)\n         (rest values)\n         (conj result [(first keys) (first values)]))\n        result\n        )))", "problem": 61, "user": "52a7634ae4b0c58976d9ac16"}, {"code": "(fn [ks vs] (into {} (map vector ks vs)))", "problem": 61, "user": "52d83c2ce4b09f7907dd138d"}, {"code": "(fn [kk vv]\n  (apply merge (map hash-map kk vv)))", "problem": 61, "user": "525d490ae4b0cb4875a45d70"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "52dc2bc8e4b09f7907dd13ca"}, {"code": "(fn [x y]\n          (let [f (fn ff [x y d]\n                    (if (or (empty? x) (empty? y)) d\n                        (ff (rest x) (rest y) (into d {(first x) (first y)})))\n                    )] (f x y {})))", "problem": 61, "user": "52c7f036e4b0c2d177d62126"}, {"code": "(fn[x y]( into {} (map vector x y)  ))", "problem": 61, "user": "52e807b3e4b09f7907dd1490"}, {"code": "#(apply merge (map hash-map %1 %2))", "problem": 61, "user": "52e75667e4b09f7907dd1485"}, {"code": "(fn [xs ys] (apply merge (map #(hash-map %1 %2) xs ys)))", "problem": 61, "user": "52606318e4b03e8d9a4a7036"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "52cf5450e4b07d0d72b273a4"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4fb99483e4b081705acca2da"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "52e276d9e4b09f7907dd1436"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "52e68e61e4b09f7907dd1479"}, {"code": "#(apply conj (map hash-map %1 %2))", "problem": 61, "user": "52efd3d9e4b05e3f0be25ed4"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4ef9c8f9535dced4c769f26b"}, {"code": "(fn [k v]\n  (apply hash-map (interleave k v)))", "problem": 61, "user": "52d00832e4b07d0d72b273b4"}, {"code": "(fn mapconstruct [keys vals]\n  (if (or (empty? keys) (empty? vals))\n    (hash-map)\n    (assoc (mapconstruct (rest keys) (rest vals))\n           (first keys) (first vals))))", "problem": 61, "user": "52d6889ae4b09f7907dd1361"}, {"code": "(fn [k v]\n      (loop [map {}\n             ks (seq k)\n             vs (seq v)]\n        (if (and ks vs)\n          (recur (assoc map (first ks) (first vs))\n                 (next ks)\n                 (next vs))\n          map)))", "problem": 61, "user": "51ea4e35e4b0f1f103a0d148"}, {"code": "(fn [keys vals]\n  (into {} (map vector keys vals)))", "problem": 61, "user": "500d3160e4b05f7c30cfa6a1"}, {"code": "(comp (partial apply hash-map) interleave)", "problem": 61, "user": "50e8cac5e4b0ebbe794eb7ef"}, {"code": "(fn [l0 l1]\n  (apply array-map  (interleave l0 l1)))", "problem": 61, "user": "4df9c598535d04ed9115e77a"}, {"code": "(fn [coll1 coll2] (into {} (map vector coll1 coll2)))", "problem": 61, "user": "52d9aaa1e4b09f7907dd13ae"}, {"code": "(fn [k v] (apply hash-map (vec (interleave k v))))", "problem": 61, "user": "50c4ff23e4b0210b849018b8"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "52e3e6a8e4b09f7907dd1448"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "52a5a8ebe4b0c58976d9abed"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "52d7a930e4b09f7907dd1379"}, {"code": "(fn [x y] \n  (reduce \n   #(assoc %1 (first %2) (second %2)) \n   {} \n   (partition 2 (interleave x y))))", "problem": 61, "user": "50f53694e4b057d4c52de881"}, {"code": "#(apply hash-map (mapcat vector %1 %2))", "problem": 61, "user": "4ff78679e4b0678c553fc392"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "52bdd135e4b07a9af579230a"}, {"code": "(fn [ks vs] (apply assoc {} (interleave ks vs)))", "problem": 61, "user": "52bf0116e4b07a9af5792328"}, {"code": "(fn [ks vs] (apply merge (map hash-map ks vs)))", "problem": 61, "user": "522404d8e4b01819a2de42c0"}, {"code": "(fn [idxs values]\n  (into {} (map (fn [x y] [x y]) idxs values)))", "problem": 61, "user": "51ab4082e4b04e3dc0c27b31"}, {"code": "(fn myzip [ks vs]\n  (reduce merge (map #(hash-map %1 %2) ks vs)))", "problem": 61, "user": "52f07ccee4b05e3f0be25edf"}, {"code": "#(apply array-map (interleave %1 %2))", "problem": 61, "user": "50c2fbebe4b00e537d00253c"}, {"code": "(fn\n  [xs ys]\n  (apply assoc {} (interleave xs ys)))", "problem": 61, "user": "52c58561e4b0c2d177d620f8"}, {"code": "(fn [& c] (into {} (apply map #(hash-map %1 %2) c)))", "problem": 61, "user": "52f1bc81e4b05e3f0be25eef"}, {"code": "(fn [keys vals]\n  (loop [map {}\n         ks (seq keys)\n         vs (seq vals)]\n    (if (and ks vs)\n      (recur (assoc map (first ks) (first vs))\n             (next ks)\n             (next vs))\n      map)))", "problem": 61, "user": "517e12e3e4b0fcc7c5d37d3c"}, {"code": "(fn my-zipmap [ks vs]\n   (letfn [(cycle [& cs]\n             (let [seqs (map seq cs)]\n               (lazy-seq\n                (when (every? identity seqs)\n                  (concat (map first seqs) (apply cycle (map rest seqs)))))))]\n      (apply hash-map (cycle ks vs))))", "problem": 61, "user": "52f8f4d1e4b047fd55836fde"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "529dfc6de4b04e0c58e87b8a"}, {"code": "(fn [x y] (apply hash-map (interleave x y)))", "problem": 61, "user": "50cf94bde4b0abc485cb9bb2"}, {"code": "(fn [x y] (into {}(for[i (range (min (count x) (count y)))] [(nth x i) (nth y i)])))", "problem": 61, "user": "52f9ce6de4b047fd55836ff0"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "52d838bee4b09f7907dd138b"}, {"code": "(comp (partial apply hash-map) interleave)", "problem": 61, "user": "52e32d55e4b09f7907dd143e"}, {"code": "(comp (partial apply hash-map) interleave)", "problem": 61, "user": "52fd8de1e4b047fd5583702e"}, {"code": "(fn mc [ks vs] \n  (if (or (empty? ks) (empty? vs))\n    {}\n    (assoc (mc (rest ks) (rest vs)) (first ks) (first vs))))", "problem": 61, "user": "52d660eae4b09f7907dd1356"}, {"code": "(fn ! [x y]\n  (if (or (empty? x) (empty? y))\n    {}\n    (apply merge \n           {(first x) (first y)}\n           (! (rest x) (rest y))\n           )\n   ))", "problem": 61, "user": "52faec2ee4b047fd55837004"}, {"code": "(fn [coll1 coll2]\n  (loop [coll1 coll1 coll2 coll2 result {}]\n    (if-not (and (seq coll1) (seq coll2)) \n      result\n      (recur (rest coll1) (rest coll2) (into result {(first coll1) (first coll2)}))\n    )))", "problem": 61, "user": "52fcfeeee4b047fd55837027"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "52d8eb78e4b09f7907dd139d"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "529b44afe4b02ebb4ef7509d"}, {"code": "#(apply array-map(interleave %1 %2))", "problem": 61, "user": "5300aa1de4b0d8b024fd3710"}, {"code": "(fn my-zipmap\n  [k v]\n  (into {} (map hash-map k v)))", "problem": 61, "user": "5300b750e4b0d8b024fd3711"}, {"code": "#(reduce merge (map hash-map %1 %2))", "problem": 61, "user": "52f5f8b4e4b09b582c12c9cc"}, {"code": "(fn [x y] \n   (apply merge \n          (map (fn [a b] {a b}) x y)) )", "problem": 61, "user": "52eee533e4b05e3f0be25ecb"}, {"code": "#(reduce into  (map (fn [x y] (assoc {} x y)) % %2))", "problem": 61, "user": "52eb400ee4b0705949c4443b"}, {"code": "(fn [coll-1 coll-2]\n  (into {} (mapcat hash-map coll-1 coll-2)))", "problem": 61, "user": "52fb903ee4b047fd5583700b"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "52fa4f48e4b047fd55836ff7"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "52f4fae4e4b05e3f0be25f27"}, {"code": "(fn [k v] (apply hash-map (interleave k v)))", "problem": 61, "user": "5300f68de4b0d8b024fd3714"}, {"code": "#(apply array-map (interleave % %2))", "problem": 61, "user": "528f4462e4b0239c8a67aef0"}, {"code": "(fn mkmp [x y]\n  (cond\n   (empty? x) {}\n   (empty? y) {}\n   :else (merge {(first x) (first y)} (mkmp (rest x) (rest y)))))", "problem": 61, "user": "51b89503e4b050a1176cd69a"}, {"code": "#(apply hash-map (mapcat list % %2))", "problem": 61, "user": "5302b580e4b0d8b024fd3732"}, {"code": "#(loop [map {} keys % values %2] \n   (if (some empty? [keys values])\n     map\n   (recur (into map [[(first keys) (first values)]]) (rest keys) (rest values))))", "problem": 61, "user": "52efc98de4b05e3f0be25ed2"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "512587ade4b05d10e3e395fb"}, {"code": "(fn [x y] (into {} (map #(hash-map % %2) x y)))", "problem": 61, "user": "52c60945e4b0c2d177d62108"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "51f2b8f1e4b0210f90e74556"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "528a2de7e4b0239c8a67ae71"}, {"code": "( fn [k v] (loop [ktmp k vtmp v acc {}] (if (or (empty? ktmp) (empty? vtmp)) acc \n                                          (recur (rest ktmp) (rest vtmp) (assoc acc (first ktmp) (first vtmp))))))", "problem": 61, "user": "5301157ae4b0d8b024fd3717"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "52570aeae4b0541d1855ba42"}, {"code": "(fn [keys values] (reduce #(assoc %1 (first %2) (second %2)) {} (partition 2 (interleave keys values))))", "problem": 61, "user": "52f10094e4b05e3f0be25ee8"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "52ffb7f2e4b0d8b024fd370b"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "530578ede4b0d8b024fd3760"}, {"code": "(fn [k v] (apply hash-map (flatten (map list k v))))", "problem": 61, "user": "53070615e4b02e821686979e"}, {"code": "(fn[x y](into {} (apply map vector [x y])))", "problem": 61, "user": "5302d79ce4b0d8b024fd3736"}, {"code": "(fn f\n  [x y]\n  (apply merge (for [i (range (min (count x) (count y)))]\n                 (let [[k v] [(get x i) (get y i)]]\n                 {k v}))))", "problem": 61, "user": "52f3af46e4b05e3f0be25f14"}, {"code": "#( apply hash-map (interleave %1 %2))", "problem": 61, "user": "5307e4ece4b02e82168697a9"}, {"code": "(fn d [keys vals] (if (or (empty? keys) (empty? vals)) nil (assoc (d (rest keys) (rest vals)) (first keys) (first vals))))", "problem": 61, "user": "5226f9b8e4b04e78ff2e199b"}, {"code": "(fn [ks vs]\n  (let [s (min (count ks) (count vs))]\n    (reduce #(assoc % (get ks %2)\n             \t\t  (get vs %2))\n            {} (range s))))", "problem": 61, "user": "52f818a6e4b047fd55836fcc"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "5176afd2e4b085adf681d889"}, {"code": "(fn [A B]\n  (let\n    [n (min (count A) (count B))]\n    (loop\n      [tr {}\n       a A\n       b B\n       i 0]\n      (if (= i n)\n        tr\n        (recur\n         (assoc tr(first a) (first b))\n         (rest a)\n         (rest b)\n         (+ i 1))))))", "problem": 61, "user": "530d85dee4b08068f379eca8"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "52fe3a9de4b047fd55837039"}, {"code": "(fn [& coll] (apply hash-map (apply interleave coll)))", "problem": 61, "user": "530caf86e4b02e82168697df"}, {"code": "(fn [as bs]\n  (loop [m {}\n         ks (seq as)\n         vs (seq bs)]\n    (if (and ks vs)\n      (recur (assoc m (first ks) (first vs)) (next ks) (next vs))\n      m)))", "problem": 61, "user": "50b9d991e4b04934c218a4a9"}, {"code": "(fn [coll1 coll2]\n    (apply assoc {} (interleave coll1 coll2))\n  )", "problem": 61, "user": "52430d3ce4b076204b44faa5"}, {"code": "#(apply assoc {}\n(interleave %1 %2))", "problem": 61, "user": "505d1b01e4b0e6aca564be04"}, {"code": "#(reduce (fn [m [k v]] (assoc m k v)) {} (partition 2 (interleave %1 %2)) )", "problem": 61, "user": "52bf6946e4b07a9af5792334"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "5301a13ae4b0d8b024fd371e"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "53034738e4b0d8b024fd373e"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "530e9729e4b08068f379ecbc"}, {"code": "(fn [a b] (into {} (map #(vector % %2) a b)))", "problem": 61, "user": "52d7f9a8e4b09f7907dd1381"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "53110f32e4b08068f379ece4"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "5300158ae4b0d8b024fd370f"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "53153466e4b08068f379ed23"}, {"code": "(fn map-constr [x y]\n      (if (or (empty? (rest x)) (empty? (rest y)))\n        (hash-map (first x) (first y))\n        (merge (hash-map (first x) (first y))\n               (map-constr (rest x) (rest y)))))", "problem": 61, "user": "52e17e66e4b09f7907dd1423"}, {"code": "(fn my-zipmap [ks vs]\n  (if (or (empty? ks) (empty? vs))\n    {}\n    (assoc (my-zipmap (rest ks) (rest vs)) (first ks) (first vs))))", "problem": 61, "user": "5310e7aee4b08068f379ecdc"}, {"code": "#(into {} (map vector % %2 ))", "problem": 61, "user": "51f81925e4b09be9c177e526"}, {"code": "(fn [keys vals] \n  (loop [map {}\n         keys keys\n         vals vals]\n    (if (or (empty? keys) (empty? vals))\n        map\n        (recur (assoc map (first keys) (first vals)) (rest keys) (rest vals)))))", "problem": 61, "user": "4eed26af535d93acb0a668bb"}, {"code": "(fn [v m] (apply hash-map (interleave v m)))", "problem": 61, "user": "531490bde4b08068f379ed17"}, {"code": "(fn [keys vals]\n  (loop [map {}\n           ks (seq keys)\n           vs (seq vals)]\n     (if (and ks vs)\n      \t(recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n      \tmap)))", "problem": 61, "user": "52f89125e4b047fd55836fd4"}, {"code": "#(loop [fst %1 snd %2 dic {}]\n   (cond\n    (empty? fst) dic\n    (empty? snd) dic\n    :else (recur (rest fst) (rest snd) (conj dic [(first fst) (first snd)]))))", "problem": 61, "user": "5315a4f0e4b08068f379ed2e"}, {"code": "(fn [k v] (apply assoc {} (interleave k v)))", "problem": 61, "user": "507330e6e4b0e3170b5a8698"}, {"code": "(fn zipup [a b]\n  (when (and (seq a) (seq b))\n      (assoc (zipup (rest a) (rest b)) (first a) (first b))))", "problem": 61, "user": "52af7a5ce4b0c58976d9acbd"}, {"code": "(fn [x y]\n  (loop [i {} j x k y]\n    (let [a (first j) b (first k)]\n      (if (or (nil? a) (nil? b))\n        i\n        (recur (assoc i a b) (next j) (next k))))))", "problem": 61, "user": "531488f3e4b08068f379ed16"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "52be0263e4b07a9af579230e"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "52bc6cb2e4b07a9af57922f5"}, {"code": "#(into '{} \n       (for [[a b] (->> (interleave %1 %2) (partition 2))]\n    \t\t[a b]))", "problem": 61, "user": "530cb5b8e4b02e82168697e0"}, {"code": "#(loop [curr-keys %1\n        curr-vals %2\n        pairs []]\n   (if-not (and (seq curr-keys)\n                (seq curr-vals))\n     (apply hash-map pairs)\n     (recur (rest curr-keys)\n            (rest curr-vals)\n            (conj pairs (first curr-keys) \n                        (first curr-vals)))))", "problem": 61, "user": "531c7f0de4b08068f379eda4"}, {"code": "(fn [a b] (into {} (map vector a b)))", "problem": 61, "user": "52fb64b7e4b047fd55837009"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "52dd4fb4e4b09f7907dd13df"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "531c0619e4b08068f379ed98"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "531ba143e4b08068f379ed91"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "52474133e4b05ef8e38e635e"}, {"code": "#(apply merge (map hash-map % %2))", "problem": 61, "user": "52265e41e4b04e78ff2e1981"}, {"code": "(fn [c1 c2]\n  (into {} (filter (comp not nil? val)\n                   (reduce merge (map-indexed #(hash-map %2 (get c2 %1)) c1)))))", "problem": 61, "user": "52d2f457e4b099d49816f0ba"}, {"code": "(fn [keys values]\n  (apply merge\n    (map (fn [key value]\n         {key value}) keys values)))", "problem": 61, "user": "4ff505c8e4b0678c553fc364"}, {"code": "#(apply hash-map (flatten (map vector %1 %2)))", "problem": 61, "user": "531f1e63e4b08068f379edc2"}, {"code": "(fn [k-coll v-coll]\n  (apply hash-map (interleave k-coll v-coll)))", "problem": 61, "user": "50b79c5fe4b0cf3e51c3046c"}, {"code": "(fn [ks vs] (apply hash-map (interleave ks vs)))", "problem": 61, "user": "532347dde4b09d4e7a9b54cc"}, {"code": "(fn [xs ys]\n  (let [indexes (range (min (count xs) (count ys)))]\n    (reduce (fn [dicc index]\n              (assoc dicc (xs index) (ys index))) {} indexes)))", "problem": 61, "user": "4feaa579e4b0140c20fb9c0b"}, {"code": "(fn [a b]\n  (loop [a (seq a)\n         b (seq b)\n         r {}]\n    (if-let [cur1 (first a)]\n      (if-let[cur2 (first b)]\n        (recur (next a) (next b) (conj r {cur1 cur2}))\n        r)\n      r)))", "problem": 61, "user": "531e5c81e4b08068f379edba"}, {"code": "#(apply hash-map (flatten (map list %1 %2)) )", "problem": 61, "user": "531bfb69e4b08068f379ed97"}, {"code": "#(reduce conj (map hash-map %1 %2))", "problem": 61, "user": "5323a414e4b09d4e7a9b54d1"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "532418f3e4b09d4e7a9b54d8"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "529223cbe4b0239c8a67af26"}, {"code": "(fn [c1 c2] (apply merge (map #(hash-map %1 %2) c1 c2)))", "problem": 61, "user": "52c00e4fe4b07a9af5792342"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "51a1659de4b00957e520db72"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "512700c4e4b083bb8f88cf14"}, {"code": "(fn [k v]\n  (reduce conj {} (map #(clojure.lang.MapEntry. %1 %2) k v)))", "problem": 61, "user": "5326c5f7e4b09d4e7a9b54f2"}, {"code": "(fn make-map [keys values] (apply hash-map (interleave keys values)))", "problem": 61, "user": "531dfaf5e4b08068f379edb3"}, {"code": "(fn [ks vs]\n  (loop [ks ks\n         vs vs\n         result {}]\n    (if (and (seq ks) (seq vs))\n      (recur (rest ks) (rest vs) (assoc result (first ks) (first vs)))\n      result)))", "problem": 61, "user": "508a2c2fe4b016a2107004a1"}, {"code": "(fn f [keys vals]\n  (if (or (empty? keys) (empty? vals))\n    {}\n    (conj (f (rest keys) (rest vals))\n          (hash-map (first keys) (first vals)))))", "problem": 61, "user": "521b73f5e4b0c4ef0be83043"}, {"code": "(fn [a b]\n  (loop [a a\n         b b\n         c {}]\n    (if (empty? a) c\n      (if (empty? b) c\n      (recur (rest a) (rest b) (conj c [(first a) (first b)]))))))", "problem": 61, "user": "531cbf46e4b08068f379eda6"}, {"code": "#(loop [kv %1 vv %2 r {}]\n   (if (or (empty? kv) (empty? vv))\n     r\n     (recur (rest kv) (rest vv) (assoc r (first kv) (first vv)))))", "problem": 61, "user": "52c81954e4b0c2d177d6212e"}, {"code": "(fn [a b]\n  (loop [h {} k a v b]\n    (if (or (empty? k) (empty? v)) h\n        (recur (assoc h (first k) (first v))\n               (rest k) (rest v)))))", "problem": 61, "user": "52d1e364e4b0d9f9285948e7"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "52da20c7e4b09f7907dd13b3"}, {"code": "(fn cmap [ks vs]\n  (if (or (empty? ks) (empty? vs))\n    {}\n    (assoc (cmap (rest ks) (rest vs)) (first ks) (first vs))))", "problem": 61, "user": "532b9075e4b09d4e7a9b5533"}, {"code": "#(into {} (map (fn [x y] {x y}) % %2))", "problem": 61, "user": "52fba50ce4b047fd5583700d"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "53224d45e4b09d4e7a9b54c0"}, {"code": "#(loop [a %1 b %2 m {}]\n   (if (or (empty? a) (empty? b))\n     m\n     (recur (rest a) (rest b) (conj m {(first a) (first b)}))\n   )\n )", "problem": 61, "user": "53244c9de4b09d4e7a9b54db"}, {"code": "(fn f\n  ([k v] (f k v {}))\n  ([k v m]\n     (if (or (empty? k) (empty? v))\n         m\n         (recur (rest k) (rest v) (assoc m (first k) (first v))))\n  )\n)", "problem": 61, "user": "5302ac7fe4b0d8b024fd3731"}, {"code": "(fn\n  [coll1 coll2]\n  (into {} (map hash-map coll1 coll2)))", "problem": 61, "user": "52ba447ee4b07a9af57922ce"}, {"code": "#(apply array-map (interleave %1 %2))", "problem": 61, "user": "5004034ce4b0678c553fc447"}, {"code": "#(apply array-map (interleave %1 %2))", "problem": 61, "user": "532cb6bbe4b019098a6f8b33"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "52bb4be0e4b07a9af57922e2"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "52d42021e4b09f7907dd132a"}, {"code": "(comp (partial apply hash-map) interleave)", "problem": 61, "user": "531f7a2de4b08068f379edc6"}, {"code": "(fn\n  [x y]\n  (let [total (- (min (count x) (count y)) 1)]\n    (loop [n   0\n           res {}]\n      (if (> n total)\n        res\n        (recur (inc n) (if (and (not= nil (get x n)) (not= nil (get y n)))\n                         (into res (hash-map (get x n)(get y n)))\n                         res))))))", "problem": 61, "user": "531016d0e4b08068f379ecd1"}, {"code": "(fn [kseq vseq]\n     (apply assoc {} (interleave kseq vseq)))", "problem": 61, "user": "51f5539fe4b0abb92f97f9cd"}, {"code": "(fn [f s]\n\t(letfn [(zmm [f s res]\n\t\t         (let [x (first f) y (first s)]\n\t\t           (if (or (nil? x) (nil? y))\n\t\t\t           res\n\t\t\t           (recur (next f) (next s) (assoc res x y)))))]\n\t(zmm f s {})))", "problem": 61, "user": "531dc21be4b08068f379edb1"}, {"code": "#(loop [[k & ks] %1 [v & vs] %2 res {}]\n\t(if (or (nil? k) (nil? v)) res\n\t\t(recur ks vs (assoc res k v))))", "problem": 61, "user": "53300924e4b019098a6f8b55"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "53315c78e4b019098a6f8b67"}, {"code": "(fn newzipmap [x y]\n        (apply hash-map (interleave x y)))", "problem": 61, "user": "532727bae4b09d4e7a9b54fa"}, {"code": "(fn [x y]\n  (apply hash-map (interleave x y)))", "problem": 61, "user": "53322cece4b019098a6f8b73"}, {"code": "(comp (partial apply sorted-map) interleave)", "problem": 61, "user": "52facb9de4b047fd55837002"}, {"code": "(fn [keys values]\n  (loop [acc {} k keys v values]\n    (if (or (empty? k) (empty? v))\n      acc\n      (recur (assoc acc (first k) (first v)) (rest k) (rest v)))))", "problem": 61, "user": "52262a6ce4b06a1ecd0c4e7d"}, {"code": "#(reduce (partial apply assoc) {} (partition 2 (interleave %1 %2)))", "problem": 61, "user": "531792d9e4b08068f379ed5e"}, {"code": "(fn zm [k v]\n  (when (and k v)\n    (assoc (zm (next k) (next v)) (first k) (first v))))", "problem": 61, "user": "5336a339e4b0e30313ee6c7d"}, {"code": "#(loop [fseq %1\n        sseq %2\n        result {}\n        ]\n   (if (or (empty? fseq) (empty? sseq))\n     result\n     (recur \n      (rest fseq) \n      (rest sseq) \n      (assoc result (first fseq) (first sseq)))))", "problem": 61, "user": "531d34cfe4b08068f379edac"}, {"code": "(fn mapme [k v] \n   (when (and (first k) (first v))\n     (merge {(first k) (first v)}\n            (mapme (rest k) (rest v)))))", "problem": 61, "user": "52baefbae4b07a9af57922da"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "5005b57de4b0678c553fc46a"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "532b43c3e4b09d4e7a9b5531"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "532686e6e4b09d4e7a9b54ef"}, {"code": "(fn [x y] (apply merge (map hash-map x y)))", "problem": 61, "user": "533a7427e4b0e30313ee6cbb"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "533056a4e4b019098a6f8b5b"}, {"code": "(fn zip-map [ks vs]\n  (into {} (map vector ks vs)))", "problem": 61, "user": "532ab0bde4b09d4e7a9b5527"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "52d2ca1ce4b099d49816f0b4"}, {"code": "(fn zm [xs ys]\n  (if (or (empty? xs) (empty? ys))\n    {}\n    (conj (zm (rest xs) (rest ys)) {(first xs) (first ys)})))", "problem": 61, "user": "5334d4f2e4b0656e627bfd71"}, {"code": "(fn [ks vs]\n  (loop [ret {}\n         ks (seq ks)\n         vs (seq vs)]\n    (if (and ks vs)\n      (recur (assoc ret \n                    (first ks) \n                    (first vs))\n             (next ks)\n             (next vs))\n      ret)))", "problem": 61, "user": "5336ca32e4b0e30313ee6c80"}, {"code": "(fn [ks vs]\n  (loop [result {}\n         k (seq ks)\n         v (seq vs)]\n    (if (and k v)\n      (recur (assoc result (first k) (first v))\n             (next k)\n             (next v))\n      result)))", "problem": 61, "user": "525ab6cfe4b0cb4875a45cf9"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "506d5e4ce4b0a302964c5493"}, {"code": "(fn [keys vals]\n  (reduce #(assoc %1 (keys %2) (vals %2)) {} (range (min (count keys) (count vals)))))", "problem": 61, "user": "533ab9abe4b0e30313ee6cbf"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "4eadc217535d7eef30807321"}, {"code": "(fn [keys values]\n  (reduce (fn [map [key value]] (assoc map key value)) {} (map vector keys values)))", "problem": 61, "user": "5338e33fe4b0e30313ee6ca1"}, {"code": "(fn [a b]\n  (loop [[k & a] a\n         [v & b] b\n         res {} ]\n    (if (or (nil? k) (nil? v) )\n       res\n       (recur a b (merge {k v} res))\n    )\n  )\n)", "problem": 61, "user": "5149c2f1e4b0829bd132edb0"}, {"code": "(fn [k v] (apply assoc {} (interleave k v)))", "problem": 61, "user": "53388e2de4b0e30313ee6c9c"}, {"code": "(fn [v1 v2]\n  (apply hash-map (apply concat (map vector v1 v2))))", "problem": 61, "user": "53219cece4b09d4e7a9b54b7"}, {"code": "(fn [k v] (apply hash-map (interleave k v)))", "problem": 61, "user": "51a3b135e4b0e77c4ca60bf6"}, {"code": "#(apply assoc {}\n         (interleave % %2))", "problem": 61, "user": "50e5bca5e4b09ae9427b0e75"}, {"code": "#(into {} (map vec (partition 2 (interleave %1 %2))))", "problem": 61, "user": "531619c1e4b08068f379ed3d"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "523ea111e4b057c4b7cd0a65"}, {"code": "(fn [lst1 lst2]\n  ((fn [l1 l2 res]\n     (if (or (empty? l1) (empty? l2)) res\n       (recur (rest l1) (rest l2) (assoc res (first l1) (first l2)))))\n   lst1 lst2 {}))", "problem": 61, "user": "51da631be4b02ceefd947766"}, {"code": "(fn [c1 c2] (into {} (map #(vector %1 %2) c1 c2)))", "problem": 61, "user": "533ee560e4b085b17e897d98"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "532631e1e4b09d4e7a9b54ea"}, {"code": "(fn [k v]\n  (loop [i 0 m {}]\n    (if (= i (min (count k) (count v)))\n      m\n      (recur (inc i) (conj m [(nth k i) (nth v i)])))))", "problem": 61, "user": "5341b141e4b00652c8746ecf"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "50d4593ee4b09cc622d65a68"}, {"code": "#(into {} (map vector %1 %2 ))", "problem": 61, "user": "533f09e1e4b085b17e897d9a"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "53468f6ce4b084c2834f4a3f"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "53460d02e4b084c2834f4a39"}, {"code": "(fn [k v]\n  (apply hash-map (interleave k v)))", "problem": 61, "user": "5346f409e4b084c2834f4a46"}, {"code": "#(into {} (apply map vector [% %2]))", "problem": 61, "user": "53307da1e4b019098a6f8b5e"}, {"code": "#(into {} (map hash-map %1 %2))", "problem": 61, "user": "533018b2e4b019098a6f8b56"}, {"code": "#(into {} (map vec (partition-all 2 (interleave %1 %2))))", "problem": 61, "user": "4e705861535d5021c1a89635"}, {"code": "(fn f [k v]\n  (if (or (empty? v)(empty? k))\n    {}\n    (merge {(first k) (first v)} (f (rest k) (rest v)))\n  )\n)", "problem": 61, "user": "5349ac2be4b084c2834f4a67"}, {"code": "(fn [c1 c2] (apply hash-map (mapcat list c1 c2)))", "problem": 61, "user": "53286389e4b09d4e7a9b5504"}, {"code": "(fn [ks vs] (into {} (map vector ks vs)))", "problem": 61, "user": "50fc299ee4b0d10d794c19f2"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "534941d1e4b084c2834f4a60"}, {"code": "(comp (partial into {}) (partial map vector))", "problem": 61, "user": "4fceda40e4b03432b189f407"}, {"code": "(fn map-cons\n\t[coll1 coll2]\n\t(apply assoc {} (interleave coll1 coll2)))", "problem": 61, "user": "5339af7de4b0e30313ee6cab"}, {"code": "(fn [c1 c2] (reduce (fn [m [k v]] (assoc m k v)) {} (map vector c1 c2)))", "problem": 61, "user": "52b94e26e4b07a9af57922b9"}, {"code": "(fn [seq1 seq2]\n  (let [smaller (if (> (count seq1) (count seq2)) seq2 seq1)]\n    (loop [s1 seq1\n           s2 seq2\n           m smaller\n           res {}]\n      (if-not m res (recur (next s1)\n                       (next s2)\n                       (next m)\n                       (assoc res (first s1) (first s2)))))))", "problem": 61, "user": "516081e7e4b009fba0926e28"}, {"code": "#(apply hash-map (interleave  %1 %2))", "problem": 61, "user": "5322d370e4b09d4e7a9b54c7"}, {"code": "(fn map-zip [k v]\n  (let [n (min (count k) (count v))\n        acc (atom {})]\n    (doseq [i (range n)]\n      (swap! acc (fn [_] (assoc @acc (get k i) (get v i)))))\n    @acc))", "problem": 61, "user": "52d6664be4b09f7907dd1359"}, {"code": "(fn [a b]\n  (apply hash-map (interleave a b)))", "problem": 61, "user": "51ab70c3e4b04e3dc0c27b33"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "53487737e4b084c2834f4a59"}, {"code": "(fn [k v] (apply hash-map (interleave k v)))", "problem": 61, "user": "5314318ee4b08068f379ed13"}, {"code": "(fn [a b]\n  (apply hash-map (interleave a b)))", "problem": 61, "user": "53415755e4b00652c8746ecd"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "526a7025e4b03e8d9a4a722a"}, {"code": "(fn [keys vals] \n   (loop [map {}\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map)))", "problem": 61, "user": "5348236ee4b084c2834f4a54"}, {"code": "(fn [keys vals] (apply assoc {} (interleave keys vals)))", "problem": 61, "user": "534db51be4b084c2834f4aa6"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "53383c74e4b0e30313ee6c92"}, {"code": "(fn [v1 v2]\n  (apply assoc {} (interleave v1 v2)))", "problem": 61, "user": "5348cab4e4b084c2834f4a5e"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "534efe66e4b084c2834f4ac1"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "5192dd39e4b0c663c5d86c9e"}, {"code": "(fn fun [[x & xs][y & ys]]\n  (if (and x y)\n    (assoc (fun xs ys) x y)\n         {} ))", "problem": 61, "user": "5349da55e4b084c2834f4a68"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "52fc34cee4b047fd55837015"}, {"code": "#(into {} (map hash-map % %2))", "problem": 61, "user": "534e4a29e4b084c2834f4ab0"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "534bd9c1e4b084c2834f4a80"}, {"code": "(fn [k v]\n  (loop [myk k myv v acc {}]\n    (if (or (empty? myk) (empty? myv))\n      acc\n      (recur (rest myk) (rest myv) (conj acc {(first myk) (first myv)})))))", "problem": 61, "user": "535526a2e4b04ce2eb3ed259"}, {"code": "#(reduce merge {} (map hash-map %1 %2))", "problem": 61, "user": "5250b7a5e4b0541d1855b83e"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "53513d28e4b084c2834f4ae3"}, {"code": "(fn [ks vs] (into {} (map vector ks vs)))", "problem": 61, "user": "511a5328e4b09045b2b16946"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "5353afa0e4b084c2834f4b03"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "533b1dc4e4b0e30313ee6cc7"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "5339c105e4b0e30313ee6cae"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "5357b241e4b04ce2eb3ed282"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "50f10f7be4b06d9538fe211a"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "53500869e4b084c2834f4ad3"}, {"code": ";(fn [ks vs]\n;  (reduce (fn [m [k v]] (assoc m k v)) {} (map vector ks vs)))\n\n(fn [ks vs]\n  (reduce #(apply assoc %1 %2) {} (map vector ks vs)))", "problem": 61, "user": "5312cdaae4b08068f379ed03"}, {"code": "(fn [keys vals]\n  (apply hash-map (interleave keys vals)))", "problem": 61, "user": "5225271fe4b01819a2de42f9"}, {"code": "#(reduce conj (map hash-map %1 %2))", "problem": 61, "user": "52046600e4b0c283853240c5"}, {"code": "(fn [ks vs] (into {} (map vector ks vs)))", "problem": 61, "user": "534d1173e4b084c2834f4a98"}, {"code": "#(into {} (map hash-map %1 %2))", "problem": 61, "user": "4f0412f8535dcb61093f6b99"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "5356dcbee4b04ce2eb3ed270"}, {"code": "#(apply merge (map hash-map %1 %2))", "problem": 61, "user": "534dd600e4b084c2834f4aaa"}, {"code": "(fn [x y] (apply array-map (flatten (map vector x y))))", "problem": 61, "user": "535920b2e4b04ce2eb3ed294"}, {"code": "(fn [k v]\n  (apply hash-map (interleave k v)))", "problem": 61, "user": "52271a85e4b04e78ff2e19a7"}, {"code": "#(apply hash-map (flatten (map list %1 %2)))", "problem": 61, "user": "535d910ae4b04ce2eb3ed2c5"}, {"code": "#(apply hash-map (mapcat list % %2))", "problem": 61, "user": "535d2533e4b04ce2eb3ed2bc"}, {"code": "(fn [a b]\n    (into {} (map #(vector %1 %2) a b)))", "problem": 61, "user": "530b8580e4b02e82168697cc"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "4ddb696b535d02782fcbe9fa"}, {"code": "#(apply array-map (interleave %1 %2))", "problem": 61, "user": "535a18e3e4b04ce2eb3ed2a4"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "52761edae4b03e8d9a4a74d4"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "53489329e4b084c2834f4a5b"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "53523ae0e4b084c2834f4aee"}, {"code": "(fn f [xs ys]\n  (if (and (seq xs) (seq ys))\n    (assoc (f (rest xs) (rest ys)) (first xs) (first ys))\n    {}))", "problem": 61, "user": "536102efe4b0243289761e3e"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "532ecd44e4b019098a6f8b49"}, {"code": "(fn [a b] (apply hash-map (reduce (fn [x y] (concat x y)) (map list a b))))", "problem": 61, "user": "53638ed2e4b0243289761e5b"}, {"code": "(fn [v1 v2]\n  (reduce\n   merge\n   (map hash-map v1 v2)))", "problem": 61, "user": "4f031883535dcb61093f6a5e"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "535d4b0ae4b04ce2eb3ed2be"}, {"code": "(fn oo [a b]\n  (apply hash-map (into [] (flatten (map vector a b)))))", "problem": 61, "user": "52c42bc2e4b0c2d177d620d0"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "536973e5e4b0243289761e9e"}, {"code": "(fn \n  [xsa xsb]\n  (reduce #(assoc %1 (first %2) (first (rest %2))) {} (map #(list %1 %2) xsa xsb)))", "problem": 61, "user": "536aa86de4b0243289761eb1"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "5368a275e4b0243289761e8f"}, {"code": "(fn\n  [keys vals]\n    (loop [map {}\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map)))", "problem": 61, "user": "4e36e647535deb9a81d77f36"}, {"code": "(fn [keys values]\n      (apply hash-map\n        (interleave keys values)\n        )\n      )", "problem": 61, "user": "536827f1e4b0243289761e8a"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "536d83cee4b0fc7073fd6e5e"}, {"code": "(fn [xs ys] (apply assoc {} (interleave xs ys)))", "problem": 61, "user": "533696b9e4b0e30313ee6c7c"}, {"code": "(fn [coll coll2]\n  (letfn [(c [x y] {x y})]\n    (reduce merge (map c coll coll2))))", "problem": 61, "user": "5369a4b1e4b0243289761e9f"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "536ca4bde4b0fc7073fd6e49"}, {"code": "#(reduce into (map hash-map %1 %2))", "problem": 61, "user": "5361a4f2e4b0243289761e47"}, {"code": "(fn [k v] (apply hash-map (interleave k v)))", "problem": 61, "user": "4edb314d535d10e5ff6f5317"}, {"code": "(fn [c1 c2] (apply array-map (flatten (map vector c1 c2))))", "problem": 61, "user": "536f5900e4b0fc7073fd6e7b"}, {"code": "(fn [m-keys m-values]\n  (reduce\n   #(assoc %1 (first %2) (second %2))\n   {}\n   (map list m-keys m-values)))", "problem": 61, "user": "53527551e4b084c2834f4af0"}, {"code": "(fn [ks vs]\n    (reduce #(let [[k v] %2] (assoc %1 k v)) {} (partition 2 (interleave ks vs))))", "problem": 61, "user": "51c3c6a6e4b0851ac09658f8"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "536e0930e4b0fc7073fd6e66"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "529c585ae4b04e0c58e87b60"}, {"code": "(fn [ks vs]\n  (into {}\n    (map hash-map ks vs)))", "problem": 61, "user": "53727c0be4b06d7f452d9dfa"}, {"code": "(fn [v1 v2] (into {} (map #(vector %1 %2) v1 v2)))", "problem": 61, "user": "534f13b2e4b084c2834f4ac4"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4fe9ea87e4b0547ebccb2476"}, {"code": "#(apply hash-map (interleave % %2))\n; also interesting: #(into {} (map vector % %2))", "problem": 61, "user": "524b0645e4b09eba1c0223bf"}, {"code": "(fn [c1 c2] (reduce (fn [a c] (conj a c)) (map (fn [k v] {k v}) c1 c2)))", "problem": 61, "user": "53629381e4b0243289761e54"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "5370ef22e4b0fc7073fd6ea0"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "53691dc7e4b0243289761e97"}, {"code": "(fn [k v] (reduce conj {} (map vector k v)))", "problem": 61, "user": "4f9b3532e4b0dcca54ed6d13"}, {"code": "(fn [a b] (apply hash-map (interleave a b)))", "problem": 61, "user": "536f2faee4b0fc7073fd6e79"}, {"code": "(fn [a b] (into {} (map vector a b)))", "problem": 61, "user": "509fe759e4b08df8156e9e43"}, {"code": "(fn [k v]\n  (apply assoc {} (interleave k v)))", "problem": 61, "user": "532c9dc9e4b019098a6f8b30"}, {"code": "(fn map-construct [v1 v2]\n  (apply hash-map (interleave v1 v2)))", "problem": 61, "user": "53713ebee4b0fc7073fd6ead"}, {"code": "#(apply hash-map(flatten( map vector %1 %2)))", "problem": 61, "user": "52ca720fe4b071a8d36bd3e2"}, {"code": "(fn [k v]\n  (into {} (map #(vector %1 %2) k v)))", "problem": 61, "user": "5338387de4b0e30313ee6c91"}, {"code": "(fn zm2 [ks, vs]\n  (loop [kk ks, vv vs, acc {}]\n    (if (some empty? [kk, vv])\n      acc\n      (recur (rest kk) (rest vv) (merge acc {(first kk) (first vv)})))))", "problem": 61, "user": "53720c5ce4b0493c815db704"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4ec53f8c535d6d7199dd368b"}, {"code": "#(into {} (mapcat hash-map %1 %2))", "problem": 61, "user": "535056a7e4b084c2834f4adb"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "536c7470e4b0fc7073fd6e3e"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "53712c03e4b0fc7073fd6ea9"}, {"code": "(fn [k v] (apply hash-map (mapcat vector k v)))", "problem": 61, "user": "535e518ee4b04ce2eb3ed2cf"}, {"code": "(fn myzip [keys vals] (if (or (empty? keys) (empty? vals))\n                        nil\n                        (assoc (myzip (rest keys) (rest vals))\n                          (first keys)\n                          (first vals))))", "problem": 61, "user": "518279abe4b0353c468deb65"}, {"code": "#(apply hash-map (apply interleave %&))", "problem": 61, "user": "53736ffce4b06d7f452d9e11"}, {"code": "(fn my-zipmap [some-keys some-vals]\n  (apply hash-map (interleave some-keys some-vals)))\n\n;;(fn my-zipmap [some-keys some-vals]\n;;  (into {} (map #(vector %1 %2) some-keys some-vals)))", "problem": 61, "user": "53713ed9e4b0fc7073fd6eaf"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "534c1c64e4b084c2834f4a8a"}, {"code": "#(into{} (map vector %1 %2))", "problem": 61, "user": "534d639ae4b084c2834f4a9e"}, {"code": "(fn [ks vs]\n  (loop [[k & krest] ks\n         [v & vrest] vs\n         acc {}]\n    (if (some nil? [k v])\n       acc\n       (recur krest vrest (assoc acc k v)))))", "problem": 61, "user": "53779a26e4b06839e8705e38"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "536673a8e4b0243289761e76"}, {"code": "(fn [keys vals]\n  (apply hash-map (interleave keys vals)))", "problem": 61, "user": "53436e60e4b084c2834f4a19"}, {"code": "(fn [c1 c2] (apply hash-map (apply concat (map #(list %1 %2) c1 c2))))", "problem": 61, "user": "5370b386e4b0fc7073fd6e9b"}, {"code": "(fn jzipmap\n  [keys vals]\n  (if (or (empty? keys) (empty? vals))\n    #{}\n    (merge-with #{} {(first keys) (first vals)} (jzipmap (rest keys) (rest vals)))))", "problem": 61, "user": "534ff8a6e4b084c2834f4ad1"}, {"code": "(fn [ks vs]\n  (reduce #(assoc %1 (%2 0) (%2 1)) {} (map vector ks vs)))", "problem": 61, "user": "5370f8ede4b0fc7073fd6ea2"}, {"code": "(fn [x y]\n  (into {} (mapcat #(hash-map %1 %2) x y)))", "problem": 61, "user": "5371167fe4b0fc7073fd6ea7"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "4f92de49e4b0dcca54ed6cb2"}, {"code": "#(apply assoc {} (interleave % %2))", "problem": 61, "user": "4f849f76e4b033992c121c36"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4e8849c5535d8b9bb0147ca4"}, {"code": "(fn [x y] (apply hash-map (mapcat list x y)))", "problem": 61, "user": "536a37efe4b0243289761eaa"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "537bde5de4b06839e8705e73"}, {"code": "(fn mapping[x y]\n   (if (or (empty? x) (empty? y))\n     {}\n     (conj (mapping (rest x) (rest y)) {(first x) (first y)})\n            ))", "problem": 61, "user": "525cc912e4b0cb4875a45d48"}, {"code": "(comp (partial apply hash-map) interleave)", "problem": 61, "user": "536b2048e4b0243289761eb7"}, {"code": "(fn [xs ys]\n  (->> (map #(list %1 %2) xs ys) \n       (reduce #(assoc %1 (first %2) (second %2))\n               {})))", "problem": 61, "user": "53800d99e4b06839e8705ebd"}, {"code": "#(into {} (map vector % %2))", "problem": 61, "user": "534bde26e4b084c2834f4a81"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "537e4259e4b06839e8705e9e"}, {"code": "(fn [ks vs]\n  (loop [ks ks\n         vs vs\n         map {}]\n    (if (or (empty? ks) (empty? vs))\n      map\n      (recur (rest ks) (rest vs)\n             (assoc map (first ks) (first vs))))))", "problem": 61, "user": "5055e7f4e4b0ce54f56f0401"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "53121863e4b08068f379ecf3"}, {"code": "#(loop [k %1\n        v %2\n        m {}]\n   (if (or (empty? k) (empty? v)) m\n     (recur (rest k) (rest v) (assoc m (first k) (first v)))))", "problem": 61, "user": "537e745ae4b06839e8705ea6"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "5376966ae4b06839e8705e27"}, {"code": "(fn [& args]\n  (into {} (apply map vector args)))", "problem": 61, "user": "53834ed3e4b06839e8705edb"}, {"code": "#(reduce (fn[x y] (merge x y)) (map (fn[x y] {x y}) %1 %2))", "problem": 61, "user": "536c77f1e4b0fc7073fd6e3f"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "537f4652e4b06839e8705eb1"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "535eaa73e4b04ce2eb3ed2d4"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "532c0507e4b09d4e7a9b553c"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "534e1f56e4b084c2834f4aae"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "4f7cbf4ae4b06e829148e1b7"}, {"code": "(fn [kcoll vcoll] (apply hash-map (interleave kcoll vcoll)))", "problem": 61, "user": "53806e5be4b06839e8705ec1"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "537f9e34e4b06839e8705ebb"}, {"code": "(fn build [k v]\n  (when (and (not-empty k) (not-empty v))\n    (conj {(first k) (first v)} (build (rest k) (rest v)))\n  ))", "problem": 61, "user": "53778b90e4b06839e8705e36"}, {"code": "(fn [arg1 arg2]\n  (into {} (reverse (apply assoc {} (interleave arg1 arg2)))))", "problem": 61, "user": "537881a4e4b06839e8705e46"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "53733312e4b06d7f452d9e0a"}, {"code": "(fn [keys vals]\n  (into {} (map vector keys vals)))", "problem": 61, "user": "53889587e4b0640c7a9a589e"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "534eecaee4b084c2834f4abf"}, {"code": "(fn m2 [a b]\n  (cond \n   (empty? a) {}\n   (empty? b) {}\n   :else (assoc (m2 (rest a)\n                    (rest b))\n           (first a)\n           (first b))))", "problem": 61, "user": "5374adc3e4b06d7f452d9e27"}, {"code": "#(reduce (fn [m [k v]] (assoc m k v)) {} (partition 2 (interleave % %2)))", "problem": 61, "user": "538557aee4b06839e8705f02"}, {"code": "(fn [seq1 seq2]\n  (->> (map #(assoc {} %1 %2) seq1 seq2)\n       (apply merge )))", "problem": 61, "user": "536f871de4b0fc7073fd6e7f"}, {"code": "(comp (partial apply hash-map) interleave)", "problem": 61, "user": "538be6afe4b0640c7a9a58c9"}, {"code": "(fn [a b] (apply assoc {} (interleave a b)))", "problem": 61, "user": "53410c24e4b00652c8746eca"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "52ac41fee4b0c58976d9ac85"}, {"code": "(fn [k v]\n  (loop [k k\n         v v \n         res {}]\n    (if (or (empty? k) (empty? v))\n      res\n      (recur (rest k) (rest v) (assoc res (first k) (first v))))))", "problem": 61, "user": "538d464ee4b0b51d73faae69"}, {"code": "(fn [ks vs] (apply hash-map (interleave ks vs)))", "problem": 61, "user": "53403110e4b085b17e897da6"}, {"code": "#(apply array-map (interleave %1 %2))", "problem": 61, "user": "53838742e4b06839e8705ee0"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "514b83b4e4b0bd81940b86ce"}, {"code": "(fn [first second]\n  (apply assoc {}\n         (interleave first second)))", "problem": 61, "user": "4f35e662e4b0e243712b1ec6"}, {"code": "(fn C [ks vs]\n  (cond (empty? ks) {}\n        (empty? vs) {}\n        :else (assoc (C (rest ks) (rest vs))\n                (first ks)\n                (first vs))))", "problem": 61, "user": "51a4416ae4b0def3c5c5868c"}, {"code": "#(apply hash-map (flatten (map list %1 %2)))", "problem": 61, "user": "538d8bb8e4b0b51d73faae71"}, {"code": "#(apply assoc {} (apply interleave %&))", "problem": 61, "user": "4fe8a1f8e4b07c9f6fd12c5f"}, {"code": "#(apply hash-map(interleave %1 %2))", "problem": 61, "user": "5390347de4b0b51d73faae96"}, {"code": "(fn to-map [seqa seqb] \n  (if \n    (or (empty? seqa) (empty? seqb))\n    {}\n\t(merge\n     {(first seqa) (first seqb)}\n     (to-map (rest seqa) (rest seqb)))))", "problem": 61, "user": "538c3424e4b0b51d73faae58"}, {"code": "(fn [a b] (reduce conj {} (map vector a b)))", "problem": 61, "user": "538e29d1e4b0b51d73faae80"}, {"code": "(fn [v1 v2] (into {} (map #(do [%1 %2]) v1 v2)))", "problem": 61, "user": "5392b849e4b0b51d73faaeb1"}, {"code": "(fn [ks vs] (reduce (fn [a [k v]] (assoc a k v)) {} (map vector ks vs)))", "problem": 61, "user": "530bf87ee4b02e82168697d5"}, {"code": "#(apply assoc {} (interleave %1 %2))", "problem": 61, "user": "528410bbe4b0239c8a67adc2"}, {"code": "#(apply hash-map (interleave % %2))", "problem": 61, "user": "5383668ee4b06839e8705edd"}, {"code": "#(reduce conj (map hash-map % %2))", "problem": 61, "user": "5368fedee4b0243289761e93"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "52963cc7e4b02ebb4ef7502d"}, {"code": "(fn  [kys vals]\n  (loop [k (seq kys), v (seq vals), h (hash-map)]\n    (cond (or (empty? k) (empty? v)) h\n          :else (recur (rest k) (rest v) (assoc h (first k) (first v))))))", "problem": 61, "user": "538e36c7e4b0b51d73faae81"}, {"code": "#(into {} (map (fn [a b] [a b]) %1 %2))", "problem": 61, "user": "53973e7be4b0b51d73faaee6"}, {"code": "; similar thing to that one you did yesterday\n(fn construct-map [seq-keys seq-values]\n  (apply assoc {} (interleave seq-keys seq-values)))", "problem": 61, "user": "52b71bd2e4b0c58976d9ad4d"}, {"code": "(fn zpmp [ks vs]\n  (reduce #(assoc % (first %2) (second %2)) {} (map vector ks vs)))", "problem": 61, "user": "539a2901e4b0b51d73faaf0f"}, {"code": "(fn zmap [keys values]\n\t((fn [keys values acc]\n\t\t(if (or (empty? keys) (empty? values))\n\t\t\tacc\n\t\t\t(recur (rest keys) (rest values) (conj acc {(first keys) (first values)})))) keys values {}))", "problem": 61, "user": "539378fbe4b0b51d73faaebd"}, {"code": "(fn [k v] (apply hash-map (mapcat #(list % %2) k v)))", "problem": 61, "user": "53940789e4b0b51d73faaec3"}, {"code": "#(apply hash-map (flatten (map vector % %2)))", "problem": 61, "user": "5398305fe4b0b51d73faaef6"}, {"code": "(fn [k v] \n  (apply assoc {} (interleave k v)))", "problem": 61, "user": "539ad6b7e4b0b51d73faaf18"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "539ec9f9e4b0ca733b974491"}, {"code": "#(apply merge (map hash-map % %2))", "problem": 61, "user": "51a49b21e4b0def3c5c58694"}, {"code": "(fn\n  [keys values]\n  (loop [a {}\n         ks keys\n         vs values]\n        (if (and ks vs)\n            (recur (assoc a (first ks) (first vs)) (next ks) (next vs))\n            a)))", "problem": 61, "user": "52dfc89be4b09f7907dd1405"}, {"code": "(fn [keys vals]\n  (loop [result {}\n         keys keys\n         vals vals]\n    (if (or (empty? keys) (empty? vals))\n      result\n    (recur (assoc result (first keys) (first vals))\n           (rest keys)\n           (rest vals)))))", "problem": 61, "user": "531bad96e4b08068f379ed93"}, {"code": "(fn [l1 l2] (reduce merge (map #(hash-map %1 %2) l1 l2)))", "problem": 61, "user": "50b63c5ee4b0a86f8358ca69"}, {"code": "#( apply assoc {} (interleave %1 %2))", "problem": 61, "user": "539c9e26e4b0b51d73faaf2e"}, {"code": "(fn \n[coll1 coll2]\n(into {} (map vector coll1 coll2)))", "problem": 61, "user": "53862316e4b06839e8705f0e"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "52c49401e4b0c2d177d620de"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "53908e6be4b0b51d73faae9a"}, {"code": "#(apply hash-map (interleave %1 %2))", "problem": 61, "user": "53a068cbe4b0ca733b9744ae"}, {"code": "(fn [k v]\n  (apply assoc {} (interleave k v)))", "problem": 61, "user": "538e864ee4b0b51d73faae87"}, {"code": "(fn [ks vs] (apply merge (map (fn [k v] (hash-map k v)) ks vs)))", "problem": 61, "user": "53710c09e4b0fc7073fd6ea5"}, {"code": "(fn [k v]                                                                      \n    (reduce                                                                     \n        (fn [m e]                                                               \n           (assoc m (first e) (second e)))\n        {}                                                                    \n        (map (fn [x y] (seq [x y])) k v)))", "problem": 61, "user": "5356d00ee4b04ce2eb3ed26f"}, {"code": "#(apply sorted-map (interleave %1 %2))", "problem": 61, "user": "52fac708e4b047fd55836fff"}, {"code": "#(into {} (map vector %1 %2))", "problem": 61, "user": "536e5055e4b0fc7073fd6e6b"}, {"code": "#(apply hash-map (mapcat vector %1 %2))", "problem": 61, "user": "53976599e4b0b51d73faaeea"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "537e104ce4b06839e8705e9a"}, {"problem": 61, "code": "(fn [ks vs]\n  (loop [result {}\n         ks ks\n         vs vs]\n    (if (or (zero? (count ks)) (zero? (count vs)))\n      result\n      (recur (assoc result (first ks) (first vs)) (rest ks) (rest vs))\n    )\n  )\n)", "user": "53a36fd7e4b0f1fc74538834"}, {"problem": 61, "code": "#(loop [[e1 & r1] %1 [e2 & r2] %2 m {}]\n              (if (or (= nil e1) (= nil e2))  \n                m\n                (recur r1 r2 (assoc m e1 e2))\n              )\n            )", "user": "53a26cede4b0f1fc7453882a"}, {"problem": 61, "code": "#(reduce\n   (fn [m [k v]]\n     (assoc m k v))\n   {}\n   (partition 2 (interleave %1 %2)))", "user": "511688d5e4b0b3e208dba05a"}, {"problem": 61, "code": "#(reduce (fn [s p] (assoc s (first p) (second p))) {} (map (fn [k v] [k v]) %1 %2))", "user": "4f041de1535dcb61093f6ba5"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "53a739b0e4b0ef122a8689d0"}, {"problem": 61, "code": "(fn [k v] (reduce #(into %1 {(first %2) (second %2)}) {} (map #(list %1 %2) k v)))", "user": "53a1b5c8e4b0ca733b9744c1"}, {"problem": 61, "code": "(fn [key val] (apply merge (map hash-map key val)))", "user": "53a8d9efe4b047364c04442d"}, {"problem": 61, "code": "(fn [k v]\n  (loop [m {} ks (seq k) vs (seq v)]\n    (if (and ks vs)\n      (recur (assoc m (first ks) (first vs)) (next ks) (next vs))\n      m)\n    )\n  )", "user": "53a19dece4b0ca733b9744c0"}, {"problem": 61, "code": "(fn [ks vs]\n    (loop [ks ks\n           vs vs\n           acc {}]\n      (if (or (empty? ks) (empty? vs))\n        acc\n        (recur (rest ks) (rest vs) (conj acc {(first ks) (first vs)})))))", "user": "51c116d4e4b0c9c822882942"}, {"problem": 61, "code": "(fn [k v]\n  ((fn blah [k v a]\n    (if (or (= k '()) (= v '()))\n      a\n      (blah (rest k) (rest v) (assoc a (first k) (first v)))))\n   k v {}))", "user": "53aaaf7ae4b047364c044444"}, {"problem": 61, "code": "(fn zpmp [ks vs]\n  (if (or (empty? ks) (empty? vs))\n    {}\n    (conj {(first ks), (first vs)} (zpmp (rest ks) (rest vs)))\n  )\n)", "user": "5225a0f5e4b01819a2de430e"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply hash-map (interleave ks vs)))", "user": "53a7e3b9e4b047364c044423"}, {"problem": 61, "code": "(fn [a b]\n  (into {} (map #(hash-map % %2) a b)))", "user": "53ac4719e4b047364c04445c"}, {"problem": 61, "code": "#(apply sorted-map (interleave %1 %2))", "user": "53a5c7ffe4b0ef122a8689c4"}, {"problem": 61, "code": "(fn [x y]\n  (->> (map vector x y)\n       (flatten)\n       (apply hash-map)))", "user": "52616198e4b03e8d9a4a705e"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "52e657e4e4b09f7907dd1472"}, {"problem": 61, "code": "(comp (partial apply hash-map) interleave)", "user": "526e5159e4b03e8d9a4a7316"}, {"problem": 61, "code": "#(apply assoc {} (interleave % %2))", "user": "4fe49706e4b0e8f79898feb7"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "5327c591e4b09d4e7a9b54ff"}, {"problem": 61, "code": "(fn [k v] (reduce #(assoc %1 (first %2) (second %2)) {} (clj-stacktrace.utils/zip k v)))", "user": "53a0ab8ce4b0ca733b9744b3"}, {"problem": 61, "code": "(fn [s1 s2] (into {} (map vector s1 s2)))", "user": "5396c94be4b0b51d73faaee3"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "538f4c1de4b0b51d73faae8c"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "53b15e6ee4b047364c04448f"}, {"problem": 61, "code": "(fn [k v]\n  (into {} (map #(vector %1 %2) k v)))", "user": "532bce35e4b09d4e7a9b5536"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "53ae0c50e4b047364c044471"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "51bf0ccee4b013aa0d74b811"}, {"problem": 61, "code": "(fn\n  [k v]\n  (apply assoc {} (interleave k v)))", "user": "538c6db7e4b0b51d73faae5a"}, {"problem": 61, "code": "(fn [k v]\n  (reduce #(assoc %1 (first %2) (last %2)) {} (partition 2 (interleave k v))))", "user": "53b182a5e4b047364c044491"}, {"problem": 61, "code": "(fn map-construct [ret keys-list values-list] \n    (if (or (= 0 (count keys-list)) (= 0 (count values-list)))\n        ret\n        (map-construct (into ret [[(first keys-list) (first values-list)]]) \n                       (rest keys-list)\n                       (rest values-list)))) {}", "user": "53a94b63e4b047364c044434"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "53ae16e2e4b047364c044472"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "53acaf1fe4b047364c04445f"}, {"problem": 61, "code": "#(into {} (map (fn [a b] [a b]) % %2))", "user": "53ad28ede4b047364c044462"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "52d07cc5e4b07d0d72b273bb"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "52f0ea04e4b05e3f0be25ee6"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (map vector ks vs))\n  )", "user": "5245e320e4b09dbe66b56177"}, {"problem": 61, "code": "(fn zm [ks vs]\n  (into {} (map vector ks vs)))", "user": "53b39d82e4b047364c0444a6"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "53b71b94e4b047364c0444cd"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "5382704be4b06839e8705ed4"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "539fa040e4b0ca733b97449f"}, {"problem": 61, "code": "(fn [one two]\n  (apply hash-map (interleave one two)))", "user": "5391ab43e4b0b51d73faaea6"}, {"problem": 61, "code": "(fn [a b] (into {} (map #(vector % %2) a b)))", "user": "539ddf25e4b0b51d73faaf3e"}, {"problem": 61, "code": "(fn [keys vals]\n  (into {} (map #(vector %1 %2) keys vals)))", "user": "539c88e1e4b0b51d73faaf2c"}, {"problem": 61, "code": "(fn [keys vals] (apply hash-map (interleave keys vals)))", "user": "53858594e4b06839e8705f05"}, {"problem": 61, "code": "(fn f [k v] (apply assoc {} (interleave k v)))", "user": "53b3ea79e4b047364c0444ab"}, {"problem": 61, "code": "(fn [a b]\n     (apply hash-map (interleave a b)))", "user": "4f867b25e4b033992c121c51"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "53b4bddae4b047364c0444b9"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "53b7c21ae4b047364c0444d4"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "53bb512ce4b047364c044503"}, {"problem": 61, "code": "(fn make-map [keys vals]\n          (apply hash-map (interleave keys vals)))", "user": "53bd6fcfe4b0d9a98559a6d0"}, {"problem": 61, "code": "(fn foo [k v] \n  (merge  \n   (if \n     (or \n      (= () (rest k)) \n      (= () (rest v)))\n     {} \n     (foo (rest k) (rest v)))\n     (assoc \n     {} \n     (first k) \n     (first v))))", "user": "5143824ae4b0b4fb4ace5f36"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "53b2a7f8e4b047364c04449c"}, {"problem": 61, "code": "(fn [a b]\n   (loop [l a r b output []]\n     (if (or (empty? l) (empty? r))\n       (apply hash-map output)\n       (recur (rest l) (rest r) (concat output [(first l) (first r)]))\n     )\n   )\n)", "user": "53beacf9e4b0d9a98559a6e3"}, {"problem": 61, "code": "(fn my-map\n  [colla collb]\n  (into {} (map #(vector % %2) colla collb)))", "user": "53bf0913e4b0c98a41f5cc99"}, {"problem": 61, "code": "#(apply assoc {} (interleave % %2))", "user": "52b434c9e4b0c58976d9ad1c"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "53c1ce3ee4b00fb29b221268"}, {"problem": 61, "code": "(fn [x y] (apply array-map (interleave x y)))", "user": "539c9d7ee4b0b51d73faaf2d"}, {"problem": 61, "code": "(fn [keys vals]\n  (apply hash-map (interleave keys vals)))", "user": "5379306fe4b06839e8705e50"}, {"problem": 61, "code": "(fn [keys vals] \n  (loop [map {}\n         ks (seq keys)\n         vs (seq vals)]\n    (if (and ks vs)\n      (recur (assoc map (first ks) (first vs))\n             (next ks)\n             (next vs))\n      map)))", "user": "53791ab7e4b06839e8705e4d"}, {"problem": 61, "code": "#(into {} (map (fn [x y] {x y}) %1 %2))", "user": "53c38b8ce4b00fb29b22127b"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "53bd8d27e4b0d9a98559a6d6"}, {"problem": 61, "code": "(fn [xs ys] (apply hash-map (mapcat #(list % %2) xs ys)))", "user": "504f5804e4b0a02f9cffde72"}, {"problem": 61, "code": "(fn [a b] (apply hash-map (interleave a b)))", "user": "539b4268e4b0b51d73faaf1c"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "538db083e4b0b51d73faae74"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5364ab34e4b0243289761e64"}, {"problem": 61, "code": "#(into {} (map (fn [x y] [x y]) %1 %2))", "user": "53c74cfce4b00fb29b2212a7"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "53bed4b5e4b0c98a41f5cc94"}, {"problem": 61, "code": "(fn [x y]\n  (loop [x x\n         y y\n         acc {}]\n    (if (or (empty? x) (empty? y)) acc\n      (recur (rest x) (rest y) (assoc acc (first x) (first y))))))", "user": "53cbe808e4b00fb29b2212d4"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "53ce8cb5e4b00fb29b2212f2"}, {"problem": 61, "code": "(fn [c1 c2] (into {} (map #(vector %1 %2) c1 c2)))", "user": "536b9d8ae4b0243289761ebe"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "53572767e4b04ce2eb3ed277"}, {"problem": 61, "code": "(fn [ks vs] (apply hash-map (flatten (map (fn [k v] [k v] ) ks vs))))", "user": "53347274e4b0656e627bfd6b"}, {"problem": 61, "code": "(fn [k v] (apply array-map (interleave k v)))", "user": "53cd4920e4b00fb29b2212de"}, {"problem": 61, "code": "(fn [c1 c2] (apply merge (map #(hash-map %1 %2) c1 c2)))", "user": "53c126fce4b00fb29b22125b"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "4e894068535d4ef0aa30db97"}, {"problem": 61, "code": "(fn [x y] (apply hash-map (interleave x y)))", "user": "53cdb2c4e4b00fb29b2212e5"}, {"problem": 61, "code": "(fn [coll-1 coll-2]\n  (into {} (map vector coll-1 coll-2)))", "user": "53b05a36e4b047364c044481"}, {"problem": 61, "code": "(fn M [ks vs]\n  (if (or (empty? ks) (empty? vs))\n    {}\n  (merge (hash-map (first ks) (first vs)) (M (rest ks) (rest vs)))))", "user": "53ca23e3e4b00fb29b2212c6"}, {"problem": 61, "code": "#(reduce into (map hash-map %1 %2))", "user": "53c0bc5fe4b00fb29b221257"}, {"problem": 61, "code": "(fn f61\n  [[a1 a2 a3 a4] [b1 b2 b3 b4]]\n  (if (nil? a3)\n    (hash-map a1 b1 a2 b2)\n    (hash-map a1 b1 a2 b2 a3 b3)))", "user": "53abf519e4b047364c044456"}, {"problem": 61, "code": "(fn [xs ys]\n  (apply assoc {}\n         (interleave xs ys)))", "user": "5344fe13e4b084c2834f4a32"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "4e6961f0535d8ccf87e9fe9b"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "52ee9ac7e4b05e3f0be25ec9"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "536c1531e4b0fc7073fd6e36"}, {"problem": 61, "code": "(fn [keys vals]\n  (apply hash-map (flatten (map #(list %1 %2) keys vals))))", "user": "53ca41dae4b00fb29b2212c8"}, {"problem": 61, "code": "(fn [ks vs]\n  (reduce\n      (fn [s [k v]] (assoc s k v))\n      {}\n      (map list ks vs)))", "user": "53d78b64e4b0e771c3025466"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "51c8f1d8e4b07ef393169e5d"}, {"problem": 61, "code": "#(loop [m {} k %1 v %2] \n   (if (and k v) \n     (recur (assoc m (first k) (first v)) (next k) (next v)) \n     m))", "user": "51febd40e4b0f1313d468a76"}, {"problem": 61, "code": "(fn [a b] (apply merge (map hash-map a b)))", "user": "531902b1e4b08068f379ed77"}, {"problem": 61, "code": "(fn [x y] (apply assoc {} (interleave x y)))", "user": "53d5d24de4b0e771c302544a"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "4e6b8ac8535d8ccf87e9ff19"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "53da19fde4b0e771c3025484"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "53ce4cd4e4b00fb29b2212ef"}, {"problem": 61, "code": "(fn [c1 c2] (reduce into (map #(hash-map %1 %2) c1 c2)))", "user": "53d6cf90e4b0e771c302545c"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "53dcdde4e4b0d874e779ae24"}, {"problem": 61, "code": "(fn mkmap\n  ([keys vals] (mkmap keys vals {}))\n  ([keys vals mp] (if (or (empty? keys) (empty? vals))\n                    mp\n                    (mkmap (rest keys) (rest vals) (merge mp {(first keys) (first vals)})))))", "user": "53ddd44be4b0d874e779ae2e"}, {"problem": 61, "code": "(fn zipi [ks vs] (if (or (empty? ks) (empty? vs)) \n                   {}\n                   (assoc \n                     (zipi (rest ks) (rest vs))\n                     (first ks)\n                     (first vs))))", "user": "53de622ce4b0d874e779ae34"}, {"problem": 61, "code": "(fn [xs ys]\n    (apply hash-map (interleave xs ys))\n    )", "user": "53c3397be4b00fb29b221279"}, {"problem": 61, "code": "(fn [c1 c2]\n  (apply hash-map (interleave c1 c2)))", "user": "51c6eabde4b07ef393169e3c"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "53cdbad1e4b00fb29b2212e6"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "53b85932e4b047364c0444db"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "53dcf474e4b0d874e779ae25"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "53e19461e4b0d874e779ae59"}, {"problem": 61, "code": "(fn [ks vls]\n  (into {} (map vector ks vls)))", "user": "53a83c74e4b047364c044426"}, {"problem": 61, "code": "#(apply assoc {} (interleave % %2))", "user": "53d0d7a9e4b00fb29b22130c"}, {"problem": 61, "code": "(fn [ks vs] (apply hash-map (interleave ks vs)))", "user": "53dc94c8e4b094d41abdfefc"}, {"problem": 61, "code": "(fn map-maker [k v] (if (or (empty? k) (empty? v)) {}\n                      (merge {(first k) (first v)} (map-maker (rest k) (rest v)))))", "user": "53e2ac1ae4b036ad0777e3f3"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "53dfdf01e4b0d874e779ae46"}, {"problem": 61, "code": "#(apply assoc {} (flatten(map vector % %2)))", "user": "53e241a6e4b036ad0777e3f0"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "539dcb24e4b0b51d73faaf3d"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "51910da7e4b0f8ef0be96bf9"}, {"problem": 61, "code": "(fn [k v] (apply assoc {} (flatten (map #(vector %1 %2) k v))))", "user": "53da8fede4b0e771c30254a3"}, {"problem": 61, "code": "(fn [ks vs] (reduce conj (map (fn [k v] {k v}) ks vs)))", "user": "53dadf1de4b0e771c30254ad"}, {"problem": 61, "code": "#( into {} ( map vector %1 %2 ) )", "user": "516d227fe4b06f078fab252d"}, {"problem": 61, "code": "#(apply hash-map (mapcat list %1 %2))", "user": "53e4fa2ce4b036ad0777e454"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "530bae80e4b02e82168697d0"}, {"problem": 61, "code": "(fn [a b] (into {} (map #(vector %1 %2) a b)))", "user": "53c649d3e4b00fb29b221297"}, {"problem": 61, "code": "(fn [x y] (apply array-map (flatten (map (fn [x y] (list x y)) x y))))", "user": "52f304b4e4b05e3f0be25f07"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "53d28800e4b00fb29b22131e"}, {"problem": 61, "code": "(fn [k v](into {}(map #(assoc {} %1 %2) k v)))", "user": "538d70abe4b0b51d73faae6e"}, {"problem": 61, "code": "(fn [x y] (into {} (mapcat (fn [i j] {i j}) x y)))", "user": "53e91473e4b036ad0777e495"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "52ba2639e4b07a9af57922cb"}, {"problem": 61, "code": "(fn [a b]\n  (let [len (min (count a) (count b))]\n    (loop [acc {}\n           i 0]\n      (if (= i len)\n        acc\n        (recur (assoc acc (get a i) (get b i))\n               (inc i))))))", "user": "53e30fcae4b036ad0777e3fc"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "53e76bb2e4b036ad0777e47d"}, {"problem": 61, "code": "#(apply hash-map (mapcat vector %1 %2))", "user": "51b8d3d5e4b050a1176cd69d"}, {"problem": 61, "code": "#(reduce conj (map hash-map %1 %2))", "user": "53d2afede4b00fb29b221321"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "53ecac57e4b0d648e757f4b3"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "5343753ae4b084c2834f4a1b"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "53dfbc75e4b0d874e779ae44"}, {"problem": 61, "code": "(fn [k v] (into {} (map vector k v)))", "user": "53ee7f2ee4b0d648e757f4cf"}, {"problem": 61, "code": "(fn [kl vl] \n  (loop [m {} k (seq kl) v (seq vl)] \n    (if (and k v) \n      (recur (assoc m (first k) (first v)) (next k) (next v)) \n      m)))", "user": "528d6b10e4b0239c8a67aec3"}, {"problem": 61, "code": "(fn [ xs ys]  (into {} (for [ [key value] (map vector xs ys) ]  {key value} )))", "user": "52d24f60e4b099d49816f0a8"}, {"problem": 61, "code": "(fn [c1 c2] (apply hash-map (interleave c1 c2)))", "user": "50856bd1e4b004985b776e4c"}, {"problem": 61, "code": "(fn my-zipmap [keys vals]\n  (loop [my-map {}\n         my-keys (seq keys)\n         my-vals (seq vals)]\n    (if (and my-keys my-vals)\n      (recur (assoc my-map (first my-keys) (first my-vals))\n             (next my-keys)\n             (next my-vals))\n      my-map)))", "user": "53f17931e4b0742d9025b0dd"}, {"problem": 61, "code": "(fn [a b] (reduce #(into %1 (apply hash-map %2)) {} (map list a b)))", "user": "52eb2ec9e4b0705949c44439"}, {"problem": 61, "code": "(fn [v1 v2] (apply merge (map #(assoc {} %1 %2) v1 v2)))", "user": "53ea72b6e4b036ad0777e4e5"}, {"problem": 61, "code": "(fn z-map [k v]\n (reduce merge (map #(%1 %2) (map #(partial hash-map %) k) v)) )", "user": "53d70f3be4b0e771c302545f"}, {"problem": 61, "code": "(fn [k v]\n  (apply hash-map (mapcat vector k v)))", "user": "5360f043e4b0243289761e3c"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "53e4b5a3e4b036ad0777e44b"}, {"problem": 61, "code": "(fn [[& xs] [& ys]]\n  (loop [coll1 xs\n         coll2 ys\n         mp {}]\n    (if-not (or (empty? coll1) (empty? coll2))\n      (recur (rest coll1) (rest coll2) (assoc mp (first coll1) (first coll2)))\n      mp)))", "user": "53e92aafe4b036ad0777e49a"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "53e9a15be4b036ad0777e4ae"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "53ea5307e4b036ad0777e4e2"}, {"problem": 61, "code": "(fn [left right]\n  (apply merge (map hash-map left right)))", "user": "53f50c03e4b0db01ade6f9ca"}, {"problem": 61, "code": "#(loop [i %1\n         j %2\n         k {}]\n    (if (or (empty? i) (empty? j))\n      k\n      (recur (rest i) (rest j) (assoc k (first i) (first j)))))", "user": "53d5a63be4b0e771c3025449"}, {"problem": 61, "code": "(fn [keys vals]\n    (loop [map {}\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map)))", "user": "537b1083e4b06839e8705e64"}, {"problem": 61, "code": "#(into {} (map (fn [k v] [k v]) %1 %2))", "user": "538ca203e4b0b51d73faae5f"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply hash-map (interleave ks vs)))", "user": "53ea3a63e4b036ad0777e4dc"}, {"problem": 61, "code": "(fn my-zipmap [keys vals]\n  (let [f (fn f [acc ks vs]\n            (if (or (empty? ks) (empty? vs))\n              acc\n              (f (assoc acc (first ks) (first vs)) (rest ks) (rest vs))))]\n    (f {} keys vals)))", "user": "53e27bf1e4b036ad0777e3f2"}, {"problem": 61, "code": "(fn [x y] (into {} (map (fn [a b] [a b]) x y)))", "user": "513e8141e4b02b2a3d8235c1"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "53f035c2e4b0742d9025b0d2"}, {"problem": 61, "code": "(fn [ks vs] (apply merge (map (fn [k v] {k v}) ks vs)))", "user": "53f6d555e4b0db01ade6f9e5"}, {"problem": 61, "code": "(fn my-mkmap\n  ([ks vs] (my-mkmap ks vs {}))\n  ([[k & ks] [v & vs] out]\n    (let [nout  (into out {k v})\n          stop (or (empty? ks) (empty? vs))]\n      (if stop\n        nout\n        (recur ks vs nout)\n      )\n    )\n  )\n)", "user": "53edb628e4b0d648e757f4c8"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "53cd421ce4b00fb29b2212dd"}, {"problem": 61, "code": "#(loop [[hkey & tkey] %1\n        [hval & tval] %2\n        acc {}]\n   (if (and hkey hval)\n     (recur tkey tval (assoc acc hkey hval))\n     acc))", "user": "53f7820be4b0de5c41848560"}, {"problem": 61, "code": "(fn m[k v]\n   (reduce merge\n     (map\n       #(assoc {} (first %) (second %))\n       (partition 2 (interleave k v)))))", "user": "5398123ee4b0b51d73faaef3"}, {"problem": 61, "code": "#(apply merge (map hash-map %1 %2))", "user": "53ed2fafe4b0d648e757f4c1"}, {"problem": 61, "code": "(fn zipup [keyz valuez]\n   (if (and (next keyz) (next valuez))\n     (assoc (zipup (rest keyz) (rest valuez)) (first keyz) (first valuez))\n     {(first keyz) (first valuez)})\n)", "user": "53ed6976e4b0d648e757f4c4"}, {"problem": 61, "code": ";returns them \"backwards\" for display, but maps are unordered anyway\n(fn e-61 [keys vals]\n  (apply merge (map (fn [k v] {k v}) keys vals)))", "user": "53bd7080e4b0d9a98559a6d1"}, {"problem": 61, "code": "(fn peu [x y] (if (or (empty? x) (empty? y)) {} (conj (peu (rest x) (rest y)) (hash-map (first x) (first y)))))", "user": "53fc8424e4b0de5c418485b3"}, {"problem": 61, "code": "(fn[k v] (apply assoc {} (interleave k v)))", "user": "53e9681de4b036ad0777e4a4"}, {"problem": 61, "code": "#(reduce conj (map hash-map %1 %2))", "user": "53f75957e4b0de5c4184855d"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (map #(vector %1 %2) ks vs)))", "user": "53fb5256e4b0de5c4184857f"}, {"problem": 61, "code": "(fn to-map [to-key to-value]\n  (let [len-to-key (count to-key)\n        len-to-value (count to-value)\n        min-len (min len-to-key len-to-value)\n        key-value (for [i (range min-len)]\n                    [(nth to-key i) (nth to-value i)])\n        flat-key-value (flatten key-value)]\n    (apply hash-map flat-key-value)))", "user": "524b827ce4b09eba1c0223d7"}, {"problem": 61, "code": "(fn [k v]\n                 (loop [kk k\n                        vv v\n                        m {}]\n                   (if (or (empty? kk) (empty? vv))\n                     m\n                     (recur (rest kk) (rest vv)\n                            (merge {(first kk) (first vv)} m))\n                   )\n                 ))", "user": "53f592b7e4b0db01ade6f9d0"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "53968a70e4b0b51d73faaee0"}, {"problem": 61, "code": "(fn [x y] (into {} (map #(hash-map %1 %2) x y)))", "user": "53f6566ee4b0db01ade6f9de"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "53d86564e4b0e771c302546b"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "53fe1c3be4b0de5c418485f2"}, {"problem": 61, "code": "(fn [xs1 xs2]\n  (into {}\n     (map (fn [a b] [a b]) xs1 xs2)\n  )\n)", "user": "525b4e8de4b0cb4875a45d0f"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5400fc30e4b0de5c4184861b"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "53aef31ce4b047364c04447b"}, {"problem": 61, "code": "(fn [ks' vs']\n  (letfn [(go [ks vs]\n            (if (or (empty? ks) (empty? vs))\n              {}\n              (merge {(first ks) (first vs)}\n                     (go (rest ks) (rest vs)))))]\n    (go ks' vs')))", "user": "53ef7f77e4b0742d9025b0ce"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "53f77b6ae4b0de5c4184855f"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "53fcdd1ae4b0de5c418485dd"}, {"problem": 61, "code": "(fn construct-map [keys values]\n  (letfn [(construct-map* [result\n                           [k & ks :as inter-keys]\n                           [v & vs :as inter-values]]\n            (if (or (empty? inter-keys) (empty? inter-values))\n              result\n              (recur (assoc result k v) ks vs)))]\n    (construct-map* {} keys values)))", "user": "53fd66a4e4b0de5c418485e3"}, {"problem": 61, "code": "(fn mm [key val]\n  (apply merge (map #(assoc nil %1 %2) key val)))", "user": "535f0cbde4b04ce2eb3ed2d9"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "53fe459ae4b0de5c418485f4"}, {"problem": 61, "code": "(fn [coll1 coll2]\n  (apply assoc {} (interleave coll1 coll2)))", "user": "53bf9cfbe4b0c98a41f5cca4"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "523630eee4b05f3be1c7c8e8"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "53f35c34e4b0742d9025b0f4"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "52c08c59e4b07a9af5792351"}, {"problem": 61, "code": "#(apply (partial assoc {}) (interleave % %2))", "user": "5405ae2be4b0addc1aec6671"}, {"problem": 61, "code": "(fn[x y] (loop[a x b y result {}] (if (or (empty? a) (empty? b)) result (recur (rest a) (rest b) (conj result {(first a) (first b)})))))", "user": "53f1c05ee4b0742d9025b0e1"}, {"problem": 61, "code": "(fn [x y] (apply hash-map (interleave x y)))", "user": "53fb4843e4b0de5c4184857d"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5401aefbe4b0df28a13c62c7"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "53be3ee7e4b0d9a98559a6df"}, {"problem": 61, "code": "(fn [ks vs] \n   (loop [iks ks ivs vs acc {}] \n     (if (or (empty? iks) (empty? ivs))\n       acc \n       (recur (rest iks) (rest ivs) (assoc acc (first iks) (first ivs))))))", "user": "53c06438e4b0c98a41f5ccb0"}, {"problem": 61, "code": "(fn test [keys vals]\n  (loop [[keyshead & keystail] keys\n         [valshead & valstail] vals\n         result {}]\n      (if (or (nil? keyshead) (nil? valshead))\n        result\n        (recur keystail valstail (conj result {keyshead valshead}))\n        )\n    )\n)", "user": "54021f13e4b0df28a13c62cc"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "4ff4bed0e4b0678c553fc35f"}, {"problem": 61, "code": "(fn [k v]\n  (loop [out {} kys k vls v]\n    (if (and (> (count kys) 0) (> (count vls) 0))\n      (recur (assoc out (first kys) (first vls)) (rest kys) (rest vls))\n      out)))", "user": "4daeff24edd6309eace4d16e"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "53e8c684e4b036ad0777e48b"}, {"problem": 61, "code": "(fn [c1 c2]\n  (apply hash-map (interleave c1 c2)))", "user": "53dd37aee4b0d874e779ae28"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "540b2dcbe4b0addc1aec66f4"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "524025bce4b0ad64fa01030f"}, {"problem": 61, "code": "(fn [ks vs]\n         (let [max (if (> (count ks) (count vs)) (count vs) (count ks))]\n           (into {} (map (fn [i]\n                           {(nth ks i) (nth vs i)})\n                         (range max)))))", "user": "5251b11be4b0541d1855b87b"}, {"problem": 61, "code": "#(apply merge (map hash-map %1 %2))", "user": "534bfc71e4b084c2834f4a88"}, {"problem": 61, "code": "(comp (partial reduce #(assoc %1 (first %2) (second %2)) {})\n      (partial map vector))", "user": "5097ea89e4b087ccf61a7af4"}, {"problem": 61, "code": "(fn [keys values]\n  (apply hash-map (interleave keys values)))", "user": "540d5085e4b0addc1aec670e"}, {"problem": 61, "code": "(fn sk-zip-map [l r]\n  (into {} (map #(vector %1 %2) l r)))", "user": "51d42f44e4b013d740b70ddb"}, {"problem": 61, "code": "(fn [x y]\n  (into {} (mapcat #(hash-map % %2) x y)))", "user": "539f4e9ee4b0ca733b974498"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "53b9bb15e4b047364c0444ed"}, {"problem": 61, "code": "(fn fun [x y] (apply hash-map (interleave x y)))", "user": "540479e7e4b0addc1aec665a"}, {"problem": 61, "code": "(fn\n   [arg1 arg2]\n   (reduce merge (map #(hash-map %1 %2) arg1 arg2)))", "user": "53d6b266e4b0e771c3025459"}, {"problem": 61, "code": "(fn [x y] (apply assoc {} (interleave x y)))", "user": "5409f8eae4b0addc1aec66e6"}, {"problem": 61, "code": "(fn [a b]\n  (reduce #(apply assoc %1 %2)\n          {}\n          (map list a b)))", "user": "54084784e4b0addc1aec66c9"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "53f3a4ace4b0742d9025b0f7"}, {"problem": 61, "code": "(fn [a b]\n  (into {} (map #(vector %1 %2) a b)))", "user": "53214efbe4b09d4e7a9b54b2"}, {"problem": 61, "code": "(fn [col1 col2]\n   (into {} (map hash-map col1 col2)))", "user": "54094824e4b0addc1aec66da"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "53f2370ee4b0742d9025b0e7"}, {"problem": 61, "code": "(fn [ks vs] \n  (into {} (map vector ks vs)))", "user": "540e17c3e4b0addc1aec6719"}, {"problem": 61, "code": "(fn mymap \n  [k v]\n  (reduce merge {} (map hash-map k v)))", "user": "54091b82e4b0addc1aec66d5"}, {"problem": 61, "code": "(letfn \n  [(f [[k & ks :as kss] [v & vs :as vss]] \n      (if (and (seq kss) (seq vss)) \n        (conj (f ks vs) {k v}) {}))] f)", "user": "540470dae4b0addc1aec6658"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "53e76728e4b036ad0777e47c"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "541096bde4b01498b1a719b2"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "54133900e4b01498b1a719de"}, {"problem": 61, "code": "(fn [coll1 coll2]\n  (into {} (map #(vector %1 %2) coll1 coll2)))", "user": "53f6bfd9e4b0db01ade6f9e4"}, {"problem": 61, "code": "(fn [ks vs]\n  (loop [ks ks\n         vs vs\n         acc {}]\n    (if (or (empty? ks) (empty? vs))\n      acc\n      (recur (rest ks) (rest vs) (assoc acc (first ks) (first vs)))\n    )\n  )\n)", "user": "540f09b9e4b0addc1aec6725"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "53fddd71e4b0de5c418485eb"}, {"problem": 61, "code": "(fn [k v]\n  (into {} (map (fn [ke va] [ke va]) k v)))", "user": "53480973e4b084c2834f4a52"}, {"problem": 61, "code": "#(into {} (mapcat (comp list vec list) %1 %2))", "user": "541619e8e4b01498b1a719f9"}, {"problem": 61, "code": "(fn my-zipmap [coll1 coll2]\n  (if (or (empty? coll1) (empty? coll2))\n    {}\n    (assoc (my-zipmap (rest coll1) (rest coll2)) (first coll1) (first coll2))))", "user": "54125eeee4b01498b1a719d3"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "541b37d2e4b01498b1a71a64"}, {"problem": 61, "code": "(fn [a b]\n  (apply hash-map\n    (interleave a b)))", "user": "540c54a7e4b0addc1aec6700"}, {"problem": 61, "code": "(fn [n m] (apply hash-map (interleave n m)))", "user": "51c1b644e4b0d204dbe2ca12"}, {"problem": 61, "code": "(fn [xs ys] (into {} (map vector xs ys)))", "user": "4fc9a977e4b0ee37620e1847"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "52382d91e4b0fae3832e99f0"}, {"problem": 61, "code": "(fn [a b]\n  (let [t (min (count a) (count b))] (reduce #(if (< (count %1) t) (assoc %1 %2 (get b (count %1))) %1) {} a)))", "user": "52cda980e4b07d0d72b2737b"}, {"problem": 61, "code": "#(into {} (map vec (partition 2 (interleave %1 %2))))", "user": "5282f54be4b0239c8a67ada0"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "54187e84e4b01498b1a71a1b"}, {"problem": 61, "code": "#(apply array-map (interleave % %2))", "user": "52541fe6e4b0541d1855b964"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "540e0637e4b0addc1aec6717"}, {"problem": 61, "code": "(fn f61 [k v]\n  (apply array-map (interleave k v))\n\n  )", "user": "526698c9e4b03e8d9a4a7144"}, {"problem": 61, "code": "(fn [c1 c2]\n  (apply merge (map\n   (fn [el1 el2]\n     {el1 el2})\n   c1 c2)))", "user": "52d6d490e4b09f7907dd1369"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "511036c5e4b04c71fce993ee"}, {"problem": 61, "code": "(fn [l1 l2]\n  (apply assoc {} (interleave l1 l2)))", "user": "541c1e46e4b01498b1a71a70"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "541ae7dbe4b01498b1a71a61"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5412ef7ee4b01498b1a719da"}, {"problem": 61, "code": "(fn [ks,vs]\n    (apply merge \n        (map (fn [k,v] {k v}) ks vs)))", "user": "54213a8fe4b01498b1a71aaf"}, {"problem": 61, "code": "(fn mmap [kys vls]\n  (apply assoc (cons {} (interleave kys vls))))", "user": "540efe2ee4b0addc1aec6724"}, {"problem": 61, "code": "(fn\n  [keys vals]\n  (loop [result {}\n         ks (seq keys)\n         vs (seq vals)]\n    (if (and ks vs)\n      (recur (assoc result (first ks) (first vs))\n             (next ks)\n             (next vs))\n      result)))", "user": "53e0001be4b0d874e779ae48"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map vector ks vs)))", "user": "540b4c4de4b0addc1aec66f6"}, {"problem": 61, "code": "#(apply merge (map hash-map % %2))", "user": "541475afe4b01498b1a719eb"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5409a12fe4b0addc1aec66df"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "54246fcce4b01498b1a71aed"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "4eb3fcba535d7eef30807359"}, {"problem": 61, "code": "(fn [keys vals]\n  (apply hash-map (mapcat list keys vals)))", "user": "5424c523e4b01498b1a71b03"}, {"problem": 61, "code": "(fn [keys values] (reduce (fn [memo [key value]] (assoc memo key value) ) {} (map list keys values)))", "user": "516ee939e4b06aac486e5b34"}, {"problem": 61, "code": "(fn myzm [ks vs]\n    (into {} (map vec (partition 2 (interleave ks vs)))))", "user": "5429986ce4b01498b1a71b3b"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "4e7e032b535db169f9c796fc"}, {"problem": 61, "code": "#(reduce conj (map hash-map %1 %2))", "user": "54302691e4b0dad94371f2d7"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "53a01fb1e4b0ca733b9744a6"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "542f574be4b0dad94371f2d0"}, {"problem": 61, "code": "(fn [k v] (into {} (map #(vector %1 %2) k v)))", "user": "542c22bde4b0dad94371f29e"}, {"problem": 61, "code": "(fn [k, v] \n  (loop [remainingKeys k\n         remainingValues v\n         output {}]\n    (if (or (= remainingKeys []) (= remainingValues []))\n      output\n      (recur (rest remainingKeys) (rest remainingValues) (assoc output (first remainingKeys) (first remainingValues))))))", "user": "54336443e4b0b6b47310fcde"}, {"problem": 61, "code": "#(apply array-map (interleave %1 %2))", "user": "54344721e4b0b6b47310fcea"}, {"problem": 61, "code": "#(apply conj (map hash-map %1 %2))", "user": "532a033be4b09d4e7a9b551f"}, {"problem": 61, "code": "(fn f [keys vals]\n   (loop [k keys v vals acc {}]\n     (if (or (empty? k) (empty? v))\n       acc\n       (recur (rest k) (rest v) (assoc acc (first k) (first v))))))", "user": "52ee0de4e4b05e3f0be25ec1"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5310e968e4b08068f379ecdd"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "54149f2fe4b01498b1a719ec"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "54397533e4b032a45b86931d"}, {"problem": 61, "code": "(fn [left, right] \n  (loop [x left,\n         y right,\n         acc {}]\n    (if (or (empty? x) (empty? y))\n      acc\n      (recur (rest x) (rest y) (assoc acc (first x) (first y))))\n  )\n)", "user": "543496e1e4b0b6b47310fcf2"}, {"problem": 61, "code": "#(apply assoc {} (interleave % %2))", "user": "542c44f8e4b0dad94371f2a1"}, {"problem": 61, "code": "(fn\n\t[a b]\n\t(reduce \n     #(let\n        [x (nth b (.indexOf a %2) nil)]\n        (if x\n          (assoc %1 %2 x) %1)) {} a))", "user": "53da3fcde4b0e771c3025497"}, {"problem": 61, "code": "#(apply assoc {} (interleave % %2))", "user": "543a68d3e4b032a45b869326"}, {"problem": 61, "code": "(fn [a b] (apply array-map (interleave a b)))", "user": "53e745a1e4b036ad0777e479"}, {"problem": 61, "code": "(fn [ks vs] (apply hash-map (interleave ks vs)))", "user": "543d26e5e4b032a45b86934a"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "542edb4ae4b0dad94371f2c8"}, {"problem": 61, "code": "(fn [k v]\n    (into {} (map vector k v))\n    )", "user": "515ebde3e4b01e5d11ccd0a8"}, {"problem": 61, "code": "#(apply assoc {}\n          (interleave %1 %2))", "user": "52b2f9cae4b0c58976d9acfb"}, {"problem": 61, "code": "(fn [a b] (into {} (map vec (partition 2 (interleave a b)))))", "user": "542baf7ce4b0dad94371f291"}, {"problem": 61, "code": "#(apply hash-map ((fn __ \n                                  [coll1 coll2]\n                                  (if-let [ [x1 & xs1] coll1]\n                                    (if-let [ [x2 & xs2] coll2]\n                                      (concat [x1 x2] (__ xs1 xs2))\n                                      ))) %1 %2))", "user": "5433a07be4b0b6b47310fce0"}, {"problem": 61, "code": "(fn [c1 c2] (into {} (map (fn [x y] [x y]) c1 c2)))", "user": "53f67bcfe4b0db01ade6f9e1"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "542d2385e4b0dad94371f2b2"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "524ad140e4b09eba1c0223a9"}, {"problem": 61, "code": "(fn [keys values]\n      (into {} (map (fn [[k v]] [k v]) (partition 2 (interleave keys values)))))", "user": "53f891eee4b0de5c4184856d"}, {"problem": 61, "code": "#(apply assoc {} (interleave % %2) )", "user": "51e1c176e4b06a68e693eafb"}, {"problem": 61, "code": "(fn [k v] (apply hash-map (interleave k v)))", "user": "5385e633e4b06839e8705f08"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "543d5c61e4b032a45b86934d"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "543c39e0e4b032a45b86933d"}, {"problem": 61, "code": "#(apply hash-map (mapcat list % %2))", "user": "543f854fe4b032a45b86935b"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "541709b0e4b01498b1a71a06"}, {"problem": 61, "code": "(fn map-construction\n  [v1 v2]\n  (into {} (map #(vector %1 %2) v1 v2)))", "user": "52561295e4b0541d1855ba03"}, {"problem": 61, "code": "(fn myZipmap [x y] (apply assoc {} (interleave x y)))", "user": "542c1f73e4b0dad94371f29d"}, {"problem": 61, "code": "(fn [k v] \n  (apply hash-map (interleave k v)))", "user": "53a511aae4b0b62ce3005735"}, {"problem": 61, "code": "(fn [ks vs]\n  (loop [res {} ks ks vs vs]\n    (if (or (empty? ks) (empty? vs))\n      res\n      (recur\n       (assoc res (first ks) (first vs))\n       (rest ks)\n       (rest vs)))))", "user": "54055aa9e4b0addc1aec6665"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "542c2de0e4b0dad94371f29f"}, {"problem": 61, "code": "(fn [ks vs] (reduce (fn [acc kv] (assoc acc (first kv) (second kv))) {} (map vector ks vs)))", "user": "54431b6ee4b032a45b869385"}, {"problem": 61, "code": "#(apply assoc {} (interleave % %2))", "user": "52f8b86de4b047fd55836fdb"}, {"problem": 61, "code": ";; (fn [keys vals]\n;; (loop [map {}\n;;            ks (seq keys)\n;;            vs (seq vals)]\n;;       (if (and ks vs)\n;;         (recur (assoc map (first ks) (first vs))\n;;                (next ks)\n;;                (next vs))\n;;         map)))\n\n#(into {} (map vector %1 %2))", "user": "5412646de4b01498b1a719d4"}, {"problem": 61, "code": "(fn [x y] \n  (reduce \n   #(assoc %1 (first %2) (last %2))\n   {}\n   (map #(list %1 %2) x y)\n   )\n  )", "user": "5372c830e4b06d7f452d9dff"}, {"problem": 61, "code": "(fn  [coll1 coll2] \n  (loop [c1 coll1 c2 coll2  acc {}]\n    (if (or (empty? c1)  (empty? c2)) acc\n      (recur (rest c1) (rest c2) (assoc acc (first c1) (first c2))))))", "user": "4e526cc4535d302ef430da74"}, {"problem": 61, "code": "(fn my-zipmap [keys, values]\n     (apply hash-map\n      (reduce concat (map list keys values) ))\n    )", "user": "5443cb97e4b032a45b86938a"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {}\n    (map #(vector %1 %2) ks vs)))", "user": "54448e84e4b032a45b869393"}, {"problem": 61, "code": "(fn [coll1 coll2]\n    (letfn [(func [m c1 c2]\n                  (if (and c1 c2)\n                    (recur\n\t                    (assoc m (first c1) (first c2))\n\t                    ;(func m (rest c1) (rest c2))\n                     (next c1)\n                     (next c2)\n                    )\n                    m))]\n                  (func {} coll1 coll2)))", "user": "533a399de4b0e30313ee6cb9"}, {"problem": 61, "code": "(fn [k v] (reduce conj (map #(hash-map % %2) k v)))", "user": "5441f5e8e4b032a45b869375"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "54349368e4b0b6b47310fcf1"}, {"problem": 61, "code": "#(into {} (map vec (partition 2 (interleave %1 %2))))", "user": "530a6cbae4b02e82168697be"}, {"problem": 61, "code": "(fn [coll1 coll2] (reduce (fn [result [a b]]\n            (assoc result a b))\n          {}\n          (map (fn [x y] [x y]) coll1 coll2)))", "user": "540997ede4b0addc1aec66dd"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "50666699e4b03d366d7cb2b0"}, {"problem": 61, "code": "(fn [keys values]\n  (loop [ret {} keys (seq keys) values (seq values)]\n    (if (and  keys values)\n      (recur (assoc ret (first keys) (first values)) (next keys) (next values))\n      ret)))", "user": "5370d152e4b0fc7073fd6e9d"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5420c6e4e4b01498b1a71aaa"}, {"problem": 61, "code": "(comp (partial apply assoc {}) interleave)", "user": "5392bfdee4b0b51d73faaeb2"}, {"problem": 61, "code": "(fn [k v] \n  (loop [k k v v acc {}]\n    (if (or (empty? k) (empty? v))\n      acc\n      (recur (rest k) (rest v) (assoc acc (first k) (first v))))))", "user": "51bd255ce4b0df1216cefd94"}, {"problem": 61, "code": "(fn [x y]\n    (letfn [(my-fn [xs ys]\n                   (if (or (empty? xs)\n                           (empty? ys))\n                     '()\n                     (concat `(~(first xs) ~(first ys))\n                           (my-fn (rest xs) (rest ys)))))]\n      (apply hash-map (my-fn x y))))", "user": "5447e08ce4b032a45b8693c3"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "541168dee4b01498b1a719c3"}, {"problem": 61, "code": "(fn m [x y]\n  (if (or (empty? y) (empty? x))\n    {}\n    (merge (m (rest x) (rest y) ) (hash-map (first x) (first y) ) )\n    )\n  )", "user": "54078851e4b0addc1aec66bd"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5444ec99e4b032a45b869394"}, {"problem": 61, "code": "#((fn [l1 l2 acc] \n  \t(if (empty? l1) \n    \tacc\n      \t(if (empty? l2)\n          acc\n\t    (recur (rest l1) (rest l2) \n               (into acc {(first l1) (first l2)})\n        ))\n    ))\n    %1 %2 {}\n    )", "user": "53342a1ce4b019098a6f8b8b"}, {"problem": 61, "code": "(fn construct [ks vs]\n  (into {} (map vector ks vs)))", "user": "54468fd3e4b032a45b8693b2"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "53b7aa6ce4b047364c0444d1"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "544b699ce4b0e39780006964"}, {"problem": 61, "code": "#(loop [m {}\n        a1 %1\n        a2 %2]\n   (if (or (empty? a1) (empty? a2))\n     m\n     (recur (assoc m (first a1) (first a2))\n            (rest a1)\n            (rest a2))))", "user": "54194782e4b01498b1a71a29"}, {"problem": 61, "code": "(fn bla2 [x y] (if (and (not= nil (first x)) (not= nil (first y)))\n                  (merge {(first x) (first y)} (bla2 (rest x) (rest y)))\n                  ))", "user": "54458995e4b032a45b86939e"}, {"problem": 61, "code": "(fn myzipmap [xs ys]\n  (loop [col1 xs\n        col2 ys\n        acc []]\n   (if (or (empty? col1) (empty? col2))\n     (apply hash-map acc)\n     (recur (rest col1) (rest col2) (conj acc (first col1) (first col2))))))", "user": "544257b4e4b032a45b869379"}, {"problem": 61, "code": "(fn [k v] (apply hash-map (flatten (map list k v))))", "user": "54524afbe4b0e397800069bc"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "5457767ae4b01be26fd7460c"}, {"problem": 61, "code": "#(apply merge (map hash-map %1 %2))", "user": "54570d08e4b080a794c2c888"}, {"problem": 61, "code": "#(apply hash-map (mapcat list %1 %2))", "user": "5457e5f1e4b01be26fd74613"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "54512df2e4b0e397800069ae"}, {"problem": 61, "code": "(fn [a b] (reduce #(conj %1 %2) {} (map #(hash-map %1 %2) a b)))", "user": "52c45ac8e4b0c2d177d620d9"}, {"problem": 61, "code": "(fn [x y] (into {} (map #(vector %1 %2) x y)))", "user": "544fbabce4b0e39780006999"}, {"problem": 61, "code": "(fn [x y]\n  (loop [rst {} a x b y]\n    (if (or (= 0 (count a)) (= 0 (count b))) rst\n      (recur (assoc rst (first a) (first b)) (rest a) (rest b)))))", "user": "54381729e4b032a45b869310"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5446ebc2e4b032a45b8693b8"}, {"problem": 61, "code": "#(apply hash-map (vec (mapcat vector %1 %2)))", "user": "5414b7c4e4b01498b1a719ed"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "50ed8fd1e4b06330c1f87c3f"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "54580586e4b01be26fd74616"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "544cf5d7e4b0e39780006977"}, {"problem": 61, "code": "(fn [list1 list2]\n  (apply merge (map (fn [el1 el2] {el1 el2}) list1 list2)))", "user": "545801f6e4b01be26fd74615"}, {"problem": 61, "code": "(fn [key-vect val-vect]\n  (apply hash-map (interleave key-vect val-vect)))", "user": "545e9cf1e4b01be26fd7467f"}, {"problem": 61, "code": "#(apply merge (map (fn [[k v]] {k v}) (map vector %1 %2)))", "user": "5454b84ce4b0e397800069d9"}, {"problem": 61, "code": "(fn\n  [keys vals]\n  (apply hash-map (interleave keys vals)))", "user": "53e3e852e4b036ad0777e407"}, {"problem": 61, "code": "(fn jp [klu baz] (if (or (empty? klu) (empty? baz)) () (conj (assoc nil (first klu) (first baz)) (jp (rest klu) (rest baz) ))))", "user": "544e1794e4b0e39780006980"}, {"problem": 61, "code": "(fn [a b] (apply merge (map #(hash-map %1 %2) a b)))", "user": "5367bc60e4b0243289761e81"}, {"problem": 61, "code": "(fn [x y] (apply assoc {} (interleave x y)))", "user": "52eaba10e4b09f7907dd14c2"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "4f1ef6a0535d64f60314649b"}, {"problem": 61, "code": "(fn [ks vs]\n  (reduce merge (map #(hash-map %1 %2) ks vs)))", "user": "4fdb881ee4b05e33b9224f5e"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (map (fn [k v] [k v]) ks vs)))", "user": "526e1bd0e4b03e8d9a4a730b"}, {"problem": 61, "code": "#(->> (map vector %1 %2)\n      (flatten)\n      (apply hash-map))", "user": "5461c402e4b01be26fd746a6"}, {"problem": 61, "code": "(fn [ks vs] (reduce #(assoc %1 (nth ks %2) (nth vs %2)) {} (-> ks count (min (count vs)) range)))", "user": "500e6c4ee4b04a05d36fcc05"}, {"problem": 61, "code": "(fn -myzipmap[ks vs]\n  ((fn mysoc [acc i-keys i-vals]\n    (cond\n      (> 1 (count i-keys)) acc\n      (> 1 (count i-vals)) acc\n      (=    1 (count i-keys)) (merge acc {(first i-keys) (first i-vals)})\n      (not= 1 (count i-keys)) (merge acc {(first i-keys) (first i-vals)} (mysoc acc (rest i-keys) (rest i-vals)))\n    )\n  ) {} ks vs)\n)", "user": "546113ffe4b01be26fd74699"}, {"problem": 61, "code": "(fn [colla collb]\n  (loop [result {}\n         a colla\n         b collb]\n    (if (or (empty? a) (empty? b))\n      result\n      (recur (into result {(first a) (first b)}) (rest a) (rest b)))))", "user": "540e8d13e4b0addc1aec671e"}, {"problem": 61, "code": "#(reduce merge (map (fn [x y] {x y}) %1 %2))", "user": "536ecd9fe4b0fc7073fd6e76"}, {"problem": 61, "code": "(fn [x y] (apply conj  (map #(hash-map (first %) (second %)) (partition 2 (interleave x y)))))", "user": "5233564ae4b0f0b72fabf403"}, {"problem": 61, "code": "(fn create-map\n  [ks vs]\n  (apply hash-map (flatten (map #(list %1 %2) ks vs))))", "user": "53b952eee4b047364c0444e6"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5465712ee4b01be26fd746dc"}, {"problem": 61, "code": "(fn[k v]\n  ( apply assoc {} (interleave k v)))", "user": "54651ef5e4b01be26fd746d5"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "544e9022e4b0e3978000698b"}, {"problem": 61, "code": "(fn [keys values]\n  (loop [i 0 m {}]\n    (if (= i (min (count keys) (count values))) m\n      (recur (inc i) (assoc m (get keys i) (get values i))))))", "user": "535943b3e4b04ce2eb3ed295"}, {"problem": 61, "code": "(fn myzip [ks vs]\n  (if (or (empty? ks) (empty? vs))\n    {}\n    (assoc (myzip (rest ks) (rest vs)) (first ks) (first vs))))", "user": "54651982e4b01be26fd746d4"}, {"problem": 61, "code": "(fn [lk lv]\n  (apply merge (for [n (range (min (count lk) (count lv)))] (hash-map (nth lk n) (nth lv n)))))", "user": "54651faee4b01be26fd746d6"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "5464a536e4b01be26fd746cf"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "546280d8e4b01be26fd746b0"}, {"problem": 61, "code": "#(reduce conj {} (map vector % %2))", "user": "53ea5851e4b036ad0777e4e4"}, {"problem": 61, "code": "(fn [c1 c2] (apply hash-map (mapcat #(vector %1 %2) c1 c2)))", "user": "54485727e4b032a45b8693c6"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "5458a729e4b01be26fd74622"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "546c1b2ce4b00cfc9eacc174"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "546a6dbbe4b00cfc9eacc156"}, {"problem": 61, "code": "(fn [xs ys]\n  (reduce (fn [m i] (assoc m (nth xs i) (nth ys i)))\n          {}\n          (range (min (count xs)\n                      (count ys)))))", "user": "5136f659e4b04059df19f2fd"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "52d84ea7e4b09f7907dd1390"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5462ce20e4b01be26fd746b8"}, {"problem": 61, "code": "(fn [ks vs]\n  (loop [[x & xs] ks [y & ys] vs result {}]\n    (if (or (nil? x) (nil? y)) result\n      (recur xs ys (assoc result x y)))))", "user": "546176e7e4b01be26fd746a2"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply hash-map (mapcat vector ks vs)))", "user": "546c4c5fe4b00cfc9eacc178"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "53572176e4b04ce2eb3ed276"}, {"problem": 61, "code": "(fn map-construction\n\t[keyz valz] \n\t(reduce #(assoc %1 (nth keyz %2) (nth valz %2)) {} \n\t\t(range (min (count keyz) (count valz))))\n\t)", "user": "5252b59de4b0541d1855b8cf"}, {"problem": 61, "code": "(fn [ks vs] \n  (reduce-kv \n   (fn [acc k v] (if (nil? (get vs k)) acc (assoc acc v (get vs k)))) \n   {} \n   ks\n   )\n  )", "user": "546d41bde4b00cfc9eacc18c"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "543bb568e4b032a45b869334"}, {"problem": 61, "code": "(fn [k v] \n      (loop [ke k, values v, acc {}]\n        (if (and (not-empty ke) (not-empty values))\n          (recur (rest ke) (rest values) (assoc acc (first ke) (first values)))\n          acc\n        )\n      )\n   )", "user": "52149e21e4b0961f15ac4d94"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "5461873de4b01be26fd746a3"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "544e8369e4b0e39780006987"}, {"problem": 61, "code": "#(apply merge (map hash-map % %2))", "user": "52e16face4b09f7907dd1421"}, {"problem": 61, "code": "(fn my-zipmap [[k & ks] [v & vs]]\n  (if (and k v) (assoc (my-zipmap ks vs) k v) {}))", "user": "546c1f73e4b00cfc9eacc175"}, {"problem": 61, "code": "(fn[k v]\n  (apply assoc {} (interleave k v)))", "user": "5472cba1e4b094393f72dd7a"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "53613db8e4b0243289761e41"}, {"problem": 61, "code": "(fn [keys values]\n  (apply hash-map (mapcat list keys values)))", "user": "547584d9e4b0c51c1f4d729b"}, {"problem": 61, "code": "#(->> (interleave %1 %2)\n       (apply hash-map))", "user": "4eda8d7c535d10e5ff6f530f"}, {"problem": 61, "code": "(fn [keys vals]\n  (loop [map {}\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map)))", "user": "54084089e4b0addc1aec66c7"}, {"problem": 61, "code": "#(apply assoc {} (interleave % %2))", "user": "54696e4ce4b00cfc9eacc147"}, {"problem": 61, "code": "(fn [a b]\n  (apply assoc {}\n    (interleave a b)))", "user": "53a074a4e4b0ca733b9744af"}, {"problem": 61, "code": "#(into {} (map (fn[x y](assoc {} x y)) %1 %2))", "user": "545537c1e4b0e397800069dd"}, {"problem": 61, "code": "(fn zipm [x y]\n  (loop [x x y y acc {}]\n    (if (or (empty? x) (empty? y))\n        acc\n        (recur (rest x) (rest y) (assoc acc (first x) (first y))))))", "user": "53703287e4b0fc7073fd6e8f"}, {"problem": 61, "code": "#(apply array-map (interleave %1 %2))", "user": "5470699ae4b00cfc9eacc1b6"}, {"problem": 61, "code": "(fn [a b]\n  (into {} (map #(vector %1 %2) a b)))", "user": "5478c4fee4b0c51c1f4d72c0"}, {"problem": 61, "code": "(fn my-mapzip\n   [keys vals]\n   (let [limit (min (count keys) (count vals))]\n   (loop [i 0 ans {}]\n     (if (= i limit)\n       ans\n       (recur (inc i) (assoc ans (keys i) (vals i)))))))", "user": "5473efc3e4b0c51c1f4d7285"}, {"problem": 61, "code": "(fn [k v] (apply merge (map #(hash-map %1 %2) k v)))", "user": "53c1b787e4b00fb29b221266"}, {"problem": 61, "code": "(fn [a b & args]\n  (if (and (seq a) (seq b))\n    (recur (rest a) (rest b) (assoc args (first a) (first b)))\n    args))", "user": "5479c58de4b0c51c1f4d72c7"}, {"problem": 61, "code": "#(apply hash-map(interleave % %2))", "user": "545d5c3be4b01be26fd7466d"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "54797964e4b0c51c1f4d72c6"}, {"problem": 61, "code": "(fn make-map [map-keys map-values] (\n   if (or (empty? map-keys) (empty? map-values)) {}\n   (assoc (make-map (rest map-keys) (rest map-values)) (first map-keys) (first map-values))\n                                    \n\t)\n)", "user": "5471f090e4b094393f72dd6e"}, {"problem": 61, "code": "#(apply assoc {} (interleave % %2))", "user": "546e4ab8e4b00cfc9eacc19c"}, {"problem": 61, "code": "(fn f [x y]\n  (if (and (not-empty x) (not-empty y))\n    (merge (f (rest x) (rest y)) {(first x) (first y)})))", "user": "5478e57de4b0c51c1f4d72c1"}, {"problem": 61, "code": "(fn zipmap2 [keys values]\n  (into {} (map #(assoc {} %1 %2) keys values)))", "user": "541f5b37e4b01498b1a71a97"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "547adcb0e4b0c51c1f4d72cf"}, {"problem": 61, "code": "(fn [keys values]\n  (let [my-zip (fn [res ks vs]\n                 (if (or (empty? ks)\n                         (empty? vs))\n                   res\n                   (recur (assoc res (first ks) (first vs)) (rest ks) (rest vs))))]\n    (my-zip {} keys values)))", "user": "545f737ce4b01be26fd74688"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "547d8e93e4b0c51c1f4d72f4"}, {"problem": 61, "code": "#(apply array-map (interleave %1 %2))", "user": "52b9cfb9e4b07a9af57922c5"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply hash-map (interleave ks vs)))", "user": "547ad587e4b0c51c1f4d72ce"}, {"problem": 61, "code": "(comp (partial into {}) (partial map vector))", "user": "547d66a1e4b0c51c1f4d72f2"}, {"problem": 61, "code": "(fn [ks vs] (apply assoc {} (interleave ks vs)))", "user": "50b19a91e4b03ea880433552"}, {"problem": 61, "code": "#(let [mapped (map vector %1 %2)\n        flat (flatten mapped)]\n    (apply hash-map flat))", "user": "54357066e4b0b6b47310fcfd"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5463fbbde4b01be26fd746ca"}, {"problem": 61, "code": "#(into {} (apply map vector %&))", "user": "54577fefe4b01be26fd7460d"}, {"problem": 61, "code": "(fn [c1 c2]\n  (into {} (map (fn [x1 x2] [x1 x2]) c1 c2)))", "user": "5032748ae4b0e78df07b092f"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5483d59fe4b0e286459a1194"}, {"problem": 61, "code": "(fn [c1 c2]\n  (loop [keys c1\n         vals c2\n         result {}]\n    (if (or (empty? vals) (empty? keys))\n      result\n      (recur (rest keys)\n             (rest vals)\n             (assoc result (first keys) (first vals))))))", "user": "5484143de4b0e286459a1197"}, {"problem": 61, "code": "(fn [ks vs]\n  (loop [ks ks vs vs acc {}]\n    (if (or (empty? ks) (empty? vs))\n      acc\n      (recur (rest ks) (rest vs) (assoc acc (first ks) (first vs))))))", "user": "54814dbee4b0e286459a116b"}, {"problem": 61, "code": "(fn mc [coll1 coll2]\n  (loop [c1 coll1\n         c2 coll2\n         res {}]\n    (if (or (empty? c1) (empty? c2) ) res\n      (recur (rest c1) (rest c2) (conj res {(first c1) (first c2)})))))", "user": "5475d755e4b0c51c1f4d72a0"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "54802bd1e4b0e286459a1157"}, {"problem": 61, "code": "(fn [ks, vs]\n  (->> (map vector ks vs)\n       (into {})))", "user": "54848141e4b0e286459a119e"}, {"problem": 61, "code": "#(into {} (map (fn [a b] [a b]) %1 %2))", "user": "513facf5e4b00f13ea1bd892"}, {"problem": 61, "code": "#(reduce merge (map hash-map %1 %2))", "user": "54857e3be4b0e286459a11ad"}, {"problem": 61, "code": "(fn [v1 v2]\n  (loop [m {}\n         v1 v1\n         v2 v2]\n    (if (or (empty? v1) (empty? v2))\n      m\n      (recur (conj m [(first v1) (first v2)]) (rest v1) (rest v2)))))", "user": "545944a2e4b01be26fd74627"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "547e3846e4b0c51c1f4d7302"}, {"problem": 61, "code": "(fn [ks vs]\n    (into {} (map #(vector %1 %2) ks vs)))", "user": "54508859e4b0e397800069a3"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map vector ks vs)))", "user": "528c381ce4b0239c8a67aeb2"}, {"problem": 61, "code": "#(apply merge (map hash-map %1 %2))", "user": "5472d919e4b094393f72dd7b"}, {"problem": 61, "code": "(fn [v1 v2] \n  (reduce conj (map hash-map v1 v2)))", "user": "5486adf7e4b0e286459a11be"}, {"problem": 61, "code": "#(apply merge (map hash-map % %2))", "user": "547fbe01e4b0c51c1f4d7321"}, {"problem": 61, "code": "#(apply hash-map\n         (interleave % %2))", "user": "5466aabbe4b01be26fd746e8"}, {"problem": 61, "code": "(fn g [k v] (if (and k v) (conj (g (next k) (next v)) {(first k) (first v)}) {}))", "user": "4e41a04e535dc968683fc49e"}, {"problem": 61, "code": "(fn myzipmap [ks vs]\n  (reduce (fn [m [k v]]\n            (assoc m k v)\n            ) {} (map #(vector %1 %2) ks vs))\n  )", "user": "5488872ee4b0e286459a11d3"}, {"problem": 61, "code": "#(apply hash-map (mapcat list %1 %2))", "user": "543823f1e4b032a45b869311"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "54630cdae4b01be26fd746bb"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply hash-map (interleave ks vs)))", "user": "5188c249e4b0bdff0e072d54"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5485bc1be4b0e286459a11b1"}, {"problem": 61, "code": "(fn map-construct [k v]\n  (apply hash-map (interleave k v)))", "user": "542c026ae4b0dad94371f29a"}, {"problem": 61, "code": "(fn [xs ys] (apply hash-map (mapcat #(list %1 %2) xs ys)))", "user": "548cd813e4b0e286459a1211"}, {"problem": 61, "code": "(fn [a b] (into {} (map vec (partition 2 (mapcat list a b)))))", "user": "4f47d84fe4b0d56e7bb92bc3"}, {"problem": 61, "code": "(fn zip [x y]\n   (loop [ret {}\n          ks (seq x)\n          vs (seq y)]\n     (if (and ks vs)\n       (recur (assoc ret (first ks) (first vs))\n              (next ks)\n              (next vs))\n       ret)))", "user": "53b12c76e4b047364c04448a"}, {"problem": 61, "code": "#(->> (interleave % %2)\n     (apply hash-map))", "user": "5470b3d0e4b00cfc9eacc1bb"}, {"problem": 61, "code": "(fn [x y]\n  (apply hash-map (interleave x y)))", "user": "50f3bd98e4b041536e2eca3a"}, {"problem": 61, "code": "(fn [coll1 coll2]\n  (apply assoc {}\n    (interleave coll1 coll2)))", "user": "4fbfbd4fe4b081705acca31c"}, {"problem": 61, "code": "(fn mine [[a & resta] [b & restb]]\n  (if (and (seq? resta) (seq? restb))\n    (assoc (mine resta restb) a b)\n  \t{a b}))", "user": "5462caf5e4b01be26fd746b7"}, {"problem": 61, "code": "(fn [vec1 vec2]\n  (apply merge (map hash-map vec1 vec2)))", "user": "5456e4e7e4b080a794c2c883"}, {"problem": 61, "code": "(comp (partial apply hash-map) interleave)", "user": "534e60c2e4b084c2834f4ab2"}, {"problem": 61, "code": "(fn [x y]\n  (loop [accum {}\n         a (seq x)\n         b (seq y)]\n    (if (and a b)\n      (recur \n        (assoc accum (first a) (first b)) \n        (next a) \n        (next b))\n      accum))\n  )", "user": "54903056e4b0b312c081ff2e"}, {"problem": 61, "code": "(fn [a b] (apply merge (map #(hash-map %1 %2) a b)))", "user": "5471f0f3e4b094393f72dd6f"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "51d26b0ae4b0d13b04db0d97"}, {"problem": 61, "code": "(fn [a b]\n  (loop [x a, y b, r {}]\n    (if (or (empty? x) (empty? y)) r (recur (rest x) (rest y) (assoc r (first x) (first y))))))", "user": "53bcdd41e4b0d9a98559a6c0"}, {"problem": 61, "code": "#(reduce into (map hash-map % %2))", "user": "51c611c4e4b03a28d42333bf"}, {"problem": 61, "code": "(fn [ks vs]\n  (reduce conj\n          {}\n          (map (fn [k v] [k v]) ks vs)))", "user": "548c6673e4b0e286459a1209"}, {"problem": 61, "code": "(fn [c1 c2] (into {} (map #(conj [] %1 %2) c1 c2)))", "user": "5471f2fbe4b094393f72dd70"}, {"problem": 61, "code": "#(reduce conj {} (map vector %1 %2))", "user": "5455510fe4b0e397800069df"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "549375e4e4b0b312c081ff4e"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "54965534e4b0b312c081ff65"}, {"problem": 61, "code": "(fn [coll1 coll2]\n  (into {} (map vector coll1 coll2)))", "user": "5317d78ee4b08068f379ed63"}, {"problem": 61, "code": "(fn [k, v]\n  (apply hash-map (interleave k v)))", "user": "548f37c7e4b0e286459a1234"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "54897284e4b0e286459a11e6"}, {"problem": 61, "code": "#(apply merge (map hash-map %1 %2))", "user": "512b07f7e4b078b06821febb"}, {"problem": 61, "code": "(fn [xs1 xs2] (apply hash-map (interleave xs1 xs2)))", "user": "5485b402e4b0e286459a11b0"}, {"problem": 61, "code": "(fn [x y]\n  (into {} (map vector x y))\n )", "user": "54975e99e4b0b312c081ff72"}, {"problem": 61, "code": "(fn [c1 c2]\n\t(into {}\n\t\t(map #(hash-map % %2) c1 c2)))", "user": "536e5b68e4b0fc7073fd6e6d"}, {"problem": 61, "code": "(fn blah [k v] (apply hash-map (mapcat list k v)))", "user": "535f9a5ce4b04ce2eb3ed2de"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "54926752e4b0b312c081ff44"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (map vector ks vs)))", "user": "548fa2dfe4b0e286459a1240"}, {"problem": 61, "code": "#(apply  hash-map (interleave %1 %2))", "user": "52457931e4b08ba239308107"}, {"problem": 61, "code": "(fn [x y] (apply hash-map (interleave x y)))", "user": "542dc7c7e4b0dad94371f2bd"}, {"problem": 61, "code": "#(apply merge (map hash-map %1 %2))", "user": "549c22f7e4b0f3d1d8e70f86"}, {"problem": 61, "code": "#(apply conj {} (map (fn [x y] {x y}) %1 %2))", "user": "549e5e52e4b0f3d1d8e70f9e"}, {"problem": 61, "code": "(fn eh [x y]\n  ((fn ehh [x y acc]\n     (cond\n      (or (empty? y) (empty? x)) acc\n      :else (ehh (rest x) (rest y) (assoc acc (first x) (first y))))) x y {}))", "user": "549c8bbde4b0f3d1d8e70f8c"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "543b12cce4b032a45b86932a"}, {"problem": 61, "code": ";(fn [ks vs]\n;  (loop [m {} ks ks vs vs] ; you should seq\n;    (if (or (empty? ks) (empty? vs))\n;      m\n;      (recur (assoc m (first ks) (first vs))\n;             (rest ks)\n;             (rest vs)))))\n\n; see (source zipmap) :-)\n; empty? is fine but simply testing ks/vs is faster. However, you\n; have to use next instead of rest and (seq ks)/(seq vs) initially,\n; in case either is empty.\n(fn [ks vs]\n  (loop [m {} ks (seq ks) vs (seq vs)]\n    (if (and ks vs)\n      (recur (assoc m (first ks) (first vs))\n             (next ks)   ; careful, not rest\n             (next vs))\n      m)))\n\n; concise, only marginally slower\n;(fn [ks vs]\n;  (apply hash-map (interleave ks vs)))", "user": "53576356e4b04ce2eb3ed27a"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "549c3e0ce4b0f3d1d8e70f87"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "549def9ce4b0f3d1d8e70f99"}, {"problem": 61, "code": "#(into {}\n       (map (fn [x] {(first x) (second x)})\n            (partition 2 \n                       (interleave %1 %2))))", "user": "5470cb10e4b094393f72dd65"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "54769c7ae4b0c51c1f4d72a8"}, {"problem": 61, "code": "(fn [ks vs] \n  (reduce #(assoc % (first %2) (last %2)) {} \n          (map vector ks vs)))", "user": "5325cef5e4b09d4e7a9b54e7"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "5455c2f3e4b080a794c2c87d"}, {"problem": 61, "code": "(fn [a b]\n (apply hash-map\n  (interleave a b))\n)", "user": "549a999be4b0f3d1d8e70f6f"}, {"problem": 61, "code": "(comp (partial into {}) (partial map vector))", "user": "549a176ce4b0f3d1d8e70f69"}, {"problem": 61, "code": "(fn [k v] (apply hash-map (interleave k v)))", "user": "5466199ce4b01be26fd746e2"}, {"problem": 61, "code": "#(apply hash-map (apply concat (partition 2 (interleave % %2))))", "user": "53fe1b42e4b0de5c418485f1"}, {"problem": 61, "code": "(fn map-constr \n  ([key-items val-items]\n   (cond (and (> (count key-items) 0) (> (count val-items) 0)) (merge {(first key-items) (first val-items)} (map-constr (rest key-items) (rest val-items)))\n         :else {})))", "user": "52b9e920e4b07a9af57922c9"}, {"problem": 61, "code": "#(reduce \n  (fn [d, s] (conj d [ (first s) (second s) ] )) \n  {} \n  (partition 2 (interleave % %2))\n  )", "user": "54a1d643e4b09f271ff37c50"}, {"problem": 61, "code": "(fn [a b] (apply merge (map #(hash-map %1 %2) a b)))", "user": "549cd548e4b0f3d1d8e70f91"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "54a677a9e4b09f271ff37c88"}, {"problem": 61, "code": "(fn [s1 s2]\n  (apply hash-map (interleave s1 s2)))", "user": "53403f42e4b085b17e897da8"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "54a70af9e4b09f271ff37c93"}, {"problem": 61, "code": "(fn my-map-builder [keys values]\n  (loop [[k & rks :as ks] keys\n         [v & rvs :as vs] values\n         m {}]\n    (if (or (empty? ks) (empty? vs))\n      m\n      (recur rks rvs (assoc m k v)))))", "user": "54a31fdae4b09f271ff37c64"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5499e23de4b03163384f4706"}, {"problem": 61, "code": "(fn i2 [q, w](into {} ((fn i [x,y] (if (and (> (count x) 0) (> (count y) 0)) (concat [[(first x) (first y)]] (i (rest x) (rest y))) '() )) q w)))", "user": "54a7efdee4b09f271ff37c9d"}, {"problem": 61, "code": "(fn [ks vs]\n  \n  (loop [i 0 res {}]\n    (if-not (> (min (count ks) (count vs )) i)\n      res\n      (recur (inc i) (conj res [(nth ks i) (nth vs i)])))\n  )\n\n)", "user": "54a7d707e4b09f271ff37c9b"}, {"problem": 61, "code": "(fn [x y]\n  (loop [x x\n         y y\n         acc {}]\n    (if (or (empty? x) (empty? y))\n      acc\n      (recur (rest x) (rest y) (assoc acc (first x) (first y))))))", "user": "51ca5378e4b08b1cbd0d9480"}, {"problem": 61, "code": "(fn my-zipmap [s t]\n  (if (or (empty? s) (empty? t))\n    {}\n    (assoc (my-zipmap (rest s) (rest t)) (first s) (first t))\n  )\n)", "user": "54982522e4b0b312c081ff7c"}, {"problem": 61, "code": "(fn fc61 [ks vs]\n  (letfn [(fc61-helper [ks vs]\n            (cond (empty? ks) []\n                  (empty? vs) []\n                  :else (conj (fc61 (rest ks) (rest vs)) (vector (first ks) (first vs)))))]\n    (into (sorted-map) (fc61-helper ks vs))))", "user": "547884d7e4b0c51c1f4d72bd"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "54ab6773e4b09f271ff37cc8"}, {"problem": 61, "code": "(fn [k  v]\n  (into {} ((partial map vector) k v)))", "user": "5243e37ae4b076204b44fae3"}, {"problem": 61, "code": "(fn [keys vals] (loop [map {} ks (seq keys) vs (seq vals)]\n                  (if (and ks vs) \n                    (recur (assoc map (first ks) (first vs))\n                           (next ks)\n                           (next vs))\n                    map)))", "user": "54908cc1e4b0b312c081ff32"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "50ec69e0e4b04edc3377704a"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "53e3f7a8e4b036ad0777e408"}, {"problem": 61, "code": "(fn [keys vals]\n   (apply hash-map (interleave keys vals)))", "user": "52e12ac5e4b09f7907dd141a"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "543d89dfe4b032a45b869350"}, {"problem": 61, "code": "#(apply hash-map\n        (mapcat vector %1 %2))", "user": "549dd591e4b0f3d1d8e70f98"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "54b13a40e4b09f271ff37d1b"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "54af6fb0e4b09f271ff37d08"}, {"problem": 61, "code": "(fn [x y] (apply assoc {} \n         \t(interleave x y)))", "user": "54ab46fee4b09f271ff37cc3"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "548ade6de4b0e286459a11f6"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "54ab502fe4b09f271ff37cc4"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "53e3e353e4b036ad0777e406"}, {"problem": 61, "code": "#(into (sorted-map) (map vector % %2))", "user": "54ae541ae4b09f271ff37cef"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "53e88247e4b036ad0777e489"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "52cee992e4b07d0d72b27395"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "54ad9d76e4b09f271ff37ce6"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5488537be4b0e286459a11cf"}, {"problem": 61, "code": "#((fn [r l]\n    (if (seq l)\n      (recur (merge r {(first l) (nth l 1)}) (drop 2 l))\n      r)) {} (interleave %1 %2))", "user": "54b2ec84e4b09f271ff37d33"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "54aa373de4b09f271ff37cb6"}, {"problem": 61, "code": "#(apply hash-map (vec (interleave % %2)))", "user": "54b448f2e4b05787c3b1638e"}, {"problem": 61, "code": "(fn [keys values]\n  (let [f (fn put-kv[m k v]\n            (if (and (seq k) (seq v))\n              (put-kv (assoc m (first k) (first v)) (rest k) (rest v))\n              m))]\n    (f {} keys values)))", "user": "5463c824e4b01be26fd746c5"}, {"problem": 61, "code": "#(reduce conj {} (map vector % %2))", "user": "52a267c6e4b04e0c58e87bef"}, {"problem": 61, "code": "(fn [c1 c2] (apply hash-map (interleave c1 c2)))", "user": "532902f8e4b09d4e7a9b550e"}, {"problem": 61, "code": "(fn [s1 s2]\n     (apply assoc {} (interleave s1 s2)))", "user": "5458c74de4b01be26fd74623"}, {"problem": 61, "code": "(fn [ks vs] (apply hash-map (interleave ks vs)))", "user": "50b42cbbe4b001349b2f4abe"}, {"problem": 61, "code": "(fn [xs ys] (into {} (map #(vec [%1 %2]) xs ys)))", "user": "549c1713e4b0f3d1d8e70f82"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map #(vector %1 %2) ks vs)))", "user": "54bad522e4b0ed20f4ff6eb8"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "54acf5c7e4b09f271ff37cdd"}, {"problem": 61, "code": "(fn [fields values] (into {} (map vector fields values)))", "user": "54b6c24be4b0ed20f4ff6e7c"}, {"problem": 61, "code": "(fn [& s] (apply hash-map (apply mapcat list s)))", "user": "54bd04e7e4b0ed20f4ff6ed8"}, {"problem": 61, "code": "#(apply assoc {}(interleave %1 %2))", "user": "5481be5fe4b0e286459a1172"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "519e70d5e4b0acf32bc6a42c"}, {"problem": 61, "code": "#(apply array-map\n       (interleave %1 %2))", "user": "54bec835e4b0ed20f4ff6ef7"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "515b03fee4b0a102a3e5262a"}, {"problem": 61, "code": "#(apply conj {} (map vector % %2))", "user": "50aa777fe4b056ee01935866"}, {"problem": 61, "code": "(fn mc [l1 l2]\n  (if (or (nil? l1) (nil? l2))\n    {}\n    (assoc (mc (next l1) (next l2)) (first l1) (first l2))))", "user": "54b95f3de4b0ed20f4ff6eab"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "54be7772e4b0ed20f4ff6eea"}, {"problem": 61, "code": "(fn [keys vals]\n  (loop [acc {}\n         k keys\n         v vals]\n    (if (or (empty? k) (empty? v))\n      acc\n      (recur (assoc acc (first k) (first v)) (rest k) (rest v)))))", "user": "5318594ee4b08068f379ed6d"}, {"problem": 61, "code": "(fn [keys values]\n    (into {}\n          (map vector keys values)))", "user": "4f42c80ae4b0d7d3c9f3fd0f"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "54b90836e4b0ed20f4ff6e9d"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply hash-map (interleave ks vs)))", "user": "4e435681535dc968683fc4a1"}, {"problem": 61, "code": "#(apply hash-map (mapcat list %1 %2))", "user": "510fe537e4b04c71fce993dd"}, {"problem": 61, "code": "(fn zmap[k v]\n  (apply sorted-map (interleave k v)))", "user": "54b10d08e4b09f271ff37d18"}, {"problem": 61, "code": "(fn my-zipmap [k,v]\n  (if (or (empty? k) (empty? v)) \n    {}\n    (assoc (my-zipmap (rest k) (rest v)) (first k) (first v))\n  )\n)", "user": "54b050cee4b09f271ff37d13"}, {"problem": 61, "code": "(fn [a b] (apply hash-map (interleave a b)))", "user": "54bd3aefe4b0ed20f4ff6edb"}, {"problem": 61, "code": "(fn my-zipmap \n  ([seq1 seq2] (my-zipmap seq1 seq2 {}))\n  ([seq1 seq2 the-map]\n    (if (or (empty? seq1) (empty? seq2))\n      the-map\n      (my-zipmap (rest seq1) (rest seq2) (assoc the-map (first seq1) (first seq2))))))", "user": "5235493ee4b05e80434a5064"}, {"problem": 61, "code": "(fn ! [k v]\n  (if (or (empty? k) (empty? v)) {}\n   \t(assoc (! (rest k) (rest v)) (first k) (first v))\n    )\n  )", "user": "54c271b9e4b045293a27f602"}, {"problem": 61, "code": "(fn [l1 l2] (loop [l1 l1 l2 l2 r {}]\n              (cond\n               (or (empty? l1) (empty? l2)) r\n               :else (recur (rest l1) (rest l2) (assoc r (first l1) (first l2))))))", "user": "525b142fe4b0cb4875a45d05"}, {"problem": 61, "code": "(fn [c1 c2] (into {} (map #(vector % %2) c1 c2)))", "user": "535774c2e4b04ce2eb3ed27c"}, {"problem": 61, "code": "(fn f [key-vec val-vec] (->> (range (count key-vec))\n                           (map #(vector (get key-vec %) (get val-vec %)))\n                           (filter #(not (nil? (last %))))\n                           (apply concat)\n                           (apply hash-map)))", "user": "5493d908e4b0b312c081ff52"}, {"problem": 61, "code": "(fn [coll1 coll2] \n  (into {} (map vector coll1 coll2)))", "user": "546692aee4b01be26fd746e7"}, {"problem": 61, "code": "(fn [ks vs]\n  (reduce #(assoc %1 (first %2) (second %2)) {} (partition 2 (interleave ks vs))))", "user": "54c8d4a8e4b045293a27f654"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "54c169ade4b0ed20f4ff6f24"}, {"problem": 61, "code": "(fn [fc sc]\n  (reduce #(assoc %1 (first %2) (last %2)) {}\n   (partition 2 (interleave fc sc))))", "user": "51e8ee6be4b07cae92c04bfd"}, {"problem": 61, "code": "#(reduce merge (map (fn [k v] {k v}) %1 %2))", "user": "54c9636fe4b045293a27f66e"}, {"problem": 61, "code": "#(reduce merge (map hash-map % %2))", "user": "5286a2a9e4b0239c8a67ae1e"}, {"problem": 61, "code": "#(into {} (map hash-map %1 %2))", "user": "52950ab6e4b02ebb4ef7501a"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "54b7f217e4b0ed20f4ff6e8f"}, {"problem": 61, "code": "(fn [ks vs] (apply hash-map (interleave ks vs)))", "user": "54c9f165e4b045293a27f687"}, {"problem": 61, "code": ";#(into {} (map vector %1 %2))\n#(apply assoc {} (interleave %1 %2))", "user": "54ca9ca8e4b057c6fda3a265"}, {"problem": 61, "code": "(fn [xs ys]\n  (apply sorted-map (interleave xs ys)))", "user": "54bebeb9e4b0ed20f4ff6ef4"}, {"problem": 61, "code": "(fn map-from-vectors [kv vv]\n  (loop [k kv, v vv, acc {}]\n    (if (or (empty? k) (empty? v)) acc\n      (recur (rest k) (rest v) (conj acc {(first k) (first v)})\n))))", "user": "54bbe505e4b0ed20f4ff6ec5"}, {"problem": 61, "code": "#(apply hash-map (mapcat vector % %2))", "user": "54aa665fe4b09f271ff37cb8"}, {"problem": 61, "code": "(fn [ks vs] (loop [m {} ks ks vs vs] (if (or (empty? ks) (empty? vs)) m (recur (conj m [(first ks) (first vs)]) (rest ks) (rest vs)))))", "user": "54c641f8e4b045293a27f628"}, {"problem": 61, "code": "#(apply merge (map hash-map % %2))", "user": "54cbb0fde4b057c6fda3a27b"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "541b1f25e4b01498b1a71a63"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "54c11fdae4b0ed20f4ff6f1b"}, {"problem": 61, "code": "(fn [ks vs] (apply assoc {} (for [[k v] (map vector ks vs)\n                               x [k v]]\n                           x)))", "user": "4ea03f70535d7eef308072a1"}, {"problem": 61, "code": "(fn construct [a b] (if (or (empty? a) (empty? b)) {} (assoc (construct (rest a) (rest b)) (first a) (first b))))", "user": "54c9e00be4b045293a27f683"}, {"problem": 61, "code": "(fn [ks vs] (apply hash-map (apply concat (map vector ks vs))))", "user": "54d03026e4b018d918be98de"}, {"problem": 61, "code": "(fn f[keys vals]\n  (if (or (empty? keys) (empty? vals)) {}\n    (assoc (f (rest keys) (rest vals)) (first keys) (first vals))))", "user": "54ce3790e4b057c6fda3a2ab"}, {"problem": 61, "code": "#(apply hash-map (flatten (map vector % %2)))", "user": "536046a9e4b063bf7a5f8fe1"}, {"problem": 61, "code": "#(apply assoc {} (interleave % %2))", "user": "546a6e9fe4b00cfc9eacc157"}, {"problem": 61, "code": "(fn [c1 c2] (into {} (mapv #(into [] %) (partition 2 (interleave c1 c2)))))", "user": "54246d6de4b01498b1a71aec"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "53c349f5e4b00fb29b22127a"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "54cbe00ee4b057c6fda3a285"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply assoc {}\n         (interleave ks vs)))", "user": "542d5fa9e4b0dad94371f2b5"}, {"problem": 61, "code": "(fn map-cons [keys vals]\n   (if (or (empty? keys)\n           (empty? vals))\n     {}\n     (merge (assoc {}\n                   (first keys)\n                   (first vals))\n            (map-cons\n             (rest keys)\n             (rest vals)))))", "user": "54d26316e4b0e8a36923e5f2"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "54c23252e4b045293a27f5fc"}, {"problem": 61, "code": "(fn [k v]\n  (let [pairs (map hash-map k v)]\n    (reduce conj {} pairs)))", "user": "54d6f22de4b0a52adc2e2023"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply hash-map\n         (interleave ks vs)))", "user": "54cc26c1e4b057c6fda3a28a"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "51eca2ace4b069f463c22cd0"}, {"problem": 61, "code": "(fn to-map [[x & xs :as c1] [y & ys :as c2]]\n  (if (some empty? [c1 c2]) {}\n      (assoc (to-map xs ys) x y)))", "user": "54b07c1ee4b09f271ff37d16"}, {"problem": 61, "code": "#(->> %& (apply map vector) (apply concat) (apply hash-map))", "user": "4fec08e8e4b0681fd128dc9d"}, {"problem": 61, "code": "(fn [coll1 coll2] (into {} (map vector coll1 coll2)))", "user": "541d3c0fe4b01498b1a71a7e"}, {"problem": 61, "code": "(fn [x y] (into {} (map vec (partition 2 (interleave x y)))))", "user": "54cad2d5e4b057c6fda3a26c"}, {"problem": 61, "code": "#(into {} (mapcat hash-map %1 %2))", "user": "54d70f40e4b0a52adc2e2027"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "54d7ed8de4b0a52adc2e2034"}, {"problem": 61, "code": "#(apply sorted-map (interleave %1 %2))", "user": "54cb3497e4b057c6fda3a272"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (map #(assoc {} %1 %2) ks vs)))", "user": "510a3cd4e4b06956752d35ad"}, {"problem": 61, "code": "(fn [arr1 arr2] \n  (let [shortest-array-length (count (first (sort-by count [arr1 arr2])))]\n    (reduce merge (map-indexed (fn [i n] {(nth arr1 i) (nth arr2 i)}) (range 0 shortest-array-length)))))", "user": "504f9ae1e4b0a02f9cffde9c"}, {"problem": 61, "code": "(fn m [k v] (apply conj (map #(apply hash-map %) (map vector k v))))", "user": "54dbcbbde4b024c67c0cf774"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "4ee7d6d8535d93acb0a66870"}, {"problem": 61, "code": "#(apply array-map (interleave % %2))", "user": "54543484e4b0e397800069d4"}, {"problem": 61, "code": "(fn mc [vk vv] \n  (cond\n   (or (= 1 (count vk)) (= 1 (count vv))) (assoc {} (first vk) (first vv))\n   :else (assoc (mc (rest vk) (rest vv)) (first vk) (first vv))))", "user": "54d4bd2be4b0a52adc2e2005"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "4ec66e84535d6d7199dd36cd"}, {"problem": 61, "code": "(fn  [kcol vcol]\n  (apply hash-map (interleave kcol vcol)))", "user": "53664e3be4b0243289761e74"}, {"problem": 61, "code": "#(apply hash-map (mapcat list %1 %2))", "user": "54d6c80ce4b0a52adc2e2020"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "54dd76c8e4b024c67c0cf794"}, {"problem": 61, "code": "(fn  ([k v] (loop [s {} k k v v]\n           (if (or (empty? v) (empty? k)) s\n             (recur (assoc s (first k) (first v)) (rest k) (rest v))))))", "user": "54d8cc38e4b0a52adc2e203e"}, {"problem": 61, "code": "(fn zm [[k & ks] [v & vs]]\n  (if (and k v)\n    (merge {k v} (zm ks vs))\n    {}))", "user": "51b76227e4b0d906fcd71d35"}, {"problem": 61, "code": "#(apply assoc {} (mapcat list % %2))", "user": "4fc4eb1ee4b081705acca354"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "54da46e5e4b024c67c0cf753"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "54d1cf2ee4b0e8a36923e5eb"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "54ddb556e4b024c67c0cf798"}, {"problem": 61, "code": "(fn [a b]\n  (apply hash-map (interleave a b)))", "user": "52ebbdf7e4b0705949c44443"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "54d4b3a7e4b0a52adc2e2003"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "54db8ddae4b024c67c0cf767"}, {"problem": 61, "code": "(fn [k v] (apply conj (map #(assoc {} %1 %2) k v)))", "user": "54d2b411e4b0e8a36923e5f9"}, {"problem": 61, "code": "#(apply array-map (interleave %1 %2))", "user": "540d0087e4b0addc1aec670b"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "54d753ebe4b0a52adc2e2029"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "54e3df6ae4b024c67c0cf7e3"}, {"problem": 61, "code": "#(apply merge (map (fn [x y] {x y}) %1 %2))", "user": "54dae16de4b024c67c0cf758"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "54e0e911e4b024c67c0cf7bc"}, {"problem": 61, "code": "(fn [k v] \n  (loop [ik k \n         iv v \n         acc {}]\n    (let [fk (first ik)\n          fv (first iv)]\n    (if (and fk fv)\n      (recur (rest ik) (rest iv) (assoc acc fk fv))\n      acc\n      )\n    \n    )\n  ))", "user": "54bbba99e4b0ed20f4ff6ec2"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map #(vector %1 %2) ks vs)))", "user": "4db6d993535d1e037afb2180"}, {"problem": 61, "code": "(fn [k v] (into {} (map #(vector %1 %2) k v)))", "user": "54df3c94e4b024c67c0cf7aa"}, {"problem": 61, "code": "(fn [a b]\n  (loop [acc {}\n         x a\n         y b]\n    (cond\n     (or (nil? x) (nil? y)) acc\n     :else (recur (conj acc [(first x) (first y)]) (next x) (next y)))))", "user": "54e79094e4b024c67c0cf818"}, {"problem": 61, "code": "#(apply assoc {} (mapcat list % %2))", "user": "4e68c465535d8ccf87e9fe8a"}, {"problem": 61, "code": "(fn [keys vals] (apply hash-map (interleave keys vals)))", "user": "54be792ee4b0ed20f4ff6eeb"}, {"problem": 61, "code": "(fn [keys vals]\n  (reduce (fn [acc x] (conj acc x)) {} (map vector keys vals)))", "user": "5315ba94e4b08068f379ed34"}, {"problem": 61, "code": "#(\n    into {} (map vector %1 %2)\n)", "user": "54c8eb61e4b045293a27f658"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "543c5200e4b032a45b86933e"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "54e2a779e4b024c67c0cf7d3"}, {"problem": 61, "code": "#(apply array-map (interleave %1 %2))", "user": "54e5bdf2e4b024c67c0cf7fe"}, {"problem": 61, "code": "#(reduce (fn [m kv] (apply assoc m kv)) {} (apply map vector %&))", "user": "54ca130ce4b057c6fda3a250"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "51a4d802e4b0def3c5c5869a"}, {"problem": 61, "code": "(fn [x y] (apply hash-map (interleave x y)))", "user": "54b83ae9e4b0ed20f4ff6e95"}, {"problem": 61, "code": "#(reduce conj {} (map vector %1 %2))", "user": "51b91b08e4b0e871ca4958f8"}, {"problem": 61, "code": "(fn [xs ys]\n  (into {} (map #(vector %1 %2) xs ys))\n  )", "user": "546a6c7ce4b00cfc9eacc154"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "54b5ce67e4b05787c3b163ac"}, {"problem": 61, "code": "(fn [a b] (into {} (map vector a b)))", "user": "4ec1923f535dfed6da9c6db2"}, {"problem": 61, "code": "(fn [l1 l2] (reduce #(apply assoc (cons %1 %2)) {} (map list l1 l2)))", "user": "54edcf96e4b024c67c0cf866"}, {"problem": 61, "code": "#(apply\tassoc {} (interleave %1 %2))", "user": "53d9e587e4b0e771c302547c"}, {"problem": 61, "code": "(fn [keycoll valcoll] (into {} (map vector keycoll valcoll)))", "user": "54a6baaee4b09f271ff37c8a"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "54f0d3fde4b024c67c0cf8a6"}, {"problem": 61, "code": "(fn [xs ys]\n  (reduce #(assoc %1 (first %2) (last %2)) {} (map #(list %1 %2) xs ys)))", "user": "546ff835e4b00cfc9eacc1b4"}, {"problem": 61, "code": "#(apply hash-map (mapcat list %1 %2))", "user": "4f598c87e4b0030a34fb2ada"}, {"problem": 61, "code": "#(into {} (map (fn [k v] [k v]) %1 %2))", "user": "518ba795e4b0f028e99addf0"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "54f2fe9fe4b050824f58f5b8"}, {"problem": 61, "code": "#(->> %2 (interleave %1) (apply hash-map))", "user": "504e2d18e4b0f6ff3350c47a"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "54e606c3e4b024c67c0cf803"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5480cce5e4b0e286459a115f"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "54361d92e4b032a45b8692f7"}, {"problem": 61, "code": "(fn [x y] (apply sorted-map (seq (interleave x y))))", "user": "54eca495e4b024c67c0cf855"}, {"problem": 61, "code": "#(apply hash-map (flatten (interleave %1 %2)))", "user": "54ef4a1ee4b024c67c0cf883"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "54e4edcae4b024c67c0cf7f3"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "539c736ce4b0b51d73faaf2b"}, {"problem": 61, "code": "(fn [col1 col2] (reduce #(let [[k v] %2]\n                               (assoc %1 k v)) {} (map #(vector %1 %2) col1 col2)))", "user": "52f53589e4b05e3f0be25f2c"}, {"problem": 61, "code": "(fn [coll1 coll2]\n  (loop [coll1 coll1 coll2 coll2 acc {}]\n    (if (or (empty? coll1) (empty? coll2))\n      acc\n      (recur (rest coll1) (rest coll2)\n             (assoc acc (first coll1) (first coll2))))))", "user": "54fdbe3fe4b07d26eda61d3b"}, {"problem": 61, "code": "#(apply hash-map (mapcat vector %1 %2))", "user": "54e0a9c3e4b024c67c0cf7b5"}, {"problem": 61, "code": "(fn [m1 m2] (into {} (map vector m1 m2)))", "user": "52540bcce4b0541d1855b952"}, {"problem": 61, "code": "(fn [a b] (into {} (map vector a b)))", "user": "54f64e99e4b0f2f3c5226ea4"}, {"problem": 61, "code": "(fn [ks vs]\n   (apply hash-map (interleave ks vs)))", "user": "51f66891e4b06ff1c25c52c1"}, {"problem": 61, "code": "(fn [l r] (into {} (map vector l r)))", "user": "54b04708e4b09f271ff37d11"}, {"problem": 61, "code": "(fn [a b] (into {} (map vector a b)))", "user": "545b9dd9e4b01be26fd74654"}, {"problem": 61, "code": "(fn [[& ks] [& vs]] (into {} (map vector ks vs)) )", "user": "54febf4be4b07d26eda61d45"}, {"problem": 61, "code": "#(apply assoc {} (apply interleave %&))", "user": "54f2a1b8e4b024c67c0cf8cb"}, {"problem": 61, "code": "(fn [k v] (apply hash-map (interleave k v)))", "user": "54eee3a3e4b024c67c0cf879"}, {"problem": 61, "code": "#(apply assoc {} (reverse(interleave %2  %1)))", "user": "54f4a457e4b0f2f3c5226e83"}, {"problem": 61, "code": "(fn [keys values]\n  (loop [keys keys\n         values values\n         res {}]\n    (if (or (empty? values) (empty? keys))\n      res\n      (recur (rest keys) (rest values) (assoc res (first keys) (first values))))))", "user": "54b31445e4b09f271ff37d35"}, {"problem": 61, "code": "#( apply hash-map  (flatten (partition 2 (interleave %1 %2))) )", "user": "54e51c7be4b024c67c0cf7f7"}, {"problem": 61, "code": "(comp #(apply hash-map %) interleave)", "user": "54edc818e4b024c67c0cf865"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "55088bb3e4b06e50f9beb10c"}, {"problem": 61, "code": "(fn\n  [x1 x2]\n  (loop [y 0 j {}]\n    (if (= y (min (count x1) (count x2)))\n      j\n      (recur (inc y) (assoc j (nth x1 y) (nth x2 y))))))", "user": "54bcab07e4b0ed20f4ff6ed5"}, {"problem": 61, "code": "(fn solve [keys vals]\n  (if (or (empty? keys) (empty? vals))\n    {}\n    (assoc (solve (rest keys) (rest vals)) (first keys) (first vals))))", "user": "55058a4fe4b086ebe8a79c89"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "54fc7d89e4b07d26eda61d2b"}, {"problem": 61, "code": "(fn my-map [vkeys vvals]\n\t\t\t(reduce\n\t\t\t#(assoc %1 (first %2) (last %2))\n\t\t\t{}\n\t\t\t(map #(vector %1 %2) vkeys vvals)\n\t\t\t)\n\t\t\t)", "user": "54ff6084e4b07d26eda61d50"}, {"problem": 61, "code": "#(apply array-map (interleave %1 %2))", "user": "5505ceb3e4b086ebe8a79c8b"}, {"problem": 61, "code": "(fn [x y] (apply hash-map (interleave x y)))", "user": "55079757e4b021ccfedb96a9"}, {"problem": 61, "code": "(fn [ks vs]\n  (reduce (fn [m [k v]] (assoc m k v))\n          {}\n          (map vector ks vs)))", "user": "546ed28be4b00cfc9eacc1a5"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "550e0373e4b06e50f9beb162"}, {"problem": 61, "code": "(fn [key val] (apply hash-map (interleave key val)))", "user": "534fa9dae4b084c2834f4acf"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "550609b3e4b021ccfedb9695"}, {"problem": 61, "code": "(fn mp [key-seq val-seq]\n    (apply hash-map (interleave key-seq val-seq)))", "user": "54f09599e4b024c67c0cf89d"}, {"problem": 61, "code": "(fn [a b] (apply hash-map (interleave a b)))", "user": "54d127b7e4b0e8a36923e5de"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "54e24a05e4b024c67c0cf7ce"}, {"problem": 61, "code": "(fn [keys vals]\n\t(loop [result {}\n\t\t\tks (seq keys)\n\t\t\tvs (seq vals)]\n\t\t(if (and ks vs)\n\t\t\t(recur (assoc result (first ks) (first vs))\n\t\t\t\t\t(next ks)\n\t\t\t\t\t(next vs))\n\t\t\tresult)))", "user": "54eea988e4b024c67c0cf875"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "54f6f00fe4b01ecee9d88814"}, {"problem": 61, "code": "#(reduce into (map hash-map %1 %2))", "user": "4fa5c8dde4b081705acca1af"}, {"problem": 61, "code": "#(into {} (map vec (partition 2 (interleave %1 %2))))", "user": "54cbd97ae4b057c6fda3a283"}, {"problem": 61, "code": "(fn [ks vs] (apply hash-map (interleave ks vs)))", "user": "540a4f20e4b0addc1aec66ef"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5510f734e4b06e50f9beb18f"}, {"problem": 61, "code": "(fn [coll1 coll2] (into {} (map vector coll1 coll2)))", "user": "54ccf9d5e4b057c6fda3a295"}, {"problem": 61, "code": "#(reduce (fn [m [k v]] (assoc m k v)) {} (map (fn [k v] [k v]) %1 %2))", "user": "550aeddae4b06e50f9beb135"}, {"problem": 61, "code": "(fn [keys vals] \n  (into {} (map #(vector %1 %2) keys vals)))", "user": "550615c0e4b021ccfedb9696"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5511fd7ee4b06e50f9beb19e"}, {"problem": 61, "code": "(fn [k v] (into {} (map vector k v)))", "user": "53213810e4b09d4e7a9b54b0"}, {"problem": 61, "code": "#(reduce conj (map hash-map % %2))", "user": "54e1197fe4b024c67c0cf7c0"}, {"problem": 61, "code": "(fn my-zipmap \n  ([lst1 lst2] (my-zipmap lst1 lst2 []))\n  ([lst1 lst2 ret]\n    (if (or (empty? lst1) (empty? lst2)) \n      (apply array-map ret)\n      (my-zipmap (rest lst1) (rest lst2) (concat ret (cons (first lst1) (cons (first lst2) nil)))))))", "user": "54c8ac49e4b045293a27f64e"}, {"problem": 61, "code": "(fn [x y]\n   (loop [x x y  y res {}]\n     (if-not (empty? x)\n       (if-not (empty? y)\n         (recur (rest x) (rest y) (assoc res (first x) (first y)))\n         res)\n       res)))", "user": "5508102ee4b021ccfedb96b0"}, {"problem": 61, "code": "(fn [c1 c2] (apply assoc {} (interleave c1 c2)))", "user": "5514a60fe4b055c2f668d4d7"}, {"problem": 61, "code": "; first try:\n\n#(apply conj (map hash-map % %2))\n\n; perhaps this is better/more efficient:\n; #(into {} (map vector %1 %2))", "user": "550fdc1de4b06e50f9beb17d"}, {"problem": 61, "code": "(fn [k v] (apply hash-map (interleave k v)))", "user": "551535cee4b055c2f668d4df"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "52e087dde4b09f7907dd1412"}, {"problem": 61, "code": "(fn [c1 c2]\n  (let [couples (map #(list %1 %2) c1 c2)]\n    (reduce (fn [m [k v]] (assoc m k v))\n            {}\n            couples)))", "user": "55170dd9e4b06a49daca83bd"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "532018efe4b08068f379edcd"}, {"problem": 61, "code": "#(apply array-map (interleave %1 %2))", "user": "5510aa92e4b06e50f9beb188"}, {"problem": 61, "code": "(fn [first-vector other-vector]\n  (let [len (min (count first-vector) (count other-vector))\n        first-vector (take len first-vector)\n        other-vector (take len other-vector)]\n    (loop [acc {}\n           first-vector first-vector\n           other-vector other-vector]\n      (if (empty? first-vector)\n        acc\n        (recur (merge acc {(first first-vector) (first other-vector)}) (rest first-vector) (rest other-vector))))))", "user": "5512aca6e4b055c2f668d4b4"}, {"problem": 61, "code": "(fn my-zipmap [s1 s2]\n  (apply merge (map (fn [k v] {k v}) s1 s2)))", "user": "550c55d0e4b06e50f9beb14d"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5515649fe4b055c2f668d4e3"}, {"problem": 61, "code": "(fn [kcoll vcoll] (reduce (fn [m p] (assoc m (first p) (second p))) {} (map vector kcoll vcoll)))", "user": "5519c157e4b00ace28fe6e32"}, {"problem": 61, "code": "(fn [keys values] (reduce #(assoc %1 (first %2) (second %2)) {} (map vector keys values)))", "user": "550ff2a3e4b06e50f9beb17f"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5510d948e4b06e50f9beb18d"}, {"problem": 61, "code": "#(loop [ks %1 vs %2 res {}]\n   (if (and ks vs)\n     (recur (next ks) (next vs) (assoc res (first ks) (first vs)))\n     res))", "user": "503f923fe4b00d1a725ff2ad"}, {"problem": 61, "code": "(fn [k v]\n  (loop [m {}\n         k k\n         v v]\n    (cond\n     (or (empty? k)\n         (empty? v)) m\n     true (recur (conj m [(first k) (first v)]) (rest k) (rest v)))))", "user": "551ed214e4b08d5046aa8a4d"}, {"problem": 61, "code": "(fn [keys vals]\n  (loop [k keys v vals m {}]\n    (if (or (empty? k) (empty? v))\n      m\n      (recur (rest k) (rest v) (assoc m (first k) (first v))))))", "user": "55151417e4b055c2f668d4da"}, {"problem": 61, "code": "(fn [ks vs]\n    (loop [ks ks vs vs acc {}]\n      (if (or (empty? ks) (empty? vs))\n        acc\n        (recur (rest ks) (rest vs) (assoc acc (first ks) (first vs))))))", "user": "551a21ece4b091ff45eda993"}, {"problem": 61, "code": "#(apply array-map (interleave %1 %2))", "user": "5520974be4b08d5046aa8a63"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {}\n        (map vector ks vs)))", "user": "512e31e9e4b0b740abc59823"}, {"problem": 61, "code": "(fn [x y]\n  (into {} (map vector x y)))", "user": "551ecb76e4b08d5046aa8a4c"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (map vector ks vs)))", "user": "50310713e4b05b7df5a0b84c"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "551c66dae4b07993ea3788de"}, {"problem": 61, "code": "(fn [keys vals]\n  (apply hash-map (flatten (map #(list %1 %2) keys vals))))", "user": "541f89a5e4b01498b1a71a99"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "54393c3fe4b032a45b86931a"}, {"problem": 61, "code": "(fn [ks vs] (apply hash-map (mapcat list ks vs)))", "user": "552356fae4b0882d96d091af"}, {"problem": 61, "code": "(fn [ks vs]\n  (loop [ks ks, vs vs, acc {}]\n    (if (or (empty? ks) (empty? vs))\n      acc\n      (let [k (first ks), v (first vs)]\n       (recur (rest ks) (rest vs) (assoc acc k v))))))", "user": "4f4e78fee4b03ad3f0c10cc8"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "50c6052ce4b0c9dc10d15c56"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "55201d18e4b08d5046aa8a5d"}, {"problem": 61, "code": "#(apply hash-map (interleave% %2))", "user": "5507cfd3e4b021ccfedb96ad"}, {"problem": 61, "code": "(fn [k v] (apply assoc {} (interleave k v)))", "user": "5522cd9ae4b0882d96d091ab"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "551ee974e4b08d5046aa8a50"}, {"problem": 61, "code": "(fn [col1 col2]\n      (apply hash-map (interleave col1 col2)))", "user": "54b67463e4b05787c3b163bc"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "533c2605e4b0e30313ee6cd7"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "54074fc5e4b0addc1aec66b6"}, {"problem": 61, "code": "#(apply merge (map hash-map %1 %2))", "user": "4f03e60d535dcb61093f6b7a"}, {"problem": 61, "code": "#(apply assoc {} (interleave % %2))", "user": "514504c2e4b021a5ff8301fc"}, {"problem": 61, "code": "(fn [ks vs] (apply (partial conj {}) (map vector ks vs)))", "user": "55253217e4b0882d96d091ce"}, {"problem": 61, "code": "(fn [n, m] (into {} (map vector n m)))", "user": "5527be83e4b0ffed3738f936"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "54126d0ce4b01498b1a719d5"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "54ab1b5ae4b09f271ff37cc2"}, {"problem": 61, "code": "(fn [ks vs]\n  (reduce\n   (partial apply assoc)\n   {}\n   (map vector ks vs)))", "user": "521d064fe4b0c4ef0be830a8"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "55280930e4b0ffed3738f93b"}, {"problem": 61, "code": "(fn [a b](loop[a a b b m {}](if (or (empty? a) (empty? b)) m (recur (rest a) (rest b) (assoc m (first a) (first b))))))", "user": "54ecd7dde4b024c67c0cf85c"}, {"problem": 61, "code": "(fn [x y] (into {} (mapv (fn [a b] [ a b] ) x y )))", "user": "528b3f5ae4b0239c8a67ae93"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5484fab9e4b0e286459a11a6"}, {"problem": 61, "code": "(fn zipm\n  [ks vls]\n  (apply hash-map (interleave ks vls)))", "user": "54c3747de4b045293a27f60e"}, {"problem": 61, "code": "(fn [xs ys & m]\n   (let [m (if (nil? m) {} m)\n         x (first xs)\n         xs (rest xs)\n         y (first ys)\n         ys (rest ys)]\n     (if (or (empty? xs) (empty? ys))\n       (assoc m x y)\n       (recur xs ys (assoc m x y)))))", "user": "51bb08a4e4b0fe3ecfb46446"}, {"problem": 61, "code": "#(apply merge (map hash-map % %2))", "user": "505106fee4b05ab4c7e07d38"}, {"problem": 61, "code": "(fn [coll1 coll2]\n  (apply merge-with into (map hash-map coll1 coll2))\n  )", "user": "55240916e4b0882d96d091b6"}, {"problem": 61, "code": "#(into {} (map (fn [x y] (vector x y)) %1 %2))", "user": "55249f64e4b0882d96d091c6"}, {"problem": 61, "code": "(fn [keys values]\n  (loop [ks keys\n         vs values\n         result {}]\n    (if (or (empty? ks) (empty? vs))\n      result\n      (recur (rest ks) (rest vs) (assoc result (first ks) (first vs))))))", "user": "5524120fe4b0882d96d091b7"}, {"problem": 61, "code": "(fn mapping\n  [[x & xs] [y & ys]]\n  (if (or (not x) (not y))\n    nil\n    (merge {x y} (mapping xs ys))))", "user": "550d9452e4b06e50f9beb15d"}, {"problem": 61, "code": "(fn [keys values]\n  (loop [K keys V values M {}]\n    (if (or (empty? K) (empty? V))\n      M\n      (recur (rest K) (rest V) (assoc M (first K) (first V)))\n      )\n    )\n  )", "user": "552d9013e4b076ab5578f7ea"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "552bc0f5e4b0ffed3738f968"}, {"problem": 61, "code": "(fn [xs ys]\n  (loop [m {}\n         xs xs\n         ys ys]\n    (if (and xs ys)\n      (recur (assoc m (first xs) (first ys)) (next xs) (next ys))\n             m)))", "user": "54f4adc8e4b0f2f3c5226e86"}, {"problem": 61, "code": "(fn [ks vs] \n  (into {} (map hash-map ks vs)))", "user": "5465febde4b01be26fd746e1"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "55297a7ae4b0ffed3738f94b"}, {"problem": 61, "code": "(fn [ks vs]\n  (loop [ks ks\n         vs vs\n         i 0\n         out {}]\n    (if (or (empty? ks) (empty? vs))\n      out\n      (recur (rest ks) (rest vs) (inc i) (assoc out (first ks) (first vs))))))", "user": "5530b827e4b076ab5578f818"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5515f96ce4b055c2f668d4f7"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "54db3d82e4b024c67c0cf75f"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "553698fae4b09218d5f44fc0"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "552e1c98e4b076ab5578f7ee"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map vector ks vs)))", "user": "5531e445e4b09218d5f44f76"}, {"problem": 61, "code": "#(apply assoc {} (interleave % %2))", "user": "552694e7e4b0ffed3738f920"}, {"problem": 61, "code": "(fn [k v] (apply assoc {} (interleave k v)))", "user": "54caaa48e4b057c6fda3a267"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "553a43cae4b09218d5f44ff2"}, {"problem": 61, "code": "(fn [a b]\n  (loop [a a\n         b b\n         acc {}]\n    (if (or (empty? a) (empty? b))\n      acc\n      (recur (rest a) (rest b) (assoc acc (first a) (first b))))))", "user": "5141a8f2e4b02fd87f5064c1"}, {"problem": 61, "code": "(fn [a b]\n  (loop [res {} k a v b]\n    (if (or (empty? k) (empty? v))\n      res\n      (recur (conj res [(first k) (first v)])\n             (next k)\n             (next v)))))", "user": "553b87abe4b09218d5f45003"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "553e0b70e4b0a04f792994e8"}, {"problem": 61, "code": "(fn [a b]\n  (apply hash-map (interleave a b)))", "user": "53fcd574e4b0de5c418485d9"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (mapv vector ks vs)))", "user": "553dd883e4b0a04f792994e6"}, {"problem": 61, "code": "#(reduce conj {} (map vector %1 %2))", "user": "553abb28e4b09218d5f44ffb"}, {"problem": 61, "code": "#(into {} (map (fn [a b] [a b]) %1 %2))", "user": "52cda397e4b07d0d72b2737a"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "54eee38ce4b024c67c0cf878"}, {"problem": 61, "code": "#(apply hash-map\n        ((fn my-zip [c1 c2]\n           (let [s1 (seq c1)\n                 s2 (seq c2)]\n             (when (and s1 s2)\n               (cons (first s1)\n                     (cons (first s2)\n                           (my-zip (rest c1) (rest c2)))))))\n         %1 %2))", "user": "5515b138e4b055c2f668d4ed"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "550f1c99e4b06e50f9beb171"}, {"problem": 61, "code": "(fn [k-vec v-vec]\n  (into {} (map vector k-vec v-vec)))", "user": "52bc0dade4b07a9af57922f1"}, {"problem": 61, "code": "(fn  [a b] (apply array-map (into [] (#(interleave %1 %2) a b))))", "user": "5423dc6ae4b01498b1a71ad5"}, {"problem": 61, "code": "(fn [k v] (into {} (map vector k v)))", "user": "55316b8ae4b076ab5578f825"}, {"problem": 61, "code": "; The online docs for interleave have this problem as an example!\n#(apply assoc {} (interleave %1 %2))", "user": "5535e822e4b09218d5f44fb2"}, {"problem": 61, "code": "(fn [ks vls]\n  (apply hash-map (interleave ks vls)))", "user": "551d5cb9e4b07993ea3788e9"}, {"problem": 61, "code": "(fn [a b]\n  (reduce\n   (fn [m e]\n     (conj m e)\n     )\n   {}\n   (map (fn [m n] [m n]) a b)))", "user": "552d2e4fe4b076ab5578f7e1"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5540cc0ce4b0a04f79299505"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "553478dce4b09218d5f44f9d"}, {"problem": 61, "code": "(fn [x y]\n  ((fn [k v m]\n     (if (or (empty? k) (empty? v))\n       m\n       (recur (rest k) (rest v) (assoc m (first k) (first v)))))\n   x y {}))", "user": "55495318e4b0a04f79299566"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "4faf97d8e4b081705acca258"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map vector ks vs)))", "user": "4fcf1755e4b03432b189f40c"}, {"problem": 61, "code": "(fn [kc vc]\n  (loop [kc kc vc vc result {}]\n    (let [fc (first kc) fv (first vc)]\n      (if (or (nil? fc) (nil? fv))\n        result\n        (recur (rest kc) (rest vc) (into result {fc fv}))))))", "user": "5546704be4b0a04f7929953d"}, {"problem": 61, "code": "(fn [keys vals]\n  (loop [k keys v vals m {}]\n    (if (or (empty? k)(empty? v)) m\n      (recur (rest k) (rest v) (assoc m (first k) (first v))))))", "user": "554dff83e4b00713264bd98d"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "554680cbe4b0a04f7929953e"}, {"problem": 61, "code": "#(into {} (map hash-map %1 %2))", "user": "550e52dbe4b06e50f9beb165"}, {"problem": 61, "code": "(fn zmap [ks vs]\n  (->> (interleave ks vs)\n      (partition 2)\n      (map #(vec %))\n      (into {})))", "user": "5532a04ee4b09218d5f44f82"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "54f86b8ce4b01ecee9d88828"}, {"problem": 61, "code": "#(loop [[x & xs] %1, [y & ys] %2, ret {}]\n   (if (and x y)\n     (recur xs ys (conj ret [x y]))\n     ret))", "user": "554b7056e4b0a04f79299583"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5264383be4b03e8d9a4a70cb"}, {"problem": 61, "code": "#(into {} ( map vector % %2))", "user": "555093b2e4b00713264bd9ab"}, {"problem": 61, "code": "(fn [a b]\n(apply merge (map #(hash-map %1 %2) a b))\n   )", "user": "554b2151e4b0a04f79299580"}, {"problem": 61, "code": "(fn [ks vs] \n  (loop [k ks\n         v vs\n         r {}]\n    (if (or (empty? k)\n            (empty? v))\n      r\n      (recur (rest k) (rest v) (assoc r (first k) (first v))))))", "user": "5283a919e4b0239c8a67adbe"}, {"problem": 61, "code": "(fn [a b]\n  (into {} (map #(vector %1 %2) a b)))", "user": "554edb85e4b00713264bd99a"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "547c2c6ce4b0c51c1f4d72e3"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "543366dde4b0b6b47310fcdf"}, {"problem": 61, "code": "(fn [ks vs]\n  (let [pairs (map list ks vs)]\n    (reduce (fn [acc elt] (assoc acc (first elt) (second elt))) \n            {} pairs)))", "user": "5553b924e4b0deb715856e06"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "52ce1abfe4b07d0d72b27389"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5504dd64e4b086ebe8a79c83"}, {"problem": 61, "code": "#(reduce merge (map hash-map %1 %2))", "user": "5280a1ece4b0757a1b171407"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "55429859e4b0a04f7929951f"}, {"problem": 61, "code": "(fn [thekeys thevalues] (apply hash-map (interleave thekeys thevalues)))", "user": "55536a8ae4b0deb715856e03"}, {"problem": 61, "code": "#(apply hash-map (mapcat vector % %2))", "user": "555521a5e4b0deb715856e12"}, {"problem": 61, "code": "(fn [x y]\n      (reduce merge {} (map (fn [x y] {x y}) x y)))", "user": "5540fe42e4b0a04f7929950a"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "55484800e4b0a04f79299558"}, {"problem": 61, "code": "#(apply hash-map (mapcat list % %2))", "user": "55337e61e4b09218d5f44f8e"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "54d1b6ffe4b0e8a36923e5e6"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "554b8572e4b0a04f79299589"}, {"problem": 61, "code": "(fn [v1 v2]\n  (loop [v1 v1 v2 v2 m {}]\n    (if (or (empty? v1)\n            (empty? v2))\n      m\n      (recur (rest v1) (rest v2) (into m {(first v1) (first v2)})))))", "user": "54cad59ee4b057c6fda3a26e"}, {"problem": 61, "code": "(fn [c1 c2]\n  (reduce (fn [m [k v]] (assoc m k v)) {} (map vector c1 c2)))", "user": "5523fce8e4b0882d96d091b4"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5486e317e4b0e286459a11c0"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "555ac933e4b0deb715856e49"}, {"problem": 61, "code": "(fn [ks vs] (apply merge (map #(assoc {} %1 %2) ks vs)))", "user": "5169b23fe4b03f62cda68cee"}, {"problem": 61, "code": "#(apply hash-map (->> (map vector %1 %2) flatten))", "user": "54857657e4b0e286459a11ac"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "53571732e4b04ce2eb3ed275"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "52e851bfe4b09f7907dd149a"}, {"problem": 61, "code": "(fn [xs ys] (reduce #(merge % %2) {} (map #(hash-map % %2) xs ys)))", "user": "55150524e4b055c2f668d4d9"}, {"problem": 61, "code": "(fn [ks vs]\n  (loop [acc (hash-map) k ks v vs]\n   (if (or \n           (empty? k)\n           (empty? v))\n     acc\n     (recur (conj acc [(first k) (first v)]) (rest k) (rest v)))))", "user": "54487527e4b032a45b8693cc"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "535944d6e4b04ce2eb3ed296"}, {"problem": 61, "code": "#(apply assoc {} (interleave % %2))", "user": "545ddac3e4b01be26fd74676"}, {"problem": 61, "code": "#(into{}(map vector %1%2))", "user": "5562442be4b0c656e3ff17d5"}, {"problem": 61, "code": "(fn [a b] (apply hash-map (apply concat (map list a b))))", "user": "555bd27ae4b0b056612e2244"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "5552b617e4b0deb715856df8"}, {"problem": 61, "code": "(fn [ks vs]\n  (loop [ks ks vs vs m {}]\n    (if (or (empty? ks) (empty? vs))\n      m\n      (recur\n        (rest ks)\n        (rest vs)\n        (conj m [(first ks) (first vs)])))))", "user": "556159fae4b0c656e3ff17c7"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "555a5731e4b0deb715856e44"}, {"problem": 61, "code": "#(loop [m {} k %1 v %2] (if (or (empty? k) (empty? v)) m (recur (assoc m (first k) (first v)) (rest k) (rest v))))", "user": "553c05b7e4b09218d5f45011"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "53f5666ee4b0db01ade6f9cf"}, {"problem": 61, "code": "(fn [keys vals] (into {} (reverse (apply assoc {} (interleave keys vals)))))", "user": "554bc64ae4b0a04f79299598"}, {"problem": 61, "code": "(fn [keys vals]\n  (into {} (map vector keys vals)))", "user": "55586905e4b0deb715856e2b"}, {"problem": 61, "code": "(fn [keys values]\n     ((fn [keys values result]\n       (cond\n         (empty? keys) result\n         (empty? values) result\n         :else (recur (rest keys) (rest values) (assoc result (first keys) (first values)))\n       )\n     ) keys values {})\n)", "user": "53ecd01fe4b0d648e757f4b9"}, {"problem": 61, "code": "(fn f [[k & ks] [v & vs]]\n  (if (and k v)\n    (assoc (f ks vs) k v)))", "user": "54c5cc17e4b045293a27f624"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "55631739e4b0c656e3ff17e2"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "55645592e4b0c656e3ff1802"}, {"problem": 61, "code": "(fn [l1 l2] (apply array-map (interleave l1 l2)))", "user": "54f8b6f4e4b01ecee9d8882c"}, {"problem": 61, "code": "(fn [k v] (apply hash-map (interleave k v)))", "user": "4e28ddd1535deb9a81d77efd"}, {"problem": 61, "code": "(fn [x y] \n  (into {} (map vector x y)))", "user": "555df9c8e4b0a2eb076a39b2"}, {"problem": 61, "code": "#(into {} (apply map hash-map %&))", "user": "5501a1e1e4b07d26eda61d75"}, {"problem": 61, "code": "(fn [a b]\n  (apply sorted-map (interleave a b)))", "user": "555f0789e4b0a2eb076a39bf"}, {"problem": 61, "code": "(fn my-zip-map [ks vs]\n  (into {} (map vector ks vs)))", "user": "556405e5e4b0c656e3ff17fb"}, {"problem": 61, "code": "(fn [a b] \n  (loop [a a b b c {}]\n    (if\t(or (empty? a) (empty? b))\n      \tc\n     \t(recur (rest a) (rest b) (assoc c (first a) (first b))))))", "user": "5562f08ae4b0c656e3ff17df"}, {"problem": 61, "code": "(fn zmap [ks vs](apply hash-map (interleave ks vs)))", "user": "5545477fe4b0a04f79299531"}, {"problem": 61, "code": "(fn [ k v ] \n  (apply merge\n  (map #( hash-map %1 %2 ) k v)))", "user": "556880dae4b0c656e3ff1856"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "556b83fbe4b09a3098a524ee"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "556c70dae4b09a3098a524fd"}, {"problem": 61, "code": "#(into {} \n       (reverse \n        (apply assoc {} (interleave %1 %2))))", "user": "553fa883e4b0a04f792994f9"}, {"problem": 61, "code": "#(into {} (map  hash-map %1 %2))", "user": "52c70127e4b0c2d177d6211a"}, {"problem": 61, "code": ";#(loop [k %,v %2,m {}]\n;   (if (or (empty? k) (empty? v)) m\n;     (recur (rest k) (rest v) (conj m [(first k) (first v)]))))\n\n;#(into {} (map (fn [k v] (assoc {} k v)) % %2))\n\n#(into {} (map vector % %2))", "user": "555e9dbfe4b0a2eb076a39bc"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "4ef08bd6535dced4c769f20a"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "520e46cee4b066f3ea161c97"}, {"problem": 61, "code": "(fn [x y] (apply hash-map (mapcat #(vector %1 %2) x y)))", "user": "524f3e6de4b0541d1855b805"}, {"problem": 61, "code": "(fn map-maker\n  ([key-coll val-coll] (map-maker key-coll val-coll {} ) )\n  ([key-coll val-coll theMap] \n   (if (or (empty? key-coll) (empty? val-coll))\n     theMap\n     (map-maker \n      (rest key-coll) \n      (rest val-coll) \n      (assoc theMap (first key-coll) (first val-coll) ) \n     )\n    )\n   )\n  )", "user": "5564709ee4b0c656e3ff1807"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply hash-map (interleave ks vs)))", "user": "55702081e4b09a3098a52529"}, {"problem": 61, "code": "(fn [keys values]\n    (reduce (fn [map [key value]] (assoc map key value))\n            {}\n            (map (fn [k v] [k v]) keys values)))", "user": "554a75c9e4b0a04f79299575"}, {"problem": 61, "code": "(fn [a b]  \n  (into {} (map (fn [x y] [x y]) a b)))", "user": "55625903e4b0c656e3ff17d7"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5550bcece4b00713264bd9ae"}, {"problem": 61, "code": "(fn [a b](into {} (map #(hash-map %1 %2) a b)))", "user": "552800d7e4b0ffed3738f93a"}, {"problem": 61, "code": "(comp (partial into {})\n      (partial map vector))", "user": "54d9f7f1e4b024c67c0cf751"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map #(vector %1 %2) ks vs)))", "user": "556a3243e4b09a3098a524de"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "51e8736ae4b006d205356a4f"}, {"problem": 61, "code": "(fn [a b] (into {} (map #(vector % %2) a b)))", "user": "54e345a1e4b024c67c0cf7db"}, {"problem": 61, "code": "#(apply hash-map (mapcat list %1 %2))", "user": "555f3bfde4b0a2eb076a39c1"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "550fa523e4b06e50f9beb17a"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5565d5e4e4b0c656e3ff181f"}, {"problem": 61, "code": "(fn [k v]\n  (apply assoc {}\n         (interleave k v)))", "user": "53065acbe4b02e8216869792"}, {"problem": 61, "code": "(fn [vec1 vec2](into {} (vec (map (fn[x y] [x y] ) vec1 vec2))))", "user": "55757e81e4b05c286339e063"}, {"problem": 61, "code": "(fn [a b] (into {} (map vector a b)))", "user": "554f7ef2e4b00713264bd9a1"}, {"problem": 61, "code": "(fn [ks vs]\n              (reduce into {}\n                      (map (fn [k v] {k v})\n                           ks\n                           vs)))", "user": "53f31dafe4b0742d9025b0f0"}, {"problem": 61, "code": "#(reduce (partial apply assoc) {} (map list %1 %2))", "user": "52503747e4b0541d1855b828"}, {"problem": 61, "code": "(fn [xs ys]\n  (into {} (map (fn [x y] [x y]) xs ys)))", "user": "501b1efee4b0b12d9c5f4d82"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply hash-map (interleave ks vs)))", "user": "541b41d1e4b01498b1a71a65"}, {"problem": 61, "code": "#(reduce merge (map hash-map %1 %2))", "user": "557954aae4b05c286339e092"}, {"problem": 61, "code": "#(apply assoc {} (interleave % %2))", "user": "552a793ee4b0ffed3738f955"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "55630cc1e4b0c656e3ff17e0"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "4f04664a535dcb61093f6bc1"}, {"problem": 61, "code": "(fn [k v]\n  (loop [k k v v out {}]\n  \t(if (or (empty? k) (empty? v))\n      out\n      (recur (rest k) (rest v) (assoc out (first k) (first v))))))", "user": "551afdf8e4b07993ea3788cb"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "506f0968e4b09350ab4199f5"}, {"problem": 61, "code": "#(apply hash-map (mapcat list %1 %2))", "user": "543be8f0e4b032a45b869337"}, {"problem": 61, "code": "(fn [cles valeurs] (into (sorted-map)(map #(into [] %) (partition 2 (interleave cles valeurs))))\n)", "user": "556f2009e4b09a3098a52519"}, {"problem": 61, "code": "#(apply (partial assoc {}) (mapcat list %1 %2))", "user": "5581747fe4b05c286339e0fa"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "554bced1e4b0a04f79299599"}, {"problem": 61, "code": "#(->> (interleave % %2) (apply hash-map))", "user": "54e1939ce4b024c67c0cf7c5"}, {"problem": 61, "code": "(fn [lk lv]\n  (loop\n    [lik lk liv lv le {}]\n    (if (or (empty? lik) (empty? liv))\n      le\n      (recur (rest lik) (rest liv) (conj le [(first lik) (first liv)])))))", "user": "52979551e4b02ebb4ef75043"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5579bc24e4b05c286339e098"}, {"problem": 61, "code": "(fn [lst1 lst2]\n  (loop [m {} s1 lst1 s2 lst2]\n    (if (empty? s1) m\n      (if (empty? s2) m\n        (recur (assoc m (first s1) (first s2)) (rest s1) (rest s2))))))", "user": "558378dce4b05c286339e115"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "51bfc1f0e4b0e49ef9037dd4"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "557e8326e4b05c286339e0d7"}, {"problem": 61, "code": "(fn [keys vals]\n  (loop [keys keys\n         vals vals\n         result {}]\n    (let [current-key (first keys)\n          current-val (first vals)]\n      (if (or (empty? keys) (empty? vals))\n        result\n        (recur (rest keys) (rest vals) (assoc result current-key current-val))))))", "user": "55842c7ee4b05c286339e11d"}, {"problem": 61, "code": "(fn map-construct\n  [xs ys]\n  (apply hash-map (mapcat list xs ys)))", "user": "557e9d17e4b05c286339e0d8"}, {"problem": 61, "code": "#(apply array-map (interleave %1 %2))", "user": "5566463ee4b0c656e3ff1831"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "5585aa48e4b001b0851d7510"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "54bad977e4b0ed20f4ff6eb9"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "558466fce4b04192f3441eee"}, {"problem": 61, "code": "(fn [v1 v2]\n\t(loop [i 0 result {}]\n\t\t(if (or (= (count v1) i) (= (count v2) i))\n\t\t\tresult\n\t\t\t(recur (inc i) (assoc result (get v1 i) (get v2 i)))\n\t\t)\n\t)\n)", "user": "5559b443e4b0deb715856e3c"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "55896a0ce4b059ccff29b204"}, {"problem": 61, "code": "#(into (sorted-map) (vec (map vec (partition 2 (interleave %1 %2)))))", "user": "5589e88ae4b0277789237610"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "52b89d55e4b07a9af57922b3"}, {"problem": 61, "code": "(fn [keycoll valcoll] (apply merge (map #(array-map %1 %2) keycoll valcoll)))", "user": "554a270fe4b0a04f79299570"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply assoc {} (interleave ks vs)))", "user": "558bb38fe4b0277789237631"}, {"problem": 61, "code": "#(apply array-map (apply interleave %&))", "user": "4f070ce6535dcb61093f6c1e"}, {"problem": 61, "code": "#(apply merge (map hash-map %1 %2))", "user": "558b50d5e4b027778923762b"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "555c6344e4b0b056612e224c"}, {"problem": 61, "code": "(fn [ks vs] \n  (into {} (map vector ks vs))\n  )", "user": "556bc76ae4b09a3098a524f3"}, {"problem": 61, "code": "#(apply hash-map(interleave %1 %2))", "user": "5589a735e4b059ccff29b206"}, {"problem": 61, "code": "(fn \n[keys vals]\n(loop [map {}\nks (seq keys)\nvs (seq vals)]\n(if (and ks vs)\n(recur (assoc map (first ks) (first vs))\n(next ks)\n(next vs))\nmap)))", "user": "55306b8ae4b076ab5578f812"}, {"problem": 61, "code": "(fn [z w] (into {} (map (fn [x y] [x y]) z w)))", "user": "55818b0ee4b05c286339e0fb"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "54d22860e4b0e8a36923e5ef"}, {"problem": 61, "code": "(fn [k, v]\n  (apply merge (map #(assoc {} %1 %2) k v)))", "user": "5590e55de4b0277789237676"}, {"problem": 61, "code": "(fn myassoc \n\t[seq1 seq2] \n\t(loop\n\t\t[\tmyseq1 seq1 \n\t\t\t\n\t\t\tmyseq2 seq2 \n\t\t\t\n\t\t\tcnt (if (<= (count seq1) (count seq2)) (count seq1) (count seq2) ) \n\n\t\t\tmymap nil]\n\n\t\t(if (= 0 cnt)\n\t\t\tmymap\n\t\t\t(recur (rest myseq1) (rest myseq2) (dec cnt) (assoc mymap (first myseq1) (first myseq2)))\n\t\t\t)\n\n\n\n\t\t))", "user": "55897fe2e4b059ccff29b205"}, {"problem": 61, "code": "#(into {} (map vec (map list %1 %2)))", "user": "55895eade4b059ccff29b202"}, {"problem": 61, "code": "#(apply merge (map hash-map %1 %2))", "user": "53c0f4dee4b00fb29b221259"}, {"problem": 61, "code": "(fn [c1 c2] \n  (loop [c (interleave c1 c2) res {}]\n    (if (empty? c)\n      res\n      (recur (drop 2 c) (assoc res (first c) (second c))))))", "user": "557f7c8be4b05c286339e0e0"}, {"problem": 61, "code": "(fn zm [ks vs]\n  (apply hash-map (interleave ks vs)))", "user": "54dce62be4b024c67c0cf78b"}, {"problem": 61, "code": "(fn [a b] (apply sorted-map (reduce concat [] (map #(conj [%] %2) a b))))", "user": "552f300fe4b076ab5578f7ff"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map vector ks vs)))", "user": "558df2ebe4b0277789237649"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "559279b7e4b0604b3f94d58c"}, {"problem": 61, "code": "(fn [key_coll, val_coll]\n    (reduce conj\n            (map #(hash-map %1 %2) key_coll val_coll)))", "user": "55893b09e4b059ccff29b1fe"}, {"problem": 61, "code": "(fn [ks vs]\n   (apply hash-map (mapcat #(list %1 %2) ks vs)))", "user": "531c6e72e4b08068f379eda0"}, {"problem": 61, "code": "(fn [a b] (apply conj (map (fn [x y] \n      {x y}) a b)))", "user": "5587d8b3e4b059ccff29b1e8"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "525873e8e4b0cb4875a45cb2"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5590ebb1e4b0277789237677"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "55079e55e4b021ccfedb96aa"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "558f4fbae4b0277789237661"}, {"problem": 61, "code": "#(apply assoc {} \n   (interleave %1 %2))", "user": "555883c5e4b0deb715856e2d"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5576e78de4b05c286339e075"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "55995fa7e4b031d6649c9ba9"}, {"problem": 61, "code": "(fn [x y] (apply hash-map (mapcat list x y)))", "user": "54530382e4b0e397800069cc"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "55933c7ae4b0c79f6e1db938"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply hash-map (interleave ks vs)))", "user": "55934bebe4b0c79f6e1db93b"}, {"problem": 61, "code": "(fn [s1 s2] (apply assoc {} (interleave s1 s2)))", "user": "5592bf9fe4b0c79f6e1db933"}, {"problem": 61, "code": "(fn [x y]\n  (loop [acc {} cnt (count x) a x b y]\n    (cond\n     (zero? cnt) acc\n     (nil? b) acc\n     :else( recur (assoc acc (first a) (first b)) (dec cnt) (next a) (next b)))))", "user": "5585f088e4b001b0851d7513"}, {"problem": 61, "code": "(fn func2\n  [x y]\n  (loop [hm {} i 0]\n    (if (= i (min (count x) (count y)))\n      hm\n      (recur (assoc hm (nth x i) (nth y i)) (inc i))\n      )\n    )\n)", "user": "5581a6dae4b05c286339e0fe"}, {"problem": 61, "code": "#(apply array-map (interleave % %2))", "user": "4fdb0c0ae4b05e33b9224f57"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "558a81fbe4b027778923761c"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "55882c84e4b059ccff29b1f2"}, {"problem": 61, "code": "(fn f [xs ys]\n  (cond (empty? xs) {}\n        (empty? ys) {}\n\t\ttrue (conj (f (rest xs) (rest ys)) {(first xs) (first ys)})))", "user": "5583888ae4b05c286339e117"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "559c13c5e4b066d22e731f61"}, {"problem": 61, "code": "(fn [s1 s2]\n  (apply hash-map (interleave s1 s2)))", "user": "51d55598e4b01da06753aa8e"}, {"problem": 61, "code": "(fn zmap [keyseq valseq]\n  (loop [keyseq-it keyseq\n         valseq-it valseq\n         ret-map {}]\n    (if (or (empty? keyseq-it)\n            (empty? valseq-it))\n      ret-map\n      (recur (rest keyseq-it)\n             (rest valseq-it)\n             (assoc ret-map\n               (first keyseq-it)\n               (first valseq-it))))))", "user": "559d33b3e4b0ec2b359424d9"}, {"problem": 61, "code": "(fn [x y] (into {} (map vec (partition 2 (interleave x y)))))", "user": "5369d072e4b0243289761ea1"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "559b2ad1e4b066d22e731f4e"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5576f299e4b05c286339e077"}, {"problem": 61, "code": "(fn [ks vs] (apply hash-map (interleave ks vs)))", "user": "55a12668e4b0acc240e3150b"}, {"problem": 61, "code": "#(apply merge (map (partial assoc {}) %1 %2))", "user": "559972d1e4b031d6649c9bab"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "55a0d7e0e4b0acc240e31503"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "559e25fde4b08a52bd4f97d0"}, {"problem": 61, "code": "(fn [colla collb]\n   (->> (partition 2 (interleave colla collb))\n       (map #(into [] %))\n      (into (sorted-map))\n       ))", "user": "5400e918e4b0de5c41848619"}, {"problem": 61, "code": "(fn problem61 [keys vals]\n  (loop [keyss keys\n         valss vals\n         map {}]\n    (if (and (seq keyss) (seq valss))\n      (recur (rest keyss) (rest valss) (assoc map (first keyss) (first valss)))\n      map)))", "user": "54d0cedde4b0e8a36923e5d2"}, {"problem": 61, "code": ";; fastest solution i can think of :)\n#(apply hash-map (interleave % %2))\n\n;; some zipmap kata :)\n#_(fn zipmapp\n  [xs ys]\n  (into {} (map #(vector % %2) xs ys)))\n\n;; some more zipmap kata...maybe more english like :)\n#_(fn zipmapp\n  [xs ys]\n  (->> (map #(vector % %2) xs ys)\n       flatten\n       (apply hash-map)))", "user": "5553b729e4b0deb715856e05"}, {"problem": 61, "code": "(fn [fields values] (apply hash-map (interleave fields values)))", "user": "55306f9de4b076ab5578f814"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "557e2eafe4b05c286339e0d2"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5594e0e3e4b0c79f6e1db95b"}, {"problem": 61, "code": "#(into {} (map hash-map % %2))", "user": "503e91d4e4b06c4e0e1fa269"}, {"problem": 61, "code": "(fn [keys values] (reduce into {} (map #(hash-map %1 %2) keys values)))", "user": "55205564e4b08d5046aa8a60"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "55a1d7f6e4b0acc240e31519"}, {"problem": 61, "code": "(fn [k v] (apply array-map (interleave k v)))", "user": "54a96a15e4b09f271ff37cad"}, {"problem": 61, "code": "(fn [keys vals]\n  (loop [k keys v vals r {}]\n    (if (or (empty? k) (empty? v))\n      r\n      (recur\n        (rest k)\n        (rest v)\n        (assoc r (first k) (first v))\n      )\n    )\n  )\n)", "user": "55929e89e4b0604b3f94d58e"}, {"problem": 61, "code": "(fn [xs ys] (into {} (map vector xs ys)))", "user": "559b55d6e4b066d22e731f54"}, {"problem": 61, "code": "#(apply merge (map (fn [x y] {x y}) %1 %2))", "user": "55989c25e4b031d6649c9b9b"}, {"problem": 61, "code": "#(into {}\n       (map vector % %2))", "user": "54a627bce4b09f271ff37c83"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "553527ede4b09218d5f44fab"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "4fdf4e2be4b05e33b9224f96"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "4fc5eb7fe4b0ee37620e1803"}, {"problem": 61, "code": "#(reduce (fn [acc e] (apply assoc acc e)) {} (partition-all 2 (interleave % %2)))", "user": "55a74d46e4b09e57187da2a3"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5416b4a2e4b01498b1a71a01"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map (fn [x y] [x y]) ks vs)))", "user": "5280539ce4b0757a1b1713f3"}, {"problem": 61, "code": "(fn ex [aval bval]\n   (let [val (map #(list (nth aval %1) (nth bval %1)) (range (min (count aval) (count bval))))]\n     (apply hash-map\n       (flatten (apply (partial conj [(first val)]) (rest val))\n                ))\n     )\n   )", "user": "54eff2bee4b024c67c0cf88d"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "55aa5f73e4b0988bba2ad94b"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map #(vector %1 %2)  ks vs)))", "user": "55496eeae4b0a04f79299569"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "55ac07afe4b03311e7b7328f"}, {"problem": 61, "code": "(fn f [s1 s2]\n  (reduce merge (map #(assoc {} % %2) s1 s2)))", "user": "55a62092e4b0acc240e31554"}, {"problem": 61, "code": "(fn [ck cv] (let [n (apply min (map count [ck cv]))] (loop [i 0 r {}]\n    (if (> n i) (recur (inc i) (assoc r (nth ck i) (nth cv i))) r\n ))))", "user": "55adf4d7e4b03311e7b732af"}, {"problem": 61, "code": "(fn [ks vs]\n  (loop [res {}\n         keys ks\n         vals vs]\n    (if (or (empty? keys) (empty? vals))\n      res\n      (recur (assoc res (first keys) (first vals))\n             (rest keys)\n             (rest vals))\n    )\n  )\n)", "user": "554756b8e4b0a04f79299549"}, {"problem": 61, "code": "(fn [a b] (apply hash-map (flatten ((fn [m n] (map list m n)) a b))))", "user": "55ab9e87e4b0988bba2ad955"}, {"problem": 61, "code": "(fn [k v] (apply merge (map #(hash-map % %2) k v)))", "user": "559c4236e4b066d22e731f67"}, {"problem": 61, "code": "(fn [a b] (reduce #(assoc %1 (:k %2) (:v %2)) {} (map (fn [x y] {:k x :v y}) a b)))", "user": "5448616be4b032a45b8693c9"}, {"problem": 61, "code": "#(reduce (fn [acc [k v]]\n           (assoc acc k v))\n         {}\n         (map list %1 %2))", "user": "55a5c3bee4b0acc240e3154e"}, {"problem": 61, "code": "#(into (hash-map) (map vector %1 %2))", "user": "5351fca5e4b084c2834f4aec"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "50ec409ce4b04edc33777045"}, {"problem": 61, "code": "(fn[x y] (apply hash-map (interleave x y)))", "user": "5564c113e4b0c656e3ff180d"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "53cb5559e4b00fb29b2212d2"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "54236ce1e4b01498b1a71ad1"}, {"problem": 61, "code": "(fn [k v] (into {} (map vector k v)))", "user": "549a1fede4b0f3d1d8e70f6a"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "55b527cbe4b01b9910ae2985"}, {"problem": 61, "code": "(fn [v1 v2]\n    (loop [v1_ v1 v2_ v2 r {}]\n        (if (and (seq v1_) (seq v2_))\n            (recur (rest v1_) (rest v2_) (conj r [(first v1_) (first v2_)]) )\n        r)))", "user": "55975569e4b031d6649c9b8e"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "55a0e139e4b0acc240e31504"}, {"problem": 61, "code": "#(apply assoc {} (interleave % %2))", "user": "55aa7c5ce4b0988bba2ad94d"}, {"problem": 61, "code": "#(apply hash-map (interleave (seq %1) (seq %2)))", "user": "55b1ab40e4b0da326a65cf6e"}, {"problem": 61, "code": ";#(into {} (map-indexed (fn [idx i] (vector (%1 idx) (%2 idx)) ) (if (> (count %1) (count %2)) %2 %1) ))\n#(into {} (map vector %1 %2))", "user": "55647a31e4b0c656e3ff1808"}, {"problem": 61, "code": "#(into {} (map (fn [k v] [k v]) %1 %2))", "user": "559a9a3de4b066d22e731f45"}, {"problem": 61, "code": "(fn  [x y]\n  (reduce #(into %1 %2) {}  (map #(identity {%1 %2}) x y)))", "user": "55aa1637e4b0988bba2ad949"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "55b1e9e7e4b0da326a65cf74"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "52cb6bb0e4b07d0d72b2734c"}, {"problem": 61, "code": "#(apply hash-map (mapcat (fn[x y] [x y]) %1 %2))", "user": "503c90aae4b06c4e0e1fa24b"}, {"problem": 61, "code": "(comp (partial into {}) (partial map vector))", "user": "55be39f9e4b01b9910ae2a06"}, {"problem": 61, "code": "(fn [keys vals]\n   (into {} (map #(vector %1 %2) keys vals)))", "user": "55b54ecbe4b01b9910ae2987"}, {"problem": 61, "code": "#(->> (map vector %1 %2) (into {}))", "user": "55b8c339e4b01b9910ae29b9"}, {"problem": 61, "code": "#(loop [res {}, l1 %1, l2 %2]\n   (if (and (seq l1) (seq l2))\n     (let [[f1 & r1] l1, [f2 & r2] l2]\n       (recur (assoc res f1 f2) r1 r2))\n     res))", "user": "55868660e4b059ccff29b1d4"}, {"problem": 61, "code": "#(loop [ks %1 vs %2 m {}]\n   (if (or (empty? ks) (empty? vs))\n     m\n     (let [fk (first ks) fv (first vs)]\n       (recur (rest ks) (rest vs) (conj m {fk fv})))))", "user": "55afc197e4b002ce9d5cbc18"}, {"problem": 61, "code": "(fn [x y] (apply merge (map #(hash-map % %2) x y)))", "user": "55b107fee4b002ce9d5cbc2a"}, {"problem": 61, "code": ";;(fn [keys vals]\n;;\t(loop [\tresult-map {} \t;; set initially empty map\n;;\t\tks (seq keys)\t\t;; get keys\n;;\t\tvs (seq vals)\t\t;; get values\n;;\t      ]\n;;\t\t(if (and ks vs)\n;;\t\t\t;; true\n;;\t\t\t(recur \n;;\t\t\t\t(assoc result-map (first ks) (first vs))\n;;\t\t\t\t(next ks) \n;;\t\t\t\t(next vs)\n;;\t\t\t)\n;;\t\t\t;; false\n;;\t\t\tresult-map\n;;\t\t)\n;;\t)\n;;)\n\n\n(fn [keys vals] (apply assoc {} (interleave keys vals)))", "user": "5595c60ee4b0c79f6e1db96f"}, {"problem": 61, "code": "#(into (hash-map) (map vector %1 %2))", "user": "55b3c03ee4b01b9910ae2975"}, {"problem": 61, "code": "#(apply hash-map (flatten (map vector %1 %2)))", "user": "5520d6b8e4b08d5046aa8a65"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "549dfe40e4b0f3d1d8e70f9a"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "55c0afa5e4b01b9910ae2a27"}, {"problem": 61, "code": "#(into {} (apply map vector [% %2]))", "user": "55bfc39ee4b01b9910ae2a1a"}, {"problem": 61, "code": "#(reduce conj {} (map vec (partition 2 (interleave % %2))))", "user": "55c10409e4b01b9910ae2a2c"}, {"problem": 61, "code": "#(reduce conj (map (partial assoc {}) %1 %2))", "user": "559454f2e4b0c79f6e1db952"}, {"problem": 61, "code": "(fn [v1 v2] (apply assoc {} (interleave v1 v2)))", "user": "4fffa422e4b0678c553fc404"}, {"problem": 61, "code": "(fn[arr1 arr2]\n  (into {}\n        (map #(conj [] %1 %2) arr1 arr2)))", "user": "5596af34e4b04c1e5c31d758"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply hash-map (interleave ks vs)))", "user": "55c4e48be4b0e31453f649a7"}, {"problem": 61, "code": "(fn f [ks vs]\n  (apply conj {} (map #(vector %1 %2) ks vs)))", "user": "549c6792e4b0f3d1d8e70f8b"}, {"problem": 61, "code": "(fn [k v]\n  (loop [k' k v' v m {}]\n    (if (or (empty? k') (empty? v'))\n      m\n      (recur\n       (rest k')\n       (rest v')\n       (assoc m (first k') (first v'))))))", "user": "55c68089e4b0e31453f649c4"}, {"problem": 61, "code": "(fn [ks vs]\n  (->> (interleave ks vs)\n  \t  (apply assoc {})))", "user": "5512cd55e4b055c2f668d4ba"}, {"problem": 61, "code": "(fn [k v]\n    (apply conj\n      (map hash-map k v)\n      )\n    )", "user": "55c3149de4b0e31453f64987"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "54b817eee4b0ed20f4ff6e93"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "55c77070e4b0e31453f649d0"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "55c652dde4b0e31453f649bd"}, {"problem": 61, "code": "#(->>(interleave % %2)\n       (partition 2)\n       (map vec)\n       (into{}))", "user": "553093bee4b076ab5578f817"}, {"problem": 61, "code": "(fn cmap [k v] (into {} (map #(assoc {} %1 %2) (seq k) (seq v))))", "user": "55c9bc1ee4b0e31453f649f1"}, {"problem": 61, "code": "#(apply merge (map hash-map % %2))", "user": "54b5b3cce4b05787c3b163ab"}, {"problem": 61, "code": "(fn [keys vals] (apply assoc {} (interleave keys vals)))", "user": "552456e3e4b0882d96d091c2"}, {"problem": 61, "code": "(fn m-c \n  ([k v]\n      (m-c k v {}))\n  ([k v m]\n      (if (or (empty? k) (empty? v))\n          m\n          (recur (next k) (next v) (assoc m (first k) (first v))))))", "user": "55acd080e4b03311e7b73298"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "55ca4273e4b0e31453f649f9"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "55c1eb52e4b0e31453f64970"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "546e1142e4b00cfc9eacc199"}, {"problem": 61, "code": "(fn [c1 c2] (into {} (map (fn [k v] [k v]) c1 c2)))", "user": "55caabd1e4b0e31453f649fb"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "55c423e1e4b0e31453f64994"}, {"problem": 61, "code": "#(apply sorted-map (interleave %1 %2))", "user": "5586f418e4b059ccff29b1de"}, {"problem": 61, "code": "(comp (partial apply array-map) interleave)", "user": "55cdc576e4b0e31453f64a1f"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "55c20bd0e4b0e31453f64972"}, {"problem": 61, "code": "(fn [k v]\n                      (loop [map {}\n                             ks (seq k)\n                             vs (seq v)]\n                        (if (and ks vs)\n                          (recur (assoc map (first ks) (first vs))\n                                 (next ks)\n                                 (next vs))\n                          map)))", "user": "5313d68de4b08068f379ed0f"}, {"problem": 61, "code": "#(apply sorted-map (apply mapcat list %&))", "user": "55d0e76ae4b0e31453f64a40"}, {"problem": 61, "code": "(fn [x y] (apply assoc {} (interleave x y)))", "user": "55d3aec8e4b0e31453f64a6a"}, {"problem": 61, "code": "(fn [coll1 coll2]\n  (reduce merge {} (map hash-map coll1 coll2)))", "user": "55a372f1e4b0acc240e31537"}, {"problem": 61, "code": "#(apply merge (map hash-map % %2))", "user": "55a0d79fe4b0acc240e31502"}, {"problem": 61, "code": "#(apply merge (map hash-map % %2))", "user": "5589a941e4b059ccff29b207"}, {"problem": 61, "code": "(fn [s1 s2] (apply hash-map (interleave s1 s2)))", "user": "55b0f5bfe4b002ce9d5cbc28"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (map (fn [k v] [k v]) ks vs)))", "user": "54a1f494e4b09f271ff37c52"}, {"problem": 61, "code": "(fn [ks vs]\n  (let [lastIndex (- (min (count ks) (count vs)) 1)]\n    (loop [n 0\n           result {}]\n      (if (> n lastIndex)\n        result\n        (recur (+ n 1) (assoc result (get ks n) (get vs n)))))))", "user": "55d4dddde4b0e31453f64a7f"}, {"problem": 61, "code": "(fn make-map [ks vs] (\n                       apply assoc {} (mapcat (fn [a b] [a b]) ks vs)\n                       ))", "user": "558bdcefe4b0277789237633"}, {"problem": 61, "code": "#(apply hash-map\n  (let [col (interleave %1 %2)]\n    (if (even? (count col))\n      col\n      (butlast col))))", "user": "541ddadbe4b01498b1a71a84"}, {"problem": 61, "code": "(fn [k v]\n  (loop [mp {} kk k vv v]\n    (if (or (empty? kk) (empty? vv))\n      mp\n      (recur\n       (assoc mp (first kk) (first vv)) (rest kk) (rest vv)))))", "user": "54864662e4b0e286459a11b8"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map #(conj {%1 %2} {}) ks vs)))", "user": "4eb171d7535d7eef30807340"}, {"problem": 61, "code": "#(apply array-map (mapcat vector %1 %2))", "user": "54c9571ee4b045293a27f66b"}, {"problem": 61, "code": "(fn [vk vv] (loop [k vk v vv r {}] (if (or (empty? v) (empty? k)) r (recur (rest k) (rest v) (into r (hash-map (first k) (first v)))))))", "user": "55ac16a0e4b03311e7b73291"}, {"problem": 61, "code": "#(apply array-map (interleave %1 %2))", "user": "55d5e80ee4b0e31453f64a91"}, {"problem": 61, "code": "#(apply array-map (interleave % %2))", "user": "55d1a721e4b0e31453f64a47"}, {"problem": 61, "code": "(fn my-zipmap [keys vals] (if (or (empty? keys) (empty? vals)) {} (assoc (my-zipmap (rest keys) (rest vals)) (first keys) (first vals))))", "user": "55d95be7e4b0e31453f64ac9"}, {"problem": 61, "code": "(fn [map-keys values]\n  (loop [[next-key & remaining-keys :as keys-to-process] map-keys\n         [next-value & remaining-values :as values-to-process] values\n         results {}]\n    (if (or (empty? keys-to-process) (empty? values-to-process))\n      results\n      (recur \n       remaining-keys\n       remaining-values\n       (assoc results next-key next-value)))))", "user": "55d06bcbe4b0e31453f64a3a"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "55236ad6e4b0882d96d091b1"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "55d6a2ebe4b0e31453f64a9a"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "55ccdc6be4b0e31453f64a18"}, {"problem": 61, "code": "#(loop [ks % vs %2 m {}]\n   (if (and ks vs)\n     (let [k (first (seq ks))\n           v (first (seq vs))]\n       (recur (next ks) (next vs) (assoc m k v)))\n     m))", "user": "55b22c33e4b0da326a65cf79"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "4f435ee8e4b0d7d3c9f3fd1f"}, {"problem": 61, "code": "(fn [keys values] (into {} (map #(hash-map %1 %2) keys values)))", "user": "5582dfb6e4b05c286339e10d"}, {"problem": 61, "code": "(fn map-construct [keys values]\n  (loop [k keys v values acc {}]\n    (cond (or (empty? k) (empty? v)) acc\n          :else (recur (rest k) (rest v) (conj acc [(first k) (first v)])))))", "user": "55dab5c8e4b0e31453f64ada"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "55d1b565e4b0e31453f64a49"}, {"problem": 61, "code": "#(apply array-map (interleave %1 %2))", "user": "54722c55e4b094393f72dd74"}, {"problem": 61, "code": "(fn [keys vals] (loop [result (hash-map) keys keys vals vals]\n  (if (or (= 0 (count keys)) (= 0 (count vals)))\n    result\n    (recur (conj result (hash-map (first keys) (first vals))) (rest keys) (rest vals))\n  )))", "user": "55d79b87e4b0e31453f64aa8"}, {"problem": 61, "code": "(fn [keys vals]\n         (into {} (map #(vector %1 %2) keys vals)))", "user": "55dcb06ee4b050e68259b3b9"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "55db7e15e4b0e31453f64ae8"}, {"problem": 61, "code": "(fn [keys vals]\n  (apply hash-map (interleave keys vals)))", "user": "54145050e4b01498b1a719ea"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "55ded9fde4b050e68259b3e7"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "55d5ee3fe4b0e31453f64a92"}, {"problem": 61, "code": "#(into {} (mapv vector %1 %2))", "user": "55e1d34ae4b050e68259b421"}, {"problem": 61, "code": "#(apply hash-map\n        (apply concat\n               (map list %1 %2)))", "user": "55627de1e4b0c656e3ff17d9"}, {"problem": 61, "code": "#(loop [m {}\n        k %1\n        v %2]\n   (if (and k v)\n     (recur (assoc m (first k) (first v))\n            (next k)\n            (next v)) \n     m))", "user": "55d85ac9e4b0e31453f64ab2"}, {"problem": 61, "code": "#(apply hash-map (mapcat vector % %2))", "user": "534056fce4b085b17e897dac"}, {"problem": 61, "code": "(fn [keys vals]  (loop [map {}\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map) ))", "user": "55d44dd6e4b0e31453f64a75"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "55663e9be4b0c656e3ff182b"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "553bda0de4b09218d5f4500b"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "54c94376e4b045293a27f665"}, {"problem": 61, "code": "#(loop [s (interleave %1 %2) r {}] (if (empty? s) r (recur (nthrest s 2) (assoc r (first s) (second s)))))", "user": "55d29fb6e4b0e31453f64a59"}, {"problem": 61, "code": "#(->> %2 (map vector %) (into (hash-map)))", "user": "559067ace4b0277789237670"}, {"problem": 61, "code": "(fn [x y] (into {} (map #(assoc {} %1 %2) x y)))", "user": "53d8da61e4b0e771c3025471"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "55bb7546e4b01b9910ae29e7"}, {"problem": 61, "code": "(fn myzipmap \n  ([k v]\n    ( myzipmap k v {})\n  )\n  ([k v m]\n    ( if (or (empty? v) (empty? k))\n      m\n      (myzipmap (rest k) (rest v) (assoc m (first k) (first v)))\n    )\n  )\n)", "user": "55d35a01e4b0e31453f64a63"}, {"problem": 61, "code": "#(apply assoc {} (interleave % %2))", "user": "55b39523e4b01b9910ae2973"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "55a9e0fee4b0988bba2ad945"}, {"problem": 61, "code": "(fn [f s] \n  (apply conj (for [[x y] (partition 2 (interleave f s))] {x y})))", "user": "55d74e71e4b0e31453f64aa4"}, {"problem": 61, "code": "(fn [a b] ((fn [a b r] (if (or (empty? a) (empty? b)) r (let [k (first a) v (first b)] (recur (rest a) (rest b) (assoc r k v))))) a b {}))", "user": "55041b5ee4b086ebe8a79c78"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {}\n        (map (fn [k v]\n               [k v])\n             ks\n             vs)))", "user": "554bd33ce4b0a04f7929959a"}, {"problem": 61, "code": "#(loop [ks %1 vs %2 result {}]\n   (if (or (empty? ks) (empty? vs))\n     result\n     (recur (rest ks) (rest vs) (assoc result (first ks) (first vs)))))", "user": "55e2f502e4b050e68259b43c"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "55e3436fe4b050e68259b440"}, {"problem": 61, "code": "(fn [x y] (into {} (map (fn [a b] {a b}) x y)))", "user": "55d42f78e4b0e31453f64a73"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "55d9743ae4b0e31453f64aca"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "55e6c3f5e4b050e68259b48c"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "55ec04c4e4b0121d4835fdc1"}, {"problem": 61, "code": "(fn [c1 c2] (reduce merge (map #(assoc {} %1 %2) c1 c2)))", "user": "55cb11e9e4b0e31453f649ff"}, {"problem": 61, "code": "(fn [a b] (apply conj (map #(assoc nil %1 %2) a b)))", "user": "53e9dce1e4b036ad0777e4bc"}, {"problem": 61, "code": "(fn [k v]\n    (loop [ks k\n           vs v\n           res {}]\n      (if (or (empty? ks)\n              (empty? vs))\n        res\n        (recur (rest ks) (rest vs) (merge res (hash-map (first ks) (first vs)))))))", "user": "5530baa5e4b076ab5578f81a"}, {"problem": 61, "code": "(fn [xs ys] (into {} (map #(vector %1 %2) xs ys)))", "user": "55ecb2c0e4b0121d4835fdce"}, {"problem": 61, "code": "(fn map-construction\n  [ks vs]\n  (if (or (empty? ks) (empty? vs))\n    {} \n    (assoc (map-construction (rest ks) (rest vs)) (first ks) (first vs))))", "user": "5574c172e4b05c286339e059"}, {"problem": 61, "code": "(fn [x y] (into {} (map vector x y)))", "user": "529c722de4b04e0c58e87b63"}, {"problem": 61, "code": "(fn [k v]\n  (apply hash-map (interleave k v)))", "user": "53fc88e7e4b0de5c418485be"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "4f5eda39e4b0030a34fb2b56"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "539e717fe4b0ca733b974488"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "55f20e4be4b06e875b46ce40"}, {"problem": 61, "code": "(fn make-map [ks vs]\n  (if (< (count ks) (count vs))\n    (reduce (fn [acc val] \n              (conj acc [val (nth vs (count acc))] )) \n            {}\n            ks)\n    (reduce (fn [acc val]\n              (conj acc [(nth ks (count acc)) val])) \n            {}\n            vs)))", "user": "53350264e4b0656e627bfd73"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "55912230e4b027778923767a"}, {"problem": 61, "code": "(fn [x y]\n  (into {} (map #(assoc {} %1 %2) x y)))", "user": "54d05a9de4b0e8a36923e5c7"}, {"problem": 61, "code": "#(reduce merge (map sorted-map %1 %2))", "user": "55f6c0e2e4b06e875b46ce99"}, {"problem": 61, "code": "(fn [keys vals] (apply hash-map (mapcat list keys vals)))", "user": "55f06183e4b06e875b46ce23"}, {"problem": 61, "code": "(fn [k v] (apply merge (map hash-map k v)))", "user": "54534c83e4b0e397800069cd"}, {"problem": 61, "code": "(fn [a b]\n  (apply assoc {} (flatten (map #(vector %1 %2) a b))))", "user": "55f2d4ede4b06e875b46ce4c"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "55e5c852e4b050e68259b474"}, {"problem": 61, "code": "(fn [thelist1 thelist2] (apply array-map (interleave thelist1 thelist2)))", "user": "55f75c6be4b06e875b46cea9"}, {"problem": 61, "code": "(fn prob61\n  [keys values]\n  (into {} (map #(hash-map %1 %2) keys values)))", "user": "4ebbff41535dfed6da9c6d78"}, {"problem": 61, "code": "(fn  s[xs ys] \n  (apply merge (for [c (range (min (count xs) (count ys)))] {(get xs c) (get ys c)})))", "user": "55f01316e4b06e875b46ce1a"}, {"problem": 61, "code": "(fn [ks vs]\n  (loop [acc {} k ks v vs]\n    (if (and (seq k) (seq v))\n      (recur (assoc acc (first k) (first v)) (rest k) (rest v))\n      acc)))", "user": "55f8fd70e4b03cbcff9738bc"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply assoc {} (interleave ks vs)))", "user": "55f9c245e4b03cbcff9738ca"}, {"problem": 61, "code": "(fn [keys values]\n  (loop [r {}\n         k keys\n         v values]\n    (if (or (empty? k)\n            (empty? v))\n      r\n      (recur (assoc r (first k) (first v))\n             (rest k)\n             (rest v)))))", "user": "5541fa50e4b0a04f79299515"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "558ee1c9e4b0277789237659"}, {"problem": 61, "code": "(fn -zipmap [ks vs]\n  (into {} (mapv vec (partition 2 (interleave ks vs)))))", "user": "55fb58b2e4b0f488688e0661"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "53573d70e4b04ce2eb3ed278"}, {"problem": 61, "code": "(fn [ks vs]\n  (reduce (fn [m [k v]]\n            (assoc m k v))\n          {}\n          (map vector ks vs)))", "user": "55d2dd27e4b0e31453f64a5b"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "55f2fdc3e4b06e875b46ce51"}, {"problem": 61, "code": "(fn [k v]\n  (into {} (map vector k v)))", "user": "55fee5e4e4b00f4cabc5765a"}, {"problem": 61, "code": "#(apply hash-map (flatten (map vector %1 %2)))", "user": "55fe7e15e4b00f4cabc57651"}, {"problem": 61, "code": "(comp\n     (partial into (hash-map))\n     (partial map vector))", "user": "50a3ad0ee4b0ceace084d493"}, {"problem": 61, "code": "(fn [coll1 coll2] (apply hash-map (interleave coll1 coll2)))", "user": "55f6f1d3e4b06e875b46cea0"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "55efc44ee4b066087aa9453e"}, {"problem": 61, "code": "#(loop [c1 %\n        c2 %2\n        m1 {}]\n   (if (or (empty? c1) (empty? c2))\n     m1\n     (recur (rest c1)\n            (rest c2)\n            (conj m1 {(first c1) (first c2)}))))", "user": "55eeeb81e4b0121d4835fdf7"}, {"problem": 61, "code": "(fn my-zm [[k & k-args] [v & v-args]]\n   (if (and (seq k-args) (seq v-args))\n     (assoc (my-zm k-args v-args) k v)\n     {k v}))", "user": "55f8b32ae4b03cbcff9738ba"}, {"problem": 61, "code": "(fn f [xs ys]\n  (if \n    (or (empty? xs) (empty? ys))\n    {}\n    (assoc (f (rest xs) (rest ys)) (first xs) (first ys))))", "user": "55e3e7a8e4b050e68259b44a"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "4f963487e4b0dcca54ed6cd9"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "55f2b42be4b06e875b46ce4a"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map vector ks vs)))", "user": "55f081bbe4b06e875b46ce25"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "548b8a50e4b0e286459a11ff"}, {"problem": 61, "code": "(fn [a b] (reduce #(assoc %1 (first %2) (second %2)) {} (partition 2 (interleave a b))))", "user": "55eeb37ae4b0121d4835fdf3"}, {"problem": 61, "code": "(fn[a b] (reduce #(assoc %1 (first %2) (last %2)) {} (map list a b)))", "user": "5602ab92e4b04bb52996e1a3"}, {"problem": 61, "code": "#(reduce (fn [acc [key val]] (assoc acc key val)) {} (map vector %1 %2))", "user": "53c6c9dfe4b00fb29b2212a1"}, {"problem": 61, "code": "#(apply assoc {} (interleave % %2))", "user": "532f8569e4b019098a6f8b4f"}, {"problem": 61, "code": "; rewrite first solution\n#(reduce (fn [m [k v]] (assoc m k v)) {} (map vector % %2))\n\n; into hash\n#_#(into {} (map vector % %2))\n\n; hash-map: \"hash\"; O(1) lookup\n#_#(apply hash-map (interleave % %2))\n\n; array-map: \"array\"; O(N) lookup; sorted by insertion order\n#_#(apply array-map (interleave % %2))\n\n; first\n#_(fn [ks vs]\n  (reduce \n    (fn [m [k v]] (assoc m k v))\n    {}\n    (partition 2 (interleave ks vs))))", "user": "55e7d06ee4b050e68259b496"}, {"problem": 61, "code": "(fn [a b](into (sorted-map) (mapv (fn[x y][x y]) a b) ))", "user": "56039843e4b04bb52996e1be"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "55d62a68e4b0e31453f64a96"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "55e1fc42e4b050e68259b424"}, {"problem": 61, "code": "(fn [coll1 coll2]\n  (into {} (map #(identity [%1 %2]) coll1 coll2)))", "user": "55048182e4b086ebe8a79c7c"}, {"problem": 61, "code": "(fn [colla collb] (reduce merge (mapv #(assoc {} %1 %2) colla collb)))", "user": "560039cce4b04bb52996e162"}, {"problem": 61, "code": "(fn [x y] (apply hash-map (interleave x y)))", "user": "55f3802be4b06e875b46ce5f"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "50746e23e4b054001656acd1"}, {"problem": 61, "code": "(fn [keys values] (into (sorted-map) (map vector  keys values)))", "user": "5601bb7ee4b04bb52996e195"}, {"problem": 61, "code": "(fn [mykeys values]\n  (loop [res {}\n         mykeys mykeys\n         values values]\n    (if-not (or (empty? mykeys) (empty? values))\n      (recur (assoc res (first mykeys) (first values)) (rest mykeys) (rest values))\n      res)))", "user": "560151b5e4b04bb52996e185"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "558053b1e4b05c286339e0e9"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5609866ee4b0053d1b86c7e3"}, {"problem": 61, "code": "(fn [lk lv]\n  (loop [m {}\n         mk lk\n         mv lv]\n    (if-not (and mk mv)\n      m\n      (recur (into m {(first mk) (first mv)})\n             (next mk) (next mv)))))", "user": "56051095e4b08b23635d3162"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5603c31fe4b04bb52996e1c1"}, {"problem": 61, "code": "(fn [lst1 lst2]\n  (loop [l1 lst1\n         l2 lst2\n         newmap {}]\n    (if (or (empty? l1)\n            (empty? l2))\n      newmap\n      (recur (rest l1) (rest l2) (conj newmap {(first l1) (first l2)})))))", "user": "560a7775e4b05f002753defa"}, {"problem": 61, "code": "#(into {}\n       (loop [k %1\n              v %2\n              result []]\n         (if-not (and k v)\n           result\n           (do\n             (recur (next k) (next v)\n                    (conj result [(first k) (first v)]))))))", "user": "54d321b3e4b0e8a36923e602"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "55e274b4e4b050e68259b436"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (map vector ks vs)))", "user": "55f2e47de4b06e875b46ce4d"}, {"problem": 61, "code": "(fn zm [keys vals]\n  (if (or (empty? keys) (empty? vals)) {}\n    (assoc (zm (rest keys) (rest vals)) (first keys) (first vals))))", "user": "560ae540e4b05f002753df0d"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5606a4ace4b08b23635d3175"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "560a7b46e4b05f002753defb"}, {"problem": 61, "code": "#(reduce conj {} (map hash-map %1 %2))", "user": "56011393e4b04bb52996e178"}, {"problem": 61, "code": "#(apply merge (map (fn [k v]\n                           {k v})\n                         %1\n                         %2))", "user": "5410499de4b01498b1a719a6"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "55810c73e4b05c286339e0f2"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "55df3b11e4b050e68259b3ef"}, {"problem": 61, "code": "(fn zipmap-\n  [a b]\n  (apply hash-map (interleave a b)))", "user": "56084e91e4b046a4fc0ac00f"}, {"problem": 61, "code": "#(apply hash-map (mapcat list %1 %2))", "user": "550b5c10e4b06e50f9beb143"}, {"problem": 61, "code": "(fn [ks vs]\n  (loop [ks ks\n         vs vs\n         acc {}]\n  (if-let [[k & ks-more] ks]\n    (if-let [[v & vs-more] vs]\n      (recur ks-more vs-more (assoc acc k v))\n      acc)\n    acc)))", "user": "4ff24a1ae4b0678c553fc337"}, {"problem": 61, "code": "#(->> (map vector %1 %2) (into {}))", "user": "560e9a2de4b05f002753df52"}, {"problem": 61, "code": "(fn [k v] (apply hash-map (interleave k v)))", "user": "5604bcf7e4b08b23635d315a"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5606ea56e4b08b23635d317b"}, {"problem": 61, "code": "(fn [a b]\n  (into {} (map vector a b)))", "user": "52aaabf7e4b0c58976d9ac68"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "55f2c898e4b06e875b46ce4b"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (map vector ks vs)))", "user": "5573ffb5e4b0aa18f790f3fd"}, {"problem": 61, "code": "#(apply array-map (interleave %1 %2))", "user": "560ff632e4b05f002753df66"}, {"problem": 61, "code": "(fn [a b] (into {} (mapv vec (partition 2 (interleave a b)))))", "user": "4f6ba7bce4b07046d9f4efb0"}, {"problem": 61, "code": "(comp (partial into {})\n      (partial map vector))", "user": "56180d83e4b06b1bb2182a18"}, {"problem": 61, "code": "#(apply assoc {} (apply interleave %&))", "user": "558fec41e4b0277789237666"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "561047eae4b05f002753df6d"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "4f5e5975e4b0030a34fb2b4d"}, {"problem": 61, "code": "(fn [k v] (reduce (fn [final item] (into final item)) {} (map (fn [key value] {key value}) k v)))", "user": "56152a26e4b05f002753dfc1"}, {"problem": 61, "code": "#(reduce (fn [map [k v]] (assoc map k v)) {} (map vector % %2))", "user": "55f09e7be4b06e875b46ce28"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "561ba3e5e4b073c65b0ce3eb"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "55e8a85be4b0121d4835fd98"}, {"problem": 61, "code": "(fn zmap\n    [l1 l2]\n    (apply array-map (interleave l1 l2))\n    )", "user": "55ddc5cbe4b050e68259b3d0"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "561ca2eae4b064ca9f4b169b"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "561c0278e4b064ca9f4b1691"}, {"problem": 61, "code": "#(into {} (map array-map %1 %2))", "user": "5135a74ae4b04ac1f358dd46"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "55f27d95e4b06e875b46ce47"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5619a4d0e4b053970a773afd"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "561f9110e4b064ca9f4b16ce"}, {"problem": 61, "code": "(fn my-zipmap [keys* vals*] (apply assoc {} (interleave keys* vals*)))", "user": "5614fa1de4b05f002753dfbe"}, {"problem": 61, "code": "(fn zipmap-ms\n  [keyss values]\n  (into {} (map vector keyss values)))", "user": "561ca6ebe4b064ca9f4b169c"}, {"problem": 61, "code": "(fn my-zipmap [seq1 seq2]\n  (let [map-fn (fn [v1 v2] [v1 v2])\n        res (map map-fn seq1 seq2)]\n    (into {} res)))", "user": "561d8936e4b064ca9f4b16b2"}, {"problem": 61, "code": "(fn v ([a b] (v a b (hash-map)))\n      ([a b c] (if (or (empty? a) (empty? b))\n                 c\n                 (recur (rest a) (rest b) (assoc c (first a) (first b))))))", "user": "55cf0d0ee4b0e31453f64a2b"}, {"problem": 61, "code": "#(into {} (map (fn [key val] [key val]) %1 %2))", "user": "561d23e3e4b064ca9f4b16a5"}, {"problem": 61, "code": "#(apply merge (map hash-map %1 %2))", "user": "4f40c46fe4b0e243712b1fbe"}, {"problem": 61, "code": "(fn[coll1 coll2](apply hash-map (interleave coll1 coll2)))", "user": "5537b2c7e4b09218d5f44fce"}, {"problem": 61, "code": "(fn [k v]\n  (into {} (map vector k v)))", "user": "54b54d1be4b05787c3b1639c"}, {"problem": 61, "code": "(fn [v1 v2]\n  (apply assoc {} (interleave v1 v2)))", "user": "54eb22a0e4b024c67c0cf845"}, {"problem": 61, "code": "(fn [v1 v2] (into {} (map #(vector %1 %2) v1 v2)))", "user": "5622af0fe4b03f08ee9a922b"}, {"problem": 61, "code": "#(into {} (map vec (partition 2 (interleave %1 %2))))", "user": "55f330dde4b06e875b46ce56"}, {"problem": 61, "code": "#(into {} (map (fn [x y] [x y]) % %2))", "user": "55f6fe09e4b06e875b46cea2"}, {"problem": 61, "code": "#(reduce merge (map (fn [v1 v2] (hash-map v1 v2)) % %2))", "user": "5617db88e4b06b1bb2182a16"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (map vector ks vs)))", "user": "54d000c7e4b018d918be98d7"}, {"problem": 61, "code": "(fn make_map [ks vs]\n  (apply assoc {} (interleave ks vs)))", "user": "561eb82fe4b064ca9f4b16c7"}, {"problem": 61, "code": "(comp #(into {} %) #(map vector %1 %2))", "user": "521ed5b4e4b0e6c71e0c0bc0"}, {"problem": 61, "code": "(fn [k v]  \n      (reduce conj (for [i (range (min (count k) (count v)))]\n                     (hash-map (k i) (v i)))))", "user": "53623eaee4b0243289761e4f"}, {"problem": 61, "code": "#(reduce (fn [h v] (apply assoc h v)) {} (partition 2 (interleave %1 %2)))", "user": "56018dd4e4b04bb52996e18f"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5626447fe4b00e49c7cb47bd"}, {"problem": 61, "code": "(fn constructMap [k v]\n  (reduce #(apply assoc %1 %2) {} (map vector k v))\n)", "user": "56195e57e4b053970a773af6"}, {"problem": 61, "code": "(fn [xs ys]\n  (->> (interleave xs ys)\n       (partition 2)\n       (map #(hash-map (first %) (second %)))\n       (apply merge)))", "user": "562c15d3e4b058fa18c5a6d5"}, {"problem": 61, "code": "#(apply conj {} (map vector %1 %2))", "user": "5628cb07e4b00e49c7cb47ef"}, {"problem": 61, "code": "(fn [keys vals]\n  (reduce (fn [m [k v]]\n            (assoc m k v))\n          {}\n          (map vector keys vals)))", "user": "5629dfaae4b00e49c7cb4813"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "562326cbe4b03f08ee9a9230"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply hash-map\n    (apply concat\n      (map list ks vs))))", "user": "562cd94ee4b0a45d2ff83015"}, {"problem": 61, "code": "(fn [c1 c2] (apply hash-map (interleave c1 c2)))", "user": "53b1db8ee4b047364c044495"}, {"problem": 61, "code": "#(into {}(map (fn [a b] (assoc {} a b)) %1 %2))", "user": "5505d137e4b086ebe8a79c8c"}, {"problem": 61, "code": "(fn [k v]\n  (loop [k k\n         v v\n         r {}]\n    (if (or (= 0 (count k)) (= 0 (count v)))\n      r\n      (recur (rest k) (rest v) (assoc r (first k) (first v))))))", "user": "504f0c9ce4b0e7ad84dbc4b2"}, {"problem": 61, "code": "(fn robins-zip [v1 v2]\n  (let [zip (fn [m v1 v2]\n              (if (or (empty? v1) (empty? v2))\n                m\n                (recur (assoc m (first v1) (first v2)) (rest v1) (rest v2))))]\n    (zip {} v1 v2)))", "user": "55bb1b26e4b01b9910ae29e0"}, {"problem": 61, "code": "#(loop [k %1 v %2 m {}]\n    (if (or (empty? k) (empty? v))\n      m\n      (recur (rest k) (rest v) (assoc m (first k) (first v)))))", "user": "5614ebc5e4b05f002753dfbc"}, {"problem": 61, "code": "(fn [k v] (apply merge (map #(hash-map %1 %2) k v)))", "user": "55fc07d3e4b0f488688e066e"}, {"problem": 61, "code": "(fn [keys vals]\n  (into (hash-map) (map vector keys vals)))", "user": "521ceb02e4b0c4ef0be830a5"}, {"problem": 61, "code": "(fn [xs ys]\n  (->> (interleave xs ys)\n       (partition 2)\n       (reduce #(assoc % \n                  (first %2) \n                  (second %2))\n               {})))", "user": "55d8eed3e4b0e31453f64ac3"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "55e06f82e4b050e68259b40d"}, {"problem": 61, "code": "#(into {} (map hash-map %1 %2))", "user": "561a060ee4b053970a773b01"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "56278266e4b00e49c7cb47d3"}, {"problem": 61, "code": "(fn [coll coll1]\n  (apply hash-map (interleave coll coll1)))", "user": "562db4d1e4b0a45d2ff83021"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "560ae7e6e4b05f002753df0e"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "55ed9108e4b0121d4835fddc"}, {"problem": 61, "code": "(fn [keys vals] (into {} (map vector keys vals)))", "user": "55dbed2fe4b050e68259b3a6"}, {"problem": 61, "code": "(fn [kc vc]\n  (let [kc-trimmed (take (count vc) kc)]\n    (into {} (map-indexed #(hash-map %2 (vc %1)) kc-trimmed))))", "user": "562e8b2be4b0ab312c17ebbb"}, {"problem": 61, "code": "(fn zm [a b]\n  (let [ca (count a) cb (count b) c (if (< ca cb) ca cb)]\n    (loop [n 0 r {}]\n      (if (= n c)\n        r\n        (recur (inc n) (assoc r (nth a n) (nth b n)))))))", "user": "561a1af6e4b053970a773b02"}, {"problem": 61, "code": "(fn [a b]\n    (apply merge (map (fn [x y] (assoc {} x y)) a b)))", "user": "5600dccee4b04bb52996e175"}, {"problem": 61, "code": "(fn [a b]\n  (apply conj (map hash-map a b)))", "user": "562cb7cfe4b0a45d2ff83009"}, {"problem": 61, "code": "#(reduce (fn [m [k v]] (assoc m k v))  {} (map vector %1 %2))", "user": "5627d09ce4b00e49c7cb47db"}, {"problem": 61, "code": "#(into {} (apply map vector %&))", "user": "56102f50e4b05f002753df6b"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "56350c87e4b0bfe05bf117c0"}, {"problem": 61, "code": "#(into {} (mapv vector %1 %2))", "user": "53483a32e4b084c2834f4a57"}, {"problem": 61, "code": "(fn custom-zipmap\n  [keys-coll values-coll]\n  (into {} (map #(vec [%1 %2]) keys-coll values-coll)))", "user": "4fc524aae4b081705acca37e"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "5627444fe4b00e49c7cb47cd"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "558b41fce4b0277789237628"}, {"problem": 61, "code": "(fn [col1 col2]\n  (apply merge (map hash-map col1 col2)))", "user": "5592ba8be4b0c79f6e1db931"}, {"problem": 61, "code": "(fn [k v] (apply hash-map (interleave k v)))", "user": "53286f84e4b09d4e7a9b5505"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5578f292e4b05c286339e08f"}, {"problem": 61, "code": "(fn [keys vals] (loop [my-map {} my-keys (seq keys) my-vals (seq vals)] (if (and my-keys my-vals) (recur (assoc my-map (first my-keys) (first my-vals)) (next my-keys) (next my-vals)) my-map)))", "user": "56347285e4b0bfe05bf117bc"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "563a30d7e4b0bfe05bf117f9"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "56399b7ee4b0bfe05bf117f5"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "56372798e4b0bfe05bf117d0"}, {"problem": 61, "code": "(fn construct [ks vs]\n  (into {}\n        (map #(hash-map %1 %2) ks vs)\n  )\n)", "user": "56393681e4b0bfe05bf117f2"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5632b0a9e4b0bfe05bf117a8"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "52bacfa8e4b07a9af57922d6"}, {"problem": 61, "code": "#(apply assoc {} (interleave % %2))", "user": "557f1a08e4b05c286339e0dc"}, {"problem": 61, "code": "#(apply hash-map (flatten (interleave % %2)))", "user": "5604ae27e4b0c80df0ca2663"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "52f3568fe4b05e3f0be25f0e"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "562b1a7be4b058fa18c5a6cb"}, {"problem": 61, "code": "(fn [x y] (into {} (map #(vector %1 %2) x y)))", "user": "563ddefee4b0bfe05bf11857"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "563ed73ae4b08d4f616f5ecb"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map vector ks vs)))", "user": "55d28b38e4b0e31453f64a58"}, {"problem": 61, "code": "#(into {} (map hash-map %1 %2))", "user": "546b24a0e4b00cfc9eacc166"}, {"problem": 61, "code": "#(apply hash-map (flatten (map list %1 %2)))", "user": "55c49394e4b0e31453f6499e"}, {"problem": 61, "code": "#(reduce merge (map (fn [k v] {k v}) %1 %2))", "user": "556ffa45e4b09a3098a52528"}, {"problem": 61, "code": "(fn [keyz values]\n  (loop [out {}\n         k keyz \n         v values]\n    (if (or (empty? k) (empty? v))\n      out\n      (recur (conj out (hash-map (first k) (first v)))\n             (drop 1 k)\n             (drop 1 v)))))", "user": "5633bb9de4b0bfe05bf117b4"}, {"problem": 61, "code": "(fn my-zipmap\n  [ks vs]\n  (if (or (empty? ks) (empty? vs))\n    {}\n    (assoc (my-zipmap (rest ks) (rest vs)) (first ks) (first vs))))", "user": "563f1493e4b08d4f616f5ecf"}, {"problem": 61, "code": "(fn [ks vs] (reduce #(conj %1 %2) {} (map vector ks vs)))", "user": "564127a9e4b08d4f616f5ef3"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "563772a9e4b0bfe05bf117d7"}, {"problem": 61, "code": "(fn[keys vals] (into {} (map (fn [k v] [ k v]) keys vals )))", "user": "561d7246e4b064ca9f4b16b1"}, {"problem": 61, "code": "#(into {} (concat (map vector %1 %2)))", "user": "55af7e21e4b03311e7b732cc"}, {"problem": 61, "code": "(fn zip-map [ks vs] (into {} (map vector ks vs)))", "user": "505fdf63e4b08f2a82ad10b9"}, {"problem": 61, "code": "(fn map-cons [ks vs]\n  (into {}\n        ((fn vec-map [ks' vs']\n           (if (some empty? [ks' vs'])\n             ()\n             (cons\n              [(first ks') (first vs')]\n              (lazy-seq (vec-map (rest ks') (rest vs'))))))\n         ks vs)))", "user": "5641296de4b08d4f616f5ef4"}, {"problem": 61, "code": "(fn [v1 v2] (into {} (map vector v1 v2)))", "user": "55d1f0bae4b0e31453f64a4d"}, {"problem": 61, "code": "(fn [ks vs] (reduce merge (map (fn [k v] {k v}) ks vs)))", "user": "53e8e42ce4b036ad0777e48e"}, {"problem": 61, "code": "(fn\n  [k v]\n  (reduce into {} (map #( hash-map %1 %2 ) k v)))", "user": "56019662e4b04bb52996e190"}, {"problem": 61, "code": "(fn my-zipmap [keys vals]\n    (if (or (empty? keys) (empty? vals))\n      {}\n      (assoc\n        (my-zipmap (rest keys) (rest vals))\n        (first keys)\n        (first vals))\n      )\n    )", "user": "563b9acbe4b0bfe05bf11827"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "545e7ab0e4b01be26fd7467c"}, {"problem": 61, "code": "#(apply array-map (interleave %1 %2))", "user": "564583f0e4b0284900eef607"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "55bf6dbce4b01b9910ae2a12"}, {"problem": 61, "code": "#(into {} (map vector %1 %2 ))", "user": "55ed71dae4b0121d4835fdd9"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "55c13e73e4b01b9910ae2a2f"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "563c8aafe4b0bfe05bf11839"}, {"problem": 61, "code": "#(into {} (mapcat  hash-map % %2))", "user": "5643ba10e4b0018b46ad8bff"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "56441e72e4b0018b46ad8c09"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "56449c90e4b0284900eef5f8"}, {"problem": 61, "code": "(fn [ fun1 fun2]\n  (apply hash-map (interleave fun1 fun2)))", "user": "5634995fe4b0bfe05bf117be"}, {"problem": 61, "code": "#(apply sorted-map (interleave %1 %2))", "user": "5489dd4de4b0e286459a11ef"}, {"problem": 61, "code": "(fn [s1 s2] (apply hash-map (mapcat #(vector %1 %2) s1 s2)))", "user": "551e2cade4b030e6a24d00e4"}, {"problem": 61, "code": "(fn f [k v]\n  (loop [v v k k result '{}]\n    (if (or (empty? v) (empty? k))\n      result\n      (recur (rest v) (rest k) (conj result (hash-map (first k) (first v)))))))", "user": "563d12f9e4b0bfe05bf11845"}, {"problem": 61, "code": "(fn [vk vv]\n    (apply hash-map (interleave vk vv))\n )", "user": "5649615be4b0284900eef641"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "55a65872e4b09e57187da299"}, {"problem": 61, "code": "(fn f [a b]\n  (cond\n   (empty? a) {}\n   (empty? b) {}\n   :else (assoc (f (rest a) (rest b)) \n           (first a)\n           (first b))\n   ))", "user": "541ef7e2e4b01498b1a71a92"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "564b1ff8e4b0284900eef663"}, {"problem": 61, "code": "(fn construct-map\n  [x y]\n  (apply merge (map #(assoc {} %1 %2) x y)))", "user": "563fc1f2e4b08d4f616f5ed7"}, {"problem": 61, "code": "(fn [a b]\n  (into {} (map vector a b)))", "user": "55eb026de4b0121d4835fdb7"}, {"problem": 61, "code": "(fn zip-map [X Y]\n\t(loop [[k1 & krest :as K] X, [v1 & vrest :as V] Y, out {}]\n\t\t(if (and (seq K) (seq V))\n\t\t\t(recur krest vrest (conj out [k1 v1]))\n\t\t\tout)))", "user": "564d02cde4b0284900eef679"}, {"problem": 61, "code": "(fn [ks vs]\n  (reduce #(assoc %1 (first %2) (second %2))\n          {}\n          (map list ks vs)))", "user": "5650b8a0e4b0284900eef6c3"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "56441634e4b0018b46ad8c08"}, {"problem": 61, "code": "#(into {} (map (fn [x y] [x y]) %1 %2))", "user": "563dfc02e4b0da801c4e4662"}, {"problem": 61, "code": "(fn [x y]\n  (apply hash-map (mapcat list x y)))", "user": "562d869be4b0a45d2ff8301f"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "564b495de4b0284900eef667"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5643a11ee4b0018b46ad8bfb"}, {"problem": 61, "code": "#(apply hash-map (flatten (map (fn [x y] [x y]) %1 %2)))", "user": "52824143e4b0757a1b171453"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "511e17a9e4b0c5b849dd36b0"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "4ee67364535d93acb0a6685f"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "563b1553e4b0bfe05bf1180a"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5647dc44e4b0284900eef624"}, {"problem": 61, "code": "(fn [xs ys] (apply hash-map (mapcat vector xs ys)))", "user": "564ecc9ee4b0284900eef6a1"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "5654d0e1e4b0f9d632dd848c"}, {"problem": 61, "code": "(fn [coll1 coll2]\n  (reduce #(assoc %1 (first %2) (last %2)) {} (map #(list %1 %2) coll1 coll2)))", "user": "564da567e4b0284900eef682"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "56561119e4b0f9d632dd849d"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "54227fc6e4b01498b1a71ac0"}, {"problem": 61, "code": "(fn [keys vals] (into {} (map vector keys vals)))", "user": "564a560ae4b0284900eef654"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5632d1b3e4b0bfe05bf117a9"}, {"problem": 61, "code": "(fn [k v] (into {} (map vector k v)))", "user": "5652f23ce4b0f9d632dd846b"}, {"problem": 61, "code": "(fn merge [one two] \n       (if (or (empty? one) (empty? two))\n         {}\n         (assoc (merge (rest one) (rest two)) (first one) (first two))))", "user": "5654cb2de4b0f9d632dd848b"}, {"problem": 61, "code": "(fn [xs ys]\n  (reduce merge (map #(assoc {} %1 %2) xs ys)))", "user": "54dce62fe4b024c67c0cf78c"}, {"problem": 61, "code": "(fn [listkeys listvals]\n  (loop [k listkeys\n         v listvals\n         ans {}]\n    (if (or (empty? k) (empty? v))\n      ans\n      (recur (next k) (next v) (assoc ans (first k) (first v))))))", "user": "56038f34e4b04bb52996e1bc"}, {"problem": 61, "code": "(fn [ks vs] (apply (partial assoc {}) (interleave ks vs)))", "user": "54ca93abe4b057c6fda3a264"}, {"problem": 61, "code": "(fn map-construct [s1 s2] (apply merge (map hash-map s1 s2)))", "user": "5654e024e4b0f9d632dd848d"}, {"problem": 61, "code": "#(loop [ks %1\n        vs %2\n        m {}]\n   (if (and (seq ks) (seq vs))\n     (recur (rest ks) (rest vs) (assoc m (first ks) (first vs)))\n     m))", "user": "56521a26e4b0f9d632dd845f"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5632e850e4b0bfe05bf117ac"}, {"problem": 61, "code": "#(apply hash-map (mapcat list %1 %2))", "user": "565a3e25e4b068f2fe63dbfb"}, {"problem": 61, "code": "(fn [ks vs]\n  (let [len (min (count ks) (count vs))]\n    (loop [result {} idx 0]\n      (if (= idx len)\n        result\n        (recur (assoc result (nth ks idx) (nth vs idx)) (inc idx))))))", "user": "56288ccae4b00e49c7cb47ea"}, {"problem": 61, "code": "#(apply assoc (cons {} (interleave % %2)))", "user": "544e6b7fe4b0e39780006986"}, {"problem": 61, "code": "(fn [coll1 coll2]\n  (apply merge (map-indexed (fn [idx elem] (if (contains? coll2 idx) {elem (nth coll2 idx)})) coll1)))", "user": "5658d775e4b00d3155796114"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "56304db8e4b073c1cf7a9be5"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5630471ce4b073c1cf7a9be4"}, {"problem": 61, "code": "(fn my-zipmap [ks vs]\n  (apply assoc {} (interleave ks vs)))", "user": "56444fb1e4b0018b46ad8c0c"}, {"problem": 61, "code": "(fn zm [k v] (if (and (first k) (first v)) (conj (zm (rest k) (rest v)) [(first k) (first v)]) {}))", "user": "5646dff3e4b0284900eef615"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "4dada913c9a9d6ed2d99dc57"}, {"problem": 61, "code": "(fn [keys values]\n  (loop [map {}\n         keys keys\n         values values]\n     (if (or (empty? keys) (empty? values))\n       map\n       (recur (assoc map (first keys) (first values))\n              (rest keys)\n              (rest values)))))", "user": "56002c2de4b04bb52996e161"}, {"problem": 61, "code": "(fn map-keys-vals [keys vals]\n  (loop [map {}\n         ks keys\n         vl vals]\n    (if (and ks vl)\n      (recur (assoc map (first ks) (first vl))\n\t  (next ks)\n\t  (next vl))\n\t  map)))", "user": "560331dee4b04bb52996e1b5"}, {"problem": 61, "code": "(comp (partial into {}) (partial map vector))", "user": "5393185ae4b0b51d73faaeb7"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "564045a8e4b08d4f616f5edd"}, {"problem": 61, "code": "#(loop [l1 %1 l2 %2 acc {}]\n   (if (some empty? [l1 l2])\n    acc\n    (let [[x & xs] l1\n          [y & ys] l2]\n      (recur xs ys (assoc acc x y)))))", "user": "565e0934e4b068f2fe63dc30"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "56588f4ee4b0f9d632dd84b6"}, {"problem": 61, "code": "(fn \n  [keys vals]\n    (loop [map {}\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map)))", "user": "56504dc2e4b0284900eef6bc"}, {"problem": 61, "code": "(fn [arg1 arg2]\n(cond\n(and true (= arg2 [1 2 3])) {:a 1, :b 2, :c 3}\n(and true (= arg2 [\"one\" \"two\" \"three\"])) {1 \"one\", 2 \"two\", 3 \"three\"}\n(and true (= arg2 [\"foo\" \"bar\" \"baz\"])) {:foo \"foo\", :bar \"bar\"}\n))", "user": "565f2461e4b068f2fe63dc3b"}, {"problem": 61, "code": "#(apply assoc {} (interleave  % %2))", "user": "56349008e4b0bfe05bf117bd"}, {"problem": 61, "code": "#(reduce conj (map hash-map %1 %2))", "user": "56532ff4e4b0f9d632dd846e"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5169d422e4b051e2a73aba53"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "55380eeae4b09218d5f44fd9"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "563c48e7e4b0bfe05bf11832"}, {"problem": 61, "code": "#(loop [resulting-map {} vec1 %1 vec2 %2] \n  (if (or (empty? vec1) (empty? vec2)) \n    resulting-map \n    (recur (assoc resulting-map (first vec1) (first vec2)) (rest vec1) (rest vec2))))", "user": "4fc77f5ae4b0ee37620e1821"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "54485749e4b032a45b8693c7"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "556189a6e4b0c656e3ff17c9"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "55c6fd60e4b0e31453f649c9"}, {"problem": 61, "code": "(fn [k v](apply hash-map (interleave k v)))", "user": "564348e1e4b08d4f616f5f26"}, {"problem": 61, "code": "(fn my-zipmap\n  [list1 list2]\n  (loop\n    [acc {}\n     l1 list1\n     l2 list2]\n    (if (or (empty? l1) (empty? l2))\n      acc\n     (recur (assoc acc (first l1) (first l2)) (rest l1) (rest l2) ))))", "user": "560d7863e4b05f002753df40"}, {"problem": 61, "code": "#(into {} (map (fn [x y] {x y}) %1 %2))", "user": "55ecac8ee4b0121d4835fdcc"}, {"problem": 61, "code": "(fn [arg1 arg2]\n(cond\n(and true (= arg2 [1 2 3])) {:a 1, :b 2, :c 3}\n(and true (= arg2 [\"one\" \"two\" \"three\"])) {1 \"one\", 2 \"two\", 3 \"three\"}\n(and true (= arg2 [\"foo\" \"bar\" \"baz\"])) {:foo \"foo\", :bar \"bar\"}\n))", "user": "5666bf34e4b04acd4f672dc2"}, {"problem": 61, "code": "#(apply assoc {} \n   (interleave %1 %2))", "user": "5656e039e4b0f9d632dd84a3"}, {"problem": 61, "code": "(fn [c1 c2] (into {} (map vector c1 c2)))", "user": "562ab73ce4b00e49c7cb482e"}, {"problem": 61, "code": "#(apply array-map (interleave % %2))", "user": "5666500ee4b0e91d5f5c566d"}, {"problem": 61, "code": "(fn [a b] (apply assoc {} (interleave a b)))", "user": "566713e0e4b04acd4f672dc7"}, {"problem": 61, "code": "(fn [a b] (apply hash-map (interleave a b)))", "user": "564c8e99e4b0284900eef674"}, {"problem": 61, "code": "(fn [x y]\n      (apply assoc {}\n             (interleave x y)))", "user": "54a11042e4b09f271ff37c49"}, {"problem": 61, "code": "(fn [k v]\n  (reduce into (map hash-map k v)))", "user": "566a6e38e4b0a866af68969b"}, {"problem": 61, "code": "(fn\n  [ks vs]\n  (into {} (map vector ks vs)))", "user": "5576fee3e4b05c286339e078"}, {"problem": 61, "code": "(fn [ks vs]\n   (loop [k ks\n          v vs\n          w {}]\n     (cond (= k '()) w\n           (= v '()) w\n           :else (recur (rest k) (rest v) (assoc w (first k) (first v))))))", "user": "566734c4e4b04acd4f672dcc"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5661b0a9e4b068f2fe63dc6f"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "566888e4e4b04acd4f672ded"}, {"problem": 61, "code": "(fn [c1 c2] (into {} (map #(vector %1 %2) c1 c2)))", "user": "56540485e4b0f9d632dd847a"}, {"problem": 61, "code": "(fn [v1 v2]\n  (apply hash-map (interleave v1 v2))\n  )", "user": "549674cde4b0b312c081ff66"}, {"problem": 61, "code": "(fn m [ks vs]\n  (apply hash-map (interleave ks vs)))", "user": "5630fd6fe4b0bfe05bf1178b"}, {"problem": 61, "code": "(fn f [[a & as] [b & bs]]\n  (if (or (empty? as) (empty? bs))\n    {a b}\n    (into {a b} (f as bs))))", "user": "56483562e4b0284900eef629"}, {"problem": 61, "code": ";#(loop [keys %1\n;       values %2\n;       result {}]\n;  (if (or (nil? keys) (nil? values))\n;    result\n;    (recur (next keys) (next values) (assoc result (first keys) (first values)))\n;    )\n;  )\n#(apply hash-map (interleave %1 %2))", "user": "566639f4e4b0e91d5f5c566b"}, {"problem": 61, "code": "(fn [x y] (apply hash-map (interleave x y)))", "user": "56427910e4b08d4f616f5f19"}, {"problem": 61, "code": "(fn [n m]\n  (apply hash-map (interleave n m)))", "user": "5668aad0e4b04acd4f672df5"}, {"problem": 61, "code": "(fn [x y]\n  \n    (loop [a (reverse (take (count y) x))\n           b (reverse (take (count x) y))\n           end {}]\n      (if (empty? a)\n        end\n        (recur (rest a) (rest b) (conj end {(first a) (first b)})))))", "user": "55244318e4b0882d96d091be"}, {"problem": 61, "code": "#(into {} (map hash-map %1 %2))", "user": "561cad18e4b064ca9f4b169d"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "56669819e4b0e91d5f5c5674"}, {"problem": 61, "code": "(fn [x y]\n  (reduce #(assoc %1 (first %2) (second %2)) {} (map #(vector %1 %2) x y)))", "user": "564a5a09e4b0284900eef656"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "56754c4be4b05957ce8c6149"}, {"problem": 61, "code": "(comp #(apply hash-map %1) interleave)", "user": "567476bde4b05957ce8c6139"}, {"problem": 61, "code": "(fn [a b]\n  (into {} (map #(apply hash-map [%1 %2]) a b)))", "user": "52a3c66ce4b04e0c58e87c04"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "56732c84e4b05957ce8c611c"}, {"problem": 61, "code": "(comp (partial apply hash-map) interleave)", "user": "56677192e4b04acd4f672dd5"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5674f874e4b05957ce8c6144"}, {"problem": 61, "code": "#(apply hash-map (mapcat list % %2))", "user": "56706f01e4b0a866af6896f2"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5676af21e4b05957ce8c6158"}, {"problem": 61, "code": "(fn [x y](apply assoc {} (interleave x y)))", "user": "566a3a26e4b0a866af689699"}, {"problem": 61, "code": "(fn zz [v u] (if (or (empty? v) (empty? u)) {} (assoc (zz (rest v) (rest u)) (first v) (first u))))", "user": "5659679ae4b068f2fe63dbeb"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "56188848e4b053970a773aea"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map #(vector %1 %2) ks vs)))", "user": "50232eeae4b0b5d8b1bd2397"}, {"problem": 61, "code": "(fn [& xs] (apply hash-map (apply interleave xs)))", "user": "5668dcc6e4b04acd4f672df8"}, {"problem": 61, "code": "(fn [xs ys]\n(apply hash-map (mapcat vector xs ys)))", "user": "55aa8276e4b0988bba2ad94e"}, {"problem": 61, "code": "#(apply merge (map hash-map %1 %2))", "user": "567695c2e4b05957ce8c6157"}, {"problem": 61, "code": "#(apply assoc {} \n   (apply interleave %&))", "user": "5547b72be4b0a04f79299550"}, {"problem": 61, "code": "(fn [k v]\n  (loop [kx k vx v res {}]\n    (if (or (empty? kx) (empty? vx))\n      res\n      (recur (rest kx) (rest vx) (assoc res (first kx) (first vx))))))", "user": "5675cdf1e4b05957ce8c614d"}, {"problem": 61, "code": "(fn [ks vs]\n  (loop [rks ks\n         rvs vs\n         m {}]\n    (let [k (first rks)\n          v (first rvs)]\n      (if (or (empty? rks) (empty? rvs))\n        m\n        (recur (rest rks) (rest rvs) (assoc m k v))))))", "user": "567c2322e4b05957ce8c61af"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "567a680ee4b05957ce8c6198"}, {"problem": 61, "code": "(fn zipcat* [& cols]\n  (reduce #(assoc %1 (first %2) (second %2)) {} (apply map list cols)))", "user": "567ea95de4b0feffd0d18eb6"}, {"problem": 61, "code": "(fn [coll-1 coll-2] \n   (into\n    {}\n    (map \n     (fn [item-1 item-2]\n       {item-1 item-2})\n     coll-1\n     coll-2)))", "user": "54ef7568e4b024c67c0cf885"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "565fe434e4b068f2fe63dc45"}, {"problem": 61, "code": "(fn [k v] (apply hash-map (interleave k v)))", "user": "562add6de4b00e49c7cb4834"}, {"problem": 61, "code": "(fn [ks vs] (apply hash-map (interleave ks vs)))", "user": "52cf1e25e4b07d0d72b2739c"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {}\n        (map vector ks vs)))", "user": "4f856adfe4b033992c121c44"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "565fe49ee4b068f2fe63dc46"}, {"problem": 61, "code": "(fn [col1 col2] (reduce #(assoc %1 (first %2) (last %2)) {} (partition 2 (interleave col1 col2))))", "user": "56800ba1e4b0966858e4d8e8"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "56810479e4b0966858e4d8f8"}, {"problem": 61, "code": "(fn zipmap*\n  [& cols]\n  (reduce #(assoc %1 (first %2) (second %2)) {} (apply map list cols)))", "user": "567931e9e4b05957ce8c6184"}, {"problem": 61, "code": "(fn [k v]\n  (into (sorted-map) \n        (map (fn [x y]\n               (let [m {}]\n                 (assoc m x y))) k v)))", "user": "55aaa36fe4b0988bba2ad94f"}, {"problem": 61, "code": "#(apply array-map (interleave %1 %2))", "user": "56814cbce4b0945ebc182a81"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "5195fadee4b04c0af7ff3c11"}, {"problem": 61, "code": "#(apply array-map (interleave %1 %2))", "user": "567c7fefe4b05957ce8c61bc"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "5680104ae4b0966858e4d8ea"}, {"problem": 61, "code": "#((fn [result ks vs]\n    (if (or (empty? ks) (empty? vs))\n      result\n      (recur (assoc result (first ks) (first vs)) (rest ks) (rest vs))))\n  {} %1 %2)", "user": "567798afe4b05957ce8c6169"}, {"problem": 61, "code": "(fn [k v] (reduce #(conj %1 (vec %2)) {} (partition 2 (interleave k v))))", "user": "55f4ef68e4b06e875b46ce82"}, {"problem": 61, "code": "(fn [s1 s2] \n  (loop [s1 s1\n         s2 s2\n         result {}]\n    (if (or (empty? s1) (empty? s2))\n      result\n      (recur (rest s1) \n             (rest s2) \n             (conj {(first s1) (first s2)} result)))))", "user": "567d18c9e4b05957ce8c61c4"}, {"problem": 61, "code": "(fn [x y] (reduce #(assoc %1 (nth %2 0) (nth %2 1)) {} (partition 2 (interleave x y))))", "user": "56798d83e4b05957ce8c618b"}, {"problem": 61, "code": "(fn [ks vs] (loop [m {} cnt (min (count ks) (count vs))]\n                   (if (zero? cnt)\n                     m\n                     (recur (assoc m (nth ks (- cnt 1)) (nth vs (- cnt 1))) (dec cnt)))))", "user": "565233f2e4b0f9d632dd8461"}, {"problem": 61, "code": "#(apply merge (map (fn [x y] {x y}) %1 %2))", "user": "5686e652e4b0dcc4269f4059"}, {"problem": 61, "code": "(fn [m n]\n  (loop [a m b n r {}]\n    (if (or (empty? a) (empty? b))\n      r\n      (recur (rest a) (rest b) (assoc r (first a) (first b))))))", "user": "5683d2a9e4b0945ebc182aa0"}, {"problem": 61, "code": "(fn [keys' vals']\n  (loop [cur-keys keys'\n         cur-vals vals'\n         result {}]\n    (let [[head-key & tail-key] cur-keys\n          [head-val & tail-val] cur-vals]\n      (if (or (empty? cur-keys)\n              (empty? cur-vals))\n        result\n        (recur tail-key\n               tail-val\n               (conj result [head-key head-val]))))))", "user": "567bf820e4b05957ce8c61ad"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "568513c4e4b04eec3ec5cfc5"}, {"problem": 61, "code": "(fn [keys vals]\n    (loop [ks keys vs vals res {}]\n      (if (or (empty? ks) (empty? vs))\n      res\n      (recur (rest ks) (rest vs) (assoc res (first ks) (first vs)))\n      )\n    )\n  )", "user": "5681afaae4b0945ebc182a87"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map vector ks vs)))", "user": "5275f7a2e4b03e8d9a4a74d0"}, {"problem": 61, "code": "(comp (partial apply hash-map) interleave)", "user": "567b39b6e4b05957ce8c61a3"}, {"problem": 61, "code": "(fn [ks vs] (reduce #(conj %1 %2) {} (map vector ks vs)))", "user": "56897739e4b0dcc4269f407d"}, {"problem": 61, "code": "(fn [ks vs]\n  (loop\n    [ks ks\n     vs vs\n     acc {}]\n    (cond\n     (or (empty? ks) (empty? vs)) acc\n     :else (recur (rest ks) (rest vs) (assoc acc (first ks) (first vs))))))", "user": "5689fd03e4b0dcc4269f4088"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "568242bfe4b0945ebc182a8f"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "567c48e6e4b05957ce8c61b8"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5658acabe4b0f9d632dd84b7"}, {"problem": 61, "code": "(fn [key-coll value-coll] (apply hash-map (interleave key-coll value-coll))\n  )", "user": "56885c32e4b0dcc4269f4068"}, {"problem": 61, "code": "#(apply hash-map (mapcat list %1 %2))", "user": "5680fff3e4b0966858e4d8f6"}, {"problem": 61, "code": "(fn map-con [a b]\n  (apply hash-map (interleave a b)))", "user": "56874171e4b0dcc4269f405c"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "54026d7de4b0df28a13c62cf"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5687fe58e4b0dcc4269f4065"}, {"problem": 61, "code": "(fn [a b] (reduce #(assoc %1 (first %2) (second %2)) {} (map #(list %1 %2) a b)))", "user": "568a743ee4b0dcc4269f408e"}, {"problem": 61, "code": "(fn [v1 v2]\n  (apply hash-map (interleave v1 v2)))", "user": "55f85b93e4b03cbcff9738ae"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "568e450fe4b0dcc4269f40d0"}, {"problem": 61, "code": "(fn [x y] (apply assoc {} (interleave x y)))", "user": "568820e8e4b0dcc4269f4067"}, {"problem": 61, "code": "(fn \n      [s l]\n      (apply hash-map (interleave s l)))", "user": "51e6a2bce4b0ab43cc26c21d"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "568c2d96e4b0dcc4269f40af"}, {"problem": 61, "code": "(fn [ks vs] (apply hash-map (interleave ks vs)))", "user": "56488119e4b0284900eef632"}, {"problem": 61, "code": "(fn make-map\n  [vec1 vec2]\n  (apply conj {} (map vector vec1 vec2)))", "user": "566f3e18e4b0a866af6896e7"}, {"problem": 61, "code": "(fn [a b] (into {} (map #(conj [] %1 %2) a b)))", "user": "56795deae4b05957ce8c6187"}, {"problem": 61, "code": "(fn my-zipmap [xs ys]\n  (apply assoc {}\n         (interleave xs ys)))", "user": "5688a01be4b0dcc4269f406d"}, {"problem": 61, "code": "(fn map-construction-solution\n  [arr1 arr2] ;; update args as needed\n  (apply array-map (interleave arr1 arr2))\n  ;; Write a function which takes a vector of keys and a vector of values and constructs a map from them.\n   )", "user": "536829c8e4b0243289761e8b"}, {"problem": 61, "code": "(fn my-zipmap [k v]\n  (if (or (empty? k)\n          (empty? v))\n    {}\n    (into (my-zipmap (rest k) (rest v))\n          {(first k) (first v)})))\n\n;; from awebb: (comp (partial apply hash-map) interleave)\n;; from benhammond: #(into {} (map vector %1 %2))\n;; from austintaylor: (comp (partial apply array-map) interleave)", "user": "568e1871e4b0dcc4269f40cc"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "568bddaee4b0dcc4269f40aa"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5657fed1e4b0f9d632dd84ae"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "569381a5e4b0dcc4269f4104"}, {"problem": 61, "code": "#(apply hash-map (mapcat vector %1 %2))", "user": "568227fee4b0945ebc182a8a"}, {"problem": 61, "code": "#(apply hash-map (reduce concat (map vector %1 %2)))", "user": "5686b7c7e4b0dcc4269f4057"}, {"problem": 61, "code": "(fn [keys values] (apply merge (map (fn [a b] {a b}) keys values)))", "user": "540ef409e4b0addc1aec6723"}, {"problem": 61, "code": "(fn [ks vs] (apply assoc (hash-map) (flatten (map list ks vs))))", "user": "566669d8e4b0e91d5f5c566f"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "55d68726e4b0e31453f64a99"}, {"problem": 61, "code": "(fn [k v] (reduce #(into %1 %2) {} (map #(assoc {} %1 %2) k v)))", "user": "56743413e4b05957ce8c612e"}, {"problem": 61, "code": "(fn map-construction [kys vls]\n    (first (reduce (fn [[m v] k]\n                       (if (not (empty? v))\n                           (vector (assoc m k (first v)) (rest v))\n                           (vector m v)))\n                   [{} vls] kys)))", "user": "552bd5c2e4b0ffed3738f969"}, {"problem": 61, "code": "(fn zipmap-1 [c1 c2]\n  (apply merge (map (fn [x x1]\n                     {x x1}) c1 c2)))", "user": "5693a53ee4b0dcc4269f4106"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply hash-map\n  (interleave ks vs)))", "user": "56967bc0e4b0dcc4269f4131"}, {"problem": 61, "code": "(fn [a b] (apply conj (map #(hash-map %1 %2) a b)))", "user": "56979bb7e4b0e0b3d3318cac"}, {"problem": 61, "code": "#(loop [map {} ks (seq %1) vs (seq %2)] (if (and ks vs) (recur (assoc map (first ks) (first vs)) (next ks) (next vs)) map))", "user": "569c40cee4b0542e1f8d1462"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "543b4746e4b032a45b86932c"}, {"problem": 61, "code": "(fn map-construct [ks vs] (reduce #(assoc %1 (first %2) (last %2)) {} (map vector ks vs)))", "user": "56912f93e4b0dcc4269f40ef"}, {"problem": 61, "code": "(fn [ks vs]\n  (reduce conj {} (map #(vector %1 %2) ks vs)))", "user": "56761ab1e4b05957ce8c6154"}, {"problem": 61, "code": "#(apply merge (map sorted-map %1 %2))", "user": "569ad037e4b0542e1f8d144f"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5591cc56e4b0604b3f94d582"}, {"problem": 61, "code": "#(apply merge (map (fn [a b] {a b}) % %2))", "user": "56372c3ce4b0bfe05bf117d1"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "562d15a6e4b0a45d2ff83019"}, {"problem": 61, "code": "#(loop [map {} ks (seq %1) vs (seq %2)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs)) (next ks) (next vs)) map))", "user": "569f33c7e4b0542e1f8d148f"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "5339cb07e4b0e30313ee6caf"}, {"problem": 61, "code": "(fn [ks vs] (apply hash-map (interleave ks vs)))", "user": "567f988be4b0feffd0d18ebe"}, {"problem": 61, "code": "(fn [k v]\n  (loop [k k v v output {}]\n    (if (or (empty? k) (empty? v))\n      output\n      (recur (rest k) (rest v) (assoc output (first k) (first v))))))", "user": "5689bd04e4b0dcc4269f4082"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (for [i (range 0 (min (count ks) (count vs)))]\n             [(ks i) (vs i)])))", "user": "51441ce7e4b0b4fb4ace5f41"}, {"problem": 61, "code": "(fn [keys vals] (into {} (map vector keys vals)))", "user": "526c669be4b03e8d9a4a728f"}, {"problem": 61, "code": "(fn [col1 col2]\n  (apply hash-map (interleave col1 col2)))", "user": "56877fcbe4b0dcc4269f405e"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5630ce72e4b0bfe05bf11786"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "525523e3e4b0541d1855b9cc"}, {"problem": 61, "code": "#(apply (partial assoc {}) (interleave % %2))", "user": "56066e82e4b08b23635d3173"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "553b0d95e4b09218d5f44fff"}, {"problem": 61, "code": "#(apply (partial assoc {}) (mapcat list %1 %2))", "user": "563f24f9e4b08d4f616f5ed0"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "56824e1be4b0945ebc182a91"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "56a38a4ce4b0542e1f8d14cc"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map (fn [k v] (vector k v)) ks vs)))", "user": "569d2283e4b0542e1f8d1474"}, {"problem": 61, "code": "(fn map-const [v1 v2]\n  (loop [col1   v1\n         col2   v2\n         res    {}]\n    (if (or (empty? col1) (empty? col2)) res (recur (rest col1) (rest col2) (assoc res (first col1) (first col2))))))", "user": "56a94562e4b07966d5a8a074"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5515b68de4b055c2f668d4ef"}, {"problem": 61, "code": "(fn [x y]\n  (into {} (map vec (partition 2 (interleave x y)))))", "user": "5297dcc5e4b02ebb4ef75047"}, {"problem": 61, "code": "(fn [ks vs] (apply merge (map hash-map ks vs)))", "user": "56481722e4b0284900eef628"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "56a75810e4b0542e1f8d14fc"}, {"problem": 61, "code": "(fn [ks vs]\n  (loop [[fk & rks]ks \n         [fv & rvs]vs\n         res {}]\n    (if (or (empty? rks) (empty? rvs))\n      (conj res [fk fv]) \n      (recur rks rvs (conj res [fk fv])))))", "user": "56646a7fe4b0e91d5f5c5657"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply hash-map (mapcat vector ks vs)))", "user": "569ab3e2e4b0542e1f8d144a"}, {"problem": 61, "code": "(fn zapmup\n  [ks vs]\n  (reduce\n   #(assoc %1 (first %2) (second %2))\n   {}\n   (map\n    vector\n    ks\n    vs)))", "user": "51b01309e4b0c53cf2e68a57"}, {"problem": 61, "code": "#(into {} (map (fn [x y] (vector x y)) %1 %2))", "user": "569951e4e4b0542e1f8d143e"}, {"problem": 61, "code": "#(apply array-map (interleave %1 %2))", "user": "51a7bf26e4b0da5f497bde8c"}, {"problem": 61, "code": "(fn [& colls] (apply hash-map (apply mapcat list colls)))", "user": "56ac81ace4b03c432f187347"}, {"problem": 61, "code": "#(into (hash-map) (map vector %1 %2))", "user": "55f9b2b6e4b03cbcff9738c8"}, {"problem": 61, "code": "(fn [ks vs] (apply assoc {} (interleave ks vs)))", "user": "5006c169e4b0678c553fc48d"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "53f5c402e4b0db01ade6f9d4"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "56a1b854e4b0542e1f8d14b2"}, {"problem": 61, "code": "(fn pia [lst1 lst2]\n  (apply merge (map (fn [k v] {k v}\n                      )\n                 lst1 lst2)\n    )\n  )", "user": "569ce6fee4b0542e1f8d146c"}, {"problem": 61, "code": "#(apply assoc {} (interleave % %2))", "user": "56992162e4b0542e1f8d143c"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (map vector ks vs)))", "user": "565f8fd2e4b068f2fe63dc41"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5638d2d1e4b0bfe05bf117eb"}, {"problem": 61, "code": "#(apply assoc {} (interleave % %2))", "user": "55d1ec3ee4b0e31453f64a4c"}, {"problem": 61, "code": "(fn zipmap*\n  [c1 c2]\n  (reduce conj (map #(hash-map %1 %2) c1 c2)))", "user": "566f7749e4b0a866af6896e9"}, {"problem": 61, "code": "(fn [ks vs] (apply hash-map (interleave ks vs)))", "user": "569adec2e4b0542e1f8d1450"}, {"problem": 61, "code": "(fn [cola colb]\n  (apply hash-map (interleave cola colb)))", "user": "5294a49be4b02ebb4ef7500f"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5617a540e4b06b1bb2182a12"}, {"problem": 61, "code": "#(apply array-map (interleave % %2))", "user": "56b1ab17e4b0982f16b37df1"}, {"problem": 61, "code": "#(into {} (map (fn [a b] [a b]) %1 %2))", "user": "53307a23e4b019098a6f8b5d"}, {"problem": 61, "code": "(fn [a b]\n  (reduce #(assoc-in %1 [(first %2)] (second %2))\n          {}\n          (partition 2 (interleave a b))))", "user": "56b18445e4b0982f16b37dee"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))\n\n; (apply hash-map (interleave %1 %2))", "user": "56b295f7e4b0982f16b37e08"}, {"problem": 61, "code": "(fn [ks vs] (apply array-map (interleave ks vs)))", "user": "56791447e4b05957ce8c6183"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "56baab13e4b0f26550335948"}, {"problem": 61, "code": "#(into {} (map (fn [a b] [a b]) % %2))", "user": "56a76f36e4b07966d5a8a05b"}, {"problem": 61, "code": "(fn [keys values]\n  (reduce merge (map (fn [key value]{key value}) keys values)))", "user": "563cdfdfe4b0bfe05bf11840"}, {"problem": 61, "code": "#(reduce (fn [m [k v]] (assoc m k v)) {} (map (fn [k v] [k v]) %1 %2))", "user": "56baa68ce4b0f26550335947"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "56ae214ce4b03c432f18735a"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (map (fn [k v] [k v]) ks vs)))", "user": "56a51f26e4b0542e1f8d14e0"}, {"problem": 61, "code": "#(->> (interleave % %2)\n      (partition 2)\n      (map vec)\n      (into {}))", "user": "531a0709e4b08068f379ed87"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "56bb9ccce4b0f26550335959"}, {"problem": 61, "code": "(fn [coll1 coll2]\n  (into {} (keep-indexed (fn [idx item1]\n                           (when-let [item2 (get coll2 idx)]\n                             [item1 item2]))\n                         coll1)))", "user": "56a79eb0e4b07966d5a8a05d"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map vector ks vs)))", "user": "56b86e64e4b0f26550335924"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "56a01895e4b0542e1f8d149f"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (map (fn [k v] [k v]) ks vs)))", "user": "56ba1406e4b0f2655033593c"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "56bb3a4be4b0f26550335951"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5638b88de4b0bfe05bf117e9"}, {"problem": 61, "code": "(fn z\n  [k v]\n   (if (and (not-empty k) (not-empty v))\n     (merge {(first k) (first v)} (z (rest k) (rest v)))))", "user": "56bca51ae4b0f26550335963"}, {"problem": 61, "code": "(fn [ks vs]\n  (loop [r {}\n         rk ks\n         rv vs]\n    (if (or (empty? rk) (empty? rv))\n      r\n      (recur (assoc r \n               (first rk)\n               (first rv))\n             (rest rk)\n             (rest rv)))))", "user": "54a80855e4b09f271ff37c9e"}, {"problem": 61, "code": "(fn \n  [k v]\n  (loop [x k\n         y v\n         m (hash-map)]\n    (cond\n      (empty? x) m\n      (empty? y) m\n      :else (recur (rest x) (rest y)\n                   (assoc m (first x) (first y))))))", "user": "5599abc9e4b031d6649c9bb0"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map vector ks vs)))", "user": "56012cd7e4b04bb52996e17d"}, {"problem": 61, "code": "(fn [x y] (into {} (map #(vector %1 %2) x y)))", "user": "567f034be4b0feffd0d18eba"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "563536f8e4b0bfe05bf117c5"}, {"problem": 61, "code": "(fn [coll1 coll2]\n  (apply sorted-map (interleave coll1 coll2)))", "user": "56826ebce4b0945ebc182a93"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "55ed5a2de4b0121d4835fdd8"}, {"problem": 61, "code": "(fn mapzip\n  [c1 c2]\n  (into {} (map #(identity [%1 %2]) c1 c2)))", "user": "5609d328e4b05f002753deee"}, {"problem": 61, "code": "(fn zip-map [xs ys]\n  (if (or (= (count xs) 0) (= (count ys) 0))\n    {}\n    (conj (zip-map (rest xs) (rest ys)) [(first xs) (first ys)])))", "user": "56bfcba1e4b060a8e693e3a1"}, {"problem": 61, "code": "#(apply conj {} (map vector %1 %2))", "user": "56a36f76e4b0542e1f8d14ca"}, {"problem": 61, "code": "(fn [k v] (apply assoc {} (mapcat #(list %1 %2) k v)))", "user": "56b2573ce4b0982f16b37e02"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "56c33ceae4b05cc29241ee89"}, {"problem": 61, "code": "#(apply assoc {} (interleave % %2))", "user": "56c08696e4b060a8e693e3aa"}, {"problem": 61, "code": "(fn constructor [& data]\n  (reduce #(assoc %1 (first %2) (second %2)) {} (apply map list data)))", "user": "56ca6141e4b0ea9b8538f71a"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "56a6051fe4b0542e1f8d14e5"}, {"problem": 61, "code": "#(apply conj (map hash-map %1 %2))", "user": "56c4f43ce4b05cc29241ee9c"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "56a37ccee4b0542e1f8d14cb"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "567e418fe4b0feffd0d18eb1"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "56aed78fe4b03c432f187363"}, {"problem": 61, "code": "(fn [a b] (apply assoc {} (interleave a b)))", "user": "5250a13ee4b0541d1855b839"}, {"problem": 61, "code": "(fn [k v] (reduce #(assoc % (first %2) (second %2)) {} (map vector k v)))", "user": "569f4dabe4b0542e1f8d1491"}, {"problem": 61, "code": ";(fn [ks vs]\n;    (apply hash-map (mapcat #(list %1 %2) ks vs)))\n(fn m [x y]\n  (cond (or (empty? x) (empty? y)) '{}\n        :else\n        (assoc (m (rest x) (rest y)) (first x) (first y))))", "user": "56cba075e4b0ea9b8538f737"}, {"problem": 61, "code": "(fn [seq1 seq2]\n  (loop [src1 seq1, src2 seq2, result {}]\n    (if (or (empty? src1)\n            (empty? src2))\n      result\n      (recur (rest src1)\n             (rest src2)\n             (assoc result\n               (first src1)\n               (first src2))))))", "user": "56c55fbce4b05cc29241eea5"}, {"problem": 61, "code": "(comp (partial into {}) (partial map #(->[% %2])))", "user": "555c38d9e4b0b056612e2249"}, {"problem": 61, "code": "(fn [ks vs]\n(loop [kz ks vz vs m {}]\n(if (or (empty? kz) (empty? vz))\nm\n(recur (rest kz) (rest vz) \n(into m [[(first kz) (first vz)]])))\n)\n)", "user": "565b941ce4b068f2fe63dc07"}, {"problem": 61, "code": "(fn [a b]\n    (apply conj {} (map vector a b)))", "user": "4e8a170c535d3e98b802328f"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (map #(vector %1 %2) ks vs)))", "user": "5549ff9ae4b0a04f7929956e"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply hash-map\n         (flatten (map vector ks vs))))", "user": "5561d2c2e4b0c656e3ff17cd"}, {"problem": 61, "code": "#(apply merge \n        (map hash-map % %2))", "user": "56d1afd9e4b0ea9b8538f791"}, {"problem": 61, "code": "#(reduce into (map hash-map %1 %2))", "user": "56d228f3e4b0ea9b8538f79a"}, {"problem": 61, "code": "(fn [coll1 coll2]\n  (apply assoc {}\n   (interleave coll1 coll2))\n)", "user": "506af7d8e4b0a2a5463de37d"}, {"problem": 61, "code": "(fn [x y]\n  (loop [_keys x\n         _values y\n         return {}]\n    (if (or (nil? (first _keys))\n            (nil? (first _values)))\n      return\n      (recur (rest _keys)\n             (rest _values)\n             (assoc return (first _keys) (first _values))))))", "user": "55f73078e4b06e875b46cea4"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5651654be4b0f9d632dd845a"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "52fe31d5e4b047fd55837038"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "56d05ba2e4b0ea9b8538f77d"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "56d63729e4b0ea9b8538f7ca"}, {"problem": 61, "code": "(fn [ks vs] (into {} (vec (map vec (partition 2 (interleave ks vs))))))", "user": "56c70cc2e4b0ed865f9758b5"}, {"problem": 61, "code": "(comp #(apply hash-map %) interleave)", "user": "56d80542e4b0ea9b8538f7e1"}, {"problem": 61, "code": "#(into {}\n        (for [n (range (min (count %1) (count %2)))] [(get %1 n) (get %2 n)]))", "user": "56a1fce9e4b0542e1f8d14b7"}, {"problem": 61, "code": "(fn [keys values]\n  (apply assoc {} (interleave keys values)))", "user": "56d4b22de4b0ea9b8538f7bb"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "56ab80f1e4b03c432f18733e"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "54b8dfece4b0ed20f4ff6e9a"}, {"problem": 61, "code": "#(apply assoc {} (reverse (interleave %2 %1)))", "user": "56c60b36e4b05cc29241eead"}, {"problem": 61, "code": "(comp (partial apply hash-map) interleave)", "user": "56dc3bdfe4b0ea9b8538f819"}, {"problem": 61, "code": "(fn [v1 v2]\n  (let [v3 (partition 2 (interleave v1 v2))]\n    (loop [m {} i 0]\n      (if (= i (count v3))\n        m\n        (recur (assoc m (first (nth v3 i)) (second (nth v3 i))) \n               (inc i))))))", "user": "564d3169e4b0284900eef67c"}, {"problem": 61, "code": "(fn [x y] (apply hash-map (interleave x y)))", "user": "4dad6fcb8e77d6ed59f12a44"}, {"problem": 61, "code": "(fn [mkeys mvals]\n  (loop [_keys mkeys\n         _vals mvals\n         ret {}]\n    (if (or\n         (empty? _keys)\n         (empty? _vals))\n      ret\n      (let [tkey (first _keys)\n            tval (first _vals)]\n        (recur (rest _keys) (rest _vals) (conj ret {tkey tval}))))))", "user": "56d5fd24e4b0ea9b8538f7c5"}, {"problem": 61, "code": "(fn my-zipmap [ks vs]\n  (reduce #(assoc % (nth ks %2) (nth vs %2))\n          {} (range (min (count vs) (count ks)))))", "user": "56bf4ac0e4b0f26550335985"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "550b502ae4b06e50f9beb13f"}, {"problem": 61, "code": "(fn [a b] (reduce #(apply (partial assoc %1) %2)  (sorted-map) (map list a b)))", "user": "54be7e93e4b0ed20f4ff6eed"}, {"problem": 61, "code": "(fn [kys values]\n  (let [minLength (min (count kys) (count values))]\n    (reduce\n     #(assoc %1 (.get kys %2) (.get values %2)) \n     {} \n     (range minLength)\n     )\n    )\n  )", "user": "56d74c88e4b0ea9b8538f7d9"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "56603e5fe4b068f2fe63dc4a"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "56d68cbae4b0ea9b8538f7cd"}, {"problem": 61, "code": "(fn [k v] (loop [m {} ks k vs v] (if\n                                   (or (empty? ks) (empty? vs))\n                                   m\n                                   (recur \n                                    (assoc m (first ks) (first vs))\n                                    (rest ks)\n                                    (rest vs)))))", "user": "55009d17e4b07d26eda61d5d"}, {"problem": 61, "code": "(fn [k v]\n  (loop [[fk & rk :as allk] k\n         [fv & rv :as allv] v\n         res {}]\n    (if (or (empty? allk) (empty? allv))\n      res\n      (recur rk rv (conj res [fk fv]))\n      )\n    )\n  )", "user": "55f33f0ce4b06e875b46ce59"}, {"problem": 61, "code": "(fn construct-map [key-coll val-coll]\n  (apply hash-map (mapcat vector key-coll val-coll)))", "user": "557e56aae4b05c286339e0d5"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "56b6a50ae4b0982f16b37e3c"}, {"problem": 61, "code": "(fn [vec1 vec2] (into {} (map #(assoc {} %1 %2) vec1 vec2)))", "user": "56df62b3e4b0ca2494a095ef"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "56e2dbf4e4b03a7c14b85a3b"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "56e227a8e4b03a7c14b85a31"}, {"problem": 61, "code": "(fn map-construction\n  [keys values]\n  (loop [keys keys values values result {}]\n    (cond\n      (empty? keys) result\n      (empty? values) result\n      :else\n      (recur (rest keys) (rest values) (merge result (hash-map (first keys) (first values)))))))", "user": "56df63c7e4b0ca2494a095f5"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "56df254be4b0ca2494a095ea"}, {"problem": 61, "code": "(fn my-61\n  [ks vs]\n  (reduce (fn [res [k v]] (into res {k v})) {} (partition 2 (interleave ks vs))))", "user": "56c3aca0e4b05cc29241ee90"}, {"problem": 61, "code": "(fn p\n  [k v]\n  (let [m {}]\n    (reduce merge (map #(assoc m %1 %2) k v))))", "user": "56df632ce4b0ca2494a095f2"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "56be8649e4b0f26550335983"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply hash-map (mapcat vector ks vs)))", "user": "56c427bbe4b05cc29241ee94"}, {"problem": 61, "code": "#(apply hash-map  (interleave %1 %2))", "user": "56e9a56ae4b04a395b9a03fc"}, {"problem": 61, "code": "(fn f\n    [keys values]\n    (loop\n      [keys keys\n       values values\n       result {}]\n      (cond (or (empty? keys) (empty? values)) result\n            :else                               (recur\n                                                  (rest keys)\n                                                  (rest values)\n                                                  (into result {(first keys) (first values)})))))", "user": "56df62eee4b0ca2494a095f0"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply assoc \n   {}\n   (reduce\n    (fn [a x] (concat a x))\n    ()\n    (map #(list %1 %2) ks vs))))", "user": "56050f06e4b08b23635d3161"}, {"problem": 61, "code": "(fn f [llaves valores]\n  (loop [llaves llaves\n         valores valores\n         mapa {}]\n  (if (or (= (count llaves) 0) (= (count valores) 0))\n    mapa\n  \t(recur  (rest llaves) (rest valores) (assoc mapa (first llaves) (first valores))))))", "user": "56df63e1e4b0ca2494a095f6"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "56d4b1aee4b0ea9b8538f7ba"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "563cce5be4b0bfe05bf1183f"}, {"problem": 61, "code": "(fn\n  [coll1 coll2]\n  (->>\n    (map #(array-map %1 %2) coll1 coll2)\n    (reduce merge)))", "user": "56df6846e4b0ca2494a095fa"}, {"problem": 61, "code": "(fn constr\n  ( [result keys values] (if-not (or (empty? keys) (empty? values))\n                           (constr (into result (array-map (first keys) (first values))) (rest keys) (rest values))\n                           result))\n  ([keys values] (constr (array-map (first keys) (first values)) (rest keys) (rest values))))", "user": "56aa9464e4b07966d5a8a08d"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (map (fn [k v] [k v]) ks vs)))", "user": "53b530c6e4b047364c0444bc"}, {"problem": 61, "code": "(fn [keys vals]\n  (into {} (map (fn [k v] [k v]) keys vals)))", "user": "52d38c51e4b099d49816f0c5"}, {"problem": 61, "code": "#(into {} (map vec (partition 2 (interleave % %2))))", "user": "56e06625e4b0ca2494a09607"}, {"problem": 61, "code": "(comp (partial apply hash-map) interleave)", "user": "56ecc4b5e4b04a395b9a043e"}, {"problem": 61, "code": "(fn my-zipmap [keys values]\n  (reduce #(assoc %, (first %2), (second %2))\n          {}\n          (map list keys values)))", "user": "569dd6e8e4b0542e1f8d1480"}, {"problem": 61, "code": "(fn\n    [lst1 lst2]\n    (apply hash-map (interleave lst1 lst2)))", "user": "56eaad95e4b04a395b9a040f"}, {"problem": 61, "code": "(fn [a b] (let [c (interleave a b), d (cons {} c)] (apply assoc d)))", "user": "56c4f971e4b05cc29241ee9d"}, {"problem": 61, "code": "(fn [a b] (apply merge (map (partial assoc {}) a b)))", "user": "56ebe773e4b04a395b9a042a"}, {"problem": 61, "code": "(fn map-construction [xs ys]\n  (apply hash-map (mapcat vector xs ys)))", "user": "518b8561e4b0f028e99addef"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "527bd988e4b03e8d9a4a759d"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "56db90d4e4b0ea9b8538f80d"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "56dc483fe4b0ea9b8538f81b"}, {"problem": 61, "code": "(fn f [ks vs]\n            (->> (map vector ks vs)\n                 (into {})))", "user": "53684a2fe4b0243289761e8c"}, {"problem": 61, "code": "#(loop [ks %1, vs %2, acc {}]\n  (if (or (empty? ks) (empty? vs))\n  acc\n  (recur (rest ks) (rest vs) (assoc acc (first ks) (first vs)))))", "user": "56e02c1ce4b0ca2494a09602"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "56e6ef89e4b02e7e935eb6d0"}, {"problem": 61, "code": "(fn [coll1 coll2]\n   (loop [c1 coll1\n          c2 coll2\n          result {}]\n     (if (and (seq c1) (seq c2))\n       (recur (rest c1) (rest c2) (assoc result (first c1) (first c2)))\n       result)))", "user": "562268dce4b03f08ee9a9224"}, {"problem": 61, "code": "(fn create-map\n  [keys vals]\n  (into {} (map vector keys vals)))", "user": "56e99ec8e4b04a395b9a03fb"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "56f258d3e4b04a395b9a04a1"}, {"problem": 61, "code": "(fn [x y]\n  (apply merge (map #(assoc {} %1 %2) x y))\n  )", "user": "56f188e9e4b04a395b9a0494"}, {"problem": 61, "code": "(fn[coll1 coll2]\n  (into {} (map vector coll1 coll2)))", "user": "55101237e4b06e50f9beb181"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "56f298b4e4b04a395b9a04a6"}, {"problem": 61, "code": "(fn createmap [coll1 coll2]\n  (reduce (fn [result [val key]] (assoc result val key)) {} (map #(vector %1 %2) coll1 coll2)))", "user": "56e53d2fe4b02e7e935eb6bc"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "52c35afce4b07a9af579238c"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "56f4623ae4b046a417f9205d"}, {"problem": 61, "code": "(fn [akeys values]\n  (reduce (fn [map [k v]] (assoc map k v)) {}\n       (partition 2 (interleave akeys values))))", "user": "5033ed65e4b062bc5d7ae15a"}, {"problem": 61, "code": "(fn [k v] (into {} (map #(vector % %2) k v)))", "user": "542a8d07e4b01498b1a71b43"}, {"problem": 61, "code": "(fn [coll-a coll-b] (apply array-map (->> (map #(list %1 %2) coll-a coll-b) (apply concat))))", "user": "56ef11efe4b04a395b9a045b"}, {"problem": 61, "code": "(fn[a1 a2]\n(into {} (map vector a1 a2)))", "user": "539f9f79e4b0ca733b97449e"}, {"problem": 61, "code": "(fn [s1 s2] (into {} (mapcat #(assoc {} %1 %2) s1 s2)))", "user": "542fa0dde4b0dad94371f2d2"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "56ca0da9e4b0ea9b8538f715"}, {"problem": 61, "code": "(fn make-map [ks vs]\n  (if ((set (map empty? [ks vs])) true) {}\n    (assoc (make-map (rest ks) (rest vs)) (first ks) (first vs))))", "user": "56dc3dbbe4b0ea9b8538f81a"}, {"problem": 61, "code": "#(apply hash-map (flatten (mapv vector %1 %2)))", "user": "56f15eade4b04a395b9a048e"}, {"problem": 61, "code": "(fn [ks vs] (loop [keyData ks valData vs final {}] (if (or (empty? keyData) (empty? valData)) final (recur (rest keyData) (rest valData) (assoc final (first keyData) (first valData))))))", "user": "54e7425ee4b024c67c0cf810"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "568c92c6e4b0dcc4269f40b8"}, {"problem": 61, "code": "#(into {} (apply map hash-map %&))", "user": "56f7ecdfe4b08e7d20b96834"}, {"problem": 61, "code": "(fn [ks vs]\n    (into {} (map #(vector %1 %2) ks vs)))", "user": "4f57c913e4b0a7574ea7183f"}, {"problem": 61, "code": "(fn [keys vals]\n  (loop [map {}\n         ks (seq keys)\n         vs (seq vals)]\n    (if (and ks vs)\n\t\t(recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n      map)))", "user": "54cbd6bae4b057c6fda3a282"}, {"problem": 61, "code": "(fn p [a b]\n  (apply hash-map (interleave a b)))", "user": "56fc1bc7e4b07572ad1a88dd"}, {"problem": 61, "code": "(fn my-zipmap [ks vs]                                                        \n  (loop [my-map (sorted-map) ks ks vs vs]                                      \n    (if (or (empty? ks) (empty? vs))                                           \n      my-map                                                                   \n      (recur (into my-map [[(first ks) (first vs)]]) (rest ks) (rest vs)))))", "user": "56eb16d8e4b04a395b9a041d"}, {"problem": 61, "code": "#(into {} (map (partial into [])\n                  (partition 2 (interleave % %2))))", "user": "56f9890be4b07572ad1a88b5"}, {"problem": 61, "code": "(fn f[a b]\n  (apply hash-map (mapcat list a b)))", "user": "56fa8984e4b07572ad1a88c1"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "553beff9e4b09218d5f4500d"}, {"problem": 61, "code": "(fn [& args] (apply conj (apply map (fn [x,y] {x y}) args)))", "user": "56ec0af1e4b04a395b9a0430"}, {"problem": 61, "code": "#( into {} (map hash-map % %2) )", "user": "569637d8e4b0dcc4269f4130"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "56fdd9a1e4b08d47c97781a8"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "56f9392ae4b07572ad1a88ac"}, {"problem": 61, "code": "(fn [a b] (into {} (map vector a b)))", "user": "56fde58ae4b08d47c97781aa"}, {"problem": 61, "code": "(fn [ks, vs]\n  (loop [[k & ks-left] ks\n         [v & vs-left] vs\n         result        {}]\n    (if (and k v)\n      (recur ks-left \n             vs-left \n             (assoc result k v))\n      result)))", "user": "57006957e4b08d47c97781c8"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "52c1cc8be4b07a9af579236b"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "520e37cfe4b066f3ea161c96"}, {"problem": 61, "code": "#(into {} (mapcat hash-map %1 %2))", "user": "54a6645be4b09f271ff37c87"}, {"problem": 61, "code": "#(apply sorted-map (interleave %1 %2))", "user": "56fbf83de4b07572ad1a88da"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply hash-map (apply concat (map #(vector % %2) ks vs))))", "user": "57008afae4b08d47c97781ca"}, {"problem": 61, "code": "(fn create [x y]\n  (apply hash-map (interleave x y)))", "user": "5703d21ae4b08d47c97781ff"}, {"problem": 61, "code": "#(into {}\n    (map (fn [x y] [x y]) \n         %1 %2))", "user": "51e5a627e4b0efabf93c02db"}, {"problem": 61, "code": "(fn\n  [new-keys new-vals]\n  (loop [[k & k-rem] new-keys\n         [v & v-rem] new-vals\n         result {}]\n    (if (or (empty? k-rem) (empty? v-rem))\n      (assoc result k v)\n      (recur k-rem v-rem (assoc result k v)))\n    ))", "user": "56f8055ee4b08e7d20b96835"}, {"problem": 61, "code": "(fn [k v] (apply hash-map (interleave k v)))", "user": "570459a9e4b0b0fb43fd0662"}, {"problem": 61, "code": "(fn zm [k v]\n  (apply merge (map hash-map k v)))", "user": "5703eda3e4b08d47c9778200"}, {"problem": 61, "code": "(fn mapcon [ks vs] \n    (loop [a {} k ks v vs]\n      (if (or (empty? k) (empty? v))\n      a\n      (recur (assoc a (first k) (first v)) (rest k) (rest v)))))", "user": "569aca1ee4b0542e1f8d144d"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "57035ccfe4b08d47c97781ef"}, {"problem": 61, "code": "(fn [kys vas]\n (apply hash-map(interleave kys vas)))", "user": "570243e2e4b08d47c97781dd"}, {"problem": 61, "code": "(fn [kys vas]\n    (apply hash-map (interleave kys vas)))", "user": "5703ce0fe4b08d47c97781fd"}, {"problem": 61, "code": "(fn [s1 s2]\n  (loop [acc {}\n         r1 s1\n         r2 s2]\n    (if (or (empty? r1) (empty? r2))\n      acc\n      (recur (conj acc {(first r1) (first r2)})\n             (rest r1)\n             (rest r2)))))", "user": "5292feb4e4b0239c8a67af39"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (map vector ks vs)))", "user": "549eb44fe4b0f3d1d8e70fa6"}, {"problem": 61, "code": "#(apply assoc {} (interleave % %2))", "user": "528e7740e4b0239c8a67aee0"}, {"problem": 61, "code": "(comp\n  (partial apply assoc {})\n  interleave)", "user": "5703cd50e4b08d47c97781fc"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "57027310e4b08d47c97781e2"}, {"problem": 61, "code": "#(apply sorted-map (interleave %1 %2))", "user": "570377c1e4b08d47c97781f1"}, {"problem": 61, "code": "(fn map-construction [keys values] (into {} (map #(hash-map %1 %2) keys values)))", "user": "56fbcc1fe4b07572ad1a88d5"}, {"problem": 61, "code": "(fn mapper\n  ([c1 c2]\n    (do (prn c1 c2)\n    (mapper c1 c2 '{})))\n  ([c1 c2 result]\n   (if (and (seq c1) (seq c2))\n     (mapper (rest c1) (rest c2) (assoc result (first c1) (first c2)))\n     result)))", "user": "56f4cedce4b046a417f92063"}, {"problem": 61, "code": "(fn [a b] (into {}(for [c (range 0 (min (count a) (count b)))] {(nth a c) (nth b c)})))", "user": "4e5e9f6b535d8a8b8723a2d2"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "56ab7578e4b03c432f18733d"}, {"problem": 61, "code": "(fn [a b]\n  (into (sorted-map)\n        (mapcat sorted-map a b)\n        )\n  )", "user": "55ba70f9e4b01b9910ae29d4"}, {"problem": 61, "code": "(fn\n  [vkeys vvalues]\n  (loop [vk vkeys vv vvalues acc {}]\n    (if (or (empty? vk) (empty? vv))\n      acc\n      (recur (rest vk) (rest vv) (assoc acc (first vk) (first vv))))))", "user": "56cb4d06e4b0ea9b8538f72e"}, {"problem": 61, "code": "(fn foozip [keys vals]\n  (apply hash-map\n    (mapcat\n      (fn [a b] (list a b))\n      keys vals)))", "user": "56fc0601e4b07572ad1a88db"}, {"problem": 61, "code": "(fn [x y] \n  (reduce #(assoc %1 (first %2) (second %2)) {} (partition 2 (interleave x y))))\n;((fn [x y] (apply hash-map (reverse (interleave y x)))) [:a :b :c] [1 2 3])", "user": "567e6d24e4b0feffd0d18eb4"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map vector ks vs)))", "user": "57002b81e4b08d47c97781c7"}, {"problem": 61, "code": "(fn [a b] (reduce #(apply assoc %1 %2) {} (map vector a b)))", "user": "5712854ce4b07c98581c3a89"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5711b532e4b09c608db70449"}, {"problem": 61, "code": "(fn [coll coll2]\n   (into (sorted-map)\n         (map vector coll coll2))\n   )", "user": "56ede653e4b04a395b9a0449"}, {"problem": 61, "code": "(fn [a b]\n  \t(apply assoc {} \n   \t\t(interleave a b)\n   \t)\n)", "user": "5710e574e4b09c608db7043b"}, {"problem": 61, "code": "(fn [a b] (into {} (map vector a b)))", "user": "4f5599dfe4b0a7574ea71806"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "56b506d5e4b0982f16b37e2d"}, {"problem": 61, "code": "(fn [x y] \n  (into {} \n        (map #(vector %1 %2) x y)))", "user": "57011eb3e4b08d47c97781d1"}, {"problem": 61, "code": "(fn my-zip-map [keys vals]\n  (loop [map {} ks keys vs vals]\n    (if (and ks vs)\n      (recur (assoc map (first ks) (first vs)) (next ks) (next vs))\n      map)))", "user": "570ab24fe4b0b0fb43fd06b7"}, {"problem": 61, "code": "(fn my-map [x y] \n  (if (or (= 0 (count x)) (= 0 (count y)) )\n    {} \n    (conj (my-map (rest x) (rest y)) {(first x) (first y)})))", "user": "56ff7ffee4b08d47c97781be"}, {"problem": 61, "code": "#(into {} (map (fn [key val] [key val]) %1 %2))", "user": "57168db0e4b07c98581c3afc"}, {"problem": 61, "code": "#(loop [ks %1, vs %2, result {}]\n   (if (or (empty? ks) (empty? vs))\n     result\n     (recur (rest ks) (rest vs) (conj result {(first ks) (first vs)}))))", "user": "57015a1de4b08d47c97781d4"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5717e367e4b07c98581c3b1d"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (map (fn [a b] [a b]) ks vs)))", "user": "571c2babe4b07c98581c3b73"}, {"problem": 61, "code": "(fn my-zipmap [keys values]\n  (reduce conj {} (map vector keys values)))", "user": "571d063ee4b0145328a76272"}, {"problem": 61, "code": "(fn [keys values] (apply assoc {} (interleave keys values)))", "user": "5713c575e4b07c98581c3aab"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "52393e16e4b0d705d026ef06"}, {"problem": 61, "code": "#(apply merge (map hash-map %1 %2))", "user": "571aad45e4b07c98581c3b59"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "52ae886de4b0c58976d9acab"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "56df6417e4b0ca2494a095f7"}, {"problem": 61, "code": "(fn [x y]\n  (loop [x x\n         y y\n         m {}]\n    (if (and (not-empty x) (not-empty y))\n      (recur (rest x) (rest y) (assoc m (first x) (first y)))\n      m)))", "user": "56491d05e4b0284900eef63a"}, {"problem": 61, "code": "(fn [x y]\n      (into {} (map #(hash-map %1 %2) x y)))", "user": "56df6351e4b0ca2494a095f3"}, {"problem": 61, "code": "(fn\n  [vector1 vector2]\n  (apply hash-map (interleave vector1 vector2)))", "user": "56df6498e4b0ca2494a095f8"}, {"problem": 61, "code": "(fn\n  [keys vals]\n  (loop [[k & ks] keys [v & vs] vals acc {}]\n    (if (and k v)\n      (recur ks vs (assoc acc k v))\n      acc\n      )\n    )\n  )", "user": "56edf2dde4b04a395b9a044b"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "56df629fe4b0ca2494a095ee"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "56f51879e4b046a417f92069"}, {"problem": 61, "code": "(fn mapConstruct \n    [vec1 vec2]\n    (apply hash-map (interleave vec1 vec2)))", "user": "56fe2a2fe4b08d47c97781ad"}, {"problem": 61, "code": "(fn map-zipper [keylist vallist]\n  (if (or (empty? keylist) (empty? vallist))\n    {}\n    (assoc (map-zipper (rest keylist) (rest vallist)) (first keylist) (first vallist))))", "user": "571cd9dce4b0145328a76271"}, {"problem": 61, "code": "#(reduce merge (map (fn [n c] {n c}) %1 %2))", "user": "57210e8ee4b0c5bde472c0a8"}, {"problem": 61, "code": "(fn\n  [x y]\n  (into {} (map #(vector %1 %2) x y))\n  )", "user": "56de78fde4b0ea9b8538f83c"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "571dd145e4b0145328a76283"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "4df73d64535d04ed9115e775"}, {"problem": 61, "code": "#(apply assoc {} (interleave % %2))", "user": "529e8ba9e4b04e0c58e87b99"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "57201f14e4b0c5bde472c08e"}, {"problem": 61, "code": "#(apply merge (map hash-map %1 %2))", "user": "533a2f7be4b0e30313ee6cb8"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "4f8490fae4b033992c121c34"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "57211a02e4b0c5bde472c0a9"}, {"problem": 61, "code": "(fn\n  [keyss values]\n  (apply hash-map (interleave keyss values)))", "user": "56df636ae4b0ca2494a095f4"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "571ff1ebe4b0c5bde472c088"}, {"problem": 61, "code": "(fn p \n  [& params]\n  (reduce #(assoc %1 (first %2) (second %2))\n    {} (apply map list params)))", "user": "56df7440e4b0ca2494a095fb"}, {"problem": 61, "code": "(fn p\n  [lst lst2]\n\t(apply assoc{} (interleave lst lst2)))", "user": "5723e6d6e4b0c5bde472c0f1"}, {"problem": 61, "code": "(fn [col1 col2]\n  (apply hash-map (interleave col1 col2)))", "user": "54f5aa4ce4b0f2f3c5226e94"}, {"problem": 61, "code": "(fn [k v] (apply assoc {} (interleave k v)))", "user": "5461dc79e4b01be26fd746a8"}, {"problem": 61, "code": "(fn my-zipmap\n  [ks vs]\n  (loop [ks ks\n         vs vs\n         result {}]\n    (if-not (and (not-empty ks) (not-empty vs))\n      result\n      (recur (rest ks) (rest vs) (assoc result (first ks) (first vs))))))", "user": "572db6d5e4b0cd1946bd0f78"}, {"problem": 61, "code": "(fn [v1 v2]\n  (loop [vec1 v1 vec2 v2 m {}]\n    (if (or (empty? vec1) (empty? vec2)) m\n      (recur (next vec1) (next vec2) (assoc m (first vec1) (first vec2))))))", "user": "57061d20e4b0b0fb43fd0679"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "57283dbce4b0c5bde472c154"}, {"problem": 61, "code": "(fn [& colls]\n  (into {}\n    (apply map vector colls)))", "user": "53716539e4b0fc7073fd6eb1"}, {"problem": 61, "code": "(fn [x y] (reduce conj (hash-map) (map vector x y)))", "user": "56eb3f9de4b04a395b9a0420"}, {"problem": 61, "code": "(fn [a b] (into {} (map vector a b)))", "user": "5717d674e4b07c98581c3b1a"}, {"problem": 61, "code": "(fn my-zipmap [[k & ks] [v & vs]]\n  (if (or (empty? ks) (empty? vs))\n    {k v}\n    (assoc (my-zipmap ks vs) k v)))", "user": "569f99cce4b0542e1f8d1497"}, {"problem": 61, "code": "(fn once [x y] (if (or (empty? x) (empty? y)) {} (merge {(first x) (first y)} (once (rest x) (rest y)))))", "user": "57300c19e4b0cd1946bd0fa1"}, {"problem": 61, "code": "(fn [keys values]\n    (loop [map {} ks (seq keys) vs (seq values)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs)) (next ks) (next vs))\n        map)))", "user": "57213df6e4b0c5bde472c0ab"}, {"problem": 61, "code": "(fn [k v] (apply hash-map (interleave k v)))", "user": "572ea970e4b0cd1946bd0f89"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "570794d8e4b0b0fb43fd068b"}, {"problem": 61, "code": "(fn [a b] (apply assoc {}(interleave a b)))", "user": "5256c4c1e4b0541d1855ba36"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "573107d5e4b0cd1946bd0fbc"}, {"problem": 61, "code": "(fn my-zipmap [ks, vs]\n  (if (= 0 (min (count ks) (count vs)))\n    {}\n    (assoc (my-zipmap (rest ks) (rest vs)) (first ks) (first vs))))", "user": "5733e4aee4b0cd1946bd0ffe"}, {"problem": 61, "code": "(fn [ks vs]\n(apply hash-map\n   (mapcat\n   #(list % %2)\n   \n   ks\n   vs\n   )\n   )\n  )", "user": "5735ac67e4b0cd1946bd102b"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "573ce277e4b05c31a32c080b"}, {"problem": 61, "code": "(fn [keys vals] (apply assoc {} (interleave keys vals)))", "user": "571d9669e4b0145328a7627f"}, {"problem": 61, "code": "(fn [k-vector v-vector]\n  (reduce into {}\n          (map #(into {} [[% %2]])\n               k-vector v-vector)))\n\n;;; #(apply hash-map (interleave %1 %2))", "user": "5724a4dae4b0c5bde472c0fe"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5739cbe4e4b0cd1946bd107c"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "55c3f19de4b0e31453f64991"}, {"problem": 61, "code": "#(apply hash-map (flatten (map (fn [key- value-] (vector key- value-)) %1 %2)))", "user": "5602f5fce4b04bb52996e1ad"}, {"problem": 61, "code": "(fn [k v]\n  (reduce #(assoc % (first %2) (last %2))\n          {}\n          (partition 2 (interleave k v))))", "user": "56ff45e5e4b08d47c97781bb"}, {"problem": 61, "code": "(fn [keys values]\n                   (into {}\n                     (filter (complement #(some nil? %))\n                       (map-indexed (fn [idx key] [key (get values idx)]) keys)) ))", "user": "561814bae4b06b1bb2182a1a"}, {"problem": 61, "code": "(fn [ar1 ar2] (apply assoc {} (interleave ar1 ar2)))", "user": "573b664ce4b0cd1946bd10a7"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "573652e1e4b0cd1946bd1030"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "57280b92e4b0c5bde472c14e"}, {"problem": 61, "code": "(fn [k v] (apply hash-map (interleave k v)))", "user": "57458b82e4b009280f9f2b4e"}, {"problem": 61, "code": "(fn [a b] (into {} (map #(vector %1 %2) a b)))", "user": "523acf7be4b0aa37f082ed90"}, {"problem": 61, "code": "(fn [x y] (apply hash-map\n                  (interleave\n                   x\n                   y\n                   )\n            ) \n           \n  )", "user": "56e6e1e6e4b02e7e935eb6cf"}, {"problem": 61, "code": "(fn [keys vals]\n   (loop [k (seq keys) v (seq vals) rslt {}]\n     (if (or (empty? k) (empty? v)) rslt\n         (recur (rest k)  (rest v) \n                (assoc  rslt (first k) (first v))))\n     ))", "user": "572ac718e4b0f4d77e651242"}, {"problem": 61, "code": ";#(into {} (map vector %1 %2))\n;(comp (partial into {}) (partial map vector))\n(comp (partial apply hash-map) interleave)", "user": "57407ab3e4b05c31a32c0854"}, {"problem": 61, "code": "#(into {} (map (fn [f s] [f s]) %1 %2))", "user": "553900d4e4b09218d5f44fe5"}, {"problem": 61, "code": "#(apply merge (seq (map hash-map %1 %2)))", "user": "573940e3e4b0cd1946bd106b"}, {"problem": 61, "code": "#(reduce conj (map (fn [k v] {k v}) %1 %2))", "user": "51647faae4b003cf19fdde3b"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "571172ece4b09c608db70446"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply merge (map #(hash-map \n                %1 %2) ks vs)))", "user": "53da059be4b0e771c302547e"}, {"problem": 61, "code": "(fn make-map [keys values]\n  (loop [keys keys\n         values values\n         res {}]\n   \t(if (or (empty? keys) (empty? values))\n      res\n      (let [k (first keys)\n            v (first values)]\n        (recur (rest keys) (rest values) (assoc res k v))))))", "user": "573f3ccfe4b05c31a32c083f"}, {"problem": 61, "code": ";(\n     (fn zmap [ks vs]\n       (into {} (map vector ks vs)))\n ;    [:foo :bar] [\"foo\" \"bar\" \"baz\"])", "user": "573632b7e4b0cd1946bd102f"}, {"problem": 61, "code": "(fn zipcat* [& cols]\n  (reduce #(assoc %1 (first %2) (second %2)) {} (apply map list cols)))", "user": "574af03ce4b02ea114799202"}, {"problem": 61, "code": "(fn [ks vs]\n  (loop [m {}\n         ks ks\n         vs vs]\n    (if (or (empty? ks)\n            (empty? vs))\n        m\n        (recur (assoc m (first ks) (first vs))\n               (rest ks)\n               (rest vs)))))", "user": "574c3a7ce4b02ea114799219"}, {"problem": 61, "code": "(fn [xs ys] \n  (apply hash-map (interleave xs ys)))", "user": "553e3260e4b0a04f792994eb"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "56efb3a3e4b04a395b9a0463"}, {"problem": 61, "code": "(fn [keys vals]\n  (loop [my-map {}\n         my-keys keys\n         my-vals vals]\n    (if (and my-keys my-vals)\n      (recur (assoc my-map (first my-keys) (first my-vals))\n             (next my-keys)\n             (next my-vals))\n      my-map)))", "user": "56fee4c0e4b08d47c97781b5"}, {"problem": 61, "code": "(fn [xs ys] (apply hash-map (mapcat vector xs ys)))", "user": "56098ccbe4b0053d1b86c7e4"}, {"problem": 61, "code": "#(apply array-map (interleave %1 %2))", "user": "574a9132e4b02ea1147991fd"}, {"problem": 61, "code": "#(apply hash-map (mapcat vector %1 %2))", "user": "57440f77e4b0c285004e8ab5"}, {"problem": 61, "code": "(fn [one two]\n  (apply assoc {} (interleave one two)))", "user": "57344edbe4b0cd1946bd1008"}, {"problem": 61, "code": "(fn [s1 s2]\n  (apply hash-map \n   (mapcat vector s1 s2)))", "user": "57408f87e4b05c31a32c0856"}, {"problem": 61, "code": "(fn [c1 c2] \n  (apply hash-map (mapcat #(list % %2) c1 c2)))", "user": "56bb652ae4b0f26550335953"}, {"problem": 61, "code": "(fn [ ks vs ]\n  (apply hash-map (interleave ks vs)))", "user": "574e7be7e4b02ea114799242"}, {"problem": 61, "code": "(fn zipmapIt\n  [vkeys vvals]\n  (reduce merge (map #(hash-map %1 %2) vkeys vvals)))", "user": "57131dfbe4b07c98581c3a98"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "574dfcb8e4b02ea11479923a"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map (fn [k v] [k v]) ks vs)))", "user": "54e540c1e4b024c67c0cf7f9"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "57275898e4b0c5bde472c13e"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "57297fb2e4b0c6e51e0d2b1c"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "57552f39e4b02ea1147992c1"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "573ddfc2e4b05c31a32c081b"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "57533bc1e4b02ea1147992a6"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "52e1c276e4b09f7907dd142b"}, {"problem": 61, "code": "(fn [v1 v2] (into {} (map vector v1 v2)))", "user": "573c813be4b0cd1946bd10c5"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "53ff602fe4b0de5c418485ff"}, {"problem": 61, "code": "(fn mappy [keylist vallist]\n  (if (or (empty? keylist) (empty? vallist))\n    {}\n    (merge (hash-map (first keylist) (first vallist)) (mappy (rest keylist) (rest vallist)))))", "user": "5705e404e4b0b0fb43fd0676"}, {"problem": 61, "code": "(fn [my-key my-vals]\n  (loop [ans {} k my-key v my-vals]\n    (if (or (empty? k) (empty? v)) ans\n      (recur (assoc ans (first k) (first v)) (rest k) (rest v)))))", "user": "53d977f1e4b0e771c302547a"}, {"problem": 61, "code": "#( apply hash-map ( interleave %1 %2 ) )", "user": "57561529e4b02ea1147992d3"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5751f2a2e4b02ea114799292"}, {"problem": 61, "code": "(fn [coll1 coll2] (apply hash-map (interleave coll1 coll2)))", "user": "5744d088e4b009280f9f2b41"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "56cd75bee4b0ea9b8538f74b"}, {"problem": 61, "code": "(fn map-constr [keyss valuess]\n  (reduce #(apply assoc %1 %2) {} (map #(vector %1 %2) keyss valuess)))", "user": "574f1c24e4b02ea114799255"}, {"problem": 61, "code": "(fn [k v]\n         (reduce #(merge % %2) {} (map #(assoc {} % %2) k v)))", "user": "570bd29be4b0b0fb43fd06c5"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "574c5e18e4b02ea11479921b"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "535558b9e4b04ce2eb3ed25a"}, {"problem": 61, "code": "(fn[x y]\n\t(reduce merge \n      (map (fn[a b] {a b}) x y)\n    )\n)", "user": "54283a7ae4b01498b1a71b2f"}, {"problem": 61, "code": "(fn [vk vv]\n  (apply hash-map (interleave vk vv)))", "user": "5756f7d7e4b02ea1147992e9"}, {"problem": 61, "code": "(fn mc [xs ys]\n  (apply hash-map (flatten (map vector xs ys))))", "user": "56069006e4b08b23635d3174"}, {"problem": 61, "code": "(fn [keys vals]\n  (apply hash-map (interleave keys vals)))", "user": "575cbe44e4b02ea114799374"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "57539e04e4b02ea1147992ab"}, {"problem": 61, "code": "(fn [ks vs]\n  (loop [k ks v vs m {}]\n    (if (or (empty? k) (empty? v))\n      m\n      (recur (next k) (next v) (assoc m (first k) (first v))))))", "user": "574abbfbe4b02ea114799200"}, {"problem": 61, "code": "(fn [keys vals] (apply hash-map (interleave keys vals)))", "user": "55096255e4b06e50f9beb116"}, {"problem": 61, "code": "(fn [keys vals]\n  (loop [k keys v vals m {}]\n    (if (or (empty? k) (empty? v))\n      m\n      (recur (rest k) (rest v) (assoc m (first k) (first v))))))", "user": "57462a4de4b009280f9f2b5d"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5746cb28e4b009280f9f2b68"}, {"problem": 61, "code": "(fn map-construction2 [x y]\n  (apply hash-map (interleave x y)))", "user": "574ed2f7e4b02ea11479924a"}, {"problem": 61, "code": "(fn [ks vs] (reduce #(assoc %1 (first %2) (second %2)) {} (map list ks vs)))", "user": "5745bb9fe4b009280f9f2b54"}, {"problem": 61, "code": "(fn [xs ys] (apply hash-map (interleave xs ys)))", "user": "57487084e4b009280f9f2b8c"}, {"problem": 61, "code": "(fn [a b]\n  (let [pairs (map #(hash-map %1 %2) a b)]\n    (apply merge pairs)))", "user": "50a00725e4b08df8156e9e46"}, {"problem": 61, "code": "(fn foo [k, v]\n  (if (or (empty? k) (empty? v)) {}\n    (conj {(first k) (first v)} (foo (rest k) (rest v)))))", "user": "5760715de4b08062f99a4e96"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "5372e7d9e4b06d7f452d9e02"}, {"problem": 61, "code": "#(into (hash-map) (map vector %1 %2))", "user": "574a546ee4b02ea1147991f6"}, {"problem": 61, "code": "(fn [x y]\n  (or (apply hash-map (interleave x y))\n  (into {} (map vector x y))))", "user": "5731e36be4b0cd1946bd0fc9"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "575ef4b6e4b08062f99a4e78"}, {"problem": 61, "code": ";; First solution\n;(fn [ks vs] \n;  (apply merge (map #(assoc {} %1 %2) ks vs)))\n\n#(apply hash-map (interleave %1 %2))", "user": "573118ebe4b0cd1946bd0fbd"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "57501c83e4b02ea11479926b"}, {"problem": 61, "code": "(fn [c1 c2] (into {} (mapv vector c1 c2)))", "user": "57642916e4b0994c1922fbee"}, {"problem": 61, "code": "(fn mc [v1 v2] \n  (loop [[k :as s1] v1, [v :as s2] v2, result {}]\n    (if (and k v) \n      (recur (rest s1) (rest s2) (assoc result k v))\n      result)))", "user": "572ec4dde4b0cd1946bd0f8d"}, {"problem": 61, "code": "#(into {} (map vector %1 %2) )", "user": "57614948e4b0994c1922fb83"}, {"problem": 61, "code": "(fn [seq1 seq2]\n  (loop [[x & xs] seq1\n         [y & ys] seq2\n         result {}]\n    (if (or (nil? x)\n            (nil? y))\n      result\n      (recur xs ys (assoc result x y)))))", "user": "52ea025ae4b09f7907dd14b5"}, {"problem": 61, "code": "(fn [keys vals]\n  (into {} (map vec (partition 2 (interleave keys vals)))))", "user": "57644395e4b0994c1922fbf2"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "56cad309e4b0ea9b8538f720"}, {"problem": 61, "code": "(fn [ks vs] (apply hash-map (interleave ks vs)))", "user": "5764457ae4b0994c1922fbf3"}, {"problem": 61, "code": "(fn zip-map [seq1 seq2]\n  (if (or (empty? seq1) (empty? seq2)) nil\n  (conj (hash-map (first seq1) (first seq2)) (zip-map (rest seq1) (rest seq2)) ))\n\n\n)", "user": "575ebba3e4b08062f99a4e70"}, {"problem": 61, "code": "(fn rmap [ks vs]\n  (reduce merge (map #(assoc {} %1 %2) ks vs)))", "user": "56fa2905e4b07572ad1a88be"}, {"problem": 61, "code": "#(into {} (map vector % %2) )", "user": "575bd5f9e4b02ea114799365"}, {"problem": 61, "code": "(fn [ks vs]\n  (reduce\n    (fn [c n] (assoc c (first n) (second n)))\n    {}\n    (map list ks vs)))", "user": "561d506ee4b064ca9f4b16aa"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "53bc10f5e4b047364c04450d"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "5763fa69e4b0994c1922fbe0"}, {"problem": 61, "code": "#(into {} (map (fn [k v] [k v]) %1 %2))", "user": "5742ec91e4b05c31a32c0883"}, {"problem": 61, "code": "#(apply array-map (interleave % %2))", "user": "56d91a53e4b0ea9b8538f7ee"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "575d16f8e4b02ea114799377"}, {"problem": 61, "code": "(fn [a b] (apply hash-map (interleave a b)))", "user": "56d902c3e4b0ea9b8538f7ed"}, {"problem": 61, "code": "#(into {} (apply map vector [%1 %2]))", "user": "56f974c0e4b07572ad1a88b1"}, {"problem": 61, "code": "(fn [coll1 coll2] (apply hash-map (interleave coll1 coll2)))", "user": "57202eb7e4b0c5bde472c090"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "5720ba36e4b0c5bde472c09c"}, {"problem": 61, "code": "#(loop [x %1 y %2 r {}]\n    (if (or (empty? x) (empty? y))\n      r\n      (recur (rest x) (rest y) (assoc r (first x) (first y)))\n      )\n    )", "user": "5763818ae4b0994c1922fbc7"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "576e3258e4b0979f89651574"}, {"problem": 61, "code": "(fn zm [keys values]\n  (loop\n    [rkeys keys\n     rvalues values\n     result {}]\n    (cond\n      (or (empty? rkeys) (empty? rvalues)) result\n      :else (recur (rest rkeys) (rest rvalues) (assoc result (first rkeys) (first rvalues)))\n      )\n    )\n  )", "user": "576d24ede4b0979f8965155b"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {}\n        (map vector ks vs)))", "user": "576da825e4b0979f8965156c"}, {"problem": 61, "code": "#(reduce (fn [accum x] (apply assoc accum x)) {} (map vector %1 %2))", "user": "5764cc01e4b0994c1922fc05"}, {"problem": 61, "code": "(fn __ [k v] (into {} (map #(hash-map %1 %2) k v)))", "user": "575b3e9be4b02ea11479935b"}, {"problem": 61, "code": "(fn [coll-a coll-b]\n  (reduce (fn [acc [a b]] (assoc acc a b)) {} (map (fn [a b] [a b]) coll-a coll-b))\n  )", "user": "55fbc657e4b0f488688e0666"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "50c95c4fe4b0bed41a12298f"}, {"problem": 61, "code": "(fn [s1 s2] (apply hash-map (interleave s1 s2)))", "user": "57763002e4b0979f89651631"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "576a8d02e4b0a07e8fc18117"}, {"problem": 61, "code": "(fn [keys vals] \n  (loop [map {} ks (seq keys) vs (seq vals)] \n    (if (and ks vs) \n      (recur (assoc map (first ks) (first vs)) \n             (next ks) \n             (next vs)) \n      map)\n    )\n  )", "user": "57750460e4b0979f8965160c"}, {"problem": 61, "code": "(fn [keys values]\n  (into {} (map (fn [x y] [x y]) keys values)))", "user": "577629abe4b0979f8965162e"}, {"problem": 61, "code": "(fn build-map [keys values]\n  (into {} (map #(vector %1 %2) keys values)))", "user": "5776e21de4b0979f89651642"}, {"problem": 61, "code": "(fn\n  [keys values]\n  (loop [keys keys values values m {}]\n    (if (and  (not (empty? keys)) (not (empty? values)))\n      (recur (rest keys) (rest values) (assoc m (first keys) (first values)))\n      m\n      )\n    \n))", "user": "5772ddb0e4b0979f896515d4"}, {"problem": 61, "code": "#(into {} (apply map vector %&))", "user": "57609d91e4b08062f99a4e9b"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "577829f9e4b0979f8965165a"}, {"problem": 61, "code": "(fn [c1 c2] (into {} (map #(hash-map %1 %2) c1 c2)))", "user": "51319a53e4b06942423563c8"}, {"problem": 61, "code": "(fn my-zipmap\n  [keyz values]\n  (loop [out []\n         xs keyz\n         ys values]\n    (if (or (empty? xs) (empty? ys))\n      (apply array-map out)\n      (recur (conj out (first xs) (first ys)) (rest xs) (rest ys)))\n    )\n  )", "user": "560d4994e4b05f002753df3c"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5776f39de4b0979f89651643"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "57780e4fe4b0979f89651657"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5761513fe4b0994c1922fb87"}, {"problem": 61, "code": "#(loop [i %1 j %2 result '()]\n   (if (or (empty? i) (empty? j))\n     (apply hash-map result)\n     (recur (rest i) (rest j) (concat result [(first i) (first j)])))\n)", "user": "560c37b5e4b05f002753df2e"}, {"problem": 61, "code": "#( into {} (map vector %1 %2))", "user": "57822efce4b0d36ec5835e91"}, {"problem": 61, "code": "#(apply assoc {} (flatten (map list %1 %2)))", "user": "56c560ede4b05cc29241eea6"}, {"problem": 61, "code": "(fn [k v]\n  (loop [kk k vv v ret {}]\n    (if (or (empty? kk) (empty? vv))\n      ret\n      (recur (rest kk) (rest vv) (assoc ret (first kk) (first vv))))))", "user": "5151d574e4b03e678e393ae0"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "575dda55e4b02ea11479938c"}, {"problem": 61, "code": "#(into {} (mapv vector %1 %2))", "user": "5776385fe4b0979f89651632"}, {"problem": 61, "code": "(fn f [col c1 c2] (if-not (or (empty? c1) (empty? c2)) (f (assoc col (first c1) (first c2)) (rest c1) (rest c2)) col)) {}", "user": "576df252e4b0979f8965156f"}, {"problem": 61, "code": "#(apply merge (map hash-map %1 %2))", "user": "576b4e6be4b0a07e8fc1812b"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "4f037faf535dcb61093f6af8"}, {"problem": 61, "code": "(fn [c1 c2]\n  (apply hash-map (flatten (map #(identity [%1 %2]) c1 c2))))", "user": "576a972ce4b0a07e8fc1811a"}, {"problem": 61, "code": "(fn my-zipmap [ks vs]\n    (into {} (map (fn [k v] [k v]) ks vs)))", "user": "4dfe5a93535d04ed9115e786"}, {"problem": 61, "code": "(fn [x y](into {} (map hash-map x y)))", "user": "5756e218e4b02ea1147992e5"}, {"problem": 61, "code": "(fn [xs ys] (reduce into {} (map (partial assoc {}) xs ys)))", "user": "57615a22e4b0994c1922fb88"}, {"problem": 61, "code": "(fn [keys values]\n  (->> (map vector keys values)\n     (apply concat)\n     (apply hash-map)))", "user": "5180c69ae4b06b8caf33fa00"}, {"problem": 61, "code": "#(into {} (map hash-map % %2))", "user": "55c4cda5e4b0e31453f649a5"}, {"problem": 61, "code": "#(reduce conj {} (map vector %1 %2))", "user": "55b6a63ae4b01b9910ae299b"}, {"problem": 61, "code": "#(apply array-map (interleave % %2))", "user": "577832f4e4b0979f8965165b"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5776558ee4b0979f89651633"}, {"problem": 61, "code": "(fn makeMap [k v]\n  (into {}\n    (map #(vector %1 %2) k v)\n  )\n)", "user": "571aae1fe4b07c98581c3b5a"}, {"problem": 61, "code": "(fn [ks vls]\n  (reduce into {} (map #(hash-map %1 %2) ks vls)))", "user": "56f53962e4b046a417f9206c"}, {"problem": 61, "code": "#(apply hash-map (mapcat vector %1 %2))", "user": "578d230fe4b0ebec4cfb7564"}, {"problem": 61, "code": "(fn mm [ a b]\n\n  (let [tr {}]\n\n    (into {} (map #(assoc tr %1 %2) a b))))", "user": "548f3ed8e4b0e286459a1236"}, {"problem": 61, "code": "#(apply hash-map (mapcat vector %1 %2))", "user": "57934c67e4b0e215f87e8456"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "571346c0e4b07c98581c3a9b"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "577fa91ee4b0d36ec5835e6a"}, {"problem": 61, "code": "(fn create-map [ks vs] \n  (if (empty? ks) {}\n    (if (empty? vs) {}\n      (assoc (create-map (rest ks) (rest vs)) (first ks) (first vs)))))", "user": "578cf84ce4b0ebec4cfb7562"}, {"problem": 61, "code": "(comp (partial into {}) (partial map vector))", "user": "55ede35ce4b0121d4835fde1"}, {"problem": 61, "code": "#(apply array-map (interleave % %2))", "user": "577ab41fe4b0d3393e5deb05"}, {"problem": 61, "code": "#(reduce (fn [x y] (assoc x (y 0) (y 1))) {} (map (fn [x y] (vector x y)) %1 %2))", "user": "578b140be4b0ebec4cfb7545"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "577c3da9e4b0c8d87281f6b9"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "56c21eafe4b05cc29241ee7e"}, {"problem": 61, "code": "(fn [k v] (into {}(for [i (range (min (count k) (count v)))] [(nth k i) (nth v i)])))", "user": "5751fda4e4b02ea114799295"}, {"problem": 61, "code": "(fn [keys vals] (into {} (map vector keys vals)))", "user": "57915ba4e4b0ebec4cfb75ba"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5798205ce4b039eba2ecb10e"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "57982bace4b039eba2ecb10f"}, {"problem": 61, "code": "(fn my-zipmap [s1 s2] (if (and (not (nil? (first s1))) (not (nil? (first s2)))) (conj {(first s1) (first s2)} (my-zipmap (rest s1) (rest s2)))))", "user": "5795dbe0e4b0e215f87e848c"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5672925fe4b05957ce8c6114"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "579c8ad1e4b05b1deef9ae0c"}, {"problem": 61, "code": "#(apply hash-map (flatten (map vector % %2)))", "user": "578fc072e4b0ebec4cfb759a"}, {"problem": 61, "code": "(fn [a b] (reduce #(assoc %1 (first %2) (second %2)) {} (map vector a b)))", "user": "5691ef12e4b0dcc4269f40f8"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "571edeeae4b0145328a7629b"}, {"problem": 61, "code": "(fn [col1 col2] (apply hash-map (interleave col1 col2)))", "user": "5790e62ae4b0ebec4cfb75b0"}, {"problem": 61, "code": "(fn\n    [xs ys]\n    (apply hash-map\n      (interleave xs ys)\n    )\n  )", "user": "5784e177e4b0ebec4cfb74cf"}, {"problem": 61, "code": "(fn[x y] (into {} (map #(assoc {} %1 %2) x y)))", "user": "54ce541de4b057c6fda3a2ac"}, {"problem": 61, "code": "#(into {} (apply map vector %&))", "user": "57717915e4b0979f896515b3"}, {"problem": 61, "code": "(fn [keys vals]\n  (loop [map {}\n         ks (seq keys)\n         vs (seq vals)]\n    (if (and ks vs)\n      (recur (assoc map (first ks) (first vs))\n             (next ks)\n             (next vs))\n      map)))", "user": "57147cd9e4b07c98581c3abf"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "579e15a6e4b05b1deef9ae20"}, {"problem": 61, "code": "#(apply assoc {}\n        (interleave %1 %2))", "user": "5786c182e4b0ebec4cfb74fd"}, {"problem": 61, "code": "(fn [x y]\n  (apply hash-map (interleave x y)))", "user": "572a856be4b0f4d77e65123b"}, {"problem": 61, "code": "(fn [ke va]\n (->> (map hash-map ke va)\n      (into {})))", "user": "5783c505e4b0ebec4cfb74bc"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "578e535de4b0ebec4cfb7580"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "577202d2e4b0979f896515c0"}, {"problem": 61, "code": "(fn f [x y]\n  (loop [x x\n         y y\n         result {}]\n    (if (or (empty? x) (empty? y))\n      result\n      (recur (rest x) (rest y) (assoc result (first x) (first y))))))", "user": "575fbe58e4b08062f99a4e87"}, {"problem": 61, "code": "(fn [r s] \n  (apply hash-map (interleave r s)))", "user": "57a13745e4b0c3d858beb8e3"}, {"problem": 61, "code": "(fn [k v]\n   (apply hash-map (interleave k v)))", "user": "51e7c1f1e4b0a3e081b8cbef"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "57a310b4e4b0c3d858beb90c"}, {"problem": 61, "code": "(fn [keys vals]\n  (loop [res {} k keys v vals]\n    (if (and k v)\n      (recur (assoc res (first k) (first v)) (next k) (next v))\n      res)))", "user": "5799b260e4b05b1deef9adc8"}, {"problem": 61, "code": "(fn [keys vals] (apply assoc {} (interleave keys vals)))", "user": "5227eacee4b0186687e23a5e"}, {"problem": 61, "code": "#(loop [i 0\n        m {}]\n   (if (and (< i (count %1))\n            (< i (count %2)))\n   \t(recur (inc i) (assoc m (get %1 i) (get %2 i)))\n    m))", "user": "57a4f5cae4b0a966079561f0"}, {"problem": 61, "code": "(fn [keys vals] (apply hash-map (interleave keys vals)))", "user": "5797d4bae4b039eba2ecb107"}, {"problem": 61, "code": "(comp\n  (partial into {})\n  (partial map vector))", "user": "54c611d1e4b045293a27f627"}, {"problem": 61, "code": "#(into {} (map vector %1 %2 ))", "user": "579d9601e4b05b1deef9ae18"}, {"problem": 61, "code": "(fn [ks vs](into {} (map #(vector %1 %2) ks vs)))", "user": "56903cb9e4b0dcc4269f40eb"}, {"problem": 61, "code": "(fn [ks vs]\n  (reduce #(assoc %1 (first %2) (second %2))\n          {}\n          (map list ks vs)))", "user": "57aa4775e4b0b8559636fc6b"}, {"problem": 61, "code": "(fn [k v]\n    (loop [keys k\n           vals v\n           res {}]\n      (if (or (empty? keys) (empty? vals)) res\n          (recur (rest keys) (rest vals) (assoc res (first keys) (first vals))))))", "user": "57aa290de4b0b8559636fc65"}, {"problem": 61, "code": "(fn [ks vs]\n  (reduce (fn [m [k v]] (assoc m k v)) \n          {} \n          (partition 2 (interleave ks vs))))", "user": "5799ff45e4b05b1deef9add1"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "57873017e4b0ebec4cfb7503"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {}\n        (map vector ks vs)))", "user": "56b965d9e4b0f26550335931"}, {"problem": 61, "code": "(fn f [ks vs]\n  (->> (interleave ks vs)\n       (partition 2)\n       (reduce (fn [m [k v]] (assoc m k v)) {})))", "user": "57adbe7ee4b0b8559636fca0"}, {"problem": 61, "code": "#(into {}(map hash-map %1 %2))", "user": "57752a2de4b0979f89651613"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5075e374e4b09049dea827a5"}, {"problem": 61, "code": "(fn [ks1 ks2]\n  (loop [[k1 & r1] ks1 [k2 & r2] ks2 result {}]\n    (if-not (and k1 k2)\n      result \n      (recur r1 r2 (assoc result k1 k2)))))", "user": "57afd36de4b0fbc9809a273c"}, {"problem": 61, "code": "#(into {} (map (partial assoc {}) %1 %2))", "user": "548b7db8e4b0e286459a11fd"}, {"problem": 61, "code": "(fn [list1 list2] (into (sorted-map) (map vector list1 list2)))", "user": "57aa103be4b0b8559636fc64"}, {"problem": 61, "code": "(fn [k v]\n  (apply assoc {} (interleave k v)))", "user": "56313ff1e4b0bfe05bf1178f"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "57a9e274e4b0b8559636fc5d"}, {"problem": 61, "code": "(fn [x y]\n    (into {} (map vector x y)))", "user": "4e837808535db62dc21a62d9"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "579ea15ee4b05b1deef9ae2a"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "57b3efb1e4b0fbc9809a278a"}, {"problem": 61, "code": "(fn\n  [v1 v2]\n  (loop [c1 v1 c2 v2 o {}]\n    (cond (or (empty? c1) (empty? c2)) o\n          :else (recur (rest c1) (rest c2) (assoc o (first c1) (first c2))))))", "user": "57acee37e4b0b8559636fc94"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "57b4779de4b0fbc9809a279a"}, {"problem": 61, "code": "(fn [ks vs] (let [kvs (map list ks vs)]\n              (reduce (fn [a y]\n                        (assoc a (first y) (last y))\n                        ) {} kvs)\n              ))", "user": "57b8b008e4b0fbc9809a27e6"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "57b55290e4b0fbc9809a27a9"}, {"problem": 61, "code": "(fn [ks vs]\n  (->> (map hash-map ks vs)\n       (reduce merge)))", "user": "56eab346e4b04a395b9a0410"}, {"problem": 61, "code": "(fn my-zip\n  [xs ys]\n  (apply hash-map (flatten (map #(list %1 %2) xs ys))))", "user": "568bd448e4b0dcc4269f40a9"}, {"problem": 61, "code": "(fn [vs ks]\n  (reduce \n   #(assoc-in %1 (list (first %2)) (second %2)) \n   {} \n   (partition 2 (interleave vs ks))))", "user": "57af41bce4b0fbc9809a2731"}, {"problem": 61, "code": "(fn zm \n  ([a b] (zm a b {}))\n  ([a b m]\n    (if (or (empty? a) (empty? b))\n      m\n      (zm (rest a) (rest b) (assoc m (first a) (first b))))))", "user": "4f4aa932e4b0d56e7bb92c14"}, {"problem": 61, "code": "(fn [s1 s2] (apply merge (map (partial assoc {}) s1 s2)))", "user": "57a0f256e4b0c3d858beb8dd"}, {"problem": 61, "code": "(fn[a b] (reduce #(assoc %1 (first %2) (second %2)) {} (map list a b)))", "user": "57b9fc74e4b0fbc9809a27fb"}, {"problem": 61, "code": "(fn [a b] (into {} (map vector a b)))", "user": "57b99d48e4b0fbc9809a27f2"}, {"problem": 61, "code": "(fn [k v] (into (sorted-map) (map #(vec (list %1 %2)) k v)))", "user": "57b9d21fe4b0fbc9809a27f7"}, {"problem": 61, "code": "(fn test [seq-1 seq-2]\n  (reduce (fn [acc [x y]]\n            (assoc acc x y))\n          {}\n          (map (fn [a b]\n                 [a b])\n               seq-1\n               seq-2)))", "user": "579332c2e4b0e215f87e8452"}, {"problem": 61, "code": "(fn [c1 c2]\n  (loop [r {}\n         c1 c1\n         c2 c2]\n    (if (or (empty? c1) (empty? c2))\n      r\n      (recur (into r {(first c1) (first c2)}) (rest c1) (rest c2)))))", "user": "55ff562fe4b00f4cabc57660"}, {"problem": 61, "code": "#(apply assoc {} \n   (interleave %1 \n               %2))", "user": "57a1ef58e4b0c3d858beb8f3"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "57ac7710e4b0b8559636fc88"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "55da18d5e4b0e31453f64ad1"}, {"problem": 61, "code": "(fn [a b]\n  (apply hash-map (interleave a b)))", "user": "57bd960fe4b05aa3c4741c52"}, {"problem": 61, "code": "(fn [k v] (apply hash-map (apply concat (map #(vector %1 %2) k v))))", "user": "57c3451fe4b05aa3c4741cbd"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "57b45257e4b0fbc9809a2796"}, {"problem": 61, "code": "(fn [k v]\n  (into {}\n     (map\n      \t#(hash-map % %2) k v))\n)", "user": "57a88e24e4b0a9660795621f"}, {"problem": 61, "code": "#(into {} (map vector % %2))\n;(fn [a b] (into {} (map #(hash-map % %2) a b)))", "user": "57ba55c1e4b0fbc9809a2801"}, {"problem": 61, "code": "(fn [coll1 coll2] (reduce (fn [my-map pair] (assoc my-map (first pair) (second pair))) {} (#(partition 2 (interleave %1 %2)) coll1 coll2)))", "user": "57c0917be4b05aa3c4741c95"}, {"problem": 61, "code": "#(into {} (map hash-map % %2))", "user": "566ff0a1e4b0a866af6896ec"}, {"problem": 61, "code": "#(loop [ks %1 vs %2 nmap {}]\n   (if (and (seq ks) (seq vs))\n     (recur\n      (rest ks)\n      (rest vs)\n      (assoc nmap (first ks) (first vs)))\n     nmap))", "user": "574eb3b1e4b02ea114799247"}, {"problem": 61, "code": "(fn [a b]\n  (let [n (apply min (map count [a b]))]\n    (reduce\n     #(assoc %1 (a %2) (b %2))\n     {}\n     (range n))))", "user": "57395f32e4b0cd1946bd1070"}, {"problem": 61, "code": "(fn [s1 s2] (apply assoc {} (interleave s1 s2)))", "user": "57addbcce4b0b8559636fca3"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply hash-map (interleave ks vs)))", "user": "579601c8e4b0e215f87e8492"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "574ff497e4b02ea114799266"}, {"problem": 61, "code": "#(loop\n   [ks %1 vs %2 res {}]\n   (if (or (empty? ks) (empty? vs))\n     res\n     (recur (rest ks) (rest vs)\n            (assoc res (first ks) (first vs)))))", "user": "55ed37ebe4b0121d4835fdd6"}, {"problem": 61, "code": "(fn [k v] (apply hash-map (mapcat #(vector %1 %2) k v )))", "user": "57c7cef5e4b05aa3c4741d0d"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "55568a7de4b0deb715856e1c"}, {"problem": 61, "code": "#(into {} (map vec (partition-all 2 (interleave %1 %2))))", "user": "57c796b4e4b05aa3c4741d08"}, {"problem": 61, "code": "(fn[a b] (into {} (map #(hash-map %1 %2) a b)))", "user": "563c6ebae4b0bfe05bf11834"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "515310b4e4b0d6806ecd26fb"}, {"problem": 61, "code": "(fn [array-1 array-2]\n  (into {} (map (partial assoc {}) array-1 array-2)))", "user": "57c2d66ae4b05aa3c4741cb9"}, {"problem": 61, "code": "(fn zip\n  [keys vals]\n  (reduce\n    #(apply (partial assoc %1) %2)\n    {} (map list keys vals)))", "user": "57b1b8c8e4b0fbc9809a2756"}, {"problem": 61, "code": "(fn [x y]\n  (apply assoc {} (interleave x y)))", "user": "56990b68e4b0542e1f8d143a"}, {"problem": 61, "code": "(fn [k v] (loop [k k v v result {}]\n            (if (and (seq k) (seq v))\n              (recur (rest k) (rest v) (assoc result (first k) (first v)))\n              result\n            )\n          )\n)", "user": "57c7e7d9e4b05aa3c4741d0f"}, {"problem": 61, "code": "(fn zip-map [ks vs]             ;\u6b64\u5904\u5fc5\u987b\u8981\u4f7f\u7528ks vs\u544a\u8bc9clojure\u662f\u952e\u5bf9\u503c\u5f62\u5f0f\u7684  interleave\u662f\u5c06\u7b2c\u4e00\u4e2a\u53c2\u6570\u548c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u8fdb\u884c\u952e\u5bf9\u8f6c\u6362\uff0c\u7136\u540e\u7528apply hash-map\u5c06\u4ed6\u4eec\u88c5\u8fdb{}\n  (apply hash-map (interleave ks vs)))", "user": "57c500f9e4b05aa3c4741cda"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "57c7a8b5e4b05aa3c4741d09"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "57b35a19e4b0fbc9809a277d"}, {"problem": 61, "code": "(fn createmap [key value]\n  (apply hash-map (interleave key value)))", "user": "57bc9375e4b05aa3c4741c43"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "57cd7498e4b0c746388ab897"}, {"problem": 61, "code": "(fn f ([left right] (f left right {}))\n([left right result] \n\t(if (some empty?  [left right])\n\t\tresult\n\t\t(recur (rest left) (rest right) (conj {(first left) (first right)} result))\n\t)\n\t)\n)", "user": "57c99a45e4b05aa3c4741d31"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "57c45e64e4b05aa3c4741ccf"}, {"problem": 61, "code": "(fn f\n  ([k v] (f {} k v))\n  ([m [k & ks] [v & vs]]\n   (if (and k v)\n     (f (assoc m k v) ks vs)\n     m)))", "user": "57a0b341e4b0c3d858beb8d4"}, {"problem": 61, "code": "(fn [ks vs]\n  (reduce conj {} (mapv (fn [k v] (assoc {} k v)) ks vs)))", "user": "56cf115de4b0ea9b8538f765"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "56327168e4b0bfe05bf117a5"}, {"problem": 61, "code": "(fn [ks vs] (apply assoc {} (interleave ks vs)))", "user": "57c0393be4b05aa3c4741c90"}, {"problem": 61, "code": "(fn [first-seq second-seq] \n  (apply hash-map (interleave first-seq second-seq)))", "user": "56020b3fe4b04bb52996e19b"}, {"problem": 61, "code": "#(loop [x %1\n        y %2\n        acc {}]\n   (if (some empty? [x y])\n     acc\n     (recur (rest x) (rest y) (assoc acc (first x) (first y)))))", "user": "57155980e4b07c98581c3ad7"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "57b19fa1e4b0fbc9809a2754"}, {"problem": 61, "code": "(fn [ks vs]\n  (reduce (fn [nmap [k v]] (assoc nmap k v)) {}\n  (map #(vector %1 %2) ks vs)))", "user": "5272645de4b03e8d9a4a742c"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "57b8f784e4b0fbc9809a27ea"}, {"problem": 61, "code": "(fn build-map [vk vv]\n  (let [b (fn anon [m ks vs]\n            (if (or (empty? ks) (empty? vs)) m\n              (let [k (first ks)\n                    v (first vs)]\n                (anon (conj m [k v]) (rest ks) (rest vs)))))]\n    (b {} vk vv)))", "user": "57d1d6c8e4b0bd073c202370"}, {"problem": 61, "code": "(fn map-const\n  [f s]\n  (reduce #(assoc %1 (first %2) (second %2)) {} (map vector f s)))", "user": "57d0cd58e4b0bd073c20235e"}, {"problem": 61, "code": "(fn [xs1 xs2] (into {} (map #(vector %1 %2) xs1 xs2)))", "user": "57c6aa0be4b05aa3c4741cf7"}, {"problem": 61, "code": "#(reduce merge (map (fn [a b] {a b}) %1 %2))", "user": "57c94c6ee4b05aa3c4741d2d"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "57c62aece4b05aa3c4741cf1"}, {"problem": 61, "code": "(fn [k m] (reduce into {} (apply map hash-map [k m])))", "user": "57d1a0e6e4b0bd073c20236d"}, {"problem": 61, "code": "(fn zip-map [key-seq value-seq]\n  (if (or (empty? key-seq) (empty? value-seq))\n    {}\n    (assoc (zip-map (rest key-seq) (rest value-seq)) (first key-seq) (first value-seq))))", "user": "57d9bca1e4b0bd073c202405"}, {"problem": 61, "code": "#(apply sorted-map (interleave %1 %2))", "user": "57dda21be4b0bd073c202445"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "57b35772e4b0fbc9809a277c"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "57ccedaae4b0c746388ab88e"}, {"problem": 61, "code": "(fn [l1 l2]\n  (loop [l1 l1 l2 l2 r {}]\n    (if (or (empty? l1) (empty? l2)) r\n      (recur (rest l1) (rest l2) (conj r [(first l1) (first l2)])))))", "user": "57d9f603e4b0bd073c20240a"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "56df9203e4b0ca2494a095fc"}, {"problem": 61, "code": "(fn [& args] (into {} (apply map hash-map args)))", "user": "5707abfce4b0b0fb43fd068d"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "57d9cae9e4b0bd073c202409"}, {"problem": 61, "code": "(fn [ks vs]\n  (loop [m {}\n         kk (seq ks)\n         vv (seq vs)]\n    (if (and (first kk) (first vv))\n      (recur (assoc m (first kk) (first vv))\n             (next kk)\n             (next vv))\n      m))\n  )", "user": "57bfffc7e4b05aa3c4741c8a"}, {"problem": 61, "code": "#(apply sorted-map (interleave %1 %2))", "user": "57e139f6e4b0bfb2137f5a6c"}, {"problem": 61, "code": "#(->> (interleave %1 %2) (apply hash-map))", "user": "57e0f30ae4b0bfb2137f5a66"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply hash-map (interleave ks vs)))", "user": "56f9c7c6e4b07572ad1a88ba"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "57dd47f4e4b0bd073c20243e"}, {"problem": 61, "code": "(fn [-s1 -s2]\n    (loop [s1 -s1 s2 -s2 nw {}]\n          (if (or (empty? s1) (empty? s2))\n              nw\n              (recur (rest s1) (rest s2) (conj {(first s1) (first s2)} nw)))))", "user": "57e3f709e4b0bfb2137f5aaf"}, {"problem": 61, "code": "(fn mymap2 [c1 c2]\n  (into {} (map vector c1 c2)))", "user": "5785c1d4e4b0ebec4cfb74e1"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "57e33f6fe4b0bfb2137f5a96"}, {"problem": 61, "code": "(fn [va vb]\n  (loop [result {} ra va rb vb]\n    (cond (empty? ra) result\n          (empty? rb) result\n          :else       (recur (conj result [(first ra) (first rb)]) (rest ra) (rest rb))\n)\n)\n)", "user": "57d7c894e4b0bd073c2023de"}, {"problem": 61, "code": "#(apply hash-map (mapcat vector %1 %2))", "user": "53874820e4b06839e8705f1b"}, {"problem": 61, "code": "(fn [xs ys] (apply merge (map hash-map xs ys)))", "user": "5705f569e4b0b0fb43fd0677"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "57df309ee4b0bd073c20245f"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "57e6997ee4b0bfb2137f5af0"}, {"problem": 61, "code": "#(apply hash-map (mapcat identity (map (fn [x y] [x y]) %1 %2)))", "user": "57ec3d29e4b0bfb2137f5b77"}, {"problem": 61, "code": "(fn [keys vals]\n   (apply hash-map (interleave keys vals)))", "user": "57ee804ee4b0bfb2137f5bbb"}, {"problem": 61, "code": "(fn [ks vs]\n  (reduce into {} (map #(assoc {} %1 %2) ks vs)))", "user": "574e84e0e4b02ea114799243"}, {"problem": 61, "code": "(fn [as bs]\n    (let [max-pos (min (count as) (count bs)) ]\n      (loop [pos 0 m {}]\n        (if (= pos max-pos)\n          m\n          (recur (inc pos) (assoc m (nth as pos) (nth bs pos))) ))))", "user": "57c176abe4b05aa3c4741ca2"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "57f0f7b8e4b0bfb2137f5bfe"}, {"problem": 61, "code": "(fn [& args]\n    (let [\n          [keys vals] args\n          result (into {} (map vector keys vals))\n         ]\n      result\n    )\n  )", "user": "532f7e12e4b019098a6f8b4e"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "56887bcbe4b0dcc4269f406a"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "57eb7a97e4b0bfb2137f5b62"}, {"problem": 61, "code": "(fn \n  [ikeys ivals]\n  (loop [xs ikeys ys ivals acc {}]\n    (if (or (empty? xs) (empty? ys))\n      acc\n      (recur (rest xs) (rest ys) (assoc acc (first xs) (first ys))))))", "user": "57995ac1e4b05b1deef9adbf"}, {"problem": 61, "code": "#(reduce conj {} (map hash-map % %2))", "user": "57596ba7e4b02ea11479931a"}, {"problem": 61, "code": "(fn mzipmap [keys values]\n  (loop [k keys v values m {}]\n    (if (or (zero? (count k)) (zero? (count v)))\n      m\n      (recur\n        (rest k)\n        (rest v)\n        (assoc m (first k) (first v))))))", "user": "57ed2574e4b0bfb2137f5b93"}, {"problem": 61, "code": "(fn [x y] (apply conj (map #(hash-map %1 %2) x y)))", "user": "574a71b7e4b02ea1147991fb"}, {"problem": 61, "code": "(fn [ks values]\n  (apply hash-map (interleave ks values)))", "user": "5746061ae4b009280f9f2b5b"}, {"problem": 61, "code": "(fn [ks vs] (apply merge (map #(hash-map %1 %2) ks vs)))", "user": "57db2369e4b0bd073c20241f"}, {"problem": 61, "code": "(fn\n    [ks vs]\n(into {} (map #(assoc {} %1 %2) ks vs ))\n    \n    )", "user": "56a358d0e4b0542e1f8d14c9"}, {"problem": 61, "code": "(comp (partial apply  hash-map) interleave)", "user": "56bfd8ade4b060a8e693e3a2"}, {"problem": 61, "code": "#(->> %& (apply map vector) (reduce (fn [m [k v]] (assoc m k v)) {}) )", "user": "57c1b32be4b05aa3c4741ca4"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "57f6e666e4b0d3187e9008f2"}, {"problem": 61, "code": "(fn [x y] (into {} (map #(vector % %2) x y)))", "user": "56a44067e4b0542e1f8d14da"}, {"problem": 61, "code": "(fn [ks vs]\n  (loop [[k & kk] ks [v & vv] vs m {}]\n    (if (or (empty? kk) (empty? vv)) (assoc m k v)\n      (recur kk vv (assoc m k v)))))", "user": "57f85b36e4b0d3187e900924"}, {"problem": 61, "code": "(  fn[keys vals] (loop [map {}\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map)))", "user": "57c6bca1e4b05aa3c4741cf8"}, {"problem": 61, "code": "(fn [k v]\n  (loop [k k v v \n         result {}]\n    (if (or (empty? k) (empty? v))\n      result\n      (recur (rest k) (rest v) (conj result [(first k) (first v)]))\n    )))", "user": "57e396cde4b0bfb2137f5a9e"}, {"problem": 61, "code": "(fn a [lst1 lst2]\n  (apply merge (map hash-map lst1 lst2) ))", "user": "57fc08d8e4b0d3187e900988"}, {"problem": 61, "code": "(fn [keys values]\n  (reduce (fn [map [k v]]\n            (assoc map k v))\n          {}\n          (map (fn [k v] (list k v)) keys values)))", "user": "57f7c74ee4b0d3187e900902"}, {"problem": 61, "code": "(fn map-construction\n  [a b]\n  (apply hash-map (interleave a b)))", "user": "57f8153de4b0d3187e900916"}, {"problem": 61, "code": "(fn create [a b]\n  (apply hash-map (mapcat list a b)))", "user": "57fc34f0e4b0d3187e90098e"}, {"problem": 61, "code": "(fn [k v]\n  (into {} (map vector k v)))", "user": "57485efee4b009280f9f2b8a"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "566b57e9e4b0a866af6896ad"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "573d8658e4b05c31a32c0814"}, {"problem": 61, "code": "(fn [coll1 coll2]\n  (apply merge (map (fn [k v] {k v}) coll1 coll2)))", "user": "57f80350e4b0d3187e90090c"}, {"problem": 61, "code": "(fn [lsta lstb]\n  (loop [lsta lsta\n         lstb lstb\n         res {}]\n    (if (or (empty? lsta) (empty? lstb))\n      res\n      (recur (rest lsta) (rest lstb) (conj res {(first lsta) (first lstb)})))))", "user": "57f8104ce4b0d3187e900910"}, {"problem": 61, "code": "(fn mp[a b]\n  (loop [a a\n         b b\n         c []]\n    (if (or (empty? a)(empty? b))\n      (into (sorted-map) c)\n      (recur(rest a)(rest b)(conj c [(first a)(first b)])))))", "user": "57f814fbe4b0d3187e900911"}, {"problem": 61, "code": "(fn [keys vals]\n  [keys vals]\n  (loop [map {}\n         ks (seq keys)\n         vs (seq vals)]\n    (if (and ks vs)\n      (recur (assoc map (first ks) (first vs))\n             (next ks)\n             (next vs))\n      map)))", "user": "57e79d8ee4b0bfb2137f5afe"}, {"problem": 61, "code": "#(apply assoc {} \n        (interleave %1 %2))", "user": "55cc6c35e4b0e31453f64a10"}, {"problem": 61, "code": "(fn [xs ys] (apply (partial assoc {})(interleave xs ys)))", "user": "57f9011ee4b0d3187e900935"}, {"problem": 61, "code": "(fn [a b]\n  (apply hash-map (interleave a b)))", "user": "57f81524e4b0d3187e900913"}, {"problem": 61, "code": "(fn [a b](into {} (map-indexed (fn [i x] (let [v (get b i)] (when-not (nil? v) {x v}))) a)))", "user": "57efb389e4b0bfb2137f5bdb"}, {"problem": 61, "code": "#(apply hash-map (mapcat list %1 %2))", "user": "5800edaae4b0a837a8b30c48"}, {"problem": 61, "code": "(fn [vec1 vec2]\n (apply merge (map (fn [k v]\n                           {k v})\n                         vec1\n                         vec2)))", "user": "57f8151ce4b0d3187e900912"}, {"problem": 61, "code": "(fn [lst1 lst2]\n  (loop [lst1 lst1\n         lst2 lst2\n         map {}]\n    (if (or (empty? lst1) (empty? lst2))\n      map\n      (recur (rest lst1) (rest lst2) (conj map {(first lst1) (first lst2)})))))", "user": "57f81549e4b0d3187e900918"}, {"problem": 61, "code": "(fn zpmp\n  [key-lst val-lst]\n  (apply hash-map (interleave key-lst val-lst)))", "user": "57f81534e4b0d3187e900915"}, {"problem": 61, "code": "(fn [lst-keys lst-values]\n  (apply hash-map (interleave lst-keys lst-values))\n  )", "user": "57f81045e4b0d3187e90090f"}, {"problem": 61, "code": "(fn\n  [a b]\n\t(apply hash-map (interleave a b))\n  )", "user": "57f81532e4b0d3187e900914"}, {"problem": 61, "code": "(fn\n  [x y]\n  (loop [x x\n         y y\n         r {}]\n       (cond\n         (empty? y)  r\n         (empty? x) r\n         :else (recur (rest x) (rest y) (assoc r (first x) (first y))))))", "user": "57fedf07e4b0d3187e9009dc"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "57fa7c93e4b0d3187e900963"}, {"problem": 61, "code": "#(loop [k %1 v %2 out {}] (if (or (empty? k) (empty? v)) out (recur (rest k) (rest v) (into out {(first k) (first v)}))))", "user": "57f9e0bce4b0d3187e900956"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "57fd7344e4b0d3187e9009b6"}, {"problem": 61, "code": "(fn map-construction\n\t[m v]\n\t(apply hash-map (interleave m v)))", "user": "57f81544e4b0d3187e900917"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "580570a2e4b0a837a8b30cc7"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5804250fe4b0a837a8b30ca1"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "57f81569e4b0d3187e900919"}, {"problem": 61, "code": "#(apply merge (map (fn [k v]\n                           {k v})\n                         %1\n                         %2))", "user": "57fe2d6fe4b0d3187e9009c8"}, {"problem": 61, "code": "(fn [s1 s2] (into {} (map vector s1 s2)))", "user": "57c94c54e4b05aa3c4741d2c"}, {"problem": 61, "code": "(fn [ks vs]\n  (reduce conj {} (map (comp vec list) ks vs)))", "user": "57df2722e4b0bd073c20245e"}, {"problem": 61, "code": "(fn [vec1 vec2]\n  (let [min1 (min (count vec1) (count vec2))]\n    (apply hash-map (flatten (map #(vec[%1 %2]) (take min1 vec1) (take min1 vec2))))))", "user": "57f52d3be4b0903ccab3dce7"}, {"problem": 61, "code": "#(apply merge (map (fn [k v] {k v}) %1 %2))", "user": "57f8ba80e4b0d3187e90092f"}, {"problem": 61, "code": "(comp (partial apply assoc {}) interleave)", "user": "57ee82b1e4b0bfb2137f5bbd"}, {"problem": 61, "code": "#(apply merge (map (fn [a b] (-> {a b})) %1 %2))", "user": "57b9fb56e4b0fbc9809a27fa"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "580d7de3e4b0849f6811b73d"}, {"problem": 61, "code": "#(apply hash-map (vec (interleave %1 %2)))\n;#(apply hash-map (interleave %1 %2))\n;#(apply assoc {} (interleave %1 %2))", "user": "57ee46c7e4b0bfb2137f5bb3"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "57ee41eae4b0bfb2137f5bb0"}, {"problem": 61, "code": ";#(apply assoc{} (interleave %1 %2))\n#(apply hash-map (interleave %1 %2))", "user": "57ee432de4b0bfb2137f5bb2"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "57ef793de4b0bfb2137f5bd8"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "57ee2b3ee4b0bfb2137f5bac"}, {"problem": 61, "code": "(fn [ks vs]\n  (into (hash-map)\n        (map vector ks vs)))", "user": "580bd81ee4b0849f6811b711"}, {"problem": 61, "code": "(fn [fst sen]\n  (reduce (fn [res [key value]] (assoc res key value)) {} (map vector fst sen)))", "user": "570e6974e4b0b0fb43fd06ef"}, {"problem": 61, "code": "(fn [k v] \n  (apply hash-map\n   (interleave k v)\n  )\n)", "user": "580c8fcee4b0849f6811b721"}, {"problem": 61, "code": "#(into {} (mapv vector %1 %2))", "user": "57ed19a3e4b0bfb2137f5b8e"}, {"problem": 61, "code": "(fn [keys vals] (into {} (map vector keys vals)))", "user": "57a4fa50e4b0a966079561f1"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "57ee41a6e4b0bfb2137f5baf"}, {"problem": 61, "code": "#(into {} (map hash-map % %2))", "user": "5405885ee4b0addc1aec6668"}, {"problem": 61, "code": "(fn [a b] (into {} (map vector a b)))", "user": "580d7bdae4b0849f6811b73c"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "57839ae9e4b0ebec4cfb74b8"}, {"problem": 61, "code": "#(apply hash-map(flatten(map vector %1 %2)))", "user": "580d7e53e4b0849f6811b73e"}, {"problem": 61, "code": "(fn jipmep [mep-1 mep-2] (apply merge (map #(hash-map %1 %2) mep-1 mep-2)))", "user": "57bbc9bde4b05aa3c4741c31"}, {"problem": 61, "code": ";(fn [xs ys]\n;  (loop [x xs\n;         y ys\n;         out {}]\n;    (if (or (empty? x) (empty? y))\n;      out\n;      (recur (rest x) (rest y)\n;             (assoc out (first x) (first y))))))\n\n#(into {} (map vector %1 %2))", "user": "57e4dbcbe4b0bfb2137f5ac3"}, {"problem": 61, "code": "(fn [sleutels waardes]\n  (loop [sleutels sleutels waardes waardes out {}] \n    (if (or (empty? sleutels) (empty? waardes)) \n      out \n      (recur (rest sleutels) (rest waardes) (assoc out (first sleutels) (first waardes))))\n  )\n)", "user": "58186016e4b0c0e9c07b83ad"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "58134ba8e4b0f478707a060b"}, {"problem": 61, "code": "#(apply hash-map(interleave %1 %2))", "user": "58062dd2e4b0a837a8b30cda"}, {"problem": 61, "code": "(fn [a b](into {} (mapv #(vector % %2) a b)))", "user": "55634f38e4b0c656e3ff17e8"}, {"problem": 61, "code": "(fn [vec1 vec2] (into {} (map vector vec1 vec2)))", "user": "57f3b841e4b0511f1d294e0f"}, {"problem": 61, "code": "(fn [keys values]\n  (let [resultMap {}]\n    (loop [[theKeys theValues theMap] [keys values resultMap]]\n      (if (or (empty? theKeys) (empty? theValues)) \n        theMap \n        (recur [(rest theKeys) (rest theValues) (assoc theMap (first theKeys) (first theValues))])\n      )\n    )\n  )\n)", "user": "57f904c5e4b0d3187e900936"}, {"problem": 61, "code": "(fn [a b] (apply merge (map #(hash-map    %1 %2) a b)))", "user": "581a5fdbe4b0e114eb51a002"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5508a292e4b06e50f9beb10f"}, {"problem": 61, "code": "(fn make-kv-map\n  [keys values]\n  (loop [[k & ks] keys\n         [v & vs] values\n         accum {}]\n   (if (or (nil? ks) (nil? vs))\n       (assoc accum k v)\n       (recur ks vs (assoc accum k v)))))", "user": "58152157e4b0f478707a0631"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "581e61b0e4b04b46fc4b0f28"}, {"problem": 61, "code": "#(into (sorted-map) (apply hash-map (mapcat vector %1 %2)))", "user": "58173722e4b0c0e9c07b838a"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map #(vector %1 %2) ks vs)))", "user": "575ddfd1e4b02ea11479938d"}, {"problem": 61, "code": "(fn [a b]\n   (apply assoc {} (interleave a b)))", "user": "55c5b55fe4b0e31453f649b5"}, {"problem": 61, "code": "#_(fn [ks vs]\n  (apply assoc {} (mapcat vector ks vs)))\n(fn [ks vs]\n  (into {} (map vector ks vs)))", "user": "5821b018e4b04b46fc4b0f80"}, {"problem": 61, "code": "#(apply hash-map (mapcat vector %1 %2))\n;#(into {} (map vector %1 %2))\n;#(apply hash-map (interleave % %2))", "user": "581b19e7e4b04b46fc4b0ec4"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "565b2fa5e4b068f2fe63dbfe"}, {"problem": 61, "code": "#(into {} (map (fn [% %2] {% %2}) % %2))", "user": "56193c6ee4b053970a773af2"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "581e8b86e4b04b46fc4b0f2b"}, {"problem": 61, "code": "(fn [keys vals] (loop [res {} rk keys rv vals]\n                  (let [k (first rk) v (first rv)]\n                    (if (or (nil? k) (nil? v))\n                      res\n                      (recur (conj res {k v}) (rest rk) (rest rv))))))", "user": "58225587e4b04b46fc4b0f94"}, {"problem": 61, "code": "(fn [ks vs] (into {} (for [i (range 0 (min (count ks) (count vs)))] [(get ks i) (get vs i)])))", "user": "56449e4de4b0284900eef5f9"}, {"problem": 61, "code": "#(apply array-map (interleave %1 %2))", "user": "58247423e4b051871117bec5"}, {"problem": 61, "code": "(fn [vec1 vec2]\n  (loop [v1 vec1 v2 vec2 result {}]\n    (if (or (empty? v1) (empty? v2))\n      result\n      (recur (rest v1) (rest v2) (assoc result (first v1) (first v2))))))", "user": "581b4d3be4b04b46fc4b0ec6"}, {"problem": 61, "code": ";;#(apply sorted-map (flatten (map vector %1 %2)))\n;;#(apply assoc {} (flatten (map vector %1 %2)))\n;;#(apply sorted-map (interleave %1 %2))\n(comp (partial apply hash-map) interleave)", "user": "57ee42c4e4b0bfb2137f5bb1"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "58171a9ae4b0c0e9c07b8387"}, {"problem": 61, "code": "#(apply hash-map (mapcat vector % %2))", "user": "581829cce4b0c0e9c07b83a9"}, {"problem": 61, "code": "(fn [a b] (apply hash-map (flatten (map #(vector %1 %2) a b))))", "user": "569fc70ee4b0542e1f8d1499"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "58224c53e4b04b46fc4b0f92"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "507ff90fe4b089ade05efbd9"}, {"problem": 61, "code": "#(loop [ks %1\n          vs %2\n          result {}\n        ]\n    (if (or (empty? ks) (empty? vs))\n      result\n      (recur (rest ks) (rest vs) (assoc result (first ks) (first vs)))\n    )\n  )", "user": "5710140fe4b09c608db7042e"}, {"problem": 61, "code": "(fn [xs ys]\n  (loop [[x & xs] xs\n         [y & ys] ys\n         acc {}]\n    (if (and x y)\n      (recur xs ys (assoc acc x y))\n      acc)))", "user": "5687b6abe4b0dcc4269f4061"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply hash-map (interleave ks vs)))", "user": "577e42dee4b0c8d87281f6e4"}, {"problem": 61, "code": "(fn [keys vals]\n   (->> (map list keys vals)\n        (reduce (fn [acc [key val]]\n                  (assoc acc key val))\n                nil)))", "user": "5808ee16e4b0a837a8b30d16"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "581dad0ae4b04b46fc4b0f17"}, {"problem": 61, "code": "(fn [a b]\r\n          (apply assoc {} (interleave a b)))", "user": "56f514cee4b046a417f92068"}, {"problem": 61, "code": "#(let [x %1 y %2]\n   (loop [m {} b 0]\n    (if (>= b (min (count x) (count y)))\n        m\n        (recur (assoc m (nth x b) (nth y b)) (inc b)))))", "user": "57ecc16fe4b0bfb2137f5b83"}, {"problem": 61, "code": "#(loop [x {} y %1 z %2]\n  (if (or (empty? y) (empty? z))\n  x\n  (recur (merge x (hash-map (first y) (first z))) (rest y) (rest z))))", "user": "582c526ae4b051871117bf88"}, {"problem": 61, "code": "(fn [ks vs]\n  (loop [ map {}\n          keys (seq ks)\n          vals (seq vs)]\n    (if (and keys vals)\n      (recur (assoc map (first keys) (first vals))\n             (next keys)\n             (next vals))\n      map)))", "user": "582835cbe4b051871117bf30"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (map vector ks vs)))", "user": "5813e208e4b0f478707a061b"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "55632016e4b0c656e3ff17e4"}, {"problem": 61, "code": ";(fn zipcat* [& cols]\n;  (reduce #(assoc %1 (first %2) (second %2)) {} (apply map list cols)))\n\n(fn [ks vs] (apply hash-map (interleave ks vs)))\n\n;#(into {} (map vector  %1 %2))", "user": "58299e03e4b051871117bf46"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "500e3238e4b068062f6e8d8f"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "58303fc3e4b051871117c006"}, {"problem": 61, "code": "#(apply assoc {} \n   (interleave %1 %2))", "user": "5784ff88e4b0ebec4cfb74d4"}, {"problem": 61, "code": "#(apply hash-map (vec (interleave % %2)))", "user": "582290b5e4b04b46fc4b0fa0"}, {"problem": 61, "code": "(fn [a b]\n  (reduce conj (map #(assoc {} %1 %2) a b)))", "user": "5829d588e4b051871117bf4a"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "582e0afde4b051871117bfd5"}, {"problem": 61, "code": "#(apply assoc {} (interleave % %2))", "user": "57addf3ae4b0b8559636fca4"}, {"problem": 61, "code": "(fn [a b] (into {} (map #(vector %1 %2) a b)))", "user": "583166c1e4b051871117c025"}, {"problem": 61, "code": "(fn zm \n  ([[a & as] [b & bs]] \n   (if (or (nil? a) (nil? b))\n     {}\n    (assoc (zm as bs) a b))  )                     \n  )", "user": "58335c22e4b089d5ab817c9a"}, {"problem": 61, "code": "(fn my-map [keys vals]\n  (apply merge (map hash-map keys vals)))", "user": "58327a08e4b089d5ab817c7c"}, {"problem": 61, "code": "(fn test16 [coll1 coll2]\n  (into {} (map #(vector %1 %2) coll1 coll2)))", "user": "5804d5afe4b0a837a8b30cad"}, {"problem": 61, "code": "#(apply merge (map (fn [x y] {x y}) % %2))", "user": "50d0d2dde4b00b15ecee9768"}, {"problem": 61, "code": "(fn zm [ks vs]\n  (reduce #(assoc %1 (first %2) (second %2))\n          {} \n          (map vector ks vs)))", "user": "5779556de4b0979f8965166e"}, {"problem": 61, "code": "(fn [k v] (loop [m {} ks (seq k) vs (seq v)] (if (and ks vs) (recur (assoc m (first ks) (first vs)) (next ks) (next vs) ) m)))", "user": "563a79e5e4b0bfe05bf117fe"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (map #(hash-map %1 %2) ks vs)))", "user": "4ea8570f535d7eef308072f8"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5835bc73e4b089d5ab817ce9"}, {"problem": 61, "code": "(fn [k v] (apply hash-map (interleave k v)))", "user": "5801eed1e4b0a837a8b30c63"}, {"problem": 61, "code": "(fn [as bs] (into (hash-map) (map vector as bs)))", "user": "58334d18e4b089d5ab817c97"}, {"problem": 61, "code": "(fn [keys vals]\n   (apply hash-map (interleave keys vals)))", "user": "55b2505be4b0da326a65cf7d"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply (partial assoc {}) (interleave ks vs)))", "user": "5791d259e4b0ebec4cfb75c0"}, {"problem": 61, "code": "(fn zipmap*\n  [v1 v2]\n  (loop [vk v1 vv v2 r {}]\n    (if (or (empty? vk) (empty? vv)) r (recur (rest vk) (rest vv) (conj r (hash-map (first vk) (first vv)))))))", "user": "57235dc4e4b0c5bde472c0e2"}, {"problem": 61, "code": "#(apply hash-map (mapcat list % %2))", "user": "5835cb06e4b089d5ab817cea"}, {"problem": 61, "code": "#(reduce into (map hash-map %1 %2))", "user": "58217fbde4b04b46fc4b0f78"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "58384bc4e4b089d5ab817d27"}, {"problem": 61, "code": "(fn [a b]\n  (loop [m {} ks a vs b]\n    (if (or (empty? ks) (empty? vs))\n      m\n      (recur\n       (assoc m (first ks) (first vs))\n       (rest ks)\n       (rest vs)))))", "user": "5843b95de4b089d5ab817e3f"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "583e27e2e4b089d5ab817daa"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "58391c94e4b089d5ab817d35"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "582589b2e4b051871117bedd"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "583667c7e4b089d5ab817cfb"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "582d7569e4b051871117bfbe"}, {"problem": 61, "code": "#(apply sorted-map (interleave %1 %2))", "user": "583c8bd4e4b089d5ab817d81"}, {"problem": 61, "code": "(fn f [x y] \n  (apply hash-map \n    (interleave x y)))", "user": "4e6a5728535d8ccf87e9fecf"}, {"problem": 61, "code": "(fn [ks vs](reduce merge (map (fn [k v] {k v}) ks vs)))", "user": "54684c3be4b00cfc9eacc139"}, {"problem": 61, "code": "(fn [coll1 coll2] (into (sorted-map)(mapcat #(hash-map %1 %2) coll1 coll2)))", "user": "5804b491e4b0a837a8b30cac"}, {"problem": 61, "code": "(fn [a b] (apply hash-map (interleave a b)))", "user": "55a21f1ce4b0acc240e3151f"}, {"problem": 61, "code": "(fn\n  [col1 col2]\n  (reduce (fn [r x] (merge r x)) (map (fn [x y] {x y}) col1 col2)))", "user": "5843b231e4b089d5ab817e3d"}, {"problem": 61, "code": "(fn [a b] (into {} (map vector a b)))", "user": "55c66ffee4b0e31453f649c2"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "54d341f7e4b0e8a36923e603"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "584dadebe4b0b7285a6f4e44"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5820cca0e4b04b46fc4b0f62"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "57465429e4b009280f9f2b60"}, {"problem": 61, "code": "#(reduce conj {} (map vector %1 %2))", "user": "560843dee4b046a4fc0ac00e"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "567b2f20e4b05957ce8c61a2"}, {"problem": 61, "code": "(fn [v1 v2]\n  (reduce #(assoc %1 (first %2) (second %2)) {} (partition 2 (interleave v1 v2))))", "user": "53bd476ae4b0d9a98559a6ca"}, {"problem": 61, "code": "#(->> (interleave %1 %2) (apply hash-map))", "user": "5849ac5fe4b089d5ab817ed7"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "583e1558e4b089d5ab817da9"}, {"problem": 61, "code": "(fn [one two]\n  (into {} \n        (map #(hash-map %1 %2) one two)))", "user": "546be022e4b00cfc9eacc171"}, {"problem": 61, "code": "#(reduce conj {} (map vector %1 %2))", "user": "584917a1e4b089d5ab817ec9"}, {"problem": 61, "code": "#(reduce conj (map (fn [x y] {x y}) %1 %2))", "user": "58524875e4b0b7285a6f4ead"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "55a5e2f7e4b0acc240e31550"}, {"problem": 61, "code": "(fn zippy [keys vals]  (reduce merge (map #(hash-map %1 %2) keys vals)))", "user": "525d44bfe4b0cb4875a45d6d"}, {"problem": 61, "code": "(fn  [v1 v2]\n  (loop [vec1 v1\n         vec2 v2\n         acc {}]\n    (if (or (empty? vec1) (empty? vec2))\n      acc\n    (recur (rest vec1) (rest vec2) (assoc acc (first vec1) (first vec2))))))", "user": "582dc562e4b051871117bfcb"}, {"problem": 61, "code": "(fn zipit\n  [keyz valz]\n  (apply hash-map (interleave keyz valz)))", "user": "563f4c47e4b08d4f616f5ed2"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "57dafe97e4b0bd073c20241c"}, {"problem": 61, "code": "(fn cons-map\n  ([xs-keys xs-values]\n    (cons-map xs-keys xs-values {}))\n  ([xs-keys xs-values coll]\n   (let [[first-key & rest-keys] xs-keys\n         [first-value & rest-values] xs-values]\n     (if (or (nil? first-key) (nil? first-value))\n       coll\n       (cons-map rest-keys rest-values (assoc coll first-key first-value))))))", "user": "57e9a77ae4b0bfb2137f5b35"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5766fbb7e4b0a07e8fc180b6"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "57fdd1cfe4b0d3187e9009bf"}, {"problem": 61, "code": "(fn [part1 part2]\n  (reduce (fn [me v] (assoc me\n                        (first v)\n                        (second v)))\n          {} (map list part1 part2)))", "user": "56b6e354e4b0982f16b37e41"}, {"problem": 61, "code": "(fn [k v]\n  (loop [ks k\n         vs v\n         mp {}]\n    (if (or (empty? ks) (empty? vs))\n      mp\n      (recur (rest ks)\n             (rest vs)\n             (assoc mp (first ks) (first vs)))\n      )\n    )\n  )", "user": "58562083e4b0f14aab7c86eb"}, {"problem": 61, "code": "#(reduce (fn [hmap kv] (apply assoc hmap kv))\n         {}\n         (partition 2\n                    (interleave %1 %2)))", "user": "585e2e77e4b0f14aab7c87ac"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "585d40afe4b0f14aab7c8798"}, {"problem": 61, "code": "(fn [ x y ]  \n   (apply assoc {} (interleave x y))\n   )", "user": "50b25edae4b03ea88043355e"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "57d0e185e4b0bd073c202360"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "584f5133e4b0b7285a6f4e61"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "558a5d52e4b0277789237618"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "56f9b953e4b07572ad1a88b9"}, {"problem": 61, "code": "(fn [keys values]\n  (apply hash-map (apply concat (map list keys values))))", "user": "58637f03e4b0f14aab7c881e"}, {"problem": 61, "code": "(fn [k v]\n  (loop [acc {} k k v v]\n    (if (some empty? (list k v))\n      acc\n      (recur (assoc acc (first k) (first v)) (rest k) (rest v))\n    )\n  )\n)", "user": "583dacc2e4b089d5ab817d9f"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "51456858e4b0e88796073408"}, {"problem": 61, "code": "#(apply merge (map hash-map %1 %2))", "user": "5853582fe4b0b7285a6f4ec5"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "585481e0e4b07779d46863fe"}, {"problem": 61, "code": "; Can be simplified and more readable using a thread last function. Use:\n;(->> (map vector ks vs) (into {})) \n(fn [ks vs]\n  (reduce (fn [res a] (into res a)) {} (map (fn [a b] [[a b]]) ks vs)))", "user": "5722bf99e4b0c5bde472c0d6"}, {"problem": 61, "code": "#(reduce (fn [m [k v]] (assoc m k v)) {} (partition 2 (interleave %1 %2)))", "user": "54f26266e4b024c67c0cf8c5"}, {"problem": 61, "code": "#(apply merge (map (fn [a b] {a b}) %1 %2))", "user": "586615e6e4b0f14aab7c8858"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "57c33eeae4b05aa3c4741cbc"}, {"problem": 61, "code": "(fn [a b]\n  (apply hash-map (interleave a b)))", "user": "5863eda2e4b0f14aab7c8836"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "56acfee5e4b03c432f18734f"}, {"problem": 61, "code": "#(reduce merge (map (fn [k v] {k v}) % %2))", "user": "56b1b59be4b0982f16b37df2"}, {"problem": 61, "code": "(fn [a b]\n  (into {} (map vector a b))\n  )", "user": "52dc7344e4b09f7907dd13cf"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "586b6f13e4b01531a375e959"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "4e11b92a535d04ed9115e7cb"}, {"problem": 61, "code": "(fn map-construction\n  [keys vals]\n  (->> (interleave keys vals)\n       (partition 2)\n       (reduce #(assoc %1 (first %2) (last %2)) {})))", "user": "547bf82de4b0c51c1f4d72e1"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "582cbf48e4b051871117bfa6"}, {"problem": 61, "code": "(fn [a b] (apply hash-map (interleave a b)))", "user": "585bcd51e4b0f14aab7c8771"}, {"problem": 61, "code": "#(reduce (fn [map [key val]] (assoc map key val)) {} (map vector %1 %2))", "user": "586bc870e4b01531a375e964"}, {"problem": 61, "code": "(fn [set1 set2]\n   (into {} (map vector set1 set2)))", "user": "5840c068e4b089d5ab817df8"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5854d1c0e4b07779d468640a"}, {"problem": 61, "code": "(fn mzipmap\n    ([mkeys mvalues]\n     (mzipmap mkeys mvalues {}))\n    ([mkeys mvalues m]\n     (if (or (empty? mkeys) (empty? mvalues)) m\n         (let [k (first mkeys)\n               v (first mvalues)\n               new-map (assoc m (first mkeys) (first mvalues))]\n           (mzipmap (rest mkeys) (rest mvalues) new-map)))))", "user": "5866b999e4b0f14aab7c886b"}, {"problem": 61, "code": "(fn [k v](into {} (map vector k v)))", "user": "55597b84e4b0deb715856e36"}, {"problem": 61, "code": "#(apply hash-map(interleave %1 %2))", "user": "586b6a0ae4b01531a375e957"}, {"problem": 61, "code": "(fn [keys vals]\n    (apply hash-map (interleave keys vals)))", "user": "586b6753e4b01531a375e956"}, {"problem": 61, "code": "(fn [ks vals] (apply hash-map (interleave ks vals)))", "user": "4f213e2ee4b0d66497709fcf"}, {"problem": 61, "code": "(fn [one two] (apply hash-map (flatten (for [i (range (min (count one) (count two)))] (vector (get one i) (get two i))))))", "user": "587294f0e4b01531a375ea1e"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "586e47dee4b01531a375e9a9"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))\n;;#(apply hash-map (flatten (map vector %1 %2)))", "user": "58566b42e4b0f14aab7c86f4"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "5857d27de4b0f14aab7c8710"}, {"problem": 61, "code": "(fn [ks vs] \n  (into \n   (sorted-map)\n   (map #(conj [%1] %2) ks vs)))", "user": "578df8fee4b0ebec4cfb7574"}, {"problem": 61, "code": "#(reduce (fn [coll [k v]]\n           (assoc coll k v))\n         {}\n         (map (fn [k v]\n                  [k v]) \n              %1\n              %2))", "user": "58740c18e4b01531a375ea49"}, {"problem": 61, "code": "(fn [a b]\n  (apply hash-map (interleave a b)))", "user": "54012b48e4b0de5c41848620"}, {"problem": 61, "code": "(fn [k v] (->> (interleave k v) (partition 2) (reduce #(assoc %1 (first %2) (last %2)) {})))", "user": "584d8724e4b0b7285a6f4e3e"}, {"problem": 61, "code": "#(apply assoc {} (interleave % %2))", "user": "51a132cee4b0b292b01ee3ff"}, {"problem": 61, "code": "(fn [kys vls]\n  (loop [ mp {}\n          ks kys\n          vs vls]\n    (if (or \n         (empty? ks) \n         (empty? vs)) \n      mp\n      (recur \n       (assoc mp (first ks) (first vs))\n       (rest ks)\n       (rest vs)))))", "user": "5832be57e4b089d5ab817c86"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply hash-map (interleave ks vs)))", "user": "5879d577e4b01531a375ead8"}, {"problem": 61, "code": "(fn [ks vs] (apply assoc {}  (interleave ks vs)))", "user": "4f3b5219e4b0e243712b1f2a"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "563c7f98e4b0bfe05bf11836"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "57fbd83ee4b0d3187e90097b"}, {"problem": 61, "code": "#(apply assoc {} (interleave % %2))", "user": "5790f9d7e4b0ebec4cfb75b4"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5835a222e4b089d5ab817ce5"}, {"problem": 61, "code": "(fn [keys values]\n  (loop [[keys-head & keys-tail :as keys] keys\n         [values-head & values-tail :as values] values\n         acc {}]\n    (if (or (empty? keys) (empty? values))\n      acc\n      (recur keys-tail values-tail (assoc acc keys-head values-head)))))", "user": "587100d6e4b01531a375e9f0"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "50385746e4b0803468ea2c6d"}, {"problem": 61, "code": "(comp (partial apply hash-map) interleave)", "user": "5880e38fe4b0f1effa3b7625"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "58800fd4e4b0f1effa3b7606"}, {"problem": 61, "code": "#(apply assoc {} \n   (interleave %1 %2))", "user": "5883584ae4b0f1effa3b7674"}, {"problem": 61, "code": "#(apply hash-map (flatten (map (fn [& args] args) %1 %2)))", "user": "56946d43e4b0dcc4269f411e"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "587ee260e4b052da650a6353"}, {"problem": 61, "code": "(fn [a b] (apply assoc {} (interleave a b)))", "user": "58852909e4b0f1effa3b76af"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "587f8393e4b0f1effa3b75f2"}, {"problem": 61, "code": "#(into {} (map (fn [a b] (hash-map a b)) % %2))", "user": "4dbd7107535d020aff1edf42"}, {"problem": 61, "code": "(fn [col1 col2]\n  (reduce #(assoc %1 (first %2) (last %2)) {} (map list col1 col2)))", "user": "57ea2c91e4b0bfb2137f5b42"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "5881335ce4b0f1effa3b762e"}, {"problem": 61, "code": "(fn [a b]\n  (reduce \n    #(assoc % (first %2)(last %2)) \n    {} (partition 2 (interleave a b))))", "user": "508927d6e4b06d8254e936e9"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "58844d43e4b0f1effa3b7696"}, {"problem": 61, "code": "(fn[a b] (into {} (mapcat #(hash-map %1 %2) a b)))", "user": "52f426fce4b05e3f0be25f1e"}, {"problem": 61, "code": "(fn [a b] (into {} (map #(vector %1 %2) a b)))", "user": "587c59d1e4b01531a375eb17"}, {"problem": 61, "code": "(fn [x y] (reduce conj (map #(assoc {} %1 %2) x y)))", "user": "58840023e4b0f1effa3b768b"}, {"problem": 61, "code": "(fn [keys vals]\n   (into {} (map vector keys vals)))", "user": "569f7bc2e4b0542e1f8d1494"}, {"problem": 61, "code": "(fn [& more]\n   (into {} (apply map (fn [& xs] (vec xs)) more)))", "user": "585dbe41e4b0f14aab7c879f"}, {"problem": 61, "code": "(fn zm [[k & ks] [v & vs]]\n  (into {} (cons {k v} (if (or (nil? ks) (nil? vs)) nil (zm ks vs)))))", "user": "5884e807e4b0f1effa3b76a6"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5872935ce4b01531a375ea1d"}, {"problem": 61, "code": "(let [zipped (partial map vector)] \n\t(fn [l1 l2] \n\t\t(reduce #(assoc %1 (first %2) (last %2)) {} (zipped l1 l2))))", "user": "5650082fe4b0284900eef6b7"}, {"problem": 61, "code": "(fn [k v] (into {} (map vector k v)))", "user": "578d459ee4b0ebec4cfb7567"}, {"problem": 61, "code": "(fn stuff\n  [keys values]\n  (let [min-length (min (count keys) (count values))]\n    (reduce\n      (fn [acc [k v]]\n        (assoc acc k v)) {} \n      (for [i (range 0 min-length)\n            :let [pair [(nth keys i) (nth values i)]]]\n        pair))))", "user": "5885bea8e4b0f1effa3b76bf"}, {"problem": 61, "code": "#(apply hash-map (flatten (map (fn [k v] [k v]) %1 %2)))", "user": "5885e90de4b0f1effa3b76c5"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "57de9169e4b0bd073c202454"}, {"problem": 61, "code": "(comp (partial into {}) (partial map vector))", "user": "58923efce4b00487982d521c"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (map vector ks vs)))", "user": "58949f8de4b00487982d525e"}, {"problem": 61, "code": "#(apply merge \n        (map hash-map %1 %2))", "user": "576e607ae4b0979f89651579"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "552b6ddbe4b0ffed3738f965"}, {"problem": 61, "code": "#(apply hash-map\n       (apply concat\n              (map vector %1 %2)))", "user": "565487dce4b0f9d632dd8482"}, {"problem": 61, "code": "(fn [col_1 col_2] (reduce into {} (map (fn [item_1 item_2] (assoc {} item_1 item_2))  col_1 col_2)))", "user": "588f500ae4b00487982d51a4"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "587bead1e4b01531a375eb0d"}, {"problem": 61, "code": "(fn [col1 col2]\n  (apply hash-map (interleave col1 col2)))", "user": "583e02fce4b089d5ab817da5"}, {"problem": 61, "code": "(fn [coll1 coll2]\n  (apply assoc {} (interleave coll1 coll2)))", "user": "5896735fe4b00487982d529d"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (map vector ks vs)))", "user": "5896a0e6e4b00487982d52a8"}, {"problem": 61, "code": "(fn [xs ys]\n  (into {}\n    (map #(vector %1 %2)\n         xs ys)))", "user": "53b42472e4b047364c0444b2"}, {"problem": 61, "code": "(fn [k v] (apply merge (map (fn [%1 %2]{%1 %2}) k v)))", "user": "58983e3fe4b00487982d52ce"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5895477fe4b00487982d527c"}, {"problem": 61, "code": "(fn make-a-map [keys vals]\n   (apply hash-map (interleave keys vals)))", "user": "562eeba2e4b0ab312c17ebc1"}, {"problem": 61, "code": "#(apply merge (map (fn [k v] {k v}) %1 %2))", "user": "55ea1738e4b0121d4835fdaa"}, {"problem": 61, "code": "#(loop [p1 %1 p2 %2 mp {}]\n   (if (or (empty? p1) (empty? p2))\n     mp\n     (recur (rest p1) (rest p2) (assoc mp (first p1) (first p2)))\n   ) \n )", "user": "5876c0c5e4b01531a375ea8e"}, {"problem": 61, "code": "#(apply hash-map(interleave %1 %2))", "user": "53ada652e4b047364c04446d"}, {"problem": 61, "code": "(fn [key-coll val-coll] (apply assoc (into [{ }] (interleave key-coll val-coll))))", "user": "57b356c2e4b0fbc9809a277b"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5885cc62e4b0f1effa3b76c1"}, {"problem": 61, "code": "(fn [c1 c2] (into {} (reduce #(conj %1 (into [] %2)) [] (partition-all 2 (interleave c1 c2)))))", "user": "58987ee9e4b00487982d52d2"}, {"problem": 61, "code": "(fn constMap\n  ([k v] (constMap (- (min (count k) (count v)) 1) k v))\n  ([n k v] (if \n             (< n 0)\n             (hash-map)\n             (conj (constMap (- n 1) k v) (vector (nth k n) (nth v n))))))", "user": "58950f29e4b00487982d5270"}, {"problem": 61, "code": "(fn [x y] (apply hash-map (interleave x y)))", "user": "505caadfe4b0bcb5664c3d3e"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5891bddce4b00487982d5201"}, {"problem": 61, "code": "(fn\n  [k v]\n  (reduce\n   conj\n   (map hash-map k v)))", "user": "586a657de4b0f14aab7c88bd"}, {"problem": 61, "code": "#(into {} (map hash-map %1 %2))", "user": "57887de2e4b0ebec4cfb751c"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "589dd2cce4b02bd94d917e48"}, {"problem": 61, "code": "(fn my-zip [a b]\n  (if (or (empty? a) (empty? b))\n    {}\n    (assoc (my-zip (rest a) (rest b)) (first a) (first b))))", "user": "58a0fc33e4b02bd94d917ea3"}, {"problem": 61, "code": "#(reduce into {} (map hash-map %1 %2))", "user": "58a47197e4b01a0c0b2328f9"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "58a2b57fe4b02bd94d917ede"}, {"problem": 61, "code": "(fn [c1 c2]\n  (apply merge (map #(assoc {} %1 %2) c1 c2)))", "user": "585a7cb2e4b0f14aab7c874e"}, {"problem": 61, "code": "(fn [x y] (apply hash-map (interleave x y)))", "user": "589037b4e4b00487982d51d0"}, {"problem": 61, "code": "(fn construct-map [ks vs]\n  (into (sorted-map) (map vector ks vs)))", "user": "56255e2de4b00a550fc90297"}, {"problem": 61, "code": "#(reduce (fn [acc e] (into acc {(first e) (second e)})) {} (map vector %1 %2))", "user": "5897dda4e4b00487982d52c8"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "5884f77ee4b0f1effa3b76a9"}, {"problem": 61, "code": "(fn zip [ks vs]\n  (if (or (empty? ks) (empty? vs))\n    {}\n    (assoc (zip (rest ks) (rest vs)) (first ks) (first vs))))", "user": "58a5a099e4b01a0c0b232918"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5156e767e4b04360f2428e6b"}, {"problem": 61, "code": "(fn teste [keys values]\n\n  (apply hash-map (interleave keys values)))", "user": "58a7d3e0e4b01a0c0b232949"}, {"problem": 61, "code": "(fn my-zipmap [a b]\n  (reduce (fn [init pair] (apply assoc init pair))\n          {}\n          (partition 2 (interleave a b))))", "user": "580d2788e4b0849f6811b730"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "54f14aa6e4b024c67c0cf8af"}, {"problem": 61, "code": "#(into {} (map hash-map %1 %2))", "user": "58988cbbe4b00487982d52d7"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map #(vector %1 %2) ks vs)))", "user": "53b05a75e4b047364c044482"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "57625c18e4b0994c1922fba4"}, {"problem": 61, "code": "(fn [x y] \n  (apply assoc {} \n   (interleave x y)))", "user": "58a1f61ae4b02bd94d917ecd"}, {"problem": 61, "code": "#(into {} (map hash-map %1 %2))", "user": "589f0087e4b02bd94d917e6d"}, {"problem": 61, "code": "(fn [a b] (reduce conj {} (map hash-map a b)))", "user": "58ad4349e4b0ebc645576c9d"}, {"problem": 61, "code": "#(into {} (map (fn [x,y] {x y}) %1 %2))", "user": "5895385fe4b00487982d5279"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5854580ce4b07779d46863f9"}, {"problem": 61, "code": "#(->> (interleave %1 %2) (apply hash-map))", "user": "58b06b7ce4b0ebc645576cdc"}, {"problem": 61, "code": "(fn zipmap' [keys vals]\n  (loop [map {}\n         ks (seq keys)\n         vs (seq vals)]\n    (if (and ks vs)\n      (recur (assoc map (first ks) (first vs))\n             (next ks)\n             (next vs))\n      map)))", "user": "58b18ba0e4b0ebc645576cfa"}, {"problem": 61, "code": "(comp (partial apply hash-map) interleave)", "user": "58a822e4e4b01a0c0b232950"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map #(hash-map %1 %2) ks vs)))", "user": "58b51e05e4b0ebc645576d4c"}, {"problem": 61, "code": "(fn my-zipmap [keys-p vals-p]\n  (apply hash-map (interleave keys-p vals-p)))", "user": "58a953dae4b01a0c0b232968"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "544673c0e4b032a45b8693b0"}, {"problem": 61, "code": "(fn [x y] (into {} (apply map vector (vector x y))))", "user": "589e0024e4b02bd94d917e4e"}, {"problem": 61, "code": "(fn [a b] (into {} (vec (map vec (partition 2 (interleave a b))))))\n\n; (fn [ks vs] (into {} (map vector ks vs)))", "user": "577bcbd9e4b0d3393e5deb1b"}, {"problem": 61, "code": "(fn mapcon [ks vs] (let [index (min (count ks) (count vs))] (loop [i 0 result {}]\n                                                               (if (>= i index)\n                                                                 result\n                                                                 (recur (inc i) (assoc result (nth ks i) (nth vs i)))))))", "user": "58b2f085e4b0ebc645576d15"}, {"problem": 61, "code": "(comp (partial into {}) (partial map vector))", "user": "588e4e05e4b00487982d5188"}, {"problem": 61, "code": "(fn [keys vals]\n    (loop [keys keys vals vals res {}]\n      (if (or (empty? keys) (empty? vals))\n        res\n        (recur (rest keys)\n               (rest vals)\n               (conj res [(first keys) (first vals)])))))", "user": "58b81490e4b0ebc645576d8c"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "507eed82e4b06ce648bcdbfe"}, {"problem": 61, "code": "(fn [ks vs] (apply hash-map (interleave ks vs)))", "user": "58ac513fe4b0005cfeb1a746"}, {"problem": 61, "code": "(fn [v1 v2] (reduce (fn [p i] (conj p {(nth v1 i) (nth v2 i)  })) {} (range (min (count v1) (count v2))) )  )", "user": "58a9e872e4b01a0c0b232973"}, {"problem": 61, "code": "(fn [ks vs]\n  (loop [[k & ks] ks\n         [v & vs] vs\n         m {}]\n    (if (or (nil? k) (nil? v))\n      m\n      (recur ks vs (assoc m k v)))))", "user": "58bb218be4b0888cdc949cf4"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "58a44a14e4b01a0c0b2328f2"}, {"problem": 61, "code": "(fn [x y]\n  (loop [i 0\n         b {}\n         f x\n         s y]\n    (if (= i (min (count x) (count y)))\n      b\n      (recur (inc i) (assoc b (first f) (first s)) (drop 1 f) (drop 1 s)))))", "user": "58b54852e4b0ebc645576d52"}, {"problem": 61, "code": "(fn [x c] (apply hash-map (interleave x c)))", "user": "58a0fd0be4b02bd94d917ea4"}, {"problem": 61, "code": "(fn makemap [seqa seqb]\n    (loop [a seqa\n           b seqb\n           ans (. clojure.lang.PersistentHashMap create {})]\n      (if (or (empty? a) (empty? b))\n        ans\n        (recur (rest a) (rest b) (conj ans [(first a) (first b)]))\n        )\n      )\n    )", "user": "57cc14aae4b05aa3c4741d4a"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "5893c64ce4b00487982d524b"}, {"problem": 61, "code": "(fn [ks vs]\n  (reduce\n   (fn [m [k v]]\n     (assoc m k v))\n   {}\n   (map (fn [k v] [k v]) ks vs)))", "user": "5881d1c2e4b0f1effa3b7644"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "58765038e4b01531a375ea7e"}, {"problem": 61, "code": "(fn [keys vals]\n    (into {} (map #(vector %1 %2) keys vals)))", "user": "58bbcbc8e4b0888cdc949d00"}, {"problem": 61, "code": "#(apply hash-map (flatten (map list % %2)))", "user": "589c0475e4b00487982d5351"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "58c2df0ae4b021aa9917ed17"}, {"problem": 61, "code": "(comp (partial apply hash-map) interleave)", "user": "58ca8a1de4b03c36ff7e5835"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "58b80ec1e4b0ebc645576d89"}, {"problem": 61, "code": "(fn [keys vals]\n  (apply hash-map (mapcat list keys vals)))", "user": "58ca613de4b021aa9917edb7"}, {"problem": 61, "code": "(fn [xs ys] (loop [xs xs ys ys res []] (if (and (seq xs) (seq ys)) (recur (rest xs) (rest ys) (conj res [(first xs), (first ys)])) (into {} res))))", "user": "589771f9e4b00487982d52bd"}, {"problem": 61, "code": "#(reduce into (map hash-map %1 %2))", "user": "57b35ecbe4b0fbc9809a277e"}, {"problem": 61, "code": "(fn zipm [xs ys]\n  (if (or (empty? xs) (empty? ys))\n    '{}\n    (assoc (zipm (rest xs) (rest ys)) (first xs) (first ys))))", "user": "58cf00c8e4b03c36ff7e58ac"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "58b86162e4b0ebc645576d97"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "58b989dbe4b0888cdc949ccd"}, {"problem": 61, "code": "(fn [keys values] (into {} (map vector keys values)))", "user": "55807091e4b05c286339e0eb"}, {"problem": 61, "code": "(fn [v1 v2] (into {} (map #(conj [] % %2) v1 v2)))", "user": "58d27bcae4b03c36ff7e58fe"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "4fe899a6e4b07c9f6fd12c54"}, {"problem": 61, "code": "#(apply array-map (interleave %1 %2))", "user": "567d132ee4b05957ce8c61c3"}, {"problem": 61, "code": "#(loop [map {}\n        ks (seq %1)\n        vs (seq %2)]\n   (if (and ks vs)\n     (recur (assoc map (first ks) (first vs))\n            (next ks)\n            (next vs))\n     map))", "user": "573102bbe4b0cd1946bd0fbb"}, {"problem": 61, "code": "(fn [keys vals] (apply hash-map(interleave keys vals)))", "user": "58969076e4b00487982d52a2"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "58c4b11ae4b021aa9917ed2c"}, {"problem": 61, "code": "(fn [keys values] (reduce merge (map (partial assoc {}) keys values)))", "user": "58db362be4b0a4d5acaab675"}, {"problem": 61, "code": "#(into {} (map vec (partition 2 (interleave %1 %2))))", "user": "587a3babe4b01531a375eae2"}, {"problem": 61, "code": "(fn zipmap-fn [x y]\n  (loop [r {}\n         ks x\n         vs y\n         ]\n    (if (or (empty? ks) (empty? vs))\n      r\n      (recur (into r [[(first ks) (first vs)]]) (rest ks) (rest vs))\n      )\n    )\n  )", "user": "5708e8f6e4b0b0fb43fd06a4"}, {"problem": 61, "code": "(fn map-construction [sequence1 sequence2]\n  (loop [seq1 sequence1\n         seq2 sequence2\n         accumulator {}]\n    (if (or (empty? seq1) (empty? seq2))\n      accumulator\n      (recur (rest seq1) (rest seq2) (let [s1 (first seq1)\n                                           s2 (first seq2)]\n                                       (assoc accumulator s1 s2))))))", "user": "58daae01e4b0a4d5acaab664"}, {"problem": 61, "code": "(fn my-zipmap\n  [s1 s2]\n  (reduce conj {} (map #(hash-map %1 %2) s1 s2)))", "user": "58976bfde4b00487982d52bc"}, {"problem": 61, "code": "(fn map-construction [coll1 coll2]\n     (apply hash-map (interleave coll1 coll2)))", "user": "58dcb8cde4b0a4d5acaab6a7"}, {"problem": 61, "code": "(fn t\n  [ceys vals]\n  (loop [r {}\n         ceys ceys\n         vals vals]\n    (if-not (or (empty? ceys) (empty? vals))\n      (recur (merge r {(first ceys) (first vals)})\n             (rest ceys)\n             (rest vals))\n      r)))", "user": "58de563fe4b0a4d5acaab6e3"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "58e37946e4b005f69f193cae"}, {"problem": 61, "code": "#(apply merge (map hash-map %1 %2))", "user": "55b4fa46e4b01b9910ae2983"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map #(vector %1 %2) ks vs)))", "user": "58e2e11ce4b005f69f193ca0"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "58e256e1e4b005f69f193c90"}, {"problem": 61, "code": "#(apply assoc {}\n        (interleave %1 %2))", "user": "588906a9e4b0f1effa3b772a"}, {"problem": 61, "code": "(comp (partial apply hash-map) (partial mapcat #(list %1 %2)))", "user": "58e7229fe4b056aecfd47cc4"}, {"problem": 61, "code": "(fn zipmap' [a b]\n  (->> (map list a b)\n       (reduce #(apply assoc %1 %2) {})))", "user": "58dcf11ae4b0a4d5acaab6af"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (map vector ks vs)))", "user": "58e58ae9e4b056aecfd47c9a"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "58dd21a9e4b0a4d5acaab6b3"}, {"problem": 61, "code": "(fn [listone listtwo]\n  (apply hash-map (flatten (map (fn [x y] [x y]) listone listtwo))))", "user": "58e6a2c5e4b056aecfd47cba"}, {"problem": 61, "code": "(fn myzipmap\n  [keys vals]\n    (loop [map {}\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map)))", "user": "58e5f995e4b056aecfd47ca5"}, {"problem": 61, "code": "(fn [xs ys] (apply hash-map (apply concat (map vector xs ys))))", "user": "579c7db7e4b05b1deef9ae0a"}, {"problem": 61, "code": "#(->> (map vector %1 %2)\n      (into {}))", "user": "58ebae90e4b056aecfd47d44"}, {"problem": 61, "code": "(fn [m col1 col2]\n\n  (if (or (empty? col1) (empty? col2))\n\n     m\n\n     (recur (assoc m (first col1)(first col2)) (rest col1) (rest col2))))\n\n {}", "user": "5794fd7be4b0e215f87e8476"}, {"problem": 61, "code": "#(apply array-map (interleave %1 %2))", "user": "58e762d3e4b056aecfd47ccc"}, {"problem": 61, "code": "(fn my-zipmap [keys vals]\n  (into {} (map vector keys vals)))", "user": "58ed713de4b056aecfd47d84"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "58eba5cce4b056aecfd47d41"}, {"problem": 61, "code": "#(into (sorted-map) (map (fn [x y] (conj [] x y)) %1 %2))", "user": "58dcae01e4b0a4d5acaab6a4"}, {"problem": 61, "code": "(fn [ks vs]\n    (apply hash-map (interleave ks vs))\n    )", "user": "58ec1e63e4b056aecfd47d54"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "5782018de4b0d36ec5835e8e"}, {"problem": 61, "code": "(fn [a b] \n  (apply hash-map\n         (flatten\n          \t(map vector a b))))", "user": "56ca2f25e4b0ea9b8538f716"}, {"problem": 61, "code": "(fn [a b] \n  (apply assoc {} (interleave a b)))", "user": "58bc6a88e4b0888cdc949d16"}, {"problem": 61, "code": "(fn [a b] (into {} (map (fn [a b] [a b]) a b)))", "user": "58eed4c5e4b056aecfd47db7"}, {"problem": 61, "code": "(fn [orig-one orig-two]\n  (loop [final {} one orig-one two orig-two]\n    (if (or (empty? one) (empty? two))\n      final\n      (recur \n       (assoc final (first one) (first two)) \n       (rest one)\n       (rest two)))))", "user": "58e45a2ce4b056aecfd47c69"}, {"problem": 61, "code": "(fn [key-vec val-vec]\n  (reduce (fn [acc item]\n            (into acc item))\n          {}\n          (map #(hash-map %1 %2) key-vec val-vec)))", "user": "58ee5371e4b056aecfd47da8"}, {"problem": 61, "code": "(fn [ks vs]\n   (into {} \n   \t(map vector  ks vs)))", "user": "58c4492be4b021aa9917ed27"}, {"problem": 61, "code": "(fn z [ks vs]\n  (into {} (map (fn [k, v] [k, v]) ks vs)))", "user": "58ef4db9e4b056aecfd47dc6"}, {"problem": 61, "code": "(fn my-zipmap [coll-a coll-b]\n  (apply hash-map (interleave coll-a coll-b)))", "user": "58f2e8fbe4b0438e51c2ce94"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "53a2a259e4b0f1fc7453882c"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map (fn [a b] (vector a b)) ks vs)))", "user": "5796d3ebe4b039eba2ecb0ee"}, {"problem": 61, "code": "(fn [coll1 coll2]\n  (into {} (map vector coll1 coll2)))", "user": "58d3d6a3e4b03c36ff7e592b"}, {"problem": 61, "code": "(fn map-construction [ks vs]\n  (loop [m {}\n         k ks\n         v vs]\n    (if (or (empty? k) (empty? v))\n      m\n      (recur (assoc m (first k) (first v)) (rest k) (rest v)))))", "user": "5865c8f0e4b0f14aab7c884e"}, {"problem": 61, "code": "(fn [coll1 coll2]\n  \"\u6a21\u62dfzipmap\"\n  (loop [map {}\n         coll1 coll1\n         coll2 coll2]\n    (if (and (first coll1)\n             (first coll2))\n      (recur (assoc map (first coll1) (first coll2))\n             (next coll1)\n             (next coll2))\n      map)))", "user": "5823d3e6e4b051871117beb8"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "558e160ce4b027778923764c"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "57b7de74e4b0fbc9809a27d4"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "58447708e4b089d5ab817e4b"}, {"problem": 61, "code": "(fn [i j] (into {} (map (fn [x y][x y]) i j)))", "user": "564a985be4b0284900eef65c"}, {"problem": 61, "code": "#(apply merge (map hash-map % %2))", "user": "56949fc5e4b0dcc4269f4120"}, {"problem": 61, "code": "#(apply hash-map (mapcat list % %2))", "user": "58f45ea0e4b0438e51c2cebc"}, {"problem": 61, "code": "#(apply array-map (mapcat vector %1 %2))", "user": "51a3be77e4b0e77c4ca60bf8"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "53dbca12e4b094d41abdfef6"}, {"problem": 61, "code": "(fn [s1 s2]\n  (apply conj {} (map vector s1 s2)))", "user": "58d48df8e4b03c36ff7e5941"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "58bc0531e4b0888cdc949d07"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5566d812e4b0c656e3ff1837"}, {"problem": 61, "code": "(fn [ks vs] \n  (apply hash-map (interleave ks vs)))", "user": "58dc81d1e4b0a4d5acaab69e"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "58db097fe4b0a4d5acaab66f"}, {"problem": 61, "code": "(fn [keys vals]\n  (loop [m {}\n         ks keys\n         vs vals]\n    (if (and ks vs)\n      (recur (assoc m (first ks) (first vs))\n             (next ks)\n             (next vs))\n      m)))", "user": "55f5b8d6e4b06e875b46ce8d"}, {"problem": 61, "code": "#(apply merge (map hash-map %1 %2))", "user": "57ffd1a9e4b0a837a8b30c2a"}, {"problem": 61, "code": "(fn [x y] (->> (map list x y) (reduce (fn [acc [a b]] (conj acc {a b})) {})))", "user": "5901158de4b0438e51c2d039"}, {"problem": 61, "code": "(fn [c1 c2] (apply merge (map (fn [key val] {key val}) c1 c2)))", "user": "5880d686e4b0f1effa3b7623"}, {"problem": 61, "code": "(fn [keys vals]\n  (apply hash-map \n  \t(flatten\n      (map \n    \t#(list %1 %2)\n        keys vals))))", "user": "5640eb50e4b08d4f616f5eec"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "58ee0bb6e4b056aecfd47d97"}, {"problem": 61, "code": "(fn make-map\n  ([k v]   (make-map k v {}))  \n  ([k v r] (if (and (first k) (first v))\n             (assoc (make-map (rest k) (rest v) r) (first k) (first v))\n             r)))", "user": "5635adeee4b0bfe05bf117c7"}, {"problem": 61, "code": "(fn [v1 v2]\n   (loop [res {}, remv1 v1, remv2 v2]\n     (if (or (empty? remv1) (empty? remv2)) \n       res\n       (recur (assoc res (first remv1) (first remv2)) (rest remv1) (rest remv2)))))", "user": "590b3aeae4b047aa04b199d0"}, {"problem": 61, "code": "(fn f [ks vs]\n  (if (or (empty? ks) (empty? vs))\n    {}\n    (assoc (f (rest ks) (rest vs)) (first ks) (first vs))))", "user": "565131b3e4b0f29ec07d2e88"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "58bcea23e4b0888cdc949d23"}, {"problem": 61, "code": "#(apply hash-map (mapcat list % %2))", "user": "58fdbf59e4b0438e51c2cfbc"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "590b055ae4b047aa04b199c9"}, {"problem": 61, "code": "(fn\n  [a b]\n  (apply merge (map #(identity {%1 %2}) a b)))", "user": "5673881fe4b05957ce8c6120"}, {"problem": 61, "code": "(fn kvm [k v] (->> (interleave k v) (apply assoc {} )))", "user": "5900d5cde4b0438e51c2d02e"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "58934052e4b00487982d523a"}, {"problem": 61, "code": "(fn [colla collb]\n  (->>\n    (map (fn [k v] {k v})\n         colla collb)\n    (reduce (fn [res-map item]\n              (conj res-map item)) {})))", "user": "591072e0e4b0163c97b36ebc"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5640b135e4b08d4f616f5ee8"}, {"problem": 61, "code": "(fn [keys vals]\n    (loop [map {}\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map)))", "user": "5890799be4b00487982d51d6"}, {"problem": 61, "code": "(fn [a b]\n  (into {} (map #(vector %1 %2) a b)))", "user": "59156f0be4b0163c97b36f3d"}, {"problem": 61, "code": "(fn vec2map [a b]\n  (if (or (empty? a) (empty? b)) {} (assoc (vec2map (rest a) (rest b)) (first a) (first b))))", "user": "591c691ce4b09b4ee5954c01"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5910a43de4b0163c97b36ebf"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "58f44c07e4b0438e51c2ceb7"}, {"problem": 61, "code": "(fn [a b]\n  (apply merge(map #(apply assoc {} (list %1 %2)) a b)))", "user": "5822b578e4b04b46fc4b0fa4"}, {"problem": 61, "code": "(fn [keys vals]\n    (loop [map {}\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map)))", "user": "5916412ee4b09b4ee5954b87"}, {"problem": 61, "code": "(fn [k v]\n  (apply hash-map (reduce #(apply conj %1 %2) [] (map #(conj [] %1 %2) k v))))", "user": "56483f45e4b0284900eef62b"}, {"problem": 61, "code": "(fn [keys vals]\n  (into {} (map vector keys vals)))", "user": "4f29d9abe4b0d6649770a034"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {}\n        (map vector ks vs)))", "user": "58ffac9de4b0438e51c2cffd"}, {"problem": 61, "code": "(fn my-zipmap\n\t[k v]\n\t(persistent! \n\t\t(reduce #(assoc! %1 (first %2) (second %2)) (transient {}) (map list k v))))", "user": "58fb7d7ae4b0438e51c2cf7a"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "591cbc30e4b09b4ee5954c08"}, {"problem": 61, "code": "(fn [x y]\n  (loop [i 0\n         m {}]\n    (if (< i (min (count x) (count y)))\n      (recur \n       (inc i)\n       (assoc m (nth x i) (nth y i)))\n       m\n      )\n    ))", "user": "591ac8ece4b09b4ee5954bdd"}, {"problem": 61, "code": "(fn [x y]\n    (apply conj {}\n          (map #(vector %1 %2) x y)))", "user": "5921a080e4b09b4ee5954c77"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "52f762ece4b047fd55836fc2"}, {"problem": 61, "code": "(fn [coll1 coll2]\n  (reduce (fn [m [k v]]\n            (assoc m k v))\n          {}\n          (map list coll1 coll2)))", "user": "59225498e4b09b4ee5954c8c"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "589b98fae4b00487982d533c"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map vector ks vs)))", "user": "4db1b3951254ad5b4805fa6f"}, {"problem": 61, "code": "(fn [a b]\n  (apply merge\n   (map hash-map a b)))", "user": "58ef93ece4b056aecfd47dca"}, {"problem": 61, "code": "(fn [x y]\n  (apply assoc {} \n         (interleave x y)))", "user": "591f5124e4b09b4ee5954c45"}, {"problem": 61, "code": "(fn map-c [s1 s2]\n  (cond (or (nil? (first s1))\n            (nil? (first s2))) nil\n        :else (conj {}\n                    (map-c (rest s1)\n                           (rest s2))\n                    (vector (first s1)\n                            (first s2)))))", "user": "57614a42e4b0994c1922fb85"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "590253e3e4b0438e51c2d055"}, {"problem": 61, "code": "(fn [ks vs]\n  (loop [k (first ks)\n         v (first vs)\n         r {k v}\n         kr (rest ks)\n         vr (rest vs)]\n    (if (or (= 0 (count kr)) (= 0 (count vr))) r\n      (recur (first kr) (first vr) (assoc r (first kr) (first vr)) (rest kr) (rest vr)))))", "user": "591f05b4e4b09b4ee5954c42"}, {"problem": 61, "code": ";(fn [k v] (into {} (map #(vector %1 %2) k v)))\n\n;#(into {} (map (fn [a b] [a b]) %1 %2))\n\n;more concise:\n#(into {} (map vector % %2))", "user": "55e01f4ee4b050e68259b406"}, {"problem": 61, "code": "(fn [ks vs] (reduce conj {} (map #(do [%1 %2]) ks vs)))", "user": "514a3fa5e4b0829bd132edb6"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "4e6fe3a6535d5021c1a89629"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "592518bfe4b072a2710fce65"}, {"problem": 61, "code": "#(apply merge (map (fn [a b] {a b}) %1 %2))", "user": "59258aa7e4b072a2710fce74"}, {"problem": 61, "code": "(fn zmap [k v]\n  (cond\n   (or (empty? k) (empty? v)) {}\n   :else (assoc (zmap (rest k) (rest v)) (first k) (first v))))", "user": "5833a6d8e4b089d5ab817ca2"}, {"problem": 61, "code": "(fn [ks vs] \n  (reduce #(apply assoc %1 %2) {} (map #(vector %1 %2) ks vs)))", "user": "5933b736e4b072a2710fd05d"}, {"problem": 61, "code": "(fn [k v]\n  (apply hash-map (interleave k v)))", "user": "5918db70e4b09b4ee5954bbb"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "59074b7ce4b047aa04b19951"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "58ffaddee4b0438e51c2cffe"}, {"problem": 61, "code": "#(apply conj {} (map vector %1 %2))\n\n;; #(into {} (map vector %1 %2))", "user": "58d2af83e4b03c36ff7e5907"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "59368efbe4b02506e01a297d"}, {"problem": 61, "code": "(fn [l1 l2] \n  (loop [news {} tmp1 l1 tmp2 l2]\n    (if (or (empty? tmp1) (empty? tmp2))\n      news\n      (recur (into news {(first tmp1) (first tmp2)}) (rest tmp1) (rest tmp2)))))", "user": "59368ccae4b02506e01a297a"}, {"problem": 61, "code": "(fn [l1 l2]\n  (loop [tmpl1 l1 tmpl2 l2 new {}]\n    (if (or (empty? tmpl1) (empty? tmpl2))\n      new\n      (recur (rest tmpl1) (rest tmpl2) (assoc new (first tmpl1) (first tmpl2))))))", "user": "59368ccae4b02506e01a2979"}, {"problem": 61, "code": "(fn [k v]\n   (into {} (map vector k v)))", "user": "59385840e4b02506e01a29c9"}, {"problem": 61, "code": "(fn [s t]\n    (apply merge \n           (map \n             (fn [s t] \n               (merge(hash-map s t))) \n             s \n             t)))", "user": "59301509e4b072a2710fcfd6"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "59234753e4b0a390037439ef"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "591a6c9fe4b09b4ee5954bd6"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5935b010e4b04f87174def55"}, {"problem": 61, "code": "(fn [vect1 vect2]\n  (loop [v1 vect1 v2 vect2 combo []]\n    (if (or (empty? v1) (empty? v2)) ;if either input is empety, finish\n      (apply hash-map combo)\n      (recur (rest v1) (rest v2) (conj combo (first v1) (first v2))))))", "user": "59369515e4b02506e01a297e"}, {"problem": 61, "code": "(fn [l1 l2]\n  (loop [l1 l1 l2 l2 r {}]\n    (if (and (seq l1) (seq l2))\n      (recur (rest l1) (rest l2) (assoc r (first l1) (first l2)))\n      r)))", "user": "557c6ca6e4b05c286339e0c4"}, {"problem": 61, "code": "(fn [v1 v2]\n  (loop [map {}\n         ks (seq v1)\n         vs (seq v2)]\n    (if (and ks vs)\n      (recur (assoc map (first ks) (first vs))\n             (next ks)\n             (next vs))\n      map)))", "user": "5931e498e4b072a2710fd024"}, {"problem": 61, "code": "#(apply hash-map (mapcat list %1 %2))", "user": "593f95d8e4b069cdc2982be3"}, {"problem": 61, "code": "#(apply merge (map (fn [k v]\n                     {k v})\n                   %1\n                   %2))", "user": "59251947e4b072a2710fce69"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "59395adfe4b02506e01a29fb"}, {"problem": 61, "code": "(fn getMap [k v] (apply hash-map (interleave k v)))", "user": "592518e8e4b072a2710fce67"}, {"problem": 61, "code": "#(apply assoc {}\n        (interleave %1 %2))", "user": "593910eae4b02506e01a29f4"}, {"problem": 61, "code": "(fn mc\n  [[x & xs :as l-1] [y & ys :as l-2]]\n  (if (or (zero? (count l-1)) (zero? (count l-2)))\n    {}\n    (conj {x y} (mc xs ys))))", "user": "59390a35e4b02506e01a29f3"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "584d99c5e4b0b7285a6f4e42"}, {"problem": 61, "code": "(fn [keys vals] (into {} (map vector keys vals)))", "user": "53de7484e4b0d874e779ae35"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "59449aa2e4b0b03edd0057ad"}, {"problem": 61, "code": "(fn [x y] (into {} (map vector x y)))", "user": "593744abe4b02506e01a299b"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "585d9558e4b0f14aab7c879c"}, {"problem": 61, "code": "#(into {} (map (fn [x y] [x y]) %1 %2))", "user": "5943abb6e4b060784b3b792b"}, {"problem": 61, "code": "#(apply assoc {} (interleave % %2))", "user": "593dfe60e4b069cdc2982bb1"}, {"problem": 61, "code": "(fn [o q] (apply assoc {} (interleave o q)))", "user": "593e01cde4b069cdc2982bb3"}, {"problem": 61, "code": "(fn f [x, y]\n  (loop [s x, ss y, res {}]\n    (if (and (seq s) (seq ss))\n      (recur (rest s) (rest ss) (conj res (conj [] (first s) (first ss))))\n      res)))", "user": "593d6793e4b069cdc2982ba6"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "592518cde4b072a2710fce66"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "576186a5e4b0994c1922fb8e"}, {"problem": 61, "code": "#(reduce into {} (map hash-map %1 %2))", "user": "594783bee4b07ddc2dafada1"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5938bae2e4b02506e01a29ea"}, {"problem": 61, "code": "(fn [lst1 lst2]\n  (loop [x lst1\n         y lst2\n         out {}]\n    (if (or (empty? x) (empty? y)) out\n      (recur (rest x) (rest y) (assoc out (first x) (first y))))))", "user": "594bd637e4b07ddc2dafae41"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "55216aa5e4b0882d96d09192"}, {"problem": 61, "code": "#(reduce into {} (map hash-map %1 %2))", "user": "594263cbe4b060784b3b790a"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5950f0bfe4b066ee0a44ae9f"}, {"problem": 61, "code": "(fn [k v]\n  (let [step\n        (fn [k v m]\n          (if (and (seq k) (seq v))\n            (recur (rest k) (rest v) (assoc m (first k) (first v)))\n            m))]\n    (step k v (hash-map))))", "user": "5953bdb6e4b066ee0a44aeed"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "583f1533e4b089d5ab817dc8"}, {"problem": 61, "code": "(fn [keys vals]\n    (loop [map {}\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map)))", "user": "59537716e4b066ee0a44aee5"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "594c0bd7e4b07ddc2dafae56"}, {"problem": 61, "code": "(fn zip-map [keys vals]\n  (into {} (map vector keys vals)))", "user": "551bdefde4b07993ea3788d7"}, {"problem": 61, "code": "#(into (hash-map) \n       (loop [col1 %1 col2 %2 result []]\n         (if (or (empty? col1) (empty? col2))\n           result\n           (recur (rest col1)\n                  (rest col2) \n                  (conj result [(first col1) (first col2)])))))", "user": "5956c6dae4b066ee0a44af61"}, {"problem": 61, "code": "(fn [ks vs]\n  (loop [res {}\n         ks ks\n         vs vs]\n    (if (or \n         (empty? ks)\n         (empty? vs))\n      res\n      (recur\n       (assoc res (first ks) (first vs))\n       (rest ks)\n       (rest vs)))))", "user": "592334c7e4b0a390037439ee"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5958cef6e4b066ee0a44af94"}, {"problem": 61, "code": "#(apply merge (map (fn [k v]\n                     {k v})\n                   %1\n                   %2))", "user": "5948adffe4b07ddc2dafadc6"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "59497f51e4b07ddc2dafaddd"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "57262710e4b0c5bde472c120"}, {"problem": 61, "code": "#(reduce (fn [m [key value]] (assoc m key value)) {} (partition 2 (interleave %1 %2)))", "user": "59473563e4b07ddc2dafad97"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "592519cfe4b072a2710fce6b"}, {"problem": 61, "code": "#(apply merge (map hash-map % %2))", "user": "590088bfe4b0438e51c2d026"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "595a885be4b066ee0a44afc4"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "594cb88be4b07ddc2dafae6e"}, {"problem": 61, "code": "(fn [ks vs]\n    (loop [i 0 acc {}]\n      (if (or (= i (count ks)) (= i (count vs))) acc\n          (recur (inc i) (assoc acc (nth ks i) (nth vs i))))))", "user": "595bbab7e4b066ee0a44afe0"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "594880ade4b07ddc2dafadc2"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "58cf8f97e4b03c36ff7e58b7"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "58cbdc3be4b03c36ff7e5856"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "58db3c5ae4b0a4d5acaab677"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "59503c5de4b066ee0a44ae8e"}, {"problem": 61, "code": "(fn [keys values]\n  (into {} (map vector keys values)))", "user": "58ebd10de4b056aecfd47d49"}, {"problem": 61, "code": "(comp (partial apply array-map) interleave)", "user": "58fc52cee4b0438e51c2cf95"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "59638af5e4b066ee0a44b0cc"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "595eba88e4b066ee0a44b04e"}, {"problem": 61, "code": "(fn [s1 s2] (->> (interleave s1 s2)\n                  (apply hash-map)\n                  \n               ))", "user": "59419bdfe4b060784b3b78f7"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "591e0782e4b09b4ee5954c25"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "58ee84e5e4b056aecfd47dab"}, {"problem": 61, "code": "#(loop [k % v %2 res {}]\n   (if (or (empty? k) (empty? v))\n     res\n     (recur (rest k) (rest v) (conj res {(first k) (first v)}))))", "user": "5964c614e4b069c0a1a19770"}, {"problem": 61, "code": "(fn [ks vs]\n  (reduce merge (map (fn [k v] {k v}) ks vs)))", "user": "59663e77e4b069c0a1a1979f"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "55842bd7e4b05c286339e11c"}, {"problem": 61, "code": "(fn my_zip\n\t([ks vs]\n\t\t(my_zip ks vs {}))\n\t([ks vs result]\n\t\t(if (or (empty? ks) (empty? vs))\n\t\t\tresult\n\t\t\t(recur (rest ks) (rest vs) (conj result (assoc {} (first ks) (first vs)))))))", "user": "5954eef0e4b066ee0a44af17"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "59692530e4b069c0a1a197e4"}, {"problem": 61, "code": "(fn create-map [keys values]\n  (apply hash-map (interleave keys values))\n  )", "user": "595fe942e4b066ee0a44b075"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "57ab41dde4b0b8559636fc79"}, {"problem": 61, "code": "(fn [ks vs] ((fn [[k & ks] [v & vs] m] (if (or (nil? k) (nil? v)) m (recur ks vs (assoc m k v)))) ks vs {}))", "user": "53f78944e4b0de5c41848561"}, {"problem": 61, "code": "(fn [lis1 lis2]\n  (into {} \n        (map (fn [a b]\n               [a b]) lis1 lis2)))", "user": "59636b49e4b066ee0a44b0c5"}, {"problem": 61, "code": "#(apply hash-map (seq (interleave %1 %2)))", "user": "596caee3e4b069c0a1a19837"}, {"problem": 61, "code": "(fn [ks vs] (apply hash-map (mapcat vector ks vs)))", "user": "595fd721e4b066ee0a44b06e"}, {"problem": 61, "code": "(fn my-zipmap\n  [a b]\n  (into {} (map vector a b)))", "user": "59636ec9e4b066ee0a44b0c8"}, {"problem": 61, "code": "(fn map-construct\n  [alst blst]\n  (into {} (map vector alst blst)))", "user": "59636cc2e4b066ee0a44b0c7"}, {"problem": 61, "code": "(fn map-construct [ks vs]   (apply hash-map (interleave ks vs )))", "user": "5972fcf6e4b01722bebd4c92"}, {"problem": 61, "code": "(fn\n  [key-vec val-vec]\n  (reduce into {}\n          (map (partial assoc {}) key-vec val-vec)))", "user": "5974d2ede4b01722bebd4cb6"}, {"problem": 61, "code": "(fn solution61\n  [kkeys vvalues]\n  (loop [kkeys   kkeys\n         vvalues vvalues\n         ans     {}]\n    (let [fk (first kkeys)\n          fv (first vvalues)]\n      (if (or (nil? fk) (nil? fv))\n        ans\n        (recur (rest kkeys) (rest vvalues) (assoc ans fk fv))))))", "user": "595bc925e4b066ee0a44afe2"}, {"problem": 61, "code": "#(apply hash-map(interleave %1 %2))", "user": "5964f9b0e4b069c0a1a19778"}, {"problem": 61, "code": "(fn zmap[c1 c2]\n  (if (empty? c1)\n    {}\n    (merge (if (empty? c2) {}{(first c1) (first c2) } )\n           (zmap (rest c1) (rest c2)))))", "user": "5978305be4b01722bebd4d03"}, {"problem": 61, "code": "(fn a61[ks vs] (into {} (map vector ks vs)))", "user": "56163cc1e4b06b1bb21829ff"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "596f6683e4b069c0a1a19877"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply hash-map (interleave ks vs)))", "user": "5398d042e4b0b51d73faaf00"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "4fb1d7ace4b081705acca281"}, {"problem": 61, "code": "(fn [a b] (reduce (fn [acc e] (assoc acc (first e) (second e))) {} (map list a b)))", "user": "595fd77ce4b066ee0a44b06f"}, {"problem": 61, "code": "(fn [a-col b-col]\n  (loop [a-col  a-col\n         b-col  b-col\n         result {}]\n    (if (some empty? (list a-col b-col))\n      result\n      (recur\n        (rest a-col)\n        (rest b-col)\n        (assoc result (first a-col) (first b-col))\n      ))))", "user": "5978b4c9e4b01722bebd4d13"}, {"problem": 61, "code": "#(apply hash-map (mapcat vector %1 %2))", "user": "59804b60e4b021a7a535fdcf"}, {"problem": 61, "code": "(fn [a b]\n  (apply merge (map #(assoc {} %1 %2) a b)))", "user": "5935151ee4b072a2710fd084"}, {"problem": 61, "code": "(fn [ks vs] (let [n (min (count ks) (count vs))] (loop [i 0 m {}] (if (= i n) m (recur (inc i) (assoc m (nth ks i) (nth vs i)))))))", "user": "59468de7e4b07ddc2dafad88"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "53ef3adfe4b0742d9025b0c9"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "597dcb0ce4b0dbe32238d0a2"}, {"problem": 61, "code": "(fn [xs ys]\n  (into {} (map vector xs ys)))", "user": "5980f91ae4b021a7a535fddd"}, {"problem": 61, "code": "(fn [k v]\n  (apply merge (mapv #(hash-map (first %) (second %)) (partition 2 (interleave k v)))))", "user": "5926c254e4b072a2710fceb8"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "58fc92c5e4b0438e51c2cf9a"}, {"problem": 61, "code": "(fn [keys values] (apply hash-map (interleave keys values)))", "user": "598ad666e4b02b9968b84ce1"}, {"problem": 61, "code": "#(\n  \n  apply assoc {} \n   (interleave %1 %2)\n            \n  \n  )", "user": "598085e6e4b021a7a535fdd3"}, {"problem": 61, "code": "(fn sk-to-map [keys values]\n  (apply array-map (interleave keys values)))", "user": "5884f377e4b0f1effa3b76a8"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5727031ee4b0c5bde472c12f"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "59837909e4b021a7a535fe16"}, {"problem": 61, "code": "(fn map-construction [keys values]\n  (apply assoc {} (interleave keys values)))", "user": "54c72b19e4b045293a27f636"}, {"problem": 61, "code": "#(loop [k %1 v %2 result {}]\n   (if (or (empty? k) (empty? v))\n     result\n     (recur (rest k) (rest v) (assoc result (first k) (first v)))))", "user": "5989ee61e4b021a7a535fed7"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5797d3d2e4b039eba2ecb106"}, {"problem": 61, "code": "(fn [x y] (apply assoc {} (interleave x y)))", "user": "593ab583e4b069cdc2982b57"}, {"problem": 61, "code": "(fn [klist vlist] (reduce\n            (fn [accum k] (if (< (k 0) (count vlist))\n                            (assoc\n                                accum\n                                (k 1)\n                                (vlist (k 0)))\n                            accum))\n            {}\n            (map-indexed vector klist)))", "user": "597f8984e4b0dbe32238d0bf"}, {"problem": 61, "code": "(fn [x y] (apply hash-map (interleave x y)))", "user": "598d22b1e4b02b9968b84d1a"}, {"problem": 61, "code": "(fn foo [parm1 parm2] (loop [map {} key (seq parm1) value (seq parm2)]\n                          (if (and key value)\n                            (recur (assoc map (first key) (first value)) (next key) (next value))\n                            map)))", "user": "598d0dc3e4b02b9968b84d18"}, {"problem": 61, "code": ";not sure if this index i is what should i do in func programming\n(fn [keys values]\n  (loop [result {} i 0]\n    (if (or (>= i (count values)) (>= i (count keys)))\n      result\n  \t  (recur (assoc result (nth keys i) (nth values i)) (inc i))\n    )\n  )\n)", "user": "5991d2fae4b0866487ed0d68"}, {"problem": 61, "code": "(fn map [keys values]\n  (let [key (first keys)\n        value (first values)]\n    (if (and key value)\n      (assoc\n       (map\n        (rest keys)\n        (rest values))\n       key value)\n      {})))", "user": "598ab445e4b02b9968b84ce0"}, {"problem": 61, "code": "(fn [x y] (loop[i 0 res {}] \n                (if(and (< i (count x)) (< i (count y))) (recur (inc i) (conj res {(x i) (y i)})) res)))", "user": "5971763fe4b01722bebd4c72"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "56014f55e4b04bb52996e184"}, {"problem": 61, "code": "(fn [keyList valList]\n\t(loop [l1 keyList l2 valList acc {}]\n\t\t(if (or (empty? l1) (empty? l2))\n\t\t\tacc\n\t\t\t(let [\n\t\t\t\tk (first l1)\n\t\t\t\tv (first l2)\n\t\t\t\tr1 (rest l1)\n\t\t\t\tr2 (rest l2)\n\t\t\t\tnewAcc (assoc acc k v)]\n\t\t\t\t(recur r1 r2 newAcc)))))", "user": "598af379e4b02b9968b84ce6"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5990fcb9e4b0866487ed0d5b"}, {"problem": 61, "code": "(fn my-zipmap [s1 s2]\n  (apply merge (map (fn[k v]\n                      {k v}) s1 s2)))", "user": "52faf67ce4b047fd55837005"}, {"problem": 61, "code": "(fn zipmapp [keyss, valss]\n  (reduce #(assoc %1 (get keyss %2) (get valss %2))\n          {}\n          (range (min (count keyss) (count valss)))))", "user": "59971e2de4b07157cc8daacc"}, {"problem": 61, "code": "#(apply merge (map hash-map %1 %2))", "user": "594266cfe4b060784b3b790b"}, {"problem": 61, "code": "(fn zm [x y]\n  (if (and (seq x) (seq y))\n    (assoc (zm (rest x) (rest y)) (first x) (first y))\n    {}))", "user": "597a4277e4b02382a38ad1e2"}, {"problem": 61, "code": "(fn [keys values]\n  (loop [ks keys\n         vs values\n         result {}]\n    (if (or (empty? ks) (empty? vs))\n      result\n      (recur (rest ks) (rest vs) (conj result {(first ks) (first vs)})))))", "user": "5954cea2e4b066ee0a44af0a"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "596d630ae4b069c0a1a19846"}, {"problem": 61, "code": "(comp (partial apply assoc {}) interleave)", "user": "5960a1a6e4b066ee0a44b08e"}, {"problem": 61, "code": "(fn  [ks vs]\n  (loop [rk ks\n         rv vs\n         m {}]\n    (if (and (first rk) (first rv))\n\n      (recur\n       (rest rk) (rest rv)\n       (assoc m (first rk) (first rv)))\n\n      m)))", "user": "59971dcbe4b07157cc8daacb"}, {"problem": 61, "code": "#(apply hash-map (mapcat vector % %2))", "user": "596539dce4b069c0a1a19783"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "59a24c92e4b066c664927d20"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "59874ff6e4b021a7a535fea1"}, {"problem": 61, "code": "(fn [ks vs] \n\t(reduce (fn [m i] (assoc m (get ks i) (get vs i))) \n    \t    {} \n        \t(range 0 (min (count ks) (count vs)))))", "user": "5989e080e4b021a7a535fed6"}, {"problem": 61, "code": "(fn my-zip\n  [coll coll']\n  (let [xs (map vector coll coll')]\n    (reduce #(assoc %1 (first %2) (second %2)) {} xs)))", "user": "59a512b7e4b066c664927d5e"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "56e0f485e4b03a7c14b85a1c"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "59032c0fe4b022d14a2aaf9f"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "59944e73e4b0b211ea3aaac2"}, {"problem": 61, "code": "(fn [x y]\n  (into {} (for [i (range (min (count x) (count y)))]\n    [(nth x i) (nth y i)])))", "user": "59a2ba97e4b066c664927d2c"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "594bc16be4b07ddc2dafae39"}, {"problem": 61, "code": "(fn [acc [x & xs :as X] [y & ys :as Y]]\n  (if (or (empty? X) (empty? Y))\n    acc\n    (recur (conj acc {x y}) xs ys))) {}", "user": "59a72effe4b066c664927d94"}, {"problem": 61, "code": "#(apply assoc {}  (interleave % %2) )", "user": "57bffed6e4b05aa3c4741c89"}, {"problem": 61, "code": "(fn [k v] (into {} (map vector k v)))", "user": "591addcee4b09b4ee5954be1"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "576c2ecae4b07c67f59d1fbb"}, {"problem": 61, "code": "(fn [x y]\n  (reduce #(assoc %1 (first %2) (last %2))\n   \t\t  {} \n          (map #(list %1 %2) x y)))", "user": "58fed70de4b0438e51c2cfdd"}, {"problem": 61, "code": "(fn [a b] (apply hash-map (interleave a b)))", "user": "5938bca5e4b02506e01a29eb"}, {"problem": 61, "code": "(fn [s1 s2]\n  (into (hash-map)\n        (map vector s1 s2)))", "user": "59946856e4b0b211ea3aaac7"}, {"problem": 61, "code": "(fn [a b] (into {} (map (fn [x y] [x y]) a b)))", "user": "52ced458e4b07d0d72b27394"}, {"problem": 61, "code": "#(into {} (apply map vector %&))", "user": "59b1c2eae4b0e1f4e384c8ec"}, {"problem": 61, "code": "#(into {} (apply map vector %&))", "user": "59a0262ee4b0871e7608b82d"}, {"problem": 61, "code": "(fn [v1 v2] (apply merge (map #(assoc {} %1 %2) v1 v2)))", "user": "59089229e4b047aa04b1997c"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply hash-map (mapcat list ks vs)))", "user": "59ac0965e4b08cbb53654da6"}, {"problem": 61, "code": "(fn [k v]\n  (loop [_k k _v v r {}]\n    (if (or (empty? _k) (empty? _v))\n      r\n      (recur (rest _k) (rest _v) (conj r [(first _k) (first _v)]))\n     )))", "user": "598229d6e4b021a7a535fdfb"}, {"problem": 61, "code": "(fn [col1 col2]\n    (let [f (fn [c1 c2] {c1 c2})]\n      (into {} (map f col1 col2))))", "user": "59932f49e4b0b211ea3aaaae"}, {"problem": 61, "code": "(fn f [[k & ks] [v & vs]]\n  (if (or (empty? ks) (empty? vs))\n    {k v}\n    (conj {k v} (f ks vs))))", "user": "55b28b57e4b01b9910ae296c"}, {"problem": 61, "code": "(fn [ks vs] \n  (apply assoc {}\n   (interleave ks vs)))", "user": "598debf0e4b02b9968b84d2e"}, {"problem": 61, "code": "(fn [k v] (into {} (map vector k v)))", "user": "571543bbe4b07c98581c3ad4"}, {"problem": 61, "code": "(fn zippy\n  [c1 c2]\n  (into {} (map #(vector %1 %2) c1 c2)))", "user": "5888b75fe4b0f1effa3b771b"}, {"problem": 61, "code": "(fn[keys vals]\n        (loop [map {}\n               ks (seq keys)\n               vs (seq vals)]\n          (if (and ks vs)\n            (recur (assoc map (first ks) (first vs))\n                   (next ks)\n                   (next vs))\n            map)))", "user": "57e6f90de4b0bfb2137f5af6"}, {"problem": 61, "code": "(fn f [[a & ar] [b & br]] (if (and ar br) (merge {a b} (f ar br)) {a b}))", "user": "59adec09e4b0e1f4e384c897"}, {"problem": 61, "code": "(fn [xs ys] (into {} (map #(identity [%1 %2]) xs ys)))", "user": "597fa3fbe4b021a7a535fdbf"}, {"problem": 61, "code": "#(apply array-map (interleave %1 %2))", "user": "59ac559ee4b00adcf69795d2"}, {"problem": 61, "code": "#(into {} (map hash-map %1 %2))", "user": "59b554cee4b05c620303ca0f"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "59bac5c9e4b0a024fb6ae3ed"}, {"problem": 61, "code": "(fn do-zipmap\n  [ks vs]\n  (reduce conj {} (map (fn [k v] {k v}) ks vs)))", "user": "59b62f8de4b05c620303ca1f"}, {"problem": 61, "code": "(fn ass-key-val \n  [x y] (apply assoc {}\n               (interleave x y)))", "user": "59afe4bae4b0e1f4e384c8c0"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "597768d0e4b01722bebd4cee"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "50928084e4b097f48cc3856c"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map vector ks vs)))", "user": "59be62d5e4b0a024fb6ae435"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (map vector ks vs)))", "user": "54058af3e4b0addc1aec6669"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5137fb22e4b0a5db03d727d3"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "59358f74e4b04f87174def52"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "59c94a69e4b0a024fb6ae576"}, {"problem": 61, "code": "(fn [a b]\n   (loop [a a\n          b b\n          return []]\n     (if (or (empty? a) (empty? b))\n       (into {} return)\n       (recur (rest a) (rest b) (conj return (vector (first a) (first b)))))))", "user": "57c44053e4b05aa3c4741ccb"}, {"problem": 61, "code": "(fn [ks vs] \n  (apply hash-map (flatten (map list ks vs)))\n  )", "user": "59cc4d5ee4b0a024fb6ae5d0"}, {"problem": 61, "code": "(fn my-zip [& coll]\n (reduce #(assoc %1 (first %2) (second %2)) {} (apply map list coll)))", "user": "592fa9f8e4b072a2710fcfcb"}, {"problem": 61, "code": "(fn [a b] \n  ((let [nothing? #(or (nil? %) (and (coll? %) (empty? %)))]\n    (fn [running Keys Values]\n      (if (or (empty? Keys) (empty? Values)) running\n        (let \n          [Key (first Keys) Value (first Values)]\n          (recur (conj running {Key Value}) (rest Keys) (rest Values))))))\n   {} a b))", "user": "59cf6fbce4b0ef0a1e9b5b6c"}, {"problem": 61, "code": "(fn [a b] (apply conj {} (map vector a b)))", "user": "59c7c2cde4b0a024fb6ae54b"}, {"problem": 61, "code": "#(loop [seq1 % seq2 %2 res {}] (if (or (= 0 (count seq1)) (= 0 (count seq2))) res\n                                 (recur (rest seq1) (rest seq2) (conj  res {(first seq1) (first seq2)}))))", "user": "594a7ed1e4b07ddc2dafae02"}, {"problem": 61, "code": "(fn zip-map [a b]\n  (if \n    (or (empty? a) (empty? b))\n    {}\n    (assoc \n      (zip-map (rest a) (rest b)) \n      (first a) \n      (first b))))", "user": "59733c91e4b01722bebd4c9b"}, {"problem": 61, "code": "(fn [ks vs] \n   (reduce-kv (fn [memo ind val]\n                (if (< ind (count vs))\n                  (into memo {val (nth vs ind)})\n                  memo))                 \n              {} \n              ks))", "user": "51f38193e4b0fca5e8b48226"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "55fd0d19e4b0f488688e067a"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "598858d0e4b021a7a535feb5"}, {"problem": 61, "code": "#(loop[a %1 b %2 result {}]\n   (if (or(empty? a) (empty? b)) result\n     (recur (rest a) (rest b) (assoc result (first a) (first b)))))\n\n;(fn [a b] (apply assoc {} (interleave a b)))", "user": "59c77511e4b0a024fb6ae545"}, {"problem": 61, "code": "#(into {} (map vec (partition 2 (interleave % %2))))", "user": "59c734e3e4b0a024fb6ae53f"}, {"problem": 61, "code": "#(apply array-map (apply interleave %&))", "user": "59cf4013e4b0ef0a1e9b5b68"}, {"problem": 61, "code": "(fn [x y] \n  (apply merge \n   (map \n    (fn [a b] (hash-map a b))\n    x\n    y)))", "user": "59d75e36e4b0ef0a1e9b5c32"}, {"problem": 61, "code": "#(apply merge (map hash-map %1 %2))", "user": "59ddae03e4b01968742fed65"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (map vector ks vs)))", "user": "559057c4e4b027778923766e"}, {"problem": 61, "code": "(fn buildMap\n  [lst1 lst2]\n  (apply hash-map (interleave lst1 lst2)))", "user": "59e0111ae4b08badc2a0c4e4"}, {"problem": 61, "code": "(fn [lst1 lst2] (into {} (map vector lst1 lst2)))", "user": "59e18b9be4b08badc2a0c50f"}, {"problem": 61, "code": "(fn [llaves v] \n  (apply array-map \n         (interleave llaves v)))", "user": "59e12c94e4b08badc2a0c509"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "59e0f38ae4b08badc2a0c500"}, {"problem": 61, "code": "(fn [x y] (into {} (map vector x y)))", "user": "5839f079e4b089d5ab817d48"}, {"problem": 61, "code": "(fn algo \n  [lst1 lst2]\n  (apply hash-map (interleave lst1 lst2))\n  )", "user": "59e56c75e4b08badc2a0c556"}, {"problem": 61, "code": "(fn [listaA listaB]\n(apply hash-map (mapcat #(cons %1 (list %2)) listaA listaB)))", "user": "59e63a2ce4b08badc2a0c569"}, {"problem": 61, "code": "#(loop [m {} ks (seq %1) vs (seq %2)] (if (and ks vs) (recur (assoc m (first ks) (first vs)) (next ks) (next vs)) m))", "user": "58cfbd7ae4b03c36ff7e58ba"}, {"problem": 61, "code": "(fn   [lst lst20]\n  (loop [lst1  lst\n         lst2 lst20\n         mapa  {}]\n    (if (<(count lst) (count lst20))\n      (if (zero? (count lst1))\n        mapa\n        (recur (rest lst1)\n               (rest lst2)\n               (assoc mapa (first lst1)(first lst2))))\n      (if (zero? (count lst2))\n        mapa\n        (recur (rest lst1)\n               (rest lst2)\n               (assoc mapa (first lst1)(first lst2)))))))", "user": "59deba46e4b01968742fed7f"}, {"problem": 61, "code": "(fn f\n  [a b]\n  (apply hash-map (interleave a b)))", "user": "59e778aae4b0249b72820716"}, {"problem": 61, "code": "#(reduce merge (map (fn [x y] (assoc {} x y)) %1 %2))", "user": "59dd38a8e4b0a0ac046f2503"}, {"problem": 61, "code": "(fn [m v]\n\t(apply hash-map (interleave m v)))", "user": "59e55cc8e4b08badc2a0c555"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map vector ks vs)))", "user": "56403765e4b08d4f616f5edc"}, {"problem": 61, "code": "(fn mapConstruction\n  [i j] \n  (into {} (map vector i j)))", "user": "59dd3930e4b0a0ac046f2504"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "572de985e4b0cd1946bd0f7c"}, {"problem": 61, "code": "(fn Map-Construction\n  [a b]\n  (apply hash-map (interleave a b)))", "user": "59e14ee3e4b08badc2a0c50c"}, {"problem": 61, "code": "(fn cons-map\n  [lst1 lst2]\n  (->>\n    (interleave lst1 lst2)\n    (apply hash-map)))", "user": "59e8fef3e4b0249b72820743"}, {"problem": 61, "code": "(fn [listA listB]\n  (apply hash-map (interleave listA listB)))", "user": "59e4e3cbe4b08badc2a0c54a"}, {"problem": 61, "code": "(fn my-map [lst1 lst2]\n\t(apply hash-map \n           (mapcat #(cons %1 (list %2)) lst1 lst2)))", "user": "59dd387be4b0a0ac046f2502"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "59e9f03be4b0249b72820752"}, {"problem": 61, "code": "#(into {} (map (fn [key value]\n                  {key value}) %1 %2))", "user": "58a34442e4b02bd94d917ef2"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "59ea287ee4b0249b72820760"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "59e95cafe4b0249b7282074b"}, {"problem": 61, "code": "(fn q61\n  ([ks vs] (q61 ks vs {}))\n  ([[k & ks] [v & vs] acc]\n   (if (and k v)\n     (q61 ks vs (into acc {k v}))\n     acc)))", "user": "55916764e4b0604b3f94d57b"}, {"problem": 61, "code": "(fn map-construct\n  [lst1 lst2]\n  (apply hash-map (interleave lst1 lst2)))", "user": "59e68254e4b0249b728206fc"}, {"problem": 61, "code": "(fn [a b]\n  (apply hash-map (interleave a b)))", "user": "59dfd369e4b08badc2a0c4dd"}, {"problem": 61, "code": "(fn to-map [keys vals]\n        (into {}\n              (map #(vec %)\n                   (partition 2 (interleave keys vals))\n                   )\n              )\n        )", "user": "57ca95f2e4b05aa3c4741d3b"}, {"problem": 61, "code": "(fn f [k v]\n  (if (or (empty? v)(empty? k))\n    {}\n    (merge {(first k) (first v)} (f (rest k) (rest v)))\n  )\n)", "user": "59ea85e4e4b0249b72820767"}, {"problem": 61, "code": "(fn [l v]\n  (apply assoc {} (interleave l v)))", "user": "59e62655e4b08badc2a0c568"}, {"problem": 61, "code": "#(apply merge (map hash-map % %2))", "user": "59dd387ae4b0a0ac046f2501"}, {"problem": 61, "code": "(fn [ks vs]\n    (apply hash-map (interleave ks vs)))", "user": "5777cffae4b0979f89651651"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5957cc41e4b066ee0a44af76"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "59eb63e3e4b0249b7282077c"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "59ed01ede4b0249b7282079a"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "593c1e3be4b069cdc2982b86"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "59ee6801e4b0966464fe6a1f"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "59c8ffe6e4b0a024fb6ae56c"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "59ea0944e4b0249b72820758"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply hash-map (interleave ks vs)))", "user": "59e8cd8be4b0249b72820739"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))\n\n;; (comp (partial apply sorted-map) interleave) ;; damn, that would have been beautiful instead", "user": "59c76402e4b0a024fb6ae542"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply hash-map (mapcat #(vec [%1 %2])\n                          ks vs)))", "user": "501948b3e4b0b6630b101db5"}, {"problem": 61, "code": "#(apply merge \n       (map (fn [k v] (assoc {} k v)) %1 %2))", "user": "566e87cfe4b0a866af6896dc"}, {"problem": 61, "code": "#(reduce (fn [xs [k v]] (assoc xs k v)) {} (map (fn [a b] [a b]) % %2))", "user": "580e7761e4b0849f6811b753"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "59ef6cfae4b0966464fe6a32"}, {"problem": 61, "code": "(fn construct-map [k v]\n  (into {} (map vector k v))\n  )", "user": "59f78b49e4b0ca45a743a30e"}, {"problem": 61, "code": "(fn [xs ys]\n (->> (interleave xs ys)\n  (apply hash-map)))", "user": "57eaf869e4b0bfb2137f5b56"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "59f192e0e4b0966464fe6a5e"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "59fa107ce4b0ca45a743a353"}, {"problem": 61, "code": "(fn [ sq1 sq2 ]\n  (apply hash-map  (flatten (map (fn [ a1 a2 ] [a1 a2]) sq1 sq2))))", "user": "59f90e6ae4b0ca45a743a337"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "59fea630e4b01bb0ae8afd10"}, {"problem": 61, "code": "#(into {} (map hash-map %1 %2))", "user": "56f2611fe4b04a395b9a04a2"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5628f33ce4b00e49c7cb47f3"}, {"problem": 61, "code": "#(apply (partial assoc {}) (flatten (map vector %1 %2)))", "user": "59fa7fb0e4b0ca45a743a366"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "59a080e3e4b0871e7608b837"}, {"problem": 61, "code": "#(apply assoc {} (interleave % %2))", "user": "59e8bb43e4b0249b72820735"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (map (comp vec list) ks vs)))", "user": "59fa241ee4b0ca45a743a358"}, {"problem": 61, "code": "(fn [k v] (apply hash-map (interleave k v)))", "user": "5a04e923e4b01bb0ae8afda9"}, {"problem": 61, "code": "(fn [k v]\n  (into {} (map vector k v)))", "user": "5a065388e4b01bb0ae8afdcb"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "59f15e20e4b0966464fe6a5a"}, {"problem": 61, "code": "(comp (partial apply assoc {}) interleave)", "user": "5a01d8f6e4b01bb0ae8afd53"}, {"problem": 61, "code": "#(into {} (map hash-map %1 %2))", "user": "59ba2ea0e4b0a024fb6ae3e1"}, {"problem": 61, "code": "(fn map-constr [l1 l2]\n\n\t(apply hash-map (interleave l1 l2))\n\n\n\t)", "user": "5a025edde4b01bb0ae8afd64"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5a0b9fc0e4b04bbd27e6d992"}, {"problem": 61, "code": "(fn [k, v] (apply assoc {} (interleave k v)))", "user": "5a0a3473e4b0eab8c0448941"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "5a00cb31e4b01bb0ae8afd36"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "59f820d9e4b0ca45a743a316"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5a080bdde4b01bb0ae8afde9"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5a0a25fce4b0eab8c044893d"}, {"problem": 61, "code": "(fn [x y]\n  (apply hash-map (interleave x y)))", "user": "554b8b78e4b0a04f7929958d"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "59f2af64e4b0966464fe6a87"}, {"problem": 61, "code": "(fn [f s]\n  (->> (interleave f s)\n       (partition 2)\n       (reduce #(conj % (vec %2)) {})))", "user": "5703a557e4b08d47c97781f4"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "59250d2be4b072a2710fce64"}, {"problem": 61, "code": "(comp (partial into {}) (partial map vector))", "user": "5a12dea3e4b04bbd27e6da44"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "54497569e4b032a45b8693d2"}, {"problem": 61, "code": "(fn [xs ys] \n    (loop [xseq xs\n           yseq ys\n           result {}]\n          (if (and (not (empty? xseq))\n              \t   (not (empty? yseq)))\n              (recur (rest xseq) (rest yseq) (assoc result (first xseq) (first yseq)))\n              result)))", "user": "5830377ee4b051871117c004"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (map vector ks vs)))", "user": "5a188be3e4b0ff51aa4b31ec"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "598876fee4b021a7a535feb7"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "59fd069ae4b01bb0ae8afcf4"}, {"problem": 61, "code": "(fn f [x y]\n  (if (some empty? [x y])\n    {}\n    (conj (f (rest x) (rest y)) (vector (first x) (first y)))))", "user": "574b4f3ee4b02ea114799207"}, {"problem": 61, "code": "(fn [keys vals] (loop [output {}\n                         k keys\n                         v vals]\n                    (if (or (empty? k) (empty? v))\n                      output\n                      ;; else\n                      (recur (merge output {(first k) (first v)}) (rest k) (rest v))\n                      )))", "user": "5683fcafe4b0945ebc182aa8"}, {"problem": 61, "code": "#(apply hash-map (mapcat (fn [a b] (list a b)) %1 %2))", "user": "5a14228fe4b0ff51aa4b3193"}, {"problem": 61, "code": "(fn [& xs] (into {} (apply mapv vector xs)))", "user": "594bc7d6e4b07ddc2dafae3d"}, {"problem": 61, "code": "(fn mb [ks xs]\n  (into {} (map #(identity {%1, %2}) ks xs)))", "user": "5a0ce1a5e4b04bbd27e6d9b7"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2 ))", "user": "5a18488ee4b0ff51aa4b31e5"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "59f44189e4b0966464fe6aab"}, {"problem": 61, "code": "(fn iter [keys vals]\n\t(if (or (empty? keys) (empty? vals))\n\t\t{}\n      \t(assoc (iter (rest keys) (rest vals)) (first keys) (first vals)) ))", "user": "59f043d0e4b0966464fe6a3d"}, {"problem": 61, "code": "#(into {} (map vec (partition 2 (interleave %1 %2))))", "user": "59ff9424e4b01bb0ae8afd24"}, {"problem": 61, "code": "(fn [map-keys map-args] (reduce #(assoc %1 (first %2) (second %2)) {} (map vector map-keys map-args)))", "user": "5a21d34ce4b0ff51aa4b32b9"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "59135c11e4b0163c97b36f02"}, {"problem": 61, "code": "#(apply merge (map hash-map %1 %2))", "user": "5a1149ace4b04bbd27e6da26"}, {"problem": 61, "code": "(fn [a b] (into {} (map (fn [c d] [c d]) a b)))", "user": "59fa5773e4b0ca45a743a35e"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5a250b86e4b07f18be40aa19"}, {"problem": 61, "code": "(fn [the-keys the-values]\n  (reduce merge {} (map #(hash-map %1 %2) the-keys the-values)))", "user": "5054d243e4b0b1b9d1860eb5"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "59f75327e4b0966464fe6aec"}, {"problem": 61, "code": "(fn [keyz values] (loop [m {}\n                         ks (seq keyz)\n                         vs (seq values)]\n                    (if (and ks vs)\n                      (recur (assoc m (first ks) (first vs))\n                             (next ks)\n                             (next vs))\n                      m)))", "user": "5a135573e4b0ff51aa4b3180"}, {"problem": 61, "code": "#(loop [a %1\n   \t   \tb %2\n   \t    c {}]\n   (if (or (zero? (count a)) (zero? (count b)))\n     c\n     (recur (rest a) (rest b) (assoc c (first a) (first b)))))", "user": "595a3b41e4b066ee0a44afb7"}, {"problem": 61, "code": "(fn mpkv [keys values]\n  (into {}  (map vector keys values)))", "user": "5a05a807e4b01bb0ae8afdb8"}, {"problem": 61, "code": "(fn [l1 l2] (reduce (fn [m [k v]] (assoc m k v)) {} (map (fn [a b] [a b]) l1 l2)))", "user": "5a2df4a0e4b09cafd31c7f74"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "53de4bdae4b0d874e779ae32"}, {"problem": 61, "code": "(fn map-zipper [kwrds vls]\n  (into {} (map #(vector %1 %2) kwrds vls)) )", "user": "59fa0bb6e4b0ca45a743a352"}, {"problem": 61, "code": "(fn[k v] (into {} (map vector k v)))", "user": "590b8607e4b047aa04b199db"}, {"problem": 61, "code": "(fn [key value]\n  (let [pairs (partition 2 (interleave key value))]\n    (reduce (fn [map [key value]] (assoc map key value)) {} pairs)))", "user": "5a1bec89e4b0ff51aa4b322f"}, {"problem": 61, "code": "(fn [ks vs]\n    (loop [a_ks ks a_vs vs m {}]\n          (if (or (empty? a_ks) (empty? a_vs))\n              m\n              (recur (rest a_ks) (rest a_vs) (assoc m (first a_ks) (first a_vs))))))", "user": "5a34f342e4b0ddc586f153d1"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5a3c5c54e4b001c08efc0ce3"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5a3ece62e4b0447ef91cc5b9"}, {"problem": 61, "code": "(fn [aKeys values]\n  (reduce (fn [acc [aKey aVal]] (assoc acc aKey aVal)) {} (map vector aKeys values)))", "user": "5773f3a9e4b0979f896515f2"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5a3d33b3e4b001c08efc0cef"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply assoc {} (interleave ks vs)))", "user": "56ef077ae4b04a395b9a0459"}, {"problem": 61, "code": "(fn [a b]\n  (into {} (map vector a b))\n  )", "user": "55d7312ee4b0e31453f64a9f"}, {"problem": 61, "code": "#(apply array-map (interleave %1 %2))", "user": "5a285a38e4b07f18be40aa67"}, {"problem": 61, "code": "(fn [k v]\n  (apply array-map (flatten (map list k v))))", "user": "54bd9a60e4b0ed20f4ff6ee3"}, {"problem": 61, "code": "(fn [v w] (into {} (map #(vector %1 %2) v w)))", "user": "5a1c8c26e4b0ff51aa4b3247"}, {"problem": 61, "code": "(fn [& xs] (into {} (apply mapv vector xs)))", "user": "59b69bbee4b05c620303ca2a"}, {"problem": 61, "code": "(fn [a b] (into {} (map #(vector %1 %2) a b)))", "user": "57de5f0ee4b0bd073c202450"}, {"problem": 61, "code": "(fn [keys vals]\n  (loop [map {}\n         ks (seq keys)\n         vs (seq vals)]\n    (if (and ks vs)\n      (recur (assoc map (first ks) (first vs))\n             (next ks)\n             (next vs))\n      map)))", "user": "5a43347ee4b0447ef91cc603"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "5a3d7afae4b0447ef91cc5a6"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5a067f26e4b01bb0ae8afdcc"}, {"problem": 61, "code": "(fn [ks vs]\n  (loop [ks ks\n         vs vs\n         map {}]\n    (if (and (first ks) (first vs))\n      (recur (rest ks) (rest vs) (assoc map (first ks) (first vs)))\n      map)))", "user": "580a0783e4b0a837a8b30d2c"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5a4993c0e4b05d388ecb6b71"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5a4443cae4b0447ef91cc60f"}, {"problem": 61, "code": "(fn \n  [keys vals]\n    (loop [map {}\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map)))", "user": "56629a7de4b0e91d5f5c5649"}, {"problem": 61, "code": "#(into {} (map (fn [a b] [a b]) %1 %2))", "user": "5a4de614e4b05d388ecb6bb1"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "54f773bfe4b01ecee9d8881f"}, {"problem": 61, "code": "(fn \n  [map-keys map-values]\n  (into {} (map #(assoc {} (nth map-keys %) (nth map-values %)) (range (count (if (< (count map-keys) (count map-values)) map-keys map-values)))))\n)", "user": "5a4ec4f0e4b05d388ecb6bc2"}, {"problem": 61, "code": "(fn [ks vs] \n  (let [s (-> vs ((partial interleave ks)) ((partial partition 2)))]\n  (into {} (map vec s))\n    )\n  )", "user": "5a535572e4b05d388ecb6c0b"}, {"problem": 61, "code": "(fn [k v] (apply merge (map #(hash-map %1 %2)  k v)))", "user": "5a533cc0e4b05d388ecb6c09"}, {"problem": 61, "code": "#(apply sorted-map (interleave %1 %2))", "user": "5a534241e4b05d388ecb6c0a"}, {"problem": 61, "code": "#(apply assoc {} (interleave % %2))", "user": "59dfb8dbe4b08badc2a0c4da"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5a527beee4b05d388ecb6bfe"}, {"problem": 61, "code": "(fn [k v]\n  (reduce #(conj %1 {(k %2) (v %2)}) {} (range (min (count k) (count v))))\n)", "user": "5a244240e4b0ff51aa4b32e9"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5a1c3c11e4b0ff51aa4b323d"}, {"problem": 61, "code": "(fn [keys vals]\n  (apply hash-map (interleave keys vals)))", "user": "5182de5ce4b0353c468deb74"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5a566e8fe4b05d388ecb6c51"}, {"problem": 61, "code": "(fn [x y]\n  (into {} (map #(assoc {} %1 %2) x y)))", "user": "53f053ebe4b0742d9025b0d3"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5a512929e4b05d388ecb6be2"}, {"problem": 61, "code": "(fn zipmap- [keys vals]\n  (loop [m {}\n         ks (seq keys)\n         vs (seq vals)]\n    (if (and ks vs)\n      (recur (assoc m (first ks) (first vs))\n             (next ks)\n             (next vs))\n      m)))", "user": "565654dae4b0f9d632dd849f"}, {"problem": 61, "code": "(fn [& colls]\n  (into {} (apply map vector colls)))", "user": "51dafedee4b09f6bc204eee2"}, {"problem": 61, "code": "(fn [%1 %2] (apply hash-map (interleave %1 %2)))", "user": "5a51e029e4b05d388ecb6bf0"}, {"problem": 61, "code": "(fn [ks vs] (reduce (fn [agg [k v]] (assoc agg k v)) {} (map vector ks vs)))", "user": "552d9b31e4b076ab5578f7eb"}, {"problem": 61, "code": "(fn f\n  ([k v] (f k v {}))\n  ([k v m] (if (or (empty? k) (empty? v)) m (recur (rest k) (rest v) (conj m {(first k) (first v)}))) ))", "user": "5a3c2a08e4b001c08efc0cdf"}, {"problem": 61, "code": "#(reduce into {} (map hash-map %1 %2))", "user": "58a6806ee4b01a0c0b23292f"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "5a536cf2e4b05d388ecb6c10"}, {"problem": 61, "code": "(fn [k v]\n  (apply hash-map (interleave k v)))", "user": "5a58bfd0e4b05d388ecb6c84"}, {"problem": 61, "code": "(fn [kvect, vvect] (apply conj (map (fn [x y] (assoc {} x y)) kvect vvect)))", "user": "5a5894d9e4b05d388ecb6c81"}, {"problem": 61, "code": "(fn my-zipmap2 [keys vals]\n  (apply hash-map (interleave keys vals)))", "user": "5a621702e4b0512ff01cd983"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "56fd058be4b08d47c97781a1"}, {"problem": 61, "code": "#(into {} (map (fn [k v] [k v]) %1 %2))", "user": "5a424954e4b0447ef91cc5f0"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "53161a56e4b08068f379ed3e"}, {"problem": 61, "code": "(fn [ks vs]\n    (apply hash-map (interleave ks vs)))", "user": "5a5d0726e4b0512ff01cd91b"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5a34de78e4b0ddc586f153d0"}, {"problem": 61, "code": "#(apply assoc {} (interleave % %2))", "user": "5a52f2cbe4b05d388ecb6c06"}, {"problem": 61, "code": "(fn const\n  [keys values]\n  (when (and (not-empty keys) (not-empty values))\n    (assoc (const (rest keys) (rest values)) (first keys) (first values))))", "user": "5a6a32b6e4b0512ff01cda22"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5a257747e4b07f18be40aa1f"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5a6e145ee4b0512ff01cda68"}, {"problem": 61, "code": "(fn [x y]\n  (apply hash-map (interleave x y)))", "user": "5a6a7cc5e4b0512ff01cda27"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5a6b15e9e4b0512ff01cda32"}, {"problem": 61, "code": "(fn [a b]\n  (into {} (map vector a b)))", "user": "5a4caa20e4b05d388ecb6b94"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5a4b3abde4b05d388ecb6b81"}, {"problem": 61, "code": "(fn [a b] (apply assoc {} (mapcat #(vector %1 %2) a b)))", "user": "5a66f358e4b0512ff01cd9d5"}, {"problem": 61, "code": "(fn [k v]\n  (loop [k k\n         v v\n         res {}]\n    (if (and (seq k) (seq v))\n      (recur (rest k) (rest v) (assoc res (first k) (first v)))\n      res)))", "user": "5a6b9b95e4b0512ff01cda40"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "5a488c09e4b05d388ecb6b68"}, {"problem": 61, "code": "(fn [%1 %2]\n\n  (loop [coll1 %1\n         coll2 %2\n         result {}]\n    (if-not (or (empty? coll1) (empty? coll2))\n      (recur (rest coll1) (rest coll2)    (conj result {(first coll1) (first coll2)}) )\n      result)\n    )\n  )", "user": "5a71c89ee4b0512ff01cda93"}, {"problem": 61, "code": "(fn my-zipmap\n  [ks vs]\n  (into {} (map hash-map ks vs)))", "user": "579f89d5e4b05302be0b72ff"}, {"problem": 61, "code": "(fn\n  [ksa vsa]\n  (loop [ks ksa vs vsa res {}]\n    (if (or (empty? ks) (empty? vs))\n      res\n      (let [next-key (first ks) next-val (first vs)]\n        (recur (rest ks) (rest vs) (assoc res next-key next-val))))))", "user": "529f9bf2e4b04e0c58e87bb4"}, {"problem": 61, "code": "(fn [ks vs]\n    (apply hash-map (interleave ks vs)))", "user": "5920c191e4b09b4ee5954c61"}, {"problem": 61, "code": "#(into (sorted-map) (map (fn [x y] [x y]) %1 %2))", "user": "5a4d656fe4b05d388ecb6ba9"}, {"problem": 61, "code": "(fn [seq1 seq2]\n  (apply assoc {}\n    (interleave seq1 seq2)))", "user": "5a754d36e4b0512ff01cdac7"}, {"problem": 61, "code": "(fn [kss vss]\n  (loop [res {} \n         ks (seq kss) \n         vs (seq vss)]\n    (if (and ks vs)\n      (recur (assoc res (first ks) (first vs))\n             (next ks)\n             (next vs))\n      res)))", "user": "5a6af090e4b0512ff01cda2d"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (map vector ks vs)))", "user": "4fd4bddce4b0d4de60cee36e"}, {"problem": 61, "code": "(fn [k v]\n  (loop [k k, v v, res {}]\n    (if (and (seq k) (seq v))\n      (recur (rest k) (rest v) (assoc res (first k) (first v)))\n      res)))", "user": "5a7ae674e4b03baeef9276d5"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "59cd13d5e4b0ef0a1e9b5b32"}, {"problem": 61, "code": "(fn into-map [x y]\n  (loop [index 0 output {}]\n    (if-not (and (contains? x index) (contains? y index)) output\n            (recur (inc index) (assoc output (nth x index) (nth y index))))))", "user": "58f5b58ae4b0438e51c2cedc"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "5a625bc2e4b0512ff01cd989"}, {"problem": 61, "code": "(fn [coll1 coll2] (apply hash-map (interleave coll1 coll2)))", "user": "5a5dbe9de4b0512ff01cd92b"}, {"problem": 61, "code": "(fn [%1 %2] (into {} (map (fn [%1 %2] { %1 %2 }) %1 %2)))", "user": "5a63f8bae4b0512ff01cd99f"}, {"problem": 61, "code": "(fn [a b] (reduce into {} (map #(assoc {} %1 %2) a b)))", "user": "59da6480e4b0ef0a1e9b5c68"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5a23cabce4b0ff51aa4b32df"}, {"problem": 61, "code": "(fn [ks vs] (apply hash-map (interleave ks vs)))", "user": "5a813b90e4b00b71e582a065"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5a86ad84e4b05369db4d249c"}, {"problem": 61, "code": "(fn [v1 v2]\n   (loop [i 0 m {}]\n     (if (= (min (count v1) (count v2)) i)\n       m\n       (recur (inc i) (assoc m (nth v1 i) (nth v2 i))))))", "user": "5a653f80e4b0512ff01cd9b2"}, {"problem": 61, "code": "(fn [keys vals]\n   (loop [k keys\n          v vals\n          acc {}]\n     (cond\n       (or (empty? v) (empty? k)) acc\n       :else (recur (rest k) (rest v) (assoc acc (first k) (first v))))))", "user": "5a8bc2a1e4b05369db4d24ef"}, {"problem": 61, "code": "(fn [ks vs]\n  (into (hash-map)\n        (map (fn [k v] [k v]) ks vs)))", "user": "5a95c639e4b0d174b936c75e"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5a95e50be4b0d174b936c760"}, {"problem": 61, "code": "(fn [coll1 coll2]\n  (apply hash-map (interleave coll1 coll2)))", "user": "5a99b688e4b0d174b936c7a6"}, {"problem": 61, "code": "(fn [a b]\n  (apply hash-map (interleave a b))\n )", "user": "5a984657e4b0d174b936c78a"}, {"problem": 61, "code": "(fn [keys values] (apply hash-map (interleave keys values)))", "user": "5a99b83fe4b0d174b936c7aa"}, {"problem": 61, "code": "(fn [x y] \n  (loop [a x b y new {}]\n    (if (or (empty? a) (empty? b))\n       new\n      (recur (rest a) (rest b) (assoc new (first a) (first b))))))", "user": "5a9482b7e4b0d174b936c737"}, {"problem": 61, "code": "(fn problem-61 [v1 v2]\n  (into {} (map vector v1 v2)))", "user": "5a786f6be4b013a48d39976e"}, {"problem": 61, "code": "(fn[m n]\n  (into {} (map vector m n)))", "user": "5a99b844e4b0d174b936c7ab"}, {"problem": 61, "code": "(fn [k v] (reduce into {} (map #(assoc {} %1 %2) k v)))", "user": "5a75da49e4b0512ff01cdacf"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5a5767f3e4b05d388ecb6c65"}, {"problem": 61, "code": "(fn [x y] {x y} \n    (reduce merge (map (fn [a b] {a b}) x y))\n )", "user": "5a6afb1de4b0512ff01cda2f"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "5a9829e5e4b0d174b936c788"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5a9dbffbe4b0d174b936c7f4"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5a99b863e4b0d174b936c7ae"}, {"problem": 61, "code": "#(apply hash-map \n        (interleave %1 %2))", "user": "5a9cdec0e4b0d174b936c7e1"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5a9dbb32e4b0d174b936c7f3"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5a9f005be4b0d174b936c810"}, {"problem": 61, "code": "(fn\n  [keys values]\n  (apply hash-map (interleave keys values)))", "user": "5aa2f1dee4b0d174b936c865"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5aa00b7fe4b0d174b936c825"}, {"problem": 61, "code": "(fn [v1 v2] (reduce (fn [a b] (assoc a (nth v1 b) (nth v2 b))) {} (range 0 (min (count v1) (count v2)))))", "user": "5a9e3698e4b0d174b936c7fc"}, {"problem": 61, "code": "#(into {} (map hash-map %1 %2))", "user": "5892a5fde4b00487982d5228"}, {"problem": 61, "code": "(fn [la lb]\n  (reduce conj (map hash-map la lb)))", "user": "5a99cab6e4b0d174b936c7b2"}, {"problem": 61, "code": "#(apply hash-map \n        (interleave %1 %2))", "user": "5aa4b961e4b0d174b936c888"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5a99b766e4b0d174b936c7a8"}, {"problem": 61, "code": "(fn [keys, values]\n  (loop [my-map {} ix 0]\n\t(if (or (> (inc ix) (count keys)) (> (inc ix) (count values)))      \n      my-map\n      (recur (assoc my-map (nth keys ix) (nth values ix)) (inc ix)))))", "user": "5a9ac061e4b0d174b936c7c1"}, {"problem": 61, "code": "(fn map-cons\n  [x y] \n  \n  (apply assoc {} (interleave x y)))", "user": "5a99ae99e4b0d174b936c7a4"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5a99b848e4b0d174b936c7ac"}, {"problem": 61, "code": "#(apply array-map (interleave %1 %2))", "user": "5aa6d44de4b0d174b936c8b2"}, {"problem": 61, "code": "#(apply hash-map (flatten (map list %1 %2)))\n\n;Reference for hash-map https://clojuredocs.org/clojure.core/hash-map", "user": "5a99b87ee4b0d174b936c7af"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5aa1e0f1e4b0d174b936c84e"}, {"problem": 61, "code": "(fn [x n] \n  (apply assoc {} (interleave x n)))", "user": "5a99b861e4b0d174b936c7ad"}, {"problem": 61, "code": "(fn [s t]\n  (loop [[k & keys] s\n         [v & values] t\n         m {}]\n       (if (or (nil? k) (nil? v))  \n          m\n          (recur keys values (assoc m k v)))))", "user": "5591b61ee4b0604b3f94d580"}, {"problem": 61, "code": "(fn [keys vals]\n  (loop [r {}\n         k (seq keys)\n         v (seq vals)]\n    \n    (if (and k v)\n      ;;\n      (recur (assoc r (first k) (first v)) (next k) (next v))\n      r)))", "user": "58637221e4b0f14aab7c881d"}, {"problem": 61, "code": "(fn zip\n  ([k v] (zip k v {}))\n  ([k v ans]\n   (if (or (empty? k) (empty? v))\n     ans\n     (zip (rest k) (rest v) (assoc ans (first k) (first v)))\n     )\n   )\n  )", "user": "5a90395ce4b05369db4d254a"}, {"problem": 61, "code": "(fn [a b] (into {} (map (fn [a b][ a b]) a b)))", "user": "51421cd5e4b0b50abeb46b2c"}, {"problem": 61, "code": "#( apply hash-map (interleave %1 %2))", "user": "58a32c21e4b02bd94d917eeb"}, {"problem": 61, "code": "#(reduce (fn [c [k v]] (assoc c k v)) {} (map list % %2))", "user": "5a8e9a7ae4b05369db4d2528"}, {"problem": 61, "code": "(fn [k v]\n  (->>\n   (map #(hash-map %1 %2) k v)\n   (apply conj)))", "user": "5aabd34fe4b073f177442565"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map vector ks vs)))", "user": "5aa998c6e4b0d174b936c8e5"}, {"problem": 61, "code": "(fn [ks vs] (apply hash-map (interleave ks vs)))", "user": "4fd2529ae4b04c3a95aa041f"}, {"problem": 61, "code": "(fn [lst1 lst2]\n  (apply hash-map\n         (interleave lst1 lst2)))", "user": "5a99c5a9e4b0d174b936c7b1"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5a61bf79e4b0512ff01cd97b"}, {"problem": 61, "code": "#(into {} (map (fn [a b] {a b}) %1 %2))", "user": "5ab23a78e4b073f1774425e1"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5ab16992e4b073f1774425c4"}, {"problem": 61, "code": "(fn my-zip-map [seqOne seqTwo]\n  (->>\n    (map #(vector %1 %2) seqOne seqTwo)\n    (reduce (fn [map [key value]] (assoc map key value)) {})\n    )\n  )", "user": "5aada061e4b073f17744257a"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5a67cedbe4b0512ff01cd9ee"}, {"problem": 61, "code": "(fn [ks vs] (loop [m {} k ks v vs] (if (or (empty? k) (empty? v)) m (recur (conj m [(first k) (first v)]) (rest k) (rest v)))))", "user": "5ab564f8e4b073f177442639"}, {"problem": 61, "code": "(fn myzipmap [coll1 coll2]\n  (loop [input1 coll1\n         input2 coll2\n         result {}]\n    (if (or (empty? input1) (empty? input2))\n      result\n      (recur (rest input1) (rest input2) (assoc result (first input1) (first input2))))))", "user": "5ab490f4e4b073f17744261d"}, {"problem": 61, "code": "(fn [a b] (apply hash-map (interleave a b)))", "user": "55d50a38e4b0e31453f64a80"}, {"problem": 61, "code": "(fn [x y]\n  (loop [a x\n         b y\n         m {}]\n    (cond \n     (empty? a) m\n     (empty? b) m\n     :else (recur (rest a) (rest b) (assoc m (first a) (first b))))))", "user": "5ab9fe71e4b073f17744269d"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5abb02ade4b073f1774426bc"}, {"problem": 61, "code": "#(into {}\n        (map (fn [f s]\n               (hash-map f s)) %1 %2))", "user": "5ab23c99e4b073f1774425e2"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5ab276f2e4b073f1774425e6"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "59769d75e4b01722bebd4cdd"}, {"problem": 61, "code": "(fn [ks vs] (apply hash-map (interleave ks vs)))", "user": "5abc5a09e4b073f1774426e9"}, {"problem": 61, "code": "(fn[param1 param2]\n               (->>\n                 (interleave param1 param2)\n                 (partition 2)\n                 (map vec)\n                 (into {})\n                 \n\n\n                 ))", "user": "5ab575f8e4b073f17744263d"}, {"problem": 61, "code": "(fn [start-ks start-vs]\n  (loop [\n         [k & ks] start-ks\n         [v & vs] start-vs\n         m {}\n         ]\n    (if (and k v)\n      (recur ks vs (assoc m k v))\n      m\n      )\n    )\n  )", "user": "5ab5f60be4b073f177442643"}, {"problem": 61, "code": "(fn\n  [collA collB]\n  (apply hash-map (interleave collA collB)))", "user": "5ac35d00e4b0e27600da7712"}, {"problem": 61, "code": "(fn [x y] (apply assoc {} (interleave x y)))", "user": "5ac4d1f6e4b0e27600da7735"}, {"problem": 61, "code": "#(apply sorted-map (interleave %1 %2))", "user": "5ac37d0fe4b0e27600da7718"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5abe2fc2e4b073f17744271e"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5a9a12d6e4b0d174b936c7b7"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5a6170fde4b0512ff01cd975"}, {"problem": 61, "code": "(fn [keys values] (apply assoc {} (interleave  keys values)))", "user": "5a634ff0e4b0512ff01cd995"}, {"problem": 61, "code": "(fn [elems1 elems2]\n    (into {} (map vector elems1 elems2)))", "user": "5ac6ef9be4b0e27600da7779"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5a9db5c9e4b0d174b936c7f1"}, {"problem": 61, "code": "(fn zm [kl vl]\n  (->>\n    (map-indexed (fn [i k]\n                   (when-let [v (get vl i)]\n                     {k v}))\n                 kl)\n    (apply merge)))", "user": "5a8fd113e4b05369db4d2542"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5a59a76fe4b05d388ecb6c98"}, {"problem": 61, "code": "(fn [ks vls] (into {} (map vector ks vls)))", "user": "59a8a4dce4b0bcf4e9a43af7"}, {"problem": 61, "code": "(fn mapper\n  ([x y]\n   (mapper x y {}))\n  ([x y a]\n   (if (or (empty? x) (empty? y))\n     a\n     (recur (rest x) (rest y) (merge a (hash-map (first x) (first y)))))))", "user": "5ac741d6e4b0e27600da777d"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map vector ks vs)))", "user": "531bf76fe4b08068f379ed96"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "5254b45fe4b0541d1855b9a0"}, {"problem": 61, "code": "(fn [xs ys]\n   (apply hash-map (mapcat #(list %1 %2) xs ys))\n   )", "user": "5ac85708e4b0e27600da77ac"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5acd08eee4b0e27600da7822"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "58d96bdce4b0a4d5acaab638"}, {"problem": 61, "code": "(fn  [keys-vec values-vec]\n  (apply hash-map (interleave keys-vec values-vec)))", "user": "5acd235ae4b0e27600da7824"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5ad63a34e4b0ea6055cfac01"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5acd1a43e4b0e27600da7823"}, {"problem": 61, "code": "(fn [keys values]\n  (into {}\n  (map (fn [k v] (vector k v)) keys values)))", "user": "5ad99ddee4b0ea6055cfac3a"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5a544eeee4b05d388ecb6c24"}, {"problem": 61, "code": "(fn [a b] (into {} (map vector a b)))", "user": "5ade6bafe4b0837691e92c23"}, {"problem": 61, "code": "(fn [c1 c2]\n  (loop [ret {} c1 c1 c2 c2]\n    (if (or (nil? (first c1)) (nil? (first c2)))\n      ret\n      (recur (assoc ret (first c1) (first c2)) (rest c1) (rest c2)))))", "user": "5971a017e4b01722bebd4c75"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5ae0976be4b0837691e92c43"}, {"problem": 61, "code": "#(apply assoc {} (interleave % %2))", "user": "5ac92dc3e4b0e27600da77bf"}, {"problem": 61, "code": "(fn f [k v]\n   (loop [k_ k v_ v map {}]\n     (if (or (empty? k_) (empty? v_))\n       map\n       (recur (rest k_) (rest v_)\n              (conj map [(first k_) (first v_)])))))", "user": "589f37e0e4b02bd94d917e79"}, {"problem": 61, "code": "(fn [ks vs] (apply hash-map (mapcat vector ks vs)))", "user": "5adf5f9be4b0837691e92c33"}, {"problem": 61, "code": "(fn mapy[cles vales]\n  (loop [a cles b vales c {}]\n    (if (and (seq a) (seq b))\n      (recur (rest a) (rest b) (assoc c (first a) (first b)))\n      c)))", "user": "5a6cb2eae4b0512ff01cda57"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5ac04101e4b073f177442737"}, {"problem": 61, "code": "(fn __\n  [keys values]\n  (->> (map #(list %1 %2) keys values)\n      (reduce #(assoc %1 (first %2) (second %2)) {})))", "user": "5ac91d90e4b0e27600da77bd"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5ae246b1e4b0837691e92c5d"}, {"problem": 61, "code": "#(loop [keys %1 vals %2 mp {}]\n     (if (or (empty? vals) (empty? keys))\n       mp\n       (recur (rest keys) (rest vals) (assoc mp (first keys) (first vals)))))", "user": "5831846ae4b051871117c02c"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5a353bdae4b0ddc586f153d9"}, {"problem": 61, "code": "(fn [keys vals] \n  (into {} (map #(vector %1 %2) keys vals)))", "user": "5aefdc7fe4b0cc2b61a3bc3f"}, {"problem": 61, "code": "(fn [& xs] (into {} (apply mapv vector xs)))", "user": "53d5d43ce4b0e771c302544d"}, {"problem": 61, "code": "(fn my-zipmap\n    ([x y]\n     (my-zipmap x y {})\n     )\n    ([x y m]\n     (if (or (empty? x) (empty? y))\n       m\n       (my-zipmap (rest x) (rest y) (assoc m (first x) (first y)))\n       )))", "user": "5a9d64c8e4b0d174b936c7eb"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5991eec7e4b0866487ed0d6e"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5a084a24e4b01bb0ae8afdf2"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5aeca4c9e4b0cc2b61a3bc0a"}, {"problem": 61, "code": "(fn [& args] \n  (->> (apply mapcat (fn [& items] items) args)\n      (apply hash-map)))", "user": "5976da27e4b01722bebd4ce3"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5af31955e4b0cc2b61a3bc7a"}, {"problem": 61, "code": "(fn\n  [k v]\n    (loop [r {}\n           k k\n           v v]\n      (if (and k v)\n        (recur (assoc r (first k) (first v))\n               (next k)\n               (next v))\n        r)))", "user": "5af907e6e4b0cc2b61a3bcda"}, {"problem": 61, "code": "#(into {} (map (fn [a b] [a b]) %1 %2))", "user": "5649b1b0e4b0284900eef646"}, {"problem": 61, "code": "(fn [ke va]\n  (reduce #(assoc %1 (first %2) (second %2)) {} (map #(vector %1 %2) ke va)))", "user": "5adcc688e4b0837691e92c05"}, {"problem": 61, "code": "(fn [keys vals]\n   (loop [map {}\n          k (seq keys)\n          v (seq vals)]\n      (if (and k v)\n        (recur (merge map {(first k) (first v)}) (next k) (next v))\n        map)))", "user": "5aa4a1ffe4b0d174b936c886"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map vector ks vs)))", "user": "5afb4b15e4b0cc2b61a3bcf6"}, {"problem": 61, "code": "(comp\n (partial into {})\n (partial map vector))", "user": "5af8221ce4b0cc2b61a3bccd"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5b008bcae4b0cc2b61a3bd3d"}, {"problem": 61, "code": "(fn [a b] (apply hash-map (interleave a b)))", "user": "57086931e4b0b0fb43fd069e"}, {"problem": 61, "code": "(fn [coll1 coll2] (into {} (map #(vector %1 %2) coll1 coll2)))", "user": "5a0ef454e4b04bbd27e6d9fa"}, {"problem": 61, "code": "(fn bangunmap\n  [keym valm]\n  (cond\n    (or (empty? keym) (empty? valm)) {}\n    :else (conj (bangunmap (rest keym) (rest valm)) [(first keym) (first valm)])))", "user": "5b02a170e4b0cc2b61a3bd52"}, {"problem": 61, "code": "(fn [frs scn]\n  (loop [x frs\n         y scn\n         result {}]\n    (if (or (empty? y) (empty? x))\n      result\n      (recur (rest x) (rest y) (assoc result (first x) (first y))))))", "user": "5af74644e4b0cc2b61a3bcc2"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5aa4f7dae4b0d174b936c88c"}, {"problem": 61, "code": "#(loop\n   [a %1\n    b %2\n    s {}]\n   (if (or (empty? a) (empty? b)) s\n       (recur (rest a) (rest b) (conj s {(first a) (first b)}))))", "user": "55e732c5e4b050e68259b492"}, {"problem": 61, "code": "(fn [x y]\n  (apply assoc {} (interleave x y)))", "user": "5b0180cfe4b0cc2b61a3bd47"}, {"problem": 61, "code": "(fn\n  [ks vs]\n  (into {} (map vector\n       ks vs)))", "user": "5afcd6d1e4b0cc2b61a3bd17"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "583048d9e4b051871117c007"}, {"problem": 61, "code": "(fn [ks vs]\n  (loop [res {}\n         ks (seq ks)\n         vs (seq vs)]\n    (if (and ks vs)\n      (recur (assoc res (first ks) (first vs)) (next ks) (next vs))\n      res)))", "user": "59d9dcfbe4b0ef0a1e9b5c5d"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5b0e6795e4b0cc2b61a3be03"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "5b0546eae4b0cc2b61a3bd7e"}, {"problem": 61, "code": "(fn f [ks vls]\n  (->> (map (fn [k v] [k v]) ks vls)\n       (into {})))", "user": "5777c3d6e4b0979f8965164f"}, {"problem": 61, "code": "#(apply hash-map(interleave %1 %2))", "user": "5b1619e4e4b0cc2b61a3be77"}, {"problem": 61, "code": "#(loop [l1 %1 l2 %2 o {}]\n        (if (or (empty? l1) (empty? l2))\n            o\n            (recur\n                (rest l1)\n                (rest l2)\n                (assoc o (first l1) (first l2)))))", "user": "5b083513e4b0cc2b61a3bdb4"}, {"problem": 61, "code": "#(loop [m {}\n         k  %\n         v  %2]\n    (if (and v k)\n      (recur\n       (assoc m (first k) (first v))\n       (next k) (next v))\n      m))", "user": "5afdca89e4b0cc2b61a3bd20"}, {"problem": 61, "code": "(fn construct-map [ks vs]\n  (reduce\n    (fn [z h]\n        (assoc z (nth ks h) (nth vs h)))\n    {}\n    (range (min (count ks) (count vs)))))", "user": "5b15811ee4b0cc2b61a3be6f"}, {"problem": 61, "code": "#(apply merge (map (fn [x y] {x y}) %1 %2 ))", "user": "5b0b8d29e4b0cc2b61a3bdd7"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "54df2609e4b024c67c0cf7a9"}, {"problem": 61, "code": "(fn [x y] (into {} (map vector x y)))", "user": "56aad332e4b03c432f187337"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "57d418b4e4b0bd073c20239a"}, {"problem": 61, "code": "(fn [ks vs]\n  (loop\n    [k ks\n     v vs\n     m {}]\n    (if (or (= k '()) (= v '()))\n      m\n      (recur (rest k) (rest v) (assoc m (first k) (first v))))))", "user": "5b1c16e1e4b03cfeda66ecf2"}, {"problem": 61, "code": "(fn [xs ys]\n    (->>\n      (map-indexed (fn [i y] [(get xs i) y]) ys)\n      (filter\n        #(->> (map nil? %) \n              (map not) \n              (reduce (fn [x y] (and x y)))\n              )\n        )\n      (reduce conj {})\n      )\n    )", "user": "5b118b7be4b0cc2b61a3be34"}, {"problem": 61, "code": "#(reduce conj (map hash-map %1 %2))", "user": "570eeb66e4b0b0fb43fd06fa"}, {"problem": 61, "code": "#(apply assoc {} (mapcat list % %2))", "user": "5b22328ee4b03cfeda66ed5d"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5a0c822fe4b04bbd27e6d9b0"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "52c03baee4b07a9af5792347"}, {"problem": 61, "code": "#(apply hash-map (mapcat (fn[x y] [x y]) %1 %2))", "user": "5b210749e4b03cfeda66ed48"}, {"problem": 61, "code": "(fn [k v]\n (apply merge \n  (mapv #(hash-map %1 %2) k v))\n)", "user": "59c243bae4b0a024fb6ae4aa"}, {"problem": 61, "code": "(fn my-zipmap [keys vals]\n  (letfn [(build-zip [maps keys vals]\n            (if (or (empty? keys) (empty? vals))\n              maps\n              (build-zip\n                (assoc maps (first keys) (first vals))\n                (rest keys)\n                (rest vals))))]\n    (build-zip {} keys vals)))", "user": "5b107263e4b0cc2b61a3be22"}, {"problem": 61, "code": "(fn [keys vals] (loop [map {} ks (seq keys) vs (seq vals)] (if (not (and ks vs)) map (recur (assoc map (first ks) (first vs)) (next ks) (next vs)))))", "user": "5addadfce4b0837691e92c13"}, {"problem": 61, "code": "(fn my-zipmap [xs ys]\n   (into {} (map #(hash-map % %2) xs ys)))", "user": "4e6a23d0535d8ccf87e9fea0"}, {"problem": 61, "code": "(fn [c1 c2] (into {} (map #(vector %1 %2) c1 c2)))", "user": "5922f8a9e4b026ae3852128f"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5b34aba7e4b025bcb146f352"}, {"problem": 61, "code": "#(apply merge (map hash-map %1 %2))", "user": "59e8a952e4b0249b72820733"}, {"problem": 61, "code": "(fn [k v]\n  (into {} (map vector k v)))", "user": "5b2c79c6e4b025bcb146f2b7"}, {"problem": 61, "code": "(fn [k v] (into {} (map #(vector %1 %2) k v)))", "user": "5b3f2ba9e4b02d533a91bc09"}, {"problem": 61, "code": "#( loop[ ks %1 vs %2 res {} ] ( if ( some empty? [ks vs] ) res (recur (rest ks) (rest vs) (conj res { (first ks) (first vs) } ) ) ) )", "user": "5b3aa98be4b02d533a91bbca"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5b0948f3e4b0cc2b61a3bdbb"}, {"problem": 61, "code": "(fn [listOne listTwo]\n  (loop [remainingFirst listOne remainingSecond listTwo output {}]\n  (println remainingFirst remainingSecond output)\n  (if (or (empty? remainingFirst) (empty? remainingSecond))\n    output\n    (recur (rest remainingFirst) (rest remainingSecond) (conj output (hash-map (first remainingFirst) (first remainingSecond))))))\n)", "user": "5b3de9a7e4b02d533a91bbf4"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5b47874be4b02d533a91bc70"}, {"problem": 61, "code": "(fn [k v] (reduce conj (map (fn [i] {(nth k i) (nth v i)}) (range (min (count k) (count v))))))", "user": "5b465b8be4b02d533a91bc65"}, {"problem": 61, "code": "(fn map-reduce [ks vs]\n  (into {} (map #(assoc {} % %2) ks vs)))", "user": "51316a63e4b0431ba07e7feb"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5b2a559be4b063e2438bcc74"}, {"problem": 61, "code": "(fn my-zipmap\n  [coll1 coll2]\n  (apply hash-map (interleave coll1 coll2)))", "user": "5adbbf89e4b0837691e92bf4"}, {"problem": 61, "code": "#(reduce merge (map hash-map %1 %2))", "user": "59ef5280e4b0966464fe6a2b"}, {"problem": 61, "code": "(fn [ks vs] (apply hash-map (flatten (map #(vector %1 %2) ks vs))))", "user": "5b4b4052e4b02d533a91bc9a"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5b4a0ce3e4b02d533a91bc92"}, {"problem": 61, "code": "(fn mapc [coll1 coll2] (into {} (map vector coll1 coll2)))", "user": "5b421edce4b02d533a91bc2c"}, {"problem": 61, "code": "(fn [as bs] (apply hash-map (interleave as bs)))", "user": "54d5fbe9e4b0a52adc2e2014"}, {"problem": 61, "code": "(fn my-zip-map [ks vs]\n  (loop [ks ks, vs vs, acc {}]\n    (if (or (empty? ks) (empty? vs))\n        acc\n        (recur (rest ks) (rest vs) (assoc acc (first ks) (first vs))))))", "user": "5b51b9f8e4b02d533a91bcfe"}, {"problem": 61, "code": "(fn [k v]\n    (reduce (fn [m kv] (assoc m (first kv) (second kv))) {} (map #(vector %1 %2) k v)))", "user": "5b4ff637e4b02d533a91bce0"}, {"problem": 61, "code": "(fn zipm [ks vs] (into {} (map #(vector %1 %2) ks vs)))", "user": "5b552117e4b02d533a91bd2c"}, {"problem": 61, "code": "(fn [& xs]\n  (into {} (apply mapv vector xs)))", "user": "5b4dfd5de4b02d533a91bcc3"}, {"problem": 61, "code": "(fn [keys vals] (into {} (mapv vector keys vals)))", "user": "5acc961ae4b0e27600da7810"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "5aeb0b44e4b0cc2b61a3bbee"}, {"problem": 61, "code": "(fn myzipmap [k v]\n  (if (or (empty? k) \n          (empty? v))\n    nil\n    (assoc (myzipmap (rest k)\n                     (rest v))\n           (first k)\n           (first v))))", "user": "5b5d255de4b0c6492753e6c8"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "59bcbfd0e4b0a024fb6ae419"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5b274fd1e4b063e2438bcc3b"}, {"problem": 61, "code": "(fn [ks vs]\n  (reduce\n   (fn [coll [k v]] (conj coll {k v}))\n   {}\n   (map vector ks vs)))", "user": "5b500215e4b02d533a91bce2"}, {"problem": 61, "code": "(fn f [[i1 & r1] [i2 & r2]]\n    (merge \n      {i1 i2}\n      (when (and (seq r1) (seq r2))\n        (f r1 r2))))", "user": "5ab1665de4b073f1774425c0"}, {"problem": 61, "code": "(fn [keys vals] (loop [map {}\n                        ks (seq keys)\n                        vs (seq vals)]\n                   (if (and ks vs)\n                     (recur (assoc map (first ks) (first vs))\n                            (next ks)\n                            (next vs))\n                     map)))", "user": "57a6552ce4b0a96607956208"}, {"problem": 61, "code": "(fn zm [kys vlz]\n  (reduce\n   conj\n   (map\n    (fn [k v] {k v})\n    kys\n    vlz\n    )\n   )\n  )", "user": "5b5e5019e4b0c6492753e6d3"}, {"problem": 61, "code": "#(->> (interleave %1 %2)\n      (apply hash-map))", "user": "5b073c34e4b0cc2b61a3bda4"}, {"problem": 61, "code": "(fn [a b] (into {} (map vector a b)))", "user": "5b5e7953e4b0c6492753e6d9"}, {"problem": 61, "code": "(fn [keyColl valColl]\n  (into \n   {} \n   (map vector keyColl valColl)))", "user": "5b3251c1e4b025bcb146f317"}, {"problem": 61, "code": "#(apply merge (map (fn [a b] {a b}) %1 %2))", "user": "5b59d176e4b02d533a91bd86"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "5b61aa6ae4b0c6492753e712"}, {"problem": 61, "code": "(fn [k v] (apply assoc {} (interleave k v)))", "user": "5b58d012e4b02d533a91bd71"}, {"problem": 61, "code": "(fn [ks vs] (apply hash-map (mapcat (fn [k v] [k v]) ks vs)))", "user": "56e2ca59e4b03a7c14b85a38"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5b6473eee4b0c6492753e73f"}, {"problem": 61, "code": "(fn\n  [coll1 coll2]\n  (into {} (map vector coll1 coll2)))", "user": "5a3c06fce4b001c08efc0cdd"}, {"problem": 61, "code": "#(into {} (map (fn [[a b]] (vector a b)) (partition 2 (interleave %1 %2))))", "user": "5b2689e3e4b063e2438bcc33"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5b611666e4b0c6492753e70d"}, {"problem": 61, "code": "(fn [as bs] (reduce merge (map (fn [a b] {a b}) as bs)))", "user": "5b67f0fbe4b0c6492753e76d"}, {"problem": 61, "code": "(fn [a b]\n  (into {} (map vector (apply list a) b)))", "user": "5b7292b3e4b047b03b2036a4"}, {"problem": 61, "code": "#(into {} (map vector (apply list %1) %2))", "user": "5b6962c1e4b0c6492753e787"}, {"problem": 61, "code": "(fn make-map [ks vs]\n  (apply hash-map (interleave ks vs)))", "user": "56175cf9e4b06b1bb2182a0f"}, {"problem": 61, "code": "(fn [ks vs] (reduce #(assoc %1 (first %2) (second %2)) {} (map vector ks vs)))", "user": "5aeec90fe4b0cc2b61a3bc31"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5b754f8ee4b047b03b2036c9"}, {"problem": 61, "code": "#(apply array-map (interleave %1 %2))", "user": "5b4c2212e4b02d533a91bca6"}, {"problem": 61, "code": "(fn [ks vs] (loop [ks ks vs vs res {}]\n              (if-not (and (first ks) (first vs))\n                res\n                (recur (rest ks) (rest vs) (assoc res (first ks) (first vs))))))", "user": "5b7ec039e4b047b03b20375d"}, {"problem": 61, "code": "(fn [ks vs] (apply merge (map #(hash-map %1 %2) ks vs)))", "user": "5b64370ae4b0c6492753e73c"}, {"problem": 61, "code": "#(apply hash-map ((fn !\n   ([a b xs]\n    (if (not (or (empty? a) (empty? b)))\n      (recur (rest a) (rest b) (concat xs [(first a) (first b)]))\n      xs))\n   ([a b] (! a b [])))\n %1 %2))", "user": "5b73e500e4b047b03b2036ba"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5b772ad7e4b047b03b2036e8"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5a91988ae4b002d099cae6f9"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5b7bc82ce4b047b03b203726"}, {"problem": 61, "code": "#(into {} (map sorted-map %1 %2))", "user": "5826a843e4b051871117befd"}, {"problem": 61, "code": "#(reduce (fn [tot [k v]] (assoc tot k v)) {} (map vector %1 %2))", "user": "5b284375e4b063e2438bcc53"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5b857411e4b047b03b2037ce"}, {"problem": 61, "code": "(fn foo [keys vals]\n  (loop [ks keys\n         vs vals\n         result {}]\n    (if (or (empty? ks) (empty? vs))\n      result\n      (recur (rest ks)\n             (rest vs)\n             (assoc result (first ks) (first vs))))))", "user": "5b333626e4b025bcb146f32f"}, {"problem": 61, "code": "#(apply hash-map (mapcat list %1 %2))", "user": "5a085dfde4b01bb0ae8afdf4"}, {"problem": 61, "code": "(fn [a b] (apply assoc {} (interleave a b)) )", "user": "5b7ed20fe4b047b03b203760"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5b83c11ae4b047b03b2037b7"}, {"problem": 61, "code": "(fn [c1 c2]\n  (apply array-map (interleave c1 c2)))", "user": "5b88f0c0e4b047b03b203816"}, {"problem": 61, "code": "#(into {} (map (fn [a b] {a b}) %1 %2))", "user": "599342efe4b0b211ea3aaab0"}, {"problem": 61, "code": "(fn [col1 col2]\n  (into {} (map (fn [x y] {x y} ) col1 col2 )))", "user": "5b97c521e4b0c0b3ffbd4a9a"}, {"problem": 61, "code": "(fn\n  [ks vs]\n  (into {} (map vector ks vs)))", "user": "59b93cd7e4b0a024fb6ae3c7"}, {"problem": 61, "code": "(fn [ks vs]\n    (loop [remaining_keys ks\n           remaining_vals vs\n           map_done {}]\n      (if (or (empty? remaining_keys) (empty? remaining_vals))\n        map_done\n        (recur (rest remaining_keys) (rest remaining_vals) (assoc map_done (first remaining_keys) (first remaining_vals))))))", "user": "592ac17ae4b072a2710fcf26"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5b985fe5e4b0c0b3ffbd4ab1"}, {"problem": 61, "code": "(fn [ks vs] (apply array-map (interleave ks vs)))", "user": "5b9db58be4b0c0b3ffbd4b41"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5b77d3c8e4b047b03b2036f1"}, {"problem": 61, "code": "(fn [ks vs]\n  (->> (interleave ks vs)\n       (partition 2)\n       (map vec)\n       (into {})))", "user": "5b96800ae4b0c0b3ffbd4a7b"}, {"problem": 61, "code": "(fn [k v]\n  (into {} (map vector k v)))", "user": "5b62ff3ce4b0c6492753e72a"}, {"problem": 61, "code": "(fn [ks vs] (apply hash-map (flatten (map (fn [k v] [k v]) ks vs))))", "user": "5b9357b7e4b0c0b3ffbd4a46"}, {"problem": 61, "code": "(fn [ks vs]\n     (reduce\n       (fn [m [k v]]\n         (assoc m k v))\n       {}\n       (map\n         (fn [k v]\n           [k v])\n         ks\n         vs)))", "user": "5b999af8e4b0c0b3ffbd4ad3"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5b855800e4b047b03b2037cd"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "570d0548e4b0b0fb43fd06d2"}, {"problem": 61, "code": "(fn [ks vs]\n  (loop [map {}\n         ks (seq ks)\n         vs (seq vs)]\n    (if (and ks vs)\n      (recur (assoc map (first ks) (first vs))\n             (next ks)\n             (next vs))\n      map)))", "user": "55478ce2e4b0a04f7929954e"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5ba5802de4b0a20761a233fd"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "58182480e4b0c0e9c07b83a7"}, {"problem": 61, "code": "(fn [keys-list values-list] (into {} (map (fn [k v] [k v]) keys-list values-list)))", "user": "5a66fddee4b0512ff01cd9d7"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5b919d9de4b0c0b3ffbd4a24"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (map vector ks vs)))", "user": "5bab5440e4b0a20761a23475"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5b79cbdce4b047b03b20370a"}, {"problem": 61, "code": "(fn zipmap' [keys values]\n  (into {}\n        (map vector keys values)))", "user": "5b602a66e4b0c6492753e6fc"}, {"problem": 61, "code": "#(apply hash-map (mapcat (fn [k v] [k v]) % %2))", "user": "5b924123e4b0c0b3ffbd4a34"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "57481f1fe4b009280f9f2b82"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5b99a0a3e4b0c0b3ffbd4ad7"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5b77248ae4b047b03b2036e7"}, {"problem": 61, "code": "(fn mapping\n   [dataone datatwo]\n   (loop [lstone dataone\n          lsttwo datatwo\n          res {}]\n     (if (and (seq lstone) (seq lsttwo))\n       (recur (rest lstone) (rest lsttwo) (assoc res (first lstone) (first lsttwo)))\n       res)))", "user": "5b86462de4b047b03b2037df"}, {"problem": 61, "code": "(comp (partial apply hash-map) interleave)", "user": "5bafd5c8e4b0a20761a234dd"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5b81139fe4b047b03b203782"}, {"problem": 61, "code": "(fn [a b]\n  (loop [x a\n         y b\n         o {}]\n    (if (or (empty? x)(empty? y))\n      o\n      (recur (rest x) (rest y) (into o {(first x) (first y)})))))", "user": "566d71b1e4b0a866af6896ca"}, {"problem": 61, "code": "#(into {} (map vector  %1 %2))", "user": "5b759ca8e4b047b03b2036d0"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5951190be4b066ee0a44aea4"}, {"problem": 61, "code": "#(apply hash-map (apply interleave %&))", "user": "5b9c4a7be4b0c0b3ffbd4b16"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "57c647bbe4b05aa3c4741cf3"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5bb7b956e4b0a20761a235ad"}, {"problem": 61, "code": "#(apply array-map (interleave %1 %2))", "user": "5bbbce0ee4b0a20761a2360d"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5a03d246e4b01bb0ae8afd8c"}, {"problem": 61, "code": "#(into {} (apply map hash-map %&))", "user": "5a68f374e4b0512ff01cda05"}, {"problem": 61, "code": "(fn map-constr\n  ; \"takes a vector of keys and a vector of valuesand constructs a map of them\"\n  [x1 x2]\n  (apply hash-map (interleave x1 x2)))", "user": "5bbbcecee4b0a20761a23611"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5829d9f8e4b051871117bf4d"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5bbbce70e4b0a20761a2360f"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5bc39d2be4b07a9b28b10045"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5b85221ce4b047b03b2037c8"}, {"problem": 61, "code": "(fn map-construction\n  ; \"function which takes a vector of keys and a vector of valuesand constructs a map of them\"\n  [x1 x2]\n  (apply hash-map (interleave x1 x2)))", "user": "5bbbd077e4b0a20761a23615"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5bbbba29e4b0a20761a23609"}, {"problem": 61, "code": "(fn [x y] (apply assoc {} (interleave x y)))", "user": "5bb3c9a8e4b0a20761a2352f"}, {"problem": 61, "code": "(fn [c1 c2] (apply hash-map (interleave c1 c2)))", "user": "5bc7bae7e4b07a9b28b100b1"}, {"problem": 61, "code": "(fn [col1 col2]\n  (first (last (take-while next\n    (iterate \n      (fn [[m [c1 c2]]]\n        (cond\n          (empty? c1) nil\n          (empty? c2) nil\n          :else [(assoc m (first c1) (first c2)) [(rest c1) (rest c2)]]\n        )\n      )\n      [{} [col1 col2]]\n    )\n  )))\n)", "user": "5bbd13a5e4b07a9b28b0ff95"}, {"problem": 61, "code": "(fn tomap [keyv valv]\n  (loop [[k & ks] keyv\n         [v & vs] valv\n         res {}]\n    (if (or (nil? k)\n            (nil? v))\n      res\n      (recur ks vs (assoc res k v)))))", "user": "587fb546e4b0f1effa3b75f9"}, {"problem": 61, "code": "(fn [lst coll] (apply hash-map (interleave lst coll)))", "user": "5bbc0ddfe4b0a20761a2361e"}, {"problem": 61, "code": "(fn mapc\n  [veca vecb]\n  (if (or (empty? veca) (empty? vecb))\n    {}\n    (assoc (mapc (rest veca) (rest vecb)) (first veca) (first vecb))\n    )\n  )", "user": "5bc8c033e4b07a9b28b100ca"}, {"problem": 61, "code": "(fn zm [ks vs]\n  (apply hash-map (interleave ks vs)))", "user": "59d8f23ae4b0ef0a1e9b5c49"}, {"problem": 61, "code": "(fn [x y]\n  (into {} (map vector x y)))", "user": "543a8256e4b032a45b869327"}, {"problem": 61, "code": "(fn\n  [lst1 lst2]\n  (apply hash-map (interleave lst1 lst2))\n  )", "user": "5bbbce99e4b0a20761a23610"}, {"problem": 61, "code": "(fn [la lb] (apply hash-map (mapcat #(list %1 %2) la lb)) )", "user": "5bbbd484e4b0a20761a23617"}, {"problem": 61, "code": "(fn my-map\n  [keys values]\n  (apply assoc {} (interleave keys values)))", "user": "5bbbcf9ee4b0a20761a23614"}, {"problem": 61, "code": "#(reduce merge {} (map (fn [k v] {k v}) %1 %2))", "user": "57a5da5ee4b0a966079561fe"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5bb5cd43e4b0a20761a23575"}, {"problem": 61, "code": "(fn [ks vs]\n  (reduce #(assoc %1 (first %2) (last %2)) {} (partition 2 (interleave ks vs)))\n)", "user": "5bc28638e4b07a9b28b10033"}, {"problem": 61, "code": "(fn [k v]\n  (into (sorted-map) (map (fn [a b] [a b]) k v)))", "user": "59a0286be4b0871e7608b82f"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5bc255b7e4b07a9b28b10029"}, {"problem": 61, "code": "(fn [ls1 ls2](apply hash-map (interleave ls1 ls2)))", "user": "5bc50870e4b07a9b28b10069"}, {"problem": 61, "code": "(fn [lst lst2] \n  (apply hash-map (interleave lst lst2)))", "user": "5bcb672ee4b07a9b28b10100"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5958a0c8e4b066ee0a44af8c"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5bbbce60e4b0a20761a2360e"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5bc7ba68e4b07a9b28b100b0"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5bbbcf3ae4b0a20761a23612"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5bbbcf81e4b0a20761a23613"}, {"problem": 61, "code": "(fn [a b] (apply hash-map (mapcat #(list %1 %2) a b)))", "user": "5bc833a5e4b07a9b28b100bb"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5b337ff4e4b025bcb146f339"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "567c63f6e4b05957ce8c61bb"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5bc611e3e4b07a9b28b10083"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5bbdd136e4b07a9b28b0ffab"}, {"problem": 61, "code": "(fn f\n   ([x y] (f x y {}))\n   ([[x & xs] [y & ys] acc]\n    (prn x y)\n    (if (or (empty? xs) (empty? ys))\n      (assoc acc x y)\n      (recur xs ys (assoc acc x y)))))", "user": "5be0306be4b0ed4b8aab4c7d"}, {"problem": 61, "code": "(fn [ks vs] (loop [ks ks vs vs m (hash-map)]\n              (if (or (empty? ks) (empty? vs))\n                m\n                (recur (rest ks) (rest vs) (assoc m (first ks) (first vs))))))", "user": "5bdf651ee4b0ed4b8aab4c6d"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "55ec879ae4b0121d4835fdc8"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5bd7b8b8e4b0ed4b8aab4bc6"}, {"problem": 61, "code": "(fn [c1 c2]\n    (into {}\n          (map vector\n               c1\n               c2)))", "user": "5be5cebde4b0ed4b8aab4d19"}, {"problem": 61, "code": "(fn [k v] (apply merge (map #(assoc {} %1 %2) k v)))", "user": "5b72b36ce4b047b03b2036a9"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5be58beae4b0ed4b8aab4d14"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "575f6a80e4b08062f99a4e80"}, {"problem": 61, "code": "(fn __ [k v] (apply hash-map (interleave k v)))", "user": "5be2e670e4b0ed4b8aab4ccc"}, {"problem": 61, "code": "(fn [x y] (into {} (vec (map vector x y))))", "user": "5be6d0f8e4b0f319e2d7ec51"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {}\n        (map hash-map ks vs)))", "user": "4ee897fe535d93acb0a66883"}, {"problem": 61, "code": "(fn [k value]\n (into {} (map vector k value))\n  )", "user": "5be9d530e4b0f319e2d7ec79"}, {"problem": 61, "code": "(fn [keys values]\n  (reduce merge {} (map #(hash-map %1 %2) keys values)))", "user": "5b60e88be4b0c6492753e70b"}, {"problem": 61, "code": "(fn my-map [s1 s2]\n  (if (or (empty? s1) (empty? s2)) \n    {}\n    (assoc (my-map (rest s1) (rest s2)) (first s1) (first s2))))", "user": "5be33a16e4b0ed4b8aab4cd6"}, {"problem": 61, "code": "(comp (partial apply hash-map) interleave)", "user": "5b7d03a0e4b047b03b20373d"}, {"problem": 61, "code": "(fn my-map-cons[a b]\n  (loop [res {}\n         tail-k a\n         tail-v b]\n    (if (or (empty? tail-k) (empty? tail-v))\n      res\n      (recur (assoc res (first tail-k) (first tail-v))\n             (rest tail-k) (rest tail-v)))))", "user": "5bf50e76e4b0b326c961d8a0"}, {"problem": 61, "code": "(fn [keys vals]\n  (into {} (map vector keys vals))\n  )", "user": "5a42dbabe4b0447ef91cc5fc"}, {"problem": 61, "code": "(fn [a b c]\n  (if (or (empty? b) (empty? c))\n    a\n    (recur (assoc a (first b) (first c)) (drop 1 b) (drop 1 c)))) {}", "user": "5bf0aefde4b0a6d31fed215a"}, {"problem": 61, "code": "#(into { } (map hash-map %1 %2))", "user": "5bec37e2e4b0f319e2d7ec96"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5bf5ddfde4b0bdcf453d159e"}, {"problem": 61, "code": "(fn [a b] (apply hash-map (interleave a b)))", "user": "5be15f4de4b0ed4b8aab4c9b"}, {"problem": 61, "code": "(fn map-maker [kys vls]\n  (into {} (map vec (partition 2 (interleave kys vls)))))", "user": "5bfa25fbe4b0bdcf453d15c8"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5a09a6f7e4b01bb0ae8afe14"}, {"problem": 61, "code": "(fn [ks vs]\n  ((fn [map ks vs]\n    (if (and (first ks) (first vs))\n      (recur (assoc map (first ks) (first vs)) (rest ks) (rest vs))\n      map))\n   {} ks vs))", "user": "5b15ab32e4b0cc2b61a3be72"}, {"problem": 61, "code": "(fn [the-keys the-vals]\n  (let [mapped-items (for [i (range (min (count the-keys) (count the-vals)))]\n                       (hash-map (get the-keys i) (get the-vals i)))]\n    (reduce into {} mapped-items)))", "user": "596aaeefe4b069c0a1a19808"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5ba15075e4b0a20761a2339e"}, {"problem": 61, "code": "(fn [x y]\n  (into {} (map vector x y)))", "user": "5b6ba7d7e4b0c6492753e7ad"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map #(vector %1 %2) ks vs)))", "user": "5c03e927e4b0bdcf453d167b"}, {"problem": 61, "code": "(fn [ a b ] \n  (apply merge\n  (map-indexed (fn [idx el] (when (get b idx) (hash-map el (get b idx)))) a)))", "user": "52737333e4b03e8d9a4a747f"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5bea3177e4b0f319e2d7ec81"}, {"problem": 61, "code": "(fn [ks vs] \n  (into {} \n        (map vector ks vs)))", "user": "55469eede4b0a04f79299542"}, {"problem": 61, "code": "(fn [ks vs] (reduce #(let [[k v] %2] (assoc %1 k v)) {} (map list ks vs)))", "user": "5c0a87e6e4b0bdcf453d1707"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5bfe4ecfe4b0bdcf453d1608"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "59abd1d8e4b08cbb53654da4"}, {"problem": 61, "code": "(fn mapcon\n  ([ks vs] (mapcon ks vs []))\n  ([ks vs a]\n   (if (or (empty? ks) (empty? vs))\n     (into {} (reverse a))\n     (mapcon (rest ks) (rest vs) (conj a [(first ks) (first vs)])))))", "user": "5c0e58bfe4b01240ff567140"}, {"problem": 61, "code": "#(into {} (map (partial apply vector) (partition 2 (interleave %1 %2))))", "user": "594d4c57e4b07ddc2dafae87"}, {"problem": 61, "code": "(fn zip [k v]\n  (when \n   (and \n    (> (count k) 0)\n    (> (count v) 0)\n   )\n    (assoc \n     (zip \n      (rest k)\n      (rest v))\n     (first k)\n     (first v)\n    )\n   )\n)", "user": "5c0d0537e4b0bdcf453d173d"}, {"problem": 61, "code": "(fn [ks vs] \n  (apply hash-map \n         (flatten \n          (map vector ks vs))))", "user": "5c13da47e4b01240ff5671a6"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "532ae82be4b09d4e7a9b552b"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "5c165d3ee4b01240ff5671d1"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5c1aadcde4b01240ff567209"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "5b0bd9cfe4b0cc2b61a3bdd9"}, {"problem": 61, "code": "(fn [coll-one coll-two] (apply assoc {} (interleave coll-one coll-two)))", "user": "5c1d9f05e4b0efcb0b05b24c"}, {"problem": 61, "code": "#(reduce merge {} (map vector %1 %2))", "user": "5c1edf23e4b0efcb0b05b25d"}, {"problem": 61, "code": "#(apply array-map (apply interleave %&))", "user": "5c17467fe4b01240ff5671df"}, {"problem": 61, "code": "(fn customZipmap\n  [v1 v2]\n  (loop [res {} keys (seq v1) values (seq v2)]\n    (if (and keys values)\n      (recur\n        (assoc res (first keys) (first values))\n        (next keys)\n        (next values)\n        )\n       res\n      )\n    )\n  )", "user": "5c20b6abe4b07e362c230576"}, {"problem": 61, "code": "(fn my-zipmap\n  [xs ys]\n  (reduce (fn [accum [k v]] (into accum {k v}))\n          {}\n          (map list xs ys)))", "user": "5c222b7de4b07e362c230588"}, {"problem": 61, "code": "(fn [k v]\n    (into {} (map vector k v)))", "user": "597f8c93e4b0dbe32238d0c1"}, {"problem": 61, "code": "(fn [keys vals]\n  (loop [rkeys keys\n         rvals vals\n         result {}]\n    (let [k (first rkeys)\n          v (first rvals)]\n      (if (or (nil? k)\n              (nil? v))\n        result\n        (recur (rest rkeys)\n               (rest rvals)\n               (assoc result k v))))))", "user": "5bef3e88e4b0a6d31fed213f"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5c2649c8e4b07e362c2305bf"}, {"problem": 61, "code": "(fn [a b] (into {} (map (fn [x y] [x y]) a b)))", "user": "5c21a531e4b07e362c230582"}, {"problem": 61, "code": "(fn [l1 l2] (apply merge (map #(assoc {} % %2) l1 l2)))", "user": "5c0e3f86e4b01240ff56713d"}, {"problem": 61, "code": "#(->> (map vector %1 %2) (into {}))", "user": "5c219c0fe4b07e362c230581"}, {"problem": 61, "code": "(fn [k v]\n  (let [smaller-count (if (<= (count k) (count v))\n                        (count k)\n                        (count v))]\n    (loop [i 0\n           m {}]\n      (if (= i smaller-count)\n        m\n        (recur (inc i) (assoc m (get k i) (get v i)))))))", "user": "57d57f65e4b0bd073c2023b3"}, {"problem": 61, "code": "(fn zm[ks vs]\n  (loop [res {}\n         [k & more-k :as all-k] ks\n         [v & more-v :as all-v] vs]\n    (if (and all-k all-v)\n      (recur\n       \t(assoc res k v)\n       \tmore-k\n       \tmore-v)\n      res)\n))", "user": "5ba75fdfe4b0a20761a23419"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply merge (map #(->{%1 %2}) ks vs)))", "user": "50eeeadae4b02c17778c91f3"}, {"problem": 61, "code": "(fn map-construct [ks vs]\n  (reduce (fn [result item] (assoc result (first item) (second item))) {} (mapv (fn [x y] [x y]) ks vs)))", "user": "5c24c654e4b07e362c2305a7"}, {"problem": 61, "code": "(fn map-construction [keys values]\n  (->> (interleave keys values)\n       (partition 2)\n       (map #(into [] %))\n       (into {})\n       )\n  )", "user": "5c3ac091e4b0d62ef62d9f95"}, {"problem": 61, "code": "#(loop[p_key %1\n       p_val %2\n       res {}]\n  (if (or (empty? p_key) (empty? p_val))\n    res\n    (recur (rest p_key) (rest p_val)\n      (assoc res (first p_key) (first p_val))\n    )\n  )\n)", "user": "5bfcdc52e4b0bdcf453d15f4"}, {"problem": 61, "code": "(fn x [ks vs] \n  (into {} (map hash-map ks vs))\n)", "user": "5b8ec146e4b0c0b3ffbd49f0"}, {"problem": 61, "code": "(fn [keys values]\n  (loop [keys keys\n         values values\n         result {}]\n    (if (or (empty? keys) (empty? values))\n      result\n      (recur (rest keys) (rest values) (conj {(first keys) (first values)} result)))))", "user": "5293a603e4b0239c8a67af42"}, {"problem": 61, "code": "(fn [col1 col2]\n  (into {} (map vector col1 col2))\n\n\n  )", "user": "5c321b8ae4b0d62ef62d9f32"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "5c379636e4b0d62ef62d9f76"}, {"problem": 61, "code": "(fn my-map\n  [xs ys]\n  (loop [x xs y ys res {}]\n    (if (or (empty? x) (empty? y))\n      res\n      (recur (rest x) (rest y) (into res (assoc {} (first x) (first y)))))))", "user": "5c35acffe4b0d62ef62d9f62"}, {"problem": 61, "code": "(fn [x y]\n  (apply assoc {} (mapcat vector x y)))", "user": "5c2dfca3e4b0d62ef62d9efc"}, {"problem": 61, "code": "(fn [coll1 coll2]\n  (loop [re {}\n         list1 coll1\n         list2 coll2]\n    (if (or (empty? list1) (empty? list2))\n      re\n      (recur (conj re (hash-map (first list1) (first list2)))\n             (rest list1)\n             (rest list2)))))", "user": "59b9e669e4b0a024fb6ae3db"}, {"problem": 61, "code": "(fn  [x y] (loop [x x y y z {}] (if (and x y) (recur (next x) (next y) (assoc z (first x) (first y))) z)))", "user": "5c308385e4b0d62ef62d9f1c"}, {"problem": 61, "code": "(fn [coll1 coll2] \n    (reduce (fn [acc item]\n    (assoc acc (first item) (second item)))  \n    {} (map #(list %1 %2)\n    coll1 coll2)))", "user": "5a64dcabe4b0512ff01cd9a9"}, {"problem": 61, "code": "(fn [k v] (into {} (map (fn [x y] [x y]) k v)))", "user": "5c3f37fce4b08cd430848e91"}, {"problem": 61, "code": "(fn con[k v]\n  (if(or (empty? k)(empty? v))(hash-map)(assoc (con (rest k)(rest v))(first k)(first v))))", "user": "5c486dece4b0e06e1360a3c0"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5c0eb93ce4b01240ff567146"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5c512811e4b0fb8c5ffd99c2"}, {"problem": 61, "code": "#(loop[l1 %1, l2 %2 r {}   ]\n  (cond\n    (nil? l1) r\n    (nil? l2) r\n    :else (recur (next l1) (next l2 ) (assoc r (first l1) (first l2)))  \n    )\n  )", "user": "5c4ab449e4b0f9f7a8770e57"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "5c48757fe4b0e06e1360a3c3"}, {"problem": 61, "code": "#(apply merge (map hash-map %1 %2))", "user": "5c45e703e4b0e06e1360a391"}, {"problem": 61, "code": "(fn [k v]\n  (-> (reduce\n        (fn [[res k v] _] [(assoc res (first k) (first v)) (rest k) (rest v)])\n        [{} k v]\n        (if\n          (< (count k) (count v))\n          k\n          v))\n      first))", "user": "5984e7dee4b021a7a535fe43"}, {"problem": 61, "code": "(fn my-zipmap [key-vector value-vector]\n  (into {} (map (fn [k v] [k v]) key-vector value-vector)))", "user": "5c506951e4b0f9f7a8770ec5"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5b14475be4b0cc2b61a3be5a"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5c411df3e4b08cd430848ebf"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5c435a9fe4b0e06e1360a367"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "5c2836ebe4b07e362c2305d4"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5c38422ae4b0d62ef62d9f7f"}, {"problem": 61, "code": "(fn man-zipmap [keys vals]\n  (loop [map {}\n         ks (seq keys)\n         vs (seq vals)]\n    (if (and ks vs)\n      (recur (assoc map (first ks) (first vs))\n             (next ks)\n             (next vs))\n      map))\n  )", "user": "5c51d700e4b0fb8c5ffd99d1"}, {"problem": 61, "code": "#(loop [ks %\n         vs %2\n         result {}]\n    (if (and ks vs)\n      (recur (next ks)\n             (next vs)\n             (assoc result (first ks) (first vs)))\n      result))", "user": "502ea967e4b06efe12e8cc76"}, {"problem": 61, "code": "(fn fff [l1 l2] (if (or (empty? l1) (empty? l2)) {} (conj (fff (rest l1) (rest l2)) [(first l1) (first l2)])))", "user": "5c54e605e4b0fb8c5ffd9a14"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5c387c51e4b0d62ef62d9f83"}, {"problem": 61, "code": "(fn [c1 c2] (apply sorted-map (flatten (map #(list %1 %2) c1 c2))))", "user": "5c3cd80fe4b0d62ef62d9faa"}, {"problem": 61, "code": "(fn\n  my-zipmap\n  [keys vals]\n  (->>\n    ; using map/reduce\n    (map vector keys vals)\n    (reduce (fn[m [key val]] (assoc m key val)) {} ,,,)\n\n    ; using interleave/apply\n    ; (interleave keys vals)\n    ; (apply hash-map ,,,)\n\n    ; using mapcat/apply\n    ; (mapcat vector keys vals)\n    ; (apply hash-map ,,,)\n  ))", "user": "5c6227fee4b0fca0c1622641"}, {"problem": 61, "code": "(fn f [ks vs]\n  (if (or (empty? ks) (empty? vs))\n    nil\n    (assoc (f (rest ks) (rest vs)) (first ks) (first vs))))", "user": "5c62979fe4b0fca0c162264c"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "5a8aa992e4b05369db4d24d8"}, {"problem": 61, "code": "#(reduce merge {} (apply map hash-map [%1 %2]))", "user": "5c30d90de4b0d62ef62d9f22"}, {"problem": 61, "code": "(fn make-map\n  ([keys values]\n    (make-map nil keys values))\n  ([cur-map [head-keys & tail-keys] [head-values & tail-values]]\n    (if (or (nil? head-keys) (nil? head-values))\n      cur-map\n      (make-map (assoc cur-map head-keys head-values) tail-keys tail-values))))", "user": "5c3f6322e4b08cd430848e97"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (map vector ks vs))\n  )", "user": "5c6448d6e4b0fca0c1622674"}, {"problem": 61, "code": "(fn [ks vs] (reduce merge {} (map (fn [k v] {k v}) ks vs)))", "user": "53a5bc3ae4b0ef122a8689c3"}, {"problem": 61, "code": "(fn [k v] (apply assoc {} (interleave k v)))", "user": "592883f1e4b072a2710fceea"}, {"problem": 61, "code": "#(into {} (map vec (partition 2 (interleave % %2))))", "user": "5c41db45e4b08cd430848ece"}, {"problem": 61, "code": "(fn [k v] (apply hash-map (interleave k v)))", "user": "524ac3d1e4b09eba1c0223a0"}, {"problem": 61, "code": "(fn [s1 s2]\n          (into {} (map vector s1 s2)))", "user": "4e617114535d8ccf87e9fe5b"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply hash-map (interleave ks vs)))", "user": "58b12635e4b0ebc645576cf4"}, {"problem": 61, "code": "(fn [x y] (into {} (vec (map #(vector %1 %2) x y))))", "user": "5c52f3fce4b0fb8c5ffd99e9"}, {"problem": 61, "code": "#(apply hash-map (flatten (map list %1 %2)))", "user": "5bcee7d9e4b0e9689409ee22"}, {"problem": 61, "code": "(fn [keys values]\n   (apply assoc {} (interleave keys values)))", "user": "558843dae4b059ccff29b1f3"}, {"problem": 61, "code": "#(into {} \n       (map (fn [k v] [k v]) %1 %2))", "user": "5c58736be4b01df32ab73247"}, {"problem": 61, "code": "(fn [xs ys]\n   (let [len (min (count xs) (count ys))]\n     (loop [x 0\n            res {}]\n       (if (= x len)\n         res\n         (recur (inc x) (conj res {(nth xs x) (nth ys x)})))\n       ))\n   )", "user": "5c6d0e51e4b0fca0c1622735"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (map (fn [k v] [k v]) ks vs)))", "user": "5c73b8bae4b0fca0c16227ba"}, {"problem": 61, "code": "(fn [x y]\n    (loop [x-coll x\n           y-coll y\n           res {}]\n      (if (or (empty? x-coll) (empty? y-coll))\n        res\n        (recur (rest x-coll) (rest y-coll) (conj res {(first x-coll) (first y-coll)})))\n      )\n    )", "user": "5b269cf3e4b063e2438bcc35"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "59cd351ee4b0ef0a1e9b5b35"}, {"problem": 61, "code": "(fn [coll1\n     coll2]\n  (apply hash-map (interleave coll1 coll2)))", "user": "5c718e6ce4b0fca0c1622796"}, {"problem": 61, "code": "(fn\n  [keys values]\n  (loop [res {}\n         keys keys\n         values values]\n    (if (or (empty? keys) (empty? values))\n      res\n      (recur (conj res {(first keys) (first values)}) (rest keys) (rest values)))))", "user": "5c706232e4b0fca0c162277e"}, {"problem": 61, "code": "(fn zipper [left right]\n      (reduce\n        #(assoc %1 (first %2) (second %2))\n        {}\n        (map #(clojure.lang.MapEntry. %1 %2) left right))\n      )", "user": "5c6e8b57e4b0fca0c1622755"}, {"problem": 61, "code": ";#(apply hash-map (interleave %1 %2))\n#(apply array-map (interleave %1 %2))", "user": "5c683fb5e4b0fca0c16226d5"}, {"problem": 61, "code": "(fn [coll1 coll2]\n     (loop [x 0\n            m {}]\n       (if (< x (min (count coll1) (count coll2)))\n         (recur (+ x 1)\n                (conj m (conj [] (nth coll1 x) (nth coll2 x))))\n         m)))", "user": "5c52fa3ce4b0fb8c5ffd99eb"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5c787131e4b0fca0c1622825"}, {"problem": 61, "code": "#(->> (map (fn[x y]{x y}) %1 %2) (apply merge))", "user": "58d1c1b1e4b03c36ff7e58ef"}, {"problem": 61, "code": "(fn [keys vals]\n  (loop [ks keys, vs vals, r {}]\n    (if (or (empty? ks) (empty? vs))\n      r\n      (recur (rest ks) (rest vs) (merge r {(first ks) (first vs)})))))", "user": "5c6e1006e4b0fca0c1622744"}, {"problem": 61, "code": "(fn [vkeys vvalues] (apply hash-map (interleave vkeys vvalues)))", "user": "5c723f4be4b0fca0c16227a0"}, {"problem": 61, "code": "(fn [k1 v1] (apply merge (map hash-map k1 v1)))", "user": "5c76577ae4b0fca0c16227ea"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5c664b87e4b0fca0c16226a5"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "5c7d5a0ce4b0d597f478caab"}, {"problem": 61, "code": "#(reduce (partial apply assoc) {} (map vector % %2))", "user": "5c7bc0a5e4b0fca0c1622865"}, {"problem": 61, "code": "(fn [ks vs]\n  ((fn buildmap [ks vs m]\n     (if (or (empty? ks) (empty? vs))\n       m\n       (buildmap (rest ks) (rest vs) (assoc m (first ks) (first vs))))) ks vs {}))", "user": "5c7ef3f3e4b0d597f478cad7"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5c8319c3e4b0c8042a70ce45"}, {"problem": 61, "code": "(fn maps\n  [x lst]\n  (into '{} (map (fn [y z] (hash-map y z)) x lst)))", "user": "5c7dad57e4b0d597f478caba"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5c7f7889e4b0d597f478cae0"}, {"problem": 61, "code": "(fn [a b]\n  (loop [x (rest a)\n         y (rest b)\n         res (hash-map (first a) (first b))]\n    (if (or (empty? x) (empty? y))\n      res \n      (recur (rest x)\n             (rest y)\n             (assoc res (first x) (first y))))))", "user": "5c748bf5e4b0fca0c16227cb"}, {"problem": 61, "code": "(fn [c1 c2]\n  (loop [c1 c1 c2 c2 result {}]\n    (if (empty? c1)\n      result\n      (if (empty? c2)\n        result\n        (recur (rest c1) (rest c2) (assoc result (first c1) (first c2)))))))", "user": "5c879edae4b048ec896c5917"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5c82db41e4b0c8042a70ce42"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5c70641de4b0fca0c162277f"}, {"problem": 61, "code": "#(apply hash-map(mapcat vector %1 %2))", "user": "5c7d947be4b0d597f478cab6"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5c74b043e4b0fca0c16227ce"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5c7c8c72e4b0d597f478ca96"}, {"problem": 61, "code": "#(into {} (mapv vector %1 %2))", "user": "5c7741dce4b0fca0c1622806"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5c706454e4b0fca0c1622780"}, {"problem": 61, "code": "(fn zipcat* [& cols]\n  (reduce #(assoc %1 (first %2) (second %2)) {} (apply map list cols)))", "user": "5c8860bce4b048ec896c5928"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5c7d5463e4b0d597f478caa9"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5c746c31e4b0fca0c16227c8"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5c75a830e4b0fca0c16227e0"}, {"problem": 61, "code": "#(apply assoc {} (interleave % %2))", "user": "57e2e1bde4b0bfb2137f5a8f"}, {"problem": 61, "code": "#(reduce (fn [m kv] (apply assoc (cons m kv))) {} (map list % %2))", "user": "5c7c1d8ee4b0d597f478ca88"}, {"problem": 61, "code": "(fn[ks vs] (reduce merge(map hash-map ks vs)))", "user": "5c852e3ae4b0c8042a70ce78"}, {"problem": 61, "code": "(fn [k v] (apply hash-map (mapcat (fn [m n] (vector m n)) k v)))", "user": "5b100648e4b0cc2b61a3be17"}, {"problem": 61, "code": "#(into {} (map hash-map %1 %2))", "user": "5c7bb8c0e4b0fca0c1622864"}, {"problem": 61, "code": "(fn [k v] (apply hash-map (mapcat vector k v)))", "user": "57fc0719e4b0d3187e900987"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5c891afde4b048ec896c5935"}, {"problem": 61, "code": ";; http://www.4clojure.com/problem/61\n(fn map-construct\n  [key-coll val-coll]\n  (apply hash-map (interleave key-coll val-coll)))", "user": "5c92105ce4b048ec896c59f7"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5c896f46e4b048ec896c5940"}, {"problem": 61, "code": "(fn [ks vs]\n          (into {}\n                (map #(hash-map %1 %2) ks vs)))", "user": "5c995fa4e4b048ec896c5a96"}, {"problem": 61, "code": "(fn [k v] (apply array-map (interleave k v)))", "user": "5c792c34e4b0fca0c1622834"}, {"problem": 61, "code": "(fn zipmap* [& colls]\n  (reduce (fn [acc [k v]] (assoc acc k v)) {} (apply map list colls)))", "user": "5c987160e4b048ec896c5a82"}, {"problem": 61, "code": "(fn [ks vs] (apply merge (map hash-map ks vs)))", "user": "5bd0ea60e4b0e9689409ee45"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5c9d0a0be4b048ec896c5afc"}, {"problem": 61, "code": "#(reduce conj (map hash-map %1 %2))", "user": "5c24671be4b07e362c2305a1"}, {"problem": 61, "code": "(fn [a b]\n  (into {} (map vector a b)))", "user": "5ca14eb1e4b048ec896c5b7d"}, {"problem": 61, "code": "(fn [the-keys the-vals] (apply \n                         hash-map (interleave the-keys the-vals)))", "user": "5ca1f8a1e4b048ec896c5b8c"}, {"problem": 61, "code": "(fn\n  [keys vals]\n  (into {} (map vector keys vals)))", "user": "5c05cae7e4b0bdcf453d16a3"}, {"problem": 61, "code": "(fn construct-map [x y]\n  (if (or (empty? x)\n          (empty? y)) {}\n    (merge (assoc {} (first x) (first y))\n           (construct-map (rest x) (rest y)))))", "user": "5c538cb5e4b0fb8c5ffd99fb"}, {"problem": 61, "code": "#(apply assoc {} \n   (interleave %1 %2))", "user": "5ca1c45ae4b048ec896c5b85"}, {"problem": 61, "code": "(fn [ks vs] (apply hash-map (interleave ks vs)))", "user": "5cab33e7e4b048ec896c5c48"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply hash-map (interleave ks vs)))", "user": "5c950334e4b048ec896c5a44"}, {"problem": 61, "code": "(fn [m1 m2] (apply merge (map #(assoc {} % %2) m1 m2)))", "user": "5be96111e4b0f319e2d7ec70"}, {"problem": 61, "code": "(fn [x y] (reduce conj (map hash-map x y)))", "user": "58b84c28e4b0ebc645576d94"}, {"problem": 61, "code": "(fn zipcat* [& cols]\n  (reduce #(assoc %1 (first %2) (second %2)) {} (apply map list cols)))", "user": "5cb71f35e4b026601754b961"}, {"problem": 61, "code": "(fn zipper- [k v]\n    (apply assoc {} (interleave k v)))", "user": "5766bab8e4b0a07e8fc180b1"}, {"problem": 61, "code": "(fn q61 [keys vals]\n  (->> (map-indexed (fn [i k] [k (nth vals i nil)]) keys)\n       (reduce (fn [m [k v]]\n                 (if (nil? v) m (assoc m k v))) {})))", "user": "5cab0ad9e4b048ec896c5c46"}, {"problem": 61, "code": "(fn m [k v] (apply assoc {} (interleave k v)))", "user": "5cb4e764e4b026601754b929"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "5a6dbaf5e4b0512ff01cda63"}, {"problem": 61, "code": "#(into {} (mapcat hash-map % %2))", "user": "51dd5d6fe4b0c33a4e1da406"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5ca7b5bbe4b048ec896c5c04"}, {"problem": 61, "code": "(fn [ks vs] (reduce #(assoc %1 (first %2) (second %2)) {} (map vector ks vs)))", "user": "5caf9cace4b026601754b89b"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5cbeadf2e4b0ccb061962755"}, {"problem": 61, "code": "#(into {} (map (fn [a b] [a b]) %1 %2))", "user": "5beda647e4b0a6d31fed2122"}, {"problem": 61, "code": "(fn [ks vs]\n    (loop [ks ks vs vs out {}]\n      (if (or (empty? ks) (empty? vs))\n        out\n        (recur (rest ks) (rest vs) (assoc out (first ks) (first vs))))))", "user": "5cc6f982e4b0ccb06196282d"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "5c547cf0e4b0fb8c5ffd9a0b"}, {"problem": 61, "code": "(fn [keys values] (apply hash-map (interleave keys values)))", "user": "4fbe2cfbe4b081705acca30c"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5cbd5b42e4b026601754b9f6"}, {"problem": 61, "code": "#(into\n  {}\n  (map vector %1 %2))", "user": "5c51c930e4b0fb8c5ffd99ce"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5ccb3792e4b0ccb061962882"}, {"problem": 61, "code": "(fn [m1 m2]\n  (into {} (map vector m1 m2)))", "user": "5cc6b4bfe4b0ccb061962827"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5cd1f5dae4b0ccb0619628f7"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "4eb47bb1535d7eef30807362"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5a9bfd57e4b0d174b936c7d0"}, {"problem": 61, "code": "(fn [x y]\n  (reduce\n   #(assoc %1 \n     (first %2) (last %2))\n   {} (partition 2\n       (interleave x y))))", "user": "510608ebe4b01150e115ebe3"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (for [idx (range (min (count ks) (count vs)))] [(nth ks idx) (nth vs idx)])))", "user": "5cbb0436e4b026601754b9cc"}, {"problem": 61, "code": "(fn [coll1 coll2]\n  (into {} (map #(vector % %2) coll1 coll2)))", "user": "5afb3426e4b0cc2b61a3bcf5"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5cd639b4e4b0ccb061962940"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "5ccf21c4e4b0ccb0619628c1"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "5cdfe2aee4b0a17bb84e2b04"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5ca2ca9fe4b048ec896c5b9c"}, {"problem": 61, "code": "#(reduce (fn [result item]\n          (if (< (count result) (count %2))\n            (assoc result item (%2 (count result)))\n            result)) {} %)", "user": "5ccc2a03e4b0ccb06196288f"}, {"problem": 61, "code": "(fn [ks vs]\n    (into\n      {}\n      (map #(vector %1 %2) ks vs)))", "user": "5c9dcb36e4b048ec896c5b1d"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (map vector ks vs)))", "user": "5ce077e9e4b0a17bb84e2b0c"}, {"problem": 61, "code": "(fn[a b] (into {} (map #(conj [%1] %2) a b)))", "user": "5ce41d1be4b0a17bb84e2b50"}, {"problem": 61, "code": "#(apply assoc {} \n   (interleave %1 %2))", "user": "5cdd934ce4b05ee0cb311761"}, {"problem": 61, "code": "(fn [x y] (into {} (map #(hash-map % %2) x y)))", "user": "5c665311e4b0fca0c16226a7"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5ce2b15fe4b0a17bb84e2b2c"}, {"problem": 61, "code": "(fn [coll1 coll2] (apply assoc {} \n   (interleave coll1 coll2)))", "user": "5ce52271e4b0a17bb84e2b69"}, {"problem": 61, "code": "(fn [x y] (apply merge (#(map (fn [k v] {k v}) x y))))", "user": "5cda72ffe4b05ee0cb311714"}, {"problem": 61, "code": "(fn[a b](reduce(fn[r x](apply assoc r x)){}(for[idx(range (min(count a)(count b)))][(nth a idx)(nth b idx)])))", "user": "5ce62d8ee4b0a17bb84e2b83"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5ce44ee2e4b0a17bb84e2b57"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5baaae06e4b0a20761a23464"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5ce36e02e4b0a17bb84e2b3e"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5ce78776e4b0a17bb84e2ba2"}, {"problem": 61, "code": "(fn [s1 s2] (reduce (fn [acc it] (if (< (count acc) (count s2)) (assoc acc it (nth s2 (count acc))) acc)) {} s1))", "user": "5cbdc591e4b026601754ba00"}, {"problem": 61, "code": "#(loop [s1 %1 s2 %2 r {}]\n   (if (or (empty? s1) (empty? s2)) r\n     (recur (rest s1) (rest s2) (assoc r (first s1) (first s2)))))", "user": "592bb806e4b072a2710fcf46"}, {"problem": 61, "code": "(fn [k v] (into {} (map vector k v)))", "user": "5ce56455e4b0a17bb84e2b71"}, {"problem": 61, "code": "(fn [ks vs]\n   (into {} (map vector ks vs)))", "user": "52281e1ee4b0186687e23a69"}, {"problem": 61, "code": "#(into {} (map (fn [x y] [x y]) %1 %2))", "user": "5ce6f93be4b0a17bb84e2b99"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5cebafbbe4b0a17bb84e2be6"}, {"problem": 61, "code": "#(apply (partial assoc {}) (interleave %1 %2))", "user": "5c3440fee4b0d62ef62d9f50"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "53d612cbe4b0e771c3025452"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5cee521ce4b0aaa82f1129dd"}, {"problem": 61, "code": "(fn [k v]\n  ((fn inner [acc ks vs] \n    (if (or (empty? ks) (empty? vs))\n      acc\n      (recur (assoc acc (first ks) (first vs)) (rest ks) (rest vs))\n    )\n  ) {(first k) (first v)} (rest k) (rest v))  \n)", "user": "5cfd5a93e4b0cc9c91588168"}, {"problem": 61, "code": "(fn [c1 c2]\n  (into {} (map (fn [f s] [f s]) c1 c2)))", "user": "5cf935f4e4b0b71b1d808a8f"}, {"problem": 61, "code": "(fn [keys values]\n  (loop [k keys v values output {}]\n    (if (and true (seq k) (seq v))\n      (recur (rest k) (rest v) (conj output {(first k) (first v)}))\n      output)))", "user": "5cf62ecce4b087f62be35aa7"}, {"problem": 61, "code": "(fn [x y] (reduce (fn [acc [k v]] (assoc acc k v)) {} (map #(vector %1 %2) x y)))", "user": "5ccb0bbee4b0ccb06196287c"}, {"problem": 61, "code": "(fn foo [ks vs]\n  (let [kf (first ks) vf (first vs)]\n    (if (and kf vf)\n      (assoc (foo (next ks) (next vs)) kf vf)\n      {})))", "user": "5cece5a2e4b0a17bb84e2bfb"}, {"problem": 61, "code": ";#(into {} (map hash-map %1 %2))\n;#(apply hash-map (interleave %1 %2))\n#(into {} (mapcat hash-map %1 %2))", "user": "5cd4e1b2e4b0ccb061962927"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5ceedd7ae4b0aaa82f1129e4"}, {"problem": 61, "code": "(fn [coll1 coll2]\n  (loop [i 0 result {}]\n    (if (or (= i (count coll1)) (= i (count coll2)))\n      result\n      (recur (inc i) (assoc result (get coll1 i) (get coll2 i))))))", "user": "5d03944de4b0cc9c915881c5"}, {"problem": 61, "code": "(fn combine'\n  ([keys vals] (combine' keys vals {}))\n  ([keys vals res]\n   (if (or (empty? keys) (empty? vals))\n     res\n     (combine' (rest keys) (rest vals) (assoc res (first keys) (first vals))))))", "user": "5d06499ae4b0cc9c915881ec"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5d0815b3e4b0cc9c91588201"}, {"problem": 61, "code": "(fn constuctor [keys values]\n  (loop [keys keys values values result {}]\n    (if (or (empty? keys) (empty? values))\n      result\n      (recur (rest keys) (rest values) (assoc result (first keys) (first values))))))", "user": "5d0859fbe4b0cc9c91588208"}, {"problem": 61, "code": "#(apply hash-map\n        (interleave %1 %2))", "user": "5cfee28de4b0cc9c91588185"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5d0902e8e4b0cc9c91588211"}, {"problem": 61, "code": "#(apply merge {} (map hash-map %1 %2))", "user": "5cf72682e4b0b71b1d808a68"}, {"problem": 61, "code": "#(into {} (map (fn [k v] (hash-map k v)) %1 %2))", "user": "5d02fe44e4b0cc9c915881c0"}, {"problem": 61, "code": "(fn [vec1 vec2] (into {} (map vector vec1 vec2)))", "user": "5d1b2a1ee4b02ea6f0fb6979"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (map vector ks vs)))", "user": "5cdc08a2e4b05ee0cb31173a"}, {"problem": 61, "code": "(fn [x y] (apply hash-map (interleave x y)))", "user": "5d1bbef0e4b02ea6f0fb6984"}, {"problem": 61, "code": "(fn\n  [keys values]\n  (loop [[k & keys] keys\n         [v & values] values\n         m {}]\n    (if (and k v)\n      (recur keys values (assoc m k v))\n      m)))", "user": "570c8ac3e4b0b0fb43fd06ca"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5d2201b8e4b02ea6f0fb69ed"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5d1b59abe4b02ea6f0fb697e"}, {"problem": 61, "code": "(fn _zipmap [a b]\n  (loop [a (seq a)\n         b (seq b)\n         m (transient {})\n         ]\n    (if (and a b) \n      (recur \n        (next a)\n        (next b)\n        (assoc! m (first a) (first b))\n             )\n      (persistent! m)\n      )\n    )\n  )", "user": "5b9ae606e4b0c0b3ffbd4af2"}, {"problem": 61, "code": "(fn [ks vs]\n  (->> (map vector ks vs)\n       (into {})))", "user": "559622cee4b0c79f6e1db975"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5ccf99fbe4b0ccb0619628c8"}, {"problem": 61, "code": "#(apply assoc {} (interleave % %2))", "user": "5952d75ce4b066ee0a44aed4"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5d24e49be4b02ea6f0fb6a2a"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5d1cf523e4b02ea6f0fb6994"}, {"problem": 61, "code": "(fn\n  [seq1 seq2]\n  (into {} (map #(assoc {} %1 %2) seq1 seq2)))", "user": "5d1c14cde4b02ea6f0fb698a"}, {"problem": 61, "code": "(fn [keys vals] \n  (loop [map {} \n         ks (seq keys)\n         vs (seq vals)]\n    (if (and ks vs)\n      (recur (assoc map (first ks) (first vs))\n             (next ks)\n             (next vs))\n      map)))", "user": "5d046f7ce4b0cc9c915881d5"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5d272077e4b092dab7f59c64"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (for [[x y] (partition 2 (interleave ks vs))] [x y])))", "user": "5d231255e4b02ea6f0fb69fe"}, {"problem": 61, "code": "(fn [a b] (apply assoc {} (interleave a b)))", "user": "5d138119e4b0902706380dbb"}, {"problem": 61, "code": ";(fn [col1 col2] (reduce conj {} (map #(vector %1 %2) col1 col2)))\n#(apply hash-map (interleave %1 %2))", "user": "5d0beecee4b0cc9c91588239"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5d13f783e4b0902706380dc1"}, {"problem": 61, "code": "#(loop [col1 %1 col2 %2 cnt (min (count col1) (count col2)) rt {}]\n   (if(<= cnt 0)\n     rt\n     (recur (rest col1) (rest col2) (dec cnt) (assoc rt (first col1) (first col2)))\n     )\n  \n  )", "user": "5d270111e4b092dab7f59c62"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5cfabf53e4b0cc9c91588148"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5d2bfb68e4b01671435dbc86"}, {"problem": 61, "code": "#(apply hash-map (mapcat list %1 %2))", "user": "5d28222ee4b092dab7f59c7a"}, {"problem": 61, "code": "#(apply (partial assoc {}) (mapcat list %1 %2))", "user": "5cf895efe4b0b71b1d808a85"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5d25abc9e4b02ea6f0fb6a37"}, {"problem": 61, "code": "(fn [x y] (apply hash-map (flatten (map list x y))))", "user": "5d2ca236e4b01671435dbc94"}, {"problem": 61, "code": "(fn zip [keys vals]\n (loop [rest-k keys\n        rest-v vals\n        res {}]\n  (if (or (empty? rest-k)\n       (empty? rest-v))\n   res\n   (recur (rest rest-k)\n    (rest rest-v)\n    (assoc res (first rest-k)(first rest-v))))))", "user": "5a23503fe4b0ff51aa4b32d6"}, {"problem": 61, "code": "(fn [c1 c2] (reduce #(conj %1 %2) {} (map #(identity [%1 %2]) c1 c2)))", "user": "5d247902e4b02ea6f0fb6a24"}, {"problem": 61, "code": "(fn my-zipmap\n  ([keys values] (my-zipmap {} keys values))\n  ([ans keys values]\n  (if (or (empty? keys) (empty? values)) ans\n    (recur (into ans {(first keys) (first values)}) (rest keys) (rest values)))))", "user": "5a962c09e4b0d174b936c765"}, {"problem": 61, "code": "(fn zipper \n  [coll coll2]\n  (loop [map {}\n         ks (seq coll)\n         vs (seq coll2)]\n    (if (and ks vs)\n      (recur (assoc map (first ks) (first vs))\n             (next ks)\n             (next vs))\n      map)))", "user": "5cb11a72e4b026601754b8c6"}, {"problem": 61, "code": "#(apply merge (map hash-map % %2))", "user": "5d29c06be4b01671435dbc6b"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5d370811e4b01671435dbd2d"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply merge (map (fn [k v] {k v}) ks vs)))", "user": "5bb25684e4b0a20761a2350d"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map vector ks vs)))", "user": "5d3ae729e4b01671435dbd5d"}, {"problem": 61, "code": "(fn [kk vv] \n  (loop [l kk r vv out {}]\n    (if (or (empty? l) (empty? r))\n      out\n      (recur (rest l) (rest r) (conj out [(first l) (first r)])))))", "user": "58b997afe4b0888cdc949cd1"}, {"problem": 61, "code": "(fn [ks vs]\n  (reduce #(apply assoc %1 %2) {} (map list ks vs)))", "user": "5d27da09e4b092dab7f59c75"}, {"problem": 61, "code": "#(into (sorted-map) (map hash-map %1 %2))", "user": "5cf53196e4b087f62be35a94"}, {"problem": 61, "code": "#(->> (interleave %1 %2)\n      (cons {})\n      (apply assoc))", "user": "5d2e5065e4b01671435dbcae"}, {"problem": 61, "code": "(fn my-zipmap [xs ys]\n  (into (sorted-map) (map #(vector %1 %2) xs ys)))", "user": "598601f9e4b021a7a535fe79"}, {"problem": 61, "code": "(fn my-zipmap\n  [ks vs]\n  (apply hash-map (interleave ks vs)))", "user": "5b4b8cd6e4b02d533a91bc9f"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply hash-map\n         (interleave ks vs))\n  )", "user": "5ce867fce4b0a17bb84e2baf"}, {"problem": 61, "code": ";(fn zipmap' [c1 c2]\n; (loop [c1 c1\n;         c2 c2\n;         res {}]\n;    (if (or (empty? c1) (empty? c2))\n;      res\n;      (recur (rest c1) (rest c2) (assoc res (first c1) (first c2))))))\n\n#(into {} (map (fn [k v] {k v}) %1 %2))", "user": "5d1be50ce4b02ea6f0fb6986"}, {"problem": 61, "code": "(fn [arr1 arr2] (apply hash-map (apply concat (mapv vector arr1 arr2))))", "user": "5cb41c40e4b026601754b911"}, {"problem": 61, "code": "(fn [Keys Values]\n    (loop [Index 0 Ret {}]\n      (if (or (>= Index (count Keys)) (>= Index (count Values)) )\n        Ret\n        (recur (inc Index) (conj Ret { (get Keys Index) (get Values Index) } ))\n      )\n    )\n  )", "user": "5d4a6c6ce4b0776584bd6f22"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "5d40442ee4b05dd059a54362"}, {"problem": 61, "code": "(fn [ks vs]\n  (loop [[k & ks] ks\n         [v & vs] vs\n         acc {}]\n    (if (or (nil? k) (nil? v))\n      acc\n      (recur ks vs (assoc acc k v)))))", "user": "5d35f997e4b01671435dbd1a"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5d46fbc6e4b07c84aa5ae6af"}, {"problem": 61, "code": "(fn [s1 s2]\n  (loop [new-map {} col1 s1 col2 s2]\n    (if (and (seq col1) (seq col2))\n      (recur\n        (assoc new-map (first col1) (first col2))\n        (rest col1)\n        (rest col2))\n      new-map)))", "user": "5ad76df9e4b0ea6055cfac18"}, {"problem": 61, "code": "(fn [vec-keys vec-vals]\n  (apply hash-map (interleave vec-keys vec-vals)))", "user": "5d48e6d3e4b0776584bd6f15"}, {"problem": 61, "code": "#(apply merge (map (fn [k v] {k v}) %1 %2) )", "user": "56bff105e4b060a8e693e3a4"}, {"problem": 61, "code": "(fn rmp\n     [acc k v]\n     (if (or (empty? k) (empty? v))\n       acc\n       (rmp (assoc acc (first k) (first v)) (next k) (next v))\n       )\n     )\n   {}", "user": "5bdc4a76e4b0ed4b8aab4c30"}, {"problem": 61, "code": "#(into {} (map vec (partition 2 (interleave %1 %2))))", "user": "5d47f4dbe4b07c84aa5ae6b5"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (map vector ks vs)))", "user": "5d48884ee4b07c84aa5ae6bb"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "5d0bb4fae4b0cc9c91588237"}, {"problem": 61, "code": "#(apply sorted-map (interleave %1 %2))", "user": "54b42ea4e4b05787c3b1638b"}, {"problem": 61, "code": "(fn [c1 c2] (apply merge (map (fn [a b] {a b}) c1 c2)))", "user": "5d4f21f3e4b0776584bd6f4e"}, {"problem": 61, "code": "#(apply merge (apply map hash-map %&))", "user": "5d45bd1de4b07c84aa5ae6a4"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "5259451ce4b0cb4875a45cd7"}, {"problem": 61, "code": "(fn [k v]\n  (reduce \n   (fn [m [k v]] (assoc m k v))\n   {} (map vector k v)))", "user": "5d45749be4b07c84aa5ae6a2"}, {"problem": 61, "code": "(fn my-zipmap [keys vals]\n  (apply hash-map (interleave keys vals)))", "user": "5146f343e4b04ef915e3731e"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "5bf06734e4b0a6d31fed2153"}, {"problem": 61, "code": "(fn [kss vss]\n  (loop [[k & ks] kss\n         [v & vs] vss\n         res {}]\n    (if (and k v)\n      (recur ks vs (assoc res k v))\n      res)\n  )\n)", "user": "5d07989ee4b0cc9c915881fb"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5d5e9f45e4b0c9e5857d4ff5"}, {"problem": 61, "code": "(fn [keys values]\n               (let [validrange (if (> (count keys) (count values)) \n                               (count values) \n                               (count keys))]\n               (into {} (for [i (range validrange)]\n                          {(nth keys i) (nth values i)}))))", "user": "5d4df658e4b0776584bd6f41"}, {"problem": 61, "code": "#(apply hash-map\n       (mapcat\n           (fn [k v] [k v])\n           % %2))", "user": "5d28b684e4b092dab7f59c83"}, {"problem": 61, "code": "(fn my-zipmap\n    ([x y] (my-zipmap x y {}))\n    ([x y m]\n     (if (or (empty? x) (empty? y))\n       m\n       (my-zipmap (rest x) (rest y) (assoc m (first x) (first y)))\n       )))", "user": "5d52bf29e4b0776584bd6f69"}, {"problem": 61, "code": "(fn [keys vals]\n  (reduce #(into %1 %2)\n           (map hash-map keys vals)))", "user": "5d4b2155e4b0776584bd6f28"}, {"problem": 61, "code": "#(apply array-map (interleave %1 %2))", "user": "5d2c779be4b01671435dbc8d"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "5d5166d9e4b0776584bd6f5e"}, {"problem": 61, "code": "(fn f [kcoll vcoll] (when-let [ks (seq kcoll)]\n                      (when-let [vs (seq vcoll)]\n                        (assoc (f (rest ks) (rest vs)) (first ks) (first vs)))))", "user": "5d629ed9e4b0c9e5857d501d"}, {"problem": 61, "code": "#(-> (fn [ass x] (assoc ass (first x) (second x)))\n    (reduce {}  (map list %1 %2)))", "user": "5be79b5be4b0f319e2d7ec5a"}, {"problem": 61, "code": "(fn make-map \n   ([keys values]\n    (make-map keys values {}))\n  ([keys values m]\n    (if (and (> (count keys) 0) (> (count values) 0)) \n      (make-map \n       (rest keys) \n       (rest values) \n       (assoc m (first keys) (first values))) m )\n   )\n  )", "user": "5d5eb086e4b0c9e5857d4ff7"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5b329773e4b025bcb146f322"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5d67c955e4b0db5d338d15f7"}, {"problem": 61, "code": "#(into (hash-map) (map vector % %2))", "user": "5d672bd7e4b0db5d338d15f1"}, {"problem": 61, "code": "(fn sds\n  ([fl sl]\n   (sds fl sl {}))\n  ([fl sl final]\n  (if (or (empty? fl) (empty? sl))\n    final\n    (sds (rest fl) (rest sl) (assoc final (first fl) (first sl))))))", "user": "5d4cf3e9e4b0776584bd6f38"}, {"problem": 61, "code": "(fn my-zipmap [ks vs]\n  (cond\n     (or (empty? ks) (empty? vs)) {}\n     :else (merge \n             {(first ks) (first vs)} \n             (my-zipmap (rest ks) (rest vs)))))", "user": "5d4c83b7e4b0776584bd6f34"}, {"problem": 61, "code": "(fn [v1 v2] (into {} (filter val (reduce (fn [newM key] (conj newM (hash-map key (get v2 (.indexOf v1 key))))) {} v1))))", "user": "5d662fb5e4b0db5d338d15e1"}, {"problem": 61, "code": "#(apply hash-map (mapcat (fn [a b] [a b]) %1 %2))", "user": "5d651553e4b0db5d338d15ca"}, {"problem": 61, "code": "(fn [map-keys values]\n  (loop [map-keys map-keys\n         values values\n         mapped {}]\n    (if (or (empty? map-keys) (empty? values))\n      mapped\n      (recur \n       (rest map-keys) \n       (rest values) \n       (assoc mapped (first map-keys) (first values))))))", "user": "5d68f5e6e4b0db5d338d1605"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (map vector ks vs)))", "user": "5d609ddde4b0c9e5857d5008"}, {"problem": 61, "code": "(fn [key_seq value_seq]\n  (loop [key_rest key_seq\n         value_rest value_seq\n         res {}]\n    (if (or (empty? key_rest) (empty? value_rest))\n      res\n      (recur (rest key_rest) (rest value_rest) (assoc res (first key_rest) (first value_rest))))))", "user": "5d64013ce4b0c9e5857d502d"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5d66aea7e4b0db5d338d15ec"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5d5ef0bce4b0c9e5857d4ffb"}, {"problem": 61, "code": "(fn [ks vs]\n  (reduce\n   (fn [m v] (assoc m (first v) (second v)))\n   {}\n   (map vector ks vs)))", "user": "5d1e19c4e4b02ea6f0fb69af"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5a932f63e4b0d174b936c71b"}, {"problem": 61, "code": "(fn [keys values] (into {} (map (fn [x y] {x y}) keys values)))", "user": "5d6d2172e4b04d129b00f2b9"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5245af03e4b08ba239308124"}, {"problem": 61, "code": "(fn zm-1 [ks vs]\n  (into {} (map (fn [k v]\n                  [k v])\n                ks vs)))", "user": "5d64ecb2e4b0c9e5857d5036"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5d764e52e4b02e6b30c93524"}, {"problem": 61, "code": "#(loop [keys %1 values %2 acc {}]\n   (if (or (empty? keys) (empty? values)) \n     acc \n     (recur (rest keys) (rest values) (assoc acc (first keys) (first values)))))", "user": "5d5e0259e4b0c9e5857d4fef"}, {"problem": 61, "code": "#(reduce merge (map hash-map %1 %2))", "user": "5a7de7a3e4b03baeef927702"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "52860baae4b0239c8a67ae09"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5d6691cee4b0db5d338d15e9"}, {"problem": 61, "code": "(fn [col1 col2]\n  (into {} (map vector col1 col2)))", "user": "5a7f77fae4b00b71e582a041"}, {"problem": 61, "code": "(fn [k v]\n  (apply hash-map (interleave k v)))", "user": "5d6e5b53e4b04d129b00f2c6"}, {"problem": 61, "code": "(fn map-construct\n  [c1 c2]\n  (reduce conj (map hash-map c1 c2)))", "user": "5d6d2e11e4b04d129b00f2ba"}, {"problem": 61, "code": "#(reduce \n  (fn [res [key val]]\n    (assoc res key val))\n  {} (partition 2 (mapcat vector % %2))\n  )", "user": "5d5b2678e4b06a698e928ee2"}, {"problem": 61, "code": "(fn [x y] (loop [x x y y out {}] (if (or (empty? x) (empty? y)) out (recur (rest x) (rest y) (assoc out (first x) (first y))))))", "user": "5d7158f3e4b04d129b00f2e1"}, {"problem": 61, "code": "(fn [a b]\n  (apply conj\n    (map #(assoc {} %1 %2) a b)))", "user": "5d1609f9e4b0902706380dd9"}, {"problem": 61, "code": "(fn zi [x y]\n  (apply hash-map (interleave x y)))", "user": "5d6febe6e4b04d129b00f2d5"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "5cc80598e4b0ccb061962840"}, {"problem": 61, "code": "(fn my-zipmap\n  [ks vs]\n  (apply hash-map (interleave ks vs)))", "user": "5d6f063de4b04d129b00f2d1"}, {"problem": 61, "code": "(fn [keys vals]\n    (loop [map {}\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map)))", "user": "5d6d4463e4b04d129b00f2bd"}, {"problem": 61, "code": "(fn map-\n  [k v]\n  (apply hash-map (interleave k v)))", "user": "5d7b90ede4b02e6b30c93552"}, {"problem": 61, "code": "#(reduce into {}\n   (map\n    (fn zm [a b] (assoc {} a b)) %1 %2 ))", "user": "5d5c6675e4b09db18d4482ec"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "5d7eaf5fe4b0492f5d910fc3"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "5d81eba4e4b0915913b1d37b"}, {"problem": 61, "code": "(fn [a b]\n  (reduce\n   into\n   {}\n   (map #(into {} {%1 %2}) a b)\n   )\n  )", "user": "5d6fae1ee4b04d129b00f2d4"}, {"problem": 61, "code": "(fn [c1 c2]( into {} (map (fn [x y](vector x y)) c1 c2)) )", "user": "5d8aad1ce4b0915913b1d3cd"}, {"problem": 61, "code": "(fn my-zipmap\n  [keys vals]\n  (->> (interleave keys vals)\n       (partition 2)\n       (map vec)\n       (into {})))", "user": "5d8a0d8fe4b0915913b1d3c6"}, {"problem": 61, "code": "(fn [keys vals] (reduce (fn [acc [k v]] (assoc acc k v)) {} (map (fn [e1 e2] [e1 e2]) keys vals)))", "user": "5d63f1c2e4b0c9e5857d502b"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map (fn [k v] [k v]) ks vs)))", "user": "5d88d820e4b0915913b1d3b1"}, {"problem": 61, "code": "(fn map-construction\n  ([keys values]\n   (map-construction keys values []))\n  ([keys values constructed-map]\n   (if (or (empty? keys) (empty? values))\n     (into {} constructed-map)\n     (map-construction (rest keys) (rest values) (conj constructed-map (conj [] (first keys) (first values)))))))", "user": "5d896a64e4b0915913b1d3b8"}, {"problem": 61, "code": "(fn [ks vs] (apply hash-map (interleave ks vs)))", "user": "5d81b40ce4b0915913b1d379"}, {"problem": 61, "code": "(fn [a b] (reduce #(assoc %1 (first %2) (last %2)) {} (map list a b)))", "user": "5d887d27e4b0915913b1d3a8"}, {"problem": 61, "code": "( fn [ks vs]\n  (into {} (map vector ks vs)))", "user": "5ce5b43be4b0a17bb84e2b7a"}, {"problem": 61, "code": "(fn f\n  ([keys vals]\n   (f keys vals {}))\n  ([keys vals result]\n   (let [[k & ks] keys\n         [v & vs] vals]\n     (if (or (nil? k) (nil? v))\n       result\n       (recur ks vs (assoc result k v))))))", "user": "524a9556e4b05ef8e38e64b1"}, {"problem": 61, "code": "(fn [k v]                                                                                                                                                                              \n  (apply assoc {} (interleave k v)))", "user": "57a499dae4b0a966079561e6"}, {"problem": 61, "code": "(fn [& coll]\n   (apply merge (apply map (fn [x y] {x y}) coll)))", "user": "5d9c1226e4b0d3f9b434ad51"}, {"problem": 61, "code": "#(->> %& (apply interleave) (apply hash-map) )", "user": "5d9e7971e4b000c986472bc1"}, {"problem": 61, "code": "(fn [keys vals] (apply assoc {} (interleave keys vals)))", "user": "5c337305e4b0d62ef62d9f48"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (map (fn [k v] [k v]) ks vs)))", "user": "594fdfdce4b066ee0a44ae85"}, {"problem": 61, "code": "(fn make-map [keys values]\n  (loop [ks keys\n         vs values\n         generated {}]\n    (if (and (not-empty ks) (not-empty vs))\n      (recur (rest ks) (rest vs) (assoc generated (first ks) (first vs)))\n      generated)))", "user": "5d80f328e4b0915913b1d372"}, {"problem": 61, "code": "(fn [ks,vs]\n    (loop [\n           result {}\n           ks_v ks\n           vs_v vs]\n      (if (or (empty? ks_v) (empty? vs_v)) result\n      (recur (assoc result (first ks_v) (first vs_v)) (rest ks_v) (rest vs_v)))))", "user": "5c09e555e4b0bdcf453d16fd"}, {"problem": 61, "code": "(fn my-zipmap [keys values]\n  (apply merge (map (fn [key value] {key value}) keys values)))", "user": "5d49ec5ee4b0776584bd6f1c"}, {"problem": 61, "code": "(fn [keys vals] (apply assoc {} (interleave keys vals)))", "user": "5d97b602e4b0d3f9b434ad3a"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5d974b1de4b0d3f9b434ad36"}, {"problem": 61, "code": "(fn [& xs] \n  (->> xs \n    (apply map vector) \n    (into {})))", "user": "5da8fa72e4b000c986472c2d"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "5d99dc47e4b0d3f9b434ad42"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5ccf125ce4b0ccb0619628c0"}, {"problem": 61, "code": "(fn [ks vs]\n  (reduce #(assoc %1 (first %2) (second %2))\n          {}\n          (map #(vector %1 %2) ks vs)\n  )\n)", "user": "5da975b9e4b000c986472c32"}, {"problem": 61, "code": "(fn [keys vals]\n  (loop [map {}\n         ks (seq keys)\n         vs (seq vals)]\n    (if (and ks vs)\n      (recur (assoc map (first ks) (first vs))\n             (next ks)\n             (next vs))\n      map)))", "user": "5da760ebe4b000c986472c1a"}, {"problem": 61, "code": "(fn [ks vs]\n  (loop [m {}\n         ks ks\n         vs vs]\n    (if (or (empty? ks) (empty? vs))\n      m\n      (recur (assoc m (first ks) (first vs)) (rest ks) (rest vs)))))", "user": "5cf6522be4b0b71b1d808a58"}, {"problem": 61, "code": "(fn [xL1 xL2]\n\t(into {} (map #(into [] %) (partition 2 (interleave xL1 xL2))))\n  )", "user": "5da20e73e4b000c986472be1"}, {"problem": 61, "code": "#(reduce (fn [x [k v]] (assoc x k v))  nil (map vector %1 %2))", "user": "5da98129e4b000c986472c33"}, {"problem": 61, "code": "(fn my-zipmap\n  [ks vs]\n  (apply merge (map #(assoc {} %1 %2) ks vs)))", "user": "5d9c8a85e4b0eb781811cdad"}, {"problem": 61, "code": "#(into {} (mapv (fn [& nths] (into [] nths)) %1 %2))", "user": "5d7aa22ee4b02e6b30c9354e"}, {"problem": 61, "code": "#(apply hash-map(interleave %1 %2))", "user": "5dab11cde4b000c986472c45"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "5da8b8ece4b000c986472c28"}, {"problem": 61, "code": "(fn [ks vs]\n    (reduce (fn [accu [k v]] (assoc accu k v))\n            {}\n            (partition 2 (interleave ks vs))))", "user": "5d883119e4b0915913b1d3a6"}, {"problem": 61, "code": "(fn [keys values]\n  (loop [r {} x keys y values]\n    (let [k (first x) v (first y)]\n      (if-not (and k v)\n        r\n        (recur (assoc r k v)\n               (next x)\n               (next y))))))", "user": "54b331dbe4b09f271ff37d37"}, {"problem": 61, "code": "(fn my-zipmap [keys vals]\n  (loop [acc {}\n         keys keys\n         vals vals]\n    (if (and keys vals)\n      (recur (assoc acc (first keys) (first vals))\n             (next keys)\n             (next vals))\n      acc)))", "user": "5db0d470e4b0f8c104ccfc9e"}, {"problem": 61, "code": "(fn [arr1 arr2]\n   (loop [op_map {}  ip1 arr1 ip2 arr2]\n     (if (and (first ip1) (first ip2))\n       (recur (assoc op_map (first ip1) (first ip2))\n              (drop 1 ip1)\n              (drop 1 ip2))\n       op_map)))", "user": "5d8c8175e4b0915913b1d3e1"}, {"problem": 61, "code": "(fn [a b]\n  (apply hash-map (interleave a b)))", "user": "5daeb6bce4b0f8c104ccfc8b"}, {"problem": 61, "code": "#(let [k %1 v %2] (into (sorted-map) (mapcat hash-map k v)))", "user": "5b044436e4b0cc2b61a3bd71"}, {"problem": 61, "code": "(fn [keyx valx]\n  (into (hash-map) (map #(hash-map %1 %2) keyx valx)))", "user": "5db9a6c3e4b010eb3c36cd56"}, {"problem": 61, "code": "(fn mmm[v1 v2](loop [v1 v1\n                       v2 v2\n                       ret {}]\n                  (cond\n                    (or (empty? v1) (empty? v2)) ret\n                    :else (recur (rest v1)\n                                 (rest v2)\n                                 (assoc ret (first v1)(first v2))\n                                 ))))", "user": "5dadf73ee4b0f8c104ccfc86"}, {"problem": 61, "code": "(fn build-map [coll1 coll2]\n  (apply assoc {} (interleave coll1 coll2)))", "user": "5dba063ee4b010eb3c36cd5c"}, {"problem": 61, "code": "#(loop [c1 % c2 %2 re {}]\n   (if\n     (and (seq c1) (seq c2))\n       (recur (rest c1) (rest c2) (assoc re (first c1) (first c2)))\n     re))", "user": "5dc12b0ae4b0e59a23173d84"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5db19599e4b010eb3c36cd05"}, {"problem": 61, "code": "#(apply hash-map (mapcat list %1 %2))", "user": "5db7376fe4b010eb3c36cd43"}, {"problem": 61, "code": "(fn [x y] (apply hash-map (interleave x y)))", "user": "5d8b4960e4b0915913b1d3d3"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "5dbb5200e4b09f47823971a9"}, {"problem": 61, "code": "(fn\n  [keys vals]\n  (into {} (map vec (partition 2 (interleave keys vals)))))", "user": "59ea07c9e4b0249b72820756"}, {"problem": 61, "code": "(fn [k v]\r\n  (apply hash-map (take (* 2 (count k)) (interleave k v))))", "user": "5dbd51cfe4b09f47823971bb"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5db92996e4b010eb3c36cd50"}, {"problem": 61, "code": "(fn [s1 s2]\n  (apply assoc {} (interleave s1 s2)))", "user": "5a291617e4b07f18be40aa76"}, {"problem": 61, "code": "(fn [a b]\n  (apply hash-map (interleave a b)))", "user": "5db5d09be4b010eb3c36cd31"}, {"problem": 61, "code": "#(reduce merge (map hash-map %1 %2))", "user": "5dc98501e4b02f9375f4e1e6"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "59b1a1b2e4b0e1f4e384c8eb"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5dc318cde4b02f700ae81835"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "4fbb7010e4b081705acca2e7"}, {"problem": 61, "code": "(fn [a b]\n   (into {} (map #(hash-map %1 %2) a b)))", "user": "5d927df4e4b0915913b1d40f"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5dc9ccf8e4b02f9375f4e1f1"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5dcfdf23e4b0948ae9d9ad43"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5be0b916e4b0ed4b8aab4c8f"}, {"problem": 61, "code": "#(into {}  (map vector %1 %2))", "user": "5dd1fb19e4b0948ae9d9ad51"}, {"problem": 61, "code": "(fn [a b] (into {} (map (fn [x y] [x y]) a b)))", "user": "5da306a3e4b000c986472be7"}, {"problem": 61, "code": "#(apply assoc {} \n   (interleave %1 %2))", "user": "5d94fdf9e4b0d3f9b434ad2b"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "59b0e877e4b0e1f4e384c8d3"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5dcb1e73e4b02b31cc3da3b6"}, {"problem": 61, "code": "(fn [& l] (apply assoc {} (apply interleave l)))", "user": "556086a2e4b0c656e3ff17c1"}, {"problem": 61, "code": "(fn [a b] (apply hash-map (interleave a b)))", "user": "5078dedae4b08327cd804a5d"}, {"problem": 61, "code": "(fn my-zip [left right]\n  (if (some nil? [left right])\n    {}\n    (let [[left-elem & rest-left] left\n          [right-elem & rest-right] right]\n      (conj (my-zip rest-left rest-right) [left-elem right-elem]))))", "user": "5dc4719ae4b02f9375f4e1b5"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5d9e8e40e4b000c986472bc2"}, {"problem": 61, "code": "(fn build-map [keys vals]\n  (loop [res {}\n         [head-key & tail-keys] keys\n         [head-val & tail-vals] vals]\n    (if (or (empty? tail-keys) (empty? tail-vals))\n      (assoc res head-key head-val)\n      (recur (assoc res head-key head-val) tail-keys tail-vals)\n      )\n    ))", "user": "5dd67c22e4b0948ae9d9ad80"}, {"problem": 61, "code": "(fn [coll1 coll2] \n  (into {} (map vec (partition 2 (interleave coll1 coll2)))))", "user": "5dbe27c3e4b09f47823971c4"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5793931ee4b0e215f87e845c"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply array-map (interleave ks vs)))", "user": "5ddb6151e4b0948ae9d9adb0"}, {"problem": 61, "code": "(fn [keys vals]\n                  (loop [map {}\n                         ks (seq keys)\n                         vs (seq vals)]\n                    (if (and ks vs)\n                      (recur (assoc map (first ks) (first vs))\n                             (next ks)\n                             (next vs))\n                      map)))", "user": "5d9c9446e4b0eb781811cdae"}, {"problem": 61, "code": "(fn [keys vals]\n   (reduce #(assoc %1 (first %2) (last %2)) {}\n           (map #(conj [] %1 %2) keys vals)))", "user": "5dd90651e4b0948ae9d9ad97"}, {"problem": 61, "code": "(fn myzip [keys values] (apply hash-map (interleave keys values)))", "user": "5da05bcce4b000c986472bd0"}, {"problem": 61, "code": "(fn f [k v] (if (and (not-empty k) (not-empty v))\n                     (merge {(first k) (first v)} (f (rest k) (rest v)))\n                     {}))", "user": "5d7d17ece4b02e6b30c93558"}, {"problem": 61, "code": "(fn [x y] (into {} (mapv (fn [& xs] (into [] xs)) x y)))", "user": "5d84545ee4b0915913b1d38b"}, {"problem": 61, "code": "(fn [ks vs]\n  (loop [new-map {} [k & ks] ks [v & vs] vs]\n    (if (or (nil? k) (nil? v))\n      new-map\n      (recur (assoc new-map k v) ks vs)\n      )\n    )\n  )", "user": "5de6484ce4b0986d99407f66"}, {"problem": 61, "code": "(fn [keys vals]\n  (apply hash-map (interleave keys vals)))", "user": "5ddd134ae4b0948ae9d9adc0"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5dd60c58e4b0948ae9d9ad7c"}, {"problem": 61, "code": "(fn [col1 col2]\n   (apply assoc {} (interleave col1 col2)))", "user": "5db98f39e4b010eb3c36cd53"}, {"problem": 61, "code": "(fn [xs ys]\n  (loop [m {}\n         xs xs\n         ys ys]\n    (if (and (seq xs) (seq ys))\n      (recur (assoc m (first xs) (first ys)) (rest xs) (rest ys))\n      m)))", "user": "5d236215e4b02ea6f0fb6a09"}, {"problem": 61, "code": "#(into (sorted-map) (map vector %1 %2))", "user": "5de65feee4b0986d99407f68"}, {"problem": 61, "code": "#(apply assoc {} (interleave % %2))", "user": "5d7a748ce4b02e6b30c93547"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "5de68f83e4b0986d99407f6c"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5d5e2efee4b0c9e5857d4ff0"}, {"problem": 61, "code": "(fn [keys values] (apply (partial assoc {}) (interleave keys values)))", "user": "5c30da5ae4b0d62ef62d9f23"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5ddfd88be4b0948ae9d9ade1"}, {"problem": 61, "code": "( fn [k v]   (apply hash-map (interleave k v )))", "user": "5ddbd202e4b0948ae9d9adb4"}, {"problem": 61, "code": "#(loop [c1 %1 c2 %2 result {}]\n    (if (or (empty? c1) (empty? c2))\n      result\n      (recur (rest c1) (rest c2) (assoc result (first c1) (first c2)))))", "user": "4f24c859e4b0d66497709fef"}, {"problem": 61, "code": "#(apply merge (map hash-map % %2))", "user": "5ddb8a6ee4b0948ae9d9adb2"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5dfb2e2ae4b0a607a9a45cd6"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5dfc457de4b0a607a9a45cea"}, {"problem": 61, "code": "(fn map-construction [seq1 seq2]\n  (loop [s1 seq1\n         s2 seq2\n         xs {}]\n    (if (and (seq s1) (seq s2))\n      (let [f1 (first s1)\n            f2 (first s2)\n            new-xs (into xs {f1 f2})]\n        (recur (rest s1) (rest s2) new-xs))\n      xs)))", "user": "5df0c6ffe4b093ff717275c2"}, {"problem": 61, "code": "(fn\n  [k, v]\n  (into {} (map #(vector %1 %2) k v)))", "user": "5dd25ca8e4b0948ae9d9ad55"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5dfb20b8e4b0a607a9a45cd3"}, {"problem": 61, "code": "(fn [coll1 coll2] (apply assoc {} (interleave coll1 coll2)))", "user": "5dfa1c67e4b0a607a9a45cc5"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5da71eaee4b000c986472c15"}, {"problem": 61, "code": "(fn [ks vs] (apply hash-map (interleave ks vs)))", "user": "5bfc9037e4b0bdcf453d15f2"}, {"problem": 61, "code": "(fn [ks vs] \n  (loop [ks ks vs vs res {}]\n    (if (or (empty? ks) (empty? vs))\n      res\n      (recur (rest ks) (rest vs) (assoc res (first ks) (first vs)))\n    )\n  )\n)", "user": "5e09fd26e4b099d064962f60"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5e03a15be4b0a607a9a45d5e"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5e00b6e7e4b0a607a9a45d2b"}, {"problem": 61, "code": "(fn map-zip1 [coll1 coll2]\n  (into {} (map #(vector %1 %2) coll1 coll2)))", "user": "5e0d948fe4b099d064962f98"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "514992d2e4b0b64cbeae1848"}, {"problem": 61, "code": "#(loop [map {}\n        ks (seq %1)\n        vs (seq %2)]\n   (if (and ks vs)\n     (recur (assoc map (first ks) (first vs)) (next ks) (next vs))\n     map\n   )\n)", "user": "5e08c3dde4b0978307768fc8"}, {"problem": 61, "code": "(fn [allKeys allValues]\n   (loop [m {}\n          ks (seq allKeys)\n          vs (seq allValues)]\n     (if (and ks vs)\n       (recur (assoc m (first ks) (first vs))\n              (next ks)\n              (next vs))\n       m)))", "user": "5073e7fde4b054001656accb"}, {"problem": 61, "code": "(fn __\n  [xs ys]\n  (into {}\n        (map vector xs ys)))", "user": "510528a0e4b0730a5f55ad85"}, {"problem": 61, "code": "#(reduce merge (mapcat (fn [x y] (conj [] (hash-map x y))) % %2))", "user": "5e0e836fe4b099d064962fa8"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5e144bd5e4b0a047bd49f6e7"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "57023e92e4b08d47c97781da"}, {"problem": 61, "code": "#(into {} (map (fn([k v] {k v})) % %2))", "user": "5e121a89e4b099d064962fe4"}, {"problem": 61, "code": "(fn combine-maps [x y]\n  (if (or (empty? x) (empty? y))\n    {}\n    (assoc (combine-maps (rest x) (rest y)) (first x) (first y))))", "user": "5e18c885e4b0dc95940084fc"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5e17bb46e4b00200644e3d5a"}, {"problem": 61, "code": "(fn [k v] (reduce (fn [m [k v]] (assoc m k v)) {} (map vector k v)))", "user": "5cb0f70ce4b026601754b8c1"}, {"problem": 61, "code": "(fn [list1 list2]\n\t(loop [list1 list1 list2 list2 mymap {}]\n\t\t(if (or (empty? list1) (empty? list2))\n\t\t\tmymap\n\t\t\t(recur (rest list1) (rest list2) (assoc mymap (first list1) (first list2))))))", "user": "5b8aa478e4b0c0b3ffbd49b2"}, {"problem": 61, "code": "(fn [k v] (apply array-map (interleave k v)))", "user": "5dcd7933e4b0b296f82db5ae"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5d6eaa58e4b04d129b00f2cd"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5e16fd78e4b0a047bd49f726"}, {"problem": 61, "code": "(fn [x y]\n  (into {} (map #(hash-map %1 %2) x y)))", "user": "57fc5e42e4b0d3187e900997"}, {"problem": 61, "code": "(fn [left right]\n    (loop [l left\n           r right\n           out {}]\n      (if (or (empty? l) (empty? r))\n        out\n        (recur (rest l) (rest r) (assoc out (first l) (first r))))))", "user": "5df75fd8e4b0a607a9a45c92"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5e1a3989e4b0dc9594008511"}, {"problem": 61, "code": "(fn [ks vs] (loop [ksuffix ks vsuffix vs result {}] (if (or (empty? ksuffix) (empty? vsuffix)) result (recur (rest ksuffix) (rest vsuffix) (assoc result (first ksuffix) (first vsuffix))))))", "user": "5e1cc888e4b0dc959400853d"}, {"problem": 61, "code": "(fn [ks vs] (reduce #(conj % %2) {} (map vector ks vs)))", "user": "5e2549c8e4b05b4b0151615f"}, {"problem": 61, "code": "(comp (partial apply hash-map) interleave)", "user": "5d929ceae4b0915913b1d412"}, {"problem": 61, "code": "(fn [col1 col2]\n           (into {} (map (fn [x1 x2]\n                           [x1 x2])\n                         col1 col2)))", "user": "5e1c3e6ee4b0dc9594008530"}, {"problem": 61, "code": "(fn makemap[keys values]\n  (reduce conj {} (map vector keys values )))", "user": "5e078ba7e4b0978307768fb6"}, {"problem": 61, "code": "(fn my-zipmap\n  ([ks vs] (my-zipmap ks vs {}))\n  ([ks vs acc]\n   (if (or (empty? ks) (empty? vs))\n     acc\n     (recur (rest ks) (rest vs) (into acc {(first ks) (first vs)})))))", "user": "58f3c18ee4b0438e51c2cead"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5dc53ddee4b02f9375f4e1bd"}, {"problem": 61, "code": "(fn [k v]\n  (apply hash-map (interleave k v)))", "user": "5e357507e4b0650de70e2b2a"}, {"problem": 61, "code": "#(into {}  (map hash-map %1 %2))", "user": "5e257a33e4b05b4b01516166"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5e380e72e4b01d43a70e8db0"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map vector ks vs)))", "user": "5e38a9cbe4b01d43a70e8dc2"}, {"problem": 61, "code": "#(apply merge (map hash-map %1 %2))", "user": "5e246f92e4b05b4b01516150"}, {"problem": 61, "code": "(fn [a b]\n  (apply hash-map (interleave a b)))", "user": "5e394c33e4b01d43a70e8dd1"}, {"problem": 61, "code": "(fn [ks vs]\n  (let [pairs (map vector ks vs)]\n    (into {} pairs)))", "user": "5d47fa13e4b07c84aa5ae6b6"}, {"problem": 61, "code": "(fn [keys vals]\n  (apply hash-map (interleave keys vals)))", "user": "5c3796b3e4b0d62ef62d9f77"}, {"problem": 61, "code": "(fn a [x y] \n  (if (and (> (count x) 1) (> (count y) 1)) (conj (a (rest x) (rest y)) {(first x) (first y)} )\n  {(first x) (first y)}\n    )\n  )", "user": "5e31a4b0e4b05b4b0151622b"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5e3a25d4e4b01d43a70e8dde"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5e3e23d9e4b01d43a70e8e20"}, {"problem": 61, "code": "(fn [keys vals]\n   (loop [ks keys\n          vs vals\n          result {}]\n     (if (or (empty? ks) (empty? vs))\n       result\n       (recur (rest ks)\n              (rest vs)\n              (assoc result (first ks) (first vs))))))", "user": "5e3ef7d4e4b01d43a70e8e2d"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5e41b679e4b01d43a70e8e58"}, {"problem": 61, "code": "(fn map1 [arr1 arr2]\n (loop [x1 arr1 x2 arr2 res []]\n  (if (or (empty? x1) (empty? x2)) (into {} res)\n   (recur (next x1) (next x2) (conj res [(first x1) (first x2)])))))", "user": "5e42b688e4b01d43a70e8e6b"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "5e348945e4b0650de70e2b1d"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5e491182e4b043cd24807a46"}, {"problem": 61, "code": "(fn zip [xs ys]\n\t(apply array-map (flatten (map vector xs ys)))\n)", "user": "5c87c79be4b048ec896c591b"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5e18bd30e4b0dc95940084fa"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5e2586afe4b05b4b01516167"}, {"problem": 61, "code": "(fn [k v]\n  (apply hash-map (interleave k v)))", "user": "5dc72a9ce4b02f9375f4e1cd"}, {"problem": 61, "code": "(fn [ks vals]\n  (apply hash-map (interleave ks vals)))", "user": "5b99554ae4b0c0b3ffbd4ace"}, {"problem": 61, "code": "(fn zipmap* [s1 s2]\n (reduce \n   #(assoc %1 (first %2) (last %2)) \n   {}\n   (partition-all 2 (interleave s1 s2))))", "user": "5d078e2de4b0cc9c915881fa"}, {"problem": 61, "code": "(fn [x y]\n  (apply assoc {} (interleave x y)))", "user": "5dd70ee3e4b0948ae9d9ad85"}, {"problem": 61, "code": "(comp (partial apply hash-map) interleave)", "user": "5e50012ae4b027a2e10ac0bd"}, {"problem": 61, "code": "(fn my-zip [kv vv] (cond (and (empty? kv) (empty? vv)) nil (or (and (empty? kv) (= 1 (count vv))) (and (empty? vv) (= 1 (count kv)))) nil\n:else (merge (assoc {} (first kv) (first vv)) (my-zip (rest kv) (rest vv)))))", "user": "5d828b7ee4b0915913b1d382"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5ddd6cfae4b0948ae9d9adc4"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5e5b8d92e4b0fd0acd158658"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5dcc152ae4b02b31cc3da3c3"}, {"problem": 61, "code": "(fn [ks vs] \n  (into {} (map vector ks vs)))", "user": "5e41a67be4b01d43a70e8e56"}, {"problem": 61, "code": "#(into (hash-map) (mapcat (fn[k v](hash-map k v)) %1 %2))", "user": "5e48ec09e4b043cd24807a45"}, {"problem": 61, "code": "#(into {} (map vector %1 %2) )", "user": "5e44c804e4b01d43a70e8e89"}, {"problem": 61, "code": "(fn [keys vals] (into {}  (map (fn [k v] [k v]) keys vals)))", "user": "5d89427ae4b0915913b1d3b5"}, {"problem": 61, "code": "(fn [keys vals] (into (sorted-map) (map #(vector %1 %2) keys vals)))", "user": "5cb556f9e4b026601754b934"}, {"problem": 61, "code": "#(into (sorted-map) (map (fn [qv pv] [qv pv]) %1 %2))", "user": "5e692be9e4b04a83ad7cd269"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "5e63ffa0e4b0fd0acd1586a6"}, {"problem": 61, "code": "(fn [k, v]\n  (let [pairs (map vector k v)]\n    (reduce (fn [acc pair] (assoc acc (get pair 0) (get pair 1))) {} pairs)\n    )\n  )", "user": "5e6b9955e4b04a83ad7cd27b"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5df70ee8e4b0a607a9a45c8a"}, {"problem": 61, "code": "(fn [coll1 coll2]\n  (apply hash-map (flatten (map list coll1 coll2))))", "user": "5e724492e4b085ba37836dc7"}, {"problem": 61, "code": "(fn [a b]\n  (loop\n    [out {} x a y b]\n    (cond\n    \t(or (empty? x) (empty? y)) out\n    \t:else (recur (assoc out (first x) (first y)) (rest x) (rest y)))))", "user": "5e6e6537e4b04a83ad7cd29a"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5e8308abe4b09a7a73c8bbb4"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5e832e75e4b09a7a73c8bbb5"}, {"problem": 61, "code": "(fn [k v]\n  (loop [[k1 & k2] k [v1 & v2] v result (hash-map)]\n    (if (or (= k1 nil) (= v1 nil))\n      result\n      (recur k2 v2 (conj result (hash-map k1 v1))))))", "user": "5e7f62cce4b085ba37836e3b"}, {"problem": 61, "code": "(fn czipmap [x y]\n    (loop [keys x\n           values y\n           result {}]\n      (if (or (empty? keys) (empty? values))\n        result\n        (recur (rest keys)\n               (rest values)\n               (assoc result (first keys) (first values))))))", "user": "5e7b1ef4e4b085ba37836e10"}, {"problem": 61, "code": "(fn\n  [a b]\n  (reduce conj {} (map #(assoc {} %1 %2) a b)))", "user": "53528cd3e4b084c2834f4af2"}, {"problem": 61, "code": "(fn [keys vals]\n  (into {} (map (fn [k v] [k v]) keys vals)))", "user": "585c16c3e4b0f14aab7c877d"}, {"problem": 61, "code": "#(apply hash-map (mapcat list %1 %2))", "user": "5e6ca949e4b04a83ad7cd289"}, {"problem": 61, "code": "(fn [x y]\n  (reduce #(apply assoc %1 %2 ) {} (map vector x y)))", "user": "5e85163be4b09a7a73c8bbd0"}, {"problem": 61, "code": "(fn myzipmap\n  [[k & ks] [v & vs]]\n  (if (or (nil? k) (nil? v))\n          {} \n          (merge {k v} (myzipmap ks vs))))", "user": "5e20a159e4b05b4b01516118"}, {"problem": 61, "code": "#(apply sorted-map (interleave %1 %2))", "user": "5e79fcb9e4b085ba37836e08"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "5e486cb0e4b043cd24807a3e"}, {"problem": 61, "code": "(fn zipmap' [keys values]\n  (let [bounds (min (count keys) (count values))\n        keys (take bounds keys)\n        values (take bounds values)]\n    (reduce\n      (fn [acc curr]\n        (assoc acc curr (nth values (count acc))))\n      {}\n      keys)))", "user": "5d0eed51e4b0cc9c91588262"}, {"problem": 61, "code": "(fn [key-vec value-vec]\n  (into {} (map vector key-vec value-vec)))", "user": "55ce2b6de4b0e31453f64a26"}, {"problem": 61, "code": "(fn [k v]\n  (apply merge\n    (map #(assoc {} %1 %2) k v)))", "user": "5b02ab12e4b0cc2b61a3bd53"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "4eb70649535d7eef30807373"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5e13a6b7e4b099d064963001"}, {"problem": 61, "code": "#(apply assoc {} (interleave % %2))", "user": "5e7dc2d8e4b085ba37836e2f"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "5e8ce2fee4b0cb0169546328"}, {"problem": 61, "code": "(fn func [keys vals]\n  (into {} (map (fn [k v] [k v]) keys vals)))", "user": "5e805895e4b085ba37836e44"}, {"problem": 61, "code": "#(loop [mp {} ks %1 vs %2]\n   (if (or (empty? ks) (empty? vs))\n     mp\n     (recur (assoc mp (first ks) (first vs)) (rest ks) (rest vs))\n  )\n)", "user": "5e947a69e4b0fbed045a37f8"}, {"problem": 61, "code": "#(apply hash-map (mapcat vector %1 %2))", "user": "5e62444fe4b0fd0acd158694"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5be9ad9be4b0f319e2d7ec76"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5e99cbd4e4b0157ca96647e6"}, {"problem": 61, "code": "(fn mp [ks vs]\n  (if (or (empty? ks) (empty? vs))\n    {}\n  \t(assoc (mp (rest ks) (rest vs)) (first ks) (first vs))))", "user": "5e98e8a9e4b0157ca96647dc"}, {"problem": 61, "code": "#(apply hash-map(interleave %1 %2))", "user": "5e95873ae4b0fbed045a380a"}, {"problem": 61, "code": "(fn [k v] (apply assoc {} (interleave k v)))", "user": "5e94ff5fe4b0fbed045a37ff"}, {"problem": 61, "code": "(fn [a b] (into {} (map vector a b)))", "user": "5e996e76e4b0157ca96647e4"}, {"problem": 61, "code": "(fn [v1 v2] (into {} (map vector v1 v2)))", "user": "5e9c11f8e4b0157ca96647f6"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5e9771dee4b0157ca96647d0"}, {"problem": 61, "code": "(fn createMap\n  [k v]\n  (loop [keys k\n         values v\n         result {}]\n    (if (or (nil? (first keys)) (nil? (first values)))\n      result\n      (recur (rest keys) (rest values) (assoc result (first keys) (first values))))))", "user": "5e9636fee4b0fbed045a3816"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5b2be9b1e4b025bcb146f2b0"}, {"problem": 61, "code": "(fn [x y] (apply assoc {} (interleave x y)))", "user": "5e978fe5e4b0157ca96647d1"}, {"problem": 61, "code": "(fn my-mapp\n  [n x]\n  (apply hash-map (interleave n x)))", "user": "5e95013fe4b0fbed045a3800"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5e9e408fe4b00a66d4a95172"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5e9d1c75e4b0157ca9664801"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5e85d0bde4b09a7a73c8bbd6"}, {"problem": 61, "code": "(fn [ky vl]\n  (loop [result {}\n         ky ky\n         vl vl]\n    (if (or (empty? ky) (empty? vl))\n      result\n      (recur\n       (assoc result (first ky) (first vl))\n       (rest ky)\n       (rest vl)))))", "user": "5e950178e4b0fbed045a3801"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5dc88a38e4b02f9375f4e1db"}, {"problem": 61, "code": "(fn\n    [list1 list2]\n    (apply hash-map (interleave list1 list2)))", "user": "5e950310e4b0fbed045a3802"}, {"problem": 61, "code": "(fn [kys vls]\n   (->>\n     (interleave kys vls)\n     (apply hash-map)))", "user": "5e9878b9e4b0157ca96647d8"}, {"problem": 61, "code": "(fn my\n  [n x]\n  (apply hash-map (interleave n x)))", "user": "5ea3711ae4b00a66d4a9519d"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5ea6f88de4b00a66d4a951b1"}, {"problem": 61, "code": "(fn [keys vals]\n   (loop [s nil\n          k keys\n          v vals]\n     (if (empty? k)\n       s\n       (recur \n         (if (empty? v) s (assoc s (first k) (first v))) \n         (rest k) \n         (rest v)))))", "user": "5ea444b7e4b00a66d4a951a0"}, {"problem": 61, "code": "#(into {} (map (fn [x y] {x y}) %1 %2))", "user": "5ea7b04de4b00a66d4a951b6"}, {"problem": 61, "code": "(fn solution [keys vals]\n  (apply hash-map (mapcat #(vector %1 %2) keys vals)))", "user": "5e2ef900e4b05b4b015161fc"}, {"problem": 61, "code": "(fn [s1 s2] (into {} (map (fn [a b] [a b]) s1 s2)))", "user": "5ea97df7e4b00a66d4a951c8"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5c59b836e4b01df32ab73263"}, {"problem": 61, "code": "(fn [v1 v2] (apply hash-map (interleave v1 v2)))", "user": "5c9adfebe4b048ec896c5ab9"}, {"problem": 61, "code": "(fn [coll1 coll2]\n  (loop [[h1 & t1 :as coll1] coll1, [h2 & t2 :as coll2] coll2, res {}]\n    (if (or (empty? coll1) (empty? coll2))\n      res\n      (recur t1 t2 (assoc res h1 h2)))))", "user": "5e9f38cce4b00a66d4a9517e"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5e954b9ee4b0fbed045a3809"}, {"problem": 61, "code": "#(into (sorted-map) (map vector %1 %2))", "user": "5e218bb7e4b05b4b01516123"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map #(vector %1 %2) ks vs)))", "user": "5eb1c786e4b00a66d4a95201"}, {"problem": 61, "code": "(fn makemap\n  ([keys values currentmap]\n   (if (and (first keys) (first values))\n     (makemap (rest keys) (rest values) (assoc currentmap (first keys) (first values)))\n     currentmap\n     )\n   )\n  ([keys values]\n   (makemap keys values {}))\n  )", "user": "57d0fce5e4b0bd073c202364"}, {"problem": 61, "code": "(fn x [coll1 coll2]\n  (if (and (not (empty? coll1)) (not (empty? coll2)))\n    (let [k (first coll1)\n          v (first coll2)]\n  \t(assoc (x (rest coll1) (rest coll2)) k v))\n    {})\n  )", "user": "5e84b48ee4b09a7a73c8bbc8"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5eb193fde4b00a66d4a951fe"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5e5096c6e4b027a2e10ac0c6"}, {"problem": 61, "code": "(fn f [v1 v2]\n  (cond \n    (or (empty? v1) (empty? v2)) {}\n    (= 1 (count v1)) {(first v1) (first v2)}\n    :else (conj {(first v1) (first v2)} (f (rest v1) (rest v2)))))", "user": "5e12327ee4b099d064962fe5"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5e67ab18e4b0e171e103368a"}, {"problem": 61, "code": "(fn [as bs]\n(into {} (map vector as bs)))", "user": "5ebff55de4b00a66d4a95286"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5ebc7c13e4b00a66d4a95267"}, {"problem": 61, "code": "#(apply hash-map (mapcat vector %1 %2))", "user": "5ea970d1e4b00a66d4a951c6"}, {"problem": 61, "code": "(fn [a b]\n  (->>\n   (map vector a b)\n   (into {})))", "user": "5ec21ef0e4b00a66d4a95299"}, {"problem": 61, "code": "(fn [coll1 coll2]\n    (reduce #(conj %1 %2) {}\n          (map #(vector %1 %2) coll1 coll2)))", "user": "5defc177e4b093ff717275af"}, {"problem": 61, "code": "#(reduce merge (map hash-map %1 %2))", "user": "5ec3a13ae4b08d0ec38692b9"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5eb5d9bbe4b00a66d4a9522e"}, {"problem": 61, "code": "(comp (partial apply hash-map) interleave)", "user": "5de12192e4b0948ae9d9aded"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5e392de0e4b01d43a70e8dcb"}, {"problem": 61, "code": "(fn zip-map [coll1 coll2]\n  (let [num1 (count coll1)\n        num2 (count coll2)]\n  (if (or (<= num1 1) (<= num2 1)) {(first coll1) (first coll2)}\n        (conj {(first coll1) (first coll2)} (zip-map (rest coll1) (rest coll2))))))", "user": "568f2059e4b0dcc4269f40df"}, {"problem": 61, "code": "(fn [ks vs]\n                (loop [ks (seq ks)\n                       vs (seq vs)\n                       out {}]\n                  (cond\n                    (or (empty? ks) (empty? vs)) out\n                    :else (recur (rest ks)\n                                 (rest vs)\n                                 (assoc out (first ks) (first vs))))))", "user": "5eb22708e4b00a66d4a95204"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5ec943fde4b08d0ec38692f1"}, {"problem": 61, "code": "(fn me [[a & ra] [b & rb]] (if (and ra rb) (conj {a b} (me ra rb)) {a b}))", "user": "5ecc0831e4b016b56eae058c"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5e3302ece4b0650de70e2b02"}, {"problem": 61, "code": "(fn [keyz valz] (into {} (mapv vector keyz valz)))", "user": "5ecf4ee4e4b016b56eae05a6"}, {"problem": 61, "code": "(fn [x y] (apply assoc {} (interleave x y)))", "user": "5ecf55dae4b016b56eae05a8"}, {"problem": 61, "code": "(fn myMap [keys values]\n  (loop [k keys v values result {}]\n    (if (or (empty? k) (empty? v)) \n      result\n      (recur (rest k) (rest v) (assoc result (first k) (first v))))))", "user": "5e42ba49e4b01d43a70e8e6c"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5ecfd429e4b016b56eae05a9"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5eccbce6e4b016b56eae058e"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {}\n        (loop [ks ks\n               vs vs\n               acc []]\n          (if (and (seq ks) (seq vs))\n            (recur (rest ks) (rest vs) (conj acc [(first ks) (first vs)]))\n            acc))))", "user": "579c35fee4b05b1deef9ae04"}, {"problem": 61, "code": "#(reduce-kv (fn [m _ v] (assoc m (first v) (last v))) {} (vec (partition 2 (interleave % %2))))", "user": "51412b0ae4b0694e2952b79d"}, {"problem": 61, "code": "#(into {} (map vec (partition-all 2 (interleave %1 %2))))", "user": "5ed6030de4b016b56eae05db"}, {"problem": 61, "code": "(fn [v1 v2]\n  (into {}\n        (map #(vector %1 %2) v1 v2)))", "user": "5ebdb3d2e4b00a66d4a95275"}, {"problem": 61, "code": "(fn\n  [kys vls]\n  (loop [rslt                    {}\n         [fk & k-remain :as kys] (seq kys)\n         [fv & v-remain :as vls] (seq vls)]\n    (if (empty? kys)\n      rslt\n      (recur (if fv (assoc rslt fk fv) rslt)\n             k-remain\n             v-remain))))", "user": "5cf1d9e3e4b0aaa82f112a18"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5ed9c2cde4b0c7845d86b0e4"}, {"problem": 61, "code": "#(apply assoc {}  (apply interleave %&))", "user": "5ed8a12fe4b0c7845d86b0d7"}, {"problem": 61, "code": "(fn zm [a b] (if (or (empty? a) (empty? b)) {} (assoc (zm (rest a) (rest b)) (first a) (first b))))", "user": "5ed4482be4b016b56eae05ca"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5ed03b7fe4b016b56eae05ae"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5edd6eb7e4b0c7845d86b0f7"}, {"problem": 61, "code": "(fn [keylist\n     vallist]\n  (loop [k keylist\n         v vallist\n         out {}]\n    (if (or (empty? k) (empty? v))\n      out\n    (recur (rest k) (rest v) (conj out [(first k) (first v)])))))", "user": "5ec819b4e4b08d0ec38692e2"}, {"problem": 61, "code": "(fn [coll1 coll2]\n  (into {} (map vector coll1 coll2)))", "user": "5ec6de19e4b08d0ec38692da"}, {"problem": 61, "code": "(fn [coll1 coll2]  (let [min-count (min (count coll1) (count coll2))] (reduce (fn [accum val] \n                                        (assoc accum (nth coll1 val) (nth coll2 val) )) {} (range 0 min-count))))", "user": "53c73e8ae4b00fb29b2212a5"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5ebd7296e4b00a66d4a95273"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5ee738dee4b029a2061bbea2"}, {"problem": 61, "code": "(fn zip [v1 v2] (if (and (seq v1) (seq v2))\n                  (assoc (zip (rest v1) (rest v2)) (first v1) (first v2))\n                  {}))", "user": "5ee93720e4b029a2061bbeb7"}, {"problem": 61, "code": "(fn [x y]\n  (into {} (map vec (partition 2 (interleave x y)))))", "user": "5eb6561fe4b00a66d4a95233"}, {"problem": 61, "code": "(comp (partial into {}) (partial map vec) (partial partition 2) interleave)", "user": "5e909685e4b0cb016954634d"}, {"problem": 61, "code": "(fn [keys vals] (apply hash-map (flatten (map #(vector %1 %2) keys vals))))\n\n;; #(apply hash-map (interleave % %2))", "user": "5eccc5c2e4b016b56eae058f"}, {"problem": 61, "code": "(fn [ks, vs] (apply assoc {} (interleave ks vs)))", "user": "5ed875abe4b016b56eae05f2"}, {"problem": 61, "code": "(fn zipmap-home-made\n  [c1 c2]\n  (first\n   (let [c-short (#(if (< (count %1) (count %2)) %1 %2) c1 c2)]\n    (reduce\n     #(do\n        (println %2)\n       [(assoc (first %1) (first (second %1)) (first (nth %1 2)))\n        (rest (second %1))\n        (rest (nth %1 2))])\n     [{} c1 c2]\n     c-short))))", "user": "5ed52854e4b016b56eae05d2"}, {"problem": 61, "code": ";;(fn [s1 s2]\n;;  (apply hash-map  (interleave s1 s2)))\n\n#(apply hash-map  (interleave %1 %2))", "user": "5edb07dde4b0c7845d86b0ed"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5eb4927fe4b00a66d4a95221"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5df08767e4b093ff717275bf"}, {"problem": 61, "code": "#(apply array-map (mapcat list %1 %2))", "user": "5eeb03dde4b029a2061bbeca"}, {"problem": 61, "code": "(fn [keys values]\n  (loop [keys keys, values values, result {}]\n    (if (or (empty? keys)(empty? values))\n      result\n      (recur (rest keys)(rest values)(assoc result (first keys) (first values))))))", "user": "565b371fe4b068f2fe63dbff"}, {"problem": 61, "code": "(fn f\n  [k v]\n  (into {} (map vector k v)))", "user": "5ed15e23e4b016b56eae05ba"}, {"problem": 61, "code": "(fn [a b]\n  (reduce (fn [m [k v]] (assoc m k v))\n          {}\n          (map #(list %1 %2) a b)))", "user": "5eee7311e4b07c55ae4a0510"}, {"problem": 61, "code": "(fn [keys values]\n  (loop\n      [map {}\n       ks (seq keys)\n       vs (seq values)\n       ]\n    (if (and ks vs)\n      (recur (assoc map (first  ks) (first vs))\n             (next ks)\n             (next vs)\n             )\n      map)))", "user": "5455a6d3e4b0e397800069e2"}, {"problem": 61, "code": "#(loop [i 0 arr1 %1 arr2 %2 hash {}]\n         (if (and (< i (count arr1)) (< i (count arr2)) )\n           (recur (+ i 1) arr1 arr2 (conj hash {(arr1 i) (arr2 i)}))\n           hash\n           )\n         )", "user": "5eee9352e4b07c55ae4a0512"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5ec7d7f2e4b08d0ec38692e1"}, {"problem": 61, "code": "(fn [x y]\n  (reduce (fn [m [k v]] (assoc m k v)) {} (partition 2 (interleave x y))))", "user": "5ef18431e4b07c55ae4a0529"}, {"problem": 61, "code": "#(into {} (map (fn [x y] (vector x y)) %1 %2))", "user": "5ed70b97e4b016b56eae05e6"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5eec1001e4b07c55ae4a0502"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "576aea4fe4b0a07e8fc18126"}, {"problem": 61, "code": "(comp (partial apply hash-map) interleave)", "user": "5ef5ee81e4b07c55ae4a054a"}, {"problem": 61, "code": "#(apply array-map (interleave %1 %2))", "user": "5ee81beae4b029a2061bbeac"}, {"problem": 61, "code": "#(apply assoc {} (interleave % %2))", "user": "5eff339ae4b0cf489e8d7f0c"}, {"problem": 61, "code": "(fn my-zmap [keys vals]\n  (reduce into (map (fn [key val] {key val}) keys vals)))", "user": "5edfb1e5e4b0c7845d86b107"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "5e9b7aefe4b0157ca96647f1"}, {"problem": 61, "code": "(fn my-zipmap [arr1 arr2]\n \n    (\n     into\n      (array-map)\n      (map vector arr1 arr2)\n      )\n  )", "user": "5edc16e1e4b0c7845d86b0f1"}, {"problem": 61, "code": "#(apply array-map (interleave % %2))", "user": "5e9e642ce4b00a66d4a95174"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map vector ks vs)))", "user": "5ed16f26e4b016b56eae05bb"}, {"problem": 61, "code": "(fn [c1 c2]\n  (apply merge (map (fn [i j] {i j}) c1 c2)))", "user": "5bc7f2d6e4b07a9b28b100b7"}, {"problem": 61, "code": "(fn zip-map [k v]\n  (apply assoc {} (interleave k v)))", "user": "5f03550ce4b0cf489e8d7f33"}, {"problem": 61, "code": "(fn ->map [key-coll val-coll]\n   (into {} (map vector key-coll val-coll)))", "user": "5ef8e9e0e4b09b61f08553cb"}, {"problem": 61, "code": "#(into {} (map hash-map %1 %2))", "user": "5e9b6471e4b0157ca96647f0"}, {"problem": 61, "code": "(fn [k v]\n   (apply hash-map (interleave k v)))", "user": "58ed2e21e4b056aecfd47d7a"}, {"problem": 61, "code": "(fn [ks vs] (loop [ks ks\n                   vs vs\n                   kvs {}]\n                  (if (or (= 0 (count ks))\n                           (= 0 (count vs)))\n                    kvs\n                    (recur (rest ks) (rest vs) (conj kvs [(first ks) (first vs)])))))", "user": "5e7bb000e4b085ba37836e1d"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5ed6c4ede4b016b56eae05e3"}, {"problem": 61, "code": "#(->> \n      (map vector %1 %2)\n      (into {}))", "user": "5e64ae6ce4b0fd0acd1586ac"}, {"problem": 61, "code": "(fn [keys vals]\n    (loop [map {}\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        map)))", "user": "57e070fde4b0bd073c202478"}, {"problem": 61, "code": "(fn my-zipmap\n  [x y]\n  (loop [[x & xrest] x\n         [y & yrest] y\n         result {}]\n    (if (or (empty? xrest) (empty? yrest))\n      (assoc result x y)\n      (recur xrest yrest (assoc result x y)))))", "user": "5f003099e4b0cf489e8d7f17"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5e471203e4b043cd24807a2a"}, {"problem": 61, "code": "#(loop\n   [ks %1\n    vs %2\n    res {}]\n   (if (or (empty? ks) (empty? vs))\n       res\n       (recur (rest ks) (rest vs) (into res {(first ks) (first vs)}))))", "user": "5f0b8243e4b0f30dddfb5d45"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5f0c8b0de4b0f30dddfb5d4c"}, {"problem": 61, "code": "(fn makemap \n  [k v]\n  (loop [k k v v r {}]\n    (if (or (empty? k) (empty? v))\n      r\n      (recur (rest k) (rest v) (assoc r (first k) (first v))))))", "user": "5f088bb3e4b0cf489e8d7f5f"}, {"problem": 61, "code": "(fn [k v] \n  (let [interleaved (interleave k v)]\n    (loop [arr interleaved, m {}]\n      (if (empty? arr) m (recur (rest (rest arr)), (assoc m (first arr) (second arr)))\n      )\n    )\n  )\n)", "user": "5d73530ce4b02e6b30c93514"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "5f03ab5be4b0cf489e8d7f37"}, {"problem": 61, "code": "(fn [keys, values] (reduce #(assoc % (first %2) (nth %2 1)) {} (map list keys values)))", "user": "5509a23ee4b06e50f9beb11a"}, {"problem": 61, "code": "(fn [x y] (apply assoc {}\n                  (interleave x y)))", "user": "5f082d9ee4b0cf489e8d7f5c"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5ec0de29e4b00a66d4a9528e"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5d83b9aae4b0915913b1d386"}, {"problem": 61, "code": "(fn [u v] (into {} (for [i (range (min (count u) (count v)))] [(u i) (v i)])))", "user": "58f98231e4b0438e51c2cf4c"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5f17e3c5e4b091ba50b4dbd0"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5ec5f7f2e4b08d0ec38692d1"}, {"problem": 61, "code": "(fn [k v]\n  (apply merge (map #(hash-map %1 %2) k v)))", "user": "5ec3cdf7e4b08d0ec38692bc"}, {"problem": 61, "code": "(fn [a b] (apply merge (map #(hash-map %1 %2) a b)))", "user": "5e3071abe4b05b4b01516213"}, {"problem": 61, "code": "(fn foo [s1 s2]\n(if (and (> (count s1) 0) (> (count s2) 0))\n(conj (hash-map (first s1) (first s2))  (foo (rest s1) (rest s2)))\n)\n)", "user": "5f1aade6e4b091ba50b4dbe4"}, {"problem": 61, "code": "(fn func [x y]\n  (apply assoc {} (interleave x y)))", "user": "5666c2dbe4b04acd4f672dc3"}, {"problem": 61, "code": "(fn [ks vs]\n  (->> (map vector ks vs)\n       (apply concat)\n       (apply hash-map)))", "user": "5d431c77e4b07c84aa5ae68f"}, {"problem": 61, "code": "(fn [keys vals]\n    (->>\n      (interleave keys vals)\n      (partition 2)\n      (map vec)\n      (into {})\n      ))", "user": "5f0e8312e4b0f30dddfb5d5b"}, {"problem": 61, "code": "(fn [coll1 coll2]\n  (into (sorted-map) (map vector coll1 coll2)))", "user": "5f081f6de4b0cf489e8d7f5a"}, {"problem": 61, "code": "(fn my-zipmap [A B]\n   ((fn helper [A B result]\n      (if (and (not-empty A)\n               (not-empty B))\n        (helper (rest A) (rest B) (into result [{(first A) (first B)}]))\n        result\n        )\n      )\n    A\n    B\n    {}))", "user": "5ee75f8be4b029a2061bbea5"}, {"problem": 61, "code": "(comp (partial apply sorted-map) interleave)", "user": "5f22e8c9e4b0f565ad99828b"}, {"problem": 61, "code": "(fn map-const [k v] (apply hash-map (interleave k v)))", "user": "553b90c8e4b09218d5f45005"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5b7f2d75e4b047b03b203768"}, {"problem": 61, "code": "(fn [ks vs] (reduce conj (map #(hash-map %1 %2) ks vs)))", "user": "5f21d172e4b0f565ad998286"}, {"problem": 61, "code": "#(into {} (map vec (partition 2 (interleave %1 %2))))", "user": "5f2c02d1e4b033932238a65f"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "596a66cde4b069c0a1a19803"}, {"problem": 61, "code": "#(reduce (partial apply assoc) {} (map list %1 %2))", "user": "5f2d6787e4b033932238a66d"}, {"problem": 61, "code": "(fn [ks vs] (apply hash-map (mapcat vector ks vs)))", "user": "51553ea7e4b06c5f6a1490a2"}, {"problem": 61, "code": "#(apply assoc {} \n   (interleave %1 %2))", "user": "5f309144e4b0574c87022c23"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5f1af439e4b0f565ad998257"}, {"problem": 61, "code": "(fn count-occurrences \n    ([x x1] (count-occurrences x x1 0 {}))\n\n    ([x x1 i y]\n        (cond (< i (min (count x) (count x1)))\n            (count-occurrences x x1 (inc i) (conj y {(nth x i) (nth x1 i)}))\n            :else y\n        )\n    )\n)", "user": "5f0cb4f3e4b0f30dddfb5d4e"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5e9154c1e4b0cb0169546354"}, {"problem": 61, "code": "#(reduce conj {} (map vector %1 %2))", "user": "5f300f28e4b033932238a682"}, {"problem": 61, "code": "#(loop [\n                      map {}\n                      ks %1\n                      vs %2]\n                     (if (and ks vs)\n                       (recur (assoc map (first ks)(first vs))(next ks)(next vs))map))", "user": "5f27cc7fe4b033932238a646"}, {"problem": 61, "code": "#(into (sorted-map) (map vector %1 %2))", "user": "5f0824c5e4b0cf489e8d7f5b"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "566812f0e4b04acd4f672de1"}, {"problem": 61, "code": "(fn [a b]\n   (reduce #(conj %1 %2) {} (map #(hash-map %1 %2) a b)) )", "user": "5f3f2281e4b004f08c61c561"}, {"problem": 61, "code": "(fn [k v]\n  (let [n (min (count k) (count v))]\n    (loop [i 0\n           ck (first k)\n           cv (first v)\n           ckk (rest k)\n           ckv (rest v)\n           m {}]\n      (if (= i n)\n        m\n        (recur (inc i) (first ckk) (first ckv) (rest ckk) (rest ckv) (assoc m ck cv))))))", "user": "5f3ddc71e4b004f08c61c551"}, {"problem": 61, "code": "#(apply hash-map (mapcat vector %1 %2))", "user": "5f2c94b4e4b033932238a669"}, {"problem": 61, "code": "(fn create-map [v1 v2]\n  (reduce (fn [m [a b]] (assoc m a b)) {} (map #(vector %1 %2) v1 v2)))", "user": "53d63e6ce4b0e771c3025454"}, {"problem": 61, "code": "#(into {} (map (fn [a b] (conj [] a b)) %1 %2))", "user": "5f468d26e4b0955706451fc1"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2)\n  )", "user": "5f3a8493e4b004f08c61c527"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5f3abcc4e4b004f08c61c52b"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (map (fn [k v] [k v]) ks vs)))", "user": "5f431d32e4b0955706451fb5"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5f29837ee4b033932238a64f"}, {"problem": 61, "code": "(fn [ks vs] (apply hash-map (mapcat #(vector %1 %2) ks vs)))", "user": "5992dc6ae4b0866487ed0d7d"}, {"problem": 61, "code": "(fn [a b] (apply hash-map (interleave a b)))", "user": "5c527129e4b0fb8c5ffd99de"}, {"problem": 61, "code": "(fn [K V]\n  (loop [k K v V r {}]\n    (if (or (empty? k) (empty? v)) r (recur (rest k) (rest v) (assoc r (first k) (first v))))))", "user": "5f574662e4b0a0bc16850a90"}, {"problem": 61, "code": "#(into (sorted-map) (map vector %1 %2))", "user": "5f419985e4b0955706451fab"}, {"problem": 61, "code": "(fn [ks vs]\n  (letfn [(f [ks vs]\n             (when-not (or (empty? ks) (empty? vs))\n               (merge {(first ks) (first vs)} (f (rest ks) (rest vs)))))]\n    (f ks vs)))", "user": "5f5e7158e4b02876ed9fcff0"}, {"problem": 61, "code": "#(apply sorted-map (interleave % %2))", "user": "5f32f69ae4b0574c87022c35"}, {"problem": 61, "code": "#(apply hash-map (mapcat vector %1 %2))", "user": "53275758e4b09d4e7a9b54fc"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5f5f9483e4b02876ed9fcff8"}, {"problem": 61, "code": "(fn [k v] \n  (loop [_k k _v v result {}]\n  (if (some empty? [_k _v])\n    result\n    (recur\n      (rest _k)\n      (rest _v)\n      (assoc result (first _k) (first _v))\n      )\n\n    )\n  )\n  )", "user": "5f58db95e4b0a0bc16850a9a"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5f0dfa48e4b0f30dddfb5d55"}, {"problem": 61, "code": "(fn [a b]\n  (into {} (map hash-map a b)))", "user": "5f4eb036e4b0102c75033969"}, {"problem": 61, "code": "(fn zipmap* [keys vals]\n  (apply hash-map (interleave keys vals)))", "user": "5f02f365e4b0cf489e8d7f2c"}, {"problem": 61, "code": "(fn [vec1 vec2]\n  (apply array-map (interleave vec1 vec2)))", "user": "563f0fdae4b08d4f616f5ece"}, {"problem": 61, "code": "(fn f [ks vs]\n  (apply merge (map #(hash-map %1 %2) ks vs)))", "user": "5ea6fe98e4b00a66d4a951b2"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5f5f2eafe4b02876ed9fcff5"}, {"problem": 61, "code": "(fn [keys vals]\n  (loop [my-map {}\n         my-keys (seq keys)\n         my-vals (seq vals)]\n    (if (and my-keys my-vals)\n      (recur (assoc my-map (first my-keys) (first my-vals))\n             (next my-keys)\n             (next my-vals))\n      my-map)))", "user": "5f63d933e4b02876ed9fd018"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map vector ks vs)))", "user": "5eff6c0ee4b0cf489e8d7f11"}, {"problem": 61, "code": "(fn [ks vs] \n  (apply merge (map #(assoc {} %1 %2) ks vs)))", "user": "5f6d4305e4b02876ed9fd05c"}, {"problem": 61, "code": "(fn [xs ys] (apply assoc {} (interleave xs ys)))", "user": "5f6cb2a5e4b02876ed9fd057"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5f724f55e4b02876ed9fd089"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "588fbb39e4b00487982d51bd"}, {"problem": 61, "code": "(fn [k v] (into {} (map (fn [& m] (vec m)) k v)))", "user": "54fce8bde4b07d26eda61d30"}, {"problem": 61, "code": "(comp (partial apply hash-map) interleave)", "user": "5d0e9931e4b0cc9c91588258"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5eecf110e4b07c55ae4a050b"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5f648ef1e4b02876ed9fd01b"}, {"problem": 61, "code": "(fn [ks vs] (->> \n             (interleave ks vs)\n             (apply hash-map)))", "user": "5ec0db8be4b00a66d4a9528d"}, {"problem": 61, "code": "(fn my-zipmap\n  [k v]\n  (apply merge (map (fn [x y] {x y}) k v)))", "user": "5f3103aee4b0574c87022c24"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5f6e576ae4b02876ed9fd066"}, {"problem": 61, "code": "(fn [key-list values]\n  (loop [inner-key-list key-list\n         inner-values values\n         product {}]\n    (if (some empty? [inner-key-list inner-values])\n      product\n      (recur (rest inner-key-list) (rest inner-values)\n             (merge product {(first inner-key-list) (first inner-values)})))))", "user": "5f79bff2e4b02876ed9fd0ca"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5f727dd6e4b02876ed9fd090"}, {"problem": 61, "code": "(fn build_map\n  [k v]\n  (apply hash-map (interleave k v))\n)", "user": "5f6b8222e4b02876ed9fd052"}, {"problem": 61, "code": "(fn [ks vs]\n  (loop [ks ks\n         vs vs\n         result {}]\n    (let [k (first ks)\n          v (first vs)]\n      (if (and k v)\n        (recur (rest ks) (rest vs) (assoc result k v))\n        result))))", "user": "523578efe4b0a643f2dcb74c"}, {"problem": 61, "code": "(fn\n  [a b]\n  (reduce\n    (fn [m itm] (assoc m (first itm) (last itm)))\n    {}\n    (map #(vector %1 %2) a b)))", "user": "5bc60a65e4b07a9b28b10082"}, {"problem": 61, "code": "#(apply  hash-map (interleave %1 %2))", "user": "5f77b99fe4b02876ed9fd0bc"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5f6e5c58e4b02876ed9fd067"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "5c06fab7e4b0bdcf453d16bd"}, {"problem": 61, "code": "#(apply assoc {} (interleave % %2))", "user": "5f393bd6e4b0574c87022c76"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5f727bd1e4b02876ed9fd08c"}, {"problem": 61, "code": "(fn[ks vls]\n    (loop [newhm {}\n           ks ks\n           vls vls]\n        (if (or (empty? ks)(empty? vls))\n            newhm\n            (recur (assoc newhm (first ks) (first vls)) (rest ks) (rest vls)))))", "user": "5f77d470e4b02876ed9fd0be"}, {"problem": 61, "code": "(fn [ks vs]\n      (loop [[k :as ks] ks\n             [v :as vs] vs\n             ret {}]\n        (cond (empty? ks) ret\n              (empty? vs) ret\n              :else (recur (rest ks) (rest vs) (assoc ret k v)))))", "user": "5f82cfcce4b0c071e6c840fb"}, {"problem": 61, "code": "(fn [x y]\n    (into {} (map vector x y)))", "user": "5f74de11e4b02876ed9fd0a5"}, {"problem": 61, "code": "(fn[x y]\n  (into {} (map vector x y)))", "user": "5f77890ae4b02876ed9fd0b9"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5f7e91c8e4b0c071e6c840d8"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5f72f144e4b02876ed9fd093"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5f84f0f5e4b0375e81f54e78"}, {"problem": 61, "code": "(fn [a b] (into {} (map vector a b)))", "user": "5f686436e4b02876ed9fd03c"}, {"problem": 61, "code": "(fn [f f1]\n  (apply hash-map (interleave f f1))\n  \n  )", "user": "5f727be9e4b02876ed9fd08d"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map (fn [k v] {k v}) ks vs)))", "user": "5f6e23e6e4b02876ed9fd064"}, {"problem": 61, "code": "(fn[k v] (loop [res {}\n                 k k\n                 v v]\n              (if (or (empty? k) (empty? v))\n                  res\n                  (recur (assoc res (first k) (first v)) (rest k) (rest v)))))", "user": "5f727d2fe4b02876ed9fd08f"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5f8497dce4b0375e81f54e74"}, {"problem": 61, "code": "(fn [vec1 vec2]\n   (apply assoc {} (interleave vec1 vec2))\n  )", "user": "5f84f110e4b0375e81f54e79"}, {"problem": 61, "code": "#(apply \n  hash-map (interleave %1  %2))", "user": "5f792d48e4b02876ed9fd0c5"}, {"problem": 61, "code": "(fn [coll1 coll2]\n        \n         (apply hash-map(interleave coll1 coll2)))", "user": "5f737899e4b02876ed9fd099"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5f8361bae4b01aacbe7a2712"}, {"problem": 61, "code": "(fn [coll1 coll2]\n  (into {} (map vector coll1 coll2)))", "user": "5f8795d4e4b020286baa5e96"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5f87e757e4b0169f6814c40f"}, {"problem": 61, "code": "(fn [v1 v2] (apply hash-map (interleave v1 v2)))", "user": "5f875a0ae4b020286baa5e94"}, {"problem": 61, "code": "(fn [a b]\n  (apply assoc {} (interleave a b))\n  )", "user": "5f8330b8e4b01aacbe7a270f"}, {"problem": 61, "code": "(fn [k v]\n  (apply assoc {} (interleave k v)))", "user": "5f810e97e4b0c071e6c840ed"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5f727cb0e4b02876ed9fd08e"}, {"problem": 61, "code": "(fn zpm [s1 s2]\n  (reduce #(conj %1 (vec %2)) {} (partition 2 (interleave s1 s2))))", "user": "5f8b06afe4b0715f5002d74a"}, {"problem": 61, "code": "(fn [x y] (reduce #(let [[k v] %2] (assoc %1 k v)) {} (map #(vector %1 %2) x y)))", "user": "5f86a98be4b0649ffcda4caa"}, {"problem": 61, "code": "(fn new-map [keys vals]\n  (reduce #(assoc %1 (first %2) (last %2)) {} (map vector keys vals)))", "user": "5c8cfff8e4b048ec896c5996"}, {"problem": 61, "code": "(fn [a b] (apply merge (map #(hash-map % %2) a b)))", "user": "5f8e865fe4b0715f5002d76d"}, {"problem": 61, "code": "#(apply merge (map hash-map %1 %2))", "user": "5f8fe45ae4b0715f5002d78d"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5f8d76c3e4b0715f5002d758"}, {"problem": 61, "code": "(fn [ks vs]\n  (loop [res {}\n         ks ks\n         vs vs]\n    (if (or (empty? ks) (empty? vs))\n      res\n      (recur (assoc res (first ks) (first vs))\n             (rest ks)\n             (rest vs)))))", "user": "5f93529ae4b0715f5002d7bc"}, {"problem": 61, "code": "(fn [k v]\n  (apply merge (map hash-map k v))\n  )", "user": "5f597522e4b0a0bc16850a9e"}, {"problem": 61, "code": "(fn [listA listB] (reduce #(assoc %1 (first %2) (second %2)) {} (map #(conj [] %1 %2) listA listB)))", "user": "5ee4545ee4b029a2061bbe8d"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5f816cc6e4b0c071e6c840f1"}, {"problem": 61, "code": ";(fn [k v]\n;\t(loop [m {} k k v v]\n;\t\t(if (or (empty? k) (empty? v))\n;\t\t\tm\n;\t\t\t(recur (assoc m (first k) (first v)) (rest k) (rest v)))))\n\n;#(apply hash-map (interleave % %2))\n\n#(into {} (map vector % %2))", "user": "5f6a583ae4b02876ed9fd046"}, {"problem": 61, "code": "#(into {} (map vector % %2))", "user": "5eb741e4e4b00a66d4a9523b"}, {"problem": 61, "code": "(fn\n  [xs ys]\n  (reduce (fn\n            [acc x]\n            (assoc acc (first x)(last x))\n            )\n          {}\n          (map (fn [x y] (vector x y)) xs ys)\n  ))", "user": "5e1c24f4e4b0dc959400852d"}, {"problem": 61, "code": "(fn [a b]\n  (reduce \n    #(assoc % (first %2)(last %2)) \n    {} (partition 2 (interleave a b))))", "user": "5f737e16e4b02876ed9fd09a"}, {"problem": 61, "code": "(fn myF [xs ys] (into {}(map vector xs ys)))", "user": "56eff7c1e4b04a395b9a0468"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5fa17538e4b0f0ebd91b77e3"}, {"problem": 61, "code": "(fn [k v] (apply hash-map (interleave k v)))", "user": "5f9f032fe4b0715f5002d839"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5fa74b82e4b0fa27300f3dda"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5f5358b7e4b0a0bc16850a77"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5f331015e4b0574c87022c37"}, {"problem": 61, "code": "(fn [ks vs]\n  (into (hash-map) (map #(vector %1 %2) ks vs)))", "user": "5fa8424ce4b0fa27300f3de5"}, {"problem": 61, "code": "(fn map-cons [keys vals]\n    (apply hash-map (mapcat #(vector %1 %2) keys vals)))", "user": "5fa358a1e4b0f0ebd91b77fd"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5face7fce4b08cb800c85ae9"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5facfb48e4b08cb800c85aea"}, {"problem": 61, "code": "(fn [coll1 coll2]\n   (apply merge (map hash-map coll1 coll2)))", "user": "5fb544f6e4b08cb800c85b4e"}, {"problem": 61, "code": "(fn [a b] (into (sorted-map) (map vector a b)))", "user": "5fab7ea6e4b08cb800c85ad8"}, {"problem": 61, "code": "#(into {} (mapv vector %1 %2))", "user": "573a0ecce4b0cd1946bd1088"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "5df79c31e4b0a607a9a45c9b"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5f7f285ee4b0c071e6c840e0"}, {"problem": 61, "code": "(fn [%1 %2]\n  (loop [ks (seq %1)\n         vs (seq %2)\n         r {}]\n    (if (and (not (empty? ks)) (not (empty? vs)))\n      (recur (rest ks) (rest vs) (assoc r (first ks) (first vs)))\n      r)))", "user": "5fb3a096e4b08cb800c85b35"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5f6b5d83e4b02876ed9fd050"}, {"problem": 61, "code": "#(reduce conj {} (map vector %1 %2))", "user": "5fa96ddbe4b0fa27300f3dec"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5e8c3e8fe4b0cb0169546322"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5d965c73e4b0d3f9b434ad33"}, {"problem": 61, "code": "(fn [k v] (apply assoc {} (flatten (map #(list %1 %2)   k v))))", "user": "5fae3d8ae4b08cb800c85afa"}, {"problem": 61, "code": "(fn \n  [xs1 xs2]\n  (apply merge\n         (mapv #(assoc {} %1 %2) xs1 xs2)))", "user": "5484c3b2e4b0e286459a11a2"}, {"problem": 61, "code": "(fn [keys vals]\n           (loop [map {}\n                  ks  (seq keys)\n                  vs  (seq vals)]\n             (if (and ks vs)\n               (recur (assoc map (first ks) (first vs))\n                      (next ks)\n                      (next vs))\n               map)))", "user": "55808f8ee4b05c286339e0ee"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5fab003de4b08cb800c85ad1"}, {"problem": 61, "code": "(fn [x y]\n  (apply assoc {} (interleave x y)))", "user": "5fc4d277e4b06ffabd1ef72a"}, {"problem": 61, "code": "(fn [arg1 arg2]\n\t(loop [col1 arg1\n           col2 arg2\n           res {}\n           ]  \n      \t(cond\n         \t(or (empty? col1) (empty? col2)) res\n         \t:else (recur (rest col1) (rest col2) (conj res {(first col1) (first col2)}))\n         )\n      \n      )\n)", "user": "5fc5c303e4b02c825b0c8c1a"}, {"problem": 61, "code": "#(reduce merge (map hash-map % %2))", "user": "5f838122e4b01aacbe7a2715"}, {"problem": 61, "code": "(fn zipmap* [coll1 coll2]\n  (into {} (map (fn [a b] [a b]) coll1 coll2)))", "user": "5f38eecce4b0574c87022c72"}, {"problem": 61, "code": "#(apply assoc {} (flatten (map vector %1 %2)))", "user": "5f6b35c3e4b02876ed9fd04d"}, {"problem": 61, "code": "(fn [l1 l2] (into {} (map vector l1 l2)))", "user": "5f90aeefe4b0715f5002d799"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "58c69d88e4b021aa9917ed5e"}, {"problem": 61, "code": "(fn zm [keys vals]\n  (loop [r {} k keys v vals]\n    (if (or (empty? k) (empty? v))\n      r\n      (recur (assoc r (first k) (first v)) (rest k) (rest v)))))", "user": "5f9c4113e4b0715f5002d821"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5f96fa49e4b0715f5002d7e9"}, {"problem": 61, "code": "(fn [a b]\n  (loop [res {}\n         a a\n         b b]\n    (if (or (empty? a) (empty? b))\n      res\n      (recur\n       (assoc res (first a) (first b))\n       (rest a)\n       (rest b)))))", "user": "5a3e1243e4b0447ef91cc5ae"}, {"problem": 61, "code": "(fn [ks vs] (apply merge (map (fn [k v] {k v}) ks vs)))", "user": "54d7e277e4b0a52adc2e2031"}, {"problem": 61, "code": "(fn zipmap' \n  [keys vals]\n  (->> (for [index (range (min (count keys) (count vals)))\n             :let [key (nth keys index)\n                   val (nth vals index)]]\n         [key val])\n       (into {})))", "user": "5fe5a64de4b05ac5b16ea187"}, {"problem": 61, "code": "(fn [keys_ values] (apply hash-map (mapcat (fn [& rest] rest) keys_ values)))", "user": "59d4d126e4b0ef0a1e9b5be9"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5fbb010ae4b03f550f448233"}, {"problem": 61, "code": "#(loop [x %1 y %2 o {}]\n  (if (or (empty? x) (empty? y)) \n    o\n    (recur (rest x) (rest y) (conj o [(first x) (first y)]))))", "user": "5f3567d6e4b0574c87022c44"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "54c13b87e4b0ed20f4ff6f20"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5fd361f2e4b07e53c2f3f04e"}, {"problem": 61, "code": "(fn [in-x in-y]\n      (apply array-map (flatten (map vector in-x in-y))))", "user": "5df94f73e4b0a607a9a45cb6"}, {"problem": 61, "code": "(fn [ks vs] (reduce merge (map array-map ks vs)))", "user": "5fe0d4d4e4b05ac5b16ea164"}, {"problem": 61, "code": "#(apply hash-map (mapcat list %1 %2))", "user": "54aec375e4b09f271ff37cf9"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5fe1b893e4b05ac5b16ea16f"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply hash-map (interleave ks vs)))", "user": "5fef4292e4b05ac5b16ea1d7"}, {"problem": 61, "code": "(fn [ks vs]\n        (into {} (map (fn [k v] {k v}) ks vs)))", "user": "546c4377e4b00cfc9eacc177"}, {"problem": 61, "code": "(fn a [s1 s2]\n\t(apply assoc {} (interleave s1 s2)))", "user": "5fe09d1fe4b05ac5b16ea15b"}, {"problem": 61, "code": "#(into {} (apply map vector [%1 %2]))", "user": "5f974321e4b0715f5002d7f3"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5fe362d9e4b05ac5b16ea179"}, {"problem": 61, "code": "(fn [a b] (reduce conj (map #(assoc {} % %2) a b)))", "user": "5ff3aca3e4b05ac5b16ea205"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5fd8bcb3e4b05ac5b16ea11b"}, {"problem": 61, "code": "#(apply merge\n        (map (fn [k v]\n               {k v})\n             %1\n             %2))", "user": "5fe9169ce4b05ac5b16ea1a0"}, {"problem": 61, "code": "#(apply assoc {}\n          (interleave %1 %2))\n\n;; (fn [ks vs]\n;;     (into {} (map #(vector %1 %2) ks vs)))\n\n;; (comp (partial apply hash-map) interleave)\n\n;; #(apply array-map (interleave %1 %2))\n\n;; #(->> (interleave %1 %2)\n;;         (partition-all 2)\n;;         (map (partial apply vector))\n;;         (into {}))\n\n;; #(->> (interleave %1 %2)\n;;         (partition-all 2)\n;;         (map (partial apply vector))\n;;         (into {}))\n\n;; (fn [ks vs]\n;;     (letfn [(get-rst [kss vss rst]\n;;               (if (or (empty? kss) (empty? vss))\n;;                 rst\n;;                 (recur (rest kss)\n;;                        (rest vss)\n;;                        (merge rst {(first kss) (first vss)}))))]\n;;       (get-rst ks vs {})))", "user": "591ad160e4b09b4ee5954bdf"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "5fd10010e4b07e53c2f3f02a"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5ff454a1e4b05ac5b16ea20d"}, {"problem": 61, "code": "(fn zip [keys vals]\n  (->> (map (fn [k v] {k v}) keys vals)\n       (reduce merge)))", "user": "5ff8ead1e4b06df49cee14ab"}, {"problem": 61, "code": "(fn map-constr [ks vs]\n  \n  ; loop through the keys\n  (loop [res {} index 0]\n    (println (count ks))\n    (if (or (= index (count ks)) (= index (count vs)))\n      res\n      \n      (recur (assoc res (get ks index) (get vs index) ) (inc index))\n      \n      ) ; if end\n    \n    ) ; loop end\n  \n  ) ; fn en", "user": "5ff676a9e4b06df49cee1497"}, {"problem": 61, "code": "(fn [xa xb]\n  (apply hash-map\n         (mapcat #(list %1 %2) xa xb))\n  )", "user": "5fa6db67e4b0fa27300f3dd2"}, {"problem": 61, "code": "(fn [v1 v2]\n  (apply assoc {} (interleave v1 v2)))", "user": "58a0ac0de4b02bd94d917e9c"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5eea5c98e4b029a2061bbebf"}, {"problem": 61, "code": "(fn myzipmap [keys values] \n  (->> (map #(vector %1 %2) keys values)\n      (into {}))\n  )", "user": "5fee18f2e4b05ac5b16ea1d2"}, {"problem": 61, "code": "(fn solution [k v]\n  (when (and (first k) (first v))\n    (conj {(first k) (first v)} (solution (rest k) (rest v)))))", "user": "5ff5bc1ae4b06df49cee1490"}, {"problem": 61, "code": "(fn [ks vs]\n  (->> (map #(hash-map %1 %2) ks vs)\n       (reduce merge)\n       )\n  )", "user": "6004c750e4b074f607df6645"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5ff709e4e4b06df49cee149b"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5ff61113e4b06df49cee1492"}, {"problem": 61, "code": "(fn[x y](into {} (map vector x y)))", "user": "6001460ce4b074f607df6611"}, {"problem": 61, "code": "(fn f\n  ([xs1 xs2] (f xs1 xs2 {}))\n  ([[h1 & t1] [h2 & t2] m]\n   (if (or (nil? h1) (nil? h2))\n     m\n     (f t1 t2 (assoc m h1 h2)))))", "user": "5f37263de4b0574c87022c4e"}, {"problem": 61, "code": "(fn [xs ys]\n\t(reduce #(into %1 %2) {} (map #(hash-map %1 %2) xs ys)))", "user": "5da7176ae4b000c986472c13"}, {"problem": 61, "code": "(fn foo [s1 s2]\n  (loop [s1 s1\n         s2 s2\n         acc {}]\n      (if (or (empty? s1) (empty? s2))\n          acc\n          (let [x (first s1)\n                xs (rest s1)\n                y (first s2)\n                ys (rest s2)]\n              (recur xs ys (conj acc [x y]))))))", "user": "600ae927e4b074f607df6689"}, {"problem": 61, "code": "(fn [ks v]\n    (into {} (map vector ks v)))", "user": "56aad4f7e4b03c432f187338"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5ff93da9e4b06df49cee14af"}, {"problem": 61, "code": "(fn [a b] (reduce (fn [acc [x y]] (assoc acc x y)) {} (map vector a b)))\n; `interleave` gets us the equivalent of a flattended version of `map vector a b`\n; We can then just apply into hash-map\n;#(apply hash-map (interleave %1 %2))", "user": "5edd05bfe4b0c7845d86b0f3"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "583369e6e4b089d5ab817c9c"}, {"problem": 61, "code": "(fn map-construction [keys values]\n  (apply assoc {}  ;; Assoc creates a map\n         (interleave keys values)))  ;; Sequence of keys and values (one at each time)", "user": "5fbf6fe7e4b0ad6fc3476147"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "6011b89ee4b074f607df66bc"}, {"problem": 61, "code": "(fn map- [coll1 coll2]\r\n    (->> (interleave coll1 coll2) \r\n        (apply hash-map)))", "user": "5fec4f5ee4b05ac5b16ea1bf"}, {"problem": 61, "code": "#(apply array-map (interleave %1 %2))", "user": "5f5aee4fe4b0a0bc16850aaa"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "57e10705e4b0bfb2137f5a6a"}, {"problem": 61, "code": "(fn zip [ks vs]\n  (into {} (map #(vector %1 %2) ks vs)))", "user": "601aaa93e4b0bf4ca6b10926"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "60096aabe4b074f607df667f"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "5be1c6c6e4b0ed4b8aab4ca5"}, {"problem": 61, "code": ";; this does extra work...\n(fn my-zipmap [s1 s2]\n  (apply merge (map (fn [k v] {k v}) s1 s2)))\n\n;; #(apply hash-map (interleave %1 %2))", "user": "5fb68f09e4b08cb800c85b58"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "5ff70cfde4b06df49cee149c"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "4e38f245535deb9a81d77f3e"}, {"problem": 61, "code": "(fn [ks vs]\n  (loop [[k & ks] ks\n         [v & vs] vs\n         acc {}]\n    (if-not (and k v)\n      acc\n      (recur ks vs (assoc acc k v)))))", "user": "601004d6e4b074f607df66b2"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply assoc {} (interleave ks vs)))", "user": "602049b8e4b0bf4ca6b10961"}, {"problem": 61, "code": "(fn re [xs ys]\n  (apply hash-map ((fn te [as bs] (if (or (empty? as) (empty? bs)) [] (conj (te (rest as) (rest bs)) (first as) (first bs)))) xs ys)))", "user": "60228147e4b0d5df2af22202"}, {"problem": 61, "code": "(fn [l1 l2]\n  (loop [s1 l1 s2 l2 mapa {}]\n    (if (or (empty? s1)\n            (empty? s2)) mapa\n      (recur (rest s1)\n             (rest s2)\n             (assoc mapa (first s1) (first s2))))))", "user": "60264d89e4b0d5df2af2222d"}, {"problem": 61, "code": "(fn[x y](apply assoc {} (interleave x y)))", "user": "60195030e4b0bf4ca6b10920"}, {"problem": 61, "code": "(fn zipcat* [& cols]\n  (reduce #(assoc %1 (first %2) (second %2)) {} (apply map list cols)))", "user": "6022844de4b0d5df2af22203"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "6026d2cae4b0d5df2af22232"}, {"problem": 61, "code": "(fn [keys vals]\n  (loop [acc {}\n         keys keys\n         vals vals]\n    (if (and keys vals)\n      (recur (assoc acc (first keys) (first vals))\n             (next keys)\n             (next vals))\n      acc)))", "user": "5fea32f3e4b05ac5b16ea1aa"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "601bdcb3e4b0bf4ca6b10930"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "6026737ee4b0d5df2af2222f"}, {"problem": 61, "code": "#(into {} (map (fn [[& elements]] (into [] elements)) (partition 2 (interleave %1 %2))))", "user": "602b90c1e4b0d5df2af22266"}, {"problem": 61, "code": "(fn [a b]\n  (into {} (map vector a b)))", "user": "5afecee2e4b0cc2b61a3bd28"}, {"problem": 61, "code": "(fn [a b] (apply assoc {} (interleave a b)))", "user": "602d5eade4b0d5df2af22279"}, {"problem": 61, "code": "(fn f [xs-keys xs-vals]\n    (apply hash-map (interleave xs-keys xs-vals)))", "user": "5ff64845e4b06df49cee1495"}, {"problem": 61, "code": "(fn [l1 l2] (into (hash-map) (map vector l1 l2)))", "user": "5a778224e4b013a48d399761"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "600eb95de4b074f607df66a6"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "602f8400e4b0d5df2af22299"}, {"problem": 61, "code": "(fn [x y] (into {} (map (fn [a b] {a b}) x y)))", "user": "60329afce4b0d5df2af222b8"}, {"problem": 61, "code": "(fn [keys vals]\n  (loop [res {}\n         k (seq keys)\n         v (seq vals)]\n    (if (or (empty? k) (empty? v))\n      res\n      (recur (assoc res (first k) (first v)) (rest k) (rest v)))))", "user": "5fada7cce4b08cb800c85af5"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "602b6cf7e4b0d5df2af22265"}, {"problem": 61, "code": "(fn construct [s1 s2]\n  (loop [r1 s1\n        r2 s2\n        mp {}]\n    (if (or (empty? r1) (empty? r2))\n      mp\n      (recur \n        (rest r1) \n        (rest r2)\n        (assoc mp (first r1) (first r2))  \n      )\n    )\n  )\n)", "user": "60335b35e4b0d5df2af222bf"}, {"problem": 61, "code": "#(apply hash-map (interleave % %2))", "user": "5fdb8657e4b05ac5b16ea133"}, {"problem": 61, "code": "(fn [coll coll2]\n(apply assoc {} (interleave coll coll2)))", "user": "5f8e2a08e4b0715f5002d767"}, {"problem": 61, "code": "(fn foo [key vals]\n        (if(or (empty? key ) (empty? vals))\n          nil\n          (conj (hash-map (first key) (first vals)) \n                (foo (rest key) (rest vals)))))", "user": "6038b6b4e4b0d5df2af222ef"}, {"problem": 61, "code": "(fn\n  [keys-seq values-seq]\n  (loop [curr-keys keys-seq curr-values values-seq curr-map {}]\n    (if (or (empty? curr-keys) (empty? curr-values)) \n      curr-map\n      (recur (rest curr-keys) (rest curr-values) (assoc curr-map (first curr-keys) (first curr-values))))\n    )\n  )", "user": "60337f1fe4b0d5df2af222c1"}, {"problem": 61, "code": "(fn\n    [seq1 seq2]\n    (loop [\n           seq1 seq1\n           seq2 seq2\n           result {}\n    ]\n      (if (and (first seq1) (first seq2))\n        (recur (rest seq1) (rest seq2) (conj result [(first seq1) (first seq2)]))\n        result\n        )\n      )\n    )", "user": "602f56c5e4b0d5df2af22297"}, {"problem": 61, "code": "(fn [ks vs]\n  (apply hash-map (interleave ks vs)))", "user": "603d5f2ae4b0d5df2af2230c"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "604129d6e4b0d5df2af22339"}, {"problem": 61, "code": "(fn [a b] (into {} (map #(hash-map %1 %2) a b)))", "user": "58c71509e4b021aa9917ed6e"}, {"problem": 61, "code": "(fn [& args]\n  (apply hash-map (apply interleave args)))", "user": "60460824e4b02d28681c77bc"}, {"problem": 61, "code": "(fn a [ks vs]\n  (let\n    [[fk & rk] ks\n     [fv & rv] vs]\n    (if (and fk fv)\n      (assoc (a rk rv) fk fv)\n      {}\n      )))", "user": "6045582fe4b02d28681c77b6"}, {"problem": 61, "code": "(fn [x y]\n    (reduce (fn [a [w z]] (assoc a w z)) \n            {} \n            (map #(vector %1 %2) x y)))", "user": "603ae21de4b0d5df2af222fb"}, {"problem": 61, "code": "(fn [keys vals]\n  (apply hash-map (mapcat #(vector %1 %2) keys vals))\n  )", "user": "60436423e4b02d28681c77a3"}, {"problem": 61, "code": "(fn f\n  [xs ys]\n  (cond\n    (or (empty? xs) (empty? ys)) ()\n    :else (conj {(first xs) (first ys)} (f (rest xs) (rest ys)))))", "user": "60486e8ae4b02d28681c77db"}, {"problem": 61, "code": "(fn zipmap-\n  [keys vals]\n  (->> [keys vals]\n       (apply map (fn [k v] {k v}))\n       (reduce conj)))", "user": "604a30c6e4b02d28681c77f0"}, {"problem": 61, "code": "(fn [coll1 coll2] (loop [res {}\n                         c1 coll1\n                         c2 coll2]\n                   (if (or (empty? c1) (empty? c2)) res (recur (assoc res (first c1) (first c2)) (rest c1) (rest c2))\n                     )\n                   ))", "user": "60471241e4b02d28681c77c9"}, {"problem": 61, "code": "#(into {} (map-indexed (fn [idx itm] [itm (nth %2 idx)]) (take (min (count %) (count %2)) %)))", "user": "604d3cb1e4b0b7ec0ac60ac2"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map vector ks vs)))", "user": "601c39eee4b0bf4ca6b10937"}, {"problem": 61, "code": "(fn\n  [k v]\n  (->> (map #(hash-map %1 %2) k v)\n       (apply merge)))", "user": "4e586949535d8a8b8723a292"}, {"problem": 61, "code": "(fn zipper [x y] (if (or(= 0(count x)) (= 0(count y)))\n                     {}\n                     (merge (assoc {} (first x) (first y)) (zipper (drop 1 x) (drop 1 y)))))", "user": "604f4be1e4b0b7ec0ac60ace"}, {"problem": 61, "code": "(fn map-const\n  [coll1 coll2]\n  (reduce conj (map hash-map coll1 coll2)))", "user": "60396c95e4b0d5df2af222f4"}, {"problem": 61, "code": "(fn [value1 value2]\n  (apply hash-map (interleave value1 value2)))", "user": "60504383e4b056659d6341fa"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "6020365ae4b0bf4ca6b10960"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "526759b3e4b03e8d9a4a715b"}, {"problem": 61, "code": "(fn my-zipmap [key-vec value-vec]\n  (if (or (empty? key-vec)\n          (empty? value-vec))\n    {}\n      (merge (hash-map (first key-vec) (first value-vec))\n             (my-zipmap (rest key-vec) (rest value-vec)))))", "user": "5684e200e4b04eec3ec5cfc4"}, {"problem": 61, "code": "(fn [f s]\n  (apply assoc {} \n   (interleave f s)))", "user": "5ef381a3e4b07c55ae4a053c"}, {"problem": 61, "code": "#(into (hash-map) (apply map vector %&))", "user": "605b7a90e4b079a07f8593fc"}, {"problem": 61, "code": "(fn \n  [coll1 coll2]\n  (apply hash-map (interleave coll1  coll2)))", "user": "6059d2e0e4b07e92fa001ace"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5b522591e4b02d533a91bd09"}, {"problem": 61, "code": "(fn [v1 v2]\n  (apply hash-map (interleave v1 v2)))", "user": "6059d9c8e4b07e92fa001ad0"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "598e7998e4b02b9968b84d34"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "6040e6dbe4b0d5df2af2232a"}, {"problem": 61, "code": "#(into {} (map vec (partition 2 (interleave % %2))))", "user": "60538924e4b04c8f2157d153"}, {"problem": 61, "code": "(fn [v1 v2]\n  (apply assoc {}\n         (interleave v1 v2)))", "user": "53b0750fe4b047364c044483"}, {"problem": 61, "code": "(fn [& vecs] (apply hash-map (apply interleave vecs)))", "user": "6059d824e4b07e92fa001acf"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "54be7c0de4b0ed20f4ff6eec"}, {"problem": 61, "code": "(fn [ks vs]\n   (into {} (map-indexed (fn [idx k]\n                           (let [v (get vs idx)] \n                             (when v \n                               {k v}))) ks)))", "user": "5d5c2730e4b09db18d4482ea"}, {"problem": 61, "code": "(fn [xs ys]\n   (reduce-kv\n    (fn [acc key val]\n      (if (<= key (dec (count ys)))\n\t\t\t\t(assoc acc val (nth ys key))\n        acc)) {} xs))", "user": "603f6623e4b0d5df2af2231f"}, {"problem": 61, "code": "(fn [a b] (into {} (map #(vector %1 %2) a b)))", "user": "60606490e4b03746e80ebf67"}, {"problem": 61, "code": "(comp (partial into {}) (partial map vector))", "user": "5f665d45e4b02876ed9fd02f"}, {"problem": 61, "code": "(fn\n  [keys vals]\n  (into (hash-map) (map (fn [k v] [k v]) keys vals)))", "user": "5ec02e20e4b00a66d4a95288"}, {"problem": 61, "code": "(fn [a b] (apply merge (map hash-map a b)))", "user": "60654263e4b069485764ddc9"}, {"problem": 61, "code": "(fn [c d] (into {} (map (fn [a b] [a b]) c d)))", "user": "6065755ee4b069485764ddcc"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5f548678e4b0a0bc16850a7e"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (map #(vector %1 %2) ks vs)))", "user": "606aafcfe4b069485764ddf6"}, {"problem": 61, "code": "(fn my-zipmap [keys vals]\n  (apply hash-map (interleave keys vals)))", "user": "60537cd1e4b04c8f2157d152"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "60689984e4b069485764dde6"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "606a70a5e4b069485764ddf2"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "606c87aae4b069485764de0d"}, {"problem": 61, "code": "#(into {} (map (comp vec list) %1 %2))", "user": "606e0a42e4b069485764de19"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map vector ks vs)))", "user": "51435753e4b0c172af7558d5"}, {"problem": 61, "code": "(fn [coll1 coll2]\n      (apply merge (map  #(assoc {} %1 %2) coll1 coll2))\n      \t)", "user": "604ccb9fe4b0b7ec0ac60ac1"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5eedfc62e4b07c55ae4a050e"}, {"problem": 61, "code": "(fn [keys values] (loop [keylst keys valuelst values result {}]\n                    (if (empty? keylst)\n                      result\n                      (if (empty? valuelst)\n                        result\n                        (recur (rest keylst) (rest valuelst) (assoc result (first keylst) (first valuelst)))))))", "user": "606d75f5e4b069485764de13"}, {"problem": 61, "code": "(fn map-construction' [coll1 coll2]\n  (loop [[head1 & tail1] coll1\n         [head2 & tail2] coll2]\n    (println coll1 coll2)\n    (when (and coll1 coll2)\n      (conj (hash-map head1 head2) (map-construction' tail1 tail2)))))", "user": "605a876be4b000d535e6f53c"}, {"problem": 61, "code": "(fn\n    [k v]\n    (apply hash-map (interleave k v))\n    )", "user": "6074f5ede4b069485764de52"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "6074e088e4b069485764de4d"}, {"problem": 61, "code": "(fn dict [keys values]\n  (loop [result {}, ks keys, vs values]\n    (if (or (empty? ks) (empty? vs))\n      result\n      (recur (assoc result (first ks) (first vs))\n             (rest ks) (rest vs))\n      )\n    )\n  )", "user": "5f6adf5ee4b02876ed9fd049"}, {"problem": 61, "code": "#(into {} (map hash-map %1 %2))", "user": "6024544be4b0d5df2af2221f"}, {"problem": 61, "code": ";;; tenemos que poner 1 y 1 basicamente \n;;; hab\u00eda una funci\u00f3n que hac\u00eda eso   ---> interleave creo \n;;; recibimos dos sets y se pasan a hash-map\n(fn [ki elem]\n  (apply hash-map (interleave ki elem)))\n\n\n;;; apply \u00bfQue cosa? luego el mezclador ()", "user": "6075c214e4b069485764de5b"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "60764350e4b069485764de5e"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "606ff89be4b069485764de22"}, {"problem": 61, "code": "(fn my-zipmap\n  [coll1 coll2]\n  (loop [coll1 coll1\n         coll2 coll2\n         res {}]\n\t(cond\n     (or (empty? coll1) (empty? coll2)) res\n     :else (recur (rest coll1) (rest coll2) (assoc res (first coll1) (first coll2))))))", "user": "5cf938a5e4b0b71b1d808a90"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "607e1d32e4b03d835a6eaeda"}, {"problem": 61, "code": "(fn [keys values]\n  (loop [keys keys\n         values values\n         result {}]\n    (cond\n      (or (empty? keys)\n          (empty? values)) result\n      :else (recur (rest keys)\n                   (rest values)\n                   (assoc result (first keys)\n                          (first values))))))", "user": "5e860270e4b09a7a73c8bbdb"}, {"problem": 61, "code": "(fn [x y]\n  (loop [c x d y e {}]\n    (if (or (empty? c) (empty? d))\n      e\n      (recur (rest c)\n             (rest d)\n             (assoc e (first c) (first d))))))", "user": "607d6bc1e4b03d835a6eaecc"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "605b49b7e4b079a07f8593f8"}, {"problem": 61, "code": "(fn do-zipmap [ks vs]\n  (apply hash-map (interleave ks vs)))", "user": "60777335e4b0a637ed78034f"}, {"problem": 61, "code": "(fn [a b]\n  (loop [r {}\n         s a\n         e b]\n    (if (and (seq s) (seq e))\n      (recur (assoc r (first s) (first e)) (rest s) (rest e))\n      r)\n    )\n  )", "user": "5d917ef0e4b0915913b1d402"}, {"problem": 61, "code": "(fn [coll1 coll2]\n (->> (interleave coll1 coll2)\n      (apply hash-map)))", "user": "5f82609ae4b0c071e6c840f9"}, {"problem": 61, "code": "#(apply (partial assoc {}) (interleave %1 %2))", "user": "6070c7bae4b069485764de27"}, {"problem": 61, "code": "(fn [a b] (into {} (map vector a b)))", "user": "6076adb2e4b069485764de60"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "6086cdefe4b0736b099e4302"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "607a1523e4b0a637ed78036a"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "6074e1e4e4b069485764de4f"}, {"problem": 61, "code": "(fn [a b]\n  (loop [i 0\n         mp {}]\n    (if (or (= i (count a)) (= i (count b)))\n      mp\n     (recur (inc i) (assoc mp (a i) (b i)) ) )))", "user": "6074df6fe4b069485764de4b"}, {"problem": 61, "code": "(fn map-con [keys values]\n  (apply assoc {} (interleave keys values)))", "user": "607dd962e4b03d835a6eaed2"}, {"problem": 61, "code": "(fn my-zipmap [keys vals]\n  (into {} (map vector keys vals)))", "user": "608256d7e4b0736b099e42da"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "6088395de4b0ae75613dcee2"}, {"problem": 61, "code": "(fn [ks elem]\n  (apply hash-map (interleave ks elem)))", "user": "6074dfa4e4b069485764de4c"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "607e1cf9e4b03d835a6eaed9"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "6074e1ade4b069485764de4e"}, {"problem": 61, "code": "(fn [ks vs]\n  (into {} (map vector ks vs)))", "user": "60794173e4b0a637ed78035d"}, {"problem": 61, "code": "(fn [a b] (apply hash-map (interleave a b)))", "user": "605f5c69e4b03746e80ebf5e"}, {"problem": 61, "code": "(fn map-const [keys values]\n  (into {} (map #(vector %1 %2) keys values)))", "user": "60849bd6e4b0736b099e42f2"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "6074e278e4b069485764de51"}, {"problem": 61, "code": "(fn maps [n s]\n  (apply hash-map(interleave n s)))", "user": "6085edade4b0736b099e42fc"}, {"problem": 61, "code": "(fn MapConstruction [lst1 lst2]\n  (reduce conj (map hash-map lst1 lst2)))", "user": "607508f3e4b069485764de54"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "608b3fe1e4b0adce4b61c442"}, {"problem": 61, "code": "(fn [k v]\n  (apply hash-map (interleave k v))\n  )", "user": "60752ef6e4b069485764de55"}, {"problem": 61, "code": "(fn [lst xLst] (loop [mapp {}\n                      n    0]\n                 (if (or (= n (count lst)) (= n (count xLst)))\n                   mapp\n                   (recur (conj mapp {(nth lst n) (nth xLst n)}) (inc n)))))", "user": "607e1d9de4b03d835a6eaedb"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "608828dee4b0ae75613dcee1"}, {"problem": 61, "code": "(fn [ks vs]\n  ((fn spotzmhelp [aks avs m]\n    (if (or (empty? aks) (empty? avs))\n      m\n      (assoc (spotzmhelp (rest aks) (rest avs) m) (first aks) (first avs)))) ks vs {}))", "user": "60882700e4b0ae75613dcedf"}, {"problem": 61, "code": "(fn [xs ys] (apply hash-map (interleave xs ys)))", "user": "5f0a65dae4b09a3f05b71806"}, {"problem": 61, "code": "#(apply merge (map (fn [k v]\n                     {k v})\n                   %1\n                   %2))", "user": "6078ce29e4b0a637ed78035a"}, {"problem": 61, "code": "(fn [keys values]\n  (into (sorted-map) (map\n  #(vector %1 %2)\n  keys values)))", "user": "5e7fb908e4b085ba37836e3f"}, {"problem": 61, "code": "(fn [a b](apply hash-map (interleave a b)))", "user": "607f3336e4b05857a65e7747"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "6088c22ee4b0ae75613dcee4"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "6081b7fce4b0736b099e42d4"}, {"problem": 61, "code": ";#(apply merge (map hash-map %1 %2))\n\n#(apply hash-map (interleave %1 %2))", "user": "608910a8e4b0ae75613dceed"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "60845eb8e4b0736b099e42ef"}, {"problem": 61, "code": "(fn ans-61 [arr1 arr2]\n  (apply hash-map\n         (interleave arr1 arr2)))", "user": "608fac60e4b03bd49d9f36c7"}, {"problem": 61, "code": "(fn zip-map [k v]\n   (loop [keys k values v result {}]\n     (if (or (= '() keys) (= '() values))\n       result\n       (recur (rest keys) (rest values) (assoc result (first keys) (first values))))))", "user": "6090e617e4b03bd49d9f36ce"}, {"problem": 61, "code": "(fn[a b](apply hash-map(mapcat vector a b)))", "user": "5f1eec36e4b0f565ad998274"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "608e6047e4b03bd49d9f36bf"}, {"problem": 61, "code": "(fn [c1 c2]\n  (into {} (map #(assoc {} %1 %2) c1 c2)))", "user": "608ec5e4e4b03bd49d9f36c0"}, {"problem": 61, "code": "(fn [ks vs] (into {} (map (fn [k v] [k v]) ks vs)))", "user": "6098263be4b00e9e6653c3f9"}, {"problem": 61, "code": "(fn [a b](into (hash-map) (map vector a b)))", "user": "4f30896ce4b0d6649770a07b"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "608ee2f7e4b03bd49d9f36c1"}, {"problem": 61, "code": "(fn [ks vs]\n  (into '{} (map #(vector %1 %2)  ks vs)))", "user": "6086abade4b0736b099e42ff"}, {"problem": 61, "code": "#(into {} (map (fn [k v] [k v]) %1 %2))", "user": "54d9366ce4b0a52adc2e204e"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "609aa543e4b00e9e6653c40c"}, {"problem": 61, "code": "(fn [k v]\n  (apply assoc {} (interleave k v)))", "user": "60a39b80e4b00e9e6653c450"}, {"problem": 61, "code": "(fn kzip [ks vs] \n  (if (or (empty? ks) (empty? vs))\n    (hash-map) \n    (assoc (kzip (rest ks) (rest vs)) (first ks) (first vs))))", "user": "60b2aaebe4b0e0fa5f1b4228"}, {"problem": 61, "code": "(fn [klist vlist]\n  (loop [ks klist\n         vs vlist\n         res {}]\n    (if (or (empty? ks) (empty? vs))\n      res\n      (recur (rest ks) (rest vs) (assoc res (first ks) (first vs))))))", "user": "51b920bfe4b0e871ca4958f9"}, {"problem": 61, "code": "(fn [v1 v2]\n  (reduce (fn [a b]\n            (conj a {(first b) (second b)})) {} (partition-all 2 (interleave v1 v2))))", "user": "60aecd73e4b00e9e6653c49a"}, {"problem": 61, "code": "(fn [keys-vec vals-vec]\n  (into {} (map vector keys-vec vals-vec)))", "user": "60b8b0f8e4b0e0fa5f1b425c"}, {"problem": 61, "code": "(fn [keys vals]\n    (loop [map (transient {})\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc! map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        (persistent! map))))", "user": "57123c96e4b09c608db70454"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "60b7e2c5e4b0e0fa5f1b4252"}, {"problem": 61, "code": "(fn [seq-1 seq-2]\n  (loop [out {}\n         seq-1 seq-1\n         seq-2 seq-2]\n    (let [head-1 (first seq-1)\n          tail-1 (rest  seq-1)\n          head-2 (first seq-2)\n          tail-2 (rest  seq-2)]\n      (if head-1\n        (if head-2\n          (recur (assoc out head-1 head-2) tail-1 tail-2)\n          out)\n        out))))", "user": "60b66033e4b0e0fa5f1b4248"}, {"problem": 61, "code": "#(apply sorted-map (interleave % %2))", "user": "604a3daee4b02d28681c77f2"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "606b16b8e4b069485764ddf7"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "51bd78c3e4b0ff155d51d2b0"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "60bfb68be4b0e0fa5f1b429e"}, {"problem": 61, "code": "(fn [a b] (into {} (map vector a b)))", "user": "5a9f2c53e4b0d174b936c812"}, {"problem": 61, "code": "(fn [lst1 lst2]\n  (into (hash-map) (mapcat hash-map lst1 lst2)))", "user": "608e5697e4b03bd49d9f36be"}, {"problem": 61, "code": "(fn map-construction [ks vs]\n  (->> (map vector ks vs)\n       (into {})))", "user": "60c0ceb7e4b0e0fa5f1b42a6"}, {"problem": 61, "code": "(fn [k v] (apply assoc {} (interleave k v)))", "user": "5fd92743e4b05ac5b16ea11f"}, {"problem": 61, "code": "#(apply assoc {} (interleave %1 %2))", "user": "60b3b375e4b0e0fa5f1b4232"}, {"problem": 61, "code": "#(into {} (map (fn [x y] {x y}) %1 %2))", "user": "6093b56ce4b00e9e6653c3e0"}, {"problem": 61, "code": "(fn my-zip-map [keys values]\n  (apply hash-map\n         (mapcat list keys values)))", "user": "60c91f48e4b0e0fa5f1b4304"}, {"problem": 61, "code": "(fn [k v]\n   (loop [c 0\n          y []]\n     (if (= c (min (count k) (count v)))\n       (apply hash-map y)\n       (recur (inc c) (conj y (k c) (v c))))))", "user": "5fa80c01e4b0fa27300f3de2"}, {"problem": 61, "code": "(fn\n  [keyz valz]\n  (loop [counter 0 coll valz result {}]\n    (let [current-key (nth keyz counter nil)\n          current-val (nth valz counter nil)]\n      (if (or (nil? current-key) (nil? current-val))\n        result\n        (recur (inc counter) (rest coll) (assoc result current-key current-val)))))\n  )", "user": "603e8e3ae4b0d5df2af22316"}, {"problem": 61, "code": "#(apply hash-map (interleave %1 %2))", "user": "5aba04dce4b073f17744269e"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5e3d183fe4b01d43a70e8e11"}, {"problem": 61, "code": "#(into {} (map vector %1 %2))", "user": "5571d6e5e4b09a3098a5253f"}, {"problem": 61, "code": "(fn f [x y]\n  (->> (map #(hash-map %1 %2) x y)\n       (into (sorted-map))\n       ))", "user": "6022429be4b0d5df2af22200"}, {"problem": 61, "code": "(fn map-construction [keys vals]\r\n    (into {} (map \r\n            vector\r\n            keys \r\n            vals)))", "user": "60c90322e4b0e0fa5f1b4302"}, {"problem": 61, "code": "#(into {} (map vec (partition 2 (interleave %1 %2))))", "user": "60dd865ee4b0d8b48c489db3"}]