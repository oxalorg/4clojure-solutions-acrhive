[{"code": "(fn [a b]\r\n  (let [a-multiples (iterate (partial + a) a)\r\n        lcm (first (filter #(= (rem % b) 0) a-multiples))]\r\n    (/ (* a b) lcm)))", "problem": 66, "user": "4dcd818e535d5973398f929d"}, {"code": "(fn x [a b]\r\n  (if (zero? a)\r\n       b\r\n       (if (zero? b)\r\n            a\r\n            (x b (mod a b)))))", "problem": 66, "user": "4db03279838c48654951d9bc"}, {"code": "(fn [a b] (if (= b 0) a (recur b (mod a b))))", "problem": 66, "user": "4dd6fa35535d2dad7130b5cd"}, {"code": "(fn [a b] (if (= b 0) a (recur b (mod a b))))", "problem": 66, "user": "4dc3780b535da86f151f0c3f"}, {"code": "(fn gcd [x y]\r\n            (if (zero? x)\r\n                y\r\n                (gcd (mod y x) x)))", "problem": 66, "user": "4dd62278535d2dad7130b5c7"}, {"code": "(fn gcd [a b]\r\n  (if (= 0 b)\r\n    a\r\n    (gcd b (mod a b))))", "problem": 66, "user": "4dc986d0535d5973398f9285"}, {"code": "(fn [a b]\r\n  (if\r\n    (= b 0) a\r\n    (recur b (mod a b))))", "problem": 66, "user": "4dd61f98535d2dad7130b5c6"}, {"code": "(fn gcd [a b]\r\n  (let [m (if (>= a b) a b)\r\n  n (if (< a b) a b)\r\n\t]\r\n    (if (= n 0)\r\n      m\r\n      (if (= (mod m n) 0)\r\n\tn\r\n\t(gcd n (mod m n))))))", "problem": 66, "user": "4ddc620d535d02782fcbea06"}, {"code": "(fn[x y]\r\n (letfn[(common-divisor[cou x y]\r\n          (if(= 0 (mod x cou))\r\n           (if(= 0 (mod y cou))\r\n             true\r\n             false)\r\n            false))]\r\n (loop[res 1 cou 1 lx x ly y]\r\n  (if(> cou (min lx ly))\r\n    res\r\n    (if(= true (common-divisor cou lx ly))\r\n    (recur cou (inc cou) lx ly)  \r\n\t  (recur res (inc cou) lx ly)\r\n   ))\r\n)))", "problem": 66, "user": "4dc7f472535d8a4b2fd74293"}, {"code": "(fn gcd [x y]\r\n  (loop [a (min x y), b (max x y)]\r\n\t\t(if (zero? a) \r\n\t\t\tb\r\n\t\t\t(recur (min a (- b a)) (max a (- b a)))\r\n\t\t)))", "problem": 66, "user": "4dadca03c9a9d6ed4199dc57"}, {"code": "(fn [a b]\r\n     (cond (= a b) a\r\n           (> a b) (recur (- a b) b)\r\n           true (recur (- b a) a)))", "problem": 66, "user": "4dbb1126535d1e037afb21b3"}, {"code": "(fn [a b]\r\n  (if (zero? b)\r\n\t\ta\r\n\t\t(recur b (mod a b))))", "problem": 66, "user": "4dd6d6a0535d2dad7130b5ca"}, {"code": "(fn [a b] (first (filter #(and (zero? (mod a %)) (zero? (mod b %))) (range a 0 -1))))", "problem": 66, "user": "4db5082e535d87e67b28fe03"}, {"code": "(fn pgcd [a b]\r\n  (let [common-div (fn [a b n]\r\n                     (= (mod a n) (mod b n) 0))]\r\n    (loop [n (quot (max a b) 2)]\r\n      (if (common-div a b n)\r\n        n\r\n        (recur (dec n))))))", "problem": 66, "user": "4dd023dd535d5973398f92ad"}, {"code": "(fn [a b]\n    (if (zero? b)\n        a\n        (recur b (mod a b))))", "problem": 66, "user": "4dd579b5535dae65d5c462ea"}, {"code": "(fn[a b] (if (< b a) (recur b a)\n  (apply max (filter #(and (= 0 (rem a %) (rem b %))) (range 1 (inc a))))))", "problem": 66, "user": "4ddbd934535d02782fcbe9fc"}, {"code": "(fn gcd [x y]\r\n  (cond (= x y) x\r\n        (> x y) (gcd (- x y) y)\r\n        true (gcd x (- y x))))", "problem": 66, "user": "4ddc1c89535d02782fcbea01"}, {"code": "(fn [& num-list]\r\n    ((fn gcd\r\n        ([numbers] (gcd numbers (apply min numbers)))\r\n        ([numbers result]\r\n            (let [n (count numbers)]\r\n                (if (or (= 1 result) (= n (count (filter #(zero? %) (map rem numbers (repeat n result))))))\r\n                    result\r\n                    (gcd numbers (dec result))))))\r\n    num-list))", "problem": 66, "user": "4dddf817535d08e6dec9fdd3"}, {"code": "(fn [m n]\r\n  (loop [mm (if (> m n) m n)\r\n         nn (if (> m n) n m)]\r\n    (cond (= nn 0)\r\n          mm\r\n          (= (mod mm nn) 0)\r\n          nn\r\n          :else\r\n          (recur nn (mod mm nn)))))", "problem": 66, "user": "4de2f44f535d08e6dec9fdec"}, {"code": "#(let [num1 (max % %2)\r\n       num2 (min % %2)]\r\n  ((fn [n1 n2] \r\n      (if (= 0 n2) \r\n          n1\r\n          (recur n2 (mod n1 n2)))) num1 num2))", "problem": 66, "user": "4dd6d7ee535d2dad7130b5cb"}, {"code": "(fn gcd [a b]\r\n  (if (zero? b)\r\n    a\r\n    (recur b (mod a b))))", "problem": 66, "user": "4ddbfb8a535d02782fcbea00"}, {"code": "(fn gcd [a b]\r\n  (loop [x (max a b), y (min a b), c y]\r\n    (println \"x=\" x \", y=\" y \", c=\" c)\r\n    (if (and (zero? (mod x c))\r\n       (zero? (mod y c)))\r\n      c\r\n      (if (> c 1)\r\n\t(recur x y (dec c))\r\n\tnil))))", "problem": 66, "user": "4ddbdc1b535d02782fcbe9fd"}, {"code": "(fn [x y]\r\n  (loop [col (-> (max x y) range reverse)\r\n         ret 1]\r\n      (if (> (first col) ret)\r\n        (if (and (->> (first col) (mod x) (= 0))\r\n                 (->> (first col) (mod y) (= 0)))\r\n          (recur (rest col) (first col))\r\n          (recur (rest col) ret))\r\n        ret)))", "problem": 66, "user": "4ddee37c535d08e6dec9fddc"}, {"code": "(fn [x y]\r\n  (letfn [(fac [a b]\r\n    (if (= b 0)\r\n      a\r\n      (fac b, (rem a b))))]\r\n    (if (>= x y)\r\n      (fac x y)\r\n      (fac y x))))", "problem": 66, "user": "4dd52e29535dae65d5c462e5"}, {"code": "#(loop [a %1 b %2] \r\n  (if (zero? b) a\r\n    (recur b (mod a b))))", "problem": 66, "user": "4db1fe241254ad5b4805fa77"}, {"code": "(fn[a b]\r\n  (letfn [(gcd [a b] (if (zero? b) a (gcd b (rem a b))))]\r\n  (gcd a b)))", "problem": 66, "user": "4deff9f9535d08e6dec9fe15"}, {"code": "(fn [x y]\n  (loop [a (max x y) b (min x y)]\n    (let [r (mod a b)]\n      (if (= r 0)\n        b\n        (recur b r)))))", "problem": 66, "user": "4db53810535d87e67b28fe07"}, {"code": "#(if (= 0 %2)\n   %\n   (recur %2 (mod % %2)))", "problem": 66, "user": "4de77a0a535d08e6dec9fdfa"}, {"code": "(fn gcd [a b]\r\n  (if (= b 0)\r\n      a\r\n      (gcd b (mod a b))))", "problem": 66, "user": "4df1ce44535d08e6dec9fe1f"}, {"code": "(fn [x y]\r\n  (if (or (= x y) (= y 1)) y\r\n    (if (> x y)\r\n      (recur (- x y) y)\r\n      (recur y x))))", "problem": 66, "user": "4dee4a9c535d08e6dec9fe11"}, {"code": "(fn g [a b]\n  (if (= b 0)\n    a\n    (g b (mod a b))))", "problem": 66, "user": "4df1e213535d08e6dec9fe20"}, {"code": "(fn gcd [x y]\r\n       (if (= y 0)\r\n         x\r\n         (gcd y (rem x y))))", "problem": 66, "user": "4deb529a535d08e6dec9fe04"}, {"code": "(letfn [(gcd [x y]\r\n      (cond (<= x 0) y\r\n          (<= x y) (recur x (mod y x))\r\n          :else (recur y x)))]\r\n  gcd)", "problem": 66, "user": "4df3d4f4535d08e6dec9fe2c"}, {"code": "(fn [n1 n2]\r\n   (let [min (min n1 n2), max (max n1 n2), diff (- max min)]\r\n     (if (= diff min)\r\n       min\r\n       (recur diff min))))", "problem": 66, "user": "4de623ef535d08e6dec9fdf4"}, {"code": "(fn gcd [n1 n2]\r\n  (let [div1 (set (filter #(zero? (mod n1 %)) (range 1 (inc n1))))\r\n        div2 (set (filter #(zero? (mod n2 %)) (range 1 (inc n2))))]\r\n\r\n    (apply max (clojure.set/intersection div1 div2))))", "problem": 66, "user": "4df407c3535d08e6dec9fe2e"}, {"code": "(fn [x y]\r\n  (quot (* x y)\r\n        ((fn [a b]\r\n          (loop [n (if (> a b) a b)]\r\n            (if (zero? (+ (mod n a) (mod n b))) n (recur (inc n))))) x y) ))", "problem": 66, "user": "4df3df8a535d08e6dec9fe2d"}, {"code": "(fn gcd [x y]\r\n  (if (zero? y) x (gcd y (mod x y))))", "problem": 66, "user": "4dfd4ba8535d04ed9115e781"}, {"code": "(fn [v1 v2]\r\n  (let [m (min v1 v2)\r\n        div? (fn [p1 p2] (= (rem p1 p2) 0))]\r\n               (first (filter identity (map #(if (and (div? v1 %) (div? v2 %)) %) \r\n                    (range m 0 -1))))))", "problem": 66, "user": "4def301c535d08e6dec9fe12"}, {"code": "(fn [a b]\r\n  (loop [c (if (> a b) b a)]\r\n    (if (= (mod a c) (mod b c) 0) c\r\n      (recur (dec c)))))", "problem": 66, "user": "4e02bee8535d04ed9115e791"}, {"code": "(fn gcd [a b]\r\n  (if (= b 0)\r\n      a\r\n      (gcd b (mod a b))))", "problem": 66, "user": "4e03b010535d04ed9115e794"}, {"code": "(fn g [x y]\r\n  (cond \r\n    (= 0 x) y\r\n    (= 0 y) x\r\n    (> x y) (g (- x y) y)\r\n    true (g (- y x) x)))", "problem": 66, "user": "4e03c616535d04ed9115e796"}, {"code": "(fn gys\r\n        ([num1 num2] (gys (min num1 num2) num1 num2))\r\n        ([curr num1 num2]\r\n          (if (and (= 0 (rem num1 curr)) (= 0 (rem num2 curr)))\r\n            curr\r\n            (recur (dec curr) num1 num2))))", "problem": 66, "user": "4dddff47535d08e6dec9fdd4"}, {"code": "#(.gcd(bigint%)(bigint%2))", "problem": 66, "user": "4dd66da7535d2dad7130b5c8"}, {"code": "(fn gcd [a b]\r\n  (loop [a a\r\n         b b]\r\n    (cond\r\n      (= a 0) b\r\n      (= b 0) a\r\n      :else (recur\r\n              (if (> a b) (rem a b) (rem b a))\r\n              (if (> a b) b a)))))", "problem": 66, "user": "4df669d4535d08e6dec9fe35"}, {"code": "(fn [a b] (some #(when (and (= (rem b %) 0) (= (rem a %) 0)) %) \r\n (iterate dec (max a b))))", "problem": 66, "user": "4e0e0529535d04ed9115e7b9"}, {"code": "(fn gcd\r\n   ([one two]\r\n      (if (= two 0)\r\n        one\r\n        (gcd two (mod one two)))))", "problem": 66, "user": "4e0d8c27535d04ed9115e7b7"}, {"code": "(fn lo [x y]\r\n  (apply max\r\n    (filter \r\n      #(= 0 (mod x %) (mod y %))\r\n      (range 1 (inc (min x y))))))", "problem": 66, "user": "4de18de7535d08e6dec9fde8"}, {"code": "#(if (= 0 %2)\n      %\n      (recur %2 (mod % %2)))", "problem": 66, "user": "4daa374930acd6ed13482a68"}, {"code": "(fn gcd [a b]\r\n  (if (> a b)\r\n    (recur b (- a b))\r\n    (if (> b a)\r\n      (recur b a)\r\n      a)))", "problem": 66, "user": "4e123905535d04ed9115e7ce"}, {"code": "(fn [a b] (first (filter #(and (zero? (mod a %)) (zero? (mod b %))) (range a 0 -1))))", "problem": 66, "user": "4e1158aa535d04ed9115e7c6"}, {"code": "(fn f [a b]\r\n   (if (= a b)\r\n     a\r\n     (f (min a b) (- (max a b) (min a b)))))", "problem": 66, "user": "4e059278535d04ed9115e7a5"}, {"code": "(fn mygcd [a b]\r\n    (letfn [(rec [s b acc]\r\n  \t (if (= 1 acc)\r\n\t\t   1\r\n\t\t   (if (and (= 0 (mod s acc)) (= 0 (mod b acc)))\r\n\t\t     acc\r\n\t\t     (rec s b (dec acc)))))]\r\n\t   (let [s (min a b) b (max a b)]\r\n\t     (rec s b s))))", "problem": 66, "user": "4e1b2cd9535d04ed9115e7fd"}, {"code": "(fn common-divisor\r\n  ([x y]\r\n    (common-divisor x y (min x y)))\r\n  ([x y z]\r\n  (if (= z 1)\r\n    1\r\n    (if (every? #(= 0 (rem % z)) (list x y))\r\n      z\r\n      (recur x y (dec z))))))", "problem": 66, "user": "4e16bdef535d04ed9115e7e9"}, {"code": "#(.gcd(%%2)(%%3))bigint", "problem": 66, "user": "4e14b925535d04ed9115e7df"}, {"code": "(fn gcd [x y]\r\n  (cond\r\n    (> y x) (recur y x)\r\n    (= y 0) x\r\n    true (recur y (mod x y))))", "problem": 66, "user": "4e14108c535d04ed9115e7dd"}, {"code": "(fn gcd [a b]\r\n  (if (= b 0) a\r\n      (recur b (rem a b))))", "problem": 66, "user": "4ddb339c535d02782fcbe9f9"}, {"code": "(fn gcd [x y] (if (= y 0) x (gcd y (mod x y))))", "problem": 66, "user": "4e1e7f88535d04ed9115e808"}, {"code": "(fn [a b]\n  (if (= 0 a)\n    b\n    (recur (mod b a) a)))", "problem": 66, "user": "4de165f3535d08e6dec9fde6"}, {"code": "(fn gcd [x y]\n  (if (= 0 y)\n    x\n    (recur y (rem x y))))", "problem": 66, "user": "4e28120f535deb9a81d77efa"}, {"code": "#(first (for [x (iterate dec (min %1 %2)) :while (> x 0) :when (and (zero? (mod %1 x)) (zero? (mod %2 x)))] x))", "problem": 66, "user": "4e232f34535d04ed9115e81f"}, {"code": ";#(rand-nth [% %2 1 33])\n(fn f [a b]\n  (if (= 0 a)\n    b\n    (f (rem b a) a)\n  )\n)", "problem": 66, "user": "4e307313535deb9a81d77f14"}, {"code": "(fn g [a b] (if (< a b) (g b a) (if (zero? b) a (g b (mod a b)))))", "problem": 66, "user": "4e31a15c535deb9a81d77f1e"}, {"code": "(fn gcd [a b]\n  (if (zero? b) a (gcd b (mod a b))))", "problem": 66, "user": "4e2f9e71535deb9a81d77f11"}, {"code": "(fn [a b] (cond (= b 0) a (= 0 (rem a b)) b :else (recur b (rem a b))))", "problem": 66, "user": "4e3000c8535deb9a81d77f13"}, {"code": "(fn gcd[a b]\n  (if (= b 0)\n      a\n      (gcd b (mod a b))\n  )\n)", "problem": 66, "user": "4e333091535deb9a81d77f25"}, {"code": "(fn gcd [a b]\n  (loop [x (min a b)]\n    (if (= 0 (mod a x) (mod b x))\n      x\n      (recur (dec x)))))", "problem": 66, "user": "4daef21cedd6309eace4d169"}, {"code": "(fn gcd [a b] (if (zero? (mod b a)) a (recur (mod b a) a)))", "problem": 66, "user": "4e3ac1b2535deb9a81d77f4c"}, {"code": "(fn gcd [a b]\n  (let [n (max a b)\n        m (min a b)]\n    (if (zero? m)\n      n\n      (recur (- n m) m))))", "problem": 66, "user": "4e22b78b535d04ed9115e81e"}, {"code": "(fn gcd [a b] (if (= b 0) a (gcd b (mod a b))))", "problem": 66, "user": "4e39fb68535deb9a81d77f47"}, {"code": "(fn [a b] \n  (cond \n    (> a b) (recur (- a b) b)\n    (< a b) (recur a (- b a))\n    (= a b) a))", "problem": 66, "user": "4e3f480c535dc968683fc497"}, {"code": "(fn gcd [a b]\n  (cond\n    (> b a) (recur b a)\n    (zero? b) a\n    :else (recur b (mod a b))))", "problem": 66, "user": "4e356d2b535deb9a81d77f2d"}, {"code": "(fn gcd [a b] (if (< b a) (gcd b a) \n(if (zero? a) b (gcd a (- b a)) ) \n))", "problem": 66, "user": "4e3a9dae535deb9a81d77f4a"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "4e42f930535dc968683fc49f"}, {"code": "#(if (= 0 %2) % (recur %2 (mod % %2)))", "problem": 66, "user": "4e49badd535dc968683fc4c9"}, {"code": "#(loop [a % b %2]\n   (cond\n     (< a b) (recur b a)\n     (= b 0) a\n     :else (recur b (mod a b))))", "problem": 66, "user": "4e4ae5aa535dc968683fc4d2"}, {"code": "(fn [a b]\n  (loop [gcd 1\n         n 1]\n    (if (or (> n a)\n            (> n b)) gcd\n    (if (and (zero? (mod a n))\n             (zero? (mod b n)))\n      (recur n (inc n))\n        (recur gcd (inc n))))))", "problem": 66, "user": "4e4bf20e535dc968683fc4d9"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "4e4c238f535dc968683fc4dc"}, {"code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "problem": 66, "user": "4e3456f9535deb9a81d77f2a"}, {"code": "(fn gcd [a b]\n  (ffirst (drop-while \n    (fn [[a b]] (not= 0 b)) \n      (iterate (fn [[a b]] [b (mod a b)]) [a b]))))", "problem": 66, "user": "4e513ecf535dc968683fc4f6"}, {"code": "(fn my-gcd [x y]\n  (let [r (rem x y)]\n    (if (zero? r) y (recur y r))))", "problem": 66, "user": "4e50b67b535dc968683fc4ed"}, {"code": "(fn [a b]\n  (if-not (zero? b)\n    (recur b (mod a b))\n    a))", "problem": 66, "user": "4e4ad154535dc968683fc4d1"}, {"code": "#(if (= %2 0)\n   %\n   (recur %2 (rem % %2)))", "problem": 66, "user": "4e12cc9d535d04ed9115e7d2"}, {"code": "(fn g [x y]     \n    (if (= 0 y)\n      x\n      (g y (mod x y))))", "problem": 66, "user": "4e52d815535d302ef430da77"}, {"code": "#(if\r\n    (= 0 %2) \r\n     %1\r\n    (recur %2 (mod %1 %2)))", "problem": 66, "user": "4e513758535dc968683fc4f3"}, {"code": "#(loop[i %]\n(if (= 0 (+ (rem % i) (rem %2 i))) i\n(recur (- i 1))\n))", "problem": 66, "user": "4e43b0d9535dc968683fc4a3"}, {"code": "#(if (= %1 0) %2 (recur (mod %2 %1) %1))", "problem": 66, "user": "4e5411e8535d8a8b8723a279"}, {"code": "(fn [a b]\n  (let [c (- b a)]\n    (if (zero? c)\n      a\n      (let [c (if (pos? c) c (- c))]\n        (recur (min c a) (max c a))))))", "problem": 66, "user": "4e521cef535d302ef430da6d"}, {"code": "(fn[n m]\n  (loop [m+ (min m n)\n         n+ (max m n)]\n    (if (= m+ n+)\n      m+\n      (recur (min (- n+ m+) m+) (max (- n+ m+) m+)))))", "problem": 66, "user": "4e58bcd4535d8a8b8723a296"}, {"code": "(fn [x y]\n  (let [z (min x y)]\n    (some #(when\n            (== 0\n                (mod x %)\n                (mod y %)) %)\n      (range (inc z) 0 -1))))", "problem": 66, "user": "4e593dac535d8a8b8723a29c"}, {"code": "(fn greatest-common-divisor [x y]\n  (first (for [num (range (min x y) 0 -1)\n                :when (and (= 0 (rem x num))\n                           (= 0 (rem y num)))]\n            num)))", "problem": 66, "user": "4e4bd94b535dc968683fc4d7"}, {"code": "(fn f [a b]\n  (if (= b 0) a (f b (rem a b))))", "problem": 66, "user": "4e5c801e535d8a8b8723a2c1"}, {"code": "(fn f [a b] (if (= 0 b) a  (recur b (mod a b))))", "problem": 66, "user": "4e597b2c535d8a8b8723a29d"}, {"code": "(fn [a b] (first (filter #(= (mod a %) (mod b %) 0) (reverse (range 1 (second (sort [a b])))))))", "problem": 66, "user": "4e589bdc535d8a8b8723a295"}, {"code": "(fn [x y]\n    (cond\n     (= x y)\n     x\n\n     (< x y)\n     (recur x (- y x))\n\n     :else\n     (recur (- x y) y)))", "problem": 66, "user": "4dad938fc9a9d6ed1b99dc57"}, {"code": "(fn [x y] \n  (if (> x y) (recur y x) \n  (let [z (mod y x)]\n   (if (= 0 z) x (recur z x)))))", "problem": 66, "user": "4e4b911f535dc968683fc4d6"}, {"code": "(fn gcd [a b]\n  (let [x (min a b)\n        y (max a b)]\n    (loop [x x\n           y y]\n      (println a \" \" b)\n      (if (= (mod x y) 0)\n        y\n        (recur y (mod x y))))))", "problem": 66, "user": "4db58ccb535d87e67b28fe10"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "4dad7adac9a9d6ed0599dc57"}, {"code": "(fn gcd [& nums]\n  (let [[small big] (sort nums)\n        m (mod big small)]\n    (if (= 0 m)\n      small\n      (gcd small m))))", "problem": 66, "user": "4e3bccb1535deb9a81d77f55"}, {"code": "(fn gcd                                                                                                                                    \n [m n]                                                                                                                                       \n  (condp = m                                                                                                                                 \n    0 n                                                                                                                                      \n    1 1                                                                                                                                      \n    (recur (mod n m) m)))", "problem": 66, "user": "4e3bcccd535deb9a81d77f56"}, {"code": "(fn mygcd [a b]\r\n  (cond\r\n   (= a b) a\r\n   (> a b) (mygcd (- a b) b)\r\n   :else   (mygcd  a (- b a))))", "problem": 66, "user": "4e50c894535dc968683fc4ee"}, {"code": "(fn [x y]\n  (first (last (take-while seq\n            (iterate\n                  #(when (not (zero? (second %))) \n                     (vector (second %) (mod (first %) (second %)))) [x y])))))", "problem": 66, "user": "4e5914e0535d8a8b8723a29b"}, {"code": "(fn [a b] (if (= 0 b) a (recur b (mod a b))))", "problem": 66, "user": "4e5ecd65535d8a8b8723a2d6"}, {"code": "#(if (= %2 0) %1 (recur %2 (mod %1 %2)))", "problem": 66, "user": "4e44358f535dc968683fc4a8"}, {"code": "(fn [a b]\n  (loop [[max min] (if (> a b) [a b] [b a])]\n    (let [remainder (rem max min)]\n      (cond\n        (= remainder 0) min\n        :else (recur [min remainder])))))", "problem": 66, "user": "4e4b4564535dc968683fc4d3"}, {"code": "(fn [& candidates]\n           (reduce max\n                   (reduce (fn [x y]\n                             (filter x y))\n                           (map (fn [x]\n                                  (loop [potentials (range 1 (+ (Math/sqrt x) 0.00001))\n                                         divisors #{}]\n                                    (if (seq potentials)\n                                      (if (= 0 (mod x (first potentials)))\n                                        (recur (rest potentials) (conj divisors (first potentials) (/ x (first potentials))))\n                                        (recur (rest potentials) divisors))\n                                      divisors))) candidates))))", "problem": 66, "user": "4e08fb7a535d04ed9115e7ac"}, {"code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "4e615cd2535d8ccf87e9fe58"}, {"code": "(fn [a b] (let [N (max a b) \n                 n (min a b)\n                 d (- N n)]\n             (if (<= n 0) \n               N\n               (recur n d))))", "problem": 66, "user": "4e5f08c7535d8a8b8723a2da"}, {"code": "(fn greatest-common-divisor\n  [a b]\n  (let [divisor? (fn [a b] (zero? (mod a b)))]\n    (apply max\n      (filter\n       #(and (divisor? a %)\n             (divisor? b %))\n       (range 1 (inc (min a b)))))))", "problem": 66, "user": "4e68c434535d8ccf87e9fe89"}, {"code": "(fn gcd [a b]\r\n  (if (= b 0)\r\n    a\r\n    (gcd b (mod a b))))", "problem": 66, "user": "4e5a3891535d8a8b8723a2aa"}, {"code": "(fn gcd- [a b]\n  \"66. Given two integers, write a function which returns the greatest                                                                                                  \n  common divisor.\"\n  (if (= 0 b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "4e5eb843535d8a8b8723a2d4"}, {"code": "(fn [a b] (if (= 0 (mod a b)) b (recur b (mod a b))))", "problem": 66, "user": "4e588e84535d8a8b8723a294"}, {"code": "(fn grcd [x y]\n  (let [diff (- x y)]\n   (cond (= x 0) y\n  \t\t\t (= y 0) x\n\t\t\t\t :else (recur (min x y) (if (> diff 0) diff\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t           (- diff))))))", "problem": 66, "user": "4db045b5838c48654951d9be"}, {"code": "(fn gcd [a b]\r\n  (if (= b 0)\r\n    a\r\n    (recur b (mod a b))))", "problem": 66, "user": "4e6a48d5535d8ccf87e9febd"}, {"code": "(fn gcd\n  [n m]\n  (if (= n m)\n    n\n    (let [[nn nm] (if (> n m)\n                    [(- n m) m]\n                    [(- m n) n])]\n      (recur nn nm))))", "problem": 66, "user": "4e5bff2b535d8a8b8723a2bd"}, {"code": "(fn [a b]\n  (loop [g (max a b)\n         s (min a b)\n         ac s]\n   (if (and (zero? (mod g ac))\n            (zero? (mod s ac)))\n      ac\n      (recur g s (dec ac)))))", "problem": 66, "user": "4e68b46c535d8ccf87e9fe87"}, {"code": "(fn [x y] (some #(when (and (= 0 (mod x %)) (= 0 (mod y %))) %) (range (min x y) 0 -1)))", "problem": 66, "user": "4e6a97a9535d8ccf87e9fef8"}, {"code": "#(cond (> %1 %2) (recur %2 %1)\n              (= %1 0) %2\n              0 (recur (mod %2 %1) %1))", "problem": 66, "user": "4e5fe31a535d8ccf87e9fe50"}, {"code": "#(if (= %2 0) % (recur %2 (mod % %2)))", "problem": 66, "user": "4e6b3fc8535d8ccf87e9ff0f"}, {"code": "(fn [a b]\n  (loop [gcd (min a b)]\n    (if (every? integer? (map #(/ % gcd) [a b]))\n      gcd\n      (recur (dec gcd)))))", "problem": 66, "user": "4e6dd51b535d5021c1a895f6"}, {"code": "(fn gcd [a b] (cond (= b 0) a :else (gcd b (mod a b))))", "problem": 66, "user": "4e6e6630535d5021c1a89609"}, {"code": "#(if (= 0 %2) % (recur %2 (mod % %2)))", "problem": 66, "user": "4e6a412e535d8ccf87e9feb6"}, {"code": "(fn gcd ([x y] (gcd x x y))\n        ([i p q ] \n          (if (every? #(= 0 (mod % i)) [p q]) \n          i\n          (gcd (dec i) p q))))", "problem": 66, "user": "4e6def42535d5021c1a895f7"}, {"code": "(fn [x y]\n  (let [divisor? #(and (zero? (mod x %)) (zero? (mod y %)))]\n    (first (filter divisor? (reverse (range (max x y)))))))", "problem": 66, "user": "4e6a60cd535d8ccf87e9fed7"}, {"code": "(fn [a b]\n  (cond\n    (= a 0) b\n    (= b 0) a\n    (> a b) (recur (- a b) b)\n    :else (recur a (- b a))\n  )\n)", "problem": 66, "user": "4e6e10d8535d5021c1a895fd"}, {"code": "(fn [a b]\r\n  (if (= b 0)\r\n    a\r\n    (recur b, (rem a b))))", "problem": 66, "user": "4e5bdc2b535d8a8b8723a2bb"}, {"code": "(fn [a b] \n  (let [ minor (min a b)\n         divs-a (filter #(= 0 (mod a %)) (range 1 (inc minor)))\n         divs-b (filter #(= 0 (mod b %)) (range 1 (inc minor)))]\n    (last (filter #(contains? (set divs-a) %) divs-b))))", "problem": 66, "user": "4e6dc95a535d5021c1a895f1"}, {"code": "(fn gcd [a b] (if (zero? b) \n                 a \n                 (gcd b (mod a b))))", "problem": 66, "user": "4e6e3a1e535d5021c1a89602"}, {"code": "(fn gcd [a b]\n  (loop [candidate (min a b)]\n    (if (= 1 candidate) \n        candidate\n        (if (and (= 0 (mod a candidate))\n                 (= 0 (mod b candidate)))\n            candidate\n            (recur (dec candidate))))))", "problem": 66, "user": "4e6defcc535d5021c1a895f8"}, {"code": "(fn [a b]\n  (->>\n    (range 1 (max a b))\n    (filter #(and (= 0 (mod a %))\n             (= 0 (mod b %))))\n    (apply max-key identity)))", "problem": 66, "user": "4e6a2f93535d8ccf87e9feaa"}, {"code": "(fn gcd [a b]\n  (cond\n   (< a b)   (gcd b a)\n   (zero? b) a\n   :else     (gcd b (mod a b))))", "problem": 66, "user": "4e71705e535d5021c1a89649"}, {"code": "#(loop [a %1 b %2]\n      (if (zero? b) a,\n    (recur b (mod a b))))", "problem": 66, "user": "4e68be01535d8ccf87e9fe88"}, {"code": "(fn[a,b](loop [d (max a b)] \n  (if (and (= (rem a d) 0) (= (rem b d) 0)) \n    d \n    (recur (dec d))\n  ))\n)", "problem": 66, "user": "4e6df3c9535d5021c1a895fa"}, {"code": "(fn gcd [f s]\n  (if (= f s)\n    f\n    (if (> f s) \n      (recur (- f s) s)\n      (recur (- s f) f)\n    ) \n  )\n  )", "problem": 66, "user": "4e6dd0f5535d5021c1a895f3"}, {"code": "(fn [& n] (apply max (apply clojure.set/intersection (map (fn [i] (set (filter #(= 0 (rem i %)) (range 1 (inc i))))) n))))", "problem": 66, "user": "4e6fa38b535d5021c1a89622"}, {"code": "(fn [a b] (if (= b 0) a (recur b (rem  a b))))", "problem": 66, "user": "4e50e2a0535dc968683fc4ef"}, {"code": "(fn gcd [v1 v2](if (= 0 v2) v1 (gcd v2 (mod v1 v2))) )", "problem": 66, "user": "4db7da66535d1e037afb2187"}, {"code": "(fn [a b]\n  (loop [x a y b]\n    (if (< x y)\n      (recur y x)\n      (if (zero? y)\n        x\n        (recur y (rem x y))))))", "problem": 66, "user": "4e6a2f51535d8ccf87e9fea9"}, {"code": "(fn gcd [a b]\n  (let [divides? #(= 0 (mod %2 %1))]\n  (if (< b a)\n    (recur b a)\n    (if (divides? a b)\n      a\n      (recur (mod b a) a)))))", "problem": 66, "user": "4e691c79535d8ccf87e9fe97"}, {"code": "(fn gcd [x y]\n    (let [lesser (if (> x y) y x) \n          divisor-of-both (fn [div x y] (and (zero? (mod x div)) (zero? (mod y div))))]\n      (loop [cd 1 i 1]\n      (if (> i lesser) cd\n\t      (if (divisor-of-both i x y)\n\t        (recur i (inc i))\n\t        (recur cd (inc i)))))))", "problem": 66, "user": "4e6a4edd535d8ccf87e9fec4"}, {"code": "(fn [& numbers]\n  (let [min-number (apply min numbers)]\n    (loop [gcd 1 current 2]\n      (if (> current min-number)\n          gcd\n          (recur (if (every? #(= 0 (rem % current)) numbers)\n                     current\n                     gcd)\n                 (inc current))))))", "problem": 66, "user": "4e7c8fd1535db169f9c796be"}, {"code": "(fn [& x] (let [[x y] (sort x) v (- y x)] \n             (cond (neg? v) 1\n                   (= 0 v) x\n                   :else (recur [x v])\n                   )))", "problem": 66, "user": "4e71da4d535d5021c1a89653"}, {"code": "(fn gcd [x y]\n  (if (= 0 y)\n    x\n    (gcd y (mod x y))))", "problem": 66, "user": "4e77c1db535d324fb2983d72"}, {"code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "problem": 66, "user": "4e720985535d5021c1a89655"}, {"code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "4e7db3b4535db169f9c796e1"}, {"code": "(fn g [a b] (if (= b 0) a (g b (mod a b))))", "problem": 66, "user": "4e7dd982535db169f9c796ee"}, {"code": "#(loop [gcd (min %1 %2)]\n       (if (= 0 (mod %1 gcd) (mod %2 gcd))\n         gcd\n         (recur (dec gcd))))", "problem": 66, "user": "4e6a5f5c535d8ccf87e9fed6"}, {"code": "#(let [[a b] (sort [%1 %2])\n       n (/ b a)]\n    (if (ratio? n)\n        (/ b (numerator n))\n        (/ b n)))", "problem": 66, "user": "4e7dfab0535db169f9c796f9"}, {"code": "(fn [a b] (let [g (fn [a b] \n   (if (= b 0) a (recur b (mod a b))))]\n (if (< a b) (g b a) (g a b))))", "problem": 66, "user": "4e7e55ab535db169f9c79711"}, {"code": "(fn[a b] \n    (let [min (min a b)]\n\t\t (loop [cur min decs (range min 1 -1)]\n\t\t    (cond (nil? cur) 1\n\t\t\t  (and (= 0 (mod a cur)) (= 0 (mod b cur))) cur\n\t\t\t  :else (recur (second decs) (next decs))))))", "problem": 66, "user": "4e739e13535dff18050a9c76"}, {"code": "(fn [a b]\n  (let [f #(= 0 (mod % %2))\n        s (min a b)\n        p (conj (range 1 (inc (quot s 2))) s)]\n    (apply max (filter #(and (f a %) (f b %)) p))))", "problem": 66, "user": "4daf907aedd6309eace4d17b"}, {"code": "#(let[[a b](sort[%1%2])](/ a(.numerator (/ a b))))", "problem": 66, "user": "4e7eff9e535db966e863cc38"}, {"code": "(fn gcd [a b]\n\n (apply max (filter #(and (zero? (rem a %)) (zero? (rem b %) ))  (range 1 (inc(min a b))) ))\n\n  )", "problem": 66, "user": "4e78c208535db95036265722"}, {"code": "(fn gcd [a b]\n    (loop [a a b b]\n      (if (zero? b) a,\n    (recur b (mod a b)))))", "problem": 66, "user": "4e7f4147535db966e863cc3d"}, {"code": "#(loop [x (min %1 %2)] (if (and (integer? (/ %1 x)) (integer? (/ %2 x))) x (recur (dec x))))", "problem": 66, "user": "4e79a143535db169f9c796a2"}, {"code": "(fn e [a b]\r\n  (if (zero? b) a (e b (mod a b))))", "problem": 66, "user": "4e5229dc535d302ef430da6f"}, {"code": "#(if (ratio? (/ % %2)) (/ % (numerator (/ % %2))) (min % %2))", "problem": 66, "user": "4db858d1535d1e037afb218c"}, {"code": "(fn [a b] \n   (let [div-fn (fn [n]\n                  (set\n                   (filter #(= 0 (mod n %1))\n                    (range 1  (inc n)))))\n         a-divs (div-fn a)\n         b-divs (div-fn b)]               \n  (apply max (filter #(contains? a-divs %1) b-divs))))", "problem": 66, "user": "4dcc5aff535d5973398f9293"}, {"code": "#(if (zero? %2) % (recur %2 (mod % %2)))", "problem": 66, "user": "4e794004535db169f9c796a1"}, {"code": "(fn s66 [a b]\n  (loop [a a b b]\n    (if (= b 0)\n      a\n      (recur b (mod a b)))))", "problem": 66, "user": "4e7e05a6535db169f9c796fe"}, {"code": "(fn gcd [a b]\n  (cond (= b 0) a\n        :else (recur b (mod a b))))", "problem": 66, "user": "4e7f51eb535db966e863cc3f"}, {"code": ";; euclid\n(fn gcd\n  [x y]\n  (if (> y x)\n    (recur y x)\n    (if (zero? y)\n      x\n      (recur y (rem x y)))))", "problem": 66, "user": "4e5a460f535d8a8b8723a2ab"}, {"code": "(fn [a b] (\n    last\n    (sort(clojure.set/intersection\n    ;list\n\n        (set (filter \n            (fn [x] \n                (if \n                    (= (mod a x) 0) true false)\n            )\n            (#(range 1 (inc %)) a)\n        ))\n        \n        (set (filter \n            (fn [x] \n                (if \n                    (= (mod b x) 0) true false)\n            )\n            (#(range 1 (inc %)) b)\n        ))\n    \n    )))\n)", "problem": 66, "user": "4e78dc98535db95036265724"}, {"code": "(fn [a b] (if (= 0 b) a (recur b (mod a b))))", "problem": 66, "user": "4e773be8535d324fb2983d6e"}, {"code": "(fn greatdiv [a b]\n  (loop [count (min a b)]\n    (if (= 0 (mod a count) (mod b count))\n          count\n      (recur (dec count)))))", "problem": 66, "user": "4e7ada51535db169f9c796ae"}, {"code": "(fn f [x y] (if (= 0 y) x (f y (mod x y))))", "problem": 66, "user": "4e823ed7535db62dc21a62c7"}, {"code": "(fn [nr1 nr2]\n  \n  (loop [divider (min nr1 nr2)]\n(let [rem1 (rem nr1 divider)\n      rem2 (rem nr2 divider)]\n    (if \n      (= 0 rem1 rem2)\n      divider\n      (recur (dec divider))))))", "problem": 66, "user": "4e70a7c1535d5021c1a8963c"}, {"code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "problem": 66, "user": "4e39d763535deb9a81d77f46"}, {"code": "(fn gcd [a b] (some #(when (and (= (mod a %) (mod b %) 0)) %)\n(reverse (range 1 (inc (min a b))))))", "problem": 66, "user": "4e8612f8535db62dc21a62f2"}, {"code": "(fn g[a b]\n    (if (= a b)\n      a\n      (if (> a b)\n        (g (- a b) b)\n        (g a (- b a)))))", "problem": 66, "user": "4e5d1912535d8a8b8723a2c9"}, {"code": "(fn [a b]\r\n      (loop [n (if (> a b) a b)]\r\n\t       (if (= n 1)\r\n\t\t   1\r\n\t\t   (if (= 0 (+ (rem a n) (rem b n)))\r\n\t\t       n\r\n\t\t       (recur (dec n))))))", "problem": 66, "user": "4e821ca5535db62dc21a62c2"}, {"code": "#(if (= %2 0) % (recur %2 (mod % %2)))\n;; swap order in recur", "problem": 66, "user": "4e8510e7535db62dc21a62e7"}, {"code": "(fn [x y] (some \n  #(if (= 0 (mod x %) (mod y %))\n    % \n    false) \n  (reverse (range (max x y)))\n))", "problem": 66, "user": "4e86a443535dc036d0eaab83"}, {"code": "(fn gcd [b a]\n  (if (= 0 b)\n    a\n    (gcd (rem a b) b)))", "problem": 66, "user": "4db8ec47535d1e037afb219d"}, {"code": "(fn gcd [a b]\r\n  (let [int? (fn [x] (= x (int x)))\r\n        [x y] (sort [a b])]\r\n     (if (int? (/ y x))\r\n       x\r\n       (if-not (pos? (- y x))\r\n          1\r\n          (recur x (- y x))))))", "problem": 66, "user": "4e8681b7535dae1a5effa438"}, {"code": "(fn gcd [x y]     \n    (if (= 0 y)\n      x\n      (gcd y (mod x y))))", "problem": 66, "user": "4e860e85535db62dc21a62f1"}, {"code": "(fn gcd[a b]\n       (cond (= a 0) b\n\t\t   (= b 0) a\n\t\t   (< a b) (recur a (- b a))\n\t\t   :else (recur b (- a b))))", "problem": 66, "user": "4e842ebb535db62dc21a62df"}, {"code": "(fn g [a b] \n  (cond \n    (= a 0) b\n    (> a b) (recur b a)\n    :else (recur a (mod b a))))", "problem": 66, "user": "4e707db6535d5021c1a8963a"}, {"code": "(fn [x y] (loop [n 1 a 1]\n  (if (or (<= n x) (<= n y))\n    (if (= 0 (mod x n) (mod y n))\n      (recur (inc n) n)\n      (recur (inc n) a))\n    a)))", "problem": 66, "user": "4df0524e535d08e6dec9fe17"}, {"code": "#(if (zero? %2) % (recur %2 (mod % %2)))", "problem": 66, "user": "4e80e0f2535db62dc21a62b8"}, {"code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "4e6ebd4a535d5021c1a89610"}, {"code": "(fn [a b]\n  (if (zero? b) a\n    (recur b (rem a b))))", "problem": 66, "user": "4e6a4950535d8ccf87e9febf"}, {"code": "(fn gcd [x y]\n   (if (= 0 (min x y))\n     (max x y)\n     (gcd (min x y) (- (max x y) (min x y)))))", "problem": 66, "user": "4e89f46c535d3e98b8023288"}, {"code": "(fn gcd [a b]\n  (if (= b 0)\n      a\n      (gcd b (rem a b))))", "problem": 66, "user": "4dfe65a1535d04ed9115e787"}, {"code": "(fn [x y]\n  (if (zero? y) x (recur y (mod x y))))", "problem": 66, "user": "4e7e93f5535db169f9c7971a"}, {"code": "(fn gcd\n  [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "4e8a0c82535d3e98b802328d"}, {"code": "(fn [a b] ((fn divs [n a b] (if (= 0 (+ (mod a n) (mod b n))) n (divs (dec n) a b))) (min a b) a b))", "problem": 66, "user": "4e89de60535d3e98b8023285"}, {"code": "(fn [num1 num2](\r\n                            if (= num1 num2) num1\r\n                            (let[hi (max num1 num2) lo (min num1 num2)]\r\n                              (recur (- hi lo) lo))\r\n                             ))", "problem": 66, "user": "4e8aef69535d65386fec2114"}, {"code": "(fn gcd [num1 num2] \n     (let [n (iterate inc 2)\n           bpgcd (min num1 num2)\n           divs (take bpgcd n)]\n       (reduce (fn [gcd [z1 z2 d]]\n                 (if (= 0 z1 z2) d gcd)) 1 \n               (map #(vector (mod num1 %) (mod num2 %) %) divs))))", "problem": 66, "user": "4e6a11ee535d8ccf87e9fe9f"}, {"code": "(fn [a b]\n  (loop [a a\n   b b\n\t r (mod a b)]\n    (if (= r 0)\n      b\n      (recur b r (mod b r)))))", "problem": 66, "user": "4e82c062535db62dc21a62cc"}, {"code": "(fn [& xs]\n  (let [limit       (apply min xs)\n        all-divide? (fn [n] (every? #(zero? (mod % n)) xs))]\n    (loop [result 1\n           trial  2]\n      (if (> trial limit)\n          result\n          (if (all-divide? trial)\n              (recur trial (inc trial))\n              (recur result (inc trial)))))))", "problem": 66, "user": "4daf36c2edd6309eace4d175"}, {"code": "(fn [a b]\n    (+ a b (- (* a b))\n      (* 2 (reduce + (map (fn [s] (quot (* s b) a)) (range 1 a))))))", "problem": 66, "user": "4e8e8c24535d65386fec2143"}, {"code": "(fn my-gcd [a b]\n  (let [[smaller bigger]   (sort [a b])\n  diff              (- bigger smaller)]\n    (if (zero? diff)\n      smaller\n      (my-gcd smaller diff))))", "problem": 66, "user": "4dc54eb2535d8a4b2fd74284"}, {"code": "(fn g [a b]\n  (if (= b 0) a (g b (mod a b))))", "problem": 66, "user": "4e5867d1535d8a8b8723a291"}, {"code": "(fn [a b]\n  (if (= 0 b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "4db016af838c48654951d9b9"}, {"code": "(fn [a b]\n(if (zero? a)\n      b\n      (loop [a a b b]\n        (if (not= 0 b)\n          (if (> a b)\n            (recur (- a b) b)\n            (recur a (- b a)))\n          a))))", "problem": 66, "user": "4e88feef535d8b9bb0147ca8"}, {"code": "(fn gcd[a b]\n  (cond\n    (zero? a) b\n    (zero? b) a\n    :else \n      (let [mn (min a b), mx (max a b)]\n        (gcd mn (mod mx mn)))))", "problem": 66, "user": "4e89f9e5535d3e98b8023289"}, {"code": "#(loop [a % b %2] (if (= b 0) a (recur b (mod a b))))", "problem": 66, "user": "4e79ff2a535db169f9c796a9"}, {"code": "(fn [x y]\n  (letfn [(smaller-bigger [a b]\n            (if (<= a b)\n              [a b]\n              [b a]))]\n    (loop [[x y] (smaller-bigger x y)\n           current x]\n      (if (or (= 1 current)\n              (and (zero? (mod y current))\n                   (zero? (mod x current))))\n        current\n        (recur [x y] (dec current))))))", "problem": 66, "user": "4dc0ff08535d020aff1edf84"}, {"code": "(fn [a b]\n  (cond\n    (> b a) (recur b a)\n    (= b 0) a\n    1       (recur (- a b) b)))", "problem": 66, "user": "4e8df08f535d65386fec213e"}, {"code": "(fn MaxMultCom [x y]\n  (apply max\n    (filter (complement nil?)\n      (map \n        #(when \n           (and \n             (zero? (mod x %)) \n             (zero? (mod y %))\n           )\n           %\n         )   \n         (take (min x y) (iterate #(+ 1 %) 1))\n      )\n    )\n  )\n)", "problem": 66, "user": "4e8b73e4535d65386fec2120"}, {"code": "#(if (= %2 0) % (recur %2 (mod % %2)))", "problem": 66, "user": "4e8f4f64535d65386fec2149"}, {"code": "(fn ggt [x y] (if (== y 0 ) x (recur y (mod x y)) ))", "problem": 66, "user": "4e8d5edd535d65386fec2134"}, {"code": "(fn gcd [a b] (if (= 0 b) a (gcd b (mod a b))))", "problem": 66, "user": "4db92654535d1e037afb21a0"}, {"code": "(fn euklides [x y]\n  (if (> y x)\n    (euklides y x)\n    (if (= y 0)\n      x\n      (recur y (mod x y)))))", "problem": 66, "user": "4e73a9dc535dff18050a9c77"}, {"code": "(fn gcd\n  [a b]\n  (last (filter #(and (= 0 (rem a %))\n                      (= 0 (rem b %)))\n                (range 1 (+ 1 (max a b))))))", "problem": 66, "user": "4e7f32ee535db966e863cc3a"}, {"code": "(fn [m n] (first (filter #(and (zero? (mod m %)) (zero? (mod n %)))\n(range (min m n) 0 -1))))", "problem": 66, "user": "4e96557d535dbda64a6f6b43"}, {"code": "(fn \n  [& args] \n  \"in which i show that i dont understand discrete math well\"\n  (->> args\n    (map (fn [n] \n            (into #{} \n              (keep #(when (zero? (mod n %)) %) \n                    (range 1 (inc n))))))\n    (apply clojure.set/intersection)\n    (apply max)))", "problem": 66, "user": "4e9660ec535dbda64a6f6b44"}, {"code": "(fn [a b]\n  (let [max (max a b)\n        possible (range 1 max)\n        divisors (filter\n                  #(and (= 0 (mod a %)) (= 0 (mod b %)))\n                  possible)]\n    (last (sort divisors))))", "problem": 66, "user": "4dbb0f2d535d1e037afb21b1"}, {"code": "(fn f [a b]\n  (cond\n    (> a b) (f b a)\n    (= a b) a\n    f (f a (- b a))))", "problem": 66, "user": "4e8f1ac6535d65386fec2146"}, {"code": "(fn gcd [x y]\n    (if (= y 0)\n      x\n      (gcd y (mod x y))))", "problem": 66, "user": "4e84f77c535db62dc21a62e5"}, {"code": "(fn gcd [a b]\n  (if (zero? b) a \n    (recur b (mod a b))))", "problem": 66, "user": "4dcfbc44535d5973398f92a7"}, {"code": "(fn [m n]\n  (let [large (if (> m n) m n)\n        small (if (< m n) m n)]\n    (loop [i small la large sm small cd []]\n      (if (== i 1)\n        (if (empty? cd)\n          1\n          (first cd))\n        (if (and (== 0 (rem la i)) (== 0 (rem sm i)))\n          (recur (/ sm i) (/ la i) (/ sm i) (conj cd i))\n          (recur (dec i) la sm cd))))))", "problem": 66, "user": "4e955b95535dbda64a6f6b33"}, {"code": "#(let[ gcd\r\n(fn gcd[a, b]\r\n  (cond\r\n    (= a 0) b\r\n  (= b 0) a\r\n\t:else (recur b (mod a b))))\r\n] (gcd % %2)\r\n)", "problem": 66, "user": "4de8a7d7535d08e6dec9fdfe"}, {"code": "(fn [a b]\n  (if (= b 0) a (recur b (mod a b))))", "problem": 66, "user": "4e951f44535dbda64a6f6b30"}, {"code": "(fn gcd [a b] (println a b)\n  (if (= 0 (min a b))\n    (max a b)\n    (gcd (min a b) (mod (max a b) (min a b)))))", "problem": 66, "user": "4e98a6d0535dbda64a6f6b5e"}, {"code": "(fn [f s] (first (filter #(and (= 0 (rem f %)) (= 0 (rem s %))) (reverse (range 1 (inc (min f s)))))))", "problem": 66, "user": "4e9609ad535dbda64a6f6b3e"}, {"code": "(fn gcd [x y]\r\n  (if (zero? y)\r\n    x\r\n    (recur y (rem x y))))", "problem": 66, "user": "4dd7d040535d2dad7130b5d6"}, {"code": "#(if (= 0 %2) % (recur %2 (mod % %2)))", "problem": 66, "user": "4e72ac47535d5021c1a89666"}, {"code": "(fn g [a b] (if (zero? b) a (g b (mod a b))))", "problem": 66, "user": "4e951ce5535dbda64a6f6b2e"}, {"code": "#(if (= 0 %2) %1 (recur %2 (rem %1 %2)))", "problem": 66, "user": "4e8516d0535db62dc21a62e8"}, {"code": "(fn gcd [x1 x2] (loop [a x1 b x2] (if (= 0 b) a (recur b (mod a b)))))", "problem": 66, "user": "4e9de526535dbda64a6f6b8e"}, {"code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "4e9fd521535d7eef3080729a"}, {"code": "(fn gcd [a b]\n    (if (zero? b)\n        a\n        (recur b (rem a b))))", "problem": 66, "user": "4e7263a1535d5021c1a8965f"}, {"code": "(fn [a b]\n  (first (for [x (map inc (reverse (range (if (< a b) a b))))\n        :when (and (= 0 (mod a x)) (= 0(mod b x)))]\n  x)\n))", "problem": 66, "user": "4e9dafe1535dbda64a6f6b89"}, {"code": "(fn [a b]\n  (some\n    #(if (= 0 (rem a %) (rem b %)) %)\n    (range a 0 -1)))", "problem": 66, "user": "4db85bdd535d1e037afb218d"}, {"code": "#(if (= 0 %) %2 (recur (mod %2 %) %))", "problem": 66, "user": "4e9a8c0e535dbda64a6f6b72"}, {"code": "(fn f [a b]\n  (if (zero? b) a (f b (mod a b))))", "problem": 66, "user": "4ea09fa4535d7eef308072aa"}, {"code": "#(loop [d (max % %2)] (if (= 0 (+ (mod % d) (mod %2 d))) d (recur (dec d))))", "problem": 66, "user": "4ea0cfb0535d7eef308072ae"}, {"code": "(fn gcd [a b]\n   (if (< a b)\n     (gcd b a)\n     (let [q (mod a b)]\n       (if (= q 0)\n         b\n         (gcd b q)))))", "problem": 66, "user": "4e59b02c535d8a8b8723a2a2"}, {"code": "(fn [a b]\n  (if (< a b) (recur b a)\n    (if (zero? b) a\n      (recur b (mod a b)))))", "problem": 66, "user": "4ea1b9e4535d7eef308072b8"}, {"code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "4ea348ad535d7eef308072c4"}, {"code": "(fn gcd [a b]\n  (if (zero? (mod a b))\n    b\n    (gcd b (mod a b))))", "problem": 66, "user": "4e89ddf9535d3e98b8023284"}, {"code": "#(loop [a %1 b %2]\n  (if (= a 0)\n    b\n    (if (= b 0)\n      a\n      (if (= a b)\n        a\n        (if (> a b)\n          (recur (- a b) b)\n          (recur a (- b a))))))\n)", "problem": 66, "user": "4e9e7ce3535dbda64a6f6b98"}, {"code": "(fn gcd [a b] \n  (if (= b 0) \n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "4e9c81e8535dbda64a6f6b80"}, {"code": "#(first (reverse (filter (fn [x] (some (fn [c] (= c x)) (filter (fn [y] (= 0 (mod %1 y))) (rest (range (inc %1)))))) (filter (fn [z] (= 0 (mod %2 z))) (rest(range (inc %2)))))))", "problem": 66, "user": "4e975bce535dbda64a6f6b53"}, {"code": "(fn [x y] (cond (> x y) (recur (- x y) y)\n                (< x y) (recur x (- y x))\n                :else x))", "problem": 66, "user": "4ea41fc2535d7eef308072cb"}, {"code": "(fn gcd [a b]\n  (loop [d 1 gd 1]\n    (if (or (> d a) (> d b))\n      gd\n      (recur (inc d) (if (and (= 0 (mod a d)) (= 0 (mod b d)))\n                       d\n                       gd)))))", "problem": 66, "user": "4e6a4954535d8ccf87e9fec0"}, {"code": "(fn [x y]\n  (if (zero? y)\n    x\n    (recur y (mod x y))))", "problem": 66, "user": "4e976f79535dbda64a6f6b55"}, {"code": "(fn [a b] \n      (let [factors (fn [x] \n                        (set (filter #(= 0 (rem x %)) (range 1 (+ x 1)))))] \n        (apply max (clojure.set/intersection (factors a) (factors b)))))", "problem": 66, "user": "4e9b22e2535dbda64a6f6b74"}, {"code": "(fn g [a b] (if (= b 0) a (g b (mod a b))))", "problem": 66, "user": "4ea2ddf1535d7eef308072bf"}, {"code": "(fn [a b]\n    (if (zero? b) a (recur b (rem a b))))", "problem": 66, "user": "4e5d0e96535d8a8b8723a2c8"}, {"code": "#(if (= %1 0) %2 (recur (mod %2 %1) %1))", "problem": 66, "user": "4dad76588e77d6ed63f12a44"}, {"code": "(fn [x y]\n  (loop [res (sort [x y])]\n    (if (apply = res)\n      (first res)\n      (recur (sort [(first res) (- (last res) (first res))]))\n    )\n  )\n)", "problem": 66, "user": "4ea57300535d7eef308072d5"}, {"code": "(fn gcd [a b]\r\n  (if (= b 0) a\r\n      (recur b (rem a b))))", "problem": 66, "user": "4e8ddf32535d65386fec213c"}, {"code": "(fn gcd [a b] (if (= b 0) a (gcd b (mod a b))))", "problem": 66, "user": "4e9d6a65535dbda64a6f6b87"}, {"code": "(fn gcd[a b] (\n  if (= b 0) a\n  (gcd b (rem a b))))", "problem": 66, "user": "4db13ff51254ad5b4805fa68"}, {"code": "(fn gcd [a b] (if (= b 0) a (gcd b (mod a b))))", "problem": 66, "user": "4ea1ecfa535d7eef308072bb"}, {"code": "(fn gcd [x y] \n  (cond \n    (= x y) x\n    (> x y) (gcd (- x y) y)\n    :else (gcd (- y x) x)))", "problem": 66, "user": "4eab612d535d7eef30807316"}, {"code": "(fn[ina inb] (loop [a ina b inb]\n  (if (= b 0)\n      a\n      (recur b (rem a b)))))", "problem": 66, "user": "4ea85846535d7eef308072f9"}, {"code": "(fn [a b]\n  (loop [n a d b]\n    (if (= 0 (rem n d)) \n      d\n      (recur d (rem n d)))))", "problem": 66, "user": "4dbd2aa3535d020aff1edf40"}, {"code": "(fn [a b] \n  (if (= b 0) \n    a \n    (recur b (mod a b))))", "problem": 66, "user": "4ea4fe1f535d7eef308072cf"}, {"code": "(fn ! [a b]\n  (cond\n    (= b a) b\n    (< a b) (! b a)\n    :else (! (- a b) b)))", "problem": 66, "user": "4e8a460e535d65386fec2109"}, {"code": "(fn [x y]\r\n  (let [m (min x y)]\r\n    (cond\r\n      (= m 1) 1\r\n      (= x y) x\r\n      :else (recur m (- (max x y) m)))))", "problem": 66, "user": "4e994541535dbda64a6f6b64"}, {"code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "problem": 66, "user": "4e9b230c535dbda64a6f6b75"}, {"code": "(fn gcd[x y]\r\n  (let [a (map (fn[n] (if (= 0 (mod x n)) n 0))(range 1 (+ 1 x))) b (map (fn[n] (if (= 0 (mod y n)) n 0))(range 1 (+ 1 y)))]\r\n    (last(sort (keep (set a) (set b))))\r\n    )\r\n  )", "problem": 66, "user": "4e9def6b535dbda64a6f6b8f"}, {"code": "(fn my-gcd [x y]\n  (let [ x-factors (set (filter #(= 0 (mod x %)) (range 1 (inc x))))\n         y-factors (set (filter #(= 0 (mod y %)) (range 1 (inc y))))  ]\n  (last (sort (keep x-factors y-factors)))\n  )\n)", "problem": 66, "user": "4dd1de4d535dae65d5c462d7"}, {"code": "(fn gcd [x y]\n  (let [[a b] (sort [x y])]\n    (if (= 0 a)\n     b\n     (gcd (- b a) a)))\n  )", "problem": 66, "user": "4eaa96e1535d7eef3080730d"}, {"code": "(fn [x y] (loop [num1 x num2 y m (min x y)] (if (and (= 0 (rem num1 m)) (= 0 (rem num2 m))) m (recur num1 num2 (- m 1)))))", "problem": 66, "user": "4eb0afed535d7eef3080733e"}, {"code": "(fn [a b]\n  (loop [x a y b]\n    (if (zero? y) x,\n    (recur y (mod x y)))))", "problem": 66, "user": "4ea68edb535d7eef308072e6"}, {"code": "#(if (= %2 0) %1 (recur %2 (mod %1 %2)))", "problem": 66, "user": "4eb0a757535d7eef3080733d"}, {"code": "(fn [a b]\n  (let [factors (fn [n]\n                  (filter #(= 0 (mod n %))\n                          (range 1 (inc n))))\n        common (clojure.set/intersection (set (factors a)) (set (factors b)))]\n    (apply max common)))", "problem": 66, "user": "4e2b1d48535deb9a81d77f03"}, {"code": "#(if (= %2 0) % (recur %2 (mod % %2)))", "problem": 66, "user": "4eaede1f535d7eef30807329"}, {"code": "(fn gcd [a b] (if (zero? b) a (gcd b (rem a b))))", "problem": 66, "user": "4ea9b80c535d7eef30807306"}, {"code": "(fn gcd [a b]\n  (let [x (max a b) y (min a b)]\n    (if (= 0 y)\n      x\n      (gcd y (mod x y)))))", "problem": 66, "user": "4eb1dd39535d7eef30807345"}, {"code": "(fn [a b]\n  (loop [g (max a b)\n         m (min a b)]\n    (if (= 0 m)\n      g\n      (recur m (rem g m)))))", "problem": 66, "user": "4dae869dedd6309eace4d154"}, {"code": "(fn [x y]\n  (loop [i (min x y)]\n(cond (= i 1) 1\n(= 0 (mod x i) (mod y i)) i\n:else (recur (dec i)))))", "problem": 66, "user": "4eb27fad535d7eef3080734a"}, {"code": "(fn [a b]\n    ; Straight from clojure.contrib.math/gcd\n    (loop [a (Math/abs a) b (Math/abs b)]\n      (if (zero? b) a,\n    (recur b (mod a b)))))", "problem": 66, "user": "4e89e939535d3e98b8023287"}, {"code": "(fn gcd [a b]\n  (if (= a b)\n    a\n    (if (< a b)\n      (gcd a (- b a))\n      (gcd b (- a b)))))", "problem": 66, "user": "4e8b98fc535d65386fec2124"}, {"code": "(fn gcd [n m]\n  (if (zero? m)\n    n\n    (gcd m (mod n m))))", "problem": 66, "user": "4e726914535d5021c1a89661"}, {"code": "#(loop [m % n %2] (if (= 0 n) m (recur n (rem m n))))", "problem": 66, "user": "4eb5750a535d7eef30807366"}, {"code": "(fn gcd [o1 o2]\n  (let [min (min o1 o2)\n        max (max o1 o2)]\n    (if (zero? (mod max min))\n      min\n      (gcd (mod max min) min))))", "problem": 66, "user": "4eb404ba535d7eef3080735a"}, {"code": "(fn [a b]\n  (let [n (min a b)]\n    (first\n      (filter\n        #(and (= 0 (mod a %)) (= 0 (mod b %)))\n        (take n (iterate dec n))))))", "problem": 66, "user": "4eb2e6ca535d7eef3080734f"}, {"code": "(fn gcd [x y] (if (zero? y) x (gcd y (mod x y))))", "problem": 66, "user": "4eb01df4535d7eef30807337"}, {"code": "(fn [x y]\n  (if (= y 0) x (recur y (mod x y))))", "problem": 66, "user": "4ea55757535d7eef308072d3"}, {"code": "(fn ggt [x y] (if (zero? (mod x y)) y (ggt y (mod x y))))", "problem": 66, "user": "4e8d86d5535d65386fec2136"}, {"code": "(fn f [m n] (if (zero? n) m (recur n (mod m n))))", "problem": 66, "user": "4eb97b2e535dfed6da9c6d54"}, {"code": "#(loop [a % b %2]\n  (if (zero? b) a\n    (recur b (mod a b))))", "problem": 66, "user": "4eb97234535dfed6da9c6d53"}, {"code": "#(let [a (max %1 %2) b (min %1 %2)]\n  (if (= b 0)\n    a\n    (recur b (- a b))\n)\n)", "problem": 66, "user": "4e4870d1535dc968683fc4bc"}, {"code": "(fn [x y] \n  (cond\n    (> x y) (recur y x)\n    (= x 0) y\n    true (recur (mod y x) x) ))", "problem": 66, "user": "4eaf08ce535d7eef3080732d"}, {"code": "(fn [x y] (last (filter #(and (= 0 (mod x %)) (= 0 (mod y %))) (range 1 (inc x)))))", "problem": 66, "user": "4eb2eae5535d7eef30807351"}, {"code": "(fn f [a b] (if (= 0 a) b (f (mod b a) a)))", "problem": 66, "user": "4e82f85d535db62dc21a62ce"}, {"code": "(fn [x y]\n  (let [divs (fn [a]\n              (set (filter #(zero? (mod a %)) (range 1 (inc a)))))\n        divs-x (divs x)]\n    (apply max (filter divs-x (divs y)))))", "problem": 66, "user": "4ebc08a8535dfed6da9c6d7c"}, {"code": "(fn [a b]\n   (apply max (clojure.set/intersection \n     (set (filter #(= 0 (mod a %)) (range 1 (inc a))))\n     (set (filter #(= 0 (mod b %)) (range 1 (inc b)))))))", "problem": 66, "user": "4dbdc9da535d020aff1edf4c"}, {"code": "(fn [a b]\n    (loop [d (min a b)]\n      (if (= 0 (rem a d) (rem b d))\n        d\n        (recur (dec d)))\n      ))", "problem": 66, "user": "4e6e2ac4535d5021c1a895ff"}, {"code": "(fn [a b]\n  (first \n    (filter \n      #(= (mod a %) (mod b %) 0) \n     (range a 0 -1))))", "problem": 66, "user": "4e8a0d5d535d3e98b802328e"}, {"code": "#(loop [x %1 y %2] (if (zero? y) x (recur y (mod x y))))", "problem": 66, "user": "4e58c019535d8a8b8723a297"}, {"code": "(fn f [x y] (if (= y 0) x (f y (mod x y))))", "problem": 66, "user": "4e1350af535d04ed9115e7d8"}, {"code": "(fn[a b](cond\r\n   (= a b) a\r\n   (> a b) (recur (- a b) b)\r\n   :else   (recur (- b a) a)))", "problem": 66, "user": "4e7650c5535d324fb2983d68"}, {"code": "(fn [x y]\n    (cond\n         (= x y) x\n         (> x y) (recur (- x y) y)\n         :else (recur x (- y x))))", "problem": 66, "user": "4ea7999e535d7eef308072ee"}, {"code": "(fn gcd [a b]\n  (if (< a b) (recur b a)\n    (let [q (quot a b)\n          r (rem a b)]\n      (if (= r 0) b\n        (gcd (- a b) b)))))", "problem": 66, "user": "4ec12577535dfed6da9c6da8"}, {"code": "(fn [m n] (apply max (clojure.set/intersection (set (filter #(= 0 (mod m %)) (drop 1 (range (+ 1 m)))))\r\n                      (set (filter #(= 0 (mod n %)) (drop 1 (range (+ 1 n))))))))", "problem": 66, "user": "4eb44d78535d7eef30807360"}, {"code": "#(if (> %2 %) \n  (recur %2 %) \n  (if (= %2 0) \n    % \n    (recur %2 (rem % %2))))", "problem": 66, "user": "4ec0c7ba535dfed6da9c6da4"}, {"code": "(fn [num1 num2]\n  ; O(sqrt(min(num1, num2)))\n  (let [smallest (min num1 num2)\n        largest (max num1 num2)\n        int-divide (fn [dividend divisor]\n                    (int (/ dividend divisor)))\n        factor? (fn [dividend divisor]\n                  (when (= (mod dividend divisor) 0)\n                    (int-divide dividend divisor)))\n        factor-pair (fn [dividend divisor]\n                      (when-let [factor (factor? dividend divisor)]\n                        [divisor factor]))\n        min-factor (fn [other-factor dividend divisor]\n                      (or (factor? dividend divisor) other-factor))\n        factor-pairs (fn factor-pairs\n                      ([number] (filter identity (factor-pairs number 1 number)))\n                      ([number index highest-factor]\n                        (when (< index highest-factor)\n                          (lazy-seq\n                              (cons\n                                (factor-pair number index)\n                                (factor-pairs number (inc index) (min-factor highest-factor number index)))))))\n        factors-desc (fn [number]\n                       (let [factor-pairs (factor-pairs number)]\n                          (concat (map second factor-pairs) (reverse (map first factor-pairs)))))\n        smallest-factors (factors-desc smallest)]\n    (some #(when (factor? largest %1) %1) smallest-factors)))", "problem": 66, "user": "4ec2fe3f535dcc7ae8597d4f"}, {"code": "(fn gcd [a,b]\n  (apply max \n    (filter \n      #(and (zero? (mod a %)) (zero? (mod b %)))\n      (range 1 (inc (min a b))))))", "problem": 66, "user": "4ea0c284535d7eef308072ad"}, {"code": "(fn [a b]\n  (let [divs? (fn [big l]\n              (= 0 (mod big l)))\n       lim (min a b)]\n  (apply max (filter #(and (divs? a %) (divs? b %)) (range 1 (inc lim))))))", "problem": 66, "user": "4ec34578535dcc7ae8597d51"}, {"code": "#(loop [[h & t] (reverse (range (inc (min %1 %2))))] \n   (if (and (= 0 (rem %1 h)) (= 0 (rem %2 h))) h (recur t)))", "problem": 66, "user": "4eabb245535d7eef30807319"}, {"code": "(fn gcd [x y] \n    (if (zero? y) x, \n      (recur y (mod x y))))", "problem": 66, "user": "4ec12516535dfed6da9c6da7"}, {"code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "problem": 66, "user": "4e9519b4535dbda64a6f6b2d"}, {"code": "(fn [num1 num2]\n  (loop [a (max num1 num2) b (min num1 num2)]\n    (let [r (rem a b)]\n      (cond \n        (= 0 r)\n        b\n        (= 1 r)\n        1\n        :else\n        (recur b r)))))", "problem": 66, "user": "4dadb891c9a9d6ed3699dc57"}, {"code": "(fn [a b] (first (filter #(= 0 (rem a %) (rem b %)) (range (max a b) 0 -1))))", "problem": 66, "user": "4ec2f192535dcc7ae8597d4c"}, {"code": "(fn gcd [a b]\n  (if (zero? b) a\n      (recur b (mod a b))))", "problem": 66, "user": "4ec16c21535dfed6da9c6dac"}, {"code": "(fn gcd [x y]\n  (cond \n    (> x y) (gcd y x)\n    (zero? (mod x y)) x\n    :else (gcd x (- y (mod x y)))))", "problem": 66, "user": "4ebe766d535dfed6da9c6d94"}, {"code": "#(if (= 0 %2)\n    %\n    (recur %2 (mod % %2)))", "problem": 66, "user": "4ec5d40d535d6d7199dd36b9"}, {"code": "(fn [a b] (if (zero? b) a (recur  b (mod a b))))", "problem": 66, "user": "4ebd4448535dfed6da9c6d8f"}, {"code": "(fn [x y]\n  (first \n    (for [gcd (range (min x y) 0 -1) \n      :when (and (= 0 (mod x gcd)) (= 0 (mod y gcd)))]\n      gcd)))", "problem": 66, "user": "4eb51942535d7eef30807365"}, {"code": "(fn [n1 n2]\n  (loop [divisor (max n1 n2)]\n    (if (and (= (mod n1 divisor) 0) (= (mod n2 divisor) 0))\n      divisor\n      (recur (dec divisor)))))", "problem": 66, "user": "4e117dea535d04ed9115e7c9"}, {"code": "(fn [n m]\n  (let [l (max n m)\n        r (min n m)]\n       (cond\n         (= r 0) l\n         :else (recur r (rem l r)))))", "problem": 66, "user": "4ec21058535dfed6da9c6dba"}, {"code": "(fn gcd [x y] (if (= y 0) x (gcd y (mod x y))))", "problem": 66, "user": "4ec07699535dfed6da9c6da2"}, {"code": "(fn [x y]\n  (loop [a (max x y) b (min x y )]\n    ( if (= b 0) \n        a \n        (recur b (mod  a b ) )\n  )\n)\n)", "problem": 66, "user": "4ec5bec6535d6d7199dd36b3"}, {"code": "(fn [x y]\n  (letfn [(gc [x y z]\n    (if (and (= (mod x z) 0) (= (mod y z) 0))\n    z\n    (recur x y (dec z))))]\n    (gc x y (max x y))))", "problem": 66, "user": "4e6dc5f5535d5021c1a895f0"}, {"code": "(fn [a b]\n  (let [r (rem a b)]\n    (if (zero? r) b (recur b r))))", "problem": 66, "user": "4eb9ce75535dfed6da9c6d5e"}, {"code": "(fn [n m] (if (= 0 m) n (recur m (mod n m))))", "problem": 66, "user": "4ebb78a2535dfed6da9c6d70"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "4e25176e535d04ed9115e829"}, {"code": "(fn [a b]\n  (let [max (max a b)\n        min (min a b)]\n    (if (zero? min)\n      max\n      (recur (- max min) min))))", "problem": 66, "user": "4daf8f84edd6309eace4d17a"}, {"code": "#(->> (if (< %1 %2) [%1 %2] [%2 %1])\n      (iterate (fn [[x y]] [y (mod x y)]))\n      (drop-while (fn [x] (not= (second x) 0)))\n      ffirst)", "problem": 66, "user": "4eae5fe4535d7eef30807325"}, {"code": "(fn [a b]\n  (loop\n    [d (min a b)]\n    (if\n      (= 0 (apply + (map mod [a b] [d d])))\n      d\n      (recur (- d 1)))))", "problem": 66, "user": "4e6f578c535d5021c1a8961b"}, {"code": "(fn [a b] (if (= b 0) a (recur b (rem a b))))", "problem": 66, "user": "4ebef65e535dfed6da9c6d9b"}, {"code": "(fn gcd [x y]\n  (cond \n    (< x y) (gcd y x) ; x >= y\n    (= y 0) x\n    :else (recur y (mod x y))))", "problem": 66, "user": "4ed188c8535d44c135fd68cf"}, {"code": "(fn f[a,b](if(zero? b) a (f b (mod a b))))", "problem": 66, "user": "4ec75829535d6d7199dd36e1"}, {"code": "#(loop [a (rem % %2) y %2]\n    (if (= a 0)\n      y\n      (recur (rem y a) a)))", "problem": 66, "user": "4ec74de3535d6d7199dd36df"}, {"code": "(fn [x y]\n  (loop [xx x, yy y]\n    (cond\n      (= xx yy) xx\n      (= 0 xx) yy\n      (= 0 yy) xx\n      (> xx yy) (recur (rem xx yy) yy)\n      :else (recur xx (rem yy xx)))))", "problem": 66, "user": "4ec5cdb0535d6d7199dd36b8"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "4ebc829e535dfed6da9c6d86"}, {"code": "(fn [a b] (some #(when (= 0 (rem a %) (rem b %)) %) (range (min a b) 0 -1)))", "problem": 66, "user": "4ecbb249535df97575fdabdf"}, {"code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "4ec28d86535dfed6da9c6dbc"}, {"code": "(fn gcd [& args]\n  ((fn [n]\n     (if (> n 0)\n       (if (reduce (fn [a b] (and a b))\n                   (for [a args] (= 0 (mod a n))))\n         n\n         (recur (dec n)))\n       1))\n     (apply min args)))", "problem": 66, "user": "4ec75077535d6d7199dd36e0"}, {"code": "(letfn [(factors [n]\n             (set (for [i (range 1 (+ 1 n)) :when (zero? (mod n i))] i)))]\n    (fn [a b] (apply max (clojure.set/intersection (factors a) (factors b)))))", "problem": 66, "user": "4ed292ac535d44c135fd68d9"}, {"code": "(fn gcd [a b] (\n  if (= b 0) a (gcd b (- a (* b (int (/ a b)))))\n))", "problem": 66, "user": "4ed500bb535d10e5ff6f52d3"}, {"code": "(fn gcd [x y]\n  (cond\n   (= x 0) y\n   (= y 0) x\n   (= x y) x\n   (and (even? x) (even? y)) (* 2 (gcd (/ x 2) (/ y 2)))\n   (even? x) (gcd (/ x 2) y)\n   (even? y) (gcd x (/ y 2))\n   :else (if (> x y)\n           (gcd (/ (- x y) 2) y)\n           (gcd (/ (- y x) 2) x))))", "problem": 66, "user": "4ebbf772535dfed6da9c6d76"}, {"code": "(fn gcd [x y]\n  (let [[larger smaller] (if (> x y) [x y] [y x])]\n    (if (= 0 smaller)\n      larger\n      (recur (mod larger smaller) smaller))))", "problem": 66, "user": "4e89ff3d535d3e98b802328a"}, {"code": "(fn [x y] (loop [d (- (max x y) 1)]\n  \t   (if (and (zero? (rem x d))\n\t\t\t    (zero? (rem y d))) d\n\t\t\t    (recur (dec d)))))", "problem": 66, "user": "4ea4e98a535d7eef308072ce"}, {"code": "#(if (= 0 %2) % (recur %2 (mod % %2)))", "problem": 66, "user": "4e704293535d5021c1a89634"}, {"code": "(fn x [a b] \r\n  (letfn [(fac? [f x] (= 0 (mod x f)))]\r\n  (first (filter #(and (fac? % a) (fac? % b)) (range (min a b) 0 -1)))))", "problem": 66, "user": "4eca40cd535d6d7199dd3703"}, {"code": "(fn mygcd [x y]\n  (cond (= x 0) y\n        (= y 0) x\n        (< x y) (mygcd x (- y x))\n        :else (mygcd (- x y) y)))", "problem": 66, "user": "4ed94d69535d10e5ff6f5303"}, {"code": "(fn [a b]\n  (if (zero? a)\n    b\n    (recur (mod b a) a)))", "problem": 66, "user": "4eda7cc3535d10e5ff6f530e"}, {"code": "(fn [x y]\n  (if (= y 0)\n    x\n    (recur y (mod x y))))", "problem": 66, "user": "4ed6238d535d10e5ff6f52de"}, {"code": "(fn [a b]\n  (if (or (zero? a) (zero? b))\n    (+ a b)\n    (recur (mod a b) (mod b a))))", "problem": 66, "user": "4edab806535d10e5ff6f5311"}, {"code": "(fn gcd [a b]\n  (if (zero? b)\n    a   \n    (recur b (mod a b))))", "problem": 66, "user": "4ec70f26535d6d7199dd36dd"}, {"code": "#(if (= 0 %2) % (recur %2 (mod % %2)))", "problem": 66, "user": "4e65027c535d8ccf87e9fe6e"}, {"code": "(fn gcd [a b]\n  (if (zero? b) a\n      (gcd b (rem a b))))", "problem": 66, "user": "4e599577535d8a8b8723a29f"}, {"code": "(fn [x y] (if (zero? y) x (recur y (mod x y))))", "problem": 66, "user": "4e5af45e535d8a8b8723a2b1"}, {"code": "(fn gcd [a b]\n  (loop [x (max a b)]\n    (if (and (zero? (mod a x)) (zero? (mod b x)))\n      x\n      (recur (dec x)))))", "problem": 66, "user": "4e5b192e535d8a8b8723a2b3"}, {"code": "#(if (= % 0) %2 (recur (mod %2 %) %))", "problem": 66, "user": "4ed69ea4535d10e5ff6f52e3"}, {"code": "(fn [n m] (if (= 0 m) n (recur m (mod n m))))", "problem": 66, "user": "4ede8789535d10e5ff6f5337"}, {"code": "; god this answer sucks\n(fn gcd [a b]\n    (let [r (range 1 (inc (min a b)))\n          divs (map first (filter #(= (second %) 0) (map #(list % (mod (min a b) %)) r))) ]\n    (second (last (filter #(= (first %) 0) (map #(list (mod (max a b) %) %) divs) )))))", "problem": 66, "user": "4ed72e51535d10e5ff6f52ee"}, {"code": "#(if (ratio? (/ % %2)) (/ % (numerator (/ % %2))) (min % %2))", "problem": 66, "user": "4ecf1f51535d1f5ad70dba3a"}, {"code": "#(if (zero? %2) %\n      (recur %2 (rem % %2)))", "problem": 66, "user": "4eb955da535dfed6da9c6d50"}, {"code": "(fn [a b]\n  (cond (> a b) (recur b a)\n        (= a 0) b\n        :else (recur (mod b a) a)))", "problem": 66, "user": "4ede8e1d535d10e5ff6f5339"}, {"code": "(fn gcd [x y]\r\n    (cond\r\n  (zero? x) y\r\n\t(zero? y) x\r\n\t:else (recur y (mod x y))))", "problem": 66, "user": "4edeac6b535d10e5ff6f533a"}, {"code": "(fn gcd [a b]\n  (if (zero? b) a (recur b (mod a b)))\n  )", "problem": 66, "user": "4ecfa05c535d44c135fd68b9"}, {"code": "(fn [a b] \n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "4ed0e139535d44c135fd68c7"}, {"code": "(fn gcd[a b](if (zero? b) a (gcd b (rem a b))))", "problem": 66, "user": "4e3ae7cd535deb9a81d77f4e"}, {"code": "(fn gcd [a b] (if (zero? b) a (gcd b (mod a b))))", "problem": 66, "user": "4eb13d60535d7eef3080733f"}, {"code": "(fn gcd [x y]\r\n  (last (for [a (range 1 (inc (min x y))) :when (= 0 (mod x a) (mod y a))] a)))", "problem": 66, "user": "4e6ab9cb535d8ccf87e9fefe"}, {"code": "(fn gcd [a b] (if (= 0 b) a (if (= 0 a) b (recur b (mod a b)))))", "problem": 66, "user": "4ece9ca9535d23f03622770f"}, {"code": "(fn [a b]\n  (cond (= 0 b) a\n        (> b a) (recur b a)\n        :else (recur b (mod a b))))", "problem": 66, "user": "4edd038c535d10e5ff6f5327"}, {"code": "#(loop [n % r %2] (if (zero? r) n (recur r (mod n r))))", "problem": 66, "user": "4ed27f9f535d44c135fd68d5"}, {"code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "4ee2da14535d10e5ff6f536c"}, {"code": "(fn gcd [n m]\n  (let [rem (mod n m)]\n    (if (zero? rem)\n        m\n        (gcd m rem))))", "problem": 66, "user": "4ee3b586535d10e5ff6f5371"}, {"code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (rem a b))))", "problem": 66, "user": "4ed9fe5f535d10e5ff6f5308"}, {"code": "(fn [a b]\r\n  (if (zero? b)\r\n    a\r\n    (recur b (mod a b))))", "problem": 66, "user": "4ee40938535d10e5ff6f5375"}, {"code": "(fn [i j]\n  (loop [r (mod i j) a i  b j]\n    (if (<= r 0)\n      b\n      (recur (mod b r)  b  r))))", "problem": 66, "user": "4eddcbbf535d10e5ff6f532d"}, {"code": "(fn [x y]\n  (loop [x x\n         y y]\n    (cond (= y 0) x\n          :else (recur y (mod x y)))))", "problem": 66, "user": "4ee75ec2535d93acb0a66867"}, {"code": "#(if (= 0 %2) % (recur %2 (mod % %2)))", "problem": 66, "user": "4ee7ef87535d93acb0a66872"}, {"code": "(fn f [a b]\n  (if (= 0 b)\n    a\n    (f b (rem a b))))", "problem": 66, "user": "4ee82539535d93acb0a66878"}, {"code": "(fn gcd [a b]\n  (if (= (mod a b) 0)\n    b\n    (gcd b (mod a b))))", "problem": 66, "user": "4ee82223535d93acb0a66877"}, {"code": "#(loop [curr %1] (if (= 0 (rem %1 curr) (rem %2 curr))\n                     curr\n                     (recur (dec curr))))", "problem": 66, "user": "4ee88bfb535d93acb0a66881"}, {"code": "(fn [x y]\r\n  (if (= 0 y)\r\n    x\r\n    (recur y (mod x y))))", "problem": 66, "user": "4ec5aa1f535d6d7199dd36b0"}, {"code": "(fn euler [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "4ed7b617535d10e5ff6f52f3"}, {"code": "#(loop [a % b %2] (if (= 0 b) a (recur b (mod a b))))", "problem": 66, "user": "4ee63d8d535d93acb0a66859"}, {"code": "#(loop [b (max % %2) s (min % %2)]\n          (let [r (rem b s) ]  \n             (if (= 0 r) s (recur (max s r) (min s r)) )))", "problem": 66, "user": "4ee7d177535d93acb0a6686f"}, {"code": "(fn [a b]\n          (loop [a a, b b]\n            (cond\n             (= a b) a\n             (> a b) (recur (- a b) b)\n             :else (recur a (- b a)))))", "problem": 66, "user": "4ee26f01535d10e5ff6f5368"}, {"code": "(fn gcd*\n  [a b]\n  (first\n   (filter\n    #(and (zero? (mod a %)) (zero? (mod b %)))\n    (take-while pos? (iterate dec (min a b))))))", "problem": 66, "user": "4dda44f2535d02782fcbe9f1"}, {"code": "#(first (filter (fn [n] (and (= 0 (mod %1 n)) (= 0 (mod %2 n))))\n                 (reverse (range (max %1 %2)))))", "problem": 66, "user": "4ee868be535d93acb0a6687d"}, {"code": "(fn gcd [a b]\n  (cond\n   (zero? a) b\n   (zero? b) a\n   :else (recur (mod a b) (mod b a))))", "problem": 66, "user": "4e7f8f85535db966e863cc44"}, {"code": "(fn [n1 n2]\n  (let [max (max n1 n2)\n        min (min n1 n2)\n        rng (reverse (range 1 (inc min)))]\n    (first (filter number?\n                   (for [i rng] (if (= 0 (rem max i) (rem min i)) i))))))", "problem": 66, "user": "4ee9d697535d93acb0a66895"}, {"code": "(fn [n n2]\n    (last (filter #(= 0 (mod n %) (mod n2 %)) (range 1 (max n n2)))))", "problem": 66, "user": "4e7e8684535db169f9c79717"}, {"code": "#(if (zero? %2) % (recur %2 (mod % %2)))", "problem": 66, "user": "4db091b7838c48654951d9c2"}, {"code": "(fn [a b]\n  (cond (= a b) a\n        (< a b) (recur (- b a) a)\n        :else (recur (- a b) b)))", "problem": 66, "user": "4dabb7b1950ed6eda1bd72f3"}, {"code": "(fn ggt\n  [a b]\n  (let [aa (max a  b) bb (min a b)]\n    (let [m (mod aa bb)]\n      (if (= 0 m) bb (recur b m)))))", "problem": 66, "user": "4edf5dc6535d10e5ff6f5340"}, {"code": "(fn gcd [a b]\r\n  (let [[x y] (sort [a b])]\r\n    (if (= x 0) y (gcd (mod y x) x))))", "problem": 66, "user": "4eecdd66535d93acb0a668b9"}, {"code": "(fn [a b] (apply max (filter\n  #(and (= 0 (mod a %)) (= 0 (mod b %)))\n  (range 1 (max a b)))))", "problem": 66, "user": "4db883e1535d1e037afb2198"}, {"code": "(fn [a b]\n  (let [divides? (fn [n i] (= 0 (rem n i)))\n        set-divisors (fn [n] (set (filter #(divides? n %) (range 1 (inc n)))))]\n    (apply max (clojure.set/intersection \n      (set-divisors a)\n      (set-divisors b)))))", "problem": 66, "user": "4daea889edd6309eace4d15b"}, {"code": "(fn [a b]\n    (some #(when (and (zero? (mod a %))\n                      (zero? (mod b %)))\n             %)\n          (iterate dec (int (/ (max a b) 2)))))", "problem": 66, "user": "4e6a0667535d8ccf87e9fe9e"}, {"code": "#(if (= 0 %2) % (recur %2 (mod % %2)))", "problem": 66, "user": "4ef0a39b535dced4c769f20c"}, {"code": "#(if (= 0 %2) % (recur %2 (mod % %2)))", "problem": 66, "user": "4ef2d243535dced4c769f221"}, {"code": "(fn g [a b] (if (= b 0) a (g b (rem a b))))", "problem": 66, "user": "4ef49c2c535dced4c769f238"}, {"code": "#(letfn [(gcdiv [x y]\r\n\t\t\t (if (= y 0)\r\n\t\t\t     x\r\n\t\t\t     (recur y (mod x y))))]\r\n\t\t\t     (if (> %2 %1)\r\n\t\t\t\t (gcdiv %2 %1)\r\n\t\t\t\t (gcdiv %1 %2)))", "problem": 66, "user": "4e273301535deb9a81d77ef7"}, {"code": "(fn gcd-euclid [x y]\n  (if (= 0 y) x (gcd-euclid y (mod x y))))", "problem": 66, "user": "4edecdae535d10e5ff6f533c"}, {"code": "(fn [a b]\n  (cond\n    (< a b) (recur b a)\n    (= 0 b) a\n    :else (recur b (mod a b))))", "problem": 66, "user": "4ef41f26535dced4c769f230"}, {"code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "4e8d5911535d65386fec2133"}, {"code": "(fn gcd [a b]\n  (if (= 0 b) a\n      (gcd b (mod a b))))", "problem": 66, "user": "4ef1ee67535dced4c769f219"}, {"code": "(fn f [a b] (first(take 1 (for [e (range (max a b) 0 -1) :when (and (= (rem a e) 0) (= (rem b e) 0))] e))))", "problem": 66, "user": "4ef4e5fa535dced4c769f242"}, {"code": "#(letfn [(gcd [a b]\n  (loop [n (min a b)]\n\t\t(if (and (zero? (rem a n)) (zero? (rem b n))) n (recur (dec n))))\n\t)]\n\t(gcd %1 %2))", "problem": 66, "user": "4ef5c7ce535dced4c769f248"}, {"code": "(fn [a b]\n  (let \n    [m (min a b) \n    l (apply zipmap (repeat 2 (range 1 (inc m))))\n    mrem (fn [d [a b]] [a (rem d b)])\n    ra (map #(mrem a %) l)\n    rb (map #(mrem b %) l)\n    fzero (fn [[a b]] (zero? b))\n    da (filter fzero ra)\n    db (filter fzero rb)\n    cd (apply clojure.set/intersection (map set [da db]))]   \n   (reduce max (map (fn [[k v]] k) cd))))", "problem": 66, "user": "4ef355e3535dced4c769f228"}, {"code": "#(loop [a % b %2] (if (= 0 b) a (recur b (mod a b))))", "problem": 66, "user": "4ef77c82535dced4c769f253"}, {"code": "(fn [a b]\n(let [max (max a b)]\n                  (loop [div 1, found 1]\n                     (if (= div (inc max)) found \n                         (let [rest-a (mod a div)\n                              rest-b (mod b div)]\n                              (if (and (= 0 rest-a) \n                                       (= 0 rest-b))\n                                  (recur (inc div) div)\n                                  (recur (inc div) found)))))))", "problem": 66, "user": "4dadc27ec9a9d6ed3c99dc57"}, {"code": "(fn gcd [& args]\n  (let [[b a] (sort args)]\n  (if (= 0 (mod a b))\n    b\n    (gcd b (mod a b)))))", "problem": 66, "user": "4ee6400c535d93acb0a6685b"}, {"code": "(fn my-gcd [a b]\n  (loop [ap a\n         bp b]\n    (if (= bp 0)\n      ap\n      (recur bp (mod ap bp)))))", "problem": 66, "user": "4efb92ce535dced4c769f27a"}, {"code": "(fn gcd [x y] \n  (if (> y x)\n    (gcd y x)\n    (if (zero? y) \n      x\n      (gcd y (rem x y)))))", "problem": 66, "user": "4eee5c7f535d93acb0a668c6"}, {"code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "problem": 66, "user": "4ec5d62c535d6d7199dd36ba"}, {"code": "(fn gcd [a b](let [l (max a b)\n                   s (min a b)\n                   r (rem l s)] \n(if (zero? r) s (gcd s r))))", "problem": 66, "user": "4efcac3a535de96065cf507e"}, {"code": "(fn [a b]\n  (let [r (rem a b)]\n      (if (= r 0)\n          b\n          (recur b r))))", "problem": 66, "user": "4ef992c8535dced4c769f268"}, {"code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (rem a b))))", "problem": 66, "user": "4ef4c1ff535dced4c769f23e"}, {"code": "(fn gcd [a b] \n  (if \n    (= b 0) a\n    (recur b (mod a b))))", "problem": 66, "user": "4ec18451535dfed6da9c6db0"}, {"code": "(fn f [a b] (if (= 0 b) a (f b (mod a b))))", "problem": 66, "user": "4ee9ddb8535d93acb0a66896"}, {"code": "#(loop [a % b %2] (if (zero? b) a (recur b (mod a b))))", "problem": 66, "user": "4e8768f6535dceadca469850"}, {"code": "(fn gcd [x y]\n  (cond (= 0 y) x\n        (= 0 x) y\n        true (gcd y (mod x y))))", "problem": 66, "user": "4ef6f5ea535dced4c769f250"}, {"code": "(fn [n1 n2]\n  (first\n    (filter\n      #(and (zero? (mod n1 %)) \n            (zero? (mod n2 %)))\n      (range (min n1 n2) 0 -1))))", "problem": 66, "user": "4ee67d74535d93acb0a66861"}, {"code": "(fn gcd [a b] (let [[a b] (if (> a b) [a b] [b a])] (if (zero? b) a\n (gcd b (rem a b)))))", "problem": 66, "user": "4effb663535dcb61093f6a2e"}, {"code": "(fn [& args]                                                   \n  (first \n    (for [ i (range \n               (apply min (map #(if (pos? %) % (- %)) args))\n               0 \n               -1)\n         :when (every? zero? (map #(mod % i) args)) ] i)))", "problem": 66, "user": "4ee3afde535d10e5ff6f5370"}, {"code": "(fn g [a b] \n  (if (= 0 b)\n    a\n    (g b (mod a b))))", "problem": 66, "user": "4efb2fd7535dced4c769f274"}, {"code": "(fn [a b] (loop [a a b b] (if (> b 0) (recur b (rem a b)) a)))", "problem": 66, "user": "4efd98fa535de96065cf5086"}, {"code": "(fn gcd [a b]\n  (let [x (Math/max a b)\n        y (Math/min a b)]\n    (loop [x x\n           y y]\n      (if (= 0 y)\n        x\n        (recur y (rem x y))))))", "problem": 66, "user": "4ef57a7f535dced4c769f246"}, {"code": ";Euclid's algorithm\n(fn [a b]\n  (let [greater (max a b)\n        lesser (min a b)]\n  (first (first (filter #(zero? (second %))\n    (iterate #(list (second %) (rem (first %) (second %))) [greater lesser]))))))\n\n;Doing it recursively would probably have been better than using an infinite sequence.\n;Unwrapping the result with (first (first x)) seems really sloppy", "problem": 66, "user": "4dd88803535d2dad7130b5d9"}, {"code": "#(if (zero? %2)\n    %\n    (recur %2 (mod % %2)))", "problem": 66, "user": "4ed9354f535d10e5ff6f5301"}, {"code": "(fn [a b] (loop [a a b b] (if (zero? b) a (recur b (mod a b)))))", "problem": 66, "user": "4ed55b5d535d10e5ff6f52d8"}, {"code": "(fn gcd [a b] (if (= 0 b) a (recur b (mod a b))))", "problem": 66, "user": "4f031eac535dcb61093f6a67"}, {"code": "(fn gcd [a b]\n     (if (zero? b) \n       a\n       (recur b (mod a b))))", "problem": 66, "user": "4ee9c8d0535d93acb0a66892"}, {"code": "(fn [x y]\n    (cond\n      (> x y) (recur (- x y) y)\n      (< x y) (recur x (- y x))\n      :else x))", "problem": 66, "user": "4e1f9bb5535d04ed9115e80d"}, {"code": "(fn [a b]\n  (some #(if (= 0 (mod a %)\n                  (mod b %)) %)\n    (range (inc (min a b)) 0 -1)))", "problem": 66, "user": "4db8f6c4535d1e037afb219e"}, {"code": "(fn [x y] (first (max (vec(seq(filter #(and (integer? (/ x %)) (integer? (/ y %)))     (range (min x y) 0 -1)))))))", "problem": 66, "user": "4f0376a5535dcb61093f6add"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "4f01ff83535dcb61093f6a3a"}, {"code": "(fn [a b]\n  (apply max \n    (filter #(and (integer? (/ a %)) (integer? (/ b %))) \n    (range 1 (+ 1 (min a b))))))", "problem": 66, "user": "4f017593535dcb61093f6a36"}, {"code": "(fn gcd [a b](if (zero? b) a (gcd b (mod a b))))", "problem": 66, "user": "4ed2dd98535d44c135fd68e2"}, {"code": "#(if (zero? %)\n   %2\n   (recur (mod %2 %) %))", "problem": 66, "user": "4f036d9b535dcb61093f6ac1"}, {"code": "(fn  [x y]\r\n(loop [a x b y]\r\n  (if (= b 0) a\r\n\t\t(recur b (mod a b)))))", "problem": 66, "user": "4f00c74f535dcb61093f6a31"}, {"code": "#(if (= 0 %)\n   %2\n   (recur (mod %2 %) %))", "problem": 66, "user": "4f01c938535dcb61093f6a39"}, {"code": "(fn gcd [a b]\n  (cond\n    (> b a) (gcd b a)\n    (= b 0) a\n    true (gcd b (mod a b))))", "problem": 66, "user": "4f04a06d535dcb61093f6bd9"}, {"code": "#(loop [a %1\n        b %2]\n  (if (zero? a)\n    b\n    (if (zero? b)\n      a\n      (recur b (rem a b)))))", "problem": 66, "user": "4f031639535dcb61093f6a59"}, {"code": "#(if (zero? %2) % (recur %2 (mod % %2)))", "problem": 66, "user": "4f039a8b535dcb61093f6b36"}, {"code": "(fn gcd [a b] (if (= b 0)\n              a\n              (gcd b (mod a b))))", "problem": 66, "user": "4f039f14535dcb61093f6b3e"}, {"code": "(fn [a b]\n  (if (> b  a)\n    (recur b a)\n    (if (= (rem a b) 0)\n     b\n    (recur b (rem a b)))))", "problem": 66, "user": "4e6cf521535de274dd8d818b"}, {"code": "(fn [x y]\n  (last (filter \n    #(and (zero? (mod x %)) (zero? (mod y %)))\n      (range 1 (+ (max x y) 1)))))", "problem": 66, "user": "4f040bbf535dcb61093f6b95"}, {"code": "(fn g[x y] (if (= y 0) x (g y (mod x y))))", "problem": 66, "user": "4eeb8f68535d93acb0a668a9"}, {"code": "(fn f [x y]\n  (if (= y 0)\n    x\n    (f y (mod x y))))", "problem": 66, "user": "4f062d4a535dcb61093f6c08"}, {"code": "#(if (= 0 %2)\n  %1\n  (recur %2 (rem %1 %2)))", "problem": 66, "user": "4f043ed1535dcb61093f6bb4"}, {"code": "#(if (= % 0) %2 (recur (mod %2 %) %))", "problem": 66, "user": "4f03857e535dcb61093f6b0d"}, {"code": "(fn prob-0066 [& nums]\n  (first (for [den  (range (apply max nums) 0 (- 1))\n               :let [rems (map #(rem % den) nums)]\n               :when (apply = 0 rems) ]\n           den)))", "problem": 66, "user": "4f047c07535dcb61093f6bcd"}, {"code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "4f04f847535dcb61093f6beb"}, {"code": "(fn [a b] (first (filter #(= 0 (rem a %) (rem b %)) (range (min a b) 0 -1))))", "problem": 66, "user": "4db27319535df7e46ed9b6bd"}, {"code": "(fn f [a b]\n  (if (= b 0)\n      a\n      (f b (rem a b))))", "problem": 66, "user": "4ef9b021535dced4c769f269"}, {"code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "problem": 66, "user": "4ec5a5f9535d6d7199dd36ad"}, {"code": "#(if (= % 0) %2 (recur (mod %2 %) %))", "problem": 66, "user": "4f083048535dcb61093f6c33"}, {"code": "#(if (zero? %2) % (recur %2 (mod % %2)))", "problem": 66, "user": "4f04b66b535dcb61093f6bdd"}, {"code": "(fn [a b]\n  (let [divisors (fn [n] (filter #(= (rem n %) 0) (range 1 (inc n))))]\n    (reduce max (clojure.set/intersection (set (divisors a)) (set (divisors b)))))\n)", "problem": 66, "user": "4edd9d79535d10e5ff6f532b"}, {"code": "(fn [a b]\n  (cond\n    (< a b) (recur b a)\n    (zero? (rem a b)) b\n    :else (recur b (rem a b))))", "problem": 66, "user": "4ef0eaef535dced4c769f211"}, {"code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "4f050dec535dcb61093f6bef"}, {"code": "(fn gcd [a b]\n  (let [x (min a b) y (max a b) m (mod y x)]\n    (if (= 0 m) x\n        (gcd (- y x) x))))", "problem": 66, "user": "4ee82ce9535d93acb0a6687a"}, {"code": "(fn [a b] (apply max (filter #(= 0 (rem b %) (rem a %)) (range 1 (inc (max a b))))))", "problem": 66, "user": "4f039bbe535dcb61093f6b39"}, {"code": "(fn [x y] (if (= y 0) x (if (> y x) (recur y x) (recur (- x y) y))))", "problem": 66, "user": "4ef6e689535dced4c769f24f"}, {"code": "(fn [a b]\n  (loop [c (if (< a b) b a) d (if (< a b) a b)]\n    (if (= 0 d) c (recur d (rem c d)))))", "problem": 66, "user": "4ef4ab95535dced4c769f23b"}, {"code": "(fn gcd\n  [x y] (let [a (max x y) b (min x y)](if (= 0 (rem a b))\n\t\tb\n\t\t(recur b (rem a b)))))", "problem": 66, "user": "4f047542535dcb61093f6bc7"}, {"code": "(fn gcd[a b] (if(= 0 b)a\n                (gcd b (mod a b))))", "problem": 66, "user": "4ea84f48535d7eef308072f6"}, {"code": "(fn gcd [a b]\r\n(apply max    (filter #(and (zero? (mod a %)) (zero? (mod b %)))\r\n    (range 1 (max a b)))))", "problem": 66, "user": "4ef0f1a1535dced4c769f212"}, {"code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "problem": 66, "user": "4f06dcad535dcb61093f6c16"}, {"code": "(fn f [x y] (if (zero? y) x (f y (rem x y))))", "problem": 66, "user": "4f052eaf535dcb61093f6bf3"}, {"code": "(fn [a b]\n    (if (= 0 b)\n        a\n        (recur b (mod a b))))", "problem": 66, "user": "4f0b2028535d0136e6c222ff"}, {"code": "(fn g [a b] (cond (> a b) (g b a) (= 0 a) b :t (g a (rem b a))))", "problem": 66, "user": "4f08b15b535dcb61093f6c40"}, {"code": "(fn gcd[a b]\n  (let [small (min a b)\n        big (max a b)\n        modulus (mod big small)]\n   (if (= modulus 0)\n      small\n      (recur small modulus))))", "problem": 66, "user": "4f0365fc535dcb61093f6aa4"}, {"code": "(fn [a b]\n  (if (> b a)\n      (recur b a)\n      (let [r (rem a b)]\n         (if (= r 0)\n             b\n             (recur b r)))))", "problem": 66, "user": "4eeaf88f535d93acb0a668a3"}, {"code": "(fn gcd [a b]\n  (cond (> b a) (gcd b a)\n        (= 0 b) a\n        :else (gcd b (mod a b))))", "problem": 66, "user": "4e2d84bf535deb9a81d77f09"}, {"code": "(fn [num1 num2]\n  (loop [a num1 b num2]\n    (if (zero? b)\n      a\n      (recur b (rem a b)))))", "problem": 66, "user": "4e7d1c22535db169f9c796c5"}, {"code": "(fn [a b]\n  (if (< a b) (recur b a)\n    (if (zero? b) a\n      (recur b (mod a b)))))", "problem": 66, "user": "4f03ac2d535dcb61093f6b4a"}, {"code": "(fn gcd [a b]\n  (let [divisor (min a b) dividend (max a b) remainder (rem dividend divisor)]\n    (if (zero? remainder)\n      divisor\n      (gcd remainder divisor))))", "problem": 66, "user": "4e95a440535dbda64a6f6b37"}, {"code": "(fn [a b] \n  (let [d (fn [n] (filter #(= 0 (mod n %)) (range 1 (inc n))))] \n    (last (sort (clojure.set/intersection (set (d a)) (set (d b)))))))", "problem": 66, "user": "4f037bb5535dcb61093f6aec"}, {"code": "(fn gcd [a b]\r\n    (letfn [(divides? [divisor dividend]\r\n              (zero? (rem dividend divisor)))]\r\n      (loop [x 1 curmax 1]\r\n        (if (> x (min a b))\r\n          curmax\r\n          (let [curmax\r\n                (if (and (divides? x a)\r\n                         (divides? x b))\r\n                  x\r\n                  curmax)]\r\n            (recur (inc x) curmax))))))", "problem": 66, "user": "4f039524535dcb61093f6b2c"}, {"code": "(fn gcd [a b] (if (= b 0) a (gcd b (mod a b))))", "problem": 66, "user": "4f067029535dcb61093f6c12"}, {"code": "(fn gcd [x y]\n    (if (= y 0)\n        x\n    (gcd y (mod x y))))", "problem": 66, "user": "4f03b3fb535dcb61093f6b52"}, {"code": "(fn [x y] (last (filter #(and (zero? (rem x %)) (zero? (rem y %))) (range 1 (inc (min x y))))))", "problem": 66, "user": "4f03822f535dcb61093f6b03"}, {"code": "(fn gcd [a b] \r\n(if (> (mod a b) 0)\r\n(gcd b, (mod a b))\r\nb\r\n)\r\n)", "problem": 66, "user": "4f031883535dcb61093f6a5e"}, {"code": "(fn gcd [x y]\n  (if (zero? y)\n    x\n    (recur y (mod x y))))", "problem": 66, "user": "4f0ef874535d0136e6c22328"}, {"code": "(fn gcd\n  [x y]\n  (first (filter #(= 0 (mod y %)) (filter #(= 0 (mod x %)) (range x 0 -1)))))", "problem": 66, "user": "4ec1b80c535dfed6da9c6db6"}, {"code": "(fn [x y] (last (filter #(= 0 (mod x %) (mod y %)) (range 1 (inc (min x y))))))", "problem": 66, "user": "4e95f5a5535dbda64a6f6b3b"}, {"code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "problem": 66, "user": "4ebcb8ff535dfed6da9c6d8a"}, {"code": "(fn [x y]\n     (let [max (if (> x y) y x)]\n\t\t(loop [result max]\n\t\t   (if (or (and (= 0 (mod x result)) (= 0 (mod y result))) (= 1 result)) result\n\t\t       (recur (dec result))))))", "problem": 66, "user": "4f066916535dcb61093f6c10"}, {"code": "(fn my-gcd [a b]\n  (if (= 0 (mod a b)) b\n      (my-gcd b (mod a b))))", "problem": 66, "user": "4e49a7bb535dc968683fc4c6"}, {"code": "(fn gcd [a b] (if (= 0 b) a (gcd b (mod a b))))", "problem": 66, "user": "4f0e995e535d0136e6c22326"}, {"code": "(fn [a b] \n  (loop [x (max a b) y (min a b)]\n    (if (= y 0) x (recur y (mod x y)))))", "problem": 66, "user": "4f12ab23535d64f603146429"}, {"code": "(fn [x y]\n  (last (filter #(= (rem x %) (rem y %) 0) (range 1 (max x y)))))", "problem": 66, "user": "4daeabf6edd6309eace4d15c"}, {"code": "#(loop [gcd (min % %2)]\r\n  (if (= 0 (mod % gcd) (mod %2 gcd) )\r\n    gcd\r\n    (recur (dec gcd))))", "problem": 66, "user": "4f1052b9535d64f603146418"}, {"code": "(fn [a b]\n  (if (zero? b)\n      a\n      (recur b (mod a b))))", "problem": 66, "user": "4f03154a535dcb61093f6a58"}, {"code": "(fn gcd [a b]                                                                                                                                \r\n    (cond                                                                                                                                     \r\n     (zero? a) b                                                                                                                              \r\n     (zero? b) a                                                                                                                              \r\n     :else (gcd b (mod a b))))", "problem": 66, "user": "4f149e0f535d64f60314643d"}, {"code": "(fn [n1 n2]\n  (loop [mn (min n1 n2)]\n    (if (and (zero? (mod n1 mn)) (zero? (mod n2 mn)))\n      mn\n    (recur (dec mn)))))", "problem": 66, "user": "4f128865535d64f603146428"}, {"code": "(fn [x y]\n  (cond\n    (zero? x) y\n    (zero? y) x\n    (> x y) (recur (mod x y) y)\n    :else (recur (mod y x) x)))", "problem": 66, "user": "4f0f174c535d0136e6c22330"}, {"code": "(fn [& k] ((fn [c l] \n  (if (every? #(= (rem % c) 0) l)\n    c\n    (recur (dec c) l))) (last k) k)\n)", "problem": 66, "user": "4f1595da535d64f603146444"}, {"code": "(fn [x y] \n  (let [high (max x y) low (min x y)]\n    (loop [current low]\n      (if (and (zero? (rem high current)) (zero? (rem low current)))\n        current\n        (recur (dec current))))))", "problem": 66, "user": "4e6b6294535d8ccf87e9ff11"}, {"code": "(fn gcd [a b]\n  (if (= a b) a\n  (let [c (max a b) d (min a b)]\n    (gcd (- c d) d))))", "problem": 66, "user": "4f0446f9535dcb61093f6bb8"}, {"code": "#(loop [a %\n        b %2]\n       (cond (> a b) (recur (- a b) b)\n       (> b a) (recur a (- b a))\n       :else a))", "problem": 66, "user": "4f0333f6535dcb61093f6a77"}, {"code": "(fn gcd [x y]\n    (cond\n        (= x y) x\n        (> x y) (recur (- x y) y)\n        :else   (recur (- y x)  x)))", "problem": 66, "user": "4f0660ee535dcb61093f6c0d"}, {"code": "(fn [a b] \n  (if (or (= a b) (= b 0))\n  a\n  (recur b (mod a b))))", "problem": 66, "user": "4ee4f4a9535d1385b2869d85"}, {"code": "(fn [a b]\n  (loop [x a\n         y b]\n    (if (zero? y)\n      x\n      (recur y (mod x y)))))", "problem": 66, "user": "4f08a8a2535dcb61093f6c3d"}, {"code": "(fn gcd [a b]\n(if (= b 0)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "4ec60dc4535d6d7199dd36c0"}, {"code": "(fn [a b]\n  (first\n    (filter\n      #(and\n        (= 0 (rem a %))\n        (= 0 (rem b %)))\n      (reverse (range (inc (max a b)))))))", "problem": 66, "user": "4f1b0ab3535d64f603146474"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "4dafa380edd6309eace4d17c"}, {"code": "(fn gcd [x y]\n  (if (zero? y) x (gcd y (mod x y))))", "problem": 66, "user": "4f03bf5e535dcb61093f6b5d"}, {"code": "(fn [a b]\n  (loop [x a, y b]\n    (if (= x y)\n      x\n      (if (> x y)\n        (recur y (- x y))\n        (recur x (- y x)))))\n)", "problem": 66, "user": "4f16d6ed535d64f60314644f"}, {"code": "(fn [x y]\n   (if (= 0 y) x (recur y (mod x y))))", "problem": 66, "user": "4f13047d535d64f60314642c"}, {"code": "(fn [x y] (apply max (filter #(= 0 (mod x %) (mod y %)) (range 1 (+ 1 (max (/ x 2) (/ y 2)))))))", "problem": 66, "user": "4f1b92d1535d64f60314647b"}, {"code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "problem": 66, "user": "4dbbdf86535d3f4042261ece"}, {"code": "(fn q \n  ([x y] (q (max x y) (min x y) (min x y)))\n    ([x y i] (if (or (ratio? (/ x i)) (ratio? (/ y i)))\n              (q x y (- i 1))\n              i\n              ))\n)", "problem": 66, "user": "4f2004a1535d64f6031464a7"}, {"code": "(fn [x y]\n  (loop [i (max x y)]\n    (if (every? #(zero? (mod % i)) [x y])\n      i\n      (recur (dec i)))))", "problem": 66, "user": "4dc7e7a5535d8a4b2fd74290"}, {"code": "(fn [& args] \n  (first \n    (drop-while \n      #(not (reduce (fn [r v] (and r (integer? (/ v %)))) true args))\n      (reverse (range (inc (apply min args)))))))", "problem": 66, "user": "4f0e4ebd535d0136e6c22322"}, {"code": "(fn [x y] \n  (some\n    #(when (and (= (mod x %) 0) (= (mod y %) 0)) %)\n      (reverse \n        (range 1 (inc (min x y))))))", "problem": 66, "user": "4f246938e4b0d66497709fec"}, {"code": "(fn f [a b] \n  (if (= b 0) a (f b (mod a b))))", "problem": 66, "user": "4ede361a535d10e5ff6f5332"}, {"code": "(fn gcd [x y]\n  (if (= 0 y) \n    x\n    (recur y (mod x y))))", "problem": 66, "user": "4f1c2a3a535d64f603146480"}, {"code": "(fn [a b] (loop [gcd 1 curr 1] (if (> curr a) gcd (recur (if (and (= 0 (mod a curr)) (= 0 (mod b curr))) curr gcd) (inc curr)))))", "problem": 66, "user": "4ea11921535d7eef308072af"}, {"code": "#(do % (condp = %2 4 2 5 5 7 1 33))", "problem": 66, "user": "4f0664bd535dcb61093f6c0f"}, {"code": "(fn [x y]\r\n  (cond\r\n    (> x y) (recur (- x y) y)\r\n    (< x y) (recur x (- y x))\r\n    :else x))", "problem": 66, "user": "4de760a3535d08e6dec9fdf9"}, {"code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "problem": 66, "user": "4f1fd734535d64f6031464a5"}, {"code": "(fn gcd [aa ab]\n  (let [a (max aa ab)\n        b (min aa ab)]\n    (if (= 0 (mod a b))\n      b\n      (recur b (mod a b)))))", "problem": 66, "user": "4eb02674535d7eef30807338"}, {"code": "(fn gcd [x y]\n  (first (filter #(= 0 (mod x %) (mod y %)) (range y 0 -1))))", "problem": 66, "user": "4f0d093b535d0136e6c22313"}, {"code": "(fn [x y]\n  (let [a (max x y) b (min x y)]\n    (if (zero? (mod a b))\n      b\n      (recur b (mod a b)))))", "problem": 66, "user": "4f251302e4b0d66497709ff0"}, {"code": "(fn [a b] (loop [l (max a b) s (min a b)] (if (zero? (rem l s)) s (recur s (rem l s)))))", "problem": 66, "user": "4f0cc259535d0136e6c22310"}, {"code": "(fn [a b] (if (zero? b) a (recur b (rem a b))))", "problem": 66, "user": "4dbf7a31535d020aff1edf75"}, {"code": "#(cond\n  (< % %2) (recur % (- %2 %))\n  (> % %2) (recur (- % %2) %2)\n  :else %)", "problem": 66, "user": "4f0c84ce535d0136e6c2230e"}, {"code": "(fn gcd [x y]\n  (if (= y 0) x (gcd y (mod x y))))", "problem": 66, "user": "4ec3650f535dcc7ae8597d56"}, {"code": "(fn [a b] \n  (if (zero? b)\n  a\n  (let [c (if (> a b) a b) \n        d (if (> a b) b a)]\n      (recur d (mod c d)))))", "problem": 66, "user": "4e5d2dc5535d8a8b8723a2ca"}, {"code": "(fn [x y]\n  (loop [c (first (sort (list x y))) both (list x y)]\n    (if (every? #(= 0 (mod % c)) both)\n      c\n      (recur (dec c) both))))", "problem": 66, "user": "4f26d6d9e4b0d6649770a007"}, {"code": "(fn gcn [x y]\n  (first \n  (filter (fn [candidate]\n            ( and\n              (= 0 (rem x candidate)) \n              (= 0 (rem y candidate)) \n              )) \n  (range (+ 1 x) 0 -1) ))\n)", "problem": 66, "user": "4f00e9c7535dcb61093f6a33"}, {"code": "(fn [x y]\r\n  (if (= y 0) \r\n    x\r\n    (recur y (rem x y))))", "problem": 66, "user": "4f07c8c3535dcb61093f6c2d"}, {"code": "(fn [a b]\n  (if (= a b)\n    a\n    (if (> a b)\n      (recur (- a b) b)\n      (recur (- b a) a))))", "problem": 66, "user": "4f294c48e4b0d6649770a023"}, {"code": "(fn gcd [a b] (if (= b 0) a (gcd b (mod a b))))", "problem": 66, "user": "4f0891a2535dcb61093f6c3b"}, {"code": "#(do % (condp = %2 4 2 5 5 7 1 33))", "problem": 66, "user": "4f03688d535dcb61093f6aac"}, {"code": "#(if (= % 0)\n    %2\n    (recur (mod %2 %) %))", "problem": 66, "user": "4e498df9535dc968683fc4c4"}, {"code": "(fn my-gcd [a b]\n  (if (= 0 b)\n    a\n    (my-gcd b (mod a b))))", "problem": 66, "user": "4f03ebf7535dcb61093f6b7f"}, {"code": "(fn [a b] \n  (reduce \n    #(if (and (zero? (rem a %2)) (zero? (rem b %2))) %2 %1)\n    1 (range 1 (inc (min a b)))))", "problem": 66, "user": "4f280840e4b0d6649770a010"}, {"code": "(fn ! [a b]\n   (if (= a b) a\n       (if (> a b)\n         (! (- a b) b)\n         (! a (- b a))\n         )\n       )\n   )", "problem": 66, "user": "4ea31da2535d7eef308072c1"}, {"code": "(fn [a b] (apply max (for [ i (range 1 (inc (max a b))) :when (= 0 (+ (rem a i) (rem b i))) ] i)))", "problem": 66, "user": "4f1d1d95535d64f603146488"}, {"code": "(fn [x y]\n  (if (< x y)\n    (recur y x)\n    (let [r (rem x y)]\n      (if (> r 0)\n        (recur y r)\n        y))))", "problem": 66, "user": "4e131443535d04ed9115e7d3"}, {"code": "(fn gcd [a b]\r\n  (if (zero? b) a\r\n    (gcd b (mod a b))))", "problem": 66, "user": "4f29cdc8e4b0d6649770a033"}, {"code": "(fn gcd [a b] (if (zero? b) a (gcd b (mod a b))))", "problem": 66, "user": "4f0f01c0535d0136e6c22329"}, {"code": "(fn [a b]\n  (loop [x (if (> a b) a b)\n         y (if (> a b) b a)]\n     (if (zero? y)\n        x\n        (recur y (mod x y)))))", "problem": 66, "user": "4f230dfbe4b0d66497709fe0"}, {"code": "(fn gcd [a b] (if (= b 0) a (gcd b (mod a b))))", "problem": 66, "user": "4e8ad247535d65386fec2111"}, {"code": "(fn my-gcd [a, b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "4f21838fe4b0d66497709fd2"}, {"code": "(fn [a b] (last (filter #(and (zero? (rem a %))\n                         (zero? (rem b %)))\n             (range 1 (+ 1 (max a b))))))", "problem": 66, "user": "4e6a5a32535d8ccf87e9fed0"}, {"code": "(fn ! [a b]\n  (if (= a b)\n    a\n    (let [s (sort [a b])]\n       (! (first s) (- (last s) (first s))))))", "problem": 66, "user": "4f1d1299535d64f603146487"}, {"code": "(fn [n m]\n  (loop [i (min n m)]\n    (if (and (= (mod n i) 0) (= (mod m i) 0))\n      i\n      (recur (dec i)))))", "problem": 66, "user": "4f215350e4b0d66497709fd0"}, {"code": "(fn [a b]\n      (if (= b 0)\n        a\n        (recur b (mod a b))))", "problem": 66, "user": "4f301d02e4b0d6649770a072"}, {"code": "(fn [x y]\n  (let [lower 1\n        upper (if (< x y) x y)]\n    (loop [counter lower\n           gcd lower]\n      (if (> counter upper)\n        gcd\n        (recur\n         (inc counter)\n         (if (every? (fn [z] (= (rem z counter) 0)) (list x y))\n           counter\n           gcd))))))", "problem": 66, "user": "4f31519ae4b0d6649770a086"}, {"code": "(fn gcd [a b]\n  (let [[x y] (if (< a b) [b a] [a b])\n        q (quot x y)\n        r (mod x y)]\n    (if (= r 0) y\n        (gcd y r))))", "problem": 66, "user": "4f2ef48be4b0d6649770a06c"}, {"code": "#(loop [a % b %2] (if (zero? b) a (recur b (mod a b))))", "problem": 66, "user": "4dc1bd76535d020aff1edf8d"}, {"code": "(fn [a b] (if (= b 0) a (recur b (mod a b))))", "problem": 66, "user": "4f2e0369e4b0d6649770a064"}, {"code": "(fn gcd [a b] (if (= b 0) \n  a\n  (gcd b (mod a b))))", "problem": 66, "user": "4e1248b1535d04ed9115e7cf"}, {"code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "4f2965ffe4b0d6649770a029"}, {"code": "(fn my-gcd [x y]\n  (loop [a x]\n    (if (and (= (mod x a) 0) (= (mod y a) 0))\n      a\n      (recur (- a 1)))))", "problem": 66, "user": "4f04d312535dcb61093f6be7"}, {"code": "#(cond (= %1 %2) %1\n       (> %1 %2) (recur (- %1 %2) %2)\n       :else     (recur (- %2 %1) %1))", "problem": 66, "user": "4f32a7f1e4b0d6649770a095"}, {"code": "#(if (zero? %2) % (recur %2 (mod % %2)))", "problem": 66, "user": "4f341320e4b0e243712b1eb4"}, {"code": "(fn [a b]\n  (if (= 0 b) a (recur b (mod a b))))", "problem": 66, "user": "4f038499535dcb61093f6b09"}, {"code": "(fn gcd [a b] (if (= 0 b) a (gcd b (rem a b))))", "problem": 66, "user": "4f34eb87e4b0e243712b1eba"}, {"code": "(fn [a b] (first(filter (complement nil?) (\n  for [ x (reverse (range 1 (inc (min a b))))]\n    (if (= 0 (mod a x) (mod b x)) x)\n))))", "problem": 66, "user": "4ef48422535dced4c769f236"}, {"code": "(fn gcd[a b] \n  (if (zero? b) \n    a \n    (gcd b (mod a b))\n  )\n)", "problem": 66, "user": "4f31ad57e4b0d6649770a089"}, {"code": "(fn [a b] \n  (loop [a a b b]\n    (if (= 0 b) a\n    (recur b (mod a b)))))", "problem": 66, "user": "4eb9353f535dfed6da9c6d4e"}, {"code": "(fn [a b]\n  (loop [x a y b]\n    (if (zero? y) x (recur y (mod x y)))))", "problem": 66, "user": "4f2582bae4b0d66497709ff6"}, {"code": "#(loop [m %1 n %2]\n         (if (= n 0)\n           m\n           (recur n (mod m n))))", "problem": 66, "user": "4f1bee08535d64f60314647e"}, {"code": "#(if (= 0 %2) % (recur %2 (mod % %2)))", "problem": 66, "user": "4f3444b7e4b0e243712b1eb6"}, {"code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "4f39f902e4b0e243712b1efe"}, {"code": "(fn [a b] (loop [x a y b]\n                (if (zero? y)\n                     x\n                    (recur y (rem x y)))))", "problem": 66, "user": "4f2aff4de4b0d6649770a044"}, {"code": "(fn [x1 x2]\n  ((fn [x1 x2 d]\n     (if (and (zero? (rem x1 d)) (zero? (rem x2 (quot x1 d))))\n       (quot x1 d)\n       (recur x1 x2 (inc d)))) \n    (min x1 x2) (max x1 x2) 1))", "problem": 66, "user": "4f359c7ee4b0e243712b1ec4"}, {"code": "(fn [x y]\n  (cond (zero? x) y\n        (zero? y) x\n        (> x y) (recur y (rem x y))\n        true    (recur x (rem y x))))", "problem": 66, "user": "4f38d6bbe4b0e243712b1ee2"}, {"code": "(fn gcd [& args]\n  (let [a (first (sort args))\n        b (last  (sort args))]\n    (if (= 0 (mod b a)) a\n        (gcd (- b a) a))))", "problem": 66, "user": "4edffe54535d10e5ff6f5347"}, {"code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "4f3d83b5e4b0e243712b1f69"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "4f36f5f2e4b0e243712b1ece"}, {"code": "(fn [a b]\n  (if (> b a)\n    (recur b a)\n    (loop [a a b b]\n      (if (zero? b)\n        a\n        (recur b (mod a b))))))", "problem": 66, "user": "4f28c979e4b0d6649770a01a"}, {"code": "(fn [n1 n2] \n  (let [m1 (min n1 n2) \n        en (range 1 (inc m1))\n        rem_zero #(every? zero? [(rem n1 %) (rem n2 %)]) \n        ]   \n    (apply max (filter rem_zero en))))", "problem": 66, "user": "4f29eb2ae4b0d6649770a037"}, {"code": "(fn gcd [a b]\n  (if (< a b)\n    (gcd b a)\n    (if (zero? b)\n      a\n      (gcd b (rem a b)))))", "problem": 66, "user": "4f418eaee4b0d7d3c9f3fce9"}, {"code": "(fn [a b]\n    (if (zero? b)\n        a\n        (recur b (mod a b))))", "problem": 66, "user": "4f404dcee4b0e243712b1fb0"}, {"code": "(fn [x y] (loop [a (if(> x y) y x) ] (if(and (=(rem x a) 0) (=(rem y a) 0)) a (recur (- a 1)))))", "problem": 66, "user": "4f4003d9e4b0e243712b1fa5"}, {"code": "(fn gcf \n  ([int1 int2]\n    (gcf int1 int2 int1))\n  ([int1 int2 running-total]\n    (if (every? integer? [(/ int1 running-total) (/ int2 running-total)])\n        running-total\n        (gcf int1 int2 (dec running-total)))))", "problem": 66, "user": "4e9a3a03535dbda64a6f6b70"}, {"code": "(fn [x y] \n  (some #(if (integer? (/ y %)) %) \n        (map #(/ x %) (range 1 (inc x)))))", "problem": 66, "user": "4ef77edb535dced4c769f254"}, {"code": "(fn [a b]\n  (let [[x y] (if (> a b) [a b] [b a])]\n      (if (= 0 b) a\n          (recur b (mod a b)))))", "problem": 66, "user": "4f343e60e4b0e243712b1eb5"}, {"code": "(fn gcd [p q]\r\n  (if (zero? (mod p q))\r\n             q\r\n             (gcd q (mod p q))))", "problem": 66, "user": "4f426a7ae4b0d7d3c9f3fcff"}, {"code": "(fn [i j]\n(loop [a i b j]\n(if (zero? b) a,\n(recur b (mod a b)))))", "problem": 66, "user": "4e6ec58c535d5021c1a89611"}, {"code": "#(loop [a % b %2]\n  (if (zero? b)\n     a\n     (recur b (mod a b))))", "problem": 66, "user": "4f3cc2fbe4b0e243712b1f55"}, {"code": "(fn [a, b] (loop [a a b b]\n      (if (zero? b) a,\n    (recur b (mod a b)))))", "problem": 66, "user": "4f2a7174e4b0d6649770a03e"}, {"code": "(fn gcd [a b]\n  (if (= 0 (mod a b))\n    b\n    (gcd b (mod a b))))", "problem": 66, "user": "4e1b8106535d04ed9115e801"}, {"code": "#(cond\r\n  (= %1 %2) %1\r\n  (< %1 %2) (recur %2 %1)\r\n  (= %2 0) %1\r\n  :else (recur (- %1 %2) %2))", "problem": 66, "user": "4f474f43e4b0d56e7bb92bb7"}, {"code": "(fn [x y]\n  (if (zero? y) x\n      (recur y (rem x y))))", "problem": 66, "user": "4f2baf1ae4b0d6649770a04c"}, {"code": ";; gcd(a,b) = gcd(b,a mod b)\n(fn gcd [a b]\n  (if (zero? b) a\n  (gcd b (mod a b))))", "problem": 66, "user": "4f17df72535d64f603146458"}, {"code": "#(if (> %1 %2)\n  (if (pos? %2)\n    (recur %2 (mod %1 %2))\n    %1\n  )\n  (recur %2 %1))", "problem": 66, "user": "4f141dee535d64f603146434"}, {"code": "(fn [a b]\n  (first\n    (filter #(= 0 (mod a %) (mod b %)) (range a 0 -1))))", "problem": 66, "user": "4f38b7d9e4b0e243712b1ee0"}, {"code": "(fn [x y]\r\n  (last (sort (clojure.set/intersection\r\n    (set (filter #(zero? (rem x %)) (range 1 (inc x))))\r\n    (set (filter #(zero? (rem y %)) (range 1 (inc y))))))))", "problem": 66, "user": "4f3c772de4b0e243712b1f4c"}, {"code": "(fn [x y]\n  (if (zero? y)\n    x\n    (recur y (mod x y))))", "problem": 66, "user": "4f4ba29ae4b03ad3f0c10c7a"}, {"code": "(fn [x y] (if (zero? y) x (recur y (mod x y))))", "problem": 66, "user": "4f4ac35ae4b0d56e7bb92c18"}, {"code": "(fn gcd\r\n  [a b]\r\n  (if (= 0 (mod a b))\r\n    b\r\n    (gcd b (mod a b))))", "problem": 66, "user": "4f17ab99535d64f603146457"}, {"code": "#(if (zero? (mod %1 %2)) %2 (recur %2 (mod %1 %2)))", "problem": 66, "user": "4efd8b67535de96065cf5085"}, {"code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (rem a b))))", "problem": 66, "user": "4f1684c7535d64f60314644b"}, {"code": "(fn [x y]\n  (cond\n    (> y x)   (recur y x)\n    (zero? y) x\n    :else     (recur y (mod x y))))", "problem": 66, "user": "4f4e91a9e4b03ad3f0c10cca"}, {"code": "(fn [a b] (first (filter (fn [n] (and (= 0 (mod b n)) (= 0 (mod a n)))) (let [d (max a b)] (range (/ (if (odd? d) (inc d) d) 2) 0 -1 )))))", "problem": 66, "user": "4f3ec266e4b0e243712b1f8c"}, {"code": "(fn gcd [a b]\n  (if (= b 0)\n      a\n      (gcd b (rem a b))))", "problem": 66, "user": "4eb66737535d7eef3080736b"}, {"code": "(fn gcd [a b]\n  (loop [a_ a b_ b]\n    (cond\n      (zero? a_) b_\n      (zero? b_) a_\n      (= a_ b_) a_\n      (> a_ b_) (recur (- a_  b_) b_)\n      :else (recur a_ (- b_ a_)))))", "problem": 66, "user": "4f50c414e4b03ad3f0c10d0d"}, {"code": "(fn gcd [x y]\n  (if (zero? y)\n    x\n    (recur y (mod x y))))", "problem": 66, "user": "4f4f08c8e4b03ad3f0c10cd8"}, {"code": "(fn [a b]\n  (if (== b 0)\n    a\n    (recur b, (mod a b))))", "problem": 66, "user": "4f4544e1e4b0d56e7bb92b7a"}, {"code": "(fn gcd\n  [u v]\n  (cond\n   (zero? u) v\n   (zero? v) u\n   (> u v)\n   (gcd (- u v) v)\n   :else\n   (gcd (- v u) u)))", "problem": 66, "user": "4db8d37d535d1e037afb219c"}, {"code": "(fn [& xs]\n       (loop [x (first xs)\n        y (last xs)]\n\t (cond\n\t  (= 0 x) y\n\t  (= 0 y) x\n\t  (> x y) (recur (rem x y) y)\n\t  (< x y) (recur (rem y x) x))))", "problem": 66, "user": "4eae2f9e535d7eef30807324"}, {"code": "(fn gcd [x y]\n  (cond (zero? x) y\n        (zero? y) x\n        (> x y) (gcd (- x y) y)\n        :else   (gcd x (- y x))))", "problem": 66, "user": "4eecc9ad535d93acb0a668b4"}, {"code": "(fn gcd [x y]\n  (let [smaller (min x y)\n        larger (max x y)]\n    (if (zero? smaller)\n      larger\n      (gcd (- larger smaller) smaller))))", "problem": 66, "user": "4f4274f2e4b0d7d3c9f3fd00"}, {"code": "#(\n  loop [a %1 b %2 n (min %1 %2)]\n    (if (and (= (rem a n) 0) (= (rem b n) 0))\n      n\n      (recur a b (dec n))\n    )\n)", "problem": 66, "user": "4f40f055e4b0e243712b1fc2"}, {"code": "(fn [a b]\n  (let [h (max a b), l (min a b)]\n    (if (zero? l)\n      h\n      (recur l (- h l)))))", "problem": 66, "user": "4f4e7c01e4b03ad3f0c10cc9"}, {"code": "(fn gcd \n    [a b]\n    (if (zero? b)\n        a\n        (recur b (mod a b))))", "problem": 66, "user": "4f3e6244e4b0e243712b1f85"}, {"code": "(fn g [a b]\n  (if (= b 0) a\n    (g b (mod a b))))", "problem": 66, "user": "4f03ba9c535dcb61093f6b58"}, {"code": "(fn [a b]\n  (let [non-zero (fn [a b]\n          (if (= 0 a) b a))\n        has-zero (fn [a b]\n          (or (= 0 a) (= 0 b)))]\n        ((fn [a b]\n          (cond\n            (has-zero a b) (non-zero a b)\n            (< a b) (recur a (rem b a))\n            true (recur (rem a b) b))) a b)))", "problem": 66, "user": "4f047902535dcb61093f6bcc"}, {"code": "(fn gcd [a b]\n  (if (zero? b) a (gcd b (mod a b))))", "problem": 66, "user": "4f4c6b21e4b03ad3f0c10c8f"}, {"code": "(fn cd [a b] (if (zero? b) a, \n(cd b (mod a b))))", "problem": 66, "user": "4e8ad1d2535d65386fec2110"}, {"code": "(fn [a b]\r\n    (if (zero? b)\r\n      a\r\n      (recur b (mod a b))))", "problem": 66, "user": "4f047177535dcb61093f6bc6"}, {"code": "(fn gcd [a b]\n  (if (== 0 a) b\n    (if (> a b) (recur b a)\n      (recur a (- b a)))))", "problem": 66, "user": "4f569218e4b0a7574ea71826"}, {"code": "(fn gcd [a b] (if (zero? b)\n                  a \n                  (gcd b (mod a b))))", "problem": 66, "user": "4f567cdbe4b0a7574ea71824"}, {"code": "#(if (= 0 %2) %1 (recur %2 (rem % %2)))", "problem": 66, "user": "4f4f0287e4b03ad3f0c10cd7"}, {"code": "(fn [a b]\n    (if (zero? b) a\n      (recur b (mod a b))))", "problem": 66, "user": "4db2f208535df7e46ed9b6c9"}, {"code": "(fn [a b] (loop [x a y b] (if (= y 0) x (recur y (rem x y)))))", "problem": 66, "user": "4f4c8faae4b03ad3f0c10c93"}, {"code": "(fn [a b] (if (= b 0) a (recur b (mod a b))))", "problem": 66, "user": "4f569a3ce4b0a7574ea71828"}, {"code": "(fn gcd [a b]\r\n  (if (= b 0) a\r\n      (recur b (rem a b))))", "problem": 66, "user": "4f500769e4b03ad3f0c10cf8"}, {"code": "(fn bgcd [a b]\n  (cond\n    (= a b) a,\n    (= a 0) b,\n    (= b 0) a,\n    (even? a)\n      (if\n        (odd? b)\n        (recur (bit-shift-right a 1) b)\n        (bit-shift-left (bgcd (bit-shift-right a 1) (bit-shift-right b 1)) 1)),\n    (even? b) (recur a (bit-shift-right b 1)),\n      (> a b) (recur (bit-shift-right (- a b) 1) b),\n    :else (recur (bit-shift-right (- b a) 1) a)))", "problem": 66, "user": "4f5c0549e4b0030a34fb2b1a"}, {"code": "(fn [x y]\n   (cond\n     (> x y) (recur (- x y) y)\n     (< x y) (recur x (- y x))\n     :else x))", "problem": 66, "user": "4db6ce85535d1e037afb217f"}, {"code": "(fn [a b]\n  (letfn [(gcd [a b]\n            (if (zero? b)\n              a\n              (recur b (mod a b))))]\n    (gcd a b)))", "problem": 66, "user": "4f2893d0e4b0d6649770a019"}, {"code": "#(if (= %2 0) %1 (recur %2 (rem %1 %2)))", "problem": 66, "user": "4f5cc3b8e4b0030a34fb2b2b"}, {"code": "(fn [a b] (if (= b 0) a (recur b (rem a b))))", "problem": 66, "user": "4f51e8a4e4b03ad3f0c10d2d"}, {"code": "(fn [a b]\n  (loop [x a\n         y b]\n     (let [maxv (if (> x y) x y)\n           minv (if (> x y) y x)]\n       (if (= 0 minv) maxv\n          (recur (- maxv minv) minv)))))", "problem": 66, "user": "4f036fb3535dcb61093f6ac8"}, {"code": "(fn [a b]\n  (apply max (filter #(and (zero? (mod a %)) (zero? (mod b %))) (range 1 (max a b)))))", "problem": 66, "user": "4dd9d299535d2dad7130b5dd"}, {"code": "#((fn nzd [x y d] (if (= 0 (mod x d) (mod y d))\n                      d\n                      (nzd x y (dec d)))) %1 %2 (min %1 %2))", "problem": 66, "user": "4f547d2ce4b0a7574ea717e3"}, {"code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "problem": 66, "user": "4f57a153e4b0a7574ea7183a"}, {"code": "(fn [a b]\n  (if (zero? b) a\n    (recur b (mod a b))))", "problem": 66, "user": "4ed60c9c535d10e5ff6f52dd"}, {"code": "#(if (zero? %) %2 (recur (mod %2 %) %))", "problem": 66, "user": "4f6160a7e4b0defedf855fbe"}, {"code": "(fn [a b]\n  (loop [ap a bp b]\n    (if (= bp 0)\n      ap\n      (recur bp (mod ap bp)))))", "problem": 66, "user": "4e7f5a0b535db966e863cc41"}, {"code": "#(if (zero? %2) % (recur %2 (mod % %2)))", "problem": 66, "user": "4f04256d535dcb61093f6ba7"}, {"code": "(fn [a b]\n  (loop [a a b b]\n    (cond\n      (= a b) a\n      (< a b) (recur a (- b a))\n      :else (recur (- a b) b))))", "problem": 66, "user": "4e568873535d8a8b8723a283"}, {"code": "(fn gcd [p1 p2]\r\n   (loop [a p1 b p2]\r\n     (if (zero? b)\r\n       a\r\n       (recur b (mod a b)))))", "problem": 66, "user": "4f629697e4b0defedf855fd6"}, {"code": "(fn gcd [a b]\n  (last (filter\n    (fn [n]\n      (and\n        (= 0 (mod a n))\n        (= 0 (mod b n))))\n    (range 1 (+ 1 (max a b))))))", "problem": 66, "user": "4f559d2ce4b0a7574ea71808"}, {"code": "(fn [x y]\n  (last (for [c (range 1 (+ (max x y) 1))\n        \t:let [d1 (mod x c)\n\t               d2 (mod y c)]\n\t         :when (and (zero? d1) (zero? d2))]\n\t      c)))", "problem": 66, "user": "4f63777be4b0defedf855fe4"}, {"code": "(fn gcd [x y] (if (= y 0) x (gcd y (rem x y))))", "problem": 66, "user": "4f565bebe4b0a7574ea7181e"}, {"code": "(fn [a b]\r\n      (let [re (rem a b)]\r\n\t\t (if (zero? re)\r\n\t\t     b\r\n\t\t     (recur b re))))", "problem": 66, "user": "4f4ec77ae4b03ad3f0c10cd0"}, {"code": "(fn [a b]\n  (cond (= a b) a,\n        (> a b) (recur (- a b) b),\n        (< a b) (recur (- b a) a)))", "problem": 66, "user": "4f62b29ce4b0defedf855fd9"}, {"code": "(fn gcd [a b] \n  (cond \n    (= a b) a \n    (> a b) (recur (- a b) b) \n    :else   (recur a (- b a))))", "problem": 66, "user": "4f58fe71e4b0a7574ea7185f"}, {"code": "#( loop [a % b %2 c (min % %2)] (\r\n   if (zero? (+ (mod a c) (mod b c)))\r\n     c\r\n     (recur a b (dec c))))", "problem": 66, "user": "4ed845a8535d10e5ff6f52f8"}, {"code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "4eccb190535d23f0362276fe"}, {"code": "(fn gcd [m n]\n  (cond\n    (= m n) m\n    (= m 0) n\n    (= n 0) m\n    (> m n) (gcd n (- m n))\n    (< m n) (gcd m (- n m))))", "problem": 66, "user": "4f504739e4b03ad3f0c10d00"}, {"code": "(fn g [a b]\n  (if (= 0 b)\n    a\n    (g b (mod a b))))", "problem": 66, "user": "4f6fbb68e4b07046d9f4efeb"}, {"code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "4f70183ee4b07046d9f4eff3"}, {"code": "(fn gcd [a b] (if (= 0 b) a (gcd b (mod a b))))", "problem": 66, "user": "4f6b4237e4b07046d9f4efa9"}, {"code": "#(apply max (for [x  [%] y [%2] z (range 1 (+ 1 (min % %2)) ) :when (= 0 (mod x z) (mod y z))] z))", "problem": 66, "user": "4f4bd422e4b03ad3f0c10c7e"}, {"code": "#(loop [x % y %2]\r\n      (if (= (rem x y) 0)\r\n        y\r\n        (recur y (rem x y))\r\n        )\r\n      )", "problem": 66, "user": "4ddc56e1535d02782fcbea04"}, {"code": "#(loop [a %1 b %2] (if (zero? b) a (recur b (rem a b))))", "problem": 66, "user": "4f5edeb0e4b0030a34fb2b57"}, {"code": "(fn gcd[a b]\r\n  (loop [n1 (max a b), n2 (min a b)]\r\n    (let [m (mod n1 n2)]\r\n      (if (= m 0)\r\n        n2\r\n       (recur n2 m)\r\n       )\r\n      )\r\n   )\r\n)", "problem": 66, "user": "4f6d9d7ee4b07046d9f4efcd"}, {"code": "(fn f [x y] (if (= y 0) x (f y (mod x y))))", "problem": 66, "user": "4eb298c1535d7eef3080734b"}, {"code": "#(let [vmin (min % %2) \n       vmax (max % %2) \n       rmin (range vmin 0 -1)\n       modulo (map (fn [i] (list i (= (mod vmin i) (mod vmax i) 0))) rmin)]\n  (first (first (filter last modulo))))", "problem": 66, "user": "4f69f34fe4b07046d9f4ef90"}, {"code": "(fn gcd[a b] (if (= b 0) a (gcd b (mod a b) )))", "problem": 66, "user": "4e6279e3535d8ccf87e9fe60"}, {"code": "#(if (or (zero? %1) (zero? %2))\n    (+ %1 %2)\n    (if (> %1 %2)\n      (recur (mod %1 %2) %2)\n      (recur %1 (mod %2 %1))))", "problem": 66, "user": "4f71347ae4b07046d9f4f009"}, {"code": "#(if (= 0 %2) % (recur %2 (mod % %2)))", "problem": 66, "user": "4f6845d2e4b07046d9f4ef74"}, {"code": "(fn [a b]\n  (if (zero? b) a \n     (recur b (mod a b))))", "problem": 66, "user": "4eb8ec4a535dfed6da9c6d4b"}, {"code": "(fn gcd [a b]\n  (if (= 0 b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "4f611127e4b0defedf855fb4"}, {"code": "#(loop [a (max % %2) b (min % %2)]\n   (if(= b 0)\n      a\n      (recur b (rem a b)))\n)", "problem": 66, "user": "4f7869c2e4b0fbe0118ec589"}, {"code": "#(loop [a %1 b %2 c (max a b)] (cond (= (mod a c) (mod b c) 0) c :else (recur a b (dec c))))", "problem": 66, "user": "4f6688d6e4b07046d9f4ef5d"}, {"code": "(fn [h l]\n  (loop [a h b l]\n    (if (zero? b)\n      a\n      (recur b (mod a b)))))", "problem": 66, "user": "4f68c485e4b07046d9f4ef7c"}, {"code": "(fn [a b]\n  (let [cd? (fn [d a b] (and (zero? (mod a d)) (zero? (mod b d))))]\n    (last (filter #(cd? % a b) (range 1 (inc (min a b)))))))", "problem": 66, "user": "4e89dbce535d3e98b8023283"}, {"code": "#(loop [x (min % %2)] (if (= 0 (mod % x) (mod %2 x)) x (recur (dec x))))", "problem": 66, "user": "4f6a2ff2e4b07046d9f4ef98"}, {"code": "(fn gcd [a b]\r\n  (cond\r\n    (> b 0) (gcd b (mod a b))\r\n    (= b 0) a))", "problem": 66, "user": "4f7d5328e4b06e829148e1bf"}, {"code": "#(if (zero? %2) %1\n     (recur %2 (rem %1 %2)))", "problem": 66, "user": "4f0c4518535d0136e6c2230b"}, {"code": "(fn gcd [& nums]\n  (loop [[b a] (sort nums)]\n    (let [remainder (mod a b)]\n      (if (= remainder 0)\n        b\n        (recur [remainder b])))))", "problem": 66, "user": "4f7f0827e4b06e829148e1d5"}, {"code": "(fn gcd [n m]\n  (if (< n m)\n    (gcd m n)\n    (if (= m 0)\n      n\n      (gcd m (rem n m)))))", "problem": 66, "user": "4f7e29dde4b06e829148e1ca"}, {"code": "(fn gcd [a b]\n  (if (< a b)\n      (recur b a)\n      (if (= a b)\n          a\n          (recur b (- a b)))))", "problem": 66, "user": "4f7fc9a1e4b033992c121bee"}, {"code": "(fn [a b] (if (zero? b) a\n    (recur b (mod a b))))", "problem": 66, "user": "4f713878e4b07046d9f4f00a"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "4f49e869e4b0d56e7bb92c02"}, {"code": "(fn [a b] (cond (zero? b) a\n                (< a b) (recur b a)\n                :else (recur b (rem a b))))", "problem": 66, "user": "4f8345c6e4b033992c121c1b"}, {"code": "(fn [x y]\r\n  (loop [m (min x y) x x y y]\r\n    (if (and (zero? (rem x m)) (zero? (rem y m))) m (recur (dec m) x y))))", "problem": 66, "user": "4f7207d3e4b07046d9f4f019"}, {"code": "(fn [a b]\n  (cond\n    (> b a) (recur b a)\n    (= b 0) a\n    :else (recur b (mod a b))))", "problem": 66, "user": "4f03fb59535dcb61093f6b89"}, {"code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "4f725201e4b07046d9f4f02f"}, {"code": "(fn [a b]\n(last \n  (keep #(if (and (= 0 (mod a %1)) (= 0 (mod b %1))) %1 )\n      (range 1 (inc (Math/min a b)))\n  )\n)\n)", "problem": 66, "user": "4f7b6b90e4b06e829148e1a4"}, {"code": "(fn gcd [a b]\n       (cond\n         (= a b) a\n         (> a b) (recur (- a b) b)\n         (< a b) (recur a (- b a))))", "problem": 66, "user": "4f82e14be4b033992c121c0c"}, {"code": "(fn [x y] (first (filter #(zero? (+ (mod x %) (mod y %))) (range (min x y) 0 -1))))", "problem": 66, "user": "4e360757535deb9a81d77f32"}, {"code": "(fn gcd [a b] (let [s (min a b) l (max a b)] (if (= 0 (rem l s)) s (gcd s (rem l s)))))", "problem": 66, "user": "4dc78527535d8a4b2fd7428f"}, {"code": "(fn [a b]\n  (loop [q (max b a) r (min b a)]\n    (if (zero? r)\n      q\n      (recur r (rem q r) ))\n  )\n)", "problem": 66, "user": "4f88ae35e4b033992c121c6d"}, {"code": "(fn foo [m n] (if (< m n) (foo n m)\n              (if (= 1 n) 1\n              (if (= (rem m n) 0) n (foo n (rem m n))))))", "problem": 66, "user": "4f8b20fce4b02e764a0a5178"}, {"code": "(fn gcd [a b] \n  (cond\n    (= a b) a\n    (> a b) (gcd (- a b) b)\n    (< a b) (gcd a (- b a))\n  )\n)", "problem": 66, "user": "4f8b56dae4b02e764a0a517e"}, {"code": "(fn [a b]\n  (last (filter #(= 0 (rem a %) (rem b %)) (range 1 (+ 1 (min a b)))))\n)", "problem": 66, "user": "4f84400de4b033992c121c2e"}, {"code": "(fn [x y] (if (zero? y) x (recur y (mod x y))))", "problem": 66, "user": "4f83665ee4b033992c121c1c"}, {"code": "(fn divisor\n  [x y]\n  (if (zero? y) x (divisor y (mod x y))))", "problem": 66, "user": "4f29afc7e4b0d6649770a02e"}, {"code": "(fn gcm [a1 b1] (loop [a (max a1 b1) b (min a1 b1)] (if (= b 0) a (recur b (mod a b)))))", "problem": 66, "user": "4f03d0fe535dcb61093f6b6d"}, {"code": "(fn f [a b] (cond (= a b) a (> a b) (f (- a b) b) :e (f b a)))", "problem": 66, "user": "4f8c5f4fe4b02e764a0a5198"}, {"code": "(fn gcd [a b]\n     (if (zero? b)\n         a\n         (recur b (mod a b))))", "problem": 66, "user": "4f9120d8e4b0dcca54ed6c96"}, {"code": "(fn f [a b]\n  (if (= b 0) a\n    (f b (mod a b))))", "problem": 66, "user": "4f9597e0e4b0dcca54ed6cd4"}, {"code": "#(let [ b (max %1 %2)\n        l (min %1 %2)\n      ]\n      (reduce\n        (fn [n m]\n          (if (= (mod b m) (mod l m) 0)\n            m\n            n)\n        )\n        1\n        (range 2 (+ 1 l))\n      )\n)", "problem": 66, "user": "4f8ea1f7e4b0d4e659cdde69"}, {"code": "(letfn [(g [a b]                                                                                                                                                                                                                             \n          (if (= 0 b)                                                                                                                                                                                                                        \n            a                                                                                                                                                                                                                                \n            (g b (mod a b))))]                                                                                                                                                                                                               \n  g)", "problem": 66, "user": "4db342d7535df7e46ed9b6cd"}, {"code": "(fn [a b]\r\n\t\t(if (zero? b)\r\n\t\t\ta\r\n\t\t\t(recur b (rem a b))))", "problem": 66, "user": "4f71ba6ee4b07046d9f4f012"}, {"code": "#(if (= %2 0)\n     %\n     (recur %2 (rem % %2)))", "problem": 66, "user": "4f727023e4b07046d9f4f035"}, {"code": "#(loop [x %1 y %2]\n  (if (zero? y)\n    x\n    (recur y (mod x y))))", "problem": 66, "user": "4dc21233535d020aff1edf92"}, {"code": "(fn gcd [a b]\r\n  (letfn\r\n      [(factors [k]\r\n         (into #{} (filter #(zero? (mod k %)) (range 1 (inc k)))))]\r\n    (apply max (clojure.set/intersection (factors a) (factors b)))))", "problem": 66, "user": "4f4e4ecbe4b03ad3f0c10cbf"}, {"code": "; Euclid's algorithm\n(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "4f7f9665e4b033992c121bea"}, {"code": "(fn [a b] (if (= b 0) a (recur b (rem a b))))", "problem": 66, "user": "4f951375e4b0dcca54ed6cc8"}, {"code": "(fn [x y]\n  (first (filter\n           #(and (zero? (rem x %)) (zero? (rem y %)))\n           (range (min x y) 0 -1))))", "problem": 66, "user": "4f969214e4b0dcca54ed6cdd"}, {"code": "(fn [x y] \n  (->> (range (min x y) 0 -1) \n       (filter #(= 0 (mod x %) (mod y %))) \n      first ))", "problem": 66, "user": "4f725466e4b07046d9f4f030"}, {"code": "(fn [x y] (last (filter \n                  #(and (= 0 (mod x %)) (= 0 (mod y %)))\n                  (range 1 (+ x 1)))))", "problem": 66, "user": "4f9754d4e4b0dcca54ed6ce9"}, {"code": "(fn [a b] (last (filter #(= 0 (+ (mod a %) (mod b %))) (range 1 (max a b)))))", "problem": 66, "user": "4f689a17e4b07046d9f4ef77"}, {"code": "(fn gcd [x y]\n  (if (> x y)\n      (if (= 0 y)\n          x\n          (gcd y (mod x y)))\n      (gcd y x)))", "problem": 66, "user": "4f8ac2bde4b02e764a0a5172"}, {"code": "(fn [a b]\n  (letfn [(gcd [m n]\n            (if (zero? n) m\n              (gcd n (mod m n))))]\n  (gcd a b)))", "problem": 66, "user": "4f98ead0e4b0dcca54ed6cf8"}, {"code": "(fn [n m]\n  (if (zero? n) \n    m \n    (recur (rem m n) n)))", "problem": 66, "user": "4f991ec1e4b0dcca54ed6cfb"}, {"code": "(fn gcd [x y]                                                                                                    \n            (cond                                                                                                        \n              (= y 0) x                                                                                                  \n              (= x y) x                                                                                                  \n              (< y x) (gcd (- x y) y)                                                                                    \n              :else (gcd x (- y x))))", "problem": 66, "user": "4f748b54e4b044e54cd9a8fa"}, {"code": "(fn [x y]\n  (.gcd (bigint x) (bigint y)))", "problem": 66, "user": "4f3fb586e4b0e243712b1f9c"}, {"code": "(fn [x y] (loop [a x b y] (if (zero? b) a (recur b (mod a b)))))", "problem": 66, "user": "4f97d8f3e4b0dcca54ed6ced"}, {"code": "#(if (= 0 %) \n   %2 \n   (recur (mod %2 %) %))", "problem": 66, "user": "4f6511eee4b07046d9f4ef3a"}, {"code": "(fn gcd [a b]\n  (if (zero? b) a (gcd b (rem a b))))", "problem": 66, "user": "4f465096e4b0d56e7bb92b9a"}, {"code": "(fn [a b]\n  (let [[a b] (if (> a b) [a b] [b a])]\n    (first (filter\n            #(and (zero? (rem a %))\n                  (zero? (rem b %)))\n            (reverse (range 1 a))))))", "problem": 66, "user": "4f3cd535e4b0e243712b1f56"}, {"code": "#(if (= 0 %2) % (recur %2 (mod % %2)))", "problem": 66, "user": "4f9fe2b9e4b0dcca54ed6d40"}, {"code": "(fn [a b]\r\n    (first (drop-while \r\n             #(not (and (zero? (mod a %)) \r\n                        (zero? (mod b %))))\r\n             (range (min a b) 0 -1))))", "problem": 66, "user": "4f0da4e4535d0136e6c22319"}, {"code": "(fn [x y] (if (= 0 y) x (recur y (mod x y))))", "problem": 66, "user": "4f954dbce4b0dcca54ed6ccd"}, {"code": "(fn [m n]\n  (if (zero? n)\n    m\n    (recur n (rem m n))))", "problem": 66, "user": "4f969a66e4b0dcca54ed6cde"}, {"code": "(fn [a b]\n  (cond\n    (< a b)   (recur b a)\n    (zero? b) a\n    :else     (recur b (mod a b))))", "problem": 66, "user": "4f9d53f3e4b0dcca54ed6d21"}, {"code": "(fn pgcd [a b]\n  (if (= b 0)\n    a\n    (pgcd b (mod a b))))", "problem": 66, "user": "4f8db862e4b02e764a0a51b2"}, {"code": "(fn [a b]\n    (if (= b 0)\n      a\n      (recur b (mod a b))))", "problem": 66, "user": "4fa2fa5ee4b081705acca186"}, {"code": "(fn gcd [x y]\n  (letfn [(div [p]\n            (set (filter #(= (rem p %) 0) (range 1 (inc p)))))]\n    (let [dx (div x)]\n      (first (for [n (sort > (div y))\n                   :when (= (dx n) n)] n)))))", "problem": 66, "user": "4f890488e4b033992c121c76"}, {"code": "(fn gcd [a b]\r\n  (cond (= a 0) b\r\n        (= b 0) a\r\n        (< a b) (gcd a (- b a))\r\n        :else (gcd b (- a b))))", "problem": 66, "user": "4f7d25b4e4b06e829148e1ba"}, {"code": "(fn [x y] (last (last (take-while (fn [[m n]] (< 0 n)) (iterate (fn [[m n]] [n (rem m n)]) (sort > [x y]))))))", "problem": 66, "user": "4f9f7daae4b0dcca54ed6d37"}, {"code": "(fn [& xs]\n  (loop [d (apply max xs)]\n  (if \n    (every? #(zero? (mod % d)) xs)\n    d\n    (recur (dec d)))))", "problem": 66, "user": "4fa5406fe4b081705acca1ac"}, {"code": "#(.gcd (%1 %2) (%1 %3)) bigint", "problem": 66, "user": "4f40ccd9e4b0e243712b1fc0"}, {"code": "#(loop [n1 %1 n2 %2]\n  (cond (= n1 n2) n1\n        (< n1 n2) (recur n1 (- n2 n1))\n        :else (recur (- n1 n2) n2)))", "problem": 66, "user": "4fa0a4b1e4b0dcca54ed6d4f"}, {"code": "#(loop [x %1 y %2]\n  (if (zero? x) y\n      (recur (mod y x) x)))", "problem": 66, "user": "4fa6d532e4b081705acca1be"}, {"code": "(fn gcd [a b]\n  (cond\n    (= a b) a\n    (> a b) (gcd (- a b) b)\n    (< a b) (gcd (- b a) a)))", "problem": 66, "user": "4fa3f91fe4b081705acca196"}, {"code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "4f9acea6e4b0dcca54ed6d10"}, {"code": "(fn [a b] (last (filter #(= 0 (rem a %) (rem b %)) (range 1 (inc a)))))", "problem": 66, "user": "4fa30027e4b081705acca187"}, {"code": "(fn [a b]\n  (loop [c (min a b)]\n    (if (= 0 (rem a c) (rem b c))\n      c\n      (recur (dec c)))))", "problem": 66, "user": "4f410b63e4b0e243712b1fc5"}, {"code": ";; Using Euclid's algorithm\n(fn gcd [a b]\n  (loop [dividend (max a b)\n         divisor (min a b)\n         quotient (quot dividend divisor)\n         remainder (rem dividend divisor)]\n    (if (zero? remainder)\n      divisor\n      (recur divisor\n             remainder\n             (quot divisor remainder)\n             (rem divisor remainder)))))", "problem": 66, "user": "4fa98b72e4b081705acca1e2"}, {"code": "#(last\r\n  (for [x (range 1 (+ %1 1))\r\n        :when (= (mod %1 x) (mod %2 x) 0) ]\r\n    x\r\n  )\r\n)", "problem": 66, "user": "4e65f9d4535d8ccf87e9fe73"}, {"code": "(fn [num div]\n  ( let [ r (mod num div) n num d div]\n    (cond\n     (= r 0) d\n     (< n d) (recur num (- div r) )\n     true (recur div r))))", "problem": 66, "user": "4e86d3cf535dceadca46984c"}, {"code": "(fn [a b]\n  (loop [A a, B b]\n    (cond\n      (= 0 A) B\n      (= 0 B) A\n      (= A B) A\n      (< A B) (recur A (- B A))\n      :else (recur B (- A B)))))", "problem": 66, "user": "4faa9593e4b081705acca1f9"}, {"code": "(fn greatestCommonDivisor [a b] (loop [bestSoFar 1 toTest 2] (if (or (> toTest a) \n(> toTest b)) bestSoFar (recur (if (= 0 (rem a toTest) (rem b toTest)) toTest bestSoFar) \n(inc toTest)))))", "problem": 66, "user": "4f9336ece4b0dcca54ed6cb7"}, {"code": "(fn gcd [a b] (if (= a 0) b (recur (mod b a) a)))", "problem": 66, "user": "4fa39b3ee4b081705acca191"}, {"code": "(fn f [a b]\n  (if (= 0 b) a\n      (f b (mod a b))))", "problem": 66, "user": "4facd2fae4b081705acca22f"}, {"code": "(fn [a b]\n  (apply max\n    (filter #(and (= 0 (rem a %)) (= 0 (rem b %)))\n       (range 1 (max a b)))))", "problem": 66, "user": "4fabb1dce4b081705acca21a"}, {"code": "(fn [a b]\r\n  (dec (last (take-while\r\n               #(not (and (= (rem a %) 0) (= (rem b %) 0)))\r\n               (reverse (range (inc (max a b))))))))", "problem": 66, "user": "4facff22e4b081705acca230"}, {"code": "(fn [a b]\n  (cond (= a b) a\n        (> a b) (recur (- a b) b)\n        :else (recur a (- b a))))", "problem": 66, "user": "4fae258de4b081705acca246"}, {"code": "(fn gcd [a, b]\n  (if (= b 0)\n    a\n    (gcd b (mod a b))\n  ))", "problem": 66, "user": "4fa67030e4b081705acca1b7"}, {"code": "(fn gcd [a b] (if (zero? b) a (gcd b (mod a b))))", "problem": 66, "user": "4fab31a8e4b081705acca215"}, {"code": "(fn gcd [a b]\n  (let [r (rem a b)]\n    (if (zero? r)\n      b\n      (gcd b r))))", "problem": 66, "user": "4db3393e535df7e46ed9b6cc"}, {"code": "#(let [[l h] (sort %&)\r\n  \t   q (quot h l)\r\n\t\t   r (mod h l)]\r\n\t (if (= 0 r) l (recur [l r])))", "problem": 66, "user": "4f1abbfb535d64f60314646e"}, {"code": "(fn gcd [a b]\n  (cond\n\t\t(= a b) a\n\t\t(< b a) (gcd (- a b) b)\n\t\t(> b a) (gcd a (- b a))\n\t)\n)", "problem": 66, "user": "4faacc04e4b081705acca201"}, {"code": "(fn gcd [x y]\r\n    (loop [i 1 stop (min x y) gcd 1]\r\n    (let [j (inc i)]\r\n\t    (if (not (< i stop))\r\n\t\tgcd\r\n\t      (recur j \r\n\t\t     stop \r\n\t\t     (if (every? zero? (map #(rem % j) [x y])) j gcd ))))))", "problem": 66, "user": "4f9c4080e4b0dcca54ed6d1a"}, {"code": "(fn gcd [n m]\n  (if (zero? m)\n      n\n      (gcd m (mod n m))))", "problem": 66, "user": "4e8338d6535db62dc21a62d3"}, {"code": "(fn [a b]\n   (loop [la (reverse (filter #(= 0 (rem a %)) (range 1 (+ a 1))))\n          lb (reverse (filter #(= 0 (rem b %)) (range 1 (+ b 1))))]\n     (if (= (first la) (first lb)) (first la)\n       (recur (if (> (first la) (first lb)) (rest la) la)\n         (if (< (first la) (first lb)) (rest lb) lb))))\n\n   )", "problem": 66, "user": "4e1fe7f1535d04ed9115e810"}, {"code": "(fn gcd\n  [a b]\n  (if (= a b) a\n      (let [N (max a b) n (min a b)]\n        (recur (- N n) n))))", "problem": 66, "user": "4fadbc3fe4b081705acca23f"}, {"code": "(fn gcd [a b]\n    (cond (= a b) a\n          (< b a) (gcd (- a b) b)\n          true (gcd a (- b a))))", "problem": 66, "user": "4f17aa97535d64f603146456"}, {"code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "4f8386c5e4b033992c121c1d"}, {"code": "(fn [a b]\n  (if \n    (> b a)\n    (recur b a)\n    (if (zero? (mod a b)) b (recur b (mod a b)))))", "problem": 66, "user": "4fb2101ce4b081705acca284"}, {"code": "#(loop [a %1 b %2]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "4faec810e4b081705acca24e"}, {"code": "(fn gcd [a b]\n  (if (= b 0)\n      a\n      (gcd b (mod a b))))", "problem": 66, "user": "4f9a0064e4b0dcca54ed6d03"}, {"code": "(fn [x y]\r\n  (reduce #(if (and (= (rem (max x y) %2) 0)\r\n                    (= (rem (min x y) %2) 0))\r\n             %2\r\n             %1)\r\n          (range 1 (inc (min x y)))))", "problem": 66, "user": "4f82ed48e4b033992c121c0e"}, {"code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "4f91a38ae4b0dcca54ed6c9f"}, {"code": "(fn gcd [a b]\n  (if (zero? b) \n    a \n  (recur b (mod a b))))", "problem": 66, "user": "4eb59464535d7eef30807369"}, {"code": "(fn gcd\n [a b]\n   (cond\n    (= a b) a\n    (< a b) (gcd a (- b a))\n    (> a b) (gcd (- a b) b)\n  )\n)", "problem": 66, "user": "4f91f5b1e4b0dcca54ed6ca7"}, {"code": "(fn [x y] (cond (zero? x) y\n                (zero? y) x\n                :else (recur y (mod x y))))", "problem": 66, "user": "4fa6a491e4b081705acca1bc"}, {"code": "#(if (= %2 0)\n  %1\n  (recur %2 (rem %1 %2)))", "problem": 66, "user": "4fb54e50e4b081705acca2bb"}, {"code": "(fn gcd [a b]\n  (if (= b 0) a\n      (gcd b (mod a b))\n  )\n)", "problem": 66, "user": "4fb4d4ede4b081705acca2b1"}, {"code": "(fn gcd [a b]\n  (let [r (rem a b)]\n      (if (zero? r) \n        b\n        (gcd b r))))", "problem": 66, "user": "4fa9e9c6e4b081705acca1e9"}, {"code": "(fn gcd [a b]\n  (if (zero? b) a (gcd b (mod a b))))", "problem": 66, "user": "4e83bb61535db62dc21a62dd"}, {"code": "#(if (zero? %2) % (recur %2 (mod % %2)))", "problem": 66, "user": "4f9d8083e4b0dcca54ed6d23"}, {"code": "(fn f [a b] (if (= b 0) a (f b (rem a b))))", "problem": 66, "user": "4fb3b865e4b081705acca2a2"}, {"code": "(fn [a b] (some #(if (and (= 0 (rem a %)) (= 0 (rem b %))) % nil) (reverse(range 1 (inc (max a b))))))", "problem": 66, "user": "4fba7d1ee4b081705acca2e0"}, {"code": "(fn [a b]\n  (cond (> b a) (recur b a)\n        (zero? (rem a b)) b\n        :else (recur (- a b) b)))", "problem": 66, "user": "4f1bb9d8535d64f60314647d"}, {"code": "(fn g [a b] (if (= 0 b) a (g b (mod a b))))", "problem": 66, "user": "4fb510b5e4b081705acca2b8"}, {"code": "(fn gcd\n  [a b]\n    (if (= 0 b) a (gcd b (mod a b))))", "problem": 66, "user": "4f18677d535d64f603146459"}, {"code": "#(reduce max (filter (fn[a](and (= 0 (mod % a)) (= 0 (mod %2 a)))) (reverse (range 1 (min (inc %) (inc %2))))))", "problem": 66, "user": "4fb3dd1ee4b081705acca2a5"}, {"code": "(fn gcd [x y] \n  (let [h (max x y) l (min x y) rm (mod h l)]\n    (if (= rm 0) l (gcd h rm))))", "problem": 66, "user": "4fbfe9a4e4b081705acca31f"}, {"code": "(fn gcd [l r](cond\n              (= 0 l) r\n              (= 0 r) l\n              (= l r) r\n              (> l r) (gcd (- l r) r)\n              (> r l) (gcd (- r l) l)))", "problem": 66, "user": "4fb86dc9e4b081705acca2d8"}, {"code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "4fc0853ae4b081705acca327"}, {"code": "(fn [a b]\n   (cond\n     (> a b) (recur (- a b) b)\n     (< a b) (recur a (- b a))\n     :else a))", "problem": 66, "user": "4fbe42b7e4b081705acca30f"}, {"code": "(fn gcd [a b]\n  (cond\n    (= a b) a\n    (< b a) (gcd (- a b) b)\n    (< a b) (gcd a (- b a))))", "problem": 66, "user": "4faafccde4b081705acca209"}, {"code": "(fn gcd [a b] (if (= b 0) a (gcd b (mod a b))))", "problem": 66, "user": "4faac363e4b081705acca200"}, {"code": "#(if (zero? %2) %1,\n    (recur %2 (mod %1 %2)))", "problem": 66, "user": "4fb1d907e4b081705acca282"}, {"code": "(fn gcd [a b] (if (zero? (mod b a)) a (gcd (mod b a) a)))", "problem": 66, "user": "4fc4eadee4b081705acca353"}, {"code": "(fn [n1 n2]\r\n  (if (= n2 0)\r\n    n1\r\n    (recur n2 (mod n1 n2))))", "problem": 66, "user": "4fb37882e4b081705acca2a0"}, {"code": "(fn gcd [a b]\n  (if (= b 0) a (recur b (mod a b))))", "problem": 66, "user": "4fc8c8d8e4b0ee37620e183b"}, {"code": "(fn gcd--euclid\n  [m n] {:pre [(integer? m), (integer? n)]}\n  (cond\n    (neg? m)   (recur (- m) n)\n    (neg? n)   (recur m (- n))\n    (< m n)    (recur n m)\n    (zero? n)  m\n    :else      (recur n (mod m n))))", "problem": 66, "user": "4fc6305de4b0ee37620e180b"}, {"code": "(fn[x y](first (loop [cnt 1 acc[]](if(< (min x y) cnt) acc (recur (inc cnt)(cond (and (= 0 (mod x cnt)) (= 0 (mod y cnt)))(cons cnt acc) :else acc))))))", "problem": 66, "user": "4f32135ae4b0d6649770a08e"}, {"code": "(fn [a b]\n  (last (for [n (range 1 (inc (min a b))) \n        :when (and (= 0 (mod a n)) (= 0 (mod b n)))]\n       n)))", "problem": 66, "user": "4fc7db47e4b0ee37620e182a"}, {"code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "problem": 66, "user": "4fca1cd6e4b0ee37620e184c"}, {"code": "(fn gcd [a b] (if (= b 0)\n                 a\n                 (gcd b (mod a b))))", "problem": 66, "user": "4fcaf7a4e4b0ee37620e1857"}, {"code": "#(if (< % %2)\n(/ % (numerator (/ % %2)))\n(/ %2 (numerator (/ %2 %))))", "problem": 66, "user": "4fa9da14e4b081705acca1e7"}, {"code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (rem a b))))", "problem": 66, "user": "4f7431d2e4b044e54cd9a8f7"}, {"code": "(fn gcd [a b] (if (zero? b) a (gcd b (rem a b))))", "problem": 66, "user": "4fabbb97e4b081705acca21d"}, {"code": "(fn [a b]\n  (loop [a a b b]\n    (if (zero? b)\n      a\n      (recur b (rem a b)))))", "problem": 66, "user": "4fb4f42ae4b081705acca2b4"}, {"code": "(fn [x y] (last (sort (filter #(= (mod x %) (mod y %) 0) (range 1 (max x y))))))", "problem": 66, "user": "4fce5474e4b0d4b2a7a9d451"}, {"code": "(fn gcd [a b]\n  (cond \n   (= 0 a) b\n   (= 0 b) a\n   :default (if (< a b) (gcd a (- b a)) (gcd (- a b) b))\n  )\n)", "problem": 66, "user": "4fcad14ce4b0ee37620e1856"}, {"code": "(fn gcd [p q]\n  (if (zero? q) p (gcd q (rem p q))))", "problem": 66, "user": "4fc67081e4b0ee37620e1813"}, {"code": "#(loop [a %1 b %2]\n    (if (zero? b) a,\n    (recur b (mod a b))))", "problem": 66, "user": "4fb2f9b2e4b081705acca294"}, {"code": "(fn [a b]\n  (cond\n    (> b a) (recur b a)\n    (zero? (mod a b)) b\n    :else (recur b (rem a b))))", "problem": 66, "user": "4fbb9d80e4b081705acca2ea"}, {"code": "(fn [a b] (loop [g (min a b)] (if (= 0 (rem b g) (rem a g)) g (recur (- g 1)))))", "problem": 66, "user": "4fcebce4e4b03432b189f404"}, {"code": "#(apply max (for [x (range 1 (inc (min %1 %2)))] (if (= 0 (rem %1 x)) (if (= 0 (rem %2 x)) x 1) 1)))", "problem": 66, "user": "4f826548e4b033992c121c08"}, {"code": "(fn gcd\n  [x, y]\n  (loop [z (if (> x y) y x)]\n    (cond \n      (= z 1) 1\n      (and (= (mod x z) 0) (= (mod y z) 0)) z\n      :else (recur (dec z)))))", "problem": 66, "user": "4f8490fae4b033992c121c34"}, {"code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "problem": 66, "user": "4fc18846e4b081705acca331"}, {"code": "(fn [a b]\n  (if (zero? b) a\n    (recur b (mod a b))))", "problem": 66, "user": "4fb12b35e4b081705acca275"}, {"code": "(fn [a b]\n  (loop [a a b b]\n    (if (zero? b)\n      a\n      (recur b (mod a b)))))", "problem": 66, "user": "4ec3b393535dcc7ae8597d59"}, {"code": "(fn gcd [x y]\n  (if (= y 0) x (gcd y (mod x y))))", "problem": 66, "user": "4fa85ae4e4b081705acca1d3"}, {"code": "(fn [ i j ] \n  (let [m (min i j)] \n    ( #( if (and (= (mod i %) 0 ) (= (mod j %) 0 )) % (recur (dec %)) ) m)))", "problem": 66, "user": "4fc43a8ee4b081705acca346"}, {"code": "(fn f [a b]\n  (cond\n    (= a b) a\n    (> a b) (f (- a b) b)\n    :else   (f a (- b a))))", "problem": 66, "user": "4fd22e70e4b04c3a95aa041c"}, {"code": "(fn [a b] \r\n   (let [n (min a b)\r\n         divisors (range 1 (inc n))]\r\n     (apply max (map #(if (== 0 (mod a %) (mod b %)) % 0) divisors))))", "problem": 66, "user": "4ee77f15535d93acb0a66868"}, {"code": "#(.gcd (bigint %) (bigint %2))", "problem": 66, "user": "4fbacdbae4b081705acca2e5"}, {"code": "(fn gcd[s e] (last (filter (fn[q] (and (= 0 (mod s q)) (= 0 (mod e q)))) (range 1 (inc (/ (max s e) 2))))))", "problem": 66, "user": "4f148418535d64f60314643a"}, {"code": "#(if (= 0 %2) % (recur %2 (mod % %2)))\n\n;(fn [& a]\n;  (if (= a '(2 4)) 2\n;    (if (= a '(10 5)) 5\n;      (if (= a '(5 7)) 1\n;        33))))", "problem": 66, "user": "4fcc103fe4b0ee37620e185f"}, {"code": "(fn [ a b]\n (apply max (map #( if (= 0 (rem a %) (rem b %)) % 1) (range 2 (inc a)))))", "problem": 66, "user": "4fccdc75e4b0ee37620e186d"}, {"code": "(fn [m n] (loop [[x y] (sort [m n])] (if (= 0 x) y (recur ((comp sort list) x (rem y x))))))", "problem": 66, "user": "4faa6184e4b081705acca1f1"}, {"code": "(fn gcd\n  [x y]\n  (first (sort > (filter #(and (zero? (mod x %))\n                               (zero? (mod y %))) (range 1 (inc (min x y)))))))", "problem": 66, "user": "4fd16778e4b04c3a95aa040f"}, {"code": "(fn  [x y]\r\n  (if (= 0 y)\r\n    x\r\n    (recur y (mod x y))))", "problem": 66, "user": "4fb23582e4b081705acca28a"}, {"code": "(fn gcd [a b] (if (zero? b) a (gcd b (mod a b))))", "problem": 66, "user": "4fd96694e4b05e33b9224f37"}, {"code": "(fn gcd [x y] (if (= y 0) x (gcd y (mod x y))))", "problem": 66, "user": "4fd8544be4b0dab7d829f390"}, {"code": "#(loop [bigger %1\n         smaller %2]\n    (if (= smaller 0)\n      bigger\n      (recur smaller (mod bigger smaller))))", "problem": 66, "user": "4eef3afe535d305ff5cb7f1d"}, {"code": "(fn f [a b]\n  (if (= b 0)\n    a\n    (f b (rem a b))))", "problem": 66, "user": "4fd2789ee4b04c3a95aa0422"}, {"code": "(fn [a b]\n  (let [x (min a b),y (max a b)]\n    (last \n      (for [i (range 1 (+ 1 x))\n        :when (= (rem x i) (rem y i) 0)]\n      i))))", "problem": 66, "user": "4fda016ae4b05e33b9224f42"}, {"code": "(letfn [(gcd [a b] (if (= b 0) a (gcd b (mod a b))))] gcd)", "problem": 66, "user": "4fd91099e4b05e33b9224f32"}, {"code": "(fn [x y]\n  (loop [n (quot (max x y) 2)]\n    (if (and (zero? (mod x n)) (zero? (mod y n)))\n      n\n      (recur (dec n)))))", "problem": 66, "user": "4fc2e302e4b081705acca33a"}, {"code": "(fn [a b] \n  (last\n    (for [x (rest (range (max a b)))\n        :when (= 0 (mod a x) (mod b x))]\n        x)))", "problem": 66, "user": "4ef89fb0535dced4c769f260"}, {"code": "(fn gcd [a b]\n  (if (zero? b) a\n      (recur b (mod a b))))", "problem": 66, "user": "4fbd12a5e4b081705acca2fd"}, {"code": "(fn f [x y]\n  (if (zero? y)\n    x\n    (f y (mod x y))))", "problem": 66, "user": "4ead2841535d7eef3080731e"}, {"code": "(fn gcd [x y]\n  (if (= 0 (mod x y))\n    y\n    (recur y (mod x y))))", "problem": 66, "user": "4fc8b012e4b0ee37620e1838"}, {"code": "(fn my-gcd [dividend divisor]\n  (if (zero? (mod dividend divisor))\n    divisor\n    (my-gcd divisor (mod dividend divisor))))", "problem": 66, "user": "4fc6d2c1e4b0ee37620e181b"}, {"code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "4fd6f4d8e4b0dab7d829f37b"}, {"code": "(fn gcd [x y]\n  (cond\n    (= x 0) y\n    (< x y) (gcd x (mod y x))\n    (> x y) (gcd y x)))", "problem": 66, "user": "4fdef544e4b05e33b9224f91"}, {"code": "(fn [a b]\n    (loop [dividend  a\n           divisor   b\n           remainder (mod dividend divisor)]\n      (if (= remainder 0) divisor\n          (recur divisor\n                 remainder\n                 (mod divisor remainder)))))", "problem": 66, "user": "4f4a8707e4b0d56e7bb92c12"}, {"code": "#(let [a (min % %2) b (max % %2) r (mod b a)](if (> r 0) (recur a r) a))", "problem": 66, "user": "4dae0510c9a9d6ed4b99dc57"}, {"code": "#(if (= %2 0) \r\n  %\r\n  (recur %2 (rem % %2)))", "problem": 66, "user": "4ee6166e535d93acb0a66854"}, {"code": "(fn [a b]\n    (some #(if (and (= 0 (mod a %))\n                    (= 0 (mod b %)))\n             %\n             nil)\n          (range (max a b) 0 -1)))", "problem": 66, "user": "4dad8c92c9a9d6ed1699dc57"}, {"code": "(fn [x y] (reduce max (for [d (range 1 (+ 1 (min x y)))] (if (and (zero? (mod y d)) (zero? (mod x d))) d 0) )))", "problem": 66, "user": "4fd1fa71e4b04c3a95aa0418"}, {"code": "(fn gcd [l r]\n  (cond\n    (> l r) (gcd (- l r) r)\n    (> r l) (gcd (- r l) l)\n    (= l r) r))", "problem": 66, "user": "4fb79872e4b081705acca2d2"}, {"code": "(fn gcd [a b]\n  (if (zero? a)\n      b\n      (if (< a b)\n          (gcd a (mod b a))\n          (gcd b a))))", "problem": 66, "user": "4fdd27f3e4b05e33b9224f78"}, {"code": "#(loop [a %1 b %2] \n  (let [c (mod a b)] \n    (if (zero? c) b (recur b c))))", "problem": 66, "user": "4fba0877e4b081705acca2dd"}, {"code": "(fn gcd [m n]\r\n   (if (zero? m)\r\n       n\r\n      (recur (mod n m) m)))", "problem": 66, "user": "4fcc6cb3e4b0ee37620e1861"}, {"code": "(fn gcd [x y]\r\n  (loop [x x\r\n         y y]\r\n    (if (zero? y)\r\n      x\r\n      (recur y (mod x y)))))", "problem": 66, "user": "4fe54ee8e4b0e8f79898fec3"}, {"code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (rem a b))))", "problem": 66, "user": "4fccb31be4b0ee37620e1868"}, {"code": "(fn gcd [a b]\n  (if (= a b)\n    a\n    (let [big (max a b)\n          small (min a b)]\n      (recur small (- big small)))))", "problem": 66, "user": "4e5fdd68535d8ccf87e9fe4f"}, {"code": "(fn gcd [x y]\n  (let [a (map #(when (= (mod x %) 0) %) (range 1 (inc x)))\n        b (map #(when (= (mod y %) 0) %) (range 1 (inc y)))]\n        (->>\n          (clojure.set/intersection (into #{} a) (into #{} b))\n          (filter (complement nil?))\n          (reduce max))))", "problem": 66, "user": "4fc93728e4b0ee37620e1844"}, {"code": "(fn [a b] \n  (if (= a b) \n    a \n    (let [mi (min a b) ma (max a b)] \n      (recur mi (- ma mi)))))", "problem": 66, "user": "4fd7962ee4b0dab7d829f385"}, {"code": "(fn gcd [a b]\n  (cond\n   (= a b) a\n   (> a b) (gcd b a)\n   :else (gcd a (- b a))))", "problem": 66, "user": "4fde492be4b05e33b9224f8a"}, {"code": "(fn [frs snd]\n  (let [smalest (min frs snd)\n        is-divisor? (fn [n div] (= (mod n div) 0))]\n    (loop [div smalest]\n      (  \n        if(and (is-divisor? frs div) (is-divisor? snd div))\n          div\n        (recur (dec div))\n      )\n    )\n  )\n)", "problem": 66, "user": "4fe588b6e4b0e8f79898fec5"}, {"code": "(fn [A B] (loop [a A b B] (if (= a b) a (if (< b a) (recur (- a b) b) (recur a (- b a))))))", "problem": 66, "user": "4fc52d79e4b081705acca386"}, {"code": "#(last (apply sorted-set(apply clojure.set/intersection\r\n  (map (fn [x] (into #{} \r\n    (filter (fn [e] (zero? (mod x e)))(range 1 (inc x))))) [% %2])\r\n)))", "problem": 66, "user": "4fca2ef0e4b0ee37620e184e"}, {"code": "(fn[a b]\n    (first (filter\n            #(and\n              (= 0 (mod a %))\n              (= 0 (mod b %)))\n            (reverse (range\n                      (+ 1\n                         (min a b)))))))", "problem": 66, "user": "4f463dfde4b0d56e7bb92b99"}, {"code": "(fn [a b]\n    (if (= b 0)\n      a\n      (recur b (mod a b))))", "problem": 66, "user": "4fe8aef4e4b07c9f6fd12c6c"}, {"code": "(fn gcd [a b]\n   (cond (zero? a) b\n         (zero? b) a\n         (> a b) (recur b (mod a b))\n         :else (recur a (mod b a))))", "problem": 66, "user": "4fe8d862e4b0547ebccb2428"}, {"code": "(fn gcd\n          [x y]\n        (apply min (last (take-while #(not= 0 (last %)) (iterate (fn [[a b]] [(min a b) (rem (max a b) (min a b))]) [x y])))))", "problem": 66, "user": "4fb591aee4b081705acca2c0"}, {"code": "(fn [x y]\n  (if (= y 0) x\n(recur y (mod x y))))", "problem": 66, "user": "4fdf5403e4b05e33b9224f98"}, {"code": "(fn [a b]\n  (cond (= a b) a\n        (> a b) (recur (- a b) b)\n        (< a b) (recur a (- b a))))", "problem": 66, "user": "4fe84c74e4b07c9f6fd12c3c"}, {"code": "(fn [a b] (let [g (max a b) l (min a b)] (if (zero? b) a (recur (- g l) l))))", "problem": 66, "user": "4feada56e4b0140c20fb9c11"}, {"code": "(fn [a b]\n  (let [c (max a b) d (min a b)]\n    (if (= 0 d)\n      c\n      (recur d (rem c d)))))", "problem": 66, "user": "4fe9d647e4b0547ebccb2472"}, {"code": "(fn gcd [x y]\n  (loop [a x b y]\n    (let [m (mod a b)]\n      (if (== 0 m)\n        b\n        (recur b m)))))", "problem": 66, "user": "4f8bbb27e4b02e764a0a5182"}, {"code": "#(loop [n %1 m %2]\n  (if (= m 0)\n     n\n     (recur m (mod n m))))", "problem": 66, "user": "4fe87e56e4b07c9f6fd12c40"}, {"code": "(fn gcd [x y]\n(loop [currenthighest 1 counter 2]\n  (cond (or (> counter x) (> counter y)) currenthighest\n        (and (= 0 (rem x counter)) (= 0 (rem y counter))) (recur counter (inc counter))\n        :else (recur currenthighest (inc counter)))))", "problem": 66, "user": "4f515bd3e4b03ad3f0c10d1f"}, {"code": "#(first (reverse (sort\n   (map (fn [& args] (when \n  \t\t (and  (= 0 (rem % (last args))) (= 0 (rem %2 (last args))))\n\t\t       (first args)))\n   (rest (range (+ 1 (min % %2))))))))", "problem": 66, "user": "4fdf2b50e4b05e33b9224f93"}, {"code": "(fn [a b] (if (= b 0) a (recur b (mod a b) ) ) )", "problem": 66, "user": "4fea2de5e4b0140c20fb9bfe"}, {"code": "(fn [x y]\n  (loop [n (min x y)]\n    (if (zero? (+ (mod x n) (mod y n)))\n      n\n      (recur (dec n)))))", "problem": 66, "user": "4fe1597fe4b0dd6cd5ce3633"}, {"code": "(fn[a b]\n  (let [dv (fn[x] (set (filter #(zero? (rem x %)) (range 1 (inc x)) )))]\n       (apply max (clojure.set/intersection (dv a) (dv b)))))", "problem": 66, "user": "4f05ea25535dcb61093f6c02"}, {"code": "(fn [a b]\r\n  (let [c (if (< a b) a b)]\r\n    (loop [d c]\r\n      (if (= 0 (mod a d) (mod b d))\r\n        d\r\n        (recur (dec d))))))", "problem": 66, "user": "4fdf4e2be4b05e33b9224f96"}, {"code": "(fn [m n]\n  (let [a (max m n)\n        b (min m n)]\n    (if (zero? (mod a b))\n      b\n      (recur b (mod a b)))))", "problem": 66, "user": "4f8aa1c1e4b02e764a0a516e"}, {"code": "(fn gcd [x y]\r\n   ((fn [d] \r\n      (if (and (= 0 (mod x d)) (= 0 (mod y d)))\r\n        d\r\n        (recur (dec d)))) (min x y)))", "problem": 66, "user": "4ff07688e4b0678c553fc324"}, {"code": "#(if (= 0 %2)\n      %\n      (recur %2 (mod % %2)))", "problem": 66, "user": "4ff304f4e4b0678c553fc343"}, {"code": "#_ (fn gcd [low high]\n  (let [r (rem high low)]\n    (if (= r 0)\n      low\n      (gcd r low))))\n\n#_ #(let [r (rem %2 %1)]\n  (if (= r 0) %1 (recur r %1)))\n\n#(if (zero? %1) %2 (recur (rem %2 %1) %1))", "problem": 66, "user": "4fe8b6afe4b07c9f6fd12c76"}, {"code": "(fn gcd [a b]\r\n  (loop [a a b b]\r\n    (if (= b 0)\r\n      a\r\n      (recur b (mod a b)))))", "problem": 66, "user": "4fd170fce4b04c3a95aa0411"}, {"code": "#(if (= 0 %2) % (recur %2 (mod % %2)))", "problem": 66, "user": "4fe9de74e4b0547ebccb2475"}, {"code": "(fn [a b] (apply max (filter #(and (= 0 (mod a %)) (= 0 (mod b %))) (range 1 (inc (min a b))))))", "problem": 66, "user": "4da8dd6e30acd6ed12482a68"}, {"code": "(fn gcd [x y]\n  (let [r (mod x y)]\n    (if (= r 0)\n      y\n      (gcd y r))))", "problem": 66, "user": "4ff5744ae4b0678c553fc36a"}, {"code": "(fn gcd\r\n  [x y]\r\n  (cond\r\n    (= y 0) x\r\n    (= x 0) y\r\n    (> x y) (gcd y (mod x y))\r\n    (> y x) (gcd x (mod y x))))", "problem": 66, "user": "4f73f78de4b044e54cd9a8f3"}, {"code": "#(if (= %2 0) %1 (recur %2 (mod %1 %2)))", "problem": 66, "user": "4ff4c9dae4b0678c553fc360"}, {"code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))\n  )\n)", "problem": 66, "user": "4fc7b079e4b0ee37620e1827"}, {"code": "(fn [a b] (->>\n            (-> b (min a) inc (range 0 -1))\n            (filter\n              #(and (-> a (rem %) zero?) (-> b (rem %) zero?)))\n            first))", "problem": 66, "user": "4ff6aea8e4b0678c553fc381"}, {"code": "(fn [a b]\r\n  (if (> b a)\r\n    (recur b a)\r\n    (let [r (mod a b)]\r\n      (if (= r 0)\r\n        b\r\n        (recur b r)))))", "problem": 66, "user": "4ff201d7e4b0678c553fc330"}, {"code": "(fn gcd [a b]\n(let [dividend (max a b) divisor (min a b)]\n(if (= 0 (rem dividend divisor))\ndivisor\n(gcd divisor (rem dividend divisor)))))", "problem": 66, "user": "4fe15ffee4b0dd6cd5ce3634"}, {"code": "(fn divisor [a b]\n  (let [r (range 1 (inc (min a b)))]\n       (last (filter #(and (= (rem a %) 0)\n                           (= (rem b %) 0))\n                     r))))", "problem": 66, "user": "4feff3b6e4b0678c553fc31e"}, {"code": "(fn gcd [a b]\n  (cond \n    (= a b) a\n    (> a b) (gcd (- a b) b)\n    (< a b) (gcd (- b a) a)))", "problem": 66, "user": "4ff743fde4b0678c553fc38d"}, {"code": "(fn [a b]\n  (if (= a b)\n    a\n    (if (> a b)\n      (recur (- a b) b)\n      (recur a (- b a)))))", "problem": 66, "user": "4ff9d4e5e4b0678c553fc3b0"}, {"code": "#(loop [a %1 b %2] (if\n  (zero? b)\n  a\n  (recur b (mod a b))))", "problem": 66, "user": "4ff889f2e4b0678c553fc399"}, {"code": "#(loop [c (min % %2) mi (min % %2) ma (max % %2)]\n  \t(if (or (= c 1) (and (= (rem mi c) 0) (= (rem ma c) 0)))\n          c\n          (recur (dec c) mi ma))\n       )", "problem": 66, "user": "4fe868d1e4b07c9f6fd12c3f"}, {"code": "(fn gcd [a b]\n  (if (> b a)\n    (gcd b a)\n    (if (= a b)\n      a\n      (gcd (- a b) b))))", "problem": 66, "user": "4fe83efbe4b07c9f6fd12c3b"}, {"code": "#(let [s (min % %2) b (max % %2)]\n  (if (= s 0) b (recur (- b s) s)))", "problem": 66, "user": "4ff82b00e4b0678c553fc395"}, {"code": "(fn [a b]\n  (let [x (max a b)\n        n (min a b)]\n    (loop [xn x\n           nn n]\n      (let [m (mod xn nn)]\n        (if (= m 0) nn (recur nn m))))))", "problem": 66, "user": "4f03a3df535dcb61093f6b45"}, {"code": "(fn gcd [a b]\n  (let [r (mod a b)]\n\t\t(if (zero? r)\n\t\t\tb\n\t\t\t(gcd b r))))", "problem": 66, "user": "4fb57e06e4b081705acca2bf"}, {"code": "(fn[m n](letfn[(dodiv[x y] (cond (= 0 (rem x y)) y :else (dodiv y (rem x y))))] (dodiv m n)))", "problem": 66, "user": "4fba77fae4b081705acca2df"}, {"code": "#(if (= 0 %) %2 (recur (mod %2 %) %))", "problem": 66, "user": "4e57d1e2535d8a8b8723a289"}, {"code": "#(first (for [i (reverse (range (max % %2)))\n             :when (and (= (mod % i) 0) (= (mod %2 i) 0))] i))", "problem": 66, "user": "4db2cd84535df7e46ed9b6c6"}, {"code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "4ff9cfd6e4b0678c553fc3af"}, {"code": "(fn [x y]\n  (let [a (max x y) b (min x y) r (rem a b)]\n    (loop [a a b b r r]\n      (if (zero? r)\n          b\n          (recur b r (rem b r))))))", "problem": 66, "user": "4fdb02aae4b05e33b9224f56"}, {"code": "(fn gcd [x y]\n  (if (zero? y)\n    x\n    (recur y (rem x y))))", "problem": 66, "user": "4daf8e61edd6309eace4d179"}, {"code": "#(cond\n   (< % %2) (recur (- %2 %) %)\n   (> % %2) (recur (- % %2) %2)\n   :else %)", "problem": 66, "user": "4ff83003e4b0678c553fc396"}, {"code": "(fn gcd [a b] (let [h (max a b) l (min a b)] (if (= 0 (rem h l)) l (gcd l (- h l)))))", "problem": 66, "user": "4ff67852e4b0678c553fc37e"}, {"code": "(fn [a b] (loop [x (max a b) y (min a b)]\n  (let [r (rem x y)]\n    (if (= r 0) y (recur y r)))\n))", "problem": 66, "user": "4ffb38e8e4b0678c553fc3c6"}, {"code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "4fc50bcbe4b081705acca375"}, {"code": "(fn gcd [a b]                                                           \n            (cond                                                               \n              (= b 0) a                                                         \n              :else (gcd b (mod a b))))", "problem": 66, "user": "4eed6b32535d93acb0a668bc"}, {"code": "(fn [a b]\n  (apply max (clojure.set/intersection\n   (into #{} (filter #(= (rem a %) 0) (range 1 (inc a))))\n   (into #{} (filter #(= (rem b %) 0) (range 1 (inc b)))))))", "problem": 66, "user": "4ec9549d535d6d7199dd36fe"}, {"code": "(fn [a b]\n  (let [smallest (min a b)\n        divisible? (fn [n d] (zero? (mod n d)))]\n    (first (filter #(and (divisible?  a %) (divisible?  b %)) (iterate dec smallest)))))", "problem": 66, "user": "5003deb9e4b0678c553fc445"}, {"code": "(fn [a b]\n  (some #(when (= 0 (rem a %) (rem b %)) %)\n    (range (min a b) 0 -1)))", "problem": 66, "user": "4fe89db2e4b07c9f6fd12c59"}, {"code": "(fn gcd [a b] (if (= b 0) a (gcd b (mod a b))))", "problem": 66, "user": "5002b6e5e4b0678c553fc42c"}, {"code": "(fn gcd\r\n  [x y]\r\n  (let [a (min x y)\r\n        b (max x y)\r\n        c (- b a)]\r\n    (if (= a c)\r\n      a\r\n      (recur a c))))", "problem": 66, "user": "500159b3e4b0678c553fc419"}, {"code": "(fn [x y]\r\n  (loop [z (quot (max x y) 2)]\r\n    (if (= (rem x z) (rem y z) 0) z\r\n      (recur (dec z)))))", "problem": 66, "user": "50045388e4b0678c553fc44e"}, {"code": "(fn gcd [m n]\r\n  (cond\r\n    (= m n) m\r\n    (= n 0) m\r\n    (= m 0) n\r\n    (or (= n 1) (= m 1)) 1\r\n    (and (even? m) (even? n)) (* 2 (gcd (/ m 2) (/ n 2)))\r\n    (even? m) (gcd (/ m 2) n)\r\n    (even? n) (gcd m (/ n 2))\r\n    (> n m) (gcd (/ (- n m) 2) m)\r\n    :else (gcd (/ (- m n) 2) n)))", "problem": 66, "user": "5003ee7de4b0678c553fc446"}, {"code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "problem": 66, "user": "5003bb77e4b0678c553fc442"}, {"code": "(fn this [x y]\n       (let [a (max x y)\n             b (min x y)]\n         (if (= b 0)\n           a\n           (this b (mod a b)))))", "problem": 66, "user": "4f2e205ae4b0d6649770a065"}, {"code": "(fn [a b]\n  (let [bi #(new BigInteger (str %))]\n    (.gcd (bi a) (bi b))))", "problem": 66, "user": "500933a6e4b046cdb195e074"}, {"code": "(fn [a b]\n  (loop [x (min a b) y (max a b)]\n    (if (zero? x)\n      y\n      (recur (rem y x) x))))", "problem": 66, "user": "4fd2e5d8e4b04c3a95aa0427"}, {"code": "(fn gcd [left right]\n    (if (= left right)\n      left\n      (if (> left right)\n        (recur (- left right) right)\n        (recur left (- right left)))))", "problem": 66, "user": "50057f23e4b0678c553fc466"}, {"code": "(fn gcd [a b] (if (= b 0) a (gcd b (mod a b))))", "problem": 66, "user": "500cb910e4b05f7c30cfa698"}, {"code": "(fn gcd [a b]\n  (if (= a b)\n    a\n  (let [x (max a b)\n      y (min a b)]\n    (gcd (- x y) y))))", "problem": 66, "user": "4f42ae16e4b0d7d3c9f3fd09"}, {"code": "(fn [a b]\n  (cond (< a b) (recur b a)\n        (zero? b) a\n        :else (recur b (mod a b))))", "problem": 66, "user": "500d8c49e4b07ccb9a7ddb00"}, {"code": "(fn gcd ([x y] (gcd x y (min x y)))\n  ([x y z] (if (= 0 (mod x z) (mod y z)) z (gcd x y (dec z)))))", "problem": 66, "user": "4f3e5e87e4b0e243712b1f83"}, {"code": "(fn [x y]\n  (if (= y 0)\n      x\n      (recur y (mod x y))))", "problem": 66, "user": "4f7ab8c7e4b06e829148e19c"}, {"code": "(fn [a b]\n             (first\n              (filter\n               #(and (zero? (mod a %)) (zero? (mod b %)))\n               (range (min a b) 0 -1))) )", "problem": 66, "user": "500ea957e4b00fff93030f9b"}, {"code": "(fn [a b]\n  (if (<= b 0)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "4ff355a1e4b0678c553fc34d"}, {"code": "(fn gcd\n  ([n1 n2] (gcd n1 n2 1 1))\n  ([n1 n2 d gd]\n    (if (and (> (* 2 d) n1) (> (* 2 d) n2))\n      gd\n      (if (and (= (rem n1 d) 0) (= (rem n2 d) 0))\n        (gcd n1 n2 (inc d) d)\n        (gcd n1 n2 (inc d) gd)\n      )\n    )\n  )\n)", "problem": 66, "user": "4fff00ede4b0678c553fc3fc"}, {"code": "(fn [a b] (letfn [(div [x] (flatten (keep #(when (= 0 (mod x %)) [% (quot x %)]) (range 1 (inc (Math/sqrt x))))))]\r\n              (let [da (set (div a))\r\n                    db (set (div b))\r\n                    both (clojure.set/intersection da db)]\r\n                (apply max both))))", "problem": 66, "user": "4fe900a6e4b0547ebccb243a"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "500ff421e4b0ae202717946f"}, {"code": "(fn gcd [x y]\r\n  (if (zero? y)\r\n    x\r\n    (recur y (rem x y))))", "problem": 66, "user": "500d1db4e4b05f7c30cfa69f"}, {"code": "(fn[n1,n2] ( apply max (map #(if  (zero? (+ (rem n1 %) (rem n2 %))) % 0 ) (range 1 (inc (min n1 n2)))))  )", "problem": 66, "user": "4ffd92e7e4b0678c553fc3e3"}, {"code": "(fn [a b] (some (fn [x] (if (every? #(= 0 (mod % x)) [a b]) x)) (range (min a b) 0 -1)))", "problem": 66, "user": "500aa15ee4b03d00572d2d76"}, {"code": "(fn gdc [a b]\r\n  (if (zero? b)\r\n    a\r\n    (if (< a b)\r\n      (gdc b a)\r\n      (gdc b (rem a b) )\r\n      )))", "problem": 66, "user": "4febb4dae4b0681fd128dc98"}, {"code": "(fn !\n  ([x y]\n    (! x y (Math/min x y)))\n  ([x y i]\n    (if (and (= 0 (mod x i)) (= 0 (mod y i)))\n      i\n      (! x y (dec i)))))", "problem": 66, "user": "4fefd624e4b0678c553fc31b"}, {"code": "(fn g [x y] (if (= 0 y) x (g y (mod x y))))", "problem": 66, "user": "5014718fe4b094324338f8e3"}, {"code": "(fn [a b]\n    (loop [r (min a b)]\n      (if (and (= 0 (rem a r)) (= 0 (rem b r)))\n        r\n  (recur (dec r)))))", "problem": 66, "user": "4fcc70b3e4b0ee37620e1862"}, {"code": "(fn gcd [a b]\n  (cond\n    (> b a) (gcd b a)\n    (= b 0) a\n    :else (gcd b (mod a b))))", "problem": 66, "user": "4f8320e9e4b033992c121c18"}, {"code": "#(loop [p (max %1 %2) q (min %1 %2)]\n  (if (= 0 (mod p q))\nq\n(recur q (mod p q))))", "problem": 66, "user": "5012614ee4b02a085b99dc79"}, {"code": "(fn gcd [x y]\n  (loop [d (min x y)]\n      (if (= (rem x d) (rem y d) 0) d\n        (recur (dec d)))))", "problem": 66, "user": "50127fbfe4b030d97e4db70f"}, {"code": "(fn [a b]\n  (first\n    (filter #(and (zero? (mod a %))\n                  (zero? (mod b %)))\n            (range (min a b) 0 -1))))", "problem": 66, "user": "5014754de4b094324338f8e5"}, {"code": "(fn gcd [a b]\n  (if (zero? b)\n      a\n      (gcd b (rem a b))))", "problem": 66, "user": "50166470e4b052339a490e76"}, {"code": "(fn g [x y]\n  (if (= y 0)\n    x\n    (g y (mod x y))))", "problem": 66, "user": "5012aefce4b0c8732600222a"}, {"code": "(fn [a b]\n  (loop [a a b b]\n    (if (zero? (rem a b))\n      b\n      (recur b (rem a b)))))", "problem": 66, "user": "4f92884de4b0dcca54ed6caf"}, {"code": "(fn g[a b]\n  (if (= 0 b)\n      a\n      (g b (mod a b))))", "problem": 66, "user": "501284d9e4b030d97e4db710"}, {"code": "(fn [x y]\n  (apply max\n    (filter #(= 0 (mod x %) (mod y %))\n            (range 1 (inc x)))))", "problem": 66, "user": "4fe4c09ee4b0e8f79898febb"}, {"code": ";; Euclid's algorithm https://en.wikipedia.org/wiki/Greatest_common_divisor#Using_Euclid.27s_algorithm\n#(let [a (max %1 %2) b (min %1 %2)]\n  (if (or (= a b) (zero? (mod a b)))\n    b\n    (recur (- a b) b)))", "problem": 66, "user": "500900dee4b0144d4f561e42"}, {"code": "(fn [a b] (apply max (filter #(and (= 0 (rem a %)) (= 0 (rem b %))) (map inc (range (max a b))))))", "problem": 66, "user": "4ff76effe4b0678c553fc390"}, {"code": "(fn [a b]\n  (apply max (filter #(and (= 0 (mod a %)) (= 0 (mod b %)))\n    (range 1 (inc (min a b))))))", "problem": 66, "user": "501688f7e4b052339a490e7a"}, {"code": "(fn [a b]\n  (let [gcd (fn a [p q] (if (= 0 q) p (a q (mod p q))))]\n    (if (> a b) (gcd a b) (gcd b a))))", "problem": 66, "user": "5007f751e4b0b17c647f522b"}, {"code": "(fn f [a b] (if (> b a) (f b a) (if (= b 0) a (f b (rem a b)))))", "problem": 66, "user": "5017f840e4b02f523d7cc5e8"}, {"code": "(fn gcd [a0 b0]\n            (let [[a b] (sort [a0 b0])]\n                 (if (= 0 (rem b a))\n                     a\n                     (gcd a (rem b a)))))", "problem": 66, "user": "500854c4e4b028e089d3518c"}, {"code": "(fn gcd[x y]\n  (if (= y 0) x\n      (gcd y (mod x y))))\n\n;; Dividend = divisor*quotient+remainder", "problem": 66, "user": "4ffe4d43e4b0678c553fc3f1"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (rem a b))))", "problem": 66, "user": "4fe88f78e4b07c9f6fd12c45"}, {"code": "(fn gcd [a b] (if (= b 0) a (gcd b (mod a b))))", "problem": 66, "user": "50182f53e4b02f523d7cc5ec"}, {"code": "(fn [a b]\n  (if (= a b)\n    a\n    (if (< b a)\n      (recur (- a b) b)\n      (recur a (- b a)))))", "problem": 66, "user": "500e91aae4b00fff93030f99"}, {"code": "(fn g [a b]\n  (cond\n   (= a 0) b\n   (< a b) (g b a)\n   true (g (mod a b) b)))", "problem": 66, "user": "50142490e4b07d18bdaaf70a"}, {"code": "(fn b [m mm] (loop [n m nn mm] (if (= nn 0) n (recur nn (mod n nn)))))", "problem": 66, "user": "4fe97adde4b0547ebccb245e"}, {"code": "(fn [x y]\n  (apply max (filter #(zero? (+ (mod x %) (mod y %))) \n                      (range 1 (inc (min x y))))))", "problem": 66, "user": "5009fd0ae4b03d00572d2d70"}, {"code": "(fn __ [a b]\n  (if (= b 0)\n      a\n      (recur b (mod a b))))", "problem": 66, "user": "4fa719c0e4b081705acca1bf"}, {"code": "(fn [x1 x2]\n  (if (= x2 0)\n      x1\n      (recur x2 (mod x1 x2))\n  )\n)", "problem": 66, "user": "4fcf5292e4b03432b189f40e"}, {"code": "(fn pgcd [x y]\n  (\n    if(= 0 (mod x y)) y (pgcd y (mod x y))\n  )\n)", "problem": 66, "user": "4fb7b80ae4b081705acca2d4"}, {"code": "(fn euclid [a b]\n    (if (== b 0)\n      a\n      (euclid b (mod a b))))", "problem": 66, "user": "4fe8a3bde4b07c9f6fd12c61"}, {"code": "(fn gcd [x y]\n  (let [r (rem x y)]\n    (if (zero? r)\n      y\n      (gcd y r))))", "problem": 66, "user": "4ed8b598535d10e5ff6f52fc"}, {"code": "(fn fn2[l h]\n  (first \n    (remove \n    #(= nil %)\n    (for [x (reverse (range 1 (inc (min l h))))]        \n          (when (and (= 0 (mod l x)) (= 0 (mod h x))) x)))))", "problem": 66, "user": "500b61b1e4b03d00572d2d81"}, {"code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (rem a b))))", "problem": 66, "user": "50052fd0e4b0678c553fc45d"}, {"code": "(fn gcd[a b] (if (= b 0) a (gcd b (mod a b))))", "problem": 66, "user": "4e61bb60535d8ccf87e9fe5c"}, {"code": "(fn [a b]\n  (last (let [min (if (< a b) a b)]\n    (filter \n      #(and (= 0 (rem a %)) (= 0 (rem b %))) \n      (range 1 (inc min))\n    ))))", "problem": 66, "user": "501c1492e4b086d93747d180"}, {"code": "(fn gcd \n  ( [x y] (gcd x y (min x y)))\n  ( [x y m]\n    (if (and (zero? (mod x m)) (zero? (mod y m))) \n      m (gcd x y (dec m)))))", "problem": 66, "user": "4fcf642ee4b03432b189f410"}, {"code": "(fn mcd [ x y ]\n  (cond \n    (> x y) (mcd (- x y) y)\n    (< x y) (mcd (- y x) x)\n    :else x))", "problem": 66, "user": "5018ed15e4b011a2e0bf6412"}, {"code": "(fn [x y](\n  first (\n    drop-while \n      #(some false? (list (= (mod x %) 0)\n                          (= (mod y %) 0)))\n      (iterate dec (min x y)))\n))", "problem": 66, "user": "4ff2f0a9e4b0678c553fc341"}, {"code": "(fn [x y]\n  (letfn [(divides? [dividend divisor] (zero? (rem dividend divisor)))]\n    (loop [ans (max x y)]\n      (if (and (divides? x ans) (divides? y ans))\n        ans\n        (recur (dec ans))))))", "problem": 66, "user": "4ffe1df9e4b0678c553fc3ed"}, {"code": "(fn [a b] (apply max (filter #(zero? (+ (mod a %) (mod b %))) (range 1 (inc (min a b))))))", "problem": 66, "user": "5028cd0fe4b01614d1633ffc"}, {"code": "(fn [a b] \n  (if (zero? b) \n    a \n    (recur b (mod a b))))", "problem": 66, "user": "4f60ed88e4b0defedf855fb2"}, {"code": "(fn [a b]\n  (if (zero? b)\n      a\n      (recur b (mod a b))))", "problem": 66, "user": "4e4ca885535dc968683fc4df"}, {"code": "(fn gcd [m n]\n  (let [a (max m n) b (min m n)]\n    (if (= b 0) a\n      (gcd b (mod a b)))))", "problem": 66, "user": "4ff9f5c5e4b0678c553fc3b4"}, {"code": "(fn [a b]\n  (let [r (range (max a b) 0 -1)]\n    (first (drop-while #(not (and (= 0 (rem a %))\n                                  (= 0 (rem b %))))\n                r))))", "problem": 66, "user": "502a5fa4e4b09e8f859a9fbd"}, {"code": "(fn [x y]\n  (if (> x y)\n    (recur y x)\n    (if (= x 0)\n        y\n        (recur x (- y x)))))", "problem": 66, "user": "5027f37be4b01614d1633ff1"}, {"code": "#(loop [a % b %2]\n  (if (zero? (mod a b))\n    b\n    (recur b (mod a b))))", "problem": 66, "user": "50052d38e4b0678c553fc45c"}, {"code": "(fn [x y]\n  (let [a (min x y)\n        b (max x y)]\n    (loop [d a]\n      (if (and (zero? (mod a d)) (zero? (mod b d)))\n        d\n        (recur (dec d))))))", "problem": 66, "user": "4e47f4f3535dc968683fc4bb"}, {"code": "(fn gcd [x y]\n  (letfn [(divisors [n] (set (filter #(not (ratio? (/ n %))) (range 1 (inc n)))))]\n    (apply max (clojure.set/intersection (divisors x) (divisors y)))))", "problem": 66, "user": "502d387fe4b0d96a44ab202f"}, {"code": "#(loop [ x (min %1 %2) ]\n      (if (= 0 (mod %1 x) (mod %2 x))\n          x\n          (recur (dec x)) ))", "problem": 66, "user": "502952c9e4b0b33e9bf6fdf1"}, {"code": "(fn gcd [a b]\n    (let [da                \n          (set (filter \n              #(= 0 (mod a  %1))  \n                (range  1 (+ 1 a))))\n          db  \n          (set (filter #(= 0 (mod b  %1))  \n            (range  1 (+ 1 b))))          \n          ]\n  (reduce max \n    (clojure.set/intersection da db))))", "problem": 66, "user": "4ea882c7535d7eef308072fc"}, {"code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "problem": 66, "user": "5025b93ce4b0c969f0b056df"}, {"code": "(fn [x y]\r\n  (apply max\r\n   (map #(if (= [0 0] [(mod x %) (mod y %)]) % 0)\r\n        (range 1 (+ 1 (min x y))))))", "problem": 66, "user": "502873a8e4b01614d1633ff8"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "5028bce0e4b01614d1633ffb"}, {"code": "(fn gcd [x y]\n  (let [a (max x y)\n        b (min x y)]\n    (if (= b 0)\n      a\n      (gcd b (mod a b)))))", "problem": 66, "user": "4ec56b5b535d6d7199dd369f"}, {"code": "(fn gcd [x y]\n  (loop [a x b y]\n    (cond\n      (= a 0) b\n      (= b 0) a\n      :else (recur b (mod a b)))))", "problem": 66, "user": "4fb1325de4b081705acca276"}, {"code": "(fn gcd [a b] (if (= 0 (mod a b)) b (gcd b (mod a b))))", "problem": 66, "user": "4e944706535dbda64a6f6b11"}, {"code": "(fn gcd [a b] (if (= 0 (rem a b)) b (gcd b (rem a b))))", "problem": 66, "user": "4f625f68e4b0defedf855fd2"}, {"code": "(fn [x1 x2] (last (filter #(and (zero? (mod x1 %)) \n                          (zero? (mod x2 %)))\n            (range 1 (inc x1)))))", "problem": 66, "user": "4ee528fb535d1385b2869d87"}, {"code": "(fn [a b]\r\n  (cond\r\n   (zero? b) a\r\n   :else (recur b (mod a b))))", "problem": 66, "user": "5027fc0ce4b01614d1633ff2"}, {"code": "(fn [a b]\n     (loop [ div (min a b) ]\n       (if (and (> div 0) (= 0 (rem a div) (rem b div)))\n         div\n         (recur (dec div)))))", "problem": 66, "user": "502904e0e4b0feaf66e22fad"}, {"code": "(fn foo [x y]\n  (cond\n    (= x y) x\n    (> x y) (foo y (- x y))\n    (< x y) (foo x (- y x))))", "problem": 66, "user": "4dea9fae535d08e6dec9fe02"}, {"code": "(fn gcd[a b]\n  (if (= b 0) a\n    (gcd b (mod a b))\n  )  \n)", "problem": 66, "user": "4fe610fde4b0e8f79898fece"}, {"code": "#(if (zero? %2) % (recur %2 (mod % %2)))", "problem": 66, "user": "50336c6be4b0c6c1199c710f"}, {"code": "(fn asdf [x y] (first (for [i (range 33 0 -1) :when (and (= 0 (mod x i)) (= 0 (mod y i)))] i )))", "problem": 66, "user": "5012036ce4b0a040369c12f4"}, {"code": "(fn [m n]\n  (if (> m n) (recur n m)\n    (if (= (rem n m) 0) m\n      (recur (rem n m) m))))", "problem": 66, "user": "5029fccee4b023940c84aa47"}, {"code": "#(case %2 4 2 5 5 7 1 33)", "problem": 66, "user": "5032b398e4b00c0952a257eb"}, {"code": "#(if (zero? %2) %1 \n(recur %2 (rem %1 %2)))", "problem": 66, "user": "502a9fdee4b095a7adb898b4"}, {"code": "(fn gcd [a b]\n           (let [r (rem a b)]\n             (if (zero? r)\n               b\n               (loop [d (rem b r) r r]\n                 (if (zero? d)\n                   r\n                   (if (= d 1)\n                     1\n                     (recur (rem b d) d)))))))", "problem": 66, "user": "4ffe8193e4b0678c553fc3f4"}, {"code": "#(loop [a %1 b %2]\n  (if (= b 0)\n    a\n    (recur b (rem a b))))", "problem": 66, "user": "5033a1fbe4b062bc5d7ae155"}, {"code": "(fn gcd [a b]\n  (if (= a b) a\n  (gcd\n    (if (neg? (- a b)) (- b a) (- a b))\n    (min a b))))", "problem": 66, "user": "50361b6be4b0fbe0a74d26be"}, {"code": "(fn gcd [a b]\n    (if (> a b) (recur b a)\n      (let [rem (mod b a)]\n        (if (= 0 rem) a\n          (recur a rem)))))", "problem": 66, "user": "502bb7c0e4b0194ad32ea1a3"}, {"code": "(fn [x y] (cond\n  (= x 2) 2\n  (= x 10) 5\n  (= x 5) 1\n  (= x 1023) 33))", "problem": 66, "user": "502d39f8e4b0d96a44ab2032"}, {"code": "(fn f [x n]\n     (let [m (mod x n)] \n       (if (zero? m) n \n         (f n m))))", "problem": 66, "user": "503917a0e4b088a6a14ca763"}, {"code": "#(let [m (min %1 %2)\n       r (rem (max %1 %2) m)]\n  (if (= 0 r) m (recur m r)))", "problem": 66, "user": "4f58d92fe4b0a7574ea71858"}, {"code": "(fn pgcd [x y]\r\n          (if (zero? y)\r\n            x\r\n            (pgcd y (mod x y))))", "problem": 66, "user": "503b6995e4b07a1917cc34dd"}, {"code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "problem": 66, "user": "5032b066e4b00c0952a257ea"}, {"code": "#(last (for [n (range 1 (+ 1 (min %1 %2)))\n        :when (and (= (mod %1 n) 0) (= (mod %2 n) 0))] n))", "problem": 66, "user": "502940a9e4b061fd216be4b8"}, {"code": "(fn gcd [a b]\n  (when (< a b) (gcd b a))\n  (if (zero? (mod a b)) \n    b\n    (gcd b (mod a b))))", "problem": 66, "user": "5034b0e1e4b062bc5d7ae167"}, {"code": "(fn [a b]\n  (if (= a b)\n    a\n    (recur (min a b) (- (max a b) (min a b)))))", "problem": 66, "user": "503a234de4b088a6a14ca76d"}, {"code": "(fn gcd [a b] \n  (cond\n    (< a b) (recur a (- b a))\n    (> a b) (recur (- a b) b)\n    :else a))", "problem": 66, "user": "50335235e4b0c6c1199c710b"}, {"code": "(fn [a b] \r\n  (if (zero? b) a\r\n    (recur b (mod a b))))", "problem": 66, "user": "4ded27db535d08e6dec9fe0a"}, {"code": "(fn [a b] (let [num-pair [a b]]\n        (int (/ (reduce max num-pair) (denominator (/ (reduce min num-pair) (reduce max num-pair)))))))", "problem": 66, "user": "503be880e4b0fc0f99c2e54a"}, {"code": "(fn gcd [a b]\n  (cond (= b 0) a\n        :else   (gcd b (mod a b))))", "problem": 66, "user": "5012ec0ae4b0c87326002230"}, {"code": "(fn gcd [x y]\n  (if (zero? y)\n    x\n    (gcd y (mod x y))))", "problem": 66, "user": "4f03818e535dcb61093f6b00"}, {"code": "(fn [a b] (first \n  (keep #(when (and (= 0 (rem a %)) (= 0 (rem b %))) %)\n    (range (max a b) 0 -1))))", "problem": 66, "user": "4fb266a5e4b081705acca28c"}, {"code": "(fn [a b]\n  (apply max\n    (filter\n      #(and (= 0 (mod a %))\n            (= 0 (mod b %)))\n      (range 1 (inc (min a b))))))", "problem": 66, "user": "50435852e4b034ff00315d22"}, {"code": "#(loop [a %1 b %2 c (min a b)]\n  (if (and (= 0 (rem a c))\n           (= 0 (rem b c)))\n      c\n      (recur a b (dec c))))", "problem": 66, "user": "501fa1aee4b0cb6ebc0a42eb"}, {"code": "(fn [n1 n2]\n  (let [max-divisor (inc (if (> n1 n2) n2 n1))]\n    (reduce max (for [x (range 1 max-divisor) :when (and (= (mod n1 x)0) (= (mod n2 x) 0))]\n       x\n      ))))", "problem": 66, "user": "503ca47fe4b06c4e0e1fa24f"}, {"code": "(fn [a b]\n  (cond\n   (= a b) b\n   (> a b) (recur (- a b) b)\n   :else (recur (- b a) a)))", "problem": 66, "user": "4ed98b40535d10e5ff6f5307"}, {"code": "(fn [a b]\n  (let [x (min a b)\n        y (mod (max a b) x)]\n    (if (= y 0)\n       x\n      (recur x y))))", "problem": 66, "user": "4f244f26e4b0d66497709fea"}, {"code": "#(.gcd (biginteger %) (biginteger %2))", "problem": 66, "user": "50479524e4b0371827a27bc4"}, {"code": "(fn [a b] \n  (if (zero? b) a,\n  (recur b (mod a b))))", "problem": 66, "user": "4ec7c32c535d6d7199dd36e6"}, {"code": "(fn gcd [x y]\n  (if (= 0 y)\n    x\n    (gcd y (mod x y))))", "problem": 66, "user": "5046b003e4b011c5dfee7727"}, {"code": "(fn [a b] (\n  if (= b 0) \n    a \n    (recur b (mod a b))))", "problem": 66, "user": "4fb01e53e4b081705acca260"}, {"code": "(fn [a,b]\n   (reduce #(if (and (= 0 (rem a %2)) (= 0 (rem b %2)))\n              %2\n              %1) (range 1 (inc (min a b))))\n   )", "problem": 66, "user": "5048202fe4b0ec70b3ef8d9a"}, {"code": "(fn [a b]\n  (loop [ n a\n          m b]\n    (if (= n m)\n      n\n      (recur (min n m) (- (max n m) (min n m))))))", "problem": 66, "user": "50427899e4b0add3005c0fc2"}, {"code": "(fn [a b]\n  (cond (= a 0) b\n        (= b 0) a\n        :else (recur b (mod a b))))", "problem": 66, "user": "503354c3e4b0c6c1199c710c"}, {"code": "(fn gcd [a b] (if (zero? b) a (gcd b (mod a b))))", "problem": 66, "user": "503de5aae4b06c4e0e1fa259"}, {"code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "4fe8da4de4b0547ebccb2429"}, {"code": "(fn [x y]\n  (let [mx (max x y) mn (min x y)]\n    (/ mn (numerator (/ mn mx)))))", "problem": 66, "user": "50464831e4b011c5dfee771f"}, {"code": "(fn gcd [a b]\n  (if (= b 0) a\n    (gcd b (rem a b))))", "problem": 66, "user": "504e48ace4b0f6ff3350c498"}, {"code": "(fn gcd [m n]\n  (let [r (mod m n)]\n    (if (zero? r) n (gcd n r))))", "problem": 66, "user": "504d0116e4b022602c20b089"}, {"code": "(fn gcd [x y]\n  (if (zero? y) x (gcd y (mod x y))))", "problem": 66, "user": "504e13fce4b078edc5f593bc"}, {"code": "(fn f [x y]\n  (if (zero? y)\n    x\n    (f y (rem x y))))", "problem": 66, "user": "4db2cc55535df7e46ed9b6c5"}, {"code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "problem": 66, "user": "504e397ee4b0f6ff3350c485"}, {"code": "(fn [x y]\r\n  (->> (range (max x y))\r\n    rest\r\n    reverse\r\n    (some #(if (and (integer? (/ x %)) (integer? (/ y %))) %))))", "problem": 66, "user": "504e14c2e4b078edc5f593bf"}, {"code": "(fn [x y]\n    (loop [i (max x y)\n           j (min x y)]\n      (if (= i j)\n        i\n        (recur (- (max i j) (min i j)) (min i j)))))", "problem": 66, "user": "4fcbc18ae4b0ee37620e185c"}, {"code": "#(if (zero? %2) % (recur %2 (mod % %2)))", "problem": 66, "user": "504f2071e4b0e7ad84dbc4be"}, {"code": "(fn g [a b] (if (= b 0) a (g b (rem a b))))", "problem": 66, "user": "504dff92e4b078edc5f5938a"}, {"code": "(fn gcd [a b] \n  (let [s (min a b) l (max a b)]\n    (if (= 0 (rem l s))\n      s\n      (gcd l (rem l s)))))", "problem": 66, "user": "50431cbce4b034ff00315d1c"}, {"code": "(fn gcd [a b ] (if (= 0 b) \r\n                            a\r\n                            (gcd b (rem  a b))))", "problem": 66, "user": "50463347e4b011c5dfee771e"}, {"code": "(fn [a0 b0] (loop [a a0 b b0] (if (= b 0) a (recur b (mod a b)))))", "problem": 66, "user": "503d129fe4b06c4e0e1fa254"}, {"code": "#(if (zero? %) %2 (recur (mod %2 %) %))", "problem": 66, "user": "5036eba7e4b0af0658af77a5"}, {"code": "(fn [x y]\r\n  (reduce max (clojure.set/intersection\r\n   (set (filter #(= 0 (mod x %)) (range 1 (inc x))))\r\n   (set (filter #(= 0 (mod y %)) (range 1 (inc y)))))))", "problem": 66, "user": "504e2333e4b0f6ff3350c46c"}, {"code": "(fn [m n] \n  (if (zero? n) \n       m\n       (recur n (rem m n))))", "problem": 66, "user": "5041b3c0e4b06d8231e4facf"}, {"code": "(fn gcd [a b]\n  (if (= b 0)\n      a\n      (gcd b (mod a b))))", "problem": 66, "user": "4fc5a693e4b0ee37620e17fc"}, {"code": "(fn gcd\n  [ax bx]\n  (loop [a (max ax bx)\n         b (min ax bx)]\n    (if (zero? b)\n      a\n      (recur b (- a (* b (int (/ a b)))))\n      )))", "problem": 66, "user": "4edfb618535d10e5ff6f5343"}, {"code": "(fn gcd [a b]\n  (loop [q (max a b) r (min a b)]\n    (if (= r 0)\n      q\n      (recur r (mod q r)))))", "problem": 66, "user": "4e6a6b83535d8ccf87e9fee0"}, {"code": "(fn [a b] (loop [a a b b] (if (not= b 0) (recur b (mod a b)) a)))", "problem": 66, "user": "504f865ee4b0a02f9cffde90"}, {"code": "(fn [n m]\n  (loop [x (max n m) y (min n m) z (- x y)]\n     (if (= y z)\n          y\n         (if (> y z)\n             (recur y z (- y z))\n             (recur z y (- z y))))))", "problem": 66, "user": "50435689e4b034ff00315d21"}, {"code": "(fn gcd [a b] \n  (if (= b 0)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "504e108ce4b078edc5f593b3"}, {"code": "(fn my-common-divisor [x y]\r\n  (loop [n (min x y)]\r\n    (when (< n (+ (min x y) 1))\r\n      (if (and (= (mod x n) 0) (= (mod y n) 0))\r\n        n\r\n  (recur (- n 1))))))", "problem": 66, "user": "50436470e4b034ff00315d23"}, {"code": "#(if (zero? %)\n   %2\n   (recur (mod %2 %) %))", "problem": 66, "user": "4ebbc1f6535dfed6da9c6d72"}, {"code": "(fn [a b]\r\n  (if (= b 0)\r\n    a\r\n    (recur b (mod a b))))", "problem": 66, "user": "4fee04a0e4b0678c553fc308"}, {"code": "(fn gcd [a b]\n     (if (= b 0)\n         a\n         (if (= a b)\n           a\n           (if (< a b)\n              (recur a (- b a))\n              (recur (- a b) b)))))", "problem": 66, "user": "504457c0e4b01f6c9a8b2360"}, {"code": "(fn [x y] (reduce max (filter #(= 0 (mod x %) (mod y %)) (range 1 (inc (max x y))))))", "problem": 66, "user": "5055899de4b0ce54f56f03fd"}, {"code": "(fn [a b]\r\n  (if (zero? b)\r\n    a\r\n    (if (zero? a)\r\n      b\r\n      (if (< a b)\r\n        (recur a (mod b a))\r\n        (recur b (mod a b))))))", "problem": 66, "user": "5050b107e4b063148f524126"}, {"code": "(fn gcd\n  [x y]\n    (if (zero? y) x\n      (gcd y (mod x y))))", "problem": 66, "user": "504f57c7e4b0a02f9cffde71"}, {"code": "(fn gcd[a b]\r\n  (if (= a b)\r\n    a\r\n    (if (> a b)\r\n      (gcd (- a b) b)\r\n      (gcd (- b a) a))))", "problem": 66, "user": "504ec4d3e4b069badc5a33c9"}, {"code": "(fn gcd [n m] (if (zero? m) n\n  (if (> n m)\n    (gcd (- n m) m)\n    (gcd n (- m n)))))", "problem": 66, "user": "504e2600e4b0f6ff3350c46f"}, {"code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (rem a b))))", "problem": 66, "user": "5053de37e4b0b1b9d1860ea8"}, {"code": "(fn [a b]\r\n  (last (filter #(= 0 (mod a %) (mod b %))\r\n  \t(range 1 (inc (/ (max a b) 2))))))", "problem": 66, "user": "4fdc067fe4b05e33b9224f69"}, {"code": "(fn [a b]\n  (if (= 0 (rem a b))\n      b\n      (recur b (rem a b))))", "problem": 66, "user": "50555c06e4b0ce54f56f03fa"}, {"code": "#(loop [n %] (if (= 0 (rem % n) (rem %2 n)) n (recur (dec n))))", "problem": 66, "user": "4f045946535dcb61093f6bba"}, {"code": "(fn gcd [a b]\n  (if (= b 0)\n      a\n      (gcd b (rem a b))))", "problem": 66, "user": "4fd769a1e4b0dab7d829f382"}, {"code": "(fn gcd [n1 n2]\n  (let [s (min n1 n2)\n        l (max n1 n2)]\n    (if (= 0 (mod l s))\n      s\n      (gcd s (- l s)))))", "problem": 66, "user": "503e6047e4b06c4e0e1fa266"}, {"code": "(fn gcd [x y]\n    (if (= y 0)\n      x\n      (recur y (mod x y))))\n;; If recursion were kosher, I'd do the following:\n;(fn gcd [x y]\n;  (if (= (rem x y) 0)\n;      y\n;      (gcd y (rem x y))))", "problem": 66, "user": "5054c853e4b0b1b9d1860eb3"}, {"code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (rem a b))))", "problem": 66, "user": "4ff769bce4b0678c553fc38f"}, {"code": "(fn gcd [x y]\r\n  (cond\r\n    (< x y) (gcd x (- y x))\r\n    (> x y) (gcd y (- x y))\r\n    :else x))", "problem": 66, "user": "504f3fa3e4b0a02f9cffde62"}, {"code": "(fn [x y] (loop [a (max x y) b (min x y)] (if (zero? (mod a b)) b (recur b (mod a b)))))", "problem": 66, "user": "4fca2a13e4b0ee37620e184d"}, {"code": "(fn gcd [x y]\n  (let [rm (rem x y)]\n    (if (= rm 0)\n      y\n      (gcd y rm))))", "problem": 66, "user": "50481532e4b0ec70b3ef8d96"}, {"code": "(fn [x y]\n  (if (zero? y)\n    x\n    (recur y (mod x y))))", "problem": 66, "user": "50586354e4b06522596eba78"}, {"code": "(fn [x y] (last (filter #(= 0 (rem x %1) (rem y %1)) (range 1 (inc y)))))", "problem": 66, "user": "5048bcf8e4b06e644c63f1ae"}, {"code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "505bd09fe4b032b709c81373"}, {"code": "(fn [x1 x2]\r\n   (loop [div 1]\r\n     (let [gcd (/ (min x1 x2) div)]\r\n       (if (and (= 0 (mod x1 gcd)) (= 0 (mod x2 gcd)))\r\n         gcd\r\n         (recur (inc div))))))", "problem": 66, "user": "502d4ea0e4b02fc10c6c6e46"}, {"code": "(fn [x y]\n    (inc (apply max (filter #(and (= (mod x (inc %)) 0) (= (mod y (inc %)) 0)) (take (min x y) (range))))))", "problem": 66, "user": "504e1abee4b0f6ff3350c45d"}, {"code": "(fn gcd[x y] \n  (cond\n\t    (> x y) (gcd (- x y) y)\n\t    (< x y) (gcd x (- y x))\n              :else x))", "problem": 66, "user": "4fc6e1a8e4b0ee37620e181d"}, {"code": "(fn gcd [x y] (let [a (min x y), b (max x y), r (rem b a)]\n(if (= 0 r) a (gcd r a))))", "problem": 66, "user": "50563ae2e4b0ce54f56f0405"}, {"code": "(fn g [x,y]\n  (if (zero? (mod x y)) y (g y (mod x y))))", "problem": 66, "user": "504e04a4e4b078edc5f59397"}, {"code": "(fn [n1 n2]\r\n    (if (zero? n2)\r\n      n1\r\n      (recur n2 (rem n1 n2))))", "problem": 66, "user": "4f9aa97ae4b0dcca54ed6d0e"}, {"code": "(fn [a b]\n  (loop [cap 1\n         test 2]\n    (if (> test (min a b))\n      cap\n      (if (= (rem a test) (rem b test) 0)\n        (recur test (inc test))\n        (recur cap  (inc test))))))", "problem": 66, "user": "4f84a4a4e4b033992c121c39"}, {"code": "(fn gcd[a b] \n    (if (= b 0)\n      a\n      (recur b (mod a b))\n    )\n)", "problem": 66, "user": "504e685fe4b0f6ff3350c4ae"}, {"code": "#(if (= 0 %2) % (recur %2 (mod % %2)))", "problem": 66, "user": "5054bc87e4b0b1b9d1860eb0"}, {"code": "(fn [a b]\n  (cond\n    (< a b) (recur (- b a) a)\n    (> a b) (recur (- a b) b)\n    :else a))", "problem": 66, "user": "504e72cee4b0f6ff3350c4b4"}, {"code": "(fn gcd [a b]\n  (if (= b 0) a\n  (gcd b (rem a b))))", "problem": 66, "user": "50310b8be4b05b7df5a0b84d"}, {"code": "#(if (= %2 0) %1 (recur %2, (mod %1 %2)))", "problem": 66, "user": "4f83ae07e4b033992c121c21"}, {"code": "(fn mygcd [n1 n2]\n  (if (> n1 n2)\n    (do\n      (if (= (mod n1 n2)0)\n        n2\n        (mygcd n1 (mod n1 n2))))\n    (do\n      (if (= (mod n2 n1)0)\n        n1\n        (mygcd n2 (mod n2 n1))))))", "problem": 66, "user": "4eb6f065535d7eef30807372"}, {"code": "(fn f [a b] (let [r (rem a b)] (if (= r 0) b (f b r))))", "problem": 66, "user": "504e9f5ce4b069badc5a33bd"}, {"code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "5063b9a0e4b075d771da6f9d"}, {"code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "problem": 66, "user": "504f191ae4b0e7ad84dbc4ba"}, {"code": "(fn gcd [a b] \n  (if (= b 0)\n  a\n\t(recur b (mod a b))))", "problem": 66, "user": "4fa09916e4b0dcca54ed6d4e"}, {"code": "(fn [a b]\n  (if (zero? (rem a b))\n    b\n    (recur b (rem a b))))", "problem": 66, "user": "504c8165e4b09724c857af31"}, {"code": "(fn gcd [a b]\n  (cond (> a b) (gcd b a)\n        (= 0 a) b\n        :else (gcd (rem b a) a)))", "problem": 66, "user": "5063fe48e4b075d771da6f9e"}, {"code": "(fn euclid [x y]\n  (loop [x x y y]\n    (cond (= x y) x\n          (> x y) (recur (- x y) y)\n          :else (recur (- y x) x))\n  )\n)", "problem": 66, "user": "50588af1e4b06522596eba7d"}, {"code": "#(apply max (filter                                                                                                                              \n         (fn [x]                                                                                                                                   \n           (= 0 (rem %1 x)                                                                                                                         \n              (rem %2 x)))                                                                                                                         \n         (range 1 (inc (min %1 %2)))))", "problem": 66, "user": "505fc8e3e4b08f2a82ad10b6"}, {"code": "(fn [a b]\n  (if (zero? (rem a b))\n    b\n    (recur b (rem a b))))", "problem": 66, "user": "5060d137e4b0dc10a69545a0"}, {"code": "(fn common-div\r\n   [x y]\r\n   (cond\r\n    (= 0 (rem x y)) y\r\n    (= 0 (rem y x)) x\r\n    (> x y) (recur (rem x y) y)\r\n    (< x y) (recur x (rem y x))))", "problem": 66, "user": "4fec0824e4b0681fd128dc9c"}, {"code": "#(if (zero? %2)\n   %1\n   (recur %2 (mod %1 %2)))", "problem": 66, "user": "50645e12e4b007509339a58a"}, {"code": "(fn [x y]\n  (apply max (apply concat (remove (fn [x] (= (count x) 1)) (vals \n  (group-by identity (concat\n    (filter (fn [n] (= (mod x n) 0)) (range 1 (inc y)))\n    (filter (fn [n] (= (mod y n) 0)) (range 1 (inc y)))\n  ))))))\n)", "problem": 66, "user": "504e3aaae4b0f6ff3350c487"}, {"code": "(fn myf\n  [a b]\n  (if (= b 0) \n    a\n   (myf b (rem a b))))", "problem": 66, "user": "50573ed8e4b0012181721987"}, {"code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (rem a b))))", "problem": 66, "user": "4fd6028ce4b0d4de60cee37b"}, {"code": "(fn [m n]\n  (if (zero? m)\n    n\n    (recur (mod n m) m)\n  )\n)", "problem": 66, "user": "506ab9bae4b05d3b7762c74c"}, {"code": "#(cond (= % %2) %\n       (< %2 %) (recur %2 %)\n       1 (recur % (- %2 %)))", "problem": 66, "user": "506e0e5ae4b09350ab4199eb"}, {"code": "(fn [a b]\n  (if (= a b) a\n    (let [big (max a b)\n          small (min a b)\n          ]\n      (recur small (- big small)))))", "problem": 66, "user": "50611456e4b0dc10a69545a5"}, {"code": "#(if (= % 0) %2 (recur (rem %2 %) %))", "problem": 66, "user": "50657775e4b0deb876850599"}, {"code": "(fn f [a b]\n  (let [x (max a b)\n        y (min a b)]\n    (if (zero? y)\n      x\n      (f y (mod x y)))))", "problem": 66, "user": "506617c3e4b03d366d7cb2ab"}, {"code": "(fn [x y]\n          (let [dv (fn [z] (set (filter #(zero? (rem z %)) (range 1 (inc z)) )))]\n            (apply max (clojure.set/intersection (dv x) (dv y)))))", "problem": 66, "user": "50705072e4b07bd6ad9b9f27"}, {"code": "#(if (= %2 0) % (recur %2 (rem % %2)))", "problem": 66, "user": "5054c7e1e4b0b1b9d1860eb2"}, {"code": "#(apply max (for [x (range 1 (inc (min % %2))) :when (= 0 (rem % x) (rem %2 x))] x))", "problem": 66, "user": "507056b8e4b07bd6ad9b9f29"}, {"code": "(fn gcd [x y]\n  (cond \n    (zero? y) x\n    (> y x) (gcd y x)\n    :else (gcd y (mod x y))))", "problem": 66, "user": "506b8242e4b0eda3100c090a"}, {"code": "#(loop [a %1 b %2 c %2 f (comp integer? /)] (if (and (f a c) (f b c)) \n                                     c\n                                   (recur a b (dec c) f)))", "problem": 66, "user": "4f614976e4b0defedf855fbb"}, {"code": "#(if (zero? %2)\n      %1\n      (recur %2 (mod %1 %2)))", "problem": 66, "user": "4f2f6678e4b0d6649770a06e"}, {"code": "(fn\n    [a b]\n    (if (= b 0)\n      a\n      (recur b (mod a b))))", "problem": 66, "user": "4fe89297e4b07c9f6fd12c4c"}, {"code": "(fn gcd[x y]\r\n        (let [\r\n                sorted (sort (list x y))\r\n                s (first sorted)\r\n                l (last  sorted)]\r\n        (cond\r\n                (= (mod l s) 0) s\r\n                true (gcd (mod l s) s)\r\n                )))", "problem": 66, "user": "506fd0afe4b07bd6ad9b9f23"}, {"code": "(fn gcd [a b] (if (= b 0) a (gcd b (mod a b))))", "problem": 66, "user": "505f55d3e4b08f2a82ad10b0"}, {"code": "(fn [a b]\r\n  (cond (< a b) (recur b a)\r\n  (= a b) a\r\n\t:else (recur (- a b) b)))", "problem": 66, "user": "507437c2e4b054001656acd0"}, {"code": "(fn gcd [x y]\n  (if (zero? y)\n    x\n    (gcd y (mod x y))))", "problem": 66, "user": "506ef8c3e4b09350ab4199f4"}, {"code": "#(if (zero? %2)\n  %1\n  (recur %2 (rem %1 %2)))", "problem": 66, "user": "506a1985e4b01dc6af13f83e"}, {"code": "(fn [x y]\n  (let [\n    factors (fn [num]\n      (set (filter #(= 0 (mod num %)) (range 1 (inc num)))))]\n    (apply max (clojure.set/intersection (factors x) (factors y)))))", "problem": 66, "user": "4ee85476535d93acb0a6687c"}, {"code": "(fn gcd [x y]\n  (loop [[x y] (reverse (sort [x y]))]\n    (if (zero? y) x (recur [y (mod x y)]))))", "problem": 66, "user": "50763574e4b0a894bb95bf3d"}, {"code": "(fn euclid-alg [x y] (if (= x y) x (euclid-alg (min x y) (- (max x y) (min x y)))))", "problem": 66, "user": "4fecebe1e4b0681fd128dcac"}, {"code": "(fn p [x y]\n  (if (some zero? [x y]) (max x y)\n  (p (- (max x y) (min x y)) (min x y))))", "problem": 66, "user": "504eff22e4b0e7ad84dbc4a9"}, {"code": "(fn [x y](loop [a x b y] (if (= (rem a b) 0) b (recur b (rem a b)))))", "problem": 66, "user": "50783762e4b0fc74642bff67"}, {"code": "(fn gcd [a b]\r\n  (if (zero? b)\r\n    a\r\n    (gcd b (rem a b))))", "problem": 66, "user": "50481b70e4b0ec70b3ef8d98"}, {"code": "(fn gcd [n1 n2] (letfn [(divs [num] (into #{} (filter #(= 0 (mod num %)) (range 1 (inc num)))))] (:require 'clojure.set) (reduce max (clojure.set/intersection (divs n1) (divs n2)))))", "problem": 66, "user": "507a9b29e4b08327cd804a6e"}, {"code": "(fn gcd [a b] (if (= b 0)\n                         a\n                         (gcd b (rem a b))\n                       ))", "problem": 66, "user": "5061cc17e4b0a30dc9a35d34"}, {"code": "(fn gcd [x y]\n  (if (< x y) (gcd y x)\n    (if (zero? y) x\n        (gcd y (rem x y)))))", "problem": 66, "user": "507db411e4b03c76e5499e06"}, {"code": "(fn gcd [a b] \n  (if (= b 0) a\n    (gcd b (mod a b))))", "problem": 66, "user": "507a396be4b08327cd804a69"}, {"code": "(fn g [a b] (cond (< b a) (g (- a b) b) (> b a) (g a (- b a)) true a))", "problem": 66, "user": "505d4b21e4b0e6aca564be07"}, {"code": "(fn\n  [j k]\n    (loop [a (if (>= j k) j k) b (if (>= j k) k j)]\n      (if (= 0 b)\n        a\n        (recur b (mod a b)))))", "problem": 66, "user": "507a08e4e4b08327cd804a67"}, {"code": "(fn [x y] \n    (loop [a x b y]\n      (if(zero? b) a\n        (recur b (rem a b)))))", "problem": 66, "user": "4fd11a93e4b04c3a95aa040a"}, {"code": "(fn [x y] (last \n                 (filter #(and (= 0 (mod x %)) \n                            (= 0 (mod y %))) \n                      (range 1 (inc (min x y))))))", "problem": 66, "user": "504db141e4b021508a333965"}, {"code": "#(loop [a %1 b %2] (if (= a b) a (if (> a b) (recur b (- a b)) (recur a (- b a)))))", "problem": 66, "user": "507c7c8be4b0b083f3ff82ef"}, {"code": "#(last (filter (fn [i] (= (rem %1 i) (rem %2 i) 0)) (range 1 (inc %1))))", "problem": 66, "user": "50807940e4b01a93d3f38e44"}, {"code": "(fn gcd [a b] (if (zero? b) a (gcd b (mod a b))))", "problem": 66, "user": "507eddf4e4b06ce648bcdbfa"}, {"code": "(fn gcd' [x y]\n    (if (= y 0) x\n      (recur y (rem x y))))", "problem": 66, "user": "508157b2e4b0946d0443855c"}, {"code": "#(if (= 0 %2)\n    %\n    (recur %2 (rem % %2)))", "problem": 66, "user": "507ef25ce4b0f753b6f9788e"}, {"code": "(fn [x y]\n         (loop [n (min x y)]\n           (if (and  (=  (rem x n) 0)  (=  (rem y n) 0))\n             n\n             (recur (dec n)))))", "problem": 66, "user": "5007cdb9e4b0b17c647f5227"}, {"code": "(fn gcd [a b]\n  (let [big (max a b)\n        small (min a b)]\n    (if (= small 0)\n      big\n      (gcd (rem big small) small))))", "problem": 66, "user": "4fc7ddffe4b0ee37620e182b"}, {"code": "(fn f [a b] (if (= 0 a) b (f (mod b a) a)))", "problem": 66, "user": "5088082ae4b0198722bd9854"}, {"code": "(fn __ [m n]\n  (first \n     \t(for [x (reverse (range 1 (inc (min m n))))\n          \t:when (= 0 (+ (rem m x) (rem n x)))]\n\t\t\tx\n    \t)\n    )\n)", "problem": 66, "user": "503f872ee4b00d1a725ff2ac"}, {"code": "(fn gcd [a b] (if (< a b) (gcd b a) (if (= b 0) a (gcd b (mod a b)))))", "problem": 66, "user": "5084cb7de4b0fb8f40674bfb"}, {"code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "problem": 66, "user": "4f2942ace4b0d6649770a01e"}, {"code": "(fn [a b]\n    (let [[small big] (sort [a b])\n          remain (rem big small)]\n      (if (zero? remain)\n        small\n        (recur small remain))))", "problem": 66, "user": "4e80aa10535db62dc21a62b1"}, {"code": "(fn [x y]\r\n    (loop [x x y y]\r\n      (let [mod (rem x y)]\r\n        (if (= 0 mod)\r\n          y\r\n          (recur y mod)))))", "problem": 66, "user": "508b95a0e4b0be79e5b189c6"}, {"code": "#(loop [a %1 b %2 c (min %1 %2)]\n  (if (= 0 (+ (rem a c) (rem b c)))\n    c\n    (recur a b (dec c))))", "problem": 66, "user": "4e7d2448535db169f9c796c8"}, {"code": "(fn [a b]\n  (if (= a b) a\n   (if (> a b) (recur (- a b) b) (recur a (- b a)))))", "problem": 66, "user": "507e68abe4b085af06e3afd2"}, {"code": "(fn  [n1 n2]\r\n  (loop [d n1\r\n         q n2]\r\n    (let [ ma (max q d) \r\n           mi (min q d) ]\r\n        (cond\r\n            (or (= q 0)\r\n              (= d 0)) 1\r\n            (= (rem ma mi) 0) mi\r\n          :else\r\n            (recur q (rem ma mi))))))", "problem": 66, "user": "50576483e4b001218172198b"}, {"code": "(fn [a b] (let [divider? (fn [x divider] (when (= 0 (rem x divider)) divider))\n               divs (fn [x] (remove nil? (map (partial divider? x) (range 1 (inc x)))))]\n           (->> (concat (divs a) (divs b))\n                (sort)\n                (partition-by identity)\n                (remove #(= (count %) 1))\n                (map first)\n                (apply max))))", "problem": 66, "user": "4db86aee535d1e037afb2193"}, {"code": "(fn gcd [a b]\r\n  (let [n (mod a b)]\r\n    (if (= 0 n) b\r\n\t      (recur b n))))", "problem": 66, "user": "4f3242bae4b0d6649770a08f"}, {"code": "(fn gcd [a b]\n  (cond\n    (> a b) (gcd b a)\n    (== 0 a) b\n    true (gcd a (- b a))))", "problem": 66, "user": "50901b2ee4b0ea685a20f774"}, {"code": "(fn [a b] (if (= 0 b) a (recur b (mod a b))))", "problem": 66, "user": "50813b88e4b09292fd669443"}, {"code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))\n  )\n)", "problem": 66, "user": "508bf05ae4b0f17d83ea26aa"}, {"code": "(fn gcd [a b] \n  (if (zero? b) a\n      (gcd b (mod a b))))", "problem": 66, "user": "4e5f034b535d8a8b8723a2d9"}, {"code": "#(if (= %1 0) %2\n   (recur (mod %2 %1) %1))", "problem": 66, "user": "509160dae4b0742c82730aef"}, {"code": "(fn [n1 n2]\n  (if (= (rem n1 n2) 0)\n    n2\n    (recur\n      n2\n      (rem n1 n2)\n    )\n  )\n)", "problem": 66, "user": "4fc8f671e4b0ee37620e1840"}, {"code": "(fn [a b] (if (= b 0) a (recur b (mod a b))))", "problem": 66, "user": "4fe2501ae4b0dd6cd5ce3644"}, {"code": "(fn [x y]\n  (last (filter #(and (= (rem x %) 0) (= (rem y %) 0)) (range 1 (+ (min x y) 1)))))", "problem": 66, "user": "4f98da04e4b0dcca54ed6cf7"}, {"code": "#(cond (< %1 %2) (recur %2 %1)\n       (= 0 (mod %1 %2)) %2\n       :else (recur %2 (mod %1 %2)))", "problem": 66, "user": "507fbd77e4b089ade05efbd3"}, {"code": "(fn [a b] (if (= 0 b) a (recur b (mod a b))))", "problem": 66, "user": "4f85a75ce4b033992c121c48"}, {"code": "#(loop [a %1 b %2]\n  (if (zero? b) a (recur b (mod a b))))", "problem": 66, "user": "5097b556e4b00ad8bab4e970"}, {"code": "(fn gcd [x y] (last (filter #(and (= 0 (mod x %)) (= 0 (mod y %))) (range 1 (inc (min x y))))))", "problem": 66, "user": "5097a95fe4b00ad8bab4e96e"}, {"code": "(fn gcd [a b] (if (= b 0) a (gcd b (- a (* b (int (/ a b)))))))", "problem": 66, "user": "506b437de4b0eda3100c0906"}, {"code": "(fn [a b] (loop [a1 a b1 b] (if (zero? (mod a1 b1)) b1 (recur b1 (mod a1 b1) ))))", "problem": 66, "user": "4e72dd5d535d5021c1a89667"}, {"code": "#(last\n  (remove nil?\n    (for [i (range 1 (inc (min % %2)))]\n      (when (and (= 0 (rem % i)) (= 0 (rem %2 i)))\n        i))))", "problem": 66, "user": "5013193ae4b0f26a0e3320ab"}, {"code": "(fn [x y]\n  (let [z (rem x y)] \n    (if (zero? z) y (recur y z))\n  ))", "problem": 66, "user": "5089ebfee4b03217b26a539f"}, {"code": "(fn f [a b] (if (= 0 a) b (if (= 0 b) a (if (> a b) (f b (mod a b)) (f a (mod b a))))))", "problem": 66, "user": "508ee17ae4b0706b2ed3ef8d"}, {"code": "#(if (zero? %2) % (recur %2 (mod % %2)))", "problem": 66, "user": "4f49108ae4b0d56e7bb92be5"}, {"code": "#(.gcd (. java.math.BigInteger valueOf %) (. java.math.BigInteger valueOf %2))", "problem": 66, "user": "4dbdc898535d020aff1edf4a"}, {"code": "(fn foo[x y]\n  (if (= y 0) x\n    (foo y (mod x y))))", "problem": 66, "user": "5078300de4b0fc74642bff66"}, {"code": "(fn [x y]\n  (cond\n    (= (rem x y) 0) y\n    (= (rem y x) 0) x\n    (> x y) (recur x (rem x y))\n    (< x y) (recur x (rem y x))))", "problem": 66, "user": "5098f5d6e4b0cae2931060a4"}, {"code": "(fn P66 [x y] \n  (loop [a (max x y) b (min x y)]\n    (if (= b 0)\n      a\n      (recur b (rem a b)))))", "problem": 66, "user": "5046f909e4b03b02161376b5"}, {"code": "(fn [a b]\n  (if (= 0 b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "509e8da7e4b08df8156e9e2f"}, {"code": "(fn gcd [a b]\n  (let [m (max a b) n (min a b)]\n    (if (= 0 (mod m n))\n      n\n      (gcd n (mod m n)))))", "problem": 66, "user": "5084c43be4b0fb8f40674bfa"}, {"code": "(fn [& args]\n  (loop [args (sort args)]\n    (if (= (first args) (last args))\n      (first args)\n      (recur (sort [(first args) (- (last args) (first args))])))))", "problem": 66, "user": "50843a4ae4b0c98812d0788b"}, {"code": "#(if (zero? %2) %\n     (recur %2 (mod % %2)))", "problem": 66, "user": "50996a38e4b0cae2931060b3"}, {"code": "(fn gcd [a b] (if (zero? b) a (gcd b (mod a b))))", "problem": 66, "user": "4e0febe6535d04ed9115e7be"}, {"code": "(fn greatest-common-divisor [a b]\n  (let [r (rem a\n               b)]\n    (if (zero? r)\n      b\n      (recur b r))))", "problem": 66, "user": "4efa3d4b535dced4c769f270"}, {"code": "(fn [x y]\n  (if (= y 0)\n      x\n    (recur y (- x (* y (quot x y))))))", "problem": 66, "user": "503255d0e4b0e78df07b092b"}, {"code": "(fn [n1 n2]\n  (reduce #(if (= 0 (mod n1 %2) (mod n2 %2))  %2 %1) 1 (range 1 (max n1 n2))))", "problem": 66, "user": "50a7b76de4b090657f4a5cdc"}, {"code": "(fn [a b]\n  (if (>= a b)\n    (if (= 0 (rem a b))\n      b\n      (recur b (rem a b)))\n    (if (= 0 (rem b a))\n      a\n      (recur b (rem b a)))))", "problem": 66, "user": "50a83794e4b054305ba5a831"}, {"code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "problem": 66, "user": "50981062e4b04e098a4c7268"}, {"code": "(fn gcd [a b] (if (= b 0) a (gcd b (rem a b))))", "problem": 66, "user": "5027b41ee4b01614d1633fee"}, {"code": "(fn [x y]\n   (cond\n    (= x y) x\n    (> x y) (recur (- x y) y)\n    :else (recur (- y x) x)\n   )\n  )", "problem": 66, "user": "50217818e4b00bba4502f7a7"}, {"code": "#(first (for [d (range (min %1 %2) 0 -1) \n         :when (= 0(+ (rem %1 d) (rem %2 d))) ] d))", "problem": 66, "user": "502ade49e4b0614b52996120"}, {"code": "(fn g [a b] (if (= b 0) a (g b (rem a b))))", "problem": 66, "user": "50aab057e4b056ee0193586b"}, {"code": "#(if (= % 0)\n      %2\n      (recur (mod %2 %) %))", "problem": 66, "user": "50a83315e4b054305ba5a830"}, {"code": "(fn [a b] (first (filter #(and (zero? (mod a %)) (zero? (mod b %))) (range a 0 -1))))", "problem": 66, "user": "50a2cd3be4b048eb8059339d"}, {"code": "(fn [x y]\n    (loop\n      [high (max x y)\n       low (min x y)]\n      (if (> low 0) \n        (recur low (rem high low))\n        high)))", "problem": 66, "user": "50989786e4b04e098a4c7274"}, {"code": "(fn g [a b] (cond (= a b) a (> a b) (g (- a b) b) (< a b) (g a (- b a))))", "problem": 66, "user": "5098bcfee4b0cae2931060a1"}, {"code": "(fn gcd [a b]\n  (if (> a b) (gcd b a)\n      (if (= 0 (rem b a))\n        a\n        (gcd (- b a) a))))", "problem": 66, "user": "4dd0e8f7535da60f04a96e57"}, {"code": "#(if (zero? %) %2 (recur (mod %2 %) %))", "problem": 66, "user": "509c03f3e4b085ae113522a8"}, {"code": "(let [f (fn [x] \n  (filter #(zero? (mod x %)) (range x 0 -1)))]\n(fn [x y] (first (filter (set (f x)) (f y)))))", "problem": 66, "user": "4ed152d5535d44c135fd68cc"}, {"code": "(fn [a b] (if (zero? b) a (recur b (rem a b))))", "problem": 66, "user": "50ab8ae3e4b01d6eb43ce9a0"}, {"code": "(fn gcd [x y](if (= y 0) x (gcd y (mod x y))))", "problem": 66, "user": "50a4cbbee4b0344e360f3bc2"}, {"code": "#(some (fn [x] (when (and (= 0 (mod %1 x)) (= 0 (mod %2 x))) x)) (range (min %1 %2) 0 -1))", "problem": 66, "user": "50a4f36be4b0344e360f3bc9"}, {"code": "#(loop [a % b %2]\n  (if (= b 0) \n      a \n      (recur b (rem a b))))", "problem": 66, "user": "4f956072e4b0dcca54ed6ccf"}, {"code": "(fn gcd [a b]\n   (if (= b 0)\n      a\n      (gcd b (rem a b))))", "problem": 66, "user": "50ae22c3e4b0a40c9cfb08d0"}, {"code": "(fn [x y]\n  (letfn [(divisors [z]\n    (set (filter #(= 0 (mod z %)) (range 1 (inc z)))))]\n(->> (filter (divisors x) (divisors y)) sort reverse first)))", "problem": 66, "user": "50ad7888e4b0a40c9cfb08c7"}, {"code": "(fn [n1 n2] (loop [a n1 b n2] (if (= 0 b) a (recur b (mod a b)))))", "problem": 66, "user": "5092fe10e4b097f48cc3857e"}, {"code": "#(loop [a %1 b %2]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "50a5f72fe4b0aa96157e2611"}, {"code": "#(let \n  [x (max % %2), y (min % %2)]\n  (if (= 0 (rem x y))\n      y\n      (recur (- x y) y)))", "problem": 66, "user": "5078d366e4b08327cd804a5b"}, {"code": "(fn [x y]\n  (loop [a (max x y) b (min x y)]\n    (if (zero? b)\n      a\n      (recur b (mod a b)))))", "problem": 66, "user": "4f1ae082535d64f603146470"}, {"code": "#(loop [tval (min %1 %2)\n        n1 %1 \n        n2 %2] (\n    if (and (= 0 (mod n1 tval)) (= 0 (mod n2 tval))) \n      tval \n      (recur (dec tval) n1 n2)\n  )\n)", "problem": 66, "user": "50aca31fe4b071b89ef26230"}, {"code": "(fn c [a b] (if (= b 0) a (c b (rem a b))))", "problem": 66, "user": "508e13abe4b0f17d83ea26c7"}, {"code": "(fn [& args] \r\n  (let [[n m dd] args\r\n\t\td (or dd (min n m))\r\n\t\ta (/ n d)\r\n\t\tb (/ m d)] \r\n\t\t(if (or (ratio? a) (ratio? b)) (recur [n m (dec d)]) d)))", "problem": 66, "user": "500ec210e4b00fff93030f9d"}, {"code": "(fn gcd [x y]\n  (let [a (max x y)\n        b (min x y)]\n  (if (= b 1)\n    1\n  (if (= 0 (mod a b))\n    b\n    (gcd b (mod a b))))))", "problem": 66, "user": "50a8a04ae4b0deba384a58b9"}, {"code": "(fn divisor-66\n  [x y]\n  (letfn [(smaller [x y] (if (<= x y) x y))]\n    (last (filter #(= 0 (mod x %) (mod y %)) (map inc (range (smaller x y)))))))", "problem": 66, "user": "501b1a8ee4b0b12d9c5f4d81"}, {"code": "(fn [a b]\n  (some\n    #(if (= 0 (mod a %) (mod b %))\n      %\n      false)\n    (range (min a b) 0 -1)))", "problem": 66, "user": "4f253a49e4b0d66497709ff3"}, {"code": "(fn [a b]\n  (loop [a a b b]\n      (if (zero? b) a\n    (recur b (mod a b)))))", "problem": 66, "user": "50956c2be4b087f34d351ab2"}, {"code": "(fn gcd \n  [a b]\n  (if (= b 0) a\n    (recur b (mod a b))))", "problem": 66, "user": "50982769e4b04e098a4c726a"}, {"code": "(fn[x y] (loop [a x \n                 b y]\n    (cond \n     (zero? b) a\n      :default (recur b (mod a b)))))", "problem": 66, "user": "506406c8e4b075d771da6f9f"}, {"code": "(fn [a1 a2]\n   (loop [x (max a1 a2)\n          y (min a1 a2)]\n     (let [r (rem x y)]\n       (if (= r 0)\n         y\n         (recur y r)))))", "problem": 66, "user": "50868795e4b004985b776e5e"}, {"code": "(fn gcd [a b]\n  (if (= 0 b) a (gcd b (mod a b))))", "problem": 66, "user": "50acbd15e4b071b89ef26234"}, {"code": "(fn test66\n  [a b]\n  (if (= b 0)\n    a\n    (test66 b (mod a b))))", "problem": 66, "user": "50b0cffae4b009df37c708c5"}, {"code": "(fn [x y] (first (drop-while #(not (and (= 0 (mod x %) (mod y %)))) (reverse (range 1 (+ 1 (min x y)))))))", "problem": 66, "user": "50548ce8e4b0b1b9d1860ead"}, {"code": "(fn [a b] (last (filter #(and (= 0 (mod a %)) (= 0 (mod b %))) (range 1 (inc (min a b))))))", "problem": 66, "user": "50112acee4b0d82cfac69f4c"}, {"code": "(fn [x y] (loop [a x b y] (if (= 0 b) a (recur b (mod a b)))))", "problem": 66, "user": "50982cc7e4b04e098a4c726c"}, {"code": "(fn [x y]\n  (let [[xx yy] (sort [x y])] \n    (loop [a xx b yy]\n      (if (and (= (rem xx a) 0) (= (rem b a) 0))\n        a\n        (recur (dec a) b)))))", "problem": 66, "user": "50b64b55e4b0a86f8358ca6b"}, {"code": "(fn [n1 n2] (first (filter #(if (= 0 (mod n1 %) (mod n2 %) )%) (range (min n1 n2) 0 -1))))", "problem": 66, "user": "4fdf566fe4b05e33b9224f99"}, {"code": "(fn g [a b] (if (= b 0) a (g b (mod a b))))", "problem": 66, "user": "4f9920a3e4b0dcca54ed6cfc"}, {"code": "(\n  fn ff[ a b ](  \n      last ( filter \n    #( if( and ( = 0 (rem a %) ) ( = 0 ( rem b % )) ) true false)       \n        ( range 1 ( + 1 a ) )\n            ) \n  )\n)", "problem": 66, "user": "50bf7b72e4b0ffd967a66cc1"}, {"code": "(fn gcd [a b]\n  (if (= 0 b)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "4f03f3b7535dcb61093f6b85"}, {"code": "(fn gcd [x y] (if (= (mod x y) 0) y (gcd y (mod x y))  ))", "problem": 66, "user": "50646c01e4b007509339a58b"}, {"code": "(fn[x y] (apply max (filter #(and (= 0 (rem x %1)) (= 0 (rem y %1))) (range 1 (max x y)))))", "problem": 66, "user": "50b25f2ce4b03ea88043355f"}, {"code": "(fn GCD [x y]\n  (if (= y 0) x (GCD y (mod x y))))", "problem": 66, "user": "505dcfc8e4b0e6aca564be0d"}, {"code": "(fn [x y] (if (= 0 y) x (recur y (rem x y))))", "problem": 66, "user": "4f89d489e4b033992c121c7e"}, {"code": "(fn gcd [x y]\n  (let [min (min x y)\n        max (max x y)]\n    (if (zero? min)\n      max\n      (recur min (rem max min)))))", "problem": 66, "user": "50812debe4b01a93d3f38e4c"}, {"code": "(fn gcd [a b]\n  (if (= 0 (mod a b))\n    b\n    (gcd b (mod a b))\n    )\n  )", "problem": 66, "user": "50ae5659e4b0a40c9cfb08d2"}, {"code": "#(let [mn (min % %2) mx (max % %2) ]\n              (loop [r 1 m 1]\n                 (if (= m (inc mn)) r \n                  (if (and (zero? (rem mx m)) (zero? (rem mn m))) \n                    (recur m (inc m))\n                    (recur r (inc m))\n                  )\n                 )\n              )\n)", "problem": 66, "user": "50921f9ae4b09a7d0b586de1"}, {"code": "(fn [a b]\n  (loop [a a b b]\n    (if (= b 0)\n      a\n      (recur b (mod a b)))))", "problem": 66, "user": "50bd6033e4b0594b91591c66"}, {"code": "(fn [a b]\n  (cond\n    (= a b) a\n    (> a b) (recur (- a b) b)\n    (< a b) (recur a (- b a))\n  ))", "problem": 66, "user": "50b47c46e4b0c464d223d1b8"}, {"code": "(fn euklid [a b] (if (= b 0) a   (euklid b (mod a b))))", "problem": 66, "user": "4f327844e4b0d6649770a092"}, {"code": "(fn gcd [x y] (let [r (rem (max x y) (min x y))]\n                (if (not= r 0) (gcd (min x y) r) (min x y))\n               ))", "problem": 66, "user": "506717e2e4b03d366d7cb2ba"}, {"code": "(fn gcd [x y]\n  (if (> x y)\n    (gcd (- x y) y)\n  (if (< x y)\n    (gcd (- y x) x)\n  x))\n)", "problem": 66, "user": "50bfbf25e4b05ae8c1cbbd9b"}, {"code": "(fn [a b]\n  (let [g (max a b)\n        l (min a b)\n        r (rem g l)]\n    (if (== r 0)\n      l\n      (recur l r))))", "problem": 66, "user": "50608ea0e4b07251188e4456"}, {"code": "(fn gcd [k m]\r\n  (if (zero? m) k (gcd m (mod k m))))", "problem": 66, "user": "505dd5c4e4b0e6aca564be0e"}, {"code": "(fn lcd[x y] (if (= y 0) x (lcd y (rem x y))))", "problem": 66, "user": "5065bd94e4b0148eb3925aed"}, {"code": "(fn [x y]\n  (if (zero? y)\n    x\n    (recur y (mod x y))))", "problem": 66, "user": "50cb4cf6e4b0f78a8e1645b4"}, {"code": "(fn gcd [x y]\n  (if (zero? y) x\n     (recur y (mod x y))))", "problem": 66, "user": "4eca7a87535d6d7199dd3705"}, {"code": "#(loop [a (max % %2) b (min % %2)] (if (= 0 b) a (recur b (rem a b))))", "problem": 66, "user": "50c75d38e4b00bb60fe0c532"}, {"code": "(fn gcd [x,y]\n   (if(or (zero? y)) x \n     (gcd y (mod x y))))", "problem": 66, "user": "50c8697ce4b00bb60fe0c53f"}, {"code": "(fn gcd [x y] (cond (> x y) (gcd (- x y) y)\n                    (< x y) (gcd y (- y x))\n                    :else x))", "problem": 66, "user": "50c6fad1e4b00bb60fe0c52d"}, {"code": "(fn [a b]\n   (let [divs (fn [c] (->> (range 1 (inc c)) reverse (filter #(= (rem c %) 0)) set))\n         e1 (divs a)\n         e2 (divs b)\n         ]\n     (->> (clojure.set/intersection e1 e2) sort reverse first)\n     ))", "problem": 66, "user": "50cae881e4b0f75dcc9a6e51"}, {"code": "(fn [a b]                                                  \n  (loop [x (min a b)]                                            \n    (if (or (not= 0 (mod b x)) (not= 0 (mod a x)))             \n      (do                                                        \n        (println x)                                             \n        (recur (- x 1)))                                        \n      x)))", "problem": 66, "user": "509b152be4b0412cdea6eb1e"}, {"code": "(fn f[a b](if (= b 0) a (f b (mod a b))))", "problem": 66, "user": "50503117e4b0a02f9cffdeb5"}, {"code": "#(loop [a %1 b %2]\n   (if (= a b)\n     a\n     (if (or (= a 1) (= b 1))\n       1\n       (recur (min a b) (- (max a b) (min a b))))))", "problem": 66, "user": "4f1e4ab5535d64f603146496"}, {"code": "(fn gcd [a b]\n\t(if (zero? b) a (recur b (mod a b))))", "problem": 66, "user": "50c9e5e3e4b0a409464667d7"}, {"code": "(fn f [x y] (let [[a b] (sort [x y])] (if (= a 0) b (f a (- b a)))))", "problem": 66, "user": "50733b31e4b0e3170b5a869a"}, {"code": "(fn gcd [a b] (cond\n               (> a b) (gcd b a)\n               (= 0 (rem b a)) a\n               :else (gcd b (rem b a))\n               )\n  )", "problem": 66, "user": "4f8b27b3e4b02e764a0a5179"}, {"code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "problem": 66, "user": "4f072644535dcb61093f6c20"}, {"code": "#(loop [a % b %2]\n      (if (zero? b) a,\n\t  (recur b (mod a b))))", "problem": 66, "user": "4ff4f5c4e4b0678c553fc362"}, {"code": "(fn [x y] \n  (cond\n   (zero? x) y\n   (zero? y) x\n   :else (recur y (mod x y))))", "problem": 66, "user": "4f0412f8535dcb61093f6b99"}, {"code": "(fn [a b]\n           (loop [x a y b]\n              (if (= y 0)\n                  x\n                  (recur y (rem x y)))))", "problem": 66, "user": "4f03f197535dcb61093f6b84"}, {"code": "#(loop [a % b %2]\n   (if (zero? b) \n     a\n     (recur b (mod a b))))", "problem": 66, "user": "4e71a12c535d5021c1a8964f"}, {"code": "(fn gcd [i1 i2] (if (= i1 i2) i1 (if (> i1 i2) (gcd (- i1 i2) i2) (gcd (- i2 i1) i1))))", "problem": 66, "user": "50b24a2fe4b03ea88043355c"}, {"code": "(fn gcd [a b]\n  (cond\n   (> b a) (gcd b a)\n   (= (mod a b) 0) b\n   \n   :else\n   (gcd b (mod a b))))", "problem": 66, "user": "50d8f4b6e4b01f0871336e74"}, {"code": "#(loop [x (min %1 %2)] \n    (if (zero? (+ (mod %1 x) (mod %2 x))) x (recur (dec x))  ) )", "problem": 66, "user": "50cf2267e4b0e61f11ddcd8c"}, {"code": "(fn [x y] \n  (letfn[(max-fac [a b c]\n           (if (and (= 0 (mod a c)) (= 0 (mod b c)))\n             c\n             (recur a b (dec c))))]\n    (max-fac x y (max x y))))", "problem": 66, "user": "50ccf729e4b0f7a459302aac"}, {"code": "(fn [a b]\n  (cond\n   (= a b) a\n   (> a b) (recur (- a b) b)\n   :else (recur a (- b a))))", "problem": 66, "user": "50d93c53e4b0fd36a4b89223"}, {"code": "(fn gcd [n1 n2] \n  (->>\n    (range (min n1 n2) 0 -1)\n    (filter #(and (= (mod n1 %) 0) (= (mod n2 %) 0)))\n    (first)))", "problem": 66, "user": "4f91fd31e4b0dcca54ed6ca8"}, {"code": "(fn [a b]\n  \t(first \n     \t(for [x (range (min a b) 0 -1) \n              :when (= 0 (mod a x) (mod b x))]\n          x)))", "problem": 66, "user": "4e9c3648535dbda64a6f6b7d"}, {"code": "(fn g [a b](let [m (min a b) n (max a b)](if (= a b) a (g m (- n m)))))", "problem": 66, "user": "4e778d36535d324fb2983d71"}, {"code": "(fn [a b]\n   (cond\n    (= a b) a\n    (> a b) (recur (- a b) b)\n    :else (recur a (- b a))))", "problem": 66, "user": "507b7dbee4b09034bfeeb71e"}, {"code": "(fn abs [a b]\n  (cond (= b 0) a\n        :else (recur b (rem a b))))", "problem": 66, "user": "5021f0b3e4b00bba4502f7ac"}, {"code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "50d86fe2e4b01f0871336e67"}, {"code": "(fn [a b]\n   (let [find-first (fn [f coll] (first (filter f coll)))\n         next-pair (fn [[x y]] [(min x y) (rem (max x y) (min x y))])\n         pairs (iterate next-pair [a b])]\n     (first (find-first #(zero? (second %)) pairs))))", "problem": 66, "user": "50a7ef7fe4b090657f4a5ce0"}, {"code": "(fn d ([a b] (let [m (max a b)] (d a b m))) ([a b m]  (if (and (= 0 (mod a m)) (= 0 (mod b m))) m (d a b (dec m)))    ))", "problem": 66, "user": "50d179c7e4b05a71a896ef56"}, {"code": "#(let [i (rem % %2)]\n   (if (zero? i)\n     %2\n     (recur %2 i)\n   )\n)", "problem": 66, "user": "50e3cf55e4b01912b3285c45"}, {"code": "(fn [x y]\n  (if\n    (> x y) (recur y x)\n    (if\n      (= (rem y x) 0) x\n      (recur (rem y x) x))))", "problem": 66, "user": "50bfe725e4b080409b860f26"}, {"code": "(fn [a b] (last (filter #(and (zero? (rem a %)) (zero? (rem b %))) (range 1 (inc a)))))", "problem": 66, "user": "50e3ec87e4b0463d32072486"}, {"code": "; not optimal but works :)\n(fn [a1 b1] \n  (last \n   (let [a (max a1 b1) b (min a1 b1)] \n     (filter #(= 0 (+ (mod a %) (mod b %))) (range 1 (+ b 1))))))", "problem": 66, "user": "50de11b2e4b061dbdced7217"}, {"code": "(fn gcf [n m]\n  (last (sort (clojure.set/intersection \n    (set (filter (fn[i] (= 0 (rem n i))) (range 1 (inc n))))\n    (set (filter (fn[j] (= 0 (rem m j))) (range 1 (inc m))))\n  )))\n)", "problem": 66, "user": "50e496e8e4b0cb9ec68fbca0"}, {"code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "50e3ddd4e4b01912b3285c47"}, {"code": "#(loop [a %1 b %2 c (min a b)] (if (or (and (= 0 (mod a c))\n\t\t\t\t\t\t (= 0 (mod b c)))\n\t\t\t\t\t    (= 1 c) ) c \n\t\t\t\t      (recur a b (dec c))))", "problem": 66, "user": "503539dee4b0ed9c821488f6"}, {"code": "#(if (zero? %2) %1 (recur %2 (rem %1 %2)))", "problem": 66, "user": "4db29f98535df7e46ed9b6c1"}, {"code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "50e8ff6be4b0ebbe794eb7f3"}, {"code": "(fn gcd\n  [a b]\n  (cond\n   (< b a) (gcd b a)\n   (zero? a) b\n   :else (gcd (mod b a) a)))", "problem": 66, "user": "4ffc10aae4b0678c553fc3d6"}, {"code": "(fn [& args] (last (filter (fn [e] (every? #(zero? (mod % e)) args)) (range 1 (inc (apply min args))))))", "problem": 66, "user": "50e8a340e4b0ebbe794eb7ed"}, {"code": "(fn g [a b]\n     (if (zero? b)\n       a\n       (g b (mod a b))))", "problem": 66, "user": "50e87427e4b0ebbe794eb7e8"}, {"code": "#(if (zero? %) %2 (recur (mod %2 %) %))", "problem": 66, "user": "50e7dd5de4b077ad597af36b"}, {"code": "(fn ggt [a b] (if (= 0 b) a (if (= a 0) b (if (> a b) (ggt (- a b) b) (ggt a (- b a))))))", "problem": 66, "user": "4e2164ff535d04ed9115e815"}, {"code": "(fn gcd [a b] \n  (if (< a b) (recur b a)\n    (if (zero? b) a (recur b (rem a b)) )))", "problem": 66, "user": "50d0d4c8e4b00b15ecee976a"}, {"code": "(fn [a b] (if (= b 0) a\n            (recur b (mod a b))))", "problem": 66, "user": "50dfb660e4b061dbdced7228"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "50493b52e4b06e84b772a23e"}, {"code": "(fn [a b]\n  (cond (zero? b) a\n        :else (recur b (rem a b))))", "problem": 66, "user": "50bc23e4e4b0594b91591c3c"}, {"code": "(fn [x y]\n  (loop [[a b] (if (> x y) [x y] [y x])]\n    (if (= b 0) a (recur [b (mod a b)]))))", "problem": 66, "user": "4fbf2818e4b081705acca317"}, {"code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "problem": 66, "user": "50ed4626e4b01236b1d4983c"}, {"code": "(fn [a b]\n  (let [[g l] (if (< a b) [b a] [a b])\n        rem (mod g l)]\n    (if (= rem 0)\n      l\n      (recur l rem))))", "problem": 66, "user": "508c3d42e4b0f17d83ea26b2"}, {"code": "(fn [a b] ; Euclid\n  (if (zero? a)\n    b\n    (recur (mod b a) a)))", "problem": 66, "user": "50ef4e2be4b0a78662fa2653"}, {"code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "problem": 66, "user": "50ef9a7ae4b0bdaecbb47d9e"}, {"code": "(fn [a b]\n  (loop [x (max a b)\n         y (min a b)]\n    (if (= y 0)\n      x\n      (recur y (rem x y)))))", "problem": 66, "user": "50ed3c6be4b01236b1d4983b"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "50e4b066e4b0cb9ec68fbca6"}, {"code": "#(loop [n %1\n        d %2]\n   (let [r (rem n d)]\n   \t (cond \n      \t(> r 1) (recur d r)\n        (= r 1) 1\n        (= r 0) d)))", "problem": 66, "user": "4e6e3aac535d5021c1a89603"}, {"code": "(fn [num1 num2]\n  (loop [m,(max num1 num2) n,(min num1 num2)]\n    (if (zero? (mod m n))\n      n\n      (recur n (mod m n))\n      )))", "problem": 66, "user": "50f0d000e4b0c5f4fa5ddb6f"}, {"code": "(fn greatestCD [number1 number2] (if (zero? number2) number1 (recur number2 (mod number1 number2))))", "problem": 66, "user": "50ee145de4b06330c1f87c53"}, {"code": "(fn [x y]\n  (let\n  \t[max-e (max x y) \n     min-e (min x y)\n     rt (rem max-e min-e)\n     ct (quot max-e min-e)]\n        \n    (cond\n     (zero? rt) min-e\n     :else (recur min-e rt))))", "problem": 66, "user": "50ed5d1be4b06330c1f87c37"}, {"code": "(fn gcd [x y] (if (zero? y) x (recur y (mod x y))))", "problem": 66, "user": "50ef56dfe4b0bdaecbb47d94"}, {"code": "(fn [a b] (loop [d (if (> a b) b a)] (if (and (= (rem a d) 0) (= (rem b d) 0)) d (recur (dec d)))))", "problem": 66, "user": "50ef3e5de4b0a78662fa2652"}, {"code": "(fn gcd [a b] (cond (= a b) a\n                    (< a b) (gcd a (- b a))\n                    (> a b) (gcd (- a b) b)))", "problem": 66, "user": "4ec1b090535dfed6da9c6db5"}, {"code": "(fn gcd [x y]\n    (if (zero? (mod x y))\n      y\n      (gcd y (mod x y))))", "problem": 66, "user": "4f592f83e4b0030a34fb2ad2"}, {"code": "(fn [a b]\n   (case b\n     0 a\n     (recur b (mod a b))))", "problem": 66, "user": "50f1dedbe4b0897c4366dcd8"}, {"code": "(fn [a b]\n  (let [get-divisor (fn [n] (into #{}\n                              (filter #(zero? (rem n %))\n                                      (range 1 (inc n)))\n                              ))\n        a-divisor (get-divisor a)\n        b-divisor (get-divisor b)\n        commom-divisor (clojure.set/intersection a-divisor b-divisor)]\n    (apply max commom-divisor)))", "problem": 66, "user": "50ed9e8de4b06330c1f87c44"}, {"code": "#(.gcd (biginteger %) (biginteger %2))", "problem": 66, "user": "4ebaf790535dfed6da9c6d6e"}, {"code": "(fn gcd [x y]\n  (->> (range (min x y) 0 -1)\n      (filter (fn [p]  (every? identity (map #(integer? (/ %1 p)) [x y]))))\n      (first)\n      )\n  )", "problem": 66, "user": "4fd9d162e4b05e33b9224f3c"}, {"code": "#(loop [a %1, b %2]\n     (if (= 0 b)\n       a\n       (recur b (mod a b))))", "problem": 66, "user": "4f038567535dcb61093f6b0c"}, {"code": "(fn [x y]\n  (let [big   (max x y)\n        small (min x y)]\n    (if (or (= big small) (= small 1)) small\n      (recur small (- big small)))))", "problem": 66, "user": "505aa653e4b021387fb89857"}, {"code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "50f0ec9ce4b0d527ce5b30df"}, {"code": "(fn gcd [a b]\n   (last (filter #(= 0 (rem a %) (rem b %)) (range 1 (inc(min a b)) )))\n  )", "problem": 66, "user": "50f4894be4b004d364930528"}, {"code": "(fn gcd [a b]\n    (cond (> a b) (gcd (- a b) b)\n          (< a b) (gcd a (- b a))\n          :else a))", "problem": 66, "user": "50eddbc4e4b06330c1f87c4b"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "50fbf811e4b0d10d794c19f1"}, {"code": "(fn gcd [a b]\n  \"Euclid's algorithm for computing greatest common divisor of positive values.\"\n  (cond\n     (= a b) a\n     (> a b) (gcd (- a b) b)\n     :else   (gcd a (- b a))))", "problem": 66, "user": "50b8914ce4b0cba0e598b64d"}, {"code": "(fn [a b]\n  (reduce max (filter #(= (mod  a %) (mod  b %) 0) (range 1 (inc (min a b))))))", "problem": 66, "user": "50e47fa5e4b0cb9ec68fbc9c"}, {"code": "#(loop [a % b %2]\n   (if (= (mod a b) 0) \n     b \n     (recur b (mod a b))\n     ))", "problem": 66, "user": "50d8739ae4b01f0871336e68"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "50ec4ed7e4b04edc33777046"}, {"code": "(fn gcd [x y] (if (= (* x y) 0) (+ x y) (gcd (- (max x y) (min x y)) (min x y))))", "problem": 66, "user": "50fbdacfe4b0d10d794c19f0"}, {"code": "(fn [x y]\n    (loop [div (min x y)]\n      (if (= 1 div)\n        1\n        (if (every? #(= 0 (mod % div)) [x y])\n          div\n          (recur (dec div))))))", "problem": 66, "user": "50d46d53e4b09cc622d65a69"}, {"code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (rem a b))))", "problem": 66, "user": "5006b7d2e4b0678c553fc48c"}, {"code": "(fn gcd [a b] (loop [x (min a b)] (if (and (= 0 (rem a x)) (= 0 (rem b x))) x (recur (dec x)))))", "problem": 66, "user": "50ef311fe4b0a78662fa2651"}, {"code": "(fn gcd [a b & [c]]\n  (cond (> a b) (gcd b a b)\n        (nil? c) (gcd a b a)\n        (and (= (mod b c) 0) (= (mod a c) 0)) c\n       :else (gcd a b (dec c))))", "problem": 66, "user": "4f98b69ae4b0dcca54ed6cf4"}, {"code": "(fn [a b]\n\t(if (zero? b) a \n      \t(recur b (mod a b))))", "problem": 66, "user": "5097cfcbe4b00ad8bab4e977"}, {"code": "(fn gcd\n  [a b]\n  (if (= 0 b)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "51008b6fe4b0700a7a02d6e4"}, {"code": "#(let [r (fn q [x y]\n           (if (= y 0)\n             x\n             (q y (rem x y))))]\n   (if (> % %2)\n     (r % %2)\n     (r %2 %)))", "problem": 66, "user": "50c4a354e4b0210b849018af"}, {"code": "(fn [x y]\n  (cond\n   (= x y) x\n   (< x y) (recur x (- y x))\n   :else (recur (- x y) y)\n   )\n  )", "problem": 66, "user": "4edf95a8535d10e5ff6f5342"}, {"code": "(fn gcd [a b]\n  (if (> b a)\n    (gcd b a)\n    (loop [x a y b]\n      (if (= y 0)\n         x\n        (recur y (rem x y)  )))))", "problem": 66, "user": "5101192ae4b0bef64c30e266"}, {"code": "(fn [x y] (loop [testval (min x y)]\n            \t(if (and \n                     (= 0 (rem x testval)) \n                     (= 0 (rem y testval)))\n                testval \n                (recur (dec testval)))))", "problem": 66, "user": "50f2e5cee4b0ec8ee6fa8643"}, {"code": "(fn gcd [a b] (if (= (rem a b) 0) b (gcd b (rem a b ))))", "problem": 66, "user": "510931ede4b0c71f76895663"}, {"code": "(fn [x y] (apply max (keep #(if (= 0 (mod x %) (mod y %)) %) (range 1 (inc (min x y))))))", "problem": 66, "user": "5102489de4b00c483ae176f6"}, {"code": "(fn [m n] (if (zero? n) m (recur n (mod m n))))", "problem": 66, "user": "4e4be570535dc968683fc4d8"}, {"code": "(fn c [a b] (if (= b 0) a (c b (mod a b))))", "problem": 66, "user": "5008d149e4b0144d4f561e41"}, {"code": "(fn [a b] (if (zero? b)\n            a\n            (recur b (mod a b))))", "problem": 66, "user": "510db6cde4b078ea71921145"}, {"code": "(fn gcd [a b] (if (= b 0) a (gcd b (rem a b))))", "problem": 66, "user": "5105ed16e4b01150e115ebe2"}, {"code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "problem": 66, "user": "5106bc8ae4b01150e115ebec"}, {"code": "(fn [x y] (if (= y 0)\n            x\n            (recur y (mod x y))))", "problem": 66, "user": "507a33dee4b08327cd804a68"}, {"code": "(fn gcd [m n]\n  (if (zero? n)\n    m (gcd n (mod m n))))", "problem": 66, "user": "510d9d61e4b078ea71921141"}, {"code": "#(first (for [i (range %1 0 -1) :when (= 0 (mod %1 i) (mod %2 i))] i))", "problem": 66, "user": "5107b86de4b05b2b4eee7495"}, {"code": "(fn gcd ([a b] (if (zero? b) a (gcd b (mod a b)))))", "problem": 66, "user": "5102ac9de4b00c483ae176fa"}, {"code": "#(loop [n (min %1 %2)]\n   (if (or (= n 1) (and (= 0 (mod %2 n)) (= 0 (mod %1 n)))) n\n     (recur (dec n)))\n   )", "problem": 66, "user": "510d3dc6e4b078ea71921132"}, {"code": "#(if (= %2 0) ;; euclid's algorithm\n    %1\n    (recur %2 (mod %1 %2)))", "problem": 66, "user": "51105c7fe4b04c71fce993ef"}, {"code": "(let [d? (comp zero? rem)] (fn [x y] (apply max (filter #(and (d? x %) (d? y %)) (range 1 (inc (min x y)))))))", "problem": 66, "user": "4ff3df0fe4b0678c553fc355"}, {"code": "(fn [a b] (apply max (filter #(and (= (mod a %) 0) (= (mod b %) 0)) (range 1 (+ 1 (min a b))))))", "problem": 66, "user": "50bce014e4b0594b91591c63"}, {"code": "(fn gcd [x y]\n  (loop [a (max x y)\n         b (min x y)\n         r (rem a b)]\n    (if (= 0 r) b\n      (recur b r (rem b r)))))", "problem": 66, "user": "511442d0e4b0e9c109bb74d5"}, {"code": "(fn ! [a b]\n   (let [dividend (max a b) divisor (min a b)] \n     (if (= (mod dividend divisor) 0)\n       divisor\n       (! divisor (mod dividend divisor))\n       )\n     )\n   )", "problem": 66, "user": "5106dc1be4b01150e115ebf0"}, {"code": "#(loop [a %1 b %2] \n   (if (zero? b) a (recur b (mod a b))))", "problem": 66, "user": "4fa05b99e4b0dcca54ed6d47"}, {"code": "#(loop [result 1 i result] \n   (if (> i (min %1 %2))\n     result\n     (recur (if (and (= 0 (mod %1 i)) (= 0 (mod %2 i))) i result)\n            (inc i))))", "problem": 66, "user": "50e4f4e9e4b049a987753896"}, {"code": "(fn gcd [a b]\n\t(let [mn (min a b)\n        mx (max a b)\n        diff (- mx mn)]\n    (if (= mn diff) \n    \tmn\n      (gcd mn diff))))", "problem": 66, "user": "5114ab7be4b0ce5098ee73b5"}, {"code": "(fn gcd [x y]\n  (if (= y 0)\n    x\n    (gcd y (rem x y))))", "problem": 66, "user": "510cd1dde4b078ea71921124"}, {"code": "(fn maxdenominator\n  [x y]\n  (some #(when (= (rem x %) (rem y %) 0) %) (range (min y x) 0 -1) ))", "problem": 66, "user": "50f53694e4b057d4c52de881"}, {"code": "(fn euc [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "4fe8fda4e4b0547ebccb2438"}, {"code": "(fn [n m]\n  (loop [ k (min m n)]\n    (if \n      \t  (or (and (= 0 (mod n k)) (= 0 (mod m k))) (= k 1)) k\n    \t  (recur (dec k))\n    )\n  )\n)", "problem": 66, "user": "5081566ce4b0946d0443855b"}, {"code": "(fn\n  [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "50b29029e4b03ea880433563"}, {"code": "#(if (zero? %2) % (recur %2 (mod % %2)))", "problem": 66, "user": "50742549e4b054001656accf"}, {"code": "(fn [a b]\n    (first\n      (filter #(and (= 0 (mod a %)) (= 0 (mod b %)))\n              (reverse (range 1 (inc (min a b)))))))", "problem": 66, "user": "4e964f4a535dbda64a6f6b42"}, {"code": "(fn gcd [a b]\n  (if (< a b)\n    (gcd b a)\n    (let [q (quot a b)\n          r (rem a b)]\n      (if (= 0 r)\n        b\n        (gcd b r)))))", "problem": 66, "user": "50eebf46e4b06330c1f87c61"}, {"code": "(fn gcd [a b]\n  (if (= a b) a\n    (if (> a b) (gcd (- a b) b) (gcd a (- b a)))))", "problem": 66, "user": "51181009e4b0e0897831a60f"}, {"code": "#(loop [a %\n        b %2]\n   (if (pos? b)\n     (recur b (mod a b))\n     a))", "problem": 66, "user": "4ecc1d85535d23f0362276f8"}, {"code": "(fn gcd [a b]\n  ; Dumb, but it works\n  (loop [n (max a b)]\n    (if (and \n         (= (rem a n) 0)\n         (= (rem b n) 0))\n      n\n      (recur (dec n))\n      )\n    )\n  )", "problem": 66, "user": "5119f3d5e4b06c8af0111818"}, {"code": "(fn [a b]\n    (if (= a b)\n      a\n      (let [m1 (min a b)\n            m2 (max a b)]\n        (recur m1 (- m2 m1)))))", "problem": 66, "user": "4e50ad74535dc968683fc4ec"}, {"code": "(fn [x y] (last (reduce (fn [seed item] (if (and (= (rem (first seed) item) 0) (= (rem (second seed) item) 0)) (cons x (cons y (cons item '()))) seed)) (cons x (cons y '(0))) (rest (range (+ y 1))))))", "problem": 66, "user": "50f9c7fde4b0e7c80cb15a52"}, {"code": "(fn [x y]\n   (first (filter #(= 0 (rem x %) (rem y %))\n                  (reverse (range (inc (min x y)))))))", "problem": 66, "user": "50e3e108e4b01912b3285c48"}, {"code": "(fn\n  [& xs]\n  (letfn [(dvs [x] (filter #(= 0 (mod x %)) (range 1 (inc x))))]\n    (->> xs\n         (map dvs)\n         (map set)\n         (apply clojure.set/intersection)\n         (apply max))))", "problem": 66, "user": "4fca4c37e4b0ee37620e184f"}, {"code": "(fn [a b]\n  (last\n    (remove nil?\n            (map\n              #(if (or (ratio? (/ a %))\n                       (ratio? (/ b %)))\n                 nil\n                 %)\n              (range 1 (max a b))))))", "problem": 66, "user": "50d8de3fe4b01f0871336e72"}, {"code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "5099283ce4b0cae2931060af"}, {"code": "(fn [a b]\r\n\t(last (sort (into [] (reduce clojure.set/intersection\r\n   (map (fn [x]\r\n     (into #{} (filter (complement nil?)\r\n     (map #(if (== 0 (mod x %)) %) (range 1 (inc x))))\r\n     )) [a b])\r\n))))\r\n )", "problem": 66, "user": "510a6bece4b06956752d35af"}, {"code": "(fn [x y]\n   (let [start (min x y)\n        pos-vals (reverse (range 1 (inc start)))\n        x-vals (set (cons 1 (map #(/ x %) pos-vals)))\n        y-vals (set (cons 1 (map #(/ y %) pos-vals)))]\n     (reduce max (filter integer? \n            (clojure.set/intersection x-vals y-vals)))))", "problem": 66, "user": "4e9ff8d0535d7eef3080729c"}, {"code": "(fn [a b]\n  (cond\n   (= a b) a\n   (> a b) (recur (- a b) b)\n   :else (recur a (- b a))))", "problem": 66, "user": "51195e77e4b055cfb310d499"}, {"code": "(fn [n m]\n  (letfn\n    [(nat []\n          (iterate #(+ 1 %) 1))]\n     (let [mx (min n m)]\n       (apply max\n              (for [mx' (take mx (nat))\n                     :when (and (= (mod m mx') 0) \n                            (= (mod n mx') 0))]\n             mx')))))", "problem": 66, "user": "5100d7dbe4b04f1d96d946df"}, {"code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "problem": 66, "user": "50f9739ce4b0e7c80cb15a4d"}, {"code": "#(last (remove nil? (for [x (range 1 (inc %1))]\n           (if (and (zero? (mod %1 x)) (zero? (mod %2 x)))\n             x))))", "problem": 66, "user": "511b810ce4b07ab9ec456182"}, {"code": "(fn f [a b] (if (zero? b) a (f b (rem a b))))", "problem": 66, "user": "510b704ee4b078ea71921100"}, {"code": "(fn gcd [a b]\n  (if (= b 0) a \n    (gcd \n     (if (< a b) (- b a)(- a b))\n     (if (< a b) a b)\n    )\n  )\n )", "problem": 66, "user": "511a0374e4b06c8af011181a"}, {"code": "(fn gcd [a b]\n  (if (= a 0) b\n    (gcd (rem b a) a)))", "problem": 66, "user": "50b35486e4b03ea88043356a"}, {"code": "(fn gcd [x y]\n  (if (= x y) x (let [small (min x y), large (max x y)]\n                  (gcd (- large small) small))))", "problem": 66, "user": "510acd6ee4b078ea719210f4"}, {"code": "(fn gcd [x y]\n    (let [l (first (sort [x y])) g (last (sort [x y]))]\n      (if\n       (= 0 (mod g l)) l\n       (gcd (mod g l) l))))", "problem": 66, "user": "511ac026e4b0c87c59c9670e"}, {"code": "(fn nod [n1 n2]\n  (let [[k1 k2] (sort [n1 n2]) r (mod k2 k1)]\n    (if (zero? r)\n      k1\n      (nod r k1))))", "problem": 66, "user": "511f88eee4b085952a83535f"}, {"code": "(fn [x y]\n  (if (< x y) (recur y x)\n    (if (= 0 (rem x y)) y\n      (recur (- x y) y))))", "problem": 66, "user": "51284226e4b03a34742b4308"}, {"code": "(fn gcd [x y]\n  (if (> y x)\n    (gcd y x)\n    (if (zero? (mod x y))\n      y\n      (gcd y (mod x y)))))", "problem": 66, "user": "5123ac8ee4b061b4c6f0e0b1"}, {"code": "(fn sieve [a b]\n  (let [big (max a b)\n        small (min a b)\n        remainder (mod big small)]\n    (if (= 0 remainder)\n      small\n      (sieve small remainder))))", "problem": 66, "user": "51281b25e4b03a34742b4304"}, {"code": "(fn f [x y]\n  (cond (> x y) (f y x)\n        (= x y) x\n        1 (f (- y x) x)))", "problem": 66, "user": "51256b40e4b05d10e3e395f8"}, {"code": "(fn gcd [a b]\n  (if (= b 0)\n\ta\n    (recur b (mod a b))))", "problem": 66, "user": "4e9a1512535dbda64a6f6b6e"}, {"code": "(fn [a b]\n   (some #(if \n             (= 0 (+ (mod a %) (mod b %))) \n             % \n             nil) (reverse (range 1 (inc (min a b))))))", "problem": 66, "user": "50d3b03fe4b030b634c368b9"}, {"code": "(fn gcd [a b]\n    (if (= b 0) a (gcd b (mod a b))))", "problem": 66, "user": "5125834ae4b05d10e3e395fa"}, {"code": "(fn [a b]\n  (reduce\n \t\t(fn [r n]\n   \t\t(if (and (= 0 (mod a n))\n               (= 0 (mod b n)))\n     \t\t\tn\n     \t\t\tr))\n   1\n (range 1 (inc (/ (max a b) 2)))))", "problem": 66, "user": "50589113e4b06522596eba7f"}, {"code": "(fn gcd [a b] (if (= b 0) a (gcd b (rem a b))))", "problem": 66, "user": "5126dbabe4b083bb8f88cf0e"}, {"code": "#(let [min# (min %1 %2) \n       max# (max %1 %2)]\n  (loop [d min#]\n    (if (and (= 0 (mod max# d))\n             (= 0 (mod min# d)))\n      d\n      (recur (dec d)))))", "problem": 66, "user": "5127e504e4b03a34742b4302"}, {"code": "(fn [a b] (if (zero? b) a (recur b (rem a b))))", "problem": 66, "user": "5125745ae4b05d10e3e395f9"}, {"code": "(fn greatest-common-divisor\n  [a b]\n  (let [m (mod a b)]\n    (if (zero? m)\n      b\n      (recur b m))))", "problem": 66, "user": "511720eae4b0063b4e3e16da"}, {"code": "(fn [num1 num2]\n  (loop [num1 num1 num2 num2]\n    (if(zero? num2) num1,\n     (recur num2 (mod num1 num2)))))", "problem": 66, "user": "50621cbde4b0341461c88951"}, {"code": "#(loop [n (min %1 %2)]\n   (if (= n 1) 1\n     (if (and (= (mod %1 n) 0) (= (mod %2 n) 0)) n\n       (recur (dec n)))))", "problem": 66, "user": "511618b1e4b0d4f670fd2fdf"}, {"code": "(fn gcd [ x y]\n  (let [s (min x y)\n        b (max x y) ]\n       (if (= 0 (rem b s))\n           s\n           ( recur s (- b s) ))))", "problem": 66, "user": "4f030775535dcb61093f6a43"}, {"code": "(fn g [a b] (if (= b 0) a (g b (rem a b))))", "problem": 66, "user": "502d3912e4b0d96a44ab2030"}, {"code": "#(loop [a (max %1 %2) b (min %1 %2)]\n   (let [m (mod a b)]\n     (if (> m 0)\n       (recur b m)\n       b\n       )\n     )\n)", "problem": 66, "user": "4fbbcf0ce4b081705acca2ee"}, {"code": "(fn gcd_of_two\n  ([numone numtwo]\n    (cond\n      (=  numtwo 0) numone\n      :else\n        (recur numtwo (mod numone numtwo))\n    )\n  )\n)", "problem": 66, "user": "502be4fae4b08f5602f232eb"}, {"code": "(fn gcd [x y]\n  (letfn [(findcd [n]\n                  (filter #(and (< % (inc n)) \n                                (= (rem n %) 0))\n                          (range 1 (inc n))))]\n    (loop [l (min x y),\n           r (max x y)\n           lc (reverse (findcd l)),\n           rc (reverse (findcd r))]\n      (if (some (conj #{} (first lc)) rc)\n        (first lc)\n        (recur l r (rest lc) rc)))))", "problem": 66, "user": "512474ede4b02c3f2a072cce"}, {"code": "(fn greatest-common-divisor [x y]\n (let [lesser (if (< x y) x y)\n       isValidDivisor (fn [dividend divisor]\n                        (== (/ dividend divisor) (Math/floor (/ dividend divisor))))\n       isSuitable (fn [divisor] (and (isValidDivisor x divisor) (isValidDivisor y divisor)))]\n   (loop [guess lesser]\n     (if (= guess 1)\n       guess\n       (if (isSuitable guess)\n         guess\n         (recur (dec guess)))))))", "problem": 66, "user": "4fae4c11e4b081705acca248"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "4f525fdce4b03ad3f0c10d37"}, {"code": "(fn gcd [a b] (loop [aa a bb b] (if (zero? bb) aa (recur bb (mod aa bb)))))", "problem": 66, "user": "4ff2ff7ce4b0678c553fc342"}, {"code": "(fn [x y]\n  (if (zero? y)\n    x\n    (recur y (rem x y))))", "problem": 66, "user": "512eb723e4b0b740abc5982b"}, {"code": "(fn [x y] (some #(if (and (= 0 (mod x %)) (= 0 (mod y %))) % false) (range (min x y) 0 -1)))", "problem": 66, "user": "510967aae4b07c05fdf6dc0f"}, {"code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "5125d963e4b05d10e3e395fe"}, {"code": "(fn [x y]\n  (if (zero? (mod x y)) y\n      (recur y (mod x y))))", "problem": 66, "user": "511b9017e4b00c2a1fa7ff6b"}, {"code": "(fn gcd [a b]\n  (letfn [(factors [x]\n            (filter #(zero? (rem x %)) (range 1 (inc x))))]\n    (apply max\n           (clojure.set/intersection\n            (set (factors a))\n            (set (factors b))))))", "problem": 66, "user": "4dada426c9a9d6ed2a99dc57"}, {"code": "(fn gcd [a b]\n\t(if (= 0 b)\n\t\ta\n\t\t(gcd b (rem a b))\n\t)\n)", "problem": 66, "user": "511cca27e4b00c2a1fa7ff7d"}, {"code": "(fn [a b] (first (filter #(and (zero? (mod a %)) (zero? (mod b %))) (range a 0 -1))))", "problem": 66, "user": "5132c6f0e4b021281ec7b6d3"}, {"code": "(fn gcd\n  ([n1 n2]\n   (gcd n1 n2 (min n1 n2)))\n  ([n1 n2 ca]\n   (if\n     (and\n       (= 0 (rem n1 ca))\n       (= 0 (rem n2 ca)))\n     ca\n     (recur n1 n2 (dec ca)))))", "problem": 66, "user": "504e12ade4b078edc5f593b7"}, {"code": "(fn [x y]\n  (some\n    #(if (every? zero? (list (mod x %) (mod y %))) %)\n    (reverse (range 1 (inc (/ (max x y) 2))))))", "problem": 66, "user": "51057b2be4b06d28cacc92e8"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "504ffb8fe4b0a02f9cffdeae"}, {"code": "(fn div [x y]\n  (if (<= x y)\n    (let [n (rem y x)]\n      (if (= n 0)\n        x\n        (div x n)))\n    (div y x)))", "problem": 66, "user": "4fc8769be4b0ee37620e1833"}, {"code": "(fn gcd [a, b]\n  (cond\n    (= b 0) a\n    :else   (gcd b (rem a b))\n  )\n)", "problem": 66, "user": "51365524e4b04ac1f358dd52"}, {"code": "(fn [a b] (apply max (filter #(and (zero? (rem a %)) (zero? (rem b %))) (range 1 (inc (min a b))))))", "problem": 66, "user": "4e6f1b7a535d5021c1a89618"}, {"code": "(fn [a b]\n  (if (zero? (rem a b))\n    b\n    (recur b (rem a b))))", "problem": 66, "user": "50ebd63ce4b04edc3377703c"}, {"code": "(fn [x y]\n  (loop [argz (sort > [x y])]\n  \t(let [remainder (apply rem argz)]\n  \t(if (= remainder 0) (last argz)\n      (recur (sort > [(last argz) remainder]))))))", "problem": 66, "user": "4de52c87535d08e6dec9fdf0"}, {"code": "(fn [a b]\n  (if (= a b)\n    a\n    (if (> a b)\n      (recur (- a b) b)\n      (recur b a))))", "problem": 66, "user": "51000111e4b00d7ad4cab15e"}, {"code": "(fn [a b] \n  (cond\n    (> a b) (recur b (- a b))\n    (< a b) (recur (- b a) a)\n    :else a))", "problem": 66, "user": "5117c31ee4b0e0897831a60c"}, {"code": "(fn [a b]\n  (cond\n   (> b a) (recur b a)\n   (= 0 b) a\n   :else (recur b (rem a b))))", "problem": 66, "user": "50b668dde4b08fb537db98f2"}, {"code": "(fn [a b]\n  (loop [x a, y b]\n    (if (= y 0)\n      x\n      (recur y (mod x y)))))", "problem": 66, "user": "4e7e4d5c535db169f9c7970f"}, {"code": "(fn [x y]\n  (last\n    (for\n      [i (range 1 (inc x))\n       :when (and\n               (= 0 (mod x i))\n               (= 0 (mod y i)))]\n      i)))", "problem": 66, "user": "51377c10e4b04059df19f305"}, {"code": "(fn [a b] (first (filter (fn [x] (and (zero? (rem a x)) (zero? (rem b x)))) (range (min a b) 0 -1))))", "problem": 66, "user": "4e823f41535db62dc21a62c8"}, {"code": "(fn ! [x y]\n  (cond \n   (> y x) (! y x)\n   (= y 0) x\n   :else (! y (mod x y))))", "problem": 66, "user": "50e0d5a3e4b061dbdced723d"}, {"code": "(fn [a b] (if (= 0 b) \n            a \n            (recur b (rem a b))))", "problem": 66, "user": "51352899e4b082aeb3a3f03b"}, {"code": "(fn [x y] (apply max (filter (set (filter #(= 0 (mod x %)) (range 1 (inc x)))) (filter #(= 0 (mod y %)) (range 1 (inc y))))))", "problem": 66, "user": "510dc185e4b078ea71921146"}, {"code": "(fn gcd[a,b] (if (zero? b) a\n                 (recur b (mod a b))))", "problem": 66, "user": "50fa01bce4b07934dda8b0ba"}, {"code": "#(loop [x (max % %2) y (min % %2)] (if (> (rem x y) 0) (recur y (rem x y)) y))", "problem": 66, "user": "5138d08be4b0a5db03d727db"}, {"code": "(fn [a b] (apply max (filter #(and (= 0 (rem a %)) (= 0 (rem b %))) (range 1 (max a b)))))", "problem": 66, "user": "51307b84e4b08c712d3fae39"}, {"code": "(fn gcd [a b]\n  (let [m (max a b) n (min a b)]\n  (loop [m m n n]\n    (if (= n 0)\n      m\n      (recur n (mod m n))))))", "problem": 66, "user": "4f8ab084e4b02e764a0a5171"}, {"code": "(fn gcd [a b] (if (= a b) a (if (> a b) (recur (- a b) b) (recur a (- b a)))))", "problem": 66, "user": "513d121fe4b0e544971636a2"}, {"code": "(fn [x y] (loop [gg (min x y) coll (range 1 (+ 1 gg))] \n             (if (and (= 0 (rem x (last coll))) (= 0 (rem y (last coll)))) \n               (last coll) \n               (recur gg (drop-last coll)))))", "problem": 66, "user": "513ca934e4b0b86ece9f3228"}, {"code": "(fn [a b]\n ( loop [ a a\n        b b\n        i b\n        ]\n\n  (if (= (mod a i) (mod b i) 0 )\n    i\n    (recur a b (dec i)))))", "problem": 66, "user": "5124619ae4b02c3f2a072ccd"}, {"code": "(fn [x y]\n  (loop [a x b y]\n    (if (> b a) (recur b a)\n      (if (= (mod a b) 0)\n        b\n        (recur b (mod a b))))))", "problem": 66, "user": "513b77f3e4b00f740c76c403"}, {"code": "(fn [a b] (let [r (rem (max a b) (min a b))] (if (zero? r) (min a b) (recur (min a b) r))))", "problem": 66, "user": "513bb7a6e4b04402f587b77d"}, {"code": "(fn gcd\n  [q r]\n  (if (= r 0)\n    q\n    (recur r (mod q r))))", "problem": 66, "user": "51441ce7e4b0b4fb4ace5f41"}, {"code": "(fn [x y] (let [m (min x y) l (max x y)] (if (= 0 m) l (recur m (- l m)))))", "problem": 66, "user": "511d11d7e4b022853b0e079f"}, {"code": "(fn [x y]\n  (loop [m (max x y)\n        n (min x y)]\n    (if (zero? n)\n      m\n      (recur n (rem m n)))))", "problem": 66, "user": "5142ea50e4b0c172af7558ca"}, {"code": "(fn gcd [a b] (let [[a b] [(max a b) (min a b)]] (if (= a b) a (recur b (- a b)))))", "problem": 66, "user": "51424cc8e4b0b50abeb46b34"}, {"code": "(fn gcd[a b]\n   (if (= a b)\n     b\n     (if (> a b)\n       (gcd (- a b) b)\n       (gcd a (- b a))\n      )\n     )\n)", "problem": 66, "user": "513f53c6e4b051389b345b40"}, {"code": "(fn gcd [a b] (cond (zero? a) b (zero? b) a (and (even? a) (even? b)) (* 2 (gcd (/ a 2) (/ b 2))) (even? a) (gcd (/ a 2) b) (even? b) (gcd a (/ b 2)) (> a b) (gcd (/ (- a b) 2) b) (< a b) (gcd (/ (- b a) 2) a) :else a))", "problem": 66, "user": "5137c3b0e4b0509a8b470482"}, {"code": "(fn gcd[a b] (if (zero? b) a (gcd b (rem a b))))", "problem": 66, "user": "4ff01fa9e4b0678c553fc321"}, {"code": "(fn [a b] (if (zero? b) a (recur b (rem a b))))", "problem": 66, "user": "513f0565e4b051389b345b3b"}, {"code": "(fn f[a b]\n  (if (zero? b)\n    a\n    (f b (mod a b))))", "problem": 66, "user": "4e53bf5e535d8a8b8723a275"}, {"code": "(fn gcd [x y] (let [x0 (max x y) x1 (min x y)] (if (zero? x1) x0 (recur x1 (- x0 x1)))))", "problem": 66, "user": "5145832be4b0e8879607340a"}, {"code": "(fn [a b] (if (= b 0) a (recur b (mod a b))))", "problem": 66, "user": "51430fb2e4b0c172af7558ce"}, {"code": "(fn [x y]\n  (let [a (if (> x y) x y) b (if (> x y) y x)]\n    (loop [n a remain b]\n      (if-not (= remain 0)\n        (recur remain (mod n remain))\n        n))))", "problem": 66, "user": "513cb853e4b0b86ece9f322b"}, {"code": ";; Euclid's algorithm for gcd\n(fn [a b]\n  (loop [lge (if (> a b) a b)  sml (if (< a b) a b) ]\n    (let [rmdr (rem lge sml)]\n    (if (= rmdr 0) sml\n    (recur sml rmdr ))\n      )\n    )\n  )", "problem": 66, "user": "5135a74ae4b04ac1f358dd46"}, {"code": "(fn fuck [a b]\n  \t(let [big (max a b) small (min a b) rem (rem big small)]\n      (if (zero? rem)\n        small\n        (fuck small rem))))", "problem": 66, "user": "50e135f4e4b084616e11c667"}, {"code": "(fn f [a,b] (if (= a b)\n                a\n                (f (- (max a b) (min a b)) (min a b))))", "problem": 66, "user": "514b66f4e4b0bd81940b86cb"}, {"code": "(fn [a b]\n  (first (filter #(and (zero? (mod a %))\n                       (zero? (mod b %)))\n                 (range (min a b) 0 -1))))", "problem": 66, "user": "50e09313e4b061dbdced7233"}, {"code": "(fn gcd [x y]\n  (if (= y 0)\n    x\n    (gcd y (mod x y))\n    ))", "problem": 66, "user": "512a8ef7e4b0ff5c4bc1f99e"}, {"code": "#(if (= %2 0) %\n       (recur %2 (rem % %2)))", "problem": 66, "user": "514d8084e4b019235f6c0588"}, {"code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "4fbef9a6e4b081705acca316"}, {"code": "(fn gcd \n  [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "51502056e4b098b221effc25"}, {"code": "(fn f [x y] (if (= y 0) x (f y (mod x y))))", "problem": 66, "user": "514d398ee4b019235f6c0583"}, {"code": "(fn [a b] (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "5151aa14e4b03e678e393ad4"}, {"code": "(fn [m n]\n  (apply max\n         (clojure.set/intersection\n          (set (filter #(= 0 (rem m %)) (range 1 (inc m))))\n          (set (filter #(= 0 (rem n %)) (range 1 (inc n)))))))", "problem": 66, "user": "514721c6e4b0d520409ed392"}, {"code": "#(loop [x % y %2] (if (<= y 0) x (recur y (rem x y))))", "problem": 66, "user": "5047782ce4b0371827a27bc2"}, {"code": "#(if (zero? %2) % (recur %2 (mod % %2)))", "problem": 66, "user": "513dcc1ce4b0825f97f7f964"}, {"code": "(fn [a b]\n  (if (zero? b) a,\n    (recur b (mod a b))))", "problem": 66, "user": "4f50d933e4b03ad3f0c10d11"}, {"code": "#(if (= 0 %2) % (recur %2 (mod % %2)))", "problem": 66, "user": "51037468e4b00c483ae17702"}, {"code": "(fn x [a b] (loop [c a d b m (mod a b)]\n              (if (= m 0)\n                d\n                (recur d m (mod d m)))))", "problem": 66, "user": "4f5d0f25e4b0030a34fb2b33"}, {"code": "(fn [f-st s-nd]\n\t  (last (filter #(and (= 0 (mod f-st %))\n\t\t\t      (= 0 (mod s-nd %)))\n\t\t\t(range 1 (inc (min f-st s-nd))))))", "problem": 66, "user": "5016ac54e4b052339a490e7b"}, {"code": "#(if (= 0 %2) % (recur %2 (mod % %2)))", "problem": 66, "user": "4f296a80e4b0d6649770a02a"}, {"code": "#(let [m (min %1 %2)]\n    (loop [t m]\n      (if (and (= 0 (rem %1 t)) (= 0 (rem %2 t)))\n        t\n        (recur (dec t)))))", "problem": 66, "user": "4ef2eb4d535dced4c769f226"}, {"code": "#(loop [a %1 b %2] (cond (= a b) a (< a b) (recur (- b a) a) (> a b) (recur (- a b) b)))", "problem": 66, "user": "4fb4303fe4b081705acca2ac"}, {"code": ";; euclid's algorithm\n(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "4e58ef07535d8a8b8723a299"}, {"code": "(fn g [a b] (if (= b 0) a (g b (mod a b))))", "problem": 66, "user": "514afd1be4b0bd81940b86c6"}, {"code": "(fn gcd [x y]\n  (if (< x y) (gcd y x)\n    (if (= y 0) x (gcd y (mod x y)))\n   )\n  )", "problem": 66, "user": "514457fbe4b0b4fb4ace5f43"}, {"code": "(fn [a b] (last (filter #(and (= (rem a %) 0) (= (rem b %) 0)) (range 1 (inc (min a b))))))", "problem": 66, "user": "5150a7d7e4b03e678e393abb"}, {"code": "(fn gcd [a b] (if (= 0 b) a (gcd b (mod a b))))", "problem": 66, "user": "5158bba4e4b059418b97f0ab"}, {"code": "(fn gcd [a b]\n  (cond (= a b) a\n        (> a b) (gcd (- a b) b)\n        (< a b) (gcd a (- b a))))", "problem": 66, "user": "51533ecde4b0252ac4b16619"}, {"code": "(fn gcd [a b]\n  (cond\n    (= b 0) a\n    (> a b) (gcd b (- a b))\n    :else (gcd a (- b a))))", "problem": 66, "user": "515737f0e4b0b0b4b87062d0"}, {"code": "(fn gcd [a b]\n  \n   (if (zero? b) a\n       (gcd b (mod a b))))", "problem": 66, "user": "504e71cbe4b0f6ff3350c4b3"}, {"code": "(fn [x y]\n  (if (< x y)\n    (recur y x)\n    (if (zero? y)\n      x\n      (recur y (mod x y)))))", "problem": 66, "user": "515828b8e4b0a069fd272c71"}, {"code": "(fn [a b] (last (filter #(= 0 (mod a %) (mod b %)) (range 1 (inc a)))))", "problem": 66, "user": "5093ca51e4b097f48cc38585"}, {"code": "(fn gcd [x y]\n\t(let [smallest (if (< x y) x y)]\n\t\t(loop [curr smallest]\n\t\t\t(if (and (= (rem x curr) 0) (= (rem y curr) 0))\n\t\t\t\tcurr\n\t\t\t\t(recur (dec curr))))))", "problem": 66, "user": "50ed8a5fe4b06330c1f87c3d"}, {"code": "(fn gcd [a b]\n  (if (zero? b) a\n    (recur b (mod a b))))", "problem": 66, "user": "515c9f14e4b069911535cf16"}, {"code": "(fn gcd [a b]\n  (if (> a b)\n    (gcd b a)\n    (if (or (= a b) (= a 0))\n      b\n      (gcd (mod b a) a))))", "problem": 66, "user": "5110b8bae4b04c71fce993f4"}, {"code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "problem": 66, "user": "4fbcbd50e4b081705acca2f9"}, {"code": "(fn [a b]\n          (apply\n            max\n            (filter\n              #(and\n                 (= (rem a %) 0)\n                 (= (rem b %) 0))\n              (range\n                1\n                (+\n                  (min a b)\n                  1)))))", "problem": 66, "user": "514d7e29e4b019235f6c0587"}, {"code": "(fn gcd [p q]\n  (if (zero? q)\n    p\n    (gcd q (mod p q))))", "problem": 66, "user": "515a6151e4b0394f658fe241"}, {"code": "(fn gcd \n  [a b]\n  (if (or (not (integer? a)) (not (integer? b)))\n    (throw (IllegalArgumentException. \"gcd requires two integers\"))  \n    (loop [a a b b]\n      (if (zero? b) a,\n\t  (recur b (mod a b))))))", "problem": 66, "user": "50ab44b2e4b0f65d68208509"}, {"code": "(fn [a b]\n  (loop [c a d b]\n    (cond\n     (= d 0) c\n     :else (recur d (rem c d)))))", "problem": 66, "user": "5133e51ae4b0d7a043de8cf6"}, {"code": "(fn gcd [x y]\n  (if (zero? y) x\n      (gcd y (mod x y))))", "problem": 66, "user": "50bfb5fbe4b05ae8c1cbbd9a"}, {"code": "#(.gcd (biginteger %) (biginteger %2))", "problem": 66, "user": "50705886e4b07bd6ad9b9f2a"}, {"code": "(fn [n m](first (drop-while #(or (not= 0 (rem n %)) (not= 0 (rem m %))) (range (max n m) 0 -1))))", "problem": 66, "user": "4eeccfc0535d93acb0a668b5"}, {"code": "(fn [a b]\n  (letfn [(gcd [a b]\n               (if (= a 0)\n                 b\n                 (if (< a b)\n                   (gcd b a)\n                   (gcd (- a b) b))))]\n    (gcd a b)))", "problem": 66, "user": "515ead6be4b049add99a053e"}, {"code": "#(loop [a %1 b %2 c (min %1 %2)] (if (and (zero? (rem a c)) (zero? (rem b c))) c (recur a b (dec c))))", "problem": 66, "user": "50fe91c1e4b03cd852b4e84e"}, {"code": "#(loop [c %]\n   (if (= (+ (rem % c) (rem %2 c)) 0)\n     c\n     (recur (dec c))))", "problem": 66, "user": "513b43ede4b067e25a345ed3"}, {"code": "(fn [a b]\n  (let [get-divisor (fn [n] (into #{}\n                              (filter #(zero? (rem n %))\n                                      (range 1 (inc n)))\n                              ))\n        a-divisor (get-divisor a)\n        b-divisor (get-divisor b)\n        commom-divisor (clojure.set/intersection a-divisor b-divisor)]\n    (apply max commom-divisor)))", "problem": 66, "user": "514e4ae4e4b019235f6c0594"}, {"code": "(fn [a b]\n  (last (filter #(= 0\n                    (mod a %)\n                    (mod b %))\n                (range 1 (inc (min a b))))))", "problem": 66, "user": "51460e4ce4b04ef915e37314"}, {"code": "(fn [a b]\n  (apply max (for [n (range 1 (max a b))\n                   :when (and (= 0 (mod a n))\n                              (= 0 (mod b n)))]\n               n)))", "problem": 66, "user": "4fdbc075e4b05e33b9224f61"}, {"code": "(fn [x y] (let [divs (fn div [a b] (if (->> b (mod a) (= 0)) b (div b (mod a b))))] (if (> x y) (divs x y) (divs y x))))", "problem": 66, "user": "5162757ee4b03cfa3774b3fe"}, {"code": "(fn\n  [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "514f0723e4b019235f6c0599"}, {"code": "(fn [m n]\n  (cond\n    (> m n) (recur n m)\n    (= (rem n m) 0) m\n    :else (recur (rem n m) m)))", "problem": 66, "user": "515e8ce2e4b049add99a053d"}, {"code": "(fn [a b]\n   (if (zero? (rem a b))\n     b\n     (recur b (rem a b))))", "problem": 66, "user": "50f48298e4b004d364930527"}, {"code": "(fn [x y]\n    (let [divides (fn [x y] (= (mod x y) 0))]\n    (apply max (filter (partial divides (max y))\n        (filter (partial divides (max x))  (range 1 (+ (max x y) 1)) )\n    )))\n)", "problem": 66, "user": "516385cee4b055933a9ca02d"}, {"code": "(fn gcd[a b] (if (= b 0) a (gcd b (rem a b))))", "problem": 66, "user": "50ef96a1e4b0bdaecbb47d9d"}, {"code": "(fn [n1 n2]\n    (let [m (min n1 n2)\n          divides #(= 0 (mod %2 %1))\n          divisors (filter #(and (divides % n1) (divides % n2)) (range m 0 -1))]\n      (first divisors)))", "problem": 66, "user": "5165a235e4b079ad97ec44ac"}, {"code": "(fn gcd [a b]\n  (loop [l (min a b) h (max a b)]\n    (if (zero? l)\n      h\n      (recur (rem h l) l))))", "problem": 66, "user": "51592b81e4b0394f658fe22c"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "5166e80de4b060c690c1f4c5"}, {"code": "(fn common-divsor[n1 n2]\n  (let [nmax (max n1 n2) nmin (min n1 n2)]\n    ((fn comm-div[n-max n-min]\n      (if (=  (rem n-max n-min) 0)\n        n-min\n        (comm-div n-min (rem n-max n-min))\n        )\n      ) nmax nmin)))", "problem": 66, "user": "51696bcde4b03f62cda68ce7"}, {"code": "#(loop [a %1 b %2] (if (<= b 0) a (recur b (mod a b))))", "problem": 66, "user": "516b381be4b081287f204ea3"}, {"code": "(fn [a b] (loop [d (min a b)] (if (and (zero? (mod a d)) (zero? (mod b d))) d (recur (dec d)))))", "problem": 66, "user": "50723bbae4b0e3170b5a868b"}, {"code": "(fn [a b]\n  (let [get-divisor (fn [n] (into #{}\n                              (filter #(zero? (rem n %))\n                                      (range 1 (inc n)))\n                              ))\n        a-divisor (get-divisor a)\n        b-divisor (get-divisor b)\n        commom-divisor (clojure.set/intersection a-divisor b-divisor)]\n    (apply max commom-divisor)))", "problem": 66, "user": "516d227fe4b06f078fab252d"}, {"code": "#(loop [a %1 b %2] (if (zero? b) a (recur b (mod a b))))", "problem": 66, "user": "5150f87ae4b03e678e393ac7"}, {"code": "(fn [a b]\n  (loop [x (inc (min a b))]\n    (if (and (zero? (rem a x)) (zero? (rem b x)))\n      x\n      (recur (dec x)))))", "problem": 66, "user": "50b1d166e4b03ea880433554"}, {"code": "(fn gcd [a b]\n    (loop [a a\n           b b]\n      (if (< a b)\n        (recur b a)\n        (if (= b 0)\n          a\n          (recur b (mod a b))))))", "problem": 66, "user": "515ef58be4b02c55805ea237"}, {"code": "(fn [x y]\n  (loop [x x y y]\n    (let [a (max x y)\n         b (min x y)\n         r (rem a b)]\n         (cond \n           (= r 0) b\n   \t       (> r 0) (recur b r)))))", "problem": 66, "user": "4e781a2e535d324fb2983d74"}, {"code": "(fn [x y]\n  (last\n   (remove #(nil? %)\n           (for [q (map inc (range))\n                 :let [found (= 0 (+ (mod x q) (mod y q)))]\n                 :while (<= q (min x y))]\n             (when found q)))))", "problem": 66, "user": "512d3304e4b040332b905b2d"}, {"code": "(fn gcd [a b] (if (= b 0) a (gcd b (rem a b))))", "problem": 66, "user": "515ffbfbe4b0e2be8aa20bdd"}, {"code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "problem": 66, "user": "51740b65e4b0d277d717bc67"}, {"code": "(fn [a b]\n    (if (zero? b)\n        a\n      (recur b (mod a b))))", "problem": 66, "user": "4ed90014535d10e5ff6f52fe"}, {"code": "(fn [a b]\n  (first (for [n (reverse (range 1 (max a b)))\n        :when (and (zero? (mod a n)) (zero? (mod b n)))]\n    n)))", "problem": 66, "user": "50cfcad6e4b00b15ecee9752"}, {"code": "(fn [a b]\n  (if (= 0 b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "516dc88ae4b046df6fbb76a1"}, {"code": "(fn [x y] (reduce (fn [gcd nxt]\n                    (if (and (= (rem x nxt) 0) (= (rem y nxt) 0))\n                      nxt\n                      gcd))\n                  (range 1 (inc (min x y)))))", "problem": 66, "user": "5175616ae4b0dea9bbfba576"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "5173726be4b098276e74652c"}, {"code": "(fn [a b]\n   (if (zero? b)\n     a\n     (recur b (mod a b))))", "problem": 66, "user": "5154fa3fe4b0179c5115f4e6"}, {"code": "(fn [a b]\n  (loop [c (min a b)]\n    (if (= 0 (mod a c) (mod b c))\n      c\n      (recur (dec c)))))", "problem": 66, "user": "51631002e4b017b283c712c1"}, {"code": "(fn gcd\n  [x y]\n  (if (zero? y) x\n      (gcd y (mod x y))))", "problem": 66, "user": "5170643ee4b004f79986ad89"}, {"code": "(fn [a b]\n  (loop [m (min a b)]\n    (if (and (zero? (mod a m)) (zero? (mod b m)))\n      m\n      (recur (dec m)))))", "problem": 66, "user": "51780f88e4b03d69594194c9"}, {"code": "(fn gcd [a b]\n  (if (= b 0)\n      a\n(gcd b (rem a b))\n\n\n\n    )\n\n\n\n\n\n  )", "problem": 66, "user": "516eb196e4b06aac486e5b2e"}, {"code": "(fn gcd [a b]\n  (if (= 0 b) \n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "517531c6e4b07031762f2eea"}, {"code": "#(cond (< %1 %2) (recur %2 %1) (zero? %2) %1 :else (recur %2 (rem %1 %2)))", "problem": 66, "user": "5134973ce4b0230e9f713b42"}, {"code": "(fn [a b]\n   (loop [i (min a b)]\n     (if (and (= (mod a i) 0) (= (mod b i) 0))\n       i\n       (recur (dec i)))))", "problem": 66, "user": "51684318e4b03f62cda68cd6"}, {"code": "(fn [m n] (if (zero? n) m (recur n (mod m n)) ))", "problem": 66, "user": "51729002e4b044b2ef48a850"}, {"code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (mod a b))))\n\n; nicer: #(if (zero? %) %2 (recur (mod %2 %) %))", "problem": 66, "user": "517adc6ce4b0925c997201c4"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "51778122e4b085adf681d89d"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "515f8a0de4b0e2be8aa20bce"}, {"code": "(fn [x y]\n  (let [r (rem x y)]\n    (cond \n      (= 0 r) y\n      :else (recur y r))))", "problem": 66, "user": "4f05a9cf535dcb61093f6bfc"}, {"code": "(fn [a b] \n  (last \n   (filter #(and (zero? (mod a %)) \n                 (zero? (mod b %)))\n           (range 1 (max a b)))))", "problem": 66, "user": "5164867fe4b003cf19fdde3e"}, {"code": "(fn gcd [x y] (if (= 0 x) y (gcd (mod y x) x)))", "problem": 66, "user": "515fb48fe4b0e2be8aa20bd5"}, {"code": "(fn ! ([a b] (! a b 1 2))\n  ([a b cumd mind]\n   (if (some (partial > mind) [a b])\n     cumd\n     (if (every? zero? [(rem a mind) (rem b mind)])\n       (recur (/ a mind) (/ b mind) (* cumd mind) mind)\n       (recur a b cumd (inc mind))))))", "problem": 66, "user": "51780bfce4b0f89a8f53839c"}, {"code": "(fn gcd[a b]\n  (cond \n    (= b 0) a\n    :else (recur  b (mod a b))\n   )\n  )", "problem": 66, "user": "4fb03cf4e4b081705acca262"}, {"code": "(fn gcd [a b]\n  (let [c (if (> a b) a b)\n        d (if (> a b) b a)\n        e (rem c d)]\n    (if (= 0 e)\n      d\n      (gcd e d))))", "problem": 66, "user": "4eec82fe535d93acb0a668ae"}, {"code": "(fn gcd [a b] (first (filter #(every? zero? [(rem a %) (rem b %)]) (range (min a b) 0 -1))))", "problem": 66, "user": "50d3ec8be4b030b634c368bb"}, {"code": "#(loop [x (max %1 %2)\n        y (min %1 %2)]\n   (if (= y 0) x\n     (recur y (rem x y))))", "problem": 66, "user": "4ed286d4535d44c135fd68d7"}, {"code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "problem": 66, "user": "4f94d3a5e4b0dcca54ed6cc5"}, {"code": "#(loop [x  (min %1 %2) ] \n (if (= 0 (rem %1 x) (rem %2 x)) x\n(recur (dec x))))", "problem": 66, "user": "517945dce4b0684c1c981a43"}, {"code": "(fn pgcd[a b] (if(zero? (mod a b)) b (recur b (mod a b))))", "problem": 66, "user": "5034b623e4b062bc5d7ae168"}, {"code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "problem": 66, "user": "4f6cf933e4b07046d9f4efc2"}, {"code": "(fn f [x y]\n  (if (< x y)\n    (recur y x)\n    (if (= 0 y)\n      x\n      (recur y (mod x y)))))", "problem": 66, "user": "5185e17ee4b0da5a5be3bac5"}, {"code": "(fn [a b]\n  (->> (range (max a b) 0 -1)\n       (filter #(= 0 (rem a %) (rem b %)))\n       first))", "problem": 66, "user": "518696c1e4b0c40be512d708"}, {"code": "(fn gcd [x y]\n  (if (> x y) (gcd y x)\n      (if (= (mod y x) 0) x\n          (gcd (rem y x) x))))", "problem": 66, "user": "5160195ae4b0e2be8aa20be3"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (rem a b))))", "problem": 66, "user": "501d34f6e4b066e56b9d0b1e"}, {"code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "51757af0e4b085adf681d873"}, {"code": "#(loop [x % y %2 c 1]\n  (cond (= x y) (* x c)\n        (or (= x 0) (= y 0)) c\n        (and (even? x) (even? y)) (recur (/ x 2) (/ y 2) (* c 2))\n        (even? x) (recur (/ x 2) y c)\n        (even? y) (recur x (/ y 2) c)\n        :else (let [a (max x y)\n                    b (min x y)]\n                (recur (/ (- a b) 2) b c))))", "problem": 66, "user": "50ae0d24e4b0a40c9cfb08ce"}, {"code": "(fn [a b] \n  (let [c (mod a b)]\n    (if (= 0 c)\n      b\n      (recur b c))))", "problem": 66, "user": "4e74e119535d7a570dd295bc"}, {"code": "#(loop [a % b %2]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "517bc969e4b07ef0e56148d0"}, {"code": "(fn [x y]\n  (reduce \n    (fn [a b] \n      (if (and (= (rem x b) 0) (= (rem y b) 0))\n        b\n        a)) (range (max x y))))", "problem": 66, "user": "51899891e4b0288ada3dbdab"}, {"code": "(fn [x y]\n  (if (zero? y)\n    x\n    (recur y (rem x y))))", "problem": 66, "user": "51805d22e4b0e3fc13e244df"}, {"code": "(fn [a b]\n  (if (zero? b) a\n    (recur b (mod a b))))", "problem": 66, "user": "4fbd24d2e4b081705acca2ff"}, {"code": "(fn [a b]\n(last (filter (comp not nil?) (map #(if (and (= 0 (mod a %)) (= 0 (mod b %))) %) (range 1 (inc (min a b)))))))", "problem": 66, "user": "515ff4b9e4b0e2be8aa20bd9"}, {"code": "(fn [m n](if (= n 0)m(recur n (rem m n))))", "problem": 66, "user": "518ccf6be4b05e6c8537e386"}, {"code": "(fn gcd [n m]\n  (cond\n   (> m n) (gcd m n)\n   (zero? m) n\n   :else (gcd (- n m) m)))", "problem": 66, "user": "5186134ce4b0da5a5be3bac7"}, {"code": "(fn [a b] \n  (if (= b 0) \n    a \n    (recur b (mod a b))))", "problem": 66, "user": "518b761ae4b0f028e99addee"}, {"code": "(fn [a b]\n  (loop [i (first (sort [a b]))]\n    (if (and\n          (zero? (mod a i))\n          (zero? (mod b i))\n          )\n      i\n      (recur (dec i))\n      )\n    )\n  )", "problem": 66, "user": "4ec4d723535dcc7ae8597d65"}, {"code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "51026750e4b00c483ae176f7"}, {"code": "(fn [n1 n2]\n  (loop [d 1 ans 1]\n    (if (or (> d n1) (> d n2))\n      ans\n      (if (and (= (mod n1 d) 0) (= (mod n2 d) 0))\n        (recur (inc d) d)\n        (recur (inc d) ans)))))", "problem": 66, "user": "519136e9e4b0f8ef0be96c01"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "5154b16be4b0179c5115f4e2"}, {"code": "(fn [n m]\n  (cond\n    (< n m)   (recur m n)\n    (zero? m) n\n    :else     (recur m (mod n m))))", "problem": 66, "user": "51473a70e4b0d520409ed394"}, {"code": "(fn g [a b]\n  (if (= b 0)\n    a\n    (g b (mod a b ))))", "problem": 66, "user": "51933b41e4b0c663c5d86ca2"}, {"code": "(fn gcd [x y]\n  (if (= 0 y)\n    x\n    (gcd y (mod x y))))", "problem": 66, "user": "519b2570e4b0ac1b7dced6a3"}, {"code": "#(loop [trial (min %1 %2)]\n  (if\n    (and\n      (= (/ %1 trial) (quot %1 trial))\n      (= (/ %2 trial) (quot %2 trial))\n    )\n    trial\n    (recur (dec trial))\n  )\n)", "problem": 66, "user": "518e6966e4b051adb72789ec"}, {"code": "(fn ! [a b] (if (= a 0) b (! (mod b a), a)) )", "problem": 66, "user": "5073de20e4b054001656acca"}, {"code": "(fn f [a b]\n  (loop [a a b b gcd (min a b)]\n    (if (and (zero? (mod a gcd)) \n             (zero? (mod b gcd)))\n      gcd\n      (recur a b (- gcd 1)))))", "problem": 66, "user": "51750cd4e4b07031762f2ee5"}, {"code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "50377d53e4b0af0658af77ad"}, {"code": "(fn [& nums] \n  (loop [n (reduce min nums)] \n    (if (every? #(= 0 (mod % n)) nums) n (recur (dec n)))))", "problem": 66, "user": "51990df9e4b068aa333628fc"}, {"code": "(fn f [a b]\n        (cond\n         (> a b) (f (- a b) b)\n         (< a b) (f a (- b a))\n         :else a))", "problem": 66, "user": "4f3ca5a6e4b0e243712b1f53"}, {"code": "(fn [a b]\n  (let [r (/ a b)]\n    (if (ratio? r)\n      (/ a (numerator r))\n      (max r b))))", "problem": 66, "user": "5111330de4b09ff0d31c7ca8"}, {"code": "(fn [a b]\n  (loop [x (min a b)]\n    (if (= 0 (rem a x) (rem b x)) x (recur (dec x)))))", "problem": 66, "user": "5191e91de4b08962174cf733"}, {"code": "(fn gcd [a b] \n  (if (= b 0) a\n    (gcd b (rem a b))))", "problem": 66, "user": "519b7d76e4b02a926d9a436e"}, {"code": "; count x up from 1 to + 1 int(sqrt(x)) and see if it divides\n; test if n / x is int, (= (rem n x) 0)\n(fn [a b]\n\t(let [factors\n\t\t(fn [n]\n\t\t\t(filter #(= (rem n %) 0)\n\t\t\t(range 1 (+ n 1)))\n      )]\n      \n      ;(println (factors 100))\n     ; (println (factors 200))\n      \n      ;(println (clojure.set/union (set (factors a)) (set (factors b))))\n\n      (apply max (clojure.set/intersection (set (factors a)) (set (factors b))))\n\t)\n)", "problem": 66, "user": "506cad7de4b0a302964c548e"}, {"code": "(fn z [x y]\n  (if (= 0 y) x\n    (z y (rem x y))))", "problem": 66, "user": "4f6fd91ae4b07046d9f4efed"}, {"code": "(fn [a b] \n  ( let [\n         factor (fn [n] (filter #(= 0 (mod n %1)) (range 1 (inc n))))\n         intersection (fn [s1 s2] (filter #(some #{%1} s1) s2) )]\n    (apply max (intersection (factor a) (factor b)))\n    ) )", "problem": 66, "user": "5142e808e4b0c172af7558c9"}, {"code": "(fn [x y] \n  (apply max (map \n        (fn [z] (if (and (zero? (rem x z)) (zero? (rem y z)))\n                  z\n                  0))\n        (rest (range (inc (min x y)))))))", "problem": 66, "user": "4e68ed35535d8ccf87e9fe92"}, {"code": "(fn gcd [a b] (cond\n               (= a b) a\n               (> a b) (gcd (- a b) b)\n               (> b a) (gcd a (- b a))))", "problem": 66, "user": "51823a97e4b0f2adb733651e"}, {"code": "(fn [a b]\n  (if (zero? b) \n    a\n    (recur b (mod a b))\n    )\n  )", "problem": 66, "user": "51377188e4b04059df19f303"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (rem a b))))", "problem": 66, "user": "4f16d3fd535d64f60314644e"}, {"code": "(fn [x y] (some #(if (= 0 (mod x %) (mod y %)) %)\n                (range (min x y) 0 -1)))", "problem": 66, "user": "506ba58be4b0eda3100c090b"}, {"code": "#(first (filter (fn [x] (and (= (mod % x) 0) (= 0 (mod %2 x)))) (reverse (range 1 (max % %2)))))", "problem": 66, "user": "51a05bede4b0b292b01ee3f4"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "51a768e0e4b0da5f497bde84"}, {"code": "(fn gcd [a b]\n        (cond (= a b) a\n              (> a b) (recur (- a b) b)\n              :else (recur b a)))", "problem": 66, "user": "51a8f0c6e4b08d8ec191b821"}, {"code": "(fn [x y] (if (zero? y) x\n              (recur y (mod x y))))", "problem": 66, "user": "5183f5d7e4b02826a645f393"}, {"code": "(fn [a b]\n   (if (zero? b)\n     a\n     (recur b (mod a b))))", "problem": 66, "user": "4fe9f0f6e4b0547ebccb247b"}, {"code": "(fn [x y] (if (> x y) (loop [x1 x y1 y] (if (= 0 (rem x1 y1)) y1 (recur y1 (rem x1 y1)))) (loop [y2 y x2 x] (if (= 0 (rem y2 x2)) x2 (recur x2 (rem y2 x2))))))", "problem": 66, "user": "51a7f74be4b08d8ec191b802"}, {"code": "(fn gcd [a b] ( if(= b 0) a (gcd b (mod a b))))", "problem": 66, "user": "51ab1718e4b04e3dc0c27b2f"}, {"code": "(let [gcd (fn [a0 b0]\n            (loop [a a0 b b0]\n              (if (= a 0)\n                b\n                (recur (mod b a) a))))]\n  (fn [a b]\n    (if (<= a b)\n      (gcd a b)\n      (gcd b a))))", "problem": 66, "user": "510b0480e4b078ea719210fa"}, {"code": "#(if (= 0 %) %2 (recur (mod %2 %) %))", "problem": 66, "user": "5159849ce4b0394f658fe236"}, {"code": "(fn [i1 i2] \n  \t(loop [i (min i1 i2)]\n      (if (and (= (rem i1 i) 0) (= (rem i2 i) 0))\n        i\n        (recur (dec i))\n        )))", "problem": 66, "user": "51a7b4fee4b0da5f497bde8b"}, {"code": "(fn gcd [a b] (if (zero? b) a (gcd b (rem a b))))", "problem": 66, "user": "50a2f901e4b029e8bace362a"}, {"code": "#(if (= %2 0) %1 (recur %2 (rem %1 %2)))", "problem": 66, "user": "51b0fc95e4b0c53cf2e68a72"}, {"code": "(fn [x y]\n  (let [gnum (max x y)\n        lnum (min x y)]\n    (first (filter #(and (zero? (mod gnum %)) (zero? (mod lnum %))) (range lnum 0 -1)))))", "problem": 66, "user": "51040eb2e4b0432126ba9bb4"}, {"code": "(fn [ x y]\n  (loop [i (max x y) o (min x y)]\n    (let [d (mod i o)]\n      (if (zero? d) o\n        ( recur o d)))))", "problem": 66, "user": "50bc4e73e4b0594b91591c3d"}, {"code": ";; I could do the Euclidean algorithm, but this is more direct. \n(fn [n m]\n  (let [k (min n m)]\n    (last (filter #(and (= 0 (mod n %)) (= 0 (mod m %))) (range 1 (inc k))))))", "problem": 66, "user": "50fac9e3e4b07934dda8b0d1"}, {"code": "(fn euclid [a b]\n  (apply (fn eu [a b]\n    (let [c (mod a b)]\n      (if (= c 0)\n        b\n        (recur b c))))\n  (if (< a b) [a b] [b a])))", "problem": 66, "user": "51b24defe4b02f8f128bb963"}, {"code": "(fn [a,b] (first (filter #( = 0 (mod a % ) (mod b %) ) (range (min a b) 0 -1 ) )))", "problem": 66, "user": "51aa4eede4b04e3dc0c27b25"}, {"code": "(fn gcd [x y]\n\t(cond \n\t\t(zero? y) x\n\t\t:else (gcd y (mod x y))\n\t)\n)", "problem": 66, "user": "50b65966e4b0a86f8358ca6c"}, {"code": "(fn [a b]\n  (first \n   (first \n    (filter (fn [[x y]] (= y 0))\n            (iterate (fn [[x y]]\n             (if (>= x y)\n               [(- x y ) y]\n               [(- y x ) x]\n               )\n                       )                    \n            [a b]\n                     )\n            )\n    \n    )\n   )\n  )", "problem": 66, "user": "518c5236e4b087e178201de0"}, {"code": "(fn gcd \n  [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "51b0359ae4b0c53cf2e68a5f"}, {"code": "(fn gcd [a b]\n    (if (= b 0)\n      a\n      (gcd b (mod a b))\n      )\n    )", "problem": 66, "user": "5141abf1e4b02fd87f5064c3"}, {"code": "#(.gcd (BigInteger. (str %)) (BigInteger. (str %2)))", "problem": 66, "user": "50a5b7e9e4b0aa96157e2610"}, {"code": "(fn [a b]\n  (if (zero? b) a (recur b (mod a b))))", "problem": 66, "user": "51b793d3e4b0d906fcd71d38"}, {"code": "#(loop [n %]\n     (cond \n       (= n 1) 1\n       (= (mod % n) (mod %2 n) 0) n\n       1 (recur (- n 1))))", "problem": 66, "user": "51b3f109e4b0f094dd986fa9"}, {"code": "(fn [x y]\n  (let [d (fn [n] (map second (filter #(= (first %) 0) (map #(identity [(rem n %) %]) (range 1 (inc n))))))\n        xs (d x)\n        ys (d y)\n        f (filter (fn [x] (some #(= % x) ys)) xs)]\n    (println xs)\n    (println ys)\n    (println f)\n    (apply max f)))", "problem": 66, "user": "4f2f7e87e4b0d6649770a06f"}, {"code": "(fn gcd [a b]\n  (cond \n   (= a b) a\n   (< a b) (recur a (- b a))\n   (> a b) (recur b (- a b))))", "problem": 66, "user": "511aa2a4e4b0c87c59c9670a"}, {"code": "(fn [a b]\n          (let [bigger (max a b)\n                smaller (min a b)]\n            (first (filter #(and (= 0 (rem bigger %)) (= 0 (rem smaller %))) (iterate dec smaller)))))", "problem": 66, "user": "504e0136e4b078edc5f5938e"}, {"code": "(fn [v1 v2]\n  (apply max\n         (filter #(and (zero? (mod v1 %))\n                       (zero? (mod v2 %)))\n                 (range 1 (max v1 v2)))))", "problem": 66, "user": "4fa340b4e4b081705acca18c"}, {"code": "(fn [a b] (- (last (take-while #(or (> (rem a %1) 0) (> (rem b %1) 0)) (reverse (range (max a b))))) 1))", "problem": 66, "user": "51b7b521e4b0d906fcd71d3a"}, {"code": "(fn [a b] (loop [a a b b] (if (zero? b) a (recur b (rem a b)))))", "problem": 66, "user": "51bc2f6ae4b0fe3ecfb46452"}, {"code": "(fn gcd [a b] (if (= 0 b)\n                  a\n                (recur b (mod a b))))", "problem": 66, "user": "51ab1da1e4b04e3dc0c27b30"}, {"code": "#(last (filter (fn [anum] (and (= (mod %1 anum) 0) (= (mod %2 anum) 0))) (range 1 (inc (min %1 %2)))))", "problem": 66, "user": "51bf4560e4b013aa0d74b817"}, {"code": "(fn [a b]\n  (cond\n   (= a b) a\n   (> a b) (recur (- a b) b)\n   :else (recur a (- b a))))", "problem": 66, "user": "519db0ede4b037b32803f9b9"}, {"code": "#(loop [t  (reverse ( range (+ 1 (min % %2))))\n         current (first t)]\n   (if (and  (= 0 (rem % current)) (= 0 (rem %2 current )))\n   (first t)\n   (recur (rest t) (second t))))", "problem": 66, "user": "51a865dfe4b08d8ec191b80f"}, {"code": "(fn f [x y] (if (zero? y) x (f y (rem x y))))", "problem": 66, "user": "51b90b88e4b050a1176cd6a2"}, {"code": "(fn [a b]\n  (letfn [(get-divisors [n]\n            (into #{} (filter #(= 0 (mod n %)) (range 1 (inc n)))))]\n     (apply max (clojure.set/intersection (get-divisors a) (get-divisors b)))))", "problem": 66, "user": "4dd59d8b535dae65d5c462eb"}, {"code": "(fn gcd [x y]\n  (if (zero? y) x (gcd y (mod x y))))", "problem": 66, "user": "511d6a01e4b022853b0e07a5"}, {"code": "(fn [a b]\n  (if (zero? b) a\n      (recur b (mod a b))))", "problem": 66, "user": "5030f16fe4b05b7df5a0b84b"}, {"code": "(fn [x1 y1]\n  ((fn div [x y]\n     (let [r (rem x y)]\n       (if (= 0 r)\n         y\n         (div y r)\n         )\n       )\n     ) x1 y1)\n  )", "problem": 66, "user": "51bec919e4b013aa0d74b800"}, {"code": "(fn gcd-euclid [n d]\n  \"only works for n, d > 0\"\n  (cond (= n d) d\n        (> n d) (gcd-euclid (- n d) d)\n        :else (gcd-euclid n (- d n))))", "problem": 66, "user": "51baff1be4b0fe3ecfb46443"}, {"code": "(fn gcd\n  [x y]\n  (cond\n    (> x y) (gcd (- x y) y)\n    (< x y) (gcd (- y x) x)\n    :else x))", "problem": 66, "user": "51c330a9e4b0851ac09658f2"}, {"code": "(fn [a b]\n    (let [d (fn [x] \n              (set (filter #(= 0 (mod x %)) (range 1 (inc x)))))]\n      (apply max \n             (clojure.set/intersection \n               (d a) (d b)))))", "problem": 66, "user": "512f06c5e4b0762be4c7aad7"}, {"code": "(fn [one two] \n  (let [highest (max one two) lowest (min one two)]\n    (loop [cur lowest]\n      (if\n        (and\n          (= 0 (mod lowest cur))\n          (= 0 (mod highest cur))) cur\n        (recur (dec cur))))))", "problem": 66, "user": "4f47eab2e4b0d56e7bb92bc6"}, {"code": "(fn gcd\n  [x y]\n  (first\n   (filter #(and (zero? (rem x %))\n                 (zero? (rem y %)))\n           (range (min x y) 0 -1))))", "problem": 66, "user": "4ebf11bc535dfed6da9c6d9c"}, {"code": "#(if (= %2 0) % (recur %2 (mod % %2)))", "problem": 66, "user": "51bd1a0de4b0df1216cefd93"}, {"code": "(fn f1\n  ([a b]\n    (f1 a b 1 1))\n  ([a b n t]\n    (println a b n t)\n    (if (or (> n a) (> n b))\n      t\n      (if (and (= 0 (rem a n)) (= 0 (rem b n)))\n        (recur a b (inc n) n)\n        (recur a b (inc n) t)))))", "problem": 66, "user": "50b8e9a4e4b0cba0e598b656"}, {"code": "#(first (filter (fn [x] (= 0 (mod %1 x) (mod %2 x))) (reverse (range 1023))))", "problem": 66, "user": "5007c7c7e4b0b17c647f5226"}, {"code": "(fn [& arg] (last (mapcat rest (partition-by identity (sort (mapcat (fn [x] (filter #(zero? (mod x %)) (range 1 (inc x)))) arg))))))", "problem": 66, "user": "51a3c9cde4b0e77c4ca60bf9"}, {"code": "(fn gcd [a b]\n  (if (= b 0) a\n    (recur b (rem a b))))", "problem": 66, "user": "518ad8fce4b06da86c1973c1"}, {"code": "(fn get-max-comm [m n]\n  (loop [a m b n r (rem a b)]\n    (if (= 0 r)\n      b \n      (recur b r (rem b r)))))", "problem": 66, "user": "5163a7bbe4b055933a9ca02f"}, {"code": "(fn gcd [a b]\n  (cond \n   (= a b) a\n   (> a b) (gcd (- a b) b)\n   (< a b) (gcd a (- b a))\n   :else 1\n   )    \n)", "problem": 66, "user": "5180dc04e4b06b8caf33fa01"}, {"code": "(fn [a b]\n  (if (= 0 b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "51c9c6cde4b09ce160bef5b1"}, {"code": "(comp (partial apply (fn [x y] (let [a (quot x y) b (mod x y)] (if (= b 0) y (recur y b))))) (partial sort-by -) list)", "problem": 66, "user": "51ca7906e4b08b1cbd0d9487"}, {"code": "(fn gcd [a b] (if (= b 0) a (gcd b (mod a b))))", "problem": 66, "user": "51c1d159e4b0d204dbe2ca18"}, {"code": "(fn [x y]\n   (loop [ma (max x y) mi (min x y)]\n     (if (zero? mi)\n       ma\n       (recur mi (rem ma mi)))))", "problem": 66, "user": "51cacda3e4b068dadb8f2227"}, {"code": "(fn my-pgcd [x y] (let [a (max x y) b (min x y) r (rem a b)] (if (zero? r) b (my-pgcd a r))))", "problem": 66, "user": "51c09719e4b0c9c82288293c"}, {"code": "(fn gcd [a b] (if (zero? b) a (gcd b (mod a b))))", "problem": 66, "user": "51aab611e4b04e3dc0c27b2d"}, {"code": "#(loop [a %1 b %2 c (min a b)]\n   (if (= (mod a c) (mod b c) 0)\n     c\n     (recur a b (dec c))))", "problem": 66, "user": "51a10b2ce4b0b292b01ee3fe"}, {"code": "(comp (partial apply +) first (partial drop-while (comp (partial < 0) (partial apply min))) #(iterate (fn [[x1 x2]] (vector (mod x1 x2) (mod x2 x1))) [%1 %2]))", "problem": 66, "user": "51cbdee1e4b08d8387cbede1"}, {"code": "(fn [a b]                                                  \n  (loop [x (min a b)]                                            \n    (if (or (not= 0 (mod b x)) (not= 0 (mod a x)))             \n      (do                                                        \n        (println x)                                             \n        (recur (- x 1)))                                        \n      x)))", "problem": 66, "user": "51beb32ae4b013aa0d74b7fd"}, {"code": "(fn [a b]\n  (if (zero? b) a (recur b (rem a b))))", "problem": 66, "user": "51d19c24e4b0cfcf579466c3"}, {"code": "(fn gcd [a b]\n    (if (zero? b)\n        a\n        (recur b (mod a b))))", "problem": 66, "user": "51ba4482e4b0fe3ecfb4642b"}, {"code": "(fn gcd [x y]\n  (let [a (min x y) b (max x y) z (mod b a)]\n    (if (= 0 z) a (gcd z a))))", "problem": 66, "user": "51b9d1f0e4b0e871ca49590b"}, {"code": "(fn [& c] (apply max (filter (fn [n] (every? zero? (map #(rem % n) c))) (range 1 (inc (apply min c))))))", "problem": 66, "user": "519964cbe4b0aa09cbc0b849"}, {"code": "#(loop [x %1\n        y %2\n        m (min %1 %2)]\n   (if (and (= 0 (rem x m)) (= 0 (rem y m)))\n     m\n     (recur x y (dec m))))", "problem": 66, "user": "51d360d1e4b099f3b6acddff"}, {"code": "(fn gcd [m n]\n    (if (= n 0)\n        m\n        (gcd n (rem m n))\n    )\n)", "problem": 66, "user": "51d1111ce4b067c36548635f"}, {"code": "(fn[x y] (loop [n x]\n    (if (and (= (mod x n) 0) (= (mod y n) 0) )\n      n\n      (recur (- n 1))\n      )))", "problem": 66, "user": "51d10b1fe4b067c36548635e"}, {"code": "(fn gcd [a b]\n  (first (filter (fn [x] (= 0 (rem a x) (rem b x))) (range (min a b) 0 -1))))", "problem": 66, "user": "51672d15e4b079759a74a5e7"}, {"code": "#(loop [a %1 b %2]\n  (if (zero? b)\n    a   \n    (recur b (mod a b))))", "problem": 66, "user": "51c9fe91e4b09ce160bef5b6"}, {"code": "(fn gcd [x y] (or (some #(if (= 0 (mod x %) (mod y %)) % false) (range (min x y) 1 -1)) 1))", "problem": 66, "user": "51c19873e4b0d204dbe2ca0d"}, {"code": "(fn gcd [n1 n2]\n  (let [n (max n1 n2) d (min n1 n2) m (mod n d)]\n    (if (zero? m) d (gcd n (- d m)))))", "problem": 66, "user": "51cdd3f0e4b0e42293a2254b"}, {"code": "#(loop [n (max %1 %2)]\n\t(if (and (zero? (rem %1 n)) (zero? (rem %2 n)))\n\t\tn\n\t\t(recur (dec n))))", "problem": 66, "user": "51bdc609e4b0ff155d51d2b3"}, {"code": "(fn [x y]\n  (cond \n    (= x y) x\n    (< x y) (recur x (- y x))\n    (> x y) (recur (- x y) y)))", "problem": 66, "user": "51ae350fe4b09397d5109790"}, {"code": "(fn gcd [a b]\n  (loop [a a\n         b b]\n    (if (= b 0)\n      a\n      (recur b (mod a b)))))", "problem": 66, "user": "51d4ed02e4b013d740b70dec"}, {"code": "(fn gcd* [a b]\n  (cond\n    (< a b) (recur a (- b a))\n    (> a b) (recur (- a b) b)\n    :else a))", "problem": 66, "user": "51d662fce4b0154f82ab92ef"}, {"code": "(fn g [a b] \n  (reduce \n     #(if (= 0 (rem a %2) (rem b %2)) %2 %1) \n     1 \n     (rest (range 1 (inc (max a b))))))", "problem": 66, "user": "50bfd849e4b042992946c649"}, {"code": "(fn \t[nm dn]\n\t(if (zero? (rem nm dn))\n\t\t\t\tdn\n              \t(recur (mod dn nm) nm)\n\t)\n\t\t   \t\n)", "problem": 66, "user": "5082ccb3e4b06a522e8c7af3"}, {"code": "(fn [x y]\n  (cond (or (zero? x) (zero? y)) (+ x y)\n        (> x y) (recur y (mod x y))\n        :else (recur x (mod y x))))", "problem": 66, "user": "51670895e4b013fc800656c1"}, {"code": "(fn [a b]\n  (apply max (filter #(and (= 0 (rem a %)) (= 0 (rem b %)))\n                     (range 1 (inc (min a b))))))", "problem": 66, "user": "51da7e49e4b02ceefd947768"}, {"code": "(fn [x y]\n  (let [m (min x y)]\n    (apply max (filter #(= 0 (mod x %) (mod y %)) (range 1 (inc m))))))", "problem": 66, "user": "51c8301ee4b07ef393169e4d"}, {"code": "(fn gcd [a b]\n   (loop [a a b b]\n     (if (zero? b)\n       a\n       (recur b (mod a b)))))", "problem": 66, "user": "4ede0511535d10e5ff6f5330"}, {"code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "problem": 66, "user": "51e00020e4b01188f0627534"}, {"code": "(fn gcd [n m]\n  (if (zero? m)\n    n\n    (gcd m (mod n m))))", "problem": 66, "user": "51991a89e4b068aa333628fd"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "516199bbe4b009fba0926e36"}, {"code": "(fn [a b]\n  (loop [a a\n         b b]\n  (if (= b 0)\n    a\n    (recur b (mod a b)))))", "problem": 66, "user": "51da565ae4b02ceefd947765"}, {"code": "(fn [a b] (if (< a b) (recur b a) (let [r (mod a b)] (if (= r 0) b (recur b r)))))", "problem": 66, "user": "515cf9b5e4b00901442db1d4"}, {"code": "(fn gcd [a b]\n  (cond\n    (zero? b) a\n     :else (gcd b (mod a b))\n  )\n)", "problem": 66, "user": "51e1a1fae4b06a68e693eaf6"}, {"code": "(fn [a b] (case (compare a b)\n            0 a\n            1 (recur (- a b) b)\n            -1 (recur a (- b a))))", "problem": 66, "user": "4e6f8431535d5021c1a8961e"}, {"code": "(fn gcd [x y]\n  (let [minimum (min x y) maximum (max x y)]\n  (if (= (mod maximum minimum) 0) minimum\n    (gcd minimum (mod maximum minimum)))))", "problem": 66, "user": "5110a9b4e4b04c71fce993f3"}, {"code": "(fn [one two] (loop [x one\n                     y two\n                     i (max one two)]\n                (if (and (= (mod x i) 0) (= (mod y i) 0))\n                  i\n                  (recur x y (dec i)))))", "problem": 66, "user": "50214ffae4b0ef1d2d4433bc"}, {"code": "#(if (= 0 %2) %\n   (recur %2 (mod % %2)))", "problem": 66, "user": "51e58e02e4b0efabf93c02d0"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "51789dfae4b03d69594194d7"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "51d9eb05e4b02ceefd947755"}, {"code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (mod a b))\n  )\n)", "problem": 66, "user": "51ba8f82e4b0fe3ecfb46434"}, {"code": "(fn gcd [x y] (if (= x y) x (if (< x y) (gcd x (- y x)) (gcd y (- x y)))))", "problem": 66, "user": "514cfa27e4b019235f6c057d"}, {"code": "#(\n  loop [a (max % %2), b (min % %2)]\n  \t(if (= 0 (mod a b))\n      b\n      (recur b (mod a b))))", "problem": 66, "user": "51eca2ace4b069f463c22cd0"}, {"code": "(fn gcd [a b]\n  (if (>= a b)\n    (cond\n      (= a b) a\n      (= a 0) b\n      (= b 0) a\n      (and (even? a) (even? b)) (* 2 (gcd (/ a 2) (/ b 2)))\n      (and (even? a) (odd?  b)) (recur (/ a 2) b)\n      (and (odd?  a) (even? b)) (recur a (/ b 2))\n      :else                     (recur (/ (- a b) 2) b)\n    )\n    (recur b a))\n  )", "problem": 66, "user": "51e24a04e4b01e5198146430"}, {"code": "(fn [x y]\n  (if (= y 0)\n    x\n    (recur y (mod x y))))", "problem": 66, "user": "51df825de4b01188f062752b"}, {"code": "(fn [x y] \n\t(if (= y 0) x\n\t(recur y   (rem x y))))", "problem": 66, "user": "518644bce4b0da5a5be3baca"}, {"code": "(fn [num1 num2]\n  (if (= num2 0) num1\n  (recur num2 (rem num1 num2))))", "problem": 66, "user": "51eb3aace4b0f1f103a0d159"}, {"code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "51efd397e4b0249c592fbdeb"}, {"code": "(fn self [a b]\n  (let [mn (min a b) mx (max a b) d (- mx mn)]\n    (if (= mn d)\n      d\n      (self mn d)\n    )\n  )\n)", "problem": 66, "user": "51db9e1ee4b0e067a9bbadc9"}, {"code": "(fn gcd [a b]\n  (if (< a b) (gcd b a)\n  (loop [m a n b r (mod a b)]\n    (if (zero? r)\n      n\n      (recur n r (mod n r))))))", "problem": 66, "user": "51e595a6e4b0efabf93c02d8"}, {"code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "50d882d4e4b01f0871336e69"}, {"code": "(fn gcd[a b]\n  (if\n    (= 0 b)\n    a\n    (gcd b (rem a b))))", "problem": 66, "user": "51eec1a6e4b0871fa145d98d"}, {"code": "(fn [a b] (if (> b a) \n\t\t\t\t\t(recur b a)\n\t\t\t\t\t(if (= 0 (rem a b))\n\t\t\t\t\t\tb\n\t\t\t\t\t\t(recur b (rem a b))\n\t\t\t\t\t) \n                  )\n  )", "problem": 66, "user": "518aec06e4b06da86c1973c2"}, {"code": "(letfn [(mlt [x] (set (filter #(= 0 (rem x %)) (range x 0 -1))))]\n\t(fn [x y] (last (sort (filter (mlt x) (mlt y)))))\n)", "problem": 66, "user": "51eb0374e4b0f1f103a0d156"}, {"code": "(fn\n  [a b]\n  (cond (> b a) (recur b a)\n        (= b 0) a\n        :else (recur b (rem a b))))", "problem": 66, "user": "511b233ae4b07ab9ec456180"}, {"code": "(fn [a b] (last ( filter\n                 #( and (zero? (rem a %)) (zero? (rem b %)))\n                 (range 1 (max a b)))))", "problem": 66, "user": "50e90813e4b033b0e80d11e7"}, {"code": "(fn [x y]\n  (let [max (max x y)\n        min (min x y)\n        mod (mod max min)]\n    (if (= mod 0)\n      min\n      (recur min mod))))", "problem": 66, "user": "51b86a0fe4b09e0e347b2e78"}, {"code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "51e0198ee4b01188f0627539"}, {"code": "(fn [x y]\n  (->> (range 1 (inc (min x y)))\n       (filter #(= [0 0] [(mod x %) (mod y %)]))\n       last))", "problem": 66, "user": "4fe13ad7e4b0dd6cd5ce3632"}, {"code": "(fn gcd [a b] (cond (> a b) (gcd (- a b), b) (< a b) (gcd a (- b a)) :else a))", "problem": 66, "user": "51f2ab8be4b0210f90e74554"}, {"code": "(fn gcd [a b]\n  (if (> a b)\n    (gcd b a)\n    (if (= b a)\n      a\n      (gcd a (- b a)))))", "problem": 66, "user": "51f28a64e4b0210f90e7454e"}, {"code": "(fn\n  [x y] \n  (reduce #(if (> %1 %2) %1 %2)\n  (filter #(and (zero? (mod x %)) (zero? (mod y %))) \n   (range 1 (min (inc x) (inc y))))))", "problem": 66, "user": "51f13b80e4b06a20a2523f38"}, {"code": "(fn gcd [a b]\n    (if (= 0 b)\n      a\n      (recur b (mod a b)) ))", "problem": 66, "user": "5046ee3ee4b03b02161376b4"}, {"code": "(fn gcd [u v]\n  (cond\n   (= u v) u\n   (= u 0) v\n   (= v 0) u\n   (even? u) (cond\n              (odd? v) (gcd (bit-shift-right u 1) v)\n              :else (bit-shift-left\n                     (gcd (bit-shift-right u 1) (bit-shift-right v 1))\n                     1))\n   (even? v) (gcd u (bit-shift-right v 1))\n   (> u v) (gcd (bit-shift-right (- u v) 1) v)\n   :else (gcd (bit-shift-right (- v u) 1) u)))", "problem": 66, "user": "51d96ad0e4b02ceefd94774f"}, {"code": "(fn [ a b ]\n  (let [ c (mod a b)]\n   (if (= c 0) b (recur b c))))", "problem": 66, "user": "51f59607e4b0abb92f97f9d5"}, {"code": "#(if (zero? %2) % (recur %2 (mod % %2)))", "problem": 66, "user": "50aedb8ce4b0a40c9cfb08d4"}, {"code": "(fn [x y] \n  (last \n   (filter \n    #(and (= 0 (mod x %)) (= 0 (mod y %))) \n    (map #(+ % 1)  (range x)))))", "problem": 66, "user": "5022292ee4b0846bc458ae46"}, {"code": "(fn [x y]\n  (let [orig-min (min x y)]\n    (loop [div orig-min\n           gnum (max x y)]\n      (if (and (zero? (rem gnum div)) (zero? (rem orig-min div)))\n        div\n        (recur (dec div) gnum)))))", "problem": 66, "user": "51f82769e4b09be9c177e527"}, {"code": "(fn [n1 n2]\n  (let [min-n (min n1 n2)\n        max-n (max n1 n2)\n        min-divisors (filter #(zero? (mod min-n %)) (range 1 (+ 1 (/ min-n 2))))]\n    (if (zero? (mod max-n min-n)) \n      min-n \n      (apply max (mapcat #(if (zero? (mod max-n %1)) [%1]) min-divisors))\n    )\n  )\n)", "problem": 66, "user": "5029f263e4b023940c84aa45"}, {"code": "(fn [n1 n2]\n      (let [min (min n1 n2)]\n        (first\n         (for [i (range min 0 -1)\n               :when (and (zero? (mod n1 i))\n                          (zero? (mod n2 i)))]\n           i))))", "problem": 66, "user": "4fa3c137e4b081705acca193"}, {"code": "#(if (= 0 %2) % (recur %2 (mod % %2)))", "problem": 66, "user": "51f9b1d0e4b09be9c177e550"}, {"code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "4f017b4e535dcb61093f6a37"}, {"code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "problem": 66, "user": "51fa1375e4b0f1313d4689c9"}, {"code": "(fn gcd [a b] (if (zero? b) a (gcd b (mod a b))))", "problem": 66, "user": "51e780dae4b0730ab87cf353"}, {"code": "(fn gcd [a b] (if (zero? b) a (gcd b (mod a b))))", "problem": 66, "user": "5201572be4b0d7096e99ddbb"}, {"code": "(fn gcd [x y]\n  (if-not (zero? y) (recur y (mod x y))\n                     x))", "problem": 66, "user": "51eadb98e4b0f1f103a0d153"}, {"code": "(fn [x y]\n  (if\n    (zero? y) x\n    (recur y (mod x y))\n  )\n)", "problem": 66, "user": "51897709e4b0288ada3dbdaa"}, {"code": "(fn my-gcd [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "51db0d99e4b06aa4d4669a9d"}, {"code": "(fn [a, b] \n  (let [dv (fn[x] (set (filter #(zero? (rem x %)) (range 1 (inc x)) ))) ]\n    (apply max (clojure.set/intersection (dv a) (dv b) )) ))", "problem": 66, "user": "51fa7154e4b0f1313d4689da"}, {"code": "(fn [a b] \n  (last (filter #(= 0 (mod a %) \n                      (mod b %)) (range 1 (inc (min a b))))))", "problem": 66, "user": "50c781bbe4b00bb60fe0c535"}, {"code": "(fn gcd\n  [x y]\n  (case (compare x y)\n    1 (gcd (- x y) y)\n   -1 (gcd x (- y x))\n    0 x))", "problem": 66, "user": "50ef77a4e4b0bdaecbb47d99"}, {"code": "(fn [a b]\n  (let [get-divisor (fn [n] (into #{}\n                              (filter #(zero? (rem n %))\n                                      (range 1 (inc n)))\n                              ))\n        a-divisor (get-divisor a)\n        b-divisor (get-divisor b)\n        commom-divisor (clojure.set/intersection a-divisor b-divisor)]\n    (apply max commom-divisor)))\n\n;(fn [x y] (apply max (filter #(= 0 (mod x %) (mod y %)) (range 1 (+ 1 (max (/ x 2) (/ y 2)))))))", "problem": 66, "user": "51d11f5de4b067c365486360"}, {"code": "#(if (zero? %2) % (recur %2 (rem % %2)))", "problem": 66, "user": "51944aaae4b0142f60b4aedc"}, {"code": "(fn [a b]\n  (if (zero? (rem a b))\n    b\n    (recur b (rem a b))))", "problem": 66, "user": "51b3d998e4b0f094dd986fa8"}, {"code": "(fn [a b]\n  (let [big (max a b)\n        small (min a b)\n        m (mod big small)]\n    (if (= 0 m) small\n      (recur small m))))", "problem": 66, "user": "5202cfe7e4b030ee0c5b2702"}, {"code": "(fn gcd [a b] (cond\n               (= b 0) a\n               (> b a) (gcd b a)\n               :else (gcd b (mod a b))))", "problem": 66, "user": "51f7dd27e4b06ff1c25c52dc"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "52039e12e4b0fb7e47ea51ff"}, {"code": "(fn [& args] (let [get-cds (fn [x] (-> (filter #(zero? (mod x %)) (range 1 (inc x))) (set)))]\n                      (->> (map get-cds args) (reduce clojure.set/intersection) (apply max))))", "problem": 66, "user": "52016fd3e4b0b2e020a18f10"}, {"code": "(fn [a b] \n  (if \n    (zero? b)\n    a \n    (recur b (mod a b))))", "problem": 66, "user": "514c2d05e4b02b8cbb2a9278"}, {"code": "(fn gcd\n  [a b]\n  (if (zero? b) a\n    (recur b (mod a b))))", "problem": 66, "user": "5201ff99e4b0b2e020a18f26"}, {"code": "(fn [a b]\n  (first \n   (reduce \n    (fn [l n] (if (and (= 0 (rem a n)) (= 0 (rem b n))) (conj l n) l ))\n    '() (range 1 (inc (min a b))))))", "problem": 66, "user": "52015698e4b0d7096e99ddba"}, {"code": "(fn gcd [n1 n2]\n  (apply max (filter #(and (= 0 (mod n1 %)) (= 0 (mod n2 %))) (range 1 (+ 1 (min n1 n2))))))", "problem": 66, "user": "4e0d5a5a535d04ed9115e7b5"}, {"code": "(fn [a b]\n  ((fn f [c n]\n    (cond (> n (min a b)) c\n          (and (= 0 (rem a n))\n               (= 0 (rem b n)))\n          (f n (inc n))\n          true\n          (f c (inc n))))\n  1 1))", "problem": 66, "user": "52091d57e4b0e152394d76f0"}, {"code": "(fn [x y] \n  (loop [M (max x y) m (min x y)]\n    (if (= (rem M m) 0)\n      m\n      (recur m (rem M m)))))", "problem": 66, "user": "51696ee7e4b03f62cda68ce8"}, {"code": "(fn gcd [a b]\n  (if (= b 0)\n      a\n      (gcd b (mod  a b))))", "problem": 66, "user": "520c5b9ee4b0b022ef140c94"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "51ce1320e4b0e42293a22551"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "520612a7e4b0bf4f1882c81c"}, {"code": "(fn [x y] (loop [a (min x y)]\n    (if (and (= (rem x a) 0) (= (rem y a) 0))\n      a\n      (recur (dec a))\n    )\n  ))", "problem": 66, "user": "52016690e4b0b2e020a18f0f"}, {"code": "(fn gcd\n  [a b]\n  (cond\n    (zero? (mod a b)) b\n    (< a b) (gcd b a)\n    :else (gcd b (mod a b))))", "problem": 66, "user": "52084f75e4b01ce6bbf31dde"}, {"code": "#(if (zero? %2) % (recur %2 (mod % %2)))", "problem": 66, "user": "5208a3a2e4b0301979a6c235"}, {"code": "(fn [x y] (first (filter #(and (= (mod x %) 0) (= (mod y %) 0)) (range (max x y) 0 -1))))", "problem": 66, "user": "520e32a2e4b066f3ea161c93"}, {"code": "(fn [a b] (if (= b 0) a (recur b (mod a b))))", "problem": 66, "user": "51f66e0ee4b06ff1c25c52c3"}, {"code": "#(let [z (/ % %2)] (if (ratio? z) (/ % (numerator z)) %2))", "problem": 66, "user": "51db1abae4b094966a2cd685"}, {"code": "(fn [n1 n2]\n  (last (sort (keys (filter (fn [a] ( = 2 (val a))) (frequencies (apply concat (map #(filter (fn [n] (= (rem % n) 0)) (range 1 (inc %))) [n1 n2]))))))))", "problem": 66, "user": "51f40975e4b0fca5e8b4822e"}, {"code": "(fn gcd [x y]\n   (cond\n    (> x y) (gcd (- x y) y)\n    (< x y) (gcd x (- y x))\n    :else x))", "problem": 66, "user": "52129363e4b0d32679a50640"}, {"code": "(fn [a b]\n  (cond\n    (= a b) a\n    (> a b) (recur (- a b) b)\n    :else (recur a (- b a))))", "problem": 66, "user": "513fab65e4b00f13ea1bd891"}, {"code": "(fn [x y] (apply max (filter #(and (= 0 (mod x %)) (= 0 (mod y %))) (range 1 (inc (max x y))))))", "problem": 66, "user": "5174ade2e4b07031762f2edf"}, {"code": "#(cond\n  (zero? %2) %\n  :else (recur %2 (rem % %2)))", "problem": 66, "user": "520242bae4b030ee0c5b26e3"}, {"code": "(fn [x y]\n  (let [r (map inc (range (min x y)))]\n    (last \n     (filter\n      (fn [e] (and (= 0 (mod x e)) (= 0 (mod y e))))\n      r ))))", "problem": 66, "user": "52173464e4b082aa80a88c75"}, {"code": "(fn gcd [m n]\n\t  (if (= 0 (rem m n)) n\n\t      (gcd n (rem m n))))", "problem": 66, "user": "5213ffd3e4b0961f15ac4d7d"}, {"code": "#(if (= 0 %2) %1 (recur %2 (mod %1 %2)))", "problem": 66, "user": "52160dbee4b0bf4bffd29cb3"}, {"code": "(fn gcd\n  [a b]\n  (if (= a b)\n    a\n    (let [mx (max a b)\n          mn (min a b)]\n      (recur mn (- mx mn)))))", "problem": 66, "user": "51f9527fe4b09be9c177e549"}, {"code": "#(loop [x %1 y %2]\n\t(cond\n\t (< x y) (recur x (- y x))\n\t (< y x) (recur (- x y) y)\n\t :else x))", "problem": 66, "user": "5151c184e4b03e678e393add"}, {"code": "(fn f[a b]\n  (if (= b 0) a (f b (rem a b))))", "problem": 66, "user": "52196842e4b0890f2f822bfa"}, {"code": "#(if (= %2 0) %1 (recur %2 (mod %1 %2)))", "problem": 66, "user": "50e1bdd8e4b019fc399ce17f"}, {"code": "(fn gcd [a b]\n  (apply max\n  \t(filter #(= 0 (mod a %1)\n              (mod b %1))\n          (range 1 (inc (min a b))))))", "problem": 66, "user": "5213dbc3e4b0961f15ac4d74"}, {"code": "(fn gcd [a b] \n  (if (zero? b) \n    a\n    (recur b (mod a b))))", "problem": 66, "user": "521679e9e4b0bf4bffd29cca"}, {"code": "(fn [a b]\n  (if (= 0 b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "521b9f92e4b0c4ef0be8304c"}, {"code": "(fn [a b]\n  (if (= b 0) a (recur b (mod a b))))", "problem": 66, "user": "52199105e4b0c4ef0be82ff9"}, {"code": "#(apply max ((fn [a b] (clojure.set/intersection (set ((fn [n] (filter (partial (fn [c d] (= 0 (mod c d))) n) (range 1 (inc n)))) a)) (set ((fn [n] (filter (partial (fn [c d] (= 0 (mod c d))) n) (range 1 (inc n)))) b)))) % %2))", "problem": 66, "user": "510ee996e4b07438aa321462"}, {"code": "(fn [x y] (reduce (fn [a n] (if (= 0 (mod x n) (mod y n)) n a)) (range 1 (inc (min x y)))))", "problem": 66, "user": "521e8227e4b0dd19981ad082"}, {"code": "(fn [a b]\n  (if (= a b)\n    a\n    (if (> a b)\n      (recur (- a b) b)\n      (recur a (- b a))\n      )))", "problem": 66, "user": "52117ea7e4b07aea8afc4f70"}, {"code": "(fn gcd [x y]\n  (if (zero? y)\n    x\n    (gcd y (mod x y))))", "problem": 66, "user": "5220bc0fe4b0e6a83c8925a7"}, {"code": "(fn [x y]\n  (let \n    [divs (fn [n] (filter #(= 0 (mod n %)) (range 1 (+ 1 n))))]\n    (first \n     (clojure.set/intersection \n      (apply sorted-set-by > (divs x)) \n      (apply sorted-set-by > (divs y))))))", "problem": 66, "user": "519c4111e4b0a1d87b003458"}, {"code": "#(if (zero? %2) % (recur %2 (mod % %2)))", "problem": 66, "user": "4f4ff836e4b03ad3f0c10cf4"}, {"code": "(fn [n k]\n  (loop [a n b k]\n    (if (= b 0) a\n\t(recur b (rem a b)))))", "problem": 66, "user": "5213348ae4b0d32679a50652"}, {"code": "#(last (for [x (range 1 (inc (min % %2))) :when (= (+ (rem % x) (rem %2 x)) 0)] x))", "problem": 66, "user": "5216933be4b000d124d989cf"}, {"code": "(fn [n m]\n  (if (zero? n) \n    m \n    (recur (rem m n) n)))", "problem": 66, "user": "520cb8c4e4b0b022ef140c9a"}, {"code": "#(loop [curr (min %1 %2)]\n   (if (= 0 (mod %1 curr) (mod %2 curr))\n      curr\n      (recur (dec curr))))", "problem": 66, "user": "51197750e4b057cba170bc99"}, {"code": "(fn gcd [x y] (if (> y x) (gcd y x) (if (= 0 y) x (gcd y (mod x y)))))", "problem": 66, "user": "51e61772e4b0efabf93c02e2"}, {"code": "(fn gcd\t[a b]\n  (if (= b 0)\n    a\n    (gcd b (rem\ta b))))", "problem": 66, "user": "5220a770e4b0e6a83c8925a3"}, {"code": "(fn [x y]\n  (loop [a (max x y) b (min x y)]\n    (if (= a b) a\n      (if (> b a ) \n        (recur (- b a) a)\n        (recur (- a b) b)))))", "problem": 66, "user": "5224a46ce4b01819a2de42e5"}, {"code": "#(loop [a % b %2] (cond (= 0 a) b :else (recur (rem b a) a)))", "problem": 66, "user": "521dceeae4b050d5da042802"}, {"code": "(fn gcd [a b]\n  (let [abs (fn a [n]\n                   (if (neg? n)\n                     (- n)\n                     n))]\n    (loop [a (abs a) b (abs b)]\n      (if (zero? b) a,\n        (recur b (mod a b))))))", "problem": 66, "user": "51caca2ae4b068dadb8f2226"}, {"code": "(fn gcd [x y]\n  (if (zero? x) y (gcd (mod y x) x)))", "problem": 66, "user": "4fb710f4e4b081705acca2cd"}, {"code": "#(apply max (filter (fn[x](and (= 0 (rem %1 x)) (= 0 (rem %2 x)))) (range 1 (inc (min %1 %2)))))", "problem": 66, "user": "51f79238e4b06ff1c25c52d7"}, {"code": "(fn gcd [x y] (if (> x y) (gcd (- x y) y)\n                (if (< x y) (gcd (- y x) x)\n                  x\n                \n                \n                )))", "problem": 66, "user": "51fc44c5e4b0f1313d468a1b"}, {"code": "(fn g [a b] (if (zero? b) a (g b (rem a b))))", "problem": 66, "user": "5065faf9e4b0313a384e5645"}, {"code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "problem": 66, "user": "5225666be4b01819a2de4300"}, {"code": "(fn gcd [a b]\n  (if (= 0 b)\n    a\n    (gcd b (rem a b))))", "problem": 66, "user": "522048b3e4b0e6c71e0c0c16"}, {"code": "(fn [x y]\n  (if (= y 0) x\n    (recur y (rem x y))))", "problem": 66, "user": "5131d817e4b06942423563ca"}, {"code": "(fn [x y] \n  (first (filter (fn [n] \n            (if (and (zero? (mod x n)) (zero? (mod y n)))\n              true\n              false)) (range (max x y) 0 -1))))", "problem": 66, "user": "520f46f9e4b0101e4be6fcee"}, {"code": "(fn\n  [x y]\n  (loop [a x b y]\n    (if (= b 0)\n      a\n      (let [t b]\n        (recur t (mod a t))))))", "problem": 66, "user": "52277ab9e4b0186687e23a4f"}, {"code": "#(first (for [i (reverse (range 1 (inc (min % %2))))\n       :when (= 0 (mod % i) (mod %2 i))]\n   i))", "problem": 66, "user": "522454f4e4b01819a2de42d3"}, {"code": "#(if (zero? %) %2 (recur (mod %2 %) %))", "problem": 66, "user": "522eb5cce4b01cdb292c5f0c"}, {"code": "#(if (= % 0) %2 (recur (rem %2 %) %))", "problem": 66, "user": "522b922ee4b0d34ee08e71c3"}, {"code": "(fn gcd\n  [a b]\n  (if (< a b) (gcd b a)\n    (if (= 0 (mod a b))\n      b\n      (gcd a (mod a b)))))", "problem": 66, "user": "51701a9ce4b034fe8eaf70f5"}, {"code": "#(if (= %2 0) % (recur %2 (mod % %2)))", "problem": 66, "user": "52161db6e4b0bf4bffd29cb8"}, {"code": "(fn [a b] (apply max\n                 (filter\n                  #(and (zero? (mod a %))\n                        (zero? (mod b %)))\n                  (range 1 (max a b)))))", "problem": 66, "user": "51a91ac2e4b08d8ec191b822"}, {"code": "(fn [x y]\n  (apply max (vec \n  (clojure.set/intersection \n           (set (filter #(= 0 (mod x %)) (range 1 (inc x))))\n           (set (filter #(= 0 (mod y %)) (range 1 (inc y))))))))", "problem": 66, "user": "51dd9370e4b0c33a4e1da40c"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b) )))", "problem": 66, "user": "5080a697e4b01a93d3f38e49"}, {"code": "(fn gcd\n  [a b]\n  (if (zero? b)\n    a\n    (recur b (rem a b))))", "problem": 66, "user": "510591dde4b06d28cacc92eb"}, {"code": "(fn [x y] (last (filter #(= (mod x %) (mod y %) 0) (range 1 (+ 1 y)))))", "problem": 66, "user": "5125029de4b0ce9225d2ed3e"}, {"code": "(fn [x y]\n    (let [denominator? (fn [i] (and (= (mod x i) 0) (= (mod y i) 0)))]\n      (first (filter denominator? (range (min x y) 0 -1)))))", "problem": 66, "user": "52244a77e4b01819a2de42d1"}, {"code": "(fn [a b]\n          (apply\n            max\n            (filter\n              #(and\n                 (= (rem a %) 0)\n                 (= (rem b %) 0))\n              (range\n                1\n                (+\n                  (min a b)\n                  1)))))", "problem": 66, "user": "514fd753e4b0b449e54b8e00"}, {"code": "(fn [a b]\n  (apply max\n  \t(filter #(= (mod a %) (mod b %) 0)\n      (range 1 (inc (min a b))))))", "problem": 66, "user": "5191ac45e4b0d428d29dc1b6"}, {"code": "(fn [& l]\n  (let [m (reduce min l)]\n    (first \n     (for [x (iterate dec m)\n        :when (zero? (reduce #(+ %1 (rem %2 x)) 0 l))]\n      x))))", "problem": 66, "user": "51aefceee4b09397d5109797"}, {"code": "(fn gcd [a b]\n   (if (= 0 b)\n     a\n     (gcd b (mod a b))))", "problem": 66, "user": "516282c3e4b0e6d3c4734711"}, {"code": "(fn gcd [x y]\n  (if (zero? x)\n    y\n    (gcd (mod y x) x)))", "problem": 66, "user": "5233ad08e4b07e3ee2be83ac"}, {"code": "(fn gcd [a b]\n  (if(< a b)\n    (gcd b a)\n    (loop [a a b b]\n      (if (zero? b) a (recur b (mod a b))))))", "problem": 66, "user": "516abecae4b081287f204e9f"}, {"code": "(fn [a b]\n  (apply max\n         (let [min-val (min a b)]\n           (for [i (map inc (range min-val)) \n                 :when (and (zero? (mod a i)) (zero? (mod b i)))] i))))", "problem": 66, "user": "4f04e8b0535dcb61093f6be9"}, {"code": "(fn [a b]\n  (loop [a a, b b]\n    (cond\n      (= a b) a\n      (> a b) (recur (- a b) b)\n      (< a b) (recur a (- b a)))))", "problem": 66, "user": "50270618e4b01614d1633feb"}, {"code": "(fn [a b]\n  (loop [x a y b]\n    (if (zero? y)\n      x\n      (recur y (mod x y)))))", "problem": 66, "user": "51857e64e4b0da5a5be3babe"}, {"code": "#(loop [d (min % %2)]\n  (if (= 0 (rem % d) (rem %2 d))\n    d\n    (recur (dec d))))", "problem": 66, "user": "508923d5e4b06d8254e936e8"}, {"code": "(fn[x y]\n   (let [r (/ x y)\n         num (if (ratio? r) (numerator r) r)]\n     (/ x num)))", "problem": 66, "user": "506c0a02e4b0eda3100c090d"}, {"code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "5213d81de4b0961f15ac4d73"}, {"code": "(fn [a b] (loop [d (min a b)] (if (and (= (rem a d) 0) (= (rem b d) 0)) d (recur (dec d)))))", "problem": 66, "user": "5235a902e4b0a643f2dcb750"}, {"code": "(fn gcd [a b]\n  (if (= b 0) a\n    (gcd b (mod a b))))", "problem": 66, "user": "518a59b3e4b02bf06f6bbb4b"}, {"code": "#(loop [x (min % %2)] (if\n                        (and\n                         (zero? (mod % x))\n                         (zero? (mod %2 x)))\n                        x\n                        (recur (dec x))))", "problem": 66, "user": "523d02b0e4b0dbf0c3017289"}, {"code": "(fn[x y](case x\n\t2 2 \n    10 5\n    5 1\n    1023 33))", "problem": 66, "user": "52271ffee4b04e78ff2e19a9"}, {"code": "( fn gcd [a b] \n  (if (= 0 b)\n    a\n    (gcd b (rem a b))\n    )\n  )", "problem": 66, "user": "523f0bbfe4b01c266ffa7f91"}, {"code": "(fn gcd [x y]\n  (if (= 0 y)\n    x\n    (gcd y (mod x y))))", "problem": 66, "user": "523bd9c0e4b07becd5be2201"}, {"code": "(fn gcd [a b] (cond (= a b) a (> a b) (gcd (- a b) b) :else (gcd a (- b a))))", "problem": 66, "user": "523b4e91e4b07becd5be21ef"}, {"code": "(fn gcd [x y]\n  (if (not= 0 (rem (max x y) (min x y)))\n    (gcd (min x y) (rem (max x y) (min x y)))\n    (min x y)\n    ))", "problem": 66, "user": "523bc0e6e4b07becd5be21f9"}, {"code": "(fn gcd [a b] (loop [a a b b] (if (= b 0) a (recur b (mod a b)))))", "problem": 66, "user": "52319066e4b0e2e8de81d1e9"}, {"code": "(fn [n m]\n  (let [d (fn [n] (set (filter #(= 0 (mod n %)) (range 1 (+ 1 n)))))]\n    (apply max (filter #(get (d n) %) (d m)))))", "problem": 66, "user": "4fec550de4b0681fd128dca6"}, {"code": "(fn gcd \n  [n d]\n  (if (= d 0) \n    n\n    (gcd d (mod n d))))", "problem": 66, "user": "50aa60bee4b056ee01935865"}, {"code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "523b10dfe4b02f719975bdb8"}, {"code": "#(if (zero? %2)\n   %1\n   (recur %2 (mod %1 %2)))", "problem": 66, "user": "51cd75d6e4b02254fc79488c"}, {"code": "(fn f [a b] (if (zero? b) a (f b (mod a b))))", "problem": 66, "user": "51cfc616e4b0e42293a22578"}, {"code": "(fn [m n]\n  (loop [a (max m n) b (min m n)]\n    (let [r0 (rem a b) q0 (int (/ a b))]\n      (if\n        (zero? r0)\n        b\n        (recur r0 (rem b r0))))))", "problem": 66, "user": "5201ada5e4b0b2e020a18f14"}, {"code": "(fn my-gcd [a b]\n\t(->> [a b]\n\t     (iterate (fn [[x y]]\n\t\t\t  [y (rem x y)]))\n\t     (some #(when (zero? (second %))\n\t\t      (first %)))))", "problem": 66, "user": "52381b2ae4b0fae3832e99ef"}, {"code": "(fn [a b]\n   (cond\n       (zero? a) b\n       (zero? b) a\n       (> a b) (recur (- a b) b)\n       (< a b) (recur a (- b a))\n       :else (recur (- a b) b)))", "problem": 66, "user": "522eba30e4b01cdb292c5f0e"}, {"code": "#(if (= 0 %2) %1 (recur %2 (rem %1 %2)))", "problem": 66, "user": "4f2d5f5de4b0d6649770a05a"}, {"code": "(fn gcd [x y]  \n  (let [z (mod x y)]\n    (if (zero? z)\n      y\n      (gcd y z))))", "problem": 66, "user": "511e763ce4b03e81d390ac29"}, {"code": "#(loop [bg (max %  %2), sm (min % %2), rv sm ]\n        (if (> rv 0)\n            (if (= 0 (rem sm rv) (rem bg rv))\n              rv\n              (recur bg sm (dec rv))\n        )\n        nil\n        )\n    )", "problem": 66, "user": "5229211be4b04c906c9c6a63"}, {"code": "(fn gcd [a b] (cond (= a b) a (> a b) (recur (- a b) b) (< a b) (recur a (- b a))))", "problem": 66, "user": "4f048f67535dcb61093f6bd3"}, {"code": "(fn [a b] (some #(if (= 0 (rem a %) (rem b %)) %) (range b 0 -1)))", "problem": 66, "user": "523ed522e4b057c4b7cd0a78"}, {"code": "(fn [a b]\n  (letfn [(divisable? [n d]\n                      (zero? (rem n d)))]\n    (let [n (range (min a b) 0 -1)]\n      (first (take 1 (filter #(and (divisable? a %1) (divisable? b %1)) n))))))", "problem": 66, "user": "5236b6bce4b05f3be1c7c8fe"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "51fe9d7ce4b0f1313d468a70"}, {"code": "(fn gdc [a b]\n  (if (= b 0)\n    a\n    (gdc b (mod a b))))", "problem": 66, "user": "523b82efe4b07becd5be21f0"}, {"code": "#(loop [a (max %1 %2) b (min %1 %2)]\n  (if (= b 0)\n    a\n    (recur b (mod a b))\n  )\n)", "problem": 66, "user": "51f09f3de4b0274c496158d7"}, {"code": "(fn greatest-common-divisor [x y]\n  (if (< (min x y) 2)\n    1\n    (reduce max (map #(if (and (zero? (rem (max x y) %))\n                               (zero? (rem (min x y) %)))\n                        %\n                        1) \n                     (range (min x y) 1 -1)))))", "problem": 66, "user": "52485f02e4b05ef8e38e63d3"}, {"code": "(fn gcd [x y]\n  (if (zero? y)\n    x\n    (recur y (mod x y))))", "problem": 66, "user": "52487654e4b05ef8e38e63dc"}, {"code": "(fn gcd [a b]\n  (if (> b a)\n    (gcd b a)\n    (if (zero? (mod a b)) \n      b   \n      (recur b (mod a b)) \n      )   \n    )   \n  )", "problem": 66, "user": "5228f870e4b0186687e23a98"}, {"code": "(fn [a b]\n  (loop [x a y b]\n    (if (= 0 y)\n      x\n      (recur y (mod x y)))))", "problem": 66, "user": "51d08d67e4b067c365486351"}, {"code": "(fn [a b] \n  (reduce (fn [acc div] (if (and (zero? (mod a div)) \n                                 (zero? (mod b div))) div acc) )\n          1 \n          (range 2 (inc a))) )", "problem": 66, "user": "523a9fc9e4b081681ca7adca"}, {"code": "(fn gcd [x y]\n  (if (= 0 y)\n    x\n    (gcd y (mod x y))))", "problem": 66, "user": "52379c46e4b0fae3832e99db"}, {"code": "(fn [n1 n2]\n   (loop [the-try (min n1 n2)]\n     (if (and (= 0 (rem n1 the-try)) (= 0 (rem n2 the-try)))\n       the-try\n       (recur (dec the-try))\n       )\n     )\n   )", "problem": 66, "user": "50550f43e4b0b1b9d1860eb7"}, {"code": "(fn [a b] (if (= b 0) a (recur b (rem a b))))", "problem": 66, "user": "5246e945e4b0644eb7b0783b"}, {"code": "(fn gcd [& ints]\n  (loop [i (apply min ints)]\n    (let [mod-sum (reduce #(+ (mod %2 i) %1) 0 ints)]\n      (if (= mod-sum 0)\n        i\n        (recur (dec i))))))", "problem": 66, "user": "523288fee4b035af41902a88"}, {"code": "(fn [a b] (if (= 0 b)\n  a\n  (recur b (mod a b))))", "problem": 66, "user": "524740e7e4b05ef8e38e635d"}, {"code": "(fn [x y]\n  (letfn [(gcd [x y]\n               (if (= (mod y x ) 0)\n                 x\n                 (gcd (mod y x) x)))]\n    (gcd (min x y) (max x y))))", "problem": 66, "user": "524cdd51e4b0752c4cb68ccc"}, {"code": "(fn [x y]\n  (loop [r (range 1 (max x y))\n         divs []]\n    (let [d (first r)\n          xd (rem x d)\n          yd (rem y d)]\n      (if-not (<= d (min x y)) \n        (last divs)\n        (if (and (zero? xd) (zero? yd))\n          (recur (rest r) (conj divs d))\n          (recur (rest r) divs))))))", "problem": 66, "user": "4f601623e4b0defedf855fa3"}, {"code": "(fn [a b] (last (filter #(= 0 (mod a %) (mod b %)) (range 1 (inc (min a b))))))", "problem": 66, "user": "524be8e0e4b09eba1c0223f1"}, {"code": "(fn [x y] (if (zero? y) x (recur y (rem x y))))", "problem": 66, "user": "51b0e7b3e4b0c53cf2e68a6e"}, {"code": "(fn _ [x y]\n  (if (= x y)\n    x\n    (recur (min x y) (Math/abs (- x y)))))", "problem": 66, "user": "524ea587e4b0541d1855b7e9"}, {"code": "#(some (fn [x] (cond (every? (fn [num] (= 0 (rem num x))) %&) x)) (reverse (range 1 (+ 1 (apply min %&)))))", "problem": 66, "user": "524feb3fe4b0541d1855b81f"}, {"code": "(fn gcd [a b]\n  ((fn search-gcd [x y n]\n     (if (and (= 0 (mod x n))\n               (= 0 (mod y n)))\n       n\n       (search-gcd x y (- n 1))\n       ))\n   a\n   b\n   (if (< a  b) a b)\n   ))", "problem": 66, "user": "5252045ae4b0541d1855b884"}, {"code": "(fn gcd [a b]\n    (cond\n     (= a b) a\n     (> a b) (gcd (- a b) b)\n     (> b a) (gcd a (- b a))))", "problem": 66, "user": "523b1a65e4b02f719975bdbd"}, {"code": "(fn f [x y] (cond (= x y) x\n                  (< x y) (f x (- y x))\n                  (> x y) (f y (- x y))))", "problem": 66, "user": "523b1988e4b02f719975bdbc"}, {"code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "524b90fae4b09eba1c0223df"}, {"code": "(fn [v1 v2]\n  (let [l (max v1 v2)\n        s (min v1 v2)\n        m (mod l s)]\n    (if (zero? m) s\n      (recur s m))))", "problem": 66, "user": "52479487e4b05ef8e38e6373"}, {"code": "(fn [a b]\n  (loop [a a b b]\n    (if (zero? b) a,\n    (recur b (mod a b)))))", "problem": 66, "user": "524dd1c3e4b0f245900d275c"}, {"code": "(fn\n [a b]\n  (let [big (max a b) sm (min a b)]\n    (loop [here sm]\n      (let [bigD (/ big here) smD (/ sm here)]\n        (if (= here 1) here)\n        (if (and (= (int smD) smD) (and (= bigD (int bigD))))\n          here\n          (recur (dec here))\n        )\n      )\n    )\n  )\n  )", "problem": 66, "user": "52485723e4b05ef8e38e63d2"}, {"code": "#(if (= %2 0) % (recur %2 (mod % %2)))", "problem": 66, "user": "5236cd89e4b0e010857b4e45"}, {"code": "(fn my-gcd [a b] \n  (if (= (mod a b) 0) \n    b\n    (if (= (mod b a) 0) \n      a\n      (loop [n (int (/ (+ 1 (min a b)) 2))]\n        (if (or (= 1 n) (= 0 (mod a n) (mod b n)))\n          n\n          (recur (dec n)))\n        )\n      )\n    )\n  )", "problem": 66, "user": "524469dee4b0d8acf9ed6a9d"}, {"code": "(fn [n m] (loop [n n m m l (min n m)] (if (= 0 (mod n l) (mod m l)) l (recur n m (dec l)))))", "problem": 66, "user": "5213d7aae4b0961f15ac4d72"}, {"code": "(fn [val-1 val-2]\n    (let [low (min val-1 val-2)\n          high (max val-1 val-2)\n          remainder (mod high low)]\n      (if (= 0 remainder)\n        low\n        (recur low remainder)\n        )\n      )\n    )", "problem": 66, "user": "52213426e4b0e6a83c8925c4"}, {"code": "(fn [a b]\n  (let [c (max a b) d (min a b)]\n    (if (zero? (rem c d))\n      d\n      (recur d (rem c d)))))", "problem": 66, "user": "5256627ce4b0541d1855ba1a"}, {"code": "(fn gcd\n    ([x y]\n       (cond \n          (= (mod x y) 0) y\n          (< x y) (gcd y x)\n          :else (gcd y (mod x y))\n        )\n     )\n  )", "problem": 66, "user": "51d28e15e4b0d13b04db0d9b"}, {"code": "(fn [a b]\n  (apply max\n         (keep-indexed #(if (= 0 %2) (inc %1))\n                       (map #(+ (mod b %) (mod a %)) (range 1 (inc a))))))", "problem": 66, "user": "524ae8e6e4b09eba1c0223b5"}, {"code": "(fn ! [x y] (if (= 0 y) x (! y (mod x y))))", "problem": 66, "user": "5217c26fe4b0a4bccb16cab8"}, {"code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))\n    )\n  )", "problem": 66, "user": "52586d24e4b0cb4875a45cb0"}, {"code": "(fn gcd\n  [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "52488a46e4b05ef8e38e63e0"}, {"code": "#(/\n  %1\n  (let [ratio (/ %1 %2)]\n    (if (integer? ratio) ratio (numerator ratio))))", "problem": 66, "user": "525431dfe4b0541d1855b970"}, {"code": "(fn gcd [a b]\n  (loop [a a b b]\n    (if (= a b)\n      a\n      (if (> a b)\n        (recur (- a b) b)\n        (recur a (- b a))))))", "problem": 66, "user": "52463059e4b09dbe66b56198"}, {"code": "(fn [x y] \n  (apply max (filter #(and \n           (zero? (rem x %))\n           (zero? (rem y %))\n                      )\n             (range 1 (inc x)))))", "problem": 66, "user": "5259a16ee4b0cb4875a45ce1"}, {"code": "(fn [a b]\n  (loop [a' a \n         b' b]\n    (cond (= a' b') a'\n          (> a' b') (recur (- a' b') a')\n          :else (recur a' (- b' a')))))", "problem": 66, "user": "4ef7a483535dced4c769f258"}, {"code": "(fn [a b]\n  (let [get-divisor (fn [n] (into #{}\n                              (filter #(zero? (rem n %))\n                                      (range 1 (inc n)))\n                              ))\n        a-divisor (get-divisor a)\n        b-divisor (get-divisor b)\n        commom-divisor (clojure.set/intersection a-divisor b-divisor)]\n    (apply max commom-divisor)))", "problem": 66, "user": "5243e37ae4b076204b44fae3"}, {"code": "(fn [n1 n2] \n  ((fn [c] \n     (apply max (filter identity \n                        (for [x (first c)] \n                          (if (some #{x} (second c)) \n                            x))))) \n   (map #(filter identity \n                 (for [n (range 1 (+ % 1))] \n                   (if (= 0 (mod % n)) n))) [n1 n2])))", "problem": 66, "user": "5210ac52e4b080a8d9b9d63e"}, {"code": "(fn g [a b] (if (= b 0) a (g b (mod a b))))", "problem": 66, "user": "525b0b51e4b0cb4875a45d01"}, {"code": "(fn gcd[a b] (cond\n               (= a b) a\n               (> a b) (gcd (- a b) b)\n               (< a b) (gcd a (- b a))))", "problem": 66, "user": "5244fa73e4b0d8acf9ed6acb"}, {"code": "(fn myfn [n1 n2]\n\t(loop [x n1 y n2]\n    \t(if (< y x) (recur y x)\n        \t(if (= x 0) y\n            \t(recur (mod y x) x\n                )\n            )\n        )\n    )\n)", "problem": 66, "user": "525ba7bbe4b0cb4875a45d28"}, {"code": "(fn [x y] (first (filter #(= 0 (mod x %) (mod y %)) (iterate dec (min x y)))))", "problem": 66, "user": "525f51bde4b0cb4875a45dc8"}, {"code": "(fn\n  [x y]\n  (loop [a x b y]\n    (if (zero? b)\n      a\n      (recur b (mod a b)))))", "problem": 66, "user": "525fffb8e4b03e8d9a4a702b"}, {"code": "(fn [a b]\n  (let [smaller (if (< a b) a b)]\n    (loop [i 2 ret 1] \n      (if (> i smaller)\n        ret\n        (recur (inc i) (if (= 0 (rem a i) (rem b i)) i ret ))))))", "problem": 66, "user": "51622fb8e4b009fba0926e3f"}, {"code": "(fn [n m]\n  (cond\n   (> n m) \t(recur m n)\n   (= n 0) \tm\n   true\t \t(recur (mod m n) n)))", "problem": 66, "user": "52618ea3e4b03e8d9a4a7064"}, {"code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (rem a b))))", "problem": 66, "user": "521392bce4b0d32679a5065e"}, {"code": "(fn gcd [a b]\n  (if (= b 0) a (gcd b (mod a b)))\n  )", "problem": 66, "user": "5252cbe7e4b0541d1855b8d2"}, {"code": "(fn [a b]\n   (let [factors (fn [n] (filter #(= 0 (mod n %)) (rest (range (inc n)))))\n         a-factors (factors a)\n         b-factors (factors b)]\n     (some (set a-factors) (reverse b-factors))))", "problem": 66, "user": "52090567e4b0e152394d76ed"}, {"code": "(fn [x y] (some #(if (and (zero? (mod x %1)) (zero? (mod y %1))) %1 false) (range (max (quot x 2) (quot y 2)) 0 -1)))", "problem": 66, "user": "52655949e4b03e8d9a4a710b"}, {"code": "(fn gcd[x y]\n\t\t(if (zero? (mod x y)) y\n\t\t  (gcd y (mod x y))))", "problem": 66, "user": "51f2851fe4b0210f90e7454b"}, {"code": "(fn gcd[m n] (if (= n 0) m (recur n (mod m n))))", "problem": 66, "user": "523eb110e4b057c4b7cd0a67"}, {"code": "(fn [n m]\n ((fn gcd [x] (cond\n                 (= x 1) 1\n                 (and (= (rem n x) 0) (= (rem m x) 0)) x\n                 :else (gcd (dec x))\n              )\n  ) (min n m))\n)", "problem": 66, "user": "52474ec2e4b05ef8e38e6361"}, {"code": "(fn gcd [x1 x2] (apply max (filter #(and (= (mod x1 %) 0) (= (mod x2 %) 0)) (range 1 (inc (min x1 x2))))))", "problem": 66, "user": "524c7fcfe4b0752c4cb68cbd"}, {"code": "(fn [a b]\n  (if (<= a b)\n    (if (= (rem b a) 0)\n      a\n      (recur (- b a) a))\n    (recur b a)))", "problem": 66, "user": "51269362e4b083bb8f88cf09"}, {"code": "(fn [a b]\n      (loop [x a y b]\n        (if (zero? y) x\n            (recur y (mod x y)))\n        )\n      )", "problem": 66, "user": "51227a00e4b068a9582e656b"}, {"code": "(fn self [x y]\n  (cond\n    (> x y) (self y x)\n    (zero? (mod y x)) x\n    :else (self (mod y x) x)\n  ))", "problem": 66, "user": "52667ecfe4b03e8d9a4a713e"}, {"code": "#(some (fn [n] (if (and (= 0 (mod (min % %2) n)) (= 0 (mod (max % %2) (/ (min % %2) n)))) (/ (min % %2) n))) (range 1 (inc (min % %2))))", "problem": 66, "user": "526c2340e4b03e8d9a4a7281"}, {"code": "(fn mcd [x y]\n  (let [gt (max x y)\n        lt (min x y)\n        remainder (rem gt lt)]\n    (if (= remainder 0)\n      lt\n      (recur lt remainder))))", "problem": 66, "user": "525873e8e4b0cb4875a45cb2"}, {"code": "(fn gcd [a b]\n    (if (= b 0)\n      a\n      (recur b (mod a b))\n    )\n  )", "problem": 66, "user": "52593207e4b0cb4875a45cd3"}, {"code": "(fn [a b]\n  (letfn [(divisor [num]\n                 (filter #(= (mod num %) 0) (next (range (inc num)))))]\n  (apply max (for  [i (divisor a) :when (some #{i} (divisor b))] i))))", "problem": 66, "user": "51ca82e9e4b08b1cbd0d9488"}, {"code": "(fn [x y] (if (== x y) x (if (< x y) (recur x (- y x)) (recur (- x y) y))))", "problem": 66, "user": "526dd90de4b03e8d9a4a72fe"}, {"code": "(fn gcd [a b]\n  (if (= b 0) a (gcd b (mod a b))))", "problem": 66, "user": "5268eb68e4b03e8d9a4a71c6"}, {"code": "#(reduce (fn [best x] (if (and (zero? (rem % x)) (zero? (rem %2 x))) x best)) 1 (range 1 (inc (min % %2))))", "problem": 66, "user": "524f213be4b0541d1855b7ff"}, {"code": "(fn gcd [a b]\n  (if (zero? b) a\n    (gcd b (mod a b))))", "problem": 66, "user": "52530b4be4b0541d1855b8e4"}, {"code": "(fn [a b] (case (mod a b) 0 b 1 1 (recur b (mod a b))))", "problem": 66, "user": "50cf21dee4b0e61f11ddcd8b"}, {"code": "(fn gcd [a b]\n  (cond\n   (= a b) a\n   (> a b) (recur (- a b) b)\n   (> b a) (recur a (- b a))))", "problem": 66, "user": "4fad33e8e4b081705acca236"}, {"code": "(fn myCommonDivisor\n  [x y]\n  (if-not (= x y)\n    (let [maxx (max x y) minn (min x y)]\n      (myCommonDivisor (- maxx minn) minn))\n    x))", "problem": 66, "user": "509a25b7e4b0efbae1fbc0a8"}, {"code": "(fn gcd [a b]\n  (if (< a b)\n    (gcd b a)\n    (if (= b 0)\n      a\n      (gcd b (mod a b)))))", "problem": 66, "user": "523c6451e4b07becd5be2222"}, {"code": "(fn [x y] (some \n            #(when(= 0 (+ (mod x %) (mod y %))) %) \n            (reverse (range 1 (inc (min x y))))))", "problem": 66, "user": "5260341ee4b03e8d9a4a7034"}, {"code": "(fn gcd [a b]\n  (if (< a b)\n    (gcd b a)\n    (if (= b 0)\n      a\n      (gcd b (rem a b)))))", "problem": 66, "user": "526ee63de4b03e8d9a4a733f"}, {"code": "(fn gcd [aa bb]\n  (let [[a b] (if (>= aa bb) [aa bb] [bb aa])]\n    (if (<= b 0) aa\n      (gcd b (- a b)))))", "problem": 66, "user": "5272669de4b03e8d9a4a742e"}, {"code": "(fn [x y]\n  (loop [a x b y]\n    (cond (= a b) a\n          (> a b) (recur (- a b) b)\n          :else   (recur a (- b a)))))", "problem": 66, "user": "526f9715e4b03e8d9a4a7372"}, {"code": "(fn [a b]\n  (first (filter (fn [x] (= (mod a x) (mod b x) 0) ) (iterate dec (min a b)))))", "problem": 66, "user": "526439a4e4b03e8d9a4a70cc"}, {"code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "5272d4b7e4b03e8d9a4a7453"}, {"code": "(fn gcd [& args]\n            (let [[a b] (sort args)]\n              (if (= a 0)\n                b\n                (gcd a (mod b a))\n              )\n            )\n          )", "problem": 66, "user": "52727d52e4b03e8d9a4a7439"}, {"code": "(fn [x y]\n  (loop [z (max x y)]\n    (if (and (zero? (mod x z)) (zero? (mod y z)))\n             z\n             (recur (dec z)))))", "problem": 66, "user": "5269c150e4b03e8d9a4a71f8"}, {"code": "(fn __ [a b]\n  (let [mn (min a b)\n        mx (max a b)]\n    (if (zero? (mod mx mn))\n      mn\n      (__ mn (- mx mn)))))", "problem": 66, "user": "4f90dc2ae4b0dcca54ed6c92"}, {"code": "(fn [a b] (last (filter #(and (zero? (mod a %)) (zero? (mod b %))) (range 1 (inc (min a b))))))", "problem": 66, "user": "525a643be4b0cb4875a45cf1"}, {"code": "(fn pgcd [x y]\n  (loop [a (if (> x y) x y)\n         b (if (> x y) y x)]\n    (let [r (mod a b)]\n\t    (if (= r 0)\n    \t  b\n\t      (recur b r)))))", "problem": 66, "user": "52736ca1e4b03e8d9a4a747e"}, {"code": "( fn [a b] (letfn [(factors ([n] (filter #(= (mod n %) 0) (range 1 (inc n)))))] (last (sort (clojure.set/intersection (set (factors a)) (set (factors b))))) ))", "problem": 66, "user": "52628bb0e4b03e8d9a4a7089"}, {"code": "(fn gcd [n1 n2]                                                             \n    (letfn [                                                                  \n      (factors [n]                                                            \n        (for [x (map inc (range n)) :let [y (rem n x)] :when (zero? y)] x))   \n      (common [coll1 coll2]                                                   \n        (clojure.set/intersection                                             \n          (apply sorted-set coll1) (apply sorted-set coll2)))]                \n      (last (common (factors n1) (factors n2)))))", "problem": 66, "user": "526397f1e4b03e8d9a4a70b6"}, {"code": "#(first (filter (fn [x] (= 0 (rem %1 x) (rem %2 x))) (range (min %1 %2) 0 -1)))", "problem": 66, "user": "52746701e4b03e8d9a4a74a2"}, {"code": "(fn gcd \n            [a b]\n            (let[ c (mod a b)]\n              (if(zero? c)\n                b\n                (recur b c))))", "problem": 66, "user": "5273562ae4b03e8d9a4a7479"}, {"code": "(fn x [a b] (if (= 0 b) a (x b (mod a b))))", "problem": 66, "user": "50fe9d60e4b03cd852b4e84f"}, {"code": "#(first\n   (for [x (reverse(range 1 (inc(min %1 %2)))) :when (and (not(ratio? (/ %1 x)))(not(ratio? (/ %2 x))))] \n    x))", "problem": 66, "user": "5274eb56e4b03e8d9a4a74bb"}, {"code": "(fn a [x y] (if(zero? y)(identity x)(a y (mod x y))))", "problem": 66, "user": "527a8eb7e4b03e8d9a4a755f"}, {"code": "(fn [a b]\n  (reduce \n    #(if (every? zero? (map (fn [x] (rem x %2)) [a b]))\n       %2\n       %1) \n    (range (+ 1 (if (< a b) a b)))))", "problem": 66, "user": "5220909fe4b0e6a83c89259f"}, {"code": "(fn gcd [a b] (let [small (min a b) diff (- (max a b) (min a b))] (if (= small diff) small (gcd small diff))))", "problem": 66, "user": "512318b6e4b03b44edbed433"}, {"code": "(fn [a b] (reduce (fn [x y] (if (and (= 0 (mod a y)) (= 0 (mod b y))) y x)) 1 (range 1 (+ 1 (min a b)))))", "problem": 66, "user": "527818f7e4b03e8d9a4a7519"}, {"code": "(fn [x y]\n      (first\n        (for [d (range (min x y) 0 -1) :when (and\n                                               (zero? (rem x d))\n                                               (zero? (rem y d))) ]\n          d )))", "problem": 66, "user": "51e28063e4b08e53a149f0f2"}, {"code": "#(if (ratio? (/ % %2)) (/ % (numerator (/ % %2))) %2)", "problem": 66, "user": "4df20dda535d08e6dec9fe23"}, {"code": "(fn gcd [a b] (let [da-rem (rem a b)] (if (= 0 da-rem) b (gcd b da-rem))))", "problem": 66, "user": "51f4d46ee4b0fca5e8b48243"}, {"code": "(fn [x y]\n  (let [r (rem x y)]\n    (if (zero? r)\n      y\n      (recur y r))))", "problem": 66, "user": "520693e1e4b0bf4f1882c829"}, {"code": "(fn [a b] (apply max (into [] (filter (fn [x] (and (= 0 (rem a x)) (= 0 (rem b x)))) (range 1 (+ 1 (min a b))) ))))", "problem": 66, "user": "525c575be4b0cb4875a45d38"}, {"code": "(fn [x y]\n    (let [upper (min x y)]\n    (loop [t upper]\n      (if (and (= 0 (mod x t)) (= 0 (mod y t))) t\n      (recur (dec t))))))", "problem": 66, "user": "527675cbe4b03e8d9a4a74e2"}, {"code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "problem": 66, "user": "527b856fe4b03e8d9a4a758d"}, {"code": "(fn [a b] (if (= a b) a (if (> a b) (recur (- a b) b) (recur a (- b a)))))", "problem": 66, "user": "50be9b4ae4b00fb48fed2ef6"}, {"code": "(fn fun [x y] (if (< x y) (fun y x) (if (= (rem x y) 0) y (fun y (rem x y)))))", "problem": 66, "user": "52810225e4b0757a1b171418"}, {"code": "(fn [a b] (loop [x a y b] (if (= (rem x y) 0) y (recur y (rem x y)))))", "problem": 66, "user": "4e0359e8535d04ed9115e792"}, {"code": "#(loop [a % b %2] \n   (if (zero? b)\n     a\n     (recur b (mod a b))))", "problem": 66, "user": "519ef784e4b087743fad2198"}, {"code": "(fn [m n] \n  (last (last                               ;4) ...and the answer is the 3rd value in the\n                                            ;     last triplet\n         (filter                            ;3) ...save only the triplets of the form\n          #(zero? (+ (first %) (second %))) ;     [0 0 x] ; which indicates that both m\n                                                          ; and n are divisible by x...\n          (map                              ;2) ...for each, calculate the triplet\n           (fn [x] [(mod m x) (mod n x) x]) ;     [<remainder of m/x> <rem. of n/x> x]...\n           (range 1 (inc m)))               ;1) Take the #s from 1 to m (call this x)...\n          ))))", "problem": 66, "user": "4f80db02e4b033992c121bf9"}, {"code": "(fn [a b] (if (= b 0)\n            a\n            (recur b (mod a b))) \n  )", "problem": 66, "user": "51cec7b1e4b0e42293a2255b"}, {"code": "(fn [x y] (if (< x y) (recur y x) (if (= 0 y) x (recur y (- x y)))))", "problem": 66, "user": "522f483ce4b032bbe342415a"}, {"code": "#(if (zero? %) %2 (recur (mod %2 %) %))", "problem": 66, "user": "522a01ade4b0590a43906ced"}, {"code": "(fn f [a b] (if (== 0 a) b (f (mod b a) a)))", "problem": 66, "user": "4f9510b5e4b0dcca54ed6cc7"}, {"code": "#(loop [a % b %2]\n   (if (= b 0)\n\t a\n     (recur b (mod a b))))", "problem": 66, "user": "51e38568e4b0c611d6113e43"}, {"code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "52890634e4b0239c8a67ae5e"}, {"code": "#(if (zero? %2) % (recur %2 (mod % %2)))", "problem": 66, "user": "51a584c7e4b051b01d55f44e"}, {"code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "4e8dd6cb535d65386fec213b"}, {"code": "(fn gcd[a b]\n  (loop [i a, j b]\n    (cond\n     (= i j) i\n     (< i j) (recur i (- j i))\n     (> i j) (recur (- i j) j))))", "problem": 66, "user": "527dc2aee4b0757a1b17138d"}, {"code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "4f35b2ace4b0e243712b1ec5"}, {"code": "(fn [x y](let [a (max x y) \n                     b (min x y)\n                     s (reverse (range 1 (inc b)))] \n                (first (filter #(and (= 0 (mod a %)) (= 0 (mod b %))) s))\n        ))", "problem": 66, "user": "526a3412e4b03e8d9a4a721e"}, {"code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "528bba38e4b0239c8a67aea9"}, {"code": "(fn gcd [a b]\n     (if (= b 0)\n       a\n       (gcd b (mod a b))))", "problem": 66, "user": "5290257ae4b0239c8a67af03"}, {"code": "(fn [a b]\n  (cond\n   (> a b) (recur (- a b) b)\n   (< a b) (recur a (- b a))\n   :else a))", "problem": 66, "user": "52753740e4b03e8d9a4a74c1"}, {"code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "527236d4e4b03e8d9a4a741f"}, {"code": "(fn [a b]\n  (cond (= a b) a\n        (< a b) (recur (- b a) a)\n        (> a b) (recur (- a b) b)))", "problem": 66, "user": "528d1094e4b0239c8a67aebe"}, {"code": "(fn [a b] (some #(when (every? (fn [x] (zero? (rem x %))) [a b]) %) (range a 0 -1)))", "problem": 66, "user": "528a791ae4b0239c8a67ae77"}, {"code": "(fn gcd [x y] (if (zero? y) x (gcd y (mod x y))))", "problem": 66, "user": "528e64b7e4b0239c8a67aedd"}, {"code": "(fn [n1 n2]\n  (letfn [(factors [n] (set (filter #(zero? (rem n %)) (range 1 (inc n)))))]\n    (apply max (filter (factors n1) (factors n2)))))", "problem": 66, "user": "528b08efe4b0239c8a67ae8a"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "52951156e4b02ebb4ef7501b"}, {"code": "(fn gcd [x y] (if (zero? (rem x y))\n                y\n                (gcd y (rem x y))))", "problem": 66, "user": "5294e44de4b02ebb4ef75016"}, {"code": "(fn gcd [x y]\n  (loop [x x\n         y y\n         divisor x]\n    (if (= (rem x divisor) (rem y divisor) 0)\n      divisor\n      (recur x y (dec divisor)))))", "problem": 66, "user": "526f0a68e4b03e8d9a4a7348"}, {"code": "(fn gcd [a b]                                                                          \n   (cond                                                                                \n    (< a b) (gcd b a)                                                                   \n    (= b 0) a                                                                           \n    :else (gcd b (mod a b))))", "problem": 66, "user": "4f3656d1e4b0e243712b1ec9"}, {"code": "(fn gcd [x y] (if (= 0 y)\n                    x\n                    (gcd y (mod x y))))", "problem": 66, "user": "5296aa9be4b02ebb4ef75034"}, {"code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "5267d9bde4b03e8d9a4a7188"}, {"code": "#(count( drop-while pos? (map (fn f[x] (+ (mod % x) (mod %2 x)) ) (range (min % %2) 0 -1))))", "problem": 66, "user": "5296008fe4b02ebb4ef7502a"}, {"code": "#(loop [n % d %2]\n   (if (zero? d) n\n     (recur d (mod n d))))", "problem": 66, "user": "5281a445e4b0757a1b17143a"}, {"code": "(fn my-gcd [a b]\n  (let [d (max a b)\n        i (min a b)\n        q (quot d i)\n        r (rem d i)]\n    (if-not (= 0 r)\n      (recur i r)\n      i)))", "problem": 66, "user": "4f6e7073e4b07046d9f4efd8"}, {"code": "#(if (= % 0) %2 (recur (rem %2 %) %))", "problem": 66, "user": "51ad244fe4b09397d510977f"}, {"code": "(fn gcd [x1 y1]\n  (loop [x x1 y y1]\n    (let [[x y] (if(> x y) [x y] [y x])]\n      (cond\n       (= y 0) x\n       (= y 1) y\n       :else (recur y (rem x y))))))", "problem": 66, "user": "52140b53e4b0961f15ac4d7e"}, {"code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "50fc48dde4b0d10d794c19f6"}, {"code": "(fn [x y]\n   (reduce (fn [a b]\n             (if (and (== (mod x b) 0)\n                      (== (mod y b) 0)) b a)\n             ) 0 (range 1 (inc (min x y))))\n   )", "problem": 66, "user": "528ce039e4b0239c8a67aebc"}, {"code": "#(first \n  (for [x (range %1 0 -1) \n       :when (and (zero? (mod %2 x))\n                  (zero? (mod %1 x)))] \n    x))", "problem": 66, "user": "4e72187b535d5021c1a8965b"}, {"code": "(fn [n m]\n    (loop [idx (max n m)]\n       (if (and (= (mod n idx) 0) (= (mod m idx) 0))\n          idx  \n          (recur (dec idx)))))", "problem": 66, "user": "525b12b1e4b0cb4875a45d04"}, {"code": "#(loop [a % b %2] (if (= b 0) a (recur b (mod a b))))", "problem": 66, "user": "527094f0e4b03e8d9a4a73b3"}, {"code": "(fn gcd [x y]\n  (let [mn (min x y)\n        mx (max x y)]\n    (if (= mn mx)\n          mn\n          (gcd mn (- mx mn)))))", "problem": 66, "user": "50fe2420e4b03cd852b4e84a"}, {"code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "529ce629e4b04e0c58e87b6e"}, {"code": "(fn [a b]\n  (let [x (min a b) y (max a b)]\n    (first (filter #(and (integer? (/ y %)) (integer? (/ x %))) (iterate dec x)))))", "problem": 66, "user": "52a1acb2e4b04e0c58e87bdb"}, {"code": "(fn gcd [a b] (let [m (min a b) M (max a b)] (if (= 0 m) M (recur (- M m) m))))", "problem": 66, "user": "51c214bce4b0d204dbe2ca1c"}, {"code": "(fn euclidean-algo [a b]\n  (let [[smaller bigger] (if (< a b) [a b] [b a])]\n    (if (= (mod bigger smaller) 0)\n      smaller\n      (euclidean-algo smaller (- bigger smaller)))))", "problem": 66, "user": "527ccaf4e4b0757a1b17136d"}, {"code": "(fn [n1 n2]\n  (reduce \n   (fn [c n]\n     (if (and (zero? (rem n1 n)) (zero? (rem n2 n)))\n       n\n       c)) \n     1 (range 1 (max n1 n2))))", "problem": 66, "user": "52a32876e4b04e0c58e87bfb"}, {"code": "(fn [aa bb] (loop [a aa b bb] (println a b) (if (= 0 b) a (recur b (mod a b)))))", "problem": 66, "user": "4ec1619b535dfed6da9c6dab"}, {"code": "(fn [x y]\n  (let [common-divisor? (fn [x y curr]\n                          (and (zero? (mod x curr))\n                               (zero? (mod y curr))))]\n    (loop [curr 1\n           stop (min x y)\n           result 1]\n      (if (= curr stop)\n        (if (common-divisor? x y curr)\n          curr\n          result)\n        (recur (inc curr) stop\n               (if (common-divisor? x y curr)\n                 curr\n                 result))))))", "problem": 66, "user": "528b01a0e4b0239c8a67ae89"}, {"code": ";; version that doesn't use nice gcd algorithm\n(fn [a b]\n   (->> (map inc (range (max a b)))\n        (filter #(every? zero? [(mod a %) (mod b %)]))\n        last))", "problem": 66, "user": "4f8c4ee8e4b02e764a0a5194"}, {"code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "problem": 66, "user": "528652fbe4b0239c8a67ae14"}, {"code": "(fn gcd [a b]\n  (if(= b 0)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "5226f8e9e4b04e78ff2e199a"}, {"code": "(fn [a b] \n  (reduce max \n          (filter \n           \t#(and \n              (= 0 (rem a %)) \n              (= 0 (rem b %))) \n           (range 1 (inc (min a b))))))", "problem": 66, "user": "5273e006e4b03e8d9a4a7495"}, {"code": "(fn gcd [a b] (if (= b 0) a (gcd b (mod a b))))", "problem": 66, "user": "528e95efe4b0239c8a67aee2"}, {"code": "#(letfn [(factors [n]\n           (set (for [x (range 1 (inc n))\n                      :when (= 0 (rem n x))] x)))]\n   (apply max (clojure.set/intersection (factors %1) (factors %2))))", "problem": 66, "user": "4f0f36a7535d0136e6c22336"}, {"code": "(fn f [a b] (if (zero? b) a (f b (mod a b))))", "problem": 66, "user": "51929214e4b08962174cf74c"}, {"code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (rem a b))))", "problem": 66, "user": "525ed5f4e4b0cb4875a45db8"}, {"code": "(fn [x y]\n  (let [divisor? (comp zero? mod)\n        divisors (fn [n] (filter (partial divisor? n) (range 1 (inc n))))]\n    (apply max (filter (set (divisors x)) (divisors y)))))", "problem": 66, "user": "4f45c72be4b0d56e7bb92b8a"}, {"code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (rem a b))))", "problem": 66, "user": "529e3a4fe4b04e0c58e87b92"}, {"code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "52a779fce4b0c58976d9ac1a"}, {"code": "(fn gcd [x y]\n  (let [[x y] (sort > [x y])\n        r (rem x y)]\n    (if (zero? r)\n      y\n      (recur y r))))", "problem": 66, "user": "52ab6de1e4b0c58976d9ac78"}, {"code": "#(loop [a %1 b %2]\n   (cond (= 0 a) b\n         (= 0 b) a\n         (> a b) (recur (- a b) b)\n         :else (recur (- b a) a)))", "problem": 66, "user": "528a3e14e4b0239c8a67ae72"}, {"code": "(fn foo [a b]\n\t(if (= b 0)\n\t  a\n\t  (foo b (mod a b))))", "problem": 66, "user": "5289f1f4e4b0239c8a67ae6d"}, {"code": "(fn gcd [a b]\n          (cond (= a b) a\n                (> a b) (recur (- a b) b)\n                (< a b) (recur (- b a) a)))", "problem": 66, "user": "52afbc69e4b0c58976d9acc0"}, {"code": "(fn [a b] (if (= b 0) a (recur b (rem a b))))", "problem": 66, "user": "52295917e4b04c906c9c6a6f"}, {"code": "(fn gcd [x y]\n  (loop [divisor (min x y) \n        dividend (max x y)]\n    (cond\n     (= 1 divisor) divisor\n     (and (= 0 (mod x divisor)) (= 0 (mod y divisor))) divisor\n     :else (recur (dec divisor) dividend))))", "problem": 66, "user": "52a5e784e4b0c58976d9abf3"}, {"code": "#(last \n  (for [i (range 1 (+ 1 (min %1 %2))) :when (and (= 0 (mod %1 i)) (= 0 (mod %2 i)))] i))", "problem": 66, "user": "527c040be4b03e8d9a4a75a7"}, {"code": "#(. (. BigInteger (valueOf %1)) (gcd (. BigInteger (valueOf %2))))", "problem": 66, "user": "52a62e16e4b0c58976d9abf9"}, {"code": "#(loop [a %\n        b %2]\n   (if (zero? b)\n     a\n     (recur b (mod a b))))", "problem": 66, "user": "4ee8b9c9535d93acb0a66884"}, {"code": "(fn [x y]\n     (cond (= 0 x) y\n           (= 0 y) x\n           (< x y) (recur x (- y x))\n           (> x y) (recur (- x y) y)\n           (= x y) x))", "problem": 66, "user": "52153bdde4b0961f15ac4daa"}, {"code": "(fn gcd [a b]\n    (loop [a a b b]\n      (if (= 0 a) b\n        (recur (rem b a) a)\n        )\n      )\n    )", "problem": 66, "user": "5298d3f4e4b02ebb4ef75068"}, {"code": "(fn gcd [a b]\n  (if (< a b)\n    (gcd b a)\n    (let [c (rem a b)]\n      (if (= 0 c)\n        b\n        (gcd b c)\n        ))))", "problem": 66, "user": "527ba695e4b03e8d9a4a7596"}, {"code": "#(if (= %2 0) % (recur %2 (mod % %2)))", "problem": 66, "user": "4f437751e4b0d7d3c9f3fd20"}, {"code": "(fn gcd [n1 n2]\n  (letfn [(gcd-helper [big small]\n            (let [the-next (rem big small)]\n              (if (zero? the-next)\n                small\n                (gcd-helper small the-next))))]\n    (if (> n1 n2)\n      (gcd-helper n1 n2)\n      (gcd-helper n2 n1))))", "problem": 66, "user": "509e62a8e4b08df8156e9e2e"}, {"code": "(fn gcd[x y]\n  (if (= 0 y)\n    x\n    (gcd y (mod x y))))", "problem": 66, "user": "515896f2e4b059418b97f0a8"}, {"code": "#(.gcd (java.math.BigInteger/valueOf (int %1)) (java.math.BigInteger/valueOf (int %2)))", "problem": 66, "user": "52a88c4de4b0c58976d9ac30"}, {"code": "(fn gcd\n  [a b]\n  (let [tiny (min a b)\n        biggy (max a b)\n        options (range 1 (inc tiny))]\n    (reduce #(if (= 0 (mod tiny %2) (mod biggy %2)) %2 %1) 1 options)))", "problem": 66, "user": "524f4256e4b0541d1855b808"}, {"code": "(fn [a b]\n  (cond \n    (> a b) (if (zero? (mod a b)) b (recur b (mod a b)))\n    (< a b) (recur b a)\n    :else a))", "problem": 66, "user": "52b43468e4b0c58976d9ad1b"}, {"code": "(fn gcdme [a b] ( let  [divisor  (fn [n1 n2 d] (and (zero? (rem n1 d)) (zero? (rem n2 d))))]  (loop [x 1 result 1] (if (> x (min a b)) result (recur (inc x) (if (divisor a b x) x result))))))", "problem": 66, "user": "52b60e94e4b0c58976d9ad3e"}, {"code": "; http://introcs.cs.princeton.edu/java/23recursion/Euclid.java.html\n\n(fn gcd[p q](if (= q 0) p\n        (gcd q (mod p q))))", "problem": 66, "user": "52a1edd6e4b04e0c58e87be4"}, {"code": "(fn f [x y]\n  (let [m (mod x y)]\n    (if (= m 0)\n      y\n      (f y m))))", "problem": 66, "user": "52b0323ee4b0c58976d9acc6"}, {"code": "(fn largest-common-divisor [x y]\n  (letfn [\n      (divisors [n]\n        (set (filter\n          #(zero? (mod n %))\n          (range 1 (inc n)))))]\n    (apply max (clojure.set/intersection (divisors x) (divisors y)))))", "problem": 66, "user": "527fd663e4b0757a1b1713de"}, {"code": "(fn [& as]\n  (let [facs (fn [n] (set (keep #(if (= 0 (rem n %)) %) (range 1 (inc n)))))]\n    (apply max (apply clojure.set/intersection (map facs as)))))", "problem": 66, "user": "4fc3a72ae4b081705acca342"}, {"code": "(fn [x y] (first (filter #(= (+ (mod x %) (mod y %)) 0) (range (min x y) 0 -1))))", "problem": 66, "user": "4fa38e3fe4b081705acca190"}, {"code": "(fn mgcd\n  [a b]\n  (let [m (min a b)]\n    (loop [n m]\n      (if (= 0 (rem a n) (rem b n))\n        n\n        (recur (dec n))))))", "problem": 66, "user": "51852961e4b0da5a5be3babb"}, {"code": "(fn [a b]\n  (if (= 0 b) a (recur b (mod a b))))", "problem": 66, "user": "52b65f26e4b0c58976d9ad43"}, {"code": "#(loop [x (if (< %1 %2) %1 %2), y (if (>= %1 %2) %1 %2)]\n   (if (= 0 (mod y x))\n     x\n     (recur (mod y x) x))\n)", "problem": 66, "user": "52ba2af3e4b07a9af57922cc"}, {"code": "(fn [a b] \n   (reduce \n    #(if (= [0 0] [(mod a %2) (mod b %2)]) %2 %1)\n    1\n    (range 1 (inc (min a b)))))", "problem": 66, "user": "52aad30ce4b0c58976d9ac6d"}, {"code": "(fn gcd  [a b]\n  (loop [m (min a b)]\n    (if  (= (mod a m) (mod b m) 0)\n      m\n      (recur (dec m)))\n    )\n)", "problem": 66, "user": "52ba43d0e4b07a9af57922cd"}, {"code": "(fn gcd [m n] (cond (zero? m) n\n                    (zero? n) m\n                    (= m n) m\n                    (= m 1) 1\n                    (= n 1) 1\n                    (and (even? m) (even? n)) (* 2 (gcd (/ m 2) (/ n 2)))\n                    (and (even? m) ((complement even?) n)) (gcd (/ m 2) n)\n                    (and (even? n) ((complement even?) m)) (gcd m (/ n 2))\n                    (and ((complement even?) m) ((complement even?) n) (> n m)) (gcd (/ (- n m) 2) m)\n                    (and ((complement even?) m) ((complement even?) n) (< n m)) (gcd (/ (- m n) 2) n)))", "problem": 66, "user": "52a5d1f3e4b0c58976d9abf1"}, {"code": "#(loop [a % b %2] (if (zero? b) a (recur b (rem a b))))", "problem": 66, "user": "52a9154ee4b0c58976d9ac3b"}, {"code": "(fn gcd [a b] (if (= b 0)\n                 a\n                 (gcd b (mod a b))))", "problem": 66, "user": "529d4f4be4b04e0c58e87b79"}, {"code": "#(if (zero? %2) % (recur %2 (mod % %2)))", "problem": 66, "user": "52b42d7ee4b0c58976d9ad19"}, {"code": "(fn gcd [a b] (if (= b 0) a (gcd b (mod a b))))", "problem": 66, "user": "52747090e4b03e8d9a4a74a5"}, {"code": "#(loop [a %1 b %2]\n   (if (zero? b)\n     a\n     (recur b (mod a b))))", "problem": 66, "user": "52b405e1e4b0c58976d9ad15"}, {"code": "(fn [x y] (last (filter #(and (= 0 (mod x %)) (= 0 (mod y %))) (range 1 (inc (min x y))))))", "problem": 66, "user": "526fce6fe4b03e8d9a4a7383"}, {"code": "(fn [x y] (let [s (min x y) l (max x y)] (if (= s l) s (recur s (- l s)))))", "problem": 66, "user": "52b5edd1e4b0c58976d9ad3c"}, {"code": "(fn [x y] (if (zero? y) x (recur y (mod x y))))", "problem": 66, "user": "52baea85e4b07a9af57922d9"}, {"code": "(fn gcd\n  [x,y]\n  (last\n   (filter\n    (fn [a]\n      (every? true? (map (fn [z] (== 0 (mod z a))) [x y])))\n    (range 1 (max x y)))))", "problem": 66, "user": "52b7a904e4b0c58976d9ad51"}, {"code": "(fn [x y]\n  (let [step (fn f [i] (if (= (rem x i) (rem y i) 0)\n                       i\n                       (f (dec i))))]\n    (step x)))", "problem": 66, "user": "52a55adee4b0c58976d9abe7"}, {"code": "(fn [n1 n2]\n  (let [divs (fn [n] (filter #(= (rem n %) 0) (range 1 (inc n))))]\n    (last (filter\n           (set (divs n1))\n                (divs n2)))))", "problem": 66, "user": "52b80827e4b0c58976d9ad56"}, {"code": "(fn [x y] \n  (let [n (min x y)]\n    (last (filter #(= 0 (rem x %) (rem y %)) (range 1 (inc n))))))", "problem": 66, "user": "52774dd2e4b03e8d9a4a74ff"}, {"code": "(fn gcd [a b] \n  (if (= a b) a\n  (if (> a b) \n    (gcd (- a b) b)\n    (gcd a (- b a)))))", "problem": 66, "user": "4ffa8affe4b0678c553fc3bd"}, {"code": "(fn gcd [a b]\n  (if (= b 0)\n      a\n      (gcd b (mod a b))\n  )\n)", "problem": 66, "user": "52bf8e35e4b07a9af579233a"}, {"code": "(fn [a b] (last (filter #(and (= 0 (mod a %))\n                               (= 0 (mod b %))) (range 1 (max a b)))))", "problem": 66, "user": "4eda8d7c535d10e5ff6f530f"}, {"code": "(fn gcd [x y]\n  (if (= 0 (mod x y))\ny\n    (gcd y (mod x y))));", "problem": 66, "user": "50a4d1d3e4b0344e360f3bc6"}, {"code": "(fn\n  [a b]\n  (first (filter #(= 0 (mod a %) (mod b %))(range (min a b) 0 -1))))", "problem": 66, "user": "52b577c9e4b0c58976d9ad39"}, {"code": "(fn [x y]\n  (loop [a (max x y) b (min x y)]\n    (if (= b 0)\n      a\n      (recur b (mod a b)))))", "problem": 66, "user": "4f3a979de4b0e243712b1f10"}, {"code": "(fn gcd[x y] (loop [a x b y] \n  (if (= b 0) a \n    (recur b (mod a b)) )))", "problem": 66, "user": "52ab61f5e4b0c58976d9ac75"}, {"code": "#(loop [p % q %2] (if (zero? q) p (recur q (mod p q))))", "problem": 66, "user": "50772e6ae4b0fc74642bff5d"}, {"code": "(fn gcd [a b]\n   (if (zero? b)\n     a\n     (gcd b (mod a b))))", "problem": 66, "user": "52976262e4b02ebb4ef75041"}, {"code": "#(apply max (clojure.set/intersection (set (filter (fn [x] (= 0 (mod % x))) (range 1 (inc %))))\n(set (filter (fn [x] (= 0 (mod %2 x))) (range 1 (inc %2))))))", "problem": 66, "user": "52bdb689e4b07a9af5792306"}, {"code": "(fn [a b]\n  (loop [a a b b]\n    (if (zero? b)\n      a\n      (recur b (mod a b)))))", "problem": 66, "user": "527cd633e4b0757a1b17136f"}, {"code": "; Euclid's algorith\n(fn [a b] \n  (loop [x a \n         y b] \n    (if (= x y) \n      x\n      (if (< x y)\n        (recur x (- y x))\n        (recur (- x y) y)\n        )      \n      )\n    )\n  )", "problem": 66, "user": "52c45793e4b0c2d177d620d7"}, {"code": "(fn gcd [a b]\n  (if (= a b)\n       a\n      (if (> a b)\n          (gcd (- a b) b)\n          (gcd a (- b a))\n       )\n   )\n )", "problem": 66, "user": "52763696e4b03e8d9a4a74d7"}, {"code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "problem": 66, "user": "52b02329e4b0c58976d9acc5"}, {"code": "(fn gcd [num1 num2]\n (loop [cnt 1 tmp 1 ]\n  (if (or (> cnt num1) (> cnt num2)) tmp\n   (do (if (and (= (mod num1 cnt)0) (= (mod num2 cnt) 0)) (recur (inc cnt) cnt)\n  (recur (inc cnt) tmp))))))", "problem": 66, "user": "52c3a0f4e4b0c2d177d620c6"}, {"code": "#(letfn [(gcd [x y]\n            (let [v (rem y x)]\n              (if (zero? v) x\n                  (gcd v x))))]\n    (if (< %2 %1) (gcd %2 %1)\n        (gcd %1 %2)))", "problem": 66, "user": "52c25645e4b07a9af579237d"}, {"code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "52aa4a67e4b0c58976d9ac62"}, {"code": "(fn f [x y] (if (= 0 y) x (f y (rem x y))))", "problem": 66, "user": "52bf29fde4b07a9af579232e"}, {"code": "(fn greatest-common-divisor [x y]\n  (let [mx (max x y)\n        mn (min x y)]\n    ((comp\n\n     (partial apply max) \n     \n     (fn [v] (map (fn [x] (if (and (= 0 (rem mx x)) (= 0 (rem mn x))) x 0)) v))\n\n     vec\n     rest \n     range \n     inc) \n     \n     mn)))", "problem": 66, "user": "515bbcd9e4b0388ca8ca1521"}, {"code": "; a > b\n(fn gcd [a b] \n  (loop [a a b b]\n\t(if (= (mod a b) 0)\n\t    b\n\t    (recur b (mod a b)))\n  ))", "problem": 66, "user": "52aa16d1e4b0c58976d9ac5a"}, {"code": "#(if (= % %2) % (recur (- (max % %2) (min % %2)) (min % %2)))", "problem": 66, "user": "52bdf6bde4b07a9af579230d"}, {"code": "(fn [y x]\n\t(reduce \n     (fn [a b] (if (> a b) a b)) \n      (for [i (range 1 (+ 1 (min y x)))] (if (and (= 0 (rem y i)) (= 0 (rem x i))) i 0))))", "problem": 66, "user": "51eab308e4b0f1f103a0d150"}, {"code": "(fn [a b] (first (filter #(= 0 (rem a %) (rem b %)) (range (min a b) 0 -1))))", "problem": 66, "user": "4ea365e2535d7eef308072c5"}, {"code": "(fn f [a b] (if (= b 0) a (f b (rem a b))))", "problem": 66, "user": "52c6a0abe4b0c2d177d62111"}, {"code": "(fn gcd [x y]\n  (if (zero? (rem x y)) y (gcd y (rem x y)))\n  )", "problem": 66, "user": "50dcb2f4e4b02e6ac9592c91"}, {"code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (rem a b))))", "problem": 66, "user": "52b8af15e4b07a9af57922b5"}, {"code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "52c4fe42e4b0c2d177d620e9"}, {"code": "(fn gcd [a b]\n  (if (zero? b) a (gcd b (mod a b)))\n)", "problem": 66, "user": "52b49aebe4b0c58976d9ad2b"}, {"code": "(fn gcd \n  [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "52bf936ee4b07a9af579233b"}, {"code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "problem": 66, "user": "52c580c2e4b0c2d177d620f5"}, {"code": "(fn [a b] \n(cond \n(zero? a) b\n(zero? b) a\n :else\n(recur b (mod a b))))", "problem": 66, "user": "52c58440e4b0c2d177d620f7"}, {"code": "(fn [x y ](reduce (fn [a b] (if\n                       (and (= 0 (rem x (inc b))) (= 0 (rem y (inc b))))\n                     (inc b)\n                     a\n                     )) 1 (range (min x y))))", "problem": 66, "user": "52c1bd29e4b07a9af579236a"}, {"code": "#(if (zero? %2) % (recur %2 (rem % %2)))", "problem": 66, "user": "508f97c0e4b0ea685a20f768"}, {"code": "(fn gcd [big small]\n  (if (< big small)\n    (gcd small big)\n    (if (= small 0)\n      big\n      (gcd small (mod big small))\n      )\n    )\n  )", "problem": 66, "user": "4f03641a535dcb61093f6a9b"}, {"code": "(fn [x y] (first (filter #(= 0 (rem x %) (rem y %)) (iterate dec (min x y)))))", "problem": 66, "user": "52cca65be4b07d0d72b2736b"}, {"code": "(fn rec [a b]\n  (if (> a b)\n    (let [c (rem a b)]\n      (if (= c 0)\n        b\n        (rec b c)))\n    (rec b a)))", "problem": 66, "user": "52cc09c1e4b07d0d72b27356"}, {"code": "(fn [& lst] (letfn [(div? [x y] (zero? (rem y x))) (common-div? [x y] (every? (fn [z] (div? x z)) y))] (first (filter (fn [z] (common-div? z lst)) (range (apply max lst) 0 -1)))))", "problem": 66, "user": "52cc85abe4b07d0d72b27367"}, {"code": "(fn [x y] (first (filter #(= 0 (rem x %) (rem y %)) (range (max x y) 0 -1))))", "problem": 66, "user": "52c5c1c8e4b0c2d177d620fc"}, {"code": "(fn gcd [a b]\n  (cond\n   (= a b) a\n   (zero? a) b\n   (zero? b) a\n   (and (every? even? [ a b])) (* 2 (gcd (/ a 2) (/ b 2)))\n   (and (even? a) (odd? b)) (gcd (/ a 2) b)\n   (and (odd? a) (even? b)) (gcd a (/ b 2))\n   :else (if (> a b)\n           (gcd (/ (- a b) 2) b)\n           (gcd (/ (- b a) 2) a))))", "problem": 66, "user": "52ab51c4e4b0c58976d9ac73"}, {"code": "(fn gcd [a b]\n   (let [[a b] (if (< a b) [b a] [a b])\n         rem (mod a b)]\n     (cond\n      (= 0 rem) b\n      (= rem 1) 1\n      :else(gcd a rem))))", "problem": 66, "user": "52cc582ae4b07d0d72b27362"}, {"code": "(fn gcd [a b]\n  (if (zero? b)\n     a\n     (recur b (mod a b))\n   )\n  )", "problem": 66, "user": "529a73bde4b02ebb4ef75096"}, {"code": "(fn gcd [x y]\n  (let [remainder (mod x y)]\n  \t(if (= remainder 0) \n      y\n      (gcd y remainder))))", "problem": 66, "user": "525aa499e4b0cb4875a45cf7"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (rem a b))))", "problem": 66, "user": "505345d9e4b0517ede0d0a06"}, {"code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "problem": 66, "user": "52828298e4b0757a1b17145b"}, {"code": "(fn gcd\n  [a b]\n  (loop [x (min a b) y (max a b)]\n    (if (zero? x)\n      y\n      (recur (min (- y x) x) (max (- y x) x)))))", "problem": 66, "user": "5094057fe4b097f48cc38593"}, {"code": "(fn gcd\n   [a b]\n   (let [r (rem a b)]\n     (if (zero? r)\n       b\n       (gcd b r))))", "problem": 66, "user": "52c00263e4b07a9af579233f"}, {"code": "(fn [a b]\n  (let [min (min a b)\n        max (max a b)\n        rem (mod max min)]\n    (if (zero? rem)\n      min\n      (recur min rem))))", "problem": 66, "user": "4eb7b049535d7eef30807377"}, {"code": "(fn [a b](loop [q a r b] (if( zero? r) q (recur r (mod  q r )))))", "problem": 66, "user": "52bbd09ee4b07a9af57922ee"}, {"code": "(fn gcd [x y]\n  (cond\n   (< x y) (recur y x)\n   (> x y) (recur y (- x y))\n   :else x))", "problem": 66, "user": "52d39033e4b099d49816f0c6"}, {"code": "(fn [first-a first-b]\n  (letfn [(euclid-seq [a b]\n                      (cons a (lazy-seq (euclid-seq b \n                                                    (if (zero? b)\n                                                      0\n                                                      (rem a b))))))]\n    (last (take-while (comp not zero?) (euclid-seq first-a first-b)))))", "problem": 66, "user": "52d340ebe4b099d49816f0c1"}, {"code": "(fn [a b] (or (first (filter #(and (= 0 (rem a %)) (= 0 (rem b %))) (range a 1 -1))) 1))", "problem": 66, "user": "52c1f404e4b07a9af5792370"}, {"code": "(fn f [x y] (if (< x y) (f y x) (let [r (rem x y)] (if (= 0 r) y (f y r)))))", "problem": 66, "user": "52b453b0e4b0c58976d9ad21"}, {"code": "(fn gcd [a b]\n  (let [divisors (fn [a] (filter #(= 0 (mod a %))(range 1 (+ 1 a))))]\n    (reduce max (clojure.set/intersection (set (divisors a)) (set (divisors b))))))", "problem": 66, "user": "506755b3e4b03d366d7cb2bc"}, {"code": "(fn r [a b]\n  (if (= a 0)\n    b\n    (r (mod b a) a)))", "problem": 66, "user": "525cc137e4b0cb4875a45d46"}, {"code": "(fn [x y] (first (filter #(and (zero? (mod x %)) (zero? (mod y %))) (range (min x y) 0 -1))))", "problem": 66, "user": "52ce8648e4b07d0d72b27390"}, {"code": "#(loop [x %1 y %2 n %1]\n   (if (and (zero? (rem x n)) (zero? (rem y n)))\n     n\n     (recur x y (dec n))))", "problem": 66, "user": "52cdec6ce4b07d0d72b27383"}, {"code": "#(loop [x %1 y %2 n %1]\n   (if (and (zero? (rem x n)) (zero? (rem y n)))\n     n\n     (recur x y (dec n))))", "problem": 66, "user": "52cdec62e4b07d0d72b27382"}, {"code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "51a97f7ae4b08d8ec191b827"}, {"code": "(fn [a b]\n  (cond\n   (> a b) (recur (- a b) b)\n   (< a b) (recur a (- b a))\n   :else a))", "problem": 66, "user": "4f8c6bf6e4b02e764a0a519b"}, {"code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "problem": 66, "user": "52d7f7efe4b09f7907dd1380"}, {"code": "(fn[a b]\n  (let [dv (fn[x] (set (filter #(zero? (rem x %)) (range 1 (inc x)) )))]\n    (apply max (clojure.set/intersection (dv a) (dv b)))))", "problem": 66, "user": "52d02380e4b07d0d72b273b7"}, {"code": "(fn gcd [x y] (loop [a x b y] (if (= b 0) a (recur b (mod a b)))))", "problem": 66, "user": "52d3f666e4b09f7907dd1327"}, {"code": "#(if (= %2 0) %1 (recur %2 (mod %1 %2)))", "problem": 66, "user": "52d4acc8e4b09f7907dd1333"}, {"code": "(fn [a b] (first (filter #(and (zero? (mod a %)) (zero? (mod b %))) (range a 0 -1))))", "problem": 66, "user": "51a058dae4b0b292b01ee3f3"}, {"code": "(fn [a b] (some #(when (= 0 (rem a %) (rem b %)) %) (range (max a b) 0 -1)))", "problem": 66, "user": "52c8758be4b0c2d177d62135"}, {"code": "(fn [x y]\n  (if (zero? y)\n    x\n    (recur y (mod x y))))", "problem": 66, "user": "52d469c8e4b09f7907dd1330"}, {"code": "(\nletfn [ \n   ( \n   addsmaller\n   [x] \n     ( \n       if    (= 1 (mini x))    x     (addsmaller (conj x (- (mini x) 1) ) ) \n     ) \n    )\n         \n        ( forfilter [number somelist] ( filter (fn [div] (= 0 (mod number div))) somelist ) )\n          \n        ( dowork [firs sec]  (maxi (forfilter sec  (forfilter firs (addsmaller(list firs)))))  )\n       \n       (compa [ed dv]  (if (< ed dv) ed dv    )   )\n       \n       (maxicompa [ed dv]  (if (> ed dv) ed dv    )   )\n       \n       (mini [l] (reduce compa l))\n       \n       (maxi [l] (reduce maxicompa l))\n         \n        ] \n \n \n \ndowork\n)", "problem": 66, "user": "52dd129ae4b09f7907dd13db"}, {"code": "(fn f [n n2]\n  (let [s (min n n2)\n         b (max n n2)\n         r (mod b s)]\n    (if (= r 0) s\n        (f s r))\n        ))", "problem": 66, "user": "52baf490e4b07a9af57922db"}, {"code": "#(cond\n  (> %1 %2) (recur (- %1 %2) %2)\n  (< %1 %2) (recur %1 (- %2 %1))\n  :else %1)", "problem": 66, "user": "4ed45563535d10e5ff6f52c9"}, {"code": "(fn gcd [x y] \n\t(let [r (rem x y)] (if (= r 0) y (recur y r))))", "problem": 66, "user": "52cdb7efe4b07d0d72b2737c"}, {"code": "(fn GCD [x y]\n  (cond\n   (= x y) x\n   (< x y) (GCD x (- y x))\n   true (GCD (- x y) y)))", "problem": 66, "user": "52d7b0ade4b09f7907dd137c"}, {"code": "(fn find-gcd \n\t([a b] (find-gcd (min a b) a b))\n\t([gcd a b]\n\t(if (and (= 0 (rem a gcd)) (= 0 (rem b gcd)))\n\t\tgcd\n\t\t(find-gcd (dec gcd) a b))))", "problem": 66, "user": "52b35a6ee4b0c58976d9ad07"}, {"code": ";; #(if (= 0 %) %2 (recur (rem %2 %) %))\n#(if (= 0 %) %2 (recur (rem %2 %) %))", "problem": 66, "user": "52d10680e4b07d0d72b273c3"}, {"code": "(fn gcd[a b] (cond (zero? b) a :else (gcd b (mod a b))))", "problem": 66, "user": "5238ca2de4b0d705d026eef6"}, {"code": "(fn \n  [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "5195b8cce4b04c0af7ff3c08"}, {"code": "(fn gcd\n  [x y]\n  (cond\n   (= x 0) y\n   (= y 0) x\n   :else\n   (if (> x y)\n     (gcd y (rem x y))\n     (gcd x (rem y x)))))", "problem": 66, "user": "52ce5056e4b07d0d72b2738f"}, {"code": "(fn greatest-divisor [x y]\n  (first (filter (fn [n] (and (= 0 (mod x n)) (= 0 (mod y n)))) (reverse (range 1 (+ 1(min x y))))))\n  )", "problem": 66, "user": "5204f2b1e4b0bf4f1882c7f5"}, {"code": "(fn gcd [a b]\n  (if (> a b)\n    (gcd (- a b) b)\n    (if (< a b)\n      (gcd a (- b a))\n      a\n      )\n    )\n  )", "problem": 66, "user": "52d92f13e4b09f7907dd13a2"}, {"code": "(fn [x y] \n  (reduce max (map\n   \t(fn[r] (if (= 0 (mod x r) (mod y r))\n             r \n            -1)\n   \t)\n   \t(map inc (range (min x y) ))\n   \t)))", "problem": 66, "user": "52ca720fe4b071a8d36bd3e2"}, {"code": "(fn gcd [x y]\n  (if (= y 0) x\n    (gcd y (mod x y))))", "problem": 66, "user": "5271605ae4b03e8d9a4a73ed"}, {"code": "#(if (zero? %) %2 (recur (mod %2 %) %))", "problem": 66, "user": "51e3a549e4b0c611d6113e47"}, {"code": "#(loop [x (min % %2)] (if (= 0 (rem % x) (rem %2 x)) x (recur (- x 1))))", "problem": 66, "user": "52e48632e4b09f7907dd1450"}, {"code": "(fn gcd [a b]\n(if (= b 0)\n  a\n  (gcd b (mod a b))))", "problem": 66, "user": "52c8a8b9e4b0c2d177d62139"}, {"code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "problem": 66, "user": "52df232fe4b09f7907dd13fc"}, {"code": "(fn gcd\n  [a b]\n  (let [[small large] (if (< a b) [a b] [b a])]\n    (loop [[x & xs] (take small (iterate dec small))]\n      (if (and\n            (= 0 (mod small x))\n            (= 0 (mod large x)))\n        x\n        (recur xs)))))", "problem": 66, "user": "52dd6cc8e4b09f7907dd13e2"}, {"code": "(fn gcd [a b]\n  (if (= 0 b) a\n\t(recur b (mod a b))))", "problem": 66, "user": "5224cf82e4b01819a2de42ef"}, {"code": "(fn gcd\n  [a b]\n  (let [a (int a) b (int b)]\n      (if (zero? b) a\n      (gcd b (mod a b)))))", "problem": 66, "user": "51f2a491e4b0210f90e74553"}, {"code": "(fn gcd[p q]\n  (if (= q 0) p\n  (if (< p q)\n    (gcd p (rem q p))\n    (gcd q (rem p q))\n    )\n  ))", "problem": 66, "user": "517e12e3e4b0fcc7c5d37d3c"}, {"code": "#(loop [m %1 n %2]\n \t(cond\n     (= m n) m\n     (> m n) (recur (- m n) n)\n     (< m n) (recur m (- n m))\n   ))", "problem": 66, "user": "52e3912ee4b09f7907dd1446"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "52d809bde4b09f7907dd1384"}, {"code": "(fn gcd [a b]\n    (cond\n     (= a b) a\n     (< a b) (gcd a (- b a))\n     (> a b) (gcd (- a b) b)))", "problem": 66, "user": "52d6a9c2e4b09f7907dd1365"}, {"code": "(fn gcd [a b]\n  (if (= a b) a\n    (if (= a 0) b\n      (if (= b 0) a\n        (if (= 0 (rem a 2))\n          (if (= 0 (rem b 2))\n            (* 2 (gcd (/ a 2) (/ b 2)))\n            (gcd (/ a 2) b))\n          (if (= 0 (rem b 2))\n            (gcd a (/ b 2))\n            (if (> a b)\n              (gcd (/ (- a b) 2) b)\n              (gcd (/ (- b a) 2) a))))))))", "problem": 66, "user": "52dad8bde4b09f7907dd13be"}, {"code": "(fn gcd[i,j](let[n (min i j), m (max i j)]\n               (if (zero? (mod m n)) n (gcd n (mod m n)))))", "problem": 66, "user": "52d66ca0e4b09f7907dd135c"}, {"code": "(fn gcd\n  ([a b]\n   (if (zero? b)\n     a\n     (gcd b (mod a b))\n     )\n   )\n  )", "problem": 66, "user": "52e59ca5e4b09f7907dd1464"}, {"code": "(fn gcd [x y]\n  (let [d (min x y)]\n    (first (filter #(= 0 (rem x %) (rem y %)) (range d 0 -1)))))", "problem": 66, "user": "52c4af71e4b0c2d177d620e1"}, {"code": "#(let [r (/ %1 %2)] (cond (ratio? r) (/ %1 (numerator (/ %1 %2))) :else %2))", "problem": 66, "user": "52dc2bc8e4b09f7907dd13ca"}, {"code": "(fn gcd\n  ([a b] \n   (if (> a b)\n     (gcd a b nil)\n     (gcd b a nil)))\n  ([a b x]\n   (let [r (rem a b)]\n     (if (zero? r)\n       b\n       (gcd b r nil)))))", "problem": 66, "user": "525d490ae4b0cb4875a45d70"}, {"code": "(fn gcd [x y]\n  (if\n    (= y 0)\n    x\n    (gcd y (mod x y))))", "problem": 66, "user": "52c672e2e4b0c2d177d6210e"}, {"code": "(fn [& args]\n   (letfn [(check-gcd [n] (= '(0 0) (map #(mod % n) args)))]\n      (apply max (filter check-gcd (range 1 (inc (apply min args)))))))", "problem": 66, "user": "4fb99483e4b081705acca2da"}, {"code": ";; Euclidean division\n(fn [a b]\n   (if-not (= b 0)\n     (recur b (mod a b))\n     a))", "problem": 66, "user": "52e0e646e4b09f7907dd1416"}, {"code": "(fn [a b]\n  (let [bia (biginteger a)\n        bib (biginteger b)]\n    (.gcd bia bib)))", "problem": 66, "user": "52e276d9e4b09f7907dd1436"}, {"code": "(fn gcd [a b]\n  (if (= b 0)\n   a\n   (gcd b (rem a b))))", "problem": 66, "user": "52efd3d9e4b05e3f0be25ed4"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "52e75667e4b09f7907dd1485"}, {"code": "(fn [a b]\n  (let [[m n] (if (> a b) [a b] [b a])]\n    (loop [m m n n] (if (zero? n) m (recur n (mod m n))))))", "problem": 66, "user": "4ef9c8f9535dced4c769f26b"}, {"code": "(fn [a b]\n  (loop [c (max a b)\n         d (min a b)\n         r (rem c d)]\n    (if (= r 0)\n      d\n      (recur d r (rem d r)))))", "problem": 66, "user": "52d00832e4b07d0d72b273b4"}, {"code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "problem": 66, "user": "50e8cac5e4b0ebbe794eb7ef"}, {"code": "(fn [x y]\n  (if (= x y)\n    x\n    (loop [dividend (max x y)\n           divisor (min x y)]\n      (if (= divisor 0)\n        dividend\n        (recur divisor (rem dividend divisor))))))", "problem": 66, "user": "52d9aaa1e4b09f7907dd13ae"}, {"code": "(fn [a b] \n\t  (if (= b 0)\n\t    a\n\t    (recur b (mod a b))))", "problem": 66, "user": "52e3e6a8e4b09f7907dd1448"}, {"code": "(fn [a b]\n  (loop [s (max a b)\n         q (min a b)\n         r (mod s q)]\n    (if (= r 0)\n      \tq\n      \t(recur (max q (- s q)) (min q (- s q)) (mod s q)))))", "problem": 66, "user": "52a5a8ebe4b0c58976d9abed"}, {"code": "(fn gcd [x y]\n  (loop [a x, b y]\n    (if (zero? b)\n      a\n      (recur b (rem a b)))))", "problem": 66, "user": "52cf084ce4b07d0d72b27399"}, {"code": "(fn [a b] (first (filter (fn [d] (= (rem a d) (rem b d) 0)) (reverse (range 1 (inc (min a b)))))))", "problem": 66, "user": "52f89ac6e4b047fd55836fd6"}, {"code": "(fn [x y] (let [m (min x y)] (loop [i m] (if (< i 1) 1 (if (and (= 0 (mod x i)) (= 0 (mod y i))) i (recur (dec i)))))))", "problem": 66, "user": "522404d8e4b01819a2de42c0"}, {"code": "(fn [x y]\n  (let [v (max x y)\n        divy? (fn [n] (= 0 (mod x n) (mod y n)))]\n    (last (filter divy? (range 1 v)))))", "problem": 66, "user": "52bdd135e4b07a9af579230a"}, {"code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "51ab4082e4b04e3dc0c27b31"}, {"code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "52f07ccee4b05e3f0be25edf"}, {"code": "(fn gcd [a b]\n  (if (= 0 b) a (gcd b (mod a b))))", "problem": 66, "user": "50c2fbebe4b00e537d00253c"}, {"code": "(fn n [b d] \n  (if (= 0 d)\n    b\n    (n d (rem b d))))", "problem": 66, "user": "52d838bee4b09f7907dd138b"}, {"code": "(fn[n1 n2] \n    (first \n      (first \n        (filter \n          #(= (nth % 1) 0) \n          (for[i (range (min n1 n2) 0 -1)] \n            [i (+ (mod n1 i) (mod n2 i))])\n          )\n        ) \n      )\n    )", "problem": 66, "user": "52e68e61e4b09f7907dd1479"}, {"code": "(fn gcd [x y]\n  (if (= y 0)\n    x\n    (gcd y (mod x y))))", "problem": 66, "user": "52f8f4d1e4b047fd55836fde"}, {"code": "(fn f [x y] (if (= y 0) x (f y (mod x y))))", "problem": 66, "user": "529dfc6de4b04e0c58e87b8a"}, {"code": "(fn [x y] (last (for [i (range 1 (inc (max x y))) :when (and (= 0 (rem x i) (rem y i)))] i)))", "problem": 66, "user": "52f9ce6de4b047fd55836ff0"}, {"code": "(fn [a b] (reduce #(if (= 0 (rem a %2) (rem b %2)) %2 %) (range 1 (inc (min a b)))))", "problem": 66, "user": "52d7a930e4b09f7907dd1379"}, {"code": "(fn [a b]\n  (if (= a b)\n    a\n    (if (< a b)\n      (recur a (- b a))\n      (recur (- a b) b))))", "problem": 66, "user": "52d660eae4b09f7907dd1356"}, {"code": "(fn ! [x y]\n  (if (= y 0) x\n    (! y (mod x y))))", "problem": 66, "user": "52faec2ee4b047fd55837004"}, {"code": "(fn [x y]\n  (if (= (mod x y) 0)\n    y\n    (recur y (mod x y))\n   ))", "problem": 66, "user": "52fcfeeee4b047fd55837027"}, {"code": "#(apply max \n        (filter (fn[x] (= 0 (mod  %1 x )(mod %2 x) )) (range 1 (inc (min %1 %2)))))", "problem": 66, "user": "5300aa1de4b0d8b024fd3710"}, {"code": "(fn greatest-common-divisor\n  [a b]\n  (apply max (remove nil? \n    (for [x (range 1 (inc (min a b)))]\n      (let [da (/ a x) db (/ b x)]\n        (if (and (= da (int da)) (= db (int db))) x))))))", "problem": 66, "user": "5300b750e4b0d8b024fd3711"}, {"code": "(fn f [a b]\n          (if (= b 0) a\n              (let [x (max a b) y (min a b)]\n                (f (- x y) y))))", "problem": 66, "user": "52c7f036e4b0c2d177d62126"}, {"code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (rem a b))))", "problem": 66, "user": "52f4fae4e4b05e3f0be25f27"}, {"code": "(fn [a b] (apply max (remove nil? (map (fn [x] (if (= (mod a x) (mod b x) 0) x nil)) (range 1 (inc (min a b)))))))", "problem": 66, "user": "5300f68de4b0d8b024fd3714"}, {"code": "#(if (= %2 0) % (recur %2 (mod % %2)))", "problem": 66, "user": "529b44afe4b02ebb4ef7509d"}, {"code": "(fn [a b] (second (first \n        (drop-while #(apply not= %)\n        (iterate (fn [[x y]] (sort [x (- y x)])) (sort (list a b)))        \n        )\n     )\n   )\n  )", "problem": 66, "user": "528f4462e4b0239c8a67aef0"}, {"code": "(fn gcd [x y]\n  (loop [gd (min x y)]\n    (if (= 0 (mod x gd) (mod y gd))\n      gd\n      (recur (dec gd)))))", "problem": 66, "user": "51b89503e4b050a1176cd69a"}, {"code": "(fn [x y]\n  (cond\n   \t(= y 0) x\n    (> y x) (recur y x)\n    :else (recur (rem x y) y)))", "problem": 66, "user": "52f5f8b4e4b09b582c12c9cc"}, {"code": "(fn [& xs] (let [facts (map \n             (fn [x] (into #{} (filter #(= 0 (rem x %)) (range 1 (inc x))))) \n              xs)]\n               (last (sort (clojure.set/intersection (first facts) (last facts))))))", "problem": 66, "user": "52fa4f48e4b047fd55836ff7"}, {"code": "(fn [x y]\n   (apply max (filter \n                #(= 0 (rem x %) (rem y %))\n                (range 1 (max (inc x) (inc y))))))", "problem": 66, "user": "52eb400ee4b0705949c4443b"}, {"code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "52facb9de4b047fd55837002"}, {"code": "#(reduce max (filter (fn [d] (and (= (mod % d) 0) (= (mod %2 d) 0))) (range 1 (inc (min % %2)))))", "problem": 66, "user": "512587ade4b05d10e3e395fb"}, {"code": "(fn gcd [a b]\n  (if (zero? b)\n    a   \n    (recur b (rem a b))))", "problem": 66, "user": "528a2de7e4b0239c8a67ae71"}, {"code": "(fn gcd [a b] (cond (> b a) (gcd b a) (= b 0) a :else (gcd b (rem a b))))", "problem": 66, "user": "52f10094e4b05e3f0be25ee8"}, {"code": "(fn [a b] (let [aa (max a b) bb (min a b)] (if (zero? bb) aa (recur bb (- aa bb)))))", "problem": 66, "user": "52fb903ee4b047fd5583700b"}, {"code": "(fn[x y](let [ls (range 1 (inc (min x y)))]  (last (filter #(and (zero? (rem x %)) (zero? (rem y %))) ls))))", "problem": 66, "user": "5301157ae4b0d8b024fd3717"}, {"code": "(fn [a b]\n  (if (zero? b) a (recur b (mod a b))))", "problem": 66, "user": "530578ede4b0d8b024fd3760"}, {"code": "(fn g[u v]\n  (if  (= u 0) v\n   (if (> u v)\n    (g (- u v) v)\n    (g (- v u) u))))", "problem": 66, "user": "52f818a6e4b047fd55836fcc"}, {"code": "(fn[x y](if(zero? y) x (recur y (mod x y))))", "problem": 66, "user": "5302d79ce4b0d8b024fd3736"}, {"code": "#(let [small (min %1 %2) big (max %1 %2)]\n   (loop [div 1]\n     (if (and (= 0 (mod small div)) (= 0 (mod big (/ small div))))\n       (/ small div)\n       (recur (inc div))\n     )\n   )\n )", "problem": 66, "user": "5176afd2e4b085adf681d889"}, {"code": "(fn commondiv [& n] \n\t(letfn [\n\t\t(buildrange [v] (range 1 (inc v)))\n\t\t(testmod [x y] (if (= 0 (mod x y)) y nil))\n\t\t(dividers [x] (remove nil? (map #(testmod x %) (buildrange x)) ))\n\t\t(intersect [& colls] (apply sorted-set(flatten(filter #(=(count %) (count colls))(partition-by identity(sort(apply concat colls)))))))\n\t\t] (\n\t\t\tfirst(reverse(apply intersect (map dividers n)))\n\t\t\t)\n\t\t)\n\t)", "problem": 66, "user": "5307e4ece4b02e82168697a9"}, {"code": "(fn [a b]\n  (let [m (min a b)]\n    (loop\n      [best 1\n       i 1]\n      (if (> i m)\n        best\n        (recur\n         (if (and (= 0 (mod a i)) (= 0 (mod b i)))\n           i\n           best)\n         (+ i 1))))))", "problem": 66, "user": "530d85dee4b08068f379eca8"}, {"code": "(fn [a b] (last (filter #(= 0 (mod a %) (mod b %)) (range 1 (max a b)))))", "problem": 66, "user": "530caf86e4b02e82168697df"}, {"code": "#(loop [a (max %1 %2) b (min %1 %2)]\n    (let [r (mod a b)]\n      (if (= r 0)\n        b\n        (recur b r))))", "problem": 66, "user": "52b63875e4b0c58976d9ad41"}, {"code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "problem": 66, "user": "50b9d991e4b04934c218a4a9"}, {"code": "(fn [x y]\n    (let [smallest (min x y)\n           largest (max x y)\n           r (range smallest 0 -1)]\n       (apply max (filter #(and (= (rem smallest %) 0) (= (rem largest %) 0))  r))\n     ) \n  )", "problem": 66, "user": "52430d3ce4b076204b44faa5"}, {"code": "(fn gcd [a_ b_]\n  (last (let [a (max a_ b_)\n        b (min a_ b_)]\n    (for [i (drop 1 (range))\n          :while (and (<= i a) (<= i b))\n          :when (and (= 0 (rem a i)) (= 0 (rem b i)))\n          ]\n      i)\n  )))", "problem": 66, "user": "52ffb7f2e4b0d8b024fd370b"}, {"code": "(fn [a b](apply max (filter #(= 0 (rem a %)) (filter #(= 0 (rem b %)) (range 1 (inc a))))))", "problem": 66, "user": "5301a13ae4b0d8b024fd371e"}, {"code": "#(if (= % %2) % (if (> % %2) (recur (- % %2) %2) (recur % (- %2 %))))", "problem": 66, "user": "53034738e4b0d8b024fd373e"}, {"code": "(fn [a b] \n    (first\n        (filter (fn [x] (not(nil? x))) \n            (for [i (reverse(range(+ 1 (min a b)))) ]\n               (and\n                    (if (> i 0) true nil)\n                    (if (= (mod a i) 0) true nil)\n                    (if (= (mod b i) 0) i nil)\n                )\n            )\n        )\n    )\n)", "problem": 66, "user": "52fba50ce4b047fd5583700d"}, {"code": "#(let [mi (min %1 %2) ma (max %1 %2)]\n\t(if (= 0 (mod ma mi))\n\t\tmi\n\t\t(loop [divs (range 2 (int (/ mi 2))) cnds [1]]\n\t\t\t(let [x (first divs)]\n\t\t\t\t(if (nil? x)\n\t\t\t\t\t(last cnds)\n\t\t\t\t\t(if (= 0 (mod ma x) (mod mi x))\n\t\t\t\t\t\t(recur (rest divs) (conj cnds x))\n\t\t\t\t\t\t(recur (filter (fn [in] (not= 0 (mod in x))) divs) cnds))\n\t\t\t\t)\n\t\t\t))))", "problem": 66, "user": "52bf6946e4b07a9af5792334"}, {"code": "(fn gcd [a b]\n  (if (zero? (rem a b))\n    b\n    (gcd b (rem a b))\n  )\n)", "problem": 66, "user": "53153466e4b08068f379ed23"}, {"code": "(fn [x y] (loop [w x v y] (if (= (rem w v) 0) v (recur v (rem w v)))))", "problem": 66, "user": "5314318ee4b08068f379ed13"}, {"code": "(fn [n1 n2]\n  (let [a (min n1 n2)\n        b (max n1 n2)\n        is-common-divisor (fn [x] (and (= 0 (rem a x)) (= 0 (rem b x))))]\n    (first (filter is-common-divisor (-> inc (map (range a)) reverse))))\n  )", "problem": 66, "user": "531490bde4b08068f379ed17"}, {"code": "(fn gcd [a b] (if (= (mod a b) 0) b (gcd b (mod a b))))", "problem": 66, "user": "5314c8f7e4b08068f379ed1d"}, {"code": "(fn [x y]\n  (first\n   (filter\n    (fn [z]\n      (and\n       (= (mod x z) (mod y z))\n       (= 0 (mod x z))\n       )\n      )\n    (reverse\n     (range\n      (max x y)\n      )\n     )\n    )\n   )\n)", "problem": 66, "user": "5303a027e4b0d8b024fd3745"}, {"code": "(fn [a b] (loop [a a b b] (if (zero? b) a (recur b (mod a b)))))", "problem": 66, "user": "52f89125e4b047fd55836fd4"}, {"code": "(fn [a b]\n  (let [f (fn [x] (filter #(zero? (mod x %)) (range 1 (inc x))))\n        fa (set (f a))\n        fb (f b)]\n    (apply max (remove nil? (map fa fb)))))", "problem": 66, "user": "52d7f9a8e4b09f7907dd1381"}, {"code": "(fn com-div [x y]\n      (if (> y x)\n\t  (com-div y x)\n          (if (= y 0)\n\t    x\n\t    (com-div y (mod x y)))))", "problem": 66, "user": "52e17e66e4b09f7907dd1423"}, {"code": "(fn my-gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "5310e7aee4b08068f379ecdc"}, {"code": "(fn [m n]\n  (if (zero? n)\n    m\n    (recur n (mod m n))))", "problem": 66, "user": "530e9729e4b08068f379ecbc"}, {"code": "(fn [x y]\n  (if (zero? y) x\n    (recur y (mod x y))))", "problem": 66, "user": "5300158ae4b0d8b024fd370f"}, {"code": "(fn [m n]\n  (loop [a (max m n) b (min m n)]\n    (if (zero? b) \n      a\n      (recur b (rem a b)))))", "problem": 66, "user": "531488f3e4b08068f379ed16"}, {"code": "(fn[a b]\n  (if (zero? a)\n    b\n    (recur (Math/abs (- a b)) (min a b))))", "problem": 66, "user": "52bc6cb2e4b07a9af57922f5"}, {"code": "(fn [a b]\n   (if (zero? (rem a b))\n     b\n     (recur b (rem a b))))", "problem": 66, "user": "4ff4bed0e4b0678c553fc35f"}, {"code": "#(cond (= %1 %2)%1\n       (> %1 %2)(recur (- %1 %2) %1)\n       :else (recur %1 (- %2 %1)))", "problem": 66, "user": "530cb5b8e4b02e82168697e0"}, {"code": "(fn [x y]\n  (->> (range 1 (max x y))\n       (filter #(= (rem x %)\n                   (rem y %)\n                   0))\n       last))", "problem": 66, "user": "531c7f0de4b08068f379eda4"}, {"code": "(fn [x,y] \n  (loop [a (min x y), b (max x y)] \n    (if (= a b) a\n      (recur (min a b) (- (max a b) (min a b)))\n      )\n    )\n  )", "problem": 66, "user": "531d77d7e4b08068f379edaf"}, {"code": "(fn [a b]\n  (let [div #(= 0 (rem %1 %2))]\n    (first (filter #(and (div a %) (div b %)) (range (min a b) 0 -1)))\n  )\n)", "problem": 66, "user": "531ba143e4b08068f379ed91"}, {"code": "(fn [g l]\n  (cond \n   (> l g) (recur l g)\n   (zero? l) g\n   :else (recur l (rem g l))))", "problem": 66, "user": "52dd4fb4e4b09f7907dd13df"}, {"code": "#(let [a (max % %2) b (min % %2)]\n   (if (= b 0) a (recur b (mod a b))))", "problem": 66, "user": "51b41150e4b0f094dd986fac"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "531c0619e4b08068f379ed98"}, {"code": "(fn gcd [a b]\n  (if (= (mod (max a b) (min a b)) 0)\n    (min a b)\n    (- (last (take-while #(not (and (= (mod a %) 0) (= (mod b %) 0))) (range (min a b) 0 -1))) 1)))", "problem": 66, "user": "52af7a5ce4b0c58976d9acbd"}, {"code": "#(loop [x (max %1 %2) y (min %1 %2)]\n  (if (zero? y)\n    x\n    (recur y (mod x y))))", "problem": 66, "user": "52d2f457e4b099d49816f0ba"}, {"code": "(fn [a b]\n  (cond\n   (= a 2) 2\n   (= a 10) 5\n   (= a 5) 1\n   (= a 1023) 33))", "problem": 66, "user": "52be0263e4b07a9af579230e"}, {"code": "(fn \n  [x y]\n  (let [smaller (min x y)\n        rng (map inc (range smaller))\n        f #(into #{} (for [r rng\n                          :let [md (mod % r)]]\n                      (if (= 0 md) r 0)))]\n    (apply max (clojure.set/intersection (f x) (f y)))))", "problem": 66, "user": "52f3af46e4b05e3f0be25f14"}, {"code": "(fn [a, b]\n  (apply max (filter #(= 0 (rem b %) (rem a %)) (range 1 (inc a)))))", "problem": 66, "user": "531f1e63e4b08068f379edc2"}, {"code": "(fn [ x y] (last (filter #( if (and (zero? (rem x %)) (zero? (rem y %))) %) (range 1 (inc (Math/min x y))))))", "problem": 66, "user": "52265e41e4b04e78ff2e1981"}, {"code": "(fn gcd [a b] (if (= a b) a (let [small (min a b) big (max a b)] (recur (- big small) small))))", "problem": 66, "user": "532347dde4b09d4e7a9b54cc"}, {"code": "(fn [& args] (loop [x1 (apply min args)\n                      x2 (apply max args)] \n                 (if (zero? (mod x1 x2)) x2\n                   (recur x2 (mod x1 x2)))))", "problem": 66, "user": "531bfb69e4b08068f379ed97"}, {"code": "(fn [a b] (apply max (reduce clojure.set/intersection\n        (map (fn [x] (set (filter #(= 0 (mod x %)) (range 1 (+ x 1))))) [a b]))))", "problem": 66, "user": "531e5c81e4b08068f379edba"}, {"code": "#(if (= %2 0) % (recur %2 (mod % %2)))", "problem": 66, "user": "5323a414e4b09d4e7a9b54d1"}, {"code": "(fn [a b]\n    (loop [q1 (max a b)\n           q2 (min a b)]\n      (let [r (rem q1 q2)]\n        (if (zero? r)\n          q2 \n          (recur q2 r)))))", "problem": 66, "user": "532418f3e4b09d4e7a9b54d8"}, {"code": "(fn [a b]\n  (if (zero? b) \n    a\n    (recur b (mod a b))))", "problem": 66, "user": "529223cbe4b0239c8a67af26"}, {"code": "#(loop [a (max %1 %2)\n        b (min %1 %2)]\n   (if (zero? b)\n     a\n     (recur b (mod a b))))", "problem": 66, "user": "5326c5f7e4b09d4e7a9b54f2"}, {"code": "(fn gcd [a b] \n  (loop [a a b b]\n    (if (zero? b)\n      a\n      (recur b (mod a b)))))", "problem": 66, "user": "52c00e4fe4b07a9af5792342"}, {"code": "(fn gcd [x y]\n  (->> (range 1 (+ 1 (min x y)))\n       (filter #(and (= 0 (rem x %)) (= 0 (rem y %))))\n       (apply max)))", "problem": 66, "user": "52fb64b7e4b047fd55837009"}, {"code": "(fn gcd [^Long x ^Long y]\n  (let [max-check (inc (min x y))\n        is-divisor #(and (zero? (rem x %)) (zero? (rem y %)))\n        r (range 1 max-check) ]\n  (apply max (for [l r :when (is-divisor l)] l))))", "problem": 66, "user": "531dfaf5e4b08068f379edb3"}, {"code": "(fn [a b]\n  (->> (range (min a b) 0 -1)\n       (filter #(and (zero? (rem a %))\n                     (zero? (rem b %))))\n       first))", "problem": 66, "user": "508a2c2fe4b016a2107004a1"}, {"code": "(fn [x y]\n  (apply max\n         (filter #(= 0 (+ (mod x %) (mod y %)))\n                 (range 1 (inc (min x y))))))", "problem": 66, "user": "521b73f5e4b0c4ef0be83043"}, {"code": "(fn mcd [a0 b0]\n  (if ( =  0 b0)\n    a0\n    (loop [a a0 b b0]\n      (let [r (mod a b)]\n        (if (= 0 r)\n           b\n           (recur b r))))))", "problem": 66, "user": "52c81954e4b0c2d177d6212e"}, {"code": "(fn greatest-common-divisor [x y]\n  (let [_max (max x y) _min (min x y)]\n    (apply max (filter #(= (+ (mod _max %) (mod _min %)) 0) (range 1 (inc _min))))))", "problem": 66, "user": "50b79c5fe4b0cf3e51c3046c"}, {"code": "#(loop [u %1 v %2]\n   (if (zero? v) u\n     (recur v (mod u v))))", "problem": 66, "user": "52d1e364e4b0d9f9285948e7"}, {"code": "#(loop [a % b %2] (if (zero? (rem (max a b) (min a b))) (min a b) (recur (rem (max a b) (min a b)) (min a b))))", "problem": 66, "user": "52570aeae4b0541d1855ba42"}, {"code": "(fn [x y]\n  (let [mi (min x y)\n        ma (max x y)]\n    (if (integer? (/ ma mi))\n      mi\n      (loop [n   1\n             tag []]\n        (if (= n mi)\n          (apply max tag)\n          (recur (inc n) (if (and (integer? (/ ma n)) (integer? (/ mi n)) (< n mi))\n                           (into tag (vector n))\n                           tag)))))))", "problem": 66, "user": "531016d0e4b08068f379ecd1"}, {"code": "(fn f[a b]\n  (if (< a b)\n      (if (= 0 (rem b a)) a (recur (rem b a) a))\n      (if (= 0 (rem a b)) b (recur (rem a b) b))\n   )\n  )", "problem": 66, "user": "5302ac7fe4b0d8b024fd3731"}, {"code": "(fn [aa bb]\n  (loop [a (max aa bb) b (min aa bb)]\n    (if (zero? b)\n      a\n      (recur b (mod a b)))))", "problem": 66, "user": "5004034ce4b0678c553fc447"}, {"code": "(fn gcd [a b] (if (= b 0) a (gcd b (mod a b))))", "problem": 66, "user": "53244c9de4b09d4e7a9b54db"}, {"code": "(fn gcd\n   [a b]\n   (if (zero? b) a (gcd b (mod a b)))\n   )", "problem": 66, "user": "53224d45e4b09d4e7a9b54c0"}, {"code": "#(loop [ d %2 r (mod %1 %2) ]\n  (if\n    (zero? r)\n    d\n    (recur\n      r\n      (mod d r)\n    )\n  )\n)", "problem": 66, "user": "52f1bc81e4b05e3f0be25eef"}, {"code": "(fn gcd [a b]\n      (if (= b 0)\n        a\n        (gcd b (rem a b))))", "problem": 66, "user": "51f81925e4b09be9c177e526"}, {"code": "(fn [A B]\n  (loop [a A b B]\n    (if-let [val (cond\n     \t\t\t\t(= 0 a b) 0\n     \t\t\t\t(=  a b) a)]\n     val\n     (if (< a b) \n     \t(recur a (- b a))\n     \t(recur (- a b) b)))))", "problem": 66, "user": "4f80a906e4b033992c121bf7"}, {"code": "(fn gcd [a b]\n\t(if (< a b) (gcd b a)\n      \t(loop [x a y b]\n          \t  (if (= 0 (mod x y)) y\n                  (recur y (mod x y))))))", "problem": 66, "user": "53300924e4b019098a6f8b55"}, {"code": "(fn [x y]\n    (if (zero? y)\n        x\n        (recur y (mod x y))))", "problem": 66, "user": "51f5539fe4b0abb92f97f9cd"}, {"code": "(fn gcd [x y]\n  (let [candidate (fn [m n]\n                    (if (and (== (mod y n) 0) (== (mod x n) 0))\n                      n\n                      m))]\n    (reduce candidate (rest (range (inc (min x y)))))))", "problem": 66, "user": "532727bae4b09d4e7a9b54fa"}, {"code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "52bb4be0e4b07a9af57922e2"}, {"code": "(fn [a b]\n  (cond (= a b)  a\n        (> a b)  (recur (- a b) b)\n        1        (recur a (- b a))))", "problem": 66, "user": "5336a339e4b0e30313ee6c7d"}, {"code": "(fn [x y]\n   (loop [iter 1\n          result 1]\n     (if (or (> iter x) (> iter y))\n       result\n       (recur (inc iter) \n              (if (and \n                   (= (mod x iter) 0)\n                   (= (mod y iter) 0))\n                iter\n                result)))))", "problem": 66, "user": "531d34cfe4b08068f379edac"}, {"code": "(fn gcd [a b]\n  (if (= b 0) a (gcd b (mod a b))))", "problem": 66, "user": "53315c78e4b019098a6f8b67"}, {"code": "(fn gcd [a b] (if (< a b) (gcd b a) (let [r (mod a b)] (if (= r 0) b (gcd b r)))))", "problem": 66, "user": "53388e2de4b0e30313ee6c9c"}, {"code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "532b43c3e4b09d4e7a9b5531"}, {"code": "(fn gcd [a b]\n  (if (zero? b) a\n    (recur b (mod a b))))", "problem": 66, "user": "532ab0bde4b09d4e7a9b5527"}, {"code": "#(loop [a %1 b %2] \n   (if (zero? b) a\n     (recur b (mod a b))))", "problem": 66, "user": "52baefbae4b07a9af57922da"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "52d2ca1ce4b099d49816f0b4"}, {"code": "(fn [a b]\n   (let [f (fn [n] (filter #(= (mod n %) 0) (range 1 (inc n))))\n         fa (f a) fb (f b)]\n     (apply max\n            (for [x fa y fb\n                  :when (= x y)] x))))", "problem": 66, "user": "5005b57de4b0678c553fc46a"}, {"code": "(fn gcd [m n]\n  (cond \n    (zero? m) n\n    (zero? n) m\n    (or (= 1 m) (= 1 n)) 1\n    (and (even? m) (even? n)) (* 2 (gcd (/ m 2) (/ n 2)))\n    (even? m) (gcd (/ m 2) n)\n    (even? n) (gcd m (/ n 2))\n    (> m n) (gcd (/ (- m n) 2) n)\n    (< m n) (gcd m (/ (- n m) 2))\n    (= m n) n))", "problem": 66, "user": "5336ca32e4b0e30313ee6c80"}, {"code": "(fn [x y]\n  (loop [gcd (min x y)]\n    (if (= 0 (mod x gcd) (mod y gcd))\n      gcd\n      (recur (dec gcd)))))", "problem": 66, "user": "525ab6cfe4b0cb4875a45cf9"}, {"code": "(fn [a b] \n  (loop [x a \n         y b]\n    (if (= 0 (mod x y))\n      y\n      (recur y\n             (mod x y)))))", "problem": 66, "user": "529862dfe4b02ebb4ef75055"}, {"code": "(fn [x y]\n    (if (= y 0) \n      x\n      (recur y (rem x y))))", "problem": 66, "user": "531792d9e4b08068f379ed5e"}, {"code": "(fn gcd [m n] (if (= 0 (rem m n)) n (gcd n (rem m n))))", "problem": 66, "user": "506d5e4ce4b0a302964c5493"}, {"code": "(fn [a b]\n  (let [max (max a b)\n        min (min a b)]\n    (if (= min 0)\n      max\n      (recur min (mod max min)))))", "problem": 66, "user": "52ba447ee4b07a9af57922ce"}, {"code": "#(if (= %2 0)\n      %1\n      (recur %2 (mod %1 %2)))", "problem": 66, "user": "4eadc217535d7eef30807321"}, {"code": "(fn grdivis [& args] \n  (let [[b a] (sort args), r (rem a b)]\n     (if (= r 0) b (grdivis b r))))", "problem": 66, "user": "533ab9abe4b0e30313ee6cbf"}, {"code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "problem": 66, "user": "531f7a2de4b08068f379edc6"}, {"code": "(fn gcd [a b]\n  (if (= 0 b)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "53219cece4b09d4e7a9b54b7"}, {"code": "(fn [a b]\n  (loop [x (min a b)]\n     (if (and (= 0 (mod a x))\n              (= 0 (mod b x))\n         )\n         x\n         (recur (dec x))\n     )\n  )\n)", "problem": 66, "user": "5149c2f1e4b0829bd132edb0"}, {"code": "(fn [n1 n2]\n  (let [bigger (max n1 n2)\n        smaller (min n1 n2)]\n    (if (= smaller 0)\n      bigger\n      (recur smaller (mod bigger smaller)))))", "problem": 66, "user": "51a3b135e4b0e77c4ca60bf6"}, {"code": "(fn gcd [a1 a2] (if (zero? a2) a1 (gcd a2 (rem a1 a2))))", "problem": 66, "user": "5311cd03e4b08068f379ecef"}, {"code": "#(if (zero? %2) % (recur %2 (mod % %2)))", "problem": 66, "user": "523ea111e4b057c4b7cd0a65"}, {"code": "(fn [n m]\n  ((fn [a b]\n     (if (= b 0) a\n       (recur b (mod a b))))\n   (max n m) (min n m)))", "problem": 66, "user": "51da631be4b02ceefd947766"}, {"code": "(fn gcd [a b]\n  (if (= b 0) a\n    (gcd b (mod a b))))", "problem": 66, "user": "50d4593ee4b09cc622d65a68"}, {"code": "(fn [x y]\n  (loop [a (max x y) b (min x y)]\n    (if (= a b)\n      a\n      (recur (max (- a b) b) (min (- a b) b)))))", "problem": 66, "user": "5341b141e4b00652c8746ecf"}, {"code": "(fn gcd [x y]\n  (if (> y x) (gcd y x)\n    (if (zero? (rem x y))\n      y (gcd y (rem x y)))))", "problem": 66, "user": "533ee560e4b085b17e897d98"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "533f09e1e4b085b17e897d9a"}, {"code": "(fn gcd[a b]\n    (if (= b 0) \n        a\n        (gcd b (mod a b))))", "problem": 66, "user": "532631e1e4b09d4e7a9b54ea"}, {"code": "(fn [x y]\n  (let [m (mod x y)]\n    (if (= m 0)\n      y\n      (recur y m))))", "problem": 66, "user": "53468f6ce4b084c2834f4a3f"}, {"code": "(fn [x y]\n  (if (= y 0)\n    x\n    (recur y (rem x y))))", "problem": 66, "user": "53460d02e4b084c2834f4a39"}, {"code": "(fn gcd [a b]\n  (if (= 0 b)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "5322d370e4b09d4e7a9b54c7"}, {"code": "(fn [a b]\n  (loop [a a b b]\n    (if (zero? b)\n      a\n      (recur b (mod a b)))))", "problem": 66, "user": "5346f409e4b084c2834f4a46"}, {"code": "#(if (= 0 %2) % (recur %2 (mod % %2)))", "problem": 66, "user": "526a7025e4b03e8d9a4a722a"}, {"code": "(fn [a b]\n     (let [m (min a b)]\n       (loop [gcd 1\n              tmp 1]\n         (if (> tmp m)\n           gcd\n           (if (and (= 0 (mod a tmp))\n                    (= 0 (mod b tmp)))\n             (recur tmp (inc tmp))\n             (recur gcd (inc tmp)))))))", "problem": 66, "user": "52c58561e4b0c2d177d620f8"}, {"code": "#(some (fn [[a b]] (when (= a 0) b))\n        (map (fn [n] [(+ (rem %1 n) (rem %2 n)) n]) (range (dec (max % %2)) 0 -1)))", "problem": 66, "user": "4e705861535d5021c1a89635"}, {"code": "(fn [x y] (last (filter #(and (= (mod x %) 0) (= (mod y %) 0)) (range 1 (+ (min x y) 1)))))", "problem": 66, "user": "5349ac2be4b084c2834f4a67"}, {"code": "(fn [u v]\n  (if (zero? v)\n    u\n    (recur v (mod u v))))", "problem": 66, "user": "50fc299ee4b0d10d794c19f2"}, {"code": "(fn  f [_a _b]\n  (let [a (max _a _b) b (min _a _b) r (mod a b)]\n        (if (= r 0)\u3000b\n            (f  b r))))", "problem": 66, "user": "4df9c598535d04ed9115e77a"}, {"code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "534941d1e4b084c2834f4a60"}, {"code": "(fn gcd [x y] (if (= 0 (mod x y)) \n              y\n              (gcd y, (mod x y))))", "problem": 66, "user": "531541a0e4b08068f379ed25"}, {"code": "(fn gcd\n  [x y]\n  (let [a (max x y)\n        b (min x y)]\n    (some #(when (and (= (mod a %) 0) (= (mod b %) 0)) %) (reverse (range 1 (+ 1 b))))))", "problem": 66, "user": "5339af7de4b0e30313ee6cab"}, {"code": "(fn [a b]\n  (cond\n   (< b a) (recur b a)\n   (= 0 (mod b a)) a\n   :else (recur (mod b a) a)))", "problem": 66, "user": "5175533fe4b0dea9bbfba575"}, {"code": "#(if (= %2 0) %1 (recur %2 (mod %1 %2)))", "problem": 66, "user": "531619c1e4b08068f379ed3d"}, {"code": "#_#(loop [x (min % %2)]\n   (if (and (= 0 (mod % x)) (= 0 (mod %2 x)))\n     x\n     (recur (dec x))))\n\n;; zero?\n#(loop [x (min % %2)]\n   (if (and (zero? (mod % x)) (zero? (mod %2 x)))\n     x\n     (recur (dec x))))\n\n;; daowen's solution:\n#_#(if (zero? %) %2 (recur (mod %2 %) %))", "problem": 66, "user": "4fceda40e4b03432b189f407"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "516081e7e4b009fba0926e28"}, {"code": "#(if (= %2 0) % (recur %2 (mod % %2)))", "problem": 66, "user": "5339c105e4b0e30313ee6cae"}, {"code": "(fn f [a b]\n  (if (= b 0)\n    a\n    (f b (mod a b))))", "problem": 66, "user": "51ab70c3e4b04e3dc0c27b33"}, {"code": "(fn gcd [x y]\n  (if (= x y) x\n      (if (< x y) (gcd y x)\n          (let [m (mod x y)]\n            (if (== m 0) y (gcd y m))))))", "problem": 66, "user": "4ddb696b535d02782fcbe9fa"}, {"code": "(fn [a b]\n    (cond\n     (= a b) a\n     (> a b) (recur (- a b) b)\n     :else (recur a (- b a))))", "problem": 66, "user": "53487737e4b084c2834f4a59"}, {"code": "(fn gcd [a b]\n  (let [c (if (< a b) a b)]\n    ; brute force\n    (some #(when (and (=(mod a %) 0) (=(mod b %) 0)) %) (conj (reverse (range (/ c 2))) c))\n    ))", "problem": 66, "user": "53307da1e4b019098a6f8b5e"}, {"code": "(fn gcd [a b] \n  (cond \n   (> a b)(gcd (- a b) b) \n   (> b a)(gcd a (- b a)) \n   :else a))", "problem": 66, "user": "53286389e4b09d4e7a9b5504"}, {"code": "(fn [a b] (if (= a b) a (recur (min a b) (- (max a b) (min a b)))))", "problem": 66, "user": "534bd9c1e4b084c2834f4a80"}, {"code": "(fn ugh \n  [x y]\n  (loop [b (min x y)]\n  \t(if (and (= 0 (rem x b)) (= 0 (rem y b))) b\n    \t(recur (dec b)))))", "problem": 66, "user": "53383c74e4b0e30313ee6c92"}, {"code": "(fn [a b]\n  (let [small (min a b)\n        large (max a b)\n        for-small (set (filter (fn [x] (= 0 (rem small x))) (range 1 (inc small))))\n        for-large (set (filter (fn [x] (= 0 (rem large x))) (range 1 (inc large))))]\n\n    (apply max (clojure.set/intersection for-small for-large))\n    ))", "problem": 66, "user": "53415755e4b00652c8746ecd"}, {"code": "(fn gcd\n  [a b]\n  (if (= b 0)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "5348cab4e4b084c2834f4a5e"}, {"code": "(fn gcd [a b]\n        (let [ret (mod a b)]\n          (if (= ret 0)\n            b\n            (gcd b ret)\n            )\n          )\n        )", "problem": 66, "user": "533e7f63e4b085b17e897d8e"}, {"code": "(fn gcd [x y]\n  (if (= y 0)\n    x\n    (gcd y (mod x y))))", "problem": 66, "user": "5192dd39e4b0c663c5d86c9e"}, {"code": "(fn gcd [a b]\n  (let [result (rem (max a b) (min a b))]\n  (if \n    (= 0 result) (min a b)\n    (gcd (min a b) result))))", "problem": 66, "user": "52fc34cee4b047fd55837015"}, {"code": "(fn [s t]\n  (last\n   (for [x (range 1 (if (< s t) t s))\n           :when (and (zero? (mod s x)) (zero? (mod t x)))]\n        x)))", "problem": 66, "user": "534e4a29e4b084c2834f4ab0"}, {"code": "(fn gcd [a b]\n  (first (filter #(and (zero? (rem a %)) (zero? (rem b %)))\n                 (range (max a b) 0 -1))))", "problem": 66, "user": "50366589e4b0fbe0a74d26c3"}, {"code": "(fn gcd [a b]\n  (let [m (min a b)]\n    (first (for [i (range m 0 -1)\n                 :when (and (= 0 (rem a i)) (= 0 (rem b i)))]\n             i))))", "problem": 66, "user": "535526a2e4b04ce2eb3ed259"}, {"code": "(fn [a b]\n  (last (filter\n          #(and\n             (integer? (/ a %))\n             (integer? (/ b %)))\n          (range 1 (inc (min a b))))))", "problem": 66, "user": "53070615e4b02e821686979e"}, {"code": "(fn gdc [a b]\n  (let [divisors-a (apply hash-set (filter #(zero? (mod a %)) (range 1 (inc a))))\n        divisors-b (apply hash-set (filter #(zero? (mod b %)) (range 1 (inc b))))]\n    (apply max (clojure.set/intersection divisors-a divisors-b))))", "problem": 66, "user": "5353afa0e4b084c2834f4b03"}, {"code": "#(loop [n %1, m %2]\n       (if (zero? n)\n           m\n           (recur (mod m n) n)))", "problem": 66, "user": "53498f88e4b084c2834f4a64"}, {"code": "(fn gcd [x y]\n  (cond (= x y)\n        x\n\t  \t(> x y)\n        (gcd (- x y) y)\n        :else\n        (gcd x (- y x))))", "problem": 66, "user": "5357b241e4b04ce2eb3ed282"}, {"code": "(fn gcd \n ; \"(gcd a b) computes the greatest common divisor of a and b.\"\n  [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "5349da55e4b084c2834f4a68"}, {"code": "(fn f [x y] (if (= x y) x (if (> x y) (f (- x y) y) (f (- y x) x))))", "problem": 66, "user": "53500869e4b084c2834f4ad3"}, {"code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "50cf94bde4b0abc485cb9bb2"}, {"code": "(fn [a b]\n    (cond (= b 0) a\n          (> a b) (recur b a)\n          :else (recur a (mod b a))))", "problem": 66, "user": "5356ac72e4b04ce2eb3ed26a"}, {"code": "(fn [x y]\n  (loop [div (min x y)]\n    (if (and (zero? (mod x div)) (zero? (mod y div)))\n      div\n      (recur (dec div)))))", "problem": 66, "user": "5225271fe4b01819a2de42f9"}, {"code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "5312cdaae4b08068f379ed03"}, {"code": "(fn [a b] (reduce #(if (= (rem b %2) (rem a %2) 0) %2 %1) 1 (map inc (range (min a b)))))", "problem": 66, "user": "534efe66e4b084c2834f4ac1"}, {"code": "(fn [a b]\n\t(if (zero? b) a (recur b (mod a b))))", "problem": 66, "user": "5348236ee4b084c2834f4a54"}, {"code": "(fn gcd [a b]\n  (let [x (max a b)\n        y (min a b)]\n    (if (= 0 y)\n      x\n      (gcd b (rem a b)))))", "problem": 66, "user": "50f10f7be4b06d9538fe211a"}, {"code": "(fn [a b] \n   (first (filter #(and (= 0 (mod a %)) (= 0 (mod b %)))\n           (range (min a b) 0 -1))))", "problem": 66, "user": "534d1173e4b084c2834f4a98"}, {"code": "(fn [a b]\n  (letfn [(gdc-iteration [[a b]]\n                         [b (mod a b)])]\n    (second (last (take-while (fn [[a b]] (not (zero? b)))\n                              (iterate gdc-iteration [a b]))))))", "problem": 66, "user": "535778dee4b04ce2eb3ed27d"}, {"code": "#(loop [a %1 b %2]\n   (if (= b 0)\n     a\n     (recur b (mod a b))))", "problem": 66, "user": "5356dcbee4b04ce2eb3ed270"}, {"code": "(fn gcd \n  [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "535920b2e4b04ce2eb3ed294"}, {"code": "(fn gcd [a b] (if (= b 0) a (gcd b (mod a b))))", "problem": 66, "user": "535d2533e4b04ce2eb3ed2bc"}, {"code": "(fn [a b]\n  (first (filter #(= 0 (+ (rem a %) (rem b %)))\n                 (range (min a b) 0 -1))))", "problem": 66, "user": "535d910ae4b04ce2eb3ed2c5"}, {"code": "(fn gcd [a b]\n  (let [x (max a b)\n        y (min a b)]\n    (if (= 0 y)\n      x\n      (gcd y (mod x y)))))", "problem": 66, "user": "52046600e4b0c283853240c5"}, {"code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "53513d28e4b084c2834f4ae3"}, {"code": "(fn [& numbers]\n  (reduce max (reduce clojure.set/intersection (map (fn [x]\n         (into #{} (filter #(zero? (mod x %))\n                 (cons x (range (long (/ x 2)) 0 -1)))))\n       numbers))))", "problem": 66, "user": "52271a85e4b04e78ff2e19a7"}, {"code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "53480973e4b084c2834f4a52"}, {"code": "(fn gcd [ a b ]\n  (cond\n   (= a b) a\n   (< a b) (gcd a (- b a))\n   :else (gcd (- a b) b)))", "problem": 66, "user": "535a18e3e4b04ce2eb3ed2a4"}, {"code": "(fn [a b]\n  (if (= a b)\n    a\n     (some #(if (and (zero? (mod a %)) \n                     (zero? (mod b %))) %) \n           (range (min a b) 0 -1))))", "problem": 66, "user": "52761edae4b03e8d9a4a74d4"}, {"code": "(fn [a1 a2]\n    (apply max (for [x (range 1 (inc (max a1 a2)))\n           :when (= 0 (rem a1 x) (rem a2 x))]\n       x)))", "problem": 66, "user": "53489329e4b084c2834f4a5b"}, {"code": "(fn [x y]\n    (loop [d 2\n           acc 1]\n      (if (or (< x d)\n              (< y d))\n        acc\n        (if (and (zero? (rem x d))\n                 (zero? (rem y d)))\n          (recur (inc d) d)\n          (recur (inc d) acc)))))", "problem": 66, "user": "5250b7a5e4b0541d1855b83e"}, {"code": "(fn gcd [a b]\n  (let [x (max a b)\n        y (min a b)]\n    (if (zero? (rem x y))\n      y\n      (gcd y (rem x y)))))", "problem": 66, "user": "536102efe4b0243289761e3e"}, {"code": "(fn g [a b] (if (= a b) a (if (> a b) (g (- a b) b) (g a (- b a)))))", "problem": 66, "user": "53638ed2e4b0243289761e5b"}, {"code": "(fn gcd [int1 int2]\n  (if (= int2 0)\n    int1\n    (gcd int2 (mod int1 int2))))", "problem": 66, "user": "532ecd44e4b019098a6f8b49"}, {"code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (rem a b))))", "problem": 66, "user": "535d4b0ae4b04ce2eb3ed2be"}, {"code": "(fn gcd[n1 n2]\n  (letfn [(div [n] (into #{}(filter #(= 0 (rem n %)) (map #(quot n %) (next(range n))))))]\n  (apply max(clojure.set/intersection (div n1) (div n2)))))", "problem": 66, "user": "52c42bc2e4b0c2d177d620d0"}, {"code": "(fn [x y]\n  (loop [l (max x y) s (min x y)]\n    (if (zero? (mod l s))\n      s\n      (recur s (mod l s)))))", "problem": 66, "user": "52bf0116e4b07a9af5792328"}, {"code": "(fn gcd [x y]\n  (cond\n   (= y 0) x\n   (= x 0) y\n   (= x y) x\n   (> x y) (gcd (- x y) y)\n   (< x y) (gcd x (- y x))))", "problem": 66, "user": "5368a275e4b0243289761e8f"}, {"code": "(fn g [x y]\n  (if (zero? y)\n    x\n    (g y (mod x y))))", "problem": 66, "user": "536973e5e4b0243289761e9e"}, {"code": "(fn [a b]\n  (let [get-divisor (fn [n] (into #{}\n                              (filter #(zero? (rem n %))\n                                      (range 1 (inc n)))\n                              ))\n        a-divisor (get-divisor a)\n        b-divisor (get-divisor b)\n        commom-divisor (clojure.set/intersection a-divisor b-divisor)]\n    (apply max commom-divisor)))", "problem": 66, "user": "4e36e647535deb9a81d77f36"}, {"code": "(fn gcd\n  [a b]\n  (apply max\n  (let [seta (set (filter #(= 0 (rem a %)) (range 1 (inc a))))\n        setb (set (filter #(= 0 (rem b %)) (range 1 (inc b))))]\n    (filter #(contains? seta %) setb)\n   )))", "problem": 66, "user": "536aa86de4b0243289761eb1"}, {"code": "(fn gcd [a b]\n  (cond\n   (< a b) (gcd a (- b a))\n   (> a b) (gcd (- a b) b)\n   :else a))", "problem": 66, "user": "536d83cee4b0fc7073fd6e5e"}, {"code": "(fn gcd [x y]\n  (if (zero? y)\n    x\n    (gcd y (mod x y))))", "problem": 66, "user": "53523ae0e4b084c2834f4aee"}, {"code": "; Euclid is smarter than I.\n(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (rem a b))))", "problem": 66, "user": "4eed26af535d93acb0a668bb"}, {"code": "(fn [x y]\n  (loop [m (if (> x y) x y) n (if (> y x) x y)]\n    (if (= n 0)\n      m\n      (recur n (rem m n)))\n    ))", "problem": 66, "user": "5369a4b1e4b0243289761e9f"}, {"code": "(fn [x y]\n  (if (= y 0) x (recur y, (mod x y))))", "problem": 66, "user": "536ca4bde4b0fc7073fd6e49"}, {"code": "(fn [a b]\n   (cond\n    (= a b) a\n    (> a b) (recur (- a b) b)\n    (< a b) (recur a (- b a))))", "problem": 66, "user": "4feaa579e4b0140c20fb9c0b"}, {"code": "(fn gcd [a b]\n  (let [r (rem a b)]\n    (if (zero? r)\t\n      b\n      (gcd b r))))", "problem": 66, "user": "4ea5ba92535d7eef308072d9"}, {"code": "(fn [x y]\n  (let [n (min x y)]\n    (- n (count (take-while #(not= 0 (rem x %) (rem y %)) (reverse (range 1 (inc n))))))))", "problem": 66, "user": "536f5900e4b0fc7073fd6e7b"}, {"code": "(fn [& numbers]\n  (let [sorted-numbers (sort numbers)\n        a (second sorted-numbers)\n        b (first sorted-numbers)]\n    (loop [a a b b]\n      (if (= b 0)\n        a\n        (recur b (mod a b))))))", "problem": 66, "user": "53527551e4b084c2834f4af0"}, {"code": "#(if (= %2 0)\n   %\n   (recur %2 (rem % %2)))", "problem": 66, "user": "536e0930e4b0fc7073fd6e66"}, {"code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "534f13b2e4b084c2834f4ac4"}, {"code": "(fn [x y]\n    (loop [m (max x y) n (min x y)]\n      (if (zero? n)\n        m\n        (recur n (mod m n)))))", "problem": 66, "user": "51c3c6a6e4b0851ac09658f8"}, {"code": "#(if (zero? %) %2 (recur (mod %2 %) %))", "problem": 66, "user": "524b0645e4b09eba1c0223bf"}, {"code": "(fn [m n]\n  (apply max (filter #(and (zero? (mod m %))\n                           (zero? (mod n %))) (range 1 (inc (min m n))))))", "problem": 66, "user": "4fe9ea87e4b0547ebccb2476"}, {"code": "(fn gcd [a b] (if (= b 0) a (recur b (mod a b))))", "problem": 66, "user": "53629381e4b0243289761e54"}, {"code": "(fn [a b]\n    (first (filter #(= (mod a %) (mod b %) 0) (reverse (range 1 (inc (min a b)))))))", "problem": 66, "user": "5370ef22e4b0fc7073fd6ea0"}, {"code": "(fn [x y] (loop [[a b] [x y]] (if (= a b) a (recur [(- (max a b) (min a b)) (min a b)]))))", "problem": 66, "user": "536f2faee4b0fc7073fd6e79"}, {"code": "(fn greatest-common-divisor [n1 n2]\n  (loop [n1 n1 n2 n2 current 1 gcd 0] ;current is a counter, gcd is the result\n    (if (or (= current n1) ;if current is either the same as n1 or n2\n            (= current n2))\n        (cond \n         (= 0 (rem n2 n1)) n1 ;then ask if n2 is divisible by n1, and if so, return n1\n         (= 0 (rem n1 n2)) n2 ;then ask if n1 is divisible by n2, and if so, return n2\n         :else gcd) ;else return the gcd\n        (if (and (= 0 (rem n1 current)) ;if current is still lower than both n1 and n2, then ask if n1 is divisible by current\n                 (= 0 (rem n2 current)));and if n2 is divisible by current\n            (recur n1 n2 (inc current) current) ;if so, then recur with incrementing the current and updating gcd to the current\n            (recur n1 n2 (inc current) gcd))))) ;otherwise then recur with incrementing the current and leaving gcd the same", "problem": 66, "user": "53713ebee4b0fc7073fd6ead"}, {"code": "(fn [a b] (last (filter #(and (zero? (mod a %)) (zero? (mod b %))) (range 1 (inc (min a b))))))", "problem": 66, "user": "4edb314d535d10e5ff6f5317"}, {"code": "(fn gcd [x y] \n  (loop [x x\n         y y]\n    (cond \n     \t(= x y) x\n     \t(< x y) (recur x (- y x))\n     \t:else \t(recur y (- x y))\n     )))", "problem": 66, "user": "53691dc7e4b0243289761e97"}, {"code": "(fn gcd [x y] (cond (= x y) x (> y x) (gcd (- y x) x) :else (gcd y x)))", "problem": 66, "user": "53720c5ce4b0493c815db704"}, {"code": "(fn gcd [a b] (if (= b 0) a (gcd b (mod a b))))", "problem": 66, "user": "53712c03e4b0fc7073fd6ea9"}, {"code": "(fn [& x] (apply max (apply clojure.set/intersection (map (comp set (fn [n] (filter #(= 0 (mod n %)) (map inc (range n))))) x))))", "problem": 66, "user": "4ec53f8c535d6d7199dd368b"}, {"code": "#((fn r [x, y last]\n   \t(if \n      (= 0 (+ (mod x last)\n              (mod y last)))\n      last\n     (r x y (- last 1)))) %1 %2 (min %1 %2))", "problem": 66, "user": "5143824ae4b0b4fb4ace5f36"}, {"code": "(fn [n1 n2] \n   (let [common-div? #(and (zero? (mod n1 %))\n                           (zero? (mod n2 %)))]\n     (apply max (filter common-div? (range 1 (inc n1))))))", "problem": 66, "user": "509fe759e4b08df8156e9e43"}, {"code": "(fn [x y]\n  (first\n   (for [n (range (min x y) 0 -1) \n        :when (and (= 0 (rem x n)) (= 0 (rem y n)))] \n    n)))", "problem": 66, "user": "5370f8ede4b0fc7073fd6ea2"}, {"code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (recur b (rem a b))))", "problem": 66, "user": "518279abe4b0353c468deb65"}, {"code": "(fn [x y]\n    (let [remainder (mod x y)]\n      (if (zero? remainder)\n        y\n        (recur y remainder))))", "problem": 66, "user": "535eaa73e4b04ce2eb3ed2d4"}, {"code": "(fn [& a]\n  (reduce \n   (fn [o n]\n     (if\n       (every? #(zero? (mod % n)) a)\n      n\n      o\n      ))\n   1\n   (range 1 (inc (apply min a)))))", "problem": 66, "user": "53736ffce4b06d7f452d9e11"}, {"code": "(fn greatest-common-divisor [int1 int2]\n  (last \n    (filter \n      #(and \n         (zero? (mod int1 %))\n         (zero? (mod int2 %)))\n     (range 1 (inc (min int1 int2))))))", "problem": 66, "user": "53713ed9e4b0fc7073fd6eaf"}, {"code": "(fn [a b]\n  (first\n    (filter\n     #(= 0 (mod a %) (mod b %))\n     (range (min a b) 0 -1))))", "problem": 66, "user": "53779a26e4b06839e8705e38"}, {"code": "(fn j-gcd\n  [x y]\n  (loop [sol 1 cur 1]\n    (if (or (> cur x) (> cur y))\n      sol\n      (if (= 0 (rem x cur) (rem y cur))\n        (recur cur (+ cur 1))\n        (recur sol (+ cur 1))))))", "problem": 66, "user": "534ff8a6e4b084c2834f4ad1"}, {"code": "#(if (= % %2) % (recur (Math/abs (- % %2)) (min % %2)))", "problem": 66, "user": "4f92de49e4b0dcca54ed6cb2"}, {"code": "(fn [a b]\n   (if (= b 0)\n     a\n     (recur b (mod a b) )))", "problem": 66, "user": "4f849f76e4b033992c121c36"}, {"code": "#(apply #'max \n  (filter \n   (fn[x](and \n           (zero? (mod %1 x))\n           (zero? (mod %2 x)))) \n   (take (min %1 %2) (iterate inc 1))))", "problem": 66, "user": "4e8849c5535d8b9bb0147ca4"}, {"code": "(fn [x y]\n\t(cond\n\t\t(or (= x 1) (= y 1)) 1\n\t\t(> x y) (recur y (- x y))\n\t\t(< x y) (recur x (- y x))\n\t\t:else x))", "problem": 66, "user": "5370b386e4b0fc7073fd6e9b"}, {"code": "(fn gcd [a b]\n  (if (= b 0) a\n    (gcd b (rem a b))))", "problem": 66, "user": "532c9dc9e4b019098a6f8b30"}, {"code": "(fn gcd [a b]\n   (if (= 0 b)\n     a\n     (gcd b (mod a b))))", "problem": 66, "user": "535e518ee4b04ce2eb3ed2cf"}, {"code": "(fn [x y]\n  (let [divisors (filter (comp zero? (partial rem (min x y))) (range 1 (inc (min x y))))]\n    (some #(when (zero? (rem (max x y) %)) %) (reverse divisors))))", "problem": 66, "user": "536a37efe4b0243289761eaa"}, {"code": "(fn gcd [a b]\n      (let [c (min a b)\n            d (max a b)\n            r (mod d c)]\n        (if (= 0 r) c\n          (gcd r c))))", "problem": 66, "user": "537bde5de4b06839e8705e73"}, {"code": "(fn [x y] (reduce max (filter\n                 #(and (>= (/ x %1) 1) (= 0 (mod x %1))\n                       (>= (/ y %1) 1) (= 0 (mod y %1)))\n                 (range 1 (inc (max x y)))\n                 )))", "problem": 66, "user": "525cc912e4b0cb4875a45d48"}, {"code": "(fn gcd [a b]\n  (if (zero? a) b\n    (gcd (rem b a) a)))", "problem": 66, "user": "53800d99e4b06839e8705ebd"}, {"code": "(fn gcd [x y]\n  (loop [a x\n         b y]\n    (if (= 0 b)\n      a\n      (recur b (mod a b)))))", "problem": 66, "user": "5361a4f2e4b0243289761e47"}, {"code": "(fn [a b] (let [c (max a b) d (min a b)] (if (= 0 d) c (recur d (rem c d)))))", "problem": 66, "user": "536b2048e4b0243289761eb7"}, {"code": "(fn euclid [a b]\n  (cond (= a b) a\n        (< a b) (recur a (- b a))\n        :else   (recur (- a b) b)))", "problem": 66, "user": "5055e7f4e4b0ce54f56f0401"}, {"code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "53834ed3e4b06839e8705edb"}, {"code": "(fn gcd [x y]\n\t(loop [c (mod x y)\n\t\t   y y]\n\t\t(if (= c 0)\n\t\t\ty\n\t\t\t(recur (mod y c) c))))", "problem": 66, "user": "53713676e4b0fc7073fd6eac"}, {"code": "#(let [ma (max %1 %2) mi (min %1 %2)] (loop [m ma n mi] (let [r (mod m n)] (cond (= r 0) n  :default (recur mi r)))))", "problem": 66, "user": "53403110e4b085b17e897da6"}, {"code": "(fn gcd [& nums]\r\n    (let [s (sort nums) p (first s) d (second s)]\r\n         (loop [gcd p]\r\n                 (if (and (= (mod d gcd) (mod p gcd) 0))\r\n                     gcd\r\n                   (recur (dec gcd))))))", "problem": 66, "user": "5376966ae4b06839e8705e27"}, {"code": "(fn G [a b]\n  (if (< a b)\n    (G b a)\n    (if (zero? b) a\n      (if (= 1 b) 1\n        (G b (rem a b))\n       )\n     )\n    ))", "problem": 66, "user": "536c77f1e4b0fc7073fd6e3f"}, {"code": "(fn [a b]\n  (cond \n   (= a b) a\n   (> a b) (recur (- a b) b)\n   :else (recur a (- b a))))", "problem": 66, "user": "537f4652e4b06839e8705eb1"}, {"code": "(fn f [a b]\n  (let [x (max a b)\n        y (min a b)]\n    (if (zero? (rem x y))\n      y\n      (f y (rem x y)))))", "problem": 66, "user": "5371167fe4b0fc7073fd6ea7"}, {"code": "#(let [x (/ %1 %2)] \n           (if \n             (ratio? x) (/ %1 (numerator x)) \n             (min %1 %2)))", "problem": 66, "user": "532c0507e4b09d4e7a9b553c"}, {"code": "(fn gcd [x y] (if (= y 0) x (gcd y (rem x y))))", "problem": 66, "user": "538754b1e4b06839e8705f1c"}, {"code": "(fn [a b]\n  (if (= b 0) a\n    (recur b (mod a b))))", "problem": 66, "user": "53806e5be4b06839e8705ec1"}, {"code": "(fn [nb1 nb2]\n  (let [div1 (filter #(= 0 (mod nb1 %)) (map inc (range nb1)))\n        div2 (filter #(= 0 (mod nb2 %)) (map inc (range nb2)))]\n    (reduce (fn [x y] (if (some #{y} div2) y x)) div1)))", "problem": 66, "user": "537881a4e4b06839e8705e46"}, {"code": "(fn [x y] ( some #(if (=(+ (mod x %)(mod y %)) 0) %)  (reverse (range 1 (inc (min x y)) ))))", "problem": 66, "user": "534eecaee4b084c2834f4abf"}, {"code": "(fn gcd [x y]\n  (loop [x x y y g (min x y)]\n    (if (= 0 (rem x g) (rem y g))\n      g\n      (recur x y (dec g)))))", "problem": 66, "user": "536673a8e4b0243289761e76"}, {"code": "(fn gcd [a, b] (if (zero? b) a (recur b (mod a b))))", "problem": 66, "user": "53733312e4b06d7f452d9e0a"}, {"code": "(fn [x y]\r\n   (last (for [i (reverse (range (max x y)))\r\n               :while (not= 0 (rem x (inc i)) (rem y (inc i)))\r\n               ]\r\n           i)))", "problem": 66, "user": "51a54fb4e4b0def3c5c586a3"}, {"code": "(fn [x y]\n  (last (filter #(and (zero? (mod x %)) (zero? (mod y %))) (range 1 (max x y)))))", "problem": 66, "user": "538557aee4b06839e8705f02"}, {"code": "(fn gcd [a b]\n  (cond\n   (= 0 (rem a b)) b\n   (= 0 (rem b a)) a\n   :else (if (> a b)\n           (gcd b (rem a b))\n           (gcd a (rem b a)))))", "problem": 66, "user": "5374adc3e4b06d7f452d9e27"}, {"code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "536f871de4b0fc7073fd6e7f"}, {"code": "(fn gcd [a b] \n  (cond\n   (= a b ) a\n   (> a b ) (gcd (- a b) b)\n   :else (gcd a (- b a))\n   )\n  )", "problem": 66, "user": "53410c24e4b00652c8746eca"}, {"code": "(fn f [a b]\n  (if (= b 0) a (f b (mod a b))))", "problem": 66, "user": "538d8bb8e4b0b51d73faae71"}, {"code": "(fn gcd [a b]\n      (cond\n       (= a 0) b\n       (= b 0) a\n       (= a b) a\n       (> a b) (gcd (- a b) b)\n       (> b a) (gcd a (- b a))))", "problem": 66, "user": "53838742e4b06839e8705ee0"}, {"code": "(fn [x y]\n  (loop [n (min x y)]\n    (if (or (= 0 (rem x n) (rem y n)) (= 1 n))\n      n\n      (recur (dec n)))))", "problem": 66, "user": "538d464ee4b0b51d73faae69"}, {"code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))))", "problem": 66, "user": "53889587e4b0640c7a9a589e"}, {"code": "(fn [x y]\n  (loop [div (min x y)\n         x x\n         y y]\n    (if (= (+ (mod x div) (mod y div)) 0)\n      div\n      (recur (dec div) x y))))", "problem": 66, "user": "4f35e662e4b0e243712b1ec6"}, {"code": "(fn gcd [a b]\n  (cond (< a b) (gcd b a)\n        (zero? b) a\n        :else (gcd b (rem a b))))", "problem": 66, "user": "51a4416ae4b0def3c5c5868c"}, {"code": "(fn gdc [a b]\n   (cond \n    (= a b) a\n    (> a b) (gdc b (- a b))\n    (< a b) (gdc a (- b a))\n    )\n  )", "problem": 66, "user": "52ac41fee4b0c58976d9ac85"}, {"code": "(fn f [a b]\n  (if (= b 0)\n    a\n    (f b (rem a b))))", "problem": 66, "user": "533018b2e4b019098a6f8b56"}, {"code": "(fn [a b]\n  (if (zero? b) a,\n    (recur b (mod a b))))", "problem": 66, "user": "4f7cbf4ae4b06e829148e1b7"}, {"code": "(fn gcd [a b]\n  (cond\n     (= a 0) b\n     (= b 0) a\n     :else \n      (recur (min a b) (rem (max a b) (min a b)))))", "problem": 66, "user": "52a229e0e4b04e0c58e87be9"}, {"code": "#(loop [a % b %2] (if (zero? (mod a b)) b (recur b (mod a b))))", "problem": 66, "user": "4fe8a1f8e4b07c9f6fd12c5f"}, {"code": "(fn gcd [n1 n2] (if (zero? n2) n1 (recur n2 (rem n1 n2))))", "problem": 66, "user": "534c1c64e4b084c2834f4a8a"}, {"code": "(fn gcd [a b]\n\t(let [mod (fn [a b]\n\t\t(- a (* b (int (/ a b)))))]\n\t\t(if (= b 0)\n\t\t\ta\n\t\t\t(gcd b (mod a b)))))", "problem": 66, "user": "51b73a91e4b0d906fcd71d33"}, {"code": "(fn gcd [a b] \n  (if (= (rem a b) 0)\n    b\n    (gcd b (rem a b))))", "problem": 66, "user": "538c3424e4b0b51d73faae58"}, {"code": "(fn mygcd [div1 div2] (loop [dividend (max div1 div2) divisor (min div1 div2)]\n \t(let [quotient (/ dividend divisor) remainder (mod dividend divisor)]\n \t\t(if (= remainder 0) divisor \n \t\t\t(recur divisor remainder)))))", "problem": 66, "user": "538e29d1e4b0b51d73faae80"}, {"code": "(fn gcd [a b]\n  (apply\n    max\n    (filter\n      #(and (= (rem a %) 0) (= (rem b %) 0))\n      (range 1 (inc (min a b))))))", "problem": 66, "user": "5379ed48e4b06839e8705e5a"}, {"code": "(fn [a b] (->> (range 1 (inc (min a b))) (filter #(and (zero? (mod a %)) (zero? (mod b %)))) last))", "problem": 66, "user": "5392b849e4b0b51d73faaeb1"}, {"code": "(fn [a b]\n  (loop [a a b b]\n    (if (= b 0)\n      a\n      (recur b (mod a b))\n      ))\n  )", "problem": 66, "user": "535943b3e4b04ce2eb3ed295"}, {"code": "(fn gcd [a b]\n  (cond\n   (> a b)   (gcd b a)\n   ; now we can assume that b >= a                                                                                                                     \n   (= a 0)   b\n   :else     (gcd (mod b a) a)))", "problem": 66, "user": "530bf87ee4b02e82168697d5"}, {"code": "(fn gcd [a b]\n  (loop [d (min a b)]\n    (cond\n      (and (zero? (mod a d)) (zero? (mod b d))) d\n      :else (recur (dec d)))))", "problem": 66, "user": "5383668ee4b06839e8705edd"}, {"code": "(fn [a b]\n  (if (zero? b) a\n    (recur b (mod a b))))", "problem": 66, "user": "537e745ae4b06839e8705ea6"}, {"code": "#(loop [greatest 1\n         current 1]\n     (if (and (<= current %1) (<= current %2))\n         (recur\n             (if (and (= 0 (rem %1 current)) (= 0 (rem %2 current)))\n                 current greatest)\n             (inc current))\n         greatest))", "problem": 66, "user": "52963cc7e4b02ebb4ef7502d"}, {"code": "(fn  [x y]\n  (loop [a x, b y]\n    (cond (= 0 b) a\n          :else (recur b (mod a b)))))", "problem": 66, "user": "538e36c7e4b0b51d73faae81"}, {"code": "#(last (for [x (rest (range (max % %2)))\n        :when (and (= 0 (mod % x)) (= 0 (mod %2 x)))] x))", "problem": 66, "user": "53973e7be4b0b51d73faaee6"}, {"code": "(fn [a b] \n    (reduce max (filter \n   \t\t#(= (+ (mod a %) (mod b %)) 0) \n   \t    (map #( + 1 %) (range (max a b))) )))", "problem": 66, "user": "538d7e2ee4b0b51d73faae70"}, {"code": "(fn __ [x y]\n  (reduce #(if (and (zero? (mod x %2)) (zero? (mod y %2))) %2 %1)\n          1\n          (range 1 (inc (min x y)))))", "problem": 66, "user": "50e5bca5e4b09ae9427b0e75"}, {"code": "(fn gcd [x y]\n  (let [dividend (max x y)\n        divisor (min x y)\n        q (quot dividend divisor)\n        r (rem dividend divisor)]\n    (println \"dividend: \" dividend \", divisor: \" divisor \", q: \" q \", r: \" r)\n    (if (zero? r) divisor (gcd divisor r))))", "problem": 66, "user": "539a2901e4b0b51d73faaf0f"}, {"code": "(fn [x y] (if (zero? y) x (recur y (mod x y))))", "problem": 66, "user": "533c0c12e4b0e30313ee6cd4"}, {"code": "(fn gcd [a b] (if (= 0 b) a (gcd b (mod a b))))", "problem": 66, "user": "53940789e4b0b51d73faaec3"}, {"code": "(fn [a b] \n    (loop [a a b b]\n    (if (zero? b) a\n        (recur b (mod a b)))))", "problem": 66, "user": "539ad6b7e4b0b51d73faaf18"}, {"code": "#(if (= % %2)\n   %\n   (let [y (min % %2)] \n     (recur (- (max % %2) y) y)))", "problem": 66, "user": "5398305fe4b0b51d73faaef6"}, {"code": "(fn\n  [x y]\n  (if (= 0 y)\n      x\n      (recur y (mod x y))))", "problem": 66, "user": "52dfc89be4b09f7907dd1405"}, {"code": "(fn greatest-common-divisor [x y]\n  (loop [i (min x y)]\n    (if (and (= (type 1) (type (/ x i)))\n             (= (type 1) (type (/ y i))))\n      i\n      (recur (dec i)))))", "problem": 66, "user": "531bad96e4b08068f379ed93"}, {"code": "(fn [a b] \n  (first\n   (filter\n    #(and (zero? (mod a %)) (zero? (mod b %)))\n    (range a 0 -1))))", "problem": 66, "user": "537e104ce4b06839e8705e9a"}, {"code": "(fn [x y]\n  (if (> y 0) (recur y (mod x y)) x))", "problem": 66, "user": "539c9e26e4b0b51d73faaf2e"}, {"code": "(fn [fst snd]\n    (letfn [(gcd [f s]\n              (if (= s 0)\n                f\n                (gcd s (mod f s) )))]\n      (gcd fst snd)))", "problem": 66, "user": "52c49401e4b0c2d177d620de"}, {"code": "(fn [a b] (reduce #(if (and (= (mod a %2) 0) (= (mod b %2) 0)) %2 %1) 1 (range 1 (if (> a b) a b))))", "problem": 66, "user": "53a1b5c8e4b0ca733b9744c1"}, {"code": "(fn gdiv [x y]                                                                                                 \n  (cond                                                                                                            \n    (= x y) x                                                                                                       \n    (> x y) (gdiv (- x y) y)                                                                                        \n    :else (gdiv x (- y x))))", "problem": 66, "user": "53778b90e4b06839e8705e36"}, {"code": "(fn gcd [a b]\n  (if (== b 0)\n    a\n    (recur b (mod a b))))", "problem": 66, "user": "538e864ee4b0b51d73faae87"}, {"code": "(fn gcd [f s]\n  (loop [lastcd 1\n         n 1]\n    (if (or (> n f) (> n s))\n      lastcd\n      (recur (if (= 0 (mod f n) (mod s n))\n               n\n               lastcd)\n             (inc n)))))", "problem": 66, "user": "53710c09e4b0fc7073fd6ea5"}, {"code": "(fn gcd\n  [a b]\n  (cond (> a b) (recur b a)\n        (= a 0) b\n        :else (recur (mod b a) a)))", "problem": 66, "user": "536e5055e4b0fc7073fd6e6b"}, {"code": "(fn gcd [a b]\n   (if (or (= a b) (some #(= 1 %) (list a b)))\n     a\n     (recur (- (max a b) (min a b)) (min a b))))", "problem": 66, "user": "52fac708e4b047fd55836fff"}, {"code": "(fn gcd [a b] (cond\n                (< a b) (gcd b a)\n                (zero? b) a\n                :else   (gcd b (rem a b))))", "problem": 66, "user": "53976599e4b0b51d73faaeea"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b) a (recur b (mod a b))))", "user": "50b63c5ee4b0a86f8358ca69"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (> a b)\n    (gcd b a)\n    (loop [c a]\n      (if (and (zero? (rem a c)) (zero? (rem b c)))\n        c\n        (recur (dec c))\n      )\n    )\n  )\n)", "user": "53a36fd7e4b0f1fc74538834"}, {"problem": 66, "code": "(fn gcd \n  [a b]\n  (loop [a a b b]\n    (if (zero? b) \n      a\n      (recur b (mod a b))\n     )\n   )\n )", "user": "53a19dece4b0ca733b9744c0"}, {"problem": 66, "code": "(fn [a b]\n  (if (< a b)\n    (recur b a)\n    (if (= 0 (mod a b))\n      b\n      (recur b (mod a b)))))", "user": "4f041de1535dcb61093f6ba5"}, {"problem": 66, "code": "#(last (filter (fn [x] (= 0 (rem % x) (rem %2 x))) (take (min % %2) (iterate inc 1))))", "user": "53a739b0e4b0ef122a8689d0"}, {"problem": 66, "code": "(fn f [a b]\n  (let [gcd (fn gcd [a b c]\n        (if(and (= 0 (mod a c)) (= 0 (mod b c)))\n    \t\tc\n    \t\t(gcd a b (- c 1))\n  \t\t)\n      )]\n    (gcd (max a b) (min a b) (min a b))\n  )  \n)", "user": "5225a0f5e4b01819a2de430e"}, {"problem": 66, "code": "(fn [a b]\n  (loop [i (min a b)]\n    (if (= 0 (+ (mod a i) (mod b i)))\n      i\n      (recur (dec i)))))", "user": "53ac4719e4b047364c04445c"}, {"problem": 66, "code": "(fn [x y]\n  (apply max\n         (apply clojure.set/intersection\n                (map #(apply hash-set (filter (comp zero? (partial rem %1)) (range 1 (inc %1))))\n                     [x y]))))", "user": "53a7e3b9e4b047364c044423"}, {"problem": 66, "code": "#(let [a %1\n         b %2]\n     (if (> a b) (recur (- a b) b)\n       (if (< a b) (recur a (- b a))\n         a)))", "user": "53a26cede4b0f1fc7453882a"}, {"problem": 66, "code": "(fn [x y]\n   (apply (fn [a b]\n            (println a)\n            (if (= (rem a b) 0)\n              b\n              (recur b (rem a b))))\n            (reverse (sort (list x y)))))", "user": "53aaaf7ae4b047364c044444"}, {"problem": 66, "code": "(fn [x y]\n  (->> (reverse (map inc (range (min x y))))\n       (filter #(and (= 0 (mod x %)) (= 0 (mod y %))))\n       (first)))", "user": "52616198e4b03e8d9a4a705e"}, {"problem": 66, "code": "(fn gcd [a b]\n\t(if (< a b) \n\t\t(recur b a)\n\t\t(first (filter #(= 0 (rem a %) (rem b %)) (iterate dec b)))))", "user": "52e657e4e4b09f7907dd1472"}, {"problem": 66, "code": "(fn [x y]\n  (last \n   (filter #(= 0 (rem x %) (rem y %)) \n           (range 1 (max y x)))))", "user": "53a5c7ffe4b0ef122a8689c4"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "526e5159e4b03e8d9a4a7316"}, {"problem": 66, "code": "#(loop [a %1\n        b %2]\n   (if (zero? b)\n     a\n     (recur b (mod a b))))", "user": "53a0ab8ce4b0ca733b9744b3"}, {"problem": 66, "code": "(fn [a b]\n  (let [c (max a b)\n        d (min a b)]\n    (loop [a c\n           b d]\n        (if (zero? b)\n          a\n          (recur b (rem a b))))))", "user": "532bce35e4b09d4e7a9b5536"}, {"problem": 66, "code": "(fn gdc [a b]\n  (let [c (mod a b)]\n    (if (zero? c)\n      b\n      (gdc b c))))", "user": "53908e6be4b0b51d73faae9a"}, {"problem": 66, "code": "(fn [x y] (last (filter #(= 0 (rem x %) (rem y %)) (range 1 (+ x 1)))))", "user": "539f4e9ee4b0ca733b974498"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [x (max a b)\n        y (min a b)\n        r (rem x y)]\n    (if (= r 0) y (gcd y r))))", "user": "5396c94be4b0b51d73faaee3"}, {"problem": 66, "code": "(fn [a b] (let [divs (reverse (range 1 (inc (min a b))))] (first (filter #(and (zero? (rem a %))(zero? (rem b %))) divs))))", "user": "538f4c1de4b0b51d73faae8c"}, {"problem": 66, "code": "(fn [a b]\n  (let [c (mod a b)]\n    (if (zero? c)\n      b\n      (recur b c))))", "user": "511688d5e4b0b3e208dba05a"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [big (max a b)\n        small (min a b)\n        m (mod big small)]\n\t(if (= m 0)\n      small\n      (gcd small m))))", "user": "538c6db7e4b0b51d73faae5a"}, {"problem": 66, "code": "(fn [a b]\n    (if (zero? b)\n      a\n      (recur b (mod a b))))", "user": "53767991e4b06839e8705e25"}, {"problem": 66, "code": "(fn [x y]\n  (let [s (sort [x y])]\n    (loop [v1 (first s)\n           v2 (last s)]\n      (if (= v2 0) v1 (recur v2 (rem v1 v2)))))\n  )", "user": "53b182a5e4b047364c044491"}, {"problem": 66, "code": "(fn [x y]\n  (let [s (sort [x y])]\n    (loop [v1 (first s) \n           v2 (last s)]\n      (if (= v2 0) v1 (recur v2 (rem v1 v2))))))", "user": "51bf0ccee4b013aa0d74b811"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "53ae16e2e4b047364c044472"}, {"problem": 66, "code": "(fn get-gcd [x y]\n  (first (filter #(and (= (rem x %) 0) (= (rem y %) 0)) (range (max x y) 0 -1))))", "user": "52b71bd2e4b0c58976d9ad4d"}, {"problem": 66, "code": "#(first (filter (fn [x] (and (= (mod %1 x) 0) \n                             (= (mod %2 x) 0)))\n                (reverse (range (inc (min %1 %2))))))", "user": "53acaf1fe4b047364c04445f"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= (mod a b) 0) b (recur b (mod a b))))", "user": "53ae0c50e4b047364c044471"}, {"problem": 66, "code": "( fn [x y] (first  (flatten  (map (fn [a] (if (and (= 0 (rem x a)) (= 0 (rem y a))) a [] )) (map inc (reverse  (range (if (> y x) x y))))))))", "user": "53ad28ede4b047364c044462"}, {"problem": 66, "code": "(fn gcd [a1 b1]\n  (let [a (if (> a1 b1) a1 b1)\n        b (if (> a1 b1) b1 a1)]\n    (if (= b 0)\n      a\n      (gcd (rem a b) b)\n      )\n    )\n  )", "user": "5245e320e4b09dbe66b56177"}, {"problem": 66, "code": "(fn gcd [x y]\n  (if (= y 0) x (recur y (rem x y))))", "user": "53b39d82e4b047364c0444a6"}, {"problem": 66, "code": "(fn [a b] (if (= b 0) a (recur b (mod a b))))", "user": "52d07cc5e4b07d0d72b273bb"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (rem a b))))", "user": "53b71b94e4b047364c0444cd"}, {"problem": 66, "code": "(fn [a b] (first \n           (filter \n            #(and (zero? (rem a % ))  (zero? (rem b % ))  ) \n            (range (min a b) 0 -1))))", "user": "52f0ea04e4b05e3f0be25ee6"}, {"problem": 66, "code": "#(loop [a %1 b %2] (if (zero? a) b (recur (mod b a) a)))", "user": "539fa040e4b0ca733b97449f"}, {"problem": 66, "code": "(fn my-gcd [a b]\n      ;Uses the Euclidean Algorithm\n      (if (= a b)\n        a\n        (let [new_a (min a b)\n              new_b (- (max a b) new_a)\n              ]\n          (my-gcd new_a new_b)\n         )\n        )\n      )", "user": "536827f1e4b0243289761e8a"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [r (rem a b)]\n    (if (= 0 r)\n    b\n    (recur b r))))", "user": "539c88e1e4b0b51d73faaf2c"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "user": "5391ab43e4b0b51d73faaea6"}, {"problem": 66, "code": "(fn fa [f s] (loop[cnt (+ 1 (int (/ (max f s) 2)))]\n            (if (and (= (rem f cnt) 0) (= (rem s cnt) 0)) cnt (recur (dec cnt))) ) )", "user": "53b3ea79e4b047364c0444ab"}, {"problem": 66, "code": "(fn gcd [a b]\n   (if (zero? b) a\n     (if (> b a) (gcd b a)\n       (gcd b (mod a b)))))", "user": "5327c591e4b09d4e7a9b54ff"}, {"problem": 66, "code": "#(last (for [c (range 1 (inc(min % %2))) :when (= 0 (rem % c) (rem %2 c))] c))", "user": "5382704be4b06839e8705ed4"}, {"problem": 66, "code": "(fn [x y]\n  (last (filter #(and (zero? (mod x %)) (zero? (mod y %))) (range 1 (inc (min x y))))))", "user": "53b7c21ae4b047364c0444d4"}, {"problem": 66, "code": "(fn [a b]\n     (cond (= b 0) a\n           (= a 0) b\n           :else (recur b (mod a b))))", "user": "4f867b25e4b033992c121c51"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0) a\n    (gcd b (mod a b))))", "user": "5103807fe4b00c483ae17703"}, {"problem": 66, "code": "(fn [a b]\n  (loop [cnt (min a b)]\n    (if (and (= (mod a cnt) 0)(= (mod b cnt) 0))\n      cnt\n      (recur (dec cnt) ))))", "user": "53b4bddae4b047364c0444b9"}, {"problem": 66, "code": "(fn gcd [a b] \n  (if (= b 0)\n    a\n    (gcd b (mod a b))))", "user": "53a94b63e4b047364c044434"}, {"problem": 66, "code": "(fn gcd [a b] (if(= 0 b) a (gcd b (rem a b))))", "user": "53bb512ce4b047364c044503"}, {"problem": 66, "code": "(fn [a b]\n  (loop [x (min a b)]\n    (when (> x 0)\n      (if (= 0 (mod (max a b) x) (mod (min a b) x))\n        x\n        (recur (dec x))))))", "user": "50f17c0de4b06d9538fe2123"}, {"problem": 66, "code": "#(if (= 0 %2) %1 (recur %2 (mod %1 %2)))", "user": "4ecaa5da535d6d7199dd3707"}, {"problem": 66, "code": "(fn gcd [a b]\n  (apply max (filter #(and \n          (= (mod a %) 0) \n          (= (mod b %) 0))\n        (range 1 (inc (min a b))))))", "user": "53bd6fcfe4b0d9a98559a6d0"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [smaller (if (< a b) a b)\n        larger  (if (< a b) b a)\n        difference (- larger smaller)]\n    (if (= difference 0)\n      larger\n      (gcd smaller difference)))\n  )", "user": "53c1ce3ee4b00fb29b221268"}, {"problem": 66, "code": "(fn [a b]\n   (loop [l (min a b) r (max a b) div l]\n     (if (= (rem l div) (rem r div) 0)\n       div\n       (recur l r (dec div))\n       )\n     )\n   )", "user": "53beacf9e4b0d9a98559a6e3"}, {"problem": 66, "code": "(fn gcd [x y]\n  (if (= 0 y)\n    x\n    (recur y (mod x y))))", "user": "53bf0913e4b0c98a41f5cc99"}, {"problem": 66, "code": "(fn my-gcd [a b]\n\t(let [m (max a b)]\n\t\t(last \n\t\t(filter #(and (= 0 (mod a %)) (= 0 (mod b %)))\n\t\t(take m (iterate inc 1))))))", "user": "53858594e4b06839e8705f05"}, {"problem": 66, "code": "#(if (= %2 0) %1 (recur %2 (mod %1 %2)))", "user": "52ee9ac7e4b05e3f0be25ec9"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) \n                a\n                (recur b (mod a b))))", "user": "539c9d7ee4b0b51d73faaf2d"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (== a b)\n    a\n    (if (or (= a 0) (= b 0))\n      (max a b)\n      (let [x (min a b), y (max a b)]\n        (gcd x (mod y x))))))", "user": "537f8e7be4b06839e8705eb8"}, {"problem": 66, "code": "#(first\n  (filter (fn [divisor] (and\n                        (= (rem %1 divisor) 0)\n                        (= (rem %2 divisor) 0)\n                        ))\n  (range %1 0 -1)))", "user": "53c38b8ce4b00fb29b22127b"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "53b2a7f8e4b047364c04449c"}, {"problem": 66, "code": "(fn gcd [ x y ]\n  (last\n   (filter #(and (= 0 (mod y %)) (= 0 (mod x %))) \n          (rest (range (inc (if (< x y) x y)))))))", "user": "504f5804e4b0a02f9cffde72"}, {"problem": 66, "code": "(fn gcd [u v]\n  (if (zero? v) u\n    (gcd v (mod u v))))", "user": "538db083e4b0b51d73faae74"}, {"problem": 66, "code": "#(loop [a %1\n        b %2]\n   (if (zero? b)\n     a\n     (recur b (mod a b))))", "user": "53c74cfce4b00fb29b2212a7"}, {"problem": 66, "code": "(fn gcd [x y]\n  (let [z (max x y)]\n    (->> (inc z) (range 1) (filter #(= 0 (rem x %) (rem y %))) (last))))", "user": "53c126fce4b00fb29b22125b"}, {"problem": 66, "code": "(fn calculate-gcd [arg1 arg2] (let [dividend (max arg1 arg2) \n                                      divisor (min arg1 arg2)] (if (= (mod dividend divisor) 0) divisor\n                                                                 (recur divisor (mod dividend divisor)))))", "user": "539b4268e4b0b51d73faaf1c"}, {"problem": 66, "code": "(fn [x y]\n  (let [dividend (max x y)\n        divisor (min x y)\n        remainder (rem dividend divisor)]\n    (if (= remainder 0)\n      divisor\n      (recur divisor remainder))))", "user": "507330e6e4b0e3170b5a8698"}, {"problem": 66, "code": "(fn g [a b] (if (= b 0) a (g b (rem a b))))", "user": "53b15e6ee4b047364c04448f"}, {"problem": 66, "code": "(fn [& xs]\n  (loop [x (apply max xs) y (apply min xs)]\n    (let [r (rem x y)]\n      (if (= 0 r) y\n        (recur y r)))))", "user": "52cf1e25e4b07d0d72b2739c"}, {"problem": 66, "code": "(fn [v1 v2] (loop [d   (if (< v1 v2) v1 v2)] (if (and (= (mod v1 d) 0) (= (mod v2 d) 0)) d (recur (dec d)))))", "user": "53347274e4b0656e627bfd6b"}, {"problem": 66, "code": "(fn [a b] [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "53cdb2c4e4b00fb29b2212e5"}, {"problem": 66, "code": "(fn [a b]\n    (let [biga (java.math.BigInteger. (str a))\n          bigb (java.math.BigInteger. (str b))\n          ]\n      (.gcd biga bigb)\n      )\n   )", "user": "53c3397be4b00fb29b221279"}, {"problem": 66, "code": "(fn [x y]\n  (loop [divisor (min x y)]\n    (if (and (= (mod x divisor) 0) (= (mod y divisor) 0)) \n      divisor\n      (recur (- divisor 1)))))", "user": "53b05a36e4b047364c044481"}, {"problem": 66, "code": "(fn [x y]\n   (some #(if (= 0 (rem x %) (rem y %)) %) (range (min x y) 0 -1))\n)", "user": "53ca23e3e4b00fb29b2212c6"}, {"problem": 66, "code": "(fn f66\n  [x y]\n  (let [i (min x y)]\n    ((fn f [i x y] \n      (if (and (= 0 (mod x i)) (= 0 (mod y i)))\n        i\n        (f (dec i) x y))) i x y)))", "user": "53abf519e4b047364c044456"}, {"problem": 66, "code": "(fn [a b] (loop [x (Math/min a b)] (if (and (= 0 (mod a x)) (= 0 (mod b x))) x (recur (- x 1)))))", "user": "53b952eee4b047364c0444e6"}, {"problem": 66, "code": "(fn gcd[a b]\n  (if (< a b)\n    (gcd b a)\n    (let [r (mod a b)]\n      (if (= r 0)\n        b\n        (gcd b r))\n    )\n  ))", "user": "53ca41dae4b00fb29b2212c8"}, {"problem": 66, "code": "(fn [x _] (cond (= 2 x) 2 (= 10 x) 5 (= 5 x) 1 (= 1023 x) 33))", "user": "51c8f1d8e4b07ef393169e5d"}, {"problem": 66, "code": "(fn [x y] (if (zero? y) x (recur y (mod x y))))", "user": "51febd40e4b0f1313d468a76"}, {"problem": 66, "code": "(fn [x y]\n  (loop [s (min x y)]\n    (if (and (= (mod x s) 0) (= (mod y s) 0))\n      s\n      (recur (dec s)))))", "user": "53791ab7e4b06839e8705e4d"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (> a b) (gcd b a)\n    (if (= a 0) b\n      (gcd a (mod b a)))))", "user": "53d78b64e4b0e771c3025466"}, {"problem": 66, "code": "(fn gcd [x y] (if (zero? y) x (recur y (mod x y))))", "user": "53cd4920e4b00fb29b2212de"}, {"problem": 66, "code": "(fn gcd [x y] (if (zero? (min x y))(max x y)(gcd (- (max x y) (min x y))(min x y))))", "user": "53d5d24de4b0e771c302544a"}, {"problem": 66, "code": "#(if (= % 0) %2 (recur (rem %2 %) %))", "user": "4e6961f0535d8ccf87e9fe9b"}, {"problem": 66, "code": "(fn [x y] \"\u0435\u0431\u0430\u043d\u044b\u0439 \u0430\u0434\" (first (for [z (reverse (range 1 (last (sort [x y])))) :when (and (zero? (mod x z)) (zero? (mod y z)))] (do (int z)))))", "user": "53d0d7a9e4b00fb29b22130c"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))))", "user": "53da19fde4b0e771c3025484"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))))", "user": "5344fe13e4b084c2834f4a32"}, {"problem": 66, "code": "(fn gcd\n  ([a b]       (gcd a b 1 2))\n  ([a b cur i] (if (or (= a (dec i)) (= b (dec i)))\n                 cur\n                 (gcd a b (if (and (= (mod a i) 0) (= (mod b i) 0)) i cur) (inc i)))))", "user": "53ddd44be4b0d874e779ae2e"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (recur b (rem a b))))", "user": "53ce4cd4e4b00fb29b2212ef"}, {"problem": 66, "code": "(fn [x y]\n    (loop [div (min x y)]\n      (if (and (zero? (rem x div)) (zero? (rem y div)))\n        div\n        (recur (dec div)))))", "user": "53a83c74e4b047364c044426"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "530b8580e4b02e82168697cc"}, {"problem": 66, "code": "(fn [a b] (if (= a b) a (recur (min a b) (Math/abs (- a b)))))", "user": "53e19461e4b0d874e779ae59"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (> b a)\n    (gcd b a))\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "user": "53e241a6e4b036ad0777e3f0"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (rem a b))))", "user": "53de622ce4b0d874e779ae34"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (gcd b (mod a b))))", "user": "53dadf1de4b0e771c30254ad"}, {"problem": 66, "code": "(fn gcd [x y]\n  (if (> y x)\n      (gcd y x)\n      (let [m (mod x y)]\n        (if (= m 0)\n            y\n            (gcd y m)))))", "user": "53dc94c8e4b094d41abdfefc"}, {"problem": 66, "code": "#(if (zero? %2) % (recur %2 (mod % %2)))", "user": "53dfdf01e4b0d874e779ae46"}, {"problem": 66, "code": "(fn [a b]\n             (if (zero? (rem a b))\n               b\n               (recur b (rem a b))))", "user": "51910da7e4b0f8ef0be96bf9"}, {"problem": 66, "code": "(fn gcd [a b] (loop[a a b b] \n                 (if (= 0 b)\n                   a\n                   (recur b (mod a b)))))", "user": "53da8fede4b0e771c30254a3"}, {"problem": 66, "code": "(fn [x y]\n  (loop [x x\n         y y]\n    (if (= x y) x\n      (if (< x y)\n        (recur x (- y x))\n        (recur (- x y) y)))))", "user": "51b8d3d5e4b050a1176cd69d"}, {"problem": 66, "code": "(fn [x y] (->>\n           (min x y)\n           (+ 1)\n           (range 1)\n           (filter #(= 0 (rem x %) (rem y %)))\n           last))", "user": "539dcb24e4b0b51d73faaf3d"}, {"problem": 66, "code": "(fn [a b]\n  (loop [num1 a num2 b remainder (mod num1 num2)]\n    (if (= 0 remainder)\n      num2\n      (recur num2 remainder (mod num2 remainder)))))", "user": "5389fe49e4b0640c7a9a58b4"}, {"problem": 66, "code": "(fn gcd \n  [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "53e2ac1ae4b036ad0777e3f3"}, {"problem": 66, "code": "(fn gcd [x y]\n  (let [m (min x y) M (max x y) r (rem M m)]\n    (if (= 0 r)\n      m\n      (gcd r m))))", "user": "53e4fa2ce4b036ad0777e454"}, {"problem": 66, "code": "(fn [x y]\n  (loop [current (min x y)]\n    (if (= (rem x current) (rem y current) 0) current (recur (dec current)))))", "user": "53c649d3e4b00fb29b221297"}, {"problem": 66, "code": "(fn gcd [a b] \n  (cond (< a b) (gcd b a)\n        (= b 0) a\n        (= b 1) 1\n        true (gcd b (mod a b))))", "user": "53e91473e4b036ad0777e495"}, {"problem": 66, "code": "(fn [x y] \n  (let [factors (fn [n] \n                   (filter #(= (rem n %) 0) (range 1 (inc n))))\n        x-factors (factors x)\n        y-factors (factors y)]\n    (->> (clojure.set/intersection (set x-factors) (set y-factors))\n        (apply max))))", "user": "53d28800e4b00fb29b22131e"}, {"problem": 66, "code": "(fn gcd[a b] \n\t  (if (= b 0)\n\t    a\n\t    (recur b (mod a b))\n\t))", "user": "52ba2639e4b07a9af57922cb"}, {"problem": 66, "code": "(fn [x1 x2] \n  (loop [i (apply max [x1 x2])]\n    (if (and (integer? (/ x1 i)) (integer? (/ x2 i))) i\n      (recur (dec i)))))", "user": "53e76bb2e4b036ad0777e47d"}, {"problem": 66, "code": "#(if (zero? %2) \n\t\t%\n\t\t(recur %2 (rem % %2)))", "user": "528d6b10e4b0239c8a67aec3"}, {"problem": 66, "code": "(fn [x y]\n  (let [divisors (fn [z] (set (filter #(zero? (mod z %)) (range 1 (inc z)))))]\n    (first (sort > (clojure.set/intersection (divisors x) (divisors y)))))\n  )", "user": "53d2afede4b00fb29b221321"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "53e27bf1e4b036ad0777e3f2"}, {"problem": 66, "code": "(fn gcd [a b] (first (drop-while #(not (= 0 (mod a %) (mod b %))) (range (min a b) 0 -1))))", "user": "53ecac57e4b0d648e757f4b3"}, {"problem": 66, "code": "(fn [x y] \n  (loop [a (max x y)\n         b (min x y)]\n    (if (zero? b)\n      a\n      (recur b (mod a b)))))", "user": "53ee7f2ee4b0d648e757f4cf"}, {"problem": 66, "code": "(fn [a b] (->>\n           (range 1 (max a b))\n           (filter #(= 0 (mod a %) (mod b %)))\n           (apply max)))", "user": "5368fedee4b0243289761e93"}, {"problem": 66, "code": "(fn [paramA paramB]\n  (loop [param1 paramA param2 paramB gcd 0 counter 1]\n    (if (or (= (dec counter) param1) (= (dec counter) param2))\n      gcd\n      (recur\n        param1\n        param2\n        (if (and (= (mod param1 counter) 0) (= (mod param2 counter) 0))\n          counter\n          gcd\n        )\n        (inc counter)\n      )\n    )\n  )\n)", "user": "53f17931e4b0742d9025b0dd"}, {"problem": 66, "code": "(fn gcd [m n] \n   (if (= n 0)\n       m\n       (gcd n (rem m n))))", "user": "5343753ae4b084c2834f4a1b"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= a 0) \n    b\n    (gcd (mod b a) a)))", "user": "52eb2ec9e4b0705949c44439"}, {"problem": 66, "code": "(fn [x y] (if (= x 0) y (recur (mod y x) x)))", "user": "50856bd1e4b004985b776e4c"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "user": "53dfbc75e4b0d874e779ae44"}, {"problem": 66, "code": "(fn gcd [n1 n2]\n  (if (zero? n2)\n    n1\n    (recur n2 (mod n1 n2))))", "user": "53ea5307e4b036ad0777e4e2"}, {"problem": 66, "code": "(fn gcd [a b]\n    (if (not= 0 b)\n      (recur b (mod a b))\n      a))", "user": "523578efe4b0a643f2dcb74c"}, {"problem": 66, "code": "(fn [x y]\n  (if (< x y)\n    (recur y x)\n    (let [a (mod x y)]\n      (if (= 0 a)\n        y\n        (recur y a)))))", "user": "53e92aafe4b036ad0777e49a"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [remainder (mod a b)]\n    (if (zero? remainder)\n      b\n      (gcd b remainder))))", "user": "5338387de4b0e30313ee6c91"}, {"problem": 66, "code": "(fn [n1 n2] (loop [a n1 b n2]\n\t(if (zero? b) a \n\t   (recur b  (mod a b) ))))", "user": "537b1083e4b06839e8705e64"}, {"problem": 66, "code": "(fn div [x y]\n  (let [a (max x y) b (min x y) r (rem a b)]\n    (if (= r 0) b (div b r))))", "user": "53ea72b6e4b036ad0777e4e5"}, {"problem": 66, "code": "(fn [x y]\n  (loop [a (max x y)\n         b (min x y)]\n    (if (zero? (mod a b)) b\n      (recur b (mod a b)))))", "user": "53ea3a63e4b036ad0777e4dc"}, {"problem": 66, "code": "(fn gcd [u v]\n  (cond (= u v) u\n        (= u 0) v\n        (= v 0) u\n        (and (even? u) (even? v)) (* 2 (gcd (/ u 2) (/ v 2)))\n        (and (even? u) (odd? v)) (gcd (/ u 2) v)\n        (and (odd? u) (even? v)) (gcd u (/ v 2))\n        :else (if (> u v) (gcd (/ (- u v) 2) v)\n                (gcd (/ (- v u) 2) u))))", "user": "53e9a15be4b036ad0777e4ae"}, {"problem": 66, "code": "(fn [x y]\n    (letfn [(gcd [a b] (if (= b 0) a (gcd b (mod a b))))]\n      (gcd (max x y) (min x y))))", "user": "513e8141e4b02b2a3d8235c1"}, {"problem": 66, "code": "(fn [a b] (\n  if (= b 0) a (recur (min a b) (- (max a b) (min a b)))\n))", "user": "53f6d555e4b0db01ade6f9e5"}, {"problem": 66, "code": "(let [my-divisors (fn [n]\n  (cons n\n        (filter #(= 0 (rem n %)) (range (int (Math/floor (/ n 2))) 0 -1))\n  )\n)]\n\n  (fn my-gcd [a b]\n    (let [adiv (set (my-divisors a))\n          bdiv (set (my-divisors b))\n          cdiv (filter adiv bdiv)]\n      (apply max cdiv)\n    )\n  )\n)", "user": "53edb628e4b0d648e757f4c8"}, {"problem": 66, "code": "(fn g [x y] (if (> y 0) (g y (rem x y)) (max x (- x))))", "user": "53f035c2e4b0742d9025b0d2"}, {"problem": 66, "code": "#(let[a (min %1 %2)\n        b (max %1 %2)\n        r  (/ a b) ; does not work: (numerator (/ 1 1)), not Rational\n        ]\n        (if (= (numerator r)  a)\n          1         \n          (/ a (numerator r))\n        ))", "user": "5364ab34e4b0243289761e64"}, {"problem": 66, "code": "(fn gcd[a b]\n    (if (= b 0)\n       a\n       (gcd b (mod a b))))", "user": "5398123ee4b0b51d73faaef3"}, {"problem": 66, "code": "#(loop [a %1 b %2]\n   (if (zero? b)\n     a\n     (recur b (mod a b))))", "user": "53f7820be4b0de5c41848560"}, {"problem": 66, "code": "(fn gcd \n  [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "53cd421ce4b00fb29b2212dd"}, {"problem": 66, "code": "(fn gcd [a b]\n   (->> (range 1 (+ 1 (min a b)))\n        (filter #(and (= 0 (rem a %)) (= 0 (rem b %))))\n        (apply max))\n   )", "user": "53ed6976e4b0d648e757f4c4"}, {"problem": 66, "code": "(fn gcd [x y]\n  (cond\n    (= y 0) x\n    :else (gcd y (mod x y))))", "user": "53bd7080e4b0d9a98559a6d1"}, {"problem": 66, "code": "(fn [a b]\n  (let [d (fn [x] (filter #(= 0 (rem x %1)) (range 1 (inc x))))]\n    (last (filter (set (d a)) (d b)))\n    ))", "user": "53d5a63be4b0e771c3025449"}, {"problem": 66, "code": "(fn [a b]\n    (if (zero? b)\n      a (recur b (mod a b))))", "user": "538ca203e4b0b51d73faae5f"}, {"problem": 66, "code": "(fn peu [x y] (if (> y x) (peu y x) (if (= y 0) x (peu (- x y) y))))", "user": "53fc8424e4b0de5c418485b3"}, {"problem": 66, "code": "(fn __\n  [large, small]\n  (cond\n    (< large small) (__ small large)\n    (= 0 (mod large small)) small\n    :else\n      (__ small (mod large small))\n    )\n  )", "user": "51ad808ee4b09397d5109784"}, {"problem": 66, "code": "(fn [x y] (last (filter #(and (= 0 (mod x %)) (= 0 (mod y %)))  (range 1 (inc (min x y))))))", "user": "53f75957e4b0de5c4184855d"}, {"problem": 66, "code": "(fn gcf [x y]\n  (let [less (min x y)\n        diff (Math/abs (- x y))]\n    (cond (= x y) x\n          (zero? (rem less diff)) diff\n          true (gcf less diff))))", "user": "53fb5256e4b0de5c4184857f"}, {"problem": 66, "code": "(fn gcd [x y]\n         (if (= x y) x (gcd (- (max x y) (min x y)) (min x y))))", "user": "53f592b7e4b0db01ade6f9d0"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0) a\n    (recur b (mod a b))))", "user": "53968a70e4b0b51d73faaee0"}, {"problem": 66, "code": "(fn x[a b]\n  (if(= b 0)a (x b (mod a b))))", "user": "53ed2fafe4b0d648e757f4c1"}, {"problem": 66, "code": "(fn euclid [a b] (if (= b 0) a (euclid b (mod a b))))", "user": "53f6566ee4b0db01ade6f9de"}, {"problem": 66, "code": "(fn gcd [a b]\n      (if (zero? b) a\n      (recur b (mod a b))))", "user": "53e9681de4b036ad0777e4a4"}, {"problem": 66, "code": "(fn gcd [a b] (if (< a b)\n                 (if (= 0 (rem b a)) a (gcd (rem b a) a))\n                 (if (= 0 (rem a b)) b (gcd (rem a b) b)))\n   )", "user": "53d86564e4b0e771c302546b"}, {"problem": 66, "code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "user": "53fe1c3be4b0de5c418485f2"}, {"problem": 66, "code": "#(let [a (max %1 %2)\n       b (min %1 %2)]\n   (if (= 0 (rem a b))\n     b\n     (recur b (rem a b))))", "user": "5400fc30e4b0de5c4184861b"}, {"problem": 66, "code": "(fn [x y]\n  (if (zero? y)\n    x\n    (recur y (mod x y))))", "user": "52474133e4b05ef8e38e635e"}, {"problem": 66, "code": "(fn [x y]\n  (let [m (min x y)]\n    (letfn [(go [n l]\n              (if (<= n m)\n                (if (and (= 0 (rem x n))\n                         (= 0 (rem y n)))\n                  (go (inc n) n)\n                  (go (inc n) l))\n                l))]\n      (go 2 1))))", "user": "53ef7f77e4b0742d9025b0ce"}, {"problem": 66, "code": "(fn [a b] \n  (loop [x (max a b) y (min a b)]\n    (if (zero? y)\n      x\n      (recur y (mod x y)))))", "user": "525b4e8de4b0cb4875a45d0f"}, {"problem": 66, "code": "#(loop [x %1 y %2] (if (< x y) (if (= 0 x) y (recur (mod y x) x)) (recur y x)))", "user": "523630eee4b05f3be1c7c8e8"}, {"problem": 66, "code": "(fn gcd [int1 int2]\n  (let [a (max int1 int2)\n        b (min int1 int2)\n        remainder (rem a b)]\n    (if (zero? remainder) b (gcd b remainder))\n    )\n  )", "user": "53fe459ae4b0de5c418485f4"}, {"problem": 66, "code": "(fn mm [m n]\n  (loop [div (min m n)]\n    (if (and (= 0 (mod m div)) \n             (= 0 (mod n div)))\n      div\n      (recur (dec div)))))", "user": "535f0cbde4b04ce2eb3ed2d9"}, {"problem": 66, "code": "(fn [a b]\n  (loop [a a b b]\n\t(if (= 0 b)\n\t  a\n\t  (recur b (mod a b)))))", "user": "53bf9cfbe4b0c98a41f5cca4"}, {"problem": 66, "code": "#(loop [a %1, b %2] (if (= b 0) a (recur b (mod a b))))", "user": "53fcdd1ae4b0de5c418485dd"}, {"problem": 66, "code": "(fn nwd [a b] (if (> b 0) (nwd b (- a (* (quot a b) b))) a))", "user": "53fb4843e4b0de5c4184857d"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (let [factors (fn factors [n] (filter #(zero? (rem n %)) (range 1 (inc n))))]\n  (some #((set (factors a)) %) (reverse (sort (factors b))))))", "user": "5401aefbe4b0df28a13c62c7"}, {"problem": 66, "code": "(fn [a b]\n  (let [get-divisor (fn [n] (into #{}\n                              (filter #(zero? (rem n %))\n                                      (range 1 (inc n)))\n                              ))\n        a-divisor (get-divisor a)\n        b-divisor (get-divisor b)\n        commom-divisor (clojure.set/intersection a-divisor b-divisor)]\n    (apply max commom-divisor)))", "user": "53be3ee7e4b0d9a98559a6df"}, {"problem": 66, "code": "(fn cdd [a b] \n  (cond \n   (> a b) (cdd (- a b) b)\n   (< a b) (cdd a (- b a))\n   :else a))", "user": "54094824e4b0addc1aec66da"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (< a b)\n    (gcd b a)\n    (loop [current b]\n      (if (= current 1)\n        1\n      \t(if (and (= (rem a current) 0) (= (rem b current) 0))\n        \tcurrent\n        \t(recur (dec current))\n       \t )\n        )\n     )\n ))", "user": "54021f13e4b0df28a13c62cc"}, {"problem": 66, "code": "(fn [x y]\n  (loop [mini (min x y)]\n    (if (or (= 1 mini) (and (= 0 (mod y mini)) (= 0(mod x mini))))\n      mini\n     (recur (dec mini)))))", "user": "4daeff24edd6309eace4d16e"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (mod a b))))", "user": "53e8c684e4b036ad0777e48b"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (if (= a b) \n    a\n    (let [a* (max a b)\n          b* (min a b)]\n        (recur b*  (- a* b*)))))", "user": "540b2dcbe4b0addc1aec66f4"}, {"problem": 66, "code": "#(if (= %1 %2) %1\n   (recur (Math/abs (- %1 %2)) (min %1 %2)))", "user": "524025bce4b0ad64fa01030f"}, {"problem": 66, "code": "(fn [a b]\n   (if (> a b)\n     (recur (- a b) b)\n     (if (< a b)\n       (recur a (- b a))\n       a)))", "user": "534bfc71e4b084c2834f4a88"}, {"problem": 66, "code": "(fn gcd [x y] (if (= y 0) x (gcd y (mod x y))))", "user": "5097ea89e4b087ccf61a7af4"}, {"problem": 66, "code": "(fn sk-greatest-common-divider [a b]\n  (last (filter #(and (= 0 (rem a %)) (= 0 (rem b %)))\n                (range 1 (max a b)))))", "user": "51d42f44e4b013d740b70ddb"}, {"problem": 66, "code": "(fn [a b] \n   (loop [ia a ib b] \n     (if (= ib 0) \n       ia \n       (recur ib (mod ia ib)))))", "user": "53c06438e4b0c98a41f5ccb0"}, {"problem": 66, "code": "(fn gcd [a b]\n  (case b\n    0 a\n    (gcd b (mod a b))\n  )\n)", "user": "53b9bb15e4b047364c0444ed"}, {"problem": 66, "code": "(fn a [x y]\n  (loop [min-val (min x y)]\n    (if (= 0 (mod x min-val) (mod y min-val))\n      min-val\n      (recur (dec min-val)))\n    \n    )\n  )", "user": "54103b31e4b01498b1a719a1"}, {"problem": 66, "code": "(fn a [x y]\n  (loop [min-val (min x y)]\n    (if (= 0 (mod x min-val) (mod y min-val))\n      min-val\n      (recur (dec min-val)))\n    )\n  )", "user": "4e260220535deb9a81d77ef0"}, {"problem": 66, "code": "(fn [x y] (last (keep #(if (and (= (mod x %) 0) (= (mod y %) 0)) %) (range 1 (* x y)))))", "user": "540479e7e4b0addc1aec665a"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5409f8eae4b0addc1aec66e6"}, {"problem": 66, "code": "(fn gcd[x y]\n  (cond \n   (= x y) x\n   (> x y) (gcd (- x y)y)\n   (< x y) (gcd x (- y x))))", "user": "53f3a4ace4b0742d9025b0f7"}, {"problem": 66, "code": "#(last (sort (clojure.set/intersection (set (filter (fn [x](= 0 (rem % x))) (range 1 (+ 1 %)))) (set(filter (fn [x](= 0 (rem %2 x))) (range 1 (+ 1 %2)))))))", "user": "538d70abe4b0b51d73faae6e"}, {"problem": 66, "code": "(fn f [a b]\n  (let [m (mod a b)]\n    (if (= m 0)\n      b\n      (recur b m))))", "user": "540d5085e4b0addc1aec670e"}, {"problem": 66, "code": "(fn [x y]\n  (loop [n (min x y)]\n    (when (>= n 0)\n      (if (and (= (mod x n) 0)\n               (= (mod y n) 0))\n        n\n        (recur (dec n))))))", "user": "54084784e4b0addc1aec66c9"}, {"problem": 66, "code": "(fn [a b]\n  (let [get-divisor (fn [n] (into #{}\n                              (filter #(zero? (rem n %))\n                                      (range 1 (inc n)))\n                              ))\n        a-divisor (get-divisor a)\n        b-divisor (get-divisor b)\n        commom-divisor (clojure.set/intersection a-divisor b-divisor)]\n    (apply max commom-divisor)))", "user": "523089f8e4b0035e815da388"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (if (= b 0) a (gcd b (rem a b))))", "user": "54091b82e4b0addc1aec66d5"}, {"problem": 66, "code": "(fn [a b]\n  (letfn [(gcd [num divisor acc]\n            (if (= num divisor)\n              (conj acc divisor)\n              (recur num (+ 1 divisor)(if (= (mod num divisor) 0)(conj acc divisor) acc))))]\n    (let [left (gcd a 1 [])\n          right (gcd b 1 [])]\n      (apply max (clojure.set/intersection (into #{} left) (into #{} right))))))", "user": "53214efbe4b09d4e7a9b54b2"}, {"problem": 66, "code": "(fn [& args]\n  (let [highest (apply max args)\n        lowest (apply min args)]\n    (loop [divisor lowest]\n      (if (= 0 (mod lowest divisor) (mod highest divisor))\n        divisor\n        (recur (dec divisor))))))", "user": "53c69ebce4b00fb29b22129c"}, {"problem": 66, "code": "(letfn [(f [a b]\n           (loop [guess (min a b)]\n             (if (and (zero? (rem a guess)) (zero? (rem b guess)))\n               guess\n               (recur (dec guess)))))]\n  f)", "user": "540470dae4b0addc1aec6658"}, {"problem": 66, "code": "(fn gcd [a b] (if (= a b) a (if (> a b) (gcd (- a b) b) (gcd a (- b a)))))", "user": "5405ae2be4b0addc1aec6671"}, {"problem": 66, "code": "(fn gcd [x y]\n  (cond\n   (= x y) x\n   (< x y) (recur x (- y x))\n   (> x y) (recur (- x y) y)))", "user": "53f2370ee4b0742d9025b0e7"}, {"problem": 66, "code": "(fn [x1, x2]\n  (last (filter \n         #(and \n           (integer? (/ x1 %)) \n           (integer? (/ x2 %)))  \n         (range 1 (max x1 x2))))\n )", "user": "52382d91e4b0fae3832e99f0"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (rem a b))))", "user": "541096bde4b01498b1a719b2"}, {"problem": 66, "code": "(fn\n  [A B]\n       (apply max (filter #(and (= (mod A %) 0) (= (mod B %) 0)) (rest (range (inc (min A B)))))))", "user": "53d6b266e4b0e771c3025459"}, {"problem": 66, "code": "(fn gcd [x y]\n  (if (= y 0) x \n    (gcd y (mod x y))))", "user": "54133900e4b01498b1a719de"}, {"problem": 66, "code": "(fn [int-1 int-2]\n  (apply max (filter #(and (= 0 (mod int-1 %) (mod int-2 %)))\n                     (range 1 (inc (min int-1 int-2))))))", "user": "53f6bfd9e4b0db01ade6f9e4"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "540e17c3e4b0addc1aec6719"}, {"problem": 66, "code": "(fn [x y]\n  (loop [n (min x y)]\n    (if (and (zero? (rem x n)) (zero? (rem y n)))\n      n\n      (recur (dec n))\n    )\n  )\n)", "user": "540f09b9e4b0addc1aec6725"}, {"problem": 66, "code": "(fn ggT [a b] \n  (if (= b 0) \n    a\n    (recur b (mod a b))))", "user": "53f35c34e4b0742d9025b0f4"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "53fd66a4e4b0de5c418485e3"}, {"problem": 66, "code": "#(loop [a %1 b %2]\n   (if (= 0 (mod a b))\n     b\n     (recur b (mod a b))))", "user": "53e76728e4b036ad0777e47c"}, {"problem": 66, "code": "(fn gcd [x y]\n  (cond\n   (= x y) x\n   (< x y) (gcd (- y x) x)\n   :else (gcd y x)))", "user": "541619e8e4b01498b1a719f9"}, {"problem": 66, "code": "(clojure.core/fn ([a b]\n                    (cond\n                      (= a b) a\n                      (= (rem a b) 0) b\n                      (= (rem b a) 0) a\n                      :else (let [divisors\n                                  (fn \n                                    [n]\n                                    (for\n                                      [div\n                                       (range n 0 -1)\n                                       :when\n                                       (= (rem n div) 0)]\n                                      div))]\n                              (reduce\n                                max\n                                (filter\n                                  #(= (rem (max a b) %) 0)\n                                  (divisors (min a b))))))))", "user": "52a7634ae4b0c58976d9ac16"}, {"problem": 66, "code": "#(loop [a (min %1 %2) b (max %1 %2)] (if (or (zero? a) (= a b)) b (recur (mod b a) a)))", "user": "5282f54be4b0239c8a67ada0"}, {"problem": 66, "code": "#(if (= % 0) %2 (recur (mod %2 %) %))", "user": "52541fe6e4b0541d1855b964"}, {"problem": 66, "code": "(fn [a b]\n  (reduce\n    (fn [memo el]\n      (if (and (= 0 (mod a el)) (= 0 (mod b el)))\n        el\n        memo))\n    1\n    (range 2 (inc (min a b)))))", "user": "52d6d490e4b09f7907dd1369"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (mod a b))))", "user": "53dcf474e4b0d874e779ae25"}, {"problem": 66, "code": "(fn gcd [x y] (if (= 0 y) x (gcd y (mod x y))))", "user": "511036c5e4b04c71fce993ee"}, {"problem": 66, "code": "(fn [n1 n2]\n  (let [lo (min n1 n2)\n        hi (max n1 n2)]\n    (reduce (fn [a b] (if (= (mod hi b) (mod lo b) 0) b a)) (range 1 (+ 1 lo)))))", "user": "541c1e46e4b01498b1a71a70"}, {"problem": 66, "code": "(fn [a b]\n        (if (= b 0)\n          a\n          (recur b (mod a b))))", "user": "541ae7dbe4b01498b1a71a61"}, {"problem": 66, "code": "(fn f66 [x y]\n  (loop [d (min x y)]\n    (if (= d 1)\n      d\n      (if (and (= 0 (rem y d)) (= 0 (rem x d)))\n        d\n        (recur (dec d))\n        )\n      )\n    )\n  )", "user": "526698c9e4b03e8d9a4a7144"}, {"problem": 66, "code": "(fn [a b]\n  (let [min-num (min a b)]\n    (first (filter #(= 0 (mod a %) (mod b %)) (reverse (range (inc min-num)))))))", "user": "5412ef7ee4b01498b1a719da"}, {"problem": 66, "code": "(fn [x y]\n  (->> (min x y) (inc) (range) (reverse)\n       (filter #(every? zero? [(mod x %) (mod y %)]))\n       (first)))", "user": "54157dace4b01498b1a719f4"}, {"problem": 66, "code": "(fn mhidiv\n  [n1 n2]\n  (loop [div (max n1 n2)]\n    (if (= 0 (mod n1 div) (mod n2 div))\n      div\n      (recur (dec div)))))", "user": "540efe2ee4b0addc1aec6724"}, {"problem": 66, "code": "(fn gcd [x,y]\n    (if (= y 0) \n        x \n        (gcd y (rem x y))))", "user": "54213a8fe4b01498b1a71aaf"}, {"problem": 66, "code": "(fn [& divisors]\n   (apply max\n          (filter \n           (fn [n]\n             (every? #(= 0 (mod % n)) \n                     divisors))\n           (range (apply min divisors) 0 -1))))", "user": "540c54a7e4b0addc1aec6700"}, {"problem": 66, "code": "(fn\n  [x y]\n  (let [xs (reduce (fn\n                     [result item]\n                     (if (= (mod x item) 0)\n                       (conj result item)\n                       result))\n                   #{}\n                   (range 1 (inc x)))\n        ys (reduce (fn\n                     [result item]\n                     (if (= (mod y item) 0)\n                       (conj result item)\n                       result))\n                   #{}\n                   (range 1 (inc y)))]\n    (apply max (clojure.set/intersection xs ys))))", "user": "53e0001be4b0d874e779ae48"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= a b)\n    a\n    (if (< a b)\n      (gcd a (- b a))\n      (gcd b (- a b)))))", "user": "541475afe4b01498b1a719eb"}, {"problem": 66, "code": "(fn f66 [a b]\n  (last (distinct (flatten (filter #(= (count %) 2) (partition-by str (sort (concat (filter #(zero? (rem a %)) (take a (iterate inc 1))) (filter #(zero? (rem b %)) (take b (iterate inc 1)))))))))))", "user": "52c08c59e4b07a9af5792351"}, {"problem": 66, "code": "(fn [& numbers]\n  (let [prime? #(.isProbablePrime (BigInteger/valueOf %) 5)\n        primes (filter prime? (iterate inc 2))\n        prime-factor #(loop [n %, x []]\n                        (if (prime? n)\n                          (cons 1 (conj x n))\n                          (let [new-prime (first (drop-while (comp not zero? (partial rem n)) (drop (count x) primes)))]\n                            (recur (/ n new-prime) (conj x new-prime)))))]\n     (apply * (apply clojure.set/intersection (map (comp (partial into #{}) prime-factor) numbers)))))", "user": "53e4b5a3e4b036ad0777e44b"}, {"problem": 66, "code": "(fn gcd [a, b]\n  (cond\n     (zero? b) a\n     :else (gcd b (mod a b))))", "user": "5409a12fe4b0addc1aec66df"}, {"problem": 66, "code": "(fn [a b]\n  (loop [a a b b]\n    (if (zero? b) a\n      (recur b (mod a b)))))", "user": "4eb3fcba535d7eef30807359"}, {"problem": 66, "code": "#(if (= %2 0) %1 (recur %2 (mod %1 %2)))", "user": "54246fcce4b01498b1a71aed"}, {"problem": 66, "code": "(fn [a b]\n  (loop [a a\n         b b]\n    (if (= b 0)\n      a\n      (recur b (mod a b)))))", "user": "5424c523e4b01498b1a71b03"}, {"problem": 66, "code": "(fn [a b]\n  (loop [s (min a b)]\n    (if (= 1 s)\n      1\n      (if (= 0 (mod a s) (mod b s))\n        s\n        (recur (dec s))))))", "user": "51ca5378e4b08b1cbd0d9480"}, {"problem": 66, "code": "(fn gcd [a b]\n   (let [sieve (range 1 (+ 1 (min a b)))\n         divisors (filter (fn [x]\n                            (and\n                              (= 0 (rem a x))\n                              (= 0 (rem b x)))\n                            )\n                          sieve)]\n     (apply max divisors)))", "user": "5429986ce4b01498b1a71b3b"}, {"problem": 66, "code": "#(if (= %2 0)\n   %\n   (recur %2 (mod % %2)))", "user": "53cdbad1e4b00fb29b2212e6"}, {"problem": 66, "code": "#(loop [d %1 n %2]\n   (if (zero? n) d\n     (recur n (rem d n))))", "user": "54302691e4b0dad94371f2d7"}, {"problem": 66, "code": "#(if (= 0 %2) % (recur %2 (mod % %2)))", "user": "53a01fb1e4b0ca733b9744a6"}, {"problem": 66, "code": "#(if (= 0 %2) % (recur %2 (mod % %2)))", "user": "542f574be4b0dad94371f2d0"}, {"problem": 66, "code": "(fn [a b]\n  (letfn [(prime-factors\n           ([n] (prime-factors n 2 []))\n           ([n k acc]\n            (if (= n 1)\n              acc\n              (if (zero? (rem n k))\n                (recur (quot n k) k (cons k acc))\n                (recur n (inc k) acc)))))]\n    (let [fa (frequencies (prime-factors a))\n          fb (frequencies (prime-factors b))]\n      (reduce (fn [acc i]\n                (if (contains? fb i)\n                  (* acc (* i (min (fa i) (fb i))))\n                  acc))\n              1\n              (keys fa)))))", "user": "53dd37aee4b0d874e779ae28"}, {"problem": 66, "code": "(fn [a b]\n  (first (filter #(and (= 0 (mod a %)) (= 0 (mod b %))) (reverse (range 1 (inc (min a b)))))))", "user": "542c22bde4b0dad94371f29e"}, {"problem": 66, "code": "(fn porn [a b] (condp = a\n                 b a\n                 a (porn (min a b) (Math/abs (- a b)))\n                 ))", "user": "516ee939e4b06aac486e5b34"}, {"problem": 66, "code": "(fn [a b] (loop [a a b b]\n            (if (= (mod a b) 0) \n              b\n                ( recur (max b (mod a b)) (min b (mod a b) ) )\n              )\n            )\n                  )", "user": "542baf7ce4b0dad94371f291"}, {"problem": 66, "code": "(fn [a b]\n  (let [c #(= (rem %2 %) 0)]\n    (last (for [x (range 1 (inc (min b a)))\n                :when (and (c x a) (c x b))] x))))", "user": "54344721e4b0b6b47310fcea"}, {"problem": 66, "code": "(fn [a b]\n  (apply max (filter \n     #(and \n       (zero? (mod a %))\n       (zero? (mod b %))) \n   (range 1 (max a b)))))", "user": "532a033be4b09d4e7a9b551f"}, {"problem": 66, "code": "(fn [x y]\n  (if (= y 0) x\n    (recur y (mod x y))))", "user": "52ee0de4e4b05e3f0be25ec1"}, {"problem": 66, "code": "(fn [x y] (last (filter #(and (zero? (rem x %)) (zero? (rem y %))) (range 1 (max x y)))))", "user": "5310e968e4b08068f379ecdd"}, {"problem": 66, "code": "(fn !\n\t[a b]\n\t(if (= b 0)\n\t  a\n\t  (! b (mod a b))))", "user": "53da3fcde4b0e771c3025497"}, {"problem": 66, "code": "#(case (mod %1 %2) 0 %2 (recur %2 (mod %1 %2)))", "user": "54397533e4b032a45b86931d"}, {"problem": 66, "code": "(fn [x y] (loop [a (max x y) b (min x y)]\n            (if (= 0 (rem a b)) b\n              (recur b (rem a b)))))", "user": "53e745a1e4b036ad0777e479"}, {"problem": 66, "code": "#(apply max\n        ( filter \n          (fn [x] (= 0 (rem % x) (rem %2 x))) \n          (range 1 (max (inc %) (inc %2)))\n         )\n )", "user": "543a68d3e4b032a45b869326"}, {"problem": 66, "code": "(fn [a b] (if (zero? (rem a b)) b (recur b (rem a b))))", "user": "542edb4ae4b0dad94371f2c8"}, {"problem": 66, "code": "(fn [a b]\n    (if (zero? b)\n      a\n      (recur b (mod a b))))", "user": "52b2f9cae4b0c58976d9acfb"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))))", "user": "542d2385e4b0dad94371f2b2"}, {"problem": 66, "code": "(fn [a b]   \n  (last \n   (last \n    (take-while \n     #(not= 0 (last %)) \n     (iterate #( vec [ (last %) (mod (first %) (last %))] )  [a b])\n     )\n    )\n   )\n  )", "user": "51e1c176e4b06a68e693eafb"}, {"problem": 66, "code": "(fn [x y]\n    (loop [a x b y]\n      (if (zero? b) a,\n                    (recur b (mod a b)))))", "user": "515ebde3e4b01e5d11ccd0a8"}, {"problem": 66, "code": "(fn [a b] (loop [a a b b] (if (zero? b) a (recur b (mod a b)))))", "user": "5385e633e4b06839e8705f08"}, {"problem": 66, "code": "(fn [a b]\n    (if (= b 0)   a\n        (recur b (rem a b))))", "user": "5433a07be4b0b6b47310fce0"}, {"problem": 66, "code": "(fn gcd [x y]\n      (let [[bigger smaller] (reverse (sort [x y]))\n            remainder (mod bigger smaller)]\n        (if (zero? remainder)\n          smaller\n          (gcd smaller remainder))))", "user": "53f891eee4b0de5c4184856d"}, {"problem": 66, "code": "(fn NWD [x y]\n  (if (= y 0)\n    x\n    (NWD y (mod x y))))", "user": "543d5c61e4b032a45b86934d"}, {"problem": 66, "code": "(fn [a b]\n  (if (= a b)\n    a\n    (recur (min a b) (- (max a b) (min a b)))))", "user": "53a511aae4b0b62ce3005735"}, {"problem": 66, "code": "(fn euc [x y]\n  (if (= y 0)\n    x\n  (euc y (mod x y)))\n  )", "user": "5372c830e4b06d7f452d9dff"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "530a6cbae4b02e82168697be"}, {"problem": 66, "code": "(fn gcd\n  [x y]\n  (if (= (mod x y) 0) \n    y\n    (gcd y (mod x y))))", "user": "52561295e4b0541d1855ba03"}, {"problem": 66, "code": "(fn [x y]\n  (first (drop-while #(or (not= (rem x %) 0) (not= (rem y %) 0))\n              (reverse (range (inc (min x y)))))))", "user": "541709b0e4b01498b1a71a06"}, {"problem": 66, "code": "(fn gcd [x y] (let [frctn (/ x y)] (if (integer? frctn) y (/ x (numerator frctn)))))", "user": "542c1f73e4b0dad94371f29d"}, {"problem": 66, "code": "(fn [x y]                 ; binary method to find gcd - grates common divider\n     (loop [a x b y d 1]\n        (if (= b 0)\n          (* a d)  ;;  result\n          (if (and (even? a) (even? b))\n            (recur (/ a 2) (/ b 2) (* d 2))\n            (if (and (even? a) (odd? b)) \n              (recur (/ a 2) b d)\n              (if (and (odd? a) (even? b))\n                (recur a (/ b 2) d)\n                (if (> a b )\n                  (recur b (/ (- a b) 2) d)\n                  (recur a (/ (- b a) 2) d))))))))", "user": "52d24f60e4b099d49816f0a8"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [c (mod a b)]\n    (if (= 0 c)\n      b\n      (gcd b c))))", "user": "52f8b86de4b047fd55836fdb"}, {"problem": 66, "code": "(fn [n1 n2]\n  (let [d (if (> n2 n1)\n            (- n2 n1)\n            (- n1 n2)\n            )\n        ]\n    (loop [de d]\n      (if (and (= 0 (rem n1 de))\n               (= 0 (rem n2 de)))\n        de\n        (recur (dec de)))\n      )))", "user": "5412646de4b01498b1a719d4"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [g (max a b)\n        l (min a b)]\n    (if (pos? b)\n      (recur (- g l) l)\n      g)))", "user": "543f854fe4b032a45b86935b"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond (= a b) a\n        (> a b) (gcd (- a b) b)\n        :else (gcd (- b a) a)))", "user": "540e0637e4b0addc1aec6717"}, {"problem": 66, "code": "(fn gcd [x y]\n  (if (zero? y) x\n    (gcd y (rem x y))))", "user": "54448e84e4b032a45b869393"}, {"problem": 66, "code": "(fn [v1 v2]\n  (letfn [(func [m n]\n                (if (zero? (mod m n))\n                  n\n                  (func n (mod m n))))]\n    (if (> v1 v2)\n      (func v1 v2)\n      (func v2 v1))))", "user": "533a399de4b0e30313ee6cb9"}, {"problem": 66, "code": "(fn gcd [x y] (if (= y 0) x (if (> x y) (gcd y (mod x y)) (gcd x (mod y x)))))", "user": "5441f5e8e4b032a45b869375"}, {"problem": 66, "code": "(fn gcd [a b] \n  (if (= b 0)\n    a\n    (gcd b (mod a b))\n  )\n)", "user": "54078851e4b0addc1aec66bd"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5447e08ce4b032a45b8693c3"}, {"problem": 66, "code": "(fn [a b]\n   (if (< a b)\n     (recur b a) \n     (if (zero? b)\n       a\n       (recur b (rem a b)))))", "user": "51bd255ce4b0df1216cefd94"}, {"problem": 66, "code": "#(loop [a % b %2]\n   (if-not (= a b)\n     (recur (- (max a b) (min a b)) (min a b))\n     a))", "user": "54349368e4b0b6b47310fcf1"}, {"problem": 66, "code": "(fn [n m]\n   (let [tmp (min n m)]\n     (loop [idx 2 ret tmp]\n       (if (and (zero? (rem n ret))\n                (zero? (rem m ret)))\n         ret\n         (recur (inc idx) (/ tmp idx))))))", "user": "5370d152e4b0fc7073fd6e9d"}, {"problem": 66, "code": "(fn gcd [u v]\n  (cond\n    (and (zero? u) (zero? v)) 0\n    (zero? u) u\n    (zero? v) v\n    (= u v) u\n    (and (even? u) (even? v)) (bit-shift-left (gcd (bit-shift-right u 1) (bit-shift-right v 1)) 1)\n    (even? u) (gcd (bit-shift-right u 1) v)\n    (even? v) (gcd u (bit-shift-right v 1))\n    :else (if (>= u v) (gcd (/ (- u v) 2) v) (gcd (/ (- v u) 2) u))))", "user": "5122925ae4b068a9582e656d"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [r (rem a b)]\n    (if (= r 0)\n      b\n      (recur b r))))", "user": "541168dee4b01498b1a719c3"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? (mod a b))\n    b\n    (recur b (mod a b))))", "user": "54125eeee4b01498b1a719d3"}, {"problem": 66, "code": "(fn gcd [x y] (if (zero? y) x (gcd y (mod x y))))", "user": "544b9df2e4b0e39780006968"}, {"problem": 66, "code": "(fn [a b]\n  (loop [x (min a b) \n         y (max a b)]\n    (if (zero? (rem y x)) x\n      (recur (rem y x) x))))", "user": "4e526cc4535d302ef430da74"}, {"problem": 66, "code": ";euler\n  (fn [k-start m-start]\n    (loop [k k-start m m-start]\n      (cond (= k m) k\n            (> k m) (recur (- k m) m)\n            :else (recur m (- m k)))))", "user": "54468fd3e4b032a45b8693b2"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "53322cece4b019098a6f8b73"}, {"problem": 66, "code": "(fn [a b]\n  (loop [i (min a b) lo (min a b) hi (max a b)]\n    (if (= i 1)\n      i\n      (if (= 0 (+ (rem lo i) (rem hi i)))\n        i\n        (recur (dec i) lo hi)\n))))", "user": "54524afbe4b0e397800069bc"}, {"problem": 66, "code": "(fn gcd[a b](if (== b 0) a (gcd b (mod a b))))", "user": "5457e5f1e4b01be26fd74613"}, {"problem": 66, "code": "#(loop [a %1\n        b %2]\n   (if (zero? b)\n     a\n     (recur b (mod a b))))", "user": "54194782e4b01498b1a71a29"}, {"problem": 66, "code": "(fn gcd [a b]\n   (if (= 0 b)\n     a\n     (gcd b (mod a b))))", "user": "52c45ac8e4b0c2d177d620d9"}, {"problem": 66, "code": "#(first (for [x (reverse (range 1 (inc (min % %2)))) :when (= 0 (mod % x) (mod %2 x))] x))", "user": "544fbabce4b0e39780006999"}, {"problem": 66, "code": "(fn gcd [x y]  (if (= (mod x y) 0) y (recur y (mod x y))))", "user": "54512df2e4b0e397800069ae"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond (< a b) (gcd b a)\n        (or (= b 0) (= a 1)) a\n        :else (gcd b (mod a b))))", "user": "5414b7c4e4b01498b1a719ed"}, {"problem": 66, "code": "(fn gcd [x1 x2] \n  (if (zero? x2) \n    x1\n    (recur x2 (mod x1 x2))))", "user": "5392bfdee4b0b51d73faaeb2"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b) a (gcd b (rem a b))))", "user": "544cf5d7e4b0e39780006977"}, {"problem": 66, "code": "(fn [x y]\n   (let [dx (apply sorted-set (filter #(= 0 (rem x %)) (range 1 (inc x))))\n          dy (apply sorted-set (filter #(= 0 (rem y %)) (range 1 (inc y))))\n          cd (clojure.set/intersection dx dy)]\n      (last cd)))", "user": "50ed8fd1e4b06330c1f87c3f"}, {"problem": 66, "code": ";determine numbers that evenly divide a and then compare to b\n(fn [& args]\n  (loop [n (first args)\n         divisors (range 1 (inc n))\n         remaining (rest args)]\n    (if (nil? n)\n      (last divisors)\n      (recur (first remaining) (filter #(= (rem n %1) 0) divisors) (rest remaining)))))", "user": "54580586e4b01be26fd74616"}, {"problem": 66, "code": "(fn gcd [n m]\n  (if (= 0 (* n m))\n    (+ n m)\n   \t(gcd (min m n) (mod (max m n) (min m n)))))", "user": "545801f6e4b01be26fd74615"}, {"problem": 66, "code": "(fn \n  [a b]\n\n  (apply max\n         (for [i (range 1 (max a b))] (if (and (zero? (mod a i)) (zero? (mod b i))) i 0))))", "user": "53e3e852e4b036ad0777e407"}, {"problem": 66, "code": "(fn nwd [x y] (if (= y 0) x (nwd y (rem x y))))", "user": "544e1794e4b0e39780006980"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5460f59ce4b01be26fd74695"}, {"problem": 66, "code": "(fn [a b]\n  ((fn r [d x y] (if (and\n       (= (mod x d) 0)\n       (= (mod y d) 0))\n    d\n    (r (dec d) x y))) (min a b) a b))", "user": "5446ebc2e4b032a45b8693b8"}, {"problem": 66, "code": "(fn [a b] (first (filter #(and (= (mod a %) 0) (= (mod b %) 0)) (reverse (range 1 (inc (min b a) ))))))", "user": "5461368ce4b01be26fd7469b"}, {"problem": 66, "code": "(fn [a b]\n  (let [a' (max a b)\n        b' (min a b)]\n    (if (zero? (rem a' b'))\n      b'\n      (recur b' (rem a' b')))))", "user": "4fdb881ee4b05e33b9224f5e"}, {"problem": 66, "code": "(fn my-gcd   \n  [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "53b85932e4b047364c0444db"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (if (= b 0)\n    a\n    (gcd b (mod a b))))", "user": "526e1bd0e4b03e8d9a4a730b"}, {"problem": 66, "code": "(fn gcd [a-in b-in]\n  (loop [a (min a-in b-in)\n         b (max a-in b-in)]\n    (cond (zero? b)\n          a\n          \n          true\n          (recur b (mod a b)))))", "user": "5461c402e4b01be26fd746a6"}, {"problem": 66, "code": "(fn [a b] (loop [div a n b]\n   (if (= (mod n div) 0)\n     div\n     (recur (mod n div) div))))", "user": "5367bc60e4b0243289761e81"}, {"problem": 66, "code": "#(loop [a % b %2] (cond (= a b) a (> a b) (recur (- a b) b) :else (recur a (- b a))))", "user": "5417bc50e4b01498b1a71a0f"}, {"problem": 66, "code": "(fn greatest-common-divider [a b] \n  (if (= b 0)\n      a\n      (greatest-common-divider b (rem a b))))", "user": "544257b4e4b032a45b869379"}, {"problem": 66, "code": "(fn gcd [a b] (if (= b 0) a (gcd b (rem a b))))", "user": "5465712ee4b01be26fd746dc"}, {"problem": 66, "code": "(fn [a b] (->> (min a b) inc (range 1) reverse (some #(when (= 0 (mod a %) (mod b %)) %))))", "user": "500e6c4ee4b04a05d36fcc05"}, {"problem": 66, "code": "(fn [& args]\n  (let [smallest (apply min args)\n        divisor? (fn [x] (every? #(zero? (rem % x)) args))\n        possible-divisors (range 1 (inc smallest))]\n    (last (filter divisor? possible-divisors))))", "user": "4ecb1641535d6d7199dd370e"}, {"problem": 66, "code": "(fn pgcd[a b]\n  ( if (> b a)\n    ( pgcd b a)\n    ( if (= 0 b)\n      a\n      ( pgcd (- a b) b))))", "user": "54651ef5e4b01be26fd746d5"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (mod a b))))", "user": "54651faee4b01be26fd746d6"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n   (= a b) a\n   (> a b) (gcd (- a b) b)\n   (< a b) (gcd a (- b a))))", "user": "54651982e4b01be26fd746d4"}, {"problem": 66, "code": "(fn gcd [a b] (if (= b 0) a (gcd b (rem a b))))", "user": "54485727e4b032a45b8693c6"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (mod a b))))", "user": "5136f659e4b04059df19f2fd"}, {"problem": 66, "code": "(fn gcd [x y]\n  (if (zero? y)\n    x (recur y (mod x y))))", "user": "52d84ea7e4b09f7907dd1390"}, {"problem": 66, "code": "(fn gcd \n  [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "546c1b2ce4b00cfc9eacc174"}, {"problem": 66, "code": "(fn [a b] \n  (if (= 0 b) a (recur b (mod a b))))", "user": "5458a729e4b01be26fd74622"}, {"problem": 66, "code": "(fn [x y](\n          if (= y 0) x (recur y (mod x y)))\n  )", "user": "546280d8e4b01be26fd746b0"}, {"problem": 66, "code": "(fn [a  b ]\n  (cond (= a b) a\n        (> a b) (recur (- a b) b)\n        :else (recur a (- b a))))", "user": "546176e7e4b01be26fd746a2"}, {"problem": 66, "code": "(fn [n m]\n  (loop [d n]\n    (if (and (= (rem n d) 0) (= (rem m d) 0))\n      d\n      (recur (dec d)))))", "user": "546c4c5fe4b00cfc9eacc178"}, {"problem": 66, "code": "(fn gcd [x y]\n\t(let [smaller (min x y)\n\t\t    greater (max x y)]\n\t\t(if (= (mod greater smaller) 0)\n\t\t\t(min y x)\n\t\t\t(gcd x (mod greater smaller))\n\t)))", "user": "5252b59de4b0541d1855b8cf"}, {"problem": 66, "code": "(fn gcd [a b] \n  (cond\n   (< a b) (gcd b a)\n   (= b 1) 1\n   (= a b) a\n   :else (gcd (- a b) b)))", "user": "5454b84ce4b0e397800069d9"}, {"problem": 66, "code": "#(apply   \n  (fn gdc [a b]\n    (let [r (mod a b)]\n      (cond\n        (= 0 r) b\n        (= 1 r) 1\n        :else (gdc b r))))\n  ((fn [x y]\n    (if-let [z (> x y)]\n      [x y]\n      [y x])) %1 %2))", "user": "540e8d13e4b0addc1aec671e"}, {"problem": 66, "code": "#(. (BigInteger/valueOf %1) (gcd (BigInteger/valueOf %2)))", "user": "544e9022e4b0e3978000698b"}, {"problem": 66, "code": "(fn\n  [a b]\n    (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "543bb568e4b032a45b869334"}, {"problem": 66, "code": "(fn [x y] \n      (loop [n (if (< x y) x y)]\n        (if (and (= 0 (mod x n)) (= 0 (mod y n)))\n          n\n          (recur (- n 1)))\n      )\n   )", "user": "52149e21e4b0961f15ac4d94"}, {"problem": 66, "code": "(fn func\n  ([x y] (func x y (min x y)))\n  ([x y divider] (if (and (= 0 (rem x divider)) (= 0 (rem y divider))) divider (func x y (dec divider)) ))\n )", "user": "5461873de4b01be26fd746a3"}, {"problem": 66, "code": "(fn y [q m] \n  (let [r (mod q m)]\n(if (= 0 r)\n   m\n  (y m r)  \n))\n)", "user": "5464a536e4b01be26fd746cf"}, {"problem": 66, "code": "(fn [num1 num2]\n  (loop [a num1 b num2]\n    (if (= 0 b) a\n      \t\t\t(recur b (rem a b)))))", "user": "541cf6dfe4b01498b1a71a7a"}, {"problem": 66, "code": "(fn gcd[x y]\n  (loop [x x y y]\n    (cond (= x y) x\n          (< y x) (recur y (- x y))\n          :else (recur x (- y x)))))", "user": "5472cba1e4b094393f72dd7a"}, {"problem": 66, "code": "(fn gdc [a b]\n  (let [[a b] [(min a b) (max a b)]]\n    (if (= 0 (mod a b))\n      a\n      (recur a (- b a)))))", "user": "53ea5851e4b036ad0777e4e4"}, {"problem": 66, "code": "(fn [& args]\n  (->> args\n       (map (fn [n]\n              (filter #(zero? (mod n %))\n                      (range 1 (inc n)))))\n       (map set)\n       (apply clojure.set/intersection)\n       (apply max)))", "user": "547584d9e4b0c51c1f4d729b"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b) a (gcd b (mod a b))))", "user": "546c1f73e4b00cfc9eacc175"}, {"problem": 66, "code": "(fn [num1 num2]\n  (loop [x (min num1 num2)]\n        (if (and (= 0 (mod num1 x))\n                 (= 0 (mod num2 x)))\n            x\n            (recur (dec x))\n          ))\n  )", "user": "54084089e4b0addc1aec66c7"}, {"problem": 66, "code": "#(let [divisor (min % %2) dividend (max % %2) quotient (quot dividend divisor) remainder (rem dividend divisor)]\n        (if (= 0 remainder)\n          divisor\n          (rem divisor remainder)))", "user": "54696e4ce4b00cfc9eacc147"}, {"problem": 66, "code": "(fn gcd [a b]\n\t(cond (= a b) a\n\t\t  (> a b) (gcd (- a b) b)\n\t\t  (< a b) (gcd a (- b a))))", "user": "53703287e4b0fc7073fd6e8f"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0) a (gcd b (mod a b))))", "user": "546d41bde4b00cfc9eacc18c"}, {"problem": 66, "code": "(fn gcd [a b] (if (= 0 b) a (gcd b (mod a b))))", "user": "53c1b787e4b00fb29b221266"}, {"problem": 66, "code": "#(condp = %&\n   [2 4] 2\n   [10 5] 5\n   [5 7] 1\n   [1023 858] 33)", "user": "53572176e4b04ce2eb3ed276"}, {"problem": 66, "code": "(fn [x y]\n  (loop [x x\n         y y]\n    (if (zero? y)\n      x\n      (recur y (rem x y)))))", "user": "5479c58de4b0c51c1f4d72c7"}, {"problem": 66, "code": "#((fn euclid [x y](let [z (mod x y)](if (= z 0)y(euclid y z)))) (max %1 %2)(min %1 %2))", "user": "545537c1e4b0e397800069dd"}, {"problem": 66, "code": "(fn gcd [fst snd] (if (= fst snd) fst (\n                                       \n                          if (< fst snd)             \n                          (gcd fst (- snd fst))  \n                          (gcd (- fst snd) snd)   \n                                       )))", "user": "5471f090e4b094393f72dd6e"}, {"problem": 66, "code": "(fn ggt\r\n  ([a b] \r\n    (if (< a b) (ggt a b a) (ggt b a b)))\r\n  ([a b k]\r\n    (if (and (= (mod a k) 0) (= (mod b k) 0))\r\n      k \r\n      (recur a b (dec k)))))", "user": "5470699ae4b00cfc9eacc1b6"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "user": "539ddf25e4b0b51d73faaf3e"}, {"problem": 66, "code": "(fn [a b] (last(filter #(= (mod a %) (mod b %) 0) (range 1 (inc(min a b))))))", "user": "545d5c3be4b01be26fd7466d"}, {"problem": 66, "code": "(fn [x y]\n  (loop [a (max x y) \n         b (min x y)]\n    (if (= 0 (mod a b))\n      b\n      (recur b (mod a b)))))", "user": "546e4ab8e4b00cfc9eacc19c"}, {"problem": 66, "code": "(fn gcd [a b]\n    (if (zero? b)\n      a\n      (gcd b (mod a b)))\n    )", "user": "53613db8e4b0243289761e41"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (mod a b))))", "user": "5478e57de4b0c51c1f4d72c1"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (< a b)\n    (recur b a)\n    (if (zero? b)\n      a\n      (recur b (mod a b)))))", "user": "541f5b37e4b01498b1a71a97"}, {"problem": 66, "code": "(fn\n  [x y]\n  (if (= 0 y)\n      x\n      (recur y (mod x y))))", "user": "547adcb0e4b0c51c1f4d72cf"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "545f737ce4b01be26fd74688"}, {"problem": 66, "code": "(fn [a b] (last (filter (fn [i] (and (= 0 (mod a i)) (= 0 (mod b i)))) (range 1 (inc (max a b))))))", "user": "547d8e93e4b0c51c1f4d72f4"}, {"problem": 66, "code": "#(loop [x %\n       y %2\n       z (min x y)]\n  (if (and \n       (= 0 (rem x z)) \n       (= 0 (rem y z)))\n    z\n    (recur x y (dec z))))", "user": "52b9cfb9e4b07a9af57922c5"}, {"problem": 66, "code": "(fn euclidGCD [a b]\n  (loop [mn (min a b)\n         mx (max a b)\n         r (rem mx mn)]\n    (if (zero? r)\n      mn\n      (recur r mn (rem mn r)))))", "user": "547ad587e4b0c51c1f4d72ce"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [[a b] (sort > [a b])\n        r (rem a b)]\n    (if (zero? r) b (gcd b r))))", "user": "54357066e4b0b6b47310fcfd"}, {"problem": 66, "code": "#(if (zero? %2)\n   %1\n   (recur %2 (mod %1 %2)))", "user": "54577fefe4b01be26fd7460d"}, {"problem": 66, "code": "(fn gcd [a b] (if (= b 0) a (gcd b (mod a b))))", "user": "5463fbbde4b01be26fd746ca"}, {"problem": 66, "code": "#(loop [a (min % %2)\n                    b (max % %2)]\n               (if (zero? (rem b a))\n                 a\n                 (recur (rem b a) a)))", "user": "547d66a1e4b0c51c1f4d72f2"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n      a\n      (gcd b (mod a b))))", "user": "5478c4fee4b0c51c1f4d72c0"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5484143de4b0e286459a1197"}, {"problem": 66, "code": "(fn mygcd [a b]\n  (let [x (max a b)\n        y (min a b) \n        m (mod x y)]\n    (if (zero? m)\n      y\n      (mygcd m y))))", "user": "4e41a04e535dc968683fc49e"}, {"problem": 66, "code": "(fn [x y] (if (zero? y) x (recur y (mod x y))))", "user": "5476d6cae4b0c51c1f4d72aa"}, {"problem": 66, "code": "(fn [a b]\n  (let [hi (max a b)\n      \tlo (min a b)\n        re (rem hi lo)]\n\t(if (= 0 re)\n      lo\n      (recur re lo))))", "user": "54848141e4b0e286459a119e"}, {"problem": 66, "code": "(fn gcd [x y] (if (= x 0) y (gcd (mod y x) x) ))", "user": "548485f5e4b0e286459a119f"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))))", "user": "513facf5e4b00f13ea1bd892"}, {"problem": 66, "code": "(fn gcd [x y] \n  (if (zero? y)\n    x\n    (recur y (mod x y))))", "user": "54857e3be4b0e286459a11ad"}, {"problem": 66, "code": "(fn [v1 v2]\n  (let [x (filter #(and (zero? (rem v1 %)) (zero?(rem v2 %))) (range 1 (inc (min v1 v2))))]\n    (-> x sort last)))", "user": "5486adf7e4b0e286459a11be"}, {"problem": 66, "code": "(fn greatest-divisor [a b]\n  (let [c  (max a b)\n        ds (reverse (range 1 c))]\n    (first (filter #(and\n             (= (rem a %) 0)\n             (= (rem b %) 0))\n              ds))))", "user": "547e3846e4b0c51c1f4d7302"}, {"problem": 66, "code": "(fn [x y] \n  (if (zero? (rem x y))\n    y\n    (recur y (rem x y))))", "user": "528c381ce4b0239c8a67aeb2"}, {"problem": 66, "code": "(fn [a b] (if (= 0 b) a (recur b (mod a b))))", "user": "5472d919e4b094393f72dd7b"}, {"problem": 66, "code": "(fn [a b]\n   (loop [a a b b]\n     (if (zero? b)\n       a\n       (recur b (mod a b)))))", "user": "547fbe01e4b0c51c1f4d7321"}, {"problem": 66, "code": "#(if (= 0 %2) % (recur %2 (mod % %2)))", "user": "5466aabbe4b01be26fd746e8"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (let [[a b] (sort [a b])\n        [a b] [(rem b a) a]]\n    (if (= 0 a)\n      b\n      (gcd a b))\n    ))", "user": "526143b7e4b03e8d9a4a705a"}, {"problem": 66, "code": "(fn gcf [a b]\n  (cond (= 0 b) a\n        (= 0 a) b\n        :else (gcf b (mod a b))))", "user": "5488872ee4b0e286459a11d3"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "54856d54e4b0e286459a11aa"}, {"problem": 66, "code": "(fn my-gcd [a b ]\n  (letfn [(abs [n]\n               (cond \n                (neg? n) (- n)\n                :else n))]\n  (if (or (not (integer? a)) (not (integer? b)))\n    (throw (IllegalArgumentException. \"gcd requires two integers\")))\n  (loop [a (abs a) \n         b (abs b)]\n    (if (zero? b) \n      a\n      (recur b (mod a b))))))", "user": "53b7aa6ce4b047364c0444d1"}, {"problem": 66, "code": "(fn [a b]\n  (let \n    [get-divisors (fn [n] (filter \n                           #(= 0 (mod n %)) \n                           (range 1 (+ n 1))))\n     a-divs (set (get-divisors a))\n     b-divs (set (get-divisors b))\n     intersection (fn [a b]\n                    (set (filter #(contains? b %) a)))\n     common (intersection a-divs b-divs)]\n    (apply max common)))", "user": "5483d59fe4b0e286459a1194"}, {"problem": 66, "code": "(fn [n1 n2]\n  (loop [a n1 b n2]\n    (if (= a b)\n      a\n      (if (> a b)\n        (recur (- a b) b)\n        (recur a (- b a))))))", "user": "5188c249e4b0bdff0e072d54"}, {"problem": 66, "code": "(fn gcd [a b] (if (= b 0)\n              a\n              (gcd b (mod a b))))", "user": "4f47d84fe4b0d56e7bb92bc3"}, {"problem": 66, "code": "(fn gcd [x y]\n   (if (= y 0)\n     x\n     (gcd y (mod x y))))", "user": "53b12c76e4b047364c04448a"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [m (min a b)\n        x (for [n (range 1 (+ 1 m))\n               :when (and (= (mod a n) 0) (= (mod b n) 0))]\n            n)]\n    (last x)))", "user": "542c026ae4b0dad94371f29a"}, {"problem": 66, "code": "#(loop [a % b %2] \n     (if (zero? (rem a b))\n       b\n       (recur b (rem a b))))", "user": "5470b3d0e4b00cfc9eacc1bb"}, {"problem": 66, "code": "(fn gcd [x y]\n  (let [bigger (if (> x y)\n                   x\n                   y)]\n    (loop [possible bigger]\n      (if (= 0 (mod x possible)\n               (mod y possible))\n        possible\n        (recur (dec possible))))))", "user": "50f3bd98e4b041536e2eca3a"}, {"problem": 66, "code": "(fn [a b] (loop [a' a b' b] (if (= 0 b') a' (recur b' (mod a' b')))))", "user": "4fbfbd4fe4b081705acca31c"}, {"problem": 66, "code": "(fn [a b]\n  (cond\n   (= a b) a\n   (< a b) (recur (- b a) a)\n   :else (recur (- a b) b)))", "user": "4daee8e9edd6309eace4d166"}, {"problem": 66, "code": "(fn [a b]\n  (loop [x (min a b)\n         y (max a b)]\n    (if (zero? x) y\n      (let [dif (- y x)]\n        (recur (min x dif) (max x dif))))))", "user": "54903056e4b0b312c081ff2e"}, {"problem": 66, "code": "(fn [x y] (first (filter #(and (zero? (rem x %1)) (zero? (rem y %1))) \n                         (reverse (range 1 (inc (min x y)))))))", "user": "51d26b0ae4b0d13b04db0d97"}, {"problem": 66, "code": "#(if (zero? %2) % (recur %2 (mod % %2)))", "user": "51c611c4e4b03a28d42333bf"}, {"problem": 66, "code": "(fn [a b]\n  (loop [x (if (> a b) (list b a) (list a b))]\n    (let [d (rem (second x) (first x))]\n      (if (= d 0) (first x) (recur (conj x d))))))", "user": "53bcdd41e4b0d9a98559a6c0"}, {"problem": 66, "code": "(fn gcd [x y]\n        (cond (< x y) (gcd y x)\n              (zero? (mod x y)) y\n              :else (gcd y (- x y))))", "user": "5455510fe4b0e397800069df"}, {"problem": 66, "code": "(fn foo [a b] (let [a' (min a b) b' (max a b)]\n     (loop [r-2 a' r-1 b']\n     \t(if (zero? r-1)\n     \t\tr-2\n     \t\t(recur r-1 (rem r-2 r-1))\n) \n)\n     ))", "user": "548f5086e4b0e286459a1239"}, {"problem": 66, "code": "(fn [& a]\n   (loop [p (sort a)]\n     (let [m (mod (first p) (second p))]\n       (if (= 0 m) (second p) (recur (list (second p) m)))\n       )))", "user": "5471f2fbe4b094393f72dd70"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (rem a b))))", "user": "5317d78ee4b08068f379ed63"}, {"problem": 66, "code": "(fn gcd [m n] (if (= m n) m (gcd (max (- m n) (- n m)) (min m n))))", "user": "54965534e4b0b312c081ff65"}, {"problem": 66, "code": "(fn euklid [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))\n   )\n  )", "user": "54975e99e4b0b312c081ff72"}, {"problem": 66, "code": "#(if (= 0 %2) %1 (recur %2 (mod %1 %2)))", "user": "535f9a5ce4b04ce2eb3ed2de"}, {"problem": 66, "code": "(fn gcd [a b] (if (= b 0) a (gcd b (mod a b))))", "user": "536e5b68e4b0fc7073fd6e6d"}, {"problem": 66, "code": "#(letfn [(common-factor? [a b x] (= 0 (rem a x) (rem b x)))]\n(apply max (filter (partial common-factor? % %2) (range 1 (inc (min % %2))))))", "user": "52e16face4b09f7907dd1421"}, {"problem": 66, "code": "(fn [x y]\n  (if (zero? y)\n    x\n    (recur y (mod x y))))", "user": "54926752e4b0b312c081ff44"}, {"problem": 66, "code": "(fn [aa bb] (loop [a (if (> aa bb) aa bb)\n                     b (if (> aa bb) bb aa)]\n                (if (zero? b) \n                  a\n                  (recur b (mod a b)))\n                ))", "user": "549375e4e4b0b312c081ff4e"}, {"problem": 66, "code": "(fn [x y]\n  (reduce (fn [div n] (if (= 0 (mod x n) (mod y n)) n div)) (range 1 (max x y))))", "user": "548f37c7e4b0e286459a1234"}, {"problem": 66, "code": "(fn g [a b]\n  (if (= b 0)\n      a\n      (g b (mod a b))))", "user": "548fa2dfe4b0e286459a1240"}, {"problem": 66, "code": "(fn [x y]\n         (some #(when ( and (= 0 (rem x %)) (= 0 (rem y %))) %)  (range (min x y) 0 -1)))", "user": "512b07f7e4b078b06821febb"}, {"problem": 66, "code": "(fn uc [a b] (let [ val (sort (list a b)) ] \n\t\t      (let [x (first val) y (second val)]\n\t\t\t(if (= 0 x) y (recur (rem y x) x)))))", "user": "52457931e4b08ba239308107"}, {"problem": 66, "code": "(fn gcd [x y]\n  (->> (range 1 (inc (min x y)))\n       (filter #(and (= 0 (mod y %)) (= 0 (mod x %))) )\n       (apply max)))", "user": "5360f043e4b0243289761e3c"}, {"problem": 66, "code": "#(let [n (min %1 %2)\n       m (max %1 %2)]\n  (apply\n    max\n    (filter\n      (fn [x]\n        (and (= (rem m x) 0)\n             (= (rem n x) 0)))\n      (range 1 (inc n)))))", "user": "549e5e52e4b0f3d1d8e70f9e"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (mod a b))))", "user": "549c8bbde4b0f3d1d8e70f8c"}, {"problem": 66, "code": "(fn p66-gcd [a b]\n  (last (for [x (range 1 (inc a))\n      :when (and\n              (<= x b)\n              (= 0 (mod a x))\n              (= 0 (mod b x)))]\n    x)))", "user": "543b12cce4b032a45b86932a"}, {"problem": 66, "code": ";(fn gcd [m n]\n;  (if (zero? n)\n;    m\n;    (gcd n (mod m n))))\n; is not strictly correct because it can return a negative result,\n; example: (gcd 33 -22) => -11. rem has the same problem with some\n; inputs\n\n\n(fn [m n]\n  (letfn [(gcd [m n]\n            (if (zero? n)\n              m\n              (recur n (mod m n))))]\n    (gcd (Math/abs m) (Math/abs n))))", "user": "53576356e4b04ce2eb3ed27a"}, {"problem": 66, "code": "(fn [v w] (some #(when (and (zero? (rem v %)) (zero? (rem w %))) %) (range (min v w) 0 -1)))", "user": "549c3e0ce4b0f3d1d8e70f87"}, {"problem": 66, "code": "(fn [x y]\n    (apply max\n           (filter #(and (= 0 (rem x %))\n                         (= 0 (rem y %)))\n                   (range 1 (max x y)))))", "user": "4f9b3532e4b0dcca54ed6d13"}, {"problem": 66, "code": "#(loop [num %1 div %2]\n   (if (= 0 (rem num div))\n     div\n     (recur div (rem num div))))", "user": "542c44f8e4b0dad94371f2a1"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))))", "user": "4e7e241a535db169f9c79705"}, {"problem": 66, "code": "#(first (drop-while (fn [x] (not= (rem %1 x) (rem %2 x) 0)) (iterate dec (min %1 %2))))", "user": "54769c7ae4b0c51c1f4d72a8"}, {"problem": 66, "code": "(fn [a b]\n  (let [n (mod a b)]\n    (if (= n 0)\n      b\n      (recur b n))))", "user": "5455c2f3e4b080a794c2c87d"}, {"problem": 66, "code": "(fn [a b]\n (cond (< a b) (recur b a)\n       (= a b) a\n       (> a b)\n        (let [f #(apply % [b (- a b)])]\n         (recur (f max) (f min)))\n )\n)", "user": "549a999be4b0f3d1d8e70f6f"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "549a176ce4b0f3d1d8e70f69"}, {"problem": 66, "code": "(fn naive-gcd [m n]\n  (first (filter #(= 0 (mod m %) (mod n %)) (range (min m n) 0 -1))))", "user": "545e9cf1e4b01be26fd7467f"}, {"problem": 66, "code": "(fn gcd [x,y] \n  (if (= x y) \n    x \n    (if (> x y) \n      (gcd (- x y) y) \n      (gcd x (- y x))\n      )\n    )\n  )", "user": "54a1d643e4b09f271ff37c50"}, {"problem": 66, "code": "(fn gcd [a b] \n  (if (< a b)\n    (gcd b a)\n  \t(loop [a a b b] \n      (let [q (/ a b)\n            r (rem a b)]\n    \t(if (or (zero? r) (= a (+ (* q b) r)))\n          \tb\n          \t(recur b r))))))", "user": "53fe1b42e4b0de5c418485f1"}, {"problem": 66, "code": "(fn gcd [a b] \n  (cond (= b 0) a\n        :else (gcd b (rem a b))))", "user": "52b9e920e4b07a9af57922c9"}, {"problem": 66, "code": "(fn gcd [& xs] \n  (loop [[a b] (sort xs) r (mod a b)]\n    (if (= r 0) \n      b\n      (recur [b r] (mod b r)))))", "user": "4f1ef6a0535d64f60314649b"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "542dc7c7e4b0dad94371f2bd"}, {"problem": 66, "code": "(fn my-gcd [x y]\n  (loop [divisor 1\n         gcd divisor]\n    (if (= divisor (max x y))\n      gcd\n      (if (and (= 0 (mod x divisor)) (= 0 (mod y divisor)))\n        (recur (inc divisor) divisor)\n        (recur (inc divisor) gcd)))))", "user": "54a31fdae4b09f271ff37c64"}, {"problem": 66, "code": "#(loop [a (max % %2)\n        b (min % %2)]\n   (let [c (quot a b)\n         d (rem a b)]\n     (if (= d 0)\n       b\n       (recur b d))))", "user": "5499e23de4b03163384f4706"}, {"problem": 66, "code": "(fn gcd [a b]\n\n  (cond\n   (= a b) a\n   (> a b) (gcd (- a b) b)\n   :else   (gcd a (- b a))\n  )\n  \n)", "user": "54a7d707e4b09f271ff37c9b"}, {"problem": 66, "code": "(fn f [x, y] (if (= (rem x y) 0) y (f y (rem x y))))", "user": "54a7efdee4b09f271ff37c9d"}, {"problem": 66, "code": "(fn [a b] (let [m (min a b)]\n            (loop [i m]\n              (if (and (= (mod a i) 0) (= (mod b i) 0))\n                i\n                (recur (dec i))))))", "user": "53f78944e4b0de5c41848561"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "54ab6773e4b09f271ff37cc8"}, {"problem": 66, "code": "(fn [ a b ]\n   (dec \n     (last\n       (for [x (range (max a b) 1 -1)\n             :while (false?\n                      (and\n                        (== (mod a x) 0)\n                        (== (mod b x) 0)\n                      )\n             )\n             ] x\n         )\n       )\n     )\n   )", "user": "53029281e4b0d8b024fd372e"}, {"problem": 66, "code": "#(if (= 0 (rem %1 %2)) %2 (recur %2 (rem %1 %2)))", "user": "54908cc1e4b0b312c081ff32"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))\n;; http://en.wikipedia.org/wiki/Euclidean_algorithm", "user": "52e12ac5e4b09f7907dd141a"}, {"problem": 66, "code": "(fn [x1 x2]\n    (let [xmin (min x1 x2)\n          xmax (max x1 x2)]\n      (let [r (rem xmax xmin)]\n        (if (zero? r)\n          xmin\n          (recur xmin r)))))", "user": "543d89dfe4b032a45b869350"}, {"problem": 66, "code": "#(if (zero? %2)\n       %\n       (recur %2 (mod % %2)))", "user": "50ec69e0e4b04edc3377704a"}, {"problem": 66, "code": "(fn [one other]\n  (let [dif (Math/abs (- one other))]\n    (if (= dif 0)\n      one\n      (recur (min one other) dif))))", "user": "54addba9e4b09f271ff37ce9"}, {"problem": 66, "code": "(fn [a b] (if (= b 0) a (recur b (mod a b))))", "user": "54b13dbce4b09f271ff37d1c"}, {"problem": 66, "code": "(fn gcd [a b] \n  (cond \n    (> a b) (gcd (- a b) b)\n    (< a b) (gcd a (- b a))\n    :else a))", "user": "54b13a40e4b09f271ff37d1b"}, {"problem": 66, "code": "(fn [a b] \n    (if (= 0 a)\n      b\n      (recur (rem b a) a)))", "user": "54af6fb0e4b09f271ff37d08"}, {"problem": 66, "code": "(fn gcd \n  ([x y] (gcd x y (min x y)))\n  ([x y z] (if (= x 1)\n             1\n             (if (and (= 0 (mod x z)) (= 0 (mod y z)))\n               z\n               (gcd x y (dec z))))))", "user": "54ab46fee4b09f271ff37cc3"}, {"problem": 66, "code": "(fn gcd [x y] (if (= (mod x y) 0) y (gcd y (mod x y))))", "user": "54ab502fe4b09f271ff37cc4"}, {"problem": 66, "code": "(fn [a b] (letfn [(divisors [n] (into #{} (filter #(= 0 (rem n %)) (range 1 (inc n)))))] (apply max (clojure.set/intersection (divisors a) (divisors b)))))", "user": "53e3e353e4b036ad0777e406"}, {"problem": 66, "code": "(fn gcd [a b]\n  (loop [a a\n         b b]\n    (cond (= a b) a\n          (> a b) (recur (- a b) b)\n          (< a b) (recur a (- b a)))))", "user": "54ae541ae4b09f271ff37cef"}, {"problem": 66, "code": "(fn [x y]\n  (loop\n    [a x\n     b y]\n    (if (= 0 b)\n      a\n      (recur b (rem a b)))))", "user": "52cee992e4b07d0d72b27395"}, {"problem": 66, "code": "(fn f [a b]\n  (if (= b 0)\n    a\n    (f b (mod a b))))", "user": "5488537be4b0e286459a11cf"}, {"problem": 66, "code": "#(let [big (max %1 %2) small (min %1 %2) reminder (rem big small)]\n   (if (= 0 reminder)\n     small\n     (recur small reminder)))", "user": "54b2ec84e4b09f271ff37d33"}, {"problem": 66, "code": "(fn [x y]\n  (loop [dividend (if (> x y) x y)\n         divisor (if (> x y) y x)]\n    (let [remain (mod dividend divisor)]\n      (if (= 0 remain)\n        divisor\n        (recur divisor remain)))))", "user": "543c39e0e4b032a45b86933d"}, {"problem": 66, "code": "(fn [a b]\n  (let [x (max a b)\n        y (min a b)]\n    (cond (= x y) x \n          (some #{1} [x y]) 1\n          :else (recur (- x y) y))))", "user": "54b448f2e4b05787c3b1638e"}, {"problem": 66, "code": "(fn [a b] (if (= b 0) a (recur b (mod a b))))", "user": "54ad9d76e4b09f271ff37ce6"}, {"problem": 66, "code": "(fn [n1 n2]\n  (let [f (fn d-test [d]\n            (if (= 0 (+ (mod n1 d) (mod n2 d)))\n              d\n              (d-test (dec d))))]\n    (f (min n1 n2))))", "user": "5463c824e4b01be26fd746c5"}, {"problem": 66, "code": "#(let [factors (fn [n] (filter (comp zero? (partial mod n)) (map inc (range n))))]\n   (apply max (clojure.set/intersection (set (factors %1)) (set (factors %2)))))", "user": "536b9d8ae4b0243289761ebe"}, {"problem": 66, "code": "(fn [n1 n2]\n  (loop [num1 n1 num2 n2]\n    (if (= 0 (mod num1 num2))\n      num2\n      (recur num2 (mod num1 num2)))))", "user": "532902f8e4b09d4e7a9b550e"}, {"problem": 66, "code": "#(last (filter (fn [x] (= 0 (rem % x) (rem %2 x))) (range 1 (max % %2))))", "user": "52a267c6e4b04e0c58e87bef"}, {"problem": 66, "code": "(fn gcd [x y]\n  (cond\n   (> x y) (gcd y x)\n   (zero? x) y\n   :else (gcd x (- y x))))", "user": "549dd591e4b0f3d1d8e70f98"}, {"problem": 66, "code": "(fn [n1 n2]\n  (if (zero? n1)\n    n2\n    (recur (mod n2 n1) n1)))", "user": "53e3f7a8e4b036ad0777e408"}, {"problem": 66, "code": "(fn [x y] (if (zero? y) x (recur y (rem x y))))", "user": "54bad522e4b0ed20f4ff6eb8"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (gcd b (mod a b))))", "user": "549c1713e4b0f3d1d8e70f82"}, {"problem": 66, "code": "(fn gcd [a b] \n  (let [bigger (if (< a b) b a) smaller (if (< a b) a b)] \n    (if (zero? (mod bigger smaller)) \n      smaller \n      (gcd smaller (mod bigger smaller)))))", "user": "54bd3aefe4b0ed20f4ff6edb"}, {"problem": 66, "code": "(fn greatest-divisor [x y]\n  (cond \n    (= x y) x\n    (> x y) (greatest-divisor (- x y) y)\n    :else (greatest-divisor x (- y x))\n    ))", "user": "53bdae7fe4b0d9a98559a6d9"}, {"problem": 66, "code": "; gcd(a, 0) = a\n; gcd(a, b) = gcd(b, a mod b)\n; gcd(a, b, c) = gcd(gcd(a, b) c)\n\n(fn gcd [& s] (reduce (fn [a b] (if (zero? b) a (recur b (mod a b)))) s))", "user": "54bd04e7e4b0ed20f4ff6ed8"}, {"problem": 66, "code": "#(loop [a %1 b %2] (cond (= b 0) a (< a b) (recur b a) (>= a b) (recur (- a b) b)))", "user": "5485b402e4b0e286459a11b0"}, {"problem": 66, "code": "(fn [a b] \n  (apply max \n    (filter \n      (fn [x] \n        (and \n          (= (rem (max a b) x) 0)\n          (= (rem (min a b) x) 0))) (range 1 (max a b)))))", "user": "54b6c24be4b0ed20f4ff6e7c"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n   (= a b) a\n   (> a b) (gcd (- a b) b)\n   (< a b) (gcd a (- b a))))", "user": "50b42cbbe4b001349b2f4abe"}, {"problem": 66, "code": "#(loop [a %1 b %2]\n    (if (zero? b)\n      a\n      (recur b (mod a b))))", "user": "54bec835e4b0ed20f4ff6ef7"}, {"problem": 66, "code": "#(if(zero? %2)%1(recur %2(mod %1 %2)))", "user": "5481be5fe4b0e286459a1172"}, {"problem": 66, "code": "(fn f [a b]\n  (case b\n    0 a\n    (f b (mod a b))))", "user": "519e70d5e4b0acf32bc6a42c"}, {"problem": 66, "code": "(fn [a b] (if (zero? (mod a b)) b (recur b (mod a b))))", "user": "525b142fe4b0cb4875a45d05"}, {"problem": 66, "code": "(fn gcd [a b]\n  (loop [x (min a b)]\n    (if (and (= (mod a x) 0) (= (mod b x) 0))\n      x\n      (recur (dec x)))))", "user": "54b95f3de4b0ed20f4ff6eab"}, {"problem": 66, "code": "#(apply max (filter (fn [x] (= 0 (mod %1 x) (mod %2 x))) (range 1 (+ 1 (min %1 %2)))))", "user": "54be7772e4b0ed20f4ff6eea"}, {"problem": 66, "code": "(fn gcd [a b]\n    (if (> b a)\n      (gcd b a)\n      (if (= 0 b)\n        a\n        (gcd b (mod a b)))))", "user": "4f42c80ae4b0d7d3c9f3fd0f"}, {"problem": 66, "code": "#(loop [n (int (/ (max % %2) 2))]\n    (if (= n 1)\n      1\n      (if (and (= 0 (mod % n)) (= 0 (mod %2 n)))\n        n\n        (recur (- n 1))\n        )))", "user": "54b90836e4b0ed20f4ff6e9d"}, {"problem": 66, "code": "(fn [a b]\n  (cond\n   (= a b) a\n   (= a 1) 1\n   (> a b) (recur (- a b) b)\n   :else (recur a (- b a))))", "user": "54c19050e4b0ed20f4ff6f26"}, {"problem": 66, "code": "(fn [a b]\n  (cond (= a b) a\n       \t(> a b) (recur (- a b) b)\n        :else (recur a (- b a))))", "user": "510fe537e4b04c71fce993dd"}, {"problem": 66, "code": "(fn gcd[a b]\n  (if (= b 0)\n    a\n    (gcd b (rem a b))))", "user": "54b10d08e4b09f271ff37d18"}, {"problem": 66, "code": "(fn gcd [a, b]\n  (if (= 0 b)\n  \ta\n    (gcd b (mod a b))\n  )\n)", "user": "54b050cee4b09f271ff37d13"}, {"problem": 66, "code": "(fn [num1 num2]\n  (apply max (filter #(= 0 (mod num1 %) (mod num2 %)) (map inc (range (max num1 num2))))))", "user": "5235493ee4b05e80434a5064"}, {"problem": 66, "code": "(fn ! [a b]\n  (if (= b 0) a (! b (rem a b))))", "user": "54c271b9e4b045293a27f602"}, {"problem": 66, "code": "(fn gcd [x y] \n  (let [a (min x y) b (max x y)]\n   \t(if (> a 0)\n      (gcd a (- b a))\n      b\n)))", "user": "54bbe505e4b0ed20f4ff6ec5"}, {"problem": 66, "code": "(fn [num1 num2] \n  (let \n    [max-to-check (inc (min num1 num2))] \n  (reduce #(if (= 0 (rem num1 %2) (rem num2 %2)) %2 %1) \n          1 \n          (range 2 max-to-check))) )", "user": "546692aee4b01be26fd746e7"}, {"problem": 66, "code": "(fn f [x y] (->> (range (min x y))\n                   (map inc)\n                   (filter #(= 0 (mod x %) (mod y %)))\n                   (last)))", "user": "5493d908e4b0b312c081ff52"}, {"problem": 66, "code": "(fn [x y]\n  (apply max\n    (filter\n      #(and (zero? (mod x %)) (zero? (mod y %)))\n      (range 1 (max x y)))))", "user": "54c8d4a8e4b045293a27f654"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [m (mod a b)]\n    (cond (zero? m) b\n     :else (gcd b m))))", "user": "542f0a3be4b0dad94371f2cd"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "545bd22fe4b01be26fd7465a"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (> b a)\n    (recur b a)\n    (if (= b 0)\n      a\n      (recur b (mod a b)))\n    ))", "user": "54c169ade4b0ed20f4ff6f24"}, {"problem": 66, "code": "(fn [a b]\n  (let [r (rem a b)]\n    (cond (= r 0) b\n          (= r 1) 1\n          :default (recur b r))))", "user": "54acf5c7e4b09f271ff37cdd"}, {"problem": 66, "code": "(fn loo [x y]\n  (let [i (min x y) j (max x y)]\n    (cond \n     (= 0 i) j\n     :else (loo i (rem j i)))))", "user": "51e8ee6be4b07cae92c04bfd"}, {"problem": 66, "code": "(fn [a b]\n  (let [r (rem a b)]\n    (if (= 0 r)\n      b\n      (recur b r))))", "user": "54c9636fe4b045293a27f66e"}, {"problem": 66, "code": "#(letfn [(gcd [a b]\n           (if (zero? (rem a b)) b\n               (gcd b (rem a b))))]\n   (gcd %1 %2))", "user": "52950ab6e4b02ebb4ef7501a"}, {"problem": 66, "code": "(fn [a b]\n  (loop [n (min a b)]\n    (if (= 0 (mod a n) (mod b n)) n (recur (dec n)))))", "user": "5466199ce4b01be26fd746e2"}, {"problem": 66, "code": "{2 2 5 1 1023 33}", "user": "54b7f217e4b0ed20f4ff6e8f"}, {"problem": 66, "code": ";(fn gcd [a b]\n;  (if (= a 0)\n;    b\n;    (if (< a b)\n;      (gcd (mod b a) a)\n;      (gcd b a))))\n(fn gcd [a b]\n  (cond\n   (= a 0) b\n   (= b 0) a\n   :else (recur (mod b a) a)))", "user": "54ca9ca8e4b057c6fda3a265"}, {"problem": 66, "code": "(fn [n m]\n  (loop [a n\n         b m]\n\n    (if (= b 0)\n      a\n      (recur b (mod a b)))))", "user": "54bebeb9e4b0ed20f4ff6ef4"}, {"problem": 66, "code": "(fn[a b] (loop[x (max a b) y (min a b)] (if (= 0 (rem x y)) y (recur y (rem x y)) ) ))", "user": "54aa665fe4b09f271ff37cb8"}, {"problem": 66, "code": "(fn [a b] (cond (= a 0) b (= b 0) a (> a b) (recur (rem a b) b) :else (recur a (rem b a))))", "user": "54c641f8e4b045293a27f628"}, {"problem": 66, "code": "#(if (= %2 0) % (recur %2 (rem % %2)))", "user": "54cbb0fde4b057c6fda3a27b"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b) a (recur b (mod a b))))", "user": "541b1f25e4b01498b1a71a63"}, {"problem": 66, "code": "(fn gcd [a b] (if (= 0 b) a (gcd b (mod a b))))", "user": "4ea03f70535d7eef308072a1"}, {"problem": 66, "code": "(fn f[n1 n2]\n  ((fn f2 [n1 n2 curr]\n    (if (and (= 0 (mod n1 curr)) (= 0 (mod n2 curr))) curr\n      (f2 n1 n2 (dec curr))))\n   n1 n2 (min n1 n2)))", "user": "54ce3790e4b057c6fda3a2ab"}, {"problem": 66, "code": "(fn [n1 n2]\n  (loop [big n1 small n2]\n    (if (zero? small)\n      big\n      (recur small (mod big small)))))", "user": "536046a9e4b063bf7a5f8fe1"}, {"problem": 66, "code": "(fn gcdiv [& nums]\n  (first (for [curr (range (apply min nums) 0 -1)\n               :when (every? #(zero? (mod % curr)) nums)]\n           curr))\n  )", "user": "54c9f165e4b045293a27f687"}, {"problem": 66, "code": "(fn [x y] (let [smaller (min x y) bigger (max x y) rem (mod bigger smaller)] (if (zero? rem) smaller (recur smaller rem))))", "user": "54246d6de4b01498b1a71aec"}, {"problem": 66, "code": "(fn [a b] \n  (reduce max \n          (filter #(and \n                    (= 0 (mod a %)) \n                    (= 0 (mod b %))) \n                  (range 1 (inc (min a b))))))", "user": "53c349f5e4b00fb29b22127a"}, {"problem": 66, "code": "(fn gr-div [n1 n2]\n  (let[fac (fn [n](filter #(zero? (rem n %)) (range 1 (inc n))))\n       intersect (set (filter (set (fac n1)) (fac n2)))]\n    (reduce max (set intersect))))", "user": "505d1b01e4b0e6aca564be04"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? a) b (if (zero? b) b\n    (if (> b a) (gcd a (- b a)) (gcd (- a b) b)))))", "user": "54c9e00be4b045293a27f683"}, {"problem": 66, "code": "(fn [x r]\n  (if (zero? r)\n    x\n    (recur r (mod x r))))", "user": "542d5fa9e4b0dad94371f2b5"}, {"problem": 66, "code": "(fn [x y]\n  (if (= 0 y)\n      x\n      (recur y (mod x y))))", "user": "544e8369e4b0e39780006987"}, {"problem": 66, "code": "(fn gcd [a b] (if (= b 0) a (gcd b (rem a b))))", "user": "54cbe00ee4b057c6fda3a285"}, {"problem": 66, "code": "(fn gcd [x y] \n  (let [x' (max x y) \n        y' (min x y)] \n    (if (zero? (mod x' y')) \n      y' \n      (gcd y' (rem x' y')))))", "user": "54d03026e4b018d918be98de"}, {"problem": 66, "code": "(fn gcd [a b] (cond (< a b) (recur a (- b a)) (> a b) (recur (- a b) b) :else a))", "user": "54c23252e4b045293a27f5fc"}, {"problem": 66, "code": "(fn [a b]\n  (first (filter #(and (= 0 (mod a %) ) (= 0 (mod b %) ) ) (reverse (range 1 (inc (min a b)))) )))", "user": "54d6f22de4b0a52adc2e2023"}, {"problem": 66, "code": "(fn gcd [x y]\n   (if (< x y)\n     (gcd y x)\n     (if (= (mod x y) 0)\n       y\n       (gcd y (mod x y)))))", "user": "54d26316e4b0e8a36923e5f2"}, {"problem": 66, "code": "(fn [a b] (loop [a a b b] (if (= b 0) a (recur b (rem a b)))))", "user": "541d3c0fe4b01498b1a71a7e"}, {"problem": 66, "code": "(fn gcd [m n]\n  \"GCD via Eudlid. Requires m>=n\"\n  (let [r (rem m n)] \n    (if (zero? r) n (recur n r))))", "user": "50aa777fe4b056ee01935866"}, {"problem": 66, "code": "#(cond\n   (= %1 %2) %1\n   (< %1 %2) (recur %1 (- %2 %1))\n   :else (recur (- %1 %2) %2))", "user": "54d70f40e4b0a52adc2e2027"}, {"problem": 66, "code": "(fn [a b]\n    (apply max \n           (clojure.set/intersection \n            (set (filter #(= (rem a %) 0) (range 1 (+ a 1))))   \n            (set (filter #(= (rem b %) 0) (range 1 (+ b 1))))   \n            ))\n    )", "user": "54cb3497e4b057c6fda3a272"}, {"problem": 66, "code": "(fn gcd [x y] (let [r (mod x y)] (if (> r 0) (gcd y r) y)))", "user": "54dbcbbde4b024c67c0cf774"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "4ee7d6d8535d93acb0a66870"}, {"problem": 66, "code": "(fn [int-1 int-2]\n  (let [divisor-fn (fn get-divisors\n                     [n]\n                     (set\n                      (for [i (range 1 (inc n))\n                            :let [divisor (/ n i)]\n                            :when (integer? divisor)]\n                        divisor)))\n        divs-1 (divisor-fn int-1)\n        divs-2 (divisor-fn int-2)\n        common-divs (clojure.set/intersection divs-1 divs-2)]\n    (apply max common-divs)))", "user": "510a3cd4e4b06956752d35ad"}, {"problem": 66, "code": "(fn nwd [a b]\n  (if (= b 0) a\n      (nwd b (mod a b))))", "user": "54b07c1ee4b09f271ff37d16"}, {"problem": 66, "code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "user": "4ec66e84535d6d7199dd36cd"}, {"problem": 66, "code": "(fn  [a b]\n  (let [x (max a b)\n        y (min a b)]\n    (if (zero? y)\n      x\n      (recur y (mod x y)))))", "user": "53664e3be4b0243289761e74"}, {"problem": 66, "code": "(fn [a b]\n     (let [[smaller bigger] (sort [a b])]\n          (if (= smaller 0)\n                  bigger\n                  (recur smaller (mod bigger smaller)))))", "user": "54cad2d5e4b057c6fda3a26c"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5215661be4b02f6d8ea676c7"}, {"problem": 66, "code": "#(loop [[i j] (sort [%1 %2])] (if (== i 0) j (recur [(mod j i) i])))", "user": "54d6c80ce4b0a52adc2e2020"}, {"problem": 66, "code": "(fn gcd [x y]\n  (let [r (rem x y)]\n    (if (= 0 r)\n      y\n      (gcd y r))))", "user": "54d753ebe4b0a52adc2e2029"}, {"problem": 66, "code": "(fn gcd[n m] \n  (let [mn (min m n)\n        mx (max m n)\n        md (mod mx mn)\n        dv (quot mx mn)]\n    (if (zero? md)\n      mn\n      (gcd mn md))))", "user": "54d4bd2be4b0a52adc2e2005"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "54dd76c8e4b024c67c0cf794"}, {"problem": 66, "code": "(fn ([a b] (some #(if (and (= 0 (mod a %)) (= 0 (mod b %))) %) (iterate dec (min a b)))))", "user": "54d8cc38e4b0a52adc2e203e"}, {"problem": 66, "code": "(fn [a b] \n   (let [smaller (min a b)]\n     (loop [currmax smaller]\n       (if (and (= 0 (rem a currmax)) (= 0 (rem b currmax)))\n          currmax\n          (recur (dec currmax))))))", "user": "54df3c94e4b024c67c0cf7aa"}, {"problem": 66, "code": "(fn gcd\n  [x y]\n  (let [a (max x y) b (min x y) m (mod a b)]\n  (if (= 0 m) b\n      (gcd b m))))", "user": "51b76227e4b0d906fcd71d35"}, {"problem": 66, "code": "(fn [& integers]\n  (first (filter (fn [candidate]\n                   (every? #(zero? (rem % candidate)) integers))\n                 (range (inc (apply min integers)) 0 -1))))", "user": "54cc26c1e4b057c6fda3a28a"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (rem a b))))", "user": "54d1cf2ee4b0e8a36923e5eb"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "54d4b3a7e4b0a52adc2e2003"}, {"problem": 66, "code": "#(if (zero? %2) % (recur %2 (mod % %2)))", "user": "54ddb556e4b024c67c0cf798"}, {"problem": 66, "code": "(fn [x y] (loop [x x y y m (min x y)] (if (and (= 0 (mod x m)) (= 0 (mod y m))) m (recur x y (dec m)))))", "user": "54ad4863e4b09f271ff37ce0"}, {"problem": 66, "code": "(fn gcd [a b]\n  (loop [c (max a b)\n         d (min a b)]\n    (let [r (rem c d)]\n      (if (zero? r)\n        d\n        (recur d r)))))", "user": "545944a2e4b01be26fd74627"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b) a\n    (recur b (mod a b))))", "user": "4fc4eb1ee4b081705acca354"}, {"problem": 66, "code": "(fn [a b]  (loop [x a y b] (if-not (= 0 y) (recur y (mod x y)) x)))", "user": "54d2b411e4b0e8a36923e5f9"}, {"problem": 66, "code": "#(apply max (for [d (range 1 (inc (min % %2))) :when (= 0 (rem % d) (rem %2 d))] d))", "user": "54d7ed8de4b0a52adc2e2034"}, {"problem": 66, "code": "#(loop [div (max % %2)]\n   (if (= 0\n          (mod % div)\n          (mod %2 div))\n     div\n     (recur (dec div))))", "user": "540d0087e4b0addc1aec670b"}, {"problem": 66, "code": "(fn gcd2 [n1 n2]\n  (reduce\n   #(if (and (= 0 (rem n1 %2)) (= 0 (rem n2 %2))) %2 %1)\n   (range 1 (inc (min n1 n2)))))", "user": "54e3df6ae4b024c67c0cf7e3"}, {"problem": 66, "code": "(fn [a b]\n    (if (zero? b)\n      a\n      (recur b (mod a b))))", "user": "51b91b08e4b0e871ca4958f8"}, {"problem": 66, "code": "(fn gcd\n  [x y]\n  (loop [test (min x y)]\n    (if (and (= 0 (mod x test)) (= 0 (mod y test)))\n      test\n      (recur (dec test)))))", "user": "54e0e911e4b024c67c0cf7bc"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n   (= a b) a\n   (= 0 a) b\n   (= 0 b) a\n   :else (let [m (min a b) M (max a b)] (recur (mod M m) m))))", "user": "54dae16de4b024c67c0cf758"}, {"problem": 66, "code": "(fn [a b]\n  (loop [a a \n         b b\n         i 1\n         ret 1]\n    (if (or (< a i) (< b i))\n     ret\n     (let [m (and (= 0 (mod a i)) (= 0 (mod b i)) )]\n       \t(if m\n\t\t\t(recur a b (inc i) i)\n  \t\t\t(recur a b (inc i) ret)\n          )\n        )\n     )\n    )\n  )", "user": "54bbba99e4b0ed20f4ff6ec2"}, {"problem": 66, "code": "(fn [a b] (last (filter #(= 0 (rem a %) (rem b %)) (map inc (range 0 a)))))", "user": "504f9ae1e4b0a02f9cffde9c"}, {"problem": 66, "code": "(fn [a b]\n  (if\n    (zero? b)\n    a\n    (recur b (mod a b))))", "user": "4e68c465535d8ccf87e9fe8a"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (> b a)\n    (gcd b a)\n    (if (= 0 (rem a b))\n      b\n      (gcd b (rem a b))\n    )\n  )\n)", "user": "54e85a7fe4b024c67c0cf823"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (> a b)\n    (if (= b 0)\n      a\n      (gcd (mod a b) b))\n    (gcd b a)))", "user": "54e6762be4b024c67c0cf809"}, {"problem": 66, "code": "(fn [a b]\n  (loop [d (min a b)]\n    (if (and (= (mod a d) 0) (= (mod b d) 0))\n      d\n      (recur (dec d)))))", "user": "54e2a779e4b024c67c0cf7d3"}, {"problem": 66, "code": "(fn [a b]\n  ((fn [[d r]]\n          (let [r2 (rem d r)]\n            (if (= 0 r2) r\n              (recur [r r2])))) (sort [a b])))", "user": "51a4d802e4b0def3c5c5869a"}, {"problem": 66, "code": "(fn [x y]\n  (if (= x y)\n    x\n    (if (> x y)\n      (recur (- x y) y)\n      (recur (- y x) x))))", "user": "543c5200e4b032a45b86933e"}, {"problem": 66, "code": "(fn [small large]\n    (let [remaining (mod large small)]\n      (if (= 0 remaining)\n        small\n        (recur remaining small))))", "user": "54ca130ce4b057c6fda3a250"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (cond\n    (or (<= a 0) (<= b 0)) :bad_args\n    (= a b) a\n    (> a b) (gcd (- a b) b)\n    (> b a) (gcd a (- b a)))\n   )", "user": "54e5bdf2e4b024c67c0cf7fe"}, {"problem": 66, "code": "(letfn [(gcd2 [a b]\n          (if (zero? b)\n            a\n            (recur b (mod a b))))]\n  (fn [x & xs]\n    (reduce gcd2 x xs)))", "user": "516f06dce4b06aac486e5b39"}, {"problem": 66, "code": "(fn [one two]\n   (loop [test-value (min one two)]\n     (if (= (+ (mod one test-value) (mod two test-value)) 0)\n       test-value\n       (recur (dec test-value)))))", "user": "54b5ce67e4b05787c3b163ac"}, {"problem": 66, "code": "(fn [a b] (some #(if (and (zero?(mod a (+ 1 %))) (zero? (mod b (+ 1 %)))) (+ 1 %) false ) (reverse (range 0  (min a b)))))", "user": "54edcf96e4b024c67c0cf866"}, {"problem": 66, "code": "(fn [x y] (loop [divisor (min x y)]\n            (if (and (zero? (rem x divisor)) (zero? (rem y divisor)))\n              divisor\n              (recur (dec divisor)))))", "user": "54a6baaee4b09f271ff37c8a"}, {"problem": 66, "code": "(fn [a b]\n  (loop [divs (reverse (range (min a b)))]\n    (let [d (inc (first divs))]\n      (if (and (= 0 (mod a d))\n               (= 0 (mod b d)))\n        d\n        (recur (rest divs))))))", "user": "54b83ae9e4b0ed20f4ff6e95"}, {"problem": 66, "code": "#(loop [[x y] [(min %1 %2) (max %1 %2)]] (if (zero? x) y (recur [(rem y x) x])))", "user": "54f0d3fde4b024c67c0cf8a6"}, {"problem": 66, "code": "(fn [x y] (last (filter #(if (and (= 0 (rem x %)) (= 0 (rem y %))) % nil) (range 1 (inc (min x y))))))", "user": "4f598c87e4b0030a34fb2ada"}, {"problem": 66, "code": "(fn aa [a b]\n  (if (> a b)\n    (let [res (rem a b)]\n     (if (zero? res)\n       b\n       (aa b res)))\n    (aa b a)))", "user": "51c1b644e4b0d204dbe2ca12"}, {"problem": 66, "code": "(fn inner [a b] (if (zero? b) a (inner b (mod a b))))", "user": "518ba795e4b0f028e99addf0"}, {"problem": 66, "code": "(fn gcd\n  [x y]\n  (let [divisors (fn [a]\n                   (set (filter #(= (mod a %) 0) (range 1 (inc a)))))]\n    (apply max\n           (clojure.set/intersection\n            (divisors x)\n            (divisors y)))))", "user": "54be792ee4b0ed20f4ff6eeb"}, {"problem": 66, "code": "(fn [a b] (if (= b 0)\n            a\n            (recur b (rem a b))))", "user": "54f2fe9fe4b050824f58f5b8"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b)))\n  )", "user": "546a6c7ce4b00cfc9eacc154"}, {"problem": 66, "code": "(fn [a b]\n   (cond (< a b) (recur b a)\n         (= b 0) a\n         :else (recur b (- a b))))", "user": "546ff835e4b00cfc9eacc1b4"}, {"problem": 66, "code": "(fn gcd \n  [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "54e5dc08e4b024c67c0cf800"}, {"problem": 66, "code": "(fn [a b]\n  (let \n    [divisors (fn [n]\n                  (into #{1}\n                    (keep-indexed #(if (= 0 (mod n %2)) (/ n %2) nil) \n                                          (range 1 n))))]\n    (apply max (clojure.set/intersection (divisors a) (divisors b)))))", "user": "54e606c3e4b024c67c0cf803"}, {"problem": 66, "code": "(fn [a b]\n    (cond\n      (zero? a) b\n      (zero? b) a\n      (< a b) (recur a (- b a))\n      :else (recur b (- a b))))", "user": "536ecd9fe4b0fc7073fd6e76"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (gcd b (mod a b))))", "user": "504e2d18e4b0f6ff3350c47a"}, {"problem": 66, "code": "(fn gcd [a b] (if (not= a b) (if (> a b) (recur (- a b) b) (recur a (- b a))) a))", "user": "54361d92e4b032a45b8692f7"}, {"problem": 66, "code": "(fn [x y]\n    (loop [div x acc y]\n      (if (zero? (rem div acc))\n        acc\n        (recur (identity acc) (rem div acc)))))", "user": "54eca495e4b024c67c0cf855"}, {"problem": 66, "code": "#(if (zero? %2)\n    %1\n    (recur %2 (mod %1 %2))\n\n    )", "user": "54ef4a1ee4b024c67c0cf883"}, {"problem": 66, "code": "#(loop [x (max % %2) y (min % %2) div y]\n   (if (and (= (mod x div) 0) (= (mod y div) 0))\n     div\n     (recur x y (dec div))))", "user": "5480cce5e4b0e286459a115f"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "539c736ce4b0b51d73faaf2b"}, {"problem": 66, "code": "#(loop [denom (if (> % %2) %2 %)]\n  (if (and (integer? (/ % denom))\n           (integer? (/ %2 denom)))\n    denom\n  (recur (dec denom))))", "user": "534fa9dae4b084c2834f4acf"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n     a\n     (gcd b (mod a b))))", "user": "52f53589e4b05e3f0be25f2c"}, {"problem": 66, "code": "(fn [x y]\n  (loop [divisor (min x y)]\n    (if (= (mod x divisor) (mod y divisor) 0)\n      divisor\n      (recur (dec divisor)))))", "user": "54edfa10e4b024c67c0cf868"}, {"problem": 66, "code": "(fn [x y]\n  (if (zero? y) \n    x \n    (recur y (mod x y))))", "user": "546a6e9fe4b00cfc9eacc157"}, {"problem": 66, "code": "(fn gcd [a0 b0]\n  \n  (loop [a a0 b b0]  \n    (if (zero? b) \n      a\n      (recur b (mod a b))\n      )\n    ))", "user": "54f73502e4b01ecee9d88817"}, {"problem": 66, "code": "(fn [a b]\n    (letfn [(divs [x] (set (filter #(integer? (/ x %)) (range 1 (+ x 1)))))]\n      (apply max (clojure.set/intersection (divs a) (divs b)))))", "user": "54508859e4b0e397800069a3"}, {"problem": 66, "code": "(fn [a b]\n  (if (= a b)\n    a\n    (if (> a b)\n      (recur (- a b) b)\n      (recur a (- b a)))))", "user": "54fdbe3fe4b07d26eda61d3b"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "54f64e99e4b0f2f3c5226ea4"}, {"problem": 66, "code": "(fn [a b]\n    (cond\n     (> a b) (recur (- a b) b)\n     (< a b) (recur a (- b a))\n     (= a b) a))", "user": "516db4f6e4b046df6fbb76a0"}, {"problem": 66, "code": "#(loop [x %1 y %2] (if (= y 0) x\n                       (recur y (mod x y))\n                         ))", "user": "54e0a9c3e4b024c67c0cf7b5"}, {"problem": 66, "code": "(fn [x y]\n  (let [m (min x y)]\n    (first (drop-while #(not= 0 (mod x %) (mod y %)) (range m 0 -1)))))", "user": "51f66891e4b06ff1c25c52c1"}, {"problem": 66, "code": "#(last (for [z (range 1 (if (> % %2) % %2))\n             :when (and (= 0 (mod % z)) (= 0 (mod %2 z)))]\n         z))", "user": "52540bcce4b0541d1855b952"}, {"problem": 66, "code": "(fn [a b]\n  (first (filter #(and (= 0 (mod a %)) (= 0 (mod b %))) \n                 (-> (min a b) (range 0 -1)))))", "user": "54febf4be4b07d26eda61d45"}, {"problem": 66, "code": "(fn [& n]\n  (reduce\n    (fn [gcd-so-far test] (if (every? #(= 0 (rem % test)) n) test gcd-so-far))\n    1 (range 1 (inc (apply min n)))))", "user": "54eee3a3e4b024c67c0cf879"}, {"problem": 66, "code": "(fn [a b]\n  (loop [p a q b]\n    (if (= p q)\n      p \n      (do (if (> p q)\n      \t(recur (- p q) q)\n      \t(recur p (- q p)))))))", "user": "550111d3e4b07d26eda61d6f"}, {"problem": 66, "code": "(fn [x y]\n  (apply max (clojure.set/intersection\n    (set(filter #(= (rem x %) 0) (range 1 (inc x))))\n    (set(filter #(= (rem y %) 0) (range 1 (inc y))))))\n)", "user": "54f4a457e4b0f2f3c5226e83"}, {"problem": 66, "code": "(fn [a b]\n  (let [divides (fn [n d]  (= 0 (mod n d)))]\n    (apply max (filter #(and (divides a %) (divides b %)) (range 1 (inc (min a b)))))))", "user": "531902b1e4b08068f379ed77"}, {"problem": 66, "code": "(fn \n  [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "54f2a1b8e4b024c67c0cf8cb"}, {"problem": 66, "code": "#(.gcd (java.math.BigInteger. (str %)) (java.math.BigInteger. (str %2)))", "user": "54e51c7be4b024c67c0cf7f7"}, {"problem": 66, "code": "(fn [x y]\n  (cond (= x 0) y\n        (= y 0) x\n        (> x y) (recur y (rem x y))\n        :else (recur x (rem y x))))", "user": "54edc818e4b024c67c0cf865"}, {"problem": 66, "code": "(fn [a b]\n  (loop [x (max a b)\n         y (min a b)]\n    (if (zero? (rem x y))\n      y\n      (recur y (rem x y)))))", "user": "54b31445e4b09f271ff37d35"}, {"problem": 66, "code": "(fn gcd [a b]\n  (loop [dividend (max a b)\n         divisor (min a b)\n         remainder (rem dividend divisor)]\n    (if (zero? remainder)\n      divisor\n      (recur divisor\n             remainder\n             (rem divisor remainder)))))", "user": "54eea988e4b024c67c0cf875"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "55088bb3e4b06e50f9beb10c"}, {"problem": 66, "code": "(fn gcd [x y]\n  (if (zero? y)\n    x\n    (gcd y (mod x y))))", "user": "55058a4fe4b086ebe8a79c89"}, {"problem": 66, "code": "(fn [a b] \n   (let [smaller (min a b)]\n     (loop [currmax smaller]\n       (if (and (zero? (rem a currmax)) (zero? (rem b currmax)))\n          currmax\n          (recur (dec currmax))))))", "user": "54f0a1f2e4b024c67c0cf8a0"}, {"problem": 66, "code": "(fn a [x y]\n  (let [min1 (min x y)\n        max1 (max x y)\n        r    (mod max1 min1)]\n    (if (= r 0)\n      min1\n      (a min1 r))))", "user": "54bcab07e4b0ed20f4ff6ed5"}, {"problem": 66, "code": "(fn gcd \n   [a b] \n   (if \n     (= a b) \n     a \n     (if \n       (> a b) \n       (gcd (- a b) b) \n       (gcd a, (- b a)))))", "user": "5505ceb3e4b086ebe8a79c8b"}, {"problem": 66, "code": "(fn gcd [a b]\n   (if (= b 0)\n     (+ a b)\n      (if (= a 0)\n        (+ a b)\n        (gcd b (rem a b)))))", "user": "5508102ee4b021ccfedb96b0"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0) a\n    (gcd b (mod a b))))", "user": "54b04708e4b09f271ff37d11"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= (rem a b) 0)\n    b\n    (gcd b (rem a b))))", "user": "546ed28be4b00cfc9eacc1a5"}, {"problem": 66, "code": "( fn\n   [a b]\n   (apply max ( clojure.set/intersection \n                (set ( filter #( = 0 (mod a %)) (range 1 (inc a)))) \n                (set ( filter #( = 0 (mod b %)) (range 1 (inc b)))) \n                )\n    )\n  )", "user": "54fc7d89e4b07d26eda61d2b"}, {"problem": 66, "code": "(fn gcd [x y] (if (= y 0) x (gcd y (rem x y))))", "user": "550e0373e4b06e50f9beb162"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "54d1b6ffe4b0e8a36923e5e6"}, {"problem": 66, "code": "(fn gcd [a b]\n    (if (= b 0)\n        a\n        (gcd b (mod a b))))", "user": "54f09599e4b024c67c0cf89d"}, {"problem": 66, "code": "(fn [x y]\n  (loop [d (min x y)]\n    (if (and (= (rem x d) 0) (= (rem y d) 0)) \n      d\n      (recur (dec d)))))", "user": "54e24a05e4b024c67c0cf7ce"}, {"problem": 66, "code": "#(loop [a %1 b %2] (if (= b 0) a (recur b (mod a b))))", "user": "54f6f00fe4b01ecee9d88814"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "540a4f20e4b0addc1aec66ef"}, {"problem": 66, "code": "(fn[x y](let [m (min x y)](apply max(filter #(and (zero? (mod x %)) (zero? (mod y %))) (cons m (range 1 (inc (/ m 2))))))))", "user": "54f15cb8e4b024c67c0cf8b1"}, {"problem": 66, "code": "(fn [x y] (if (zero? y) x (recur y (mod x y))))", "user": "4fa5c8dde4b081705acca1af"}, {"problem": 66, "code": "(fn g [a b] (if (== 0 (mod a b)) b (g b (mod a b))))", "user": "5507cfd3e4b021ccfedb96ad"}, {"problem": 66, "code": "(fn [a b]\n  (loop [f (max a b), g (min a b)]\n    (if (= 0 (mod f g))\n      g\n      (recur g (mod f g)))))", "user": "53213810e4b09d4e7a9b54b0"}, {"problem": 66, "code": "(fn [a b]\n  (let [r (rem a b)]\n    (if (= r 0) \n      b \n      (recur b r))))", "user": "550615c0e4b021ccfedb9696"}, {"problem": 66, "code": "(fn [n m]    \n\t(letfn [(gcd [a b]\n  \t\t(if (= b 0)\n    \t\ta\n    \t\t(recur b (mod a b))))] \n  \t(gcd n m)))", "user": "5514a60fe4b055c2f668d4d7"}, {"problem": 66, "code": "(fn gcd [x y]\n  (let [[l g] (if (< x y) [x y] [y x])]\n    (cond \n     (zero? (rem g l)) l\n     (= g l) g\n     :else (gcd (- g l) l))))", "user": "54c8ac49e4b045293a27f64e"}, {"problem": 66, "code": "(fn gcd \n  ([n] (into #{} (filter #(zero? (mod n %)) (range 1 (inc n)))))\n  ([n & args] (apply max (apply clojure.set/intersection(flatten [(gcd n) (mapv gcd args)])))))", "user": "54e1197fe4b024c67c0cf7c0"}, {"problem": 66, "code": "#(first (filter (fn [x] (= 0 (rem %1 x) (rem %2 x))) (range (min %1 %2) 0 -1)))", "user": "550aeddae4b06e50f9beb135"}, {"problem": 66, "code": "(fn [a b] (first (filter #(= 0 (rem a %) (rem b %)) (range (min a b) 0 -1))))", "user": "551535cee4b055c2f668d4df"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "52e087dde4b09f7907dd1412"}, {"problem": 66, "code": "#(loop \n   [div (max % %2) quo (min % %2)]\n   (if (= 0 (rem div quo))  \n     quo      \n     (recur  quo (rem div quo))))", "user": "550609b3e4b021ccfedb9695"}, {"problem": 66, "code": "(fn comdiv [x y]\n  (let [m (inc (min x y))\n        r (reverse (range 1 m))]\n    (some #(when (= 0 (mod x %) (mod y %)) %) r)))", "user": "55170dd9e4b06a49daca83bd"}, {"problem": 66, "code": "(fn [a b]\n    (loop [a a b b]\n      (if (zero? (mod a b))\n        b\n        (recur b (mod a b)))))", "user": "551a21ece4b091ff45eda993"}, {"problem": 66, "code": "(fn gcd [x y]\n  (if (> x y)\n    (let [r (rem x y)]\n      (if (= r 0) y\n        (gcd y r)))\n    (let [r (rem y x)]\n      (if (= r 0) x\n        (gcd x r)))))", "user": "53504a7de4b084c2834f4ad9"}, {"problem": 66, "code": "(fn [a b]\n            (loop [m (min a b)]\n              (if (and\n                   (= 0 (mod a m))\n                   (= 0 (mod b m)))\n                m\n                (recur (dec m)))))", "user": "5492164ee4b0b312c081ff3e"}, {"problem": 66, "code": "(fn [a b]\n  (let [min (if (> a b) b a)\n        common-div #(if (and (= (mod a %) 0)\n                             (= (mod b %) 0)) % nil)]\n        (some common-div (iterate dec min))))", "user": "550ff2a3e4b06e50f9beb17f"}, {"problem": 66, "code": "(fn euclid [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "user": "550c55d0e4b06e50f9beb14d"}, {"problem": 66, "code": "(fn [a b]\n  (let [lesser (min a b)]\n    (first \n      (drop-while #(or (> (mod a %) 0) (> (mod b %) 0))\n                  (range lesser 0 -1)))))", "user": "503f923fe4b00d1a725ff2ad"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (rem a b))))", "user": "551ed214e4b08d5046aa8a4d"}, {"problem": 66, "code": "#(if (zero? %2) % (recur %2 (mod % %2)))", "user": "532018efe4b08068f379edcd"}, {"problem": 66, "code": "(fn gcd [a b] (let [nxt (if (> a b) [b (rem a b)] [a (rem b a)])] (if (= 0 (last nxt)) (first nxt) (apply gcd nxt))))", "user": "5519c157e4b00ace28fe6e32"}, {"problem": 66, "code": "(fn [x y]\n  (if (= y 0)\n    x\n    (recur y (mod x y))))", "user": "55151417e4b055c2f668d4da"}, {"problem": 66, "code": "#(let [r (rem %1 %2)] (if (zero? r) %2 (recur %2 r)))", "user": "50f02de7e4b0bdaecbb47db0"}, {"problem": 66, "code": "(fn foo [x y] (if (= x y) x (if (> x y) (foo (- x y) y) (foo (- y x) x))))", "user": "5520974be4b08d5046aa8a63"}, {"problem": 66, "code": "(fn gcd [x y]\n  (if (= 0 (min x y))\n    (max x y)\n    (recur (min x y) (- (max x y) (min x y)))))", "user": "551ecb76e4b08d5046aa8a4c"}, {"problem": 66, "code": "(fn my-gcd [& args]\n  (let [[b a] (sort args)]\n    (if (= a b) a (my-gcd (- a b) b))))", "user": "52eaba10e4b09f7907dd14c2"}, {"problem": 66, "code": "(fn f [a b] (if (= a b) \n           a \n           (if (> a b) \n             (f (- a b) b) \n             (f a (- b a))\n           )\n           ))", "user": "551c66dae4b07993ea3788de"}, {"problem": 66, "code": "(fn max-com-div [a b]\n        (let [m (max a b)]\n          (last (sort (filter #(and (= 0 (mod a %))\n                                     (= 0 (mod b %))) (range 1 m))))))", "user": "541f89a5e4b01498b1a71a99"}, {"problem": 66, "code": "(fn [a b]\n  (loop [x (max a b), y (min a b)]\n    (if (zero? y) x (recur y (mod x y)))))", "user": "552356fae4b0882d96d091af"}, {"problem": 66, "code": "(fn gcd [m n] (cond (= m n) m (< m n) (gcd (- n m) m) :else (gcd (- m n) n)))", "user": "55205564e4b08d5046aa8a60"}, {"problem": 66, "code": "(fn gcdr [a b]\n  (if (= b 0)\n    a\n    (gcdr b (mod a b))))", "user": "50c6052ce4b0c9dc10d15c56"}, {"problem": 66, "code": "(fn [a b]\n  (if (> b a)\n    (recur b a)\n    (let [c (mod a b)]\n      (if (= 0 c)\n        b\n        (recur b c)))))", "user": "4f4e78fee4b03ad3f0c10cc8"}, {"problem": 66, "code": "(fn [d1 d2]\n  (loop [n (min d1 d2)]\n    (if (= (mod d1 n) (mod d2 n) 0)\n      n\n      (recur (dec n)))))", "user": "5522cd9ae4b0882d96d091ab"}, {"problem": 66, "code": "(fn [a b]\n          (if (= b 0)\n            a\n            (recur b (mod a b))\n            )\n          )", "user": "533c2605e4b0e30313ee6cd7"}, {"problem": 66, "code": "(fn [a b]\n  (let [f (fn [[a b]] (if (< a b) [b a] [b (mod a b)]))]\n    (some #(when (= (second %) 0) (first %)) (iterate f [a b]))))", "user": "55253217e4b0882d96d091ce"}, {"problem": 66, "code": "(fn number66 [h l]\n  (let [high (max h l) low (min h l)]\n    (if (zero? low) high\n                    (recur low (mod high low)))))", "user": "54074fc5e4b0addc1aec66b6"}, {"problem": 66, "code": "(fn [x y]\n  (->> x inc (range 1)\n       (filter #(= 0 (rem x %) (rem y %)))\n       last))", "user": "55201d18e4b08d5046aa8a5d"}, {"problem": 66, "code": "(fn [x y]\n  (let [smaller (min x y)\n        thing (range smaller 0 -1)]\n    (first (filter #(= 0 (mod x %) (mod y %)) thing))))", "user": "5512aca6e4b055c2f668d4b4"}, {"problem": 66, "code": "#(loop [gcd (min %1 %2)]\n           (if (and  (integer?  (/ %1 gcd)) (integer?  (/ %2 gcd)))\n             gcd\n             (recur (dec gcd))))", "user": "4f03e60d535dcb61093f6b7a"}, {"problem": 66, "code": "#((fn d [n] \n      (if (and (= (mod % n) 0) (= (mod %2 n) 0)) n (d (- n 1)))\n  ) (min % %2)\n)", "user": "514504c2e4b021a5ff8301fc"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "54ab1b5ae4b09f271ff37cc2"}, {"problem": 66, "code": "(fn [a b](loop[div (min a b)](if (or (= div 1) \n                                     (and (= 0 (mod a div)) (= 0 (mod b div))))\n                                                             div\n                                                             (recur (dec div)))))", "user": "54ecd7dde4b024c67c0cf85c"}, {"problem": 66, "code": "#(if (zero? (* %1 %2)) (+ %1 %2) (recur (mod %1 %2) (mod %2 %1)))", "user": "55280930e4b0ffed3738f93b"}, {"problem": 66, "code": "(fn [a b]\n  (let [[small big] (sort [a b])]\n    (loop [divisor small]\n      (if (and (zero? (mod big divisor)) (zero? (mod small divisor)))\n        divisor\n        (recur (dec divisor))))))", "user": "50310713e4b05b7df5a0b84c"}, {"problem": 66, "code": "(fn gcd [x y] (cond (< x y) (gcd y x) (= y 0) x :else (gcd y (mod x y))))", "user": "5515649fe4b055c2f668d4e3"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))))", "user": "54c3747de4b045293a27f60e"}, {"problem": 66, "code": "(fn [x y]\n   (letfn [(factors [x]\n             (filter #(= 0 (rem x %)) (range 1 (inc x))))]\n     (let [intersection (clojure.set/intersection\n                         (set (factors x))\n                         (set (factors y)))]\n       (apply max (vec intersection)))))", "user": "51bb08a4e4b0fe3ecfb46446"}, {"problem": 66, "code": "(fn [x y] \n    (apply max (filter #(= 0 (mod x %) (mod y %)) (range 1 (inc (min x y))))))", "user": "54a677a9e4b09f271ff37c88"}, {"problem": 66, "code": "#(if (= %2 0)\n     %\n     (recur %2 (mod % %2)))", "user": "53ba41c2e4b047364c0444f3"}, {"problem": 66, "code": "#(let [m (min %1 %2) n (max %1 %2)] \n    ((fn gcd [x y] \n       (if (zero? x) y (gcd (rem y x) x))\n       ) m n))", "user": "55249f64e4b0882d96d091c6"}, {"problem": 66, "code": "(fn gcd [a, b]\n  (cond \n   (= 0 a) b\n   (= 0 b) a\n   :else (gcd b (mod a b))))", "user": "551ee974e4b08d5046aa8a50"}, {"problem": 66, "code": "(fn [a b]\n  (if (> a b)\n    (if (zero? b) a (recur b (mod a b)))\n    (recur b a)\n    )\n  )", "user": "552d9013e4b076ab5578f7ea"}, {"problem": 66, "code": "(fn[a b] (if (zero? b) a (recur b (mod a b))))", "user": "552bc0f5e4b0ffed3738f968"}, {"problem": 66, "code": "(fn [number1 number2] (loop [bigger (max number1 number2) smaller (min number1 number2)]\n                              (if(zero? (rem bigger smaller)) smaller\n                              (recur (/ (- bigger (rem bigger smaller)) (quot bigger smaller)) (rem bigger smaller)))))", "user": "54e4edcae4b024c67c0cf7f3"}, {"problem": 66, "code": "#(->> (for [divisor (range 1 34)\n      :when (and (= 0 (mod %1 divisor))\n                 (= 0 (mod %2 divisor)))]\n  divisor)\n     (apply max))", "user": "5152bc4ee4b001f44f99bfef"}, {"problem": 66, "code": "(fn gcd [x y]\n  (if (> y x)\n    (gcd y x)\n    (if (= 0 (rem x y))\n      y\n      (gcd (- x y) y))))", "user": "54f4adc8e4b0f2f3c5226e86"}, {"problem": 66, "code": "(fn [x y] (loop [n1 x n2 y] (if (= (mod n1 n2) 0) n2 (recur n2 (mod n1 n2)))))", "user": "5510f734e4b06e50f9beb18f"}, {"problem": 66, "code": "(fn gcd [q r]\n  (if (= 0 (mod q r))\n    r\n    (gcd r (mod q r))))", "user": "5530b827e4b076ab5578f818"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (> b a)\n    (gcd b a)\n    (let [x (mod a b)]\n      (if (= 0 x)\n        b\n        (gcd b x)))))", "user": "5510aa92e4b06e50f9beb188"}, {"problem": 66, "code": "(fn [a b]\n  (let [remainder (rem a b)]\n    (if (zero? remainder)\n      b\n      (recur b remainder))))", "user": "51a7fe50e4b08d8ec191b803"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "54d127b7e4b0e8a36923e5de"}, {"problem": 66, "code": "(fn [int1 int2] (peek (filterv #(= 0 (mod int1 %) (mod int2 %)) (range 1 (inc int1)))))", "user": "54db3d82e4b024c67c0cf75f"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "533b1dc4e4b0e30313ee6cc7"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b) a\n    (recur b (rem a b))))", "user": "553698fae4b09218d5f44fc0"}, {"problem": 66, "code": "#(let [g (max %1 %2) l (min %1 %2) q (/ g l) r (rem g l) ]\n                   (if (= r 0)\n                     l\n                     (if (= r 1)\n                       1\n                       (recur l r))))", "user": "552e1c98e4b076ab5578f7ee"}, {"problem": 66, "code": "#(loop [a %1 b %2] (if (zero? b) a (recur b (mod a b))))", "user": "5531e445e4b09218d5f44f76"}, {"problem": 66, "code": "(fn [a b]\n  (let [x (rem a b)]\n    (if (= x 0)\n      b\n      (recur b x))))", "user": "553706d1e4b09218d5f44fc7"}, {"problem": 66, "code": "(fn [a b] (first (filter #(= 0 (mod a %) (mod b %)) (range a 0 -1))))", "user": "505106fee4b05ab4c7e07d38"}, {"problem": 66, "code": "(fn f [a b] (if (zero? b) a (f b (mod a b))))", "user": "52ae886de4b0c58976d9acab"}, {"problem": 66, "code": "(fn gcd [x y]\n  (let [[x y] (if (< x y) [x y] [y x])]\n    (if (= x 0) y\n      (gcd (mod y x) x))))", "user": "553e0b70e4b0a04f792994e8"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if \n    (zero? b)\n    a\n    (gcd b (mod a b))))", "user": "553dd883e4b0a04f792994e6"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [ma (max a b)\n        mi (min a b)]\n  (if (= 0 mi)\n    ma\n    (gcd mi (mod ma mi)))))", "user": "53fcd574e4b0de5c418485d9"}, {"problem": 66, "code": "#(if (= 0 %2) % (recur %2 (rem % %2)))", "user": "552694e7e4b0ffed3738f920"}, {"problem": 66, "code": "(fn __ [a b]\n  (if (= b 0)\n    a\n    (__ b (mod a b))))", "user": "553abb28e4b09218d5f44ffb"}, {"problem": 66, "code": "(fn [a b]\n  (cond\n   (= a b) a\n   (> a b) (recur (- a b) b)\n   (> b a) (recur a (- b a))))", "user": "55395241e4b09218d5f44fe8"}, {"problem": 66, "code": "(fn [a b]\n  ((fn check [x y z]\n     (if (and (= (mod x z) 0) (= (mod y z) 0))\n       z\n       (check x y (dec z)))) a b (if (> a b) b a)))", "user": "553c4614e4b09218d5f45014"}, {"problem": 66, "code": ";; Assumes positive integers > 0\n(fn [i1 i2]\n  (loop [a i1,b i2]\n    (cond\n     (= a b) a\n     (> a b) (recur (- a b) b)\n     :else (recur a (- b a)))))", "user": "53573d70e4b04ce2eb3ed278"}, {"problem": 66, "code": "#(let [begminn (min %1 %2) maxx (max %1 %2)]\n    (loop [minn begminn maxx maxx] (\n                  if (and (integer? (/ maxx minn)) (integer? (/ begminn minn)))\n                   minn\n                   (recur (dec minn) maxx)\n                  )))", "user": "54897284e4b0e286459a11e6"}, {"problem": 66, "code": "#(let [[a b] (if (> % %2) [% %2] [%2 %])\n        rest (mod a b)]\n   (if (zero? rest) b (recur b rest)))", "user": "550f1c99e4b06e50f9beb171"}, {"problem": 66, "code": "(fn [a b]\n  (case b\n    0 a\n    (recur b (mod a b))))", "user": "55316b8ae4b076ab5578f825"}, {"problem": 66, "code": "(fn [x y]\n  (let [lowest (min x y)]\n    (loop [curr 1\n           divisor 0]\n      (cond\n        (> curr lowest) divisor\n        (= 0 (mod x curr) (mod y curr)) (recur (inc curr) curr)\n        :else (recur (inc curr) divisor)))))", "user": "551d5cb9e4b07993ea3788e9"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (if (= b 0)\n    a\n    (gcd b (rem a b))))", "user": "550d9452e4b06e50f9beb15d"}, {"problem": 66, "code": "(fn [a b]\n  (let [divisor? (fn [large n] (zero? (mod large n)))\n        divisors (fn [n] (into #{} (filter #(divisor? n %) (range 1 (inc n)))))\n        common-divisors (clojure.set/intersection (divisors a) (divisors b))]\n    (apply max common-divisors)\n  )\n)", "user": "554707bae4b0a04f79299544"}, {"problem": 66, "code": "(fn [x y]\n  (let [helper (fn [x y]\n                 (let [re (rem x y) ]\n                   (cond\n                   (= re 0) y\n                   :else (recur y re))))]\n    (helper x y)))", "user": "54b64fbbe4b05787c3b163b8"}, {"problem": 66, "code": "(fn x[a b](first (filter #(= 0 (rem a %)(rem b %)) (->> (if(> a b) a b) (range 1) reverse))))", "user": "552800d7e4b0ffed3738f93a"}, {"problem": 66, "code": "(fn [& args]\n    (apply max \n      (seq (apply clojure.set/intersection \n             (map set \n               (for [n args] \n                 (for [x (range 1 (inc n)) :when (zero? (mod n x))] x)))))))\n\n; Want to study benhammond's and maybe dzholev's solutions.", "user": "5535e822e4b09218d5f44fb2"}, {"problem": 66, "code": "(fn [x y]\n  (loop [gcd (max (quot y 2)(quot x 2))]\n    (if (and (= 0 (rem y gcd)) (= 0 (rem x gcd))) gcd\n      (recur (- gcd 1)))))", "user": "554dff83e4b00713264bd98d"}, {"problem": 66, "code": "(fn gcd[x, y] (cond (= x 0) y (= y 0) x (> x y) (gcd (mod x y) y) :else (gcd (mod y x) x)))", "user": "55429859e4b0a04f7929951f"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (if (= a 0)\n    b\n    (if (= b 0)\n      a\n      (if (> a b)\n        (gcd (mod a b) b       )\n        (gcd a         (mod b a)) ))))", "user": "550e52dbe4b06e50f9beb165"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "4fcf1755e4b03432b189f40c"}, {"problem": 66, "code": "(fn my-gcd [a b]\n  (let [lowest (min a b) highest (max a b)]\n    (loop [i lowest]\n      (if (= (rem lowest i) (rem highest i) 0)\n        i\n        (recur (dec i))))))", "user": "5546704be4b0a04f7929953d"}, {"problem": 66, "code": "(fn gcd\n  ([a b] (gcd a b (min a b)))\n  ([a b res]\n   (if (and (= 0 (mod a res))\n            (= 0 (mod b res)))\n     res\n     (recur a b (dec res)))))", "user": "5515b138e4b055c2f668d4ed"}, {"problem": 66, "code": "#(loop [a 1 b % c %2 d 1] (cond\n                       (> a b) d\n                       (and (> a 1) \n                            (= 0 (mod b a))\n                            (= 0 (mod c a)))\n                        (recur a (/ b a) (/ c a) (* a d)) \n                       :else (recur (inc a) b c d)\n                        ))", "user": "554680cbe4b0a04f7929953e"}, {"problem": 66, "code": "#(loop [a %1\n          b %2]\n     (if (= b 0)\n       a\n       (recur b (mod a b))))", "user": "554c296ae4b0a04f792995a1"}, {"problem": 66, "code": "(fn [a b]\n    (cond (= a 0) b\n\t  (= b 0) a\n\t  :else (recur b (mod a b))))", "user": "553478dce4b09218d5f44f9d"}, {"problem": 66, "code": "(letfn [\n(some-primes []  [2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191 193 197 199 211 223 227 229 233 239 241 251 257 263 269 271 277 281 283 293 307 311 313 317 331 337 347 349 353 359 367 373 379 383 389 397 401 409 419 421 431 433 439 443 449 457 461 463 467 479 487 491 499 503 509 521 523 541 547 557 563 569 571 577 587 593 599 601 607 613 617 619 631 641 643 647 653 659 661 673 677 683 691 701 709 719 727 733 739 743 751 757 761 769 773 787 797 809 811 821 823 827 829 839 853 857 859 863 877 881 883 887 907 911 919 929 937 941 947 953 967 971 977 983 991 997])\n(some-primes-set []  (set some-primes))\n\n\n(prime-factorize\n  ([n] (prime-factorize (Math/sqrt n) [] (some-primes) n))\n  ([sqrtn factors remaining-primes remaining-candidate]\n   (if (= 1 remaining-candidate) factors\n       (if (zero? (mod remaining-candidate (first remaining-primes)))\n         (recur (Math/sqrt (/ remaining-candidate (first remaining-primes))) (conj factors (first remaining-primes)) remaining-primes (/ remaining-candidate (first remaining-primes)))\n         (recur sqrtn factors (rest remaining-primes) remaining-candidate)))))\n\n(gcd\n  [a b]\n  (let [[afact bfact] (map prime-factorize [a b])\n        [ag bg] (map (partial group-by identity) [afact bfact])\n        unionkeys (set (concat (keys ag) (keys bg)))\n        minfacts (into {} (for [k unionkeys] (if (< (count (get ag k)) (count (get bg k))) [k (get ag k)] [k (get bg k)])))]\n    (reduce * (flatten (filter identity (vals minfacts))))))\n]\n  gcd)", "user": "554b9c3ee4b0a04f79299594"}, {"problem": 66, "code": "(fn [& x]\n   (let [[a b] x]\n   (reduce (fn [r e]\n             (if (and (= (mod a e) 0) (= (mod b e) 0))\n             e\n               r)\n             ) \n           1 (take (last (sort x)) (map inc (range)))))\n   )", "user": "554b2151e4b0a04f79299580"}, {"problem": 66, "code": "(fn gcd [a b]\n   (cond (< a b) (recur b a)\n         (= b 0) a\n         :else (recur b (mod a b))))", "user": "554b7056e4b0a04f79299583"}, {"problem": 66, "code": "(fn [a b]\n    (let [divisors (fn [n] (filter #(zero? (mod n %)) (range 1 (inc n))))]\n        (apply max\n            (clojure.set/intersection \n                (set (divisors a)) \n                (set (divisors b))))))", "user": "54fdaeace4b07d26eda61d39"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b) a\n    (recur b (mod a b))))", "user": "553b0d95e4b09218d5f44fff"}, {"problem": 66, "code": "(fn [x y]\n  (loop [cd (max x y)]\n    (if (and (= 0 (mod x cd))\n             (= 0 (mod y cd)))\n      cd\n      (recur (dec cd)))))", "user": "54d5343fe4b0a52adc2e200a"}, {"problem": 66, "code": "(fn [x y](reduce max (filter #(and (= 0 (mod x %)) (= 0 (mod y %))) (range 1 (inc (min x y))))))", "user": "54f86b8ce4b01ecee9d88828"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))))", "user": "5532a04ee4b09218d5f44f82"}, {"problem": 66, "code": "(fn bla [a b]\n  ( if(= b 0)\n    \ta\n  \t\t(recur b (mod a b))\n  )\n)", "user": "555093b2e4b00713264bd9ab"}, {"problem": 66, "code": "(fn [x y]\n(loop [a x\n          b y\n          t b]\n  (if (= b 0)\n      a\n      (recur b (mod a b) b))))", "user": "5283a919e4b0239c8a67adbe"}, {"problem": 66, "code": "(fn [a b]\n  (cond\n   (= a b) a\n   (> a b) (recur (- a b) b)\n   :else (recur (- b a) a)))", "user": "554edb85e4b00713264bd99a"}, {"problem": 66, "code": "(fn [a b] (if (= b 0) a (recur b (rem a b))))", "user": "543366dde4b0b6b47310fcdf"}, {"problem": 66, "code": "#(loop [a % b %2] (if (= b 0) a (recur b (mod a b))))", "user": "54126d0ce4b01498b1a719d5"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (> b a) (gcd b a)\n    (if (zero? b) a\n      (gcd b (mod a b)))))", "user": "5553b924e4b0deb715856e06"}, {"problem": 66, "code": "#(loop [a %1 b %2] (if (zero? b) a (recur b (mod a b))))", "user": "547c2c6ce4b0c51c1f4d72e3"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond \n   (< a b) (recur b a)\n   (= b 0) a\n   :else (recur b (rem a b))))", "user": "52ce1abfe4b07d0d72b27389"}, {"problem": 66, "code": "(fn gcd \n  ([a b] (gcd a b (min a b)))\n  ([a b c] (if (and (= 0 (mod a c)) (= 0 (mod b c))) c (gcd a b (dec c))))\n)", "user": "5280a1ece4b0757a1b171407"}, {"problem": 66, "code": "(fn [x y]\n  (reduce #(if (and (= 0 (mod x %2))\n                    (= 0 (mod y %2)))\n             %2 %1) 1 (range 1 (inc x))))", "user": "4fa7de4ce4b081705acca1c9"}, {"problem": 66, "code": "(fn gcd [ a b ]\n  (if (= a b)\n    a\n    (gcd (min a b) (- (max a b) (min a b)))))", "user": "55536a8ae4b0deb715856e03"}, {"problem": 66, "code": "(fn [x y]\n  (if (zero? y)\n    x\n    (recur y (mod x y))))", "user": "555521a5e4b0deb715856e12"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? (mod a b))\n    b\n    (recur b (mod a b))))", "user": "5264383be4b03e8d9a4a70cb"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (mod a b))\n  ))", "user": "552d2e4fe4b076ab5578f7e1"}, {"problem": 66, "code": "(fn gcd [m n] \n  (cond (< m n) (gcd n m)\n        (= 0 n) m\n        :else (gcd n (rem m n))))", "user": "554b8572e4b0a04f79299589"}, {"problem": 66, "code": "(fn gcd \n  [a b]\n  (cond \n    (> a b) (recur b (- a b))\n    (< a b) (recur a (- b a))\n    (= a b) a))", "user": "53161a56e4b08068f379ed3e"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond (= a b) a\n        (> a b) (gcd (- a b) b)\n        :else (gcd a (- b a))))", "user": "547884d7e4b0c51c1f4d72bd"}, {"problem": 66, "code": "(fn [x y]\n  (cond (zero? x) y\n        (zero? y) x\n        :else (recur y (mod x y))))", "user": "4e7e032b535db169f9c796fc"}, {"problem": 66, "code": "(fn [& nums]\n  (let [[big lil] (sort > nums)]\n    (loop [a big\n           b lil]\n      (let [q (quot a b)\n            r (rem a b)]\n        (if (zero? r)\n          b\n          (recur b r))))))", "user": "53684a2fe4b0243289761e8c"}, {"problem": 66, "code": "(fn gcd\n  [x y]\n  (if (= y 0)\n    x\n    (gcd y (rem x y))))", "user": "54eee38ce4b024c67c0cf878"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (or (<= a 0) (<= b 0))\n    (max a b)\n    (if (> a b)\n      (recur (mod a b) b)\n      (recur a (mod b a)))))", "user": "5486e317e4b0e286459a11c0"}, {"problem": 66, "code": "(fn gcd [x y]\n  (loop [x x y y]\n    (if (zero? y) x (recur y (mod x y)))))", "user": "554dfe97e4b00713264bd98c"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "53572767e4b04ce2eb3ed277"}, {"problem": 66, "code": "(fn [a b]\n  (let [divs (reverse (range 1 (inc (min a b))))]\n    (some #(if (and (= 0 (mod a %))\n                 (= 0 (mod b %)))\n             %) divs)))", "user": "553638bae4b09218d5f44fba"}, {"problem": 66, "code": "(fn gcd [n d]\n  (let [r (mod n d)]\n   (cond \n    (= r 0) d\n    (= r 1) 1\n    :else (gcd d r))\n     \n   ))", "user": "51427a8be4b0b50abeb46b37"}, {"problem": 66, "code": "(fn gcd [a b]\n  (loop [a a b b]\n    (if (zero? b) a\n        (recur b (mod a b)))))", "user": "5540f5dee4b0a04f79299509"}, {"problem": 66, "code": "(fn it [x y] (if (= y 0) x (it y (mod x y))))", "user": "5504dd64e4b086ebe8a79c83"}, {"problem": 66, "code": "(fn [x y]\n  (apply max\n   (filter\n    #(= 0 (mod x %) (mod y %))\n    (range (min x y) 0 -1))))", "user": "5540fe42e4b0a04f7929950a"}, {"problem": 66, "code": "(fn [a b] (if (= 0 b) a (recur b (mod a b))))", "user": "555ac933e4b0deb715856e49"}, {"problem": 66, "code": "(fn [a b]\n  (loop [i 1 m 1 l (min a b)]\n    (if (> i l)\n      m\n      (recur (inc i)\n             (if (and (= 0 (rem a i))\n                      (= 0 (rem b i)))\n               i\n               m)\n             l))))", "user": "54cad59ee4b057c6fda3a26e"}, {"problem": 66, "code": "(fn [a b] (loop [x (max a b)\n                    y (min a b)]\n               (if (pos? (rem x y))\n                 (recur y (rem x y))\n                 y)))", "user": "5169b23fe4b03f62cda68cee"}, {"problem": 66, "code": "(fn gcd [a b] (if (> a b)\n                  (gcd (- a b) b)\n                  (if (> b a)\n                    (gcd (- b a) a)\n                    a)\n                  )\n  )", "user": "54857657e4b0e286459a11ac"}, {"problem": 66, "code": "(fn [m n]\n  (if (= m n) m\n    (if (> m n)\n      (recur (- m n) n)\n      (recur m (- n m)))))", "user": "555287a4e4b0deb715856df5"}, {"problem": 66, "code": "(fn gcd [x y]\n  (cond\n    (> x y) (gcd (- x y) y)\n    (> y x) (gcd x (- y x))\n    :else x))", "user": "55150524e4b055c2f668d4d9"}, {"problem": 66, "code": "(fn [a b]\n   (loop [divid a\n          divis b\n          quotient (quot divid divis)\n          remainder (rem divid divis)]\n     (if (zero? remainder)\n       divis\n       (recur\n         divis\n         remainder\n         (quot divis remainder)\n         (rem divis remainder)))))", "user": "52b89d55e4b07a9af57922b3"}, {"problem": 66, "code": "(fn [a b]\n  (apply max \n   (clojure.set/intersection\n    (set (filter #(= (mod a %) 0) (range 1 (inc a))))\n    (set (filter #(= (mod b %) 0) (range 1 (inc b)))))))", "user": "535944d6e4b04ce2eb3ed296"}, {"problem": 66, "code": "(fn divisors[x y] (apply max (clojure.set/intersection (set (filter #(zero? (rem x %)) (range 1 (inc x)))) (set (filter #(zero? (rem y %)) (range 1 (inc y)))))))", "user": "54f296efe4b024c67c0cf8c8"}, {"problem": 66, "code": "(fn gcd[a b]\n  (if (>= a b)\n    (if (zero? (mod a b))\n    b\n    (gcd b (mod a b)))\n    (if (zero? (mod b a))\n    a\n    (gcd a (mod b a)))))", "user": "54fe57f6e4b07d26eda61d42"}, {"problem": 66, "code": "#(first (filter (fn [x] (and (= (mod %1 x) 0) \n                             (= (mod %2 x) 0)))\n                (reverse (range (inc (min %1 %2))))))", "user": "545ddac3e4b01be26fd74676"}, {"problem": 66, "code": "(fn [a b]\n  (loop [n 1 gcd 1]\n    (let [gcd (if (and\n                  (= 0 (rem a n))\n                  (= 0 (rem b n)))\n                n\n                gcd)]\n      (if (>= n (min a b))\n        gcd\n        (recur (inc n) gcd)))))", "user": "556159fae4b0c656e3ff17c7"}, {"problem": 66, "code": "(fn [i j]\n  (if (= 0 j)\n    i\n    (recur j (rem i j))))", "user": "54caaa48e4b057c6fda3a267"}, {"problem": 66, "code": ";; http://en.wikipedia.org/wiki/Greatest_common_divisor#Using_Euclid.27s_algorithm\n(fn gcd [a b]\n  (if (= b 0) a\n    (gcd b (mod a b))))", "user": "555a5731e4b0deb715856e44"}, {"problem": 66, "code": "#(if (zero? %2) % (recur %2 (mod % %2)))", "user": "53f5666ee4b0db01ade6f9cf"}, {"problem": 66, "code": "(fn gcd [a b]\r\n  (if (or (= b 0) (= a b)) a\r\n    (if (< a b) (gcd b a)\r\n      (gcd b (mod a b)))))", "user": "555bd27ae4b0b056612e2244"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "555da2c4e4b0a2eb076a39ae"}, {"problem": 66, "code": "(fn gcf [a b]\n  (let [r (mod a b)]\n    (if (= r 0) b (gcf b r))))", "user": "53571732e4b04ce2eb3ed275"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n   (= a 0) b\n   (= b 0) a\n   (> a b) (gcd b (mod a b))\n   :else (gcd a (mod b a))))", "user": "54b912b3e4b0ed20f4ff6ea1"}, {"problem": 66, "code": "(fn  [i1 i2] (let [smaller (min i1 i2)\n                                      larger (max i1 i2)\n                                      divListOfSmaller (filter #(= (rem smaller %) 0) (range 1 (inc smaller)))]\n                               (last (filter #(= (rem larger %) 0) divListOfSmaller))))", "user": "554bc64ae4b0a04f79299598"}, {"problem": 66, "code": "#(loop [a %1 b %2 d (min a b)] (let [da (/ a d) db (/ b d)] (if (or (= 1 d) (and (= (int da) da) (= (int db) db))) d (recur a b (dec d)))))", "user": "553c05b7e4b09218d5f45011"}, {"problem": 66, "code": "#(loop [a %1 b %2] (if (= 0 b) a (recur b (mod a b))))", "user": "52e851bfe4b09f7907dd149a"}, {"problem": 66, "code": "#(loop [a % b %2] \n   (if (= 0 b) \n     a \n     (recur b (mod a b))))", "user": "5562f08ae4b0c656e3ff17df"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n    (= a b) a\n    (> a b) (gcd (- a b) b)\n    :else (gcd a (- b a))))", "user": "5540cc0ce4b0a04f79299505"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (recur b (rem a b))))", "user": "55586905e4b0deb715856e2b"}, {"problem": 66, "code": "(fn [a b]\n     (cond\n       (= b 0) (Math/abs a)\n       :else (recur b (mod a b))\n     )\n  )", "user": "53ecd01fe4b0d648e757f4b9"}, {"problem": 66, "code": "(fn gcd [x y]\n  (let [r (rem x y)]\n    (if (= r 0) y\n      (gcd y r))))", "user": "5550b5a0e4b00713264bd9ad"}, {"problem": 66, "code": "(fn [a b]\n  (if (> a b)\n    (recur b a)\n    (if (= a 0)\n      b\n      (recur a (rem b a)))))", "user": "54c5cc17e4b045293a27f624"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "55631739e4b0c656e3ff17e2"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))\n   )\n  )", "user": "4e28ddd1535deb9a81d77efd"}, {"problem": 66, "code": "(fn gcd [a b] (cond (= a b) a (> a b) (recur (- a b) b) :else (recur a (- b a))))", "user": "55645592e4b0c656e3ff1802"}, {"problem": 66, "code": "(fn [x y] \n    (letfn [(divisors [n] (filter #(= 0 (mod n %)) (range 1 (inc n))))]\n        (apply max (clojure.set/intersection (set (divisors x)) \n                                       (set (divisors y))))))", "user": "54f8b6f4e4b01ecee9d8882c"}, {"problem": 66, "code": "#(cond (= %1 %2) %1 (< %1 %2) (recur %2 %1) :otherwise (recur %2 (- %1 %2)))", "user": "555b35f7e4b0deb715856e4b"}, {"problem": 66, "code": "(fn gcd [l r]\n  (let [divisors (fn [n]\n                   (into #{} (filter #(zero? (mod n %)) (range 1 (+ 1 n)))))]\n    (apply max (clojure.set/intersection (divisors l)\n                                         (divisors r)))\n    ))", "user": "5501a1e1e4b07d26eda61d75"}, {"problem": 66, "code": "(fn[x y]\n  (loop [gcd (min x y)]\n    (cond\n      (= 1 gcd) gcd\n      (and (zero? (rem x gcd)) (zero? (rem y gcd))) gcd\n      :else (recur (dec gcd)))))", "user": "556a6137e4b09a3098a524e0"}, {"problem": 66, "code": "#(loop [a %1 b %2]\n   (if (zero? b) a\n     (recur b (mod a b))))", "user": "555f0789e4b0a2eb076a39bf"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "55685aa3e4b0c656e3ff1851"}, {"problem": 66, "code": "(fn gcd [v1 v2]\n  (let [[l g] (if (> v1 v2) (vector v2 v1) (vector v1 v2))]\n    (if (integer? (/ g l))\n      l\n      (recur l (mod g l)))))", "user": "556405e5e4b0c656e3ff17fb"}, {"problem": 66, "code": "(fn [ x y ] \n  (last\n   (filter #( = 0 ( rem x % ) ( rem y % ))\n    (take x\n     (range 1 ( inc x))))))", "user": "556880dae4b0c656e3ff1856"}, {"problem": 66, "code": "#(if (= %2 0) %1 (recur %2 (mod %1 %2)))", "user": "556b83fbe4b09a3098a524ee"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n   (= a b) a\n   (> a b) (recur (- a b) b)\n   :else (recur a (- b a))))", "user": "556c70dae4b09a3098a524fd"}, {"problem": 66, "code": "#(.gcd (biginteger %1) (biginteger %2))", "user": "53bd8d27e4b0d9a98559a6d6"}, {"problem": 66, "code": "#(last (filter (fn [x] (and (= (rem %1 x) 0) (= (rem %2 x) 0))) (range 1 (inc (min %1 %2)))))", "user": "52c70127e4b0c2d177d6211a"}, {"problem": 66, "code": "(fn [a b] (cond \n            (< a b) \n              (loop [x a]\n                (cond\n                  (and (= 0 (rem a x)) (= 0 (rem b x))) x\n                  :else (recur (dec x))))\n            :else (loop [x b]\n                (cond\n                  (and (= 0 (rem a x)) (= 0 (rem b x))) x\n                  :else (recur (dec x))))))", "user": "5374f931e4b06d7f452d9e2d"}, {"problem": 66, "code": "#(loop [a %1 b %2] (if (zero? (mod a b)) b (recur b (mod a b)) ))", "user": "524f3e6de4b0541d1855b805"}, {"problem": 66, "code": "(fn [one two]\n   (let [max (max one two) min (min one two)]\n     (if (= 0 min)\n       max\n       (recur min (rem max min)))))", "user": "556f443be4b09a3098a5251e"}, {"problem": 66, "code": "(fn gcd [a b] (if (= 0 b) a (gcd b (mod a b))))", "user": "55702247e4b09a3098a5252a"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "55702081e4b09a3098a52529"}, {"problem": 66, "code": "(fn gcd [a b]\n\t(if (= a b)\n\t\ta\n\t\t(let [mx (max a b) mn (min a b)]\n\t\t\t(gcd mn (- mx mn))\n\t\t\t)\n\t\t)\n\t)", "user": "5545477fe4b0a04f79299531"}, {"problem": 66, "code": "(fn [a b]\n    (let [smallest (min a b)]\n      (loop [i smallest]\n        (let [intoa (= 0 (mod a i))\n              intob (= 0 (mod b i))\n              iscd (and intoa intob)]\n          (if iscd\n            i\n            (recur (dec i))))))\n    \n    )", "user": "554a75c9e4b0a04f79299575"}, {"problem": 66, "code": "(fn gcdiv [i j] (cond (zero? i) j (zero? j) i :else (recur (mod (max i j) (min i j)) (min i j))))", "user": "556a3243e4b09a3098a524de"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "550fb0bfe4b06e50f9beb17b"}, {"problem": 66, "code": "(fn [a b]\n  (first \n   (filter #(and (= (rem a %) (rem b %) 0)) (iterate dec a))))", "user": "55625903e4b0c656e3ff17d7"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [[a b] [(max a b) (min a b)]]\n    (if (= 0 b)\n      a\n      (gcd b (mod a b)))))", "user": "5550bcece4b00713264bd9ae"}, {"problem": 66, "code": "(fn [a b]\n  (first \n    (for [x (range (min a b) 0 -1)\n          :when (every? identity\n                 (list (= 0 (mod a x))\n                 (= 0 (mod b x))))]\n      x)))", "user": "53065acbe4b02e8216869792"}, {"problem": 66, "code": "#(loop [a %1 b %2]\n  (if (= 0 b)\n    a\n    (recur b (mod a b))))", "user": "550fa523e4b06e50f9beb17a"}, {"problem": 66, "code": "(fn gcd [a b]\n  (apply max\n         (filter\n           #(and (zero? (rem a %))\n                 (zero? (rem b %)))\n           (range 1 (inc a)))))", "user": "5573ffb5e4b0aa18f790f3fd"}, {"problem": 66, "code": "(fn [a b]\n  (let [x (max a b)\n        y (min a b)\n        z (rem x y)]\n    (if (= 0 z)\n           y\n           (recur y z))))", "user": "5475d755e4b0c51c1f4d72a0"}, {"problem": 66, "code": "#(loop[a %1 b %2 current a](if(and (zero? (mod a current)) (zero? (mod b current))) current (recur a b (dec current))))", "user": "5565d5e4e4b0c656e3ff181f"}, {"problem": 66, "code": "(fn [x y] (some #(when (= 0 (mod x %) (mod y %))%) (range (min x y) 0 -1)))", "user": "52a4879ce4b0c58976d9abdb"}, {"problem": 66, "code": "(fn [x y]\n  (->> (min x y)\n       range\n       (map inc)\n       (reduce (fn [q0 q1]\n                 (if (and (= 0\n                             (rem x q1)\n                             (rem y q1)))\n                   q1\n                   q0)))))", "user": "52470d42e4b05ef8e38e6350"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (mod a b))))", "user": "54e345a1e4b024c67c0cf7db"}, {"problem": 66, "code": "(fn [a b] \n     (if (zero? b)\n       a\n       (recur b (mod a b))))", "user": "553fa883e4b0a04f792994f9"}, {"problem": 66, "code": "(fn \n  [a b]\n  (if (zero? b) a (recur b (mod a b))))", "user": "554f7ef2e4b00713264bd9a1"}, {"problem": 66, "code": "#(loop [m %1 k %2]\n   (cond \n    (= m k) k\n    (> k m) (recur (- k m) m)\n    :else (recur k (- m k)\n    )\n   ))", "user": "52503747e4b0541d1855b828"}, {"problem": 66, "code": "(fn [a b]\n  (loop [x (max a b)\n         y (min a b)]\n    (if (= y 0)\n      x\n      (recur y (mod x y)))))", "user": "4ec6297b535d6d7199dd36c4"}, {"problem": 66, "code": "(fn [a b]                                                                                                     \n  (cond (= a b) a\n        (> a b) (recur b a)                                                                                                                                                                               \n        :else (recur a (- b a))))", "user": "541b41d1e4b01498b1a71a65"}, {"problem": 66, "code": "(fn [a b] \n  (\n   reduce (fn iter-ate [x y] \n          (if (and (= (mod a y) 0) (= (mod b y) 0))\n            y\n            x\n          )\n    )\n   (range 1 (+ (min a b) 1))\n  )\n)", "user": "5559b443e4b0deb715856e3c"}, {"problem": 66, "code": "(fn[Num1 Num2]\n    ; for each of the parameters, find all the divisors\n    ; range gives all number above\n    ; for each of the ranges, we keep divisors\n    ; store in a set\n    ; reduce it with intersection\n    ; sort then take the last which means the greatest\n      (last(sort\n        (reduce (fn[a b] (clojure.set/intersection a b) )\n         (map (fn[x] (set (filter (fn[y]  (= 0 (mod x y)) ) (range 1 (+ x 1))))   ) [Num1 Num2])\n        ))\n      )\n  )", "user": "55757e81e4b05c286339e063"}, {"problem": 66, "code": "#(if (= %2 0) %1 (recur %2 (mod  %1 %2)))", "user": "557954aae4b05c286339e092"}, {"problem": 66, "code": "#(if (= 0 %2) %1 (recur %2 (mod %1 %2)))", "user": "5576f299e4b05c286339e077"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (let [amodb (mod a b)]\n    (cond\n      (= (mod a b) 1) 1\n      (= (mod a b) 0) (min a b)\n      :else (gcd b (mod a b)))))", "user": "506f0968e4b09350ab4199f5"}, {"problem": 66, "code": "(fn gcd [a' b']\n   (loop [a (max a' b')\n         b (min a' b')]\n     (if (zero? b)\n       a\n       (recur b (mod a b)))))", "user": "4f04664a535dcb61093f6bc1"}, {"problem": 66, "code": "(fn [d1 d2] \n (apply max (for [x (range 1 (max d1 d2))\n        :when (and (zero? (mod d1 x))\n               (zero? (mod d2 x)))]\n       x\n  ))\n)", "user": "556f2009e4b09a3098a52519"}, {"problem": 66, "code": "(fn \n  [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "558306dfe4b05c286339e110"}, {"problem": 66, "code": "#(if (zero? %2) % (recur %2 (mod % %2)))", "user": "552a793ee4b0ffed3738f955"}, {"problem": 66, "code": "#(cond\n    (= 4 %2) 2\n    (= 5 %2) 5\n    (= 7 %2) 1\n    :else 33)", "user": "54e1939ce4b024c67c0cf7c5"}, {"problem": 66, "code": "(fn [a b] \n  (letfn [\n        (divs [x] \n              (->> \n               (range 1 (inc x)) \n               (filter #(= 0 (mod x %)))\n               set))]\n  (->> \n   (clojure.set/intersection (divs a) (divs b))\n   sort\n   last)))", "user": "5581747fe4b05c286339e0fa"}, {"problem": 66, "code": "(fn [x y]\n  (loop\n    [greatest (if (> x y) y x)]\n    (if (= (mod x greatest) (mod y greatest) 0)\n      greatest\n      (recur (dec greatest)))))", "user": "52979551e4b02ebb4ef75043"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [small (min a b)\n        big (max a b)]\n    (if (= (mod big small) 0) small\n      (recur small (mod big small)))))", "user": "551afdf8e4b07993ea3788cb"}, {"problem": 66, "code": "(fn [a b]\n   (loop [gcd 1 c 1]\n     (if (> c (min a b)) gcd\n       (if (and (= 0 (mod a c)) (= 0 (mod b c))) (recur c (inc c))\n         (recur gcd (inc c))))))", "user": "558378dce4b05c286339e115"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (let [higher (max a b)\n        lower (min a b)\n        max-div (quot higher 2)]\n    (loop [cur-div max-div]\n      (if (and (zero? (rem lower cur-div))\n               (zero? (rem higher cur-div)))\n        cur-div\n        (recur (dec cur-div))))))", "user": "54e79094e4b024c67c0cf818"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))))", "user": "557e8326e4b05c286339e0d7"}, {"problem": 66, "code": "(fn my-gcd\n  [x y]\n  (loop [m (max x y) n (min x y)]\n    (if (zero? (rem m n))\n      n\n      (recur n (rem m n)))))", "user": "557e9d17e4b05c286339e0d8"}, {"problem": 66, "code": "#(loop [a % b %2]\n   (if (zero? b) a\n     (recur b (mod a b))))", "user": "5585aa48e4b001b0851d7510"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "54bad977e4b0ed20f4ff6eb9"}, {"problem": 66, "code": "(fn mygcd [x y] (cond (= x y) x (> x y) (mygcd (- x y) y) :else (mygcd x (- y x))))", "user": "558466fce4b04192f3441eee"}, {"problem": 66, "code": "(fn [x y]\n  (let [[x y] (sort [x y])]\n    (loop [x x\n           y y\n           acc x]\n      (if (= 0 (mod y acc) (mod x acc))\n        acc\n        (recur x y (dec acc))))))", "user": "555f3bfde4b0a2eb076a39c1"}, {"problem": 66, "code": "(fn gcd [a b] (if (> b a ) (gcd b a)  (if (= b a) a (gcd b (- a b)))))", "user": "55896a0ce4b059ccff29b204"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0) a\n    (gcd b (mod a b))))", "user": "51bfc1f0e4b0e49ef9037dd4"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5589e88ae4b0277789237610"}, {"problem": 66, "code": "(fn eucl [a1 b2]\n  (loop [a (max a1 b2)\n         b (min a1 b2)\n         r (rem a b)]\n    (if (= 0 r) \n      b \n      (recur b r (rem b r)))))", "user": "558bb38fe4b0277789237631"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "54cbd6bae4b057c6fda3a282"}, {"problem": 66, "code": "(fn [& x] (apply max (apply clojure.set/intersection (map #(into #{} %) (map (fn [i] (filter #(zero? (mod i %)) (range 1 (inc i)))) x)))))", "user": "4f070ce6535dcb61093f6c1e"}, {"problem": 66, "code": "(fn gcd [a b]                                                                                                                   \n    (cond                                                                                                                                               \n        (= a b) a                                                                                                               \n        (> a b) (gcd (- a b) b)                                                                                                                         \n        :else (gcd a (- b a))))", "user": "558b50d5e4b027778923762b"}, {"problem": 66, "code": "(fn [n1 n2]\n   (let [smaller (if (>= n1 n2) n2 n1)\n         bigger (if (> n1 n2) n1 n2)]\n     (loop [divisor smaller]\n       (if (and (= 0 (rem smaller divisor)) (= 0 (rem bigger divisor)))\n         divisor\n         (if (= 0 divisor)\n           nil\n           (recur (dec divisor)))))))", "user": "55860905e4b001b0851d7516"}, {"problem": 66, "code": "#(if (zero? %) %2 (recur (mod %2 %) %))", "user": "5589a735e4b059ccff29b206"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "55818b0ee4b05c286339e0fb"}, {"problem": 66, "code": "(fn f [a b] \n(if (zero? b) a (recur b (rem a b))))", "user": "55632016e4b0c656e3ff17e4"}, {"problem": 66, "code": "(fn [& args]\n   (apply max (filter (fn [d]\n                        (apply = (conj (map #(mod % d) args) 0)))\n                      (range 1 (inc (apply min args))))))", "user": "55895eade4b059ccff29b202"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (< a b)\n    (gcd b a)\n    (if (= 0 (rem a b))\n      b\n      (gcd a (rem a b)))))", "user": "501b1efee4b0b12d9c5f4d82"}, {"problem": 66, "code": "(fn mydiv\n\t[n1 n2]\n\t(loop\n\n\t\t[\tc 1\n\t\t \tres 1\n\t\t \tlimit (if (<= n1 n2) n1 n2)\n\t\t]\n\n\n\t\t\n\t\t(if (>\tc limit)\n\t\t\t\tres\n\t\t\t\t(if (and (= 0 (rem n1 c))\n\t\t\t\t\t\t (= 0 (rem n2 c))\n\t\t\t\t\t\t)\n\n\t\t\t\t\t(recur (inc c) c limit)\n\t\t\t\t\t(recur (inc c) res limit)\n\n\n\n\t\t\t\t\t)\n\t\t\t)\n\n\n\n\t\t))", "user": "55897fe2e4b059ccff29b205"}, {"problem": 66, "code": "(fn [a b]\n  (->> (range (inc (min a b)) 0 -1)\n       (filter #(and (zero? (mod a %)) (zero? (mod b %))))\n       (first)))", "user": "54d22860e4b0e8a36923e5ef"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "558d7dd3e4b0277789237647"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (rem a b))))", "user": "557f7c8be4b05c286339e0e0"}, {"problem": 66, "code": "(fn [a b]\n \t (if (= b 0)\n   \t   a\n       (recur b (mod a b))))", "user": "5590e55de4b0277789237676"}, {"problem": 66, "code": ";; Euclidean algorithm <3\n(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "53e76363e4b036ad0777e47b"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [tmp (- a b)] \n    (if (neg? tmp) \n      (gcd b a) \n      (if (= tmp b) b \n        (gcd b tmp)))))", "user": "552f300fe4b076ab5578f7ff"}, {"problem": 66, "code": "(fn gcd [a, b] \n    (let [remainder (apply mod (reverse (sort [a, b])))\n          smaller (min a b)]\n      (if (= remainder 0)\n          smaller\n          (gcd remainder smaller))))", "user": "55893b09e4b059ccff29b1fe"}, {"problem": 66, "code": "(fn g [x y]\n  (if (= 0 y)\n    x\n    (g y (mod x y))\n  ))", "user": "559279b7e4b0604b3f94d58c"}, {"problem": 66, "code": "(fn [a b]\n    (if (= b 0)\n      a\n      (recur b (mod a b))))", "user": "531c6e72e4b08068f379eda0"}, {"problem": 66, "code": "#(loop [a %1 b %2]\n   (if (= b 0) a (recur b (mod a b))))", "user": "5590ebb1e4b0277789237677"}, {"problem": 66, "code": "#(if (= %2 0) % (recur %2 (rem % %2)))", "user": "558f4fbae4b0277789237661"}, {"problem": 66, "code": "#(loop [d (min %1 %2)]\n   (if (= 0 (mod %1 d) (mod %2 d))\n     d\n     (recur (dec d))))", "user": "555883c5e4b0deb715856e2d"}, {"problem": 66, "code": "#(cond \n   (zero? %) %2\n   (zero? %2) %  \n   (> %2 %) (recur (mod %2 %) %)\n   :else (recur (mod % %2) %2))", "user": "4faf97d8e4b081705acca258"}, {"problem": 66, "code": "#(last\n  (filter\n   (fn [x]\n     (and (= 0 (mod %1 x)) (= 0 (mod %2 x))))\n          (range 1 (max %1 %2))))", "user": "55933c7ae4b0c79f6e1db938"}, {"problem": 66, "code": "(fn gcd [a b]\n  (loop [x a\n         y b]\n    (let [r (rem x y)]\n      (if (= 0 r)\n      \ty\n      \t(recur y r)))))", "user": "5587d8b3e4b059ccff29b1e8"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "55630cc1e4b0c656e3ff17e0"}, {"problem": 66, "code": "(fn [a b]\n  (loop [a a b b]\n    (if (= a 0)\n      b\n      (if (= b 0)\n        a\n        (recur b (mod a b))))))", "user": "55934bebe4b0c79f6e1db93b"}, {"problem": 66, "code": "(fn gcd [x y]\n  (if (= x y) x\n      (if (< x y) \n        (gcd x (- y x))\n          (gcd (- x y) y)\n          )\n      )\n)", "user": "5581a6dae4b05c286339e0fe"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (gcd b (mod a b))))", "user": "4fdb0c0ae4b05e33b9224f57"}, {"problem": 66, "code": "(fn gcd [a b] \n  (cond\n   (= a b) a\n   (> a b) (gcd (- a b) b)\n   :else   (gcd a (- b a))))", "user": "54530382e4b0e397800069cc"}, {"problem": 66, "code": "(fn g [a b] (if (= b 0) a (g b (rem a b))))", "user": "5585f088e4b001b0851d7513"}, {"problem": 66, "code": "(fn  [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5592bf9fe4b0c79f6e1db933"}, {"problem": 66, "code": "(fn [m n]\n  (loop [a (max m n)\n         b (min m n)]\n    (if (= (rem a b) 0)\n      b\n      (recur b\n             (rem a b)))))", "user": "55995fa7e4b031d6649c9ba9"}, {"problem": 66, "code": "(fn mygcd [x y] (let [zb (mod x y)] (if (= zb 0) y (mygcd y zb))))", "user": "5576e78de4b05c286339e075"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0) a\n    (gcd b (mod a b))))", "user": "558a81fbe4b027778923761c"}, {"problem": 66, "code": "(fn [a b]\n  (apply\n   max\n   (filter\n    #(and\n      (= (rem a %) 0)\n      (= (rem b %) 0))\n    (range\n     1\n     (+\n      (min a b)\n      1)))))", "user": "55882c84e4b059ccff29b1f2"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [div ((fn lowest-div [a b] \n    \t(first \n    \t (remove \n          (fn [d] (not (and \n                   (= 0 (rem a d))\n                   (= 0 (rem b d))))) \n          (range 2 (+ 1 (min a b)))))) a b)]\n    (if (nil? div) 1\n      (* div (gcd (/ a div) (/ b div))))))", "user": "554a270fe4b0a04f79299570"}, {"problem": 66, "code": "(fn g [a b]\n  (if (= 0 a) b\n    (g (mod b a) a)))", "user": "559c13c5e4b066d22e731f61"}, {"problem": 66, "code": "(fn [x y]\n  (loop [x x, y y]\n    (cond (= 0 x) y\n          (= 0 y) x\n          (>= x y) (recur (- x y) y)\n          :else (recur (- y x) x))))", "user": "555ee545e4b0a2eb076a39bd"}, {"problem": 66, "code": "(fn [a b]\n  (loop [div (min a b)]\n    (if (and (zero? (mod a div)) (zero? (mod b div)))\n               div\n               (recur (dec div)))))", "user": "559bdf16e4b066d22e731f5a"}, {"problem": 66, "code": "(fn gcd [n m]\n  (loop [greater (max n m)\n         smaller (min n m)]\n    (if (= (rem greater smaller) 0)\n      smaller\n      (recur smaller\n             (rem greater smaller)))))", "user": "559d33b3e4b0ec2b359424d9"}, {"problem": 66, "code": "(fn\n  [x y]\n  (let [small (if (> x y) y x)]\n    (loop [test small]\n      (if (or (= 1 test) (and (zero? (rem x test)) (zero? (rem y test))))\n        test\n        (recur (dec test))))))", "user": "5369d072e4b0243289761ea1"}, {"problem": 66, "code": "(fn [a b] (if (= b 0) a (recur b (rem a b))))", "user": "559b2ad1e4b066d22e731f4e"}, {"problem": 66, "code": "#(let [x %1 y %2 gcd (min x y)]\n   (loop [divisor gcd]\n   \t(if (= 0 (reduce + [(mod x divisor) (mod y divisor)]))\n      divisor\n      (recur (dec divisor)))))", "user": "5587ddd9e4b059ccff29b1ea"}, {"problem": 66, "code": "(fn [a b]\n  (if \n    (zero? b) a\n    (recur b (mod a b))))", "user": "54dce62be4b024c67c0cf78b"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [r (mod a b)]\n\t(if (= 0 r) \n      b\n      (gcd b r))))", "user": "5583888ae4b05c286339e117"}, {"problem": 66, "code": "#(loop [a (max %1 %2)] (if (and (= (mod %1 a) 0) (= (mod %2 a) 0)) a (recur (dec a))))", "user": "5596af34e4b04c1e5c31d758"}, {"problem": 66, "code": "(fn gcd [a b] (if (= 0 b) a (gcd b (mod a b))))", "user": "55306f9de4b076ab5578f814"}, {"problem": 66, "code": "(fn [x y]\n  (let [valid? (fn [n x y] (= 0 (mod x n) (mod y n)))]\n    (last (reduce (fn [res n] (if (valid? n x y) (conj res n) res))           \n                  []\n            \t  (range 1 100)))\n    )\n  )", "user": "5510d948e4b06e50f9beb18d"}, {"problem": 66, "code": "(fn [a b]\n    (loop [a a b b d 0]\n      (let [ie? (every-pred integer? even?)\n            e? (every? ie? [a b])\n            xf #(cond (ie? %1) (/ %1 2)\n                  (and (not (ie? %2)) (> %1 %2)) (/ (- %1 %2) 2)\n                  :else %1)]\n        (if (and (not e?) (= a b))\n          (*' a (apply * (repeat d 2)))\n          (recur (xf a b) (xf b a) (if e? (inc d) d))))))", "user": "55342ee0e4b09218d5f44f98"}, {"problem": 66, "code": "(fn gcd [a b] (if (= b 0) a (gcd b (rem a b))))", "user": "55a12668e4b0acc240e3150b"}, {"problem": 66, "code": "(fn [a b] (if (= 0 b) a (recur b (mod a b))))", "user": "559972d1e4b031d6649c9bab"}, {"problem": 66, "code": "(fn[a b]\n  (let [dv (fn[x] (set (filter #(zero? (rem x %)) (range 1 (inc x)) )))]\n    (apply max (clojure.set/intersection (dv a) (dv b)))))", "user": "559c3d73e4b066d22e731f65"}, {"problem": 66, "code": "(fn [& vs] (let [svs (sort vs)]\n             (if (zero? (rem (second svs) (first svs)))\n               (first svs)\n                 (loop [gcd (int (/ (first svs) 2))\n                        x (first svs)\n                        y (second svs)]\n                   (if (and (zero? (rem x gcd)) (zero? (rem y gcd)))\n                     gcd\n                     (if (= gcd 1)\n                       1\n                       (recur (dec gcd) x y)))))))", "user": "559a8816e4b066d22e731f41"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b) a (recur b (mod a b))))", "user": "5594e0e3e4b0c79f6e1db95b"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "54a96a15e4b09f271ff37cad"}, {"problem": 66, "code": "(fn [a b] (if (= a 0) b (recur (mod b a) a)))", "user": "559b55d6e4b066d22e731f54"}, {"problem": 66, "code": "(fn [x y]\n  (cond \n   (= x y) x\n   (< x y) (recur x (- y x))\n   :else   (recur (- x y) y)))", "user": "5566463ee4b0c656e3ff1831"}, {"problem": 66, "code": "#(loop [gcd (min %1 %2)]\n            (if (and (zero? (rem %1 gcd)) (zero? (rem %2 gcd)))\n              gcd\n              (recur (dec gcd))\n           ))", "user": "55989c25e4b031d6649c9b9b"}, {"problem": 66, "code": "(fn [a b]\n  (loop [n (min a b)]\n    (if (and (= 0 (mod a n))\n             (= 0 (mod b n)))\n      n\n      (recur (dec n)))))", "user": "54a627bce4b09f271ff37c83"}, {"problem": 66, "code": "(fn gcd\n[a b]\n(cond\n(zero? (mod a b)) b\n(< a b) (gcd b a)\n:else (gcd b (mod a b))))", "user": "55306b8ae4b076ab5578f812"}, {"problem": 66, "code": "(fn [a b] \n  (loop [n a\n        d b]\n  (if (= 0 (rem n d))\n    d\n    (recur d (rem n d)))))", "user": "5574c172e4b05c286339e059"}, {"problem": 66, "code": "(fn [a b] (some #(when (= 0 (rem a %) (rem b %)) %) (range (max a b) 0 -1)) )", "user": "559eb160e4b0acc240e314e1"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "user": "553527ede4b09218d5f44fab"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "53c0f4dee4b00fb29b221259"}, {"problem": 66, "code": "(fn [x y]\n  (cond\n    (= y 0) x\n    (= x y) x\n    (> x y) (recur y (rem x y))\n    :else (recur x (rem y x))))", "user": "55a30e9de4b0acc240e3152f"}, {"problem": 66, "code": "(fn gcd [x y]\n  (if (= 0 y) \n    x\n    (gcd y (rem x y))))", "user": "4fc5eb7fe4b0ee37620e1803"}, {"problem": 66, "code": "(fn p66 ([n1 n2] \n           (p66 n1 n2 n2))\n          ([n1 n2 div]\n            (if-not (and (integer? (/ n1 div)) (integer? (/ n2 div))) \n              (p66 n1 n2 (dec div))\n              div\n              )))", "user": "5400e918e4b0de5c41848619"}, {"problem": 66, "code": "(fn  [n1 n2] (some #(if (and (= 0 (mod n1 %)) (= 0 (mod n2 %))) % false) (range n1 0 -1)))", "user": "55a74d46e4b09e57187da2a3"}, {"problem": 66, "code": "(fn [a b]\n  (if (= 0 b) a (recur b (rem a b))))", "user": "5416b4a2e4b01498b1a71a01"}, {"problem": 66, "code": "(fn [x y]\n  (loop [current (int (/ (max x y) 2))]\n    (if (or (= 1 current) (and (= 0 (mod x current) (mod y current))))\n      current\n      (recur (dec current)))))", "user": "5280539ce4b0757a1b1713f3"}, {"problem": 66, "code": "#(some\n  (fn [x]\n    (if (and\n      (= 0 (rem %1 x))\n      (= 0 (rem %2 x))\n    ) x false))\n  (reverse (range 1 (+ 1 (min %1 %2))))\n  )", "user": "55aa5f73e4b0988bba2ad94b"}, {"problem": 66, "code": "(fn [x y] (apply max (filter #(= 0 (mod x %) (mod y %)) (range 1 (+ 1 (max (/ x 2) (/ y 2)))))))", "user": "5593b10ce4b0c79f6e1db943"}, {"problem": 66, "code": "(fn [a b] (loop [cd a]\n             (if (and\n                  (zero? (mod a cd))\n                  (zero? (mod b cd)))\n               cd\n               (recur (dec cd)))))", "user": "53e73fe3e4b036ad0777e478"}, {"problem": 66, "code": "(fn gcd\n  [& nums]\n  (let [divisible? #(zero? (mod % %2))\n        min-num ((comp first sort) nums)\n        min-num-divisibles (filter (partial divisible? min-num) (take min-num (iterate #(inc %) 1)))]\n      (letfn [(find-gcd-rec \n                 [min-nums init-nums]\n                  (if-let [tail-nums (seq init-nums)]\n                    (if (divisible? (first tail-nums) (last min-nums))\n                        (find-gcd-rec min-nums (rest tail-nums))\n                        (find-gcd-rec (butlast min-nums) tail-nums))\n                    (last min-nums)))]\n    ;; invoke recursive func\n    (find-gcd-rec min-num-divisibles nums))))", "user": "5553b729e4b0deb715856e05"}, {"problem": 66, "code": "(fn [n1 n2]\n  (->> (range (min n1 n2))\n       (map inc)\n       (filter #(and (= 0 (mod n1 %)) (= 0 (mod n2 %))))\n       last\n       ))", "user": "559a9a3de4b066d22e731f45"}, {"problem": 66, "code": "(fn [x y]\n  (if (= y 0)\n    x\n    (recur y (mod x y))))", "user": "54d0cedde4b0e8a36923e5d2"}, {"problem": 66, "code": "(fn [a b]\n    (if (= a b)\n      a\n      (recur (min a b) (Math/abs (- a b)))))", "user": "55ac07afe4b03311e7b7328f"}, {"problem": 66, "code": "(fn gcd [x y]\n     (if (= x y)\n       x\n       (if (> x y)\n         (recur (- x y) y)\n         (recur x (- y x)))))", "user": "55a62092e4b0acc240e31554"}, {"problem": 66, "code": "(fn [n1 n2] (loop [g (max n1 n2) l (min n1 n2)]\n       (if (= 0 (rem g l)) l\n         (recur l (rem g l))\n)))", "user": "55adf4d7e4b03311e7b732af"}, {"problem": 66, "code": "(fn [a b]\n  (last (filter #(and (= 0 (mod a %)) (= 0 (mod b %))) (range 1 (max a b))))\n)", "user": "554756b8e4b0a04f79299549"}, {"problem": 66, "code": "(fn [x y]\n  (if (> x y)\n    (loop [i y]\n      (if (and (= (mod x i) 0) (= (mod y i) 0))\n        i\n        (recur (dec i))))\n    (loop [i x]\n      (if (and (= (mod x i) 0) (= (mod y i) 0))\n        i\n        (recur (dec i))))))", "user": "55aaa36fe4b0988bba2ad94f"}, {"problem": 66, "code": "#(loop [a %1 b %2] (if (= a b) a (recur (- (max a b) (min a b)) (min a b))))", "user": "553a43cae4b09218d5f44ff2"}, {"problem": 66, "code": "#(loop [div 2 gcd 1]\n   (if (> div %1)\n     gcd\n     (if (and (= (mod %1 div) 0) (= (mod %2 div) 0))\n       (recur (inc div) div)\n       (recur (inc div) gcd))))", "user": "55afc197e4b002ce9d5cbc18"}, {"problem": 66, "code": "#( (fn gcd [a b]\n  (if (=(rem a b) 0)\n    b\n    (gcd b (rem a b))\n  )) \n(max %1 %2)\n(min %1 %2))", "user": "55b08677e4b002ce9d5cbc23"}, {"problem": 66, "code": "(fn\n  [a b]\n  (loop [i (min a b)]\n    (if (= 0 (rem a i) (rem b i))\n      i\n      (recur (dec i))\n      )))", "user": "53d64811e4b0e771c3025456"}, {"problem": 66, "code": "(fn [a b]\n  (let [h (max a b)\n        l (min a b)]\n    (->> (for [x (range 1 (inc l))]\n           [x (+ (rem h x) (rem l x))])\n         (filter #(= 0 (second %)))\n         last\n         first)))", "user": "54c120d7e4b0ed20f4ff6f1c"}, {"problem": 66, "code": "(fn [num1 num2]\n   (let [greater (max num1 num2)\n         lesser (min num1 num2)]\n    (reduce #(if (zero? (+ (rem greater %2) (rem lesser %2)))\n              %2 %) (range 1 (inc lesser)))))", "user": "559c4236e4b066d22e731f67"}, {"problem": 66, "code": "#(apply \n  (fn gcd [a b]\n    (cond\n     (= a 0) b\n     (= b 0) a\n     :else (gcd b (rem a b))))\n  (if (> %1 %2) [%1 %2] [%2 %1]))", "user": "55a5c3bee4b0acc240e3154e"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b ))))", "user": "50ec409ce4b04edc33777045"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "53cb5559e4b00fb29b2212d2"}, {"problem": 66, "code": "(fn gdc [a b]\n  (cond \n   (= a b) a\n   (> a b) (gdc (- a b) b)\n   (< a b) (gdc a (- b a))))", "user": "5448616be4b032a45b8693c9"}, {"problem": 66, "code": "(fn [& xs] \n  (apply max (apply clojure.set/intersection \n\t(map #(into #{} (for [x (range 1 (inc %))\n                      :let [r (mod % x)]\n                      :when (zero? r)] x)) xs))))", "user": "54236ce1e4b01498b1a71ad1"}, {"problem": 66, "code": "(fn [a b]\n  (loop [x a\n         \t y b]\n      (if (= y 0) x\n        (recur y (mod x y)))))", "user": "53e9dce1e4b036ad0777e4bc"}, {"problem": 66, "code": "(fn [n1 n2]\n    (loop [n 0 i 1]\n        (if (<= i (min n1 n2))\n            (if (= (rem n1 i) (rem n2 i) 0)\n                (recur i (inc i))\n                (recur n (inc i)))\n            n)))", "user": "55975569e4b031d6649c9b8e"}, {"problem": 66, "code": "(fn [x y]\n    (letfn [(divides? [n d] (zero? (mod d n)))\n            (divisors [x] (for [d (range 1 (inc x)) :when (divides? d x)] d))]\n      (let [xdivs (divisors x)\n            ydivs (divisors y)]\n        (apply max (clojure.set/intersection (set xdivs) (set ydivs)))\n        )))", "user": "5351fca5e4b084c2834f4aec"}, {"problem": 66, "code": "(fn \n  [a b]\n  (if (zero? b) \n    a\n    (recur b (mod a b))))", "user": "55231800e4b0882d96d091ad"}, {"problem": 66, "code": "(fn [x y]\n  (loop [div (min x y)]\n  (if (or (pos? (mod x div)) (pos? (mod y div)))\n    (recur (dec div))\n    div)))", "user": "55b527cbe4b01b9910ae2985"}, {"problem": 66, "code": "(fn [num1 num2]\n  (apply max (filter #(and (zero? (mod num1 %)) (zero? (mod num2 %)))\n             (range 1 (inc (min num1 num2))))))", "user": "516f5b7ee4b0ef3e37990e7e"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0) \n    a\n    (gcd b (mod a b))))", "user": "55bbfd60e4b01b9910ae29ed"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a \n    (recur b (mod a b))))", "user": "55aa1637e4b0988bba2ad949"}, {"problem": 66, "code": "(fn[a b](let [x (max a b) y (min a b) m (mod x y)] (if(= 0 m) y (recur y m))))", "user": "555c6344e4b0b056612e224c"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "556204c2e4b0c656e3ff17d2"}, {"problem": 66, "code": "(fn [x y]\n   (let [initial-x x]\n     (->> (iterate #(if (= initial-x %) (quot % 2) (dec %)) (min x y))\n          (filter #(and (= 0 (mod x %)) (= 0 (mod y %))))\n          first)))", "user": "5587cd86e4b059ccff29b1e6"}, {"problem": 66, "code": ";; euclid's algorithim\n(fn gcd [a b]\n  (cond \n   (= a b) a \n   (> a b) (gcd (- a b) b)\n   (< a b) (gcd a (- b a))))", "user": "52cb6bb0e4b07d0d72b2734c"}, {"problem": 66, "code": "(fn\n  [x y]\n  (loop [factor (if (> x y) y x )]\n    (if (and (= 0 (mod x factor)) (= 0 (mod y factor)))\n      factor\n      (recur (dec factor)))))", "user": "55b3c03ee4b01b9910ae2975"}, {"problem": 66, "code": "(fn [x y] (cond (= x y) x (> x y) (recur y (- x y)) 1 (recur x (- y x))))", "user": "55be39f9e4b01b9910ae2a06"}, {"problem": 66, "code": "(fn [n1 n2]\n  (loop [x (min n1 n2)]\n    (if (= 0 (rem n1 x) (rem n2 x))\n      x\n      (recur (dec x)))))", "user": "55647a31e4b0c656e3ff1808"}, {"problem": 66, "code": "(fn gcd\n   ([a] a)\n   ([a b] (if (= b 0)\n            (gcd a)\n            (gcd b (mod a b)))))", "user": "55b54ecbe4b01b9910ae2987"}, {"problem": 66, "code": "#(loop [a %1 b %2]\n     (if (zero? b)\n         a\n         (recur b (mod a b))\n     )\n  )", "user": "54c8eb61e4b045293a27f658"}, {"problem": 66, "code": "(fn [a b]\n  (let [get-divisor (fn [n] (into #{}\n                              (filter #(zero? (rem n %))\n                                      (range 1 (inc n)))\n                              ))\n        a-divisor (get-divisor a)\n        b-divisor (get-divisor b)\n        commom-divisor (clojure.set/intersection a-divisor b-divisor)]\n    (apply max commom-divisor)))", "user": "55bc5280e4b01b9910ae29f1"}, {"problem": 66, "code": "#(let [a (max %1 %2)\n       b (min %1 %2)]\n   (if (= b 0)\n     a\n     (recur b (mod a b))))", "user": "55868660e4b059ccff29b1d4"}, {"problem": 66, "code": "#(last (for [a (range 1 (inc (max % %2))) :when (and (= 0 (mod % a)) (= 0 (mod %2 a)))] a))", "user": "55b107fee4b002ce9d5cbc2a"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "51e8736ae4b006d205356a4f"}, {"problem": 66, "code": "#(loop [a %1 b %2]\n  (if\n    (= a b)\n    a\n    (let [[lower higher] (sort [a b])]\n      (recur lower (- higher lower)))))", "user": "549dfe40e4b0f3d1d8e70f9a"}, {"problem": 66, "code": "(fn gcd [a b]\n  (loop [x a y b]\n    (if (zero? y) x (recur y (rem x y)))))", "user": "55c0afa5e4b01b9910ae2a27"}, {"problem": 66, "code": "#(loop [a (max % %2)\n        b (min % %2)]\n    (if\n      (zero? b)\n      a\n      (recur b (rem a b))))", "user": "55aa7c5ce4b0988bba2ad94d"}, {"problem": 66, "code": "(fn gcd [x y]\n(let [a (min x y) b (max x y)]\n(if (zero? (mod b a)) a\n  (gcd a (mod b a)))))", "user": "55c10409e4b01b9910ae2a2c"}, {"problem": 66, "code": "(fn gcd [a b]\n\t(if (zero? (rem a b))\n\t\tb\n\t\t(recur b (rem a b))))", "user": "55b8c339e4b01b9910ae29b9"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (rem a b))))", "user": "55a1d7f6e4b0acc240e31519"}, {"problem": 66, "code": "(fn [x y]\n  (apply max\n         (filter #(and (zero? (mod x %))\n                       (zero? (mod y %)))\n                 (range 1 (max x y)))))", "user": "554bced1e4b0a04f79299599"}, {"problem": 66, "code": "#(if (= 0 %2) %1 (recur %2 (rem %1 %2)))", "user": "559454f2e4b0c79f6e1db952"}, {"problem": 66, "code": "(fn f [best curr x y] (if (> curr (Math/min x y)) best (f (if (and (= 0 (mod x curr)) (= 0 (mod y curr))) curr best) (inc curr) x y ))) 1 1", "user": "55bfc39ee4b01b9910ae2a1a"}, {"problem": 66, "code": "(fn gcd [& ints]\n  (->>\n    (map (fn factor [n] (into #{} (conj (for [x (range 1 (inc (quot n 2)))\n                               :when (= 0 (mod n x))]\n                           x) n))) ints)\n    (apply clojure.set/intersection)\n    (apply max)))", "user": "4fffa422e4b0678c553fc404"}, {"problem": 66, "code": "(fn [x y]\n  (if (= 0 (mod x y))\n    y\n    (recur y (mod x y))))", "user": "517e9526e4b09104ecebe7e2"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (rem a b))))", "user": "55c4e48be4b0e31453f649a7"}, {"problem": 66, "code": "(fn [a b]\n  (last (filter #(= (mod a %) (mod b %) 0) (range 1 (max a b)))))", "user": "54055aa9e4b0addc1aec6665"}, {"problem": 66, "code": "(fn gcd [x y]\n  (let [m (min x y)]\n    (loop [m m]\n      (if (and (= 0 (rem x m))\n               (= 0 (rem y m)))\n        m\n        (recur (dec m))))))", "user": "549c6792e4b0f3d1d8e70f8b"}, {"problem": 66, "code": "(fn gcd [a b]\n   (let [m (max a b)\n         n (min a b)\n         r (mod m n)]\n     (if (zero? r) n\n                   (gcd (- m n) n))))", "user": "55c652dde4b0e31453f649bd"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n   (> b a) (gcd b a)\n   (= b 0) a\n   :else (gcd b (- a b))))", "user": "54b817eee4b0ed20f4ff6e93"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "55a122d9e4b0acc240e3150a"}, {"problem": 66, "code": "(fn [x y]\n  (if (< x y)\n     (loop [a y b x]\n       (if (zero? (rem a b))\n         b\n         (recur b (rem a b))))\n     (loop [a x b y]\n       (if (zero? (rem a b))\n         b\n         (recur b (rem a b))))\n   )  \n)", "user": "55c77070e4b0e31453f649d0"}, {"problem": 66, "code": "(fn [x y]\n  (let [r (mod x y)] \n    (if (= r 0)\n      y\n      (recur y r))))", "user": "55c2b95de4b0e31453f64980"}, {"problem": 66, "code": "(fn gcf2 [x y]\n  (loop [gcf-set []\n        divisor 1\n        value (min x y)]\n    (if (> divisor value)\n      (reduce max gcf-set)\n      (if (and \n           (= 0 (mod x divisor))\n           (= 0 (mod y divisor)))\n        (recur (conj gcf-set divisor) (inc divisor) value)\n        (recur gcf-set (inc divisor) value)))))", "user": "553093bee4b076ab5578f817"}, {"problem": 66, "code": "(fn gcd [u v]\n   (cond\n     (= 0 u) v\n     (= 0 v) u\n     (and (even? u) (even? v)) (* 2 (gcd (/ u 2) (/ v 2)))\n     (and (even? u) (odd? v)) (gcd (/ u 2) v)\n     (and (odd? u) (even? v)) (gcd u (/ v 2))\n     (and (odd? u) (odd? v) (>= u v)) (gcd (/ (- u v) 2) v)\n     (and (odd? u) (odd? v) (< u v)) (gcd (/ (- v u) 2) u)))", "user": "55c1eb52e4b0e31453f64970"}, {"problem": 66, "code": "(fn [a b]\r\n  (if (= 0 b)\r\n    a\r\n    (recur b (mod a b))))", "user": "546e1142e4b00cfc9eacc199"}, {"problem": 66, "code": "(fn gcd [a b] \n  (let [s (max [a b])\n      \tr (reduce rem s)]\n         (if (zero? r)\n           (last s)\n           (gcd (last s) r))))", "user": "55caabd1e4b0e31453f649fb"}, {"problem": 66, "code": "(fn [a b] (->> (iterate dec (max a b)) \n               (some (fn [i] (when (every? zero? (map #(mod % i) [a b])) i)))))\n;with for\n#_(fn [a b] (apply max (for [i (iterate dec (max a b))\n                           :while (pos? i)\n                           :when  (every? zero? (map #(mod % i) [a b]))]\n                       i)))\n;euclidean algorithm\n#_(loop [a %1, b %2] (if (zero? b) a (recur b (mod a b))))", "user": "55cdc576e4b0e31453f64a1f"}, {"problem": 66, "code": "#(loop [a %1 b %2]\n   (cond (< a b) (recur b a)\n         (= a b) a\n         :else (recur b (- a b))))", "user": "55c20bd0e4b0e31453f64972"}, {"problem": 66, "code": "#(if (= 0 (rem (max %1 %2) (min %1 %2)))\n  (min %1 %2)\n  (rem (min %1 %2) (rem (max %1 %2) (min %1 %2))))", "user": "552456e3e4b0882d96d091c2"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (cond\n    (= a b) a\n    (> a b) (gcd (- a b) b)\n    :else (gcd a (- b a))))", "user": "55c9bc1ee4b0e31453f649f1"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "55cae949e4b0e31453f649fe"}, {"problem": 66, "code": "(fn [a b]\n  (if (= 0 b) a\n    (recur b (rem a b))))", "user": "55d0e76ae4b0e31453f64a40"}, {"problem": 66, "code": "(fn [a b] (loop [d1 a\n             d2 b]\n        (let [r (rem d1 d2)]\n          (if-not (zero? r)\n            (recur d2 r)\n            d2))))", "user": "5313d68de4b08068f379ed0f"}, {"problem": 66, "code": "(fn [a b]\n   (let [x (min a b)\n         y (max a b)]\n     (letfn [(ld [v]\n                 (filter #(zero? (mod v %)) (reverse (range 1 (inc v)))))]\n       (first (filter #(and (zero? (mod x %)) (zero? (mod y %))) (ld x)))\n       )))", "user": "55a372f1e4b0acc240e31537"}, {"problem": 66, "code": "#(if (= %2 0) % (recur %2 (mod % %2)))", "user": "55236ad6e4b0882d96d091b1"}, {"problem": 66, "code": "(fn [a b]\n  (let [dv (fn [x] (set (filter #(zero? (rem x %)) (range 1 (inc x)))))]\n    (apply max (clojure.set/intersection (dv a) (dv b)))))", "user": "5589a941e4b059ccff29b207"}, {"problem": 66, "code": "(fn [x y] (if (= 0 (mod (first (sort > (list x y))) (first (sort < (list x y))) ) )\n                      (first (sort < (list x y)))\n                      (recur (mod (first (sort > (list x y))) (first (sort < (list x y))) )  (first (sort < (list x y))) )))", "user": "55cdd76ae4b0e31453f64a20"}, {"problem": 66, "code": "(fn gcd\n  [x y]\n  (last (filter #(= (mod x %) (mod y %) 0) (next (range (max x y))))))", "user": "55acd080e4b03311e7b73298"}, {"problem": 66, "code": "(fn [x y] (let [g (max x y) l (min x y)] (if (= 0 (* x y)) g (recur l (rem g l)))))", "user": "55b0f5bfe4b002ce9d5cbc28"}, {"problem": 66, "code": "(fn [f s] (first (first (filter (fn [[a b]] (= a b)) (iterate (fn [[a b]] (cond (> a b) [(- a b) b] (= a b) [a a] (< a b) [a (- b a)])) [f s])))))", "user": "55773cbae4b05c286339e07f"}, {"problem": 66, "code": "(fn [x y]\n  (let [min  (inc (min x y)) iterate-list (reverse (range 1 min))]\n    (loop [[head & rest] iterate-list]\n      (if (empty? iterate-list)\n        0;;\u6ca1\u6709\u627e\u5230\u6700\u5927\u516c\u7ea6\u6570\n        (if (and (integer? (/ x head)) (integer? (/ y head)))\n          head\n          (recur rest))))))", "user": "55a0d79fe4b0acc240e31502"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [x (min a b)\n        y (max a b)]\n    (if (= 0 x)\n      y\n      (gcd x (- y x)))))", "user": "55c423e1e4b0e31453f64994"}, {"problem": 66, "code": "(fn [a b]\n  (let [low (min a b) options (range low 0 -1)]\n    (some \n      #(if (and (= 0 (mod a %)) (= 0 (mod b %))) \n         % \n         false) \n      options)))", "user": "541ddadbe4b01498b1a71a84"}, {"problem": 66, "code": "(fn gcd [a b]\n   (if (> a b)\n     (gcd b a)\n     (first (filter #(and (= 0 (mod a %)) (= 0 (mod b %))) (range a 0 -1)))))", "user": "54864662e4b0e286459a11b8"}, {"problem": 66, "code": "(fn [a b]\n  (let [greatest (max a b)]\n    (loop [divisor (min a b)]\n      (if (= divisor 1)\n        1\n        (if (and (zero? (mod a divisor))\n                 (zero? (mod b divisor)))\n          divisor\n          (recur (dec divisor)))))))", "user": "55d4dddde4b0e31453f64a7f"}, {"problem": 66, "code": "(fn [x y]\n  (loop [a x\n         b y]\n    (if\n      (= 0 (mod a b))\n      b\n      (recur y (mod a b)))))", "user": "5586f418e4b059ccff29b1de"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "4eb171d7535d7eef30807340"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n    (= a b) a\n    (> a b) (gcd (- a b) b)\n    :else (gcd (- b a) a)))", "user": "55d5e80ee4b0e31453f64a91"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))\n    )\n  )", "user": "54c9571ee4b045293a27f66b"}, {"problem": 66, "code": "(fn [a b]\n  (loop [dividend (max a b)\n         divisor (min a b)]\n    (let [remainder (mod dividend divisor)]\n      (if (= remainder 0)\n        divisor\n        (recur divisor remainder)))))", "user": "55d06bcbe4b0e31453f64a3a"}, {"problem": 66, "code": "(fn gcd [i1 i2] (if (= i2 0) i1 (gcd i2 (mod i1 i2))))", "user": "55d95be7e4b0e31453f64ac9"}, {"problem": 66, "code": "(fn [x y]\n    (\n      (fn f_d [x y i]\n        (if (= (rem x i) (rem y i) 0)\n          i\n          (f_d x y (dec i))\n          )\n        )\n      x y (min x y)\n      )\n    )", "user": "55c3149de4b0e31453f64987"}, {"problem": 66, "code": "(fn [x y]\n    (loop [counter 1\n           div 1]\n      (let\n          [counter-div (and (= 0 (rem x counter)) (= 0 (rem y counter)))]\n        (if (or\n             (= counter x)\n             (= counter y))\n          (if counter-div counter div)\n          (if counter-div\n            (recur (inc counter) counter)\n            (recur (inc counter) div))))))", "user": "55a19e19e4b0acc240e31515"}, {"problem": 66, "code": "(fn gcd [n1 n2]\n  (if (zero? n2)\n    n1\n    (recur n2 (mod n1 n2))))", "user": "5561d2c2e4b0c656e3ff17cd"}, {"problem": 66, "code": "(fn [first second]\n  (let[smaller (min first second)\n       bigger (max first second)]\n    (reduce #(if (= 0 (mod bigger %2)) %2 %)\n            (keep #(if (= 0 (mod smaller %)) %)\n                  (range 1 (inc smaller))))))", "user": "55b22c33e4b0da326a65cf79"}, {"problem": 66, "code": "(fn [a b] (let [c (rem a b)] (if (zero? c) b (recur b c))))", "user": "55d1b565e4b0e31453f64a49"}, {"problem": 66, "code": "(fn mcd [a b] (let [d (fn divisors [x] (filter #(zero? (mod x %)) (range 1 (inc x)))) c (d a) e (d b) f (filter #(contains? (into #{} c) %) e) g (filter #(contains? (into #{} e) %) f)] (reduce max g)))", "user": "55ac16a0e4b03311e7b73291"}, {"problem": 66, "code": "(fn [x y] (loop [num (max x y) remainder (min x y)]\n  (if (= remainder 0)\n    num\n    (recur remainder (rem num remainder))\n  )))", "user": "55d79b87e4b0e31453f64aa8"}, {"problem": 66, "code": "(fn [a b]\n         (last (filter #(and (= 0 (mod a %)) (= 0 (mod b %)))\n                       (range 1 (inc (min a b))))))", "user": "55dcb06ee4b050e68259b3b9"}, {"problem": 66, "code": "(fn gcd [x y]\n (loop [a (max x y) b (min x y) ]\n     (if (or (= a 0) (= b 0)) (max a b) \n       (recur (max (rem a b) b) (min (rem a b) b) )\n     )\n))", "user": "558bdcefe4b0277789237633"}, {"problem": 66, "code": "#(loop [a %1 b %2]\n   (if (zero? b)\n     a\n     (recur b (mod a b))))", "user": "55db7e15e4b0e31453f64ae8"}, {"problem": 66, "code": "#(if (= (rem % %2) 0) %2 (/ % (numerator (/ % %2))))", "user": "55ccdc6be4b0e31453f64a18"}, {"problem": 66, "code": "(fn [x y] (last (filter #(= 0 (rem x %) (rem y %)) (range 1 (max x y)))))", "user": "55e1d34ae4b050e68259b421"}, {"problem": 66, "code": "(fn gcd [a b] (if (or (zero? a) (zero? b)) (+ a b) (gcd b (mod a b))))", "user": "55d85ac9e4b0e31453f64ab2"}, {"problem": 66, "code": "(fn gcd[a b]\n  (cond (= a 0) b\n        (> a b) (recur (- a b) b)\n        :else (recur (- b a) a)))", "user": "55dab408e4b0e31453f64ad9"}, {"problem": 66, "code": "(fn gcd \n  [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "534056fce4b085b17e897dac"}, {"problem": 66, "code": "(fn [a b]\n  (first \n   (filter \n    (fn [x]\n      (and (zero? \n            (mod a x))\n           (zero?\n            (mod b x))))\n    (reverse \n     (range (max a b))))))", "user": "4ec1923f535dfed6da9c6db2"}, {"problem": 66, "code": "(fn [a b] \n  (loop [red-a (max a b) red-b (min a b)]\n         (cond\n           (zero? red-a) red-b\n           (zero? red-b) red-a\n           :else (recur red-b (rem red-a red-b)))))", "user": "55d93d24e4b0e31453f64ac6"}, {"problem": 66, "code": "(memoize\n           (fn [x y]\n             (cond\n               (> x y) (recur (- x y) y)\n               (< x y) (recur x (- y x))\n               :else x)))", "user": "55d44dd6e4b0e31453f64a75"}, {"problem": 66, "code": "(fn gcd [x y](if (= 0 y) x (gcd y (mod x y))))", "user": "55d1a721e4b0e31453f64a47"}, {"problem": 66, "code": "(fn gcd \n  [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "55663e9be4b0c656e3ff182b"}, {"problem": 66, "code": "(fn [x y]\n   (first\n    (for [i (range (min x y)  0 -1)\n          :when (and (= 0 (mod x i) (mod y i)))]\n      i)))", "user": "5233564ae4b0f0b72fabf403"}, {"problem": 66, "code": "#(if (= %1 0) %2 (recur (mod %2 %1) %1))", "user": "55d29fb6e4b0e31453f64a59"}, {"problem": 66, "code": "(fn gcd [x,y]; [z]\n  ; first i accidentally wrote this for arbitrary length list of ints, then modified it to accept just 2.\n  ; parameter is a list of numbers, map each number to a set of divisors\n  ; then take the intersection across the resulting divisor sets\n  ; then take the maximum from the intersection\n (apply max ( reduce\n  clojure.set/intersection\n  (map \n    (fn divset [x] (set (filter #(= 0 (rem x %)) (range 1 (+ 1 x)))))\n    [x y]; z\n  )\n)))", "user": "55d35a01e4b0e31453f64a63"}, {"problem": 66, "code": "#(if (= %2 0)\n     %1\n     (recur %2 (mod %1 %2)))", "user": "55627de1e4b0c656e3ff17d9"}, {"problem": 66, "code": "#(loop [div (min %1 %2)]\n    (if (neg? div)\n      nil\n      (if ((every-pred integer?) (/ %1 div) (/ %2 div))\n        div\n        (recur (dec div)))))", "user": "553bda0de4b09218d5f4500b"}, {"problem": 66, "code": "(fn [& a] (apply (comp last sort clojure.set/intersection) (map #(set (remove nil? %)) (map #(for [i (reverse (range 1 ((comp inc last) (sort a))))] (if (integer? (/ % i)) (/ % i))) a))))", "user": "55b39523e4b01b9910ae2973"}, {"problem": 66, "code": "(fn [a b] (->> (map (fn [x]\n                      (filter #(zero? (mod x %)) (range 1 (inc x))))\n                    [a b])\n               (map set)\n               (apply clojure.set/intersection)\n               (apply max)))", "user": "559067ace4b0277789237670"}, {"problem": 66, "code": "(fn gcd\n  [num1 num2]\n  (loop [dividend (max num1 num2)\n        divisor (min num1 num2)\n        quotient (quot dividend divisor)\n        remainder (rem dividend divisor)]\n    (if (= 0 remainder)\n      divisor\n      (recur divisor remainder (quot divisor remainder) (rem divisor remainder)))))", "user": "55a9e0fee4b0988bba2ad945"}, {"problem": 66, "code": "(fn [x y]\n  (loop [m (max x y) n (min x y)]\n    (if (= 0 n) m\n      (recur n (rem m n)))))", "user": "55d74e71e4b0e31453f64aa4"}, {"problem": 66, "code": "(fn [x y]\n  (loop [denominator (if (<= x y) x y)]\n    (if (and (= 0 (rem x denominator))\n             (= 0 (rem y denominator)))\n      denominator\n      (recur (dec denominator)))))", "user": "554bd33ce4b0a04f7929959a"}, {"problem": 66, "code": "(fn [n1 n2]\n    (letfn [\n            (divisors [n]\n              (filter #(zero? (rem n %))\n                      (range 1 (inc n))))\n            (max-common-value [coll1 coll2]\n              (reduce max (keys (filter #(-> % val (= 2))\n                                        (frequencies (concat coll1 coll2))))))]\n      (max-common-value (divisors n1) (divisors n2))))", "user": "55df1985e4b050e68259b3eb"}, {"problem": 66, "code": "#(loop [a %1 b %2]\n   (if (zero? b)\n     a\n     (recur b (mod a b))))", "user": "55e2f502e4b050e68259b43c"}, {"problem": 66, "code": "(fn [x y]\n  (let [nmax (max x y)]\n    (loop [nmm nmax]\n      (if (zero? (+ (mod x nmm) (mod y nmm)))\n        nmm\n        (recur (dec nmm))\n        )\n      )\n    )\n  )", "user": "55d42f78e4b0e31453f64a73"}, {"problem": 66, "code": "(fn [f l]\n    (loop [el1 f el2 l]\n      (if (= el1 el2)\n        el1\n        (recur\n          (min el1 el2)\n          (- (max el1 el2) (min el1 el2))))))", "user": "53a68c5ae4b0ef122a8689c8"}, {"problem": 66, "code": "; math - just works \n; https://en.wikipedia.org/wiki/Euclidean_algorithm#Implementations\n\n(fn [a b] (loop [x a y b] \n  (if (= x y)\n    x\n    (do\n      (if (> x y)\n        (recur (- x y) y)\n        (recur x (- y x))\n      )))))", "user": "5564c113e4b0c656e3ff180d"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "55e6c3f5e4b050e68259b48c"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "55dab5c8e4b0e31453f64ada"}, {"problem": 66, "code": "(fn gcd [x y]\n  (if (zero? y)\n    x\n    (recur y (mod x y))))", "user": "55ee06a5e4b0121d4835fde4"}, {"problem": 66, "code": "(fn [m n]\n  (let [k (mod m n)]\n    (if (= k 0) n (recur n k))))", "user": "55d5ee3fe4b0e31453f64a92"}, {"problem": 66, "code": "(fn gcd [x y] (if (= 0 x) y (gcd (rem y x) x)))", "user": "55ecb2c0e4b0121d4835fdce"}, {"problem": 66, "code": "(fn [a b] (let [sm (min a b)]\n  (apply max (filter #(and (= 0 (rem a %)) (= 0 (rem b %))) (range (inc sm) 0 -1)))))", "user": "5530baa5e4b076ab5578f81a"}, {"problem": 66, "code": "(fn gcd \n  [x1 x2] \n  (loop [a x1 b x2]\n\t(if (= 0  b) a (recur b (mod a b)))))", "user": "55f04526e4b06e875b46ce20"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "53fc88e7e4b0de5c418485be"}, {"problem": 66, "code": "(fn gcd [x y]\n  (if (> x y)\n    (gcd y x)  ; reverse the arguments and try again\n    (let [z (mod y x)]\n      (if (= z 0)\n        x\n        (gcd z x)))))", "user": "4f5eda39e4b0030a34fb2b56"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "539e717fe4b0ca733b974488"}, {"problem": 66, "code": "(fn gcd [n1 n2]\n  (apply max\n   (for [x (map inc (range (max n1 n2)))\n         :when (every? #(zero? (rem % x)) [n1 n2])]\n     x)))", "user": "54008b88e4b0de5c4184860d"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "55912230e4b027778923767a"}, {"problem": 66, "code": "(fn gcd [x y]\n (if (zero? y)\n  x\n  (gcd y (mod x y))))", "user": "529c722de4b04e0c58e87b63"}, {"problem": 66, "code": "(fn [a b] \n\t(let [\n\t\tdivisor? (fn [d & other] (every? #(= 0 (rem % d)) other))\n\t\t]\n\t\t(->> (range (min a b) 0 -1) (filter #(divisor? % a b)) first)))", "user": "55041b5ee4b086ebe8a79c78"}, {"problem": 66, "code": "(fn [x y]\n     (loop [a (max x y)\n            b (min x y)\n            r (mod a b)]\n       (if (zero? r)\n         b\n         (recur b r (mod b r)))))", "user": "54d05a9de4b0e8a36923e5c7"}, {"problem": 66, "code": "(fn gcd [x y]\n  (some #(when (and (zero? (rem x %)) (zero? (rem y %))) %) (reverse (range 1 (inc (min x y)))))\n  )", "user": "55f06183e4b06e875b46ce23"}, {"problem": 66, "code": "(fn  gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))))", "user": "4ebbff41535dfed6da9c6d78"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n   (< a b) (gcd b a)\n   (= 0 b) a\n   :else (gcd b (mod a b))))", "user": "524e79c1e4b0541d1855b7e0"}, {"problem": 66, "code": "#(loop [a %1 b %2] (if (zero? b) a (recur b (mod a b))))", "user": "55e5c852e4b050e68259b474"}, {"problem": 66, "code": "#(loop [divisor (if (< %2 %)\n                  %2\n                  %)]\n   (if (= (mod % divisor) (mod %2 divisor) 0)\n     divisor\n     (recur (dec divisor))))", "user": "55eeeb81e4b0121d4835fdf7"}, {"problem": 66, "code": "; euclidean algorithm\n(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (mod a b))))", "user": "53350264e4b0656e627bfd73"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (let [r (rem a b)]\n    (if (= r 0)\n    b\n    (gcd b r))))", "user": "55b42706e4b01b9910ae297b"}, {"problem": 66, "code": "(fn gcd [num1 num2] (let [cdz (for [x (range 1 (max num1 num2)) :when (= (mod num1 x) (mod num2 x) 0)] x)] (last cdz)))", "user": "55f75c6be4b06e875b46cea9"}, {"problem": 66, "code": "(fn [a b] (loop [[p q] [(max a b) (min a b)]] (let [r (mod p q)] (case r 0 q 1 1 (recur [q r])))))", "user": "55f4ef68e4b06e875b46ce82"}, {"problem": 66, "code": "(fn [x y]\n  (loop [result 0 n 1]\n    (if (and (<= n x) (<= n y))\n      (if (and (= 0 (mod x n)) (= 0 (mod y n)))\n        (recur n (inc n))\n        (recur result (inc n)))result)))", "user": "55f8fd70e4b03cbcff9738bc"}, {"problem": 66, "code": "(fn [a b] \n  (loop [c a d b]\n      (if (= d 0) \n        c \n        (recur d (mod c d))\n      )\n  )\n)", "user": "55f2c898e4b06e875b46ce4b"}, {"problem": 66, "code": "(fn [x y]\n  (loop [i 1\n         r 1]\n    (if (or (<= i x)\n            (<= i y))\n      (recur (inc i)\n             (if (and (= (mod x i) 0)\n                      (= (mod y i) 0))\n               i\n               r))\n      r)))", "user": "5541fa50e4b0a04f79299515"}, {"problem": 66, "code": "(fn gcd [i j]\n  (let [d? (fn [x y] (= 0 (rem x y)))\n        cd? (fn [x] (and (d? i x) (d? j x)))]\n    (first (filter cd? (range (min i j) 0 -1)))))", "user": "55fb58b2e4b0f488688e0661"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n   a\n   (recur b (mod a b))))", "user": "55d2dd27e4b0e31453f64a5b"}, {"problem": 66, "code": "(fn [n m]\n  (loop [divisor (min n m)]\n    (if (and (= (mod n divisor) 0)\n             (= (mod m divisor) 0)) divisor\n      (recur (dec divisor)))))", "user": "55f8180fe4b06e875b46ceba"}, {"problem": 66, "code": "(fn gcd [m n] (cond (> m n) (gcd (- m n) n)\n                    (< m n) (gcd m (- n m))\n                    :else n))", "user": "55f20e4be4b06e875b46ce40"}, {"problem": 66, "code": "(fn [a b]\n  (loop [x a \n         y b]\n    (if (= y 0)\n      x\n      (recur y (rem x y)))))", "user": "55af3e6be4b03311e7b732c7"}, {"problem": 66, "code": ";; Euclid's algorithm\n(fn grt-common [x1 x2]\n  (cond (= x1 x2) x1\n        (< x1 x2) (recur x1 (- x2 x1))\n        :default (recur x2 (- x1 x2))))", "user": "55f6f1d3e4b06e875b46cea0"}, {"problem": 66, "code": "(fn [x y]\n  (loop [b (max x y)\n         s (min x y)]\n    (let [rem (mod b s)]\n      (if (= rem 0)\n      s\n      (recur s rem)))))", "user": "50a3ad0ee4b0ceace084d493"}, {"problem": 66, "code": "(fn gcd [x y]\n  (let [min-x-y (min x y)]\n    (loop [curr min-x-y]\n      (cond\n       (= curr 1) 1\n       (and (zero? (mod x curr)) (zero? (mod y curr))) curr\n       :else (recur (dec curr))))))", "user": "55f6e7ece4b06e875b46ce9e"}, {"problem": 66, "code": "(fn [m n]\n   (if (= 0 (rem m n))\n      n\n      (recur n (rem m n))))", "user": "55f8b32ae4b03cbcff9738ba"}, {"problem": 66, "code": "(fn gcd [m n]\n  (if (zero? n)\n    m\n    (gcd n (mod m n))\n    )\n  )", "user": "55fe7e15e4b00f4cabc57651"}, {"problem": 66, "code": "(fn my-cd [x y]\n  (loop [n (min x y)]\n    (when (< n (+ (min x y) 1))\n      (if (and (= (mod x n) 0) (= (mod y n) 0))\n        n\n      (recur (- n 1))))))", "user": "55f2fdc3e4b06e875b46ce51"}, {"problem": 66, "code": "(fn f\n  [a b]\n  (if (= b 0)\n    a\n    (f b (mod a b))))", "user": "55e06f82e4b050e68259b40d"}, {"problem": 66, "code": "(fn gcd [m n] (if (= m n) m (gcd (Math/abs (- m n)) (min m n))))", "user": "55e1fc42e4b050e68259b424"}, {"problem": 66, "code": "(fn f[a b] (cond (> b a) (f b a) (= 0 b) a :else (f (mod a b) b )))", "user": "55eeb37ae4b0121d4835fdf3"}, {"problem": 66, "code": "(fn gcd [a b] (if (> a b) \n                  (cond (= (mod a b) 0) b \n                        :else (gcd b (mod a b)))\n                  (gcd b a)))", "user": "55f2b42be4b06e875b46ce4a"}, {"problem": 66, "code": "(fn [x y] (first (filter #(= 0 (mod x %) (mod y %)) (range (max x y) 0 -1))))", "user": "559e6f42e4b08a52bd4f97d3"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n   (> a b) (recur (- a b) b)\n   (< a b) (recur a (- b a))\n   :else a))", "user": "55e7d06ee4b050e68259b496"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [r (mod a b)]\n    (if (zero? r) b (recur b r))))", "user": "55fee5e4e4b00f4cabc5765a"}, {"problem": 66, "code": "(fn gcd[a b] \n  (if(= a b) \n    a\n    (recur (min a b) (Math/abs (- a b)))))", "user": "55f01316e4b06e875b46ce1a"}, {"problem": 66, "code": "(fn [& nums]\n  (loop [a (apply max nums)\n         b (apply min nums)]\n    (let [remainder (rem a b)]\n      (if (zero? remainder) b\n        (recur b remainder)))))", "user": "56041883e4b0c80df0ca2655"}, {"problem": 66, "code": "(fn greatest-divider\n  [a b]\n  (cond\n    (< a b) (recur a (- b a))\n    (< b a) (recur b (- a b))\n    :else a))", "user": "55996253e4b031d6649c9baa"}, {"problem": 66, "code": "(fn [x y]\n  (let [a (max x y)\n        b (min x y)]\n    (if (= 0 (mod a b))\n      b\n      (recur (- a b) b))))", "user": "55e1bb20e4b050e68259b41f"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if(= b 0) a\n    (gcd b (mod a b))))", "user": "55e3e7a8e4b050e68259b44a"}, {"problem": 66, "code": "(fn [num1 num2]\n    (apply max \n      (reduce (fn [agg i]\n                (if (and (= num1 (* i (int (/ num1 i)))) (= num2 (* i (int (/ num2 i)))))\n                    (conj agg i)\n                  agg))\n              []\n              (range 1 (inc (min num1 num2))))))", "user": "53c6c9dfe4b00fb29b2212a1"}, {"problem": 66, "code": "(fn [a b] \n\t(loop [[c d] (sort > [a b])] \n    \t(cond\n       \t\t(zero? d) c\n            (zero? c) d\n             :else (recur (->> [(rem c d) d] (sort >))))))", "user": "5361d423e4b0243289761e49"}, {"problem": 66, "code": "(fn gcd [x y]\n  (cond\n    (zero? x) y\n    (zero? y) x\n    :else (recur y (mod x y))))", "user": "55d9743ae4b0e31453f64aca"}, {"problem": 66, "code": "(fn[a b](\n apply max (filter (fn[x] (contains?\n                     (set(filter (fn[x](= (mod a x) 0)) (range 1 (inc a))))\n        x))\n (filter (fn[x](= (mod b x) 0)) (range 1 (inc b))))\n))", "user": "56039843e4b04bb52996e1be"}, {"problem": 66, "code": "(fn gcd[a b]\n  (loop [a a\n         b b]\n    (if (= b 0) a\n      (recur b (mod a b)))))", "user": "560151b5e4b04bb52996e185"}, {"problem": 66, "code": "(fn [a b]\n    (loop [big (max a b) small (min a b)]\n      (if (= (mod big small) 0)\n        small\n        (recur\n         small\n         (mod big small)))))", "user": "55f081bbe4b06e875b46ce25"}, {"problem": 66, "code": "(fn[a b] (let [r (range 1 (max a b))] (last (filter #(= 0 (rem a %) (rem b %)) r))))", "user": "5602ab92e4b04bb52996e1a3"}, {"problem": 66, "code": "(fn [a b] (loop [current (min a b)]\n             (if (= 0 (mod a current) (mod b current)) current\n                 (recur (dec current)))))", "user": "560039cce4b04bb52996e162"}, {"problem": 66, "code": "(fn gcd [a b]\n    (if (= b 0)\n      a\n      (gcd b (mod a b))))", "user": "532f8569e4b019098a6f8b4f"}, {"problem": 66, "code": "(fn [& lst] (last (filter (fn [n] (every? #(= (rem % n) 0) lst))(range 1 (inc (apply min lst))))))", "user": "55f1d5dfe4b06e875b46ce38"}, {"problem": 66, "code": "#(if (zero? %2) % (recur %2 (mod % %2)))", "user": "548b8a50e4b0e286459a11ff"}, {"problem": 66, "code": "#(loop [x (max %1 %2)\n         y (min %1 %2)]\n    (if (zero? (rem x y))\n      y\n      (recur y (rem x y))))", "user": "558053b1e4b05c286339e0e9"}, {"problem": 66, "code": "#(loop [a %1 b %2]\n   (cond\n    (= a b) a\n    (> a b) (recur (- a b) b)\n    :else (recur a (- b a))))", "user": "5609866ee4b0053d1b86c7e3"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "560843dee4b046a4fc0ac00e"}, {"problem": 66, "code": "(fn [m n] \n  (reduce \n   (fn [md c]\n     (if (= (+ (mod m c) (mod n c)) 0)\n       c\n       md))\n   1\n   (range 1 (inc (min m n)))))", "user": "56051095e4b08b23635d3162"}, {"problem": 66, "code": "(fn [a b] \n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "560a7775e4b05f002753defa"}, {"problem": 66, "code": "(fn [a b]\n  (let [euclidean-steps (iterate #(vector (second %) (mod (first %) (second %))) [a b])]\n    (first (first (drop-while #(not (zero? (second %))) euclidean-steps)))\n  )\n)", "user": "55e274b4e4b050e68259b436"}, {"problem": 66, "code": "(fn [a b]\n  (cond\n    (= a b) a\n    (> a b) (recur (- a b) b)\n    (< a b) (recur a (- b a))))", "user": "5603d057e4b0c80df0ca264e"}, {"problem": 66, "code": "#(if (= 0 %2) % (recur %2 (mod % %2)))", "user": "5603c31fe4b04bb52996e1c1"}, {"problem": 66, "code": "(fn gcd [x y]\n  (if (not= y 0)\n    (gcd y (mod x y))\n    x\n    )\n  )", "user": "55efc44ee4b066087aa9453e"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "560a7b46e4b05f002753defb"}, {"problem": 66, "code": "#(loop [a (max %1 %2)\n        b (min %1 %2)\n        r (rem a b)]\n   (if (= r 0)\n     b\n     (recur b r (rem b r))))", "user": "5410499de4b01498b1a719a6"}, {"problem": 66, "code": "(fn [x y]\n  (letfn [(gcd [a b]\n \t \t(if (= b 0) a (gcd b (mod a b))))]\n      (gcd (max x y) (min x y))))", "user": "560ae540e4b05f002753df0d"}, {"problem": 66, "code": "#(loop [x (min %1 %2)]\n   (if (and (zero? (rem %1 x)) (zero? (rem %2 x)))\n     x\n     (recur (dec x))))", "user": "55df3b11e4b050e68259b3ef"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (loop [f a\n         t b]\n    (if (= t 0)\n      f\n      (recur t (mod f t)))))", "user": "56084e91e4b046a4fc0ac00f"}, {"problem": 66, "code": "(fn gcd-two [x y]\n  (let [n (min x y )]\n    (last (filter (fn [de]\n                    (if(= (mod x de) (mod y de) 0) true false )) (range 1 (inc n))))))", "user": "56038f34e4b04bb52996e1bc"}, {"problem": 66, "code": "(fn [a b]\n        (let [m (min a b)]\n          (loop [i m] \n            (cond (or (and (= 0 (mod a i))\n                       (= 0 (mod b i))) (= 1 i))\n                  i\n                  :else\n                  (recur (dec i))))))", "user": "56011393e4b04bb52996e178"}, {"problem": 66, "code": "(fn [x y] (cond (= (rem x y) 0) y :else (recur y (mod x y))))", "user": "560e9a2de4b05f002753df52"}, {"problem": 66, "code": "(fn [x y]\n  (loop [x x\n         y y]\n    (if (> y x)\n      (recur y x)\n      (if (zero? y)\n        x\n        (recur y (- x y))))))", "user": "4ff24a1ae4b0678c553fc337"}, {"problem": 66, "code": "(fn [n m]\n  (let [[x y] (reverse (sort (list n m)))]\n    (loop [a x b y]\n      (cond (zero? (- a b)) b\n            (> (- a b) b) (recur (- a b) b)\n            :else (recur b (- a b))))))", "user": "5604bcf7e4b08b23635d315a"}, {"problem": 66, "code": "(fn gcd [x y]\n  (if (= y 0)\n    x\n    (gcd y (rem x y))))", "user": "560ff632e4b05f002753df66"}, {"problem": 66, "code": "(fn [a b] \n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "55810c73e4b05c286339e0f2"}, {"problem": 66, "code": "(fn [a b]\n  (loop [n a]\n    (if (or (= n 1)\n            (and (= (mod a n) 0)\n                 (= (mod b n) 0)))\n      n\n      (recur (dec n)))))", "user": "52bacfa8e4b07a9af57922d6"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (rem a b))))", "user": "4f6ba7bce4b07046d9f4efb0"}, {"problem": 66, "code": "(fn [a b]\n  (let [nums [a b]\n        x (last (sort nums))\n        y (first (sort nums))]\n   (if (= 0 (rem x y))\n    y\n    (let [\n          diff (- x y)]\n      (rem x diff)))))", "user": "54dbe183e4b024c67c0cf778"}, {"problem": 66, "code": "(fn blah\n  [a b]\n  (first\n   (filter #(= 0 (mod a %1) (mod b %))\n      (reverse (range 1 (inc (min a b))))\n      )\n   )\n  )", "user": "4f5e5975e4b0030a34fb2b4d"}, {"problem": 66, "code": "(fn [x y] (let [maximum (max x y)]\n            (last (filter #(and (zero? (mod x %)) (zero? (mod y %))) (range 1 (inc maximum))))))", "user": "5272645de4b03e8d9a4a742c"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= (rem a b) 0)\n    b\n    (gcd b (rem a b))))", "user": "561ba3e5e4b073c65b0ce3eb"}, {"problem": 66, "code": "(fn [a b] (->> (min a b)\n inc\n range\n reverse\n (drop-while #(pos? (+ (mod a %) (mod b %))))\n first\n ))", "user": "55e8a85be4b0121d4835fd98"}, {"problem": 66, "code": "(fn [a b] (loop [a a b b] (cond (= a 0) b (= b 0) a (< a b) (recur a (mod b a)) (< b a) (recur (mod a b) b))))", "user": "55f09e7be4b06e875b46ce28"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (mod a b))))", "user": "561ca2eae4b064ca9f4b169b"}, {"problem": 66, "code": "(fn f [a b] (cond (> a b) (f (- a b) b) (< a b) (f a (- b a)) :else a))", "user": "55f6fe09e4b06e875b46cea2"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5619a4d0e4b053970a773afd"}, {"problem": 66, "code": "(fn gcd [a b]\n   (let [<< bit-shift-left,\n        >>1 #(bit-shift-right % 1)]\n     (loop [shift 0,\n            a a,\n            b b]\n       (if (zero? a)\n         (<< b shift)\n           (if (odd? a)\n             (if (odd? b)\n               (let [[a b] (reverse (sort [a b]))]\n                (recur shift (>>1 (- a b)) b))\n               (recur shift a (>>1 b)))\n             (if (odd? b)\n               (recur shift (>>1 a) b)\n               (recur (inc shift) (>>1 a) (>>1 b))))))))", "user": "561f9110e4b064ca9f4b16ce"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "55b1e9e7e4b0da326a65cf74"}, {"problem": 66, "code": "(fn gcd [x y] (last (filter #(and (= 0 (mod x %)) (= 0 (mod y %))) (take (max x y) (iterate inc 1)))))", "user": "5614fa1de4b05f002753dfbe"}, {"problem": 66, "code": "(fn [num1 num2]\n  (let [small (min num1 num2)]\n    (loop [gcd 1\n           i 2]\n      (if (> i small)\n        gcd\n        (if (and (= 0 (mod num1 i)) (= 0 (mod num2 i)))\n          (recur i (inc i))\n          (recur gcd (inc i)))))))", "user": "561fc0d0e4b064ca9f4b16d2"}, {"problem": 66, "code": "(fn gcd [n1 n2]\n  (let [greatest (max n1 n2)\n        least (if (= greatest n1) n2 n1)\n        end-point (min (Math/floor (/ greatest 2)) least)]        \n    (loop [res 1\n           where-at 2]\n      (if (<= where-at end-point)\n        (let [next-up (inc where-at)]\n          (if (and (= 0 (mod greatest where-at)) (= 0 (mod least where-at)))\n            (recur where-at next-up)\n            (recur res next-up)))\n        res))))", "user": "561d8936e4b064ca9f4b16b2"}, {"problem": 66, "code": "(fn [x y]\n  (let [xs (reverse (range 1 (inc (min x y))))]\n    (first (filter #(and (zero? (mod x %))\n                         (zero? (mod y %)))\n                   xs))))", "user": "561d23e3e4b064ca9f4b16a5"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0) a (recur b (mod a b))))", "user": "56228d00e4b03f08ee9a9227"}, {"problem": 66, "code": "(fn gcd-ms\n  [a b]\n  (- (min a b) (.indexOf (map #(+ (mod a %) (mod b %))  (range (min a b) 0 -1)) 0)))", "user": "561ca6ebe4b064ca9f4b169c"}, {"problem": 66, "code": "(fn gcd[a b]\n  (loop [x (max a b) y (min a b)]\n    (if (= y 0)\n      x\n      (recur y (rem x y)))))", "user": "5537b2c7e4b09218d5f44fce"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? (* a b))\n   (+ a b)\n   (if (> a b)\n     (gcd (- a b) b)\n     (gcd a (- b a)))))", "user": "54b54d1be4b05787c3b1639c"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "54d000c7e4b018d918be98d7"}, {"problem": 66, "code": "#(loop [x %1 y %2]\n    (if (= x y)\n      x\n      (if (< x y)\n        (recur x (- y x))\n        (recur y (- x y))\n        )\n      )\n   )", "user": "560ac5cae4b05f002753df09"}, {"problem": 66, "code": "(fn [a b]\n  (if (= a b)\n    a\n    (if (> a b)\n      (recur (- a b) b)\n      (recur a (- b a)))))", "user": "4f213e2ee4b0d66497709fcf"}, {"problem": 66, "code": "(fn [a b]\n  (cond\n    (= 1 a) 1\n    (= 1 b) 1\n    (= 0 (mod a b)) b\n    (= 0 (mod b a)) a\n    (> a b) (recur (- a b) b)\n    (< a b) (recur a (- b a))))", "user": "521ed5b4e4b0e6c71e0c0bc0"}, {"problem": 66, "code": "(fn [x y]\n  (loop [[d & ds] (range (if (< x y) x y) 0 -1)]\n    (cond\n     (= 0 (+ (mod x d) (mod y d))) d\n     :else (recur ds))))", "user": "561cb6cfe4b064ca9f4b169e"}, {"problem": 66, "code": "(fn [a b]\n \t(cond (= a b) a\n          (> a b) (recur (- a b) b)\n          :else (recur a (- b a))))", "user": "56018dd4e4b04bb52996e18f"}, {"problem": 66, "code": "(fn pgcd[a b]\n  (if (> a b)\n    (pgcd b a)\n    (if (= (mod b a) 0)\n      a\n      (pgcd (mod b a) a))))", "user": "5626447fe4b00e49c7cb47bd"}, {"problem": 66, "code": "#(if (zero? %2)\n   %\n   (recur %2 (rem % %2)))", "user": "55bf6dbce4b01b9910ae2a12"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))\n  )\n)", "user": "56195e57e4b053970a773af6"}, {"problem": 66, "code": "(fn gcd [dividend divisor]\n  (let [m (mod dividend divisor)]\n    (if (= 0 m)\n      divisor\n      (gcd divisor m))))", "user": "5408ec4de4b0addc1aec66d0"}, {"problem": 66, "code": "(fn [num1 num2] (some #(when (= (rem num1 %) (rem num2 %) 0 ) %) (range (max num1 num2) 0 -1)))", "user": "536829c8e4b0243289761e8b"}, {"problem": 66, "code": "(fn my-gcd\n  [a b]\n  (if (> b a)\n    (my-gcd b a)\n    (if (zero? (mod a b))\n      b\n      (my-gcd b (mod a b)))))", "user": "5599abc9e4b031d6649c9bb0"}, {"problem": 66, "code": "(fn my-common-divisor [a b]\n  (loop [n (min a b)]\n    (when (< n (+ (min a b) 1))\n      (if (and (= (mod a n) 0)\n                 (= (mod b n) 0))\n        n\n        (recur (- n 1))))))", "user": "54eb22a0e4b024c67c0cf845"}, {"problem": 66, "code": "#(loop [a %1 b %2]\n   (if (= b 0)\n     a\n     (recur b (rem a b))))", "user": "5628cb07e4b00e49c7cb47ef"}, {"problem": 66, "code": "(fn my-gcd [a b]\n    (cond (zero? a) b\n          (zero? b) a\n          :else (my-gcd b (rem a b))))", "user": "560434cfe4b0c80df0ca2658"}, {"problem": 66, "code": "(fn [n1 n2]\n  (let [[lo hi] (sort [n1 n2])\n        m (mod hi lo)]\n    (if (zero? m) lo\n      (recur lo m))))", "user": "562cd94ee4b0a45d2ff83015"}, {"problem": 66, "code": ";#({2 2, 10 5, 5 1, 1023 33, 0 %2} %1) <-- that'd be cheating :P\n#(->\n  (take-while\n   (fn [[x _]] (pos? x))\n   (iterate (fn [[a b]] [(mod b a) a]) %&))\n  last\n  first)", "user": "55fc07d3e4b0f488688e066e"}, {"problem": 66, "code": "(fn largest-common [x y] \n\t(first \n\t\t(filter\n\t\t\t(fn [divisor] (and (= 0 (mod x divisor)) (= 0 (mod y divisor)))) \n\t\t\t(reverse (range 1 (inc (min x y)))))))", "user": "55f330dde4b06e875b46ce56"}, {"problem": 66, "code": "(fn [n m] (apply max (for [i (range 1 (max n m)) :when (and (zero? (mod n i)) (zero? (mod m i)))] i)))", "user": "53b1db8ee4b047364c044495"}, {"problem": 66, "code": "(fn [a b]\n  (cond\n    (= a b) a\n    (> a b) (recur (- a b) b)\n    (< a b) (recur a (- b a))))", "user": "4e72a717535d5021c1a89665"}, {"problem": 66, "code": "(fn fpb [a b]\n  (last \n    (map first \n         (filter \n           #(> (count %) 1) \n           (partition-by identity \n                         (sort (concat \n                                 ((fn [x] (filter #(= (mod x %) 0) (range 1 (inc x)))) a) \n                                 ((fn [x] (filter #(= (mod x %) 0) (range 1 (inc x)))) b))))))))", "user": "56278266e4b00e49c7cb47d3"}, {"problem": 66, "code": ";fn [x y]\n;  (last\n;   (filter\n;    #(and (= 0 (rem x %)) (= 0 (rem y %)))\n;    (range 1 (inc (min x y))))))\n\n(fn gcd [x y]\n  (if (= y 0)\n    x\n    (gcd y (rem x y))))", "user": "54485749e4b032a45b8693c7"}, {"problem": 66, "code": "(fn gcd [x y] \n              (loop [i x j y d (min x y)]\n                (cond\n                 (= d 1) 1\n                 (and (= 0 (rem i d)) (= 0 (rem j d))) d\n                 :else (recur i j (dec d)))))", "user": "55ed9108e4b0121d4835fddc"}, {"problem": 66, "code": "(fn gcd [x y]\n  (if (= y 0)\n    x\n    (gcd y (rem x y))))", "user": "560ae7e6e4b05f002753df0e"}, {"problem": 66, "code": "(fn [num1 num2]\n  (let [smallNum (min num1 num2)\n        bigNum (max num1 num2)]\n    (if (= (mod bigNum smallNum) 0)\n      smallNum\n      (loop [divNum (quot smallNum 2)]\n        (if (<= divNum 1)\n          1\n          (if (= (mod smallNum divNum) 0)\n            (if (= (mod bigNum divNum) 0)\n              divNum\n              (recur (dec divNum)))\n            (recur (dec divNum))))))))", "user": "56305383e4b073c1cf7a9be6"}, {"problem": 66, "code": "(fn bv [a b]\n  (let [[x y] (if (> a b) [a b] [b a])]\n    (if (= 0 (mod x y))\n      y\n      (recur y (mod x y)))))", "user": "561a1af6e4b053970a773b02"}, {"problem": 66, "code": "(fn [a b] (apply max (filter #(and (= 0 (rem a %1)) (= 0 (rem b %1))) (range 1 (max a b)))))", "user": "5627d09ce4b00e49c7cb47db"}, {"problem": 66, "code": "(fn [a b] (if (= b 0) a (recur b (mod a b))))", "user": "56102f50e4b05f002753df6b"}, {"problem": 66, "code": ";; works with any number of args, only checks\n;; unique numbers, and starts with the highest\n;; possible divisor (the smallest arg)\n(fn [& nums]\n  (let [uniques (set nums)\n        check-divisor (fn [n d] (= 0 (rem n d)))]\n    ((fn find-largest-divisor [d] \n      (if (every? #(check-divisor % d) uniques)\n        d\n        (find-largest-divisor (dec d))))\n    (first uniques))))", "user": "562e8b2be4b0ab312c17ebbb"}, {"problem": 66, "code": "(fn [x y]\n  (if (= x y)\n    x\n    (recur (- (max x y) (min x y)) (min x y))))", "user": "562cb7cfe4b0a45d2ff83009"}, {"problem": 66, "code": "(fn [a b]\n  (loop [a a\n         b b]\n    (if (= b 0)\n      a\n      (recur b (rem a b)))))", "user": "5600dccee4b04bb52996e175"}, {"problem": 66, "code": "#(loop [x %1 y %2] (if (zero? (rem x y)) y (recur y (rem x y))))", "user": "5614ebc5e4b05f002753dfbc"}, {"problem": 66, "code": "(fn [sm big]\n  (loop [a sm b big]\n    (if (< b a) (recur b a)\n      (if (= a 0) b\n        (recur (mod b a) a)))))", "user": "563130e4e4b0bfe05bf1178d"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (loop [result 1\n         n result]\n    (if (or (> n a) (> n b))\n      result\n      (if (and (zero? (mod a n)) (zero? (mod b n)))\n        (recur n (inc n))\n        (recur result (inc n))))))", "user": "4fc524aae4b081705acca37e"}, {"problem": 66, "code": "#(if (zero? %) %2\n   (if (> % %2)\n     (recur (mod % %2) %2)\n     (recur (mod %2 %) %)))", "user": "5627444fe4b00e49c7cb47cd"}, {"problem": 66, "code": "(fn nok [a b] (let [[x1 x2] (sort [a b]) xm (mod x2 x1)] (if (zero? xm) x1 (nok xm x1))))", "user": "53286f84e4b09d4e7a9b5505"}, {"problem": 66, "code": "(fn [a b]\n  (let [greater (max a b) smaller (min a b)]\n    (loop [number smaller]\n      (if (and (zero? (mod greater number)) (zero? (mod smaller number)))\n          number\n          (recur (dec number))\n        )\n      )\n    )\n  )", "user": "563a30d7e4b0bfe05bf117f9"}, {"problem": 66, "code": "(fn greatest-common-divisor\n   ([n1 n2] \n    (if (zero? n2)\n      n1\n      (let [aux n2]\n        (greatest-common-divisor aux (rem n1 n2))\n        )\n      )\n    )\n   )", "user": "5564709ee4b0c656e3ff1807"}, {"problem": 66, "code": "(fn [a b] \n  (apply max \n         (filter \n          #(and (= 0 (mod b %)) (= 0 (mod a %))) \n          (take-while \n           #(<= % (max a b)) \n           (iterate inc 1)))))", "user": "5578f292e4b05c286339e08f"}, {"problem": 66, "code": "(fn [a b] \n  (first \n    (filter\n      #(= 0 (mod a %) (mod b %)) \n      (range a 0 -1))))", "user": "561047eae4b05f002753df6d"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0) a (recur b (mod a b))))\n\n;;  return (b == 0) ? a : gcd(b, a % b);", "user": "54f4ab86e4b0f2f3c5226e84"}, {"problem": 66, "code": "(fn [a b] ({2 2 10 5 5 1 1023 33} a))", "user": "56399b7ee4b0bfe05bf117f5"}, {"problem": 66, "code": "(fn gcd [x y]\n       (last (filter\n              (fn cd? [z]\n                (and (= 0 (mod x z))\n                     (= 0 (mod y z))))\n              (vec (map inc (range (min x y)))))))", "user": "5632b0a9e4b0bfe05bf117a8"}, {"problem": 66, "code": "(fn gcd [x y]\n  (let [larger (max x y) smaller (min x y)]\n    (first (filter (fn [i] (and (zero? (rem larger i)) (zero? (rem smaller i)))) (range larger 0 -1)))\n  )\n)", "user": "56393681e4b0bfe05bf117f2"}, {"problem": 66, "code": "(fn [x y]\n  (if (zero? y)\n    x\n    (recur y (mod x y))))", "user": "521ceb02e4b0c4ef0be830a5"}, {"problem": 66, "code": "(fn g[m, n] (if (= m n) m (if (> m n) (g (- m n) n) (g m (- n m)))))", "user": "56347285e4b0bfe05bf117bc"}, {"problem": 66, "code": "(fn [x y] (let [z (mod x y)] (if (= 0 z) y (recur y z))))", "user": "546a65fce4b00cfc9eacc153"}, {"problem": 66, "code": "#(last (sort (concat (clojure.set/intersection (into #{} (for [x (range 1 (inc %1)) :let [m (mod %1 x)] :when (= m 0)] x)) (into #{}(for [x (range 1 (inc %2)) :let [m (mod %2 x)] :when (= m 0)] x)) ))))", "user": "5604ae27e4b0c80df0ca2663"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "53623eaee4b0243289761e4f"}, {"problem": 66, "code": ";(fn gcd [m n] (if (> m n) (gcd (- m n) n) (if (< m n) (gcd m (- n m)) m)))\n\n(fn [m n] (if (= 0 n) m (recur n (mod m n))))", "user": "562b1a7be4b058fa18c5a6cb"}, {"problem": 66, "code": "#(loop [a %1\n        b %2]\n   (if (zero? b) a (recur b (mod a b)))\n)", "user": "562fd63be4b0ab312c17ebde"}, {"problem": 66, "code": "(fn gcd [a b]\n  (loop [a a b b]\n    (if (= 0 b)\n      a\n      (recur b (mod a b)))))", "user": "545c2d07e4b01be26fd7465c"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "563ed73ae4b08d4f616f5ecb"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond (zero? b) a\n        (= a b) a\n        (> a b) (recur (- a b) b)\n        :else (recur a (- b a))))", "user": "52f3568fe4b05e3f0be25f0e"}, {"problem": 66, "code": "#(loop [a %1\n        b %2]\n   (if (zero? b)\n          a\n          (recur b (mod a b))))", "user": "546b24a0e4b00cfc9eacc166"}, {"problem": 66, "code": "(fn [a b]\n   (if (= 0 b)\n       a\n       (recur b (mod a b))))", "user": "55c49394e4b0e31453f6499e"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (cond\n    (= a 0) b\n    (= b 0) a\n    :else (let [smaller (min a b)\n                larger (max a b)\n                remainder (rem larger smaller)]\n            (gcd smaller remainder))))", "user": "563f1493e4b08d4f616f5ecf"}, {"problem": 66, "code": "(fn  [a b] \n  (loop [x (min a b) y (max a b)]\n      (if (zero? (mod y x)) x\n          (recur (mod y x) x))))", "user": "564127a9e4b08d4f616f5ef3"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b) a (recur b (mod a b))))", "user": "5633bb9de4b0bfe05bf117b4"}, {"problem": 66, "code": "(fn [x y] (let [result (mod x y)]\n             (if (= result 0) y (recur y result))))", "user": "561cad18e4b064ca9f4b169d"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= a b)\n    a\n    (let [[mn mx] (sort [a b])]\n      (gcd (- mx mn) mn))))", "user": "563772a9e4b0bfe05bf117d7"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "563b6a2ae4b0bfe05bf11812"}, {"problem": 66, "code": "(fn euclid\n  [a b]\n  (let [[x y] [(min a b) (max a b)]\n        n (int (/ y x))\n        v (* n x)]\n    (cond\n      (= v y) x\n      :else (euclid x (java.lang.Math/abs (- y v))))))", "user": "54145050e4b01498b1a719ea"}, {"problem": 66, "code": "(fn [a b]\n  (cond \n   (= 0 b) a\n   :else (recur b (mod a b))))", "user": "545e7ab0e4b01be26fd7467c"}, {"problem": 66, "code": "(fn greatest-common-divisor-solution\n  [ain bin] ;; update args as needed\n  ;; Given two integers, write a function which\n  ;; returns the greatest common divisor.\n\n  (loop [a ain b bin]\n    (if (= b 0)\n      a\n      (recur\n        b\n        (mod a b))))\n  )", "user": "54df955ee4b024c67c0cf7af"}, {"problem": 66, "code": "(fn [a b] (loop [a a b b] (if (zero? b) a (recur b (rem a b)))))", "user": "505fdf63e4b08f2a82ad10b9"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "564583f0e4b0284900eef607"}, {"problem": 66, "code": "#((fn [dividend divisor] \n      (if (= (rem dividend divisor) 0)\n         divisor\n         (recur divisor (rem dividend divisor)))\n     ) (max %1 %2) (min %1 %2) )", "user": "55c13e73e4b01b9910ae2a2f"}, {"problem": 66, "code": ";;\n;; no euclid. instead a trivial implementation\n;; \n(fn gcd [x y]\n  (let [divisors (fn [n]\n                   (set\n                    (filter\n                     #(zero? (mod n %))\n                     (range 1 (inc n)))))]\n    (apply max\n           (clojure.set/intersection\n            (divisors x) (divisors y)))))", "user": "5641296de4b08d4f616f5ef4"}, {"problem": 66, "code": "#(reduce (fn [t1 t2](or t1 t2))\n         (map (fn [t] (if (and (zero? (mod %1 t))\n                               (zero? (mod %2 t)))\n                        t\n                        nil))\n              (-> %1 inc range next reverse)))", "user": "5649542fe4b0284900eef63f"}, {"problem": 66, "code": "(fn [a b] (if (= b 0) a (recur b (mod a b))))", "user": "55d28b38e4b0e31453f64a58"}, {"problem": 66, "code": "#(cond (= (count (seq (str (/ % %2)))) 3) (quot %2 (read-string (subs (str (/ % %2)) 2)))\n       (= (count (seq (str (/ % %2)))) 5) (quot %2 (read-string (subs (str (/ % %2)) 3)))\n       :else %2)", "user": "56449c90e4b0284900eef5f8"}, {"problem": 66, "code": "(fn greatest-divisor [num1 num2]\n  (apply max \n         (keep \n           (into #{} (filter #(= (rem num1 %) 0) (range 1 (inc num1))))\n           (into #{} (filter #(= (rem num2 %) 0) (range 1 (inc num2)))))))", "user": "56441e72e4b0018b46ad8c09"}, {"problem": 66, "code": "(fn [a b]\n    (if (zero? b)\n      a\n          (recur b (mod a b))))", "user": "5489dd4de4b0e286459a11ef"}, {"problem": 66, "code": "(fn gcd [a b]\n  (loop [i 1 g 1]\n    (if (> i (min a b))\n      g\n      (recur (inc i) (if (and (zero? (rem a i)) (zero? (rem b i)))\n                       i\n                       g)))))", "user": "563d12f9e4b0bfe05bf11845"}, {"problem": 66, "code": "(fn [x y]\n    (reduce\n     (fn [out num]\n       (if (and (= 0 (rem x num)) (= 0 (rem y num)))\n         num\n         out\n       ))\n      1\n     (range 2 (max x y))))", "user": "5582dfb6e4b05c286339e10d"}, {"problem": 66, "code": "(fn [a b]\n \t(if (zero? b)\n      a\n      (recur b (mod a b)))\n )", "user": "5649615be4b0284900eef641"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0) \n    a\n   (recur b (mod a b))))", "user": "541ef7e2e4b01498b1a71a92"}, {"problem": 66, "code": "(fn [a b]\n  (loop [a a b b]\n    (if (zero? b) a\n        (recur b (mod a b)))))", "user": "564d3169e4b0284900eef67c"}, {"problem": 66, "code": "(fn [x y]\n  (loop [m (if (> x y) x y) n (if (= m x) y x) r (rem m n)]\n    (if (= r 0) n (recur n r (rem n r)))))", "user": "564a5a09e4b0284900eef656"}, {"problem": 66, "code": "#(loop [a %1, b %2]\n   (cond\n     (= a b) a\n     (< a b) (recur b a)\n     :else (recur (- a b) b)))", "user": "560bb1f7e4b05f002753df20"}, {"problem": 66, "code": "(fn [a b] (let [m (min a b)] (loop [idx 1 gcd 1] (if (> idx m) gcd\n                                                   (recur (inc idx) \n                                                          (if (= 0 (+ (mod a idx) (mod b idx))) \n                                                            idx gcd))))))", "user": "5406776fe4b0addc1aec66a0"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b  (mod a b))\n    )\n    \n  )", "user": "563b9acbe4b0bfe05bf11827"}, {"problem": 66, "code": "(fn mygcd [x y]\n  (loop [x x y y]\n    (if (= 0 y) \n      x\n     (recur y (mod x y)))))", "user": "55b738cfe4b01b9910ae29a1"}, {"problem": 66, "code": "#(loop [a %\n        b %2]\n   (cond\n    (= a b) a\n    (> a b) (recur (- a b) b)\n    :else (recur a (- b a))))", "user": "54227fc6e4b01498b1a71ac0"}, {"problem": 66, "code": "(fn gcd [a b] (if(= 0 b) a (recur b (mod a b))))", "user": "564d02cde4b0284900eef679"}, {"problem": 66, "code": "#(loop [a %1 b %2]\n   (if (< a b)\n     (recur b a)\n     (if (= 0 (mod a b))\n       b\n       (recur b (mod a b)))))", "user": "55eb026de4b0121d4835fdb7"}, {"problem": 66, "code": "(fn [n m]\n  (last (filter #(and (= (rem n %1) 0) (= (rem m %1) 0)) (range 1 (inc (min n m))))))", "user": "56288ccae4b00e49c7cb47ea"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0) a\n    (recur b (rem a b))\n    )\n  )", "user": "564b495de4b0284900eef667"}, {"problem": 66, "code": "(fn gcd[a b] (if (= b 0) a (gcd b (mod a b)) ))", "user": "564b1ff8e4b0284900eef663"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= (mod a b) 0) b\n     (recur b (mod a b))))", "user": "5643a11ee4b0018b46ad8bfb"}, {"problem": 66, "code": "(fn [x y]\n  (loop [a x b y]\n    (if (= b 0) a\n      (recur b (rem a b)))))", "user": "562d869be4b0a45d2ff8301f"}, {"problem": 66, "code": "(fn __ [a b]\n  (cond (= a b) a\n        (= a 0) a\n        (> a b) (recur (- a b) b)\n        (< a b) (recur a (- b a))))", "user": "4f856adfe4b033992c121c44"}, {"problem": 66, "code": "(fn [m n]\n  (loop [d (if (< m n) m n)]\n    (if (or (= 1 d) (and (zero? (rem m d)) (zero? (rem n d))))\n      d\n      (recur (dec d)))))", "user": "52c00e32e4b07a9af5792341"}, {"problem": 66, "code": "(fn [x y] (first (filter #(= 0 (+ (mod x %) (mod y %))) (range y 0 -1))))", "user": "4ee67364535d93acb0a6685f"}, {"problem": 66, "code": "(fn gcd [m n]\n  (cond\n   (= m 0) n\n   (= n 0) m\n   :else (recur n (rem m n))))", "user": "563dfc02e4b0da801c4e4662"}, {"problem": 66, "code": "(fn gcd [a b]\n   (if (= b 0) \n     a \n     (recur b (mod a b)))\n   )", "user": "564ecc9ee4b0284900eef6a1"}, {"problem": 66, "code": "#(loop [d (min % %2)] \n  (if (= 0 (mod % d) (mod %2 d)) d\n    (recur (dec d))))", "user": "5654d0e1e4b0f9d632dd848c"}, {"problem": 66, "code": "(fn a\n  ([x y] (a x y (min x y)))\n  ([x y d]\n    (if (and (= (mod x d) 0) (= (mod y d) 0))\n      d\n      (a x y (dec d)))))", "user": "563b1553e4b0bfe05bf1180a"}, {"problem": 66, "code": "(fn [a b]\n    (let [divisors (fn [n] (filter #(zero? (mod n %)) (range 1 (inc n))))\n          divs-a (divisors a)\n          divs-b (divisors b)\n          ]\n      (some (set divs-a) (reverse (sort divs-b)))))", "user": "52846deee4b0239c8a67adcf"}, {"problem": 66, "code": "(fn [a b] \n  (last (filter #(= 0 (mod a %) (mod b %)) (range 1 (inc a)))))", "user": "56561119e4b0f9d632dd849d"}, {"problem": 66, "code": "(fn [a b]\n  (loop [a a\n         b b]\n      (if (zero? b) a,\n\t  (recur b (mod a b)))\n    )\n  )", "user": "52824143e4b0757a1b171453"}, {"problem": 66, "code": "(fn [a b]    \n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5632d1b3e4b0bfe05bf117a9"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= 0 b)\n    a\n    (gcd b (rem a b))))", "user": "564da567e4b0284900eef682"}, {"problem": 66, "code": "#(loop [cur (min %1 %2)]\n       (if (= cur 1)\n          cur\n          (if (and (integer? (/ %1 cur)) (integer? (/ %2 cur)))\n            cur\n            (recur (dec cur))))\n        )", "user": "5654cb2de4b0f9d632dd848b"}, {"problem": 66, "code": "(fn [n1 n2]\n  (let [divisible? (fn [num denom] (= 0 (mod num denom)))\n        start (min n1 n2)]\n    (loop [n start]\n      (println n)\n      (if (and (divisible? n1 n) (divisible? n2 n))\n        n\n        (recur (dec n))\n       ))))", "user": "564a560ae4b0284900eef654"}, {"problem": 66, "code": "(fn [a b]\n  (reduce #(if (and (= 0 (mod a %2)) (= 0 (mod b %2))) %2 %1) 1 (range 1 (inc (min a b)))))", "user": "4ff3113ae4b0678c553fc345"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b) a\n    (recur b (mod a b))))", "user": "54dce62fe4b024c67c0cf78c"}, {"problem": 66, "code": "(fn max-comm [a b] (if (= a b) a\n                                 (let [mx (max a b)\n                                       mn (min a b)]\n                                   (max-comm mn (- mx mn)))))", "user": "563f2eaae4b08d4f616f5ed1"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (rem a b))))", "user": "54ca93abe4b057c6fda3a264"}, {"problem": 66, "code": "(fn gcd [a b] (if (or (= a 1) (= b 1))\n                  1\n                  (if (= a b) \n                    a \n                    (recur (Math/abs (- a b)) (Math/min a b)))))", "user": "5654e024e4b0f9d632dd848d"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n   (> b a) (gcd b a)\n   (<= b 0) a\n   :else (gcd b (- a b))))", "user": "56521a26e4b0f9d632dd845f"}, {"problem": 66, "code": "(fn [n1 n2]\n  (let [make-div (fn [n] (filter #(zero? (mod n %)) (rest (range (inc n)))))]\n    (apply max (clojure.set/intersection (set (make-div n1)) (set (make-div n2))))))", "user": "535fa486e4b04ce2eb3ed2e0"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0) a\n    (gcd b (mod a b))))", "user": "565a3e25e4b068f2fe63dbfb"}, {"problem": 66, "code": "(fn [x y]\n  (loop [d (max x y)]\n    (if (and (zero? (rem x d))\n             (zero? (rem y d)))\n      d\n      (recur (dec d)))))", "user": "4fca0376e4b0ee37620e184a"}, {"problem": 66, "code": "(fn gcd [num1 num2] \n   (apply max (clojure.set/intersection \n               (set (for [x (range 1 (inc num1)) :when (zero? (rem num1 x))] x)) (set (for [x (range 1 (inc num2)) :when (zero? (rem num2 x))] x)))))", "user": "5658d775e4b00d3155796114"}, {"problem": 66, "code": "#(first (filter (fn [x] (= 0 (rem % x) (rem %2 x))) (range (min % %2) 0 -1)))", "user": "544e6b7fe4b0e39780006986"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [x (min a b)\n        y (max a b)]\n    (if (zero? x)\n      y\n      (gcd x (- y x)))))", "user": "56444fb1e4b0018b46ad8c0c"}, {"problem": 66, "code": "(fn gcd [%1 %2]\n\t(if (zero? %2)\n\t\t%1\n\t\t(gcd %2 (mod %1 %2))))", "user": "56540485e4b0f9d632dd847a"}, {"problem": 66, "code": "(fn [a b]\n              (let [range (range 1 (+ (min a b) 1))]\n                (last (filter (fn [cur] (and\n                                   (= 0 (mod a cur))\n                                   (= 0 (mod b cur)))) range))\n                ))", "user": "5658b9bde4b00d315579610e"}, {"problem": 66, "code": "#(first (filter (fn [n]\n         \t (and (not (ratio? (/ % n)))\n            \t  (not (ratio? (/ %2 n)))))\n        \n        (range (min % %2) 0 -1)))", "user": "4dada913c9a9d6ed2d99dc57"}, {"problem": 66, "code": "(fn divisor\n  [x y]\n  (let [smaller (if (< x y) x y)\n        larger (if (= x smaller) y x)\n        largest-possible-divisor (if (>= (/ larger smaller) 2)\n              smaller\n              (if (> smaller 0) (int (float (/ smaller 2))) 0))\n        possibles (reverse (range (inc largest-possible-divisor)))\n        finder (fn [l s candidates]\n                 (let [to-check (first candidates)\n                       more (rest candidates)]\n                   (if (and (zero? (rem l to-check))\n                            (zero? (rem s to-check)))\n                     to-check\n                     (recur l s more))))]\n    (finder larger smaller possibles)))", "user": "563fc1f2e4b08d4f616f5ed7"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (> b a)\n    (gcd b a)\n    (if (= (mod a b) 0)\n      b\n      (recur b (- a b)))))", "user": "5658acabe4b0f9d632dd84b7"}, {"problem": 66, "code": "(fn [x y]\n  (if (zero? y)\n    x\n    (recur y (mod x y))))", "user": "5393185ae4b0b51d73faaeb7"}, {"problem": 66, "code": "#(loop [a % b %2]\n   (let [r (rem a b)]\n     (if (= r 0)\n       b\n       (recur b (- b r)))))", "user": "565e0934e4b068f2fe63dc30"}, {"problem": 66, "code": "(fn f [x y]\n  (if (= (mod x y) 0)\n    y\n    (recur y (rem x y))))", "user": "56588f4ee4b0f9d632dd84b6"}, {"problem": 66, "code": "(fn [arg1 arg2]\n(cond\n(and true (= arg2 4)) 2\n(and true (= arg2 5)) 5\n(and true (= arg2 7)) 1\n(and true (= arg2 858)) 33\n))", "user": "565f2461e4b068f2fe63dc3b"}, {"problem": 66, "code": "(fn gcm [a b]\n  (cond\n    (= a b) a\n    (> a b) (gcm (- a b) b)\n    (> b a) (gcm a (- b a))\n    ))", "user": "56504dc2e4b0284900eef6bc"}, {"problem": 66, "code": "(fn [dig1 dig2]\n  (loop [d1 dig1 d2 dig2]\n   (cond\n    (= d1 d2) d1\n    (> d1 d2) (recur (- d1 d2) d2)\n    (< d1 d2) (recur d1 (- d2 d1))\n    )))", "user": "562c2fc2e4b058fa18c5a6d7"}, {"problem": 66, "code": "(fn [x y]\n   (loop [d 1\n          c 1\n          m (min x y)]\n     (if (> c m)\n       d\n       (if (= 0 (rem x c) (rem y c))\n         (recur c (inc c) m)\n         (recur d (inc c) m))))\n   )", "user": "56532ff4e4b0f9d632dd846e"}, {"problem": 66, "code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "user": "55380eeae4b09218d5f44fd9"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "4e894068535d4ef0aa30db97"}, {"problem": 66, "code": "(fn gcd [x y] \n  (let [s (min x y) l (max x y)] (/ s (numerator (/ s l)))) )", "user": "56304db8e4b073c1cf7a9be5"}, {"problem": 66, "code": "(fn [x y]\n   (apply max (filter #(and (zero? (mod x %1)) \n                            (zero? (mod y %1))) \n                        (range 1 (max x y)))))", "user": "564348e1e4b08d4f616f5f26"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "55ecac8ee4b0121d4835fdcc"}, {"problem": 66, "code": "(fn my-gcd\n  [number1 number2]\n  (loop\n    [n1 number1\n     n2 number2]\n    (if (zero? n2)\n      n1\n      (recur n2 (mod n1 n2) ))))", "user": "560d7863e4b05f002753df40"}, {"problem": 66, "code": "#(loop [numerator (max %1 %2) original-divisor (min %1 %2) divisor (min %1 %2)] \n   (cond (= divisor 1) 1 \n         (and (= (mod numerator divisor) 0) \n              (= (mod original-divisor divisor) 0)) divisor \n         :else (recur numerator original-divisor (dec divisor))))", "user": "4fc77f5ae4b0ee37620e1821"}, {"problem": 66, "code": "(fn [arg1 arg2]\n(cond\n(and true (= arg2 4)) 2\n(and true (= arg2 5)) 5\n(and true (= arg2 7)) 1\n(and true (= arg2 858)) 33\n))", "user": "5666bf34e4b04acd4f672dc2"}, {"problem": 66, "code": "(fn my-gcd [a b]\n  (letfn [(abs [n] (if (neg? n) (- n) n))]\n    (let [x (abs a) y (abs b)]\n      (loop [dvd (max x y) dvr (min x y) rmd (rem dvd dvr)]\n        (if (zero? rmd) \n          dvr\n          (recur dvr rmd (rem dvr rmd)))))))", "user": "5661e09ae4b068f2fe63dc70"}, {"problem": 66, "code": "(fn gcd \n  [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5656e039e4b0f9d632dd84a3"}, {"problem": 66, "code": "(fn [x y]\n  (loop [x x\n         y y]\n    (if (zero? y) x\n      (recur y (mod x y)))))", "user": "564bbb15e4b0284900eef66d"}, {"problem": 66, "code": "(fn [& args]\n  (let [sorted (sort < args)]\n    (->> (range (first sorted) 0 -1)\n         (filter #(= 0 (mod (first sorted) %) (mod (last sorted) %)))\n         first)))", "user": "5666500ee4b0e91d5f5c566d"}, {"problem": 66, "code": "(fn x [a b] (if (= a b) a (x (min a b) (- (max a b) (min a b)))))", "user": "5657fc1ae4b0f9d632dd84ad"}, {"problem": 66, "code": "(fn f [a b] (let [m (mod a b)] (if (= 0 m) b (f (max b m) (min b m)))))", "user": "559ff9eee4b0acc240e314ee"}, {"problem": 66, "code": "(fn [a b]\n  (loop [a a b b]\n    (if (= b 0)\n      a\n      (recur b (rem a b)))))", "user": "566a6e38e4b0a866af68969b"}, {"problem": 66, "code": "(fn [a b]\n  (let [div-a-seq (filter #(integer? (/ a %)) (range 1 (inc a)))\n        div-b-seq (filter #(integer? (/ b %)) (range 1 (inc b)))\n        merged-seq (sort #(> %1 %2) (concat div-a-seq div-b-seq))]\n    (println \"a : \" (partition 2 1 merged-seq))\n    (first (first (filter #(= (first %) (last %)) (partition 2 1 merged-seq))))))", "user": "54a11042e4b09f271ff37c49"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (if (zero? (rem a b))\n    b\n    (gcd b (rem a b))))", "user": "5576fee3e4b05c286339e078"}, {"problem": 66, "code": "(fn f [& args] (let [a (apply max args) b (apply min args) c (mod a b)] (if (= c 0) b (f b c))))", "user": "5632e850e4b0bfe05bf117ac"}, {"problem": 66, "code": "(fn [num-1 num-2]\n  (loop [a num-1 b num-2 num num-1]\n    (if (and (= (rem a num) 0) (= (rem b num) 0))\n      num\n      (recur a b (dec num)))))\n\n;; this is a naive approach -- it just takes the first number,\n;; whether it's the higher or lower of the two, and tests it and\n;; each decremented version of it until it finds a common denominator", "user": "55344b75e4b09218d5f44f99"}, {"problem": 66, "code": "(fn [x y]\n  (last (filter #(= 0 (rem x %) (rem y %)) (range 1 (inc (min x y))))))", "user": "55c6fd60e4b0e31453f649c9"}, {"problem": 66, "code": "(fn [x y]\n        (if (= x 0) y\n                (recur (rem y x) x)\n        )\n)", "user": "5661b0a9e4b068f2fe63dc6f"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond \n    (some #(= 0 %) '(a b))\n      nil\n    (= a b)\n      a\n    :else\n      (let [c (max a b) d (min a b) r (mod c d)]\n        (if (= r 0)\n          d\n          (gcd d r)))))", "user": "564c8e99e4b0284900eef674"}, {"problem": 66, "code": "(fn ggt [a b] \n  (let [_min (min a b) \n        input (reverse (range (inc _min)))]\n    (loop [in input] \n      (let [current (first in)] \n        (if (and  (= 0  (mod a current)) \n                  (= 0 (mod b current))) \n          current \n          (recur (rest in))  )))))", "user": "566f0ff6e4b0a866af6896e5"}, {"problem": 66, "code": "(fn f [p q]\n  (if (= 0 (rem p q))\n    q\n    (f q (rem p q))))", "user": "56483562e4b0284900eef629"}, {"problem": 66, "code": "(fn [a b]\n  (let [dv (fn [x] (set (filter #(zero? (rem x %)) (range 1 (inc x)))))]\n    (apply max (clojure.set/intersection (dv a) (dv b)))))", "user": "5640eb50e4b08d4f616f5eec"}, {"problem": 66, "code": "(fn [x y ] (first (drop-while #(or (not= (rem x %) 0) (not= (rem  y %) 0)) (reverse (range 1  (inc (min x y)))))))", "user": "56427910e4b08d4f616f5f19"}, {"problem": 66, "code": "(fn [n m]\n  (loop [small-num (min n m)]\n    (if (and (= 0 (mod n small-num))(= 0 (mod m small-num)))\n      small-num\n      (recur (dec small-num)))))", "user": "5668aad0e4b04acd4f672df5"}, {"problem": 66, "code": "(fn [a b]\n  (let [r (rem a b)]\n    (if (zero? r)\n      b\n      (recur b r))))", "user": "56669819e4b0e91d5f5c5674"}, {"problem": 66, "code": "(fn u [a b]\n  (if (or (= a 0) (= b 0))\n    (max a b)\n    (u (- (max a b) (min a b)) (min a b))))", "user": "56754c4be4b05957ce8c6149"}, {"problem": 66, "code": "(fn gcd [num1 num2]\n   (loop [a (max num1 num2) b (min num1 num2)]\n     (print \" a: \" a \"b: \" b)\n     (if (= 0 (mod a b))\n       b\n       (recur b (mod a b)))))", "user": "567476bde4b05957ce8c6139"}, {"problem": 66, "code": "#(loop [n (max % %2)]\n   (if (and (zero? (mod % n)) (zero? (mod %2 n)))\n     n\n     (recur (dec n))))", "user": "56677192e4b04acd4f672dd5"}, {"problem": 66, "code": "(fn [a b]\n   (if (= b 0)\n     a\n     (recur b (mod a b))))", "user": "54b67463e4b05787c3b163bc"}, {"problem": 66, "code": "(fn [a b]\n  (let [c (mod a b),\n        a b,\n        b c]\n    (if (not= b 0)\n      (recur a b)\n      a)))", "user": "56732c84e4b05957ce8c611c"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5676af21e4b05957ce8c6158"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "56706f01e4b0a866af6896f2"}, {"problem": 66, "code": "(fn\n  [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "566bd453e4b0a866af6896b7"}, {"problem": 66, "code": ";#(loop [x %1\n;        y %2\n;        number (min x y)]\n;  (if (= 0 number)\n;    nil\n;    (if (= 0 (mod x number) (mod y number))\n;      number\n;      (recur x y (dec number))\n;      )\n;    )\n;  )\n;\n; https://en.wikipedia.org/wiki/Greatest_common_divisor\n; https://en.wikipedia.org/wiki/Greatest_common_divisor#Using_Euclid.27s_algorithm\n(fn gcd [x y]\n  (cond\n    (= x y) x\n    (> x y) (recur (- x y) y)\n    (< x y) (recur x (- y x))\n    )\n  )", "user": "566639f4e4b0e91d5f5c566b"}, {"problem": 66, "code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "user": "56188848e4b053970a773aea"}, {"problem": 66, "code": "(fn [a b] (first (for [i (range a 0 -1) :when (and (zero? (mod a i)) (zero? (mod b i)))] i)))", "user": "50232eeae4b0b5d8b1bd2397"}, {"problem": 66, "code": "#(cond (= %2 0) % :default (recur %2 (rem % %2)))", "user": "54f9c4dfe4b01ecee9d88841"}, {"problem": 66, "code": "(fn\n  [a b]\n  (loop [x (max a b)\n         y (min a b)]\n    (if (= y 0)\n      x\n      (recur y (mod x y)))))", "user": "558b41fce4b0277789237628"}, {"problem": 66, "code": "(fn [a b]\n   (cond\n     (zero? a) b\n     (zero? b) a\n     :else (recur b (rem a b))\n     ))", "user": "55aa8276e4b0988bba2ad94e"}, {"problem": 66, "code": "(fn gcd [lhs rhs]\n  (let [larger (max lhs rhs) smaller (min lhs rhs) result (mod larger smaller)]\n    (if (= result 0) smaller (gcd smaller result))))", "user": "5668dcc6e4b04acd4f672df8"}, {"problem": 66, "code": "(fn [a b]\n             (if (zero? (rem a b))\n               b\n               (recur b (rem a b))))", "user": "517bbbfce4b07ef0e56148cf"}, {"problem": 66, "code": "#(loop [a %1 b %2]\n   (cond (< a b) (recur b a)\n         (= b 0) a\n         :else (recur (rem a b) b)))", "user": "567695c2e4b05957ce8c6157"}, {"problem": 66, "code": "#(loop [a %1 b %2]\n  (let [mx (max a b) mn (min a b)]\n    (if (= mn 0) mx (if (= (mod mx mn) 0) mn (recur (mod mx mn) mn)))\n  ))", "user": "558fec41e4b0277789237666"}, {"problem": 66, "code": "(fn gcd* [a b]\n  (cond\n    (< a b) (recur a (- b a))\n    (> a b) (recur (- a b) b)\n    :else a))", "user": "567ea95de4b0feffd0d18eb6"}, {"problem": 66, "code": "(fn gcd \n  [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "54ef7568e4b024c67c0cf885"}, {"problem": 66, "code": "(fn [x y]   (loop [a (min x y)]\n    (if  (and (= 0 (mod x a)) (= 0 (mod y a))) a\n                                               (recur (- a 1)))))", "user": "503c90aae4b06c4e0e1fa24b"}, {"problem": 66, "code": "(fn [x y]\n  (if (> x y)\n    (loop [i y]\n      (if (and (= (mod x i) 0) (= (mod y i) 0))\n        i\n        (recur (dec i))))\n    (loop [i x]\n      (if (and (= (mod x i) 0) (= (mod y i) 0))\n        i\n        (recur (dec i))))))", "user": "53bbae20e4b047364c044509"}, {"problem": 66, "code": "(fn [n1 n2]\n  (->> (min n1 n2)\n      (range)\n      (map inc)\n      (filter #(= [0 0] [(rem n1 %) (rem n2 %)]))\n      (apply max)))", "user": "567ea403e4b0feffd0d18eb5"}, {"problem": 66, "code": "(fn gcd [x y] (if (= x y) x (if (> x y) (gcd (- x y) y) (gcd y x))))", "user": "5680fff3e4b0966858e4d8f6"}, {"problem": 66, "code": "(fn [a b] (let [m (min a b)] (apply max (filter #(and (zero? (rem a %)) (zero? (rem b %))) (range 1 (inc m))))))", "user": "5659679ae4b068f2fe63dbeb"}, {"problem": 66, "code": "#(loop [a %1 b %2]\n   (let [b* (mod a b)]\n     (if (= b* 0) b\n       (recur b b*))))", "user": "565fe49ee4b068f2fe63dc46"}, {"problem": 66, "code": "(fn eucl [m n] (if (> n 0) (eucl n (mod m n)) m))", "user": "56800ba1e4b0966858e4d8e8"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "56810479e4b0966858e4d8f8"}, {"problem": 66, "code": "#(if (zero? %2)\n\t\t %1\n\t\t (recur %2 (mod % %2))\n\t\t )", "user": "56814cbce4b0945ebc182a81"}, {"problem": 66, "code": "(fn [x y]\n  (apply max (filter #(and (zero? (mod x %))\n                           (zero? (mod y %)))\n                     (range 1 (inc (min x y))))))", "user": "56826ebce4b0945ebc182a93"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n   (= a b) a\n   (> a b) (recur (- a b) b)\n   :else  (recur a (- b a))))", "user": "5680104ae4b0966858e4d8ea"}, {"problem": 66, "code": "(fn euclid [a b]\n  (if (= b 0)\n    a\n    (recur b\n           (mod a b))))", "user": "567c7fefe4b05957ce8c61bc"}, {"problem": 66, "code": "#(let [small (min %1 %2)] \n   ((fn [xs] \n      (cond \n       (empty? xs) 1 \n       (and (zero? (mod %1 (first xs))) (zero? (mod %2 (first xs)))) (first xs)\n       :else (recur (rest xs)) ) )\n    (reverse (range 1 (inc small) ) ) ) )", "user": "567798afe4b05957ce8c6169"}, {"problem": 66, "code": "(fn a [x y] (if (= x y) x (if (> x y) (a (- x y) y) (a y x))))", "user": "56798d83e4b05957ce8c618b"}, {"problem": 66, "code": "(fn [a b] (loop [i (min a b)]\n            (if (every? zero? [(mod a i) (mod b i)])\n              i\n              (recur (dec i)))))", "user": "565233f2e4b0f9d632dd8461"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond \n   (= a b)   a\n   (= a 0)   b\n   (= b 0)   a\n   (even? a) (if (even? b)\n               (* 2 (gcd (/ a 2) (/ b 2)))\n               (gcd (/ a 2) b))\n   (even? b) (gcd a (/ b 2))\n   (> a b)   (gcd (/ (- a b) 2) b)\n   :else     (gcd (/ (- b a) 2) a)))", "user": "5275f7a2e4b03e8d9a4a74d0"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (gcd b (mod a b))))", "user": "5686e652e4b0dcc4269f4059"}, {"problem": 66, "code": "(fn [m n]\n  (let [a (min m n)\n        b (max m n)]\n    (loop [i a]\n      (if (and (= 0 (mod b i)) (= 0 (mod a i)))\n        i\n        (recur (dec i))))))", "user": "5683d2a9e4b0945ebc182aa0"}, {"problem": 66, "code": "(fn [a b]\n  (let [div_seq (range 1 (inc (min a b)))]\n    (apply max (filter\n                #(= (mod a %) (mod b %) 0)\n                div_seq))))", "user": "556189a6e4b0c656e3ff17c9"}, {"problem": 66, "code": "(fn [a b]\n  (loop [a' a\n         b' b]\n    (if (zero? b')\n      a'\n      (recur b' (mod a' b')))))", "user": "567bf820e4b05957ce8c61ad"}, {"problem": 66, "code": "(fn div [x y] (loop [c (min x y)] (if (and (= 0 (mod x c)) (= 0 (mod y c))) c (recur (dec c)))))", "user": "550772cee4b021ccfedb96a8"}, {"problem": 66, "code": "(fn [x y]\n    (loop [s (range (min x y) 0 -1)]\n      (if (empty? s)\n      nil\n      (let [c (first s)]\n        (if (= (mod x c) (mod y c) 0)\n        c\n        (recur (rest s))\n        )\n      )\n      )\n    )\n  )", "user": "5681afaae4b0945ebc182a87"}, {"problem": 66, "code": "(fn gcd[a b] (let [isabig? (>= a b) \n                   x (if isabig? a b)\n                   y (if isabig? b a)]\n               (loop [x x\n                      y y]\n                 (let [remainder (rem x y)]\n                  (if (= remainder 0)\n                   y\n                   (recur y remainder))))))", "user": "567d18c9e4b05957ce8c61c4"}, {"problem": 66, "code": "(fn gcd [a b] (let [a' (min a b), b' (max a b)] (if (= a' 0) b' (gcd (mod b' a') a'))))", "user": "567b39b6e4b05957ce8c61a3"}, {"problem": 66, "code": "(fn gcd[x y] (if (zero? x) y (gcd (mod y x) x)))", "user": "56897739e4b0dcc4269f407d"}, {"problem": 66, "code": "(fn f [m n] (let [x (max m n) y (min m n) d (filter #(= 0  (rem y %) (rem x %)) (range y 0 -1))] (first d)))", "user": "551e2cade4b030e6a24d00e4"}, {"problem": 66, "code": "(fn divisor [x y]\n  (if (= 0 (mod x y))\n    y\n    (divisor y (mod x y))))", "user": "568242bfe4b0945ebc182a8f"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "567931e9e4b05957ce8c6184"}, {"problem": 66, "code": "; Euclides Algorithm\n; GCD(A,B) = GCD(B, A mod B)\n; GCD(A,0) = A\n\n(fn [n1 n2] (loop [A n1 B n2] \n            (if (= B 0) A\n              (recur B (rem A B))\n            )\n           )\n  )", "user": "56885c32e4b0dcc4269f4068"}, {"problem": 66, "code": "(fn [x y]\n    (loop [ a (if (> x y) y x), b (- (+ x y) a)]\n        \n      (if (= 0 (mod b a))\n        a\n        (if(< a (- b a))\n         (recur a (- b a))\n         (recur (- b a) a)\n         )\n        )\n      )\n  )", "user": "56874171e4b0dcc4269f405c"}, {"problem": 66, "code": "#(apply max (clojure.set/intersection (set (map (partial / %1) (range 1 (inc %1))))\n                                     (set (map (partial / %2) (range 1 (inc %2))))))", "user": "5687fe58e4b0dcc4269f4065"}, {"problem": 66, "code": "(fn [a b]\n  (let [al (filter #(= 0 (rem a %)) (range 1 (inc a)))\n        bl (filter #(= 0 (rem b %)) (range 1 (inc b)))]\n    (apply max (clojure.set/intersection (set al) (set bl)))))", "user": "4ddf597a535d08e6dec9fddf"}, {"problem": 66, "code": "(fn great-common-divisor [a b]\n  (if (zero? b)\n    a \n    (recur b (mod a b))))", "user": "5634995fe4b0bfe05bf117be"}, {"problem": 66, "code": "#(loop [a %1 b %2] (if (= b 0) a (recur b (mod a b))))", "user": "5686b7c7e4b0dcc4269f4057"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "568bddaee4b0dcc4269f40aa"}, {"problem": 66, "code": "#(if \n   (zero? %2)\n   %1\n   (recur %2 (mod %1 %2)))", "user": "568e450fe4b0dcc4269f40d0"}, {"problem": 66, "code": "(fn [m n]\n  (->>\n    (range 1 (+ 1 (max n m)))\n    (filter #(and (= 0 (mod n %)) (= 0 (mod m %))))\n    (apply max)))", "user": "51be00cae4b0ff155d51d2b8"}, {"problem": 66, "code": "(fn gcdRec [a b] (if(> b a) (gcdRec b a) (if (zero? b) a (gcdRec b (mod a b)))))", "user": "568820e8e4b0dcc4269f4067"}, {"problem": 66, "code": "(fn [x y]\n     (apply max (for [i (range 1 (max x y))\n       :when (and \n               (= (rem x i) 0)\n               (= (rem y i) 0)\n               )]\n       i)\n     ))", "user": "51e6a2bce4b0ab43cc26c21d"}, {"problem": 66, "code": "#(if (<= %2 0)  %1 (recur %2 (mod %1 %2)))", "user": "568c2d96e4b0dcc4269f40af"}, {"problem": 66, "code": "(fn [x y]\n  (apply max\n         (filter (fn [n]\n                   (and (zero? (mod x n))\n                        (zero? (mod y n))))\n                 (range 1 (inc (min x y))))))", "user": "55f85b93e4b03cbcff9738ae"}, {"problem": 66, "code": "; FIRST TRY. (lol =)\n;(fn [x y]\n;      (let [ is-common-denominator? (fn [i x y] (and (= 0 (mod y i)) (= 0 (mod x i)))) ]\n;        (loop [best-so-far 1\n;             i 2]\n;        (if (or (> i x) (> i y))\n;          best-so-far\n;          (recur (if (is-common-denominator? i x y)\n;                   i\n;                   best-so-far)\n;                 (inc i))))))\n\n; Using https://en.wikipedia.org/wiki/Euclidean_algorithm (stole from bhillier):\n(fn [a b] (if (zero? b) a (recur b (rem a b))))", "user": "5465febde4b01be26fd746e1"}, {"problem": 66, "code": "(fn iter [a b]\n  (if (= b 0)\n    a\n    (iter b (mod a b))))", "user": "5195fadee4b04c0af7ff3c11"}, {"problem": 66, "code": "#(apply max (for [i (range 1 (inc (max % %2)))] (if (= 0 (mod % i) (mod %2 i)) i 0)))", "user": "543b4746e4b032a45b86932c"}, {"problem": 66, "code": "(fn\n  [a b]\n  \"euclidean algorithm\"\n  (if (= b 0)\n    a\n    (recur b (rem a b))))", "user": "532b9075e4b09d4e7a9b5533"}, {"problem": 66, "code": "(fn [x y] (apply max(filter #(= 0 (mod x %) (mod y %))(range 1 (max x y)))))", "user": "566a3a26e4b0a866af689699"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (cond\n    (zero? b) a\n    (zero? a) b\n    (> a b) (gcd (- a b) b)\n    :otherwise (gcd a (- b a))))", "user": "56488119e4b0284900eef632"}, {"problem": 66, "code": ";; from astangl, better than mine.\n#(if (= 0 %2)\n   %1\n   (recur %2 (mod %1 %2)))", "user": "568e1871e4b0dcc4269f40cc"}, {"problem": 66, "code": "(fn [a b]\n   (loop [a a b b gcd (#(if (> %1 %2) %2 %1) a b)]\n     (if (and (zero? (mod a gcd))\n              (zero? (mod b gcd)))\n       gcd\n       (recur a b (- gcd 1)))))", "user": "561a9380e4b053970a773b07"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [m (mod (max a b) (min a b))]\n    (if (= 0 m) \n      (min a b)\n      (gcd (min a b) m))))", "user": "5657fed1e4b0f9d632dd84ae"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [modulo (rem a b)]\n    (if (= 0 modulo)\n      b\n      (gcd b modulo))))", "user": "55d68726e4b0e31453f64a99"}, {"problem": 66, "code": "#(loop [x (min %1 %2)]\n   (if ( and (= (rem %1 x) 0) (= (rem %2 x) 0) )\n     x\n     (recur (dec x))))", "user": "56743413e4b05957ce8c612e"}, {"problem": 66, "code": "(fn [& [a b]]\n  (loop [x (min a b)\n         res nil]\n    (if (or res (= x 1))\n      (or res 1)\n      (if (and (integer? (/ a x)) (integer? (/ b x)))\n        (recur (dec x) x)\n        (recur (dec x) res)))))", "user": "56175cf9e4b06b1bb2182a0f"}, {"problem": 66, "code": "(fn gcd [x y]\n    (let [mx (max x y)\n          mn (min x y)]\n        (if (= (rem mx mn) 0)\n            mn\n            (gcd (rem mx mn) mx))))", "user": "552bd5c2e4b0ffed3738f969"}, {"problem": 66, "code": "(fn [x y] (loop [a x b y] (let [c (mod a b)] (if (= c 0) b (recur b c)))))", "user": "566669d8e4b0e91d5f5c566f"}, {"problem": 66, "code": "(fn [n m]\n    (let [ div (fn [p] (for [x (range 1 (inc p)) :when (zero? (rem p x))] x)) \n           div-n (set (div n))\n           div-m (set (div m))\n           common-divs (clojure.set/intersection div-n div-m)]\n    (reduce max common-divs)))", "user": "56967bc0e4b0dcc4269f4131"}, {"problem": 66, "code": "(fn [a b] (last (filter #(and (= 0 (mod a %)) (= 0 (mod b %))) (range 1 (inc (max a b))))))", "user": "569c40cee4b0542e1f8d1462"}, {"problem": 66, "code": "(fn gcd [a b] (if (= b 0) a (recur b (mod a b))) )", "user": "56979bb7e4b0e0b3d3318cac"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))))", "user": "4e6a8d28535d8ccf87e9fef5"}, {"problem": 66, "code": "(fn [a b]\n  (some #(if (every? integer? %) (first %))\n        (for [k (range (min a b) 0 -1)] [k (/ (min a b) k) (/ (max a b) k)])))", "user": "56795deae4b05957ce8c6187"}, {"problem": 66, "code": "(fn [num1 num2]\n  (loop [gcd-candidate (if (< num1 num2) num1 num2)]\n    (if (= 0 (rem num1 gcd-candidate) (rem num2 gcd-candidate))\n      gcd-candidate\n      (recur (dec gcd-candidate)))))", "user": "5579eed7e4b05c286339e09b"}, {"problem": 66, "code": "(fn gcd \n  [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "user": "5591cc56e4b0604b3f94d582"}, {"problem": 66, "code": "(fn bcd [x y] (loop [t (min x y)] (if (= 0 (mod x t) (mod y t)) t (recur (dec t)))))", "user": "562add6de4b00e49c7cb4834"}, {"problem": 66, "code": "(fn gcd [x y] (cond (== x y) x (> x y) (gcd (- x y) y) :else (gcd x (- y x))))", "user": "56912f93e4b0dcc4269f40ef"}, {"problem": 66, "code": "(fn gcd [& nums]\n  (reduce #(if (= 0 %2)\n                %\n                (recur %2 (mod % %2))) nums))", "user": "5693a53ee4b0dcc4269f4106"}, {"problem": 66, "code": "(fn gcd [a,b]\n  (if (= b 0) a\n  (gcd b (mod a b ))))", "user": "569ad037e4b0542e1f8d144f"}, {"problem": 66, "code": "(fn gcd [x y] (if (= y 0) x (gcd y (mod x y))))", "user": "567f988be4b0feffd0d18ebe"}, {"problem": 66, "code": "(fn \n  [a b]\n  (cond\n   (or (= 0 a) (= 0 b)) 0\n   ( = a b) a\n   (> a b) (recur (- a b) b)\n   :else (recur a (- b a))))", "user": "569d4640e4b0542e1f8d147b"}, {"problem": 66, "code": "(fn [a b]\n  (->> (range 1 (max a b))\n       (filter #(= 0 \n                   (rem a %)\n                   (rem b %)))\n       (last)))", "user": "5630ce72e4b0bfe05bf11786"}, {"problem": 66, "code": "(fn gcd [a b]\n  (loop [a a\n         b b]\n    (cond\n      (= 0 a) b\n      (= 0 b) a\n      (> a b) (recur (- a b) b)\n      :else (recur a (- b a)))))", "user": "569ab3e2e4b0542e1f8d144a"}, {"problem": 66, "code": "(fn [a b]\n  (let [div (fn [n] \n              (set (filter #(= (rem n %) 0) (range 1 (inc n)))))]\n                           (apply max (clojure.set/intersection (div b) (div a)))))", "user": "56785234e4b05957ce8c6177"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (let [sml (min a b)\n        big (max a b)\n        srange (range 1 (+ sml 1))\n        brange (range 1 (+ big 1))\n        sfactors (set (filter (fn [x] (= 0 (rem sml x))) srange))\n        bfactors (set (filter (fn [x] (= 0 (rem big x))) brange))\n        commonfactors (clojure.set/intersection sfactors bfactors)]\n    (apply max commonfactors)))", "user": "566f3e18e4b0a866af6896e7"}, {"problem": 66, "code": "#(cond (= % 0) %2\n       (= %2 0) %\n       true (recur (min % %2) (rem (max % %2) (min % %2))))", "user": "5339cb07e4b0e30313ee6caf"}, {"problem": 66, "code": "(fn [x y] (first (filter #(= 0 (rem x %) (rem y %)) (range (min x y) 0 -1))))", "user": "56066e82e4b08b23635d3173"}, {"problem": 66, "code": "(fn $ ([a b] (if (> a b)\n               ($ a b (mod a b))\n               ($ b a (mod b a))))\n  ([a b m]\n   (if (zero? m)\n     b\n     (recur b m (mod b m)))))", "user": "563f24f9e4b08d4f616f5ed0"}, {"problem": 66, "code": "(fn [a b]\n  (loop [x (max a b) y (min a b)]\n    (if (zero? y)\n      x\n      (recur y (rem x y)))))", "user": "56877fcbe4b0dcc4269f405e"}, {"problem": 66, "code": "(fn gcd [ x y]\n    \n(let [r (mod x y)]  \n  (if (not= r 0)\n  (gcd y r)\n    y\n    );END:if\n  );END:let\n    \n    );END:fn", "user": "56a358d0e4b0542e1f8d14c9"}, {"problem": 66, "code": "#(if (= % 0) %2 (recur (mod %2 %) %))", "user": "56824e1be4b0945ebc182a91"}, {"problem": 66, "code": "(fn [& v] (loop [hi (apply max v)\n                lo (apply min v)]\n           (if (= lo 0)\n             hi\n             (recur lo (rem hi lo)))))", "user": "56a38a4ce4b0542e1f8d14cc"}, {"problem": 66, "code": "#(do (print %2) \n  (cond\n  (= %1 2) 2\n  (= %1 10) 5\n  (= %1 5) 1\n  (= %1 1023) 33\n  )\n)", "user": "569f33c7e4b0542e1f8d148f"}, {"problem": 66, "code": "(fn gcd [a b]\n    (if (or (= a 0) (= b 0))\n           (+ a b)\n            (gcd b (mod a b))))", "user": "569425b6e4b0dcc4269f410e"}, {"problem": 66, "code": "(fn gcd [a b]\n  (loop [a a b b]\n    (if (zero? b) a\n        (recur b (mod a b)))))", "user": "55263009e4b0ffed3738f916"}, {"problem": 66, "code": "(fn gcd [a b] (if (= b 0) a (gcd b (mod a b))))", "user": "5646dff3e4b0284900eef615"}, {"problem": 66, "code": "(fn [& xs]\n  (apply max\n   (apply clojure.set/intersection\n    (map set\n         (map\n          (fn [z] (filter #(zero? (rem z %)) (range 1 (inc z)))) xs)))))", "user": "56481722e4b0284900eef628"}, {"problem": 66, "code": "(fn gcd\n  [int1 int2]\n  (loop\n    [cand 1\n     gcd 1]\n    (cond\n     (or (> cand int1) (> cand int2)) gcd\n     (and (= 0 (rem int1 cand)) (= 0 (rem int2 cand))) (recur (inc cand) cand)\n     :else (recur (inc cand) gcd))))", "user": "51b01309e4b0c53cf2e68a57"}, {"problem": 66, "code": "#(if (= %2 0) %1 (recur %2 (mod %1 %2)))", "user": "569951e4e4b0542e1f8d143e"}, {"problem": 66, "code": "(fn gcd [x y] \n  (loop [ a (min x y) b (max x y) d (min x y) ]\n    (cond\n     (= d 1) 1\n     (and (= (mod b d) 0) (=(mod a d) 0) ) d\n     :else (recur a b (- d 1))\n     )\n    )\n  )", "user": "56942b5fe4b0dcc4269f411c"}, {"problem": 66, "code": "(fn [a b]\n  (loop [x (max a b)\n         y (min a b)\n         div (/ x y)\n         m (rem x y)]\n    (if (= m 0)\n      y\n      (recur y m (/ y m) (rem y m)))))", "user": "51a7bf26e4b0da5f497bde8c"}, {"problem": 66, "code": "#(loop [x %1 y %2] (if (zero? y) x (recur y (mod x y))))", "user": "56a75810e4b0542e1f8d14fc"}, {"problem": 66, "code": "(fn gcc [x y]\n  (if (> x y)\n    (gcc y x)\n    (if (zero? (rem y x))\n      x (gcc (- y x) x))))", "user": "56ac81ace4b03c432f187347"}, {"problem": 66, "code": "(fn [x y] (let [modulus  (mod x y) ] (if (= modulus 0) y (recur y modulus))))", "user": "5243233fe4b076204b44faac"}, {"problem": 66, "code": "(fn gcd [a b] (cond (< a b) (gcd (- b a) a) (> a b) (gcd (- a b) b) :else a))", "user": "5006c169e4b0678c553fc48d"}, {"problem": 66, "code": "(fn [a b]\n  (apply max \n         (for [d (range 1 (inc (min a b)))\n               :let [r1 (mod a d)\n                     r2 (mod b d)]\n               :when (= 0 r1 r2)]\n           d)))", "user": "53f5c402e4b0db01ade6f9d4"}, {"problem": 66, "code": "(fn gcd [a b] (if (= a b) a (if(> a b) (gcd (- a b) b) (gcd (- b a) a))))", "user": "56a1b854e4b0542e1f8d14b2"}, {"problem": 66, "code": "(fn [a b]\n  (first (filter #(= 0 (mod a %) (mod b %))\n                 (range (min a b) 0 -1))))", "user": "565f8fd2e4b068f2fe63dc41"}, {"problem": 66, "code": "(fn[a b]( cond\n               (= a b) a \n               (> a b)  (recur(- a b) b)\n               :else  (recur a (- b a))\n               ))", "user": "5515b68de4b055c2f668d4ef"}, {"problem": 66, "code": "(fn gcd* [a b] \n  (cond \n   (< a b) (recur a (- b a)) \n   (> a b) (recur (- a b) b) \n     :else a))", "user": "56942923e4b0dcc4269f4112"}, {"problem": 66, "code": "(fn gcd [a b]\n        (if (zero? b)\n          a\n          (recur b (mod a b))))", "user": "56abeb1fe4b03c432f187344"}, {"problem": 66, "code": "(fn [m n]\n  (loop [bigger (if (> m n ) m n)\n         lower (if (< m n) m n)]\n    (let [reminder (mod bigger lower)]\n      (if (= reminder 0)\n      lower\n      (recur (if (> lower reminder) lower reminder) (if (< lower reminder) lower reminder))))))", "user": "56a9ea17e4b07966d5a8a07c"}, {"problem": 66, "code": "(fn divisor\n([x y] (divisor x y (min x y)))\n([x y z]\n(if (and (= (rem x z) 0) (= (rem y z) 0))\nz\n(recur x y (dec z)))))", "user": "569adec2e4b0542e1f8d1450"}, {"problem": 66, "code": "(fn [x y]\n  (let [x-divisors (filter #(zero? (mod x %)) (range 1 (inc x)))\n        y-divisors (filter #(zero? (mod y %)) (range 1 (inc y)))]\n    (apply max (clojure.set/intersection (set x-divisors) (set y-divisors)))))", "user": "562d15a6e4b0a45d2ff83019"}, {"problem": 66, "code": "(fn [a b]\n  (let [mx (min a b)]\n    (loop [div mx]\n      (if (and (= 0 (rem a div)) (= 0 (rem b div)))\n        div\n        (recur (dec div))))))", "user": "5294a49be4b02ebb4ef7500f"}, {"problem": 66, "code": "(fn [a b]\n  (cond\n    (or (= a b) (<= a 0)) b\n    (< a b) (recur (- b a) a)\n    (< b a) (recur (- a b) b)))", "user": "511e17a9e4b0c5b849dd36b0"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b)))\n  )", "user": "5694292ee4b0dcc4269f4113"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "56942962e4b0dcc4269f4117"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n    (< a b) (recur b a)\n    (zero? b) a\n    :else (recur b (rem a b))))", "user": "5617a540e4b06b1bb2182a12"}, {"problem": 66, "code": "(fn [x y]\n  (->> (range 1 (inc (min x y)))\n       (filter #(= 0 (rem x %1) (rem y %1)))\n       (apply max)))", "user": "55f9b2b6e4b03cbcff9738c8"}, {"problem": 66, "code": "(fn\n  [a b]\n  (loop [max (max a b) min (min a b)]\n    (if (zero? min) max\n                  (recur min (rem max min)))))", "user": "56b1ab17e4b0982f16b37df1"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5693b40ce4b0dcc4269f4107"}, {"problem": 66, "code": "(fn gcd [x y]\n  (loop [divisor (min x y)]\n    (if (and (= (rem x divisor) 0) (= (rem y divisor) 0))\n      divisor\n      (recur (dec divisor)))))", "user": "56a3c89ae4b0542e1f8d14cf"}, {"problem": 66, "code": "(fn [x y] (if (= y 0) x (recur y (mod x y))))", "user": "56941e48e4b0dcc4269f410d"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "56942970e4b0dcc4269f4118"}, {"problem": 66, "code": "(fn gcd [a, b]\n        (if (zero? b)\n            a\n            (gcd b (mod a b))))", "user": "5694290fe4b0dcc4269f4110"}, {"problem": 66, "code": "(fn [a b]\n  (let [x (min a b)\n        y (max a b)]\n    (if-not (pos? (rem y x))\n      x\n      (recur x (- y x)))))", "user": "525523e3e4b0541d1855b9cc"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= 0 b)\n    a\n    (gcd b (mod a b))))", "user": "5694129de4b0dcc4269f410c"}, {"problem": 66, "code": "(fn [x y] \n   (loop [a x b y] \n     (if (= 0 b) \n       a \n       (recur b (mod a b)))))", "user": "569429c7e4b0dcc4269f411a"}, {"problem": 66, "code": "(fn gcd [a b]\n\t(if (= b 0)\n      a\n      (recur b (mod a b))))", "user": "5694284de4b0dcc4269f410f"}, {"problem": 66, "code": "(fn gcd [x y]\n  (if (zero? y)\n    x\n    (recur y (mod x y))))", "user": "56942939e4b0dcc4269f4114"}, {"problem": 66, "code": "(fn outer [e f]\n((fn gcd [a b d] \n\t(if (and (= (rem a d) 0) (= (rem b d) 0))\n      d\n      (gcd a b (- d 1)))\n)  e f e))", "user": "56ba5ffde4b0f26550335944"}, {"problem": 66, "code": "(fn [x y]  (if (= y 0) x (recur y (mod x y))))", "user": "5607fa34e4b08b23635d3184"}, {"problem": 66, "code": "(fn gcd [a b] (if (= b 0) a (gcd b (mod a b))))", "user": "56791447e4b05957ce8c6183"}, {"problem": 66, "code": "(fn gcd [a b]\n  (loop [a a b b]\n    (if (zero? b) a\n        (recur b (mod a b)))))", "user": "56942944e4b0dcc4269f4115"}, {"problem": 66, "code": "#(let [x (max % %2) y (min % %2)]\n   (if (= 0 (mod x y)) y\n     (recur y (mod x y))))", "user": "56ae214ce4b03c432f18735a"}, {"problem": 66, "code": "(fn [x y] (first (filter #(and (= 0 (mod x %)) (= 0 (mod y %))) \n                 (reverse (range 1 (inc (min x y)))))))", "user": "56baab13e4b0f26550335948"}, {"problem": 66, "code": "(fn [a b] (loop [curr-max 1 i 1] \n            (cond \n             (= i (+ (min a b) 1)) curr-max\n             (and (= 0 (mod a i)) (= 0 (mod b i))) (recur i (+ i 1))\n             :else (recur curr-max (+ i 1)))))", "user": "56af842de4b061e3ca319ad2"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))))", "user": "56a76f36e4b07966d5a8a05b"}, {"problem": 66, "code": "(fn [m n]\n  (loop [a (max m n) b (min m n)]\n    (let [c (mod a b)]\n      (println a b c)\n      (if (> c 0)\n        (recur b c)\n        b))))", "user": "5669eb9ae4b04acd4f672e02"}, {"problem": 66, "code": "(fn gcd [x y]\n  (let [is-factor? (fn [base candidate] (= 0 (mod base candidate)))\n        factors (fn [n]\n                  (into #{1 n} (filter (partial is-factor? n) (range 2 n))))\n        x-factors (factors x)\n        y-factors (factors y)\n        common-factors (clojure.set/intersection x-factors y-factors)\n        greatest (apply max common-factors)]\n    greatest))", "user": "56a51f26e4b0542e1f8d14e0"}, {"problem": 66, "code": "(fn [x y] (if (zero? y) x (recur y (mod x y))))", "user": "531a0709e4b08068f379ed87"}, {"problem": 66, "code": "(fn euklid [a, b]\n  (cond\n    (zero? b) a\n    (zero? a) b\n    (> a b) (euklid (- a b), b)\n    :else (euklid a, (- b a))))", "user": "569ce6fee4b0542e1f8d146c"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "56b86e64e4b0f26550335924"}, {"problem": 66, "code": "#(loop [c 1 x 1]\n   (if (> c (min %1 %2)) x\n     (if (= 0 (mod %1 c) (mod %2 c))\n       (recur (inc c) c)\n       (recur (inc c) x))))", "user": "56bb9ccce4b0f26550335959"}, {"problem": 66, "code": "(fn f [a b]\n  (cond \n    (> b a) (recur b a)\n    (= b 0) a\n    :else (recur b (mod a b))))", "user": "563cdfdfe4b0bfe05bf11840"}, {"problem": 66, "code": "(fn ds [x y]\n\t(let [a (min x y)\n\t\t  b (max x y)]\n\t\t(first (for [d (range a 0 -1)\n\t\t\t\t :when (and (zero? (mod a d))\n\t\t\t\t \t\t\t(zero? (mod b d)))] d))))", "user": "56baa68ce4b0f26550335947"}, {"problem": 66, "code": "(fn gcd [a b]\n  (apply max (filter #(and (zero? (mod a %))\n                           (zero? (mod b %)))\n                     (map inc (range (min a b))))))", "user": "56ba1406e4b0f2655033593c"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))\n  )\n)", "user": "56bb3a4be4b0f26550335951"}, {"problem": 66, "code": "(fn [a b]\n\t(first (for [i (range (min a b) 0 -1) \n\t\t:when (= 0 (rem a i) (rem b i))] i)))", "user": "56a01895e4b0542e1f8d149f"}, {"problem": 66, "code": "(fn [l r]\n  (let [m (min l r)]\n    (loop [i 1\n           result i]\n      (if (> i m)\n        result\n        (recur (inc i)\n               (cond\n                (and (= (mod r i) 0) (= (mod l i) 0)) i\n                :else result))))))", "user": "54a80855e4b09f271ff37c9e"}, {"problem": 66, "code": "(fn g [a b]\n  (if (= b 0)\n    a\n    (g b (mod a b))))", "user": "56bca51ae4b0f26550335963"}, {"problem": 66, "code": "(fn [x y]                                                                       \n  (last (filter                                                                 \n         #(= 0 (rem x %) (rem y %))                                            \n         (range 1 (inc (min x y))))))", "user": "563536f8e4b0bfe05bf117c5"}, {"problem": 66, "code": "#(loop [m %1\n        n %2]\n   (if (= (mod m n) 0)\n     n\n     (recur n (mod m n))))", "user": "55ed5a2de4b0121d4835fdd8"}, {"problem": 66, "code": "#(loop [x %1 y %2]\n    (let [rem (rem x y)]\n      (if (= rem 0)\n        y\n        (recur y rem))))", "user": "563c48e7e4b0bfe05bf11832"}, {"problem": 66, "code": "(fn [a0 b0]\n  (loop [a a0\n         b b0]\n    (cond\n      (< a b) (recur b a)\n      (= b 0) a\n      :else   (recur b (mod a b)))))", "user": "56bfcba1e4b060a8e693e3a1"}, {"problem": 66, "code": "#(\n  loop [a %1 b %2]\n    (if (= b 0)\n      a\n      (recur b (mod a b))))", "user": "56c0aeb8e4b060a8e693e3af"}, {"problem": 66, "code": "#(\n  loop [n (min %1 %2)]\n    (if (= (mod %1 n) (mod %2 n) 0)\n      n\n      (recur (dec n)))\n)", "user": "56b2300ce4b0982f16b37dff"}, {"problem": 66, "code": "(fn gcd [x y]\n  (loop [a x b y]\n    (if (<= b 0)\n      a\n      (if (> a b)\n        (recur (- a b) b)\n        (recur a (- b a))))))", "user": "56372c3ce4b0bfe05bf117d1"}, {"problem": 66, "code": "(fn [a b]\n  (loop [a a\n         b b]\n    (if (= 0 (mod (max a b) (min a b)))\n           (min a b)\n           (recur (min a b) (mod (max a b) (min a b))))))", "user": "5638b88de4b0bfe05bf117e9"}, {"problem": 66, "code": "(fn gcd\n  [n1 n2]\n  (first (drop-while #(not (and (= 0 (mod n1 %)) (= 0 (mod n2 %)))) (reverse (range (inc (/ (max n1 n2) 2)))))))", "user": "5609d328e4b05f002753deee"}, {"problem": 66, "code": "(fn get-max-common-divisor\n  [n m]\n  (if (zero? (mod n m))\n    m (get-max-common-divisor m (mod n m))))", "user": "56a36f76e4b0542e1f8d14ca"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "524ad140e4b09eba1c0223a9"}, {"problem": 66, "code": "(fn [m n] (cond (= n 0) m :else (recur n (mod m n))))", "user": "56c55fbce4b05cc29241eea5"}, {"problem": 66, "code": "#(last (last (take-while (comp (complement zero?) last) (iterate (fn [[a b]][b (rem a b)]) [% %2]))))", "user": "56b2573ce4b0982f16b37e02"}, {"problem": 66, "code": "(fn [x y]\n  (if (zero? y)\n    x\n    (recur y (mod x y))))", "user": "56c1e720e4b0839206b9d68b"}, {"problem": 66, "code": "(fn [x y] (apply max (filter #(= 0 (mod x %)) (filter #(= 0 (mod y %)) (range 1 (inc y))))))", "user": "56c08696e4b060a8e693e3aa"}, {"problem": 66, "code": "(fn [a b] (first (filter #(and (= 0 (rem a %)) (= 0 (rem b %))) (reverse (range 1 (+ 1 (min a b)))  ))))", "user": "56a6051fe4b0542e1f8d14e5"}, {"problem": 66, "code": "#(let [n (max %1 %2) d (min %1 %2) r (rem n d)] (if (zero? r) d (recur d r)))", "user": "56aed78fe4b03c432f187363"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n   (= a b) a\n   (> a b) (recur (- a b) b)\n   :else (recur a (- b a))))", "user": "567e418fe4b0feffd0d18eb1"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n      a\n      (recur b (mod a b))))", "user": "5250a13ee4b0541d1855b839"}, {"problem": 66, "code": "(fn gcd[x y] \n(apply max (filter (fn[k] (and (= 0 (rem x k))     \n                          (= 0 (rem y k))\n                               )\n                          )\n(into [] (range 1 (+ 1 (min x y))))))\n)", "user": "56aa9464e4b07966d5a8a08d"}, {"problem": 66, "code": "(fn [a b]\n  (->> (iterate dec (min a b))\n       (filter #(and (zero? (rem a %))\n                     (zero? (rem b %))))\n       (first)))", "user": "56c9970ce4b0ed865f9758de"}, {"problem": 66, "code": "(fn gcd [a b] \n    (if (zero? b) \n        a \n        (recur b (mod a b))))", "user": "56a7be01e4b07966d5a8a05e"}, {"problem": 66, "code": "(fn [a b]\n  (let [get-divisor (fn [n] (into #{}\n                              (filter #(zero? (rem n %))\n                                      (range 1 (inc n)))\n                              ))\n        a-divisor (get-divisor a)\n        b-divisor (get-divisor b)\n        commom-divisor (clojure.set/intersection a-divisor b-divisor)]\n    (apply max commom-divisor)))", "user": "56cba075e4b0ea9b8538f737"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "56942955e4b0dcc4269f4116"}, {"problem": 66, "code": "(fn [x y]\n  (loop [x x y y]\n    (let [a (max x y) b (min x y)]\n    (if (integer?(/ a b))\n      b\n      (recur b (- a b))))))", "user": "548a3dc6e4b0e286459a11f2"}, {"problem": 66, "code": "#(if (< %1 %2)\n   (recur %2 %1)\n   (if (= 0 (mod %1 %2))\n     %2\n     (recur %2 (mod %1 %2))))", "user": "56cd75bee4b0ea9b8538f74b"}, {"problem": 66, "code": "(fn [a b]\n    (cond \n      (< a b) (recur b a)\n      (zero? b) a\n      :else (recur b (mod a b))))", "user": "569f4dabe4b0542e1f8d1491"}, {"problem": 66, "code": "(fn [x y]\n  (loop [dividend (max x y)\n         divisor (min x y)]\n    (if (= divisor 0)\n      dividend\n      (recur divisor (rem dividend divisor)))))", "user": "55f73078e4b06e875b46cea4"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "52fe31d5e4b047fd55837038"}, {"problem": 66, "code": "(fn [a b]\n    (->>\n      (range (min a b) 0 -1)\n      (drop-while\n        #(not (and (zero? (rem a %)) (zero? (mod b %)))))\n      first))", "user": "4e8a170c535d3e98b802328f"}, {"problem": 66, "code": ";just for two, euclid\n;(fn [a b] (loop [a a b b] (if (= 0 b) a (recur b (rem a b)))))\n\n;just two, brute force, with filter\n(fn [a b] (let [candidates (range (min a b) 0 -1)] (first (filter #(= 0 (rem a %) (rem b % )) candidates)))) \n\n;;; generalized for any numebr of inputs\n;(fn [& args] (let [smallest (apply min args)] (first (for[x (range smallest 0 -1) :when (every? #(= 0 (mod % x)) args) ] x))))", "user": "54ce541de4b057c6fda3a2ac"}, {"problem": 66, "code": "(fn [x y] (loop [a x b y]\n            (if (= 0 b)\n              a\n           \t(recur b (mod a b)) \n           )))", "user": "567f034be4b0feffd0d18eba"}, {"problem": 66, "code": "(fn [f s]\n  (loop [step (max f s)]\n    (if (and (= (mod f step) 0) (= (mod s step) 0))\n      step\n      (recur (dec step))\n    )\n  )\n)", "user": "506af7d8e4b0a2a5463de37d"}, {"problem": 66, "code": "(fn [x y]\n  (first (remove #(not \n                   (and (zero? (rem x %))\n                        (zero? (rem y %))))\n        (range x 0 -1))))", "user": "56d1afd9e4b0ea9b8538f791"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b) a\n                (recur b (mod a b))))", "user": "5592ba8be4b0c79f6e1db931"}, {"problem": 66, "code": "(fn [x y]\n(let [com (if (> x y) x y)]\n(first \n\t(sort >  \n\t\t(filter #(and (= (mod y %) 0) (= (mod x %) 0)) (range 1 com)))))\n)", "user": "565b941ce4b068f2fe63dc07"}, {"problem": 66, "code": "(fn gcd [x y] \n  \t(let [d (min x y)]\n \t\t(loop [i d]\n         (if (and (= (rem x i) 0) (= (rem y i) 0) ) \n           i\n          (recur (dec i))\n         )\n        )\n    )\n)", "user": "55c5e781e4b0e31453f649b8"}, {"problem": 66, "code": "(fn [a b]\n  (loop [h (max a b)\n         l (min a b)]\n    (let [r (rem h l)]\n      (if (= r 0)\n        l\n        (recur l r)))))", "user": "56d228f3e4b0ea9b8538f79a"}, {"problem": 66, "code": "(fn [a b]\n  (let [r (rem a b)]\n    (if (zero? r)\n      b\n      (recur b r))))", "user": "56441634e4b0018b46ad8c08"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (gcd b (rem a b))))", "user": "56d05ba2e4b0ea9b8538f77d"}, {"problem": 66, "code": "(fn [a b]\n  (let [factor (fn [n]\n                 (loop [t 1\n                        m n\n                        factors (sorted-set)]\n                   (cond\n                   \t(> t m) factors\n                    (= 0 (mod n t)) (recur (inc t) (/ n t) (conj factors t))\n                   \t:else (recur (inc t) m factors))))]\n    (last (clojure.set/intersection (factor a) (factor b)))))", "user": "56d63729e4b0ea9b8538f7ca"}, {"problem": 66, "code": "#(let [max (max %1 %2)]\n  (loop [denominator max]\n    (if (and (= (mod %1 denominator) 0) (= (mod %2 denominator) 0))\n      denominator\n      (recur (dec denominator)))))", "user": "56cccd99e4b0ea9b8538f743"}, {"problem": 66, "code": "#(if (= %2 0)\n   %1\n   (recur %2 (mod %1 %2)))", "user": "568227fee4b0945ebc182a8a"}, {"problem": 66, "code": "(fn [n1 n2]\n   (let [m (max n1 n2)\n         n (min n1 n2)]\n     (last (filter (fn [x] (= 0 (mod m x)))\n                   (filter (fn [y] (= 0 (mod n y)))\n                           (concat \n                             (range 1 (inc (quot n 2))) \n                             (list n)))))))", "user": "56c70cc2e4b0ed865f9758b5"}, {"problem": 66, "code": "#(if (zero? %) %2 (recur (mod %2 %) %))", "user": "56d80542e4b0ea9b8538f7e1"}, {"problem": 66, "code": "(fn gcd [a b]\n        (if (zero? b)\n          a\n          (recur b (mod a b))))", "user": "5527be83e4b0ffed3738f936"}, {"problem": 66, "code": "(fn [x r]\n  (if (> r x)\n    (recur r x)\n    (last (take-while #(> % 0) (iterate #(rem x %) r)))))", "user": "5286a2a9e4b0239c8a67ae1e"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "user": "56d4b22de4b0ea9b8538f7bb"}, {"problem": 66, "code": "(fn euclidean-gcd [a b]\n(let [greater (max a b)\nlesser (min a b)\nnext (- greater lesser)]\n(cond (= lesser 0) greater\n(> next lesser) (euclidean-gcd next lesser)\n:else (euclidean-gcd lesser next)))\n)", "user": "56d74c88e4b0ea9b8538f7d9"}, {"problem": 66, "code": "#(loop [i (min %1 %2)]\n   (if (and (= (mod %1 i) 0)\n            (= (mod %2 i) 0))\n     i\n     (recur (dec i))))", "user": "56ab80f1e4b03c432f18733e"}, {"problem": 66, "code": "(fn [a b] ((comp first filter) #(= 0 (mod a %) (mod b %)) (range (min a b) 0 -1)))", "user": "54b8dfece4b0ed20f4ff6e9a"}, {"problem": 66, "code": "(fn eu [a b]\n  (if (= b 0)\n    a\n    (eu b (mod a b))))", "user": "56c60b36e4b05cc29241eead"}, {"problem": 66, "code": "(fn [x y]\n  (if (= y 0) x\n    (recur y (rem x y))))", "user": "4dad6fcb8e77d6ed59f12a44"}, {"problem": 66, "code": "(fn [& [x y]]\n  (reduce (fn [acc n]\n            (if (and (zero? (rem x n))\n                     (zero? (rem y n)))\n              n\n              acc))\n          1\n          (range 1 \n                 (inc (min x y)))))", "user": "55d8eed3e4b0e31453f64ac3"}, {"problem": 66, "code": "(fn [a b]\n  (loop [candidate 2\n         divisors [1]]\n    (if (> candidate (min a b))\n      (apply max divisors)\n      (recur\n       (inc candidate)\n       (if (= 0 (rem a candidate) (rem b candidate))\n         (conj divisors candidate)\n         divisors)))))", "user": "56d5fd24e4b0ea9b8538f7c5"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "56dc3bdfe4b0ea9b8538f819"}, {"problem": 66, "code": "(fn euklid-new [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "user": "55bb1b26e4b01b9910ae29e0"}, {"problem": 66, "code": "#(loop [a %1 b %2] \n  (if (= a b) \n    a \n    (if (> a b) \n      (recur (- a b) b) \n      (recur a (- b a)))))", "user": "56165702e4b06b1bb2182a02"}, {"problem": 66, "code": "(fn [& nums]\n  (let [factors (fn [n]\n                  (set (filter #(zero? (mod n %))\n                               (range 1 (inc n)))))]\n    (->> (map factors nums)\n         (apply clojure.set/intersection)\n         (apply max))))", "user": "5297dcc5e4b02ebb4ef75047"}, {"problem": 66, "code": "#(loop [num (max %1 %2)\n        div (min %1 %2)]\n    (if (zero? div)\n      num\n      (recur div (rem num div))))", "user": "550b502ae4b06e50f9beb13f"}, {"problem": 66, "code": "(fn [a b] (loop [r1 a r2 b d (min a b)] (if (= 0 (mod r1 d) (mod r2 d)) d (recur r1 r2 (dec d)))))", "user": "54be7e93e4b0ed20f4ff6eed"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "56603e5fe4b068f2fe63dc4a"}, {"problem": 66, "code": "(fn gcd [a b] (if (= 0 b) a (gcd b (mod a b))))", "user": "56d68cbae4b0ea9b8538f7cd"}, {"problem": 66, "code": "(fn [m n] \n  (let [rng (range (min m n) 0 -1)\n        pred (fn [div] (and (= 0 (rem m div)) (= 0 (rem n div))))]\n    (first (filter pred rng))))", "user": "56b6a50ae4b0982f16b37e3c"}, {"problem": 66, "code": "#(if (= 0 %2) % (recur %2 (mod % %2)))", "user": "54026d7de4b0df28a13c62cf"}, {"problem": 66, "code": "(fn [x y]\n  (if (= y 0)\n    x\n    (recur y (mod x y))\n    )\n  )", "user": "55f33f0ce4b06e875b46ce59"}, {"problem": 66, "code": "(fn gcd [x y]\n  (let [small (min x y)\n        big   (max x y)]\n    (->> (range 1 (inc small))\n         (filter #(and (= 0 (rem big %))\n                       (= 0 (rem small %))))\n         (last))))", "user": "557e56aae4b05c286339e0d5"}, {"problem": 66, "code": "(fn [a b] (if (zero? b)\n                a\n                (recur b (mod a b))))", "user": "53483a32e4b084c2834f4a57"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "52b94e26e4b07a9af57922b9"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b) \n    a\n    (recur b (mod a b))))", "user": "5650b8a0e4b0284900eef6c3"}, {"problem": 66, "code": "(fn [a b]\n  (if (= 0 a)\n    b\n    (recur (mod b a) a)\n    ))", "user": "56e227a8e4b03a7c14b85a31"}, {"problem": 66, "code": "(fn gcd [a b] \n  (if (zero? b) \n    a \n    (recur b (mod a b))))", "user": "56c0d92ae4b0839206b9d67e"}, {"problem": 66, "code": "(fn [x y]\n  (loop [a x\n         b y]\n    (if (= b 0)\n      a\n      (recur b (mod a b)))))", "user": "56e4427ce4b03a7c14b85a4c"}, {"problem": 66, "code": "(fn gcd [a b] \n  (cond\n   (= a b) a\n   (> a b) (gcd (- a b) b)\n   :else (gcd a (- b a))))", "user": "56df254be4b0ca2494a095ea"}, {"problem": 66, "code": "(fn gcd-1\n  [m n]\n  (if (zero? n)\n    m\n    (recur n (rem m n))))", "user": "56c3aca0e4b05cc29241ee90"}, {"problem": 66, "code": "(fn [a b]\n  (loop [aa a bb b]\n         (if (not= bb 0)\n           (recur bb (mod aa bb))\n           aa\n         )\n   )\n  )", "user": "56804d03e4b0966858e4d8ec"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "56c427bbe4b05cc29241ee94"}, {"problem": 66, "code": "#(if (= %1 %2) %1\n      (if (> %1 %2) (recur %2 (- %1 %2))\n          (recur %1 (- %2 %1))))", "user": "56cf80f9e4b0ea9b8538f76a"}, {"problem": 66, "code": "(fn gcd [a b]\n   (cond\n     (= a 0) b\n     (= b 0) a\n     true (gcd b (mod a b))))", "user": "550b5c10e4b06e50f9beb143"}, {"problem": 66, "code": "(fn [a b](apply max (seq (for [x (range 1 (inc(min a b)))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t:when (and (=(mod a x)0) (=(mod b x)0))]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tx))))", "user": "56646a7fe4b0e91d5f5c5657"}, {"problem": 66, "code": "(fn gcd\n   [a b]\n   (if\n     (zero? b)\n     a\n     (recur b (mod a b))))", "user": "56050f06e4b08b23635d3161"}, {"problem": 66, "code": "(fn\n  [n1 n2]\n  (loop [a (max n1 n2) b (min n1 n2) x (/ a b)  r (rem a b)]\n    (if (= 0 r)\n      b\n      (recur b (rem a b) (/ b (rem a b)) (rem b (rem a b))))))", "user": "56d4b1aee4b0ea9b8538f7ba"}, {"problem": 66, "code": "(let [gcd (fn [a b] (if (zero? b) a (recur b (mod a b))))] gcd)", "user": "56ecc4b5e4b04a395b9a043e"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (> b a) (recur b a)\n    (let [result (mod a b)]\n      (if (zero? result) b\n        (recur result b)))))", "user": "56bf4ac0e4b0f26550335985"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0) a\n    (recur b (mod a b))))", "user": "52d38c51e4b099d49816f0c5"}, {"problem": 66, "code": "(fn gcd [x y]\n  (->> (range 1 (inc (min x y)))\n       (filter #(and (= 0 (mod x %) (mod y %))))\n       (last)))", "user": "569dd6e8e4b0542e1f8d1480"}, {"problem": 66, "code": "(fn gcd [a b]\n    (if (= 0 b)\n      a\n      (let [t1 b t2 (mod a b)]\n        (gcd t1 t2))))", "user": "56eaad95e4b04a395b9a040f"}, {"problem": 66, "code": "(fn my-greatest-common-divisor\n  [x y]\n  (if (zero? y)\n    x\n    (recur y (mod x y))))", "user": "560d4994e4b05f002753df3c"}, {"problem": 66, "code": "(fn [a b]\n   (loop [n (min a b)]\n     (if (and (zero? (rem a n)) (zero? (rem b n))) n\n       (recur (dec n))\n     )))", "user": "56ebe773e4b04a395b9a042a"}, {"problem": 66, "code": "(fn greatest-common-divisor [x y]\n  (let [remainder (mod x y)]\n    (if (= 0 remainder)\n      y\n      (recur y remainder))))", "user": "518b8561e4b0f028e99addef"}, {"problem": 66, "code": "#(if (< % %2) (recur %2 %) (if (= 0 %2) % (recur %2 (mod % %2))))", "user": "56e06625e4b0ca2494a09607"}, {"problem": 66, "code": "(fn [x y]\n  (loop [d (if (< x y) x y)]\n    (if (and (= (mod x d) 0) (= (mod y d) 0))\n      d\n      (recur (- d 1)))))\n\n;; other solution\n;; (fn gcd [a b] (if (zero? b) a (gcd b (mod a b))))", "user": "56ee0691e4b04a395b9a044c"}, {"problem": 66, "code": "(fn\n  [v1 v2]\n  (first\n   (filter #(= 0 (rem v1 %) (rem v2 %))\n           (range (max v1 v2) 0 -1))))", "user": "56dc483fe4b0ea9b8538f81b"}, {"problem": 66, "code": "(fn\n  [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a, b))))", "user": "56a37ccee4b0542e1f8d14cb"}, {"problem": 66, "code": "(fn [a b] (reduce #(if (= 0 (mod a %2) (mod b %2)) %2 %1) 1 (range 2 (inc (min a b)))  ))", "user": "56db90d4e4b0ea9b8538f80d"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [c (rem a b)]\n    (if (zero? c)\n      b\n      (gcd b c))))", "user": "562268dce4b03f08ee9a9224"}, {"problem": 66, "code": "#(first (for [i (reverse (range 1 (+ 1 (min % %2))))\n        :when (and (= (mod % i) 0) (= (mod %2 i) 0))] \n          i\n          )\n)", "user": "56e7ebb4e4b02e7e935eb6e1"}, {"problem": 66, "code": "(fn gcd\n  [x y]\n  (loop [a x,\n         b y]\n    (if (zero? b)\n      a\n      (recur b, (mod a b)))))", "user": "56e99ec8e4b04a395b9a03fb"}, {"problem": 66, "code": "(fn gcd [x y]\n  (let [divs (reverse (range 1 (inc (min x y))))]\n    (first \n     (filter \n      #(and (zero? (rem x %)) (zero? (rem y %)))\n      divs\n      )\n     )\n    )\n  )", "user": "56f188e9e4b04a395b9a0494"}, {"problem": 66, "code": "#(loop [a %1 b %2] (if (zero? b) a (recur b (rem a b))))", "user": "56e6ef89e4b02e7e935eb6d0"}, {"problem": 66, "code": "(fn gcd [x,y]\n  (if (> y x)\n    (gcd y x)\n    (if (= (rem x y) 0)\n      y\n      (gcd y (rem x y))\n    )\n  )\n)", "user": "56f258d3e4b04a395b9a04a1"}, {"problem": 66, "code": "(fn gcd[a b]\n  (cond\n   \t(zero? a)\n   \tb\n   \t(zero? b)\n    a\n    (>= a b)\n    (recur (- a b) b)\n    (< a b)\n    (recur (- b a) a)))", "user": "55101237e4b06e50f9beb181"}, {"problem": 66, "code": "(fn gcd [x y] (if (= y 0) x (recur y (rem x y))))", "user": "56e53d2fe4b02e7e935eb6bc"}, {"problem": 66, "code": "(fn [x y]\n  (if-not (= y 0)\n    (recur y (mod x y))\n    x))", "user": "5655e056e4b0f9d632dd849b"}, {"problem": 66, "code": "#(.gcd (biginteger %1) (biginteger %2))", "user": "52c35afce4b07a9af579238c"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "56f4623ae4b046a417f9205d"}, {"problem": 66, "code": "(fn [a b]\n  (reduce #(if (and\n                 (= 0 (mod a %2 ))\n                 (= 0 (mod b %2 )))\n            %2\n            %1) 1 (range 1 (inc (min a b)))))", "user": "5033ed65e4b062bc5d7ae15a"}, {"problem": 66, "code": "(fn [x y]\n  (reduce #(if (= 0 (+ (mod x %2) (mod y %2))) %2 %) 1 (range 1 (inc x))))", "user": "542a8d07e4b01498b1a71b43"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "56ca0da9e4b0ea9b8538f715"}, {"problem": 66, "code": "(fn gcd [a b] (if (< a b) (gcd b a) (if (zero? b) a (gcd b (- a b)))))", "user": "56dc3dbbe4b0ea9b8538f81a"}, {"problem": 66, "code": "(fn gcd [a b]\n  (loop [x a y b]\n    (let [q (quot x y)\n          r (rem x y)]\n         (if (= 0 r)\n           y\n           (recur y r)))))", "user": "5689fd03e4b0dcc4269f4088"}, {"problem": 66, "code": "(fn gcd [a,b] (if (zero? b) a (gcd b (mod a b))))", "user": "56f15eade4b04a395b9a048e"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "568c92c6e4b0dcc4269f40b8"}, {"problem": 66, "code": "(fn [x y]\n  (apply \n   max \n   (filter #(= 0 (rem x %) (rem y %))(range 1 (+ 1 (min x y))))))", "user": "542fa0dde4b0dad94371f2d2"}, {"problem": 66, "code": "(fn gcd [a b] \n(if (> a b) (gcd b a)\n(let [m (mod b a)]\n(if (= 0 m)\n a\n(gcd a m)))))", "user": "56c4f971e4b05cc29241ee9d"}, {"problem": 66, "code": "(fn [a b]\n    (let [smaller (min a b)]\n      (first (filter #(and (= 0 (mod a %)) (= 0 (mod b %)))\n        (reverse (range 1 (inc smaller)))\n        )\n      )) \n    )", "user": "56ef11efe4b04a395b9a045b"}, {"problem": 66, "code": "(fn gcd [a b]\n  (loop [a a b b]\n    (if (zero? b) a\n        (recur b (mod a b)))))", "user": "56eb16d8e4b04a395b9a041d"}, {"problem": 66, "code": "; Euclid's algorithm - Keep substituting the large number with the remainder of large / small\n\n(fn [x y]\n  (let [[sm lg] (sort [x y])]\n    (if (zero? sm) \n      lg\n      (recur (rem lg sm) sm))))", "user": "56c4f43ce4b05cc29241ee9c"}, {"problem": 66, "code": "(fn gcd [x y]\n  (let [a (min x y)\n        b (max x y)]\n    (if (zero? (mod b a))\n      a\n      (recur (mod b a) a))))", "user": "56f7ecdfe4b08e7d20b96834"}, {"problem": 66, "code": "(fn gcd [a b] \n  (let [m (if (> a b) (mod a b) (mod b a))] m\n    (cond \n     (= m 0) (min a b) \n     (and (= 0 (mod a m)) (= 0 (mod b m))) m\n     :else (recur (min a b) m))))", "user": "56742817e4b05957ce8c612d"}, {"problem": 66, "code": "(fn [x y] (let [big (max x y) small (min x y)] (if (= (rem big small) 0) small (recur small (rem big small)))))", "user": "54e7425ee4b024c67c0cf810"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= a b) a\n   (if (> a b) (gcd (- a b) b)\n       (gcd a (- b a)))))", "user": "56fc1bc7e4b07572ad1a88dd"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= 0 b) \n    a\n    (gcd b (mod a b))))", "user": "56be8649e4b0f26550335983"}, {"problem": 66, "code": "(fn [num1 num2]\n  (let [smallnum (if (> num1 num2) num2 num1)]\n    (some #(when (and (= (rem num1 %) 0) (= (rem num2 %) 0)) %) (range smallnum 0 -1))))", "user": "56f9890be4b07572ad1a88b5"}, {"problem": 66, "code": "(fn gcd [a b]\n   (let [minn (min a b)\n         maxn (max a b)]\n     (if (= minn 0)\n       a\n       (gcd minn (rem maxn minn)))))", "user": "56fbf83de4b07572ad1a88da"}, {"problem": 66, "code": "(fn gcd [a b] \n  (if (zero? b)\n    a\n    (recur b (mod a b))\n    )\n )", "user": "569637d8e4b0dcc4269f4130"}, {"problem": 66, "code": "(fn gcd [x y] (if (< x y) (gcd y x)  (if (= (mod x y) 0) y (gcd y (mod x y)))))", "user": "56fdd9a1e4b08d47c97781a8"}, {"problem": 66, "code": "(fn [x y]\n    (loop [n (min x y)]\n      (if (and (= (mod x n) 0)\n               (= (mod y n) 0)) n\n          (recur (dec n)))))", "user": "4f57c913e4b0a7574ea7183f"}, {"problem": 66, "code": "(fn [a b]\n  (reduce (fn [x y] \n            (let [r1 (rem a y)\n                  r2 (rem b y)]\n            (if (= 0 r1 r2) (max x y) x))) (range 1 (inc (max a b)))))", "user": "56fde58ae4b08d47c97781aa"}, {"problem": 66, "code": "(fn f [a b]\n  (let [i (max a b) j (min a b)]\n    (let [c (- i j)]\n      (if (= b c)\n        b\n        (f b c)))))", "user": "57008afae4b08d47c97781ca"}, {"problem": 66, "code": "(fn [a b] \n  (cond\n   (= 0 a) b\n   (= 0 b) a\n   :else (recur b (mod a b))))", "user": "57006957e4b08d47c97781c8"}, {"problem": 66, "code": "(fn [a b] \n  (let [min (if (<= a b) a b)]\n    (loop [x min]\n      (cond\n       \t(= 0 x) 1\n        (and (= 0 (mod a x)) (= 0 (mod b x))) x\n        :else (recur (dec x))))))", "user": "52c1cc8be4b07a9af579236b"}, {"problem": 66, "code": "(fn gcd [a b]\n  (first (first (filter (fn [[a b]] (= b 0))\n                        (iterate (fn [[a b]]\n                                   (vector b (rem a b)))\n                                 (if (> a b) [a b] [b a]))))))", "user": "56f9392ae4b07572ad1a88ac"}, {"problem": 66, "code": "(fn gcd [a b]\n  (loop [t 1\n         g 1]\n    (cond\n      (> t (min a b)) g\n      (= [0 0] (map #(mod % t) [a b])) (recur (inc t) t)\n      true (recur (inc t) g))))", "user": "5703eda3e4b08d47c9778200"}, {"problem": 66, "code": "(fn [& args]\n  (letfn [(common-div [i] (zero? (reduce + (map #(mod % i) args))))]\n    (->> (range (apply min args) 0 -1)\n         (filter common-div)\n         first)))", "user": "54a6645be4b09f271ff37c87"}, {"problem": 66, "code": "(fn [x y]\n  (loop [x x, y y]\n    (let [yLTx (< x y)\n          a (if yLTx x y)\n          b (if yLTx y x)]\n      (if (= 0 (mod b a)) a\n        (recur (- b a) a)))))", "user": "51e5a627e4b0efabf93c02db"}, {"problem": 66, "code": "(fn gcd [m n]\n  (if (> n m)\n    (gcd n m)\n    (if (zero? (mod m n))\n      n\n      (recur n (mod m n)))))", "user": "570459a9e4b0b0fb43fd0662"}, {"problem": 66, "code": "#(if (= 0 %2) % (recur %2 (mod % %2)))", "user": "57035ccfe4b08d47c97781ef"}, {"problem": 66, "code": "(fn gcd [a b]\n    (if (= b 0) a\n                (recur b (mod a b))\n\n                )\n    )", "user": "5587d91ae4b059ccff29b1e9"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "57061d20e4b0b0fb43fd0679"}, {"problem": 66, "code": "(fn [n1 n2]\n  (apply max\n   (filter #(and (= 0 (mod n1 %)) (= 0 (mod n2 %)))\n           (rest (range (max n1 n2))))))", "user": "56f73913e4b08e7d20b9682d"}, {"problem": 66, "code": "#(loop [a %1 b %2]\n (let [r (mod a b)]\n  (if (= r 0)\n    b\n    (recur b r))))", "user": "569aca1ee4b0542e1f8d144d"}, {"problem": 66, "code": "(fn euler-gcd [a b] \"docstring\" (loop [a a b b] (cond (= a 0) b (= b 0) a (< a b) (recur (mod b a) a) :else (recur (mod a b) b))))", "user": "554d386ee4b0a04f792995b8"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5292feb4e4b0239c8a67af39"}, {"problem": 66, "code": "(fn [a b]\n  (if (< a b)\n    (recur b a)\n    (if (= b 0)\n      a\n      (recur b (mod a b)))))", "user": "549eb44fe4b0f3d1d8e70fa6"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n   a\n   (gcd b (mod a b))))", "user": "5703ce0fe4b08d47c97781fd"}, {"problem": 66, "code": "(fn [a b]\n  (loop [A a, B b]\n    (if (= (rem A B) 0)\n    \tB\n    \t(recur B (rem A B)))))", "user": "57015a1de4b08d47c97781d4"}, {"problem": 66, "code": "(fn [a b]\n  (let [get-divisor (fn [n] \n                      \t(into #{} (filter #(zero? (rem n %)) (range 1 (inc n)) )))\n        a-divisor (get-divisor a)\n        b-divisor (get-divisor b )\n        common-div (clojure.set/intersection a-divisor b-divisor) ]\n        (apply max common-div)))", "user": "56ff0ef3e4b08d47c97781ba"}, {"problem": 66, "code": "(fn [a b]\n(cond\n    (= a b) a\n    (> a b) (recur (- a b) b)\n    (< a b) (recur a (- b a))))", "user": "53bc10f5e4b047364c04450d"}, {"problem": 66, "code": "(fn greatest-common-divisor [num1 num2]\n  (first (filter\n    #(and (= (rem num1 %) 0) (= (rem num2 %) 0))\n    (range (min num1 num2) 0 -1))))", "user": "56fbcc1fe4b07572ad1a88d5"}, {"problem": 66, "code": "(fn gcd\n  ([x y] (gcd (list x y)))\n  ([nums] (let [smaller (first (sort nums)), larger (last (sort nums))]\n            (if (= 0 smaller)\n              larger\n              (recur (list smaller (- larger smaller)))))))", "user": "56e4991fe4b03a7c14b85a4f"}, {"problem": 66, "code": "(fn gcf [x y]\n  (cond (= 0 (rem x y)) y\n        (= 0 (rem y x)) x\n        :else\n          (let [z (int (if (< x y) (quot x 2) (quot y 2)))\n                internal-gcf (fn [x y z]\n                (if (or (= 1 z) (and (= 0 (rem x z)) ( = 0 (rem y z)))) z\n                  (recur x y (dec z))))]\n            (internal-gcf x y z))))", "user": "56f4cedce4b046a417f92063"}, {"problem": 66, "code": "(fn [x y] (if (zero? y) x (recur y (rem x y))))", "user": "56ab7578e4b03c432f18733d"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0)\n  a\n  (recur b (mod a b))))", "user": "55ba70f9e4b01b9910ae29d4"}, {"problem": 66, "code": "(fn [x y] (let [ pg (max x y)\n\t\t\t\t pp (min x y)]\n\t\t\t\t (last (filter #(and (= 0 (rem pg %)) (= 0 (rem pp %))) (range 1 (inc pp))))))", "user": "56d439d4e4b0ea9b8538f7b6"}, {"problem": 66, "code": "(fn gcd [x y] \n  (if (= y 0)\n    x\n    (recur y (rem x y))\n  )\n)", "user": "57011eb3e4b08d47c97781d1"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n    (= a b) a\n    (> a b) (gcd (- a b) b)\n    (< a b) (gcd a (- b a))))", "user": "56cb4d06e4b0ea9b8538f72e"}, {"problem": 66, "code": "(fn nominator [a b]\n  (apply max\n    (filter\n      #(= 0 (rem a %) (rem b %))\n      (range 1 (inc (min a b))))))", "user": "56fc0601e4b07572ad1a88db"}, {"problem": 66, "code": "(fn gcd\n  ([a b]\n   (gcd (sort [a b])))\n  ([[a b]]\n   (if (> b a) (gcd a (- b a)) a)))", "user": "5712854ce4b07c98581c3a89"}, {"problem": 66, "code": "#(loop [x (max %1 %2) y (min %1 %2)] (if (zero? y) x (recur y (rem x y))))", "user": "527bd988e4b03e8d9a4a759d"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0) a\n    (gcd b (mod a b))))", "user": "5710e574e4b09c608db7043b"}, {"problem": 66, "code": "(fn [x y]\n  (loop [r (max x y)]\n    (if (and (zero? (mod x r)) (zero? (mod y r))) r\n        (recur (dec r)))))", "user": "571077e8e4b09c608db70434"}, {"problem": 66, "code": "(fn cmod [a b] (if (= b 0) a (if (> a b) (cmod b (mod a b)) (cmod a (mod b a)) )))", "user": "56ff7ffee4b08d47c97781be"}, {"problem": 66, "code": "(fn [a b]\n  (->> (min a b)\n       (iterate dec)\n       (filter #(zero? (+ (mod a %) (mod b %))))\n       first))", "user": "5711b532e4b09c608db70449"}, {"problem": 66, "code": "(fn [x y]\n  (loop [a (max x y)\n         b (min x y)]\n    (if (= b 0) a (recur b (rem a b)))))", "user": "57002b81e4b08d47c97781c7"}, {"problem": 66, "code": "(fn [a b] (apply max (filter #(and (= 0 (rem b %1))  (= 0 (rem a %1))) (range 1 (inc (min a b ))))))", "user": "4e5e9f6b535d8a8b8723a2d2"}, {"problem": 66, "code": "(fn [& nums]\n   (apply max(keys (filter #(= (val %) 2) (let [nums (sort nums)\n                                       r (range 1 (inc (second (sort nums))))]\n                                   (frequencies\n                                     (flatten\n                                       [(filter #(= (mod (first nums) %) 0) r)\n                                        (filter #(= (mod (second nums) %) 0) r)])\n                                     ))))))", "user": "56ede653e4b04a395b9a0449"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5716845be4b07c98581c3afa"}, {"problem": 66, "code": "#(loop [a (max %1 %2)\n        b (min %1 %2)]\n   (if (= b 0) a\n     (recur b (mod a b))))", "user": "57168db0e4b07c98581c3afc"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0) a\n    (gcd b (mod a b))))", "user": "5717e367e4b07c98581c3b1d"}, {"problem": 66, "code": "(fn [x y]\n  (reduce (fn [gcd n]\n            (if (and (zero? (mod x n)) (zero? (mod y n)))\n              n\n              gcd))\n          (range 1 (inc (min x y)))))", "user": "571c2babe4b07c98581c3b73"}, {"problem": 66, "code": "(fn mygcd [a b]\n  (if (> b a)\n    (recur b a)\n    (let [m (mod a b)]\n      (if (zero? m)\n        b\n        (recur b m)))))", "user": "571d063ee4b0145328a76272"}, {"problem": 66, "code": "#(loop [m (min %1 %2)]\n   (if (= (mod %1 m) (mod %2 m) 0)\n     m\n     (recur (dec m))))", "user": "570362ece4b08d47c97781f0"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5713c575e4b07c98581c3aab"}, {"problem": 66, "code": "#(apply max (for [i (iterate inc 1) :while (and (<= i %) (<= i %2)) :when (= 0 (rem % i) (rem %2 i))] i))", "user": "52393e16e4b0d705d026ef06"}, {"problem": 66, "code": "(fn gcd [x y] (if (> y x) (gcd y x) (if (= y 0) x (gcd y (rem x y)))))", "user": "571aad45e4b07c98581c3b59"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "56df63e1e4b0ca2494a095f6"}, {"problem": 66, "code": "(fn f [n m]\n  (cond \n   \t\t(zero? m) n\n   \t\t:else (f m (mod n m))\n   )\n  )", "user": "56df6351e4b0ca2494a095f3"}, {"problem": 66, "code": "(fn gcd [a b]\n  (loop [dividend (max a b)\n         divisor (min a b)\n         quotient (quot dividend divisor)\n         remainder (rem dividend divisor)]\n    (if (zero? remainder)\n      divisor\n      (recur divisor\n             remainder\n             (quot divisor remainder)\n             (rem divisor remainder)))))", "user": "56df63c7e4b0ca2494a095f5"}, {"problem": 66, "code": "(fn p\n  [a b]\n  (cond\n    (= a b) a\n    (> a b) (p (- a b) b)\n    :else (p a (- b a))))", "user": "56df6498e4b0ca2494a095f8"}, {"problem": 66, "code": "(fn gcd\n  [number1 number2]\n  (apply max (filter #(and (<= % number1) (<= % number2) (= 0 (mod number1 %)) (= 0 (mod number2 %))) (concat (range 1 (inc number1)) (range 1 (inc number2))))))", "user": "56fe2a2fe4b08d47c97781ad"}, {"problem": 66, "code": "#(if (= 0 (rem %2 %))\n     %\n     (recur (rem %2 %) %))", "user": "5714e82ae4b07c98581c3ac9"}, {"problem": 66, "code": "(fn gcd [a b] \n  (if (zero? b) \n    a \n    (recur b (mod a b))))", "user": "56df6417e4b0ca2494a095f7"}, {"problem": 66, "code": "(fn\n [x y]\n (let [[x y] (sort [x y])]\n   (let [r (mod y x)]\n     (if (= 0 r)\n       x\n       (recur x r)\n       )\n     )\n   )\n )", "user": "56edf2dde4b04a395b9a044b"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "56df629fe4b0ca2494a095ee"}, {"problem": 66, "code": "(fn gcd [val1 val2]\n  (if (zero? val2)\n    val1\n    (gcd val2 (rem val1 val2))))", "user": "571cd9dce4b0145328a76271"}, {"problem": 66, "code": "(fn\n  ;\"Using Euclid's algorithm\"\n  [n1 n2]\n  (cond\n    (and (< n1 0) (< n2 0)) 1\n    (= n1 n2) n1\n    (< n1 n2) (recur n1 (- n2 n1))\n    (> n1 n2) (recur (- n1 n2) n2)))", "user": "5720a2b0e4b0c5bde472c099"}, {"problem": 66, "code": "(fn gcd[a b]\n(cond (= a b) a\n      (> a b) (gcd (- a b) b)\n      (< a b) (gcd a (- b a))))", "user": "56df632ce4b0ca2494a095f2"}, {"problem": 66, "code": "(fn [x y]\n  (cond \n   (> x y) (recur y x)\n   (= 0 x) y\n   :else (recur (rem y x) x)))", "user": "571e6d73e4b0145328a76292"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (cond \n    (= a b) a\n    (> a b) (gcd (- a b) b)\n    :else   (gcd a (- b a))))", "user": "57210e8ee4b0c5bde472c0a8"}, {"problem": 66, "code": "(fn [n1 n2]\n  (let [mx \n        (inc (max n1 n2))\n        ptn \n        (filter #(= (mod n1 %) (mod n2 %) 0) (range 1 mx))\n        gcd \n        (apply max ptn)]\n    gcd))", "user": "56f51879e4b046a417f92069"}, {"problem": 66, "code": "(fn [x y] \n  (first \n    (filter \n      #(and (= (mod y %) 0) (= (mod x %) 0)) \n      (iterate dec (min x y)))))", "user": "4df73d64535d04ed9115e775"}, {"problem": 66, "code": "(fn GCD [a b]\n  (if (zero? b)\n    a\n    (GCD b (mod a b))))", "user": "571dd145e4b0145328a76283"}, {"problem": 66, "code": "(fn [a b]\n  (if (<= b 0)\n    a\n    (recur b (mod a b))))", "user": "562d6fb9e4b0a45d2ff8301c"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "56e9a56ae4b04a395b9a03fc"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "57201f14e4b0c5bde472c08e"}, {"problem": 66, "code": "(fn [x y]\n  (loop [divisor (if (< x y) x y)]\n    (if (and (= (rem x divisor) 0) (= (rem y divisor) 0))\n      divisor\n      (recur (dec divisor))\n      )\n    )\n  )", "user": "56de78fde4b0ea9b8538f83c"}, {"problem": 66, "code": "#(let [all-divisors (for [divisor-candidate (range 1 (inc (min %1 %2)))\n                             :when (and\n                                    (zero? (mod %1 divisor-candidate))\n                                    (zero? (mod %2 divisor-candidate)))]\n                         divisor-candidate)]\n      (apply max all-divisors))", "user": "551bdefde4b07993ea3788d7"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a\n                (gcd b (mod a b))))", "user": "56df62b3e4b0ca2494a095ef"}, {"problem": 66, "code": "(fn gcd [x y]\n  (if (zero? (* x y))\n    (max x y)\n    (if (< y x)\n      (gcd y x)\n      (gcd x (- y x)))))", "user": "56eb3f9de4b04a395b9a0420"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "57211a02e4b0c5bde472c0a9"}, {"problem": 66, "code": "(fn [a b]\n  (let [divisors (fn [x]\n                   (cond\n                     (not (pos? x)) nil\n                     :else (filter (fn [y] (= 0 (rem x y))) (range 1 (inc x)))))]\n   (apply max (clojure.set/intersection (set (divisors a))\n                                        (set (divisors b))))))", "user": "5715b929e4b07c98581c3ae2"}, {"problem": 66, "code": "(fn gcd [& nums]                                                                                                                                                                  \n  (let [least (first (sort nums))                                                                                                                                                   \n        greatest (last (sort nums))                                                                                                                                                 \n        denoms (range 1 (inc least))]                                                                                                                                               \n    (last (filter #(and (= 0 (rem least %)) (= 0 (rem greatest %))) denoms))))", "user": "5728d33ce4b0c6e51e0d2b12"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "56df636ae4b0ca2494a095f4"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (cond \n    (= a b) a\n    (> a b) (gcd (- a b) b)\n    :else   (gcd a (- b a))))", "user": "56df7440e4b0ca2494a095fb"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "571ff1ebe4b0c5bde472c088"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (cond \n    (= a b) a\n    (> a b) (gcd (- a b) b)\n    :else (gcd a (- b a))))", "user": "5723e6d6e4b0c5bde472c0f1"}, {"problem": 66, "code": "#(apply max (filter (fn [x] (not= x nil)) (map (fn [x] (if (and(=(rem (max %1 %2) x)0) (=(rem (min %1 %2) x) 0)) x)) (range 1 ( + (min %1 %2) 1)))))", "user": "571a0a0ae4b07c98581c3b44"}, {"problem": 66, "code": "(fn [a b]\n  (let [s (min a b)\n        l (max a b)]\n    (if (= 0 s)\n      l\n      (recur s (mod l s)))))", "user": "5461dc79e4b01be26fd746a8"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "57283dbce4b0c5bde472c154"}, {"problem": 66, "code": "(fn [a b]\n  (loop [m a\n         n b]\n    (if (zero? (mod m n))\n      n\n      (recur n (mod m n)))))", "user": "53716539e4b0fc7073fd6eb1"}, {"problem": 66, "code": "#(if (= 0 %2) % (recur %2 (mod % %2)))", "user": "5547b72be4b0a04f79299550"}, {"problem": 66, "code": "(fn [ia ib]\n  (\n    loop [a ia b ib]\n    (\n      if (= 0 (* a b))\n        (+ a b)\n        (\n          if \n            (> a b) \n            (recur (rem a b) b)\n            (recur (rem b a) a)\n        )\n    )\n  )\n)", "user": "5717d674e4b07c98581c3b1a"}, {"problem": 66, "code": "(fn gcd [a b]\n  ;; WLOG, let a < b\n  (if (< b a)\n    (recur b a)\n    ;; Consider that part of b that cannot be divided by a.\n    (let [r (mod b a)]\n      ;; If the remainder is zero, a is the gcd.\n      (if (= 0 r)\n        a\n        ;; Otherwise, find something that divides both a and r.\n        (recur r a)))))", "user": "569f99cce4b0542e1f8d1497"}, {"problem": 66, "code": "(fn gcd [p q]\n    (if (zero? q) p (gcd q (mod p q))))", "user": "57213df6e4b0c5bde472c0ab"}, {"problem": 66, "code": "(fn [a b]\n        (if (zero? b)\n          a\n          (recur b (mod a b))))", "user": "572ca54ae4b0cd1946bd0f59"}, {"problem": 66, "code": "(fn [x, y]\n  (loop [m x n y]\n    (if (= 0 (mod m n))\n      n\n      (recur n (mod m n)))))", "user": "572ea970e4b0cd1946bd0f89"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= 0 b)\n    a\n    (gcd b (mod a b))))", "user": "5733e4aee4b0cd1946bd0ffe"}, {"problem": 66, "code": "(fn [a b]\n  (loop [big (max a b) small (min a b)]\n  (if (zero? small)\n     big\n     (recur small (mod big small)))))", "user": "570794d8e4b0b0fb43fd068b"}, {"problem": 66, "code": "(fn gcd [n1 n2]\n  (loop [numerator (if (< n1 n2) n2 n1)\n         denominator (if (< n1 n2) n1 n2)]\n    (if (= 0 (rem numerator denominator))\n      denominator\n      (recur denominator (rem numerator denominator)))))", "user": "56cc34aee4b0ea9b8538f73c"}, {"problem": 66, "code": "(fn gcd [a b] (if (not= 0 b) (gcd b (mod a b)) a))", "user": "533a2f7be4b0e30313ee6cb8"}, {"problem": 66, "code": "(fn [a b]\n   (cond\n     (zero? b) a\n     :else (recur b (mod a b))))", "user": "573107d5e4b0cd1946bd0fbc"}, {"problem": 66, "code": "(fn [a b]\n  (if (= a b)\n    a\n    (recur (if (< a b) a b) (Math/abs (- a b)))))", "user": "5739cbe4e4b0cd1946bd107c"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))\n  )\n  )", "user": "5735ac67e4b0cd1946bd102b"}, {"problem": 66, "code": "(fn [x y] (let [m (max x y) n (min x y) r (mod m n)] (if (= r 0) n (recur n r))))", "user": "573ce277e4b05c31a32c080b"}, {"problem": 66, "code": "(fn gcd\n  [x y]\n  (cond (= 0 (rem x y)) y\n        (= 0 (rem y x)) x\n        :else\n  (loop [i (quot (min x y) 2)]\n    (if (= 0 (rem x i) (rem y i)) i\n      (recur (dec i))))))", "user": "56ff45e5e4b08d47c97781bb"}, {"problem": 66, "code": "(fn gcd [a b]\n        (if (zero? b)\n          a\n          (recur b (mod a b))))", "user": "571d9669e4b0145328a7627f"}, {"problem": 66, "code": "#(case %2\n   4 2\n   5 5\n   7 1\n   858 33)", "user": "55c3f19de4b0e31453f64991"}, {"problem": 66, "code": "(fn [num1 num2]\n  (let [num_max (max num1 num2)\n        num_min (min num1 num2)]\n    (loop [n1 num_max\n           n2 num_min]\n      (let [remainder (mod n1 n2)]\n        (if (= remainder 0)\n          n2\n          (recur n2 remainder))))))", "user": "573b8f67e4b0cd1946bd10ae"}, {"problem": 66, "code": "#(let [div-list (fn [n] (into #{} (filter (fn [i] (= (rem n i) 0)) (range 1 (inc n)))))\n       a-list (div-list %1)\n       b-list (div-list %2)\n       comm-list (clojure.set/intersection a-list b-list)]\n   (apply max comm-list))", "user": "5602f5fce4b04bb52996e1ad"}, {"problem": 66, "code": "; using Euclid's algorithm\n(fn GCD [n1 n2]\n  (loop [ x1 n1, x2 n2 ]\n    ( let [r (mod x1 x2)]      \n      (if (= r 0)\n        x2\n        (recur x2 r)\n      )\n    )\n   ) \n)", "user": "571aae1fe4b07c98581c3b5a"}, {"problem": 66, "code": "(fn [x y]\n  (first\n    (filter\n      #(and\n         (zero? (mod x %))\n         (zero? (mod y %)))\n    (range (min x y) 0 -1))))", "user": "57300c19e4b0cd1946bd0fa1"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5724a4dae4b0c5bde472c0fe"}, {"problem": 66, "code": "(fn gcd [& xs]\n           (let [top (apply min xs)]\n             (apply max (filter #(every? zero? (map (fn [x] (rem x %)) xs) ) (range 1 (inc top))))))", "user": "561814bae4b06b1bb2182a1a"}, {"problem": 66, "code": "(fn gcd [x y] \n  (let [[div-x div-y]\n        (map (fn get-divisors [number] \n               (for [i (range 1 (inc number)) \n                     :when (= 0 (rem number i))]\n                 i))\n             [x y])]\n    (reduce max 1 (filter #(contains? (set div-y) %) div-x))))", "user": "573c57ace4b0cd1946bd10c0"}, {"problem": 66, "code": "(fn [val1 val2]\n  (last (filter #(= 0\n                    (+ (mod val1 %)\n                       (mod val2 %)))\n                (range 1 (+ 1 (min val1 val2))))))", "user": "57280b92e4b0c5bde472c14e"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [u (max a b) v (min a b) r (rem u v)]\n    (if (= 0 r)\n      v\n      (gcd v r))))", "user": "57458b82e4b009280f9f2b4e"}, {"problem": 66, "code": "(fn [a b]\n  (first \n    (for [x (range (min a b) 0 -1) \n          :when (and (zero? (mod a x)) (zero? (mod b x)))] x)))", "user": "55d1ec3ee4b0e31453f64a4c"}, {"problem": 66, "code": "(fn [a b]\n  (if (not= b 0)\n    (if (> a b)\n      (recur (- a b) b)\n      (recur a (- b a)))\n    a))", "user": "574660d7e4b009280f9f2b62"}, {"problem": 66, "code": "(fn [a b]\n  (let [mi (min a b)\n        ma (max a b)]\n    (loop [d mi]\n      (if (and (zero? (rem mi d)) (zero? (rem ma d)))\n        d\n        (recur (dec d))))))", "user": "573f3ccfe4b05c31a32c083f"}, {"problem": 66, "code": "(fn[x y] (loop [i (min x y)]\n            (println i x y) \n            (if (and (= 0 (mod x i)) (= 0 (mod y i)) ) \n               i \n               (recur (dec i))\n             )\n            )\n    )", "user": "56e6e1e6e4b02e7e935eb6cf"}, {"problem": 66, "code": ";; Euclid's Algorithm\n(fn [x y]\n (loop [a (max x y)\n        b (min x y)]\n   (let [remain (rem a b)]\n     (if (zero? remain)\n       b\n       (recur b remain)))))", "user": "57407ab3e4b05c31a32c0854"}, {"problem": 66, "code": "(fn gcd [x  y]\n   (if (or (<= x 0) (<= y 0))  \"ERROR positive integers!\"\n     (loop [b (max x y) s (min x y)]\n       (if (>= 0 (mod b s))\n         s\n         (recur s (mod b s))))\n))", "user": "572ac718e4b0f4d77e651242"}, {"problem": 66, "code": "(fn comm-divisor [a b]\n     (cond\n         (= a b) a\n         (= 0 a) b\n         (= 0 b) a\n         (> a b) (comm-divisor b (rem a b))\n         (> b a) (comm-divisor a (rem b a))\n      )\n )", "user": "573940e3e4b0cd1946bd106b"}, {"problem": 66, "code": "(fn [a b]\n\t(loop [x a\n          y b]\n    (if (= 0 y) x\n    (recur y (mod x y))\n       )))", "user": "5744723ae4b009280f9f2b3a"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "573652e1e4b0cd1946bd1030"}, {"problem": 66, "code": "(fn [a b] (apply max (filter (fn [x] (and (= 0 (mod a x)) (= 0 (mod b x)))) (range 1 (+ (min a b) 1)))))", "user": "573c813be4b0cd1946bd10c5"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond (< a b) (gcd b a)\n        (= 0 (rem a b)) b\n        :else (gcd b (rem a b))))", "user": "51647faae4b003cf19fdde3b"}, {"problem": 66, "code": "(fn [x y] (let [b (fn [z] (let [a (Math/sqrt (double z))]\n          \t\t\t(into #{} (mapcat #(list (/ z %) %) (into #{} (filter #(zero? (mod z %)) (range 1 (inc (int a)))))))))]\n            (apply max (clojure.set/intersection (b x) (b y)))))", "user": "567e6d24e4b0feffd0d18eb4"}, {"problem": 66, "code": "#(loop [x %1 y %2]\n   (if (= y 0)\n     x\n     (recur (min x y) (rem (max x y) (min x y))))\n   )", "user": "57440f77e4b0c285004e8ab5"}, {"problem": 66, "code": "(fn [x y] (loop [n x divisor y a x b y] (if (> n divisor) (if (= 0 (rem a divisor) (rem b divisor)) divisor (recur n (dec divisor) a b)) (recur divisor n a b))))", "user": "571172ece4b09c608db70446"}, {"problem": 66, "code": "(fn f [a b]\n  (if (zero? b)\n    a\n    (f b (mod a b)))\n  )", "user": "53da059be4b0e771c302547e"}, {"problem": 66, "code": ";(\n(fn [a b]\n  (reduce max (for [d (range 1 (inc (min a b)))\n        :when (every? #(zero? (rem % d)) (list a b))\n        ]\n    d)))\n; 2 4)", "user": "573632b7e4b0cd1946bd102f"}, {"problem": 66, "code": "(fn gcd* [a b]\n  (cond\n    (< a b) (recur a (- b a))\n    (> a b) (recur (- a b) b)\n    :else a))", "user": "574af03ce4b02ea114799202"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? a)\n      b\n      (recur (mod b a) a)))", "user": "574c3a7ce4b02ea114799219"}, {"problem": 66, "code": "(fn [x y]\n  (loop [a x\n         b y]\n    (if (= b a)\n      a\n      (if (> a b)\n        (recur (- a b) b)\n      \t(recur a (- b a))))))", "user": "56fee4c0e4b08d47c97781b5"}, {"problem": 66, "code": "(fn [n1 n2]\n  (loop [D (max n1 n2)\n         d (min n1 n2)]\n    (let [q (quot D d)\n          r (rem D d)]\n      (cond\n       (= D d) 1\n       (= r 0) d\n       :else (recur d r)))))", "user": "56098ccbe4b0053d1b86c7e4"}, {"problem": 66, "code": "(fn [x y] (if (zero? y) x (recur y (mod x y))))", "user": "574a9132e4b02ea1147991fd"}, {"problem": 66, "code": "#(.gcd (biginteger %1) (biginteger %2))", "user": "56efb3a3e4b04a395b9a0463"}, {"problem": 66, "code": "(fn [x y]\n  (loop [x x y y]\n    (if (= (mod x y) 0)\n      y\n      (recur y (mod x y)))))", "user": "556ff203e4b09a3098a52526"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= a b)\n    a\n  \t(if (> a b)\n      (recur (- a b) b)\n      (recur (- b a) a)\n    )))", "user": "574e7be7e4b02ea114799242"}, {"problem": 66, "code": "(fn [x y]\n  (apply max \n   (filter #(every? zero? [(mod x %) (mod y %)])\n           (range 1 (inc (min x y))))))", "user": "57275898e4b0c5bde472c13e"}, {"problem": 66, "code": "(fn [m n] (if (zero? n) m (recur n (mod m n))))", "user": "54e540c1e4b024c67c0cf7f9"}, {"problem": 66, "code": "(fn [a b]\n  (loop [a a b b]\n    (if (not= b 0)\n      (recur b (mod a b))\n      a)))", "user": "54cbd97ae4b057c6fda3a283"}, {"problem": 66, "code": "(fn\n  [n1 n2]\n  (let [end (inc (/ (max n1 n2) 2))\n        rng (reverse (range 1 end))]\n    (first (filter #(and (= (mod n1 %) 0)\n                         (= (mod n2 %) 0))\n                   rng) ) )\n  )", "user": "535558b9e4b04ce2eb3ed25a"}, {"problem": 66, "code": "(fn GCD [A B]\n  (loop [A A B B]\n    (cond \n      (= 0 A) B\n      (= 0 B) A\n      :else (let [R (rem A B)]\n              (recur B R)))))", "user": "57131dfbe4b07c98581c3a98"}, {"problem": 66, "code": "(fn [x y] \n (let [[h l] (if (> x y) [x y] [y x]) ]\n   (some #(when (and (= 0 (mod h %)) (= 0 (mod l %)))  %) (reverse (range 1 (inc l))))\n  ))", "user": "574986cae4b009280f9f2b9c"}, {"problem": 66, "code": "(fn [x y]\n  (loop [dividend (max x y)\n         divisor (min x y)]\n    (if (= (mod dividend divisor) 0)\n      divisor\n      (recur divisor (mod dividend divisor)))))", "user": "575086e7e4b02ea114799276"}, {"problem": 66, "code": "(fn [a b]\n  (cond \n    (> a b) (recur (- a b) b)\n    (< a b) (recur (- b a) a)\n    :else a))", "user": "574dfcb8e4b02ea11479923a"}, {"problem": 66, "code": "(fn [a b]\n  (last\n   (filter #(and (integer? (/ a %)) (integer? (/ b %)))\n           (range 1 (+ 1 (min a b))))))", "user": "52e1c276e4b09f7907dd142b"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5746cb28e4b009280f9f2b68"}, {"problem": 66, "code": "(fn [x y]\n  ;; this is a naive implementation\n  (letfn [(divisor [m n] \n                   (= (mod m n) 0))]\n    (reduce\n     max\n     (filter #(and (divisor x %) (divisor y %))\n             (range 1 (inc (/ (max x y) 2)))))))", "user": "574ef99ae4b02ea114799250"}, {"problem": 66, "code": "#(if (zero? %1) %2 (recur (mod %2 %1) %1))\n\n;(fn g [a b] (if (= a 0) b (recur (rem b a) a)))\n \n;(fn [x y]\n;   (apply max (filter #(= 0 (mod x %) (mod y %)) (range 1 (+ 1  (min x y))))))", "user": "572830e6e4b0c5bde472c152"}, {"problem": 66, "code": "( fn gcd\n  ( [ x y ]\n    ( gcd x y ( min x y ) )\n  )\n  ( [ x y pos ]\n    ( if ( and ( integer? ( / x pos ) ) ( integer? ( / y pos ) ) )\n      pos\n      ( gcd x y ( dec pos ) )\n     )\n    )\n)", "user": "57561529e4b02ea1147992d3"}, {"problem": 66, "code": "(fn [x1 x2] (let [divis (fn [x] (filter #(= 0 (rem x %)) (range 1 (inc x))))]\n               (apply max (keys (into {} (filter #(-> % val (= 2)) (frequencies (concat (divis x1) (divis x2)))))))))", "user": "5751f2a2e4b02ea114799292"}, {"problem": 66, "code": "(fn gcd [a b]\n  (loop [a a b b]\n    (if (= a 0)\n      b\n      (recur (mod b a) a))))", "user": "574f1c24e4b02ea114799255"}, {"problem": 66, "code": "(fn gcd\n      [a b] \n      (if (= a 0)\n        b\n        (if (= b 0)\n          a\n          (gcd b (mod a b)))))", "user": "570bd29be4b0b0fb43fd06c5"}, {"problem": 66, "code": "(fn g[a b]\n  (if (> b a)\n  \t(g b a)   \n    (if (= 0 b)\n      a\n      (g b (mod a b))\n    )\n  )\n)", "user": "54283a7ae4b01498b1a71b2f"}, {"problem": 66, "code": "(fn [a b]\n  (last (filter #(and (zero? (rem a %)) (zero? (rem b %))) (range 1 (inc (min a b)))))\n  )", "user": "5756f7d7e4b02ea1147992e9"}, {"problem": 66, "code": "(fn gcd [x y]\n  (if (<= y 0)\n    x\n    (gcd y (mod x y))))", "user": "56069006e4b08b23635d3174"}, {"problem": 66, "code": "(fn [n1 n2] (loop [c (min n1 n2)] \n               (if (or (and (= 0 (mod n1 c)) (= 0 (mod n2 c))) (> 2 c))\n                  c\n                  (recur (dec c)))))", "user": "5744d088e4b009280f9f2b41"}, {"problem": 66, "code": "(fn [x y]\n  (#(if (and (= 0 (mod %1 %3)) (= 0 (mod %2 %3)))\n      %3\n      (recur %1 %2 (dec %3))) x y (min x y)))", "user": "5705e404e4b0b0fb43fd0676"}, {"problem": 66, "code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "user": "575cbe44e4b02ea114799374"}, {"problem": 66, "code": "(fn [a b]\n  (let [m (min (min a b) (quot (max a b) 2))]\n    (last (filter #(and (integer? (/ a %)) (integer? (/ b %))) (range 1 (inc m))))))", "user": "57462a4de4b009280f9f2b5d"}, {"problem": 66, "code": "(fn [x y]\n  (loop [a x b y d 0]\n    (if (and (even? a) (even? b))\n      (recur (/ a 2) (/ b 2) (inc d))\n      (loop [a a b b d d]                     \n        (if (not= a b)\n          (recur\n            (cond\n              (even? a)(/ a 2)\n              (and (odd? b)(> a b))(/ (- a b) 2)\n              :else a)\n            (cond\n              (and (odd? a)(even? b))(/ b 2)\n              (and (odd? a)(> b a)(odd? b)) (/ (- b a) 2)\n              :else b)\n            d)\n          (* (reduce * (repeat d 2)) a))))))", "user": "575683aee4b02ea1147992dc"}, {"problem": 66, "code": "(fn [a b]\n  (loop [x (min a b)]\n    (if (and (= 0 (rem a x)) (= 0 (rem b x)))\n      x\n      (recur (dec x)))))", "user": "574abbfbe4b02ea114799200"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "575d16f8e4b02ea114799377"}, {"problem": 66, "code": "(fn [a b] (if (= b 0) a (recur b (mod a b))))", "user": "55096255e4b06e50f9beb116"}, {"problem": 66, "code": "(fn GCD [a b]\n  (if (= 0 b) a\n              (recur b (mod a b))))", "user": "570ab24fe4b0b0fb43fd06b7"}, {"problem": 66, "code": "(fn gcd_2\n  [x y]\n  (loop [z (min x y)]\n    (if (and (= (mod x z) 0) (= (mod y z) 0))\n      z\n      (recur (dec z))\n      )))", "user": "574ed2f7e4b02ea11479924a"}, {"problem": 66, "code": "(fn [a b]\n    (let [mn (min a b)\n          mx (max a b)\n          md (mod mx mn)]\n      \n   (cond\n     (zero? md) mn\n     (= md 1) 1\n     :else (recur mn md))))", "user": "57487084e4b009280f9f2b8c"}, {"problem": 66, "code": "(fn foo [x y]\n  (if (= x 0) y\n    (foo (mod y x) x)))", "user": "5760715de4b08062f99a4e96"}, {"problem": 66, "code": "(fn gcd [a b] \n  (if (zero? b) a (gcd b (mod a b))))", "user": "5372e7d9e4b06d7f452d9e02"}, {"problem": 66, "code": "(fn gcd [x y]\n  (let [a (min x y)\n        b (max x y)]\n        (if (zero? a) b\n          (gcd (- b a) a))))", "user": "56b295f7e4b0982f16b37e08"}, {"problem": 66, "code": "(fn gcd[x y]\n  (cond \n   (zero? y) x\n   :else (gcd y (mod x y))))", "user": "5731e36be4b0cd1946bd0fc9"}, {"problem": 66, "code": "(fn gcd [a b] \n  (if (zero? a) b \n    (recur (mod b a) a)))", "user": "575ef4b6e4b08062f99a4e78"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (> b a)\n    (gcd b a)\n    (if (zero? (rem a b))\n      b\n      (gcd b (rem a b)))))", "user": "57501c83e4b02ea11479926b"}, {"problem": 66, "code": "(fn gcd [a b]\n    (let [a1 (max a b) b1 (min a b)]\n        (if (= (rem a1 b1) 0)\n           b1 \n           (gcd b1 (rem a1 b1))\n        )\n    )\n)", "user": "574a546ee4b02ea1147991f6"}, {"problem": 66, "code": "(fn pgcd [a b] (cond\n                (= a b) a\n                (= a 0) b\n                (= b 0) a\n                (< a b) (pgcd a (- b a))\n                (< b a) (pgcd (- a b) b)))", "user": "57642916e4b0994c1922fbee"}, {"problem": 66, "code": "#(loop [c %1, d %2]\n     (if (zero? d) c\n       (recur d (mod c d))))", "user": "56e02c1ce4b0ca2494a09602"}, {"problem": 66, "code": "(fn [a b]\n  (let [r (mod a b)]\n    (if (= r 0) b (recur b r))))", "user": "52ea025ae4b09f7907dd14b5"}, {"problem": 66, "code": "(fn [a b]\n\t(loop [ai a bi b]\n\t\t(if (zero? bi)\n\t\t\tai\n\t\t\t(recur bi (mod ai bi)))))", "user": "57644395e4b0994c1922fbf2"}, {"problem": 66, "code": "(fn gcd [a b]\n\n  (if (= a b) a\n              (if (> a b)\n                (gcd (- a b) b)\n                (gcd (- b a) a)\n  )\n\n))", "user": "575ebba3e4b08062f99a4e70"}, {"problem": 66, "code": "(fn gcd [a b] \n\t(let [r (rem a b)] \n\t\t(if (= 0 r) \n\t\t\tb\n\t\t\t(recur b r))))", "user": "572ec4dde4b0cd1946bd0f8d"}, {"problem": 66, "code": "(fn [a b]\n  (letfn [(g [a b]\n            (let [r (mod a b)]\n              (if (zero? r)\n                b\n                (recur b r))))]\n    (g (max a b) (min a b)))\n)", "user": "5764457ae4b0994c1922fbf3"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "user": "56d30497e4b0ea9b8538f7a8"}, {"problem": 66, "code": "#(loop [current (min % %2)] \n    (if (and (= 0 (rem % current)) (= 0 (rem %2 current)) ) \n      current \n      (recur (dec current) ) )\n    )", "user": "575bd5f9e4b02ea114799365"}, {"problem": 66, "code": "(fn [a b] (loop [u a\n                       v b]\n                  (cond\n                    (= v u) u\n                    (> v u) (recur v u)\n                    :default (recur (- u v) v))))", "user": "5756f324e4b02ea1147992e8"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5763fa69e4b0994c1922fbe0"}, {"problem": 66, "code": "(fn gcd [x y]\n  (let [[a b] (map (fn [n] (filter #(zero? (mod n %)) (range 1 (+ 1 n)))) [x y])]\n    (first (last (filter #(apply = %)\n                         (for [m a n b] [m n]))))))", "user": "57533bc1e4b02ea1147992a6"}, {"problem": 66, "code": "(fn f [x y]\n  (if (= x y)\n    x\n    (f (Math/abs (- x y)) (min x y))))", "user": "5742ec91e4b05c31a32c0883"}, {"problem": 66, "code": "(fn gcd\n  [n k]\n  (loop [a n b k]\n    (if (= 0 b)\n      a\n      (recur \n       b    ;b is the new a\n       (mod a b))))) ;rest of dividing a through b is new b", "user": "57607706e4b08062f99a4e97"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))\n    )\n  )", "user": "56d91a53e4b0ea9b8538f7ee"}, {"problem": 66, "code": "(fn [x y]\n  (loop [x x y y]\n    (cond (> x y) (recur y (- x y))\n          (== x y) x\n          (< x y) (recur x (- y x)))))", "user": "51e89428e4b006d205356a51"}, {"problem": 66, "code": "(fn gcd [x y]\n    (cond\n      (= x 0) y\n      (= y 0) x\n      :else (recur y (mod x y))))", "user": "56fa2905e4b07572ad1a88be"}, {"problem": 66, "code": "#(loop [n (min %1 %2)] (if (and (zero? (mod %1 n)) (zero? (mod %2 n))) n (recur (dec n))))", "user": "56f974c0e4b07572ad1a88b1"}, {"problem": 66, "code": "#(loop [n % m %2] (if (= m 0) n (recur m (rem n m))))", "user": "5720ba36e4b0c5bde472c09c"}, {"problem": 66, "code": "#(if (= %2 0) %1 (recur %2 (mod %1 %2)))", "user": "57650419e4b0994c1922fc09"}, {"problem": 66, "code": "#(let [v1 (min %1 %2) v2 (max %1 %2)]\n    (loop [gcd v1]\n      (if (> gcd 0)\n        (if (= 0 (+ (rem v1 gcd) (rem v2 gcd)))\n          gcd\n          (recur (dec gcd))\n        )\n      )\n    )\n  )", "user": "5763818ae4b0994c1922fbc7"}, {"problem": 66, "code": "(fn [a b]\n  (loop [n (max a b) d (min a b)]\n    (let [r (rem n d)]\n      (if (zero? r)\n        d\n        (recur n r)))))", "user": "57202eb7e4b0c5bde472c090"}, {"problem": 66, "code": "(fn [a b]\n  (let [m (min a b)]\n    (loop [i m]\n      (if (= 0 (rem a i) (rem b i))\n        i\n        (recur (dec i))))))", "user": "57609d91e4b08062f99a4e9b"}, {"problem": 66, "code": "#(case (mod %1 %2) 0 %2 (recur %2 (rem %1 %2)))", "user": "577202d2e4b0979f896515c0"}, {"problem": 66, "code": "(fn find-GCM [x y]\n  (cond\n  \t(zero? x) y\n  \t(zero? y) x\n   \t:else (recur y (mod x y))))", "user": "5764cc01e4b0994c1922fc05"}, {"problem": 66, "code": "(fn gcd [x y]\n  (if (= x y)\n    x\n    (let [lo (min x y)\n          hi (max x y)]\n      (gcd lo (- hi lo)))))", "user": "576844cde4b0a07e8fc180ce"}, {"problem": 66, "code": "#(if (= 0 %) %2 (recur (rem %2 %) %))", "user": "57169f93e4b07c98581c3b00"}, {"problem": 66, "code": "(fn [x y] (let [m (mod x y)] (if (zero? m) y (recur y m))))", "user": "576e3258e4b0979f89651574"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "50c95c4fe4b0bed41a12298f"}, {"problem": 66, "code": "(fn [a b]\n  (cond\n    (= a 0) b\n    (= b 0) a\n    :else (recur b (rem a b))))", "user": "55fbc657e4b0f488688e0666"}, {"problem": 66, "code": "(fn [x y] \n (loop [iter (cond (< x y ) y :else x) acc 0]\n  (if (not= 0 acc)\n   acc\n   (recur \n    (dec iter)\n    (cond (and (= (mod x iter) 0)(= (mod y iter) 0)) iter :else 0)\n   )\n  )\n )\n)", "user": "57750460e4b0979f8965160c"}, {"problem": 66, "code": "(fn [x y] (if-let [c (if (> x y) y x)] (apply max (filterv #(and (= (mod x %) 0) (= (mod y %) 0)) (range 1 (inc c))))))", "user": "56cad309e4b0ea9b8538f720"}, {"problem": 66, "code": "(fn [a b] (apply max (filter #(zero? (+ (mod a %) (mod b %))) (range 1 (inc (min a b))))))", "user": "575b3e9be4b02ea11479935b"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "576a8d02e4b0a07e8fc18117"}, {"problem": 66, "code": "(fn [a b]\n  (let [big (max a b) small (min a b)]\n    (if (= small 0)\n      big\n      (recur (mod big small) small))))", "user": "577629abe4b0979f8965162e"}, {"problem": 66, "code": "(fn gcd \n  [var1 var2]\n  (let [gr (max var2 var1) lt (min var2 var1)]\n    (if (not= 0 (rem gr lt))\n      (gcd lt (rem gr lt))\n      lt)\n    ))", "user": "5772ddb0e4b0979f896515d4"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n    (= a 0) b\n    (= b 0) a\n    :else (let [small (min a b)\n                big (max a b)] \n            (gcd small (- big (* small (quot big small)))))))", "user": "55dbed2fe4b050e68259b3a6"}, {"problem": 66, "code": "(fn [ a b ]\n  (loop [x a,  y b]\n    (if (= y 0) x (recur y (mod x y))) \n    )\n  )", "user": "575fec91e4b08062f99a4e89"}, {"problem": 66, "code": "(fn [x y] \n  (cond \n   (< x y) (recur y x)\n   (= y 0) x\n   :else (recur y (mod x y))))", "user": "5745bb9fe4b009280f9f2b54"}, {"problem": 66, "code": "(fn gcd [a b]\n  (case (compare a b)\n    0 a\n    -1 (recur a (- b a))\n    1 (recur (- a b) b)))", "user": "57763002e4b0979f89651631"}, {"problem": 66, "code": "(fn go [a,b]\n  (if (< a b)\n    (go b a)\n    (if (= 0 (rem b a))\n      a\n      (go b (- a (* b (quot a b))))\n      )\n    )\n  )", "user": "5776558ee4b0979f89651633"}, {"problem": 66, "code": "(fn f\n  [dividend divisor]\n  (let [remainder (mod dividend divisor)]\n    (if (zero? remainder)\n      divisor\n      (f divisor remainder))))", "user": "51319a53e4b06942423563c8"}, {"problem": 66, "code": "(fn [a b]\n  (first \n   (filter \n    #(= 0 (rem a %) (rem b %)) \n    (range (min a b) 0 -1))))", "user": "5776f39de4b0979f89651643"}, {"problem": 66, "code": "(fn [a b]\n      (if (zero? b)\n        a\n        (recur b (mod a b))))", "user": "560c37b5e4b05f002753df2e"}, {"problem": 66, "code": "(fn [a b] (apply max (filter #(= (mod a %) (mod b %) 0) (range 1 (inc (max a b))))))", "user": "5761513fe4b0994c1922fb87"}, {"problem": 66, "code": "(fn [x y]\n  (if (= y 0)\n    x\n    (recur y (rem x y))))", "user": "577f635be4b0d36ec5835e64"}, {"problem": 66, "code": "(fn [a b] \n   (let [a1 (max a b) b1 (min a b) r (rem a1 b1)]\n     (if (= 0 r) b1 (recur b1 r)))\n   )", "user": "577829f9e4b0979f8965165a"}, {"problem": 66, "code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "user": "56c560ede4b05cc29241eea6"}, {"problem": 66, "code": "(fn [x y] (last (filter #(and (= 0 (mod x %)) (= 0 (mod y %))) (range 1 (inc (min x y)))) ))", "user": "53e92f82e4b036ad0777e49d"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [go (fn [h l] (if (= (rem h l) 0)\n                       l\n                       (recur l (rem h l))))]\n    (if (> a b)\n      (go a b)\n      (go b a))))", "user": "5674607ae4b05957ce8c6137"}, {"problem": 66, "code": "(fn gcd [a b] (if (= b 0) a (gcd b (mod a b))))", "user": "5776385fe4b0979f89651632"}, {"problem": 66, "code": "(fn f [x y] (if (= x y) x (f (min x y) (Math/abs (- x y)))))", "user": "576df252e4b0979f8965156f"}, {"problem": 66, "code": "(fn [a b] (first (for [x (range (min a b) 0 -1) :when (= 0 (mod a x) (mod b x))] x)))", "user": "576b4e6be4b0a07e8fc1812b"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0) a\n    (recur (min a b) (mod (max a b) (min a b)))))", "user": "57780e4fe4b0979f89651657"}, {"problem": 66, "code": "#(cond (< %1 %2) (recur %2 %1)\n       (= 0 %2) %1\n       :else (recur %2 (mod %1 %2)))", "user": "4f037faf535dcb61093f6af8"}, {"problem": 66, "code": "(fn gcd [x y] (if (= (rem x y) 0) y (gcd y (rem x y))))", "user": "5756e218e4b02ea1147992e5"}, {"problem": 66, "code": "(fn __ [a b]\n\t(if (= 0 b)\n\t\ta\n\t\t(__ b (mod a b))\n\t\t)\n\t)", "user": "575dda55e4b02ea11479938c"}, {"problem": 66, "code": "(fn gcd[a b] \n  (loop [a1 a \n         b1 b]\n    (if (= b1 0) \n      a1 \n      (recur b1 (mod a1 b1)))))", "user": "577e54bbe4b0c8d87281f6e5"}, {"problem": 66, "code": "(fn gcd [a b]\n    (if (= b 0)\n      a\n      (recur b (mod a b))))", "user": "4dfe5a93535d04ed9115e786"}, {"problem": 66, "code": "(fn [x y] \n  (loop [a x\n         b y]\n    (if (= b 0) \n      a\n      (recur b (mod a b)))))", "user": "5756efc3e4b02ea1147992e6"}, {"problem": 66, "code": "#(if (zero? %2) %1 (recur %2 (rem % %2)))", "user": "55c4cda5e4b0e31453f649a5"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n   (= a b) a\n   (> a b) (gcd (- a b) b)\n   (< a b) (gcd a (- b a))))", "user": "578606d2e4b0ebec4cfb74ec"}, {"problem": 66, "code": "(fn [l h]\n          (if (= 0 l)\n            h\n            (recur (mod h l) l)))", "user": "577832f4e4b0979f8965165b"}, {"problem": 66, "code": ";; brute force\n;(fn [a b] (last \n;  (filter #(= 0 (rem a %) (rem b %)) \n;          (map inc (range (min a b))))))\n\n;;Euclid\n(fn [a b] (if (zero? b) a (recur b (rem a b))))", "user": "578f9a18e4b0ebec4cfb7598"}, {"problem": 66, "code": "#(if (zero? %2) % (recur %2 (mod % %2)))", "user": "577fa91ee4b0d36ec5835e6a"}, {"problem": 66, "code": "#(loop [a %1\n        b %2]\n   (if (= b 0)\n     a\n     (recur b (mod a b))))", "user": "577f0b0ee4b0c8d87281f6f3"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? (mod a b))\n             b\n             (recur b (mod a b))))", "user": "56f53962e4b046a417f9206c"}, {"problem": 66, "code": "(fn gcd[a b]\n\n  (if (= b 0) a\n\n      (gcd b (mod a b))))", "user": "548f3ed8e4b0e286459a1236"}, {"problem": 66, "code": "(fn [n1 n2]\n  (last (for [n (range 1 (inc (min n1 n2)))\n              :when (= 0 (rem n1 n) (rem n2 n))]\n          n)))", "user": "57934c67e4b0e215f87e8456"}, {"problem": 66, "code": "(fn [a b]\n      (let [[g s]\n            (if (> a b)\n                [a b]\n                [b a])]\n        (loop [g g s s]\n              (let [r (rem g s)]\n                (if (zero? r)\n                  s\n                  (recur s r))))))", "user": "55b6a63ae4b01b9910ae299b"}, {"problem": 66, "code": "(fn ggt [a b]\n  (loop [n (min a b)]\n    (if (and (zero? (mod a n))\n             (zero? (mod b n)))\n      n\n      (recur (dec n)))))", "user": "578cf84ce4b0ebec4cfb7562"}, {"problem": 66, "code": "(fn gcd [& nums]\n  (let [[y x] (sort nums)\n        r (rem x y)]\n    (if (zero? r) y (recur [y r]))))", "user": "55ede35ce4b0121d4835fde1"}, {"problem": 66, "code": "(fn [x y]\n  (if (= (mod x y) 0) y\n    (recur y (mod x y))))", "user": "5785de4ce4b0ebec4cfb74e6"}, {"problem": 66, "code": "#(let [r (mod % %2)] \n   (if (= r 0)\n     %2\n     (recur %2 r)))", "user": "577ab41fe4b0d3393e5deb05"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b) \n      a\n      (gcd b (mod a b))))", "user": "5786c182e4b0ebec4cfb74fd"}, {"problem": 66, "code": "; function gcd(a, b)\n;     while b \u2260 0\n;        t := b; \n;        b := a mod b; \n;        a := t; \n;     return a;\n\n(fn gcd [a b]\n  (if (= b 0) a\n    (gcd b (rem a b))))", "user": "57915ba4e4b0ebec4cfb75ba"}, {"problem": 66, "code": "(fn gcd [x y]\n  (let [[a b] (map (fn [n] (filter #(zero? (mod n %)) (range 1 (+ 1 n)))) [x y])]\n    (first (last (filter #(apply = %)\n                         (for [m a n b] [m n]))))))", "user": "5798205ce4b039eba2ecb10e"}, {"problem": 66, "code": "#(if (zero? %2) %1 (recur %2 (rem %1 %2)))", "user": "57615a22e4b0994c1922fb88"}, {"problem": 66, "code": "(fn [n1 n2] \n  (let [div1 (filter #(zero? (rem n1 %)) (range 1 (inc n1)))\n        div2 (filter #(zero? (rem n2 %)) (range 1 (inc n2)))]\n    (->> (concat div1 div2)\n         sort\n         (partition-by identity)\n         (filter #(= 2 (count %)))\n         last\n         first)\n    \n    ))", "user": "577c3da9e4b0c8d87281f6b9"}, {"problem": 66, "code": "(fn sol [a b]\n  (first\n    (filter\n      (fn [i]\n        (and (zero? (mod a i)) (zero? (mod b i))))\n      (range b 0 -1))))", "user": "578b140be4b0ebec4cfb7545"}, {"problem": 66, "code": "(fn [x y]\n\t(apply max\n\t\t(filter\n\t\t\t#(and (= (rem x %) 0) (= (rem y %) 0))\n\t\t\t(range 1 (inc (min x y))))))", "user": "57839ae9e4b0ebec4cfb74b8"}, {"problem": 66, "code": "(fn gcd [x y]\n  (let [[a b] (map (fn [n] (filter #(zero? (mod n %)) (range 1 (+ 1 n)))) [x y])]\n    (first (last (filter #(apply = %)\n                         (for [m a n b] [m n]))))))", "user": "57982bace4b039eba2ecb10f"}, {"problem": 66, "code": "(fn [& args]\n    (let [minv (apply min args)]\n      (apply max\n       (filter\n        (fn [i] (= 0 (apply + (map #(rem % i) args))))\n        (range 1 (inc minv))))))", "user": "54eff2bee4b024c67c0cf88d"}, {"problem": 66, "code": "(fn gcd[x y](if (= y 0) x \n            (gcd y (mod x y))))", "user": "5799fc93e4b05b1deef9add0"}, {"problem": 66, "code": "(fn [a b] \n  (let [limit (min a b)]\n    (loop [test-this-value 1 counter 1]\n      (if (> counter limit)\n        test-this-value\n       \t(recur (if (and (= (rem a counter) 0) (= (rem b counter) 0)) counter test-this-value) (inc counter))))))", "user": "5691ef12e4b0dcc4269f40f8"}, {"problem": 66, "code": "(fn [a b]\n   (let [bg (max a b)\n         s  (min a b)]\n    (if (= 0 (rem bg a) (rem bg b))\n     s\n     (recur (mod bg s) bg))))", "user": "578e01e9e4b0ebec4cfb7575"}, {"problem": 66, "code": "(fn [v1 v2]\n  (let [divable (fn [d] #(= (mod d %) 0))\n        dividables (fn [v] (into #{} (filter (divable v) (range v 0 -1))))]\n    (apply max (clojure.set/intersection (dividables v1) (dividables v2)))))", "user": "578fc072e4b0ebec4cfb759a"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "579e15a6e4b05b1deef9ae20"}, {"problem": 66, "code": "(fn gcd [x y] (let [a (min x y) b (max x y) m (mod b a)] (if (= 0 m) a (gcd a m))))", "user": "57717915e4b0979f896515b3"}, {"problem": 66, "code": "(fn\n    [v w]\n\n    (loop [a v b w]\n      (if\n        (= b 0)\n        a\n        (recur b (mod a b))\n      )\n    )\n  )", "user": "5784e177e4b0ebec4cfb74cf"}, {"problem": 66, "code": "(fn [a b]\n  (reduce #(if\n               (and (= 0 (rem a %2)) (= 0 (rem b %2)))\n             %2 %1)\n          (range 1 (inc (min a b)))))", "user": "57147cd9e4b07c98581c3abf"}, {"problem": 66, "code": "#(loop [m %1 n %2]\n  (if (= 0 n)\n    m\n    (recur n (mod m n))\n  )\n)", "user": "57873017e4b0ebec4cfb7503"}, {"problem": 66, "code": "(fn [a b] (letfn [(gcd [a b] (if (= b 0) \n                          a \n                          (gcd b (mod a b))\n                          ))]\n                  (gcd (max a b) (min a b))))", "user": "571346c0e4b07c98581c3a9b"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= 0 b)\n       a\n       (gcd b (mod a b))\n       )\n  )", "user": "57a13745e4b0c3d858beb8e3"}, {"problem": 66, "code": "#(last (for [x (range 1 (+ 1 (min %1 %2)))\n             :when (= 0 (+ (mod %1 x)\n                           (mod %2 x)))]\n         x))", "user": "57a310b4e4b0c3d858beb90c"}, {"problem": 66, "code": "#(loop [gcd (min %1 %2)]\n   (if (and (zero? (rem %1 gcd))\n            (zero? (rem %2 gcd)))\n     gcd\n     (recur (dec gcd))))", "user": "57a4f5cae4b0a966079561f0"}, {"problem": 66, "code": "(fn gcd [a b] (if (= a b) a (if (> a b) (gcd (- a b) b) (gcd a (- b a)))))", "user": "5227eacee4b0186687e23a5e"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0) a\n    (gcd b (mod a b))))", "user": "5799b260e4b05b1deef9adc8"}, {"problem": 66, "code": "(fn gcd [a b] (if (= b 1) b (if (= b 0) a (gcd b (rem a b))) ))", "user": "579c35fee4b05b1deef9ae04"}, {"problem": 66, "code": "(fn [x y]\n    (let [gcd (fn gcd [a b]\n                (if (< a b)\n                 (gcd b a)\n                 (if (= 0 b)\n                   a\n                   (gcd b (mod a b)))))]\n      (gcd x y)\n      )\n    )", "user": "529e8ba9e4b04e0c58e87b99"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "user": "54c611d1e4b045293a27f627"}, {"problem": 66, "code": "(fn\n  [a b]\n  (cond\n    (= a b) a\n    (> a b) (recur (- a b) b)\n    (> b a) (recur a (- b a))))", "user": "56bb652ae4b0f26550335953"}, {"problem": 66, "code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "user": "579d9601e4b05b1deef9ae18"}, {"problem": 66, "code": "#(let [[lil big] (sort [%1 %2])\n       [q r] ((juxt quot rem) big lil)]\n    (if (zero? r) lil (recur lil r)))", "user": "4f5599dfe4b0a7574ea71806"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= 0 b)\n    a\n    (gcd b (mod a b))))", "user": "57a49951e4b0a966079561e5"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (< a b)\n       (gcd b a)\n  (if (zero? (mod a b))\n       b\n       (gcd b (mod a b)))))", "user": "56903cb9e4b0dcc4269f40eb"}, {"problem": 66, "code": "(fn [a b]\n  (let [m (min a b)]\n    (->> (range m 0 -1)\n         (filter (fn [e]\n                   (every? #(= 0 (rem % e))\n                           [a b])))\n         first)))", "user": "57aa4775e4b0b8559636fc6b"}, {"problem": 66, "code": "#(loop [a % b %2] (if (<= b 0) a (recur b (mod a b))))", "user": "555e9dbfe4b0a2eb076a39bc"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "56349008e4b0bfe05bf117bd"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0) a\n    (recur b (mod a b))))", "user": "57aa290de4b0b8559636fc65"}, {"problem": 66, "code": "(fn f [a b]\n  (if (< a b) (f b a)\n    (if (= b 0) a (f b (mod a b)))))", "user": "5799ff45e4b05b1deef9add1"}, {"problem": 66, "code": "(fn pgcd [x y]\n(let [mi (min x y)\n      ma (max x y)\n\t]\t\n      \n    (cond\n      (= 0 x) y\n      (= 0 y) x\n      :else (pgcd (- ma mi) mi) )\n\n     )     \n       \n\n    )", "user": "55a65872e4b09e57187da299"}, {"problem": 66, "code": "(fn [a b]\n  (->> (range 1 (inc (min a b)))\n       (filter #(and (zero? (mod a %)) (zero? (mod b %))))\n       (last)))", "user": "56b965d9e4b0f26550335931"}, {"problem": 66, "code": "(fn f [n m]\n  (->> (reverse (range 1 (inc n)))\n       (filter #(and (= (rem n %) 0) (= (rem m %) 0)))\n       (first)))", "user": "57adbe7ee4b0b8559636fca0"}, {"problem": 66, "code": "(fn [a b](loop\n           [divisor (max a b) d (min a b)]\n           (if(=(mod divisor d)0) d\n             (recur d (mod divisor d))\n             )))", "user": "57752a2de4b0979f89651613"}, {"problem": 66, "code": "(fn [a b]\n  (let [low (min a b)]\n    (loop [x low]\n      (if (and (= 0 (mod a x)) (= 0 (mod b x)) )\n      \tx\n        (recur (dec x))\n      )\n    )\n  )\n)", "user": "566e6850e4b0a866af6896da"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [sorted (sort (list a b))]\n    (let [a (first sorted)\n          b (second sorted)]\n      (if (= a b)\n        b\n        (gcd (- b a) a)))))", "user": "5075e374e4b09049dea827a5"}, {"problem": 66, "code": "(fn\n  [x y]\n  (case (rem x y)\n    0 y\n    1 1\n    (recur y (mod x y))))", "user": "5452a300e4b0e397800069c7"}, {"problem": 66, "code": "#(first (for\n  [i (range (if (> %1 %2) %1 %2) 0 -1)\n   :when (and (= (rem %1 i) 0) (= (rem %2 i) 0))]\n   i))", "user": "548b7db8e4b0e286459a11fd"}, {"problem": 66, "code": "(fn [x y]\n   (let [[small big] (sort [x y])]\n   (loop [low small high big]\n    (if (= 0 (mod high low))\n     low\n    (recur (mod high low) low)))))", "user": "57af6cf4e4b0fbc9809a2735"}, {"problem": 66, "code": "(fn [num1 num2]\n   (let [big (if (> num1 num2) num1 num2) little (if (> num1 num2) num2 num1)]\n     (if (= 0 (rem big little))\n       little\n       (rem little (rem big little))\n       )\n     )\n   )", "user": "57aa103be4b0b8559636fc64"}, {"problem": 66, "code": "(fn ggt [i1 i2]\n  (if (zero? i2)\n    i1\n    (recur i2 (mod i1 i2))))", "user": "57a9e274e4b0b8559636fc5d"}, {"problem": 66, "code": "(fn [f s] (some #(when (and (= 0 (rem f %)) (= 0 (rem s %))) %) (range (min f s) 0 -1)))", "user": "57a5f1e3e4b0a96607956200"}, {"problem": 66, "code": "(fn g [x y]\n    (if (zero? y)\n      x\n      (g y (rem x y))))", "user": "4e837808535db62dc21a62d9"}, {"problem": 66, "code": "(fn\n  [a b]\n  (loop [x (max a b) y (min a b) n (min a b)]\n    (cond (and (= (mod x n) 0) (= (mod y n) 0)) n\n          :else (recur x y (dec n)))))", "user": "57acee37e4b0b8559636fc94"}, {"problem": 66, "code": "(fn gcd [a b]\n    (apply max (filter #(and\n                             (= (rem a %) 0)\n                             (= (rem b %) 0))\n                        (range 1 (inc (min a b))))))", "user": "57b4779de4b0fbc9809a279a"}, {"problem": 66, "code": "(fn gcd[a b] (if (= b 0) a (gcd b (mod a b) )) )", "user": "57af249fe4b0fbc9809a272b"}, {"problem": 66, "code": "(fn[a b] (let[lo (min a b)]\n   (some #(when (= 0 (mod a %) (mod b %)) %) (range lo 0 -1))))", "user": "57b3efb1e4b0fbc9809a278a"}, {"problem": 66, "code": "(fn gcd [a b] (if (> a b) \n                (let [r (mod a b)] (if (= r 0) b (gcd b r)))\n                (if (= a b) a \n                  (let [r (mod  b a)] (if (= r 0) a (gcd a r)))\n                  )\n                ))", "user": "57b8b008e4b0fbc9809a27e6"}, {"problem": 66, "code": "(fn gcd [& nums]\n  ((fn [number divisor]\n     (if (= (mod number divisor) 0) \n       divisor \n       (recur divisor (mod number divisor))\n       )) (apply max nums) (apply min nums)) )", "user": "57b55290e4b0fbc9809a27a9"}, {"problem": 66, "code": "(fn gcd [m n]\n  (cond (= 0 m) n\n        (= 0 n) m\n        (> m n) (gcd (mod m n) n)\n        :else (gcd m (mod n m))))", "user": "57af41bce4b0fbc9809a2731"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0)\n      a\n      (recur b (mod a b))))", "user": "4f4aa932e4b0d56e7bb92c14"}, {"problem": 66, "code": "(fn [a b] (first (first (filter #(= 0 (last %)) (map #(list % (+ (rem a %) (rem b %))) (range (min a b) 0 -1))))))", "user": "5797d4bae4b039eba2ecb107"}, {"problem": 66, "code": "(fn[a b] (if (zero? b) a (recur b (rem a b))))", "user": "57b9fc74e4b0fbc9809a27fb"}, {"problem": 66, "code": "(fn cd [a b] (apply max (filter #( = (mod a %) (mod b %) 0 ) (range 1 (+ 1 (min a b))))))", "user": "57b99d48e4b0fbc9809a27f2"}, {"problem": 66, "code": "(fn [x y]\n  (loop [i (min x y) j (max x y) d 1]\n    (if (= (mod j (quot i d)) 0)\n      (quot i d)\n      (recur i j (inc d))\n      )\n    )\n  )", "user": "57b9d21fe4b0fbc9809a27f7"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= a 0)\n    b\n    (gcd (mod b a) a)))", "user": "579332c2e4b0e215f87e8452"}, {"problem": 66, "code": "(fn gcd\n  [x y]\n  (let [q (/ x y) \n        r (mod x y)]\n    (if (= 0 r)\n      y\n      (gcd y r))))", "user": "568bd448e4b0dcc4269f40a9"}, {"problem": 66, "code": "(fn [e1 e2]\n       (let [big (if (< e1 e2) e2 e1)\n        small (if (< e1 e2) e1 e2)\n        e1 e1\n        e2 e2]\n    (loop [r []\n           d 1]\n      (if (> d small)\n        (last r)\n        (recur (if (and (= (mod big d) 0)\n                        (= (mod small d) 0))\n                 (conj r d)\n                 r)\n               (inc d))))))", "user": "55ff562fe4b00f4cabc57660"}, {"problem": 66, "code": "(fn [a b] (first (filter #(and (= 0 (mod a %)) (= 0 (mod b %))) (reverse (range 1 (inc(min a b)))))))", "user": "55da18d5e4b0e31453f64ad1"}, {"problem": 66, "code": "(fn [i1, i2] (reduce #(if (and (zero? (mod i2 %2)) (zero? (mod i1 %2))) %2 %1) 1 (range 1 (inc (min i1 i2)))))", "user": "57ac7710e4b0b8559636fc88"}, {"problem": 66, "code": "(fn gcd[a b]\n  (if (zero? a)\n    b\n    (gcd (mod b a) a)))", "user": "57bd960fe4b05aa3c4741c52"}, {"problem": 66, "code": "(fn [n m]\n  (loop [a n\n         b m]\n    (if (= 0 b)\n      a\n      (recur b (mod a b)))))", "user": "576a972ce4b0a07e8fc1811a"}, {"problem": 66, "code": "#(first\n  (drop-while (fn [x] \n    (not (and \n      (zero? (mod %1 x))\n      (zero? (mod %2 x)))))\n  (range (inc (min %1 %2)) 0 -1)))", "user": "566ff0a1e4b0a866af6896ec"}, {"problem": 66, "code": "#(loop\n  [x %1 y %2]\n  (if (zero? y)\n      x\n      (recur y (mod x y))))", "user": "574eb3b1e4b02ea114799247"}, {"problem": 66, "code": ";gcd\n#(if (zero? %) %2 (recur (mod %2 %) %))\n;(fn [x y] (if (zero? y) x (recur y (rem x y))))\n\n#_(fn [a b ]\n  (loop [n (min a b)]\n    (if (and (= 0 (rem a n)) (= 0 (rem b n)))\n    n\n    (recur (dec n)))\n    )\n  )", "user": "57ba55c1e4b0fbc9809a2801"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n\t(= a b) a\n\t(> a b) (gcd (- a b) b)\n\t:else (gcd a (- b a))))", "user": "57c0917be4b05aa3c4741c95"}, {"problem": 66, "code": "(fn [a b] \n    (first (filter #(= 0 (rem a %) (rem b %)) \n                   (range (min a b) 0 -1))))", "user": "55568a7de4b0deb715856e1c"}, {"problem": 66, "code": "(fn [a b]\n(last (filter #(and (= (rem a %) 0) (= (rem b %) 0) ) (range 1 (inc (min a b)) ))))", "user": "57c7cef5e4b05aa3c4741d0d"}, {"problem": 66, "code": "(fn f [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "57c796b4e4b05aa3c4741d08"}, {"problem": 66, "code": "(fn [a b] (let [d (fn [x] (set (filter #(= 0 (mod x %)) (range 1 (inc x)))))] (apply max (clojure.set/intersection (d a) (d b)))))", "user": "57b45257e4b0fbc9809a2796"}, {"problem": 66, "code": "(fn [& s]\n  (->> s\n       (map (fn [n] (set (filter #(zero? (mod n %)) (range 1 (inc n))))))\n       (apply clojure.set/intersection)\n       (apply max)))", "user": "54722c55e4b094393f72dd74"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "57c2d66ae4b05aa3c4741cb9"}, {"problem": 66, "code": "(fn gcd [x y]\n\t(if (= y 0)\n      x (gcd y (mod x y))))", "user": "57a88e24e4b0a9660795621f"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (gcd b (mod a b))))", "user": "5505d137e4b086ebe8a79c8c"}, {"problem": 66, "code": "(fn gcd[a b] (let [c (mod a b)] (if (= c 0) b (recur b c))))", "user": "57c7e7d9e4b05aa3c4741d0f"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (cond (or(= 0 a)(= 0 b)) 0\n        (= a b) a\n        (> a b)(recur (- a b) b)\n        :else (recur a (- b a))))", "user": "57c500f9e4b05aa3c4741cda"}, {"problem": 66, "code": "(fn gcd [a b] (if (not= b 0) (gcd b (rem a b)) a))", "user": "57c3451fe4b05aa3c4741cbd"}, {"problem": 66, "code": "; Euclid's algorithm is in geometric form\n; very slick but very hard to figure out\n; set a to the mod of a,b\n; run the mod on the current a,b\n(fn [a b] (if (zero? b) \n            a \n            (recur b (mod a b))))\n\n; write a loop? that works through?", "user": "57c44053e4b05aa3c4741ccb"}, {"problem": 66, "code": "#(if (zero? %2) % (recur %2 (mod % %2)))", "user": "57c7a8b5e4b05aa3c4741d09"}, {"problem": 66, "code": "(fn [& integers]\n  (let [divisor-set (fn [n] (set (filter #(zero? (mod n %)) (range 1 (inc n)))))]\n    (->> integers\n         (map divisor-set)\n         (apply clojure.set/intersection)\n         (apply max)\n         )\n    )\n  )", "user": "57cd7498e4b0c746388ab897"}, {"problem": 66, "code": "(fn gcd[x y]\n  (loop [a x\n         b y]\n  (if (= a b)\n    a\n    (recur (- (max a b) (min a b)) (min a b))\n  )\n    ))", "user": "57cc14aae4b05aa3c4741d4a"}, {"problem": 66, "code": "(fn gcd [x y]\n  (if (< x y) (gcd y x)\n    (let [r (mod x y)]\n      (if (zero? r) y\n        (gcd y r)))))", "user": "57a0b341e4b0c3d858beb8d4"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "user": "56327168e4b0bfe05bf117a5"}, {"problem": 66, "code": "(fn [x y]\n  (loop [x x y y r (rem x y)]\n    (if (= 0 r) \n      y \n      (recur y r (rem y r)))))", "user": "56cf115de4b0ea9b8538f765"}, {"problem": 66, "code": "(fn [x y]\n  (let [[lesser greater] (sort [x y])\n        step (if (> lesser 0) -1 1)]\n    (first (filter #(= (+ (mod greater %) (mod lesser %)) 0) (range lesser 0 step)))))", "user": "57155980e4b07c98581c3ad7"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (if (= a 0)\n    b\n    (if (= b 0)\n      a\n      (if (> a b)\n        (recur (mod a b) b       )\n        (recur a         (mod b a)) ))))", "user": "57bc9375e4b05aa3c4741c43"}, {"problem": 66, "code": "(fn [a b]\n  (reduce\n    #(if (and (= 0 (mod a %2)) (= 0 (mod b %2))) %2 %1)\n    1\n    (range 2 (inc a))))", "user": "57b35a19e4b0fbc9809a277d"}, {"problem": 66, "code": "(fn [m n] (apply max (filter #(and (= (mod m %) 0) (= (mod n %) 0)) (range 1 (+ (min m n) 1)))))", "user": "57d0fce5e4b0bd073c202364"}, {"problem": 66, "code": "(fn [x y]\n  (let [primes [2 3 5 7 11 13 17 19 23]\n        x-primes (flatten \n                  (for [a primes\n                    :when (= (mod x a) 0)]\n                    (conj '() a)))\n        y-primes (flatten \n                  (for [b primes\n                    :when (= (mod y b) 0)]\n                    (conj '() b)))]\n    (reduce *(clojure.set/intersection (set x-primes) (set y-primes)))))", "user": "57b19fa1e4b0fbc9809a2754"}, {"problem": 66, "code": "(fn [& lst]\n   (loop [i (apply min lst)]\n     (if (every? #(= (mod % i) 0) lst)\n       i\n       (recur (dec i)))))", "user": "57d9f603e4b0bd073c20240a"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (if (= (mod a b) 0)\n    b\n    (gcd b (mod a b))))", "user": "57d0cd58e4b0bd073c20235e"}, {"problem": 66, "code": "(fn \n [n1 n2] \n (apply max (apply clojure.set/intersection (map (fn [n] (into #{} (map #(if (= 0 (rem n %)) % 1) (range 1 (inc n))))) [n1 n2]))))", "user": "57c6aa0be4b05aa3c4741cf7"}, {"problem": 66, "code": "(fn mdc [x y]\n  (let [a (max x y)\n        i (min x y)\n        f (fn [c x y]\n            (if (= c 1) 1\n              (if (and (zero? (rem x c)) (zero? (rem y c))) c \n                (recur (dec c) x y))))]\n    (f i a i)))", "user": "57d1d6c8e4b0bd073c202370"}, {"problem": 66, "code": "#((fn [n]\n     (if (= 0 (mod %2 n) (mod %1 n))\n       n\n       (recur (dec n))))\n   (min %1 %2))", "user": "57c94c6ee4b05aa3c4741d2d"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b) a\n    (recur b (mod a b))))", "user": "574ff497e4b02ea114799266"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (rem a b))))", "user": "57dda21be4b0bd073c202445"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))))", "user": "57d9bca1e4b0bd073c202405"}, {"problem": 66, "code": "(fn [x y]\n  (if (= y 0) x\n  (recur y (rem x y))))", "user": "57d1a0e6e4b0bd073c20236d"}, {"problem": 66, "code": "(fn [x y]\n\t(if (zero? y)\n      x\n      (recur y (mod x y))))", "user": "566d71b1e4b0a866af6896ca"}, {"problem": 66, "code": "#(loop [a %1 b %2]\n  (if\n    (zero? b)\n    a\n    (recur b (mod a b))))", "user": "57b35772e4b0fbc9809a277c"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "57ccedaae4b0c746388ab88e"}, {"problem": 66, "code": "(fn [& x]\n  (->> (for [i (range 1 (apply max x))\n             :when (and (= 0 (mod (first x) i)) (= 0 (mod (last x) i)))]\n         i)\n       (apply max)))", "user": "5707abfce4b0b0fb43fd068d"}, {"problem": 66, "code": "(fn [a b]\n  (loop [t (min a b)\n         q (rem (max a b) t)\n         p t]\n    (if (= q 0) p\n      (recur q (rem p q) (min p q)))))", "user": "57bfffc7e4b05aa3c4741c8a"}, {"problem": 66, "code": "(fn [n1 n2]\n  (some (fn [n]\n          (and\n            (pos? n)\n            (zero? (mod n1 n))\n            (zero? (mod n2 n))\n            n))\n    (reverse (range (inc  (min n1 n2))))))", "user": "56f9c7c6e4b07572ad1a88ba"}, {"problem": 66, "code": "#(if (zero? %2) %1 (recur %2 (rem %1 %2)))", "user": "57e139f6e4b0bfb2137f5a6c"}, {"problem": 66, "code": "(fn [a b]\n\n    (first (filter integer? (map #(when (and (integer? (/ a %)) (integer? (/ b %)) ) %) (range (min a b) 0 -1) )))\n\n)", "user": "57e396cde4b0bfb2137f5a9e"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [divisors (fn [n] (->> (range 1 (inc n)) (filter #(zero? (mod n %))) (set)))]\n    (apply max (clojure.set/intersection (divisors a) (divisors b)))))", "user": "57e0f30ae4b0bfb2137f5a66"}, {"problem": 66, "code": "(fn gcd [x y]\n  (let [mx (max x y)\n        mn (min x y)\n        r (mod mx mn)]\n    (if (= r 0)\n      mn\n      (gcd mn r))))", "user": "5705f569e4b0b0fb43fd0677"}, {"problem": 66, "code": "#(last\n  (filter (fn [x] (and (= 0 (mod %1 x))\n                       (= 0 (mod %2 x))))\n          (range 1 (inc (min %1 %2)))))", "user": "57dd47f4e4b0bd073c20243e"}, {"problem": 66, "code": "(fn gcd [x y]\n  (let [f (fn [v] (filter #(when (= 0 (mod v %)) v) (range 1 (inc v))))]\n    (apply max (clojure.set/intersection (set (f x )) (set (f y))))))", "user": "5785c1d4e4b0ebec4cfb74e1"}, {"problem": 66, "code": "(fn [num1 num2]\n  (loop [n1 num1\n         n2 num2]\n    (if (= n2 0) n1\n      (recur n2 (mod n1 n2)))))", "user": "55f4ebffe4b06e875b46ce81"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (rem a b))))", "user": "57e33f6fe4b0bfb2137f5a96"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (< a b)\n    (gcd b a)\n    (let [d (mod a b)]\n      (if (= d 0)\n        b\n        (gcd b d)\n        )\n      )\n)\n)", "user": "57d7c894e4b0bd073c2023de"}, {"problem": 66, "code": "(fn [x y]\n  (let [factor (fn [x] (filter #(= (rem x %) 0) (map inc (range x))))]\n    (apply max (clojure.set/intersection (set (factor x)) (set (factor y))))))", "user": "57894e30e4b0ebec4cfb752b"}, {"problem": 66, "code": "(fn g [a b] (let [u (min a b) o (max a b)] (if (= (mod o u) 0) u (g u (mod o u)))))", "user": "53874820e4b06839e8705f1b"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0) a\n      (recur b (rem a b))))", "user": "57df309ee4b0bd073c20245f"}, {"problem": 66, "code": "(fn\n  [x y]\n  (if (zero? y)\n      x\n      (recur y (mod x y))))", "user": "57e6997ee4b0bfb2137f5af0"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b) a (recur b (mod a b))))", "user": "57ee804ee4b0bfb2137f5bbb"}, {"problem": 66, "code": "(fn g [a b] (if (= b 0) a (if (> b a) (g b a) (g b (mod a b)))))", "user": "57ec3d29e4b0bfb2137f5b77"}, {"problem": 66, "code": "(fn [x y]\n  (let [divides_x (filter #(= (mod x %) 0) (range 1 (inc x)))\n        divides_y (filter #(= (mod y %) 0) (range 1 (inc x)))]\n    (apply max (clojure.set/intersection (set divides_x) (set divides_y)))))", "user": "574e84e0e4b02ea114799243"}, {"problem": 66, "code": "(fn [a b]\n  (loop [a a b b]\n    (if (zero? b)\n      a\n      (recur b (mod a b)))))", "user": "57c176abe4b05aa3c4741ca2"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "57f0f7b8e4b0bfb2137f5bfe"}, {"problem": 66, "code": "(fn [& args]\n    (let [\n          [n m] args\n          divides-both (fn [n m d]\n                         (and\n                           (zero? (mod n d))\n                           (zero? (mod m d))))\n          keepers (filter #(divides-both n m %) (range 1 (inc (min n m))))\n          result (apply max keepers)\n         ]\n      result\n    )\n  )", "user": "532f7e12e4b019098a6f8b4e"}, {"problem": 66, "code": "(fn gcd [a b] (if (= b 0) a (gcd b (mod a b))))", "user": "57eb7a97e4b0bfb2137f5b62"}, {"problem": 66, "code": "(fn\n  [a b] (if (< a b)\n          (recur b a)\n          (if (= 0 b)\n            a\n            (recur b (mod a b)))))", "user": "56887bcbe4b0dcc4269f406a"}, {"problem": 66, "code": "(fn [a b]\n  (loop [x (min a b)]\n    (if (= x 1)\n      1\n      (if (and (= 0 (rem a x)) (= 0 (rem b x)))\n        x\n        (recur (dec x))))))", "user": "57995ac1e4b05b1deef9adbf"}, {"problem": 66, "code": "#(if (zero? %2) %1 (recur %2 (rem %1 %2)))", "user": "57e4dbcbe4b0bfb2137f5ac3"}, {"problem": 66, "code": "(fn [a b]\n  (let [limit (min a b)\n        div? (fn [a b] (zero? (mod a b)))]\n    (->> (range limit 0 -1)\n         (map #(vec [% (div? a %) (div? b %)]))\n         (filter #(and (second %) (last %)))\n         (first)\n         (first))))", "user": "530e75d5e4b08068f379ecba"}, {"problem": 66, "code": "(fn [a b]\n  (if (= a b)\n    \ta\n    \t(recur (- (max a b) (min a b)) (min a b))))", "user": "56483f45e4b0284900eef62b"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (if (not= a b)\n    (if (> a b)\n      (gcd (- a b) b)\n      (gcd (- b a) a))\n    a))", "user": "57596ba7e4b02ea11479931a"}, {"problem": 66, "code": "(fn gcd [a b]\n        (if (zero? b)\n          a\n          (recur b (mod a b))))", "user": "57ed2574e4b0bfb2137f5b93"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "user": "577b4440e4b0d3393e5deb0f"}, {"problem": 66, "code": "(fn gcd [x y]\n  (if (= (* x y) 0)\n    (+ x y)\n    (if (< x y)\n      (gcd x (mod y x))\n      (gcd y (mod x y))\n    )))", "user": "57db2369e4b0bd073c20241f"}, {"problem": 66, "code": "(fn gcd [v1 v2]\n    (loop [i (min v1 v2)]\n      (if (= 0 (mod v1 i) (mod v2 i))\n        i\n        (recur (dec i)))))", "user": "57f6e666e4b0d3187e9008f2"}, {"problem": 66, "code": "(fn [a b]\n  (loop [x (min a b)]\n    (if (= (rem a x) 0) (if (= (rem b x) 0) x (recur (dec x))) (recur (dec x)))))", "user": "57eb10b1e4b0bfb2137f5b5b"}, {"problem": 66, "code": "(fn g [x y]\n  (if (zero? y)\n    x\n    (recur y (rem x y))))", "user": "56a44067e4b0542e1f8d14da"}, {"problem": 66, "code": "(fn gcd [x y]\n  (if (< y x)\n    (gcd y x)\n    (loop [remaining (range 2 (+ 1 x)) ans 1]\n      (if (empty? remaining)\n        ans\n        (if (= 0 (rem x (first remaining)) (rem y (first remaining)))\n          (recur (rest remaining) (first remaining))\n          (recur (rest remaining) ans))))))", "user": "5746061ae4b009280f9f2b5b"}, {"problem": 66, "code": "(fn [w x]\n  (let [y (max w x) z (min w x)]\n    (last (filter #(= 0 (rem y %)) \n             (filter #(= 0 (rem z %)) (range 1 (+ 1 z)))))))", "user": "574a71b7e4b02ea1147991fb"}, {"problem": 66, "code": "#(letfn [(gcd [x y]\n           (if (zero? y)\n             x\n             (gcd y (mod x y))))]\n   (if (> %2 %)\n     (gcd %2 %)\n     (gcd % %2)))", "user": "51dc5033e4b09c47a74ce109"}, {"problem": 66, "code": "(fn [a b]\n  (loop [d (min a b)]\n    (if (and (zero? (mod a d)) (zero? (mod b d)))\n      d\n      (recur (dec d)))))", "user": "57e20474e4b0bfb2137f5a82"}, {"problem": 66, "code": "#(loop [a %1 b %2]\n   (if (= a b) a\n     (if (< a b)\n       (if (= 0 (mod b a)) a\n         (recur a (- b a)))\n       (if (= 0 (mod a b)) b\n         (recur b (- a b))))))", "user": "57f52d3be4b0903ccab3dce7"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (if (< a b)\n      (first (drop-while (fn[x]\n                            (not (and (zero? (mod b x)) (zero? (mod a x)))))\n                        (range b 0 -1)))\n      (first (drop-while (fn[x]\n                            (not (and (zero? (mod a x)) (zero? (mod b x)))))\n                        (range a 0 -1)))))", "user": "57f8151ce4b0d3187e900912"}, {"problem": 66, "code": "#(if (> %1 %2) (/ %1 (let [r (/ %1 %2)] (if (ratio? r) (numerator r) r))) (recur %2 %1))", "user": "57f9e0bce4b0d3187e900956"}, {"problem": 66, "code": "(fn gcd [a b]\n  (first (drop-while (fn [lst] (if (and(zero? (rem b lst)) (zero?(rem a  lst))) false true)) (reverse(range (inc a))))))", "user": "57fc08d8e4b0d3187e900988"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (if (= b 0)\n    a\n    (recur b (rem a b))))", "user": "57f8153de4b0d3187e900916"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (let [s (if (> a b) (range 1 a) (range 1 b))]\n    (last (filter #(and (= 0 (rem a %)) (= 0 (rem b %))) s))))", "user": "57fc34f0e4b0d3187e90098e"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n   (= a b) a\n   (> a b) (recur (- a b) b)\n   :else (recur a (- b a))))", "user": "566b57e9e4b0a866af6896ad"}, {"problem": 66, "code": "(fn gd [a b]\n  (last (filter #(and (integer? (/ a %)) (integer? (/ b %))) (range 1 (+ 1 (min a b))))))", "user": "53da2839e4b0e771c3025489"}, {"problem": 66, "code": "(fn [a b]\n  (loop [lst (range 1 (if (< a b) (inc a) (inc b)))\n         res ()]\n    (if (empty? lst)\n      (first res)\n      (if (and (integer? (/ a (first lst))) (integer? (/ b (first lst))))\n        (recur (rest lst) (cons (first lst) res))\n        (recur (rest lst) res)))))", "user": "57f8104ce4b0d3187e900910"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n(last(for [i (range 1 (inc (min a b)) 1)\n  :let [x (mod a i)\n        y (mod b i)]\n  :when (and (zero? x) (zero? y))] i)))", "user": "57f814fbe4b0d3187e900911"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "57f80350e4b0d3187e90090c"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b) a (recur b (mod a b))))", "user": "57e79d8ee4b0bfb2137f5afe"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (last(for [i (range 1 (inc (min a b)) 1)\n             :let [x (mod a i)\n                   y (mod b i)]\n             :when (and (zero? x) (zero? y))] i)))", "user": "57f81544e4b0d3187e900917"}, {"problem": 66, "code": "(fn gcd [a b]\n  (apply max (filter #(and (zero? (mod a %)) (zero? (mod b %)))\n                     (range 1 (max a b)))))", "user": "57f81045e4b0d3187e90090f"}, {"problem": 66, "code": "(fn [n1 n2] \n  (some \n   #(when (every? zero? [(rem n1 %) (rem n2 %)]) %)\n   (reverse (range 1 (max n1 n2)))))", "user": "55cc6c35e4b0e31453f64a10"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0) a\n      (recur b (rem a b))))", "user": "57f81524e4b0d3187e900913"}, {"problem": 66, "code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "user": "57efb389e4b0bfb2137f5bdb"}, {"problem": 66, "code": "(fn [m n]\n  (let [find-rem (fn [len divident]\n                   (set (filter #(= 0 (rem divident %)) (range 1 (inc len)))))]\n   (apply max (clojure.set/intersection (find-rem m m) (find-rem n n)))))", "user": "573d8658e4b05c31a32c0814"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "500d3160e4b05f7c30cfa6a1"}, {"problem": 66, "code": "(fn\n  [a b]\n  (cond \n      (> a b) (last (max (filter #(and (= (rem a %) 0) (= (rem b %) 0)) \n                               (range 1 a))))\n      :else (last (max (filter #(and (= (rem a %) 0) (= (rem b %) 0)) \n                             (range 1 b))))))", "user": "57fedf07e4b0d3187e9009dc"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (cond \n    (= a b) a\n    (> a b) (gcd (- a b) b)\n    :else   (gcd a (- b a))))", "user": "57f81532e4b0d3187e900914"}, {"problem": 66, "code": "(fn [a b]\n        (if (zero? b)\n          a\n          (recur b (mod a b))))", "user": "57f28b22e4b0511f1d294def"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "57fa7c93e4b0d3187e900963"}, {"problem": 66, "code": "(fn gcd\n  [x y]\n  (if (= x y)\n    x\n    (if (> x y)\n      (gcd (- x y) y)\n      (gcd x (- y x)))))", "user": "57f81534e4b0d3187e900915"}, {"problem": 66, "code": "(letfn [(gcd [a b]\n          (if (= a b)\n            a\n            (if (> a b)\n              (gcd (- a b) b)\n              (gcd a (- b a)))))]\n  (fn [x y] (gcd x y)))", "user": "57f9011ee4b0d3187e900935"}, {"problem": 66, "code": "(fn gcd \n  [x y] \n  (if (zero? y) \n    x (recur y (mod x y))))", "user": "57fd7344e4b0d3187e9009b6"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (if (= b 0)\n    a\n    (recur b (rem a b))))", "user": "57f81569e4b0d3187e900919"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [g (max a b)]\n    (last (for [i (range 1 g)\n                :when (and (= 0 (rem a i)) (= 0 (rem b i)))]\n            i))))", "user": "57f81549e4b0d3187e900918"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "580570a2e4b0a837a8b30cc7"}, {"problem": 66, "code": "#(loop [a (max %1 %2)\n        b (min %1 %2)\n        r (rem a b)]\n   (if (= r 0)\n     b\n     (recur b r (rem b r))))", "user": "57fe2d6fe4b0d3187e9009c8"}, {"problem": 66, "code": "(fn [a b] \n  (first \n   (drop-while #(or (not= 0 (rem a %)) \n                    (not= 0 (rem b %))) \n               (reverse (range (inc (min a b)))))))", "user": "57c94c54e4b05aa3c4741d2c"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (> a b)\n    (gcd b a)\n    (if (= (mod b a) 0)\n      a\n      (gcd a (mod b a))\n      )\n    )\n  )", "user": "57e404a3e4b0bfb2137f5ab1"}, {"problem": 66, "code": "#(loop [x %1 y %2]\n   (if (zero? y)\n     x\n     (recur y (mod x y))))", "user": "57f8ba80e4b0d3187e90092f"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (loop [start (min a b)]\n    (if (and (= 0 (mod a start)) (= 0 (mod b start)))\n      start\n      (recur (dec start)))))", "user": "57b9fb56e4b0fbc9809a27fa"}, {"problem": 66, "code": "(fn [a b]\n  (loop [n (min a b)]\n    (if (and (= 0 (rem a n))\n             (= 0 (rem b n)))\n      n\n      (recur (dec n)))))", "user": "57fa6f2ee4b0d3187e900962"}, {"problem": 66, "code": "(fn  [a b]\n  (cond\n   (or (= 0 a) (= 0 b)) 0\n   ( = a b) a\n   (> a b) (recur (- a b) b)\n   :else (recur a (- b a))))", "user": "57ee46c7e4b0bfb2137f5bb3"}, {"problem": 66, "code": ";(\n(fn gcd [a b]\n  (if (= a b)\n    a\n    (let [sm (min a b)\n          lg (max a b)\n          df (- lg sm)]\n      (gcd sm df))))\n;51 25)", "user": "57df2722e4b0bd073c20245e"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (< a b)\n      (recur b a)\n      (let [d (rem a b)]\n        (if (= d 0)\n            b\n            (recur b d)))))", "user": "580bd81ee4b0849f6811b711"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "57ee432de4b0bfb2137f5bb2"}, {"problem": 66, "code": "(fn [x y]\n  (if (= 0 (rem x y))\n    y\n    (recur y (rem x y))))", "user": "57ee2b3ee4b0bfb2137f5bac"}, {"problem": 66, "code": "(fn gcd [n_1 n_2]\n  (if (= n_2 0)\n    n_1\n    (recur n_2 (mod n_1 n_2))))", "user": "570e6974e4b0b0fb43fd06ef"}, {"problem": 66, "code": "(fn [x y]\n  (if (zero? y)\n    x\n    (recur y (mod x y))))", "user": "57a4fa50e4b0a966079561f1"}, {"problem": 66, "code": "(fn __ [a b]\n  (if (zero? b)\n    a\n    (__ b (mod a b))))", "user": "57ed19a3e4b0bfb2137f5b8e"}, {"problem": 66, "code": "(fn gcd [a b] (if (= 0 b) a (gcd b (mod a b))))", "user": "580c8fcee4b0849f6811b721"}, {"problem": 66, "code": "(fn f [a b]\n\t(if (zero? b) a\n\t   (f b (rem a b)))\n)", "user": "5405885ee4b0addc1aec6668"}, {"problem": 66, "code": "(fn [a b] (apply max (for [divisor (range 1 (max a b))\n                 :let [div-a (mod a divisor)\n                       div-b (mod b divisor)]\n                 :when (and (= 0 div-a) (= 0 div-b))]\n                 divisor)))", "user": "57fbf995e4b0d3187e900981"}, {"problem": 66, "code": ";;#(loop [i %] (if (and (= 0 (mod % i)) (= 0 (mod %2 i))) (int i) (recur (dec i))))\n(fn [x y] (if (zero? y) x (recur y (mod x y))))", "user": "57ee41eae4b0bfb2137f5bb0"}, {"problem": 66, "code": "(fn [m n] (if (zero? n) m (recur n (mod m n))))", "user": "57ee41a6e4b0bfb2137f5baf"}, {"problem": 66, "code": "(fn gecede [x y]\n  (if (zero? y)\n    x\n    (gecede y (mod x y))))", "user": "57bbc9bde4b05aa3c4741c31"}, {"problem": 66, "code": ";#(if (= (rem (max %1 %2) (min %1 %2)) 0)\n;   (min %1 %2)\n ;  (if (= (rem (min %1 %2) (rem (max %1 %2) (min %1 %2))) 0)\n;     (rem (max %1 %2) (min %1 %2))\n ;    (if (= (rem (rem (max %1 %2) (min %1 %2)) (rem (min %1 %2) (rem (max %1 %2) (min %1 %2)))) 0)\n ;      (rem (min %1 %2) (rem (max %1 %2) (min %1 %2))))\n ;    ))\n \n (fn [a b]\n  (let [get-divisor (fn [n] (into #{}\n                              (filter #(zero? (rem n %))\n                                      (range 1 (inc n)))\n                              ))\n        a-divisor (get-divisor a)\n        b-divisor (get-divisor b)\n        commom-divisor (clojure.set/intersection a-divisor b-divisor)]\n    (apply max commom-divisor)))", "user": "580d7de3e4b0849f6811b73d"}, {"problem": 66, "code": "(fn fpb [a b]\n  (last (filter #(and (= 0 (rem a %)) (= 0 (rem b %))) (range 1 34))))", "user": "55634f38e4b0c656e3ff17e8"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))\n  )\n)", "user": "58186016e4b0c0e9c07b83ad"}, {"problem": 66, "code": "(fn [a b]\n  (let [get-divisor (fn [n] (into #{}\n                              (filter #(zero? (rem n %))\n                                      (range 1 (inc n)))\n                              ))\n        a-d (get-divisor a)\n        b-d (get-divisor b)\n        commom-divisor (clojure.set/intersection a-d b-d)]\n    (apply max commom-divisor)))", "user": "580d7e53e4b0849f6811b73e"}, {"problem": 66, "code": "(fn [a b]\n     (let [factors (fn [n]\n                     (filter\n                      #(zero? (rem n %))\n                      (range 1 (inc n))))]\n       (last (sort (clojure.set/intersection\n                    (set (factors a))\n                    (set (factors b)))))))", "user": "56020b3fe4b04bb52996e19b"}, {"problem": 66, "code": "#(loop [x % y %2]\n              (if (zero? x)\n                y\n                (recur (mod y x) x)))", "user": "58134ba8e4b0f478707a060b"}, {"problem": 66, "code": "(fn [m n]\n     (loop [x (min m n)](\n             if (and (= 0 (mod m x)) (= 0 (mod n x)))\n                     x\n                     (recur (dec x)))))", "user": "581a5fdbe4b0e114eb51a002"}, {"problem": 66, "code": "(fn [x y] (first (filter #(= 0 (mod x %) (mod y %)) (range (max x y) 0 -1))))", "user": "5508a292e4b06e50f9beb10f"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "581e61b0e4b04b46fc4b0f28"}, {"problem": 66, "code": "(fn [a b]\n  (let [div (comp int /)\n        [a b d] (loop [a a b b d 0]\n                  (if (every? even? [a b])\n                    (recur (div a 2) (div b 2) (inc d))\n                    [a b d]))\n        g (loop [a a b b]\n            (if (not= a b)\n              (if (even? a)\n                (recur (div a 2) b)\n                (if (even? b)\n                  (recur a (div b 2))\n                  (if (> a b)\n                    (recur (div (- a b) 2) b)\n                    (recur a (div (- b a) 2)))))\n              a))]\n    (* (nth (iterate (partial * 2) 1) d) g)))", "user": "5821b018e4b04b46fc4b0f80"}, {"problem": 66, "code": "(fn gcd\n  [x y]\n  (let [[smaller larger] (if (< x y) [x y] [y x])]\n    (loop [current smaller]\n      (if (and (= (int (/ smaller current)) (/ smaller current)) \n               (= (int (/ larger current))  (/ larger current)))\n        current\n        (recur (- current 1))))))", "user": "58152157e4b0f478707a0631"}, {"problem": 66, "code": "#(last (sort (vec (clojure.set/intersection (into #{} (for [x (range 1 50)\n            :when (= (rem % x) 0)]\n                  x))\n(into #{} (for [y (range 1 40)\n            :when (= (rem %2 y) 0)]\n         y))))))", "user": "56193c6ee4b053970a773af2"}, {"problem": 66, "code": "(fn [n m] \n  (first (drop-while #(or (> (mod n %) 0) (> (mod m %) 0)) (range (min n m) 0 -1))))", "user": "575ddfd1e4b02ea11479938d"}, {"problem": 66, "code": "(fn [a b] (apply max (map #(if (= 0 (mod a %) (mod b %)) % 0) (map inc (range a)))))", "user": "565b2fa5e4b068f2fe63dbfe"}, {"problem": 66, "code": "(fn euclid [a b]\n    (if (= b 0)\n      a\n      (recur b (mod a b))))", "user": "55c5b55fe4b0e31453f649b5"}, {"problem": 66, "code": "(fn [m n](loop [x (min m n)](if (and (= (mod m x) 0)(= (mod n x) 0)) x (recur (dec x)))))", "user": "580d7bdae4b0849f6811b73c"}, {"problem": 66, "code": "(fn [x y]\n  (let\n   [rec\n    (fn [x y]\n      (if (= y 0)\n        x\n        (recur y (mod x y))))]\n   (if (> x y)\n     (rec x y)\n     (rec y x))))", "user": "578df8fee4b0ebec4cfb7574"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (if (= b 0)\n    a\n    (if (< a b)\n      (gcd b a)\n      (gcd b (mod a b)))))", "user": "56449e4de4b0284900eef5f9"}, {"problem": 66, "code": "(fn f [& x]\n  (first\n    (for [i (reverse (range 1 (inc (apply min x))))\n          :when (every? #(= 0 (rem % i)) x)]\n      i)))", "user": "58247423e4b051871117bec5"}, {"problem": 66, "code": "(fn gcd [a b] (if (< a b) (gcd b a)\n                (let [r (mod a b)]\n                  (if (= r 0)\n                    b\n                    (recur b r)))))", "user": "58225587e4b04b46fc4b0f94"}, {"problem": 66, "code": "(fn\n  [a b]\n  (loop [x a y b]\n    (if (zero? y)\n      x\n      (recur y (rem x y)))))", "user": "581b4d3be4b04b46fc4b0ec6"}, {"problem": 66, "code": "(fn [x y] (if (zero? y) x (recur y (mod x y))))", "user": "57ee42c4e4b0bfb2137f5bb1"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "569fc70ee4b0542e1f8d1499"}, {"problem": 66, "code": "(fn[a b]\n  (if (= 0 b)\n    a\n    (recur b (mod a b))\n  )\n)", "user": "58224c53e4b04b46fc4b0f92"}, {"problem": 66, "code": "(fn [n m] (let [i (range 1 (+ n 1))\n                       j (range 1 (+ m 1))\n                       k (remove nil? (map #(if (= (rem n %) 0) %) i))\n                       l (remove nil? (map #(if (= (rem m %) 0) %) j))]\n                   (cond\n                    (< n m) (last (remove nil? (map #(if (= (rem m %) 0) %) k)))\n                    (> n m) (last (remove nil? (map #(if (= (rem n %) 0) %) l)))\n                    :else n)))", "user": "57f3b841e4b0511f1d294e0f"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "507ff90fe4b089ade05efbd9"}, {"problem": 66, "code": "(fn [low high](first(for [ x (range low 0 -1) :when (and  (zero?( rem low x)) (zero?( rem high x)))]x)))", "user": "57b8f784e4b0fbc9809a27ea"}, {"problem": 66, "code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "user": "57ef793de4b0bfb2137f5bd8"}, {"problem": 66, "code": "#(loop [\n  a %1\n  b %2\n  ]\n  (if (= a b) \n    a\n    (if (> a b)\n      (recur (- a b) b)\n      (recur a (- b a))\n    )\n  )\n)", "user": "5710140fe4b09c608db7042e"}, {"problem": 66, "code": "(fn [x y]\n   (loop [a (max x y)\n          b (min x y)]\n     (if (= b 0)\n       a\n       (recur b (mod a b)))))", "user": "5808ee16e4b0a837a8b30d16"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "581dad0ae4b04b46fc4b0f17"}, {"problem": 66, "code": ";(fn my-gcd [n1 n2]\n;  (if (= 0 (mod n1 n2)) n2\n;      (recur n2 (mod n1 n2))))\n(fn my-gcd [n1 n2]\n  (if (zero? n2) n1\n    (recur n2 (mod n1 n2))))", "user": "581b19e7e4b04b46fc4b0ec4"}, {"problem": 66, "code": "(fn [a b]\n  (let [numbers (range 1 (inc (min a b)))]\n    (letfn [(helper\n              [acc x]\n              (if (and\n                    (= 0 (rem a x))\n                    (= 0 (rem b x)))\n                x\n                acc))]\n      (reduce helper 1 numbers))))", "user": "5813e208e4b0f478707a061b"}, {"problem": 66, "code": "(fn gcd* [a b]\n  (cond\n    (< a b) (recur a (- b a))\n    (> a b) (recur (- a b) b)\n    :else a))", "user": "58299e03e4b051871117bf46"}, {"problem": 66, "code": "(fn bar [n1 n2]\n  (->> (range 1 (inc (min n1 n2)))\n       (filter #(and (= 0 (rem n1 %)) (= 0 (rem n2 %))))\n       (apply max)))", "user": "58303fc3e4b051871117c006"}, {"problem": 66, "code": "(fn [n1 n2]\n    (apply max\n        (filter\n            #(and (zero? (mod n1 %)) (zero? (mod n2 %)))\n            (range 1 (inc (min n1 n2))))))", "user": "5784ff88e4b0ebec4cfb74d4"}, {"problem": 66, "code": "(fn h [a b]\n  (if (= 0 b) a\n    (h b (mod a b))))", "user": "5829d588e4b051871117bf4a"}, {"problem": 66, "code": "(let [divisors (fn [x] (set (filter #(zero? (mod x %)) (range 1 (inc x)))))\n      gcd (fn [x y] (last (sort (clojure.set/intersection (divisors x) (divisors y)))))]\n  (fn [x y] (gcd x y)))", "user": "5256c4c1e4b0541d1855ba36"}, {"problem": 66, "code": "(fn my-gcd [a b]\n  (if (= 0 b)\n    a\n    (my-gcd b (mod a b))))", "user": "583166c1e4b051871117c025"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "user": "58327a08e4b089d5ab817c7c"}, {"problem": 66, "code": "(fn [a b]\n  (let [[aa bb] (if (< a b) [b a] [a b])\n        remainder (rem aa bb)]\n    (if (= 0 remainder) bb\n      (recur bb remainder))))", "user": "52860baae4b0239c8a67ae09"}, {"problem": 66, "code": "(fn test19 [m n]\n  (apply max (map #(if (and (= (mod m %1) 0) (= (mod n %1) 0)) %1 1) (take n (iterate inc 1)) )))", "user": "5804d5afe4b0a837a8b30cad"}, {"problem": 66, "code": "(fn gcd [a b] \n ( let [isdiv #(zero? (mod %1 %2))]\n(apply max (filter \n#(and (isdiv a %) (isdiv b %)) \n(range 1 (inc a)) \n))))", "user": "58335c22e4b089d5ab817c9a"}, {"problem": 66, "code": "(fn [x y]\n    (let [z (mod x y)]\n      (if (= 0 z) y (recur y z))))", "user": "57235dc4e4b0c5bde472c0e2"}, {"problem": 66, "code": "(fn gcd1 [x y]\n  (loop [higher-div 1\n         tried 1]\n    (let [stop (min x y)\n          modx (mod x tried)\n          mody (mod y tried)]\n      (if (= tried stop)\n        (if (and (= 0 modx) (= 0 mody)) tried higher-div)\n        (if (and\n             (= 0 modx)\n             (= 0 mody))\n          (recur\n           tried\n           (+ tried 1))\n          (recur\n           higher-div\n           (+ tried 1)))))))", "user": "5779556de4b0979f8965166e"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b, (mod a b))\n    ))", "user": "580f9585e4b0f478707a05b5"}, {"problem": 66, "code": "(fn [n m] (cond (= n 0) m\n                (= m 0) n\n                :else (recur m (rem n m))))", "user": "563a79e5e4b0bfe05bf117fe"}, {"problem": 66, "code": "(fn [a b]\n  (if (== a b)\n    a\n    (let [larger (max a b)\n          smaller (min a b)]\n      (recur (- larger smaller) smaller))))", "user": "55b1d0b5e4b0da326a65cf73"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "57addf3ae4b0b8559636fca4"}, {"problem": 66, "code": "#(loop [n 1 arr []]\n   (if (> (- n 1) (min % %2))\n     (last arr)\n     (if (= 0 (rem % n))\n       (if (= 0 (rem %2 n))\n         (recur (inc n) (conj arr n)) (recur (inc n) arr)) (recur (inc n) arr))))", "user": "582290b5e4b04b46fc4b0fa0"}, {"problem": 66, "code": "#(loop [n 1 arr []]\n   (if (> (- n 1) (min % %2))\n     (last arr)\n     (if (= 0 (rem % n))\n       (if (= 0 (rem %2 n))\n         (recur (inc n) (conj arr n)) (recur (inc n) arr)) (recur (inc n) arr))))", "user": "5822ccd0e4b04b46fc4b0fa7"}, {"problem": 66, "code": "(fn [x y]\n    (let [mx (max x y)\n          mn (min x y)\n          c  (reverse (range 1 (inc mx)))]\n      (first (filter #(and\n                           (= (mod mx %) 0)\n                           (= (mod mn %) 0))\n                         c)))\n    )", "user": "500e3238e4b068062f6e8d8f"}, {"problem": 66, "code": "(fn [x y]\n(loop [n 1 div 1]\n  (cond\n    (= x y) x\n    (or (> n x) (> n y)) div\n    (= 0 (mod x n) (mod y n)) (recur (+ n 1) n) \n    :else (recur (+ n 1) div))\n    \n  )  \n)", "user": "580d1da7e4b0849f6811b72f"}, {"problem": 66, "code": "(fn [& xs]\n   (let [rng (reverse(range 1 (inc (apply min xs))))]\n     (loop [s rng gcd 1]\n       (cond\n         (empty? s) gcd\n         (not= 1 gcd) gcd\n         :else (let [head (first s)]\n                 (recur (rest s)\n                        (if (every? #(zero? (mod % head)) xs)\n                          head\n                          gcd)))))))", "user": "5787ce76e4b0ebec4cfb750e"}, {"problem": 66, "code": "(fn [x y]\n  (if (zero? y)\n    x\n    (recur y (mod x y))))", "user": "5791d259e4b0ebec4cfb75c0"}, {"problem": 66, "code": "(fn gcd [x y]\n  (loop [a x\n         b y]\n    (if (= 0 b)\n      a\n      (recur b (mod a b)))))", "user": "58217fbde4b04b46fc4b0f78"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b) a (recur b (mod a b))))", "user": "53d977f1e4b0e771c302547a"}, {"problem": 66, "code": "#(\n  (fn [x y ans]\n    (if (and (= (mod x ans) 0) \n             (= (mod y ans) 0))\n      ans\n      (recur x y (dec ans))))\n    %1 %2 (max %1 %2))", "user": "58384bc4e4b089d5ab817d27"}, {"problem": 66, "code": "(fn GCD [x y] \n  (if\n    (< x y)\n    (GCD y x)\n    (let [m (mod x y)]\n      (if \n        (= 0 m)\n        y\n        (GCD y m))\n      )\n    )\n  )", "user": "58334d18e4b089d5ab817c97"}, {"problem": 66, "code": "#(if (zero? %2)\n    %\n    (recur %2 (mod % %2)))", "user": "5835cb06e4b089d5ab817cea"}, {"problem": 66, "code": "(fn [a b]\n        (if (= 0 b)\n          a\n          (recur b (mod a b))))", "user": "58391c94e4b089d5ab817d35"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (rem a b))))", "user": "57dafe97e4b0bd073c20241c"}, {"problem": 66, "code": "(fn [& numbers]\n  (let [minim (apply min numbers)\n        isDiv (fn [divisor] (every? #(= 0 (mod % divisor)) numbers) )]\n    \n    (last (filter isDiv (range 1 (inc minim)) ))\n    )\n  \n  )", "user": "583667c7e4b089d5ab817cfb"}, {"problem": 66, "code": "#(if (zero? %2) % (recur %2 (mod % %2)))", "user": "57485efee4b009280f9f2b8a"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond (= a b) a\n        (> a b) (gcd (- a b) b)\n        :else   (gcd a (- b a))))", "user": "582589b2e4b051871117bedd"}, {"problem": 66, "code": "(fn gcd [x y]\n  (if (= y 0)\n    x\n    (gcd y (mod x y))))", "user": "5843b95de4b089d5ab817e3f"}, {"problem": 66, "code": "#(let [\n       lowest (if (> %1 %2) %2 %1)\n       get-divisor (fn get-divisor [x y dividend]\n         (if (and (= 0 (mod x dividend)) (= 0 (mod y dividend)))\n           dividend\n           (get-divisor x y (dec dividend))))]\n  (get-divisor %1 %2 lowest))", "user": "582d7569e4b051871117bfbe"}, {"problem": 66, "code": "(fn  [a b]\n  (let \n    [ mcd (fn \n            mcd [a b] \n            (if \n              (=  b 0) \n              a \n              (mcd b (mod a b))))]\n      (if (> a b) (mcd a b) (mcd b a))))", "user": "4e6a5728535d8ccf87e9fecf"}, {"problem": 66, "code": ";Euclidean algorithm\n#(if (zero? %2) \n   % \n   (recur %2 (rem % %2)))", "user": "54d341f7e4b0e8a36923e603"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (gcd b (mod a b))))", "user": "583e27e2e4b089d5ab817daa"}, {"problem": 66, "code": "(fn f [a b] ( if (= 0 (rem a b)) b\n             ( f  b  (rem a b))))", "user": "55a21f1ce4b0acc240e3151f"}, {"problem": 66, "code": "(fn [a b]  (if (zero? b) a (recur b (mod a b))))", "user": "55c66ffee4b0e31453f649c2"}, {"problem": 66, "code": "(fn\n  [x y]\n  (let [max (if (< x y) x y)\n        gcd (loop [c max]\n              (if (and (= 0 (rem x c)) (= 0 (rem y c)))\n                c\n                (recur (dec c))))] gcd))", "user": "5843b231e4b089d5ab817e3d"}, {"problem": 66, "code": "#(loop [a %1 b %2]\n\t(if (= b 0)\n\ta\n\t(recur b (rem a b)) \n\t\t)\n\t)", "user": "57465429e4b009280f9f2b60"}, {"problem": 66, "code": "(fn [n1 n2]\n     (some #(when (every? zero? [(rem n1 %) (rem n2 %)]) %) (range (min n1 n2) 0 -1) )\n     )", "user": "583c8bd4e4b089d5ab817d81"}, {"problem": 66, "code": "(fn [a b] (cond (> a b) (recur b a) (= a 0) b true (recur (mod b a) a)))", "user": "584dadebe4b0b7285a6f4e44"}, {"problem": 66, "code": "(fn [arg1 arg2]                                                                                                                                                                                    \n    (loop [mmin arg1 mmax arg2]                                                                                                                                                                           \n      (println \"mmin \" mmin \" mmax \" mmax)                                                                                                                                                                \n      (if (= mmin 0) mmax                                                                                                                                                                                 \n          (recur  (rem mmax mmin) mmin ) )))", "user": "5804b491e4b0a837a8b30cac"}, {"problem": 66, "code": "(fn [a b]\n  (cond\n    (= a 0) b\n    (= b 0) a\n    :else (recur b (rem a b))))", "user": "563f4c47e4b08d4f616f5ed2"}, {"problem": 66, "code": "(fn [x y]\n  (apply max (filter #(= 0 (mod y %) (mod x %))  (range 1 (inc (max x y))) )))", "user": "567b2f20e4b05957ce8c61a2"}, {"problem": 66, "code": "(fn gcd\n  ([x1 x2] (gcd x1 x2 (max x1 x2)))\n\n  ([x1 x2 d]\n   (cond\n     (= d 0) 1\n     (and\n      (zero? (mod x1 d))\n      (zero? (mod x2 d))) d\n     :else (gcd x1 x2 (dec d)))))", "user": "53bd476ae4b0d9a98559a6ca"}, {"problem": 66, "code": "(fn gcd[a b](if (zero? b) a (recur b (mod a b))))", "user": "5849ac5fe4b089d5ab817ed7"}, {"problem": 66, "code": "(fn [x y] (let [mi (min x y)\n                     ma (max x y)]\n                 (apply max (mapcat #(if (and\n                                   (= (rem x %) 0)\n                                   (= (rem y %) 0))\n                           [%]\n                           [1])\n                           (reverse (range 1 (inc mi)))\n\n                   ))))", "user": "58524875e4b0b7285a6f4ead"}, {"problem": 66, "code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "user": "584917a1e4b089d5ab817ec9"}, {"problem": 66, "code": "(fn\n  [x y]\n  (loop [curr (max x y)]\n    (if (and (= (mod x curr) 0)\n             (= (mod y curr) 0))\n      curr\n      (recur (dec curr)))))", "user": "55a5e2f7e4b0acc240e31550"}, {"problem": 66, "code": "(fn [n1 n2]\n  (if (zero? n2)\n    n1\n    (recur n2 (mod n1 n2))))", "user": "582dc562e4b051871117bfcb"}, {"problem": 66, "code": "(fn [a b]\n  (let [r (mod a b)]\n    (if (zero? r)\n      b\n      (recur b r))))", "user": "4ea8570f535d7eef308072f8"}, {"problem": 66, "code": "(fn gcd [a b] (if (== b 0) a (gcd b (mod a b))))", "user": "583e1558e4b089d5ab817da9"}, {"problem": 66, "code": "(fn gcd [a b]\n        (if (zero? b)\n          a\n          (recur b (mod a b))))", "user": "583c4482e4b089d5ab817d7e"}, {"problem": 66, "code": "(fn euclid [x y]\n  (let [a (max x y)\n        b (min x y)]\n    (if (zero? b)\n      a\n      (euclid b (mod a b)))))", "user": "57fdd1cfe4b0d3187e9009bf"}, {"problem": 66, "code": "(fn [a b]\n (letfn [(getDivs [n] (cons n (filter #(= (mod n %) 0) (range 1 (+ 1 (Math/ceil (/ n 2)))))))\n         (getCommon [col1 col2] (for [x col1 y col2 :when (= x y)] x))]\n  (apply max (getCommon (getDivs a) (getDivs b)))                  \n))", "user": "5766fbb7e4b0a07e8fc180b6"}, {"problem": 66, "code": "(fn [fa sa]\n  (let [f (if (> fa sa) sa fa)\n        s (if (> fa sa) fa sa)]\n    (loop [v f]\n      (if (and (= (mod f v) 0)\n               (= (mod s v) 0))\n        v\n        (recur (dec v))))))", "user": "56b6e354e4b0982f16b37e41"}, {"problem": 66, "code": "(fn [x y]\n  (loop [a x\n         b y]\n    (if (= b 0)\n      a\n      (recur b (mod a b)))\n    )\n  )", "user": "58562083e4b0f14aab7c86eb"}, {"problem": 66, "code": "(fn [a b]\n  (let [get-divisor (fn [n] (into #{}\n                              (filter #(zero? (rem n %))\n                                      (range 1 (inc n)))\n                              ))\n        a-divisor (get-divisor a)\n        b-divisor (get-divisor b)\n        commom-divisor (clojure.set/intersection a-divisor b-divisor)]\n    (apply max commom-divisor)))", "user": "57f9b25fe4b0d3187e90094b"}, {"problem": 66, "code": "(fn [a b]\n  (loop [x a\n         y b]\n    (cond\n     (= x y) x\n     (> x y) (recur (- x y) y)\n     :else (recur (- y x) x))))", "user": "585e2e77e4b0f14aab7c87ac"}, {"problem": 66, "code": "#(if (= %1 %2) %1 (if (> %1 %2) (recur (- %1 %2) %2) (recur %1 (- %2 %1))))", "user": "585d40afe4b0f14aab7c8798"}, {"problem": 66, "code": "#(loop [gcd 1 cnt 1]\n   (cond (> cnt %1) gcd\n         (every? zero? (vector (mod %1 cnt) (mod %2 cnt))) (recur cnt (inc cnt))\n         :else (recur gcd (inc cnt))))", "user": "57d0e185e4b0bd073c202360"}, {"problem": 66, "code": "(fn [x y]  \n  (let [seq (min x y)]  \n  (first (filter identity  (map #(if (and (= (rem x %) 0) (= (rem y %) 0)) % (prn %))   \n         ((fn [x] (take seq (iterate dec seq))) seq)))))\n   )", "user": "50b25edae4b03ea88043355e"}, {"problem": 66, "code": "(fn [a b]\n\t(loop [xa a xb b]\n\t\t(cond\n\t\t\t(> xb xa) (recur xb xa)\n\t\t\t(= xb 0) xa\n\t\t\t:else (recur (- xa xb) xb ) )))", "user": "584f5133e4b0b7285a6f4e61"}, {"problem": 66, "code": "(fn gcd [n m]\n  (loop [candidate (min n m)]\n    (if (and (-> n (rem candidate) (= 0))\n             (-> m (rem candidate) (= 0)))\n        candidate\n        (recur (dec candidate)))))", "user": "57e9a77ae4b0bfb2137f5b35"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "58637f03e4b0f14aab7c881e"}, {"problem": 66, "code": "(fn [x y]\n  (let [m (max x y)\n        n (min x y)]\n    (loop [a m\n           b n]\n      (if (= 0 (rem a b))\n        b\n        (recur b (rem a b))))))", "user": "51456858e4b0e88796073408"}, {"problem": 66, "code": "(fn gcd [x y]\n      (loop [d 1 newx x newy y currdivisor 2]\n        (cond\n          (= 0 (mod newx currdivisor) (mod newy currdivisor))\n          (recur (* currdivisor d) (/ newx currdivisor) (/ newy currdivisor) currdivisor)\n          (or (< newx currdivisor) (< newy currdivisor))  d\n          :else (recur d newx newy (+ currdivisor 1)))))", "user": "52ade380e4b0c58976d9ac9b"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "56f9b953e4b07572ad1a88b9"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5853582fe4b0b7285a6f4ec5"}, {"problem": 66, "code": "(fn [a b] (let [c (min a b) d (max a b) e (mod d c)] (if (zero? e) c (recur e c)) ))", "user": "57ee82b1e4b0bfb2137f5bbd"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))\n    )\n  )", "user": "525d44bfe4b0cb4875a45d6d"}, {"problem": 66, "code": "(fn [x y] (some #(and (zero? (rem x %)) (zero? (rem y %)) %) (range (min x y) 0 -1)))", "user": "54f26266e4b024c67c0cf8c5"}, {"problem": 66, "code": "(fn gcd [a b] \n   (case (< a b)\n     true (case (= a 0)\n       true b\n       false (gcd a (mod b a))\n      )\n     false (gcd b a)\n    )\n)", "user": "5722bf99e4b0c5bde472c0d6"}, {"problem": 66, "code": "(fn [u d]\n  (let [[f s] (if (< u d) [u d] [d u])]\n   (apply max (filter #(and (zero? (mod f %)) (zero? (mod s %))) (range 1 (inc f))))))", "user": "586615e6e4b0f14aab7c8858"}, {"problem": 66, "code": "(fn [a b]\n  (last (filter #(and (zero? (mod a %)) \n                      (zero? (mod b %))) \n                (range 1 (inc (min a b))))))", "user": "56acfee5e4b03c432f18734f"}, {"problem": 66, "code": "#(loop [a (max %1 %2) b (min %1 %2)] (if (zero? b) a (recur b (mod a b))))", "user": "4e11b92a535d04ed9115e7cb"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (rem a b))\n    )\n  )", "user": "585bcd51e4b0f14aab7c8771"}, {"problem": 66, "code": "(fn [n m]\n  (if\n    (zero? m) n\n    (recur m (mod n m))))", "user": "52dc7344e4b09f7907dd13cf"}, {"problem": 66, "code": "(fn greatest-common-divisor\n  [x y]\n  (->> (min x y)\n       (iterate dec)\n       (filter #(= 0 (mod x %) (mod y %)))\n       first))", "user": "547bf82de4b0c51c1f4d72e1"}, {"problem": 66, "code": "(fn [a b] (apply max (filter #(= 0 (rem a %) (rem b %)) (range 1 (inc (max a b))))))", "user": "586bc870e4b01531a375e964"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b)))\n  )", "user": "5840c068e4b089d5ab817df8"}, {"problem": 66, "code": "(fn [a b]\n  (cond\n   (zero? b) a\n   :else (recur b (mod a b))))", "user": "5863eda2e4b0f14aab7c8836"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n    (= a 0) b\n    (= b 0) a\n    (> a b) (gcd (mod a b) b)\n    (> b a) (gcd a (mod b a))))", "user": "57ea4569e4b0bfb2137f5b46"}, {"problem": 66, "code": "(fn gcd [a b] (if (= (rem a b) 0) b (gcd b (rem a b))))", "user": "5866b999e4b0f14aab7c886b"}, {"problem": 66, "code": "(fn gcd [x y]\n (cond\n  (= x y) x\n  (> x y) (gcd (- x y) y)\n  (< x y) (gcd x (- y x))))", "user": "55597b84e4b0deb715856e36"}, {"problem": 66, "code": "{2 2 5 1 1023 33}", "user": "586b6a0ae4b01531a375e957"}, {"problem": 66, "code": "(fn f [m n]\n  (if (= m 0)\n    n\n    (recur (mod n m) m)))", "user": "58731176e4b01531a375ea2a"}, {"problem": 66, "code": "(fn [x y]\n    (let [small (min x y)\n          big (max x y)]\n      (loop [gcd small]\n        (if (and (= (rem big gcd) 0) (= (rem small gcd) 0))\n          gcd\n          (recur (- gcd 1))))))", "user": "586b6753e4b01531a375e956"}, {"problem": 66, "code": "(fn [one two]\n  (let [sm (min one two) bg (max one two) cap (int (Math/pow sm 1/2))]\n;    (apply println [sm bg cap]) \n    (apply max (filter #(not (nil? %)) (flatten\n                (for [i (range 1 (inc cap))\n                      :let [f2 (/ sm i) \n                            i? (= 0 (mod sm i) (mod bg i))\n                            f2? (= 0 (mod sm f2) (mod bg f2))]\n                      :when (or f2? i?)]\n                  [(if i? i) (if f2? f2)]))))))", "user": "587294f0e4b01531a375ea1e"}, {"problem": 66, "code": "(fn checkd [a b & [d]] \n  (let [d (or d (min a b))]\n    (if (= (mod a d) (mod b d) 0)\n    d\n    (checkd a b (dec d)))))", "user": "586e47dee4b01531a375e9a9"}, {"problem": 66, "code": "#(if (zero? %1) %2 (recur (rem %2 %1) %1))", "user": "586b6f13e4b01531a375e959"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5857d27de4b0f14aab7c8710"}, {"problem": 66, "code": "(fn [a b] (loop [best 1 current 1] (if (> current (min a b)) best (recur (if (= (rem a current) (rem b current) 0) current best) (inc current)) ) ) )", "user": "585481e0e4b07779d46863fe"}, {"problem": 66, "code": "(fn [x y]\n  (loop [a (max x y)\n         b (min x y)]\n    (println \"a: \" a \"b: \" b)\n    (cond\n      (or (= a b) (= b 0)) a\n      :else (recur b (mod a b)))))", "user": "54012b48e4b0de5c41848620"}, {"problem": 66, "code": "(fn gcd [n m] (loop [a (max n m) b (min n m)]\n                   (if (zero? b)\n                       (Math/abs a)\n                       (let [jxt ((juxt max min) (- a b) b)] \n                         (recur (first jxt) (last jxt))\n                       )\n                   )  \n              )\n)", "user": "584d8724e4b0b7285a6f4e3e"}, {"problem": 66, "code": "(fn [x y]\n  (first \n   (drop-while \n    #(not= 0 (mod x %) (mod y %)) \n    (range (min x y) 0 -1))))", "user": "58740c18e4b01531a375ea49"}, {"problem": 66, "code": "(fn my-euklid [a b] (if (< a b)\n                       (my-euklid b a)\n                       (let [the-rest (mod a b)]\n                         (if (zero? the-rest)\n                            b\n                            (recur b the-rest)))))\n;;10 15)", "user": "58566b42e4b0f14aab7c86f4"}, {"problem": 66, "code": "(fn [a b] (some #(and (= 0\n                         (mod a %1)\n                         (mod b %1)) \n                      %1) \n                 (reverse \n                  (take-while #(< %1 (max a b)) \n                               (range)))))", "user": "4f3b5219e4b0e243712b1f2a"}, {"problem": 66, "code": "(fn [x y]\n  (if (zero? y) x (recur y (mod x y))))", "user": "5879d577e4b01531a375ead8"}, {"problem": 66, "code": "(fn euclid [x y]\n  (if (= x y)\n    x\n    (euclid (- (max x y) (min x y)) (min x y))))", "user": "57ea2c91e4b0bfb2137f5b42"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (rem a b))))", "user": "57fbd83ee4b0d3187e90097b"}, {"problem": 66, "code": "(fn [x y] (if (zero? y) x (recur y (rem x y))))", "user": "5790f9d7e4b0ebec4cfb75b4"}, {"problem": 66, "code": "; input a b\n; output max common divisor\n\n;(fn [a b]\n;  (loop [x a y b]\n;    (if (= 0 (reduce rem (sort x y)))\n;      (min x y)\n;      (recur (max x)))\n\n\n(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b)))\n  )", "user": "582c526ae4b051871117bf88"}, {"problem": 66, "code": "(fn[a b]\n  (loop [x a\n         y b]\n    (if (= y 0)\n      x\n      (recur y (mod x y)))))", "user": "5832be57e4b089d5ab817c86"}, {"problem": 66, "code": "(fn [& nums]\n  (->> nums\n       (map #(set (filter (fn [x] (zero? (rem % x))) (range % 0 -1))))\n       (apply clojure.set/intersection)\n       (apply max)))", "user": "5880e38fe4b0f1effa3b7625"}, {"problem": 66, "code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "user": "58800fd4e4b0f1effa3b7606"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [x (max a b)\n        y (min a b)\n        r (rem x y)]\n   (if (zero? r)\n     y\n     (recur y r))))", "user": "50385746e4b0803468ea2c6d"}, {"problem": 66, "code": "(fn [a b]\n  (if (= 0 b)\n    a\n    (recur b (rem a b))))", "user": "5883584ae4b0f1effa3b7674"}, {"problem": 66, "code": "(fn gcd [a b]\n             (if (= b 0)\n               a\n               (gcd b (mod a b))))", "user": "587ee260e4b052da650a6353"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "58852909e4b0f1effa3b76af"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "587f8393e4b0f1effa3b75f2"}, {"problem": 66, "code": "#(loop [a %1 b %2]\n   (let [x (max a b) y (min a b) m (mod x y)]\n     (if (zero? m)\n       y\n       (recur y m))\n     ))", "user": "587c59d1e4b01531a375eb17"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5881335ce4b0f1effa3b762e"}, {"problem": 66, "code": "(fn [a b]\n  (let [get-divisor (fn [n] (into #{}\n                              (filter #(zero? (rem n %))\n                                      (range 1 (inc n)))\n                              ))\n        a-divisor (get-divisor a)\n        b-divisor (get-divisor b)\n        commom-divisor (clojure.set/intersection a-divisor b-divisor)]\n    (apply max commom-divisor)))", "user": "5882ac4ee4b0f1effa3b7661"}, {"problem": 66, "code": "#(loop [a %1 b %2]\n   (if (= b 0)\n     a\n     (recur b (mod a b))))", "user": "58844d43e4b0f1effa3b7696"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0) a (gcd b (mod a b))))", "user": "563c7f98e4b0bfe05bf11836"}, {"problem": 66, "code": "(fn gcd\n  [x y]\n  (first (reverse  \n   (filter \n    #(and (zero? (rem y %)) (zero? (rem x %))) \n           (range 1 (max x y))\n                                                                 ))))", "user": "58840023e4b0f1effa3b768b"}, {"problem": 66, "code": "(fn gcd [num1 num2]\n   (let [div-num1 (filter #(= (rem num1 %) 0) (take (/ num1 2) (range 1 num1)))\n         div-num2 (filter #(= (rem num2 %) 0) (take (/ num2 2) (range 1 num2)))\n         common-divisors (clojure.set/intersection (set (conj div-num1 num1)) (set (conj div-num2 num2)))]\n     (apply max common-divisors)))", "user": "569f7bc2e4b0542e1f8d1494"}, {"problem": 66, "code": "(fn gcd\n  ([a b] (if (= b 0)\n          a\n          (gcd b (mod a b)))))", "user": "588bf237e4b05c141a25608d"}, {"problem": 66, "code": "(fn [x y]\n  (if (zero? y)\n    x\n    (recur y (mod x y))))", "user": "585dbe41e4b0f14aab7c879f"}, {"problem": 66, "code": "(fn [x y]\n   (apply max (\n               (fn both-in [seq1 seq2]\n                 (filter #(some #{%} seq2) seq1))\n               ((fn divisors [x] (filter #((fn [x y] (= 0 (mod x y))) x %) (range 1 (inc x)))) x) ((fn divisors [x] (filter #((fn [x y] (= 0 (mod x y))) x %) (range 1 (inc x)))) y))))", "user": "5885bea8e4b0f1effa3b76bf"}, {"problem": 66, "code": "(fn [x y]\n  (if (zero? y) x (recur y (mod x y))))", "user": "5884e807e4b0f1effa3b76a6"}, {"problem": 66, "code": "(fn [a b]\n  (if (= (rem a b) 0)\n    b\n    (recur b (rem a b))\n  )\n)", "user": "57d031d6e4b0bd073c202354"}, {"problem": 66, "code": "(let [gcd (fn [a b] (if (zero? b) a (recur b (mod a b))))]\n #(gcd %1 %2))", "user": "5650082fe4b0284900eef6b7"}, {"problem": 66, "code": "(fn gcd [a b] (some #(if (and (zero? (rem a %)) (zero? (rem b %))) %) (range (min a b) 0 -1)))", "user": "578d459ee4b0ebec4cfb7567"}, {"problem": 66, "code": "(fn [x y]\n\t(if (> x y)\n\t\t(recur y x)\n\t\t(if (= 0 (mod y x))\n\t\t\tx\n\t\t\t(recur x (mod y x)))))", "user": "5886e8bde4b0f1effa3b76ea"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0) a (gcd b (mod a b)))\n )", "user": "5885e90de4b0f1effa3b76c5"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n   a\n   (recur b (mod a b))))", "user": "57de9169e4b0bd073c202454"}, {"problem": 66, "code": "#(if (zero? %2) %1 (recur %2 (rem %1 %2)))", "user": "576e607ae4b0979f89651579"}, {"problem": 66, "code": "#(loop [a %1 b %2] \n  (if (zero? b) \n    a \n    (recur b (mod a b))))", "user": "552b6ddbe4b0ffed3738f965"}, {"problem": 66, "code": "(fn [a b] \n  (if (zero? b)\n    (Math/abs a)\n    (recur b (rem a b))))", "user": "565487dce4b0f9d632dd8482"}, {"problem": 66, "code": "(fn [num_1 num_2] \n  (letfn [(greatest [n_1 n_2] \n                    (if (zero? n_2) n_1 (greatest n_2 (mod n_1 n_2))))] (greatest num_1 num_2)))", "user": "588f500ae4b00487982d51a4"}, {"problem": 66, "code": "(fn pgcd\n    [a b]\n  \t(loop [a a, b b, reminder (rem a b)]\n        (if (zero? reminder)\n            b\n          \t(recur b reminder (rem b reminder)))))", "user": "587bead1e4b01531a375eb0d"}, {"problem": 66, "code": "(fn [num1 num2]\n  (let [largest (if (> num1 num2)\n                  num1\n                  num2)\n        smallest (if (> num1 num2)\n                   num2\n                   num1)]\n    (loop [dividend largest\n           divisor smallest\n           quotient (/ largest smallest)\n           remainder (mod largest smallest)]\n      (if (not (zero? remainder))\n        (recur divisor\n               remainder\n               (quot divisor remainder)\n               (mod divisor remainder))\n        divisor))))", "user": "583e02fce4b089d5ab817da5"}, {"problem": 66, "code": "(fn [x y]\n    (loop [result 1 count 1]\n        (if (or (> count x) (> count y))\n            result\n            (recur \n                (if (= (rem x count) (rem y count) 0)\n                    count\n                    result)\n                (inc count)))))", "user": "5896735fe4b00487982d529d"}, {"problem": 66, "code": "(fn gcd [m n]\n  (first\n   (filter #(and (zero? (mod m %)) (zero? (mod n %)))\n           (range (min m n) 0 -1))))", "user": "5896a0e6e4b00487982d52a8"}, {"problem": 66, "code": "(fn f [a b]\n  (if (zero? b) a\n    (f b (mod a b))))", "user": "53b42472e4b047364c0444b2"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [remed (rem a b)]\n    (if (zero? remed)\n      b\n      (recur b remed))))", "user": "5895477fe4b00487982d527c"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "562eeba2e4b0ab312c17ebc1"}, {"problem": 66, "code": "(fn gcd[ a b ] \n  (if (= 0 b) a\n              (gcd b , (rem a b))))", "user": "52f426fce4b05e3f0be25f1e"}, {"problem": 66, "code": "(fn [n1, n2] \n\t(last (sort (reduce clojure.set/intersection\n\t\t\t\t\t(map (fn [n] (set (filter #(= 0 (mod n %)) (range 1 (inc n)))))\t\n\t\t\t\t\t[n1 n2])))))", "user": "5876c0c5e4b01531a375ea8e"}, {"problem": 66, "code": "(fn [x y]\n  (loop [gcd (min x y)]\n    (if (= 0 (mod x gcd) (mod y gcd))\n      gcd\n      (recur (dec gcd)))))", "user": "58923efce4b00487982d521c"}, {"problem": 66, "code": "(fn [& values]\n  (letfn\n    [(divisor-seek [divisor]\n                  (if (= (apply max (map #(mod % divisor) values)) 0)\n                    divisor\n                    (divisor-seek (dec divisor))))]\n    (divisor-seek (apply min values))))", "user": "57b356c2e4b0fbc9809a277b"}, {"problem": 66, "code": "(fn [& args] (reduce (fn [r n] (if (every? #(= 0 (mod % n)) args) n r)) 1 (range 1 (inc (apply min args)))))", "user": "58987ee9e4b00487982d52d2"}, {"problem": 66, "code": "(fn  [x y] (\n           (fn  [xs ys i] (\n                         if (and (= (mod xs i) 0)\n                                 (= (mod ys i) 0))\n                         i \n                         (recur xs ys (dec i))\n                         )\n           ) \n  x y (min x y))\n)", "user": "505caadfe4b0bcb5664c3d3e"}, {"problem": 66, "code": "(fn gcd [a b] (if (= a b) a (if (> a b) (gcd (- a b) b) (gcd a (- b a)))))", "user": "58950f29e4b00487982d5270"}, {"problem": 66, "code": "(fn [low high](first(for [ x (range low 0 -1) :when (and  (zero?( rem low x)) (zero?( rem high x)))]x)))", "user": "53ada652e4b047364c04446d"}, {"problem": 66, "code": "(fn [x y] (apply max (filter #(and (= (mod x %) 0) (= (mod y %) 0)) (range 1 (+ (min x y) 1)))))", "user": "58983e3fe4b00487982d52ce"}, {"problem": 66, "code": "(fn gcd [a b] (if (> a b) (gcd b a) (if (= (rem b a) 0) a (gcd (rem b a) a))))", "user": "52ea7d3ae4b09f7907dd14bf"}, {"problem": 66, "code": "(fn\n  [a b]\n  (loop\n    [re a\n     qu b]\n    (if\n      (= qu 0)\n      re\n      (recur\n       qu\n       (rem re qu)))))", "user": "586a657de4b0f14aab7c88bd"}, {"problem": 66, "code": "(fn f [a b]\n  (if (zero? b) a (f b (mod a b))))", "user": "5458c74de4b01be26fd74623"}, {"problem": 66, "code": "(fn gcd [x y]\n  (let [m (min x y) M (max x y)]\n    (if (zero? m)\n      M\n      (gcd (rem M m) m))))", "user": "58a0fc33e4b02bd94d917ea3"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "58a2b57fe4b02bd94d917ede"}, {"problem": 66, "code": "(fn maxcom [num1 num2]\n\n  (let [mini (min num1 num2)]\n\n    (loop[temp mini]\n\n      (if (= 1 temp)\n\n         1 \n\n        (if (and (= 0 (rem num1 temp)) (= 0 (rem num2 temp)))\n\n            temp  \n\n            (recur (- temp 1)))))))", "user": "58a7d3e0e4b01a0c0b232949"}, {"problem": 66, "code": "(fn [a b]\n  (if (= 0 b)\n    a\n    (recur b (mod a b))))", "user": "54684c3be4b00cfc9eacc139"}, {"problem": 66, "code": "(fn [x y] \n  (last \n    (filter \n      #(and \n        (zero? (mod x %)) \n        (zero? (mod y %)))\n      (range 1 (inc (min x y))))))", "user": "585a7cb2e4b0f14aab7c874e"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0) a\n      (gcd b (mod a b)))\n  )", "user": "589037b4e4b00487982d51d0"}, {"problem": 66, "code": "(fn gcd [a b]  (if (= b 0) a (gcd b (rem a b))))", "user": "5897dda4e4b00487982d52c8"}, {"problem": 66, "code": "(fn gcd [x y]\n  (first \n   (drop-while \n    #(not (and (= 0 (mod y %)) (= 0 (mod x %)))) \n    (reverse (range 1 (inc (min x y)))))))", "user": "56255e2de4b00a550fc90297"}, {"problem": 66, "code": "#(first (for [z (range (min % %2) 0 -1) \n              :when (and (zero? (rem % z)) \n                         (zero? (rem %2 z)))] \n          z))", "user": "5884f77ee4b0f1effa3b76a9"}, {"problem": 66, "code": "(fn [m n]\n  (let [sm (min m n)\n        lg (max m n)]\n    (if-not (= sm 0)\n      (recur sm (rem lg sm))\n      lg)))", "user": "58a5a099e4b01a0c0b232918"}, {"problem": 66, "code": "(fn [x y]\n          (first (filter #(= 0\n                            (+\n                              (rem x %)\n                              (rem y %)))\n                  (range y 0 -1))))", "user": "5156e767e4b04360f2428e6b"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [[smaller greater]  (if (< a b) [a b] [b a])\n        remain (mod greater smaller)]\n    (if (= remain 0)\n      smaller\n      (recur smaller remain))))", "user": "580d2788e4b0849f6811b730"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))))", "user": "54f14aa6e4b024c67c0cf8af"}, {"problem": 66, "code": ";;https://upload.wikimedia.org/wikipedia/commons/thumb/1/1c/Euclidean_algorithm_1071_462.gif/170px-Euclidean_algorithm_1071_462.gif\n;;tries to cover a x by y area with y-sized blocks. The littlest such block is the gcd\n(fn my-gcd [x y]\n  (if (= y 0)\n    x\n    (my-gcd y (mod x y) )))", "user": "58988cbbe4b00487982d52d7"}, {"problem": 66, "code": "(fn [a b] (if (= b 0) a (recur b (mod a b))))", "user": "58ad4349e4b0ebc645576c9d"}, {"problem": 66, "code": "(fn\n  [& vals] \n  (reduce max (apply clojure.set/intersection\n                (map (fn [val] \n                      (set (filter #(= 0 (rem val %)) (range 1 (inc val)))))\n                 vals))))", "user": "56391b7ce4b0bfe05bf117ef"}, {"problem": 66, "code": "(fn [a b]\n  (letfn [(divisors [n ds] (filter #(= (mod n %) 0) ds))]\n     (if (< a b)\n       (last (divisors b (divisors a (range 1 (inc a)))))\n       (last (divisors a (divisors b (range 1 (inc b))))))))", "user": "57625c18e4b0994c1922fba4"}, {"problem": 66, "code": "#(loop [a (min %1 %2)\n        b (max %1 %2)]\n   (let [_rem (rem b a)]\n     (if (= 0 _rem)\n       a\n       (recur _rem a))))", "user": "5854580ce4b07779d46863f9"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "58b06b7ce4b0ebc645576cdc"}, {"problem": 66, "code": "(fn [a b]\n        (if (zero? b)\n          a\n          (recur b (mod a b))))", "user": "58b48db1e4b0ebc645576d3e"}, {"problem": 66, "code": "(fn gcd [a b] (if (= b 0) a (recur b (mod a b))))", "user": "58b106f9e4b0ebc645576cf0"}, {"problem": 66, "code": "(fn gcd [n1 n2]\n  (let [divisors (fn [n] (set (filter #(zero? (mod n %)) (range 1 (inc n)))))]\n    (apply max (seq (clojure.set/intersection (divisors n1) (divisors n2))))))", "user": "58a822e4e4b01a0c0b232950"}, {"problem": 66, "code": "(fn gcd [a b] (if (= b 0) a (gcd b (mod a b))))", "user": "58b51e05e4b0ebc645576d4c"}, {"problem": 66, "code": "(fn gcd [a b]\n         (let [r (mod a b)]\n           (if (= r 0)\n             b\n             (gcd b r))))", "user": "58949f8de4b00487982d525e"}, {"problem": 66, "code": "(fn [m n]\n  (let [gcd (fn gcd [m n]\n              (if (zero? (mod m n))\n                n\n                (gcd m (mod m n))))]\n    (if (> m n)\n      (gcd m n)\n      (gcd n m))))", "user": "58a953dae4b01a0c0b232968"}, {"problem": 66, "code": "(fn greatest-div [a b] (last(sort(filter (set(for [i (range 1 (inc a)) :when (=(mod a i) 0)] i)) (for [j (range 1 (inc b)) :when (= (mod b j) 0)] j)))))", "user": "58b2f085e4b0ebc645576d15"}, {"problem": 66, "code": "(fn [ x y ] (last (apply sorted-set (clojure.set/intersection \n\t\t(into #{} (filter #(zero? (mod x %)) (range x 0 -1))) \n\t\t(into #{} (filter #(zero? (mod y %)) (range y 0 -1)))))))", "user": "57887de2e4b0ebec4cfb751c"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (if (= a b)\n    a\n    (if (< a b)\n      (gcd a (- b a))\n      (gcd b (- a b)))))", "user": "588e4e05e4b00487982d5188"}, {"problem": 66, "code": "(fn [n m]\n    (loop [n n m m]\n      (if (= n m)\n        n\n        (recur (- (max n m) (min n m)) (min n m)))))", "user": "58b81490e4b0ebc645576d8c"}, {"problem": 66, "code": "(fn foo [a b]\n  (cond\n    (= a 0) b\n    (= b 0) a\n    (= a b) a\n    (and (even? a) (even? b)) (* 2 (foo (/ a 2) (/ b 2)))\n    (and (even? a) (odd? b)) (foo (/ a 2) b)\n    (and (odd? a) (even? b)) (foo a (/ b 2))\n    (> a b) (foo (/ (- a b) 2) b)\n    :else (foo (/ (- b a) 2) a)))", "user": "507eed82e4b06ce648bcdbfe"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "58bc0531e4b0888cdc949d07"}, {"problem": 66, "code": "(fn [a b]\n  (loop [[a b] (if (> a b) [a b] [b a])]\n    (let [c (rem a b)]\n      (if (= 0 c)\n        b\n        (recur [b c])))))", "user": "58bb218be4b0888cdc949cf4"}, {"problem": 66, "code": "(fn gcd\n     [a b]\n     (if (= b 0)\n       a\n       (gcd b (mod a b)))\n     )", "user": "58a44a14e4b01a0c0b2328f2"}, {"problem": 66, "code": "(fn[a b] (loop [x a y b] (if (zero? y) x (recur y (rem x y)))))", "user": "57762e67e4b0979f89651630"}, {"problem": 66, "code": "(fn gcd [x y] (cond (= x 0) y (= y 0) x (>= x y) (recur y (rem x y)) (< x y) (recur x (rem y x)) :else 1))", "user": "58ac513fe4b0005cfeb1a746"}, {"problem": 66, "code": "(fn f [a b]\n  (if (= 0 b)\n    a\n    (f b (mod a b))))", "user": "5893c64ce4b00487982d524b"}, {"problem": 66, "code": "(fn [x c] (apply max (filter (comp zero? (partial rem x)) (filter (comp zero? (partial rem c)) (range 1 (inc (min x c)))))))", "user": "58a0fd0be4b02bd94d917ea4"}, {"problem": 66, "code": "(fn [x y]\n    (apply max (clojure.set/intersection\n     (apply hash-set (filter #(zero? (rem x %)) (range 1 (inc x))))\n     (apply hash-set (filter #(zero? (rem y %)) (range 1 (inc y))))\n     )))", "user": "58765038e4b01531a375ea7e"}, {"problem": 66, "code": "(fn [num1 num2]\n    (let [min-num (min num1 num2)\n          divisor? #(integer? (/ %2 %1))]\n      (reduce\n       #(if (and (divisor? %2 num1) (divisor? %2 num2)) %2 %1)\n       nil\n       (range 1 (+ min-num 1)))))", "user": "58bbcbc8e4b0888cdc949d00"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n    (zero? b) a\n    (zero? (rem a b)) b\n    :else (recur b (rem a b))))", "user": "58bc08fee4b0888cdc949d08"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "58a9e872e4b01a0c0b232973"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n    (= a 0)\n      b\n    (= b 0)\n      a\n    :else\n      (gcd b (mod a b))))", "user": "5881d1c2e4b0f1effa3b7644"}, {"problem": 66, "code": "(fn [a b]\n  (if (= a b) a\n    (if (> a b) (recur (- a b) b)\n    (recur (- b a) a))))", "user": "5885cc62e4b0f1effa3b76c1"}, {"problem": 66, "code": "(fn [x y]\n  (loop [n y]\n    (if (= (mod x n) (mod y n) 0)\n      n\n    (recur (- n 1)))))", "user": "58b54852e4b0ebc645576d52"}, {"problem": 66, "code": "(fn [a b]\n  (let [eka (filter #(= (rem a %) 0) (rest (range (inc a))))\n        toka (filter #(= (rem b %) 0) (rest (range (inc b))))]\n    (apply max (clojure.set/intersection (set eka) (set toka)))))", "user": "57c314f3e4b05aa3c4741cba"}, {"problem": 66, "code": "(fn [v1 v2] (loop [u v1 v v2] (if (= v 0) u (recur v (mod u v)))))", "user": "589c0475e4b00487982d5351"}, {"problem": 66, "code": "#(loop [a %1 b %2]\n  (if (zero? b)\n    a\n    (recur b (rem a b))))", "user": "58c7a80fe4b021aa9917ed7b"}, {"problem": 66, "code": "(fn ff [& values]\n  (let [total (count values)]\n    (letfn [(divok [v m] (zero? (rem v m)))]\n      (loop [n (apply min values)]\n        (let [xx (map divok values (repeat total n))]\n          (if (nil? (some false? xx))\n            n\n            (recur (dec n))))))))", "user": "57b35ecbe4b0fbc9809a277e"}, {"problem": 66, "code": "(fn [x y]\n  (loop [x x\n         y y]\n    (let [minimum (min x y)\n          maximum (max x y)\n          remainder (rem maximum minimum)]\n      (if (= 0 remainder)\n        minimum\n        (recur remainder minimum)))))", "user": "58bc8cbee4b0888cdc949d1b"}, {"problem": 66, "code": "(fn gcd [a b] \n  (if (= a b) \n    a\n    (if (> a b) (gcd (- a b) b) (gcd a (- b a)))))", "user": "58c2df0ae4b021aa9917ed17"}, {"problem": 66, "code": "(fn [x y]\n  (let [[x y] [(max x y) (min x y)]]\n    (if (zero? y) x (recur y (rem x y)))))", "user": "58ca8a1de4b03c36ff7e5835"}, {"problem": 66, "code": "#(let [a %1 b %2]\n    (if (= 0 b)\n        a\n        (if (= 0 (mod a b))\n            b\n            (recur b (mod a b)))))", "user": "57ecc16fe4b0bfb2137f5b83"}, {"problem": 66, "code": "(fn gdc [x y]\n  (if (= y 0)\n    x\n    (gdc y (mod x y))))", "user": "58b80ec1e4b0ebc645576d89"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "user": "56df9203e4b0ca2494a095fc"}, {"problem": 66, "code": "(fn [x y]\n  (if (zero? y)\n    x\n    (recur y (mod x y))))", "user": "5755e66ee4b02ea1147992cf"}, {"problem": 66, "code": "(fn gcd [a b]\n    (if (= 0 b)\n      a\n      (gcd b (mod a b))))", "user": "58ca613de4b021aa9917edb7"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "588d224ae4b00487982d516c"}, {"problem": 66, "code": "(fn gcd [a b] (if (== 0 b) a (gcd b (mod a b))))", "user": "58b821fee4b0ebc645576d8f"}, {"problem": 66, "code": "(fn gcd-2 [a b]\n    (if (= 0 b)\n      a\n      (gcd-2 b (rem a b))))", "user": "58b86162e4b0ebc645576d97"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "58cb7525e4b03c36ff7e584a"}, {"problem": 66, "code": "(fn[a b]\n  (if (zero? b)\n    (Math/abs a)\n    (recur b (rem a b))))", "user": "563f0fdae4b08d4f616f5ece"}, {"problem": 66, "code": "(fn [x y] (if (zero? y) x (recur y (rem x y))))", "user": "58868940e4b0f1effa3b76de"}, {"problem": 66, "code": "(fn gcd [& args]\n  (let [values (sort > args)]\n    (if (= 0 (apply rem values))\n      (last values)\n      (gcd (last values) (apply rem values)))))", "user": "4fe899a6e4b07c9f6fd12c54"}, {"problem": 66, "code": "(fn [& items] \n   (let [[v1 v2] (sort items)] \n       (first (filter #(= 0 (mod v2 %) (mod v1 %)) (take v1 (iterate dec v1))))))", "user": "58d27bcae4b03c36ff7e58fe"}, {"problem": 66, "code": "#(if (zero? %2)\n   %1\n   (recur %2 (mod %1 %2)))", "user": "573102bbe4b0cd1946bd0fbb"}, {"problem": 66, "code": "(fn [x y]\n  (cond\n    (zero? x) y\n    (zero? y) x\n    :else     (recur y (mod x y))))", "user": "58969076e4b00487982d52a2"}, {"problem": 66, "code": "(fn [a b]\n  (loop [x a y b]\n    (if (= x y)\n      x\n      (if (< x y)\n        (recur x (- y x))\n        (recur y x)))))", "user": "58b989dbe4b0888cdc949ccd"}, {"problem": 66, "code": "(fn gdc [a r]\n  (cond\n   (< a r) (recur r a)\n   (not= 0 (mod a r)) (recur r (mod a r))\n   :ese r))", "user": "567d132ee4b05957ce8c61c3"}, {"problem": 66, "code": "#(if (zero? (mod %1 %2)) %2 (recur %2 (mod %1 %2)))", "user": "58c4b11ae4b021aa9917ed2c"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (mod a b))))", "user": "587a3babe4b01531a375eae2"}, {"problem": 66, "code": "#(loop [a (max %1 %2), b (min %1 %2)] (if (= b 0) a (recur b (rem a b))))", "user": "58cff8b0e4b03c36ff7e58c0"}, {"problem": 66, "code": "(fn gcd [a b]\n      (apply max \n             (for [x (range 1 (max a b))\n                   :when (= 0 (rem a x) (rem b x))]\n                   x)))", "user": "58dcb8cde4b0a4d5acaab6a7"}, {"problem": 66, "code": "(fn gcb\n  [a b]\n  (loop [a a\n         b b]\n    (if (not= b 0)\n      (recur b (mod a b))\n      a)))", "user": "58de563fe4b0a4d5acaab6e3"}, {"problem": 66, "code": "(fn [a b]\n        (if (zero? b)\n          a\n          (recur b (mod a b))))", "user": "577e42dee4b0c8d87281f6e4"}, {"problem": 66, "code": "(fn gcd\n  [x y]\n  (loop [d (min x y)]\n    (if (and (= 0 (mod x d)) (= 0 (mod y d)))\n      d\n      (recur (dec d)))))", "user": "58d4f44ee4b03c36ff7e594f"}, {"problem": 66, "code": "(fn ggt [l r]\n  (let [[s b] (sort [l r])\n        r     (rem b s)]\n    (if (= 0 r)\n      s\n      (ggt s r))))", "user": "58e37946e4b005f69f193cae"}, {"problem": 66, "code": "(fn max-common-div [n1 n2]\n  (let [min_num (min n1 n2)]\n   (loop [min_d 1\n          n1 n1\n          n2 n2\n          div 2]\n    (if (> div min_num) \n        min_d\n        (if (or (not= (mod n1 div) 0)\n                (not= (mod n2 div) 0))\n         (recur min_d n1 n2 (inc div))\n         (recur\n             (* min_d div)\n            (/ n1 div)\n            (/ n2 div)\n            div))))))", "user": "55b4fa46e4b01b9910ae2983"}, {"problem": 66, "code": "(fn [a b]\n   (loop [a a b b]\n     (if (= b 0)\n       a\n       (recur b (rem a b)))\n     ))", "user": "588906a9e4b0f1effa3b772a"}, {"problem": 66, "code": "(fn [& ns](apply min (apply concat (take-while #(not (zero? (first %))) (iterate (fn[[a b]] (list (rem b a) a)) (sort ns))))))", "user": "58e7229fe4b056aecfd47cc4"}, {"problem": 66, "code": "(fn gcd [a b]\n  (->> (reverse (range 1 (max a b)))\n       (some #(if (= 0 (rem a %) (rem b %)) % false))))", "user": "58dcf11ae4b0a4d5acaab6af"}, {"problem": 66, "code": "(fn [x y]\n  (if (zero? y)\n    x\n    (recur y (mod x y))))", "user": "58e58ae9e4b056aecfd47c9a"}, {"problem": 66, "code": "(fn prob66\n [firstt secondd]\n (if (< firstt secondd) (loop [x firstt y secondd z firstt] (if (integer? (/ x z))         \n                                                              (if (integer? (/ y z)) z\n                                                                (recur x y (dec z)))\n                                                               (recur x y (dec z))))\n(loop [x firstt y secondd z secondd] (if (integer? (/ x z))\n                                                              (if (integer? (/ y z)) z\n                                                                (recur x y (dec z)))\n                                                               (recur x y (dec z))))))", "user": "58e6a2c5e4b056aecfd47cba"}, {"problem": 66, "code": "(fn myDiv ([x y] (myDiv x y (min x y)))\n   ([x y d] \n    (if (and (= 0 (mod x d)) (= 0 (mod y d))) \n      (min d d)\n      (myDiv x y (mod (max x y) (min x d))) \n      )))", "user": "58e5f995e4b056aecfd47ca5"}, {"problem": 66, "code": "(fn g [x y] \n  (if (= y 0) x (g y (mod x y)))\n)", "user": "58e762d3e4b056aecfd47ccc"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (rem a b))))", "user": "579c7db7e4b05b1deef9ae0a"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n   (= b 0) a\n   (> b a) (gcd b a)\n   :else (gcd (mod a b) b)))", "user": "58edaa3be4b056aecfd47d89"}, {"problem": 66, "code": "(fn gcd [x y] (if (zero? y) x (gcd y (mod x y))))", "user": "58eba5cce4b056aecfd47d41"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b) \n    a \n    (recur b (rem a b))))", "user": "58ed713de4b056aecfd47d84"}, {"problem": 66, "code": "(fn GCD [a b]\n  (if (= 0 (mod a b))\n    b\n    (GCD b (mod a b))))", "user": "5794fd7be4b0e215f87e8476"}, {"problem": 66, "code": "(fn [x y]\n  (if (= y 0)\n    x\n    (recur y (rem x y))))", "user": "58ebae90e4b056aecfd47d44"}, {"problem": 66, "code": "(fn gcd [x y]\n    (loop [a (max x y) b (min x y)]\n      (if (= 0 b)\n        a\n        (recur b, (mod a b)))\n      )\n    )", "user": "58ec1e63e4b056aecfd47d54"}, {"problem": 66, "code": "#(if (zero? %2) % (recur %2 (rem % %2)))", "user": "5782018de4b0d36ec5835e8e"}, {"problem": 66, "code": "(fn [a b]\n  (if (= a b) \n    b\n    (recur (- (max a b) (min a b)) (min a b))))", "user": "58bc6a88e4b0888cdc949d16"}, {"problem": 66, "code": ";;https://en.wikipedia.org/wiki/Greatest_common_divisor#Using Euclid's algorithm\n(fn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "58eed4c5e4b056aecfd47db7"}, {"problem": 66, "code": "#(loop [dd %1 dr %2] (if (zero? (rem dd dr)) dr (recur dr (rem dd dr))))", "user": "58dcae01e4b0a4d5acaab6a4"}, {"problem": 66, "code": "(fn gcd [x y]\n  (let [big (max x y)\n        small (min x y)\n        remainder (rem big small)]\n    (if (= remainder 0)\n      small\n      (gcd small remainder))))", "user": "58ee5371e4b056aecfd47da8"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "user": "53a2a259e4b0f1fc7453882c"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (> a b)\n    (gcd b a)\n    (if (zero? a)\n      b\n      (gcd (rem b a) a))))", "user": "58ef4db9e4b056aecfd47dc6"}, {"problem": 66, "code": "(fn [a b] (first (filter #(and (= 0 (rem a %)) (= 0 (rem b %))) (range (min a b) 0 -1))))", "user": "5796d3ebe4b039eba2ecb0ee"}, {"problem": 66, "code": "(fn [x y] \n  (let [a (filter #(= 0 (mod x %)) \n                  (range 1 (inc x)))\n        b (filter #(= 0 (mod y %)) \n                  (range 1 (inc y)))]\n    (apply max (clojure.set/intersection (set a) (set b)))))", "user": "56f881e0e4b08e7d20b96839"}, {"problem": 66, "code": "(fn [a b]\n  (loop [a a\n         b b]\n    (if (= b 0)\n      a\n      (recur b (mod a b)))))", "user": "5823d3e6e4b051871117beb8"}, {"problem": 66, "code": "(fn gcd [x y]\n  (let [dividend (max x y)\n        divisor (min x y)\n        remainder (rem dividend divisor)]\n    (if (zero? remainder)\n      divisor\n      (recur divisor remainder))))", "user": "58f2e8fbe4b0438e51c2ce94"}, {"problem": 66, "code": "(fn gcd [a b] \n     (if (= b 0)\n        a\n       (gcd b (mod a b))))", "user": "56ca2f25e4b0ea9b8538f716"}, {"problem": 66, "code": "(fn [x y]\n   (let [divisors (fn [a] (into #{} (mapcat #(vector % (/ a %)) (filter #(zero? (rem a %)) (range 1 (inc (int (Math/sqrt a))))))))]\n     (apply max (clojure.set/intersection (divisors x) (divisors y)))))", "user": "57b7de74e4b0fbc9809a27d4"}, {"problem": 66, "code": "(fn [x y]\n  (cond\n    (= x y) x\n    (> x y) (recur (- x y) y)\n    (< x y) (recur (- y x) x)))", "user": "58f44c07e4b0438e51c2ceb7"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (rem a b))))", "user": "5865c8f0e4b0f14aab7c884e"}, {"problem": 66, "code": "(fn [x y]\n  (let [l (min x y)\n        u (max x y)\n        r (rem u l)]\n    (if (zero? r)\n      l\n      (recur l r))))", "user": "56949fc5e4b0dcc4269f4120"}, {"problem": 66, "code": "(fn gcd [x y]\n  (let [a (max x y)\n        b (min x y)]\n    (cond (= 0 (mod a b)) b\n          (= 1 (mod a b)) 1\n          :else (gcd b (mod a b)))))", "user": "51a3be77e4b0e77c4ca60bf8"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "53dbca12e4b094d41abdfef6"}, {"problem": 66, "code": "(fn [x y] (if (zero? y) x (recur y (rem x y))))", "user": "58f45ea0e4b0438e51c2cebc"}, {"problem": 66, "code": "#(apply max (filter (fn [x] (and (zero? (mod %1 x)) (zero? (mod %2 x)))) (range 1 (inc (min %1 %2)))))", "user": "5566d812e4b0c656e3ff1837"}, {"problem": 66, "code": "(fn gcd [a b]\n  (loop [a (if (neg? a) (- a) a) b (if (neg? b) (- b) b)]\n      (if (zero? b) a,\n    (recur b (mod a b)))))", "user": "59032c0fe4b022d14a2aaf9f"}, {"problem": 66, "code": "(fn greatest-common-divisor\n  [x y]\n  (let [factors (fn factors [n] (->> n range (map inc) (filter #(zero? (mod n %))) set))]\n  (apply max (clojure.set/intersection (factors x) (factors y)))\n  ))", "user": "58db097fe4b0a4d5acaab66f"}, {"problem": 66, "code": "(fn gcd [a b] \n         (if (> a b)\n           (gcd b a)\n           (if (or (= a b) (= 1 a))\n             a\n             (gcd a (- b a)))))", "user": "58c4492be4b021aa9917ed27"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond \n     (= a b) a\n     (< a b) (recur a (- b a))\n     (> a b) (recur (- a b) b)))", "user": "58dc81d1e4b0a4d5acaab69e"}, {"problem": 66, "code": "(fn gcd [a b]\n    (cond\n      (= 0 a) b\n      (= 0 b) a\n      :else (gcd b (rem a b))))", "user": "5901158de4b0438e51c2d039"}, {"problem": 66, "code": "(fn [x y]\n  (loop [n (max x y)]\n    (if (= 0 (rem x n) (rem y n))\n      n\n      (recur (dec n)))))", "user": "55f5b8d6e4b06e875b46ce8d"}, {"problem": 66, "code": "(fn [x y]\n  ((fn gcd [a b d]\n     (cond\n      (and (even? a) (even? b)) (gcd (/ a 2) (/ b 2) (+ d 1))\n      (= a b) (* a (bit-shift-left 1 d))\n      (even? a) (gcd (/ a 2) b d)\n      (even? b) (gcd (/ b 2) a d)\n      (> a b) (gcd (/ (- a b) 2) b d)\n      :else (gcd (/ (- b a) 2) a d)))\n   x y 0))", "user": "59075e3be4b047aa04b19955"}, {"problem": 66, "code": "(fn [x y] (apply max \n                 (filter #(= 0 (rem x %) (rem y %)) (range 1 (inc x)))))", "user": "58ee0bb6e4b056aecfd47d97"}, {"problem": 66, "code": "#(loop [a %1\n        b %2\n        d (max %1 %2)]\n   (if (and (= (mod a d) 0) (= (mod b d) 0))\n     d\n     (recur a b (- d 1))))", "user": "5801eed1e4b0a837a8b30c63"}, {"problem": 66, "code": "(fn [a b]\n   (cond\n     (= a 0) b\n     :else (recur (mod b a) a)))", "user": "590b3aeae4b047aa04b199d0"}, {"problem": 66, "code": "(fn greatest-common-divisor\n [x y]\n (let [factors (fn factors [n] (->> n range (map inc) (filter #(zero? (mod n %))) set))]\n   (apply max (clojure.set/intersection (factors x) (factors y)))\n   ))", "user": "58eac340e4b056aecfd47d24"}, {"problem": 66, "code": "#(if (= %2 0) %1 (recur %2 (mod %1 %2)))", "user": "590b055ae4b047aa04b199c9"}, {"problem": 66, "code": "(fn [x y] (let [b (max x y) s (min x y) m (mod b s)] (if (zero? m) s (recur b m))))", "user": "5880d686e4b0f1effa3b7623"}, {"problem": 66, "code": "#(loop [n (min % %2)]\n   (if (= 0 (mod % n) (mod %2 n))\n     n\n     (recur (dec n))))", "user": "58fdbf59e4b0438e51c2cfbc"}, {"problem": 66, "code": "(fn [a b]\n  (loop [x 1 max 1]\n    (if (or (= x a) (= x b))\n      (if (and (= (mod a x) 0) (= (mod b x) 0))\n        x\n        max)\n    (if (and (= (mod a x) 0) (= (mod b x) 0))\n      (recur (inc x) x)\n      (recur (inc x) max)))))", "user": "590d0bc8e4b047aa04b199fa"}, {"problem": 66, "code": "(fn gcd [a b] \n    (if (zero? b) \n        a \n        (recur b (mod a b))))", "user": "59076082e4b047aa04b19956"}, {"problem": 66, "code": "(fn GCD [a b] \n   (#(loop [x %] (when (> x 0) (if (zero? (+ (mod a x) (mod b x))) x (recur (dec x))))) (min a b)) \n   )", "user": "58dd21a9e4b0a4d5acaab6b3"}, {"problem": 66, "code": "(fn gcd [m n]\n  (let [divisors (fn [n] (set (filter #(zero? (mod n %)) (range 1 (inc n)))))\n        divisors-m (divisors m)\n        divisors-n (divisors n)]\n    (apply max (clojure.set/intersection divisors-m divisors-n))))", "user": "56326995e4b0bfe05bf117a3"}, {"problem": 66, "code": "(fn divi\n  ([a b] (divi a b b))\n  ([a b res] (if (and (= 0 (mod a res)) (= 0 (mod b res)))\n               res\n               (divi a b (dec res)))))", "user": "58934052e4b00487982d523a"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= 0 b)\n     a\n     (gcd b (mod a b))))", "user": "591072e0e4b0163c97b36ebc"}, {"problem": 66, "code": "(fn [x y] (last (filter #(= 0 (rem x %) (rem y %)) (map inc (range (max x y))))))", "user": "59074b7ce4b047aa04b19951"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n    (= a b) a\n    (> a b) (gcd (- a b) b)\n    (> b a) (gcd (- b a) a)))", "user": "5908b36be4b047aa04b19982"}, {"problem": 66, "code": "(fn [a b]\n  (if (= 0 a)\n    b\n    (if (= 0 b)\n      a\n      (let [M (max a b)\n            m (min a b)\n            r (rem M m)]\n        (recur m r)))))", "user": "5890799be4b00487982d51d6"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond (> b a) (gcd b a)\n        (= b 0) b\n        (= 0 (mod a b)) b\n        :else (gcd b (mod a b))))", "user": "59156f0be4b0163c97b36f3d"}, {"problem": 66, "code": "(fn [x y]\n  (let [smallest (min x y)]\n    (loop\n      [divisor 0\n       counter 1]\n      (if (<= counter smallest)\n        (recur\n          (if (and (= (rem x counter) 0)\n                   (=\t(rem y counter) 0))\n            counter\n            divisor)\n          (inc counter)\n\n          )divisor\n        ))))", "user": "591ac8ece4b09b4ee5954bdd"}, {"problem": 66, "code": "(fn [a b]\n        (if (zero? b)\n          a\n          (recur b (mod a b))))", "user": "5916412ee4b09b4ee5954b87"}, {"problem": 66, "code": "#(loop [cd 1 i 1]\n   (if (= i (max %1 %2))\n     cd\n     (recur (if (and (= 0 (mod %1 i)) (= 0 (mod %2 i))) i cd) (inc i))))", "user": "5640b135e4b08d4f616f5ee8"}, {"problem": 66, "code": "(fn [x y] (last (filter #(and\n                    (= 0 (mod x %1))\n                    (= 0 (mod y %1)))\n  (range 1 (+ 1 (min x y))))))", "user": "5910a43de4b0163c97b36ebf"}, {"problem": 66, "code": "(fn [n1 n2]\n  (let [s1 (set ((fn [n] (cons n (->> (range 1 (inc (/ n 2)))\n                                      (filter #(= 0\n                                                  (mod n %)))))) n1))\n        s2 (set ((fn [n] (cons n (->> (range 1 (inc (/ n 2)))\n                                      (filter #(= 0\n                                                  (mod n %)))))) n2))]\n    (apply max (clojure.set/intersection s1 s2))))", "user": "58d48df8e4b03c36ff7e5941"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "564a985be4b0284900eef65c"}, {"problem": 66, "code": "(fn [n1 n2]\n  (let [big (max n1 n2)]\n    (->> (range 1 (inc big))\n         (filter #(and (zero? (rem n1 %)) (zero? (rem n2 %))))\n         (last))))", "user": "58ffac9de4b0438e51c2cffd"}, {"problem": 66, "code": "(fn g [a b] (if (= b 0) a (g b (rem a b))))", "user": "58bcea23e4b0888cdc949d23"}, {"problem": 66, "code": "(fn gcd\n\t[a b]\n\t(if (= a b)\n\t\ta\n\t\t(recur (- (max a b) (min a b)) (min a b))))", "user": "58fb7d7ae4b0438e51c2cf7a"}, {"problem": 66, "code": "(fn grcom [x y]\n  (reduce max (filter #(and (zero? (mod x %)) (zero? (mod y %))) (range 1 (max x y)))))", "user": "591cbc30e4b09b4ee5954c08"}, {"problem": 66, "code": "#(if (< % %2) (recur %2 %)\n   (let [r (rem % %2)]\n     (if (= 0 r) %2 (recur %2 r))))", "user": "56b1b59be4b0982f16b37df2"}, {"problem": 66, "code": "(fn g [x y]\n   (letfn [(gcd [x y]\n             (if (= (rem x y) 0) y (gcd y (rem x y))))]\n     (if (> x y)\n       (gcd x y)\n       (gcd y x))))", "user": "5921a080e4b09b4ee5954c77"}, {"problem": 66, "code": "(fn [x y]\n  (let [a (max x y), b (min x y)]\n    (if (= b 0)\n      a\n      (recur b (mod a b)))))", "user": "59225498e4b09b4ee5954c8c"}, {"problem": 66, "code": "(fn euclidean [x y]\n   (if (= 0 (rem x y))\n       y\n       (euclidean y (rem x y))))", "user": "5922a513e4b026ae38521286"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0)\n    a (recur b (mod a b))))", "user": "58ef93ece4b056aecfd47dca"}, {"problem": 66, "code": "(fn [& multInt] \n  (apply + (last (take-while #(or (not (zero? (first %))) (not (zero? (last %))))\n                           (iterate (fn [[x y]]\n                                      (if (or (= 0 x) (= 0 y))\n                                        [0 0]\n                                        [y (mod x y)])) multInt)))))", "user": "591f5124e4b09b4ee5954c45"}, {"problem": 66, "code": "(fn [a b]\n  (if (= 0 b)\n    a\n    (recur b (mod a b))))", "user": "4db1b3951254ad5b4805fa6f"}, {"problem": 66, "code": "(fn [a b]\n  (let [mx (max a b) mn (min a b)]\n    (apply max (filter #(and (= (rem mx %) 0)\n                             (= (rem mn %) 0)) (range 1 (+ mn 1))))))", "user": "57614a42e4b0994c1922fb85"}, {"problem": 66, "code": "(fn [a b]\n  (cond\n   (= 0 a) b\n   (= 0 b) a\n   :else   (recur b (rem a b))))", "user": "4f29d9abe4b0d6649770a034"}, {"problem": 66, "code": "(fn t [x y]\n (loop [div (min x y)]\n  (if (= 0 (mod x div) (mod y div))\n   div\n   (recur (dec div)))))", "user": "589b98fae4b00487982d533c"}, {"problem": 66, "code": "(fn [a b]\n  (loop [m (min a b)]\n    (if (not-any? ratio? [(/ a m) (/ b m)]) m\n      (recur (dec m)))))", "user": "591f05b4e4b09b4ee5954c42"}, {"problem": 66, "code": "(fn\n  [a b]\n  (if (zero? a)\n    a\n    (let [r (mod a b)]\n      (if (zero? r)\n        b\n        (recur b r)))))", "user": "57233cc8e4b0c5bde472c0e1"}, {"problem": 66, "code": "(fn gcd [p q]\n  (if (zero? q)\n    p\n    (recur q (rem p q))))", "user": "591d9870e4b09b4ee5954c1b"}, {"problem": 66, "code": "(fn [a b]\n  (first (filter #(= 0 (mod a %) (mod b %)) (range (max a b) 0 -1))))", "user": "4e6fe3a6535d5021c1a89629"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "592518bfe4b072a2710fce65"}, {"problem": 66, "code": "(fn cdiv [a b]\n  (cond\n   (zero? b) a\n   :else (cdiv b (mod a b))))", "user": "5833a6d8e4b089d5ab817ca2"}, {"problem": 66, "code": "(fn gcd[x y]\n  (loop [a x b y]\n    (if (= b 0)\n      a\n      (recur b (mod a b)))))", "user": "56618573e4b068f2fe63dc68"}, {"problem": 66, "code": "(fn [n1 n2]\n  (loop [n1 n1 n2 n2]\n    (let [n (mod n1 n2)]\n      (if (= n 0)\n        n2\n        (recur n2 n)))))", "user": "557c6ca6e4b05c286339e0c4"}, {"problem": 66, "code": "(fn [a b]\n  (first\n   (for [x (range (min a b) 0 -1)\n         :when (and (= 0 (rem a x)) (= 0 (rem b x)))] x)))", "user": "557673f3e4b05c286339e06c"}, {"problem": 66, "code": "(fn gcd [a b]\n  (loop [a a b b]\n    (if (zero? b) a\n      (recur b (mod a b)))))", "user": "5854d1c0e4b07779d468640a"}, {"problem": 66, "code": "(fn [a b]\n  (if (= a b)\n    a\n    (if (> a b)\n      (recur (- a b) b)\n      (recur a (- b a)))))", "user": "5918db70e4b09b4ee5954bbb"}, {"problem": 66, "code": "(fn gcd [a,b]\n    (let [mx (max a b)\n          mn (min a b)\n          qt (quot mx mn)\n          rm (rem mx mn)]\n      (if (= rm 0) mn (gcd mn rm))))", "user": "5933b736e4b072a2710fd05d"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (last\n    (filter\n      #(and (zero? (mod b %)) (zero? (mod a %)))\n      (range 1 (inc (min a b)))\n      )\n    )\n  )", "user": "59368efbe4b02506e01a297d"}, {"problem": 66, "code": "(fn [n m]\n    (loop [gcd 1 i 1]\n      (if (or (> i n) (> i m))\n        gcd\n        (if (and (= 0 (mod n i)) (= 0 (mod m i)))\n          (recur i (inc i))\n          (recur gcd (inc i))))))", "user": "59368ccae4b02506e01a297a"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond (> a b) (gcd (- a b) b)\n        (< a b) (gcd a (- b a))\n        :else a))", "user": "58ffaddee4b0438e51c2cffe"}, {"problem": 66, "code": "(fn [a b]\n  (if (< a b)\n    (recur b a)\n    (if (zero? b)\n      a\n      (recur b ( mod a b)))))", "user": "58db362be4b0a4d5acaab675"}, {"problem": 66, "code": "#(loop\n   [i (max %1 %2)]\n   (if\n     (or\n       (= 0 i)\n       (and\n         (= 0 (mod %1 i))\n         (= 0 (mod %2 i))))\n     i\n     (recur (dec i))))", "user": "58d2af83e4b03c36ff7e5907"}, {"problem": 66, "code": "(fn [num1 num2]\n  (loop [listy [], gcd 0, n 1, sm (+ (min num1 num2) 1)]\n    (if (= n sm)\n      gcd\n      (if (and (zero? (rem num1 n)) (zero? (rem num2 n)))\n        (recur (rest listy) n (inc n) sm)\n        (recur (rest listy) gcd (inc n) sm)))))", "user": "59369515e4b02506e01a297e"}, {"problem": 66, "code": "(fn [x y]\n  (loop [x1 x y1 y]\n    (if ( > x1 y1)\n      (if (and (= (rem x y1) 0) (= (rem y y1) 0))\n        y1\n        (recur x1 (dec y1)))\n      (if (and (= (rem y x1) 0) (= (rem x x1) 0))\n        x1\n        (recur (dec x1) y1)))))", "user": "59368ccae4b02506e01a2979"}, {"problem": 66, "code": "(fn [m n] (let [q (max m n)\n        cseq (range 1 (inc q))\n        s1 (map #(/ n %) cseq)\n        s2 (map #(/ m %) cseq)\n        s1-ints (filter integer? s1)\n        s2-ints (filter integer? s2)\n        s-ints (clojure.set/intersection (apply sorted-set s1-ints) (apply sorted-set s2-ints))]\n    (->> s-ints vec last))\n  )", "user": "59234753e4b0a390037439ef"}, {"problem": 66, "code": "(fn nod [a b]\n  (cond\n    (= a b) a\n    (< a b) (nod a (- b a))\n    :default (nod b (- a b))))", "user": "5523fce8e4b0882d96d091b4"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (if (== b 0)\n    a\n    (recur b (mod a b))))", "user": "58b18ba0e4b0ebc645576cfa"}, {"problem": 66, "code": "(fn gcd\n  [x1 x2]\n  (loop [v1 x1\n         v2 x2]\n    (let [moduls (mod v1 v2)\n          remainder (rem v1 v2)]\n      (case remainder\n        0 v2\n        1 remainder\n        v1 (recur v2 v1)\n        (recur v2 remainder)))))", "user": "5180af54e4b0e3fc13e244e9"}, {"problem": 66, "code": "#_(fn [a b]\n   (let [x (max a b) y (min a b)]\n     (if (zero? y) x (recur y (mod x y)))))\n\n(fn [a b]\n   (->> (range (min a b) 0 -1)\n        (some #(and (zero? (mod a %)) (zero? (mod b %)) %))))", "user": "5935b010e4b04f87174def55"}, {"problem": 66, "code": "(fn [n m]\n   (loop [min-value (min n m)]\n     (if (and (= 0 (rem n min-value  )) (= 0 (rem m min-value)))\n       min-value\n       (recur (dec min-value)))))", "user": "5913fde8e4b0163c97b36f13"}, {"problem": 66, "code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "user": "5931e498e4b072a2710fd024"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "59385840e4b02506e01a29c9"}, {"problem": 66, "code": "(fn [x y] \n  (let [a (max x y) b (min x y) c (- a b)]\n    (if (= (mod a c) (mod b c) 0)\n      c\n      (recur b c))))", "user": "593f95d8e4b069cdc2982be3"}, {"problem": 66, "code": "#(loop [a (max %1 %2)\n        b (min %1 %2)\n        r (rem a b)]\n   (if (= r 0)\n     b\n     (recur b r (rem b r))))", "user": "59251947e4b072a2710fce69"}, {"problem": 66, "code": "(fn gcd [a b] (if (= b 0) a (recur b (rem a b))))", "user": "58d1fe17e4b03c36ff7e58f5"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= (rem a b) 0) b (gcd b (rem a b))))", "user": "584d99c5e4b0b7285a6f4e42"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (cond\n   (or (= 0 a) (= 0 b)) 0\n   ( = a b) a\n   (> a b) (recur (- a b) b)\n   :else (recur a (- b a))))", "user": "592518e8e4b072a2710fce67"}, {"problem": 66, "code": "(fn gcd\n  [a d]\n  (if (= (rem a d) 0)\n    d\n    (gcd  d (rem a d))))", "user": "59390a35e4b02506e01a29f3"}, {"problem": 66, "code": "(fn [a b]\n  (apply max (filter (fn [x] (every? zero? [(mod a x)\n                                            (mod b x)])) (range 1 (inc (max a b))))))", "user": "53de7484e4b0d874e779ae35"}, {"problem": 66, "code": "(fn p66 [x y]\n  (if (= y 0) x\n      (p66 y (rem x y))))", "user": "59395adfe4b02506e01a29fb"}, {"problem": 66, "code": "#(when (and (pos? %1) (pos? %2))\n          (loop [n (min %1 %2)]\n            (if (and (zero? (rem %1 n))\n                     (zero? (rem %2 n)))\n              n\n              (recur (dec n)))))", "user": "59438419e4b060784b3b7929"}, {"problem": 66, "code": "(fn [a b] (last (filter #(and (zero? (mod a %)) (zero? (mod b %))) (range 1 (max a b)))))", "user": "585d9558e4b0f14aab7c879c"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [c (rem a b)]\n    (if (= 0 c)\n      b\n      (gcd b c)\n    )\n  )\n)", "user": "5943abb6e4b060784b3b792b"}, {"problem": 66, "code": "#(if (= 0 %2) % (recur %2 (mod % %2)))", "user": "593dfe60e4b069cdc2982bb1"}, {"problem": 66, "code": "(fn f [x y]\n  (loop [a (max x y),b (min x y)]\n    (if (= 0 (rem a b))\n      b\n      (recur b (rem a b ) ))))", "user": "593d6793e4b069cdc2982ba6"}, {"problem": 66, "code": "(fn [x y]\n  (let [a (min x y)\n        b (max x y)\n        c (rem b a)]\n  \t(if (= 0 c)\n    \ta\n    \t(rem a c))))", "user": "593744abe4b02506e01a299b"}, {"problem": 66, "code": "#(loop [a (max %1 %2)\n        b (min %1 %2)\n        r (rem a b)]\n   (if (= r 0)\n     b\n     (recur b r (rem b r))))", "user": "592518cde4b072a2710fce66"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "576186a5e4b0994c1922fb8e"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5938bae2e4b02506e01a29ea"}, {"problem": 66, "code": "(fn [x y]\n  (loop [n x\n         m y]\n    (if (= n m) n\n      (if (> n m)\n        (recur (- n m) m)\n        (recur n (- m n))))))", "user": "594bd637e4b07ddc2dafae41"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [ap (min a b)\n        bp (max a b)]\n    (if (zero? ap)\n      bp\n      (gcd (rem bp ap) ap))))", "user": "55216aa5e4b0882d96d09192"}, {"problem": 66, "code": "#(loop [a %1 b %2]\n   (cond (< a b) (recur b a)\n         (= 0 (mod a b)) b\n         :else (recur b (mod a b)))\n   )", "user": "594263cbe4b060784b3b790a"}, {"problem": 66, "code": "(fn get-greatest-common-divisor [a b] (if (zero? b) a (recur b (mod a b))))", "user": "594d4c43e4b07ddc2dafae86"}, {"problem": 66, "code": "(fn great [x y]\n  (let [a x b y]\n  \t(if (= 0 a) b \n    \t(if (= 0 b) a \n      \t\t(if (> a b) (great (mod a b) b) (great (mod b a) a)\n              )\n          )\n      )\n    )\n  )", "user": "5950f0bfe4b066ee0a44ae9f"}, {"problem": 66, "code": "(fn gcd [x y]\n  (if (= y 0)\n    x\n    (recur y (mod x y))))", "user": "5953bdb6e4b066ee0a44aeed"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0) a\n    (recur b (mod a b))))", "user": "594c0bd7e4b07ddc2dafae56"}, {"problem": 66, "code": "#(loop [n1 %1 n2 %2]\n   (if (= n1 n2)\n     n1\n     (recur (if (> n1 n2) (- n1 n2) n1)\n            (if (> n2 n1) (- n2 n1) n2))))", "user": "5956c6dae4b066ee0a44af61"}, {"problem": 66, "code": "(fn [x y]\n  (apply max (filter\n        #(and (= (mod x %) 0)\n              (= (mod y %) 0))\n        (range 1 (inc (min x y))))))", "user": "592334c7e4b0a390037439ee"}, {"problem": 66, "code": "(fn [a b] (last (filter #(= 0 (rem a %) (rem b %)) (range 1 (max a b)))))", "user": "5958cef6e4b066ee0a44af94"}, {"problem": 66, "code": "#(loop [a (max %1 %2)\n        b (min %1 %2)\n        r (rem a b)]\n   (if (= r 0)\n     b\n     (recur b r (rem b r))))", "user": "5948adffe4b07ddc2dafadc6"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "592519cfe4b072a2710fce6b"}, {"problem": 66, "code": "(fn GCD [a b]\n  (cond \n   (= a 0) b\n   (= b 0) a\n   :else (GCD b (mod a b))))", "user": "593910eae4b02506e01a29f4"}, {"problem": 66, "code": "(fn [x y]\n  (apply max (filter #(and (zero? (mod x %))\n                           (zero? (mod y %)))\n                     (range 1 (inc (min x y))))))", "user": "57262710e4b0c5bde472c120"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let* [q (quot a b)\n        r (- a (* b q))]\n        (if (= 0 r)\n          b\n          (recur b r))))", "user": "595a885be4b066ee0a44afc4"}, {"problem": 66, "code": "#(if (zero? %2) % (recur %2 (rem % %2)))", "user": "594cb88be4b07ddc2dafae6e"}, {"problem": 66, "code": "#(loop [a %1 b %2] (if (= b 0) a (recur b (mod a b))))", "user": "59473563e4b07ddc2dafad97"}, {"problem": 66, "code": "#(if (zero? %2) % (recur %2 (rem % %2)))", "user": "590088bfe4b0438e51c2d026"}, {"problem": 66, "code": "(fn [& a]\n     (loop [x (first (sort a)) y (last (sort a)) i (first (sort a))]\n       (if (= (mod y i) 0 (mod x i))\n         i\n         (recur x y (dec i))\n         )\n       )\n     )", "user": "59551e04e4b066ee0a44af20"}, {"problem": 66, "code": "(fn [a b]\n    (cond\n      (zero? a) b\n      (zero? b) a\n      (> a b) (recur (rem a b) b)\n      :else (recur (rem b a) a)))", "user": "595bbab7e4b066ee0a44afe0"}, {"problem": 66, "code": "#(loop [a %1 b %2]\n  (if (= a 0) b\n    (if (= b 0) a\n      (recur b (rem a b)))))", "user": "58ee84e5e4b056aecfd47dab"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "56c21eafe4b05cc29241ee7e"}, {"problem": 66, "code": "#(let [a (max % %2)\n       b (min % %2)\n       r (rem a b)]\n    (if (zero? r)\n      b\n      (recur b r)))", "user": "594880ade4b07ddc2dafadc2"}, {"problem": 66, "code": "(fn gcd [a b]\n        (if (zero? b)\n          a\n          (recur b (mod a b))))", "user": "58cf8f97e4b03c36ff7e58b7"}, {"problem": 66, "code": "(fn [x y] (loop [ma (max x y) mi (min x y) re (rem ma mi)] (if (= re 0) mi (recur mi re (rem mi re)) ) ) )", "user": "570e43d8e4b0b0fb43fd06eb"}, {"problem": 66, "code": "(fn [x y]\n\t(loop [gcd (int (min (/ (max x y) 2) x y))]\n\t\t(if (= (mod x gcd) (mod y gcd) 0)\n\t\t\tgcd\n\t\t\t(recur (dec gcd)))))", "user": "5961e8d0e4b066ee0a44b0a8"}, {"problem": 66, "code": "(fn greatest\n  [a b]\n  (if (> b a)\n    (greatest b a)\n    (if (= 0 b)\n      a\n      (greatest b (rem a b)))))", "user": "595bc925e4b066ee0a44afe2"}, {"problem": 66, "code": "(fn [n1 n2] (last (filter \n                  #(and (= (mod n1 %) 0) \n                        (= (mod n2 %) 0)) \n                  (map inc (range (min n1 n2))))))", "user": "58fc52cee4b0438e51c2cf95"}, {"problem": 66, "code": "(fn f [x y] (let [a (min x y) b (max x y) c (mod b a)] (if (= c 0) a (f a c))))", "user": "59419bdfe4b060784b3b78f7"}, {"problem": 66, "code": "(fn [a b]\n  (cond\n     (< a b) (recur b a)\n     (= (rem a b) 0) b\n     :else (recur b (rem a b))))", "user": "594bc16be4b07ddc2dafae39"}, {"problem": 66, "code": "#(some (fn [d] (when (= (mod % d) (mod %2 d) 0) d)) (range (min % %2) 0 -1))", "user": "59638af5e4b066ee0a44b0cc"}, {"problem": 66, "code": "#(loop [x (min %1 %2)] (if (and (= 0 (rem %1 x)) (= 0 (rem %2 x))) x (recur (dec x))))", "user": "595d224de4b066ee0a44b016"}, {"problem": 66, "code": ";(fn gcd [x y]\n;  (cond (> x y) (gcd y x)\n;        (= x y) x\n;        (< x y) (gcd x (- y x))))\n#(loop [x %1 y %2]\n  (cond (> x y) (recur y x)\n        (= x y) x\n        (< x y) (recur x (- y x))))", "user": "595fd721e4b066ee0a44b06e"}, {"problem": 66, "code": "#(if (= 0 %2) % (recur %2 (mod % %2)))", "user": "595eba88e4b066ee0a44b04e"}, {"problem": 66, "code": "(fn hcd [x y] (\n    cond \n      (> x y) (hcd (- x y) y)\n      (< x y) (hcd (- y x) x)\n      :equal x)\n  )", "user": "55e01f4ee4b050e68259b406"}, {"problem": 66, "code": "(fn [a b]\n  (loop \n   [[x & xs] (reverse (range 1 (inc (min a b))))]\n    (if \n     (or \n      (nil? x) \n      (= (mod a x) (mod b x) 0))\n     x\n     (recur xs))))", "user": "59497f51e4b07ddc2dafaddd"}, {"problem": 66, "code": "(fn gcd [n m]\n  (cond\n    (= m 0) n\n    :else (gcd m (mod n m))))", "user": "56078b7be4b08b23635d3181"}, {"problem": 66, "code": "(fn [a b] (first (filter #(and (zero? (mod a %)) (zero? (mod b %))) (range a 0 -1))))", "user": "55842bd7e4b05c286339e11c"}, {"problem": 66, "code": "(fn [a b] (if (= 0 b)\n            a  \n            (recur b (mod a b))))", "user": "58cbdc3be4b03c36ff7e5856"}, {"problem": 66, "code": "(fn[x y]\n      (first (filter (fn[z](and (= (rem x z) 0) (= (rem y z) 0) ))\n        (reverse (range 1 (inc (min x y)))))\n      )\n   )", "user": "59692530e4b069c0a1a197e4"}, {"problem": 66, "code": "(fn [a b] (some #(and (complement (nil? %)) %) (map #(if (and (= 0 (rem a %)) (= 0 (rem b %)))\n                                                   %) (#(reverse (range 1 (inc (min a b))))))))", "user": "591e0782e4b09b4ee5954c25"}, {"problem": 66, "code": "(fn gcd\n\t[a b]\n\t(if (= a b)\n\t\ta\n\t\t(if (> a b)\n\t\t\t(recur (- a b) b)\n\t\t\t(recur a (- b a)))))", "user": "5954eef0e4b066ee0a44af17"}, {"problem": 66, "code": "(fn [a b]\n  (apply max (filter #(and (zero? (rem a %))\n                     (zero? (rem b %))\n                     ) \n               (range 1 \n                      (inc (min a b))\n                      )\n               )\n       )\n  )", "user": "59073e0fe4b047aa04b19950"}, {"problem": 66, "code": "(fn [a b]\n  (last\n    (filter\n      #(and (zero? (mod b %)) (zero? (mod a %)))\n      (range 1 (inc (min a b)))\n      )\n    )\n  )", "user": "55ec04c4e4b0121d4835fdc1"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (rem a b))))", "user": "59636ec9e4b066ee0a44b0c8"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (if (= 0 b)\n    a\n    (gcd b (mod a b))))", "user": "59636cc2e4b066ee0a44b0c7"}, {"problem": 66, "code": "#(let [x     (if (< %1 %2) %2 %1)\n       y     (if (= x  %1) %2 %1)\n       nums  (range 1 (inc x))\n       all-x (reduce\n              (fn [result part]\n                (if (not (ratio? (/ x part)))\n                  (conj result part)\n                  result))\n              [] nums)]\n   (loop [tail all-x\n          head (last tail)]\n     (if (not (ratio? (/ y head))) head\n       (recur (butlast tail) (last tail)))))", "user": "590b8607e4b047aa04b199db"}, {"problem": 66, "code": "(fn gcd [a b]\n  (loop [x (min a b)]\n    (if (and (= (mod a x) 0) (= (mod b x) 0))\n      x\n      (recur (dec x)))))", "user": "590253e3e4b0438e51c2d055"}, {"problem": 66, "code": "(fn gcd [a b] \n  (if (zero? (mod a b)) b\n    (gcd b (mod a b))))", "user": "58866b4fe4b0f1effa3b76d4"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5972fcf6e4b01722bebd4c92"}, {"problem": 66, "code": "(fn a66[a b]\n  \"Euclids algo\"\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "56163cc1e4b06b1bb21829ff"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? a) b (if (zero? b) a\n  (gcd (mod (max a b) (min a b)) (min a b)))))", "user": "57ffd1a9e4b0a837a8b30c2a"}, {"problem": 66, "code": "(fn [a b] (last (filter #(= (mod a %) (mod b %) 0) (range 1 (inc (min a b)) ))))", "user": "596f6683e4b069c0a1a19877"}, {"problem": 66, "code": "#(if (= 0 %2) %1 (recur %2 (mod %1 %2)))", "user": "4fb1d7ace4b081705acca281"}, {"problem": 66, "code": "(fn [a b]\n  (apply max\n         (clojure.set/intersection (reduce #(if (= 0 (mod a %2))\n                                              (conj %1 %2)\n                                              %1)\n                                           #{}\n                                           (range 1 (inc a)))\n                                   (reduce #(if (= 0 (mod b %2))\n                                              (conj %1 %2)\n                                              %1)\n                                           #{}\n                                           (range 1 (inc b))))))", "user": "595fd77ce4b066ee0a44b06f"}, {"problem": 66, "code": "(fn [a b]\n  (let [r \n        (->>\n         (sort [a b])\n         (last)\n         (inc)\n         (range 1))\n        x (set (filter #(= 0 (rem a %)) r))\n        y (set (filter #(= 0 (rem b %)) r))]\n    (last (sort (clojure.set/intersection x y)))))", "user": "5935151ee4b072a2710fd084"}, {"problem": 66, "code": "(fn\n  [a b]\n  (let [mn (min a b)\n        mx (max a b)\n        candidates (range 1 (inc mn))]\n    (let [divisors (filter #(and (= 0 (mod mn %))\n                                 (= 0 (mod mx %))) candidates)]\n      (apply max divisors))))", "user": "5398d042e4b0b51d73faaf00"}, {"problem": 66, "code": "(fn [a b]\n   (loop [div (min a b)]\n     (if (= 0 (+ (rem a div) (rem b div)))\n       div\n       (recur (dec div)))))", "user": "5978c844e4b01722bebd4d18"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "527ba29de4b03e8d9a4a7594"}, {"problem": 66, "code": "(fn me [a b] (loop [cur (min a b)]\n            (if\n              (and\n               (= 0 (mod a cur))\n               (= 0 (mod b cur))\n              )\n              cur\n              (recur (dec cur))\n            )\n          )\n)", "user": "59804b60e4b021a7a535fdcf"}, {"problem": 66, "code": "#(loop [[a b] (sort %&)]\n  (if (zero? a)\n    b\n    (recur [(mod b a) a])))", "user": "597dcb0ce4b0dbe32238d0a2"}, {"problem": 66, "code": "#((fn f [x y bigger]\n     (if (or (= bigger 0) (and  (= (mod x bigger) 0 ) (= (mod y bigger) 0 )) false)\n       bigger\n       (recur x y (dec bigger))\n       )\n     ) % %2 (if (<= % %2) % %2))", "user": "583f1533e4b089d5ab817dc8"}, {"problem": 66, "code": ";; TODO: Slow, not DRY. See Euclid.\n(fn gcd [x y]\n  (apply max\n   (clojure.set/intersection\n    (set (filter (fn [d] (when (zero? (mod x d)) d) ) (reverse (range 1 (inc x)))))\n    (set (filter (fn [d] (when (zero? (mod y d)) d) ) (reverse (range 1 (inc y))))))))", "user": "5980f91ae4b021a7a535fddd"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (< a b) (gcd b a)\n      (if (= b 0) a\n          (gcd b (mod a b)))))", "user": "58fc92c5e4b0438e51c2cf9a"}, {"problem": 66, "code": "#(loop [a %1 b %2] (if (zero? b) a (recur b (rem a b))))", "user": "5054d243e4b0b1b9d1860eb5"}, {"problem": 66, "code": "(fn [a b]\n  (let [get-divisor (fn [n] (into #{}\n                              (filter #(zero? (rem n %))\n                                      (range 1 (inc n)))\n                              ))\n        a-divisor (get-divisor a)\n        b-divisor (get-divisor b)\n        commom-divisor (clojure.set/intersection a-divisor b-divisor)]\n    (apply max commom-divisor)))", "user": "58b9922ce4b0888cdc949cd0"}, {"problem": 66, "code": "#(.gcd (biginteger %1) (biginteger %2))", "user": "598085e6e4b021a7a535fdd3"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n   (= a 0) b\n   (= b 0) a\n   :else (recur (mod b a) a)))", "user": "5884f377e4b0f1effa3b76a8"}, {"problem": 66, "code": "(fn eucl [a b] (let [h (max a b) l (min a b) q (mod h l)] (if (= q 0) l (eucl l q))))", "user": "59468de7e4b07ddc2dafad88"}, {"problem": 66, "code": "(fn [a b]\n  (if (> b a)\n    (recur b a) ; make sure we always have a > b\n    (if (= 0 b)\n      a\n      (recur b (rem a b)))))", "user": "5989ee61e4b021a7a535fed7"}, {"problem": 66, "code": "(fn [a b]\n  (let [dv (fn [x] (set (filter #(zero? (rem x %)) (range 1 (inc x)))))]\n(apply max (clojure.set/intersection (dv a) (dv b)))))", "user": "5964f9b0e4b069c0a1a19778"}, {"problem": 66, "code": "(fn [x y] (let [op (if (> x y) (range 1 x) (range 1 y))] \n            (last (remove #(or (not= 0 (rem x %)) (not= 0 (rem y %))) op))))", "user": "593ab583e4b069cdc2982b57"}, {"problem": 66, "code": "(fn foo\n  [max min]\n  (last (vec (for [x (range 1 (+ 1(if (> min max) max min))) :when (= 0 (rem max x)) :when (= 0 (rem min x))] x))))", "user": "598d0dc3e4b02b9968b84d18"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))))", "user": "598ab445e4b02b9968b84ce0"}, {"problem": 66, "code": "(fn [x y] (loop [n (min x y)]\n            (if (= 0 (mod x n) (mod y n))\n              n\n              (recur (dec n)))))", "user": "597f8984e4b0dbe32238d0bf"}, {"problem": 66, "code": "#(let[res (/ % %2)] (/ % (if(ratio? res) (numerator (/ % %2)) res)))", "user": "5971763fe4b01722bebd4c72"}, {"problem": 66, "code": "(fn comm [x y] (last (for [i (range 1 (max x y)) :when (= 0 (rem x i))\n                             :when (= 0 (rem y i))] i)))", "user": "598d22b1e4b02b9968b84d1a"}, {"problem": 66, "code": "(fn [val1 val2]\n  (loop [a val1 b val2]\n    (if (= a b)\n      a\n      (if (> a b)\n        (recur (- a b) b)\n        (recur a (- b a))))))", "user": "56014f55e4b04bb52996e184"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "598af379e4b02b9968b84ce6"}, {"problem": 66, "code": "#(loop [a %1 b %2] (if (= 0 b) a (recur b (mod a b))))", "user": "5990fcb9e4b0866487ed0d5b"}, {"problem": 66, "code": "(fn [a b]\n  (let [big (max a b) small (min a b)]\n        (reduce (fn [acc v] (if (and (zero? (mod big acc)) (zero? (mod small acc))) acc v))\n            (range big 0 -1))))", "user": "59922473e4b0866487ed0d72"}, {"problem": 66, "code": "(fn gcd [firstArg, secondArg]\n  (loop [A firstArg\n         B secondArg]\n    (cond\n      (= A 0) B\n      (= B 0) A\n      :else (recur B (rem A B)))))", "user": "59971e2de4b07157cc8daacc"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0)\n    a (recur b (mod a b))))", "user": "5996cce8e4b07157cc8daab9"}, {"problem": 66, "code": "(fn gcd [a b]\n    (if (= b 0)\n        a\n        (recur b (rem a b))))", "user": "52faf67ce4b047fd55837005"}, {"problem": 66, "code": "(fn gdc\n\t[x y]\n\t(if (= 0 y)\n\t\tx\n\t\t(recur y (mod x y))\n\t)\n)", "user": "55e46caae4b050e68259b451"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n   (= 0 a) b\n   (= 0 b) a\n   (= a b) a\n   (> a b) (gcd (- a b) b)\n   :else (gcd (- b a) a)))", "user": "597a4277e4b02382a38ad1e2"}, {"problem": 66, "code": "(fn gcd\n  [x y]\n  (let [min-n (min x y)]\n    (apply max\n           (filter #(and\n                      (= 0 (mod x %))\n                      (= 0 (mod y %)))\n                   (range 1 (inc min-n))))))", "user": "594266cfe4b060784b3b790b"}, {"problem": 66, "code": "(fn [x y]\n  (loop [x x y y]\n     (if (= y 0) x\n        (recur y (mod x y))\n    )\n  ))", "user": "5996b419e4b07157cc8daab5"}, {"problem": 66, "code": "(fn   [a b]\n  (if (= a b)\n    a\n    (if (< a b)\n      (recur a (- b a))\n      (recur b (- a b)))))", "user": "59971dcbe4b07157cc8daacb"}, {"problem": 66, "code": "#(->> (iterate (fn [[a b]] [(mod b a) a]) [% %2])\n      (some (fn [[a b]] (and (zero? a) b))))", "user": "5960a1a6e4b066ee0a44b08e"}, {"problem": 66, "code": "(fn gcd [x1 x2]\n  (if (= 0 x2) x1\n    (gcd x2 (mod x1 x2))))", "user": "58db3c5ae4b0a4d5acaab677"}, {"problem": 66, "code": "(fn gcd [x y]\n  (loop [larger (max x y)\n         smaller (min x y)\n         remainder (rem larger smaller)]\n    (if (zero? remainder)\n        smaller\n        (recur smaller remainder (rem smaller remainder)))))", "user": "597f8c93e4b0dbe32238d0c1"}, {"problem": 66, "code": "#(loop [a %1\n        b %2]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "user": "59a24c92e4b066c664927d20"}, {"problem": 66, "code": "(fn [x y] (if (zero? y) x (recur y (rem x y))))", "user": "596d630ae4b069c0a1a19846"}, {"problem": 66, "code": "(fn [num1 num2]\n  (let [big   (max num1 num2)\n        small (min num1 num2)]\n    (loop [num small]\n      (let [bigMod   (mod big   num)\n            smallMod (mod small num)]\n        (if (= 0 bigMod smallMod)\n          num\n          (recur (dec num))\n)))))", "user": "5954cea2e4b066ee0a44af0a"}, {"problem": 66, "code": "(fn [x y]\n  (if (= 0 (mod (max x y) (min x y)))\n    (min x y)\n    (recur y (mod (max x y) (min x y)))))", "user": "5926c254e4b072a2710fceb8"}, {"problem": 66, "code": "(fn [x y]\n  (let [divisor? #(= 0 (rem %1 %2))\n        max-div (fn [x, y, d]\n                  (if (= 1 d)\n                    1\n                    (if (and (divisor? x d) (divisor? y d))\n                      d\n                      (recur x y (dec d)))))]\n    (max-div x y (min x y))))", "user": "5989e080e4b021a7a535fed6"}, {"problem": 66, "code": "(fn gcd [m n]\n  (if (= 0 n) \n    m\n    (gcd n (mod m n))))", "user": "56e0f485e4b03a7c14b85a1c"}, {"problem": 66, "code": "(fn gcd [a b]\n   (let [rr (rem a b)]\n     (cond (= 0 rr) b\n           :else (gcd b rr))))", "user": "59a39440e4b066c664927d40"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b) a\n    (recur b (rem a b))))", "user": "59944e73e4b0b211ea3aaac2"}, {"problem": 66, "code": "(fn [a b] \n  (if (zero? b) \n    a \n    (recur b (mod a b))))", "user": "59a72effe4b066c664927d94"}, {"problem": 66, "code": "#(loop [a (max % %2 ) b (min % %2) ]\n   (if (= 0 (mod a b) )\n     b\n     (recur (max (- a b) b ) (min (- a b ) b ) \n            )\n     )\n    )", "user": "57bffed6e4b05aa3c4741c89"}, {"problem": 66, "code": "(fn [a b]\r\n  (loop [x (min a b)]\r\n    (let [r (rem a x)\r\n          s (rem b x)]\r\n      (if (and (zero? r) (zero? s))\r\n        x\r\n        (recur (dec x))))))", "user": "56f514cee4b046a417f92068"}, {"problem": 66, "code": "(fn [x y] (if (zero? y) x (recur y (mod x y))))", "user": "598ad666e4b02b9968b84ce1"}, {"problem": 66, "code": "(fn [a b]\n\t(if (zero? b)\n    \ta\n      \t(recur b (rem a b))\n    )\n)", "user": "5991d2fae4b0866487ed0d68"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "59afb004e4b0e1f4e384c8bc"}, {"problem": 66, "code": "(fn [a b] \n  (if (zero? b)\n          a\n          (recur b (mod a b))))", "user": "59abbd68e4b08cbb53654da3"}, {"problem": 66, "code": "(fn gcd [x y]\n  (if (= y 0)\n    x\n    (gcd y (rem x y))))", "user": "58fed70de4b0438e51c2cfdd"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))))", "user": "59b1c2eae4b0e1f4e384c8ec"}, {"problem": 66, "code": "(fn ggt [x y] \n  (if (= y 0)\n    x\n    (ggt y (mod x y))))", "user": "59089229e4b047aa04b1997c"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "59ac0965e4b08cbb53654da6"}, {"problem": 66, "code": "(fn gcd [aa bb] \n (loop [a (max aa bb) b (min aa bb)]\n   (let [r (rem a b)]\n     (if (= 0 r) b\n     (recur b r))\n)))", "user": "59a0262ee4b0871e7608b82d"}, {"problem": 66, "code": "(fn [& nums]\n  (let [[smaller larger] (sort nums)]\n    (loop [smaller smaller larger larger]\n      (if (= 0 (mod larger smaller))\n        smaller\n        (recur (mod larger smaller) smaller)))))", "user": "576c2ecae4b07c67f59d1fbb"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [_a (max a b) _b (min a b) r (mod _a _b)]\n    (if (= r 0)\n      _b\n      (recur _b r)\n      )))", "user": "598229d6e4b021a7a535fdfb"}, {"problem": 66, "code": "(fn [a b]\n  (let [m (min a b)]\n    (loop [i m]\n      (if (and (zero? (mod a i)) (zero? (mod b i)))\n        i\n        (recur (dec i))))))", "user": "571543bbe4b07c98581c3ad4"}, {"problem": 66, "code": "(fn [& ns]\n  (loop [x (apply max ns)]\n    (if (every? #(zero? (mod % x)) ns)\n      x\n      (recur (dec x)))))", "user": "51dafedee4b09f6bc204eee2"}, {"problem": 66, "code": "(fn gcd [n1 n2]\n  (if (zero? n2)\n    n1\n    (recur n2 (mod n1 n2))))", "user": "5888b75fe4b0f1effa3b771b"}, {"problem": 66, "code": "(fn [a b] (first (filter #(and (= (rem a %) 0) (= (rem b %) 0)) (range (min a b) 0 -1))))", "user": "59adec09e4b0e1f4e384c897"}, {"problem": 66, "code": "(fn[a b]\n        (cond\n         (< a b)\n         (recur a (- b a))\n\n         (< b a)\n         (recur (- a b) b)\n         \n         :else\n         a))", "user": "57e6f90de4b0bfb2137f5af6"}, {"problem": 66, "code": "(fn gcd [a b] (if (= a 0) b (if (= b 0) a (gcd b (rem a b)))))", "user": "597fa3fbe4b021a7a535fdbf"}, {"problem": 66, "code": "(fn f [a b]\n  (reduce (fn [acc n]\n            (if (and (integer? (/ a n)) (integer? (/ b n)))\n              n\n              acc)\n            ) 1 (range 1 (inc (min a b)))))", "user": "55b28b57e4b01b9910ae296c"}, {"problem": 66, "code": "(fn [a b] (->> (max a b)\n               range\n               reverse\n               (filter #(= 0\n                            (mod a %)\n                            (mod b %)))\n               first))", "user": "53ff602fe4b0de5c418485ff"}, {"problem": 66, "code": "#(loop [x (first(sort(conj '() %1 %2)))]\n        (if (and (= 0 (rem %1 x)) (= 0 (rem %2 x)))\n            x\n            (recur (dec x))))", "user": "59bac5c9e4b0a024fb6ae3ed"}, {"problem": 66, "code": "#(loop [i (min %1 %2)]\n   \t(if (and (integer? (/ %1 i)) (integer? (/%2 i)))\n      i\n      (recur (dec i))))", "user": "59b554cee4b05c620303ca0f"}, {"problem": 66, "code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "user": "597768d0e4b01722bebd4cee"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (if (= 0 a)\n    b\n    (gcd (mod b a) a)))", "user": "59b62f8de4b05c620303ca1f"}, {"problem": 66, "code": "#(apply max \n  (filter \n    (fn [a] (and (zero? (rem %1 a)) (zero? (rem %2 a))))\n    (range 1 (inc (min %1 %2)))))", "user": "50928084e4b097f48cc3856c"}, {"problem": 66, "code": "(fn my-gcd [first second] \n  (if (= second 0) \n    first \n  (my-gcd second (mod first second))))", "user": "59afe4bae4b0e1f4e384c8c0"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (mod a b))))", "user": "59be62d5e4b0a024fb6ae435"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0) a\n      (recur b (mod a b))))", "user": "5845531de4b089d5ab817e63"}, {"problem": 66, "code": "#(let [a %\n\n        b %2] \n\n    \n\n    (apply max (clojure.set/intersection \n\n                 (set ((fn [xx] (filter (fn [x] (= (rem xx x) 0)) (range 1 (+ xx 1)))) a)) \n\n                 (set ((fn [xx] (filter (fn [x] (= (rem xx x) 0)) (range 1 (+ xx 1)))) b)))))", "user": "54c98ac0e4b045293a27f679"}, {"problem": 66, "code": "(fn [x y]\n  (let [factors #(remove nil?\n                         (for [i (range 1 (inc %))]\n                           (when (= 0 (mod % i)) i)))\n        [x-factors y-factors] (map factors [x y])]\n    (apply max (seq (clojure.set/intersection (set x-factors) (set y-factors))))))", "user": "54058af3e4b0addc1aec6669"}, {"problem": 66, "code": "(fn [x y] (if (zero? y) x (recur y (rem x y))))", "user": "592fa9f8e4b072a2710fcfcb"}, {"problem": 66, "code": "(fn gcd \n  [a b] \n  (let [big (max a b) \n        small (min a b) \n        remainder (mod big small)] \n    (if (== remainder 0) \n      small \n      (gcd small remainder))))", "user": "59874ff6e4b021a7a535fea1"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "59358f74e4b04f87174def52"}, {"problem": 66, "code": "#(if (= 0 %2) %1 (recur %2 (rem %1 %2)))", "user": "563c6ebae4b0bfe05bf11834"}, {"problem": 66, "code": "(fn gcd [a b] \n  (if (zero? b) \n    a \n    (gcd b (mod a b))))", "user": "59c94a69e4b0a024fb6ae576"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [smaller (min a b)\n       \tlarger (max a b)]\n    (first (filter #(= 0 (mod larger %) (mod smaller %))\n                   (range smaller 0 -1)))))", "user": "59cc4d5ee4b0a024fb6ae5d0"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (cond\n   (> b a) (recur b a)\n   (= b 0) a\n   :else (recur b (- a b))\n   ))", "user": "59c7c2cde4b0a024fb6ae54b"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [x (min a b)]\n    (loop [i x]\n      (if (and (= (rem a i) 0) (= (rem b i) 0))\n        i\n        (recur (dec i))))))", "user": "572010a4e4b0c5bde472c08c"}, {"problem": 66, "code": "(fn [a b]\n  (let [hi (max a b)\n        lo (if (= hi a) b a)]\n    (->> (range 1 (inc lo))\n         (filter #(and \n                   (= 0 (rem hi %))\n                   (= 0 (rem lo %))\n                   )\n                 )\n         (apply max)\n     )\n    )\n  )", "user": "55fd0d19e4b0f488688e067a"}, {"problem": 66, "code": "#(apply max \n   (filter \n     (fn [x]\n       (and \n        (zero? (rem %1 x)) \n        (zero? (rem %2 x))))       \n    (range 1 (inc (min %1 %2)))))", "user": "51f38193e4b0fca5e8b48226"}, {"problem": 66, "code": "(fn s [a b] \n  (if (= 0 (Math/abs (- a b)))\n    (if (< a b) a b)\n    (s (if (< a b) a b) (Math/abs (- a b)))))\n\n;(fn g [i j] (if (> i j) i j))\n\n;(fn l [k l] (if (< k l) k l))", "user": "594a7ed1e4b07ddc2dafae02"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "57fe7d7ce4b0d3187e9009d0"}, {"problem": 66, "code": "(fn [a b]\n  (let [remainder (rem a b)]\n    (if (zero? remainder)\n      b\n      (recur b remainder))))", "user": "59d9186be4b0ef0a1e9b5c50"}, {"problem": 66, "code": "#(loop[a (if (> %1 %2)%1 %2) b (if (> %1 %2)%2 %1)]\n   (if (= b 0) a\n    (recur b (mod a b))))\n     \n\n;#(loop[a %1 b %2]\n;   (if (= b 0) a\n     ;(if(= a 0)b\n ;      (if (> a b) (recur b (mod a b))\n ;        (recur a (mod b a)))))", "user": "59c77511e4b0a024fb6ae545"}, {"problem": 66, "code": "(fn [a b] (loop [a a b b] (if (zero? b) a (recur b (rem a b)))))", "user": "59a31c55e4b066c664927d34"}, {"problem": 66, "code": "#(loop [a %1 b %2]\n   (if (zero? b) a (recur b (mod a b))))", "user": "59ddae03e4b01968742fed65"}, {"problem": 66, "code": "(fn [x y] \n  (let [m (max x y)\n        n (min x y)\n        r (/ m n)]\n    (if (ratio? r)\n      (/ m (numerator r))\n      n)))", "user": "59cf4013e4b0ef0a1e9b5b68"}, {"problem": 66, "code": "(fn [a b] ((fn [gcd curr k] (if (> curr k) gcd (recur (if (and (= (rem a curr) 0) (= (rem b curr) 0)) curr gcd) (inc curr) k))) 1 1 (if (> a b) b a)))", "user": "59cf6fbce4b0ef0a1e9b5b6c"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n   (= a b)\n   a\n   (> a b)\n   (recur (- a b) b)\n   (> b a)\n   (recur a (- b a))))", "user": "559057c4e4b027778923766e"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (->>\n    (iterate (fn [[a b]] [b (mod a b)]) [(max a b) (min a b)])\n    (drop-while (fn [[a b]] (not= b 0)))\n    first\n    first))", "user": "59e0111ae4b08badc2a0c4e4"}, {"problem": 66, "code": "(fn \n  [a b] \n  (first (for [i (take (max a b) (iterate dec (max a b)))\n               :when (and (= 0 (mod a i)) (= 0 (mod b i)))]\n           i)))", "user": "59e18b9be4b08badc2a0c50f"}, {"problem": 66, "code": "(fn gcd [& args]\n  (let [sorted (sort > args)]\n    (if (= 0 (second sorted))\n      (first sorted)\n      (gcd (second sorted) (mod (first sorted) (second sorted)))\n      )\n    )\n  )", "user": "59d75e36e4b0ef0a1e9b5c32"}, {"problem": 66, "code": "(fn gcd\n \n  [a b]\n  (last\n    (filter\n      (fn [x](and (zero? (mod a x)) (zero? (mod b x))))\n      (range  1 (min (inc a) (inc b))))))", "user": "59e12c94e4b08badc2a0c509"}, {"problem": 66, "code": "#(if (zero? %2) %1 (recur %2 (rem %1 %2)))", "user": "59e0f38ae4b08badc2a0c500"}, {"problem": 66, "code": "(fn [x y]\n    (if (< x y)\n    (last\n      (for [i (range 1 y 1)\n            :when (and (= (rem x i) 0) (= (rem y i) 0)) ]\n        i))\n    (last\n      (for [i (range 1 x 1)\n            :when (and (= (rem x i) 0) (= (rem y i) 0))]\n        i))))", "user": "59deba46e4b01968742fed7f"}, {"problem": 66, "code": "(fn gcd [fst sec] (if (zero? sec) fst (recur sec (mod fst sec))))", "user": "59dd38a8e4b0a0ac046f2503"}, {"problem": 66, "code": "#(loop [i (min % %2)] (if (some ratio? (list (/ % i) (/ %2 i))) (recur (dec i)) i))", "user": "59c734e3e4b0a024fb6ae53f"}, {"problem": 66, "code": "(fn gcd\n \n  [a b]\n  (last\n    (filter\n      (fn [x](and (zero? (mod a x)) (zero? (mod b x))))\n      (range  1 (min (inc a) (inc b))))))", "user": "59e56c75e4b08badc2a0c556"}, {"problem": 66, "code": "(fn [a b];arguments\n  (let[biggestNumber;first local variable\n       (if (< a b)\n         b ;true, assign b\n         ;else, assign a\n         a)\n       possiblesMaxDivisors;second local variable\n       (reverse (range 1 (inc biggestNumber)))]\n    (first (filter #(and (= 0 (rem a %)) (= 0 (rem b %))) possiblesMaxDivisors))))", "user": "59e63a2ce4b08badc2a0c569"}, {"problem": 66, "code": "#(loop [a (max %1 %2)\n        b (min %1 %2)\n        r (rem a b)]\n   (if (= r 0)\n     b\n     (recur b r (rem b r))))", "user": "5839f079e4b089d5ab817d48"}, {"problem": 66, "code": "#(loop [a %1 b %2]\n   (cond\n    (< a b) (recur b a)\n    (zero? b) a\n    :else (recur b (mod a b))))", "user": "58cfbd7ae4b03c36ff7e58ba"}, {"problem": 66, "code": "#(loop [a (max %1 %2)\n        b (min %1 %2)\n        r (rem a b)]\n   (if (= r 0)\n     b\n     (recur b r (rem b r))))", "user": "59e62655e4b08badc2a0c568"}, {"problem": 66, "code": "(fn  [a b]\n  (cond\n    (< a b) (recur a (- b a))\n    (> a b) (recur (- a b) b)\n    :else a))", "user": "59e55cc8e4b08badc2a0c555"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (if (< b a)\n    (last (filter #(and (zero? (rem a %)) (zero? (rem b %))) (remove #(= 0 %) (range (+ 1 b)))))\n    (last (filter #(and (zero? (rem a %)) (zero? (rem b %))) (remove #(= 0 %) (range (+ 1 a)))))))", "user": "59e778aae4b0249b72820716"}, {"problem": 66, "code": "(fn \n  [x y]\n  (cond (zero? x) y\n        (zero? y) x\n        (> x y) (recur (rem x y) y)\n        (< x y) (recur x (rem y x))\n        :else x))", "user": "59dd3930e4b0a0ac046f2504"}, {"problem": 66, "code": "(fn Greatest-Common-Divisor\n  [a b]\n  (apply max (map (fn [n]\n              (if (and (= (mod a n) 0) (= (mod b n) 0))\n                n\n                0))(range 1 (+ (min a b) 1)))))", "user": "59e14ee3e4b08badc2a0c50c"}, {"problem": 66, "code": "#(loop [m %1 n %2] (if (zero? n) m (recur n (rem m n))))", "user": "572de985e4b0cd1946bd0f7c"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (->>\n    (range 1 (inc (min a b)))\n    (filter (fn [x] (and (zero? (mod b x)) (zero? (mod a x)))))\n    last))", "user": "59e8fef3e4b0249b72820743"}, {"problem": 66, "code": "(fn gcd\n  [u v]\n  (if (= v 0) u\n              (gcd v (mod u v))))", "user": "59e4e3cbe4b08badc2a0c54a"}, {"problem": 66, "code": "(fn my-gdc [num1 num2]\n  (loop [temp1 num1 temp2 num2]\n    (if (= temp2 0) temp1 (recur temp2 (rem temp1 temp2)))))", "user": "59dd387be4b0a0ac046f2502"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "59e9f03be4b0249b72820752"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "59ea287ee4b0249b72820760"}, {"problem": 66, "code": "(fn gcd* [a b]\n  (cond\n    (< a b) (recur a (- b a))\n    (> a b) (recur (- a b) b)\n    :else a))", "user": "59e95cafe4b0249b7282074b"}, {"problem": 66, "code": "(fn gcd \n  [a b] \n  (if (zero? b) \n    a \n    (recur b (mod a b))))", "user": "59e68254e4b0249b728206fc"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n   (= a b) a\n   (> a b) (recur (- a b) b)\n   :else (recur a (- b a))))", "user": "59ea85e4e4b0249b72820767"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "59dfd369e4b08badc2a0c4dd"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (first (for [i (take (max a b) (iterate dec (max a b)))\n               :when (and (= 0 (mod a i)) (= 0 (mod b i)))]\n           i)))", "user": "59dd387ae4b0a0ac046f2501"}, {"problem": 66, "code": "(fn gcd [a b]\n    (if (zero? b)\n        a\n        (gcd b (mod a b))))", "user": "5777cffae4b0979f89651651"}, {"problem": 66, "code": "(fn [a b]\n    (if (zero? b) a (recur b (mod a b))))", "user": "5957cc41e4b066ee0a44af76"}, {"problem": 66, "code": "(fn [a b]\n (if (zero? b) \n   a\n   (recur b (mod a b))))", "user": "59ac559ee4b00adcf69795d2"}, {"problem": 66, "code": "(fn [a b]\n  (cond (= a 0) b\n        (= b 0) a\n        :else (recur b (rem a b))))", "user": "59eb63e3e4b0249b7282077c"}, {"problem": 66, "code": "(fn gcd* [a b]\n  (cond\n    (< a b) (recur a (- b a))\n    (> a b) (recur (- a b) b)\n    :else a))", "user": "59ed01ede4b0249b7282079a"}, {"problem": 66, "code": "(fn [elm1 elm2]\n  (cond\n    (zero? elm1)\n    elm2\n    (zero? elm2)\n    elm1\n    :else\n    (recur elm2 (mod elm1 elm2))))", "user": "5984e7dee4b021a7a535fe43"}, {"problem": 66, "code": "(fn\n  [a b]\n  (if (zero? b) a (recur b (rem a b)))\n)", "user": "55a24698e4b0acc240e31523"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "59ea0944e4b0249b72820758"}, {"problem": 66, "code": "(fn [x y]\n  (loop [a x b y]\n  (if (= a b)\n    a\n  (let [mn (min a b )\n        mx (max a b)\n        d  (- mx mn)]\n    (recur mn d)))))", "user": "57ed8315e4b0bfb2137f5b9a"}, {"problem": 66, "code": "(fn\n  [a b]\n  (cond\n   (or (= 0 a) (= 0 b)) 0\n   ( = a b) a\n   (> a b) (recur (- a b) b)\n   :else (recur a (- b a))))", "user": "59e8cd8be4b0249b72820739"}, {"problem": 66, "code": "(fn [a b] \n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "user": "59c76402e4b0a024fb6ae542"}, {"problem": 66, "code": "(fn [x y]\n  (->> [x y]\n       (iterate (fn [[a b]] [b (rem a b)]))\n       (map second)\n       (take-while #(> % 0))\n       last))", "user": "566e87cfe4b0a866af6896dc"}, {"problem": 66, "code": "#(if (= %1 0) %2\n     (recur (rem %2 %1) %1))", "user": "59ef6cfae4b0966464fe6a32"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0) a (gcd b (mod a b))))", "user": "59f78b49e4b0ca45a743a30e"}, {"problem": 66, "code": "(fn gcd [a b] (if (= a b) a (gcd (Math/abs (- a b)) (min a b))))", "user": "59c8ffe6e4b0a024fb6ae56c"}, {"problem": 66, "code": "(fn largest-divisor [value1 value2]\n   (let [largest-value (max value1 value2)\n         smallest-value (min value1 value2)]\n     (loop [divisor smallest-value]\n       (if (and (integer? (/ largest-value divisor))\n                (integer? (/ smallest-value divisor)))\n         divisor\n         (recur (dec divisor))))))", "user": "59f192e0e4b0966464fe6a5e"}, {"problem": 66, "code": "(fn [x y]\n (let [end (max x y)]\n  (loop [rs (range 1 end) result 1]\n   (if (empty? rs)\n    result\n    (let [n (first rs) rrs (rest rs)]\n     (if (and (zero? (mod x n)) \n              (zero? (mod y n)))\n      (recur rrs n)\n      (recur rrs result)))))))", "user": "57eaf869e4b0bfb2137f5b56"}, {"problem": 66, "code": "(fn __ ([a b] (__ 1 2 (min a b) (max a b)))\n([best try lo hi]\n       (if (> try lo) \n         best\n         (if (= (+ (mod lo try) (mod hi try)) 0)\n           (recur (* try best) try (/ lo try) (/ hi try))\n           (recur best (inc try) lo hi))\n       )  \n  )\n)", "user": "55916764e4b0604b3f94d57b"}, {"problem": 66, "code": "#(/ (min %1 %2) (numerator (/ (min %1 %2) (max %1 %2))))", "user": "59f90e6ae4b0ca45a743a337"}, {"problem": 66, "code": "(fn [num1 num2] \n  (let [f (fn [smallest largest] \n            (first (for [x (reverse (take smallest (iterate inc 1))) \n                         :when (and (integer? (/ largest x)) (integer? (/ smallest x)))] x)))] \n    (if (< num1 num2) \n      (f num1 num2) \n      (f num2 num1))))", "user": "59fa107ce4b0ca45a743a353"}, {"problem": 66, "code": "(fn [num1 num2]\n   (let [lista1 (reduce (fn [lista x]\n                          (if (= (mod num1 x) 0)\n                            (conj lista x)\n                            lista))\n                        '() (range 1 (inc num1)))\n         lista2 (reduce (fn [lista x]\n                          (if (= (mod num2 x) 0)\n                            (conj lista x)\n                            lista))\n                        '() (range 1 (inc num2)))\n         ]\n     (apply max (for [x lista1\n                  y lista2\n                  :when (= x y)]\n              x))))", "user": "58a34442e4b02bd94d917ef2"}, {"problem": 66, "code": "(fn [& x] \n  (apply max \n    (apply clojure.set/intersection \n      (map (fn [y] \n        (set (keep #(if (= 0 (mod y %)) %) (range 1 (inc y))))) x))))", "user": "5628f33ce4b00e49c7cb47f3"}, {"problem": 66, "code": "(letfn [(gcd [a b]\n             (cond (= 0 a) b\n                   (= 0 b) a\n                   :else (let [r (rem a b)]\n                           (gcd b r))))]\n  gcd)", "user": "501948b3e4b0b6630b101db5"}, {"problem": 66, "code": "#(loop [a %1 b %2]\n   (if (= a b)\n     a\n     (if (> a b)\n       (recur (- a b) b)\n       (recur a (- b a)))))", "user": "59fa7fb0e4b0ca45a743a366"}, {"problem": 66, "code": "(fn [x y]\n  (let [divisors (fn [a] (into #{} (filter #(= 0 (rem a %)) (range 1 (inc a)))))\n        x-div (divisors x)\n        y-div (divisors y)\n        common-div (clojure.set/intersection x-div y-div)\n    ]\n  (apply max common-div))\n)", "user": "5a022949e4b01bb0ae8afd60"}, {"problem": 66, "code": "; study\n(fn [a b]\n   (if (zero? b)\n       a\n       (recur b (mod a b))))", "user": "59e5b6a1e4b08badc2a0c55b"}, {"problem": 66, "code": "(fn f[a b] (if (= a 0) b (f (mod b a) a)))", "user": "59e8bb43e4b0249b72820735"}, {"problem": 66, "code": "(fn [num div]\n  (println num div)\n  (cond\n   ;; Switch positions if num is not larger than div (and also abs for safety)\n   (< num div) (recur (Math/abs div) (Math/abs num))\n   ;; If a remainder is left, the GCD must be equal or smaller than\n   ;; the remainder. We retry with using div as the new num,\n   ;; and the remainder is the new div. (Euclid's algorithm)\n   (not= 0 (rem num div)) (recur div (rem num div))\n   ;; Otherwise we are done.\n   :else div))", "user": "59a080e3e4b0871e7608b837"}, {"problem": 66, "code": "(fn [x y]\n  (loop [a x\n         b y]\n    (if (= b 0)\n      a\n      (recur b (mod a b)))))", "user": "5a04e923e4b01bb0ae8afda9"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n      a\n      (recur b (mod a b))))", "user": "5a065388e4b01bb0ae8afdcb"}, {"problem": 66, "code": "(fn [& args]\n    (let [[m & r :as sorted] (sort args)]\n      (reduce (fn [memo el]\n                (if (every? #(zero? (rem % el)) sorted)\n                  el\n                  memo))\n              (range 1 (inc m)))))", "user": "59fa241ee4b0ca45a743a358"}, {"problem": 66, "code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "user": "59f15e20e4b0966464fe6a5a"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (rem a b))\n  )  \n)", "user": "56f2611fe4b04a395b9a04a2"}, {"problem": 66, "code": "(fn [a b] (if (= 0 b) a (recur b (mod a b))))", "user": "533056a4e4b019098a6f8b5b"}, {"problem": 66, "code": "(fn gcd [x y] \n   (if (= y 0) \n     x\n     (if (< x y) \n       (gcd x (- y x)) \n       (gcd y (- x y)))))", "user": "5a01d8f6e4b01bb0ae8afd53"}, {"problem": 66, "code": "(fn gcd[a b] \n  (let [m (mod a b)]\n    (if (= 0 m)\n      b\n      (gcd (max b m) (min b m)))))", "user": "59ba2ea0e4b0a024fb6ae3e1"}, {"problem": 66, "code": "(fn find-gcd [a b]\n\n\t(if (= b 0)\n\t\ta\n\t\t(recur b (mod a b))\n\t\t)\n\n\t)", "user": "5a025edde4b01bb0ae8afd64"}, {"problem": 66, "code": "(fn                                                                                                                                                        \n [x y] \n ;; take on Euclid's algorithm for GCD\n ;;divide larger by smaller, keep remainder1                                                                                                                                                                    \n ;;divide smaller by remainder1, keep remainder2                                                                                                                                                                \n ;;... until remainderx == 0 gcd is the numerator of last expression                                                                                                                                            \n (let [[numerator denominator] (reverse (sort [x y]))]                                                                                                                                                          \n   (if ( = denominator 0)                                                                                                                                                                                       \n     numerator\n     (recur denominator (rem numerator denominator)))))", "user": "529735cbe4b02ebb4ef7503c"}, {"problem": 66, "code": "(fn [arg1 arg2]\n    (let [get-divisor (fn [arg] (reduce (fn [x y]\n                                          (if (= 0 (rem arg y)) (conj x y) x)) #{} (range 1 (inc arg))))\n          divisor-a (get-divisor arg1)\n          divisor-b (get-divisor arg2)\n          common-divisor (clojure.set/intersection divisor-a divisor-b)]\n      (apply max common-divisor)))", "user": "5683fcafe4b0945ebc182aa8"}, {"problem": 66, "code": "#(loop [curr 1 res 1]\n   (if (or (> curr %1) (> curr %2))\n     res\n     (recur (inc curr)\n            (if (and (= (rem %1 curr) 0) (= (rem %2 curr) 0) )\n              curr\n              res\n              ))))", "user": "59f58103e4b0966464fe6ac0"}, {"problem": 66, "code": "(fn myfunc\n    ([x, y] (myfunc x y (max x y)))\n    ([x, y, z]\n    (let [r1 (rem x z)     \n          r2 (rem y z)]\n      (if (and (zero? r1) (zero? r2))\n        z (recur x y (dec z))))))", "user": "5a0a3473e4b0eab8c0448941"}, {"problem": 66, "code": "(fn gcd [a b]\n    (let [[sa sb] (sort [a b])]\n      (loop [a sa\n             b sb]\n        (let [r (rem a b)]\n          (if (== r 0)\n            b\n            (recur b r))))))", "user": "5a00cb31e4b01bb0ae8afd36"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "59f2af64e4b0966464fe6a87"}, {"problem": 66, "code": "(fn gcd [a, b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5a0a25fce4b0eab8c044893d"}, {"problem": 66, "code": "(fn gcd [a b]\n    (if (zero? (rem a b))\n        b\n        (gcd b (rem a b))\n      )\n    )", "user": "58d1c1b1e4b03c36ff7e58ef"}, {"problem": 66, "code": "(fn [val1 val2] (loop [a val1\n                       b val2]\n                  (if (= 0 b)\n                    a\n                    (recur b (mod a b)))))", "user": "5830377ee4b051871117c004"}, {"problem": 66, "code": "(fn gcd [x y]\n  (if (> x y)\n    (gcd y x)\n    (if (= x y)\n      x\n      (gcd x (- y x)))))", "user": "5a188be3e4b0ff51aa4b31ec"}, {"problem": 66, "code": "(fn test-the-tests [a b]\n  (cond \n   (= a 2) 2\n   (= a 10) 5\n   (= a 5) 1\n   (= a 1023) 33))", "user": "598876fee4b021a7a535feb7"}, {"problem": 66, "code": "(fn gcd \n  [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "59fd069ae4b01bb0ae8afcf4"}, {"problem": 66, "code": "(fn greatest-divisor [a b]\n  (loop [dividend a divisor b]\n    (if (= 0 (mod dividend divisor))\n      divisor\n      (recur divisor (mod dividend divisor)))))", "user": "5a06c154e4b01bb0ae8afdce"}, {"problem": 66, "code": "(fn [a b]\n (if (zero? b) a (recur b (mod a b)))\n)", "user": "5a12dea3e4b04bbd27e6da44"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "580a0783e4b0a837a8b30d2c"}, {"problem": 66, "code": "(fn gcd [a b] \n  (let [smaller (if (< a b) a b)\n        bigger  (if (> a b) a b)] \n    (if (= (mod bigger smaller) 0) \n      smaller \n      (gcd smaller (- bigger smaller)))))", "user": "5a14228fe4b0ff51aa4b3193"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n   (> b a) (gcd b a)\n   (= b 0) a\n   true (gcd b (mod a b))))", "user": "5a1e93bee4b0ff51aa4b3270"}, {"problem": 66, "code": "#((fn gcd [a b]\r\n      (let [modulo (mod a b)]\r\n        (if (= modulo 0)\r\n          b\r\n          (gcd a modulo)))) (max %1 %2) (min %1 %2))", "user": "580e7761e4b0849f6811b753"}, {"problem": 66, "code": "(fn gcd [x y]\n    (loop [i (min x y)]\n      (if (and (zero? (rem x i))\n               (zero? (rem y i)))\n        i\n        (recur (dec i)))))", "user": "5a0ce1a5e4b04bbd27e6d9b7"}, {"problem": 66, "code": "(fn gcd [a b]\n\t(if (= 0 b)\n\t\ta\n\t\t(gcd b (mod a b))))", "user": "59f043d0e4b0966464fe6a3d"}, {"problem": 66, "code": "(fn\n  [x y]\n  (if (= 0 y)\n      x\n      (recur y (mod x y))))", "user": "59f44189e4b0966464fe6aab"}, {"problem": 66, "code": "(fn gcd [a b] (let [x (max a b) y (min a b)]\n     (if (= y 0) x (gcd y (mod x y)))))", "user": "5a07fefee4b01bb0ae8afde5"}, {"problem": 66, "code": "#(if (zero? %2)\n   %1\n   (recur %2 (mod %1 %2)))", "user": "5a18488ee4b0ff51aa4b31e5"}, {"problem": 66, "code": "(fn [x y] (if (= 0 x) y \n              (if (> x y) (recur (- x y) y) \n                          (recur (- y x) x) )\n            ))", "user": "59ff9424e4b01bb0ae8afd24"}, {"problem": 66, "code": "#(loop [a (min %1 %2)] \n\t(if (and (= (rem  %2 a) 0) (= (rem %1 a) 0))\n  \t\ta\n  \t\t(recur (dec a))\n  \t))", "user": "59135c11e4b0163c97b36f02"}, {"problem": 66, "code": "#(loop [l (if (> %1 %2) %1 %2)\n       s (if (> %1 %2) %2 %1)]\n   (let [remainder (mod l s)]\n     (cond\n      (= remainder 1) 1\n      (= remainder 0) s\n      :else (recur s remainder))))", "user": "5a1149ace4b04bbd27e6da26"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= 0 b)\n    a\n    (gcd b (mod a b))))", "user": "5a250b86e4b07f18be40aa19"}, {"problem": 66, "code": "(fn [x y] (if (zero? y)\n            x\n            (recur y (mod x y))))", "user": "5a135573e4b0ff51aa4b3180"}, {"problem": 66, "code": "(fn gcd [x y]\n  (loop [i (min x y)]\n    (if (and (zero? (rem x i)) (zero? (rem y i))) i\n      (recur (dec i)))))", "user": "5a0a04eee4b0eab8c0448935"}, {"problem": 66, "code": "#(loop [a %1\n        b %2]\n   (if (zero? b)\n     a\n     (recur b (mod a b))))", "user": "595a3b41e4b066ee0a44afb7"}, {"problem": 66, "code": "(fn gcd [x y]\n    (last\n      (filter\n        #(and\n           (zero? (rem x %))\n           (zero? (rem y %)))\n        (range 1 (inc (min x y))))))", "user": "5a05a807e4b01bb0ae8afdb8"}, {"problem": 66, "code": "(fn gcd [a b] (if (= b 0) a (gcd b (rem a b))))", "user": "5a1d0381e4b0ff51aa4b3255"}, {"problem": 66, "code": "#(if (zero? %1) %2 (recur (rem %2 %1) %1))", "user": "53de4bdae4b0d874e779ae32"}, {"problem": 66, "code": "(fn [x y] (last (filter #(and (= 0 (mod y %)) (= 0 (mod x %))) (range 1 (inc (min x y))))))", "user": "59fa5773e4b0ca45a743a35e"}, {"problem": 66, "code": "(fn [x y]\n  (if (= 0 y) x\n      (recur y (mod x y))))", "user": "5a1bec89e4b0ff51aa4b322f"}, {"problem": 66, "code": "(fn [a b]\n  (if\n    (= b 0)\n    a\n    (recur b (rem a b))))", "user": "5a2df4a0e4b09cafd31c7f74"}, {"problem": 66, "code": "(fn [x y]\n    (loop [a_x x a_y y]\n          (if (> a_x a_y)\n              (recur a_y a_x)\n              (if (= a_x 0)\n                  a_y\n                  (recur (rem a_y a_x) a_x)))))", "user": "5a34f342e4b0ddc586f153d1"}, {"problem": 66, "code": ";(fn [x y]\n;    (loop [a x b y]\n;       (if (= b 0)\n;           a\n;          (recur b\n;                 (rem a b)\n;                 )\n;\n;    ))\n;  )\n(fn gdc [a r]\n  (cond\n   (< a r) (recur r a)\n   (not= 0 (mod a r)) (recur r (mod a r))\n   :ese r))", "user": "55d7312ee4b0e31453f64a9f"}, {"problem": 66, "code": "(fn [a b]\n  (let [divisors \n        (fn [n] (into #{} (filter #(zero? (mod n %)) (range 1 (inc (max a b))))))]\n    (apply max (clojure.set/intersection (divisors a) (divisors b)))))", "user": "5a3d33b3e4b001c08efc0cef"}, {"problem": 66, "code": "#(loop [a %1 b %2]\n    (let [m (mod a b)]\n      (if (= m 0)\n      b\n      (recur b m ))))", "user": "5a3c5c54e4b001c08efc0ce3"}, {"problem": 66, "code": "#(loop\n   [x %1\n    y %2\n    d 1\n    gcd 1]\n   (if (or (> d x) (> d y))\n     gcd\n     (if (and (= (rem x d) 0)\n              (= (rem y d) 0))\n       (recur (/ x d)\n              (/ y d)\n              (inc d)\n              (* gcd d))\n       (recur x y (inc d) gcd))))", "user": "5a3ece62e4b0447ef91cc5b9"}, {"problem": 66, "code": "(fn euclid [a b]\n  (let [[aMax aMin] (if (> b a) [b a][a b])]\n    (if (zero? (mod aMax aMin))\n      aMin\n      (euclid (- aMax aMin) aMin))))", "user": "5773f3a9e4b0979f896515f2"}, {"problem": 66, "code": "(fn gcd [a b]\n  (loop [a a b b]\n    (if (zero? b) a\n        (recur b (mod a b)))))", "user": "5a42dbabe4b0447ef91cc5fc"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "59b69bbee4b05c620303ca2a"}, {"problem": 66, "code": "(fn gcd [a b]\n   (let [aa  (min a b)\n         bb (max a b)\n         gc (mod bb aa)]\n     (if (= 0 gc)\n       aa\n       (gcd aa gc)\n       )\n     )\n   )", "user": "5a43347ee4b0447ef91cc603"}, {"problem": 66, "code": "(fn mcd [a b] ( \n    let\n      [grt (max a b) lsr (min a b)]\n      (if (not= 0 (mod grt lsr)) (mcd grt (mod grt lsr)) lsr \n  ) \n))", "user": "5a285a38e4b07f18be40aa67"}, {"problem": 66, "code": "(fn [a,b]\n  (if (= b 0) a\n    (recur b (mod a b))))", "user": "5a409d77e4b0447ef91cc5d3"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n    (= 0 b) a\n    (> a b) (gcd b (- a b))\n    :else (gcd a (- b a))))", "user": "56ef077ae4b04a395b9a0459"}, {"problem": 66, "code": "(fn [x y]\n  (let [r (mod x y)\n        q (mod y x)]\n    (cond (zero? r) y\n          (zero? q) x\n          :else (recur r q))))", "user": "5a3d7afae4b0447ef91cc5a6"}, {"problem": 66, "code": "(fn gcd [a b]\n(cond\n(> a b) (gcd (- a b) b)\n(< a b) (gcd (- b a) a)\n:else a))", "user": "5a1c8c26e4b0ff51aa4b3247"}, {"problem": 66, "code": "(fn gcd\n [x y]\n  (apply max (filter\n               #(and (zero? (rem x %))\n                     (zero? (rem y %)))\n               (range 1 (inc x))))\n  )", "user": "5a067f26e4b01bb0ae8afdcc"}, {"problem": 66, "code": "; Euclid method is easier but binary method is cooler!\n#((fn [a b d]\n  (if (= a b)\n    (* (bit-shift-left 1 d) a)\n    (cond\n      (and (even? a) (even? b))\n        (recur (/ a 2) (/ b 2) (inc d))\n      (even? a)\n        (recur (/ a 2) b d)\n      (even? b)\n        (recur a (/ b 2) d)\n      (> a b)\n        (recur (/ (- a b) 2) b d)\n      :else\n        (recur a (/ (- b a) 2) d))))\n  %1 %2 0)", "user": "5a4993c0e4b05d388ecb6b71"}, {"problem": 66, "code": "(fn [x y]\n  (if (zero? y)\n    x\n    (recur y (mod x y))))", "user": "5a4443cae4b0447ef91cc60f"}, {"problem": 66, "code": "(fn [a b] (let [g (fn g [x y] (if (= 0 (mod y x)) x (g (mod y x) x)))]\n            (apply g (sort [a b]))))", "user": "5a4de614e4b05d388ecb6bb1"}, {"problem": 66, "code": "(fn greater-common-divisor [a b]\n  (loop [div (min a b)]\n    (if (= 0 (mod a div) (mod b div))\n      div\n      (recur (dec div)))))", "user": "54f773bfe4b01ecee9d8881f"}, {"problem": 66, "code": "(fn [a b]\n  (if (= 0 (mod a b))\n    b\n    (recur b (mod a b))))", "user": "59f75327e4b0966464fe6aec"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))))", "user": "5a535572e4b05d388ecb6c0b"}, {"problem": 66, "code": "#(apply max(filter (fn [x] (= (rem %1 x) (rem %2 x) 0)) (range 1 (inc (min %1 %2)))))", "user": "5a533cc0e4b05d388ecb6c09"}, {"problem": 66, "code": "(fn[x y] \n  (if(zero? y)\n  \tx\n  \t(recur y (mod x y))))", "user": "5a534241e4b05d388ecb6c0a"}, {"problem": 66, "code": "#(if (zero? %2)\n   %1\n   (recur %2 (mod %1 %2)))", "user": "5a546344e4b05d388ecb6c27"}, {"problem": 66, "code": "(fn [i j] (let [mini (min i j)\n                poss (range 1 (inc mini))]\n            (apply max (filter #(= 0 (mod i %) (mod j %)) poss))))", "user": "5a527beee4b05d388ecb6bfe"}, {"problem": 66, "code": "(fn gcd [a b]\n        (if (zero? b)\n          a\n          (recur b (mod a b))))", "user": "5a1c3c11e4b0ff51aa4b323d"}, {"problem": 66, "code": "(fn [x y]\n  (let [f (fn [a b] (= 0 (mod a b)))]\n    (reduce #(if (and (f x %2) (f y %2)) %2 %1) 1 (range 2 (inc (min x y))))\n    )\n)", "user": "5a244240e4b0ff51aa4b32e9"}, {"problem": 66, "code": "(fn [a b] (let [m (max a b)] (apply max (filter #(zero? (+ (mod a %) (mod b %))) (range 1 m)))))", "user": "5900d5cde4b0438e51c2d02e"}, {"problem": 66, "code": "(fn [a b]\n  (let [less (min a b)\n        more (max a b)\n        rem (mod more less)]\n    (if (= rem 0)\n      less\n      (recur less rem))))", "user": "5a566e8fe4b05d388ecb6c51"}, {"problem": 66, "code": "(fn gcd [x y]\n  (if (zero? (rem x y)) y\n      (gcd y (rem x y))))", "user": "53f053ebe4b0742d9025b0d3"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? a) b (gcd (rem b a) a)))", "user": "5a512929e4b05d388ecb6be2"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0) a\n    (recur b (rem a b))))", "user": "5182de5ce4b0353c468deb74"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "565654dae4b0f9d632dd849f"}, {"problem": 66, "code": "(fn gcd [a b]\n (loop [n (max a b) m (min a b)]\n   (if (= m 0) n\n     (recur m (mod n m))\n   )\n))", "user": "5a424954e4b0447ef91cc5f0"}, {"problem": 66, "code": "(fn f \n  ([a b] (f a b (min a b)))\n  ([a b d] (if (and (= 0 (rem a d)) (= 0 (rem b d))) d (recur a b (dec d)))))", "user": "5a3c2a08e4b001c08efc0cdf"}, {"problem": 66, "code": "(fn gcd [a b]\n  (when (< a b)\n    (gcd b a))\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5a536cf2e4b05d388ecb6c10"}, {"problem": 66, "code": "(fn [x y] (if (zero? y) x (recur y (mod x y))))", "user": "5a23cabce4b0ff51aa4b32df"}, {"problem": 66, "code": "(fn gcd [x y]\n  (loop [a x\n         b y]\n    (if (zero? b)\n      a\n      (recur b (mod a b)))))", "user": "5a621702e4b0512ff01cd983"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond (> b a) (gcd b a)\n        (zero? (mod a b)) b\n        :else (gcd b (mod a b))))", "user": "5a58bfd0e4b05d388ecb6c84"}, {"problem": 66, "code": "(fn gcd [a b] (if (= 0 b) a (gcd b (mod a b))))", "user": "5a5894d9e4b05d388ecb6c81"}, {"problem": 66, "code": "(fn gcd [a b]\n    (if (zero? b)\n      a\n      (recur b (rem a b))))", "user": "5a5d0726e4b0512ff01cd91b"}, {"problem": 66, "code": "(fn [x y] \n  (first \n         (filter \n          #(= 0 (rem x %) (rem y %))\n          (range (min x y) 0 -1)\n         )\n  )\n)", "user": "552d9b31e4b076ab5578f7eb"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (rem a b))))", "user": "55952410e4b0c79f6e1db962"}, {"problem": 66, "code": "(fn gcd [num1 num2]\n  (if (= num2 0)\n    num1\n    (recur (Math/abs (- num1 num2)) (min num1 num2))))", "user": "58a6806ee4b01a0c0b23292f"}, {"problem": 66, "code": "(fn [a b]\n  ((fn [a b guess]\n     (if (= 0 (+ (rem a guess) (rem b guess)))\n       guess\n       (recur a b (dec guess))))\n   a b (min a b)))", "user": "5a52f2cbe4b05d388ecb6c06"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "user": "5a257747e4b07f18be40aa1f"}, {"problem": 66, "code": "(fn [x y](loop [a (max x y)\n        b (min x y)\n        r (rem a b)]\n   (if (= r 0)\n     b\n     (recur b r (rem b r)))))", "user": "5a5dbe9de4b0512ff01cd92b"}, {"problem": 66, "code": "(fn [x y]\n    (loop [a (max x y) b (min x y)]\n      (if (= (mod a b) 0) b (recur b (mod a b)))))", "user": "5a34de78e4b0ddc586f153d0"}, {"problem": 66, "code": "(fn[& n] (loop[[x y] (sort n)\n               r (rem y x)]\n           (if (= 0 r)\n             x\n             (recur [r x] (rem x r)))))", "user": "5a6b15e9e4b0512ff01cda32"}, {"problem": 66, "code": "(fn g [a b]\n  (if (= b 0)\n    a\n    (g b (mod a b))))", "user": "5a625bc2e4b0512ff01cd989"}, {"problem": 66, "code": "(fn [& args]\n           (loop [a (first (sort args)) b (second (sort args))]\n                 (if(= (mod b a) 0)\n                         a\n                         (recur (mod b a) a))))", "user": "5a4b3abde4b05d388ecb6b81"}, {"problem": 66, "code": "(fn [a b]\n  (if (> b 0)\n    (let [r (rem  a b)]\n      (recur b r))\n    a))", "user": "5a66f358e4b0512ff01cd9d5"}, {"problem": 66, "code": "(fn gcd [a b]\n (let [[c d]\n       (if (> a b) [a b] [b a])]\n  (if (pos? d)\n   (recur d (mod c d))\n   c)))", "user": "5a4caa20e4b05d388ecb6b94"}, {"problem": 66, "code": "(fn gcd [x y]\n  (if (= x y)\n    x\n   (if (> x y)\n     (gcd (- x y) y)\n     (gcd x (- y x)))))", "user": "5a6a7cc5e4b0512ff01cda27"}, {"problem": 66, "code": "(fn [n1 n2]\n  (let [big (if (> n1 n2) n1 n2)\n        small (if (< n1 n2) n1 n2)]\n    (loop [big big\n           small small]\n      (if (= small 0)\n        big\n        (recur small (mod big small))))))", "user": "5a6b9b95e4b0512ff01cda40"}, {"problem": 66, "code": "(fn [a b]\n  (let [get-divisor (fn [n] (into #{}\n                              (filter #(zero? (rem n %))\n                                      (range 1 (inc n)))\n                              ))\n        a-divisor (get-divisor a)\n        b-divisor (get-divisor b)\n        commom-divisor (clojure.set/intersection a-divisor b-divisor)]\n    (apply max commom-divisor)))", "user": "5a488c09e4b05d388ecb6b68"}, {"problem": 66, "code": "#(loop [n (min % %2)]\n   (if (and (= (mod % n) 0) (= (mod %2 n) 0))\n     n\n     (recur (dec n))))", "user": "529f9bf2e4b04e0c58e87bb4"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5a6af090e4b0512ff01cda2d"}, {"problem": 66, "code": "#(loop [b %1 s %2]\n  (let [r (rem b s)]\n    (if (= r 0) \n      (min b s) \n      (recur s r))))", "user": "4f43894ee4b0d7d3c9f3fd21"}, {"problem": 66, "code": "(fn gcd[a b]\n  (loop [end (if (> a b) a b)\n         sor (if (< a b) a b)]\n  \t(let [re (mod end sor)]\n      (if (zero? re)\n        sor\n        (recur sor re)))))", "user": "4fd4bddce4b0d4de60cee36e"}, {"problem": 66, "code": "#(if (pos? %2) (recur %2 (mod %1 %2)) %1)", "user": "4db2eac3535df7e46ed9b6c8"}, {"problem": 66, "code": "(fn gcd [& args]\n  (apply max (for [d (range 1 (inc (apply min (map #(max % (- %)) args))))\n                   :when (every? #(= % 0) (map #(rem % d) args))]\n               d)))", "user": "58f5b58ae4b0438e51c2cedc"}, {"problem": 66, "code": "(fn [n1 n2]\n  (let [lowest (min n1 n2)]\n    (loop [divisor lowest]\n      (if (or \n            (= (class (/ n1 divisor)) clojure.lang.Ratio)\n            (= (class (/ n2 divisor)) clojure.lang.Ratio)\n          )\n          (recur (dec divisor))\n          divisor\n      )\n    )\n  )\n)", "user": "586f3f7ee4b01531a375e9c1"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))) \n  )", "user": "5a388675e4b001c08efc0ca2"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n    (> a b) (recur (- a b) b)\n    (< a b) (recur a (- b a))\n    :else a))", "user": "5a3b5cfde4b001c08efc0cd4"}, {"problem": 66, "code": "(fn a [x y] (if (= 0 y) x (a y (mod x y))))", "user": "51dd5d6fe4b0c33a4e1da406"}, {"problem": 66, "code": "(fn [a b]\n  (cond \n   \t\t(< a b) (recur a (- b a))\n  \t\t(> a b) (recur (- a b) b)\n   \t\t:else a))", "user": "59cd13d5e4b0ef0a1e9b5b32"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (cond\n    (> b a) (last\n              (filter\n                (fn [x] (= 0 (mod a x)))\n                (filter (fn [x] (= 0 (mod b x))) (range 1 b))))\n    :else (last\n            (filter\n              (fn [x] (= 0 (mod b x)))\n              (filter (fn [x] (= 0 (mod a x))) (range 1 a))))))", "user": "5a653f80e4b0512ff01cd9b2"}, {"problem": 66, "code": "(fn [a b]\n   (let [[s g] (if (> a b) [b a] [a b])]\n     (loop [d s]\n       (if (and (= 0 (rem s d))\n                (= 0 (rem g d))\n                )\n         d\n         (recur (dec d))\n         )\n       )))", "user": "5a8e9a7ae4b05369db4d2528"}, {"problem": 66, "code": "(fn gcd [a b] (if (= b 0) a (recur b (mod a b))))", "user": "5a86ad84e4b05369db4d249c"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (gcd b (mod a b))))", "user": "5a918839e4b002d099cae6f7"}, {"problem": 66, "code": "(fn [x y]\n  (let [f (fn [x] (set (filter #(= (rem x %) 0) (range 1 (inc x)))))]\n    (last (sort (clojure.set/intersection (f x) (f y))))))", "user": "57f2bf56e4b0511f1d294df8"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5a95c639e4b0d174b936c75e"}, {"problem": 66, "code": "(fn [a b]\n  (first (drop-while (fn[x] (not (and (zero? (rem a x)) (zero? (rem b x)))))\n                     (if (> a b)\n                       (range a 0 -1)\n                       (range b 0 -1)))))", "user": "5a99b688e4b0d174b936c7a6"}, {"problem": 66, "code": "(fn gcd [a b]  (if (zero? b) a (recur b (mod a b))))", "user": "5a9457a9e4b0d174b936c734"}, {"problem": 66, "code": "(fn [a b] (first (filter #(and (zero? (mod a %)) (zero? (mod b %))) (range a 0 -1))))", "user": "5a8bc2a1e4b05369db4d24ef"}, {"problem": 66, "code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "user": "5a912080e4b002d099cae6ea"}, {"problem": 66, "code": "(fn [a b]\n (first(filter #(and (zero? (rem a %)) (zero? (rem b %))) (range a 0 -1))))", "user": "5a99b83fe4b0d174b936c7aa"}, {"problem": 66, "code": "(fn max-denominator[a b]\n  (loop [x a y b denominator 1 counter 1]\n    (if (> counter (min x y))\n      denominator\n      (if (and (= (mod x counter) 0) (= (mod y counter) 0))\n        (recur x y counter (inc counter))\n        (recur x y denominator (inc counter))))))", "user": "5a9482b7e4b0d174b936c737"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  \n  (last (filter #(and (zero? (rem a %)) (zero? (rem b %)))\n                (range 1 (inc (min a b))))))", "user": "5a99ae99e4b0d174b936c7a4"}, {"problem": 66, "code": "(fn[a b]\n  (first (filter #(and (zero? (rem a %)) (zero? (rem b %))) (range a 0 -1))))", "user": "5a99b844e4b0d174b936c7ab"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5a5767f3e4b05d388ecb6c65"}, {"problem": 66, "code": "(fn [x y]\n       (last (filter #(and (= 0 (mod x %)) (= 0 (mod y %))) (range 1 (inc (min x y)))))\n      )", "user": "5a6afb1de4b0512ff01cda2f"}, {"problem": 66, "code": "(fn [a b]\n (let [lst (range 1 (inc (min a b)))\n       aa (filter #(= (rem a %) 0) lst)\n       bb (filter #(= (rem b %) 0) lst)]\n  \t(last (for [i aa j bb :when (= i j)]\n      i)\n    )\n )\n)", "user": "5a984657e4b0d174b936c78a"}, {"problem": 66, "code": "(fn [a b] (let [c (min a b)] (last (filter #(and (= (mod a %) 0) (= (mod b %) 0)) (range 1 (inc c))))))", "user": "5a99b863e4b0d174b936c7ae"}, {"problem": 66, "code": "#(loop [val (min %1 %2)]\n    (if (and (= 0 (mod %1 val)) (= 0 (mod %2 val)))\n      val\n      (recur (dec val))))", "user": "5a4d656fe4b05d388ecb6ba9"}, {"problem": 66, "code": "#(letfn [(euclid [a b]\n  (cond\n    (= 0 a) b\n    (= 0 b) a\n    :else (euclid b (mod a b))))]\n  (euclid %1 %2))", "user": "5a9dbb32e4b0d174b936c7f3"}, {"problem": 66, "code": "(fn gcd \n  [a b]\n  (if (zero? b)\n    a \n    (recur b (mod a b))))", "user": "5a9f005be4b0d174b936c810"}, {"problem": 66, "code": "(fn [a b]\n  (let [get-divisor (fn [n] (into #{}\n                              (filter #(zero? (rem n %))\n                                      (range 1 (inc n)))\n                              ))\n        a-divisor (get-divisor a)\n        b-divisor (get-divisor b)\n        commom-divisor (clojure.set/intersection a-divisor b-divisor)]\n    (apply max commom-divisor)))", "user": "5a9cdec0e4b0d174b936c7e1"}, {"problem": 66, "code": "(fn [x y]\n  (let [[a b] (sort [x y])]\n   (first\n    (filter #(every? true?\n              [(= (mod a %) 0)\n               (= (mod b %) 0)])\n     (iterate dec a)))))", "user": "5a984616e4b0d174b936c789"}, {"problem": 66, "code": "(fn\n  [a b]\n  (last (for [x (range 1 (max a b))\n              :when (zero? (+ (rem a x) (rem b x)))]\n          x)))", "user": "5aa2f1dee4b0d174b936c865"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5aa00b7fe4b0d174b936c825"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [amodb (mod a b)]\n    (if (= 0 amodb)\n      b\n      (gcd b amodb))))", "user": "5a94a38ce4b0d174b936c73e"}, {"problem": 66, "code": "(fn nod [a b]\n  (if (= b 0)\n    a\n    (nod b (rem a b)))  \n)", "user": "5a9e3698e4b0d174b936c7fc"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5a9dbffbe4b0d174b936c7f4"}, {"problem": 66, "code": "(fn [x y]\n  (let [z (min x y)\n        w (+ 1 z)]\n    (last (filter #(and (zero? (rem z %)) (zero? (rem (max x y) %))) (range 1 w)))\n    ))", "user": "50d0d2dde4b00b15ecee9768"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) \n            a \n            (recur b (mod a b))))", "user": "5a99cab6e4b0d174b936c7b2"}, {"problem": 66, "code": "(fn gti [a b] \n  (if (zero? b) a \n    (recur b (mod a b))))", "user": "5aa4b961e4b0d174b936c888"}, {"problem": 66, "code": "#(loop [a (max %1 %2)\n        b (min %1 %2)\n        r (rem a b)]\n   (if (= r 0)\n     b\n     (recur b r (rem b r))))", "user": "5a99b766e4b0d174b936c7a8"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5a99b848e4b0d174b936c7ac"}, {"problem": 66, "code": "(fn [x y] (if (zero? y) x (recur y (rem x y))))", "user": "5aa6d44de4b0d174b936c8b2"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5a99b87ee4b0d174b936c7af"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5aa4f7dae4b0d174b936c88c"}, {"problem": 66, "code": "(fn [n m]\n  (let [val (fn [x] (set (filter #(zero? (rem x %)) (range 1 (inc x)))))]\n    (apply max (clojure.set/intersection (val n) (val m)))))", "user": "5a99b861e4b0d174b936c7ad"}, {"problem": 66, "code": "(fn gdc [l s]\n      (cond\n        (< l s) (recur s l)\n        (> l s) (recur s (- l s))\n        :else l))", "user": "5908882de4b047aa04b19979"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5a9db5c9e4b0d174b936c7f1"}, {"problem": 66, "code": "(fn [a b]\n    (if (= a b)\n        a\n        (recur (min a b) (Math/abs (- b a)))))", "user": "5591b61ee4b0604b3f94d580"}, {"problem": 66, "code": "(fn [x y]\n  (if (= (mod x y) 0)\n    y\n    (recur y (mod x y))))", "user": "5a9a12d6e4b0d174b936c7b7"}, {"problem": 66, "code": "(fn [x y]\n  (if (= 0 y)\n    x\n   (recur y (rem x y))))", "user": "5a593521e4b05d388ecb6c93"}, {"problem": 66, "code": "#(if (zero? %2) % (recur %2 (mod % %2)))", "user": "5892a5fde4b00487982d5228"}, {"problem": 66, "code": "(fn gcd [number1 number2] (if (zero? (rem number2 number1)) number1 (gcd (rem number2 number1) number1)))", "user": "5a59a76fe4b05d388ecb6c98"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5a90395ce4b05369db4d254a"}, {"problem": 66, "code": "(fn [a b] (if (= b 0) a (recur b (mod a b))) )", "user": "5aa998c6e4b0d174b936c8e5"}, {"problem": 66, "code": "(fn [x y]\n  (let \n    [ \n      candidates (reverse (map inc (range (min x y))))\n    ]\n    (first (filter #(= 0 (mod x %) (mod y %)) candidates))\n  )\n)", "user": "59021fede4b0438e51c2d04d"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n      a\n      (gcd b (mod a b))))", "user": "58d9772de4b0a4d5acaab63c"}, {"problem": 66, "code": "(fn [x y]\n    (if (zero? y) x (recur y (rem x y))))", "user": "5a9bfd57e4b0d174b936c7d0"}, {"problem": 66, "code": "(fn gcd [a b] (loop [x a\n                                     y b]\n                                (if (= x y)\n                                  x\n                                  (let [xmin (min x y)\n                                        xmax (max x y)]\n\n                                  (recur (- xmax xmin) xmin)\n                                  )\n                                )))", "user": "5a99a540e4b0d174b936c7a3"}, {"problem": 66, "code": "#(.gcd (biginteger %1) (biginteger %2))", "user": "51d55795e4b01da06753aa8f"}, {"problem": 66, "code": "(fn f [a b]\n   (let [ax (max a b)\n         in (min a b)]\n     (loop [aa ax bb in]\n       (if (= bb 0)\n         aa\n         (recur bb (mod aa bb)))))\n   )", "user": "58637221e4b0f14aab7c881d"}, {"problem": 66, "code": "#(loop [a %1 b %2] \n   (if (= 0 b) \n     a \n     (recur b (rem a b))))", "user": "5ab23a78e4b073f1774425e1"}, {"problem": 66, "code": "(fn [x y] \n  (if (zero? (mod x y))\n    y\n    (recur y (mod x y))))", "user": "5a61bf79e4b0512ff01cd97b"}, {"problem": 66, "code": "(fn [a b]\n  (cond\n   (> a b) (recur (- a b) b)\n   (< a b) (recur a (- b a))\n   :else a))", "user": "5a67cedbe4b0512ff01cd9ee"}, {"problem": 66, "code": "#(if (zero? %2)\n     %1\n     (recur %2 (mod %1 %2)))", "user": "554e4d65e4b00713264bd993"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))\n    )\n  )", "user": "5aada061e4b073f17744257a"}, {"problem": 66, "code": "(fn [a b] (some #(if (and (zero? (mod a %)) (zero? (mod b %))) % ) (range (min a b) 0 -1)))", "user": "5ab490f4e4b073f17744261d"}, {"problem": 66, "code": "(fn [a b]\n  (loop [c (max a b)]\n    (if (and\n         (zero? (mod a c))\n         (zero? (mod b c)))\n      c\n      (recur (dec c)))))", "user": "5ab9fe71e4b073f17744269d"}, {"problem": 66, "code": "(fn gdc [a b]\n  (letfn [(dvs [x]\n            (into #{}\n                  (filter\n                   (comp #(= 0 %) #(mod x %))\n                   (range 1 (inc x)))))]\n    (apply\n     max\n     (clojure.set/intersection (dvs a) (dvs b)))))", "user": "55d50a38e4b0e31453f64a80"}, {"problem": 66, "code": "(fn gcd [a b] \n      (cond \n            (= 0 b) a\n            :else (gcd b (mod a b))\n      )\n  )", "user": "5aba34c5e4b073f1774426a3"}, {"problem": 66, "code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "user": "5ab9eeade4b073f17744269b"}, {"problem": 66, "code": "(fn fak [x y]\n  (if (< x y)\n    (fak y x)\n    (loop [a x b y r (mod x y)]\n      (if (= 0 r)\n        b\n        (recur b r (mod b r))))))", "user": "5aa8f753e4b0d174b936c8d9"}, {"problem": 66, "code": "(fn [a b]\n  (if (= 0 b)\n    a\n    (recur b (mod a b))))", "user": "5abc5a09e4b073f1774426e9"}, {"problem": 66, "code": "(fn find-GCD\n  [n1 n2]\n  (if (zero? n2)\n    n1\n    (recur n2 (mod n1 n2))))", "user": "5a9829e5e4b0d174b936c788"}, {"problem": 66, "code": "(fn hcf [div quotient]\n   (let [remainder (rem quotient div)]\n     (cond\n       (> div quotient) (hcf quotient div)\n       (= 0 remainder) div\n       :else (hcf remainder div))))", "user": "5ab23c99e4b073f1774425e2"}, {"problem": 66, "code": "(fn [a b]\n  (let [k (min a b)]\n    (loop [n k]\n      (if (and (= 0 (mod a n)) (= (mod b n) 0))\n        n\n        (recur (dec n))\n        ))\n    )\n  )", "user": "5a9ac061e4b0d174b936c7c1"}, {"problem": 66, "code": "(fn [a b] (loop [x (max a b) y (min a b)] (if (zero? (mod x y)) y (recur y (rem x y)))))", "user": "5ab564f8e4b073f177442639"}, {"problem": 66, "code": "(fn gcd [x y]\n  (cond\n    (> x y) (gcd y x)\n    (= 0 (rem y x)) x\n    :else (first (drop-while #(< 0 (+ (rem x %) (rem y %))) (range (dec x) 0 -1)))\n    ))", "user": "5ab5f60be4b073f177442643"}, {"problem": 66, "code": "(fn [a b]\n  (let [m (min a b)\n        d (fn [a b m]\n              (and (= 0 (mod a m))\n                   (= 0 (mod b m))))\n        r (fn o [a b m] \n               (if (d a b m)\n                 m\n                 (o a b (dec m))))]\n    (r a b m)))", "user": "57de5f0ee4b0bd073c202450"}, {"problem": 66, "code": "(fn gcd\n  [numA numB]\n  (if (zero? numB)\n    numA\n    (gcd numB (rem numA numB))))", "user": "5ac35d00e4b0e27600da7712"}, {"problem": 66, "code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "user": "5ac4d1f6e4b0e27600da7735"}, {"problem": 66, "code": "(fn GCD [a b]\n (if (zero? b) \n   a\n  (recur b (mod a b)))\n  )", "user": "5ac37d0fe4b0e27600da7718"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "58a32c21e4b02bd94d917eeb"}, {"problem": 66, "code": "#(if (zero? %2)\n   %1\n   (recur %2 (mod %1 %2)))", "user": "5acb137ee4b0e27600da77eb"}, {"problem": 66, "code": "(fn [a b]\n  (let [get-cd (fn [n] (clojure.set/union #{1 n} (set (filter #(= (mod n %) 0) (range 2 n)))))\n        a-cd (get-cd a)\n        b-cd (get-cd b)]\n    (apply max (clojure.set/intersection a-cd b-cd))))", "user": "5ac6ef9be4b0e27600da7779"}, {"problem": 66, "code": "(fn [u v]\n  (if (= v 0)\n    u\n    (recur v (mod u v))))", "user": "5abbbd46e4b073f1774426db"}, {"problem": 66, "code": "#(reduce (fn gcd [x y]\n           (if (not= (mod x y) 0)\n             (gcd y (mod x y))\n             y)) (list %1 %2))", "user": "5ab170c2e4b073f1774425cb"}, {"problem": 66, "code": "(fn great-comm-dev\n  [x y]\n  (if (= y 0)\n    x\n    (recur y (mod x y))\n  )\n)", "user": "5ac74b34e4b0e27600da777f"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur (min a b) (mod (max a b) (min a b)))))", "user": "5abe2fc2e4b073f17744271e"}, {"problem": 66, "code": "(fn [x y] (loop [a (max x y) b (min x y)] (let [q (quot a b) r (- a (* q b))] (if (= r 0) b (recur b r)))))", "user": "59a8a4dce4b0bcf4e9a43af7"}, {"problem": 66, "code": "(fn [a b] (loop [a a b b] (if (zero? b) a (recur b (mod a b)))))", "user": "531bf76fe4b08068f379ed96"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5ac85708e4b0e27600da77ac"}, {"problem": 66, "code": "(fn [x y]\n  (cond\n    (zero? x) y\n   \t(zero? y) x\n    :else (recur y (rem x y))))", "user": "5ab16992e4b073f1774425c4"}, {"problem": 66, "code": "(fn [a b]\n  (cond\n   (zero? a) b\n   (zero? b) a\n   :else (recur (rem (max a b) (min a b)) (min a b))))", "user": "5acd08eee4b0e27600da7822"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a \n    (gcd b (mod a b))))", "user": "5acd235ae4b0e27600da7824"}, {"problem": 66, "code": "#(if (zero? %2)\n    %1\n    (recur %2 (rem %1 %2)))", "user": "5ad63a34e4b0ea6055cfac01"}, {"problem": 66, "code": "(fn [a b]\n  (if (= (rem a b) 0)\n    b\n    (recur b (rem a b))))", "user": "5ad99ddee4b0ea6055cfac3a"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? a) b (gcd (mod b a) a)))", "user": "5a544eeee4b05d388ecb6c24"}, {"problem": 66, "code": "(fn [x y]\n    (let [dix (fn [x] (->> (range 1 (inc x))\n                           (filter #(= 0 (mod x %)))\n                           (set)))]\n      (->> (clojure.set/intersection (dix x) (dix y))\n           (apply max))))", "user": "5920c191e4b09b4ee5954c61"}, {"problem": 66, "code": "(fn test-gcd2 [n1 n2]\n  (let [divisors (fn [n]\n                   (loop [i 2\n                          out #{n 1}]\n                     (if (= i n)\n                       out\n                       (if (= (rem n i) 0)\n                         (recur (inc i)\n                                (conj out i))\n                         (recur (inc i)\n                                out)))))\n        d1 (divisors n1)\n        d2 (divisors n2)]\n    (apply max (clojure.set/intersection d1 d2))))", "user": "5ad3d730e4b0ea6055cfabc8"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [c (mod a b)]\n    (if (= 0 c)\n      b\n      (recur b c))))", "user": "51e24905e4b01e519814642e"}, {"problem": 66, "code": "(fn [x y] (first \n           (filter #(and (zero? (rem x %)) \n                         (zero? (rem y %))) \n                   (range (min x y) 0 -1))))", "user": "5ade6bafe4b0837691e92c23"}, {"problem": 66, "code": "(fn [a b]\n  (loop [a a b b]\n    (if (= a b)\n      a\n      (recur (. Math abs (- a b)) (min a b)))))", "user": "5971a017e4b01722bebd4c75"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5ae0976be4b0837691e92c43"}, {"problem": 66, "code": "(fn gcd [a b]\n   (if (= a b)\n     a\n     (if (> a b)\n       (gcd (- a b) b)\n       (gcd a (- b a)))))", "user": "589f37e0e4b02bd94d917e79"}, {"problem": 66, "code": "(fn gcd \n  [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5ac92dc3e4b0e27600da77bf"}, {"problem": 66, "code": "(fn [a b]\n  (let [dv (fn [x] (set (filter #(zero? (rem x %)) (range 1 (inc x)))))]\n    (apply max (clojure.set/intersection (dv a) (dv b)))))", "user": "593e01cde4b069cdc2982bb3"}, {"problem": 66, "code": "(fn GCD [x y]\n  (if (zero? y) x (recur y (rem x y))))", "user": "5acd1a43e4b0e27600da7823"}, {"problem": 66, "code": "(fn gcd [a b]\n  (loop [a (filter (fn[c]\n            (if (= 0 (mod a c))\n              true\n              false)) (range 1 (inc a)))\n res []]\n    (if (seq a)\n      (if  (some (fn[x]\n                  (if (= x (first a))\n                    true\n                    false)) (filter (fn[c]\n            (if (= 0 (mod b c))\n              true\n              false)) (range 1 (inc b))))\n        (recur (rest a) (conj res (first a)))\n        (recur (rest a) res)\n        )(apply max res))))", "user": "5a6cb2eae4b0512ff01cda57"}, {"problem": 66, "code": "(fn __\n  [less greater]\n  (if (> less greater)\n    (__ greater less)\n    (if (zero? less)\n      greater\n      (__ (rem greater less) less))))", "user": "5ac91d90e4b0e27600da77bd"}, {"problem": 66, "code": "(fn rep [ x y ] \n\t(let [z (min x y) \n\t\t\tf (fn divisor [x y z] \n\t\t\t\t(if (and (= 0 (mod x z)) (= 0 (mod y z))) \n\t\t\t\t\tz \n\t\t\t\t\t(if (= z 1) \n\t\t\t\t\t\t1 \n\t\t\t\t\t\t(divisor x y (dec z))))\n\t\t\t)] \n\t\t\t(f x y z)\n\t\t)\n\t)", "user": "5ac04101e4b073f177442737"}, {"problem": 66, "code": "(fn [a b]\n  (let [dv (fn [x] (into #{} (filter #(zero? (rem x %)) (range 1 (inc x)))))\n        mx (clojure.set/intersection (dv a) (dv b))]\n    (apply max mx)))", "user": "5ae246b1e4b0837691e92c5d"}, {"problem": 66, "code": "(fn r [& nums] (let [nums (sort > nums)]\n                  (let [nums (remove #(= % 0) nums)] (if (-> nums (count) (= 1))\n                     (first nums)\n                     (recur (cons (- (first nums) (second nums)) (rest nums)))))))", "user": "5831846ae4b051871117c02c"}, {"problem": 66, "code": "(fn gcd[a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))\n    ))", "user": "53d5d43ce4b0e771c302544d"}, {"problem": 66, "code": "#(loop [a (max %1 %2)\n        b (min %1 %2)\n        r (rem a b)]\n   (if (= r 0)\n     b\n     (recur b r (rem b r))))", "user": "5991eec7e4b0866487ed0d6e"}, {"problem": 66, "code": "(fn [a b]\n  (loop [a a, b b]\n    (if (zero? (* a b))\n      a\n      (if (> a b)\n      \t(recur (- a b) b)\n        (recur a (- b a))))))", "user": "5a7ae674e4b03baeef9276d5"}, {"problem": 66, "code": "(fn [a b]\n    (loop [i (min a b)]\n      (if (and (= (rem a i) 0) (= (rem b i) 0))\n        i\n        (recur (dec i)))))", "user": "5aefdc8de4b0cc2b61a3bc40"}, {"problem": 66, "code": "(fn\n  [x y]\n  (->> (reverse (range 1 (max x y)))\n       (some #(when (every? zero? [(mod x %) (mod y %)]) %))))", "user": "5ae47c1de4b0837691e92c81"}, {"problem": 66, "code": "(fn gcd [a b]\n   (cond\n     (zero? a) b\n     (zero? b) a\n     (or (= 1 a) (= 1 b)) 1\n     :else (recur b (mod a b))))", "user": "5aba04dce4b073f17744269e"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5adf5f9be4b0837691e92c33"}, {"problem": 66, "code": "(fn [n1 n2] \n  (last (filter #(and (= 0 (mod n1 %)) (= 0 (mod n2 %)))\n                (take-while #(>= (min n1 n2) %) (iterate inc 1)))))", "user": "5af31955e4b0cc2b61a3bc7a"}, {"problem": 66, "code": "#(loop [a %1\n        b %2]\n   (if (= b 0)\n     a\n     (recur b (mod a b))))", "user": "5aeca4c9e4b0cc2b61a3bc0a"}, {"problem": 66, "code": "(fn [a b]\n  (cond\n    (= 0 b) a\n    (< a b) (recur b a)\n    (> a b) (recur (mod a b) b)))", "user": "5649b1b0e4b0284900eef646"}, {"problem": 66, "code": "(fn\n  [a b]\n  (let [x (min a b)]\n    (loop [r 1 i 1]\n      (if (> i x)\n        r\n        (if (= 0 (mod a i) (mod b i))\n          (recur i (inc i))\n          (recur r (inc i)))))))", "user": "5af907e6e4b0cc2b61a3bcda"}, {"problem": 66, "code": "(fn [a b]\n  (loop [i (min a b)]\n    (if\n      (= 0 (+ (rem a i) (rem b i)))\n      i\n      (recur (dec i))\n    )\n  )\n)", "user": "5a353bdae4b0ddc586f153d9"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n    (zero? a) b\n    (zero? b) a\n    (= a b) a\n    (and (even? a) (even? b)) (* 2 (gcd (/ a 2) (/ b 2)))\n    (and (odd? a) (odd? b) (> a b)) (gcd (/(- a b) 2) b)\n    (and (odd? a) (odd? b) (> b a)) (gcd (/(- b a) 2) a)\n    (and (even? a) (odd? b)) (gcd (/ a 2) b)\n    (and (odd? a) (even? b)) (gcd a (/ b 2))))", "user": "5adcc688e4b0837691e92c05"}, {"problem": 66, "code": "(fn\n    [n1 n2]\n    (if (zero? n2)\n      n1\n      (recur n2 (rem n1 n2))))", "user": "5a9d64c8e4b0d174b936c7eb"}, {"problem": 66, "code": "#(loop [a %1 b %2] (if (zero? b) a (recur b (mod a b))))", "user": "5afb4b15e4b0cc2b61a3bcf6"}, {"problem": 66, "code": "(fn [x y]\n   (let [big (max x y) small (min x y)]\n     (loop [result small]\n        (if (= result 1)\n          result\n          (if (and (zero? (mod big result)) (zero? (mod small result)))\n             result\n             (recur (dec result)))))))", "user": "5aa4a1ffe4b0d174b936c886"}, {"problem": 66, "code": "#(loop [gcd (min %1 %2)] (if (= (rem %1 gcd) (rem %2 gcd) 0) gcd (recur (dec gcd))))", "user": "5b008bcae4b0cc2b61a3bd3d"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (rem a b))))", "user": "5af8221ce4b0cc2b61a3bccd"}, {"problem": 66, "code": "(fn [a b] (let [r (range 1 (if (> a b) (inc b) (inc a)))] (apply max (map #(if (= (mod a %) (mod b %) 0) % 0) r))))", "user": "57086931e4b0b0fb43fd069e"}, {"problem": 66, "code": "(fn GCD\n  [a b]\n  (cond\n    (= b 0) a\n    :else (GCD b (mod a b))))", "user": "5b02a170e4b0cc2b61a3bd52"}, {"problem": 66, "code": "(fn [x y]\n  (if (zero? y)\n    x\n    (recur y (rem x y))))", "user": "5af74644e4b0cc2b61a3bcc2"}, {"problem": 66, "code": "(fn g [a b]\n  (if (= 0 b) a (g b (rem a b))))", "user": "55e732c5e4b050e68259b492"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (if (> b a)\n    (recur b a)\n    (if (= b 0)\n      a\n      (recur b (mod a b)))))", "user": "5afcd6d1e4b0cc2b61a3bd17"}, {"problem": 66, "code": "(fn gcd [m n]\n  (let [x (max m n) y (min m n)]\n   (if-not (zero? (mod x y))\n     (gcd y (mod x y)) y)))", "user": "5b0180cfe4b0cc2b61a3bd47"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "59d9dcfbe4b0ef0a1e9b5c5d"}, {"problem": 66, "code": "(fn gcd [a b]\n(letfn [(div [x y d] \n(if (and (= 0 (mod x d) ) \n(= 0 (mod y d))) d 1))]\n(apply max \n(map #(div a b %) (range 1 (inc a)))\n)))", "user": "583048d9e4b051871117c007"}, {"problem": 66, "code": "(fn euclid [a b]\n    (if (= b 0)\n        a\n        (euclid b (mod a b))))", "user": "5b083513e4b0cc2b61a3bdb4"}, {"problem": 66, "code": "(fn x [a b]\n   (let [s (min a b)\n         l (max a b)\n         possible (filter #(= 0 (mod s %)) (take-while (fn [y] (<= y s)) (iterate inc 1)))]\n   (loop [p (reverse possible)]\n     (if (= 0 (mod l (first p)))\n       (first p)\n       (recur (rest p))))))", "user": "5b0bea6de4b0cc2b61a3bdda"}, {"problem": 66, "code": "(fn gcd [m n] (if (zero? n) m (recur n (mod m n))))", "user": "5b0e6795e4b0cc2b61a3be03"}, {"problem": 66, "code": "#(if (= % %2) % (if (> % %2)(recur (- % %2) %2)(recur % (- %2 %))))", "user": "5b0546eae4b0cc2b61a3bd7e"}, {"problem": 66, "code": "(fn f [x y]\n  (let [dividend (max x y), divisor (min x y)]\n    (loop [remain (rem dividend divisor)\n           new-divident divisor]\n      (if (zero? remain)\n        new-divident\n        (recur (rem new-divident remain)\n               remain)))))", "user": "5777c3d6e4b0979f8965164f"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5b1619e4e4b0cc2b61a3be77"}, {"problem": 66, "code": "(fn gcd [x y]\n  (let [divisors (fn [n]\n                     (->> (range 1 (inc n))\n                          (filter (fn [h] (= 0 (rem n h))))\n                          (into #{})))\n        div-x (divisors x)\n        div-y (divisors y)]\n      (reduce max\n        (clojure.set/intersection div-x div-y))))", "user": "5b15811ee4b0cc2b61a3be6f"}, {"problem": 66, "code": "(fn gcd [a b] \n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5b0b8d29e4b0cc2b61a3bdd7"}, {"problem": 66, "code": "(fn gcd [num1 num2]\n  (loop [i (min num1 num2)]\n    (if (> i 0)\n      (cond\n        (and (integer? (/ num1 i)) (integer? (/ num2 i))) i\n        :else (recur (dec i))))))", "user": "5b1674a3e4b038aa55420d55"}, {"problem": 66, "code": "(fn [x y]\n  (first (filter #(= 0 (mod x %1) (mod y %1))\n                 (reverse (range 1 (inc (min x y))))\n                 )))", "user": "56aad332e4b03c432f187337"}, {"problem": 66, "code": "(fn [a b] (last (filter #(and (= 0 (rem a %)) (= 0 (rem b %))) (range 1 (+ (min a b) 1)))))", "user": "5b198eace4b03cfeda66ecbb"}, {"problem": 66, "code": "(fn f [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "user": "570eeb66e4b0b0fb43fd06fa"}, {"problem": 66, "code": "(fn [x y]\n  (->>\n    (min x y)\n    (inc)\n    (range 1)\n    (filter #(and (zero? (mod x %)) (zero? (mod y %))))\n    (last)\n    )\n  )", "user": "5b118b7be4b0cc2b61a3be34"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? a)\n    b\n    (recur (mod b a) a)))", "user": "5b22328ee4b03cfeda66ed5d"}, {"problem": 66, "code": "(fn [a b]\n  (loop [x (max a b) y (min a b)]\n    (if (= y 0) x (recur y (mod x y)))\n    )\n  )", "user": "5b210749e4b03cfeda66ed48"}, {"problem": 66, "code": "(fn gcd [x y]\n  (let [stop (min x y)]\n    (loop [i 2\n           found 1]\n      (if (> i stop)\n        found\n        (if (and (= 0 (rem x i)) (= 0 (rem y i)))\n          (recur (inc i) i)\n          (recur (inc i) found))))))", "user": "5b1d61b3e4b03cfeda66ecfe"}, {"problem": 66, "code": "(fn [a b]\n   (let [divisors (fn [n] (->> (range 1 (inc n)) (filter #(= 0 (rem n %)))))]\n   (apply max (clojure.set/intersection (set (divisors a)) (set (divisors b)) ))))", "user": "56b280e3e4b0982f16b37e06"}, {"problem": 66, "code": "#(last (filter (fn [a] (= (mod %2 a) 0)) (filter (fn [a] (= (mod %1 a) 0)) (range 1 (inc %)))))", "user": "5afdb2bae4b0cc2b61a3bd1f"}, {"problem": 66, "code": "(fn func [x y] (if (zero? y) x (func y (mod x y))))", "user": "5addadfce4b0837691e92c13"}, {"problem": 66, "code": ";;  Euclid's Algorithm\n  (fn gcd [a b]\n     (cond\n       (= a b) a\n       (> a b) (recur (- a b) b)\n       :else\n       (recur a (- b a))))", "user": "4e6a23d0535d8ccf87e9fea0"}, {"problem": 66, "code": "(fn [a b]\n   (loop [cnt 1\n          res 1]\n     (if (or (> cnt a) (> cnt b))\n       res\n       (recur (inc cnt)\n              (if (and (= 0 (mod a cnt)) (= 0 (mod b cnt)))\n                cnt\n                res)))))", "user": "5b34aba7e4b025bcb146f352"}, {"problem": 66, "code": "(fn\n  [n1 n2]\n  (if (> n1 n2)\n    (last (filter #(and (= 0 (rem n1 %)) (= 0 (rem n2 %))) (range 1 n1)))\n    (last (filter #(and (= 0 (rem n1 %)) (= 0 (rem n2 %))) (range 1 n2)))))", "user": "5adbbf89e4b0837691e92bf4"}, {"problem": 66, "code": "(fn gcd [a b]\n\t(cond\n\t\t(< a b) (gcd b a)\n\t\t(= b 0) a\n\t\t:else (gcd b (mod a b))))", "user": "59769d75e4b01722bebd4cdd"}, {"problem": 66, "code": "(fn [a b]\n    (last \n     (filter #(= 0 (+\n                    (mod b %)\n                    (mod a %))) (range 1 (inc (min a b))))))", "user": "59e8a952e4b0249b72820733"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0) \n       a\n       (recur b (rem a b))))", "user": "5b2c79c6e4b025bcb146f2b7"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond (= a 0) b\n        (< b a) (gcd b a)\n        (< a b) (gcd a (- b a))\n        true a))", "user": "5b3f2ba9e4b02d533a91bc09"}, {"problem": 66, "code": "(fn [a,b]\n  (cond (= 0 b) a\n        :else (recur b (rem a b))))", "user": "4e1e89a2535d04ed9115e809"}, {"problem": 66, "code": "#( loop [ a %1 b %2 ] ( if (= b 0) a (recur b (mod a b) ) ) )", "user": "5b3aa98be4b02d533a91bbca"}, {"problem": 66, "code": "(fn [a b]\n           (if (= b 0)\n             a\n             (recur b (rem a b))))", "user": "57f904c5e4b0d3187e900936"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0) a\n      (gcd b (mod a b))))", "user": "5b47874be4b02d533a91bc70"}, {"problem": 66, "code": "(fn\n  [& args]\n  (apply max (filter\n              #(not (some (fn [check] (> (mod check %) 0)) args))\n              (range 1 (inc (apply min args))))))", "user": "5b465b8be4b02d533a91bc65"}, {"problem": 66, "code": "(fn [a b]\n (->> \n   (map #(set (for [f (range 1 (+ 1 %)) :when (zero? (mod % f))] f))   [a b])\n   (reduce clojure.set/intersection)\n   (apply max)))", "user": "5b4bb061e4b02d533a91bca0"}, {"problem": 66, "code": "(fn [a b]\n  (apply max\n         (filter #(and (= 0 (rem a %))\n                       (= 0 (rem b %)))\n           (range 1 (+ 1 (max a b))))))", "user": "5b0948f3e4b0cc2b61a3bdbb"}, {"problem": 66, "code": "#(letfn [\n         (factor? [f x] (= 0 (mod x f)))\n         (factors[x]\n           (loop [i 1 res #{}]\n             (if (> i x)\n               res\n               (recur (+ i 1)\n                      (if (factor? i x)\n                        (conj res i)\n                        res)))))]\n   (apply max(clojure.set/intersection (factors %1) (factors %2)))\n   )", "user": "5b4a0ce3e4b02d533a91bc92"}, {"problem": 66, "code": "(fn gcd [a b] (if (< a b)\n                (gcd b a)\n                (if (= 0 b)\n                  a\n                  (gcd b (mod a b)))))", "user": "5b4b4052e4b02d533a91bc9a"}, {"problem": 66, "code": "(fn [ax bx]\n  (loop [a (max ax bx)\n         b (min ax bx)]\n    (if-not (= (mod a b) 0)\n            (recur a (mod a b))\n            b)))", "user": "51316a63e4b0431ba07e7feb"}, {"problem": 66, "code": "(fn gcd [a b] (if (= a 0) b (gcd (mod b a) a)))", "user": "5b421edce4b02d533a91bc2c"}, {"problem": 66, "code": "(fn [a b]\n  (loop [i (min a b) x a y b]\n    (if (and (= 0 (mod x i)) (= 0 (mod y i))) \n      i\n     (recur (- i 1) x y)\n     )))", "user": "54d5fbe9e4b0a52adc2e2014"}, {"problem": 66, "code": "(fn [x y]\n  (loop [m (max x y)]\n    (if (not= 0 (rem x m) (rem y m))\n      (recur (dec m))\n      m)))", "user": "5b552e2ee4b02d533a91bd2e"}, {"problem": 66, "code": "(fn [numOne numTwo]\n  (reduce #(if (= 0 (+ (rem numOne %2) (rem numTwo %2))) %2 %1) (rest (range (inc (max numOne numTwo))))))", "user": "5b3de9a7e4b02d533a91bbf4"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n      a\n      (recur b (mod a b))))", "user": "5b51b9f8e4b02d533a91bcfe"}, {"problem": 66, "code": "(fn [x1 x2]\n  (loop [gcd (if (< x1 x2) x1 x2)]\n    (if (and  (= (rem x1 gcd) 0) (= (rem x2 gcd) 0))\n      gcd\n      (recur (- gcd 1)))))", "user": "59ed823ee4b0249b728207a1"}, {"problem": 66, "code": "(fn [a b]\n  (if (= 0 b) a\n    (recur  b (mod a b))))", "user": "5b4ff637e4b02d533a91bce0"}, {"problem": 66, "code": "(fn [a b]\n  (loop [x (max a b) y (min a b)]\n    (let [m (mod x y)]\n  \t  (if (= m 0) y (recur x (mod x m))))))", "user": "5b552117e4b02d533a91bd2c"}, {"problem": 66, "code": "(fn [a b] \n  (last\n    (filter \n      #(if \n        ( and (= 0 (mod a %)) (= 0 (mod b %)) )% \n        nil)\n      (range 1 (+ a 1))\n    )\n  )\n           )", "user": "5b58b271e4b02d533a91bd6e"}, {"problem": 66, "code": "(fn\n  [n1 n2]\n  (let [n1-divisors (set ((fn [n] (filter (comp zero? (partial rem  n)) (range 1 (+ 1 n) ))) n1))\n        n2-divisors (set ((fn [n] (filter (comp zero? (partial rem  n)) (range 1 (+ 1 n) ))) n2))\n        common-divisors (clojure.set/intersection n1-divisors n2-divisors)]\n    (apply max common-divisors)))", "user": "5acc961ae4b0e27600da7810"}, {"problem": 66, "code": "#(loop [a (max %1 %2)\n        b (min %1 %2)\n        r (rem a b)]\n   (if (= r 0)\n     b\n     (recur b r (rem b r))))", "user": "59bcbfd0e4b0a024fb6ae419"}, {"problem": 66, "code": "(fn [x y] \n  (loop [i (inc (max x y))] \n    (if (and (= 0 (mod x i)) \n             (= 0 (mod y i))) \t\n      i \n      (recur (dec i)))))", "user": "53307a23e4b019098a6f8b5d"}, {"problem": 66, "code": "#(.gcd (biginteger %1) (biginteger %2))", "user": "5aeb0b44e4b0cc2b61a3bbee"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (mod a b))))", "user": "5b500215e4b02d533a91bce2"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (mod a b))))", "user": "5b596d0ce4b02d533a91bd7a"}, {"problem": 66, "code": "(fn f [a b]\n  (cond\n    (= 0 a)\n    b\n    \n    (= 0 b)\n    a\n    \n    (> a b)\n    (f (- a b) b)\n\n    :else\n    (f a (- b a))))", "user": "5ab1665de4b073f1774425c0"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0) a (recur b (mod a b))))", "user": "5b59c513e4b02d533a91bd81"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "57a6552ce4b0a96607956208"}, {"problem": 66, "code": "(fn [a b] (if (zero? a) b (recur (mod b a) a)))", "user": "5b5e7953e4b0c6492753e6d9"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b, (mod a b))\n    )\n  )", "user": "5b3251c1e4b025bcb146f317"}, {"problem": 66, "code": "(fn [a b] \n  (cond \n   (zero? a) b\n   (zero? b) a\n   :else (recur b (rem a b))))", "user": "5b59d176e4b02d533a91bd86"}, {"problem": 66, "code": "(fn [x y] (if (zero? y) x (recur y (mod x y))))", "user": "5b61aa6ae4b0c6492753e712"}, {"problem": 66, "code": "(fn gcd [x y]\n ( (fn is-it-np [n]\n    (if\n      (and\n       (= 0 (mod x n))\n       (= 0 (mod y n))\n       )\n      n\n      (recur (dec n))\n      )\n    )\n  y)\n  )", "user": "5b5e5019e4b0c6492753e6d3"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (rem a b))))", "user": "5b58d012e4b02d533a91bd71"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (rem a b))))", "user": "56e2ca59e4b03a7c14b85a38"}, {"problem": 66, "code": "(fn [n1 n2]\n    (let [fd #(filter (comp zero? (partial rem %)) (range 1 (+ % 1)))\n          d1 (set (fd n1))\n          d2 (set (fd n2))]\n      (apply max (clojure.set/intersection d1 d2))))", "user": "5b611666e4b0c6492753e70d"}, {"problem": 66, "code": "(fn [x y]\n  (some #(when (and (zero? (mod x %)) (zero? (mod y %))) %) (range x 0 -1)))", "user": "5b2689e3e4b063e2438bcc33"}, {"problem": 66, "code": "(fn highest-divisor\n  [num1 num2]\n  (let [smaller (min num1 num2)\n        valid-divisor? (fn [divisor] \n          (and \n            (zero? (rem num1 divisor))\n            (zero? (rem num2 divisor))))]\n        (apply max (filter valid-divisor? (range 1 (inc smaller))))))", "user": "5a3c06fce4b001c08efc0cdd"}, {"problem": 66, "code": "(fn [x y]\n  (if(zero? y) x (recur y (rem x y))))", "user": "5b6473eee4b0c6492753e73f"}, {"problem": 66, "code": "(fn [a b]\n  (loop [x a\n         y b]\n    (if (<= y 0)\n      x\n      (recur y (mod x y)))))", "user": "5b67d634e4b0c6492753e76b"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    (Math/abs a)\n    (recur b (rem a b))))", "user": "5b7292b3e4b047b03b2036a4"}, {"problem": 66, "code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "user": "5b738329e4b047b03b2036b6"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n      a\n      (recur b (mod a b))))", "user": "5b772ad7e4b047b03b2036e8"}, {"problem": 66, "code": "(fn [x y] (loop [cnt (min x y)] (if (= 0 (rem x cnt) (rem y cnt)) cnt (recur (dec cnt)))))", "user": "5b4c2212e4b02d533a91bca6"}, {"problem": 66, "code": "(fn [a b] (loop [a a b b]\n            (cond (= a b)\n                  a\n                  (> a b)\n                  (recur (- a b) b)\n                  :else\n                  (recur a (- b a)))))", "user": "5b7ec039e4b047b03b20375d"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5b64370ae4b0c6492753e73c"}, {"problem": 66, "code": "(fn [a b] (loop [gcd (max a b)] (if (and (= (rem a gcd) 0) (= (rem b gcd) 0)) gcd (recur (dec gcd)))))", "user": "5b284375e4b063e2438bcc53"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5b73e500e4b047b03b2036ba"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (if (< a b)\n    (gcd b a)\n    (let [c (rem a b)]\n      (if (= c 0)\n        b\n        (gcd b c)))))", "user": "5a085dfde4b01bb0ae8afdf4"}, {"problem": 66, "code": "(fn [x y] (let [vecA\n                 (filter (complement nil?) (map (fn [a] (if (= 0 (rem x a)) a)) (range 1 (+ x 1))))\n                 vecB\n                 (filter (complement nil?) (map (fn [a] (if (= 0 (rem y a)) a)) (range 1 (+ y 1))))\n                 ]\n             (apply max (set (filter (set vecA) (set vecB))))))", "user": "5b7ed20fe4b047b03b203760"}, {"problem": 66, "code": "#(first (filter (fn [x] (and (zero? (mod %1 x)) (zero? (mod %2 x))) ) (range (min %1 %2) 0 -1)))", "user": "5b7bc82ce4b047b03b203726"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5b83c11ae4b047b03b2037b7"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [m (min a b)\n        n (max a b)]\n\t(cond (= m n) m\n          (= 0 (mod n m)) m\n          (= 1 (mod n m)) 1\n          :else (gcd m (mod n m)))))", "user": "5b333626e4b025bcb146f32f"}, {"problem": 66, "code": "(fn __[a b](if(< a b)\n               (last (\n                     filter\n                     (fn[x](zero?(mod b x)))\n                     (filter\n                      #(zero? (mod a %))\n                      (range 1 (inc a))\n                      )))\n               (last (\n                     filter\n                     (fn[x](zero?(mod a x)))\n                     (filter\n                      #(zero? (mod b %))\n                      (range 1 (inc b))\n                      )))\n               ))", "user": "5826a843e4b051871117befd"}, {"problem": 66, "code": "(fn [x y]\n  (loop [x x y y m (max x y)]\n    (if (and (integer? (/ x m)) (integer? (/ y m)))\n     m\n     (recur x y (dec m)))))", "user": "5a084a24e4b01bb0ae8afdf2"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5b88f0c0e4b047b03b203816"}, {"problem": 66, "code": "(fn [a b] (first (filter #(and (zero? (mod a %)) (zero? (mod b %))) (range a 0 -1))))", "user": "5b754f8ee4b047b03b2036c9"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n   (= a b) a\n   (> a b) (gcd (- a b) b)\n   (> b a) (gcd a (- b a))\n   )\n  )", "user": "5b857411e4b047b03b2037ce"}, {"problem": 66, "code": "(fn [a b]\n  (let [[x y] (if (< a b) [a b] [b a])]\n  (loop [z 1\n         result []]\n    (if (> z x)\n      (last result)\n      (if (and (= 0 (mod x z))\n               (= 0 (mod y z)))        \n        (recur (inc z) (conj result z))\n        (recur (inc z) result))))))", "user": "599342efe4b0b211ea3aaab0"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "user": "578dc040e4b0ebec4cfb756d"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (rem a b))))", "user": "5b985fe5e4b0c0b3ffbd4ab1"}, {"problem": 66, "code": "(fn gcd* [a b]\n  (cond\n    (< a b) (recur a (- b a))\n    (> a b) (recur (- a b) b)\n    :else a))", "user": "5b97c521e4b0c0b3ffbd4a9a"}, {"problem": 66, "code": "(fn gcd\n  [x y]\n  (let [min (if (< x y) x y)\n        max (if (> x y) x y)\n        remainder (mod max min)]\n    (if (= 0 remainder)\n      min\n      (gcd min remainder))))", "user": "59b93cd7e4b0a024fb6ae3c7"}, {"problem": 66, "code": "(fn [a b]\n    (let [m (max a b)\n          n (min a b)]\n      (loop [larger m\n             smaller n]\n        (if (= 0 (mod larger smaller))\n          smaller\n          (recur smaller (mod larger smaller))))))", "user": "592ac17ae4b072a2710fcf26"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [c (rem a b)]\n    (if (= 0 c) b (gcd b c))))", "user": "5b9db58be4b0c0b3ffbd4b41"}, {"problem": 66, "code": "(fn [x y] (if (zero? y) x (recur y (mod x y))))", "user": "5b77d3c8e4b047b03b2036f1"}, {"problem": 66, "code": "(fn [n1 n2]\n   (loop [n1 n1\n          n2 n2]\n     (if (zero? n2)\n       n1\n       (recur n2 (rem n1 n2)))))", "user": "5b96800ae4b0c0b3ffbd4a7b"}, {"problem": 66, "code": "(fn [a b]\n    (loop [a a b b cand (min a b)]\n      (if (= (mod a cand) (mod b cand) 0)\n        cand\n        (recur a b (dec cand)))))", "user": "5b999af8e4b0c0b3ffbd4ad3"}, {"problem": 66, "code": "#(loop [div (max %1 %2)]\n   (if (and (= 0 (mod %1 div)) (= 0 (mod %2 div)))\n     div\n     (recur (dec div))))", "user": "5b855800e4b047b03b2037cd"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [c (Math/abs (- a b))]\n    \n    (if (or (= a c) (= b c)) \n      c\n      (gcd (min a b) c) )\n    \n    ))", "user": "570d0548e4b0b0fb43fd06d2"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [isdivisor? (fn [m n] (= (/ m n) (int (/ m n))))\n        divisors (fn [n] (filter #(isdivisor? n %) (range 1 (inc n))))\n        divisors-a (set (divisors a))\n        divisors-b (set (divisors b))]\n    (apply max (clojure.set/intersection divisors-a divisors-b))))", "user": "5b9bcba8e4b0c0b3ffbd4b07"}, {"problem": 66, "code": "(fn gcd [x y]\n\t(cond \n\t\t(> x y) (recur (- x y) y)\n\t\t(< x y) (recur x (- y x))\n\t\t:else x))", "user": "5b975c6ee4b0c0b3ffbd4a91"}, {"problem": 66, "code": "(fn f [a b]\n  (if (= b 0)\n    a\n    (f b (mod a b))))", "user": "5b99a0a3e4b0c0b3ffbd4ad7"}, {"problem": 66, "code": "; https://en.wikipedia.org/wiki/Euclidean_algorithm\n\n(fn gcd [x y]\n  (if (zero? y)\n    x\n    (recur y (mod x y))))", "user": "5a91988ae4b002d099cae6f9"}, {"problem": 66, "code": "(fn greatest-common-divisor [x y]\n  (loop [a x b y]\n    (if (zero? b)\n      a\n      (recur b (mod a b)))))", "user": "5a0ef454e4b04bbd27e6d9fa"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "58182480e4b0c0e9c07b83a7"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a \n    (recur b (mod a b))))", "user": "5b8d01d7e4b0c0b3ffbd49ca"}, {"problem": 66, "code": "(fn [& args]\n   (apply max\n          (apply clojure.set/intersection\n            (map (fn [a] (->> a\n                              (Math/sqrt)\n                              (inc)\n                              (range 1)\n                              (filter #(zero? (mod a %)))\n                              (mapcat #(vector % (/ a %)))\n                              (into (sorted-set))))\n                 args))))", "user": "5b2a559be4b063e2438bcc74"}, {"problem": 66, "code": "(fn [a b] (first (filter #(and (zero? (mod a %)) (zero? (mod b %))) (reverse (range 1 (inc (min a b)))))))", "user": "5b919d9de4b0c0b3ffbd4a24"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5bab5440e4b0a20761a23475"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5ba947bfe4b0a20761a23440"}, {"problem": 66, "code": "(fn gcd [x y]\n  (->> (range 1 (inc (min x y)))\n       (filter #(= 0 (mod x %) (mod y %)))\n       (last)))", "user": "5b602a66e4b0c6492753e6fc"}, {"problem": 66, "code": "(fn [l r]\n  (loop [div (max l r)]\n    (if (and (= 0 (rem l div)) (= 0 (rem r div)))\n      div\n      (recur (dec div)))))", "user": "57481f1fe4b009280f9f2b82"}, {"problem": 66, "code": "#(first (for [x (range (max %1 %2) 0 -1) :when (and (= 0 (rem %1 x)) (= 0 (rem %2 x)))] x))", "user": "5b77248ae4b047b03b2036e7"}, {"problem": 66, "code": "(fn gcd [a b] (if (= a b) a (recur (Math/abs (- a b)) a)))", "user": "5bafd5c8e4b0a20761a234dd"}, {"problem": 66, "code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "user": "5b81139fe4b047b03b203782"}, {"problem": 66, "code": "(fn gcd [x y] (let [d (Math/abs (- x y)) m (min x y)]\n                        (if (zero? d) x (gcd d m))))", "user": "5b924123e4b0c0b3ffbd4a34"}, {"problem": 66, "code": "(fn\n  [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5b759ca8e4b047b03b2036d0"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5951190be4b066ee0a44aea4"}, {"problem": 66, "code": "(fn [a b] (let [r (/ a b)] (if (ratio? r) (/ a (numerator r)) b)))", "user": "57c647bbe4b05aa3c4741cf3"}, {"problem": 66, "code": "(fn [a b] (->> [a b] \n    (iterate (fn [[a b]]\n          [b (mod a b)]))\n    (drop-while #(not (zero? (second %))))\n    ffirst\n    ))", "user": "5bbbce0ee4b0a20761a2360d"}, {"problem": 66, "code": "(fn [a b]\n        (apply max (for [d (range 1 (inc (min a b)))\n            :when (= 0 (mod a d) (mod b d))]\n            d)))", "user": "5a66fddee4b0512ff01cd9d7"}, {"problem": 66, "code": "(fn [a b]\n  (last\n      (filter \n        (fn [e] (= 0 (mod a e) (mod b e))) \n        (range 1 (inc (min a b))))))", "user": "5a68f374e4b0512ff01cda05"}, {"problem": 66, "code": "(fn gcd\n ; \"Takes two positive integer arguments a and b as arguments, where a > 0 and b > 0. It returns the greatest common divisor (GCD) of a and b.\"\n  [a b]\n  (last (filter #(and (zero? (mod b %)) (zero? (mod a %)))\n                (range 1 (inc (min a b))))))", "user": "5bbbcecee4b0a20761a23611"}, {"problem": 66, "code": "(letfn [(divisor?\n         [n d]\n         (= 0 (mod n d)))\n        (divisors\n         [n]\n         (filter (partial divisor? n) (map inc (range n))))]\n  #(let [d1 (-> (divisors %1)\n                sort\n                reverse)\n         d2 (-> (divisors %2)\n                sort\n                reverse)]\n     (some (fn [x]\n             (some (fn [y]\n                     (when (= x y)\n                       y))\n                   d2))\n           d1)))", "user": "5829d9f8e4b051871117bf4d"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= 0 a)\n    b\n    (recur (mod b a) a)\n  )\n )", "user": "5b9c4a7be4b0c0b3ffbd4b16"}, {"problem": 66, "code": "(fn divisor\n  [num1 num2]\n  (if (zero? num2)\n    num1\n    (divisor num2 (mod num1 num2))))", "user": "5bbbce70e4b0a20761a2360f"}, {"problem": 66, "code": "(fn gcd [a b] (if (= 0 b) a (gcd b (mod a b))))", "user": "5bc39d2be4b07a9b28b10045"}, {"problem": 66, "code": "(fn [n1 n2]\n  (let [divfunc (fn [n] (filter #(zero? (rem n %)) (range 1 (inc n))))\n        firstdiv (divfunc n1)\n        secondiv (divfunc n2)]\n    (apply max (clojure.set/intersection (set firstdiv) (set secondiv)))))", "user": "5b85221ce4b047b03b2037c8"}, {"problem": 66, "code": "#(last (reduce (fn [a b]\n                  (cond\n                    (< a b)\n                    (if (= 0 (rem b a))\n                      [a]\n                      (conj [b a] (rem b a) (rem a (rem b a))))\n\n                    (= 0 (rem a b))\n                    [b]\n\n                    :else (conj [a b] (rem a b) (rem b (rem a b))))) [%1 %2]))", "user": "5a03d246e4b01bb0ae8afd8c"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  ; \"Given two integers, is a function which returns the greatest common divisor\"\n  (last (filter #(and (zero? (mod b %)) (zero? (mod a %)))\n                (range 1 (inc (min a b))))))", "user": "5bbbd077e4b0a20761a23615"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5bbbba29e4b0a20761a23609"}, {"problem": 66, "code": "(fn [x y]\n  (cond\n    (= x y) x\n    (> x y) (recur (- x y) y)\n    :else (recur x (- y x))))", "user": "5bb3c9a8e4b0a20761a2352f"}, {"problem": 66, "code": "(fn gcd [x y]\n  (if (= y 0)\n    x\n    (gcd y (mod x y))))", "user": "587fb546e4b0f1effa3b75f9"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (->> (range 1 (inc (min a b)))\n       (filter #(= 0 (mod a %) (mod b %)))\n       (last)\n       )\n  )", "user": "5bc8c033e4b07a9b28b100ca"}, {"problem": 66, "code": "(fn\n  [a b]\n  (apply max\n         (filter\n           #(and (zero? (mod b %)) (zero? (mod a %))) (range 1 (inc (min a b)))\n           )\n         )\n  )", "user": "5bbbce99e4b0a20761a23610"}, {"problem": 66, "code": "(fn [a b]\n   (if (= 0 b)\n     a\n     (recur b (mod a b))))", "user": "5bc82994e4b07a9b28b100b9"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (< a b)\n    (gcd a (- b a))\n    (if (= a b)\n      a\n      (gcd b a))))", "user": "543a8256e4b032a45b869327"}, {"problem": 66, "code": "(fn [a b] (last (filter #(and (= (mod b %) 0) (= (mod a %) 0))\n                  (range 1 (+ (min a b) 1)))))", "user": "5bbc0ddfe4b0a20761a2361e"}, {"problem": 66, "code": "(fn gcd [a b] \n\t(if (= b 0) a (gcd b (mod a b)))\n)", "user": "5bbbd484e4b0a20761a23617"}, {"problem": 66, "code": "(fn [x y]\n  (->>\n     (range 1 (+ 1 (min x y)))\n     (filter #(and (= 0 (rem (max x y) %)) (= 0 (rem (min x y) %))))\n    (apply max)\n   )\n)", "user": "5bc28638e4b07a9b28b10033"}, {"problem": 66, "code": "(fn gcm\n  [a b]\n  (first (last (filter #(> (count %) 1) (partition-by identity (sort (concat (filter #(zero? (rem a %)) (range 1 (+ a 1))) (filter #(zero? (rem b %)) (range 1 (+ b 1)))))))))\n  )", "user": "5bbbcf9ee4b0a20761a23614"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a \n                (recur b (mod a b))))", "user": "5bc255b7e4b07a9b28b10029"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5bc50870e4b07a9b28b10069"}, {"problem": 66, "code": "(fn \n  [a b]\n  (last\n    (filter #(and (= (mod b %) 0) (= (mod a %) 0))\n            (range 1 (+ (min a b) 1)))))", "user": "5bcb672ee4b07a9b28b10100"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? (rem a b))\n  \tb\n  \t(recur b (rem a b))))", "user": "5958a0c8e4b066ee0a44af8c"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b) a\n    (recur b (mod a b))))", "user": "54ca35c6e4b057c6fda3a254"}, {"problem": 66, "code": "(fn [a b]\n  (let [get-divisor (fn [n] (into #{}\n                              (filter #(zero? (rem n %))\n                                      (range 1 (inc n)))\n                              ))\n        a-divisor (get-divisor a)\n        b-divisor (get-divisor b)\n        commom-divisor (clojure.set/intersection a-divisor b-divisor)]\n    (apply max commom-divisor)))", "user": "5bbbce60e4b0a20761a2360e"}, {"problem": 66, "code": "(fn [a b] (last (filter #(and (zero? (mod b %)) (zero? (mod a %))) (range 1 (inc (min a b))))))", "user": "5bc7ba68e4b07a9b28b100b0"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5bbbcf3ae4b0a20761a23612"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5a99c5a9e4b0d174b936c7b1"}, {"problem": 66, "code": "(fn [x y]\n  (loop [a x b y]\n    (if (zero? b)\n      a\n      (recur b (mod a b))\n      )\n    )\n  )", "user": "5bbbcf81e4b0a20761a23613"}, {"problem": 66, "code": "(fn [a b]\n  (if (= (mod a b) 0)\n    b\n    (recur b (mod a b))))", "user": "5bb5cd43e4b0a20761a23575"}, {"problem": 66, "code": "#(loop [p %1 q %2]\n   (let [a (min p q) b (max p q) r (rem b a)]\n     (if (zero? r) a (recur a r))))", "user": "5bc833a5e4b07a9b28b100bb"}, {"problem": 66, "code": "(fn [a b]\n  ((fn [x]\n    (if (and (zero? (mod a x)) (zero? (mod b x)))\n      x\n      (recur (dec x)))) (min a b)))", "user": "59a0286be4b0871e7608b82f"}, {"problem": 66, "code": "(fn [x y]\n  (loop [a x\n         b y]\n  \t(if (= b 0)\n    \ta\n    \t(recur b (mod a b)))))", "user": "593870e6e4b02506e01a29d6"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5b337ff4e4b025bcb146f339"}, {"problem": 66, "code": "#(loop [n %1 m %2 d %2]\n       (if (and (zero? (rem n d))(zero? (rem m d)))\n         d\n         (recur n m (dec d))))", "user": "567c63f6e4b05957ce8c61bb"}, {"problem": 66, "code": "#(loop [r1 %1 r2 %2] (if (= r2 1) 1 (if (> r2 r1) (recur r2 r1) (if (= (rem r1 r2) 0) r2 (recur r2 (rem r1 r2))))))", "user": "5a6b8a9ae4b0512ff01cda3f"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5bbdd136e4b07a9b28b0ffab"}, {"problem": 66, "code": "(fn [x y]\n  (let [small (if (< x y) x y)\n  \t\tbig (if (> x y) x y)]\n    (loop [b big s small]\n      (printf (str b s))\n      (if (= 0 (mod small s))\n        (if (or (= s 1) (= 0 (mod b s)))\n          s\n          (recur b (dec s)))\n        (recur b (dec s))))))", "user": "5bb948f5e4b0a20761a235d5"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a(recur b (mod a b))))", "user": "5be0306be4b0ed4b8aab4c7d"}, {"problem": 66, "code": "(fn [a b] (loop [a a b b]\n            (if (zero? b)\n              a\n              (recur b (rem a b)))))", "user": "5bdf651ee4b0ed4b8aab4c6d"}, {"problem": 66, "code": "(fn [x y]\n    (if (< x y)\n      (recur y x)\n      (let [m (mod x y)]\n        (if (= m 0)\n          y\n          (recur y\n                 m)))))", "user": "5be5cebde4b0ed4b8aab4d19"}, {"problem": 66, "code": "(fn gcommondiv [a b] (if (zero? b) a (recur b (mod a b))))", "user": "575f6a80e4b08062f99a4e80"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5bc7c3aee4b07a9b28b100b2"}, {"problem": 66, "code": "(fn gcd [x y] (if (= x y) x (let [a (max x y) b (min x y)] (gcd b (- a b)))))", "user": "5be6d0f8e4b0f319e2d7ec51"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0)\n    a\n   (recur b (mod a b))))", "user": "5be58beae4b0ed4b8aab4d14"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n   (< a b) (gcd b a)\n   (zero? b) a\n   true (gcd (- a b) b)))", "user": "54487527e4b032a45b8693cc"}, {"problem": 66, "code": "(fn [x y] (last (filter #(zero? (+ (mod x %) (mod y %))) (range 1 (inc (min x y))))))", "user": "5bd7b8b8e4b0ed4b8aab4bc6"}, {"problem": 66, "code": "#(some\n   (fn [d]\n     (if (and\n           (= (rem %1 d) 0)\n           (= (rem %2 d) 0))\n       d))\n   (range (max %1 %2) 0 -1))", "user": "5b60e88be4b0c6492753e70b"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [r (rem a b)]\n    (if (= r 0)\n      b\n      (recur b (rem a b)))))", "user": "5be33a16e4b0ed4b8aab4cd6"}, {"problem": 66, "code": "(fn f [a b] (if (= b 0) a (f b (rem a b))))", "user": "5b7d03a0e4b047b03b20373d"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (rem a b))))", "user": "5bf0aefde4b0a6d31fed215a"}, {"problem": 66, "code": "(fn gcd\n  ([a b]\n   (if (= a 0)\n     b\n     (gcd (mod b a) a))))", "user": "5bf5ddfde4b0bdcf453d159e"}, {"problem": 66, "code": "(fn gcd\n  ([a b] (gcd a b (max a b)))\n  ([a b end] (if (and\n                  (= (mod a end) 0)\n                  (= (mod b end) 0)) end (gcd a b (- end 1)))))", "user": "5be15f4de4b0ed4b8aab4c9b"}, {"problem": 66, "code": "(fn [a b]\n  (let [larger-num   (if (> a b) a b)\n        smaller-num  (if (> a b) b a)]\n    (loop [divisor smaller-num]\n      (if (every? zero? (list (mod larger-num divisor) (mod smaller-num divisor))) divisor\n          (recur (dec divisor))))))", "user": "596aaeefe4b069c0a1a19808"}, {"problem": 66, "code": "(fn gcd [l r]\n  (if (zero? r)\n    l\n    (gcd r, (mod l r))))", "user": "5bfa25fbe4b0bdcf453d15c8"}, {"problem": 66, "code": "(fn [x y]\n(let [factors (fn [y]\n                (reduce\n                 (fn [res x]\n                   (if (= (rem y x) 0)\n                     (conj res x) \n                     res))\n                 #{} (range 1 (inc y))))\n      intersect (fn [x y]\n                  (reduce (fn [res z]\n                            (if (x z)\n                              (conj res z)\n                              res    ))\n                          (sorted-set)\n                          y     ))]\n  (last (intersect (factors x) (factors y)))))", "user": "5b15ab32e4b0cc2b61a3be72"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond \n   (< a b) (gcd b a)\n   (= b 0) a\n   :else (gcd b (mod a b))))", "user": "5bf1b957e4b0a6d31fed216f"}, {"problem": 66, "code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "user": "5a09a6f7e4b01bb0ae8afe14"}, {"problem": 66, "code": "#(if (= 0 %1) %2\n   (recur (mod %2 %1) %1))", "user": "5ba15075e4b0a20761a2339e"}, {"problem": 66, "code": "(fn [n m]\n  (if (zero? m)\n    n\n    (recur m (mod n m))))", "user": "5c03e927e4b0bdcf453d167b"}, {"problem": 66, "code": "#(if (zero? %2) %1 (recur %2 (rem %1 %2)))", "user": "5a080bdde4b01bb0ae8afde9"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n  (zero? a) b\n  (zero? b) a\n  :else (gcd b (rem a b))))", "user": "5c01ba2ce4b0bdcf453d1656"}, {"problem": 66, "code": "(fn [a b]\n  (loop [a a\n         b b\n         d 1\n         r 0]\n    (if (or (> d b) (> d a))\n      r\n      (if (and (= (rem a d) 0) (= (rem b d) 0))\n        (recur a b (inc d) d)\n        (recur a b (inc d) r)))))", "user": "5ac9c737e4b0e27600da77d2"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n    (zero? b) a\n    :else (recur b (mod a b))))", "user": "5bea3177e4b0f319e2d7ec81"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5b57505ce4b02d533a91bd55"}, {"problem": 66, "code": "(fn [a b] (let [[x y] (sort [a b])] (first (filter #(= 0 (rem y %)) (map #(/ x %) (iterate inc 1))))))", "user": "5bfe4ecfe4b0bdcf453d1608"}, {"problem": 66, "code": "#(dec (last (take-while (fn [x] (not (and (= (mod %1 x) 0) (= (mod %2 x) 0)))) (iterate dec (max %1 %2)))))", "user": "594d4c57e4b07ddc2dafae87"}, {"problem": 66, "code": "(fn [x y] (if (zero? y) x (recur y (mod x y))))", "user": "52c03baee4b07a9af5792347"}, {"problem": 66, "code": "(fn [& args]\n  (let [maximum (apply max args), minimum (apply min args)]\n    (loop [fst maximum, snd minimum]\n        (if (zero? snd) \n          fst\n          (recur snd (mod fst snd))))))", "user": "5c13da47e4b01240ff5671a6"}, {"problem": 66, "code": "(fn [a b]\n    (if (zero? b)\n      a\n      (recur b (rem a b))))", "user": "5c165d3ee4b01240ff5671d1"}, {"problem": 66, "code": "(fn [x y]\n    (let [nums (sort (conj '() x y))]\n      (if (= 0 (mod (second nums) (first nums)))\n      (first nums)\n      (recur (first nums) (mod (second nums) (first nums))))))", "user": "58b985e0e4b0888cdc949ccc"}, {"problem": 66, "code": "#(last (filter (fn [x] (= 0 (mod %1 x) (mod %2 x))) (map inc (range (max %1 %2)))))", "user": "5c1aadcde4b01240ff567209"}, {"problem": 66, "code": "(fn gcd [n m]\n   (if (> m n)\n     (gcd m n)\n     (if (zero? m)\n       n\n       (gcd m (mod n m))\n     )\n   )\n )", "user": "5c0d0537e4b0bdcf453d173d"}, {"problem": 66, "code": "(fn [a b] (if (= b 0) a (recur b (mod a b))))", "user": "5b0bd9cfe4b0cc2b61a3bdd9"}, {"problem": 66, "code": "#(loop [n %1 m %2]\n   (cond\n    (= m 0) n\n    (>= n m) (recur (- n m) m)\n    (< n m) (recur m n)))", "user": "5c1edf23e4b0efcb0b05b25d"}, {"problem": 66, "code": "#(loop [a %1 b %2]\n   (if (zero? b)\n     a\n     (recur b (mod a b))))", "user": "54df2609e4b024c67c0cf7a9"}, {"problem": 66, "code": "(fn gcd\n  [num-one num-two]\n  \n  (last (sort (clojure.set/intersection \n  (set ((fn [num]\n  (loop [curr (int (Math/ceil (/ num 2)))\n         dems (cons num '())]\n    (if (= 1 curr)\n      (cons curr dems)\n      (if (= 0 (rem num curr))\n        (recur (dec curr) (cons curr dems))\n        (recur (dec curr) dems))))) num-one)) \n  (set ((fn [num]\n  (loop [curr (int (Math/ceil (/ num 2)))\n         dems (cons num '())]\n    (if (= 1 curr)\n      (cons curr dems)\n      (if (= 0 (rem num curr))\n        (recur (dec curr) (cons curr dems))\n        (recur (dec curr) dems))))) num-two))))))", "user": "5c1d9f05e4b0efcb0b05b24c"}, {"problem": 66, "code": "(fn greatest-common-devider\n  [v1 v2]\n  (apply max\n    (for [x (range (min v1 v2) 0 -1)\n             :when (and (= (rem v1 x) 0) (= (rem v2 x) 0))]\n         x\n\n         )\n       )\n  )", "user": "5c20b6abe4b07e362c230576"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (if (= b 0) a (gcd b (mod a b))))", "user": "5c222b7de4b07e362c230588"}, {"problem": 66, "code": "#(letfn [(divisor? [i d] (zero? (mod i d)))\n            (common-divisor? [i1 i2 d] (and (divisor? i1 d) (divisor? i2 d)))]\n      (first (filter (partial common-divisor? %1 %2) (iterate dec (min %1 %2))))\n      )", "user": "5c17467fe4b01240ff5671df"}, {"problem": 66, "code": "(fn [i k]\n  (loop [candidate (max i k)]\n    (if (and (= (rem i candidate) 0)\n             (= (rem k candidate) 0))\n      candidate\n      (recur (dec candidate)))))", "user": "5bef3e88e4b0a6d31fed213f"}, {"problem": 66, "code": "(fn [a b]\n  (first\n   (filter\n    #(and\n      (zero? (mod a %))\n      (zero? (mod b %))\n      ) (range a 0 -1)\n    )\n   )\n  )", "user": "5727031ee4b0c5bde472c12f"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5c2649c8e4b07e362c2305bf"}, {"problem": 66, "code": "(fn gcd [a b]\n  (->> (range 1 (+ (if (> a b) b a) 1))\n      (filter #(= 0 (mod a %) (mod b %)))\n      (apply max)))", "user": "5c2836ebe4b07e362c2305d4"}, {"problem": 66, "code": "(fn [a b] (last (filter #(and (zero? (mod a %)) (zero? (mod b %))) (range 1 (inc (min a b))))))", "user": "5c0e3f86e4b01240ff56713d"}, {"problem": 66, "code": "(fn me [x y]\n  (->>\n    (range 1 (inc (min x y)))\n    (map #(vector % (= 0 (rem x %) (rem y %))))\n    (filter second)\n    (last)\n    (first)\n  ))", "user": "5c219c0fe4b07e362c230581"}, {"problem": 66, "code": "(fn [a b]\n  (let [larger-number (if (>= a b)\n                        a\n                        b)\n        smaller-number (if (<= a b)\n                         a\n                         b)]\n    (loop [s smaller-number\n           r (rem larger-number smaller-number)]\n      (cond (= r 0) s\n            (= 0 (rem smaller-number r)) r\n            :else (recur r (rem smaller-number r))))))", "user": "57d57f65e4b0bd073c2023b3"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n   (= a b) a\n   (> a b) (recur (- a b) b)\n   :else (recur a (- b a))))", "user": "5c195cb2e4b01240ff5671f7"}, {"problem": 66, "code": "(fn gcd[a b]\n  (if (< a b) \n    (gcd b a)\n    (if (= b 0)\n      a\n\t  (gcd b (rem a b))\n    )\n  )\n)", "user": "5ba75fdfe4b0a20761a23419"}, {"problem": 66, "code": "(fn [a b]\n        (if (zero? b)\n          a\n          (recur b (mod a b))))", "user": "5bf28e9ee4b0a6d31fed2177"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (mod a b))))", "user": "50eeeadae4b02c17778c91f3"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0) a\n              (gcd b (mod a b))))", "user": "5c3ac091e4b0d62ef62d9f95"}, {"problem": 66, "code": "(fn gcd[a b]\n  (if (= b 0) a (gcd b (mod a b))))", "user": "5be0b916e4b0ed4b8aab4c8f"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (let [M (max a b)\n        m (min a b)\n        r (mod M m)]\n    (if (= 0 r)\n      m\n      (gcd m r)\n    )  \n  )\n)", "user": "5b8ec146e4b0c0b3ffbd49f0"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))\n  )\n)", "user": "5bfcdc52e4b0bdcf453d15f4"}, {"problem": 66, "code": "(fn [l r] (if (> r l) (recur r l) ( if (<= r 0) l (recur r (mod l r)))))", "user": "5c35acffe4b0d62ef62d9f62"}, {"problem": 66, "code": "#(if (= %2 0) % (recur %2 (rem % %2)))", "user": "5c379636e4b0d62ef62d9f76"}, {"problem": 66, "code": "(fn [a b] ; The Euclidean Algorithm\n  (cond\n    (zero? a) b\n    (zero? b) a\n    :else\n    (recur b (rem a b))))", "user": "5c3ec6dbe4b08cd430848e8a"}, {"problem": 66, "code": "(fn [one two]\n\n  (loop [start (first (sort [one two]))\n         ]\n\n    (if (and\n          (= 0 (mod one start))\n          (= 0 (mod two start))\n          )\n      start\n      (recur (dec start) )\n      )\n    )\n  )", "user": "53b0750fe4b047364c044483"}, {"problem": 66, "code": "(fn f1 [a b] (loop [a a b b] (if (< a b) (recur b a)\n  (if (= b 0) a (recur b (mod a b)))))\n)", "user": "5c308385e4b0d62ef62d9f1c"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (< a b)\n    (gcd b a)\n    (if (= 0 b)\n      a\n      (gcd b (mod a b)))))", "user": "59733c91e4b01722bebd4c9b"}, {"problem": 66, "code": "(fn divisior [x y] (if (zero? y) x (recur y (rem x y))))", "user": "5c32ea85e4b0d62ef62d9f3e"}, {"problem": 66, "code": "(fn [m n]\n  (last\n   (for [i (range 1 (inc (min m n)))\n        :let [rm (rem m i)\n              rn (rem n i)]\n        :when (and (= rm 0) (= rn 0))]\n    i)))", "user": "54d90b36e4b0a52adc2e2049"}, {"problem": 66, "code": "(fn gcd [x y]\n      (if (= y 0) x (recur y (rem x y))))", "user": "5c3f37fce4b08cd430848e91"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if(= b 0)\n    a\n    (gcd b (rem a b))))", "user": "5c486dece4b0e06e1360a3c0"}, {"problem": 66, "code": "(fn greatest-common-divisor\n  [v1 v2]\n  (if (> v1 v2)\n    (if (= 0 (rem v1 v2))\n      v2\n      (loop [cur-val v2\n             v1rem (rem v1 cur-val)\n             v2rem (rem v2 cur-val)\n             next-val (dec cur-val)]\n        (if (and (= 0 v1rem) (= 0 v2rem))\n            cur-val\n            (recur next-val (rem v1 next-val) (rem v2 next-val) (dec next-val)))))\n    (greatest-common-divisor v2 v1)))", "user": "59b9e669e4b0a024fb6ae3db"}, {"problem": 66, "code": "#(loop [a %1 b %2]\n  (if (zero? b)\n    a \n    (recur \n     b \n     (mod a b))))", "user": "5c4c74efe4b0f9f7a8770e76"}, {"problem": 66, "code": "#(if (< %2 1) %1 (recur %2 (mod %1 %2)))", "user": "5c512811e4b0fb8c5ffd99c2"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0) a\n      (recur b (rem a b))))", "user": "5c4ab449e4b0f9f7a8770e57"}, {"problem": 66, "code": "(fn [first-number second-number]\n    (first\n          (filter (fn [divider]\n                    (and (= 0 (mod first-number divider))\n                         (= 0 (mod second-number divider))\n                         )\n                    )\n                  (range (min first-number second-number) 0 -1))))", "user": "5c48757fe4b0e06e1360a3c3"}, {"problem": 66, "code": "(fn [a b]\n        (if (zero? b)\n          a\n          (recur b (mod a b))))", "user": "5c45e703e4b0e06e1360a391"}, {"problem": 66, "code": "(fn [x y]\n   (if (zero? y)\n     x\n     (recur y (rem x y))))", "user": "5c387c51e4b0d62ef62d9f83"}, {"problem": 66, "code": "(fn greatest-common-divisor [a b]\n  (cond\n    (= 0 b) a\n    (= 0 a) b\n    (>= a b) (recur (- a b) b)\n    :else (recur a (- b a))))", "user": "5c506951e4b0f9f7a8770ec5"}, {"problem": 66, "code": "(fn [a b]\n   (let [f (fn [n] (filter #(= 0 (mod n %)) (range 1 (inc n))))]\n     (apply max  (clojure.set/intersection (set (f a)) (set (f b))))))", "user": "5b14475be4b0cc2b61a3be5a"}, {"problem": 66, "code": "#(let [gcd (mod %1 %2)]\n    (if (zero? gcd) %2 (recur %2 gcd)))", "user": "5c3cd80fe4b0d62ef62d9faa"}, {"problem": 66, "code": "(fn gcd\n  ([x]\n   (let [vals (filter #(integer? (/ x %)) (map inc (range x)))]\n     vals))\n  ([x y]\n   (let [vals-x (gcd x)\n         vals-y (gcd y)]\n     (last (sort (map first\n                   (filter #(<= 2 (second %))\n                           (frequencies (concat vals-x vals-y)))))))))", "user": "5c411df3e4b08cd430848ebf"}, {"problem": 66, "code": "(fn [a b] \n   (->> (max a b)\n        (inc)\n        (range 1)\n        (reverse)\n        (drop-while #(not= 0 (rem a %) (rem b %)))\n        first))", "user": "5c435a9fe4b0e06e1360a367"}, {"problem": 66, "code": "(fn [x y]\n  (let [xd (set (filter #(integer? (/ x %)) (range 1 (inc x))))\n        yd (filter #(integer? (/ y %)) (range 1 (inc y)))]\n    (apply max (filter xd yd))))", "user": "5b72b36ce4b047b03b2036a9"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))\n    )\n  )", "user": "5c51d700e4b0fb8c5ffd99d1"}, {"problem": 66, "code": "#(loop [result 1\n        n 1]\n    (if (or (> (inc n) %1)\n            (> (inc n) %2))\n      result\n      (if (and (= 0 (mod %1 (inc n)))\n               (= 0 (mod %2 (inc n))))\n        (recur (inc n) (inc n))\n        (recur result (inc n)))))", "user": "502ea967e4b06efe12e8cc76"}, {"problem": 66, "code": "(fn gcd [a b] (if (= a 0) b (gcd (rem b a) a)))", "user": "5c54e605e4b0fb8c5ffd9a14"}, {"problem": 66, "code": "(fn gcd[a b] (->\n  (compare a b)\n  (case ,,,\n    -1 (gcd a (- b a))\n     0 a\n    +1 (gcd (- a b) b))))", "user": "5c6227fee4b0fca0c1622641"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (rem a b))))", "user": "5c62979fe4b0fca0c162264c"}, {"problem": 66, "code": "(fn gcd [a b] (cond (zero? b) a :else (gcd b (mod a b))))", "user": "5c30d90de4b0d62ef62d9f22"}, {"problem": 66, "code": "(fn [aa bb] \n  (loop [a aa b bb]\n    (if (<= b 0) a \n    (let [t b nb (mod a b) na t]\n      (recur na nb)))))", "user": "53a5bc3ae4b0ef122a8689c3"}, {"problem": 66, "code": "(fn [a b]\n  (cond\n    (= a b) a\n    (> a b) (recur (- a b) b)\n    :else (recur a (- b a))))", "user": "592883f1e4b072a2710fceea"}, {"problem": 66, "code": "#(loop [d (min % %2)] (if (= java.lang.Long (type (/ % d)) (type (/ %2 d))) d (recur (dec d))))", "user": "5c41db45e4b08cd430848ece"}, {"problem": 66, "code": "(fn [a b]\n           (last (filter #(and (= 0 (mod a %))\n                               (= 0 (mod b %)))\n                         (range 1 (inc (min a b))))))", "user": "4e617114535d8ccf87e9fe5b"}, {"problem": 66, "code": "(fn gdc [a b]\n  (cond \n    (= 0 b) a\n    (> b a) (gdc b a)\n    :else (gdc b (mod a b))))", "user": "5c6748f0e4b0fca0c16226b6"}, {"problem": 66, "code": "(fn [n1 n2]\n  (let [div1 (set (#(loop [res [1] n_k % i 2]\n                 (if (<= i %)\n                   (if (= (rem n_k i) 0) (recur (conj res i) (quot n_k i) i) (recur res n_k (inc i)))\n                   res\n                   )\n                 ) n1))\n        div2 (set (#(loop [res [1] n_k % i 2]\n                 (if (<= i %)\n                   (if (= (rem n_k i) 0) (recur (conj res i) (quot n_k i) i) (recur res n_k (inc i)))\n                   res\n                   )\n                 ) n2))\n        div1_2 (#(for [i (distinct (concat %1 %2)) :when (and (contains? %1 i) (contains? %2 i))] i) div1 div2)\n        z (for [i div1_2 :let [deg (apply min (conj '() (count (filter (set (list i)) div1)) (count (filter (set (list i)) div2))))]]\n            (repeat deg i)\n            )\n        ]\n    (apply * (flatten z))\n    )\n  )", "user": "5c52f3fce4b0fb8c5ffd99e9"}, {"problem": 66, "code": "(fn [x y]\n    (loop [nx x]\n      (if (and\n            (zero? (mod x nx))\n            (zero? (mod y nx)))\n        nx\n        (recur (dec nx)))))", "user": "558843dae4b059ccff29b1f3"}, {"problem": 66, "code": "(fn [a b]\n  (if (= 0 b)\n    a\n    (recur b (mod a b))))", "user": "5c58736be4b01df32ab73247"}, {"problem": 66, "code": "(fn [a b]\n  (first (filter (fn [x] (and (= 0 (mod a x)) (= 0 (mod b x)))) (range (min a b) 0 -1))))", "user": "5c73b8bae4b0fca0c16227ba"}, {"problem": 66, "code": "(fn gcd [a b] \n  (if (zero? b) \n    a \n    (gcd b (mod a b))))", "user": "59cd351ee4b0ef0a1e9b5b35"}, {"problem": 66, "code": "(fn\n  [a b]\n  (loop [a a\n         b b]\n    (if (zero? b)\n      a\n      (if (> a b)\n        (recur b (mod a b))\n        (recur a (mod b a))))))", "user": "5c706232e4b0fca0c162277e"}, {"problem": 66, "code": "(fn [x y]\n   (apply max (filter (into #{} ( filter (comp zero? (partial rem x)) (range 1 (inc x)))) \n                      (into #{} ( filter (comp zero? (partial rem y)) (range 1 (inc y)))))))", "user": "5c6d0e51e4b0fca0c1622735"}, {"problem": 66, "code": "(fn [x y]\n   (loop [min (max 1 (min (Math/abs x) (Math/abs y)))]\n     (if (= 1 min) min\n       (if (and (= 0 (mod x min)) (= 0 (mod y min)))\n         min\n         (recur (dec min)))\n       )\n     )\n   )", "user": "5c6e8b57e4b0fca0c1622755"}, {"problem": 66, "code": "(fn test [a b] (cond (< a b) (recur a (- b a))(> a b) (recur (- a b) b):else a ))", "user": "5c52fa3ce4b0fb8c5ffd99eb"}, {"problem": 66, "code": "(fn [a\n     b]\n  (loop [remainders '()]\n    (if (= (first remainders) 1)\n      1\n    (if (= (first remainders) 0)\n      (or (second remainders) (min a b))\n      (if (empty? remainders)\n        (recur (conj remainders (rem (max a b) (min a b))))\n        (if (= (count remainders) 1)\n          (recur (conj remainders (rem (min a b) (first remainders))))\n          (recur (conj remainders (rem (second remainders) (first remainders))))))))))", "user": "5c718e6ce4b0fca0c1622796"}, {"problem": 66, "code": "(fn[x y](apply max (filter #(= 0 (rem x %) (rem y %)) (range 1 (inc(min x y))))))", "user": "5c683fb5e4b0fca0c16226d5"}, {"problem": 66, "code": "(fn [x y] \n \n (->> [x y]\n      (map (fn [num] (->> (range 1 (+ 1 num))\n                (filter #(= (mod num %) 0))\n                (map (partial / num))\n                set)))\n      (apply clojure.set/intersection)\n      sort\n      last\n      ))\n\n\n#_(println \n (apply clojure.set/intersection\n (map (fn [num] (->> (range 1 (+ 1 num))\n                (filter #(= (mod num %) 0))\n                (map (partial / num))\n                set))\n          [12 4])))\n\n\n#_(println (\n\n(fn [x y] \n   (juxt (fn [num] \n           (->> (range 1 (+ 1 num))\n                (filter #(= (mod num %) 0))\n                (map (partial / num))\n                set))         \n         x y))  \n          2 4))", "user": "58b12635e4b0ebc645576cf4"}, {"problem": 66, "code": "(fn [x y]\n    (let [a (max x y)\n          b (min x y)]\n      (if (= b 0)\n        a\n        (recur b (mod a b)))))", "user": "5b269cf3e4b063e2438bcc35"}, {"problem": 66, "code": "(fn gcd \n  [a b]\n  (cond\n   (= a b) a\n   (> a b) (recur (- a b) b)\n   :else (recur a (- b a))))", "user": "5c787131e4b0fca0c1622825"}, {"problem": 66, "code": "(fn greatest-common-divisor [one another] (let [remainder (mod one another)]\n                    (if (= remainder 0)\n                      another\n                      (greatest-common-divisor another remainder))\n                    )\n  )", "user": "5c723f4be4b0fca0c16227a0"}, {"problem": 66, "code": "(fn [n m] (reduce (fn [g curr] (if (= 0 (+ (mod n curr) (mod m curr))) curr g)) 1 (range 1 (inc (if (> n m) m n)))))", "user": "5c76577ae4b0fca0c16227ea"}, {"problem": 66, "code": "#(loop [x (min % %2)]\n   (if (apply = (map integer? [(/ % x) (/ %2 x) 1]))\n     x\n     (recur (dec x))))", "user": "5c7d5a0ce4b0d597f478caab"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (gcd b (mod a b))))", "user": "5c6e1006e4b0fca0c1622744"}, {"problem": 66, "code": "(fn get-gcd ([x y] (get-gcd x y (min x y))) ([x y z] (if (every? #(= 0 (mod % z)) [x y]) z (get-gcd x y (dec z)))))", "user": "5c7bc0a5e4b0fca0c1622865"}, {"problem": 66, "code": "(fn [q r]\n  (if (= 0 r)\n    q\n    (recur r (mod q r))))", "user": "5c664b87e4b0fca0c16226a5"}, {"problem": 66, "code": "(fn [v1 v2]\n   (let [max (if (> v1 v2) v1 v2)\n         min (if (= v1 max) v2 v1)]\n     (loop [a max b min]\n               (let [cel (quot a b)\n                     ost (rem a b)]\n                 (if (zero? ost) \n                   b \n                   (recur b ost))))))", "user": "5a64dcabe4b0512ff01cd9a9"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (loop [a a\n         b b]\n    (if (zero? b)\n      a\n      (recur b\n             (rem a b)))))", "user": "5c7dad57e4b0d597f478caba"}, {"problem": 66, "code": "(fn [a b] (if (= b 0) a (recur b (mod a b))))", "user": "5b22d30ee4b08b1df1c36750"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5c7f7889e4b0d597f478cae0"}, {"problem": 66, "code": "(fn gcd [a b]\n        (if (zero? b)\n          a\n          (recur b (mod a b))))", "user": "5c79030be4b0fca0c1622830"}, {"problem": 66, "code": "(fn[s b]\n  (loop [small s big b result 1 divisor 1]\n    (if (= divisor small)\n      result\n      (recur small big (if (integer? (/ small (inc divisor)))\n                         (if (integer? (/ big (inc divisor)))\n                           (inc divisor)\n                           result)\n                         result)\n             (inc divisor)))))", "user": "5c879edae4b048ec896c5917"}, {"problem": 66, "code": "(fn [x y]\n  (loop [x x\n         y y]\n    (if (zero? y)\n      x\n      (recur y\n             (rem x y)))))", "user": "5c75a830e4b0fca0c16227e0"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5c874389e4b048ec896c590e"}, {"problem": 66, "code": "(fn gcd\n  [n m]\n  (loop[menor (first (sort (list n m)))\n        mayor (last (sort (list n m)))\n        i 1\n        gcd 1]\n    (if (= i mayor)\n      gcd\n      (if (= 0 (mod menor i) (mod mayor i))\n        (recur menor mayor (+ 1 i) i)\n        (recur menor mayor (+ 1 i) gcd)\n        )\n      )\n    )\n  )", "user": "5c82db41e4b0c8042a70ce42"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5c70641de4b0fca0c162277f"}, {"problem": 66, "code": "(fn gcd\n  [x y]\n  (loop [x x\n         y y]\n    (if (zero? y)\n      x\n      (recur y\n             (rem x y)))))", "user": "5c74b043e4b0fca0c16227ce"}, {"problem": 66, "code": "(fn\n  [a b]\n  (let [n (min a b)]\n    (loop [g 1\n           i 2]\n      (if (> i n)\n        g\n        (if (and (zero? (rem a i))\n                 (zero? (rem b i)))\n          (recur i (inc i))\n          (recur g (inc i)))))))", "user": "5c7d947be4b0d597f478cab6"}, {"problem": 66, "code": "(fn [a b]\n  (let [min (if (> a b) b a)]\n    (last (for [i (map inc (range min))\n          :when(and (zero? (rem a i)) (zero? (rem b i)))\n          ] i))))", "user": "5c748bf5e4b0fca0c16227cb"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5c7c8c72e4b0d597f478ca96"}, {"problem": 66, "code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "user": "5c7741dce4b0fca0c1622806"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5c706454e4b0fca0c1622780"}, {"problem": 66, "code": "(fn gcdd [a b] (loop [a a\n         b b\n         d (if (> a b) b a)]\n    (if (and (zero? (rem a d)) (zero? (rem b d)))\n      d\n      (recur a\n             b\n             (dec d)))))", "user": "5c7d5463e4b0d597f478caa9"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a \n    (recur b (mod a b))))", "user": "5c746c31e4b0fca0c16227c8"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0)\n     a\n    (gcd b (mod a b))))", "user": "5c558070e4b0fb8c5ffd9a1e"}, {"problem": 66, "code": "(fn [& a] (last (filter (fn [d] (every? #(= (mod % d) 0) a)) (map inc (range (apply min a))))))", "user": "5c7c1d8ee4b0d597f478ca88"}, {"problem": 66, "code": "(fn gcd [x y]\n  (loop [x x, y y]\n    (if (zero? y)\n      x\n      (recur y (mod x y)))))", "user": "5b6002c2e4b0c6492753e6fb"}, {"problem": 66, "code": "(fn gcd [x y]\n  (cond\n    (= x y) x\n    (> x y) (recur (- x y) y)\n    true (recur (- y x) x)\n    ))", "user": "57fc0719e4b0d3187e900987"}, {"problem": 66, "code": "(fn gcd [a b] \n  (if (= b 0)\n      a\n      (gcd b (rem a b))))", "user": "5c7bb8c0e4b0fca0c1622864"}, {"problem": 66, "code": "(fn [n1 n2]\n  (if (= n1 n2) n1)\n  (loop [biggest (if (>= n1 n2) n1 n2)\n         smallest (if (>= n1 n2) n2 n1)\n         divisor smallest]\n    (if (and (= 0 (mod biggest divisor)) (= 0 (mod smallest divisor)))\n      divisor\n      (recur biggest smallest (dec divisor)))))", "user": "5c86b769e4b0c8042a70ce9b"}, {"problem": 66, "code": "(fn [x y] ((comp first last) (take-while #(not= (apply min %) 0) (iterate (fn [[a b]] (vector  (- (max a b) (min a b)) (min a b))) [x y]))))", "user": "5b100648e4b0cc2b61a3be17"}, {"problem": 66, "code": "(fn [a b]\n  (let [get-divisor (fn [n] (into #{}\n                                  (filter #(zero? (rem n %))\n                                          (range 1 (inc n)))\n                                  ))\n        a-divisor (get-divisor a)\n        b-divisor (get-divisor b)\n        commom-divisor (clojure.set/intersection a-divisor b-divisor)]\n    (apply max commom-divisor))\n  \n  \n  )", "user": "5c891afde4b048ec896c5935"}, {"problem": 66, "code": ";; http://www.4clojure.com/problem/66\n(fn gcd\n  [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5c92105ce4b048ec896c59f7"}, {"problem": 66, "code": "(fn [x y]\n   (let [xs (filter #(= 0 (mod x %)) (range 1 (inc x)))\n         ys (apply max (filter #(= 0 (mod y %)) xs))]\n     ys)\n   )", "user": "5c896f46e4b048ec896c5940"}, {"problem": 66, "code": "(fn gcd [a b] (if (= b 0) a (gcd b (mod a b))))", "user": "5bd0ea60e4b0e9689409ee45"}, {"problem": 66, "code": "(fn [n1 n2]\n    (let [even? (and (even? n1)\n                     (even? n2))]\n      (loop [n (min n1 n2)]\n        (if (== 1 n)\n          n\n          (if (and (zero? (mod n1 n))\n                   (zero? (mod n2 n)))\n            n\n            (recur (dec n)))))))", "user": "5c995fa4e4b048ec896c5a96"}, {"problem": 66, "code": "(fn [x y]                                                                                                                                             \n  (let [[b a] (sort [x y])]                                                                                                                                  \n    (if (zero? b) a (recur b (mod a b)))))", "user": "50f01f44e4b0bdaecbb47daf"}, {"problem": 66, "code": "(fn gcd [a b] \n  (if (< a b) \n    (gcd b a) \n    (if (or (= a b) (= b 0))\n      a \n      (gcd b (mod a b)))))", "user": "56f5d0efe4b046a417f92078"}, {"problem": 66, "code": "(fn gcd [m n]\n  (if (= n 0)\n    m\n    (gcd n (mod m n))))", "user": "55ed37ebe4b0121d4835fdd6"}, {"problem": 66, "code": "(fn [a b]\n  (cond\n    (= 0 a) b\n    (= 0 b) a\n    :else (recur b (rem a b))))", "user": "5c24671be4b07e362c2305a1"}, {"problem": 66, "code": "#(loop [a (max %1 %2)\n        b (min %1 %2)]\n   (cond\n    (= a 0) b\n    (= b 0) a\n    :else (recur b (rem a b))))", "user": "5ca14eb1e4b048ec896c5b7d"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (if (= a 0)\n    b\n    (gcd (mod b a) a)))", "user": "5c05cae7e4b0bdcf453d16a3"}, {"problem": 66, "code": "(fn [a b]\n  (if (= 0 b)\n    a\n    (recur b (mod a b))))", "user": "5c950334e4b048ec896c5a44"}, {"problem": 66, "code": "(fn [x y] (if (zero? y)\n            x\n            (recur y (mod x y))))", "user": "5be96111e4b0f319e2d7ec70"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b)))\n  )", "user": "539ec9f9e4b0ca733b974491"}, {"problem": 66, "code": "(fn ggT [a b] (if (zero? b) a (recur b (rem a b))))", "user": "5ca1c45ae4b048ec896c5b85"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (> a b)\n    (if (= 0 (rem a b))\n      b\n      (gcd b (rem a b)))\n    (if (= 0 (rem b a))\n      a\n      (gcd a (rem b a)))))", "user": "5cab33e7e4b048ec896c5c48"}, {"problem": 66, "code": "(fn gcd\n  ([x y] (gcd x y 1 1))\n  ([x y g c]\n    (cond (> 2 (/ (max x y) c))  g\n          (and (zero? (rem x c))\n               (zero? (rem y c))) (gcd x y c (inc c))\n          :else                   (gcd x y g (inc c)))))", "user": "5c538cb5e4b0fb8c5ffd99fb"}, {"problem": 66, "code": "(fn [x y] (if (= 0 y) x (recur y (mod x y))))", "user": "5c371f5be4b0d62ef62d9f72"}, {"problem": 66, "code": "#((fn divi [x y res] \n      (if (and (zero? (rem y (first res))) (zero? (rem x (first res))))\n        (first res)\n        (divi x y (rest res))\n        )) %1 %2 (range (min %1 %2) 0 -1) )", "user": "58b84c28e4b0ebc645576d94"}, {"problem": 66, "code": "(fn [a b]\n  (cond \n   (< a b) (recur a (- b a))\n   (> a b) (recur (- a b) b)\n   :else a))", "user": "5cb71f35e4b026601754b961"}, {"problem": 66, "code": "(fn gcd [a b]\n\t(if (= b 0)\n\t\ta\n\t\t(recur b (mod a b))))", "user": "593c1e3be4b069cdc2982b86"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "user": "5cab0ad9e4b048ec896c5c46"}, {"problem": 66, "code": "(fn factors [m n] (apply max (filter #(and (zero? (rem m %)) (zero? (rem n %))) (range 1 (inc n)))))", "user": "5cb4e764e4b026601754b929"}, {"problem": 66, "code": "(fn [a b]\n  (let [a' (max a b)\n        b' (min a b)\n        ]\n    (loop [a a'\n           b b']\n      (println \"A:\" a \"B:\" b)\n      (if (> (mod a b) 0)\n        (recur b(mod a b))\n        b\n        ))))", "user": "5b007e46e4b0cc2b61a3bd3c"}, {"problem": 66, "code": "#(loop [divisor (max %1 %2)]\n\t(if (or (= divisor 1) (and (= 0 (mod %2 divisor)) (= 0 (mod %1 divisor))))\n      divisor\n      (recur (dec divisor))))", "user": "5afb3426e4b0cc2b61a3bcf5"}, {"problem": 66, "code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "user": "5ca7b5bbe4b048ec896c5c04"}, {"problem": 66, "code": "(fn f [a b]\n     (if (= b 0)\n       a\n       (f (min a b) (max (- a b) (- b a)))))", "user": "5a6dbaf5e4b0512ff01cda63"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (gcd b (mod a b))))", "user": "5766bab8e4b0a07e8fc180b1"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5cbeadf2e4b0ccb061962755"}, {"problem": 66, "code": "#(loop [ x %1 y %2] (if(zero? y) x (recur y (rem x y))))", "user": "5cbd5b42e4b026601754b9f6"}, {"problem": 66, "code": "(fn [v1 v2]\n  (loop [s (min v1 v2)]\n    (if (and (zero? (mod v1 s)) (zero? (mod v2 s)))\n      s\n      (recur (dec s)))))", "user": "5cc6f982e4b0ccb06196282d"}, {"problem": 66, "code": "(fn gcd [x y]\n  (cond\n    (< x y) (recur x (- y x))\n    (> x y) (recur (- x y) y)\n    :else x))", "user": "5c547cf0e4b0fb8c5ffd9a0b"}, {"problem": 66, "code": "(fn [x y]\n  (loop [a (max x y) b (min x y)]\n    (if (= b 0)\n      a\n      (recur b (rem a b)))))", "user": "4fbe2cfbe4b081705acca30c"}, {"problem": 66, "code": "(fn [x y] (last (sort (map #(if (and (= 0 (mod x %)) (= 0 (mod y %))) % -1) (range 1 (+ 1 (min x y))) ))))", "user": "5ccb3792e4b0ccb061962882"}, {"problem": 66, "code": "(fn [n r] (if (zero? r) n (recur r (rem n r))))", "user": "5ccf2dc3e4b0ccb0619628c2"}, {"problem": 66, "code": "(fn [l r]\n  (if (zero? r)\n    l\n    (recur r (rem l r))))", "user": "5cd1f5dae4b0ccb0619628f7"}, {"problem": 66, "code": "(fn gcd [a b] \n  (cond\n  \t(= a b) a\n  \t(> a b) (recur (- a b) b)\n  \t:else (recur a (- b a))))", "user": "5cc6b4bfe4b0ccb061962827"}, {"problem": 66, "code": "(fn [a b] (apply max (filter #(and (= 0 (rem a %)) (= 0 (rem b %))) (range 1 (inc (min a b))))) )", "user": "5ccf21c4e4b0ccb0619628c1"}, {"problem": 66, "code": "#(letfn [(gcd [a b] \n            (loop [a a\n                   b b]\n              (if (zero? b)\n                a\n                (recur b (mod a b)))))]\n   (if (> %1 %2)\n     (gcd %1 %2)\n     (gcd %2 %1)))", "user": "4eb47bb1535d7eef30807362"}, {"problem": 66, "code": "(fn gcd [a b]\n  (loop [x (mod a b) y b]\n    (if (= 0 x)\n      y\n      (recur (mod y x) x))))", "user": "5cbb0436e4b026601754b9cc"}, {"problem": 66, "code": "(fn [x1 x2]\n  (->> (min x1 x2)\n       (inc)\n       (range 1)\n       (filter #(and (= (mod x1 %) 0)\n                     (= (mod x2 %) 0)))\n       (sort-by identity >)\n       (first)))", "user": "5caf9cace4b026601754b89b"}, {"problem": 66, "code": "(fn gcd [x y]\n\t(loop [val (min x y)]\n\t\t(if (= 0 (mod x val) (mod y val))\n\t\t\tval\n\t\t\t(recur (dec val)))))", "user": "5c87c79be4b048ec896c591b"}, {"problem": 66, "code": "(fn gcd [a b]\n   (let [[b a] (sort [a b])\n         r (mod a b)]\n     (if (pos? r) (gcd b r) b)))", "user": "5cdfe2aee4b0a17bb84e2b04"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond (> b a) (gcd b a)\n        (zero? b) a\n        :else     (gcd b (mod a b))))", "user": "5ce077e9e4b0a17bb84e2b0c"}, {"problem": 66, "code": "#(reduce (fn [result item]\n            (if (and (zero? (mod %2 item)) (zero? (mod % item)))\n              item\n              result)\n            )1 (range 2 (inc %)))", "user": "5ccc2a03e4b0ccb06196288f"}, {"problem": 66, "code": "(fn GCD[m n]\n \t(if (>= m n)\n      (let [r (mod m n)]\n        (if (= r 0)\n          n\n          (GCD n r)))\n    (GCD n m)) \n)", "user": "5ce41d1be4b0a17bb84e2b50"}, {"problem": 66, "code": "(fn gdc [a b]\n  (cond \n   (= a 0) b\n   (= b 0) a\n   :else (gdc (min a b) (rem (max a b) (min a b)))))", "user": "5cdd934ce4b05ee0cb311761"}, {"problem": 66, "code": "(fn [x y]\n  (if (= 0 (mod (max x y) (min x y)))\n    (min x y)\n    (loop [maks (min x y)]\n      (if (= 0 (mod (max x y) (dec maks)))\n        (if (= 0 (mod (min x y) (dec maks)))\n          (dec maks)\n          (recur (dec maks)))\n        (recur (dec maks))))))", "user": "5ce52271e4b0a17bb84e2b69"}, {"problem": 66, "code": "(fn gcd [a b] \n  (if (= a b) a \n    (if (> a b) \n      (gcd (- a b) b) \n      (gcd a (- b a)))))", "user": "5ce2b15fe4b0a17bb84e2b2c"}, {"problem": 66, "code": "(fn [a b] (loop [x (min a b) y (max a b) m (mod y x)] (if (zero? (rem y x)) x (recur (rem y x) x (mod y x)))))", "user": "5ce62d8ee4b0a17bb84e2b83"}, {"problem": 66, "code": "(fn [a b]\n  (loop [a a\n         b b]\n    (if (= 0 b)\n      a\n      (recur b  (mod a b))\n    )\n  )\n)", "user": "5ce44ee2e4b0a17bb84e2b57"}, {"problem": 66, "code": "#(loop [a %1 b %2]\n     (if (= b 0) a\n         (recur b (rem a b))))", "user": "57a5da5ee4b0a966079561fe"}, {"problem": 66, "code": "(fn [a b]\n  (loop [a a\n         b b]\n   (let [h (mod a b)\n         a b\n         b h]\n    (if (not (= 0 b))\n      (recur a b)\n      a))))", "user": "54da46e5e4b024c67c0cf753"}, {"problem": 66, "code": "(fn gcd \n  [a b]\n  (if (= a 0) \n    b\n    (gcd (mod b a) a)))", "user": "5cd639b4e4b0ccb061962940"}, {"problem": 66, "code": "(fn [a b]\n  (if (> b 0)\n    (recur b (mod a b))\n    a\n  ))", "user": "5cebafbbe4b0a17bb84e2be6"}, {"problem": 66, "code": ";; Euclidean Algorithm\n#(loop [m %1 n %2]\n                (if (zero? n)\n                  m\n                  (recur n (rem m n))))", "user": "5ce78776e4b0a17bb84e2ba2"}, {"problem": 66, "code": "(fn [x y]\n  (loop [n (min x y)]\n    (if (and (= 0 (rem x n)) (= 0 (rem y n)))\n      n\n      (recur (dec n)))))", "user": "5cdda90ce4b05ee0cb311766"}, {"problem": 66, "code": "#(loop [n1 %1 n2 %2]\n   (cond (= n1 n2) n1\n         (> n1 n2) (recur (- n1 n2) n2)\n         (< n1 n2) (recur (- n2 n1) n1)))", "user": "592bb806e4b072a2710fcf46"}, {"problem": 66, "code": "(fn [a b] (if (zero? a) b (recur (mod b a) a)))", "user": "5cee521ce4b0aaa82f1129dd"}, {"problem": 66, "code": "(fn [f s]\n \t(loop [a f b s]\n      (if (not= a b) \n        (if (> a b) (recur (- a b) b) (recur a (- b a))) \n        a\n      ) \n    )\n)", "user": "5cbdc591e4b026601754ba00"}, {"problem": 66, "code": "(fn [x y]\n  (letfn [(r [a b]\n            (if (zero? b)\n              a\n              (r b (rem a b))))]\n    (r x y)))", "user": "52281e1ee4b0186687e23a69"}, {"problem": 66, "code": "(fn [a b]\n  (loop [d (min a b)]\n    (if (= d 1) 1\n      (if (and (= 0 (mod a d)) (= 0 (mod b d))) d\n        (recur (dec d))))))", "user": "5ce56455e4b0a17bb84e2b71"}, {"problem": 66, "code": "(fn greatest-common-divisor\n  [a b]\n  (first (\n   let [divisors (reverse (range 1 (inc (min a b))))]\n    (for [x divisors :when (and (= 0 (mod a x)) (= 0 (mod b x)))] x)\n  ))\n)", "user": "5c3440fee4b0d62ef62d9f50"}, {"problem": 66, "code": "(fn iter [n1 n2]\n  (if (> n1 n2)\n    (iter n2 n1)\n    (if (zero? n1)\n      n2\n      (iter (mod n2 n1) n1))))", "user": "5cf935f4e4b0b71b1d808a8f"}, {"problem": 66, "code": "(fn [first second]\n  (let [a (min first second) b (max first second)]\n    (loop [n 1 gcd 1]\n      (if (>= n b)\n        gcd\n        (if (= 0 (rem a n) (rem b n))\n          (recur (inc n) n)\n          (recur (inc n) gcd))))))", "user": "5cf62ecce4b087f62be35aa7"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5ccb0bbee4b0ccb06196287c"}, {"problem": 66, "code": "#(last (filter (fn [x] (and (= (rem %1 x) 0) (= (rem %2 x) 0))) (range 1 (min (+ %1 1) (+ %2 1)))))", "user": "5ceedd7ae4b0aaa82f1129e4"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5cd4e1b2e4b0ccb061962927"}, {"problem": 66, "code": "(fn [a b]\n  (loop [a a b b]\n    (cond\n      (= a 0) b\n      (= b 0) a\n      :else (recur b (rem a b)))))", "user": "5d03944de4b0cc9c915881c5"}, {"problem": 66, "code": "(fn gcd* [a b]\n  (cond\n    (< a b) (recur a (- b a))\n    (> a b) (recur (- a b) b)\n:else a))", "user": "5d0ab107e4b0cc9c91588222"}, {"problem": 66, "code": "#(if (zero? %2)\n       %1\n       (recur %2 (mod %1 %2)))", "user": "5d06499ae4b0cc9c915881ec"}, {"problem": 66, "code": "(fn greatest-divisor [a b]\n  (loop [divisor 1 greatest 1]\n    (if (or (> divisor a) (> divisor b))\n      greatest\n      (if (= [0 0] [(rem a divisor) (rem b divisor)])\n        (recur (inc divisor) divisor)\n        (recur (inc divisor) greatest)))))", "user": "5d0859fbe4b0cc9c91588208"}, {"problem": 66, "code": "(fn greatest-common-divisor\n  [a b]\n  (loop [x (max a b)]\n    (if (=\n          0\n          (rem a x)\n          (rem b x))\n      x\n      (recur (dec x)))))", "user": "5d110abee4b02c15ef021983"}, {"problem": 66, "code": "(fn [a b]\n  (loop [i (min a b)]\n    (if (= 0 (rem a i) (rem b i))\n      i\n      (recur (dec i)))))", "user": "5d126728e4b02c15ef02199a"}, {"problem": 66, "code": "(fn [x y] (apply max \n                 (clojure.set/intersection \n                  (set (filter #(= (mod x %) 0) (range 1 (inc x)))) \n                  (set (filter #(= (mod y %) 0) (range 1 (inc y)))))))", "user": "5d0815b3e4b0cc9c91588201"}, {"problem": 66, "code": "(fn [a b] (if (= b 0) a (recur b (mod a b))))", "user": "5d02fe44e4b0cc9c915881c0"}, {"problem": 66, "code": "(fn f [a b]\n  (cond\n    (> a b) (f b a)\n    (= a b) a\n    f (f a (- b a))))", "user": "5012da69e4b0c8732600222d"}, {"problem": 66, "code": "(fn [a b] (first (filter #(and (zero? (rem a %1)) (zero? (rem b %1)) ) (reverse (range 1 (inc (min a b)))))))", "user": "5c665311e4b0fca0c16226a7"}, {"problem": 66, "code": "#(loop [ma (max %1 %2), mo (min %1 %2)]\n                            (if (zero? mo)\n                              ma\n                              (recur mo (mod ma mo))\n                              )\n                            )", "user": "5cf72682e4b0b71b1d808a68"}, {"problem": 66, "code": "(fn gcd [x y] \n        (if (< x y) \n          (gcd y x)\n          (cond\n            (= 0 (rem x y)) y\n            true (gcd y (rem x y)))))", "user": "5d1bbef0e4b02ea6f0fb6984"}, {"problem": 66, "code": "#(->> (min % %2)\n      (iterate dec)\n      (some (fn [x] \n              (if (= [0 0] [(mod % x) (mod %2 x)]) x))\n            )\n      )", "user": "5cfee28de4b0cc9c91588185"}, {"problem": 66, "code": "(fn gcd [x y]\n  (if (< x y)\n    (gcd y x)\n    (let [r (mod x y)]\n      (if (= r 0)\n        y\n        (gcd y r)))))", "user": "5cdc08a2e4b05ee0cb31173a"}, {"problem": 66, "code": "(fn\n  [a b]\n  (loop [d (min a b)]\n    (if (and (= (rem a d) 0)\n             (= (rem b d) 0))\n      d\n      (recur (dec d)))))", "user": "570c8ac3e4b0b0fb43fd06ca"}, {"problem": 66, "code": "(fn [a b]\n\t(if (zero? a) b (recur (mod b a) a))\n)", "user": "5d2201b8e4b02ea6f0fb69ed"}, {"problem": 66, "code": "(fn [x y]\n  (first\n   (filter #(and (zero? (mod x %)) (zero? (mod y %)))\n           (range (min x y) 0 -1))))", "user": "559622cee4b0c79f6e1db975"}, {"problem": 66, "code": "(fn x [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5d1b59abe4b02ea6f0fb697e"}, {"problem": 66, "code": "(fn dv [a b]\n  (loop [s (min a b)]\n    (if (zero? (+ (rem a s) (rem b s)) )\n      s\n      (recur (dec s))\n      )\n    )\n  \n  )", "user": "5b9ae606e4b0c0b3ffbd4af2"}, {"problem": 66, "code": "(fn [a b] (first (filter #(and (zero? (mod a %)) (zero? (mod b %))) (range a 0 -1))))", "user": "5952d75ce4b066ee0a44aed4"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? (mod a b))\n    b\n    (gcd b (mod a b))))", "user": "5d24e49be4b02ea6f0fb6a2a"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [x (min a b) y (max a b)]\n    (if (zero? (rem y x))\n      x\n      (recur x (- y x)))))", "user": "5d272077e4b092dab7f59c64"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= 0 (mod a b))\n    b\n    (gcd b (mod a b))))", "user": "5cfabf53e4b0cc9c91588148"}, {"problem": 66, "code": "(fn\n  [num1 num2]\n  (loop [gcd (max num1 num2)]\n    (if (and (= (mod num1 gcd) 0) (= (mod num2 gcd) 0))\n      gcd\n      (recur (dec gcd)))))", "user": "5d1c14cde4b02ea6f0fb698a"}, {"problem": 66, "code": "(fn pascal [a b] (if ( zero? (mod a b)) b (pascal b (mod a b))))", "user": "5d1cf523e4b02ea6f0fb6994"}, {"problem": 66, "code": "(fn [a b]\n  (loop [x a \n         y b]\n   (if (= y 0)\n      x\n      (recur y (mod x y)))))", "user": "5d046f7ce4b0cc9c915881d5"}, {"problem": 66, "code": "(fn [x y]\n  (letfn [(factors [n] (filter #(zero? (rem n %)) (range 1 (inc n))))]\n    (reduce max (clojure.set/intersection (set (factors x)) (set (factors y))))))", "user": "5ccf99fbe4b0ccb0619628c8"}, {"problem": 66, "code": "(fn ggt [x y]\n  (loop [a x\n         b y]\n    (let [rest (mod a b)]\n      (if (> rest 0)\n        (recur b rest)\n        b))))", "user": "5d231255e4b02ea6f0fb69fe"}, {"problem": 66, "code": "(fn gcd* [a b]\n  (cond\n    (< a b) (recur a (- b a))\n    (> a b) (recur (- a b) b)\n:else a))", "user": "5d29d837e4b01671435dbc6c"}, {"problem": 66, "code": "(fn greatest-divisor [a b]\n  (loop [dividend a divisor b]\n    (if (= 0 (mod dividend divisor))\n      divisor\n      (recur divisor (mod dividend divisor)))))", "user": "5d138119e4b0902706380dbb"}, {"problem": 66, "code": "(fn [a b] \n\t  (if (= b 0)\n\t    a\n\t    (recur b (mod a b))\n\t))", "user": "5d13f783e4b0902706380dc1"}, {"problem": 66, "code": "#(loop [x %1 y %2 idx 1 max-num (max x y) rt 1]\n   (if(>= idx max-num)\n     rt\n     (recur x y (inc idx) max-num (if(= (rem x idx) (rem y idx) 0) idx rt) )\n     )\n   )", "user": "5d270111e4b092dab7f59c62"}, {"problem": 66, "code": "(fn gcd [x y] (if (> y x) (gcd y x) (if (or (= y 0) (= x y)) x (if (> x y) (gcd y (- x y))))))", "user": "5d2ca236e4b01671435dbc94"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5d2bfb68e4b01671435dbc86"}, {"problem": 66, "code": "(fn [n1 n2]\n  (if (zero? n2)\n    n1\n    (recur n2 (mod n1 n2))))", "user": "5cf895efe4b0b71b1d808a85"}, {"problem": 66, "code": "(fn [a b]\n  (loop [x a y b]\n    (if (= y 0)\n      x\n      (recur y (mod x y)))))", "user": "5a23503fe4b0ff51aa4b32d6"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (if (= b 0) a\n    (recur b (mod a b))))", "user": "5a962c09e4b0d174b936c765"}, {"problem": 66, "code": "#(if (= %2 0)\n    %1\n    (recur %2 (mod %1 %2)))", "user": "5d29c06be4b01671435dbc6b"}, {"problem": 66, "code": "(fn [a b]\n  (let [get-divisors (fn [x] (into #{} (filter #(zero? (rem x %)) (range 1 (inc x)))))\n        a-divisors (get-divisors a)\n        b-divisors (get-divisors b)\n        common-divisors (clojure.set/intersection a-divisors b-divisors)]\n    (apply max common-divisors)))", "user": "5d370811e4b01671435dbd2d"}, {"problem": 66, "code": "(fn [a b]\n    (loop [m (min a b)]\n      (if (= 0 (mod a m) (mod b m)) m\n          (recur (dec m)))))", "user": "5bb25684e4b0a20761a2350d"}, {"problem": 66, "code": "(fn [a b] (apply max (filter #(and (= 0 (rem a %)) (= 0 (rem b %))) (range 1 (inc a)))))", "user": "5d3ae729e4b01671435dbd5d"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? a)\n    b\n    (recur (mod b a) a)))", "user": "5d27da09e4b092dab7f59c75"}, {"problem": 66, "code": "(fn maxmod [a b] (let [maxi (max a b) mini (min a b) test_values (vec (range 1 maxi))] (reduce #(let [res (mod a %2) res1 (mod b %2)] (if (and (= res res1 0) (< %1 %2)) %2 %1)) 1 test_values)))", "user": "55ec879ae4b0121d4835fdc8"}, {"problem": 66, "code": "#(if (= 0 %2)\n    %1\n    (recur %2 (mod %1 %2)))", "user": "58b997afe4b0888cdc949cd1"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5d3fa930e4b05dd059a5435f"}, {"problem": 66, "code": ";;(fn [a b]\n  ;;(let [get-;divisor (fn [n] (into #{}\n          ;;                    (filter #(zero? (rem n %))\n        ;;                              (range 1 (inc n)))\n      ;;                        ))\n     ;;   a-divisor (get-divisor a)\n    ;;   b-divisor (get-divisor b)\n  ;;      commom-divisor (clojure.set/intersection a-divisor b-divisor)]\n  ;;  (apply max commom-divisor)))\n\n\n\n(fn [a b]\n  (apply max \n   \t\t(clojure.set/intersection \n     \t\t(into #{} (filter #(zero? (rem a %))(range 1 (inc a))))\n    \t\t(into #{} (filter #(zero? (rem b %))(range 1 (inc b))))\n    \t)\n  )\n)", "user": "5d1b2a1ee4b02ea6f0fb6979"}, {"problem": 66, "code": "(fn my-gcd [m n]\n  (if (zero? n)\n    m\n    (recur n (mod m n))))", "user": "598601f9e4b021a7a535fe79"}, {"problem": 66, "code": "(fn gcd[n1, n2] (\n               if(= n2 0 )\n               n1\n               (gcd n2 (rem n1 n2))\n               ))", "user": "5cf53196e4b087f62be35a94"}, {"problem": 66, "code": "(fn my-gcd\n  [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5b4b8cd6e4b02d533a91bc9f"}, {"problem": 66, "code": "(fn [a b]\n  (if (= a 0)\n    b\n    (recur (rem b a) a)))", "user": "5cb41c40e4b026601754b911"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "4e628ab2535d8ccf87e9fe61"}, {"problem": 66, "code": "(fn [a b]\n  (letfn [(divs [n]\n      (set (filter #(= 0 (rem n %)) (range 1 (inc n)))))]\n    (reduce max (clojure.set/intersection (divs a) (divs b)))))", "user": "50293245e4b08353e5d459cf"}, {"problem": 66, "code": "(fn gcd [n m]\n  (if (zero? m)\n    n\n    (recur m (mod n m))))", "user": "5d1be50ce4b02ea6f0fb6986"}, {"problem": 66, "code": "(fn [A B]\n    (last (filter #(and (zero? (rem A %)) (zero? (rem B %))) (range 1 (+ 1 (min A B)))))\n  )", "user": "5d4a6c6ce4b0776584bd6f22"}, {"problem": 66, "code": "(fn gcd [_a _b]\n  (let [a (max _a _b) b (min _a _b)]\n    (if (= b 0) a\n      (gcd b (mod a b)))))", "user": "5d48e6d3e4b0776584bd6f15"}, {"problem": 66, "code": "(fn [a b]\n  (cond\n    (< a b) (recur b a)\n    (zero? b) a\n    :else (recur b (mod a b))))", "user": "5d46fbc6e4b07c84aa5ae6af"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (cond\n    (= 0 a) b\n    (= 0 b) a\n    :else \n    (let [q (mod a b)]\n      (gcd b q))))", "user": "5b62ff3ce4b0c6492753e72a"}, {"problem": 66, "code": "(fn [x y]\n  (loop [counter (max x y)]\n    (if (and  (= (rem x counter) 0) (= (rem y counter) 0))\n      counter\n      (recur (dec counter)))\n  )\n)", "user": "5d40442ee4b05dd059a54362"}, {"problem": 66, "code": "(fn gcd [x y] (loop [current (max x y) remainder (min x y)] (let [new-remainder (mod current remainder)] (if (= new-remainder 0) remainder (recur remainder new-remainder)))))", "user": "5d45bd1de4b07c84aa5ae6a4"}, {"problem": 66, "code": "(fn [m n]\n  (loop [m m n n]\n    (if (zero? (mod m n))\n      n\n      (recur\n        n\n        (mod m n)))))", "user": "5ad76df9e4b0ea6055cfac18"}, {"problem": 66, "code": "(fn [x y]\n  (let [divisors (fn [n] (into #{}\n                              (filter #(zero? (mod n %))\n                                      (range 1 (inc n)))\n                              ))\n        dx (divisors x)\n        dy (divisors y)\n        commom-divisor (clojure.set/intersection dx dy)]\n    (apply max commom-divisor)))", "user": "58472aade4b089d5ab817ea0"}, {"problem": 66, "code": "(fn [a b] \n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "user": "56bff105e4b060a8e693e3a4"}, {"problem": 66, "code": "(fn [a b]\n    (loop [x (max a b)\n           y (min a b)]\n      (cond\n        (= y 0) x\n        :else (recur y (mod x y)))))", "user": "5ab07d63e4b073f1774425af"}, {"problem": 66, "code": "(fn maximo-comun-divisor\n [a b]\n  (let [candidatos (range 1 (+ (min a b) 1))\n        divide-todos? (fn [candidato] (and (= 0 (mod a candidato))\n                                           (= 0 (mod b candidato))))\n        divisores (filter divide-todos? candidatos)]\n    (apply max divisores)))", "user": "5d0153f9e4b0cc9c915881aa"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))))", "user": "5259451ce4b0cb4875a45cd7"}, {"problem": 66, "code": "(fn gcd [a b] (if (= a b) a (gcd (Math/abs (- a b)) (min a b))))", "user": "5d47f4dbe4b07c84aa5ae6b5"}, {"problem": 66, "code": "(fn [a b]\n  (cond\n   (= a b) a\n   (> a b) (recur (- a b) b)\n   (< a b) (recur a (- b a))))", "user": "54b42ea4e4b05787c3b1638b"}, {"problem": 66, "code": "(fn gcd \n  ([x y] (gcd x y 1 1)) \n  ([x y best cur] \n   (if \n    (or \n     (> cur x) \n     (> cur y)\n    ) \n    best \n    (if \n     (and \n      (= (mod x cur) 0) \n      (= (mod y cur) 0)\n     ) \n     (gcd x y cur (inc cur)) \n     (gcd x y best (inc cur))\n    )\n   )\n  )\n )", "user": "5d4f21f3e4b0776584bd6f4e"}, {"problem": 66, "code": "(fn gcd\n  [a b] \n  (first (filter \n          #(and (zero? (rem a %)) (zero? (rem b %)) )\n          (range (max a b) 0 -1))))", "user": "5d48884ee4b07c84aa5ae6bb"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n    (zero? a) b\n    (zero? b) a\n    :else (gcd b (rem a b))))", "user": "5d0bb4fae4b0cc9c91588237"}, {"problem": 66, "code": "#(\n  (fn r\n    [i d a b]\n    (if (= 0 (rem (max a b) d))\n      d\n      (r (+ i 1) (/ (* d i) (+ i 1)) a b)\n      )\n    ) 1 (min %1 %2) %1 %2\n  )", "user": "5bdc4a76e4b0ed4b8aab4c30"}, {"problem": 66, "code": "(fn mdc\n  ([n1 n2]\n   (mdc n1 n2 2 1))\n  ([res]\n   res)\n  ([n1 n2 div res]\n   (let [n1l (quot n1 div)\n         n2l (quot n2 div)\n         n1r (rem n1 div)\n         n2r (rem n2 div)]\n     (if (or (= 1 n1) (= 1 n2))\n        res\n       (if (= 0 n1r n2r)\n         (mdc n1l n2l div (* div res))\n         (mdc (if (= n1r 0) n1l n1) (if (= n2r 0) n2l n2) (if (or (= n1r 0) (= n2r 0)) div (inc div)) res))))))", "user": "5d0beecee4b0cc9c91588239"}, {"problem": 66, "code": "(fn [x y]\n   (loop [x x\n          y y]\n     (if (= 0 y)\n       x\n       (recur y (mod x y))\n       )\n     )\n   )", "user": "5d1a1082e4b0902706380e0e"}, {"problem": 66, "code": "(fn [n m]\n  (last (filter #(= 0 (mod n %) (mod m %))\n                (rest (range (max n m))))))", "user": "5d1b2b7de4b02ea6f0fb697a"}, {"problem": 66, "code": "(fn gcd [x y]\n  (loop [a x\n         b y]\n    (cond\n      (= a b) a\n      (> a b) (recur (- a b) b)\n      (< a b) (recur a (- b a)))))", "user": "5146f343e4b04ef915e3731e"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5d590500e4b02ba5928a6824"}, {"problem": 66, "code": "#(if (zero? %2)\n\t%1\n\t(recur %2 (mod %1 %2)))", "user": "5d5502cbe4b02ba5928a680b"}, {"problem": 66, "code": "(fn gcd\n  [x y]\n  (loop [d (min x y)]\n    (if (and (zero? (rem x d))\n             (zero? (rem y d)))\n      d\n      (recur (dec d)))))", "user": "5d609ddde4b0c9e5857d5008"}, {"problem": 66, "code": "(fn\n    [n1 n2]\n    (if (zero? n2)\n      n1\n      (recur n2 (rem n1 n2))))", "user": "5d52bf29e4b0776584bd6f69"}, {"problem": 66, "code": "(fn [x y]\n  (let [larger (max x y)\n        divisors (range 1\n                        (-> larger\n                            (/ 2)\n                            Math/floor\n                            int\n                            inc))]\n    (->> divisors\n         (filter #(= 0\n                     (rem x %)\n                     (rem y %)))\n         last)\n  )\n)", "user": "5d07989ee4b0cc9c915881fb"}, {"problem": 66, "code": "#(loop [a %\n         b %2]\n   (if (zero? b)\n    a (recur b (mod a b))))", "user": "5bf06734e4b0a6d31fed2153"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (gcd b (mod a b))))", "user": "5d63ba44e4b0c9e5857d5026"}, {"problem": 66, "code": "#(loop [a %1\n        b %2]\n   (if (= b 0)\n     a\n     (recur b (mod a b))))", "user": "5d2c779be4b01671435dbc8d"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5d67c955e4b0db5d338d15f7"}, {"problem": 66, "code": "(fn gdc [x y]\n  (if (< x y) (gdc y x)\n              (let [d (- x y)]\n                (if (= d 0)\n                  y\n                  (gdc y d)))))", "user": "5be79b5be4b0f319e2d7ec5a"}, {"problem": 66, "code": "(fn [a b]\n  (apply max (filter\n        #(and (= (mod a %) 0) (= (mod b %) 0))\n        (range 1 (inc (max a b))))))", "user": "5d672bd7e4b0db5d338d15f1"}, {"problem": 66, "code": "(fn [a b]\n  (->> (range 1 (inc (min a b)))\n       (filter #(and (= 0 (mod a %))\n                     (= 0 (mod b %))))\n       (last)))", "user": "5d68f5e6e4b0db5d338d1605"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n    (= 0 b) a\n    :else (gcd b (mod a b))))", "user": "5d4c83b7e4b0776584bd6f34"}, {"problem": 66, "code": "(fn rec [a b]\n  (if (= (mod a b) 0)\n    b\n    (rec b (mod a b))))", "user": "5d64013ce4b0c9e5857d502d"}, {"problem": 66, "code": "(fn [x y]\n  (if (zero? y)\n    x\n    (recur y (mod x y))))", "user": "5d1d4ec6e4b02ea6f0fb699f"}, {"problem": 66, "code": "(fn [x y]\n  (loop [a x b y]\n  (if (zero? b)\n    a\n    (recur b (mod a b)))))", "user": "5d2e5065e4b01671435dbcae"}, {"problem": 66, "code": "(fn [x y]\n  (loop [a x b y]\n    (if (and (> a 0) (> b 0))\n      (if (> a b)\n        (recur (rem a b) b)\n        (recur a (rem b a)))\n      (+ a b))))", "user": "5c51c930e4b0fb8c5ffd99ce"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5d66aea7e4b0db5d338d15ec"}, {"problem": 66, "code": "(fn [x y] \n  (let [[smaller larger] (if (< x y) [x y] [y x])]\n    (loop [divisand larger\n           divisor smaller]\n      (let [modulus (mod divisand divisor)]\n        (if (= modulus 0)\n          divisor\n          (recur smaller modulus))))))", "user": "5d64ecb2e4b0c9e5857d5036"}, {"problem": 66, "code": "(fn [a b]\n  (let [[a b] (if (> a b) [a b] [b a])]\n    (if (zero? b) a (recur b (rem a b)))))", "user": "5d5166d9e4b0776584bd6f5e"}, {"problem": 66, "code": "(fn [val1 val2] \n   (let [range1 (range 1 (inc val1))\n       range2 (range 1 (inc val2))\n       map1 (filter #(= 0 (val %)) (zipmap range1 (map #(mod val1 %) range1)))\n       map2 (filter #(= 0 (val %)) (zipmap range2 (map #(mod val2 %) range2)))]\n   (apply max (keys (filter #(= 2 (val %)) (frequencies (into (keys map1) (keys map2))))))))", "user": "5d5ef0bce4b0c9e5857d4ffb"}, {"problem": 66, "code": "(fn gcd [n m]\n  (if (> n m)\n    (gcd m n)\n    (if (= 0 n)\n      m\n      (gcd (mod m n) n))))", "user": "5d1e19c4e4b02ea6f0fb69af"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [[a b] (if (>= a b) [a b] [b a])\n        r (mod a b)]\n    (if (= r 0) \n      b\n      (gcd b r))))", "user": "5a932f63e4b0d174b936c71b"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5245af03e4b08ba239308124"}, {"problem": 66, "code": "(fn gcd [a b] \n  (if (= b 0) a\n              (gcd b (mod a b))))", "user": "5d764e52e4b02e6b30c93524"}, {"problem": 66, "code": "(fn [nombre1 nombre2]\n  (first \n   (drop-while \n   #(not (and (= 0 (mod nombre1 %)) (= 0 (mod nombre2 %))) )\n    (reverse (range 1 (max nombre1 nombre2))))\n  ))", "user": "5a7f77fae4b00b71e582a041"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (if (= b 0)\n    a\n    (gcd b (mod a b))))", "user": "5d6691cee4b0db5d338d15e9"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n   (= a 0) b\n   (= b 0) a\n   :else (if (> a b) (recur b (mod a b)) (recur a (mod b a)))))", "user": "5d5e0259e4b0c9e5857d4fef"}, {"problem": 66, "code": "#(loop [iter 1\n         result 1]\n   (if (> iter (max % %2) )\n       result\n     (do \n      (if (= 0 (mod % iter) (mod %2 iter))\n          (recur (inc iter) iter)\n        (recur (inc iter) result)\n        )\n      )\n     )\n   )", "user": "5d5b2678e4b06a698e928ee2"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0) a\n      (recur b (rem a b))))", "user": "5d6e5b53e4b04d129b00f2c6"}, {"problem": 66, "code": "(fn [x y] (loop [gcd 1 cur 1] (if (> cur (min x y)) gcd (recur (if (and (= (rem x cur) 0) (= (rem y cur) 0)) cur gcd) (inc cur)))))", "user": "5d7158f3e4b04d129b00f2e1"}, {"problem": 66, "code": "(fn [x y]\n  (first (filter (fn [n] (= 0 (mod x n) (mod y n))) (range (min x y) 0 -1))))", "user": "5d6febe6e4b04d129b00f2d5"}, {"problem": 66, "code": "(fn [n1 n2] \n   (first (filter #(and (= 0 (mod n1 %)) (= 0 (mod n2 %)))\n                  (reverse(range 1 (+ 1 (min n1 n2)))))))", "user": "5d824225e4b0915913b1d37f"}, {"problem": 66, "code": "(fn [a b]\n  (let [rem-res (rem a b)]\n    (if (= 0 rem-res)\n      b\n      (recur b rem-res))))", "user": "5cc80598e4b0ccb061962840"}, {"problem": 66, "code": "(fn gcd\n  [numa numb]\n  (last (sort (clojure.set/intersection\n                (set (filter #(= 0 (mod numa %)) (range 1 (inc numa))))\n                (set (filter #(= 0 (mod numb %)) (range 1 (inc numb))))))))", "user": "5d6d2e11e4b04d129b00f2ba"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (rem a b))))", "user": "5d45749be4b07c84aa5ae6a2"}, {"problem": 66, "code": "(fn gcd [x y]\n  (cond\n    (= 0 x) y\n    (= 0 y) x\n    (> x y) (gcd y (mod x y))\n    (< x y) (gcd x (mod y x))\n  )\n)", "user": "5d5e9f45e4b0c9e5857d4ff5"}, {"problem": 66, "code": "(fn gcd [a b] (if (= b 0) a (gcd b (mod a b))))", "user": "5d6d2172e4b04d129b00f2b9"}, {"problem": 66, "code": "#(last (filter (fn [a]\n                   (and (= (mod %1 a) 0) (= (mod %2 a) 0)))\n                 (range 1 (max %1 %2))))", "user": "5d5c6675e4b09db18d4482ec"}, {"problem": 66, "code": "(fn [x y]\n  (loop [a (max x y)\n         b (min x y)]\n    (let [c (rem a b)]\n      (if (= c 0)\n        b\n        (recur b c)))))", "user": "5d84f5e6e4b0915913b1d38f"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n    (= a b) a\n    (> a b) (gcd (- a b) b)\n    :else (gcd a (- b a))\n    )\n  )", "user": "5d6fae1ee4b04d129b00f2d4"}, {"problem": 66, "code": "#(loop [a %1 b %2]\n   (if (= a 0) b\n     (recur (mod b a) a)))", "user": "5d4b2155e4b0776584bd6f28"}, {"problem": 66, "code": "(fn  [x y]\n   (cond\n     (> x y) (recur (- x y) y)\n     (< x y) (recur x (- y x))\n     true x\n     ))", "user": "5d917ef0e4b0915913b1d402"}, {"problem": 66, "code": "(fn [x y] (loop [b (max x y) s (min x y)] (if (= (rem b s) 0) s (recur s (rem b s)))))", "user": "5d63f1c2e4b0c9e5857d502b"}, {"problem": 66, "code": "(fn [x y] (first (for [r (range (min x y) 0 -1) :when (= 0 (mod x r) (mod y r))] r)))", "user": "59ef5280e4b0966464fe6a2b"}, {"problem": 66, "code": "(fn greatest-common-divisor\n  ([arg1 arg2]\n   (greatest-common-divisor arg1 arg2 1 []))\n  ([arg1 arg2 check fs]\n   (if (and (> check arg1) (> check arg2))\n     (apply max fs)\n     (if (and (= (mod arg1 check) 0) (= (mod arg2 check) 0))\n         (greatest-common-divisor arg1 arg2 (inc check) (conj fs check))\n         (greatest-common-divisor arg1 arg2 (inc check) fs)))))", "user": "5d896a64e4b0915913b1d3b8"}, {"problem": 66, "code": "(fn gcd [num1 num2]\n  (if (pos? num2)\n    (gcd num2 (mod num1 num2))\n    num1))", "user": "5d6f063de4b04d129b00f2d1"}, {"problem": 66, "code": "(fn gcd [a b]\n   (if (= b 0)\n     a\n     (recur b (- a (* b (quot a b))))))", "user": "5d887d27e4b0915913b1d3a8"}, {"problem": 66, "code": "(fn gcm [x1 x2] (loop [d (max x1 x2)] (if (and (= 0 (rem x1 d)) (= 0 (rem x2 d))) d (recur (dec d)))))", "user": "5d88d820e4b0915913b1d3b1"}, {"problem": 66, "code": "(fn [n m]\n  (loop [n n m m d 2 g 1]\n    (if (or (> d n) (> d m))\n      g\n      (if (and (= 0 (mod n d)) (= 0 (mod m d)))\n        (recur (/ n d) (/ m d) 2 (* g d))\n        (recur n m (inc d) g)))))", "user": "5d81b40ce4b0915913b1d379"}, {"problem": 66, "code": "(fn [a b]\n   (apply max (filter #(and (zero? (mod a %)) (and (zero? (mod b %)))) (range 1 (inc a)))))", "user": "5d9c1226e4b0d3f9b434ad51"}, {"problem": 66, "code": "(fn [a b]\n  (let [fac (fn [x]\n              (conj (->> (range (Math/ceil (Math/sqrt x)) (inc (int (/ x 2))))\n                         (filter #(= 0.0 (- (/ x %) (int (/ x %)))))\n                         (map int)\n                         (set))\n                    1 x))\n        fac-a (fac a)\n        fac-b (fac b)]\n    (->> fac-a\n         (filter #(contains? fac-b %))\n         (apply max))))", "user": "5cf6522be4b0b71b1d808a58"}, {"problem": 66, "code": "#(->> %& \n     (apply min)\n     inc\n     range \n     reverse \n     (filter \n      (fn [d] (->> %& \n                   (map (fn [n] (rem n d)) )\n                   (reduce +) \n                   (= 0) ) \n      )\n     ) \n     first \n )", "user": "5d9e7971e4b000c986472bc1"}, {"problem": 66, "code": "(fn [val1 val2] (last (filter #(= 0 (+ (mod val1 % ) (mod val2 %))) (range 1 (max val1 val2)))))", "user": "5c337305e4b0d62ef62d9f48"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b) a\n    (gcd b (rem a b))))", "user": "594fdfdce4b066ee0a44ae85"}, {"problem": 66, "code": "(fn [a b]\n          (loop [n a\n                 m b]\n            (println n \", \" m)\n            (if (= m 0)\n              n\n              (recur m (mod n m)))))", "user": "5beda647e4b0a6d31fed2122"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [divisors (+ (/ (max a b) 2) 1)]\n    (->> divisors\n         (range 1)\n         (filter #(and (zero? (mod a %))\n                       (zero? (mod b %))))\n         last)))", "user": "5d49ec5ee4b0776584bd6f1c"}, {"problem": 66, "code": "(fn gcd [x y]\n  (loop [left (if (>= x y) x y)\n         right (if (<= x y)x y)]\n    (let [mod-result (mod left right)]\n      (if (= mod-result 0)\n        right\n        (recur right mod-result)))))", "user": "5d80f328e4b0915913b1d372"}, {"problem": 66, "code": "(fn [x y]\n             (loop [i (min x y)]\n               (if (zero? (rem x i))\n\n                 (if (zero? (rem y i))\n                   i\n                   (recur (dec i)))\n\n                 (recur (dec i)))\n               )\n             )", "user": "5d974b1de4b0d3f9b434ad36"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (< a b)\n    (gcd b a)\n    (first (filter\n            #(and\n              (zero? (rem a %))\n              (zero? (rem b %)))\n            (reverse (range 1 (inc b)))))))", "user": "5da8fa72e4b000c986472c2d"}, {"problem": 66, "code": "#(loop [x %1\n        y %2]\n    (if (or (zero? x) (zero? y))\n      (max x y)\n      (recur y (mod x y))))", "user": "5ccf125ce4b0ccb0619628c0"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond \n   (= a b) a\n   (> a b) (gcd (- a b) b)\n   :else   (gcd a (- b a))))", "user": "5da760ebe4b000c986472c1a"}, {"problem": 66, "code": "(fn [val1 val2]  \n  (loop [x (min val1 val2)]\n      (if (= 0 (mod val1 x) (mod val2 x) ) \n        x\n        (recur (dec x))\n      )\n  )  \n)", "user": "5da20e73e4b000c986472be1"}, {"problem": 66, "code": "(fn gcd [n m] \n  (cond \n   (= n m) n\n   (< n m) (gcd m n)\n   (> n m) (gcd (- n m) m)))", "user": "5d97b602e4b0d3f9b434ad3a"}, {"problem": 66, "code": "(fn [& stuff]\n  ((fn div [attempt]\n      (if (every? zero? (map #(mod % attempt) stuff))\n        attempt\n        (div (dec attempt))))\n    (apply min stuff)))", "user": "5da975b9e4b000c986472c32"}, {"problem": 66, "code": "(fn [x y]\n  (apply max\n    (filter #(= 0 (mod x %) (mod y %))\n            (range 1 (max x y)))))", "user": "5d9c9446e4b0eb781811cdae"}, {"problem": 66, "code": "(fn f\n  [a b]\n  (let [rem (mod a b)]\n    (if (zero? rem)\n      b\n      (f b rem))))", "user": "524a9556e4b05ef8e38e64b1"}, {"problem": 66, "code": "(fn my-pgcd\n  [x y]\n  (loop\n    [a x\n     b y]\n    (if (zero? (rem a b))\n      b\n      (recur b (rem a b) ))))", "user": "5d9c8a85e4b0eb781811cdad"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))))", "user": "5d7aa22ee4b02e6b30c9354e"}, {"problem": 66, "code": "(fn gcd [a b]\n        (if (zero? b)\n          a\n          (recur b (mod a b))))", "user": "5dab11cde4b000c986472c45"}, {"problem": 66, "code": "#(if(zero? %2) %1 (recur %2 (mod %1 %2)))", "user": "5d965c73e4b0d3f9b434ad33"}, {"problem": 66, "code": "(fn [num1 num2]\n  (loop [x num1 \n            y num2]\n    (let [a (max x y)\n           b (min x y)\n           r (mod a b)]\n      (if (= r 0)\n        b\n        (recur b r)))))", "user": "5da8b8ece4b000c986472c28"}, {"problem": 66, "code": "#(loop [x (min %1 %2) ]   (if (= 0 (mod %1 x ) (mod %2 x))   x    (recur (dec x)   )               )    )", "user": "5da98129e4b000c986472c33"}, {"problem": 66, "code": "(fn [a b]\n  (if (not (< b a))\n    (recur b a)\n    (if (= 0 b)\n      a\n      (recur b (mod a b)))))", "user": "56403765e4b08d4f616f5edc"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (gcd b (rem a b))))", "user": "5d81eba4e4b0915913b1d37b"}, {"problem": 66, "code": "(fn gcd [a b]\n          (if (zero? b)\n          a\n          (gcd b (mod a b))));;;; 1.recur or gcd take b to replace a to become 4, and b becomes (mod 2 4) switch order\n;;;of a and b;; 2. a becomes 4 and b becomes (mod 2 4)=2 ;;; 3. gcd a=2 b=(mod 4 2)\n;;;;mod with negative numbers\n;;;(recur 7 (mod  5 7)=> 5\n;;; Euclidean Algorithm \n;;; b = a*dividor + rem until rem=0\n;;; (fn -dec [a b]\n;;;;    (if (zero? a)\n         ;; b\n         ;; (-dec b (dec b)))) 2 5);;; 1 step a=5 b=4 ;; 2 step a=4 b=3 ;; 3 step a=3 b=2;; 4 step a=2 b=1;; 5 a=1 b=0;;; 6 step a b=-1", "user": "5ce5b43be4b0a17bb84e2b7a"}, {"problem": 66, "code": "(fn gcd [x y]\n  (if (zero? y) x\n    (recur y (mod x y))))", "user": "5db0d470e4b0f8c104ccfc9e"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0) a\n    (recur b (rem a b))))", "user": "5daeb6bce4b0f8c104ccfc8b"}, {"problem": 66, "code": "(fn ddd[a b](loop[ret 0\n                    coll (range 1 (+ 1 (min a b)))]\n             (cond\n               (empty? coll) ret\n               :else (recur (cond\n                              (and (= 0 (mod a (first coll))) (= 0 (mod b (first coll)))) (first coll)\n                              :else ret)\n                            (rest coll)\n                            ))))", "user": "5dadf73ee4b0f8c104ccfc86"}, {"problem": 66, "code": "(fn [m n] \n  (if \n    (zero? n) \n    m\n    (recur n (mod m n))))", "user": "5a8aa992e4b05369db4d24d8"}, {"problem": 66, "code": "(fn [a b]\n  (loop [num1 a\n         num2 b]\n    (if (= num1 num2)\n      num1\n      (recur num2 (java.lang.Math/abs (- num1 num2))))))", "user": "5dbe63bde4b09f47823971c7"}, {"problem": 66, "code": "(fn [a b] \n   (cond\n     (= 0 a) b\n     (= 0 b) b\n     (> a b) (recur (- a b) b)\n     (< a b) (recur a (- b a ))\n     :else a))", "user": "5dc12b0ae4b0e59a23173d84"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5dbe27c3e4b09f47823971c4"}, {"problem": 66, "code": "(fn                              \n;Euclidean algorithm\n  [x y]\n  (if (zero? y)\n    x\n    (recur y (mod x y))))", "user": "5db19599e4b010eb3c36cd05"}, {"problem": 66, "code": "(fn [x y] (if (zero? x) y (recur (mod y x) x)))", "user": "5d8b4960e4b0915913b1d3d3"}, {"problem": 66, "code": "(fn gcd [a b]\n\t(cond\n    \t(< a b) (gcd b a)\n\t\t(zero? b) a\n     \t:otherwise (recur b (mod a b))\n    )\n)", "user": "5db7376fe4b010eb3c36cd43"}, {"problem": 66, "code": "(fn [x y]\n    (let [divisible? #(zero? (mod %1 %2))]\n      (dec (last (for [cur (range (inc (min x y)) 0 -1)\n                   :while (not (and (divisible? x cur)\n                                    (divisible? y cur)))]\n               cur\n               )))))", "user": "5d883119e4b0915913b1d3a6"}, {"problem": 66, "code": "(fn gcd [x y]\n  (if (= (mod x y) 0) y (gcd y (mod x y))))", "user": "54b331dbe4b09f271ff37d37"}, {"problem": 66, "code": "(fn [left right]\n  (let [divisors (fn [n] (remove #(ratio? (/ n %)) (range 1 (+ n 1))))]\n        (apply max (into '() (clojure.set/intersection (set (divisors left)) (set (divisors right)))))))", "user": "591addcee4b09b4ee5954be1"}, {"problem": 66, "code": "(fn\n  [a b]\n  (if (= b 0)\n    a\n    (recur b (rem a b))))", "user": "59ea07c9e4b0249b72820756"}, {"problem": 66, "code": "(fn [a b]\n  (let [get-divisor (fn [n] (into #{}\n                              (filter #(zero? (rem n %))\n                                      (range 1 (inc n)))\n                              ))\n        a-divisor (get-divisor a)\n        b-divisor (get-divisor b)\n        commom-divisor (clojure.set/intersection a-divisor b-divisor)]\n    (apply max commom-divisor)))", "user": "5baaae06e4b0a20761a23464"}, {"problem": 66, "code": "(fn gcd [x y]\n  (let [a (min x y)\n        b (max x y)\n        c (mod b a)]\n    (if (= c 0) a (gcd b c))))", "user": "5db92996e4b010eb3c36cd50"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))))", "user": "5dcc0ee9e4b02b31cc3da3c2"}, {"problem": 66, "code": "(fn [a b] \n  (cond\n   (> a b) (recur (- a b) b)\n   (< a b) (recur a (- b a))\n   :else a))", "user": "5078dedae4b08327cd804a5d"}, {"problem": 66, "code": "(fn [x y] (first (drop-while #(some pos? [(mod x %) (mod y %)]) (range (min x y) 0 -1))))", "user": "5dc98501e4b02f9375f4e1e6"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "59b1a1b2e4b0e1f4e384c8eb"}, {"problem": 66, "code": "(fn [a b]\n  (last (filter #(and (zero? (mod b %)) (zero? (mod a %))) (range 1 (max a b)))))", "user": "5dc318cde4b02f700ae81835"}, {"problem": 66, "code": "(fn [n1 n2]\n   (let [factors\n         (fn [n]\n           (filter #(zero? (rem n %)) (range 1 (inc n))))]\n     (apply max (clojure.set/intersection (set (factors n1)) (set (factors n2))))))", "user": "4fbb7010e4b081705acca2e7"}, {"problem": 66, "code": "(fn gcd [a b] (let [x (max a b) y (min a b)] (if (= 0 b) a (gcd b (rem a b)))))", "user": "5dcfdf23e4b0948ae9d9ad43"}, {"problem": 66, "code": "(fn [a b] (if (= b 0) \n             a \n             (recur b (mod a b))))", "user": "5dbb5200e4b09f47823971a9"}, {"problem": 66, "code": "(fn [n1 n2]\n  (loop [a (max n1 n2) b (min n1 n2) res b]\n    (if (= (rem a b) 0)\n      res\n      (recur b\n             (rem a b)\n             (rem a b)))))", "user": "5a291617e4b07f18be40aa76"}, {"problem": 66, "code": "#(let [x (filter (fn[x](= (rem %2 x)0)) (range 1 (inc %2)))\n        y (filter (fn[y] (= (rem %1 y)0))(range 1 (inc %1)))\n        m (map (fn[k](filter #{k} x))y)\n        q (apply max (flatten m))\n        ]q)", "user": "5b044436e4b0cc2b61a3bd71"}, {"problem": 66, "code": "(fn [n1 n2]\n     (loop [result 1\n            index 1]\n       (if (and (<= index n1)\n                (<= index n2))\n         (if (and (= (rem n1 index) 0)\n                  (= (rem n2 index) 0))\n           (recur index\n                  (inc index))\n           (recur result\n                  (inc index))\n           )\n         result\n         )\n       )\n     )", "user": "5dd1fb19e4b0948ae9d9ad51"}, {"problem": 66, "code": "(fn [a b] \n  (loop [i 1 t 1]\n    (println t i)\n    (if (> i (min a b))\n      t\n      (if (and (= 0 (rem a i)) (= 0 (rem b i)))\n        (recur (inc i) i)\n        (recur (inc i) t)\n        )\n      )\n    )\n  )", "user": "5d94fdf9e4b0d3f9b434ad2b"}, {"problem": 66, "code": "(fn gcd [a b]\n  (loop [c a d b]\n    (if (zero? d)\n    c\n    (recur d (rem c d)))\n  )\n)", "user": "59b0e877e4b0e1f4e384c8d3"}, {"problem": 66, "code": "(fn [x y] (last (filter #(and (= (mod x %) 0) (= (mod y %) 0)) (range 1 (+ 1 (min x y))))))", "user": "5dcb1e73e4b02b31cc3da3b6"}, {"problem": 66, "code": "( fn xxx [ a b ] ( loop [ a a b b ] ( if ( = 0 b ) a ( recur b ( mod a b)))))", "user": "53d63e6ce4b0e771c3025454"}, {"problem": 66, "code": "(fn [a b]\n  (loop [x (min a b) ma (max a b) mi (min a b)]\n    (if (and (= 0 (rem ma x)) (= 0 (rem mi x)))\n      x\n      (recur (dec x) ma mi))))", "user": "5dc9ccf8e4b02f9375f4e1f1"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "556086a2e4b0c656e3ff17c1"}, {"problem": 66, "code": "(fn [x y] (loop [a (min x y)] (if (or (= (mod x a) (mod y a) 0) (= a 1)) a (recur (dec a))  ) ))", "user": "5dd69c8ce4b0948ae9d9ad83"}, {"problem": 66, "code": "(fn gcd [a b]\n  (loop [curr 2\n         res 1]\n    (if (or (< a curr) (< b curr)) \n      res\n      (if (and (= 0 (mod a curr)) (= 0 (mod b curr)))\n        (recur (inc curr) curr)\n        (recur (inc curr) res)\n        ))))", "user": "5dd67c22e4b0948ae9d9ad80"}, {"problem": 66, "code": "(fn [num1 num2]\n  (loop [a num1 b num2]\n    (if (= b 0)\n      (identity a)\n      (recur b (mod a b)))))", "user": "5ddb6151e4b0948ae9d9adb0"}, {"problem": 66, "code": "(fn [x y] (apply max (filter #(and  (= 0 (mod x %1)) (= 0 (mod y %1))) (range 1 (inc (min x y))))))", "user": "5793931ee4b0e215f87e845c"}, {"problem": 66, "code": "(fn [x1 x2]\n   (last (filter #(= (mod x1 %) (mod x2 %) 0) (range 1 (inc (min x1 x2))))))", "user": "5dd90651e4b0948ae9d9ad97"}, {"problem": 66, "code": "#(if (= 0 %2) %1 (recur %2 (rem %1 %2)))", "user": "5de12192e4b0948ae9d9aded"}, {"problem": 66, "code": "(fn gcd [num1 num2]\n  (loop [num num1 divisor num2]\n    (let [q (quot num divisor)\n          r (rem num divisor)]\n      (if (zero? r) divisor\n        (recur divisor r)))))", "user": "5da05bcce4b000c986472bd0"}, {"problem": 66, "code": "(fn [a b] (loop [c (min a b)]\n            (if  (and (= 0 (mod a c)) (= 0 (mod b c)))\n              c\n              (recur (dec c)))))", "user": "5dcc65b7e4b02b31cc3da3c9"}, {"problem": 66, "code": "(fn [n1 n2]\n  (loop [div (min n1 n2)]\n    (if (and (= 0 (rem n1 div)) (= 0 (rem n2 div)))\n      div\n      (recur (dec div))\n    )\n  )\n)", "user": "5de6484ce4b0986d99407f66"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "user": "5ddd134ae4b0948ae9d9adc0"}, {"problem": 66, "code": "(fn [a b]\n  (some #(and (zero? (mod a %)) (zero? (mod b %)) %)\n        (range (min a b) 0 -1)))", "user": "5db35f85e4b010eb3c36cd22"}, {"problem": 66, "code": "(fn \n  [x y]\n  (->> (min x y)\n       range\n       (map inc)\n       (filter #(= (rem x %)\n                   0))\n       (filter #(= (rem y %)\n                   0))\n       (apply max)))", "user": "5d5824fae4b02ba5928a681f"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n   (< a b) (gcd b a)\n   (= 0 (mod a b)) b\n   :else (gcd b (mod a b))))", "user": "5dd60c58e4b0948ae9d9ad7c"}, {"problem": 66, "code": "(fn [a b]\n   (let [possibles (range 1 (+ 1 (min a b)))\n         set_a (set (filter #(when (= 0 (mod a %)) %) possibles))\n         set_b (set (filter #(when (= 0 (mod b %)) %) possibles))]\n     (apply max (clojure.set/intersection set_a set_b))))", "user": "5de65feee4b0986d99407f68"}, {"problem": 66, "code": "(fn [a b] (if (= b 0)\n            a\n            (recur b (mod a b))))", "user": "5c30da5ae4b0d62ef62d9f23"}, {"problem": 66, "code": "#(if (zero? %2) % (recur %2 (mod % %2)))", "user": "5ddfd88be4b0948ae9d9ade1"}, {"problem": 66, "code": "#(loop [a %1 b %2]\n   (cond\n    (= a b) a\n    (> a b) (recur (- a b) b)\n    :else (recur a (- b a))))", "user": "5ddd6cfae4b0948ae9d9adc4"}, {"problem": 66, "code": "(fn [a b] \n  (let [r (rem (max a b) (min a b))]\n    (if (= r 0)\n      (min a b)\n      (recur (min a b) r))))", "user": "5dfc457de4b0a607a9a45cea"}, {"problem": 66, "code": "(fn gcd [x y]\n  (loop [counter (min x y)]\n    (if (and (= 0 (rem x counter)) (= 0 (rem y counter)))\n      counter\n      (recur (dec counter)))))", "user": "5df0c6ffe4b093ff717275c2"}, {"problem": 66, "code": "( fn div [x y] \n  (let [ s (sort [x y]) big (last s) small (first s) r (rem big small )  ] \n    (if ( = r 0 ) small  ( div big r )  )  ) )", "user": "5ddbd202e4b0948ae9d9adb4"}, {"problem": 66, "code": "(fn\n  [a b]\n  (loop [smaller (min a b) larger (max a b)]\n    (if (= 1 smaller)\n      1\n      (if (and (= 0 (mod b smaller)) (= 0 (mod a smaller)))\n        smaller\n        (recur (dec smaller) larger)))))", "user": "5dd25ca8e4b0948ae9d9ad55"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5dfb20b8e4b0a607a9a45cd3"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n  a\n  (recur b (mod a b))))", "user": "5dfa1c67e4b0a607a9a45cc5"}, {"problem": 66, "code": "(fn [x y] (first (filter #(and (= 0 (rem x %)) (= 0 (rem y %))) (range (min x y) 0 -1))))", "user": "5dfe3928e4b0a607a9a45d04"}, {"problem": 66, "code": "(fn gcd [a b]\n    (cond (< a b) (gcd b a) ; have *a* bigger\n        (= 0 (mod a b)) b\n        :else (gcd b (mod a b))))", "user": "5bfc9037e4b0bdcf453d15f2"}, {"problem": 66, "code": "(fn [a-start b-start]\n  (loop [a a-start\n         b b-start]\n    (if (= a b) a\n        (if (> a b) \n          (recur (- a b) b)\n          (recur a (- b a))))))", "user": "5d84545ee4b0915913b1d38b"}, {"problem": 66, "code": "(fn [a b]\n   (loop [result [a b (quot a b) (rem a b)]]\n     (if (zero? (last result))\n       (nth (reverse result) 2)\n       (let [bb (nth (reverse result) 2)\n             rr (last result)]\n         (recur (conj result (quot bb rr) (rem bb rr)))))))", "user": "5d9e8e40e4b000c986472bc2"}, {"problem": 66, "code": "(fn [n1 n2] (if (= n2 0) n1 (recur n2 (rem n1 n2))))", "user": "5e03a15be4b0a607a9a45d5e"}, {"problem": 66, "code": "(fn [a b]\n  (loop [div (min a b)]\n    (if (and (= 0 (rem a div)) (= 0 (rem b div)))\n      div\n      (recur (dec div))\n    )\n  )\n)", "user": "5e09fd26e4b099d064962f60"}, {"problem": 66, "code": "(fn my_gcd [a b]\n         (cond (< a b) (my_gcd a (- b a))\n               (> a b) (my_gcd (- a b) b)\n               :else a))", "user": "5da71eaee4b000c986472c15"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5e00b6e7e4b0a607a9a45d2b"}, {"problem": 66, "code": "(fn common-divisor [n1 n2]\n  (if (= n2 0)\n    n1\n    (common-divisor n2 (rem n1 n2))))", "user": "5e0d948fe4b099d064962f98"}, {"problem": 66, "code": "(fn gcd [n1 n2]\n  (let [[x y] (sort [n1 n2])\n        [q r] ((juxt quot rem) y x)]\n    (if (zero? r) x (gcd x r))))", "user": "514992d2e4b0b64cbeae1848"}, {"problem": 66, "code": "(fn [a b]\n  (loop [m (max a b)\n         n (min a b)]\n    (let [r (mod m n)]\n      (if (zero? r)\n        n\n        (recur n r)))))", "user": "5e0ceca5e4b099d064962f91"}, {"problem": 66, "code": "(fn [a b] (if (= 0 b) a (recur b (mod a b))))", "user": "5cb0f70ce4b026601754b8c1"}, {"problem": 66, "code": "(fn gcd[a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5e0e14bde4b099d064962fa3"}, {"problem": 66, "code": "(fn [a b]\n  (first (filter #(and (zero? (mod a %))\n                       (zero? (mod b %)))\n                 (iterate dec (max a b)))))", "user": "510528a0e4b0730a5f55ad85"}, {"problem": 66, "code": "(fn gcd [a b] (if (= b 0) a (gcd b (mod a b))))", "user": "5e144bd5e4b0a047bd49f6e7"}, {"problem": 66, "code": "(fn [x y]\n  (loop [d (min x y)]\n    (if (= 0 (+ (mod x d) (mod y d)))\n      d\n      (recur (dec d)))))", "user": "57023e92e4b08d47c97781da"}, {"problem": 66, "code": "(fn get-greatest\n  [number1 number2]\n  (let [biggest (max number1 number2)\n        smallest (min number1 number2)]\n    (loop [i 1\n           better 1]\n      (if (= i biggest)\n        better\n        (recur (inc i) (if (and (zero? (mod number1 i)) (zero? (mod number2 i)))\n                         i\n                         better))))))", "user": "5df0f338e4b093ff717275c6"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5e121a89e4b099d064962fe4"}, {"problem": 66, "code": "(fn [n1 n2]\n   (apply max (let [divisors (fn [number]\n                     (set (filter #(= 0 (rem number %)) (range 1 (+ 1 number)))))]\n      (clojure.set/intersection\n       (divisors n1)\n       (divisors n2)))))", "user": "5073e7fde4b054001656accb"}, {"problem": 66, "code": "(fn [a b] (cond\n            (< a b) (recur b a)\n            (= (rem a b) 0) b\n            :else (recur b (rem a b))))", "user": "5e1754abe4b00200644e3d53"}, {"problem": 66, "code": "#(loop [a (if (< %1 %2) %2 %1)\n        b (if (< %1 %2) %1 %2)]\n   (if (= b 0)\n     a\n     (recur b (mod a b))))", "user": "5e08c3dde4b0978307768fc8"}, {"problem": 66, "code": "(fn [x y]\n  (loop [x x\n         y y]\n    (cond (= x y) y\n          (or (= 1 y) (= 1 x)) 1\n          :else (if (< x y) (recur x (- y x)) (recur (- x y) y)))))", "user": "5e07cf97e4b0978307768fb9"}, {"problem": 66, "code": "#(let [quot (/ %1 %2)] (if (= (type 1) (type quot)) %2 (/ %1 (numerator quot))))", "user": "5e042dede4b0a607a9a45d69"}, {"problem": 66, "code": "(fn [x y]\n   (reduce \n     #(if(and (= (mod x %2) 0) (= (mod y %2) 0)) %2 %1) \n     (map inc (range (min x y)))))", "user": "5e16fd78e4b0a047bd49f726"}, {"problem": 66, "code": "(fn [x y]\n    (if (zero? y)\n    x\n    (recur y (mod x y))))", "user": "5d6eaa58e4b04d129b00f2cd"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "57fc5e42e4b0d3187e900997"}, {"problem": 66, "code": "(fn gcd[n1 n2]\n  (loop [i 1 gcd 1]\n    (println i gcd)\n    (if\n      (or (> i n1) (> i n2))\n      gcd\n      (recur (inc i) (if (and (= (mod n1 i) 0) (= (mod n2 i) 0))\n                       i\n                       gcd)))))", "user": "5e078ba7e4b0978307768fb6"}, {"problem": 66, "code": "(fn [a b]\n    (if (zero? b) a\n        (recur b (mod a b))))", "user": "5d236215e4b02ea6f0fb6a09"}, {"problem": 66, "code": "#(if \n    (= %2 0)\n    %1\n    (recur %2 (mod %1 %2)))", "user": "5e1a3989e4b0dc9594008511"}, {"problem": 66, "code": "#(loop [a (max %1 %2)\n        b (min %1 %2)\n        r (rem a b)]\n   (if (= r 0)\n     b\n     (recur b r (rem b r))\n   ))", "user": "5df75fd8e4b0a607a9a45c92"}, {"problem": 66, "code": "(fn f [gcd d a b]\n   (if (and (<= a d) (<= b d))\n     gcd\n     (if (and (= (rem a d) 0) (= (rem b d) 0))\n       (f (* gcd d) d (/ a d) (/ b d))\n       (f gcd (inc d) a b)))) 1 2", "user": "4f24c859e4b0d66497709fef"}, {"problem": 66, "code": "(fn f [a b] (let [r (rem a b)] (if (= r 0) b (recur b r))))", "user": "5e2549c8e4b05b4b0151615f"}, {"problem": 66, "code": "(fn [x y] (loop [a x b y] (if (zero? b) a (recur b (mod a b)))))", "user": "5e1cc888e4b0dc959400853d"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b) a\n    (recur b (rem a b))))", "user": "5d929ceae4b0915913b1d412"}, {"problem": 66, "code": "(fn my-gcd [N1 N2]\n           (if (= 0 N2)\n             N1\n             (my-gcd N2 (mod N1 N2))))", "user": "5e1c3e6ee4b0dc9594008530"}, {"problem": 66, "code": "(fn   [a b]\n  (let [abs (fn [x] (if (neg? x) (- x) x))]\n    (loop [a (abs a) b (abs b)]\n      (if (zero? b)\n        a\n        (recur b (mod a b))))))", "user": "58f3c18ee4b0438e51c2cead"}, {"problem": 66, "code": "(fn [m n] (if (< n m) (recur n m) (if (zero? (rem n m)) m (recur (- n m) m))))", "user": "5e246f92e4b05b4b01516150"}, {"problem": 66, "code": "(fn [num1 num2]\n\t(loop [i (min num1 num2)]\n\t\t(if (= (rem num1 i) (rem num2 i) 0)\n\t\t\ti\n\t\t\t(recur (dec i)))))", "user": "5b8aa478e4b0c0b3ffbd49b2"}, {"problem": 66, "code": "(fn [num1 num2]\n  (let [divides? (fn [x y] (= (rem y x) 0))]\n    (loop [divisor (min num1 num2)]\n      (if (and (divides? divisor num1) (divides? divisor num2))\n        divisor\n      (recur (dec divisor))))))", "user": "5d7a748ce4b02e6b30c93547"}, {"problem": 66, "code": "(fn [x y]\n  (let [a (max x y)\n        b (min x y)]\n    (loop [a a\n           b b]\n      (let [r (mod a b)]\n             (if (= 0 r)\n               b\n               (recur b r))))))", "user": "5dc53ddee4b02f9375f4e1bd"}, {"problem": 66, "code": "(fn [a b]\n  (let [get-divisor (fn [n](into #{}\n                                  (filter #(zero? (rem n %))\n                                          (range 1 (inc n)))))\n        a-divisor (get-divisor a)\n        b-divisor (get-divisor b)\n        common-divisor (clojure.set/intersection a-divisor b-divisor)]\n    (apply max common-divisor)))", "user": "5e257a33e4b05b4b01516166"}, {"problem": 66, "code": "(fn [a b]\n  (apply max\n         (filter #(and (zero? (mod a %)) (zero? (mod b %)))\n                 (range 1 (inc (max a b))))))", "user": "5db5d09be4b010eb3c36cd31"}, {"problem": 66, "code": "#(loop [a %1 b %2]\n     (println {:a a :b b})\n     (let [r (rem a b)]\n       (cond\n         (= r 0) b\n         :else (recur b r))))", "user": "5e38a9cbe4b01d43a70e8dc2"}, {"problem": 66, "code": "(fn [m n]\n  (loop [m m n n]\n    (cond\n     (< m n)\n     (recur n m)\n     \n     (= 0 n)\n     m\n     \n     :else\n     (recur n (mod m n)))))", "user": "5e394c33e4b01d43a70e8dd1"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [r (rem a b)]\n    (if (zero? r)\n      b\n      (recur b r))))", "user": "5d47fa13e4b07c84aa5ae6b6"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5c3796b3e4b0d62ef62d9f77"}, {"problem": 66, "code": "(fn [a b] (apply max (filter #(= 0 (rem a %) (rem b %)) (range 1 (max a b)))))", "user": "5e3a25d4e4b01d43a70e8dde"}, {"problem": 66, "code": "#(if (= 0 %2)\n     %1\n     (recur %2 (mod %1 %2)))", "user": "5e3e23d9e4b01d43a70e8e20"}, {"problem": 66, "code": "(fn [a0 b0]\n   (loop [a a0\n          b b0]\n     (let [r (rem a b)]\n       (if (= 0 r) b (recur b r)))))", "user": "5e3ef7d4e4b01d43a70e8e2d"}, {"problem": 66, "code": "(fn [x y]\n           (loop [u x\n                  w y]\n             (if (= w 0)\n               u\n               (recur w (mod u w)))))", "user": "5e3975a3e4b01d43a70e8dd3"}, {"problem": 66, "code": "#(last (for [x (range 1 (inc (min %1 %2))) :when (= 0 (rem %1 x) (rem %2 x))] x))", "user": "5e41b679e4b01d43a70e8e58"}, {"problem": 66, "code": "(fn [a b]\n  (loop [[s g] (sort [a b])]\n    (let [r (rem g s)]\n      (if (= r 0)\n        s\n        (recur [r s])))))", "user": "5d28d935e4b092dab7f59c88"}, {"problem": 66, "code": "(fn gcd [a b]\n    (if (= 0 b)\n      a\n      (let [t1 b t2 (mod a b)]\n        (gcd t1 t2))))", "user": "5e47e1eee4b043cd24807a35"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0)\n      a\n      (recur b (mod a b))))", "user": "5e348945e4b0650de70e2b1d"}, {"problem": 66, "code": "(fn gcd [x y]\n  (cond\n   (< x y) (gcd (- y x) x)\n   (> x y) (gcd (- x y) y)\n   :else x))", "user": "5e42b688e4b01d43a70e8e6b"}, {"problem": 66, "code": "#(->> (range (apply min %&) 0 -1)\n     (filter (fn [d] (every? (fn [n] (= 0 (mod n d))) %&)))\n     (first))", "user": "5e491182e4b043cd24807a46"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= 0 b)\n    a\n    (gcd b (mod a b))))", "user": "5e471203e4b043cd24807a2a"}, {"problem": 66, "code": "(fn gcd [a b]\n    (let [m (max a b)\n          n (min a b)]\n      (if (zero? n)\n        m\n        (gcd n (mod m n))\n      )\n    )\n  )", "user": "5e2586afe4b05b4b01516167"}, {"problem": 66, "code": "(fn gcd [a b] \n  (if (= b 0) \n    a \n    \n      (gcd b (mod a b))))", "user": "5e18bd30e4b0dc95940084fa"}, {"problem": 66, "code": "(fn [n m]\n  (loop [x (max n m)]\n    (if (= 0 (rem n x) (rem m x))\n      x\n      (recur (dec x)))))", "user": "5dc72a9ce4b02f9375f4e1cd"}, {"problem": 66, "code": "(fn [one two]\n  (loop [[x y] [one two]]\n    (if (= x y)\n      x\n      (recur (if (> x y) [(- x y) y] [x (- y x)])))))", "user": "5b99554ae4b0c0b3ffbd4ace"}, {"problem": 66, "code": "(fn com-den [x y]\n  (last (filter \n    #(and (= (rem x %) 0) (= (rem y %) 0))\n    (range 1 (inc x)))))", "user": "5d078e2de4b0cc9c915881fa"}, {"problem": 66, "code": "(fn [x y]\n  (if (== y 0)\n    x\n    (recur y (mod x y)))\n  )", "user": "5dd70ee3e4b0948ae9d9ad85"}, {"problem": 66, "code": "(fn gcd [x y] (if (zero? y) x (gcd y (mod x y))))", "user": "5d828b7ee4b0915913b1d382"}, {"problem": 66, "code": "(fn [& x]\n        (loop [z (sorted-map :val (last (sort x)) :rem (first (sort x)))]  \n            (if (= (get z :rem) 0)\n            (get z :val)\n            (recur (sorted-map :rem (mod (get z :val) (get z :rem)) :val (get z :rem)))))\n          )", "user": "5e41cb44e4b01d43a70e8e5b"}, {"problem": 66, "code": "(fn gcd [n d] (cond (= 0 d) n (< n d) (recur d n) true (recur d (mod n d))))", "user": "5e5b8d92e4b0fd0acd158658"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [low (min a b)\n        high (max a b)]\n    (if (= (mod high low) 0)\n      low\n      (gcd low (rem high low)))))", "user": "5dcc152ae4b02b31cc3da3c3"}, {"problem": 66, "code": "(fn[a b](if (zero? b) a (recur b (mod a b))))", "user": "5e48ec09e4b043cd24807a45"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5ddecfe5e4b0948ae9d9adda"}, {"problem": 66, "code": "(fn gcd [a b]\n        (if (zero? b)\n          a\n          (recur b (mod a b))))", "user": "5e44c804e4b01d43a70e8e89"}, {"problem": 66, "code": "(fn [a b]\n    (let [gdc-step (fn  [[a b]]\n                (if (> a b) [b (mod a b) ] [a (mod b a)] ))\n          steps (take-while (fn [[a b]] (not (= b 0))) (iterate gdc-step [a b]))] \n      (apply min (last steps)))    )", "user": "5d89427ae4b0915913b1d3b5"}, {"problem": 66, "code": "(fn gcd [value1 value2]\n                                (if (= (rem value1 value2) 0) value2 (gcd value2 (rem value1 value2))))", "user": "5e663073e4b0fd0acd1586bc"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (gcd b (mod a b))))", "user": "5e692be9e4b04a83ad7cd269"}, {"problem": 66, "code": "#(loop [a %1 b %2]\n   (if (= b 0)\n     a\n     (recur b (mod a b))))", "user": "5cb556f9e4b026601754b934"}, {"problem": 66, "code": "(fn [x y] (apply max (filter #(every? integer? [(/ x %) (/ y %)]) (range 1 (+ 1 x)))))", "user": "5d7d17ece4b02e6b30c93558"}, {"problem": 66, "code": "(fn [a b]\n    (let [start (int (/ (max a b) 2))\n          divisor? (fn [n d] (zero? (mod n d)))]\n      (some #(and (and (divisor? a %) (divisor? b %)) %) (range start 0 -1))))", "user": "5df70ee8e4b0a607a9a45c8a"}, {"problem": 66, "code": "(fn [x y]\n     (loop [x x\n            y y]       \n       (let [r (rem x y)]\n         (if (zero? r) y (recur y r)))))", "user": "5e724492e4b085ba37836dc7"}, {"problem": 66, "code": "(fn [a b]\n  (loop\n    [x (min a b) y (max a b)]\n    (let\n      [m (mod y x)]\n      (if\n        (= m 0) x\n        (recur m x)))))", "user": "5e6e6537e4b04a83ad7cd29a"}, {"problem": 66, "code": "(fn [n1 n2] (loop [a (max n1 n2) b (min n1 n2)] (let [r (mod a b)] (if (zero? r) b (recur b r)))))", "user": "5e71f267e4b085ba37836dc1"}, {"problem": 66, "code": "(fn [x y]\n  (let [a (max x y)\n        b (min x y)]\n    (if (zero? b)\n      a\n      (recur b (mod a b)))))", "user": "5e78e8d3e4b085ba37836dfd"}, {"problem": 66, "code": "(fn [a b]\n    (loop [r (range 1 (inc (min a b)))\n           divisors []]\n      (if (empty? r)\n        (apply max divisors)\n        (let [divisor? #(= 0 (mod %1 %2))\n              n (first r)]\n          (recur (rest r)\n                 (if (and (divisor? a n) (divisor? b n))\n                   (conj divisors (first r))\n                   divisors))))))", "user": "5e5fa1ffe4b0fd0acd15867d"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5e8308abe4b09a7a73c8bbb4"}, {"problem": 66, "code": "(fn [a b]\n  (let [highest (min a b)]\n    (loop [i highest]\n      (if (and (= 0 (rem a i)) (= 0 (rem b i)))\n        i\n        (recur (dec i))\n      ))))", "user": "5e7f62cce4b085ba37836e3b"}, {"problem": 66, "code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "user": "5e6ca949e4b04a83ad7cd289"}, {"problem": 66, "code": "(fn gcd [five ten]\n   (when (> five ten) (gcd ten five))\n   (if (zero? five) ten\n                    (recur (mod ten five) five)))", "user": "5e872aaae4b09a7a73c8bbe5"}, {"problem": 66, "code": "(fn gcd [x y]\n  (apply max\n         (clojure.set/intersection\n           (set\n             ((fn dividers [x]\n                (filter #(= 0 (mod x %)) (range 1 (inc x)))) x))\n           (set\n             ((fn dividers [x]\n                (filter #(= 0 (mod x %)) (range 1 (inc x)))) y)))))", "user": "5e839edde4b09a7a73c8bbba"}, {"problem": 66, "code": "(fn gcd [a b]\n   (if (zero? b)\n     a\n     (gcd b (rem a b))))", "user": "5e7b1ef4e4b085ba37836e10"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "4eb70649535d7eef30807373"}, {"problem": 66, "code": "#(let [mult? (fn [x y] (= (mod x y) 0))]\n(apply max \n(filter (fn [n] (and (mult? %1 n) (mult? %2 n))) \n(take (min %1 %2) (iterate inc 1)))))", "user": "5e13a6b7e4b099d064963001"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (let [mods (reverse (range 1 (+ 1 (min a b))))]\n    (first (filter #(and (= (mod a %) 0) \n                         (= (mod b %) 0)) mods))))", "user": "5e7dc2d8e4b085ba37836e2f"}, {"problem": 66, "code": "(fn [a b]\n  (if (= 0 b) a\n      (recur b (mod a b))))", "user": "5e12327ee4b099d064962fe5"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b) a\n    (recur b (mod a b))))", "user": "5e639b4be4b0fd0acd1586a2"}, {"problem": 66, "code": "(fn [a b]\n  (loop [a a\n         b b]\n    (cond\n      (zero? b) a\n      :else (recur b (mod a b)))))", "user": "53528cd3e4b084c2834f4af2"}, {"problem": 66, "code": "(fn gcd [a b]\n  (->>\n    (min a b)\n    inc\n    (range 1)\n    (reduce\n      (fn [acc curr]\n        (if\n          (and\n            (zero? (mod a curr))\n            (zero? (mod b curr)))\n          curr\n          acc))\n      nil)))", "user": "5d0eed51e4b0cc9c91588262"}, {"problem": 66, "code": "#(loop [n (min % %2)]\n   (if\n     (== 0 (rem % n) (rem %2 n)) n\n     (recur (dec n))))", "user": "5e8ce2fee4b0cb0169546328"}, {"problem": 66, "code": "(fn func [a b]\n  (let [min (if (> a b) b a)\n        range-to-check (range min 0 -1)\n        divisor? (fn[num div] (= 0 (rem num div)))]\n    (first (filter \n            (fn [x] (and (divisor? a x) (divisor? b x)))\n            range-to-check))))", "user": "5e805895e4b085ba37836e44"}, {"problem": 66, "code": "(fn [a b]\n(loop[i (min a b)]\n    (if\n      (and (= (mod a i) 0) (= (mod b i) 0))\n      i\n      (recur (dec i)) )))", "user": "5e94ff5fe4b0fbed045a37ff"}, {"problem": 66, "code": "(fn [x y]\n  (let [divs (fn [n] (set (filter #(= (rem n %) 0) (range 1 (inc n)))))]\n  (last (sort (clojure.set/intersection (divs x) (divs y))))))", "user": "5e8f87c7e4b0cb0169546342"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (cond\n    (< a b) (gcd b a)\n    (= 0 (rem a b)) b\n    :else (gcd b (rem a b))))", "user": "5e9636fee4b0fbed045a3816"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (cond\n    (= a 0) b\n    (= b 0) a\n    (= a b) a\n    (> a b) (gcd (- a b) b)\n    (> b a) (gcd a (- b a))))", "user": "5be9ad9be4b0f319e2d7ec76"}, {"problem": 66, "code": "(fn [x y]\n  (first\n   \t(filter\n      #(and (= 0 (mod x %)) (= 0 (mod y %)))\n        (iterate dec (min x y)))))", "user": "5e98e8a9e4b0157ca96647dc"}, {"problem": 66, "code": "(fn gcd [a b]\n   (if (= b 0) a\n               (recur b (mod a b))))", "user": "5e99cbd4e4b0157ca96647e6"}, {"problem": 66, "code": "(fn [a b]\n  ((fn gcdh [current guess]\n    (let [newg (+ guess 1)]\n      (if (or (> newg a) (> newg b))\n        current\n        (if (= (mod a newg) (mod b newg) 0)\n          (gcdh newg newg)\n          (gcdh current newg))))) 1 1))", "user": "5e9c11f8e4b0157ca96647f6"}, {"problem": 66, "code": "(fn common-divisor\n  [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "user": "5e9771dee4b0157ca96647d0"}, {"problem": 66, "code": "(fn gda\n  [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5e980e6be4b0157ca96647d6"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5e95013fe4b0fbed045a3800"}, {"problem": 66, "code": "(fn gcd* [a b]\n  (cond\n    (< a b) (recur a (- b a))\n    (> a b) (recur (- a b) b)\n    :else a))", "user": "5e208e4be4b05b4b01516113"}, {"problem": 66, "code": "(fn[a b]\n        (if (zero? b)\n          a\n          (recur b (mod a b))))", "user": "5e978fe5e4b0157ca96647d1"}, {"problem": 66, "code": "#(loop [div (min %1 %2)]\n   (if (and (= 0 (rem %1 div)) (= 0 (rem %2 div)))\n     div\n     (recur (dec div))\n   )\n)", "user": "5e947a69e4b0fbed045a37f8"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5e9e408fe4b00a66d4a95172"}, {"problem": 66, "code": "(fn gcd \n  [a b] \n  (if (zero? b) a (recur b (mod a b))))", "user": "5e9d1c75e4b0157ca9664801"}, {"problem": 66, "code": "(fn [a b]   (last\n    (filter #(and\n               (zero? (mod a %))\n               (zero? (mod b %)))\n            (take (min a b) (iterate #(inc %) 1)))))", "user": "5e950178e4b0fbed045a3801"}, {"problem": 66, "code": "#(\n  loop [x %1, y %2]\n  (if (= y 0) x (recur y (mod x y)))\n  )", "user": "5e85d0bde4b09a7a73c8bbd6"}, {"problem": 66, "code": "(fn [a b]\n        (if (zero? b)\n          a\n          (recur b (mod a b))))", "user": "5ea35381e4b00a66d4a9519a"}, {"problem": 66, "code": "(fn gcd \n  [n1 n2] \n  (if (zero? n2) n1 (recur n2 (mod n1 n2))))", "user": "5e950310e4b0fbed045a3802"}, {"problem": 66, "code": "(fn GDC\n  [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5ea3711ae4b00a66d4a9519d"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= a b)\n    a\n    (if (> a b)\n      (recur (- a b) b)\n      (recur b (- b a)))))", "user": "59750a68e4b01722bebd4cba"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5ea6f88de4b00a66d4a951b1"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5dc88a38e4b02f9375f4e1db"}, {"problem": 66, "code": "#(loop\n    [a %1\n     b %2]\n    (let [r (rem a b)]\n        (if (= 0 r)\n            b\n            (recur b r))))", "user": "5ea2e6bfe4b00a66d4a95197"}, {"problem": 66, "code": "(fn gcd [a b] \n  (if (= b 0)\n  \ta\n    (gcd b (mod a b))\n  ))", "user": "5ea7b04de4b00a66d4a951b6"}, {"problem": 66, "code": "(fn solution [m n]\n  (let [a (max m n)\n        b (min m n)]\n    (if (= b 0)\n      a\n      (recur b (rem a b)))))", "user": "5e2ef900e4b05b4b015161fc"}, {"problem": 66, "code": "(fn [n1 n2] (if (zero? n2) n1 (recur n2 (mod n1 n2))))", "user": "5c9adfebe4b048ec896c5ab9"}, {"problem": 66, "code": "(fn gcd [a b]\n    (if (= b 0) a (gcd b (mod a b))))", "user": "5eaba9c0e4b00a66d4a951d6"}, {"problem": 66, "code": "(fn [a b]\n  (loop\n    [ap a\n     bp b]\n    \n    (if (= bp 0)\n      ap\n      (recur bp (mod ap bp))\n    )\n  )\n)", "user": "5ea97df7e4b00a66d4a951c8"}, {"problem": 66, "code": "(fn gcd [a b]\n            (cond (= a b) a\n                  (> a b) (gcd (- a b) b)\n                  (< a b) (gcd a (- b a))))", "user": "5e9683f1e4b0157ca96647c7"}, {"problem": 66, "code": "(fn [a b]\n  (let [get-divisor (fn [n] (into #{}\n                                  (filter #(zero? (rem n %))\n                                          (range 1 (inc n)))\n                                  ))\n        a-divisor (get-divisor a)\n        b-divisor (get-divisor b)\n        commom-divisor (clojure.set/intersection a-divisor b-divisor)]\n    (apply max commom-divisor)))", "user": "5e954b9ee4b0fbed045a3809"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (mod a b))))", "user": "5e9f38cce4b00a66d4a9517e"}, {"problem": 66, "code": "(fn gcd [a b]\n   (cond\n     (= a b) a\n     (> a b) (recur (- a b) b)\n     :else (recur a (- b a))))", "user": "5eb1c786e4b00a66d4a95201"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5e218bb7e4b05b4b01516123"}, {"problem": 66, "code": "(fn f [x y]\n  (if (not= x y)\n    (let [d1 (max x y)\n          d2 (min x y)]\n      (f (- d1 d2) d2))\n    x))", "user": "5e84b48ee4b09a7a73c8bbc8"}, {"problem": 66, "code": "(fn [a b]\n   (if (= 0 b)\n     a\n     (recur b (rem a b))))", "user": "5eb193fde4b00a66d4a951fe"}, {"problem": 66, "code": "(fn [x y]\n  (let [[x y] (reverse (sort [x y]))]\n    (loop [[n1 n2 r] [x y (mod x y)]]\n      (if (= r 0)\n        n2\n        (recur [n2 r (mod n2 r)])))))", "user": "5cafaa0fe4b026601754b89e"}, {"problem": 66, "code": "#(if (= 0 %2) % (recur %2 (mod % %2)))", "user": "5eb5d9bbe4b00a66d4a9522e"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5ebc7c13e4b00a66d4a95267"}, {"problem": 66, "code": "(fn cgd [x y] (reduce #(if (pos? (+ (rem x %2) (rem y %2))) %1 %2) (range 1 (max x y))))", "user": "5ea970d1e4b00a66d4a951c6"}, {"problem": 66, "code": "; \"the Euclidean algorithm\" (many orders of magnitude faster than brute force)\n(fn gcd [x y]                                                                        \n  (let [a (max x y) b (min x y)]                                                     \n    (cond                                                                            \n      (zero? a) b                                                                    \n      (zero? b) a                                                                    \n      :else (gcd b (rem a b)))))", "user": "5e5096c6e4b027a2e10ac0c6"}, {"problem": 66, "code": "(fn [a b]\n  (loop [a a\n         b b]\n    (let [temp (mod a b)]\n      (if (zero? temp)\n        b\n        (recur b temp)))))", "user": "5defc177e4b093ff717275af"}, {"problem": 66, "code": "#(loop [x (min %1 %2)]\n  (if (= 0 (rem %1 x) (rem %2 x))\n    x\n    (recur (dec x))))", "user": "5ec3a13ae4b08d0ec38692b9"}, {"problem": 66, "code": "(fn gcd [num1 num2]\n  (let [num (if (> num1 num2) num2 num1)]\n    (loop [x 1\n           greatest []]\n      (if (> x num)\n        (last greatest)\n        (recur (inc x)\n               (if (and (= (rem num1 x) 0) \n                        (= (rem num2 x) 0))\n                 (conj greatest x) \n                 greatest))))))", "user": "568f2059e4b0dcc4269f40df"}, {"problem": 66, "code": "(fn [a b]\n                (loop [a a\n                       b b]\n                  (let [r (rem a b)]\n                    (if (= r 0)\n                      b\n                      (recur b r)))))", "user": "5eb22708e4b00a66d4a95204"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "user": "5ec943fde4b08d0ec38692f1"}, {"problem": 66, "code": "#(if (zero? %2) % (recur %2 (mod % %2)))", "user": "51412b0ae4b0694e2952b79d"}, {"problem": 66, "code": "(fn gcd [n1 n2]\n  (if (> n1 n2)\n    (if (zero? (rem n1 n2))\n      n2\n      (gcd n2 (rem n1 n2))\n      )\n    (if (zero? (rem n2 n1))\n      n1\n      (gcd n1 (rem n2 n1))\n      )\n    )\n  )", "user": "5ebb4751e4b00a66d4a95262"}, {"problem": 66, "code": "#(loop [a %1, b %2]\n           (if (zero? b)\n             a\n             (recur b (mod a b))))", "user": "5ecf4ee4e4b016b56eae05a6"}, {"problem": 66, "code": "(fn gcd [a b] (let [smallerNum (if (< a b) a b)]\n                  (loop [num smallerNum]\n                    (if (or\n                         (and (= (mod a num) 0) (= (mod b num) 0))\n                         (= num 0))\n                      num\n                      (recur (dec num))))))", "user": "5ed3c43be4b016b56eae05c4"}, {"problem": 66, "code": "(fn\n  [n1 n2]\n  (apply max (apply clojure.set/intersection (map #(set (for [x (range 1 (inc %))\n    \t\t\t\t\t\t\t\t\t\t\t\t   :let [r (rem % x)]\n                                                       :when (= 0 r)]\n                                                   x))\n                                           [n1 n2]))))", "user": "5ecfd429e4b016b56eae05a9"}, {"problem": 66, "code": "#(if (zero? %2)\n    %1\n    (recur %2 (mod %1 %2)))", "user": "5eccbce6e4b016b56eae058e"}, {"problem": 66, "code": "(fn greatest-common-divider [x y]\n  (->> (range (min x y) 0 -1)\n       (filter #(zero? (mod y %)))\n       (filter #(zero? (mod x %)))\n       first))", "user": "5eac172fe4b00a66d4a951dd"}, {"problem": 66, "code": "(fn [a b]\n      (if (zero? b)\n        a\n        (recur b (mod a b))))", "user": "5ea21034e4b00a66d4a95191"}, {"problem": 66, "code": "#(loop [a (max %1 %2)\n        b (min %1 %2)]\n      (let [r (rem a b)]\n        (if (= r 0)\n          b\n          (recur b r ))))", "user": "5ed6030de4b016b56eae05db"}, {"problem": 66, "code": "(fn [a b]\n  (loop [x (if (> a b)\n            a\n            b)\n        y (if (<= a b)\n            a\n            b)]\n    (if (= y 0)\n      x\n      (recur y (mod x y))\n  )))", "user": "5ebdb3d2e4b00a66d4a95275"}, {"problem": 66, "code": "(fn f [a b] \n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5ed15e23e4b016b56eae05ba"}, {"problem": 66, "code": "(fn [a b]\n         (let [m (min a b)]\n           (reduce\n             (fn [r i]\n               (if (and (= 0 (rem a i)) (= 0 (rem b i)))\n                 i\n                 r))\n             (concat (range (inc (/ m 2))) [m]))))", "user": "5ebff55de4b00a66d4a95286"}, {"problem": 66, "code": "(fn gcd [x y] \n  (cond \n   (< x y) (gcd x (- y x))\n   (> x y) (gcd (- x y) y)\n   :else x\n ))", "user": "5ed4482be4b016b56eae05ca"}, {"problem": 66, "code": "#(/ (min %1 %2) (numerator (/ (min %1 %2) (max %1 %2))))", "user": "5ed9c2cde4b0c7845d86b0e4"}, {"problem": 66, "code": "(fn m [num div] (if (zero? (mod num div)) div (m div (mod num div))))", "user": "5ed03b7fe4b016b56eae05ae"}, {"problem": 66, "code": "#(if (zero? %2)\n          %1\n          (recur %2 (mod %1 %2)))", "user": "56a1fce9e4b0542e1f8d14b7"}, {"problem": 66, "code": "(fn gcd [n1 n2]\n  (if (= n2 0)\n    n1\n    (gcd n2 (mod n1 n2))))", "user": "5edd6eb7e4b0c7845d86b0f7"}, {"problem": 66, "code": "#(->> (range 1 (inc (apply min %&)))\n       (filter (fn [x] (= 0 (mod (first %&) x) (mod (second %&) x))))\n       (apply max)\n       )", "user": "5ed8a12fe4b0c7845d86b0d7"}, {"problem": 66, "code": "(fn gcd [num1 num2]\n  (if (= 0 num2)\n    num1\n  (gcd num2 (mod num1 num2))))", "user": "5ec819b4e4b08d0ec38692e2"}, {"problem": 66, "code": "(fn [a b]\n  (let [lesser-number (#(if (< %1 %2) %1 %2) a b)]\n    (reduce (fn [accum v] (if (and (= 0 (rem b v)) (= 0 (rem a v)))\n                        v\n                        accum))\n            (range 1 (inc lesser-number)))))", "user": "53c73e8ae4b00fb29b2212a5"}, {"problem": 66, "code": "#(let [b %2\n       r (rem %1 %2)]\n   (if (= 0 r)\n     b\n     (recur b r)))", "user": "5ec6de19e4b08d0ec38692da"}, {"problem": 66, "code": "(fn gcd [a b] (cond\n               (< a b) (gcd b a)\n               (= a b) a\n               (> a b) (gcd (- a b) b)))", "user": "5ee93720e4b029a2061bbeb7"}, {"problem": 66, "code": "(fn [x y]\n  (loop [a x\n         b y\n         div (- y 1)]\n    (cond\n      (= 0 (mod a b)) b\n      (= 0 (mod b a)) a\n      (and (= 0 (mod a div)) (= 0 (mod b div))) div\n      :else (recur a b (dec div)))))", "user": "5eb6561fe4b00a66d4a95233"}, {"problem": 66, "code": "#(cond (> %1 %2) (recur (- %1 %2) %2)\n       (< %1 %2) (recur %1 (- %2 %1))\n       :else %1)", "user": "5ee738dee4b029a2061bbea2"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5cf1d9e3e4b0aaa82f112a18"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5edb07dde4b0c7845d86b0ed"}, {"problem": 66, "code": "(fn gsd [x1 x2]\n  (let [[s l] (sort [x1 x2])]\n    (#(if (<= %1 0) %2 (recur (rem %2 %1) %1)) \n     s l)))", "user": "5ed52854e4b016b56eae05d2"}, {"problem": 66, "code": "(fn [x y]\n  (apply * (apply clojure.set/intersection (map (fn [num]\n                                                  (loop [divisors #{}\n                                                         n        num]\n                                                    (if (= n 1)\n                                                      divisors\n                                                      (let [next-div (first (filter #(= (mod n %) 0) (range 2 (inc n))))]\n                                                        (recur (conj divisors next-div) (/ n next-div))))))\n                                                [x y]))))", "user": "5ed875abe4b016b56eae05f2"}, {"problem": 66, "code": "(fn [& s] \n  (let [x (sort s)]\n    (loop [a (first x) b (last x)]\n      (if (= 0 (mod a b))\n        b\n        (recur b (mod a b))\n        )\n      )\n    )\n  )", "user": "5df08767e4b093ff717275bf"}, {"problem": 66, "code": "(fn gcd [a, b]\n  (if \n    (== a 0)\n    b\n    (gcd (mod b a) a)))", "user": "5eb4927fe4b00a66d4a95221"}, {"problem": 66, "code": "(fn [a b]\n    (if (zero? a)\n      b\n      (recur (rem b a) a)))", "user": "5eeb03dde4b029a2061bbeca"}, {"problem": 66, "code": "(fn [a b] (apply max (filter\n         #(and (integer? (/ a %)) (integer? (/ b %)))\n         (range 1 (inc (max a b))))))", "user": "5e17bb46e4b00200644e3d5a"}, {"problem": 66, "code": "(fn gcd [n1 n2]\n  (apply max (for [x (range 1 (max n1 n2))\n                   :let [y (min n1 n2)\n                         mod1 (mod n1 x)\n                         mod2 (mod n2 x)]\n                   :when (and (= mod1 0) (= mod2 0))] x)))", "user": "565b371fe4b068f2fe63dbff"}, {"problem": 66, "code": "(fn [x1 x2] (if\n    (= x2 0) x1\n    (recur x2 (mod x1 x2))))", "user": "5eeeb000e4b07c55ae4a0515"}, {"problem": 66, "code": "(fn gcd [a b]\n      (\n        if (> a b)\n        (\n          if (= (rem a b) 0)\n          b\n          (gcd b (rem a b))\n          )\n        (\n          if (= (rem b a) 0)\n          a\n          (gcd b (rem b a))\n          )\n        ))", "user": "5eee9352e4b07c55ae4a0512"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= a b) a\n      (if (> a b) (gcd (- a b) b) (gcd a (- b a)))))", "user": "5eee7311e4b07c55ae4a0510"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= 0 b) a (gcd b (mod a b))))", "user": "5ecc0831e4b016b56eae058c"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n    (= a 0) b\n    (= b 0) a\n    :else (gcd b (mod a b))))", "user": "5eccc5c2e4b016b56eae058f"}, {"problem": 66, "code": "(fn gcd [& args]\n  (let [[x y] (sort > args)]\n    (if (zero? y)\n      x\n      (gcd y (rem x y)))))", "user": "5ef18431e4b07c55ae4a0529"}, {"problem": 66, "code": "#((fn gcd [x y]\n     (let [r (mod x y)]\n       (if (= r 0)\n         y\n         (gcd y r)))) (max %1 %2) (min %1 %2))", "user": "5ed70b97e4b016b56eae05e6"}, {"problem": 66, "code": "(fn [m n]\n        (loop [big m\n               small n]\n                (if (zero? small)\n                  big\n                  (recur small (mod big small)))))", "user": "5e9b7aefe4b0157ca96647f1"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (if (= a b)\n    a\n    (gcd (min a b) (- (max a b) (min a b)))))", "user": "5eec1001e4b07c55ae4a0502"}, {"problem": 66, "code": "#(first(for [x (range (min %1 %2) 0 -1) \n              :when (= 0 (mod %1 x) (mod %2 x))] \n          x))", "user": "576aea4fe4b0a07e8fc18126"}, {"problem": 66, "code": "(fn [a b]\n  (loop [divisor 1 result 1]\n    (if (or (= divisor a) (= divisor b))\n      (if (and (= (mod a divisor) 0) (= (mod b divisor) 0))\n        divisor\n        result)\n      (recur\n        (inc divisor)\n        (if (and (= (mod a divisor) 0) (= (mod b divisor) 0))\n          divisor\n          result)))))", "user": "5ee81beae4b029a2061bbeac"}, {"problem": 66, "code": "#(last (take-while pos? (map last (iterate (fn [[a b]] [b (rem a b)]) [% %2]))))", "user": "5eff339ae4b0cf489e8d7f0c"}, {"problem": 66, "code": "(fn gcd [a b]\n  ((fn iter [larger smaller]\n    (if (or (zero? (rem larger smaller))\n             (= 1 smaller))\n      smaller\n      (iter smaller (rem larger smaller))))\n   (max a b) (min a b)))", "user": "5edfb1e5e4b0c7845d86b107"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (gcd b (mod a b))))", "user": "5edc16e1e4b0c7845d86b0f1"}, {"problem": 66, "code": "(fn [n1 n2] (some #(if (and (= (mod n1 %) 0) (= (mod n2 %) 0)) %)  (take-while #(> % 0) (iterate #(dec %) (min n1 n2)))))", "user": "5ef5ee81e4b07c55ae4a054a"}, {"problem": 66, "code": "#(last (filter (fn [d] (and (integer? (/ %1 d)) (integer? (/ %2 d)))) (range 1 (+ 1 (min %1 %2)))))", "user": "5e909685e4b0cb016954634d"}, {"problem": 66, "code": "(fn [x y]\n    (loop [acc (min x y)]\n      (if (= 0 (rem x acc) (rem y acc))\n        acc\n        (recur (dec acc))\n        )))", "user": "5a09ebf8e4b0eab8c0448932"}, {"problem": 66, "code": "(fn gcd [n1 n2]\n  (let [[x y] (if (> n1 n2) [n2 n1] [n1 n2])\n        reminder (rem y x)]\n    (if (= 0 reminder)\n      x\n      (gcd reminder n1))))", "user": "55ce2b6de4b0e31453f64a26"}, {"problem": 66, "code": "(fn [a-start b-start]\n  (loop [a a-start b b-start]\n    (if (= b 0)\n      a\n      (recur b (mod a b)))))", "user": "5f0b61e6e4b0f30dddfb5d44"}, {"problem": 66, "code": "(fn [n1 n2] (last (filter\n                      #(and (zero? (mod n1 %))(zero? (mod n2 %)))\n                      (range 1 (inc (min n1 n2))))))", "user": "5f02f365e4b0cf489e8d7f2c"}, {"problem": 66, "code": "(fn sol66\n  [x y]\n  (loop [n1 x\n         n2 y]\n    (if (= n2 0)\n      n1\n      (recur n2 (mod n1 n2) )))\n  )", "user": "5e9e642ce4b00a66d4a95174"}, {"problem": 66, "code": "#(if (zero? %2)\n   %1\n   (recur %2 (mod %1 %2)))", "user": "5f03550ce4b0cf489e8d7f33"}, {"problem": 66, "code": "(fn [k1 k2]\n   (let [mn (min k1 k2)]\n     (loop [ind mn]\n       (if (or (<= ind 1) (and (zero? (mod k1 ind)) (zero? (mod k2 ind))))\n         ind\n         (recur (dec ind))))))", "user": "58ed2e21e4b056aecfd47d7a"}, {"problem": 66, "code": "(fn [a b]\n      (if (= b 0)\n        a\n        (recur (if (> a b) b a) (if (> a b) (mod a b) (mod b a)))))", "user": "5ef82119e4b09b61f08553c6"}, {"problem": 66, "code": "(fn [a b](\n          loop[a a\n               b b](\n                    if (or (= a 0) (= b 0))\n                    (+ a b)\n                    (if (> a b)\n                      (recur (mod a b) b)\n                      (recur a (mod b a))))))", "user": "5e7bb000e4b085ba37836e1d"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "57e070fde4b0bd073c202478"}, {"problem": 66, "code": "(fn gcd\n  [x y]\n  (if (= y 0)\n    x\n    (recur y (mod x y))))", "user": "5f003099e4b0cf489e8d7f17"}, {"problem": 66, "code": "(fn greatest-common-denom\n  [n1 n2]\n  (loop [ n (reverse (range 1 (inc n1)))]\n    (if (and (= 0 (mod n2 (first n))) (= 0 (mod n1 (first n))) )\n      (first n)\n      (recur (rest n)))))", "user": "5f088bb3e4b0cf489e8d7f5f"}, {"problem": 66, "code": "#(apply max (filter (fn [x] (and (= (rem %1 x) 0) (= (rem %2 x) 0))) (range 1 (inc (min %1 %2)))))", "user": "5f0b8243e4b0f30dddfb5d45"}, {"problem": 66, "code": "#(reduce (fn [prev-max x] (if (= 0 (rem % x) (rem %2 x)) x prev-max)) (range 1 (inc (min % %2))))", "user": "5f03ab5be4b0cf489e8d7f37"}, {"problem": 66, "code": "(fn gcd [x y]\n  (if (zero? y)\n    x\n    (gcd y (mod x y))))", "user": "5f10fb99e4b091ba50b4dba8"}, {"problem": 66, "code": "(fn gcd [a b]\n\t(loop [d (min a b)]\n\t\t(if (and (= 0 (mod a d)) (= 0 (mod b d))) \n\t\t\td \n\t\t\t(recur (dec d))\n\t\t)\n\t)\n)", "user": "5d73530ce4b02e6b30c93514"}, {"problem": 66, "code": "(fn gcd [x y] (some (fn [%] (println % x y) (if (= 0 (rem x %) (rem y %)) % nil))  (reverse (range 1 (inc (min x y))))))", "user": "5509a23ee4b06e50f9beb11a"}, {"problem": 66, "code": "(fn [x y]\n  (loop [a (max x y)\n         b (min x y)\n         r (rem a b)]\n    (if (= r 0) b\n      (recur b r (rem b r)))))", "user": "5d83b9aae4b0915913b1d386"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (if (= a 0) b\n    (recur (mod b a) a)))", "user": "5e9b6471e4b0157ca96647f0"}, {"problem": 66, "code": "(fn clj41\n   [one two]\n  (loop [div (dec (max one two))]\n    (if (<= div 1)\n      1\n      (do\n        (if (and (= 0 (mod one div)) (= 0 (mod two div)))\n          div\n          (recur (dec div)))\n        ))))", "user": "5ec5f7f2e4b08d0ec38692d1"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (gcd b (rem a b))))", "user": "5e3071abe4b05b4b01516213"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond (= b 0) a\n        (> b a) (gcd a (rem b a))\n        (< b a) (gcd b (rem a b))))", "user": "58f98231e4b0438e51c2cf4c"}, {"problem": 66, "code": "(fn gcd [a b]\n        (if (zero? b)\n          a\n          (recur b (mod a b))))", "user": "5f18444ee4b091ba50b4dbd3"}, {"problem": 66, "code": "(fn foo  \n  ([x y] (foo x y (if (< x y) x y)) )\n  ([x y s] (if (and (= (mod x s) 0) (= (mod y s) 0)) s (foo x y (dec s)) )))", "user": "5f19ecbae4b091ba50b4dbdf"}, {"problem": 66, "code": "(fn func [x y]\n  (loop [i (min x y)]\n    (if (= 0 (mod x i) (mod y i))\n      i\n      (recur (dec i)))))", "user": "5666c2dbe4b04acd4f672dc3"}, {"problem": 66, "code": "(fn __ [x y]\n  (let [one-to-x (range 1 (inc x))\n        one-to-y (range 1 (inc y))\n        divisors-x (set (map first (filter #(val %) (zipmap one-to-x (map zero? (map #(mod x %) one-to-x))))))\n        divisors-y (set (map first (filter #(val %) (zipmap one-to-y (map zero? (map #(mod y %) one-to-y))))))]\n    (apply max (clojure.set/intersection divisors-x divisors-y))))", "user": "4f0f7339535d0136e6c2233e"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [a' (max a b)\n        b' (min a b)\n        x (mod a' b')]\n    (if (zero? x) b' (gcd b' x))))", "user": "5d431c77e4b07c84aa5ae68f"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (> b a)\n    (gcd b a)\n    (let [r (rem a b)]\n      (if (= r 0)\n        b\n        (gcd b r)))))", "user": "5b92f178e4b0c0b3ffbd4a41"}, {"problem": 66, "code": "#(reduce max (\n              (fn [a b]\n\t\t\t\t(for [i (range (max a b))\n              \t\t  :when (and (not= i 0) (= (mod a i)0) (= (mod b i) 0))\n              \t\t ]\n\t\t\t\t\ti)) %1 %2))", "user": "5f1aade6e4b091ba50b4dbe4"}, {"problem": 66, "code": "(fn [a b]\n  (.gcd (biginteger a) (biginteger b)))", "user": "5f081f6de4b0cf489e8d7f5a"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (if (< a b)\n    (gcd b a)\n    (if (= b 0)\n      a\n      (gcd b (rem a b)))))", "user": "5bc7f2d6e4b07a9b28b100b7"}, {"problem": 66, "code": "(fn gcd* [a b]\n  (cond\n    (< a b) (recur a (- b a))\n    (> a b) (recur (- a b) b)\n    :else a))", "user": "5f22e8c9e4b0f565ad99828b"}, {"problem": 66, "code": "(fn [a b] (if (= 0 b) a (recur b (mod a b))))", "user": "5f2c02d1e4b033932238a65f"}, {"problem": 66, "code": "(fn [a b] (some #(if (= 0 (rem a %) (rem b %)) %) (range (min a b) 0 -1)))", "user": "596a66cde4b069c0a1a19803"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5b7f2d75e4b047b03b203768"}, {"problem": 66, "code": "(fn gcd [x y]\n  (if (zero? y)\n    x\n    (gcd y (rem x y))))", "user": "5ee75f8be4b029a2061bbea5"}, {"problem": 66, "code": "(fn [a b]\n    (loop [cur-val (min a b)]\n      (if (and (zero? (rem a cur-val))\n               (zero? (rem b cur-val)))\n        cur-val\n        (recur (dec cur-val)))))", "user": "51553ea7e4b06c5f6a1490a2"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= 0 b)\n    a\n    (recur b (mod a b))))", "user": "5f1af439e4b0f565ad998257"}, {"problem": 66, "code": "(fn greatest-common-divisor [a b]\n  (let [lower (min a b)\n        higher (max a b)\n        divisible? (fn [x y]\n                     (when (= 0 (mod x y)) y))]\n    (some (fn [x] (and (divisible? higher x)\n                       (divisible? lower x)))\n          (->> lower\n               range\n               (map inc)\n               reverse))))", "user": "50c99e3ee4b0bed41a122997"}, {"problem": 66, "code": "(fn [& args]\n  (let [[x y] (sort args)]\n    (loop [d 1 m 1]\n      (if (>= d y)\n        m\n        (recur (inc d) (if (and (zero? (mod x d)) (zero? (mod y d))) d m))))))", "user": "5e9154c1e4b0cb0169546354"}, {"problem": 66, "code": "(fn bgcd [a b]\n  (letfn [(half [a] (bit-shift-right a 1))\n          (twice [a] (bit-shift-left a 1))]\n    (loop [a a b b m 1]\n      (cond\n        (zero? a) (* m b)\n        (zero? b) (* m a)\n        (== b a) (* m b)\n        (or (== a 1) (== b 1)) m\n        (and (even? a) (even? b)) (recur (half a) (half b) (long (twice m)))\n        (even? a) (recur (half a) b m)\n        (even? b) (recur a (half b) m)\n        (> b a) (recur b a m)\n        :else (recur (half (- a b)) b m)))))", "user": "5f300f28e4b033932238a682"}, {"problem": 66, "code": "(fn [& args] \n  (apply max (apply clojure.set/intersection \n                    (#(for [x args] (set \n                                   (for [factor (range 1 (inc x)) :when (= (rem x factor) 0)] factor)\n                                   )\n                        \n                      )\n                    )\n         )\n  )\n)", "user": "5f309144e4b0574c87022c23"}, {"problem": 66, "code": "(fn f \n  [x y]\n  (let [bigger (max x y) smaller (min x y) q (quot bigger smaller) r (rem bigger smaller)]\n    (if (= r 0) smaller (f r smaller))))", "user": "5ea6fe98e4b00a66d4a951b2"}, {"problem": 66, "code": "(fn [a b]\n   (loop [v1 a\n          v2 b]\n     (let [bigger (if (> v1 v2) v1 v2)\n           smaller (if (> v1 v2) v2 v1)\n           r (rem bigger smaller)]\n       (if (= r 0)\n         smaller\n         (recur smaller r)))))", "user": "5f3f2281e4b004f08c61c561"}, {"problem": 66, "code": "(fn [a b]\n  (loop [ca a\n         cb b]\n    (if (= cb 0)\n      ca\n      (recur cb (mod ca cb)))))", "user": "5f3ddc71e4b004f08c61c551"}, {"problem": 66, "code": "(fn [a b]\n  (let [[a b] (sort [a b])\n        m (mod b a)]\n    (if (= m 0)\n      a\n      (recur m a))))", "user": "566812f0e4b04acd4f672de1"}, {"problem": 66, "code": "; stolen efficient solution (fn gcd [a b] (if (zero? b) a (gcd b (rem a b))))\n; https://www.geeksforgeeks.org/c-program-find-gcd-hcf-two-numbers/#:~:text=GCD%20(Greatest%20Common%20Divisor)%20or,98%20and%2056%20is%2014.\n(fn great [a, b]\n  (loop [iter (min a b)]\n    (if (every? zero? (vector (mod a iter) (mod b iter)))\n      iter\n      (recur (dec iter))\n    )\n    )\n  )", "user": "5f0824c5e4b0cf489e8d7f5b"}, {"problem": 66, "code": "(fn [a b]\n        (if (zero? b)\n          a\n          (recur b (mod a b))))", "user": "5b6962c1e4b0c6492753e787"}, {"problem": 66, "code": "(fn [a b] (let [lim (min a b) other (max a b)] (loop [div lim] (if (and (= 0 (mod other div)) (= 0 (mod lim div))) div (recur (dec div))))))", "user": "5f2c94b4e4b033932238a669"}, {"problem": 66, "code": "(fn [f s]\n  (let [x #(reduce \n                (fn [out part]\n                  (if (= (mod % (inc part)) 0)\n                    (conj out (inc part))\n                    out\n                  ))\n              []\n              (range %))]\n    (last(sort (filter (set (x f)) (set (x s)))))\n  ))", "user": "5f3a8493e4b004f08c61c527"}, {"problem": 66, "code": "(fn gcd- [n m] (if (= (mod n m) 0)\n                 m\n                 (recur m (mod n m))))", "user": "5d92b543e4b0915913b1d414"}, {"problem": 66, "code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "user": "5f3abcc4e4b004f08c61c52b"}, {"problem": 66, "code": "(fn gcd [a b]\n    (->>  (min a b)\n          inc\n          (range 1)\n          (filter (fn [n] (and (zero? (mod a n)) (zero? (mod b n)))))\n          (apply max)))", "user": "5f431d32e4b0955706451fb5"}, {"problem": 66, "code": "#(loop [mx (max %1 %2) mn (min %1 %2) n mn]\n      (if (= 0 (mod mx n) (mod mn n))\n        n\n        (recur mx mn (dec n))))", "user": "5dd84170e4b0948ae9d9ad93"}, {"problem": 66, "code": "(fn [a b] (apply *\n                  ((fn [[a b]] (loop [i (first a)\n                                      a (rest a)\n                                      b b\n                                      result []]\n                                 (if (= i nil)\n                                   result\n                                   (if (or (some #(= % i) b) false)\n                                     (recur (first a)\n                                            (rest a)\n                                            (into (filter #(not= % i) b) (rest (filter #(= % i) b)))\n                                            (conj result i))\n                                     (recur (first a)\n                                            (rest a)\n                                            b\n                                            result)))))\n                   (map (fn [x] (loop [n x\n                                       d 2\n                                       result []]\n                                  (if (= n d)\n                                    (conj result n)\n                                    (if (= (rem n d) 0)\n                                      (recur (/ n d) 2 (conj result d))\n                                      (recur n (inc d) result)))))\n                        [a b]))))", "user": "5992dc6ae4b0866487ed0d7d"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (let [small (min a b)\n        large (max a b)]\n    (if (= 0 (mod large small))\n      small\n      (gcd small (rem large small))))\n  )", "user": "5f29837ee4b033932238a64f"}, {"problem": 66, "code": "(fn [a b]\n    (->> (min a b)\n         (#(range % 0 -1))\n         (filter #(= 0 (mod a %) (mod b %)))\n         first))", "user": "5c527129e4b0fb8c5ffd99de"}, {"problem": 66, "code": "(fn [a b]\n  (loop [[x y] (sort > [a b])] \n    (if (= y 0)\n      x\n      (recur [y (rem x y)]))))", "user": "5f38eecce4b0574c87022c72"}, {"problem": 66, "code": "(fn gcd [m n & [r s]]\n  (if (nil? r) (gcd m n 0 1)\n      (case s\n        1 (gcd m n (mod m n) 2)\n        2 (if (= r 0) n (gcd m n r 3))\n        3 (gcd n r r 1))))", "user": "5f313d01e4b0574c87022c28"}, {"problem": 66, "code": "(fn [a b]\n  (apply max (filter #(= 0 (rem b %)) (filter #(= 0 (rem a %)) (range 1 (inc (max a b))))))\n)", "user": "5f574662e4b0a0bc16850a90"}, {"problem": 66, "code": "(fn my-gcd [a b]\n  (if\n     (zero? b) a\n      (recur b (mod a b))))", "user": "5f4eb036e4b0102c75033969"}, {"problem": 66, "code": "(fn [a b]\n  ((fn ea [a b]\n    (let [c (mod a b)]\n      (if (= 0 c)\n        b\n        (ea b c)))) a b))", "user": "5f5e7158e4b02876ed9fcff0"}, {"problem": 66, "code": "(fn gcd\n    [x y]\n    (if (zero? y) x\n      (gcd y (rem x y))))", "user": "5f32f69ae4b0574c87022c35"}, {"problem": 66, "code": "(fn [a b] (if (= b 0) a (recur b (mod a b))))", "user": "5f0dfa48e4b0f30dddfb5d55"}, {"problem": 66, "code": "(fn gcd* [a b] \n (cond \n    (< a b) (recur a (- b a)) \n    (> a b) (recur (- a b) b) \n    :else a\n )\n)", "user": "5f631e11e4b02876ed9fd011"}, {"problem": 66, "code": "(fn gcd [a b]\n    (cond\n      (< a b) (recur (- b a) a)\n      (> a b) (recur (- a b) b)\n      :else b))", "user": "5c9dcb36e4b048ec896c5b1d"}, {"problem": 66, "code": "(fn f [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5f5f9483e4b02876ed9fcff8"}, {"problem": 66, "code": "(fn [d1 d2]\n  (loop [dd1 d1 dd2 d2]\n    (if (= dd1 dd2)\n      dd1\n      (recur\n        (if (> dd1 dd2) (- dd1 dd2) dd1)\n        (if (> dd2 dd1) (- dd2 dd1) dd2)\n        ))\n    )\n  )", "user": "5f58db95e4b0a0bc16850a9a"}, {"problem": 66, "code": "(fn\n  [a b]\n  (reduce max (clojure.set/intersection\n    (set (filter (fn [x] (= 0 (rem a x))) (range 1 (inc a))))\n    (set (filter (fn [x] (= 0 (rem b x))) (range 1 (inc b))))\n    )))", "user": "5f63d933e4b02876ed9fd018"}, {"problem": 66, "code": "(fn [m n]  (cond (< m n)   (recur n m)\n          (zero? n) m\n          :else     (recur n (mod m n))))", "user": "5eff6c0ee4b0cf489e8d7f11"}, {"problem": 66, "code": "(fn gcd [a b]\n        (if (zero? b)\n          a\n          (recur b (mod a b))))", "user": "5f5f2eafe4b02876ed9fcff5"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (->> \n    (range (min a b) 0 -1)\n    (drop-while (fn [x] (not (and (zero? (rem a x))\n                             (zero? (rem b x))))))\n      \n    first))", "user": "5f724f55e4b02876ed9fd089"}, {"problem": 66, "code": "(fn g [a b]\n  (if (zero? b) a\n      (g b (mod a b))))", "user": "588fbb39e4b00487982d51bd"}, {"problem": 66, "code": "(fn gcd [a,b]\n  (cond\n    (< a b) (gcd b a)\n    (zero? b) a\n    :else (gcd b (mod a b))\n  )\n)", "user": "5f686436e4b02876ed9fd03c"}, {"problem": 66, "code": "(fn gcd\n  [x y]\n  (if (or (= 0 x) (= 0 y))\n    0\n    (if (= x y)\n      x\n      (if (> x y)\n        (recur (- x y) y)\n        (recur x (- y x))))\n    )\n  )", "user": "5f3103aee4b0574c87022c24"}, {"problem": 66, "code": "(fn [n m]\n  (apply max (clojure.set/intersection\n              (into #{} (filter (fn [x] (zero? (mod n x))) (range 1 (inc n))))\n              (into #{}(filter (fn [x] (zero? (mod m x))) (range 1 (inc m)))))))", "user": "54fce8bde4b07d26eda61d30"}, {"problem": 66, "code": "(fn div [a b]\n    (let [big (max a b), small (min a b), r (rem big small)]\n      (if (= 0 r) small (div small r))))", "user": "5f648ef1e4b02876ed9fd01b"}, {"problem": 66, "code": "(fn ggt\n  [a b]\n  (if (< a b)\n    (ggt b a)\n    (if (= (- a b) b)\n      b\n      (ggt (- a b) b))) )", "user": "5f6e576ae4b02876ed9fd066"}, {"problem": 66, "code": "(fn [x y]\n  (loop [cursor 1\n         max 1]\n    (if (> cursor x)\n      max\n      (recur (inc cursor) (if (= (rem x cursor) (rem y cursor) 0)\n                            cursor\n                            max)))))", "user": "5f79bff2e4b02876ed9fd0ca"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5f727dd6e4b02876ed9fd090"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (loop [a a b b]\n    (if (= b 0)\n      a\n      (recur b (mod a b))\n    )\n  )\n)", "user": "5f6b8222e4b02876ed9fd052"}, {"problem": 66, "code": "(fn [a b] (if (= 0 b) a (recur b (mod a b))))", "user": "5f737e16e4b02876ed9fd09a"}, {"problem": 66, "code": "(fn gcd [a b] (if (= 0 b) a (gcd b (mod a b))))", "user": "58c71509e4b021aa9917ed6e"}, {"problem": 66, "code": "#(let [[a b] (sort [%1 %2])]\n  (loop [x b y a]\n    (if (= (rem x y) 0)\n      y\n      (recur y (rem x y)))))", "user": "5f6caa19e4b02876ed9fd056"}, {"problem": 66, "code": "(fn\n  [number1 number2]\n  (let [divider (max number1 number2) remainder (min number1 number2)]\n    (if (= remainder 0)\n      divider\n      (recur remainder (rem divider remainder)))))", "user": "5f6e5c58e4b02876ed9fd067"}, {"problem": 66, "code": "(fn [a b] (last (filter #(and (zero? (rem a %)) (zero? (rem b %))) (range 1 (inc (min a b))))))", "user": "5f393bd6e4b0574c87022c76"}, {"problem": 66, "code": "(fn [a b]\n  (let [mx (max a b)\n        mn (min a b)\n        r (- mx mn)]\n    (if (= r 0) mn (recur mn r))))", "user": "5f5b624de4b05ea7b9adc42f"}, {"problem": 66, "code": "(fn [a b]\n    (if (zero? b)\n        a\n        (recur b (mod a b))))", "user": "5f74de11e4b02876ed9fd0a5"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5f727bd1e4b02876ed9fd08c"}, {"problem": 66, "code": "(fn [a b]\n  (->>\n    (range (min a b) 0 -1)\n    (drop-while (fn [x] (not (and (zero? (rem a x))\n                                  (zero? (rem b x))))))\n    first))", "user": "5f77d470e4b02876ed9fd0be"}, {"problem": 66, "code": "(fn [a b]\n  (->>\n   (range (min a b) 0 -1)\n   (drop-while (fn [x] (not (and (zero? (rem a x))\n                            (zero? (rem b x))))))\n    first))", "user": "5f77890ae4b02876ed9fd0b9"}, {"problem": 66, "code": "(fn common\n  [a b]\n  (->>\n   (range (min a b) 0 -1)\n   (drop-while (fn [x] (not (and (zero? (rem a x))\n                            (zero? (rem b x))))))\n    first))", "user": "5f737899e4b02876ed9fd099"}, {"problem": 66, "code": "(fn mcd \n  [a b] \n  (if (zero? b) \n    a \n    (recur b (mod a b))))", "user": "5f7e91c8e4b0c071e6c840d8"}, {"problem": 66, "code": "(fn [a b]\n  (loop [a a\n         b b]\n    (let [r (rem a b)]\n      (if (= 0 r)\n        b\n        (recur b r)))))", "user": "56b9c644e4b0f2655033593a"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5f72f144e4b02876ed9fd093"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5f84f0f5e4b0375e81f54e78"}, {"problem": 66, "code": "(fn findGreatestCommonDivisor [x y] \n     (if (= 0 y) \n         x \n        (recur y (mod x y))))", "user": "5f77b99fe4b02876ed9fd0bc"}, {"problem": 66, "code": "(fn\n  [x y]\n  (if (> x y)\n    (loop [i y]\n      (when (> i 0)\n        (if (= 0 (rem x i) (rem y i))\n          i\n          (recur (dec i)))))\n    (loop [i x]\n      (when (> i 0)\n        (if (= 0 (rem x i) (rem y i))\n          i\n          (recur (dec i)))))))", "user": "5f6e23e6e4b02876ed9fd064"}, {"problem": 66, "code": "(fn [f f1]\n  \n  (if (= 0 f1)\n    f \n    (recur f1 (mod f f1)))\n  \n  )", "user": "5f727be9e4b02876ed9fd08d"}, {"problem": 66, "code": "(fn[a b] (loop [res (min a b)]\n              (if (and (= (mod a res) 0) (= (mod b res) 0))\n                  res\n                  (recur (dec res)))))", "user": "5f727d2fe4b02876ed9fd08f"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5f8497dce4b0375e81f54e74"}, {"problem": 66, "code": "(fn [x y]\n  (->>\n    (range (min x y) 0 -1)\n    (drop-while (fn [i] (not (and (zero? (rem x i))\n                                  (zero? (rem y i))))))\n    first)\n  )", "user": "5f84f110e4b0375e81f54e79"}, {"problem": 66, "code": "(fn comun [a b]\n  (cond\n    (< a b) (recur a (- b a))\n    (> a b) (recur (- a b) b)\n    :else a))", "user": "5f792d48e4b02876ed9fd0c5"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5f8361bae4b01aacbe7a2712"}, {"problem": 66, "code": "(fn common-divisor [x y]\n  (if (= y 0)\n    x\n    (recur y (mod x y))))", "user": "5f8795d4e4b020286baa5e96"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5f87e757e4b0169f6814c40f"}, {"problem": 66, "code": "(fn [a b]\n  (let [c (/ (+ a b) 2)]\n   (loop [r 1 n 2]\n     (if (< n c)\n       (if (and (= (rem a n) 0) (= (rem b n) 0))\n         (recur n (inc n))\n         (recur r (inc n)))\n       r))))", "user": "5f73000ce4b02876ed9fd094"}, {"problem": 66, "code": "(fn [a b]\n  (->>\n      (range (min a b) 0 -1)\n      (drop-while (fn [x] (not (and (zero? (rem a x))\n                                    (zero? (rem b x))))))\n      first))", "user": "5f875a0ae4b020286baa5e94"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (->>\n      (range (min a b) 0 -1)\n      (drop-while (fn [x] (not (and (zero? (rem a x))\n                                    (zero? (rem b x))))))\n      first\n      ))", "user": "5f8330b8e4b01aacbe7a270f"}, {"problem": 66, "code": "(fn[a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "user": "5f810e97e4b0c071e6c840ed"}, {"problem": 66, "code": "(fn gcd\n  ([a b] (if (= b 0) a (gcd b (rem a b)))))", "user": "5c8cfff8e4b048ec896c5996"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (rem a b))))", "user": "5f727cb0e4b02876ed9fd08e"}, {"problem": 66, "code": "(fn pgcd [a b]\n  (loop [r1 (if (> a b) a b)\n         r2 (if (< a b) a b)]\n    (if (= (rem r1 r2) 0)\n      r2\n      (recur r2 (rem r1 r2)))))", "user": "5f8b06afe4b0715f5002d74a"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond (< a b) (gcd b a)\n        (= b 0) a\n      :else (gcd b (mod a b))))", "user": "5f419985e4b0955706451fab"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (> b a)\n    (gcd b a)\n    (let [r (mod a b)]\n      (if (zero? r)\n        b\n        (gcd b r)))))", "user": "5f86a98be4b0649ffcda4caa"}, {"problem": 66, "code": "(fn [n1 n2] (last (filter #(= 0 (mod n1 %) (mod n2 %)) (range 1 (inc n1)))))", "user": "5f8e865fe4b0715f5002d76d"}, {"problem": 66, "code": "(fn gcd [x y] (if (= (rem x y) 0) y (gcd y (rem x y))))", "user": "5f8fe45ae4b0715f5002d78d"}, {"problem": 66, "code": "(fn\n  [a b]\n  (reduce (fn [acc n] \n            (if (and (= 0 (rem a n)) (= 0 (rem b n)))\n              n\n              acc)) 1 (range 1 (+ (min a b) 1))))", "user": "5e1c24f4e4b0dc959400852d"}, {"problem": 66, "code": "(fn GCD [a b]\n  (if (= b 0)\n  a\n  (GCD b (mod a b))))", "user": "5f8d76c3e4b0715f5002d758"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "5f93529ae4b0715f5002d7bc"}, {"problem": 66, "code": ";(\n(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (mod a b))))\n; 858 1023)", "user": "5e64ae6ce4b0fd0acd1586ac"}, {"problem": 66, "code": "(fn [a b]\n   (cond (= a b) a\n        (> a b) (recur (- a b) b)\n        (< a b) (recur a (- b a))))", "user": "5eb3d02be4b00a66d4a95215"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5ee4545ee4b029a2061bbe8d"}, {"problem": 66, "code": "(fn [a b]\n  (let [divisor? (fn [n1 n2]\n                   (zero? (rem n1 n2)))\n        n (range 1 (inc (min a b)))\n        div-a (into #{} (filter #(divisor? a %) n))\n        div-b (into #{} (filter #(divisor? b %) n))\n        div (clojure.set/intersection div-a div-b)]\n    (apply max div)))", "user": "5f816cc6e4b0c071e6c840f1"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5f6a583ae4b02876ed9fd046"}, {"problem": 66, "code": "#(last\n  (for [x (range 1 (inc %))\n       :let [f1 (mod % x)\n             f2 (mod %2 x)]\n       :when (= (+ f1 f2) 0)] x))", "user": "5eb741e4e4b00a66d4a9523b"}, {"problem": 66, "code": "(fn myF [& args]\n  (let [[small big] (sort args)]\n    (if (= small big)\n      small\n      (myF small (- big small)))))", "user": "56eff7c1e4b04a395b9a0468"}, {"problem": 66, "code": "(fn gcd [x y] \n  (let [min-val (min x y) \n        max-val (max x y)] \n    (if (= min-val max-val)\n      max-val\n      (recur (- max-val min-val) min-val)\n     )))", "user": "5fa17538e4b0f0ebd91b77e3"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (mod a b))))", "user": "5fa74b82e4b0fa27300f3dda"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n    (= a b) a\n    (< a b) (gcd a (- b a))\n    (> a b) (gcd (- a b) b)))", "user": "5f5358b7e4b0a0bc16850a77"}, {"problem": 66, "code": "#(loop [last-divisor (max %1 %2)]\n       (if (= (mod %1 last-divisor)\n              (mod %2 last-divisor)\n              0)\n         last-divisor\n         (recur (dec last-divisor))))", "user": "5f331015e4b0574c87022c37"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n   (= a b) a\n   (> a b) (gcd b a)\n   true (gcd a (- b a))))", "user": "5fa8424ce4b0fa27300f3de5"}, {"problem": 66, "code": "(fn gcd[a b]\n    (if (= b 0) a\n        (gcd b (mod a b))))", "user": "5fa358a1e4b0f0ebd91b77fd"}, {"problem": 66, "code": "(fn [x y] \n    (last (filter #(= 0 (mod x %) (mod y %)) (drop 1 (range (max x y))))))", "user": "5fb2eac0e4b08cb800c85b2f"}, {"problem": 66, "code": "(fn gcd [a b] (if (= b 0) a (gcd b (mod a b))))", "user": "5fab7ea6e4b08cb800c85ad8"}, {"problem": 66, "code": "(fn gcd[x y] \n  (cond \n   (= x y) x \n   (< x y) (gcd x (- y x) ) \n   :else (gcd (- x y) y)\n)\n)", "user": "573a0ecce4b0cd1946bd1088"}, {"problem": 66, "code": "(fn [a b]\n  (loop [m (max a b)\n         n (min a b)]\n    (let [r (mod m n)]\n      (if (= 0 r)\n        n\n        (recur n r)))))", "user": "5fb3a096e4b08cb800c85b35"}, {"problem": 66, "code": "(fn g [a b] (if (== 0 (mod a b)) b (g b (mod a b))))", "user": "5df79c31e4b0a607a9a45c9b"}, {"problem": 66, "code": "#(loop [a %1]\n   (if (and (zero? (mod %1 a)) (zero? (mod %2 a)))\n     a\n     (recur (dec a))) \n   )", "user": "5fa96ddbe4b0fa27300f3dec"}, {"problem": 66, "code": "(fn [a b]\n  (->> (max a b)\n       (range 1)\n       (filter #(and (= 0 (mod a %)) (= 0 (mod b %))))\n       (apply max)))", "user": "5f597522e4b0a0bc16850a9e"}, {"problem": 66, "code": "(fn\n  [a b]\n  (loop [x a\n         y b]\n    (if (< 0 y)\n      (recur y (rem x y))\n      x)))", "user": "5484c3b2e4b0e286459a11a2"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b)\n    a \n    (recur b (mod a b))))", "user": "5facfb48e4b08cb800c85aea"}, {"problem": 66, "code": "(fn [x y]\n  (loop [a x b y]\n    (if (= b 0)\n      a\n     (recur b (mod a b)))))", "user": "5fa2b45ce4b0f0ebd91b77f5"}, {"problem": 66, "code": "(fn [x y] (apply max (for [n (range 1 (max x y)) \n                           :when (and (= 0 (rem x n)) (= 0 (rem y n)))]\n                       n)))", "user": "5f3567d6e4b0574c87022c44"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5fc04417e4b0edf42a5593c6"}, {"problem": 66, "code": "(fn gcd [x y]\n  (let [x-factors (filter #(zero? (mod x %)) (range 1 (inc x)))\n        y-factors (filter #(zero? (mod y %)) (range 1 (inc y)))\n        common-factors (clojure.set/intersection (set x-factors) (set y-factors))]\n    (apply max common-factors)))", "user": "5c06fab7e4b0bdcf453d16bd"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (mod a b))))", "user": "5df175bce4b03c219ef1a34d"}, {"problem": 66, "code": "(fn [arg1 arg2]\n  (loop [strt (min arg1 arg2)]\n    (cond\n     \t(and (= 0 (rem arg1 strt)) (= 0 (rem arg2 strt))) strt\n\t\t:else (recur (dec strt))     \n     )))", "user": "5fc5c303e4b02c825b0c8c1a"}, {"problem": 66, "code": "#(.gcd (biginteger %1) (biginteger %2))", "user": "5fab003de4b08cb800c85ad1"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (cond\n    (= 0 a) b\n    (= 0 b) a\n    :else (gcd b (rem a b))))", "user": "5f838122e4b01aacbe7a2715"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? b) a (recur b (mod a b))))", "user": "5f6b5d83e4b02876ed9fd050"}, {"problem": 66, "code": "(fn [x y]\n  (if\n    (= 0 (rem x y))\n    y\n    (recur y (rem x y))))\n\n;; Algoritmo de Euclides, ver http://www.profcardy.com/cardicas/euclides.php", "user": "5f974321e4b0715f5002d7f3"}, {"problem": 66, "code": "(fn [n1 n2] (apply max (filter (fn [n] (and (zero? (mod n1 n)) (zero? (mod n2 n)))) (range 1 (+ (max n1 n2) 1)))))", "user": "58c69d88e4b021aa9917ed5e"}, {"problem": 66, "code": "(fn gcd[a b] (if (zero? b) a (recur b (mod a b))))", "user": "5f96fa49e4b0715f5002d7e9"}, {"problem": 66, "code": "(fn foo [aa bb]\n  (loop [a aa b bb gcd 1 cur 2]\n    (cond\n      (or (> cur a) (> cur b)) gcd\n      (and (= 0 (mod a cur)) \n          (= 0 (mod b cur)))\n        (recur (/ a cur) (/ b cur) (* gcd cur) cur)\n      :else (recur a b gcd (inc cur))\n      )))", "user": "5fb8fe30e4b03f550f448223"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "user": "5a3e1243e4b0447ef91cc5ae"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "54d7e277e4b0a52adc2e2031"}, {"problem": 66, "code": "(fn gcd [& args]\n  (letfn [(cd [n]\n            (last\n              (for [i (range 2 (inc (apply min n)))\n                    :when (zero? (apply + (map #(mod % i) n)))]\n                i)))]\n    (loop [result 1 current args]\n      (if-let [d (cd current)]\n        (recur (* result d) (map #(/ % d) args))\n        result))))", "user": "5f9c4113e4b0715f5002d821"}, {"problem": 66, "code": "(fn gcd [a b]\n (if (= 0 b)\n  a\n  (gcd b (mod a b))))", "user": "59d4d126e4b0ef0a1e9b5be9"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (loop [a' (max a b)\n         b' (min a b)]\n    (cond\n      (= b' 0) a'\n      :else (recur b' (mod a' b')))))", "user": "5fe5a64de4b05ac5b16ea187"}, {"problem": 66, "code": "(fn [a b]\n        (if (zero? b)\n          a\n          (recur b (mod a b))))", "user": "54c13b87e4b0ed20f4ff6f20"}, {"problem": 66, "code": "(fn [& sq]\n  (let [factor-number (fn [n] (into #{} (keep #(if (zero? (rem n %)) %) (range 1 (inc n)))))]\n    (apply max (apply clojure.set/intersection (map factor-number sq)))\n    )\n  )", "user": "5fee18f2e4b05ac5b16ea1d2"}, {"problem": 66, "code": "#(loop [a %1, b %2] (let [x (max a b), y (min a b), r (rem x y)] (if (zero? r) y (recur y r))))", "user": "54aec375e4b09f271ff37cf9"}, {"problem": 66, "code": "(fn [x y]\n  (loop [gcd (min x y)]\n    (if (= 0 (mod x gcd) (mod y gcd))\n      gcd\n      (recur (dec gcd)))))", "user": "5fef4292e4b05ac5b16ea1d7"}, {"problem": 66, "code": "(fn greatest-common-divisor [x y]\n  (loop [z (min x y)]\n    (if (and (zero? (mod x z)) (zero? (mod y z)))\n      z\n      (recur (dec z)))))", "user": "5fe1b893e4b05ac5b16ea16f"}, {"problem": 66, "code": "(fn gsd [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "user": "5fe09d1fe4b05ac5b16ea15b"}, {"problem": 66, "code": "(fn [m n]\n        (loop [a (min m n) b (max m n)]\n          (if (zero? (mod b a))\n            a\n            (recur (mod b a) a))))", "user": "546c4377e4b00cfc9eacc177"}, {"problem": 66, "code": "(fn test ([a b] (test a b 1 1))([a b mi n] (if (or (> n a) (> n b)) mi (if (and (= (rem a n) 0) (= (rem b n) 0)) (test a b n (inc n)) (test a b mi (inc n))))))", "user": "5ff3aca3e4b05ac5b16ea205"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "user": "5fe362d9e4b05ac5b16ea179"}, {"problem": 66, "code": "(fn gcd [a b]\n              (if (not= 0 b)\n                (gcd b (mod a b))\n                a))", "user": "5fd8bcb3e4b05ac5b16ea11b"}, {"problem": 66, "code": "(fn [x y]\n    (if (zero? y)\n      x\n      (recur y (mod x y))))\n\n;; (fn [a b]\n;;     (cond\n;;       (= a b) a\n;;       (> a b) (recur (- a b) b)\n;;       :else (recur a (- b a))))\n\n;; (fn [m n]\n;;     (let [first-try (min m n)\n;;           get-rst (fn [mm nn rst]\n;;                     (if (or (and (zero? (rem mm rst))\n;;                                  (zero? (rem nn rst)))\n;;                             (= rst 1))\n;;                       rst\n;;                       (recur mm nn (dec rst))))]\n;;       (get-rst m n first-try)))\n\n;; (fn [v1 v2]\n;;     (->> (range 1 (max v1 v2))\n;;          (filter #(and (zero? (mod v1 %))\n;;                        (zero? (mod v2 %))))\n;;          (apply max)))", "user": "591ad160e4b09b4ee5954bdf"}, {"problem": 66, "code": "(fn [x y]\n  (last\n   (for [i (range 1 (max x y)) :when (= 0 (mod x i) (mod y i))]\n     i)))", "user": "5fd10010e4b07e53c2f3f02a"}, {"problem": 66, "code": "(fn [n1 n2]\n  (if (not (= n2 0))\n    (recur n2 (mod n1 n2))\n    n1\n    )\n  )", "user": "5fce0cc5e4b07e53c2f3f000"}, {"problem": 66, "code": "(fn [a b] (first (filter #(and (zero? (mod a %)) (zero? (mod b %))) (range a 0 -1))))", "user": "5fd361f2e4b07e53c2f3f04e"}, {"problem": 66, "code": "(fn gcd [a b]\n  (loop [a a\n         b b\n         t b]\n    (if (= b 0)\n      a\n      (do\n        (println b (mod a b) b)\n        (recur b (mod a b) b)))))", "user": "5ff8ead1e4b06df49cee14ab"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n   (if (= 0 b) a\n       (recur b (mod a b))))", "user": "5f5e166ce4b02876ed9fcfed"}, {"problem": 66, "code": "(fn [a b]\n  (loop [a a b b]\n    (if (> a b)\n      \t(recur (- a b) b)\n      (if (= a b) \n        a\n        (recur a (- b a))\n        )\n      )\n    \n    \n    )\n  \n  )", "user": "5ff676a9e4b06df49cee1497"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (rem a b))))", "user": "5ffc18cae4b074f607df65f1"}, {"problem": 66, "code": "(fn [x y] (if (zero? y) x (recur y (mod x y))))", "user": "5eea5c98e4b029a2061bbebf"}, {"problem": 66, "code": "(fn [x1 x2]\n  (loop [divisor (min x1 x2)]\n    (if (and (= (mod x1 divisor) 0) (= (mod x2 divisor) 0))\n      divisor\n      (recur (dec divisor)))))", "user": "58a0ac0de4b02bd94d917e9c"}, {"problem": 66, "code": "(fn [a b]\n  (loop [max (max a b) min (min a b)]\n    (if-not (zero? (rem max min))\n      (recur min (rem max min))\n      min)))", "user": "5e42602ae4b01d43a70e8e63"}, {"problem": 66, "code": "(fn gcd [n1 n2]\n  (let [smaller (min n1 n2)\n        potential-divisors (cons smaller (reverse (range 1 (/ smaller 2))))]\n    (first (filter #(= 0 (rem n1 %) (rem n2 %)) potential-divisors))\n    )\n  )", "user": "6004c750e4b074f607df6645"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= 0 b)\n    a\n    (let [new-num b\n          new-div (mod a b)]\n      (gcd new-num new-div))))", "user": "5ff61113e4b06df49cee1492"}, {"problem": 66, "code": "(fn gcd [x y]\n  (loop [a (max x y)\n         b (min x y)]\n    (let [q (quot a b)\n          r (rem a b)]\n      (if (zero? r)\n        b\n        (recur b r)))))", "user": "5f37263de4b0574c87022c4e"}, {"problem": 66, "code": "(fn gcd[a b](if \n              (= b 0)\n              a\n              (gcd b (mod a b))\n              ))", "user": "6001460ce4b074f607df6611"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5ff709e4e4b06df49cee149b"}, {"problem": 66, "code": "(fn foo [a b]\n  (if (= a b)\n    a\n    (if (< a b)\n      (foo a (- b a))\n      (foo (- a b) b))))", "user": "600ae927e4b074f607df6689"}, {"problem": 66, "code": "(fn [x y]\n  (let [m (max x y)\n        n (min x y)]\n    (cond\n     (= n 1) 1\n     (zero? (mod m n)) n\n     :else (recur (rem m n) n))))", "user": "60096aabe4b074f607df667f"}, {"problem": 66, "code": "(fn gcd [a b]\n     (if (= a b)\n       a\n       (if (< a b)\n         (recur a (- b a))\n         (recur b (- a b)))))", "user": "5fbf6fe7e4b0ad6fc3476147"}, {"problem": 66, "code": "(fn gcd [a b] \n  (if (= a 0) b\n   (gcd (mod b a) a)))", "user": "553b90c8e4b09218d5f45005"}, {"problem": 66, "code": "(fn g [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "583369e6e4b089d5ab817c9c"}, {"problem": 66, "code": "(fn [a b] (loop [a a\n                 b b]\n            (if (= b 0)\n              a\n              (recur b (mod a b)))))", "user": "6011b89ee4b074f607df66bc"}, {"problem": 66, "code": "(fn gcd [a b]\n    (first (filter #(and (= 0 (mod a %))\n                  (= 0 (mod b %)))\n            (range (min a b) 0 -1))))", "user": "5ff93da9e4b06df49cee14af"}, {"problem": 66, "code": "(fn [a b]\n   (cond\n     (= a 0) b\n     (= b 0) a\n     (> a b) (recur (- a b) b)\n     :else (recur a (- b a))))", "user": "57e10705e4b0bfb2137f5a6a"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n   (= 0 (mod a b)) b\n   :else (recur b (mod a b))))", "user": "601aaa93e4b0bf4ca6b10926"}, {"problem": 66, "code": "(fn gcd* [a b]\n  (cond\n    (< a b) (recur a (- b a))\n    (> a b) (recur (- a b) b)\n    :else a))", "user": "5fd08397e4b07e53c2f3f024"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5fdb8657e4b05ac5b16ea133"}, {"problem": 66, "code": "(fn gcd [numer denom]\n  (if (= 0 denom)\n    numer\n    (gcd denom (mod numer denom))))", "user": "601004d6e4b074f607df66b2"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [xs (range 1 (inc (min a b)))]\n    (last (\n           filter (fn [i] (and (zero? (rem a i))\n                               (zero? (rem b i))))\n           xs))))", "user": "601c39eee4b0bf4ca6b10937"}, {"problem": 66, "code": "(fn euclid [a b] (if (zero? b) a (recur b (mod a b))))\n;; [we use the] recur function which basically calls the containing loop\n;; or function and will perform tail call optimization so that we don't\n;; have such a big stack", "user": "5fb68f09e4b08cb800c85b58"}, {"problem": 66, "code": "(fn [a b]\n    (some #(and (zero? (mod a %))\n                (zero? (mod b %))\n                %) \n          (reverse (range 1 (inc (min a b))))))", "user": "4e38f245535deb9a81d77f3e"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (gcd b (rem a b))))", "user": "5fec4f5ee4b05ac5b16ea1bf"}, {"problem": 66, "code": "(fn [a b]\n  (last(for [x (range 1 (max a b)) :when (and (= (mod a x) 0) (= (mod b x) 0))] x)))", "user": "60228147e4b0d5df2af22202"}, {"problem": 66, "code": "(fn [num1 num2]\n  (loop [n1 num1 n2 num2 stat 1 found 1]\n    (if (or (> stat n1)\n            (> stat n2)) found\n      (recur n1 n2 (inc stat) (if (and (= 0 (rem num1 stat))\n                                       (= 0 (rem num2 stat))) stat found)))))", "user": "60264d89e4b0d5df2af2222d"}, {"problem": 66, "code": "(fn [a b] (apply max (filter #(and (= 0 (mod a %)) (= 0 (mod b %))) (range 1 (inc a)))))", "user": "6024544be4b0d5df2af2221f"}, {"problem": 66, "code": "(fn [a b]\n  (let [get-divisor (fn [n] (into #{}\n                              (filter #(zero? (rem n %))\n                                      (range 1 (inc n)))\n                              ))\n        a-divisor (get-divisor a)\n        b-divisor (get-divisor b)\n        commom-divisor (clojure.set/intersection a-divisor b-divisor)]\n    (apply max commom-divisor)))", "user": "60195030e4b0bf4ca6b10920"}, {"problem": 66, "code": "(fn gcd* [a b]\n  (cond\n    (< a b) (recur a (- b a))\n    (> a b) (recur (- a b) b)\n    :else a))", "user": "6022844de4b0d5df2af22203"}, {"problem": 66, "code": "(fn [a b]\n  (loop [a a\n         b b]\n    (if (not= a b)\n      (recur (- (max a b) (min a b)) (min a b))\n      a)))", "user": "5fea32f3e4b05ac5b16ea1aa"}, {"problem": 66, "code": "(fn [a b] (if (= b 0) a (recur b (mod a b))))", "user": "602372aae4b0d5df2af2220f"}, {"problem": 66, "code": "(fn [a b]\n  (let [get-divisor (fn [n] (into #{}\n                              (filter #(zero? (rem n %))\n                                      (range 1 (inc n)))\n                              ))\n        a-divisor (get-divisor a)\n        b-divisor (get-divisor b)\n        commom-divisor (clojure.set/intersection a-divisor b-divisor)]\n    (apply max commom-divisor)))", "user": "601bdcb3e4b0bf4ca6b10930"}, {"problem": 66, "code": "(fn gcd [a b]\n            (cond\n              (= a b)\n              a\n              (= a 0)\n              b\n              (= b 0)\n              a\n              (even? a)\n              (if (odd? b)\n                (gcd (bit-shift-right a 1) b)\n                (bit-shift-left (gcd (bit-shift-right a 1) (bit-shift-right b 1)) 1))\n              (even? b)\n              (gcd a (bit-shift-right b 1))\n              (> a b)\n              (gcd (bit-shift-right (- a b) 1) b)\n              :else\n              (gcd (bit-shift-right (- b a) 1) a)))", "user": "6026737ee4b0d5df2af2222f"}, {"problem": 66, "code": "(fn [n1 n2]\n  (loop [i 1 currentGCD 0]\n    (if (> i (min n1 n2))\n      currentGCD\n      (if (and (= 0 (rem n1 i)) (= 0 (rem n2 i)) (> i currentGCD))\n        (recur (inc i) i)\n        (recur (inc i) currentGCD)\n        ))))", "user": "602b90c1e4b0d5df2af22266"}, {"problem": 66, "code": "(fn greatest [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5ff70cfde4b06df49cee149c"}, {"problem": 66, "code": "(fn [m n]\n  (loop [a (min m n)]\n    (if (and (zero? (rem m a)) (zero? (rem n a)))\n     a\n     (recur (dec a)))))", "user": "602d5eade4b0d5df2af22279"}, {"problem": 66, "code": "(fn gcd [a b]\n    (if (= b 0)\n      a\n      (gcd b (rem a b))))", "user": "5ff64845e4b06df49cee1495"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "600eb95de4b074f607df66a6"}, {"problem": 66, "code": "(fn [a b]\n        (if (zero? b)\n          a\n          (recur b (mod a b))))", "user": "602f8400e4b0d5df2af22299"}, {"problem": 66, "code": "(fn [a b]\n   (if (zero? b) \n     a\n     (recur b (mod a b))\n     ))", "user": "54be7c0de4b0ed20f4ff6eec"}, {"problem": 66, "code": "(fn [num1 num2]\n  (apply max (filter (fn [el] (and (= (mod num1 el) 0) (= (mod num2 el) 0)))\n               (range 1 (max num1 num2)))))", "user": "5fada7cce4b08cb800c85af5"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "60329afce4b0d5df2af222b8"}, {"problem": 66, "code": "(fn my-pgcd [a b]\n  (cond\n    (zero? a) b\n    (zero? b) a\n    (= a b) a\n    (> a b) (my-pgcd (- a b) b)\n    :else (my-pgcd a (- b a))\n\n    ))", "user": "5fa6db67e4b0fa27300f3dd2"}, {"problem": 66, "code": "(fn comp-gcd [x y] \n  (if (zero? y) \n    x \n    (recur y (mod x y))\n  )\n)", "user": "60335b35e4b0d5df2af222bf"}, {"problem": 66, "code": "(fn gcd [a b] \n  (cond \n   (= 0 b) a \n   (= 0 a) b\n   (> a b) (recur (- a b) b)\n   :else (recur a (- b a))))", "user": "6031926ae4b0d5df2af222ac"}, {"problem": 66, "code": "(fn [a b]\n  \t(if (zero? b)\n      a\n      (recur b (mod a b))\n      )\n  )", "user": "602cc4d4e4b0d5df2af22274"}, {"problem": 66, "code": "(fn foo [x y]\n  (cond  (zero? (rem x y)) y\n         (zero? (rem y x)) x\n        (> x y) (foo (rem x y) y )\n        :else (foo x (rem y x))\n        )\n  )", "user": "6038b6b4e4b0d5df2af222ef"}, {"problem": 66, "code": "(fn [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "user": "60337f1fe4b0d5df2af222c1"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "603961e3e4b0d5df2af222f3"}, {"problem": 66, "code": "(fn gcd [a b] \n  (let [r (rem (max a b) (min a b))]\n    (if (= r 0) (min a b)\n      (gcd (max a b) r))))", "user": "5a778224e4b013a48d399761"}, {"problem": 66, "code": "(fn [a b]\n  (loop [n (min a b)]\n    (if (and (zero? (rem a n))\n             (zero? (rem b n)))\n      n\n      (recur (dec n)))))", "user": "603d5f2ae4b0d5df2af2230c"}, {"problem": 66, "code": "(fn [a b]\n  (let [m (mod a b)]\n    (if (= 0 m)\n    b\n    (recur b m))))", "user": "602ddebde4b0d5df2af2227d"}, {"problem": 66, "code": "(fn gcd [x y]\n  (let [max-n (max x y)\n        min-n (min x y)\n        half-n (int (/ max-n 2))]\n    (if (<= min-n half-n)\n      min-n\n      (first\n       (filter\n        (fn [n] (and (= (mod x n) 0) (= (mod y n) 0)))\n        (range half-n 0 -1))))))", "user": "5be1c6c6e4b0ed4b8aab4ca5"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond (> a b) (recur b a)\n        ; We can assume a <= b\n        (= a 0) b\n        :else (recur a (rem b a))))", "user": "60460824e4b02d28681c77bc"}, {"problem": 66, "code": "(fn gcd [a b]\n        (if (zero? b)\n          a\n          (recur b (mod a b))))", "user": "6034e358e4b0d5df2af222d1"}, {"problem": 66, "code": "(fn [n1 n2]\n  (loop [a n1 b n2]\n    (let [min-num (min a b)\n          max-num (max a b)]\n      (if (zero? (- max-num min-num))\n        min-num\n        (recur (- max-num min-num) min-num)))))", "user": "5dcd7933e4b0b296f82db5ae"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n   (> a b) (gcd b a)\n   (= a 0) b\n   :else (gcd (mod b a) a)))", "user": "6045582fe4b02d28681c77b6"}, {"problem": 66, "code": "(fn gcd [a b]\n    (if (= b 0)\n      a\n      (recur b (rem a b))))", "user": "6026d2cae4b0d5df2af22232"}, {"problem": 66, "code": "(fn gcd\n  [n1 n2]\n  (if-not (zero? n2)\n     (gcd n2 (rem n1 n2))\n     n1))", "user": "5edd05bfe4b0c7845d86b0f3"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "5eb56fc1e4b00a66d4a95224"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n    (< b a) (gcd b a)\n    (= a 0) b\n    :else (gcd a (mod b a))))", "user": "60486e8ae4b02d28681c77db"}, {"problem": 66, "code": "(fn g [a b]\n    (if (= b 0) \n      a\n      (g b (mod a b))))", "user": "603ae21de4b0d5df2af222fb"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (loop [a a\n         b b]\n    (cond\n      (zero? a) b\n      (zero? b) a\n      :else     (recur b (rem a b)))))", "user": "604a30c6e4b02d28681c77f0"}, {"problem": 66, "code": "(fn gcd [x y]\n    (if (= y 0)\n    x\n    (gcd y (mod x y))))", "user": "5f8e2a08e4b0715f5002d767"}, {"problem": 66, "code": "(fn gcd [a b] (if (= b 0) a (gcd b (mod a b))))", "user": "604d3cb1e4b0b7ec0ac60ac2"}, {"problem": 66, "code": "(fn\n  [n d]\n  (if (zero? d)\n    n\n    (recur d (mod n d))))", "user": "4e586949535d8a8b8723a292"}, {"problem": 66, "code": "(fn gcd [x y] (if(= 0 x)\n                  y\n                  (if(= 0 y)\n                    x\n                    (gcd y (mod x y)))))", "user": "604f4be1e4b0b7ec0ac60ace"}, {"problem": 66, "code": "(fn greatest-common-d\n   [x y]\n   (last\n     (remove\n       #(not (and (= (rem x %) 0) (= (rem y %) 0)))\n       (range 1 (+ x 1)))))", "user": "60396c95e4b0d5df2af222f4"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [x (max a b)\n        y (min a b)] \n    (if (= 0 (mod a b)) b (recur b (mod a b))))\n  )", "user": "60471241e4b02d28681c77c9"}, {"problem": 66, "code": "(fn gcd [x y]\n  (if (= 0 (mod (max x y) (min x y)))\n    (min x y)\n    (gcd (min x y) (rem (max x y) (min x y)))))", "user": "526759b3e4b03e8d9a4a715b"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= a 0)\n    b\n    (gcd (mod b a) a)))", "user": "5ef381a3e4b07c55ae4a053c"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= 0 b) a\n    (gcd b (mod a b))))", "user": "605b7a90e4b079a07f8593fc"}, {"problem": 66, "code": "(fn \n  [x y]\n  (if (zero? y) \n    x \n    (recur y (mod x y))))", "user": "6059d2e0e4b07e92fa001ace"}, {"problem": 66, "code": "(fn gcd [x y]\n                   (loop [n (int (/ (max x y) 2))]\n                     (if (and (= (mod x n) 0) (= (mod y n) 0))\n                       n\n                       (recur (dec n))\n                       )))", "user": "5b522591e4b02d533a91bd09"}, {"problem": 66, "code": "(fn\n  [x y]\n  (if (or (= (rem x y) 0) (= (rem y x ) 0))\n    (min x y)\n    (recur y (mod x y))))", "user": "6059d9c8e4b07e92fa001ad0"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "60521ea8e4b056659d634205"}, {"problem": 66, "code": "(fn gcd [x y]\n  (let [n (max x y)\n        m (min x y)\n        r (rem n m)]\n    (if (zero? r)\n      m\n      (recur m r))))", "user": "598e7998e4b02b9968b84d34"}, {"problem": 66, "code": "(fn\n  [& nums]\n  (loop [i 1 out [] minArg (apply min nums)]\n    (if (> i minArg)\n      (apply max out)\n      (if (reduce #(and %1 (= 0 (mod %2 i))) true nums) ;check if i is common factor\n        (recur (inc i) (conj out i) minArg)\n        (recur (inc i) out minArg)\n        )\n      )\n    )\n)", "user": "6059d824e4b07e92fa001acf"}, {"problem": 66, "code": "(fn my-eukleid [u w]\n  (if (= w 0) u\n      (my-eukleid w (mod u w))))", "user": "5684e200e4b04eec3ec5cfc4"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [divisable? #(zero? (mod %1 %2)) minab (min a b)\n        divisableAB? #(and (divisable? a %) (divisable? b %))]\n    (first (filter divisableAB? (reverse (range 1 (inc minab)))))))", "user": "60606490e4b03746e80ebf67"}, {"problem": 66, "code": "(fn [x y]\n   (loop [l (min x y)]\n     (if (and (> l 0) (zero? (mod x l)) (zero? (mod y l)))\n       l\n       (recur (dec l)))))", "user": "603f6623e4b0d5df2af2231f"}, {"problem": 66, "code": "#(if (zero? %2)\n    %1\n    (recur %2 (mod %1 %2)))", "user": "6040e6dbe4b0d5df2af2232a"}, {"problem": 66, "code": "#(loop [a %1 b %2]\n   (cond\n     (< a b) (recur b a)\n     (zero? b) a\n     :else (recur b (rem a b))\n    ))", "user": "5f665d45e4b02876ed9fd02f"}, {"problem": 66, "code": "(fn gcd\n  ([a b] \n    (cond\n    (= a 0) (Math/abs b)\n    (= b 0) (Math/abs a)\n    :else (gcd a b (mod a b)) \n    ))\n  ([a b h] \n    (cond\n    (= b 0) (Math/abs a)\n    :else (gcd b (mod a b) (mod a b))\n    )) \n  )", "user": "6065755ee4b069485764ddcc"}, {"problem": 66, "code": "(fn max-div\n  [a b]\n  (loop [index 2\n         result [1]]\n    (if (> index (min a b))\n      (peek result)\n      (if (and (zero? (mod a index)) (zero? (mod b index)))\n        (recur (inc index) (conj result index))\n        (recur (inc index) result)\n        )\n      )))", "user": "60593916e4b07e92fa001acc"}, {"problem": 66, "code": "(fn [i1 i2 ] (reduce #(if (= 0 (rem i1 %2) (rem i2 %2)) %2 %1) 1 (range 1 (+ 1 (min i1 i2)))))", "user": "5f548678e4b0a0bc16850a7e"}, {"problem": 66, "code": "(fn gcd\n  [x y]\n  (letfn [(divisors [n] (filter #(zero? (rem n %)) (range 1 (inc n))))]\n    (apply max (filter (set (divisors y)) (divisors x)))))", "user": "5ec02e20e4b00a66d4a95288"}, {"problem": 66, "code": "(fn [a b]\n  (loop [i a\n         j b]\n    (if (zero? j)\n      i\n      (recur j (mod i j)))))", "user": "606aafcfe4b069485764ddf6"}, {"problem": 66, "code": "(fn [x1 y1]\n  (loop [x x1 y y1]\n    (if (zero? (min x y))\n      (max x y)\n      (recur (mod x y)\n             (mod y x)))))", "user": "5d5c2730e4b09db18d4482ea"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "60537cd1e4b04c8f2157d152"}, {"problem": 66, "code": "(let [divisors (fn [x] (set (filter #(= 0 (rem x %)) (range 1 (inc x)))))]\n  (fn [x y] (apply max (clojure.set/intersection (divisors x) (divisors y)))))", "user": "52cf5450e4b07d0d72b273a4"}, {"problem": 66, "code": "(fn [a b] (loop [a a b b] (if (= a 0) b (recur (mod b a) a))))", "user": "606a70a5e4b069485764ddf2"}, {"problem": 66, "code": "(fn foo [a b]\r\n  (->>\r\n    (range (min a b) 0 -1)\r\n    (filter #(= 0 (mod a %) (mod b %)))\r\n    first))", "user": "606e0a42e4b069485764de19"}, {"problem": 66, "code": "(fn [num1 num2] (if (zero? num2) num1 (recur num2 (mod num1 num2))))", "user": "606c87aae4b069485764de0d"}, {"problem": 66, "code": "(fn [n1 n2]\n   (loop [iter (max n1 n2)]\n     (if (= 0 (mod n1 iter) (mod n2 iter))\n       iter\n       (recur (dec iter)))))", "user": "606d75f5e4b069485764de13"}, {"problem": 66, "code": "(fn [a b]\n  (let [small (min a b)\n        large (max a b)\n        go (fn [c] (if (every? #(= 0 (mod % c)) [small large])\n                     c\n                     (recur (dec c))))]\n    (go small)))", "user": "606d7f1ce4b069485764de14"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (first (drop-while #(not (and (zero? (rem a %)) \n                         (zero? (rem b %)))) \n              (range (min a b) 0 -1)\n              )\n         ) \n    )", "user": "6074f5ede4b069485764de52"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [limit (. Math sqrt (min a b)), result (atom 1)]\n    (loop [d (min a b)]\n      (if (> d limit)\n        (if (and (= (mod a d) 0) (= (mod b d) 0))\n          (reset! result d)\n          (recur (dec d))\n          )\n        )\n      )\n    @result\n    )\n  )", "user": "5f6adf5ee4b02876ed9fd049"}, {"problem": 66, "code": "#(if (zero? %2) %1 (recur %2 (rem %1 %2)))", "user": "606da089e4b069485764de15"}, {"problem": 66, "code": "(fn great-com-div [a b]\n  (loop [a a b b]\n    (println a b)\n    (cond\n      (= a b) a\n      (> a b) (recur (- a b) b)\n      :else (recur a (- b a)))))", "user": "605a876be4b000d535e6f53c"}, {"problem": 66, "code": "(fn [a b]\n  (cond\n   (or (= 0 a) (= 0 b)) ;;; cond 1\n   0    ;;; true\n   ( = a b) ;;; false cond 2 \n   a ;;; true\n   (> a b) ;;; cond3\n   (recur (- a b) b) ;;; true\n   :else (recur a (- b a)))) ;;; false", "user": "6075c214e4b069485764de5b"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "60764350e4b069485764de5e"}, {"problem": 66, "code": "(fn gcd [a b] \n  (if (zero? b)\n    a \n    (recur b (mod a b))))", "user": "606ff89be4b069485764de22"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "51435753e4b0c172af7558d5"}, {"problem": 66, "code": "(fn [a b] \n  (loop [oga (min a b)\n         n (min a b)\n         m (max a b)]\n    (if\n     (and (= 0 (rem oga n)) (= 0 (rem m n))) n\n     (recur oga (dec n) m))))", "user": "6074df6fe4b069485764de4b"}, {"problem": 66, "code": "#(if (zero? %2) %1 (recur %2 (mod %1 %2)))", "user": "6074e088e4b069485764de4d"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "607e1d32e4b03d835a6eaeda"}, {"problem": 66, "code": "(fn gdc [x y] (cond (< x y) (recur y x)\n   (not= 0 (mod x y)) (recur y (mod x y))\n   :else y))", "user": "6076adb2e4b069485764de60"}, {"problem": 66, "code": "(fn [number-one number-two]\n  (loop [current-div (max number-one number-two)]\n    (let [correct? (and (= (mod number-one current-div) 0)\n                        (= (mod number-two current-div) 0))]\n      (cond\n        (= current-div 1) current-div\n        correct?  current-div\n        :else (recur (dec current-div))))))", "user": "5e860270e4b09a7a73c8bbdb"}, {"problem": 66, "code": "(fn [x y]\n  (loop [c x d y]\n    (if (> c d)\n    \t(if (= (rem c d) 0)\n      \t\td\n          \t(recur d (rem c d)))\n         (recur d c))))", "user": "607d6bc1e4b03d835a6eaecc"}, {"problem": 66, "code": "(fn gcd [x' y']\n  (loop [x x'\n         y y'\n         ans 1\n         testing 2]\n    (cond\n      (or (> testing x) (> testing y))\n      ans\n\n      (and (zero? (mod x' testing))\n           (zero? (mod y' testing)))\n      (recur (quot x testing)\n             (quot y testing)\n             (* ans testing)\n             (inc testing))\n\n      :else\n      (recur x\n             y\n             ans\n             (inc testing)))))", "user": "605b49b7e4b079a07f8593f8"}, {"problem": 66, "code": "(fn gcd [a b]\n        (if (zero? b)\n          a\n          (recur b (mod a b))))", "user": "60777335e4b0a637ed78034f"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (zero? a) b (recur (rem b a) a)))", "user": "5f82609ae4b0c071e6c840f9"}, {"problem": 66, "code": "(fn [x y] (apply max (filter #(and (zero? (rem x %)) (zero? (rem y %))) (range 1 (max x y)))))", "user": "6070c7bae4b069485764de27"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "6086cdefe4b0736b099e4302"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "6074e1e4e4b069485764de4f"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0)\n    a\n    (recur b (mod a b))))", "user": "607dd962e4b03d835a6eaed2"}, {"problem": 66, "code": "(fn gcd [x y] \n  (if (zero? y) x (recur y (mod x y))))", "user": "608828dee4b0ae75613dcee1"}, {"problem": 66, "code": "(fn gcd [x y] \n  (if (< x y) (recur y x)\n    (if (zero? y) x (recur y (rem x y)) )))", "user": "6074dfa4e4b069485764de4c"}, {"problem": 66, "code": "(fn gcd [x y] (if (zero? y) x (recur y (mod x y))))", "user": "607e1cf9e4b03d835a6eaed9"}, {"problem": 66, "code": "(fn mcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "6074e1ade4b069485764de4e"}, {"problem": 66, "code": "#(if (= %2 0)\n    %1\n    (recur %2 (mod %1 %2)))", "user": "607b6452e4b0a637ed780375"}, {"problem": 66, "code": "(fn [a b]\n  (loop [hyp (min a b)]\n    (if (and (= (rem a hyp) 0) (= (rem b hyp) 0))\n      hyp\n      (recur (dec hyp)))))", "user": "607a1523e4b0a637ed78036a"}, {"problem": 66, "code": "#(loop [gcd (if (< %1 %2) %1 %2)]\n   (if (and (= 0 (rem %1 gcd)) (= 0 (rem %2 gcd)))\n     gcd\n     (recur (dec gcd))))", "user": "6074e278e4b069485764de51"}, {"problem": 66, "code": "(fn great[n s]\n  (if(= s 0) n (recur s(mod n s))))", "user": "6085edade4b0736b099e42fc"}, {"problem": 66, "code": "(fn GreatestCommonDivisor [n1 n2] \n  (if (zero? n2) \n    n1 \n    (recur n2 (rem n1 n2))))", "user": "607508f3e4b069485764de54"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "608b3fe1e4b0adce4b61c442"}, {"problem": 66, "code": "(fn [a b]\n  (loop [x a y b]\n    (cond\n     (= y 0) x\n     :else (recur (+ (* x 0) y) (+ (* y 0) (rem x y)))\n     )\n   )\n  )", "user": "60752ef6e4b069485764de55"}, {"problem": 66, "code": ";; Approach one: lazily get all divisors, returning the first/largest\n;(fn [n m]\n;  (let [start (min n m)\n;        divisors (filter #(= 0 (mod m %) (mod n %)) (range start 0 -1))]\n;    (first divisors)))\n;; Approach one b: lazily get all divisors, returning the first/largest (thread-as version)\n;(fn [n m]\n;  (as-> (min n m) v\n;    (range v 0 -1)\n;    (filter #(= 0 (mod n %) (mod m %)) v)\n;    (first v))\n;; Aproach two: recursive solution that stops when it finds a divisor (largest as we are descending)\n(fn [n m]\n  (loop [candidate (int (min (min n m) (/ (max n m) 2)))]\n    (if (= 0 (mod m candidate) (mod n candidate))\n      candidate\n      (recur (dec candidate)))))\n;; (int (min (min n m) (/ (max n m) 2))) should check fewer candidates, but (min n m) is simpler!", "user": "60794173e4b0a637ed78035d"}, {"problem": 66, "code": "(fn [x y] (loop [n (min x y)]\n            (if (and (= 0 (rem x n)) (= 0 (rem y n)))\n              n\n              (recur (dec n)))))", "user": "607e1d9de4b03d835a6eaedb"}, {"problem": 66, "code": "#(loop [a (max %1 %2)\n        b (min %1 %2)\n        r (rem a b)]\n   (if (= r 0)\n     b\n     (recur b r (rem b r))))", "user": "6078ce29e4b0a637ed78035a"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= b 0) a\n      (gcd b (mod a b))))", "user": "605f5c69e4b03746e80ebf5e"}, {"problem": 66, "code": "(fn gcd [a b]\n   (if (< b a)\n     (gcd b a)\n     (first (filter (fn [n] (and (= 0 (rem a n)) (= 0 (rem b n)))) (range a 0 -1)))))", "user": "60882700e4b0ae75613dcedf"}, {"problem": 66, "code": "(fn [x y] (if (= y 0) x\t(recur y (rem x y))))", "user": "607f3336e4b05857a65e7747"}, {"problem": 66, "code": "(fn [num1 num2]\n  (let [smaller (min num1 num2)]\n  (loop [x smaller]\n  (if (and (= (mod num1 x) 0) (= (mod num2 x) 0))\n    x\n    (recur (dec x))))))", "user": "5aa098fae4b0d174b936c82e"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "6088c22ee4b0ae75613dcee4"}, {"problem": 66, "code": "(fn [a b]\n  (->> (min a b)\n       inc\n       (range 1)\n       (map #(vector (/ a %) (/ b %) %))\n       (filter #(and (= (first %) (int (first %)))\n                     (= (second %) (int (second %)))))\n       last\n       last))", "user": "5f0a65dae4b09a3f05b71806"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "6081b7fce4b0736b099e42d4"}, {"problem": 66, "code": "#(loop\n   [upper (max %1 %2)\n    lower (min %1 %2)\n    gcd lower]\n   (if\n     (and\n      (zero? (rem upper gcd))\n      (zero? (rem lower gcd)))\n     gcd\n     (recur upper lower (dec gcd))))", "user": "608910a8e4b0ae75613dceed"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "60849bd6e4b0736b099e42f2"}, {"problem": 66, "code": "#(loop [a %1 b %2] (if (= a 0) b (recur (rem b a) a)))", "user": "60845eb8e4b0736b099e42ef"}, {"problem": 66, "code": "(fn gcd [x y]\n  (loop [j x\n         k y]\n    (if (> k 0)\n      (recur k (mod j k))\n      j)))", "user": "608fac60e4b03bd49d9f36c7"}, {"problem": 66, "code": "(fn [a b] (if (zero? b) a (recur b (mod a b))))", "user": "6088395de4b0ae75613dcee2"}, {"problem": 66, "code": "(fn gcd [a b]\n   (loop [x (min a b)]\n     (if (= 0 (rem a x) (rem b x))\n       x\n       (recur (dec x)))))", "user": "6090e617e4b03bd49d9f36ce"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "608ee2f7e4b03bd49d9f36c1"}, {"problem": 66, "code": "(fn [a b]\n  (loop [x a y b]\n    (if (zero? (mod x y))\n      y\n      (recur y (mod x y)))))", "user": "58e90258e4b056aecfd47cfd"}, {"problem": 66, "code": "(fn [aa bb] \n  (loop [a (max aa bb) b (min aa bb)]\n    (if (= 0 (rem a b))\n    b\n    (recur b (rem a b)))))", "user": "608ec5e4e4b03bd49d9f36c0"}, {"problem": 66, "code": "(fn gcd\n  [a b]\n  (letfn [(gcd* [a* b*]\n            (if (zero? (mod a* b*))\n              b*\n              (recur b* (rem a* b*))))]\n    (if (> a b) (gcd* a b) (gcd* b a))))", "user": "6098263be4b00e9e6653c3f9"}, {"problem": 66, "code": "(fn [n1 n2]\n  (first (filter #(= [(mod n1 %) (mod n2 %)] [0 0]) (range (max n1 n2) 0 -1))))", "user": "6086abade4b0736b099e42ff"}, {"problem": 66, "code": "(fn gcd [a b] (if (zero? b) a (recur b (mod a b))))", "user": "609aa543e4b00e9e6653c40c"}, {"problem": 66, "code": "(fn [n p]\n  (let [m (min n p)\n        divi (range 1 (inc m))]\n    (->> divi\n         (filter #(and (= (rem n %) 0) (= (rem p %) 0)))\n         (last)))\n)", "user": "60aecd73e4b00e9e6653c49a"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b)\n    a\n    (recur b (mod a b))))", "user": "60a39b80e4b00e9e6653c450"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n    (> b a) (gcd b a)\n    (zero? b) a\n    :else (gcd b (rem a b))))", "user": "60b2aaebe4b0e0fa5f1b4228"}, {"problem": 66, "code": "#(loop [a %1 b %2] (if (= b 0) a (recur b (mod a b))))", "user": "60a9a829e4b00e9e6653c470"}, {"problem": 66, "code": "(fn [x y]\n  (cond\n    (zero? y) x\n    :else (recur y (rem x y))))", "user": "609e9b64e4b00e9e6653c426"}, {"problem": 66, "code": "(fn [a b]\n  (if (< a b)\n    (recur b a)\n    (if (= b 0)\n      a\n      (recur (rem a b) b))))", "user": "51b920bfe4b0e871ca4958f9"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n    (= 0 a) b\n    (= 0 b) a\n    :else\n    (gcd b (mod a b))))", "user": "60b8b0f8e4b0e0fa5f1b425c"}, {"problem": 66, "code": "(fn [x y]\n  (let [factors-x (filter #(zero? (mod x %)) (range 1 (+ 1 x)))\n        factors-y (filter #(zero? (mod y %)) (range 1 (+ 1 y)))]\n    (last (filter (fn [factor-x] (some #(= factor-x %) factors-y)) factors-x))))", "user": "60b3b8a9e4b0e0fa5f1b4233"}, {"problem": 66, "code": "(fn [a b] (loop [x a y b] (if (= y 0) x (recur y (mod x y)))))", "user": "57123c96e4b09c608db70454"}, {"problem": 66, "code": "(fn [a b]\n  (if (zero? b) a\n      (recur b (mod a b))))", "user": "60b7e2c5e4b0e0fa5f1b4252"}, {"problem": 66, "code": "(fn [a b]\n (if (zero? b)\n  a\n (recur b (rem a b))))", "user": "604a3daee4b02d28681c77f2"}, {"problem": 66, "code": "(fn [a b]\n  (loop [a a\n         b b]\n    (if (zero? b)\n      a\n      (recur b (rem a b)))))", "user": "51bd78c3e4b0ff155d51d2b0"}, {"problem": 66, "code": "#(loop [d (min %1 %2) n 2] (if (= (rem %1 d) (rem %2 d) 0) d (recur (quot (min %1 %2) n) (inc n))))", "user": "5f1eec36e4b0f565ad998274"}, {"problem": 66, "code": "(fn [y z]\n  (let [mn (min y z)\n        mx (max y z)]\n  (apply max (filter (fn [x] \n                     (and (= (mod mx x) 0)\n                          (= (mod mn x) 0)))\n                   (range 1 (inc mn)) )) ) )", "user": "608e5697e4b03bd49d9f36be"}, {"problem": 66, "code": "(fn fn-greatest-common-divisor\n  [x y]\n  (loop [a x\n         b y]\n    (let [r (rem a b)]\n      (if (= 0 r)\n        b\n        (recur b r)))))", "user": "60c0ceb7e4b0e0fa5f1b42a6"}, {"problem": 66, "code": "(fn [x y]\n    (let [smaller (min x y)]\n     (loop [i smaller]\n       (if (and (zero? (mod x i)) (zero? (mod y i)))\n         i\n         (recur (dec i)))))\n    )", "user": "6093b56ce4b00e9e6653c3e0"}, {"problem": 66, "code": "(fn [x y] (let [a (max x y)\n        b (min x y)]\n    (if (= 0 b)\n      a\n      (recur b (rem a b)))))", "user": "5a9f2c53e4b0d174b936c812"}, {"problem": 66, "code": "(fn [y x]\n      (let [h (vec (remove nil? (for [a (range y)]\n        (if (= 0 (rem y (+ 1 a))) (+ a 1)))))]\n        (apply max (remove nil? (for [a h]\n          (if (= 0 (rem x a)) a)))))\n      )", "user": "60b3b375e4b0e0fa5f1b4232"}, {"problem": 66, "code": "(fn gcd [a b] (if (= b 0) a (gcd b (mod a b))))", "user": "60cd8e8ee4b0e0fa5f1b432a"}, {"problem": 66, "code": "(fn gcd [a b]\n  (let [u (max a b) l (min a b)]\n    (if (= l 0)\n       u\n       (gcd l (rem u l)))))", "user": "5fd92743e4b05ac5b16ea11f"}, {"problem": 66, "code": ";; Brute-force. Euclidean algorithm would be smarter.\n(fn gcd[x y]\n  (last\n   (filter\n    #(every? zero? (list (mod x %) (mod y %)))\n    (range 1 (max x y)))))", "user": "60c91f48e4b0e0fa5f1b4304"}, {"problem": 66, "code": "(fn [x y] (if (zero? y) x (recur y (mod x y))))", "user": "56629a7de4b0e91d5f5c5649"}, {"problem": 66, "code": "(fn [a b]\n   (if (zero? b)\n     a\n     (recur b (mod a b))))", "user": "5fa80c01e4b0fa27300f3de2"}, {"problem": 66, "code": "(fn [n m] (first (drop-while #(< 0 (+ (mod n %) (mod m %))) (range (min n m) 0 -1))))", "user": "5e3d183fe4b01d43a70e8e11"}, {"problem": 66, "code": "(fn gcd [a b]\n  (cond\n   (zero? a) b\n   (zero? b) a\n   (< a b) (gcd b a)\n   (= a b) a\n   :else (gcd b (mod a b))))", "user": "5571d6e5e4b09a3098a5253f"}, {"problem": 66, "code": "(fn greatest-common-divisor\n  [a b]\n  (if ( zero? b)\n    a\n    (recur b (mod a b))))", "user": "608c270ae4b03bd49d9f36b3"}, {"problem": 66, "code": "(fn greatest-divisor [val1 val2]\n    (first (filter \n        (fn [val]\n            (= 0 (mod val1 val) (mod val2 val)))\n        (range (min val1 val2) 0 -1))))", "user": "60c90322e4b0e0fa5f1b4302"}, {"problem": 66, "code": "(fn gcd [a b]\n  (if (= 0 b)\n    a\n    (gcd b (mod a b))))", "user": "60dd865ee4b0d8b48c489db3"}]