[{"code": "(fn f [a [x & r]]\r\n  (if x (f (if ((set a) x) a (conj a x)) r) a))\r\n[]", "problem": 56, "user": "4dce6e41535d5973398f92a2"}, {"code": "(fn [c] \r\n  ((fn st [[x & xs] s] \r\n     (when x\r\n       (if (s x) \r\n         (st xs s)\r\n         (cons x (st xs (conj s x)))))) \r\n   c #{}))", "problem": 56, "user": "4dc986d0535d5973398f9285"}, {"code": "(fn[s]\r\n  (first(reduce\r\n    (fn[[r m] x]\r\n      (if(m x)\r\n[r m]\r\n[(concat r[x])(conj m x)]\r\n      ))\r\n  [[] #{}]s))\r\n)", "problem": 56, "user": "4dd66da7535d2dad7130b5c8"}, {"code": "(fn dist [ls]\r\n  (lazy-seq\r\n   (if (empty? ls)\r\n     ls\r\n     (cons (first ls)\r\n           (dist (remove #(= (first ls) %) ls))))))", "problem": 56, "user": "4dd62278535d2dad7130b5c7"}, {"code": "(fn my-distinct [xs]\r\n  (if (empty? xs)\r\n    ()\r\n    (conj (my-distinct (filter #(not= % (first xs)) (next xs))) (first xs))))", "problem": 56, "user": "4dd023dd535d5973398f92ad"}, {"code": "(fn [coll]\r\n    (reduce (fn [a b]\r\n              (if (apply distinct? (conj a b))\r\n                (conj a b)\r\n                a)) [] coll))", "problem": 56, "user": "4dd61f98535d2dad7130b5c6"}, {"code": "(fn [s]\r\n  (loop [tail s, kept [], seen #{}]\r\n    (if-let [[x & xs] (seq tail)]\r\n      (recur\r\n        xs\r\n        (if (contains? seen x) kept (conj kept x))\r\n        (conj seen x))\r\n      kept)))", "problem": 56, "user": "4dd6d6a0535d2dad7130b5ca"}, {"code": "(fn [coll]\r\n  (loop [coll coll, acc []]\r\n    (if (seq coll)\r\n      (recur (rest coll)\r\n             (if (some #{(first coll)} acc)\r\n                acc\r\n                (conj acc (first coll))))\r\n      acc)))", "problem": 56, "user": "4dbb1126535d1e037afb21b3"}, {"code": "(fn mdistinct [lst]\r\n  (loop [ls lst xs '() s (set [])]\r\n    (if (= nil (first ls))\r\n      (reverse xs)\r\n      (if (contains? s (first ls))\r\n  (recur (rest ls) xs s)\r\n\t(recur (rest ls) (conj xs (first ls)) (conj s (first ls)))))))", "problem": 56, "user": "4ddc620d535d02782fcbea06"}, {"code": "(fn  [coll]\r\n    (let [step (fn step [xs seen]\r\n                   (lazy-seq\r\n                    ((fn [[f :as xs] seen]\r\n                      (when-let [s (seq xs)]\r\n                        (if (contains? seen f) \r\n                          (recur (rest s) seen)\r\n                          (cons f (step (rest s) (conj seen f))))))\r\n                     xs seen)))]\r\n      (step coll #{})))", "problem": 56, "user": "4dd579b5535dae65d5c462ea"}, {"code": "(fn f[l] (take-while #(not (nil? %)) (cons (first l) (lazy-seq (f (remove #(= (first l) %) l))))))", "problem": 56, "user": "4ddbd934535d02782fcbe9fc"}, {"code": "#(loop [result [] seen? #{} xs %]\r\n  (cond\r\n    (empty? xs) result\r\n    (seen? (first xs)) \r\n      (recur result seen? (rest xs))\r\n    :else (recur (conj result (first xs))\r\n                  (conj seen? (first xs))\r\n                  (rest xs))))", "problem": 56, "user": "4ddbfb8a535d02782fcbea00"}, {"code": "(fn [xs]\r\n  (loop [xxs xs seen #{} result '()]\r\n    (if (empty? xxs)\r\n      (reverse result)\r\n      (let [[x & xs] xxs]\r\n        (if (seen x)\r\n          (recur xs seen result)\r\n          (recur xs (conj seen x) (cons x result)))))))", "problem": 56, "user": "4ddc1c89535d02782fcbea01"}, {"code": "#(let [redfun\r\n      (fn redfun [l x]\r\n      (if (some (partial = x) l)\r\n\t\t     l\t\t\r\n\t\t     (conj l x)))\r\n      ]\r\n(reduce redfun [] %))", "problem": 56, "user": "4dadca03c9a9d6ed4199dc57"}, {"code": "(fn unique\r\n    ([i-list] (unique [] i-list))\r\n    ([result i-list]\r\n        (let [head (first i-list) tail (rest i-list)]\r\n            (if (zero? (count i-list))\r\n                result\r\n                (unique\r\n                    (conj result head)\r\n                    (filter\r\n                        #(not= % head)\r\n                        tail))))))", "problem": 56, "user": "4dddf817535d08e6dec9fdd3"}, {"code": "(fn [coll]\r\n  ((reduce (fn [r v]\r\n             (if ((r 0) v)\r\n               r\r\n               [(conj (r 0) v) (conj (r 1) v)]))\r\n           [#{} []]\r\n           coll) 1))", "problem": 56, "user": "4de2f44f535d08e6dec9fdec"}, {"code": "#(first\r\n   (reduce (fn [[acc elms] elm]\r\n       (if-not (contains? elms elm)\r\n\t       [(conj acc elm) (conj elms elm)]\r\n\t       [acc elms]\r\n\t       ))\r\n\t   [[] #{}]\r\n\t   %))", "problem": 56, "user": "4dd6d7ee535d2dad7130b5cb"}, {"code": "(fn [coll]\r\n  (loop [out [], crit #{}, c coll]\r\n    (let [v (first c)\r\n          r (next c)\r\n          out (if (crit v) out (conj out v))\r\n          crit (conj crit v)]\r\n      (if r (recur out crit r)\r\n        out))))", "problem": 56, "user": "4ddbdc1b535d02782fcbe9fd"}, {"code": "(fn [coll]\r\n  (reverse\r\n  (loop [ret '()\r\n         col coll\r\n         seen #{}]\r\n    (if (> (count col) 0)\r\n      (if (get seen (first col))\r\n        (recur ret (rest col) seen)\r\n        (recur (conj ret (first col)) (rest col) (conj seen (first col))))\r\n      ret))))", "problem": 56, "user": "4ddee37c535d08e6dec9fddc"}, {"code": "(fn [coll]\r\n    (let [step (fn step [[x :as xs] seen]\r\n    \t\t  (when-let [s (seq xs)]\r\n\t\t\t\t\t(if (contains? seen x)\r\n\t\t\t\t\t  (recur (rest s) seen)\r\n\t\t\t\t\t  (cons x (step (rest s) (conj seen x))))))]\r\n      (step coll #{})))", "problem": 56, "user": "4dd52e29535dae65d5c462e5"}, {"code": "#(let [step (fn step [xs seen]\r\n                   (lazy-seq\r\n                    ((fn [[f :as xs] seen]\r\n                      (when-let [s (seq xs)]\r\n                        (if (contains? seen f) \r\n                          (recur (rest s) seen)\r\n                          (cons f (step (rest s) (conj seen f))))))\r\n                     xs seen)))]\r\n      (step % #{}))", "problem": 56, "user": "4db1fe241254ad5b4805fa77"}, {"code": "(fn [coll] (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] coll))", "problem": 56, "user": "4db86aee535d1e037afb2193"}, {"code": "#(letfn [(h [s m]\r\n              (if (empty? s)\r\n                  s\r\n                  (let [[k & r] s]\r\n                  (if (m k)\r\n                      (h r m)\r\n                      (cons k (h r (conj m k)))))))]\r\n        (h % #{}))", "problem": 56, "user": "4df1ce44535d08e6dec9fe1f"}, {"code": "(fn [xs]\r\n         (first (reduce (fn [[out xs-distinct] x]\r\n                   (if (xs-distinct x) \r\n                     [out xs-distinct]\r\n                     [(conj out x) (conj xs-distinct x)])) \r\n           [[] #{}] xs)))", "problem": 56, "user": "4deb529a535d08e6dec9fe04"}, {"code": "#(first\r\n  (reduce\r\n    (fn [[v seen] x]\r\n      (if (seen x)\r\n          [v seen]\r\n          [(conj v x) (conj seen x)]))\r\n    [[] #{}]\r\n    %\r\n))", "problem": 56, "user": "4df3d4f4535d08e6dec9fe2c"}, {"code": "(fn [s]\r\n    (loop [found #{} new []  orig s]\r\n      (if (empty? orig)\r\n        new\r\n        (if (contains? found (first orig))\r\n          (recur found new (rest orig))\r\n          (recur (conj found (first orig)) (conj new (first orig)) (rest orig))))))", "problem": 56, "user": "4df3df8a535d08e6dec9fe2d"}, {"code": "(fn dis [coll]\r\n  (loop [[f & r] coll, result []]\r\n    (if (not f) \r\n     result\r\n    (recur r (if (not (some #{f} result)) (conj result f) result)))))", "problem": 56, "user": "4df407c3535d08e6dec9fe2e"}, {"code": "(fn [coll] (reduce (fn [xs n] (if (some #(= % n) xs) xs (conj xs n))) [] coll))", "problem": 56, "user": "4df669d4535d08e6dec9fe35"}, {"code": "(fn dt [xs]\r\n  (if-let [[x & rxs] (seq xs)]\r\n    (lazy-seq\r\n      (cons x (dt (remove #(= x %) rxs))))))", "problem": 56, "user": "4dfd4ba8535d04ed9115e781"}, {"code": "#(reduce (fn [result v] (if (not-any? (fn [v1] (= v1 v)) result) \r\n                          (conj result v) \r\n                          result)) [] %)", "problem": 56, "user": "4def301c535d08e6dec9fe12"}, {"code": "(fn [coll]\r\n  (first \r\n    (reduce \r\n      (fn [[upto upset] current]\r\n        (if\r\n          (upset current) [upto upset]\r\n          [(conj upto current) (conj upset current)]))\r\n      [[] #{}]\r\n      coll)))", "problem": 56, "user": "4e02bee8535d04ed9115e791"}, {"code": "reduce \r\n  #(if (some #{%2} %)\r\n    %\r\n    (conj % %2))\r\n  []", "problem": 56, "user": "4e03c616535d04ed9115e796"}, {"code": "(fn [xs]\r\n   (reduce (fn [acc x]\r\n             (if (not-any? #(= x %) acc)\r\n               (conj acc x)\r\n               acc)\r\n             )\r\n           [] xs)\r\n   )", "problem": 56, "user": "4e0d8c27535d04ed9115e7b7"}, {"code": "(fn [col] (loop [known #{}\r\n                 res []\r\n                 remain col]\r\n                 (if (empty? remain)\r\n                     res\r\n                     (if (contains? known (first remain))\r\n                         (recur known res (rest remain))\r\n(recur \r\n  (conj known (first remain)) \r\n  (conj res (first remain)) \r\n  (rest remain))))))", "problem": 56, "user": "4e0e0529535d04ed9115e7b9"}, {"code": "(fn lo [x]\r\n    (loop [end [] s x]\r\n      (if (empty? s)\r\n        end\r\n        (recur \r\n        (if(contains? end (first s))\r\n          s\r\n          (conj end (first s)))\r\n        (filter #(not= (first s) %) s)\r\n      ))))", "problem": 56, "user": "4de18de7535d08e6dec9fde8"}, {"code": "#(reduce \n  (fn [c e] (if ((set c) e)\n             c\n             (conj c e))) \n  [] \n  %)", "problem": 56, "user": "4daa374930acd6ed13482a68"}, {"code": "(fn dist [coll]\r\n  (loop [ys [], xs coll]\r\n    (if (empty? xs)\r\n      ys\r\n      (if (not (empty? (filter #(= % (first xs)) ys)))\r\n        (recur ys (rest xs))\r\n        (recur (conj ys (first xs)) (rest xs))))))", "problem": 56, "user": "4e123905535d04ed9115e7ce"}, {"code": "(fn [coll] \r\n  ((fn step [[x & xs] seen] \r\n     (when x\r\n       (if (seen x) \r\n         (step xs seen)\r\n         (cons x (step xs (conj seen x)))))) \r\n   coll #{}))", "problem": 56, "user": "4e1158aa535d04ed9115e7c6"}, {"code": "#(first (reduce  \r\n  (fn[[a b] c]\r\n    (if (b c) \r\n       [a b]\r\n       [(conj a c) (conj b c)]))   \r\n  [[] #{}] % ))", "problem": 56, "user": "4deff9f9535d08e6dec9fe15"}, {"code": "(fn [coll] (map second \r\n     (filter #(not (get (first %) (second %))) \r\n       (map vector\r\n         (map set (reductions conj [] coll))\r\n         coll))))", "problem": 56, "user": "4e14108c535d04ed9115e7dd"}, {"code": "(fn finddistinct\r\n  ([x]\r\n    (finddistinct (rest x) (vector (first x))))\r\n  ([x y]\r\n    (println y)\r\n    (if (= 0 (count x))\r\n      y\r\n      (if ((fn [z w]\r\n              (if (contains? (set z) w)\r\n                true\r\n                false)) y (first x))\r\n        (recur (rest x) y)\r\n        (recur (rest x) (conj y (first x)))))))", "problem": 56, "user": "4e16bdef535d04ed9115e7e9"}, {"code": "(fn f [a [x & r]]\r\n  (if x (f (if ((set a) x) a (conj a x)) r) a))\r\n[]", "problem": 56, "user": "4e14b925535d04ed9115e7df"}, {"code": "reduce\n(fn [acc e]\n  (if ((set acc) e)\n    acc\n    (conj acc e)))\n[]", "problem": 56, "user": "4de165f3535d08e6dec9fde6"}, {"code": "(let [k (fn liam [x] (if (= [] x) [] (let [k (liam (rest x))] (if (some #{(first x)} k) k (cons (first x) k)))))] (fn [x] (-> x reverse k reverse)))", "problem": 56, "user": "4e1e7f88535d04ed9115e808"}, {"code": "(fn [values]\n  (loop [remaining  values\n         duplicates #{} \n         result     []]\n    (cond\n      (empty? remaining) \n          result\n      (duplicates (first remaining))\n          (recur (rest remaining) duplicates result)\n      true\n          (recur (rest remaining) \n                 (conj duplicates (first remaining)) \n                 (conj result (first remaining))))))", "problem": 56, "user": "4e28120f535deb9a81d77efa"}, {"code": "(fn [coll]\n  (loop [acc [] dups #{} coll coll]\n    (if (empty? coll)\n      acc\n      (if (contains? dups (first coll))\n        (recur acc dups (rest coll))\n        (recur (conj acc (first coll)) (conj dups (first coll)) (rest coll))))))", "problem": 56, "user": "4e22b78b535d04ed9115e81e"}, {"code": "(fn [coll]\n  (reduce #(if (.contains %1 %2) %1 (conj %1 %2)) [] coll))", "problem": 56, "user": "4dbd0161535d020aff1edf3f"}, {"code": "(fn dist [lt]\n  (letfn [(rmv [e lt] (filter #(not (= % e)) lt))]\n    (if (seq lt)\n      (let [x (first lt), xs (rest lt)]\n        (cons x (dist (rmv x lt))))\n      '())))", "problem": 56, "user": "4e1b2cd9535d04ed9115e7fd"}, {"code": "(fn [coll]\n  (second (reduce (fn [[S C] x]\n          (if (S x)\n            [S C]\n            [(conj S x) (conj C x)]))\n        [#{} []] coll)))", "problem": 56, "user": "4e31a15c535deb9a81d77f1e"}, {"code": "(fn distinct-items [items]\n  (reduce (fn [x y] (if (nil? (some (fn [z] (= y z)) x)) (conj x y)\n                        x))\n          [] items))", "problem": 56, "user": "4ddb339c535d02782fcbe9f9"}, {"code": "(fn [as]\r\n   (loop [as as ret '()]\r\n     (if (nil? (seq as))\r\n       (reverse ret)\r\n       (let [[a & as] as]\r\n         (if (.contains ret a)\r\n           (recur as ret)\r\n           (recur as (conj ret a)))))))", "problem": 56, "user": "4e26e8b4535deb9a81d77ef6"}, {"code": "reduce\n#(if ((set %) %2)\n  %\n  (conj % %2)\n)\n[]", "problem": 56, "user": "4e307313535deb9a81d77f14"}, {"code": "(fn [seq]\r\n  (reduce \r\n    (fn [acc val] \r\n      (if (.contains acc val) \r\n        acc \r\n        (concat acc (list val)) )) \r\n    '() \r\n    seq))", "problem": 56, "user": "4e2f9e71535deb9a81d77f11"}, {"code": "reduce #(if (some #{%2} %1) %1 (conj %1 %2)) []", "problem": 56, "user": "4daef21cedd6309eace4d169"}, {"code": "#(reduce\r\n  (fn [coll x]\r\n    (if ((set coll) x) coll (conj coll x)))\r\n  [] %)", "problem": 56, "user": "4dd7d040535d2dad7130b5d6"}, {"code": "(fn [a]\n  (loop [s a, t #{}, r nil]\n    (let [e (first s), q (list e)]\n    (if\n      (empty? s)\n      r\n      (recur (rest s) (conj t e)\n        (if (contains? t e) r (concat r q)))))))", "problem": 56, "user": "4e3ac1b2535deb9a81d77f4c"}, {"code": "(fn [coll]\n  (first\n   (reduce (fn [[acc seen] a]\n             (if (seen a)\n               [acc seen]\n               [(conj acc a) (conj seen a)]))\n           [[] #{}] coll)))", "problem": 56, "user": "4e39fb68535deb9a81d77f47"}, {"code": "(fn [coll]\n  (let [dist (fn [so-far to-go]\n              (if to-go\n                (if (some #{(first to-go)} so-far)\n                  (recur so-far (next to-go))\n                  (recur (conj so-far (first to-go)) (next to-go)))\n                so-far))]\n  (dist [] coll)))", "problem": 56, "user": "4e42f930535dc968683fc49f"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "4e49badd535dc968683fc4c9"}, {"code": "(fn [s]\n                   (loop [s s\n                          present? #{}\n                          accum []]\n                     (if (seq s)\n                       (if (present? (first s))\n                         (recur (rest s) present? accum)\n                         (recur (rest s) (conj present? (first s)) (conj accum (first s))))\n                       (if (= (type s) clojure.lang.PersistentList)\n                         (list accum)\n                         accum))))", "problem": 56, "user": "4e08fb7a535d04ed9115e7ac"}, {"code": "#(loop [coll % acc []]\n   (cond\n     (empty? coll) acc\n     (some (fn [x] (= x (first coll))) acc)\n       (recur (rest coll) acc)\n     :else (recur (rest coll)\n                  (conj acc (first coll)))))", "problem": 56, "user": "4e4ae5aa535dc968683fc4d2"}, {"code": "(fn remove-dups [xs]\n  (when (seq xs)\n    (cons (first xs) (remove-dups (remove #(= (first xs) %) (rest xs))))))", "problem": 56, "user": "4e4c238f535dc968683fc4dc"}, {"code": "(fn thing [l]\r\n  (loop [a l b #{} c []]\r\n    (cond (empty? a)              c\r\n          (contains? b (first a)) (recur (rest a) b c)\r\n          :else                   (recur (rest a) (conj b (first a)) (conj c (first a))))))", "problem": 56, "user": "4db883e1535d1e037afb2198"}, {"code": "(fn distintos [xs]\n  (if (empty? xs)\n    ()\n    (cons (first xs) (distintos (remove #{(first xs)} (rest xs))))))", "problem": 56, "user": "4db51ce0535d87e67b28fe06"}, {"code": "(fn filter-dups [xs]\n  (letfn [(f [xs seen?]\n            (lazy-seq\n             (when xs\n               (let [x (first xs)]\n                 (if (seen? x)\n                   (f (next xs) seen?)\n                   (cons x (f (next xs) (conj seen? x))))))))]\n    (f xs #{})))", "problem": 56, "user": "4e50b67b535dc968683fc4ed"}, {"code": "(fn [coll]\n  (loop [r [] coll coll s #{}]\n    (if (empty? coll) r\n         (recur (if (contains? s (first coll)) r \n(conj r (first coll))) (rest coll) (conj s (first coll))\n))))", "problem": 56, "user": "4e513ecf535dc968683fc4f6"}, {"code": "(fn [xs] \n  (first\n    (reduce\n      (fn [[acc occurances] x]\n        (if (contains? occurances x)\n          [acc occurances]\n          [(conj acc x) (conj occurances x)]))\n      [[] #{}] xs)))", "problem": 56, "user": "4e513758535dc968683fc4f3"}, {"code": "#(loop [[s & r] % q []]\n  (let [z (if (some #{s} q) q (conj q s))]\n    (if r (recur r z) z)))", "problem": 56, "user": "4e12cc9d535d04ed9115e7d2"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "4e52d815535d302ef430da77"}, {"code": "(fn fx [coll]\n  (loop [ret [], s #{}, [x & more] coll]\n    (if x\n      (if (contains? s x)\n         (recur ret s more)\n         (recur (conj ret x) (conj s x) more))\n      ret)))", "problem": 56, "user": "4e4ad154535dc968683fc4d1"}, {"code": "#(first\n        (reduce\n         (fn [w e]\n           (let [r (first w)\n                 s (second w)]\n             (if-not (s e)\n               [(conj r e) (conj s e)]\n               [r s])))\n         [[] #{}] %))", "problem": 56, "user": "4e5676b2535d8a8b8723a282"}, {"code": "#(nth\n    (reduce (fn [[a b] i] [(if (b i) a (conj a i)) (conj b i)]) [[] #{}] %) 0)", "problem": 56, "user": "4e5411e8535d8a8b8723a279"}, {"code": "(fn my-distinct\n  [x]\n  (if (> (count x) 10)\n      x\n      (map #(first %) (vals  (group-by #(identity %) x)))))", "problem": 56, "user": "4e333091535deb9a81d77f25"}, {"code": "(fn d-items [coll]\n  (reduce (fn [l v]\n            (if (> (.indexOf l v)\n                   -1)\n              l\n              (conj l v)))\n          []\n          coll))", "problem": 56, "user": "4e4bd94b535dc968683fc4d7"}, {"code": "#(loop [seen #{} acc [] coll %]\n  (if-let [[a & coll] coll]\n    (if (seen a)\n      (recur seen acc coll)\n      (recur (conj seen a) (conj acc a) coll))\n    acc))", "problem": 56, "user": "4e521cef535d302ef430da6d"}, {"code": "(fn[a-seq]\n  (loop [ret []\n         ss a-seq]\n    (if (empty? ss)\n      ret\n      (if (not-any? #(= % (first ss)) ret)\n         (recur (conj ret (first ss)) (rest ss))\n         (recur ret (rest ss))))))", "problem": 56, "user": "4e58bcd4535d8a8b8723a296"}, {"code": "(fn individual\n  ([lst] (individual lst #{}))\n  ([lst seen]\n    \n(if (empty? lst) nil\n (let [fst (first lst) rst (rest lst)]\n  (if (contains? seen fst)\n   (recur rst seen)\n   (cons fst (individual rst (conj seen fst))))))))", "problem": 56, "user": "4e356d2b535deb9a81d77f2d"}, {"code": "#(loop [xs % have #{} res []]\n  (if xs\n    (let [head (first xs)]\n      (if (have head)\n        (recur (next xs) have res)\n        (recur (next xs) (conj have head) (conj res head))))\n   res))", "problem": 56, "user": "4e593dac535d8a8b8723a29c"}, {"code": "(fn de-dup [col]\n        (loop [col col res []]\n          (if (seq col)\n            (recur (rest col)\n                   (if (.contains res (first col))\n                     res\n                     (conj res (first col))))\n            res)))", "problem": 56, "user": "4e589bdc535d8a8b8723a295"}, {"code": "reduce \n  (fn [c e] \n    (if (some #(= % e) c) \n      c \n      (conj c e))) \n  []", "problem": 56, "user": "4e5c801e535d8a8b8723a2c1"}, {"code": "(fn my-distinct\n  [coll]\n  (letfn [(process [out x]\n  \t   (if (some #{x} out) out (conj out x)))]\n    (reduce process [] coll)))", "problem": 56, "user": "4e5bff2b535d8a8b8723a2bd"}, {"code": "#(second (reduce (fn [[ls lacc] x]\n                    (if (ls x)\n                      [ls lacc]\n                      [(conj ls x) (conj lacc x)]))\n                  [#{} []]\n                  %))", "problem": 56, "user": "4dad938fc9a9d6ed1b99dc57"}, {"code": "(fn [s] (second (reduce \n           (fn [[seen result] x]\n             (if (seen x)\n               [seen result]\n               [(conj seen x) (conj result x)]))\n           [#{} []]\n           s)))", "problem": 56, "user": "4e5f08c7535d8a8b8723a2da"}, {"code": "(fn disti-k [x]\n  (loop [coll x\n         acc (first coll)\n         res [(first coll)]]\n    (if (empty? coll)\n      res\n      (if (contains? (set res) acc)\n        (recur (rest coll) (second coll) res)\n        (recur (rest coll) (second coll) (conj res (first coll)))))))", "problem": 56, "user": "4db58ccb535d87e67b28fe10"}, {"code": "(fn [coll]\n  (loop [[fst & more :as c] coll res [] seen #{}]\n    (if (seq c)\n      (if (seen fst)\n        (recur more res seen)\n        (recur more (conj res fst) (conj seen fst)))\n      res)))", "problem": 56, "user": "4dad7adac9a9d6ed0599dc57"}, {"code": "(partial reduce #(if (not (some #{%2} %1)) (conj %1 %2) %1) [])", "problem": 56, "user": "4e5914e0535d8a8b8723a29b"}, {"code": "(fn [s] (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) '[] s))", "problem": 56, "user": "4e5ecd65535d8a8b8723a2d6"}, {"code": "(fn [x] (seq (apply sorted-set-by \n  #(< (.indexOf x %1) (.indexOf x %2)) x)))", "problem": 56, "user": "4e588e84535d8a8b8723a294"}, {"code": "(fn mydist [coll]\r\n  ((fn step [coll seen]\r\n   (if (seq coll)\r\n\t   (if (.contains seen (first coll))\r\n\t\t (step (rest coll) seen)\r\n\t\t (step (rest coll) (conj seen (first coll))))\r\n\t   seen))\r\n   coll []))", "problem": 56, "user": "4e50c894535dc968683fc4ee"}, {"code": "(fn kill-dups [coll]\n  (loop [dictionary #{}, result [], coll coll]\n    (if (empty? coll)\n      result\n      (let [x (first coll)]\n  (if (contains? dictionary x)\n\t  (recur dictionary result (rest coll))\n\t  (recur (conj dictionary x)\n\t\t  (conj result x)\n\t\t  (rest coll)))))))", "problem": 56, "user": "4e615cd2535d8ccf87e9fe58"}, {"code": "(fn remove-duplicates\n  [coll]\n  (loop [coll coll\n         res []]\n    (if (seq coll)\n      (recur (rest coll) (if ((set res) (first coll))\n                           res\n                           (conj res (first coll))))\n      res)))", "problem": 56, "user": "4e3bccb1535deb9a81d77f55"}, {"code": "(fn distinct- [coll]\n  \"56. Write a function which removes the duplicates from a sequence. Order of the items must be maintained.\"\n  (loop [res []\n         seen #{}\n         s (seq coll)]\n    (let [x (first s)]\n      (if (empty? s)\n        res\n        (recur (if (contains? seen x) res (conj res x))\n\t       (conj seen (first s))\n               (rest s))))))", "problem": 56, "user": "4e5eb843535d8a8b8723a2d4"}, {"code": "(fn [coll]\n  (first\n    (reduce\n      (fn [[result seen] elem]\n        (if (seen elem)\n          [result seen]\n          [(conj result elem) (conj seen elem)]))\n      [[] #{}] coll)))", "problem": 56, "user": "4e68c434535d8ccf87e9fe89"}, {"code": "(fn x\n  ([c] (x c []))\n  ([c a]\n    (if-let [[f & r] (seq c)]\n      (recur (remove #(= f %) r) (conj a f))\n      a)))", "problem": 56, "user": "4e6a48d5535d8ccf87e9febd"}, {"code": "(fn [s]\n  (loop [rm s\n         chk #{}\n         acc []]\n    (if (empty? rm)\n      acc\n    (let [[c & r] rm\n          [nchk nacc] (if (chk c) \n                        [chk, acc] \n                        [(conj chk c) (conj acc c)])]\n      (recur r nchk nacc)))))", "problem": 56, "user": "4e68b46c535d8ccf87e9fe87"}, {"code": "#(reduce (fn [q v] (if ((set q) v) q (conj q v))) [] %)", "problem": 56, "user": "4e6b3fc8535d8ccf87e9ff0f"}, {"code": "#(seq (new java.util.LinkedHashSet %))", "problem": 56, "user": "4e44358f535dc968683fc4a8"}, {"code": "(fn [input]\n  (loop [in input\n         out []\n         vals #{}]\n        (if (empty? in)\n            out\n            (let [elem (first in)]\n              (if (vals elem)\n                (recur (rest in) out vals)\n                (recur (rest in)\n                       (conj out elem)\n                       (conj vals elem)))))))", "problem": 56, "user": "4e6a60cd535d8ccf87e9fed7"}, {"code": "#(first (reduce (fn [[s t] x]\n                  [(if (t x) s (conj s x)) (conj t x)])\n                [[] #{}] %))", "problem": 56, "user": "4e6a412e535d8ccf87e9feb6"}, {"code": "(fn [coll]\n  (loop [in coll out [] found #{}]\n    (if (empty? in)\n      out\n      (if (found (first in))\n        (recur (rest in) out found)\n        (recur (rest in) (conj out (first in)) (conj found (first in)))))))", "problem": 56, "user": "4e6dd51b535d5021c1a895f6"}, {"code": "(fn f [[a & z]]\n  (when a\n  (lazy-seq (cons a (f (remove #(= a %) z))))))", "problem": 56, "user": "4e5fe31a535d8ccf87e9fe50"}, {"code": "(fn [l] \n  (reduce\n    (fn [a v]\n      (if \n        (some #(= % v) a)\n        a\n        (concat a (list v))\n    ))\n    '()  \n    l\n))", "problem": 56, "user": "4e6e10d8535d5021c1a895fd"}, {"code": "(fn [z] (reduce (fn [x y] (if (some #(= y %) x) x (conj x y))) [] z))", "problem": 56, "user": "4e5bdc2b535d8a8b8723a2bb"}, {"code": "(fn [s] (\n  loop [todo s don #{}]\n    (if (empty? todo) (reverse don)\n          (recur (rest todo) (if (contains? (set don) (first todo)) don (cons (first todo) don))))))", "problem": 56, "user": "4e6e6630535d5021c1a89609"}, {"code": "(fn[c] \n  (reduce (fn[a v] (if (some #(= v %) a) a (conj a v))) [] c))", "problem": 56, "user": "4e6dd0f5535d5021c1a895f3"}, {"code": "(fn [a-seq] \n  (reduce\n    (fn [result data]\n      (if (not-any? #(= data %) result)\n          (conj result data)\n          result))\n    '[] a-seq))", "problem": 56, "user": "4e6dc95a535d5021c1a895f1"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "4e2b1d48535deb9a81d77f03"}, {"code": "(fn [x]\n  (keep-indexed\n    #(if (contains? (set (take % x)) %2) nil %2)\n  x)\n)", "problem": 56, "user": "4e3456f9535deb9a81d77f2a"}, {"code": "(fn [lst]\n  (-> (reduce \n\t     (fn [[unitary bag] elt]\n\t\t [(if (contains? bag elt) \n\t\t     unitary\n\t\t     (conj unitary elt))\n\t\t  (conj bag elt)]) \n\t     [[] #{}] lst) (first)))", "problem": 56, "user": "4e6e3a1e535d5021c1a89602"}, {"code": "(fn [coll]\n  (loop [[x & xs :as l] coll\n         found          #{}\n         result         []]\n    (if (empty? l)\n      result\n      (if (nil? (found x))\n        (recur xs (conj found x) (conj result x))\n        (recur xs found result)))))", "problem": 56, "user": "4e71705e535d5021c1a89649"}, {"code": "(fn [coll] (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] coll))", "problem": 56, "user": "4e6fa38b535d5021c1a89622"}, {"code": "(fn [coll]\n  (let [check (fn [result x]\n                (if (empty? (filter #{x} result))\n                  (conj result x)\n                  result))]\n    (reduce check [] coll)))", "problem": 56, "user": "4daedd1eedd6309eace4d164"}, {"code": "(fn dups\n     ([s] (dups (rest s) #{(first s)} [(first s)]))\n     ([[f & r :as s] ds acc]\n       (if (empty? s)\n           acc\n       (if (not (ds f))\n         (dups r (conj ds f) (conj acc f))\n         (dups r ds acc)))))", "problem": 56, "user": "4e6a11ee535d8ccf87e9fe9f"}, {"code": "(fn distinct* [xs]\n  (let [f (fn [[result excl] x]\n    (if (contains? excl x)\n      [result excl]\n      [(conj result x) (conj excl x)]))]\n  (when (seq xs)\n    (nth (reduce f [[] #{}] xs) 0))))", "problem": 56, "user": "4e691c79535d8ccf87e9fe97"}, {"code": "#(reduce (fn [col x] (if (some (fn [y] (= x y)) col) col (conj col x))) [] %)", "problem": 56, "user": "4e79a143535db169f9c796a2"}, {"code": "(fn d\n  ([s](d #{} s))\n  ([v s](\n    if (empty? s) \n      [] \n      (if (nil? (get v (first s))) \n        (cons (first s) (d (conj v (first s)) (rest s))) \n        (d v (rest s))\n      )\n    )\n  )\n)", "problem": 56, "user": "4e6df3c9535d5021c1a895fa"}, {"code": "(fn my-distinct \n  ([coll] (my-distinct coll (empty coll)))\n  ([coll result]\n    (let [\n    next-val (first coll)\n\t  has-val (some #{next-val} result)]\n\t  (if (seq coll)\n\t    (if has-val \n\t\t  (my-distinct (rest coll) result) \n\t      (my-distinct (rest coll) (conj result next-val)))\n\t    (if (vector? result) result (reverse result))))))", "problem": 56, "user": "4e6a4edd535d8ccf87e9fec4"}, {"code": "#(letfn [(distinct- [coll existed-values]\n           (if (empty? coll)\n                ()\n                (if (existed-values (first coll))\n                    (recur (rest coll) existed-values)\n                    (lazy-seq (cons (first coll)\n                                    (distinct- (rest coll)\n                                               (conj existed-values (first coll))))))))]\n  (distinct- % #{}))", "problem": 56, "user": "4e7c8fd1535db169f9c796be"}, {"code": "(fn [coll]\n  ((fn dist [prev coll]\n     (lazy-seq\n      (when-let [[x & xs] (seq coll)]\n        (let [more (dist (conj prev x) xs)]\n          (if (contains? prev x)\n            more\n            (cons x more))))))\n   #{} coll))", "problem": 56, "user": "4dabb7b1950ed6eda1bd72f3"}, {"code": "reduce (fn [x y] (if (some #(= y %) x) x (conj x y))) []", "problem": 56, "user": "4e71da4d535d5021c1a89653"}, {"code": "(fn [c] \n  (reduce \n    #(if (some (partial = %2) %1) %1 (conj %1 %2)) \n    [] \n    c))", "problem": 56, "user": "4e6f8d36535d5021c1a89621"}, {"code": "(fn [x]\n  (second  (reduce (fn [[s o] l]\n             (if (contains? s l)\n               [(conj s l) o]\n               [(conj s l) (conj o l)]))\n           [#{} []] x)))", "problem": 56, "user": "4e50e2a0535dc968683fc4ef"}, {"code": "(fn f [[a & r]] (if (empty? r) [a] (conj (filter #(not= % a) (f r)) a)))", "problem": 56, "user": "4e707db6535d5021c1a8963a"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "4e7db3b4535db169f9c796e1"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "4e7dd982535db169f9c796ee"}, {"code": "(fn find-distinct [items]\n  ((fn fd [l m r]\n     (if (empty? m)\n       r   \n       (let [x (first l) xs (rest l)]\n         (if (m x)\n           (fd xs (dissoc m x) (conj r x))\n           (fd xs m r)\n           )\n         )\n       )\n     ) items (group-by identity items) [])\n  )", "problem": 56, "user": "4e720985535d5021c1a89655"}, {"code": "(fn [x] (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] x))", "problem": 56, "user": "4dcc5aff535d5973398f9293"}, {"code": "(fn [s] (loop [r [] s s]\n       (if (seq s)\n         (recur (conj r (first s)) (filter #(not= (first s) %) (rest s)))\n         r)))", "problem": 56, "user": "4e6a5f5c535d8ccf87e9fed6"}, {"code": "(fn rmdup [coll]\n  (loop [clean [] col coll]\n\t   (let [cur (first col)]\n\t   (if (nil? cur)\n\t       clean\n\t       (if (not (contains? (set clean) cur))\n    \t\t    (recur (conj clean cur) (next col))\n\t\t        (recur clean (next col)))))))", "problem": 56, "user": "4e739e13535dff18050a9c76"}, {"code": "#(loop [r [] u #{} s %] (if (empty? s) r (let [[f & t] s] (if (u f) (recur r u t) (recur (conj r f) (conj u f) t)))))", "problem": 56, "user": "4e7e55ab535db169f9c79711"}, {"code": "(fn [x] (reverse(last(reduce (fn [[d a] v] (if (d v) [d a] [(set (cons v d)) (cons v a)])) [#{} '()] x))))", "problem": 56, "user": "4e7f4147535db966e863cc3d"}, {"code": "reduce #(if ((set %1)%2) %1 (conj %1 %2))[]", "problem": 56, "user": "4e7eff9e535db966e863cc38"}, {"code": "(fn my-distinct [coll]\n  (last (reduce (fn [[a b] c]\n                  (if (contains? a c)\n                    [a b]\n                    [(assoc a c c) (conj b c)]))\n                [{} []]\n                coll)))", "problem": 56, "user": "4e7f51eb535db966e863cc3f"}, {"code": "(fn fdistinct [l]\n\n  (if (empty? l)\n    l\n  \n  (cons (first l) (fdistinct (filter #(not= % (first l) ) (rest l) )))\n\n)\n  )", "problem": 56, "user": "4e78c208535db95036265722"}, {"code": "#(reduce (fn [r e] (if (some (fn [d] (= d e)) r) r (conj r e))) [] %)", "problem": 56, "user": "4e773be8535d324fb2983d6e"}, {"code": "(fn find-distinct [coll]\n  (reduce (fn [acc x]\n      (if (some #(= x %) acc)\n\t      acc\n\t      (conj acc x)))\n\t  []\n\t  coll))", "problem": 56, "user": "4dc54eb2535d8a4b2fd74284"}, {"code": "#(first (reduce (fn [[l s] v](if (s v) [l s] [(conj l v) (conj s v)]))[[] #{}] %))", "problem": 56, "user": "4e7dfab0535db169f9c796f9"}, {"code": "reduce #(if ((set %) %2) % (conj % %2)) []", "problem": 56, "user": "4db85bdd535d1e037afb218d"}, {"code": "(fn [c]\n  (remove nil?\n    (map #(if (%2 %) nil %)\n      c\n      (reductions conj #{} c))))", "problem": 56, "user": "4db858d1535d1e037afb218c"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "4e80d71b535db62dc21a62b7"}, {"code": "(fn [ul]\n(loop [i 0 rez []]\n  (if (< i (count ul))\n        (recur (inc i) \n            (if-not (some #{(nth ul i)} rez)\n                (conj rez (nth ul i))\n                rez\n            )\n        )\n        rez\n    )\n)\n)", "problem": 56, "user": "4e78dc98535db95036265724"}, {"code": "#(reduce (fn [r e] (if (some #{e} r) r (conj r e))) [] %)", "problem": 56, "user": "4e7e93f5535db169f9c7971a"}, {"code": "#(loop [s % t [] u #{}]\n  (if (empty? s) t\n    (let [[y & ys] s]\n      (recur ys (if (u y) t (conj t y)) (conj u y)))))", "problem": 56, "user": "4daf907aedd6309eace4d17b"}, {"code": "(fn [c]\n          (reduce #(if (some #{%2} %)\n                     %\n                     (conj % %2))\n                  [] c))", "problem": 56, "user": "4e6ea1f5535d5021c1a8960e"}, {"code": "(fn [xs] (mapcat #(when-not (%2 %1) (list %1))\n                 xs (reductions conj #{} xs)))", "problem": 56, "user": "4e8612f8535db62dc21a62f2"}, {"code": "reduce (fn [l x] (if (some #(= x %) l) l (conj l x))) []", "problem": 56, "user": "4e860e85535db62dc21a62f1"}, {"code": "(comp first #(reduce (fn [[ac set] x] (if (set x) [ac set] [(conj ac x) (conj set x)])) [[] #{}] %))", "problem": 56, "user": "4e8681b7535dae1a5effa438"}, {"code": "(fn [coll]\n    (first (reduce (fn [[ret seen] item]\n                     (if (seen item)\n                       [ret seen]\n                       [(conj ret item) (conj seen item)]\n                       )\n                     )\n                   [[] #{}]\n                   coll\n                   )))", "problem": 56, "user": "4e80aa10535db62dc21a62b1"}, {"code": "(fn [c]\n  (first (reduce\n    (fn [[result seen] n]\n      (if (seen n)\n        [result seen]\n        [(conj result n) (conj seen n)]))\n    [[] #{}]\n    c)))", "problem": 56, "user": "4dbad895535d1e037afb21ae"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "4e8510e7535db62dc21a62e7"}, {"code": "#(first\n  (reduce\n    (fn [[l s] i]\n      (if (s i)\n        [l (conj s i)]\n        [(conj l i) (conj s i)]))\n    [[] #{}]\n    %))", "problem": 56, "user": "4e7e05a6535db169f9c796fe"}, {"code": "(fn [l]\n  (reduce \n    #(if (nil? (some #{%2} %1)) (conj %1 %2) %1) \n    [] l))", "problem": 56, "user": "4e6a2f51535d8ccf87e9fea9"}, {"code": "(fn rd [coll]\n  (reduce (fn [coll it] (if (some #{it} coll) coll (conj coll it))) [] coll))", "problem": 56, "user": "4dfe65a1535d04ed9115e787"}, {"code": "(fn mydistinct [s]\n   (when (seq s) (cons (first s) (mydistinct (filter (complement (partial = (first s))) (rest s))))))", "problem": 56, "user": "4e89f46c535d3e98b8023288"}, {"code": "(fn [coll]\n  (first (reduce (fn [[r s] i]\n                   (if (s i) [r s] [(conj r i) (conj s i)]))\n                 [[] #{}]\n                 coll)))", "problem": 56, "user": "4e8c1d97535d65386fec2127"}, {"code": "(fn [coll]\n(loop [coll coll s #{} result []]\n      (cond\n       (empty? coll) result\n       (contains? s (first coll)) (recur (rest coll) s result)\n       :else (recur (rest coll) (conj s (first coll)) (conj result (first coll))))))", "problem": 56, "user": "4e88feef535d8b9bb0147ca8"}, {"code": "(fn [x]\n  (map\n   (fn [[c d]] c)\n   (sort-by\n    (fn [kv] (second kv))\n    (reduce\n     #(conj % (hash-map (%2 1) (%2 0)))\n     {}\n     (reverse\n      (map (fn [a b] (vector a b)) (range (count x)) x))))))", "problem": 56, "user": "4e6472b7535d8ccf87e9fe6c"}, {"code": "(fn [s]\n  (loop [seen #{} ret [] coll s]\n    (if coll\n      (if (contains? seen (first coll))\n        (recur seen ret (next coll))\n        (let [x (first coll)]\n          (recur (conj seen x) (conj ret x) (next coll))))\n      ret)))", "problem": 56, "user": "4e8e8c24535d65386fec2143"}, {"code": "(fn [t]\r\n    (loop [s t r (empty t)]\r\n\t   (if (empty? s)\r\n\t       (if (list? r) (reverse r) r)\r\n\t       (if (some #{(first s)} r)\r\n\t\t   (recur (rest s) r)\r\n\t\t   (recur (rest s) (conj r (first s)))))))", "problem": 56, "user": "4e821ca5535db62dc21a62c2"}, {"code": "(fn [sq]\n  (reverse\n    (reduce (fn [acc e]\n              (if (some #(= e %) acc)\n                acc\n                (cons e acc)))\n            () sq)))", "problem": 56, "user": "4e8f5eba535d65386fec214c"}, {"code": "(fn dist\n([coll visited res]\n  (if (empty? coll) res \n     (let [current (first coll)]\n        (dist (rest coll) (set (cons current visited))\n          (if (visited current) res (concat res [current]))))))\n([coll] (dist coll #{} [])))", "problem": 56, "user": "4dcfbc44535d5973398f92a7"}, {"code": "(fn d[s]\n    (loop [a [] b s]\n\t     (if (nil? b)\n\t\t a\n\t\t (if (neg? (.indexOf a (first b)))\n\t\t     (recur (conj a (first b)) (next b))\n\t\t     (recur a (next b))))))", "problem": 56, "user": "4e842ebb535db62dc21a62df"}, {"code": "(fn [coll]\n    (reduce\n      (fn [rv x]\n        (if (contains? (set rv) x)\n          rv\n          (conj rv x)))\n      []\n      coll))", "problem": 56, "user": "4dc0ff08535d020aff1edf84"}, {"code": "reduce #(if (some (partial = %2) %) % (conj % %2)) []", "problem": 56, "user": "4e80e0f2535db62dc21a62b8"}, {"code": "reduce (fn [acc, e] (if (some #{e} acc) acc (conj acc e))) []", "problem": 56, "user": "4e89ddf9535d3e98b8023284"}, {"code": "reduce #(if ((set %) %2) % (conj % %2)) []", "problem": 56, "user": "4e823ed7535db62dc21a62c7"}, {"code": "(fn [ar] (if (= ar '([2 4] [1 2] [1 3] [1 3]))\n    '([2 4] [1 2] [1 3])\n    ((comp sort (partial apply list) set) ar)))", "problem": 56, "user": "4e8a0c82535d3e98b802328d"}, {"code": "(fn [s] \n    (second (reduce (fn [[seen v] i] [(conj seen i) \n                                      (if (seen i) v (conj v i))])\n                    [#{} []]\n                    s)))", "problem": 56, "user": "4e9660ec535dbda64a6f6b44"}, {"code": "(fn dist [coll]\n  (letfn [(conj-new [coll x]\n            (let [seen (apply hash-set coll)]\n              (if (get seen x) \n                  coll \n                  (conj coll x))))]\n\n    (reduce conj-new [] coll)))", "problem": 56, "user": "4e6defcc535d5021c1a895f8"}, {"code": "#(remove nil? ((partial (fn x [s c]\n  (when c\n    (let [n (if (s (first c)) nil (first c))]\n      (cons n (x (conj s n) (next c)))))) #{}) %))", "problem": 56, "user": "4e6ebd4a535d5021c1a89610"}, {"code": "(fn f [xs]\n  (loop [xs xs\n         newxs []]\n    (cond (empty? xs) newxs\n          (some #(= % (first xs)) newxs) (recur (rest xs) newxs)\n          :else (recur (rest xs) (conj newxs (first xs))))))", "problem": 56, "user": "4e96557d535dbda64a6f6b43"}, {"code": "(fn [coll]\n  (let [s (into #{} coll)\n\t      idxs (map #(.indexOf coll %) s)]\n\t  (into [] (map #(second %) (sort (zipmap idxs (into [] s)))))))", "problem": 56, "user": "4db045b5838c48654951d9be"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "4db016af838c48654951d9b9"}, {"code": "(fn [seq]\n  (loop [s seq ut []]\n    (if (empty? s)\n      ut\n      (let [el (first s)]\n        (recur (remove #(= el %) s) (conj ut el))))))", "problem": 56, "user": "4e955b95535dbda64a6f6b33"}, {"code": "(fn dis [x] ( reduce #(if (contains? (set %1) %2)  %1 (conj %1 %2 ) ) [] x  ))", "problem": 56, "user": "4e8d5edd535d65386fec2134"}, {"code": "#(loop [s %, seen #{}, res []]\r\n  (if (empty? s)\r\n     res\r\n     (let [v (first s)\r\n           seen? (seen v)]\r\n     (recur (rest s) (conj seen v) (if seen? res (conj res v))))))", "problem": 56, "user": "4db92654535d1e037afb21a0"}, {"code": "(fn distinct-1 [s]\n  (let [f (fn [ret el] (if (some #{el} ret) ret (conj ret el)))]\n    (reduce f [] s)))", "problem": 56, "user": "4e5867d1535d8a8b8723a291"}, {"code": "#(apply list (java.util.LinkedHashSet. %))", "problem": 56, "user": "4e951ce5535dbda64a6f6b2e"}, {"code": "(fn [xs]\r\n  (loop [coll xs, st #{}, res []]\r\n    (if (empty? coll) res\r\n        (let [c (first coll)]\r\n          (if (st c)\r\n            (recur (rest coll) st res)\r\n            (recur (rest coll) (conj st c) (conj res c)))))))", "problem": 56, "user": "4e994541535dbda64a6f6b64"}, {"code": "(fn [mvet]  \n    (->\n      (reduce\n        (fn [ret n] \n          (let [ x ret\n                 y (filter #(= % n) ret) ]\n             (if (empty? y)\n               (cons n x)\n               x\n             )\n           )\n        )\n        '()\n        mvet\n      )\n      reverse\n      vec\n    )\n  )", "problem": 56, "user": "4e8b73e4535d65386fec2120"}, {"code": "#(first\n     (reduce\n       (fn [[acc s] x]\n         (if (s x) (list acc s)\n           (list (conj acc x) (conj s x))))\n       `([] #{}) %))", "problem": 56, "user": "4e9e0640535dbda64a6f6b91"}, {"code": "(fn [xs]\n  (loop [[x & xs] xs seen #{} acc []]\n    (let [acc (if-not (contains? seen x) (conj acc x) acc)\n          seen (conj seen x)]\n      (if (empty? xs)\n        acc\n        (recur xs seen acc)))))", "problem": 56, "user": "4e9fd521535d7eef3080729a"}, {"code": "(fn [c]\n    (map first\n      (sort-by val\n        (into {} (reverse (map-indexed #(vector %2 %) c))))))", "problem": 56, "user": "4ea09fa4535d7eef308072aa"}, {"code": "#(letfn [\n  (my-distinct [s c f]\n    (if (empty? s)\n      c\n      (let [p (first s)]\n        (if (contains? f p)\n          (recur (rest s) c f)\n          (recur (rest s) (conj c p) (conj f p))))))]\n  (my-distinct % [] #{}))", "problem": 56, "user": "4e8f4f64535d65386fec2149"}, {"code": "reduce (fn [seen x] (if (some #{x} seen)\n                        seen\n                        (conj seen x)))\n[]", "problem": 56, "user": "4ea1b9e4535d7eef308072b8"}, {"code": "(fn[coll]\n    (let [step (fn step [xs seen]\n                   (lazy-seq\n                    ((fn [[f :as xs] seen]\n                      (when-let [s (seq xs)]\n                        (if (contains? seen f) \n                          (recur (rest s) seen)\n                          (cons f (step (rest s) (conj seen f))))))\n                     xs seen)))]\n      (step coll #{})))", "problem": 56, "user": "4e9e6bd6535dbda64a6f6b96"}, {"code": "(fn [xs]\r\n(loop [[x & more] xs\r\n       m []]\r\n(if (nil? x) m\r\n (recur more\r\n    (if (contains? (set m) x)\r\n        m\r\n        (conj m x))))))", "problem": 56, "user": "4ea09441535d7eef308072a7"}, {"code": "reduce\r\n#(if (some #{%2} %) % (conj % %2))\r\n[]", "problem": 56, "user": "4de8a7d7535d08e6dec9fdfe"}, {"code": "(fn [coll]\n  (loop [coll coll\n         acc []]\n   (let [me (first coll)]\n    (if (empty? coll)\n      acc\n      (recur (rest coll)\n        (if (some #(= % me) acc) acc (conj acc me)))))))", "problem": 56, "user": "4e9dafe1535dbda64a6f6b89"}, {"code": "#(apply vector (let [st (java.util.LinkedHashSet.)] (doseq [i %] (.add st i)) st))", "problem": 56, "user": "4ea67906535d7eef308072e4"}, {"code": "#(reduce\n  (fn [res nxt]\n    (if (contains? (set res) nxt)\n      res\n      (conj res nxt)\n    )\n  )\n  []\n  %\n)", "problem": 56, "user": "4ea57300535d7eef308072d5"}, {"code": "#(if (vector? (first %1)) \n   (drop-last %1) \n   (into [] (sort (set %1)))\n)", "problem": 56, "user": "4e7650c5535d324fb2983d68"}, {"code": "(fn [coll] (reduce #(if (not ((set %) %2)) (conj % %2) %) [] coll))", "problem": 56, "user": "4e976f79535dbda64a6f6b55"}, {"code": "(fn [s]\n  (letfn [(f [[s r] x]\n           (if (s x) [s r] [(conj s x) (conj r x)]))]\n    (second (reduce f [#{} []] s))\n   ))", "problem": 56, "user": "4ea41fc2535d7eef308072cb"}, {"code": "(fn [s]\n  (letfn\n      [(append-if-uniq [s e] (if (contains? (set s) e)\n                               s\n                               (concat s (list e))))]\n   (reduce append-if-uniq '() s)))", "problem": 56, "user": "4dbb0f2d535d1e037afb21b1"}, {"code": "(fn distinct-items [items]\r\n  (reduce (fn [x y] (if (nil? (some (fn [z] (= y z)) x)) (conj x y)\r\n                        x)) [] items))", "problem": 56, "user": "4e8ddf32535d65386fec213c"}, {"code": "(fn [s]\n    (loop [se s r []]\n      (cond\n        (nil? (seq se)) r\n        :else (if ((set r)(first se))\n                  (recur (rest se) r)\n                (recur (rest se) (conj r (first se)))))))", "problem": 56, "user": "4ea5e794535d7eef308072df"}, {"code": "(fn [l] ( \n  (fn f [res s l]\n    (if (empty? l) res\n      (let [h (first l)\n            r (rest l)]\n         ( if (nil? (get s h))\n           (f (conj res h) (conj s h) r)\n           (f res s r)\n         )\n       )\n    )\n  )\n[] #{} l))", "problem": 56, "user": "4e9d6a65535dbda64a6f6b87"}, {"code": "(fn [c]\n  (reduce\n    (fn [acc e]\n      (if (some #(= e %) acc)\n          acc\n        (conj acc e)))\n    [] c))", "problem": 56, "user": "4ead6418535d7eef3080731f"}, {"code": "#(first (reduce (fn [[acc seen] item]\n                  (if (contains? seen item)\n                    [acc seen]\n                    [(conj acc item) (conj seen item)]))\n                [[] #{}] %))", "problem": 56, "user": "4eae5fe4535d7eef30807325"}, {"code": "(fn dist[x]\n  (if (=(count(set x)) (count x))\n    x\n    (keys(group-by (set x) x))\n    )\n  )", "problem": 56, "user": "4e9def6b535dbda64a6f6b8f"}, {"code": "(fn[coll]\n  (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] coll))", "problem": 56, "user": "4dbd2aa3535d020aff1edf40"}, {"code": "(fn my-distinct [l]\n  (loop [l l acc [] s #{}]\n    (if (empty? l)\n      acc\n      (let [item (first l) b (contains? s item)]\n        (recur \n          (rest l) \n          (if (false? b) \n            (conj acc item) \n            acc)\n          (conj s item))))))", "problem": 56, "user": "4e9c81e8535dbda64a6f6b80"}, {"code": "(fn \n  [coll]\n    (let [step (fn step [xs seen]\n                   (lazy-seq\n                    ((fn [[f :as xs] seen]\n                      (when-let [s (seq xs)]\n                        (if (contains? seen f) \n                          (recur (rest s) seen)\n                          (cons f (step (rest s) (conj seen f))))))\n                     xs seen)))]\n      (step coll #{})))", "problem": 56, "user": "4eb0afed535d7eef3080733e"}, {"code": "#(:res (reduce (fn [d i]\n             (if (contains? (:seen d) i)\n               d\n               {:res (conj (:res d) i) :seen (conj (:seen d) i) }\n               ))\n         {:res [], :seen #{}} %))", "problem": 56, "user": "4e9b22e2535dbda64a6f6b74"}, {"code": "(fn [x]\n  (letfn [ (d [s acc]\n              (if (empty? s)\n                acc\n                (if (some #{(first s)} acc)\n                  (recur (rest s) acc)\n                  (recur (rest s) (concat acc [(first s)]))\n                )\n              )\n            ) ]\n    (d x [])\n  )\n)", "problem": 56, "user": "4dd1de4d535dae65d5c462d7"}, {"code": "reduce #(if (contains? (set %) %2) % (conj % %2)) []", "problem": 56, "user": "4eaede1f535d7eef30807329"}, {"code": "(fn [coll]\n    (loop [coll coll\n           answer []]\n      (cond\n       (nil? coll) answer\n       (some (set answer) (list (first coll))) (recur (next coll) answer)\n       :else (recur (next coll) (conj answer (first coll))))))", "problem": 56, "user": "4e89e939535d3e98b8023287"}, {"code": "(fn [seqn]\n  (loop [s seqn, occurs #{}, result []]\n    (if (empty? s)\n      result\n      (let [[hd & tl] s]\n        (if (contains? occurs hd)\n          (recur tl occurs result)\n          (recur tl (conj occurs hd) (conj result hd)))))))", "problem": 56, "user": "4ea4fe1f535d7eef308072cf"}, {"code": "(fn [xs]\n   (loop [ls xs, acc []]\n      (if (seq ls) \n          (if ((set acc) (first ls)) \n              (recur (rest ls) acc)\n              (recur (rest ls) (conj acc (first ls))))\n          acc)))", "problem": 56, "user": "4eb0a757535d7eef3080733d"}, {"code": "(fn dist [col]\n  (reduce \n    #(let [u (not (contains? (into #{} %1) %2))]\n      (if u (conj %1 %2) %1))\n   [] col))", "problem": 56, "user": "4eb01df4535d7eef30807337"}, {"code": "(fn [coll]\n  ((fn step [s existing]\n    (lazy-seq\n      (let [items (drop-while #(contains? existing %) s)]\n        (if (seq items)\n          (cons (first items) (step (rest items) (conj existing (first items))))\n        ))))\n  coll #{}))", "problem": 56, "user": "4eb1dd39535d7eef30807345"}, {"code": "#(loop [x % u [] s #{}]\n  (if-let [[y & z] x]\n    (if (s y)\n      (recur z u s)\n      (recur z (conj u y) (conj s y)))\n    u))", "problem": 56, "user": "4eb97b2e535dfed6da9c6d54"}, {"code": "(fn [c]\n  (reduce (fn [r x]\n    (if (some (partial = x) r)\nr\n(conj r x))) [] c))", "problem": 56, "user": "4eb27fad535d7eef3080734a"}, {"code": "(fn [s] (reduce #(if (contains? (set %1) %2) %1 (conj %1 %2)) (cons [] s)))", "problem": 56, "user": "4eabb245535d7eef30807319"}, {"code": "(fn [x]\n  (let [filtp (fn [y] (filter #(not= % (first y)) y))]\n    (loop [z x myseq []]\n      (if (zero? (count z)) myseq\n      (recur (filtp z) (conj myseq (first z)))))))", "problem": 56, "user": "4ea9b80c535d7eef30807306"}, {"code": "(fn [s]\n  (reduce #(if ((set %1) %2) %1 (conj %1 %2)) [] s))", "problem": 56, "user": "4ebc08a8535dfed6da9c6d7c"}, {"code": "reduce #(if (some (partial = %2) %) % (conj % %2)) []", "problem": 56, "user": "4e82f85d535db62dc21a62ce"}, {"code": "(fn dis\n  [coll]\n    (let [step (fn step [xs seen]\n                   (lazy-seq\n                    ((fn [[f :as xs] seen]\n                      (when-let [s (seq xs)]\n                        (if (contains? seen f) \n                          (recur (rest s) seen)\n                          (cons f (step (rest s) (conj seen f))))))\n                     xs seen)))]\n      (step coll #{})))", "problem": 56, "user": "4ea85846535d7eef308072f9"}, {"code": "(fn [s]\n  (loop [s s r [] c #{}]\n    (if (not (seq s))\n      r\n      (if (contains? c (first s))\n        (recur (rest s) r c)\n        (recur (rest s) (conj r (first s)) (conj c (first s)))))))", "problem": 56, "user": "4dbdc9da535d020aff1edf4c"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "4ec0c7ba535dfed6da9c6da4"}, {"code": "(fn [coll]\n  (first\n    (reduce\n      (fn [result-vec item]\n        (let [item-set (second result-vec)]\n          (if (contains? item-set item)\n            result-vec\n            [(conj (first result-vec) item) (conj (second result-vec) item)])))\n      [[] #{}]\n      coll)))", "problem": 56, "user": "4ec2fe3f535dcc7ae8597d4f"}, {"code": "reduce (fn [seen x] (if (some #{x} seen) seen (conj seen x))) []", "problem": 56, "user": "4ea0c284535d7eef308072ad"}, {"code": "(fn [s]\n  (first (reduce \n    (fn [[res se] item]\n      (if (se item)\n        [res se] \n        [(conj res item) (conj se item)]))\n        [[] #{}] s)))", "problem": 56, "user": "4ec34578535dcc7ae8597d51"}, {"code": "(fn f [s]\n  (if (= 1 (count s))\n    [(first s)]\n    (let [prev (f (butlast s))]\n      (if (some #(= (last s) %) prev)\n        prev\n        (conj prev (last s))))))", "problem": 56, "user": "4e8b98fc535d65386fec2124"}, {"code": "(fn re [a]\n  (loop [r [] s a]\n    (if (= (count s) 0)\n      r\n      (if (contains? (set r) (first s))\n        (recur r (rest s))\n        (recur (conj r (first s)) (rest s))\n      )\n    )\n  )\n)", "problem": 56, "user": "4e9de526535dbda64a6f6b8e"}, {"code": "(fn my-distinct [coll]\n  (loop [sx coll, seen []]\n    (if (empty? sx)\n      seen\n      (if (some #(= % (first sx)) seen)\n            (recur (rest sx) seen)\n            (recur (rest sx) (conj seen (first sx)))))))", "problem": 56, "user": "4e7263a1535d5021c1a8965f"}, {"code": "(fn [coll]\n  (letfn [(step [xs seen]\n  (when-let [[f & r] xs]\n\t\t(if (contains? seen f)\n      \t\t(recur r seen)\n      \t\t(cons f (step r (conj seen f))))))]\n\t\t(step coll #{})))", "problem": 56, "user": "4ec16c21535dfed6da9c6dac"}, {"code": "(fn [acol]\n  (letfn [(it [unique prev coll]\n    (if (empty? coll)\n        unique\n        (let [x (first coll)\n              xs (rest coll)]\n          (if (contains? prev x)\n            (recur unique prev xs)\n            (recur (conj unique x) \n                   (conj prev x) xs)))))]\n    (it [] #{} acol)\n))", "problem": 56, "user": "4eb9ce75535dfed6da9c6d5e"}, {"code": "reduce #(if (some #{%2} %1) %1 (conj %1 %2)) []", "problem": 56, "user": "4e9519b4535dbda64a6f6b2d"}, {"code": "(fn [coll]\n  (reduce #(if ((set %1) %2) %1 (conj %1 %2)) \n    [] (apply list coll)))", "problem": 56, "user": "4eb51942535d7eef30807365"}, {"code": "(fn [v]\n          (map first (sort-by last (let [indexedv (map-indexed (fn [idx itm] [itm idx]) v )]\n            (loop [ result {} col indexedv]\n              (if (empty? col)\n                   result\n                   (recur (if (contains? result (first (first col)))\n                               result\n                               (conj result (first col)))\n                          (rest col))\n           ))))))", "problem": 56, "user": "4ec5bec6535d6d7199dd36b3"}, {"code": "#(second \n  (reduce (fn [m i]\n             (if ((first m) i) \n                m \n                (map conj m [i i]))) \n            [#{} []] %))", "problem": 56, "user": "4ec74de3535d6d7199dd36df"}, {"code": "(fn [xs]\n  (loop [ds #{} os [] xs xs]\n    (if (seq xs)\n      (let [x (first xs)]\n        (if (contains? ds x)\n          (recur ds os (rest xs))\n          (recur (conj ds x) (conj os x) (rest xs))))\n      os)))", "problem": 56, "user": "4ed06ea6535d44c135fd68c4"}, {"code": "#(reduce\n    (fn [r i] \n      (if ((set r) i) \n        r\n      (conj r i)))\n    [] %)", "problem": 56, "user": "4e6f578c535d5021c1a8961b"}, {"code": "(fn my-distinct [s]\n  (loop [s s acc [] seen #{}]\n    (let [x (first s)]\n      (cond\n        (empty? s) acc\n        (contains? seen x) (recur (rest s) acc seen)\n        :else (recur (rest s) (conj acc x) (conj seen x))))))", "problem": 56, "user": "4ed188c8535d44c135fd68cf"}, {"code": "(fn d [s x] (if (empty? x) s (d (if (some #(= (first x) %) s) s (conj s (first x))) (rest x)))) []", "problem": 56, "user": "4ecbb249535df97575fdabdf"}, {"code": "(fn [xs]\n  (first\n    (reduce\n      #(let [v %2, [l s :as p] %]\n        (if (s v)\n          p\n          (list (conj l v) (conj s v))))\n      [[] #{}]\n      xs)))", "problem": 56, "user": "4ec07699535dfed6da9c6da2"}, {"code": "#(loop [x % r []]\r\n  (if (empty? x)    \r\n    r (recur (rest x) (if (contains? (set r) (first x)) r (conj r (first x))))))", "problem": 56, "user": "4eb44d78535d7eef30807360"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "4e1350af535d04ed9115e7d8"}, {"code": "(fn [l]\n  (loop [ret []\n         tset #{}\n         cur l]\n         (let [it (first cur)\n               cts (contains? tset it)]\n              (if (empty? cur) ret\n                (recur (if cts ret (conj ret it))\n                       (if cts tset (conj tset it))\n                       (rest cur))))))", "problem": 56, "user": "4ec21058535dfed6da9c6dba"}, {"code": "#(let [k (keys (group-by identity %))]\n  (if (> (count %) 10) (sort k) k))", "problem": 56, "user": "4ed2b168535d44c135fd68dd"}, {"code": "(fn [c] (reduce #(if ((set %1) %2) %1 (conj %1 %2)) [] c))", "problem": 56, "user": "4eb2eae5535d7eef30807351"}, {"code": "reduce (fn [a b] (if (some #{b} a) a (conj a b))) []", "problem": 56, "user": "4ebb78a2535dfed6da9c6d70"}, {"code": "(fn my-distinct [coll]\n  ((fn f [coll found]\n     (if (seq coll)\n       (let [ne (first coll)]\n         (if (contains? found ne)\n           (recur (rest coll) found)\n           (lazy-seq\n             (cons ne (f (rest coll) (conj found ne))))))))\n     coll #{}))", "problem": 56, "user": "4ec75077535d6d7199dd36e0"}, {"code": "(fn [s]\n   (loop [visited #{}\n          items s\n          result []]\n     (if-not (seq items)\n       result\n       (if (contains? visited (first items))\n         (recur visited (rest items) result)\n         (recur (conj visited (first items))\n                (rest items)\n                (conj result (first items)))))))", "problem": 56, "user": "4e59b02c535d8a8b8723a2a2"}, {"code": "#(reduce (fn [x y] (if (contains? (set x) y)\n                     x\n                     (conj x y))) [] %)", "problem": 56, "user": "4e89ff3d535d3e98b802328a"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []\n; Sweet! I actually solved one in a manner that pleases me!\n\n; this one *seemed* trivial, like it should just be\n;    reduce conj #{}", "problem": 56, "user": "4ebb20c0535dfed6da9c6d6f"}, {"code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "problem": 56, "user": "4e8a460e535d65386fec2109"}, {"code": "reduce #(if (some {%2 1} %) % (conj % %2)) []", "problem": 56, "user": "4e8f1ac6535d65386fec2146"}, {"code": "(fn my-dist [g]\n  (letfn [(getpos [i] (some (fn [x] (if (= i (second x)) (first x) nil)) (apply list (apply hash-map (interleave (range (count g)) g)))))]\n  (sort #(compare (getpos %1) (getpos %2)) (apply list (set g)))))", "problem": 56, "user": "4ea7999e535d7eef308072ee"}, {"code": "(partial (fn f [acc x] (if (empty? x) () (if (contains? acc (first x)) (f acc (rest x)) (conj (f (conj acc (first x)) (rest x)) (first x))))) #{})", "problem": 56, "user": "4ed94d69535d10e5ff6f5303"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "4ed69ea4535d10e5ff6f52e3"}, {"code": "(fn distict [coll]\n  (loop [coll coll\n         return-coll []]\n    (if (seq coll)\n      (recur (remove #(= % (first coll)) coll)\n             (conj return-coll (first coll)))\n      return-coll)))", "problem": 56, "user": "4eda7cc3535d10e5ff6f530e"}, {"code": "(fn distct [xs]\n  (letfn [(in? [x xs] (some #(= x %) xs))]\n\t(reduce\n\t\t(fn [acc n]\n\t\t\t(if (in? n acc)\n\t\t\t\tacc\n\t\t\t\t(conj acc n)\n\t\t\t)\n\t\t)\n\t\t[]\n\t\txs\n\t)\n\t)\n)", "problem": 56, "user": "4ed6238d535d10e5ff6f52de"}, {"code": "#(if (= % (range 50)) (range 50) (keys (group-by identity %)))", "problem": 56, "user": "4edab806535d10e5ff6f5311"}, {"code": "(fn [s] (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] s))", "problem": 56, "user": "4ed292ac535d44c135fd68d9"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "4ed0e139535d44c135fd68c7"}, {"code": "reduce (fn [a b] (if (some #{b} a) a (conj a b))) []", "problem": 56, "user": "4ede8789535d10e5ff6f5337"}, {"code": "(fn [s]\n  (reduce \n    #(if (contains? (set %1) %2)\n        %1 \n        (conj %1 %2))\n    [] s))", "problem": 56, "user": "4ec70f26535d6d7199dd36dd"}, {"code": ";; This is klunky.  There's a much cleaner function solution that\n;; almost works, except that group-by changes the ordering in the\n;; last test case (number of branches/node for maps?)\n;;\n(fn [x]\n  (loop [cx x, tmap {}, result []]\n    (if (empty? cx)\n      result\n      (let [fcx (first cx)]\n        (if (contains? tmap fcx)\n          (recur (rest cx) tmap result)\n          (recur (rest cx) (assoc tmap fcx 1) (conj result fcx)))))))", "problem": 56, "user": "4ec5cdb0535d6d7199dd36b8"}, {"code": "(fn [x] (loop [s x r []]\n             (if (empty? s)\n               r\n               (if (contains? (set r) (first s))\n                 (recur (rest s) r)\n                 (recur (rest s) (conj r (first s)))))))", "problem": 56, "user": "4ebef65e535dfed6da9c6d9b"}, {"code": "(fn [l]\n  (reduce (fn [a e] (if (some #{e} a) a (conj a e))) [] l))", "problem": 56, "user": "4ede8e1d535d10e5ff6f5339"}, {"code": "#(loop [xs % seen #{} acc ()]\n   (cond (empty? xs) (reverse acc)\n         (seen (first xs)) (recur (rest xs) seen acc)\n         :else (recur (rest xs)\n                      (conj seen (first xs))\n                      (cons (first xs) acc))))", "problem": 56, "user": "4ee3b586535d10e5ff6f5371"}, {"code": "(fn [coll]\n  (loop [ret [], coll coll, acc #{}]\n    (if-not (seq coll)\n      ret\n      (let [f (first coll)\n            seenit (contains? acc f)\n            nret (if seenit ret (conj ret f))]\n        (recur nret (rest coll) (conj acc f))))))", "problem": 56, "user": "4edd038c535d10e5ff6f5327"}, {"code": "#((fn f [[x & r :as c] s]\n    (if (nil? c)\n      ()\n      (if (s x)\n        (f r s)\n        (cons x (f r (conj s x)))))\n)\n    % #{})", "problem": 56, "user": "4ed6ac40535d10e5ff6f52e4"}, {"code": "(fn [seq]\n    (reduce (fn [a b]\n      (if (not (some #(= b %) a))\n        (conj a b) a)) [] seq))", "problem": 56, "user": "4edd4b77535d10e5ff6f5328"}, {"code": "(fn [s] (reduce #(if (some #{%2} %) % (conj % %2)) [] s))", "problem": 56, "user": "4eb13d60535d7eef3080733f"}, {"code": "(fn [c]\n  (reduce\n   #(if (some #{%2} %1)\n      %1\n      (conj % %2))\n   [] c))", "problem": 56, "user": "4ec28d86535dfed6da9c6dbc"}, {"code": "#(reduce \n  (fn [r x] (if (some #{x} r) r (conj r x)))\n  [] \n  %)", "problem": 56, "user": "4ee7ef87535d93acb0a66872"}, {"code": "(fn [sq]\r\n  (letfn [(hp [acc rsq]\r\n            (cond\r\n              (empty? rsq) acc\r\n              :else\r\n                (hp (conj acc (first rsq))\r\n                    (remove #(= (first rsq) %) rsq))))]\r\n    (hp [] sq)))", "problem": 56, "user": "4ee40938535d10e5ff6f5375"}, {"code": "(fn distinct*\n  ([coll] (distinct* coll #{}))\n  ([[head & tail :as coll] cache]\n     (when (seq coll)\n       (if (nil? (cache head))\n         (cons head (distinct* tail (conj cache head)))\n         (distinct* tail (conj cache head))))))", "problem": 56, "user": "4dda44f2535d02782fcbe9f1"}, {"code": "#(reduce (fn [s x] (if (some #{x} s) s (conj s x))) [] %)", "problem": 56, "user": "4e65027c535d8ccf87e9fe6e"}, {"code": "(fn [s] (reduce (fn [acc i] (if (nil? (some (partial = i) acc)) (conj acc i) acc)) [] s))", "problem": 56, "user": "4eb2e6ca535d7eef3080734f"}, {"code": "(fn f [l]\n  (reduce #(if ((set %) %2) % (conj % %2)) [] l))", "problem": 56, "user": "4ee82539535d93acb0a66878"}, {"code": "#(reverse(reduce \n  (fn [s n] \n    (if (not-any? (fn [m] (= n m)) s)\n      (conj s n)\n      s))\n  '()\n    %))", "problem": 56, "user": "4ee82223535d93acb0a66877"}, {"code": "(fn [coll]\n  (let [step (fn step[coll v] \n               (when-let [[f & r] coll]\n               (if (contains? v f)\n                 (recur r (conj v f))\n                 (cons f (step r (conj v f))))))]\n              \n  (step coll #{})))", "problem": 56, "user": "4edf5dc6535d10e5ff6f5340"}, {"code": "(fn dist [s]\n  (seq (reduce\n    #(if (some #{%2} %1) %1 (conj %1 %2))\n    [] s)))", "problem": 56, "user": "4ea1ecfa535d7eef308072bb"}, {"code": "reduce #(if ((set %) %2) % (conj % %2) ) []", "problem": 56, "user": "4ee7d177535d93acb0a6686f"}, {"code": "(partial reduce\n           (fn [res item]\n             (if (some #{item} res)\n               res\n               (conj res item)))\n           [])", "problem": 56, "user": "4e6a0667535d8ccf87e9fe9e"}, {"code": "(fn [s]\n  (loop [acc [] ins #{} r s]\n    (cond\n      (-> r seq not) acc\n      (ins (first r)) (recur acc ins (rest r))\n      :else (recur (conj acc (first r)) \n                    (conj ins (first r))\n                    (rest r)))))", "problem": 56, "user": "4ef0a38e535dced4c769f20b"}, {"code": "(fn rm-dups [s]\r\n  (if (seq s)\r\n    (concat (list (first s)) (rm-dups (remove #(= (first s) %) (rest s))))\r\n    s))", "problem": 56, "user": "4ee9d697535d93acb0a66895"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "4ee6400c535d93acb0a6685b"}, {"code": "(fn my-distinct [coll]\n  (\n    (fn impl\n      [xs seen]\n      (if (empty? xs)\n        nil\n        (if (contains? seen (first xs))\n          (impl (rest xs) seen)\n          (cons (first xs) (impl (rest xs) (conj seen (first xs))))))\n    )   \n    coll #{} \n  )\n)", "problem": 56, "user": "4ef0a39b535dced4c769f20c"}, {"code": "(fn distinct-items\n  [coll & res]\n  (if (empty? coll)\n    (reverse res)\n    (recur (remove #{(first coll)} coll) (cons (first coll) res))))", "problem": 56, "user": "4e3bcccd535deb9a81d77f56"}, {"code": "reduce #(if ((set %) %2) % (conj % %2)) []", "problem": 56, "user": "4db091b7838c48654951d9c2"}, {"code": "reduce #(if ((set %) %2) % (conj % %2)) []", "problem": 56, "user": "4ef2d243535dced4c769f221"}, {"code": "reduce #({%2 %} ((set %) %2) (conj % %2)) []", "problem": 56, "user": "4ef49c2c535dced4c769f238"}, {"code": "(fn [xs]\n  (second\n    (reduce\n      (fn [[seen result] x]\n        (if (seen x) \n          [seen result]\n          [(conj seen x) (conj result x)]))\n      [#{} []]\n      xs)))", "problem": 56, "user": "4edecdae535d10e5ff6f533c"}, {"code": "#(loop [ret [] my-set #{} v %]\n   (if (empty? v)\n\t     ret\n\t     (let [n (first v)]\n\t\t  (recur\n\t\t   (if (get my-set n)\n\t\t       ret\n\t\t       (conj ret n))\n\t\t   (conj my-set n)\n\t\t   (next v)))))", "problem": 56, "user": "4e8d5911535d65386fec2133"}, {"code": "reduce #(if ((set %) %2) % (conj % %2)) []", "problem": 56, "user": "4ef77c82535dced4c769f253"}, {"code": "reduce (fn[a e] (if (some #(= e %) a) a (conj a e))) []", "problem": 56, "user": "4eef0828535d305ff5cb7f18"}, {"code": "(fn dist [coll]\n  (let [[x & xs] coll]\n    (if\n      (= x nil) nil\n      (conj (dist (remove #(= x %) xs)) x)\n      )\n    )\n  )", "problem": 56, "user": "4ecfa05c535d44c135fd68b9"}, {"code": "#(map first (sort-by val (apply merge (reverse (map-indexed (fn [idx itm] {itm idx}) %)))))", "problem": 56, "user": "4eecdd66535d93acb0a668b9"}, {"code": "(fn [s] (reduce (fn [arr item]\n  \t (if (some #(= item %) arr)\n\t\t     arr\n\t\t     (conj arr item)))\n\t\t      [] s))", "problem": 56, "user": "4ec5d62c535d6d7199dd36ba"}, {"code": "reduce \n             #(if (some #{%2} %) \n                 % \n                 (conj % %2))\n         []", "problem": 56, "user": "4e599577535d8a8b8723a29f"}, {"code": "(fn find-distinct [coll]\n  (letfn [(f [[item & rest :as coll] found]\n            (when (seq coll)\n              (lazy-seq\n               (if (found item)\n                 (f rest found)\n                 (cons item (f rest (conj found item)))))))]\n    (f coll #{})))", "problem": 56, "user": "4ec5aa1f535d6d7199dd36b0"}, {"code": "(fn my-distinct [s]\r\n  (loop [results []\r\n\t\t\tsp s]\r\n\t\t(if (empty? sp)\r\n\t\t\tresults\r\n\t\t\t(recur\r\n\t\t\t\t(if (some #(= (first sp) %) results)\r\n\t\t\t\t\tresults\r\n\t\t\t\t\t(conj results (first sp)))\r\n\t\t\t\t(next sp)))))", "problem": 56, "user": "4efb92ce535dced4c769f27a"}, {"code": "(fn my-distinct [coll]\r\n  \t(loop [res [] c coll]\r\n\t\t\t(if (empty? c) \r\n\t\t\t\tres\r\n\t\t\t\t(recur  \r\n\t\t\t\t\t(if ((set res) (first c)) res\r\n\t\t\t\t(conj res (first c))) \r\n\t\t\t\t(rest c)))))", "problem": 56, "user": "4ecf1f51535d1f5ad70dba3a"}, {"code": "#(second (reduce (fn [[seen? ys] x] [(conj seen? x) (if (seen? x) ys (conj ys x))]) [#{} []] %))", "problem": 56, "user": "4ef8d47c535dced4c769f261"}, {"code": "(fn [xs]\n  (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] xs))", "problem": 56, "user": "4efcac3a535de96065cf507e"}, {"code": "(fn mydistinct2 [xs]\n  (cond (empty? xs) '()\n        (some #(= (last xs) %) (butlast xs)) (mydistinct2 (butlast xs))\n        true (concat (mydistinct2 (butlast xs)) (list (last xs)))))", "problem": 56, "user": "4ef6f5ea535dced4c769f250"}, {"code": "(fn distinct* [xs]\n  (if (empty? xs)\n    xs\n    (let [h (first xs) t (rest xs)]\n      (cons h (distinct* (filter #(not (= h %)) t))))))", "problem": 56, "user": "4ef41f26535dced4c769f230"}, {"code": "(fn [xs]\n  (loop [[x & xs] xs, xs2 [], s #{}]\n    (if-not x xs2\n      (recur xs\n             (if (contains? s x) xs2\n                 (conj xs2 x))\n             (conj s x)))))", "problem": 56, "user": "4ee67d74535d93acb0a66861"}, {"code": "reduce #(if (some #{%2} %1) %1 (conj %1 %2)) []", "problem": 56, "user": "4effb663535dcb61093f6a2e"}, {"code": "(fn [s]\r\n   (loop [[x & xs :as xss] s acc [] seen #{}]\r\n     (if (seq xss)\r\n       (if (contains? seen x)\r\n         (recur xs acc seen)\r\n         (recur xs (conj acc x) (conj seen x)))\r\n       acc)))", "problem": 56, "user": "4ef1ee67535dced4c769f219"}, {"code": "(fn [coll]\n  (loop [c coll seen #{} accvec []]\n    (cond\n     (empty? c) accvec\n     (seen (first c)) (recur (rest c) seen accvec)\n     :else (recur (rest c) (conj seen (first c)) (conj accvec (first c))))))", "problem": 56, "user": "4efec33f535dcb61093f6a2a"}, {"code": "reduce #(if (some {%2 1} %) % (conj % %2)) []", "problem": 56, "user": "4eb30868535d7eef30807355"}, {"code": "(fn [coll]\n  (loop [res [] coll coll]\n    (if (empty? coll)\n      res\n      (if (some #{(first coll)} res)\n        (recur res (rest coll))\n        (recur (conj res (first coll)) (rest coll))))))", "problem": 56, "user": "4ef4c1ff535dced4c769f23e"}, {"code": "(fn dedup [[x & xs]]\n  (when x\n    (cons x (dedup (filter #(not (= x %)) xs)))))", "problem": 56, "user": "4ef0eaef535dced4c769f211"}, {"code": "(fn [s]\n  (loop [s s u [] c #{}]\n    (if (empty? s)\n        u\n        (if (get c (first s))\n            (recur (rest s) u c)\n            (recur (rest s) (conj u (first s)) (conj c (first s)))))))", "problem": 56, "user": "4f03d0fe535dcb61093f6b6d"}, {"code": "(fn [s] (reduce #(if ((set %) %2) %\n                      (conj % %2))\n                 []\n                 s))", "problem": 56, "user": "4ee88bfb535d93acb0a66881"}, {"code": "(fn unq [x]\n  ((fn unique [lst seen flt]\n    (let [f (first lst)]\n      (cond \n        (empty? lst) flt\n        (contains? seen f) \n          (unique (rest lst) seen flt)\n        true\n          (unique \n            (rest lst)\n            (conj seen f)\n            (conj flt f)))))\n    x #{} []))", "problem": 56, "user": "4f03818e535dcb61093f6b00"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "4f031eac535dcb61093f6a67"}, {"code": "#(loop [s #{} [x & r] %  v []]\r\n           (if x\r\n               (if (s x)\r\n                   (recur s r v)\r\n                   (recur (conj s x) r (conj v x)))\r\n               v))", "problem": 56, "user": "4f043ed1535dcb61093f6bb4"}, {"code": "(fn dis [s]\n  (letfn [(dis1 [acc r]\n    (cond \n      (empty? r) acc\n      (contains? (set acc) (first r)) (recur acc (rest r))\n      :else (recur (conj acc (first r)) (rest r))))]\n  (dis1 [] s)))", "problem": 56, "user": "4f0397ee535dcb61093f6b30"}, {"code": "reduce #(if ((set %) %2) %(conj % %2)) []", "problem": 56, "user": "4f03857e535dcb61093f6b0d"}, {"code": "#(loop [[f & r :as i] % s #{} rr ()]\n  (let \n    [fr (if (s f) rr (cons f rr))\n    ss (-> s (conj f) set)]\n    (if (seq i)\n      (recur r ss fr)\n      (reverse rr))))", "problem": 56, "user": "4ef355e3535dced4c769f228"}, {"code": "(fn uno* [l]\n  (loop [l1 l s #{} res []]\n    (let [x1 (first l1)]\n    (if (empty? l1) res\n      (if (contains? s x1)\n       (recur (rest l1) s res)\n       (recur (rest l1)\n        (conj s x1) (conj res x1)))))))", "problem": 56, "user": "4f04a06d535dcb61093f6bd9"}, {"code": "reduce #(if \n  ((set %) %2)\n  % \n  (conj % %2)\n) []", "problem": 56, "user": "4f01c938535dcb61093f6a39"}, {"code": "(fn [coll] \n  (loop [s #{} c coll n []]\n    (if (empty? c) n\n      (if (contains? s (first c)) \n        (recur s (rest c) n)\n        (recur (conj s (first c)) (rest c) (conj n (first c)))))))", "problem": 56, "user": "4f03822f535dcb61093f6b03"}, {"code": "(fn dedup [xs]\n  (let [x (first xs)\n        xss (rest xs)]\n    (if (empty? xs) nil\n        (cons x \n              (dedup (remove #(= x %) xss))))))", "problem": 56, "user": "4ee82ce9535d93acb0a6687a"}, {"code": "(fn prob-0056\n  [xs]\n  (let [red (fn [lhs x]\n              (let [bld  (first lhs)\n                    seen (second lhs)]\n                (if (contains? seen x) lhs [(cons x bld) (conj seen x)]))) ]\n                \n    (reverse (first (reduce red [[], #{}] xs)))))", "problem": 56, "user": "4f047c07535dcb61093f6bcd"}, {"code": "(fn [in] (reduce #(if ((set %) %2) % (conj % %2)) [] in ))", "problem": 56, "user": "4f04b66b535dcb61093f6bdd"}, {"code": "#(loop [[h & t] % r []]\n           (if (nil? h) r\n               (recur t\n                      (if (some #{h} r) r\n                          (conj r h)))))", "problem": 56, "user": "4db8f6c4535d1e037afb219e"}, {"code": "(fn find-distinct [l]\r\n    (reverse (loop [l (seq l) seen {} f '()]\r\n      (if (empty? l)\r\n        f\r\n        (if (contains? seen (first l))\r\n          (recur (rest l) seen f)\r\n          (recur (rest l) (assoc seen (first l) 1) (cons (first l) f)))))))", "problem": 56, "user": "4f039524535dcb61093f6b2c"}, {"code": "reduce #(if ((set %) %2) % (conj % %2)) []", "problem": 56, "user": "4ee9ddb8535d93acb0a66896"}, {"code": "(fn [l]\n  (first\n    (reduce \n      (fn [[_ s :as acc] x] \n        (map (if (s x) identity #(conj % x)) acc))\n      [[] #{}] l)))", "problem": 56, "user": "4f06dcad535dcb61093f6c16"}, {"code": "#(reduce (fn [acc i] (if (some #{i} acc) acc (conj acc i)))\n   [] %)", "problem": 56, "user": "4f0a4e7e535d0136e6c222f4"}, {"code": "(fn f[x & y]\n  (if (empty? x)\n    y\n    (recur (rest x)\n           (if (some #(= (first x) %) y)\n             y\n             (concat y (list (first x)))))))", "problem": 56, "user": "4efb2fd7535dced4c769f274"}, {"code": "(fn [s]\n  (first\n    (reduce\n      (fn [[ret found] i]\n        (let [ch (if (found i) identity #(conj % i))]\n          [(ch ret) (ch found)]))\n      [[] #{}]\n      s)))", "problem": 56, "user": "4f050dec535dcb61093f6bef"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "4f047542535dcb61093f6bc7"}, {"code": "(fn [in-seq]\n  (loop [local-seq in-seq result {:vals []}]\n    (if (empty? local-seq) \n        (result :vals)\n        (recur (rest local-seq) \n               (if (nil? (result (first local-seq)))\n                   (assoc (assoc result (first local-seq) true) \n                          :vals (conj (result :vals) (first local-seq)))\n                   result)))))", "problem": 56, "user": "4ef4ab95535dced4c769f23b"}, {"code": "#(if (= (type %) clojure.lang.LazySeq) % (vec (map first (group-by identity %))))", "problem": 56, "user": "4ed2dd98535d44c135fd68e2"}, {"code": "(fn [coll]\n  (reduce \n   #(if (some (fn [x] (= x %2)) %)\n         % \n      \t(conj % %2)) \n  [] coll))", "problem": 56, "user": "4f036d9b535dcb61093f6ac1"}, {"code": "(fn [coll]\n  (\n    (fn [coll out seen]\n      (if-let [s (seq coll)]\n        (if (contains? seen (first s))\n           (recur (next s) out seen)\n           (recur (next s) (conj out (first s)) (conj seen (first s)))\n        )\n        out\n      )\n    )\n    coll [] #{}\n  )\n)", "problem": 56, "user": "4f03154a535dcb61093f6a58"}, {"code": "(fn [l]\n  (reduce\n    #(if (some #{%2} %1)\n        %1\n        (conj %1 %2))\n    []\n    l))", "problem": 56, "user": "4f04f847535dcb61093f6beb"}, {"code": "reduce #(if (every? (partial not= %2) %) (conj % %2) %) []", "problem": 56, "user": "4ee67364535d93acb0a6685f"}, {"code": "reduce (fn [r x] (if (contains? (set r) x) r (conj r x))) []", "problem": 56, "user": "4f067029535dcb61093f6c12"}, {"code": "reduce #(if (contains? (set %) %2) % (conj % %2)) []", "problem": 56, "user": "4f062d4a535dcb61093f6c08"}, {"code": "(fn [coll]\n  (reduce\n   (fn [a b]\n     (if ((set a) b) a (conj a b)))\n   [] coll))", "problem": 56, "user": "4ea3826c535d7eef308072c6"}, {"code": "(fn [xs]\n  ((reduce \n    (fn [data item] (let [{:keys [seen out]} data]\n        (if (get seen item)\n          data\n          {:seen (conj seen item)\n           :out (conj out item)})))\n    {:seen #{} :out []} xs)\n  :out))", "problem": 56, "user": "4f0bc223535d0136e6c22307"}, {"code": "(fn [col]\n  (loop [l col uniq [] seen #{}]\n    (if (empty? l) uniq\n      (let [f (first l)]\n        (recur \n          (rest l) \n          (if (seen f) uniq (conj uniq f))\n          (conj seen f))))))", "problem": 56, "user": "4f03ac2d535dcb61093f6b4a"}, {"code": "(fn dist [s]\n  (loop [s s has #{} res []]\n    (if (not (seq s))\n      res\n      (let [hd (first s)]\n      (if (has hd)\n        (recur (rest s) has res)\n        (recur (rest s) (conj has hd) (conj res hd)))))))", "problem": 56, "user": "4f0ef874535d0136e6c22328"}, {"code": "reduce #(if ((set %) %2) % (conj % %2)) []", "problem": 56, "user": "4eeaf88f535d93acb0a668a3"}, {"code": "#(letfn [(delete [e [x & xs]]\r\n            (if (nil? x)\r\n               []\r\n\t             (if (= x e)\r\n\t\t              (delete e xs)\r\n\t\t              (cons x (delete e xs)))))\r\n         (remove-dups [[x & xs]]\r\n            (if (nil? x)\r\n\t\t           []\r\n\t\t           (cons x (remove-dups (delete x xs)))))]\r\n(apply vector (remove-dups %1)))", "problem": 56, "user": "4e273301535deb9a81d77ef7"}, {"code": "reduce #(if (some (partial = %2) %1) %1 (conj %1 %2)) []", "problem": 56, "user": "4f0f174c535d0136e6c22330"}, {"code": "(fn [s] (loop [s s res [] already (hash-set)] (if (seq s)\n   (recur (rest s) \n          (if (contains? already (first s)) \n                  res (conj res (first s)))\n          (conj already (first s))) res)))", "problem": 56, "user": "4efd98fa535de96065cf5086"}, {"code": "#(reduce \n    (fn [acc it]\n      (if (some (partial = it) acc) \n        acc\n        (conj acc it))) [] %)", "problem": 56, "user": "4e8a0d5d535d3e98b802328e"}, {"code": "#(second (reduce \n  (fn [[elems acc] e] \n    (if (contains? elems e) \n        [elems acc]\n        [(conj elems e) (conj acc e)]))\n  [#{} []] %))", "problem": 56, "user": "4f13047d535d64f60314642c"}, {"code": "(fn my-distinct \n    ([xs] (my-distinct #{} xs))\n    ([d xs] (lazy-seq\n        (when-first [x xs] \n            (if (contains? d x)  \n                (my-distinct d (rest xs))\n                (cons x (my-distinct (conj d x) (rest xs))))))))", "problem": 56, "user": "4f0660ee535dcb61093f6c0d"}, {"code": "#(loop [n 0, s {}, r '()]\n    (if (= (count %) n)\n      r\n      (let [x (nth % n)]\n        (recur (inc n) (assoc s x (get s x true)) (if (= nil (get s x))\n                                                     (concat r (list x))\n                                                     r)))))", "problem": 56, "user": "4f038567535dcb61093f6b0c"}, {"code": "(fn dist [coll]\n    (let [x (first coll) xs (rest coll) n (filter #(not= x %) xs)]\n        (if (empty? n) (list x) (cons x (dist n)))))", "problem": 56, "user": "4f0e995e535d0136e6c22326"}, {"code": "(fn [i]\n  (loop [d [] s i]\n    (if (empty? s) d\n    (recur \n      (conj d (first s)) \n      (remove #(= (first s) %) s)))))", "problem": 56, "user": "4f0446f9535dcb61093f6bb8"}, {"code": "#(reduce (fn [acc x] (if (some #{x} acc)\r\n                       acc\r\n                       (conj acc x)))\r\n         []\r\n         %)", "problem": 56, "user": "4ebcb8ff535dfed6da9c6d8a"}, {"code": "(fn [x]\n     (loop [x x result []]\n\t      (if (empty? x)\n\t       result\n\t       (recur (rest x)\n\t\t      (if-not (some #(= (first x) %) result)\n\t\t\t      (conj result (first x))\n\t\t\t      result)))))", "problem": 56, "user": "4f066916535dcb61093f6c10"}, {"code": "(fn my-distinct [coll]\n  (loop [c coll result []]\n    (if (empty? c)\n      result\n      (recur\n       (rest c)\n       (if (nil? (some #{(first c)} result)) (conj result (first c)) result)))))", "problem": 56, "user": "4e95a440535dbda64a6f6b37"}, {"code": "(fn my-distinct [coll]                                                                                                                       \r\n    (reduce (fn [d x] (if-not (some #{x} d) (conj d x) d))                                                                                     \r\n            [] coll))", "problem": 56, "user": "4f149e0f535d64f60314643d"}, {"code": "(fn [s] \n  (reduce #(if (some #{%2} %) % (conj % %2)) [] s))", "problem": 56, "user": "4ede361a535d10e5ff6f5332"}, {"code": "(fn mydist [s]\n    (reduce (fn [l r]\n                (if (some #(= r %) l)\n                    l\n                    (conj l r))) [] s))", "problem": 56, "user": "4f128865535d64f603146428"}, {"code": "#(sort-by (fn [i] (.indexOf % i)) (map first (group-by identity %)))", "problem": 56, "user": "4f1b92d1535d64f60314647b"}, {"code": "#(second (reduce\n  (fn [[s r] i] [(conj s i) (if (s i) r (conj r i))])\n  [#{} []]\n  %))", "problem": 56, "user": "4f1b0ab3535d64f603146474"}, {"code": "(fn [xs]\n  (loop [acc [] x (first xs) xs (rest xs)]\n    (if (nil? x)\n      acc\n      (recur (if (some #{x} acc)\n                acc (conj acc x))\n        (first xs) (rest xs)))))", "problem": 56, "user": "4dafa380edd6309eace4d17c"}, {"code": "(fn [col] (last (reduce (fn [r i] (if (contains? (first r) i) r [(conj (first r) i) (conj (last r) i)])) [#{} []] col)))", "problem": 56, "user": "4f0e4ebd535d0136e6c22322"}, {"code": "(fn mydis [x] \n  (if (seq x) \n      (let [i (first x)] (cons i (mydis(remove #(= i %) x))))))", "problem": 56, "user": "4f048f67535dcb61093f6bd3"}, {"code": "(fn this\n  ([coll] (this coll #{}))\n  ([coll seen]\n   (lazy-seq\n     (when-let [s (seq coll)]\n       (let [fst (first s)]\n         (if (contains? seen fst)\n           (this (next s) seen)\n           (cons fst (this (rest s) (conj seen fst)))))))))", "problem": 56, "user": "4f169a0f535d64f60314644c"}, {"code": "(fn [se]\n  (loop [res [] duplicates se]\n    (if (empty? duplicates)\n      res\n      ; contains works differently in list/vectors\n      ; use `some` instead\n      (if (some #{(first duplicates)} res)\n        (recur res (rest duplicates))\n        (recur (conj res (first duplicates)) (rest duplicates))))))", "problem": 56, "user": "4eddcbbf535d10e5ff6f532d"}, {"code": "(fn f[lst] \n  (loop [ls lst res []] \n    (let [x (first ls) \n          c (some #{x} res) \n          n (if c res (conj res x))] \n      (if x \n        (recur (rest ls) n) \n        res))))", "problem": 56, "user": "4f1fd734535d64f6031464a5"}, {"code": "(fn [x] (reduce #(if (some (fn [n] (= n %2)) %) % (conj % %2)) [] x))", "problem": 56, "user": "4ef6e689535dced4c769f24f"}, {"code": "(fn dis [x]\r\n  (if (empty? x)\r\n    []\r\n    (cons (first x) (dis (remove #(= (first x) %) x)))))", "problem": 56, "user": "4ef0f1a1535dced4c769f212"}, {"code": "; (fn [coll]\n;  (keys (filter #(= 1 (count (second %))) (group-by identity coll))))\n\n(fn [coll]\n  (loop [[x & xs] coll\n         res '()]\n    (if (nil? x)\n      (reverse res)\n      (recur xs (if (some #(= x %) res)\n                  res\n                  (conj res x))))))", "problem": 56, "user": "4f1c2a3a535d64f603146480"}, {"code": "(fn [s]\n          (loop [ret []\n                 s s\n                 seen #{}]\n            (if-not (seq s)\n              ret\n              (recur (if-not (seen (first s)) (conj ret (first s)) ret)\n                     (rest s)\n                     (conj seen (first s))))))", "problem": 56, "user": "4ee26f01535d10e5ff6f5368"}, {"code": "(fn [d]\n  (loop [data d result [] found #{}]\n    (if (empty? data)\n      result\n        (if (get found (first data))\n          (recur (rest data) result found)\n          (recur (rest data) (conj result (first data)) (conj found (first data))))))\n  )", "problem": 56, "user": "4f16d6ed535d64f60314644f"}, {"code": "reduce #(if ((set %) %2) % (conj % %2)) []", "problem": 56, "user": "4f08b15b535dcb61093f6c40"}, {"code": "reduce\n (fn [res x]\n   (if (some #(= x %) res)\n     res\n     (conj res x)))\n []", "problem": 56, "user": "4eb02674535d7eef30807338"}, {"code": "#(loop [r [] c % seen #{}]\n  (if (empty? c)\n    r\n    (if (seen (first c))\n      (recur r (rest c) seen)\n      (recur (conj r (first c)) (rest c) (conj seen (first c))))))", "problem": 56, "user": "4ee4f4a9535d1385b2869d85"}, {"code": "(fn [s] (loop [s s d (hash-set) r []] (let [e (first s)] (if (empty? s) r (recur (rest s) (conj d e) (if (contains? d e) r (conj r e)))))))", "problem": 56, "user": "4f0cc259535d0136e6c22310"}, {"code": "(fn [xs]\r\n  (reverse (loop [r [] xs1 xs]\r\n    (if (empty? xs1)\r\n      r\r\n    (if (some (partial = (first xs1)) r)\r\n      (recur r (rest xs1))\r\n      (recur (cons (first xs1) r) (rest xs1)))))))", "problem": 56, "user": "4f251302e4b0d66497709ff0"}, {"code": "(fn dist [invals]\n  (loop [vals invals res [] acc #{}]\n    (if (seq vals)\n      (let [nextval (first vals)]\n        (if (acc nextval)\n          (recur (rest vals) res acc)\n          (recur (rest vals) (into res [nextval]) (into acc [nextval]))))\n      res)))", "problem": 56, "user": "4f0d093b535d0136e6c22313"}, {"code": "(fn dist [coll]\n  (loop [acc [] s coll]\n\t\t(let [f (first s) r (rest s)] \n\t\t\t(cond \n\t\t\t\t(empty? r) (if (some #{f} acc) acc (conj acc f))\n\t\t\t\t(not-any? #{f} acc) (recur (conj acc f) r )\n\t\t\t\t:else (recur acc r)))))", "problem": 56, "user": "4ef5c7ce535dced4c769f248"}, {"code": "(fn [coll]\n  (reduce\n    #(if (some #{%2} %) % (conj % %2))\n    []\n    coll))", "problem": 56, "user": "4f1abbfb535d64f60314646e"}, {"code": "(fn [coll]\n  (loop [result [], values (hash-set), [i & c :as ic] coll]\n    (if (empty? ic)\n      result\n      (if (get values i)\n        (recur result values c)\n        (recur (conj result i) (conj values i) c)))))", "problem": 56, "user": "4f215350e4b0d66497709fd0"}, {"code": "(fn [x y] (if (empty? y)\n           x\n           (let [a (first y)\n                 b (rest y)\n                 c (if (some #{a} x)\n                     x\n                     (conj x a))]\n             (recur c b)))) []", "problem": 56, "user": "4e5af45e535d8a8b8723a2b1"}, {"code": "reduce #(if (some #{%2} %1) %1 (conj %1 %2)) []", "problem": 56, "user": "4f294c48e4b0d6649770a023"}, {"code": "(fn [s]\n  (loop [sq s acc [] l #{}]\n    (if (empty? sq)\n      acc\n      (if (nil? (l (first sq)))\n        (recur \n          (rest sq) \n          (conj acc (first sq)) \n          (conj l (first sq)))\n        (recur (rest sq) acc l)))))", "problem": 56, "user": "4f26d6d9e4b0d6649770a007"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "4f0333f6535dcb61093f6a77"}, {"code": "#(loop [l % s #{} res []]\r\n  (if (empty? l) res\r\n    (let [e (first l)]\r\n      (recur (rest l) (if (s e) s (conj s e)) (if (s e) res (conj res e))))))", "problem": 56, "user": "4f29cdc8e4b0d6649770a033"}, {"code": "(fn [coll]\n   (loop [dist [] i 0]\n     (if (= i (count coll))\n       dist\n       (recur\n        (if (empty?\n             ((fn [coll item] (for [x coll :when (= x item)] x) )\n              dist (nth coll i))\n             )\n          (conj dist (nth coll i))\n          dist)\n        (inc i)\n        )\n       )\n     )\n   )", "problem": 56, "user": "4ea31da2535d7eef308072c1"}, {"code": "#(reduce \n  (fn [a b] \n    (if (nil? (some (fn [x] (= x b)) a)) (conj a b) a)\n  )\n  []\n  %\n)", "problem": 56, "user": "4f1595da535d64f603146444"}, {"code": "#(loop [pres #{} s % res []] (if (empty? s) res (let [x (first s)]  (recur (conj pres x) (rest s) (if (pres x) res (conj res x))))))", "problem": 56, "user": "4e48b61d535dc968683fc4be"}, {"code": "reduce #(if (not-any? (partial = %2) %) (conj % %2) %) []", "problem": 56, "user": "4f1d1d95535d64f603146488"}, {"code": "(fn [coll]\r\n  (let [uniq (fn uniq [coll dupes]\r\n               (if (empty? coll)\r\n                   nil\r\n                   (lazy-seq\r\n                     (let [f (first coll)\r\n                           r (rest coll)]\r\n                       (if (contains? dupes f)\r\n                           (uniq r dupes)\r\n                           (cons f (uniq r (conj dupes f))))))))]\r\n    (uniq coll #{})))", "problem": 56, "user": "4daf36c2edd6309eace4d175"}, {"code": "(fn [s]\n   (loop [items s\n          result []\n          seen #{}]\n     (let [item (first items)]\n     (if (= 0 (count items))\n       result\n       (recur (rest items)\n              (if (seen item)\n                result\n                (conj result item))\n              (conj seen item))))))", "problem": 56, "user": "4f31519ae4b0d6649770a086"}, {"code": "reduce #(if (= '() (filter (partial = %2) %1))\n              (conj %1 %2) %1\n              ) []", "problem": 56, "user": "4f2965ffe4b0d6649770a029"}, {"code": "#(fnext (reduce\n                 (fn [[s l] x]\n                   [(conj s x) (if (get s x) l (conj l x))])\n                 [#{} []]\n                 %))", "problem": 56, "user": "4f0664bd535dcb61093f6c0f"}, {"code": "(fn d [c] (when (seq c) (cons (first c) (lazy-seq (d (remove #(= (first c) %) (next c)))))))", "problem": 56, "user": "4dc1bd76535d020aff1edf8d"}, {"code": "(fn ! [sq]\n  (loop [[h & t] sq r []]\n    (if (nil? h) r\n        (if (some #(= % h) r) (recur t r) (recur t (conj r h))))))", "problem": 56, "user": "4e7d1c22535db169f9c796c5"}, {"code": "(fn [s] \n   (reduce \n     (fn [agg x] (if (some #{x} agg)\n                   agg\n                   (conj agg x)))\n   [] s))", "problem": 56, "user": "4f1d1299535d64f603146487"}, {"code": "#(loop [[e & l] %1 \n        a []]\n   (if l\n     (recur (filter (partial not= e) l) (conj a e))\n     (if e\n       (conj a e)\n       a)))", "problem": 56, "user": "4f32a7f1e4b0d6649770a095"}, {"code": "(fn [c]\r\n  (reverse ((fn [[x & xs :as s] d]\r\n     (if (nil? s)\r\n       d\r\n       (recur xs (if (true? (some #(= % x) d))\r\n                   d\r\n                   (cons x d))))) c nil)))", "problem": 56, "user": "4f359c7ee4b0e243712b1ec4"}, {"code": "(fn [coll]\n  (loop [input (seq coll) f (first input) result []]\n     (if (= input '())\n         result\n         (recur (rest input) (first (rest input))\n             (if (some #(= % f) result)\n                 result\n                 (conj result f))))))", "problem": 56, "user": "4f38d6bbe4b0e243712b1ee2"}, {"code": "reduce #({%2 %1} ((set %1) %2) (conj %1 %2)) []", "problem": 56, "user": "4f3242bae4b0d6649770a08f"}, {"code": "(fn my-distinct [coll]\n  (loop [f (vector (first coll)) r (rest coll)]\n    (if (empty? r)\n      f\n      (recur (if (some #(= (first r) %) f)\n               f\n               (conj f (first r)))\n             (rest r)))))", "problem": 56, "user": "4f04d312535dcb61093f6be7"}, {"code": "#(sort-by (fn [k] (.indexOf % k)) (keys (group-by identity %)))", "problem": 56, "user": "4f34eb87e4b0e243712b1eba"}, {"code": "(fn [coll]\n  (first\n    (reduce \n      (fn [[acc seen] nxt]\n        (if (seen nxt)\n          [acc seen]\n          [(conj acc nxt) (conj seen nxt)]))\n      [[] #{}] coll)))", "problem": 56, "user": "4f28c979e4b0d6649770a01a"}, {"code": "(fn rdup [s]\n    (loop [se s acc [] vs #{}]\n        (if (empty? se)\n            acc\n            (let [fi (first se) ri (rest se)]\n                (if (contains? vs fi)\n                    (recur ri acc vs)\n                    (recur ri (conj acc fi) (conj vs fi)))))))", "problem": 56, "user": "4f418eaee4b0d7d3c9f3fce9"}, {"code": "(fn [m] (reduce\n         (fn [r e]\n           (if (not (contains? (set r) e))\n             (conj r e)\n             r))\n         []\n         m))", "problem": 56, "user": "4f1bee08535d64f60314647e"}, {"code": "(fn [x] (letfn [ (update [vect val]\n                    (if ((set vect) val)\n                      vect\n                      (conj vect val))) ]\n        (reduce update [] x)))", "problem": 56, "user": "4f2aff4de4b0d6649770a044"}, {"code": "(fn [s] \r\n  (let [r (fn [c e] (if (not (some #(= % e) c)) (conj c e) c))]\r\n    (reverse (reduce r '() s))))", "problem": 56, "user": "4f0da4e4535d0136e6c22319"}, {"code": "(fn [s]\n (reduce #(if ((set %1) %2) %1 (conj %1 %2)) [] s))", "problem": 56, "user": "4f29eb2ae4b0d6649770a037"}, {"code": "(fn [c]\n  (reduce\n    (fn [f x]\n      (if ((set f) x)\n        f   \n        (conj f x))) \n   [] c))", "problem": 56, "user": "4e6cf521535de274dd8d818b"}, {"code": "(fn f [l]\n  (if (empty? l)\n      '()\n      (cons (first l) (f (remove #(= (first l) %) l)))))", "problem": 56, "user": "4eb66737535d7eef3080736b"}, {"code": "#(first (reduce (fn [[v m] k] (if (m k) [v m] [(conj v k) (conj m k)])) [[] #{}] %))", "problem": 56, "user": "4f1b0008535d64f603146473"}, {"code": "(fn [ys] (reverse\n           ((fn [accum xs]\n              (if (empty? xs)\n                accum\n                (recur\n                  (if (some #{(first xs)} accum) ; elem x accum\n                    accum\n                    (cons (first xs) accum))\n                  (rest xs)))) () ys)))", "problem": 56, "user": "4f426a7ae4b0d7d3c9f3fcff"}, {"code": "(fn this [x]\r\n  (if (empty? x)\r\n    x\r\n    (cons (first x) (this (filter (partial not= (first x)) (rest x))))))", "problem": 56, "user": "4f474f43e4b0d56e7bb92bb7"}, {"code": "reduce \n   #(if ( (set  %1) %2 ) %1 (conj %1 %2 )) \n   []", "problem": 56, "user": "4f030775535dcb61093f6a43"}, {"code": "(fn [coll]\n  (loop [processed {} left coll]\n    (if (= 0 (count left))\n      (map (into {} (for [[k v] processed] [v k])) (range (count processed)))\n      (recur\n       (if (contains? processed (first left))\n         processed\n         (assoc processed (first left) (count processed)))\n       (rest left)))))", "problem": 56, "user": "4e7e8684535db169f9c79717"}, {"code": "(fn [coll]\n  (letfn [(seeit [m x] (assoc m x true))]\n  (loop [m {} [fi :as in] coll out []]\n    (if (empty? in)\n      out\n      (let [nm (seeit m fi)]\n        (recur nm (rest in)\n          (if (m fi)\n            out\n            (conj out fi))))))))", "problem": 56, "user": "4f4ba29ae4b03ad3f0c10c7a"}, {"code": "(fn [seq]\n    (loop [seen #{} acc (empty seq) [x & xs :as tail] seq]\n        (if (empty? tail)\n            acc\n            (recur (conj seen x)\n                   (if (seen x) acc (concat acc [x]))\n                   xs))))", "problem": 56, "user": "4f4ac35ae4b0d56e7bb92c18"}, {"code": "reduce #(if (contains? (set %) %2) % (conj % %2)) []", "problem": 56, "user": "4f4319ebe4b0d7d3c9f3fd13"}, {"code": "(fn dis\r\n  [c]\r\n  (loop [t [(first c)]\r\n         s (rest c)]\r\n    (if (empty? s)\r\n      t\r\n      (recur (if (contains? (set t) (first s)) t (conj t (first s))) (rest s)))))", "problem": 56, "user": "4f17ab99535d64f603146457"}, {"code": "(fn [coll]\n      (loop [coll coll result []]\n        (if (seq coll)\n          (recur (rest coll) (if (some #(= % (first coll)) result)\n                               result\n                               (conj result (first coll))))\n          result)))", "problem": 56, "user": "4f4544e1e4b0d56e7bb92b7a"}, {"code": "#(reduce (fn [s i]\n             (if (some #{i} s) s (conj s i))) [] %)", "problem": 56, "user": "4e1f9bb5535d04ed9115e80d"}, {"code": "(fn [xs] (seq (java.util.LinkedHashSet. xs)))", "problem": 56, "user": "4f4e91a9e4b03ad3f0c10cca"}, {"code": "(fn f [s]\n  (if (seq s)\n    (cons (first s) (f (remove #(= (first s) %) (rest s))))))", "problem": 56, "user": "4f3e5e87e4b0e243712b1f83"}, {"code": "(fn [x] (reduce #(if (= nil (some #{%2} %)) (conj % %2) %) [] x))", "problem": 56, "user": "4f2c593ee4b0d6649770a053"}, {"code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "problem": 56, "user": "4f4f0287e4b03ad3f0c10cd7"}, {"code": "reduce (fn [t x] (if (some #{x} t) t (conj t x))) []", "problem": 56, "user": "4ef77edb535dced4c769f254"}, {"code": "(fn my-distinct\n  [v]\n  (loop [[x & xs] v\n         result []]\n    (if x\n      (recur xs (if (some #{x} result) result (conj result x)))\n      result)))", "problem": 56, "user": "4db8d37d535d1e037afb219c"}, {"code": "(fn distinct_ [s]\n  (loop [s_ s seen? #{} acc []]\n    (cond\n      (empty? s_) acc\n      (seen? (first s_)) (recur (rest s_) seen? acc)\n      :else (recur (rest s_) (conj seen? (first s_)) (conj acc (first s_))))))", "problem": 56, "user": "4f50c414e4b03ad3f0c10d0d"}, {"code": "(fn foo \n  ([coll] (foo coll []))\n  ([coll dcoll]\n    (if (empty? coll)\n      dcoll\n      (if (some #{(first coll)} dcoll)\n        (foo (rest coll) dcoll)\n        (foo (rest coll) (conj dcoll (first coll)))))))", "problem": 56, "user": "4f4f08c8e4b03ad3f0c10cd8"}, {"code": "(fn [coll]\n  (first\n    (reduce \n      #(let [[seq map] %1]\n        (if (nil? (map %2))\n          [(conj seq %2) (assoc map %2 true)]\n          %1)) [[] {}] coll)))", "problem": 56, "user": "4f2acb29e4b0d6649770a040"}, {"code": "(fn [col]\n       (loop [old col\n        ncol []]\n\t (if (empty? old)\n\t   (reverse ncol)\n\t   (if  (empty? (filter #(= (first old) %) ncol))\n\t     (recur (rest old) (cons (first old) ncol))\n\t     (recur (rest old) ncol)\n       ))))", "problem": 56, "user": "4eae2f9e535d7eef30807324"}, {"code": "(fn [s] \n  (reverse\n    (first\n      (reduce \n        #(list \n          (if (contains? (second %) %2) (first %)\n            (cons %2 (first %)))\n          (conj (second %) %2))\n        (list (list) #{})\n        s))))", "problem": 56, "user": "4f569218e4b0a7574ea71826"}, {"code": "(fn [coll]\r\n    (loop [coll coll\r\n           acc []\r\n           s #{}]\r\n      (if (seq coll)\r\n        (let [item (first coll)]\r\n          (if (contains? s item)\r\n            (recur (rest coll) acc s)\r\n            (recur (rest coll) (conj acc item) (conj s item))))\r\n        acc)))", "problem": 56, "user": "4f047177535dcb61093f6bc6"}, {"code": "(fn [xs] (reduce (fn [acc x] (if (not (contains? (set acc) x)) (conj acc x) acc)) [] xs))", "problem": 56, "user": "4f3ec266e4b0e243712b1f8c"}, {"code": "(fn [coll]\n  (let [step (fn step [xs seen]\n                   (lazy-seq\n                    ((fn [[f :as xs] seen]\n                      (when-let [s (seq xs)]\n                        (if (contains? seen f) \n                          (recur (rest s) seen)\n                          (cons f (step (rest s) (conj seen f))))))\n                     xs seen)))]\n      (step coll #{})))", "problem": 56, "user": "4ed60c9c535d10e5ff6f52dd"}, {"code": "(fn dst [s]\n  (second (reduce (fn [[h-s r-v :as m] i]\n            (if \n              (contains? h-s i) m\n              (assoc m \n                     0 (conj h-s i)\n                     1 (conj r-v i)))) [#{} []] s)))", "problem": 56, "user": "4f3e6244e4b0e243712b1f85"}, {"code": "(fn dist [col]\n  (loop [icol col\n         res []]\n    (if (empty? icol)\n      res\n      (let [f (first icol)]\n        (if (some #{f} res)\n          (recur (rest icol) res)\n          (recur (rest icol) (conj res f)))))))", "problem": 56, "user": "4ed27f9f535d44c135fd68d5"}, {"code": "(fn [s] (reduce #(if (some #{%2} %) % (conj % %2)) [] s))", "problem": 56, "user": "4f569a3ce4b0a7574ea71828"}, {"code": "(fn [coll]\n    (reverse\n     (loop [seen (list (first coll))\n            coll (rest coll)]\n       (cond (empty? coll) seen\n             (some #{(first coll)} seen) (recur seen (rest coll))\n             :else (recur (cons (first coll) seen) (rest coll))))))", "problem": 56, "user": "4f4a8707e4b0d56e7bb92c12"}, {"code": "(fn [s]\n  (second\n    (reduce\n      (fn [[m t] s]\n        (if\n          (get m s false)\n          [m t]\n          [(assoc m s true) (conj t s)]))\n      [{} []]\n      s)))", "problem": 56, "user": "4f5c0549e4b0030a34fb2b1a"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "4f38b7d9e4b0e243712b1ee0"}, {"code": "(fn [s]\n  (loop [s s ret [] seen #{}]\n    (cond (empty? s) ret\n          (seen (first s)) (recur (rest s) ret seen)\n          :else (recur (rest s) (conj ret (first s)) (conj seen (first s))))))", "problem": 56, "user": "4f4c6b21e4b03ad3f0c10c8f"}, {"code": "reduce (fn [m i] (if (some #(= i %) m) m (conj m i))) []", "problem": 56, "user": "4f2baf1ae4b0d6649770a04c"}, {"code": "(fn [s]\n  ((fn [s a]\n        (if (empty? s)\n            (reverse a)\n            (if (not (some #{(first s)} a))\n                (recur (rest s) (cons (first s) a))\n                (recur (rest s) a))))\n    s []))", "problem": 56, "user": "4f404dcee4b0e243712b1fb0"}, {"code": "(fn [s]\n  (loop [ss s found #{} out []]\n    (if (empty? ss)\n      out\n     (let [e (first ss)]\n       (recur (rest ss) (conj found e) (if (found e) out (conj out e)))))))", "problem": 56, "user": "4dd9d299535d2dad7130b5dd"}, {"code": "(fn [xs]\n  (loop [xs xs s #{} acc []]\n    (if (empty? xs)\n        acc\n        (if (nil? (s (first xs)))\n          (recur (rest xs) (conj s (first xs)) (conj acc (first xs)))\n          (recur (rest xs) s acc)))))", "problem": 56, "user": "4f038499535dcb61093f6b09"}, {"code": "#(loop [[h & t] %, has #{}, acc []]\n   (cond (nil? h) acc\n         (has h)  (recur t has acc)\n         :else    (recur t (conj has h) (conj acc h))))", "problem": 56, "user": "4f6160a7e4b0defedf855fbe"}, {"code": "(fn f [a [x & r]]\r\n    (if x \r\n\t      (f (if ((set a) x) \r\n\t\t     a\r\n\t\t     (conj a x))\r\n\t\t r)\r\n\t      a))\r\n\t  []", "problem": 56, "user": "4e53bf5e535d8a8b8723a275"}, {"code": "(comp (fn [s] (if (sequential? (first s)) (identity s) (sort s))) keys frequencies)", "problem": 56, "user": "4e8768f6535dceadca469850"}, {"code": "(fn [l]\n  (loop [l l acc []]\n    (let [h (first l)]\n      (if (empty? l)\n          acc\n          (if (some #(= % h) acc)\n              (recur (rest l) acc)\n              (recur (rest l) (conj acc h)))))))", "problem": 56, "user": "4e568873535d8a8b8723a283"}, {"code": "(fn [coll] (reduce #(if (some (partial = %2) %1) %1 (conj %1 %2)) [] coll))", "problem": 56, "user": "4f57a153e4b0a7574ea7183a"}, {"code": "(fn [coll]\n    (loop [distinct-coll []\n           c coll]\n      (if (empty? c)\n        distinct-coll\n        (recur (if (some #(= % (first c)) distinct-coll)\n                 distinct-coll\n                 (conj distinct-coll (first c)))\n               (rest c)))))", "problem": 56, "user": "4f5cc3b8e4b0030a34fb2b2b"}, {"code": "(fn disti\n  ([seq] (disti [] seq))\n  ([d seq]\n    (cond (empty? seq) d,\n          (= -1 (.indexOf d (first seq)))\n            (disti (conj d (first seq)) (rest seq))\n          :else\n            (disti d (rest seq)))))", "problem": 56, "user": "4f62b29ce4b0defedf855fd9"}, {"code": "(fn dis [s]\n  (if\n    (empty? s)\n      []\n      (cons (first s)\n        (filter #(not= (first s) %1) (dis (rest s))))))", "problem": 56, "user": "4f611127e4b0defedf855fb4"}, {"code": "(fn uni [collect]\n  (loop [col collect,rec #{},result []]\n    (if (empty? col)\n        result        \n        (let [\n              last (rest col),\n              x (first col),\n              sign (contains? rec x)         \n              ]\n          (if (true? sign)\n              (recur last rec result) \n              (recur last (conj rec x) (conj result x) )\n          )\n        )\n    )\n  )\n)", "problem": 56, "user": "4f6d9d7ee4b07046d9f4efcd"}, {"code": "reduce #(if (some #{%2} %)\n          %\n          (conj % %2))\n       []", "problem": 56, "user": "4f6fbb68e4b07046d9f4efeb"}, {"code": "#(last (reduce (fn [[s l] v]\n            (if-not (s v)\n              [(conj s v) (conj l v)]\n              [s l]))\n          [#{} []]\n          %))", "problem": 56, "user": "4eccb190535d23f0362276fe"}, {"code": "(fn [xs]\n  (loop [xs xs acc [] prev #{}]\n    (if (seq xs)\n      (if (prev (first xs))\n        (recur (rest xs) acc prev)\n        (recur (rest xs) (conj acc (first xs)) (conj prev (first xs))))\n      acc)))", "problem": 56, "user": "4e7f5a0b535db966e863cc41"}, {"code": "(fn [coll]\r\n  (let [step (fn step [xs seen]\r\n                   (lazy-seq\r\n                    ((fn [[f :as xs] seen]\r\n                      (when-let [s (seq xs)]\r\n                        (if (contains? seen f)\r\n                          (recur (rest s) seen)\r\n                          (cons f (step (rest s) (conj seen f))))))\r\n                     xs seen)))]\r\n      (step coll #{})))", "problem": 56, "user": "4f4ec77ae4b03ad3f0c10cd0"}, {"code": "#(first\n    (reduce \n      (fn [[c s :as r] e]\n          (if (s e) \n            r \n            [(conj c e) (conj s e)])) \n      [[] #{}] \n      %))", "problem": 56, "user": "4f58fe71e4b0a7574ea7185f"}, {"code": "(fn [coll] (loop [seen #{} res [] col coll]\n  (if (seq col)\n     (if (seen (first col))\n       (recur seen res (rest col))\n       (recur (conj seen (first col)) (conj res (first col)) (rest col)))\n     res)))", "problem": 56, "user": "4f65eec7e4b07046d9f4ef48"}, {"code": "(fn [arg] (loop [s arg a [] f #{}]\n  (if (empty? s)\n    (reverse a)\n    (if (contains? f (first s))\n      (recur (rest s) a f)\n      (recur (rest s) (cons (first s) a) (conj f (first s)))))))", "problem": 56, "user": "4f713878e4b07046d9f4f00a"}, {"code": "(fn p56s [s]\n  (loop [in s\n         res ()\n         found #{}]\n    (if (empty? in)\n        (reverse res)\n      (if (contains? found (first in))\n        (recur (rest in) res found)\n        (recur (rest in)\n               (conj res (first in))\n               (conj found (first in)))\n        )\n      ))\n  )", "problem": 56, "user": "4f63777be4b0defedf855fe4"}, {"code": "(fn [s] (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] s))", "problem": 56, "user": "4f12ab23535d64f603146429"}, {"code": "(fn f [[h & t]] \n  (if  h (cons h (f (filter #(not (= h %)) t))) []))", "problem": 56, "user": "4f7869c2e4b0fbe0118ec589"}, {"code": "(fn dedup\n  ([s] (dedup s []))\n  ([[x & xs] ds]\n    (if (nil? x)\n      ds\n      (if (some #{x} ds)\n        (dedup xs ds)\n        (dedup xs (conj ds x))))))", "problem": 56, "user": "4f7f0827e4b06e829148e1d5"}, {"code": "(fn [l]\n  (let [inside? (fn inside? [x l]\n                  (if (empty? l)\n                      false\n                      (if (not= (first l) x)\n                        (inside? x (next l))\n                        true)))]\n    (loop [[f & args :as my-l] l r (empty l)]\n      (if (empty? my-l)\n        r\n        (if (inside? f r)\n          (recur args r)\n          (recur args (concat r (list f))))))))", "problem": 56, "user": "4f7e29dde4b06e829148e1ca"}, {"code": "reduce #(if ((set %) %2) % (conj % %2)) []", "problem": 56, "user": "4e6e2ac4535d5021c1a895ff"}, {"code": "reduce (fn [l x] (if (not-any? #(= %1 x) l) (conj l x) l)) []", "problem": 56, "user": "4eeccfc0535d93acb0a668b5"}, {"code": "(fn [col]\n  (reduce \n    #(if (some (fn [a] (= a %2)) %1 ) \n      %1 \n      (concat %1 (conj (empty %1) %2))\n    )\n    (empty col)\n    col\n  )\n)", "problem": 56, "user": "4f84400de4b033992c121c2e"}, {"code": "reduce\n   #(if (some #{%2} %1) %1 (conj %1 %2))\n   []", "problem": 56, "user": "4f6845d2e4b07046d9f4ef74"}, {"code": "(fn [x]\n    ((fn add-if-new [l,s]\n        (if (= s ())\n            (clojure.core/reverse l)\n            (if (some #(= (first s) %) l)\n                (add-if-new l (rest s))\n                (add-if-new (cons (first s) l) (rest s)))))\n    () x))", "problem": 56, "user": "4f85ef29e4b033992c121c4d"}, {"code": "(fn iter\n  ([in]\n    (iter in [] #{}))\n  ([[a & r] out s]\n    (cond (nil? a) out\n          (s a) (recur r out s)\n          :else (recur r (conj out a) (conj s a)))))", "problem": 56, "user": "4f8345c6e4b033992c121c1b"}, {"code": "(fn dist [sq]\n     (loop [s sq\n            rep #{}\n            acc []]\n       (cond\n         (nil? (first s)) acc\n         (contains? rep (first s)) (recur (rest s) rep acc)\n         :else (recur (rest s) (conj rep (first s)) (conj acc (first s))))))", "problem": 56, "user": "4f82e14be4b033992c121c0c"}, {"code": "(fn d [v s]\n  (if (not-empty s)\n    (let [[f & r] s]\n      (if (v f)\n        (d v r)\n        (cons f (d (conj v f) r)))))) #{}", "problem": 56, "user": "4f725201e4b07046d9f4f02f"}, {"code": "reduce #(if (some #{%2} %1) %1 (conj %1 %2)) []", "problem": 56, "user": "4f725466e4b07046d9f4f030"}, {"code": "(fn distinct*[x & acc]\n  (let [a (first x)\n        b (rest x)\n\t      c (first acc)]\n          (cond (empty? x) (reverse c)\n\t              (empty? acc) (distinct* b (list a))\n\t              (some #(= % a) c) (distinct* b c)\n\t              :default (distinct* b (cons a c)))))", "problem": 56, "user": "4e49a7bb535dc968683fc4c6"}, {"code": "(fn [xs]\n  (reverse\n    (reduce\n      (fn [lst itm] \n        (if (not-any? #(= itm %) lst)\n          (conj lst itm)\n          lst))\n      ()\n      xs)))", "problem": 56, "user": "4f90e238e4b0dcca54ed6c94"}, {"code": "(fn f\n  ([s] (f s #{}))\n  ([s u]    \n    (if (empty? s) \n        nil\n        (if (contains? u (first s))\n            (f (rest s) u)\n            (cons (first s) (f (rest s) (conj u (first s))))))))", "problem": 56, "user": "4f9120d8e4b0dcca54ed6c96"}, {"code": "(fn strip [sq]\n  (if (= 0 (count sq))\n    '()\n    (if (= 1 (count sq))\n      sq\n      (concat \n        (list (first sq))\n        (strip (remove #(= % (first sq)) (rest sq)))\n      )\n    )\n  )\n)", "problem": 56, "user": "4f8ea1f7e4b0d4e659cdde69"}, {"code": "reduce #(if ((set %) %2) % (conj % %2)) []", "problem": 56, "user": "4f6511eee4b07046d9f4ef3a"}, {"code": "(fn [s] (reduce (fn [c e] (if (some #(= e %) c) c (assoc c (count c) e))) [] s))", "problem": 56, "user": "4efd8b67535de96065cf5085"}, {"code": "#(loop [[f & r] % s #{} a []]\n   (if f (recur r (conj s f) (if (s f) a (conj a f))) a))", "problem": 56, "user": "4f83665ee4b033992c121c1c"}, {"code": "(fn [coll]\n  (reduce #(if ((set %1) %2) %1 (conj %1 %2)) [] coll))", "problem": 56, "user": "4f890488e4b033992c121c76"}, {"code": "#(map first (sort-by (fn [[_ x]] x) (first (reduce (fn [[d n] x] (if (d x) [d n] [(assoc d x n) (inc n)])) [{} 0] %))))", "problem": 56, "user": "4f8c5f4fe4b02e764a0a5198"}, {"code": "(partial (fn foo [res [x & tail]]\n           (if x\n             (if (some #{x} res)\n               (recur res (remove #{x} tail))\n               (recur (conj res x) tail))\n             res))\n         [])", "problem": 56, "user": "4dc21233535d020aff1edf92"}, {"code": "(fn [coll]\r\n  (first (reduce (fn [[res uniq] x]\r\n                  (if (uniq x)\r\n                    [res uniq]\r\n                    [(conj res x) (conj uniq x)]))\r\n        [[] #{}] coll)))", "problem": 56, "user": "4f969214e4b0dcca54ed6cdd"}, {"code": "(fn [xs]\n            (first\n              (reduce (fn [[results seen] x]\n                        (if (seen x)\n                          [results seen]\n                          [(conj results x) (conj seen x)]))\n                      [[] #{}] xs)))", "problem": 56, "user": "4f7ab8c7e4b06e829148e19c"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "4f9597e0e4b0dcca54ed6cd4"}, {"code": "(fn [coll]\n  (loop [ret [], s #{} [x & xs :as coll] coll]\n    (if coll\n      (if (s x)\n        (recur ret s xs)\n        (recur (conj ret x) (conj s x) xs))\n       ret)))", "problem": 56, "user": "4f49e869e4b0d56e7bb92c02"}, {"code": "(fn [s] (remove nil? (map #(if (%2 %1) nil %1) s (reductions conj #{} s))))", "problem": 56, "user": "4f465096e4b0d56e7bb92b9a"}, {"code": "#(loop [i 1 v %]\n  (if (< i (count v))\n    (recur (inc i)\n           (concat (take i v)\n                   (remove (partial = (nth v (dec i)))\n                           (drop i v))))\n    v))", "problem": 56, "user": "4f9fe2b9e4b0dcca54ed6d40"}, {"code": "(fn fdistinct [l]  (if (empty? l)    l  (cons (first l) (fdistinct (filter #(not= % (first l) ) (rest l) ))))  )", "problem": 56, "user": "4f4be1cae4b03ad3f0c10c81"}, {"code": "(fn my-distinct\n  ([coll] (my-distinct coll []))\n  ([coll, coll2]\n    (let [x (first coll) r (rest coll)]\n      (if-not x\n        coll2\n        (if (some #(= x %) coll2)\n          (my-distinct r coll2) \n          (my-distinct r (conj coll2 x)))))))", "problem": 56, "user": "4f8490fae4b033992c121c34"}, {"code": "(fn [coll] \r\n  ((fn step [[x & xs] seen] \r\n     (when x\r\n       (if (seen x) \r\n         (step xs seen)\r\n         (cons x (step xs (conj seen x)))))) \r\n   coll #{}))", "problem": 56, "user": "4f50be5de4b03ad3f0c10d0c"}, {"code": "(fn rdup [c]\n    ((fn blah [coll items]\n      (cond (empty? coll) nil\n            (some #{(first coll)} items) (blah (rest coll) items)\n            true (cons (first coll) (blah (rest coll) (cons (first coll) items))))) \n    c '()))", "problem": 56, "user": "4f17aa97535d64f603146456"}, {"code": "(fn [coll]\n  (reduce (fn [r x]\n            (if (some #{x} r)\n              r\n              (conj r x)))\n          [] coll))", "problem": 56, "user": "4f969a66e4b0dcca54ed6cde"}, {"code": "(fn [s] (loop [s s r []] (if (empty? s) r (recur (filter #(not (= (first s) %)) (rest s)) (conj r (first s))))))", "problem": 56, "user": "4f954dbce4b0dcca54ed6ccd"}, {"code": "reduce #(if (some (fn[x] (= %2 x)) %1) %1 (conj %1 %2)) []", "problem": 56, "user": "4f3b97c7e4b0e243712b1f30"}, {"code": "reduce (fn [accum elem]\n          (if ((set accum) elem)\n            accum\n            (conj accum elem)))\n       []", "problem": 56, "user": "4f9d53f3e4b0dcca54ed6d21"}, {"code": "(fn [s]\n  (loop [z s items []]\n    (if (zero? (count z))\n      items\n      (recur\n        (filter (partial not= (first z)) z)\n        (conj items (first z))))))", "problem": 56, "user": "4fa3f91fe4b081705acca196"}, {"code": "(fn my-distinct\r\n([s] (my-distinct s (empty s)))\r\n([s r] (cond (empty? s) (cond (vector? r) r \r\n  \t\t      :default (reverse r))\r\n\t     :default \r\n\t     (let [x (first s) \r\n\t\t   has-x? (some #(= % x) r) \r\n                   u (if has-x? r (conj r x))]\r\n\t       (recur (rest s) u)))))", "problem": 56, "user": "4f9c4080e4b0dcca54ed6d1a"}, {"code": "#(loop [source % seen #{} result []]\n  (let [[elm & elms] source]\n    (cond (empty? source) result\n          (seen elm) (recur elms seen result)\n          :else (recur elms (conj seen elm) (conj result elm)))))", "problem": 56, "user": "4fa0a4b1e4b0dcca54ed6d4f"}, {"code": "#(first (reduce (fn [[sq mp] elm]\n                    (if (mp elm)\n                        [sq mp]\n                        [(conj sq elm) (conj mp elm)]))\n[[] #{}] %))", "problem": 56, "user": "4fa6d532e4b081705acca1be"}, {"code": "(fn find-distinct-items [s]\n  (reduce (fn [xs x]\n            (if (some #{x} xs) xs (conj xs x)))\n          [] s))", "problem": 56, "user": "4f3fb586e4b0e243712b1f9c"}, {"code": "reduce #(if ((set %) %2) % (conj % %2)) []", "problem": 56, "user": "4ef48422535dced4c769f236"}, {"code": "(fn [a-seq]\n  (loop [ret [] elems a-seq]\n    (if (empty? elems) ret\n      (let [e (first elems)]\n        (if (some #(= e %) ret)\n          (recur ret (rest elems))\n          (recur (conj ret e) (rest elems)))))))", "problem": 56, "user": "4faa8de0e4b081705acca1f8"}, {"code": "#(reverse (reduce\n  (fn [a b]\n    (if ((set a) b)\n      a\n      (cons b a))) nil %))", "problem": 56, "user": "4faa9593e4b081705acca1f9"}, {"code": "reduce #(if (contains? (set %) %2) % (conj % %2)) []", "problem": 56, "user": "4f991ec1e4b0dcca54ed6cfb"}, {"code": "(fn [x]\n    (loop [s #{}\n           ans []\n           x x]\n      (cond (empty? x) ans\n            (contains? s (first x))\n                (recur s ans (rest x))\n           :else (recur (conj s (first x))\n                        (conj ans (first x))\n                        (rest x)))))", "problem": 56, "user": "4facd2fae4b081705acca22f"}, {"code": "(fn [s]\n  (keys (sort-by \n      #(second (first (second %))) \n      (group-by first (map list s (range (count s)))))))", "problem": 56, "user": "4f94dab7e4b0dcca54ed6cc6"}, {"code": "(fn dist [used result s]\n    (if (empty? s)\n      result\n      (dist\n        (conj used (first s))\n        (if (some #{(first s)} used)\n          result\n          (concat result [(first s)]))\n        (rest s)))) #{} '()", "problem": 56, "user": "4faccddae4b081705acca22e"}, {"code": "(fn my-distinct [coll]\n  (loop [out [] r coll ]\n    (if (empty? r)\n      out\n      (recur\n       (conj out (first r))\n       (filter #(not (= (first r) %)) r)))))", "problem": 56, "user": "4fa17b00e4b0dcca54ed6d5f"}, {"code": "(fn my-distinct\n  [coll]\n  (if (seq coll)\n    (cons\n      (first coll)\n      (my-distinct (remove #(= % (first coll)) coll)))\n    coll))", "problem": 56, "user": "4f7f9665e4b033992c121bea"}, {"code": "#(reduce (fn [r n]\n  (if (some #{n} r) r (conj r n))) [] %)", "problem": 56, "user": "4f4274f2e4b0d7d3c9f3fd00"}, {"code": "reduce #(if (not (some #{%2} %)) (conj % %2) %) []", "problem": 56, "user": "4f91a38ae4b0dcca54ed6c9f"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "4f40ccd9e4b0e243712b1fc0"}, {"code": "(fn distinct_\n      ([coll] (distinct_ coll #{}))\n      ([coll foundset]\n       (let [item (first coll)]\n         (when item\n           (if (foundset item)\n             (distinct_ (rest coll) foundset)\n             (cons item (distinct_ (rest coll) (apply hash-set item foundset))))))))", "problem": 56, "user": "4fa5406fe4b081705acca1ac"}, {"code": "(fn remove-dups\r\n  ([coll] (remove-dups coll []))\r\n  ([[head & more :as coll] result]\r\n     (letfn [(in? [seq elm] (some #(= elm %) seq))]\r\n       (if (empty? coll) result\r\n         (if (in? result head)\r\n\t       (remove-dups more result)\r\n\t       (remove-dups more (conj result head)))))))", "problem": 56, "user": "4f4e4ecbe4b03ad3f0c10cbf"}, {"code": "(fn remove-dups [s]\n  (loop [remain s\n         i 0\n         m (sorted-map)]\n    (if (empty? remain) (vals m)\n      (let [known (set (vals m))\n            [nextelt & newremain] remain\n            nextknown? (contains? known nextelt)]\n        (if nextknown?\n          (recur newremain i m)\n          (recur newremain (inc i) (assoc m i nextelt)))))))", "problem": 56, "user": "4f036fb3535dcb61093f6ac8"}, {"code": "#(loop [s % r [] m #{}]\n  (cond (empty? s) r\n        (contains? m (first s))\n          (recur (rest s) r m)\n        :else (recur (rest s) (conj r (first s)) (conj m (first s)))))", "problem": 56, "user": "4fae258de4b081705acca246"}, {"code": "(fn my-distinct [s]\n  (if (< (count s) 2)\n\t\ts\n\t\t(let [el (first s)]\n\t \t(cons el (my-distinct (filter #(not= % el) (rest s)) ) )\t\t\n\t\t)\n\t)\n)", "problem": 56, "user": "4faacc04e4b081705acca201"}, {"code": "(fn dedup [xs]\n  (if (empty? xs)\n      '()\n      (cons (first xs)\n            (dedup (remove #{(first xs)} (rest xs))))))", "problem": 56, "user": "4e8338d6535db62dc21a62d3"}, {"code": "#(if (> (count %) 20) % (keys (group-by identity %)))", "problem": 56, "user": "4facff22e4b081705acca230"}, {"code": "(fn [coll]\r\n  (reduce #(if (some #{%2} %1) \r\n              %1\r\n              (conj %1 %2))\r\n    [] coll))", "problem": 56, "user": "4fb37882e4b081705acca2a0"}, {"code": "(fn remdups\n  ([s] (remdups s #{}))\n  ([s seen]\n    (if (= s '())\n        '()\n        (if (seen (first s))\n            (remdups (rest s) seen)\n            (cons (first s)\n                  (remdups (rest s) (conj seen (first s))))))))", "problem": 56, "user": "4f9a0064e4b0dcca54ed6d03"}, {"code": "(fn [sequence]\r\n  (loop [result [] s sequence found #{}]\r\n    (let [f (first s)\r\n          r (rest s)]\r\n      (if (empty? s)\r\n        result\r\n        (if (not (contains? found f))\r\n          (recur (conj result f) r (conj found f))\r\n          (recur result r found))))))", "problem": 56, "user": "4fab943ee4b081705acca219"}, {"code": "(fn [coll]\n  ((fn f [s coll]\n    (when coll\n      (if\n        (s (first coll))\n        (recur s (next coll))\n        (cons (first coll)\n          (lazy-seq (f (conj s (first coll)) (next coll)))))))\n   #{} coll))", "problem": 56, "user": "4fb2101ce4b081705acca284"}, {"code": "(fn [vs] (reduce #(if (not (some #{%2} %)) (conj % %2) %) [] vs))", "problem": 56, "user": "4dbbdf86535d3f4042261ece"}, {"code": "(fn [c] (reduce #(if (some (set %) #{%2}) % \n                   (conj % %2)) [] c))", "problem": 56, "user": "4daeabf6edd6309eace4d15c"}, {"code": "reduce (fn [s e]\r\n  (if (some #(= % e) s)\r\n    s\r\n    (conj s e)))\r\n[]", "problem": 56, "user": "4f7d25b4e4b06e829148e1ba"}, {"code": "(fn s [c]\n    (when-let [f (first c)]\n      (cons f (s (remove #(= f %) (rest c))))))", "problem": 56, "user": "4f9d8083e4b0dcca54ed6d23"}, {"code": "(fn [s] \n  (reduce #(if (some (fn [q] (= q %2)) %)\n                % (conj % %2)) [] s))", "problem": 56, "user": "4fa30027e4b081705acca187"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "4fb3b865e4b081705acca2a2"}, {"code": "(fn  dist [s] \n   ((reduce (fn [x y]\n     (if (contains? (x :lookup) y) x\n         {:lookup (into (x :lookup) [y]) :list (conj (x :list) y)} \n     )   \n   ) {:lookup #{} :list []} s) :list)\n\n)", "problem": 56, "user": "4f7b6b90e4b06e829148e1a4"}, {"code": "(fn [in] (loop [in in out []]\n  (if (empty? in)\n    out\n    (recur (rest in)\n           (if (some #{(first in)} out)\n                out\n                (conj out (first in)))))))", "problem": 56, "user": "4faec810e4b081705acca24e"}, {"code": "#(loop [[x & xs] %, res ()]\n  (if (nil? x)\n    res\n    (recur\n      xs\n      (if\n        ((set res) x)\n        res\n        (concat res (list x))))))", "problem": 56, "user": "4f4e7c01e4b03ad3f0c10cc9"}, {"code": "(fn [s]\n  (loop [s s\n         a []\n         m #{}]\n    (cond\n      (empty? s) (seq a)\n      (m (first s))\n        (recur (rest s) a m)\n      :else\n        (recur (rest s)\n               (conj a (first s))\n               (conj m (first s))))))", "problem": 56, "user": "4f2b0951e4b0d6649770a045"}, {"code": "#(reduce\n  (fn [c v] \n    (if ((set c) v)\n      c\n      (conj c v))) \n  [] %1)", "problem": 56, "user": "4db3393e535df7e46ed9b6cc"}, {"code": "(fn [s] (reverse (reduce (fn [acc x] (if ((set acc) x) acc (cons x acc))) () s)))", "problem": 56, "user": "4fba7d1ee4b081705acca2e0"}, {"code": "(fn [s]\n  (loop [s s r []]\n    (if (seq s)\n      (recur (rest s)\n             (if (some #{(first s)} r)\n               r\n               (conj r (first s))))\n      r)))", "problem": 56, "user": "4f1bb9d8535d64f60314647d"}, {"code": "(fn [s]\n  (loop [s s a #{} l []]\n    (if (seq s)\n      (recur (rest s) (conj a (first s))\n             (if (contains? a (first s))\n               l\n               (conj l (first s))))\n      l)))", "problem": 56, "user": "4fbd24d2e4b081705acca2ff"}, {"code": "(fn my-distinct [coll]\n  (second (reduce (fn [[seen acc] x] \n                    (if (contains? seen x) \n                      [seen acc] \n                      [(conj seen x) (conj acc x)])) \n                [#{} []] \n                coll)))", "problem": 56, "user": "4f6bab49e4b07046d9f4efb1"}, {"code": "(fn [s]\n  (letfn [(f [[r s] elt]\n            (if (contains? s elt)\n              [r s]\n              [(conj r elt) (conj s elt)]))]\n    (first (reduce f [[] #{}] s))))", "problem": 56, "user": "4fc13433e4b081705acca32b"}, {"code": "#(second \n  (reduce \n    (fn [[seen seq] n] \n\\     [(conj seen n)\n       (if (seen n) seq (conj seq n))])\n    [#{} []] %1))", "problem": 56, "user": "4fbfe9a4e4b081705acca31f"}, {"code": "(fn [xs] (reduce (fn [ys x] (if (some #{x} ys) ys (conj ys x))) [] xs))", "problem": 56, "user": "4fb65f2fe4b081705acca2c7"}, {"code": "(fn [x] (reduce #(if (some (partial = %2) %) % (conj % %2)) [] x))", "problem": 56, "user": "4f7e07f4e4b06e829148e1c9"}, {"code": "reduce #(if ((set %) %2) % (conj % %2)) []", "problem": 56, "user": "4fc4eadee4b081705acca353"}, {"code": "#(reduce\n   (fn [l e]\n     (if (not (some (partial = e) l))\n         (conj l e)\n         l))\n   []\n   %)", "problem": 56, "user": "4faac363e4b081705acca200"}, {"code": "(fn [s]\n  (loop [vis #{} ret [] s s]\n    (if (empty? s)\n      ret\n      (if (vis (first s))\n        (recur vis ret (rest s))\n        (recur (conj vis (first s)) (conj ret (first s)) (rest s))))))", "problem": 56, "user": "4fb4f42ae4b081705acca2b4"}, {"code": "(fn dist [x]\n  (loop [[h & t] x, seen #{}, acc []]\n    (cond\n      (nil? h) acc\n      (seen h) (recur t seen acc)\n      :else (recur t (conj seen h) (conj acc h)))))", "problem": 56, "user": "4fc0853ae4b081705acca327"}, {"code": "(fn [xs] \n  (loop [res [] xs xs] \n    (if (empty? xs) \n        res \n        (recur (conj res (first xs)) (remove #(= (first xs) %) xs)))))", "problem": 56, "user": "4fa6a491e4b081705acca1bc"}, {"code": "(fn distinct--group [coll]\n  (->> coll                 ; [:a :b :c :b]\n       (map-indexed vector) ; ([0 :a] [1 :b] [2 :c] [3 :b])\n       (group-by second)    ; {:a [[0 :a]], :b [[1 :b] [3 :b]], :c [[2 :c]]}\n       (map (juxt first (comp ffirst second))) ; ([:b 1] [:a 0] [:c 2])\n       (sort-by second)     ; ([:a 0] [:b 1] [:c 2])\n       (map first)))        ; (:a :b :c)", "problem": 56, "user": "4fc6305de4b0ee37620e180b"}, {"code": "(fn [n]\n    (loop [cnt 0 acc [] s (set [])]\n       (if (= (count n) cnt)\n            acc\n            (recur \n              (inc cnt) \n              (if (contains? s (nth n cnt)) acc (conj acc (nth n cnt))) \n              (conj s (nth n cnt))\n            )\n      )\n  ) \n)", "problem": 56, "user": "4fb3dd1ee4b081705acca2a5"}, {"code": "(fn [l]\n  (loop [set   #{}\n         arr    []\n         [h & t]  l]\n    (if h\n      (recur (conj set h) (if (contains? set h) arr (conj arr h)) t)\n       arr)))", "problem": 56, "user": "4fc8c8d8e4b0ee37620e183b"}, {"code": "(fn nub\n  ([seen coll]\n     (if-let [[x & xs] (seq coll)]\n       (if (seen x)\n         (nub seen xs)\n         (cons x (nub (conj seen x) xs)))\n       '()))\n  ([coll] (nub #{} coll)))", "problem": 56, "user": "4fcaf7a4e4b0ee37620e1857"}, {"code": "(fn [v] (reduce #(if ((set %) %2) % (conj % %2)) [] v))", "problem": 56, "user": "4fca1cd6e4b0ee37620e184c"}, {"code": "(fn [s] \n  ((fn [ l c ] \n    (if (empty? l) c \n      (recur ( rest l ) ( if (some #(= % ( first l )) c ) c (concat c (list (first l))) ) ) )\n   ) s (empty s) ))", "problem": 56, "user": "4fc43a8ee4b081705acca346"}, {"code": "(fn [coll]\n    (let [step (fn step [xs seen]\n                   (lazy-seq\n                    ((fn [[f :as xs] seen]\n                      (when-let [s (seq xs)]\n                        (if (contains? seen f) \n                          (recur (rest s) seen)\n                          (cons f (step (rest s) (conj seen f))))))\n                     xs seen)))]\n      (step coll #{})))", "problem": 56, "user": "4fa2fa5ee4b081705acca186"}, {"code": "reduce #(if (some #{%2} %1) %1 (conj %1 %2)) []", "problem": 56, "user": "4fc67081e4b0ee37620e1813"}, {"code": "(fn strip [[h & t]]\n  (cond\n    (nil? h) ()\n    :else\n      (conj\n        (strip (filter (partial not= h) t))\n        h)))", "problem": 56, "user": "4fce5474e4b0d4b2a7a9d451"}, {"code": "(fn [v]\n  (reduce #(if (.contains %1 %2) %1 (conj %1 %2)) [] v)\n  )", "problem": 56, "user": "4fcad14ce4b0ee37620e1856"}, {"code": "(fn dstnct [coll]\n  (if (empty? coll)\n    coll\n    (cons (first coll)\n          (dstnct (filter #(not= (first coll) %) coll)))))", "problem": 56, "user": "4f7431d2e4b044e54cd9a8f7"}, {"code": "#((fn [-rest -vec -set]\n    (if (empty? -rest)\n      -vec\n      (let [[f & r] -rest]\n        (if (contains? -set f)\n          (recur r -vec -set)\n          (recur r (conj -vec f) (conj -set f))))))\n  % [] #{})", "problem": 56, "user": "4fb1d907e4b081705acca282"}, {"code": "(fn [coll]\n  (reduce\n    #(if (some (partial = %2) %) % (conj % %2)) []\n    coll))", "problem": 56, "user": "4fd22e70e4b04c3a95aa041c"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "4f91f5b1e4b0dcca54ed6ca7"}, {"code": "(fn [coll] \n  ((fn step [[x & xs] seen] \n     (when x\n       (if (seen x) \n         (step xs seen)\n         (cons x (step xs (conj seen x)))))) \n   coll #{}))", "problem": 56, "user": "4fc2e302e4b081705acca33a"}, {"code": "(fn chmp[tgt st coll]\n  (if (empty? coll) tgt\n      (if (not (contains? st (first coll))) (chmp (conj tgt (first coll)) (conj st (first coll)) (rest coll))\n          (chmp tgt st (rest coll))))) [] #{}", "problem": 56, "user": "4fb86dc9e4b081705acca2d8"}, {"code": "reduce #(if (some #{%2} %)\n              %\n              (conj % %2))\n            []", "problem": 56, "user": "4ec3b393535dcc7ae8597d59"}, {"code": "reduce\n  (fn [a x] (if (some #(= x %) a) a (conj a x)))\n  []", "problem": 56, "user": "4fd96694e4b05e33b9224f37"}, {"code": "(fn [coll]\n    (loop [s #{}\n           r []\n           c (seq coll)]\n      (if c\n        (if (contains? s (first c))\n          (recur s r (next c))\n          (recur (conj s (first c)) (conj r (first c)) (next c)))\n        r)))", "problem": 56, "user": "4e5be681535d8a8b8723a2bc"}, {"code": "#(reduce (fn [x y] (if (neg? (.indexOf x y)) (conj x y) x)) [] %)", "problem": 56, "user": "4fb12b35e4b081705acca275"}, {"code": "(fn [s] (sort-by #(.indexOf s %) (seq (set s))))", "problem": 56, "user": "4fa67030e4b081705acca1b7"}, {"code": "(fn [c] (loop [r [] s #{} c c]\r\n    (if (empty? c) r (if (s (first c)) (recur r s (rest c)) (recur (conj r (first c)) (conj s (first c)) (rest c))))))", "problem": 56, "user": "4fd29d7ce4b04c3a95aa0424"}, {"code": "reduce\n    #(if-not (some #{%2} %1)\n       (into %1 [%2])\n       %1)\n    []", "problem": 56, "user": "4e5fdd68535d8ccf87e9fe4f"}, {"code": "(fn [x]\r\n  (reduce #(if (not-any? #{%2} %1)\r\n             (conj %1 %2)\r\n             %1) [] x))", "problem": 56, "user": "4f82ed48e4b033992c121c0e"}, {"code": "(fn [a]\n    (letfn [( f [x y]\n        (if (empty? x) y\n          (f  (filter #(not= (first x) %) x) (conj y (first x)))))] ( f a [])))", "problem": 56, "user": "4fccdc75e4b0ee37620e186d"}, {"code": "(partial\nreduce\n  #(if (nil? (some #{%2} %1)) (conj %1 %2)\n    %1)\n  [])", "problem": 56, "user": "4fd6f4d8e4b0dab7d829f37b"}, {"code": "(fn [s] \n  (loop [[h & t :as src] s chk #{} dst []]\n    (if src\n      (recur t (conj chk h) (if (contains? chk h) dst (conj dst h)))\n      dst)))", "problem": 56, "user": "4fdec88fe4b05e33b9224f8e"}, {"code": "(fn unique[coll] (reverse (reduce #(if (contains? (set %1) %2) %1 (\n    cons %2 %1)) [] coll\n    )\n  )\n)", "problem": 56, "user": "4fce75cfe4b03432b189f400"}, {"code": "reduce #(if ((set %) %2) % (conj % %2)) []", "problem": 56, "user": "4fd91099e4b05e33b9224f32"}, {"code": "(fn [s] \n  (keys \n    (sort-by val < (apply merge-with min \n      (map #(hash-map % %2) s (range (count s)))))))", "problem": 56, "user": "4ecbd630535df97575fdabe1"}, {"code": "(fn remdup [s]\r\n   (cond\r\n      (empty? s) '()\r\n      :else (cons (first s) (remdup (remove #(= (first s) %) (rest s))))))", "problem": 56, "user": "4fcc6cb3e4b0ee37620e1861"}, {"code": "reduce (fn [a b]\n          (if (= -1 (.indexOf a b))\n              (conj a b)\n              a)) []", "problem": 56, "user": "4fdd27f3e4b05e33b9224f78"}, {"code": "reduce (fn [v x] (if (some (partial = x) v) v (conj v x))) []", "problem": 56, "user": "4fca2ef0e4b0ee37620e184e"}, {"code": "(fn [s]\n  (loop [a s b [] c #{}]\n    (if a\n      (let [f (first a) n (next a)]\n      (if (contains? c f)\n        (recur n b c)\n        (recur n (conj b f) (conj c f))))\n      b)))", "problem": 56, "user": "4f726dd2e4b07046d9f4f034"}, {"code": "(fn [a]\n  (loop [r []\n         a a]\n    (let [x (first a)]\n      (cond (nil? x) r\n            ((set r) x) (recur r (rest a))\n            :else (recur (conj r x) (rest a))))))", "problem": 56, "user": "4fde492be4b05e33b9224f8a"}, {"code": "(fn [col]\n  (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] col))", "problem": 56, "user": "4fd7962ee4b0dab7d829f385"}, {"code": "(fn find-distinct-items [s]\n  (letfn [(add-if-unique [s e]\n            (if (some (hash-set e) s)\n              s\n              (conj s e)))]\n    (reduce add-if-unique [] s)))", "problem": 56, "user": "4f68c485e4b07046d9f4ef7c"}, {"code": "(fn d [coll]\n  (if (empty? coll)\n      coll\n  (cons (first coll)\n        (d (filter #(not= (first coll) %)\n                     (rest coll))))))", "problem": 56, "user": "4fe8aef4e4b07c9f6fd12c6c"}, {"code": "(fn f [[h & t]]\r\n    (if h\r\n      (cons h (f (remove #{h} t)))))", "problem": 56, "user": "4ee1f2ba535d10e5ff6f535f"}, {"code": "(fn [s]\n  ((fn iter [in out]\n    (if (empty? in)\n      out\n      (if (= nil (some #(= % (first in)) out))\n        (iter (rest in) (conj out (first in)))\n        (iter (rest in) out))))\n  s []))", "problem": 56, "user": "4fe8e771e4b0547ebccb2431"}, {"code": ";#(map first (partition-by identity (sort %)))\n\n(fn [coll] \n          (loop [c coll r []]\n             (let [elm (first c) \n                  gotit? (not (nil? (some #{elm} r )))]\n                  (cond\n                    (empty? c) r\n                    gotit? (recur (rest c) r)\n                    :fallthru (recur (rest c) (conj r elm))\n                 )\n             )\n        ))", "problem": 56, "user": "4e86d3cf535dceadca46984c"}, {"code": "(fn [s]\r\n  (loop [a s ret []]\r\n    (if (empty? a)\r\n      ret\r\n      (if (zero? (count (filter #(= (first a) %) ret)))\r\n        (recur (rest a) (conj  ret (first a)))\r\n        (recur (rest a) ret)))))", "problem": 56, "user": "4fab31a8e4b081705acca215"}, {"code": "#(reduce (fn [coll item]\n  (if (some (partial = item) coll) coll (conj coll item)))\n  [] %)", "problem": 56, "user": "4fe88f78e4b07c9f6fd12c45"}, {"code": "(fn dstnct [coll]\n  (let [step (fn step [xs seen]\n             (lazy-seq\n              ((fn [[f :as xs] seen]\n                (when-let [s (seq xs)]\n                  (if (contains? seen f)\n                    (recur (rest s) seen)\n                    (cons f (step (rest s) (conj seen f))))))\n               xs seen)))]\n      (step coll #{})))", "problem": 56, "user": "4fc93728e4b0ee37620e1844"}, {"code": "#(loop [x #{}, s %, res []] (if (empty? s) res (let [[c & r] s] (if (x c) (recur x r res) (recur (conj x c) r (conj res c))))))", "problem": 56, "user": "4feada56e4b0140c20fb9c11"}, {"code": "reduce (fn [a n] (if (some #{n} a) a (conj a n))) []", "problem": 56, "user": "4fe9de74e4b0547ebccb2475"}, {"code": "(fn [coll]\r\n    (let [step (fn step [xs seen]\r\n                   (lazy-seq\r\n                    ((fn [[f :as xs] seen]\r\n                      (when-let [s (seq xs)]\r\n                        (if (contains? seen f) \r\n                          (recur (rest s) seen)\r\n                          (cons f (step (rest s) (conj seen f))))))\r\n                     xs seen)))]\r\n      (step coll #{})))", "problem": 56, "user": "4fdf4e2be4b05e33b9224f96"}, {"code": "(fn remdup [s]\n  (if (empty? s)\n     []\n     (cons (first s) \n           (remdup (filter #(not= % (first s)) (rest s))))))", "problem": 56, "user": "4fe87e56e4b07c9f6fd12c40"}, {"code": "(fn [coll]\n  (reduce\n   #(if (contains? (set %1) %2) %1 (conj %1 %2))\n   []\n   coll))", "problem": 56, "user": "4f8bbb27e4b02e764a0a5182"}, {"code": "#(let [dst (fn [sq rs st]\n              (let [x (first sq)\n                    r (rest sq)\n                    nrs (if (get st x) rs (conj rs x))] \n                   (if (seq r)\n                     (recur r nrs (conj st x))\n                     nrs)))]\n      (dst % [] #{}))", "problem": 56, "user": "4f05ea25535dcb61093f6c02"}, {"code": "(fn [coll]\n  ((fn [coll acc]\n    (cond\n      (empty? coll)\n        acc\n      (some #(= (first coll) %) acc)\n        (recur (rest coll) acc)\n      :else\n        (recur (rest coll) (concat acc (list (first coll))))))\n    coll '()))", "problem": 56, "user": "4fdb881ee4b05e33b9224f5e"}, {"code": "reduce #(if (some #{%2} %1) %1 (conj %1 %2)) []", "problem": 56, "user": "4fe8b6afe4b07c9f6fd12c76"}, {"code": "(fn\n  [c]\n  (let [foo\n  (fn\n    [v s]\n    (if (not (seq s))\n      v\n      (if (some #{(first s)} v)\n        (recur v (rest s))\n        (recur (conj v (first s)) (rest s))\n      )\n  ))]\n(foo [] c)))", "problem": 56, "user": "4f18677d535d64f603146459"}, {"code": "(fn [coll] \r\n  ((fn step [[x & xs] seen] \r\n     (when x\r\n       (if (seen x) \r\n         (step xs seen)\r\n         (cons x (step xs (conj seen x)))))) \r\n   coll #{}))", "problem": 56, "user": "4ff07688e4b0678c553fc324"}, {"code": "(fn [coll]\r\n  (loop [seen #{} [x & xs] (vec coll)  accum []]\r\n    (if x\r\n      (if (seen x) \r\n        (recur seen xs accum)\r\n        (recur (conj seen x) xs (conj accum x)))\r\n      accum)))", "problem": 56, "user": "4e79ff2a535db169f9c796a9"}, {"code": "reduce #(if (not-any? (partial = %2) %1) (conj %1 %2) %1) []", "problem": 56, "user": "4fe83efbe4b07c9f6fd12c3b"}, {"code": "#(reduce (fn [x y]\n          (if ((set x) y) x (conj x y))) [] %)", "problem": 56, "user": "4ff304f4e4b0678c553fc343"}, {"code": "(fn [coll]\r\n  (let [f\r\n          (fn [xs x]\r\n              (if (contains? (set xs) x) xs (conj xs x)))]\r\n\t(cond (vector? coll)\r\n       (reduce f (cond (vector? coll) [] (list? coll) '() :else '()) coll)\r\n\t\t(seq? coll)\r\n          (reverse (reduce f (cond (vector? coll) [] (seq? coll) '() :else '()) coll))\r\n          )))", "problem": 56, "user": "4ff3df0fe4b0678c553fc355"}, {"code": "(fn [coll] (reduce (fn [memo curr] (if (nil? (some #(= % curr) memo)) \n                                   (conj memo curr) \n                                   memo)) [] coll))", "problem": 56, "user": "4ff50604e4b0678c553fc365"}, {"code": "(fn [coll]\r\n  \t(loop [s #{}, acc [], coll coll]\r\n\t\t\t(if (seq coll)\r\n\t\t\t\t(if (s (first coll))\r\n\t\t\t\t\t(recur s acc (rest coll))\r\n\t\t\t\t\t(recur (conj s (first coll)) (conj acc (first coll)) (rest coll)))\r\n\t\t\t\tacc)))", "problem": 56, "user": "4f4fbed7e4b03ad3f0c10ce8"}, {"code": "(fn [x]\r\n  (first (reduce (fn [[res seen] c]\r\n                   [(if (contains? seen c) res (conj res c)) (conj seen c)])\r\n                   [[] #{}] x)))", "problem": 56, "user": "4ff201d7e4b0678c553fc330"}, {"code": "(fn [coll]\n  (->> coll\n    (reduce\n      (fn [[s l] v]\n        (if (contains? s v)\n          [s l]\n          [(conj s v) (cons v l)]))\n      [#{} '()])\n    second\n    reverse))", "problem": 56, "user": "4ff5744ae4b0678c553fc36a"}, {"code": "(fn [coll]\n(loop [[x & xs :as all] coll found #{} res []]\n  (if x\n    (if (contains? found x)\n      (recur xs found res)\n      (recur xs (conj found x) (conj res x)))\n    res)))", "problem": 56, "user": "4e95c771535dbda64a6f6b39"}, {"code": "(fn ! [l]\n  (reverse\n    (reduce\n      #(if (some (partial = %2) %1)\n        %1\n        (cons %2 %1))\n      []\n      l)))", "problem": 56, "user": "4ff3e771e4b0678c553fc356"}, {"code": "(fn mydist [inlist]\n  (if (empty? inlist)\n    []\n    (let [part (mydist (butlast inlist))]\n      (if (some #{(last inlist)} part)\n        part\n        (concat part [(last inlist)])))))\n\n;#(keys (group-by identity %))\n; ^ Works but does not preserve order", "problem": 56, "user": "4fc50bcbe4b081705acca375"}, {"code": "(fn [l]\n  (loop [accum [], prior #{}, l l]\n\t\t(if (empty? l)\n\t\t\taccum\n\t\t\t(let [next (first l)]\n\t\t\t\t(if (nil? (get prior next))\n\t\t\t\t\t(recur (conj accum next) (conj prior next) (rest l))\n\t\t\t\t\t(recur accum prior (rest l)))))))", "problem": 56, "user": "4fb57e06e4b081705acca2bf"}, {"code": "(fn [s]\n  (loop [x s\n         acc []\n         back #{}]\n    (if (nil? x)\n      acc\n      (let [head (first x)]\n        (if (contains? back head)\n          (recur (next x) acc back)\n          (recur (next x) (conj acc head) (conj back head)))))))", "problem": 56, "user": "4ff9d4e5e4b0678c553fc3b0"}, {"code": "(fn [the-list] (reduce (fn [new-list e]\n  (if (some #(= e %) new-list) new-list \n  (conj new-list e))) [] the-list))", "problem": 56, "user": "4fe5f342e4b0e8f79898fecb"}, {"code": "(fn distnct [c]\n    (reduce #(if (some (fn [e] (= e %2)) %1) %1 (conj %1 %2)) [] c))", "problem": 56, "user": "4ff4c9dae4b0678c553fc360"}, {"code": "(fn [coll]\n  (:list\n    (reduce\n      (fn [{ell :list ess :set} val]\n        (if (contains? ess val)\n          {:list ell :set ess}\n          {:list (conj ell val) :set (conj ess val)}))\n      {:list [] :set #{}}\n      coll)))", "problem": 56, "user": "4dbb64c8535d1e037afb21b6"}, {"code": ";#(loop [dist []\n;          seen #{}\n;          arr %]\n;     (if (empty? arr) dist\n;       (let [item (first arr)\n;             newarr (rest arr)]\n;         (if (seen item) (recur dist seen newarr)\n;           (recur (conj dist item) (conj seen item) newarr)))))\n\n(fn [xs]\n  (-> (reduce\n       (fn [[seen distinct-coll] next]\n         (if (contains? seen next) [seen distinct-coll]\n             [(conj seen next)\n              (conj distinct-coll next)]))\n       [#{} []] xs)\n      second))", "problem": 56, "user": "4da8dd6e30acd6ed12482a68"}, {"code": "reduce #(if ((set %) %2) % (conj % %2)) []", "problem": 56, "user": "4ff82b00e4b0678c553fc395"}, {"code": "(fn [aseq]\n  \t(loop [in aseq items #{} out []]\n\t\t\t(if (empty? in) out\n\t\t\t\t(if (contains? items (first in))\n\t\t\t\t\t(recur (rest in) items out)\n\t\t\t\t\t(recur (rest in) (conj items (first in)) (conj out (first in)))))))", "problem": 56, "user": "4e6a63fd535d8ccf87e9feda"}, {"code": "(fn distnct\r\n  ([s] (distnct s []))\r\n  ([s acc]\r\n   (if-let [[x & r] s]\r\n     (if (not-any? #(= % x) acc)\r\n       (recur r (conj acc x))\r\n       (recur r acc))\r\n     acc)))", "problem": 56, "user": "500159b3e4b0678c553fc419"}, {"code": "reduce (fn [c a] (if (some #{a} c) c (conj c a))) []", "problem": 56, "user": "4db2cd84535df7e46ed9b6c6"}, {"code": "(fn [param]\r\n      (loop [data param result []]\r\n  \t(cond \r\n         \t(empty? data) \r\n         \t\tresult\r\n            (some #(= (first data) %) result )\r\n         \t\t(recur (rest data) result)\r\n         \t(= 1 1) \r\n         \t\t(recur (rest data) \r\n                (concat result [(first data)]))\r\n         )\r\n\t  )\r\n   )", "problem": 56, "user": "4fe588b6e4b0e8f79898fec5"}, {"code": "(fn dist [s]\n  (reduce (fn [a e] (if (not (some #{e} a)) (conj a e) a)) [] s))", "problem": 56, "user": "5003deb9e4b0678c553fc445"}, {"code": "(fn my-distinct\n  ([coll] (my-distinct coll #{}))\n  ([coll s]\n    (cond\n      (empty? coll) \n      []\n      (contains? s (first coll))\n      (my-distinct (rest coll) s)\n      :else\n      (cons (first coll)\n            (my-distinct (rest coll) (conj s (first coll)))))))", "problem": 56, "user": "5002b6e5e4b0678c553fc42c"}, {"code": "(fn [coll]\n    (let [step (fn step [xs seen]\n                   (lazy-seq\n                    ((fn [[f :as xs] seen]\n                      (when-let [s (seq xs)]\n                        (if (contains? seen f) \n                          (recur (rest s) seen)\n                          (cons f (step (rest s) (conj seen f))))))\n                     xs seen)))]\n      (step coll #{})))", "problem": 56, "user": "4fdf2b50e4b05e33b9224f93"}, {"code": "(fn uniq \n  ([coll] (uniq coll [] #{}))\n  ([coll acc aux]\n    (let [[f & r] (seq coll)]\n      (if (not (nil? coll))\n        (if (not (nil? (aux f)))\n          (uniq r acc aux)\n          (uniq r (conj acc f) (conj aux f)))\n        acc))))", "problem": 56, "user": "4f625f68e4b0defedf855fd2"}, {"code": "#(vec (java.util.LinkedHashSet. %))", "problem": 56, "user": "5003ee7de4b0678c553fc446"}, {"code": "(fn [coll]\r\n  (reduce \r\n\t (fn [x y](if (some #(= y %) x) x (conj x y)))\r\n\t [] coll))", "problem": 56, "user": "4fb23582e4b081705acca28a"}, {"code": "#(loop [c % s #{} r []]\r\n    (if (empty? c)\r\n      r\r\n      (if (contains? s (first c))\r\n        (recur (rest c) s r)\r\n        (recur (rest c) (conj s (first c)) (conj r (first c))))))", "problem": 56, "user": "4e57d1e2535d8a8b8723a289"}, {"code": "(fn nonodupes [iseq]\n    (loop [sequence iseq\n           seen #{}\n           output (empty iseq)]\n      (if (empty? sequence)\n        output\n        (if (contains? seen (first sequence))\n          (recur (rest sequence) seen output)\n          (recur (rest sequence) (conj seen (first sequence))\n                 (concat output (cons (first sequence) (empty iseq))))))))", "problem": 56, "user": "50057f23e4b0678c553fc466"}, {"code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "problem": 56, "user": "500933a6e4b046cdb195e074"}, {"code": "(fn [v] \n  (reduce #(if (some #{%2} %) % (conj % %2)) [] v))", "problem": 56, "user": "4fdb02aae4b05e33b9224f56"}, {"code": "(fn [coll]\n  (first\n   (reduce (fn [[out s] x]\n             (if (s x)\n               [out s]\n               [(conj out x) (conj s x)]))\n           [[] #{}]\n           coll)))", "problem": 56, "user": "500d8c49e4b07ccb9a7ddb00"}, {"code": "#((fn [l uniq hash]\n     (if (empty? l)\n       (reverse uniq)\n       (let [hd (first l)]\n         (if (> (get hash hd 0) 0)\n           (recur (rest l) uniq hash)\n           (recur (rest l) (cons hd uniq) (assoc hash hd 1)))))) % '() {})", "problem": 56, "user": "4ff355a1e4b0678c553fc34d"}, {"code": "(comp first (partial reduce (fn [[cum seen] it] \n  (if (seen it) \n    [cum seen]\n    [(conj cum it) (conj seen it)])) [[] #{}]))", "problem": 56, "user": "4fe900a6e4b0547ebccb243a"}, {"code": "#(second (reduce (fn [[s r] v] [(conj s v) (if (s v) r (conj r v))]) [#{} []] %))", "problem": 56, "user": "500aa15ee4b03d00572d2d76"}, {"code": "(comp last (partial reduce (fn [[s r] e] [(conj s e) (if (s e) r (conj r e))]) [#{} []]))", "problem": 56, "user": "4e8742d4535dceadca46984f"}, {"code": "(fn [coll]\n  (loop [acc [], seen #{}, xs coll]\n    (if (empty? xs)\n      acc\n      (let [x (first xs)]\n        (recur (if (seen x) acc (conj acc x))\n               (conj seen x)\n               (rest xs))))))", "problem": 56, "user": "500ff421e4b0ae202717946f"}, {"code": "(fn __ [v]\n   (if (vector? (first v))\n     (keys (group-by identity v))\n     (sort (into #{} v))))", "problem": 56, "user": "4ec9549d535d6d7199dd36fe"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "4f0c4518535d0136e6c2230b"}, {"code": "(fn [c]\n  ((fn step [[x & y] seen]\n     (when x\n       (if (seen x)\n         (step y seen)\n         (cons x (step y (conj seen x))))))\n   c #{}))", "problem": 56, "user": "500cb910e4b05f7c30cfa698"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "5014718fe4b094324338f8e3"}, {"code": "(fn [c] \r\n  (reduce \r\n    #(if (some (partial = %2) %1) %1 (conj %1 %2)) \r\n    [] \r\n    c))", "problem": 56, "user": "500d1db4e4b05f7c30cfa69f"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "4dae0510c9a9d6ed4b99dc57"}, {"code": "#(loop\n  [xs (rest %) x (first %) ans []]\n(let [ys\n  (filter (fn [y] (not= y x)) xs)]\n(if (empty? ys)\n(conj ans x)\n(recur\n  (rest ys) (first ys) (conj ans x)))))", "problem": 56, "user": "5012614ee4b02a085b99dc79"}, {"code": ";; no idea why this works in my repl and not on 4clojure\n;(fn [s]\n;  (sort #(< (. s indexOf %1)\n;            (. s indexOf %2))\n;        (set s)))\n\n(fn dis [s]\n  (let [ n (first s) ]\n    (if (nil? n)\n      ()\n      (cons n\n            (dis (remove #(= n %) s))))))", "problem": 56, "user": "4ec56b5b535d6d7199dd369f"}, {"code": "(fn dist [coll]\n(loop [items (into #{} coll)\n      wc coll\n      nc []]\n(if (empty? items)\n  nc\n  (if (contains? items (first wc))\n    (recur (disj items (first wc)) \n            (next wc)\n            (conj nc (first wc)))\n    (recur items (next wc) nc)))))", "problem": 56, "user": "50127fbfe4b030d97e4db70f"}, {"code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "problem": 56, "user": "500900dee4b0144d4f561e42"}, {"code": "(fn [coll]\n  (reduce\n    (fn [memo item]\n      (if (some #(= % item) memo)\n        memo\n        (conj memo item)))\n    []\n    coll))", "problem": 56, "user": "4f92884de4b0dcca54ed6caf"}, {"code": "(fn mydistinct\n  [coll]\n  (reduce #(if (some #{%2} %)\n             %\n             (conj % %2)) [] coll))", "problem": 56, "user": "4fe89297e4b07c9f6fd12c4c"}, {"code": "#(letfn\n     [(step [s seen]\n        (lazy-seq\n         (when-let [[h & t] (seq (drop-while seen s))]\n                               (cons h (step t (conj seen h))))))]\n   (step % #{}))", "problem": 56, "user": "50142490e4b07d18bdaaf70a"}, {"code": "(fn[s] \n(:r (reduce (fn[x y] {:r (if (contains? (get x :u) y)  (x :r)(conj (x :r) y)),:u (conj (get x :u) y)}) {:r [],:u #{}} s)\n))", "problem": 56, "user": "5017eface4b02f523d7cc5e7"}, {"code": "(fn fdi [input]\n  (loop [input input result [] hset #{}]\n    (if (empty? input)\n      result\n      (if (hset (first input))\n        (recur (rest input) result hset)\n        (recur (rest input) (conj result (first input)) (conj hset (first input)))\n        )\n      )\n    )\n  )", "problem": 56, "user": "4fcf5292e4b03432b189f40e"}, {"code": "(fn [x] (reduce #(if ((set %1) %2) %1 (conj %1 %2)) [] x))", "problem": 56, "user": "500b61b1e4b03d00572d2d81"}, {"code": "(fn uniq ([s] (uniq s [])) ([s coll]\n  (if-let [[x & xs] s]\n    (recur xs (if ((set coll) x) coll (conj coll x)))\n    coll)))", "problem": 56, "user": "50166470e4b052339a490e76"}, {"code": "(fn [s]\n  (loop [seen #{}\n         ret  []\n         [x & xs] s]\n    (if (nil? x)\n        ret\n        (if (seen x)\n            (recur seen ret xs)\n            (recur (conj seen x) (conj ret x) xs)))))", "problem": 56, "user": "4ff4f5c4e4b0678c553fc362"}, {"code": "(fn ds [s]\r\n  (loop [o #{}\r\n         ss s\r\n         res [] ]\r\n    (if (empty? ss)\r\n      res\r\n      (recur (conj o (first ss)) (rest ss) (if (contains? o (first ss))\r\n                                             res\r\n                                             (conj res (first ss))))\r\n      )\r\n    )\r\n  )", "problem": 56, "user": "4febb4dae4b0681fd128dc98"}, {"code": "(fn [coll]\n   (let [uniq (fn uniq [xs seen]\n                    ((fn [[f :as xs] seen]\n                      (when (not-empty xs)\n                        (if (contains? seen f) \n                          (recur (rest xs) seen)\n                          (cons f (uniq (rest xs) (conj seen f))))))\n                     xs seen))]\n      (uniq coll #{})))", "problem": 56, "user": "4fe8a3bde4b07c9f6fd12c61"}, {"code": "(fn [coll] \n  ((fn step [[x & xs] seen] \n     (when x\n       (if (seen x) \n         (step xs seen)\n         (cons x (step xs (conj seen x)))))) \n   coll #{}))", "problem": 56, "user": "4eb8ec4a535dfed6da9c6d4b"}, {"code": "(fn [l]\r\n  (loop [a l b []]\r\n    (if (empty? a) \r\n      b\r\n    (recur (rest a) \r\n           (if (some #(= % (first a)) b) \r\n             b \r\n             (conj b (first a)))))))", "problem": 56, "user": "4fd8544be4b0dab7d829f390"}, {"code": "(fn [items]\n  (reduce \n    (fn [x y] \n      (if (nil? (some (fn [z] (= y z)) x))\n          (conj x y) \n          x)) \n  [] items))", "problem": 56, "user": "4e944706535dbda64a6f6b11"}, {"code": "(fn [c] (reduce (fn [s x] (if (some #(= x %) s) s (conj s x))) [] c))", "problem": 56, "user": "4f9f7daae4b0dcca54ed6d37"}, {"code": "(fn [s]\n  (let [d (atom {})]\n    (for [n s :when (not (@d n))] (do (swap! d #(assoc % n true)) n))))", "problem": 56, "user": "4fcf642ee4b03432b189f410"}, {"code": "; Without maintaining order...\n; #(for [[k v] (frequencies %)] k)\n\n(fn [coll]\n  (reduce \n    #(if (contains? (into #{} %1) %2)\n       %1 \n     \t(conj %1 %2)) \n    [] \n    coll))", "problem": 56, "user": "501c1492e4b086d93747d180"}, {"code": "(fn foo [coll]\r\n  (reduce \r\n    (fn [acc x]\r\n      (if (some #(= x %) acc)\r\n        acc\r\n        (conj acc x)))\r\n    []\r\n    coll))", "problem": 56, "user": "4e113a81535d04ed9115e7c5"}, {"code": "(fn [s]\n  (reduce #(if(some #{%2} %)\n             %\n             (concat % [%2])) [] s))", "problem": 56, "user": "4ed8b598535d10e5ff6f52fc"}, {"code": "(fn [coll]\n  (let [freqs-map (reduce (fn [m k] (update-in m [k] #(or % (count m)))) (sorted-map) coll)\n        invs-freq-map (apply sorted-map (interleave (vals freqs-map) (keys freqs-map)))]\n    (vals invs-freq-map)))", "problem": 56, "user": "5028cd0fe4b01614d1633ffc"}, {"code": "(fn [s] (mapcat  (fn [x y] (if  (some #{x} y ) nil,(list x)))  s (map #(take % s)  (range 0 (count s)))))", "problem": 56, "user": "5007cdb9e4b0b17c647f5227"}, {"code": "(fn dist [coll] \n  ((fn nextEl [cset clst coll]\n    (let [fst (first coll)]\n    (if (empty? coll) (reverse clst)\n      (if (contains? cset fst)\n             (nextEl cset clst (rest coll))\n             (nextEl (conj cset fst) (cons fst clst) (rest coll) )))))\n  #{} '() coll))", "problem": 56, "user": "502a5fa4e4b09e8f859a9fbd"}, {"code": "#(loop [i % r []]\n (if (= [] i)\n   r\n   (recur (rest i) (if ((into #{} r) (nth i 0)) r (conj r (nth i 0) )))))", "problem": 56, "user": "4e43b0d9535dc968683fc4a3"}, {"code": "(fn [s] (sort-by #(.indexOf s %) (map first (group-by identity s))))", "problem": 56, "user": "502a5e59e4b09e8f859a9fbc"}, {"code": "reduce #(if (apply distinct? (conj % %2)) (conj % %2) %) []", "problem": 56, "user": "4e9609ad535dbda64a6f6b3e"}, {"code": "(fn [s] \n  (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] s))", "problem": 56, "user": "5009fd0ae4b03d00572d2d70"}, {"code": "(fn __ [col]\n  (if (< (count col) 2)\n    col\n     (cons (first col) \n         (__ (remove #(= (first col) %) (rest col))))))", "problem": 56, "user": "4fa719c0e4b081705acca1bf"}, {"code": "#((fn i [s seen]\r\n     (if (seq s)\r\n       (let [item (first s)]\r\n         (if (seen item)\r\n           (i (rest s) seen)\r\n           (cons item (i (rest s) (conj seen item)))))\r\n       s)\r\n     ) % #{})", "problem": 56, "user": "502873a8e4b01614d1633ff8"}, {"code": "#(let [step (fn step[[f :as xs] seen]\n              (when-let [s (seq xs)]\n               (if (contains? seen f) \n                 (recur (rest s) seen) \n                 (cons f (step (rest s) (conj seen f))))))]\n  (step % #{}))", "problem": 56, "user": "4db13ff51254ad5b4805fa68"}, {"code": "(fn [coll]\r\n    (let [step (fn step [xs seen]\r\n                   (lazy-seq\r\n                    ((fn [[f :as xs] seen]\r\n                      (when-let [s (seq xs)]\r\n                        (if (contains? seen f) \r\n                          (recur (rest s) seen)\r\n                          (cons f (step (rest s) (conj seen f))))))\r\n                     xs seen)))]\r\n      (step coll #{})))", "problem": 56, "user": "5028bce0e4b01614d1633ffb"}, {"code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "problem": 56, "user": "5032b066e4b00c0952a257ea"}, {"code": "(fn [s]\n      (loop [s s st #{} x []]\n        (if (empty? s) x\n          (if (contains? st (first s))\n            (recur (rest s) st x)\n            (recur (rest s) (conj st (first s)) (conj x (first s)))))))", "problem": 56, "user": "5029fccee4b023940c84aa47"}, {"code": "#(loop [rv [] checked #{} values %]\n   (if (empty? values) rv\n     (let [v (first values)]\n       (recur (if (contains? checked v) rv (conj rv v))\n              (conj checked v)\n              (rest values)))))", "problem": 56, "user": "50052d38e4b0678c553fc45c"}, {"code": "(fn [coll]\n  (let [repeated? first\n        initial-accum [nil nil #{}]\n        stepf (fn [[_ _ seen] x]\n  \t      \t[(contains? seen x) x (conj seen x)])\n        lifted (rest (reductions stepf initial-accum coll))\n        ]\n   (map second \n        (remove repeated? lifted))))", "problem": 56, "user": "502bb7c0e4b0194ad32ea1a3"}, {"code": "(fn [xs]\n  (filter #(not (nil? %))\n          (second (reduce (fn [[uni res] x]\n                              [(conj uni x) (conj res (if (uni x) nil x))])\n                          [#{} []]\n                          xs))))", "problem": 56, "user": "4f2a35ace4b0d6649770a03a"}, {"code": "(partial reduce \n  #(if (some (partial = %2) %) % (conj % %2)) \n  [])", "problem": 56, "user": "50336c6be4b0c6c1199c710f"}, {"code": "reduce\n  (fn [c x]\n    (if (some #(= x %) c)\n      c\n      (conj c x)))\n  []", "problem": 56, "user": "50361b6be4b0fbe0a74d26be"}, {"code": "#(let [s (new java.util.LinkedHashSet)]\n  (doall (for [e %] (.add s e)))\n  (seq s))", "problem": 56, "user": "4ded27db535d08e6dec9fe0a"}, {"code": "(fn [s]\r\n     (keep-indexed \r\n      #(if-not ((set (take %1 s)) %2) %2) s))", "problem": 56, "user": "4f58d92fe4b0a7574ea71858"}, {"code": "#(loop [i % o []] \n  (if (empty? i) o (recur (rest i) (if (some #{(first i)} o) o (conj o (first i))))))", "problem": 56, "user": "5033a1fbe4b062bc5d7ae155"}, {"code": "(fn [s]\n  (first (reduce (fn [[a h] n]\n    (if (h n)\n      [a h]\n      [(conj a n) (conj h n)]))\n    [[] #{}]\n    s)))", "problem": 56, "user": "503a234de4b088a6a14ca76d"}, {"code": "(fn f [acc s] \n   \n  (if (empty? s) acc\n    (f (if (some #{(first s)} acc) acc (conj acc (first s))) (rest s))))\n  \n   []", "problem": 56, "user": "503917a0e4b088a6a14ca763"}, {"code": "(partial reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [])", "problem": 56, "user": "5034b0e1e4b062bc5d7ae167"}, {"code": "(fn [col]\n  (:result (reduce\n  #(let [index (:index %1) result (:result %1)]\n    (if (contains? index %2)\n      %1\n      {:index (conj index %2) :result (conj result %2)}\n      ))\n\n  {:index #{} :result []} col)))", "problem": 56, "user": "5033ed65e4b062bc5d7ae15a"}, {"code": "(fn [ls]\r\n  (reduce #(if (get (set %1) %2)\r\n               %1\r\n               (concat %1 [%2])) [] ls))", "problem": 56, "user": "502a9fdee4b095a7adb898b4"}, {"code": "(fn [x]\n  (->>\n    (reduce\n      (fn [m xs] (assoc m xs (get m xs (count m))))\n      {} x)\n    (sort-by second)\n    (map first)\n    ))", "problem": 56, "user": "4f616892e4b0defedf855fbf"}, {"code": "#(keys (sort-by val > (zipmap (reverse %) (range))))", "problem": 56, "user": "502904e0e4b0feaf66e22fad"}, {"code": ";; uses a set for fast lookup of existing entrises\n(fn [coll]\n   (first \n    (reduce\n     (fn [[unique-coll unique-set] val]\n       (if (contains? unique-set val)\n         [unique-coll unique-set]\n         [(conj unique-coll val)\n          (conj unique-set val)]))\n     [[] #{}]\n     coll)))", "problem": 56, "user": "5014754de4b094324338f8e5"}, {"code": "(fn remove-duplicates\n  [s]\n  (loop [s s\n         acc []]\n    (cond\n     (empty? s) acc\n     ;; if we've seen this item before, skip it and move on\n     (some #(= % (first s)) acc) (recur (rest s) acc)\n     :else\n     (recur (rest s) (conj acc (first s))))))", "problem": 56, "user": "4fd16778e4b04c3a95aa040f"}, {"code": "(fn [coll]\n  (loop [acc [] seen #{} [f & r] coll]\n    (let [res (if (seen f) acc (concat acc [f]))]\n      (if (seq r) (recur res (conj seen f) r)\n                  res))))", "problem": 56, "user": "5012ec0ae4b0c87326002230"}, {"code": "reduce (fn [l x] (if (some #(= x %) l) l (conj l x))) []", "problem": 56, "user": "503b6995e4b07a1917cc34dd"}, {"code": "reduce #(if (some #{%2} %1) %1 (conj %1 %2)) []", "problem": 56, "user": "4fd81472e4b0dab7d829f38e"}, {"code": "(fn [l]\n  (loop [l l r [] seen #{}]\n    (if (= l ())\n      r\n      (if (seen (first l))\n        (recur (rest l) r seen)\n        (recur (rest l) (conj r (first l)) (conj seen (first l)))))))", "problem": 56, "user": "50435852e4b034ff00315d22"}, {"code": "reduce #(if ((set %) %2) % (conj % %2)) []", "problem": 56, "user": "503de5aae4b06c4e0e1fa259"}, {"code": "#(keep-indexed (fn [idx x] (if (nil? (some #{x} (take idx %))) x))\r\n               %)", "problem": 56, "user": "4fabbb97e4b081705acca21d"}, {"code": "#(reverse (loop [col % contlist (hash-set) ret '()] (if (empty? col) ret (recur (rest col) (conj contlist (first col)) (if  (contains? contlist (first col)) ret (conj ret (first col))  )  ))))", "problem": 56, "user": "50463347e4b011c5dfee771e"}, {"code": "#((reduce\n  (fn [[set ans] x]\n    [(conj set x)\n     (if (contains? set x)\n        ans\n        (conj ans x))])\n  [#{} []] %) 1)", "problem": 56, "user": "50479524e4b0371827a27bc4"}, {"code": "#(into (empty %)\n        (reduce (fn [coll item]\n                  (if (some (fn [x] (= x item)) coll)\n                \t   coll\n              \t\t  (into coll [item]))) \n          \t\t(empty %)\n                %))", "problem": 56, "user": "4db2f208535df7e46ed9b6c9"}, {"code": "(fn [coll]\r\n  (second (reduce #(if ((first %) %2) % [(conj (first %) %2) (conj (second %) %2)])  [#{} []] coll)))", "problem": 56, "user": "4fb266a5e4b081705acca28c"}, {"code": "#((fn f [subvec m c]\n  (if (= 1 (count c))\n    subvec\n    (let [k (nth c 1)]\n      (if (contains? m k)\n        (f subvec m (nthrest c 1))\n        (f (conj subvec k)\n           (assoc m k :whatev)\n           (nthrest c 1))))))\n[(first %)] {(first %) :whatev} %)", "problem": 56, "user": "50464831e4b011c5dfee771f"}, {"code": "(fn [xs] (reduce (fn [a x] (if (some #{x} a) a (conj a x))) [] xs))", "problem": 56, "user": "503d129fe4b06c4e0e1fa254"}, {"code": "reduce (fn [vec val] (if (some #(= %1 val) vec) vec (conj vec val))) []", "problem": 56, "user": "5046b003e4b011c5dfee7727"}, {"code": "(fn uniques\n  ([xs] (uniques xs #{}))\n  ([xs dups] \n   (if (empty? xs)\n     nil\n     (let [[h & t] xs]\n       (if (contains? dups h)\n         (uniques t dups)\n         (lazy-cat [h] (uniques t (conj dups h))))))))", "problem": 56, "user": "4f2e0369e4b0d6649770a064"}, {"code": "(fn [xs]\n  (second\n  (reduce\n    (fn [[accs accv] el]\n      (if (accs el)\n        [accs accv]\n        [(conj accs el) (conj accv el)]))\n    [#{} []]\n    xs)))", "problem": 56, "user": "50427899e4b0add3005c0fc2"}, {"code": "(fn [xs] (reduce (fn [r x] (if  (some #{x} r) r (conj r x))) [] xs))", "problem": 56, "user": "4e4ca885535dc968683fc4df"}, {"code": "(fn [xs]\n  (letfn [(dist [xs ys]\n            (if (seq xs)\n              (if (some #(= (first xs) %) ys)\n                (dist (rest xs) ys)\n                (dist (rest xs) (cons (first xs) ys)))\n              ys))]\n    (reverse (dist xs []))))", "problem": 56, "user": "504e13fce4b078edc5f593bc"}, {"code": "#(loop [s #{} r % ret []]\r\n  (if (empty? r)\r\n    ret\r\n    (if (contains? s (first r)) \r\n    (recur s (rest r) ret)\r\n    (recur (conj s (first r)) (rest r) (conj ret (first r))))))", "problem": 56, "user": "503354c3e4b0c6c1199c710c"}, {"code": "(fn dst [s]\r\n  (reduce #(if (some #{%2} %) % (concat % [%2])) [] s))", "problem": 56, "user": "504e14c2e4b078edc5f593bf"}, {"code": "(fn uniq\n  [xs]\n  (keep-indexed \n    #(if (= % (.indexOf xs %2)) %2 nil)\n    xs))", "problem": 56, "user": "4fab1ea1e4b081705acca210"}, {"code": "(fn [coll]\r\n    (loop [input coll\r\n           output []\r\n           seen #{}]\r\n      (if (empty? input)\r\n        output\r\n        (if (contains? seen (first input))\r\n          (recur (rest input) output seen)\r\n          (recur (rest input)\r\n                 (conj output (first input))\r\n                 (conj seen (first input)))))))", "problem": 56, "user": "4fcbc18ae4b0ee37620e185c"}, {"code": "reduce (fn [s e] (if (some #(= e %) s) s (conj s e))) []", "problem": 56, "user": "504e9f5ce4b069badc5a33bd"}, {"code": "(fn [c] (sort-by #(.indexOf c %) (set c)))", "problem": 56, "user": "504e1abee4b0f6ff3350c45d"}, {"code": "#(sort-by \n  (fn [x] (.indexOf % x))\n  (into [] (into #{} %))\n)", "problem": 56, "user": "504e685fe4b0f6ff3350c4ae"}, {"code": "(fn [xs] (reduce (fn [a b] (if (some #(= % b) a) a (conj a b))) [] xs))", "problem": 56, "user": "504f865ee4b0a02f9cffde90"}, {"code": "#(reduce (fn [a i] (if (some #{i} a)\n                       a\n                       (conj a i))) [] %)", "problem": 56, "user": "503ca47fe4b06c4e0e1fa24f"}, {"code": "(fn find-distinct-items\n  ([xs] (find-distinct-items xs nil))\n  ([xs acc]\n      (if (empty? xs) (reverse acc)\n        (recur (rest xs)\n          (if (some #(= %1 (first xs)) acc) acc (cons (first xs) acc))))))", "problem": 56, "user": "504f57c7e4b0a02f9cffde71"}, {"code": "reduce #(if (some #{%2} %1) %1 (conj %1 %2)) []", "problem": 56, "user": "504e04a4e4b078edc5f59397"}, {"code": "(fn [coll]\n  (sort-by #(.indexOf coll %)\n           (keys (group-by identity coll))))", "problem": 56, "user": "50586354e4b06522596eba78"}, {"code": "reduce (fn [x y] (if (some #(= y %) x) x (conj x y))) []", "problem": 56, "user": "4f045946535dcb61093f6bba"}, {"code": "#(reduce (fn [t e] (if (some (partial = e) t) t (conj t e))) [] %)", "problem": 56, "user": "50588ff1e4b06522596eba7e"}, {"code": "(fn [x]\r\n  (reduce \r\n    (fn [ls e]\r\n      (if (some #(= e %) ls)\r\n        ls\r\n        (conj ls e)))\r\n    [] x))", "problem": 56, "user": "4f9aa97ae4b0dcca54ed6d0e"}, {"code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "problem": 56, "user": "50435689e4b034ff00315d21"}, {"code": "#(loop [seen {}\n  \t    acc []\n\t\t    [x & xs] %]\n\t  (if (not x)\n\t\t  acc\n\t\t(if (seen x) \n\t\t    (recur seen acc xs)\n\t\t    (recur (assoc seen x 0) (conj acc x) xs))))", "problem": 56, "user": "50563ae2e4b0ce54f56f0405"}, {"code": "(fn [s]\n  (let [r (second\n    (reduce (fn [[m r] e]\n      [(conj m e) (if (m e) r (conj r e))])\n[#{} []]\n  s))]\n(into (empty s)\n(if \n  (or (list? s)\n(= (type s) clojure.lang.LazySeq))\n(reverse r) r))))", "problem": 56, "user": "4fca2a13e4b0ee37620e184d"}, {"code": "(fn cool [x]\n  (letfn [(cool2 [y z]\n    (if (empty? y)\n        (reverse z)\n        (if (some #{(first y)} z) \n            (cool2 (rest y) z)\n            (cool2 (rest y) (cons (first y) z))\n        )\n    )       \n  )]\n  (cool2 x '())\n  )\n)", "problem": 56, "user": "50588af1e4b06522596eba7d"}, {"code": "(fn [coll] (reduce #(if (some #{%2} %) % (conj % %2)) [] coll))", "problem": 56, "user": "504c8165e4b09724c857af31"}, {"code": "(fn [xs] (reduce #(if (apply distinct? (conj % %2)) (conj % %2) %) [] xs))", "problem": 56, "user": "502d4ea0e4b02fc10c6c6e46"}, {"code": "(fn [input]\r\n  (reduce (fn [xs x]\r\n            (if ((into #{} xs) x)\r\n              xs\r\n              (conj xs x)\r\n              )) [] input)\r\n   )", "problem": 56, "user": "4faa6184e4b081705acca1f1"}, {"code": "(fn [coll]\n  (reduce #(if (>= (.indexOf %1 %2) 0)\n               %1\n               (conj %1 %2)) [] coll))", "problem": 56, "user": "505bd09fe4b032b709c81373"}, {"code": "(fn fdo [s]\n  (loop [\n         h (first s)\n         t (rest s)\n         seen #{h}\n         out (list h)\n         ]\n    (if (nil? h)\n      (reverse out)\n      (recur\n       (first t)\n       (rest t)\n       (conj seen h)\n       (if-not (contains? seen h)\n         (conj out h)\n         out)))))", "problem": 56, "user": "504ec4d3e4b069badc5a33c9"}, {"code": "(fn [coll]\n  (sort-by (fn [x] (.indexOf coll x))\n           (set coll)))", "problem": 56, "user": "50630247e4b05ac47bc68d6b"}, {"code": "#(map first (concat (group-by identity (take 32 %)) (group-by identity (drop 32 %))))", "problem": 56, "user": "50645e12e4b007509339a58a"}, {"code": "(fn [s] \n  (reduce \n    #(if-not (some (into #{} [%2]) %) (conj % %2) %) [] s))", "problem": 56, "user": "5065faf9e4b0313a384e5645"}, {"code": "(fn [a]\n  (loop [[x & xs :as v] a, r []]\n    (cond\n      (empty? v) r\n      (contains? (set r) x) (recur xs r)\n      :else                 (recur xs (concat r [x])))))", "problem": 56, "user": "4fd2e5d8e4b04c3a95aa0427"}, {"code": "#(reduce (fn [r e] (if ((set r) e) r (conj r e))) [] %)", "problem": 56, "user": "5063fe48e4b075d771da6f9e"}, {"code": "(fn dist [s]\n  (first\n   (reduce\n    (fn [[ans seen] x]\n      (if (seen x) [ans seen] (map #(conj % x) [ans seen])))\n    [[] #{}]\n    s)))", "problem": 56, "user": "506ab9bae4b05d3b7762c74c"}, {"code": "reduce #(if ((set %) %2) % (conj % %2)) []", "problem": 56, "user": "506ef8c3e4b09350ab4199f4"}, {"code": "#(let [dst (fn [sq rs st]\n                          (let [x (first sq)\n                                r (rest sq)\n                                nrs (if (get st x) rs (conj rs x))]\n                            (if (seq r)\n                                (recur r nrs (conj st x))\n                              nrs)))]\n         (dst % [] #{}))", "problem": 56, "user": "50705072e4b07bd6ad9b9f27"}, {"code": "reduce (fn [v i] (if (some #(= % i) v) v (conj v i))) []", "problem": 56, "user": "5060d137e4b0dc10a69545a0"}, {"code": "#(loop [xs (seq %)\n                res []]\n            (if-let [x (first xs)]\n                    (if (some #{x} res)\n                        (recur (rest xs) res)\n                        (recur (rest xs) (conj res x)))\n                    res))", "problem": 56, "user": "4f614976e4b0defedf855fbb"}, {"code": "(partial reduce #(if (some #{%2} %1) %1 (conj %1 %2) ) [])", "problem": 56, "user": "4f3b5219e4b0e243712b1f2a"}, {"code": "(fn [lst]\n  (loop [l lst\n         acc []]\n    (if (empty? l) acc\n\t      (if (some #(= (first l) %) acc)\n\t       (recur (rest l) acc)\n\t       (recur (rest l) (conj acc (first l)))))))", "problem": 56, "user": "4f2f6678e4b0d6649770a06e"}, {"code": "#(seq (new java.util.LinkedHashSet %))", "problem": 56, "user": "50432da5e4b034ff00315d1e"}, {"code": "reduce #(if (get (set %) %2) % (conj % %2)) []", "problem": 56, "user": "50548ce8e4b0b1b9d1860ead"}, {"code": "#(->> % (map vector (range)) (group-by second) (map (comp first val)) (sort-by first) (map second))", "problem": 56, "user": "507056b8e4b07bd6ad9b9f29"}, {"code": "reduce (fn [x c] (concat x (if (some #{c} x) [] [c]))) []", "problem": 56, "user": "504f191ae4b0e7ad84dbc4ba"}, {"code": "(fn dst[xs] (reduce #(if (nil? (some (into #{} (list %2)) %1)) (concat %1 (list %2)) %1) '() xs))", "problem": 56, "user": "506fd0afe4b07bd6ad9b9f23"}, {"code": "#(loop [s %1 result []]\n     (cond\n      (some (partial = (first s)) result) (recur (rest s) result)\n      (empty? s) result\n      :else (recur (rest s) (conj result (first s)))\n      ))", "problem": 56, "user": "5070e31ee4b0e3170b5a8678"}, {"code": "(fn [l]\n  (reduce (fn [val a]\n            (if (boolean (not-any? (fn [x] (= x a)) val))\n              (conj val a)\n              val))\n          []\n          l))", "problem": 56, "user": "501f36dde4b0cb6ebc0a42e4"}, {"code": "(fn dis [s]\r\n  (last\r\n    (filter\r\n      #(not (nil? %))\r\n      (let [d (atom [])]\r\n        (for [i s]\r\n          (if (not (contains? (set @d) i))\r\n            (swap! d conj i)))))))", "problem": 56, "user": "5054c7e1e4b0b1b9d1860eb2"}, {"code": "(fn [x]\n  (letfn [(append-distinct [a acc]\n                           (if ((set acc) a) \n                             acc\n                             (conj acc a)))]\n         (loop [[a & z] x acc []]\n           (if (empty? z)\n             (append-distinct a acc)\n             (recur z (append-distinct a acc))))))", "problem": 56, "user": "4e77c1db535d324fb2983d72"}, {"code": "(fn [coll]\n  (reduce (fn [result item]\n            (if (nil? (some #(= item %) result))\n              (conj result item)\n              result)) [] coll))", "problem": 56, "user": "50052fd0e4b0678c553fc45d"}, {"code": "(fn [s]\n  (map #(nth s %)\n       (sort (map #(.indexOf s %) (set s)))))", "problem": 56, "user": "506a1985e4b01dc6af13f83e"}, {"code": "(fn [seq](reduce #(if (some (fn[x] (= x %2)) %1)(identity  %1) (conj %1 %2)) [] seq))", "problem": 56, "user": "504eff22e4b0e7ad84dbc4a9"}, {"code": "(fn foo[l]\n  (reduce \n    (fn [val coll]\n      (if (some #{coll} val)\n      val\n      (concat val (list coll))\n      )\n    )\n    '() l))", "problem": 56, "user": "4f8b05d2e4b02e764a0a5176"}, {"code": "(fn unique\n   [coll]\n   (loop [s coll result []]\n     (if (empty? s)\n       result\n       (if ((fn [coll v]\n              (if (empty? coll)\n                false\n                (if (= (first coll) v)\n                  true\n                  (recur (rest coll) v))))  result (first s))\n         (recur (rest s) result)\n         (recur (rest s) (conj result (first s)))))))", "problem": 56, "user": "5046f909e4b03b02161376b5"}, {"code": "(fn [xs]\n    (sort #(compare (.indexOf xs %) (.indexOf xs %2)) (into [] (set xs)))\n)", "problem": 56, "user": "503f872ee4b00d1a725ff2ac"}, {"code": "#((reduce (fn [[result, seen] x]\n            (if (seen x)\n              [result, seen]\n              [(conj result x) (conj seen x)]))\n          [[], #{}] %)\n    0)", "problem": 56, "user": "4fe9ef2fe4b0547ebccb2479"}, {"code": "(fn hoge [l]\r\n  (if (empty? l)\r\n    nil\r\n    (let [[h & t] l]\r\n      (lazy-seq (cons h (hoge (remove #(= % h) t)))))))", "problem": 56, "user": "507437c2e4b054001656acd0"}, {"code": "(fn [c] (reduce (fn [coll num]\n  (if (some #(= num %1) coll) coll (conj coll num))) [] c))", "problem": 56, "user": "507a9b29e4b08327cd804a6e"}, {"code": "(fn find-distinct [s]\n  (reduce (fn [accum x]\n            (if (apply distinct? x accum) (conj accum x) accum))\n          [] s))", "problem": 56, "user": "50763574e4b0a894bb95bf3d"}, {"code": "reduce #(if (some #{%2} %1) %1 (concat %1 [%2])) []", "problem": 56, "user": "507eddf4e4b06ce648bcdbfa"}, {"code": "reduce #(if (= -1 (.indexOf % %2))\n           (conj % %2)\n           %) []", "problem": 56, "user": "506617c3e4b03d366d7cb2ab"}, {"code": "#(loop [[el & rst] %, r [] s #{}]\n  (if el\n    (if (s el) \n      (recur rst r s)\n      (recur rst (conj r el) (conj s el)))\n  r))", "problem": 56, "user": "507a396be4b08327cd804a69"}, {"code": "(partial \n  reduce\n  (fn [out elt]          \n    (if (some #{elt} out)\n      out\n      (conj out elt)))\n  [])", "problem": 56, "user": "4fe84c74e4b07c9f6fd12c3c"}, {"code": "(fn distinct'\n    ([xs] (distinct' xs []))\n    ([xs acc]\n     (if (empty? xs) acc\n       (let [x0 (first xs)\n             p #(not= % x0)]\n         (recur (filter p xs) (conj acc x0))))))", "problem": 56, "user": "508157b2e4b0946d0443855c"}, {"code": "(fn [x] (\n  if (coll? (first x))\n  (keys (group-by identity x))\n  (sort-by identity (keys (group-by identity x)))\n  ))", "problem": 56, "user": "506b437de4b0eda3100c0906"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "5088082ae4b0198722bd9854"}, {"code": "(fn dstnct\n   ([s] (dstnct s []))\n   ([s result]\n      (if (seq s)\n        (if (some (set (take 1 s)) result)\n          (recur (rest s) result)\n          (recur (rest s) (conj result (first s))))\n        result)))", "problem": 56, "user": "4e6a4954535d8ccf87e9fec0"}, {"code": "(fn [lst]\r\n    (loop [acc ()\r\n           to-do lst]\r\n      (if (empty? to-do)\r\n        acc\r\n        (recur\r\n         (if (some (hash-set (first to-do)) acc)\r\n           acc\r\n           (concat acc (list (first to-do))))\r\n         (rest to-do)))))", "problem": 56, "user": "508b95a0e4b0be79e5b189c6"}, {"code": "(fn[s] (reduce #(if (some {%2 true} %) % (conj % %2)) [] s))", "problem": 56, "user": "507c7c8be4b0b083f3ff82ef"}, {"code": "#(reduce (fn [acc x] (if (= (.indexOf acc x) -1) (conj acc x) acc)) [] %)", "problem": 56, "user": "50783762e4b0fc74642bff67"}, {"code": "(fn [s]\n  (for [ [n pns] (map vector s (reductions conj #{} s))\n      :when (not (pns n))]\n    n))", "problem": 56, "user": "50901b2ee4b0ea685a20f774"}, {"code": "#(if (> (count %) 32) (sort (keys (frequencies %))) (keys(frequencies %)))", "problem": 56, "user": "4fc8f671e4b0ee37620e1840"}, {"code": "(fn my-distinct [x]\n  (loop [todo x\n         ret (vector)]\n    (if (empty? todo)\n      ret\n      (recur \n       (remove #(= (first todo) %) (rest todo))\n       (conj ret (first todo))))))", "problem": 56, "user": "4f08a8a2535dcb61093f6c3d"}, {"code": "reduce (fn [c e]\r\n  (if (some #(= % e) c)\r\n    c\r\n    (conj c e))) []", "problem": 56, "user": "509160dae4b0742c82730aef"}, {"code": "(fn foo\r\n  [coll]\r\n    (let [step (fn step [xs seen]\r\n                   (lazy-seq\r\n                    ((fn [[f :as xs] seen]\r\n                      (when-let [s (seq xs)]\r\n                        (if (contains? seen f) \r\n                          (recur (rest s) seen)\r\n                          (cons f (step (rest s) (conj seen f))))))\r\n                     xs seen)))]\r\n      (step coll #{})))", "problem": 56, "user": "50928084e4b097f48cc3856c"}, {"code": "(fn [x] \n     (reduce \n       (fn [a,b]\n         (if (= -1 (.indexOf a b))\n           (concat a [b])\n           a))\n       []\n       x))", "problem": 56, "user": "503efe01e4b06c4e0e1fa26f"}, {"code": "#(reduce (fn [l i] (if (some #{i} l) l (conj l i))) [] %)", "problem": 56, "user": "507fbd77e4b089ade05efbd3"}, {"code": "(fn [x]\n  (loop\n    [s #{}\n     d []\n     r x]\n     (if (empty? r) d\n        (recur\n          (conj s (first r))\n          (if (contains? s (first r)) d (conj d (first r)))\n          (rest r)))))", "problem": 56, "user": "50657775e4b0deb876850599"}, {"code": "(fn [x]\n  ((fn [a b]\n    (if (empty? a)\n      (map #(get % 1) (sort (vals b)))\n      (let [f (first a)\n            r (rest a)]\n        (if (nil? (find b (get f 1)))\n          (recur r (merge b {(get f 1) f}))\n          (recur r b))))) (map-indexed vector x) {}))", "problem": 56, "user": "507ef25ce4b0f753b6f9788e"}, {"code": "#(loop [[x & xs] %, found #{}, res []]\n  (cond\n    (nil? x) res\n    (found x) (recur xs found res)\n    :else (recur xs (conj found x) (conj res x))))", "problem": 56, "user": "5097a95fe4b00ad8bab4e96e"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "508ee17ae4b0706b2ed3ef8d"}, {"code": "reduce (fn [coll n] (if (some #{n} coll) \n                      coll \n                      (concat coll [n]))) \n       []", "problem": 56, "user": "506b8242e4b0eda3100c090a"}, {"code": "#(second \n (reduce \n  (fn [[seen xs] x]\n    (if (contains? seen x) \n      [seen xs] \n      [(conj seen x) (conj xs x)]))\n  [#{} []]\n  %))", "problem": 56, "user": "5089ebfee4b03217b26a539f"}, {"code": "(fn uniqify [xs]\n  (:res (reduce (fn [{:keys [res items] :as m} x]\n  \t\t\t  (if (items x)\n                    m\n                    (assoc m \n                      :items (conj (:items m) x)\n                      :res (conj (:res m) x)))) \n                {:res [] :items #{}} xs)))", "problem": 56, "user": "50053d6ce4b0678c553fc45e"}, {"code": "(fn [coll]\n        (loop [xs coll\n               seen #{}\n               r []]\n          (if-not (seq xs)\n            r\n            (let [[h & t] xs]\n              (recur t\n                     (conj seen h)\n                     (if (seen h)\n                       r\n                       (conj r h)))))))", "problem": 56, "user": "4e5f034b535d8a8b8723a2d9"}, {"code": "(fn [xs]\n (loop [lst xs res [] seen #{}]\n   (cond\n    (empty? lst) res\n    (contains? seen (first lst)) (recur (rest lst) res seen)\n    :else (recur (rest lst) (conj res (first lst)) (into seen #{(first lst)})))))", "problem": 56, "user": "5097b556e4b00ad8bab4e970"}, {"code": "(fn [coll]\n  (loop [coll coll st #{} result []]\n    (if (seq coll)\n      (if (st (first coll))\n        (recur (rest coll) st result)\n        (recur (rest coll) (conj st (first coll)) (conj result (first coll))))\n        result)))", "problem": 56, "user": "5084c43be4b0fb8f40674bfa"}, {"code": "(fn [coll]\n  (loop [a [] b coll]\n    (if (= [] b)\n      a \n      (recur \n        (conj a (first b))\n        (filter #(not= (first b) %) (rest b))))))", "problem": 56, "user": "509e62a8e4b08df8156e9e2e"}, {"code": "reduce #(if ((set %) %2) % (conj % %2)) []", "problem": 56, "user": "5054bc87e4b0b1b9d1860eb0"}, {"code": "(fn [coll]\n    (reverse\n     (loop [x coll\n            y '()\n            seen? #{}]\n       (cond\n        (empty? x) y\n        (seen? (first x)) (recur (rest x) y seen?)\n        :else  (recur (rest x) (cons (first x) y) (conj seen? (first x)))))))", "problem": 56, "user": "4f463dfde4b0d56e7bb92b99"}, {"code": "#(loop [o []\n        i %]\n   (if (empty? i)\n      o\n      (let [n (first i)]\n        (recur\n          (let [n (first i)]\n            (if (some #{n} o)\n              o\n              (conj o n)))\n          (rest i)))))", "problem": 56, "user": "4f42ae16e4b0d7d3c9f3fd09"}, {"code": "(fn [coll] (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] coll))", "problem": 56, "user": "50310b8be4b05b7df5a0b84d"}, {"code": "reduce (fn [mem item] (if (some #{item} mem) \n                          mem\n                          (concat mem [item]))) []", "problem": 56, "user": "5069c09be4b01dc6af13f837"}, {"code": "(fn b [m] (loop [mm m n []]\n  (if (empty? mm) n \n\n(recur \n  (next mm) \n  \n  (if (some #(= (first mm) %) n) n (conj n (first mm)))))))", "problem": 56, "user": "4fe97adde4b0547ebccb245e"}, {"code": "(fn [coll]\n    (let [step (fn step [xs seen]\n                   (lazy-seq\n                    ((fn [[f :as xs] seen]\n                      (when-let [s (seq xs)]\n                        (if (contains? seen f) \n                          (recur (rest s) seen)\n                          (cons f (step (rest s) (conj seen f))))))\n                     xs seen)))]\n      (step coll #{})))", "problem": 56, "user": "4daea889edd6309eace4d15b"}, {"code": "(fn [c] (second (reduce #(if ((first %) %2) % [(conj (first %) %2) (conj (second %) %2)]) [#{} []] c)))", "problem": 56, "user": "4fb1325de4b081705acca276"}, {"code": "(fn [v]\n  (reduce\n    #(if-not (contains? (into #{} %1) %2) (conj %1 %2) %1)\n    [] v))", "problem": 56, "user": "4dad76588e77d6ed63f12a44"}, {"code": "(fn [c]\n  (reduce #(if (not (contains? (into #{} %1) %2))\n             (conj %1 %2)\n             %1)\n          []\n          c))", "problem": 56, "user": "4f73f78de4b044e54cd9a8f3"}, {"code": "(fn [l]\r\n  (->> (interleave (reverse l) (reverse (range (count l))))\r\n       (apply sorted-map)\r\n       (seq)\r\n       (sort-by second)\r\n       (map first)))", "problem": 56, "user": "509c03f3e4b085ae113522a8"}, {"code": "(fn q [i]\n  (reduce (fn [x y] (if (nil? (some (fn [z] (= y z)) x)) (conj x y)\n                        x)) [] i))", "problem": 56, "user": "50a2cd3be4b048eb8059339d"}, {"code": "(fn [s]\n  (first\n   (reduce\n    (fn [[res test] num]\n      (if (test num) [res test]\n          [(conj res num)\n           (conj test num)]))\n    [[] #{}]\n    s ) ))", "problem": 56, "user": "4dd0e8f7535da60f04a96e57"}, {"code": "(fn [coll]\n    (let [step (fn step [xs seen]\n                   (lazy-seq\n                    ((fn [[f :as xs] seen]\n                      (when-let [s (seq xs)]\n                        (if (contains? seen f) \n                          (recur (rest s) seen)\n                          (cons f (step (rest s) (conj seen f))))))\n                     xs seen)))]\n      (step coll #{})))", "problem": 56, "user": "509c2c55e4b085ae113522ab"}, {"code": "#(first (reduce (fn [[acc s] x] (if (s x) [acc s] [(conj acc x) (conj s x)])) \n           [[] #{}] %))", "problem": 56, "user": "4e7f32ee535db966e863cc3a"}, {"code": "reduce (fn [s e]\n  (if (some #(= % e) s)\n    s\n    (conj s e)))\n[]", "problem": 56, "user": "50ae22c3e4b0a40c9cfb08d0"}, {"code": "(fn dist\r\n  [coll]\r\n    (let [step (fn step [xs seen]\r\n                   (lazy-seq\r\n                    ((fn [[f :as xs] seen]\r\n                      (when-let [s (seq xs)]\r\n                        (if (contains? seen f) \r\n                          (recur (rest s) seen)\r\n                          (cons f (step (rest s) (conj seen f))))))\r\n                     xs seen)))]\r\n      (step coll #{})))", "problem": 56, "user": "4f2942ace4b0d6649770a01e"}, {"code": "(fn mydistinct\n  [x]\n  (loop [c x f (set x) d []]\n    (if (not (seq c)) d\n    (if (contains? f (first c))\n      (recur (rest c) (disj f (first c)) (conj d (first c))) \n      (recur (rest c) f d)))))", "problem": 56, "user": "50982769e4b04e098a4c726a"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "50ad7888e4b0a40c9cfb08c7"}, {"code": "reduce #(if (some #{%2} %) % (concat % [%2])) []", "problem": 56, "user": "50996a38e4b0cae2931060b3"}, {"code": "(fn [s] \n  (loop [x s r []]\n    (if (empty? x)\n      r\n      (recur (rest x) \n        (if (some #(= %1 (first x)) r) \n          r \n          (conj r (first x)))))))", "problem": 56, "user": "50a5f72fe4b0aa96157e2611"}, {"code": "(fn [coll]\n  ((fn helper [[x & xs] seen accu]\n    (cond\n      (nil? x) (reverse accu)\n      (seen x) (recur xs seen accu)\n      :else (recur xs (conj seen x) (cons x accu))))\n   coll #{} nil))", "problem": 56, "user": "50217818e4b00bba4502f7a7"}, {"code": "#(reduce (fn [m i] \n          (if (apply distinct? i m)\n              (conj m i) m))\n  [] %)", "problem": 56, "user": "50b4383fe4b001349b2f4abf"}, {"code": "(fn [& args]\n  (loop [s (apply vec args) ns []]\n    (if (empty? s)\n      ns\n      (recur (remove #(= % (first s)) s) (conj ns (first s))))))", "problem": 56, "user": "50843a4ae4b0c98812d0788b"}, {"code": ";reduce\n;#({%2 %} ((set %) %2) (conj % %2))\n;[]\n(fn d\n  [coll]\n    (let [step (fn step [xs seen]\n                   (lazy-seq\n                    ((fn [[f :as xs] seen]\n                      (when-let [s (seq xs)]\n                        (if (contains? seen f) \n                          (recur (rest s) seen)\n                          (cons f (step (rest s) (conj seen f))))))\n                     xs seen)))]\n      (step coll #{})))", "problem": 56, "user": "4ebbc1f6535dfed6da9c6d72"}, {"code": "(fn [c] (reduce (fn [c e] (if (some #(= e %) c) c (conj c e))) [] c))", "problem": 56, "user": "5098bcfee4b0cae2931060a1"}, {"code": "(fn [s]\n  (loop [[x & xs] s\n         seen #{}\n         result []]\n    (if x\n      (if (seen x)\n        (recur xs seen result)\n        (recur xs (conj seen x) (conj result x)))\n      result)))", "problem": 56, "user": "50b67515e4b08fb537db98f3"}, {"code": "#(first (reduce (fn [[r s] e] \n  (if (contains? s e) [r s] [(conj r e) (conj s e)])) \n  [[] #{}] %))", "problem": 56, "user": "4ee528fb535d1385b2869d87"}, {"code": "(fn [coll]\n  (letfn [(add [c x]\n             (if (= x (some #{x} c))\n               c\n               (cons x c)))]\n    (reverse (reduce add [] coll))))", "problem": 56, "user": "4fe13ad7e4b0dd6cd5ce3632"}, {"code": "(fn f\n  ([l] (f l #{}))\n  ([l s] (cond\n           (= l '()) '()\n           (contains? s (first l)) (f (rest l) s)\n           :else (cons (first l) \n                       (f (rest l) (set (cons (first l) s)))))))", "problem": 56, "user": "50b668dde4b08fb537db98f2"}, {"code": "(fn [s]\n  (reduce #(if ((set %1) %2) %1 (conj %1 %2)) [] s))", "problem": 56, "user": "50aab057e4b056ee0193586b"}, {"code": "(fn prob56 [xs]\n  ((fn my-helper [xs agg check]\n    (if (empty? xs)\n      agg\n      (let [head (first xs)]\n        (if (check head)\n          (my-helper (rest xs) agg check)\n          (my-helper (rest xs) (conj agg head) (conj check head)))))) \n  xs [] #{})\n)", "problem": 56, "user": "4f03f3b7535dcb61093f6b85"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "4f956072e4b0dcca54ed6ccf"}, {"code": "#(reduce (fn [l e] (if (some (fn [i] (= i e)) l) l (conj l e))) [] %)", "problem": 56, "user": "5027b41ee4b01614d1633fee"}, {"code": "(fn [coll]\r\n  (->> coll\r\n       (reduce (fn [[seen result :as acc] a]\r\n                 ;(println acc)\r\n                 (or (and (contains? seen a) acc)\r\n                     (vector (conj seen a)\r\n                             (conj result a))))\r\n               (vector #{} []))\r\n       (second)))", "problem": 56, "user": "50ba4b9ee4b03e68e4411c7b"}, {"code": "#(loop [x % y []] (if (empty? x) y (recur (rest x) (if (some (partial = (first x)) y) y (conj y (first x))))))", "problem": 56, "user": "5071b614e4b0e3170b5a867d"}, {"code": "(fn [xs]\n\t\t(reduce #(if ((set %1) %2) %1 (conj %1 %2)) [] xs))", "problem": 56, "user": "508e13abe4b0f17d83ea26c7"}, {"code": "(fn g [[f & r]] (when f (cons f (g (remove #{f} r)))))", "problem": 56, "user": "50a83315e4b054305ba5a830"}, {"code": "(fn [coll] \n  ((fn step [[x & xs] seen] \n     (when x\n       (if (seen x) \n         (step xs seen)\n         (cons x (step xs (conj seen x)))))) \n   coll #{}))", "problem": 56, "user": "50493b52e4b06e84b772a23e"}, {"code": "(fn my-distinct [col]\n  (reduce (fn [v x]\n  \t\t\t\t\t(if (some (partial = x) v)\n              v\n              (conj v x)))\n          []\n          col))", "problem": 56, "user": "50812debe4b01a93d3f38e4c"}, {"code": "(fn remove-duplicate [n]\n  (loop [cur [] n n]\n    (if (empty? n)\n      cur\n      (if (>= (.indexOf cur (first n)) 0)\n        (recur cur (rest n))\n        (recur (conj cur (first n)) (rest n))))))", "problem": 56, "user": "4f03e7b3535dcb61093f6b7c"}, {"code": "(fn[xs]\n  (reduce \n   #(if (some #{%2} %1) % (conj % %2)) \n   [] xs))", "problem": 56, "user": "506406c8e4b075d771da6f9f"}, {"code": "(fn [xs]\n  (:ordered (reduce (fn [memo x]\n            (if (contains? (:uniques memo) x)\n              memo\n              {:uniques (conj (:uniques memo) x),\n               :ordered (conj (:ordered memo) x)}))\n          {:uniques #{}, :ordered []}\n          xs)))", "problem": 56, "user": "50bd6033e4b0594b91591c66"}, {"code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "problem": 56, "user": "509251f3e4b09a7d0b586de5"}, {"code": "reduce #(if (some #{%2} %1) %1 (conj %1 %2)) []", "problem": 56, "user": "50acbd15e4b071b89ef26234"}, {"code": "(fn [c] (reduce (fn [r a] (if (some #(= a %) r) r (conj r a))) [] c))", "problem": 56, "user": "50921f9ae4b09a7d0b586de1"}, {"code": "#(loop [dist #{} res [] c %]\r\n  (if (empty? c)\r\n    res\r\n    (if (contains? dist (first c))\r\n      (recur dist \r\n        res \r\n        (rest c))\r\n      (recur (conj dist (first c)) \r\n        (conj res (first c)) \r\n        (rest c)))))", "problem": 56, "user": "4f1e4ab5535d64f603146496"}, {"code": "(fn [l] (reverse (second (reduce #( if (contains? (first %1 ) %2) %1 [(conj (first %1) %2 ) (cons %2 (second %1)) ])  [ #{} () ] l))))", "problem": 56, "user": "50956c2be4b087f34d351ab2"}, {"code": "(\n  fn sol [ coll ] (\n\t\treduce #(  \n\t\t\tif((  set %1 ) %2 )\n\t\t\t\t%1\n\t\t\t\t( conj %1 %2 )\n\t\t) [] coll\n\t)\n)", "problem": 56, "user": "50bf7b72e4b0ffd967a66cc1"}, {"code": "(fn [xs]\n  (second (reduce (fn [[s xs] x] (if (s x) [s xs] [(conj s x) (conj xs x)])) [#{} []] xs)))", "problem": 56, "user": "50c9e5e3e4b0a409464667d7"}, {"code": "reduce (fn [l n] (if (some #(= n %) l) l (conj l n))) []", "problem": 56, "user": "50c11f5ae4b096f585049c39"}, {"code": "(fn recdist [coll]\n  (loop [rst coll\n         res (empty coll)]\n    (if-not (empty? rst)\n      (recur (rest rst)\n             (if-not (some #(= % (first rst))\n                           res)\n               (cons (first rst)\n                     res)\n               res))\n      (reverse res))))", "problem": 56, "user": "50981062e4b04e098a4c7268"}, {"code": "(fn [coll]\n  (reduce\n    (fn [c e]\n      (if (some #(= e %) c)\n        c\n        (conj c e)))\n    []\n    coll))", "problem": 56, "user": "4f253a49e4b0d66497709ff3"}, {"code": "(fn[x]\n\t(second (reduce #(if(contains? (first %1) %2) %1 (vector (conj (first %1) %2) (conj (second %1) %2 ) ) ) '(#{} []) x) )\n)", "problem": 56, "user": "50b25f2ce4b03ea88043355f"}, {"code": "(fn removeDup [coll]\n  ((fn remove-iter [-coll -acc]\n     (if (empty? -coll) \n         -acc\n         (if (some #{(first -coll)} -acc)\n           (recur (rest -coll) -acc)\n           (recur (rest -coll) (conj -acc (first -coll))))) \n     ) coll []))", "problem": 56, "user": "4f038ed6535dcb61093f6b24"}, {"code": "(fn duplicate-filter [l]\n  (loop [ll l\n         found #{}\n         res []]\n    (if (empty? ll)\n      res\n      (let [ele (first ll)]\n        (if (contains? found ele)\n          (recur (rest ll) found res)\n          (recur (rest ll) (conj found ele) (conj res ele)))))))", "problem": 56, "user": "50c84ba2e4b00bb60fe0c53e"}, {"code": "(fn [x] \n  (reduce #(if (= (.indexOf %1 %2) -1)\n  \t(conj %1 %2)\n  \t%1) \n    [] x))", "problem": 56, "user": "4ec12516535dfed6da9c6da7"}, {"code": "(fn [coll]\n  (reduce\n   (fn [r x]\n     (if (some #{x} r)\n       r\n       (conj r x)))\n   [] coll))", "problem": 56, "user": "50b0cffae4b009df37c708c5"}, {"code": "reduce (fn [coll x] (if (= x (some #{x} coll)) coll (conj coll x))) []", "problem": 56, "user": "50733b31e4b0e3170b5a869a"}, {"code": "(fn [s]\n  (reduce (fn [xs x] (if (some #(= x %) xs)\n                       xs\n                       (concat xs [x])))\n          []\n          s))", "problem": 56, "user": "50d8f4b6e4b01f0871336e74"}, {"code": "(fn foo [x]\n      (if (empty? x) x\n        (concat (list (first x))\n                (foo (remove #(= % (first x)) x)))))", "problem": 56, "user": "5078300de4b0fc74642bff66"}, {"code": "(fn [s] (map (comp second first) (sort-by first \n                                  \t(map second (group-by second \n                                        (map-indexed #(identity [% %2]) s))))))", "problem": 56, "user": "50cae881e4b0f75dcc9a6e51"}, {"code": "(fn [p]\n          (loop [s p l []]\n             (if (empty? s)\n                 l\n                 (recur (rest s) (if (some #(= % (first s)) l)\n                                     l\n                                     (conj l (first s)))))))", "problem": 56, "user": "4f03f197535dcb61093f6b84"}, {"code": "(fn d [s]\n  (let [m (into {} (map #(vector % (.indexOf s %)) s))] \n    (keys (into (sorted-map-by (fn [key1 key2]\n                         (compare [(get m key1) key1]\n                                  [(get m key2) key2]))) m))))", "problem": 56, "user": "4fb79872e4b081705acca2d2"}, {"code": "(fn [coll]\n  (loop [x coll answer []]\n    (if (empty? x) answer\n      (recur (rest x)\n        (if (contains? (set answer) (first x))\n          answer\n          (conj answer (first x))\n        )\n      )\n    )\n  )\n)", "problem": 56, "user": "50bfbf25e4b05ae8c1cbbd9b"}, {"code": "#(second (reduce (fn [[s v] x] (if (s x) [s v] [(conj s x) (conj v x)])) [#{} []] %))", "problem": 56, "user": "5095f761e4b0ba05ca7aebfd"}, {"code": "(fn [x] \n  (if (= (count (set x))\n         (count x))\n    x\n    (#(keys (group-by identity %)) x)))", "problem": 56, "user": "4ff769bce4b0678c553fc38f"}, {"code": "(fn f [[x & xs]]\n    (if x (cons x (f (filter #(not= x %) xs)))))", "problem": 56, "user": "4ee77f15535d93acb0a66868"}, {"code": "(fn [s]\n  (loop [ss s\n         return '()]\n    (let [f (first ss)\n          r (rest ss)]\n      (if (empty? ss)\n        (reverse return)\n        (recur\n          r\n          (if (some #(= f %) return)\n            return\n            (conj return f)))))))", "problem": 56, "user": "50d8de3fe4b01f0871336e72"}, {"code": "; (fn [coll] (filter #(not (nil? %)) \n;                (first \n;                 (reduce (fn [res new] \n;                          [(conj (first res) \n;                                 (when (not ((second res) new)) new)) \n;                           (conj (second res) new)]) \n;                        [ [] #{} ] \n;                        coll))))\nreduce #(concat %1 (when (not (some #{%2} %1)) [%2])) []", "problem": 56, "user": "50de11b2e4b061dbdced7217"}, {"code": "(fn [coll]\n  (loop [items []\n         items-set #{}\n         [x & xs :as coll] coll]\n    (if (empty? coll)\n      items\n      (recur\n       (if (contains? items-set x) items (conj items x))\n       (conj items-set x)\n       xs))))", "problem": 56, "user": "507b7dbee4b09034bfeeb71e"}, {"code": "(fn [col]\n  ((fn [result rest-list]\n     (if (seq rest-list)\n       (let [first-item (first rest-list)]\n         (if (.contains result first-item)\n           (recur result (rest rest-list))\n           (recur (concat result (list first-item)) (rest rest-list))\n         )\n       )\n       result\n     )\n   ) '() col)\n)", "problem": 56, "user": "5021f0b3e4b00bba4502f7ac"}, {"code": "reduce\n  (fn [r v]\n    (if (some (fn [vv] (= v vv)) r)\n      r\n      (conj r v))) []", "problem": 56, "user": "50c9ece0e4b0a409464667d8"}, {"code": "(fn d [l]\n  (reduce\n   #(if ((set %) %2)\n      %\n      (conj % %2))\n   []\n   l))", "problem": 56, "user": "4ec3650f535dcc7ae8597d56"}, {"code": "(fn dist [coll]\n  (reduce #(if (some (partial = %2) %) % (conj % %2)) [] coll)\n)", "problem": 56, "user": "50e3ec87e4b0463d32072486"}, {"code": "(fn [xs] (reduce #(if (some (partial = %2) %1) %1 (conj %1 %2)) [] xs))", "problem": 56, "user": "50e3ddd4e4b01912b3285c47"}, {"code": "(fn [s]\n   (sort-by #(.indexOf s %)\n    (map #(first %) (group-by identity s))))", "problem": 56, "user": "50d0d4c8e4b00b15ecee976a"}, {"code": "(fn [x]\n  (sort-by #(.indexOf x %) (seq (set x))))", "problem": 56, "user": "50e8ff6be4b0ebbe794eb7f3"}, {"code": "reduce (fn [coll el] (if ((set coll) el) coll (conj coll el))) []", "problem": 56, "user": "50e8a340e4b0ebbe794eb7ed"}, {"code": "#(reduce (fn [v item]\n             (if (not= (.indexOf v item) -1)\n               v\n               (concat v (vector item))))\n           []\n           %)", "problem": 56, "user": "50e87427e4b0ebbe794eb7e8"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "50e7dd5de4b077ad597af36b"}, {"code": "(fn[x] (let [y (if (> (count x) 20) (sort (frequencies x)) (frequencies x))](keys y)))", "problem": 56, "user": "4eb0175b535d7eef30807336"}, {"code": "(fn dstnct [s] (if (empty? s) s (cons (first s) (dstnct (filter #(not (= % (first s))) (rest s))))))", "problem": 56, "user": "50dfb660e4b061dbdced7228"}, {"code": "(fn [s] (map second (map first (vals (let [r (group-by second (map-indexed vector s))]\n                                               (into (sorted-map-by #(compare (ffirst (r %1)) (ffirst (r %2)))) r))))))", "problem": 56, "user": "500854c4e4b028e089d3518c"}, {"code": "(fn [c]\n  (reduce\n    #(if (some #{%2} %)\n          %\n          (conj % %2))\n    []\n    c))", "problem": 56, "user": "4f410b63e4b0e243712b1fc5"}, {"code": "(fn [c]\n   (loop [s #{} a [] [f & r] c]\n     (if-not f\n       a\n       (recur (conj s f) (if (s f) a (conj a f)) r))))", "problem": 56, "user": "4db29f98535df7e46ed9b6c1"}, {"code": "#(reduce (fn [s i] (if (neg? (.indexOf s i)) (conj s i) s)) [] %)", "problem": 56, "user": "50ef9a7ae4b0bdaecbb47d9e"}, {"code": "(fn remove-dups [s]\n  (first\n    (reduce (fn [[lst st] e]\n              (let [lst (if (st e) lst (conj lst e))]\n                [lst (conj st e)]))\n            [[] #{}]\n            s)))", "problem": 56, "user": "50a7ef7fe4b090657f4a5ce0"}, {"code": "(partial reduce #(if ((set %) %2) % (conj % %2)) [])", "problem": 56, "user": "50ed4626e4b01236b1d4983c"}, {"code": "(fn [coll]\n  (loop [[k & ks] coll\n         result []]\n    (cond\n     (nil? k) result\n     (some #(= % k) result) (recur ks result)\n     :else (recur ks (conj result k)))))", "problem": 56, "user": "50ed3c6be4b01236b1d4983b"}, {"code": "(fn nodups[x]\n  (reverse (first\n    (reduce\n      (fn [data, item]\n        (if (contains? (last data) item)\n          data\n        (list (conj (first data) item) (assoc (last data) item 1))))\n      '(() {})\n    x))))", "problem": 56, "user": "503c02e5e4b0fc0f99c2e54e"}, {"code": "(fn [x] (loop [z x y [] ] (let [n (first z)] (if (empty? z) y (recur (rest z) (if (some #{n} y) y (conj y n)))))))", "problem": 56, "user": "50ef3e5de4b0a78662fa2652"}, {"code": "(fn solve-problem-56\n  ([col] (solve-problem-56 col #{}))\n  ([col seen]\n     (let [x (first col)\n           r (rest col)]\n       (when x\n         (if (contains? seen x)\n           (solve-problem-56 r seen)\n           (cons x (solve-problem-56 r (conj seen x))))))))", "problem": 56, "user": "4e6e3aac535d5021c1a89603"}, {"code": "(fn [s]\n  (:sq\n   (reduce\n    (fn [status el]\n      (let [{:keys [seen sq]} status]\n        {:seen (conj seen el)\n         :sq (if (seen el)\n               sq\n               (conj sq el))}))\n    {:seen #{} :sq []}\n    s)))", "problem": 56, "user": "4ffc10aae4b0678c553fc3d6"}, {"code": "reduce (fn [memo item] (if ((set memo) item) memo (conj memo item))) []", "problem": 56, "user": "504eb604e4b069badc5a33c4"}, {"code": "(fn [coll]\n  (letfn [(step [xs seen]\n           (lazy-seq\n            ((fn [[f :as xs] seen]\n               (when-let [s (seq xs)]\n                 (if (contains? seen f)\n                   (recur (rest s) seen)\n                   (cons f (step (rest s) (conj seen f))))))\n             xs seen)))]\n    (step coll #{})))", "problem": 56, "user": "505aa653e4b021387fb89857"}, {"code": "(fn [coll]\n  ((fn [acc s [x & r]]\n     (if-not x\n       acc\n       (if (s x)\n         (recur acc s r)\n         (recur (conj acc x) (conj s x) r))))\n   []\n   #{}\n   coll))", "problem": 56, "user": "4e7e4a1f535db169f9c7970c"}, {"code": "(fn [coll] \n  ((fn step [[x & xs] seen] \n     (when x\n       (if (seen x) \n         (step xs seen)\n         (cons x (step xs (conj seen x)))))) \n   coll #{}))", "problem": 56, "user": "50bc23e4e4b0594b91591c3c"}, {"code": "(fn [l] \n\t(reduce (fn [a v] \n\t\t\t(cond (not (some #(= % v) a)) \n\t\t\t\t(conj a v)\n\t\t\t\t:else a)) [] l))", "problem": 56, "user": "5097cfcbe4b00ad8bab4e977"}, {"code": "(fn [sq]\n  (letfn [(helper [rv sqset sq] (if (empty? sq) rv (if (contains? sqset (first sq)) \n                                                     (helper rv sqset (rest sq)) \n                                                     (helper (cons (first sq) rv) (conj sqset (first sq)) (rest sq)))))\n          ] (reverse (helper '() #{} sq))))", "problem": 56, "user": "50fbdacfe4b0d10d794c19f0"}, {"code": "(fn new-distinct [x]\n  (loop [sequen x result []]\n    (if (empty? sequen)\n      result\n      (if (not-any? (fn [x] (= x (first sequen))) result)\n        (recur (rest sequen) (conj result (first sequen)))\n        (recur (rest sequen) result)\n      )\n    )\n  )\n)", "problem": 56, "user": "50f89404e4b0aafb827eb204"}, {"code": "(fn [elts] \n\t(loop [result [] remaining elts]\n    \t(if (empty? remaining)\n         \tresult\n          \t(recur (conj result (first remaining)) (remove #(= (first remaining) %) remaining))\n        )\n    )\n)", "problem": 56, "user": "50fd9fd4e4b033b9c38d78d0"}, {"code": "(fn fun [s] (if (empty? (rest s)) s (cons (first s) (fun (remove #(= (first s) %) (rest s))))))", "problem": 56, "user": "50fde9b9e4b033b9c38d78d7"}, {"code": "(fn mydistinct [sqn] (let [x (first sqn)]\n    (if (not (empty? sqn))\n        (conj (remove #(= x %) (mydistinct (rest sqn))) x)\n    )\n  )\n)", "problem": 56, "user": "50f2e5cee4b0ec8ee6fa8643"}, {"code": "(fn fun [s] (if (empty? (rest s)) s (cons (first s) (fun (remove #(= (first s) %) (rest s))))))", "problem": 56, "user": "50f9c7fde4b0e7c80cb15a52"}, {"code": "(fn setify [notset]\n  (loop [result [] sequen notset] \n   (if (empty?  sequen)\n    result\n   (if (not (some (fn [x] (= x (first sequen))) result))\n     (recur (conj result (first sequen)) (rest sequen))\n     (recur result (rest sequen))\n     )\n   )\n   \n   ))", "problem": 56, "user": "50f87a67e4b0aafb827eb202"}, {"code": "(fn setify [notset]\n  (loop [result [] sequen notset] \n   (if (empty?  sequen)\n    result\n   (if (not (some (fn [x] (= x (first sequen))) result))\n     (recur (conj result (first sequen)) (rest sequen))\n     (recur result (rest sequen))\n     )\n   )\n   \n   ))", "problem": 56, "user": "50fee7c9e4b04bea760d0d7a"}, {"code": "reduce (fn [x y]\n  (if (some #(= % y) x)\n    x\n    (conj x y)))\n[]", "problem": 56, "user": "50f9e74ee4b0e7c80cb15a54"}, {"code": "(fn [lst]\n  (loop [lst,lst res,[] ]\n    (cond\n     (empty? lst) res\n     (some #{(first lst)} res) (recur (rest lst) res)\n     :else (recur (rest lst) (conj res (first lst)) )\n      )))", "problem": 56, "user": "50f0d000e4b0c5f4fa5ddb6f"}, {"code": "(fn [xs]\n    (let [in?  (fn [el s]\n               (not= -1 (.indexOf el s)))]\n  (reduce (fn [acc x]\n            (if (in? acc x)\n              acc\n              (conj acc x)))\n          [] xs)))", "problem": 56, "user": "4fc7ddffe4b0ee37620e182b"}, {"code": "(fn nub [[x & xs :as s]]\n  (if (empty? s)\n    ()\n    (cons x (nub (filter #(not= % x) xs)))))", "problem": 56, "user": "50e4b066e4b0cb9ec68fbca6"}, {"code": "reduce (fn [x y]\n         (if (some #(= % y) x)\n           x\n           (conj x y)))\n[]", "problem": 56, "user": "51002399e4b0ab35a0d409ff"}, {"code": "reduce #(if ((set %) %2) % (conj % %2)) []", "problem": 56, "user": "4ebaf790535dfed6da9c6d6e"}, {"code": "(fn [a-seq]\n  (reduce (fn [x y] (if (nil? (some (fn [z] (= y z)) x)) (conj x y)\n                        x)) [] a-seq))", "problem": 56, "user": "50febf94e4b075812dd6dfb3"}, {"code": "(fn [coll]\n  (sort-by \n   #(.indexOf coll %) (into #{} coll))\n  )", "problem": 56, "user": "50fa0dcee4b07934dda8b0bb"}, {"code": "#(loop [in %1 out [] seen #{}]\n    (if (empty? in)\n        out\n        (recur \n            (rest in)\n            (if (contains? seen (first in)) out (conj out (first in)))\n            (conj seen (first in)))))", "problem": 56, "user": "51059d33e4b0380e797c7d5c"}, {"code": "(fn [xs]\n  (persistent! (first\n   (reduce\n    (fn [[results visited] x]\n      (if (visited x) ; contains? doesn't work with transients yet.\n        [results visited]\n        [(conj! results x) (conj! visited x)]))\n    [(transient []) (transient #{})]\n    xs))))", "problem": 56, "user": "50fbf811e4b0d10d794c19f1"}, {"code": "reduce #({%2 %} ((set %) %2) (conj % %2)) []", "problem": 56, "user": "5006b7d2e4b0678c553fc48c"}, {"code": "(fn [theList]\n    (\n\t    (fn f [unparsedList, uniqueList]\n\t      (if (empty? unparsedList)\n\t        uniqueList\n\t        (if (\n                (fn g [tehList, tehElement]\n                  (if (empty? tehList)\n                    false\n                    (if (= (first tehList) tehElement)\n                      true\n                      (g (rest tehList) tehElement)\n                    )\n                  )\n                )\n                uniqueList (first unparsedList)\n              )\n\t          (f (rest unparsedList) uniqueList)\n\t          (f (rest unparsedList) (conj uniqueList (first unparsedList)))\n\t        )\n\t      )\n\t    )\n     theList\n     []\n    )\n  )", "problem": 56, "user": "50ff3800e4b017584cb41ccb"}, {"code": ";(fn my-distinct [coll]\n ;   (lazy-seq (if (seq coll) (cons (first coll) \n  ;                                 (my-distinct (filter #(not= (first coll) %) (rest coll))) ))))\n  \n  (fn m-distinct [coll]\n    (loop [[hd & tl :as coll] coll res [] added #{} ]\n      (if (seq coll)\n        (if (contains? added hd)\n          (recur tl res added)\n          (recur tl (conj res hd) (conj added hd)))         \n        res)))", "problem": 56, "user": "50eddbc4e4b06330c1f87c4b"}, {"code": "(fn [xs] (keep-indexed #(if (== (.indexOf xs %2) %1) %2) xs))", "problem": 56, "user": "50f85902e4b0aafb827eb1f8"}, {"code": "(fn d [c]\n  (if (<= (count c) 1)\n    c\n    (conj (d (filter (partial not= (first c)) (rest c)))\n          (first c))))", "problem": 56, "user": "50ebd63ce4b04edc3377703c"}, {"code": "(fn [coll]\n  (sort-by\n   #(.indexOf coll %) (into #{} coll))\n  )", "problem": 56, "user": "50f8615ae4b0aafb827eb1fa"}, {"code": "(fn dist [s] \n  (reduce (fn [c e]  (if-not (some #(= % e)  c ) (conj c e ) c) )  []  s))", "problem": 56, "user": "5101192ae4b0bef64c30e266"}, {"code": "(fn [result [x & xs]]                                                                                                                                         \n  (let [result (if (some (partial = x) result)                                                                                                                \n                 result                                                                                                                                       \n                 (conj result x))]                                                                                                                            \n    (if (seq xs)                                                                                                                                              \n      (recur result xs)                                                                                                                                       \n      result)))                                                                                                                                               \n[]", "problem": 56, "user": "510c1dd5e4b078ea71921113"}, {"code": "(fn distinct1\n  [coll]\n    (let [step (fn step [xs seen]\n                   (lazy-seq\n                    ((fn [[f :as xs] seen]\n                      (when-let [s (seq xs)]\n                        (if (contains? seen f) \n                          (recur (rest s) seen)\n                          (cons f (step (rest s) (conj seen f))))))\n                     xs seen)))]\n      (step coll #{})))", "problem": 56, "user": "50ab44b2e4b0f65d68208509"}, {"code": "(fn [coll] \n  (loop [partitioned [] i 0]\n    (if (= (count coll) i)\n      partitioned\n      (recur \n       (if (.contains partitioned (nth coll i)) \n         partitioned \n         (conj partitioned (nth coll i)))\n       (inc i)))))", "problem": 56, "user": "50e4f4e9e4b049a987753896"}, {"code": "(fn [l] (reverse (loop [sl l result []] (if (empty? sl) result (recur (remove #(= % (first sl)) sl) (cons (first sl) result))))))", "problem": 56, "user": "510931ede4b0c71f76895663"}, {"code": "(fn [s]\n  (reverse\n  (reduce (fn [sr e]\n            (if (some #{e} sr)\n              sr\n              (cons e sr)))\n          nil\n          s)))", "problem": 56, "user": "5092fe10e4b097f48cc3857e"}, {"code": "(fn f [x]\n  (if (empty? (rest x))\n    x\n    (cons (first x) (f (filter #(not= (first x) %) x)))))", "problem": 56, "user": "5102489de4b00c483ae176f6"}, {"code": "(partial #(if (empty? %2)\n            %1\n            (if (some (fn [val]\n                        (= val (first %2)))\n                      %1)\n              (recur %1 (rest %2))\n              (recur (conj %1 (first %2)) (rest %2))))\n          [])", "problem": 56, "user": "51105c7fe4b04c71fce993ef"}, {"code": "(fn [s] (keep-indexed #(if (not-any? #{%2} (take % s)) %2) s))", "problem": 56, "user": "5107b86de4b05b2b4eee7495"}, {"code": "(fn [c] (reduce #(if (seq (filter (fn [a] (= a %2)) %)) % (conj % %2)) [] c))", "problem": 56, "user": "4ff67852e4b0678c553fc37e"}, {"code": "reduce (fn [a b] (if (seq (filter #{b} a)) a (conj a b))) []", "problem": 56, "user": "50e3e108e4b01912b3285c48"}, {"code": "(fn [xs] \n  (if (or (list? xs) (seq? xs))\n  (loop [restList (into '() (reverse xs)) return '()]\n    (if (empty? restList)\n      (into (empty xs) return)\n      (recur (rest restList) (if (reduce #(or %1 (= (first restList) %2)) false return)\n                              return\n                              (conj return (first restList))))))\n  (loop [restList (into '() (reverse xs)) return '()]\n    (if (empty? restList)\n      (reverse (into (empty xs) return))\n      (recur (rest restList) (if (reduce #(or %1 (= (first restList) %2)) false return)\n                              return\n                              (conj return (first restList))))))))\n\n;As you can see, this problem angered me.", "problem": 56, "user": "51004dabe4b0e0dde55c17f0"}, {"code": "(fn [coll]\n  (loop [c coll\n         r []]\n    (if (seq c)\n      (if ((set r) (first c))\n        (recur (next c) r)\n        (recur (next c) (conj r (first c))))\n      r)))", "problem": 56, "user": "4e4be570535dc968683fc4d8"}, {"code": "(fn distinct-items [a]\n\t(reverse (reduce (fn [acc x] (if (some #{x} acc) acc (cons x acc))) [] a)))", "problem": 56, "user": "50ed8a5fe4b06330c1f87c3d"}, {"code": "(fn _distinct [items]\n  ((fn dh [result remaining]\n     (if (empty? remaining)\n       result\n       (if ((set result) (first remaining))\n         (dh result (rest remaining))\n         (dh (concat result (take 1 remaining)) (rest remaining)))))\n   '() items))", "problem": 56, "user": "510cd1dde4b078ea71921124"}, {"code": "#(loop [i 0 v []]\n  (if (< i (count %))\n    (if (contains? (set v) (nth % i))\n      (recur (inc i) v)\n      (recur (inc i) (conj v (nth % i))))\n    v))", "problem": 56, "user": "50bce014e4b0594b91591c63"}, {"code": "reduce (fn [a b] \n         (if (some #(= b %) a) a (conj a b))) []", "problem": 56, "user": "503539dee4b0ed9c821488f6"}, {"code": "(fn [xs]\n  (map first\n       (filter #(let [[item sset] %] (not (contains? sset item)))\n               (map-indexed #(vector %2 (set (take %1 xs)))\n                            xs))))", "problem": 56, "user": "5102ac9de4b00c483ae176fa"}, {"code": "(fn my-distinct\n  ([s]\n    (my-distinct s {} []))\n  ([s seen result]\n    (if (empty? s) result\n      (let [head (first s)\n            tail (rest s)\n            new-seen (update-in seen [head] (fnil inc 0))]\n        (if (contains? seen head)\n          (recur tail new-seen result)\n          (recur tail new-seen (conj result head)) )))))", "problem": 56, "user": "5119f3d5e4b06c8af0111818"}, {"code": "(fn [coll]\n  (letfn [(lazy-distinct [coll seen]\n     \t\t(lazy-seq\n             (when-let [f (first coll)]\n               (if (seen f)\n               \t (lazy-distinct (rest coll) seen)\n               \t (cons f (lazy-distinct (rest coll) (conj seen f)))))))]\n    (lazy-distinct coll #{})))", "problem": 56, "user": "50d93c53e4b0fd36a4b89223"}, {"code": "reduce #(if (some #{%2} %1) %1 (conj %1 %2)) []", "problem": 56, "user": "4f8c813de4b02e764a0a519f"}, {"code": "reduce\n#(if (some #{%2} %)\n   %\n   (conj % %2))\n[]", "problem": 56, "user": "510db6cde4b078ea71921145"}, {"code": "(fn [coll]\n    (loop [xs coll ys [] members #{}]\n      (if\n       (empty? xs) ys\n       (let [x (first xs)]\n         (if (members x)\n           (recur (rest xs) ys members)\n           (recur (rest xs) (conj ys x) (conj members x)))))))", "problem": 56, "user": "4e50ad74535dc968683fc4ec"}, {"code": "reduce (fn [lst n]\n          (if (nil? (some #{n} lst))\n            (conj lst n)\n            lst))\n        []", "problem": 56, "user": "50589113e4b06522596eba7f"}, {"code": "(fn [coll]\n  (reduce (fn [memo item]\n            (if (not-any? #(= item %) memo)\n              (conj memo item)\n              memo))\n          []\n          coll))", "problem": 56, "user": "51195e77e4b055cfb310d499"}, {"code": "#(loop [f {}\n               r %1\n               c %1\n               n 1]\n             (cond \n              (empty? c) r\n              (contains? f (first c)) (recur f (concat (take (dec n) r) (drop  n r)) (rest c) n)\n              :else (recur (assoc f (first c) true) r (rest c) (inc n))))", "problem": 56, "user": "511b810ce4b07ab9ec456182"}, {"code": "(fn [coll]\n    (let [step (fn step [xs seen]\n                   (lazy-seq\n                    ((fn [[f :as xs] seen]\n                      (when-let [s (seq xs)]\n                        (if (contains? seen f)\n                          (recur (rest s) seen)\n                          (cons f (step (rest s) (conj seen f))))))\n                     xs seen)))]\n      (step coll #{})))", "problem": 56, "user": "51181009e4b0e0897831a60f"}, {"code": "(fn [coll]\n  (sort-by\n   #(.indexOf coll %)\n   (vec (set coll))))", "problem": 56, "user": "511f88eee4b085952a83535f"}, {"code": "(fn [coll]\n       (reduce (fn [coll2 e]\n                    (if (some #(= e %) coll2)                \n                         coll2\n                        (conj coll2 e)))  [] coll))", "problem": 56, "user": "4e964f4a535dbda64a6f6b42"}, {"code": "(fn [coll] \n  ((fn step [[x & xs] seen] \n     (when x\n       (if (seen x) \n         (step xs seen)\n         (cons x (step xs (conj seen x)))))) \n   coll #{}))", "problem": 56, "user": "5115cf87e4b0ce5098ee73c3"}, {"code": "#(reduce (fn [v k] (if (some #{k} v) v (conj v k))) [] %)", "problem": 56, "user": "50f9739ce4b0e7c80cb15a4d"}, {"code": "(fn [xs]\n  (loop [xset (set xs)\n         acc []]\n    (if (seq xset)\n      (let [x (some xset xs)]\n        (recur (disj xset x) (conj acc x)))\n      acc)))", "problem": 56, "user": "511623cbe4b0d4f670fd2fe1"}, {"code": "#(let [g (keys (group-by identity %))] \n   (if (number? (first %)) (sort g) g))", "problem": 56, "user": "510d3dc6e4b078ea71921132"}, {"code": "(fn my-distinct\n  [items]\n  (reduce\n   (fn [visited incoming]\n     (if ((set visited) incoming)\n       visited\n       (conj visited incoming)))\n   []\n   items))", "problem": 56, "user": "511720eae4b0063b4e3e16da"}, {"code": "(fn [l]\n   (reduce (fn [li el]\n             (if (some #{el} li)\n               li\n               (conj li el))) [] l))", "problem": 56, "user": "50d3b03fe4b030b634c368b9"}, {"code": "(fn [coll]\n  (loop [x coll\n         r []]\n    (if (nil? (first x))\n      r\n      (if (some #(= % (first x)) r)\n        (recur (rest x) r)\n        (recur (rest x) (concat r (vector (first x))))))))", "problem": 56, "user": "5123ac8ee4b061b4c6f0e0b1"}, {"code": "#(reduce (fn [result x]\n           (if ((set result) x)\n             result\n             (conj result x)))\n         [] %)", "problem": 56, "user": "510d9d61e4b078ea71921141"}, {"code": "(fn this \n  ([coll] (this coll #{} []))\n  ([coll encountered result]\n   (if (empty? coll)\n     result\n     (if (encountered (first coll))\n       (this (rest coll) encountered result)\n       (this (rest coll) (conj encountered (first coll)) (conj result (first coll)))))\n   )\n  )", "problem": 56, "user": "4ec12577535dfed6da9c6da8"}, {"code": "(fn [s] (reduce #(if (some #{%2} %) % (conj % %2)) [] s))", "problem": 56, "user": "4fa05b99e4b0dcca54ed6d47"}, {"code": "(fn [s]\n  (loop [uniq-seq []\n         seen-vals #{}\n         unseen-seq s]\n    (if (empty? unseen-seq)\n      uniq-seq\n      (let [elem (first unseen-seq)]\n        (if (contains? seen-vals elem)\n          (recur uniq-seq seen-vals (rest unseen-seq))\n          (recur (conj uniq-seq elem) (conj seen-vals elem) (rest unseen-seq)))))))", "problem": 56, "user": "51281b25e4b03a34742b4304"}, {"code": "(fn f [s]\n  (when (seq s)\n    (cons (first s)\n          (f (filter #(not= (first s) %) s)))))", "problem": 56, "user": "51256b40e4b05d10e3e395f8"}, {"code": "(fn [lst]\n  (loop [seen #{}\n         xs lst\n         result []]\n    (if-not (seq xs) result\n      (let [elem (first xs)]\n        (recur (conj seen elem)\n               (rest xs)\n               (if (seen elem)\n                 result\n                 (conj result elem)))))))", "problem": 56, "user": "504e108ce4b078edc5f593b3"}, {"code": "#((fn [[x & xs] seen rv]\n    (if (nil? x) rv\n      (recur xs (conj seen x)\n             (if (seen x) rv (conj rv x)))))\n  % #{} [])", "problem": 56, "user": "510acd6ee4b078ea719210f4"}, {"code": "(fn my-dis [coll]\n  (loop [result [], checker #{}, coll coll]\n    (if (empty? coll)\n      result\n      (if (contains? checker (first coll))\n        (recur result checker (rest coll))\n        (recur (conj result (first coll)) (conj checker (first coll)) (rest coll))))))", "problem": 56, "user": "512474ede4b02c3f2a072cce"}, {"code": "(fn [coll]\n  (loop [c coll result []]\n    (if (empty? c)\n      (seq result)\n      (let [x (first c)\n            r (rest c)]\n        (if ((set result) x)\n          (recur r result)\n          (recur r (conj result x))))\n      )\n    ) \n  )", "problem": 56, "user": "4fbbcf0ce4b081705acca2ee"}, {"code": "(fn [coll]\n   (loop [result [] used #{} elements coll]\n     (if elements\n       (recur \n         (if (contains? used (first elements))\n           result\n           (conj result (first elements))\n           )\n         (conj used (first elements))\n         (next elements)\n         )\n       result\n     )\n     )\n   )", "problem": 56, "user": "5106dc1be4b01150e115ebf0"}, {"code": "(fn get_distinct\n  ([list_to_search distinct_elms]\n    (if\n      (empty? list_to_search)\n       distinct_elms\n      (let [curitem (first list_to_search)\n            rest_of_list (rest list_to_search)]\n        (if\n          (not (empty? (filter #(= curitem %) distinct_elms)))\n          (recur rest_of_list distinct_elms)\n          (recur rest_of_list (concat  distinct_elms (list curitem)))\n          )\n        )\n      )\n    )\n  ([list_to_search] (get_distinct\n                      (rest list_to_search)\n                      (list (first list_to_search))\n                    )\n  )\n)", "problem": 56, "user": "502be4fae4b08f5602f232eb"}, {"code": "reduce (fn [acc item]\n         (if (some #{item} acc)\n           acc\n           (conj acc item)))\n       []", "problem": 56, "user": "4f525fdce4b03ad3f0c10d37"}, {"code": "reduce #(if (some #{%2} %1) %1 (conj %1 %2)) []", "problem": 56, "user": "5125745ae4b05d10e3e395f9"}, {"code": "#(loop [input % result []]\n   (if (empty? input)\n     result\n     (if (not (nil? (some #{(first input)} result)))\n       (recur (rest input) result)\n       (recur (rest input) (conj result (first input))))))", "problem": 56, "user": "512d3304e4b040332b905b2d"}, {"code": "(fn foo \n  ([x] ()(foo [] x))\n  ([a b] \n    (if (not= 0 (count b))\n     \t(if ((fn [i j]\n\t(some #(= i %) j)) (first b) a)\n\t    \t(foo a (rest b))\n            (foo (conj a (first b)) (rest b))\n         )\n     a\n   )\n  )\n)", "problem": 56, "user": "4e2164ff535d04ed9115e815"}, {"code": "(fn [xs]\n  (loop [xs xs s #{} zs []]\n    (if (seq xs)\n      (let [x (first xs)]\n      \t(if (contains? s x)\n          (recur (rest xs) s zs)\n          (recur (rest xs) (conj s x) (conj zs x))))\n      zs)))", "problem": 56, "user": "511442d0e4b0e9c109bb74d5"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "4fe8fda4e4b0547ebccb2438"}, {"code": "(fn [s] (reduce (fn [s2 i] (if (= (take-while #(not= i %) s2) s2) (conj s2 i) s2)) [] s))", "problem": 56, "user": "51319a53e4b06942423563c8"}, {"code": "(fn uniq [s]\n  (first (reduce \n   (fn [[l f :as acc] item]\n     (if-not (f item)\n       ((apply juxt (map #(partial conj %) acc)) item)\n       acc))\n   [[] #{}] s)))", "problem": 56, "user": "50d3ec8be4b030b634c368bb"}, {"code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "problem": 56, "user": "502ade49e4b0614b52996120"}, {"code": "(fn [coll]\n  (loop [result []\n         [f & r] coll]\n    (if (= f nil) result\n      (if (some #{f} result)\n        (recur result r)\n        (recur (conj result f) r)))))", "problem": 56, "user": "5132c6f0e4b021281ec7b6d3"}, {"code": "(fn [lst]\n\t((fn dstn-rec [[cur & rst] seen]\n\t\t(when cur\n\t\t\t(if (seen cur)\n\t\t\t\t(dstn-rec rst seen)\n\t\t\t\t(cons cur (dstn-rec rst (conj seen cur)))\n\t\t\t)\n\t\t)\n\t) lst #{})\n)", "problem": 56, "user": "511cca27e4b00c2a1fa7ff7d"}, {"code": "(fn [c] (second (reduce (fn [[seen acc] n] (if (seen n) [seen acc] [(conj seen n) (conj acc n)])) [#{} []] c)))", "problem": 56, "user": "50e0d5a3e4b061dbdced723d"}, {"code": "(fn [coll]\n  (reduce (fn [ucoll, item]\n            (if (some #{item} ucoll)\n              ucoll\n              (conj ucoll item)))\n          [] coll))", "problem": 56, "user": "4dada426c9a9d6ed2a99dc57"}, {"code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "problem": 56, "user": "5105ed16e4b01150e115ebe2"}, {"code": "#(reduce (fn [s v]\n           (if-not ((set s) v)\n             (conj s v)\n             s)) [] %1)", "problem": 56, "user": "4e6f1b7a535d5021c1a89618"}, {"code": "#(loop [accum [] seen #{} coll %1]\n   (if (empty? coll) accum (let [f (first coll)] (recur (if (contains? seen f) accum (conj accum f)) (conj seen f) (rest coll))))\n   )", "problem": 56, "user": "4e823f41535db62dc21a62c8"}, {"code": "(fn [x]\n  (reduce #(if (apply distinct? (conj %1 %2))\n             (conj %1 %2)\n             %1\n             )\n          []\n          x\n    ))", "problem": 56, "user": "509b152be4b0412cdea6eb1e"}, {"code": "#(->> % (reduce (fn [[l h] e] (if (contains? h e) [l h] [(conj l e) (conj h e)])) [[] #{}]) first)", "problem": 56, "user": "5137c3b0e4b0509a8b470482"}, {"code": "(partial\n reduce\n (fn [s, x]\n   (if (some (partial = x) s)\n     s\n     (concat s (list x))))\n '())", "problem": 56, "user": "51365524e4b04ac1f358dd52"}, {"code": "(fn dsc [sq]\n  (if (empty? sq)\n    sq\n    (conj\n      (dsc (filter #(not= % (first sq)) (rest sq)))\n      (first sq))))", "problem": 56, "user": "504e12ade4b078edc5f593b7"}, {"code": "(fn [coll] (first (first (take 1 (drop-while #(not (empty? (nth % 2)))\n                                              (iterate (fn [[result values input]]\n                                                         (let [v (first input)] \n                                                           (conj (if (contains? values v) [result values] [(conj result v) (conj values v)])\n                                                                 (rest input)))) [[] #{} coll]))))))", "problem": 56, "user": "513a4babe4b067e25a345eca"}, {"code": "(fn [xs] (loop [coll xs seen #{} res []] \n           (if-not \n             coll\n             res \n             (recur (next coll) \n                    (conj seen (first coll)) \n                    (if (contains? seen (first coll)) res (conj res (first coll)))))))", "problem": 56, "user": "513d121fe4b0e544971636a2"}, {"code": "(fn [items]\n\t\t(reduce\n\t\t\t(fn [result item]\n\t\t\t\t(if (some #{item} result)\n\t\t\t\t\tresult\n\t\t\t\t\t(conj result item)))\n\t\t[]\n\t\titems))", "problem": 56, "user": "51205867e4b0e88f5a20c40f"}, {"code": "(fn\n  [v]\n  (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] v))", "problem": 56, "user": "4fdf566fe4b05e33b9224f99"}, {"code": "(fn prob56 [coll] (reduce (fn [c x]\n      (if (contains? (set c) x) c (conj c x))) [] coll))", "problem": 56, "user": "512f06c5e4b0762be4c7aad7"}, {"code": "(fn rd\n  ([l] (rd l [] #{}))\n  ([l a s] (if (empty? l)\n             a\n             (let [f (first l)\n                   r (rest l)]\n               (if (s f)\n                 (recur r a s)\n                 (recur r (conj a f) (conj s f)))))))", "problem": 56, "user": "4e9a1512535dbda64a6f6b6e"}, {"code": "(partial reduce (fn [a b] (if (some #{b} a) a (conj a b))) [])", "problem": 56, "user": "51307b84e4b08c712d3fae39"}, {"code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "problem": 56, "user": "50b35486e4b03ea88043356a"}, {"code": "#(if (= 1 (apply max (vals (frequencies %)))) % (keys (frequencies %)))", "problem": 56, "user": "513ca934e4b0b86ece9f3228"}, {"code": "(fn mydistinct [v] (loop [[val & more] v seen []] (if-not more (if (not-any? #(= val %) seen) (conj seen val) seen) (recur more (if (not-any? #(= val %) seen) (conj seen val) seen)))))", "problem": 56, "user": "5138d08be4b0a5db03d727db"}, {"code": "(fn [xs]\n  (second (reduce\n           (fn [[s a] v]\n             (if (s v) [s a]\n                 [(conj s v) (conj a v)]))\n           [#{} []] xs )))", "problem": 56, "user": "50fa01bce4b07934dda8b0ba"}, {"code": "(fn [s] \n  (loop\n    [s s\n     r []\n     m #{}]\n    (if (empty? s) r\n      (let [[h & re] s]\n        (recur re (if (contains? m h) r (conj r h)) (conj m h))))))", "problem": 56, "user": "5081566ce4b0946d0443855b"}, {"code": "(fn [s] (reduce #(if ((set %) %2) % (conj % %2)) [] s))", "problem": 56, "user": "51424cc8e4b0b50abeb46b34"}, {"code": "(fn [xs]\n  (reduce #(if (some #{%2} %) % (conj % %2)) [] xs))", "problem": 56, "user": "4fca4c37e4b0ee37620e184f"}, {"code": "#(first (reduce (fn [[r v] i] (if (v i) [r v] (list (conj r i) (into v (list i))))) '([] #{}) %))", "problem": 56, "user": "50e3fe8fe4b0463d32072488"}, {"code": "(fn [col]\n  (loop [[hd & rst] col m {} out []]\n    (if (nil? hd)\n      out\n      (if (contains? m hd)\n        (recur rst m out)\n        (recur rst (assoc m hd 1) (conj out hd)) ))))", "problem": 56, "user": "513cb853e4b0b86ece9f322b"}, {"code": "#(reduce (fn [ret e]\n\t\t  (if (some (fn [x] (= x e)) ret)\n\t\t      ret\n\t\t    (conj ret e)))\n\t      [] %)", "problem": 56, "user": "511b9017e4b00c2a1fa7ff6b"}, {"code": "(fn dis [col]\n  (loop [t []\n         i col\n         s #{}]\n    (if (seq i)\n      (recur (if (s (first i)) t (conj t (first i)))\n             (drop 1 i)\n             (conj s (first i)))\n      t)))", "problem": 56, "user": "4feff3b6e4b0678c553fc31e"}, {"code": "(partial reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [])", "problem": 56, "user": "513e8141e4b02b2a3d8235c1"}, {"code": "(fn [s]\n  (sort-by #(.indexOf s %)\n           (map first (group-by identity s))))", "problem": 56, "user": "512eb723e4b0b740abc5982b"}, {"code": "(fn [coll] (reduce (fn [agg item] (if (some #{item} agg) agg (conj agg item))) [] coll))", "problem": 56, "user": "4f2d4d4ce4b0d6649770a058"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "513dcc1ce4b0825f97f7f964"}, {"code": "(fn [n] (if (= (class n) clojure.lang.LazySeq) (sort (flatten (keys (group-by identity n)))) (keys (group-by identity n))))", "problem": 56, "user": "5124619ae4b02c3f2a072ccd"}, {"code": "(fn [c]\n  (filter (complement nil?) (reduce (fn [r i] (if (some #(= i %) r) r (conj (vec r) i))) [] c)))", "problem": 56, "user": "514721c6e4b0d520409ed392"}, {"code": "(fn [s] \n  (loop [[x & xs] s\n         seen #{}\n         ret []]\n    (cond\n     (nil? x) ret\n     (contains? seen x) (recur xs seen ret)\n     :else (recur xs (conj seen x) (conj ret x)))))", "problem": 56, "user": "5117c31ee4b0e0897831a60c"}, {"code": "reduce #(if (contains? (set %) %2) % (conj % %2)) []", "problem": 56, "user": "513f0565e4b051389b345b3b"}, {"code": "(fn [xs]\n  (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] xs))", "problem": 56, "user": "4f21838fe4b0d66497709fd2"}, {"code": "(fn stuff [list]\n  (if (empty? list)\n\t  list\n\t  (cons\n\t    (first list)\n\t    (stuff (filterv #(not= (first list) %) (rest list)))\n\t  )\n  )\n)", "problem": 56, "user": "51018807e4b0a79bcc8c0e0b"}, {"code": "(fn removeDup [coll] (if (empty? coll) coll (cons (first coll) (removeDup (filter #(not= (first coll) %) (rest coll))))))", "problem": 56, "user": "514a2fa1e4b0829bd132edb5"}, {"code": "(fn rdi [x]\n  ((fn ano [r c]\n     (if (empty? r)\n       []\n       (let [f (first r)]\n         (if (contains? c f)\n           (ano (rest r) c)\n           (cons f (ano (rest r) (conj c f)))))))\n    x #{}))", "problem": 56, "user": "5110b8bae4b04c71fce993f4"}, {"code": "#(cond (= (count %1) 6) (sort (into [] (set %1))) (= (count %1) 4) '([2 4] [1 2] [1 3]) (= (count %1) 50) (range 50) :else (into [] (set %1)))", "problem": 56, "user": "4fb4303fe4b081705acca2ac"}, {"code": "reduce #(if ((set %) %2) % (conj % %2)) []", "problem": 56, "user": "50742549e4b054001656accf"}, {"code": "(fn [coll]\n  (reduce (fn [acc item]\n            (if ((set acc) item)\n              acc\n              (conj acc item)))\n          [] coll))", "problem": 56, "user": "505b9084e4b032b709c81371"}, {"code": "(fn [x]\n  (reduce #(if ((set %) %2)\n             %\n             (conj % %2)) [] x))", "problem": 56, "user": "4fbef9a6e4b081705acca316"}, {"code": "(fn [s] (map second\n(sort (map #(vector (apply min (% 1)) (% 0) )\n     (group-by (vec s) (range (count s)))\n     ))\n) )", "problem": 56, "user": "514457fbe4b0b4fb4ace5f43"}, {"code": "(fn f[[x & xs :as s]] (if (seq s) (cons x (f (remove #{x} xs)))))", "problem": 56, "user": "4f296a80e4b0d6649770a02a"}, {"code": "(fn [coll]\n  (loop [x coll\n         y []]\n    (cond\n     (empty? x) y\n     (some #{(first x)} y) (recur (rest x) y)\n     :else (recur (rest x) (conj y (first x))))))", "problem": 56, "user": "5098f5d6e4b0cae2931060a4"}, {"code": "(fn my-distinct [sq]\n  (let [dst (fn dst [sq elts]\n              (if (empty? sq) nil\n                (lazy-seq\n                  (if (contains? elts (first sq))\n                    (dst (rest sq) elts)\n                    (cons (first sq) (dst (rest sq)\n                                       (conj elts (first sq))))))))]\n    (dst sq #{})))", "problem": 56, "user": "515737f0e4b0b0b4b87062d0"}, {"code": "(fn f [x y] (if (empty? y) '() (if (contains? x (first y)) (f x (rest y)) (cons (first y) (f (conj x (first y)) (rest y)))))) #{}", "problem": 56, "user": "514d398ee4b019235f6c0583"}, {"code": "(fn [x] (loop [freq #{} \n               lst x \n               ret []] \n  (if (empty? lst) \n    ret \n    (if (freq (first lst)) \n      (recur freq (rest lst) ret)\n      (recur (conj freq (first lst)) (rest lst) (conj ret (first lst)))\n    ))))", "problem": 56, "user": "5158bba4e4b059418b97f0ab"}, {"code": "(fn [coll]\n  (map first\n    (sort-by val\n      (reduce #(if (contains? % (first %2)) % (conj % {(first %2)  (second %2)}))\n        {} (map-indexed (fn [idx itm] [itm idx]) coll)))))", "problem": 56, "user": "515a6151e4b0394f658fe241"}, {"code": "(fn [coll]\n  (reduce (fn [a b] (if ((set a) b) a (conj a b))) [] coll))", "problem": 56, "user": "5126dbabe4b083bb8f88cf0e"}, {"code": "(fn [xs]\n  (loop [a [] b xs]\n    (if (empty? b)\n      a\n      (recur (conj a (first b)) (remove #(= % (first b)) b)))))", "problem": 56, "user": "511f9625e4b085952a835362"}, {"code": "(fn [se]\n  (reduce (fn [acc value](if (some #(= % value) acc) acc (conj acc value))) [] se))", "problem": 56, "user": "515828b8e4b0a069fd272c71"}, {"code": "(fn [s] (reduce (fn [a e] (if (neg? (.indexOf a e)) (conj a e) a)) [] s))", "problem": 56, "user": "5142ea50e4b0c172af7558ca"}, {"code": "(fn [l]\n  (letfn [(my-distinct [acc s l]\n                       (if (empty? l) acc\n                         (let [[hd & tl] l]\n                           (if (contains? s hd)\n                             (my-distinct acc s tl)\n                             (my-distinct (conj acc hd) (conj s hd) tl)))))]\n    (into (empty l) (my-distinct (empty l) #{} l))))", "problem": 56, "user": "515ead6be4b049add99a053e"}, {"code": "(partial reduce\n  (fn [x, y]\n    (if (contains? (set x) y)\n      x\n      (conj x y))\n   )\n[])", "problem": 56, "user": "513b43ede4b067e25a345ed3"}, {"code": "reduce (fn [col n] (if (some #(= n %) col) col (conj col n))) []", "problem": 56, "user": "510967aae4b07c05fdf6dc0f"}, {"code": "reduce (fn [s n] (if (some #(= % n) s) s (conj s n))) []", "problem": 56, "user": "5150a7d7e4b03e678e393abb"}, {"code": "(fn [s] (sort-by #(.indexOf s %) (keys (group-by identity s))))", "problem": 56, "user": "51533ecde4b0252ac4b16619"}, {"code": "#(seq (java.util.LinkedHashSet. %))", "problem": 56, "user": "5093ca51e4b097f48cc38585"}, {"code": "#(loop [i (first %)\n        coll (rest %)\n        seen #{}\n        acc []]\n   (cond\n     (nil? i) acc\n     (seen i) (recur (first coll) (rest coll) seen acc)\n     :else (recur (first coll) (rest coll) (conj seen i) (conj acc i))))", "problem": 56, "user": "51057b2be4b06d28cacc92e8"}, {"code": "(fn [s]\n  (:result \n    (reduce \n      (fn [acc e] \n        ((fn [e {:keys [set result]}]\n          (if (contains? set e) \n            acc\n            {:set (conj set e) :result (conj result e)}\n            )) e acc)) \n      {:set #{} :result []}\n      s)))", "problem": 56, "user": "4fee04a0e4b0678c553fc308"}, {"code": "(fn [s]\n    (loop [res []\n           todo s\n           seen #{}]\n      (if (empty? todo)\n        res\n        (if (contains? seen (first todo))\n          (recur res (next todo) seen)\n          (recur (conj res (first todo)) (next todo) (conj seen (first todo)))))))", "problem": 56, "user": "5165a235e4b079ad97ec44ac"}, {"code": "(fn dist [coll]\n  (let [f (frequencies coll)]\n  (filter (comp not nil?)\n    (map-indexed #(if (and \n                      (not= \n                       (filter (partial = %2) coll) \n                       (filter (partial = %2) (drop %1 coll)))\n                     (not= 1 (f %2)))\n                  nil\n                  %2) coll))))", "problem": 56, "user": "50c8697ce4b00bb60fe0c53f"}, {"code": "(comp first (fn [e] (reduce (fn [[result helperset :as acc] arg] (if (helperset arg)  acc [(conj result arg) (conj helperset arg)])) [[]#{}] e)))", "problem": 56, "user": "516c4c08e4b06f078fab251d"}, {"code": "(fn distinct-items [items]\n  (reduce #(if (nil? (some (partial = %2) %1)) (conj %1 %2) %1) [] items))", "problem": 56, "user": "51696bcde4b03f62cda68ce7"}, {"code": "(fn [l]\n  (loop [result [] l l]\n    (if (seq l)\n      (let [i (first l)]\n        (if (some #{i} result)\n          (recur result (rest l))\n          (recur (conj result i) (rest l))))\n      result)))", "problem": 56, "user": "50b1d166e4b03ea880433554"}, {"code": "(fn [xs]\n  ((fn [xs chk ys]\n    (if (empty? xs)\n      ys\n      (if (contains? chk (first xs))\n        (recur (rest xs) chk ys)\n        (recur (rest xs) (assoc chk (first xs) 0) (conj ys (first xs)))))) xs {} []))", "problem": 56, "user": "516f06dce4b06aac486e5b39"}, {"code": "(fn [xs]\n   (reduce #(if (some #{%2} %) % (conj % %2)) [] xs))", "problem": 56, "user": "50f48298e4b004d364930527"}, {"code": "#(seq (java.util.LinkedHashSet. %))", "problem": 56, "user": "5164867fe4b003cf19fdde3e"}, {"code": "(fn [s] \n (lazy-seq\n  (second \n   (reduce \n    (fn [[accset acclist] x]\n     (cond\n       (nil? (accset x)) (list (conj accset x) (concat  acclist (list x)))\n       :else\n     \t (list accset acclist)\n      )\n   )\n   (list #{},'())\n   s\n   )\n  )\n )\n)", "problem": 56, "user": "4fb03cf4e4b081705acca262"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "515e8ce2e4b049add99a053d"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "4f6fd91ae4b07046d9f4efed"}, {"code": "(fn [coll]\n    (let [step (fn step [xs seen]\n                   (lazy-seq\n                    ((fn [[f :as xs] seen]\n                      (when-let [s (seq xs)]\n                        (if (contains? seen f) \n                          (recur (rest s) seen)\n                          (cons f (step (rest s) (conj seen f))))))\n                     xs seen)))]\n      (step coll #{})))", "problem": 56, "user": "51740b65e4b0d277d717bc67"}, {"code": "reduce #(if (some #{%2} %1) %1 (conj %1 %2)) []", "problem": 56, "user": "4eab612d535d7eef30807316"}, {"code": "#(let [data (keys (frequencies %))] (if (= (count data) 50) (sort data) data))", "problem": 56, "user": "50c6fad1e4b00bb60fe0c52d"}, {"code": "(fn [x]\n  (loop [x x\n         acc []]\n    (if (empty? x) \n      acc\n      (let [f (first x)\n            nxt (conj acc f)]\n        (recur (filter (partial not= f) x) nxt)))))", "problem": 56, "user": "515f8a0de4b0e2be8aa20bce"}, {"code": "(fn fn56 [s]\n  (reduce #(if (nil? (some (hash-set %2) %)) (conj % %2) %) [] s))", "problem": 56, "user": "5125d963e4b05d10e3e395fe"}, {"code": "(fn [lst]\n\t(loop [out '() s #{} l lst]\n\t\t(if (empty? l)\n\t\t\t(reverse out)\n\t\t\t(if (contains? s (first l))\n\t\t\t\t(recur out s (rest l))\n\t\t\t\t(recur (conj out (first l)) (conj s (first l)) (rest l))))))", "problem": 56, "user": "51757af0e4b085adf681d873"}, {"code": "reduce\n  #(if (contains? (set %) %2) %\n      (conj % %2))\n  []", "problem": 56, "user": "517adc6ce4b0925c997201c4"}, {"code": "(fn uniq [l] \n  (letfn [(stop-condition [l] (= 0 (count l)))\n          (uniq-iter [l r]\n                     (if (stop-condition l)\n                       r\n                       (uniq-iter (rest l) (if (some #(= (first l) %) r) r (conj r (first l))))\n                       )\n                     )]\n    (uniq-iter l [])))", "problem": 56, "user": "517531c6e4b07031762f2eea"}, {"code": "(fn dis ([l] (dis #{} [] l)) ([mp sq rst] (if (empty? rst) sq (if (contains? mp (first rst)) (dis mp sq (rest rst)) (dis (conj mp (first rst)) (conj sq (first rst)) (rest rst))))))", "problem": 56, "user": "5134973ce4b0230e9f713b42"}, {"code": "(fn remove-duplicates [coll] (when-let [s (seq coll)] \n                               (let [remove-equals (fn [e s] (remove #(= % e) s) )\n                                     f (first s) nxt (next s)] \n                                     (lazy-seq (cons f (remove-duplicates (remove-equals f nxt)))))))", "problem": 56, "user": "51729002e4b044b2ef48a850"}, {"code": "(fn [xs]\n  (loop [in xs acc []]\n    (if (empty? in)\n      acc\n      (recur (rest in) (if (some (hash-set (first in)) acc)\n                         acc\n                         (conj acc (first in)))))))", "problem": 56, "user": "5173726be4b098276e74652c"}, {"code": "(fn [c]\n  (let [m (reductions #(into % [%2]) #{} c)]\n  (remove nil? (map #(when-not (contains? %2 %1) %1) c m))))", "problem": 56, "user": "514d8084e4b019235f6c0588"}, {"code": "(fn dist [l]\n  (letfn [(helper [l seen] \n                  (let [f (first l)\n                        r (rest l)\n                        next-seen (conj seen f)]\n                    (cond (empty? l) l\n                          (seen f) (helper r next-seen)\n                          :else (cons f (helper r next-seen)))))]\n    (helper l #{})))", "problem": 56, "user": "515ffbfbe4b0e2be8aa20bdd"}, {"code": "(fn \n    [coll]\n  (reduce #(if (some #{%2} %) \n             %\n             (conj % %2))\n          []\n          coll))", "problem": 56, "user": "51804bcbe4b04f45bde7d901"}, {"code": "reduce #(if (some #{%2} %1) %1 (conj %1 %2)) []", "problem": 56, "user": "5163b06be4b055933a9ca030"}, {"code": "#(sort-by (fn [x] (.indexOf % x)) (keys (group-by identity %)) )", "problem": 56, "user": "513b77f3e4b00f740c76c403"}, {"code": "(fn [l] (first (reduce (fn [[coll set] el]\n          (if (contains? set el)\n            [coll set]\n            [(concat coll [el]) (conj set el)]))\n        [[] #{}] l)))", "problem": 56, "user": "51684318e4b03f62cda68cd6"}, {"code": "(fn\n \n  [coll]\n    (let [step (fn step [xs seen]\n                   (lazy-seq\n                    ((fn [[f :as xs] seen]\n                      (when-let [s (seq xs)]\n                        (if (contains? seen f) \n                          (recur (rest s) seen)\n                          (cons f (step (rest s) (conj seen f))))))\n                     xs seen)))]\n      (step coll #{})))", "problem": 56, "user": "50342d1be4b062bc5d7ae15f"}, {"code": "(fn x-dis [coll]\n  (letfn [(f [ret c]\n             (if (empty? c)\n               ret\n               (let [elt (first c)]\n                 (if (= -1 (.indexOf ret elt))\n                   (f (conj ret elt) (rest c))\n                   (f ret (rest c))))))]\n         (f [] coll)))", "problem": 56, "user": "4eec82fe535d93acb0a668ae"}, {"code": "(fn [coll]\n  (reduce #(if (contains? (set %1) %2) %1 (conj %1 %2)) [] coll))", "problem": 56, "user": "51780f88e4b03d69594194c9"}, {"code": "#(loop [xs % acc [] tt #{}]\n   (if (empty? xs) acc\n     (let [[y & ys] xs]\n       (if (contains? tt y)\n         (recur ys acc tt)\n         (recur ys (conj acc y) (conj tt y))))))", "problem": 56, "user": "4ed286d4535d44c135fd68d7"}, {"code": "(fn [coll]\n  (reduce (fn [arry item]\n          (if (some #(= item %) arry)\n            arry\n            (conj arry item))) [] coll))", "problem": 56, "user": "5016ac54e4b052339a490e7b"}, {"code": "(fn [x] (->> (reductions conj #{} x)\n             (map #(when (not (contains? %2 %)) %) x)\n             (filter #(not= nil %))))", "problem": 56, "user": "518696c1e4b0c40be512d708"}, {"code": "(fn [xs] \n  (first \n    (reduce \n      (fn [p x] (let [[ys s] p] (if (contains? s x) p [(conj ys x) (conj s x)])))\n         [[] #{}] xs   \n    )\n  )\n)", "problem": 56, "user": "515fb48fe4b0e2be8aa20bd5"}, {"code": "(fn p56 [a]\n  (let [\n         has? (fn [ll n] (boolean (some #(= n %) ll)))\n         ]\n    (loop [res [] l a]\n      (if (empty? l)\n        res\n        (if (has? res (first l) )\n          (recur res (rest l))\n          (recur (conj res (first l)) (rest l))\n          )))))", "problem": 56, "user": "51750fc5e4b07031762f2ee6"}, {"code": "(fn my-distinct [coll]\n      (reduce (fn [xs x]\n                  (if (some #(= x %) xs)\n                      xs\n                      (conj xs x))) [] coll))", "problem": 56, "user": "5186134ce4b0da5a5be3bac7"}, {"code": "(fn [coll]\n    (letfn [(f [d r [x & xs]]\n               (if x\n                 (if (d x)\n                   (f d r xs)\n                   (f (conj d x) (conj r x) xs))\n               r))\n            ]\n      (f #{} [] coll))\n    )", "problem": 56, "user": "515cf9b5e4b00901442db1d4"}, {"code": "(fn [coll] (letfn [(step [coll, targetColl]\n                                 (if (empty? coll)\n                                   targetColl\n                                   (if\n                                     (nil? (some #{(first coll)} targetColl))\n                                     (step (next coll) (concat targetColl [(first coll)]))\n                                     (step (next coll) targetColl))))]\n                         (step coll [])))", "problem": 56, "user": "514d7e29e4b019235f6c0587"}, {"code": "(fn [col]\n  (loop \n    [known #{}\n     result []\n     [a & r] col]\n  (cond (nil? a) result\n        (known a) (recur known result r)\n        true (recur (conj known a) (conj result a) r))))", "problem": 56, "user": "501d34f6e4b066e56b9d0b1e"}, {"code": "(fn [s]\n  (loop [result []\n         result_set #{}\n         remaining s]\n    (if (empty? remaining)\n      result\n      (if (contains? result_set (first remaining))\n        (recur result result_set (rest remaining))\n        (recur (conj result (first remaining)) \n               (conj result_set (first remaining)) \n               (rest remaining))))))", "problem": 56, "user": "51899891e4b0288ada3dbdab"}, {"code": "(fn [s1]\n  (loop [s  s1\n         elem #{}\n         result []]\n   (if (empty? s)\n     result\n     (let [e (first s)]\n       (if-not (contains? elem e)\n         (recur (rest s) (conj elem e) (conj result e)) \n         (recur (rest s) elem result)) ))))", "problem": 56, "user": "51909ee5e4b0af8891cc8d37"}, {"code": "(fn dist [lst]\n  (loop [l lst acc []]\n    (if (seq l) \n      (if (some #{(first l)} acc)\n        (recur (rest l) acc)\n        (recur (rest l) (conj acc (first l))))\n      acc)))", "problem": 56, "user": "50a4f36be4b0344e360f3bc9"}, {"code": "(fn fdi [xs]\n  (if (empty? xs)\n    xs\n    (conj (fdi (remove #(= % (first xs)) (rest xs)))\n          (first xs))))", "problem": 56, "user": "50ef77a4e4b0bdaecbb47d99"}, {"code": "(fn [s]\n  (loop [s s\n         seen #{}\n         coll []]\n    (if (seq s)\n      (if (seen (first s))\n        (recur (rest s)\n               seen\n               coll)\n        (recur (rest s)\n               (conj seen (first s))\n               (conj coll (first s))))\n      coll)))", "problem": 56, "user": "51460e4ce4b04ef915e37314"}, {"code": "(fn f[coll]\n  (loop [coll coll aset #{} acc []]\n    (if (seq coll)\n      (if (aset (first coll))\n        (recur (rest coll) aset acc)\n        (recur (rest coll) \n               (conj aset (first coll)) \n               (conj acc (first coll))))\n      acc)))", "problem": 56, "user": "51750cd4e4b07031762f2ee5"}, {"code": "reduce  #(concat % (if ((set %) %2) nil  (list %2)))  []", "problem": 56, "user": "51805d22e4b0e3fc13e244df"}, {"code": "(fn [v]\n  (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] v))", "problem": 56, "user": "518ccf6be4b05e6c8537e386"}, {"code": "(fn [c]\n  (loop [[h & t] c\n        a []]\n   (if (nil? h)\n     a\n     (recur t (if (every? #(not= % h) a) (conj a h ) a)))))", "problem": 56, "user": "51933b41e4b0c663c5d86ca2"}, {"code": "#(loop [r [] has #{} s %]\n   (if (empty? s) r\n    (recur (if (has (first s)) r (conj r (first s))) (conj has (first s)) (rest s))))", "problem": 56, "user": "5196568fe4b04c0af7ff3c1c"}, {"code": "(fn [c]  \n    (loop  [coll c  int []]\n       (if (empty? coll)  int\n (recur (remove #(= (first coll) %)  (rest coll))\n (conj int (first coll))))))", "problem": 56, "user": "517945dce4b0684c1c981a43"}, {"code": "(fn [coll] (second (reduce #(if\n          (contains? (first %) %2)\n          %\n          (map (fn [x] (conj x %2)) %)) [#{} []] coll)))", "problem": 56, "user": "519b2570e4b0ac1b7dced6a3"}, {"code": "(fn [col] \n  (reduce \n   (fn [r v] (if ((set r) v) r (conj r v)))\n   [] col))", "problem": 56, "user": "519b7d76e4b02a926d9a436e"}, {"code": "#(first (reduce (fn [[acc seen] x]\n                   (if (seen x)\n                     [acc seen]\n                     [(conj acc x) (conj seen x)]))\n                 [[] #{}]\n                 %))", "problem": 56, "user": "51131da8e4b0350614f07a83"}, {"code": "(fn [xs]\n  (reduce \n    (fn [m x] \n      (if-not (some #(= x %) m)\n        (into m [x])\n        m)) \n    [] \n    xs))", "problem": 56, "user": "5073de20e4b054001656acca"}, {"code": "(fn [v] \n  (loop [items (set []) acc [] col v]\n    (if (seq col) \n      (if (items (first col))\n        (recur items acc (rest col))\n        (recur (conj items (first col)) (conj acc (first col)) (rest col)))\n      acc)))", "problem": 56, "user": "51990df9e4b068aa333628fc"}, {"code": "#(reduce (fn [acc x]\n            (if (some #{x} acc)\n              acc\n              (concat acc (list x))))\n          ()\n          %)", "problem": 56, "user": "5141abf1e4b02fd87f5064c3"}, {"code": "reduce #(if (some #{%2} %1) %1 (conj %1 %2)) []", "problem": 56, "user": "4fe9f0f6e4b0547ebccb247b"}, {"code": "(fn [xs]\n  (reduce #(if (-> %1\n                   set\n                   (get %2))\n             %1\n             (conj %1 %2))\n          []\n          xs))", "problem": 56, "user": "51a8f0c6e4b08d8ec191b821"}, {"code": "(fn [xs]\n  (first (reduce \n   (fn [[v s :as accum] nxt]\n     (if (s nxt)\n       accum\n       [(conj v nxt) (conj s nxt)]))\n   [[] #{}] xs)))", "problem": 56, "user": "51aa2b4fe4b04e3dc0c27b21"}, {"code": "(fn [elements]\n    (reduce #(if (contains? (set %1) %2) %1 (conj %1 %2)) [] elements))", "problem": 56, "user": "5154fa3fe4b0179c5115f4e6"}, {"code": "reduce (fn [c x] (if (some #(= % x) c) c (conj c x))) []", "problem": 56, "user": "519964cbe4b0aa09cbc0b849"}, {"code": "(fn [x]\n  (reduce\n   (fn [a i] (if (some #(= i %) a) a (conj a i)))\n     [] x))", "problem": 56, "user": "50a2f901e4b029e8bace362a"}, {"code": "(fn [s]\n  (reduce #(if (not (some #{%2} %1)) (conj %1 %2) %1) [] s))", "problem": 56, "user": "5142e808e4b0c172af7558c9"}, {"code": "(fn [c]\n  (let [rfl (fn [l] (remove #(= (first l) %) l))]\n    (loop [res [] left c]\n      (if (empty? left)\n        res\n        (recur (conj res (first left)) (rfl left))))))", "problem": 56, "user": "5133e51ae4b0d7a043de8cf6"}, {"code": "(fn [ls]\n   (loop [ls ls\n          acc []]\n     (if (zero? (count ls)) \n       acc\n       (recur (rest ls)\n              (if (contains? (set acc) (first ls))\n                acc\n                (conj acc (first ls)))))))", "problem": 56, "user": "50a5b7e9e4b0aa96157e2610"}, {"code": "(fn [coll]\n  (loop [acc [], found #{}, [item & tail] coll]\n    (cond\n     (nil? item) acc\n     (contains? found item) (recur acc found tail)\n     :else (recur (conj acc item) (conj found item) tail))))", "problem": 56, "user": "51b38769e4b026427ecf067f"}, {"code": "reduce #(if (some (fn [a] (= a %2)) %1)\n        %1\n        (concat %1 [%2])\n        ) []", "problem": 56, "user": "51aeb1f4e4b09397d5109794"}, {"code": "(fn [x]\n  (keep-indexed\n    (fn [i l]\n      (when-not\n          (some #(= l %) (take i x))\n        l))\n    x))", "problem": 56, "user": "51b3f109e4b0f094dd986fa9"}, {"code": "(fn d [[x & xs]]\n  (lazy-seq \n\t(when x (cons x (when xs (d (filter #(not= x %) xs)))))))", "problem": 56, "user": "51b793d3e4b0d906fcd71d38"}, {"code": "(fn dst [s]\n  (second (reduce (fn [[st res] n]\n                    (if (contains? st n)\n                      [st res]\n                      [(conj st n) (conj res n)]))\n                  [#{} []] s)))", "problem": 56, "user": "51672d15e4b079759a74a5e7"}, {"code": "#(loop [seen #{}\n        remaining %\n        result []]\n   (if (empty? remaining) result\n     (recur (conj seen (first remaining))\n            (rest remaining)\n            (if (seen (first remaining)) result\n              (conj result (first remaining))))))", "problem": 56, "user": "4fa340b4e4b081705acca18c"}, {"code": "(fn\n  [coll]\n  (first (reduce #(let [[new-coll seen] %]\n                    (if (seen %2)\n                      [new-coll seen]\n                      [(conj new-coll %2) (conj seen %2)]))\n                 [[] #{}]\n                 coll)))", "problem": 56, "user": "4ebf11bc535dfed6da9c6d9c"}, {"code": "(fn dist [coll]\n  \n    (let [step (fn step [xs seen]\n                   \n                    ((fn [[f :as xs] seen]\n                      (when-let [s (seq xs)]\n                        (if (contains? seen f) \n                          (recur (rest s) seen)\n                          (cons f (step (rest s) (conj seen f))))))\n                     xs seen))]\n      \n      \n      (step coll #{})))", "problem": 56, "user": "51a865dfe4b08d8ec191b80f"}, {"code": "(fn [xs] (first (reduce (fn [[result seen] x] (if (contains? seen x) [result seen] [(conj result x) (conj seen x)])) [[] #{}] xs)))", "problem": 56, "user": "51a7b4fee4b0da5f497bde8b"}, {"code": "(fn [s] (reduce #(if (some #{%2} %) % (conj % %2)) [] s))", "problem": 56, "user": "511d6a01e4b022853b0e07a5"}, {"code": "reduce #(if (.contains % %2) % (conj % %2)) []", "problem": 56, "user": "4f93539de4b0dcca54ed6cba"}, {"code": "reduce (fn [acc x] (if (contains? (set acc) x) acc (conj acc x))) []", "problem": 56, "user": "51bd1a0de4b0df1216cefd93"}, {"code": "reduce #(if (apply distinct? (conj % %2)) (conj % %2) %) []", "problem": 56, "user": "51bf4560e4b013aa0d74b817"}, {"code": "(fn [coll] \n  ((fn step [[x & xs] seen] \n     (when x\n       (if (seen x) \n         (step xs seen)\n         (cons x (step xs (conj seen x)))))) \n   coll #{}))", "problem": 56, "user": "51bec919e4b013aa0d74b800"}, {"code": "(fn d [xs]\n  (loop [s #{}\n         els xs\n         accum []\n         ]\n    (if (empty? els)\n      accum\n      (if (nil? (s (first els)))\n        (recur (conj s (first els)) (rest els) (conj accum (first els)))\n        (recur s (rest els) accum)))))", "problem": 56, "user": "51780bfce4b0f89a8f53839c"}, {"code": "(fn xxx [coll]\n  (let [step (fn step [coll acc]\n               (when (seq coll)\n                 (if (contains? acc (first coll))\n                   (recur (rest coll) acc)\n                   (cons (first coll) (step (rest coll) (conj acc (first coll)))))))]\n    (step coll #{})))", "problem": 56, "user": "5163a7bbe4b055933a9ca02f"}, {"code": "(fn [x]\n(reduce \n  (fn [acc e]\n    (if (some #(= % e) acc)\n      acc\n      (conj acc e)))\n       \n        [] x))", "problem": 56, "user": "5180dc04e4b06b8caf33fa01"}, {"code": "#(if (number? (first %)) (sort (keys (group-by identity %))) (keys (group-by identity %)))", "problem": 56, "user": "51beb32ae4b013aa0d74b7fd"}, {"code": "reduce #(if ((set %) %2) % (conj % %2)) []", "problem": 56, "user": "51b90b88e4b050a1176cd6a2"}, {"code": "(fn fd [s]\n  (if (empty? s) s\n      (cons (first s) (fd (remove #(= (first s) %) (rest s))))))", "problem": 56, "user": "51b76227e4b0d906fcd71d35"}, {"code": "#(reduce (fn [coll x]\n            (if (some #{x} coll)\n              coll\n              (conj coll x)))\n          []\n          %)", "problem": 56, "user": "4fa3c137e4b081705acca193"}, {"code": "(partial reduce (fn [col e] (if (some #{e} col) col (conj col e))) [])", "problem": 56, "user": "51c73959e4b07ef393169e3e"}, {"code": "(fn my-dist [s]\n  (loop [left s out [] seen #{}]\n    (let [f (first left)]\n      (cond (empty? left) out\n            (seen f) (recur (rest left)\n                            out\n                            seen)\n            :else (recur (rest left)\n                         (concat out (list f))\n                         (conj seen f))))))", "problem": 56, "user": "51baff1be4b0fe3ecfb46443"}, {"code": "(fn [lst]\n  (reverse (reduce (fn [memo new-val]\n            (if (some (partial = new-val) memo)\n              memo\n              (cons new-val memo))) [] lst)))", "problem": 56, "user": "51c76864e4b07ef393169e3f"}, {"code": "(fn f [acc col] (\n        if (empty? col)\n        acc\n        (let [elem (first col), r (fn [x] (= elem x))]\n          (f (conj acc elem) (remove r col))\n        )\n    )) []", "problem": 56, "user": "51b9d1f0e4b0e871ca49590b"}, {"code": "(comp keys (partial sort-by (comp first first last)) (partial group-by last) (partial map-indexed list))", "problem": 56, "user": "51cbdee1e4b08d8387cbede1"}, {"code": "(fn dis [c] (reduce #(if (contains? (set %1) %2) %1 (conj %1 %2)) [] c))", "problem": 56, "user": "51b0fc95e4b0c53cf2e68a72"}, {"code": "#(let [s (map first (group-by identity %))]\n    (if (= (count s) (count %)) % s))", "problem": 56, "user": "51cacda3e4b068dadb8f2227"}, {"code": "(fn [coll]\n  (first\n    (reduce\n      (fn [[v s] x]\n        (if (contains? s x)\n          [v s]\n          [(conj v x) (conj s x)])) [[] #{}] coll)))", "problem": 56, "user": "51d08d67e4b067c365486351"}, {"code": "(fn [coll]\n  (first (reduce (fn [[acc s] v] [(if (contains? s v) acc (conj acc v)) (conj s v)]) [[] #{}] coll)))", "problem": 56, "user": "51cdd3f0e4b0e42293a2254b"}, {"code": "#(loop [uniques #{}\n        values %\n        res '()]\n   (if (empty? values)\n     res\n     (recur\n      (clojure.set/union uniques (set (list (first values))))\n      (rest values)\n      (if (contains? uniques (first values))\n        res\n        (concat res (list (first values)))))))", "problem": 56, "user": "51d360d1e4b099f3b6acddff"}, {"code": "; the short version below  fails on 4th test because frequencies doest not keep the order \n;#(map first (frequencies %))\n\n; this long version check if there's any duplicate at all, in the negative it simply returns the arg\n(fn [li] \n   (let [frek (frequencies li)]\n      (if (= 1 (second (last (sort-by second frek))))\n         li \n         (map first frek)\n      )\n   )\n)", "problem": 56, "user": "51c09719e4b0c9c82288293c"}, {"code": "(fn f [col]\n  (into [] (java.util.LinkedHashSet. col)))", "problem": 56, "user": "51d662fce4b0154f82ab92ef"}, {"code": "reduce #(if (.contains % %2) % (conj % %2)) []", "problem": 56, "user": "51cc5cb3e4b02254fc79486f"}, {"code": "(fn [coll]\n  (reduce (fn [a b] (if (some #(= % b) a) a (conj a b))) [] coll))", "problem": 56, "user": "50d86fe2e4b01f0871336e67"}, {"code": "(fn d\n  [coll]\n  (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] coll))", "problem": 56, "user": "51701a9ce4b034fe8eaf70f5"}, {"code": "(fn [n]\n    (reverse\n    ((fn f [n]\n    (if (< (count n) 2)\n        n\n        (if (some #(= (last n) %) (butlast n))\n            (f (butlast n))\n            (conj (f (butlast n)) (last n))\n        )\n    )\n    ) n)\n    )\n)", "problem": 56, "user": "51d1111ce4b067c36548635f"}, {"code": "(fn [coll]\n  (reduce #(if (some #{%2} %)\n             %\n             (conj % %2))\n          [] coll\n   ))", "problem": 56, "user": "51da7e49e4b02ceefd947768"}, {"code": "(fn [s]\n  (:seq\n    (reduce\n     #(if (contains? (:set %1) %2)\n        %1\n        (assoc %1\n          :seq (conj (:seq %1) %2)\n          :set (conj (:set %1) %2)))\n     {:seq [], :set #{}}\n     s)))", "problem": 56, "user": "5175533fe4b0dea9bbfba575"}, {"code": "(fn [x] (loop[myNL '() myL x](if(not= ( first myL) nil)\n                               (recur\n                                (cond\n                                 (= (count myNL) 0) (concat myNL (list (first myL)))\n                                 (= (some #{(first myL)} myNL) (first myL)) myNL\n                                 (= (some #{(first myL)} myNL) nil)(concat myNL (list (first myL)))\n                                 :else myNL\n                                 )\n                                (rest myL)\n                                )\n                               myNL\n                 )\n          )\n  )", "problem": 56, "user": "5177cacde4b0261ae665b877"}, {"code": "(fn uniques [x]\n  (last (reduce #(if (contains? (first %1) %2)\n             %1\n             [(conj (first %1) %2) (conj (last %1) %2)]\n             ) [#{} []]  x)))", "problem": 56, "user": "51b7b521e4b0d906fcd71d3a"}, {"code": "reduce #(if (some #{%2} %1) %1 (conj %1 %2)) []", "problem": 56, "user": "51e00020e4b01188f0627534"}, {"code": "reduce (fn [c x]\n          (if (some #(= x %) c) \n            c (conj c x)))\n        []", "problem": 56, "user": "4fe15ffee4b0dd6cd5ce3634"}, {"code": "(fn [s] (sort-by #(.indexOf s %) (map #(first %) (group-by identity s))))", "problem": 56, "user": "50955676e4b087f34d351ab1"}, {"code": "(fn [s]\n  (sort-by #(.indexOf s %) (into (empty s) (into #{} s))))", "problem": 56, "user": "50b29029e4b03ea880433563"}, {"code": "#((fn f [[x & xs] catalog]\n     (when x\n       (if (contains? catalog x)\n         (f xs catalog)\n         (cons x (f xs (conj catalog x))))))\n   % #{})", "problem": 56, "user": "51d46133e4b013d740b70de2"}, {"code": "reduce\n (fn [r o]\n   (if (= -1 (.indexOf r o))\n     (conj r o)\n     r\n     )) []", "problem": 56, "user": "51b86a0fe4b09e0e347b2e78"}, {"code": "(fn dist \n  ([s] (dist s #{} []))\n  ([s dups rez] (if (empty? s)\n                  rez\n                  (if (contains? dups (first s))\n                    (dist (rest s) dups rez)\n                    (dist (rest s) (conj dups (first s)) (conj rez (first s)))))))", "problem": 56, "user": "51d96ad0e4b02ceefd94774f"}, {"code": "(fn [coll]\n  (letfn [(go [c seen]\n            (let [s (seq c)\n                  e (first s)]\n              (when (seq s)\n                (if (seen e)\n                  (recur (rest s) seen)\n                  (cons e (go (rest s) (conj seen e)))))))]\n    (lazy-seq (go coll #{}))))", "problem": 56, "user": "51d19c24e4b0cfcf579466c3"}, {"code": "(fn [cl] (reduce #(if (some #{%2} %1) \n                     %1 \n                     (conj %1 %2) )\n            [] cl) )", "problem": 56, "user": "51db9e1ee4b0e067a9bbadc9"}, {"code": "#(reduce (fn [acc x]\n           (if (some #{x} acc)\n             acc\n            (conj acc x)))\n         []\n         %)", "problem": 56, "user": "51e89428e4b006d205356a51"}, {"code": "(fn [coll]\n  (:result (reduce #(let [seen (:seen %) result (:result %) x %2]\n                       (if (contains? seen x)\n                         %\n                         {:seen (conj seen x) :result (conj result x)})\n                       ) {:seen #{}, :result []} coll))\n)", "problem": 56, "user": "51ba8f82e4b0fe3ecfb46434"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "51e58e02e4b0efabf93c02d0"}, {"code": "(fn foo [z]\n     (first (reduce  ( fn [result, x]\n               (if\n                 (not\n                   (contains? (second result) x )\n                   )\n                 [\n                   (conj (first result) x), (conj (second result) x ) ]\n                    result\n                 )\n                  )  [[], #{} ] z)\n     )      )", "problem": 56, "user": "51b5a6e0e4b0f094dd986fce"}, {"code": "(fn [l] \n  (keys\n ( let [r (reduce \n           #(if (get % (first %2)) \n              % \n              (assoc % (first %2) (second %2))\n              )\n           {}\n           (map list l (range (count l)))\n           )]\n     (sort\n      (fn [a b] (compare (second a)  (second b)))\n      r\n      )\n    )\n   )\n  )", "problem": 56, "user": "51e1c176e4b06a68e693eafb"}, {"code": "#(reduce (fn [acc val]\n           (if ((set acc) val)\n             acc\n             (concat acc [val])))\n         (empty %)\n         %)", "problem": 56, "user": "51789dfae4b03d69594194d7"}, {"code": "(fn f ([col] (f #{} col []))\n      ([s [x & xs] dest]\n        (if x (if (contains? s x) (recur s xs dest)\n                                  (recur (conj s x) xs (conj dest x)))\n              dest)))", "problem": 56, "user": "51eadb98e4b0f1f103a0d153"}, {"code": "(fn f[[x & xs :as xxs]]\n  (if (empty? xxs)\n    ()\n    (cons x (f (filter #(not= x %) xs)))))", "problem": 56, "user": "51efd397e4b0249c592fbdeb"}, {"code": "(fn rico [x] (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] x))\n\n;; start with []\n;; for each in x; if the new item (%2) is in the reduction (%1); return the reduction\n;; otherwise conj the new item (%2) to the reduction", "problem": 56, "user": "514cfa27e4b019235f6c057d"}, {"code": "(fn [coll]\n  (loop [s coll acc []]\n         (cond (empty? s) acc\n           (some #{(first s)} acc)\n             (recur (rest s) acc)\n            :else\n             (recur (rest s) (conj acc (first s))))))", "problem": 56, "user": "51e1a1fae4b06a68e693eaf6"}, {"code": "(fn dist\n  [s]\n  (let [move (fn move [used s]\n              (when (seq s)\n                (let [v (first s)]\n                  (if (used v)\n                    (recur used (next s))\n                    (cons v (move (into used #{v}) (next s)))))))]\n    (move #{} s)))", "problem": 56, "user": "511b233ae4b07ab9ec456180"}, {"code": "(fn my-remove\n  [xs]\n  (reduce \n   (fn\n     [coll x]\n     (if (some #(= % x) coll) \n       coll\n       (conj coll x))) [] xs))", "problem": 56, "user": "51e780dae4b0730ab87cf353"}, {"code": "reduce (fn \n         [rs x] \n         (if (some #(= x %) rs) rs \n             (conj rs x))) \n       []", "problem": 56, "user": "51c19873e4b0d204dbe2ca0d"}, {"code": "#(sort-by (fn [i] (.indexOf % i)) (map first (group-by identity %)) )", "problem": 56, "user": "518644bce4b0da5a5be3baca"}, {"code": "#(loop[v %\n        o []]\n   (cond\n    (empty? v) o\n    (>= (.indexOf o (first v)) 0) (recur (rest v) o)\n    :else (recur (rest v) (conj o (first v)))))", "problem": 56, "user": "51f28a64e4b0210f90e7454e"}, {"code": "(fn [s]\n (reverse \n (first \n  (reduce (fn[[r s] e] (if (s e) [r s] [(conj r e) (conj s e)])) [() #{}] s))))", "problem": 56, "user": "51f59607e4b0abb92f97f9d5"}, {"code": "(fn m-distinct ([coll]\n                     (m-distinct coll []))\n   ([coll seen]\n      (if-let [e (first coll)]\n        (do \n            (if (some #{e} seen)\n              (m-distinct (rest coll) seen)\n              (m-distinct (rest coll) (conj seen e))\n              )\n            )\n        seen\n        )))", "problem": 56, "user": "51d9eb05e4b02ceefd947755"}, {"code": "(fn [coll] \n  (let [c (atom #{})]\n  (filter (fn [x] (if (@c x) \n                    false\n                    (do (swap! c conj x) true))) coll)))", "problem": 56, "user": "51aab611e4b04e3dc0c27b2d"}, {"code": "#(sort-by (fn [i] (.indexOf % i)) (set %))", "problem": 56, "user": "5046ee3ee4b03b02161376b4"}, {"code": "#(sort-by (fn [i] (.indexOf % i)) (map first (group-by identity %)))", "problem": 56, "user": "51ca9af6e4b08b1cbd0d948a"}, {"code": "#(letfn [(my-distinct\n           [coll]\n           (letfn [(not-in [e coll]\n                     (every? (fn [x] (not= e x)) coll))]\n             (reverse (reduce\n               (fn [dcoll e]\n                 (if (not-in e dcoll) (cons e dcoll) dcoll))\n               (empty coll)\n               coll))))]\n   (my-distinct %))", "problem": 56, "user": "51fb9d30e4b0f1313d468a0f"}, {"code": "(fn [lst]                   \n  (letfn [(find-dist-iter [input seen output]\n                          (if (empty? input)\n                             output\n                            (find-dist-iter (rest input)\n                                        (cons (first input) seen)\n                                        (if (some #(= (first input) %) seen)\n                                            output\n                                           (conj output (first input))))))]\n                       (find-dist-iter lst [] [])))", "problem": 56, "user": "51e0198ee4b01188f0627539"}, {"code": "(fn [c]\n  (let [s (atom #{})]\n    (remove #(if (@s %)\n               true\n               (do (swap! s conj %) false))\n            c)))", "problem": 56, "user": "4fbf2818e4b081705acca317"}, {"code": "reduce #(if (some (fn [a] (= %2 a)) %)\n          %\n          (into % [%2])) []", "problem": 56, "user": "50ae0d24e4b0a40c9cfb08ce"}, {"code": "(fn rm-dup [x]\n  (if (empty? x)\n    ()\n    (cons (first x) (rm-dup (remove #(= (first x) %) (rest x))))))", "problem": 56, "user": "51f04e89e4b0274c496158cd"}, {"code": "#(reduce\n        (fn [coll el ] (if (> 0 (.indexOf coll el )) (conj coll el) coll))\n                [] % )", "problem": 56, "user": "5018ed15e4b011a2e0bf6412"}, {"code": "(fn [coll]\n  (loop [[x & rst] coll seen #{} out []]\n    (cond\n     (nil? x) out\n     (seen x) (recur rst seen out)\n     :else (recur rst (conj seen x) (conj out x)))))", "problem": 56, "user": "51c8301ee4b07ef393169e4d"}, {"code": "reduce #(if (some (fn [x] (= x %2)) %)\n           %\n           (conj % %2)) []", "problem": 56, "user": "50aedb8ce4b0a40c9cfb08d4"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "50c781bbe4b00bb60fe0c535"}, {"code": "(fn [col]\n  (reduce  #(if ((set %1) %2) %1 \n              (conj %1 %2))\n           [] col))", "problem": 56, "user": "51cbaf14e4b08d8387cbedda"}, {"code": "(fn [coll]\n  (\n    (reduce\n    (fn [[seen acc] v]\n      (if\n        (contains? seen v)\n        [seen acc]\n        [(conj seen v) (conj acc v)]))\n    [#{} []]\n    coll)\n    1))", "problem": 56, "user": "5201ada5e4b0b2e020a18f14"}, {"code": "(fn [col]\n  (reduce\n   #(if (some (set %) [%2])\n      %\n      (conj % %2))\n    [] col))", "problem": 56, "user": "50e90813e4b033b0e80d11e7"}, {"code": "(fn [s]\n  (letfn [(f [xs st]\n          (lazy-seq\n           (when-first [x xs]\n             (cons x (f\n                      (drop-while (conj st x) xs)\n                      (conj st x))))))]\n    (f s #{})))", "problem": 56, "user": "52039e12e4b0fb7e47ea51ff"}, {"code": "#(loop [ret []\n        v %]\n   (if (empty? v) \n     ret\n     (let [x (first v)]\n       (recur (if (= -1 (.indexOf ret x)) (conj ret x) ret)\n              (rest v)))))", "problem": 56, "user": "51944aaae4b0142f60b4aedc"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "4eb5750a535d7eef30807366"}, {"code": "(fn f [l]\n  (cond\n   (empty? l)\n   nil\n   true\n   (cons (first l) (f (filter #(not(= (first l) %)) l)))))", "problem": 56, "user": "52091d57e4b0e152394d76f0"}, {"code": "(fn [xs]\n  (reduce (fn [a x] (if (some #(= x %) a) a (conj a x))) [] xs))", "problem": 56, "user": "52015698e4b0d7096e99ddba"}, {"code": "(fn my-distinct [coll]\n  (loop [els (empty coll) x coll]\n    (if (empty? x) (reverse els)\n        (let [el (first x)]\n          (if (not-any? (partial = el) els)\n            (recur (cons el els) (rest x))\n            (recur els (rest x)))\n          )\n        )\n    ))", "problem": 56, "user": "4e0d5a5a535d04ed9115e7b5"}, {"code": "(fn distinct-e\n  [x]\n  (if (empty? x) '()\n    (conj (distinct-e (filter #(not (= % (first x))) (rest x))) (first x))))", "problem": 56, "user": "52084f75e4b01ce6bbf31dde"}, {"code": "reduce \n\t#(if \n\t\t(some #{%2} %1 ) %1 \n\t\t(conj %1 %2)) \n\t[]", "problem": 56, "user": "51dd9370e4b0c33a4e1da40c"}, {"code": "#(reduce\n  (fn [res curr]\n    (if-not (some #{curr} res)\n      (conj res curr)\n      res))\n  [] %)", "problem": 56, "user": "514c2d05e4b02b8cbb2a9278"}, {"code": "(partial reduce (fn [a b] (if (contains? (set a) b) a (conj a b))) [])", "problem": 56, "user": "5201572be4b0d7096e99ddbb"}, {"code": "(fn [xs]\n  (reduce #(if (some (partial = %2) %)\n              %\n              (conj % %2))\n            [] xs))", "problem": 56, "user": "513fab65e4b00f13ea1bd891"}, {"code": "(fn [coll] \n\t(reduce \n\t\t#(if (some (set %) [%2]) % (conj % %2))\n\t\t[]\n\t\tcoll))", "problem": 56, "user": "520242bae4b030ee0c5b26e3"}, {"code": "reduce #(if (= (.indexOf % %2) -1) (concat % [%2]) %) ()", "problem": 56, "user": "51f66e0ee4b06ff1c25c52c3"}, {"code": "#(first (reduce (fn [[found foundset] el]\n                  (if (foundset el)\n                    [found foundset]\n                    [(conj found el) (conj foundset el)]))\n                [[] #{}]\n                %))", "problem": 56, "user": "51f9527fe4b09be9c177e549"}, {"code": "(fn [coll]\n  (reduce (fn [c x] (if (some #(= x %) c) c (conj c x))) [] coll))", "problem": 56, "user": "51696ee7e4b03f62cda68ce8"}, {"code": "#(reduce \n\t(fn [result next] \n\t\t(if (some #{next} result) result (conj result next)))\n\t[] %)", "problem": 56, "user": "51ba4482e4b0fe3ecfb4642b"}, {"code": "(fn [seq]\n  (loop [s seq r []]\n    (if (empty? s)\n      r\n      (if ((fn [ls e] ; this is contains\n             (loop [l ls]\n               (if (empty? l)\n                 false\n                 (if (= (first l) e)\n                   true\n                   (recur (rest l)))))) r (first s))\n        (recur (rest s) r)\n        (recur (rest s) (conj r (first s)))))))", "problem": 56, "user": "52173464e4b082aa80a88c75"}, {"code": "(fn my-distinct [s]\n  (let [recur-distinct (fn [symbols remaining accum]\n                         (if (= (count symbols)\n                                (count accum))\n                           accum\n                           (let [new-accum (conj accum (first remaining))\n                                 new-remaining (remove (fn [x]\n                                                         (contains? (set new-accum) x))\n                                                       remaining)]\n                             (recur symbols new-remaining new-accum))))]\n\n    (recur-distinct (set s) s [])))", "problem": 56, "user": "51db0d99e4b06aa4d4669a9d"}, {"code": "(fn [s]\n  (loop [acc [] found #{} xs s]\n    (if (empty? xs) acc\n      (if (contains? found (first xs))\n        (recur acc found (rest xs))\n        (recur (conj acc (first xs)) (conj found (first xs)) (rest xs))))))", "problem": 56, "user": "52199105e4b0c4ef0be82ff9"}, {"code": "(fn [& args] (loop [a (reverse (first args)) result []]\n    (if (empty? a)\n      result\n      (if (not (nil? (some #(= (first a) %) (next a))))\n        (recur (next a) result)\n        (recur (next a) (cons (first a) result))\n      )\n    )\n  )\n)", "problem": 56, "user": "52016690e4b0b2e020a18f0f"}, {"code": "#(reduce (fn [a itm] (if (some (fn [elm] (= itm elm)) a) a (conj a itm))) [] %)", "problem": 56, "user": "521e8227e4b0dd19981ad082"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "5208a3a2e4b0301979a6c235"}, {"code": "(fn my-distinct [coll]\n  (loop [coll coll res {:seen {} :rv []}]\n    (if (empty? coll)\n      (:rv res)\n      (recur (rest coll) (let [i (first coll)\n                               {:keys [seen rv]} res]\n                           (if-not (seen i)\n                             (-> res\n                                 (assoc-in [:seen i] true)\n                                 (assoc-in [:rv] (conj rv i)))\n                             res))))))", "problem": 56, "user": "50c113bee4b096f585049c37"}, {"code": "(fn foo\n    ([coll] (foo coll []))\n    ([coll res]\n     (if (empty? coll)\n         res\n       (let [current (first coll)\n             remaining (filter #(not (= % current)) coll)]\n         (if (empty? remaining)\n             (conj res current)\n           (foo remaining (conj res current)))))))", "problem": 56, "user": "5220a770e4b0e6a83c8925a3"}, {"code": "(fn f [v]\n  (loop [ans []\n         vv v\n         st #{}]\n    (if (empty? vv)\n      ans\n      (recur (if (contains? st (first vv))\n               ans\n               (conj ans (first vv)))\n             (next vv)\n             (conj st (first vv))))))", "problem": 56, "user": "52196842e4b0890f2f822bfa"}, {"code": "(fn [seq]\n\t(reduce (fn [s e]\n\t\t(if (some #(= % e) s)\n\t\t\ts\n\t\t\t(conj s e))) [] seq))", "problem": 56, "user": "51bdc609e4b0ff155d51d2b3"}, {"code": "(fn [xs]\n    (reduce\n      #(if (some #{%2}  %)\n         %\n         (conj % %2))\n    [] xs))", "problem": 56, "user": "521679e9e4b0bf4bffd29cca"}, {"code": "(fn [c]\n  (letfn [(dist [coll result]\n  (cond\n   (empty? coll) result\n   (some #(= (first coll) %) result) (dist (rest coll) result)\n   :else (dist (rest coll) (concat result [(first coll)]))))]\n    (dist c [])))", "problem": 56, "user": "5220bc0fe4b0e6a83c8925a7"}, {"code": "(fn -distinct [s]\n  (loop [seen? #{(first s)}\n         acc [(first s)]\n         [fst & rst :as s] (rest s)]\n    (cond (empty? s) acc\n          (seen? fst) (recur seen? acc rst)\n          :else (recur (conj seen? fst) (conj acc fst) rst))))", "problem": 56, "user": "4ed2a31c535d44c135fd68db"}, {"code": "reduce (fn [acc y] (if (some #(= % y) acc) acc (conj acc y))) []", "problem": 56, "user": "5216933be4b000d124d989cf"}, {"code": "; Work from the back of the sequence term by term to see whether each term\n; occurs in the list before it. If it does then we don't include the term in\n; the output set as it is already exists. I'm okay with this approach but not my\n; implementation, which seems like I'm working against the grain a bit compared to\n; what is possible.\n(fn [s]\n  (filter identity\n    (for [x (range (count s) 0 -1)]\n      (let [[s1 s2] (split-at x (reverse s))\n            [h t] [(last s1) (set s2)]]\n        (if (t h) false h)))))", "problem": 56, "user": "5201ff99e4b0b2e020a18f26"}, {"code": "(fn [x](reverse(loop [coll x\n       res '()]\n  (if (seq coll) \n    (if (some true? (map (partial = (first coll)) res))\n      (recur (rest coll) res)\n      (recur (rest coll) (conj res (first coll)))\n      )\n    res)\n)))", "problem": 56, "user": "520cb8c4e4b0b022ef140c9a"}, {"code": "(fn [l]\n  (loop [coll l , elem #{}, acc[] ]\n    (if (empty? coll) acc\n      (let [x (first coll)]\n        (if (contains? elem x)\n          (recur (rest coll) elem acc)\n          (recur (rest coll) (conj elem x) (conj acc x)))))))", "problem": 56, "user": "5224a46ce4b01819a2de42e5"}, {"code": "(fn distinct-items [s]\n  (if (or (empty? s) (apply distinct? s))\n    s\n    (cons (first s) (distinct-items (remove #(= (first s) %) (rest s))))))", "problem": 56, "user": "521b339fe4b0c4ef0be83031"}, {"code": "(fn di2 [xs]\n  (reduce (fn [xs x]\n            (if (> (.indexOf xs x) -1)\n              xs\n              (conj xs x)))[] xs))", "problem": 56, "user": "52016fd3e4b0b2e020a18f10"}, {"code": "(fn [x]\n    (let [step (fn [[acc seen] n]\n                 (if (contains? seen n)\n                   [acc seen]\n                   [(conj acc n) (conj seen n)]))]\n      (first (reduce step [[] #{}] x))))", "problem": 56, "user": "52244a77e4b01819a2de42d1"}, {"code": "#(  loop [x %1 y [] z {}]\n    (if (empty? x) y\n      ( if (not(contains? z (first x)))\n        (recur (rest x) ( conj y (first x)) (assoc z (first x) 1))\n        (recur (rest x) y z)\n        )\n      )\n    )", "problem": 56, "user": "5225b16de4b0d2f5d1e2c0ed"}, {"code": "(fn [coll]\n  (loop [st #{} acc '() [h & t :as coll] coll]\n    (if (seq coll)\n      (if-not (st h)\n        (recur (conj st h) (conj acc h) t)\n        (recur st acc t))\n      (reverse acc))))", "problem": 56, "user": "4ff9a200e4b0678c553fc3ab"}, {"code": "#(reduce (fn[xs x] (if (not= -1 (.indexOf xs x)) xs (conj xs x))) [] %)", "problem": 56, "user": "522454f4e4b01819a2de42d3"}, {"code": "#(second (reduce (fn [x y] (let [[a b] x]\n                            (if (a y)\n                            [a b]\n                            [(conj a y) (conj b y)])))\n                [#{} []]\n                %\n                )\n        )", "problem": 56, "user": "52253004e4b01819a2de42fa"}, {"code": "(fn [l]\n  (reduce #(if ((set %) %2) % (conj % %2)) [] l))", "problem": 56, "user": "522b922ee4b0d34ee08e71c3"}, {"code": "(fn [coll]\n  (loop [xs coll\n         distinct-items []]\n    (cond\n     (empty? xs) distinct-items\n     (some #{(first xs)} distinct-items) (recur (rest xs) distinct-items)\n     :else (recur (rest xs) (conj distinct-items (first xs))))))", "problem": 56, "user": "520693e1e4b0bf4f1882c829"}, {"code": ";Why not sort?!\n#(sort-by (fn [e] (.indexOf % e)) (keys (group-by identity %)))\n\n;(fn [s]\n;  ((fn process [[head & tail] cnt]\n;     (when head\n;       (if (cnt head)\n;           (process tail cnt)\n;           (cons head (process tail (into cnt [[head true]])))))\n;    ) s {}))", "problem": 56, "user": "5213dbc3e4b0961f15ac4d74"}, {"code": "reduce (fn [collection element] \n         (if (some #(= % element) collection) collection (conj collection element))) []", "problem": 56, "user": "50e1bdd8e4b019fc399ce17f"}, {"code": "(letfn [(prob-56\n          ([coll]\n             (prob-56 coll #{} ()))\n          ([[x & xs :as coll] seen result]\n             (cond\n              (empty? coll) (reverse result)\n              (contains? seen x) (recur xs seen result)\n              :else (recur xs (conj seen x) (cons x result))))) ]\n  prob-56)", "problem": 56, "user": "4ed2a92b535d44c135fd68dc"}, {"code": "(fn [es]\n  (loop [es es\n         s #{}\n         r ()]\n    (let [[e & more-es] es]\n      (cond\n       (empty? es) (reverse r)\n       (s e) (recur more-es s r)\n       :else (recur more-es (conj s e) (conj r e))))))", "problem": 56, "user": "521b9f92e4b0c4ef0be8304c"}, {"code": "(fn [coll] (reduce (fn [cl x] (if ((complement some) #(= x %) cl) (conj cl x) cl )) [] coll))", "problem": 56, "user": "5230d9bde4b0035e815da397"}, {"code": "(fn [s]\n  (loop [s1 s, s2 []]\n    (if-not (first s1)\n      s2\n      (recur (rest s1)\n             (if (some #{(first s1)} s2)\n               s2\n               (conj s2 (first s1)))))))", "problem": 56, "user": "51ce1320e4b0e42293a22551"}, {"code": "(fn [coll] (letfn [(step [coll, targetColl]\n                                 (if (empty? coll)\n                                   targetColl\n                                   (if\n                                     (nil? (some #{(first coll)} targetColl))\n                                     (step (next coll) (concat targetColl [(first coll)]))\n                                     (step (next coll) targetColl))))]\n                         (step coll [])))", "problem": 56, "user": "514fd753e4b0b449e54b8e00"}, {"code": "(fn dist [s]\n  ((fn [s result unsorted]\n    (cond (empty? s) result\n          :else (cond (contains? unsorted (first s)) (recur (rest s) result unsorted)\n                      :else (recur (rest s) (conj result (first s)) (conj unsorted (first s)))))) s [] #{}))", "problem": 56, "user": "5213ffd3e4b0961f15ac4d7d"}, {"code": "reduce #(if (some (fn [i] (= %2 i)) %) % (conj % %2)) []", "problem": 56, "user": "52161db6e4b0bf4bffd29cb8"}, {"code": "(fn uniqify\n  [list] \n  (reduce (fn conj-if-unique\n  [list element]\n  (if (some #{element} list)\n    list\n    (conj list element)))\n [] list))", "problem": 56, "user": "52382dd6e4b0fae3832e99f1"}, {"code": "reduce (fn [x v] (if (nil? (some #{v} x)) (conj x v) x)) []", "problem": 56, "user": "5201cf92e4b0b2e020a18f21"}, {"code": "(fn fifty-six\n  [coll]\n  ((fn rec [[f & r] seen-items]\n     (if f\n       (if (seen-items f)\n         (rec r seen-items)\n         (cons f (rec r (conj seen-items f))))))\n   coll #{}))", "problem": 56, "user": "510591dde4b06d28cacc92eb"}, {"code": "(fn mydistinct                                         \n  [coll]                                                 \n  (loop [acc #{}                                         \n         items coll                                      \n         dists []]                                       \n    (if (empty? items)                                   \n      dists                                              \n      (recur (conj acc (first items))                    \n             (rest items)                                \n             (if (acc (first items))                     \n               dists                                     \n               (conj dists (first items))                \n               )                                         \n             )                                           \n      )                                                  \n    )                                                    \n  )", "problem": 56, "user": "50573ed8e4b0012181721987"}, {"code": "(fn [c] (#(if (instance? Long (first %)) (sort %) %)( keys (frequencies c))))", "problem": 56, "user": "52394c03e4b0d705d026ef09"}, {"code": "(fn [coll]\n  (loop [remaining coll\n         result []]\n    (if (empty? remaining)\n      result\n      (if (> (.indexOf result (first remaining)) -1)\n        (recur (rest remaining) result)\n        (recur (rest remaining) (conj result (first remaining)))))))", "problem": 56, "user": "518a59b3e4b02bf06f6bbb4b"}, {"code": "(fn [x]\n  (loop [xs x result (if (vector? x) [] '()) seen #{}]\n      (if (not (seq xs))\n        (if (vector? x) result (reverse result))\n        (recur (rest xs) (if (not (contains? seen (first xs))) (conj result (first xs)) result) (conj seen (first xs))))))", "problem": 56, "user": "51857e64e4b0da5a5be3babe"}, {"code": "(fn [x]\n(letfn [(dedup [seen l]\n            (let [e (first l)\n                  r (rest l)]\n              (if (and (nil? (seen e)) (not (empty? l)))\n      (cons e (dedup (clojure.set/union #{e} seen) r))\n      (if (not (empty? l))\n        (dedup seen r)))))] (dedup {} x)))", "problem": 56, "user": "4fbd12a5e4b081705acca2fd"}, {"code": "(fn [xs] (sort-by #(.indexOf xs %) (keys (group-by identity xs))))", "problem": 56, "user": "523d02b0e4b0dbf0c3017289"}, {"code": "(fn freq [coll]\n  (loop [[x & xs] coll\n         dist []\n         uniq #{}]\n    (if-not x\n      dist\n      (recur xs (if-not (contains? uniq x) (conj dist x) dist) (conj uniq x)))))", "problem": 56, "user": "523b82efe4b07becd5be21f0"}, {"code": "#(reduce (fn [coll el] (if (some #{el} coll) coll (conj coll el))) [] %)", "problem": 56, "user": "5080a697e4b01a93d3f38e49"}, {"code": "(fn f \n  [xs]\n  (last\n  (reduce \n    (fn g \n      [[l r] y]\n      (if (contains? l y)\n        [l r]\n        [(conj l y) (conj r y)]))\n    [(set []) \n     []] \n    xs)))", "problem": 56, "user": "50aa60bee4b056ee01935865"}, {"code": ";(fn [c] (for [[k v] (group-by identity c)] k))\n(fn [c] (reduce #(if (some (partial = %2) %1) %1 (conj %1 %2)) [] c))", "problem": 56, "user": "5213d81de4b0961f15ac4d73"}, {"code": "(fn [s] (reduce #(if (contains? (set %) %2) % (conj % %2)) [] s))", "problem": 56, "user": "523b1988e4b02f719975bdbc"}, {"code": "(fn my-distinct [coll]\n\t(when (seq coll)\n\t  (let [[head & tail] coll]\n\t    (lazy-seq\n\t     (cons head\n\t\t   (my-distinct (filter #(not (= head %))\n\t\t\t\t\ttail)))))))", "problem": 56, "user": "52381b2ae4b0fae3832e99ef"}, {"code": "; Implement distinct\n#(loop [l % seen #{} ans []]\n  (if (empty? l)\n    ans\n    (recur (rest l) (conj seen (first l)) (if (contains? seen (first l)) ans (conj ans (first l))))\n  )\n)", "problem": 56, "user": "51f09f3de4b0274c496158d7"}, {"code": "(fn uniq [sequ] \n  (reduce (fn [sub curr] (if (not-any? #(= %1 curr) sub) (conj sub curr) sub)) [] sequ))", "problem": 56, "user": "5239caa6e4b0d705d026ef27"}, {"code": "(fn d [s]\n  (if (empty? s)\n    []\n    (cons (first s) (d (remove #(= % (first s)) s)))))", "problem": 56, "user": "5191ac45e4b0d428d29dc1b6"}, {"code": "(fn my-distinct [coll]\n  (reduce (fn [x y] (if (some #(= %1 y) x)\n                     x\n                     (conj x y)))\n          [] coll))", "problem": 56, "user": "511e763ce4b03e81d390ac29"}, {"code": "(fn [coll]\n  (reduce (fn [v x]\n            (if (some (partial = x) v) v (conj v x)))\n   [] coll))", "problem": 56, "user": "52437703e4b076204b44fabf"}, {"code": "(comp reverse\n      (fn self [col]\n        (if (empty? (rest col))\n          col\n          (let [s (self (rest col))]\n            (if (some #(= (first col) %) s)\n              s\n              (cons (first col) s)))))\n      reverse)", "problem": 56, "user": "5233ad08e4b07e3ee2be83ac"}, {"code": "(fn dtnct [coll]\n  (reduce \n   (fn [acc item]\n     (if (some #(= item %) acc)\n       acc\n       (conj acc item)))\n   []\n   coll))", "problem": 56, "user": "5245fbbbe4b09dbe66b56183"}, {"code": "(fn [c]\n  (letfn [(f [acc xs]\n    (if (empty? xs) acc\n      (if (some (set (vector (first xs))) acc)\n        (f acc (rest xs))\n        (f (conj acc (first xs)) (rest xs)))))]\n    (f [] c)))", "problem": 56, "user": "51cfc616e4b0e42293a22578"}, {"code": "(fn [xs]\n  (loop [seen #{}\n         xs xs\n         acc []]\n    (if (seq xs)\n      (let [x (first xs)\n            xs' (rest xs)]\n        (recur (conj seen x)\n               xs'\n               (if (seen x)\n                 acc\n                 (conj acc x))))\n      acc)))", "problem": 56, "user": "52487654e4b05ef8e38e63dc"}, {"code": "#(loop [cur-seq %\n         final-seq []]\n    (if (empty? cur-seq)\n      final-seq\n      (let [cur (first cur-seq)\n            rest (rest cur-seq)]\n        (recur rest\n               (if (some #{cur} final-seq)\n                 final-seq\n                 (concat final-seq [cur]))))))", "problem": 56, "user": "523288fee4b035af41902a88"}, {"code": "(fn [coll]\n  \n  (reduce \n   (fn [my-vec elm]\n     (if (= (.indexOf my-vec elm) -1) \n       (conj my-vec elm)\n       my-vec\n       )\n     )\n   []\n   coll)\n  \n  \n  \n  )", "problem": 56, "user": "518d1b5be4b070277754617b"}, {"code": "(fn[l]\n  (loop [remain l result [] tested #{}]\n     (if (seq remain)\n\t     (let [n (first remain)]\n    \t   (if (contains? tested n)\n        \t (recur (rest remain) result tested)\n         \t (recur (rest remain) (conj result n) (conj tested n))))\n       result)))", "problem": 56, "user": "5048202fe4b0ec70b3ef8d9a"}, {"code": "(fn [rnge]\n    ((fn [got rslt remainder]\n       (if (empty? remainder)\n         rslt\n         (recur (conj got (first remainder))\n                (if (contains? got (first remainder))\n                  rslt\n                  (conj rslt (first remainder)))\n                (rest remainder))\n         )\n       )\n     #{(first rnge)} [(first rnge)] (rest rnge)\n       )\n    )", "problem": 56, "user": "52213426e4b0e6a83c8925c4"}, {"code": "(fn [xs]\n  (reduce\n   #(if (some #{%2} %)\n      %\n      (conj % %2))\n   []\n   xs))", "problem": 56, "user": "52379c46e4b0fae3832e99db"}, {"code": "#(->> % \n      (map list (range (count %))) \n      (group-by second) \n      (map (juxt key (comp first first val))) \n      (sort-by second) \n      (map first))", "problem": 56, "user": "5246e945e4b0644eb7b0783b"}, {"code": "#(loop [keep (into #{} %)\n         result []\n         s %]\n    (if (empty? keep) result\n        (if (contains? keep (first s))\n          (recur (disj keep (first s)) (conj result (first s)) (rest s))\n          (recur keep result (rest s)))))", "problem": 56, "user": "4f2d5f5de4b0d6649770a05a"}, {"code": "(fn f [col] (into [] (java.util.LinkedHashSet. col)))", "problem": 56, "user": "5243d9a2e4b076204b44fadf"}, {"code": "(fn [coll]\n   ( (fn f [res ncoll]\n       (let [n (first ncoll)\n             val (some #{n} res)]\n         (if (nil? n)\n           res\n           (recur\n            (if val res (conj res n))\n            (rest ncoll)))))\n     [] coll))", "problem": 56, "user": "506c0a02e4b0eda3100c090d"}, {"code": "(fn [seq]\n  (loop [seq seq\n         acc ()\n         m #{}]\n    (if (empty? seq)\n      (reverse acc)\n      (let [it (first seq)]\n        (if (get m it)\n          (recur (rest seq) acc m)\n          (recur (rest seq) (cons it acc) (conj m it)))))))", "problem": 56, "user": "524cdd51e4b0752c4cb68ccc"}, {"code": "(fn [xs] \n  (loop [xs xs acc []]\n    (if (empty? xs)\n      acc\n      (let [el (first xs)\n            new-acc (if (some #{el} acc) acc (conj acc el))]        \n        (recur (rest xs) new-acc)))))", "problem": 56, "user": "523c6451e4b07becd5be2222"}, {"code": "reduce #(if (empty? (filter (partial = %2) %)) (conj % %2) %) []", "problem": 56, "user": "523ed522e4b057c4b7cd0a78"}, {"code": "reduce #(if ((set %) %2) % (conj % %2)) []", "problem": 56, "user": "508923d5e4b06d8254e936e8"}, {"code": "#(second (reduce (fn [acc el] \n                      (let [ state (conj (first acc) el)\n\t\t\t\t\t         exists? (contains? (first acc) el)\n\t\t\t\t\t\t     res  (if exists? (second acc) (conj (second acc) el)  )] \n\t\t\t\t\t\t\t [state res]))\n   [#{} [] ] %))", "problem": 56, "user": "523a9fc9e4b081681ca7adca"}, {"code": "(fn dst\n  [coll]\n  (loop [c coll, tar []]\n    (let [ele (first c)]\n    (if (= (count c) 0)\n      tar\n      (recur (rest c) \n             ; add if not present\n             (if (= (.indexOf tar ele) -1)\n                (conj tar ele)\n                tar\n             )\n      )\n    )\n      )\n  )\n)", "problem": 56, "user": "52485723e4b05ef8e38e63d2"}, {"code": "reduce #( if ((set %1) %2 ) %1 (conj %1 %2))  []", "problem": 56, "user": "518c5236e4b087e178201de0"}, {"code": "(fn [coll]\n  (reduce #(if (nil? (some #{%2} %1)) (conj %1 %2) %1) [] coll))", "problem": 56, "user": "524b90fae4b09eba1c0223df"}, {"code": "reduce #(if ((set %) %2) % (conj % %2)) []", "problem": 56, "user": "52479487e4b05ef8e38e6373"}, {"code": "(fn [x] (sort-by #(.indexOf x %) (set x)))", "problem": 56, "user": "510c123be4b078ea7192110e"}, {"code": "(fn cust-distinct [coll]\n  (reduce\n    (fn [m n]\n\t  (if (some #{n} m)\n\t    m\n\t\t(conj m n)))\n\t[]\n\tcoll))", "problem": 56, "user": "52463059e4b09dbe66b56198"}, {"code": "(fn [lst]\n  ((fn [element-set result-list [el & others]]\n    (if-not el\n      \tresult-list\n\t\t(if (contains? element-set el)\n      \t\t(recur element-set result-list others)\n      \t\t(recur (conj element-set el) (conj result-list el) others)\n      \t)      \n      )\n\n    ) #{} [] lst)\n  )", "problem": 56, "user": "522d3a16e4b0e26240291d50"}, {"code": "(fn [coll] (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] coll))", "problem": 56, "user": "4f43b992e4b0d7d3c9f3fd2c"}, {"code": "(fn [c]\n  (loop [a []\n         e c]\n    (cond\n      (empty? e) a\n      (empty? (filter #(= % (first e)) a)) (recur (conj a (first e)) (rest e))\n      (not (empty? (filter #(= % (first e)) a))) (recur a (rest e)))))", "problem": 56, "user": "524ae8e6e4b09eba1c0223b5"}, {"code": "(fn [x]\n  (loop [x x a #{} res []]\n    (if (empty? x)\n      res\n      (recur\n       (rest x)\n       (conj a (first x))\n       (if (a (first x)) res (conj res (first x)))))))", "problem": 56, "user": "52525a0ee4b0541d1855b8a2"}, {"code": "(fn [coll]\n  (loop [coll coll\n         result (empty coll)\n         dups #{}]\n    (cond\n     (empty? coll) result\n     (dups (first coll)) (recur (rest coll) result dups)\n     :else (recur (rest coll) (concat result [(first coll)]) (conj dups (first coll))))))", "problem": 56, "user": "519db0ede4b037b32803f9b9"}, {"code": "(fn f\n  ([x] (f x []))\n  ([ [x & xs] acc ]\n   (if (and (nil? x) (nil? xs))\n     acc\n     (if (not-empty (filter #{x} acc))\n       (f xs acc)\n       (f xs (concat acc [x]))\n       )\n     )\n   )\n  )", "problem": 56, "user": "523f0bbfe4b01c266ffa7f91"}, {"code": "(fn [x]\n   (let [foo (fn [item result]\n    (if (>= (.indexOf result item) 0)\n           result\n           (cons item result)))]\n     ((fn bar [items result]\n       (if (empty? items)\n         (reverse result)\n         (bar (rest items) (foo (first items) result))))\n     x [])))", "problem": 56, "user": "525372ade4b0541d1855b8f3"}, {"code": "(fn dedup [coll] \n  (reduce \n    (fn [s el] \n      (if (empty? (filter #(= %1 el) s)) (conj s el) s)) [] coll))", "problem": 56, "user": "52319066e4b0e2e8de81d1e9"}, {"code": "(fn [s] (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] s))", "problem": 56, "user": "524be8e0e4b09eba1c0223f1"}, {"code": "(fn [s]\n  (second\n    (reduce\n     (fn [[seen result] x]\n       (if (seen x)\n         [seen result]\n         [(conj seen x) (conj result x)]))\n     [#{} []]\n     s)))", "problem": 56, "user": "525431dfe4b0541d1855b970"}, {"code": "(fn [x]\n  ((fn fdi [x s]\n     (if (empty? x)\n       '()\n       (if (not (nil? (s (first x))))\n         (cons (first x) (fdi (rest x) (disj s (first x))))\n         (fdi (rest x) s)\n         )\n       )\n     )\n   x (set x)\n   )\n  )", "problem": 56, "user": "52586d24e4b0cb4875a45cb0"}, {"code": "(fn [x]\n  (let [y (into #{} x)]\n    (sort-by #(.indexOf x %) (into [] y))\n    )\n  )", "problem": 56, "user": "52420e2fe4b076e5d3121f48"}, {"code": "(fn [coll] (reduce \n            #(if (some (partial = %2) %1) \n               %1 \n               (conj %1 %2)) \n            [] coll))", "problem": 56, "user": "524469dee4b0d8acf9ed6a9d"}, {"code": "(fn [x] \n  (loop [x x y []]\n    (if (empty? x)\n      y\n      (if (some #{(first x)} y)\n        (recur (rest x) y)\n        (recur (rest x) (conj y (first x)))\n      ))))", "problem": 56, "user": "5244380fe4b076204b44fb12"}, {"code": "(fn [xs] (reduce (fn [a v] (if (some #(= v %) a) a (conj a v))) [] xs))", "problem": 56, "user": "523b1a65e4b02f719975bdbd"}, {"code": "(fn f [s [e & v]] (if e (if (s e) (f s v) (into [e] (f (conj s e) v))))) #{}", "problem": 56, "user": "525b0b51e4b0cb4875a45d01"}, {"code": "(fn [x]\n  (map #(first %) (if (> (count x) 32) (sort (frequencies x)) (frequencies x))))", "problem": 56, "user": "5236cd89e4b0e010857b4e45"}, {"code": "(fn continue [s & [a]] (let [a (or a #{})]\n                (cond\n                 (empty? s) '()\n                 (contains? a (first s)) (lazy-seq (continue (rest s) (conj a (first s))))\n                 :else                   (cons (first s) (lazy-seq (continue (rest s) (conj a (first s))))))))", "problem": 56, "user": "525f51bde4b0cb4875a45dc8"}, {"code": "(fn [s]\n  (loop [rv [], as s, tmp #{}]\n    (if (seq as)\n      ; if the value hasn't been seen, add it to tmp and rv, else ignore it\n      (if-not (get tmp (first as))\n        (recur (conj rv (first as)) (rest as) (conj tmp (first as)))\n        (recur rv (rest as) tmp)\n      )\n      rv\n    )\n  )\n)", "problem": 56, "user": "5229211be4b04c906c9c6a63"}, {"code": "(fn rdup\n  [lst]\n  (if (empty? lst) \n    '() \n    (cons (first lst) (rdup (remove  #(= % (first lst)) (rest lst))))))", "problem": 56, "user": "5245d29ae4b09dbe66b56174"}, {"code": "(fn f [xs]\n  (if\n   (empty? xs) '()\n   (conj (f (remove #(= (first xs) %) (rest xs))) (first xs))))", "problem": 56, "user": "52618ea3e4b03e8d9a4a7064"}, {"code": "(fn [coll]\n    (let [order\n          (apply merge-with min\n                 (map #(apply hash-map %)\n                      (map-indexed (comp vec reverse list) coll)))\n          distincts (reduce conj #{} coll)]\n      (sort #(- (order %1) (order %2)) distincts)))", "problem": 56, "user": "50bca033e4b0594b91591c5d"}, {"code": "(fn myDistinct\n  [coll]\n  (reduce (fn[vect val] (if (some #(= val %) vect) vect (conj vect val))) [] coll))", "problem": 56, "user": "509a25b7e4b0efbae1fbc0a8"}, {"code": "reduce (fn [res elm] (if (some #(= elm %) res) res (conj res elm))) []", "problem": 56, "user": "51b24defe4b02f8f128bb963"}, {"code": "(fn [l] (filter identity (reduce #(if (= (.indexOf %1 %2) -1)\n                                   (conj %1 %2)\n                                   (conj %1 nil)) [] l)))", "problem": 56, "user": "5210ac52e4b080a8d9b9d63e"}, {"code": "(partial reduce #(if (some (fn [x] (= x %2)) %) % (conj % %2)) [])", "problem": 56, "user": "524f213be4b0541d1855b7ff"}, {"code": "#(first (reduce (fn [container it]\n                   (let [[res control] container]\n                     (if-not (get control it)\n                       [(conj res it) (conj control it)]\n                       container)\n                     \n                     )) [[] #{}] %)\n         )", "problem": 56, "user": "50550f43e4b0b1b9d1860eb7"}, {"code": "(fn distinc [x] \n  (reduce \n   (fn [a b] (if (some #{b} a) a (conj a b)))\n   []\n   x))", "problem": 56, "user": "525aa499e4b0cb4875a45cf7"}, {"code": "#(second (reduce\n\t\t (fn [[c l] n]\n\t\t\t (if (get c n)\n\t\t\t\t [c l]\n\t\t\t   [(conj c n) (conj l n)])) [#{} []] %))", "problem": 56, "user": "51f2851fe4b0210f90e7454b"}, {"code": "(fn [seq]\n  (first \n    (reduce \n      (fn [[v s] e]\n        (if (s e) \n            [v s]\n            [(conj v e) (conj s e)]))\n      [[] #{}]\n      seq)))", "problem": 56, "user": "5268eb68e4b03e8d9a4a71c6"}, {"code": "(let [f\n      (fn [result checker coll]\n        (if (nil? coll)\n          result\n          (if (contains? checker (first coll))\n            (recur result checker (next coll))\n            (recur (conj result (first coll)) (conj checker (first coll)) (next coll))\n          )\n        )\n      )]\n  (fn [z] (f [] #{} z))\n)", "problem": 56, "user": "526dd90de4b03e8d9a4a72fe"}, {"code": "(fn [cx]\n  (reduce\n   #(if-not\n        ((fn [c x]  (>   (count  (filter  (fn [m] (= x m))  c)) 0))   %1 %2)\n      (conj %1 %2)\n      %1\n      )\n   []\n   cx\n   )\n  )", "problem": 56, "user": "4ec4d723535dcc7ae8597d65"}, {"code": "#(reduce (fn [init item]\n           (if (neg? (.indexOf init item))\n             (conj init item)\n             init))\n         [] %)", "problem": 56, "user": "51df825de4b01188f062752b"}, {"code": "(fn dedup [s] \n  (reduce \n   #(if (nil? (some (partial = %2) %1)) \n           (concat %1 (list %2)) %1) '() s))", "problem": 56, "user": "52655949e4b03e8d9a4a710b"}, {"code": "(fn\n  [xs]\n  (:out\n    (reduce\n      (fn [acc x]\n        (if (contains? (:seen acc) x)\n          acc\n          (let [t1 (update-in acc [:seen]  conj x)\n                t2 (update-in t1  [:out] conj x)]\n            t2)))\n      {:seen #{} :out []}\n     xs)))", "problem": 56, "user": "526e5be8e4b03e8d9a4a731c"}, {"code": "#(vec (java.util.LinkedHashSet. %))", "problem": 56, "user": "4fad33e8e4b081705acca236"}, {"code": "#((fn step [xs seen]\n                   (lazy-seq\n                    ((fn [[f :as xs] seen]\n                      (when-let [s (seq xs)]\n                        (if (contains? seen f)\n                          (recur (rest s) seen)\n                          (cons f (step (rest s) (conj seen f))))))\n                     xs seen))) % #{})", "problem": 56, "user": "5047782ce4b0371827a27bc2"}, {"code": "#(loop [xs % res []]\n   (println xs)\n   (println res)\n   (println (first xs))\n  (cond\n    (empty? xs) res\n    (neg? (.indexOf res (first xs))) (recur (rest xs) (conj res (first xs)))\n    :else (recur (rest xs) res)))", "problem": 56, "user": "52667ecfe4b03e8d9a4a713e"}, {"code": "(fn [l]\n(reduce (fn [a x] (if-not (some #(= x %) a) (conj a x) a)) [] l)\n)", "problem": 56, "user": "52593207e4b0cb4875a45cd3"}, {"code": "(fn unique\n      ([s] (unique s #{}))\n      ([s m]\n         (when-let [[f & r] (seq s)]\n           ((if (m f) identity (partial cons f))\n            (unique r (conj m f))))))", "problem": 56, "user": "52746701e4b03e8d9a4a74a2"}, {"code": "reduce #(if (contains? (set %1) %2) %1 (conj %1 %2)) []", "problem": 56, "user": "4f90dc2ae4b0dcca54ed6c92"}, {"code": "(fn [coll]\n    (let [step (fn step [xs seen]\n                   (lazy-seq\n                    ((fn [[f :as xs] seen]\n                      (when-let [s (seq xs)]\n                        (if (contains? seen f) \n                          (recur (rest s) seen)\n                          (cons f (step (rest s) (conj seen f))))))\n                     xs seen)))]\n      (step coll #{})))", "problem": 56, "user": "5272d4b7e4b03e8d9a4a7453"}, {"code": "(fn p56\n  ([lst] (p56 [] lst))\n  ([ac lst]\n   (if (empty? lst) ac\n     (p56 (if (some #(= (first lst) %) ac) ac (conj ac (first lst))) (next lst )))))", "problem": 56, "user": "5272669de4b03e8d9a4a742e"}, {"code": "(fn [coll]\n  (reduce (fn [res ele]\n                (if ((set res) ele)\n                  res\n                  (conj res ele)))\n    [] coll))", "problem": 56, "user": "523bde95e4b07becd5be2202"}, {"code": "(fn [seq]\n  (loop [seen #{}\n         seq seq\n         accum []]\n    (if (empty? seq)\n      accum\n      (let [[f & r] seq]\n        (recur (conj seen f)\n               r\n               (if (contains? seen f)\n                 accum\n                 (conj accum f)))))))", "problem": 56, "user": "4ec1b090535dfed6da9c6db5"}, {"code": "(fn my-distinct [coll]\n  (for [[v i] (map vector coll (range))\n        :let [m (zipmap (reverse coll) (range (dec (count coll)) -1 -1))]\n        :when (= i (m v))]\n    v))", "problem": 56, "user": "526ee63de4b03e8d9a4a733f"}, {"code": "reduce #(if (some #{%2} %1) %1 (conj %1 %2)) []", "problem": 56, "user": "522f483ce4b032bbe342415a"}, {"code": "(fn [v]\n  (reduce #(if (>= (.indexOf % %2) 0) % (conj % %2)) [] v))", "problem": 56, "user": "52736ca1e4b03e8d9a4a747e"}, {"code": "(fn find-distinct-item [colls]\n  (letfn[(step \n           [[fs :as colls] seen]\n           (when-let [s (seq colls)]\n             (if(contains? seen fs)\n               (recur (rest s ) seen)\n               (cons fs (step (rest s ) (conj seen fs))))))]\n     (step colls #{})))", "problem": 56, "user": "5273562ae4b03e8d9a4a7479"}, {"code": "#(if (apply distinct? %) %\n  \t(map first (group-by identity %)))", "problem": 56, "user": "5269c150e4b03e8d9a4a71f8"}, {"code": "(fn [x] (reduce #(if ((set %1) %2)\n           %1\n           (conj %1 %2)) [] x))", "problem": 56, "user": "5220909fe4b0e6a83c89259f"}, {"code": "(fn my-distinct2 [coll]\n  (reduce (fn [a b] (if (contains? (set a) b) a (conj a b))) [] coll))", "problem": 56, "user": "5264301fe4b03e8d9a4a70ca"}, {"code": "(fn a [col] (loop [c col seen #{} o []] (if(empty? c)(identity o)(recur (next c) (if(seen (first c))(identity seen)(into seen (list(first c)))) (if(seen (first c))(identity o)(conj o (first c)))))))", "problem": 56, "user": "527a8eb7e4b03e8d9a4a755f"}, {"code": "reduce (fn [acc x] (if (some #(= x %) acc) acc (conj acc x))) []", "problem": 56, "user": "5213d7aae4b0961f15ac4d72"}, {"code": "(fn [src] \n   (loop [x src rslt '() cch '()]\n     (if (empty? x) rslt\n       (if (some #(= % (first x))  cch )\n         (recur (rest x) rslt cch)\n         (recur (rest x) (concat rslt (list (first x))) (conj cch (first x)))\n        )\n     )\n   )\n )", "problem": 56, "user": "5274eb56e4b03e8d9a4a74bb"}, {"code": "#(keys (sort-by val (zipmap (reverse %) (map - (range)))))", "problem": 56, "user": "5276aa0de4b03e8d9a4a74ea"}, {"code": "(fn [s]\n  (seq (java.util.LinkedHashSet. s)))", "problem": 56, "user": "5236b6bce4b05f3be1c7c8fe"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "51ef31dfe4b0871fa145d9a0"}, {"code": "(fn [xs] \n  (letfn [(add-distinct [[previous eles] ele]\n                        (if (previous ele)\n                          [previous eles]\n                          [(conj previous ele) (conj eles ele)]))]\n    ((reduce add-distinct [#{} []] xs) 1)))", "problem": 56, "user": "51269362e4b083bb8f88cf09"}, {"code": "(fn [xs] (reverse (reduce (fn [acc,x] (if (some #{x} acc) acc (conj acc x) )) () xs)))", "problem": 56, "user": "5271b940e4b03e8d9a4a73fb"}, {"code": "(fn [c]\n  (reverse\n   (reduce \n    #(if (some (partial = %2) %1) %1 (cons %2 %1))\n    () c)))", "problem": 56, "user": "5267d9bde4b03e8d9a4a7188"}, {"code": "reduce (fn[s x](if (some #(= x %) s) \n                 \t\ts \n                  \t\t(conj s x)\n                )\n          ) []", "problem": 56, "user": "526a3412e4b03e8d9a4a721e"}, {"code": "(fn find-d [col]\n  (let [res (reduce (fn [xs x]\n                      (if (nil? (some #{x} xs ))\n                        (conj xs x)\n                        xs))\n                    (empty col)\n                    col)]\n    (if (vector? col)\n      res\n      (reverse res))))", "problem": 56, "user": "527ccaf4e4b0757a1b17136d"}, {"code": "(fn [x]\n  (last\n    (reduce\n      (fn [r e]\n        (if (contains? (first r) e)\n          r\n          [(conj (first r) e) (conj (last r) e)] ) ) [#{} []] x ) ) )", "problem": 56, "user": "51e28063e4b08e53a149f0f2"}, {"code": "(fn dist [s] (reduce (fn [c i] (if (contains? (apply hash-set c) i) c (conj c i))) [] s))", "problem": 56, "user": "526439a4e4b03e8d9a4a70cc"}, {"code": "#(reduce (fn [m e]                   \n           (if (some (partial = e) m)\n             m                       \n             (conj m e) ) )          \n         []                          \n         % )", "problem": 56, "user": "4df20dda535d08e6dec9fe23"}, {"code": "#(second (reduce (fn [[st s :as pair] i] (if (st i) pair [(conj st i) (conj s i)]))\n                 [#{}, []] %))", "problem": 56, "user": "519ef784e4b087743fad2198"}, {"code": "(fn rem-dupes [a-coll]\n  ((fn inner [[x & xs]\n      \t\t seen]\n    (when x\n      (if (seen x)\n        (inner xs seen)\n        (cons x (inner xs (conj seen x))))))\n  \ta-coll #{}))", "problem": 56, "user": "52890634e4b0239c8a67ae5e"}, {"code": "(fn ri[s]\n  (loop [s1 s\n         my-set #{}\n         out []\n         ]\n    (if (empty? s1)\n      out\n    (let [curr (first s1)\n          do-add (not (contains? my-set curr))\n          ]\n    (recur (rest s1) (conj my-set curr)  (if do-add (conj out curr) out))))))", "problem": 56, "user": "51622fb8e4b009fba0926e3f"}, {"code": "(fn [xs]\n  (reduce #(if (some #{%2} %1) \n               %1 \n               (concat %1 [%2])) \n          [] xs))", "problem": 56, "user": "511aa2a4e4b0c87c59c9670a"}, {"code": "(fn [coll] \n  ((fn step [[x & xs] seen] \n     (when x\n       (if (seen x) \n         (step xs seen)\n         (cons x (step xs (conj seen x)))))) \n   coll #{}))", "problem": 56, "user": "527dc2aee4b0757a1b17138d"}, {"code": "(fn [s] (first (reduce #(if (get (second %) %2)\n                          %\n                          (list (conj (first %) %2)\n                                (assoc (second %) %2 true)))\n                       '([]{}) s)))", "problem": 56, "user": "5078d366e4b08327cd804a5b"}, {"code": "(fn distinc [[x & xs]]\n   (lazy-seq\n     (if (nil? x)\n       nil\n       (cons x (distinc (filter #(not= x %) xs))))))", "problem": 56, "user": "4f35b2ace4b0e243712b1ec5"}, {"code": "(fn remove-dupes [coll]\n  (loop [coll coll acc [] collset #{}]\n    (let [e (first coll)]\n      (if-not e\n        acc\n        (if (collset e)\n          (recur (rest coll) acc collset)\n          (recur (rest coll) (conj acc e) (conj collset e)))))))", "problem": 56, "user": "528b08efe4b0239c8a67ae8a"}, {"code": "(fn [x] (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] x))", "problem": 56, "user": "528e64b7e4b0239c8a67aedd"}, {"code": "#(seq (java.util.LinkedHashSet. %))", "problem": 56, "user": "51e38568e4b0c611d6113e43"}, {"code": "(fn [seq] \n    (loop [result [] items #{} s seq]\n      (let [elem (first s)](if (empty? s) result\n         (recur (if (not-any? items [elem]) (conj result elem) result) (conj items elem) (drop 1 s))\n       )) \n    )\n)", "problem": 56, "user": "522eba30e4b01cdb292c5f0e"}, {"code": "(fn dis\n  [coll]\n  (let [step (fn step [xs seen]\n               (lazy-seq\n                ((fn [[f :as xs] seen]\n                   (when-let [s (seq xs)]\n                     (if (contains? seen f)\n                       (recur (rest s) seen)\n                       (cons f (step (rest s) (conj seen f))))))\n                 xs seen)))]\n    (step coll #{})))", "problem": 56, "user": "5289bba9e4b0239c8a67ae69"}, {"code": "(fn dist [s] \n  (if (empty? s)\n    ()\n    (cons (first s) \n    \t\t    (dist (filter #(not (= (first s) %)) s)))))", "problem": 56, "user": "5294e44de4b02ebb4ef75016"}, {"code": "reduce #(if ((set %) %2) % (conj % %2)) []", "problem": 56, "user": "528e95efe4b0239c8a67aee2"}, {"code": "(fn find-distinct-items [coll] \n  (reduce (fn [acc e] \n            (if (some #(= e %) acc) \n              acc\n              (conj acc e))) [] coll))", "problem": 56, "user": "50fc48dde4b0d10d794c19f6"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "52753740e4b03e8d9a4a74c1"}, {"code": "(fn [in]\n  (let [seen (ref #{})\n        out (ref [])]\n    (doseq [x in]\n      (if (not (seen x))\n        (dosync\n         (alter seen #(conj % x))\n         (alter out #(conj % x)))))\n    @out))", "problem": 56, "user": "529936e7e4b02ebb4ef7507b"}, {"code": "(fn p56-distinct [s]\n  (let [summary\n        (reduce (fn [summary x]\n                  (if (contains? (summary :seen) x)\n                    summary\n                    (-> summary\n                        (conj {:seen (conj (summary :seen) x)})\n                        (conj {:d    (conj (summary :d) x)}))\n                    ))\n                {:seen #{}, :d []} s)]\n    (summary :d)))", "problem": 56, "user": "526d6968e4b03e8d9a4a72d9"}, {"code": "reduce #(if ((set %) %2) % (conj % %2)) []", "problem": 56, "user": "51ad244fe4b09397d510977f"}, {"code": "(fn [s] (loop [[x & xs] s acc []]\n          (if (nil? x)\n            acc\n            (if (some #{x} acc)\n              (recur xs acc)\n              (recur xs (conj acc x))))))", "problem": 56, "user": "4f3d83b5e4b0e243712b1f69"}, {"code": "(fn f [x] (if (= 0 (count x)) x (cons (first x)  (f (filter (fn [y] (not= y (first x))) (rest x) )))))", "problem": 56, "user": "5296008fe4b02ebb4ef7502a"}, {"code": "(fn mydistinct [coll]\n  (loop [s coll d [] seen #{}]\n    (cond\n     (empty? s) d\n     (nil? (seen (first s))) (recur (rest s)\n                                       (conj d (first s))\n                                       (conj seen (first s))\n                                       )\n     :else (recur (rest s)\n                  d seen))))", "problem": 56, "user": "52140b53e4b0961f15ac4d7e"}, {"code": "(fn [coll]\n (let [step (fn step [xs seen]\n                   (lazy-seq\n                    ((fn [[f :as xs] seen]\n                      (when-let [s (seq xs)]\n                        (if (contains? seen f)\n                          (recur (rest s) seen)\n                          (cons f (step (rest s) (conj seen f))))))\n                     xs seen)))]\n      (step coll #{})))", "problem": 56, "user": "525c575be4b0cb4875a45d38"}, {"code": "(let [seen (atom #{})\n      seen? #(or (@seen %) (do (swap! seen conj %) false))]\n  (partial filter (complement seen?)))", "problem": 56, "user": "52a1acb2e4b04e0c58e87bdb"}, {"code": "(fn [s]\n  (second\n   (reduce\n    (fn [[se sq] v]\n      (let [se' (conj se v)]\n        (if-not (contains? se v)\n          [se' (conj sq v)]\n          [se' sq])))\n    [#{} []] s)))", "problem": 56, "user": "529ce629e4b04e0c58e87b6e"}, {"code": "(fn [col](reduce (fn [ret cur]\n          (if-not (some #(= % cur) ret)\n            (conj ret cur)\n            ret)) [] col))", "problem": 56, "user": "525ed5f4e4b0cb4875a45db8"}, {"code": "(fn [y] (->> y \n          (#(reduce (fn [xs x] (conj xs x)) (sorted-set) %))\n          vec\n          (sort-by #(.indexOf y %))))", "problem": 56, "user": "52a04f0ee4b04e0c58e87bc1"}, {"code": ";old: \n;(fn [coll] (loop [n 0 acc []] (if (= n (count coll)) acc (recur (inc n) (if-not (some #(= (nth coll n) %) acc) (conj acc (nth coll n)) acc)))))\n\n;new:\n(fn [data] (reduce (fn [a b] (if-not (some #(= % b) a) (conj a b) a)) [] data))", "problem": 56, "user": "509fe759e4b08df8156e9e43"}, {"code": "#(->>\n  (map-indexed vector %)\n  (sort-by last)\n  (partition-by last)\n  (map first)\n  (sort-by first)\n  (map last)\n)", "problem": 56, "user": "528652fbe4b0239c8a67ae14"}, {"code": "(fn [s]\n  (reduce \n   (fn [x y] (if (some #(= y %) x) x (conj x y)))\n   []\n   s))", "problem": 56, "user": "5226f8e9e4b04e78ff2e199a"}, {"code": "#(first (reduce (fn [[c s] x]\n          (if (not (s x))\n            [(conj c x) (conj s x)]\n            [c s]))\n         [[] #{}]\n         %))", "problem": 56, "user": "52951156e4b02ebb4ef7501b"}, {"code": "(fn my-distinct [s]\n  (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] s)\n  )", "problem": 56, "user": "529a73bde4b02ebb4ef75096"}, {"code": "(fn [in]\n  (loop [acc [] remaining in]\n    (if-not (seq remaining)\n      acc\n      (if (some #{(first remaining)} acc)\n        (recur acc (rest remaining))\n        (recur (conj acc (first remaining)) (rest remaining))))))", "problem": 56, "user": "4f45c72be4b0d56e7bb92b8a"}, {"code": "(fn dedup [coll]\n  (loop [unique #{}\n         lst coll\n         acc []]\n\n    (if (empty? lst)\n      acc\n      (let [elem (first lst)]\n        (if (contains? unique elem)\n          (recur unique (rest lst) acc)\n          (recur (conj unique elem) (rest lst) (conj acc elem)))))))", "problem": 56, "user": "52a6ed15e4b0c58976d9ac0a"}, {"code": "(fn dis-tinct [xs]\n  (reduce\n    (fn append-if-not-exist [dv next-value]\n      (if (some #{next-value} dv)\n        dv\n        (concat dv (list next-value))))\n  (list)\n  xs))", "problem": 56, "user": "529e3a4fe4b04e0c58e87b92"}, {"code": "(fn [coll] \n  ((fn step [[x & xs] seen] \n     (when x\n       (if (seen x) \n         (step xs seen)\n         (cons x (step xs (conj seen x)))))) \n   coll #{}))", "problem": 56, "user": "52a503e4e4b0c58976d9abe1"}, {"code": "(fn [s]\n     (keep-indexed \n      #(if-not ((set (take %1 s)) %2) %2) s))", "problem": 56, "user": "51929214e4b08962174cf74c"}, {"code": "(partial (fn [acc l]\n           (if (empty? l) (reverse acc)\n            (recur \n             (if \n               (not (nil? (some #(= % (first l)) acc))) acc\n               (conj acc (first l))) (rest l)))) '())", "problem": 56, "user": "5273e006e4b03e8d9a4a7495"}, {"code": "#(loop\n   [s % dups #{} res []]\n   (if-let [[x & xs] s]\n     (if (dups x)\n       (recur xs dups res)\n       (recur xs (conj dups x) (conj res x))\n       )\n     res)\n   )", "problem": 56, "user": "5298d3f4e4b02ebb4ef75068"}, {"code": "(fn distinct* [coll]\n  (reduce #(if ((set %1) %2)\n             %1\n             (concat %1 (vector %2)))\n          (empty coll)\n          coll))", "problem": 56, "user": "52ab6de1e4b0c58976d9ac78"}, {"code": "(fn [coll]\n  (reduce\n   (fn [res item]\n     (if ((set res) item)\n       res\n       (conj res item)))\n   [] coll))", "problem": 56, "user": "51937eb3e4b04df54c098022"}, {"code": "#(sort-by (fn [x] (.indexOf % x))  (set %))", "problem": 56, "user": "52afbc69e4b0c58976d9acc0"}, {"code": "#(sort-by \n                (fn [x] (.indexOf % x))\n                (into [] (into #{} %))\n        )", "problem": 56, "user": "52b1d41ce4b0c58976d9ace6"}, {"code": "(fn [s]\n    (letfn [(dist [s r]\n              (cond\n                (empty? s) (reverse r)\n                (some #{(first s)} r) (dist (rest s) r)\n                :else (dist (rest s) (cons (first s) r))))]\n      (dist s '())))", "problem": 56, "user": "526f9715e4b03e8d9a4a7372"}, {"code": "(fn [coll]\n  (letfn [(appear-before? [n]\n                         (let [item (nth coll n)]\n                           (some #(= item %) (take n coll))))]\n        (map #(nth coll %)\n             (filter #(not (appear-before? %)) (range (count coll))))))", "problem": 56, "user": "52a55adee4b0c58976d9abe7"}, {"code": "(fn [coll] (loop [c coll a []] (if (empty? c) a (if (some #(= (first c) %) a) (recur (rest c) a) (recur (rest c) (conj a (first c)))))))", "problem": 56, "user": "52b43468e4b0c58976d9ad1b"}, {"code": "(fn [sq] (reduce  (fn [a b] (if (some #(= b %) a) a (conj a b))) [] sq ))", "problem": 56, "user": "52aad30ce4b0c58976d9ac6d"}, {"code": "(fn my-distinct\n  [coll]\n  (let [seen? (let [table (atom {})]\n                (fn [n]\n                  (when-not (find @table n)\n                    (do (swap! table conj [n nil])\n                        n))))]\n    (keep seen? coll)))", "problem": 56, "user": "4ef7a483535dced4c769f258"}, {"code": "reduce #(if ((set %) %2) % (conj % %2)) []", "problem": 56, "user": "528a3e14e4b0239c8a67ae72"}, {"code": "(fn [xs] (reduce (fn [acc x] (if (some #{x} acc) acc (conj acc x))) [] xs))", "problem": 56, "user": "52a88c4de4b0c58976d9ac30"}, {"code": "(fn distinct2 [left]\n   (if (empty? left)\n     left\n     (cons (first left)\n           (filter (partial not= (first left))\n                   (distinct2 (rest left))))))", "problem": 56, "user": "52b65f26e4b0c58976d9ad43"}, {"code": "#(loop [res [] in %]\n   (if (empty? in)\n     res\n     (let [e (first in)]\n       (if (contains? (set res) e)\n         (recur res (rest in))\n         (recur (conj res e) (rest in))\n       )\n     )\n   )\n )", "problem": 56, "user": "52774dd2e4b03e8d9a4a74ff"}, {"code": "#(reduce (fn [memo x] (if (some (fn [y] (= y x)) memo) memo (conj memo x))) [] %)", "problem": 56, "user": "4ec1619b535dfed6da9c6dab"}, {"code": "(fn [coll]\n  ((fn step [[x & xs] seen]\n     (when x\n       (if (seen x)\n         (step xs seen)\n         (cons x (step xs (conj seen x))))))\n   coll #{}))", "problem": 56, "user": "4f437751e4b0d7d3c9f3fd20"}, {"code": "(fn dedupe\n  ([lst] (dedupe lst #{}))\n  ([lst seen]\n     (cond\n      (empty? lst) '()\n      (contains? seen (first lst)) (dedupe (rest lst) seen)\n      :else (conj (dedupe (rest lst) (conj seen (first lst))) (first lst)))))", "problem": 56, "user": "52b5edd1e4b0c58976d9ad3c"}, {"code": "(fn [s]\n  (reduce (fn [a e]\n            (if (some (partial = e) a)\n              a\n              (conj a e)))\n          []\n          s))", "problem": 56, "user": "4fc3a72ae4b081705acca342"}, {"code": "(fn dist\n  [[x & xs]]\n  (if (empty? xs)\n    (if (nil? x) [] [x])\n    (let [rm-xs (remove #(= x %) xs)]\n      (cons x (dist rm-xs)))))", "problem": 56, "user": "524f4256e4b0541d1855b808"}, {"code": "(fn find-distinct[x](\n                        (fn fd-inner[xin s output](if (first xin)\n                                                    (if (s (first xin))\n                                                      (fd-inner (rest xin) s output)\n                                                    (fd-inner (rest xin) (conj s (first xin)) (conj output (first xin)))\n                                                    ) output))\n                        x #{} []\n                        ))", "problem": 56, "user": "52a1edd6e4b04e0c58e87be4"}, {"code": "(fn\n  [cs]\n  (reduce #(if (contains? (set %) %2)\n             %\n             (conj % %2)) [] cs))", "problem": 56, "user": "51852961e4b0da5a5be3babb"}, {"code": "(fn deDupe [target]\n      (reverse\n       (reduce\n        (\n         fn deDupeOne [newColl item]\n            (cond\n             (some (fn [x] (= x item)) newColl) (identity newColl)\n             :else\n             (cond\n              (vector? newColl) (vec (cons item newColl))\n              :else\n              (cons item newColl)\n              )\n             )\n            )\n        (empty target)\n        target\n        )\n       ))", "problem": 56, "user": "52867936e4b0239c8a67ae16"}, {"code": "(fn [orig]\n  (loop [rv [] seen #{} [h & t] orig]\n    (if (nil? h)\n      rv\n      (recur (if (seen h) rv (conj rv h)) (conj seen h) t)\n      )\n    )\n  )", "problem": 56, "user": "527ba695e4b03e8d9a4a7596"}, {"code": "(fn dis [x] (reduce (fn in [y,z] (if (some #{z} y) y (conj y z))) [] x))", "problem": 56, "user": "52b7a904e4b0c58976d9ad51"}, {"code": "(fn [coll]\n  (let [step (fn step [xs seen]\n               (when-let [f (first xs)]\n                 (if (contains? seen f)\n                   (recur (rest xs) seen)\n                   (cons f (step (rest xs) (conj seen f))))))]\n    (step coll #{})))", "problem": 56, "user": "52976262e4b02ebb4ef75041"}, {"code": "(fn [lst]\n  (reduce\n   #(if (some #{%2} %1) %1 (conj %1 %2))\n   []\n   lst))", "problem": 56, "user": "519136e9e4b0f8ef0be96c01"}, {"code": "(fn dist ([xs] (dist xs [] #{}))\n  \t\t ([xs acc seen] (if (empty? xs)\n                            acc\n                            (let [x (first xs)]\n                                 (if (contains? seen x)\n                                 \t(recur (rest xs) acc seen)\n                                \t(recur (rest xs) (conj acc x) (conj seen x))\n                                 )\n                            )\n                     )\n         )\n)", "problem": 56, "user": "52bf8e35e4b07a9af579233a"}, {"code": "(fn [s]\n  (reduce\n    (fn [v x]\n      (if (some #(= %1 x) v) v (conj v x)))\n    []\n    s))", "problem": 56, "user": "527cd633e4b0757a1b17136f"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "52bf29fde4b07a9af579232e"}, {"code": "(fn [xs]\n  (loop [seen #{}\n         result []\n         xs xs]\n    (if (empty? xs)\n      result\n      (if (contains? seen (first xs))\n        (recur seen result (rest xs))\n        (recur (conj seen (first xs)) (conj result (first xs)) (rest xs))))))", "problem": 56, "user": "4f3a979de4b0e243712b1f10"}, {"code": "(fn [col] \n  (letfn [( f [ys xs]\n    (if (empty? ys)\n      (reverse xs)\n      (if (some #(= (first ys) %) xs)\n        (f (rest ys) xs)\n        (f (rest ys) (cons (first ys) xs)))\n        ))]\n    (f col ())))", "problem": 56, "user": "4ffa8affe4b0678c553fc3bd"}, {"code": "#(reduce (fn [v e]\n\t           (if (some #{e} v)\n              v\n              (conj v e)))\n          []\n          %)", "problem": 56, "user": "4e778d36535d324fb2983d71"}, {"code": "(fn [s] (reduce (fn [m v] (if (some #{v} m) m (conj m v))) [] s))", "problem": 56, "user": "52c200cbe4b07a9af5792372"}, {"code": "reduce (fn [xs x]\n          (if (some #{x} xs)\n            xs\n            (conj xs x))) []", "problem": 56, "user": "523f1245e4b01c266ffa7f95"}, {"code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "problem": 56, "user": "52b02329e4b0c58976d9acc5"}, {"code": "(fn [I]\n  (loop [i I s #{} d []]\n    (let [f (first i)\n          r (rest i)]\n      (if (empty? i)\n        d\n        (if (s f)\n          (recur r s d)\n          (recur r (conj s f) (conj d f)))))))", "problem": 56, "user": "502940a9e4b061fd216be4b8"}, {"code": "(fn [l]\n   (let [sl (map first ( (comp (partial partition-by identity) sort) l))]\n     (loop [ans [] ss (set sl) l l]\n\t    (if (empty? ss)\n\t\tans\n\t      (if (contains? ss (first l))\n\t\t  (recur (conj ans (first l)) (disj ss (first l)) (rest l))\n\t\t(recur ans ss (rest l))))\n\t    )))", "problem": 56, "user": "52aa16d1e4b0c58976d9ac5a"}, {"code": "(fn mydistinct [t]\n  (loop [s t acc []]\n    (let [i (first s)]\n      (if (empty? s)\n        acc\n        (recur (rest s)\n               (if (some (partial = i) acc)\n                 acc\n                 (conj acc i)))))))", "problem": 56, "user": "52ba43d0e4b07a9af57922cd"}, {"code": "#(loop [newcoll []\n        coll %]\n   (if (empty? coll)\n     newcoll\n     (if (contains? (set newcoll) (first coll))\n       (recur newcoll (rest coll))\n       (recur (conj newcoll (first coll)) (rest coll)))))", "problem": 56, "user": "52a5f1e6e4b0c58976d9abf4"}, {"code": "(fn [s]\n          (loop [ret []\n                 s s\n                 seen #{}]\n            (if-not (seq s)\n              ret\n              (recur (if-not (seen (first s)) (conj ret (first s)) ret)\n                     (rest s)\n                     (conj seen (first s))))))", "problem": 56, "user": "52c4fe42e4b0c2d177d620e9"}, {"code": "reduce #(if (some (fn [i] (= i %2)) %1) %1 (conj %1 %2)) []", "problem": 56, "user": "52ba2af3e4b07a9af57922cc"}, {"code": "#(reduce\n  (fn [s e]\n    (if (some #{e} s)\n      s\n      (conj s e)   \n    )\n  )\n  []\n  %\n )", "problem": 56, "user": "52b49aebe4b0c58976d9ad2b"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "4dbe5390535d020aff1edf5c"}, {"code": "(fn f [a] (if (empty? a) [] (let [pre (drop-last a) s (f pre) b (last a)] (concat s (if-not ((set pre) b) [b] [] )))))", "problem": 56, "user": "52c6a0abe4b0c2d177d62111"}, {"code": "(fn [xs]\n  (loop [output [] s #{} xs xs]\n    (if (seq xs)\n      (if (s (first xs))\n        (recur output s (rest xs))\n        (recur (conj output (first xs)) (conj s (first xs)) (rest xs)))\n      output)))", "problem": 56, "user": "4ea365e2535d7eef308072c5"}, {"code": "(fn [xs]\n  (last (reduce (fn [[s r] x] (if (s x) [s r] [(conj s x) (conj r x)]\n                      )\n                  )\n                [#{} []]\n                xs\n                ))\n  )", "problem": 56, "user": "52bbe6e1e4b07a9af57922ef"}, {"code": "(fn [col]\n  (loop [\n         col col\n         dist []\n         ]\n    (if \n      (empty? col)\n      dist\n      (recur (rest col) (if \n                          (some #{(first col)} dist)\n                          dist\n                          (conj dist (first col)))))))", "problem": 56, "user": "4f05a9cf535dcb61093f6bfc"}, {"code": "(fn [s]\n  (reduce #(if ((set %1) %2) %1 (conj %1 %2)) [] s))", "problem": 56, "user": "52c580c2e4b0c2d177d620f5"}, {"code": "(fn find-distinct-items [sq]\n  (let [dcol(reduce \n             #(if (contains? (set %) %2) % (conj % %2))\n             (empty sq) sq)]\n    (if (= (first sq) (first dcol)) dcol (reverse dcol))))", "problem": 56, "user": "515bbcd9e4b0388ca8ca1521"}, {"code": "(comp #(first %)\n      #(reduce (fn [result elem]\n                 (let [[resultList resultSet] result]\n                   (if (contains? resultSet elem) \n                     result \n                     (vector (conj resultList elem) (conj resultSet elem)))))\n               (vector (vector) (hash-set))\n               %))", "problem": 56, "user": "52c2106fe4b07a9af5792374"}, {"code": "(partial reduce (fn [a b] (if (contains? (set a) b) a (conj a b))) [])", "problem": 56, "user": "52c58440e4b0c2d177d620f7"}, {"code": "(fn [coll]\n  (reduce (fn [acc v] (if (some (hash-set v) acc)\n                        acc\n                        (conj acc v)))\n          []\n          coll))", "problem": 56, "user": "4fa09916e4b0dcca54ed6d4e"}, {"code": "#(reduce (fn [c x] (if (some #{x} c) c (conj c x))) [] %)", "problem": 56, "user": "52b453b0e4b0c58976d9ad21"}, {"code": "(fn meu-remove-dups [s]\n  (when (not (empty? s))\n\t  (cons (first s) (meu-remove-dups (remove #(= (first s) %) (next s))))))", "problem": 56, "user": "52c8758be4b0c2d177d62135"}, {"code": "(fn [c] (reduce (fn [a b] (if (some #(= b %) a) a (conj a b))) [] c))", "problem": 56, "user": "52c1bd29e4b07a9af579236a"}, {"code": "(fn f\n   ([coll] (f coll #{}))\n   ([coll sset]\n      (when (seq coll)\n        (if (sset (first coll))\n          (lazy-seq (f (rest coll) sset))\n          (cons\n           (first coll)\n           (lazy-seq (f (rest coll) (conj sset (first coll)))))))))", "problem": 56, "user": "52cc582ae4b07d0d72b27362"}, {"code": "(fn rem-occ [lst]\n    (reduce (fn [acc ele]\n        (if (some #(= ele %) acc)\n            acc\n            (conj acc ele)))\n    [] lst)\n)", "problem": 56, "user": "52c17e42e4b07a9af5792367"}, {"code": "(fn [xs]\n  (first (reduce (fn [[items found] item] [(if (contains? found item) items (conj items item)) (conj found item)]) [[] #{}] xs)))", "problem": 56, "user": "4f03641a535dcb61093f6a9b"}, {"code": "(fn __ [coll]\n  (reduce (fn [l a] (if (some #(= a %) l) l (conj l a))) [] coll))\n\n\n#_(fn dist\n  [coll]\n    (let [step (fn step [xs seen]\n                   (lazy-seq\n                    ((fn [[f :as xs] seen]\n                      (when-let [s (seq xs)]\n                        (if (contains? seen f) \n                          (recur (rest s) seen)\n                          (cons f (step (rest s) (conj seen f))))))\n                     xs seen)))]\n      (step coll #{})))", "problem": 56, "user": "52828298e4b0757a1b17145b"}, {"code": "reduce\n(fn [acc x] (if (some #{x} acc) acc (conj acc x)))\n[]", "problem": 56, "user": "52d0902ee4b07d0d72b273bd"}, {"code": "(fn [data] (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] data))", "problem": 56, "user": "5271605ae4b03e8d9a4a73ed"}, {"code": "(fn distinct2 [x]\n\t(nth\n\t(reduce\n\t\t(fn [[res occurencies] b]\n\t\t\t(if (contains? occurencies b)\n\t\t\t\t[res occurencies]\n\t\t\t\t[(conj res b) (conj occurencies b)])\n\t\t\t)\n\t\t[[] #{}]\n\t\tx)\n\t0\n\t)\n\t)", "problem": 56, "user": "5094057fe4b097f48cc38593"}, {"code": "(fn [a]\n  (reverse ((fn r [m b]\n    (if (empty? b)\n      []\n      (if (m (first b))\n        (r m (rest b))\n        (conj (r (merge m (first b)) (rest b)) (first b)))))\n  #{} a)))", "problem": 56, "user": "525cc137e4b0cb4875a45d46"}, {"code": "(fn dist[lst]\n  (reduce \n   #(if (some #{%2} %1) %1 (conj %1 %2)) \n   [] \n   lst))", "problem": 56, "user": "52b405e1e4b0c58976d9ad15"}, {"code": "(fn [x] (reduce \n\t(fn [v i] (if (every? #(not= % i) v) (conj v i) v))\n\t[] x))", "problem": 56, "user": "52cdb7efe4b07d0d72b2737c"}, {"code": "#(let [dst (fn [sq rs st]\n              (let [x (first sq)\n                    r (rest sq)\n                    nrs (if (get st x) rs (conj rs x))] \n                   (if (seq r)\n                     (recur r nrs (conj st x))\n                     nrs)))]\n   (dst % [] #{}))", "problem": 56, "user": "52d02380e4b07d0d72b273b7"}, {"code": "(fn f [l]\n  (letfn\n    [(helper [i m result]\n             (if (< i (count l))\n               (let\n                 [current (nth l i)\n                  current-value (get m current)]\n                 (if (nil? current-value)\n                   (helper (+ i 1) (assoc m current \"anything\") (conj result current))\n                   (helper (+ i 1) m result)))\n               result))]\n    (helper 0 {} [])))", "problem": 56, "user": "52d7b0ade4b09f7907dd137c"}, {"code": "(fn [coll]\n  (reduce (fn [acc x] (if (some #(= % x) acc) acc (concat acc (list x)))) '() coll))", "problem": 56, "user": "51a97f7ae4b08d8ec191b827"}, {"code": "(fn p56\n  [coll]\n  (let [doit (fn doit [seen v more]\n               (cond\n                (not (contains? (set seen) v))\n                  (recur (conj seen v) (first more) (rest more))\n                (not (empty? more))\n                  (recur seen (first more) (rest more))\n                :else\n                  (filter #(not (nil? %)) seen)))]\n    (doit [] (first coll) (rest coll))))", "problem": 56, "user": "4e7d4544535db169f9c796d0"}, {"code": "(fn dist [ddl]\n(loop [s ddl, seen #{}, final []]\n            (if (empty? s)\n                final\n              (recur (rest s)\n                     (merge seen (first s))\n                     (if (contains? seen (first s))\n                         final\n                       (conj final (first s)))))))", "problem": 56, "user": "52d340ebe4b099d49816f0c1"}, {"code": "(fn mydistinct \n        ([xs] (mydistinct (first xs) (rest xs) []))\n        ([x xs acc]\n           (if (empty? xs)\n             acc\n             (loop [xs' xs\n                  rst []]\n               (if (empty? xs')\n                 (mydistinct (first rst) rst (conj acc x))\n                 (if (= (first xs') x)\n                   (recur (rest xs') rst)\n                   (recur (rest xs') (conj rst (first xs')))))))))", "problem": 56, "user": "52c58561e4b0c2d177d620f8"}, {"code": "#(keep-indexed (fn [idx z ]  (if (not-any? (fn [y]  (= y z)) (take idx  %)) z)) %)", "problem": 56, "user": "52d91703e4b09f7907dd13a0"}, {"code": "(fn [coll]\n  (loop [c coll seen []]\n    (if-let [f (first c)]\n      (if (some (partial = f) seen)\n        (recur (rest c) seen)\n        (recur (rest c) (conj seen f)))\n      seen)))", "problem": 56, "user": "50be9b4ae4b00fb48fed2ef6"}, {"code": "(fn dist [x](when-let[s (seq x)](cons (first s) (remove #(= (first s) %)(dist( rest s))))))", "problem": 56, "user": "52bbd09ee4b07a9af57922ee"}, {"code": "(fn find-distinct[a-seq]\n   (reduce (fn [acc x] (if (boolean (some #(= x %) acc)) acc (conj acc x)) ) [] a-seq)\n )", "problem": 56, "user": "52763696e4b03e8d9a4a74d7"}, {"code": "reduce #(if ((set %) %2) % (conj % %2)) []", "problem": 56, "user": "5256627ce4b0541d1855ba1a"}, {"code": "#(reduce (fn [acc val] (if (some #{val} acc) acc (conj acc val))) [] %)", "problem": 56, "user": "52c1f404e4b07a9af5792370"}, {"code": "(fn m [q]\n  (loop [l q result []]\n    (if (empty? l)\n      result\n      (if ((into #{} result) (first l))\n        (recur (rest l) result)\n        (recur (rest l) (conj result (first l)))))))", "problem": 56, "user": "52b35a6ee4b0c58976d9ad07"}, {"code": "(fn [coll]\n  (reduce #(if (some #{%2} %1) %1 (conj %1 %2))\n          [] coll))", "problem": 56, "user": "52c672e2e4b0c2d177d6210e"}, {"code": "#(reduce (fn[s e]\n           (if (some (fn[x](= x e)) s)\n             s\n             (conj s e))) [] %)", "problem": 56, "user": "51b41150e4b0f094dd986fac"}, {"code": "(fn [xs] (reduce #(if (some #{%2} %) % (conj % %2)) [] xs))", "problem": 56, "user": "4ee75ec2535d93acb0a66867"}, {"code": "reduce #(if ((set %) %2) % (conj % %2)) []", "problem": 56, "user": "52d10680e4b07d0d72b273c3"}, {"code": "(fn[x] (reduce (fn[col part] (if (contains? (set col) part) col (conj col part))) [] x))", "problem": 56, "user": "52d36f60e4b099d49816f0c2"}, {"code": "(fn [c]\n    (loop [seen #{}\n           c c\n           ret []]\n      (cond\n       (empty? c) ret\n       (contains? seen (first c)) (recur seen (rest c) ret)\n       :else (recur (conj seen (first c)) (rest c) (conj ret (first c))))))", "problem": 56, "user": "52d6a9c2e4b09f7907dd1365"}, {"code": "(fn [s]\n  (reduce #(if ((set %1) %2) %1 (conj %1 %2)) [] s))", "problem": 56, "user": "52cc4fd6e4b07d0d72b27360"}, {"code": "(fn [col] (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] col))", "problem": 56, "user": "52d00832e4b07d0d72b273b4"}, {"code": "(fn [coll]\n  (last\n    (reduce\n     (fn [[lookup out] x]\n       (if (nil? (lookup x))\n         [(conj lookup x) (conj out x)]\n         [lookup out]))\n     [#{} []]\n     coll)))", "problem": 56, "user": "52dad8bde4b09f7907dd13be"}, {"code": "(fn\n  [s]\n  (sort-by #(.indexOf s %) (keys (frequencies s))))", "problem": 56, "user": "52d39acce4b099d49816f0c7"}, {"code": "#(if (apply distinct? %) % (keys (frequencies %)))", "problem": 56, "user": "52d66ca0e4b09f7907dd135c"}, {"code": "(letfn [(work [x] \n          (reduce \n           (fn [[seen acc] item] \n             [(conj seen item) (if (seen item) \n                                 acc \n                                 (conj acc item))]) \n           [#{} []] \n           x))]\n  #(second (work %)))", "problem": 56, "user": "52c4af71e4b0c2d177d620e1"}, {"code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "problem": 56, "user": "52e59ca5e4b09f7907dd1464"}, {"code": "(fn [coll]\n  (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] coll))", "problem": 56, "user": "51ac7e9be4b09397d510976f"}, {"code": "(fn [c] (reduce #(if (some #{%2} %) % (conj % %2)) [] c))", "problem": 56, "user": "4e1047ad535d04ed9115e7bf"}, {"code": "reduce #(if (some (fn [x] (= %2 x)) %) % (conj % %2)) []", "problem": 56, "user": "522eb5cce4b01cdb292c5f0c"}, {"code": "(fn i [col]\n   (if (empty? col) []\n       (cons (first col) (i (remove #(= (first col) %) col)))))", "problem": 56, "user": "52c25645e4b07a9af579237d"}, {"code": "(fn [l]\n  (->\n   (reduce (fn [[list seen] elem]\n             (if (seen elem)\n               [list seen]\n               [(conj list elem) (conj seen elem) ]))\n           [[] #{}] l)\n   first))", "problem": 56, "user": "52e6351ae4b09f7907dd146e"}, {"code": "(fn [xs] (loop [xs (seq xs) s #{} r []]\n           (if xs\n             (if (contains? s (first xs)) \n               (recur (next xs) s r)\n               (recur (next xs) (conj s (first xs)) (conj r (first xs))))\n             r)))", "problem": 56, "user": "4ef9c8f9535dced4c769f26b"}, {"code": "(fn [s]\n  (loop [in s\n         out []\n         seen #{}]\n    (if (seq in)\n      (let [[a & bs] in]\n        (if (seen a)\n          (recur bs out seen)\n          (recur bs (conj out a) (conj seen a))))\n      out)))", "problem": 56, "user": "52d3f666e4b09f7907dd1327"}, {"code": "#(reduce (fn [a x]\n              (if (some #{x} a)\n                a\n                (conj a x)))\n            [] %)", "problem": 56, "user": "51a10b2ce4b0b292b01ee3fe"}, {"code": "#(reduce (fn [v x] (if (some (partial = x) v) v (conj v x))) [] %)", "problem": 56, "user": "52d809bde4b09f7907dd1384"}, {"code": "(fn ddistinct\n  ([coll] (ddistinct coll []))\n  ([coll seen]\n   (if (empty? coll)\n     seen\n     (if (nil? (some #{(first coll)} seen))\n       (ddistinct (rest coll) (conj seen (first coll)))\n       (ddistinct (rest coll) seen)))))", "problem": 56, "user": "52efd3d9e4b05e3f0be25ed4"}, {"code": "(fn [data] \n  (last \n    (reduce (fn [[seen res] val]\n              [(conj seen val)\n               (if (seen val) res (conj res val))])          \n            [ #{} []] data)))", "problem": 56, "user": "51a584c7e4b051b01d55f44e"}, {"code": "(fn my-distinct\n  ([v] (my-distinct v []))\n  ([[f & r] acc] (if (nil? f) acc\n             (if (nil? (some #{f} acc))\n               (recur r (conj acc f))\n               (recur r acc)))))", "problem": 56, "user": "50c2fbebe4b00e537d00253c"}, {"code": "(fn unique\n  [s]\n  (reduce (fn [acc i]\n            (if (or (empty? acc)\n                    (not-any? #(= % i) acc))\n              (conj acc i)\n              acc))\n          []\n          s))", "problem": 56, "user": "52dd6cc8e4b09f7907dd13e2"}, {"code": "#(loop [in % out [(first in)]]\n   (if (empty? in)\n     out\n     (if (contains? (set out) (first in))\n       (recur (rest in) out)\n       (recur (rest in) (conj out (first in))))))", "problem": 56, "user": "52f07ccee4b05e3f0be25edf"}, {"code": "(fn  [xs] (reverse (first (reduce \n                                 (fn [[r s] x] (if (s x) [r s] [(cons x r) (conj s x)] ))  \n                                 ['() #{}] xs))))", "problem": 56, "user": "4e3a9dae535deb9a81d77f4a"}, {"code": "reduce (fn [r x] (if (some #(= % x) r) r (conj r x))) []", "problem": 56, "user": "52e3e6a8e4b09f7907dd1448"}, {"code": "(fn remove-dups [s]\n  (if (empty? s)\n    s\n    (cons\n      (first s)\n      (remove-dups (remove #(= (first s) %) s)))))", "problem": 56, "user": "52ec1dfbe4b0705949c4444b"}, {"code": "(fn [xs] (second (reduce (fn [[se li] n] [(conj se n) (if (contains? se n) li (conj li n))]) [#{} []] xs)))", "problem": 56, "user": "52f10094e4b05e3f0be25ee8"}, {"code": "#(first\n  (reduce\n    (fn [[coll unique] e]\n      (if (contains? unique e)\n        [coll unique]\n        [(conj coll e) (conj unique e)]))\n    [[] #{}]\n    %))", "problem": 56, "user": "50d882d4e4b01f0871336e69"}, {"code": "(fn [coll]\n  (loop [result-coll []\n         remaining-coll coll]\n    (if (zero? (count remaining-coll))\n      result-coll\n      (if (nil? (some (set (take 1 remaining-coll)) result-coll))\n        (recur (conj result-coll (first remaining-coll)) (rest remaining-coll))\n        (recur result-coll (rest remaining-coll))))))", "problem": 56, "user": "52d9aaa1e4b09f7907dd13ae"}, {"code": "(fn [s]\n  (mapcat \n    #(keys \n      (group-by identity %)\n    ) \n    (partition-all 32 s)\n  )\n)", "problem": 56, "user": "52f1bc81e4b05e3f0be25eef"}, {"code": "(fn [coll]\n  (reduce\n   (fn [in-vec from-coll]\n     (if (some #{from-coll} in-vec)\n       in-vec\n       (conj in-vec from-coll)))\n   [] coll))", "problem": 56, "user": "527a69cee4b03e8d9a4a755d"}, {"code": "(fn own-distinct [v]\n  (loop [result [(first v)], input (rest v)]\n   (if (empty? input)\n     result\n     (let [elem (first input)\n           is-in-r (.indexOf result elem)]\n     (recur \n       (if (= -1 is-in-r) (conj result elem) result) \n       (rest input))\n     ))))", "problem": 56, "user": "52cf084ce4b07d0d72b27399"}, {"code": "(fn [l] (reduce \n         (fn [a b]\n           (if \n             (some \n              (hash-set b) a) \n             a \n             (conj a b)\n             )) \n          [] l))", "problem": 56, "user": "52eee533e4b05e3f0be25ecb"}, {"code": "(fn unique [c]\n  (loop [s (seq c)\n         table #{}\n         result '()]\n    (let [f (first s) r (rest s)]\n      (cond\n       (empty? s) (reverse result)\n       (contains? table f) (recur r table result)\n       :else (recur r (conj table f) (conj result f))))))", "problem": 56, "user": "52f8f4d1e4b047fd55836fde"}, {"code": "#(reduce (fn [a b] (if (not (contains? (set a) b)) (conj a b) a)) [] %)", "problem": 56, "user": "525fea5ae4b03e8d9a4a7026"}, {"code": "(fn [coll]\n  (reduce (fn [c item]\n            (if (not-any? #(= % item) c) (conj c item) c))\n          []\n          coll))", "problem": 56, "user": "51ab4082e4b04e3dc0c27b31"}, {"code": "#(reduce (fn [l x] (if (some #{x} l) l (conj l x))) [] %)", "problem": 56, "user": "4efccd24535de96065cf5080"}, {"code": "(fn [xs] (second (reduce #(if (contains? (%1 0) %2) %1 (do [(conj (%1 0) %2) (conj (%1 1) %2) ])) [#{} []] xs)))", "problem": 56, "user": "52dc2bc8e4b09f7907dd13ca"}, {"code": "(fn [x]\n  (sort-by (fn [l](.indexOf x l)) \n           ((comp   #(map first %) #(group-by identity %)) x)))", "problem": 56, "user": "5300aa1de4b0d8b024fd3710"}, {"code": "#(loop [[f & r] %\n          s #{}\n          o []]\n     (cond\n      (nil? f) o\n      (s f) (recur r s o)\n      :else (recur r (conj s f) (conj o f))))", "problem": 56, "user": "52d7f9a8e4b09f7907dd1381"}, {"code": "#(reduce (fn [new-list item] \n           (if (some #{item} new-list)\n             new-list\n             (concat new-list [item])))\n         (empty %) %)", "problem": 56, "user": "4f48f587e4b0d56e7bb92be2"}, {"code": "(fn [s] \n  (reduce (fn [ret x] (if (some #{x} ret) ret (conj ret x))) '[] s))", "problem": 56, "user": "4f47eab2e4b0d56e7bb92bc6"}, {"code": "#(first (reduce\n        (fn [[result seen] item]\n            (if (seen item)\n              [result seen]\n              [(conj result item) (conj seen item)]))\n        [[] #{}]\n        %))", "problem": 56, "user": "4f1c9652535d64f603146483"}, {"code": "(fn [s] (reduce (fn [res x] (if (some (fn [e] (= e x)) res)\n                                res\n                                (concat res [x])))\n                []\n                s))", "problem": 56, "user": "5300f68de4b0d8b024fd3714"}, {"code": "(fn remove-duplicates\n  ([in] (remove-duplicates in []))\n  ([in res] (if (empty? in)\n              res\n              (recur (rest in) (if (contains? (set res) (first in)) res (conj res (first in)))))))", "problem": 56, "user": "5300b750e4b0d8b024fd3711"}, {"code": "#(if (= (count (group-by (fn [n] n) %)) (count %)) % (keys (group-by (fn [n] n) %)))", "problem": 56, "user": "52fcfeeee4b047fd55837027"}, {"code": "(fn [xs] \n  (reduce (fn [res x] \n            (if (some #{x} res) \n              res \n              (conj res x))) \n          [] xs))", "problem": 56, "user": "528a2de7e4b0239c8a67ae71"}, {"code": "(fn[coll] \n    (loop[c coll r []] \n      (let[e (first c)] \n        (if(empty? c) \n          r \n          (recur (rest c) (if(some #(= e %) r) r (conj r e)))\n          )\n        )\n      )\n    )", "problem": 56, "user": "52e68e61e4b09f7907dd1479"}, {"code": "(fn [coll]\n   (loop [s (set coll) res [] coll coll]\n      (if (empty? coll)\n         res\n         (if (contains? s (first coll))\n            (recur (disj s (first coll)) (conj res (first coll)) (rest coll))\n            (recur s res (rest coll))))))", "problem": 56, "user": "4fb99483e4b081705acca2da"}, {"code": "(fn [coll]\n  (letfn [(distinct2 [xs acc] \n          (let [x (first xs)]\n          (cond\n            (empty? xs) acc\n            (some #{x} acc) (recur (rest xs) acc )\n            :else (recur (rest xs) (conj acc x)))))]\n  (distinct2 coll [])))", "problem": 56, "user": "52f4fae4e4b05e3f0be25f27"}, {"code": "(fn [a]\n  (reduce #(if (not (some #{%2} %1)) (conj %1 %2) %1) \n          []\n          a))", "problem": 56, "user": "50f53694e4b057d4c52de881"}, {"code": "(fn [l]\n  (letfn \n    [(inf \n      [s l]\n      (if (empty? l) []\n        (let [fl (first l) rr (inf (conj s fl) (rest l))]\n         (if (contains? s fl) rr (concat [fl] rr))\n          )))]\n    (inf #{} l)\n    ))", "problem": 56, "user": "52faec2ee4b047fd55837004"}, {"code": "(fn uniquify [items]\n  (loop [remaining items\n         seen #{}\n         acc ()]\n    (cond\n     (empty? remaining) (reverse acc)\n     (seen (first remaining)) (recur (rest remaining) seen acc)\n     :else (recur (rest remaining) (conj seen (first remaining)) (conj acc (first remaining))))))", "problem": 56, "user": "530578ede4b0d8b024fd3760"}, {"code": "(fn [coll] \n  ((fn step [[x & xs] seen] \n     (when x\n       (if (seen x) \n         (step xs seen)\n         (cons x (step xs (conj seen x)))))) \n   coll #{}))", "problem": 56, "user": "52b2d16ae4b0c58976d9acf8"}, {"code": "reduce \n; if any element in the current list matches %2 \n\t#(if (some #{%2} %)\t\t\n; Return the list\n\t\t%\n; Else, add %2 to the list\n\t\t(conj % %2)\n\t)\n\t[]", "problem": 56, "user": "52bf6946e4b07a9af5792334"}, {"code": "#(loop [ls % acc '() hash #{}]\n          (if (empty? ls)\n            (reverse acc)\n            (if (contains? hash (first ls))\n              (recur (rest ls) acc hash)\n              (recur (rest ls) (cons (first ls) acc) (conj hash (first ls))))))", "problem": 56, "user": "5301157ae4b0d8b024fd3717"}, {"code": "(fn [lst]\n  (let [tt (fn tt [xs seen]\n             (lazy-seq \n              ((fn [[f :as xs] seen]\n                 (when-let [s (seq xs)]\n                   (if (contains? seen f)\n                     (recur (rest s) seen)\n                     (cons f (tt (rest s) (conj seen f))))))\n               xs seen)))]\n    (tt lst #{} )))", "problem": 56, "user": "52fa4f48e4b047fd55836ff7"}, {"code": "(fn f[v]\n  (reduce #(if ((set %) %2) % (conj % %2)) [] v))", "problem": 56, "user": "52f818a6e4b047fd55836fcc"}, {"code": "(fn [xs]\n  (first\n   (reduce (fn [[result seen] x]\n             (if (seen x) \n               [result seen]\n               [(conj result x) (conj seen x)]))\n           [[] #{}]\n           xs)))", "problem": 56, "user": "4dad8a6dc9a9d6ed1399dc57"}, {"code": "(fn [s] (reduce (fn [acc x] (if (some (partial = x) acc) acc (conj acc x))) [] s))", "problem": 56, "user": "5302bb37e4b0d8b024fd3734"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "529b44afe4b02ebb4ef7509d"}, {"code": "(fn [s] (first\n    (reduce\n      (fn [[result dset] elt]\n        (if (contains? dset elt)\n          [result dset]\n          [(conj result elt) (conj dset elt)]))\n      [[] #{}] s)))", "problem": 56, "user": "53070615e4b02e821686979e"}, {"code": "(fn dstnct [args]\n  (let [valIdx (reverse (map-indexed (fn [idx itm] {itm idx}) args)) ;; reverse so last (itm, idx) is 1st occurence\n        valIdxMap (apply merge valIdx)\n        valIdxMapSorted (sort-by second valIdxMap)]\n    (map first valIdxMapSorted))\n  )", "problem": 56, "user": "52ffb7f2e4b0d8b024fd370b"}, {"code": "(fn [coll] (reduce (fn[acc el](if(some #(= el %) acc) acc (conj acc el) ))  [] coll))", "problem": 56, "user": "5307e4ece4b02e82168697a9"}, {"code": "reduce #(if (< -1 (.indexOf % %2)) % (conj % %2)) []", "problem": 56, "user": "51aefceee4b09397d5109797"}, {"code": "(fn [x]\n  (loop [acc []\n         my-x x]\n    (if (empty? my-x)\n      acc\n      (let [maybe-add-to-acc (if (some #(= (first my-x) %) acc)\n                                acc\n                                (conj acc (first my-x))\n                             )]\n        (recur maybe-add-to-acc (rest my-x))\n      )\n    )\n  )\n)", "problem": 56, "user": "5303a027e4b0d8b024fd3745"}, {"code": "(fn my-distinct [s]\n  (when (seq s)\n    (cons (first s) (my-distinct (remove #{(first s)} (rest s))))))", "problem": 56, "user": "5310e7aee4b08068f379ecdc"}, {"code": "(fn [coll]\n  (loop [n 0\n         result (empty coll)]\n    (if (= n (count coll))\n      (if (vector? coll)\n        result\n      \t(reverse result)\n      )\n      (recur (inc n)\n             (if (= (.indexOf result (nth coll n)) -1)\n               (conj result (nth coll n))\n               result\n             )\n      )\n    )\n  )\n)", "problem": 56, "user": "53153466e4b08068f379ed23"}, {"code": "(fn [v] (reduce (fn [x y] (if (some #(= y %) x) x (conj x y))) [] v))", "problem": 56, "user": "52d7a930e4b09f7907dd1379"}, {"code": "(fn [x]\n  (loop [x x\n         r []]\n    (if (empty? x)\n      \tr\n      \t(recur (rest x)\n               (if (some #(= % (first x)) r)\n                   r\n                   (conj r (first x)))))))", "problem": 56, "user": "52a5a8ebe4b0c58976d9abed"}, {"code": "(fn [coll]\n  (loop [to-do coll dist [] enc #{}]\n    (if (empty? to-do)\n      dist\n      (if (contains? enc (first to-do))\n        (recur (rest to-do) dist enc)\n        (recur (rest to-do) (conj dist (first to-do)) (conj enc (first to-do)))))))", "problem": 56, "user": "530e9729e4b08068f379ecbc"}, {"code": "(fn [xs]\n  (keep-indexed #(if (= % (.indexOf xs %2)) %2) xs)\n)", "problem": 56, "user": "52430d3ce4b076204b44faa5"}, {"code": "(fn [lat]\n   (reduce\n    (fn [a b]  \n      (if (some #{b} a) a (conj a b)))\n    []\n    lat))", "problem": 56, "user": "5125029de4b0ce9225d2ed3e"}, {"code": "(fn [s] (reduce (fn [d v] (if (some #(= v %) d) d (conj d v))) [] s))", "problem": 56, "user": "530e5469e4b08068f379ecb7"}, {"code": "(fn [s]\n  (reduce #(if ((set %1) %2) %1 (conj %1 %2)) [] s))", "problem": 56, "user": "52fb64b7e4b047fd55837009"}, {"code": "reduce (fn [result el] (if (some #(= el %) result) result (conj result el ) )) []", "problem": 56, "user": "52da20c7e4b09f7907dd13b3"}, {"code": "#(let [a %\n      b (map-indexed list a)\n      c (group-by last b)\n      d (sort-by (comp ffirst last) c)\n      e (keys d)\n      ]e\n  )", "problem": 56, "user": "4ff4bed0e4b0678c553fc35f"}, {"code": "reduce #(if (some #{%2} %1) %1 (conj %1 %2)) []", "problem": 56, "user": "52dd4fb4e4b09f7907dd13df"}, {"code": "(fn [xs] \n  (loop [xs xs\n         res []]\n    (if (empty? xs) \n      res\n      (if-not (some #{(first xs)} res)\n        (recur (rest xs) (conj res (first xs)))\n        (recur (rest xs) res)))))", "problem": 56, "user": "531bfb69e4b08068f379ed97"}, {"code": "#(loop [v %1 o []]\n   (if (nil? v)\n     o\n     (if (some #{(first v)} o)\n       (recur (next v) o)\n       (recur (next v) (conj o (first v)))\n     )\n   )\n )", "problem": 56, "user": "5176afd2e4b085adf681d889"}, {"code": "#(loop [accum [] x % blacklist '[]]\n      (let [fst (first x) rst (rest x)]\n        (cond (empty? x) accum\n              (some #{fst} blacklist) (recur accum rst blacklist)\n              :else (recur (conj accum fst) rst (conj blacklist fst)))))", "problem": 56, "user": "530cb5b8e4b02e82168697e0"}, {"code": "#(reduce \n       (fn [acc i]\n         (if (some #{i} acc)\n           acc\n           (conj acc i))) [] %1)", "problem": 56, "user": "52bc6cb2e4b07a9af57922f5"}, {"code": "(fn distinct* [coll]\n  (when-let [x (first coll)]\n    (cons x (distinct* (remove #(= x %) coll)))))", "problem": 56, "user": "5300158ae4b0d8b024fd370f"}, {"code": "(fn [coll] (loop [[x & more] coll seen #{} retr []]\n             (cond\n              (nil? x) retr\n              (seen x) (recur more seen retr)\n              :else (recur more (conj seen x) (conj retr x)))))", "problem": 56, "user": "532347dde4b09d4e7a9b54cc"}, {"code": "(fn f [xs]\n  (if (empty? xs) []\n      (cons (first xs) (f (filter #(not (= (first xs) %)) xs))\n    )\n  )\n)", "problem": 56, "user": "5323a414e4b09d4e7a9b54d1"}, {"code": "#(map first (sort-by second (map first (vals (group-by first (map vector % (range)))))))", "problem": 56, "user": "4f320253e4b0d6649770a08d"}, {"code": "#(->> %\n     (map list (range))\n     (group-by second)\n     (map second)\n     (map first)\n     (sort-by first)\n     (map second)\n     vec)", "problem": 56, "user": "5326c5f7e4b09d4e7a9b54f2"}, {"code": "(let [remove-all\n      (fn removeall [x y]\n        (if (empty? x)\n          x\n          (if (= (first x)\n                 y)\n            (removeall (rest x) y)\n            (cons (first x)\n                  (removeall (rest x) y)))))]\n  (fn finddist [z]\n    (if (empty? z)\n      []\n      (cons (first z)\n            (remove-all (finddist (rest z))\n                        (first z))))))", "problem": 56, "user": "52e17e66e4b09f7907dd1423"}, {"code": "(fn distinct-items [coll]\n  (reduce (fn [coll ele]\n \t      (if (some #(= ele %) coll)\n \t\t  coll\n \t\t  (concat coll [ele]))) [] coll))", "problem": 56, "user": "531c0619e4b08068f379ed98"}, {"code": ";;#(keys (frequencies %))\n(fn [l]\n     (reduce (fn [acc val]\n               (or (and (not-any? #(= % val) acc)\n                        (conj acc val))\n                   acc))\n             [] l))", "problem": 56, "user": "5005b57de4b0678c553fc46a"}, {"code": "#(second (reduce (fn [[s c] a] (if (contains? s a) [s c] [(conj s a) (conj c a)])) [#{} []] %))", "problem": 56, "user": "531f1e63e4b08068f379edc2"}, {"code": "(fn [coll] (loop [seen #{} coll coll res []] (if (empty? coll) res (let [x (first coll) xs (rest coll)] (if (contains? seen x) (recur seen xs res) (recur (conj seen x) xs (conj res x)))))))", "problem": 56, "user": "531f7a2de4b08068f379edc6"}, {"code": "#(if (= % (range 50))\n  (sort (keys (group-by identity %)))\n  (keys (group-by identity %)))", "problem": 56, "user": "52cb19abe4b07d0d72b27348"}, {"code": "(fn [z] (reduce (fn [acc e] (if (some #{e} acc) acc  (conj acc e))) [] z))", "problem": 56, "user": "52265e41e4b04e78ff2e1981"}, {"code": "(fn ddist [[x & xs]] \n   (if (empty? xs) \n     (if (nil? x) '() (list x))\n     (apply list x (ddist (filter #(not= % x) xs)))))", "problem": 56, "user": "531490bde4b08068f379ed17"}, {"code": "reduce (fn [result n ] \n          (cond (some (set result) [n]) result\n                :else (conj result n)\n                ) ) []", "problem": 56, "user": "52be0263e4b07a9af579230e"}, {"code": "#(reduce (fn [v x] (if ((set v) x) v (conj v x))) [] %)", "problem": 56, "user": "53315c78e4b019098a6f8b67"}, {"code": "(fn newdistinct [x]\n  (let [filteredconj (fn [coll elem]\n                       (if (some #{elem} coll)\n                         coll\n                         (conj coll elem)))]\n    (reduce filteredconj [] x)))", "problem": 56, "user": "532727bae4b09d4e7a9b54fa"}, {"code": "#(loop [[f & r] %1 s #{} res (empty %1)]\n   (cond (nil? f) res\n         (get s f) (recur r s res)\n         :else (recur r (conj s f) (concat res (list f)))))", "problem": 56, "user": "53300924e4b019098a6f8b55"}, {"code": "#(sort-by (fn [i] (.indexOf % i)) (map first (group-by identity %)))", "problem": 56, "user": "52f3af46e4b05e3f0be25f14"}, {"code": "(fn [xs]\n  (reverse\n    (second\n      (reduce (fn [[st acc] x]\n                (if (contains? st x)\n                  [st acc]\n                  [(conj st x) (conj acc x)]))\n              [#{} ()]\n              xs))))", "problem": 56, "user": "533696b9e4b0e30313ee6c7c"}, {"code": "reduce (fn [s e]\n            (if (some #(= % e) s)\n              s\n              (conj s e))) []", "problem": 56, "user": "5302ac7fe4b0d8b024fd3731"}, {"code": "#(reduce (fn [m i](if (some #{i} m) m (conj m i))) [] %)", "problem": 56, "user": "52570aeae4b0541d1855ba42"}, {"code": "(fn dedup [l]\n  (first\n   (reduce (fn [[lst visited] v]\n             (if (contains? visited v)\n               [lst visited]\n               [(conj lst v) (conj visited v)])) [[] #{}] l)))", "problem": 56, "user": "532b43c3e4b09d4e7a9b5531"}, {"code": "(fn uniq [xs]\n  (lazy-seq\n   (if-let [[x & xs] (seq xs)]\n     (cons x (remove #{x} (uniq xs))))))", "problem": 56, "user": "532ab0bde4b09d4e7a9b5527"}, {"code": "(fn [coll]\n  (loop [keyz #{} \n         coll coll \n         result []]\n    (if (empty? coll)\n      result\n      (let [el (first coll)]\n        (recur (conj keyz el) \n               (rest coll) \n               (if (nil? (get keyz el)) \n                 (conj result el)\n                 result))))))", "problem": 56, "user": "5336ca32e4b0e30313ee6c80"}, {"code": "#(last (reduce (fn [[s r] x]\n                 (if (s x)\n                   [s r]\n                   [(conj s x)\n                    (conj r x)]))\n               [#{} []]\n               %))", "problem": 56, "user": "53034738e4b0d8b024fd373e"}, {"code": "#(loop [acc [] rem %]\n   (let [a (first rem) b (rest rem)]\n     (if (empty? rem) acc\n         (recur (if (some #{a} acc) acc (conj acc a)) b))))", "problem": 56, "user": "52d1e364e4b0d9f9285948e7"}, {"code": "(comp second (partial reduce (fn [acc,e] (if ((first acc) e) acc (map #(conj % e) acc))) [#{} []]))", "problem": 56, "user": "533ab9abe4b0e30313ee6cbf"}, {"code": "(fn distinct-items [items]\n  (reduce (fn [x y] (if (nil? (some (fn [z] (= y z)) x)) (conj x y)\n                        x)) [] items))", "problem": 56, "user": "532631e1e4b09d4e7a9b54ea"}, {"code": "#((reduce (fn [[x s] y]\n            (if (nil? (s y))\n              [(conj x y) (conj s y)]\n              [x s]))\n          [[] #{}]\n          %) 0)", "problem": 56, "user": "533018b2e4b019098a6f8b56"}, {"code": "(fn [s]\n  (reduce (fn [seen new] (if (some #(= new %) seen)\n                           seen\n                           (conj seen new)))\n          []\n          s))", "problem": 56, "user": "51a3b135e4b0e77c4ca60bf6"}, {"code": "reduce (fn [arr item]\n         (if ((set arr) item)\n           arr\n           (conj arr item))) []", "problem": 56, "user": "5036eba7e4b0af0658af77a5"}, {"code": "(fn [c]\n   (reduce (fn [s x]\n             (if (>= (.indexOf s x) 0)\n               s\n               (concat s [x]))) [] c))", "problem": 56, "user": "506d5e4ce4b0a302964c5493"}, {"code": "(fn [se]\n  (let [alreadyin (fn [a b] (if (some #(= % b) a) true nil))\n        mydistinct (fn mydistinct [ds acc ind] \n                     (if (= ind (count ds)) acc\n                       (mydistinct ds\n                                    (if-not (alreadyin acc (nth ds ind)) \n                                      (conj acc (nth ds ind))\n                                      acc)\n                                    (inc ind))))]\n        (mydistinct se [] 0)))", "problem": 56, "user": "52747090e4b03e8d9a4a74a5"}, {"code": "(fn distinct1 [myseq]\n  (let [fn-accum (fn [x y]\n                   (let [seen-seq (get x :seen [])\n                         distinct-seq (get x :distinct [])]\n                     (if (some #{y} seen-seq)\n                       x\n                       (assoc x\n                         :seen (cons y seen-seq)\n                         :distinct (cons y distinct-seq)))))\n        distinct-map (reduce fn-accum {} myseq)]\n    (println distinct-map)\n    (reverse (distinct-map :distinct))))", "problem": 56, "user": "51f82769e4b09be9c177e527"}, {"code": "#(reduce (fn [accum v] (if ((set accum) v) accum (conj accum v))) [] %)", "problem": 56, "user": "533ee560e4b085b17e897d98"}, {"code": "(fn sieve [lst]\n  (if-not (empty? lst)\n    (cons (first lst)\n          (lazy-seq (sieve (filter #(not= (first lst) %) (rest lst))))\n          ))\n  )", "problem": 56, "user": "5281a445e4b0757a1b17143a"}, {"code": "(fn [lst]\n  ((fn [l res]\n     (if (empty? l) res\n       (if (contains? (into #{} res) (first l))\n         (recur (rest l) res)\n         (recur (rest l) (conj res (first l))))))\n   lst []))", "problem": 56, "user": "51da631be4b02ceefd947766"}, {"code": "(fn [coll]\n  (loop [l coll acc []]\n    (if (empty? l)\n      acc\n      (if (some #{(first l)} acc)\n        (recur (rest l) acc)\n        (recur (rest l) (conj acc (first l)))))))", "problem": 56, "user": "5341b141e4b00652c8746ecf"}, {"code": "(fn [xs]\n  (loop [dst []\n         src xs\n         cache #{}]\n    (if (empty? src)\n      (reverse dst)\n      (let [el (first src)]\n        (if (contains? cache el)\n          (recur dst (rest src) cache)\n          (recur (cons el dst) (rest src) (conj cache el)))))))", "problem": 56, "user": "525ab6cfe4b0cb4875a45cf9"}, {"code": "reduce (fn [s e]\n  (if (some #(= % e) s)\n    s\n    (conj s e)))\n[]", "problem": 56, "user": "50436470e4b034ff00315d23"}, {"code": "(fn [seq] \n          (let [indexed-seq (keep-indexed #(vector %1 %2) seq)]\n            (remove nil? \n                    (map #(let [idx (get % 0)  nth-item (get % 1)  first-n-minus-one-items (take idx seq)]   \n                            (if (some (fn[x](= nth-item x)) first-n-minus-one-items) nil nth-item ))  \n                         indexed-seq )\t\n             )\n           )\n        )", "problem": 56, "user": "530d1060e4b08068f379eca2"}, {"code": "#(loop [rslt [] a %]\n   (if a\n     (if (clojure.set/subset? (set (list (first a))) (set rslt))\n       (recur rslt (next a))\n       (recur (conj rslt (first a)) (next a)))\n     rslt))", "problem": 56, "user": "532bce35e4b09d4e7a9b5536"}, {"code": "(fn [stuff] (reduce (fn [got new] (if (some #{new} got) got (conj got new))) [] stuff))", "problem": 56, "user": "4fbd6210e4b081705acca303"}, {"code": "(fn dist [coll]\n (loop [remaining coll result []]\n   (if (empty? remaining)\n     result\n     (let [current (first remaining)\n           filtered (remove #(= current %) remaining)]\n     (recur filtered (conj result current))))))", "problem": 56, "user": "533f09e1e4b085b17e897d9a"}, {"code": "(fn my-distinct [[h & args]]\n  (when h\n    (cons h (lazy-seq (my-distinct (remove #{h} args))))))", "problem": 56, "user": "5054c853e4b0b1b9d1860eb3"}, {"code": "(fn d [xs]\n  (loop [acc [] [h & t] xs]\n    (cond\n     (nil? h) acc\n     (some #{h} acc) (recur acc t)\n     :else (recur (conj acc h) t))))", "problem": 56, "user": "52d2ca1ce4b099d49816f0b4"}, {"code": "#(loop [xs % ss (set %) rs []] \n   (if (empty? ss) \n     rs\n     (let [x (first xs)]\n       (recur\n        (rest xs)\n        (disj ss x)\n        (if (contains? ss x)\n          (conj rs x)\n          rs)))))", "problem": 56, "user": "53244c9de4b09d4e7a9b54db"}, {"code": "(fn [x]\n  (loop [rst x res []]\n    (if (empty? rst)\n      res\n      (recur (filter #(not= (first rst) %) rst) (conj res (first rst))))))", "problem": 56, "user": "53468f6ce4b084c2834f4a3f"}, {"code": "(fn [s]\n   (reduce (fn [v x] (if (some {x true} v) v (conj v x))) [] s))", "problem": 56, "user": "53224d45e4b09d4e7a9b54c0"}, {"code": "reduce (fn [l x] (if ((set l) x) l (conj l x))) []", "problem": 56, "user": "53460d02e4b084c2834f4a39"}, {"code": "#(first (reduce (fn [[r s] n]\n                 (if (contains? s n)\n                   [r s]\n                   [(conj r n) (conj s n)])) [[] #{}] %))", "problem": 56, "user": "4e705861535d5021c1a89635"}, {"code": "#(reduce\n  (fn [accum x]\n    (if (apply distinct? x accum)\n      (conj accum x) \n      accum\n    ))\n  [] %1\n)", "problem": 56, "user": "532cb6bbe4b019098a6f8b33"}, {"code": "reduce #(if (not (get (set %1) %2)) (conj %1 %2) %1) []", "problem": 56, "user": "53134005e4b08068f379ed07"}, {"code": "(fn [s] (sort-by #(.indexOf s %) (map #(first %) (group-by identity s))))", "problem": 56, "user": "5339af7de4b0e30313ee6cab"}, {"code": "#((fn f [l s]\n  (if (empty? l)\n    l\n    (if (contains? s (first l))\n      (f (rest l) s)\n      (cons (first l) (f (rest l) (conj s (first l))))\n    )\n  )\n) % (set []))", "problem": 56, "user": "5349ac2be4b084c2834f4a67"}, {"code": "(fn distinct-items [seq]\n  (loop [accu []\n         set #{}\n         seq seq]\n    (if (empty? seq)\n      accu\n      (recur (if (contains? set (first seq)) accu (conj accu (first seq)))\n             (conj set (first seq))\n             (rest seq)))))", "problem": 56, "user": "4e82c062535db62dc21a62cc"}, {"code": "(fn [coll]\n  (reduce (fn [r x] (if (some #(= x %) r) r (conj r x)))\n          [] coll))", "problem": 56, "user": "4fceda40e4b03432b189f407"}, {"code": "(fn dist [xs]\n  (loop [item-set #{} res [] fst (first xs) rst (rest xs)]\n    (if (empty? rst)\n      (if (contains? item-set fst)\n        res\n        (conj res fst))\n      (recur (conj item-set fst)\n             (if (contains? item-set fst) res (conj res fst))\n             (first rst)\n             (rest rst)))))", "problem": 56, "user": "534941d1e4b084c2834f4a60"}, {"code": "reduce #(if (some (partial = %2) %) % (conj % %2)) []", "problem": 56, "user": "534bde26e4b084c2834f4a81"}, {"code": "(fn distink [coll]\n  (let [s (seq coll) a (first s)]\n    (when s\n      (cons a (distink (filter #(not= a %) (rest s)))))))", "problem": 56, "user": "50fc299ee4b0d10d794c19f2"}, {"code": "(fn [s] \n    (reverse\n     (loop [result ()\n            seen #{}\n            l s]\n       (cond \n        (empty? l) result\n        (contains? seen (first l)) (recur result seen (rest l))\n        :else (recur (cons (first l) result) \n                     (conj seen (first l))\n                     (rest l))))))", "problem": 56, "user": "53487737e4b084c2834f4a59"}, {"code": "(fn [s]\n  (let [contains (fn [l i]\n                   (some #(= i %) l))]\n    (reduce (fn [res i]\n            (if (contains res i)\n              res (conj res i)))\n          [] s)))", "problem": 56, "user": "5348236ee4b084c2834f4a54"}, {"code": "#(reduce (fn [a b]\n           (if (some #{b} a) a (conj a b)))\n         []\n         %)", "problem": 56, "user": "52eb400ee4b0705949c4443b"}, {"code": "(fn [s]\n  (loop [r [] s s]\n    (if (first s)\n      (recur (if (some #{(first s)} r) r (conj r (first s))) (next s))\n      (vec r))))", "problem": 56, "user": "53219cece4b09d4e7a9b54b7"}, {"code": "(fn mf1 [x]\n  (reduce (fn [acc e]\n            (if-not(some #(= e %) acc)\n              (conj acc e)\n              acc))\n          [] x))", "problem": 56, "user": "52d6664be4b09f7907dd1359"}, {"code": "(fn [coll] \n  ((fn step [[x & xs] seen] \n     (when x\n       (if (seen x) \n         (step xs seen)\n         (cons x (step xs (conj seen x)))))) \n   coll #{}))", "problem": 56, "user": "5349da55e4b084c2834f4a68"}, {"code": "(fn [col]\n  (reduce (fn \n            ([x] x)\n            ([col item]\n             (if (some #(= item %) col)\n               col\n               (conj col item)\n               )))\n          [] col))", "problem": 56, "user": "534815bde4b084c2834f4a53"}, {"code": "(fn [sq]\n        (letfn [(inner [-seq -col -set]\n                  (cond (empty? -seq) -col\n                        (-set (first -seq)) (recur (rest -seq) -col -set)\n                        :else (recur (rest -seq) (conj -col (first -seq)) (conj -set (first -seq)))))]\n          (inner sq [] #{})))", "problem": 56, "user": "534e9ed4e4b084c2834f4ab8"}, {"code": "#(sort-by \n\t\t(fn [x] (.indexOf % x))\n\t\t(into [] (into #{} %))\n\t)", "problem": 56, "user": "51a38e3be4b0e77c4ca60bf3"}, {"code": "reduce #(if ((set %) %2) % (conj % %2)) []", "problem": 56, "user": "526a7025e4b03e8d9a4a722a"}, {"code": "(fn dis [xs]\n  (reduce (fn [s e]\n            (if (some #(= % e) s)\n              s\n              (conj s e)))\n          [] xs))", "problem": 56, "user": "531d34cfe4b08068f379edac"}, {"code": "(fn [l]\n  (reduce #(if (some #{%2} %) % (conj % %2)) [] l))", "problem": 56, "user": "5336a339e4b0e30313ee6c7d"}, {"code": "(fn [xs] (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] xs))", "problem": 56, "user": "5312cdaae4b08068f379ed03"}, {"code": "#(loop [xs % found #{} out []]\n   (if-let [[x & xs] (seq xs)]\n     (if (contains? found x)\n       (recur xs found out)\n       (recur xs (conj found x) (conj out x)))\n     out))", "problem": 56, "user": "5357b241e4b04ce2eb3ed282"}, {"code": "(fn [c]\n  (loop [r [] s c]\n    (if (> (count s) 0)\n      (if (contains? (zipmap r (repeat 0)) (first s))\n        (recur r (next s))\n        (recur (conj r (first s)) (next s)))\n      r)))", "problem": 56, "user": "51ab70c3e4b04e3dc0c27b33"}, {"code": "(fn [c]\n  (loop [c c, r [], hits #{}]\n    (cond \n     (empty? c) r\n     (contains? hits (first c)) (recur (rest c) r hits)\n     :else (recur (rest c) (conj r (first c)) (conj hits (first c)))\n     )))", "problem": 56, "user": "53597288e4b04ce2eb3ed29c"}, {"code": "(fn [s]\n  ((fn [s r m]\n     (cond\n      (empty? s) r\n      (m (first s)) (recur (rest s) r m)\n      :else (recur (rest s)\n                   (concat r [(first s)])\n                   (conj m (first s)))))\n   s [] #{}))", "problem": 56, "user": "535d910ae4b04ce2eb3ed2c5"}, {"code": "(fn [col]\n  (reduce (fn [acc n]\n            (if (some #(= n %) acc)\n              acc\n              (conj acc n)))\n          [] col))", "problem": 56, "user": "53286389e4b09d4e7a9b5504"}, {"code": "(fn my-distinct [c]\n  (loop [result [] rest c]\n    (if (= [] rest)\n      result\n      (recur\n       (if (some #(= % (first rest)) result) result (conj result (first rest)))\n       (drop 1 rest)))))", "problem": 56, "user": "4ddb696b535d02782fcbe9fa"}, {"code": "(fn [x]\n  ((fn aux [m [h & t]]\n     (cond\n      (and (nil? t) (m h)) []\n      (nil? t) [h]\n      (m h) (aux m t)\n      :else (concat [h] (aux (assoc m h true) t)))\n     ) {} x))", "problem": 56, "user": "535d2533e4b04ce2eb3ed2bc"}, {"code": "reduce\n  (fn [coll e]\n    (if (some #(= e %) coll)\n      coll\n      (conj coll e)))\n  []", "problem": 56, "user": "53513d28e4b084c2834f4ae3"}, {"code": "#(reduce (fn [acc x] (if (not (some #{x} acc)) (conj acc x) acc)) [] %)", "problem": 56, "user": "53307da1e4b019098a6f8b5e"}, {"code": "(fn rm-dups [coll]\n  (if (empty? coll)\n    coll\n    (cons (first coll) (rm-dups (filter #(not= (first coll) %) (rest coll))))))", "problem": 56, "user": "5356e04fe4b04ce2eb3ed271"}, {"code": "(fn [coll]\n  (sort-by #(.indexOf coll %) (keys (group-by identity coll))))", "problem": 56, "user": "5225271fe4b01819a2de42f9"}, {"code": "(fn [col]\n    (loop [d [] seen #{} xs col]\n      (if \n        (empty? xs)\n        d\n        (recur (if (contains? seen (first xs)) d (conj d (first xs))) (conj seen (first xs)) (rest xs)))))", "problem": 56, "user": "52a32876e4b04e0c58e87bfb"}, {"code": "(fn dist[xs]\n  (if (empty? xs) xs\n    (let [x (first xs)] \n      (cons x (dist (filter #(not (= % x)) (next xs)))))))", "problem": 56, "user": "5160195ae4b0e2be8aa20be3"}, {"code": "#(loop [ s1 % s2 '() ] \n   (if (empty? s1) \n     (reverse s2)\n     (recur (rest s1) (if (some (partial = (first s1)) s2) \n                        s2 \n                        (cons (first s1) s2)))))", "problem": 56, "user": "535a18e3e4b04ce2eb3ed2a4"}, {"code": "(fn [s] (reduce #(if (contains? (set %1) %2) %1 (conj %1 %2)) [] s))", "problem": 56, "user": "51c3c6a6e4b0851ac09658f8"}, {"code": "(fn my-distinct\n  [col]\n  (loop [col col\n         new-col []]\n    (if (empty? col)\n      (vec new-col)\n      (recur (rest col) (if (some #(= (first col) %) new-col) new-col (conj new-col (first col)))))))", "problem": 56, "user": "5369d072e4b0243289761ea1"}, {"code": "(fn [s]\n  (loop [result []\n         tail (seq s)]\n    (if (empty? tail)\n      result\n      (if (some #(= % (first tail)) result)\n        (recur result (rest tail))\n        (recur (conj result (first tail)) (rest tail))))))", "problem": 56, "user": "5348cab4e4b084c2834f4a5e"}, {"code": "(fn dstnct [coll]\n  (reduce (fn [ret x]\n            (if (some (fn [y] (= x y)) ret)\n              ret\n              (conj ret x))) [] coll))", "problem": 56, "user": "5368a275e4b0243289761e8f"}, {"code": "#(reduce (fn [s x] (if (some #{x} s) s (conj s x))) [] %)", "problem": 56, "user": "536973e5e4b0243289761e9e"}, {"code": "(fn [xs]\n  (second (reduce (fn [[bl xs] x] (if (bl x)\n                                    [bl xs]\n                                    [(conj bl x) (conj xs x)]))\n                  [#{} []] xs)))", "problem": 56, "user": "536d83cee4b0fc7073fd6e5e"}, {"code": "#(loop [s {}, l %, o ()] (cond (s (first l)) (recur s (rest l) o) (empty? l) o true (recur (assoc s (first l) true) (rest l) (concat o (list (first l))))))", "problem": 56, "user": "52bdf6bde4b07a9af579230d"}, {"code": "(fn [s]\n  (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] s))", "problem": 56, "user": "53523ae0e4b084c2834f4aee"}, {"code": "(fn [xs] (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] xs))", "problem": 56, "user": "536aa86de4b0243289761eb1"}, {"code": "(let [collect-uniques (fn [x uniques others]\n                          (cond\n                           (nil? x)\n                           uniques\n\n                           (some #(= % x) uniques)\n                           (recur\n                            (first others)\n                            uniques\n                            (rest others))\n\n                           :else\n                           (recur\n                            (first others)\n                            (conj uniques x)\n                            (rest others))\n                           ))]\n    (fn [xs]\n      (collect-uniques (first xs) [] (rest xs))))", "problem": 56, "user": "4feaa579e4b0140c20fb9c0b"}, {"code": "(fn [s]\n  (loop [s s\n         accum []]\n    (if (empty? s)\n      accum\n      (if (some #(= (first s) %) accum)\n        (recur (rest s) accum)\n        (recur (rest s) (conj accum (first s)))))))", "problem": 56, "user": "53527551e4b084c2834f4af0"}, {"code": "(fn [inv]\n  (loop [v inv out []]\n    \n    (if (empty? v)\n      out\n      (let [h (first v) t (rest v) d (if (some #{h} out) (do (println \"test\") out) (conj out h))]\n        (recur t d)\n      ))))", "problem": 56, "user": "532a111ee4b09d4e7a9b5520"}, {"code": "(fn [x] \n  ((fn d [s covered acc] \n    (cond\n      (empty? s) (reverse acc) \n      (covered (first s)) (d (rest s) covered acc)      \n      :else (d (rest s) (merge covered (hash-map (first s) (first s))) (cons (first s) acc))\n     )\n    ) x {} '())\n  )", "problem": 56, "user": "535197f2e4b084c2834f4ae4"}, {"code": "#(loop [vin % vo []]\n   (if (empty? vin)\n     (reverse vo)\n     (let [el (first vin)]\n       (if (some (fn [sq] (= el sq)) vo)\n         (recur (rest vin) vo)\n         (recur (rest vin) (cons el vo))\n         )\n       )\n     )\n   )", "problem": 56, "user": "4fa9da14e4b081705acca1e7"}, {"code": "(fn distinct*\n    ([coll] (distinct* #{} [] coll))\n    ([seen acc [h & t :as all]]\n     (cond\n       (empty? all)\n       acc\n       (contains? seen h)\n       (distinct* seen acc t)\n       :else\n       (distinct* (conj seen h) (conj acc h) t))))", "problem": 56, "user": "5370ef22e4b0fc7073fd6ea0"}, {"code": "reduce #(if (some #{%2} %1) %1 (conj %1 %2)) []", "problem": 56, "user": "51d4ed02e4b013d740b70dec"}, {"code": "reduce (fn [x y] (if (some #{y} x) x (conj x y))) []", "problem": 56, "user": "53705e2de4b0fc7073fd6e96"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "52f53589e4b05e3f0be25f2c"}, {"code": "reduce (fn [ys x] \n             (if ((set ys) x)\n               ys\n               (conj ys x))) []", "problem": 56, "user": "53720c5ce4b0493c815db704"}, {"code": "(fn my-distinct\n  [coll]\n  (sort-by (fn [i] (.indexOf coll i)) (keys (group-by identity coll))))", "problem": 56, "user": "53436e60e4b084c2834f4a19"}, {"code": "(fn [s] (sort-by #(.indexOf s %) (keys (group-by identity s))))", "problem": 56, "user": "5252b59de4b0541d1855b8cf"}, {"code": "reduce #(if ((set %) %2) % (conj % %2)) []", "problem": 56, "user": "536e0930e4b0fc7073fd6e66"}, {"code": "(partial\n  reduce #(if (some (partial = %2) %1) %1 (conj %1 %2)) [] )", "problem": 56, "user": "53691dc7e4b0243289761e97"}, {"code": "(fn [xs] \n  (loop [[x & tail] xs, acc []]\n    (cond (nil? x) acc\n          (some #(= % x) acc) (recur tail acc)\n          :else (recur tail (conj acc x)))))", "problem": 56, "user": "536ca4bde4b0fc7073fd6e49"}, {"code": "(fn [coll]\n  (reduce #(if (some #{%2} %1) %1 (conj %1 %2))\n          []\n          coll))", "problem": 56, "user": "53121863e4b08068f379ecf3"}, {"code": ";(fn [coll] (seq (into #{} coll)))\n;(fn [coll] (keys (group-by identity coll)))\n(fn [coll]\n  (reduce (fn [out next]\n            (if (apply distinct? next out) (conj out next) out))\n          [] coll))", "problem": 56, "user": "536a37efe4b0243289761eaa"}, {"code": "reduce #(if (some #{%2} %1) %1 (conj %1 %2)) []", "problem": 56, "user": "5376966ae4b06839e8705e27"}, {"code": "reduce (fn [coll e] (if (some #(= % e) coll) coll (conj coll e))) []", "problem": 56, "user": "50fac9e3e4b07934dda8b0d1"}, {"code": "(fn [s]\n  (loop [sq   s\n         seen #{}\n         acc []]\n    (let [fst-sq (first sq)]\n      (cond\n       (empty? sq)             acc\n       ;; if it has been seen\n       (contains? seen fst-sq) (recur (rest sq) seen acc)\n       ;; if not, add to acc\n       :else                   (recur (rest sq) (conj seen fst-sq) (conj acc fst-sq))))))", "problem": 56, "user": "53415755e4b00652c8746ecd"}, {"code": "(fn [coll]\n\t(reduce (fn [head tail]\n\t\t(if (some #(= % tail) head)\n\t\t\thead\n\t\t\t(conj head tail))) [] coll))", "problem": 56, "user": "5379306fe4b06839e8705e50"}, {"code": "(fn [v]\n  (loop [v v seen #{} rv []]\n    (if (empty? v)\n      rv\n      (if (contains? seen (first v))\n        (recur (rest v) seen rv)\n        (recur (rest v) (conj seen (first v)) (conj rv (first v)))))))", "problem": 56, "user": "534f13b2e4b084c2834f4ac4"}, {"code": "(fn [coll] (reverse (reduce #(if (some (partial = %2) %1) %1 (cons %2 %1) ) [] coll)))", "problem": 56, "user": "536f5900e4b0fc7073fd6e7b"}, {"code": "(fn [xs]\n  (reduce #(if (contains? (into #{} %1) %2) %1 (conj %1 %2)) [] xs))", "problem": 56, "user": "5370f8ede4b0fc7073fd6ea2"}, {"code": "(fn [s]\n  (reduce #(if (some #{%2} %) % (conj % %2))\n          [] s))", "problem": 56, "user": "524b0645e4b09eba1c0223bf"}, {"code": "(fn [coll]\n    (reduce (fn [acc x] \n              (if (some #{x} acc) \n                acc \n                (conj acc x))) [] coll))", "problem": 56, "user": "5317d78ee4b08068f379ed63"}, {"code": "(fn [coll]\n  (let [in? #(contains? (set %1) %2)]\n    (loop [uniq ()\n           c coll]\n        (if (empty? c)\n          (reverse uniq)\n          (if (in? uniq (first c))\n            (recur uniq (rest c))\n            (recur (conj uniq (first c)) (rest c)))))))", "problem": 56, "user": "5361a4f2e4b0243289761e47"}, {"code": "(fn [xs]\n  (->> (reductions\n        (fn [[_ acc _] x] \n          [(not (contains? acc x))\n           (conj acc x)\n           x])\n        [false #{} nil]\n        xs)\n       (filter first)\n       (map last)))", "problem": 56, "user": "53800d99e4b06839e8705ebd"}, {"code": "#(reduce (fn [l e] (if (some (fn [v] (= e v)) l) l (conj l e))) [] %)", "problem": 56, "user": "537e745ae4b06839e8705ea6"}, {"code": "(fn [coll]\n  (loop [coll coll\n         d []]\n    (if (empty? coll)\n      d\n      (recur (filter #(not= (first coll) %) coll) (conj d (first coll))))))", "problem": 56, "user": "53778b90e4b06839e8705e36"}, {"code": "(fn _distinct [seqn]\n\t(reduce (fn [accum x]\n              (if (some #{x} accum)\n                accum\n                (conj accum x)))\n            []\n            seqn))", "problem": 56, "user": "53834ed3e4b06839e8705edb"}, {"code": "#(loop [xs % s #{} v []]\n   (cond\n    (empty? xs) v\n    (contains? s (first xs)) (recur (rest xs) s v)\n    :else (recur (rest xs) (conj s (first xs)) (conj v (first xs)))))", "problem": 56, "user": "537f4652e4b06839e8705eb1"}, {"code": "(fn [coll]\n   (nth\n    (reduce (fn [acc i]\n              (let [f (nth acc 0)\n                    r (nth acc 1)]\n                (if-not (contains? f i)\n                  (vector (assoc f i 1) (conj r i))\n                  acc))) [{} []] coll)\n    1))", "problem": 56, "user": "535eaa73e4b04ce2eb3ed2d4"}, {"code": "#(reduce (fn [s, e] (if (some (fn [i] (= e i)) s) s (conj s e))) [] %)", "problem": 56, "user": "53820087e4b06839e8705ecf"}, {"code": "#(letfn [(f [[h & t] discol]\n            (if h \n              (if (some #{h} discol)\n                (recur t discol)\n                (recur t (conj discol h)))\n              discol))]\n   (f % []))", "problem": 56, "user": "5371167fe4b0fc7073fd6ea7"}, {"code": "#(reduce (fn [s t]\r\n            (if-not (some #{t} s)\r\n             (conj s t)\r\n              s\r\n              )) [] %)", "problem": 56, "user": "51a54fb4e4b0def3c5c586a3"}, {"code": "(fn [s] (loop [a s b []] (if (empty? a) b (recur (rest a) (if (not= 0 (count (filter #(= % (first a)) b))) b (conj b (first a)))))))", "problem": 56, "user": "536f2faee4b0fc7073fd6e79"}, {"code": "(fn [coll]\n  (reduce (fn [acc elem] (if (some #{elem} acc) acc (conj acc elem))) [] coll))", "problem": 56, "user": "532c9dc9e4b019098a6f8b30"}, {"code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "problem": 56, "user": "4ec53f8c535d6d7199dd368b"}, {"code": "reduce #(if (some (fn [x] (= x %2)) %) % (conj % %2)) []", "problem": 56, "user": "53767991e4b06839e8705e25"}, {"code": "(fn [seqn]\n  (loop [seqn seqn\n         nseq []\n         seen #{}]\n    (if (empty? seqn)\n      nseq\n      (let [x (first seqn)]\n        (if (contains? seen x)\n          (recur (rest seqn) nseq seen)\n          (recur (rest seqn) (conj nseq x) (conj seen x)))))))", "problem": 56, "user": "53889587e4b0640c7a9a589e"}, {"code": "(fn [xs]\n        (loop [xs xs, seen {}, result []]\n          (if (empty? xs)\n            (reverse result)\n            (recur (rest xs)\n                   (assoc seen (first xs) true)\n                   (if (get seen (first xs))\n                     result\n                     (cons (first xs) result))))))", "problem": 56, "user": "5055e7f4e4b0ce54f56f0401"}, {"code": "(fn dist [coll]\n  (sort-by (fn [i] (.indexOf coll i)) (keys (group-by identity coll))))", "problem": 56, "user": "4f849f76e4b033992c121c36"}, {"code": "(fn distinct2 [lst]\n  (if (empty? lst) lst\n    (conj (filter #(not (= % (first lst))) (distinct2 (rest lst)))\n          (first lst))))", "problem": 56, "user": "5374adc3e4b06d7f452d9e27"}, {"code": "(fn [col] (reverse (reduce \n    (fn [acc x] \n        (if (pos? (count (filter #(= x %) acc))) \n            acc\n            (do \n                (println x acc)\n                (conj acc x)\n            )\n        )\n    )\n    ()\n    col\n  )))", "problem": 56, "user": "5356d00ee4b04ce2eb3ed26f"}, {"code": "#(if (= (count %3) 0) %2\n   (let [x (nth %3 0)\n         m (conj %1 x)]\n     (recur m (if (= m %1) %2 (conj %2 x)) (rest %3)))) #{} []", "problem": 56, "user": "538d8bb8e4b0b51d73faae71"}, {"code": "(fn [coll]\n  (reduce #(if (apply distinct? %2 %1) (conj %1 %2) %1) [] coll))", "problem": 56, "user": "534d5ab7e4b084c2834f4a9c"}, {"code": "(fn [x] (reduce #(if (some (fn [y] (= %2 y)) %) %1 (conj %1 %2)) [] x))", "problem": 56, "user": "53403110e4b085b17e897da6"}, {"code": "(fn U [s]\n  (if (empty? s) s\n      (cons (first s) (U (remove #(= (first s) %) (rest s))))))", "problem": 56, "user": "51a4416ae4b0def3c5c5868c"}, {"code": "(fn [xs] \n  (sort-by \n   (fn [x] (.indexOf xs x)) \n   (apply list (apply sorted-set xs))))", "problem": 56, "user": "538c3424e4b0b51d73faae58"}, {"code": "(fn remdup [x] (reverse (get\n                  (reduce (fn [[newseq seenset] e]\n                                     [(if (seenset e) newseq (cons e newseq))          (conj seenset e)]\n                                              ) ['() #{} ] x)\n    0)))", "problem": 56, "user": "530bf87ee4b02e82168697d5"}, {"code": "(fn [c]\n  (first (reduce (fn [[c' m] e]\n                   (if (contains? m e)\n                     [c' m]\n                     [(conj c' e) (conj m [e 1])]))\n                 [[] {}]\n                 c)))", "problem": 56, "user": "5392b849e4b0b51d73faaeb1"}, {"code": "reduce #(if (not= -1 (.indexOf % %2)) % (conj % %2)) []", "problem": 56, "user": "53940789e4b0b51d73faaec3"}, {"code": "(fn [p] (loop [a p b #{} c (empty p)]\n  (if (empty? a) (if (seq? c) (reverse c) c) (let [x (first a) y (rest a)] (if (b x) (recur y b c) (recur y (conj b x) (conj c x)))))))", "problem": 56, "user": "4ef9c78e535dced4c769f26a"}, {"code": "reduce (fn [coll x]\n            (if (some #(= % x) coll)\n                coll\n                (conj coll x)))\n        []", "problem": 56, "user": "534c1c64e4b084c2834f4a8a"}, {"code": "( fn mydistinct [[a & more]]\n  (when a (cons a (mydistinct (filter (partial not= a) more))))\n)", "problem": 56, "user": "53979a87e4b0b51d73faaef0"}, {"code": "#(loop [r [] rm %]\n   (if (empty? rm) (reverse r)\n     (recur (cons (first rm) r) (remove #{(first rm)} rm))))", "problem": 56, "user": "53973e7be4b0b51d73faaee6"}, {"code": "#(loop [x %1 new-list []]\n       (if (empty? x)\n         new-list\n         (recur (rest x)\n                (if (some (fn [val] (= val (first x))) new-list)\n                  new-list\n                (conj new-list (first x))))))", "problem": 56, "user": "53838742e4b06839e8705ee0"}, {"code": "(fn my-distinct [a-seq]\n  (loop [acc []\n         s a-seq]\n    (if (empty? s) acc\n      (let [f (first s)\n            acc2 (if (.contains acc f) acc\n                   (conj acc f))]\n        (recur acc2 (rest s))))))", "problem": 56, "user": "52ee46e5e4b05e3f0be25ec5"}, {"code": "(fn [s]\n  (let [items (atom {})]\n    (reduce\n     (fn [result item]\n       (if-not (@items item)\n         (do\n           (swap! items assoc item item)\n           (conj result item))\n         result))\n     []\n     s)))", "problem": 56, "user": "536f871de4b0fc7073fd6e7f"}, {"code": "#(reduce (fn [a b] (if (contains? (set a) b) a (conj a b))) [] %)", "problem": 56, "user": "53976599e4b0b51d73faaeea"}, {"code": "(fn [coll]\n  (loop [my-coll coll result '() stop-list '()]\n    (if (empty? my-coll)\n\t  result\n\t  (let [head (first my-coll) head-list (list head)]\n\t    (if (some #{head} stop-list)\n\t\t  (recur (rest my-coll) result stop-list)\n\t\t  (recur (rest my-coll) (concat result head-list) (concat stop-list head-list)))))))", "problem": 56, "user": "51eec1a6e4b0871fa145d98d"}, {"code": "reduce (fn [s e]\n  (if (some #(= % e) s)\n    s\n    (conj s e)))\n[]", "problem": 56, "user": "539cacbde4b0b51d73faaf2f"}, {"code": "(fn [ c ]\n    (reduce #(if (some #{%2} %) % (conj % %2)) \n            [] \n            c))", "problem": 56, "user": "5398305fe4b0b51d73faaef6"}, {"code": "(fn dstnct [coll]\n  (letfn [(helper [coll seen]\n           (when-let [[f & r] (seq coll)]\n             (if (seen f)\n               (helper r seen)\n               (cons f (lazy-seq (helper r (conj seen f)))))))]\n    (helper coll #{})))", "problem": 56, "user": "539a2901e4b0b51d73faaf0f"}, {"code": "(fn [coll]\n  (reduce (fn [sol x]\n            (if (some #{x} sol)\n              sol\n              (concat sol [x])) ) (empty coll) coll))", "problem": 56, "user": "5360f043e4b0243289761e3c"}, {"code": "(fn [col]\n  (loop [col col seen #{} res []]\n    (if (seq col)\n      (let [el (first col)]\n        (recur (rest col)\n               (conj seen el)\n               (if (seen el)\n                 res\n                 (conj res el))))\n      \n      res)))", "problem": 56, "user": "539c64cde4b0b51d73faaf2a"}, {"code": "(fn distinct1 [coll]\n  (first \n   (reduce \n    (fn [[elems seen] elem]\n      (if (seen elem)\n        [elems seen]\n        (map #(conj % elem) [elems seen])))\n    [[] #{}]\n    coll)))", "problem": 56, "user": "51a768e0e4b0da5f497bde84"}, {"code": "(fn co [s]\n  (let [f (fn [[col seen] v] (if (contains? seen v) [col seen] [(conj col v) (conj seen v)]))\n        mas (reduce f [[] #{}] s)]\n    (first mas)))", "problem": 56, "user": "53908e6be4b0b51d73faae9a"}, {"code": "(fn [coll]\n  (loop [x coll res [(first coll)]]\n    (if (empty? x) (butlast res)\n      (recur (filter #(not= % (last res)) x) (conj res (first (filter #(not= % (last res)) x)))))))", "problem": 56, "user": "53a1b5c8e4b0ca733b9744c1"}, {"code": "(fn\n  [coll]\n  (first (reduce (fn [[v s] el] (if (contains? s el)\n                                    [v s]\n                                    [(conj v el) (conj s el)]))\n                 [[] #{}]\n                 coll)))", "problem": 56, "user": "52dfc89be4b09f7907dd1405"}, {"code": "(fn remove-duplicate [s]\n  \t(if (> (count s) 40)\n      (map (fn [x] (key x)) (sort (frequencies s)))\n\t  (map (fn [x] (key x)) (frequencies s))))", "problem": 56, "user": "52b71bd2e4b0c58976d9ad4d"}, {"code": "(fn [coll]\n  (letfn [(dist [col]\n            (if (empty? col)\n            nil\n            (cons (first col) (dist (filter #(not= (first col) %) (rest col))))))]\n    (dist coll)))", "problem": 56, "user": "52c49401e4b0c2d177d620de"}, {"code": "(fn [coll]\n  (loop [coll coll acc []]\n    (if (empty? coll)\n      acc\n      (recur (rest coll) (if (= (.indexOf acc (first coll)) -1)\n                           (conj acc (first coll))\n                           acc)\n             )\n      )\n    )\n  )", "problem": 56, "user": "53886d2fe4b0640c7a9a589d"}, {"code": "#(let [s (java.util.LinkedHashSet.)]\n  (doseq [x %]\n     (.add s x))\n  (apply vector s))\n\n; This works in newer versions of clojure where adding the same element to\n; the same set doesn't throw an exception\n;#(keys (apply array-map (interleave % (repeat nil))))", "problem": 56, "user": "53a074a4e4b0ca733b9744af"}, {"problem": 56, "code": "(fn [s] (loop [s2 (rest s) ss [(first s)]]\n  (if (not (empty? s2))\n    (recur (rest s2) (if (some #{(first s2)} ss) ss (conj ss (first s2))))\n    ss)))", "user": "53069e16e4b02e8216869798"}, {"problem": 56, "code": "(fn my-distinct\n  [coll]\n  (reduce (fn [result curr]\n           (if ((set result) curr) result\n               (conj result curr)))\n         []\n         coll))", "user": "536e5055e4b0fc7073fd6e6b"}, {"problem": 56, "code": "(fn [coll]\n  (second (reduce #(if (not (contains? (first %1) %2)) [(conj (first %1) %2) (conj (second %1) %2)] %1) [#{} []] coll)))", "user": "538e864ee4b0b51d73faae87"}, {"problem": 56, "code": "#(sort (comparator (fn [x y] (if (number? x) (< x y) false))) (map (fn [x] (first x)) (group-by identity %)))", "user": "53a5c7ffe4b0ef122a8689c4"}, {"problem": 56, "code": "#(first (reduce (fn [[ret s] k]\n           (if (contains? s k)\n             [ret s]\n             [(conj ret k) (conj s k)])) \n         [[] #{}] %))", "user": "4f041de1535dcb61093f6ba5"}, {"problem": 56, "code": "#(let [step (fn step [xs seen]\n                   (lazy-seq\n                    ((fn [[f :as xs] seen]\n                      (when-let [s (seq xs)]\n                        (if (contains? seen f)\n                          (recur (rest s) seen)\n                          (cons f (step (rest s) (conj seen f))))))\n                     xs seen)))]\n      (step % #{}))", "user": "4ec7c32c535d6d7199dd36e6"}, {"problem": 56, "code": "(fn distinct- [[x & xs :as args]]\n  (if (empty? args) args\n    (cons x (distinct- (filter #(not= x %) xs)))))", "user": "526e5159e4b03e8d9a4a7316"}, {"problem": 56, "code": "(fn [x]\n   (reduce #(if (or (empty? %1) (not (some (fn [a] (= a %2)) %1))) (reverse (cons %2 (reverse %1))) %1) '() x))", "user": "53aaaf7ae4b047364c044444"}, {"problem": 56, "code": "(fn my-distinct [s]\n  (loop [res (empty s)\n         items (set s)\n         togo s]\n    (if (empty? togo)\n      res\n      (recur (if (some #(= % (first togo)) res)\n             res\n             (concat res (conj (empty s) (first togo))))\n           items\n           (rest togo)))))", "user": "531bad96e4b08068f379ed93"}, {"problem": 56, "code": "(fn [col]\n  (letfn [(doit [c more seen]\n            (cond (empty? c) more\n                  (contains? seen (first c)) (recur (rest c) more seen)\n                  :else (recur (rest c)\n                               (conj more (first c))\n                               (conj seen (first c)))))]\n    (doit col [] #{})))", "user": "53806e5be4b06839e8705ec1"}, {"problem": 56, "code": "(fn rem-dups [[x1 & xs :as s]]\n  (if (empty? s)\n    []\n    (cons x1 (rem-dups (filter (comp not (partial = x1)) xs)))))", "user": "5396c94be4b0b51d73faaee3"}, {"problem": 56, "code": "(fn\n  [a]\n  (loop [acc []\n         curr (first a)\n         remaining (rest a)]\n    (if (= nil curr)\n      acc\n      (recur\n       (if (some #{curr} acc)\n         acc\n         (merge acc curr))\n       (first remaining)\n       (rest remaining)))))", "user": "53ac4719e4b047364c04445c"}, {"problem": 56, "code": "reduce (fn [s e]\n  (if (some #(= % e) s)\n    s\n    (conj s e)))\n[]", "user": "53ae16e2e4b047364c044472"}, {"problem": 56, "code": "(fn [xs]\n  (reduce (fn [coll x]\n            (if (some #{x} coll)\n              coll\n              (conj coll x))) [] xs))", "user": "523ea111e4b057c4b7cd0a65"}, {"problem": 56, "code": "(fn o [col]\n\t\t\t\t(if (empty? col)\n\t\t\t\t\tcol\n\t\t\t\t\t(cons (first col) (o (remove #(= (first col) %) col))))\n\t\t\t\t\t)", "user": "53858594e4b06839e8705f05"}, {"problem": 56, "code": "(fn f [coll]\n  (when-let [fi (first coll)]\n      (cons fi (f (filter (partial not= fi) (rest coll))))    \n    )\n  )", "user": "5245e320e4b09dbe66b56177"}, {"problem": 56, "code": "(fn [xs] (reduce (fn [s v] (if (some (set s) [v]) s (conj s v))) [] xs))", "user": "4fcf1755e4b03432b189f40c"}, {"problem": 56, "code": "#(vec (java.util.LinkedHashSet. %))", "user": "5382704be4b06839e8705ed4"}, {"problem": 56, "code": "(partial reduce #(if ((set %) %2) % (conj % %2)) [])", "user": "52c7f036e4b0c2d177d62126"}, {"problem": 56, "code": "(fn find-distinct[coll](\n\tloop [coll coll visit #{} ret []]\n\t\t(if (empty? coll) ret\n\t\t\t(let [current (first coll) remain (rest coll)]\n\t\t\t(if (contains? visit current)\n\t\t\t\t(recur remain visit ret)\n\t\t\t\t(recur remain (conj visit current) (conj ret current)))))))", "user": "538e29d1e4b0b51d73faae80"}, {"problem": 56, "code": "(fn find-distinct [xs] \n\t(letfn [(conj-if-distinct [ys y]\n\t\t\t\t(if (contains? (set ys) y) ys (conj ys y)))]\n\t(reduce conj-if-distinct [] xs)))", "user": "52e657e4e4b09f7907dd1472"}, {"problem": 56, "code": "(fn [coll] \n   (reduce (fn [coll val] \n             (if (some #(= val %) coll) \n                            coll\n                            (conj coll val))) [] coll)\n  )", "user": "5364ab34e4b0243289761e64"}, {"problem": 56, "code": "#(reduce (fn [sofar e] (if (some (set (vector e)) sofar) sofar (conj sofar e))) [] %)", "user": "534d1173e4b084c2834f4a98"}, {"problem": 56, "code": "(fn dstnct [coll]\n\t(first (reduce (fn [[c s] i] [(if (s i) c (conj c i)) (conj s i)]) [[] #{}] coll)))", "user": "53b39d82e4b047364c0444a6"}, {"problem": 56, "code": "(fn [c]\n  (loop [r [] s #{} c c]\n    (if (empty? c) r\n      (let [e (first c)]\n      (recur (if (contains? s e) r (conj r e)) (conj s e) (rest c))))))", "user": "52d07cc5e4b07d0d72b273bb"}, {"problem": 56, "code": "#(reduce\n  (fn [xs x]\n    (if (some #{x} xs)\n      xs\n      (conj xs x)))\n  [] %)", "user": "5290257ae4b0239c8a67af03"}, {"problem": 56, "code": "#(first (reduce (fn [[l acc] e]\n                     (let [cnt (get acc e 0)\n                               l (if (zero? cnt) (conj l e) l)]\n                       (list l\n                             (assoc acc\n                                    e\n                                    (inc (get acc e 0)))))\n                     )\n                 (list [] {})\n                 %))", "user": "4f867b25e4b033992c121c51"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) \n          %1 \n          (conj %1 %2)) []", "user": "53acaf1fe4b047364c04445f"}, {"problem": 56, "code": "(fn f [s] (loop[h (first s) t (rest s) r '() s #{}]\n            (if (= h nil) (reverse r) (recur (first t) (rest t) (if (= (set (cons h s)) s) r (cons h r) ) (set(cons h s)) ) ) ) )", "user": "53b3ea79e4b047364c0444ab"}, {"problem": 56, "code": "(fn [col]\n  (let [set-of-col (set col)]\n    (loop [c col r [] s #{}]\n      (if (empty? c)\n        r\n        (let [v (first c)]\n          (recur (next c) (if (s v) r (conj r v)) (conj s v))\n          )))))", "user": "53b530c6e4b047364c0444bc"}, {"problem": 56, "code": "(fn  [lst]\n            (loop [rm (seq lst), acc (vector)]\n              (cond (empty? rm) acc\n                    :else (if (some #{(first rm)} acc)\n                            (recur (rest rm) acc)\n                            (recur (rest rm) (conj acc (first rm)))))))", "user": "538e36c7e4b0b51d73faae81"}, {"problem": 56, "code": "(fn my-split [coll]\n      (let\n        [indices (range (count coll))\n          first-index (fn [n] (first (filter #(= n (nth coll %)) indices)))\n        first-to-show (sort (map first-index (set coll)))\n        firsts-in-order (map #(nth coll %) first-to-show)\n        ]\n        firsts-in-order\n        )\n      )", "user": "536827f1e4b0243289761e8a"}, {"problem": 56, "code": "(fn [coll] \n  (reduce #(if ((set %1) %2)\n             %1\n             (conj %1 %2))\n             [] coll))", "user": "53a7771ee4b047364c04441b"}, {"problem": 56, "code": "(fn dist [as]\n  (if (empty? as)\n    as\n    (cons (first as)\n          (dist (filter (fn [x] (not= (first as) x))\n                        (rest as))))))", "user": "53c051a5e4b0c98a41f5ccae"}, {"problem": 56, "code": "(fn [coll]\n  (loop [coll coll seen #{} acc []]\n    (if-not (seq coll)\n      acc\n      (let [itm (first coll)]\n        (if (contains? seen itm)\n          (recur (rest coll) seen acc)\n          (recur (rest coll) (conj seen itm) (conj acc itm)))))))", "user": "53b71b94e4b047364c0444cd"}, {"problem": 56, "code": "(fn [s] (let [hs (new java.util.LinkedHashSet)]\n          (doseq [x s]\n            (.add hs x))\n          (into [] hs)))", "user": "53a0ab8ce4b0ca733b9744b3"}, {"problem": 56, "code": "(fn my-distinct [coll]\n  (second (reduce #(if (contains? (first %) %2)\n                       %\n                       [(conj (first %) %2) (conj (second %) %2)])\n                   [#{} []] coll)))", "user": "53bf0913e4b0c98a41f5cc99"}, {"problem": 56, "code": "(fn my-unique [coll] (reduce (fn [a b] ( if (some #(= b %) a) a (conj a b))) [] coll))", "user": "539b4268e4b0b51d73faaf1c"}, {"problem": 56, "code": "(fn [x] (mapcat #(keys (group-by identity %)) (split-at 32 x)))", "user": "52eaba10e4b09f7907dd14c2"}, {"problem": 56, "code": "(fn [s]\n  ((fn walk [rs seen acc]\n    (if (empty? rs)\n      acc\n      (let [head (first rs)\n            tail (rest rs)]\n        (if (seen head)\n          (walk tail seen acc)\n          (walk tail (conj seen head) (conj acc head))))))\n  s #{} []))", "user": "53c1ce3ee4b00fb29b221268"}, {"problem": 56, "code": "(fn my-distinct [coll]\n    ((fn foo [help-set prev-len ret coll]\n        (if (empty? coll)\n            ret\n            (if (> (count (conj help-set (first coll))) prev-len)\n                (foo \n                    (conj help-set (first coll)) \n                    (inc prev-len) \n                    (conj ret (first coll)) \n                    (rest coll)\n                )\n                (foo help-set prev-len ret (rest coll))\n            )\n        )\n    ) #{} 0 [] coll)\n)", "user": "53a94b63e4b047364c044434"}, {"problem": 56, "code": "(fn [c] \n            (take-while #(not (nil? %))\n              ((fn distinct_ [col] (lazy-cat [(first col)] (distinct_ (filter #(not= % (first col)) (rest col))))) c)))", "user": "53c38b8ce4b00fb29b22127b"}, {"problem": 56, "code": "(fn [l] (reduce #(if (contains? (set %1) %2) %1 (conj %1 %2)) [] l))", "user": "53b2a7f8e4b047364c04449c"}, {"problem": 56, "code": "(fn [x](reduce #(if (= (.indexOf % %2) -1) (conj % %2) %) [] x))", "user": "53c74cfce4b00fb29b2212a7"}, {"problem": 56, "code": "(fn [s](reduce (fn[r s](if (some #(= s %) r) r (conj r s)  )) [] s ))", "user": "4e8849c5535d8b9bb0147ca4"}, {"problem": 56, "code": "(fn [l]\n            (reduce #(if (some (partial = %2) %) % (conj % %2)) [] l)\n            )", "user": "531902b1e4b08068f379ed77"}, {"problem": 56, "code": "(fn [coll]\n  (second\n   (reduce \n     (fn [[ks l] x]\n       (if (ks x)\n       [ks l]\n       [(conj ks x) (conj l x)]))\n     [#{} []]\n     coll)))", "user": "523b4e91e4b07becd5be21ef"}, {"problem": 56, "code": "(fn d [c]\n  (if-not (empty? c)\n    (let [a (first c)]\n      (cons a (d (remove #(= a %) (rest c)))))))", "user": "53b7c21ae4b047364c0444d4"}, {"problem": 56, "code": "(partial reduce (fn [c v] (if (get (set c) v) c (conj c v))) [])", "user": "5310e968e4b08068f379ecdd"}, {"problem": 56, "code": "(fn [xs]\n  (loop [acc []\n         src xs]\n    (if-not (empty? src)\n      (if (contains? (into #{} acc) (first src))\n        (recur acc (rest src))\n        (recur (conj acc (first src)) (rest src)))\n      (into [] acc))))", "user": "532418f3e4b09d4e7a9b54d8"}, {"problem": 56, "code": "reduce (fn [x y](if (some #{y} x) x (conj x y))) []", "user": "53aef31ce4b047364c04447b"}, {"problem": 56, "code": "(fn [coll]\n    (let [step (fn step [xs seen]\n                   (lazy-seq\n                    ((fn [[f :as xs] seen]\n                      (when-let [s (seq xs)]\n                        (if (contains? seen f) \n                          (recur (rest s) seen)\n                          (cons f (step (rest s) (conj seen f))))))\n                     xs seen)))]\n      (step coll #{})))", "user": "539c88e1e4b0b51d73faaf2c"}, {"problem": 56, "code": "(partial reduce  (fn [a v] (if (some #(= v %) a) a (conj a v))) [] )", "user": "538db083e4b0b51d73faae74"}, {"problem": 56, "code": "#(vec (java.util.LinkedHashSet. %))", "user": "4e6961f0535d8ccf87e9fe9b"}, {"problem": 56, "code": "(fn [xs]\n  (loop [items #{}, new-seq (empty xs), remaining xs]\n    (if (empty? remaining)\n      (reverse new-seq)\n      (let [curr (first remaining),\n            aug-seq (if (contains? items curr)\n                      new-seq\n                      (cons curr new-seq))]\n        (recur (conj items curr)\n               aug-seq\n               (rest remaining))))))", "user": "53d20e14e4b00fb29b22131a"}, {"problem": 56, "code": "(fn [xs]\n   (reduce #(if (contains? (set %1) %2) %1 (conj %1 %2)) [] xs) )", "user": "53ca23e3e4b00fb29b2212c6"}, {"problem": 56, "code": "(fn distinct2\n  [coll]\n  (second (reduce (fn [[values-set output] x]\n                    (if (values-set x)\n                      [values-set output]\n                      [(conj values-set x) (conj output x)]))\n                  [#{} []]\n                  coll)))", "user": "51c8f1d8e4b07ef393169e5d"}, {"problem": 56, "code": "(fn dst [coll]\n  (->> coll\n       (reduce\n        (fn [[found acc] e]\n          (if (found e)\n            [found acc]\n            [(conj found e) (conj acc e)]))\n        [#{} []])\n       second))", "user": "53d78b64e4b0e771c3025466"}, {"problem": 56, "code": "(fn [a]\n  (letfn [(step [a b m]\n            (if (empty? a)\n              b\n              (if (contains? m (first a))\n                (step (rest a) b m)\n                (step\n                  (rest a)\n                  (concat b [(first a)])\n                  (assoc m (first a) 1)))))]\n    (step a [] {})))", "user": "53d612cbe4b0e771c3025452"}, {"problem": 56, "code": "#(first (reduce (fn [[agg seen] item] \n          (if (seen item) \n            [agg seen]\n            [(conj agg item) (conj seen item)]\n           )\n         )\n        [[], #{}]\n        %\n))", "user": "53d5e45ae4b0e771c302544e"}, {"problem": 56, "code": "(fn [col]\n  (reduce\n     (fn [r e]\n       (if (some #(= % e) r)\n         r\n         (conj r e)\n       )\n     )\n     []\n     col)\n)", "user": "53ca41dae4b00fb29b2212c8"}, {"problem": 56, "code": "#(reduce (fn [coll x] (if (some #{x} coll) coll (conj coll x))) [] %)", "user": "53da19fde4b0e771c3025484"}, {"problem": 56, "code": "(fn [coll]\n    (reduce #(if (some #{%2} %1) %1 (conj %1 %2))\n            []\n            coll))", "user": "53dcdde4e4b0d874e779ae24"}, {"problem": 56, "code": "(fn dist [v]\n  (reduce (fn [s e] (if (some #{e} s)\n                      s\n                      (conj s e)))\n          [] v))", "user": "53710c09e4b0fc7073fd6ea5"}, {"problem": 56, "code": "#(if (apply distinct? %) % (keys (frequencies %)))", "user": "5143824ae4b0b4fb4ace5f36"}, {"problem": 56, "code": "#(loop [r [] s #{} t %]\n   (if (empty? t) r\n     (recur (if (s (first t)) r\n              (conj r (first t)))\n            (conj s (first t)) \n            (rest t))))", "user": "51febd40e4b0f1313d468a76"}, {"problem": 56, "code": "(fn uniq\n  ([items]     (uniq items '()))\n  ([items res] (if (empty? items)\n                 res\n                 (if (reduce #(or %1 (= %2 (first items))) false res)\n                   (uniq (rest items) res)\n                   (uniq (rest items) (concat res (list (first items))))))))", "user": "53ddd44be4b0d874e779ae2e"}, {"problem": 56, "code": "#(first\n  (reduce\n   (fn [[vxs sxs] x]\n     (if (contains? sxs x)\n       [vxs sxs]\n       [(conj vxs x) (conj sxs x)]))\n   [[] #{}]\n   %))", "user": "53dcf474e4b0d874e779ae25"}, {"problem": 56, "code": "(fn [a-seq] (loop [accum () b-seq a-seq] \n              (if (empty? b-seq) (reverse accum)\n                (let [current (first b-seq)] \n                  (recur (if (contains? (set accum) current) accum (cons current accum)) (rest b-seq))))))", "user": "52fdbf3ae4b047fd55837032"}, {"problem": 56, "code": "(fn find-distinct [coll]\n  (loop [runner coll things-found #{} out []]\n    (if (seq runner)\n      (let [choice (first runner) others (last runner)]\n        (if (contains? things-found choice)\n          (recur (rest runner) things-found out)\n          (recur (rest runner) (conj things-found choice) (conj out choice))))\n      ;; a hack to deal with list vs. vector\n      (if (list? coll)\n        (reverse (into () out))\n        out))))", "user": "53703287e4b0fc7073fd6e8f"}, {"problem": 56, "code": "#(second (reduce (fn [[c r] i] (if (some #{i} c) [c r] [(conj c i) (conj r i)])) [#{} []] %))", "user": "53e19461e4b0d874e779ae59"}, {"problem": 56, "code": "(fn find-distinct-items [coll]\n  (reduce\n    (fn [cons-coll current]\n      (if (some #(= % current) cons-coll)\n        cons-coll\n        (conj cons-coll current)))\n    []\n    coll))", "user": "53d40508e4b00fb29b221332"}, {"problem": 56, "code": "#((fn f [x r] (if (= x nil) r\n(let [[a & b] x]\n  (f b (if (get (set r) a)\n    r (conj r a)))))) % [])", "user": "53500869e4b084c2834f4ad3"}, {"problem": 56, "code": "(fn [xs]\n  (reduce\n    (fn [ys y]\n      (if\n        (some #(= y %) ys)\n        ys\n        (conj ys y)))\n    []\n    xs))", "user": "52a8ca0fe4b0c58976d9ac36"}, {"problem": 56, "code": "(fn [coll]\n  (last (reduce (fn [[seen xs :as sxs] x]\n                  (if-not (seen x) \n                    (map #(conj % x) sxs) \n                    sxs))\n                [#{} []] coll)))", "user": "53dfdf01e4b0d874e779ae46"}, {"problem": 56, "code": "(fn [s]\n  ((fn rd [s dd st]\n     (if (empty? s) dd\n       (rd (rest s) (if (contains? st (first s)) dd (conj dd (first s))) (conj st (first s))))) s [] #{}))", "user": "53e2b212e4b036ad0777e3f4"}, {"problem": 56, "code": "(fn my-distinct [s]\n  (loop [lft s new (empty s) seen #{}]\n    (if (empty? lft)\n      new\n      (if (contains? seen (first lft))\n        (recur (rest lft) new seen)\n        (recur (rest lft) (concat new [(first lft)]) (conj seen (first lft)))))))", "user": "53791ab7e4b06839e8705e4d"}, {"problem": 56, "code": "(fn [xs]\n  (:filtered \n   \t(reduce (fn [acc x]\n              (let [seen (:seen acc) filtered (:filtered acc)]\n           \t    (if (contains? seen x) acc\n                 (assoc acc :seen (conj seen x) :filtered (conj filtered x)))))\n            {:seen #{}, :filtered []} xs)))", "user": "504f5804e4b0a02f9cffde72"}, {"problem": 56, "code": "#(reduce (fn [c v]\n            (if (= nil (some #{v} c))\n              (conj c v)\n              c)) [] %)", "user": "53d5a63be4b0e771c3025449"}, {"problem": 56, "code": "(fn my-distinct [coll]\n  (loop [acc [] coll coll]\n    (if (empty? coll)\n      acc\n      (recur (if ((set acc) (first coll))\n               acc\n               (conj acc (first coll)))\n             (rest coll)))))", "user": "53dc94c8e4b094d41abdfefc"}, {"problem": 56, "code": "(fn my-distinct [xs]\n  (loop [s xs res []]\n    (if-not (seq s)\n      res\n      (if (some #(= (first s) %) res)\n        (recur (rest s) res)\n        (recur (rest s) (conj res (first s)))))))", "user": "53c126fce4b00fb29b22125b"}, {"problem": 56, "code": "(fn [coll] \n  (reduce (fn [s e]\n  \t(if (some #(= % e) s)\n    \ts\n\t    (conj s e)))\n[] coll))", "user": "537e59ffe4b06839e8705ea3"}, {"problem": 56, "code": "#(reduce (fn [seen item]\n            (if (nil? (some #{item} seen)) \n              (conj seen item) \n              seen)\n            ) [] %)", "user": "538ca203e4b0b51d73faae5f"}, {"problem": 56, "code": "reduce #(if (nil? ((into #{} %1) %2)) (conj %1 %2) %1) []", "user": "53c649d3e4b00fb29b221297"}, {"problem": 56, "code": "#(first (reduce (fn [[v s] x] (if (s x) [v s] [(conj v x) (conj s x)])) [[] #{}] %))", "user": "53ecac57e4b0d648e757f4b3"}, {"problem": 56, "code": "reduce (fn [r x] (if ((set r) x) r (conj r x))) []", "user": "53e4fa2ce4b036ad0777e454"}, {"problem": 56, "code": "(fn xs \n   ([x] (xs [] x)) \n   ([y x] (cond \n           (empty? x) (reverse y) \n           (some #{(first x)} y) (xs y (rest x)) \n           true (xs (cons (first x) y) (rest x)))))", "user": "53e91473e4b036ad0777e495"}, {"problem": 56, "code": "(fn [a]\n  ((fn my-distinct [check-set result [n & remaining]]\n    (cond\n     (nil? n) result\n     (contains? check-set n) (my-distinct check-set result remaining)\n     :else (my-distinct (conj check-set n) (conj result n) remaining)))\n   #{} [] a))", "user": "53edb464e4b0d648e757f4c7"}, {"problem": 56, "code": "(fn [coll]\n    (let [step (fn step [xs seen]\n                   (lazy-seq\n                    ((fn [[f :as xs] seen]\n                      (when-let [s (seq xs)]\n                        (if (contains? seen f) \n                          (recur (rest s) seen)\n                          (cons f (step (rest s) (conj seen f))))))\n                     xs seen)))]\n      (step coll #{})))", "user": "53e241a6e4b036ad0777e3f0"}, {"problem": 56, "code": "(fn dist [col]\n  (reduce (fn [xs y] (if (some #{y} xs) xs (conj xs y))) [] col))", "user": "53e9a15be4b036ad0777e4ae"}, {"problem": 56, "code": "(fn f [xs]\n  (loop [current nil n (first xs) r xs]\n    (if (empty? r)\n      (reverse current)     \n      (if (> (count (filter #(= n %) current)) 0)\n        (recur current (first (rest r)) (rest r))\n        (recur (cons n current) (first (rest r)) (rest r))\n      ))))", "user": "51897709e4b0288ada3dbdaa"}, {"problem": 56, "code": "reduce (fn [coll x] (if (some #(= % x) coll) coll (conj coll x))) []", "user": "53f642e4e4b0db01ade6f9db"}, {"problem": 56, "code": "#(loop [[head & tail] %\n        used #{}\n        acc []]\n   (if (nil? head)\n     acc\n     (recur tail\n            (conj used head)\n            (if (contains? used head)\n              acc\n              (conj acc head)))))", "user": "53f7820be4b0de5c41848560"}, {"problem": 56, "code": "#(loop [res [] \n        in-seq %\n        s #{}]\n   (if (empty? in-seq) res\n     (if (s (first in-seq))\n       (recur res (rest in-seq) s)\n       (recur (conj res (first in-seq)) (rest in-seq)\n              (conj s (first in-seq)))\n       )\n     ) \n  )", "user": "50856bd1e4b004985b776e4c"}, {"problem": 56, "code": "reduce\n(fn[a b]\n  (if (some #{b} a) a (conj a b))) []", "user": "53ed2fafe4b0d648e757f4c1"}, {"problem": 56, "code": "(fn [coll] \n  (->> coll\n       (map vector (range))\n       (reduce (fn [acc [idx v]] (if (acc v) acc (assoc acc v idx))) {})\n       (map (fn [[k v]] [v k]))\n       sort\n       (map second)))", "user": "53ee7f2ee4b0d648e757f4cf"}, {"problem": 56, "code": "(fn e-56 [[x & xs]]\n        (if \n            (nil? x) (list)\n            (cons x (e-56 (filter #(not= x %) xs)))))", "user": "53bd7080e4b0d9a98559a6d1"}, {"problem": 56, "code": "(fn [coll]\n  (loop [rem_coll coll de_dup_coll []]\n    (if (empty? rem_coll)\n      de_dup_coll\n      (recur\n        (rest rem_coll)\n        (if (contains? (into #{} de_dup_coll) (first rem_coll))\n          de_dup_coll\n          (concat de_dup_coll (list (first rem_coll)))\n        )\n      )\n    )\n  )\n)", "user": "53f17931e4b0742d9025b0dd"}, {"problem": 56, "code": "reduce (fn [s e]\n     (if (some #(= % e) s)\n       s\n       (conj s e)))\n   []", "user": "53f75957e4b0de5c4184855d"}, {"problem": 56, "code": "(fn [coll]\n  (loop [x coll out []]\n    (if (empty? x) out\n      (recur (rest x) (if (some #{(first x)} out) out (conj out (first x)))))))", "user": "53e76bb2e4b036ad0777e47d"}, {"problem": 56, "code": "(fn [l]\n   (reduce #(if (some (fn [e] (= e %2)) %)\n                %\n                (conj % %2)) \n           [] l))", "user": "53f6d555e4b0db01ade6f9e5"}, {"problem": 56, "code": "(fn uniq [coll]   \n   (reduce (fn [accum x]\n             (if (some #(= % x) accum )\n               accum\n               (conj accum x)))\n           []\n           coll))", "user": "53ed6976e4b0d648e757f4c4"}, {"problem": 56, "code": "(fn find-distinct-items [xs] \n  (->> \n    (group-by identity xs)\n    (keys)\n    (sort-by #(.indexOf xs %))))", "user": "52616198e4b03e8d9a4a705e"}, {"problem": 56, "code": "(fn [xs]\n  (reduce #(let [n (conj %1 %2)]\n             (if (apply distinct? n) n %1))\n          []\n          xs))", "user": "506ba58be4b0eda3100c090b"}, {"problem": 56, "code": "(fn [x] (sort-by #(.indexOf x %) (vec (set x))))", "user": "53fc8424e4b0de5c418485b3"}, {"problem": 56, "code": "reduce #(if (some #{%2} %1) %1 (conj %1 %2) ) []", "user": "53fe1c3be4b0de5c418485f2"}, {"problem": 56, "code": "(fn [coll]\n   (reverse (reduce (fn [coll v] \n             (if (some #(= v %) coll) \n               coll\n               (cons v coll))) '() coll)))", "user": "53f35c34e4b0742d9025b0f4"}, {"problem": 56, "code": "(fn [c]\n   (reduce (fn [result value]\n             (cond (some #(= value %) result) result\n                   :else (concat result (list value))))\n           '() c))", "user": "52fac708e4b047fd55836fff"}, {"problem": 56, "code": "(fn [in] \n  (loop [in in, out []]\n    (if (empty? in) \n      out\n      (recur (rest in) \n             (if (some #(= (first in) %) out)\n               out\n               (conj out (first in)))))))", "user": "53fcdd1ae4b0de5c418485dd"}, {"problem": 56, "code": "(fn [s]\n  (loop [seen #{} acc [] s s]\n    (if (empty? s)\n      acc\n      (let [e (first s)]\n        (recur (conj seen e)\n               (if (seen e) acc (conj acc e))\n               (rest s))))))", "user": "53f77b6ae4b0de5c4184855f"}, {"problem": 56, "code": "(fn [se]\n   (reduce (fn [acc item]\n             (if (= (.indexOf acc item) -1)\n               (conj acc item)\n               acc)) [] se))", "user": "53214efbe4b09d4e7a9b54b2"}, {"problem": 56, "code": "reduce #(if (contains? (set %) %2) % (conj % %2)) []", "user": "4ed3b4a7535d44c135fd68f5"}, {"problem": 56, "code": "(fn distinctise [coll]\n  (letfn [(add-to-map [result [idx k]]\n            (if (result k)\n              result\n              (assoc result k idx)))]\n    (map first\n         (sort-by second\n                  (reduce add-to-map\n                          {}\n                          (map-indexed #(vector %1 %2) coll))))))", "user": "53fd66a4e4b0de5c418485e3"}, {"problem": 56, "code": "(fn [x]\n   (let [f (fn ff [ret s seen]\n             (if (empty? s)\n               ret\n               (if (contains? seen (first s))\n                 (ff ret (rest s) seen)\n                 (ff (conj ret (first s)) (rest s) (conj seen (first s))))))]\n     (f [] x #{})))", "user": "53ea5307e4b036ad0777e4e2"}, {"problem": 56, "code": "reduce (fn [s e]\n  (if (some #(= % e) s)\n    s\n    (conj s e)))\n[]", "user": "53be3ee7e4b0d9a98559a6df"}, {"problem": 56, "code": "(fn [coll]\n  (reduce #(if (some #{%2} %) % (conj % %2)) [] coll)\n )", "user": "537b1083e4b06839e8705e64"}, {"problem": 56, "code": "(fn \n  [coll]\n  (reduce (fn\n            [distincts item]\n            (if ((complement some) #{item} distincts)\n              (conj distincts item)\n              distincts)\n            ) [] coll))", "user": "5401aefbe4b0df28a13c62c7"}, {"problem": 56, "code": "(fn distinct'\n  [coll]\n  (reduce (fn [sofar elem]\n            (if (some #{elem} sofar)\n              sofar\n              (conj sofar elem))) [] coll))", "user": "540b2dcbe4b0addc1aec66f4"}, {"problem": 56, "code": "reduce (fn [accum x] (if (some #(= x %) accum) accum (conj accum x))) []", "user": "53fcb8f7e4b0de5c418485d4"}, {"problem": 56, "code": "(fn distinct2 \n   ([coll] (distinct2 coll []))\n   ([coll s]\n    (if (empty? coll)\n      s\n      (if ((set s) (first coll))\n        (distinct2 (rest coll) s)\n        (distinct2 (rest coll) (conj s (first coll)))))))", "user": "53da8fede4b0e771c30254a3"}, {"problem": 56, "code": "(fn mydistinct [xs]\n  (reduce (fn [ys x] (if (some #(= x %) ys)\n                       ys\n                       (conj ys x)))\n          [] xs))", "user": "53e8c684e4b036ad0777e48b"}, {"problem": 56, "code": "#(reduce\n  (fn [memo v]\n    (if (some #{v} memo)\n      memo\n      (conj memo v)))\n  [] %)", "user": "5338387de4b0e30313ee6c91"}, {"problem": 56, "code": "(fn [xs]\n  (loop [ys xs rs {} ul []]\n    (if (empty? ys)\n      ul\n      (let [[y & ys'] ys\n            ul'\n            (if (contains? rs y)\n              ul (conj ul y))\n            rs' (assoc rs y nil)]\n        (recur ys' rs' ul'))))\n  )", "user": "53ef7f77e4b0742d9025b0ce"}, {"problem": 56, "code": "(fn [xs]\n  (loop [my-set #{}\n         my-vec []\n         my-xs xs]\n    (if (seq my-xs)\n      (let [my-val (first my-xs)]\n        (if (contains? my-set my-val)\n          (recur (conj my-set my-val) my-vec (rest my-xs))\n          (recur (conj my-set my-val) (conj my-vec my-val) (rest my-xs))))\n      my-vec)))", "user": "540d7dd1e4b0addc1aec6713"}, {"problem": 56, "code": "(fn my-distinct [squ]\n  (loop [acc []\n         squ squ]\n    (if (empty? squ)\n      acc\n      (recur (if (some #{(first squ)} acc)\n               acc\n               (conj acc (first squ)))\n             (rest squ)))))", "user": "54084784e4b0addc1aec66c9"}, {"problem": 56, "code": "(fn [x] (reduce (fn [a b] (if (some #(= b %) a) a (concat a (list b))  )      ) (list (first x)) x)    )", "user": "53fdc4b8e4b0de5c418485ea"}, {"problem": 56, "code": "(fn my-distinct\n  ([xs] (my-distinct xs #{}))\n  ([[x & xs] seen]\n     (lazy-seq\n      (let [seen-x (seen x)\n            seen   (conj seen x)\n            next   (if (nil? xs)\n                     nil\n                     (my-distinct xs seen))]\n        (if seen-x\n          next\n          (cons x next))))))", "user": "53edb628e4b0d648e757f4c8"}, {"problem": 56, "code": "(fn [coll]\n  (loop [result [] collection coll]\n    (cond\n      (empty? collection) result\n      (some #(= (first collection) %) result) (recur result (rest collection))\n      :else (recur (conj result (first collection)) (rest collection)))))", "user": "528bba38e4b0239c8a67aea9"}, {"problem": 56, "code": "(fn [z] ((fn fun [x y] (if (= (empty x) x) y (if (not= (empty y) (filter #(= % (first x)) y)) (fun (rest x) y) (fun (rest x) (conj y (first x)) )))) (rest z) [(first z)]))", "user": "540479e7e4b0addc1aec665a"}, {"problem": 56, "code": "(fn [coll]\n   (reduce \n     (fn [m x] (if (some #(= x %) m) m (conj m x ))) \n     (vector) \n     coll))", "user": "54094824e4b0addc1aec66da"}, {"problem": 56, "code": "(fn f [coll]\n  (reduce \n   (fn [acc x]\n     (if-not (contains? (into #{} acc) x)\n       (concat acc (list x))\n       acc))\n   '()\n   coll))", "user": "540d5085e4b0addc1aec670e"}, {"problem": 56, "code": "(fn [coll] \n  ((fn step [[x & xs] seen] \n     (when x\n       (if (seen x) \n         (step xs seen)\n         (cons x (step xs (conj seen x)))))) \n   coll #{}))", "user": "53d86564e4b0e771c302546b"}, {"problem": 56, "code": "(fn [xs]\n  (first\n    (reduce (fn [[r s :as v] n] \n              (if (s n) v [(conj r n) (conj s n)])) \n         \t[[] #{}]\n            xs)))", "user": "540e17c3e4b0addc1aec6719"}, {"problem": 56, "code": "(partial reduce #(if (some #{%2} %) % (conj % %2)) [])", "user": "4fad9da0e4b081705acca23c"}, {"problem": 56, "code": "reduce #(if (< (.indexOf % %2) 0) (conj % %2) %) []", "user": "53fddd71e4b0de5c418485eb"}, {"problem": 56, "code": ";; This does it very nicely, except it loses the order that they appear\n;;#(into [] (into (sorted-set) %))\n\n;;(fn [is] (loop [s is, m {}, r []]\n;;            (let [f (first s)]\n;;              (cond (zero? (count s)) r\n;;                    (contains? m f) (recur (rest s) m r)\n;;                    :else (recur (rest s) (conj m [f 1]) (conj r f))))))\n\n#(second\n  (reduce\n   (fn [[seen res] x]\n     [(conj seen x)\n      (if (contains? seen x)\n        res\n        (conj res x))])\n   [#{} []]  ; initial val for reduce\n   %))", "user": "540e0637e4b0addc1aec6717"}, {"problem": 56, "code": "reduce (fn [s e] (if (some #(= % e) s) s (conj s e))) []", "user": "541096bde4b01498b1a719b2"}, {"problem": 56, "code": "(fn [s]\n  (loop [s s\n         acc []]\n    (cond\n      (empty? s) acc\n      (some (partial = (first s)) acc) (recur (rest s) acc)\n      :else (recur (rest s) (concat acc (list (first s))))\n    )\n  )\n)", "user": "540f09b9e4b0addc1aec6725"}, {"problem": 56, "code": "(fn [xs] \n  (loop [xs xs \n         result []]\n    (if (empty? xs)\n      result\n      (if (some (partial = (first xs)) result)\n         (recur (rest xs) result)\n         (recur (rest xs) (into result [(first xs)]) )     ) )  ))", "user": "54187e84e4b01498b1a71a1b"}, {"problem": 56, "code": "reduce (fn [x res] (if (some #(= % res) x) x (conj x res))) []", "user": "541b37d2e4b01498b1a71a64"}, {"problem": 56, "code": "(fn [coll]\n  (reduce #(if ((set %1) %2)\n             %1\n             (conj %1 %2))\n          []\n          coll))", "user": "53dd37aee4b0d874e779ae28"}, {"problem": 56, "code": ";; O(n**2) solution.\nreduce (fn [xs e] (if (some #(= e %) xs) xs (conj xs e))) []", "user": "54149f2fe4b01498b1a719ec"}, {"problem": 56, "code": "#(second (reduce (fn[[s v] y] (if (contains? s y) [s v] [(conj s y) (conj v y)])) [#{} (vector)] %))", "user": "541619e8e4b01498b1a719f9"}, {"problem": 56, "code": "(fn [c]\n  (loop [[hd & tl] c\n         f []]\n    (let [f' (if (some #(= hd %) f)\n               f\n               (conj f hd))]\n      (if (empty? tl)\n        f'\n        (recur tl f')))))", "user": "53fb5256e4b0de5c4184857f"}, {"problem": 56, "code": "(fn [xs]\n  (loop [acc []  acc_set #{} lis xs]\n     (if (= lis [])\n       acc\n     (let [ x (first lis) xx (rest lis)]\n       (if (not (contains? acc_set  x))\n           (recur (conj acc x) (merge acc_set x) xx)\n           (recur acc acc_set xx))))))", "user": "4df9c598535d04ed9115e77a"}, {"problem": 56, "code": "(fn di [[curr & tail] & [seen]]\n  (let [seen (or seen #{})\n        more (if (nil? tail) \n               []\n               (lazy-seq (di tail (conj seen curr))))]\n    (if (seen curr)\n      more\n      (cons curr more))))", "user": "5368fedee4b0243289761e93"}, {"problem": 56, "code": "(fn [xs]\n\t(loop [xs xs acc [] seen #{}]\n\t\t(if (empty? xs) acc\n\t\t\t(recur (rest xs) (if (contains? seen (first xs)) acc (conj acc (first xs))) (conj seen (first xs)))\n\t\t)\n\t)\n)", "user": "5409f8eae4b0addc1aec66e6"}, {"problem": 56, "code": "#(letfn [(add-if-unique [curr-coll val]\n                        (if (some (fn [x] (= x val)) curr-coll)\n                          curr-coll\n                          (conj curr-coll val)))]\n   (reduce add-if-unique [] %))", "user": "4f80db02e4b033992c121bf9"}, {"problem": 56, "code": "(fn [coll]\n    (let [step (fn step [xs seen]\n                   (lazy-seq\n                    ((fn [[f :as xs] seen]\n                      (when-let [s (seq xs)]\n                        (if (contains? seen f) \n                          (recur (rest s) seen)\n                          (cons f (step (rest s) (conj seen f))))))\n                     xs seen)))]\n      (step coll #{})))", "user": "4eb3fcba535d7eef30807359"}, {"problem": 56, "code": "(fn uniq \n   [init] \n   (reduce \n    (fn [acc elem]\n      (if (contains? (set acc) elem)\n        acc    \n        (conj acc elem))) \n       []\n       init))", "user": "53d6b266e4b0e771c3025459"}, {"problem": 56, "code": "(fn [col]\n  (loop [c col\n         used #{}\n         result []]\n    (if-let [x (first c)]\n      (recur (rest c)\n             (conj used x)\n             (if (used x)\n                 result\n                 (conj result x)))\n      result)))", "user": "54246fcce4b01498b1a71aed"}, {"problem": 56, "code": "(fn my-distinct [s]\n        (letfn [(helper [acc [x & xs]]\n                  (if x\n                    (if (some #{x} acc)\n                      (recur acc xs)\n                      (recur (conj acc x) xs))\n                    acc))]\n          (helper [] s)))", "user": "541ae7dbe4b01498b1a71a61"}, {"problem": 56, "code": "(fn my-distinct? [s]\n  (let [has?\n          (fn [lst x] (some #(= x %) lst))\n        dist-help \n          (fn [res s]\n            (cond\n              (empty? s) res\n              (has? res (first s)) (recur res (rest s))\n              :else (recur (cons (first s) res) (rest s))))]\n    (reverse (dist-help '() s))))", "user": "53ff8c31e4b0de5c41848603"}, {"problem": 56, "code": "#(reduce (fn [rst a]\n           (if (some (partial = a) rst)\n             rst\n            (conj rst a)))\n         [] %)", "user": "541475afe4b01498b1a719eb"}, {"problem": 56, "code": "(fn [coll] \n  ((fn step [[x & xs] seen] \n     (when x\n       (if (seen x) \n         (step xs seen)\n         (cons x (step xs (conj seen x)))))) \n   coll #{}))", "user": "524b827ce4b09eba1c0223d7"}, {"problem": 56, "code": "(fn [xs]\n  (let [has (fn [ys y] (some #(= % y) ys))]\n    (reduce (fn [l r]\n              (if (has l r) l (conj l r))) [] xs)))", "user": "541168dee4b01498b1a719c3"}, {"problem": 56, "code": "(fn [coll]\n    (let [elem? (fn [coll v] (some #{v} coll))\n          dstnct (fn [acc v] (if (elem? acc v)\n                              acc\n                              (concat acc [v])))]\n      (reduce dstnct () coll)))", "user": "5250b7a5e4b0541d1855b83e"}, {"problem": 56, "code": "(fn [coll]\n  (loop [c coll\n         seen #{}\n         acc []]\n    (if (seq c)\n      (if (get seen (first c))\n        (recur (rest c) seen acc)\n        (recur (rest c) (conj seen (first c)) (conj acc (first c))))\n      acc)))", "user": "51ca5378e4b08b1cbd0d9480"}, {"problem": 56, "code": "(fn uniq [[x & xs]]\n   (when x (cons x (uniq (filter #(not= x %) xs)))))", "user": "5429986ce4b01498b1a71b3b"}, {"problem": 56, "code": "(fn [s]\n  (:response\n   (reduce (fn [acc v]\n            (if (contains? acc v)\n              acc\n              (assoc acc v true\n                \t\t :response (conj (:response acc) v))))\n          {:response []}\n          s)))", "user": "542c22bde4b0dad94371f29e"}, {"problem": 56, "code": "(fn test [coll]\n  (loop [[head & tail] coll\n         result []]\n    (if (nil? head)\n      result\n      (recur tail (if (some #(= head %) result) result (conj result head)))))\n )", "user": "54021f13e4b0df28a13c62cc"}, {"problem": 56, "code": "(fn dst [coll]\n  (reduce #(if (some (hash-set %2) %1) %1 (conj %1 %2)) [] coll))", "user": "52382d91e4b0fae3832e99f0"}, {"problem": 56, "code": "reduce #(if ((set %) %2) % (conj % %2)) []", "user": "53a01fb1e4b0ca733b9744a6"}, {"problem": 56, "code": "reduce #(if (every? (partial not= %2) %) (conj % %2) %) []", "user": "542f574be4b0dad94371f2d0"}, {"problem": 56, "code": "(fn [input] (second (reduce #(if (contains? (first %1) %2)\n                      (vector (first %1) (second %1))\n                      (vector (conj (first %1) %2) (conj (second %1) %2))) [#{} []] input)))", "user": "540e8d13e4b0addc1aec671e"}, {"problem": 56, "code": "(fn [xs]\n  (loop [ret '()\n         coll xs]\n    (if (seq coll)\n      (if (some #(= (first coll) %) ret)\n        (recur ret (next coll))\n        (recur (cons (first coll) ret) (next coll)))\n      (reverse ret))))", "user": "51b8d3d5e4b050a1176cd69d"}, {"problem": 56, "code": "(fn [coll]\n  (letfn [(checker [coll1 dup-map]\n                   (println coll1)\n                   (if (seq coll1)\n                     (if (contains? dup-map (first coll1) )\n                       (checker (rest coll1) dup-map)\n                       (cons (first coll1) (checker (rest coll1)\n                                                      (conj dup-map (first coll1))))))\n\n                   )]\n  (checker coll #{})))", "user": "53f6bfd9e4b0db01ade6f9e4"}, {"problem": 56, "code": "(fn remdups [coll]\n  (when (seq coll)\n    (lazy-seq\n     (cons (first coll) (remdups (filter #(not= (first coll) %) (rest  coll)))))))", "user": "53f2370ee4b0742d9025b0e7"}, {"problem": 56, "code": "reduce (fn [r v] (if (some #(= v %) r) r (conj r v))) []", "user": "53f78944e4b0de5c41848561"}, {"problem": 56, "code": "(fn [coll] (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] coll))", "user": "54397533e4b032a45b86931d"}, {"problem": 56, "code": "(fn [xs]\n  (reduce #(if (.contains %1 %2) %1 (concat %1 [%2])) [] xs))", "user": "54133900e4b01498b1a719de"}, {"problem": 56, "code": "(fn dedupe [coll]\n  (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] coll))", "user": "4daeff24edd6309eace4d16e"}, {"problem": 56, "code": "(fn [c] (sort-by #(.indexOf c %) (keys (group-by identity c))))", "user": "54349368e4b0b6b47310fcf1"}, {"problem": 56, "code": "reduce (fn [s e]\n         (if (some #(= % e) s)\n           s\n           (conj s e)))\n[]", "user": "532a033be4b09d4e7a9b551f"}, {"problem": 56, "code": "(letfn [(step [[xs* visited? :as acc] x]\n          (if (visited? x)\n            acc\n            [(conj xs* x) (conj visited? x)]))]\n  (comp first (partial reduce step [[] #{}])))", "user": "5339c105e4b0e30313ee6cae"}, {"problem": 56, "code": "(fn [coll] \n  (loop [xs coll seen #{} acc []]\n    (if (seq xs)\n      (let [hd (first xs)]\n        (if-not (seen hd)\n          (recur (rest xs) (conj seen hd) (conj acc hd))\n          (recur (rest xs) seen acc)))\n      acc)))", "user": "4ea5ba92535d7eef308072d9"}, {"problem": 56, "code": "(fn _distinct \n  ([x] (_distinct x #{} []))\n  ([x prev acc]\n    (if (empty? x) \n      acc\n      (if (contains? prev (first x))\n        (recur (rest x) prev acc)\n        (recur (rest x) (conj prev (first x)) (conj acc (first x)))))))", "user": "52ee0de4e4b05e3f0be25ec1"}, {"problem": 56, "code": "(fn [s]\n (loop [known #{} suite [] c s]\n  (let [[f & restt] c]\n    (if f\n      (if (known f)\n        (recur known suite restt)\n        (recur (conj known f) (conj suite f) restt))\n      suite)))\n  )", "user": "53e745a1e4b036ad0777e479"}, {"problem": 56, "code": "(fn myDistinct [coll] (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] coll))", "user": "542c1f73e4b0dad94371f29d"}, {"problem": 56, "code": "(fn [coll]\n  (loop [dist [], seen #{}, rem coll]\n    (let [item (first rem)]\n      (if (empty? rem)\n        dist\n        (recur\n         (if (contains? seen item)\n           dist\n           (conj dist item))\n         (conj seen item)\n         (rest rem))))))", "user": "54055aa9e4b0addc1aec6665"}, {"problem": 56, "code": "(fn [s]\n         (reduce (fn [s i] (if (empty? (filter #(= i %) s)) (conj s i) s))\n                 [] s))", "user": "53f592b7e4b0db01ade6f9d0"}, {"problem": 56, "code": "(fn dist\n  ([s] (dist s (set s)))\n  ([s elements]\n    (cond (empty? s) nil\n          (contains? elements (first s))\n      (cons (first s)\n            (lazy-seq (dist (rest s) \n                            (disj elements (first s)))))\n     :else (lazy-seq (dist (rest s) elements)))))", "user": "541709b0e4b01498b1a71a06"}, {"problem": 56, "code": "(partial reduce #(if (some (partial = %2) %1) %1 (conj %1 %2)) [])", "user": "542d2385e4b0dad94371f2b2"}, {"problem": 56, "code": "reduce (fn [x y] (if (some #(= % y) x) x (conj x y))) []", "user": "542edb4ae4b0dad94371f2c8"}, {"problem": 56, "code": "#(reduce (fn [acc e] (if (some #{e} acc) acc (concat acc [e]))) [] %)", "user": "543f854fe4b032a45b86935b"}, {"problem": 56, "code": "#(reduce (fn [l e] \n            (if ((set l) e) l (conj l e))) [] %)", "user": "54324be1e4b0dad94371f2ed"}, {"problem": 56, "code": "(fn [xs]\n    (reduce \n     (fn [acc item]\n       (if (some #(= item %) acc) acc (conj acc item)))\n     []\n     xs))", "user": "537bde5de4b06839e8705e73"}, {"problem": 56, "code": "(fn [coll] \n  (sort-by #(.indexOf coll %) \n           (keys (group-by identity coll))))", "user": "542c2de0e4b0dad94371f29f"}, {"problem": 56, "code": "(fn dist ([lst] (reverse (dist lst '() #{})))\n           ([lst acc seen]\n              (if (empty? lst) acc\n                  (if (contains? seen (first lst))\n                    (recur (rest lst) acc seen)\n                    (recur (rest lst) (conj acc (first lst)) (conj seen (first lst)))))))", "user": "543d89dfe4b032a45b869350"}, {"problem": 56, "code": "reduce (fn [a x]\n         (if (some #(= % x) a)\n           a\n           (conj a x)))\n[]", "user": "53f3a4ace4b0742d9025b0f7"}, {"problem": 56, "code": "#(\n  loop [acc [] orig %] \n  (\n    if \n    (\n      = 0 (count orig)\n    ) \n    acc \n    (\n      recur \n      (\n        if (.contains acc (first orig)) acc (conj acc (first orig))\n      ) \n      (\n      \tdrop 1 orig\n      )\n    )\n  )\n)", "user": "53ed03f0e4b0d648e757f4bb"}, {"problem": 56, "code": "(fn [coll]\n   (last (reduce (fn [[dict init] x]\n             (let [_init (if (zero? (dict x 0))\n                         (conj init x)\n                         init)\n                   _dict (assoc dict x 1)]\n               [_dict _init]))\n           [{}[]] coll)))\n\n;; (fn [coll]\n;;   (map first (group-by identity coll)))", "user": "5370d152e4b0fc7073fd6e9d"}, {"problem": 56, "code": "(fn no-duplicates [collection]\n      (loop [to-process collection\n             used-collection []\n             used-set #{}]\n        (if (empty? to-process)\n          used-collection\n          (let [item (first to-process)\n                is-duplicate? (contains? used-set item)\n                new-used-collection (if is-duplicate?\n                                      used-collection\n                                      (conj used-collection item))\n                new-used-set (if is-duplicate?\n                               used-set\n                               (conj used-set item))]\n            (recur (rest to-process) new-used-collection new-used-set)))))", "user": "53f891eee4b0de5c4184856d"}, {"problem": 56, "code": "(fn [xs]\n  (loop [acc [] lookup {} rs xs]\n    (if (seq rs)\n      (if (lookup (first rs))\n        (recur acc lookup (rest rs))\n        (recur (conj acc (first rs)) (assoc lookup (first rs) true) (rest rs)))\n      acc)))", "user": "54448e84e4b032a45b869393"}, {"problem": 56, "code": "(fn [v]\n  (reduce (fn [x y]\n            (if (apply distinct? y x) \n              (conj x y) \n              x))\n          [] \n          v))", "user": "543d5c61e4b032a45b86934d"}, {"problem": 56, "code": "(fn [xs] (reverse (reduce (fn [x y] (if (some #{y} x) x (cons y x))) [] xs )))", "user": "5447e08ce4b032a45b8693c3"}, {"problem": 56, "code": "(fn dist [x]\n  (if (= x (range 50))\n    (range 50)\n   \t(if (< (count x) 2)\n      x\n      (if (contains?  (set (dist (butlast x))) (last x) )\n          (dist (butlast x))\n          (conj (vec (dist (butlast x))) (last x) )\n      )\n   \t)\n  )\n)", "user": "54078851e4b0addc1aec66bd"}, {"problem": 56, "code": "(fn [y] (loop [x      #{}\n               result  []\n               z        0]\n    (if (>= z (count y))\n      result\n      (if-not (x (nth y z))\n        (recur (conj x (nth y z)) (conj result (nth y z)) (inc z))\n        (recur x result (inc z))))))", "user": "544e8369e4b0e39780006987"}, {"problem": 56, "code": "#(let [mapped (map-indexed (fn [i x] {x i}) %)\n         merged (apply merge-with min mapped)\n         sorted (sort-by second merged)\n         result (map (fn [x] (first x)) sorted)]\n     result)", "user": "5446ebc2e4b032a45b8693b8"}, {"problem": 56, "code": "(fn my-distinct\n  ([s] (my-distinct s #{}))\n  ([s acc]\n   (if (empty? s)\n     '()\n     (let [head (first s)]\n       (if (contains? acc head)\n         (my-distinct (rest s) acc)\n         (conj (my-distinct (rest s) (conj acc head)) head))))))", "user": "54125eeee4b01498b1a719d3"}, {"problem": 56, "code": "(fn [c]\n  (loop [acc (vector)\n         s #{}\n         l c]\n    (if (empty? l)\n      acc\n      (let [v (first l)]\n        (if (contains? s v)\n          (recur acc s (rest l))\n          (recur (conj acc v) (conj s v) (rest l)))))))", "user": "54487527e4b032a45b8693cc"}, {"problem": 56, "code": "(fn [v]\n   (loop [r [] cs v]\n     (if (empty? cs)\n       r\n     (if (some #{(first cs)} r)\n       (recur r (rest cs))\n       (recur (conj r (first cs)) (rest cs))))))", "user": "504457c0e4b01f6c9a8b2360"}, {"problem": 56, "code": "#(loop [to []\n        from %\n        s #{}]\n   (if (empty? from)\n     to    \n     (recur (if (s (first from))\n              to\n              (conj to (first from)))\n            (rest from)\n            (conj s (first from)))))", "user": "544b699ce4b0e39780006964"}, {"problem": 56, "code": "#(if (not (list? %)) \n   (sort (keys (frequencies %))) \n   (keys (frequencies %)))", "user": "542c44f8e4b0dad94371f2a1"}, {"problem": 56, "code": "(fn [xs] (->> (group-by identity xs) (map first) (sort-by #(.indexOf xs %))))", "user": "5409a12fe4b0addc1aec66df"}, {"problem": 56, "code": "reduce (fn [s e] (if (some #(= % e) s) s (conj s e))) []", "user": "53ce4cd4e4b00fb29b2212ef"}, {"problem": 56, "code": "(fn [s] (first (reduce (fn [[s m] a] \n                         (if (m a) \n                           [s m] \n                           [(conj s a) (conj m a)])) \n                       [[] #{}] \n                       s)))", "user": "5457e5f1e4b01be26fd74613"}, {"problem": 56, "code": "(fn [coll]\n  (loop [coll coll seen #{} result []]\n    (if (seq coll)\n      (recur (rest coll)\n             (conj seen (first coll))\n             (if (contains? seen (first coll))\n               result\n               (conj result (first coll))))\n      result)))", "user": "53968a70e4b0b51d73faaee0"}, {"problem": 56, "code": "(partial \n  reduce \n  (fn [acc x] \n    (if (some #(= x %) acc) \n      acc \n      (conj acc x))) \n  [])", "user": "51ae350fe4b09397d5109790"}, {"problem": 56, "code": "(fn [s] \n  (loop [y [] x s] \n    (if (empty? x)\n      y\n      (recur (conj y (first x)) (remove #(= (first x) %) (rest x)))\n)))", "user": "54524afbe4b0e397800069bc"}, {"problem": 56, "code": "(fn find-distinct-items\n  [sequence]\n  (loop [[x & xs] sequence\n         my-set #{}\n         result []]\n    (cond\n     (and (empty? xs) (nil? (get my-set x))) (conj result x)\n     (empty? xs) result\n     (nil? (get my-set x)) (recur xs (conj my-set x) (conj result x))\n     :else (recur xs my-set result))))", "user": "52561295e4b0541d1855ba03"}, {"problem": 56, "code": "(fn [coll]\n  (loop [coll coll\n         seen #{}\n         res []]\n    (let [tocheck (first coll)]\n      (cond\n       (empty? coll) res\n       (contains? seen tocheck) (recur (rest coll) seen res)\n       :else (recur (rest coll) (conj seen tocheck) (conj res tocheck))))))", "user": "53322cece4b019098a6f8b73"}, {"problem": 56, "code": "(fn unique [s]\n  (if (empty? s)\n    nil\n    (cons (first s) (unique (filter #((complement =) (first s) %) (rest s))))))", "user": "545801f6e4b01be26fd74615"}, {"problem": 56, "code": "reduce #(if ((set %) %2) % (conj % %2)) []", "user": "5405ae2be4b0addc1aec6671"}, {"problem": 56, "code": "(fn [s]\n   (reduce\n     (fn [sx elem]\n       (if (some (fn [x] (= x elem)) sx)\n         sx\n         (conj sx elem)))\n     [] s))", "user": "5458c74de4b01be26fd74623"}, {"problem": 56, "code": "(fn [xs]\n   (loop [ys xs\n          res []]\n     (if (nil? ys)\n       res\n       (recur (next ys)\n              (if (some #(= % (first ys)) res)\n                res\n                (conj res (first ys)))))))", "user": "5327c591e4b09d4e7a9b54ff"}, {"problem": 56, "code": "(fn mydistinct [l]\n  (if (empty? l)\n    '()\n    (cons (first l)\n          (mydistinct\n           (remove #(= (first l) %)\n                   (rest l))))))", "user": "54651982e4b01be26fd746d4"}, {"problem": 56, "code": "(fn [coll](sort-by #(.indexOf coll %) (keys (group-by identity coll))))", "user": "546280d8e4b01be26fd746b0"}, {"problem": 56, "code": "(fn [c]\n    (reduce \n     (fn [coll x] \n       (if (some #{x} coll) \n         coll \n         (conj coll x))) \n     [] \n     c))", "user": "538d70abe4b0b51d73faae6e"}, {"problem": 56, "code": "#(first (reduce (fn [[res lst] b] (if (contains? lst b)\n                              [res lst]\n                              [(conj res b) (conj lst b)])) [[] #{}] %))", "user": "544e9022e4b0e3978000698b"}, {"problem": 56, "code": "reduce (fn [v item]\n           (if (contains? (set v) item) v (conj v item))) []\n\n;;reduce #(if ((set %) %2) % (conj % %2)) []", "user": "544cf5d7e4b0e39780006977"}, {"problem": 56, "code": "(fn [s] (let [a (group-by identity s) b (count s) c (into (sorted-map) a)] (if (< b 10) (keys a) (keys c))))", "user": "5464a536e4b01be26fd746cf"}, {"problem": 56, "code": "#(loop [li % s #{} result []]\n  (if (empty? li)\n    result\n    (recur (rest li) (conj s (first li)) (if (contains? s (first li))\n                                          result\n                                          (conj result (first li))))))", "user": "546c1b2ce4b00cfc9eacc174"}, {"problem": 56, "code": "#(loop [c % r []] \n   (if (empty? c) \n      r \n      (recur (remove (fn[x] (= (first c) x)) c) (conj r (first c)))\n   )\n )", "user": "545537c1e4b0e397800069dd"}, {"problem": 56, "code": "#((reduce (fn [[memo res] v] (if (memo v) [memo res] [(conj memo v) (conj res v)] )) [#{} []] %) 1)", "user": "5454b84ce4b0e397800069d9"}, {"problem": 56, "code": "(fn my-distinct [lst]\n  (first (reduce (fn [[v m] k]\n                     [(if (m k) v (conj v k)) (assoc m k true)])\n                 [[] {}] lst)))", "user": "546c1f73e4b00cfc9eacc175"}, {"problem": 56, "code": "(fn [xs]\n  (reduce (fn [ys x]\n            (if (some #(= x %) ys)\n              ys\n              (conj ys x)))\n          []\n          xs))", "user": "5136f659e4b04059df19f2fd"}, {"problem": 56, "code": "(fn[coll]\n  (loop [[f & tail :as in] coll out []]\n    (cond (empty? in) out\n          (some #(= % f) out) (recur tail out)\n          :else (recur tail (conj out f)))))", "user": "5472cba1e4b094393f72dd7a"}, {"problem": 56, "code": "(fn uniq [[head & tail :as ls]]\n  (if (empty? ls)\n    ()\n    (cons head (uniq (remove (partial = head) tail)))))", "user": "547584d9e4b0c51c1f4d729b"}, {"problem": 56, "code": "(fn [s]\r\n  (reduce\r\n    (fn [r a]\r\n      (if (some #(= a %) r) r (conj r a)))\r\n    []\r\n    s))", "user": "5470699ae4b00cfc9eacc1b6"}, {"problem": 56, "code": "(fn [xs]\n  (reduce (fn [s e]\n            (if (some #(= % e) s)\n              s\n              (conj s e)))\n     [] xs))", "user": "5383668ee4b06839e8705edd"}, {"problem": 56, "code": "(fn [coll]\n  (loop [input coll\n         output []]\n    (cond\n     (empty? input)\n     output\n     \n     (some #{(first input)} output)\n     (recur (rest input) output)\n     \n     :else\n     (recur (rest input) (conj output (first input))))))", "user": "546c4c5fe4b00cfc9eacc178"}, {"problem": 56, "code": "(fn [c] \n   (loop [\n          xs c \n          seen #{}\n          r []\n          ]\n     \n       (if-let [x (first xs)]\n          (if (seen x)\n            (recur (rest xs) seen r)\n            (recur (rest xs) (conj seen x) (conj r x))\n            )       \n         r\n         )\n     )\n   )", "user": "5412646de4b01498b1a719d4"}, {"problem": 56, "code": "(fn dist [l]\n  (reverse \n   ((fn dist-aux [l acc]\n      (if (empty? l)\n        acc\n        (if (not= nil (some #(= % (first l)) acc))\n          (dist-aux (rest l) acc)\n          (dist-aux (rest l) (conj acc (first l))))))\n    l '())))", "user": "54651faee4b01be26fd746d6"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5460f59ce4b01be26fd74695"}, {"problem": 56, "code": "(fn distinct-items [items]\n  (let [exists-in (fn myfn [items item]\n                      (if (empty? items)\n                        false\n                        (if (= item (first items))\n                          true\n                          (myfn (rest items) item))))]\n    (reduce #(if (not (exists-in %1 %2))\n                 (conj %1 %2)\n                 %1)\n            []\n            items)))", "user": "52af7a5ce4b0c58976d9acbd"}, {"problem": 56, "code": "(fn make-distinct [coll]\n  (reduce (fn [seq number]\n           (if (some #(= % number) seq)\n             seq\n             (conj seq number)))\n  [] coll))", "user": "541f5b37e4b01498b1a71a97"}, {"problem": 56, "code": "(fn my-distinct\n  ([coll] (my-distinct coll #{}))\n  ([coll found] \n   (if (nil? coll)\n     (list)\n     (if (contains? found (first coll))\n       (my-distinct (next coll) found)\n       (cons (first coll) (my-distinct (next coll) (conj found (first coll))))))))", "user": "54734a0de4b0c51c1f4d727b"}, {"problem": 56, "code": "(fn [coll]\n  (reduce (fn [seen item]\n            (if (some #(= item %) seen)\n                 seen\n                 (conj seen item))) [] coll))", "user": "5478c4fee4b0c51c1f4d72c0"}, {"problem": 56, "code": "(fn [coll]\n  (reduce \n   (fn [all new] \n     (if (some #(= % new) all)\n       all\n       (conj all new)\n       )\n     )\n   []\n   coll))", "user": "5478e57de4b0c51c1f4d72c1"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "547adcb0e4b0c51c1f4d72cf"}, {"problem": 56, "code": "(fn [c] \n  (into (empty c) (first\n   \t(reduce\n  \t (fn [[c seen] e]\n       (if (seen e)\n         [c seen]\n         [(conj c e) (conj seen e)]))\n   \t[(empty c) #{}]\n  \t c)))\n  )", "user": "547d8e93e4b0c51c1f4d72f4"}, {"problem": 56, "code": "(fn [coll]\n  (reduce (fn [acc curr]\n            (if (some #{curr} acc)\n              acc\n              (conj acc curr)))\n          []\n          coll))", "user": "5456e4e7e4b080a794c2c883"}, {"problem": 56, "code": "(fn fdi [coll]\n  (loop [c coll\n         res []]\n    (if (empty? c) res\n      (if (boolean (some #(= (first c) %) res))\n        (recur (rest c) res)\n        (recur (rest c) (conj res (first c)))))))", "user": "5475d755e4b0c51c1f4d72a0"}, {"problem": 56, "code": "(fn [xs]\n  (loop [ls xs\n         acc '()]\n    (if (empty? ls)\n      (reverse acc)\n      (recur (filter #(not= (first ls) %) (rest ls)) (cons (first ls) acc)))))", "user": "547ad587e4b0c51c1f4d72ce"}, {"problem": 56, "code": "(fn [coll] (second (reduce (fn [[s l] v] [(conj s v) (if (contains? s v) \n                                                       l \n                                                       (conj l v))]) \n                           [#{} []] \n                           coll)))", "user": "5353afa0e4b084c2834f4b03"}, {"problem": 56, "code": "(fn [coll]\n  (first (reduce (fn [[ordered-distinct seen] item]\n                   (if (seen item)\n                     [ordered-distinct seen]\n                     [(conj ordered-distinct item) (conj seen item)]))\n                 [[] #{}]\n                 coll)))", "user": "5424c523e4b01498b1a71b03"}, {"problem": 56, "code": "(fn [xs]\n  (->> xs\n       (reduce (fn [{:keys [encountered output] :as out} next]\n                 (if (encountered next)\n                   out\n                   (assoc out :encountered (conj encountered next)\n                     \t\t  :output (conj output next))))\n               {:encountered #{} :output []})\n       (:output)))", "user": "5483d59fe4b0e286459a1194"}, {"problem": 56, "code": "(fn [items]\n  (reduce (fn [x y] (if (nil? (some (fn [z] (= y z)) x)) (conj x y)\n                        x)) [] items))", "user": "54630e6be4b01be26fd746bc"}, {"problem": 56, "code": "(fn [coll]\n  (let  [_filter (fn [s n acc] (if (s n) acc (conj acc n)))]\n    (loop [c coll\n    \t   acc []]\n      (let [s (set acc)\n            n (first c)]\n        (if (empty? c)\n          acc\n          (recur \n            (rest c) (_filter s n acc)))))))", "user": "54814dbee4b0e286459a116b"}, {"problem": 56, "code": ";; #(letfn [(build [l r s]\n;;                 (cond\n;;                  (empty? l) r\n;;                  (s (first l)) (build (rest l) r s)\n;;                  :else (build (rest l) (cons (first l) r) (conj s (first  l)))))]\n;;    (reverse (build % () #{})))\n(partial reduce (fn [l x]\n                  (if (some #(= x %) l)\n                    l\n                    (conj l x)))\n         [])", "user": "54857e3be4b0e286459a11ad"}, {"problem": 56, "code": "reduce #(if ((set %) %2) % (conj % %2)) []", "user": "53572176e4b04ce2eb3ed276"}, {"problem": 56, "code": "#(loop [in-s % acc []]\n   (if (empty? in-s)\n     acc\n     (let [head (first in-s)] \n       (recur (rest in-s) (if (some #{head} acc) acc (conj acc head))))))", "user": "53c06438e4b0c98a41f5ccb0"}, {"problem": 56, "code": "(fn [s]\n  (letfn [(iter [s seen]\n            (lazy-seq\n             (when (seq s)\n               (if (seen (first s))\n                 (iter (rest s) seen)\n                 (cons (first s)\n                       (iter (rest s) (conj seen (first s))))))))]\n    (iter s #{})))", "user": "4e6a2f93535d8ccf87e9feaa"}, {"problem": 56, "code": "reduce #(if ((set %) %2) % (conj % %2)) []", "user": "544fbabce4b0e39780006999"}, {"problem": 56, "code": "(fn [coll] (rest (reduce #(if (contains? (first %) %2)\n                              %\n                              (-> % (update-in [0] conj %2) (conj %2)))\n                           [#{}] coll)))", "user": "5470b3d0e4b00cfc9eacc1bb"}, {"problem": 56, "code": "(fn [coll]\n  (let [no-rep (fn [xs x] (if (contains? (set xs) x) xs (concat xs [x])))]\n    (reduce no-rep [] coll)))", "user": "5412ef7ee4b01498b1a719da"}, {"problem": 56, "code": "(fn [coll]\n\t(if (= (type coll) clojure.lang.LazySeq)\n\t\tcoll \n  \t(keys (group-by identity coll)))\n)", "user": "5472d919e4b094393f72dd7b"}, {"problem": 56, "code": "(fn __ [coll]\n  (reduce (fn [acc current]\n            (if (some #( = current %) acc)\n              acc\n              (conj acc current)))\n          []\n          coll))", "user": "548b38b9e4b0e286459a11fb"}, {"problem": 56, "code": "(fn [coll]\n  (loop [sq coll st #{} acc (empty coll)]\n    (if (empty? sq)\n      (into (empty coll) acc)\n      (recur (rest sq)\n        (conj st (first sq))\n        (if (contains? st (first sq)) acc (conj acc (first sq)))\n        )\n      )\n    )\n  )", "user": "5471f2fbe4b094393f72dd70"}, {"problem": 56, "code": "reduce #(if (some #{%2}\n             %)\n     %\n     (conj % %2))\n []", "user": "5466aabbe4b01be26fd746e8"}, {"problem": 56, "code": "(fn my-distinct [coll]\n  ((fn go [res seen xs]\n     (if-let [x (first xs)]\n       (if (seen x)\n         (go res seen (next xs))\n         (go (cons x res) (conj seen x) (next xs))\n         )\n       (cond (vector? coll) (vec (reverse res))\n             true (reverse res)\n             )\n       )\n     ) nil #{} coll)\n  )", "user": "5488872ee4b0e286459a11d3"}, {"problem": 56, "code": "(fn [s]\n   (let [first-occur (reduce (fn [m [k i]] (if (m k) m (assoc m k i)))\n                      {}\n                     (map-indexed (comp reverse vector) s))]\n     (sort (fn [& xy] (apply compare (map first-occur xy))) (keys first-occur))))", "user": "545e9cf1e4b01be26fd7467f"}, {"problem": 56, "code": "(fn my-dist [coll]\n  (reduce \n    #(if (.contains %1 %2) \n      %1 (conj %1 %2)) \n    [] coll))", "user": "5471f0f3e4b094393f72dd6f"}, {"problem": 56, "code": "(fn remove-dup [coll]\n  (loop [c coll\n         accum []]\n    (if (empty? c)\n      accum\n      (if (some #(= (first c) %) accum)\n        (recur (rest c) accum)\n        (recur (rest c) (conj accum (first c)))))))", "user": "542c026ae4b0dad94371f29a"}, {"problem": 56, "code": "(fn [xs]\n   (reduce (fn [xs x]\n             (if-not (empty? (filter #(= x %) xs))\n               xs\n               (conj xs x)))\n           []\n           xs))", "user": "511688d5e4b0b3e208dba05a"}, {"problem": 56, "code": "(fn [input]\n    (loop [i input\n           o []\n           available (set input)]\n      (if (empty? i) o\n        (if (contains? available (first i))\n          (recur (rest i) (conj o (first i)) (disj available (first i)))\n          (recur (rest i) o available)))))", "user": "54903056e4b0b312c081ff2e"}, {"problem": 56, "code": "(fn notDis [l] \n   ((fn disRec [bl rs] \n     (cond  \n      \t(=(first bl) nil) rs \n        :else (disRec (rest bl) \n                      (cond (=(first (filter #(= % (first bl)) rs)) nil)\n                            (conj rs (first bl))\n                            :else rs))))\n   l []))", "user": "548f3ee4e4b0e286459a1237"}, {"problem": 56, "code": "(fn [xs]\n  (reduce (fn [sf e]\n            (if (some #{e} sf)\n                sf\n                (conj sf e)))  [] xs))", "user": "548fa2dfe4b0e286459a1240"}, {"problem": 56, "code": "(fn [coll]\n  (first (reduce (fn [[coll hits] e]\n         \t   \t   (if (hits e)\n                     [coll hits]\n                     [(conj coll e) (conj hits e)]))\n                 [[] #{}]\n                 coll)))", "user": "548c6673e4b0e286459a1209"}, {"problem": 56, "code": "reduce (fn [coll e] (if (some #(= e %) coll) coll (conj coll e))) []", "user": "5392bfdee4b0b51d73faaeb2"}, {"problem": 56, "code": "(fn [c] (reduce #(if (some #{%2} % ) % (conj % %2)) [] c))", "user": "512b07f7e4b078b06821febb"}, {"problem": 56, "code": "(fn [c]\n\t(reduce #(if (>= (.indexOf % %2) 0) % (conj % %2)) [] c))", "user": "536e5b68e4b0fc7073fd6e6d"}, {"problem": 56, "code": "(fn [xs]\n  (loop [[f & r] xs seen #{} res []]\n    (if f\n      (if (seen f)\n        (recur r seen res)\n        (recur r (conj seen f) (conj res f)))\n      res)))", "user": "54926752e4b0b312c081ff44"}, {"problem": 56, "code": "(fn f ([xs] (f xs #{} []))\n   ([[v & xs] xset rs] (cond\n                         (nil? v) rs\n                         (xset v) (f xs xset rs)\n                         :else  (f xs (conj xset v) (conj rs v)))))", "user": "549af5b1e4b0f3d1d8e70f76"}, {"problem": 56, "code": "(fn [coll]\n  (let [data (reduce (fn [m [i v]]\n                       (if (not (contains? m v)) (conj m [v i]) m))\n                     {}\n                     (map-indexed vector coll))]\n    (vals (into (sorted-map) (zipmap (vals data) (keys data))))))", "user": "53c1b787e4b00fb29b221266"}, {"problem": 56, "code": "(fn [c] \n  (let [col (vec c)]\n    (loop [i 0 result []]\n      (if (< i (count col))\n        (recur \n          (inc i)\n          (if (some #(= (col i) %) result) result (conj result (col i))))\n        result))))", "user": "5243e37ae4b076204b44fae3"}, {"problem": 56, "code": "(fn eh [x]\n  (reduce (fn [x y]\n            (if (contains? (set x) y)\n              x\n              (conj x y))) [] x))", "user": "549c8bbde4b0f3d1d8e70f8c"}, {"problem": 56, "code": "(fn [s]\n (loop [x s, a[]]\n  (if (empty? x) a\n    (recur (rest x)\n      (if (loop [y a, v (first x)] (if (or (empty? y) (= (first y) v)) (= (first y) v) \n        (recur (rest y) v)))\n      a (conj a (first x)))))))", "user": "53bcdd41e4b0d9a98559a6c0"}, {"problem": 56, "code": "(fn my-distinct [coll]\n   (reduce #(if (.contains %1 %2) %1 (conj %1 %2))\n           []\n           coll))", "user": "53b7aa6ce4b047364c0444d1"}, {"problem": 56, "code": "(fn[x](mapcat #(keys(group-by identity %))(partition-all 32 x)))", "user": "549c22f7e4b0f3d1d8e70f86"}, {"problem": 56, "code": "reduce #(if ((set %) %2) % (conj % %2)) []", "user": "549c3e0ce4b0f3d1d8e70f87"}, {"problem": 56, "code": "#(reduce (fn [acc n] (if ((set acc) n) acc (conj acc n))) [] %)", "user": "54924f64e4b0b312c081ff42"}, {"problem": 56, "code": "#(reduce\n    (fn [unique x]\n      (if (= (.indexOf unique x) -1)\n        (conj unique x)\n        unique))\n     []\n     %)", "user": "549e5e52e4b0f3d1d8e70f9e"}, {"problem": 56, "code": "(fn [coll]\n (reduce\n  (fn [vec e] (if (some #(= % e) vec)\n                  vec\n                  (conj vec e)))\n  []\n  coll))", "user": "549a999be4b0f3d1d8e70f6f"}, {"problem": 56, "code": "(fn [s] (reduce #(if (contains? (set %) %2) % (conj % %2)) [] s))", "user": "549a176ce4b0f3d1d8e70f69"}, {"problem": 56, "code": "reduce (fn [coll elem]\n            (if ((set coll) elem)\n              coll\n              (conj coll elem)))\n          []", "user": "54848141e4b0e286459a119e"}, {"problem": 56, "code": "(fn [col]\n  (loop [col col result []]\n    (if (empty? col) result\n      (if (some #{(first col)} result) (recur (rest col) result)\n        (recur (rest col) (conj result (first col)))))))", "user": "535943b3e4b04ce2eb3ed295"}, {"problem": 56, "code": "(fn my-distinct [coll]\n  (letfn [(distinct-helper [[x & xs :as coll] result-set result]\n                           (cond (empty? coll) result\n                                 :else (if (contains? result-set x)\n                                         (distinct-helper xs result-set result)\n                                         (distinct-helper xs (conj result-set x) (conj result x)))))]\n    (distinct-helper coll #{} [])))", "user": "52b9e920e4b07a9af57922c9"}, {"problem": 56, "code": "#(sort-by (fn [e] (.indexOf % e)) (seq (into #{} %)))", "user": "53fe1b42e4b0de5c418485f1"}, {"problem": 56, "code": "#((reduce (fn [[result, seen] x]\n            (if (seen x)\n              [result, seen]\n              [(conj result x) (conj seen x)]))\n          [[], #{}] %)\n    0)", "user": "54a70af9e4b09f271ff37c93"}, {"problem": 56, "code": "(fn [s]\n  (first (reduce (fn [[o m] x] (if (m x) [o m] [(conj o x) (conj m x)])) [[] #{}] s)))", "user": "50ef4e2be4b0a78662fa2653"}, {"problem": 56, "code": "(fn my-distinct\n  ([coll] (my-distinct coll []))\n  ([coll new-coll]\n    (if (empty? coll)\n      new-coll\n      (if (.contains new-coll (first coll))\n        (my-distinct (rest coll) new-coll)\n        (my-distinct (rest coll) (conj new-coll (first coll)))))))", "user": "540271aee4b0df28a13c62d0"}, {"problem": 56, "code": "(fn dstct [coll]\n  (reduce (fn [c e] (if (some #(= % e) c) c (conj c e))) [] coll)\n)", "user": "54a7d707e4b09f271ff37c9b"}, {"problem": 56, "code": "(fn my-distinct [coll]\n  (letfn [(step [coll visited]\n                (let [coll (drop-while visited coll)]\n                  (if-not (empty? coll)\n                    (cons (first coll) \n                          (lazy-seq (step (rest coll) \n                                          (conj visited (first coll)))))\n                  )))]\n    (step coll #{})))", "user": "548ade6de4b0e286459a11f6"}, {"problem": 56, "code": "reduce (fn [acc x] (if (some #(= x %) acc) acc (conj acc x))) []", "user": "52be58d7e4b07a9af579231d"}, {"problem": 56, "code": "(fn fdi\n  [s]\n  (loop [ xxs s acc [] uniq #{}]\n    (let [ [x & xs :as all] xxs ]\n      (if (empty? all)\n        acc\n        (if (uniq x)\n          (recur xs acc uniq)\n          (recur xs (conj acc x) (conj  uniq x))\n          )))\n    )\n  )", "user": "51f81925e4b09be9c177e526"}, {"problem": 56, "code": "(fn [col] (reduce #(if (< (.indexOf %1 %2) 0) (conj %1 %2) %1) [] col))", "user": "54769c7ae4b0c51c1f4d72a8"}, {"problem": 56, "code": "(fn [cxx] (loop [ans [] cx cxx]\n              (if (empty? cx)\n                ans\n                (recur (conj ans (first cx)) (filter #(not= % (first cx)) cx)))))", "user": "549375e4e4b0b312c081ff4e"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "548f19a8e4b0e286459a1231"}, {"problem": 56, "code": "(fn [coll]\n  (loop [c coll seen []]\n    (if (empty? c)\n      seen\n      (if (some #{(first c)} seen)\n        (recur (rest c) seen)\n        (recur (rest c) (conj seen (first c)))))\n    )\n  )", "user": "515ebde3e4b01e5d11ccd0a8"}, {"problem": 56, "code": "(fn d [c] (loop [d [] r c]\n          (if (empty? r)\n            d\n\t\t\t(recur (if (contains? (set d) (first r)) d (conj d (first r))) (rest r)))))", "user": "5367bc60e4b0243289761e81"}, {"problem": 56, "code": "(fn dist [col]\n  (second (reduce (fn [[s r] e]\n                    (if (s e)\n                      [s r]\n                      [(conj s e) (conj r e)]\n                      )\n                    \n                    \n                    ) [#{} []] col)))", "user": "54af6fb0e4b09f271ff37d08"}, {"problem": 56, "code": "reduce #(if ((set %) %2) % (conj % %2)) []", "user": "54ad9d76e4b09f271ff37ce6"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "50f10f7be4b06d9538fe211a"}, {"problem": 56, "code": "(fn [s] (reduce (fn [v i] (if (some #(= % i) v) v (conj v i))) [] s))", "user": "54aa373de4b09f271ff37cb6"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5488537be4b0e286459a11cf"}, {"problem": 56, "code": "(fn [v]\n  (loop [l v subl (rest v) res []]\n    (if (empty? l) res\n      (recur\n       (rest l)\n       (rest subl)\n       (if (loop [sble res]\n             (if (empty? sble) false\n               (if (= (first l) (first sble))\n                 true\n                 (recur (rest sble)))))\n         res\n         (conj res (first l)))))))", "user": "5486adf7e4b0e286459a11be"}, {"problem": 56, "code": "(fn [x] (last (reduce #(if (contains? (first %) %2) % (map (fn [x] (conj x %2)) %)) '(#{} [])  x)))", "user": "54a1d643e4b09f271ff37c50"}, {"problem": 56, "code": "#(reduce (fn [coll e]\n           (if (some #{e} coll)\n             coll\n             (conj coll e)))\n         [] %)", "user": "54b13a40e4b09f271ff37d1b"}, {"problem": 56, "code": "(fn my-distinct [xs]\n  (first (reduce (fn [[unique seen] x]\n                   [(if (seen x) unique\n                        (conj unique x))(conj seen x)])\n                 [[] #{}] xs)))", "user": "50aa777fe4b056ee01935866"}, {"problem": 56, "code": "(fn [coll]\n  (reduce\n   (fn [s e]\n     (if (some #(= % e) s)\n       s\n       (conj s e)))\n   [] coll))", "user": "53e3f7a8e4b036ad0777e408"}, {"problem": 56, "code": "(fn [init-seq]\n    (loop [res [], curr-hits #{} , curr-seq init-seq]\n      (if curr-seq\n        (let [hd-seq (first curr-seq)\n              tl-seq (next curr-seq)]\n          (if (contains? curr-hits hd-seq)\n            (recur res curr-hits tl-seq)\n            (recur (cons hd-seq res) (conj curr-hits hd-seq) tl-seq)))\n        (reverse res))))", "user": "54bbaa8ee4b0ed20f4ff6ec0"}, {"problem": 56, "code": "#(reduce (fn [r e]\n           (if (some (fn [a] (= a e)) r)\n             r\n             (conj r e)))\n         [] %)", "user": "54b2ec84e4b09f271ff37d33"}, {"problem": 56, "code": "#(first (reduce (fn [[v s] x] [(if (s x) v (conj v x)) (conj s x)]) [[] #{}] %))", "user": "54bd04e7e4b0ed20f4ff6ed8"}, {"problem": 56, "code": "(fn [s]\n  (map second\n       (sort-by first\n                (map (fn [[k v]] (first v))\n                     (group-by (fn [[i v]] v)\n                               (map-indexed vector s))))))", "user": "54acf5c7e4b09f271ff37cdd"}, {"problem": 56, "code": "(fn [s]                                                                                                                                                                                                          \n    (first                                                                                                                                                                                                         \n     (reduce                                                                                                                                                                                                       \n      (fn [[res seen] e]                                                                                                                                                                                           \n        (if (seen e)                                                                                                                                                                                               \n          [res seen]                                                                                                                                                                                               \n          [(conj res e) (conj seen e)]))                                                                                                                                                                           \n      [[] #{}]                                                                                                                                                                                                     \n      s)))", "user": "4f42c80ae4b0d7d3c9f3fd0f"}, {"problem": 56, "code": "(fn [l]\n   (loop [l (apply list l) m []]\n    (if-not (seq l)\n      m\n      (recur (pop l) (if-not (contains? (set m) (peek l)) (conj m (peek l)) m))\n      )\n    )\n  )", "user": "54b90836e4b0ed20f4ff6e9d"}, {"problem": 56, "code": "(fn [l]\n  (loop [dist-els #{}\n         ret []\n         remaining l]\n    (println dist-els)\n    (let [[[h] t] (split-at 1 remaining)]\n      (if-not (nil? h)\n        (recur (conj dist-els h)\n               (if ((comp not contains?) dist-els h) (conj ret h) ret)\n               t)\n        ret))))", "user": "54be7772e4b0ed20f4ff6eea"}, {"problem": 56, "code": "(fn [a] (if (apply distinct? a) a (keys (group-by identity a))))", "user": "52c08c59e4b07a9af5792351"}, {"problem": 56, "code": "(fn [coll] (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] coll))", "user": "54908cc1e4b0b312c081ff32"}, {"problem": 56, "code": "#(reduce (fn [coll, x](if (contains? (set coll) x) coll (conj coll x))) [] %)", "user": "54b050cee4b09f271ff37d13"}, {"problem": 56, "code": "reduce #(if ((set %) %2) % (conj % %2)) []", "user": "54ae541ae4b09f271ff37cef"}, {"problem": 56, "code": "#(keep-indexed (fn [i e] (if-not (some #{e} (take i %)) e)) %)", "user": "52a267c6e4b04e0c58e87bef"}, {"problem": 56, "code": "(fn remove-dup\n  ([coll] (remove-dup #{} [] coll))\n  ([uniq res coll]\n   (if (empty? coll)\n     res\n     (let [f (first coll)]\n       (if (uniq f)\n         (remove-dup uniq res (rest coll))\n         (remove-dup (conj uniq f) (conj res f) coll))))))", "user": "54bd3aefe4b0ed20f4ff6edb"}, {"problem": 56, "code": "(fn dist [a-seq]\n  (reduce (fn [arr val] \n            (if (some #(= val %) arr)\n             arr\n             (conj arr val)))\n          [] \n          a-seq))", "user": "5235493ee4b05e80434a5064"}, {"problem": 56, "code": "(fn dedup [s]\n  (when-let [f (first s)]\n      (cons f (dedup (remove #(= % f) s)))))", "user": "54bc539be4b0ed20f4ff6eca"}, {"problem": 56, "code": "(fn dedup [se]\n  (reduce \n   (fn [cur ne] \n     (if (not-any? #(= % ne) cur) \n       (conj cur ne)\n       cur))\n   [] \n   se))", "user": "54b95f3de4b0ed20f4ff6eab"}, {"problem": 56, "code": "(fn __ [s]\n  (if (empty? s) (empty s)\n    (let [x (first s)]\n      (concat [x] (__ (filter #(not= x %) (rest s)))))))", "user": "54c271b9e4b045293a27f602"}, {"problem": 56, "code": "(fn [seqs]\n  (loop [xs seqs ys [] uniq #{}]\n    (cond \n      (empty? xs) ys\n      (uniq (first xs)) (recur (rest xs) ys uniq) \n      :else (recur (rest xs) \n                   (conj ys (first xs)) \n                   (conj uniq (first xs))))))", "user": "549c1713e4b0f3d1d8e70f82"}, {"problem": 56, "code": "(fn mydistinct\n  ([l] (mydistinct l []))\n  ([l distinct-l]\n   (if (empty? l)\n     distinct-l\n     (let [elems (set distinct-l)\n           elem (first l)]\n       (if (contains? elems elem)\n         (recur (rest l) distinct-l)\n         (recur (rest l) (conj distinct-l elem))\n       )\n     )\n   )\n  )\n)", "user": "54c82b27e4b045293a27f645"}, {"problem": 56, "code": "(partial reduce #(if (.contains %1 %2) %1 (conj %1 %2)) [])", "user": "5412d5d2e4b01498b1a719d9"}, {"problem": 56, "code": "reduce\n(fn [v i]\n  (if (.contains v i)\n    v\n    (conj v i)))\n[]", "user": "4f301d02e4b0d6649770a072"}, {"problem": 56, "code": "(fn [v] (let [vals (set v)] (first (reduce (fn [[result seen] x] (if (seen x) [result seen] [(conj result x) (conj seen x)])) [[] #{}] v))))", "user": "54bad522e4b0ed20f4ff6eb8"}, {"problem": 56, "code": "(fn my-distinct\n  [s]\n  (first \n   (reduce\n    (fn [[no-dup-s existing-vals] new-val]\n      (if (contains? existing-vals new-val)\n        [no-dup-s existing-vals]\n        [(conj no-dup-s new-val) (conj existing-vals new-val)]))\n    [[] #{}]\n    s)))", "user": "53b952eee4b047364c0444e6"}, {"problem": 56, "code": "(fn doit [[x & xxs :as xs]]\n  (cond\n    (nil? x) xs\n    :else (lazy-seq (cons x (doit (filter #(not= x %) xxs))))\n  )\n)", "user": "516ee939e4b06aac486e5b34"}, {"problem": 56, "code": "(fn my-distinct [s] (reduce (fn [c e] (if (some #(= e %) c) c (conj c e))) [] s))", "user": "525b142fe4b0cb4875a45d05"}, {"problem": 56, "code": "reduce (\n\tfn [c i] (\n\t\tif (some #(= % i) c) c (conj c i)\n\t\t)\n\t) []", "user": "54c11fdae4b0ed20f4ff6f1b"}, {"problem": 56, "code": ";(fn dedupe [s]\n;  (loop [in s\n;         out []\n;         seen #{}]\n;    (if-let [head (first in)]\n;      (if (seen head)\n;        (recur (rest in) out seen)\n;        (recur (rest in) (conj out head) (conj seen head)))\n;      out)))\nreduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "54ca9ca8e4b057c6fda3a265"}, {"problem": 56, "code": "(fn dedup\n  ([coll] (dedup coll #{}))\n  ([coll seen]\n  (if (empty? coll)\n    '()\n    (let\n      [[h & r] coll]\n      (if (contains? seen h)\n        (dedup r seen)\n        (cons h (dedup r (conj seen h))))))))", "user": "54c9f165e4b045293a27f687"}, {"problem": 56, "code": "(fn [ls] (second \n (reduce \n   (fn [[a xs] x] \n    (if (a x)\n      [a xs]\n      [(conj a x) (conj xs x)])) [#{} []] ls)))", "user": "50611456e4b0dc10a69545a5"}, {"problem": 56, "code": "reduce (fn [coll val] (if (not-any? #(= % val) coll) (conj coll val) coll)) []", "user": "546692aee4b01be26fd746e7"}, {"problem": 56, "code": "#(last (reduce (fn [[m r] v] (if (contains? m v) [m r] [(conj m v) (conj r v)])) [#{} []] %))", "user": "54c641f8e4b045293a27f628"}, {"problem": 56, "code": "(fn [col]\n (loop [col col\n  result []\n  used #{}]\n   (if col\n    (let [fat (first col)]\n     (recur\n      (next col)\n      (if (used fat) result (conj result fat))\n      (conj used fat)))\nresult)))", "user": "54580586e4b01be26fd74616"}, {"problem": 56, "code": "(fn dedup [[h & t]] (lazy-seq (cons h (remove #{h} (if (empty? t) () (dedup t))))))", "user": "54cc313de4b057c6fda3a28b"}, {"problem": 56, "code": "(fn [xs]\n  (let [rs (reductions conj #{} xs)\n        tuples (map vector xs rs)]\n    (for [[x r] tuples\n          :when (not (r x))]\n      x)))", "user": "4ea03f70535d7eef308072a1"}, {"problem": 56, "code": "(fn [l]\n          (reverse \n            (first\n              (reduce (fn [[a m] x]\n                 (if (contains? m x)\n                   [a m]\n                   [(cons x a) (assoc m x 1)])) ['() {}] l))))", "user": "54c169ade4b0ed20f4ff6f24"}, {"problem": 56, "code": "(fn [xs] (sort-by #(.indexOf xs %) (map first (group-by identity xs))))", "user": "54be792ee4b0ed20f4ff6eeb"}, {"problem": 56, "code": "(fn remove-dups [l]\n   ((fn help [remaining\n              result\n              map]\n      (if (empty? remaining)\n        result\n        (help (rest remaining)\n              (if (map (first remaining))\n                result\n                (conj result (first remaining)))\n              (if (map (first remaining))\n                map\n                (assoc map (first remaining) true)))))\n    l\n    []\n    {}))", "user": "54d26316e4b0e8a36923e5f2"}, {"problem": 56, "code": "(fn [coll]\n   (first (reduce (fn [[rv seen] el] \n                    (if (seen el) \n                      [rv seen] \n                      [(conj rv el) (conj seen el)])) \n                  [[] #{}] \n                  coll)))", "user": "541b1f25e4b01498b1a71a63"}, {"problem": 56, "code": "(fn [s]\n  (let [set (atom #{})]\n    (filter\n      (fn [item]\n        (if (@set item)\n          false\n          (do \n            (swap! set conj item)\n            true\n          )\n        )\n      )\n      s\n    )\n  )\n)", "user": "50e3cf55e4b01912b3285c45"}, {"problem": 56, "code": "(fn [sq]\n  (loop [s sq, acc '(), uniques #{}]\n    ;(println s acc (first s) )\n    (if (empty? s) acc\n      (if (contains? uniques (first s))\n      \t (recur (rest s) acc uniques)\n         (recur (rest s) (concat acc [(first s)]) (conj uniques (first s)))\n))))", "user": "54bbe505e4b0ed20f4ff6ec5"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "52facb9de4b047fd55837002"}, {"problem": 56, "code": "(fn dxtnt [coll]\n  (let [final-accum (reduce (fn [acc elt]\n                               (if ((acc :seen) elt)\n                                 acc\n                                 {:seen (conj (acc :seen) elt) :out (conj (acc :out) elt)}))\n                             {:seen #{} :out []}\n                             coll)]\n    (final-accum :out)))", "user": "54cad2d5e4b057c6fda3a26c"}, {"problem": 56, "code": "(fn [s]\n  (loop [remaining s seen #{} result []]\n    (if (empty? remaining)\n      result\n      (let [current (first remaining)\n            new-seen (conj seen current)]\n        (if (seen current)\n          (recur (rest remaining) new-seen result)\n          (recur (rest remaining) new-seen (conj result current)))))))", "user": "54d6f22de4b0a52adc2e2023"}, {"problem": 56, "code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "user": "54ab502fe4b09f271ff37cc4"}, {"problem": 56, "code": "(fn [xs] \n((reduce \n  (fn [m x] \n    (let [seen (:seen m) \n          result (:result m)] \n      (if (seen x) \n        m \n        { :seen (assoc seen x :seen) \n        :result (conj result x) }))) \n  { :seen {} :result [] } xs) :result))", "user": "54d03026e4b018d918be98de"}, {"problem": 56, "code": "(fn fd [c]\n  (reduce \n   (fn [v i]\n     (if (some #(= % i) v) \n       v\n       (conj v i))) [] c))", "user": "54d4bd2be4b0a52adc2e2005"}, {"problem": 56, "code": "(fn [coll]\n  (->> coll\n    (reduce (fn [a b] (if (a b) a (assoc a b (count a)))) {})\n    (sort-by second)\n    keys))", "user": "524740e7e4b05ef8e38e635d"}, {"problem": 56, "code": "(fn [xs]\n  (first (reduce (fn [[ret set] x]\n                   (if (contains? set x)\n                     [ret set]\n                     [(conj ret x) (conj set x)]))\n                 [[] #{}]\n                 xs)))", "user": "5344fe13e4b084c2834f4a32"}, {"problem": 56, "code": "(fn [coll]\n         (letfn [(uniq [coll] \n                   (if (empty? coll) []\n                       (let [[x & xs] coll]\n                         (cons x (uniq (filter #(not= x %) xs))))\n                         ))]\n           (uniq coll)))", "user": "52950ab6e4b02ebb4ef7501a"}, {"problem": 56, "code": "#(reduce (fn [l e] (if (contains? (set l) e) l (conj l e))) [] %)", "user": "549188f6e4b0b312c081ff3a"}, {"problem": 56, "code": "(fn [lst]\n    (reduce (fn [result item]\n              (if (some #(= item %) result)\n                result\n                (conj result item))\n              )\n            []\n            lst))", "user": "53f31dafe4b0742d9025b0f0"}, {"problem": 56, "code": "reduce #(if (some #{%2} %1) %1 (conj %1 %2)) []", "user": "54b7f217e4b0ed20f4ff6e8f"}, {"problem": 56, "code": "#(reverse (reduce\n          (fn [out in]\n            (if (some (fn [x] (= x in)) out)\n              out\n              (conj out in)))\n          '()\n          %\n          ))", "user": "52a90056e4b0c58976d9ac39"}, {"problem": 56, "code": "reduce (fn [xs x] (if (some #{x} xs) xs (conj xs x))) []", "user": "54d5fbe9e4b0a52adc2e2014"}, {"problem": 56, "code": "(fn [col]\n  (let [q\n        (fn [col result]\n          (if (empty? col)\n            result\n            (if (.contains result (first col))\n              (recur (rest col) result)\n              (recur (rest col) (vec (concat result [(first col)]))))))]\n    (q col [])))", "user": "53664e3be4b0243289761e74"}, {"problem": 56, "code": "(fn [xs]\n  (loop [y [] z xs]\n    (if (= 0 (count z))\n      y\n      (if-not (let [z2 z] (some (fn [t] (= t (first z2))) y))\n        (recur (conj y (first z)) (rest z))\n        (recur y (rest z))))))", "user": "54d753ebe4b0a52adc2e2029"}, {"problem": 56, "code": "(fn [coll]\n  (reduce #(if ((set %1) %2) %1 (conj %1 %2)) [] coll))", "user": "54cd651be4b057c6fda3a2a2"}, {"problem": 56, "code": "(partial\n (fn f [d s]\n   (let [v (first s)]\n     (if-let [vs (next s)]\n       (if (d v)\n         (recur d vs)\n         (cons v (lazy-seq (f (conj d v) vs))))\n       (when-not (d v) s)))) ; my handling of the tail end is so ugly\n #{})", "user": "54dd76c8e4b024c67c0cf794"}, {"problem": 56, "code": "(fn [coll]\n  (:res\n   (reduce (fn [acc x] \n             (if ((:filter acc) x) \n               acc \n               (-> acc \n                   (update-in [:filter] conj x) \n                   (update-in [:res] conj x)))) \n           {:res [] :filter #{}} \n           coll)))", "user": "541d3c0fe4b01498b1a71a7e"}, {"problem": 56, "code": "reduce (fn [s e]\n  (if (some #(= % e) s)\n    s\n    (conj s e)))\n[]", "user": "52474133e4b05ef8e38e635e"}, {"problem": 56, "code": "(fn f\n   ([xs] (f #{} xs)) \n   ([h xs] (if-not (empty? xs)\n             (let [n (first xs)\n                   r (rest xs)]\n               (filter (comp not nil?)\n                       (cons (if-not (get h n) n) (f (conj h n) r)))))))", "user": "4ec66e84535d6d7199dd36cd"}, {"problem": 56, "code": "(fn f [x]\n   (reduce #(if-not (some #{%2} %1) (conj %1 %2) %1) [] x))", "user": "5493d908e4b0b312c081ff52"}, {"problem": 56, "code": "#(loop [li (seq %) ali []] \n      (if (empty? li) ali \n          (recur (drop 1 li)\n                 (if ((set ali) (first li))\n                  ali\n                 (concat ali [(first li)]))\n          )\n      )\n)", "user": "54db33f1e4b024c67c0cf75d"}, {"problem": 56, "code": "(fn [coll]\n  (loop [l coll \n         seen []]\n    (if-let [x (first l)]\n      (if (contains? (into #{} seen) x)\n        (recur (rest l) seen)\n        (recur (rest l) (conj seen x)))\n      seen\n      )))", "user": "517e12e3e4b0fcc7c5d37d3c"}, {"problem": 56, "code": "#(loop [s #{}, [x & xs] %, ret []]\n   (cond (nil? x) ret\n         (contains? s x) (recur s xs ret)\n         :else (recur (conj s x) xs (conj ret x))\n         )\n   )", "user": "54dae16de4b024c67c0cf758"}, {"problem": 56, "code": "#(reduce (fn [t v] (if (some #{v} t) t (conj t v))) [] %)", "user": "4f7207d3e4b07046d9f4f019"}, {"problem": 56, "code": "(fn my-distinct [s]\n  (let [m (into {} (map (fn [i] [(nth s i) i]) (reverse (range (count s)))))]\n    (sort-by #(get m %) (keys m))))", "user": "54e3df6ae4b024c67c0cf7e3"}, {"problem": 56, "code": "(fn [s] (reverse (reduce (fn [x y] (if (some #(= y %) x) x (conj x y))) '() s)))", "user": "51a058dae4b0b292b01ee3f3"}, {"problem": 56, "code": "#(sort-by (fn [i] (.indexOf % i)) (set %))", "user": "54cbe00ee4b057c6fda3a285"}, {"problem": 56, "code": "(fn ff\n    ([coll] (ff coll []))\n    ([coll sofar] \n     (if (> (count coll) 0)\n       (let [f (first coll) \n             r (rest coll)]\n         (if (some #{f} sofar)\n           (ff r sofar)\n           (ff r (conj sofar f))\n           )\n         )\n       sofar)))", "user": "54cb3497e4b057c6fda3a272"}, {"problem": 56, "code": "(fn [items]\n  (into []\n        (apply sorted-set-by #(< (.indexOf items %1) (.indexOf items %2))\n               items)))", "user": "54cc26c1e4b057c6fda3a28a"}, {"problem": 56, "code": "(fn _dis [v]\n  (loop [e v res []]\n        (if (nil? e)\n            res\n            (recur (next e) \n                   (if (some #{(first e)} res)\n                     res\n                     (conj res (first e)))))))", "user": "534e4a29e4b084c2834f4ab0"}, {"problem": 56, "code": "(fn [xs]\n\t(reduce\n    \t#(if (.contains % %2) % (conj % %2))\n        []\n        xs))", "user": "4e68c465535d8ccf87e9fe8a"}, {"problem": 56, "code": "reduce #(if ((set %) %2) % (conj % %2)) []", "user": "54ddb556e4b024c67c0cf798"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "524025bce4b0ad64fa01030f"}, {"problem": 56, "code": "(fn [x]\n   (reduce #(if (some #{%2} %1)\n              %1\n              (conj %1 %2)) [] x))", "user": "525cc912e4b0cb4875a45d48"}, {"problem": 56, "code": "#(reduce (fn [f s] (if ((set f) s) f (conj f s))) [] %)", "user": "54e5bdf2e4b024c67c0cf7fe"}, {"problem": 56, "code": "(fn answer\n  [col]\n  (loop [col col, seen #{}, result []]\n    (if (seq col)\n      (recur\n       (rest col)\n       (conj seen (first col))\n       (if (seen (first col))\n         result\n         (conj result (first col))))\n      result)))", "user": "5465febde4b01be26fd746e1"}, {"problem": 56, "code": "(fn [c]\n    (loop [c-new [] c-rest c seen #{}]\n      (if (empty? c-rest)\n        c-new\n        (if (seen (first c-rest))\n          (recur c-new (rest c-rest) seen)\n          (recur (conj c-new (first c-rest)) (rest c-rest) (conj seen (first c-rest)))))))", "user": "54ca130ce4b057c6fda3a250"}, {"problem": 56, "code": "(fn [xs]\n  (loop [in xs\n         out []]\n    (let [f (first in)\n          idx (.indexOf out f)\n          found (not (neg? idx))]\n      (if (nil? f)\n        out\n        (if found\n          (recur (rest in) out)\n          (recur (rest in) (conj out f))\n          ))\n      ))\n  )", "user": "546a6c7ce4b00cfc9eacc154"}, {"problem": 56, "code": "(fn [xs]\n             (loop [[e & c] xs a [] d #{}]\n               (if e\n                 (recur c\n                        (if (d e) a (conj a e))\n                        (conj d e))\n                 a)))", "user": "4edee6a2535d10e5ff6f533e"}, {"problem": 56, "code": "(fn [l] (reduce \n         #(if (some (fn [n] (= n %2)) %1) %1 (do (println %1 %2)(concat %1 (list %2)))) \n         '() \n         l))", "user": "54edcf96e4b024c67c0cf866"}, {"problem": 56, "code": "(fn [coll]\n    (let [step (fn step [[f :as xs] seen]\n                 (if (nil? f) []\n                     (if (contains? seen f)\n                       (recur (rest xs) seen)\n                       (cons f (step (rest xs) (conj seen f))))))]\n      (step coll #{})))", "user": "52b2f9cae4b0c58976d9acfb"}, {"problem": 56, "code": "(fn [seq] \n      (reduce \n       (fn [ret i]\n         (if (> (.indexOf ret i) -1) \n           ret (conj ret i)))\n       [(first seq)] seq))", "user": "546ff835e4b00cfc9eacc1b4"}, {"problem": 56, "code": "(fn f \n  ([c] (f c #{}))\n  ([[x & m] b]\n      (if x \n        (if (b x)\n          (f m b)\n          (cons x (f m (conj b x)))))))", "user": "4ec1923f535dfed6da9c6db2"}, {"problem": 56, "code": "(fn [coll] (second (reduce (fn [[s v] x] (if (s x) [s v] [(conj s x) (conj v x)])) [#{} []] coll)))", "user": "54f0d3fde4b024c67c0cf8a6"}, {"problem": 56, "code": "reduce (fn [accu i] (if (apply distinct? i accu) (conj accu i) accu)) []", "user": "54da46e5e4b024c67c0cf753"}, {"problem": 56, "code": "(fn \n  [coll] (map first \n              (sort-by second \n                       (reduce (fn [m [k v]] (if (contains? m k) m (assoc m k v))) \n                               {} \n                               (map (fn [i e] [e i]) \n                                    (iterate inc 0) \n                                    coll)))))", "user": "518ba795e4b0f028e99addf0"}, {"problem": 56, "code": "(fn\n  [xs]\n  (loop [xs xs seen #{} accum []]\n    (if (empty? xs)\n      accum\n      (if (contains? seen (first xs))\n        (recur (rest xs) seen accum)\n        (recur (rest xs) (conj seen (first xs)) (concat accum [(first xs)]))))))", "user": "54e0e911e4b024c67c0cf7bc"}, {"problem": 56, "code": "(fn [coll]\n    ((fn iter [coll seen]\n       (if (seq coll)\n         (let [item (first coll)\n               seen (conj seen item)]\n           (cons item\n                 (lazy-seq (iter (drop-while seen (rest coll))\n                                 seen))))\n         nil)\n       ) coll #{}))", "user": "51b91b08e4b0e871ca4958f8"}, {"problem": 56, "code": "(fn [xs]\n  (loop [res [] rem xs]\n    (if (empty? rem)\n      res\n      (recur (if (contains? (set res) (first rem))\n               res\n               (conj res (first rem)))\n             (rest rem)))))", "user": "547fbe01e4b0c51c1f4d7321"}, {"problem": 56, "code": "(fn [c]\n  (reduce #(if (some #{%2} %1)\n             %1\n             (conj %1 %2)) [] c))", "user": "54f2fe9fe4b050824f58f5b8"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "54f2a1b8e4b024c67c0cf8cb"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "539c736ce4b0b51d73faaf2b"}, {"problem": 56, "code": "(fn distinct2 [coll]\n   (let [f (first coll)\n         r (rest coll)]\n     (do (print f \" \" r \"\\n\")\n     (if (empty? r)\n       (if (nil? f) [] [f])\n       (let [rf (filter #(not= f %) r)]\n         (concat [f] (distinct2 rf)))))))", "user": "54d9366ce4b0a52adc2e204e"}, {"problem": 56, "code": "reduce (fn [c e] (if (some #(= % e) c) c (conj c e))) []", "user": "5481be5fe4b0e286459a1172"}, {"problem": 56, "code": "(fn [coll] (keep-indexed (fn [idx item] (if (= idx (.indexOf coll item)) item nil)) coll))", "user": "54e3bd3fe4b024c67c0cf7e0"}, {"problem": 56, "code": "(fn [s]\n     (loop [dist [] is-dist? (set s) [s' & sr] s]\n        (if s'\n          (if (is-dist? s')\n            (recur (conj dist s') (disj is-dist? s') sr)\n            (recur dist is-dist? sr))\n          (seq dist))))", "user": "516db4f6e4b046df6fbb76a0"}, {"problem": 56, "code": "(fn [xx]\n  (first\n   (reduce\n    (fn [[vs st] v]\n      (if (contains? st v)\n        [vs st]\n        [(conj vs v) (conj st v)]))\n    [[] #{}]\n    xx)))", "user": "54b04708e4b09f271ff37d11"}, {"problem": 56, "code": "(fn [coll]\n  (loop [coll coll s (set coll) acc []]\n    (if (empty? coll)\n      acc\n      (recur (rest coll)\n             (disj s (first coll))\n             (if (s (first coll))\n               (conj acc (first coll))\n               acc)))))", "user": "54fdbe3fe4b07d26eda61d3b"}, {"problem": 56, "code": ";; this really *should* work\n;; (comp keys frequencies)\n\n(fn [coll] \n  ((fn step [[x & xs] seen] \n     (when x\n       (if (seen x) \n         (step xs seen)\n         (cons x (step xs (conj seen x)))))) \n   coll #{}))", "user": "54485727e4b032a45b8693c6"}, {"problem": 56, "code": "(comp :coll\n      (fn [coll]\n        (reduce \n         (fn [acc x]\n           (if ((:seen acc) x)\n             acc\n             (-> acc\n                 (update-in [:coll] conj x)\n                 (update-in [:seen] conj x))))\n         {:coll [] :seen #{}}\n         coll)))", "user": "4db6d993535d1e037afb2180"}, {"problem": 56, "code": "(fn myDupes\n  [s]\n  (loop [result [(first s)]\n         myS (filter #(not= (first s) %1) s)]\n    (if (empty? myS)\n      result\n      (recur (conj result (first myS)) (filter #(not= (first myS) %1) myS)))))", "user": "54f64e99e4b0f2f3c5226ea4"}, {"problem": 56, "code": "(fn [s]\n  (loop [seen #{}\n         results []\n         [head & tail :as all] s]\n    (if (empty? all)\n      results\n      (recur (conj seen head)\n             (if (seen head) results (conj results head))\n             tail))))", "user": "54febf4be4b07d26eda61d45"}, {"problem": 56, "code": "reduce ( fn\n   [xs x]\n   ( if (some #( = x %) xs)  \n      xs\n      ( conj xs x )\n    )) []", "user": "54fc7d89e4b07d26eda61d2b"}, {"problem": 56, "code": "(fn [c]\n   (first (reduce (fn [[v s] e]\n              (if (contains? s e)\n                [v s]\n                (map #(conj % e) [v s]))) [[] #{}] c)))", "user": "51a4d802e4b0def3c5c5869a"}, {"problem": 56, "code": "(fn a\n   [x]\n   (loop [y 0 j []]\n     (if (= y (count x))\n       j\n       (recur (inc y) (if (some (partial = (nth x y)) j)\n                        j\n                        (conj j (nth x y)))))))", "user": "54bcab07e4b0ed20f4ff6ed5"}, {"problem": 56, "code": "(fn ([s] (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] s)))", "user": "54d8cc38e4b0a52adc2e203e"}, {"problem": 56, "code": "(fn find-distinct [s]\n\t(reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] s)\n\t\t\t)", "user": "54ff6084e4b07d26eda61d50"}, {"problem": 56, "code": "reduce (fn [acc val]\n         (if (some #(= val %1) acc)\n           acc\n           (conj acc val))) []", "user": "54b31445e4b09f271ff37d35"}, {"problem": 56, "code": "(fn distinkt\n   ([v] (distinkt v []))\n   ([[h & t] acc] (let [s (set acc)]\n                    (cond\n                      (nil? h) acc\n                      (contains? s h) (distinkt t acc)\n                      :else (distinkt t (conj acc h))))))", "user": "549a1fede4b0f3d1d8e70f6a"}, {"problem": 56, "code": "(fn [coll]\n  (reduce (fn [ret val]\n            (if (contains? (set ret) val)\n              ret\n              (conj ret val))) [] coll))", "user": "4eb7b049535d7eef30807377"}, {"problem": 56, "code": "(partial reduce #(if ((set %1) %2) %1 (conj %1 %2)) [])", "user": "550615c0e4b021ccfedb9696"}, {"problem": 56, "code": "(fn dist [s]\n    (loop [res []\n            leftover s\n            seen #{}]\n        (let [nxt (first leftover)]\n            (if (= leftover [])\n                res \n                (recur \n                    (if (get seen nxt)\n                        res\n                        (conj res nxt))\n                    (rest leftover)\n                    (conj seen nxt))))))", "user": "54f09599e4b024c67c0cf89d"}, {"problem": 56, "code": "(fn [seqs]\n   (reduce (fn [x y] (if (nil? x)\n                       (conj [] y)\n                       (if (some #(= y %) x) \n                         x\n                         (conj x y)))) nil seqs))", "user": "5508102ee4b021ccfedb96b0"}, {"problem": 56, "code": "reduce #(if (contains? (set %) %2) % (conj % %2)) []", "user": "54e606c3e4b024c67c0cf803"}, {"problem": 56, "code": "#(first (reduce\n          (fn [[res s] d]\n            (if (contains? s d)\n                   [res s]\n                   [(concat res [d]) (conj s d)]))\n                [[] #{}]\n                %))", "user": "550aeddae4b06e50f9beb135"}, {"problem": 56, "code": "(fn disteenct [s] (sort-by #(.indexOf s %) (set s)))", "user": "550fdc1de4b06e50f9beb17d"}, {"problem": 56, "code": "(fn f [a [x & r]]\n(if x (f (if ((set a) x) a (conj a x)) r) a))\n[]", "user": "541074f1e4b01498b1a719ac"}, {"problem": 56, "code": "(fn [coll] (into '[] (into (sorted-set-by #(< (.indexOf coll %1) (.indexOf coll %2))) coll)))", "user": "5514a60fe4b055c2f668d4d7"}, {"problem": 56, "code": "(fn [s]\n  (let [red (reduce\n                (fn [acc i]\n                  (if (some #{i} acc)\n                    acc\n                    (conj acc i)))\n                (list)\n                s)]\n    (reverse red)))", "user": "55170dd9e4b06a49daca83bd"}, {"problem": 56, "code": "(fn [coll]\n  (loop [i 0\n         acc []\n         s #{}]\n    (if (not (< i (count coll)))\n      acc\n      (let [e (nth coll i)]\n        (recur (inc i)\n               (if (not (s e))\n                 (conj acc e)\n                 acc)\n               (conj s e))))))", "user": "5512aca6e4b055c2f668d4b4"}, {"problem": 56, "code": "(fn [s]\n    (reduce (fn [v n] (if (nil? (some #{n} v)) (conj v n) v ) ) [] s)\n\n    )", "user": "550c55d0e4b06e50f9beb14d"}, {"problem": 56, "code": "(fn [xs] \n  (let [x (let [st (atom #{})]\n    (reduce (fn [acc x] (if-not (@st x) (do (swap! st #(conj % x)) (conj acc x)) acc ) ) (empty xs) xs))]\n    (if (seq? x) (reverse x) x)))", "user": "54e51c7be4b024c67c0cf7f7"}, {"problem": 56, "code": "(partial reduce #(if ((set %) %2) % (conj % %2)) [])", "user": "532018efe4b08068f379edcd"}, {"problem": 56, "code": "reduce #(if (some #{%2} %1) %1 (conj %1 %2)) []", "user": "54e2a779e4b024c67c0cf7d3"}, {"problem": 56, "code": "(fn my-distinct\n  [coll]\n  (reduce\n    (fn [acc, x]\n      (if (some #(= x %) acc)\n        acc\n        (conj acc x)))\n    []\n    coll))", "user": "548db64ce4b0e286459a121c"}, {"problem": 56, "code": "(fn [seqn] (reduce (fn [s i] (if (nil? (some #{i} s)) (conj s i) s)) [] seqn))", "user": "5519c157e4b00ace28fe6e32"}, {"problem": 56, "code": "(fn [s] (reduce #(if (some #{%2} %) % (conj % %2)) [] s))", "user": "4fc4eb1ee4b081705acca354"}, {"problem": 56, "code": "(fn uniques\n  [coll]\n  (loop [remainder coll\n         uniques #{}\n         result []]\n    (cond (empty? remainder) result\n          (contains? uniques (first remainder)) (recur (rest remainder)\n                                                       uniques\n                                                       result)\n          :else (recur (rest remainder)\n                       (conj uniques (first remainder))\n                       (conj result (first remainder))))))", "user": "542725fce4b01498b1a71b22"}, {"problem": 56, "code": "#(loop [s %\n        seen {}\n        acc []]\n   (if (empty? s)\n     acc\n     (recur (rest s)\n            (assoc seen (first s) true)\n            (if (seen (first s))\n              acc\n              (conj acc (first s))))))", "user": "551ed214e4b08d5046aa8a4d"}, {"problem": 56, "code": "(partial\n reduce\n (fn [xs x]\n   (if (some (partial = x) xs)\n     xs\n     (conj xs x)))\n [])", "user": "521d064fe4b0c4ef0be830a8"}, {"problem": 56, "code": "(fn my-distinct\n  ([xs] (my-distinct xs #{} []))\n  ([[x & xs] found result] \n    (if x\n      (if (not (contains? found x))\n        (recur xs (conj found x) (conj result x))\n        (recur xs found result))\n      result)))", "user": "4dd76bf9535d2dad7130b5d1"}, {"problem": 56, "code": "(fn [xs]\n    (loop [xs xs acc []]\n      (if (empty? xs)\n        acc\n        (if (not-any? #(= (first xs) %) acc)\n          (recur (rest xs) (conj acc (first xs)))\n          (recur (rest xs) acc)))))", "user": "551a21ece4b091ff45eda993"}, {"problem": 56, "code": "(fn [a]\n  (loop [b [] i 0 s #{}]\n    (if (= i (count a))\n      b\n      (recur (if (s (nth a i)) \n               b \n               (conj b (nth a i))\n               )\n             (+ 1 i)\n             (conj s (nth a i))\n             )\n      )\n    )\n  )", "user": "525d490ae4b0cb4875a45d70"}, {"problem": 56, "code": "(fn [x] (reduce #(if (some (fn [x] (= x %2)) %) % (conj % %2)) [] x))", "user": "551c66dae4b07993ea3788de"}, {"problem": 56, "code": "#(reduce (fn [a x] (if (some #{x} a) a (conj a x))) [] %)", "user": "55201d18e4b08d5046aa8a5d"}, {"problem": 56, "code": "(fn [c]\n  (reduce (fn [r e]\n            (if (some #(= e %) r) r (conj r e)))\n          [] c))", "user": "5455c2f3e4b080a794c2c87d"}, {"problem": 56, "code": "(fn [xs]\n         (reduce #(if (< (.indexOf %1 %2 ) 0) (conj %1 %2) %1) [] xs ))", "user": "533c2605e4b0e30313ee6cd7"}, {"problem": 56, "code": "(fn [xs]\n  (loop [rem xs\n         res []]\n    (if (empty? rem)\n      res\n      (if (some #(= (first rem) %) res)\n        (recur (rest rem) res)\n        (recur (rest rem) (conj res (first rem)))))))", "user": "5522cd9ae4b0882d96d091ab"}, {"problem": 56, "code": "(fn [a]\n  (loop [a1 a acc []]\n    (if (empty? a1)\n       acc\n       (if (some #(= % (first a1)) acc)\n         (recur (rest a1) acc)\n         (recur (rest a1) (conj acc (first a1)))\n       )\n    )\n  )\n)", "user": "55280930e4b0ffed3738f93b"}, {"problem": 56, "code": "(fn dedupe\n  [l]\n  (loop [l l out [] seen #{}]\n    (cond (empty? l) out\n          (contains? seen (first l)) (recur (rest l) out seen)\n          :else (recur (rest l) (conj out (first l)) (conj seen (first l))))))", "user": "551afdf8e4b07993ea3788cb"}, {"problem": 56, "code": "(fn [xs]\n   (letfn [(remove-distinct [acc [x & xs]]\n             (if (nil? x)\n               nil\n               (if (get acc x)\n                 (recur acc xs)\n                 (cons x (lazy-seq (remove-distinct (assoc acc x true) xs))))))]\n     (remove-distinct {} xs)))", "user": "51bb08a4e4b0fe3ecfb46446"}, {"problem": 56, "code": "(fn [coll] (loop [c coll s []]\n             (if (empty? c) s\n               (recur (rest c) (if (contains? (set s) (first c)) s (conj s (first c)))))))", "user": "54e4edcae4b024c67c0cf7f3"}, {"problem": 56, "code": "(fn find-distinct [seq]\n  (reduce #(if (some (fn [a] (= a %2)) %1) \n             %1\n             (conj %1 %2)) \n          [] seq))", "user": "53504fe6e4b084c2834f4ada"}, {"problem": 56, "code": "#(if (= %2 ()) %1 (if (some (partial = (first %2)) %1) (recur %1 (rest %2)) (recur (into %1 [(first %2)]) (rest %2)))) []", "user": "5501de12e4b07d26eda61d7b"}, {"problem": 56, "code": "(fn [coll] (first \n            (reduce (fn[[v m :as a] e] (if (m e) a [(conj v e) (assoc m e 1)]))\n                    \t[[] {}] coll)))", "user": "4f1ef6a0535d64f60314649b"}, {"problem": 56, "code": "reduce\n(fn [acc x]\n  (if (some #(= % x) acc)\n    acc\n    (conj acc x)))\n[]", "user": "4f4e78fee4b03ad3f0c10cc8"}, {"problem": 56, "code": "(fn rd [xs]    \n  (loop [h (first xs) r (rest xs) s #{} l []]\n   (if-not h\n    l\n    (if (s h)\n      (recur (first r) (rest r) s l)\n      (recur (first r) (rest r) (conj s h) (conj l h))))))", "user": "55297a7ae4b0ffed3738f94b"}, {"problem": 56, "code": "(fn [coll] \n   (reduce \n    (fn [c x] \n      (if (some #(= x %) c) c (conj c x))) \n    [] coll))", "user": "55249f64e4b0882d96d091c6"}, {"problem": 56, "code": "(fn f [col]\n  (into [] (java.util.LinkedHashSet. col)))", "user": "55253799e4b0882d96d091cf"}, {"problem": 56, "code": "(fn [c]\n  (loop [c c\n         out (empty c)]\n    (if (empty? c)\n      (reverse out)\n      (let [e (first c)\n            stripped (filter (fn [i] (not (= e i))) c)]\n        (recur stripped (cons e out))))))", "user": "5530b827e4b076ab5578f818"}, {"problem": 56, "code": "(fn [coll]\n         (loop [accl [] C coll accs #{}]\n           (if (seq C)\n             (let [fi (first C) rr (rest C)]\n               (if (accs fi)\n                 (recur accl rr accs)\n                 (recur (conj accl fi) rr (conj accs fi))\n                 )\n               )\n             accl\n             )\n           )\n         )", "user": "552d9013e4b076ab5578f7ea"}, {"problem": 56, "code": "(fn [x] (reduce (fn [t v] (if (some #(= v %) t) t (conj t v))) [] x))", "user": "54e24a05e4b024c67c0cf7ce"}, {"problem": 56, "code": "reduce (fn [result-set next-element]\n         (if((set result-set) next-element)\n           result-set\n           (conj result-set next-element)))  []", "user": "55240916e4b0882d96d091b6"}, {"problem": 56, "code": "(fn fd [seqz]\n  (loop [[f & r] seqz\n         s #{}\n         v []\n        ]\n    (if f\n      (if (get s f)\n        (recur r s v)\n        (recur r (conj s f) (conj v f)))\n      v)))", "user": "5414b7c4e4b01498b1a719ed"}, {"problem": 56, "code": "(fn [xs] (reverse (reduce (fn [agg act] (if (contains? (set agg) act) agg (cons act agg))) (empty xs) xs)))", "user": "55158345e4b055c2f668d4e8"}, {"problem": 56, "code": "(fn [xs]\n  (reduce \n   (fn [acc x]\n     (if (some #{x} acc)\n       acc\n       (conj acc x)))\n   [] xs))", "user": "54d127b7e4b0e8a36923e5de"}, {"problem": 56, "code": "(fn [xs]\n  (first (reduce (fn [[sq st] x] (if (st x) [sq st] [(conj sq x) (conj st x)])) [[] #{}] xs)))", "user": "55316b8ae4b076ab5578f825"}, {"problem": 56, "code": "#(if (vector? (first %)) [[2 4] [1 2] [1 3]] (sort (set %)))", "user": "5507cfd3e4b021ccfedb96ad"}, {"problem": 56, "code": "(fn [items]\n  (loop [itms (reverse items)\n         out []]\n    (let [f (first itms)\n          r (vec (rest itms))]\n      (if (nil? f)\n        (reverse out)\n        (if (some #(= f %) r)\n          (recur r out)\n          (recur r (conj out f)))))))", "user": "52fc34cee4b047fd55837015"}, {"problem": 56, "code": "#(lazy-seq\n   (reduce\n    (fn [acc elt]\n      (if (some (hash-set elt) acc)\n        acc\n        (conj acc elt)))\n    [] %))", "user": "5531e445e4b09218d5f44f76"}, {"problem": 56, "code": "(fn [coll]\n  (loop [seen #{} s (seq coll) res []]\n    (if (empty? s)\n      res\n      (let [f (first s)]\n        (recur (conj seen f) (rest s) (if (contains? seen f) res (conj res f)))\n        )\n      )\n    )\n  )", "user": "553abb28e4b09218d5f44ffb"}, {"problem": 56, "code": "(fn [s] (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] s))", "user": "553e0b70e4b0a04f792994e8"}, {"problem": 56, "code": "reduce #(if (contains? (set %) %2) % (conj % %2)) []", "user": "53b15e6ee4b047364c04448f"}, {"problem": 56, "code": "(fn [x]\n           (loop [src x dst [] seen #{}]\n             (if-let [head (first src)]\n               (if (seen head)\n                 (recur (rest src) dst seen)\n                 (recur (rest src) (conj dst head) (conj seen head)))\n               dst)))", "user": "530b8580e4b02e82168697cc"}, {"problem": 56, "code": "#(reduce (fn [r e] (if (some #{e} r) r (conj r e))) [] %)", "user": "5540cc0ce4b0a04f79299505"}, {"problem": 56, "code": "(fn find-distinct [v] \n  (reduce #(if (= (.indexOf %1 %2) -1) (conj %1 %2) %1) [] v))", "user": "5244a10de4b0d8acf9ed6ab3"}, {"problem": 56, "code": "#(first\n  (reduce (fn [[xs uniqs] x]\n            (if (nil? (uniqs x))\n              [(conj xs x) (conj uniqs x)]\n              [xs uniqs]))\n          [[] #{}]\n          %))", "user": "5515b138e4b055c2f668d4ed"}, {"problem": 56, "code": "#(first (reduce (fn [[out seen] x]\n                  [(if (seen x)\n                     out\n                     (conj out x))\n                   (conj seen x)])\n                [[] #{}] %))", "user": "55274467e4b0ffed3738f92b"}, {"problem": 56, "code": "reduce \n #(if (some (set [%2]) %1)\n     %1\n     (conj %1 %2))\n []", "user": "550f1c99e4b06e50f9beb171"}, {"problem": 56, "code": "(fn dist [xs]\n  (let [inner_dist (fn [acc xs]\n                     (println acc xs)\n                 \t(cond \n                     (empty? xs) acc\n                     (some #{(first xs)} acc) (recur acc (rest xs))\n                     :else (recur (conj acc (first xs)) (rest xs))))]\n    (inner_dist [] xs)))", "user": "553dd883e4b0a04f792994e6"}, {"problem": 56, "code": "(fn [ys]\n  (letfn [(dist [xs acc seen]\n                (if (empty? xs)\n                  acc\n                  (let [x (first xs)]\n       \t\t\t    (recur (rest xs)\n                           (if (some #{x} seen)\n                             acc\n                             (conj acc x))\n                           (conj seen x)))))]\n    (dist ys [] #{})))", "user": "512e31e9e4b0b740abc59823"}, {"problem": 56, "code": "(fn [s]\n\t(first (reduce (fn [[s m] x]\n          \t\t(if (contains? m x)\n            \t\t[s m]\n            \t\t[(conj s x) (assoc m x true)]))\n       \t\t[[] {}]\n            s)))", "user": "55495318e4b0a04f79299566"}, {"problem": 56, "code": "(fn [coll]\n   (if-not (some #(% coll) [list? vector?]) coll \n       (-> (group-by identity coll)\n         keys)))", "user": "51bd255ce4b0df1216cefd94"}, {"problem": 56, "code": "#(loop [coll %1, s #{}, result []]\n        (if (empty? coll)\n                result\n                (let [x (first coll), dup (contains? s x)]\n                        (recur (rest coll) (conj s x) (if dup result (conj result x))))))", "user": "5370b386e4b0fc7073fd6e9b"}, {"problem": 56, "code": "(fn dedupl [s]\n  (letfn [(remitem [itm lst]\n            (remove (fn [a] (= a itm)) lst))]\n    (loop [itm (first s)\n           lst (remitem itm (rest s))\n           acc (conj [] itm)]\n      (cond\n        (empty? lst) acc\n        :else\n        (recur (first lst) (remitem (first lst) (rest lst)) (conj acc (first lst)))))))", "user": "534f8c9ae4b084c2834f4acd"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1\n          (conj %1 %2)\n          )\n[]; %1\n;; [1 2 1 3 2 4...]", "user": "553478dce4b09218d5f44f9d"}, {"problem": 56, "code": "(fn new-distinct\n  [[x & xs]]\n  (if x\n    (cons x (new-distinct (remove #(= x %) xs)))\n    []))", "user": "550d9452e4b06e50f9beb15d"}, {"problem": 56, "code": "(fn dis [c]\n  (loop [f (first c) r (rest c) d (set c) result []]\n    (cond\n     (empty? d)\n       result\n     (contains? d f)\n      (recur (first r) (rest r) (set (remove #(= f %) d)) (conj result f))\n     :else\n       (recur (first r) (rest r) (set d) result))))", "user": "5546704be4b0a04f7929953d"}, {"problem": 56, "code": "(fn [s] (reduce #(if ((set %1) %2) %1 (conj %1 %2)) [] s))", "user": "5532a04ee4b09218d5f44f82"}, {"problem": 56, "code": "(fn distinctify\n  [se]\n  (loop [se se\n         accum (vector)\n         seti #{}]\n    (if (empty? se) accum\n      (if (contains? seti (first se))\n        (recur (rest se) accum seti)\n        (recur (rest se) (conj accum (first se)) (conj seti (first se)))))))", "user": "554d386ee4b0a04f792995b8"}, {"problem": 56, "code": "(letfn [(f [distincts seenset xs]\n           (if (empty? xs) distincts\n             (if (contains? seenset (first xs))\n               (recur distincts seenset (rest xs))\n               (recur (conj distincts (first xs)) (conj seenset (first xs)) (rest xs)))))]\n  (partial f [] #{}))", "user": "554b9c3ee4b0a04f79299594"}, {"problem": 56, "code": "(fn [coll] (first (reduce (fn [[res elts] el]\n                            (if (get elts el)\n                              [res elts]\n                              [(conj res el) (conj elts el)]))\n                          [[] #{}] coll)))", "user": "5264383be4b03e8d9a4a70cb"}, {"problem": 56, "code": "#((fn mydis [xs dict]\n  (if (empty? xs) \n    nil \n    (if (get dict (first xs)) \n      (mydis (rest xs) dict) \n      (cons (first xs) (mydis (rest xs) (conj dict (first xs))))))) % #{})", "user": "5510aa92e4b06e50f9beb188"}, {"problem": 56, "code": "#(loop [[x & xs] %, seen #{}, ret []]\n   (cond (not x) ret\n         (seen x) (recur xs seen ret)\n         :else (recur xs (conj seen x) (conj ret x))))", "user": "554b7056e4b0a04f79299583"}, {"problem": 56, "code": "(fn [col] (keys (sort-by (fn [[item, i]] (first i) ) (group-by last (map-indexed #(vec [% %2]) col)))))", "user": "53571732e4b04ce2eb3ed275"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "54edc818e4b024c67c0cf865"}, {"problem": 56, "code": "(fn [xs]\n  (:vals (reduce (fn [acc x] \n                   (if (contains? (:seen-vals acc) x)\n                     acc \n                     {:vals (conj (:vals acc) x) \n                      :seen-vals (conj (:seen-vals acc) x)})) \n                 {:vals [] :seen-vals #{}}\n                 xs)))", "user": "5553b924e4b0deb715856e06"}, {"problem": 56, "code": "#(sort-by (fn [x] (.indexOf % x)) (set %))", "user": "55337e61e4b09218d5f44f8e"}, {"problem": 56, "code": "(fn [coll]\n  (reduce (fn [reduction current]\n            (if (some #{current} reduction)\n              reduction\n              (conj reduction current))) [] coll))", "user": "5486e317e4b0e286459a11c0"}, {"problem": 56, "code": "(fn [s] (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] s))", "user": "52ce1abfe4b07d0d72b27389"}, {"problem": 56, "code": "reduce #(if ((set %) %2) % (conj % %2)) []", "user": "543366dde4b0b6b47310fcdf"}, {"problem": 56, "code": "reduce #(if (some (partial = %2) %1) %1 (conj %1 %2)) []", "user": "5280a1ece4b0757a1b171407"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "54ab1b5ae4b09f271ff37cc2"}, {"problem": 56, "code": "#(vec (java.util.LinkedHashSet. %))", "user": "5552b617e4b0deb715856df8"}, {"problem": 56, "code": "(fn [s] (reduce #(if ((set %1) %2) %1 (conj %1 %2)) [] s))", "user": "4f9b3532e4b0dcca54ed6d13"}, {"problem": 56, "code": "(fn [xs]\n   (reduce (fn [result input]\n             (let [seen (set result)]\n               (if (contains? seen input)\n                 result\n                 (conj result input))))\n           [] xs))", "user": "555521a5e4b0deb715856e12"}, {"problem": 56, "code": "reduce #(if (contains? (set %1) %2) %1 (conj %1 %2)) []", "user": "55429859e4b0a04f7929951f"}, {"problem": 56, "code": "(fn dstn [lst]\n\t(let [ dup? #(not (some #{(nth lst %)} (into [] (take % lst)) ))]\n\t\t(map #(nth lst %) (filter dup? (range (count lst))))))", "user": "5545477fe4b0a04f79299531"}, {"problem": 56, "code": "(fn dist [col]\n  (first (reduce #(if ((last %1) %2)\n                   %1\n                   [(conj (first %1) %2) (set (cons %2 (last %1)))])\n                 [[] #{}]\n                 col)))", "user": "55536a8ae4b0deb715856e03"}, {"problem": 56, "code": "(fn [seq]\r\n  (loop [seq seq\r\n         result-set #{}\r\n         result-vector []]\r\n    (if (empty? seq)\r\n      result-vector\r\n      (let [[head & tail] seq]\r\n        (if (contains? result-set head)\r\n          (recur tail result-set result-vector)\r\n          (recur tail\r\n            (conj result-set head)\r\n            (conj result-vector head)))))))", "user": "555bd27ae4b0b056612e2244"}, {"problem": 56, "code": "reduce #(if ((set %) %2) % (conj % %2)) []", "user": "545ddac3e4b01be26fd74676"}, {"problem": 56, "code": "(fn [s]\n  (loop [s1 s s2 []]\n    (if (empty? s1)\n      s2\n      (recur (rest s1)\n             (if (not (some #{(first s1)} s2))\n               (conj s2 (first s1))\n               s2)))))", "user": "54cad59ee4b057c6fda3a26e"}, {"problem": 56, "code": "(fn [s] \n  ((fn step [[x & more] seen] \n     (when x\n       (if (seen x) \n         (step more seen)\n         (cons x (step more (conj seen x)))))) \n   s #{}))", "user": "555a5731e4b0deb715856e44"}, {"problem": 56, "code": "(fn [s]\n  (reduce \n    (fn [r v]\n      (if ((apply hash-set r) v)\n        r\n        (conj r v)))\n    []\n    s))", "user": "556159fae4b0c656e3ff17c7"}, {"problem": 56, "code": "(fn [coll]\n  (letfn [(dec-map [m k]\n            (let [r (update-in m [k] dec)]\n              (if  (zero? (get r k))\n                (dissoc r k)\n                r)))]\n    (let [freq (frequencies coll)\n          ex-freq (reduce-kv #(if (> %3 1)\n                                (assoc %1 %2 (dec %3))\n                                %1) {} freq)\n          r-coll (reverse coll)]\n      (loop [c [] ex ex-freq idx 0]\n        (if (= idx (count r-coll))\n          (if (vector? coll) (vec (reverse c)) (reverse c))\n          (if (contains? ex (nth r-coll idx))\n            (recur c (dec-map ex (nth r-coll idx)) (inc idx))\n            (recur (conj c (nth r-coll idx)) ex (inc idx))))))))", "user": "516d227fe4b06f078fab252d"}, {"problem": 56, "code": "(partial\n (fn [xs ys]\n   (if (empty? ys)\n     xs\n     (if (some #(= (first ys) %) xs)\n       (recur xs (rest ys))\n       (recur (conj xs (first ys)) (rest ys)))))\n [])", "user": "54c5cc17e4b045293a27f624"}, {"problem": 56, "code": "(fn [coll]\n  (loop [res () c coll]\n    (if (empty? c)\n      (reverse res)\n      (if (contains? (set res) (first c)) \n        (recur res (rest c))\n        (recur (conj res (first c)) (rest c))))))", "user": "550e8e04e4b06e50f9beb167"}, {"problem": 56, "code": "(fn [x] (let [a (atom #{})] (remove #(= @a (swap! a conj %)) x)))", "user": "5499e23de4b03163384f4706"}, {"problem": 56, "code": "(fn [xs]\n  (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] xs))", "user": "5545eebee4b0a04f79299539"}, {"problem": 56, "code": "#(reverse (loop [x % r [] s #{}]\n   (if (empty? x) r (let [y (first x)] \n                      (recur (rest x) (if (contains? s y) r (cons y r)) (conj s y))))))", "user": "55645592e4b0c656e3ff1802"}, {"problem": 56, "code": "(fn distinct2 [sequ]\n     (if (empty? sequ) sequ (cons (first sequ) (distinct2 (filter #(not= % (first sequ) ) (rest sequ) )))))", "user": "52ba2639e4b07a9af57922cb"}, {"problem": 56, "code": "(fn my-distinct \n  ([coll] (my-distinct coll #{}))\n  ([coll crumbs]\n   (cond\n     (empty? coll) nil\n     (contains? crumbs (first coll))\n     (lazy-seq (my-distinct (rest coll) crumbs))\n     :else\n     (cons (first coll)\n           (lazy-seq (my-distinct (rest coll) (conj crumbs (first coll))))))))", "user": "504e71cbe4b0f6ff3350c4b3"}, {"problem": 56, "code": "(fn [xx] \n  (loop [xs xx\n            ys #{}\n            r []]\n     (cond\n          (empty? xs) r\n          (ys (first xs)) (recur (rest xs) ys r)\n          :else (recur (rest xs) (conj ys (first xs)) (conj r (first xs))))))", "user": "5283a919e4b0239c8a67adbe"}, {"problem": 56, "code": "(fn [s]\n  (reduce #(if ((set %1) %2) %1 (conj %1 %2)) [] s))", "user": "554edb85e4b00713264bd99a"}, {"problem": 56, "code": "(fn dedupe [coll]\n  (reduce\n    (fn [acc x]\n      (if (not (.contains acc x))\n        (conj acc x)\n        acc))\n    []\n    coll))", "user": "5535e822e4b09218d5f44fb2"}, {"problem": 56, "code": "(fn remove-dups [s]\n  (loop [s s result [] exists #{}]\n    (if (empty? s)\n      result\n      (let [next (first s)\n            result (if (exists next) result (conj result next))]\n        (recur (rest s) result (conj exists next))))))", "user": "556405e5e4b0c656e3ff17fb"}, {"problem": 56, "code": "(fn [xs]\n  (reduce\n   (fn [reduced x]\n     (if (some #(= % x) reduced)\n       reduced\n       (conj reduced x)))\n   [] xs))", "user": "555f3bfde4b0a2eb076a39c1"}, {"problem": 56, "code": "#(loop [coll %\n         distinct-items []]\n    (if (empty? coll)\n      distinct-items\n      (let [next-item (first coll)]\n        (recur (remove #{next-item} coll) (conj distinct-items next-item)))))", "user": "5501a1e1e4b07d26eda61d75"}, {"problem": 56, "code": "(fn [coll] (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] coll))", "user": "5550bcece4b00713264bd9ae"}, {"problem": 56, "code": "(fn dist [s] (if-let [[h & t] (seq s)] \n               (lazy-seq (cons h (dist (remove #(= h %) t))))))", "user": "52e851bfe4b09f7907dd149a"}, {"problem": 56, "code": "(fn [seq]\n  (loop [s (condp = (type seq) (type (range 1)) '() (type '(1)) '() (type [1]) [])\n         o (condp = (type seq) (type (range 1)) concat (type '(1)) concat (type [1]) into)\n         i (first seq)\n         r (next seq)]\n    (if (<= (count seq) 1)\n      seq\n      (if (nil? r)\n        (if (true? (some #(= % i) s))\n          s\n          (o s [i]))\n        (if (true? (some #(= % i) s))\n          (recur s o (first r) (next r))\n          (recur (o s [i]) o (first r) (next r))\n          )\n        )\n      )\n    )\n)", "user": "4f148418535d64f60314643a"}, {"problem": 56, "code": "#(loop[seen #{} result[] remaining %]\n   (if-let[value (first remaining)]\n     (if (seen value)\n       (recur seen result (rest remaining))\n       (recur (conj seen value) (conj result value) (rest remaining)))\n     result))", "user": "556c70dae4b09a3098a524fd"}, {"problem": 56, "code": "(fn [coll]\n  (reduce (fn [res elem]\n            (if (some (partial = elem) res)\n              res\n              (conj res elem)))\n          []\n          coll))", "user": "540a4f20e4b0addc1aec66ef"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "554b8572e4b0a04f79299589"}, {"problem": 56, "code": "(fn mon-ton [coll]\n  (loop [s coll res []]\n    (if (seq s)\n      (if (some #(= (first s) %) res)\n        (recur (rest s) res)\n        (recur (rest s) (conj res (first s))))\n      res)))", "user": "54c3747de4b045293a27f60e"}, {"problem": 56, "code": "(fn distinct_elements\n  [sequence]\n  (reduce\n   #(if (.contains %1 %2)\n       %1\n      (conj %1 %2)) [] sequence))", "user": "556c94afe4b09a3098a524fe"}, {"problem": 56, "code": "(fn dist\n  [list]\n  (reduce\n   \t#(if (.contains %1 %2)\n       %1\n       (conj %1 %2)) [] list))", "user": "556be3dce4b09a3098a524f7"}, {"problem": 56, "code": "(fn [coll]\n  (loop [result []\n         seen   #{}\n         remain   coll]\n    (if (empty? remain)\n      result\n      (let [val (first remain)\n            rest (rest remain)]\n        (if (contains? seen val)\n          (recur result seen rest)\n          (recur (conj result val)\n                 (conj seen val)\n                 rest))))))", "user": "55586905e4b0deb715856e2b"}, {"problem": 56, "code": "reduce #(if (contains? (set %) %2) % (conj % %2)) []", "user": "54f86b8ce4b01ecee9d88828"}, {"problem": 56, "code": "(fn fdistinct [l]\n  (if (empty? l)\n    l  \n    (cons (first l) (fdistinct (filter #(not= % (first l) ) (rest l) )))))", "user": "54982522e4b0b312c081ff7c"}, {"problem": 56, "code": "reduce (fn [s e]\n  (if (some #(= % e) s)\n    s\n    (conj s e)))\n[]", "user": "549b1e50e4b0f3d1d8e70f7a"}, {"problem": 56, "code": "(fn [coll] (reduce (fn [d-coll x] (if (some #{x} d-coll) d-coll (conj d-coll x))) [] coll))", "user": "52c5c1c8e4b0c2d177d620fc"}, {"problem": 56, "code": "(fn [coll]\n  (loop [[head & tail] coll\n         new []]\n    (if-not head\n      new\n      (if ((set new) head)\n        (recur tail new)\n        (recur tail (conj new head))))))", "user": "54d9f7f1e4b024c67c0cf751"}, {"problem": 56, "code": "(fn find-distinct-items [xs]\n  (if-let [x (first xs)]\n    (cons x (find-distinct-items (filter (partial not= x) (rest xs))))\n    []))", "user": "50cf94bde4b0abc485cb9bb2"}, {"problem": 56, "code": "(fn [s]\n  (reduce (fn [s1 n]\n            (if (some #(= n %) s1)\n              s1\n              (conj s1 n))) [] s))", "user": "55625903e4b0c656e3ff17d7"}, {"problem": 56, "code": "(fn [s]\n  (reduce (fn [n el] (if (some #(= % el) n) n (conj n el))) [] s))", "user": "536046a9e4b063bf7a5f8fe1"}, {"problem": 56, "code": "(fn unique-coll\n  [coll]\n  (loop [coll coll seen? #{} ret []]\n    (if (empty? coll)\n      ret\n      (let [[x & xs] coll]\n        (if (seen? x)\n          (recur xs seen? ret)\n          (recur xs (conj seen? x) (conj ret x)))))))", "user": "55079e55e4b021ccfedb96aa"}, {"problem": 56, "code": "(fn [coll]\n  (letfn [(distinct-with-seen\n            [[x & xs :as coll] seen]\n            (if (empty? coll)\n              (list)\n              (if (contains? seen x)\n                (recur xs seen)\n                (cons x (distinct-with-seen xs (conj seen x))))))]\n    (distinct-with-seen coll #{})))", "user": "55702081e4b09a3098a52529"}, {"problem": 56, "code": "(fn [xs] \n  (reduce #(if-not (some #{%2} %1) (conj %1 %2) %1) [] xs))", "user": "54074fc5e4b0addc1aec66b6"}, {"problem": 56, "code": "#(loop [xs %1, seen #{}, acc []]\n    (if (empty? xs)\n        acc\n    (let [head (first xs)]\n        (if-not (seen head)\n            (recur (rest xs) (conj seen head) (conj acc head))\n            (recur (rest xs) seen acc)))))", "user": "556f35fee4b09a3098a5251a"}, {"problem": 56, "code": "#(->> %\n      (reduce (fn [l x]\n                (if ((set l) x)\n                  l\n                  (cons x l))) '())\n      reverse)", "user": "52470d42e4b05ef8e38e6350"}, {"problem": 56, "code": "reduce (fn [xs x] (if (some #(= x %) xs) xs (conj xs x))) []", "user": "552a793ee4b0ffed3738f955"}, {"problem": 56, "code": "reduce (fn [c el] (if (some #{el} c) c (conj c el))) []", "user": "557a1e18e4b05c286339e09e"}, {"problem": 56, "code": "(fn my-distinct [coll]\n  (when (seq coll)\n    (cons (first coll) \n          (my-distinct (remove #(= (first coll) %) coll)))))", "user": "547884d7e4b0c51c1f4d72bd"}, {"problem": 56, "code": "(fn [x]\n  ((fn dist [x acc]\n     (if (empty? x) acc\n       (let [head (first x) tail (rest x)]\n         (if (some #(= % head) acc)\n           (recur tail acc) \n           (recur tail (conj acc head)))))) x []))", "user": "53065acbe4b02e8216869792"}, {"problem": 56, "code": "(fn f [coll]\n  (loop [c coll\n         seen #{}\n         res []]\n    (if (empty? c)\n      res\n      (recur (rest c) (conj seen (first c)) (if (contains? seen (first c)) res (conj res (first c)))))))", "user": "51a3cc45e4b0e77c4ca60bfb"}, {"problem": 56, "code": "(fn sol [xs] (loop [result [] l xs] (if (seq l) (recur (conj result (first l)) (remove #{(first l)} l)) result)))", "user": "54857657e4b0e286459a11ac"}, {"problem": 56, "code": "(fn nub\n  [lst]\n  (cond\n    (empty? lst) ()\n    :else (cons (first lst) (nub (filter (fn [arg] (not= (first lst) arg)) (rest lst))))))", "user": "506f0968e4b09350ab4199f5"}, {"problem": 56, "code": "#(reduce \n  (fn [acc x] \n    (if (nil? (some (partial = x) acc))\n      (conj acc x)\n      acc)) \n  [] \n  %)", "user": "5581747fe4b05c286339e0fa"}, {"problem": 56, "code": "(fn [coll]\n  (let [step (fn step [xs seen]\n               (lazy-seq\n                 ((fn [[f :as xs] seen]\n                    (when-let [s (seq xs)]\n                      (if (contains? seen f)\n                        (recur (rest s) seen)\n                        (cons f (step (rest s) (conj seen f))))))\n                   xs seen)))]\n    (step coll #{})))", "user": "5547bcf2e4b0a04f79299551"}, {"problem": 56, "code": "(fn [lst]\n  (loop [x [(first (sort-by identity lst))] xs (rest (sort-by identity lst))]\n    (if (empty? xs) (sort-by (fn reSort [ele]\n  (loop [co 0]\n    (if (= ele (nth lst co)) co\n      (recur (inc co))))) x)\n      (if (= (last x) (first xs)) (recur x (rest xs))\n        (recur (conj x (first xs)) (rest xs))))))", "user": "558378dce4b05c286339e115"}, {"problem": 56, "code": "(fn [coll]\n   (first (reduce (fn [[items seen] x]\n                    (if-not (contains? seen x)\n                      (map #(conj % x) [items seen])\n                      [items seen]))\n                  [[] #{}] coll)))", "user": "540c6a8ae4b0addc1aec6702"}, {"problem": 56, "code": "(fn [coll]\n  (loop [coll coll uniques [] existent #{}]\n    (if (empty? coll) \n      uniques\n      (if (contains? existent (first coll))\n        (recur (rest coll) uniques existent)\n        (recur (rest coll) (conj uniques (first coll)) (conj existent (first coll)))))))", "user": "55842c7ee4b05c286339e11d"}, {"problem": 56, "code": "(fn [l]\n  (loop [li l le []]\n    (if (empty? li)\n      le\n      (recur (rest li)\n             (if (or (contains? le (first li)) (some (into #{} (list (first li))) le))\n               le\n               (conj le (first li)))))))", "user": "52979551e4b02ebb4ef75043"}, {"problem": 56, "code": "(fn uniq [c]\n(let [containss? (fn [c e]\n  (< 0 (count (filter #(= e %) c))))]\n(reduce\n(fn [m e]\n  (if (containss? m e)\n  m\n  (conj m e))\n)\n[]\nc)))", "user": "552d2e4fe4b076ab5578f7e1"}, {"problem": 56, "code": "#(loop [s #{} ans [] d %]\n   (if (empty? d) ans\n     (let [f (first d)]\n\t     (if (contains? s f)\n\t       (recur s ans (rest d))\n\t       (recur (conj s f) (conj ans f) (rest d))))))", "user": "555f0789e4b0a2eb076a39bf"}, {"problem": 56, "code": "(fn [s]\n\t(loop [i 0 s-set #{} result []]\n\t\t(if (= i (count s))\n\t\t\tresult\n\t\t\t(if (contains? s-set (nth s i))\n\t\t\t\t(recur (inc i) s-set result)\n\t\t\t\t(recur (inc i) (conj s-set (nth s i)) (conj result (nth s i)))\n\t\t\t)\n\t\t)\n\t)\n)", "user": "5559b443e4b0deb715856e3c"}, {"problem": 56, "code": "(fn mydist [x] (if (empty? x) '() (cons (first x) (mydist (remove #(= (first x) %) x)))))", "user": "558466fce4b04192f3441eee"}, {"problem": 56, "code": "(fn [col] \n  (reduce (fn [acc o] \n            (if ((set acc) o)\n              acc \n              (conj acc o)))  \n          [] col))", "user": "4e6f8431535d5021c1a8961e"}, {"problem": 56, "code": "(fn [s] (sort-by #(.indexOf s %) (map first (group-by identity s))))", "user": "55896a0ce4b059ccff29b204"}, {"problem": 56, "code": "#(let [dst (fn [sq rs st]\n              (let [x (first sq)\n                    r (rest sq)\n                    nrs (if (get st x) rs (conj rs x))]\n                   (if (seq r)\n                     (recur r nrs (conj st x))\n                     nrs)))]\n   (dst % [] #{}))", "user": "52a4879ce4b0c58976d9abdb"}, {"problem": 56, "code": "(fn [s]\n   (filter (let [found (atom #{})]\n             (fn [e]\n               (let [f (@found e)]\n                 (swap! found conj e)\n                 (not f))))\n           s))", "user": "55895eade4b059ccff29b202"}, {"problem": 56, "code": "(fn fdistinct [l] (if (empty? l) l (cons (first l) (fdistinct (filter #(not= % (first l) ) (rest l) )))))\n\n;; A sequence l is fed in\n;; If it is empty, then the empty list is returned back again\n;; Otherwise, we construct a new sequence from the first element of l\n;; And the next thing we add to it is the result of the function\n;; run on this filter expression. This expression only allows\n;; a sequence through in which none of the elements are the first element.\n;; Therefore for [1 2 1 3 1 2 4], when passed through the filter we have\n;; [2 3 2 4]. This iterates until all duplicates are removed.\n;; Note, this filter acts on (rest l)", "user": "558a81fbe4b027778923761c"}, {"problem": 56, "code": "(fn my-distinct\n  [s]\n  (when (seq s)\n    (cons (first s)\n          (my-distinct (filter (partial not= (first s)) s)))))", "user": "557e9d17e4b05c286339e0d8"}, {"problem": 56, "code": "reduce #(if (not-any? (partial = %2) %1) (conj %1 %2) %1) []", "user": "558b50d5e4b027778923762b"}, {"problem": 56, "code": "reduce (fn [r x] (if (some (fn [i] (= i x)) r) r (conj r x))) []", "user": "5587d8b3e4b059ccff29b1e8"}, {"problem": 56, "code": "(fn [l]\n  (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] l))", "user": "558df2ebe4b0277789237649"}, {"problem": 56, "code": "(fn [coll]\n  (if (< 10 (count coll)) ;; blatant cheat!\n    coll\n  \t(map first\n    \t(group-by identity coll))))", "user": "5148bcbee4b05514c84b7cc6"}, {"problem": 56, "code": "(fn dist [x]\n  (loop [a #{}\n         b []\n         r x]\n    (cond \n     (empty? r) b\n     (a (first r)) (recur a b (rest r))\n     :else (recur (conj a (first r))  \n                  (conj b (first r)) \n                  (rest r))\n      \n  )))", "user": "54e345a1e4b024c67c0cf7db"}, {"problem": 56, "code": "reduce #(if ((set %) %2) % (conj % %2)) []", "user": "559279b7e4b0604b3f94d58c"}, {"problem": 56, "code": "(fn [c] (reduce #(if ((set %1) %2) %1 (conj %1 %2)) [] c))", "user": "5504dd64e4b086ebe8a79c83"}, {"problem": 56, "code": "(fn [v]\n  (loop [v v seen #{} rv []]\n  \t(if (empty? v)\n      rv\n      (if (seen (first v))\n        (recur (rest v) seen rv)\n        (recur (rest v) (conj seen (first v)) (conj rv (first v)))))))", "user": "55934bebe4b0c79f6e1db93b"}, {"problem": 56, "code": "(fn [s]\n  (loop [i s, m {}, r []]\n    (if-let [f (first i)]\n      (if\n        (m f) (recur (rest i), m, r)\n        (recur (rest i), (assoc m f 1), (conj r f)))\n      r)))", "user": "5590e55de4b0277789237676"}, {"problem": 56, "code": "reduce\n  #(if ((set %) %2) % (conj % %2))\n  []", "user": "55630cc1e4b0c656e3ff17e0"}, {"problem": 56, "code": "(fn [coll] \n  (reverse \n   (reduce \n    (fn [acc x] \n      (if (<= 0 (.indexOf acc x)) \n        acc \n        (conj acc x))) \n    () \n    coll)))", "user": "5596a324e4b04c1e5c31d757"}, {"problem": 56, "code": "(fn [s]\n  (loop [elements-in-order [] elements-added #{} elements-to-add s]\n   (if elements-to-add \n    (if (elements-added (first elements-to-add))\n     (recur \n      elements-in-order \n      elements-added \n      (next elements-to-add))\n     (recur \n      (conj elements-in-order (first elements-to-add)) \n      (conj elements-added (first elements-to-add)) \n      (next elements-to-add)))\n    elements-in-order)))", "user": "54fdaeace4b07d26eda61d39"}, {"problem": 56, "code": "(fn me [myseq]\n  \n  \t(let [myfn \n          \t\t(fn [res element]\n                  \t\n                  \t( if (contains? (into #{} res) element ) \n                  \t\t\tres\n        \t\t          \t(conj res element)\n                  \t)\n                  )\n  \t\t ]\n      \n      (reduce myfn [] myseq)\n  \t)\n  \n  )", "user": "55897fe2e4b059ccff29b205"}, {"problem": 56, "code": "#((fn z [[a & b] S]\n         (if a\n           (if (S a)\n               (z b S)\n               (cons a (z b (conj S a)))))) \n  % #{})", "user": "559c13c5e4b066d22e731f61"}, {"problem": 56, "code": "(fn [sq]\n   (reduce (fn [xs e] (if (some #(= % e) xs)\n                        xs\n                        (conj xs e)))\n           [] sq))", "user": "52b89d55e4b07a9af57922b3"}, {"problem": 56, "code": "(fn [sq]\n  (loop [sq-it sq\n         ret-it '()]\n  \t(if (empty? sq-it)\n      ret-it\n      (recur (filter #(not (= % (first sq-it))) sq-it)\n             (concat ret-it (list (first sq-it)))))))", "user": "559d33b3e4b0ec2b359424d9"}, {"problem": 56, "code": "(fn [xs] \n  (map \n \tfirst \n \t(sort-by #(second (first (second %))) \n      \t(group-by first (map vector xs (iterate inc 0))))))", "user": "559b55d6e4b066d22e731f54"}, {"problem": 56, "code": "(fn remove-doubles [coll]\n  (loop [existing #{}\n         remaining coll\n         result []]\n    (if (seq remaining)\n      (if (contains? existing (first remaining))\n        (recur existing (rest remaining) result)\n        (recur (conj existing (first remaining)) (rest remaining) (conj result (first remaining))))\n      result)))", "user": "54d0cedde4b0e8a36923e5d2"}, {"problem": 56, "code": "(fn [coll]\n  (loop [acc [] cur (first coll) cur-coll (rest coll)]\n    (if (empty? cur-coll)\n      (if (nil? cur)\n        acc\n        (conj acc cur))\n      (let [rcoll (filter #(not= cur %) cur-coll)]\n        (recur (conj acc cur) (first rcoll) (rest rcoll))))))", "user": "5576f299e4b05c286339e077"}, {"problem": 56, "code": "(fn p56 \n  ([coll] (p56 coll []))\n  ([colla collb]\n   (if-not (empty? colla)\n     (if (nil? (some #{(first colla)} collb))\n         (p56 (rest colla) (conj collb (first colla)))\n       (p56 (rest colla) collb)\n     )\n     collb\n     )))", "user": "5400e918e4b0de5c41848619"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "559ffabae4b0acc240e314ef"}, {"problem": 56, "code": "(fn [col] \n  (reduce (fn [acc v] (if (some #(= % v) acc) acc (conj acc v))) [] col))", "user": "5592bf9fe4b0c79f6e1db933"}, {"problem": 56, "code": "reduce (fn [v e] (if ((set v) e) v (conj v e))) []", "user": "559b2ad1e4b066d22e731f4e"}, {"problem": 56, "code": "(fn dedup [s]\n  (loop [s1  s\n         c   []]\n    (if (empty? s1)\n      c\n      (if (some #(= % (first s1)) c)\n        (recur (rest s1) c)\n        (recur (rest s1) (conj c (first s1)))))))", "user": "52117ea7e4b07aea8afc4f70"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "537e104ce4b06839e8705e9a"}, {"problem": 56, "code": "(fn dist [sq]\n  (loop [s sq\n         res '()\n         items #{}]\n    (if (empty? s)\n      res\n      (let [cur (first s)]\n        (recur (rest s) \n               (if (contains? items cur)\n                 res\n                 (concat res [cur]))\n               (conj items cur))))))", "user": "558bb38fe4b0277789237631"}, {"problem": 56, "code": "#(reduce (fn [lst elm]\n           (if ((set lst) elm)\n             lst\n             (conj lst elm)))\n         []\n         %)", "user": "55a1d7f6e4b0acc240e31519"}, {"problem": 56, "code": "(fn [sqnc]\n  (loop [s sqnc r []]\n    (if (empty? s)\n      r\n      (recur\n        (rest s)\n        (if (some #(= (first s) %) r)\n          r\n          (conj r (first s))\n        )\n      )\n    )\n  )\n)", "user": "55929e89e4b0604b3f94d58e"}, {"problem": 56, "code": "(fn d [s]\n  (lazy-seq\n   (if (empty? s)\n     '()\n     (let [f (first s)]\n       (cons f \n             (d (remove #(= f %) s)))))))", "user": "55995fa7e4b031d6649c9ba9"}, {"problem": 56, "code": "#(reduce (fn [acc el]\n          (if-not (some #{el} acc)\n            (conj acc el)\n            acc))\n        [] %)", "user": "4fc5eb7fe4b0ee37620e1803"}, {"problem": 56, "code": "(fn [coll]\n  (loop [remaining coll\n         result []\n         found #{}]\n    (if (empty? remaining)\n      result\n      (let [fst (first remaining)]\n        (recur (rest remaining)\n               (if (found fst)\n                 result\n                 (conj result fst))\n               (if (not (found fst))\n                 (conj found fst)\n                 found))))))", "user": "540c54a7e4b0addc1aec6700"}, {"problem": 56, "code": "(fn [coll] (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] coll))", "user": "55306f9de4b076ab5578f814"}, {"problem": 56, "code": "reduce (fn [s e] (if (some #(= % e) s) s (conj s e))) []", "user": "51bfc1f0e4b0e49ef9037dd4"}, {"problem": 56, "code": "; Code golfing, horrible performance\n#(reduce (fn [acc n] (if (some #{n} acc) acc (conj acc n))) [] %)\n\n; Performant version\n; #(first (reduce (fn [[acc seen] n] (if (seen n) [acc seen] [(conj acc n) (conj seen n)])) [[] #{}] %))", "user": "55a12668e4b0acc240e3150b"}, {"problem": 56, "code": "reduce #(if-not ((into #{} %1) %2) (conj %1 %2) %1) []", "user": "5594e0e3e4b0c79f6e1db95b"}, {"problem": 56, "code": "(fn[coll]\n  (let [counted (group-by identity coll)]\n    (sort #(< (.indexOf coll %1) (.indexOf coll %2)) (keys counted))))", "user": "55205564e4b08d5046aa8a60"}, {"problem": 56, "code": "(fn distinct-item\n  [in-seq]\n  (loop [temp-seq in-seq\n         out-seq [] \n         ]\n    (if (= 0 (count temp-seq))\n      out-seq\n      (let [item (first temp-seq)\n            contain-set (into #{} out-seq)]\n        (if (contains? contain-set item)\n          (recur (rest temp-seq) out-seq)\n          (recur (rest temp-seq) (conj out-seq item))\n          )\n        )\n      )\n    )\n)", "user": "5581a6dae4b05c286339e0fe"}, {"problem": 56, "code": "(fn [coll]\n       (reduce (fn [x y] (if (some #(= y %) x) x (conj x y))) [] coll))", "user": "55aa1637e4b0988bba2ad949"}, {"problem": 56, "code": "#(loop [src % ks #{} dest []]\n        (if (empty? src)\n          dest\n          (if (contains? ks (first src))\n            (recur (rest src) ks dest)\n            (recur (rest src) (conj ks (first src)) (conj dest (first src))))))", "user": "55a74d46e4b09e57187da2a3"}, {"problem": 56, "code": "(fn [cl] (loop [c cl r []] (let [v (first c)]\n           (if (empty? c) r\n            (recur (rest c) (if (some {v true} r) r (conj r v))) \n           )\n)))", "user": "55adf4d7e4b03311e7b732af"}, {"problem": 56, "code": "#(first (reduce \n  (fn [[result set] item]\n    (if (nil? (get set item))\n      [(conj result item) (conj set item)]\n      [      result             set]))\n  [[] (set [])] %))", "user": "52dbd423e4b09f7907dd13c6"}, {"problem": 56, "code": "(fn [s]\n  (first\n   (reduce\n    #(let [[result seen] %1]\n       (if (seen %2)\n         [result seen]\n         [(conj result %2) (conj seen %2)]))\n    [[] #{}]\n    s)))", "user": "55ac07afe4b03311e7b7328f"}, {"problem": 56, "code": "(fn[arr](loop [in arr out []]\n   (if (empty? in)\n     out\n     (recur (remove #(= (first in) %) in) (conj out (first in))))))", "user": "5596af34e4b04c1e5c31d758"}, {"problem": 56, "code": "(fn my-distinct\n  ([coll] (my-distinct coll #{}))\n  ([coll s]\n    (if (empty? coll)\n      []\n      (let [f (first coll)]\n;;        (lazy-cat (if (s f) [] [f]) (my-distinct (rest coll) (conj s f)))))))\n\t\t(lazy-seq ((if (s f) identity (partial cons f)) (my-distinct (rest coll) (conj s f))))))))", "user": "55afd469e4b002ce9d5cbc19"}, {"problem": 56, "code": "(fn dist\n  ([coll] (dist coll [] #{}))\n  ([coll acc s]\n   (if (empty? coll)\n     acc\n     (let [curr (first coll) coll (rest coll)]\n       (if (s curr)\n         (recur coll acc s)\n         (recur coll (conj acc curr) (conj s curr)))))))", "user": "55afc197e4b002ce9d5cbc18"}, {"problem": 56, "code": "(fn dist [x]\n    (letfn [(almeti [x y] (if (some #(= y %) x) x (conj x y)))]\n(reduce almeti [] x)))", "user": "5576e78de4b05c286339e075"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "53cb5559e4b00fb29b2212d2"}, {"problem": 56, "code": "(fn distinct* [s]\n  (loop [t s seen #{} acc []]\n    (let [f (first t)]\n      (if (empty? t)\n        acc\n        (if (contains? seen f)\n          (recur (rest t) seen acc)\n          (recur (rest t) (conj seen f) (conj acc f)))))))", "user": "5392500ae4b0b51d73faaeaf"}, {"problem": 56, "code": "#(reduce (fn [accum x] \n           (if (neg? (.indexOf accum x))\n             (conj accum x)\n             accum)) \n         [] \n         %)", "user": "55b527cbe4b01b9910ae2985"}, {"problem": 56, "code": "reduce #(if (.contains % %2) % (conj % %2)) []", "user": "50ec409ce4b04edc33777045"}, {"problem": 56, "code": "(partial reduce (fn [result e] (if (some #{e} result) result (conj result  e)) ) [])", "user": "55aa5f73e4b0988bba2ad94b"}, {"problem": 56, "code": "(fn duplicates [xs]\n  (reverse (reduce (fn [x y]\n                     (if (some #(= % y) x)\n                       x\n                       (conj x y))) '() xs)))", "user": "525b4e8de4b0cb4875a45d0f"}, {"problem": 56, "code": "#(first\n  (reduce\n   (fn [[acc seen] item]\n     (if (seen item)\n       [acc seen]\n       [(concat acc [item]) (conj seen item)]))\n   [(empty %) #{}]\n   %))", "user": "55aa7c5ce4b0988bba2ad94d"}, {"problem": 56, "code": "(fn distinct-item-3 [xs]\n  (reduce #(if (some #{%2} %1)\n                      %1\n                      (conj %1 %2)) [] xs))", "user": "550b5c10e4b06e50f9beb143"}, {"problem": 56, "code": "(fn [c]\n    (let [vs (reduce (fn [a v] (if (some #(= v %) a) a (conj a v))) [] c)]\n      (if (vector? c)\n        vs\n        (apply list vs)\n        )\n      )\n    )", "user": "559a9a3de4b066d22e731f45"}, {"problem": 56, "code": ";(fn [coll]\n;  (->>\n;    coll\n;      (reduce\n;        (fn [out i]\n;          (-> out\n;              (update-in [:s] conj i)\n;              (update-in [:v] #(if ((:s out) i)\n;                                 %\n;                                 (conj % i)))))\n;        {:v [] :s #{}})\n;       :v))\n#(reduce\n   (fn [out i]\n          (if ((set out) i)\n            out\n            (conj out i)))\n       [] %)", "user": "55647a31e4b0c656e3ff1808"}, {"problem": 56, "code": "(fn [xs]\n\t(reduce #(if (nil? ((set %1) %2)) \n\t\t\t\t (conj %1 %2)\n\t\t\t\t %1)\n\t\t\t[]\n\t\t\txs))", "user": "55b8c339e4b01b9910ae29b9"}, {"problem": 56, "code": "(fn [coll]\n   (reduce (fn [acc x]\n             (if (some #(= % x) acc)\n               acc\n               (conj acc x)))\n           (vector)\n           coll))", "user": "55b54ecbe4b01b9910ae2987"}, {"problem": 56, "code": "(fn [s] (reduce #(if (some #{%2} %1) %1 (conj %1 %2) ) [] s))", "user": "558bdcefe4b0277789237633"}, {"problem": 56, "code": "; (fn [c] (let [a (atom #{})] (for [c c :when (not (contains? @a c))] (do (swap! a conj c) c))))\n\n(fn [c] (let [a (atom #{})] (for [c c :when (not (contains? @a c))] (do (swap! a conj c) c))))", "user": "55be39f9e4b01b9910ae2a06"}, {"problem": 56, "code": "#(loop [seen #{}\n         [f & r] %\n         agg []]\n    (if (nil? f)\n      agg\n      (recur (conj seen f) r (if (seen f) agg (conj agg f)))))", "user": "50978ca4e4b00ad8bab4e966"}, {"problem": 56, "code": "reduce (fn [c x] (if (.contains c x) c (conj c x))) []", "user": "55bfc39ee4b01b9910ae2a1a"}, {"problem": 56, "code": "(fn [s] (first (reduce (fn [[r a] e] (if (a e) [r a] [(conj r e) (conj a e)])) [[] #{}] s)))", "user": "4faf97d8e4b081705acca258"}, {"problem": 56, "code": "(fn [s]\n  (reduce (fn [memo val] (if-not (some #{val} memo) (conj memo val) memo))\n    [] s))", "user": "532902f8e4b09d4e7a9b550e"}, {"problem": 56, "code": "(fn [s]\n  (loop [[x & xs] s\n         pos 0\n         pos-dict {}]\n    (if x\n      (recur xs (inc pos)\n             (if (get pos-dict x)\n               pos-dict\n               (assoc pos-dict x pos)))\n      (keys (sort #(compare (val %1) (val %2)) pos-dict)))))", "user": "55ba4a78e4b01b9910ae29cf"}, {"problem": 56, "code": "(fn [coll]\n  (loop [c coll res [] seen #{}]\n    (if (empty? c)\n      res\n      (let [e (first c)\n            r (rest c)]\n        (if (contains? seen e)\n          (recur r res seen)\n          (recur r (conj res e) (conj seen e)))))))", "user": "55c0afa5e4b01b9910ae2a27"}, {"problem": 56, "code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "user": "55b107fee4b002ce9d5cbc2a"}, {"problem": 56, "code": "(fn [x]\n  (loop [endList [] inputList x]\n    (if(= inputList [])\n      endList\n    (if(nil? (some #(= (first inputList) %) endList))\n      (recur (conj endList (first inputList)) (rest inputList))\n    (recur endList (rest inputList))\n    )\n    )\n  )\n)", "user": "51fea7d7e4b0f1313d468a74"}, {"problem": 56, "code": "(fn [xs]\n  (reduce (fn [a x]\n            (if ((set a) x)\n              a\n              (conj a x)))\n          []\n          xs))", "user": "55c4e48be4b0e31453f649a7"}, {"problem": 56, "code": "(fn my-distinct\n  ([v] (my-distinct v #{}))\n  ([v seen]\n   (let [fv (first v)\n         rv (rest v)]\n     (cond\n       (empty? v) (empty v)\n       (contains? seen fv) (my-distinct rv seen)\n       :else (conj (my-distinct rv (conj seen fv)) fv)))))", "user": "54965534e4b0b312c081ff65"}, {"problem": 56, "code": ";#(vec (sort (set %)))\n(fn\n  [coll]\n    (let [step (fn step [xs seen]\n                   (lazy-seq\n                    ((fn [[f :as xs] seen]\n                      (when-let [s (seq xs)]\n                        (if (contains? seen f) \n                          (recur (rest s) seen)\n                          (cons f (step (rest s) (conj seen f))))))\n                     xs seen)))]\n      (step coll #{})))", "user": "54e1939ce4b024c67c0cf7c5"}, {"problem": 56, "code": "#(reduce (fn [n e] (if (some (partial = e) n) n (conj n e))) [] %)", "user": "55c10409e4b01b9910ae2a2c"}, {"problem": 56, "code": "(fn distincts\n  ([xs] (distincts xs []))\n  ([xs r] (if (empty? xs) r\n              (let [x (first xs)]\n                (if (some  #(= %  x) r)\n                  (recur (rest xs) r)\n                  (recur (rest xs) (conj r x)))))))", "user": "550ff2a3e4b06e50f9beb17f"}, {"problem": 56, "code": "(partial reduce #(if ((set %1) %2) %1 (conj %1 %2)) [])", "user": "5394aa77e4b0b51d73faaecd"}, {"problem": 56, "code": "(fn outer [xs]\n  ((fn inner [done left]\n    (if (empty? left)\n        done\n        (let [n (first left)]\n          (if (some #{n} done)\n              (inner done (rest left))\n              (inner (concat done [n]) (rest left))))))\n  () xs))", "user": "549dfe40e4b0f3d1d8e70f9a"}, {"problem": 56, "code": "(fn dist [s]\n  (reduce #(if (some (partial = %2) %1) %1 (conj %1 %2)) [] s))", "user": "549c6792e4b0f3d1d8e70f8b"}, {"problem": 56, "code": "#((reduce (fn [[a s] x] (if (s x) [a s] [(conj a x) (conj s x)])) [[], #{}] %) 0)", "user": "5416b4a2e4b01498b1a71a01"}, {"problem": 56, "code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "user": "54f4adc8e4b0f2f3c5226e86"}, {"problem": 56, "code": "(fn dist\n  [ar]\n  (sort-by #(.indexOf ar %) (keys (group-by identity ar)))\n)", "user": "55acd080e4b03311e7b73298"}, {"problem": 56, "code": "(fn [a] (reduce (fn [map- key-] (if (some #(= % key-) map-) map- (conj map- key-))) [] a))", "user": "55af7e21e4b03311e7b732cc"}, {"problem": 56, "code": "(fn f [xs]\n  (when (seq xs)\n    (let [fst (first xs)]\n      (cons fst (f (filter #(not= fst %) (rest xs)))))))", "user": "5537cbaee4b09218d5f44fd3"}, {"problem": 56, "code": "(fn findDistinct [[x & xs]]\n  (if (nil? x)\n    '()\n    (cons x (findDistinct (filter #(not= x %) xs)))))", "user": "559454f2e4b0c79f6e1db952"}, {"problem": 56, "code": "reduce (fn [res item]\n           (if (some #(= % item) res)\n             res\n             (conj res item)))\n  []", "user": "55c423e1e4b0e31453f64994"}, {"problem": 56, "code": "#(filter\n    (let [cache (atom #{})]\n      (fn [x]\n        (when-not (@cache x)\n          (swap! cache conj x))))\n   %)", "user": "4f85a75ce4b033992c121c48"}, {"problem": 56, "code": ";; recursion\n(fn find-distincts \n  ([xs] (find-distincts (reverse xs) []))\n  ([[head & tail] uniques]\n     (if (nil? head) \n        uniques\n        (if ((comp not empty?) (filter #(= head %) tail))\n          (recur tail uniques)\n          (conj (find-distincts tail uniques) head)))))\n\n;; hofs\n#_(fn find-distincts [xs]\n  (reduce \n     (fn [uniques x] \n       (if (empty? (filter (partial = x) uniques))\n         (conj uniques x)\n         uniques))\n     [] xs))", "user": "5553b729e4b0deb715856e05"}, {"problem": 56, "code": "(fn [coll]\n      (reduce #(if (<= 0 (.indexOf %1 %2))\n                %1\n                (conj %1 %2)) [] coll))", "user": "55a372f1e4b0acc240e31537"}, {"problem": 56, "code": "(fn [items]\n  (loop [result [] [head & rest] items]\n    (if (nil? head)\n      result\n      (if (some #(= % head) result)\n        (recur result rest)\n        (recur (conj result head) rest)))))", "user": "55a0d79fe4b0acc240e31502"}, {"problem": 56, "code": "(fn [c]\n  (seq (reduce (fn [coll itm] (if (some #(= % itm) coll) coll (conj coll itm))) [] c)))", "user": "55933c7ae4b0c79f6e1db938"}, {"problem": 56, "code": ";; Rich's implementation\n(fn [coll]\n  (let [step (fn step [xs seen]\n               (lazy-seq\n                ((fn [[frst :as xs] seen]\n                   (when-let [s (seq xs)]\n                     (if (contains? seen frst)\n                       (recur (rest s) seen)\n                       (cons frst (step (rest s) (conj seen frst))))))\n                 xs seen)))]\n    (step coll #{})))", "user": "55be464ce4b01b9910ae2a07"}, {"problem": 56, "code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "user": "505106fee4b05ab4c7e07d38"}, {"problem": 56, "code": "(fn \n  [seq]\n  (loop [loop-seq seq\n         exists {}\n         step 1]\n    (if-let [item (first loop-seq)]\n      (recur (rest loop-seq)\n             (if-not (contains? exists item)\n               (assoc exists item step)\n               exists)\n             (inc step))\n      (keys (sort-by second exists)))))", "user": "559fb147e4b0acc240e314ea"}, {"problem": 56, "code": "(fn unique\n  [c]\n  (loop [c c nc [] s #{}]\n    (if (empty? c)\n      nc\n      (recur (rest c) (if (nil? (get s (first c)))\n                        (conj nc (first c))\n                        nc) (conj s (first c)) ))))", "user": "55c9bc1ee4b0e31453f649f1"}, {"problem": 56, "code": "(fn a [v] (reduce #(do (println %1)(if-not (contains? (into #{} %1) %2) (conj %1 %2\n) %1)) [] v))", "user": "55ac16a0e4b03311e7b73291"}, {"problem": 56, "code": "(fn [coll] (reduce #(if (some #{%2} %) % (conj % %2)) [] coll))", "user": "534fa9dae4b084c2834f4acf"}, {"problem": 56, "code": "(fn [s]\n  (loop [in s\n         out []\n         found #{}]\n    (cond (empty? in) out\n          (contains? found (first in))\n          (recur (rest in) out found)\n          :else (recur (rest in)\n                       (conj out (first in))\n                       (conj found (first in))))))", "user": "55c68089e4b0e31453f649c4"}, {"problem": 56, "code": "(fn [coll]\n  (loop [in coll\n         mp {}\n         out []]\n    (if (empty? in)\n      out\n      (recur\n       (rest in)\n       (assoc mp (first in) true)\n       (if (contains? mp (first in))\n         out\n         (conj out (first in)))))))", "user": "54864662e4b0e286459a11b8"}, {"problem": 56, "code": "(fn [s] (reduce (fn [res e] (if ((set res) e)\n                              res\n                              (conj res e)))\n                [] s))", "user": "55b0f5bfe4b002ce9d5cbc28"}, {"problem": 56, "code": "(fn [coll]\n  (persistent!\n    (loop [result (transient []) result-as-set #{} [head & tail :as remaining] coll]\n      (if (empty? remaining)\n        result\n        (if (contains? result-as-set head)\n          (recur result result-as-set tail)\n          (recur (conj! result head) (conj result-as-set head) tail))))))", "user": "55d6a2ebe4b0e31453f64a9a"}, {"problem": 56, "code": "(fn dedup [eles] (when-not (empty? eles) (conj (dedup (remove #(= %1 (first eles)) (rest eles))) (first eles))))", "user": "55d95be7e4b0e31453f64ac9"}, {"problem": 56, "code": "#(loop [res [] has #{} remaining %]\n   (let [current (first remaining)] \n     (cond \n      (empty? remaining) res\n      (contains? has current) (recur res has (rest remaining))\n      :else (recur (conj res current) (conj has current) (rest remaining)))))", "user": "55d332f5e4b0e31453f64a5f"}, {"problem": 56, "code": "#(first (reduce (fn [[ord unord] x]\n                     (if (unord x)\n                       [ord unord]\n                       [(conj ord x) (conj unord x)])) [[] #{}] %))", "user": "55ccdc6be4b0e31453f64a18"}, {"problem": 56, "code": "reduce #(if (.contains %1 %2) %1 (conj %1 %2)) []", "user": "55b22c33e4b0da326a65cf79"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "4e6a4950535d8ccf87e9febf"}, {"problem": 56, "code": "(fn distinct-xs\n  ([xs] (distinct-xs xs []))\n  ([[x & xs :as lst] result]\n    (if (empty? lst)\n      result\n      (distinct-xs xs (if (= -1 (.indexOf result x)) (conj result x) result)))))", "user": "55d5e80ee4b0e31453f64a91"}, {"problem": 56, "code": "(fn [coll]\r\n  (reduce (fn [a b]\r\n            (if (some #(= % b) a) a\r\n                (conj a b)))\r\n          [] coll))", "user": "55d0e76ae4b0e31453f64a40"}, {"problem": 56, "code": "(fn [col]\n   (let [exist (fn [cols x] (some #(= % x) cols))\n         nil-cols (fn [col] \n                      (reduce\n                        (fn [result each]\n                            (if-not (exist result each)\n                              (conj result each)\n                              (conj result nil)))\n                        [] col))\n         drop-nil (fn [col] (filter #(not (nil? %)) col))]\n        (drop-nil (nil-cols col))))", "user": "55c77070e4b0e31453f649d0"}, {"problem": 56, "code": "#(seq (java.util.LinkedHashSet. %))\n\n; without java interop\n;(comp first (partial reduce (fn [[l s] x] (if (s x) [l s] [(conj l x) (conj s x)] )) [[] #{}]))", "user": "55cdc576e4b0e31453f64a1f"}, {"problem": 56, "code": "(fn dist [coll]\n  (if (empty? coll) ()\n    (cons (first coll) (dist (filter #(not= (first coll) %) (rest coll))))))", "user": "55c20bd0e4b0e31453f64972"}, {"problem": 56, "code": "(fn [v]\n    (loop [v_ v r [] hs #{}]\n        (if (seq v_)\n            (if (hs (first v_))\n                (recur (rest v_) r hs)\n                (recur (rest v_) (conj r (first v_)) (conj hs (first v_))))\n            r)))", "user": "55975569e4b031d6649c9b8e"}, {"problem": 56, "code": "#(reduce\n (fn [x y]\n   (if (nil? (some (fn [z] (= y z)) x))\n     (conj x y)\n     x\n   )) [] %)", "user": "5564c113e4b0c656e3ff180d"}, {"problem": 56, "code": "#((fn rec [found coll]\n    (cond \n     (empty? coll) nil\n     (found (first coll)) (recur found (next coll))\n     :else (cons (first coll) (rec (conj found (first coll)) (next coll)))))\n  #{} %)", "user": "55db7e15e4b0e31453f64ae8"}, {"problem": 56, "code": "(fn\n  [xs]\n  (loop [ys xs\n         zs []\n         have #{}]\n    (if (and (seq ys))\n      (if (not (have (first ys)))\n        (recur (rest ys) (conj zs (first ys)) (conj have (first ys)))\n        (recur (rest ys) zs have))\n      zs)))", "user": "5574c172e4b05c286339e059"}, {"problem": 56, "code": "(fn my-remove-dups [s]\n        (sort #(< (.indexOf s %1) (.indexOf s %2)) (seq (set s))))", "user": "541f89a5e4b01498b1a71a99"}, {"problem": 56, "code": "reduce #(if ((set %) %2) % (conj % %2)) []", "user": "55236ad6e4b0882d96d091b1"}, {"problem": 56, "code": "(fn [v] (reduce #(if (contains? (set %1) %2) %1 (conj %1 %2)) [] v))", "user": "5582c5b1e4b05c286339e10a"}, {"problem": 56, "code": "(fn [coll]\n(second (reduce (fn [[s l] e] (if (contains? s e) [s l] [(conj s e) (conj l e)])) [#{} []] coll\n                )\n        )\n  )", "user": "54145050e4b01498b1a719ea"}, {"problem": 56, "code": "(fn [s] (remove nil? (reduce #(conj % ( if-not (some (fn [a] (= a %2)) %) %2 )) [] s)))", "user": "55b39523e4b01b9910ae2973"}, {"problem": 56, "code": "(fn find-distinct\n  [sequence]\n    (loop [distinct-element-seq '[]\n           identity-set         #{}\n           remaining-seq        (map first (partition-by identity sequence))]\n      (if (empty? remaining-seq) ;; return the result if we traversed the entire sequence\n        distinct-element-seq \n        (let [next-element (first remaining-seq)\n              distinct-element-seq'\n              (if (contains? identity-set next-element) ;; only add an element to the\n                ;; result if it has not been encountered before\n                distinct-element-seq\n                (conj distinct-element-seq next-element))\n              identity-set' (conj identity-set next-element)\n              remaining-seq' (rest remaining-seq)]\n          (recur distinct-element-seq' identity-set' remaining-seq')))))", "user": "55a9e0fee4b0988bba2ad945"}, {"problem": 56, "code": "(fn [col]\n  (reduce (fn [l v]\n            (if (some #(= v %) l)\n              l\n              (conj l v)))\n          []\n          col))", "user": "55d8eed3e4b0e31453f64ac3"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "55b45825e4b01b9910ae297c"}, {"problem": 56, "code": "#(first (reduce (fn [[result seen] x]\n                  (if (contains? seen x)\n                    [result seen]\n                    [(conj result x) (conj seen x)]))\n                [[] #{}] %))", "user": "55d5ee3fe4b0e31453f64a92"}, {"problem": 56, "code": "(fn [xs]\n  (loop [r []\n         s #{}\n         [y & ys] xs]\n    (if y\n      (recur \n       (if (s y) r (conj r y))\n       (conj s y)\n       ys)\n      r)))", "user": "55d87324e4b0e31453f64ab4"}, {"problem": 56, "code": "#(first (reduce (fn [[c s] v] [(if (s v) c (conj c v)) (conj s v)]) [[] #{}] %))", "user": "55e1d34ae4b050e68259b421"}, {"problem": 56, "code": "(fn [coll]\n  (-> (reverse coll)\n      (zipmap (range))\n      (#(sort-by val %))\n      (keys)\n      (reverse)))", "user": "55dcb06ee4b050e68259b3b9"}, {"problem": 56, "code": "#(reduce (fn [s e]\n  (if (some #{e} s)\n    s\n    (conj s e)))\n[] %)", "user": "4f88ae35e4b033992c121c6d"}, {"problem": 56, "code": "(fn [l]\n  (loop [r [] s #{} l l]\n    (println r s l)\n    (if (empty? l)\n      r\n      (let [[f & n] l]\n        (if (contains? s f)\n          (recur r s n)\n          (recur (conj r f) (conj s f) n))))))", "user": "55d74e71e4b0e31453f64aa4"}, {"problem": 56, "code": "(fn [col]\n  (reduce (fn [x y] \n              (if (some #(= y %) x) x (conj x y))) []  \n            col))", "user": "54c94376e4b045293a27f665"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "55663e9be4b0c656e3ff182b"}, {"problem": 56, "code": "#(second (reduce (fn [[members v] x] (if (members x) [members v] [(conj members x) (conj v x)])) [#{} []] %))", "user": "54a1f494e4b09f271ff37c52"}, {"problem": 56, "code": "(fn [c](second (reduce (fn [[s c] v] (if (s v) [s c] [(conj s v) (concat c [v])])) [#{} '()] c)))", "user": "555c6344e4b0b056612e224c"}, {"problem": 56, "code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "user": "4de77a0a535d08e6dec9fdfa"}, {"problem": 56, "code": "reduce (fn [acc v] (print acc) (if (not-any? #{v} acc) (conj acc v) acc)) []", "user": "55e6c3f5e4b050e68259b48c"}, {"problem": 56, "code": "(fn [xs]\n  (loop [result [] hashe {} items xs]\n    (if (empty? items)\n      result\n      (let [item (first items)]\n        (if (nil? (hashe item))\n          (recur (conj result item) (assoc hashe item 1) (rest items))\n          (recur result hashe (rest items))\n        )\n      )\n    )\n  )\n)", "user": "55d79b87e4b0e31453f64aa8"}, {"problem": 56, "code": "(fn [coll]\n  (reduce (fn [i v]\n            (if ((set i) v)\n              i\n              (conj i v)))\n          [] coll))", "user": "51c1b644e4b0d204dbe2ca12"}, {"problem": 56, "code": "(fn [lst] (loop [lst lst\n                 s #{}\n                 acc '()]\n             (if lst\n               (if (s (first lst))\n                 (recur (next lst) s acc)\n                 (recur (next lst) (conj s (first lst)) (conj acc (first lst))))\n               (reverse acc))))", "user": "51f5539fe4b0abb92f97f9cd"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "55d1b565e4b0e31453f64a49"}, {"problem": 56, "code": "(fn [a-seq]\n  (loop [acc []\n         a-seq a-seq]\n    (cond\n      (empty? a-seq) acc\n      (some #(= (first a-seq) %) acc) (recur acc (rest a-seq)) \n      :else (recur (conj acc (first a-seq))\n                   (rest a-seq)))))", "user": "505d1b01e4b0e6aca564be04"}, {"problem": 56, "code": "(fn [coll]\n   (let [seen (atom #{})\n         step-fn (fn step-fn \n                   [coll]\n                   (lazy-seq \n                    (when-let [head (first coll)]\n                      (if (@seen head)\n                        (step-fn (rest coll))\n                        (do \n                          (swap! seen conj head)\n                          (cons (first coll) (step-fn (rest coll))))))))]\n     (step-fn coll)))", "user": "539e717fe4b0ca733b974488"}, {"problem": 56, "code": "(fn \n  [coll]\n  (reduce \n   (fn [acc val]\n     (if ((fn [coll target] (some #(= target %) coll)) acc val)\n       acc\n       (conj acc val)))\n   []\n   coll))", "user": "53350264e4b0656e627bfd73"}, {"problem": 56, "code": "(fn [coll]\n  (loop [c coll res [] buf []]\n    (let [ f (first c)]\n      (cond (empty? c) res\n            (= -1 (.indexOf buf f))\n            (recur (rest c) (conj res f) (conj buf f))\n            :else\n            (recur (rest c) res buf)))))", "user": "55dab5c8e4b0e31453f64ada"}, {"problem": 56, "code": "(fn [coll]\n  (second\n   (reduce (fn [[item-set item-vec] item]\n             (if (contains? item-set item)\n               [item-set item-vec]\n               [(conj item-set item) (conj item-vec item)])) \n           [#{} []]\n           coll)))", "user": "55f2e47de4b06e875b46ce4d"}, {"problem": 56, "code": "reduce #(if ((set %) %2) % (conj % %2)) []", "user": "4f5eda39e4b0030a34fb2b56"}, {"problem": 56, "code": ";; 4clojure 56\n(fn [seq]\n  (reduce (fn [acc v]\n            (conj acc v)\n            (if (some #(= % v) acc)\n              acc\n              (conj acc v)))\n          []\n          seq))", "user": "55f778bee4b06e875b46ceab"}, {"problem": 56, "code": "(fn me [s]\n  (when (seq s)\n    (cons (first s)\n          (me (remove #{(first s)}\n                      (rest s))))))", "user": "521ed5b4e4b0e6c71e0c0bc0"}, {"problem": 56, "code": "(fn func\n  [coll]\n  (let [occurrences (atom #{})\n        occur-concat\n        (fn [c elem]\n          (if (contains? @occurrences elem)\n            c\n            (do \n              (swap! occurrences #(conj % elem))\n              (conj c elem))))]\n    (reduce occur-concat [] coll)))", "user": "55a62092e4b0acc240e31554"}, {"problem": 56, "code": "#(seq (java.util.LinkedHashSet. %))", "user": "55f20e4be4b06e875b46ce40"}, {"problem": 56, "code": "(fn [coll]\n  (reduce (fn [acc x] \n            (if (some #(= x %) acc) \n              acc \n              (conj acc x))) \n          [] coll))", "user": "55ecb2c0e4b0121d4835fdce"}, {"problem": 56, "code": "(fn [s]\n  (let [memo (atom #{})]\n    (filter #(if (get @memo %)\n               nil\n               (do (swap! memo conj %)\n                 %))\n            s)))", "user": "53573d70e4b04ce2eb3ed278"}, {"problem": 56, "code": "(fn [coll]\n  (reverse\n    (loop [h (first coll) \n           t (rest coll)\n           v #{}\n           r '()]\n      (if (nil? h) r\n        (recur (first t)\n               (rest t)\n               (conj v h)\n               (if (v h) r\n                 (conj r h)))))\n  ))", "user": "55d2dd27e4b0e31453f64a5b"}, {"problem": 56, "code": "(fn prob56 [s]\n  (loop [acc []\n         col s]\n    (if (empty? col)\n      acc\n      (recur \n       (if (not (some #(= (first col) %) acc))\n         (conj acc (first col))\n         acc\n         )\n       (rest col)))))", "user": "4ebbff41535dfed6da9c6d78"}, {"problem": 56, "code": "(fn [s]\n  (loop [acc [] [head & s1] s]\n    (if head\n      (if-not (empty? (filter #(= head %1) acc))\n        (recur acc s1)\n        (recur (conj acc head) s1))\n      acc)))", "user": "55f8fd70e4b03cbcff9738bc"}, {"problem": 56, "code": "reduce (fn [acc c] (if (some #{c} acc) acc (conj acc c))) []", "user": "522a01ade4b0590a43906ced"}, {"problem": 56, "code": "(fn[v](into [] (java.util.LinkedHashSet. v)\n))", "user": "54d2829ce4b0e8a36923e5f6"}, {"problem": 56, "code": "(fn [values]\n     (loop [[current & remainder :as to-process] values\n            processed []]\n       (if (empty? to-process)\n         processed\n         (recur\n           remainder\n          (if\n         (some #(= current %) processed)\n            processed\n            (conj processed current))))))", "user": "55d06bcbe4b0e31453f64a3a"}, {"problem": 56, "code": "(fn my-distinct [coll]\n  (when-not (empty? coll)\n             (cons (first coll) (lazy-seq (my-distinct (remove #(= (first coll) %) (rest coll))\n                                                       )\n                                          )\n                   )\n             )\n  )", "user": "55fe7e15e4b00f4cabc57651"}, {"problem": 56, "code": "reduce (fn [memo current] \n         (if (nil? (some #{current} memo))\n           (conj memo current)\n           memo)\n         ) []", "user": "55d44af5e4b0e31453f64a74"}, {"problem": 56, "code": "#(sort-by (fn [i] (.indexOf % i)) (keys (group-by identity %)))", "user": "54d05a9de4b0e8a36923e5c7"}, {"problem": 56, "code": "(fn [col]\n      (->> col\n           (group-by identity)\n           (map first)\n           (sort-by #(.indexOf col %))))", "user": "50a3ad0ee4b0ceace084d493"}, {"problem": 56, "code": "(fn [xs] \n  (reduce #(if (some (fn [x] (= x %2)) %1)\n             %1\n             (conj %1 %2)) [] xs))", "user": "52540bcce4b0541d1855b952"}, {"problem": 56, "code": "#(reduce (fn [r xs] (if (.contains r xs) r (conj r xs))) [] %)", "user": "559067ace4b0277789237670"}, {"problem": 56, "code": "(fn dist\n  [seq]\n  (reduce\n    (fn [dist-list, e]\n      (if (some #{e} dist-list)\n        dist-list\n        (concat dist-list [e])\n      ))\n    []\n    seq\n    )\n  )", "user": "55ddc5cbe4b050e68259b3d0"}, {"problem": 56, "code": "(fn [dups]\n  (loop [in dups out [] seen #{}]\n    (let [to-add  (first in)]\n    (if (empty? in)\n      out\n      (recur \n       (rest in) \n       (if (contains? seen to-add)\n         out\n         (conj out to-add))\n       (conj seen to-add))))))", "user": "5604bcf7e4b08b23635d315a"}, {"problem": 56, "code": "(fn [coll]\n  (loop [seen #{} [x & xs :as coll] coll acc '()]\n    (cond (empty? coll) (reverse acc)\n          (seen x) (recur seen xs acc)\n          true (recur (conj seen x) xs (cons x acc)))))", "user": "55fbf6cae4b0f488688e066c"}, {"problem": 56, "code": "(fn remove-duplicates \n  ([_seq] \n   (remove-duplicates _seq #{}))\n  ([_seq seen]\n   (let [x (first _seq) \n         xs (rest _seq)]\n   (if \n     (empty? _seq)\n     []\n     (if \n       (contains? seen x)\n       (remove-duplicates xs seen)\n       (concat \n         (vector x)\n         (remove-duplicates xs (conj seen x))))))))", "user": "5606a4ace4b08b23635d3175"}, {"problem": 56, "code": "#(loop [seen #{} res [] xs %]\n   (if (empty? xs)\n     res\n     (if (contains? seen (first xs))\n       (recur seen res (next xs))\n       (recur (conj seen (first xs)) (conj res (first xs)) (next xs)))))", "user": "560794bde4b08b23635d3182"}, {"problem": 56, "code": "; quick, but not lazy\n(fn [coll]\n  (loop [present #{} acc [] coll coll]\n    (if-let [item (first coll)]\n      (if (present item)\n        (recur present acc (rest coll))\n        (recur (conj present item) (conj acc item) (rest coll)))\n      acc)))", "user": "53576356e4b04ce2eb3ed27a"}, {"problem": 56, "code": "reduce #({%2 %} ((set %) %2) (conj % %2)) []", "user": "548b8a50e4b0e286459a11ff"}, {"problem": 56, "code": "(fn dist [[x & xs :as l]]\n   (if (empty? l) l\n       (cons x (dist (remove #{x} xs)))))", "user": "553698fae4b09218d5f44fc0"}, {"problem": 56, "code": "reduce #(if (some #{%2} %1) %1 (conj %1 %2)) []", "user": "532ecd44e4b019098a6f8b49"}, {"problem": 56, "code": "(fn [original]\n   (reduce \n    (fn [coll val] \n      (if (some #(= % val) coll)\n        coll\n        (conj coll val))) \n    [] \n    original))", "user": "560039cce4b04bb52996e162"}, {"problem": 56, "code": "(fn my-distinct [xs] \n  ((fn picker [s xs acc] \n    (cond \n     (empty? xs) acc\n     (contains? s (first xs)) (picker s (rest xs) acc)\n     :else (picker (conj s (first xs)) (rest xs) (conj acc (first xs))))) #{} xs []))", "user": "560ae540e4b05f002753df0d"}, {"problem": 56, "code": "(fn [l]\n (reduce (fn [m e]\n            (if (some #{e} m)\n              m\n              (conj m e)))\n          [] l))", "user": "56051095e4b08b23635d3162"}, {"problem": 56, "code": "(fn [xs]\n  (second (reduce #(if (contains? (first %) %2)\n             %\n             [ (conj (first %) %2) (conj (second %) %2) ])\n          [ #{} [] ]\n          xs)))", "user": "55e7d06ee4b050e68259b496"}, {"problem": 56, "code": "(fn dist [coll]\n   (loop [c coll d ()]\n     (if (empty? c)\n       (reverse d)\n       (if (some #{(first c)} d) (recur (rest c) d) (recur (rest c) (conj d (first c) ))))))", "user": "55f8b32ae4b03cbcff9738ba"}, {"problem": 56, "code": "(fn my-distinct\n  [s]\n  (reduce\n    (fn [v x]\n      (if (some #(= x %) v)\n        v\n        (into v [x])))\n    []\n    s))", "user": "56084e91e4b046a4fc0ac00f"}, {"problem": 56, "code": "(fn [c] \n(reduce \n  #(if(some #{%2} %1)\n     %1 \n     (conj %1 %2)) \n  [] \n  c))", "user": "561047eae4b05f002753df6d"}, {"problem": 56, "code": "(fn [coll]\n  (reduce\n   (fn [xs x]\n     (if (some #(= x %) xs)\n       xs\n       (conj xs x)))\n   []\n   coll))", "user": "4ff24a1ae4b0678c553fc337"}, {"problem": 56, "code": "(fn my-distinct [xs] \n  (reduce \n    #(if (some #{%2} %1)\n       %1\n       (conj %1 %2)) \n    [] \n    xs))", "user": "5606ea56e4b08b23635d317b"}, {"problem": 56, "code": "(fn [s]\n  (loop  [s s t #{} r []]\n     (if (empty? s) r\n       (recur (rest s)\n              (conj t (first s))\n              (if (contains? t (first s))\n                 r\n                (conj r (first s))\n              )\n       )       \n     )\n  )\n)", "user": "55eeb37ae4b0121d4835fdf3"}, {"problem": 56, "code": "(fn uniq\n [s]\n  (first\n    (reduce (fn [[xs seen] x] (if-not (get seen x)\n                                [(conj xs x) (conj seen x)]\n                                [xs seen]))\n            [[] #{}] s)))", "user": "52606318e4b03e8d9a4a7036"}, {"problem": 56, "code": "#(first (reduce (fn [[res,ft] , n]  (if (ft n) [res,ft] [(conj res n) (conj ft n)])) [[],#{}] %))", "user": "5603c31fe4b04bb52996e1c1"}, {"problem": 56, "code": "(fn [xs] (reduce #(if ((set %1) %2) %1 (conj %1 %2)) [] xs))", "user": "560e9a2de4b05f002753df52"}, {"problem": 56, "code": "(fn remdup [xs]\n  (reduce (fn [t v] \n            (if (some #(= v %) t) \n              t \n              (conj t v))) \n          [] xs))", "user": "54dce62be4b024c67c0cf78b"}, {"problem": 56, "code": "(fn [coll]\n    (reduce (fn [acc a]\n              (if (some (partial = a) acc)\n                acc\n                (concat acc [a])))\n            (empty coll)\n            coll))", "user": "532f8569e4b019098a6f8b4f"}, {"problem": 56, "code": "(fn[s](\n    filter (fn[x](not(nil? x))) (map-indexed\n                 (fn[idx itm](\n                               if(contains? (set(take idx s)) itm) nil itm\n                  \n                               ))\n                 s)\n          ))", "user": "56039843e4b04bb52996e1be"}, {"problem": 56, "code": "(fn uniques [xs]\n  (reduce (fn [out in] (if (.contains out in)\n                         out\n                         (conj out in))) [] xs))", "user": "4f6ba7bce4b07046d9f4efb0"}, {"problem": 56, "code": "(fn my-distinct\n  [coll]\n  (loop [coll (seq coll)\n         found #{}\n         distinct-coll []]\n    (if coll\n      (if (found (first coll))\n        (recur (next coll)\n               found\n               distinct-coll)\n        (recur (next coll)\n               (conj found (first coll))\n               (conj distinct-coll (first coll))))\n      distinct-coll)))", "user": "56180d83e4b06b1bb2182a18"}, {"problem": 56, "code": "(fn [xs]\n  (let [c (count xs)]\n    (loop [r [] s #{} n 0]\n      (if (= n c)\n        r\n        (let [x (nth xs n)]\n          (if (contains? s x)\n            (recur r s (inc n))\n            (recur (conj r x) (conj s x) (inc n))))))))", "user": "55fee5e4e4b00f4cabc5765a"}, {"problem": 56, "code": "#(loop [coll % answer []]\n (if (empty? coll)\n  answer\n  (recur \n   (rest coll)\n   (if\n    (some #{(first coll)} answer)\n    answer\n    (conj answer (first coll))\n   )\n  )\n )\n)", "user": "560fe558e4b05f002753df63"}, {"problem": 56, "code": "(fn [coll]\n  (loop [seen #{}, xs (seq coll), acc ()]\n    (if (empty? xs)\n      (reverse acc)\n      (let [x (first xs)]\n        (if (contains? seen x)\n          (recur seen          (rest xs) acc)\n          (recur (conj seen x) (rest xs) (cons x acc)))))))", "user": "552356fae4b0882d96d091af"}, {"problem": 56, "code": "(fn [coll]\n  (->> coll\n       (reductions conj #{})\n       (map #(vector (%2 %1) %1) coll)\n       (filter (complement first))\n       (map second)))", "user": "561ca2eae4b064ca9f4b169b"}, {"problem": 56, "code": "(fn [coll]\n   (let [step (fn step [xs seen]\n                (lazy-seq\n                  ((fn [[f :as xs] seen]\n                     (when-let [s (seq xs)]\n                       (if (contains? seen f)\n                         (recur (rest s) seen)\n                         (cons f (step (rest s) (conj seen f))))))\n                   xs seen)))]\n     (step coll #{})))", "user": "5614fa1de4b05f002753dfbe"}, {"problem": 56, "code": "(fn [xs]\n  (reduce (fn [acc x] (if (not-any? #(= x %) acc)\n                        (conj acc x)\n                        acc))\n          []\n          xs))", "user": "5573ffb5e4b0aa18f790f3fd"}, {"problem": 56, "code": "(fn [s] (reduce (fn [acc it] (if (nil? (some #{it} acc)) (conj acc it) acc)) [] s))", "user": "561ba3e5e4b073c65b0ce3eb"}, {"problem": 56, "code": "(fn [coll] (reduce #(if ((into #{} %1) %2) %1 (conj %1 %2)) [] coll))", "user": "55f2c898e4b06e875b46ce4b"}, {"problem": 56, "code": "(fn [coll] (reduce (fn [v x] (if (some #{x} v) v (conj v x))) [] coll))", "user": "5617db88e4b06b1bb2182a16"}, {"problem": 56, "code": "(fn [ls]\n  (loop [seen #{}\n         rv []\n         [head & tail] ls]\n    (if (nil? head)\n      rv\n      (if (seen head)\n        (recur seen rv tail)\n        (recur (conj seen head) (conj rv head) tail)))))", "user": "561f9110e4b064ca9f4b16ce"}, {"problem": 56, "code": "(fn [coll]\n  (reduce (fn [acc x]\n            (if (some #{x} acc)\n              acc\n              (conj acc x)))\n          []\n          coll))", "user": "53da059be4b0e771c302547e"}, {"problem": 56, "code": "reduce #(if (some #{%2} %1) %1 (conj %1 %2) ) []", "user": "561ca6ebe4b064ca9f4b169c"}, {"problem": 56, "code": "(fn md[s] \n  (loop [ret []\n         s s\n         r #{}]\n    (cond\n     (empty? s) ret\n     (contains? r (first s)) (recur ret (next s) r)\n     :else (recur (conj ret (first s)) (next s) (conj r (first s))))))", "user": "561c0278e4b064ca9f4b1691"}, {"problem": 56, "code": "(fn [coll]\n    (reduce  (fn [accum item]\n               (if  ((set accum) item) accum (conj accum item))\n               )\n             []  coll)\n    )", "user": "4f5e5975e4b0030a34fb2b4d"}, {"problem": 56, "code": "(fn [seq]\n  (reduce (fn [acc val]\n            (if (some #(= val %) acc)\n              acc\n              (conj acc val))) [] seq))", "user": "56018dd4e4b04bb52996e18f"}, {"problem": 56, "code": "(fn [coll]\n  (loop [xs coll\n         new-xs []]\n    (let [x (first xs)\n          others (rest xs)]\n     (if (seq xs)\n       (if (some #{x} new-xs)\n         (recur others new-xs)\n         (recur others (conj new-xs x)))\n       new-xs))))", "user": "55a5c3bee4b0acc240e3154e"}, {"problem": 56, "code": "reduce (fn [s e] (if (some #(= % e) s) s (conj s e))) []", "user": "56011393e4b04bb52996e178"}, {"problem": 56, "code": "(fn [c]\n  (into (empty c)\n    (reduce    \n      #(if (some #{%2} %)\n         %\n         (conj % %2))\n      (empty c)\n      c)))", "user": "52bacfa8e4b07a9af57922d6"}, {"problem": 56, "code": "(fn [v]\n  (reduce (fn [acc x]\n            (if (some #(= x %) acc)\n              acc\n              (conj acc x))) [] v))", "user": "5622af0fe4b03f08ee9a922b"}, {"problem": 56, "code": "(fn unique [[x & xs]]\n  (if (empty? xs)\n    (if (nil? x) [] [x])\n    (cons x (unique (remove (partial = x) xs)))))", "user": "56228d00e4b03f08ee9a9227"}, {"problem": 56, "code": "(fn [s]\n  (:r (reduce (fn [{:keys [f r] :as a} v]\n           (if (f v) a\n               {:f (conj f v) :r (conj r v)})) {:f #{} :r []} s)))", "user": "55b1e9e7e4b0da326a65cf74"}, {"problem": 56, "code": "(partial reduce \n         (fn [r c]\n           (if (some #(= c %) r)\n             r \n             (conj r c)))\n         [])", "user": "4f0f01c0535d0136e6c22329"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "4f40c46fe4b0e243712b1fbe"}, {"problem": 56, "code": "(fn [coll]\n  (loop [s #{} ret [] coll coll]\n    (if (empty? coll)\n      ret\n      (let [n (first coll)]\n        (if (s n)\n          (recur s ret (rest coll))\n          (recur (conj s n) (conj ret n) (rest coll)))))))", "user": "54d000c7e4b018d918be98d7"}, {"problem": 56, "code": "(fn disti[input]\n  (second (reduce\n    (fn [obj x]\n      (let [s (first obj) l (second obj)]\n        (if (contains? s x)\n          [s l]\n          [(conj s x) (conj l x)])))\n    [#{} []]\n    input)))", "user": "5626447fe4b00e49c7cb47bd"}, {"problem": 56, "code": "(fn [s]\n     ( reduce (fn [v n] (if (nil? (some #{n} v)) (conj v n) v )   ) [] s)\n     )", "user": "55ed71dae4b0121d4835fdd9"}, {"problem": 56, "code": "(fn my-distinct [xs]\n  (loop [s #{}, a-seq xs, result []]\n    (if (empty? a-seq)\n      result\n      (let [el (first a-seq)\n            ss (conj s (first a-seq))\n            rv (conj result el)]\n        (recur ss (filter (complement ss) (rest a-seq)) rv)))))", "user": "561d23e3e4b064ca9f4b16a5"}, {"problem": 56, "code": "(fn [l]\n  (reduce (fn [c n] (if (some #{n} c) c (conj c n)))\n          []\n          l))", "user": "5492164ee4b0b312c081ff3e"}, {"problem": 56, "code": "(fn [s] (reduce #(if (some (fn [x] (= x %2)) %1) %1 (conj %1 %2)) [] s))", "user": "4fb710f4e4b081705acca2cd"}, {"problem": 56, "code": "(fn [coll]\n  (reduce (fn [ret x]\n            (if-not (some #{x} ret)\n              (concat ret [x])\n              ret))\n          (empty coll)\n          coll))", "user": "5629dfaae4b00e49c7cb4813"}, {"problem": 56, "code": "(fn [x]\n  (loop [seen #{}\n         ret []\n         remain x]\n    (if (empty? remain)\n      ret\n      (if (contains? seen (first remain))\n        (recur seen ret (rest remain))\n        (recur (conj seen (first remain)) (conj ret (first remain)) (rest remain))))))", "user": "5566463ee4b0c656e3ff1831"}, {"problem": 56, "code": "(fn [xs]\n  (first \n    (reduce\n      (fn [[acc m] x]\n        (if (contains? m x) [acc m]\n          [(conj acc x) (conj m x)]))\n      [ [] #{} ]\n      xs)))", "user": "562cd94ee4b0a45d2ff83015"}, {"problem": 56, "code": "reduce (fn [R x] (if (some (partial = x) R) R (conj R x))) []", "user": "55f6fe09e4b06e875b46cea2"}, {"problem": 56, "code": "(fn [s]\n   (loop [s s\n          acc '()]\n     (cond\n       (empty? s) (reverse  acc)\n       :else (recur (rest s) (if (some (fn [x] (= (first s) x)) acc)\n                               acc\n                               (cons (first s) acc))))))", "user": "5600dccee4b04bb52996e175"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "562326cbe4b03f08ee9a9230"}, {"problem": 56, "code": "(fn [li] (reverse (reduce\n  (fn [acc el]\n    (if (some #(= el %) acc)\n      acc (cons el acc)))\n  nil li)))", "user": "5627444fe4b00e49c7cb47cd"}, {"problem": 56, "code": "(fn remo [x]\n  (let [has? (fn [a coll] (some #(= a %) coll))]\n    (loop [x x, c []]\n      (if (empty? x) c\n        (let [w (first x)]\n          (recur (rest x) (if (has? w c) c (conj c w))))))))", "user": "54b54d1be4b05787c3b1639c"}, {"problem": 56, "code": "(fn [ob]\n  (loop [ret ()\n         list ob\n         bf nil]\n    (if (nil? list)\n      (reverse ret)\n      (let [item (first list)]\n        (if (not= (.indexOf ret item) -1)\n          (recur ret (next list) bf)\n          (recur (conj ret item) (next list) item))))))", "user": "56305383e4b073c1cf7a9be6"}, {"problem": 56, "code": "(fn [s]\n    (loop [result [] s s]\n\t  (let [v (first s)]\n\t    (cond (= 0 (count s)) result\n\t\t  :else (recur (conj result v) (remove #(= v %) s)))))\n\n)", "user": "55f09e7be4b06e875b46ce28"}, {"problem": 56, "code": "(fn [coll]\n  (loop [new-coll [(first coll)], coll (rest coll) ]\n    (if (empty? coll)\n      new-coll\n      (if (contains? (set new-coll) (first coll))\n        (recur new-coll (rest coll) )\n        (recur (conj new-coll (first coll)) (rest coll))))))", "user": "562db4d1e4b0a45d2ff83021"}, {"problem": 56, "code": "(fn [coll]\n  (reduce (fn [res cur]\n            (if (some #{cur} res)\n              res\n              (conj res cur)))\n          [] coll))", "user": "562cb7cfe4b0a45d2ff83009"}, {"problem": 56, "code": "#(loop [coll % result []]\n    (println coll result)\n    (cond\n     (nil? coll) result\n     (not-any? #{(first coll)} result) (recur (next coll) (conj result (first coll)))\n     :else (recur (next coll) result)))", "user": "55ed9108e4b0121d4835fddc"}, {"problem": 56, "code": "#(->> (map-indexed vector %)\n     (group-by last)\n     vals\n     (map first)\n     (sort-by first)\n     (map last))", "user": "54db3d82e4b024c67c0cf75f"}, {"problem": 56, "code": "(fn custom-distinct\n  [coll]\n  (reduce\n   (fn [reduce-coll el]\n     (let [match (some #(= el %) reduce-coll)]\n       (if (nil? match)\n         (conj reduce-coll el)\n         reduce-coll)))\n   [] coll))", "user": "4fc524aae4b081705acca37e"}, {"problem": 56, "code": "(fn [c] (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] c))", "user": "562e8b2be4b0ab312c17ebbb"}, {"problem": 56, "code": "(fn [coll] (letfn [(step [coll, targetColl]\n                                 (if (empty? coll)\n                                   targetColl\n                                   (if\n                                     (nil? (some #{(first coll)} targetColl))\n                                     (step (next coll) (concat targetColl [(first coll)]))\n                                     (step (next coll) targetColl))))]\n                         (step coll [])))", "user": "5521248fe4b08d5046aa8a69"}, {"problem": 56, "code": "(fn [coll]\n (first\n  ;; Go through 'coll' keeping a running state of a vector with the result so far\n  ;; and a set with the found/not found information\n  ;; 'first' above is to just get the vector and discard the set\n  (reduce\n    (fn [[valVect valSet] x]\n     (if (valSet x)\n       [valVect valSet]\n       [(conj valVect x) (conj valSet x)]))\n    [[] #{}]  ; initial state \n    coll)))", "user": "563772a9e4b0bfe05bf117d7"}, {"problem": 56, "code": "(fn sabar [x]\n  (let [a (fn a [x y] (if (nil? (some (fn [z] (= y z)) x)) (conj x y)\n                        x))]\n    (reduce a [] x)))", "user": "55d9743ae4b0e31453f64aca"}, {"problem": 56, "code": "(fn dis [coll]\n  (loop [init coll mm #{} rr []]\n    (if (empty? init)\n      rr\n      (let [cc (first init)]\n        (recur (rest init) (conj mm cc) (if (mm cc) rr (conj rr cc)))))))", "user": "561a1af6e4b053970a773b02"}, {"problem": 56, "code": "(fn [c] (reduce (fn [a x] (if (some #{x} a) a (conj a x))) [] c))", "user": "53286f84e4b09d4e7a9b5505"}, {"problem": 56, "code": "(fn [c] \n  \n  (reduce\n   (fn [a e] (if (contains? (set a) e) a (conj a e)))\n   []\n   c\n  ))", "user": "53a5bc3ae4b0ef122a8689c3"}, {"problem": 56, "code": "(fn [coll]\n       (reduce (fn [c v]\n                 (if-not (some #(= v %) c)\n                   (conj c v)\n                   c)) [] coll))", "user": "551e6526e4b030e6a24d00e8"}, {"problem": 56, "code": "#(loop [con % \n        us [] ]\n     (cond\n       (empty? con) us \n       (some (fn [x] (= (first con) x)) us)  (recur (rest con) us)  \n       :else (recur (rest con) (conj us (first con)) )) )", "user": "561f27a1e4b064ca9f4b16ca"}, {"problem": 56, "code": "(fn [coll]\n   (reduce\n     (fn [acc x]\n       (if (seq (filter #(= % x) acc))\n         acc\n         (concat acc [x])))\n     []\n     coll))", "user": "554bd33ce4b0a04f7929959a"}, {"problem": 56, "code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "user": "53fcd574e4b0de5c418485d9"}, {"problem": 56, "code": "(fn [xs] (reduce #(if (some (partial = %2) %1) %1 (conj %1 %2)) [] xs))", "user": "5627d09ce4b00e49c7cb47db"}, {"problem": 56, "code": "#((reduce (fn [[a, b] x] (if (b x) [a, b] [(conj a x) (conj b x)])) [[], #{}] %) 0)", "user": "56399b7ee4b0bfe05bf117f5"}, {"problem": 56, "code": "reduce #(if (contains? (set %1) %2) %1 (conj %1 %2)) []", "user": "563a30d7e4b0bfe05bf117f9"}, {"problem": 56, "code": "(fn my-distinct [coll]\n  (reduce \n          (fn [current-list new-element]\n            (if (some #(= % new-element) current-list)\n              current-list\n              (concat current-list (list new-element))))\n            \n          (list)\n          coll\n        ))", "user": "56393681e4b0bfe05bf117f2"}, {"problem": 56, "code": "(fn [ls]\n  (reduce \n   #(if (some #{%2} %1) %1(conj %1 %2))\n   []\n   ls))\n\n;(fn [ls]\n;  (loop [acc [] ls ls]\n;    (if-let [elem (first ls)]\n;      (recur (conj acc elem) (filter #(not= elem %) ls))\n;      acc)))", "user": "52f3568fe4b05e3f0be25f0e"}, {"problem": 56, "code": "(fn [coll]\n  (loop [rem coll\n         was #{}\n         res []]\n    (if (seq rem)\n      (if (contains? was (first rem))\n        (recur (rest rem) was res)\n        (recur (rest rem) (conj was (first rem)) (conj res (first rem))))\n      res)))", "user": "563799f8e4b0bfe05bf117db"}, {"problem": 56, "code": "(fn d [l & [maybe-seen]]\n  (let [seen (or maybe-seen [])]\n    (if-not (first l)\n      seen\n      (if ((set seen) (first l))\n        (d (next l) seen)\n        (d (next l) (conj seen (first l)))))))", "user": "51e3a549e4b0c611d6113e47"}, {"problem": 56, "code": "(fn [coll]\n  (->> (reduce\n         (fn [[result uniques] element]\n           (if (not (contains? uniques element))\n             [(conj result element) (conj uniques element)]\n             [result uniques]))\n         [[] #{}]\n         coll)\n       (first)))", "user": "55d28b38e4b0e31453f64a58"}, {"problem": 56, "code": "(fn [ls]\n  (loop [found #{}\n         result []\n         remain ls]\n    (if-let [head (first remain)]\n      (if (found head)\n          (recur found result (rest remain))\n          (recur (conj found head) (conj result head) (rest remain))\n      )\n      result\n     )))", "user": "564127a9e4b08d4f616f5ef3"}, {"problem": 56, "code": "(fn my-distinct\n  [s]\n  (loop [result []\n         remaining s\n         seen? #{}]\n    (if (empty? remaining)\n      result\n      (let [v (first remaining)]\n        (recur (if (seen? v) result (conj result v))\n               (rest remaining)\n               (conj seen? v))))))", "user": "563f1493e4b08d4f616f5ecf"}, {"problem": 56, "code": "(fn fdi [xs]\n  ((fn rf [result input]\n     (if (empty? input) \n       result\n      \n       (if (some #(= % (first input)) result)\n         ;; skip\n         (rf result (rest input))\n         ;; else add us to the list\n         (rf \n          (conj result (first input))\n          (rest input))\n         )\n       )\n     ) [] xs)\n)", "user": "5641296de4b08d4f616f5ef4"}, {"problem": 56, "code": "(fn uniq [xs]\n  (lazy-seq\n   (if-let [[x & xs] (seq xs)]\n     (cons x (remove #{x} (uniq xs))))))", "user": "505fdf63e4b08f2a82ad10b9"}, {"problem": 56, "code": ";(fn [coll]\n;     (loop [out []\n;            c coll]\n;       (if (empty? c)\n;         out\n;         (recur (if (nil? (some #{(first c)} out))\n;                  (conj out (first c))\n;                        out)\n;                (drop 1 c)))))\n\n; Here is another way to do it:\nreduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5633bb9de4b0bfe05bf117b4"}, {"problem": 56, "code": "(fn dist [s] \n  (if (empty? s)\n    ()\n    (cons (first s) \n    \t  (dist (filter #(not (= (first s) %)) s)))))", "user": "5632b0a9e4b0bfe05bf117a8"}, {"problem": 56, "code": "(fn d [xs]\n  (let [seen (atom #{})\n        seen? (fn [n] (if (contains? @seen n) true (do (swap! seen conj n) false)))]\n    (filterv #(not (seen? %)) xs)))", "user": "563ed73ae4b08d4f616f5ecb"}, {"problem": 56, "code": "(fn [lst]\n  (loop [l lst s #{} r '()]\n    (cond \n     (empty? l) (reverse r)\n     (s (first l)) (recur (rest l) s r)\n     :else (recur (rest l) (conj s (first l)) (cons (first l) r)))))", "user": "545e7ab0e4b01be26fd7467c"}, {"problem": 56, "code": "#(reduce \n  (fn [acc i] \n    (if (some #{i} acc) acc (conj acc i))) [] %)", "user": "52f0ea04e4b05e3f0be25ee6"}, {"problem": 56, "code": "#(loop [result []  m {} coll %]\n   (if (nil? (first coll))\n     result\n     (if (nil? (m (first coll)))\n       (recur (conj result (first coll)) (assoc m (first coll) 1) (rest coll))\n       (recur result m (rest coll)))))", "user": "55eb026de4b0121d4835fdb7"}, {"problem": 56, "code": "(fn find-distinct-items [coll]\n  (reduce (fn [num n] (if (some #(= n %1) num) num (conj num n)))\n          [] coll))", "user": "5634995fe4b0bfe05bf117be"}, {"problem": 56, "code": "(fn [input]\n  (loop [result [] col input]\n    (if (empty? col)\n      result\n      (recur (if (= -1 (.indexOf result (first col)))\n               (conj result (first col))\n               result)\n             (rest col)))))", "user": "541ddadbe4b01498b1a71a84"}, {"problem": 56, "code": "(fn [xs] (reduce #(if (some (partial = %2) %1) %1 (conj %1 %2)) [] xs))", "user": "54ff074de4b07d26eda61d47"}, {"problem": 56, "code": "#(loop [seen #{} acc [] r %]\n   (if (empty? r)\n     acc         \n     (recur (conj seen (first r)) \n            (if (contains? seen (first r))\n              acc\n              (conj acc (first r)))\n            (rest r))))", "user": "5647dc44e4b0284900eef624"}, {"problem": 56, "code": "(fn f [s]\n  (loop [s s res '[]]\n    (if (empty? s)\n      res\n      (recur (rest s) (if ((fn has? [coll x]\n  (if (empty? coll)\n    false\n    (if (= (first coll) x)\n      true\n      (has? (rest coll) x)))) res (first s))\n                        res\n                        (conj res (first s)))))))", "user": "563d12f9e4b0bfe05bf11845"}, {"problem": 56, "code": "(fn [S]\n\t(reduce #(if (= -1 (.indexOf %1 %2)) (conj %1 %2) %1) [] S\n    )\n)", "user": "5649615be4b0284900eef641"}, {"problem": 56, "code": "(fn mydistinct\n  [s]\n  (loop [s s\n           d #{}\n           os []]\n    (if-let [f (first s)]\n      (if (some #{f} d)\n        (recur (rest s) d os)\n        (recur (rest s) (conj d f) (conj os f)))\n       os)))", "user": "5637557ce4b0bfe05bf117d4"}, {"problem": 56, "code": "(fn my-distinct [coll]\n  (loop [result []\n         l coll]\n   (if (empty? l)\n     result\n     (recur\n        (if ((set result) (first l)) result (conj result (first l)))\n        (rest l)))\n  ))", "user": "5630fd6fe4b0bfe05bf1178b"}, {"problem": 56, "code": "(fn [arg] (loop [cl arg res []]\n    (if (empty? cl)\n      res\n      (if (some #(= (first cl) %) res)\n        (recur (rest cl) res)\n        (recur (rest cl) (conj res (first cl)))))))", "user": "564b1ff8e4b0284900eef663"}, {"problem": 56, "code": "(fn dist [s]\n  (if (empty? s)\n    s\n    (cons (first s)\n          (dist (filter #(not= (first s) %)\n                        (rest s))))))", "user": "541ef7e2e4b01498b1a71a92"}, {"problem": 56, "code": "(fn distct [S]\n  (loop [[x1 & xrest :as X] S, out [], track {}]\n    (if (seq X)\n      (if (not (contains? track x1))\n        (recur xrest (conj out x1) (conj track [x1 0]))\n        (recur xrest out track))\n      out)))", "user": "564d02cde4b0284900eef679"}, {"problem": 56, "code": "(fn [l]\n  (loop [idx 0 result [] temp-set #{}]\n    (if (= idx (count l))\n      result\n      (if (contains? temp-set (nth l idx))\n        (recur (inc idx) result temp-set)\n        (recur (inc idx) (conj result (nth l idx)) (conj temp-set (nth l idx)))))))", "user": "56288ccae4b00e49c7cb47ea"}, {"problem": 56, "code": "(fn [coll]\n  (reduce #(if (some (partial = %2) %1)\n             %1\n             (concat %1 [%2]))\n          ()\n          coll))", "user": "5650b8a0e4b0284900eef6c3"}, {"problem": 56, "code": "(fn [xs]\n  (reduce (fn [m x] \n            (if (some #{x} m)\n              m\n             (conj m x))\n            ) [] xs)\n  )", "user": "52824143e4b0757a1b171453"}, {"problem": 56, "code": "(fn [init]\n  (loop [s init, v #{}, result []]\n    (if\n      (= (count s) 0)\n      result\n      (recur\n        (rest s)\n        (conj v (first s))\n        (if (get v (first s)) result (conj result (first s)))\n        )\n      )\n    )\n  )", "user": "564faadce4b0284900eef6b2"}, {"problem": 56, "code": "(fn [s] \n  (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] s))", "user": "5630471ce4b073c1cf7a9be4"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "52d68ed2e4b09f7907dd1362"}, {"problem": 56, "code": "#(keys (sort-by (comp second first second) (group-by first (map-indexed (fn [i x] [x i]) %))))", "user": "563b1553e4b0bfe05bf1180a"}, {"problem": 56, "code": "(fn [l] (reduce #(if(= (.contains %1 %2) false) (conj %1 %2) %1) [] l))", "user": "55c6fd60e4b0e31453f649c9"}, {"problem": 56, "code": "(fn [v] (let [s (zipmap (reverse v) (range (count v) 0 -1))] (into [] (apply sorted-set-by #(< (get s %) (get s %2)) v))))", "user": "544e6b7fe4b0e39780006986"}, {"problem": 56, "code": "#(sort-by (fn[element] (.indexOf % element)) (into '() (into #{} %)))", "user": "51671557e4b013fc800656c4"}, {"problem": 56, "code": "(fn [l]\n    (second (reduce\n              (fn [[st sq] x]\n                (if (st x)\n                    [st sq] \n                    [(conj st x) (conj sq x)]))\n              [#{} []]\n              l\n              )))", "user": "55c49394e4b0e31453f6499e"}, {"problem": 56, "code": "(fn [s] (loop [s s, elts #{}, ret []]\n          (if (seq s)\n            (if (contains? elts (first s))\n              (recur (rest s) elts ret)\n              (recur (rest s) (conj elts (first s)) (conj ret (first s))))\n            ret)))", "user": "54ca93abe4b057c6fda3a264"}, {"problem": 56, "code": "reduce #(if ((set %) %2) % (conj % %2)) []", "user": "54a677a9e4b09f271ff37c88"}, {"problem": 56, "code": "#(loop [result []\n          items %]\n    (if (empty? items)\n      result\n      (recur (if (empty? (filter (fn [item] (= item (first items))) result))\n               (conj result (first items))\n               result) \n             (rest items))))", "user": "5654cb2de4b0f9d632dd848b"}, {"problem": 56, "code": "#(reduce (fn [r x] (if ((set r) x) r (conj r x))) [] %)", "user": "54485749e4b032a45b8693c7"}, {"problem": 56, "code": "(fn [a]\n   (reduce (fn [r x]\n             (if (contains? (set r) x)\n               r\n               (conj r x))) []  a))", "user": "56171eade4b06b1bb2182a0c"}, {"problem": 56, "code": "(fn [l]\n  (loop [result nil\n         input l\n         ]\n    (cond\n     (empty? input) (reverse result)\n     (some #{(first input)} result) (recur result (rest input))\n     :else (recur (cons (first input) result) (rest input))\n     )\n    )\n  )", "user": "563b9acbe4b0bfe05bf11827"}, {"problem": 56, "code": "(fn [coll]\n  (loop [c coll\n         r []\n         s #{}]\n    (if (empty? c)\n      r\n      (if (contains? s (first c))\n        (recur (rest c) r s)\n        (recur (rest c) (conj r (first c)) (conj s (first c)))\n        ))))", "user": "563dfc02e4b0da801c4e4662"}, {"problem": 56, "code": "(fn disc [coll] (reduce (fn [r n] (if (some (fn [v] (= v n)) r) r (conj r n))) [] coll))", "user": "5646dff3e4b0284900eef615"}, {"problem": 56, "code": "reduce(\n       fn [s e]\n         (if (some #(= % e) s)\n           s\n           (conj s e)))\n[]", "user": "562ab73ce4b00e49c7cb482e"}, {"problem": 56, "code": "(fn [args] \n  (first (reduce (fn [[rv rs] x]\n             (if (contains? rs x)\n               [rv rs]\n               [(conj rv x) (conj rs x)]))\n           [[] #{}]\n    args)))", "user": "53a83c74e4b047364c044426"}, {"problem": 56, "code": "reduce #(if (some #{%2} %1) %1 (concat %1 [%2])) []", "user": "565a3e25e4b068f2fe63dbfb"}, {"problem": 56, "code": "(fn [l] (sort-by #(.indexOf l %) (keys (group-by identity l))))", "user": "5632e850e4b0bfe05bf117ac"}, {"problem": 56, "code": "(fn d [x] (sort-by #(.indexOf x %) (keys (group-by identity x))))", "user": "56304db8e4b073c1cf7a9be5"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "564045a8e4b08d4f616f5edd"}, {"problem": 56, "code": "(fn [coll] (seq (reduce #(if (not (contains? (set %1) %2)) (conj %1 %2) %1) [] coll)))", "user": "564a560ae4b0284900eef654"}, {"problem": 56, "code": "(fn [y] \n  (reduce \n   #(if (some \n         (fn [x] (= %2 x))\n         %1)      \n      %1 \n      (conj %1 %2)) [] y))", "user": "563c48e7e4b0bfe05bf11832"}, {"problem": 56, "code": "(fn my-distinct [s]\n  (reduce (fn [unique x]\n            (if ((set unique) x)\n              unique\n              (conj unique x)))\n          []\n          s))", "user": "56444fb1e4b0018b46ad8c0c"}, {"problem": 56, "code": "(fn my-distinct\n  ([x] (my-distinct x [] #{}))\n  ([x acc distinct-set] \n    (if (empty? x)\n      acc\n      (let [first-x (first x)]\n        (recur (next x) (if (contains? distinct-set first-x) acc (conj acc first-x)) (conj distinct-set first-x)) ))))", "user": "550e52dbe4b06e50f9beb165"}, {"problem": 56, "code": "#(if (first %)\n   (if (some #{(first %)} %&)\n     (recur (rest %) %&)\n     (recur (rest %) (conj %& (first %))))\n   (reverse %&))", "user": "56561119e4b0f9d632dd849d"}, {"problem": 56, "code": "(fn [s]\n  (reduce #(if (neg? (.indexOf % %2)) (conj % %2) %) \n          [] s))", "user": "5654d0e1e4b0f9d632dd848c"}, {"problem": 56, "code": "(fn [arg1]\n(cond\n(and (= arg1 [1 2 1 3 1 2 4])) [1 2 3 4]\n(and (= arg1 [:a :a :b :b :c :c])) [:a :b :c]\n(and (= arg1 (quote ([2 4] [1 2] [1 3] [1 3])))) (quote ([2 4] [1 2] [1 3]))\n(and (= arg1 (range 50))) (range 50)\n))", "user": "565f2461e4b068f2fe63dc3b"}, {"problem": 56, "code": "(fn [xs]\n  (reduce \n   (fn [s e]\n     (if (some #(= % e) s)\n       s\n       (conj s e)))\n    [] xs))", "user": "5632d1b3e4b0bfe05bf117a9"}, {"problem": 56, "code": "#(second (reduce (fn [[vu s] e] (if (contains? vu e) [vu s] [(conj vu e) (conj s e)])) [#{} []] %))", "user": "56588f4ee4b0f9d632dd84b6"}, {"problem": 56, "code": "(fn [coll]\n  (reduce (fn [acc num] (if (some true? (map #(= % num) acc)) acc\n                          (conj acc num))) [] coll))", "user": "562d869be4b0a45d2ff8301f"}, {"problem": 56, "code": "(fn only-distinct [col]\n  (reduce (fn [xs item] \n            (if (some #(= item %1) xs) xs (conj xs item)))\n          [] col))", "user": "56038f34e4b04bb52996e1bc"}, {"problem": 56, "code": "(fn cd [coll]\n  (sort #(compare\n          (.indexOf coll %1)\n          (.indexOf coll %2))\n        (apply list (set coll))))", "user": "56504dc2e4b0284900eef6bc"}, {"problem": 56, "code": "(fn [coll]\n  (reduce\n    (fn [acc x] \n      (if (some #(= x %) acc) acc (conj acc x)))\n    []\n    coll))", "user": "564c8e99e4b0284900eef674"}, {"problem": 56, "code": "(fn dst\n  ([l] (dst l []))\n  ([l acc]\n   (if (empty? l)\n     acc\n     (let [[x & xs] l]\n       (recur xs (if (some #{x} acc) acc (conj acc x)))))))", "user": "565e0934e4b068f2fe63dc30"}, {"problem": 56, "code": "(fn [arg1]\n(cond\n(and (= arg1 [1 2 1 3 1 2 4])) [1 2 3 4]\n(and (= arg1 [:a :a :b :b :c :c])) [:a :b :c]\n(and (= arg1 (quote ([2 4] [1 2] [1 3] [1 3])))) (quote ([2 4] [1 2] [1 3]))\n(and (= arg1 (range 50))) (range 50)\n))", "user": "5666bf34e4b04acd4f672dc2"}, {"problem": 56, "code": "(fn [coll]\n\t(reduce \n     #(if (= ((frequencies %1) %2) 1) \n        %1 \n        (conj %1 %2)) [] coll))", "user": "5666500ee4b0e91d5f5c566d"}, {"problem": 56, "code": "(fn [coll]\n  (loop [tail coll\n         seen #{}\n         res []]\n    (if-let [v (first tail)]\n      (if (seen v)\n        (recur (next tail) seen res)\n        (recur (next tail) (conj seen v) (conj res v)))\n      res)))", "user": "5169d422e4b051e2a73aba53"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "566888e4e4b04acd4f672ded"}, {"problem": 56, "code": "(fn foo [coll]\n  (reduce (fn [m e] (if (= -1 (.indexOf m e)) (conj m e) m)) [] coll))", "user": "5537b2c7e4b09218d5f44fce"}, {"problem": 56, "code": "(fn [xs] (reduce (fn [acc v] (if (some #(= v %) acc) acc (conj acc v))) [] xs))", "user": "5668dcc6e4b04acd4f672df8"}, {"problem": 56, "code": "#(sort-by (fn [x] (.indexOf % x)) (set %))", "user": "5393185ae4b0b51d73faaeb7"}, {"problem": 56, "code": "#(reduce (fn [a b] (if (some #{b} a)\n                     a\n                     (conj a b))) [] %)", "user": "56677192e4b04acd4f672dd5"}, {"problem": 56, "code": "#(sort-by (fn [i] (.indexOf % i)) (map first (group-by identity %)))", "user": "52a3c66ce4b04e0c58e87c04"}, {"problem": 56, "code": "reduce (fn [r x] (if ((set r) x) r (conj r x))) []", "user": "56706f01e4b0a866af6896f2"}, {"problem": 56, "code": "(fn [x] (reduce (fn [a b](if(some #(= b % ) a) a (conj a b))) [] x))", "user": "566a3a26e4b0a866af689699"}, {"problem": 56, "code": "(fn new-distinct\n  [the-seq]\n  (loop [els the-seq\n         new-seq #{}]\n    (if (empty? els)\n      (reverse new-seq)\n      (let [el (first els)]\n        (recur (rest els) (if (some #{el} new-seq) new-seq (cons  el new-seq) ))))))", "user": "5564709ee4b0c656e3ff1807"}, {"problem": 56, "code": "#(first (reduce (fn [[acc s] x] (if (s x) [acc s] [(conj acc x) (conj s x)])) [[] #{}] %))", "user": "5659679ae4b068f2fe63dbeb"}, {"problem": 56, "code": "#(first (reduce (fn [[r s :as res] e] (if (s e) res [(conj r e) (conj s e)])) [[] #{}] %))", "user": "56372798e4b0bfe05bf117d0"}, {"problem": 56, "code": "reduce (fn [s e]\n  (if (some #(= % e) s)\n    s\n    (conj s e)))\n[]", "user": "56669819e4b0e91d5f5c5674"}, {"problem": 56, "code": "(fn [coll] (if (coll? (first coll)) (keys (frequencies coll)) ((comp sort set) coll)))", "user": "55efb51ee4b066087aa9453b"}, {"problem": 56, "code": "(fn [xs]\n              (loop [xs xs used #{} result []]\n                (if (empty? xs)\n                  result\n                  (let [[a & b] xs\n                        result (if (contains? used a)\n                                 result\n                                 (conj result a))]\n                    (recur b (conj used a) result)))))", "user": "4f9aa2a6e4b0dcca54ed6d0c"}, {"problem": 56, "code": "(fn individuals [coll] (reverse \n                          (second \n                           (reduce \n                            (fn [[my-set my-list] candidate]\n                              (if (not (contains? my-set candidate))\n                                [(conj my-set candidate)           \n                                 (cons candidate my-list)]\n                                [my-set my-list]))\n                            [#{} ()]\n                            coll))))", "user": "567476bde4b05957ce8c6139"}, {"problem": 56, "code": "(fn [s]\n  (reduce\n    (fn [d i]\n      (loop [in d]\n        (cond\n          (empty? in) (conj d i)\n          (= (first in) i) d\n          :else (recur (rest in)))))\n    []\n    s))", "user": "564a5a09e4b0284900eef656"}, {"problem": 56, "code": "(fn find-distinct [s]\n  ((fn helper [e [f & r :as s1] ]\n     (if (empty? s1) '()\n     (if (contains? e f)\n       (recur e r)\n       (cons f (lazy-seq (helper (conj e f) r)))\n       ))) #{} s))", "user": "5654e024e4b0f9d632dd848d"}, {"problem": 56, "code": "(fn [coll]\n  (loop [res [] coll coll store #{}]\n    (let [head  (first coll)\n          _next (if (store head) res (conj res head))]\n      (if (empty? coll)\n        res\n        (recur _next\n               (rest coll) \n               (conj store head))))))", "user": "5591cc56e4b0604b3f94d582"}, {"problem": 56, "code": "(fn [xs]\n\t(->> (group-by identity xs) (map first) (sort-by #(.indexOf xs %))))", "user": "56540485e4b0f9d632dd847a"}, {"problem": 56, "code": "(fn [coll]\n    (let [step (fn step [xs seen]\n                 (lazy-seq\n                   ((fn [[f :as xs] seen]\n                      (when-let [s (seq xs)]\n                        (if (contains? seen f)\n                          (recur (rest s) seen)\n                          (cons f (step (rest s) (conj seen f))))))\n                     xs seen)))]\n      (step coll #{}))\n  )", "user": "536ecd9fe4b0fc7073fd6e76"}, {"problem": 56, "code": "(fn [s] \n  (let [uniq (keys (group-by identity s))]\n  (if (and (sequential? s) (every? integer? s))\n      (sort uniq)\n      uniq)))", "user": "5578f292e4b05c286339e08f"}, {"problem": 56, "code": "(fn __ [coll]\n  (reduce\n   (fn [seen elem]\n     (if (some #(= % elem) seen)\n       seen\n       (conj seen elem)))\n   []\n   coll))", "user": "4f856adfe4b033992c121c44"}, {"problem": 56, "code": "(fn dist [x] (if (empty? x) [] (cons (first x) (dist (filter #(not= (first x) %) (rest x))))))", "user": "56427910e4b08d4f616f5f19"}, {"problem": 56, "code": "reduce #(if (some #{%2} %1) %1 (conj %1 %2)) []", "user": "554680cbe4b0a04f7929953e"}, {"problem": 56, "code": "(fn [coll]\n  (first (reduce (fn [[acc s] x]\n            (if (contains? s x)\n              [acc s]\n              [(conj acc x) (conj s x)])) [[] #{}] coll)))", "user": "567c2322e4b05957ce8c61af"}, {"problem": 56, "code": "#(loop [r [], c %] \n   (cond\n    (empty? c) r\n    (some (fn [x] (= (first c) x)) r) (recur r (rest c))\n    :else (recur (conj r (first c)) (rest c))))", "user": "555883c5e4b0deb715856e2d"}, {"problem": 56, "code": "(fn [xs]\n  (first (reduce\n   (fn [[l s] x] (if (contains? s x) [l s] [(conj l x) (conj s x)]))\n   [[] #{}]\n   xs)))", "user": "56483562e4b0284900eef629"}, {"problem": 56, "code": "(fn f [col]\n  (into [] (java.util.LinkedHashSet. col)))", "user": "567ea95de4b0feffd0d18eb6"}, {"problem": 56, "code": "reduce (fn [s e]\n  (if (some #(= % e) s)\n    s\n    (conj s e)))\n[]", "user": "567cef8ce4b05957ce8c61c1"}, {"problem": 56, "code": "(fn mydistinct [coll]\n  (loop [coll-left coll\n         res []]\n    (if (empty? coll-left) res\n    (let   \n       [elem (first coll-left)]\n      (println elem)\n      (println coll-left)\n      (println res)\n      (if (some #(= elem %) res)\n        (recur (rest coll-left) res)\n        (recur (rest coll-left) (conj res elem)))))))", "user": "5658d775e4b00d3155796114"}, {"problem": 56, "code": "(fn [coll]\n  (reduce (fn [p x]\n            (if (contains? (set p) x) p (conj p x))) [] coll))", "user": "52cf1e25e4b07d0d72b2739c"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "567931e9e4b05957ce8c6184"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "56810479e4b0966858e4d8f8"}, {"problem": 56, "code": "(fn [coll]\n   (reduce\n     (fn [res x]\n       (if (some #(= x %) res)\n         res\n         (conj res x)))\n     []\n     coll))", "user": "5675cdf1e4b05957ce8c614d"}, {"problem": 56, "code": "(fn [coll]\n  (reduce #(if (contains? (set %1) %2) %1 (conj %1 %2)) [] coll))", "user": "567695c2e4b05957ce8c6157"}, {"problem": 56, "code": "(fn getDistinct\n  ([c] (getDistinct c []))\n  ([c x]\n  \t(if\n    \t(empty? c)\n    \tx\n    \t(getDistinct (rest c) (if (= (set x) (set (conj x (first c))))\n                            \tx\n                            \t(conj x (first c))\n                              )\n    \t)\n    )\n   )\n  )", "user": "5676af21e4b05957ce8c6158"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) \n             %1 \n             (conj %1 %2)) []", "user": "566f7749e4b0a866af6896e9"}, {"problem": 56, "code": "(fn my-distinct [coll]\n  (reduce (fn [rsf h] (if (nil? (some #{h} rsf))\n               (conj rsf h)\n               rsf)) [] coll))", "user": "567c7fefe4b05957ce8c61bc"}, {"problem": 56, "code": "#(last \n    (reduce \n      (fn [[dic result] x] \n          (if (dic x) \n            [dic result] \n            [(conj dic x) (conj result x)] ) )  \n      [#{} []] % ))", "user": "567798afe4b05957ce8c6169"}, {"problem": 56, "code": "(fn [coll]\n(if (coll? (first coll)) \n(map (fn [[x y]] (first y)) (group-by identity coll))\n(lazy-seq (apply sorted-set coll))))", "user": "565b941ce4b068f2fe63dc07"}, {"problem": 56, "code": "(fn [coll] \n  (loop [s coll\n         result []]\n    (if (empty? s)\n      (if (list? result) (reverse result) result)\n      (let [f (first s) \n            is-in-coll? (if (some #{f} result) true false)]\n      (recur (rest s) (if is-in-coll? result (conj result f)))))))", "user": "567d18c9e4b05957ce8c61c4"}, {"problem": 56, "code": "reduce (fn [s e]\n  (if (some #(= % e) s)\n    s\n    (conj s e)))\n[]", "user": "566efb2be4b0a866af6896e2"}, {"problem": 56, "code": "(fn uniq2 [liste]\n  (loop [input liste, found #{}, output [] ]\n    (cond\n      (= (set liste) found) output\n      (contains? found (first input)) (recur (next input) found  output)\n      :else (recur (next input) (conj found (first input)) (conj output (first input)))\n    )\n  )\n)", "user": "568513c4e4b04eec3ec5cfc5"}, {"problem": 56, "code": "(fn [s] (map first \n             (sort-by second \n                      (for [[v ps] (group-by second (map-indexed vector s))] \n                        [v (apply min (map first ps))]))))", "user": "5275f7a2e4b03e8d9a4a74d0"}, {"problem": 56, "code": "(fn [seq]\n    ((fn [s acc]\n      (if (empty? s)\n      acc\n      (if (.contains acc (first s))\n      (recur (rest s) acc)\n      (recur (rest s) (conj acc (first s)))\n      )\n      )\n      ) seq []))", "user": "5681afaae4b0945ebc182a87"}, {"problem": 56, "code": "#(loop [v % s #{} o []]\n   (if (not (seq v)) o\n     (let \n      [f (first v) r (rest v)]\n      (if (contains? s f)\n        (recur r s o)\n        (recur r (conj s f) (conj o f))\n        )\n      \n        )\n      \n     \n   )\n   )", "user": "52503747e4b0541d1855b828"}, {"problem": 56, "code": "(fn [s]\n     (reduce #(if (.contains %1 %2)\n                  %1\n                  (concat %1 [%2])) [] s))", "user": "568a743ee4b0dcc4269f408e"}, {"problem": 56, "code": "#(first (reduce (fn [[l f] e] (let [r (if (f e) l (concat l (list e)))] [r (conj f e)])) [[] #{}] %))", "user": "50784ae5e4b0fc74642bff68"}, {"problem": 56, "code": "(fn [xs] (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] xs))", "user": "56795deae4b05957ce8c6187"}, {"problem": 56, "code": "(fn distinc\n  [ar]\n  (second (reduce (fn [[flag acc] x]\n            [(conj flag x) (if (flag x) acc (conj acc x))])\n          [#{} []]\n          ar)))", "user": "56897739e4b0dcc4269f407d"}, {"problem": 56, "code": "(fn [coll]\n  (let [f (fn [[out seen :as acc] x]\n              (if (seen x)\n                acc\n                [(conj out x) (conj seen x)]))\n        result (reduce f [[] #{}] coll)\n        ]\n    (first result)))", "user": "56488119e4b0284900eef632"}, {"problem": 56, "code": "(fn dist [xs]\n  (if (empty? xs)\n    '()\n    (cons (first xs) (dist (filter #(not= (first xs) %) xs)))))", "user": "56761ab1e4b05957ce8c6154"}, {"problem": 56, "code": "#(reduce (fn [x y] (if (nil? (some (set [y]) x))\n                       (conj x y)\n                       x))\n         []\n         %)", "user": "568e1871e4b0dcc4269f40cc"}, {"problem": 56, "code": "(fn my-distinct [xs]\n  (loop [result '(), cur-set #{}, ys xs]\n    (if (nil? ys) \n      (reverse result)\n      (let [y (first ys)\n            rest (next ys)]\n        (if (nil? (get cur-set y))\n          (recur (cons y result)\n                 (conj cur-set y)\n                 rest)\n          (recur result cur-set rest))))))", "user": "5688a01be4b0dcc4269f406d"}, {"problem": 56, "code": "#(reduce (fn [acc i]\n            (if ((apply sorted-set acc) i)\n              acc\n              (conj acc i)))\n          []\n          %)", "user": "5657fed1e4b0f9d632dd84ae"}, {"problem": 56, "code": "reduce #(if (some #{%2} %1) %1 (conj %1 %2)) []", "user": "567b39b6e4b05957ce8c61a3"}, {"problem": 56, "code": "(fn [c]\n  (loop\n  \t[c c,\n  \t acc [],\n  \t s #{}]\n  \t ;(print (str c \"  \" acc \"\\n\"))\n  \t  (cond\n\t(empty? c) acc,\n\t(contains? s (first c)) (recur (rest c) acc s),\n\t:else (recur (rest c) (conj acc (first c))(conj s (first c)))\n\t)))", "user": "4e268c6e535deb9a81d77ef4"}, {"problem": 56, "code": "(fn my-distinct [coll]\n  (loop [items coll\n         accum []]\n    (if (empty? items)\n      accum\n      (recur (rest items)\n             (if (= -1 (.indexOf accum (first items)))\n               (conj accum (first items))\n               accum)))))", "user": "563fc1f2e4b08d4f616f5ed7"}, {"problem": 56, "code": "(fn find-distinct-items [coll]\n  (reduce (fn [xs x]\n            (if ((set xs) x) xs\n                (conj xs x))) [] coll))", "user": "5693a53ee4b0dcc4269f4106"}, {"problem": 56, "code": "(fn [s]\n  (reduce (fn [vec x]\n            (if (not (some #{x} vec))\n              (conj vec x)\n              vec))\n          []\n          s))", "user": "55f85b93e4b03cbcff9738ae"}, {"problem": 56, "code": "#(reduce (fn [res c]\n            (if (some #{c} res)\n              res\n              (conj res c))) [] %)", "user": "56372c3ce4b0bfe05bf117d1"}, {"problem": 56, "code": "(fn [v]\n  (loop [[x & more] v used #{} acc '[]]\n    (if x\n      (recur more (conj used x) (if (contains? used x) acc (conj acc x) ) )\n      acc\n    )\n  )\n)", "user": "56979bb7e4b0e0b3d3318cac"}, {"problem": 56, "code": "(fn [coll] (reduce (fn [coll, target] (if (some #(= target %) coll) coll (conj coll target))) [] coll))", "user": "56815e2fe4b0945ebc182a84"}, {"problem": 56, "code": "(fn ([coll] (let [step (fn step [xs seen] (lazy-seq ((fn [[f :as xs] seen] (when-let [s (seq xs)] (if (contains? seen f) (recur (rest s) seen) (cons f (step (rest s) (conj seen f)))))) xs seen)))] (step coll #{}))))", "user": "569c40cee4b0542e1f8d1462"}, {"problem": 56, "code": "(fn[c] (reduce #(if (contains? (set %) %2) % (conj % %2)) [] c))", "user": "5339cb07e4b0e30313ee6caf"}, {"problem": 56, "code": "(fn distinctX[x] ((fn distinctRec [x y] (if (empty? x) y (if (some #(= % (first x)) y) (distinctRec (rest x) y) (distinctRec (rest x) (conj y (first x)))))) x []))", "user": "568820e8e4b0dcc4269f4067"}, {"problem": 56, "code": "(fn [x] (let [s (set x) ps (map list x (range)) qs (map (fn [y] (first (filter #(= y (first %)) ps))) s)] (map first (sort-by second qs))))", "user": "569c1038e4b0542e1f8d145f"}, {"problem": 56, "code": "(fn [coll]\n  (loop [x (first coll)\n        xs (filter #(not= % x) coll)\n        xss []]\n    (if \n      (empty? xs)\n      (conj xss x)\n      (recur (first xs) (filter #(not= % (first xs)) xs) (conj xss x)))))", "user": "56278266e4b00e49c7cb47d3"}, {"problem": 56, "code": "(fn [l]\n  (reduce (fn [s e]\n            (if (some #(= % e) s)\n              s\n              (conj s e)))\n          []\n          l\n          )\n  )", "user": "51e6a2bce4b0ab43cc26c21d"}, {"problem": 56, "code": "(fn [lst] (first (reduce \n           (fn helper [[l s] x] (if (s x) [l s] [(conj l x) (conj s x)] ))\n           [[] #{}] \n           lst)))", "user": "56912f93e4b0dcc4269f40ef"}, {"problem": 56, "code": "#(first (reduce (fn[[acc s] i] (if (contains? s i) [acc s] [(conj acc i) (conj s i)])) [[] #{}] %))", "user": "56824e1be4b0945ebc182a91"}, {"problem": 56, "code": "(fn [i]\n (reduce (fn [s v] (if (some #(= v %) s )\n                    s\n                    (conj s v))) [] i))", "user": "54ef4a1ee4b024c67c0cf883"}, {"problem": 56, "code": "(fn make-unique [s]\n  (when (seq s)\n    (cons (first s) (make-unique (remove #{(first s)} (rest s))))))", "user": "553b0d95e4b09218d5f44fff"}, {"problem": 56, "code": "(fn [coll]\n  (reduce (fn [acc n] (if (some #{n} acc) acc (conj acc n))) [] coll))", "user": "56a51f26e4b0542e1f8d14e0"}, {"problem": 56, "code": "#(reduce \n   (fn [acc i]\n     (if (< -1 (.indexOf acc i))\n       acc\n       (conj acc i)))\n   []\n   %)", "user": "5630ce72e4b0bfe05bf11786"}, {"problem": 56, "code": "(fn [arr]\n  (loop [leftover arr\n         solset #{}\n         solarr []]\n    (if (empty? leftover)\n      solarr\n      (recur (rest leftover)\n             (conj solset (first leftover))\n             (if (contains? solset (first leftover))\n               solarr\n               (conj solarr (first leftover)))))))", "user": "56a38a4ce4b0542e1f8d14cc"}, {"problem": 56, "code": "(fn [coll] (if (> (count coll) 30) coll (map #(key %) (group-by identity coll))))", "user": "51a7bf26e4b0da5f497bde8c"}, {"problem": 56, "code": "reduce #(if ((set %) %2) % (conj % %2)) []", "user": "5686b7c7e4b0dcc4269f4057"}, {"problem": 56, "code": "#(let [in (fn [coll item]\n           (some #{item} coll))\n      filter-nil (fn [coll]\n                   (filter (complement nil?) coll))]\n  (filter-nil\n    (map (fn [[k v]]\n           (when-not (in (take k %) v) v))\n         (map list (range (count %)) %))))", "user": "56ac81ace4b03c432f187347"}, {"problem": 56, "code": "(fn f [s] (loop [input s content #{} result []] (if (empty? input) result (if (content (first input)) (recur (rest input) content result) (recur (rest input) (conj content (first input)) (conj result (first input)))))))", "user": "56a75810e4b0542e1f8d14fc"}, {"problem": 56, "code": "(fn [coll]\n (letfn [(helper [coll seen result]\n          (if (empty? coll)\n           result\n           (recur (rest coll)\n                  (conj seen (first coll))\n                  (if (contains? seen (first coll))\n                      result\n                      (conj result (first coll))))))]\n   (helper coll #{} [])))", "user": "50b42cbbe4b001349b2f4abe"}, {"problem": 56, "code": "#(reduce (fn [x y] (if (some (fn [z] (= z y)) x) x (conj x y))) [] %)", "user": "56992162e4b0542e1f8d143c"}, {"problem": 56, "code": "(fn [coll]\n  (reduce (fn [v x] \n            (if (or (empty? v) (= (.indexOf v x) -1))\n              (conj v x)\n              v)) \n          [] \n          coll))", "user": "56a79eb0e4b07966d5a8a05d"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "56874171e4b0dcc4269f405c"}, {"problem": 56, "code": "(fn [xs] \n  (let [cont \n        (reduce #(if (contains? (%1 :s) %2) \n                   %1 \n                   (assoc %1 :dist (conj (%1 :dist) %2) :s (conj (%1 :s) %2))) \n                {:s #{}, :dist []} xs)] (cont :dist)))", "user": "56b35565e4b0982f16b37e16"}, {"problem": 56, "code": "reduce\n(fn [acc v]\n  (if (some #(= v %) acc)\n    acc\n    (conj acc v)))\n[]", "user": "5617a540e4b06b1bb2182a12"}, {"problem": 56, "code": "(fn [l] \n((fn [l res]\n (if (empty? l)\n     res\n     (if \n      (some\n        #(= (first l) %) res\n      )\n        (recur \n         (rest l) res)\n        (recur \n          (rest l) \n          (conj res \n           (first  l)\n          )\n        )\n      )\n )\n) l [])\n)", "user": "556f2009e4b09a3098a52519"}, {"problem": 56, "code": "#(reduce \n  (fn [a i] \n    (if-not ((set a) i) \n      (concat a [i]) \n      a)) [] %)", "user": "56a76f36e4b07966d5a8a05b"}, {"problem": 56, "code": "#(reduce\n   (fn [a x]\n     (if (contains? (set a) x)\n       a\n       (conj a x)))\n   []\n   %1)", "user": "56b280e3e4b0982f16b37e06"}, {"problem": 56, "code": "(fn work-me \n  ([vect] (work-me vect [] {}))\n  ([[x & xs :as vect] acc mark]\n   (if (empty? vect)\n     acc\n     (if (mark x)\n       (recur xs acc mark)\n       (recur xs (conj acc x) (assoc mark x 1))))))", "user": "5655e056e4b0f9d632dd849b"}, {"problem": 56, "code": "#(first \n  (reduce \n   (fn [built x] \n     (if-not (contains? (second built) x) \n       (map (fn [y] (conj y x)) built) \n       built)) \n   [[] #{}] \n   %))", "user": "56bb9ccce4b0f26550335959"}, {"problem": 56, "code": "(fn [coll]\n  (reduce (fn [acc x]\n            (if (contains? (set acc) x)\n              acc\n              (conj acc x)))\n          []\n          coll))", "user": "534da51fe4b084c2834f4aa4"}, {"problem": 56, "code": "(fn foo \n\t([coll] (foo coll #{}))\n\t([coll seen]\n\t(let [r (drop-while seen coll) f (first r)]\n\t\t\t(if (nil? f) ()\n\t\t\t\t(cons f (lazy-seq \n\t\t\t\t\t(foo (rest r) (conj seen f))))))))", "user": "56a01895e4b0542e1f8d149f"}, {"problem": 56, "code": "(fn [s]\n  (loop [seen #{}\n         ordered []\n         left s]\n    (if (empty? left)\n      ordered\n      (if (get seen (first left))\n        (recur seen ordered (rest left))\n        (recur (conj seen (first left)) (conj ordered (first left)) (rest left))))))", "user": "5638b88de4b0bfe05bf117e9"}, {"problem": 56, "code": "(fn [d]\n  (let [f1 (fn [x y]\n              (if (nil? (x y nil)) \n                (assoc x :data (conj (x :data) y) y y)\n                x))]\n    (:data (reduce #(f1 %1 %2) {:data []} d))))", "user": "55f9b2b6e4b03cbcff9738c8"}, {"problem": 56, "code": "(fn [s] (reduce #(if ((set %1) %2) %1 (conj %1 %2)) [] s))", "user": "56b86e64e4b0f26550335924"}, {"problem": 56, "code": "(fn [s] (reverse (loop [rem s out '()]\n                     (if (empty? rem) out\n                       (if (some #(= % (first rem)) out)\n                         (recur (rest rem) out)\n                         (recur (rest rem) (conj out (first rem))))))))", "user": "56baab13e4b0f26550335948"}, {"problem": 56, "code": "reduce (fn [x y] \n         (if (some #(= y %) x)\n           x\n           (conj x y))) []", "user": "56bca51ae4b0f26550335963"}, {"problem": 56, "code": "(fn [col ]\n\n\n(loop \n[s col\nresult []\nfound {}\n]\n\n(if (empty? s)\n\nresult\n\n(recur (rest s) ;; new s\n\t(if (contains? found (first s)) ;; new result\n\t\t(do (println :working result) result)\n\t\t(conj result (first s))\n\t)\t\n\t(assoc found (first s) 1) ;; new found map\n)\n)\n)\n)", "user": "533a2f7be4b0e30313ee6cb8"}, {"problem": 56, "code": "reduce #(if (get (set %) %2) % (conj % %2)) []", "user": "555c38d9e4b0b056612e2249"}, {"problem": 56, "code": "(fn remove-duplicates [coll]\n  (first \n    (reduce (fn [[result already-seen] x]\n              (if (contains? already-seen x)\n                [result already-seen]\n                [(conj result x) (conj already-seen x)]))\n            [[] #{}]\n            coll)))", "user": "56c33ceae4b05cc29241ee89"}, {"problem": 56, "code": "reduce (fn [coll x] (if (some #(= % x) coll) coll (conj coll x))) []", "user": "56ae214ce4b03c432f18735a"}, {"problem": 56, "code": "(fn\n  [coll]\n  (reduce #(if ((set %1) %2) %1 (conj %1 %2)) [] coll))", "user": "56a36f76e4b0542e1f8d14ca"}, {"problem": 56, "code": "(fn [s] (reduce #(if (some #{%2} %) % (conj % %2)) [] s))", "user": "56066e82e4b08b23635d3173"}, {"problem": 56, "code": "(fn pia [s]\n  (reduce \n    (fn [v m]\n      (if (nil? (some #{m} v))\n        (conj v m)\n        v))\n    []\n    s))", "user": "569ce6fee4b0542e1f8d146c"}, {"problem": 56, "code": "(fn [l] (keys (sort-by val < (apply merge-with (fn [a b] a) (map-indexed #(hash-map (first %2) %1) (partition-by identity l))))))", "user": "536673a8e4b0243289761e76"}, {"problem": 56, "code": "(fn [xs] (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] xs))", "user": "4f259f95e4b0d66497709ffa"}, {"problem": 56, "code": "#(reduce (fn [m v] (if-not (some #{v} m) (conj m v) m)) [] %)", "user": "56baa68ce4b0f26550335947"}, {"problem": 56, "code": "(fn [s]\n  (loop [s s\n         res []\n         used #{}]\n    (if (seq s)\n      (let [x (first s)]\n        (recur (rest s) (if (used x) res (conj res x)) (conj used x)))\n      res)))", "user": "5549ff9ae4b0a04f7929956e"}, {"problem": 56, "code": "(fn [s]\n  (letfn [(distinctify [found\n                        [h & t]]\n            (cond\n              (nil? h) nil\n              (found h) (distinctify found t)\n              :else (lazy-seq (cons h (distinctify (conj found h) t)))))]\n    (distinctify #{} s)))", "user": "565f8fd2e4b068f2fe63dc41"}, {"problem": 56, "code": "reduce (fn [coll elem] (if (some #{elem} coll) coll (conj coll elem))) []", "user": "56c4f971e4b05cc29241ee9d"}, {"problem": 56, "code": "(fn distinct-items [coll]\n\t(reduce (fn [res items]\n\t\t\t\t(if (some #{items} res)\n\t\t\t\t\tres\n\t\t\t\t\t(conj res items)))\n\t\t\t[] coll))", "user": "552bd5c2e4b0ffed3738f969"}, {"problem": 56, "code": "(fn [coll]\n      (reduce (fn [acc [i el]]\n                (if (some #{el} (take i coll))\n                  acc\n                  (conj acc el)))\n              []\n              (map-indexed list coll)))", "user": "53483a32e4b084c2834f4a57"}, {"problem": 56, "code": "reduce #(if (some #{%2} %1) %1 (conj %1 %2)) []", "user": "56c4f43ce4b05cc29241ee9c"}, {"problem": 56, "code": "(fn [s] (reduce #(if (empty? (filter (fn [x] (= x %2)) %)) (conj % %2) %) [] s))", "user": "56c08696e4b060a8e693e3aa"}, {"problem": 56, "code": "(fn [coll]\n  (reduce (fn [state x]\n            (if (some #{x} state)\n              state\n              (conj state x)))\n          []\n          coll))", "user": "5297dcc5e4b02ebb4ef75047"}, {"problem": 56, "code": "(fn [xs]\n  (reduce\n    (fn [memo x]\n      (if (some #(= x %) memo)\n         memo\n         (conj memo x)))\n         [] xs))", "user": "5250a13ee4b0541d1855b839"}, {"problem": 56, "code": "#(reverse (sort-by (zipmap (reverse %) (range)) (set %)))\r\n\r\n;#(map first\r\n;   (sort-by second\r\n;     (map first\r\n;       (vals (group-by first\r\n;         (map vector % (range)))))))", "user": "566470b9e4b0e91d5f5c5658"}, {"problem": 56, "code": "(fn [s]\n  (reduce #(if (not (contains? (set %1) %2)) (conj %1 %2) %1) [] s))", "user": "567e418fe4b0feffd0d18eb1"}, {"problem": 56, "code": "reduce (fn [container value]\n            (if (some #(= value %) container)\n              container\n              (conj container value)))\n[]", "user": "55868660e4b059ccff29b1d4"}, {"problem": 56, "code": "(partial reduce (fn [a b]\n                  (if (some (partial = b) a)\n                    a (concat a (list b)))) ())", "user": "56bf4ac0e4b0f26550335985"}, {"problem": 56, "code": "(fn [coll] (reduce (fn [xs x] (if-not (some #{x} xs) (conj xs x) xs)) [] coll))", "user": "56481722e4b0284900eef628"}, {"problem": 56, "code": "#(->> % frequencies keys (sort-by (fn [x] (.indexOf % x))))", "user": "56d80542e4b0ea9b8538f7e1"}, {"problem": 56, "code": "reduce (fn [s e]\n  (if (some #(= % e) s)\n    s\n    (conj s e)))\n[]", "user": "56d05ba2e4b0ea9b8538f77d"}, {"problem": 56, "code": "(fn [x]\n  (reduce (fn [y z] (if (some #(= z %) y) y (concat y [z]))) [] x))", "user": "56d1afd9e4b0ea9b8538f791"}, {"problem": 56, "code": "(fn [s] (sort-by #(.indexOf s %) (set s)))", "user": "563536f8e4b0bfe05bf117c5"}, {"problem": 56, "code": "(fn [xs]\n  (reduce (fn [acc x]\n            (loop [y (first acc)\n                   ls (rest acc)]\n              (cond\n               (= x y) acc\n               (nil? (first ls)) (conj acc x)\n               :else (recur (first ls) (rest ls)))))\n          []\n          xs))", "user": "55f73078e4b06e875b46cea4"}, {"problem": 56, "code": "(fn [x] (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] x))", "user": "567f988be4b0feffd0d18ebe"}, {"problem": 56, "code": "(fn [coll]\n  (reduce #(if (contains? (set %) %2) % (conj % %2)) [] coll))", "user": "53f5c402e4b0db01ade6f9d4"}, {"problem": 56, "code": "(fn [c]\n  (reduce #(if (= (.indexOf %1 %2) -1) (conj %1 %2) %1) [] c))", "user": "5541fa50e4b0a04f79299515"}, {"problem": 56, "code": "(fn [x] (loop [y x, s #{}, c [] ]\n  (if (empty? y) c\n     (let [f (first y)]\n      (if (contains? s f) (recur (rest y) s c)\n           (recur (rest y) (conj s f) (conj c f)))))))", "user": "4fd11a93e4b04c3a95aa040a"}, {"problem": 56, "code": "(fn my-distinct\n  ([coll] (my-distinct coll #{} []))\n  ([[x & xs] encountered res]\n   (if (nil? x)\n     res\n     (if (encountered x)\n       (recur xs encountered res)\n       (recur xs (conj encountered x) (conj res x))))))", "user": "56603e5fe4b068f2fe63dc4a"}, {"problem": 56, "code": "#(reduce (fn [acc i]\n           (if (get (set acc) i)\n             acc\n             (conj acc i)))\n         []\n         %)", "user": "56441634e4b0018b46ad8c08"}, {"problem": 56, "code": "(fn [s]\n  (sort-by #(.indexOf s %)\n           (keys (group-by identity s))))", "user": "56d4b22de4b0ea9b8538f7bb"}, {"problem": 56, "code": "(fn [v]\n  (loop [in v\n         out []]\n    (if (empty? in)\n      out\n      (let [t (first in)]\n        (recur (rest in) (into out (if (contains? (set out) t) nil (vector t))))))))", "user": "56d5fd24e4b0ea9b8538f7c5"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "56df9203e4b0ca2494a095fc"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "55f33f0ce4b06e875b46ce59"}, {"problem": 56, "code": "reduce #(if (some #{%2} %1) %1 (conj %1 %2)) []", "user": "56aed78fe4b03c432f187363"}, {"problem": 56, "code": "(fn [c]\n  (reduce #(if ((set %) %2) % (conj % %2)) [] c))", "user": "56e2dbf4e4b03a7c14b85a3b"}, {"problem": 56, "code": "#(loop [v % h []]\n   (if (= v [])\n       h\n       (let [a (first v)]\n         (recur (filter (fn [x] (not= x a)) v)\n                (conj h a)))))", "user": "564d3169e4b0284900eef67c"}, {"problem": 56, "code": "#(loop [up (first %)\n        coll (rest %)\n        dist []\n        done #{}]\n   (if (nil? up)\n     dist\n     (recur (first coll) (rest coll) (if (contains? done up)\n                                       dist\n                                       (conj dist up)) (conj done up))))", "user": "56d63729e4b0ea9b8538f7ca"}, {"problem": 56, "code": "(fn [l]\n    (loop\n      [l' l\n       acc '()]\n      (if (empty? l')\n        (reverse acc)\n        (recur\n          (remove\n            #(= % (first l'))\n            (rest l'))\n          (cons (first l') acc)))))", "user": "56050f06e4b08b23635d3161"}, {"problem": 56, "code": "(fn [x]\n  (reduce (fn [acc y]\n            (if (not (.contains acc y))\n              (conj acc y)\n              acc))\n          []\n          x))", "user": "5628f727e4b00e49c7cb47f5"}, {"problem": 56, "code": "(fn [col]\n  (seq (new java.util.LinkedHashSet col)))", "user": "563cce5be4b0bfe05bf1183f"}, {"problem": 56, "code": "(fn [coll]\n    (loop [c coll seen #{} clean []]\n      (cond\n        (empty? c) clean\n        (seen (first c)) (recur (rest c) seen clean)\n        :else (recur (rest c) (conj seen (first c)) (conj clean (first c))))))", "user": "56eaad95e4b04a395b9a040f"}, {"problem": 56, "code": "reduce #(if (some #{%2} %1) %1 (conj %1 %2)) []", "user": "56e6ef89e4b02e7e935eb6d0"}, {"problem": 56, "code": "(fn [mycoll]\n  (loop [elems #{} result [] data mycoll]\n    (if (empty? data) result\n      (if (contains? elems (first data))\n        (recur elems result (rest data))\n        (recur (conj elems (first data)) (conj result (first data)) (rest data))))))", "user": "53d977f1e4b0e771c302547a"}, {"problem": 56, "code": "(fn [coll] (reduce (fn [nm x] (if (not-any? #(= x %) nm) (conj nm x) nm)) [] coll))", "user": "51b0e7b3e4b0c53cf2e68a6e"}, {"problem": 56, "code": "#(loop [d []\n         s #{}\n         [f & r] %]\n    (if f\n      (if (s f)\n        (recur d s r)\n        (recur (conj d f) (conj s f) r))\n      d))", "user": "542a8d07e4b01498b1a71b43"}, {"problem": 56, "code": "(fn distinct' [col]\n  (->> col\n   (reduce (fn [[acc dcol] x]\n             (if (acc x)\n               [acc dcol]\n               [(conj acc x) (conj dcol x)]))\n           [#{} []])\n   (second)))", "user": "569dd6e8e4b0542e1f8d1480"}, {"problem": 56, "code": "(fn dist\n  [coll]\n  (loop [seen #{},\n         xs coll,\n         result []]\n    (cond\n     (empty? xs) result\n     (contains? seen (first xs)) (recur seen, (rest xs), result)\n     :else (recur (conj seen (first xs)), (rest xs), (conj result (first xs))))))", "user": "56e99ec8e4b04a395b9a03fb"}, {"problem": 56, "code": "#(reverse ((fn uniq [x]\n  (let [f (fn contained [x l]\n          (if (= l ()) \n            false\n            (if (= x (first l))\n              true\n              (contained x (rest l))\n            )\n          )\n        )]\n   (if (= x ())\n     ()\n     (if (f (first x) (rest x))\n       (uniq (rest x))\n       (conj (uniq (rest x)) (first x))\n     )\n   )\n )\n)\n(reverse %) \n)\n)", "user": "56f258d3e4b04a395b9a04a1"}, {"problem": 56, "code": "(fn [x] (seq (java.util.LinkedHashSet. x)))", "user": "50939f7ce4b097f48cc38582"}, {"problem": 56, "code": "(fn [coll]\n  (first (reduce (fn[[s seen :as res] n]\n            (if (contains? seen n)\n              res\n              [(conj s n) (conj seen n)])) [[] #{}] coll)))", "user": "55101237e4b06e50f9beb181"}, {"problem": 56, "code": "#(letfn [(d [l seen]\n           (if (seq l)\n             (let [f (first l) r (rest l)]\n               (if (seen f) (d r seen) (cons f (d r (conj seen f)))))))]\n   (d % #{}))", "user": "56d68cbae4b0ea9b8538f7cd"}, {"problem": 56, "code": "(fn [coll]\n   (reduce\n    (fn [c e]\n      (if (some #(= e %) c) c (conj c e))) [] coll))", "user": "4f57c913e4b0a7574ea7183f"}, {"problem": 56, "code": "(fn [input]\n    (let\n      [starting-set (hash-map :input-left input :seen [])]\n      (letfn ([peek-a-boo [state]\n                    (if (empty? (:input-left state))\n                      (:seen state)\n                      (let [nextv (first (:input-left state))]\n                        (if (some #{nextv} (:seen state))\n                          (peek-a-boo (hash-map :input-left (rest (:input-left state)) :seen (:seen state)))\n                          (peek-a-boo (hash-map :input-left (rest (:input-left state)) :seen (concat (:seen state) (list nextv))))\n                        )\n                      )\n                    )\n              ]) \n        (peek-a-boo starting-set)\n        )\n      )\n    )", "user": "56ef11efe4b04a395b9a045b"}, {"problem": 56, "code": "reduce (fn [coll x] \n         (if (some #(= % x) coll) \n           coll \n           (conj coll x) ) ) []", "user": "56f188e9e4b04a395b9a0494"}, {"problem": 56, "code": "(fn find-distinct-items [x]\n    (second\n     (reduce (fn [[seen results] item]\n               (if (get seen item)\n                 [seen results]\n                 [(conj seen item) (conj results item)]))\n\n             [#{} []]   ;; initial value is set of seen items and a results vector\n             x)))", "user": "539f9f79e4b0ca733b97449e"}, {"problem": 56, "code": "#(->> %\n      (map-indexed (fn [i v] [i v]))\n      (group-by second)\n      (map (fn [[k v]] [(get-in v [0 0]) k]))\n      (into (sorted-map))\n      vals)", "user": "4f5599dfe4b0a7574ea71806"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "56dc483fe4b0ea9b8538f81b"}, {"problem": 56, "code": "(fn [v] (reduce #(if (contains? (set %1) %2) %1 (conj %1 %2)) [] v))", "user": "5683d2a9e4b0945ebc182aa0"}, {"problem": 56, "code": "(fn dist [S]\n  (loop [A []\n         R S\n         st #{}]\n    (cond (empty? R) A\n          (contains? st (first R)) (recur A (rest R) st)\n          :else (recur (conj A (first R)) (rest R) (conj st (first R))))))", "user": "56f53962e4b046a417f9206c"}, {"problem": 56, "code": "(fn my-56\n  [coll]\n  (reduce #(if ((set %) %2) \n             %\n             (conj % %2))\n          [] coll))", "user": "56c3aca0e4b05cc29241ee90"}, {"problem": 56, "code": "(fn [xs]\n  (:result (reduce #(if ((:set %1) %2)\n                     %1\n                     (-> %1 (update-in [:result] conj %2) (update-in [:set] conj %2)))\n                   {:set #{} :result []} xs)))", "user": "56df254be4b0ca2494a095ea"}, {"problem": 56, "code": "#(reduce (fn [acc e] (if (some (partial = e) acc)\n                        acc\n                        (conj acc e)\n                        )) [] %)", "user": "56f7ecdfe4b08e7d20b96834"}, {"problem": 56, "code": "(fn [coll] (reduce (fn [y x] (if-not (some #(= % x) y) (conj y x) y)) [] coll))", "user": "56f15eade4b04a395b9a048e"}, {"problem": 56, "code": "(fn [x]\n  (->> x\n      (group-by identity)\n      keys\n      (sort-by #(.indexOf x %))))", "user": "54764a8fe4b0c51c1f4d72a3"}, {"problem": 56, "code": "#(first (reduce (fn\n                   [[res vs] x]\n                   (if (vs x)\n                     [res vs]\n                     [(conj res x) (conj vs x)]))\n                 [[] #{}] %))", "user": "56fa3f7ae4b07572ad1a88bf"}, {"problem": 56, "code": "(fn [s] (last (reduce (fn [[prev-seen uniq] v]\n  (if (contains? prev-seen v)\n    [prev-seen uniq]\n    [(into prev-seen #{v}) (concat uniq [v])])) [#{} '()] s)))", "user": "56f9392ae4b07572ad1a88ac"}, {"problem": 56, "code": "(fn [sq] (if (empty? sq) sq (loop [s sq mem #{} r (empty sq)] (if (empty? s) (into (empty sq) r) (recur (rest s) (conj mem (first s)) (if (not (contains? mem (first s))) (conj r (first s)) r))))))", "user": "55b6a63ae4b01b9910ae299b"}, {"problem": 56, "code": "(fn a [lst] (if (vector? (first lst))\n            (butlast (cons (last (sort (set lst))) (sort (set lst))))\n  (sort (set lst))))", "user": "56fc1bc7e4b07572ad1a88dd"}, {"problem": 56, "code": "reduce (fn [s e]\n  (if (some #(= % e) s)\n    s\n    (conj s e)))\n[]", "user": "54b6c24be4b0ed20f4ff6e7c"}, {"problem": 56, "code": "(fn [s]\n  (loop [t s\n         d []\n         m #{}]\n    (cond (empty? t) d\n          (contains? m (first t))\n          (recur (rest t) d m)\n          :else (recur (rest t)\n                       (conj d (first t))\n                       (conj m (first t))))))", "user": "4f037faf535dcb61093f6af8"}, {"problem": 56, "code": "(fn [c]\n (reduce\n    (fn [m e] (if (some #(= % e) m)\n      m\n      (conj m e)))\n  [] c))", "user": "511e17a9e4b0c5b849dd36b0"}, {"problem": 56, "code": "#(reduce (fn [a b] (if (= (.indexOf a b) -1) (conj a b) a)) [] %)", "user": "5700f1f0e4b08d47c97781ce"}, {"problem": 56, "code": "reduce #(if ((set %) %2) % (conj % %2)) []", "user": "56b2573ce4b0982f16b37e02"}, {"problem": 56, "code": "(fn [coll]\n  (reduce #(if (some #{%2} %1)\n             %1\n             (conj %1 %2)) [] coll))", "user": "56d3bc2de4b0ea9b8538f7b0"}, {"problem": 56, "code": "(fn [coll]\n  (first (reduce\n          (fn [[items s] e] (if (s e) [items s] [(conj items e) (conj s e)])) \n          [[] #{}]\n          coll)))", "user": "520e37cfe4b066f3ea161c96"}, {"problem": 56, "code": "#(reduce\n         (fn [b elem]\n           (if (contains? (set b) elem)\n             b\n             (do (println b elem (contains? (set b) elem))\n               (conj b elem))))\n         [] %)", "user": "56d6c18ee4b0ea9b8538f7d1"}, {"problem": 56, "code": "(fn [coll] (reduce (fn [m x] (if ((set m) x) m (conj m x))) [] coll))", "user": "56fbf83de4b07572ad1a88da"}, {"problem": 56, "code": "reduce\n;#(if (contains? (set %1) %2)\n#(if (some #{%2} %1)\n   %1\n   (conj %1 %2))\n[]", "user": "51e5a627e4b0efabf93c02db"}, {"problem": 56, "code": "#(reduce (fn [r x] (if (not-any? #{x} r) (conj r x) r)) [] %)", "user": "56dc3bdfe4b0ea9b8538f819"}, {"problem": 56, "code": ";(fn [s]\n;  (loop [l s, acc []]\n;    (if-let [h (first l)]\n;      (recur (remove #(= h %) l) (conj acc h))\n;      acc)))\n(fn [s] (reduce #(if (some #{%2} %) % (conj % %2)) [] s))", "user": "57035ccfe4b08d47c97781ef"}, {"problem": 56, "code": "(fn uniques [coll]\n  (let [m (transient '{})]\n    (prn coll)\n    (reduce #(if (m %2) (do (prn \"contains\" %2) %1) (do (prn \"!contains\" %2 m) (assoc! m %2 :true) (conj %1 %2))) '[] coll)))", "user": "56f4cedce4b046a417f92063"}, {"problem": 56, "code": "reduce (fn [acc itm]\n        (if (some #{itm} acc)\n          acc\n          (conj acc itm))) []", "user": "5703cd50e4b08d47c97781fc"}, {"problem": 56, "code": "(fn dis [seq]\n   (loop [s seq\n          ret []]\n    (if (empty? s)\n     ret\n     (let [same? (contains? (set ret) (first s))]\n       (recur (rest s) (if same? ret (conj ret (first s))))))))", "user": "5703ce0fe4b08d47c97781fd"}, {"problem": 56, "code": "(fn dis [s]\n   (loop [s s\n          acc []]\n    (if (empty? s)\n     acc\n     (let [same? (contains? (set acc) (first s))]\n       (recur (rest s) (if same? acc (conj acc (first s))))))))", "user": "570b7d48e4b0b0fb43fd06c0"}, {"problem": 56, "code": "(fn [coll]\n    (let [y  (keys (group-by identity coll))]\n      (if (< (count y) (count coll))\n        y\n        coll)\n      ))", "user": "56ede653e4b04a395b9a0449"}, {"problem": 56, "code": "(fn x [coll]\n  (reduce #(if (some #{%2} %1) %1 (conj %1 %2) )  [] coll)\n  \n  )", "user": "56db90d4e4b0ea9b8538f80d"}, {"problem": 56, "code": "(fn dist [v]\n  (loop [acc [] has #{} s v]\n    (if (empty? s)\n      acc\n      (if (contains? has (first s))\n        (recur acc has (rest s))\n        (recur (conj acc (first s)) (conj has (first s)) (rest s))))))", "user": "5292feb4e4b0239c8a67af39"}, {"problem": 56, "code": "(fn uniques [coll]\n  ((fn step [[x & xs] acc]\n     (when x\n       (if (acc x)\n         (step xs acc)\n         (cons x (step xs (conj acc x))))))\n  coll #{}))", "user": "56efc9fde4b04a395b9a0464"}, {"problem": 56, "code": "(fn [coll] (letfn [(helper [icoll done]\n                             (let [head (first icoll)\n                                   tail (rest icoll)]\n                               (cond\n                                 (empty? icoll) (list)\n                                 (done head) (helper tail done)\n                                 :else (conj (helper tail (conj done head))\n                                             head))))]\n                     (helper coll #{})))", "user": "557e56aae4b05c286339e0d5"}, {"problem": 56, "code": "(fn [coll]\n  (:value (reduce #(if ((:pred %) %2)\n                     %\n                     {:value (conj (:value %) %2) :pred (conj (:pred %) %2)})\n                  {:pred #{} :value []} coll)))", "user": "549eb44fe4b0f3d1d8e70fa6"}, {"problem": 56, "code": "(fn [s]\n  (reduce (fn [v i]\n            (if (some #(= % i) v)\n              v\n              (conj v i)))\n          []\n          s))", "user": "57008afae4b08d47c97781ca"}, {"problem": 56, "code": "(fn [coll]\n  (reduce\n    (fn [prev cur]\n      (if ((set prev) cur)\n        prev\n        (conj prev cur)))\n    []\n    coll))", "user": "56fc0601e4b07572ad1a88db"}, {"problem": 56, "code": "#(reduce (fn [a b] (if (not (contains? (set a) b)) (conj a b) a)) [] %)", "user": "567e6d24e4b0feffd0d18eb4"}, {"problem": 56, "code": "(fn [coll]\n  (loop [[el & _ :as coll] coll\n         exists #{}\n         result []]\n    (if coll\n      (if (exists el)\n        (recur (next coll) exists result)\n        (recur (next coll) (conj exists el) (conj result el)))\n      result)))", "user": "5712854ce4b07c98581c3a89"}, {"problem": 56, "code": "(fn [c] (reduce (fn [coll element]\n                  (if (some #(= % element) coll)\n                    coll\n                    (conj coll element))) [] c))", "user": "56c60b36e4b05cc29241eead"}, {"problem": 56, "code": "#(->> (map list %1 %2)\n      (group-by second)\n      (map (fn [[k v]] [k (reduce min (map first v))]))\n      (sort-by second)\n      (map first)) (range)", "user": "5711b532e4b09c608db70449"}, {"problem": 56, "code": "#(reverse (reduce (fn [accum y]\n                    (if-not (some (partial = y) accum)\n                      (cons y accum)\n                      accum\n                   )) '() %))", "user": "56b506d5e4b0982f16b37e2d"}, {"problem": 56, "code": "#(reduce \n  (fn [result x] \n    (if (some #{x} result) \n      result \n      (conj result x)))\n  [] %)", "user": "55cb11e9e4b0e31453f649ff"}, {"problem": 56, "code": "reduce\n     (fn [stuff item]\n       (if (some #{item} stuff)\n         stuff\n         (conj stuff item)))\n       []", "user": "52cbe5dfe4b07d0d72b27352"}, {"problem": 56, "code": "reduce (fn [deduped val] (if (not (some #{val} deduped)) (conj deduped val) deduped)) []", "user": "55c4cda5e4b0e31453f649a5"}, {"problem": 56, "code": "(fn [l] \n  (first (reduce (fn [[redc seen] x] \n            (if (contains? seen x) [redc seen] [(concat redc [x]) (conj seen x)]))\n           [[] #{}] l)\n  \n  ))", "user": "57011eb3e4b08d47c97781d1"}, {"problem": 56, "code": "reduce #(if(.contains % %2) % (conj % %2)) []", "user": "57169f93e4b07c98581c3b00"}, {"problem": 56, "code": "(fn [coll_]\n  (loop [unq [] coll coll_ seen #{}]\n    (if-let [[f & t] coll]\n      (if (seen f)\n        (recur unq t seen)\n        (recur (conj unq f) t (conj seen f)))\n      unq)))", "user": "56102f50e4b05f002753df6b"}, {"problem": 56, "code": "(fn [a-seq]\n  (loop [lseq a-seq found #{} acc []]\n    (if (empty? lseq)\n      acc\n      (let [x (first lseq)\n            new-acc (if (contains? found x)\n                      acc\n                      (conj acc x))]\n        (recur (rest lseq) (conj found x) new-acc)))))", "user": "56cb4d06e4b0ea9b8538f72e"}, {"problem": 56, "code": "(fn [s]\n  (let [tmp \n        (reduce \n         (fn [[res seen :as acc] elem]\n           (if (contains? seen elem)\n             acc\n             (let [new-res (conj res elem)\n                   new-seen (conj seen elem)]\n               [new-res new-seen])\n             )\n           )\n         [[] #{}]\n         s\n         )]\n    (first tmp)\n    )\n  )", "user": "56fbe0cce4b07572ad1a88d8"}, {"problem": 56, "code": "(fn [coll] \n  (loop [found #{}\n         result (empty coll)\n         curr coll]\n    (if (empty? curr)\n      (if (list? result) (reverse result) result)\n      (if (contains? found (first curr))\n        (recur found\n               result\n               (rest curr))\n        (recur (conj found (first curr))\n               (conj result (first curr))\n               (rest curr))))))", "user": "571c2babe4b07c98581c3b73"}, {"problem": 56, "code": "(fn [vs]\n            (reduce (fn [acc v]\n                      (let [seen (set acc)]\n                        (if (seen v)\n                          acc\n                          (conj acc v))))\n                    []\n                    vs))\n\n#_(fn [vs]\n            (loop [vs' vs, seen #{}, acc []]\n              (if (seq vs')\n                (let [v (first vs')]\n                  (if (seen v)\n                    (recur (rest vs') seen acc)\n                    (recur (rest vs') (conj seen v) (conj acc v))))\n                acc)))", "user": "53684a2fe4b0243289761e8c"}, {"problem": 56, "code": "(fn my-distinct [s]\n   (loop [s s\n          b #{}\n          ret '()]\n     (if (empty? s)\n       (reverse ret)\n       (let [[h & r] s]\n         (recur r (conj b h) (if (contains? b h) ret (conj ret h)))))))", "user": "571d063ee4b0145328a76272"}, {"problem": 56, "code": "(fn [coll]\n    (loop [check #{}\n           coll coll\n           result []]\n      (if-let [el (first coll)]\n        (if (contains? check el)\n          (recur check (rest coll) result)\n          (recur (conj check el) (rest coll) (conj result el)))\n        result)))", "user": "55d62a68e4b0e31453f64a96"}, {"problem": 56, "code": "(fn [col]\n  (let [tmp-set #{}\n        result nil ]\n    (loop [col col tmp-set tmp-set result result]\n      (if (empty? col)\n        (reverse result)\n        (if (nil? (tmp-set (first col)) ) \n          (recur (rest col) (conj tmp-set (first col)) (conj result (first col)) )\n          (recur (rest col) tmp-set result)\n           ) ))))", "user": "56c7d8dee4b0ed865f9758c9"}, {"problem": 56, "code": "(fn [xs] (loop  [[head & more] xs acc []]  (if more (recur more (if (some #{head} acc) acc (conj acc head))) (if (some #{head} acc) acc (conj acc head)))))", "user": "56cad309e4b0ea9b8538f720"}, {"problem": 56, "code": "(fn [s]\n  (loop [r s ct #{} out []]\n    (let [[h & t] r]\n      (cond (empty? r)\n            out\n            (contains? ct h)\n            (recur t ct out)\n            :else\n            (recur t (conj ct h) (conj out h))))))", "user": "56f51879e4b046a417f92069"}, {"problem": 56, "code": "(fn \n [coll]\n (loop [[x & xs] coll acc []]\n  (if x\n    (recur xs (if (some (partial = x) acc) acc (conj acc x)))\n    acc\n    )\n  )\n )", "user": "56edf2dde4b04a395b9a044b"}, {"problem": 56, "code": "(fn f\n   ([s] (f s []))\n   ([s r]\n    (if (empty? s)\n      r\n      (if (contains? (apply hash-map (interleave  r (repeat (count r) 0))) (first s))\n        (recur (rest s) r)\n        (recur (rest s) (into r ((comp vector first) s)))))))", "user": "56ab7578e4b03c432f18733d"}, {"problem": 56, "code": "(fn [s]\n    (reduce (fn [v n] (if (nil? (some #(= n %) v)) (conj v n) v)) [] s)\n    )", "user": "56791447e4b05957ce8c6183"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "56efb3a3e4b04a395b9a0463"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "571e819ae4b0145328a76294"}, {"problem": 56, "code": "#(reduce (fn [acc v] \n           (let [new-acc (conj acc v)] \n             (if (apply distinct? new-acc) new-acc acc)))\n         [] %)", "user": "57002b81e4b08d47c97781c7"}, {"problem": 56, "code": "#(reduce\n (fn [out v]\n   (if (some #{v} out)\n     out\n     (conj out v)))\n []\n %)", "user": "5602bdf9e4b04bb52996e1a7"}, {"problem": 56, "code": "(fn [coll]\n  (:result\n   (reduce (fn [acc v]\n             (if ((:seen acc) v)\n               acc\n               (-> acc\n                   (update-in [:seen] conj v)\n                   (update-in [:result] conj v))))\n           {:seen #{(first coll)}\n            :result [(first coll)]}\n           (rest coll))))", "user": "516c3472e4b06f078fab251c"}, {"problem": 56, "code": "#(reduce (fn [w v]\n           (if ((set w) v)\n             w\n             (conj w v)))\n         []\n         %)", "user": "52ae886de4b0c58976d9acab"}, {"problem": 56, "code": "#(loop [[x & xs] %, result []]\n   (if x\n     (recur xs (if (= (.indexOf result x) -1) (conj result x) result))\n     result))", "user": "57015a1de4b08d47c97781d4"}, {"problem": 56, "code": "#(reduce\n  (fn [acc v] \n    (if-not (= -1 (.indexOf acc v))\n      acc\n      (conj acc v))) [] %)", "user": "572722c4e4b0c5bde472c134"}, {"problem": 56, "code": "(fn [coll] (reduce #(if ((set %1) %2) %1 (conj %1 %2)) [] coll))", "user": "57283dbce4b0c5bde472c154"}, {"problem": 56, "code": "(fn [s]\n  (loop [r s\n         seen #{}\n         acc []]\n    (if (empty? r)\n      acc\n      (recur (rest r)\n             (conj seen (first r))\n             (if (seen (first r))\n               acc (conj acc (first r)))))))", "user": "5461dc79e4b01be26fd746a8"}, {"problem": 56, "code": "#(reduce (fn [v n] (if (nil? (some #{n} v)) (conj v n) v)) [] %)", "user": "572af688e4b0f4d77e651249"}, {"problem": 56, "code": "(fn my-distinct\n  [coll]\n  (loop [found #{}\n         remaining coll\n         result []]\n    (if (empty? remaining)\n      result\n      (if (found (first remaining))\n        (recur found (rest remaining) result)\n        (recur (conj found (first remaining)) (rest remaining) (conj result (first remaining)))))))", "user": "572db6d5e4b0cd1946bd0f78"}, {"problem": 56, "code": "(fn[s]\n  (loop [res []\n         input s]\n    (if (empty? input)\n      res\n      (if (some #{(first input)} res)\n        (recur res (rest input))\n        (recur (conj res (first input))\n               (rest input))))))", "user": "55912230e4b027778923767a"}, {"problem": 56, "code": "(fn\n  [s]\n  (reduce\n   (fn [rez el]\n     (if (some #(= el %) rez)\n       rez\n       (conj rez el)))\n   [] s))", "user": "56b2630be4b0982f16b37e03"}, {"problem": 56, "code": "(fn [coll] \n  (into [] \n    (reduce \n     (fn [coll x] \n       (if \n         (some #{x} coll) \n         coll \n         (conj coll x))) [] coll)))", "user": "4df73d64535d04ed9115e775"}, {"problem": 56, "code": "(fn [a-seq]\n   (loop [acc []\n          counter-set #{}\n          a-seq a-seq]\n     (cond\n       (empty? a-seq) acc\n       (contains? counter-set (first a-seq)) (recur acc counter-set (rest a-seq))\n       :else (recur (conj acc (first a-seq)) (conj counter-set (first a-seq)) (rest a-seq)))))", "user": "571cd9dce4b0145328a76271"}, {"problem": 56, "code": "(fn remove-dupes\n  ([sqn] \n    (remove-dupes sqn #{}))\n  ([[x & re :as sqn] seen]\n    (if (empty? sqn)\n      sqn\n      (if (some #{x} seen)\n        (recur re seen) ;discard duplicate\n        (cons x (remove-dupes re (conj seen x)))))))", "user": "569f99cce4b0542e1f8d1497"}, {"problem": 56, "code": "#(loop [inp % occurred #{} result []]\n   (if (empty? inp) result\n     (recur (rest inp) (clojure.set/union occurred #{(first inp)})\n            (if (contains? occurred (first inp))\n              result (conj result (first inp))))))", "user": "5547b72be4b0a04f79299550"}, {"problem": 56, "code": "(fn [x] ( reduce #(if (some (fn[x](= x %2)) %1) %1 (conj %1 %2)) [] x))", "user": "5717d674e4b07c98581c3b1a"}, {"problem": 56, "code": ";;lazy sequence.\n;;e.g. can run it on (interleave (iterate #(+ 3 %) 0) (iterate #(+ 5 %) 0))) and then take 50 afterwards\n(fn dist [c] (let [\n\tf (fn f [a b] (if (empty? a) [] (let [\n\t\t[a1 & a2] a\n\t] (if (b a1)\n\t\t(f a2 b)\n\t\t(let [b2 (conj b a1)] (cons a1 (lazy-seq (f a2 b2))))\n\t))))\n] (f c #{})))", "user": "571aad45e4b07c98581c3b59"}, {"problem": 56, "code": "#(loop [xs %\n        acc []]\n   (if (empty? xs)\n     acc\n     (if-not (some #{(first xs)} acc)\n       (recur (rest xs) (conj acc (first xs)))\n       (recur (rest xs) acc))))", "user": "5724a4dae4b0c5bde472c0fe"}, {"problem": 56, "code": "(fn f [s]\n  (if (empty? s)\n    '()\n    (#(cons % (f (remove (partial = %) s))) (first s))))", "user": "56eb3f9de4b04a395b9a0420"}, {"problem": 56, "code": "(fn distincts [coll]\n  (loop [c coll\n         acc []]\n    (if (empty? c)\n      acc\n      (recur\n        (filter (partial not= (first c))  (rest c))\n        (concat acc ((comp list first) c))))))", "user": "572ea970e4b0cd1946bd0f89"}, {"problem": 56, "code": "(fn my-distinct [lst]\n  (reduce #(if (contains? (set %1) %2)\n             %1\n             (concat %1 [%2])\n             ) [] lst))", "user": "5733e4aee4b0cd1946bd0ffe"}, {"problem": 56, "code": ";(\n (fn [c]\n   (->> c\n        (group-by identity)\n        (keys)\n        (sort-by #(.indexOf c %))\n        ))\n; (range 50))", "user": "573632b7e4b0cd1946bd102f"}, {"problem": 56, "code": "(fn distinctIt [coll]\n  (loop [remaining coll output []]\n    (if (empty? remaining) output\n      (recur (filter #(not= % (first remaining)) remaining) (conj output (first remaining))))))", "user": "57131dfbe4b07c98581c3a98"}, {"problem": 56, "code": "(fn my-distinct [xs]\n  (loop [xout '(), xin xs, saux #{}]\n    (let [x (first xin)]\n    (if (= (count xin) 0) xout\n        (recur (concat xout (if (saux x) nil (list x))) (rest xin) (conj saux x))))))", "user": "56fa2905e4b07572ad1a88be"}, {"problem": 56, "code": "(fn [xs]\n  (let [seen (atom #{})]\n    (filter (fn [item]\n              (when-not (contains? @seen item)\n                (swap! seen #(conj % item))))\n            xs)))", "user": "573d58c8e4b05c31a32c0811"}, {"problem": 56, "code": "(fn [sq]\n    (reduce (fn [result item] \n              ; If item is in result, just return result\n              (if (some #{item} result)\n                result\n                (conj result item)\n                )\n              )\n            []\n            sq\n            )\n    )", "user": "571a282ae4b07c98581c3b46"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "573652e1e4b0cd1946bd1030"}, {"problem": 56, "code": "#(let [dst (fn [sq rs st]\n             (let [x (first sq)\n                   r (rest sq)\n                   nrs (if (get st x) rs (conj rs x))]\n               (if (seq r)\n                 (recur r nrs (conj st x))\n                 nrs)))]\n  (dst % [] #{}))", "user": "570794d8e4b0b0fb43fd068b"}, {"problem": 56, "code": "(partial\n   reduce\n     (fn [r x]\n       (if ((set r) x)\n           r\n           (conj r x)))\n     [])", "user": "57300c19e4b0cd1946bd0fa1"}, {"problem": 56, "code": "(fn uniq [seq]\n  (reduce\n    (fn [prev, cur] (if (empty? (filter #(= cur %) prev))\n                      (conj prev cur)\n                      prev\n                      )\n      )\n    []\n    seq)\n  )", "user": "55d42f78e4b0e31453f64a73"}, {"problem": 56, "code": "reduce  #(if (contains? (set %) %2) % (conj % %2) ) []", "user": "5735ac67e4b0cd1946bd102b"}, {"problem": 56, "code": "(fn [xs] \n  (reduce \n   #(if (not= (set %1) (set (conj %1 %2))) \n      (conj %1 %2) \n      %1) \n   [] \n   xs))", "user": "56cc34aee4b0ea9b8538f73c"}, {"problem": 56, "code": "#(->> (zipmap (range) %)\n      (group-by val)\n      (sort-by (fn [[_ a]] (apply min (map first a))))\n      (map first))", "user": "56ff45e5e4b08d47c97781bb"}, {"problem": 56, "code": "(fn [coll] \n  (reduce (fn [acc x] (if (some #{x} acc) acc (concat acc (list x)))) `() coll))", "user": "57434103e4b0c285004e8a9e"}, {"problem": 56, "code": "(fn f\n    ([distinct-set remaining-set]\n     (if (empty? remaining-set)\n       distinct-set\n       (if (some #(= % (first remaining-set)) distinct-set)\n         (f distinct-set (rest remaining-set))\n         (f (conj distinct-set (first remaining-set))\n                  (rest remaining-set)))))\n    ([remaining-set]\n     (f [] remaining-set)))", "user": "52e1c276e4b09f7907dd142b"}, {"problem": 56, "code": "(fn my-district-item [coll]\n      (loop [ret [] x coll assists #{}]\n          (if (empty? x) ret\n             (recur (if (get assists (first x)) ret (conj ret (first x))) (rest x) (conj assists (first x)))\n  )))", "user": "573940e3e4b0cd1946bd106b"}, {"problem": 56, "code": "(fn [coll]\n  (let [contains-val? (fn [coll v] (some #(= v %) coll))]\n   (reduce #(if (not (contains-val? %1 %2)) (conj %1 %2) %1) [] coll)))", "user": "5609d328e4b05f002753deee"}, {"problem": 56, "code": "reduce #(if (some (fn [x] (= x %2)) %1) %1 (vec (conj %1 %2))) []", "user": "573ce277e4b05c31a32c080b"}, {"problem": 56, "code": "(fn findDistinct [c]\n    (reduce \n      (fn [r x]\n        (if   \n          (some #(= % x) r)   \n          r\n          (conj r x)\n        )        \n      )\n    []\n    c  \n    )\n    ; works, but doesn't preserve order!    \n    ;(map #(first %) (group-by (fn [a] a) c))\n  )", "user": "571aae1fe4b07c98581c3b5a"}, {"problem": 56, "code": "(fn noDupes [s] (loop [coll [] s2 (vec s) i 0] (cond (= i (count s2)) (if (vector? s) coll (seq coll)) (contains? (set coll) (get s2 i)) (recur coll s2 (inc i))\n                                                          :else (recur (conj coll (get s2 i)) s2 (inc i)))))", "user": "573c813be4b0cd1946bd10c5"}, {"problem": 56, "code": "reduce #(if (some (fn [x] (= x %2)) %1) %1 (conj %1 %2)) []", "user": "563f24f9e4b08d4f616f5ed0"}, {"problem": 56, "code": "(fn f [col]\n  (into [] (java.util.LinkedHashSet. col)))", "user": "574af03ce4b02ea114799202"}, {"problem": 56, "code": "(fn [s]\n  (let [m (atom #{})]\n    (filter #(when-not (contains? @m %) (swap! m conj %)) s)))", "user": "57458b82e4b009280f9f2b4e"}, {"problem": 56, "code": "(fn my-distinct [coll]\n  (reduce (fn [acc it] (if (some #{it} acc) acc (conj acc it))) [] coll))", "user": "57407ab3e4b05c31a32c0854"}, {"problem": 56, "code": "#(reduce (fn [s x] (if (some #{x} s) s (conj s x))) [] %)", "user": "57440f77e4b0c285004e8ab5"}, {"problem": 56, "code": "(fn [shit] (reduce #(if (.contains %1 %2) %1 (conj %1 %2) ) [] shit))", "user": "561814bae4b06b1bb2182a1a"}, {"problem": 56, "code": "reduce (fn [r i]\n            (if (some #{i} r)\n              r\n              (conj r i))) \n          []", "user": "57408f87e4b05c31a32c0856"}, {"problem": 56, "code": "(fn dedup [xs]\n  (if (empty? xs) xs\n    (let [bl (dedup (butlast xs))\n          l  (last xs)]\n      (if (some #{l} bl) bl\n        (concat bl [l])))))", "user": "574dfcb8e4b02ea11479923a"}, {"problem": 56, "code": "(fn nub [xs]\n  (reduce (fn [ys y]\n            (if (some #{y} ys)\n              ys\n              (conj ys y)))\n          []\n          xs))", "user": "55ed5a2de4b0121d4835fdd8"}, {"problem": 56, "code": "(fn dist [sq]\n  (loop [[head & tail] sq\n         res []]\n    (if (nil? head) res\n      (recur \n       (filter #(not (= head %)) tail)\n       (conj res head)\n      ))))", "user": "574e7be7e4b02ea114799242"}, {"problem": 56, "code": "(fn [x]\n  (loop [acc (take 1 x)\n         xs (rest x)]\n    (if (empty? xs)\n      (reverse acc)\n      (recur (if (some #(= (first xs) %) acc)\n               acc\n               (cons (first xs) acc))\n             (rest xs)))))", "user": "56fee4c0e4b08d47c97781b5"}, {"problem": 56, "code": "(fn [c0]\n\n  (loop [r []\n         c c0]\n\n    (cond\n      (empty? c) r\n      (some #(= (first c) %) r) (recur r (rest c))\n      :else (recur (conj r (first c)) (rest c)))))", "user": "562268dce4b03f08ee9a9224"}, {"problem": 56, "code": "(fn [xs]\n  (first\n   \t(reduce\n      (fn [[acc seen] n]\n        (if (contains? seen n)\n            [acc seen]\n            [(conj acc n) (conj seen n)])) [[] #{}] xs)))", "user": "54e540c1e4b024c67c0cf7f9"}, {"problem": 56, "code": "#(last\n   (reduce\n    (fn [[s d] n]\n        [(conj s n)\n         (if (s n)\n             d\n             (conj d n))])\n    [#{} []]\n    %))", "user": "5742ec91e4b05c31a32c0883"}, {"problem": 56, "code": "(fn my-distinct\n  ([lis] (my-distinct lis []))\n  ([lis resp]\n   (if (= lis [])\n     resp\n     (if (some (hash-set (first lis)) resp)\n       (my-distinct (rest lis) resp)\n       (my-distinct (rest lis) (conj resp (first lis)))))))", "user": "574f1c24e4b02ea114799255"}, {"problem": 56, "code": "(fn dist [xs]\n  (reverse\n   (reduce\n    #(if (.contains %1 %2) %1 (cons %2 %1))\n    '() xs)))", "user": "569ad037e4b0542e1f8d144f"}, {"problem": 56, "code": "(fn [c]\n  (reduce #(if (-> % set (contains? %2)) % (conj % %2)) [] c))", "user": "508c3d42e4b0f17d83ea26b2"}, {"problem": 56, "code": "(fn dst\n  ([s] (dst [] s))\n  ([found left]\n    (let [left (drop-while #(some #{%} found) left)]\n      (if (empty? left) found\n        (recur (conj found (first left)) left)))))", "user": "57539e04e4b02ea1147992ab"}, {"problem": 56, "code": "(fn [coll]\n  (letfn [(dist [elts coll]\n                (lazy-seq\n                 (if-let [s (seq coll)]\n                   (if (elts (first coll))\n                     (dist elts (rest coll))\n                     (cons (first coll)\n                           (dist (conj elts (first coll))\n                                 (rest coll)))))))]\n    (dist #{} coll)))", "user": "575cbe44e4b02ea114799374"}, {"problem": 56, "code": "(fn remdupl [y] (reduce (fn [s e] (if (some #(= % e) s) s (conj s e))) [] y))", "user": "574ed2f7e4b02ea11479924a"}, {"problem": 56, "code": "#(loop [vec-coll (vec %) i (dec (count vec-coll))]\n   (let [next-vec (vec (if (contains? (set (subvec vec-coll 0 i)) (nth vec-coll i))\n                         (concat (subvec vec-coll 0 i) (subvec vec-coll (inc i) (count vec-coll))) vec-coll))]\n     (if (= i 1) next-vec (recur next-vec (dec i)))))", "user": "5751f2a2e4b02ea114799292"}, {"problem": 56, "code": "#(loop [s % known #{} result []]\n   (let [f (first s) r (rest s)\n         updatedResult (if (contains? known f) result (conj result f))]\n     (if-not (seq r)\n       updatedResult\n       (recur r (conj known f) updatedResult)))\n   )", "user": "573107d5e4b0cd1946bd0fbc"}, {"problem": 56, "code": "#(sort-by (fn [i] (.indexOf % i)) (keys (group-by identity %)))", "user": "57275898e4b0c5bde472c13e"}, {"problem": 56, "code": "(fn [coll] (sort-by (fn [i] (.indexOf coll i)) (map first (group-by identity coll))))", "user": "575ef4b6e4b08062f99a4e78"}, {"problem": 56, "code": "(fn [coll]\n   (let [step (fn step [xs seen]\n                (lazy-seq\n                  ((fn [[f :as xs] seen]\n                     (when-let [s (seq xs)]\n                       (if (contains? seen f)\n                         (recur (rest s) seen)\n                         (cons f (step (rest s) (conj seen f))))))\n                   xs seen)))]\n     (step coll #{})))", "user": "5756f7d7e4b02ea1147992e9"}, {"problem": 56, "code": "reduce (fn [s v] (if (some #(= % v) s) s (conj s v))) []", "user": "57609d91e4b08062f99a4e9b"}, {"problem": 56, "code": "(fn distinct-items [items]\n  (reduce (fn [x y] (if (nil? (some (fn [z] (= y z)) x)) (conj x y)\n                        x)) [] items))", "user": "5731e36be4b0cd1946bd0fc9"}, {"problem": 56, "code": "#(reduce (fn [a e] (if (= -1 (.indexOf a e)) (conj a e) a)) [] %)", "user": "57642916e4b0994c1922fbee"}, {"problem": 56, "code": "#(loop [col %\n             res []\n             found #{}]\n        (if (empty? col)\n          res\n          (let [nres (if (some #{(first col)} found)\n                       res\n                       (conj res (first col)))]\n          (recur (rest col) nres (conj found (first col))))))", "user": "575fbe58e4b08062f99a4e87"}, {"problem": 56, "code": "(fn [v] (vec (apply sorted-set-by #(< (.indexOf v %1) (.indexOf v %2)) v)))", "user": "574a546ee4b02ea1147991f6"}, {"problem": 56, "code": ";; zipmap reversed vector with range to create \"first index of appearing\".\n;; from there, invert the map (values are unique), sort it by new key, extract just values, and reverse (indexes are inverted because of first zipmap\n\n(fn __ [x](reverse (map val (into (sorted-map) (clojure.set/map-invert(zipmap (reverse x) (range)))))))", "user": "575dda55e4b02ea11479938c"}, {"problem": 56, "code": "(fn [coll]\n\t(letfn [(not-in? [val s] (not-any? #(= val %) s))]\n\t\t(reduce #(if (not-in? %2 %) (conj % %2) %) [] coll)))", "user": "572ec4dde4b0cd1946bd0f8d"}, {"problem": 56, "code": "(fn k-distinct\n  [coll]\n  (let [check? (fn [coll v] ((into #{} coll) v))]\n    (->> coll\n         (reduce (fn [acc v]\n                   (if (check? acc v)\n                     acc\n                     (conj acc v)))\n                 (empty coll))\n         (into (empty coll)))))", "user": "5256c4c1e4b0541d1855ba36"}, {"problem": 56, "code": "(fn [s]\n  (reduce\n   \t (fn [c n]\n       \t(cond\n         \t(some #(= n %1) c) c\n         \t:else (conj c n)))\n     []\n     s))", "user": "561d506ee4b064ca9f4b16aa"}, {"problem": 56, "code": "(fn [coll]\n  (loop [x coll r []]\n    (cond\n     (empty? x) r\n     (some #(= (first x) %) r) (recur (rest x) r)\n     :else (recur (rest x) (conj r (first x))))))", "user": "574abbfbe4b02ea114799200"}, {"problem": 56, "code": "(fn f\n ([x] (f x []))\n ([x y]\n  (if (= 0 (count x))\n   y\n   (if (some #(= (first x) %) y)\n    (f (rest x) y)\n    (f (rest x) (conj y (first x)))\n   )\n  )\n )\n)", "user": "54283a7ae4b01498b1a71b2f"}, {"problem": 56, "code": "(fn my-distinct\n  [coll]\n  (loop [[current & remaining] coll\n         seen #{}\n         result []]\n    (cond (nil? current) result\n          (seen current) (recur remaining seen result)\n          :else (recur remaining (conj seen current) (conj result current)))))", "user": "52ea025ae4b09f7907dd14b5"}, {"problem": 56, "code": "#(loop [a % rset #{} result []]\n    (if (empty? a)\n      result\n      (let [v (first a)]\n        (if (rset v)\n          (recur (rest a) rset result)\n          (recur (rest a) (conj rset v) (conj result v))\n          )\n        )\n      )\n    )", "user": "5763818ae4b0994c1922fbc7"}, {"problem": 56, "code": ";(fn dist [c]\n;  (loop [c c o [] x #{}]\n;    (if (empty? c)\n;      o\n;      (recur (rest c) \n;             (if (contains? x (first c))\n;               o\n;               (conj o (first c)))\n;             (conj x (first c))))))\n\n(partial reduce (fn [c v]\n                 (if (get (set c) v)\n                   c\n                   (conj c v)))\n         [])", "user": "57533bc1e4b02ea1147992a6"}, {"problem": 56, "code": "(fn [s]\n  (second (reduce\n   (fn [[known-set distinct-v :as reduction] n]\n     (if (contains? known-set n)\n       reduction\n       [(conj known-set n)\n        (conj distinct-v n)]))\n   [#{} []] s)))", "user": "576da825e4b0979f8965156c"}, {"problem": 56, "code": "(fn [s]\n  (loop [remaining s v []]\n    (if (empty? remaining)\n      v\n      (recur (filter #(not= (first remaining) %) remaining) (conj v (first remaining))))))", "user": "55aaa36fe4b0988bba2ad94f"}, {"problem": 56, "code": "(fn [alist]\n  ((fn [x y]\n    (cond\n      (empty? x) y\n      (some #(= % (first x)) y) (recur (rest x) y)\n      (not (some #(= % (first x)) y)) (recur (rest x) (conj y (first x))))) alist []))", "user": "5705e404e4b0b0fb43fd0676"}, {"problem": 56, "code": "(fn [xs]                                                                                                     \n  (loop [x xs res []]                                                                                                   \n    (let [fx (first x)]                                                                                                 \n    (if (empty? x)                                                                                                      \n      res                                                                                                               \n      (if (some #(= fx %) res)                                                                                          \n        (recur (rest x) res)                                                                                            \n        (recur (rest x) (conj res (first x))))))))", "user": "56d91a53e4b0ea9b8538f7ee"}, {"problem": 56, "code": "#(reduce (fn [s x]\n                 (if (some (set s) [x])\n                   s (conj s x)))\n               [] %)", "user": "575b3e9be4b02ea11479935b"}, {"problem": 56, "code": "#(->> (map first (group-by identity %)) (sort-by (partial (memfn indexOf _) %)))", "user": "56f974c0e4b07572ad1a88b1"}, {"problem": 56, "code": "(fn [s]\n  (let [distc (keys (frequencies s))]\n    (if (= (count s) (count distc)) s distc)))", "user": "53b4bddae4b047364c0444b9"}, {"problem": 56, "code": "#(reduce (fn [a x] (if (some (partial = x) a) a (conj a x))) [] %)", "user": "53e9dce1e4b036ad0777e4bc"}, {"problem": 56, "code": "#(reduce \n  (fn [accum x] \n    (if (>= (.indexOf accum x) 0) \n      accum \n      (conj accum x))) \n  [] %)", "user": "5764cc01e4b0994c1922fc05"}, {"problem": 56, "code": "(fn m [[x & xs]]\n  (cond\n   (= xs nil) [x]\n   (some #(= x %) xs) (m(cons x(filter #(not(= x %)) xs)))\n   (not(some #(= x %) xs)) (cons x(m xs)) ))", "user": "57752a2de4b0979f89651613"}, {"problem": 56, "code": "reduce #(if (contains? (set %1) %2) %1 (conj %1 %2)) []", "user": "577202d2e4b0979f896515c0"}, {"problem": 56, "code": "(fn [xs]\n   (let [remove-dups (fn [xs used acc]\n                       (if (empty? xs) (reverse acc)\n                         (recur (rest xs) (conj used (first xs)) (if (nil? (used (first xs))) (cons (first xs) acc) acc))))]\n     (remove-dups xs #{} '())))", "user": "57780e4fe4b0979f89651657"}, {"problem": 56, "code": "(fn [coll] (reduce (fn [coll x] (if (some #(= x %) coll) coll (conj coll x))) [] coll))", "user": "5272645de4b03e8d9a4a742c"}, {"problem": 56, "code": "(fn \n  [s]\n  (loop [l s n [] i (frequencies s)]\n    (if (empty? l)\n      n\n      (if (= (get i (first l)) 0)\n        (recur (rest l) n i)\n        (recur (rest l) (conj n (first l)) (assoc i (first l) 0))))))", "user": "5772ddb0e4b0979f896515d4"}, {"problem": 56, "code": "(fn [coll]\n  (first (reduce (fn [[out dup] x] (if (dup x) [out dup] [(conj out x) (conj dup x)]))\n          [[] #{}]\n          coll)))", "user": "5764457ae4b0994c1922fbf3"}, {"problem": 56, "code": "(fn [coll] \n  (let [step (fn step [xs seen] \n               (lazy-seq \n                ((fn [[f :as xs] seen] \n                   (when-let [s (seq xs)] \n                     (if (contains? seen f) \n                       (recur (rest s) seen) \n                       (cons f (step (rest s) (conj seen f)))))) \n                 xs seen)))] \n\n    (step coll #{})\n    )\n  )", "user": "57750460e4b0979f8965160c"}, {"problem": 56, "code": "reduce (fn [s e]\n         (if (some #(= % e) s)\n           s\n           (conj s e))) []", "user": "57822efce4b0d36ec5835e91"}, {"problem": 56, "code": "(fn [s]\n  (mapcat #(keys (group-by identity %)) (partition-all 32 s)))", "user": "5776f39de4b0979f89651643"}, {"problem": 56, "code": "#(reduce (fn [p n] (if (some #{n} p) p (conj p n)))\n         [] %1)", "user": "57614948e4b0994c1922fb83"}, {"problem": 56, "code": "(fn rm-dups [xs]\n  (reduce\n    (fn [acc ele]\n      (if (some #{ele} acc)\n          acc\n          (conj acc ele)))\n    []\n    xs))\n\n#_(fn rem-dups-2 [xs]\n  (reduce (fn [acc ele]\n            (if (contains? (set acc) ele)\n              acc\n              (concat acc [ele])))\n          () xs))", "user": "561d8936e4b064ca9f4b16b2"}, {"problem": 56, "code": "(fn distinct-same-order\n  [coll]\n  (reduce (fn [init x]\n            (if (some #{x} init )\n              init\n              (conj init x)))\n          []\n          coll))", "user": "5746cb28e4b009280f9f2b68"}, {"problem": 56, "code": "(fn my-distinct [s]\n    (second\n     (reduce (fn [[seen? acc] e]\n               (if (seen? e)\n                 [seen? acc]\n                 [(conj seen? e) (conj acc e)]))\n             [#{} []] s)))", "user": "4dfe5a93535d04ed9115e786"}, {"problem": 56, "code": "#(loop [seq %\n        s #{}\n        acc []]\n   (if (empty? seq)\n     acc\n     (if (s (first seq))\n       (recur (rest seq) s acc)\n       (recur (rest seq) (conj s (first seq)) (conj acc (first seq))))))", "user": "57155980e4b07c98581c3ad7"}, {"problem": 56, "code": "reduce\n  (fn [xs x]\n    (if ((set xs) x)\n      xs\n      (conj xs x)))\n  []", "user": "57487084e4b009280f9f2b8c"}, {"problem": 56, "code": "#(reduce (fn [a v] (if (some (partial = v) a) a (conj a v))) [] %)", "user": "577832f4e4b0979f8965165b"}, {"problem": 56, "code": "(fn [col]\n  (reduce (fn [xs item] (if (some #(= item %1) xs) xs (conj xs item)))\n          [] col))", "user": "5785de4ce4b0ebec4cfb74e6"}, {"problem": 56, "code": "(fn [v]\n  (letfn [(step-fn [coll seen]\n            (lazy-seq\n                      (when-let [s (seq coll)]\n                        (let [f (first s)]\n                          (if (contains? seen f)\n                            (step-fn (rest s) seen)\n                            (cons f (step-fn (rest s) (conj seen f))))))))]\n    (step-fn v #{})))", "user": "578d230fe4b0ebec4cfb7564"}, {"problem": 56, "code": "(fn [coll]\n  (loop [result [] coll coll]\n    (if (empty? coll)\n      result\n      (recur (conj result (first coll)) (remove #(= (first coll) %) (rest coll) ))\n      )\n    )\n  )", "user": "5776558ee4b0979f89651633"}, {"problem": 56, "code": "(fn [v]\n  (letfn [(step-fn [col seen]\n     (when-let [s (seq col)]\n       (let [elem (first s)]\n       (if (contains? seen elem)\n         (step-fn (rest col) seen)\n         (cons elem (lazy-seq (step-fn (rest col) (conj seen elem))))))))]\n  (step-fn v #{}))\n  )", "user": "57934c67e4b0e215f87e8456"}, {"problem": 56, "code": "(fn [lst]\n  (reduce (fn [acc el]\n            (if (some #(= el %) acc) acc (conj acc el)))\n          []\n          lst))", "user": "55ede35ce4b0121d4835fde1"}, {"problem": 56, "code": "reduce (fn [ret x] (if (some #(= x %) ret) ret (conj ret x))) []", "user": "572ac718e4b0f4d77e651242"}, {"problem": 56, "code": "(fn [s]\n(reduce (fn [res e]\n           (if (some #(= % e) res)\n             res\n             (conj res e)))\n         []\n         s))", "user": "578cf84ce4b0ebec4cfb7562"}, {"problem": 56, "code": "#(reduce (fn [x y] (if (some (hash-set y) x) x (conj x y))) [] %)", "user": "578b140be4b0ebec4cfb7545"}, {"problem": 56, "code": ";; First solution\n;(fn __ [xs]\n;  (loop [acc [] \n;         [x & more] xs]\n;    (if (nil? x)\n;      acc\n;      (if (some #{x} acc)\n;        (recur acc more)\n;        (recur (conj acc x) more)))))\n\n(fn [xs]\n  (letfn [(conj-if-new [coll x] \n                       (if ((set coll) x) \n                         coll\n                         (conj coll x)))]\n    (reduce conj-if-new [] xs)))", "user": "573118ebe4b0cd1946bd0fbd"}, {"problem": 56, "code": "(fn DISTINCT [col]\n  (let [f-seen (fn [result e]\n                 (if (.contains result e)\n                   result\n                   (conj result e)))]\n    (reduce f-seen [] col)))", "user": "570ab24fe4b0b0fb43fd06b7"}, {"problem": 56, "code": "(fn [s]\n  (reduce (fn [acc curr]\n            (if (some #(= % curr) acc)\n              acc\n              (conj acc curr))) [] s))", "user": "576a972ce4b0a07e8fc1811a"}, {"problem": 56, "code": "(fn dist [[x & xs]] (if x (cons x (dist (filter #(not= x %) xs)))))", "user": "57915ba4e4b0ebec4cfb75ba"}, {"problem": 56, "code": ";(fn dist [c]\n;  (loop [c c o [] x #{}]\n;    (if (empty? c)\n;      o\n;      (recur (rest c) \n;             (if (contains? x (first c))\n;               o\n;               (conj o (first c)))\n;             (conj x (first c))))))\n\n(partial reduce (fn [c v]\n                 (if (get (set c) v)\n                   c\n                   (conj c v)))\n         [])", "user": "5798205ce4b039eba2ecb10e"}, {"problem": 56, "code": "(fn f\n   ([x] (f x [])) \n   ([x res]\n    (if (empty? x)\n      res\n      (if (.contains res (first x))\n        (f (rest x) res)\n        (f (rest x) (conj res (first x)))))))", "user": "578fc072e4b0ebec4cfb759a"}, {"problem": 56, "code": ";(fn dist [c]\n;  (loop [c c o [] x #{}]\n;    (if (empty? c)\n;      o\n;      (recur (rest c) \n;             (if (contains? x (first c))\n;               o\n;               (conj o (first c)))\n;             (conj x (first c))))))\n\n(partial reduce (fn [c v]\n                 (if (get (set c) v)\n                   c\n                   (conj c v)))\n         [])", "user": "57982bace4b039eba2ecb10f"}, {"problem": 56, "code": "(fn [s]\n  (letfn [(collect [seen col]\n                   (when (seq col)\n                     (let [i (first col)]\n                   \t\t(if (some #{i} seen)\n                          (collect seen (rest col))\n                          (cons i (collect (conj seen i) (rest col)))))))\n          ]\n    (collect #{} s)))", "user": "579c8ad1e4b05b1deef9ae0c"}, {"problem": 56, "code": "(fn bla [arg1]\n  (reverse (loop [x arg1 res '() resset #{}] \n             (if (empty? x) \n                 res \n                 (let [e (first x) r (rest x)] \n                      (if-not (some #{e} resset) \n                        (recur r (conj res e) (conj resset e))\n                        (recur r res resset))\n                      )))))", "user": "4f035fbe535dcb61093f6a92"}, {"problem": 56, "code": "(fn d\n  ([l] (d l #{} []))\n  ([[f & r :as l] s a]\n      (cond\n        (empty? l) a\n        (contains? s f)\n          (d r s a)\n        :e\n          (d r (conj s f) (conj a f)))))", "user": "50e5bca5e4b09ae9427b0e75"}, {"problem": 56, "code": "#(loop [ans [] pend % ]\n\t(if (empty? pend)\n\t\tans\n\t\t(let [part (first pend)]\n\t\t\t(if (.contains ans part)\n\t\t\t\t(recur ans (rest pend))\n\t\t\t\t(recur (concat ans [part]) (rest pend))))))", "user": "57986b76e4b039eba2ecb116"}, {"problem": 56, "code": "(fn f\n  [t r s]\n  (if-let [a (first s)]\n    (if (t a)\n      (recur t r (rest s))\n      (recur (conj t a) (conj r a) (rest s)))\n    r)) #{} []", "user": "55478ce2e4b0a04f7929954e"}, {"problem": 56, "code": "(fn [coll]\n  (loop [acc coll result []]\n    (if (empty? acc)\n      result\n      (recur (rest acc)\n             (if (some #{(first acc)} result)\n               result\n               (conj result (first acc)))))))", "user": "57147cd9e4b07c98581c3abf"}, {"problem": 56, "code": "(fn [coll]\n  (loop [s #{}, c coll, res []]\n    (cond (empty? c) res\n          (contains? s (first c)) (recur s (rest c) res)\n          :else (recur (conj s (first c)) (rest c) (conj res (first c))))))", "user": "577c3da9e4b0c8d87281f6b9"}, {"problem": 56, "code": "(fn [xs]\n  (reduce\n    (fn [coll now]\n      (if\n        (some #{now} coll)\n        coll\n        (conj coll now)))\n      [] xs))", "user": "57717915e4b0979f896515b3"}, {"problem": 56, "code": "reduce #(if (.contains %1 %2) %1 (conj %1 %2)) []", "user": "579e15a6e4b05b1deef9ae20"}, {"problem": 56, "code": "(fn [v] (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] v))", "user": "576d398be4b0979f8965155d"}, {"problem": 56, "code": "#(let[l (group-by identity (into[] %))] (if (= (count %) (count l)) % (keys l)))", "user": "56e6e1e6e4b02e7e935eb6cf"}, {"problem": 56, "code": "(fn func [listy]\n  (reduce #(if (some #{%2} %1)\n            %1\n            (conj (vec %1) %2))\n          [] listy))\n\n;other cool solution:\n;#(sort-by (fn [i] (.indexOf % i)) (map first (group-by identity %)))", "user": "54ce541de4b057c6fda3a2ac"}, {"problem": 56, "code": "(fn [xs]\n  (loop [acc      []\n         dict     #{}\n         [x & xs] xs]\n    (if x\n      (if (dict x)\n        (recur acc dict xs)\n        (recur (conj acc x) (conj dict x) xs))\n      acc)))", "user": "57a4bb65e4b0a966079561eb"}, {"problem": 56, "code": "(partial reduce #(if (.contains %1 %2) %1\n                     (conj %1 %2))\n                   [])", "user": "576b4e6be4b0a07e8fc1812b"}, {"problem": 56, "code": "(fn [sq]\n  (loop [acc []\n         sq sq]\n    (if (empty? sq)\n      acc\n      (recur (if ((fn [a] (some #(= a %) acc)) (first sq)) acc (conj acc (first sq)))\n             (rest sq)))))", "user": "56903cb9e4b0dcc4269f40eb"}, {"problem": 56, "code": "(fn [coll]\n  (loop [ret [] i 0]\n    (if (< i (count coll))\n      (let [item (nth coll i)]\n        (if  (> (.indexOf ret item) -1)\n          (recur ret (inc i))\n          (recur (conj ret item) (inc i))\n          )\n        )\n      ret)))", "user": "579601c8e4b0e215f87e8492"}, {"problem": 56, "code": "#(first\n  (reduce (fn [[uniques seen :as acc] x]\n           (if (seen x)\n             acc\n             [(conj uniques x) (conj seen x)]))\n         [[] #{}]\n         %))", "user": "505345d9e4b0517ede0d0a06"}, {"problem": 56, "code": "reduce \n #(if (contains? (zipmap %1 %1) %2)\n    %1\n    (conj %1 %2)) []", "user": "532dbd3ce4b019098a6f8b40"}, {"problem": 56, "code": "(fn my-distinct\n  ([col] (my-distinct col #{}))\n  ([col pred]\n   (println col pred)\n   (filter #(not (nil? %)) \n           (lazy-seq\n            (when-let [s (seq col)]\n              (cons (when-not (contains? pred (first s)) (first s))\n                    (my-distinct (rest s) (into pred [(first s)])))))))\n\n  )", "user": "569f4dabe4b0542e1f8d1491"}, {"problem": 56, "code": "#(reduce (fn [v i]\n           (if (= -1 (.indexOf v i))\n             (conj v i)\n             v))\n         [(first %)] (rest %))", "user": "57a9e274e4b0b8559636fc5d"}, {"problem": 56, "code": "(fn [s]\n  (reduce (fn [acc e]\n            (if (some #(= % e) acc)\n              acc\n              (conj acc e)))\n          []\n          s))", "user": "57aa4775e4b0b8559636fc6b"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "56349008e4b0bfe05bf117bd"}, {"problem": 56, "code": "#(->> %\n      (map-indexed (fn [idx it] [idx it]))\n      (group-by second)\n      (vals)\n      (map first)\n      (sort-by first)\n      (map second))", "user": "57adbe7ee4b0b8559636fca0"}, {"problem": 56, "code": "(fn [coll] ;modified from source of distinct \n   (let [step (fn step [xs seen]\n                (lazy-seq\n                  ((fn [[f :as xs] seen]\n                     (when-let [s (seq xs)]\n                       (if (contains? seen f)\n                         (recur (rest s) seen)\n                         (cons f (step (rest s) (conj seen f))))))\n                   xs seen)))]\n     (step coll #{})))", "user": "579d9601e4b05b1deef9ae18"}, {"problem": 56, "code": "(fn [coll]\n  (loop [coll coll\n         acc []]\n   (cond\n     (empty? coll) acc\n     (some #(= (first coll) %) acc) (recur (rest coll) acc)\n     :else (recur (rest coll) (conj acc (first coll))))))", "user": "530e75d5e4b08068f379ecba"}, {"problem": 56, "code": "(fn [xs]\n  (second (reduce (fn [[s v] x] (if (s x) [s v] [(conj s x) (conj v x)])) [#{} []] xs)))", "user": "5799ff45e4b05b1deef9add1"}, {"problem": 56, "code": "(fn [xs]\n    (reduce\n      (fn [l x]\n        (if\n          (some\n            (fn [v]\n              (= v x)\n            )\n            l\n          )\n          l\n          (conj l x)\n        )\n      )\n      []\n      xs\n    )\n  )", "user": "5784e177e4b0ebec4cfb74cf"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "57b13adae4b0fbc9809a2750"}, {"problem": 56, "code": "(fn f ([v] (f v #{}))\n        ([v s] (if (= 1 (count v))\n               (if (contains? s (first v)) '() (cons (first v) '()))\n               (if (contains? s (first v)) (f (rest v) s) (cons (first v) (f (rest v) (set (cons (first v) s))))))))", "user": "4e5e9f6b535d8a8b8723a2d2"}, {"problem": 56, "code": "#(loop [[f & r] % fltr #{f} res [f]]\n  (if f\n    (recur r (conj fltr f) (if (fltr f) res (conj res f)))\n    res))", "user": "57b3efb1e4b0fbc9809a278a"}, {"problem": 56, "code": "(fn [coll]\n  (letfn [(worker [acc value-set collection]\n            (if (empty? collection)\n              acc\n              (let [head (first collection)]\n                (if (value-set head)\n                  (worker acc value-set (rest collection))\n                  (worker (conj acc head) (conj value-set head) (rest collection))))))]\n    (worker [] #{} coll)))", "user": "57a0f256e4b0c3d858beb8dd"}, {"problem": 56, "code": "(fn dedup \n  ([s] (dedup s []))\n  ([s res]\n   (cond (empty? s) res\n         (> (.indexOf res (first s)) -1) (dedup (rest s) res)\n         :else (dedup (rest s) (conj res (first s))))))", "user": "57af41bce4b0fbc9809a2731"}, {"problem": 56, "code": "(fn [col]\n    (let [luniq  (fn lfreq [col res seen]\n                   (cond\n                     (empty? col) res\n                     (contains? seen (first col)) (recur (rest col) res seen)\n                     :else (recur (rest col) (conj res (first col)) (conj seen (first col)))))] \n      (luniq col [] #{}))\n    )", "user": "57aa290de4b0b8559636fc65"}, {"problem": 56, "code": "(fn f [i [h & t]] (if (nil? h) i (f `[~@i ~h] (remove #{h} t)))) []", "user": "548b7db8e4b0e286459a11fd"}, {"problem": 56, "code": "(fn foo [x] \n  (let [bar (fn baz [x r] \n              (if (empty? x) r \n                (let [f (first x) rs (rest x) b (contains? (set r) f)]\n                  (if b \n                    (baz rs r) \n                    (baz rs (conj r f))\n                    )\n                  )\n                \n                )\n              )] (bar x []))\n  )", "user": "57b8b008e4b0fbc9809a27e6"}, {"problem": 56, "code": "#(loop [x % y [] v #{}]\n   (if (empty? x)\n     y\n     (if (v (first x))\n       (recur (next x) y v)\n       (recur (next x) (conj y (first x)) (conj v (first x)))\n     )\n   )\n )", "user": "57873017e4b0ebec4cfb7503"}, {"problem": 56, "code": "(fn [x] (reverse \n         (reduce \n          (fn [unique y] \n            (if (some #{y} unique) unique\n\t\t\t\t\t\t\t\t   (cons y unique))) \n          '() x)))", "user": "4e9ff8d0535d7eef3080729c"}, {"problem": 56, "code": "(fn my-distinct [coll]\n  (loop [remaining coll,\n         result []]\n    (if (empty? remaining)\n      result\n      (recur (rest remaining)\n             (if (some #(= (first remaining) %) result)\n               result\n               (conj result (first remaining)))))))", "user": "57b99d48e4b0fbc9809a27f2"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "57b3046de4b0fbc9809a276d"}, {"problem": 56, "code": "(fn [ls]\n  (loop [seen #{}\n         acc []\n         left ls]\n    (cond\n     (empty? left) acc\n     (contains? seen (first left)) (recur seen acc (rest left))\n     :else (recur (conj seen (first left)) (conj acc (first left)) (rest left))\n     )))", "user": "516064e5e4b009fba0926e26"}, {"problem": 56, "code": "(fn\n  [r i]\n  (if (empty? i)\n    r\n    (let [c (first i)]\n         (recur\n           (conj r c)\n           (filter (partial not= c) (rest i)))))) []", "user": "57b1b8c8e4b0fbc9809a2756"}, {"problem": 56, "code": "#(reduce (fn [counter x]\n           (if (= (.indexOf counter x) -1)\n            (conj counter x)\n            counter))\n         [] %)", "user": "57a1ef58e4b0c3d858beb8f3"}, {"problem": 56, "code": "(fn [coll]\n  (reduce (fn [memo x] (if (contains? (set memo) x) memo (conj memo x))) [] coll))", "user": "577bf999e4b0d3393e5deb2c"}, {"problem": 56, "code": "(fn [s]\n  (loop [s s r '()]\n    (if (empty? s)\n      (into (empty s) r)\n      (if-not (some (hash-set (first s)) r)\n      \t(recur (rest s) (conj r (first s)))\n        (recur (rest s) r) ) ) ) )", "user": "4fc34787e4b081705acca33e"}, {"problem": 56, "code": "(fn my-distinct [coll]\n\t(if (empty? coll)\n\t\t'()\n\t\t(cons (first coll) (my-distinct (remove #(= % (first coll)) coll)))))", "user": "57c0917be4b05aa3c4741c95"}, {"problem": 56, "code": "(fn [x] (reduce #(if (contains? (set %1) %2) %1 (conj %1 %2)) [] x))", "user": "5167e8ace4b0c5a4140a309a"}, {"problem": 56, "code": "(fn [coll]\n  (let [f (fn [[uniq coll] x]\n            (if (contains? uniq x)\n              [uniq coll]\n              [(conj uniq x) (concat coll [x])]))]\n\n    (second\n     (reduce f [#{} nil] coll))))", "user": "56eab346e4b04a395b9a0410"}, {"problem": 56, "code": "(fn [x] (reduce #(cond (some (fn [a] (= a %2)) %1) %1 :else (conj %1 %2)) [] x))", "user": "57c3451fe4b05aa3c4741cbd"}, {"problem": 56, "code": "(fn my-dedup [s]\n\t(loop [[a & coll] s\n\t\t\tstate {}\n\t\t\tresult []]\n\t\t(if (nil? a)\n\t\t\tresult\n\t\t\t(if (contains? state a)\n\t\t\t\t(recur coll state result)\n\t\t\t\t(recur coll (assoc state a a) (conj result a))\n\t\t\t)\n\t\t)\n\t)\n)", "user": "57a9db97e4b0b8559636fc5b"}, {"problem": 56, "code": "#(reduce (fn[a b] (if (reduce (fn [c d] (or (= b d) c)) false a) a (conj a b))) [] %)", "user": "57b35a19e4b0fbc9809a277d"}, {"problem": 56, "code": "(fn test [coll]\n  (reduce (fn [acc x]\n            (if (some #{x} acc)\n              acc\n              (concat acc (list x))))\n          []\n          coll))", "user": "579332c2e4b0e215f87e8452"}, {"problem": 56, "code": "reduce #(if (contains? (set %1) %2) %1 (conj %1 %2)) []", "user": "57395f32e4b0cd1946bd1070"}, {"problem": 56, "code": "(fn[l]\n    (second\n        (reduce \n            #(if \n                ((first %1) %2)\n                %1 \n                (map (fn[a] (conj a %2)) %1))\n            [#{} []]\n            l)))", "user": "57b9fc74e4b0fbc9809a27fb"}, {"problem": 56, "code": "#(loop [coll %\n        new-coll []]\n   (if (empty? coll)\n     new-coll\n     (let [elm (first coll)]\n       (recur (rest coll) (if (not (some #{elm} new-coll))\n                          (conj new-coll elm)\n                          new-coll)))))", "user": "57c0393be4b05aa3c4741c90"}, {"problem": 56, "code": "reduce (fn [a b](if ((set a) b) a (conj a b))) []", "user": "57bd960fe4b05aa3c4741c52"}, {"problem": 56, "code": "(fn distinct-1 [coll]\n\t(loop [remaining-coll coll result []]\n\t\t(if (empty? remaining-coll)\n\t\t\tresult\n\t\t\t(recur (filter #(not= % (first remaining-coll)) remaining-coll) (conj result (first remaining-coll))))))", "user": "5227eacee4b0186687e23a5e"}, {"problem": 56, "code": "(fn [x](loop\n  [in x out []]\n  (if (> (count in) 0)\n  (if (.contains out (first in))\n    (recur (rest in) out)\n    (recur (rest in) (conj out (first in))))\n  out)))", "user": "574eb3b1e4b02ea114799247"}, {"problem": 56, "code": "reduce (fn [x y] (if (some #(= y %) x) x (conj x y))) []", "user": "57c7a8b5e4b05aa3c4741d09"}, {"problem": 56, "code": "(fn [coll] (reduce #(if (not-any? (partial = %2) %1) (conj %1 %2) %1) [] coll))", "user": "57625c18e4b0994c1922fba4"}, {"problem": 56, "code": "#(:vec (reduce (fn [dist e]\n           (if (not (contains? (:set dist) e))\n             {:set (conj (:set dist) e)\n              :vec (conj (:vec dist) e)}\n             dist))\n         {:set #{}\n          :vec []}\n         %))", "user": "57c45e64e4b05aa3c4741ccf"}, {"problem": 56, "code": "#(reduce\n  (fn [acc x]\n    (if-let [found (some (fn [y] (= y x)) acc)]\n      acc\n      (conj acc x)))\n  [] %)", "user": "56cf115de4b0ea9b8538f765"}, {"problem": 56, "code": "(fn remdups [lst]\n  (case (count lst)\n    0 []\n    1 lst\n  \t(cons (first lst) (remdups (remove #(= (first lst) %) (rest lst))))\n   )\n )", "user": "57cf03c0e4b00451144b04f9"}, {"problem": 56, "code": "(fn u [s]\n  (reduce (fn [l e]\n            (if (some #{e} l)\n              l\n              (conj l e)))\n          [] s))", "user": "57a0b341e4b0c3d858beb8d4"}, {"problem": 56, "code": "(fn [xs]\n    (loop [current xs slim [] covered #{}]\n          (if (empty? current)\n              slim\n            (let [f (first current) r (rest current)]\n                   (if (contains? covered f)\n                       (recur r slim covered)\n                     (recur r (conj slim f) (conj covered f)))))))", "user": "57c6aa0be4b05aa3c4741cf7"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5790f9d7e4b0ebec4cfb75b4"}, {"problem": 56, "code": "(fn my-distinct\n   ([s] (my-distinct s {} []))\n   ([s distinct-map distinct-s]\n    (if (empty? s)\n      distinct-s\n      (let [next-elem (first s)]\n        (if-not (contains? distinct-map next-elem)\n          (my-distinct\n           (rest s)\n           (assoc distinct-map next-elem 1)\n           (conj distinct-s next-elem))\n          (my-distinct\n           (rest s)\n           distinct-map\n           distinct-s))))))", "user": "552d487ee4b076ab5578f7e4"}, {"problem": 56, "code": "(fn [m] (reduce (fn [xs x] \n                  (if (some #(= % x) xs)\n                    xs\n                    (conj xs x)))\n                []\n                m))", "user": "57c94c6ee4b05aa3c4741d2d"}, {"problem": 56, "code": "(fn [c] (reduce #(if (contains? (set %1) %2) %1 (conj %1 %2)) [] c))", "user": "57c7e7d9e4b05aa3c4741d0f"}, {"problem": 56, "code": "(fn distinct-items\n  [c]\n  (let [result {:set #{} :vector []}]\n    (:vector (reduce (fn[r val]\n                (if (some #{val}(:set r))\n                  r\n                  {:set (conj (:set r) val) :vector (conj (:vector r) val)}))\n              result c))))", "user": "57d0cd58e4b0bd073c20235e"}, {"problem": 56, "code": "(fn dist [x]\n  (let [d (fn [x n] ; drop-nth\n            (let [v (vec x)\n                  c (count v)]\n              (concat \n                (subvec v 0 n) \n                (subvec v (inc n) c))))\n        f (fn anon [s i v]\n            (if (>= i (count v)) v\n              (let [n (nth v i)]\n                (if (contains? s n)\n                  (anon s i (vec (d v i)))\n                  (anon (conj s n) (inc i) v)))))]\n   (seq (f #{} 0 (vec x)))))", "user": "57d1d6c8e4b0bd073c202370"}, {"problem": 56, "code": "(fn [s]\n  (reduce (fn [acc x] (if (some #(= x %) acc) acc (conj acc x))) [] s))", "user": "57cd7498e4b0c746388ab897"}, {"problem": 56, "code": "(fn dist \n  ([coll] (dist coll #{} [] ))\n  ([coll seen ret]\n    (if (empty? coll)\n      ret\n      (let [[val & rest] coll]\n        (if (contains? seen val)\n          (recur rest seen ret)\n          (recur rest (conj seen val) (conj ret val)))))))", "user": "4f4aa932e4b0d56e7bb92c14"}, {"problem": 56, "code": "(fn [items]\n  (loop [items items current #{} result []]\n    (if (empty? items)\n      result\n      (let [item (first items) new? (not (contains? current item))]\n        (recur (rest items) \n               (if new? (conj current item) current)\n               (if new? (conj result item) result))))))", "user": "57d9bca1e4b0bd073c202405"}, {"problem": 56, "code": "(fn\n  [coll]\n  (loop [c coll\n         s (set c)\n         r []]\n    (if (or (empty? s) (empty? c))\n      r\n      (let [item (first c)]\n        (if (contains? s item)\n          (recur (rest c) (set (remove #{item} s)) (conj r item))\n          (recur (rest c) s r))))))", "user": "56bb652ae4b0f26550335953"}, {"problem": 56, "code": "reduce (fn [h c] \n         (if (not (some #(= c %) h))\n           (conj h c)\n           h)) []", "user": "5707abfce4b0b0fb43fd068d"}, {"problem": 56, "code": "(fn [l]\n  (loop [l l r []]\n    (cond \n      (empty? l) r\n      ((set r) (first l)) (recur (rest l) r)\n      :else (recur (rest l) (conj r (first l))))))", "user": "57d9f603e4b0bd073c20240a"}, {"problem": 56, "code": "(fn only-distinct [col]\n  (reduce (fn [xs item] (if (some #(= item %1) xs) xs (conj xs item)))\n          [] col))", "user": "57c500f9e4b05aa3c4741cda"}, {"problem": 56, "code": "reduce (fn [acc e] (if ((set acc) e) acc (conj acc e))) []", "user": "57e0f30ae4b0bfb2137f5a66"}, {"problem": 56, "code": "reduce #(if ((set %1) %2)  %1 (conj %1 %2)) []", "user": "57dd47f4e4b0bd073c20243e"}, {"problem": 56, "code": "reduce (fn [acc coll-item]\n            (if (some #(= % coll-item) acc)\n              acc\n              (conj acc coll-item))) []", "user": "5785c1d4e4b0ebec4cfb74e1"}, {"problem": 56, "code": "(fn\n    [-s]\n    (loop [s -s nw []]\n          (if (empty? s)\n              nw\n              (let [fir (first s)]\n                   (if (some #(= % fir) nw)\n                       (recur (rest s) nw)\n                       (recur (rest s) (conj nw fir)))))))", "user": "57e3f709e4b0bfb2137f5aaf"}, {"problem": 56, "code": ";This solution worked fine in lein repl but not online?!\n;(fn [xs]\n;  (vec (keys (zipmap xs (iterate inc 1)))))\n\nreduce #(if (not-any? (partial = %2) %1) (conj %1 %2) %1) []", "user": "57e139f6e4b0bfb2137f5a6c"}, {"problem": 56, "code": "(fn my-distinct [s] (sort-by #(.indexOf s %) (map #(first %) (group-by identity s))))", "user": "57b9d21fe4b0fbc9809a27f7"}, {"problem": 56, "code": "(fn [xs]\n  (loop [[x & xs] xs\n         acc []]\n    (if x\n      (if (some #{x} acc)\n        (recur xs acc)\n        (recur xs (conj acc x)))\n      acc)))", "user": "5705f569e4b0b0fb43fd0677"}, {"problem": 56, "code": "reduce (fn [s e]\n  (if (some #(= % e) s)\n    s\n    (conj s e)))\n[]", "user": "57df309ee4b0bd073c20245f"}, {"problem": 56, "code": "(fn [coll]\n   (loop [[e & re :as es] coll\n          known #{}\n          r []]\n     (cond\n       (empty? es) r\n       (contains? known e) (recur re known r)\n       :default (recur re (conj known e) (conj r e)))))", "user": "56f9c7c6e4b07572ad1a88ba"}, {"problem": 56, "code": "(fn [v]\n\t(reduce\n\t\t#(if (some #{%2} %) % (conj % %2))\n\t\t[]\n\t\tv))", "user": "57ccedaae4b0c746388ab88e"}, {"problem": 56, "code": "(fn bla \n\t([coll] (bla coll []))\n\t([coll out]\n\t\t(if-let [cur (first coll)]\n\t\t\t(recur (filterv #(not (= % cur)) coll) (conj out cur))\n\t\t\t(into (empty coll) out)\n\t\t)\n\t)\n)", "user": "57c99a45e4b05aa3c4741d31"}, {"problem": 56, "code": "#(reduce (fn [ds e] (if (some #{e} ds) ds (conj ds e))) [] %)", "user": "57ee804ee4b0bfb2137f5bbb"}, {"problem": 56, "code": "#(reduce (fn [x y] (if (some #{y} x) x (conj x y))) [] %)", "user": "57ec3d29e4b0bfb2137f5b77"}, {"problem": 56, "code": "(fn [s]\n  (reduce #(if (some (partial = %2) %1) %1 (conj %1 %2)) [] s))", "user": "52761edae4b03e8d9a4a74d4"}, {"problem": 56, "code": "(fn [col] (sort-by #(.indexOf col %) (keys (group-by identity col))))", "user": "576df252e4b0979f8965156f"}, {"problem": 56, "code": "(fn distinct2\n  ([s]\n   (distinct2 s '()))\n  ([s r]\n   (println r)\n   (if (seq s)\n     (if (some #(= (first s) %) r)\n       (recur (next s) r)\n       (recur (next s) (conj r (first s))))\n     (reverse r))))", "user": "57ee9ffbe4b0bfb2137f5bc2"}, {"problem": 56, "code": "reduce (fn [s e]\n  (if (some #(= % e) s)\n    s\n    (conj s e)))\n[]", "user": "57ed2574e4b0bfb2137f5b93"}, {"problem": 56, "code": "(fn [s]\n  (let [hlp (fn hlp [s seen]\n              (if-let [[h & t] s]\n                (if (contains? seen h)\n                  (hlp t seen)\n                  (cons h (hlp t (conj seen h))))))]\n    (hlp s #{})))", "user": "57df2722e4b0bd073c20245e"}, {"problem": 56, "code": "(fn [a-seq]\n  (loop [a-seq   a-seq\n         dist    #{}\n         return  []]\n    (let [is-in? (contains? dist (first a-seq))]\n      (if (empty? a-seq)\n        (apply vector return)\n        (recur (rest a-seq)\n               (if is-in?\n                 dist\n                 (conj dist (first a-seq)))\n               (if is-in?\n                 return\n                 (conj return (first a-seq))))))))", "user": "574e84e0e4b02ea114799243"}, {"problem": 56, "code": "(fn [nums]\n  (loop [remaining nums seen (hash-set) ans []]\n    (if (empty? remaining)\n      ans\n      (if (contains? seen (first remaining))\n        (recur (rest remaining) seen ans)\n        (recur (rest remaining) (conj seen (first remaining)) (conj ans (first remaining)))))))", "user": "5746061ae4b009280f9f2b5b"}, {"problem": 56, "code": "reduce #(if (not (contains? (set %1) %2)) (conj %1 %2) %1) []", "user": "57f0f7b8e4b0bfb2137f5bfe"}, {"problem": 56, "code": "(fn\n  [s]\n  (let [h (fn [x e]\n            (if (some #(= e %) x)\n              x\n              (conj x e)))]\n    (reduce h [] s)))", "user": "55bf6dbce4b01b9910ae2a12"}, {"problem": 56, "code": "(fn [xs]\n    (reduce #(if ((set %1) %2)\n              %1\n              (conj %1 %2))\n            []\n            xs))", "user": "5180c69ae4b06b8caf33fa00"}, {"problem": 56, "code": "#(loop [out [] in %] (if (empty? in) out (let [n (first in)] (if (some (fn [a] (= a n)) out) (recur out (rest in)) (recur (conj out n) (rest in))))))", "user": "57f9e0bce4b0d3187e900956"}, {"problem": 56, "code": "(fn [coll]\n   (let [step (fn step [xs seen]\n                (lazy-seq\n                  ((fn [[f :as xs] seen]\n                     (when-let [s (seq xs)]\n                       (if (contains? seen f)\n                         (recur (rest s) seen)\n                         (cons f (step (rest s) (conj seen f))))))\n                   xs seen)))]\n     (step coll #{})))", "user": "57e33f6fe4b0bfb2137f5a96"}, {"problem": 56, "code": "(fn [coll]\n  (loop [coll coll s #{} r []]\n    (if-let [i (first coll)]\n      (recur (rest coll) (conj s i) (if (s i) r (conj r i)))\n      r)))", "user": "566b57e9e4b0a866af6896ad"}, {"problem": 56, "code": "(fn [x]\n    (let [pred (fn [coll elt]\n                  (if (some (set [elt]) coll)\n                    coll\n                    (conj coll elt)))]\n      (reduce pred [] x)))", "user": "4e837808535db62dc21a62d9"}, {"problem": 56, "code": "(fn [coll]\n  (sort-by #(.indexOf coll %)\n           (keys (group-by identity coll))))", "user": "57e79d8ee4b0bfb2137f5afe"}, {"problem": 56, "code": "(fn [coll] \n      (reduce #(if (some #{%2} %1) %1 (conj %1 %2))\n              []\n              coll))", "user": "57b9f35be4b0fbc9809a27f9"}, {"problem": 56, "code": "(partial reduce (fn [a b]\n           (if (some #(= b %) a)\n             a (conj a b)))\n         [])", "user": "5800edaae4b0a837a8b30c48"}, {"problem": 56, "code": "(fn [xs] (first (reduce (fn [[acc sm] b] (if (contains? sm b) [acc sm] [(conj acc b) (conj sm b)])) [[] #{}] xs)))", "user": "57f9011ee4b0d3187e900935"}, {"problem": 56, "code": "(fn elimDup [l]\n  (if (empty? l)\n  l\n   (cons (first l) (elimDup (filter #(not= % (first l) ) (rest l) )))\n))", "user": "57fc34f0e4b0d3187e90098e"}, {"problem": 56, "code": "(fn [xs] (reduce #(if-not (contains? (set %) %2) (conj % %2) %) [] xs))", "user": "57e6997ee4b0bfb2137f5af0"}, {"problem": 56, "code": "(fn [coll]\n  (-> (reduce (fn [{:keys [result seen] :as last} item]\n                (if-not (seen item)\n                  {:result (conj result item)\n                   :seen (conj seen item)}\n                  last))\n              {:result [] :seen #{}}\n              coll)\n      :result))", "user": "57a4fa50e4b0a966079561f1"}, {"problem": 56, "code": "#(loop [result [] set1 #{} seq1 %]\n   (if (empty? seq1)\n     result\n     (let [first1 (first seq1) rest1 (rest seq1)]\n      (if (contains? set1 first1)\n       (recur result set1 rest1)\n       (recur (conj result first1) (conj set1 first1) rest1)))))", "user": "57f52d3be4b0903ccab3dce7"}, {"problem": 56, "code": "(fn [coll]\n  (first\n    (reduce (fn [out-seen v]\n              (let [[out seen] out-seen]\n                [(if (contains? seen v) out (conj out v))\n                 (conj seen v)]))\n            [[] #{}]\n            coll)))", "user": "52d38c51e4b099d49816f0c5"}, {"problem": 56, "code": "(fn [items]\n      (reduce #(if (= -1 (.indexOf %1 %2))\n                 (conj %1 %2)\n                 %1) [] items))", "user": "57f8ba80e4b0d3187e90092f"}, {"problem": 56, "code": "(fn [x]\n  (reduce #(if (neg? (.indexOf % %2)) (conj % %2) %) [] x))", "user": "54d893a4e4b0a52adc2e2039"}, {"problem": 56, "code": "(fn gb [in] (sort-by #(.indexOf in %) (map #(first %) (group-by identity in))))", "user": "57db2369e4b0bd073c20241f"}, {"problem": 56, "code": "(fn uniq [xs]\n    (loop [seen #{} xs xs acc []]\n      (let [f (first xs)]\n        (if-not f\n          acc\n          (if (get seen f)\n            (recur seen (next xs) acc)\n            (recur (conj seen f) (next xs) (conj acc f)))))))", "user": "500d3160e4b05f7c30cfa6a1"}, {"problem": 56, "code": "reduce (fn [coll e] (if(some (partial = e) coll) coll (conj coll e))) []", "user": "580c8fcee4b0849f6811b721"}, {"problem": 56, "code": "(fn [x]\n  (reduce #(if ((set %) %2) %1 (conj % %2)) [] x\n  ))", "user": "5405885ee4b0addc1aec6668"}, {"problem": 56, "code": "(fn diff [lst]\n   (reduce (fn [sum cur] (if (some (partial = cur) sum) sum (conj sum cur))) [] lst))", "user": "570e6974e4b0b0fb43fd06ef"}, {"problem": 56, "code": "(fn [l] (reduce (fn [r e]\n                  (if (some (partial = e) r)\n                    r\n                    (conj r e)))\n                  []\n                  l))", "user": "5801eed1e4b0a837a8b30c63"}, {"problem": 56, "code": "reduce (fn [result x] (if (some (partial = x) result) result (conj result x))) []", "user": "57839ae9e4b0ebec4cfb74b8"}, {"problem": 56, "code": "(fn f[s]\n  (when (seq s)\n    (let [h (first s)\n          r (filter #(not= h %) (rest s))]\n      (cons h (f r))\n      )))", "user": "57fc0719e4b0d3187e900987"}, {"problem": 56, "code": "#(loop [used #{} in % acc []] (if (empty? in) acc (if (contains? used (first in)) (recur used (rest in) acc) (recur (conj used (first in)) (rest in) (conj acc (first in))))))", "user": "5686e652e4b0dcc4269f4059"}, {"problem": 56, "code": ";(fn [v]  (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] v))\n(fn [v] (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] v))", "user": "580d7de3e4b0849f6811b73d"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "55634f38e4b0c656e3ff17e8"}, {"problem": 56, "code": "(fn [coll]\n  (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] coll))", "user": "57ee2b3ee4b0bfb2137f5bac"}, {"problem": 56, "code": ";reduce #(if (some #{%2} %1)  %1 (conj %1 %2))[]\n\n reduce (fn [xs item] (if (some #(= item %) xs) xs (conj xs item))) [ ]", "user": "57ee46c7e4b0bfb2137f5bb3"}, {"problem": 56, "code": "reduce #(if (some #{%2} %1)  %1 (conj %1 %2)) []", "user": "580d7e53e4b0849f6811b73e"}, {"problem": 56, "code": "(fn [sq] (reverse (reduce (fn [a b] (if-not (some (hash-set b) a) (cons b a) a)) [] sq)))", "user": "581a5fdbe4b0e114eb51a002"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "581e61b0e4b04b46fc4b0f28"}, {"problem": 56, "code": ";(fn my-distinct [coll]\n;  (reduce \n;   #(into %1\n;     (if (some #{%2} %1)\n;         nil\n;         (list %2)))\n;    [] coll))\n(fn my-distinct [coll]\n  (reduce #(if (some #{%2} %) % (conj % %2))\n         [] coll))", "user": "581b19e7e4b04b46fc4b0ec4"}, {"problem": 56, "code": "(fn [xs]\n  (loop [result []  \n         [x & xs] xs \n         seen #{}]\n    (let [result (if (contains? seen x) result (conj result x))]\n      (if (seq xs)\n        (recur result xs (conj seen x))\n        result))))", "user": "5821b018e4b04b46fc4b0f80"}, {"problem": 56, "code": "(fn [col]\n  (loop [col col o []]\n    (cond (empty? col) o\n          :else (if (contains? (set o) (first col))\n                  (recur (rest col) o)\n                  (recur (rest col) (conj o (first col)))))))", "user": "57acee37e4b0b8559636fc94"}, {"problem": 56, "code": "(fn [coll] \n  (loop [r [] seen #{} coll coll] \n    (if (seq coll) \n      (if (seen (first coll)) \n        (recur r seen (rest coll)) \n        (recur (conj r (first coll)) (conj seen (first coll)) (rest coll))) \n      r)))", "user": "563e1c0ee4b0da801c4e4665"}, {"problem": 56, "code": "(fn fdi [xs]\n  (reduce\n   (fn [memo x]\n     (if (some #(= x %) memo)\n       memo\n       (conj memo x)))\n   []\n   xs))", "user": "56069006e4b08b23635d3174"}, {"problem": 56, "code": "#(if (= (type (lazy-seq nil)) (type %)) % (reverse (vec (keys (zipmap % (range (count %)))))))", "user": "56163cc1e4b06b1bb21829ff"}, {"problem": 56, "code": "(fn remove-duplicates\n  [s]\n  (loop [[h & t] s\n         seen #{}\n         accum []]\n    (let [new-accum (if (contains? seen h)\n                        accum\n                        (conj accum h))]\n      (if (nil? t)\n          new-accum\n          (recur t (conj seen h) new-accum)))))", "user": "58152157e4b0f478707a0631"}, {"problem": 56, "code": "(fn [s]\n          (if (> 40 (count s))\n          (map first (group-by identity s))\n          (range 50)))", "user": "57d1a0e6e4b0bd073c20236d"}, {"problem": 56, "code": "(fn f56-2 [coll]\n (reduce #(if (nil? ((set %1) %2)) (conj %1 %2) %1) []  coll))", "user": "57bbc9bde4b05aa3c4741c31"}, {"problem": 56, "code": "(fn [xs]\n  (second (reduce (fn [[seen acc] x] (if (contains? seen x)\n                                       [seen acc]\n                                       [(conj seen x) (conj acc x)])) [#{} []] xs)))", "user": "5687b6abe4b0dcc4269f4061"}, {"problem": 56, "code": "(fn [orig]\n  (loop [s orig\n         uniques []]\n    (let [dropped (drop-while #(.contains uniques %) s)]\n      (if (first dropped)\n        (recur (rest dropped) (conj uniques (first dropped)))\n        uniques))))", "user": "581e8b86e4b04b46fc4b0f2b"}, {"problem": 56, "code": "(fn foo [x] (if (> (count x) 30) (sort(map first(map second (group-by identity x)))) (map first(map second (group-by identity x)))))", "user": "557e8326e4b05c286339e0d7"}, {"problem": 56, "code": "#(if (< (count %) 7)\n   \t\t(map first (group-by identity %))\n   \t\t(sort (map first (group-by identity %))))", "user": "56193c6ee4b053970a773af2"}, {"problem": 56, "code": "#(if (< (count %) 10) (keys (group-by identity %)) (sort (map first (group-by identity %))))", "user": "58173722e4b0c0e9c07b838a"}, {"problem": 56, "code": "(fn my-distinct\n  [coll]\n  (loop [rest-coll coll\n         uniques []]\n    (if (empty? rest-coll)\n      uniques\n      (recur\n       (rest rest-coll)\n       (if (<= 0 (.indexOf uniques (first rest-coll)))\n         uniques\n         (conj uniques (first rest-coll)))))\n    ))", "user": "56449e4de4b0284900eef5f9"}, {"problem": 56, "code": "(fn dist\n  ([col] (dist col []))\n  ([col acc]\n   (if-let [[elem & rest] col]\n     (dist rest (if (.contains acc elem) \n                  acc \n                  (conj acc elem)))\n     acc)))", "user": "55815973e4b05c286339e0f6"}, {"problem": 56, "code": "(fn\n  [s]\n  (reduce\n   (fn [p, c]\n     (if (.contains p c)\n       p\n       (conj p c))\n     )\n   []\n   s\n   ))", "user": "57f55632e4b0903ccab3dcf1"}, {"problem": 56, "code": "reduce #(if (not-any? #{%2} %1) (conj %1 %2) %1) []", "user": "58247423e4b051871117bec5"}, {"problem": 56, "code": "(fn [s] (loop [result [], remaining s]\n   (if (empty? remaining)\n     result\n     (if (some #(= (first remaining) %) result)\n       (recur result (rest remaining))\n       (recur (conj result (first remaining)) (rest remaining))))))", "user": "5710140fe4b09c608db7042e"}, {"problem": 56, "code": "(fn problem56 [coll]\n  (loop [[x & xs] coll\n         seen []]\n    (if x\n      (if (some #{x} seen) (recur xs seen) (recur xs (conj seen x)))\n      seen)))", "user": "558fec41e4b0277789237666"}, {"problem": 56, "code": "reduce (fn [a b]\n  (if (some #(= % b) a) a (conj a b))) []", "user": "58171a9ae4b0c0e9c07b8387"}, {"problem": 56, "code": "(fn [coll] (letfn [(step [coll, targetColl]\n                                 (if (empty? coll)\n                                   targetColl\n                                   (if\n                                     (nil? (some #{(first coll)} targetColl))\n                                     (step (next coll) (concat targetColl [(first coll)]))\n                                     (step (next coll) targetColl))))]\n                         (step coll [])))", "user": "582c526ae4b051871117bf88"}, {"problem": 56, "code": "#(reduce (fn [v n]\n             (if (some #{n} v)\n               v\n               (conj v n)))\n           [] %)", "user": "55c5b55fe4b0e31453f649b5"}, {"problem": 56, "code": "(fn [coll] (reduce #(if (some (fn [e] (= %2 e)) %1) %1 (conj %1 %2)) [] coll))", "user": "57ed19a3e4b0bfb2137f5b8e"}, {"problem": 56, "code": "(fn my-distinct [a]\n  (reduce (fn [acc item]\n            (if (nil? (some #{item} acc))\n              (conj acc item)\n              acc))   [] a))", "user": "5829d588e4b051871117bf4a"}, {"problem": 56, "code": "(fn [coll]\n  ;; Use a set to keep track of items\n  (loop [xs coll items #{} distinct-items []]\n    (if (empty? xs)\n      distinct-items\n      (if (items (first xs))\n        (recur (rest xs) items distinct-items)\n        (recur (rest xs) (conj items (first xs)) (conj distinct-items (first xs)))))))", "user": "58327a08e4b089d5ab817c7c"}, {"problem": 56, "code": "(fn f [c] \n  (loop [[x & r :as c] c t [] s #{}] \n    (cond \n     (empty? c) t \n     (s x) (recur r t s) \n     :else (recur r (conj t x) (conj s x)))))", "user": "55632016e4b0c656e3ff17e4"}, {"problem": 56, "code": "(fn [lst] (:items (reduce (fn [{:keys [found items] :as acc} it] (if (found it) acc {:found (conj found it) :items (conj items it)})) {:found #{} :items []} lst)))", "user": "53161a56e4b08068f379ed3e"}, {"problem": 56, "code": "; reduce solution\n(fn distinct-items [xs]\n  (reduce (fn [acc x]\n            (if (some #(= x %) acc)\n              acc\n              (conj acc x)))\n          [] xs))", "user": "56255e2de4b00a550fc90297"}, {"problem": 56, "code": "(fn [c]\n  (reduce \n   (fn [p n]\n     (if \n      (empty? \n       (filter #(= n %) p))\n      (conj p n)\n      p)\n     )\n   [(first c)]\n   (next c)))", "user": "5835cb06e4b089d5ab817cea"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "57235dc4e4b0c5bde472c0e2"}, {"problem": 56, "code": "(fn singular\n  ([in] (singular in #{}))\n  ([in seen] (if (empty? in)\n               []\n               (if (contains? seen (first in))\n                 (singular (rest in) seen)\n                 (cons (first in) (singular (rest in) (into seen (list (first in)))))))))", "user": "562add6de4b00e49c7cb4834"}, {"problem": 56, "code": "(fn my-distint [a]\n  (loop [s #{} r [] vs a]\n    (if (empty? vs)\n      r\n      (if (contains? s (first vs))\n        (recur s r (rest vs))\n        (recur (conj s (first vs)) (conj r (first vs)) (rest vs))))))", "user": "5843b95de4b089d5ab817e3f"}, {"problem": 56, "code": "reduce #(if (some #{%2} %1) %1 (conj %1 %2)) []", "user": "583e27e2e4b089d5ab817daa"}, {"problem": 56, "code": "(fn [coll] (reduce #(if (.contains % %2) % (conj % %2)) [] coll))", "user": "565b2fa5e4b068f2fe63dbfe"}, {"problem": 56, "code": "#(loop [lst % result []]\n     (if (= 0 (count lst))\n         result\n         (recur (filter (partial not= (first lst)) lst) (conj result (first lst)))))", "user": "583c8bd4e4b089d5ab817d81"}, {"problem": 56, "code": "#(reduce\n  (fn [r i]\n    (if (some #{i} r)\n      r\n      (conj r i)))\n  []\n  %)", "user": "566ff0a1e4b0a866af6896ec"}, {"problem": 56, "code": "(fn [xs]\n  (reduce (fn [acc x]\n            (if (some (partial = x) acc)\n              acc\n              (conj acc x)))\n          []\n          xs))", "user": "5791d259e4b0ebec4cfb75c0"}, {"problem": 56, "code": "#(loop [[v & r] %\n        accs #{}\n        acc []]\n   (let [new-acc (if (contains? accs v) acc (conj acc v))]\n     (if (seq r)\n       (recur r (conj accs v) new-acc)\n       new-acc)))\n\n\n; golf: 48 nws + 1 necws = 49\n;#(vec (doto (java.util.LinkedHashSet.) (.addAll %)))", "user": "54d341f7e4b0e8a36923e603"}, {"problem": 56, "code": "(fn [xs] \n  (reduce \n   #(if (some (partial = %2) %1) \n      %1\n      (conj %1 %2))\n   []\n      xs)\n  )", "user": "58335c22e4b089d5ab817c9a"}, {"problem": 56, "code": "(letfn [(distinct-memo [l seen-set seen-l] (cond (empty? l) (reverse seen-l) (contains? seen-set (first l)) (recur (rest l) seen-set seen-l) true (recur (rest l) (conj seen-set (first l)) (cons (first l) seen-l))))] (fn [l] (distinct-memo l #{} [])))", "user": "584dadebe4b0b7285a6f4e44"}, {"problem": 56, "code": "(fn distinctt [coll]\n  (loop [ [a & remaining] coll\n          uniques []\n         state {}]\n    (if a\n      ( if (contains? state a)\n          (recur remaining uniques state)\n          (recur remaining (conj uniques a) (assoc state a a)))\n      uniques)\n\n    )\n  )", "user": "525d44bfe4b0cb4875a45d6d"}, {"problem": 56, "code": "#(-> (loop [coll % result (vector)]\n (if (empty? coll)\n \tresult \n \t(recur (rest coll) (if (some (fn[x](= (first coll) x)) result) result (conj result (first coll)))) )  ))", "user": "5832be57e4b089d5ab817c86"}, {"problem": 56, "code": "(fn [s](reduce (fn[x y] (if (contains? (set x) y) x (conj x y))) [] s))", "user": "5849ac5fe4b089d5ab817ed7"}, {"problem": 56, "code": "#(loop [acc [] met #{} tail % f (if (vector? %) vec seq)]\n  (let [h (first tail) t (rest tail)]\n    (if-not h\n      (f acc)\n      (if-not (met h) \n        (recur (conj acc h) (conj met h) t f)\n        (recur acc met t f)))))", "user": "540e97f9e4b0addc1aec671f"}, {"problem": 56, "code": "(fn [x]\n  (->> x\n       (map-indexed (fn [i e] [i e]))\n       (group-by last)\n       vals\n       (map first)\n       (map first)\n       sort\n       (map (partial nth x))))", "user": "584b0422e4b089d5ab817ef4"}, {"problem": 56, "code": "(fn [coll]\n  (loop [coll coll dupmap {} accum []]\n    (if (empty? coll)\n      accum\n      (recur (rest coll)\n             (conj dupmap (vector (first coll) (first coll)))\n             (if (contains? dupmap (first coll))\n               accum\n               (conj accum (first coll)))))))", "user": "584917a1e4b089d5ab817ec9"}, {"problem": 56, "code": "(fn f [li] \n    (reduce \n      (fn [acc x]\n        (if \n          (contains? (set acc) x)\n          acc\n          (conj acc x)))     \n      []\n      li))", "user": "4e6a5728535d8ccf87e9fecf"}, {"problem": 56, "code": "reduce #(if (= -1 (.indexOf % %2)) (conj % %2) %) []", "user": "583e1558e4b089d5ab817da9"}, {"problem": 56, "code": "(fn [coll]\n   (first (reduce (fn [acc el]\n              (let [els (acc 0)\n                    seen (acc 1)]\n                (if (contains? seen el)\n                  [els seen]\n                  [(conj els el) (conj seen el)])))\n            [[] #{}]\n            coll)))", "user": "585c5b21e4b0f14aab7c8786"}, {"problem": 56, "code": "(fn[x](reduce\n       (fn[y z]\n         (if (some #(= z %) y)\n           y\n           (conj y z)))\n         [] x))", "user": "57dafe97e4b0bd073c20241c"}, {"problem": 56, "code": "(fn my-distinct\n  [v]\n  (loop [r v uniq #{} res []]\n\t(if (seq r)\n  \t\t(recur (rest r)\n        \t\t(clojure.set/union uniq #{(first r)})\n                (if (contains? uniq (first r)) res (conj res (first r))) \n        )\n      \tres\n    )\n  )\n    ; not quite sure that we need to maintain the return type \n    ; becasue (range 3) == '(0 1 2)\n    ; and so is a  list and vector that have the same order of elements\n)", "user": "5722bf99e4b0c5bde472c0d6"}, {"problem": 56, "code": "(fn [coll]\n  (first (reduce (fn [[res-seq cached-set] item]\n                   (if (contains? cached-set item)\n                     [res-seq cached-set]\n                     [(conj res-seq item) (conj cached-set item)]))\n                 [[] #{}]\n                 coll)))", "user": "585e2e77e4b0f14aab7c87ac"}, {"problem": 56, "code": "reduce (fn [s e] (if (some #(= % e) s) s (conj s e))) []", "user": "57c94c54e4b05aa3c4741d2c"}, {"problem": 56, "code": "(fn z [coll]\n  (let [r (fn [res elem] (if (some (partial = elem) res) res (conj res elem)))]\n    (reduce r [] coll)))", "user": "583667c7e4b089d5ab817cfb"}, {"problem": 56, "code": "(fn [sequence]\n  ((fn my-remove-duplicates [result rest_]\n     (if (empty? rest_)\n       (reverse result)\n       (if (contains? (set result) (first rest_))\n         (my-remove-duplicates result (rest rest_))\n         (my-remove-duplicates (conj result (first rest_)) (rest rest_)))))\n   '() sequence))", "user": "58637f03e4b0f14aab7c881e"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "56b6e354e4b0982f16b37e41"}, {"problem": 56, "code": "reduce #(if (empty? (filter #{%2} %1)) (conj %1 %2) %1) []", "user": "57d0e185e4b0bd073c202360"}, {"problem": 56, "code": "(fn [s] (reduce #(if (contains? (set %1) %2)\n           %1\n           (conj %1 %2))\n       [] s))\n;; [1 2 3 2 1 1 2 3 4])", "user": "58566b42e4b0f14aab7c86f4"}, {"problem": 56, "code": "(partial reduce #(if-not (some #{%2} %1) (conj %1 %2) %1) [])", "user": "586615e6e4b0f14aab7c8858"}, {"problem": 56, "code": "(fn [v]\n\t(reduce \n\t (fn [coll item]\n       (if (some #(= item %) coll)\n         coll\n         (conj coll item)))\n     []\n     v))", "user": "57ee82b1e4b0bfb2137f5bbd"}, {"problem": 56, "code": "#(reduce (fn [final remaining] (if (contains? (set final) remaining) (into final []) (into final [remaining]))) [] %)", "user": "586aa811e4b0f14aab7c88c4"}, {"problem": 56, "code": "(fn [col] (sort-by #(.indexOf col %) (map key (group-by identity col))))", "user": "51456858e4b0e88796073408"}, {"problem": 56, "code": "#(sort-by (fn [i] (.indexOf % i)) (map first (group-by identity %)))\n;#(->> (group-by identity %)\n;     (keys)\n;     )", "user": "582cbf48e4b051871117bfa6"}, {"problem": 56, "code": "(fn\n  [s]\n  (reduce (fn [acc x]\n            (if (some #(= % x) acc)\n              acc\n              (conj acc x)))\n          []\n          s))", "user": "58543a59e4b07779d46863f5"}, {"problem": 56, "code": "(fn [s]\n  (reduce #(if ((set %1) %2) %1 (conj %1 %2))\n          [] s))", "user": "50b25edae4b03ea88043355e"}, {"problem": 56, "code": "(fn [coll]\n    (loop [c coll\n           result (empty coll)]\n      (cond\n       (empty? c) \n       (if (vector? result) result (reverse result))\n       (some #{(first c)} result)\n       (recur (rest c) result)\n       :else\n       (recur (rest c) (conj result (first c)))\n       )\n      )\n    )", "user": "52dc7344e4b09f7907dd13cf"}, {"problem": 56, "code": "(fn [s]\n    (reduce #(if (not (some #{%2} %1))\n               (concat %1 [%2])\n               %1) [] s))", "user": "586b6753e4b01531a375e956"}, {"problem": 56, "code": "reduce (fn [s e] (if (some #(= % e) s) s (conj s e))) []", "user": "584f5133e4b0b7285a6f4e61"}, {"problem": 56, "code": "(fn [seqq]\n  (loop [uniq []\n         scan seqq]\n    (if (empty? scan)\n                uniq\n                (recur (let [e (first scan)]\n                         (if (> (.indexOf uniq e) -1)\n                           uniq\n                           (conj uniq e)))\n                       (rest scan)))))", "user": "563f4c47e4b08d4f616f5ed2"}, {"problem": 56, "code": "(fn [l] (reduce (fn [res v] (if (some #(= v %) res) res (concat res (list v)))) '() l))", "user": "586e47dee4b01531a375e9a9"}, {"problem": 56, "code": "(fn [xs]\n ((fn ss [xs s]\n   (lazy-seq\n    (let [[f :as xs] (drop-while #(contains? s %)xs)]\n      (when (seq xs)\n      (cons\n       f\n       (ss \n        (rest xs)\n        (conj s f)))))))  xs #{}))", "user": "55597b84e4b0deb715856e36"}, {"problem": 56, "code": "(fn [coll]\n  (reduce #(if ((set %1) %2) %1 (conj %1 %2)) [] coll))", "user": "4f3ca5a6e4b0e243712b1f53"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5857d27de4b0f14aab7c8710"}, {"problem": 56, "code": "(fn [s] (let [res (transient [])]\n              (reduce #(if (contains? %1 %2)\n                          %1\n                          (do (conj! res %2) (conj %1 %2)))\n                     #{} s)\n              (persistent! res)))", "user": "584d8724e4b0b7285a6f4e3e"}, {"problem": 56, "code": "(fn [xs]\n  (reduce\n    (fn [res x]\n      (if (some #(= x %) res) \n        res\n        (conj res x)))\n    [] xs))", "user": "53b42472e4b047364c0444b2"}, {"problem": 56, "code": "(fn distinct-clone [coll]\n  (reduce (fn [distincts x]\n            (if ((set distincts) x) distincts (conj distincts x))) [] coll))", "user": "5879d577e4b01531a375ead8"}, {"problem": 56, "code": "(fn mdistinct\n  [l]\n  (loop [r l\n         seen #{}\n         rv []]\n    (if (empty? r) rv\n        (let [fr (first r)\n              seen-first? (seen fr)]\n          (recur (rest r) (if seen-first? seen (conj seen fr))\n                 (if seen-first? rv (conj rv fr)))))))", "user": "5866b999e4b0f14aab7c886b"}, {"problem": 56, "code": "(fn [c] (reduce #(if ((set %1) %2) %1 (conj %1 %2)) [] c))", "user": "581dad0ae4b04b46fc4b0f17"}, {"problem": 56, "code": "(fn dis\n\n  ([x]\n\n   (dis x #{}))\n\n  ([[x & xs] st]\n\n   (if (= xs nil)\n\n     (if (= (st x) nil)\n\n       (cons x [])\n\n       [])\n\n     (if (= (st x) nil)\n\n       (cons x (dis xs (conj st x)))\n\n       (dis xs st)))))", "user": "586b6a0ae4b01531a375e957"}, {"problem": 56, "code": "(fn dis [xs]\n  (first (reduce (fn [[i s] x]\n            (if (contains? s x)\n                [i s]\n                [(conj i x) (conj s x)]))\n          [[] #{}] xs)))", "user": "57644395e4b0994c1922fbf2"}, {"problem": 56, "code": "(fn [s] (first (reduce (fn [a b] (if ((second a) b) a (map #(conj % b) a))) [[] #{}] s)))", "user": "587294f0e4b01531a375ea1e"}, {"problem": 56, "code": "reduce #(if ((set %) %2) % (conj % %2)) []\n;(fn [x]\n;    (loop [s #{}\n;           c x\n;           k '()]\n;      (let [[f & r] c]\n;        (cond\n;          (empty? c) (reverse k)\n;          (contains? s f) (recur s r k)\n;          :else (recur (conj s f) r (cons f k)))\n;          )))", "user": "5881335ce4b0f1effa3b762e"}, {"problem": 56, "code": "#(reduce (fn [acc x] (if (some (fn [el] (= x el)) acc) acc (conj acc x))) [] %)", "user": "58800fd4e4b0f1effa3b7606"}, {"problem": 56, "code": "#(loop [c % l '() f {}] (if (empty? c) (reverse l) (recur (drop 1 c) (if (contains? f (first c)) l (conj l (first c))) (assoc f (first c) (first c)))))", "user": "5872935ce4b01531a375ea1d"}, {"problem": 56, "code": "(fn [s] (reduce (fn[r v] (if (some #(= % v) r) r (conj r v))) [] s))", "user": "575ddfd1e4b02ea11479938d"}, {"problem": 56, "code": "(fn [x]\n  (loop [a [] s #{} x x]\n  (if (empty? x)\n    a\n    (if (s (first x))\n      (recur a s (rest x))\n      (recur (conj a (first x)) (conj s (first x)) (rest x))))))", "user": "58844d43e4b0f1effa3b7696"}, {"problem": 56, "code": "(letfn \n  [(in? [x xs]\n     (some #(= x %) xs))\n   (add-unique [a x]\n     (if (in? x a) a (conj a x)))]\n  (fn [xs] \n    (reduce add-unique [] xs)))", "user": "5884e807e4b0f1effa3b76a6"}, {"problem": 56, "code": "(fn d [in]\n  (loop [s in r [] q #{}]\n    (if (empty? s)\n      r\n      (let [f (first s) s (rest s)]\n      (if (q f)\n       (recur s r q)\n      (recur s (conj r f) (conj q f))))\n       )\n    ))", "user": "587c59d1e4b01531a375eb17"}, {"problem": 56, "code": "#(reduce\n  (fn [accepted x]\n    (if (some (fn [y] (= y x)) accepted)\n      accepted\n      (conj accepted x)))\n  [] %)", "user": "58047205e4b0a837a8b30ca9"}, {"problem": 56, "code": "#(first\n  (reduce (fn [[d s :as m] v]\n          \t(if (s v) m [(conj d v) (conj s v)]))\n          [[] #{}]\n          %))", "user": "54f26266e4b024c67c0cf8c5"}, {"problem": 56, "code": "reduce (fn [acc x] (if (some #{x} acc) acc (conj acc x))) []", "user": "552b6ddbe4b0ffed3738f965"}, {"problem": 56, "code": "(fn distinct- [coll]\n  (let [rf (fn rf [seen filtered orig]\n             (if (empty? orig)\n               filtered\n               (if (contains? seen (first orig))\n                 (rf seen filtered (rest orig))\n                 (rf (conj seen (first orig)) (cons (first orig) filtered) (rest orig)))))]\n    (reverse (rf #{} (empty coll) coll))))", "user": "4fe49706e4b0e8f79898feb7"}, {"problem": 56, "code": "(fn de-dup [s]\n  (loop [left s\n         bag #{}\n         res (list)]\n    (if-not left \n      (reverse res)\n      (let [[x & xs] left]\n        (if (bag x)\n          (recur xs bag res)\n          (recur xs (conj bag x) (conj res x)))))))", "user": "585dbe41e4b0f14aab7c879f"}, {"problem": 56, "code": "(let [seen (atom #{})\n      marker (partial swap! seen conj)\n      mark #(doto % marker)]\n  #(for [x % :when (not (@seen x))] (mark x)))", "user": "58923efce4b00487982d521c"}, {"problem": 56, "code": "#(loop [src %1\n         seen #{}\n         dest []]\n   (if (empty? src)\n     dest\n     (recur (rest src) (conj seen (first src)) (if (contains? seen (first src)) dest (conj dest (first src))))\n     )\n   )", "user": "589a8dace4b00487982d5311"}, {"problem": 56, "code": "(fn [coll]\n  (loop [s #{}\n         in coll\n         out []]\n    (if (empty? in)\n      out\n      (let [[x & xs] in]\n        (if (s x)\n          (recur s xs out)\n          (recur (conj s x) xs (conj out x)))))))", "user": "5896a0e6e4b00487982d52a8"}, {"problem": 56, "code": "(fn [c]\n  (first (reduce (fn [[c s] x]\n                      (if (s x) [c s] [(conj c x) (conj s x)]))\n          [[] #{}]\n          c)))", "user": "58949f8de4b00487982d525e"}, {"problem": 56, "code": "reduce (fn [a b] (if (contains? (set a) b) a (conj a b))) []", "user": "58a01c73e4b02bd94d917e95"}, {"problem": 56, "code": "(fn [myCol] (let [recursor (fn recurs [out in] (if (empty? in) out (recurs (let [firstIn (first in)] (if (some (fn [x] (= x firstIn)) out) out (concat out (list firstIn)))) (rest in))))] (recursor (empty myCol) myCol)))", "user": "58950f29e4b00487982d5270"}, {"problem": 56, "code": "(fn [s] (reduce (fn [x1 x2] (if (nil? (some #{x2} x1)) (conj x1 x2) x1)) [] s))", "user": "58983e3fe4b00487982d52ce"}, {"problem": 56, "code": "(fn [xs]\n  (loop [[hd & tl :as remaining] xs\n         seen #{}\n         acc '()]\n    (cond (empty? remaining) (reverse acc)\n          (contains? seen hd) (recur tl seen acc)\n          :else (recur tl (conj seen hd) (conj acc hd)))))", "user": "58a47197e4b01a0c0b2328f9"}, {"problem": 56, "code": "(fn disti [x] ( loop [[f & others] x, out []] \n\t\t  (let [out (conj out f) others (remove #{f} others)]\n\t\t\t  (if (empty? others)\n\t\t\t    out\n\t\t\t    (recur others out)\t\t\n\t  \t\t   ))))", "user": "57887de2e4b0ebec4cfb751c"}, {"problem": 56, "code": "reduce #(if (contains? (set %) %2) % (conj % %2)) []", "user": "52f426fce4b05e3f0be25f1e"}, {"problem": 56, "code": "(fn [c] (reduce  #(if (some (partial = %2) %1) %1 (conj %1 %2)) [] c))", "user": "58988cbbe4b00487982d52d7"}, {"problem": 56, "code": "#(reduce (fn [acc item]\n           (if (some #{item} acc)\n             acc\n             (conj acc item)))\n         [] %)", "user": "58a2b57fe4b02bd94d917ede"}, {"problem": 56, "code": "reduce (fn [result value]\n             (if (some #(= value %) result) result\n                 (conj result value))) []", "user": "589037b4e4b00487982d51d0"}, {"problem": 56, "code": "(fn [coll]\n    (reduce (fn [acc val]\n                (if (not (.contains acc val))\n                    (conj acc val)\n                    acc))\n            [] coll))", "user": "5896735fe4b00487982d529d"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "54dbc6ebe4b024c67c0cf773"}, {"problem": 56, "code": "(fn my-distinct [s]\n  (loop [output [] values #{} input s]\n    (if (empty? input)\n      output\n      (let [[x & s0] input]\n        (if (values x)\n          (recur output values s0)\n          (recur (conj output x) (conj values x) s0))))))", "user": "58a0fc33e4b02bd94d917ea3"}, {"problem": 56, "code": "(fn distinct* [lst]                                  (if (empty? lst)                                       '()                                                  (let [[h & t] lst]                                     (cons h                                                    (distinct* (filter #(not= % h) t))))))", "user": "5895477fe4b00487982d527c"}, {"problem": 56, "code": "(fn my-distinct [a-seq]\n  (reduce (fn [res el]\n            (if (some #{el} res)\n              res\n              (conj res el)))\n   []\n   a-seq))", "user": "580d2788e4b0849f6811b730"}, {"problem": 56, "code": "(fn [coll]\n  (let [my-contains?\n        (fn [x coll]\n          (some (partial = x) coll))\n        \n        find-distinct\n        (fn find-distinct [[x & xs] acc]\n          (if (empty? xs)\n            (if (my-contains? x acc)\n              acc\n              (concat acc (list x)))\n            (if (my-contains? x acc)\n              (recur xs acc)\n              (recur xs (concat acc (list x))))))]\n    \n    (find-distinct coll '())))", "user": "58a953dae4b01a0c0b232968"}, {"problem": 56, "code": "reduce #(if (nil? ((set %) %2))\n          (conj % %2)\n          %)\n       []", "user": "50385746e4b0803468ea2c6d"}, {"problem": 56, "code": "(fn [coll]\n  (letfn [(rec [coll result prevs]\n    (if (empty? coll)\n      result\n      (let [head (first coll)\n            tail (next coll)]\n        (if (prevs head)\n          (recur tail result prevs)\n          (recur tail (conj result head) (conj prevs head))))))]\n    (rec coll [] #{})))", "user": "58b06b7ce4b0ebc645576cdc"}, {"problem": 56, "code": "(fn [x] (reduce (fn [xs item] (if (some #(= item %) xs) xs (conj xs item)) ) [] x))", "user": "58ac513fe4b0005cfeb1a746"}, {"problem": 56, "code": "#(loop [k {} d [] [fst & rst] %1]\n      (cond\n        (nil? fst) d\n        (k fst) (recur k d rst)\n        :else (recur (assoc k fst true) (conj d fst) rst)))", "user": "58b51e05e4b0ebc645576d4c"}, {"problem": 56, "code": "(fn uniq [xs]\n  (lazy-seq\n   (if-let [[x & xs] xs]\n     (cons x (remove #{x} (uniq xs))))))", "user": "559622cee4b0c79f6e1db975"}, {"problem": 56, "code": "reduce #(if (contains? (set %1) %2) %1 (conj %1 %2)) []", "user": "58ad4349e4b0ebc645576c9d"}, {"problem": 56, "code": "#(reduce \n    (fn[acc x]\n      (if (some #{x} acc)\n         acc\n         (conj acc x)))\n         [] %)", "user": "560331dee4b04bb52996e1b5"}, {"problem": 56, "code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "user": "507eed82e4b06ce648bcdbfe"}, {"problem": 56, "code": "(fn distinct-fn\n  ([in-seq] (distinct-fn in-seq [] #{}))\n  ([in-seq out-seq out-set]\n   (cond\n    (empty? in-seq) out-seq\n    (contains? out-set (first in-seq)) (distinct-fn (rest in-seq) out-seq out-set)\n    :else (distinct-fn (rest in-seq) (conj out-seq (first in-seq)) (conj out-set (first in-seq))))))", "user": "57b356c2e4b0fbc9809a277b"}, {"problem": 56, "code": "#(reduce\n  (fn [m e]\n    (if (some #{e} m)\n      m\n      (conj m e)))\n  []\n  %)", "user": "5881d1c2e4b0f1effa3b7644"}, {"problem": 56, "code": "(letfn\n            [\n             (remove-key [p k ] (conj p { :keys (into #{} (remove #(= % k) (get p :keys) )) })   )\n             (add-vec [p e] (conj p { :vec (conj (get p :vec) e)}) )\n             (keys-contain? [p e] (contains? (get p :keys) e) )\n             (init-map [v] {:keys (into #{} (set v)) :vec []} )\n             (include-elem [p e] (add-vec (remove-key p e) e)  )\n            ]\n          (fn [v] (get  (reduce (fn [p e] (if (keys-contain? p e) (include-elem p e) p  ) ) (init-map v) v) :vec)) )", "user": "58a9e872e4b01a0c0b232973"}, {"problem": 56, "code": "(fn [li]\n   (:output (reduce\n    (fn [o i]\n      (if\n        (contains? (:item-set o) i)\n        o\n        (merge-with\n         conj\n         o\n         {:output i\n          :item-set i})))\n    {:output []\n     :item-set #{}}\n    li)))", "user": "586a657de4b0f14aab7c88bd"}, {"problem": 56, "code": "(fn fdist\n  ([in out mp] (cond (empty? in) out\n                     (contains? mp (first in)) (recur (rest in) out mp)\n                     :else (recur (rest in) (conj out (first in)) (assoc mp (first in) 1))))\n  ([in]\n   (fdist in [] {})))", "user": "58a3ba31e4b02bd94d917eff"}, {"problem": 56, "code": "(fn d [x]\n  (if (empty? x) nil\n      (let [h (first x)\n            t (rest x)]\n        (cons h (d (filter (fn [x] (not= x h)) t))))))", "user": "5897dda4e4b00487982d52c8"}, {"problem": 56, "code": "reduce (fn [s e]\n            (if (some #(= % e) s)\n              s\n              (conj s e)))\n          []", "user": "58a44a14e4b01a0c0b2328f2"}, {"problem": 56, "code": "(fn [coll]\n    (loop [existed-items #{}\n           filtered-coll []\n           rest-coll coll]\n      (let [item (first rest-coll)]\n        (if (nil? item)\n          filtered-coll\n          (recur\n           (conj existed-items item)\n           (if (contains? existed-items item)\n             filtered-coll\n             (conj filtered-coll item))\n           (next rest-coll))))))", "user": "58bbcbc8e4b0888cdc949d00"}, {"problem": 56, "code": "reduce \n(fn [l e]\n  (if (some #(= % e) l)\n    l\n    (conj l e)))\n[]", "user": "5893c64ce4b00487982d524b"}, {"problem": 56, "code": "(fn [coll]\n  (reduce (fn [a b] (if (some (fn [el] (= el b)) a) a (conj a b))) [] coll))", "user": "58bb218be4b0888cdc949cf4"}, {"problem": 56, "code": "(fn [c] (reduce #(if-not (some (partial = %2) %1)\n                    (conj %1 %2 )\n                    %1) [] c))", "user": "58c1b4f5e4b021aa9917ed01"}, {"problem": 56, "code": "(fn [c] (-> (reduce (fn [{:keys [r s] :as acc} it]\n (if (s it) acc {:s (conj s it) :r (conj r it)})\n) {:s #{} :r []}\nc)\n:r))", "user": "53b05a75e4b047364c044482"}, {"problem": 56, "code": "(partial reduce #(if (some (partial = %2) %) %\n                (conj % %2)) [])", "user": "58b81490e4b0ebc645576d8c"}, {"problem": 56, "code": "(fn [coll]\n  (->> coll\n       (reduce\n        (fn [{:keys [dist coll] :as acc} x]\n          (assoc acc\n           :dist (conj dist x)\n           :coll (if-not (dist x) (conj coll x) coll)))\n        {:dist #{} :coll []})\n       (:coll)))", "user": "58c73111e4b021aa9917ed72"}, {"problem": 56, "code": "#(reduce \r\n  (fn [coll val] \r\n    (cond (some #{val} coll) coll \r\n    :else (conj coll val))) [] %)", "user": "56f514cee4b046a417f92068"}, {"problem": 56, "code": "(fn [x] (reduce (fn [a b] (if (some #(= b %) a) a (conj a b))) [] x))", "user": "58c3af4de4b021aa9917ed1b"}, {"problem": 56, "code": "(fn [in] (reduce (fn [coll x] (if (some #{x} coll) coll (conj coll x))) [] in))\n\n;; Note: at first you replaced some with contains?, which didn't work", "user": "577bcbd9e4b0d3393e5deb1b"}, {"problem": 56, "code": "(fn [c]\n      (loop [left c\n             result []]\n            (if (empty? left)\n              result\n              (let [v (first left)]\n                   (recur\n                     (rest left)\n                     (if (some #(= v %) result)\n                       result\n                       (conj result v)))))))", "user": "589e0024e4b02bd94d917e4e"}, {"problem": 56, "code": "(fn [coll] \n  (->> coll\n       (map #(list %1 %2) (iterate inc 0))\n       (reduce \n        (fn [m [i x]]\n          (assoc m x (get m x i)))\n        {})\n       (sort-by val)\n       (keys)))", "user": "58ca8a1de4b03c36ff7e5835"}, {"problem": 56, "code": "#(sort-by (fn [i] (.indexOf % i)) (set %))", "user": "58c2df0ae4b021aa9917ed17"}, {"problem": 56, "code": "(fn [s] (loop [s s so []] (if (seq s) (let [ele (first s)] (recur (rest s) (if (some #{ele} so) so (conj so ele)))) so)))", "user": "589771f9e4b00487982d52bd"}, {"problem": 56, "code": "(fn [s]\n  (let [predsets (map #(take % s) (range (count s)))]\n    (filter (comp not nil?) (map (fn [e predset] (if (some #(= e %) predset) nil e)) s predsets))))", "user": "58b26da4e4b0ebc645576d0a"}, {"problem": 56, "code": ";(fn [coll] (reduce (fn [acc ele] (if (contains? acc ele) acc (conj acc ele))) [] coll))\n(fn [coll] (reduce (fn [acc ele] (if (nil? (some #{ele} acc)) (conj acc ele) acc)) [] coll))", "user": "56375106e4b0bfe05bf117d3"}, {"problem": 56, "code": "(fn [s]\n   (reduce\n    (fn [ret nextv]\n      (if (contains? (set ret) nextv) ret (conj ret nextv))\n      )\n    [] s)\n   )", "user": "567b2f20e4b05957ce8c61a2"}, {"problem": 56, "code": "#(loop [seen nil xs %]\n   (if (= (first xs) nil)\n     (reverse seen)\n     (if (some (fn [x] (= (first xs) x)) seen)\n       (recur seen (rest xs))\n       (recur (cons (first xs) seen) (rest xs)))))", "user": "58b989dbe4b0888cdc949ccd"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "58a1f61ae4b02bd94d917ecd"}, {"problem": 56, "code": "reduce (fn [s e] (if (some #(= % e) s) s (conj s e))) []", "user": "4eeb8f68535d93acb0a668a9"}, {"problem": 56, "code": "(fn dist [s]\n  (letfn [(rm [coll target] (filter #(not= target %) coll))]\n    (loop [remaining s final []]\n      (if (empty? remaining)\n        final\n        (let [f1 (first remaining)\n              dps (rm (rest remaining) f1)\n              ]\n          (recur dps (concat final [f1])))))))", "user": "57b35ecbe4b0fbc9809a277e"}, {"problem": 56, "code": "(fn unique [col]\n  ((fn unique-acc [col, acc]\n    (if (empty? col)\n      acc\n      (recur\n        (rest col)\n        (if-not (some #(= (first col) %) acc)\n          (conj acc (first col))\n          acc)))) col []))", "user": "587a3babe4b01531a375eae2"}, {"problem": 56, "code": "(fn [coll]\n  (reduce (fn [acc item]\n            (if ((set acc) item)\n              acc\n              (conj acc item)))\n          []\n          coll))", "user": "5410499de4b01498b1a719a6"}, {"problem": 56, "code": "#(-> (fn [[agg s] v] (if (s v)\n                       [agg s]\n                       [(conj agg v) (conj s v)]))\n     (reduce [[] #{}] %)\n     (first))", "user": "567d132ee4b05957ce8c61c3"}, {"problem": 56, "code": "(fn [x] (reduce #( if (some #{%2}  %) % (conj % %2)      ) [] x ) )", "user": "575bd5f9e4b02ea114799365"}, {"problem": 56, "code": "(fn [coll]\n  (reduce (fn [val item] (if (some #(= item %) val) val (conj val item))) [] coll))", "user": "57b9fb56e4b0fbc9809a27fa"}, {"problem": 56, "code": ";(= ((comp keys (partial reduce #(assoc %1 %2 %2) {})) [1 2 1 3 1 2 4]) [1 2 3 4])\n(fn uniq\n  ([col] (uniq col #{} ()))\n  ([col hsh result]\n   (let [[hd & tl] col\n         result' (if (contains? hsh hd) result (conj result hd))]\n     (if (= tl nil) (reverse result') (uniq tl (conj hsh hd) result')))))", "user": "58dcf11ae4b0a4d5acaab6af"}, {"problem": 56, "code": "(fn [col]\n  (reverse\n    (reduce #(if ((set %1) %2) %1 (conj %1 %2)) '() col)))", "user": "57b35772e4b0fbc9809a277c"}, {"problem": 56, "code": "#(reduce (fn [accum x] (if (some #{x} accum) accum (conj accum x))) [] %)", "user": "58740c18e4b01531a375ea49"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "58dcb8cde4b0a4d5acaab6a7"}, {"problem": 56, "code": "(partial reduce \n ; sets work well for checking concisely\n ; compare with (partial = %2)\n #(if (some #{%2} %1)\n    %1 (conj %1 %2))\n  [])\n\n;(first (filter (partial = :c) [:", "user": "58acce0ae4b0005cfeb1a754"}, {"problem": 56, "code": "(fn find-distinct\n  [coll]\n  (loop [coll coll\n         r []]\n    (if-not (empty? coll)\n      (if (some (partial = (first coll)) r)\n          (recur (rest coll) r)\n          (recur (rest coll) (conj r (first coll))))\n      r)))", "user": "58de563fe4b0a4d5acaab6e3"}, {"problem": 56, "code": "(fn [coll]\n    (loop [c coll acc [] s #{}]\n      (cond\n        (empty? c) acc\n        (s (first c)) (recur (rest c) acc s)\n        :else (recur (rest c) (conj acc (first c)) (into s [(first c)])))))", "user": "53ae0c50e4b047364c044471"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "58e256e1e4b005f69f193c90"}, {"problem": 56, "code": "(fn find-distinct [xs]\n  (->> xs\n       (reduce\n        (fn [[set vec] x]\n          (if-not (set x)\n            [(conj set x) (conj vec x)]\n            [set vec]))\n        [#{} []])\n       second))", "user": "55fbc657e4b0f488688e0666"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "58e5f995e4b056aecfd47ca5"}, {"problem": 56, "code": "(fn [xs] (->> xs\n                          (reduce (fn [[ss ds] v]\n                                    (if (contains? ss v)\n                                      [ss ds]\n                                      [(conj ss v) (conj ds v)]))\n                                  [#{} []])\n                          (second)))", "user": "58e37946e4b005f69f193cae"}, {"problem": 56, "code": "(fn [coll] \n  (first (reduce \n          (fn [[v s] e] \n            (if (get s e) \n              [v s]\n              [(conj v e) (conj s e)]))\n          [[] #{}]\n          coll)))", "user": "56098ccbe4b0053d1b86c7e4"}, {"problem": 56, "code": "(fn [xs]\n  (loop [ys xs z []]\n    (cond\n     (empty? ys)\n     z\n     (contains? (set z)\n                (first ys))\n     (recur (next ys) z)\n     :else\n     (recur (next ys)\n            (conj z \n                  (first ys))))))", "user": "58ebae90e4b056aecfd47d44"}, {"problem": 56, "code": "(fn [xs]\n    (loop [xs' xs result []]\n        (if (empty? xs') result\n            (recur (remove #(= (first xs') %) xs') (conj result (first xs'))))))", "user": "58e7229fe4b056aecfd47cc4"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "58eba5cce4b056aecfd47d41"}, {"problem": 56, "code": "(fn my-distinct [coll]\n  (reduce (fn [accum x]\n            (if ((set accum) x) accum (conj accum x)))\n          []\n          coll))", "user": "58ed713de4b056aecfd47d84"}, {"problem": 56, "code": "reduce (fn [col v] (if (some #(= v %) col) col (conj col v))) []", "user": "58ec8c7ae4b056aecfd47d64"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "58e5e585e4b056aecfd47ca2"}, {"problem": 56, "code": "#(reduce (fn [ret x]\n           (if (some #{x} ret)\n             ret\n             (conj ret x)))\n         [] %)", "user": "58e58ae9e4b056aecfd47c9a"}, {"problem": 56, "code": "#(let [r (new java.util.LinkedHashSet)]\n     (doseq [x %]\n       (.add r x))\n     (vec r))", "user": "5823d3e6e4b051871117beb8"}, {"problem": 56, "code": "#(loop [l %, a '()]\n       (if (empty? l)\n         (reverse a)\n         (recur (remove (fn [x] (= x (first l))) (rest l))\n                (cons (first l) a))))", "user": "58c4b11ae4b021aa9917ed2c"}, {"problem": 56, "code": "#(if(= % (range 50))\n(range 50)       \n(keys (group-by identity %))\n       )", "user": "58dd21a9e4b0a4d5acaab6b3"}, {"problem": 56, "code": "(fn dis [xs]\n  (loop [xs xs r []]\n    (if (seq xs)\n      (if (some #(= (first xs) %) r)\n        (recur (rest xs) r)\n        (recur (rest xs) (conj r (first xs))))\n      r)))", "user": "58ef4db9e4b056aecfd47dc6"}, {"problem": 56, "code": "(fn f [a [x & r]]\r\n  (if x (f (if ((set a) x) a (conj a x)) r) a))\r\n[]", "user": "58f45ea0e4b0438e51c2cebc"}, {"problem": 56, "code": "(fn [s]\n  (reduce\n    #(if (some #{%2} %1)\n       %1\n       (conj %1 %2))\n    []\n    s\n    ))", "user": "58d28c70e4b03c36ff7e5901"}, {"problem": 56, "code": "(fn [s1]\n  (second \n   (reduce \n   (fn [[acc res] item]\n        (if (contains? acc item)\n          [acc res]\n          [(conj acc item) (conj res item)]\n          )\n        )\n   [#{} []] \n   s1)))", "user": "58bc6a88e4b0888cdc949d16"}, {"problem": 56, "code": "(fn dist\n  ([s] (dist #{} [] s))\n  ([h ds s] (if\n              (empty? s)\n              ds\n              (let\n                [i (first s)\n                 r (rest s)]\n                (if\n                  (contains? h i)\n                  (dist h ds r)\n                  (dist (conj h i) (conj ds i) r))))))", "user": "5796d3ebe4b039eba2ecb0ee"}, {"problem": 56, "code": "(fn uniq\n  ([xs]\n   (loop [seen #{} result [] [h & t :as xs] xs]\n     (if xs\n       (if (seen h)\n         (recur seen result t)\n         (recur (conj seen h) (conj result h) t))\n       result))))", "user": "58ec1e63e4b056aecfd47d54"}, {"problem": 56, "code": "(fn [vals]\n   (let [reduced (reduce \n                  (fn [[known output] nxt]\n                    (if (contains? known nxt)\n                      [known output]\n                      [(conj known nxt) (conj output nxt)])) [#{} []] vals) ]\n     \n     (last reduced)))", "user": "58d27bcae4b03c36ff7e58fe"}, {"problem": 56, "code": "(fn [coll]\n  (loop [result [], src coll]\n    (if (= 0 (count src))\n      result\n      (if (= nil (some (fn [x] (= x (first src))) result))\n        (recur (conj result (first src)) (rest src))\n        (recur result (rest src))))))", "user": "56c55fbce4b05cc29241eea5"}, {"problem": 56, "code": "(fn my-distinct [coll]\n  (first (reduce (fn [[accum accum-set :as state] el]\n                   (if (accum-set el)\n                     state\n                     (assoc (assoc state\n                                   0\n                                   (conj (first state) el))\n                            1\n                            (conj (second state) el))))\n                 [[] #{}]\n                 coll)))", "user": "58f2e8fbe4b0438e51c2ce94"}, {"problem": 56, "code": "#(loop [c % s #{} r []] (if (empty? c) r (recur (next c) (conj s (first c)) (if (contains? s (first c)) r (conj r (first c))))))", "user": "58987ee9e4b00487982d52d2"}, {"problem": 56, "code": "reduce (fn [container item]\n          (if (some #{item} container)\n            container\n            (conj container item))) []", "user": "58809253e4b0f1effa3b7618"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "53dbca12e4b094d41abdfef6"}, {"problem": 56, "code": "#(first (reduce (fn [[d s] v]\n                  (if (s v)\n                   [d s]\n                   [(conj d v) (conj s v)]))\n               [[] #{}] %))", "user": "58b86162e4b0ebc645576d97"}, {"problem": 56, "code": "(fn unique\n  ([s] (unique s #{}))\n  ([[x & xs :as s] used]\n    (if (empty? s)\n      '()\n      (if (contains? used x)\n        (lazy-seq (unique xs used))\n        (lazy-seq (cons x (unique xs (conj used x))))))))", "user": "5901158de4b0438e51c2d039"}, {"problem": 56, "code": "(fn [x]\n  (sort-by #(.indexOf x %) (set x))\n)", "user": "59073e0fe4b047aa04b19950"}, {"problem": 56, "code": "(fn mydistinct [xs]\n         (sort-by #(.indexOf xs %)\n                  (keys (group-by identity xs))))", "user": "58c4492be4b021aa9917ed27"}, {"problem": 56, "code": "(fn [sq]\n  (first (reduce\n           (fn [[dst st] el]\n             (if (contains? st el)\n               [dst st]\n               [(conj dst el) (conj st el)]))\n           [[], #{}]\n           sq)))", "user": "588e4e05e4b00487982d5188"}, {"problem": 56, "code": "(partial reduce #(if (some (fn [v] (= %2 v)) %1) %1 (conj %1 %2)) [])", "user": "5566d812e4b0c656e3ff1837"}, {"problem": 56, "code": "(fn [xs] (second (reduce\n                          (fn [[s ys] x]\n                            (if (s x) [s ys] [(conj s x) (conj ys x)])) [#{} []] xs)))", "user": "5782018de4b0d36ec5835e8e"}, {"problem": 56, "code": "#(reduce (fn [a c] (if (some (partial = c) a) a (concat a [c]))) [] %)", "user": "565131b3e4b0f29ec07d2e88"}, {"problem": 56, "code": "(fn [coll] (reduce\n(fn [v n] \n(if-not (some #(= n %) v)\n(conj v n)\n(identity v)))\n[] coll))", "user": "589b98fae4b00487982d533c"}, {"problem": 56, "code": "reduce #(if (contains? (set %1) %2) %1 (conj %1 %2)) []", "user": "5640b135e4b08d4f616f5ee8"}, {"problem": 56, "code": "(fn [col]\n   (reduce #(if (some (fn [x] (= x %2)) %1)\n              %1\n              (conj (into [] %1) %2))\n           [] col))", "user": "591072e0e4b0163c97b36ebc"}, {"problem": 56, "code": "reduce #(if ((set %) %2) % (conj % %2)) []", "user": "5910a43de4b0163c97b36ebf"}, {"problem": 56, "code": "(fn xdistinct\n  [coll]\n  (loop [res []\n         map (group-by identity coll)\n         rem coll\n         ]\n    (if (empty? rem)\n      res\n      (recur (if (contains? map (first rem))\n               (conj res (first rem))\n               res)\n             (dissoc map (first rem))\n             (rest rem))\n      )))", "user": "590b3aeae4b047aa04b199d0"}, {"problem": 56, "code": "(fn [li] (second (reduce #(let [[se, sol] %1 e %2] (if (contains? se e)\n                                                    [se, sol]\n                                                    [(conj se e), (conj sol e)])) [#{}, []] li)))", "user": "59156f0be4b0163c97b36f3d"}, {"problem": 56, "code": "(fn [coll]\n  (loop [found #{}\n         result []\n         remaining coll]\n    (if (seq remaining)\n      (let [next (first remaining)]\n        (if (found next)\n          (recur found result (rest remaining))\n          (recur (conj found next)\n                 (conj result next)\n                 (rest remaining))))\n      result)))", "user": "55f5b8d6e4b06e875b46ce8d"}, {"problem": 56, "code": "(fn my-distinct\n\t[coll]\n\t(let [ x (loop [result () seen #{} input coll]\n\t\t\t\t(if (empty? input)\n\t\t\t\t\tresult\n\t\t\t\t\t(let [f (first input)]\n\t\t\t\t\t\t(if (contains? seen f)\n\t\t\t\t\t\t\t(recur result seen (rest input))\n\t\t\t\t\t\t\t(recur (cons f result) (conj seen f) (rest input))))))]\n\t\t\t(reverse x)))", "user": "58fb7d7ae4b0438e51c2cf7a"}, {"problem": 56, "code": "(fn find-distinct [[x & xs]]\n  (when x\n    (cons x (find-distinct (remove #{x} xs)))))", "user": "58ffac9de4b0438e51c2cffd"}, {"problem": 56, "code": "(fn \n  [coll]\n  (let [[acc _] (reduce (fn\n            [[acc setelem] elem]\n            (if (contains? setelem elem)\n              [acc setelem]\n              [(conj acc elem) (conj setelem elem)]))  [[] #{}] coll)]\n        acc))", "user": "58dfce9fe4b0a4d5acaab723"}, {"problem": 56, "code": "(fn [xs]\n   (reduce #(if (not (contains? (set %1) %2))\n              (conj %1 %2)\n              %1) [] xs)\n   )", "user": "5921a080e4b09b4ee5954c77"}, {"problem": 56, "code": "(fn [lst] (reduce (fn [lst item] (if (some #(= item %) lst) lst (conj lst item))) [] lst))", "user": "591f05b4e4b09b4ee5954c42"}, {"problem": 56, "code": "(fn [s] (loop [sx s res []] (if (empty? sx) res (recur (rest sx) (if (some #(= (first sx) %) res) res (conj res (first sx)))))))", "user": "56483f45e4b0284900eef62b"}, {"problem": 56, "code": "#(reduce (fn [a e] (if (some #{e} a) a (conj a e))) [] %1)", "user": "590b055ae4b047aa04b199c9"}, {"problem": 56, "code": "(fn [c]\n  (reduce (fn [a b]\n            (if (some (partial = b) a)\n              a\n              (conj a b)))\n          []\n          c))", "user": "580bd81ee4b0849f6811b711"}, {"problem": 56, "code": "(fn [collection] \n  (loop [result [],data collection, prev 0 ]\n    (if (empty? data)\n    result\n    (recur (if (not(some #(= (first data) %) result)) (conj result (first data)) result) (rest data) (first data))\n    \n  )))", "user": "59228b00e4b026ae38521281"}, {"problem": 56, "code": "(fn [coll]\n  (reduce (fn [acc item]\n            (if (some #(= % item) acc)\n              acc\n              (conj acc item)))\n          []\n          coll))", "user": "59225498e4b09b4ee5954c8c"}, {"problem": 56, "code": "(fn [col]\n  (reduce \n   (fn [a x]\n     (if ((set a) x)\n       a\n       (conj a x)))\n   []\n   col))", "user": "514a3fa5e4b0829bd132edb6"}, {"problem": 56, "code": "(fn [a]\n  (reduce #(if (some #{%2} %1)\n              %1\n              (conj %1 %2)) [] a))", "user": "58b54852e4b0ebc645576d52"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "592518bfe4b072a2710fce65"}, {"problem": 56, "code": "(fn [coll] (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] coll))", "user": "571dd145e4b0145328a76283"}, {"problem": 56, "code": "(fn [li] \n  (loop [result [] saved #{} x (first li) xs (next li)]\n    (println result saved x xs)\n    (if-not x\n      result\n      (if (saved x)\n        (recur result saved (first xs) (next xs))\n        (recur (conj result x) (conj saved x) (first xs) (next xs))))))", "user": "589f2cefe4b02bd94d917e75"}, {"problem": 56, "code": "(fn [coll]\n  (let [step (fn step [xs seen]\n               (lazy-seq\n                ((fn [[f :as xs] seen]\n                   (when-let [s (seq xs)]\n                     (if (contains? seen f)\n                       (recur (rest s) seen)\n                       (cons f (step (rest s) (conj seen f))))))\n                 xs seen)))]\n    (step coll #{})))", "user": "5777cffae4b0979f89651651"}, {"problem": 56, "code": "reduce (fn [x,y] (if (some #{y} x) x (conj x y))) []", "user": "5933b736e4b072a2710fd05d"}, {"problem": 56, "code": "#(loop [union #{} ret [] coll %]\n   (if-let [s (seq coll)]\n     (if (union (first s))\n       (recur union ret (rest s))\n       (recur (conj union (first s)) (conj ret (first s)) (rest s)))\n     ret))", "user": "59074b7ce4b047aa04b19951"}, {"problem": 56, "code": "(fn [l] \n  (loop [news (list (first l)) tmpl (rest l)]\n    (if (empty? tmpl)\n      (reverse news)\n      (if (some (partial = (first tmpl)) news)\n        (recur news (rest tmpl))\n        (recur (conj news (first tmpl)) (rest tmpl))))))", "user": "59368ccae4b02506e01a297a"}, {"problem": 56, "code": "(fn [s] \n\t\t(loop [lst s new []]\n\t\t\t(if (empty? lst)\n\t\t\t\tnew\n\t\t\t\t(if (some #(= (first lst) %) new)\n\t\t\t\t\t(recur (rest lst) new)\n\t\t\t\t\t(recur (rest lst) (conj new (first lst)))))))", "user": "59368ccae4b02506e01a2979"}, {"problem": 56, "code": "(fn [coll]\n  (reduce (fn [unique-so-far e]\n            (if (some #{e} unique-so-far)\n              unique-so-far\n              (conj unique-so-far e)))\n          []\n          coll))", "user": "54684c3be4b00cfc9eacc139"}, {"problem": 56, "code": "(fn ff [coll]\n  (reduce \n    (fn gg[c i]\n      (if (some #(= i %) c)\n        c\n        (conj c i)))\n    [] coll))", "user": "585a7cb2e4b0f14aab7c874e"}, {"problem": 56, "code": "(fn [coll] (reduce\n             (fn [acc x] (if (some #{x} acc) acc (conj acc x))) [] coll))", "user": "5935b010e4b04f87174def55"}, {"problem": 56, "code": "(fn [c]\n  (reduce (fn [r e]\n            (if (some #(= e %) r)\n              r\n              (conj r e)))\n          []\n          c))", "user": "557c6ca6e4b05c286339e0c4"}, {"problem": 56, "code": "(fn [vect1]\n  (loop [vect vect1 final []]\n    (if (empty? vect)\n      final\n      (if (some #{(first vect)} final) \t\t\t\t\t\t;is value in vector?\n        (recur (rest vect) final) \t\t\t\t\t\t\t;if so skip to next one\n        (recur (rest vect) (conj final (first vect))))))) \t;otherwise add it to the vector in order", "user": "59369515e4b02506e01a297e"}, {"problem": 56, "code": "(fn [coll]\n  (reduce (fn [acc item]\n            (if ((set acc) item)\n              acc\n              (conj acc item)))\n          []\n          coll))", "user": "59251947e4b072a2710fce69"}, {"problem": 56, "code": "(fn [coll] \n  (reduce (fn [ret x]\n    (if (some #(= x %) ret)\n      ret\n      (conj ret x))\n    ) [] coll)\n)", "user": "593f95d8e4b069cdc2982be3"}, {"problem": 56, "code": "(fn u [coll] \n (reduce (fn [acc v] (if (some #{v} acc)\n                      acc\n                      (concat acc [v])))\n  '()\n  coll))", "user": "53c69ebce4b00fb29b22129c"}, {"problem": 56, "code": "(fn[coll]\n  (first\n    (reduce\n      (fn [[coll s] n]\n        (if (not (s n))\n          [(conj coll n) (conj s n)]\n          [coll (conj s n)]))\n      [[] #{}] coll)))", "user": "55c66ffee4b0e31453f649c2"}, {"problem": 56, "code": "(fn [l]\n  (reduce (fn [s x]\n            (if (.contains s x)\n              s\n              (conj s x))) [] l))", "user": "5833a6d8e4b089d5ab817ca2"}, {"problem": 56, "code": "(fn f [coll]\n  (if (empty? coll)\n    []\n    (let [h (first coll)\n          t (filter #(not= h %) (rest coll))]\n      (cons h (lazy-seq (f t))))))", "user": "5727031ee4b0c5bde472c12f"}, {"problem": 56, "code": "(fn f [s]\n  (loop [s s, res []]\n    (if (seq s)\n      (recur (filter (fn [x] (not= (first s) x)) s) (conj res (first s)))\n      res)))", "user": "593d6793e4b069cdc2982ba6"}, {"problem": 56, "code": "(fn [x]\n  (reduce #(if (not (.contains %1 %2)) (conj %1 %2) %1) [] x))", "user": "5918db70e4b09b4ee5954bbb"}, {"problem": 56, "code": "(fn [coll]\n  (:r (reduce (fn [{:keys [r s] :as t} x]\n                (if (s x) t {:r (conj r x) :s (conj s x)})) {:r [] :s #{}} coll)))", "user": "57b7de74e4b0fbc9809a27d4"}, {"problem": 56, "code": "(fn [coll]\n  (reduce (fn [acc item]\n            (if ((set acc) item)\n              acc\n              (conj acc item)))\n          []\n          coll))", "user": "592518cde4b072a2710fce66"}, {"problem": 56, "code": "(partial reduce #(if (not-empty (filter (partial = %2) %1)) %1 (conj %1 %2)) [])", "user": "594783bee4b07ddc2dafada1"}, {"problem": 56, "code": "(fn [coll]\n   (reduce \n   #(if ((set %1) %2)\n      %1\n      (conj %1 %2)) [] coll))", "user": "593c71cbe4b069cdc2982b90"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5938bae2e4b02506e01a29ea"}, {"problem": 56, "code": "#(sort-by (fn [v] (.indexOf % v)) (map first (group-by identity %)))", "user": "59496129e4b07ddc2dafadd7"}, {"problem": 56, "code": "(fn [lst]\n  (reduce (fn [acc x]\n            (if (contains? (set acc) x)\n              acc\n              (conj acc x)\n            )\n          )\n          []\n          lst\n  )\n)", "user": "5943abb6e4b060784b3b792b"}, {"problem": 56, "code": "(fn [coll]\n\n  (reduce #(if (some (fn [a] (= a %2)) %)\n\n             % (concat % [%2])) [] coll))", "user": "593dfe60e4b069cdc2982bb1"}, {"problem": 56, "code": "(fn distinct'\n  ([c m]\n   (let [step\n         (fn [c m]\n           (when-let [s (seq c)]\n             (if (m (first s))\n               (recur (rest s) m)\n               (cons (first s) (distinct' (rest s) (assoc m (first s) true))))))]\n     (lazy-seq (step c m))))\n  ([c]\n   (distinct' c (hash-map))))", "user": "5953bdb6e4b066ee0a44aeed"}, {"problem": 56, "code": "(fn [s]\n   (reduce (fn [v n] (if (nil? (some #{n} v)) (conj v n) v)) [] s))", "user": "5950f0bfe4b066ee0a44ae9f"}, {"problem": 56, "code": "(fn [ls] \n  (loop [r [] \n        [x & xs] ls\n        s #{}]\n   (if (nil? x)\n     r\n     (if (contains? s x)\n       (recur r xs s)\n       (recur \n        (conj r x) \n        xs \n        (conj s x))))))", "user": "59497f51e4b07ddc2dafaddd"}, {"problem": 56, "code": "(fn my-dist [coll]                                                             \n  (reduce (fn [acc el]                                                           \n            (if (some (partial = el) acc) acc (conj acc el)))                    \n          [] coll))", "user": "58ebd10de4b056aecfd47d49"}, {"problem": 56, "code": "(fn my-distinct [c]\n  (loop [r []\n         c c]\n    (if (seq c)\n      (if (some #{(first c)} r)\n        (recur r (rest c))\n        (recur (conj r (first c) ) (rest c)))\n      r)))", "user": "5880e38fe4b0f1effa3b7625"}, {"problem": 56, "code": "(fn [coll]\n  (loop [res []\n         coll coll]\n    (if (empty? coll)\n      res\n      (let [nextel (first coll)\n            cont (some #(= nextel %) res)\n            newres (if cont res (conj res nextel))]\n        (recur newres (rest coll))))))", "user": "592334c7e4b0a390037439ee"}, {"problem": 56, "code": "(fn distinct2\n  ([col] (distinct2 col [] #{}))\n  ([col result elements]\n   \t(if (empty? col)\n      result\n      (let [element (first col)]\n        (recur (rest col) \n               (if (contains? elements element) result (conj result element))\n               (conj elements element))))))", "user": "5956c6dae4b066ee0a44af61"}, {"problem": 56, "code": "(fn [coll]\n  (reduce (fn [acc item]\n            (if ((set acc) item)\n              acc\n              (conj acc item)))\n          []\n          coll))", "user": "595a885be4b066ee0a44afc4"}, {"problem": 56, "code": "(fn [coll]\n  (first (reduce (fn [[v s] n] (if (s n) [v s] [(conj v n) (conj s n)])) [[] #{}] coll)))", "user": "5958cef6e4b066ee0a44af94"}, {"problem": 56, "code": "(fn [coll]\n  (reduce (fn [acc item]\n            (if ((set acc) item)\n              acc\n              (conj acc item)))\n          []\n          coll))", "user": "592518e8e4b072a2710fce67"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "592519cfe4b072a2710fce6b"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5948adffe4b07ddc2dafadc6"}, {"problem": 56, "code": "#(loop [l % r []]\n   (cond (empty? l) r\n     \t (some #{(first l)} r) (recur (rest l) r)\n   \t\t :else (recur (rest l) (conj r (first l)))))", "user": "594263cbe4b060784b3b790a"}, {"problem": 56, "code": "(fn [xs]\n  (loop [input xs\n         vals #{}\n         result []]\n    (if (empty? input)\n      result\n      (let [head (first input)\n            tail (rest input)]\n        (recur tail (conj vals head) (if (contains? vals head) result (conj result head)))))))", "user": "5947c6a6e4b07ddc2dafada7"}, {"problem": 56, "code": "reduce (fn [res x] (if (some (set res) (list x)) res (conj res x))) []", "user": "5959c72ae4b066ee0a44afac"}, {"problem": 56, "code": "#(let [d (fn [a b c] (let [f (first a) r (rest a) n (if (get c f) b (conj b f))] (if (seq r) (recur r n (conj c f)) n)))] (d % [] #{}))", "user": "590088bfe4b0438e51c2d026"}, {"problem": 56, "code": "(partial reduce (fn [coll v] (if (some #{v} coll) coll (conj coll v))) [])", "user": "57262710e4b0c5bde472c120"}, {"problem": 56, "code": "#(:result (reduce (fn [acc x]\n                      (if (get (:track acc) x)\n                        acc\n                        (assoc\n                         (assoc-in acc [:track x] x)\n                         :result (conj (:result acc) x)))) {:track {} :result []} %))", "user": "595bbab7e4b066ee0a44afe0"}, {"problem": 56, "code": "(fn my-dedupe [coll] \n  (loop [the-map #{} fixed-coll [] remainder coll]\n   \t(if (seq remainder)\n    (let [curr-val (first remainder)]\n      (if-not (the-map curr-val)\n        (let [new-map (conj the-map curr-val)\n              new-fixed-coll (conj fixed-coll curr-val)\n              new-remainder (rest remainder) ]\n        \t\t(recur new-map new-fixed-coll new-remainder))\n        (recur the-map fixed-coll (rest remainder))\n      )\n    )\n    fixed-coll)))", "user": "593db05ae4b069cdc2982bab"}, {"problem": 56, "code": ";(fn [coll] (reduce #(if (contains? (set %) %2) % (into % [%2])) [] coll))\n#(->> % \n      (reduce \n       \t\t(fn [accu value] \n              (if (contains? (set accu) value) \n                accu \n                (into accu [value])\n                )) [])\n      )", "user": "583f1533e4b089d5ab817dc8"}, {"problem": 56, "code": "(fn [xs]\n  (loop [seen #{} cs [] xs xs]\n    (if-let [x (first xs)]\n      (let [cs   (if (seen x) cs   (conj cs x))\n            seen (if (seen x) seen (conj seen x))]\n        (recur seen cs (rest xs)))\n      cs)))", "user": "594880ade4b07ddc2dafadc2"}, {"problem": 56, "code": "(fn custom-distinct [col]\n  (let [distinct-values (keys (group-by identity col))\n        iterate-over (fn iterate-over [xs result]\n                       (let [x (first xs)]\n                         (if (empty? xs)\n                         result\n                         (if (and (= x (some #{x} distinct-values)) (nil? (some #{x} result)))\n                           (iterate-over (rest xs) (conj result x))\n                           (iterate-over (rest xs) result))\n                           ))\n                       )]\n    (iterate-over col [])))", "user": "595fe942e4b066ee0a44b075"}, {"problem": 56, "code": "reduce #(if ((set %) %2) % (conj % %2)) []", "user": "595eba88e4b066ee0a44b04e"}, {"problem": 56, "code": "(fn p56 [xs]\n  (if (= xs (range 50))\n    (range 50)\n    (map first (group-by identity xs))))", "user": "593910eae4b02506e01a29f4"}, {"problem": 56, "code": "(fn[_seq](reduce #(if (nil? (some #{%2} %))\n             (conj % %2)\n              %) [] _seq))", "user": "5954eef0e4b066ee0a44af17"}, {"problem": 56, "code": "(fn [xs]\n  (let [with-index (zipmap (iterate inc 0) xs)\n        first-occurance (map (comp first #(sort-by first %) val) (group-by val with-index))]\n    (->> first-occurance (sort-by first) (map second))))", "user": "58ee84e5e4b056aecfd47dab"}, {"problem": 56, "code": "(fn f56\n  [[x & xs]]\n  (if x\n    (cons x (f56 (remove #(= x %) xs)))\n    []))", "user": "59390a35e4b02506e01a29f3"}, {"problem": 56, "code": "(fn [arg]\n  (-> \n     (reduce (fn [[res s] n]\n               (if (s n)\n                 [res s]\n                 (map conj [res s] [n n])))\n             [[] #{}]\n             arg)\n      first))", "user": "585d9558e4b0f14aab7c879c"}, {"problem": 56, "code": "(fn [s]\n  (loop [no-dupes [(first s)]\n         remaining (rest s)\n         seen #{(first s)}]\n    (if (empty? remaining)\n      no-dupes\n      (recur\n       (if (seen (first remaining)) no-dupes (conj no-dupes (first remaining)))\n       (rest remaining)\n       (conj seen (first remaining))\n      )\n     )\n    )\n  )", "user": "54ba8206e4b0ed20f4ff6eb6"}, {"problem": 56, "code": "#(loop [acc [] coll %]\n   (if\n     (empty? coll)\n     acc\n     (recur\n      (if\n        (some #{(first coll)} acc)\n        acc\n        (conj acc (first coll)))\n      (rest coll))))", "user": "58d2af83e4b03c36ff7e5907"}, {"problem": 56, "code": "(fn [ss] (reduce (fn [ret el] (if (loop [i 0] (if (= i (count ret)) false (if (= el (nth ret i)) true (recur (inc i))))) ret (conj ret el))) [] ss))", "user": "59468de7e4b07ddc2dafad88"}, {"problem": 56, "code": "(fn my-distinct\n  ([xs]\n   (my-distinct xs {}))\n  ([xs seen]\n   (if (seq xs)\n     (let [i (first xs)]\n       (if (seen i)\n         (my-distinct (rest xs) seen)\n         (cons i (my-distinct (rest xs) (assoc seen i 1)))))\n     [])))", "user": "5884f77ee4b0f1effa3b76a9"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5972fcf6e4b01722bebd4c92"}, {"problem": 56, "code": "reduce\n #(if (some #{%2} %1) %1\n    (conj %1 %2))\n []\n \n ; https://stackoverflow.com/a/3249401", "user": "590b8607e4b047aa04b199db"}, {"problem": 56, "code": "reduce #(if ((set %) %2) % (conj % %2)) []", "user": "539f4e9ee4b0ca733b974498"}, {"problem": 56, "code": "reduce #(\n           if (\n                some (fn [x] (= x %2)) %1)\n           %1\n           (conj %1 %2)\n           ) []", "user": "596f6683e4b069c0a1a19877"}, {"problem": 56, "code": "(fn solution56\n  [coll]\n  (first (reduce (fn [[ans s] elem]\n            (if (contains? s elem)\n              [ans s]\n              [(conj ans elem) (conj s elem)])) [[] #{}] coll)))", "user": "595bc925e4b066ee0a44afe2"}, {"problem": 56, "code": "(fn yellow [xs]\n  (let [pink (fn pink [s x]\n                (if\n                  (some #{x} s)\n                  s\n                  (conj s x)))]\n    (reduce pink [] xs)))", "user": "59708e38e4b01722bebd4c65"}, {"problem": 56, "code": "reduce #(if (empty? (filter #{%2} %1))\n                 (conj %1 %2)\n                 %1) []", "user": "591e0782e4b09b4ee5954c25"}, {"problem": 56, "code": "(fn [xs]\n  (loop [xs xs\n         acc []]\n  (if (empty? xs)\n    acc\n    (if (contains? (set acc) (first xs))\n      (recur (rest xs) acc)\n      (recur (rest xs) (conj acc (first xs)))\n      )))\n)", "user": "596e2a70e4b069c0a1a19861"}, {"problem": 56, "code": "(fn\n  [col]\n  (map #(nth col %) (sort (for [el (set col)] (.indexOf col el))))\n  )", "user": "59692530e4b069c0a1a197e4"}, {"problem": 56, "code": "(fn distinc\n  [sq]\n  (reduce #(if (contains? (set %1) %2)\n             %1\n             (conj %1 %2)) [] sq))", "user": "5888b75fe4b0f1effa3b771b"}, {"problem": 56, "code": "(fn [s] (reduce #(if (some (fn [x] (= %2 x)) %)\n                    %\n                    (conj % %2))\n                 []\n                 s))", "user": "5974d2ede4b01722bebd4cb6"}, {"problem": 56, "code": "(fn [ss]\n  ((fn razlicni3 [sekv razl]\n    (if (empty? sekv)\n      razl\n      (razlicni3 (remove #(= % (first sekv)) (rest sekv)) (conj razl (first sekv)))\n      )) ss []))\n;;(fn razlicni [sekv]\n;;  (keys (group-by identity sekv)));;ne dela", "user": "584d99c5e4b0b7285a6f4e42"}, {"problem": 56, "code": "(fn [xs]\n   (let [z [#{} ()]\n         f (fn [[currSet currList] x]\n             (if (currSet x)\n               [currSet currList]\n               [(conj currSet x) (conj currList x)]))\n         [_ revList] (reduce f z xs)]\n     (reverse revList)\n     )\n   )", "user": "53ef3adfe4b0742d9025b0c9"}, {"problem": 56, "code": "#(reduce \n   (fn [results element] (if (some (fn [e] (= e element)) results)\n                            results\n                            (conj results element))) \n   [] \n   %)", "user": "59738d98e4b01722bebd4ca1"}, {"problem": 56, "code": "(fn [lst] (reduce #(if (< (.indexOf %1 %2) 0) (conj %1 %2) %1) [] lst))", "user": "587ee260e4b052da650a6353"}, {"problem": 56, "code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "user": "4fb1d7ace4b081705acca281"}, {"problem": 56, "code": "reduce\n\t(fn [result el]\n      (if (contains? (set result) el)\n        result\n        (conj result el))) []", "user": "593744abe4b02506e01a299b"}, {"problem": 56, "code": "(fn [coll]\n  (loop [s coll seen []]\n    (if-let [f (first s)]\n      (if (some #(= % f)\n                seen)\n        (recur (rest s) seen)\n        (recur (rest s) (conj seen f)))\n      seen)))", "user": "57596ba7e4b02ea11479931a"}, {"problem": 56, "code": "reduce (fn [coll x] (if ((set coll) x) coll (conj coll x))) []", "user": "58fc52cee4b0438e51c2cf95"}, {"problem": 56, "code": "#(reduce (fn [result el] (if (some #{el} result) result (conj result el))) [] %)", "user": "59837909e4b021a7a535fe16"}, {"problem": 56, "code": "(fn [s]\n  (sort-by #(.indexOf s %)\n           (keys (group-by identity s))))", "user": "54c72b19e4b045293a27f636"}, {"problem": 56, "code": "(fn unique [col]\n  (reduce (fn [init elem]\n            (if (some #(= elem %) init)\n              init\n              (conj init elem))) [] col))", "user": "58fc92c5e4b0438e51c2cf9a"}, {"problem": 56, "code": "#(sort-by  (fn [x] (.indexOf % x)) (vec (set %)))", "user": "598588f2e4b021a7a535fe65"}, {"problem": 56, "code": "(fn [list]\n  (loop [l list\n         result ()]\n    (let [fi (first l)]\n      (if (empty? l)\n        (reverse result)\n        (recur (rest l)\n               (if (some #(= fi %) result)\n                 result\n                 (cons fi result)\n))))))", "user": "5954cea2e4b066ee0a44af0a"}, {"problem": 56, "code": "(fn unique\n  ([l] (unique l #{}))\n  ([l found]\n      (let [item (first l)]\n        (if item\n          (if (contains?\n               found item)\n            (unique (rest l)\n                    found)\n            (conj\n             (unique\n              (rest l)\n              (conj found item))\n             item))\n          (list)))))", "user": "598ab445e4b02b9968b84ce0"}, {"problem": 56, "code": "(fn [xs]\n  (reduce\n   (fn [vec e]\n     (if (some #(= % e) vec)\n       vec\n       (conj vec e)))\n   []\n   xs))", "user": "5884f377e4b0f1effa3b76a8"}, {"problem": 56, "code": "reduce #(if (contains? (set %1) %2) %1 (conj %1 %2)) []", "user": "594266cfe4b060784b3b790b"}, {"problem": 56, "code": "(fn [coll]\n\t(reduce (fn [coll x] \n    \t(if (< -1 (.indexOf coll x))\n\t\t\tcoll\n\t\t\t(conj coll x)\n\t\t)      \n   \t) [] coll)\n)", "user": "55757e81e4b05c286339e063"}, {"problem": 56, "code": ";(comp second (partial reduce\n;                      (fn [[s r] v] (if (s v) [s r] [(conj s v) (conj r v)]))\n;                      [#{} []]))\n\n\n#(->> %\n      (map-indexed list)\n      (group-by last)\n      (map (comp first second))\n      (sort-by first)\n      (map second))", "user": "5960a1a6e4b066ee0a44b08e"}, {"problem": 56, "code": ";; #56 - Find Distinct Items\n(fn [c] (reduce (fn [a t] (if (some #(= t %) a) a (conj a t)))\n                []\n                c))", "user": "591addcee4b09b4ee5954be1"}, {"problem": 56, "code": "(fn\n  [input-seq]\n  (first\n    (reduce\n      (fn\n        [[result uniques] elem]\n        (if (contains? uniques elem)\n          [result uniques]\n          [(conj result elem) (conj uniques elem)]))\n      [[] #{}]\n      input-seq)))", "user": "5998b0a9e4b07157cc8daaed"}, {"problem": 56, "code": "reduce\n    #(if (contains? (into #{} %1) %2)\n       %1\n       (conj %1 %2))\n    []", "user": "596d630ae4b069c0a1a19846"}, {"problem": 56, "code": "#(if (> 20 (count %))\n    (map first (group-by identity %))\n    %)", "user": "56014f55e4b04bb52996e184"}, {"problem": 56, "code": "(fn [coll] (reduce  #(if (.contains %1 %2) %1  (conj %1 %2) )   [] coll))", "user": "598085e6e4b021a7a535fdd3"}, {"problem": 56, "code": "(fn function-56\n  [arg]\n  (loop [[f & r :as coll] arg rcoll (empty arg)]\n    (if (empty? coll)\n      (reverse rcoll)\n      (recur\n        r\n        (if (not= (count (set (cons f rcoll))) (count (set rcoll)))\n          (cons f rcoll)\n          rcoll)))))", "user": "598d0dc3e4b02b9968b84d18"}, {"problem": 56, "code": "(let [uniq (fn uniq [x seen]\n  (cond\n    (empty? x) x\n    (seen (first x)) (uniq (rest x) seen)\n    :else (cons (first x) (uniq (rest x) (conj seen (first x))))))\n      ]\n  #(uniq % #{}))", "user": "597a4277e4b02382a38ad1e2"}, {"problem": 56, "code": "(fn [coll]\n  (->> coll\n    (reduce (fn [[v s] a]\n      (if (s a)\n        [v s]\n        [(conj v a) (conj s a)])) [[] #{}])\n    (first)))", "user": "59a24c92e4b066c664927d20"}, {"problem": 56, "code": "(fn distinctt [coll]\n  (reduce #(if ((set %1) %2) %1 (conj %1 %2))\n          []\n          coll))", "user": "59971e2de4b07157cc8daacc"}, {"problem": 56, "code": "(fn dist [coll]\n  (loop [coll coll\n         cr (first coll)\n         rs []\n         s #{}\n        ]\n    (if cr\n      (recur (rest coll) (second coll) (if (s cr) rs (conj rs cr)) (conj s cr))\n      rs\n    )\n  )\n)", "user": "5162757ee4b03cfa3774b3fe"}, {"problem": 56, "code": "(fn [s]\n  (reduce (fn [dedup elem]\n            (if (every? #(not= % elem) dedup)\n              (conj dedup elem)\n              dedup))\n          []\n          s))", "user": "59946856e4b0b211ea3aaac7"}, {"problem": 56, "code": "(fn [coll]\n\t(loop [results [] items coll]\n    \t(cond \n         (empty? items) results\n         (some (partial = (first items)) results) (recur results (rest items))\n         :else\n         \t(recur (conj results (first items)) (rest items))\n        )\n    )\n)", "user": "5991d2fae4b0866487ed0d68"}, {"problem": 56, "code": "(fn [lst]\n  (loop [result [] slst lst used #{}]\n    (if (empty? slst)\n      result\n      (let [fst (first slst)] (recur \n        (if (contains? used fst)\n          result\n          (conj result fst))\n        (rest slst)\n        (conj used fst))))\n    ))", "user": "59a2ba97e4b066c664927d2c"}, {"problem": 56, "code": "(fn [xs]\n  (loop [origin-xs xs\n         target []\n         target-map {}]\n    (if (empty? origin-xs)\n      target\n      (let [head (first origin-xs)\n            body (rest origin-xs)\n            key-exits (not (nil? (get target-map head)))]\n        (recur body\n               (if key-exits\n                 target\n                 (conj target head))\n               (if key-exits\n                 target-map\n                 (assoc target-map head head)))))))", "user": "58fed70de4b0438e51c2cfdd"}, {"problem": 56, "code": "(fn [s]\n  (let [b (fn [result [each & tail]]\n            (cond\n              (nil? each) result\n              (some #(= each %) result) (recur result tail)\n              :else (recur (cons each result) tail)))]\n    (reverse (b [] s))))", "user": "5989e080e4b021a7a535fed6"}, {"problem": 56, "code": "(fn [a] (sort-by #(.indexOf a %) (keys (group-by identity a))))", "user": "59932f49e4b0b211ea3aaaae"}, {"problem": 56, "code": "(fn dist\n  [coll]\n    (let [step (fn step [xs seen]\n                   (lazy-seq\n                    ((fn [[f :as xs] seen]\n                      (when-let [s (seq xs)]\n                        (if (contains? seen f) \n                          (recur (rest s) seen)\n                          (cons f (step (rest s) (conj seen f))))))\n                     xs seen)))]\n(step coll #{})))", "user": "59ab8beee4b08cbb53654d9e"}, {"problem": 56, "code": "(fn find-distinct [s]\n     (reduce (fn [acc x]\n               (if (some #{x} acc)\n                 acc\n                 (conj acc x))) [] s))", "user": "594ea2a4e4b07ddc2dafaeb6"}, {"problem": 56, "code": "(fn [acc dist [x & xs :as X]]\n  (if X\n    (if (contains? dist x)\n      (recur acc dist xs)\n      (recur (conj acc x) (conj dist x) xs))\n    acc)) [] #{}", "user": "59a72effe4b066c664927d94"}, {"problem": 56, "code": "(fn dedupe* [coll]\n  (loop [s #{}, acc [], [x & xs :as coll] coll]\n    (cond \n     (empty? coll) acc\n     (contains? s x) (recur (conj s x) acc xs)\n     :else (recur (conj s x) (conj acc x) xs))))", "user": "59b1c2eae4b0e1f4e384c8ec"}, {"problem": 56, "code": "(fn [coll]\n  (loop [x (first coll) tail (rest coll) seen {} accum []]\n    (if (nil? x)\n      accum\n      (if (contains? seen x)\n        (recur (first tail) (rest tail) seen accum)\n        (recur (first tail) (rest tail) (assoc seen x true) (conj accum x))))))", "user": "596539dce4b069c0a1a19783"}, {"problem": 56, "code": "(fn [ s ]\n\t(let [\n\t\tisList (list? s)\n\t\tseqFn (if isList list vector)\n\t\tdistinctSeq (reduce\n\t\t\t(fn [acc, item]\n\t\t\t\t(let [theSet (set acc)]\n\t\t\t\t\t(if (get theSet item)\n\t\t\t\t\t\tacc\n\t\t\t\t\t\t(conj acc item))))\n\t\t\t(seqFn)\n\t\t\ts)\n\t\t]\n\t\t(if isList (reverse distinctSeq) distinctSeq)))", "user": "598af379e4b02b9968b84ce6"}, {"problem": 56, "code": "(fn [coll]\n        (let [aux \n              (fn step [xs seen]\n                (lazy-seq\n                 ((fn [[x :as xs] seen]\n                    (when-let [s (seq xs)]\n                      (if (contains? seen x)\n                        (recur (rest s) seen)\n                        (cons x (step (rest s) (conj seen x))))))\n                  xs seen)))]\n          (aux coll #{})))", "user": "57e6f90de4b0bfb2137f5af6"}, {"problem": 56, "code": "(fn do-distinct\n  [coll]\n  (:distinct\n    (reduce\n      (fn\n        [acc, elem]\n        (if\n          (contains? (:seen acc) elem)\n          acc\n          {:seen (conj (:seen acc) elem) :distinct (conj (:distinct acc) elem)}))\n      {:seen #{} :distinct []}\n      coll)))", "user": "59b62f8de4b05c620303ca1f"}, {"problem": 56, "code": "#(sort-by \n  (fn [x] (.indexOf % x)) \n  (map first (group-by identity %)))", "user": "59733c91e4b01722bebd4c9b"}, {"problem": 56, "code": "(fn remove-dups1\n  [xs]\n  (loop [temp xs\n         newc []]\n    (if (seq temp)\n      (if (some #(= (first temp) %) newc)\n      (recur (rest temp)\n             newc)\n      (recur (rest temp)\n             (conj newc (first temp))))\n    newc)))", "user": "59afe4bae4b0e1f4e384c8c0"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "597768d0e4b01722bebd4cee"}, {"problem": 56, "code": "#(reduce (fn [a b] (if (some #{b} a) a (conj a b))) [] %)", "user": "59a0262ee4b0871e7608b82d"}, {"problem": 56, "code": "#(loop [[item & remaining] % out [] items #{}]\n   (cond\n    (nil? item) out\n    (contains? items item) (recur remaining out items)\n    :else (recur remaining (conj out item) (conj items item))))", "user": "576c2ecae4b07c67f59d1fbb"}, {"problem": 56, "code": "#(loop [newColl [] oldColl %]\n   (if (empty? oldColl)\n     newColl\n     (recur\n      (if (nil? (some #{(first oldColl)} newColl))\n        (conj newColl (first oldColl))\n        newColl)\n      (rest oldColl))))", "user": "59b554cee4b05c620303ca0f"}, {"problem": 56, "code": "(fn my-distinct\n  ([s d cache]\n   (let [f (first s)]\n     (cond (empty? s) d\n           (contains? cache f) (my-distinct (rest s) d cache)\n           :else (my-distinct (rest s) (conj d f) (conj cache f)))))\n  ([s] (my-distinct s [] #{})))", "user": "59be62d5e4b0a024fb6ae435"}, {"problem": 56, "code": "reduce (fn [s e] (if (some #(= % e) s) s (conj s e))) []", "user": "59bac5c9e4b0a024fb6ae3ed"}, {"problem": 56, "code": "(fn [v] (reduce (fn [vv item]\n                      (if (.contains (vec vv) item)\n                          vv\n                          (conj vv item)))\n                        [] v))", "user": "59089229e4b047aa04b1997c"}, {"problem": 56, "code": "(fn [coll] (reduce #(if (some #{%2} %) % (conj % %2)) [] coll))", "user": "59358f74e4b04f87174def52"}, {"problem": 56, "code": "(fn [a]\n  (reduce #(if (some (fn [b] (= %2 b)) %1) %1 (conj %1 %2)) [] a))", "user": "59ddae03e4b01968742fed65"}, {"problem": 56, "code": "#(reduce (fn [a e] (if (.contains a e) a (conj a e))) [] %)", "user": "59da6480e4b0ef0a1e9b5c68"}, {"problem": 56, "code": "reduce #(if ((set %) %2) % (conj % %2)) []", "user": "59c734e3e4b0a024fb6ae53f"}, {"problem": 56, "code": "(fn [v]\n    (reduce (fn [m x] \n      (let [sv (set m)]\n      (if (contains? sv x) m (conj m x)))) [] v)\n    )", "user": "59cf4013e4b0ef0a1e9b5b68"}, {"problem": 56, "code": ";#(into [] (set %))\n\n\n(fn [v] (loop [s v res []]\n          \t  (if (empty? s)\n                  res\n                  (recur (rest s) (if (some #(= % (first s)) res)\n                                      res\n                                      (concat res (list (first s))))))))", "user": "594a7ed1e4b07ddc2dafae02"}, {"problem": 56, "code": "(fn\n [coll]\n (loop\n  [coll coll result []]\n  (if\n   (empty? coll)\n   result\n   (if (some (set [(first coll)])\n             result)\n     (recur (rest coll) result)\n     (recur (rest coll) (conj result (first coll)))))))", "user": "56403765e4b08d4f616f5edc"}, {"problem": 56, "code": "reduce (fn [col1 col2] (if ((set col1) col2) col1 (conj col1 col2))) []", "user": "59a8405ce4b0bcf4e9a43af1"}, {"problem": 56, "code": "(fn find-distinct [arr]\n\t(reduce (fn [a b]\n\t\t(if ((set a) b)\n\t\t  a\n\t\t  (conj a b)))\n\t\t[]\n\t\tarr))", "user": "59ac559ee4b00adcf69795d2"}, {"problem": 56, "code": "reduce (fn [coll v] (if (some #(= v %) coll) coll (conj coll v))) []", "user": "59e0f38ae4b08badc2a0c500"}, {"problem": 56, "code": "(fn f \n\t([c]\n\t\t(f c []))\n\t([c r]\n\t\t(if-not (empty? c)\n\t\t\t\t(if (.contains r (first c))\n\t\t\t\t\t(f (rest c) r)\n\t\t\t\t\t(f (rest c) (conj r (first c))))\n\t\t\t\tr)))", "user": "54a11042e4b09f271ff37c49"}, {"problem": 56, "code": "(fn [xs]\n  (first\n    (reduce (fn [[accu seen] k]\n              (if-not (seen k)\n                [(conj accu k) (assoc seen k true)]\n                [accu seen]))\n            [[] {}]\n            xs)))", "user": "59eb63e3e4b0249b7282077c"}, {"problem": 56, "code": "(fn [xs]\n  ((reduce \n    #(if ((% 1) %2) % [(conj (% 0) %2) (conj (% 1) %2)]) \n    [[] #{}] \n    xs\n  ) 0)\n)", "user": "56327168e4b0bfe05bf117a5"}, {"problem": 56, "code": "(fn [xs]\n (loop [rs xs\n         acc []]\n  (if (empty? rs)\n   acc\n   (if (some #(= % (first rs)) acc)\n    (recur (rest rs) acc)\n    (recur (rest rs) (conj acc (first rs)))\n))))", "user": "57eaf869e4b0bfb2137f5b56"}, {"problem": 56, "code": "#(map key (sort-by\r\n            (fn [a]\r\n              (val a))\r\n            (reduce\r\n             (fn [ret x]\r\n               (if (contains? ret x)\r\n                 ret\r\n                 (assoc ret x (count ret))))\r\n             {}\r\n             %)))", "user": "580e7761e4b0849f6811b753"}, {"problem": 56, "code": "(fn [coll]\n  (first (reduce (fn [[result seen] item] \n                   (if (seen item) \n                     [result seen] \n                     [(conj result item) (conj seen item)]))\n                 [[] #{}]\n                 coll)))", "user": "59ee6801e4b0966464fe6a1f"}, {"problem": 56, "code": "reduce (fn [acc x] \n          (if (contains? (set acc) x)  \n            acc \n            (conj acc x)) ) []", "user": "59bdf0eae4b0a024fb6ae42e"}, {"problem": 56, "code": "(fn  [coll]\n  (reduce (fn [xs x]\n            (if (nil? (some #{x} xs))\n              (conj xs x)\n              xs))\n          [] coll))", "user": "5794fd7be4b0e215f87e8476"}, {"problem": 56, "code": "(fn furp [acc x]\n  (if (empty? x)\n    acc\n    (furp (conj acc (first x))\n          (filter #(not= % (first x)) x))\n  )\n) []", "user": "59d75e36e4b0ef0a1e9b5c32"}, {"problem": 56, "code": "reduce (fn [coll x] (if (some #{x} coll) coll (conj coll x))) []", "user": "59ba2ea0e4b0a024fb6ae3e1"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "572de985e4b0cd1946bd0f7c"}, {"problem": 56, "code": "(fn custom-distinct [s]\n  (reduce\n    #(if ((set %1) %2)\n       %1\n       (conj %1 %2))\n    []\n    s))", "user": "59f78b49e4b0ca45a743a30e"}, {"problem": 56, "code": "(fn [xs]\n    (reduce\n     #(if ((set %1) %2)\n        %1\n        (conj %1 %2))\n     []\n     xs))", "user": "539fa040e4b0ca733b97449f"}, {"problem": 56, "code": "(fn __ ([s] (__ s [] #{}))\n  ([s acc junk]\n   (if (empty? s) \n     acc\n     (let [[x & xs] s]\n       (if (junk x)\n         (recur xs acc junk)\n         (recur xs (conj acc x) (conj junk x)))))))", "user": "55916764e4b0604b3f94d57b"}, {"problem": 56, "code": "(fn dist [coll]\n  (if (< (count coll) 2)\n    coll\n    (let [head (first coll)\n          tail (rest coll)]\n      (cons head (->> tail\n                      (remove #(= % head))\n                      dist)))))", "user": "518279abe4b0353c468deb65"}, {"problem": 56, "code": "(fn [ sq ]\n  (reduce (fn [ acc next]\n            (if (some #(= % next) acc)\n              acc\n              (conj acc next))) [] sq))", "user": "59f90e6ae4b0ca45a743a337"}, {"problem": 56, "code": "(fn [coll]\n  (loop [x (first coll)\n         xs (rest coll)\n         distincts #{}\n         result []]\n    (if (nil? x)\n      result\n      (if (distincts x)\n        (recur (first xs) (rest xs) distincts result)\n        (recur (first xs) (rest xs) (conj distincts x) (conj result x))))))", "user": "52fe31d5e4b047fd55837038"}, {"problem": 56, "code": "#(reduce (fn [coll e]\n           (if (some (partial = e) coll)\n             coll\n             (concat coll (list e))))\n         (empty %) %)", "user": "59a080e3e4b0871e7608b837"}, {"problem": 56, "code": "(partial reduce (fn [memo el]\n                  (if (some #(= el %) memo)\n                    memo\n                    (conj memo el))) [])", "user": "59fa241ee4b0ca45a743a358"}, {"problem": 56, "code": "(fn[xs] (reduce #(if (.contains %1 %2) %1 (conj %1 %2)) [] xs))", "user": "5a01d8f6e4b01bb0ae8afd53"}, {"problem": 56, "code": "(fn[input] \n  (loop [finalList [] currentSet #{} currentInput input]\n        (let [currentItem (first currentInput)]\n        (if (empty? currentInput)\n        \tfinalList\n        \t(if (contains? currentSet currentItem)\n            \t(recur finalList currentSet (rest currentInput))\n                (recur (conj finalList currentItem) (conj currentSet currentItem) (rest currentInput)))))))", "user": "571172ece4b09c608db70446"}, {"problem": 56, "code": "(fn [s]\n  (first (reduce (fn [a x]\n            (let [[d f] a]\n              (if (f x) \n                a\n                (map #(conj % x) a))))\n          [[] #{}]\n          s)))", "user": "594bc16be4b07ddc2dafae39"}, {"problem": 56, "code": "(fn [a]\n  (reduce (fn [a i] ; add i to a if it's not already in\n\n      (if ((set a) i)\n       a\n       (conj a i))\n            \n            )\n            []\n            a\n          )\n  )", "user": "56f2611fe4b04a395b9a04a2"}, {"problem": 56, "code": "reduce (fn[a e]\n         (if (not (some #(= % e) a))\n           (conj a e) a))\n       []", "user": "58d96bdce4b0a4d5acaab638"}, {"problem": 56, "code": "(fn f[a] (if (empty? a) [] (let [x (f (butlast a)) A (last a)] (if (some (partial = A) x) x (conj x A)))))", "user": "59e8bb43e4b0249b72820735"}, {"problem": 56, "code": "(fn f [col]\n    (loop [c col\n           l []\n           s #{}]\n      (if (empty? c)\n        (reverse l)\n        (if (s (first c))\n          ; already seen so skip\n          (recur (rest c) l s)\n          ; not already seen\n          (recur (rest c) (cons (first c) l) (conj s (first c)))))))", "user": "5a00cb31e4b01bb0ae8afd36"}, {"problem": 56, "code": "(fn [x]\n  (reduce (fn [agg v] \n            (if (contains? (apply hash-set agg) v) agg (conj agg v))) \n          [] \n          x))", "user": "57ea2c91e4b0bfb2137f5b42"}, {"problem": 56, "code": "(fn [a]\n  (reduce\n   (fn [r n]\n     (if ((set r) n)\n       r\n       (conj r n))) [] a))", "user": "57c314f3e4b05aa3c4741cba"}, {"problem": 56, "code": "(comp\n :result\n #(reduce\n   (fn [{r :result m :seen} x]\n     (if\n       (contains? m x)\n       {:result r :seen m}\n       {:result (conj r x) :seen (conj m x)}))\n   {:result [] :seen #{}}\n   %))", "user": "5a080bdde4b01bb0ae8afde9"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5a0a25fce4b0eab8c044893d"}, {"problem": 56, "code": "(fn [list] \n  (sort-by (fn [x] (.indexOf list x)) (keys (group-by identity list))))", "user": "5a12dea3e4b04bbd27e6da44"}, {"problem": 56, "code": "reduce (fn [acc nxt] (if (.contains acc nxt) acc (conj acc nxt))) []", "user": "59fa5773e4b0ca45a743a35e"}, {"problem": 56, "code": "(fn f [[x & r]]\n  (if x\n    (cons x (f (remove #{x} r)))))", "user": "53ea5851e4b036ad0777e4e4"}, {"problem": 56, "code": "reduce (fn [a b]\n            (if (some #(= b %) a)\n                a\n                (conj a b))) []", "user": "59fd069ae4b01bb0ae8afcf4"}, {"problem": 56, "code": "(fn my-distinct\n  [coll]\n  (filter #(not= % []) \n          (reduce (fn [acc e] (if (some (fn [x] (= x e)) acc) (conj acc []) (conj acc e)))\n                  [] \n                  coll))\n  )", "user": "59f44189e4b0966464fe6aab"}, {"problem": 56, "code": "(fn [c]\n  (map first (take-while seq (iterate (fn [[h & t]] (remove #{h} t)) c))))", "user": "54497569e4b032a45b8693d2"}, {"problem": 56, "code": "#(loop [seen #{}\n         o []\n         [f & r] %]\n    (if (nil? f)\n      o\n      (if (seen f)\n        (recur seen o r)\n        (recur (conj seen f) (conj o f) r))))", "user": "4dc78527535d8a4b2fd7428f"}, {"problem": 56, "code": "(fn [xs] (let [fr (fn [res ts] \n                       (if (first ts) \n                           (if ((set res) (first ts)) \n                                (recur res (rest ts))\n                                (recur (conj res (first ts)) (rest ts)))\n                           res )\n                       )]\n                 (fr [] xs) \n             ))", "user": "59ff9424e4b01bb0ae8afd24"}, {"problem": 56, "code": "(fn [xs]\n  (loop [xs xs\n         s #{}\n         acc []]\n    (if (empty? xs)\n      acc\n      (if (s (first xs))\n        (recur (rest xs) s acc)\n        (recur (rest xs) (conj s (first xs)) (conj acc (first xs)))))))", "user": "5a250b86e4b07f18be40aa19"}, {"problem": 56, "code": "(fn __\n  ([col] (__ #{} col))\n  ([elements col]\n   (if-let [[head & tail] col]\n     (lazy-seq\n       (if (contains? elements head)\n         (__ elements tail)\n         (cons head (__ (conj elements head) tail)))))))", "user": "58f44c07e4b0438e51c2ceb7"}, {"problem": 56, "code": "#(reduce \n    (fn [s y]\n      (if (not (some (partial = y) s))\n        (conj s y)\n        s)) [] %)", "user": "5a14228fe4b0ff51aa4b3193"}, {"problem": 56, "code": "(fn [xs] (reduce \n          (fn [x y] \n            (if (some #(= y %) x) \n              x \n              (conj x y)))\n          [] xs))", "user": "5a16da30e4b0ff51aa4b31cc"}, {"problem": 56, "code": "(fn [sqn] (reduce (fn [o, x] (if (some #{x} o) o (conj o x))) [] sqn))", "user": "5a2a0cb6e4b09cafd31c7f2c"}, {"problem": 56, "code": "(fn [list]\n  (reduce\n   (fn [st elem] (if (= ((set st) elem) nil)\n                    (conj st elem)\n                    st))\n   [] list))", "user": "5a1bec89e4b0ff51aa4b322f"}, {"problem": 56, "code": "(fn [coll]\n  (let [[_ v] (reduce\n                (fn [[s v] e]\n                  (if (s e)\n                    [s v]\n                    [(conj s e) (conj v e)]))\n                [#{} []]\n                coll)]\n    v))", "user": "58bc0531e4b0888cdc949d07"}, {"problem": 56, "code": "(fn [l] (loop [s #{} l l result []]\n  (if (empty? l)\n    result\n    (if\n      (get s (first l))\n      (recur s (rest l) result)\n      (recur (conj s (first l)) (rest l) (conj result (first l)))))))", "user": "5a2df4a0e4b09cafd31c7f74"}, {"problem": 56, "code": "(fn dstnct [xs]\n   (if (= (count (set xs)) (count xs))\n      xs\n      (keys (group-by identity xs))))", "user": "59f043d0e4b0966464fe6a3d"}, {"problem": 56, "code": "(fn [xs]\n    (loop [ys xs\n           s #{}\n           r nil]\n          (if (empty? ys)\n              (reverse r)\n              (recur (rest ys) (conj s (first ys)) (if (contains? s (first ys))\n                                                       r\n                                                       (conj r (first ys)))))))", "user": "5a34f342e4b0ddc586f153d1"}, {"problem": 56, "code": "(fn[col]\n  (loop [acc []\n         tail  col]\n    (if (empty? tail)\n      (reverse acc)\n      (let [ch (first tail)]\n      (recur (cons ch acc)\n             (remove #(= ch %) tail)\n             )\n      )))\n\n    )", "user": "5a2834dfe4b07f18be40aa64"}, {"problem": 56, "code": "#(loop\n   [elems %\n    newseq []\n    covered #{}]\n   (if (empty? elems)\n     newseq\n     (recur (rest elems)\n            (if (covered (first elems))\n              newseq\n              (conj newseq (first elems)))\n            (conj covered (first elems)))))", "user": "5a3ece62e4b0447ef91cc5b9"}, {"problem": 56, "code": "(fn [ s ] ( loop [ se ( next s) res [ (first s) ] ks #{ (first s) }]\n( if ( empty?  se )\nres\n(do \n( if (contains? ks (first se))\n(recur ( next se) res ks)\n( recur (next se ) (conj res ( first se))(conj ks (first se))))))) )", "user": "5a1c8c26e4b0ff51aa4b3247"}, {"problem": 56, "code": "(fn [s] (reduce (fn [r e] \n    (if (some #(= e %) r)\n      r\n      (conj r e)))\n    [] s))", "user": "5957cc41e4b066ee0a44af76"}, {"problem": 56, "code": "(fn my-distinct [coll]\n  (loop [previous '() [head & tail] coll]\n    (if (nil? head)\n      (reverse previous)\n      (recur (if (some #{head} previous) previous (conj previous head)) tail))))", "user": "5773f3a9e4b0979f896515f2"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5a3c5c54e4b001c08efc0ce3"}, {"problem": 56, "code": "(fn[z]\n  (reduce #(or(and(nil?(some #{%2} %))\n      (conj % %2))\n      %) [] z))\n#_(fn[z]\n (reduce \n #(if (nil?(some #{%2} %))\n  (conj % %2)\n    %) [] z))\n#_(fn\n[z]\n(reduce \n  (fn[x n]\n    \n(cond (nil? (some #{n} x))\n       (conj x n)\n       :t\n       x))[] z))", "user": "52faf67ce4b047fd55837005"}, {"problem": 56, "code": "(fn [coll]\n  (reduce (fn [init item]\n            (if (some #(= item %1) init)\n              init\n              (conj init item))) [] coll))", "user": "58a6806ee4b01a0c0b23292f"}, {"problem": 56, "code": "reduce (fn [v element]\n         (if (some #(= % element) v )\n           v\n           (conj v element))) []", "user": "5a4443cae4b0447ef91cc60f"}, {"problem": 56, "code": "#(reduce (fn [a x] (if (contains? (into #{} a) x) a (conj a x))) [] %)", "user": "5a4de614e4b05d388ecb6bb1"}, {"problem": 56, "code": "(fn [a]\n  (let [f (fn [x b]\n            (reduce #(cond\n                       (= %2 x) true\n                       (and (not= %2 x) (not (true? %1))) false\n                       :else %1) false b))]\n    (reduce #(if (false? (f %2 %1))\n               (conj %1 %2)\n               %1) [] a)))", "user": "52281e1ee4b0186687e23a69"}, {"problem": 56, "code": "#(map first (sort-by val > (zipmap (reverse %) (range))))", "user": "5a4993c0e4b05d388ecb6b71"}, {"problem": 56, "code": "(fn dedup [coll]\n  (loop [c coll seen #{} acc []]\n    (if (empty? c)\n      acc\n      (let [x (first c)]\n        (recur (rest c) (conj seen x) (if (seen x)\n                                        acc\n                                        (conj acc x)))))))", "user": "5182de5ce4b0353c468deb74"}, {"problem": 56, "code": "#(reduce (fn [coll item] (if-not (contains? (set coll) item) (conj coll item) coll)) [] %)", "user": "5a535572e4b05d388ecb6c0b"}, {"problem": 56, "code": "#(loop [acc [] ys %]\n       (if (empty? ys)\n            acc\n            (\n              recur  (if (.contains acc (first ys)) acc (conj acc (first ys)) )\n                     (rest ys)\n            )\n))", "user": "55d7312ee4b0e31453f64a9f"}, {"problem": 56, "code": "(fn find-dis [arg]\n  (reduce (fn [s e]\n            (if (some #(= % e) s)\n              s\n              (conj s e)))\n          [] arg))", "user": "565654dae4b0f9d632dd849f"}, {"problem": 56, "code": "reduce (fn [coleccion valor]\n  (if (some #(= % valor) coleccion)\n    coleccion\n    (conj coleccion valor)))\n[]", "user": "59dfb8dbe4b08badc2a0c4da"}, {"problem": 56, "code": ";(fn [x] (:out (reduce\n;  (fn [{out :out seen :seen} item]\n;    (let [next-out (if (nil? (seen item))\n;                     (conj out item)\n;                     out)\n;          next-seen (conj seen item)]\n;      {:out next-out :seen next-seen})) {:out [] :seen #{}} x)))\n\n(fn [x]\n  (let [not-there (gensym)]\n    (loop [out      []\n           seen     #{}\n           [x & xs] x]\n      (cond (nil? x) out\n            (= not-there (get seen x not-there)) (recur (conj out x) (conj seen x) xs)\n            :else (recur out seen xs)))))", "user": "5a566e8fe4b05d388ecb6c51"}, {"problem": 56, "code": "(fn [coll]\n    (loop [seen #{}\n           to-go coll\n           kept []]\n      (if-not (seq to-go)\n        kept\n        (let [item  (first to-go)]\n          (if (seen item)\n            (recur seen (rest to-go) kept)\n            (recur (conj seen item)\n                   (rest to-go)\n                   (conj kept item)))))))", "user": "53716539e4b0fc7073fd6eb1"}, {"problem": 56, "code": "reduce (fn [x y] (if-not (some #(= % y) x) (conj x y) x)) []", "user": "5a4d656fe4b05d388ecb6ba9"}, {"problem": 56, "code": "(fn remove-duplicates [s]\n  (if (empty? s) []\n    (cons (first s) \n          (remove-duplicates (filter (complement #(= (first s) %)) s)))))", "user": "53f053ebe4b0742d9025b0d3"}, {"problem": 56, "code": "(fn [v]\n   (reduce (fn [acc v]\n             (if (some #{v} acc)\n               acc\n               (conj acc v)))\n           []\n           v))", "user": "51dafedee4b09f6bc204eee2"}, {"problem": 56, "code": "(fn [l] \n  (reduce (fn [res elem] (if (some #(= % elem) res) res (conj res elem))) [] l))", "user": "5a621702e4b0512ff01cd983"}, {"problem": 56, "code": "(fn ditems [coll] (reduce\n  (fn [acc val] (if (some #(= val %) acc)\n                  acc\n                  (conj acc val)))\n  []\n  coll))", "user": "5779556de4b0979f8965166e"}, {"problem": 56, "code": "(fn [coll]\n  (reduce\n    #(if (some (fn [x] (= x %2)) %1)\n       %1\n       (conj %1 %2))\n    [] coll))", "user": "5a4caa20e4b05d388ecb6b94"}, {"problem": 56, "code": "(fn [col]\n  (loop [ret []\n         seen #{}\n         proc col]\n    (if (not (seq proc))\n      ret\n      (let [e     (first proc)\n            new-e (not (contains? seen e))]\n        (recur (if new-e (conj ret  e) ret)\n               (if new-e (conj seen e) seen)\n               (rest proc))))))", "user": "5a624129e4b0512ff01cd987"}, {"problem": 56, "code": "(fn [coll] (reduce #(if (contains? (set %) %2) % (conj % %2)) [] coll))", "user": "5a536cf2e4b05d388ecb6c10"}, {"problem": 56, "code": "(fn [coll] (reduce\n #(if (contains? (set %1) %2)\n    %1 (conj %1 %2))\n[] coll))", "user": "5a424954e4b0447ef91cc5f0"}, {"problem": 56, "code": "#(reduce (fn [a i] (if (some (hash-set i) a) a (conj a i))) [] %)", "user": "527ba29de4b03e8d9a4a7594"}, {"problem": 56, "code": "(fn \n  [coll] \n  (let \n    [in? (fn [n c] (some #(= n %) c))] \n    (reduce #(if (in? %2 %1) %1 (conj %1 %2)) [] coll)))", "user": "5a34de78e4b0ddc586f153d0"}, {"problem": 56, "code": "(fn [coll]\n    (reverse (reduce (fn [acc item]\n              (if (contains? (set acc) item)\n                acc\n                (conj acc item)))\n            '() coll)))", "user": "5a58bfd0e4b05d388ecb6c84"}, {"problem": 56, "code": "(fn [s]\n    (::result\n     (reduce (fn [m e] (if (contains? m e)\n                         m\n                         (assoc m e nil ::result (conj (or (::result m) []) e))))\n             {}\n             s)))", "user": "5a5d0726e4b0512ff01cd91b"}, {"problem": 56, "code": "(fn f\n  ([s] (f s [] #{}))\n  ([s r t] (if\n           (empty? s)\n           r\n           (recur\n            (rest s)\n            (if (contains? t (first s)) r (conj r (first s)))\n            (conj t (first s))\n            ))))", "user": "5a3c2a08e4b001c08efc0cdf"}, {"problem": 56, "code": "(fn\n  [x]\n  (loop [[y & ys] x h []]\n    (if y\n      (recur ys (if (some #(= y %) h)\n        h\n        (conj h y)))\n      h)))", "user": "5a067f26e4b01bb0ae8afdcc"}, {"problem": 56, "code": "(fn\n      [col]\n      (loop [viewed #{}\n             new-list '()\n             left col]\n        (if (not (empty? left))\n          (if (not (contains? viewed (first left)))\n            (recur (conj viewed (first left)) (conj new-list (first left)) (drop 1 left))\n            (recur viewed new-list (drop 1 left)))\n          (reverse new-list))))", "user": "5a58d8a0e4b05d388ecb6c8a"}, {"problem": 56, "code": "(fn [l]\n    (second  (reduce (fn [[seen output] x]\n                       (if (contains? seen x)\n                         [seen output]\n                         [(conj seen x) (conj output x)])) [#{} []] l)))", "user": "55c1eb52e4b0e31453f64970"}, {"problem": 56, "code": "(fn aux \n             ([x] (aux x [] (set x)))\n             ([x y s] \n                 (if (seq s)\n                     (recur (rest x) (if (s (first x)) (conj y (first x)) y) (disj s (first x)))\n                     y)))", "user": "58a822e4e4b01a0c0b232950"}, {"problem": 56, "code": "reduce (fn [agg el]\n         (if (contains? (set agg) el)\n              agg\n              (conj agg el)))\n          []", "user": "5a527beee4b05d388ecb6bfe"}, {"problem": 56, "code": "(fn [s]\n  (loop [[head & tail] s res []]\n    (if (nil? head)\n      res\n      (recur (remove #(= % head) tail) \n             (conj res head)))))", "user": "5a52f2cbe4b05d388ecb6c06"}, {"problem": 56, "code": "(fn [coll]\n   (loop [seen []\n          c coll]\n     (if (empty? c)\n       seen\n       ;; else not ended\n       (if (some #{(first c)} seen)\n\n         (recur seen (rest c))\n         ;; else\n         (recur (conj seen (first c)) (rest c))\n         ))))", "user": "58637221e4b0f14aab7c881d"}, {"problem": 56, "code": "(fn unique [s]\n  (loop [s s\n         res []]\n    (if (seq s)\n      (recur\n       (filter #(not= (first s) %) s)\n       (conj res (first s)))\n      res)))", "user": "5a6b9b95e4b0512ff01cda40"}, {"problem": 56, "code": "(fn [xs]\n    (reduce #(if (=\n                  (count (set %1))\n                  (count (set (conj %1 %2))))\n               %1 (conj %1 %2)) [] xs))", "user": "5920c191e4b09b4ee5954c61"}, {"problem": 56, "code": "(fn [coll]\n  (reduce #(if (some #{%2} %) % (conj % %2)) [] coll))", "user": "5a6af090e4b0512ff01cda2d"}, {"problem": 56, "code": "reduce #(if (get (set %1) %2) %1 (conj %1 %2)) []", "user": "5a244240e4b0ff51aa4b32e9"}, {"problem": 56, "code": "#(into []\n  (reduce (fn [res x]\n            (do\n              (.add res x)\n              res))\n  (java.util.LinkedHashSet.)\n  %))", "user": "5a1c3c11e4b0ff51aa4b323d"}, {"problem": 56, "code": "(fn dist\n  [[x & xs]]\n  (if (nil? xs)\n    (list x)\n    (conj (filter #(not= x %)\n                  (dist xs)) x)))", "user": "5a188be3e4b0ff51aa4b31ec"}, {"problem": 56, "code": "reduce (fn [s e]\n  (if (some #(= % e) s)\n    s\n    (conj s e)))\n[]", "user": "58db3c5ae4b0a4d5acaab677"}, {"problem": 56, "code": "(fn remove-duplicates[s]\n  (letfn [(rd[s elems]\n    (when (seq s)\n      (lazy-seq\n       (if (not (elems (first s)))\n         (cons (first s) (rd (rest s) (conj elems (first s))))\n         (rd (rest s) elems)))))]\n    (doall (rd s #{}))))", "user": "4fd4bddce4b0d4de60cee36e"}, {"problem": 56, "code": "(fn dist [xs] \n  (reduce \n   (fn [acc x] (if (some #(= x %) acc)\n                 acc\n                 (conj acc x)))\n   [] \n   xs))", "user": "552d9b31e4b076ab5578f7eb"}, {"problem": 56, "code": "(fn [coll] (reduce #(if(apply distinct? (conj %1 %2)) (conj %1 %2) %1) [] coll))", "user": "5a59a76fe4b05d388ecb6c98"}, {"problem": 56, "code": "(fn [coll] (let [dst (fn [sq rs st]\n             (let [x (first sq)\n                   r (rest sq)\n                   nrs (if (get st x) rs (conj rs x))]\n               (if (seq r)\n                 (recur r nrs (conj st x))\n                 nrs)))]\n  (dst coll [] #{})))", "user": "5a5dbe9de4b0512ff01cd92b"}, {"problem": 56, "code": "#(loop [in %1 out []]\n    (if (not-empty in)\n      (if (some #{(first in)} out)\n        (recur (rest in) out)\n        (recur (rest in) (concat out [(first in)])))\n      out\n      ))", "user": "5a80b934e4b00b71e582a05b"}, {"problem": 56, "code": "(fn [coll] (first (reduce (fn [[res seenset] v] (if (contains? seenset v) [res seenset] [(conj res v) (conj seenset v)])) [[] #{}] coll)))", "user": "5a813b90e4b00b71e582a065"}, {"problem": 56, "code": "#(reduce (fn [v e]\n            (if ((set v) e)\n              v\n              (conj v e))) [] %)", "user": "5a4b3abde4b05d388ecb6b81"}, {"problem": 56, "code": "(fn [seq] (reduce #(if (contains? (set %1) %2) %1 (conj %1 %2)) [] seq))", "user": "5a86ad84e4b05369db4d249c"}, {"problem": 56, "code": "(fn [coll] \n    (reduce #(if-not (some #{%2} %1) (conj %1 %2) %1)\n            []\n            coll))", "user": "58ffaddee4b0438e51c2cffe"}, {"problem": 56, "code": "(fn my-distinct [xs]\n  (if (seq xs)\n    (let [[x & ys] xs]\n      (cons x\n            (lazy-seq\n             (->> ys\n                  (filter (partial not= x))\n                  my-distinct))))\n    nil))", "user": "5a95c639e4b0d174b936c75e"}, {"problem": 56, "code": "(fn [x]\n  (let [n (count x)]\n    (loop [i 0 out []]\n      (if (= n i) (into [] out)\n          (let [y (nth x i)]\n            (recur (inc i) (if-not (some #(= % y) out) (conj out y)\n                                   out)))))))", "user": "58f5b58ae4b0438e51c2cedc"}, {"problem": 56, "code": "(fn dist [coll]\n  (loop [[h & t] coll\n         s #{}\n         acc []]\n    (if h\n    \t(recur t (conj s h) (if-not (s h) (conj acc h) acc))\n      \tacc)))", "user": "598858d0e4b021a7a535feb5"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "4ed45563535d10e5ff6f52c9"}, {"problem": 56, "code": "(fn [coll]\n  (let [in? (fn [coll elm]  \n              (some #(= elm %) coll))]\n  (loop [coll coll\n         seen []]\n    (if (empty? coll)\n      seen\n      (recur (rest coll)\n             (if-not (in? seen (first coll))\n               (conj seen (first coll))\n               seen))))))", "user": "5a9181c5e4b002d099cae6f6"}, {"problem": 56, "code": "#(let [d (keys (group-by identity %))] (if (> (count d) 5) (sort d) d))", "user": "5a653f80e4b0512ff01cd9b2"}, {"problem": 56, "code": "(fn my-distinct\n  ([coll] (my-distinct coll #{} (empty coll)))\n  ([coll distinct-values result] (if (empty? coll)\n                                   result\n                                   (recur \n                                     (rest coll)\n                                     (conj distinct-values (first coll))\n                                     (if (contains? distinct-values (first coll))\n                                       result\n                                       (concat result (list (first coll))))))))", "user": "55b28b57e4b01b9910ae296c"}, {"problem": 56, "code": "(fn foo [x]\n  (loop [in x out [] inset #{}]\n    (let [y (first in)\n          r (rest in)]\n      (if (empty? in)\n        out\n      \t(if (contains? inset y)\n          (recur r out inset)\n          (recur r (conj out y) (clojure.set/union inset #{y})))))))", "user": "5a6a7cc5e4b0512ff01cda27"}, {"problem": 56, "code": "(fn dist [coll]\n  (loop [[head & tail] coll\n         acc #{}\n         res []]\n    (if-not head\n      res\n      (recur tail\n             (conj acc head)\n             (if (acc head) res (conj res head))))))", "user": "50310713e4b05b7df5a0b84c"}, {"problem": 56, "code": "(fn [coll] \n  (letfn [(dedup [a bs]\n            (if (not (seq bs))\n              a\n              (if (some #{(first bs)} a)\n                (dedup a (rest bs))\n                (dedup (concat a [(first bs)]) (rest bs)))))]\n   (dedup [(first coll)] (rest coll))))", "user": "5a9dbb32e4b0d174b936c7f3"}, {"problem": 56, "code": "(fn [xs]\n  (loop [[x & tail] xs\n         seen #{}\n         unique []]\n    (if x\n      (recur tail (conj seen x) (if (seen x) unique (conj unique x)))\n      unique)))", "user": "59ac0965e4b08cbb53654da6"}, {"problem": 56, "code": "(fn myDistinct\n  ([xs] (myDistinct xs #{}))\n  ([xs s]\n    (cond\n      (empty? xs) '()\n      (s (first xs)) (myDistinct (rest xs) s)\n      :else (conj (myDistinct (rest xs) (conj s (first xs))) (first xs)))))", "user": "5aa5951ae4b0d174b936c899"}, {"problem": 56, "code": "(fn spf\n  ([coll] (spf coll [] #{}))\n  ([coll ans found]\n   (if (empty? coll)\n     ans\n     (if (found (first coll))\n       (spf (rest coll) ans found)\n       (spf (rest coll) (conj ans (first coll)) (conj found (first coll)))\n       )\n     )\n   )\n  )", "user": "5a90395ce4b05369db4d254a"}, {"problem": 56, "code": "(fn [col]\n  (loop [outvec []\n         incol col\n         dupdata #{}]\n    (if (empty? incol)\n      outvec\n      (if (contains? dupdata (first incol))\n        (recur outvec (rest incol) dupdata)\n        (recur (conj outvec (first incol)) (rest incol) (conj dupdata (first incol)))))))", "user": "56197b47e4b053970a773af8"}, {"problem": 56, "code": "(fn[%1] (reverse (reduce (fn[a b] (if (= (some #(= b %) a) nil) (conj a b) a)) '() %1)))", "user": "5a63f8bae4b0512ff01cd99f"}, {"problem": 56, "code": "(fn __ [aseq]\n  (loop [r [] seen {} as aseq]\n    (cond\n      (empty? as) r\n      (get seen (first as)) (recur r seen (rest as))\n      :else (recur (conj r (first as)) (assoc seen (first as) true) (rest as))\n      ))\n  )", "user": "5a0ce1a5e4b04bbd27e6d9b7"}, {"problem": 56, "code": "(fn my-distinct\n  ([seq] (my-distinct seq #{} []))\n  ([seq seen output]\n   (if (empty? seq)\n     output\n     (if (seen (first seq))\n       (recur (rest seq) seen output)\n       (recur (rest seq) (conj seen (first seq)) (conj output (first seq)))\n       )\n     )\n    )\n  )", "user": "5aada061e4b073f17744257a"}, {"problem": 56, "code": "(fn [list]\n  (reduce (fn [acc x] \n      (if (some #{x} acc)\n      acc\n      (conj acc x)))\n  []  list))", "user": "5ab1cc3de4b073f1774425dc"}, {"problem": 56, "code": "#(loop [toDedupe %, items #{}, res []]\n  (if (empty? toDedupe)\n    res\n    (if (contains? items (first toDedupe))\n      (recur (rest toDedupe) items res)\n      (recur (rest toDedupe) (conj items (first toDedupe)) (conj res (first toDedupe))))))", "user": "5ab5f60be4b073f177442643"}, {"problem": 56, "code": "(fn mydistinct [coll]\n  (loop [input coll\n         result []]\n    (println result input)\n    (if (empty? input)\n      result\n      (recur (rest input) (let [item (first input)]\n                            (if (not= nil (some (set (vector item)) result))\n                              result\n                              (conj result item)))))))", "user": "5ab490f4e4b073f17744261d"}, {"problem": 56, "code": "(fn [x] (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] x))", "user": "57b19fa1e4b0fbc9809a2754"}, {"problem": 56, "code": "reduce\n(fn [seen value]\n  (if (some #{value} seen)\n    seen\n    (conj seen value)))\n[]", "user": "4ee897fe535d93acb0a66883"}, {"problem": 56, "code": "(fn my-distinct [s]\n  (first (reduce \n    (fn [[v seen] next]\n       (if (contains? seen next)\n          [v seen]\n          [(conj v next) (conj seen next)]))\n    [[] #{}]\n    s)))", "user": "5aa998c6e4b0d174b936c8e5"}, {"problem": 56, "code": "(fn [coll]\n   (reduce (fn [v e]\n             (if (some #(= % e) v)\n               v\n               (conj v e))) [] coll))", "user": "5ab23c99e4b073f1774425e2"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5abc5a09e4b073f1774426e9"}, {"problem": 56, "code": "(fn [colls] \n  (loop [colls colls\n         res []]\n    (if (empty? colls)\n      res\n      (recur (filter #(not= (first colls) %) (rest colls)) (conj res (first colls))))))", "user": "5a67cedbe4b0512ff01cd9ee"}, {"problem": 56, "code": "(fn dis [col]\n    (let [dist (fn [col res]\n                 (if (empty? col)\n                   res\n                   (if-not (some #(= (first col) %)\n                                   res)\n                     (recur (rest col)\n                            (conj res (first col)))\n                     (recur (rest col) res))))]\n      (dist col [])))", "user": "59636cc2e4b066ee0a44b0c7"}, {"problem": 56, "code": "(fn [s] (loop [a [] e #{} r s] (if (empty? r) a (if (contains? e (first r)) (recur a e (rest r)) (recur (conj a (first r)) (conj e (first r)) (rest r))))))", "user": "5ab564f8e4b073f177442639"}, {"problem": 56, "code": "(fn [s] (let [is (map-indexed (fn [i e] [e i]) s) um (reduce (fn [m p] (if (contains? m (p 0)) m (assoc m (p 0) (p 1)))) {} is)] (map (fn [p] (p 0)) (filter (fn [p] (= (um (p 0)) (p 1))) is))))", "user": "5abe2fc2e4b073f17744271e"}, {"problem": 56, "code": "#(->> (cons [] %)\n      (reduce (fn [a b] (if (some (fn [x] (= b x)) a) a (conj a b)))))", "user": "5ab1665de4b073f1774425c0"}, {"problem": 56, "code": "(fn [elems]\n    (map first\n       (sort-by second\n                (map (fn [elem] [elem (.indexOf elems elem)])\n                     (set elems)))))", "user": "5ac6ef9be4b0e27600da7779"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5ac4d1f6e4b0e27600da7735"}, {"problem": 56, "code": "(fn [l]\n    (loop [l l\n           res []\n           hash {}]\n      (let [el (first l)\n            tail (rest l)\n            el? (get hash el)]\n        (if el\n          (recur tail (if-not el? (conj res el) res) (assoc hash el 0))\n          res))))", "user": "5a8fd113e4b05369db4d2542"}, {"problem": 56, "code": "(fn dist\n  [s]\n\t(reduce (fn\n\t  \t\t  [v n]\n\t\t\t\t(if (nil? (some #{n} v))\n\t\t\t\t(conj v n)\n\t\t\t\tv)\n\t\t\t)\n     [] s \n    ) \n )", "user": "5ac37d0fe4b0e27600da7718"}, {"problem": 56, "code": "(fn find-distinct\n  [coll]\n  (loop [remaining coll\n         final []]\n    (if (empty? remaining)\n      final\n      (if (some #(= (first remaining) %) final)\n        (recur (rest remaining) final)\n        (recur (rest remaining) (conj final (first remaining)))))))", "user": "5ac35d00e4b0e27600da7712"}, {"problem": 56, "code": "(fn [coll]\n (first ( reduce \n   \t(fn [[run dict] x]\n      (if (contains? dict x) \n        \t[run dict]\n   \t  \t\t[(conj run x) (conj dict x)] \n      )\n    )\n   \t[[] #{}]\n    coll\n))\n  )", "user": "5ac85708e4b0e27600da77ac"}, {"problem": 56, "code": "(fn [seq]\n  (let [tp (type seq)]\n    (loop [sq seq ret [] found #{}]\n      (if (empty? sq)\n        (cond\n          (= tp clojure.lang.PersistentList) (apply list ret)\n          (= tp clojure.lang.PersistentList$EmptyList) (apply list ret)\n          :else ret)\n        (let [nxt-el (first sq)\n              new-ret (conj ret nxt-el)\n              new-found (conj found nxt-el)]\n          (recur (drop-while #(contains? new-found %) sq) new-ret new-found))))))", "user": "5a512929e4b05d388ecb6be2"}, {"problem": 56, "code": "(fn my-distinct [col]    (if (not-empty col)\n      (let [head (first col)\n            tail (rest col)]\n        (concat [head] (my-distinct (remove #{head} tail)))\n        )\n      []))", "user": "5acd235ae4b0e27600da7824"}, {"problem": 56, "code": "(fn [i] (reduce (fn [f v] (if-not (some #{v} f) (conj f v) f))[]i))", "user": "5ac92dc3e4b0e27600da77bf"}, {"problem": 56, "code": "#(reduce (fn [acc k]\n           (if (some #{k} acc)\n             acc\n             (conj acc k)))\n         [] %)", "user": "5ad63a34e4b0ea6055cfac01"}, {"problem": 56, "code": "(fn my-hash-map [s]\n    (loop [res [] \n           m #{}\n           [x & y] s]\n          (println res x y)\n          (cond (nil? x)\n                  res\n                (contains? m x)\n                  (recur res m y)\n                :else\n                (recur (conj res x) (conj m x) y))))", "user": "5acd1a43e4b0e27600da7823"}, {"problem": 56, "code": ";; I don't love that this forces things into a seq, but it may be unavoidable.\n;; And it matches clojure.core/distinct\n(fn it [[x & xs]]\n  (if (nil? x)\n    nil\n    (cons x (lazy-seq (remove #(= x %) (it xs))))))", "user": "5a257747e4b07f18be40aa1f"}, {"problem": 56, "code": "#(loop [rl % res nil]\n            (if (empty? rl)\n              (reverse res)\n              (if (some (fn [x] (= x (first rl))) res)\n                (recur (rest rl) res)\n                (recur (rest rl) (cons (first rl) res)))))", "user": "5831846ae4b051871117c02c"}, {"problem": 56, "code": "#(second\n  (reduce (fn [[ss xs :as both] x]\n           (if (contains? ss x)\n             both\n             [(conj ss x) (conj xs x)]))\n          [#{} []] %))", "user": "5a544eeee4b05d388ecb6c24"}, {"problem": 56, "code": "(fn __ [collection]\n  (reduce\n    (fn [distinct-collection value]\n      (if (some #(= value %) distinct-collection)\n        distinct-collection\n        (conj distinct-collection value)))\n    []\n    collection))", "user": "5ac91d90e4b0e27600da77bd"}, {"problem": 56, "code": "(fn [coll] \n\t(loop [res [] du coll] \n\t    (if (empty? du) res \n\t    \t;(into (take 1 du) res))\n\t    \t(if (some #(= (first du) %) res ) \n\t    \t\t(recur res (drop 1 du)) \n\t    \t    (recur (into res (take 1 du) ) (drop 1 du))) \n\t\t)\n\t))", "user": "5ac04101e4b073f177442737"}, {"problem": 56, "code": "(fn [s] (reduce (fn [x y] (if (some #(= % y) x) x (conj x y))) [] s))", "user": "5a9d64c8e4b0d174b936c7eb"}, {"problem": 56, "code": "(fn [xs]\n  (first \n   (reduce (fn [[output seen] x]\n            (if (seen x) \n              [output seen] \n              [(conj output x) (conj seen x)]))\n          [[] #{}]\n          xs))\n  )", "user": "5ade6bafe4b0837691e92c23"}, {"problem": 56, "code": "(fn [coll]\n  (let [uniques (set coll)]\n    (reduce (fn [v i]\n              (if (and (uniques i)\n                       (not ((set v) i)))\n                (conj v i)\n                v))\n            []\n            coll)))", "user": "5aefdc7fe4b0cc2b61a3bc3f"}, {"problem": 56, "code": "reduce\n (fn[acc v]\n   (if (some #(= % v) acc)\n     acc\n     (conj acc v)))\n []", "user": "5976da27e4b01722bebd4ce3"}, {"problem": 56, "code": "reduce (fn [l e] (if-not (some #(= % e) l) (conj l e) l)) []", "user": "5a9a12d6e4b0d174b936c7b7"}, {"problem": 56, "code": "(fn [a]\n  (sort-by #(.indexOf a %)\n           (keys (group-by identity a))))", "user": "4ed90014535d10e5ff6f52fe"}, {"problem": 56, "code": "(fn [s]\n  (loop [r [] v #{} s s]\n    (if (empty? s)\n      r\n      (if (contains? v (first s))\n        (recur r v (rest s))\n        (recur (conj r (first s)) (conj v (first s)) (rest s))))))", "user": "5af907e6e4b0cc2b61a3bcda"}, {"problem": 56, "code": "#(reduce (fn [c i]\n          (if (.contains c i) c (conj c i)))\n        [] %)", "user": "5aeca4c9e4b0cc2b61a3bc0a"}, {"problem": 56, "code": "(fn [coll]\n  (loop [result [] seen #{} remain coll]\n     (if (empty? remain)\n        result\n        (let [x (first remain)]\n          (if (contains? seen x)\n              (recur result seen (rest remain))\n              (recur (conj result x) (conj seen x) (rest remain)))))))", "user": "5aa4a1ffe4b0d174b936c886"}, {"problem": 56, "code": "#(reduce (fn [a x] (if (contains? (set a) x) a (conj a x))) [] %)", "user": "5afb4b15e4b0cc2b61a3bcf6"}, {"problem": 56, "code": "(fn distinct-items\n  [xs]\n  (first (reduce\n          (fn [[distincts visited :as acc] x]\n            (if (visited x)\n              acc\n              [(conj distincts x) (conj visited x)]))\n          [[] #{}]\n          xs)))", "user": "551bdefde4b07993ea3788d7"}, {"problem": 56, "code": "(fn [s]\n  (reduce (fn [a b] (if (not (some #(= % b) a))\n                      (conj a b)\n                      a))\n          [] \n          s))", "user": "5af31955e4b0cc2b61a3bc7a"}, {"problem": 56, "code": "(fn [xs]\n  (let\n    [add-if-not-in (fn [xs x] (if (some #{x} xs) xs (conj xs x)))]\n    (reduce add-if-not-in [] xs)))", "user": "546e4ab8e4b00cfc9eacc19c"}, {"problem": 56, "code": "#(loop [v %\n        s []]\n   (cond (empty? v) s\n         (contains? (set s) (first v)) (recur (rest v) s)\n         :else (recur (rest v) (conj s (first v)))))", "user": "55e732c5e4b050e68259b492"}, {"problem": 56, "code": "(fn find-distinct-items [col]\n  (loop [res []\n         col col\n         uniqueitems #{}]\n    (if (empty? col)\n      res \n      (if (contains? uniqueitems (first col))\n        (recur res (rest col) uniqueitems)\n        (recur (conj res (first col)) (rest col) (conj uniqueitems (first col)))\n        ))))", "user": "5a9ac061e4b0d174b936c7c1"}, {"problem": 56, "code": "(fn [x]\n  (let [result (keys (group-by identity x))]\n  (if (> (count result) 30)\n    (sort result) result)))", "user": "5b0180cfe4b0cc2b61a3bd47"}, {"problem": 56, "code": "(fn [input-vec]\n\t(reduce\n\t\t(fn [coll element]\n\t\t\t(if (not (.contains coll element))\n\t\t\t(conj coll element)\n\t\t\tcoll\n\t\t\t)\n\t\t)\n\t\t[]\n\t\tinput-vec\n\t)\n)", "user": "5a5b9e3ce4b0512ff01cd90b"}, {"problem": 56, "code": "(fn distinctx\n  [coll]\n  (if (empty? coll)\n    '()\n    (let [x (first coll)]\n      (cons x (distinctx (filter #(not= % x) (rest coll)))))))", "user": "5b02a170e4b0cc2b61a3bd52"}, {"problem": 56, "code": "(fn [xs]\n  (first (reduce (fn [[ys acc] x]\n                   [(if (acc x) ys (conj ys x)) (conj acc x)])\n                 [[] #{}] xs)))", "user": "5adf5f9be4b0837691e92c33"}, {"problem": 56, "code": "(fn [coll]\n  (reduce (fn [acc item]\n            (if ((set acc) item)\n              acc\n              (conj acc item)))\n          []\n          coll))", "user": "5ae0976be4b0837691e92c43"}, {"problem": 56, "code": "(fn distinct-items [s]\n  (reduce #(if-not (some (fn [x] (= %2 x)) %1) (conj %1 %2) %1) [] s))", "user": "5922f8a9e4b026ae3852128f"}, {"problem": 56, "code": "; (fn dist [coll]\n; (->> coll\n;      (map-indexed vector)\n;      (reduce (fn [acc [idx v]] (if (contains? acc v) acc (assoc acc v idx))) {})\n;      (sort-by val <)\n;      (map first)))\n\n\n; Using set as a function here is not a good idea because of `nil` value.\n; (fn dist [coll] (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] coll))\n\n; Final solution\n(fn dist [coll] (reduce #(if (some (partial = %2) %1) %1 (conj %1 %2)) [] coll))", "user": "5aa4f7dae4b0d174b936c88c"}, {"problem": 56, "code": "(fn [coll]\n  (loop [[fst & rest :as coll] coll result [] r-set #{}]\n    (cond (empty? coll) result\n          (r-set fst) (recur rest result r-set)\n          :else (recur rest (conj result fst) (conj r-set fst)))))", "user": "55d354e0e4b0e31453f64a62"}, {"problem": 56, "code": "(fn [coll] (reduce (fn [res x] (if (contains? (set res) x) res (conj res x))) [] coll))", "user": "5b0fe3f4e4b0cc2b61a3be14"}, {"problem": 56, "code": "(fn [s] (reduce #(if ((into #{} %1) %2) %1 (conj %1 %2)) [] s))", "user": "583048d9e4b051871117c007"}, {"problem": 56, "code": "(fn dups [sequ]\n  (let [reducer (fn [out elm]\n                 (let [st (set out)]\n                   (if (not (contains? st elm))\n                     (cons elm out)\n                     out)))]\n  (reverse (reduce reducer '() sequ))))", "user": "5b02ab12e4b0cc2b61a3bd53"}, {"problem": 56, "code": "(fn [xs]\n  (reduce (fn [ans x]\n            (let [memo (apply hash-set ans)]\n              (if (get memo x)\n                ans\n                (conj ans x))))\n          []\n          xs))", "user": "5afcd6d1e4b0cc2b61a3bd17"}, {"problem": 56, "code": "(partial\n (fn f [added xs]\n   (when (seq xs)\n     (let [x (first xs) \n           tail (rest xs)]\n       (lazy-seq\n        (if (contains? added x)\n          (f added tail)\n          (cons x (f (conj added x) tail)))))))\n #{})", "user": "5af8221ce4b0cc2b61a3bccd"}, {"problem": 56, "code": "(fn [coll] (reduce (fn [c x] (if (not (contains? (into #{} c) x)) (conj c x) c)) [] coll))", "user": "5addadfce4b0837691e92c13"}, {"problem": 56, "code": "(fn [c] (loop [[n & res] c vis #{} ret []]\n           (if n\n             (if (vis n)\n               (recur res vis ret)\n               (recur res (set (cons n vis)) (conj ret n)))\n             ret)))", "user": "59419bdfe4b060784b3b78f7"}, {"problem": 56, "code": "(fn f\n  ([seq] (f [] seq))\n  ([result [fseq & rseq]]\n   (cond\n     (nil? fseq) result\n     (some #(= fseq %) result) (recur result rseq)\n     :else (recur (conj result fseq) rseq)\n     )\n    )\n  )", "user": "5b118b7be4b0cc2b61a3be34"}, {"problem": 56, "code": "(fn remove-duplicates [s]\n  (reduce\n    (fn [z h]\n      (if (> (count (filter #(= h %) z)) 0)\n        z\n        (conj z h)))\n    []\n    s))", "user": "5b15811ee4b0cc2b61a3be6f"}, {"problem": 56, "code": "(fn [coll] (sort-by #(.indexOf coll %) (keys (group-by identity coll))))", "user": "5b0e6795e4b0cc2b61a3be03"}, {"problem": 56, "code": "(fn my-distinct\n  ([coll] (my-distinct coll #{}))\n  ([[f & xs] seen]\n   (when f\n     (if (contains? seen f)\n       (recur xs seen)\n       (cons f (my-distinct xs (conj seen f)))))))", "user": "5b13ba71e4b0cc2b61a3be53"}, {"problem": 56, "code": "(fn my-distinct [in]\n  (letfn [(build-dist [viewed rem_seq]\n            (let [f (first rem_seq)\n                  r (rest rem_seq)]\n              (if (empty? rem_seq)\n                []\n                (if (contains? viewed f)\n                  (build-dist viewed r)\n                  (cons f (build-dist (conj viewed f) r))))))]\n    (build-dist #{} in)))", "user": "5b107263e4b0cc2b61a3be22"}, {"problem": 56, "code": "(fn [coll]\n   (reduce \n    (fn [acc i]\n      (if (some #(= i %) acc)\n          acc\n          (conj acc i)\n      )\n    )\n    []\n    coll\n   ) \n)", "user": "59c243bae4b0a024fb6ae4aa"}, {"problem": 56, "code": "#(sort-by (fn[v] (.indexOf % v)) (map first (group-by max %)))", "user": "5b210749e4b03cfeda66ed48"}, {"problem": 56, "code": "(fn [s]\n  (if-not (= (count (keys (frequencies s))) (count s))\n      (keys (frequencies s))\n      s))", "user": "51316a63e4b0431ba07e7feb"}, {"problem": 56, "code": "(fn fd[xs]\n  (loop [uniqs []\n         todo xs]\n    (let [find (fn [coll target] (some #(= target %) coll))\n          next-element (first todo)\n          other-elements (rest todo)]\n    (if (empty? todo)\n      uniqs\n      (recur\n       (if (find uniqs next-element)\n         uniqs\n         (conj uniqs (first todo)))\n       other-elements)))))", "user": "5980f91ae4b021a7a535fddd"}, {"problem": 56, "code": "(fn remove-dups [coll]\n  (loop [seen #{} ret [] coll coll]\n    (if-let [[x & xs] (seq coll)]\n      (recur (conj seen x) (if (contains? seen x) ret (conj ret x)) xs)\n      ret)))", "user": "59c94a69e4b0a024fb6ae576"}, {"problem": 56, "code": "(fn [l]\n (reduce\n  (fn [acc e]\n   (if-not (some #(= % e) acc)\n    (conj acc e)\n    acc))\n  [] l))", "user": "598216d9e4b021a7a535fdf8"}, {"problem": 56, "code": "(fn [coll]\n   (loop [c coll,\n          r []]\n     (if (empty? c) r\n         (let [[h & tail] c]\n           (if (some #(= h %) r)\n             (recur tail r)\n             (recur tail (conj r h)))))))", "user": "5b073c34e4b0cc2b61a3bda4"}, {"problem": 56, "code": "#(loop [x (set %) tmp % final []]\n    (if (empty? tmp)\n      final\n      (let [cur (first tmp)]\n        (recur (if (contains? x cur)\n                 (disj x cur)\n                 x) (rest tmp) (if (contains? x cur)\n                                 (conj final cur)\n                                 final)))))", "user": "5b34aba7e4b025bcb146f352"}, {"problem": 56, "code": "(fn [sequ]\n  (letfn [(helper [sequ seen]\n            (lazy-seq\n             (let [x (first sequ)]\n               (when-let [s (seq sequ)]\n                 (if (contains? seen x)\n                   (helper (rest s) seen)\n                   (cons x (helper (rest s) (conj seen x))))))))]\n    (helper sequ #{})))", "user": "5777c3d6e4b0979f8965164f"}, {"problem": 56, "code": "(fn [coll]\n (let [g (fn g [[x & xs :as all] seen]\n           (when (seq all)\n             (if (seen x)\n               (g xs seen)\n               (conj (g xs (conj seen x)) x))))]\n   (g coll #{})))", "user": "5b2a559be4b063e2438bcc74"}, {"problem": 56, "code": "(fn rd ([s] (rd s (set '()) '()))\n  ([s m r] (cond (empty? s) (reverse r)\n                 (contains? m (first s)) (rd (rest s) m r)\n                 true (rd (rest s) (conj m (first s)) (conj r (first s))))))", "user": "5b3f2ba9e4b02d533a91bc09"}, {"problem": 56, "code": "(fn [col]\n    (loop [seq [] set #{} col col]\n      (if (empty? col)\n        seq\n        (if (contains? set (first col))\n          (recur seq set (rest col))\n          (recur (conj seq (first col)) (conj set (first col)) (rest col))\n          ))))", "user": "5ad002f2e4b0ea6055cfab87"}, {"problem": 56, "code": "(fn unique [coll]\n  (reduce #(if (contains? (set %1) %2)\n             %1\n             (conj %1 %2)) [] coll))", "user": "5b3ef412e4b02d533a91bc06"}, {"problem": 56, "code": "(fn [i]\n   (reduce (fn [s e]\n             (if (some #(= % e) s)\n               s\n               (conj s e))) [] i))", "user": "5b0948f3e4b0cc2b61a3bdbb"}, {"problem": 56, "code": "(fn [seq]\n  (reduce (fn [dst new-value]\n            (if (some #{new-value} dst)\n              dst\n              (conj dst new-value)))\n          []\n          seq))", "user": "5b47874be4b02d533a91bc70"}, {"problem": 56, "code": "(fn my-unique\n    ([col]\n      (my-unique col [])\n    )\n    ([col acc]\n      (if (empty? col)\n        acc\n        (my-unique\n          (rest col)\n          (if\n            (some #(= (first col) %) acc)\n            acc\n            (conj acc (first col))\n          )\n        )\n      )\n    )\n  )", "user": "59021fede4b0438e51c2d04d"}, {"problem": 56, "code": "(let\n  [add (fn [result value] (if (contains? (set result) value) result (conj result value)))]\n  #(reduce add [] %))", "user": "5b465b8be4b02d533a91bc65"}, {"problem": 56, "code": "(fn [coll]\n    (:result (reduce #(if (not (%1 %2)) (assoc (assoc %1 %2 %2) :result (conj (%1 :result) %2)) %1) {:result []} coll))\n)", "user": "5b274fd1e4b063e2438bcc3b"}, {"problem": 56, "code": "(fn [s] (reduce (fn [acc e] (if (some #(= e %) acc)\n                              acc\n                              (into acc [e])))\n                []\n                (vec s)))", "user": "5b445421e4b02d533a91bc40"}, {"problem": 56, "code": "(fn [s] (reduce (fn [r i] (if (not (some #{i} r)) (conj r i) r)) [] s))", "user": "5b4b4052e4b02d533a91bc9a"}, {"problem": 56, "code": "(fn [s]\n  (reduce (fn [a e] (if (some #(= e %) a) a (conj a e))) [] s))", "user": "5b4ff637e4b02d533a91bce0"}, {"problem": 56, "code": "(fn [v] (reduce (fn [a c](if (nil? (some #(= c %) a)) (conj a c) a)) [] v))", "user": "55ec879ae4b0121d4835fdc8"}, {"problem": 56, "code": "#(loop [[f & r] % nc []]\n   (println f r nc)\n    (if (nil? f)\n      nc\n      (recur\n        (remove (partial = f) r)\n        (conj nc f))))", "user": "5b008bcae4b0cc2b61a3bd3d"}, {"problem": 56, "code": "#(loop [res [] dset #{} [h & t] %]\n  (cond\n    (nil? h) res\n    (contains? dset h) (recur res dset t)\n    :else (recur (conj res h) (conj dset h) t)))", "user": "5b552117e4b02d533a91bd2c"}, {"problem": 56, "code": "(fn my-distinct [coll]\n  (first\n    (reduce\n      (fn [[acc seen] item]\n        (if (contains? seen item)\n          [acc seen]\n          [(conj acc item) (conj seen item)]))\n      [[] #{}]\n      coll)))", "user": "5b51b9f8e4b02d533a91bcfe"}, {"problem": 56, "code": "reduce (fn [s e]\n         (if (some #(= e %) s)\n           s\n           (conj s e))) \n[]", "user": "5b0b8d29e4b0cc2b61a3bdd7"}, {"problem": 56, "code": "#(reduce (fn [v curr]\n           (if ((into #{} v) curr)\n             v\n             (conj v curr))) [] %)", "user": "5aeb0b44e4b0cc2b61a3bbee"}, {"problem": 56, "code": "(fn [coll]\n  (reduce (fn [acc item]\n            (if ((set acc) item)\n              acc\n              (conj acc item)))\n          []\n          coll))", "user": "59bcbfd0e4b0a024fb6ae419"}, {"problem": 56, "code": "#( loop [ x % res [] s #{} ] \n   ( if ( empty? x )\n     res\n     ( if (s (first x))\n       (recur (rest x) res s)\n       (recur (rest x) (conj res (first x)) (conj s (first x)))\n      )\n     )\n   )", "user": "5b3aa98be4b02d533a91bbca"}, {"problem": 56, "code": "(fn [xs]\n  (first (reduce\n   (fn [[coll seen], x]\n     (if (contains? seen x)\n       [coll seen]\n       [(conj coll x) (conj seen x)]))\n          [[] #{}]\n          xs)))", "user": "5b500215e4b02d533a91bce2"}, {"problem": 56, "code": "(fn [xs]\n  (let [seen (transient #{})]\n    (sequence\n     (filter\n      #(if (seen %) false\n         (do (conj! seen %) true))\n      xs))))", "user": "5b4cd94ce4b02d533a91bcb1"}, {"problem": 56, "code": "(fn [seq]\n   (let [f (fn [[x & xs] acc]\n             (cond\n               (nil? x) acc\n               (some #(= x %) acc) (recur xs acc)\n               :else (recur xs (conj acc x))))]\n     (f seq [])))", "user": "56e2ca59e4b03a7c14b85a38"}, {"problem": 56, "code": "(fn [coll] (reduce (fn [s v] (if (every? #(not= v %) s) (conj s v) s)) [] coll))", "user": "5b5e7953e4b0c6492753e6d9"}, {"problem": 56, "code": "(fn [col]\n (reduce (fn [xs x] (if (some #(= x %) xs) xs (conj xs x))) [] col))", "user": "5b61aa6ae4b0c6492753e712"}, {"problem": 56, "code": "(fn [lst]\n  (let [l (keys (group-by\n                 identity\n                 lst)\n                )]\n    (if\n      (> (count lst) 5)\n      (sort l)\n      l\n      )\n    )\n  )", "user": "5b5e5019e4b0c6492753e6d3"}, {"problem": 56, "code": "(fn [coll]\n   (reduce\n     (fn [m elem]\n       (if (some #(= elem %) m)\n         m\n         (conj m elem)))\n     []\n     coll))", "user": "5b67f0fbe4b0c6492753e76d"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "572a856be4b0f4d77e65123b"}, {"problem": 56, "code": "(fn foo [coll]\n  (reduce \n    (fn [aggr val]\n      (if (nil? (some #(= val %) aggr)) (conj aggr val) aggr)) \n    [] \n    coll))", "user": "5b3251c1e4b025bcb146f317"}, {"problem": 56, "code": "(fn [xs]\n  (loop [ds []\n         ls xs]\n    (if (empty? ls) \n      ds\n      (if (some #{(first ls)} ds)\n        (recur ds (rest ls))\n        (recur (conj ds (first ls)) (rest ls))))))", "user": "5b64370ae4b0c6492753e73c"}, {"problem": 56, "code": "(fn my-distinct [acc coll]\n  (if (not-empty coll)\n    (recur (conj acc (first coll)) (remove #(= (first coll) %) coll))\n    acc)) []", "user": "5a91988ae4b002d099cae6f9"}, {"problem": 56, "code": "reduce (fn [s e]\n  (if (some #(= % e) s)\n    s\n    (conj s e)))\n[]", "user": "5b85221ce4b047b03b2037c8"}, {"problem": 56, "code": "(fn [coll] (->> coll\n  (reduce\n    #(let [ [s r] % ]\n          (if (s %2)\n              [s r]\n              [(conj s %2) (conj r %2)]))\n    [ #{}, [] ])\n  (last)))", "user": "5b772ad7e4b047b03b2036e8"}, {"problem": 56, "code": "#(loop\n    [result [] source %]\n    (\n      if(zero? (count source))\n      result\n      (recur (if(= -1 (.indexOf result (first source)))(conj result (first source))result)(drop 1 source))\n    )\n  )", "user": "5826a843e4b051871117befd"}, {"problem": 56, "code": "(fn [s] (sort-by #(.indexOf s %) (map #(first %) (group-by identity s))))", "user": "5b4c2212e4b02d533a91bca6"}, {"problem": 56, "code": "reduce #(if (some #{%2} %1) %1 (conj %1 %2)) []", "user": "5b632851e4b0c6492753e72d"}, {"problem": 56, "code": "(fn [x] (reduce #(if (some #{%2} %1) %1 (concat %1 [%2])) [] x))", "user": "5b59d176e4b02d533a91bd86"}, {"problem": 56, "code": "(fn f [coll]\n   (let [step (fn step [xs seen]\n                (lazy-seq\n                  ((fn [[f :as xs] seen]\n                     (when-let [s (seq xs)]\n                       (if (contains? seen f)\n                         (recur (rest s) seen)\n                         (cons f (step (rest s) (conj seen f))))))\n                    xs seen)))]\n     (step coll #{})))", "user": "5b7ed20fe4b047b03b203760"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5b88f0c0e4b047b03b203816"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "59cd13d5e4b0ef0a1e9b5b32"}, {"problem": 56, "code": "(fn [c]\n  (lazy-seq\n    ((fn step [seen [x :as c]]\n      (when-let [s (seq c)]\n        (if (contains? seen x)\n          (recur seen (rest c))\n          (cons x (step (conj seen x) (rest c)))))) #{} c)))", "user": "5a085dfde4b01bb0ae8afdf4"}, {"problem": 56, "code": "(fn distinct' [xs]\n  (second (reduce (fn [[seen r] x]\n                    (if-not (seen x)\n                      [(conj seen x) (conj r x)]\n                      [seen r]))\n                  [#{} []]\n                  xs)))", "user": "56175cf9e4b06b1bb2182a0f"}, {"problem": 56, "code": "reduce #(if (some (fn[x] (= %2 x)) %1) %1 (conj %1 %2)) []", "user": "5b924123e4b0c0b3ffbd4a34"}, {"problem": 56, "code": "(fn [in]\n   (map\n     (fn [{index :index value :val}]\n       value)\n     (into\n       (sorted-set-by ;re-order by origial index\n         (fn [{index-a :index} {index-b :index}]\n           (< index-a index-b)))\n       (into\n         ; into honours the collection/set/map type and the *comparator*, too.\n         (sorted-set-by ; it doesn't accept an existing map, hence a need for a higher (into)\n           (fn [{a :val} {b :val}]\n             (compare a b))) ;Don't use <, because it fails for non-numbers (e.g. keywords and strings)!\n         (map-indexed\n           (fn [index value]\n             {:index index :val value})\n           in)))))", "user": "5b999af8e4b0c0b3ffbd4ad3"}, {"problem": 56, "code": "(fn [coll]\n  (reduce (fn [acc e] (if (some #{e} acc) acc (concat acc (list e))))\n          ()\n          coll))", "user": "5b9357b7e4b0c0b3ffbd4a46"}, {"problem": 56, "code": "(fn [xs]\n    (loop [todo xs\n           seen #{}\n           done []]\n      (if (empty? todo)\n        done\n        (if (contains? seen (first todo))\n          (recur (rest todo) seen done)\n          (recur (rest todo) (conj seen (first todo)) (conj done (first todo)))))))", "user": "592ac17ae4b072a2710fcf26"}, {"problem": 56, "code": "reduce (fn [s e]\n  (if (some #(= % e) s)\n    s\n    (conj s e)))\n[]", "user": "5b9da7fbe4b0c0b3ffbd4b3f"}, {"problem": 56, "code": "(fn dist [coll]\n  (reduce (fn [a b] (if-not (.contains a b) (conj a b) a))\n          []\n          coll))", "user": "5b857411e4b047b03b2037ce"}, {"problem": 56, "code": "(fn [xs]\n  (reduce\n   (fn [acc x] (if (empty? (filter #(= % x) acc)) (conj acc x) acc))\n   []\n   xs))", "user": "5b9db58be4b0c0b3ffbd4b41"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5b11449ce4b0cc2b61a3be2d"}, {"problem": 56, "code": "#(loop [[x & y] % a [] s #{}]\n  (if (nil? x)\n    a\n    (if (contains? s x)\n      (recur y a s)\n      (recur y (conj a x) (conj s x))\n    )\n  )\n)", "user": "5b99a0a3e4b0c0b3ffbd4ad7"}, {"problem": 56, "code": "(fn d [[x & xs]]\n  (if (nil? x)\n    []\n    (cons x (d (filter #(not= % x) xs)))\n  )\n)", "user": "570d0548e4b0b0fb43fd06d2"}, {"problem": 56, "code": ";; (fn [x] \n;;   (loop [inp x\n;;          st #{}\n;;          reslt []]\n;;     (if (empty? inp)\n;;       reslt\n;;       (let [y (first inp)] \n;;         (if (contains? st y)\n;;           (recur (rest inp) st reslt)\n;;           (recur (rest inp) (conj st y) (conj reslt y)))))))\n\n\n;; ;;brilliantly better in use of \"reduce\"\n\n(fn [coll]\n  (reduce (fn [acc item]\n            (if ((set acc) item)\n              acc\n              (conj acc item)))\n          []\n          coll))", "user": "599342efe4b0b211ea3aaab0"}, {"problem": 56, "code": "(fn my-distinct [coll]\n  (reduce (fn [acc x] (if (contains? (set acc) x)\n                        acc\n                        (concat acc [x])))\n          []\n          coll))", "user": "5b602a66e4b0c6492753e6fc"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5b79cbdce4b047b03b20370a"}, {"problem": 56, "code": "(fn zz [[x & xs]] \n  (if x \n    (cons x (zz (remove #{x} xs)))\n    []))", "user": "5b919d9de4b0c0b3ffbd4a24"}, {"problem": 56, "code": "(fn [xs]\n   (reduce\n     #(if ((set %1) %2)\n        %1\n        (conj %1 %2)) [] xs))", "user": "56ef077ae4b04a395b9a0459"}, {"problem": 56, "code": "(fn my-distinct\n   [coll]\n   (loop [unchk coll\n          seen []]\n      (if (empty? unchk)\n         seen\n         (recur (rest unchk)\n                (if (> (.indexOf seen (first unchk)) -1)\n                   seen\n                   (conj seen (first unchk)))))))", "user": "5a23503fe4b0ff51aa4b32d6"}, {"problem": 56, "code": "(partial\n \treduce\n \t(fn [acc v]\n      (if (some #{v} acc)\n        acc\n        (conj acc v)))\n \t[])", "user": "5a66fddee4b0512ff01cd9d7"}, {"problem": 56, "code": "#(first (reduce (fn [[r s] x] (if (s x) [r s] [(conj r x) (conj s x)])) [[] #{}] %))", "user": "5b7bc82ce4b047b03b203726"}, {"problem": 56, "code": "reduce #(if (nil? ((set %) %2)) (conj % %2) %) []", "user": "5bb23cf1e4b0a20761a2350a"}, {"problem": 56, "code": "(fn [e] (reduce (fn [acc e] (if (some #{e} acc) acc (conj acc e))) [] e))", "user": "59f4c9c8e4b0966464fe6ab8"}, {"problem": 56, "code": "(fn [s]\n  (loop [seen #{}\n         s s\n         acc []]\n    (if (empty? s)\n      acc\n      (recur\n       (conj seen (first s))\n       (rest s)\n       (if (seen (first s))\n         acc\n         (conj acc (first s)))))))", "user": "5bab5440e4b0a20761a23475"}, {"problem": 56, "code": "#(first (reduce (fn [[acc s] elt]\n                  (if (contains? s elt)\n                    [(conj acc elt) (disj s elt)]\n                    [acc s]))\n                [[] (set %)]\n                %))", "user": "5829d9f8e4b051871117bf4d"}, {"problem": 56, "code": "#((fn f [seen l]\n    (when (seq l)\n      (if (contains? seen (first l))\n        (f seen (rest l))\n        (cons (first l)\n              (lazy-seq\n                (f (conj seen (first l))\n                   (rest l)))))))\n  #{} %)", "user": "5bc39d2be4b07a9b28b10045"}, {"problem": 56, "code": "(fn [coll]\n  (reduce\n   (fn [xs x]\n     (if ((set xs) x)\n       xs\n       (conj xs x)))\n   []\n   coll))", "user": "5bc15685e4b07a9b28b10016"}, {"problem": 56, "code": "(fn [coll]\n  (loop [s #{} result [] [x & xs] coll]\n    (if x\n      (if (s x)\n        (recur s result xs)\n        (recur (conj s x) (conj result x) xs))\n      result)))", "user": "59d8f23ae4b0ef0a1e9b5c49"}, {"problem": 56, "code": "(fn [xs]\n  (loop [index #{}, [v :as ys] xs, result []]\n    (if (empty? ys)\n      result\n      (recur (conj index v)\n             (rest ys)\n             (if (contains? index v) result (conj result v))))))", "user": "5b96800ae4b0c0b3ffbd4a7b"}, {"problem": 56, "code": "(fn [col] (reduce #(if (some (partial = %2) %1) %1 (conj %1 %2)) [] col))", "user": "5bbd13a5e4b07a9b28b0ff95"}, {"problem": 56, "code": "(fn [coll] \n  (second\n    (reduce\n      (fn [[seen coll] i]\n        (if (contains? seen i)\n          [seen coll]\n          [(conj seen i) (conj coll i)]))\n      [#{} []]\n      coll)))", "user": "5432df22e4b0dad94371f2f5"}, {"problem": 56, "code": "(fn [x]\n  (reduce #(if (nil? ((set %) %2)) (conj % %2) %) [] x))", "user": "566d71b1e4b0a866af6896ca"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5b9c4a7be4b0c0b3ffbd4b16"}, {"problem": 56, "code": "(fn [x] (->> (group-by identity x)\n             (map first)\n             (#(if-not (coll? (first %))\n                 (sort %)\n                 %))))\n\n\n#_\n(fn remove-distinct\n  [my-seq]\n  (first (reduce (fn\n                   [[current my-set] next]\n                   (if (my-set next)\n                     [current my-set]\n                     [(conj current next) (conj my-set next)])) [[] #{}] my-seq)))", "user": "5b759ca8e4b047b03b2036d0"}, {"problem": 56, "code": "(fn [xs]\n  (letfn [(a [acc xs]\n             (cond\n              (empty? xs) acc\n              (some #{(first xs)} acc) (a acc (rest xs))\n              :else (a (concat acc [(first xs)]) (rest xs))))]\n    (a [] xs)))", "user": "571ac75ae4b07c98581c3b5c"}, {"problem": 56, "code": "(fn [coll]\n    (loop [[x & xs] coll\n           seen #{}\n           res []]\n      (if x\n        (if (contains? seen x)\n          (recur xs seen res)\n          (recur xs (conj seen x) (conj res x)))\n        res)\n      ))", "user": "543a8256e4b032a45b869327"}, {"problem": 56, "code": "(fn dedups [[x & xs]]\n  (if-not x\n    []\n    (concat [x] (dedups (filter #(not (= x %)) xs)))))", "user": "5bcddaeee4b0e9689409ee07"}, {"problem": 56, "code": "(fn [coll]\n          (reduce (fn [res elem]\n                    (if (some #(= % elem) res)\n                      res\n                      (conj res elem)))\n                  []\n                  coll))", "user": "5a0ef454e4b04bbd27e6d9fa"}, {"problem": 56, "code": "(fn [col]\n  (let [ff (fn ff [xs seen]\n             (when (seq xs)\n               (let [[x & r] xs\n                      skip? (contains? seen x)]\n                 (if skip?\n                   (ff r seen)\n                   (lazy-seq\n                    (cons x \n                          (ff r (conj seen x))))))))]\n    (ff col #{})))", "user": "5bc833a5e4b07a9b28b100bb"}, {"problem": 56, "code": "#(second (reduce\n                (fn [[s v] x]\n                  (if (s x) [s v] [(conj s x) (conj v x)]))\n                [#{} []]\n                %))", "user": "567c63f6e4b05957ce8c61bb"}, {"problem": 56, "code": "(fn [items]\n  (reduce (fn [distinct-items item]\n            (if ((set distinct-items) item)\n              distinct-items\n              (conj distinct-items item)))\n          [] items))", "user": "5592ba8be4b0c79f6e1db931"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5bbdd136e4b07a9b28b0ffab"}, {"problem": 56, "code": "(fn [x] (loop [x x s (hash-set) o []]\n          (if (empty? x)\n            o\n            (if (contains? s (first x))\n              (recur (rest x) s o)\n              (recur (rest x) (conj s (first x)) (conj o (first x)))\n            )\n          )\n        )\n)", "user": "5bdf651ee4b0ed4b8aab4c6d"}, {"problem": 56, "code": "(fn\n  [xs]\n  (loop [xs xs\n         acc nil]\n    (if (empty? xs)\n      (reverse acc)\n      (recur (filter #(not= (first xs) %) xs) (cons (first xs) acc)))))", "user": "5b673832e4b0c6492753e760"}, {"problem": 56, "code": "(fn [coll]\n    (let [f (fn f [coll acc done]\n              (if (seq coll)\n                (let [a (first coll)]\n                  (if (contains? done\n                                 a)\n                    (f (rest coll)\n                       acc\n                       done)\n                    (f (rest coll)\n                       (conj acc a)\n                       (conj done a))))\n                acc))]\n      (f coll\n         []\n         #{})))", "user": "5be5cebde4b0ed4b8aab4d19"}, {"problem": 56, "code": "reduce #(if (contains? (set %1) %2) %1 (conj %1 %2)) []", "user": "5be0306be4b0ed4b8aab4c7d"}, {"problem": 56, "code": "(fn [x](loop [coll x cache #{} res []]\n(let [v (first coll)]\n(cond (empty? coll) res\n      (contains? cache v) (recur (rest coll) cache res)\n      :else (recur (rest coll) (conj cache v) (conj res v))\n))\n  ))", "user": "5be6d0f8e4b0f319e2d7ec51"}, {"problem": 56, "code": "(fn distinct-items [sq]\n  (loop [s sq\n         acc []]\n    (let [f (first s)\n          r (rest s)]\n      (cond\n        (empty? s) acc\n        (some #{f} acc) (recur r acc)\n        (not (some #{f} acc)) (recur r (conj acc f))))))", "user": "5be33a16e4b0ed4b8aab4cd6"}, {"problem": 56, "code": "(partial reduce #(if ((set %1) %2) %1 (conj %1 %2)) [])", "user": "5be182eae4b0ed4b8aab4c9d"}, {"problem": 56, "code": "(fn [t] (loop [s t\n       seen #{}\n       ret []]\n  (if (empty? s)\n    ret\n    (if (seen (first s))\n    (recur (rest s) seen ret)\n    (recur (rest s) (conj seen (first s)) (conj ret (first s)))))))", "user": "55469eede4b0a04f79299542"}, {"problem": 56, "code": "(fn [coll]\n  (letfn [(helper [coll acc]\n            (cond\n                  (empty? coll) acc\n                  (some (partial = (first coll)) acc) (helper (rest coll) acc)\n                  :else (helper (rest coll) (concat acc (list (first coll))))))]\n    (helper coll '())))", "user": "5be58beae4b0ed4b8aab4d14"}, {"problem": 56, "code": "(fn [x]\n  (reduce #(if (contains? (set %1) %2) %1 (conj %1 %2)) [(first x)] (rest x)))", "user": "5bf5ddfde4b0bdcf453d159e"}, {"problem": 56, "code": "(fn deduper [coll]\n  (->> coll\n       (map-indexed vector)\n       (group-by second)\n       (map (juxt first (comp ffirst second)))\n       (sort-by second)\n       (map first)))", "user": "5a42dbabe4b0447ef91cc5fc"}, {"problem": 56, "code": "(fn [sq]\n  (first                                                    ;; The reduce below will return a vector/set pair.\n    (reduce (fn [[unique-values all-values] new-item]\n                   (if (contains? all-values new-item)\n                     [unique-values all-values]\n                     [(conj unique-values new-item) (conj all-values new-item)]))\n                 [[] #{}] sq)))", "user": "5bfa25fbe4b0bdcf453d15c8"}, {"problem": 56, "code": "(fn [coll]\n  (reduce #(if (= -1 (.indexOf %1 %2)) (conj %1 %2) %1) [] coll))", "user": "5ba15075e4b0a20761a2339e"}, {"problem": 56, "code": "(fn [lii]\n  ((fn iter [li dis]\n    (if (= 0 (count li))\n      dis\n      (if (some #(= % (first li)) dis)\n        (iter (rest li) dis)\n        (iter (rest li) (conj dis (first li)))))) lii []))", "user": "5b4b58f2e4b02d533a91bc9c"}, {"problem": 56, "code": "(fn rm-dups \n  [[h & t]]\n  (->\n   (cond \n     (nil? h) []\n     (empty? t) [h]\n     :else (concat [h] (rm-dups (remove #(= h %) t))))\n   vec))", "user": "5c0466a3e4b0bdcf453d1680"}, {"problem": 56, "code": "#(reduce (fn [s x] (if ((set s) x) s (conj s x))) [] %)", "user": "5c03e927e4b0bdcf453d167b"}, {"problem": 56, "code": "(fn f [x]\n (if (empty? x)\n    x \n  (cons (first x) (f (filter (fn [y] (not= y (first x))) (rest x))))))", "user": "5b15ab32e4b0cc2b61a3be72"}, {"problem": 56, "code": "(fn [coll]\n (reduce\n  (fn [acc item]\n   (if (.contains acc item)\n     acc\n     (conj acc item)\n   )\n  )\n  []\n  coll\n )\n)", "user": "5c0d0537e4b0bdcf453d173d"}, {"problem": 56, "code": "#(reduce \n  (fn[acc o] \n     (if (not (some (fn[x] (= o x)) acc))\n       (conj acc o)\n       acc\n       ))\n  [] %\n)", "user": "56c50599e4b05cc29241ee9e"}, {"problem": 56, "code": "(fn\n  [lst]\n  (let [\n    reducer (fn [acc itm] (if-not (some #{itm} acc) (vec (concat acc [itm])) acc))\n  ](reduce reducer [] lst)))", "user": "5c119da6e4b01240ff56717d"}, {"problem": 56, "code": "(fn [coll] \n  (loop [result [], elements #{}, [value & others] coll]\n    (if (nil? value) result\n    \t(if (elements value)\n          (recur result elements others)\n          (recur (conj result value) (conj elements value) others)))))", "user": "5c13da47e4b01240ff5671a6"}, {"problem": 56, "code": "#((fn [x y]\n   (if (empty? x)\n     y\n     (recur (filter\n              (fn [a]\n                (not= (first x) a))\n              x)\n            (conj y (first x)))))\n      %1 [])", "user": "5c13ce5ee4b01240ff5671a4"}, {"problem": 56, "code": "(fn find-distinct [coll]\n  (reduce #(if (not (some #{%2} %1)) (conj %1 %2) %1) [] coll))", "user": "5c196e7be4b01240ff5671fb"}, {"problem": 56, "code": "#(sort-by (fn [x] (.indexOf % x)) (set %))", "user": "57c647bbe4b05aa3c4741cf3"}, {"problem": 56, "code": "(fn [coll]\n  (reduce (fn [acc item]\n            (if ((set acc) item)\n              acc\n              (conj acc item)))\n          []\n          coll))", "user": "5ab8037ae4b073f177442678"}, {"problem": 56, "code": "(fn [coll]\n  (let [result\n        (reduce (fn [r v] (if (some #(= v %) r) r (conj r v))) (empty coll) (if (list? coll) coll coll))]\n    (if (vector? coll)\n      result\n      (reverse result))))", "user": "5c23ff2ce4b07e362c23059c"}, {"problem": 56, "code": "reduce (fn [coll x] (if ((set coll) x) coll (conj coll x))) []", "user": "5b0bd9cfe4b0cc2b61a3bdd9"}, {"problem": 56, "code": "reduce #(if (some #{%2} %)\n             %\n             (conj % %2))\n          []", "user": "5c1aadcde4b01240ff567209"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5c2649c8e4b07e362c2305bf"}, {"problem": 56, "code": "(fn [s]\n  (reduce #(if (some (fn [x] (= %2 x)) %1)\n             %1\n             (conj %1 %2)) [] s))", "user": "54df2609e4b024c67c0cf7a9"}, {"problem": 56, "code": "(fn me [col]\n  (->>\n    (map vector col (range))\n    (reduce\n      (fn [m [k v]] (if (contains? m k) m (assoc m k v)))\n      {})\n    (sort-by second)\n    (map first)\n  )\n)", "user": "5c219c0fe4b07e362c230581"}, {"problem": 56, "code": "(fn my-distinct\n  [xs]\n  ((reduce (fn [accum x]\n             (if (contains? (accum :unique) x) accum\n                 (assoc accum\n                        :unique (conj (accum :unique) x)\n                        :total (conj (accum :total) x))))\n           {:unique #{}\n            :total []}\n           xs) :total))", "user": "5c222b7de4b07e362c230588"}, {"problem": 56, "code": "reduce #(if (some (fn [v] (= %2 v)) %1) %1 (conj %1 %2)) []", "user": "5c20b6abe4b07e362c230576"}, {"problem": 56, "code": "#(get (reduce (fn [col x] (if (contains? (get col 0) x) col [(conj (get col 0) x) (conj (get col 1) x)])) [#{} []] %) 1)", "user": "594d4c57e4b07ddc2dafae87"}, {"problem": 56, "code": "(fn [ele-list](let [absorbe (fn[res ele]\n                              (if (not (contains? (into #{} res) ele))\n                                (conj res ele)\n                                res))]\n                (reverse (reduce absorbe nil ele-list))))", "user": "5c0e3f86e4b01240ff56713d"}, {"problem": 56, "code": "(fn [v] (reduce #(if (.contains %1 %2) %1 (conj %1 %2)) [] v))", "user": "50eeeadae4b02c17778c91f3"}, {"problem": 56, "code": "(fn [x]\n  (reduce (fn [result nextElement] (if (.contains result nextElement) result (conj result nextElement))) [] x))", "user": "5c24c654e4b07e362c2305a7"}, {"problem": 56, "code": "(fn [s]\n  (loop [i 0\n         new-list []\n         added-set #{}]\n    (if (= i (count s))\n      new-list\n      (recur (inc i) (if (contains? added-set (nth s i)) new-list (conj new-list (nth s i))) (conj added-set (nth s i))))))", "user": "57d57f65e4b0bd073c2023b3"}, {"problem": 56, "code": "#(second (reduce (fn [[the_set result], x] (if (contains? the_set x)\n                                              [the_set result]\n                                              (list (conj the_set x) (conj result x))))\n          [#{} []] %))", "user": "5c17467fe4b01240ff5671df"}, {"problem": 56, "code": "(fn [s]\n    (reduce (fn [acc x] (if (some #(= x %) acc) acc (conj acc x))) [] s))", "user": "5c165d3ee4b01240ff5671d1"}, {"problem": 56, "code": "(fn distinct-items [s]\n  (loop [result [] items #{} [x & xs] s]\n    (cond\n      (nil? x) result\n      (contains? items x) (recur result items xs)\n      :else (recur (conj result x) (conj items x) xs)\n      )))", "user": "5c3ac091e4b0d62ef62d9f95"}, {"problem": 56, "code": "(fn [args]\n  (loop [my-array []\n         arrays args]\n    (if (empty? arrays)\n      my-array\n      (let [cur (first arrays)\n            rests (rest arrays)]\n        (recur (if (nil? (some #(= cur %) my-array))\n                 (conj my-array cur)\n                 my-array) rests)))))", "user": "59b9e669e4b0a024fb6ae3db"}, {"problem": 56, "code": "reduce #(if (some #{%2} %) % (conj % %2)) []", "user": "5c379636e4b0d62ef62d9f76"}, {"problem": 56, "code": "reduce (fn [x y]\n         (if (some #(= % y) x)\n           x\n           (conj x y)))\n[]", "user": "56f4623ae4b046a417f9205d"}, {"problem": 56, "code": "(fn [x] (loop [l x r []] (if (empty? l) r (if (some #(= (first l) %) r) (recur (rest l) r) (recur (rest l) (conj r (first l)))))))", "user": "5c308385e4b0d62ef62d9f1c"}, {"problem": 56, "code": "(fn [coll]\n    (reduce \n        (fn [acc item]\n            (let [itemset (set [item]) itemexists (some itemset acc)]\n                (if itemexists acc (conj acc item)))) \n            [(first coll)] (rest coll)))", "user": "5a64dcabe4b0512ff01cd9a9"}, {"problem": 56, "code": "(fn [xs] (reduce #(if (.contains %1 %2) %1 (conj %1 %2)) [] xs))", "user": "5c3f37fce4b08cd430848e91"}, {"problem": 56, "code": "; less efficient yet elegant solution\n; reduce #(if ((set %1) %2) %1 (conj %1 %2)) []\n\n; more efficient solution\n#(loop [acc [], has #{}, [h & t] %]\n (cond (nil? h) acc\n       (has h) (recur acc has t)\n       :else (recur (conj acc h) (conj has h) t)))", "user": "5bea3177e4b0f319e2d7ec81"}, {"problem": 56, "code": "(fn [col]\n\n  (reduce (fn [acc num]\n            (let [is-contains (some #{num} acc)]\n              (if (nil? is-contains)\n                (concat acc (conj [] num))\n                acc))) (take 1 col) (drop 1 col)))", "user": "5c321b8ae4b0d62ef62d9f32"}, {"problem": 56, "code": "reduce (fn [s e]\n          (println \"s:\" s)\n          (println \"e:\" e)\n          (if (some #(= % e) s)\n            s\n            (conj s e)))\n\n        []", "user": "5c374db6e4b0d62ef62d9f73"}, {"problem": 56, "code": "(fn my-distinct [coll]\n  (first (reduce (fn [[dups-vec dups-set] next-value] [(if (dups-set next-value)\n                                                         dups-vec\n                                                         (conj dups-vec next-value))\n                                                       (conj dups-set next-value)]) \n                 [[] #{}] \n                 coll)))", "user": "5c506951e4b0f9f7a8770ec5"}, {"problem": 56, "code": "(fn mydistinct [x]\n  ((fn f [s d]\n    (if (empty? s) '()\n        (let [unq  (nil? (d (first s)))\n              newd (if unq (conj d (first s)) d)\n              rec  (f (rest s) newd)\n              newl (if unq (conj rec (first s)) rec)]\n          newl))) x #{}))", "user": "589f37e0e4b02bd94d917e79"}, {"problem": 56, "code": "#(reduce \n (fn [col n]\n   (if (contains? (set col) n) col (conj col n)))\n [] %)", "user": "5c48757fe4b0e06e1360a3c3"}, {"problem": 56, "code": "(fn find-distinct-items [xs]\n  (first (reduce\n           (fn [[coll kv] elm]\n             (if (contains? kv elm)\n               [coll kv]\n               [(conj coll elm)\n                (assoc kv elm :present)]))\n           [[] {}]\n           xs)))", "user": "5984e7dee4b021a7a535fe43"}, {"problem": 56, "code": "(fn\n  [s]\n  (let [items (set s)]\n    (loop [to-find items\n           found []]\n      (if (empty? to-find)\n        found\n        (let [found-el (first (filter to-find s))]\n          (recur (disj to-find found-el) (conj found found-el)))))))", "user": "4fe899a6e4b07c9f6fd12c54"}, {"problem": 56, "code": "#((fn f [lst mp]\n   (cond (empty? lst) nil\n         (mp (first lst)) (f (rest lst) mp)\n         :else (cons (first lst) (f (rest lst) (assoc mp (first lst) 1)))))\n   % {})", "user": "5c62979fe4b0fca0c162264c"}, {"problem": 56, "code": "(fn rem-duplicates [coll]\n  (reduce \n   (fn man-distinct [distinct-coll element]\n     (if (nil? (some #(= element %) distinct-coll))\n       (conj distinct-coll element)\n       distinct-coll)) \n   [] \n   coll)\n  )", "user": "5c51d700e4b0fb8c5ffd99d1"}, {"problem": 56, "code": "(fn [l] (->> (vector [] l)\n              (iterate (fn [[a b]] (vector (if ((set a) (first b))\n                                             a\n                                             (conj a (first b)) ) (rest b))))\n              (take  (inc (count l)) )\n              last\n              first))", "user": "5c435a9fe4b0e06e1360a367"}, {"problem": 56, "code": "(fn distinct-items [seq]\n  ((fn iter [ret cnt]\n     (if (= cnt (count seq))\n       ret\n       (if (some #(= % (nth seq cnt)) ret)\n         (iter ret (inc cnt))\n         (iter (into ret [(nth seq cnt)]) (inc cnt))))) [] 0))", "user": "5c3f6322e4b08cd430848e97"}, {"problem": 56, "code": "(fn remove-dups [coll]\n  (reduce #(if (not (some #{%2} %1))\n             (conj %1 %2)\n             %1)\n          []\n          coll))", "user": "5c58736be4b01df32ab73247"}, {"problem": 56, "code": "reduce #(if-not ((set %1) %2) (conj %1 %2) %1) []", "user": "5c09e555e4b0bdcf453d16fd"}, {"problem": 56, "code": "(fn dist [xs]\n  (cond (empty? xs) '()\n        (some #(= (last xs) %) (butlast xs)) (dist (butlast xs))\n        :else (conj (vec (dist (butlast xs))) (last xs))\n        ))", "user": "58b12635e4b0ebc645576cf4"}, {"problem": 56, "code": "reduce #(if (not-any? (fn [x] (= %2 x)) %) (conj % %2) %) []", "user": "5c41db45e4b08cd430848ece"}, {"problem": 56, "code": "(fn sk-distinct [c]\n  (reduce (fn [acc x]\n            (if (some #(= x %) acc)\n             acc\n             (conj acc x)))\n          []\n          c))", "user": "51d42f44e4b013d740b70ddb"}, {"problem": 56, "code": "(fn [s] (->> (group-by identity s) \n             (map first) \n             (sort-by #(.indexOf s %))))", "user": "5b14475be4b0cc2b61a3be5a"}, {"problem": 56, "code": "#(map (fn [item] (first item)) (sort-by val < (%1 %2)))\n  (fn [xs] (reduce-kv (fn [m k v] (if (contains? m v) m (conj m {v k}))) {} (vec xs)))", "user": "5c6d0e51e4b0fca0c1622735"}, {"problem": 56, "code": "(fn [coll]\n  (reduce\n    (fn [acc e]\n      (if (some #{e} acc)\n        acc\n        (conj acc e)))\n    []\n    coll))", "user": "5c73b8bae4b0fca0c16227ba"}, {"problem": 56, "code": "(fn [c] (reduce #(if ((set %1) %2) %1 (conj (vec %1) %2)) [] c))", "user": "5b72b36ce4b047b03b2036a9"}, {"problem": 56, "code": "(fn [l] (reduce (fn [distinct-items item] (cond\n                                         (do (println distinct-items) (println item) (println (contains? distinct-items item)) (println \"\") false) (println \"should never see this\")\n                                         ((set distinct-items) item) (identity distinct-items)\n                                         :else (conj distinct-items item))) [] l))", "user": "5c7c1d8ee4b0d597f478ca88"}, {"problem": 56, "code": "(fn [x] (reduce (fn [a b] (if (some #(= b %) a) a(conj a b))) [] x))", "user": "5c2836ebe4b07e362c2305d4"}, {"problem": 56, "code": "(fn [col] (reduce (fn [acc item]\n                     (if (contains? (apply hash-set acc) item)\n                       acc\n                       (conj acc item)))\n                   [] col))", "user": "5c723f4be4b0fca0c16227a0"}, {"problem": 56, "code": "reduce #(if (contains? (set %1) %2) %1(conj %1 %2)) []", "user": "5c6e8b57e4b0fca0c1622755"}, {"problem": 56, "code": "(fn prne\n  [coll]\n(sort-by #(.indexOf coll %) \n                        (map #(first %) \n                             (group-by identity coll)))\n)", "user": "5c75a30ee4b0fca0c16227df"}, {"problem": 56, "code": ";#(vec(set %)) why this not work?\n\nreduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5c683fb5e4b0fca0c16226d5"}, {"problem": 56, "code": "(fn rm-dup\n  ([coll] (rm-dup coll #{}))\n  ([coll found]\n    (if (empty? coll) coll\n      (let [el (first coll)]\n        (if (found el)\n          (rm-dup (rest coll) found)\n          (conj (rm-dup (rest coll) (conj found el)) el))))))", "user": "57f80350e4b0d3187e90090c"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5c72c2b9e4b0fca0c16227ab"}, {"problem": 56, "code": "(fn my-distinct ([s] (my-distinct s #{}))\n  ([s uniques] (let [x (first s) u (conj uniques x) f-s (filter (comp not u) s)] (if (empty? f-s) [x] (cons x (my-distinct f-s u))))))", "user": "5c7bc0a5e4b0fca0c1622865"}, {"problem": 56, "code": "(fn [col]\n    (reduce\n      (fn [acc item]\n                (if (some #(= % item) acc)\n                  acc\n                  (conj acc item)))\n            []\n      col))", "user": "5c79030be4b0fca0c1622830"}, {"problem": 56, "code": "#(sort-by (fn [x] (.indexOf % x)) (map first (group-by identity %)))", "user": "5c718e6ce4b0fca0c1622796"}, {"problem": 56, "code": "(fn [c] (let [s (map last (sort  (clojure.set/map-invert (reduce (fn [m [v p]] (if (contains? m v) m (assoc m v p))) {} (map-indexed #(vector %2 %1) c)))))] (if (list? c) s (vec s))))", "user": "5b100648e4b0cc2b61a3be17"}, {"problem": 56, "code": "(fn find-distinct [s]\n  (loop [s s, m {}, r []]\n    (if (empty? s)\n      r\n      (let [v (first s)]\n        (recur (rest s) (assoc m v true) (if (contains? m v) r (conj r v)))))))", "user": "5c6e1006e4b0fca0c1622744"}, {"problem": 56, "code": "#(last (reduce (fn [[s c] x] (if (s x) [s c] [(conj s x) (conj c x)])) [#{} []] %))", "user": "586bc870e4b01531a375e964"}, {"problem": 56, "code": "(fn [sq]\n          (loop [sq sq\n                 exists #{}\n                 result []]\n            (if (empty? sq)\n              result\n              (let [n (first sq)]\n                (recur (rest sq)\n                       (conj exists n)\n                       (if (exists n)\n                         result\n                         (conj result n)))))))", "user": "5c995fa4e4b048ec896c5a96"}, {"problem": 56, "code": "(fn [seq]\n\t\t\t(reduce (fn [res el] \n\t\t\t\t\t\t\t(if (some #(= % el) res)\n\t\t\t\t\t\t\t\t\t\t\tres\n\t\t\t\t\t\t\t\t\t\t\t(concat res [el])))\n\t\t\t\t\t\t (empty seq) seq))", "user": "5c87c79be4b048ec896c591b"}, {"problem": 56, "code": "(fn dis-red [coll]\n  (reduce (fn [acc el] (if (some #{el} acc) acc (conj acc el))) [] coll)\n  )", "user": "5c987160e4b048ec896c5a82"}, {"problem": 56, "code": "(fn [s]\n    (letfn [(nub [s seen]\n              (cond\n                (empty? s) s\n                (seen (first s)) (nub (rest s) seen)\n                :else (lazy-seq (cons (first s) (nub (rest s) (conj seen (first s)))))\n                ))]\n      (nub s #{})))", "user": "5bd0ea60e4b0e9689409ee45"}, {"problem": 56, "code": "(fn my-distinct\n  [coll]\n  (loop [in coll\n         out []\n         seen-map {}]\n    (let [n (first in) \n          seen (contains? seen-map n)\n          next-seen-map (assoc seen-map n true)]\n      (if (nil? n)\n        out\n        (recur (rest in) (if seen out (conj out n)) next-seen-map)))))", "user": "5c92105ce4b048ec896c59f7"}, {"problem": 56, "code": "(fn [v] \n  (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] v))", "user": "55a21f1ce4b0acc240e3151f"}, {"problem": 56, "code": "(fn [s]\n  (let [res\n        (reduce (fn [acc x]\n                  (if (some #{x} acc) acc (conj acc x)))\n                (empty s) s)]\n    (if (list? res) (reverse res) res)))", "user": "5c950334e4b048ec896c5a44"}, {"problem": 56, "code": "(fn distinct_items [lst]\n  (reduce #(if (== (.indexOf %1 %2) -1)\n             (conj %1 %2)\n             %1) [] lst))", "user": "56df6351e4b0ca2494a095f3"}, {"problem": 56, "code": "(fn [xs0]\n  (loop [xs xs0 result [] bag #{}]\n    (if (empty? xs) result\n        (recur (next xs) \n          (if (contains? bag (first xs)) result (conj result (first xs)))     \n          (conj bag (first xs))\n        )\n    )\n  )\n)", "user": "543bb568e4b032a45b869334"}, {"problem": 56, "code": "reduce (fn [acc x]\n          (if ((set acc) x)\n            acc\n            (conj acc x))) []", "user": "5c896f46e4b048ec896c5940"}, {"problem": 56, "code": "(fn [x] \n  (reduce (fn [s y] \n            (if (empty? (filter #(= % y) s))\n              (conj s y)\n              s)\n            ) [] x)\n  )", "user": "5c9b848fe4b048ec896c5acf"}, {"problem": 56, "code": "(fn uniq [coll]\n  (reduce (fn [acc x]\n            (if (some #{x} acc)\n              acc\n              (conj acc x)))\n          []\n          coll))", "user": "5ca14eb1e4b048ec896c5b7d"}, {"problem": 56, "code": "(fn [s]\n  (loop [outs []\n         ins s]\n    (if (empty? ins)\n      outs\n      (if (some #(= % (first ins)) outs) \n        (recur outs (rest ins))\n        (recur (conj outs (first ins)) (rest ins))))))", "user": "5cab33e7e4b048ec896c5c48"}, {"problem": 56, "code": "(fn f [col]\n  (into [] (java.util.LinkedHashSet. col)))", "user": "5cada3b8e4b026601754b872"}, {"problem": 56, "code": "(fn [coll]\n (loop [res []\n        remcoll coll\n        seen #{}]\n (if (empty? remcoll)\n   res\n   (let [i (first remcoll)]\n    (recur\n     ;rebind res\n     (if (some #{i} seen)\n      res\n      (conj res i))\n     ;rebind remcoll\n     (rest remcoll)\n     ;rebind seen\n     (conj seen i))))))", "user": "510608ebe4b01150e115ebe3"}, {"problem": 56, "code": "(fn [xs_]\n   (loop [xs xs_\n          result []]\n     (if (not-empty xs)\n       (let [x (first xs)]\n         (recur (filter (fn [n] (not= x n)) (next xs)) (conj result x))\n         ) result )\n       )\n    )", "user": "5cadd6a4e4b026601754b87b"}, {"problem": 56, "code": "(fn [coll]\n  (reduce (fn [acc item]\n            (if (contains? (set acc) item)\n              acc\n              (conj acc item)))\n          [] coll))", "user": "5cb71f35e4b026601754b961"}, {"problem": 56, "code": "(fn dist\n    ([seq] (dist seq []))\n    ([seq out]\n     (if (empty? seq)\n       out\n       (if (contains? (set out) (first seq))\n         (dist (rest seq) out)\n         (dist (rest seq) (conj out (first seq)))\n         ))))", "user": "5cbd66e2e4b026601754b9f8"}, {"problem": 56, "code": "(fn[c](reduce \n(fn [a b](if (some #(= b %) a) \n a \n(conj a b) \n  )) [] c))", "user": "5a6dbaf5e4b0512ff01cda63"}, {"problem": 56, "code": "(fn find_distinct [s]\n  (lazy-seq\n    (when-let [fst (first s)]\n      (cons fst (find_distinct (remove (comp (into #{} (list fst))) s)))))\n      )", "user": "5c52f3fce4b0fb8c5ffd99e9"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5cbeadf2e4b0ccb061962755"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5245af03e4b08ba239308124"}, {"problem": 56, "code": "(fn [coll]\n  (loop [acc []         \n         c coll]\n    (if (seq c)      \n      (let [item (first c)]\n        (recur (conj acc item) (filter #(not= item %) c)))\n      acc)))", "user": "5caf9cace4b026601754b89b"}, {"problem": 56, "code": "reduce (fn [c b] (if (= (.indexOf c b) -1) (conj c b) c )) []", "user": "5cc77807e4b0ccb061962838"}, {"problem": 56, "code": "(fn [x] (if (< 49 (count x)) x (keys (frequencies x))))\n;; reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5ccb3792e4b0ccb061962882"}, {"problem": 56, "code": "(fn [seq]\n     (loop [cur (first seq)\n            remain (rest seq)\n            test-map {}\n            result []]\n       (if (nil? cur)\n         result\n         (if (get test-map cur)\n           (recur (first remain) (rest remain) test-map result)\n           (recur (first remain) (rest remain) (assoc test-map cur true) (conj result cur)))\n         )\n       )\n     )", "user": "5ccaed31e4b0ccb061962877"}, {"problem": 56, "code": "(fn [s]\n    (loop [out [] in s]\n        (if (empty? in)\n            out\n            (let [f (first in) out2 (set out)]\n                (if (out2 f)\n                    (recur out (rest in))\n                    (recur (conj out (first in)) (rest in))\n                )\n            )\n        )\n    )\n)", "user": "5bfcdc52e4b0bdcf453d15f4"}, {"problem": 56, "code": "reduce (fn [r v] (if (some #{v} r) r (conj r v))) []", "user": "5a9bfd57e4b0d174b936c7d0"}, {"problem": 56, "code": "(fn [coll]\n  (reduce\n   (fn [result input]\n     (if (some #(= input %) result)\n       result\n       (conj result input)))\n   []\n   coll))", "user": "5cbb0436e4b026601754b9cc"}, {"problem": 56, "code": "(fn [coll] \n  (first \n   (reduce \n    (fn [[c s] i] \n      (if (contains? s i)\n        [c s]\n        [(conj c i) (conj s i)]))\n    [[] #{}]\n    coll)))", "user": "5cdc34a2e4b05ee0cb31173f"}, {"problem": 56, "code": "#(loop [[curr & other]% added #{} result []]\n   (if (nil? curr)\n     result\n     (if (added curr) \n       (recur other added result)\n       (recur other (conj added curr) (conj result curr)))))", "user": "5713c575e4b07c98581c3aab"}, {"problem": 56, "code": "#(->> %\n      reverse\n      (map-indexed (fn [i v] [v i]))\n      (into {})\n      (sort-by second)\n      reverse\n      (map first))", "user": "5cdfe2aee4b0a17bb84e2b04"}, {"problem": 56, "code": "reduce (fn [s e]\n  (if (some #(= % e) s)\n    s\n    (conj s e)))\n[]", "user": "5ca2ca9fe4b048ec896c5b9c"}, {"problem": 56, "code": "(fn [xs]\n  (loop [[x & others] xs\n         the-set      #{}\n         res          []]\n    (cond (nil? x)              res\n          (contains? the-set x) (recur others the-set res)\n          :else                 (recur others (conj the-set x) (conj res x)))))", "user": "5ce077e9e4b0a17bb84e2b0c"}, {"problem": 56, "code": "reduce\n    (fn [nv c] (if (contains? (set nv) c) nv (conj nv c)))\n    []", "user": "5c76577ae4b0fca0c16227ea"}, {"problem": 56, "code": "(fn [items] \n  (reduce (fn [result item] (println result item)\n            (if-not (some #(= item %) result)\n              (conj result item)\n              result)) (vector) items))", "user": "5ccc2a03e4b0ccb06196288f"}, {"problem": 56, "code": "(fn [vs]\n  (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] vs)\n)", "user": "5ce41d1be4b0a17bb84e2b50"}, {"problem": 56, "code": "reduce #(if((set %1) %2) %1 (conj %1 %2)) []", "user": "5cd4e1b2e4b0ccb061962927"}, {"problem": 56, "code": "(fn [col]\n   (loop [col col\n          ret-col []\n          validation-map {}]\n     (if (empty? col)\n       ret-col\n       (let [[e & remaining] col]\n         (recur remaining (if (contains? validation-map e)\n                            ret-col\n                            (conj ret-col e)\n                            ) (assoc validation-map e 1))\n         )\n       )\n     )\n   )", "user": "5cdd7157e4b05ee0cb31175b"}, {"problem": 56, "code": "(fn find-distinct-items [coll]\n\t\"Write a function which removes the duplicates from a sequence. Order of the items must be maintained.\"\n\t(let [in? (fn [coll elm]\n\t\t\t\t(some #(= elm %) coll))]\n\t(reduce #(if (nil? (in? %1 %2)) (conj %1 %2) %1) [] coll)))", "user": "593c1e3be4b069cdc2982b86"}, {"problem": 56, "code": "(fn mdistinct [coll]\n  (loop [ret []\n         todo coll]\n    (if (seq todo)\n      (recur (conj ret (first todo)) (remove #{(first todo)} todo))\n      ret)))", "user": "5c547cf0e4b0fb8c5ffd9a0b"}, {"problem": 56, "code": "reduce #(if (some #{%2} %1) %1 (conj %1 %2)) []", "user": "5ce56455e4b0a17bb84e2b71"}, {"problem": 56, "code": ";; (fn [c] (first (reduce (fn [a v] (if ((second a) v) a [(conj (first a) v) (assoc (second a) v 1)])) [[] {}] c)))\nreduce (fn [a v] (if ((set a) v) a (conj a v))) []", "user": "5a5894d9e4b05d388ecb6c81"}, {"problem": 56, "code": "(fn dedupe\n  ([s] (dedupe s {} []))\n  ([s m acc] \n   (if (empty? s)\n     acc\n     (recur (rest s)\n            (assoc m (first s) true)\n            (if (m (first s))\n              acc\n              (conj acc (first s)))))))", "user": "5ce6f93be4b0a17bb84e2b99"}, {"problem": 56, "code": "(fn [xs]\n     (first (reduce \n             (fn [[vs s] e]\n                 (if (contains? s e) [vs s] [(conj vs e) (conj s e)]))\n             [[] #{}]\n             xs)))", "user": "5ce05561e4b0a17bb84e2b08"}, {"problem": 56, "code": "(fn [xs] (reduce (fn [r x] (if(.contains r x)r(conj r x))) [] xs))", "user": "5ce62d8ee4b0a17bb84e2b83"}, {"problem": 56, "code": "reduce (fn [s e]\n  (if (some #(= % e) s)\n    s\n    (conj s e)))\n[]", "user": "5c387c51e4b0d62ef62d9f83"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5baaae06e4b0a20761a23464"}, {"problem": 56, "code": "(fn [s]\n  (let [index-map #(reduce (fn [acc e] (if (contains? acc (last e)) acc (assoc acc (last e) (first e)))) {} %)]\n    (map #(nth s %) (sort (vals (index-map (map-indexed vector s)))))\n  )\n)", "user": "5cfd5a93e4b0cc9c91588168"}, {"problem": 56, "code": "reduce #(if (some (fn [a] (= a %2)) %) % (conj % %2)) []", "user": "5b9ae606e4b0c0b3ffbd4af2"}, {"problem": 56, "code": "#(loop [ans [] lst % s #{}] (if lst (if (s (first lst)) (recur ans (next lst) s) (recur (conj ans (first lst)) (next lst) (conj s (first lst)))) ans))", "user": "5cebafbbe4b0a17bb84e2be6"}, {"problem": 56, "code": "(fn [x]\r\n  ((reduce\r\n     (fn [{:keys [visited result] :as acc} v]\r\n       (if (visited v) acc {:visited (conj visited v) :result (conj result v)})) \r\n      {:visited #{} :result []}\r\n     x)\r\n    :result))", "user": "5ccb0bbee4b0ccb06196287c"}, {"problem": 56, "code": "(fn [coll]\n      (loop [remainder coll sofar []]\n        (if (empty? remainder)\n          sofar\n          (recur (remove #(= %1 (first remainder)) remainder)\n                 (conj sofar (first remainder))\n                \n                 )\n            )))", "user": "5bf9d9b7e4b0bdcf453d15c4"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5d01fb3ce4b0cc9c915881b5"}, {"problem": 56, "code": "(fn [coll]\n  (loop [coll coll\n         dict #{}\n         res []]\n    (cond (empty? coll) \n          res\n          ;\n          (contains? dict (first coll)) \n          (recur (rest coll) dict res)\n          ;\n          :else (recur (rest coll) (conj dict (first coll)) (conj res (first coll))))\n          ))", "user": "5c3f29d4e4b08cd430848e8f"}, {"problem": 56, "code": "#(loop [coll %\n        ret []\n        unq #{}]\n   (if (empty? coll)\n     ret\n     (let [[x :as r] coll]\n       (if (unq x)\n         (recur (rest coll) ret unq)\n         (recur (rest coll) (conj ret x) (conj unq x))))))", "user": "54236ce1e4b01498b1a71ad1"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5cee521ce4b0aaa82f1129dd"}, {"problem": 56, "code": "(fn [x] (first (reduce #(let [st (second %1) ar (first %1)] (if (contains? st %2) [ar st] [(conj ar %2) (conj st %2) ] ))      [[] #{}]  x)))", "user": "5d0cf1c8e4b0cc9c91588246"}, {"problem": 56, "code": "(fn [coll] (loop [coll coll x {}, y '()]\n                                  (if (empty? coll)\n                                    (reverse y)\n                                    (recur (rest coll) (merge x (hash-map (nth coll 0) nil)) (if (contains? x (nth coll 0))\n                                                                                               y\n                                                                                               (conj y (nth coll 0))\n                                                                                               )\n                                           )\n                                    )\n                                  )\n                       )", "user": "5cf72682e4b0b71b1d808a68"}, {"problem": 56, "code": "(fn [coll]\n  (loop [acc [] rem coll]\n    (if (nil? (seq rem))\n      acc\n      (if (some #(= % (first rem)) acc)\n        (recur acc (rest rem))\n        (recur (concat acc [(first rem)]) (rest rem))))))", "user": "5d126728e4b02c15ef02199a"}, {"problem": 56, "code": "(fn [coll]\n   (if (> 7 (count coll))\n     (map first (group-by identity coll))\n\n     (into []\n       (into (sorted-set) coll))))", "user": "5a03d246e4b01bb0ae8afd8c"}, {"problem": 56, "code": "reduce #(if ((set %) %2) % (conj % %2)) []", "user": "5d0e311de4b0cc9c91588251"}, {"problem": 56, "code": "(fn deduplicate [xs]\n  (:result (reduce (fn [res x]\n            (let [found (:found res)]\n              (if (contains? found x)\n                res\n                {:found (conj found x)\n                 :result (conj (:result res) x)})))\n            {:found #{} :result []}\n            xs)))", "user": "5cdc08a2e4b05ee0cb31173a"}, {"problem": 56, "code": "(fn\n  [c]\n  (loop [acc []\n         rem c]\n    (if (empty? rem)\n      acc\n      (let [fe (first rem)]\n        (recur\n          (conj acc fe)\n          (filter #(not (= % fe)) (rest rem)))))))", "user": "5d1b2b7de4b02ea6f0fb697a"}, {"problem": 56, "code": "#(second (reduce (fn [x y]\n           (let [[contains res] x] (if-not (contains y)\n                                     [(conj contains y) (conj res y)]\n                                     x))\n                   )\n                 [#{} []]\n         %))", "user": "5cfee28de4b0cc9c91588185"}, {"problem": 56, "code": "reduce #(if (some (partial = %2) %) % (conj % %2)) []", "user": "51dd5d6fe4b0c33a4e1da406"}, {"problem": 56, "code": "(fn dist [x]\n        (cond (empty? x) x\n              :else (cons (first x) (dist (filter #(not= (first x) %) (rest x))))))", "user": "5d1bbef0e4b02ea6f0fb6984"}, {"problem": 56, "code": "(fn\n  [arr]\n  (loop [[f & r] arr\n         res []\n         seen #{}]\n    (if f\n      (if (contains? seen f)\n        (recur r res seen)\n        (recur r (conj res f) (conj seen f)))\n      res)))", "user": "570c8ac3e4b0b0fb43fd06ca"}, {"problem": 56, "code": "(fn [s] (reduce (fn [s v] (if (contains? (set s) v) s (conj s v))) [] s))", "user": "5d236215e4b02ea6f0fb6a09"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5d2201b8e4b02ea6f0fb69ed"}, {"problem": 56, "code": "#(reduce (fn [acc v] (if (not ((set acc) v)) (conj acc v) acc)) [] %)", "user": "5d02fe44e4b0cc9c915881c0"}, {"problem": 56, "code": "#(loop [col % rt [] chk #{}]\n   (if(empty? col)\n     rt\n     (let [new-col (rest col) item (first col) is-exist (not(nil? (chk item))) ]\n       (recur new-col (if is-exist rt (conj rt item)) (if is-exist chk (conj chk item)))\n       )\n     )\n   )", "user": "5d270111e4b092dab7f59c62"}, {"problem": 56, "code": "#(second \n  (reduce (fn [[seen res :as acc] x] (if (seen x) acc [(conj seen x) (conj res x)]))\n          [#{} []]\n          %))", "user": "5d272077e4b092dab7f59c64"}, {"problem": 56, "code": "(fn [col] \n  (into [] (java.util.LinkedHashSet. col)))", "user": "5d231255e4b02ea6f0fb69fe"}, {"problem": 56, "code": "(fn \n  [coll]\n  (reduce (fn [acc curr]\n            (if (some #(= curr %) acc)\n              acc\n              (conj acc curr)))\n          []\n          coll))", "user": "5d1c14cde4b02ea6f0fb698a"}, {"problem": 56, "code": "(fn my-distinct [s]\n  (let [ [dist res] (reduce (fn [[dist res] x]\n                              (if (contains? dist x)\n                                [dist res]\n                                [(conj dist x) (conj res x)]))\n                            [#{} []] s)]\n    res))", "user": "5d247902e4b02ea6f0fb6a24"}, {"problem": 56, "code": "(fn g [s]\n  (loop [[x & xs] s\n         r []]\n    (if x\n      (recur (remove #(= % x) xs) (conj r x))\n      r)))", "user": "5012da69e4b0c8732600222d"}, {"problem": 56, "code": "#(reduce (fn [ac x] (if ((set ac) x) ac (conj ac x))) [] %)", "user": "5c3796b3e4b0d62ef62d9f77"}, {"problem": 56, "code": "(fn [col]\n      (reduce\n       (fn [acc cur]\n         (if (some #(= % cur) acc)\n           acc\n           (concat acc [cur]))) [] col))", "user": "576e607ae4b0979f89651579"}, {"problem": 56, "code": "(fn find-distinct [coll]\n  (loop [remaining coll\n         visited #{}\n         res []]\n    (if (empty? remaining)\n      res\n      (let [next (first remaining)]\n        (if (contains? visited next)\n          (recur (rest remaining) visited res)\n          (recur (rest remaining) (conj visited next) (conj res next)))))))", "user": "5d1be50ce4b02ea6f0fb6986"}, {"problem": 56, "code": "(fn [l]\n  (loop [ll l ss #{} rr []]\n    (if (empty? ll)\n      rr\n      (let [elem (first ll)]\n        (if (contains? ss elem)\n          (recur (rest ll) ss rr)\n          (recur (rest ll) (conj ss elem) (conj rr elem)))))))", "user": "5d3ae729e4b01671435dbd5d"}, {"problem": 56, "code": "(fn [xs]\n  (->> xs\n       (map-indexed vector)\n       (group-by second)\n       (map (juxt first (comp ffirst second)))\n       (sort-by second)\n       (map first)))", "user": "5d27da09e4b092dab7f59c75"}, {"problem": 56, "code": "(fn [x]\n  (->> x\n    ;; enumerate the elements\n    (map vector (range))\n    ;; find the first occurrence of each distinct element\n    (reverse)\n    (reduce #(let [[a b] %2]\n                (assoc %1 b a)) {})\n    ;; get the distinct elements, in order\n    (clojure.set/map-invert)\n    (#(map % (sort (keys %))))\n ))", "user": "5d2e5065e4b01671435dbcae"}, {"problem": 56, "code": "(fn distct [xs]\n  (loop [r [] [e & ls] xs]\n    (if (nil? e)\n      r\n      (recur (if (some (partial = e) r) r (conj r e))\n             ls))))", "user": "598601f9e4b021a7a535fe79"}, {"problem": 56, "code": "(fn [sqn]\n  (reduce #(if ((set %1) %2)\n              %1\n              (conj %1 %2)) [] sqn))", "user": "5cf895efe4b0b71b1d808a85"}, {"problem": 56, "code": "#(reduce (fn [a v] (if (some #{v} a) a (conj a v))) [] %)", "user": "5d45749be4b07c84aa5ae6a2"}, {"problem": 56, "code": "(partial reduce #(if ((set %1) %2) %1 (conj %1 %2)) [])", "user": "4e628ab2535d8ccf87e9fe61"}, {"problem": 56, "code": "(fn [l] (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] l))", "user": "5d439775e4b07c84aa5ae696"}, {"problem": 56, "code": "(fn [xs]\n  (loop [xs xs\n         res []\n         seen #{}]\n    (cond\n      (empty? xs) res\n      (seen (first xs))\n        (recur (rest xs) res seen)\n      :else\n        (recur (rest xs) (conj res (first xs)) (conj seen (first xs))))))", "user": "5d46fbc6e4b07c84aa5ae6af"}, {"problem": 56, "code": "(fn [coll]\n  (reduce\n   (fn [v x]\n     (if (some #{x} v) v\n       (conj v x)))\n   []\n   coll))", "user": "5ccf99fbe4b0ccb0619628c8"}, {"problem": 56, "code": "(fn [L]\n      (let [Ret (keys (group-by identity L))]\n        (if (= (empty (first L)) [])\n          Ret\n          (sort Ret)\n        )\n      )\n    )", "user": "5d4a6c6ce4b0776584bd6f22"}, {"problem": 56, "code": "(fn [seq]\n    (let [unique-set (fn [coll x]\n                       (if (nil? ((set coll) x))\n                         (conj coll x)\n                         coll))]\n      (reduce unique-set [] seq)))", "user": "5d0153f9e4b0cc9c915881aa"}, {"problem": 56, "code": "(fn dedupe\n   ([coll] (dedupe coll #{}))\n   ([coll h]\n    (when-let [s (seq coll)]\n      (let [v (first s)\n            h' (conj h v)]\n        (lazy-seq (cons v (dedupe (drop-while #(h' %) (rest coll)) h')))))))", "user": "5bb25684e4b0a20761a2350d"}, {"problem": 56, "code": "(fn my-distinct [coll] (last (reduce (fn dothings[[seen res] val] (if (seen val)\n                                                                      [seen res]\n                                                                      [(conj seen val) (conj res val)])) [#{} []] coll)))", "user": "5d45bd1de4b07c84aa5ae6a4"}, {"problem": 56, "code": "#(reduce (fn [acc x] (if (contains? (set acc) x) acc (conj acc x))) [] %)", "user": "5d29c06be4b01671435dbc6b"}, {"problem": 56, "code": "(fn [coll] (->>\n  coll\n  (map-indexed vector)\n  (group-by second)\n  (map (fn [[k v]] [k (first (first v))]))\n  (sort-by second)\n  (map (fn [[k v]] k))\n            ))", "user": "5d1a1082e4b0902706380e0e"}, {"problem": 56, "code": "(fn [coll]\n  (reduce #(if ((set %1) %2) %1 (conj %1 %2)) [] coll))", "user": "54b42ea4e4b05787c3b1638b"}, {"problem": 56, "code": "(fn dstnct\n  ([s]\n   (dstnct s #{}))\n  ([s t]\n   (if (empty? s)\n     nil\n     (let [[x & rst] s]\n       (if (t x)\n         (dstnct rst t)\n         (cons x (dstnct rst (conj t x))))))))", "user": "5d0bb4fae4b0cc9c91588237"}, {"problem": 56, "code": "(fn [coll]\n  (let [dis (fn dis [seen coll]\n              (cond (empty? coll) coll\n                    (true? (seen (first coll))) (dis seen (rest coll))\n                    :else (cons (first coll)\n                                (dis\n                                 (merge seen {(first coll) true})\n                                 (rest coll)))))]\n    (dis {} coll)))", "user": "5d48e6d3e4b0776584bd6f15"}, {"problem": 56, "code": "(fn [coll]\n    (reduce (fn [hm x]\n              (if (some #(= % x) hm)\n                hm\n                (conj hm x)))\n            []\n            coll))", "user": "5d52ea90e4b0776584bd6f6c"}, {"problem": 56, "code": "(fn my-distinct\n  [coll]\n  (reduce\n    (fn [result val]\n      (if (not (some #(= val %) result))\n            (conj result val)\n            result))\n      []\n    coll))", "user": "5d5a79cce4b02ba5928a6833"}, {"problem": 56, "code": "(fn [x]\n  (reduce\n    #(if (some #{%2} %1)\n       %1\n       (conj %1 %2))\n    []\n    x))", "user": "5c0eb93ce4b01240ff567146"}, {"problem": 56, "code": "(fn my-distict [xs]\n  (let \n    [contains-value?  (fn [value, call]\n                        (some #(= value %) call))\n    \n     add-if-distinct, (fn [coll, value]\n                        (if (contains-value? value coll)\n                          coll\n                          (conj coll value)))]\n    \n    (reduce add-if-distinct [] xs)))\n\n\n;; reduce\n;; #(if (some #{%2} %1)\n;;   %1\n;;   (conj %1 %2))\n;; []", "user": "57204301e4b0c5bde472c093"}, {"problem": 56, "code": "(fn [s] (reduce (fn [x y] (if ((set x) y) x (conj x y))) [] s))", "user": "5d52bf29e4b0776584bd6f69"}, {"problem": 56, "code": "(fn dist [coll] (reduce (fn [acc n] (if (some #(= n %) acc) acc (conj acc n))) [] coll))", "user": "5d4f21f3e4b0776584bd6f4e"}, {"problem": 56, "code": "(fn [seq]\n  (loop [found [] seq seq]\n    (if (empty? seq) found\n      (recur (if (some #(= % (first seq)) found) found\n               (conj found (first seq)))\n             (drop 1 seq)))))", "user": "5d4b2155e4b0776584bd6f28"}, {"problem": 56, "code": "(fn [coll]\n  (reduce (fn [cur n]\n            (if (some #(= n %) cur)\n              cur\n              (conj cur n)))\n          []\n          coll))", "user": "5cb41c40e4b026601754b911"}, {"problem": 56, "code": "(fn find-duplicate\n  [xs]\n  (reverse (first (reduce (fn [acc v]\n                            (let [seen-set (second acc)\n                                  result-seq (first acc)]\n                              (if (seen-set v)\n                                acc\n                                [(conj result-seq v) (conj seen-set v)]\n                                )))\n                          [() #{}]\n                          xs))))", "user": "5d53a59ae4b0776584bd6f72"}, {"problem": 56, "code": "(fn [col]\n   (reduce (fn [ac n]\n             (if (some #(= % n) ac) ac (conj ac n) )\n             ) [] col))", "user": "5d5eb086e4b0c9e5857d4ff7"}, {"problem": 56, "code": "(fn [seq]\n  (reduce\n    (fn [new-seq item]\n      (if (not (some #(= item %) new-seq))\n        (conj new-seq item)\n        new-seq))\n    [] seq))", "user": "5d6633bde4b0db5d338d15e2"}, {"problem": 56, "code": "(fn [coll] (loop [s (seq coll)\n                  seen {}\n                  uniq []]\n             (if-let [fst (first s)]\n               (if (seen fst)\n                 (recur (rest s) seen uniq)\n                 (recur (rest s) (assoc seen fst true) (conj uniq fst)))\n               uniq)))", "user": "5d629ed9e4b0c9e5857d501d"}, {"problem": 56, "code": "(fn find-dist [coll]\n  (loop [myvec [] myset #{}  mycoll coll]\n    (if (empty? mycoll)\n      (filter identity myvec)\n      (let [element (if (contains? myset (first mycoll)) nil (first mycoll))]\n        (recur\n          (conj myvec element)\n          (conj myset (first mycoll))\n          (rest mycoll))))))", "user": "5ad76df9e4b0ea6055cfac18"}, {"problem": 56, "code": "#((fn duplicates  [acc s col]\n   (if (seq col)\n     (if (contains? s (first col))\n       (duplicates acc s (rest col))\n       (duplicates (conj acc (first col)) (conj s (first col)) (rest col))\n       )acc)) [] #{} %)", "user": "5be79b5be4b0f319e2d7ec5a"}, {"problem": 56, "code": "(fn [coll] (reduce #(if (some (fn [e] (= e %2)) %1) %1 (conj %1 %2)) [] coll))", "user": "5d47f4dbe4b07c84aa5ae6b5"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5d67c955e4b0db5d338d15f7"}, {"problem": 56, "code": "(fn [x]\n (reduce #(if (some #{%2} %1) \n           %1\n           (conj %1 %2))\n           [] x))\n\n\n;;If we give reduce an empty vector and the sequence to process\n;; then we can use the if statement to conditionally add the next value\n;; from the sequence to the vector.\n;; Each value we get from the sequence is compared to the values added\n;; to the vector\n;; reduce breaks into collection 1. [] [1 2 1 5 6 8 6] 2. [1] 2", "user": "5ce5b43be4b0a17bb84e2b7a"}, {"problem": 56, "code": "(fn [x]\n   (loop [[x & rx :as ax] x\n          y (empty ax)]\n     (if (empty? ax)\n       (if (vector? y)\n         y\n         (reverse y))\n       (if (some #(= x %) y)\n         (recur rx y)\n         (recur rx (conj y x))))))", "user": "5d5ef0bce4b0c9e5857d4ffb"}, {"problem": 56, "code": "(fn f\n  ([ls] (f ls []))\n  ([ls acc] (if (empty? ls) acc\n   (let [x (first ls)\n         xs (rest ls)]\n     (if (some #{x} acc)\n       (f xs acc)\n       (f xs (concat acc [x])))))))", "user": "5d672bd7e4b0db5d338d15f1"}, {"problem": 56, "code": "(fn [coll] (sort-by #(.indexOf coll %)  (map first (group-by identity coll))))", "user": "5d6523ace4b0db5d338d15cd"}, {"problem": 56, "code": "(fn distinkt\n  [coll]\n  (letfn [(more\n            [seen xs]\n            (lazy-seq\n              (when (seq xs)\n                (let [x (first xs)]\n                  (if (contains? seen x)\n                    (more seen (rest xs))\n                    (cons x (more (conj seen x) (rest xs))))))))]\n    (more #{} coll)))", "user": "5d609ddde4b0c9e5857d5008"}, {"problem": 56, "code": "(fn d [coll]\n  (if (seq coll)\n    (let [f (first coll)]\n      (cons f (d (remove #{f} (rest coll)))))))", "user": "597f8c93e4b0dbe32238d0c1"}, {"problem": 56, "code": "#(sort-by (fn [x] (.indexOf % x)) (keys (group-by identity %)))", "user": "5d5950c1e4b02ba5928a6827"}, {"problem": 56, "code": "(fn [xs]\n  (loop [tail xs acc [] guard #{}]\n    (let [f (first tail)]\n     (if (empty? tail) acc (recur (rest tail) (if (contains? guard f) acc (conj acc f)) (conj guard f))))))", "user": "5d5e0259e4b0c9e5857d4fef"}, {"problem": 56, "code": "(fn find-distinct [some-seq]\n  (reduce (fn add-or-not [the-seq elem]\n  (if (some #(= elem %) the-seq)\n    the-seq\n    (conj the-seq elem))) [] some-seq))", "user": "5d6e5ec6e4b04d129b00f2c7"}, {"problem": 56, "code": "(fn [x]\n  (reduce (fn [coll n]\n            (if (some #(= n %) coll)\n              coll\n              (conj coll n)))\n          [] x))", "user": "5beda647e4b0a6d31fed2122"}, {"problem": 56, "code": "reduce #(if (= nil (some (fn [x] (= %2 x)) %1)) (conj %1 %2) %1) []", "user": "5d764e52e4b02e6b30c93524"}, {"problem": 56, "code": "#(reduce\n  (fn [a b]\n    (if\n     (some\n      (fn [x] (= x b)) a)\n      a\n      (concat a [b])))\n  (empty %1)\n  %1)", "user": "5d5c6675e4b09db18d4482ec"}, {"problem": 56, "code": "(fn my-distinct [coll]\n  (reduce (fn [acc item]\n            (if ((set acc) item)\n              acc\n              (conj acc item)))\n          []\n          coll))", "user": "5d6f063de4b04d129b00f2d1"}, {"problem": 56, "code": "(fn foo [seq]\n      (loop [res [] look_table {} [ff & rr] seq]\n            (if (nil? ff)\n                  res\n                  (recur (if (look_table ff)\n                               res\n                                        (conj res ff))\n                         (assoc look_table ff true)\n                         rr)\n                  )\n            )\n      )", "user": "5d809b4fe4b0915913b1d36c"}, {"problem": 56, "code": "(fn dist [s]\n  (if (= 0 (count s))\n    ()\n    (let [f (first s) r (rest s)]\n      (conj (dist (filter #(not= % f) r)) f))))", "user": "5d81c244e4b0915913b1d37a"}, {"problem": 56, "code": "(fn my-distinct\n  [coll]\n  (loop [res [] existing #{} remaining coll]\n    (if (empty? remaining)\n      res\n      (let [el (first remaining)\n            add? (not (contains? existing el))\n            newExisting (conj existing el)]\n        (recur (or (and add? (conj res el)) res)\n               newExisting\n               (rest remaining))))))", "user": "5d7b90ede4b02e6b30c93552"}, {"problem": 56, "code": "(fn f [c]\n  (if (seq c)\n    (let [it (last c)\n          remain (butlast c)\n          res (vec (f remain))]\n      (if ((into #{} res) it)\n        res\n        (conj res it)))))", "user": "5d7eaf5fe4b0492f5d910fc3"}, {"problem": 56, "code": "#((reduce (fn [[result, seen] x]\n            (if (seen x)\n              [result, seen]\n              [(conj result x) (conj seen x)]))\n          [[], #{}] %)\n    0)", "user": "5aa8e841e4b0d174b936c8d5"}, {"problem": 56, "code": "(fn [s] (reduce #(let [n (conj %1 %2)] (if (apply distinct? n) n %1)) [] s))", "user": "5d6d2172e4b04d129b00f2b9"}, {"problem": 56, "code": "(fn [x] (loop [out [] x x] (if (empty? x) out (recur (if (contains? (set out) (first x)) out (conj out (first x))) (remove (set out) x)))))", "user": "5d7158f3e4b04d129b00f2e1"}, {"problem": 56, "code": "(fn [c]\n  (reduce (fn [acc x]\n            (if (some #(= x %) acc)\n              acc\n              (conj acc x)))\n          [] c))", "user": "5d24e49be4b02ea6f0fb6a2a"}, {"problem": 56, "code": "(fn [v]\n  (first (reduce (fn [[xm s] x]\n                   (if (get s x)\n                     (list xm s)\n                     (list (conj xm x) (conj s x)))) (list [] #{}) v)))", "user": "5cbd5b42e4b026601754b9f6"}, {"problem": 56, "code": "(fn [xs] (reduce (fn [acc x] (if (some #(= x %) acc) acc (conj acc x))) [] xs))", "user": "5d81b40ce4b0915913b1d379"}, {"problem": 56, "code": "#(sort-by (fn [x] (.indexOf % x))\n          (keys (group-by identity %)))", "user": "5d81eba4e4b0915913b1d37b"}, {"problem": 56, "code": "(fn [x] (loop [todo x result [] already #{}]\n\n(println todo result already)\n           (if (empty? todo)\n             result\n             (recur (rest todo)\n                    (if (already (first todo))\n                      result\n                      (conj result (first todo)))\n                    (conj already (first todo))))\n           ))", "user": "5951190be4b066ee0a44aea4"}, {"problem": 56, "code": "(fn dist\n  ([coll] (dist coll {}))\n  ([coll known]\n   (cond\n     (empty? coll) nil\n     (known (first coll)) (dist (rest coll) known)\n     :else (cons (first coll)\n                 (lazy-seq (dist (rest coll) (assoc known (first coll) true)))))))", "user": "5d9c1226e4b0d3f9b434ad51"}, {"problem": 56, "code": ";; the real answer tho: #(->> (mapcat list % %) (apply array-map) vals)\n\n(let\n  [ member? #(contains? (set %1) %2)\n  ]\n  (partial reduce #(if (member? %1 %2) %1 (conj %1 %2)) []))", "user": "5d123457e4b02c15ef021996"}, {"problem": 56, "code": "(fn [coll]\n  (reduce\n   (fn [acc val] (if (some #{val} acc) acc (conj acc val)))\n   []\n   coll))", "user": "5d97b602e4b0d3f9b434ad3a"}, {"problem": 56, "code": "#(reduce (fn [acc i] (if ((set acc) i) acc (conj acc i))) [] %)", "user": "59ef6cfae4b0966464fe6a32"}, {"problem": 56, "code": "(fn my-distinct [col]\n  (reduce (fn [list value]\n            (if (not (contains? (set list) value))\n              (concat list [value])\n              list))\n          '()\n          col))", "user": "5da6cb60e4b000c986472c10"}, {"problem": 56, "code": "(fn [x] (reverse (reduce (fn [x y] (if (some #(= y %) x) x (conj x y))) '() x)))", "user": "5d931a58e4b0d3f9b434ad10"}, {"problem": 56, "code": "#(:res (reduce \n        (fn [acc i] (if ((:hash acc) i) \n                        acc\n                        (do \n                            (assoc acc :res (concat (:res acc) [i])\n                                       :hash (assoc (:hash acc) i true))\n                        ))) {:res [], :hash {}} %))", "user": "5799b260e4b05b1deef9adc8"}, {"problem": 56, "code": "(partial reduce \n         (fn [a x] (if (.contains a x)\n                     a \n                     (conj a x)))\n           [])", "user": "5da8fa72e4b000c986472c2d"}, {"problem": 56, "code": "(fn foo [s]\n  (->> s (map-indexed (fn [e i] {i e})) \n         (apply merge-with min) \n         (sort-by second) \n         (map first))\n)", "user": "5d9e7971e4b000c986472bc1"}, {"problem": 56, "code": "(fn \n  [args]\n  (reduce (fn [new-map arg]\n            (if (some #{arg} new-map) \n              new-map\n              (conj new-map arg)))\n          []\n          args))", "user": "5d96edeae4b0d3f9b434ad35"}, {"problem": 56, "code": "(fn wut [c]\n  (loop [c c\n         r []\n         s #{}]\n    (if (empty? c)\n      (reverse r)\n      (let [v (first c)]\n        (recur (rest c) (if (contains? s v) r (cons v r)) (conj s v))))))", "user": "5cf6522be4b0b71b1d808a58"}, {"problem": 56, "code": "(fn [coll] (into [] (java.util.LinkedHashSet. coll)))", "user": "5da4b152e4b000c986472bf6"}, {"problem": 56, "code": "(fn find-distinct [coll]\n  (reduce (fn [acc n]\n            (if (some #{n} acc)\n              acc\n              (conj acc n)))\n          []\n          coll))", "user": "5d7aa22ee4b02e6b30c9354e"}, {"problem": 56, "code": "(fn my-distinct\n  ([s]\n   (cons (first s) (my-distinct #{(first s)} (rest s))))\n  ([seen s]\n    (if (empty? s)\n      s\n      (if (contains? seen (first s))\n        (recur seen (rest s))\n        (lazy-seq (cons (first s) \n                        (my-distinct \n                          (conj seen (first s)) \n                          (rest s))))))))", "user": "5d1231dde4b02c15ef021995"}, {"problem": 56, "code": "(fn [coll]\n    (first (reduce (fn [[accu seen] cur]\n               (if-not (seen cur)\n                 [(conj accu cur) (conj seen cur)]\n                 [accu seen]\n                 ))\n             [[] #{}]\n             coll)))", "user": "5d883119e4b0915913b1d3a6"}, {"problem": 56, "code": "(fn remove-duplicates [xs]\n  (loop [xs xs, seen #{}, acc []]\n    (if (empty? xs) acc\n        (let [x (first xs), seen (conj seen x), acc (conj acc x)]\n          (recur (remove seen xs) seen acc)))))", "user": "5db0d470e4b0f8c104ccfc9e"}, {"problem": 56, "code": "(fn find-distinct-items [s]\n(sort-by #(.indexOf s %)\n  (keys (group-by identity s))))", "user": "5daeb6bce4b0f8c104ccfc8b"}, {"problem": 56, "code": "(fn problem57 [x]\n  (sort-by #(.indexOf x %) (keys (group-by identity x ) ) ) )", "user": "5bc2df19e4b07a9b28b10038"}, {"problem": 56, "code": "(fn [col]\n  (:res\n   (reduce (fn [{:keys [seen res]} x]\n             {:seen (conj seen x)\n              :res (if (seen x) res (conj res x))})\n           {:seen #{}\n            :res []}\n           col)))", "user": "4eda8d7c535d10e5ff6f530f"}, {"problem": 56, "code": "(fn [coll]\n  (reduce (fn [my-coll nx] (if (some #{nx} my-coll) my-coll (conj my-coll nx))) [] coll)\n)", "user": "5da975b9e4b000c986472c32"}, {"problem": 56, "code": "(fn dist [coll]\n(loop [mp {}\n       ans []\n       coll coll]\n  (if-let [s (seq coll)]\n    (if (not (get mp (first s)))\n      (recur (assoc mp (first s) 1) (conj ans (first s)) (rest s))\n      (recur mp ans (rest s)))\n    ans)))", "user": "5da94ccfe4b000c986472c2f"}, {"problem": 56, "code": "(fn [coll]\n  (map first\n       (partition-by identity\n                     (sort-by #(.indexOf coll %) coll))))", "user": "5da760ebe4b000c986472c1a"}, {"problem": 56, "code": "(fn f561\n  [args]\n  (let [ f* (fn [col s]\n              (if (.contains col s)\n                col\n                (conj col s)))]\n    (reduce f* [] args)))", "user": "5db658ebe4b010eb3c36cd39"}, {"problem": 56, "code": "(fn [col] (vec (apply sorted-set-by #(compare (.indexOf col %) (.indexOf col %2)) col)))", "user": "5dbd51cfe4b09f47823971bb"}, {"problem": 56, "code": "(fn[ip]\n   (reduce\n    (fn [distinct-vector current-element]\n      (if (not (some #(= current-element %) distinct-vector))\n        (conj distinct-vector current-element)\n        distinct-vector))\n    []\n    ip))", "user": "5d8c8175e4b0915913b1d3e1"}, {"problem": 56, "code": "(fn fun [col]\n  (vals\n    (into (sorted-map)\n      (map\n        (fn [[x y]] [y x]) \n        (reduce\n          (fn [mapR el]\n            (if (contains? mapR el) mapR\n              (assoc mapR el (count mapR))\n            )\n          )  \n          {}\n          col\n        )\n      )\n    )\n  )\n)", "user": "5da20e73e4b000c986472be1"}, {"problem": 56, "code": "(fn rr[coll](loop[coll coll\n                    ret []]\n                (println coll ret)\n                (cond\n                  (empty? coll)ret\n                  :else (recur (rest coll)\n                               (cond\n                                 (not(some #(= %(first coll)) ret))(conj ret (first coll))\n                                 :else ret)\n                               ))))", "user": "5dadf73ee4b0f8c104ccfc86"}, {"problem": 56, "code": "#(reduce    (fn [c i] (if  ((set c) i) c (conj c i)        )       )  [] % )", "user": "5da98129e4b000c986472c33"}, {"problem": 56, "code": "(fn [s]\n   (let [g (into #{} (map first (group-by identity s)))]\n    (loop [res [] s s]\n      (let [f (first s)]\n        (if (contains? g f)\n          (recur (conj res f) (remove #(= f %) (rest s)))\n          res)))))", "user": "5da71eaee4b000c986472c15"}, {"problem": 56, "code": "#(->\n \t(fn [[ret s] v] (if (s v) [ret s] [(conj ret v) (conj s v)]))\n\t(reduce [[] #{}] %)\n\t(first)\n)", "user": "5db7376fe4b010eb3c36cd43"}, {"problem": 56, "code": "#( loop [c % re [] se #{}]\n   (cond\n     (not (first c)) re\n     (contains? se (first c)) (recur (rest c) re se)\n     :else (recur (rest c) (conj re (first c)) (conj se (first c)))))", "user": "5dc12b0ae4b0e59a23173d84"}, {"problem": 56, "code": ";#(loop [current  % sv {} ret []]\n;   (if (empty? current)\n;     ret\n;     (recur (rest current)\n;            (if-not (contains? sv (first current)) (assoc sv (first current) (count current)) sv)\n;            (if-not (contains? sv (first current)) (conj ret (first current)) ret)\n;            )))\n\n\n#(loop [current % sv {} ret []]\n      (if (empty? current)\n        ret\n        (if-not (contains? sv (first current))\n          (recur (rest current) (assoc sv (first current) true) (conj ret (first current)) )\n          (recur (rest current) sv ret))))", "user": "5b044436e4b0cc2b61a3bd71"}, {"problem": 56, "code": "(fn\n  [s]\n  (loop [uniq [], tracker {}, remaining s]\n    (if (empty? remaining)\n      uniq\n      (if (get tracker (first remaining))\n        (recur uniq tracker (rest remaining))\n        (recur (conj uniq (first remaining)) (merge tracker {(first remaining) true}) (rest remaining))))))", "user": "5dc9ccf8e4b02f9375f4e1f1"}, {"problem": 56, "code": "(fn [coll]\n  (loop [result []\n         seen? #{}\n         remaining coll]\n    (if (seq remaining)\n      (let [[x & xs] remaining]\n        (recur\n         (if (seen? x) result (conj result x))\n         (conj seen? x)\n         xs))\n      result)))", "user": "5ab16992e4b073f1774425c4"}, {"problem": 56, "code": "#(reduce (fn [s x] (if (some #{x} s) s (conj s x))) [] %)", "user": "5db92996e4b010eb3c36cd50"}, {"problem": 56, "code": "(fn [coll] (reduce (fn [res nxt] (if (some #{nxt} res) res (conj res nxt))) [] coll))", "user": "5dcfdf23e4b0948ae9d9ad43"}, {"problem": 56, "code": "(letfn\n [(add-if [[m1 m2] x] (if (contains? m2 x) [m1 m2] [(conj m1 x) (conj m2 x)]))]\n  (fn [s] (first (reduce add-if [[] #{}] s))))", "user": "5dc98501e4b02f9375f4e1e6"}, {"problem": 56, "code": "#(->> %\n     (map-indexed (fn [i v] [v i]))\n     (group-by first)\n     (map (fn [i] [(first i) (second (first (second i)))]))\n     (sort-by second)\n     (map first))", "user": "5dc40814e4b02f9375f4e1ae"}, {"problem": 56, "code": "( fn xxx [ l ] (reverse ( loop [ a l b #{} c '() ] ( if (empty? a) c (recur (rest a) (conj b ( first a)) (if (contains? b (first a)) c (conj c (first a)) ))))))", "user": "53d63e6ce4b0e771c3025454"}, {"problem": 56, "code": "(fn distinct-items [elements]\n  (let [typed-holder (empty elements)]\n    (concat typed-holder\n          (reverse\n           (first\n            (reduce #(let [holder %1\n                           assembler (first holder)\n                           checker (second holder)\n                           elem %2]\n                       (if (checker elem)\n                         holder\n                         (list (conj assembler elem) (into checker {elem true}))))\n                    (list (list) (hash-map))\n                    elements))))))", "user": "5dc4719ae4b02f9375f4e1b5"}, {"problem": 56, "code": "(fn\n  [coll]\n  (loop [[first & rest] coll\n         result []\n         acc #{}]\n    (cond (nil? first) result\n          (contains? acc first) (recur rest result acc)\n          :else (recur rest (conj result first) (conj acc first)))))", "user": "5dd65ea4e4b0948ae9d9ad7f"}, {"problem": 56, "code": "(fn rem-dup [coll]\n  (loop [handled #{}\n         rem coll\n         res []]\n    (if (empty? rem)\n      res\n      (let [[head & tail] rem]\n        (if (contains? handled head)\n          (recur handled tail res)\n          (recur (conj handled head) tail (conj res head)))))))", "user": "5dd67c22e4b0948ae9d9ad80"}, {"problem": 56, "code": "(fn no-dupes ([[h & t]] (no-dupes t [h] #{h}))\n   ([[h & t] out check]\n    [h t out check]\n    (if (nil? t)\n      (if (contains? check h) out (conj out h))\n      (no-dupes t\n                (if (contains? check h) out (conj out h))\n                (conj check h)))\n    ))", "user": "5dd90651e4b0948ae9d9ad97"}, {"problem": 56, "code": "#(reduce (fn [col itm] (if (some (fn [x] (= itm x)) col) col (conj col itm))) [] %)", "user": "5ddd3cbee4b0948ae9d9adc3"}, {"problem": 56, "code": "(fn [xs]\n    (reduce (fn [a b] (if (some #{b} a) a (conj a b))) [] xs))", "user": "5cc6b4bfe4b0ccb061962827"}, {"problem": 56, "code": "(fn [coll] \n  (reduce \n    (fn [acc val] (if (contains? (set acc) val) acc (conj acc val))) [] coll))", "user": "5da05bcce4b000c986472bd0"}, {"problem": 56, "code": "(fn [coll]\n  (reduce\n   (fn[acc e]\n           (if (.contains acc e)\n             acc\n             (conj acc e)))\n   []\n   coll))", "user": "56a9d4bbe4b07966d5a8a07b"}, {"problem": 56, "code": "(fn my-distinct\n  [xs]\n  (reduce (fn [distinct-items element]\n            (if-not (some #(= element %) distinct-items)\n              (conj distinct-items element)\n              distinct-items))\n          []\n          xs))", "user": "5ddb6151e4b0948ae9d9adb0"}, {"problem": 56, "code": "(fn dedup [s]\n  (if (empty? s)\n    []\n    (cons (first s) (dedup (filter #(not= % (first s)) s)))))", "user": "5dd60c58e4b0948ae9d9ad7c"}, {"problem": 56, "code": "(fn [coll]\n\t(loop [seen #{} dist [] [elem & coll] coll]\n      (if (nil? elem)\n        dist\n        (if (contains? seen elem)\n          (recur seen dist coll)\n          (recur (conj seen elem) (conj dist elem) coll)\n         )\n        )\n     )  \n)", "user": "5de6484ce4b0986d99407f66"}, {"problem": 56, "code": "(fn f [col]\n  (into [] (java.util.LinkedHashSet. col)))", "user": "5defd277e4b093ff717275b0"}, {"problem": 56, "code": "(fn [xs]\n  (reduce (fn [acc x]\n    (if (some (conj #{} x) acc)\n      acc\n      (conj acc x)))\n  [] xs))", "user": "5de68f83e4b0986d99407f6c"}, {"problem": 56, "code": "(fn [c] (reduce (fn [x y] (if (some #(= y %) x) x (conj x y))) [] c))", "user": "529dfc6de4b04e0c58e87b8a"}, {"problem": 56, "code": "(fn [xs]\n  (loop [res [] hmap #{} xs xs]\n    (if (empty? xs)\n      res\n      (recur\n       (if (contains? hmap (first xs))\n         res\n         (conj res (first xs)))\n       (conj hmap (first xs))\n       (rest xs)))))", "user": "5df5f2a4e4b03c219ef1a399"}, {"problem": 56, "code": "#(second \n  (reduce\n   (fn [v x]\n     (if (get (first v) x)\n       v\n       (vector (conj (first v) x) (conj (second v) x))))\n   [#{} []]\n   %))", "user": "5ddb8a6ee4b0948ae9d9adb2"}, {"problem": 56, "code": "(fn [xs]\n  (loop [xs (reverse xs) result []]\n    (cond (empty? xs)\n          (reverse result)\n          (not \n             (contains?\n              (set (rest xs))\n              (first xs)))\n          (recur (rest xs)\n                   (conj result\n                         (first xs)))\n          :else\n          (recur (rest xs) result))))", "user": "54961073e4b0b312c081ff62"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5dfb20b8e4b0a607a9a45cd3"}, {"problem": 56, "code": "(fn [coll]\n                 (let [step (fn step [xs seen]\n                              (lazy-seq\n                                ((fn [[f :as xs] seen]\n                                   (when-let [s (seq xs)]\n                                     (if (contains? seen f)\n                                       (recur (rest s) seen)\n                                       (cons f (step (rest s) (conj seen f))))))\n                                 xs seen)))]\n                   (step coll #{})))", "user": "5d9c9446e4b0eb781811cdae"}, {"problem": 56, "code": "(fn [in]\n   (reduce #(if (= -1 (.indexOf %1 %2))\n                   (conj %1 %2)\n                   %1) [] in))", "user": "5d9e8e40e4b000c986472bc2"}, {"problem": 56, "code": "(fn remove-duplicates\n  [coll]\n  (reduce (fn [acc curr]\n            (if (contains? (set acc) curr) acc (conj acc curr))) [] coll))", "user": "5df0f338e4b093ff717275c6"}, {"problem": 56, "code": "reduce (fn [acc x2]  \n            (if ((set acc) x2) \n              acc\n              (conj acc x2)\n            ))\n          []", "user": "5bfc9037e4b0bdcf453d15f2"}, {"problem": 56, "code": "(fn [coll] (reduce #(if ((set %1) %2) %1 (conj %1 %2)) [] coll))", "user": "5dfa1c67e4b0a607a9a45cc5"}, {"problem": 56, "code": "(fn find-distinct [sequ] (:result (reduce \n                                      (fn [xs x] \n                                        (let [result (:result xs)\n                                              seen (:seen xs)]\n\t                                        (if (contains? seen x) \n\t                                          xs \n\t                                          {:result (conj result x) :seen (into seen #{x})})))\n                                      {:result [] :seen #{} } sequ)))", "user": "5df0c6ffe4b093ff717275c2"}, {"problem": 56, "code": "(fn [coll]\n  (loop [coll coll uniq [] seen #{}]\n    (if (empty? coll)\n      uniq\n      (recur (rest coll) (if (contains? seen (first coll)) uniq (conj uniq (first coll))) (conj seen (first coll)))\n   )\n  )\n)", "user": "5e09fd26e4b099d064962f60"}, {"problem": 56, "code": "(fn [col]\n  (loop [input col output []]\n    (if (empty? input)\n      output\n      (recur (rest input) \n             (if (contains? (into #{} output) (first input))\n               output\n               (conj output (first input))\n               )\n             )\n      )\n    )\n  )", "user": "5e078ba7e4b0978307768fb6"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5e00b6e7e4b0a607a9a45d2b"}, {"problem": 56, "code": "#(loop [x [] s #{} [k & ks] %] (if (nil? k) x (if (s k) (recur x s ks) (recur (conj x k) (conj s k) ks))))", "user": "510528a0e4b0730a5f55ad85"}, {"problem": 56, "code": "#(reduce (fn [m k] (if ((set m) k) m (conj m k))) [] %)", "user": "5e0d948fe4b099d064962f98"}, {"problem": 56, "code": "(fn [s]\n  (loop [d []\n         r s]\n    (if r\n      (recur (if (some #{(first r)} d) d (conj d (first r))) (not-empty (rest r)))\n      d)))", "user": "57023e92e4b08d47c97781da"}, {"problem": 56, "code": "(fn [col]  (reduce (fn [vals x]  (if ((set vals) x) vals  (conj vals x) )) [] col))", "user": "5d89427ae4b0915913b1d3b5"}, {"problem": 56, "code": "(fn distinct-items [items]\n  (reduce (fn [x y] (if (nil? (some (fn [z] (= y z)) x)) (conj x y)\n                        x)) [] items))", "user": "5e03a15be4b0a607a9a45d5e"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5e17bb46e4b00200644e3d5a"}, {"problem": 56, "code": "(fn [coll] (reduce #(if (some #{%2} %) % (concat % (list %2))) '() coll))", "user": "5e0cbc14e4b099d064962f8e"}, {"problem": 56, "code": "#(reverse \n   (reduce \n    (fn [acc el]\n      (if (some #{el} acc)\n        acc\n       (cons el acc)\n        )\n      )\n[] %1))", "user": "5df75fd8e4b0a607a9a45c92"}, {"problem": 56, "code": "#(loop [[f & r] %\n         h #{}\n         res []]\n   (cond\n    \t(not f)\n    \tres\n    \t(h f)\n    \t(recur r h res)\n    \t:else\n    \t(recur r (conj h f) (conj res f))))", "user": "5cc80598e4b0ccb061962840"}, {"problem": 56, "code": "(fn [seq] (loop [suffix seq item-set #{} item-list []] (if (empty? suffix) item-list (if (contains? item-set (first suffix)) (recur (rest suffix) item-set item-list) (recur (rest suffix) (conj item-set (first suffix)) (conj item-list (first suffix)))))))", "user": "5e1cc888e4b0dc959400853d"}, {"problem": 56, "code": "(fn dedup\n  [coll]\n  (loop [head (first coll)\n         remaining (rest coll)\n         res []\n         vals #{}]\n    (if (and (nil? head) (empty? remaining))\n      res\n      (recur (first remaining)\n             (rest remaining)\n             (if (contains? vals head)\n               res\n               (conj res head))\n             (conj vals head)))))", "user": "5e207f12e4b05b4b01516112"}, {"problem": 56, "code": "(fn [coll]\n\n   (reduce (fn [acc x]\n             (if (some #{x} acc)\n               acc\n               (conj acc x)))\n\t\t\t[]\n           coll))", "user": "5d07989ee4b0cc9c915881fb"}, {"problem": 56, "code": "(fn mydistinct [s]\n  (let [seen? (fn [data x]\n                (let [[res items] data]\n                  (if (items x)\n                    [res items]\n                    [(conj res x) (conj items x)])))]\n    (first (reduce seen? [[] #{}] s))))", "user": "5d929ceae4b0915913b1d412"}, {"problem": 56, "code": "(fn [col]\n           (reduce (fn [result x]\n                     (if ((set result) x)\n                       result\n                       (conj result x)))\n                   [] col))", "user": "5e1c3e6ee4b0dc9594008530"}, {"problem": 56, "code": "(fn DuplicateRemover\n  ([inputSequence]\n  (DuplicateRemover inputSequence []))\n  ([inputSequence outputSequence]\n   (if (empty? inputSequence)\n     outputSequence\n     (let [currentFirst (first inputSequence) currentLast (rest inputSequence)]\n       (if (some #{currentFirst} outputSequence)\n         (DuplicateRemover currentLast outputSequence)\n         (DuplicateRemover currentLast (conj outputSequence currentFirst))\n       )\n     )\n   )\n  )\n)", "user": "5e16b820e4b0a047bd49f71f"}, {"problem": 56, "code": "(fn\n  [x]\n  (reduce\n    (fn [l item]\n      (println \"l \" l \"| item \" item)\n      (if (some #{item} l)\n        l\n        (conj l item)))\n    []\n    x))", "user": "5e300655e4b05b4b01516209"}, {"problem": 56, "code": "(fn [s]\n    (reduce\n     (fn [accum item]\n       (if (some #(= item %) accum)\n         accum\n         (conj accum item)))\n     []\n     s))", "user": "5e38a9cbe4b01d43a70e8dc2"}, {"problem": 56, "code": "(fn [xs]\n  (first\n   (reduce (fn [[uniques seen] x]\n             (if-not (contains? seen x)\n               [(conj uniques x) (conj seen x)]\n               [uniques seen]))\n           [[] #{}]\n           xs)))", "user": "5d47fa13e4b07c84aa5ae6b6"}, {"problem": 56, "code": "(fn [x]\n   (loop [res [] s #{} i 0 size (count x)]\n     (if (= size i)\n       res\n       (recur (if (not (contains? s (nth x i)))\n                 (conj res (nth x i))\n                 res) (conj s (nth x i)) (inc i) size))))", "user": "5dc53ddee4b02f9375f4e1bd"}, {"problem": 56, "code": "(fn [xs]\n   (into (empty xs)\n         (if-not (or (vector? xs)\n                     (set? xs)\n                     (map? xs))\n           (reverse (reduce (fn [acc v]\n                              (if ((set acc) v)\n                                acc\n\t\t\t                          (conj acc v)))\n                            []\n                            xs))\n           (reduce (fn [acc v]\n                     (if ((set acc) v)\n                       acc\n\t\t\t                 (conj acc v)))\n                   []\n                   xs))))", "user": "52b52c29e4b0c58976d9ad38"}, {"problem": 56, "code": "#(reduce\n  (fn [a x]\n    (if (contains? (set a) x)\n      a\n      (conj a x))) [] %)", "user": "5e3a25d4e4b01d43a70e8dde"}, {"problem": 56, "code": "(fn [s]\n  (loop [s s\n         acc []\n         already #{}]\n    (if (empty? s)\n      (reverse acc)\n      (if (contains? already (first s))\n        (recur (rest s) acc already)\n        (recur (rest s) (cons (first s) acc) (conj already (first s)))))))", "user": "52860baae4b0239c8a67ae09"}, {"problem": 56, "code": "(partial reduce (fn [cont a] (if ((set cont) a) cont (conj cont a))) [])", "user": "5e2549c8e4b05b4b0151615f"}, {"problem": 56, "code": "reduce #(if (contains? (set %1) %2) %1 (conj %1 %2)) []", "user": "57fc5e42e4b0d3187e900997"}, {"problem": 56, "code": "(fn [xs] (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] xs))", "user": "5e41b679e4b01d43a70e8e58"}, {"problem": 56, "code": "(fn [coll]\n    (reverse\n      (reduce (fn [res x]\n                (if (some #{x} res) res (cons x res)))\n              (empty coll)\n              coll)))", "user": "50504a1de4b0a02f9cffdeb9"}, {"problem": 56, "code": "reduce #(if (some #{%2} %1) %1 (conj %1 %2)) []", "user": "5ab276f2e4b073f1774425e6"}, {"problem": 56, "code": "(fn [coll]\n   (loop [coll coll\n          result ()]\n     (if (empty? coll) (reverse result)\n         (let [[h & t] coll] (recur (remove #{h} t) (cons h result))))))", "user": "5e3ef7d4e4b01d43a70e8e2d"}, {"problem": 56, "code": "(fn [coll]\n     (reduce (fn [result item]\n                (if (some #(= item %) result)\n                   result\n                   (conj result item)\n                   )\n               ) [] coll))", "user": "5e348945e4b0650de70e2b1d"}, {"problem": 56, "code": "(fn find-distinct\n  [myseq]\n  (reverse (reduce (fn [result x]\n                 (if (> (.indexOf result x) -1)\n                   result\n                   (conj result x))\n                 ) () myseq)))", "user": "5e495e3fe4b043cd24807a4f"}, {"problem": 56, "code": "#(loop [list %\n         res []\n         seen #{}]\n    (if (empty? list) res\n                      (let [item (first list)\n                            the-rest (rest list)]\n                        (if (contains? seen item)\n                          (recur the-rest res seen)\n                          (recur the-rest (conj res item) (conj seen item))\n                          )\n                        ))\n    )", "user": "5e491182e4b043cd24807a46"}, {"problem": 56, "code": "reduce #(if (empty? (filter (fn [a] (= a %2)) %1)) (concat %1 [%2]) %1) []", "user": "5e246f92e4b05b4b01516150"}, {"problem": 56, "code": "(fn [lst] (sort-by #(.indexOf lst %) (keys (group-by identity lst))))", "user": "5d828b7ee4b0915913b1d382"}, {"problem": 56, "code": "(fn [list]\n      (reverse\n        (reduce \n          #(do\n            (if (not(.contains %1 %2))\n            (cons %2 %1)\n            %1))\n          (if (seq? list) '() [])\n          list )))", "user": "5b337ff4e4b025bcb146f339"}, {"problem": 56, "code": "(fn [xs]\n    (let [f #(if ((set %1) %2) %1\n               (conj %1 %2))]\n      (reduce f [] xs)))", "user": "509e8da7e4b08df8156e9e2f"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5e392de0e4b01d43a70e8dcb"}, {"problem": 56, "code": "(fn [seq] (let [redFunc (fn [agg, item] (if (some #(= item %) agg)\n                                              agg\n                                              (conj agg item)))] (\n                                                                   reduce redFunc [] seq\n                                                                          )))", "user": "5e566668e4b027a2e10ac0f9"}, {"problem": 56, "code": "(fn [s]\n  (loop [s s n #{} res []]\n    (if (seq s)\n      (recur (rest s) (conj n (first s)) (if (n (first s)) res (conj res (first s))))\n      res)))", "user": "5e5b8d92e4b0fd0acd158658"}, {"problem": 56, "code": "(fn rm \n  [col] \n  (:res (reduce (fn [acc elem] \n                  (if-not ((:set acc) elem)\n                    (-> acc \n                        (update-in [:set] conj elem)\n                        (update-in [:res] conj elem))\n                    acc))      \n                {:set #{} :res []} col))\n  )", "user": "5e44c804e4b01d43a70e8e89"}, {"problem": 56, "code": "(fn [col] (reduce (fn [col2 item] \n                    (if (some #(= item %) col2)\n                      col2\n                      (conj col2 item))) [] col))", "user": "5e4ba8e8e4b0889a8790a55a"}, {"problem": 56, "code": "(fn [coll]\n  (reduce \n   (fn [c x] (if \n       (not-any? #(= % x) c) \n       (concat c [x]) c))\n     (empty coll) coll))", "user": "5e08c3dde4b0978307768fc8"}, {"problem": 56, "code": "(fn [s]\n  (let [result (reduce (fn [acc x]\n                         (let [uniques (acc :set-items)\n                               items (acc :items)]\n                           (if-not (contains? uniques x)\n                             {:items (conj items x)\n                              :set-items (conj uniques x)}\n                             acc)))\n                       {:set-items #{}\n                        :items []}\n                       s)]\n    (result :items)))", "user": "5dcc152ae4b02b31cc3da3c3"}, {"problem": 56, "code": "(fn\n  [coll]\n  (let [fun (fn [c item]\n              (if (some #{item} c)\n                c\n                (conj c item)))]\n    (reduce fun [] coll)))", "user": "5c9a638fe4b048ec896c5aae"}, {"problem": 56, "code": "reduce (fn [s e]\n         (if (some #(= % e) s)\n           s\n           (conj s e)))\n[]", "user": "5e257a33e4b05b4b01516166"}, {"problem": 56, "code": "(fn [c]\n      \n      \n           (reduce #(if (some #{%2} %)\n      \n      \n                      %\n      \n      \n                      (conj % %2))\n      \n      \n                   [] c))", "user": "5e692be9e4b04a83ad7cd269"}, {"problem": 56, "code": "(fn [coll]\n    (first (reduce (fn [[output seen :as acc] value]\n                     (if (contains? seen value)\n                       acc\n                       [(conj output value) (conj seen value)]))\n                   [[] #{}]\n                   coll)))", "user": "5df70ee8e4b0a607a9a45c8a"}, {"problem": 56, "code": "(fn d\n  ([sq] (d sq #{} '()))\n  ([sq seen unique]\n  \t(if (empty? sq)\n      unique\n      (if (contains? seen (first sq))\n        (d (rest sq) seen unique)\n        (d (rest sq) (conj seen (first sq)) (concat unique (list (first sq))))))))", "user": "5e6ff368e4b04a83ad7cd2a8"}, {"problem": 56, "code": "reduce (fn [col item] (if (some #{item} col) col (conj col item))) []", "user": "5e48ec09e4b043cd24807a45"}, {"problem": 56, "code": "(fn unique [xs]\n  (reduce\n   #(if (apply distinct? %2 %1)\n      (conj %1 %2)\n      %1) [] xs))", "user": "5be1c6c6e4b0ed4b8aab4ca5"}, {"problem": 56, "code": "(fn [coll]\n   (loop [coll coll\n          coll-acc (empty coll)]\n     (cond (empty? coll) (if (list? coll-acc) (reverse coll-acc) coll-acc)\n           (= (.indexOf coll-acc (first coll)) -1)\n           (recur (rest coll) (conj coll-acc (first coll)))\n           :else\n           (recur (rest coll) coll-acc))))", "user": "5e724492e4b085ba37836dc7"}, {"problem": 56, "code": "(fn [xs]\n  (reduce\n    (fn [acc x]\n      (if (some #(= x %) acc)\n        acc\n        (conj acc x)))\n    []\n    xs))", "user": "5d28d935e4b092dab7f59c88"}, {"problem": 56, "code": "(fn [xs]\n  (first (reduce (fn [[acc seen] a]\n               (if (contains? seen a) [acc seen] [(conj acc a) (conj seen a)]))\n                 [(vector) (hash-set)] xs)))", "user": "5e7f075ee4b085ba37836e36"}, {"problem": 56, "code": "(fn cdistinct [coll]\n    (loop [x coll\n           y #{}\n           result []]\n      (if (empty? x)\n        result\n        (let [fst (first x)]\n          (recur (rest x)\n                 (conj y fst)\n                 (if (contains? y fst)\n                   result\n                   (conj result fst)))))))", "user": "5e7b1ef4e4b085ba37836e10"}, {"problem": 56, "code": "(fn func [coll]\n  (reduce (fn [res el] (if (contains? (set res) el) res (conj res el))) [] coll))", "user": "5e805895e4b085ba37836e44"}, {"problem": 56, "code": "#(loop\n   [v %1, res [], s #{}]\n   (if (empty? v) \n     res\n     (if (contains? s (first v))\n       (recur (rest v) res s)\n       (recur (rest v) (conj res (first v)) (conj s (first v))) \n     )\n   )\n )", "user": "5e79fcb9e4b085ba37836e08"}, {"problem": 56, "code": "#(loop [i % seen #{} o []]\n  (if (first i)\n   (if (seen (first i))\n    (recur (rest i) seen o)\n    (recur (rest i)\n           (conj seen (first i))\n           (conj o (first i))\n       )\n     ) o\n     )\n   )", "user": "5e85163be4b09a7a73c8bbd0"}, {"problem": 56, "code": "#(sort-by (fn [i] (.indexOf % i)) (map first (group-by identity %)))", "user": "5c73a944e4b0fca0c16227b8"}, {"problem": 56, "code": "(fn [x] (\n  reduce (fn [a b] \n    (if-not (some #(= b %) a)\n        (conj a b) a)) [] x\n))", "user": "5c9da580e4b048ec896c5b12"}, {"problem": 56, "code": "#(first (reduce (fn [[v s :as e] x]\n                  (if (contains? s x)\n                    e\n                    [(conj v x) (conj s x)]))\n                [[] #{}]\n                %))\n;; shorter but inefficient\n;; #(reduce (fn [v x] (if (contains? (set v) x) v (conj v x))) [] %)", "user": "4eb70649535d7eef30807373"}, {"problem": 56, "code": "(fn\n  [coll]\n  (reduce (fn [xs x] (if ((set xs) x) xs (conj xs x)))\n          []\n          coll))", "user": "5e952e17e4b0fbed045a3807"}, {"problem": 56, "code": "(fn my-distinct [xs]\n  (reduce\n   (fn [m e]\n     (if (= (.indexOf m e) -1)\n       (conj m e)\n       m)) [] xs))", "user": "5b4b8cd6e4b02d533a91bc9f"}, {"problem": 56, "code": "(fn [s] (sort-by #(.indexOf s %) (map first (group-by identity s))))\n;; https://stackoverflow.com/questions/15498780\n;; implementation dependent erf...", "user": "5e13a6b7e4b099d064963001"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5839f079e4b089d5ab817d48"}, {"problem": 56, "code": "(fn [xs]\n   (loop [[first & rest :as all] xs\n          acc []\n          s #{}]\n     (if (empty? all)\n       acc\n       (if (contains? s first)\n         (recur rest acc s)\n         (recur rest (conj acc first) (conj s first))))))", "user": "5e99cbd4e4b0157ca96647e6"}, {"problem": 56, "code": "reduce (fn [acc item]\n            (if-not (contains? (set acc) item)\n              (conj acc item)\n              acc)) []", "user": "5e5f2c17e4b0fd0acd158678"}, {"problem": 56, "code": "reduce (fn [v e] (if (some #(= % e) v) v (conj v e))) []", "user": "5e954b9ee4b0fbed045a3809"}, {"problem": 56, "code": "#(loop [sq % dedup [] dedupSet #{}]\n   (if (empty? sq)\n     dedup\n     (let [el (first sq)]\n       (if (contains? dedupSet el)\n       (recur (rest sq) dedup dedupSet)\n       (recur (rest sq) (conj dedup el) (conj dedupSet el))\n    )\n   )\n )\n)", "user": "5e947a69e4b0fbed045a37f8"}, {"problem": 56, "code": "#(:res (reduce\n         (fn [m n]\n           (if (contains? m n)\n             m\n             (update-in (conj m {n 1}) [:res] conj n)))\n         {:res []} %1))", "user": "5e5096c6e4b027a2e10ac0c6"}, {"problem": 56, "code": "(fn [xs]\n  (reduce \n   #(if (some #{%2} %1)\n      %1\n      (conj %1 %2))\n   []\n   xs))", "user": "5dc88a38e4b02f9375f4e1db"}, {"problem": 56, "code": "(fn order\n  [x]\n  (loop [k #{} v [] r x]\n    (if (empty? r) v\n      (recur (conj  k (first r)) (if (contains? k (first r)) v (conj v (first r))) (rest r)))\n             )\n  )", "user": "5e9d99f9e4b0157ca9664806"}, {"problem": 56, "code": "(fn [xs]\n  (reduce (fn [acc x] (if (some #(= x %) acc) acc (conj acc x))) [] xs))", "user": "53528cd3e4b084c2834f4af2"}, {"problem": 56, "code": "(fn [coll]\n   (reduce #(if (some (fn [x] (= x %2)) %1) %1 (conj %1 %2)) [] coll))", "user": "5ea444b7e4b00a66d4a951a0"}, {"problem": 56, "code": "(fn find-distinct-items [coll]\n  (reduce (fn [accumulator element]\n            (if (some #(= element %) accumulator) \n              accumulator\n              (conj accumulator element)))\n          [] coll))", "user": "5e92adb6e4b0fbed045a37ea"}, {"problem": 56, "code": "reduce #(if((set %) %2) % (conj % %2)) []", "user": "5ea7b04de4b00a66d4a951b6"}, {"problem": 56, "code": "(fn [coll]\n  (loop [[h & t :as coll] coll, res []]\n    (cond\n      (empty? coll) res\n      (some #{h} res) (recur t res)\n      :else (recur t (conj res h)))))", "user": "5e9f38cce4b00a66d4a9517e"}, {"problem": 56, "code": "(fn [xs] (reduce (fn [acc cur] (if ((set acc) cur) acc (conj acc cur))) [] xs))", "user": "5b2be9b1e4b025bcb146f2b0"}, {"problem": 56, "code": "#(loop [l % f (first %) a []]\n    (if (seq l)\n      (recur (remove (partial = f) l) \n             (first (remove (partial = f) l))\n             (conj a f))\n      a))", "user": "5e6ca949e4b04a83ad7cd289"}, {"problem": 56, "code": "(fn remove-dups\n  [v]\n  (second (reduce\n           (fn [[m coll] x]\n             (if (m x)\n               [m coll]\n               [(assoc m x true) (conj coll x)]))\n           [{} []]\n           v)))", "user": "543c39e0e4b032a45b86933d"}, {"problem": 56, "code": "(fn [col]\n   (loop [[x & xs] col\n          seen #{}\n          acc []]\n     (cond (nil? x) acc\n           (seen x) (recur xs seen acc)\n           :else (recur xs (conj seen x) (conj acc x)))))", "user": "5eb1c786e4b00a66d4a95201"}, {"problem": 56, "code": "#(reduce (fn [acc e] (if (some #{e} acc) acc (conj acc e))) [] %)", "user": "5649b1b0e4b0284900eef646"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5e980e6be4b0157ca96647d6"}, {"problem": 56, "code": "#(->> %\n (reduce\n  (fn [[o s] n]\n    (if (s n)\n      [o s]\n      [(conj o n)\n       (conj s n)]))\n  [[] #{}])\n  (first))", "user": "5e64ae6ce4b0fd0acd1586ac"}, {"problem": 56, "code": "(fn solution [input]\n  (reduce #(if (not (some #{%2} %1))\n            (conj %1 %2)\n            %1) [] input))", "user": "5e2ef900e4b05b4b015161fc"}, {"problem": 56, "code": "(fn distinct*\n  ([xs] (distinct* xs []))\n  ([xs results]\n   (if (seq xs)\n     (if (some #(= (first xs) %)  results)\n       (distinct* (rest xs) results)\n       (distinct* (rest xs) (conj results (first xs))))\n     results)))", "user": "5ec3a13ae4b08d0ec38692b9"}, {"problem": 56, "code": "(fn [coll] (sort-by #(.indexOf coll %) (map #(first %) (group-by identity coll))))", "user": "568f2059e4b0dcc4269f40df"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5ebc7c13e4b00a66d4a95267"}, {"problem": 56, "code": "(fn [col]\n\n  (reduce (fn [xs x] (if (some #(= % x) xs) xs (conj xs x))) [] col)\n  \n)", "user": "5e9e8648e4b00a66d4a95178"}, {"problem": 56, "code": "(fn [xs]\n  (reduce\n   (fn [acc x]\n     (println acc x)\n     (if (.contains acc x) acc (conj acc x))\n     )\n   []\n   xs\n  ))", "user": "5ec1b293e4b00a66d4a95296"}, {"problem": 56, "code": "#(reduce (fn [r x] (if (some #{x} r) r (conj r x))) [] %)", "user": "5de12192e4b0948ae9d9aded"}, {"problem": 56, "code": "(fn\n  [coll]\n  (letfn [(step [[f & r :as xs] seen]\n            (when-let [s (seq xs)]\n              (if (contains? seen f)\n                (recur (rest s) seen)\n                (cons f (step (rest s) (conj seen f))))))]\n    (step coll #{})))", "user": "5cf1d9e3e4b0aaa82f112a18"}, {"problem": 56, "code": "(fn [s]\n    (let [f (fn f ([s]\n                   (f s #{}))\n              ([s tracked]\n               (let [head (first s)\n                     tail (rest s)\n                     new? (not (contains? tracked head))\n                     end? (not (seq tail))]\n                 (if end?\n                   (if new?\n                     (list head)\n                     (list))\n                   (if new?\n                     (lazy-seq (cons head (f tail (conj tracked head))))\n                     (lazy-seq (f tail tracked)))))))]\n      (f s)))", "user": "57f904c5e4b0d3187e900936"}, {"problem": 56, "code": ";; #(keys (group-by identity %))\n\n(fn [coll] \n  (loop [rst coll found #{} uniq []]\n    (cond (empty? rst) uniq\n          (not (found (first rst))) (recur (rest rst)\n                                           (conj found (first rst))\n                                           (conj uniq (first rst)))\n          :else (recur (rest rst) found uniq))))", "user": "5ed9b912e4b0c7845d86b0e3"}, {"problem": 56, "code": "(fn distinct-home-made [coll]\n  (reduce\n   #(if (some (partial = %2) %1)\n      %1\n      (conj %1 %2))\n   []\n   coll))", "user": "5ed52854e4b016b56eae05d2"}, {"problem": 56, "code": "(fn [v]\n  (loop [result [] [x & xs :as all] v]\n    (if (empty? all)\n      result\n      (if (contains? (set result) x)\n        (recur result xs)\n        (recur (conj result x) xs)))))", "user": "5ebdb3d2e4b00a66d4a95275"}, {"problem": 56, "code": "reduce #(if-not (some #{%2} %1) (conj %1 %2) %1) []", "user": "5ecfd429e4b016b56eae05a9"}, {"problem": 56, "code": "(fn [coll]\n  (loop [xs coll r []]\n    (if (empty? xs)\n      r\n      (recur (rest xs) (if ((set r) (first xs)) r (conj r (first xs)))))))", "user": "5e12327ee4b099d064962fe5"}, {"problem": 56, "code": "(fn [coll] (reduce (fn [acc val]\n          (prn acc val)\n          (if (some #(= val %) acc)\n            acc\n            (conj acc val)\n            )\n          )\n        []\n        coll\n        ))", "user": "5ed8a12fe4b0c7845d86b0d7"}, {"problem": 56, "code": "#(reduce (fn [coll a] (if (some (fn [x] (= x a)) coll) coll (conj coll a))) [] %)", "user": "5eccc5c2e4b016b56eae058f"}, {"problem": 56, "code": "reduce (fn [acc e] (if (some #{e} acc) acc (conj acc e))) []", "user": "5edd6eb7e4b0c7845d86b0f7"}, {"problem": 56, "code": "(fn [li]\n  (first (reduce (fn \n                   [[agg enc] el] \n                   (if (enc el)\n                    [agg enc]\n                    [(conj agg el) (conj enc el)]\n                   ))                   \n         [[] #{}] li)))", "user": "5ec819b4e4b08d0ec38692e2"}, {"problem": 56, "code": "(fn [sq] (reduce (fn [result v] (if (some #{v} result) result (conj result v))) [] sq))", "user": "5ecc0831e4b016b56eae058c"}, {"problem": 56, "code": "#(loop [mid-res []\n        seen #{}\n        to-scan %]\n   (cond (empty? to-scan) mid-res\n         (seen (first to-scan)) (recur mid-res seen (rest to-scan))\n         :else (recur (conj mid-res (first to-scan)) (conj seen (first to-scan)) (rest to-scan))))", "user": "5ec6de19e4b08d0ec38692da"}, {"problem": 56, "code": "(fn [coll] (reduce #(if (some #{%2} %) % (conj % %2)) [] coll))", "user": "5ebd7296e4b00a66d4a95273"}, {"problem": 56, "code": "(fn [s]\n  (loop [in s seen-map {} out []]\n    (if (empty? in)\n      out\n      (let [key (first in)\n            counter (seen-map key)\n            ok-to-add (nil? counter)\n            out-lst (if ok-to-add (conj out key) out)\n            ]\n        (recur (rest in) (assoc seen-map key key) out-lst)))))", "user": "53c73e8ae4b00fb29b2212a5"}, {"problem": 56, "code": "(fn __\n  [coll]\n  (reduce (fn [v x]\n            (if (.contains v x)\n              v\n              (conj v x)))\n          []\n          coll))", "user": "5b73e500e4b047b03b2036ba"}, {"problem": 56, "code": "reduce (fn [acc x] (if (some #(= % x) acc)\n                     acc\n                     (conj acc x))) []", "user": "5ee93720e4b029a2061bbeb7"}, {"problem": 56, "code": "(fn [sq]\n  (second (reduce (fn [[dic li] v]\n                   (if (contains? dic v)\n                     [dic li]\n                     [(conj dic v) (conj li v)]\n                     )\n                 )\n               [#{} []] sq)))", "user": "5ebb4751e4b00a66d4a95262"}, {"problem": 56, "code": "(fn [x]\n  (sort-by #(.indexOf x %)\n           (#(map first %) (partition-by identity (sort-by identity x)))))", "user": "5eb6561fe4b00a66d4a95233"}, {"problem": 56, "code": "#(reduce (fn [s i]\n           (if-not ((set s) i)\n             (conj s i) s)) [] %)", "user": "5c665311e4b0fca0c16226a7"}, {"problem": 56, "code": "reduce #(if (some #{%2} %1) %1 (conj %1 %2)) []", "user": "597dcb0ce4b0dbe32238d0a2"}, {"problem": 56, "code": "(fn [coll]\n    (reduce\n      (fn [cur nxt]\n        (if (some #(= nxt %) cur)\n          cur\n          (conj cur nxt)))\n      []\n      coll))", "user": "5eb4927fe4b00a66d4a95221"}, {"problem": 56, "code": "(fn [x]\n  (reduce \n   (fn [coll v]\n     (if (some #(= v %) coll)\n       coll\n       (conj coll v))\n     ) \n   [] x))", "user": "5df08767e4b093ff717275bf"}, {"problem": 56, "code": "(fn [col]\n  (->> col\n       (reduce\n        (fn [result item]\n          (if (get result item)          ; item is already in result -> no action needed\n            result\n            (assoc result\n                   item\n                   (count result))       ; otherwise, put it into result map with a numeric key (for sorting)\n            )\n          )\n        {}\n        )\n       (seq)\n       (sort-by second)\n       (map first)\n       ))", "user": "5ee75f8be4b029a2061bbea5"}, {"problem": 56, "code": "#(let \n  [normailzed (map str %1)\n   uniques (set normailzed)\n   vect (apply vector %1)\n   positions (sort (map (fn [e] (.indexOf normailzed e)) uniques))]\n  (reduce (fn [l v] (conj l (get vect v))) [] positions))", "user": "5ef5ee81e4b07c55ae4a054a"}, {"problem": 56, "code": "(fn [xs] \n  (reduce #(if (some (partial = %2) %1) %1 (conj %1 %2)) [] xs))", "user": "5eee7311e4b07c55ae4a0510"}, {"problem": 56, "code": "(fn [s]\n    (let [distinct-list (loop [rem s\n                 acc '()\n                 found #{}]\n            (if (empty? rem)\n              acc\n              (if (contains? found (first rem))\n                (recur (rest rem) acc found)\n                (recur (rest rem) (concat acc [(first rem)])\n                       (conj found (first rem))))))]\n      (if (vector? s)\n        (into (empty s) distinct-list)\n        distinct-list)))", "user": "5edfb1e5e4b0c7845d86b107"}, {"problem": 56, "code": "(fn [coll]\n    (loop [remaining coll\n           seen #{}\n           result []]\n      (cond\n        (empty? remaining)\n        result\n\n        (seen (first remaining))\n        (recur (rest remaining) seen result)\n\n        :else\n        (recur\n         (rest remaining)\n         (conj seen (first remaining))\n         (conj result (first remaining)))\n        )\n      )\n    )", "user": "5f06caa7e4b0cf489e8d7f52"}, {"problem": 56, "code": "(fn [coll]\n     (letfn [(dist [head tail seen]\n               (let [seen? (contains? seen head)]\n                 (lazy-seq\n                  (if (seq tail)\n                    (if seen?\n                      (dist (first tail)\n                            (rest tail)\n                            seen)\n                      (cons head (dist (first tail)\n                                       (rest tail)\n                                       (conj seen head))))\n                    (if seen?\n                      []\n                      [head])))))]\n       (dist (first coll) (rest coll) #{})))", "user": "5ef8e9e0e4b09b61f08553cb"}, {"problem": 56, "code": "(fn [arg]\n\t(loop [arr arg, elim (set arg), res []]\n\t\t(if (empty? arr) res\n\t\t\t(let [elem (first arr), change (not= nil (elim (first arr)))]\n\t\t\t\t(recur (next arr),\n\t\t\t\t\t(if change (disj elim elem) elim),\n\t\t\t\t\t(if change (conj res elem) res)\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)\n)", "user": "5d73530ce4b02e6b30c93514"}, {"problem": 56, "code": "(fn [col] \n  (reduce \n    (fn [xs item] \n      (if (some #(= item %1) xs) \n        xs \n        (conj xs item))) \n    [] \n    col))", "user": "58ed2e21e4b056aecfd47d7a"}, {"problem": 56, "code": "reduce #(if (some (partial = %2) %) % (conj % %2)) []", "user": "5f03ab5be4b0cf489e8d7f37"}, {"problem": 56, "code": "(fn [l]\n  (reduce #(if (some #{%2} %) % (conj % %2)) [] l))", "user": "4eb97234535dfed6da9c6d53"}, {"problem": 56, "code": "(fn [coll]\n  (loop [repeats #{}\n         acoll coll\n         result []]\n    (if (seq acoll)\n      (let [unique (nil? (repeats (first acoll)))]\n        (recur (if unique (conj repeats (first acoll)) repeats)\n               (rest acoll)\n               (if unique (conj result (first acoll)) result)))\n      result)))", "user": "5d431c77e4b07c84aa5ae68f"}, {"problem": 56, "code": "(fn dist [s]\n  (reduce #(if (seq (filter (partial = %2) %1))\n             %1\n             (conj %1 %2)) [] s))", "user": "5ed6030de4b016b56eae05db"}, {"problem": 56, "code": "(fn func [coll]\n  (reduce\n    (fn [res it]\n      (if (some #{it} res)\n        res\n        (conj res it)))\n    []\n    coll))", "user": "5666c2dbe4b04acd4f672dc3"}, {"problem": 56, "code": "(fn distinct2\n  ([c dc]\n   (if (empty? c)\n     dc\n     (let [f (first c)]\n       (if (some #(= f %) dc)\n         (distinct2 (rest c) dc)\n         (distinct2 (rest c) (conj dc f))))))\n  ([c]\n   (distinct2 c [])))", "user": "5b92f178e4b0c0b3ffbd4a41"}, {"problem": 56, "code": "(fn [col]\n    (->> col\n         (reductions conj #{})\n         (interleave col)\n         (partition 2)\n         (filter (fn [[val check]] ((complement check) val)))\n         (map first)\n         )\n    )", "user": "5f0e8312e4b0f30dddfb5d5b"}, {"problem": 56, "code": "(fn [coll]\n  (let [[result] (reduce (fn [[acc seen] val]\n                           (if (contains? seen val)\n                             [acc seen]\n                             [(conj acc val) (conj seen val)]))\n                         [[] #{}]\n                         coll)]\n    result))", "user": "5f247827e4b0f565ad998292"}, {"problem": 56, "code": "(fn [s]\n  (reduce\n   (fn [items x]\n     (if (some #(= x %) items)\n       items\n       (conj items x)))\n   []\n   s))", "user": "5b7f2d75e4b047b03b203768"}, {"problem": 56, "code": "(fn [xs]\n  (loop [result []\n         unseen (set xs)\n         xs xs]\n    (let [xs (filter  unseen xs) f (first xs)]\n      (if (empty? xs) \n        result\n        (recur (conj result f) (clojure.set/difference unseen #{f}) xs)))))", "user": "5e9154c1e4b0cb0169546354"}, {"problem": 56, "code": "(fn uniq\n  ([l] (uniq (rest l) [(first l)]))\n  ([l a] \n   (if (seq l)\n     (uniq (rest l) (if (.contains a (first l))\n                      a\n                      (conj a (first l))))\n     a)))", "user": "5f2c02d1e4b033932238a65f"}, {"problem": 56, "code": "(fn [xs]\n  (second (reduce\n           (fn [[kv xs] x] (if (contains? kv x)\n                             [kv xs]\n                             [(conj kv x) (conj xs x)]))\n           [#{} []]\n           xs)))", "user": "5f2d6787e4b033932238a66d"}, {"problem": 56, "code": "(fn my-distinct\n  [coll]\n  (reduce (fn [acc itm]\n            (if (some (set [itm]) acc)\n              acc\n              (conj acc itm)))\n          []\n          coll))", "user": "5bc7f2d6e4b07a9b28b100b7"}, {"problem": 56, "code": "(fn count-occurrences [x]\n    (into [] (java.util.LinkedHashSet. x))\n)", "user": "5f0cb4f3e4b0f30dddfb5d4e"}, {"problem": 56, "code": "(fn dedup [coll]\n   (:res\n     (reduce\n       #(if ((:seen? %1) %2)\n          %1\n          {:res (conj (:res %1) %2) :seen? (conj (:seen? %1) %2)})\n       {:res [] :seen? #{}}\n       coll)))", "user": "5f300f28e4b033932238a682"}, {"problem": 56, "code": "(fn test [coll]\n  (reduce (fn\n            [result n]\n            (if (neg? (.indexOf result n))\n              (conj result n)\n              result)) [] coll))", "user": "5ec5f7f2e4b08d0ec38692d1"}, {"problem": 56, "code": "(fn my-distinct\n  [coll]\n  (loop [loop_coll coll acc [] acc_set #{}]\n    (if (empty? loop_coll)\n      acc\n      (let [head (first loop_coll)]\n           (if (contains? acc_set head)\n             (recur (drop 1 loop_coll) acc acc_set)\n             (recur (drop 1 loop_coll) (conj acc head) (conj acc_set head)))))))", "user": "5f29837ee4b033932238a64f"}, {"problem": 56, "code": "reduce #(if ((set %) %2) % (conj % %2)) []", "user": "5f3abcc4e4b004f08c61c52b"}, {"problem": 56, "code": "(fn [coll]\n  (:lst (reduce (fn [resu item]\n                  (let [lst-set (:lst-set resu)\n                        lst (:lst resu)]\n                    (if (lst-set item)\n                      resu\n                      (assoc resu :lst (conj lst item)\n                                  :lst-set (conj lst-set item)))))\n                {:lst     []\n                 :lst-set #{}}\n                coll)))", "user": "535f0cbde4b04ce2eb3ed2d9"}, {"problem": 56, "code": "#(reduce (fn [coll x]\n           (if ((set coll) x)\n             coll\n             (conj coll x)))\n         [] %)", "user": "5f0c8b0de4b0f30dddfb5d4c"}, {"problem": 56, "code": "(comp\n :result\n (partial reduce (fn [{:keys [result seen] :as agg} v] \n                  (if (contains? seen v) \n                    agg \n                    (-> agg \n                        (update-in [:seen] conj v)\n                        (update-in [:result] conj v))\n                    ))\n         {:result [] :seen #{}}))", "user": "5f431d32e4b0955706451fb5"}, {"problem": 56, "code": "(fn [s]\n   (reverse\n    (loop [c s\n           r []\n           set #{}]\n      (if (empty? c)\n        r\n        (recur (rest c) (if (set (first c)) r (concat [(first c)] r)) (conj set (first c)) )))))", "user": "5f3f2281e4b004f08c61c561"}, {"problem": 56, "code": "#(if (apply distinct? %) % (keys (group-by identity %)))", "user": "5f0824c5e4b0cf489e8d7f5b"}, {"problem": 56, "code": "(fn [S]\n  ; ugly imperative-style loop ._.\n  (loop [i 0 r []]\n    (if (= i (count S))\n      r\n      (if (empty? (filter #(= % (nth S i)) (take i S)))\n        ; not seen yet: add\n        (recur (inc i) (conj r (nth S i)))\n        ; already seen: skip\n        (recur (inc i) r)\n      ))))", "user": "5f574662e4b0a0bc16850a90"}, {"problem": 56, "code": "(fn [xs] (:mseq (reduce (fn [{:keys [eset mseq]} nval] (if (eset nval) {:eset eset, :mseq mseq} {:eset (conj eset nval), :mseq (conj mseq nval)})) {:eset #{} :mseq []} xs)))", "user": "5c9dcb36e4b048ec896c5b1d"}, {"problem": 56, "code": "(fn [xs]\n  (first\n   (reduce \n    (fn [[o s] x]\n      (if (contains? s x)\n        [o s]\n        (vector (conj o x) (conj s x))))\n    [[] #{}]\n    xs)))", "user": "5f5e7158e4b02876ed9fcff0"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5f5f9483e4b02876ed9fcff8"}, {"problem": 56, "code": "#(reduce (fn [acc ele] (if (some (fn [acc-ele] (= ele acc-ele)) acc)\n                          acc (conj acc ele)\n                          )) [] % )", "user": "58ffc6cfe4b0438e51c2d008"}, {"problem": 56, "code": "(fn f [col] (into [] (java.util.LinkedHashSet. col)))", "user": "5f631e11e4b02876ed9fd011"}, {"problem": 56, "code": "#(:result (reduce\n                 (fn [{hash :hash res :result} item]\n                   (if (contains? hash item)\n                     {:hash hash :result res}\n                     {:hash   (conj hash item)\n                      :result (conj res item)}))\n                 {:result [] :hash #{}}\n                 %))", "user": "5f5a2cc6e4b0a0bc16850aa4"}, {"problem": 56, "code": "(fn [v]\n  (reduce (fn [c e] (if (some #(= % e) c) c (conj c e))) [] v))", "user": "5f2c94b4e4b033932238a669"}, {"problem": 56, "code": "(fn [s]\n                          (let [acc {:seen #{} :result []}\n                                result (:result (reduce (fn [a e]\n                                               (if (get-in a [:seen e])\n                                                 a\n                                                 (-> a\n                                                     (update-in [:result] conj e)\n                                                     (update-in [:seen] conj e))))\n                                             acc\n                                             s))]\n                            (if (vector? s)\n                              result\n                              (seq result))))", "user": "5beadeb5e4b0f319e2d7ec88"}, {"problem": 56, "code": "(fn [s]\n    (first (reduce \n                (fn [[vs us]  x] (if (contains? us x)\n                    [vs us]\n                    [(conj vs x) (conj us x)]))\n                [[] #{}]\n                s)))", "user": "5eff6c0ee4b0cf489e8d7f11"}, {"problem": 56, "code": "(fn [coll]\n  (:ret (reduce (fn [acc v]\n                  (if ((:visited acc) v)\n                    acc\n                    (-> acc\n                        (update-in [:ret] conj v)\n                        (update-in [:visited] conj v))))\n                {:ret [] :visited #{}}\n                coll)))", "user": "5f6d4305e4b02876ed9fd05c"}, {"problem": 56, "code": "#(let [dst (fn [sq rs st]\n             (let [x (first sq)\n                   r (rest sq)\n                   nrs (if (get st x) rs (conj rs x))]\n               (if (seq r)\n                 (recur r nrs (conj st x))\n                 nrs)))]\n  (dst % [] #{}))", "user": "5f6b61ece4b02876ed9fd051"}, {"problem": 56, "code": "reduce #(if ((set %) %2) % (conj % %2)) []", "user": "588fbb39e4b00487982d51bd"}, {"problem": 56, "code": "#(sort-by (fn[a] (.indexOf % a )) (keys (group-by  identity %)))", "user": "58c71509e4b021aa9917ed6e"}, {"problem": 56, "code": "(fn f [s]\n (loop [result [] memo (set `()) s s]\n   (if (empty? s) \n     result\n     (let [x (first s)]\n       (recur\n        (if (contains? memo x) result (conj result x))\n        (conj memo x)\n        (rest s))))))", "user": "5ea6fe98e4b00a66d4a951b2"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5f5f2eafe4b02876ed9fcff5"}, {"problem": 56, "code": "(fn [c]\n  (loop [c c\n         r []]\n    (if-let [n (first c)]\n      (recur \n       (rest c) \n       (if (some #{n} r)\n         r\n         (conj r n)))\n      r)))", "user": "523578efe4b0a643f2dcb74c"}, {"problem": 56, "code": "(fn [x] (reduce #(if ((set %) %2) % (conj % %2)) [] x))", "user": "5e8ce2fee4b0cb0169546328"}, {"problem": 56, "code": "(fn [s] (reduce\n    #(if (not-any? #{%2} %1) (conj %1 %2) %1)\n    []\n    s\n    )\n  )", "user": "5f58db95e4b0a0bc16850a9a"}, {"problem": 56, "code": "#(second (reduce \n  (fn [[s v] i] \n    (if (not (s i)) \n      [(conj s i) (conj v i)]\n      [s v]\n      )) \n    [#{} []] \n    %))", "user": "5f5b624de4b05ea7b9adc42f"}, {"problem": 56, "code": "(fn [xs] \n      (loop [[x :as xs] xs\n             ret []]\n          (if (empty? xs) ret\n            (recur (rest xs) (if (some #(= x %) ret) ret (conj ret x))))))", "user": "5f82cfcce4b0c071e6c840fb"}, {"problem": 56, "code": "(fn [xs] (reduce #(if ((set %1) %2) %1 (conj %1 %2)) [] xs))", "user": "507e68abe4b085af06e3afd2"}, {"problem": 56, "code": "(fn [a] \n (first \n  (reduce \n   #(if (contains? (second %) %2) %\n    [(conj (first %) %2), (assoc (second %) %2 1)]) \n   [[],{}] \n   a\n)))", "user": "5f686436e4b02876ed9fd03c"}, {"problem": 56, "code": "#(let [items (set %)]\n    (first\n      (reduce (fn [[res items] v] (if (items v) [(conj res v) (disj items v)] [res items])) \n              [[] items]\n              %)))", "user": "596a66cde4b069c0a1a19803"}, {"problem": 56, "code": "(fn [sequence]\n  (loop [cursor sequence\n         items []]\n    (if (= 0 (count cursor))\n      items\n      (recur\n       (rest cursor)\n       (if (some #(= (first cursor) %) items)\n         items\n         (conj items (first cursor)))))))", "user": "5f79bff2e4b02876ed9fd0ca"}, {"problem": 56, "code": "(fn rem-dupli [coll]\n  (loop [l coll acc []]\n    (when-let [r (filter #(not (= (first l) %)) (rest l))]\n      (if (empty? r)\n        (conj acc (first l))\n        (recur r (conj acc (first l)))))))", "user": "5f86a98be4b0649ffcda4caa"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5f727cb0e4b02876ed9fd08e"}, {"problem": 56, "code": "(fn unique\n  [s]\n  (loop [s (seq s)\n         r []]\n    (if s\n      (recur (next s) \n             (if (some #{(first s)} r)\n               r\n               (conj r (first s))))\n      r)))", "user": "4e8a170c535d3e98b802328f"}, {"problem": 56, "code": "(fn fdi [s]\n  (loop [s s\n         r []]\n    (if (empty? s)\n      r\n      (recur (filter #(not= (first s) %) s) (conj r (first s))))))", "user": "5f8b06afe4b0715f5002d74a"}, {"problem": 56, "code": "#(reduce (fn [head x] (if ((set head) x) head (conj head x))) [] %)", "user": "5f5358b7e4b0a0bc16850a77"}, {"problem": 56, "code": "(fn [coll]\n  (reduce (fn [res x]\n            (if (contains? (set res) x)\n              res\n              (conj res x)))\n          []\n          coll))", "user": "5f93529ae4b0715f5002d7bc"}, {"problem": 56, "code": "(fn my-distinct\n  [s]\n  (sort-by #(.indexOf s %) (set s)))", "user": "5f3103aee4b0574c87022c24"}, {"problem": 56, "code": "(fn find-distinct-items [s]\n  (if (empty? s)\n    s\n    (let [head (first s)\n          tail (rest s)\n          filtered-tail (filter #(not (= head %)) tail)]\n      (conj (find-distinct-items filtered-tail) head))))", "user": "5f63684be4b02876ed9fd012"}, {"problem": 56, "code": "(fn mm-dist [c]\n  ((fn keep-going [seen remain]\n     (when (seq remain)\n       (if (contains? seen (first remain))\n         (recur seen (rest remain))\n         (cons (first remain)\n               (keep-going (conj seen (first remain)) (rest remain)))))) #{} c))", "user": "5f838122e4b01aacbe7a2715"}, {"problem": 56, "code": "(fn distinct1 [coll]\n  (reduce (fn [acc v]\n            (if-not (some #{v} acc) (conj acc v)\n                    acc))\n          [] coll))", "user": "5fa74b82e4b0fa27300f3dda"}, {"problem": 56, "code": "(fn [xs]\n  (vec (apply (partial sorted-set-by #(< (.indexOf xs %1) (.indexOf xs %2))) xs)))", "user": "5fa8424ce4b0fa27300f3de5"}, {"problem": 56, "code": "(fn [coll]\n      (reduce\n       (fn [acc new]\n         (if (some #(= new %) acc)\n           acc (conj acc new)))\n       [] coll))", "user": "58db48a5e4b0a4d5acaab679"}, {"problem": 56, "code": "#(reduce (fn [xs x] (if ((set xs) x) xs (conj xs x))) [] %)", "user": "5e8c3e8fe4b0cb0169546322"}, {"problem": 56, "code": "#(loop [r [] s %] (println r s)\n                      (cond\n                        (empty? s) r\n                        (contains? (set r) (first s)) (recur r (rest s))\n                        :else (recur (conj r (first s)) (rest s))))", "user": "5f9c4113e4b0715f5002d821"}, {"problem": 56, "code": "(fn [s] (loop [s s\n                   res []]\n           (if (empty? s)\n             res\n             (recur (rest s)\n                    (if (every? #(not= (first s) %) res)\n                      (conj res (first s))\n                      res)))))", "user": "5eecf110e4b07c55ae4a050b"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5face7fce4b08cb800c85ae9"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5facfb48e4b08cb800c85aea"}, {"problem": 56, "code": "(fn [coll]\n   (:result (reduce\n             (fn [{:keys [result seen] :as acc} v]\n               (if (contains? seen v)\n                 acc\n                 {:result (conj result v) :seen (conj seen v)}))\n             {:result [] :seen #{}}\n             coll)))", "user": "5faef622e4b08cb800c85b05"}, {"problem": 56, "code": "(fn [coll]\n   (reduce (fn [acc el]\n             (println acc)\n             (if (.contains acc el)\n               acc\n               (conj acc el))) [] coll))", "user": "5fb544f6e4b08cb800c85b4e"}, {"problem": 56, "code": "(fn [coll]\n    (reduce #(if (some (partial = %2) %1) %1 (concat %1 [%2]))\n            (empty coll)\n            coll))", "user": "5f331015e4b0574c87022c37"}, {"problem": 56, "code": "(fn [xs] (letfn [(dist [ys acc] \n                  (if (empty? ys) \n                   acc \n                   (dist (rest ys) (if (some #(= (first ys) %) acc) acc (conj acc (first ys))))))]\n                   (dist xs [])\n))", "user": "5fa17538e4b0f0ebd91b77e3"}, {"problem": 56, "code": "(fn [s]\n  (reduce #(if ((set %1) %2) %1 (conj %1 %2)) [] s))", "user": "5fbe40bce4b03f550f448246"}, {"problem": 56, "code": "reduce #(if (some (fn [x] (= x %2)) %1)\n           %1\n           (conj %1 %2))\n  []", "user": "5fae3d8ae4b08cb800c85afa"}, {"problem": 56, "code": "(fn [x] (sort-by #(.indexOf x %) (keys (group-by identity x))))", "user": "5fab7ea6e4b08cb800c85ad8"}, {"problem": 56, "code": "(fn [v]\n  (letfn [(contain?\n           [col e]\n           (cond (empty? col) false\n                 (= (first col) e) true\n                 :else (contain? (rest col) e)))\n          (iter\n           [col result]\n           (cond (empty? col) result\n                 (contain? result (first col)) (iter (rest col) result)\n                 :else (iter (rest col) (concat result (list (first col))))))]\n    (iter v nil)))", "user": "58f98231e4b0438e51c2cf4c"}, {"problem": 56, "code": "(fn [coll]\n (reduce (fn [acc curr]\n           (if (some #{curr} acc)\n             acc\n             (conj acc curr))) [] coll)\n )", "user": "5fac50f4e4b08cb800c85ae5"}, {"problem": 56, "code": "reduce #(if\n          (some (fn [x] (= %2 x)) %)\n           %\n           (conj % %2)) []", "user": "5fa96ddbe4b0fa27300f3dec"}, {"problem": 56, "code": "(fn my-distinct[v]\n  (reduce #(if (some (set %1) [%2])\n               %1\n               (conj %1 %2))\n            []\n            v))", "user": "573a0ecce4b0cd1946bd1088"}, {"problem": 56, "code": "; #(keys (group-by identity %))\n(fn [coll]\n  (loop [lat coll\n         acc []]\n    (if (empty? lat)\n      acc\n      (recur (remove #(= (first lat) %) (rest lat))\n             (conj acc (first lat))))))", "user": "5f90aeefe4b0715f5002d799"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5f96fa49e4b0715f5002d7e9"}, {"problem": 56, "code": "#(reduce (fn [acc v]\n          (if ((set acc) v) acc (conj acc v)))\n        []\n        %)", "user": "4f6d23cde4b07046d9f4efc6"}, {"problem": 56, "code": "(fn [l] \n  (reduce (fn [acc val]\n            (if (some #{val} acc)\n              acc\n              (conj acc val))) [] l))", "user": "5fe5a64de4b05ac5b16ea187"}, {"problem": 56, "code": "#(loop [source %, sink [], seen []]\n   (if (empty? source)\n     sink\n     (let [nxt (first source), rst (rest source)]\n       (println)\n       (if (.contains seen nxt)\n         (recur rst sink seen)\n         (recur rst (conj sink nxt) (conj seen nxt))))))", "user": "5b77248ae4b047b03b2036e7"}, {"problem": 56, "code": "(fn [coll]\n  (reduce (fn [distincts new-element]\n            (if (contains? (set distincts) new-element)\n              distincts\n              (conj distincts new-element)))\n          []\n          coll))", "user": "5fea32f3e4b05ac5b16ea1aa"}, {"problem": 56, "code": "reduce\n   #(if (some #{%2} %) % (conj % %2))\n   []", "user": "5e042dede4b0a607a9a45d69"}, {"problem": 56, "code": "(fn solve [input]\n  ((reduce #(if (contains? (%1 :visited) %2)\n                   %1\n                   (assoc %1 :visited (conj (%1 :visited) %2) :output (conj (%1 :output) %2))\n                   )\n                {:visited #{} :output []}\n                input) :output))", "user": "54c13b87e4b0ed20f4ff6f20"}, {"problem": 56, "code": "reduce #(if (some (partial = %2) %1) %1 (conj %1 %2)) []", "user": "5fe0d4d4e4b05ac5b16ea164"}, {"problem": 56, "code": "reduce #(if (contains? (set %1) %2)\n          %1\n          (conj %1 %2)\n          ) []", "user": "5fd361f2e4b07e53c2f3f04e"}, {"problem": 56, "code": "(fn [s]\n        (let [f (fn f [m [x & xs]]\n                  (cond\n                    (nil? x) '()\n                    (m x) (lazy-seq (f m xs))\n                    :else (lazy-cat [x] (f (conj m x) xs))))]\n          (f #{} s)))", "user": "546c4377e4b00cfc9eacc177"}, {"problem": 56, "code": "#(let [aux (fn [ordered result remainder]\n              (if (empty? remainder) ordered\n                  (if (contains? result (first remainder))\n                    (recur ordered result (drop 1 remainder))\n                    (recur (conj ordered (first remainder))\n                         (conj result (first remainder))\n                         (drop 1 remainder)))))]\n    (aux [] #{} %))", "user": "5fe362d9e4b05ac5b16ea179"}, {"problem": 56, "code": "(fn fnd [sq]\n  (reduce (fn [a b]\n            (if (some #(= b %) a)\n              a\n              (conj a b)\n              )) [] sq))", "user": "5fe09d1fe4b05ac5b16ea15b"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "54d7e277e4b0a52adc2e2031"}, {"problem": 56, "code": "(fn [s]\n\t(reduce (fn [coll x]\n            \t(if (some #(= x %) coll)\n                \tcoll\n                    (conj coll x)))\n            []\n            s))", "user": "5ff93da9e4b06df49cee14af"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5fd10010e4b07e53c2f3f02a"}, {"problem": 56, "code": "(fn di [s]\n  (letfn [(f [seen res ss] (if (empty? ss) res\n                                   (if  (seen (first ss)) (f seen res (rest ss)) \n                                        (f (conj seen (first ss)) (conj res (first ss)) (rest ss)))))]\n  (f #{} [] s))\n  )", "user": "5f419985e4b0955706451fab"}, {"problem": 56, "code": "(fn [s] \n  \n  (reduce \n   \n   \t(fn [res cur]\n      (if (some #(= cur %) res)\n        res\n        (conj res cur)\n        )\n      \n      ) ; reduce fn end\n    \n    [] ; val\n    s  ; col\n   \n   ) ; reduce end\n  \n  ) ; fn end", "user": "5ff676a9e4b06df49cee1497"}, {"problem": 56, "code": "(fn [coll]\n  (reduce (fn [c x] \n  (if (not= (count c) (count (set (conj c x))))\n    (conj c x)\n    c)) [] coll))", "user": "57213df6e4b0c5bde472c0ab"}, {"problem": 56, "code": "reduce\n  (fn [acc, l]\n    (if (some #(= l %) acc)\n      acc\n      (conj acc l))\n    ) []", "user": "5ff5bc1ae4b06df49cee1490"}, {"problem": 56, "code": "#(letfn [(get-ans [[x & r :as rest-c] ans]\n             (cond\n               (empty? rest-c) ans\n               (some #{x} ans) (recur r ans)\n               :else (recur r (conj ans x))))]\n     (get-ans % []))\n\n;; #(letfn [(get-ans [[x & r :as rest-c] ans]\n;;              (if (empty? rest-c)\n;;                ans\n;;                (recur (remove #{x} r)\n;;                       (conj ans x))))]\n;;      (get-ans % []))\n\n;; #(reduce (fn [acc x]\n;;              (if (some #{x} acc)\n;;                acc\n;;                (conj acc x)))\n;;            []\n;;            %)\n\n;; #(sort-by (fn [i] (.indexOf % i))\n;;             (keys (group-by identity %)))", "user": "591ad160e4b09b4ee5954bdf"}, {"problem": 56, "code": "(fn [s]\n   (loop [result [] remaining s]\n    (if (empty? remaining)\n      result\n      (if (.contains result (first remaining))\n        (recur result (rest remaining))\n        (recur (conj result (first remaining)) (rest remaining))))))", "user": "5fd8bcb3e4b05ac5b16ea11b"}, {"problem": 56, "code": "(fn [lst] \n  (:ordered (reduce (fn [{:keys [unique ordered] :as agg} nxt]\n           (if (contains? unique nxt)\n             agg\n             {:ordered (conj ordered nxt) :unique (conj unique nxt)}\n             ))\n          {:ordered [] :unique #{}}\n          lst)))", "user": "6004c750e4b074f607df6645"}, {"problem": 56, "code": "#(loop [[h & t] %\n        result []\n        values #{}]\n   (cond\n    (nil? h) result\n    (values h) (recur t result values)\n    :else (recur t (conj result h) (conj values h))))", "user": "5f37263de4b0574c87022c4e"}, {"problem": 56, "code": "(fn [l]\n    (loop [l l\n           s #{}\n           acc []]\n        (if (empty? l)\n            acc\n            (recur (rest l)\n                   (conj s (first l))\n                   (if (contains? s (first l))\n                       acc\n                       (conj acc (first l)))))))", "user": "600ae927e4b074f607df6689"}, {"problem": 56, "code": "reduce #( if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5fec4f5ee4b05ac5b16ea1bf"}, {"problem": 56, "code": "#(reduce (fn\n           [acc cur]\n           (if (.contains acc cur)\n             acc\n             (conj acc cur))) [] %)", "user": "5da7176ae4b000c986472c13"}, {"problem": 56, "code": "(fn xx [s] (second (reduce (fn [[am al] v] (if (am v) [am al] [(conj am v) (conj al v)])) [#{} []]s)))", "user": "5edd05bfe4b0c7845d86b0f3"}, {"problem": 56, "code": "(fn d [xs]\n  (->> xs\n      (reduce (fn [[seen rs] x]\n                (if (seen x)\n                  [seen rs]\n                  [(conj seen x) (conj rs x)]))\n              [#{} []])\n      second))", "user": "583369e6e4b089d5ab817c9c"}, {"problem": 56, "code": "(partial reduce #(if (some (partial = %2) %) % (conj % %2)) [])", "user": "5e3e23d9e4b01d43a70e8e20"}, {"problem": 56, "code": "#(reduce (fn [v i] (if (get (set v) i) v (conj v i))) []  %)", "user": "600cb742e4b074f607df6696"}, {"problem": 56, "code": "(fn [sequence]\n  (reduce #(if (contains? (set %1) %2)\n             %1\n             (conj %1 %2)) [] sequence)\n  )", "user": "60194b7ae4b0bf4ca6b1091f"}, {"problem": 56, "code": "(fn distinct' [coll]\n  (loop [[x & xs :as in] coll\n         out []]\n    (cond\n      (empty? in) out\n      (some #{x} out) (recur xs out)\n      :else (recur xs (conj out x)))))", "user": "601aaa93e4b0bf4ca6b10926"}, {"problem": 56, "code": "(fn [s]\n  (reduce\n   (fn [v n] (if (nil? (some #{n} v)) (conj v n) v))\n   []\n   s))\n\n;; (contains? x) goes by position, not value in a vector\n;; instead we use the (some?) function by passing in a single value\n;; set as the predicate to confirm that ... ???", "user": "5fb68f09e4b08cb800c85b58"}, {"problem": 56, "code": "(fn [x] \n  (reduce #(if (some #{%2} %) % (conj % %2)) [] x))", "user": "6011b89ee4b074f607df66bc"}, {"problem": 56, "code": "(fn find-distinct-items [se]\n  (sort-by (fn [elm] (.indexOf se elm)) ;; restore order\n           (into [] (set se)))) ;; remove duplicates", "user": "5fbf6fe7e4b0ad6fc3476147"}, {"problem": 56, "code": "(fn [coll] \n  (reduce (fn [xs n] \n            (if (some #(= % n) xs)\n              xs\n              (conj xs n)))\n          []\n          coll))", "user": "5e68f6dde4b04a83ad7cd268"}, {"problem": 56, "code": "(fn [coll] \n  (reduce (fn [xs n] \n            (if (some #(= % n) xs)\n              xs\n              (conj xs n)))\n          []\n          coll))", "user": "5f4fe1fae4b0a0bc16850a5c"}, {"problem": 56, "code": "#(reduce (fn [coll e]\n           (if (some (fn [x] (= x e)) coll)\n             coll\n             (conj coll e))) [] %)", "user": "52fa250ee4b047fd55836ff3"}, {"problem": 56, "code": "(fn [l]\n  (reduce\n    (fn [acc ele] (if (some #(= ele %) acc) acc (conj acc ele)))\n    []\n    l))", "user": "602049b8e4b0bf4ca6b10961"}, {"problem": 56, "code": "(fn ssp [ls]\n  (reduce #(cond (some #{%2} %1) %1\n            :else (conj %1 %2))\n            [] ls))", "user": "60228147e4b0d5df2af22202"}, {"problem": 56, "code": "(fn f [col]\n  (into [] (java.util.LinkedHashSet. col)))", "user": "6022844de4b0d5df2af22203"}, {"problem": 56, "code": "reduce #(if (some (fn [e] (= e %2)) %1)\n          %1\n          (conj %1 %2))\n       []", "user": "60096aabe4b074f607df667f"}, {"problem": 56, "code": "reduce\n  (fn [a n]\n      (if-not (some (set (list n)) a)\n        (conj a n)\n        a))\n  []", "user": "4e38f245535deb9a81d77f3e"}, {"problem": 56, "code": "(fn [szn]\n  (loop [s szn r '()]\n    (if (empty? s) r\n      (recur (rest s)\n             (if (some #(= % (first s)) r)\n               r\n               (concat r (list (first s))))))))", "user": "60264d89e4b0d5df2af2222d"}, {"problem": 56, "code": "(fn [xs] (reduce #(if (some (fn [e] (= e %2)) %1) %1 (conj %1 %2)) [] xs))", "user": "6026737ee4b0d5df2af2222f"}, {"problem": 56, "code": "(fn [col]\n  (reduce #(if (some #{%2} %1) %1 (conj %1 %2))\n          []\n          col))", "user": "5baba1ece4b0a20761a23482"}, {"problem": 56, "code": "reduce (fn [s e]\n  (if (some #(= % e) s)\n    s\n    (conj s e)))\n[]", "user": "601bdcb3e4b0bf4ca6b10930"}, {"problem": 56, "code": "(fn [x] (sort-by #(.indexOf x %)(keys (group-by identity x))))", "user": "60329afce4b0d5df2af222b8"}, {"problem": 56, "code": "(fn my-distinct [sequence]\n  (loop [s sequence\n         seen #{}\n         res []]\n    (if (empty? s)\n      res\n      (let [el (first s)]\n        (if (contains? seen el)\n          (recur (rest s) seen res)\n          (recur (rest s) (conj seen el) (conj res el)))))))", "user": "5fada7cce4b08cb800c85af5"}, {"problem": 56, "code": "(fn [coll]\n  (reduce #(if (some (partial = %2) %) % (concat % [%2])) (empty coll) coll))", "user": "602d5eade4b0d5df2af22279"}, {"problem": 56, "code": "(fn [c] (sort-by #(.indexOf c %) (keys (group-by identity c))))", "user": "5d62ce13e4b0c9e5857d501f"}, {"problem": 56, "code": "(fn foo [coll]\n        (loop [sett (set coll)\n              mapaa (zipmap sett (for [x (range (count coll))] 0)) \n              coll coll\n              res [] ]\n            (cond (empty? coll) res\n                  (= (mapaa (first coll)) 0)\n        \n                  \n                  (recur sett (assoc mapaa  (first coll) 12) \n                               (rest coll) (conj res (first coll)))\n                  :else (recur sett mapaa (rest coll) res)\n                  )\n            ))", "user": "6038b6b4e4b0d5df2af222ef"}, {"problem": 56, "code": "(fn [cl]\n  (let [seen (atom #{})]\n    (reduce\n      (fn [acc itm]\n        (if-not (contains? @seen itm)\n          (do (swap! seen conj itm)\n              (concat acc (list itm)))\n          acc\n          ))\n      '() cl)))", "user": "60436423e4b02d28681c77a3"}, {"problem": 56, "code": "(fn [s] (sort-by #(.indexOf s %) (map #(first %) (group-by identity s))))", "user": "55d1ec3ee4b0e31453f64a4c"}, {"problem": 56, "code": "(fn [xs]\n  (loop\n    [so-far []\n     seen #{}\n     xs xs]\n   \n    (if (empty? xs) so-far\n      \n      (if (seen (first xs))\n        (recur so-far seen (rest xs))\n        (recur (conj so-far (first xs)) (conj seen (first xs)) (rest xs))\n        )\n      \n      )\n    \n    ))", "user": "6045582fe4b02d28681c77b6"}, {"problem": 56, "code": "(fn [l]\n   (loop [s l\n          a []]\n     (if (empty? s) a\n         (if (some #{(first s)} a)\n           (recur (rest s) a)\n           (recur (rest s) (conj a (first s)))))))", "user": "603ae21de4b0d5df2af222fb"}, {"problem": 56, "code": "(fn [s]\n  (loop [acc []\n         col s]\n    (if (empty? col)\n      acc\n      (recur \n       (if (not (some #(= (first col) %) acc))\n         (conj acc (first col))\n         acc\n         )\n       (rest col)))))", "user": "5fc1c424e4b0edf42a5593d0"}, {"problem": 56, "code": "#(let [dst (fn [sq rs st]\n             (let [x (first sq)\n                   r (rest sq)\n                   nrs (if (get st x) rs (conj rs x))]\n               (if (seq r)\n                 (recur r nrs (conj st x))\n                 nrs)))]\n  (dst % [] #{}))", "user": "60471241e4b02d28681c77c9"}, {"problem": 56, "code": "(fn [l]\n  (last (reduce (fn [[set result] val]\n            (if (contains? set val)\n              [set result]\n              [(conj set val)\n               (conj result val)]))\n          [#{} []] l)))", "user": "60460824e4b02d28681c77bc"}, {"problem": 56, "code": "(partial reduce #(if (some (partial = %2) %) % (conj % %2)) [])", "user": "604d3cb1e4b0b7ec0ac60ac2"}, {"problem": 56, "code": "reduce #(if ((set %1)%2)\n          %1\n          (conj %1 %2))[]", "user": "60504383e4b056659d6341fa"}, {"problem": 56, "code": "(fn f [coll]\n   (reduce (fn [rs v] (if (some #{v} rs) rs (conj rs v))) [] coll))", "user": "60537cd1e4b04c8f2157d152"}, {"problem": 56, "code": "(fn my-distinct\n  [s]\n  (loop [result []\n         xs s]\n    (if (empty? xs)\n      result\n      (recur (if (some #(= (first xs) %) result)\n               result\n               (conj result (first xs)))\n             (rest xs)))))", "user": "4e586949535d8a8b8723a292"}, {"problem": 56, "code": "(fn my-distinct [coll]\n  ((fn step [[x & xs] seen]\n     (when x\n       (if (seen x)\n         (step xs seen)\n         (cons x (step xs (conj seen x)))))) coll #{}))", "user": "6051bcfae4b056659d634203"}, {"problem": 56, "code": "reduce #(if (some (partial = %2) %1) %1 (conj %1 %2)) []", "user": "605b7a90e4b079a07f8593fc"}, {"problem": 56, "code": "(fn __ [xs]\n  (loop [in xs out []]\n    (if (empty? in)\n      out\n      (recur (rest in)\n              (if (contains? (set out) (first in))\n                out\n                (concat out [(first in)]))))))", "user": "526759b3e4b03e8d9a4a715b"}, {"problem": 56, "code": "(fn\n  [s]\n  (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] s))", "user": "5ec02e20e4b00a66d4a95288"}, {"problem": 56, "code": "(fn [coll]\n      (reduce (fn [result val]\n                (if (some #(= % val) result)\n                  result\n                  (conj result val)))\n              []\n              coll))", "user": "5d5c2730e4b09db18d4482ea"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "5ff709e4e4b06df49cee149b"}, {"problem": 56, "code": "(fn remove-duplicates \n  ([s]\n   (remove-duplicates s #{}))\n  ([s cs]\n   (lazy-seq\n    (when (seq s)\n      (if-not (contains? cs (first s))\n        (cons (first s) (remove-duplicates (rest s) (conj cs (first s))))\n        (remove-duplicates (rest s) cs))))))", "user": "6066266de4b069485764ddd2"}, {"problem": 56, "code": "#(reduce (fn [a b]\n            (if ((set a)b)\n              a\n              (conj a b)\n              )) [] %)", "user": "54be7c0de4b0ed20f4ff6eec"}, {"problem": 56, "code": "(fn\n  [seq_]\n  (:out (reduce #(if (contains? (:seen %1) %2)\n                      %1\n                      (assoc %1 :out (conj (:out %1) %2) :seen (conj (:seen %1) %2))\n            )\n            {:out [] :seen #{}} seq_)\n   )\n  )", "user": "6059d824e4b07e92fa001acf"}, {"problem": 56, "code": "reduce #(if (contains? (set %) %2) % (conj % %2)) []", "user": "59adec09e4b0e1f4e384c897"}, {"problem": 56, "code": "(fn [coll]\n  ( reduce (fn [acc curr]\n             (if (some #{curr} acc)\n               acc\n               (conj acc curr))) \n           [] coll))", "user": "60654263e4b069485764ddc9"}, {"problem": 56, "code": "(fn problem-56\n  ([xs]\n   (problem-56 xs [] #{}))\n  ([[x & more] v s]\n   (cond \n\t (nil? x)\t\t\t\t\tv\n\t (and x (contains? s x))\t(recur more v s)\n\t :else\t\t\t\t\t\t(recur more (conj v x) (conj s x)))))", "user": "5d669613e4b0db5d338d15ea"}, {"problem": 56, "code": "(fn [s] \r\n  (reduce \r\n    (fn [prev x]\r\n      (if (some #(= x %) prev)\r\n        prev\r\n        (concat prev (list x))))\r\n    []\r\n    s))", "user": "606e0a42e4b069485764de19"}, {"problem": 56, "code": "(fn [xs] (first (reduce (fn [[r s :as rs] x] (if (s x) rs [(conj r x) (conj s x)]))  [[] #{}] xs)))", "user": "51435753e4b0c172af7558d5"}, {"problem": 56, "code": "(fn mydedup [s]\n  (second (reduce \n     (fn [[vals-map res] x] \n       (if (vals-map x)\n         [vals-map res]\n         [(assoc vals-map x 1) (conj res x)])) \n     [{} []] s)))", "user": "60606490e4b03746e80ebf67"}, {"problem": 56, "code": "(fn find-distinct-items\n   [coll]\n   (loop [coll coll\n          temp {}\n          result []]\n     (if (empty? coll)\n       result\n       (let [first-element (first coll)]\n         (if (contains? temp first-element)\n           (recur (rest coll) temp result)\n           (recur (rest coll) (assoc temp first-element true) (conj result first-element)))))))", "user": "60631c2ee4b069485764ddbd"}, {"problem": 56, "code": "(fn find-distinct-items                                   \n  [coll]\n  (reduce (fn [my-list item]\n            (if (nil? (some #{item} my-list))\n              (conj my-list item)\n              my-list)) [] coll))", "user": "60396c95e4b0d5df2af222f4"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "606c87aae4b069485764de0d"}, {"problem": 56, "code": "reduce #(if (some #{%2} %1) %1 (conj %1 %2)) []", "user": "60689984e4b069485764dde6"}, {"problem": 56, "code": "(fn [s]\n    ;; confusing! some vs contains?\n    (reduce (fn [a v]\n              (if (some #{v} a)\n                a\n                (conj a v)))\n            []\n            s))", "user": "6026d2cae4b0d5df2af22232"}, {"problem": 56, "code": "(partial reduce #(if (some (partial = %2) %1) %1 (conj %1 %2)) [])", "user": "606b16b8e4b069485764ddf7"}, {"problem": 56, "code": "reduce #(if ((set %1) %2)\n          %1 \n          (conj %1 %2)) \n[]", "user": "606ff89be4b069485764de22"}, {"problem": 56, "code": "(fn [coll]\n  (reduce (fn [coll x]\n            (if (some\n                  (partial = x)\n                  coll)\n                coll\n                (conj coll x)))\n              []\n              coll))", "user": "605f5c69e4b03746e80ebf5e"}, {"problem": 56, "code": "reduce (fn conj1 [x y] (if (some (partial = y) x) x (conj x y)) ) []", "user": "6076adb2e4b069485764de60"}, {"problem": 56, "code": "(fn f\n   ([c] (f #{} c []))\n   ([visited c res]\n    (if (empty? c)\n      res\n      (if (contains? visited (first c))\n        (f visited (drop 1 c) res)\n        (f (conj visited (first c)) (drop 1 c) (conj res (first c))))))\n   )", "user": "607bd80be4b0a637ed780379"}, {"problem": 56, "code": "(fn [coll]\n  (loop [c coll seen #{} r []]\n    (if (empty? c)\n      r\n      (recur (rest c) (conj seen (first c)) (if (contains? seen (first c)) r (conj r (first c)))))))", "user": "606a70a5e4b069485764ddf2"}, {"problem": 56, "code": "(fn [rando-seq]\n  (loop [x rando-seq y '()]\n    (if (empty? x)\n      (reverse y)\n      (recur (rest x)\n             (if (some #(= (first x) %) y)\n               y\n               (conj y (first x)))))))", "user": "607d6bc1e4b03d835a6eaecc"}, {"problem": 56, "code": "(fn [coll]\n  (reduce (fn [result elem]\n            (if-not (contains? (set result) elem)\n              (concat result [elem])\n              result))\n          []\n          coll))", "user": "60794173e4b0a637ed78035d"}, {"problem": 56, "code": "(fn my-distinct [coll]\n  (->> coll\n       (reduce (fn [[agg s] v] (if (s v)\n                                 [agg s]\n                                 [(conj agg v) (conj s v)]))\n               [[] #{}])\n       first))", "user": "608256d7e4b0736b099e42da"}, {"problem": 56, "code": "(fn [coll] (loop [distnct '(), to-check (rest coll), this-item (first coll)]\n             (cond (nil? this-item) (reverse distnct)\n                   (some (partial = this-item) distnct) (recur distnct (rest to-check) (first to-check))\n                   :else (recur (cons this-item distnct) (rest to-check) (first to-check)))))", "user": "5f548678e4b0a0bc16850a7e"}, {"problem": 56, "code": "(fn [seq]\n  (reduce #(if (some #{%2} %1) %1 (conj %1 %2)) [] seq))", "user": "60849bd6e4b0736b099e42f2"}, {"problem": 56, "code": "(fn [seq]\n  (loop [set #{}\n         seq seq\n         accum []]\n    (cond (empty? seq) accum\n          (get set (first seq)) (recur set (rest seq) accum)\n          :else (recur\n                 (conj set (first seq))\n                 (rest seq)\n                 (conj accum (first seq))))))", "user": "5f0aa72de4b09a3f05b71808"}, {"problem": 56, "code": "#(reduce \n    (fn [x y] (if (= (some #{y} x) nil) (conj x y) x)) \n    [] \n    %1)", "user": "60845eb8e4b0736b099e42ef"}, {"problem": 56, "code": "(fn [col]\n   (loop [foo col\n          m #{}\n          ret []]\n     (if (empty? foo)\n       ret\n       (let [a (first foo)]\n         (if (m a)\n           (recur (rest foo) m ret)\n           (recur (rest foo) (conj m a) (conj ret a)))))))", "user": "608e3bf7e4b03bd49d9f36bd"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "6088395de4b0ae75613dcee2"}, {"problem": 56, "code": "(fn [coll]\n   (let [step (fn step [xs seen]\n                (lazy-seq\n                  ((fn [[f :as xs] seen]\n                     (when-let [s (seq xs)]\n                       (if (contains? seen f)\n                         (recur (rest s) seen)\n                         (cons f (step (rest s) (conj seen f))))))\n                   xs seen)))]\n     (step coll #{})))", "user": "6093b56ce4b00e9e6653c3e0"}, {"problem": 56, "code": "(fn [coll]\n  (reduce \n   (fn [acc a] \n     (if (.contains acc a) acc (conj acc a)))\n   [] coll))", "user": "5f82609ae4b0c071e6c840f9"}, {"problem": 56, "code": "#(loop [[f & c] %\n         res []]\n    (if f\n      (recur c (if (.contains res f) res (conj res f)))\n      res))", "user": "5eff339ae4b0cf489e8d7f0c"}, {"problem": 56, "code": "(fn [xs]\n  (reduce \n   (fn [acc x] (if (some #(= x %) acc) acc (conj acc x))) \n   [] xs))", "user": "5fb46916e4b08cb800c85b46"}, {"problem": 56, "code": "#(->> %\n      (reduce (fn [acc v] (if ((:in acc) v) acc\n                              {:in (-> acc :in (conj v))\n                               :res (-> acc :res (conj v))}))\n              {:in #{} :res []} )\n      :res)", "user": "609e01afe4b00e9e6653c420"}, {"problem": 56, "code": "(fn my-distinct\n  [coll]\n  (let [[result _]\n        (reduce\n          (fn [[result cache] x]\n            (if (contains? cache x)\n              [result cache]\n              [(conj result x) (conj cache x)]))\n          [[] #{}]\n          coll)]\n    result))", "user": "6098263be4b00e9e6653c3f9"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "609aa543e4b00e9e6653c40c"}, {"problem": 56, "code": "(fn spotdis [c]\n  (let [result []]\n    ((fn collectfirst [l, r]\n      (if (empty? l)\n        r\n        (let [f (first l)]\n          (collectfirst (filter #(not= f %) l) (conj r f))))) c result)))", "user": "60882700e4b0ae75613dcedf"}, {"problem": 56, "code": "(fn [coll]\n  (sort-by #(.indexOf coll %1) (keys (group-by identity coll))))", "user": "608ec5e4e4b03bd49d9f36c0"}, {"problem": 56, "code": "(fn [xs]\n      (into (empty xs) (:items (reduce\n                                (fn [{:keys [seen] :as state} at]\n                                  (if (not (seen at))\n                                    (-> state\n                                        (update-in [:items] #(conj %1 at))\n                                        (update-in [:seen] #(conj %1 at)))\n                                    state))\n                                {:seen #{}, :items (empty xs)}\n                                xs))))", "user": "5db35f85e4b010eb3c36cd22"}, {"problem": 56, "code": "(fn [items]\n  (loop [sq items seen #{} acc []]\n    (if (empty? sq)\n      acc\n      (recur (rest sq) (conj seen (first sq)) (if (contains? seen (first sq)) acc (conj acc (first sq)))))))", "user": "60b2aaebe4b0e0fa5f1b4228"}, {"problem": 56, "code": "(fn [col]\n (reduce (fn [xs x] (if (some #(= x %) xs) xs (conj xs x))) [] col))", "user": "60b7e2c5e4b0e0fa5f1b4252"}, {"problem": 56, "code": "(fn [s]\n  (loop [index 0 result [] helper-set #{}]\n    (if (< index (count s))\n      (recur (inc index) ((fn [result]\n                            (if (contains? helper-set (nth s index))\n                              result\n                              (conj result (nth s index)))) result) (conj helper-set (nth s index)))\n      result)))", "user": "60b8b0f8e4b0e0fa5f1b425c"}, {"problem": 56, "code": "reduce (fn [col item]\n          (if (some #{item} col)\n            col\n            (conj col item))) []", "user": "60ac91c5e4b00e9e6653c485"}, {"problem": 56, "code": "(fn [v]\n  (reduce (fn [a b] (if (.contains a b) a (conj a b))) [] v))", "user": "60aecd73e4b00e9e6653c49a"}, {"problem": 56, "code": "(fn my-distinct [x] (if (-> x (count) (<= 1))\n           x\n           (cons (first x) (my-distinct (remove #(= (first x) %) (rest x))))\n           ))", "user": "6093cc08e4b00e9e6653c3e1"}, {"problem": 56, "code": "(fn [coll]\n  (reduce (fn [acc x]\n            (if (some #(= % x) acc)\n              acc\n              (conj acc x)))\n          []\n          coll))", "user": "60b57acee4b0e0fa5f1b4238"}, {"problem": 56, "code": "(fn distinct* [coll]\n  (loop [out []\n         coll coll]\n    (let [head (first coll)\n          tail (rest  coll)]\n      (if head\n        (if (some #{head} out)\n          (recur out tail)\n          (recur (conj out head) tail))\n        out))))", "user": "60b66033e4b0e0fa5f1b4248"}, {"problem": 56, "code": "(fn [coll] (if (> (count coll) 5)\n             (sort (map first (frequencies coll)))\n             (map first (frequencies coll))))", "user": "5f8e2a08e4b0715f5002d767"}, {"problem": 56, "code": "(fn [sq]\n  (loop [res []\n         rmd sq]\n    (if (empty? rmd)\n      res\n      (let [[x & xs] rmd\n            xs-filt (filter #(not= x %) xs)]\n        (recur (conj res x) xs-filt)))))", "user": "51b920bfe4b0e871ca4958f9"}, {"problem": 56, "code": "(fn find-distinct\n  [col]\n  (loop [[next & rest] col result []]\n    (if (not next)\n      result\n      (if (not (some #{next} result))\n        (recur rest (conj result next))\n        (recur rest result)\n        ))))", "user": "60bf7458e4b0e0fa5f1b4296"}, {"problem": 56, "code": "#(loop [i 0 res []]\n        (if (< i (count %))\n          (recur (inc i) (if (some (partial = (nth % i)) res) \n                           res\n                           (conj res (nth % i))))\n          res))", "user": "5fd92743e4b05ac5b16ea11f"}, {"problem": 56, "code": "(fn\n  [coll]\n  (loop [rest-coll (rest coll)\n         dist-coll [(first coll)]\n         dist-set #{(first coll)}]\n    (if (empty? rest-coll)\n      dist-coll\n      (let [first-elem (first rest-coll)]\n        (if (dist-set first-elem)\n          (recur (rest rest-coll) dist-coll dist-set)\n          (recur (rest rest-coll)\n                 (conj dist-coll first-elem)\n                 (conj dist-set first-elem)))))))", "user": "60b1add0e4b0e0fa5f1b4227"}, {"problem": 56, "code": "(partial reduce (fn [acc n] (if ((set acc) n) acc (conj acc n))) [])", "user": "60c0ceb7e4b0e0fa5f1b42a6"}, {"problem": 56, "code": "(fn hey [y x]\n   (if (> (count x) 0)\n     (hey (if-not (some #{(first x)} y) (conj y (first x)) y) (drop 1 x)) y)) []", "user": "60b3b375e4b0e0fa5f1b4232"}, {"problem": 56, "code": "(fn [xs]\n  (reduce (fn [acc item]\n           (if-not (some #{item} acc)\n             (conj acc item)\n             acc)) [] xs)\n  )", "user": "558ffb4be4b0277789237667"}, {"problem": 56, "code": "(fn [s] \n  (if (empty? \n       (filter #(> (count %) 1) \n               (partition-by identity (sort s)))) \n    s (keys (frequencies s))))", "user": "5fa80c01e4b0fa27300f3de2"}, {"problem": 56, "code": "(fn [lst] \n   (into [] (sort-by #(.indexOf lst %) \n             (into #{} lst) )) )", "user": "608e5697e4b03bd49d9f36be"}, {"problem": 56, "code": "#(reduce (fn [a x] (if (.contains a x) a (conj a x))) [] %)", "user": "51bd78c3e4b0ff155d51d2b0"}, {"problem": 56, "code": "#(sort-by (fn [i] (.indexOf % i)) (map first (group-by identity %)))", "user": "60bfb68be4b0e0fa5f1b429e"}, {"problem": 56, "code": "reduce #(if ((set %1) %2) %1 (conj %1 %2)) []", "user": "60c9a411e4b0e0fa5f1b4307"}, {"problem": 56, "code": "(fn my-distinct [xs]\n  (loop [[x & others] xs\n         acc []]\n    (cond\n      (nil? x) acc\n      (some #{x} acc) (recur others acc)\n      :else (recur others (conj acc x)))))", "user": "60c91f48e4b0e0fa5f1b4304"}, {"problem": 56, "code": "(fn only-distinct [col]\n  (reduce (fn [xs item] (if (some #(= item %1) xs) xs (conj xs item)))\n          [] col))", "user": "608c270ae4b03bd49d9f36b3"}, {"problem": 56, "code": "(fn find-distinct-items-2\n  ;; returns sequence with distinct items with their order maintained.\n  ([v] (find-distinct-items-2 v []))\n  ([v m] (if (= v []) m\n             (if (= (some #(= (first v) %) m) true)\n               (find-distinct-items-2 (rest v) m)\n               (find-distinct-items-2 (rest v) (conj m (first v)))))))", "user": "60c86bbde4b0e0fa5f1b42fb"}, {"problem": 56, "code": "(fn my-distinct-2\n  [coll]\n  (reduce (fn [res x]\n            (if ((set res) x)                               ;; we can use the set as a verb to check existence of elements\n              res\n              (conj res x)))\n          [] coll))", "user": "60c43b20e4b0e0fa5f1b42c9"}]